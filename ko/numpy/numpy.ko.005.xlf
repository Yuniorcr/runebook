<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="numpy">
    <body>
      <group id="numpy">
        <trans-unit id="566c08ff5cbfc7563b6ec48f86b77d9828806bcb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;unused&lt;/strong&gt; &amp;ndash; Unused and present for backwards compatibility of the C-API.</source>
          <target state="translated">&lt;strong&gt;미사용&lt;/strong&gt; &amp;ndash; 사용하지 않으며 C-API의 이전 버전과의 호환성을 위해 존재합니다.</target>
        </trans-unit>
        <trans-unit id="2fe8c102c8793c67d6746562319d7cce28d3e604" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;value&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;value&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="212034ee3710f83d787575e7a3119ff8c1718007" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;values: array_like (Ni&amp;hellip;, J, Nk&amp;hellip;)&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;값 : array_like (Ni&amp;hellip;, J, Nk&amp;hellip;)&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3dc38d803fcdf5b4457864347438f926098e055a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;var&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;var&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ece35df348f32a862697a3ca07ca318c2719b8c6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;version&lt;/strong&gt; (required)</source>
          <target state="translated">&lt;strong&gt;버전&lt;/strong&gt; (필수)</target>
        </trans-unit>
        <trans-unit id="a50b66227821134be63cdc8c83fee8ce7c311e86" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;weekmask or holidays. The attributes return copies of internal data.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;마스크 또는 휴일. 속성은 내부 데이터의 사본을 리턴합니다.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6afa5fd008afa469686c9e7fb95f9ddcee12a5f4" translate="yes" xml:space="preserve">
          <source>= location and</source>
          <target state="translated">= location and</target>
        </trans-unit>
        <trans-unit id="0973e6133866853f9e6256eba9d72c9151694397" translate="yes" xml:space="preserve">
          <source>= scale.</source>
          <target state="translated">= scale.</target>
        </trans-unit>
        <trans-unit id="dbae4b50ad6ac0a0e515dead61dcef253fcc6db1" translate="yes" xml:space="preserve">
          <source>= the result of iterating &lt;code&gt;j&lt;/code&gt; over</source>
          <target state="translated">= the result of iterating &lt;code&gt;j&lt;/code&gt; over</target>
        </trans-unit>
        <trans-unit id="cde6a5f915926c219c9ad1caeba15367682dad41" translate="yes" xml:space="preserve">
          <source>A &amp;ldquo;traditional&amp;rdquo; example:</source>
          <target state="translated">&amp;ldquo;전통적인&amp;rdquo;예 :</target>
        </trans-unit>
        <trans-unit id="654e39aa1416e4a99699a4c806db40cb3e673a19" translate="yes" xml:space="preserve">
          <source>A 1- or 2-d array_like</source>
          <target state="translated">1 차원 배열 또는 2 차원 배열</target>
        </trans-unit>
        <trans-unit id="024da60a5572fbcd0de36246055b7067f7d49cbc" translate="yes" xml:space="preserve">
          <source>A 1-D array, containing the elements of the input, is returned. A copy is made only if needed.</source>
          <target state="translated">입력 요소를 포함하는 1 차원 배열이 반환됩니다. 필요한 경우에만 사본이 작성됩니다.</target>
        </trans-unit>
        <trans-unit id="05915b878480d5cbbd9d515ad9e6d4ff95cf41d7" translate="yes" xml:space="preserve">
          <source>A 1-D flat iterator for Arrayterator objects.</source>
          <target state="translated">Arrayterator 객체 용 1D 평면 반복기입니다.</target>
        </trans-unit>
        <trans-unit id="e94e5e444e4a89c91179830906b14e4b95c7f975" translate="yes" xml:space="preserve">
          <source>A 1-D flat iterator over the array.</source>
          <target state="translated">배열 위의 1D 평면 반복자.</target>
        </trans-unit>
        <trans-unit id="080d28fe39f0db76a9a09d5b0de0f2cfd772f02d" translate="yes" xml:space="preserve">
          <source>A 1-D flat iterator over the matrix.</source>
          <target state="translated">행렬 위의 1 차원 평면 반복자.</target>
        </trans-unit>
        <trans-unit id="03f8ab17663e982d06a46c4b01d02b934e42bf4b" translate="yes" xml:space="preserve">
          <source>A 1-D iterator over the array.</source>
          <target state="translated">배열에서 1D 반복자입니다.</target>
        </trans-unit>
        <trans-unit id="5f4c8f5af8234daf63ac87fac41bf34728e2a4a8" translate="yes" xml:space="preserve">
          <source>A 1-D or 2-D array containing multiple variables and observations. Each row of &lt;code&gt;m&lt;/code&gt; represents a variable, and each column a single observation of all those variables. Also see &lt;code&gt;rowvar&lt;/code&gt; below.</source>
          <target state="translated">여러 변수 및 관측치가 포함 된 1 차원 또는 2 차원 배열입니다. &lt;code&gt;m&lt;/code&gt; 의 각 행은 변수를 나타내고 각 열은 모든 변수에 대한 단일 관찰입니다. 아래 &lt;code&gt;rowvar&lt;/code&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="cebacd166002a0aab793729a826968ad21540978" translate="yes" xml:space="preserve">
          <source>A 1-D or 2-D array containing multiple variables and observations. Each row of &lt;code&gt;x&lt;/code&gt; represents a variable, and each column a single observation of all those variables. Also see &lt;code&gt;rowvar&lt;/code&gt; below.</source>
          <target state="translated">여러 변수 및 관측치가 포함 된 1 차원 또는 2 차원 배열입니다. &lt;code&gt;x&lt;/code&gt; 의 각 행은 변수를 나타내고 각 열은 모든 변수에 대한 단일 관찰입니다. 아래 &lt;code&gt;rowvar&lt;/code&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="3a0a346ddaabdf9157361bcef554a19793288c12" translate="yes" xml:space="preserve">
          <source>A 2-D example:</source>
          <target state="translated">2 차원 예 :</target>
        </trans-unit>
        <trans-unit id="1dcf8fe375a813c5bfbdff5bbb67bdacfa9f426d" translate="yes" xml:space="preserve">
          <source>A 2-dimensional array of size 2 x 3, composed of 4-byte integer elements:</source>
          <target state="translated">4 바이트 정수 요소로 구성된 2 x 3 크기의 2 차원 배열 :</target>
        </trans-unit>
        <trans-unit id="cc6cebe7eb915060fc6496dd11b4201c6171b95b" translate="yes" xml:space="preserve">
          <source>A 2-tuple of ints, iaxis_pad_width[0] represents the number of values padded at the beginning of vector where iaxis_pad_width[1] represents the number of values padded at the end of vector.</source>
          <target state="translated">정수의 2 튜플 인 iaxis_pad_width [0]은 벡터의 시작 부분에 채워지는 값의 수를 나타내며, iaxis_pad_width [1]은 벡터의 끝에 채워진 값의 수를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="2152806df29fad5ea3c51b85e6a2d449bd3debf7" translate="yes" xml:space="preserve">
          <source>A 2-tuple whose first argument is an integer (a long integer if necessary) that points to the data-area storing the array contents. This pointer must point to the first element of data (in other words any offset is always ignored in this case). The second entry in the tuple is a read-only flag (true means the data area is read-only).</source>
          <target state="translated">첫 번째 인수가 배열 내용을 저장하는 데이터 영역을 가리키는 정수 (필요한 경우 긴 정수) 인 2- 튜플입니다. 이 포인터는 데이터의 첫 번째 요소를 가리켜 야합니다 (즉,이 경우 오프셋은 항상 무시됩니다). 튜플의 두 번째 항목은 읽기 전용 플래그입니다 (true는 데이터 영역이 읽기 전용임을 의미).</target>
        </trans-unit>
        <trans-unit id="b93bf653bc1902857eef1ccac3f5d09491253e5b" translate="yes" xml:space="preserve">
          <source>A 3-D example:</source>
          <target state="translated">3 차원 예 :</target>
        </trans-unit>
        <trans-unit id="56a85df542f6e0ae1b5dff43196ef149fd4fac69" translate="yes" xml:space="preserve">
          <source>A 3-dimensional array of size 3 x 3 x 3, summed over each of its three axes</source>
          <target state="translated">3 x 3 x 3 크기의 3 차원 배열로 3 개의 축 각각에 합산</target>
        </trans-unit>
        <trans-unit id="549cb93636e34bdf02245b26cee07ee2514370b9" translate="yes" xml:space="preserve">
          <source>A :c:type: &lt;code&gt;PyCObject&lt;/code&gt; whose &lt;code&gt;voidptr&lt;/code&gt; member contains a pointer to a filled &lt;a href=&quot;c-api.types-and-structures#c.PyArrayInterface&quot;&gt;&lt;code&gt;PyArrayInterface&lt;/code&gt;&lt;/a&gt; structure. Memory for the structure is dynamically created and the &lt;code&gt;PyCObject&lt;/code&gt; is also created with an appropriate destructor so the retriever of this attribute simply has to apply &lt;a href=&quot;https://docs.python.org/dev/c-api/refcounting.html#c.Py_DECREF&quot;&gt;&lt;code&gt;Py_DECREF&lt;/code&gt;&lt;/a&gt; to the object returned by this attribute when it is finished. Also, either the data needs to be copied out, or a reference to the object exposing this attribute must be held to ensure the data is not freed. Objects exposing the &lt;code&gt;__array_struct__&lt;/code&gt; interface must also not reallocate their memory if other objects are referencing them.</source>
          <target state="translated">A : C : 형식 : &lt;code&gt;PyCObject&lt;/code&gt; 그 &lt;code&gt;voidptr&lt;/code&gt; 회원 채워진 포인터 포함 &lt;a href=&quot;c-api.types-and-structures#c.PyArrayInterface&quot;&gt; &lt;code&gt;PyArrayInterface&lt;/code&gt; 의&lt;/a&gt; 구조. 구조에 대한 메모리가 동적으로 작성되고 적절한 소멸자를 사용 하여 &lt;code&gt;PyCObject&lt;/code&gt; 도 작성 &lt;a href=&quot;https://docs.python.org/dev/c-api/refcounting.html#c.Py_DECREF&quot;&gt; &lt;code&gt;Py_DECREF&lt;/code&gt; &lt;/a&gt; 속성의 검색기는 Py_DECREF 를 완료 할 때이 속성이 리턴 한 오브젝트 에 적용하기 만하면 됩니다. 또한 데이터를 복사하거나 데이터가 해제되지 않도록이 속성을 노출하는 개체에 대한 참조를 보유해야합니다. &lt;code&gt;__array_struct__&lt;/code&gt; 인터페이스를 노출하는 객체는 다른 객체가 참조하는 경우 메모리를 재 할당해서는 안됩니다.</target>
        </trans-unit>
        <trans-unit id="f11f88290206147b1d2292d3cc2fdf906b6395b9" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;#numpy.flatiter&quot;&gt;&lt;code&gt;flatiter&lt;/code&gt;&lt;/a&gt; iterator can not be constructed directly from Python code by calling the &lt;a href=&quot;#numpy.flatiter&quot;&gt;&lt;code&gt;flatiter&lt;/code&gt;&lt;/a&gt; constructor.</source>
          <target state="translated">&lt;a href=&quot;#numpy.flatiter&quot;&gt; &lt;code&gt;flatiter&lt;/code&gt; &lt;/a&gt; 반복자는 호출하여 파이썬 코드에서 직접 구성 할 수없는 &lt;a href=&quot;#numpy.flatiter&quot;&gt; &lt;code&gt;flatiter&lt;/code&gt; 의&lt;/a&gt; 생성자를.</target>
        </trans-unit>
        <trans-unit id="04e500f693744c615f08a5f51c892405f5d5b306" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;#numpy.flatiter&quot;&gt;&lt;code&gt;flatiter&lt;/code&gt;&lt;/a&gt; iterator is returned by &lt;code&gt;x.flat&lt;/code&gt; for any array &lt;code&gt;x&lt;/code&gt;. It allows iterating over the array as if it were a 1-D array, either in a for-loop or by calling its &lt;code&gt;next&lt;/code&gt; method.</source>
          <target state="translated">&lt;a href=&quot;#numpy.flatiter&quot;&gt; &lt;code&gt;flatiter&lt;/code&gt; 의&lt;/a&gt; 반복자 의해 반환 &lt;code&gt;x.flat&lt;/code&gt; 모든 어레이에 대해 &lt;code&gt;x&lt;/code&gt; . for 루프에서 또는 &lt;code&gt;next&lt;/code&gt; 메소드 를 호출하여 1 차원 배열 인 것처럼 배열을 반복 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="95d941e878ab7108e7bbf0d91be33cc4179ce09f" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;#numpy.ma.MaskedArray.fill_value&quot;&gt;&lt;code&gt;fill_value&lt;/code&gt;&lt;/a&gt;, a value that may be used to replace the invalid entries in order to return a standard &lt;a href=&quot;generated/numpy.ndarray#numpy.ndarray&quot;&gt;&lt;code&gt;numpy.ndarray&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#numpy.ma.MaskedArray.fill_value&quot;&gt; &lt;code&gt;fill_value&lt;/code&gt; 를&lt;/a&gt; 표준 반환하기 위해 잘못된 항목을 대체 할 수있는 값 &lt;a href=&quot;generated/numpy.ndarray#numpy.ndarray&quot;&gt; &lt;code&gt;numpy.ndarray&lt;/code&gt; 을&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="e0c0e6b144ca0dcf2ee709917a46a6ccb8b09579" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../maskedarray.baseclass#numpy.ma.MaskedArray&quot;&gt;&lt;code&gt;MaskedArray&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">&lt;a href=&quot;../maskedarray.baseclass#numpy.ma.MaskedArray&quot;&gt; &lt;code&gt;MaskedArray&lt;/code&gt; 의&lt;/a&gt; 객체입니다.</target>
        </trans-unit>
        <trans-unit id="28900dc17201a4b7d2d4e25e648ec5859c4a33a8" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;http://www.swig.org&quot;&gt;SWIG&lt;/a&gt; interface file that includes the &lt;a href=&quot;http://www.swig.org&quot;&gt;SWIG&lt;/a&gt; directives given above will produce wrapper code that looks something like:</source>
          <target state="translated">위에 주어진 &lt;a href=&quot;http://www.swig.org&quot;&gt;SWIG&lt;/a&gt; 지시문 을 포함 하는 &lt;a href=&quot;http://www.swig.org&quot;&gt;SWIG&lt;/a&gt; 인터페이스 파일 은 다음과 같은 래퍼 코드를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="4f3b0be790d0fdf5f3b2fb4de6fcbf8a68d09af2" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;http://www.swig.org&quot;&gt;SWIG&lt;/a&gt; macro (&lt;code&gt;%numpy_typemaps&lt;/code&gt;) with three arguments for implementing the 74 argument signatures for the user&amp;rsquo;s choice of (1) C data type, (2) NumPy data type (assuming they match), and (3) dimension type.</source>
          <target state="translated">사용자가 (1) C 데이터 유형, (2) NumPy 데이터 유형 (일치한다고 가정) 및 (3) 차원 유형의 선택에 대해 74 개의 인수 서명을 구현하기위한 세 개의 &lt;code&gt;%numpy_typemaps&lt;/code&gt; 있는 &lt;a href=&quot;http://www.swig.org&quot;&gt;SWIG&lt;/a&gt; 매크로 ( % numpy_typemaps )</target>
        </trans-unit>
        <trans-unit id="05e1d33a8a4d82642a6d603db2c91670f3c4706f" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;numpy.busdaycalendar#numpy.busdaycalendar&quot;&gt;&lt;code&gt;busdaycalendar&lt;/code&gt;&lt;/a&gt; object which specifies the valid days. If this parameter is provided, neither weekmask nor holidays may be provided.</source>
          <target state="translated">유효한 일을 지정 하는 &lt;a href=&quot;numpy.busdaycalendar#numpy.busdaycalendar&quot;&gt; &lt;code&gt;busdaycalendar&lt;/code&gt; &lt;/a&gt; 객체입니다. 이 매개 변수가 제공되면 주 마스크 나 휴일을 제공 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="69e74f3240b3d2bc71fd1a27edc06864a12be76b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;(d0, d1, ..., dn)&lt;/code&gt;-shaped array of floating-point samples from the standard normal distribution, or a single such float if no parameters were supplied.</source>
          <target state="translated">&lt;code&gt;(d0, d1, ..., dn)&lt;/code&gt; 표준 정규 분포로부터 부동 소수점 샘플 모양 배열 또는 매개 변수가 공급되어 있지 않은 경우, 하나의 이러한 로트.</target>
        </trans-unit>
        <trans-unit id="6baa143c5214b0736e3c20c3d4d2133fd2d5b196" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;n&lt;/code&gt; x &lt;code&gt;M&lt;/code&gt; matrix where all elements are equal to zero, except for the &lt;code&gt;k&lt;/code&gt;-th diagonal, whose values are equal to one.</source>
          <target state="translated">&lt;code&gt;n&lt;/code&gt; 은 X &lt;code&gt;M&lt;/code&gt; 의 모든 요소가 0이다 매트릭스를 제외한 &lt;code&gt;k&lt;/code&gt; 번째 대각 값을 가진 것과 동일하다.</target>
        </trans-unit>
        <trans-unit id="1340f5e4772d7953f77838549f8ae4823c3c29fc" translate="yes" xml:space="preserve">
          <source>A BitGenerator provides a stream of random values. In order to generate reproducible streams, BitGenerators support setting their initial state via a seed. All of the provided BitGenerators will take an arbitrary-sized non-negative integer, or a list of such integers, as a seed. BitGenerators need to take those inputs and process them into a high-quality internal state for the BitGenerator. All of the BitGenerators in numpy delegate that task to &lt;a href=&quot;generated/numpy.random.seedsequence#numpy.random.SeedSequence&quot;&gt;&lt;code&gt;SeedSequence&lt;/code&gt;&lt;/a&gt;, which uses hashing techniques to ensure that even low-quality seeds generate high-quality initial states.</source>
          <target state="translated">BitGenerator는 임의의 값 스트림을 제공합니다. 재현 가능한 스트림을 생성하기 위해 BitGenerator는 시드를 통해 초기 상태 설정을 지원합니다. 제공된 모든 BitGenerator는 임의 크기의 음이 아닌 정수 또는 이러한 정수 목록을 시드로 사용합니다. BitGenerator는 해당 입력을 가져와 BitGenerator의 고품질 내부 상태로 처리해야합니다. numpy의 모든 BitGenerator는 해당 작업을 &lt;a href=&quot;generated/numpy.random.seedsequence#numpy.random.SeedSequence&quot;&gt; &lt;code&gt;SeedSequence&lt;/code&gt; 에&lt;/a&gt; 위임 합니다. 해시 기술을 사용하여 품질이 낮은 시드라도 고품질 초기 상태를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="13fa9801a3e658bde1343a6710ebd94019b0e987" translate="yes" xml:space="preserve">
          <source>A BitGenerator should call this method in its constructor with an appropriate &lt;code&gt;n_words&lt;/code&gt; parameter to properly seed itself.</source>
          <target state="translated">BitGenerator는 적절한 &lt;code&gt;n_words&lt;/code&gt; 매개 변수를 사용하여 생성자에서이 메서드를 호출하여 자체 시드를 수행해야합니다.</target>
        </trans-unit>
        <trans-unit id="a2c89b0af7257bacc92f4242dd8f1ed7de4e6a82" translate="yes" xml:space="preserve">
          <source>A Chebyshev series class.</source>
          <target state="translated">체비 쇼프 시리즈 클래스.</target>
        </trans-unit>
        <trans-unit id="2e5a3fc40b8c00875c7adc6fafc877312612fb23" translate="yes" xml:space="preserve">
          <source>A Common Example</source>
          <target state="translated">일반적인 예</target>
        </trans-unit>
        <trans-unit id="c78f058bb1e26a110b25c03cc8d4fb8973dcf766" translate="yes" xml:space="preserve">
          <source>A Final Note</source>
          <target state="translated">마지막 노트</target>
        </trans-unit>
        <trans-unit id="ecd3cc1095a7280cde1f0d6c177498d32c136fd7" translate="yes" xml:space="preserve">
          <source>A Laguerre series class.</source>
          <target state="translated">Laguerre 시리즈 클래스.</target>
        </trans-unit>
        <trans-unit id="f400cf9c7b159d607ff23b034ffd4be1a606224f" translate="yes" xml:space="preserve">
          <source>A Legendre series class.</source>
          <target state="translated">Legendre 시리즈 클래스.</target>
        </trans-unit>
        <trans-unit id="f99e7b91acb5be86a4e5f503122861650a2ccb0d" translate="yes" xml:space="preserve">
          <source>A MaskedArray is always returned, regardless of the input type.</source>
          <target state="translated">입력 유형에 관계없이 항상 MaskedArray가 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="d620fcc0619adea6d0d19bc96c8ee23d44af8093" translate="yes" xml:space="preserve">
          <source>A Python object describing the data-type in more detail (same as the &lt;em&gt;descr&lt;/em&gt; key in &lt;a href=&quot;arrays.interface#__array_interface__&quot;&gt;&lt;code&gt;__array_interface__&lt;/code&gt;&lt;/a&gt;). This can be &lt;code&gt;NULL&lt;/code&gt; if &lt;em&gt;typekind&lt;/em&gt; and &lt;em&gt;itemsize&lt;/em&gt; provide enough information. This field is also ignored unless &lt;code&gt;ARR_HAS_DESCR&lt;/code&gt; flag is on in &lt;em&gt;flags&lt;/em&gt;.</source>
          <target state="translated">보다 구체적으로, 데이터 타입 (같 설명 파이썬 객체 &lt;em&gt;DESCR의&lt;/em&gt; 키 &lt;a href=&quot;arrays.interface#__array_interface__&quot;&gt; &lt;code&gt;__array_interface__&lt;/code&gt; 을&lt;/a&gt; ). &lt;em&gt;typekind&lt;/em&gt; 및 &lt;em&gt;itemsize&lt;/em&gt; 가 충분한 정보를 제공하는 경우 &lt;code&gt;NULL&lt;/code&gt; 일 수 있습니다 . &lt;em&gt;flags&lt;/em&gt; 에 &lt;code&gt;ARR_HAS_DESCR&lt;/code&gt; 플래그가 설정되어 있지 않으면이 필드도 무시됩니다 .&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="811b8ce90b99eebd82cee1bee20d5f2dc5026de4" translate="yes" xml:space="preserve">
          <source>A SciPy package contains, in addition to its sources, the following files and directories:</source>
          <target state="translated">SciPy 패키지에는 소스 외에도 다음 파일과 디렉토리가 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="2e40f23352d29ee547ed495acb06d3278d345225" translate="yes" xml:space="preserve">
          <source>A basic format in this context is an optional shape specifier followed by an array-protocol type string. Parenthesis are required on the shape if it has more than one dimension. NumPy allows a modification on the format in that any string that can uniquely identify the type can be used to specify the data-type in a field. The generated data-type fields are named &lt;code&gt;'f0'&lt;/code&gt;, &lt;code&gt;'f1'&lt;/code&gt;, &amp;hellip;, &lt;code&gt;'f&amp;lt;N-1&amp;gt;'&lt;/code&gt; where N (&amp;gt;1) is the number of comma-separated basic formats in the string. If the optional shape specifier is provided, then the data-type for the corresponding field describes a sub-array.</source>
          <target state="translated">이 문맥의 기본 형식은 선택적 형태 지정자 뒤에 배열 프로토콜 유형 문자열이옵니다. 치수가 두 개 이상인 경우 모양에 괄호가 필요합니다. NumPy를 사용하면 형식을 고유하게 식별 할 수있는 문자열을 사용하여 필드에서 데이터 형식을 지정할 수 있으므로 형식을 수정할 수 있습니다. 생성 된 데이터 유형 필드의 이름은 &lt;code&gt;'f0'&lt;/code&gt; , &lt;code&gt;'f1'&lt;/code&gt; ,&amp;hellip;, &lt;code&gt;'f&amp;lt;N-1&amp;gt;'&lt;/code&gt; 여기서 N (&amp;gt; 1)은 문자열에서 쉼표로 구분 된 기본 형식의 수입니다. 선택적 모양 지정자가 제공되면 해당 필드의 데이터 유형이 하위 배열을 설명합니다.</target>
        </trans-unit>
        <trans-unit id="33714726200551e610770d7ae55c0ed9c8005e6f" translate="yes" xml:space="preserve">
          <source>A beta value of 14 is probably a good starting point. Note that as beta gets large, the window narrows, and so the number of samples needs to be large enough to sample the increasingly narrow spike, otherwise NaNs will get returned.</source>
          <target state="translated">베타 값 14는 아마도 좋은 출발점이 될 것입니다. 베타가 커짐에 따라 창이 좁아지면서 점점 더 좁아지는 스파이크를 샘플링하기에 충분한 샘플 수를 가져야합니다. 그렇지 않으면 NaN이 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="730a2f7351bc145102343cc14dc57118d72de04f" translate="yes" xml:space="preserve">
          <source>A bit-width name for this data-type.</source>
          <target state="translated">이 데이터 유형의 비트 폭 이름입니다.</target>
        </trans-unit>
        <trans-unit id="af66384dd9d2d25f2f246ac418a92d8c8bea0503" translate="yes" xml:space="preserve">
          <source>A boolean &lt;a href=&quot;#numpy.ma.MaskedArray.mask&quot;&gt;&lt;code&gt;mask&lt;/code&gt;&lt;/a&gt; with the same shape as the data, where a &lt;code&gt;True&lt;/code&gt; value indicates that the corresponding element of the data is invalid. The special value &lt;a href=&quot;#numpy.ma.nomask&quot;&gt;&lt;code&gt;nomask&lt;/code&gt;&lt;/a&gt; is also acceptable for arrays without named fields, and indicates that no data is invalid.</source>
          <target state="translated">데이터와 모양이 같은 부울 &lt;a href=&quot;#numpy.ma.MaskedArray.mask&quot;&gt; &lt;code&gt;mask&lt;/code&gt; &lt;/a&gt; . &lt;code&gt;True&lt;/code&gt; 값은 해당 데이터 요소가 유효하지 않음을 나타냅니다. 명명 된 필드가없는 배열에도 특수 값 &lt;a href=&quot;#numpy.ma.nomask&quot;&gt; &lt;code&gt;nomask&lt;/code&gt; &lt;/a&gt; 를 사용할 수 있으며 유효하지 않은 데이터가 없음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="b2805701b39ac42271d949ffde0dd4bf567d116a" translate="yes" xml:space="preserve">
          <source>A boolean array which is broadcasted to match the dimensions of &lt;code&gt;a&lt;/code&gt;, and selects elements to include in the reduction. Note that for ufuncs like &lt;code&gt;minimum&lt;/code&gt; that do not have an identity defined, one has to pass in also &lt;code&gt;initial&lt;/code&gt;.</source>
          <target state="translated">방송되는 부울 배열의 크기에 맞게 환원에 포함하고, 선택 소자. 아이디가 정의되지 않은 &lt;code&gt;minimum&lt;/code&gt; 와 같은 ufunc의 경우 &lt;code&gt;initial&lt;/code&gt; 도 전달해야 합니다. &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="86f98cff3c08f935f8811f83be9572c3de4637c7" translate="yes" xml:space="preserve">
          <source>A boolean array which is broadcasted to match the dimensions of &lt;code&gt;dst&lt;/code&gt;, and selects elements to copy from &lt;code&gt;src&lt;/code&gt; to &lt;code&gt;dst&lt;/code&gt; wherever it contains the value True.</source>
          <target state="translated">&lt;code&gt;dst&lt;/code&gt; 의 차원과 일치하도록 브로드 캐스트되고 부울 값이 포함 된 모든 위치 에서 &lt;code&gt;src&lt;/code&gt; 에서 &lt;code&gt;dst&lt;/code&gt; 로 복사 할 요소를 선택 하는 부울 배열입니다 .</target>
        </trans-unit>
        <trans-unit id="d78a3585487d30435586ed9706d00090c300e7f0" translate="yes" xml:space="preserve">
          <source>A boolean array with the same dimensions as the input. If second argument is not supplied then a boolean array is returned with values True where the corresponding element of the input is positive infinity and values False where the element of the input is not positive infinity.</source>
          <target state="translated">입력과 치수가 같은 부울 배열입니다. 두 번째 인수가 제공되지 않으면 입력의 해당 요소가 양의 무한대 인 경우 True 값과 입력 요소가 양의 무한대가 아닌 경우 False 값으로 부울 배열이 리턴됩니다.</target>
        </trans-unit>
        <trans-unit id="edcba5627bf9872aa7674aa396e2821a8c076d34" translate="yes" xml:space="preserve">
          <source>A boolean array with the same dimensions as the input. If second argument is not supplied then a numpy boolean array is returned with values True where the corresponding element of the input is negative infinity and values False where the element of the input is not negative infinity.</source>
          <target state="translated">입력과 치수가 같은 부울 배열입니다. 두 번째 인수가 제공되지 않으면 입력의 해당 요소가 음의 무한대 인 경우 True 값과 입력의 요소가 음의 무한대가 아닌 경우 False 값으로 numpy 부울 배열이 리턴됩니다.</target>
        </trans-unit>
        <trans-unit id="0afb7663cac315ffc6aa200bd089e46c012435b5" translate="yes" xml:space="preserve">
          <source>A boolean array with the same shape and type as &lt;code&gt;x&lt;/code&gt; to store the result.</source>
          <target state="translated">결과를 저장하기 위해 &lt;code&gt;x&lt;/code&gt; 와 모양 및 유형이 같은 부울 배열입니다 .</target>
        </trans-unit>
        <trans-unit id="5662229389d9892b11458d25aa4c0db03cbc85bd" translate="yes" xml:space="preserve">
          <source>A boolean array with the same shape as &lt;code&gt;x&lt;/code&gt; to store the result.</source>
          <target state="translated">결과를 저장하기 위해 &lt;code&gt;x&lt;/code&gt; 와 모양이 같은 부울 배열입니다 .</target>
        </trans-unit>
        <trans-unit id="9fbedd8a20450a12cb3ee54eea4b82356919f525" translate="yes" xml:space="preserve">
          <source>A boolean mask derived from &lt;code&gt;m&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;m&lt;/code&gt; 에서 파생 된 부울 마스크 입니다.</target>
        </trans-unit>
        <trans-unit id="2ff4d8bf8489691629ea13c670df9523f6f8f2b9" translate="yes" xml:space="preserve">
          <source>A business day calendar object containing the specified weekmask and holidays values.</source>
          <target state="translated">지정된 주 마스크 및 휴일 값을 포함하는 영업일 달력 객체입니다.</target>
        </trans-unit>
        <trans-unit id="40a22219906d7788625c49e0079969b8993164ff" translate="yes" xml:space="preserve">
          <source>A business day calendar object that efficiently stores information defining valid days for the busday family of functions.</source>
          <target state="translated">busday 함수 계열에 유효한 날짜를 정의하는 정보를 효율적으로 저장하는 업무 일 달력 오브젝트.</target>
        </trans-unit>
        <trans-unit id="8695c88255f385733f796bbaedd0461b7eef4b10" translate="yes" xml:space="preserve">
          <source>A character code (one of &amp;lsquo;biufcmMOSUV&amp;rsquo;) identifying the general kind of data.</source>
          <target state="translated">일반적인 종류의 데이터를 식별하는 문자 코드 ( 'biufcmMOSUV'중 하나)입니다.</target>
        </trans-unit>
        <trans-unit id="9816b39af0a9d971aeef29e0be64e9e1da496e15" translate="yes" xml:space="preserve">
          <source>A character code indicating the kind of array (using the array interface typestring notation). A &amp;lsquo;b&amp;rsquo; represents Boolean, a &amp;lsquo;i&amp;rsquo; represents signed integer, a &amp;lsquo;u&amp;rsquo; represents unsigned integer, &amp;lsquo;f&amp;rsquo; represents floating point, &amp;lsquo;c&amp;rsquo; represents complex floating point, &amp;lsquo;S&amp;rsquo; represents 8-bit zero-terminated bytes, &amp;lsquo;U&amp;rsquo; represents 32-bit/character unicode string, and &amp;lsquo;V&amp;rsquo; represents arbitrary.</source>
          <target state="translated">배열 종류를 나타내는 문자 코드입니다 (배열 인터페이스 유형 문자열 표기법 사용). 'b'는 부울, 'i'는 부호있는 정수, 'u'는 부호없는 정수, 'f'는 부동 소수점, 'c'는 복잡한 부동 소수점, 'S'는 8 비트 0으로 끝나는 바이트, 'U'는 32 비트 / 문자 유니 코드 문자열을 나타내고 'V'는 임의를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="640835ce5b60ee0611de8f1a565fb1483f0f6116" translate="yes" xml:space="preserve">
          <source>A character indicating the byte-order of this data-type object.</source>
          <target state="translated">이 데이터 유형 객체의 바이트 순서를 나타내는 문자입니다.</target>
        </trans-unit>
        <trans-unit id="10949fd1b1a46dea97602b78abe6497f1b34bcec" translate="yes" xml:space="preserve">
          <source>A character indicating the byte-order: &amp;lsquo;&amp;gt;&amp;rsquo; (big-endian), &amp;lsquo;&amp;lt;&amp;rsquo; (little- endian), &amp;lsquo;=&amp;rsquo; (native), &amp;lsquo;|&amp;rsquo; (irrelevant, ignore). All builtin data- types have byteorder &amp;lsquo;=&amp;rsquo;.</source>
          <target state="translated">바이트 순서를 나타내는 문자 : '&amp;gt;'(big-endian), '&amp;lt;'(little-endian), '='(native), '|' (무관, 무시). 모든 내장 데이터 유형의 바이트 순서는 '='입니다.</target>
        </trans-unit>
        <trans-unit id="4d4cdc18aee1de79b93ad2db60b3cb6c05440fae" translate="yes" xml:space="preserve">
          <source>A character indicating what kind of array is present according to the typestring convention with &amp;lsquo;t&amp;rsquo; -&amp;gt; bitfield, &amp;lsquo;b&amp;rsquo; -&amp;gt; Boolean, &amp;lsquo;i&amp;rsquo; -&amp;gt; signed integer, &amp;lsquo;u&amp;rsquo; -&amp;gt; unsigned integer, &amp;lsquo;f&amp;rsquo; -&amp;gt; floating point, &amp;lsquo;c&amp;rsquo; -&amp;gt; complex floating point, &amp;lsquo;O&amp;rsquo; -&amp;gt; object, &amp;lsquo;S&amp;rsquo; -&amp;gt; (byte-)string, &amp;lsquo;U&amp;rsquo; -&amp;gt; unicode, &amp;lsquo;V&amp;rsquo; -&amp;gt; void.</source>
          <target state="translated">'t'-&amp;gt; 비트 필드, 'b'-&amp;gt; 부울, 'i'-&amp;gt; 부호있는 정수, 'u'-&amp;gt; 부호없는 정수, 'f'-&amp;gt;를 사용하여 형식 문자열 규칙에 따라 어떤 종류의 배열이 있는지 나타내는 문자 부동 소수점, 'c'-&amp;gt; 복합 부동 소수점, 'O'-&amp;gt; 객체, 'S'-&amp;gt; (바이트) 문자열, 'U'-&amp;gt; 유니 코드, 'V'-&amp;gt; void.</target>
        </trans-unit>
        <trans-unit id="1e3c3cf78f0d1936ea320553b4c652bd35ed2232" translate="yes" xml:space="preserve">
          <source>A combination [int, array] or [array, int], where int is the number of bins and array is the bin edges.</source>
          <target state="translated">[int, array] 또는 [array, int] 조합. 여기서 int는 구간 수이고 array는 구간 가장자리입니다.</target>
        </trans-unit>
        <trans-unit id="bd60264664d8586a11ad4343a10732839c215699" translate="yes" xml:space="preserve">
          <source>A common case in NumPy functions is to have outputs allocated based on the broadcasting of the input, and additionally have an optional parameter called &amp;lsquo;out&amp;rsquo; where the result will be placed when it is provided. The &lt;a href=&quot;generated/numpy.nditer#numpy.nditer&quot;&gt;&lt;code&gt;nditer&lt;/code&gt;&lt;/a&gt; object provides a convenient idiom that makes it very easy to support this mechanism.</source>
          <target state="translated">NumPy 기능의 일반적인 경우는 입력의 브로드 캐스트를 기반으로 출력을 할당하고 추가로 결과가 제공 될 때 'out'이라는 선택적 매개 변수를 갖는 것입니다. &lt;a href=&quot;generated/numpy.nditer#numpy.nditer&quot;&gt; &lt;code&gt;nditer&lt;/code&gt; 의&lt;/a&gt; 객체는 매우 쉽게이 메커니즘을 지원 할 수있는 편리한 관용구를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="b7e1a45a8be43e8f336307abe5613c812f9c3ff0" translate="yes" xml:space="preserve">
          <source>A common use case for this is filtering for desired element values. For example one may wish to select all entries from an array which are not NaN:</source>
          <target state="translated">이에 대한 일반적인 사용 사례는 원하는 요소 값을 필터링하는 것입니다. 예를 들어 NaN이 아닌 배열에서 모든 항목을 선택하려고 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b1deb505aba0dee9bc57b64427ffaacea33af840" translate="yes" xml:space="preserve">
          <source>A common use for &lt;code&gt;nonzero&lt;/code&gt; is to find the indices of an array, where a condition is True. Given an array &lt;code&gt;a&lt;/code&gt;, the condition &lt;code&gt;a&lt;/code&gt; &amp;gt; 3 is a boolean array and since False is interpreted as 0, ma.nonzero(a &amp;gt; 3) yields the indices of the &lt;code&gt;a&lt;/code&gt; where the condition is true.</source>
          <target state="translated">&lt;code&gt;nonzero&lt;/code&gt; 이 아닌 일반적인 용도 는 조건이 참인 배열의 인덱스를 찾는 것입니다. 배열 &lt;code&gt;a&lt;/code&gt; 가 주어지면 조건 &lt;code&gt;a&lt;/code&gt; &amp;gt; 3은 부울 배열이며 False가 0으로 해석되므로 ma.nonzero (a&amp;gt; 3)은 조건이 참인 &lt;code&gt;a&lt;/code&gt; 의 인덱스를 생성 합니다.</target>
        </trans-unit>
        <trans-unit id="d10789a39601bd0ec3a09e1bcad97963a039079f" translate="yes" xml:space="preserve">
          <source>A common use for &lt;code&gt;nonzero&lt;/code&gt; is to find the indices of an array, where a condition is True. Given an array &lt;code&gt;a&lt;/code&gt;, the condition &lt;code&gt;a&lt;/code&gt; &amp;gt; 3 is a boolean array and since False is interpreted as 0, np.nonzero(a &amp;gt; 3) yields the indices of the &lt;code&gt;a&lt;/code&gt; where the condition is true.</source>
          <target state="translated">&lt;code&gt;nonzero&lt;/code&gt; 이 아닌 일반적인 용도 는 조건이 참인 배열의 인덱스를 찾는 것입니다. 배열 &lt;code&gt;a&lt;/code&gt; 가 주어지면 조건 &lt;code&gt;a&lt;/code&gt; &amp;gt; 3은 부울 배열이며 False가 0으로 해석되므로 np.nonzero (a&amp;gt; 3)은 조건이 참인 &lt;code&gt;a&lt;/code&gt; 의 인덱스를 생성 합니다.</target>
        </trans-unit>
        <trans-unit id="1c327d5ba1c1107eecd64cf160d7a3c3b72c1398" translate="yes" xml:space="preserve">
          <source>A complex number or sequence of complex numbers.</source>
          <target state="translated">복소수 또는 복소수 시퀀스.</target>
        </trans-unit>
        <trans-unit id="0a0cfa11c1789a966650ad3c5878d84e46b3ac64" translate="yes" xml:space="preserve">
          <source>A complex- or real-valued matrix whose eigenvalues are to be computed.</source>
          <target state="translated">고유 값을 계산할 복소수 또는 실수 행렬.</target>
        </trans-unit>
        <trans-unit id="df6ecf1ca51aead983c8d0521be2a8d9c2c969cb" translate="yes" xml:space="preserve">
          <source>A complex- or real-valued matrix whose eigenvalues will be computed.</source>
          <target state="translated">고유 값이 계산되는 복소수 또는 실수 행렬.</target>
        </trans-unit>
        <trans-unit id="846e9c828a6dacb3e9b0f03c4bf9ede31aa0b250" translate="yes" xml:space="preserve">
          <source>A compromise to get a good value. For small datasets the Sturges value will usually be chosen, while larger datasets will usually default to FD. Avoids the overly conservative behaviour of FD and Sturges for small and large datasets respectively. Switchover point is usually</source>
          <target state="translated">좋은 가치를 얻기위한 타협. 작은 데이터 세트의 경우 일반적으로 Sturge 값이 선택되고 큰 데이터 세트는 일반적으로 FD로 설정됩니다. 소규모 및 대규모 데이터 세트 각각에 대해 FD 및 Sturges의 지나치게 보수적 인 동작을 피합니다. 전환점은 일반적으로</target>
        </trans-unit>
        <trans-unit id="81e1ddd8fad2d5da09a556c355d68b360223b6d1" translate="yes" xml:space="preserve">
          <source>A consensus of datetime64 users agreed that this behavior is undesirable and at odds with how datetime64 is usually used (e.g., by &lt;a href=&quot;http://pandas.pydata.org&quot;&gt;pandas&lt;/a&gt;). For most use cases, a timezone naive datetime type is preferred, similar to the &lt;code&gt;datetime.datetime&lt;/code&gt; type in the Python standard library. Accordingly, datetime64 no longer assumes that input is in local time, nor does it print local times:</source>
          <target state="translated">datetime64 사용자의 합의에 따르면이 동작은 바람직하지 않으며 datetime64가 일반적으로 사용되는 방식 (예 : &lt;a href=&quot;http://pandas.pydata.org&quot;&gt;pandas&lt;/a&gt; ) 과 상충되는 것으로 동의했습니다 . 대부분의 경우 Python 표준 라이브러리 의 &lt;code&gt;datetime.datetime&lt;/code&gt; 유형 과 비슷한 시간대 순진 날짜 시간 유형이 선호 됩니다. 따라서 datetime64는 더 이상 입력이 현지 시간이라고 가정하지 않으며 현지 시간도 인쇄하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="e341e4c13ef8eaa977a5ceb53e0656085e29c24c" translate="yes" xml:space="preserve">
          <source>A convenience class, used to encapsulate &amp;ldquo;natural&amp;rdquo; operations on polynomials so that said operations may take on their customary form in code (see Examples).</source>
          <target state="translated">다항식에 대한 &quot;자연적인&quot;연산을 캡슐화하여 해당 연산이 코드에서 관례적인 형식을 취할 수 있도록하는 편리한 클래스 (예제 참조).</target>
        </trans-unit>
        <trans-unit id="151620da811c85a7079865f27be65ea6f5b0587f" translate="yes" xml:space="preserve">
          <source>A convenient alias for None, useful for indexing arrays.</source>
          <target state="translated">배열 인덱스에 유용한 None의 편리한 별칭입니다.</target>
        </trans-unit>
        <trans-unit id="e2be79f4ed756589d21e373791f3f50d6d864035" translate="yes" xml:space="preserve">
          <source>A convenient way to execute examples is the &lt;code&gt;%doctest_mode&lt;/code&gt; mode of IPython, which allows for pasting of multi-line examples and preserves indentation.</source>
          <target state="translated">예제를 실행하는 편리한 방법 은 IPython 의 &lt;code&gt;%doctest_mode&lt;/code&gt; 모드로 여러 줄 예제를 붙여넣고 들여 쓰기를 유지할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="30abac0c126f9bd71a6c782f2b03c3c3aba2c57f" translate="yes" xml:space="preserve">
          <source>A copy is performed by default.</source>
          <target state="translated">복사는 기본적으로 수행됩니다.</target>
        </trans-unit>
        <trans-unit id="9fa36776969d9a57dc8d794768fefaeedefecd72" translate="yes" xml:space="preserve">
          <source>A copy of &lt;code&gt;a&lt;/code&gt; with &lt;code&gt;b&lt;/code&gt; appended to &lt;code&gt;axis&lt;/code&gt;. Note that &lt;a href=&quot;#numpy.ma.append&quot;&gt;&lt;code&gt;append&lt;/code&gt;&lt;/a&gt; does not occur in-place: a new array is allocated and filled. If &lt;code&gt;axis&lt;/code&gt; is None, the result is a flattened array.</source>
          <target state="translated">&lt;code&gt;a&lt;/code&gt; 가 &lt;code&gt;b&lt;/code&gt; 의 &lt;code&gt;axis&lt;/code&gt; 추가 된 사본 . 참고 &lt;a href=&quot;#numpy.ma.append&quot;&gt; &lt;code&gt;append&lt;/code&gt; &lt;/a&gt; 자리에서 발생하지 않습니다 새로운 배열을 할당하고 채워집니다. 경우 &lt;code&gt;axis&lt;/code&gt; 포함되지 않은 경우, 결과는 평탄화 된 배열이다.</target>
        </trans-unit>
        <trans-unit id="7ddd8698ec4c36f13446d06850216b55d57301cb" translate="yes" xml:space="preserve">
          <source>A copy of &lt;code&gt;a&lt;/code&gt; without the slices along axis for which &lt;code&gt;condition&lt;/code&gt; is false.</source>
          <target state="translated">&lt;code&gt;condition&lt;/code&gt; 이 거짓 인 축을 따라 슬라이스 &lt;code&gt;a&lt;/code&gt; 없는의 복사본 .</target>
        </trans-unit>
        <trans-unit id="9e51e10da4f3fc66565226f8d7532becd87cc778" translate="yes" xml:space="preserve">
          <source>A copy of &lt;code&gt;arr&lt;/code&gt; with &lt;code&gt;values&lt;/code&gt; appended to &lt;code&gt;axis&lt;/code&gt;. Note that &lt;a href=&quot;#numpy.append&quot;&gt;&lt;code&gt;append&lt;/code&gt;&lt;/a&gt; does not occur in-place: a new array is allocated and filled. If &lt;code&gt;axis&lt;/code&gt; is None, &lt;code&gt;out&lt;/code&gt; is a flattened array.</source>
          <target state="translated">사본 &lt;code&gt;arr&lt;/code&gt; 과 &lt;code&gt;values&lt;/code&gt; 에 부가 &lt;code&gt;axis&lt;/code&gt; . 참고 &lt;a href=&quot;#numpy.append&quot;&gt; &lt;code&gt;append&lt;/code&gt; &lt;/a&gt; 자리에서 발생하지 않습니다 새로운 배열을 할당하고 채워집니다. 경우 &lt;code&gt;axis&lt;/code&gt; 포함되지 않은 경우, &lt;code&gt;out&lt;/code&gt; 편평한 배열이다.</target>
        </trans-unit>
        <trans-unit id="92111473d390efd8adf5b878205e8bc603afc606" translate="yes" xml:space="preserve">
          <source>A copy of &lt;code&gt;arr&lt;/code&gt; with &lt;code&gt;values&lt;/code&gt; inserted. Note that &lt;a href=&quot;#numpy.insert&quot;&gt;&lt;code&gt;insert&lt;/code&gt;&lt;/a&gt; does not occur in-place: a new array is returned. If &lt;code&gt;axis&lt;/code&gt; is None, &lt;code&gt;out&lt;/code&gt; is a flattened array.</source>
          <target state="translated">사본 &lt;code&gt;arr&lt;/code&gt; 과 &lt;code&gt;values&lt;/code&gt; 삽입. 참고 &lt;a href=&quot;#numpy.insert&quot;&gt; &lt;code&gt;insert&lt;/code&gt; &lt;/a&gt; 자리에서 발생하지 않습니다 새로운 배열이 반환됩니다. 경우 &lt;code&gt;axis&lt;/code&gt; 포함되지 않은 경우, &lt;code&gt;out&lt;/code&gt; 편평한 배열이다.</target>
        </trans-unit>
        <trans-unit id="1b87c9376fbcb3d0b125161eee5f9adf601f6324" translate="yes" xml:space="preserve">
          <source>A copy of &lt;code&gt;arr&lt;/code&gt; with the elements specified by &lt;code&gt;obj&lt;/code&gt; removed. Note that &lt;a href=&quot;#numpy.delete&quot;&gt;&lt;code&gt;delete&lt;/code&gt;&lt;/a&gt; does not occur in-place. If &lt;code&gt;axis&lt;/code&gt; is None, &lt;code&gt;out&lt;/code&gt; is a flattened array.</source>
          <target state="translated">&lt;code&gt;obj&lt;/code&gt; 에 의해 지정된 요소가 제거 된 &lt;code&gt;arr&lt;/code&gt; 의 사본 . 참고 &lt;a href=&quot;#numpy.delete&quot;&gt; &lt;code&gt;delete&lt;/code&gt; &lt;/a&gt; 자리에서 발생하지 않습니다. 경우 &lt;code&gt;axis&lt;/code&gt; 포함되지 않은 경우, &lt;code&gt;out&lt;/code&gt; 편평한 배열이다.</target>
        </trans-unit>
        <trans-unit id="ef5ec484979c813657ea6e12962cceaa803f005f" translate="yes" xml:space="preserve">
          <source>A copy of &lt;code&gt;self&lt;/code&gt; with invalid entries replaced by &lt;em&gt;fill_value&lt;/em&gt; (be it the function argument or the attribute of &lt;code&gt;self&lt;/code&gt;), or &lt;code&gt;self&lt;/code&gt; itself as an ndarray if there are no invalid entries to be replaced.</source>
          <target state="translated">사본 &lt;code&gt;self&lt;/code&gt; 로 대체 무효 엔트리와 &lt;em&gt;fill_value를는&lt;/em&gt; (그 함수의 인수 또는 특성 일 &lt;code&gt;self&lt;/code&gt; ) 또는 &lt;code&gt;self&lt;/code&gt; 유효하지 않은 엔트리가없는 경우 ndarray 자체를 교체한다.</target>
        </trans-unit>
        <trans-unit id="20929bf6f0f5783301a154635f1db6c0f7b0847c" translate="yes" xml:space="preserve">
          <source>A copy of the holiday array indicating additional invalid days.</source>
          <target state="translated">유효하지 않은 추가 일을 나타내는 공휴일 배열의 복사본입니다.</target>
        </trans-unit>
        <trans-unit id="83f8a7d3c63e1b73ba667b3bf1e267f936c633fe" translate="yes" xml:space="preserve">
          <source>A copy of the input array, flattened to one dimension.</source>
          <target state="translated">입력 배열의 사본으로, 1 차원으로 평면화됩니다.</target>
        </trans-unit>
        <trans-unit id="0da11f2afa7a132e72b7e8d106c881e77fd49d7b" translate="yes" xml:space="preserve">
          <source>A copy of the input data as a list of 1-d arrays.</source>
          <target state="translated">1 차원 배열 목록으로 입력 데이터의 사본.</target>
        </trans-unit>
        <trans-unit id="a2ec4d1c7d29fce0bbbb2b93588b5082ae76dce1" translate="yes" xml:space="preserve">
          <source>A copy of the matrix, flattened to a &lt;code&gt;(1, N)&lt;/code&gt; matrix where &lt;code&gt;N&lt;/code&gt; is the number of elements in the original matrix.</source>
          <target state="translated">행렬의 복사본으로, &lt;code&gt;(1, N)&lt;/code&gt; 행렬로 병합됩니다. 여기서 &lt;code&gt;N&lt;/code&gt; 은 원본 행렬의 요소 수입니다.</target>
        </trans-unit>
        <trans-unit id="ec8ccf8212225ee2362f20a54059f106604c4c8e" translate="yes" xml:space="preserve">
          <source>A copy of the seven-element boolean mask indicating valid days.</source>
          <target state="translated">유효한 요일을 나타내는 7 요소 부울 마스크의 사본입니다.</target>
        </trans-unit>
        <trans-unit id="48da051f6fb411e5d7f076156cd5a288fde0f19f" translate="yes" xml:space="preserve">
          <source>A copy of the specified element of the array as a suitable Python scalar</source>
          <target state="translated">적절한 파이썬 스칼라로 지정된 배열 요소의 사본</target>
        </trans-unit>
        <trans-unit id="c6bc1a9690ca89addc6fd0c521d335f7301cabfb" translate="yes" xml:space="preserve">
          <source>A couple examples illustrating how choose broadcasts:</source>
          <target state="translated">방송을 선택하는 방법을 보여주는 몇 가지 예 :</target>
        </trans-unit>
        <trans-unit id="79c55eeffdc406262a02700dff6759d4344a8e15" translate="yes" xml:space="preserve">
          <source>A ctype scalar, union, array, or struct</source>
          <target state="translated">ctype 스칼라, 공용체, 배열 또는 구조체</target>
        </trans-unit>
        <trans-unit id="4d35563e75151cc0dbb5c5b566817578403fc0ff" translate="yes" xml:space="preserve">
          <source>A ctypes library object</source>
          <target state="translated">ctypes 라이브러리 객체</target>
        </trans-unit>
        <trans-unit id="d1e5cd9e7ac36feddf15161fea7659065ed8c0ab" translate="yes" xml:space="preserve">
          <source>A custom formatter can be used to display array elements as desired:</source>
          <target state="translated">사용자 정의 포맷터를 사용하여 원하는대로 배열 요소를 표시 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c7f7b6a83ce973c0c5ab9720eba75e9be43c8cc7" translate="yes" xml:space="preserve">
          <source>A data type object (an instance of &lt;a href=&quot;generated/numpy.dtype#numpy.dtype&quot;&gt;&lt;code&gt;numpy.dtype&lt;/code&gt;&lt;/a&gt; class) describes how the bytes in the fixed-size block of memory corresponding to an array item should be interpreted. It describes the following aspects of the data:</source>
          <target state="translated">데이터 유형 객체 ( &lt;a href=&quot;generated/numpy.dtype#numpy.dtype&quot;&gt; &lt;code&gt;numpy.dtype&lt;/code&gt; &lt;/a&gt; 클래스 의 인스턴스 )는 배열 항목에 해당하는 고정 크기 메모리 블록의 바이트를 해석하는 방법을 설명합니다. 데이터의 다음 측면을 설명합니다.</target>
        </trans-unit>
        <trans-unit id="8e711db1425e16cacba4452fb8206715d7336cab" translate="yes" xml:space="preserve">
          <source>A data-type bit-flag that determines if the data-type exhibits object- array like behavior. Each bit in this member is a flag which are named as:</source>
          <target state="translated">데이터 유형이 객체 배열과 같은 동작을 나타내는 지 여부를 결정하는 데이터 유형 비트 플래그. 이 멤버의 각 비트는 다음과 같이 이름이 지정된 플래그입니다.</target>
        </trans-unit>
        <trans-unit id="4a302bf74f669a81b79d991c1f7d62a9555dbdfb" translate="yes" xml:space="preserve">
          <source>A data-type scalar that allows field access as attribute lookup.</source>
          <target state="translated">속성 조회로 필드 액세스를 허용하는 데이터 유형 스칼라입니다.</target>
        </trans-unit>
        <trans-unit id="4587893c1e5eca1b7c042f70853952070073a28c" translate="yes" xml:space="preserve">
          <source>A deprecated version of &lt;a href=&quot;#c.NPY_ARRAY_WRITEBACKIFCOPY&quot;&gt;&lt;code&gt;NPY_ARRAY_WRITEBACKIFCOPY&lt;/code&gt;&lt;/a&gt; which depends upon &lt;code&gt;dealloc&lt;/code&gt; to trigger the writeback. For backwards compatibility, &lt;a href=&quot;#c.PyArray_ResolveWritebackIfCopy&quot;&gt;&lt;code&gt;PyArray_ResolveWritebackIfCopy&lt;/code&gt;&lt;/a&gt; is called at &lt;code&gt;dealloc&lt;/code&gt; but relying on that behavior is deprecated and not supported in PyPy.</source>
          <target state="translated">의 사용되지 않는 버전 &lt;a href=&quot;#c.NPY_ARRAY_WRITEBACKIFCOPY&quot;&gt; &lt;code&gt;NPY_ARRAY_WRITEBACKIFCOPY&lt;/code&gt; &lt;/a&gt; 에 따라 &lt;code&gt;dealloc&lt;/code&gt; 쓰기 저장을 트리거합니다. 이전 버전과의 호환성을 위해 &lt;a href=&quot;#c.PyArray_ResolveWritebackIfCopy&quot;&gt; &lt;code&gt;PyArray_ResolveWritebackIfCopy&lt;/code&gt; &lt;/a&gt; 는 &lt;code&gt;dealloc&lt;/code&gt; 에서 호출 되지만 해당 동작에 의존하는 것은 더 이상 사용되지 않으며 PyPy에서 지원되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="9c1b833307cee9e3cf72cc77b59a40521d42391e" translate="yes" xml:space="preserve">
          <source>A descriptive example:</source>
          <target state="translated">설명적인 예 :</target>
        </trans-unit>
        <trans-unit id="27b24a3f9af87d38cf8835043360961c446d5af3" translate="yes" xml:space="preserve">
          <source>A dictionary mapping column number to a function that will parse the column string into the desired value. E.g., if column 0 is a date string: &lt;code&gt;converters = {0: datestr2num}&lt;/code&gt;. Converters can also be used to provide a default value for missing data (but see also &lt;a href=&quot;numpy.genfromtxt#numpy.genfromtxt&quot;&gt;&lt;code&gt;genfromtxt&lt;/code&gt;&lt;/a&gt;): &lt;code&gt;converters = {3: lambda s: float(s.strip() or 0)}&lt;/code&gt;. Default: None.</source>
          <target state="translated">열 문자열을 원하는 값으로 구문 분석하는 함수에 사전 맵핑 열 번호. 예를 들어, 열 0이 날짜 문자열 인 경우 &lt;code&gt;converters = {0: datestr2num}&lt;/code&gt; 입니다. 변환기를 사용하여 누락 된 데이터에 대한 기본값을 제공 할 수도 있습니다 (그러나 &lt;a href=&quot;numpy.genfromtxt#numpy.genfromtxt&quot;&gt; &lt;code&gt;genfromtxt&lt;/code&gt; &lt;/a&gt; 참조 ) : &lt;code&gt;converters = {3: lambda s: float(s.strip() or 0)}&lt;/code&gt; . 기본값 : 없음</target>
        </trans-unit>
        <trans-unit id="b6d48692d200a87a18970c15bc3c417bcace59d3" translate="yes" xml:space="preserve">
          <source>A dictionary of items (3 required and 5 optional). The optional keys in the dictionary have implied defaults if they are not provided.</source>
          <target state="translated">항목 사전 (3 개 필수, 5 개 선택적) 사전의 선택적 키는 제공되지 않은 경우 기본값을 암시합니다.</target>
        </trans-unit>
        <trans-unit id="2dcb7b8d8713e202dcb8ec09b8dbd906a4793948" translate="yes" xml:space="preserve">
          <source>A dictionary of user-defined 1-d vector loops (stored as CObject ptrs) for user-defined types. A loop may be registered by the user for any user-defined type. It is retrieved by type number. User defined type numbers are always larger than &lt;a href=&quot;c-api.dtype#c.NPY_USERDEF&quot;&gt;&lt;code&gt;NPY_USERDEF&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">사용자 정의 유형에 대한 사용자 정의 1-d 벡터 루프 사전 (CObject ptr로 저장 됨) 루프는 사용자 정의 유형에 대해 사용자가 등록 할 수 있습니다. 유형 번호로 검색됩니다. 사용자 정의 유형 번호는 항상 &lt;a href=&quot;c-api.dtype#c.NPY_USERDEF&quot;&gt; &lt;code&gt;NPY_USERDEF&lt;/code&gt; &lt;/a&gt; 보다 큽니다 .</target>
        </trans-unit>
        <trans-unit id="e4ab9ce9d6d7e21b1f408721fe18d109738fb1b3" translate="yes" xml:space="preserve">
          <source>A dictionary that replaces global operands in current frame. Ignored if &lt;code&gt;obj&lt;/code&gt; is not a string.</source>
          <target state="translated">현재 프레임에서 전역 피연산자를 대체하는 사전입니다. &lt;code&gt;obj&lt;/code&gt; 가 문자열이 아닌 경우 무시됩니다 .</target>
        </trans-unit>
        <trans-unit id="0923166d8e51f518b3d2e18daa42e324c64d0629" translate="yes" xml:space="preserve">
          <source>A dictionary that replaces local operands in current frame. Ignored if &lt;code&gt;obj&lt;/code&gt; is not a string or &lt;code&gt;gdict&lt;/code&gt; is &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">현재 프레임에서 로컬 피연산자를 대체하는 사전입니다. &lt;code&gt;obj&lt;/code&gt; 가 문자열이 아니거나 &lt;code&gt;gdict&lt;/code&gt; 가 &lt;code&gt;None&lt;/code&gt; 인 경우 무시됩니다 .</target>
        </trans-unit>
        <trans-unit id="06bcc7d3d4264a6d6419702c27d5d128fee3024e" translate="yes" xml:space="preserve">
          <source>A dictionary with keys &amp;ldquo;divide&amp;rdquo;, &amp;ldquo;over&amp;rdquo;, &amp;ldquo;under&amp;rdquo;, and &amp;ldquo;invalid&amp;rdquo;, whose values are from the strings &amp;ldquo;ignore&amp;rdquo;, &amp;ldquo;print&amp;rdquo;, &amp;ldquo;log&amp;rdquo;, &amp;ldquo;warn&amp;rdquo;, &amp;ldquo;raise&amp;rdquo;, and &amp;ldquo;call&amp;rdquo;. The keys represent possible floating-point exceptions, and the values define how these exceptions are handled.</source>
          <target state="translated">문자열 &quot;ignore&quot;, &quot;print&quot;, &quot;log&quot;, &quot;warn&quot;, &quot;raise&quot;및 &quot;call에서 온 값인&quot;divide &quot;,&quot;over &quot;,&quot;under &quot;및&quot;invalid &quot;키가있는 사전 &amp;rdquo;. 키는 가능한 부동 소수점 예외를 나타내며 값은 이러한 예외를 처리하는 방법을 정의합니다.</target>
        </trans-unit>
        <trans-unit id="274bd217df99031a1f7ca14224d6a8c744cd94fc" translate="yes" xml:space="preserve">
          <source>A dimension index is an integer representing a dimension name. It enumerates the dimension names according to the order of the first occurrence of each name in the signature.</source>
          <target state="translated">차원 인덱스는 차원 이름을 나타내는 정수입니다. 서명에서 각 이름이 처음 나타나는 순서에 따라 차원 이름을 열거합니다.</target>
        </trans-unit>
        <trans-unit id="dc19580a731f382683601a5487121a4588f3baec" translate="yes" xml:space="preserve">
          <source>A dimension name represents a core dimension in the signature. Different dimensions may share a name, indicating that they are of the same size.</source>
          <target state="translated">차원 이름은 서명의 핵심 차원을 나타냅니다. 다른 차원은 이름이 같을 수 있으며 같은 크기임을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="e91d306ab0d3f2790363b14c868a1e01c6605ffa" translate="yes" xml:space="preserve">
          <source>A docstring for each ufunc. The first part of the docstring is dynamically generated from the number of outputs, the name, and the number of inputs. The second part of the docstring is provided at creation time and stored with the ufunc.</source>
          <target state="translated">각 ufunc에 대한 docstring. docstring의 첫 번째 부분은 출력 수, 이름 및 입력 수에서 동적으로 생성됩니다. 문서화 문자열의 두 번째 부분은 작성시 제공되며 ufunc와 함께 저장됩니다.</target>
        </trans-unit>
        <trans-unit id="cb5a9b4e2f08d90c7582c32e33a8dd3a11c7dba2" translate="yes" xml:space="preserve">
          <source>A dtype that looks like &lt;code&gt;ndtype&lt;/code&gt;, the type of all fields is boolean.</source>
          <target state="translated">ndtype과 같은 &lt;code&gt;ndtype&lt;/code&gt; 은 모든 필드의 유형이 부울입니다.</target>
        </trans-unit>
        <trans-unit id="e0e4680768b858ee23cfd8b02898abfaa7246693" translate="yes" xml:space="preserve">
          <source>A few new C-structures were found to be useful in the development of NumPy. These C-structures are used in at least one C-API call and are therefore documented here. The main reason these structures were defined is to make it easy to use the Python ParseTuple C-API to convert from Python objects to a useful C-Object.</source>
          <target state="translated">NumPy의 개발에 유용한 몇 가지 새로운 C 구조가 발견되었습니다. 이러한 C 구조는 하나 이상의 C-API 호출에 사용되므로 여기에 문서화되어 있습니다. 이러한 구조가 정의 된 주된 이유는 Python ParseTuple C-API를 사용하여 Python 객체에서 유용한 C-Object로 쉽게 변환 할 수 있기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="d56136f42370cc828f6f8282f41aa378eb0668e7" translate="yes" xml:space="preserve">
          <source>A field is a view of the array data with a given data-type. The values in the view are determined by the given type and the offset into the current array in bytes. The offset needs to be such that the view dtype fits in the array dtype; for example an array of dtype complex128 has 16-byte elements. If taking a view with a 32-bit integer (4 bytes), the offset needs to be between 0 and 12 bytes.</source>
          <target state="translated">필드는 주어진 데이터 유형을 가진 배열 데이터의보기입니다. 뷰의 값은 주어진 유형과 바이트 단위의 현재 배열에 대한 오프셋에 의해 결정됩니다. 오프셋은 뷰 dtype이 배열 dtype에 맞도록해야합니다. 예를 들어 dtype complex128의 배열에는 16 바이트 요소가 있습니다. 32 비트 정수 (4 바이트)로보기를 수행하는 경우 오프셋은 0-12 바이트 사이 여야합니다.</target>
        </trans-unit>
        <trans-unit id="d1b21d39d7b2c4b29140daef6f51fe2f038fec79" translate="yes" xml:space="preserve">
          <source>A first possibility is to directly invoke the &lt;a href=&quot;maskedarray.baseclass#numpy.ma.MaskedArray&quot;&gt;&lt;code&gt;MaskedArray&lt;/code&gt;&lt;/a&gt; class.</source>
          <target state="translated">첫 번째 가능성은 &lt;a href=&quot;maskedarray.baseclass#numpy.ma.MaskedArray&quot;&gt; &lt;code&gt;MaskedArray&lt;/code&gt; &lt;/a&gt; 클래스 를 직접 호출하는 것 입니다.</target>
        </trans-unit>
        <trans-unit id="6eca43eca8b478519a1bb5ce29f20eb48d50d699" translate="yes" xml:space="preserve">
          <source>A fixed bit generator using a fixed seed and a fixed series of calls to &amp;lsquo;RandomState&amp;rsquo; methods using the same parameters will always produce the same results up to roundoff error except when the values were incorrect. &lt;a href=&quot;#numpy.random.mtrand.RandomState&quot;&gt;&lt;code&gt;RandomState&lt;/code&gt;&lt;/a&gt; is effectively frozen and will only receive updates that are required by changes in the the internals of Numpy. More substantial changes, including algorithmic improvements, are reserved for &lt;code&gt;Generator&lt;/code&gt;.</source>
          <target state="translated">고정 시드를 사용하는 고정 비트 생성기와 동일한 매개 변수를 사용하는 'RandomState'메서드에 대한 일련의 고정 된 호출은 값이 올바르지 않은 경우를 제외하고 항상 반올림 오류까지 동일한 결과를 생성합니다. &lt;a href=&quot;#numpy.random.mtrand.RandomState&quot;&gt; &lt;code&gt;RandomState&lt;/code&gt; &lt;/a&gt; 는 효과적으로 고정되며 Numpy의 내부 변경에 필요한 업데이트 만받습니다. 알고리즘 개선을 포함한보다 실질적인 변경은 &lt;code&gt;Generator&lt;/code&gt; 를 위해 예약되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="e40f9bd793de063d4623b3a65127edbc7f4365a2" translate="yes" xml:space="preserve">
          <source>A floating point representation of negative infinity.</source>
          <target state="translated">음의 무한대의 부동 소수점 표현.</target>
        </trans-unit>
        <trans-unit id="f70219492bb06ea1bfc1bd486c51c9d74cdc6eec" translate="yes" xml:space="preserve">
          <source>A floating point representation of negative zero.</source>
          <target state="translated">음수 0의 부동 소수점 표현</target>
        </trans-unit>
        <trans-unit id="f318ecbc4360f30574687fabbb18b17aece0caea" translate="yes" xml:space="preserve">
          <source>A floating point representation of positive infinity.</source>
          <target state="translated">양의 무한대의 부동 소수점 표현.</target>
        </trans-unit>
        <trans-unit id="ac7d4260ed1570b946cfe14c53fa847bec8e3bc4" translate="yes" xml:space="preserve">
          <source>A floating point representation of positive zero.</source>
          <target state="translated">양수 0의 부동 소수점 표현</target>
        </trans-unit>
        <trans-unit id="61e0a8192c1f49ed33c6184804ba93dc807b4510" translate="yes" xml:space="preserve">
          <source>A floating-point array of shape &lt;code&gt;size&lt;/code&gt; of drawn samples, or a single sample if &lt;code&gt;size&lt;/code&gt; was not specified.</source>
          <target state="translated">그려진 샘플 의 모양 &lt;code&gt;size&lt;/code&gt; 의 부동 소수점 배열 또는 &lt;code&gt;size&lt;/code&gt; 가 지정되지 않은 경우 단일 샘플 .</target>
        </trans-unit>
        <trans-unit id="ebf2ce103753b74056842789f48f919368a96b81" translate="yes" xml:space="preserve">
          <source>A format used to define default field names, such as &amp;ldquo;f%i&amp;rdquo; or &amp;ldquo;f_%02i&amp;rdquo;.</source>
          <target state="translated">&quot;f % i&quot;또는 &quot;f_ % 02i&quot;와 같은 기본 필드 이름을 정의하는 데 사용되는 형식입니다.</target>
        </trans-unit>
        <trans-unit id="6953993ce940fc7ebd16cec3633d5689d9d12107" translate="yes" xml:space="preserve">
          <source>A function that reads &lt;code&gt;n_in&lt;/code&gt; items from &lt;code&gt;in&lt;/code&gt;, and writes to &lt;code&gt;out&lt;/code&gt; the read value if it is within the limits pointed to by &lt;code&gt;min&lt;/code&gt; and &lt;code&gt;max&lt;/code&gt;, or the corresponding limit if outside. The memory segments must be contiguous and behaved, and either &lt;code&gt;min&lt;/code&gt; or &lt;code&gt;max&lt;/code&gt; may be &lt;code&gt;NULL&lt;/code&gt;, but not both.</source>
          <target state="translated">읽는 기능 &lt;code&gt;n_in&lt;/code&gt; 의 항목 &lt;code&gt;in&lt;/code&gt; , 그리고 쓰기를 &lt;code&gt;out&lt;/code&gt; 는 한계가 가리키는 내에 있으면 판독 값이 &lt;code&gt;min&lt;/code&gt; 와 &lt;code&gt;max&lt;/code&gt; 또는 대응 한계 밖에있는 경우. 메모리 세그먼트는 연속적이고 동작해야하며 &lt;code&gt;min&lt;/code&gt; 또는 &lt;code&gt;max&lt;/code&gt; 는 &lt;code&gt;NULL&lt;/code&gt; 일 수 있지만 둘다는 아닙니다.</target>
        </trans-unit>
        <trans-unit id="7808e8deacae88a30b0157c6432f18e2b157f98e" translate="yes" xml:space="preserve">
          <source>A function that takes a pointer &lt;code&gt;in&lt;/code&gt; to an array of &lt;code&gt;n_in&lt;/code&gt; items, a pointer &lt;code&gt;mask&lt;/code&gt; to an array of &lt;code&gt;n_in&lt;/code&gt; boolean values, and a pointer &lt;code&gt;vals&lt;/code&gt; to an array of &lt;code&gt;nv&lt;/code&gt; items. Items from &lt;code&gt;vals&lt;/code&gt; are copied into &lt;code&gt;in&lt;/code&gt; wherever the value in &lt;code&gt;mask&lt;/code&gt; is non-zero, tiling &lt;code&gt;vals&lt;/code&gt; as needed if &lt;code&gt;nv &amp;lt; n_in&lt;/code&gt;. All arrays must be contiguous and behaved.</source>
          <target state="translated">포인터를 취하는 함수 &lt;code&gt;in&lt;/code&gt; 의 배열 &lt;code&gt;n_in&lt;/code&gt; 항목 포인터 &lt;code&gt;mask&lt;/code&gt; 의 배열 &lt;code&gt;n_in&lt;/code&gt; 부울 값 및 포인터 &lt;code&gt;vals&lt;/code&gt; 의 배열 &lt;code&gt;nv&lt;/code&gt; 아이템. 상품 &lt;code&gt;vals&lt;/code&gt; 로 복사 &lt;code&gt;in&lt;/code&gt; 의 값 목적지 &lt;code&gt;mask&lt;/code&gt; 기와 비 - 제로 &lt;code&gt;vals&lt;/code&gt; 경우 필요에 따라 &lt;code&gt;nv &amp;lt; n_in&lt;/code&gt; . 모든 배열은 연속적이고 동작해야합니다.</target>
        </trans-unit>
        <trans-unit id="104738b7ba43a478757ba0cfc95cfc1693132d3a" translate="yes" xml:space="preserve">
          <source>A function that takes a pointer &lt;code&gt;src&lt;/code&gt; to a C contiguous, behaved segment, interpreted as a 3-dimensional array of shape &lt;code&gt;(n_outer, nindarray, nelem)&lt;/code&gt;, a pointer &lt;code&gt;indarray&lt;/code&gt; to a contiguous, behaved segment of &lt;code&gt;m_middle&lt;/code&gt; integer indices, and a pointer &lt;code&gt;dest&lt;/code&gt; to a C contiguous, behaved segment, interpreted as a 3-dimensional array of shape &lt;code&gt;(n_outer, m_middle, nelem)&lt;/code&gt;. The indices in &lt;code&gt;indarray&lt;/code&gt; are used to index &lt;code&gt;src&lt;/code&gt; along the second dimension, and copy the corresponding chunks of &lt;code&gt;nelem&lt;/code&gt; items into &lt;code&gt;dest&lt;/code&gt;. &lt;code&gt;clipmode&lt;/code&gt; (which can take on the values &lt;a href=&quot;c-api.array#c.NPY_RAISE&quot;&gt;&lt;code&gt;NPY_RAISE&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;c-api.array#c.NPY_WRAP&quot;&gt;&lt;code&gt;NPY_WRAP&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;c-api.array#c.NPY_CLIP&quot;&gt;&lt;code&gt;NPY_CLIP&lt;/code&gt;&lt;/a&gt;) determines how will indices smaller than 0 or larger than &lt;code&gt;nindarray&lt;/code&gt; will be handled.</source>
          <target state="translated">C 연속, 동작 세그먼트에 대한 포인터 &lt;code&gt;src&lt;/code&gt; 를 3 차원 모양 배열 &lt;code&gt;(n_outer, nindarray, nelem)&lt;/code&gt; 로 해석하는 함수, &lt;code&gt;m_middle&lt;/code&gt; 정수 인덱스 의 연속적이고 동작하는 세그먼트에 대한 포인터 &lt;code&gt;indarray&lt;/code&gt; 및 포인터 &lt;code&gt;dest&lt;/code&gt; 는 C에 인접하는 모양의 3 차원 배열로 해석 세그먼트 행동 &lt;code&gt;(n_outer, m_middle, nelem)&lt;/code&gt; . &lt;code&gt;indarray&lt;/code&gt; 의 인덱스 는 두 번째 차원을 따라 &lt;code&gt;src&lt;/code&gt; 를 색인화 하고 &lt;code&gt;nelem&lt;/code&gt; 항목 의 해당 청크 를 &lt;code&gt;dest&lt;/code&gt; 에 복사하는 데 사용됩니다 . &lt;code&gt;clipmode&lt;/code&gt; ( NPY_RAISE 값을 사용할 수 &lt;a href=&quot;c-api.array#c.NPY_RAISE&quot;&gt; &lt;code&gt;NPY_RAISE&lt;/code&gt; &lt;/a&gt;, &lt;a href=&quot;c-api.array#c.NPY_WRAP&quot;&gt; &lt;code&gt;NPY_WRAP&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;c-api.array#c.NPY_CLIP&quot;&gt; &lt;code&gt;NPY_CLIP&lt;/code&gt; &lt;/a&gt; )은 0보다 작거나 &lt;code&gt;nindarray&lt;/code&gt; 보다 큰 인덱스를 처리하는 방법을 결정합니다 .</target>
        </trans-unit>
        <trans-unit id="7cb7204cb0f2bbcfcce745946459084676997fbf" translate="yes" xml:space="preserve">
          <source>A function to INCREF all the objects at the location &lt;em&gt;ptr&lt;/em&gt; according to the data-type &lt;em&gt;dtype&lt;/em&gt;. If &lt;em&gt;ptr&lt;/em&gt; is the start of a structured type with an object at any offset, then this will (recursively) increment the reference count of all object-like items in the structured type.</source>
          <target state="translated">data-type &lt;em&gt;dtype&lt;/em&gt; 에 따라 위치 &lt;em&gt;ptr&lt;/em&gt; 의 모든 오브젝트를 INCREF하는 함수 입니다. 경우 &lt;em&gt;PTR가&lt;/em&gt; 어떤 오프셋,이 마음대로 개체 구조형의 시작은 재귀 모든 구조형 항목 객체 등의 참조 카운트를 증가.&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="cf2abd32c85efc7a4a45d18f882ea7390dd2a706" translate="yes" xml:space="preserve">
          <source>A function to XDECREF all the object-like items at the location &lt;em&gt;ptr&lt;/em&gt; as recorded in the data-type, &lt;em&gt;dtype&lt;/em&gt;. This works recursively so that if &lt;code&gt;dtype&lt;/code&gt; itself has fields with data-types that contain object-like items, all the object-like fields will be XDECREF &lt;code&gt;'d&lt;/code&gt;.</source>
          <target state="translated">데이터 유형 &lt;em&gt;dtype에&lt;/em&gt; 기록 된 위치 &lt;em&gt;ptr&lt;/em&gt; 에있는 모든 오브젝트와 같은 항목을 XDECREF하는 함수 입니다. 이것은 &lt;code&gt;dtype&lt;/code&gt; 자체에 객체와 같은 항목을 포함하는 데이터 유형을 가진 필드가있는 경우 모든 객체와 같은 필드가 XDECREF &lt;code&gt;'d&lt;/code&gt; 가되도록 재귀 적으로 작동합니다 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="b5ce3a36b4ee5ac8d172d6bf8491bf2eb17ead79" translate="yes" xml:space="preserve">
          <source>A function to determine how scalars of this type should be interpreted. The argument is &lt;code&gt;NULL&lt;/code&gt; or a 0-dimensional array containing the data (if that is needed to determine the kind of scalar). The return value must be of type &lt;a href=&quot;c-api.array#c.NPY_SCALARKIND&quot;&gt;&lt;code&gt;NPY_SCALARKIND&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 유형의 스칼라를 해석하는 방법을 결정하는 함수입니다. 인수는 &lt;code&gt;NULL&lt;/code&gt; 이거나 데이터를 포함하는 0 차원 배열입니다 (스칼라의 종류를 결정하는 데 필요한 경우). 리턴 값은 &lt;a href=&quot;c-api.array#c.NPY_SCALARKIND&quot;&gt; &lt;code&gt;NPY_SCALARKIND&lt;/code&gt; &lt;/a&gt; 유형 이어야 합니다.</target>
        </trans-unit>
        <trans-unit id="3b27f94e3fb931693e2774cbba4852a8add55e98" translate="yes" xml:space="preserve">
          <source>A function which resolves the types and fills an array with the dtypes for the inputs and outputs</source>
          <target state="translated">유형을 확인하고 입력 및 출력에 대한 dtype으로 배열을 채우는 함수</target>
        </trans-unit>
        <trans-unit id="fa05609e2a63e5f9fc5e98307d1ff0cf96661165" translate="yes" xml:space="preserve">
          <source>A function which returns an inner loop. The &lt;code&gt;legacy&lt;/code&gt; in the name arises because for NumPy 1.6 a better variant had been planned. This variant has not yet come about.</source>
          <target state="translated">내부 루프를 반환하는 함수입니다. NumPy 1.6의 경우 더 나은 변형이 계획되었으므로 이름 의 &lt;code&gt;legacy&lt;/code&gt; 이 생깁니다. 이 변종은 아직 나오지 않았습니다.</target>
        </trans-unit>
        <trans-unit id="69b19ae750da9c4f2d084ff0e9fbbfc38d5ca7e9" translate="yes" xml:space="preserve">
          <source>A function whose call signature is similar to that of &lt;a href=&quot;numpy.triu#numpy.triu&quot;&gt;&lt;code&gt;triu&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;numpy.tril#numpy.tril&quot;&gt;&lt;code&gt;tril&lt;/code&gt;&lt;/a&gt;. That is, &lt;code&gt;mask_func(x, k)&lt;/code&gt; returns a boolean array, shaped like &lt;code&gt;x&lt;/code&gt;. &lt;code&gt;k&lt;/code&gt; is an optional argument to the function.</source>
          <target state="translated">그 콜 사인 함수는 유사하다 &lt;a href=&quot;numpy.triu#numpy.triu&quot;&gt; &lt;code&gt;triu&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;numpy.tril#numpy.tril&quot;&gt; &lt;code&gt;tril&lt;/code&gt; &lt;/a&gt; . 즉, &lt;code&gt;mask_func(x, k)&lt;/code&gt; 는 &lt;code&gt;x&lt;/code&gt; 모양의 부울 배열을 반환합니다 . &lt;code&gt;k&lt;/code&gt; 는 함수에 대한 선택적 인수입니다.</target>
        </trans-unit>
        <trans-unit id="995bd7d70930e4a19e95e761b6d0636c4fb0d572" translate="yes" xml:space="preserve">
          <source>A generalization of this function for N-d arrays, that returns normal ndarrays.</source>
          <target state="translated">정상적인 ndarray를 반환하는 Nd 배열에 대한이 함수의 일반화.</target>
        </trans-unit>
        <trans-unit id="7d2cd13996513172bdaffb1dca33e4b60945af7a" translate="yes" xml:space="preserve">
          <source>A generalization to N dimensions and other operations. &lt;code&gt;np.multiply.outer(a.ravel(), b.ravel())&lt;/code&gt; is the equivalent.</source>
          <target state="translated">N 차원 및 기타 작업에 대한 일반화 &lt;code&gt;np.multiply.outer(a.ravel(), b.ravel())&lt;/code&gt; 는 동등합니다.</target>
        </trans-unit>
        <trans-unit id="05fbcfb35e19c702c00b11ba0147b99881f61dfb" translate="yes" xml:space="preserve">
          <source>A generic data source file (file, http, ftp, &amp;hellip;).</source>
          <target state="translated">일반 데이터 소스 파일 (file, http, ftp,&amp;hellip;)</target>
        </trans-unit>
        <trans-unit id="e742e0b647aaf1df5f5d3abb685cf9ccd7d61f19" translate="yes" xml:space="preserve">
          <source>A generic ufunc call. The ufunc is passed in as &lt;em&gt;self&lt;/em&gt;, the arguments to the ufunc as &lt;em&gt;args&lt;/em&gt; and &lt;em&gt;kwds&lt;/em&gt;. The &lt;em&gt;mps&lt;/em&gt; argument is an array of &lt;a href=&quot;c-api.types-and-structures#c.PyArrayObject&quot;&gt;&lt;code&gt;PyArrayObject&lt;/code&gt;&lt;/a&gt; pointers whose values are discarded and which receive the converted input arguments as well as the ufunc outputs when success is returned. The user is responsible for managing this array and receives a new reference for each array in &lt;em&gt;mps&lt;/em&gt;. The total number of arrays in &lt;em&gt;mps&lt;/em&gt; is given by &lt;em&gt;self&lt;/em&gt; -&amp;gt;nin + &lt;em&gt;self&lt;/em&gt; -&amp;gt;nout.</source>
          <target state="translated">일반적인 ufunc 호출. ufunc는 &lt;em&gt;self&lt;/em&gt; 로 전달되고 ufunc 에 대한 인수는 &lt;em&gt;args&lt;/em&gt; 및 &lt;em&gt;kwds로 전달&lt;/em&gt; 됩니다. &lt;em&gt;MPS의&lt;/em&gt; 인수의 배열 &lt;a href=&quot;c-api.types-and-structures#c.PyArrayObject&quot;&gt; &lt;code&gt;PyArrayObject&lt;/code&gt; 의&lt;/a&gt; 값을 무시하고 성공이 반환 될 때, 변환 된 입력 인자뿐만 아니라 ufunc 출력을 수신 포인터. 사용자는이 배열을 관리해야하며 &lt;em&gt;mps의&lt;/em&gt; 각 배열에 대한 새 참조를받습니다 . 의 배열의 총 수 &lt;em&gt;MPS가&lt;/em&gt; 주어진다 &lt;em&gt;자기&lt;/em&gt; &amp;gt; 닌 + - &lt;em&gt;자기&lt;/em&gt; -&amp;gt; NOUT합니다.</target>
        </trans-unit>
        <trans-unit id="e4625317d56afc2bf8a1ab930c61261029361d6f" translate="yes" xml:space="preserve">
          <source>A highly efficient way of reading binary data with a known data-type, as well as parsing simply formatted text files. Data written using the &lt;code&gt;tofile&lt;/code&gt; method can be read using this function.</source>
          <target state="translated">알려진 형식의 이진 데이터를 읽고 효율적으로 형식화 된 텍스트 파일을 구문 분석하는 매우 효율적인 방법입니다. &lt;code&gt;tofile&lt;/code&gt; 메소드를 사용하여 작성된 데이터는 이 기능을 사용하여 읽을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fed398eb719e55b17943429f3e4fdb68c14251c9" translate="yes" xml:space="preserve">
          <source>A list containing the data-types for the different columns, e.g. &lt;code&gt;['i4', 'f8', 'i4']&lt;/code&gt;. &lt;code&gt;formats&lt;/code&gt; does &lt;em&gt;not&lt;/em&gt; support the new convention of using types directly, i.e. &lt;code&gt;(int, float, int)&lt;/code&gt;. Note that &lt;code&gt;formats&lt;/code&gt; must be a list, not a tuple. Given that &lt;code&gt;formats&lt;/code&gt; is somewhat limited, we recommend specifying &lt;a href=&quot;numpy.dtype#numpy.dtype&quot;&gt;&lt;code&gt;dtype&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">다른 열에 대한 데이터 유형을 포함하는 목록입니다 (예 : &lt;code&gt;['i4', 'f8', 'i4']&lt;/code&gt; . &lt;code&gt;formats&lt;/code&gt; 은 형식을 직접 사용하는 새로운 규칙, 즉 &lt;code&gt;(int, float, int)&lt;/code&gt; 지원 하지 &lt;em&gt;않습니다&lt;/em&gt; . 하는 것으로 &lt;code&gt;formats&lt;/code&gt; 목록이 아니라 튜플해야합니다. 점을 감안 &lt;code&gt;formats&lt;/code&gt; 다소 제한됩니다, 우리는 지정 추천 &lt;a href=&quot;numpy.dtype#numpy.dtype&quot;&gt; &lt;code&gt;dtype&lt;/code&gt; &lt;/a&gt; 대신.</target>
        </trans-unit>
        <trans-unit id="1da31c2d761b650fc657c3090a468a9da54f9de6" translate="yes" xml:space="preserve">
          <source>A list of D arrays describing the bin edges for each dimension.</source>
          <target state="translated">각 차원의 빈 가장자리를 설명하는 D 배열 목록입니다.</target>
        </trans-unit>
        <trans-unit id="8dccfbefc014a73715a7bf33178f7d4dadc963d9" translate="yes" xml:space="preserve">
          <source>A list of dtypes or dtype convertible objects representing arrays.</source>
          <target state="translated">배열을 나타내는 dtype 또는 dtype 변환 가능 객체의 목록입니다.</target>
        </trans-unit>
        <trans-unit id="ca05b514dd6531df90ebf63f10153d3470704d68" translate="yes" xml:space="preserve">
          <source>A list of dtypes or dtype convertible objects representing scalars.</source>
          <target state="translated">스칼라를 나타내는 dtype 또는 dtype 변환 가능 객체의 목록입니다.</target>
        </trans-unit>
        <trans-unit id="24f20e94cc1577ba19bd51fd88c7c894abd02ccc" translate="yes" xml:space="preserve">
          <source>A list of names to exclude. This list is appended to the default list [&amp;lsquo;return&amp;rsquo;,&amp;rsquo;file&amp;rsquo;,&amp;rsquo;print&amp;rsquo;]. Excluded names are appended an underscore: for example, &lt;code&gt;file&lt;/code&gt; would become &lt;code&gt;file_&lt;/code&gt;.</source>
          <target state="translated">제외 할 이름 목록입니다. 이 목록은 기본 목록 [ 'return', 'file', 'print']에 추가됩니다. 제외 된 이름에는 밑줄이 추가됩니다 (예 : &lt;code&gt;file&lt;/code&gt; 은 &lt;code&gt;file_&lt;/code&gt; 이 됩니다).</target>
        </trans-unit>
        <trans-unit id="0f3d5f54a16228377e53581376ffb48f3c30e87c" translate="yes" xml:space="preserve">
          <source>A list of objects that matched the search is displayed, sorted by relevance. All given keywords need to be found in the docstring for it to be returned as a result, but the order does not matter.</source>
          <target state="translated">검색과 일치하는 개체 목록이 관련성별로 정렬되어 표시됩니다. 주어진 모든 키워드는 결과로 반환 되려면 docstring에서 찾아야하지만 순서는 중요하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="9f6f052d201d59387579347a7dac2c74e5309ea5" translate="yes" xml:space="preserve">
          <source>A list of slices (start and end indexes) of unmasked indexes in the array.</source>
          <target state="translated">배열에서 마스크되지 않은 인덱스의 슬라이스 (시작 및 끝 인덱스) 목록입니다.</target>
        </trans-unit>
        <trans-unit id="cd652a1229439a6ceff8e2b412bf54484522702c" translate="yes" xml:space="preserve">
          <source>A list of sub-arrays.</source>
          <target state="translated">하위 배열 목록.</target>
        </trans-unit>
        <trans-unit id="335672ba95b65b1f5d901e9f2df4feaada975adc" translate="yes" xml:space="preserve">
          <source>A list of tuples providing a more detailed description of the memory layout for each item in the homogeneous array. Each tuple in the list has two or three elements. Normally, this attribute would be used when &lt;em&gt;typestr&lt;/em&gt; is &lt;code&gt;V[0-9]+&lt;/code&gt;, but this is not a requirement. The only requirement is that the number of bytes represented in the &lt;em&gt;typestr&lt;/em&gt; key is the same as the total number of bytes represented here. The idea is to support descriptions of C-like structs that make up array elements. The elements of each tuple in the list are</source>
          <target state="translated">동종 배열의 각 항목에 대한 메모리 레이아웃에 대한 자세한 설명을 제공하는 튜플 목록입니다. 목록의 각 튜플에는 2 ~ 3 개의 요소가 있습니다. 일반적으로 &lt;em&gt;typestr&lt;/em&gt; 이 &lt;code&gt;V[0-9]+&lt;/code&gt; 인 경우이 속성이 사용 되지만 필수는 아닙니다. 유일한 요구 사항은 &lt;em&gt;typestr&lt;/em&gt; 키에 표시된 바이트 수가 여기에 표시된 총 바이트 수와 동일해야한다는 것입니다. 아이디어는 배열 요소를 구성하는 C와 유사한 구조체에 대한 설명을 지원하는 것입니다. 목록에있는 각 튜플의 요소는</target>
        </trans-unit>
        <trans-unit id="90b02866cbd2eb2a4a1f900e5689f4807053a09b" translate="yes" xml:space="preserve">
          <source>A list of tuples with indices of axes a generalized ufunc should operate on. For instance, for a signature of &lt;code&gt;(i,j),(j,k)-&amp;gt;(i,k)&lt;/code&gt; appropriate for matrix multiplication, the base elements are two-dimensional matrices and these are taken to be stored in the two last axes of each argument. The corresponding axes keyword would be &lt;code&gt;[(-2, -1), (-2, -1), (-2, -1)]&lt;/code&gt;. For simplicity, for generalized ufuncs that operate on 1-dimensional arrays (vectors), a single integer is accepted instead of a single-element tuple, and for generalized ufuncs for which all outputs are scalars, the output tuples can be omitted.</source>
          <target state="translated">일반화 된 ufunc가 작동해야하는 축 인덱스가있는 튜플 목록입니다. 예를 들어, 행렬 곱셈에 적합한 &lt;code&gt;(i,j),(j,k)-&amp;gt;(i,k)&lt;/code&gt; 의 서명의 경우 기본 요소는 2 차원 행렬이며 마지막 두 축에 저장됩니다. 각 논쟁의. 해당 좌표축 키워드는 &lt;code&gt;[(-2, -1), (-2, -1), (-2, -1)]&lt;/code&gt; 입니다. 단순화를 위해 1 차원 배열 (벡터)에서 작동하는 일반화 된 ufunc의 경우 단일 요소 튜플 대신 단일 정수가 허용되고 모든 출력이 스칼라 인 일반화 된 ufunc의 경우 출력 튜플을 생략 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1931f7fd587f1bfa9304b0a2cf9e0e86ad737bc7" translate="yes" xml:space="preserve">
          <source>A list representation of the einsum path.</source>
          <target state="translated">einsum 경로의 목록 표현.</target>
        </trans-unit>
        <trans-unit id="01b8f3fc931ed4758e3c5ae0ca5a041861bb3033" translate="yes" xml:space="preserve">
          <source>A list which will be filled with all matched warnings.</source>
          <target state="translated">일치하는 모든 경고로 채워지는 목록입니다.</target>
        </trans-unit>
        <trans-unit id="589807e2972076a7140185840f86e44874d938aa" translate="yes" xml:space="preserve">
          <source>A loaded die is more likely to land on number 6:</source>
          <target state="translated">로드 된 다이는 6 위에 올 가능성이 높습니다.</target>
        </trans-unit>
        <trans-unit id="189d9b82b9c6a5ad123dc2d81bd98cbcce5feec7" translate="yes" xml:space="preserve">
          <source>A location into which the result is stored. If not provided or &lt;code&gt;None&lt;/code&gt;, a freshly-allocated array is returned. For consistency with &lt;code&gt;ufunc.__call__&lt;/code&gt;, if given as a keyword, this may be wrapped in a 1-element tuple.</source>
          <target state="translated">결과가 저장되는 위치입니다. 제공되지 않거나 &lt;code&gt;None&lt;/code&gt; 이면 새로 할당 된 배열이 반환됩니다. &lt;code&gt;ufunc.__call__&lt;/code&gt; 과 일관성을 유지 하기 위해 키워드로 지정하면 1 요소 튜플로 묶을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="30ff2cf37c49042997e4c4edb219d3f048658fab" translate="yes" xml:space="preserve">
          <source>A location into which the result is stored. If provided, it must have a shape that matches the signature &lt;code&gt;(n,k),(k,m)-&amp;gt;(n,m)&lt;/code&gt;. If not provided or &lt;code&gt;None&lt;/code&gt;, a freshly-allocated array is returned.</source>
          <target state="translated">결과가 저장되는 위치입니다. 제공되는 경우 서명 &lt;code&gt;(n,k),(k,m)-&amp;gt;(n,m)&lt;/code&gt; 과 일치하는 모양이어야합니다 . 제공되지 않거나 &lt;code&gt;None&lt;/code&gt; 이면 새로 할당 된 배열이 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="74ecfd958d8205d0b812a91718af7b311a9c11fe" translate="yes" xml:space="preserve">
          <source>A location into which the result is stored. If provided, it must have a shape that the inputs broadcast to. If not provided or &lt;code&gt;None&lt;/code&gt;, a freshly-allocated array is returned. A tuple (possible only as a keyword argument) must have length equal to the number of outputs.</source>
          <target state="translated">결과가 저장되는 위치입니다. 제공되는 경우 입력이 브로드 캐스트되는 모양이어야합니다. 제공되지 않거나 &lt;code&gt;None&lt;/code&gt; 이면 새로 할당 된 배열이 반환됩니다. 튜플 (키워드 인수로만 사용 가능)의 길이는 출력 수와 같아야합니다.</target>
        </trans-unit>
        <trans-unit id="b7739f26a858b347978a4cfbfb1e35e7d5512c0c" translate="yes" xml:space="preserve">
          <source>A location where the result is stored</source>
          <target state="translated">결과가 저장되는 위치</target>
        </trans-unit>
        <trans-unit id="d772df58997e4959ba59b176b19f2790ec826fd9" translate="yes" xml:space="preserve">
          <source>A loose wrapper for a C-structure that contains the information needed for looping. This is useful if you are trying to understand the ufunc looping code. The &lt;a href=&quot;#c.PyUFuncLoopObject&quot;&gt;&lt;code&gt;PyUFuncLoopObject&lt;/code&gt;&lt;/a&gt; is the associated C-structure. It is defined in the &lt;code&gt;ufuncobject.h&lt;/code&gt; header.</source>
          <target state="translated">루핑에 필요한 정보가 포함 된 C 구조의 느슨한 래퍼입니다. 이것은 ufunc 루핑 코드를 이해하려고 할 때 유용합니다. &lt;a href=&quot;#c.PyUFuncLoopObject&quot;&gt; &lt;code&gt;PyUFuncLoopObject&lt;/code&gt; 는&lt;/a&gt; 연결된 C-구조이다. &lt;code&gt;ufuncobject.h&lt;/code&gt; 헤더에 정의되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="210bb7c0a2b1abe6f26b2cdaf9e3f00dc43f0623" translate="yes" xml:space="preserve">
          <source>A loose wrapper for the C-structure that contains the information needed for reduce-like methods of ufuncs. This is useful if you are trying to understand the reduce, accumulate, and reduce-at code. The &lt;a href=&quot;#c.PyUFuncReduceObject&quot;&gt;&lt;code&gt;PyUFuncReduceObject&lt;/code&gt;&lt;/a&gt; is the associated C-structure. It is defined in the &lt;code&gt;ufuncobject.h&lt;/code&gt; header.</source>
          <target state="translated">축소 형 ufuncs 방법에 필요한 정보가 포함 된 C 구조용 느슨한 래퍼입니다. 축소, 누적 및 축소 코드를 이해하려는 경우에 유용합니다. &lt;a href=&quot;#c.PyUFuncReduceObject&quot;&gt; &lt;code&gt;PyUFuncReduceObject&lt;/code&gt; 는&lt;/a&gt; 연결된 C-구조이다. &lt;code&gt;ufuncobject.h&lt;/code&gt; 헤더에 정의되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="2d1cb19028cca9983f03bd697ebc873a781f7663" translate="yes" xml:space="preserve">
          <source>A macro that expands to platform-dependent code. The &lt;em&gt;ret&lt;/em&gt; variable can be any integer. The &lt;code&gt;UFUNC_FPE_{ERR}&lt;/code&gt; bits are set in &lt;em&gt;ret&lt;/em&gt; according to the status of the corresponding error flags of the floating point processor.</source>
          <target state="translated">플랫폼 종속 코드로 확장되는 매크로입니다. &lt;em&gt;RET의&lt;/em&gt; 변수는 정수가 될 수 있습니다. &lt;code&gt;UFUNC_FPE_{ERR}&lt;/code&gt; 비트가 설정된다 &lt;em&gt;RET&lt;/em&gt; 부동 소수점 프로세서의 대응하는 에러 플래그의 상태에 따라.</target>
        </trans-unit>
        <trans-unit id="f28b1832d8de539ad6ac78e4879f653172b81a74" translate="yes" xml:space="preserve">
          <source>A macro used internally to check for errors and goto fail if found. This macro requires a fail label in the current code block. The &lt;em&gt;loop&lt;/em&gt; variable must have at least members (obj, errormask, and errorobj). If &lt;em&gt;loop&lt;/em&gt; -&amp;gt;obj is nonzero, then &lt;a href=&quot;https://docs.python.org/dev/c-api/exceptions.html#c.PyErr_Occurred&quot;&gt;&lt;code&gt;PyErr_Occurred&lt;/code&gt;&lt;/a&gt; () is called (meaning the GIL must be held). If &lt;em&gt;loop&lt;/em&gt; -&amp;gt;obj is zero, then if &lt;em&gt;loop&lt;/em&gt; -&amp;gt;errormask is nonzero, &lt;a href=&quot;#c.PyUFunc_checkfperr&quot;&gt;&lt;code&gt;PyUFunc_checkfperr&lt;/code&gt;&lt;/a&gt; is called with arguments &lt;em&gt;loop&lt;/em&gt; -&amp;gt;errormask and &lt;em&gt;loop&lt;/em&gt; -&amp;gt;errobj. If the result of this check of the IEEE floating point registers is true then the code redirects to the fail label which must be defined.</source>
          <target state="translated">내부적으로 오류를 확인하고 발견되면 실패하는 매크로입니다. 이 매크로는 현재 코드 블록에 실패 레이블이 필요합니다. &lt;em&gt;루프&lt;/em&gt; 변수는 적어도 멤버에서 (OBJ, errormask 및 errorobj)가 있어야합니다. 경우 &lt;em&gt;루프&lt;/em&gt; -&amp;gt; obj가 다음 제로입니다 &lt;a href=&quot;https://docs.python.org/dev/c-api/exceptions.html#c.PyErr_Occurred&quot;&gt; &lt;code&gt;PyErr_Occurred&lt;/code&gt; &lt;/a&gt; ()를 호출합니다 (GIL 의미를 개최해야 함). 경우 &lt;em&gt;루프&lt;/em&gt; -&amp;gt; obj가 0 인 다음의 경우 &lt;em&gt;루프&lt;/em&gt; -&amp;gt; errormask IS 0이 아닌 &lt;a href=&quot;#c.PyUFunc_checkfperr&quot;&gt; &lt;code&gt;PyUFunc_checkfperr&lt;/code&gt; 이&lt;/a&gt; 인수로 호출 &lt;em&gt;루프&lt;/em&gt; &amp;gt; errormask 및 - &lt;em&gt;루프&lt;/em&gt; -&amp;gt; errobj. IEEE 부동 소수점 레지스터에 대한이 검사 결과가 참이면 코드는 반드시 정의해야하는 실패 레이블로 경로 재 지정됩니다.</target>
        </trans-unit>
        <trans-unit id="259aa1241531c8a953c8758b1ac4f41805af1a59" translate="yes" xml:space="preserve">
          <source>A macro which calls the auxdata&amp;rsquo;s clone function appropriately, returning a deep copy of the auxiliary data.</source>
          <target state="translated">auxdata의 clone 함수를 적절하게 호출하여 보조 데이터의 깊은 사본을 반환하는 매크로입니다.</target>
        </trans-unit>
        <trans-unit id="6a68e2152dcf816535a4914a7278ab4814568b2a" translate="yes" xml:space="preserve">
          <source>A macro which calls the auxdata&amp;rsquo;s free function appropriately, does nothing if auxdata is NULL.</source>
          <target state="translated">auxdata의 free 함수를 적절하게 호출하는 매크로는 auxdata가 NULL 인 경우 아무 작업도 수행하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="c85dcfb9c03f01d4f635e537884d50fe2361f8ef" translate="yes" xml:space="preserve">
          <source>A masked array can also be created by taking a .view(MaskedArray).</source>
          <target state="translated">.view (MaskedArray)를 사용하여 마스크 배열을 만들 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="f52d1200442f679dc576dc7bcd38aabdb0e058c3" translate="yes" xml:space="preserve">
          <source>A masked array is the combination of a standard &lt;a href=&quot;generated/numpy.ndarray#numpy.ndarray&quot;&gt;&lt;code&gt;numpy.ndarray&lt;/code&gt;&lt;/a&gt; and a mask. A mask is either &lt;a href=&quot;maskedarray.baseclass#numpy.ma.nomask&quot;&gt;&lt;code&gt;nomask&lt;/code&gt;&lt;/a&gt;, indicating that no value of the associated array is invalid, or an array of booleans that determines for each element of the associated array whether the value is valid or not. When an element of the mask is &lt;code&gt;False&lt;/code&gt;, the corresponding element of the associated array is valid and is said to be unmasked. When an element of the mask is &lt;code&gt;True&lt;/code&gt;, the corresponding element of the associated array is said to be masked (invalid).</source>
          <target state="translated">마스크 배열은 표준 &lt;a href=&quot;generated/numpy.ndarray#numpy.ndarray&quot;&gt; &lt;code&gt;numpy.ndarray&lt;/code&gt; &lt;/a&gt; 와 마스크 의 조합입니다 . 마스크는 &lt;a href=&quot;maskedarray.baseclass#numpy.ma.nomask&quot;&gt; &lt;code&gt;nomask&lt;/code&gt; &lt;/a&gt; 이며 연관된 배열의 값이 유효하지 않음을 나타내거나 연관된 배열의 각 요소에 대해 값이 유효한지 여부를 판별하는 부울 배열입니다. 마스크의 요소가 &lt;code&gt;False&lt;/code&gt; 인 경우 연관된 배열의 해당 요소가 유효하며 마스크 해제 된 것으로 간주됩니다. 마스크의 요소가 &lt;code&gt;True&lt;/code&gt; 인 경우 관련 배열의 해당 요소가 마스킹되었다고합니다 (유효하지 않음).</target>
        </trans-unit>
        <trans-unit id="829b7a94e24ea2654187698ce1c61c946cf592a4" translate="yes" xml:space="preserve">
          <source>A masked array with all data masked.</source>
          <target state="translated">모든 데이터가 마스킹 된 마스킹 된 배열입니다.</target>
        </trans-unit>
        <trans-unit id="77a446e834e09b8c95fd907735120b99ef29b40b" translate="yes" xml:space="preserve">
          <source>A matrix of floating-point samples drawn from the standard normal distribution.</source>
          <target state="translated">표준 정규 분포에서 가져온 부동 소수점 샘플의 행렬입니다.</target>
        </trans-unit>
        <trans-unit id="cc104aa34da923a98391ba0395e7135b414c1163" translate="yes" xml:space="preserve">
          <source>A matrix with orthonormal columns. When mode = &amp;lsquo;complete&amp;rsquo; the result is an orthogonal/unitary matrix depending on whether or not a is real/complex. The determinant may be either +/- 1 in that case.</source>
          <target state="translated">직교 정렬 열이있는 행렬. mode = 'complete'인 경우 결과는 실수 / 복소수인지 여부에 따라 직교 / 단일 행렬입니다. 이 경우 결정자는 +/- 1 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b53664ffd0d1b20158d240bc21a792bcacea3d14" translate="yes" xml:space="preserve">
          <source>A minimum number of bins for the output array.</source>
          <target state="translated">출력 배열의 최소 구간 수입니다.</target>
        </trans-unit>
        <trans-unit id="0f7fbf4a6e300b7306d6e3cc9b3d65c15f44b2ab" translate="yes" xml:space="preserve">
          <source>A modified version of the input array, masked depending on the value of the &lt;code&gt;axis&lt;/code&gt; parameter.</source>
          <target state="translated">&lt;code&gt;axis&lt;/code&gt; 매개 변수 의 값에 따라 마스크 된 입력 배열의 수정 된 버전입니다 .</target>
        </trans-unit>
        <trans-unit id="6344acf4bd2d798723a4d93d8470321a3ff92ae1" translate="yes" xml:space="preserve">
          <source>A more complex index transformation example.</source>
          <target state="translated">보다 복잡한 인덱스 변환 예</target>
        </trans-unit>
        <trans-unit id="d0e4296234626cc1940c4e26b6217e094308ce0c" translate="yes" xml:space="preserve">
          <source>A more detailed explanation of strides can be found in the &amp;ldquo;ndarray.rst&amp;rdquo; file in the NumPy reference guide.</source>
          <target state="translated">보폭에 대한 자세한 설명은 NumPy 참조 안내서의 &quot;ndarray.rst&quot;파일에서 찾을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b987c0a601229775f934a75a0acce45184bf47bd" translate="yes" xml:space="preserve">
          <source>A multi-dimensional array example:</source>
          <target state="translated">다차원 배열 예 :</target>
        </trans-unit>
        <trans-unit id="f88e9f525efb508388784dc73a582e741fab97e4" translate="yes" xml:space="preserve">
          <source>A multi-dimensional example:</source>
          <target state="translated">다차원적인 예 :</target>
        </trans-unit>
        <trans-unit id="5dc89d991a8bf05772b7ec899a7daed6b0a8b80a" translate="yes" xml:space="preserve">
          <source>A multidimensional example:</source>
          <target state="translated">다차원적인 예 :</target>
        </trans-unit>
        <trans-unit id="fee4550ab9483136891754f4bdfd6191512d9294" translate="yes" xml:space="preserve">
          <source>A named repeat rule is useful when the same set of repeats must be used several times in a block. It is specified using &amp;lt;rule1=item1, item2, item3,&amp;hellip;, itemN&amp;gt;, where N is the number of times the block should be repeated. On each repeat of the block, the entire expression, &amp;lsquo;&amp;lt;&amp;hellip;&amp;gt;&amp;rsquo; will be replaced first with item1, and then with item2, and so forth until N repeats are accomplished. Once a named repeat specification has been introduced, the same repeat rule may be used &lt;strong&gt;in the current block&lt;/strong&gt; by referring only to the name (i.e. &amp;lt;rule1&amp;gt;.</source>
          <target state="translated">명명 된 반복 규칙은 블록에서 동일한 반복 세트를 여러 번 사용해야하는 경우에 유용합니다. &amp;lt;rule1 = item1, item2, item3,&amp;hellip;, itemN&amp;gt;을 사용하여 지정됩니다. 여기서 N은 블록을 반복해야하는 횟수입니다. 블록의 각 반복에서 전체 표현식 '&amp;lt;&amp;hellip;&amp;gt;'은 먼저 N이 반복 될 때까지 item1로, 그런 다음 item2로 대체됩니다. 명명 된 반복 지정이 도입되면 이름 만 참조 &lt;strong&gt;하여 현재 블록&lt;/strong&gt; 에 동일한 반복 규칙을 사용할 수 있습니다 (예 : &amp;lt;rule1&amp;gt;).</target>
        </trans-unit>
        <trans-unit id="746f3b414823e7887d26584e61a99960d3d3807d" translate="yes" xml:space="preserve">
          <source>A new 1-D array initialized from text data in a string.</source>
          <target state="translated">문자열의 텍스트 데이터에서 초기화 된 새로운 1D 배열.</target>
        </trans-unit>
        <trans-unit id="88ecc2ebbb56dcaedff4a2139418dee2fb902a28" translate="yes" xml:space="preserve">
          <source>A new &lt;code&gt;ndarray&lt;/code&gt; holding the non-masked data is returned.</source>
          <target state="translated">마스크되지 않은 데이터를 보유 하는 새로운 &lt;code&gt;ndarray&lt;/code&gt; 가 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="fe219505f265baf36bb811d03f81478d040b90cc" translate="yes" xml:space="preserve">
          <source>A new array holding the result is returned unless &lt;code&gt;out&lt;/code&gt; is specified, in which case a reference to &lt;code&gt;out&lt;/code&gt; is returned. The result has the same size as &lt;code&gt;a&lt;/code&gt;, and the same shape as &lt;code&gt;a&lt;/code&gt; if &lt;code&gt;axis&lt;/code&gt; is not None or &lt;code&gt;a&lt;/code&gt; is a 1-d array.</source>
          <target state="translated">&lt;code&gt;out&lt;/code&gt; 을 지정 하지 않으면 결과를 보유한 새 배열이 반환 되며 ,이 경우 &lt;code&gt;out&lt;/code&gt; 에 대한 참조 가 반환됩니다. 그 결과 같은 크기 갖는다 과 동일한 형상 &lt;code&gt;a&lt;/code&gt; 경우 &lt;code&gt;axis&lt;/code&gt; 아무도없는거나 &lt;code&gt;a&lt;/code&gt; 1 차원 배열이다. &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fd535d99a931f0449184609f6016354bec2044d6" translate="yes" xml:space="preserve">
          <source>A new array holding the result is returned unless &lt;code&gt;out&lt;/code&gt; is specified, in which case a reference to out is returned.</source>
          <target state="translated">&lt;code&gt;out&lt;/code&gt; 을 지정 하지 않으면 결과를 보유한 새 배열이 반환 되며 ,이 경우 out에 대한 참조가 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="6f8f859ede56ba26f8769de8c565d9f4c768fea6" translate="yes" xml:space="preserve">
          <source>A new array holding the result is returned unless &lt;code&gt;out&lt;/code&gt; is specified, in which case it is returned.</source>
          <target state="translated">&lt;code&gt;out&lt;/code&gt; 을 지정 하지 않으면 결과를 보유한 새 배열이 반환 되며 ,이 경우 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="8e2320a4eb5e6995b9cc3fe7e2f76f7eeadca85d" translate="yes" xml:space="preserve">
          <source>A new array holding the result is returned unless &lt;code&gt;out&lt;/code&gt; is specified, in which it is returned. The result has the same size as &lt;code&gt;a&lt;/code&gt;, and the same shape as &lt;code&gt;a&lt;/code&gt; if &lt;code&gt;axis&lt;/code&gt; is not None or &lt;code&gt;a&lt;/code&gt; is a 1-d array.</source>
          <target state="translated">&lt;code&gt;out&lt;/code&gt; 을 지정 하지 않으면 결과를 보유한 새 배열 이 반환됩니다. 그 결과 같은 크기 갖는다 과 동일한 형상 &lt;code&gt;a&lt;/code&gt; 경우 &lt;code&gt;axis&lt;/code&gt; 아무도없는거나 &lt;code&gt;a&lt;/code&gt; 1 차원 배열이다. &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d1bd872e7a7340bee975d5292cdea5f0a94c2302" translate="yes" xml:space="preserve">
          <source>A new array holding the result is returned unless out is specified, in which case a reference to out is returned. Return data-type is &lt;code&gt;float64&lt;/code&gt; for integers and floats smaller than &lt;code&gt;float64&lt;/code&gt;, or the input data-type, otherwise.</source>
          <target state="translated">out을 지정하지 않으면 결과를 보유한 새 배열이 반환되며,이 경우 out에 대한 참조가 반환됩니다. 리턴 데이터 타입이다 &lt;code&gt;float64&lt;/code&gt; 정수과보다 작은 수레 &lt;code&gt;float64&lt;/code&gt; 달리, 또는 입력 데이터 유형.</target>
        </trans-unit>
        <trans-unit id="a8f4bbb0d5737e1005ab85a4c1e5ee3d01d76917" translate="yes" xml:space="preserve">
          <source>A new array holding the result, unless &lt;code&gt;out&lt;/code&gt; was specified, in which case a reference to &lt;code&gt;out&lt;/code&gt; is returned.</source>
          <target state="translated">않는 한 결과를 유지하는 새로운 배열 &lt;code&gt;out&lt;/code&gt; 참조되는 경우에 규정 된, &lt;code&gt;out&lt;/code&gt; 반환된다.</target>
        </trans-unit>
        <trans-unit id="5f6c1410a3a526a9aa31e8ca9eb607d4c83ef200" translate="yes" xml:space="preserve">
          <source>A new array holding the result. If the input contains integers or floats smaller than &lt;code&gt;float64&lt;/code&gt;, then the output data-type is &lt;code&gt;np.float64&lt;/code&gt;. Otherwise, the data-type of the output is the same as that of the input. If &lt;code&gt;out&lt;/code&gt; is specified, that array is returned instead.</source>
          <target state="translated">결과를 보유하는 새로운 배열. 입력에 정수가 포함되거나 &lt;code&gt;float64&lt;/code&gt; 보다 작은 수레가 있으면 출력 데이터 유형은 &lt;code&gt;np.float64&lt;/code&gt; 입니다. 그렇지 않으면 출력의 데이터 유형이 입력의 데이터 유형과 동일합니다. 경우 &lt;code&gt;out&lt;/code&gt; 지정되어, 해당 배열 대신 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="12dcc14742fa5cf966b623d3902bec2fe90f26ac" translate="yes" xml:space="preserve">
          <source>A new boolean or &lt;a href=&quot;numpy.ndarray#numpy.ndarray&quot;&gt;&lt;code&gt;ndarray&lt;/code&gt;&lt;/a&gt; is returned unless &lt;code&gt;out&lt;/code&gt; is specified, in which case a reference to &lt;code&gt;out&lt;/code&gt; is returned.</source>
          <target state="translated">&lt;code&gt;out&lt;/code&gt; 을 지정 하지 않으면 새로운 부울 또는 &lt;a href=&quot;numpy.ndarray#numpy.ndarray&quot;&gt; &lt;code&gt;ndarray&lt;/code&gt; &lt;/a&gt; 가 반환 되며 ,이 경우 &lt;code&gt;out&lt;/code&gt; 에 대한 참조 가 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="8f8e1d77c9cfe7d14f562328f05b8db6b12c1a26" translate="yes" xml:space="preserve">
          <source>A new boolean or array is returned unless &lt;code&gt;out&lt;/code&gt; is specified, in which case a reference to &lt;code&gt;out&lt;/code&gt; is returned.</source>
          <target state="translated">&lt;code&gt;out&lt;/code&gt; 을 지정 하지 않으면 새 부울 또는 배열이 반환 되며 ,이 경우 &lt;code&gt;out&lt;/code&gt; 에 대한 참조 가 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="99912ae944b2b57418e1b7da69ce28ca8ba58a1d" translate="yes" xml:space="preserve">
          <source>A new flexible-type &lt;code&gt;ndarray&lt;/code&gt; with two fields: the first element containing a value, the second element containing the corresponding mask boolean. The returned record shape matches self.shape.</source>
          <target state="translated">두 개의 필드, 즉 값을 포함하는 첫 번째 요소와 해당 마스크 부울을 포함하는 두 번째 요소가 포함 된 새로운 유연한 유형의 &lt;code&gt;ndarray&lt;/code&gt; . 반환 된 레코드 형태는 self.shape와 일치합니다.</target>
        </trans-unit>
        <trans-unit id="cb4010ee58838d1694f9ab9f7b5e871db7356a2d" translate="yes" xml:space="preserve">
          <source>A new polynomial representing the derivative.</source>
          <target state="translated">도함수를 나타내는 새로운 다항식.</target>
        </trans-unit>
        <trans-unit id="45b4e3cf6c3f9c0bf06df2287ee1b7704ec67fba" translate="yes" xml:space="preserve">
          <source>A new series representing the derivative. The domain is the same as the domain of the differentiated series.</source>
          <target state="translated">파생 상품을 나타내는 새로운 시리즈. 도메인은 차별화 된 계열의 도메인과 동일합니다.</target>
        </trans-unit>
        <trans-unit id="bf292f7f138c1a85853bbdea5d47f21f0f2e96a1" translate="yes" xml:space="preserve">
          <source>A new series representing the integral. The domain is the same as the domain of the integrated series.</source>
          <target state="translated">적분을 나타내는 새로운 시리즈. 도메인은 통합 시리즈의 도메인과 동일합니다.</target>
        </trans-unit>
        <trans-unit id="b97518c3847501702c21aaf46fb19e4284c482dc" translate="yes" xml:space="preserve">
          <source>A new view on the array.</source>
          <target state="translated">어레이의 새로운 모습.</target>
        </trans-unit>
        <trans-unit id="06077e00197e6db37d041fa326fce614e70e4417" translate="yes" xml:space="preserve">
          <source>A nicer way to build up index tuples for arrays.</source>
          <target state="translated">배열에 대한 인덱스 튜플을 구축하는 더 좋은 방법.</target>
        </trans-unit>
        <trans-unit id="f7d18c9a5816a4fd32587ba2ff5efc11cb522f13" translate="yes" xml:space="preserve">
          <source>A non-exhaustive list of these operations, which can be computed by &lt;a href=&quot;#numpy.einsum&quot;&gt;&lt;code&gt;einsum&lt;/code&gt;&lt;/a&gt;, is shown below along with examples:</source>
          <target state="translated">&lt;a href=&quot;#numpy.einsum&quot;&gt; &lt;code&gt;einsum&lt;/code&gt; &lt;/a&gt; 으로 계산할 수있는 이러한 작업의 전체 목록이 아래에 예와 함께 표시되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="3f39be7ee390b50c936131bbc0227261bdd37433" translate="yes" xml:space="preserve">
          <source>A normal &lt;code&gt;argsort&lt;/code&gt; would have yielded:</source>
          <target state="translated">정상적인 &lt;code&gt;argsort&lt;/code&gt; 는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="169aa3ac396274c2b6295b469d82a21e30785967" translate="yes" xml:space="preserve">
          <source>A number providing alignment information for this data type. Specifically, it shows how far from the start of a 2-element structure (whose first element is a &lt;code&gt;char&lt;/code&gt; ), the compiler places an item of this type: &lt;code&gt;offsetof(struct {char c; type v;},
v)&lt;/code&gt;</source>
          <target state="translated">이 데이터 유형에 대한 정렬 정보를 제공하는 숫자입니다. 특히, 2 요소 구조의 시작 (먼저 첫 번째 요소는 &lt;code&gt;char&lt;/code&gt; )에서 컴파일러가 다음 유형의 항목을 배치 하는 정도를 보여줍니다 . &lt;code&gt;offsetof(struct {char c; type v;}, v)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8937103f50695ce6653a16bee8c83a4ae6595480" translate="yes" xml:space="preserve">
          <source>A number representing the sign of the determinant. For a real matrix, this is 1, 0, or -1. For a complex matrix, this is a complex number with absolute value 1 (i.e., it is on the unit circle), or else 0.</source>
          <target state="translated">행렬식의 부호를 나타내는 숫자입니다. 실수 행렬의 경우 1, 0 또는 -1입니다. 복소수 행렬의 경우 절대 값이 1 (즉, 단위 원에 있음) 또는 0이있는 복소수입니다.</target>
        </trans-unit>
        <trans-unit id="0040a43542844366dbc2263885b6af73ee030ad0" translate="yes" xml:space="preserve">
          <source>A number that uniquely identifies the data type. For new data-types, this number is assigned when the data-type is registered.</source>
          <target state="translated">데이터 유형을 고유하게 식별하는 숫자입니다. 새로운 데이터 유형의 경우이 번호는 데이터 유형이 등록 될 때 할당됩니다.</target>
        </trans-unit>
        <trans-unit id="e64bafda3fffa3a2f2c0d4bdf32a98e5edcb1985" translate="yes" xml:space="preserve">
          <source>A number, an array of numbers, or an instance of poly1d, at which to evaluate &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;p&lt;/code&gt; 를 평가할 숫자, 숫자 배열 또는 poly1d 인스턴스입니다 .</target>
        </trans-unit>
        <trans-unit id="ed359e325ef3c86354bbb73ec8a423d46aff3b3c" translate="yes" xml:space="preserve">
          <source>A numpy array is homogeneous, and contains elements described by a dtype object. A dtype object can be constructed from different combinations of fundamental numeric types.</source>
          <target state="translated">numpy 배열은 동종이며 dtype 객체로 설명되는 요소를 포함합니다. dtype 객체는 기본 숫자 유형의 다른 조합으로 구성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="efcfbbb4a0a9c26532564adde93592102c95f15d" translate="yes" xml:space="preserve">
          <source>A one-dimensional masked array.</source>
          <target state="translated">1 차원 마스크 배열.</target>
        </trans-unit>
        <trans-unit id="0fa893bfe0bd95fab46e15f4d3eccd8809a9d3d5" translate="yes" xml:space="preserve">
          <source>A one-dimensional polynomial class.</source>
          <target state="translated">1 차원 다항식 클래스입니다.</target>
        </trans-unit>
        <trans-unit id="6fff8125898e34535342e18def4fd6d7ee1146c9" translate="yes" xml:space="preserve">
          <source>A period for the x-coordinates. This parameter allows the proper interpolation of angular x-coordinates. Parameters &lt;code&gt;left&lt;/code&gt; and &lt;code&gt;right&lt;/code&gt; are ignored if &lt;code&gt;period&lt;/code&gt; is specified.</source>
          <target state="translated">x 좌표의 기간입니다. 이 파라미터는 각도 x 좌표의 적절한 보간을 허용합니다. &lt;code&gt;period&lt;/code&gt; 이 지정 되면 &lt;code&gt;left&lt;/code&gt; 과 &lt;code&gt;right&lt;/code&gt; 매개 변수 가 무시됩니다 .</target>
        </trans-unit>
        <trans-unit id="b807b86bd0a6c46355a0cf3278bb74297eec4a49" translate="yes" xml:space="preserve">
          <source>A pointer &lt;em&gt;to&lt;/em&gt; the first element of the array.</source>
          <target state="translated">포인터 &lt;em&gt;에&lt;/em&gt; 어레이의 첫 번째 요소.</target>
        </trans-unit>
        <trans-unit id="54bc66c1a086a47763e1dec2c9b34cd3570a6b58" translate="yes" xml:space="preserve">
          <source>A pointer to a data-type descriptor object (see below). The data-type descriptor object is an instance of a new built-in type which allows a generic description of memory. There is a descriptor structure for each data type supported. This descriptor structure contains useful information about the type as well as a pointer to a table of function pointers to implement specific functionality.</source>
          <target state="translated">데이터 형식 설명자 개체에 대한 포인터입니다 (아래 참조). 데이터 형식 설명자 개체는 메모리에 대한 일반적인 설명을 허용하는 새로운 내장 형식의 인스턴스입니다. 지원되는 각 데이터 유형마다 설명자 구조가 있습니다. 이 디스크립터 구조에는 유형에 대한 유용한 정보와 특정 기능을 구현하기위한 함수 포인터 테이블에 대한 포인터가 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="f52546cb0757bfc5efa9ebae8156141a177cf5a7" translate="yes" xml:space="preserve">
          <source>A pointer to a function that compares two elements of the array, &lt;code&gt;arr&lt;/code&gt;, pointed to by &lt;code&gt;d1&lt;/code&gt; and &lt;code&gt;d2&lt;/code&gt;. This function requires behaved (aligned and not swapped) arrays. The return value is 1 if * &lt;code&gt;d1&lt;/code&gt; &amp;gt; * &lt;code&gt;d2&lt;/code&gt;, 0 if * &lt;code&gt;d1&lt;/code&gt; == * &lt;code&gt;d2&lt;/code&gt;, and -1 if * &lt;code&gt;d1&lt;/code&gt; &amp;lt; * &lt;code&gt;d2&lt;/code&gt;. The array object &lt;code&gt;arr&lt;/code&gt; is used to retrieve itemsize and field information for flexible arrays.</source>
          <target state="translated">&lt;code&gt;d1&lt;/code&gt; 과 &lt;code&gt;d2&lt;/code&gt; 가 가리키는 배열의 두 요소 &lt;code&gt;arr&lt;/code&gt; 를 비교하는 함수에 대한 포인터 입니다. 이 기능은 동작 (정렬 및 스왑되지 않은) 어레이를 필요로합니다. 리턴 값은 * &lt;code&gt;d1&lt;/code&gt; &amp;gt; * &lt;code&gt;d2&lt;/code&gt; 인 경우 1, * &lt;code&gt;d1&lt;/code&gt; == * &lt;code&gt;d2&lt;/code&gt; 인 경우 0 , * &lt;code&gt;d1&lt;/code&gt; &amp;lt;* &lt;code&gt;d2&lt;/code&gt; 인 경우 -1 입니다. 배열 객체 &lt;code&gt;arr&lt;/code&gt; 은 유연한 배열에 대한 항목 크기 및 필드 정보를 검색하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="1fc83854e537846a552a3275bf092cf2af85d046" translate="yes" xml:space="preserve">
          <source>A pointer to a function that converts the string pointed to by &lt;code&gt;str&lt;/code&gt; to one element of the corresponding type and places it in the memory location pointed to by &lt;code&gt;ip&lt;/code&gt;. After the conversion is completed, &lt;code&gt;*endptr&lt;/code&gt; points to the rest of the string. The last argument &lt;code&gt;arr&lt;/code&gt; is the array into which ip points (needed for variable-size data- types). Returns 0 on success or -1 on failure. Requires a behaved array. This function should be called without holding the Python GIL, and has to grab it for error reporting.</source>
          <target state="translated">&lt;code&gt;str&lt;/code&gt; 이 가리키는 문자열을 해당 유형의 한 요소 로 변환하고 &lt;code&gt;ip&lt;/code&gt; 가 가리키는 메모리 위치에 배치 하는 함수에 대한 포인터 입니다. 변환이 완료된 후 &lt;code&gt;*endptr&lt;/code&gt; 은 나머지 문자열을 가리 킵니다. 마지막 인수 &lt;code&gt;arr&lt;/code&gt; 은 ip가 가리키는 배열입니다 (가변 크기 데이터 유형에 필요). 성공하면 0을, 실패하면 -1을 반환합니다. 동작 배열이 필요합니다. 이 함수는 Python GIL을 유지하지 않고 호출해야하며 오류보고를 위해 가져와야합니다.</target>
        </trans-unit>
        <trans-unit id="fc6cc8bae9ddadc31f5ed95f0732f27d78c14f32" translate="yes" xml:space="preserve">
          <source>A pointer to a function that fills a contiguous &lt;code&gt;buffer&lt;/code&gt; of the given &lt;code&gt;length&lt;/code&gt; with a single scalar &lt;code&gt;value&lt;/code&gt; whose address is given. The final argument is the array which is needed to get the itemsize for variable-length arrays.</source>
          <target state="translated">주어진 &lt;code&gt;length&lt;/code&gt; 의 연속 &lt;code&gt;buffer&lt;/code&gt; 를 주소가 주어진 단일 스칼라 &lt;code&gt;value&lt;/code&gt; 채우는 함수에 대한 포인터 . 마지막 인수는 가변 길이 배열의 항목 크기를 얻는 데 필요한 배열입니다.</target>
        </trans-unit>
        <trans-unit id="3910c8d96e5d20400e40452efc26010ea9229ece" translate="yes" xml:space="preserve">
          <source>A pointer to a function that fills a contiguous array of given length with data. The first two elements of the array must already be filled- in. From these two values, a delta will be computed and the values from item 3 to the end will be computed by repeatedly adding this computed delta. The data buffer must be well-behaved.</source>
          <target state="translated">주어진 길이의 연속 배열을 데이터로 채우는 함수에 대한 포인터. 배열의 처음 두 요소는 이미 채워져 있어야합니다.이 두 값에서 델타가 계산되고이 계산 된 델타를 반복적으로 추가하여 항목 3에서 끝까지의 값이 계산됩니다. 데이터 버퍼가 올바르게 작동해야합니다.</target>
        </trans-unit>
        <trans-unit id="431a234d877bed63a4147682817ee948ed7fbada" translate="yes" xml:space="preserve">
          <source>A pointer to a function that multiplies two &lt;code&gt;n&lt;/code&gt; -length sequences together, adds them, and places the result in element pointed to by &lt;code&gt;op&lt;/code&gt; of &lt;code&gt;arr&lt;/code&gt;. The start of the two sequences are pointed to by &lt;code&gt;ip1&lt;/code&gt; and &lt;code&gt;ip2&lt;/code&gt;. To get to the next element in each sequence requires a jump of &lt;code&gt;is1&lt;/code&gt; and &lt;code&gt;is2&lt;/code&gt;&lt;em&gt;bytes&lt;/em&gt;, respectively. This function requires behaved (though not necessarily contiguous) memory.</source>
          <target state="translated">두 개의 &lt;code&gt;n&lt;/code&gt; - 길이 시퀀스 를 곱하고 더한 다음 &lt;code&gt;arr&lt;/code&gt; 의 &lt;code&gt;op&lt;/code&gt; 로 표시된 요소에 결과를 배치 하는 함수에 대한 포인터 입니다. 두 시퀀스의 시작은 &lt;code&gt;ip1&lt;/code&gt; 및 &lt;code&gt;ip2&lt;/code&gt; 로 가리 킵니다 . 각 시퀀스에서 다음 요소에 도달하려면 각각 &lt;code&gt;is1&lt;/code&gt; 및 &lt;code&gt;is2&lt;/code&gt; &lt;em&gt;bytes&lt;/em&gt; 의 점프가 필요합니다 . 이 기능은 동작이 필요하지만 (연속적인 것은 아니지만) 메모리가 필요합니다.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="aae344cd692cc12af2d04f598d731b117bcbfbcf" translate="yes" xml:space="preserve">
          <source>A pointer to a function that retrieves the index of the largest of &lt;code&gt;n&lt;/code&gt; elements in &lt;code&gt;arr&lt;/code&gt; beginning at the element pointed to by &lt;code&gt;data&lt;/code&gt;. This function requires that the memory segment be contiguous and behaved. The return value is always 0. The index of the largest element is returned in &lt;code&gt;max_ind&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;data&lt;/code&gt; 가리키는 요소에서 시작하여 &lt;code&gt;arr&lt;/code&gt; 에서 가장 큰 &lt;code&gt;n&lt;/code&gt; 개 요소 의 인덱스를 검색하는 함수에 대한 포인터 입니다. 이 기능을 사용하려면 메모리 세그먼트가 연속적이고 동작해야합니다. 리턴 값은 항상 0입니다. 가장 큰 요소의 인덱스는 &lt;code&gt;max_ind&lt;/code&gt; 로 리턴됩니다 .</target>
        </trans-unit>
        <trans-unit id="4ceac65337b54f9dcdd551d1e9b47510e515aabf" translate="yes" xml:space="preserve">
          <source>A pointer to a function that retrieves the index of the smallest of &lt;code&gt;n&lt;/code&gt; elements in &lt;code&gt;arr&lt;/code&gt; beginning at the element pointed to by &lt;code&gt;data&lt;/code&gt;. This function requires that the memory segment be contiguous and behaved. The return value is always 0. The index of the smallest element is returned in &lt;code&gt;min_ind&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;data&lt;/code&gt; 가 가리키는 요소에서 시작하여 &lt;code&gt;arr&lt;/code&gt; 에서 가장 작은 &lt;code&gt;n&lt;/code&gt; 개 요소 의 인덱스를 검색하는 함수에 대한 포인터 입니다. 이 기능을 사용하려면 메모리 세그먼트가 연속적이고 동작해야합니다. 리턴 값은 항상 0입니다. 가장 작은 요소의 인덱스는 &lt;code&gt;min_ind&lt;/code&gt; 로 리턴됩니다 .</target>
        </trans-unit>
        <trans-unit id="3835d7b1621720aec7eaa6814ef86b756b4dbf87" translate="yes" xml:space="preserve">
          <source>A pointer to a function that returns TRUE if the item of &lt;code&gt;arr&lt;/code&gt; pointed to by &lt;code&gt;data&lt;/code&gt; is nonzero. This function can deal with misbehaved arrays.</source>
          <target state="translated">&lt;code&gt;data&lt;/code&gt; 가 가리키는 &lt;code&gt;arr&lt;/code&gt; 의 항목 이 0이 아닌 경우 TRUE를 리턴하는 함수의 포인터 . 이 함수는 오작동 배열을 처리 할 수 ​​있습니다.</target>
        </trans-unit>
        <trans-unit id="475aaf0895b62768be3ac2099d9424549dcf7a83" translate="yes" xml:space="preserve">
          <source>A pointer to a function that returns a standard Python object from a single element of the array object &lt;em&gt;arr&lt;/em&gt; pointed to by &lt;em&gt;data&lt;/em&gt;. This function must be able to deal with &amp;ldquo;misbehaved &amp;ldquo;(misaligned and/or swapped) arrays correctly.</source>
          <target state="translated">배열 객체의 단일 요소에서 표준 파이썬 객체를 반환하는 함수에 대한 포인터 &lt;em&gt;편곡이&lt;/em&gt; 가 가리키는 &lt;em&gt;데이터&lt;/em&gt; . 이 기능은 &quot;오작동&quot;(오정렬 및 / 또는 스왑) 어레이를 올바르게 처리 할 수 ​​있어야합니다.</target>
        </trans-unit>
        <trans-unit id="3170ee650911ef94b49078fe0ef12bfaed1cd35b" translate="yes" xml:space="preserve">
          <source>A pointer to a function that scans (scanf style) one element of the corresponding type from the file descriptor &lt;code&gt;fd&lt;/code&gt; into the array memory pointed to by &lt;code&gt;ip&lt;/code&gt;. The array is assumed to be behaved. The last argument &lt;code&gt;arr&lt;/code&gt; is the array to be scanned into. Returns number of receiving arguments successfully assigned (which may be zero in case a matching failure occurred before the first receiving argument was assigned), or EOF if input failure occurs before the first receiving argument was assigned. This function should be called without holding the Python GIL, and has to grab it for error reporting.</source>
          <target state="translated">파일 설명자 &lt;code&gt;fd&lt;/code&gt; 에서 &lt;code&gt;ip&lt;/code&gt; 가 가리키는 배열 메모리로 해당 유형의 한 요소를 스캔 (scanf 스타일)하는 함수에 대한 포인터 입니다. 배열이 동작한다고 가정합니다. 마지막 인수 &lt;code&gt;arr&lt;/code&gt; 은 스캔 할 배열입니다. 성공적으로 할당 된 수신 인수 수를 리턴합니다 (첫 번째 수신 인수가 지정되기 전에 일치 실패가 발생한 경우 0 일 수 있음) 또는 첫 번째 수신 인수가 지정되기 전에 입력 실패가 발생한 경우 EOF를 리턴합니다. 이 함수는 Python GIL을 유지하지 않고 호출해야하며 오류보고를 위해 가져와야합니다.</target>
        </trans-unit>
        <trans-unit id="d5345ed457c10e2b6dd319d2a0f575462b52b35a" translate="yes" xml:space="preserve">
          <source>A pointer to a function that sets the Python object &lt;em&gt;item&lt;/em&gt; into the array, &lt;em&gt;arr&lt;/em&gt;, at the position pointed to by &lt;em&gt;data&lt;/em&gt; . This function deals with &amp;ldquo;misbehaved&amp;rdquo; arrays. If successful, a zero is returned, otherwise, a negative one is returned (and a Python error set).</source>
          <target state="translated">&lt;em&gt;data가&lt;/em&gt; 가리키는 위치에서 Python 객체 &lt;em&gt;항목&lt;/em&gt; 을 배열 &lt;em&gt;arr&lt;/em&gt; 로 설정하는 함수에 대한 포인터 입니다. 이 기능은 &quot;오작동&quot;배열을 처리합니다. 성공하면 0이 리턴되고 그렇지 않으면 음수가 리턴됩니다 (및 Python 오류 세트).&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="07d68822ce5e306e8bf5019318abb9ceb0c735d6" translate="yes" xml:space="preserve">
          <source>A pointer to a list of (&lt;a href=&quot;c-api.dtype#c.npy_intp&quot;&gt;&lt;code&gt;npy_intp&lt;/code&gt;&lt;/a&gt;) integers which usually represent array shape or array strides.</source>
          <target state="translated">일반적으로 배열 모양 또는 배열 보폭을 나타내는 ( &lt;a href=&quot;c-api.dtype#c.npy_intp&quot;&gt; &lt;code&gt;npy_intp&lt;/code&gt; &lt;/a&gt; ) 정수 목록에 대한 포인터 입니다.</target>
        </trans-unit>
        <trans-unit id="bca11ad9efa9f4f1976179ecad73042ba9578700" translate="yes" xml:space="preserve">
          <source>A pointer to a structure containing functions that the type needs to implement internal features. These functions are not the same thing as the universal functions (ufuncs) described later. Their signatures can vary arbitrarily.</source>
          <target state="translated">유형이 내부 기능을 구현하는 데 필요한 함수를 포함하는 구조에 대한 포인터입니다. 이러한 기능은 나중에 설명하는 범용 기능 (ufunc)과 동일하지 않습니다. 그들의 서명은 임의로 다를 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="59953b5554f06beb9b2ea5a5bf0b78689b8252f0" translate="yes" xml:space="preserve">
          <source>A pointer to newly created memory of size &lt;em&gt;arr&lt;/em&gt; -&amp;gt;itemsize that holds the representation of 0 for that type. The returned pointer, &lt;em&gt;ret&lt;/em&gt;, &lt;strong&gt;must be freed&lt;/strong&gt; using &lt;a href=&quot;#c.PyDataMem_FREE&quot;&gt;&lt;code&gt;PyDataMem_FREE&lt;/code&gt;&lt;/a&gt; (ret) when it is not needed anymore.</source>
          <target state="translated">크기의 새로 생성 된 메모리에 대한 포인터 &lt;em&gt;도착은&lt;/em&gt; -&amp;gt; itemsize는 해당 유형 0의 표현을 보유하고있다. 반환 된 포인터, &lt;em&gt;RET는&lt;/em&gt; , &lt;strong&gt;해방되어야&lt;/strong&gt; 사용 &lt;a href=&quot;#c.PyDataMem_FREE&quot;&gt; &lt;code&gt;PyDataMem_FREE&lt;/code&gt; &lt;/a&gt; 가 더 이상 필요하지 않습니다 (RET)을.</target>
        </trans-unit>
        <trans-unit id="88743a5469baac06308bedb60aa16a9c06a7a1cc" translate="yes" xml:space="preserve">
          <source>A pointer to newly created memory of size &lt;em&gt;arr&lt;/em&gt; -&amp;gt;itemsize that holds the representation of 1 for that type. The returned pointer, &lt;em&gt;ret&lt;/em&gt;, &lt;strong&gt;must be freed&lt;/strong&gt; using &lt;a href=&quot;#c.PyDataMem_FREE&quot;&gt;&lt;code&gt;PyDataMem_FREE&lt;/code&gt;&lt;/a&gt; (ret) when it is not needed anymore.</source>
          <target state="translated">크기의 새로 생성 된 메모리에 대한 포인터 &lt;em&gt;도착은&lt;/em&gt; -&amp;gt; itemsize는 그 유형 (1)의 표현을 보유하고있다. 반환 된 포인터, &lt;em&gt;RET는&lt;/em&gt; , &lt;strong&gt;해방되어야&lt;/strong&gt; 사용 &lt;a href=&quot;#c.PyDataMem_FREE&quot;&gt; &lt;code&gt;PyDataMem_FREE&lt;/code&gt; &lt;/a&gt; 가 더 이상 필요하지 않습니다 (RET)을.</target>
        </trans-unit>
        <trans-unit id="952d0c514c338d21716f5fd4d68c9399cc12f085" translate="yes" xml:space="preserve">
          <source>A pointer to the current element of the array.</source>
          <target state="translated">배열의 현재 요소에 대한 포인터.</target>
        </trans-unit>
        <trans-unit id="aee26ff84fca6762d89892232d01d8f2be0bdf6b" translate="yes" xml:space="preserve">
          <source>A pointer to the first element of the array. This pointer can (and normally should) be recast to the data type of the array.</source>
          <target state="translated">배열의 첫 번째 요소에 대한 포인터 이 포인터는 일반적으로 배열의 데이터 유형으로 다시 캐스팅 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="56a9a21805ab17dfeac09889fcec479dcf32412f" translate="yes" xml:space="preserve">
          <source>A pointer to the memory area of the array as a Python integer. This memory area may contain data that is not aligned, or not in correct byte-order. The memory area may not even be writeable. The array flags and data-type of this array should be respected when passing this attribute to arbitrary C-code to avoid trouble that can include Python crashing. User Beware! The value of this attribute is exactly the same as &lt;code&gt;self._array_interface_['data'][0]&lt;/code&gt;.</source>
          <target state="translated">파이썬 정수로 배열의 메모리 영역에 대한 포인터. 이 메모리 영역에는 정렬되지 않았거나 올바른 바이트 순서가 아닌 데이터가 포함될 수 있습니다. 메모리 영역은 쓰기가 불가능할 수도 있습니다. 파이썬 충돌을 포함 할 수있는 문제를 피하기 위해이 속성을 임의의 C 코드로 전달할 때이 배열의 배열 플래그 및 데이터 유형을 준수해야합니다. 사용자 조심! 이 속성의 값은 &lt;code&gt;self._array_interface_['data'][0]&lt;/code&gt; 과 정확히 동일 합니다.</target>
        </trans-unit>
        <trans-unit id="22a0ddabcc83c93156f54a9c4e5e12e5440e1811" translate="yes" xml:space="preserve">
          <source>A pointer to the number of bytes to jump to get to the next element in this dimension for each of the input and output arguments.</source>
          <target state="translated">각 입력 및 출력 인수에 대해이 차원의 다음 요소로 이동하기 위해 이동할 바이트 수에 대한 포인터입니다.</target>
        </trans-unit>
        <trans-unit id="38e72ad73c814139adc82a2dd23d234600ecd52c" translate="yes" xml:space="preserve">
          <source>A pointer to the size of the dimension over which this function is looping.</source>
          <target state="translated">이 함수가 반복되는 차원의 크기에 대한 포인터.</target>
        </trans-unit>
        <trans-unit id="b32e8bc9cebeb7ce19737bb101702a66d6ad1687" translate="yes" xml:space="preserve">
          <source>A pointer to the start of the single-segment chunk of memory.</source>
          <target state="translated">단일 세그먼트 메모리 청크의 시작을 가리키는 포인터.</target>
        </trans-unit>
        <trans-unit id="6f57ac5d68543b1b89ec36367f4ed4ba98cb9a0b" translate="yes" xml:space="preserve">
          <source>A pointer to the underlying ndarray this iterator was created to represent.</source>
          <target state="translated">이 반복자가 나타내는 기본 ndarray에 대한 포인터입니다.</target>
        </trans-unit>
        <trans-unit id="a905832ada81de251c9fef160b03726a6aa39266" translate="yes" xml:space="preserve">
          <source>A polynomial class.</source>
          <target state="translated">다항식 클래스</target>
        </trans-unit>
        <trans-unit id="0454333d741ede4c1731a6f584bd036397a70818" translate="yes" xml:space="preserve">
          <source>A possible use of &lt;code&gt;bincount&lt;/code&gt; is to perform sums over variable-size chunks of an array, using the &lt;code&gt;weights&lt;/code&gt; keyword.</source>
          <target state="translated">&lt;code&gt;bincount&lt;/code&gt; 의 가능한 사용은 &lt;code&gt;weights&lt;/code&gt; 키워드를 사용하여 배열의 가변 크기 청크에 대한 합계를 수행하는 것 입니다.</target>
        </trans-unit>
        <trans-unit id="bba8e35dba23bc8041a6e079b6a83f9598e8027c" translate="yes" xml:space="preserve">
          <source>A power series class.</source>
          <target state="translated">파워 시리즈 클래스.</target>
        </trans-unit>
        <trans-unit id="360614eff4e9b482c7ccb1687741451d3292c036" translate="yes" xml:space="preserve">
          <source>A printable representation of the einsum path.</source>
          <target state="translated">einsum 경로의 인쇄 가능한 표현.</target>
        </trans-unit>
        <trans-unit id="f1ffb246c9560ea1d618d450ea896e76b209e6bc" translate="yes" xml:space="preserve">
          <source>A python function or method.</source>
          <target state="translated">파이썬 함수 또는 메소드.</target>
        </trans-unit>
        <trans-unit id="821cd21cf38135598cfbfe30d5b97393e8433ef0" translate="yes" xml:space="preserve">
          <source>A rank 1 array already padded with zeros. Padded values are vector[:iaxis_pad_width[0]] and vector[-iaxis_pad_width[1]:].</source>
          <target state="translated">순위 1 배열은 이미 0으로 채워져 있습니다. 채워진 값은 vector [: iaxis_pad_width [0]] 및 vector [-iaxis_pad_width [1] :]입니다.</target>
        </trans-unit>
        <trans-unit id="f52cd7b1f61334c54c920333fad88ab94ddc81b5" translate="yes" xml:space="preserve">
          <source>A readonly view on the original array with the given shape. It is typically not contiguous. Furthermore, more than one element of a broadcasted array may refer to a single memory location.</source>
          <target state="translated">지정된 모양을 가진 원래 배열의 읽기 전용보기입니다. 일반적으로 인접하지 않습니다. 또한, 방송 된 어레이의 하나 이상의 요소는 단일 메모리 위치를 지칭 할 수있다.</target>
        </trans-unit>
        <trans-unit id="b389c5737b120f8a3ba90ec279ff102ef606b7d1" translate="yes" xml:space="preserve">
          <source>A real or complex array with &lt;code&gt;a.ndim &amp;gt;= 2&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;a.ndim &amp;gt;= 2&lt;/code&gt; 실수 또는 복잡한 배열입니다 .</target>
        </trans-unit>
        <trans-unit id="fd53e5dc7f86931b1547c68a8b6d4fe1dd602c8c" translate="yes" xml:space="preserve">
          <source>A real world example. A company drills 9 wild-cat oil exploration wells, each with an estimated probability of success of 0.1. All nine wells fail. What is the probability of that happening?</source>
          <target state="translated">실제 예입니다. 회사는 9 개의 야생 고양이 석유 탐사 우물을 시추하며, 각각 0.1의 성공 확률이 추정됩니다. 9 개의 우물이 모두 고장납니다. 그 일이 일어날 확률은 얼마입니까?</target>
        </trans-unit>
        <trans-unit id="5947a5967a2d439c4597c86e8bee99e04c20ca77" translate="yes" xml:space="preserve">
          <source>A real world example. A company drills wild-cat oil exploration wells, each with an estimated probability of success of 0.1. What is the probability of having one success for each successive well, that is what is the probability of a single success after drilling 5 wells, after 6 wells, etc.?</source>
          <target state="translated">실제 예입니다. 회사는 각각 0.1 %의 성공 확률을 가진 야생 고양이 오일 탐사정을 시추합니다. 각각의 연속적인 우물마다 하나의 성공 확률은 얼마입니까? 즉, 5 개의 우물을 시추 한 후, 6 개의 우물 등을 한 후 단일 성공 확률은 얼마입니까?</target>
        </trans-unit>
        <trans-unit id="e6c74562d8979b3390f8b232c8d1dfde0b8a3f6d" translate="yes" xml:space="preserve">
          <source>A recent addition to &lt;code&gt;numpy.i&lt;/code&gt; are typemaps that permit argout arrays with views into memory that is managed. See the discussion &lt;a href=&quot;http://blog.enthought.com/python/numpy-arrays-with-pre-allocated-memory&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;numpy.i&lt;/code&gt; 에 최근 추가 된 것은 관리되는 메모리에 대한 뷰가있는 argout 배열을 허용하는 유형 맵입니다. &lt;a href=&quot;http://blog.enthought.com/python/numpy-arrays-with-pre-allocated-memory&quot;&gt;여기서&lt;/a&gt; 토론을 참조 하십시오 .</target>
        </trans-unit>
        <trans-unit id="fe89375cc42c612714476798303a241ab8be3adb" translate="yes" xml:space="preserve">
          <source>A reduce-like operation on an array with a data-type that has a range &amp;ldquo;too small&amp;rdquo; to handle the result will silently wrap. One should use &lt;a href=&quot;generated/numpy.dtype#numpy.dtype&quot;&gt;&lt;code&gt;dtype&lt;/code&gt;&lt;/a&gt; to increase the size of the data-type over which reduction takes place.</source>
          <target state="translated">결과를 처리하기에 &quot;너무 작은&quot;범위의 데이터 유형을 가진 어레이에서 축소와 유사한 연산은 자동으로 줄 바꿈됩니다. 축소가 발생하는 데이터 유형의 크기를 늘리려면 &lt;a href=&quot;generated/numpy.dtype#numpy.dtype&quot;&gt; &lt;code&gt;dtype&lt;/code&gt; &lt;/a&gt; 을 사용해야합니다 .</target>
        </trans-unit>
        <trans-unit id="e6a7a274041ceccc88ee2a54369682b28d0f8f72" translate="yes" xml:space="preserve">
          <source>A reference to the array that is iterated over.</source>
          <target state="translated">반복되는 배열에 대한 참조입니다.</target>
        </trans-unit>
        <trans-unit id="52c25cce5015e79149d448b806d435904b953adc" translate="yes" xml:space="preserve">
          <source>A return of True does not necessarily mean that the two arrays share any element. It just means that they &lt;em&gt;might&lt;/em&gt;.</source>
          <target state="translated">True를 반환한다고해서 반드시 두 배열이 요소를 공유한다는 의미는 아닙니다. 그것은 단지 그들이 &lt;em&gt;할 수&lt;/em&gt; 있음을 의미합니다 .</target>
        </trans-unit>
        <trans-unit id="17df53d6df96ba2281763f3f5b0b2adebfd2975d" translate="yes" xml:space="preserve">
          <source>A rotated view of &lt;code&gt;m&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;m&lt;/code&gt; 의 회전 뷰 .</target>
        </trans-unit>
        <trans-unit id="22190750f3f50985b63589eae0fdf601ec030ee6" translate="yes" xml:space="preserve">
          <source>A second possibility is to modify the &lt;a href=&quot;maskedarray.baseclass#numpy.ma.MaskedArray.mask&quot;&gt;&lt;code&gt;mask&lt;/code&gt;&lt;/a&gt; directly, but this usage is discouraged.</source>
          <target state="translated">두 번째 가능성은 &lt;a href=&quot;maskedarray.baseclass#numpy.ma.MaskedArray.mask&quot;&gt; &lt;code&gt;mask&lt;/code&gt; &lt;/a&gt; 직접 수정하는 것이지만이 사용은 권장되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="1503f40b41df4c31b9ad3f11d30b5aa1e01767eb" translate="yes" xml:space="preserve">
          <source>A second possibility is to use the two masked array constructors, &lt;a href=&quot;generated/numpy.ma.array#numpy.ma.array&quot;&gt;&lt;code&gt;array&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;generated/numpy.ma.masked_array#numpy.ma.masked_array&quot;&gt;&lt;code&gt;masked_array&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">두 번째 가능성은 두 개의 마스크 배열 생성자 인 &lt;a href=&quot;generated/numpy.ma.array#numpy.ma.array&quot;&gt; &lt;code&gt;array&lt;/code&gt; &lt;/a&gt; 와 &lt;a href=&quot;generated/numpy.ma.masked_array#numpy.ma.masked_array&quot;&gt; &lt;code&gt;masked_array&lt;/code&gt; &lt;/a&gt; 를 사용하는 것 입니다.</target>
        </trans-unit>
        <trans-unit id="2a12806d879a1f49595c81b483ba154ce122b36b" translate="yes" xml:space="preserve">
          <source>A seed sequence for BitGenerators with no need for seed state.</source>
          <target state="translated">시드 상태가 필요없는 BitGenerator의 시드 시퀀스입니다.</target>
        </trans-unit>
        <trans-unit id="c226a62e6ab2149724331fa10d2fa8de3a8461e2" translate="yes" xml:space="preserve">
          <source>A seed to initialize the &lt;a href=&quot;#numpy.random.bit_generator.BitGenerator&quot;&gt;&lt;code&gt;BitGenerator&lt;/code&gt;&lt;/a&gt;. If None, then fresh, unpredictable entropy will be pulled from the OS. If an &lt;code&gt;int&lt;/code&gt; or &lt;code&gt;array_like[ints]&lt;/code&gt; is passed, then it will be passed to &lt;code&gt;SeedSequence&lt;/code&gt; to derive the initial &lt;a href=&quot;#numpy.random.bit_generator.BitGenerator&quot;&gt;&lt;code&gt;BitGenerator&lt;/code&gt;&lt;/a&gt; state. One may also pass in an implementor of the &lt;a href=&quot;numpy.random.bit_generator.iseedsequence#numpy.random.bit_generator.ISeedSequence&quot;&gt;&lt;code&gt;ISeedSequence&lt;/code&gt;&lt;/a&gt; interface like &lt;code&gt;SeedSequence&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#numpy.random.bit_generator.BitGenerator&quot;&gt; &lt;code&gt;BitGenerator&lt;/code&gt; &lt;/a&gt; 를 초기화하기위한 시드 입니다. None이면 OS에서 새롭고 예측할 수없는 엔트로피를 가져옵니다. 는 IF &lt;code&gt;int&lt;/code&gt; 또는 &lt;code&gt;array_like[ints]&lt;/code&gt; 통과 한 후는 전달 될 &lt;code&gt;SeedSequence&lt;/code&gt; 초기 유도하도록 &lt;a href=&quot;#numpy.random.bit_generator.BitGenerator&quot;&gt; &lt;code&gt;BitGenerator&lt;/code&gt; 의&lt;/a&gt; 상태. &lt;a href=&quot;numpy.random.bit_generator.iseedsequence#numpy.random.bit_generator.ISeedSequence&quot;&gt; &lt;code&gt;ISeedSequence&lt;/code&gt; &lt;/a&gt; 와 같은 &lt;code&gt;SeedSequence&lt;/code&gt; 인터페이스 의 구현 자를 전달할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="1c822346cadbdc847b8cededc6c64abb2064a522" translate="yes" xml:space="preserve">
          <source>A seed to initialize the &lt;code&gt;BitGenerator&lt;/code&gt;. If None, then fresh, unpredictable entropy will be pulled from the OS. If an &lt;code&gt;int&lt;/code&gt; or &lt;code&gt;array_like[ints]&lt;/code&gt; is passed, then it will be passed to &lt;a href=&quot;bit_generators/generated/numpy.random.seedsequence#numpy.random.SeedSequence&quot;&gt;&lt;code&gt;SeedSequence&lt;/code&gt;&lt;/a&gt; to derive the initial &lt;code&gt;BitGenerator&lt;/code&gt; state. One may also pass in an implementor of the &lt;code&gt;ISeedSequence&lt;/code&gt; interface like &lt;a href=&quot;bit_generators/generated/numpy.random.seedsequence#numpy.random.SeedSequence&quot;&gt;&lt;code&gt;SeedSequence&lt;/code&gt;&lt;/a&gt;. Additionally, when passed a &lt;code&gt;BitGenerator&lt;/code&gt;, it will be wrapped by &lt;a href=&quot;#numpy.random.Generator&quot;&gt;&lt;code&gt;Generator&lt;/code&gt;&lt;/a&gt;. If passed a &lt;a href=&quot;#numpy.random.Generator&quot;&gt;&lt;code&gt;Generator&lt;/code&gt;&lt;/a&gt;, it will be returned unaltered.</source>
          <target state="translated">&lt;code&gt;BitGenerator&lt;/code&gt; 를 초기화하기위한 시드 입니다. None이면 OS에서 새롭고 예측할 수없는 엔트로피를 가져옵니다. 는 IF &lt;code&gt;int&lt;/code&gt; 또는 &lt;code&gt;array_like[ints]&lt;/code&gt; 통과 한 후는 전달 될 &lt;a href=&quot;bit_generators/generated/numpy.random.seedsequence#numpy.random.SeedSequence&quot;&gt; &lt;code&gt;SeedSequence&lt;/code&gt; &lt;/a&gt; 초기 유도하도록 &lt;code&gt;BitGenerator&lt;/code&gt; 의 상태. &lt;code&gt;ISeedSequence&lt;/code&gt; 와 같은 &lt;a href=&quot;bit_generators/generated/numpy.random.seedsequence#numpy.random.SeedSequence&quot;&gt; &lt;code&gt;SeedSequence&lt;/code&gt; &lt;/a&gt; 인터페이스 의 구현 자를 전달할 수도 있습니다 . 또한 &lt;code&gt;BitGenerator&lt;/code&gt; 를 전달하면 &lt;a href=&quot;#numpy.random.Generator&quot;&gt; &lt;code&gt;Generator&lt;/code&gt; &lt;/a&gt; 로 래핑됩니다 . &lt;a href=&quot;#numpy.random.Generator&quot;&gt; &lt;code&gt;Generator&lt;/code&gt; 를&lt;/a&gt; 전달하면 변경되지 않은 상태로 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="297424ddec64c8c13c80221c2b5c2561d8b3dca1" translate="yes" xml:space="preserve">
          <source>A seed to initialize the &lt;code&gt;BitGenerator&lt;/code&gt;. If None, then fresh, unpredictable entropy will be pulled from the OS. If an &lt;code&gt;int&lt;/code&gt; or &lt;code&gt;array_like[ints]&lt;/code&gt; is passed, then it will be passed to &lt;code&gt;SeedSequence&lt;/code&gt; to derive the initial &lt;code&gt;BitGenerator&lt;/code&gt; state. One may also pass in an implementor of the &lt;code&gt;ISeedSequence&lt;/code&gt; interface like &lt;code&gt;SeedSequence&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;BitGenerator&lt;/code&gt; 를 초기화하기위한 시드 입니다. None이면 OS에서 새롭고 예측할 수없는 엔트로피를 가져옵니다. 는 IF &lt;code&gt;int&lt;/code&gt; 또는 &lt;code&gt;array_like[ints]&lt;/code&gt; 통과 한 후는 전달 될 &lt;code&gt;SeedSequence&lt;/code&gt; 초기 유도하도록 &lt;code&gt;BitGenerator&lt;/code&gt; 의 상태. &lt;code&gt;ISeedSequence&lt;/code&gt; 와 같은 &lt;code&gt;SeedSequence&lt;/code&gt; 인터페이스 의 구현 자를 전달할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="57449a616b2733913d6c035b16ff8031a0c0309b" translate="yes" xml:space="preserve">
          <source>A segment of memory is inherently 1-dimensional, and there are many different schemes for arranging the items of an &lt;em&gt;N&lt;/em&gt;-dimensional array in a 1-dimensional block. NumPy is flexible, and &lt;a href=&quot;generated/numpy.ndarray#numpy.ndarray&quot;&gt;&lt;code&gt;ndarray&lt;/code&gt;&lt;/a&gt; objects can accommodate any &lt;em&gt;strided indexing scheme&lt;/em&gt;. In a strided scheme, the N-dimensional index</source>
          <target state="translated">메모리의 세그먼트는 본질적으로 1 차원이며, 1 차원 블록에서 &lt;em&gt;N&lt;/em&gt; 차원 배열 의 항목들을 배열하기위한 많은 다른 방식들이있다 . NumPy는 융통성이 있으며 &lt;a href=&quot;generated/numpy.ndarray#numpy.ndarray&quot;&gt; &lt;code&gt;ndarray&lt;/code&gt; &lt;/a&gt; 객체는 모든 &lt;em&gt;스트라이드 인덱싱 체계를&lt;/em&gt; 수용 할 수 있습니다 . Strided 방식에서 N 차원 인덱스</target>
        </trans-unit>
        <trans-unit id="88b71b624e002466d8dce52c6acba138c61b95ef" translate="yes" xml:space="preserve">
          <source>A sequence of arrays describing the monotonically increasing bin edges along each dimension.</source>
          <target state="translated">각 차원을 따라 단조 증가하는 빈 가장자리를 설명하는 일련의 배열.</target>
        </trans-unit>
        <trans-unit id="bb659abce8099a5d28b1e3c93c69644abcc5c2a2" translate="yes" xml:space="preserve">
          <source>A sequence of length D, each an optional (lower, upper) tuple giving the outer bin edges to be used if the edges are not given explicitly in &lt;code&gt;bins&lt;/code&gt;. An entry of None in the sequence results in the minimum and maximum values being used for the corresponding dimension. The default, None, is equivalent to passing a tuple of D None values.</source>
          <target state="translated">가장자리가 명시 적으로 지정하지 않는 경우의 길이 D의 순서는, 각각의 외측 가장자리 함을주는 (상하) 선택적 튜플 사용될 &lt;code&gt;bins&lt;/code&gt; . 시퀀스에서 없음을 입력하면 해당 차원에 최소값과 최대 값이 사용됩니다. 기본값 None은 튜플 D None 값을 전달하는 것과 같습니다.</target>
        </trans-unit>
        <trans-unit id="81bbfb50533f2d3f2a4fd7fa0b51f48f0e734f02" translate="yes" xml:space="preserve">
          <source>A sequence of polynomial roots, or a square array or matrix object.</source>
          <target state="translated">다항식 근의 시퀀스 또는 정사각형 배열 또는 행렬 객체입니다.</target>
        </trans-unit>
        <trans-unit id="75ceb930ec244dcfda247cc2f0b11b4fd68f2536" translate="yes" xml:space="preserve">
          <source>A series of the same kind as the calling class and equal to &lt;code&gt;series&lt;/code&gt; when evaluated.</source>
          <target state="translated">호출 클래스와 같은 종류의 시리즈이며 평가시 &lt;code&gt;series&lt;/code&gt; 와 같습니다 .</target>
        </trans-unit>
        <trans-unit id="5057709f0bb39c2821cc05f21d054a694afcfad5" translate="yes" xml:space="preserve">
          <source>A series that represents the least squares fit to the data and has the domain and window specified in the call. If the coefficients for the unscaled and unshifted basis polynomials are of interest, do &lt;code&gt;new_series.convert().coef&lt;/code&gt;.</source>
          <target state="translated">최소 제곱을 나타내는 계열은 데이터에 적합하며 통화에 지정된 도메인과 창이 있습니다. 스케일링되지 않은 기초 다항식에 대한 계수가 관심있는 경우 &lt;code&gt;new_series.convert().coef&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1310a301fbe7183e2ce95e09f01f8a3d3a00c649" translate="yes" xml:space="preserve">
          <source>A series with the coefficient of the &lt;code&gt;deg&lt;/code&gt; term set to one and all others zero.</source>
          <target state="translated">&lt;code&gt;deg&lt;/code&gt; 항의 계수 가 1로 설정되고 나머지는 모두 0으로 설정된 계열입니다 .</target>
        </trans-unit>
        <trans-unit id="34501fdb58052d0c2fa5b147e753287dfd92f3af" translate="yes" xml:space="preserve">
          <source>A set of arrays is called &amp;ldquo;broadcastable&amp;rdquo; to the same shape if the above rules produce a valid result, &lt;em&gt;i.e.&lt;/em&gt;, one of the following is true:</source>
          <target state="translated">위의 규칙이 유효한 결과를 생성하는 경우 ( &lt;em&gt;즉&lt;/em&gt; , 다음 중 하나에 해당 하는 경우) 일련의 배열을 동일한 모양으로 &quot;방송 가능&quot;이라고 합니다.</target>
        </trans-unit>
        <trans-unit id="0fd60c6042a9c4728d8686f9ccb469161417ae1d" translate="yes" xml:space="preserve">
          <source>A set of ndarrays (or a single ndarray if there is only one dimension) corresponding to the derivatives of f with respect to each dimension. Each derivative has the same shape as f.</source>
          <target state="translated">각 차원에 대한 f의 미분에 해당하는 일련의 ndarray (또는 하나의 차원이있는 경우 단일 ndarray)입니다. 각 도함수는 f와 모양이 같습니다.</target>
        </trans-unit>
        <trans-unit id="94c527df312fef559bad352556ab86e1b52514f7" translate="yes" xml:space="preserve">
          <source>A seven-element array indicating which of Monday through Sunday are valid days. May be specified as a length-seven list or array, like [1,1,1,1,1,0,0]; a length-seven string, like &amp;lsquo;1111100&amp;rsquo;; or a string like &amp;ldquo;Mon Tue Wed Thu Fri&amp;rdquo;, made up of 3-character abbreviations for weekdays, optionally separated by white space. Valid abbreviations are: Mon Tue Wed Thu Fri Sat Sun</source>
          <target state="translated">월요일에서 일요일 중 어느 날이 유효한지 나타내는 7 요소 배열입니다. [1,1,1,1,1,0,0]과 같이 길이가 7 인 목록 또는 배열로 지정 될 수 있습니다. '1111100'과 같은 길이 7 문자열; 또는 &quot;Mon Tue Wed Thu Fri&quot;과 같은 문자열로, 주중 3 자 약어로 구성되며 선택적으로 공백으로 구분됩니다. 유효한 약어는 다음과 같습니다. Mon Tue Wed Thu Fri Sat Sun</target>
        </trans-unit>
        <trans-unit id="c7b5c5f4e4e338a83df129a84a05152158bc31fb" translate="yes" xml:space="preserve">
          <source>A short (typically single-character) string that represents a data type in numpy and corresponds to &lt;code&gt;self.typeStr&lt;/code&gt;. For example, if &lt;code&gt;self.typeStr&lt;/code&gt; is &lt;code&gt;&quot;double&quot;&lt;/code&gt;, then &lt;code&gt;self.typeCode&lt;/code&gt; should be &lt;code&gt;&quot;d&quot;&lt;/code&gt;.</source>
          <target state="translated">numpy로 데이터 유형을 나타내고 &lt;code&gt;self.typeStr&lt;/code&gt; 에 해당하는 짧은 (일반적으로 단일 문자) 문자열입니다 . 예를 들어 &lt;code&gt;self.typeStr&lt;/code&gt; 이 &lt;code&gt;&quot;double&quot;&lt;/code&gt; 이면 &lt;code&gt;self.typeCode&lt;/code&gt; 는 &lt;code&gt;&quot;d&quot;&lt;/code&gt; 여야합니다 .</target>
        </trans-unit>
        <trans-unit id="e55a234c7e08a3a8270c585bca1826465f16b1d3" translate="yes" xml:space="preserve">
          <source>A short repeat rule looks like &amp;lt;item1, item2, item3, &amp;hellip;, itemN&amp;gt;. The rule specifies that the entire expression, &amp;lsquo;&amp;lt;&amp;hellip;&amp;gt;&amp;rsquo; should be replaced first with item1, and then with item2, and so forth until N repeats are accomplished.</source>
          <target state="translated">짧은 반복 규칙은 &amp;lt;item1, item2, item3,&amp;hellip;, itemN&amp;gt;과 같습니다. 규칙은 전체 표현식 '&amp;lt;&amp;hellip;&amp;gt;'을 먼저 N이 반복 될 때까지 item1로 교체 한 다음 item2로 교체하도록 지정합니다.</target>
        </trans-unit>
        <trans-unit id="bdb221c54cae8ae542f146eae648a4dc67ac0bda" translate="yes" xml:space="preserve">
          <source>A short-hand notation for specifying the format of a structured data type is a comma-separated string of basic formats.</source>
          <target state="translated">구조화 된 데이터 형식의 형식을 지정하기위한 간단한 표기법은 쉼표로 구분 된 기본 형식의 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="ee1ddd23d8920cdacf644ae54f8c0e534ba570de" translate="yes" xml:space="preserve">
          <source>A side-effect of transforming a masked array into a flexible &lt;code&gt;ndarray&lt;/code&gt; is that meta information (&lt;code&gt;fill_value&lt;/code&gt;, &amp;hellip;) will be lost.</source>
          <target state="translated">마스킹 된 배열을 유연한 &lt;code&gt;ndarray&lt;/code&gt; 로 변환하는 부작용 은 메타 정보 ( &lt;code&gt;fill_value&lt;/code&gt; ,&amp;hellip;)가 손실된다는 것입니다.</target>
        </trans-unit>
        <trans-unit id="3ef5bd6e53370c679df60531a5915557eff674e0" translate="yes" xml:space="preserve">
          <source>A signal value guaranteed not to be a valid type enumeration number.</source>
          <target state="translated">신호 값이 유효한 유형 열거 번호가 아님을 보증합니다.</target>
        </trans-unit>
        <trans-unit id="f824cc83e3f63719d08123a34f5bfe79a99c6a77" translate="yes" xml:space="preserve">
          <source>A signature is a string describing the input/output dimensions of the elementary function of a ufunc. See section below for more details.</source>
          <target state="translated">서명은 ufunc의 기본 기능의 입력 / 출력 차원을 설명하는 문자열입니다. 자세한 내용은 아래 섹션을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="48c83eae43f6ab6ce5f1574a2b3173c9326b00ba" translate="yes" xml:space="preserve">
          <source>A simple ISO date:</source>
          <target state="translated">간단한 ISO 날짜 :</target>
        </trans-unit>
        <trans-unit id="2087f59f2fa38fce8e5fd9aad38ee596ccc3d8af" translate="yes" xml:space="preserve">
          <source>A simple data type containing a 32-bit big-endian integer: (see &lt;a href=&quot;#arrays-dtypes-constructing&quot;&gt;Specifying and constructing data types&lt;/a&gt; for details on construction)</source>
          <target state="translated">32 비트 빅 엔디안 정수를 포함하는 간단한 데이터 유형 : ( &lt;a href=&quot;#arrays-dtypes-constructing&quot;&gt;구성에&lt;/a&gt; 대한 자세한 내용은 데이터 유형 지정 및 구성 참조 )</target>
        </trans-unit>
        <trans-unit id="593a67c8ad8a28c370a51733b480fae1403014ec" translate="yes" xml:space="preserve">
          <source>A simple format for saving numpy arrays to disk with the full information about them.</source>
          <target state="translated">numpy 배열을 디스크에 저장하기위한 간단한 형식입니다.</target>
        </trans-unit>
        <trans-unit id="29f34710a7684ff79fd871bcf98300fc810e986e" translate="yes" xml:space="preserve">
          <source>A simple interface to the IEEE error-flag checking support. The &lt;em&gt;errmask&lt;/em&gt; argument is a mask of &lt;code&gt;UFUNC_MASK_{ERR}&lt;/code&gt; bitmasks indicating which errors to check for (and how to check for them). The &lt;em&gt;errobj&lt;/em&gt; must be a Python tuple with two elements: a string containing the name which will be used in any communication of error and either a callable Python object (call-back function) or &lt;a href=&quot;https://docs.python.org/dev/c-api/none.html#c.Py_None&quot;&gt;&lt;code&gt;Py_None&lt;/code&gt;&lt;/a&gt;. The callable object will only be used if &lt;code&gt;UFUNC_ERR_CALL&lt;/code&gt; is set as the desired error checking method. This routine manages the GIL and is safe to call even after releasing the GIL. If an error in the IEEE-compatible hardware is determined a -1 is returned, otherwise a 0 is returned.</source>
          <target state="translated">IEEE 오류 플래그 검사 지원에 대한 간단한 인터페이스. &lt;em&gt;errmask의&lt;/em&gt; 인수의 마스크이다 &lt;code&gt;UFUNC_MASK_{ERR}&lt;/code&gt; 확인 (와이를 확인하는) 어떤 오류를 나타내는 비트 마스크. &lt;em&gt;errobj는&lt;/em&gt; 에러 임의의 통신에 사용하거나 호출 가능한 파이썬 개체 (콜백 함수)이나되는 이름이 포함 된 문자열 두 요소 파이썬 튜플 있어야 &lt;a href=&quot;https://docs.python.org/dev/c-api/none.html#c.Py_None&quot;&gt; &lt;code&gt;Py_None&lt;/code&gt; 를&lt;/a&gt; . 호출 가능한 객체는 &lt;code&gt;UFUNC_ERR_CALL&lt;/code&gt; 이 원하는 오류 검사 방법으로 설정된 경우에만 사용됩니다 . 이 루틴은 GIL을 관리하며 GIL을 해제 한 후에도 호출하는 것이 안전합니다. IEEE 호환 하드웨어의 오류가 확인되면 -1이 반환되고, 그렇지 않으면 0이 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="16f651ca7550d656d6c3f3ed82c4b589e375b548" translate="yes" xml:space="preserve">
          <source>A simple linked-list of C-structures containing the information needed to define a 1-d loop for a ufunc for every defined signature of a user-defined data-type.</source>
          <target state="translated">사용자 정의 데이터 유형의 정의 된 모든 서명에 대해 ufunc에 대한 1-d 루프를 정의하는 데 필요한 정보가 포함 된 간단한 C 구조의 링크 된 목록입니다.</target>
        </trans-unit>
        <trans-unit id="bee5d4bece8f223e1b2634c3eec8ea6c05d6636a" translate="yes" xml:space="preserve">
          <source>A simple module that only uses a single &lt;a href=&quot;http://www.swig.org&quot;&gt;SWIG&lt;/a&gt; interface file should include the following:</source>
          <target state="translated">단일 &lt;a href=&quot;http://www.swig.org&quot;&gt;SWIG&lt;/a&gt; 인터페이스 파일 만 사용하는 간단한 모듈 에는 다음이 포함되어야합니다.</target>
        </trans-unit>
        <trans-unit id="09d93ce0346cd0a5029dbb7dc011a271c7317bfe" translate="yes" xml:space="preserve">
          <source>A simplified interface to broadcasting. This function takes the number of arrays to broadcast and then &lt;em&gt;num&lt;/em&gt; extra ( &lt;a href=&quot;https://docs.python.org/dev/c-api/structures.html#c.PyObject&quot;&gt;&lt;code&gt;PyObject *&lt;/code&gt;&lt;/a&gt; ) arguments. These arguments are converted to arrays and iterators are created. &lt;a href=&quot;#c.PyArray_Broadcast&quot;&gt;&lt;code&gt;PyArray_Broadcast&lt;/code&gt;&lt;/a&gt; is then called on the resulting multi-iterator object. The resulting, broadcasted mult-iterator object is then returned. A broadcasted operation can then be performed using a single loop and using &lt;a href=&quot;#c.PyArray_MultiIter_NEXT&quot;&gt;&lt;code&gt;PyArray_MultiIter_NEXT&lt;/code&gt;&lt;/a&gt; (..)</source>
          <target state="translated">방송에 대한 간단한 인터페이스. 이 기능은 방송에 배열 다음의 수를 취 &lt;em&gt;NUM&lt;/em&gt; 추가 ( &lt;a href=&quot;https://docs.python.org/dev/c-api/structures.html#c.PyObject&quot;&gt; &lt;code&gt;PyObject *&lt;/code&gt; &lt;/a&gt; ) 인수를. 이 인수는 배열로 변환되고 반복자가 작성됩니다. 그런 다음 결과 다중 반복기 오브젝트에서 &lt;a href=&quot;#c.PyArray_Broadcast&quot;&gt; &lt;code&gt;PyArray_Broadcast&lt;/code&gt; &lt;/a&gt; 가 호출됩니다. 그 결과 방송 된 다중 반복자 객체가 반환됩니다. 그런 다음 단일 루프와 &lt;a href=&quot;#c.PyArray_MultiIter_NEXT&quot;&gt; &lt;code&gt;PyArray_MultiIter_NEXT&lt;/code&gt; &lt;/a&gt; (..)를 사용하여 브로드 캐스트 된 작업을 수행 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="28984f56b20efb716a65187c5ff200fdda38c42b" translate="yes" xml:space="preserve">
          <source>A single axis over which a generalized ufunc should operate. This is a short-cut for ufuncs that operate over a single, shared core dimension, equivalent to passing in &lt;code&gt;axes&lt;/code&gt; with entries of &lt;code&gt;(axis,)&lt;/code&gt; for each single-core-dimension argument and &lt;code&gt;()&lt;/code&gt; for all others. For instance, for a signature &lt;code&gt;(i),(i)-&amp;gt;()&lt;/code&gt;, it is equivalent to passing in &lt;code&gt;axes=[(axis,), (axis,), ()]&lt;/code&gt;.</source>
          <target state="translated">일반화 된 ufunc가 작동해야하는 단일 축입니다. 이는 단일 공유 코어 차원에서 동작 ufuncs, 전달에 해당하는 쇼트 컷 &lt;code&gt;axes&lt;/code&gt; 의 항목으로 &lt;code&gt;(axis,)&lt;/code&gt; 각 단일 코어 치수와 인수 &lt;code&gt;()&lt;/code&gt; , 기타 모든. 예를 들어, 서명 &lt;code&gt;(i),(i)-&amp;gt;()&lt;/code&gt; 의 경우 &lt;code&gt;axes=[(axis,), (axis,), ()]&lt;/code&gt; 를 전달하는 것과 같습니다 .</target>
        </trans-unit>
        <trans-unit id="7ecd974678a25bce6d0bb21975fdb524aa51f881" translate="yes" xml:space="preserve">
          <source>A single format (%10.5f), a sequence of formats, or a multi-format string, e.g. &amp;lsquo;Iteration %d &amp;ndash; %10.5f&amp;rsquo;, in which case &lt;code&gt;delimiter&lt;/code&gt; is ignored. For complex &lt;code&gt;X&lt;/code&gt;, the legal options for &lt;code&gt;fmt&lt;/code&gt; are:</source>
          <target state="translated">단일 형식 (% 10.5f), 형식 시퀀스 또는 'Iteration % d &amp;ndash; % 10.5f'와 같은 다중 형식 문자열 (이 경우 &lt;code&gt;delimiter&lt;/code&gt; 는 무시 됨) 복잡한 &lt;code&gt;X&lt;/code&gt; 의 경우 , &lt;code&gt;fmt&lt;/code&gt; 의 유효한 옵션 은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="2f72626ebddb5f9ee710e36e21cf37f297c4305c" translate="yes" xml:space="preserve">
          <source>A sorted sequence of &lt;code&gt;slice&lt;/code&gt; objects (start index, end index).</source>
          <target state="translated">정렬 된 &lt;code&gt;slice&lt;/code&gt; 객체 시퀀스 (시작 색인, 종료 색인).</target>
        </trans-unit>
        <trans-unit id="f59026a2e0815a0ce41083ddb7ee186606c6d091" translate="yes" xml:space="preserve">
          <source>A special case of the hyperbolic distribution. As &lt;code&gt;df&lt;/code&gt; gets large, the result resembles that of the standard normal distribution (&lt;a href=&quot;numpy.random.generator.standard_normal#numpy.random.Generator.standard_normal&quot;&gt;&lt;code&gt;standard_normal&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">쌍곡선 분포의 특별한 경우. 으로 &lt;code&gt;df&lt;/code&gt; 그 표준 정규 분포 (대형, 결과 유사 얻는다 &lt;a href=&quot;numpy.random.generator.standard_normal#numpy.random.Generator.standard_normal&quot;&gt; &lt;code&gt;standard_normal&lt;/code&gt; 을&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="ecc24fea5b7eed9eceb13972942907ac09867998" translate="yes" xml:space="preserve">
          <source>A special case of the hyperbolic distribution. As &lt;code&gt;df&lt;/code&gt; gets large, the result resembles that of the standard normal distribution (&lt;a href=&quot;numpy.random.mtrand.randomstate.standard_normal#numpy.random.mtrand.RandomState.standard_normal&quot;&gt;&lt;code&gt;standard_normal&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">쌍곡선 분포의 특별한 경우. 으로 &lt;code&gt;df&lt;/code&gt; 그 표준 정규 분포 (대형, 결과 유사 얻는다 &lt;a href=&quot;numpy.random.mtrand.randomstate.standard_normal#numpy.random.mtrand.RandomState.standard_normal&quot;&gt; &lt;code&gt;standard_normal&lt;/code&gt; 을&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="63e6ec7e623d9c397e9c59873fafb24c4baac24c" translate="yes" xml:space="preserve">
          <source>A special variable type indicating the number of &amp;ldquo;kinds&amp;rdquo; of scalars distinguished in determining scalar-coercion rules. This variable can take on the values &lt;code&gt;NPY_{KIND}&lt;/code&gt; where &lt;code&gt;{KIND}&lt;/code&gt; can be</source>
          <target state="translated">스칼라 강제 규칙을 결정할 때 구별되는 스칼라의 &quot;종류&quot;수를 나타내는 특수 변수 유형입니다. 이 변수는 &lt;code&gt;NPY_{KIND}&lt;/code&gt; 값을 취할 수 있습니다. 여기서 &lt;code&gt;{KIND}&lt;/code&gt; 는</target>
        </trans-unit>
        <trans-unit id="00866a4cd9f695363bff3007afb5f20a623db3b3" translate="yes" xml:space="preserve">
          <source>A special variable-type which can take on the values &lt;code&gt;NPY_{KIND}&lt;/code&gt; where &lt;code&gt;{KIND}&lt;/code&gt; is</source>
          <target state="translated">&lt;code&gt;NPY_{KIND}&lt;/code&gt; 값을 취할 수있는 특수 변수 유형입니다. 여기서 &lt;code&gt;{KIND}&lt;/code&gt; 는</target>
        </trans-unit>
        <trans-unit id="b7a5231cd4b10f823ce716dfaa60723246dd2c6d" translate="yes" xml:space="preserve">
          <source>A specialized copy and transpose function that works only for 2-d arrays. The returned array is a transposed copy of &lt;em&gt;op&lt;/em&gt;.</source>
          <target state="translated">2 차원 배열에서만 작동하는 특수한 복사 및 조옮김 기능입니다. 반환 된 배열은 전치 된 &lt;em&gt;op의&lt;/em&gt; 복사본입니다 .</target>
        </trans-unit>
        <trans-unit id="774ff5fbcb64cd63fcb41a3daa1076f5946c7ae1" translate="yes" xml:space="preserve">
          <source>A string combining invalid characters that must be deleted from the names.</source>
          <target state="translated">이름에서 삭제해야하는 유효하지 않은 문자를 결합한 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="20a384e3c2e6a14cf6c36ba5a2e36844384b8f3f" translate="yes" xml:space="preserve">
          <source>A string containing the data.</source>
          <target state="translated">데이터가 포함 된 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="d92fb30e44bde7fa02db5d823fe26a99afa2efe0" translate="yes" xml:space="preserve">
          <source>A string integer specifies which axis to stack multiple comma separated arrays along. A string of two comma-separated integers allows indication of the minimum number of dimensions to force each entry into as the second integer (the axis to concatenate along is still the first integer).</source>
          <target state="translated">문자열 정수는 쉼표로 구분 된 여러 배열을 쌓을 축을 지정합니다. 두 개의 쉼표로 구분 된 정수의 문자열을 사용하면 각 항목을 두 번째 정수로 강제로 지정할 수있는 최소 차원 수를 표시 할 수 있습니다 (연결할 축이 여전히 첫 번째 정수임).</target>
        </trans-unit>
        <trans-unit id="a641af276b72e55102c42cfb585abb388eea7dfe" translate="yes" xml:space="preserve">
          <source>A string name for the ufunc. This is used dynamically to build the __doc__ attribute of ufuncs.</source>
          <target state="translated">ufunc의 문자열 이름입니다. 이는 ufuncs의 __doc__ 속성을 동적으로 빌드하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="114cd592cdf4bef478ab0fc63ad99238e2d8ce95" translate="yes" xml:space="preserve">
          <source>A string naming the dump file.</source>
          <target state="translated">덤프 파일의 이름을 지정하는 문자열</target>
        </trans-unit>
        <trans-unit id="292579b654816d2d1cb9494934238580c48fc2c0" translate="yes" xml:space="preserve">
          <source>A string providing a name associated with this portion of the datatype. This could also be a tuple of &lt;code&gt;('full name',
'basic_name')&lt;/code&gt; where basic name would be a valid Python variable name representing the full name of the field.</source>
          <target state="translated">데이터 유형의이 부분과 연관된 이름을 제공하는 문자열입니다. 기본 이름이 필드의 전체 이름을 나타내는 유효한 Python 변수 이름 인 &lt;code&gt;('full name', 'basic_name')&lt;/code&gt; 의 튜플 일 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="619f5c1475ced21cf4fa25f8cd5302b1602c1052" translate="yes" xml:space="preserve">
          <source>A string providing the basic type of the homogenous array The basic string format consists of 3 parts: a character describing the byteorder of the data (&lt;code&gt;&amp;lt;&lt;/code&gt;: little-endian, &lt;code&gt;&amp;gt;&lt;/code&gt;: big-endian, &lt;code&gt;|&lt;/code&gt;: not-relevant), a character code giving the basic type of the array, and an integer providing the number of bytes the type uses.</source>
          <target state="translated">동종 배열의 기본 유형을 제공하는 문자열 기본 문자열 형식은 데이터의 바이트 순서를 설명하는 문자 ( &lt;code&gt;&amp;lt;&lt;/code&gt; : little-endian, &lt;code&gt;&amp;gt;&lt;/code&gt; : big-endian, &lt;code&gt;|&lt;/code&gt; : not-relevant), 문자 코드의 세 부분으로 구성됩니다. 배열의 기본 유형과 유형이 사용하는 바이트 수를 제공하는 정수를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="a90aac579586e4ebd136c30a26daae199bbf4715" translate="yes" xml:space="preserve">
          <source>A string that matches one of the &lt;code&gt;SNAME&lt;/code&gt; prefixes used in &lt;code&gt;Vector.h&lt;/code&gt; and &lt;code&gt;Vector.cxx&lt;/code&gt;. For example, &lt;code&gt;&quot;double&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Vector.h&lt;/code&gt; 및 &lt;code&gt;Vector.cxx&lt;/code&gt; 에 사용 된 &lt;code&gt;SNAME&lt;/code&gt; 접두사 중 하나와 일치하는 문자열입니다 . 예를 들어 &lt;code&gt;&quot;double&quot;&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="11a21b6388a76d32ee94fe75187d475e1e9a31be" translate="yes" xml:space="preserve">
          <source>A string with &amp;lsquo;f&amp;rsquo; representing trim from front and &amp;lsquo;b&amp;rsquo; to trim from back. Default is &amp;lsquo;fb&amp;rsquo;, trim zeros from both front and back of the array.</source>
          <target state="translated">'f'가 앞에서 자르고 'b'에서 자르는 것을 나타내는 문자열입니다. 기본값은 'fb'이며 어레이의 앞면과 뒷면 모두에서 0을 자릅니다.</target>
        </trans-unit>
        <trans-unit id="9f5fc7d583671fa3d14d3cf2a8c5d45637921d25" translate="yes" xml:space="preserve">
          <source>A string with three comma-separated integers allows specification of the axis to concatenate along, the minimum number of dimensions to force the entries to, and which axis should contain the start of the arrays which are less than the specified number of dimensions. In other words the third integer allows you to specify where the 1&amp;rsquo;s should be placed in the shape of the arrays that have their shapes upgraded. By default, they are placed in the front of the shape tuple. The third argument allows you to specify where the start of the array should be instead. Thus, a third argument of &amp;lsquo;0&amp;rsquo; would place the 1&amp;rsquo;s at the end of the array shape. Negative integers specify where in the new shape tuple the last dimension of upgraded arrays should be placed, so the default is &amp;lsquo;-1&amp;rsquo;.</source>
          <target state="translated">쉼표로 구분 된 3 개의 정수가있는 문자열을 사용하면 축 지정, 항목을 강제로 삽입 할 최소 차원 수 및 지정된 차원 수보다 작은 배열의 시작을 포함해야하는 축을 지정할 수 있습니다. 즉, 세 번째 정수를 사용하면 모양이 업그레이드 된 배열의 모양에서 1을 배치 할 위치를 지정할 수 있습니다. 기본적으로 모양 튜플의 전면에 배치됩니다. 세 번째 인수를 사용하면 배열의 시작 위치를 지정할 수 있습니다. 따라서 '0'의 세 번째 인수는 1을 배열 모양의 끝에 배치합니다. 음의 정수는 새 모양 튜플에서 업그레이드 된 배열의 마지막 차원을 배치 할 위치를 지정하므로 기본값은 '-1'입니다.</target>
        </trans-unit>
        <trans-unit id="e6d2ae7b6da7c3e66b0ffab924afae035a474e84" translate="yes" xml:space="preserve">
          <source>A structured data type containing a 16-character string (in field &amp;lsquo;name&amp;rsquo;) and a sub-array of two 64-bit floating-point number (in field &amp;lsquo;grades&amp;rsquo;):</source>
          <target state="translated">16 자 문자열 (필드 'name')과 두 개의 64 비트 부동 소수점 숫자 (필드 'grades')의 하위 배열을 포함하는 구조화 된 데이터 유형 :</target>
        </trans-unit>
        <trans-unit id="f180152a86fa9b648a6bab2cda7a10f4905a48b6" translate="yes" xml:space="preserve">
          <source>A subclass of &lt;a href=&quot;generated/numpy.ndarray#numpy.ndarray&quot;&gt;&lt;code&gt;ndarray&lt;/code&gt;&lt;/a&gt; designed to manipulate numerical arrays with missing data.</source>
          <target state="translated">누락 된 데이터가있는 숫자 형 배열을 조작하도록 설계된 &lt;a href=&quot;generated/numpy.ndarray#numpy.ndarray&quot;&gt; &lt;code&gt;ndarray&lt;/code&gt; &lt;/a&gt; 의 하위 클래스입니다 .</target>
        </trans-unit>
        <trans-unit id="0a9d85237edf034be6cf9bf1e244b291b0aee63a" translate="yes" xml:space="preserve">
          <source>A synonym for PyArray_DESCR, named to be consistent with the &amp;lsquo;dtype&amp;rsquo; usage within Python.</source>
          <target state="translated">파이썬에서 'dtype'사용법과 일치하도록 명명 된 PyArray_DESCR의 동의어입니다.</target>
        </trans-unit>
        <trans-unit id="f2681289891032d09b18ed94e9f65a0e2826ff47" translate="yes" xml:space="preserve">
          <source>A synonym for PyArray_DIMS, named to be consistent with the &amp;lsquo;shape&amp;rsquo; usage within Python.</source>
          <target state="translated">PyArray_DIMS의 동의어로, 파이썬에서 '모양'사용법과 일치하도록 명명되었습니다.</target>
        </trans-unit>
        <trans-unit id="8c4410cbe0b9f7cf51e2244cb7c5c5dd5f8dc17d" translate="yes" xml:space="preserve">
          <source>A third option is to take the view of an existing array. In that case, the mask of the view is set to &lt;a href=&quot;maskedarray.baseclass#numpy.ma.nomask&quot;&gt;&lt;code&gt;nomask&lt;/code&gt;&lt;/a&gt; if the array has no named fields, or an array of boolean with the same structure as the array otherwise.</source>
          <target state="translated">세 번째 옵션은 기존 어레이를 보는 것입니다. 이 경우, 볼의 마스크로 설정되어 &lt;a href=&quot;maskedarray.baseclass#numpy.ma.nomask&quot;&gt; &lt;code&gt;nomask&lt;/code&gt; &lt;/a&gt; 어레이 더 필드 이름, 또는 다른 배열과 같은 구조를 갖는 부울 배열 경우.</target>
        </trans-unit>
        <trans-unit id="0f636d16ad05af695598dcc38696ba8fa663d5b8" translate="yes" xml:space="preserve">
          <source>A third source of entropy, used internally when calling &lt;a href=&quot;numpy.random.seedsequence.spawn#numpy.random.SeedSequence.spawn&quot;&gt;&lt;code&gt;SeedSequence.spawn&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;numpy.random.seedsequence.spawn#numpy.random.SeedSequence.spawn&quot;&gt; &lt;code&gt;SeedSequence.spawn&lt;/code&gt; 을&lt;/a&gt; 호출 할 때 내부적으로 사용되는 세 번째 엔트로피 소스</target>
        </trans-unit>
        <trans-unit id="3c732466671bb9ce60ffffbea1204a8445e601bb" translate="yes" xml:space="preserve">
          <source>A total of the number of skipped and known failing tests is displayed at the end of the test run. Skipped tests are marked as &lt;code&gt;'S'&lt;/code&gt; in the test results (or &lt;code&gt;'SKIPPED'&lt;/code&gt; for &lt;code&gt;verbose &amp;gt; 1&lt;/code&gt;), and known failing tests are marked as &lt;code&gt;'x'&lt;/code&gt; (or &lt;code&gt;'XFAIL'&lt;/code&gt; if &lt;code&gt;verbose &amp;gt;
1&lt;/code&gt;).</source>
          <target state="translated">테스트 실행이 끝나면 건너 뛰고 알려진 실패 테스트의 총 수가 표시됩니다. 건너 뛴 테스트는 테스트 결과에서 &lt;code&gt;'S'&lt;/code&gt; (또는 &lt;code&gt;verbose &amp;gt; 1&lt;/code&gt; &lt;code&gt;'SKIPPED'&lt;/code&gt; ) 로 표시 되고 알려진 실패 테스트는 &lt;code&gt;'x'&lt;/code&gt; (또는 &lt;code&gt;verbose &amp;gt; 1&lt;/code&gt; 경우 &lt;code&gt;'XFAIL'&lt;/code&gt; )로 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="a64f95a5aede16bea5ef8a6ca146177fb6b3b182" translate="yes" xml:space="preserve">
          <source>A traditional character code indicating the data type.</source>
          <target state="translated">데이터 유형을 나타내는 전통적인 문자 코드.</target>
        </trans-unit>
        <trans-unit id="0b2b4cceb7cfb51035a175e0d658850c2512647b" translate="yes" xml:space="preserve">
          <source>A tuple indicating the shape of the mask.</source>
          <target state="translated">마스크의 모양을 나타내는 튜플.</target>
        </trans-unit>
        <trans-unit id="85c14115771a7d712b28ce39ebe75a1449ae6de7" translate="yes" xml:space="preserve">
          <source>A tuple of integer arrays, one array for each dimension.</source>
          <target state="translated">정수 배열의 튜플, 각 차원마다 하나의 배열.</target>
        </trans-unit>
        <trans-unit id="ae51c3ea3c094cd9cddbc02935737e4b00f64a16" translate="yes" xml:space="preserve">
          <source>A type object, which is an &lt;code&gt;_ndtpr&lt;/code&gt; instance containing dtype, ndim, shape and flags information.</source>
          <target state="translated">dtype, ndim, shape 및 flags 정보를 포함 하는 &lt;code&gt;_ndtpr&lt;/code&gt; 인스턴스 인 type 객체 입니다.</target>
        </trans-unit>
        <trans-unit id="d2dc5b16a9633f04f2b77831428f3b69798d84b3" translate="yes" xml:space="preserve">
          <source>A unique character code for each of the 21 different built-in types.</source>
          <target state="translated">21 개의 서로 다른 내장 유형 각각에 대한 고유 한 문자 코드.</target>
        </trans-unit>
        <trans-unit id="d057a382d54c38b38dfa71e3ba451944dcf3b8d8" translate="yes" xml:space="preserve">
          <source>A unique number for each of the 21 different built-in types.</source>
          <target state="translated">21 개의 서로 다른 내장 유형 각각에 대한 고유 번호.</target>
        </trans-unit>
        <trans-unit id="64c1f6c06cc51041e07183275cab6719aeb64fb9" translate="yes" xml:space="preserve">
          <source>A universal function (or &lt;a href=&quot;https://docs.scipy.org/doc/numpy-1.17.0/glossary.html#term-ufunc&quot;&gt;ufunc&lt;/a&gt; for short) is a function that operates on &lt;a href=&quot;generated/numpy.ndarray#numpy.ndarray&quot;&gt;&lt;code&gt;ndarrays&lt;/code&gt;&lt;/a&gt; in an element-by-element fashion, supporting &lt;a href=&quot;#ufuncs-broadcasting&quot;&gt;array broadcasting&lt;/a&gt;, &lt;a href=&quot;#ufuncs-casting&quot;&gt;type casting&lt;/a&gt;, and several other standard features. That is, a ufunc is a &amp;ldquo;&lt;a href=&quot;https://docs.scipy.org/doc/numpy-1.17.0/glossary.html#term-vectorization&quot;&gt;vectorized&lt;/a&gt;&amp;rdquo; wrapper for a function that takes a fixed number of specific inputs and produces a fixed number of specific outputs.</source>
          <target state="translated">범용 기능 (또는 짧게 &lt;a href=&quot;https://docs.scipy.org/doc/numpy-1.17.0/glossary.html#term-ufunc&quot;&gt;ufunc&lt;/a&gt; )은 &lt;a href=&quot;generated/numpy.ndarray#numpy.ndarray&quot;&gt; &lt;code&gt;ndarrays&lt;/code&gt; &lt;/a&gt; 에서 요소 별로 작동하여 &lt;a href=&quot;#ufuncs-broadcasting&quot;&gt;배열 브로드 캐스트&lt;/a&gt; , &lt;a href=&quot;#ufuncs-casting&quot;&gt;유형 캐스팅&lt;/a&gt; 및 기타 여러 표준 기능을 지원하는 기능입니다. 즉, ufunc는 고정 된 수의 특정 입력을 사용하고 고정 된 수의 특정 출력을 생성하는 함수 의 &quot; &lt;a href=&quot;https://docs.scipy.org/doc/numpy-1.17.0/glossary.html#term-vectorization&quot;&gt;벡터화 된&lt;/a&gt; &quot;래퍼입니다.</target>
        </trans-unit>
        <trans-unit id="0b5238c72cf80b5c60c913bcf36e0c3b2aca2141" translate="yes" xml:space="preserve">
          <source>A use case for this function is to match the shape and layout of the iterator and tack on one or more dimensions. For example, in order to generate a vector per input value for a numerical gradient, you pass in ndim*itemsize for itemsize, then add another dimension to the end with size ndim and stride itemsize. To do the Hessian matrix, you do the same thing but add two dimensions, or take advantage of the symmetry and pack it into 1 dimension with a particular encoding.</source>
          <target state="translated">이 기능의 사용 사례는 반복자의 모양 및 레이아웃을 일치시키고 하나 이상의 차원에 고정하는 것입니다. 예를 들어, 숫자 그라디언트의 입력 값당 벡터를 생성하려면 항목 크기로 ndim * itemsize를 전달한 다음 크기가 ndim 인 항목에 다른 차원을 추가하고 항목 크기를 늘리십시오. Hessian 행렬을 수행하려면 동일한 작업을 수행하지만 2 차원을 추가하거나 대칭을 활용하여 특정 인코딩으로 1 차원으로 압축합니다.</target>
        </trans-unit>
        <trans-unit id="c23b4448f23bf99116b098b7042336b6a0a35ca9" translate="yes" xml:space="preserve">
          <source>A user-defined type number is returned that uniquely identifies the type. A pointer to the new structure can then be obtained from &lt;a href=&quot;#c.PyArray_DescrFromType&quot;&gt;&lt;code&gt;PyArray_DescrFromType&lt;/code&gt;&lt;/a&gt; using the returned type number. A -1 is returned if an error occurs. If this &lt;em&gt;dtype&lt;/em&gt; has already been registered (checked only by the address of the pointer), then return the previously-assigned type-number.</source>
          <target state="translated">유형을 고유하게 식별하는 사용자 정의 유형 번호가 리턴됩니다. 그런 다음 반환 된 유형 번호를 사용하여 &lt;a href=&quot;#c.PyArray_DescrFromType&quot;&gt; &lt;code&gt;PyArray_DescrFromType&lt;/code&gt; &lt;/a&gt; 에서 새 구조에 대한 포인터를 얻을 수 있습니다. 오류가 발생하면 -1이 반환됩니다. 이 &lt;em&gt;dtype&lt;/em&gt; 이 이미 등록되어 있으면 (포인터의 주소로만 확인) 이전에 할당 된 type-number를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="d15cfd1e60814b656a603a12c408fd84b9dc49bd" translate="yes" xml:space="preserve">
          <source>A variable &lt;code&gt;x&lt;/code&gt; has a log-normal distribution if &lt;code&gt;log(x)&lt;/code&gt; is normally distributed. The probability density function for the log-normal distribution is:</source>
          <target state="translated">&lt;code&gt;log(x)&lt;/code&gt; 가 정규 분포 인 경우 변수 &lt;code&gt;x&lt;/code&gt; 는 로그 정규 분포를 갖습니다 . 로그 정규 분포에 대한 확률 밀도 함수는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="a380132a2a22dec2d9e0225f137d26ed0fb90cb8" translate="yes" xml:space="preserve">
          <source>A variable type indicating the kind of clipping that should be applied in certain functions.</source>
          <target state="translated">특정 기능에 적용해야하는 클리핑의 종류를 나타내는 변수 유형입니다.</target>
        </trans-unit>
        <trans-unit id="fa9bf0dccea77846a06e4f1221f1f221c098b27c" translate="yes" xml:space="preserve">
          <source>A version which returns complex numbers when given negative reals.</source>
          <target state="translated">음의 실수가 주어지면 복소수를 반환하는 버전입니다.</target>
        </trans-unit>
        <trans-unit id="2fcfc20f282779542aca2d1f71202cb495e262a7" translate="yes" xml:space="preserve">
          <source>A very common operation in much of NumPy code is the need to iterate over all the elements of a general, strided, N-dimensional array. This operation of a general-purpose N-dimensional loop is abstracted in the notion of an iterator object. To write an N-dimensional loop, you only have to create an iterator object from an ndarray, work with the dataptr member of the iterator object structure and call the macro &lt;a href=&quot;c-api.array#c.PyArray_ITER_NEXT&quot;&gt;&lt;code&gt;PyArray_ITER_NEXT&lt;/code&gt;&lt;/a&gt; (it) on the iterator object to move to the next element. The &amp;ldquo;next&amp;rdquo; element is always in C-contiguous order. The macro works by first special casing the C-contiguous, 1-D, and 2-D cases which work very simply.</source>
          <target state="translated">많은 NumPy 코드에서 매우 일반적인 작업은 일반 스 트레이딩 된 N- 차원 배열의 모든 요소를 ​​반복해야한다는 것입니다. 범용 N 차원 루프의 이러한 동작은 반복자 객체의 개념으로 추상화됩니다. N 차원 루프를 작성하려면 ndarray에서 반복자 오브젝트 만 작성하고 반복자 오브젝트 구조의 dataptr 멤버로 작업 한 후 반복자 오브젝트에서 매크로 &lt;a href=&quot;c-api.array#c.PyArray_ITER_NEXT&quot;&gt; &lt;code&gt;PyArray_ITER_NEXT&lt;/code&gt; &lt;/a&gt; (it)를 호출 하여 다음 요소로 이동하면됩니다. &quot;다음&quot;요소는 항상 C 연속 순서입니다. 이 매크로는 우선 C- 연속, 1-D 및 2-D 케이스를 특수 케이싱하여 매우 간단하게 작동합니다.</target>
        </trans-unit>
        <trans-unit id="2d293e5beee6d752c5e9563e11d78a171279a315" translate="yes" xml:space="preserve">
          <source>A view of &lt;code&gt;m&lt;/code&gt; with the columns reversed. Since a view is returned, this operation is</source>
          <target state="translated">열이 반전 된 &lt;code&gt;m&lt;/code&gt; 의보기 . 보기가 리턴되므로이 조작은</target>
        </trans-unit>
        <trans-unit id="66bdbd39fa3f528ae4cecafafda9e6501691569a" translate="yes" xml:space="preserve">
          <source>A view of &lt;code&gt;m&lt;/code&gt; with the entries of axis reversed. Since a view is returned, this operation is done in constant time.</source>
          <target state="translated">축 항목이 반전 된 &lt;code&gt;m&lt;/code&gt; 의보기입니다 . 보기가 리턴되므로이 조작은 일정한 시간에 수행됩니다.</target>
        </trans-unit>
        <trans-unit id="248e57cd70b2bdbb1ce54ae0d4a6550da9299aaf" translate="yes" xml:space="preserve">
          <source>A view of &lt;code&gt;m&lt;/code&gt; with the rows reversed. Since a view is returned, this operation is</source>
          <target state="translated">행이 반전 된 &lt;code&gt;m&lt;/code&gt; 의보기입니다 . 보기가 리턴되므로이 조작은</target>
        </trans-unit>
        <trans-unit id="f51b7d94b5a97c50779fd88d4376e83b681ccdf5" translate="yes" xml:space="preserve">
          <source>A warning of class warning_class should be thrown by the callable when invoked with arguments args and keyword arguments kwargs. If a different type of warning is thrown, it will not be caught.</source>
          <target state="translated">인수 arrgs 및 키워드 인수 kwargs를 사용하여 호출 할 때 호출 가능 클래스에서 warning_class 클래스의 경고가 발생해야합니다. 다른 유형의 경고가 발생하면 포착되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="73fb89647e9cf799e65a16c0b2c72ed24fcc54ac" translate="yes" xml:space="preserve">
          <source>A.V. Oppenheim and R.W. Schafer, &amp;ldquo;Discrete-Time Signal Processing&amp;rdquo;, Prentice-Hall, 1999, pp. 468-471.</source>
          <target state="translated">AV Oppenheim 및 RW Schafer,&amp;ldquo;Discrete-Time Signal Processing&amp;rdquo;, Prentice-Hall, 1999, 468-471 페이지.</target>
        </trans-unit>
        <trans-unit id="e333a8f5d6c832811356beeee9fce0dffa5d510b" translate="yes" xml:space="preserve">
          <source>ABI incompatibility is automatically detected in every numpy&amp;rsquo;s version. API incompatibility detection was added in numpy 1.4.0. If you want to supported many different numpy versions with one extension binary, you have to build your extension with the lowest NPY_FEATURE_VERSION as possible.</source>
          <target state="translated">모든 numpy 버전에서 ABI 비 호환성이 자동으로 감지됩니다. API 비 호환성 감지가 numpy 1.4.0에 추가되었습니다. 하나의 확장 이진을 사용하여 여러 가지 다른 numpy 버전을 지원하려면 가능한 한 가장 낮은 NPY_FEATURE_VERSION으로 확장을 빌드해야합니다.</target>
        </trans-unit>
        <trans-unit id="5995866cb7ff67106f4964a2376febd406b1609d" translate="yes" xml:space="preserve">
          <source>ALIGNED (A) the data and strides are aligned appropriately for the hardware (as determined by the compiler);</source>
          <target state="translated">ALIGNED (A) (컴파일러가 결정한대로) 데이터와 보폭이 하드웨어에 맞게 적절히 정렬됩니다.</target>
        </trans-unit>
        <trans-unit id="4304323acf2d8950ef646184d037e624bf247b5a" translate="yes" xml:space="preserve">
          <source>ALIGNED / A</source>
          <target state="translated">정렬 됨 / A</target>
        </trans-unit>
        <trans-unit id="c669e6d697ad4a42bc9b5d0d37cf73bc259d9578" translate="yes" xml:space="preserve">
          <source>ALIGNED and WRITEABLE.</source>
          <target state="translated">정렬 및 쓰기 가능</target>
        </trans-unit>
        <trans-unit id="f993136f3c88fcde984662580493081020efb4f2" translate="yes" xml:space="preserve">
          <source>ALIGNED can only be set &lt;code&gt;True&lt;/code&gt; if the data is truly aligned.</source>
          <target state="translated">ALIGNED는 데이터가 실제로 정렬 된 경우 에만 &lt;code&gt;True&lt;/code&gt; 로 설정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="97ec8580d4ae0d82a2150753bb70bdbc01a7704e" translate="yes" xml:space="preserve">
          <source>Abramowitz, M. and Stegun, I. A. (Eds.). &amp;ldquo;Handbook of Mathematical Functions with Formulas, Graphs, and Mathematical Tables, 9th printing,&amp;rdquo; New York: Dover, 1972.</source>
          <target state="translated">아브라모 위츠 (Mabramowitz), IA (St. Stegun) 뉴욕 : 도버, 1972.&amp;ldquo;수식, 그래프, 수학 표가있는 수학적 함수 핸드북, 9 번째 인쇄.</target>
        </trans-unit>
        <trans-unit id="4e1f50a3f5352b9780a93248146f73d95f25a2f5" translate="yes" xml:space="preserve">
          <source>Abramowitz, M. and Stegun, I. A., &lt;em&gt;Handbook of Mathematical Functions&lt;/em&gt;, 10th printing, New York: Dover, 1964, pp. 79. &lt;a href=&quot;http://www.math.sfu.ca/~cbm/aands/&quot;&gt;http://www.math.sfu.ca/~cbm/aands/&lt;/a&gt;</source>
          <target state="translated">IA, Abramowitz, M. and Stegun, &lt;em&gt;수학 함수 핸드북&lt;/em&gt; , 10 번째 인쇄, 뉴욕 : 도버, 1964, pp. 79. &lt;a href=&quot;http://www.math.sfu.ca/~cbm/aands/&quot;&gt;http://www.math.sfu.ca/~cbm/aands/&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="40e736856e2b97e31bab4e474e99a3cd42ea1797" translate="yes" xml:space="preserve">
          <source>Abramowitz, M. and Stegun, I. A., &lt;em&gt;Handbook of Mathematical Functions&lt;/em&gt;, 10th printing, New York: Dover, 1964, pp. 79ff. &lt;a href=&quot;http://www.math.sfu.ca/~cbm/aands/&quot;&gt;http://www.math.sfu.ca/~cbm/aands/&lt;/a&gt;</source>
          <target state="translated">IA, Abramowitz, M. and Stegun, &lt;em&gt;수학 함수 핸드북&lt;/em&gt; , 10 번째 인쇄, New York : Dover, 1964, pp. 79ff. &lt;a href=&quot;http://www.math.sfu.ca/~cbm/aands/&quot;&gt;http://www.math.sfu.ca/~cbm/aands/&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="72be1abc9c41f18cb036851d094c7e5ee1691674" translate="yes" xml:space="preserve">
          <source>Absolute tolerance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38ef1ee54a653575269705dbdf26ea3643a0677d" translate="yes" xml:space="preserve">
          <source>Absolute tolerance. The absolute difference is equal to &lt;code&gt;atol&lt;/code&gt;. Default is 1e-8.</source>
          <target state="translated">절대 공차. 절대 차이는 &lt;code&gt;atol&lt;/code&gt; 과 같습니다 . 기본값은 1e-8입니다.</target>
        </trans-unit>
        <trans-unit id="f2b82fc5344b46b896168f341b2c8150deb1752e" translate="yes" xml:space="preserve">
          <source>Absolute values including &lt;a href=&quot;https://docs.python.org/dev/library/functions.html#complex&quot;&gt;&lt;code&gt;complex&lt;/code&gt;&lt;/a&gt; types.</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/dev/library/functions.html#complex&quot;&gt; &lt;code&gt;complex&lt;/code&gt; &lt;/a&gt; 유형을 포함한 절대 값</target>
        </trans-unit>
        <trans-unit id="975afb77a17099a273652740c50322176a7899c3" translate="yes" xml:space="preserve">
          <source>Abstract base class for seed sequences that can spawn.</source>
          <target state="translated">스폰 될 수있는 시드 시퀀스의 추상 기본 클래스입니다.</target>
        </trans-unit>
        <trans-unit id="3a56b6f89460611cc544ed578033449602d74856" translate="yes" xml:space="preserve">
          <source>Abstract base class for seed sequences.</source>
          <target state="translated">시드 시퀀스에 대한 추상 기본 클래스입니다.</target>
        </trans-unit>
        <trans-unit id="bcb77f2711885dd2e0c1b501af744fd631f7962c" translate="yes" xml:space="preserve">
          <source>Accepts a boolean array which is broadcast together with the operands. Values of True indicate to calculate the ufunc at that position, values of False indicate to leave the value in the output alone. This argument cannot be used for generalized ufuncs as those take non-scalar input.</source>
          <target state="translated">피연산자와 함께 브로드 캐스트되는 부울 배열을 승인합니다. True 값은 해당 위치에서 ufunc를 계산 함을 나타내며 False 값은 출력만으로 값을 유지함을 나타냅니다. 스칼라가 아닌 입력을 취하므로 일반 인수에는이 인수를 사용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="7ff8ee5fd6920ddbc4707845c10dec516fb18e5f" translate="yes" xml:space="preserve">
          <source>Accepts any object as input, but always returns False unless the input is a MaskedArray containing masked values.</source>
          <target state="translated">객체를 입력으로 허용하지만 입력이 마스크 된 값을 포함하는 MaskedArray가 아닌 경우 항상 False를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="d7eafeaa5f92d0428891758cafdbada426336787" translate="yes" xml:space="preserve">
          <source>Access the values in a BitGenerator, convert them to &lt;code&gt;float64&lt;/code&gt; in the interval &lt;code&gt;[0.0.,&lt;/code&gt; `` 1.0)``. In addition to the &lt;code&gt;size&lt;/code&gt; kwarg, now supports &lt;code&gt;dtype='d'&lt;/code&gt; or &lt;code&gt;dtype='f'&lt;/code&gt;, and an &lt;code&gt;out&lt;/code&gt; kwarg to fill a user- supplied array.</source>
          <target state="translated">BitGenerator의 값에 액세스하여 간격 &lt;code&gt;[0.0.,&lt;/code&gt; ``1.0)`` 에서 &lt;code&gt;float64&lt;/code&gt; 로 변환 하십시오 . 또한받는 &lt;code&gt;size&lt;/code&gt; kwarg 현재 지원 &lt;code&gt;dtype='d'&lt;/code&gt; 또는 &lt;code&gt;dtype='f'&lt;/code&gt; AN, 및 &lt;code&gt;out&lt;/code&gt; 사용자 - 제공된 어레이를 채우기 위해 kwarg.</target>
        </trans-unit>
        <trans-unit id="16c5166155700e6456d3ac7078b3466894c92ea9" translate="yes" xml:space="preserve">
          <source>Accessing a field of a masked array with structured datatype returns a &lt;a href=&quot;maskedarray.baseclass#numpy.ma.MaskedArray&quot;&gt;&lt;code&gt;MaskedArray&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">구조화 된 데이터 유형으로 마스크 된 배열의 필드에 액세스하면 &lt;a href=&quot;maskedarray.baseclass#numpy.ma.MaskedArray&quot;&gt; &lt;code&gt;MaskedArray&lt;/code&gt; 가&lt;/a&gt; 리턴 됩니다 .</target>
        </trans-unit>
        <trans-unit id="ad44652f541aceec356fa1b8d890a83b5e7dc497" translate="yes" xml:space="preserve">
          <source>Accessing a mask</source>
          <target state="translated">마스크에 액세스</target>
        </trans-unit>
        <trans-unit id="1ae3364beb66b0f5f244cd535829f92651c28eaf" translate="yes" xml:space="preserve">
          <source>Accessing only the valid entries</source>
          <target state="translated">유효한 항목 만 액세스</target>
        </trans-unit>
        <trans-unit id="097badc57289f74986291250ca0d50ffba8b6adb" translate="yes" xml:space="preserve">
          <source>Accessing the BitGenerator</source>
          <target state="translated">BitGenerator에 액세스</target>
        </trans-unit>
        <trans-unit id="b9cea573b7dc8cfac38c95967f1d0a9124dc54f0" translate="yes" xml:space="preserve">
          <source>Accessing the data</source>
          <target state="translated">데이터에 액세스</target>
        </trans-unit>
        <trans-unit id="5c56508764b810016753b53da256711e1fc59c95" translate="yes" xml:space="preserve">
          <source>Accessing the mask</source>
          <target state="translated">마스크에 액세스</target>
        </trans-unit>
        <trans-unit id="2444770b8ea0a7f5ab0c34a322154eaab7c51273" translate="yes" xml:space="preserve">
          <source>Accumulate</source>
          <target state="translated">Accumulate</target>
        </trans-unit>
        <trans-unit id="22b15212c762693681b9a14af1311471df5ef0ae" translate="yes" xml:space="preserve">
          <source>Accumulate along axis 0 (rows), down columns:</source>
          <target state="translated">축 0 (행)을 따라 아래로 열을 누적합니다.</target>
        </trans-unit>
        <trans-unit id="c5dbcb1067a3510dbd548c0a2abcca4e50a8d0fa" translate="yes" xml:space="preserve">
          <source>Accumulate along axis 1 (columns), through rows:</source>
          <target state="translated">행을 통해 축 1 (열)을 따라 누적합니다.</target>
        </trans-unit>
        <trans-unit id="b9d21cbdbf197dfdab9c0eb8a5bda1ff0c8fa94a" translate="yes" xml:space="preserve">
          <source>Accumulate the result of applying the operator to all elements.</source>
          <target state="translated">연산자를 모든 요소에 적용한 결과를 누적하십시오.</target>
        </trans-unit>
        <trans-unit id="b0ebcfe59f276beb7f6238d812ac61ce48d3d9c0" translate="yes" xml:space="preserve">
          <source>Acknowledgements</source>
          <target state="translated">Acknowledgements</target>
        </trans-unit>
        <trans-unit id="56ced59b1ab2a27a1e28eb186c93bb18811d3b07" translate="yes" xml:space="preserve">
          <source>Add a new suppressing filter or apply it if the state is entered.</source>
          <target state="translated">새 억제 필터를 추가하거나 상태가 입력되면 적용하십시오.</target>
        </trans-unit>
        <trans-unit id="d043d90a01e9bb2a87e33e05fa61ed3580fe178f" translate="yes" xml:space="preserve">
          <source>Add a sub-package to the current Configuration instance.</source>
          <target state="translated">현재 구성 인스턴스에 하위 패키지를 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="a9f6e016bc697e252d23d45724a67632f941a1b2" translate="yes" xml:space="preserve">
          <source>Add an &lt;code&gt;endpoint&lt;/code&gt; kwarg</source>
          <target state="translated">&lt;code&gt;endpoint&lt;/code&gt; kwarg 추가</target>
        </trans-unit>
        <trans-unit id="519a7255bd3f55d1b7e212ac3f5b0f7f59ed48fd" translate="yes" xml:space="preserve">
          <source>Add arguments element-wise.</source>
          <target state="translated">요소별로 인수를 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="cf5ce0052c3cb14c88808808de75ffbd43bea0ed" translate="yes" xml:space="preserve">
          <source>Add data files to configuration data_files.</source>
          <target state="translated">구성 데이터 _ 파일에 데이터 파일을 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="974de5ada8253a5d4e9c975a8b5b2b2cc87bc9f2" translate="yes" xml:space="preserve">
          <source>Add extension to configuration.</source>
          <target state="translated">구성에 확장을 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="b24e0797845ace332ac782f3100ed9496873f75c" translate="yes" xml:space="preserve">
          <source>Add files to the list of data_files to be included with the package.</source>
          <target state="translated">패키지에 포함 할 data_file 목록에 파일을 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="ec6d39fc613a2412b3149971ccc3066ea668ccca" translate="yes" xml:space="preserve">
          <source>Add installable headers to configuration.</source>
          <target state="translated">설치 가능한 헤더를 구성에 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="192c191f7a03fc113ffda7fc0311b90dbf55dc23" translate="yes" xml:space="preserve">
          <source>Add items 0 and 1 in first array to second array, and store results in first array:</source>
          <target state="translated">첫 번째 배열의 항목 0과 1을 두 번째 배열에 추가하고 결과를 첫 번째 배열에 저장하십시오.</target>
        </trans-unit>
        <trans-unit id="42403b1e1d797b817002a948120252be5c28e7af" translate="yes" xml:space="preserve">
          <source>Add library to configuration.</source>
          <target state="translated">구성에 라이브러리를 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="d2f20ffde813ddf49b70fa6579528381531956ef" translate="yes" xml:space="preserve">
          <source>Add one Chebyshev series to another.</source>
          <target state="translated">하나의 체비 쇼프 시리즈를 다른 것에 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="fd817ff95924ec8272d634ce0e8ab2243af60b54" translate="yes" xml:space="preserve">
          <source>Add one Hermite series to another.</source>
          <target state="translated">Hermite 시리즈를 다른 시리즈에 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="0b8b661c7b6f0c6c875176dc938142703c034819" translate="yes" xml:space="preserve">
          <source>Add one Laguerre series to another.</source>
          <target state="translated">하나의 Laguerre 시리즈를 다른 시리즈에 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="93d32b5903dcfaf0d99ed0343cee2fd7fd1ebf6a" translate="yes" xml:space="preserve">
          <source>Add one Legendre series to another.</source>
          <target state="translated">하나의 Legendre 시리즈를 다른 시리즈에 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="0d912f77007b5acc37a22e3054240ae70a3da350" translate="yes" xml:space="preserve">
          <source>Add one polynomial to another.</source>
          <target state="translated">하나의 다항식을 다른 다항식에 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="8041fb737a2e0a0d3f536fb0552a96a43ffb7877" translate="yes" xml:space="preserve">
          <source>Add other to self in-place.</source>
          <target state="translated">제자리에 다른 사람을 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="f6d36d753b402c69d5e17a3850443960310aff1c" translate="yes" xml:space="preserve">
          <source>Add other to self, and return a new masked array.</source>
          <target state="translated">self에 other를 추가하고 새로운 마스크 배열을 반환하십시오.</target>
        </trans-unit>
        <trans-unit id="38367eda00cb06221a825ac891db31d4b74dcd00" translate="yes" xml:space="preserve">
          <source>Add padding to the fields to match what a C compiler would output for a similar C-struct. Can be &lt;code&gt;True&lt;/code&gt; only if &lt;code&gt;obj&lt;/code&gt; is a dictionary or a comma-separated string. If a struct dtype is being created, this also sets a sticky alignment flag &lt;code&gt;isalignedstruct&lt;/code&gt;.</source>
          <target state="translated">C 컴파일러가 유사한 C-struct에 대해 출력하는 것과 일치하도록 필드에 패딩을 추가하십시오. &lt;code&gt;obj&lt;/code&gt; 가 사전 또는 쉼표로 구분 된 문자열 인 경우에만 &lt;code&gt;True&lt;/code&gt; 일 수 있습니다 . struct dtype이 작성되는 경우 고정 정렬 플래그 &lt;code&gt;isalignedstruct&lt;/code&gt; 도 설정 됩니다.</target>
        </trans-unit>
        <trans-unit id="eeb521c915ba75bbea5f83fd82b92d84dd986501" translate="yes" xml:space="preserve">
          <source>Add paths to configuration include directories.</source>
          <target state="translated">구성 포함 디렉토리를 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="0967ccc52cda50cec6242dcae20e3e663f6b35ba" translate="yes" xml:space="preserve">
          <source>Add scripts to configuration.</source>
          <target state="translated">구성에 스크립트를 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="3dd9e8736f2494a49ed757670af12e62654adc57" translate="yes" xml:space="preserve">
          <source>Add self to other, and return a new masked array.</source>
          <target state="translated">다른 사람에게 자신을 추가하고 새로운 마스크 배열을 반환하십시오.</target>
        </trans-unit>
        <trans-unit id="867e6fef453e3af448d8c2735af394c1c3900828" translate="yes" xml:space="preserve">
          <source>Add the given sequence of files to the beginning of the headers list. By default, headers will be installed under &amp;lt;python- include&amp;gt;/&amp;lt;self.name.replace(&amp;lsquo;.&amp;rsquo;,&amp;rsquo;/&amp;rsquo;)&amp;gt;/ directory. If an item of files is a tuple, then its first argument specifies the actual installation location relative to the &amp;lt;python-include&amp;gt; path.</source>
          <target state="translated">주어진 파일 시퀀스를 헤더 목록의 시작 부분에 추가하십시오. 기본적으로 헤더는 &amp;lt;python-include&amp;gt; / &amp;lt;self.name.replace ( '.', '/')&amp;gt; / 디렉토리에 설치됩니다. 파일 항목이 튜플 인 경우 첫 번째 인수는 &amp;lt;python-include&amp;gt; 경로를 기준으로 실제 설치 위치를 지정합니다.</target>
        </trans-unit>
        <trans-unit id="12793661dc735a50f73c70cbbe55f373e9453216" translate="yes" xml:space="preserve">
          <source>Add the given sequence of paths to the beginning of the include_dirs list. This list will be visible to all extension modules of the current package.</source>
          <target state="translated">주어진 경로 순서를 include_dirs 목록의 시작 부분에 추가하십시오. 이 목록은 현재 패키지의 모든 확장 모듈에 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="e621d32dc1acbceb0f631d5058189d13dfa7e90e" translate="yes" xml:space="preserve">
          <source>Add the sequence of files to the beginning of the scripts list. Scripts will be installed under the &amp;lt;prefix&amp;gt;/bin/ directory.</source>
          <target state="translated">스크립트 목록의 시작 부분에 파일 시퀀스를 추가하십시오. 스크립트는 &amp;lt;prefix&amp;gt; / bin / 디렉토리에 설치됩니다.</target>
        </trans-unit>
        <trans-unit id="2f1cf6cab2980b1934b9fc8b7e4e15ffc7a86fa0" translate="yes" xml:space="preserve">
          <source>Added in API version 0x0000000D</source>
          <target state="translated">API 버전 0x0000000D에서 추가됨</target>
        </trans-unit>
        <trans-unit id="2e363efb6a62f825b55e45a4c27ae9d8e6d08be0" translate="yes" xml:space="preserve">
          <source>Added the &lt;code&gt;optimize&lt;/code&gt; argument which will optimize the contraction order of an einsum expression. For a contraction with three or more operands this can greatly increase the computational efficiency at the cost of a larger memory footprint during computation.</source>
          <target state="translated">einsum 표현식의 수축 순서를 최적화 하는 &lt;code&gt;optimize&lt;/code&gt; 인수를 추가했습니다 . 피연산자가 세 개 이상인 수축의 경우 계산 중에 메모리 공간이 많이 소비되어 계산 효율성이 크게 향상 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1190df5112112b0d1382beaeaf5f8e64d6c7c049" translate="yes" xml:space="preserve">
          <source>Adding and removing elements</source>
          <target state="translated">요소 추가 및 제거</target>
        </trans-unit>
        <trans-unit id="4b71895b23af2e6dac13ac1dabde5dfa97ef31a6" translate="yes" xml:space="preserve">
          <source>Adding the following:</source>
          <target state="translated">다음을 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="32ceef7d48b3859f43536940686eb939e0f9e4ac" translate="yes" xml:space="preserve">
          <source>Addition and Subtraction:</source>
          <target state="translated">더하기와 빼기 :</target>
        </trans-unit>
        <trans-unit id="2e979316df7e66e1ac30d87235c1730e8f93451f" translate="yes" xml:space="preserve">
          <source>Additional arguments to &lt;code&gt;func1d&lt;/code&gt;.</source>
          <target state="translated">에 추가 인수 &lt;code&gt;func1d&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2f33c64b8e45a0b559c62344568b319008aa4e48" translate="yes" xml:space="preserve">
          <source>Additional named arguments to &lt;code&gt;func1d&lt;/code&gt;.</source>
          <target state="translated">에 추가로 명명 된 인수 &lt;code&gt;func1d&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1b6f855c96ea61fde07e7f6094fffb0063607dcd" translate="yes" xml:space="preserve">
          <source>Adjusts the iterator to point to the &lt;code&gt;index&lt;/code&gt; specified. If the iterator was constructed with the flag &lt;a href=&quot;#c.NPY_ITER_C_INDEX&quot;&gt;&lt;code&gt;NPY_ITER_C_INDEX&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;index&lt;/code&gt; is the C-order index, and if the iterator was constructed with the flag &lt;a href=&quot;#c.NPY_ITER_F_INDEX&quot;&gt;&lt;code&gt;NPY_ITER_F_INDEX&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;index&lt;/code&gt; is the Fortran-order index. Returns an error if there is no index being tracked, the index is out of bounds, or inner loop iteration is disabled.</source>
          <target state="translated">지정된 &lt;code&gt;index&lt;/code&gt; 을 가리 키도록 반복자를 조정 합니다. 반복기가 &lt;a href=&quot;#c.NPY_ITER_C_INDEX&quot;&gt; &lt;code&gt;NPY_ITER_C_INDEX&lt;/code&gt; &lt;/a&gt; 플래그로 구성된 경우 &lt;code&gt;index&lt;/code&gt; 는 C 순서 인덱스이고 반복자가 플래그 &lt;a href=&quot;#c.NPY_ITER_F_INDEX&quot;&gt; &lt;code&gt;NPY_ITER_F_INDEX&lt;/code&gt; 로 구성된&lt;/a&gt; 경우 &lt;code&gt;index&lt;/code&gt; 는 포트란 순서 인덱스입니다. 추적중인 인덱스가 없거나 인덱스가 범위를 벗어 났거나 내부 루프 반복이 비활성화 된 경우 오류를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="c53e871abed99db7c60f0e6f2c2a24b11cc57547" translate="yes" xml:space="preserve">
          <source>Adjusts the iterator to point to the &lt;code&gt;iterindex&lt;/code&gt; specified. The IterIndex is an index matching the iteration order of the iterator. Returns an error if the &lt;code&gt;iterindex&lt;/code&gt; is out of bounds, buffering is enabled, or inner loop iteration is disabled.</source>
          <target state="translated">지정된 &lt;code&gt;iterindex&lt;/code&gt; 를 가리 키도록 반복자를 조정 합니다. IterIndex는 반복자의 반복 순서와 일치하는 색인입니다. &lt;code&gt;iterindex&lt;/code&gt; 가 범위를 벗어 났 거나 버퍼링이 활성화되었거나 내부 루프 반복이 비활성화 된 경우 오류를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="a44fa8caa936143e610fe1aa66906556f9b4b048" translate="yes" xml:space="preserve">
          <source>Adjusts the iterator to point to the &lt;code&gt;ndim&lt;/code&gt; indices pointed to by &lt;code&gt;multi_index&lt;/code&gt;. Returns an error if a multi-index is not being tracked, the indices are out of bounds, or inner loop iteration is disabled.</source>
          <target state="translated">를 조정을 차례로 반복자 &lt;code&gt;ndim&lt;/code&gt; 가리키는 인덱스 &lt;code&gt;multi_index&lt;/code&gt; . 다중 색인이 추적되지 않거나 색인이 범위를 벗어 났거나 내부 루프 반복이 사용 불가능한 경우 오류를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="390482652fc6614f94b8e0b5d3b8e3e7bc440efc" translate="yes" xml:space="preserve">
          <source>Advance each iterator in a multi-iterator object, &lt;em&gt;multi&lt;/em&gt;, to its next (broadcasted) element.</source>
          <target state="translated">다중 반복자 객체, 각 반복기 사전 &lt;em&gt;멀티&lt;/em&gt; 차기 (방송) 소자.</target>
        </trans-unit>
        <trans-unit id="1eb4a413c0c668de3526e3736ba4eab0d5ad4902" translate="yes" xml:space="preserve">
          <source>Advance each iterator in a multi-iterator object, &lt;em&gt;multi&lt;/em&gt;, to the corresponding location of the &lt;em&gt;index&lt;/em&gt; into the flattened broadcasted array.</source>
          <target state="translated">다중 반복자 객체, 각 반복기 사전 &lt;em&gt;다중&lt;/em&gt; 의 대응하는 위치에, &lt;em&gt;인덱스&lt;/em&gt; 편평 방송 배열.</target>
        </trans-unit>
        <trans-unit id="73bcba17a49d905680f64f4b64cd0da0763a1fdc" translate="yes" xml:space="preserve">
          <source>Advance each iterator in a multi-iterator object, &lt;em&gt;multi&lt;/em&gt;, to the given</source>
          <target state="translated">다중 반복자 객체, 각 반복기 사전 &lt;em&gt;멀티&lt;/em&gt; 주어진까지</target>
        </trans-unit>
        <trans-unit id="d06248316b0b57b9742900b7804039e7df16e3f2" translate="yes" xml:space="preserve">
          <source>Advance the pointer of only the &lt;em&gt;i&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;i&lt;/em&gt; 의 포인터 만 진행&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="dd761b85cd8dca1120d21ecad95bbc6dec40fee8" translate="yes" xml:space="preserve">
          <source>Advance the underlying RNG as-if delta draws have occurred.</source>
          <target state="translated">델타 드로우가 발생한 경우 기본 RNG를 진행합니다.</target>
        </trans-unit>
        <trans-unit id="e4a9df64655f2d3ba6fe67579fc92c420e65f624" translate="yes" xml:space="preserve">
          <source>Advanced Indexing</source>
          <target state="translated">고급 인덱싱</target>
        </trans-unit>
        <trans-unit id="0922b66273cf1a5abf90475333bea716b31aac15" translate="yes" xml:space="preserve">
          <source>Advanced indexes always are &lt;a href=&quot;ufuncs#ufuncs-broadcasting&quot;&gt;broadcast&lt;/a&gt; and iterated as &lt;em&gt;one&lt;/em&gt;:</source>
          <target state="translated">고급 인덱스는 항상 &lt;a href=&quot;ufuncs#ufuncs-broadcasting&quot;&gt;브로드 캐스트&lt;/a&gt; 되고 &lt;em&gt;하나로&lt;/em&gt; 반복됩니다 .</target>
        </trans-unit>
        <trans-unit id="999315f478c86ddb00ef69d19a9dca673920820f" translate="yes" xml:space="preserve">
          <source>Advanced indexing</source>
          <target state="translated">고급 인덱싱</target>
        </trans-unit>
        <trans-unit id="b8ba30d88906e0b53b1be5c5761d50dabce952b7" translate="yes" xml:space="preserve">
          <source>Advanced indexing always returns a &lt;em&gt;copy&lt;/em&gt; of the data (contrast with basic slicing that returns a &lt;a href=&quot;https://docs.scipy.org/doc/numpy-1.17.0/glossary.html#term-view&quot;&gt;view&lt;/a&gt;).</source>
          <target state="translated">고급 인덱싱은 항상 데이터 &lt;em&gt;복사본&lt;/em&gt; 을 반환합니다 ( &lt;a href=&quot;https://docs.scipy.org/doc/numpy-1.17.0/glossary.html#term-view&quot;&gt;뷰&lt;/a&gt; 를 반환하는 기본 슬라이싱과 대조 ).</target>
        </trans-unit>
        <trans-unit id="adb03decbf1f08def4c5022df624652f98eb5d13" translate="yes" xml:space="preserve">
          <source>Advanced indexing is handled with this Python type. It is simply a loose wrapper around the C-structure containing the variables needed for advanced array indexing. The associated C-structure, &lt;code&gt;PyArrayMapIterObject&lt;/code&gt;, is useful if you are trying to understand the advanced-index mapping code. It is defined in the &lt;code&gt;arrayobject.h&lt;/code&gt; header. This type is not exposed to Python and could be replaced with a C-structure. As a Python type it takes advantage of reference- counted memory management.</source>
          <target state="translated">고급 인덱싱은이 Python 유형으로 처리됩니다. 고급 배열 인덱싱에 필요한 변수를 포함하는 C 구조 주위의 느슨한 래퍼입니다. 연관된 C 구조 &lt;code&gt;PyArrayMapIterObject&lt;/code&gt; 는 고급 인덱스 맵핑 코드를 이해하려는 경우에 유용합니다. &lt;code&gt;arrayobject.h&lt;/code&gt; 헤더에 정의되어 있습니다. 이 유형은 Python에 노출되지 않으며 C 구조로 대체 될 수 있습니다. 파이썬 타입은 참조 카운트 된 메모리 관리를 이용합니다.</target>
        </trans-unit>
        <trans-unit id="4cbc11f3f0cea97e5215f4270cb134a05ddd8588" translate="yes" xml:space="preserve">
          <source>Advanced indexing is triggered when the selection object, &lt;em&gt;obj&lt;/em&gt;, is a non-tuple sequence object, an &lt;a href=&quot;generated/numpy.ndarray#numpy.ndarray&quot;&gt;&lt;code&gt;ndarray&lt;/code&gt;&lt;/a&gt; (of data type integer or bool), or a tuple with at least one sequence object or ndarray (of data type integer or bool). There are two types of advanced indexing: integer and Boolean.</source>
          <target state="translated">선택 객체 &lt;em&gt;obj&lt;/em&gt; 가 튜플이 아닌 시퀀스 객체, &lt;a href=&quot;generated/numpy.ndarray#numpy.ndarray&quot;&gt; &lt;code&gt;ndarray&lt;/code&gt; &lt;/a&gt; (데이터 유형 정수 또는 bool) 또는 하나 이상의 시퀀스 객체 또는 ndarray (데이터 유형 정수 또는 bool)가있는 튜플 인 경우 고급 인덱싱이 트리거됩니다 . 고급 색인에는 정수와 부울의 두 가지 유형이 있습니다.</target>
        </trans-unit>
        <trans-unit id="611a42a1d4f61c91b62b09d02ca4dcaf618fc419" translate="yes" xml:space="preserve">
          <source>Advancing a RNG updates the underlying RNG state as-if a given number of calls to the underlying RNG have been made. In general there is not a one-to-one relationship between the number output random values from a particular distribution and the number of draws from the core RNG. This occurs for two reasons:</source>
          <target state="translated">RNG를 전진 시키면 기본 RNG에 대해 지정된 수의 호출이 이루어진 것처럼 기본 RNG 상태가 업데이트됩니다. 일반적으로 특정 분포의 출력 랜덤 값과 코어 RNG의 드로우 수에는 일대일 관계가 없습니다. 이것은 두 가지 이유로 발생합니다.</target>
        </trans-unit>
        <trans-unit id="2a1491b2d39360f6989a2a9f95147bc552e01c99" translate="yes" xml:space="preserve">
          <source>Advancing the RNG state resets any pre-computed random numbers. This is required to ensure exact reproducibility.</source>
          <target state="translated">RNG 상태를 높이면 미리 계산 된 임의의 숫자가 재설정됩니다. 정확한 재현성을 보장하기 위해 필요합니다.</target>
        </trans-unit>
        <trans-unit id="a95973a9f50f3287c49850414751629648c88b21" translate="yes" xml:space="preserve">
          <source>After &lt;code&gt;make&lt;/code&gt; is used to build the testing extension modules, &lt;code&gt;testVector.py&lt;/code&gt; can be run to execute the tests. As with other scripts that use &lt;code&gt;unittest&lt;/code&gt; to facilitate unit testing, &lt;code&gt;testVector.py&lt;/code&gt; defines a class that inherits from &lt;code&gt;unittest.TestCase&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;make&lt;/code&gt; 를 사용하여 테스트 확장 모듈을 빌드 한 후 &lt;code&gt;testVector.py&lt;/code&gt; 를 실행하여 테스트를 실행할 수 있습니다. &lt;code&gt;unittest&lt;/code&gt; 를 사용 하여 단위 테스트를 용이하게 하는 다른 스크립트와 마찬가지로 &lt;code&gt;testVector.py&lt;/code&gt; 는 &lt;code&gt;unittest.TestCase&lt;/code&gt; 에서 상속되는 클래스를 정의합니다 .</target>
        </trans-unit>
        <trans-unit id="d95a5016bd3b1fa69cde64b52dc8446b4fe73b5a" translate="yes" xml:space="preserve">
          <source>After being allocated with this flag, the caller may retrieve the new array by calling &lt;a href=&quot;#c.NpyIter_GetOperandArray&quot;&gt;&lt;code&gt;NpyIter_GetOperandArray&lt;/code&gt;&lt;/a&gt; and getting the i-th object in the returned C array. The caller must call Py_INCREF on it to claim a reference to the array.</source>
          <target state="translated">이 플래그가 할당 된 후 호출자는 &lt;a href=&quot;#c.NpyIter_GetOperandArray&quot;&gt; &lt;code&gt;NpyIter_GetOperandArray&lt;/code&gt; &lt;/a&gt; 를 호출 하고 반환 된 C 배열에서 i 번째 개체를 가져 와서 새 배열을 검색 할 수 있습니다 . 호출자는 배열에 대한 참조를 청구하기 위해 Py_INCREF를 호출해야합니다.</target>
        </trans-unit>
        <trans-unit id="68eb223f793cecafa70b72b2b2cd87c7e3024552" translate="yes" xml:space="preserve">
          <source>After calling this function, &lt;code&gt;NpyIter_HasMultiIndex(iter)&lt;/code&gt; will return false.</source>
          <target state="translated">이 함수를 호출하면 &lt;code&gt;NpyIter_HasMultiIndex(iter)&lt;/code&gt; 가 false를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="c90e047a5904835abb0e3a66bba8cc0c6a4b3394" translate="yes" xml:space="preserve">
          <source>After checking, the thread-specific global variables, the inputs are evaluated to determine how the ufunc should proceed and the input and output arrays are constructed if necessary. Any inputs which are not arrays are converted to arrays (using context if necessary). Which of the inputs are scalars (and therefore converted to 0-D arrays) is noted.</source>
          <target state="translated">스레드 별 전역 변수를 확인한 후 입력을 평가하여 ufunc의 진행 방식을 결정하고 필요한 경우 입력 및 출력 배열을 구성합니다. 배열이 아닌 모든 입력은 배열로 변환됩니다 (필요한 경우 컨텍스트 사용). 어떤 입력이 스칼라인지 (따라서 0-D 배열로 변환 됨)가 기록됩니다.</target>
        </trans-unit>
        <trans-unit id="84eaa230a19f707fcc5c351e2944b878215aece7" translate="yes" xml:space="preserve">
          <source>After constructing the format_parser object, the dtype attribute is the converted data-type: &lt;code&gt;dtype = format_parser(formats, names, titles).dtype&lt;/code&gt;</source>
          <target state="translated">format_parser 객체를 생성 한 후 dtype 속성은 변환 된 데이터 유형입니다. &lt;code&gt;dtype = format_parser(formats, names, titles).dtype&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="455eb55512bcb65b5c410bb05796baeb29acbfea" translate="yes" xml:space="preserve">
          <source>After preparation, getting and setting is relatively straight forward, although the different modes of iteration need to be considered. Unless there is only a single indexing array during item getting, the validity of the indices is checked beforehand. Otherwise it is handled in the inner loop itself for optimization.</source>
          <target state="translated">준비 후에는 다른 반복 모드를 고려해야하지만 가져 오기 및 설정은 비교적 간단합니다. 아이템을 가져 오는 동안 하나의 인덱싱 배열 만 없다면 인덱스의 유효성을 미리 확인합니다. 그렇지 않으면 최적화를 위해 내부 루프 자체에서 처리됩니다.</target>
        </trans-unit>
        <trans-unit id="697b44505fd313d9b8c894a494c99e13592310d3" translate="yes" xml:space="preserve">
          <source>After this call, iter-&amp;gt;dataptr points to the next point of the neighborhood. Calling this function after every point of the neighborhood has been visited is undefined.</source>
          <target state="translated">이 호출 후 iter-&amp;gt; dataptr은 이웃의 다음 지점을 가리 킵니다. 이웃의 모든 지점을 방문한 후이 함수를 호출하는 것은 정의되어 있지 않습니다.</target>
        </trans-unit>
        <trans-unit id="0b9513877fd0ed1a40b8e9bf67003ecbb52357dd" translate="yes" xml:space="preserve">
          <source>Again, the hardware error flags are checked at the end of each 1-D loop.</source>
          <target state="translated">다시 말하지만, 하드웨어 오류 플래그는 각 1-D 루프의 끝에서 확인됩니다.</target>
        </trans-unit>
        <trans-unit id="15999ccd033219cd638f144231839361b543c152" translate="yes" xml:space="preserve">
          <source>Algebra</source>
          <target state="translated">Algebra</target>
        </trans-unit>
        <trans-unit id="9e977544bb11abd40aa27a0e17f3a1e6f9d61990" translate="yes" xml:space="preserve">
          <source>Alias for &lt;a href=&quot;numpy.random.generator.random#numpy.random.Generator.random&quot;&gt;&lt;code&gt;random&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;numpy.random.generator.random#numpy.random.Generator.random&quot;&gt; &lt;code&gt;random&lt;/code&gt; &lt;/a&gt; 별칭 .</target>
        </trans-unit>
        <trans-unit id="67d7f23a72a8843faf44deebd6c5b5926eb14ec8" translate="yes" xml:space="preserve">
          <source>Alias for &lt;a href=&quot;numpy.random.mtrand.randomstate.random_sample#numpy.random.mtrand.RandomState.random_sample&quot;&gt;&lt;code&gt;random_sample&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;numpy.random.mtrand.randomstate.random_sample#numpy.random.mtrand.RandomState.random_sample&quot;&gt; &lt;code&gt;random_sample&lt;/code&gt; 의&lt;/a&gt; 별명입니다 .</target>
        </trans-unit>
        <trans-unit id="fba36176b4a9c759d4fcc72655567ebf82febab0" translate="yes" xml:space="preserve">
          <source>Aliases for column names. For example, if &lt;code&gt;names&lt;/code&gt; were &lt;code&gt;('x', 'y', 'z')&lt;/code&gt; and &lt;code&gt;titles&lt;/code&gt; is &lt;code&gt;('x_coordinate', 'y_coordinate', 'z_coordinate')&lt;/code&gt;, then &lt;code&gt;arr['x']&lt;/code&gt; is equivalent to both &lt;code&gt;arr.x&lt;/code&gt; and &lt;code&gt;arr.x_coordinate&lt;/code&gt;.</source>
          <target state="translated">열 이름의 별명. 예를 들어 &lt;code&gt;names&lt;/code&gt; 이 &lt;code&gt;('x', 'y', 'z')&lt;/code&gt; 이고 &lt;code&gt;titles&lt;/code&gt; 이 &lt;code&gt;('x_coordinate', 'y_coordinate', 'z_coordinate')&lt;/code&gt; 인 경우 &lt;code&gt;arr['x']&lt;/code&gt; 는 &lt;code&gt;arr.x&lt;/code&gt; 와 같습니다. 및 &lt;code&gt;arr.x_coordinate&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7c5bb328be3f290ae38f62da3e4ece591ab22fc8" translate="yes" xml:space="preserve">
          <source>Aliases for functions which may be accelerated by Scipy.</source>
          <target state="translated">Scipy가 가속화 할 수있는 기능의 별명.</target>
        </trans-unit>
        <trans-unit id="13b88c72578e1bc088ddcd72007a263c4697a72b" translate="yes" xml:space="preserve">
          <source>Align the fields in memory as the C-compiler would.</source>
          <target state="translated">C- 컴파일러와 마찬가지로 메모리의 필드를 정렬하십시오.</target>
        </trans-unit>
        <trans-unit id="f3cba54c6d1af128e2fd6357be91e0ede30e9060" translate="yes" xml:space="preserve">
          <source>All &lt;code&gt;N&lt;/code&gt; elements of the matrix are placed into a single row.</source>
          <target state="translated">행렬의 모든 &lt;code&gt;N&lt;/code&gt; 요소가 단일 행에 배치됩니다.</target>
        </trans-unit>
        <trans-unit id="acddbf25025c4514b513776312b69fb5576c2571" translate="yes" xml:space="preserve">
          <source>All &lt;code&gt;NPY_SIZEOF_{CTYPE}&lt;/code&gt; constants have corresponding &lt;code&gt;NPY_BITSOF_{CTYPE}&lt;/code&gt; constants defined. The &lt;code&gt;NPY_BITSOF_{CTYPE}&lt;/code&gt; constants provide the number of bits in the data type. Specifically, the available &lt;code&gt;{CTYPE}s&lt;/code&gt; are</source>
          <target state="translated">모든 &lt;code&gt;NPY_SIZEOF_{CTYPE}&lt;/code&gt; 상수에는 해당 &lt;code&gt;NPY_BITSOF_{CTYPE}&lt;/code&gt; 상수가 정의되어 있습니다. &lt;code&gt;NPY_BITSOF_{CTYPE}&lt;/code&gt; 정수 데이터 유형의 비트 수를 제공한다. 사용 가능한 &lt;code&gt;{CTYPE}s&lt;/code&gt; 은</target>
        </trans-unit>
        <trans-unit id="be76fffeff958a29e1cfac06d834cba1ca2ac9cb" translate="yes" xml:space="preserve">
          <source>All BitGenerators can produce doubles, uint64s and uint32s via CTypes (&lt;a href=&quot;bit_generators/generated/numpy.random.pcg64.pcg64.ctypes#numpy.random.pcg64.PCG64.ctypes&quot;&gt;&lt;code&gt;ctypes&lt;/code&gt;&lt;/a&gt;) and CFFI (&lt;a href=&quot;bit_generators/generated/numpy.random.pcg64.pcg64.cffi#numpy.random.pcg64.PCG64.cffi&quot;&gt;&lt;code&gt;cffi&lt;/code&gt;&lt;/a&gt;). This allows the bit generators to be used in numba.</source>
          <target state="translated">모든 BitGenerator는 CType ( &lt;a href=&quot;bit_generators/generated/numpy.random.pcg64.pcg64.ctypes#numpy.random.pcg64.PCG64.ctypes&quot;&gt; &lt;code&gt;ctypes&lt;/code&gt; &lt;/a&gt; ) 및 CFFI ( &lt;a href=&quot;bit_generators/generated/numpy.random.pcg64.pcg64.cffi#numpy.random.pcg64.PCG64.cffi&quot;&gt; &lt;code&gt;cffi&lt;/code&gt; &lt;/a&gt; ) 를 통해 double, uint64 및 uint32를 생성 할 수 있습니다 . 이를 통해 비트 생성기를 numba에서 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c9bb8ae0504c4fd355ed5e394a6eda23387682d2" translate="yes" xml:space="preserve">
          <source>All BitGenerators in numpy use &lt;a href=&quot;bit_generators/generated/numpy.random.seedsequence#numpy.random.SeedSequence&quot;&gt;&lt;code&gt;SeedSequence&lt;/code&gt;&lt;/a&gt; to convert seeds into initialized states.</source>
          <target state="translated">numpy의 모든 BitGenerator는 &lt;a href=&quot;bit_generators/generated/numpy.random.seedsequence#numpy.random.SeedSequence&quot;&gt; &lt;code&gt;SeedSequence&lt;/code&gt; &lt;/a&gt; 를 사용 하여 시드를 초기화 된 상태로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="93006b441b63a8f203fde18dc1e2540284859337" translate="yes" xml:space="preserve">
          <source>All arrays generated by basic slicing are always &lt;a href=&quot;https://docs.scipy.org/doc/numpy-1.17.0/glossary.html#term-view&quot;&gt;views&lt;/a&gt; of the original array.</source>
          <target state="translated">기본 슬라이싱으로 생성 된 모든 배열은 항상 원래 배열의 &lt;a href=&quot;https://docs.scipy.org/doc/numpy-1.17.0/glossary.html#term-view&quot;&gt;보기&lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="c9be37c010a50fce0078664c2aec450a0fb2c2e9" translate="yes" xml:space="preserve">
          <source>All bit generators can produce doubles, uint64s and uint32s via CTypes (&lt;code&gt;ctypes&lt;/code&gt;) and CFFI (&lt;code&gt;cffi&lt;/code&gt;). This allows these bit generators to be used in numba.</source>
          <target state="translated">모든 비트 생성기는 CType ( &lt;code&gt;ctypes&lt;/code&gt; ) 및 CFFI ( &lt;code&gt;cffi&lt;/code&gt; ) 를 통해 double, uint64 및 uint32를 생성 할 수 있습니다 . 이를 통해 이러한 비트 생성기를 numba에서 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b69727cbe4d73bbfb0e440e37962ff9d4d419505" translate="yes" xml:space="preserve">
          <source>All built-in data-type objects have byteorder either &amp;lsquo;=&amp;rsquo; or &amp;lsquo;|&amp;rsquo;.</source>
          <target state="translated">모든 내장 데이터 유형 오브젝트의 바이트 순서는 '='또는 '|'입니다.</target>
        </trans-unit>
        <trans-unit id="8b7a0f2018eee680f412af1df03ac77a63a47767" translate="yes" xml:space="preserve">
          <source>All but the last (righthand-most) bin is half-open. In other words, if &lt;code&gt;bins&lt;/code&gt; is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff69c40820720e31d32ccaa63294de4fbcef8495" translate="yes" xml:space="preserve">
          <source>All elements of &lt;code&gt;a&lt;/code&gt; will be assigned this value.</source>
          <target state="translated">의 모든 요소 &lt;code&gt;a&lt;/code&gt; 는 이 값을 할당됩니다.</target>
        </trans-unit>
        <trans-unit id="ab491eb1f9e84afa82844be62a42785a977e7753" translate="yes" xml:space="preserve">
          <source>All flags can be accessed using the single (upper case) letter as well as the full name.</source>
          <target state="translated">모든 플래그는 전체 이름뿐만 아니라 단일 문자 (대문자)를 사용하여 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="02f1cb3a6a2fd8188553a31c71d030165f948de9" translate="yes" xml:space="preserve">
          <source>All input arrays except int64 and uint64 can be safely cast to the returned dtype without loss of information.</source>
          <target state="translated">int64 및 uint64를 제외한 모든 입력 배열은 정보 손실없이 반환 된 dtype으로 안전하게 캐스팅 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0d0b857c5a9b73e7d57ed711dbd367f8fced9c77" translate="yes" xml:space="preserve">
          <source>All input arrays with &lt;a href=&quot;generated/numpy.ndarray.ndim#numpy.ndarray.ndim&quot;&gt;&lt;code&gt;ndim&lt;/code&gt;&lt;/a&gt; smaller than the input array of largest &lt;a href=&quot;generated/numpy.ndarray.ndim#numpy.ndarray.ndim&quot;&gt;&lt;code&gt;ndim&lt;/code&gt;&lt;/a&gt;, have 1&amp;rsquo;s prepended to their shapes.</source>
          <target state="translated">&lt;a href=&quot;generated/numpy.ndarray.ndim#numpy.ndarray.ndim&quot;&gt; &lt;code&gt;ndim&lt;/code&gt; &lt;/a&gt; 이 가장 큰 &lt;a href=&quot;generated/numpy.ndarray.ndim#numpy.ndarray.ndim&quot;&gt; &lt;code&gt;ndim&lt;/code&gt; &lt;/a&gt; 의 입력 배열보다 작은 ndim을 가진 모든 입력 배열 의 모양 앞에 1이 붙습니다.</target>
        </trans-unit>
        <trans-unit id="ca446ec5487618f081b9b30abeedd928222d6468" translate="yes" xml:space="preserve">
          <source>All ndarrays are &lt;a href=&quot;https://docs.scipy.org/doc/numpy-1.17.0/glossary.html#term-homogenous&quot;&gt;homogenous&lt;/a&gt;: every item takes up the same size block of memory, and all blocks are interpreted in exactly the same way. How each item in the array is to be interpreted is specified by a separate &lt;a href=&quot;arrays.dtypes#arrays-dtypes&quot;&gt;data-type object&lt;/a&gt;, one of which is associated with every array. In addition to basic types (integers, floats, &lt;em&gt;etc.&lt;/em&gt;), the data type objects can also represent data structures.</source>
          <target state="translated">모든 ndarray는 &lt;a href=&quot;https://docs.scipy.org/doc/numpy-1.17.0/glossary.html#term-homogenous&quot;&gt;동종입니다&lt;/a&gt; . 모든 항목은 동일한 크기의 메모리 블록을 차지하며 모든 블록은 정확히 동일한 방식으로 해석됩니다. 배열의 각 항목을 해석하는 방법은 별도의 &lt;a href=&quot;arrays.dtypes#arrays-dtypes&quot;&gt;data-type object&lt;/a&gt; 로 지정되며 그 중 하나는 모든 배열과 연관됩니다. 기본 유형 (정수, 부동 수 &lt;em&gt;등&lt;/em&gt; ) 외에도 데이터 유형 객체는 데이터 구조를 나타낼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="da2b25874ee4e8732493aa486d012f0b0bed29b3" translate="yes" xml:space="preserve">
          <source>All of the classes are immutable and have the same methods, and especially they implement the Python numeric operators +, -, *, //, %, divmod, **, ==, and !=. The last two can be a bit problematic due to floating point roundoff errors. We now give a quick demonstration of the various operations using NumPy version 1.7.0.</source>
          <target state="translated">모든 클래스는 불변이며 동일한 메소드를 가지며 특히 Python 숫자 연산자 +,-, *, //, %, divmod, **, == 및! =를 구현합니다. 마지막 두 개는 부동 소수점 반올림 오류로 인해 약간 문제가 될 수 있습니다. 이제 NumPy 버전 1.7.0을 사용한 다양한 작업에 대한 간단한 데모를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="d23d8201105a40c14ba3b7be79618b80eab9ec1b" translate="yes" xml:space="preserve">
          <source>All of the numeric data types (integer, floating point, and complex) have constants that are defined to be a specific enumerated type number. Exactly which enumerated type a bit-width type refers to is platform dependent. In particular, the constants available are &lt;code&gt;PyArray_{NAME}{BITS}&lt;/code&gt; where &lt;code&gt;{NAME}&lt;/code&gt; is &lt;strong&gt;INT&lt;/strong&gt;, &lt;strong&gt;UINT&lt;/strong&gt;, &lt;strong&gt;FLOAT&lt;/strong&gt;, &lt;strong&gt;COMPLEX&lt;/strong&gt; and &lt;code&gt;{BITS}&lt;/code&gt; can be 8, 16, 32, 64, 80, 96, 128, 160, 192, 256, and 512. Obviously not all bit-widths are available on all platforms for all the kinds of numeric types. Commonly 8-, 16-, 32-, 64-bit integers; 32-, 64-bit floats; and 64-, 128-bit complex types are available.</source>
          <target state="translated">모든 숫자 데이터 유형 (정수, 부동 소수점 및 복소수)에는 특정 열거 유형 번호로 정의 된 상수가 있습니다. 비트 폭 형식이 참조하는 열거 된 형식은 플랫폼에 따라 다릅니다. 특히 사용 가능한 상수는 &lt;code&gt;PyArray_{NAME}{BITS}&lt;/code&gt; 이며 여기서 &lt;code&gt;{NAME}&lt;/code&gt; 은 &lt;strong&gt;INT&lt;/strong&gt; , &lt;strong&gt;UINT&lt;/strong&gt; , &lt;strong&gt;FLOAT&lt;/strong&gt; , &lt;strong&gt;COMPLEX&lt;/strong&gt; 및 &lt;code&gt;{BITS}&lt;/code&gt; 는 8, 16, 32, 64, 80, 96, 128, 160, 192 일 수 있습니다. 256, 512. 모든 종류의 숫자 유형에 대해 모든 플랫폼에서 모든 비트 폭을 사용할 수있는 것은 아닙니다. 일반적으로 8, 16, 32, 64 비트 정수; 32 비트, 64 비트 플로트; 64, 128 비트 복합 유형을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b5a846311d841d583030d446986226f22871d26f" translate="yes" xml:space="preserve">
          <source>All of the ufunc methods use the same underlying 1-D computational loops with input and output arguments adjusted so that the appropriate reduction takes place. For example, the key to the functioning of reduce is that the 1-D loop is called with the output and the second input pointing to the same position in memory and both having a step- size of 0. The first input is pointing to the input array with a step- size given by the appropriate stride for the selected axis. In this way, the operation performed is</source>
          <target state="translated">모든 ufunc 메소드는 적절한 축소가 이루어 지도록 입력 및 출력 인수가 조정 된 동일한 기본 1D 계산 루프를 사용합니다. 예를 들어, reduce 기능의 핵심은 1-D 루프가 출력과 두 번째 입력이 메모리에서 동일한 위치를 가리키고 스텝 크기가 0 인 두 번째 입력으로 호출된다는 것입니다. 첫 번째 입력은 선택한 축에 적절한 보폭으로 주어진 단계 크기의 입력 배열. 이런 식으로 수행되는 작업은</target>
        </trans-unit>
        <trans-unit id="5b156f6c315198e56c123c4ccd661578933f08cc" translate="yes" xml:space="preserve">
          <source>All of these functions can be used in &lt;a href=&quot;https://docs.python.org/dev/c-api/arg.html#c.PyArg_ParseTuple&quot;&gt;&lt;code&gt;PyArg_ParseTuple&lt;/code&gt;&lt;/a&gt; (&amp;hellip;) with the &amp;ldquo;O&amp;amp;&amp;rdquo; format specifier to automatically convert any Python object to the required C-object. All of these functions return &lt;a href=&quot;#c.NPY_SUCCEED&quot;&gt;&lt;code&gt;NPY_SUCCEED&lt;/code&gt;&lt;/a&gt; if successful and &lt;a href=&quot;#c.NPY_FAIL&quot;&gt;&lt;code&gt;NPY_FAIL&lt;/code&gt;&lt;/a&gt; if not. The first argument to all of these function is a Python object. The second argument is the &lt;strong&gt;address&lt;/strong&gt; of the C-type to convert the Python object to.</source>
          <target state="translated">이러한 모든 함수는 &lt;a href=&quot;https://docs.python.org/dev/c-api/arg.html#c.PyArg_ParseTuple&quot;&gt; &lt;code&gt;PyArg_ParseTuple&lt;/code&gt; &lt;/a&gt; (&amp;hellip;)에서&amp;ldquo;O &amp;amp;&amp;rdquo;형식 지정자와 함께 사용하여 모든 Python 객체를 필요한 C 객체로 자동 변환 할 수 있습니다. 이러한 함수는 모두 성공하면 &lt;a href=&quot;#c.NPY_SUCCEED&quot;&gt; &lt;code&gt;NPY_SUCCEED&lt;/code&gt; 를&lt;/a&gt; 반환 하고 &lt;a href=&quot;#c.NPY_FAIL&quot;&gt; &lt;code&gt;NPY_FAIL&lt;/code&gt; &lt;/a&gt; 않으면 NPY_FAIL을 반환합니다. 이 모든 함수에 대한 첫 번째 주장은 Python 객체입니다. 두 번째 인수는 Python 객체를 변환 할 C 유형 의 &lt;strong&gt;주소&lt;/strong&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="2247f8b0604f20c2ebdf433c5eb69f188bf79464" translate="yes" xml:space="preserve">
          <source>All python indexing operations &lt;code&gt;arr[index]&lt;/code&gt; are organized by first preparing the index and finding the index type. The supported index types are:</source>
          <target state="translated">모든 파이썬 색인 작업 &lt;code&gt;arr[index]&lt;/code&gt; 는 먼저 색인을 준비하고 색인 유형을 찾아 구성됩니다. 지원되는 색인 유형은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="696c30921da1780c98302e930b24c2f3424b4299" translate="yes" xml:space="preserve">
          <source>All quotes are for clarity.</source>
          <target state="translated">모든 인용문은 명확성을위한 것입니다.</target>
        </trans-unit>
        <trans-unit id="f230907dd19dccf16b4f94379f148d5d107bfa02" translate="yes" xml:space="preserve">
          <source>All the dates for one month:</source>
          <target state="translated">한 달 동안의 모든 날짜 :</target>
        </trans-unit>
        <trans-unit id="92efcb4e59829949c6cee13f46fe21646e8a17b1" translate="yes" xml:space="preserve">
          <source>All the entries of an array can be masked at once by assigning &lt;code&gt;True&lt;/code&gt; to the mask:</source>
          <target state="translated">마스크에 &lt;code&gt;True&lt;/code&gt; 를 할당하여 배열의 모든 항목을 한 번에 마스킹 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e10c13da687020f879a5a16ee83f203fa91cc081" translate="yes" xml:space="preserve">
          <source>All the following expressions construct the same block matrix:</source>
          <target state="translated">다음의 모든 표현식은 동일한 블록 매트릭스를 구성합니다.</target>
        </trans-unit>
        <trans-unit id="2ffebe2f92d5f410095769cef8e73e9e4be3848b" translate="yes" xml:space="preserve">
          <source>All the partition algorithms make temporary copies of the data when partitioning along any but the last axis. Consequently, partitioning along the last axis is faster and uses less space than partitioning along any other axis.</source>
          <target state="translated">모든 파티션 알고리즘은 마지막 축 이외의 파티션을 따라 파티션 할 때 데이터의 임시 복사본을 만듭니다. 결과적으로 마지막 축을 따라 분할하는 것이 더 빠르고 다른 축을 따라 분할하는 것보다 적은 공간을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="1a70c541e6faf05b3fbeaa0081931d87c5fc3fd1" translate="yes" xml:space="preserve">
          <source>All the sort algorithms make temporary copies of the data when sorting along any but the last axis. Consequently, sorting along the last axis is faster and uses less space than sorting along any other axis.</source>
          <target state="translated">모든 정렬 알고리즘은 마지막 축을 제외하고 정렬 할 때 데이터의 임시 복사본을 만듭니다. 결과적으로 마지막 축을 기준으로 정렬하는 것이 다른 축을 기준으로 정렬하는 것보다 빠르며 공간을 덜 사용합니다.</target>
        </trans-unit>
        <trans-unit id="06c4b64299274980aca1edafbb8e3c5466dde177" translate="yes" xml:space="preserve">
          <source>All timings were taken using Linux on a i5-3570 processor.</source>
          <target state="translated">모든 타이밍은 i5-3570 프로세서에서 Linux를 사용하여 수행되었습니다.</target>
        </trans-unit>
        <trans-unit id="3b6801ef087b25df864317061c09ae2a58f2f84b" translate="yes" xml:space="preserve">
          <source>All trailing coefficients less than &lt;code&gt;tol&lt;/code&gt; will be removed.</source>
          <target state="translated">&lt;code&gt;tol&lt;/code&gt; 보다 작은 모든 후행 계수 가 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="5b1b305863dfd31164de95c6a2ba21a9d7316e39" translate="yes" xml:space="preserve">
          <source>All trigonometric functions use radians when an angle is called for. The ratio of degrees to radians is</source>
          <target state="translated">모든 삼각 함수는 각도가 필요할 때 라디안을 사용합니다. 도 대 라디안의 비율은</target>
        </trans-unit>
        <trans-unit id="21be5744ad69fc918df7773d4afd2f7e1b293377" translate="yes" xml:space="preserve">
          <source>All ufuncs can also take output arguments. If necessary, output will be cast to the data-type(s) of the provided output array(s). If a class with an &lt;a href=&quot;arrays.classes#numpy.class.__array__&quot;&gt;&lt;code&gt;__array__&lt;/code&gt;&lt;/a&gt; method is used for the output, results will be written to the object returned by &lt;a href=&quot;arrays.classes#numpy.class.__array__&quot;&gt;&lt;code&gt;__array__&lt;/code&gt;&lt;/a&gt;. Then, if the class also has an &lt;a href=&quot;arrays.classes#numpy.class.__array_prepare__&quot;&gt;&lt;code&gt;__array_prepare__&lt;/code&gt;&lt;/a&gt; method, it is called so metadata may be determined based on the context of the ufunc (the context consisting of the ufunc itself, the arguments passed to the ufunc, and the ufunc domain.) The array object returned by &lt;a href=&quot;arrays.classes#numpy.class.__array_prepare__&quot;&gt;&lt;code&gt;__array_prepare__&lt;/code&gt;&lt;/a&gt; is passed to the ufunc for computation. Finally, if the class also has an &lt;a href=&quot;arrays.classes#numpy.class.__array_wrap__&quot;&gt;&lt;code&gt;__array_wrap__&lt;/code&gt;&lt;/a&gt; method, the returned &lt;a href=&quot;generated/numpy.ndarray#numpy.ndarray&quot;&gt;&lt;code&gt;ndarray&lt;/code&gt;&lt;/a&gt; result will be passed to that method just before passing control back to the caller.</source>
          <target state="translated">모든 ufunc는 출력 인수를 취할 수도 있습니다. 필요한 경우 출력은 제공된 출력 배열의 데이터 유형으로 캐스트됩니다. 가지는 클래스 경우 &lt;a href=&quot;arrays.classes#numpy.class.__array__&quot;&gt; &lt;code&gt;__array__&lt;/code&gt; 의&lt;/a&gt; 방법은 출력을 위해 사용되며, 결과가 반환 대상에 기록 될 &lt;a href=&quot;arrays.classes#numpy.class.__array__&quot;&gt; &lt;code&gt;__array__&lt;/code&gt; &lt;/a&gt; . 그런 다음 클래스에 &lt;a href=&quot;arrays.classes#numpy.class.__array_prepare__&quot;&gt; &lt;code&gt;__array_prepare__&lt;/code&gt; &lt;/a&gt; 메서드 가있는 경우에는 ufunc의 컨텍스트 (ufunc 자체, ufunc에 전달 된 인수 및 ufunc 도메인으로 구성된 컨텍스트)를 기반으로 메타 데이터를 결정할 수 있도록 호출됩니다. &lt;a href=&quot;arrays.classes#numpy.class.__array_prepare__&quot;&gt; &lt;code&gt;__array_prepare__&lt;/code&gt; &lt;/a&gt; 에 의해 반환 된 객체는 계산을 위해 ufunc로 전달됩니다. 마지막으로, 클래스에 &lt;a href=&quot;arrays.classes#numpy.class.__array_wrap__&quot;&gt; &lt;code&gt;__array_wrap__&lt;/code&gt; &lt;/a&gt; 메소드 가있는 경우 반환 된 &lt;a href=&quot;generated/numpy.ndarray#numpy.ndarray&quot;&gt; &lt;code&gt;ndarray&lt;/code&gt; &lt;/a&gt;결과는 제어를 호출자에게 다시 전달하기 직전에 해당 메소드로 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="2d45789ac1ad3aa209fa7142eb2b247f7550708c" translate="yes" xml:space="preserve">
          <source>All ufuncs have four methods. However, these methods only make sense on scalar ufuncs that take two input arguments and return one output argument. Attempting to call these methods on other ufuncs will cause a &lt;a href=&quot;https://docs.python.org/dev/library/exceptions.html#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt;. The reduce-like methods all take an &lt;em&gt;axis&lt;/em&gt; keyword, a &lt;em&gt;dtype&lt;/em&gt; keyword, and an &lt;em&gt;out&lt;/em&gt; keyword, and the arrays must all have dimension &amp;gt;= 1. The &lt;em&gt;axis&lt;/em&gt; keyword specifies the axis of the array over which the reduction will take place (with negative values counting backwards). Generally, it is an integer, though for &lt;a href=&quot;generated/numpy.ufunc.reduce#numpy.ufunc.reduce&quot;&gt;&lt;code&gt;ufunc.reduce&lt;/code&gt;&lt;/a&gt;, it can also be a tuple of &lt;a href=&quot;https://docs.python.org/dev/library/functions.html#int&quot;&gt;&lt;code&gt;int&lt;/code&gt;&lt;/a&gt; to reduce over several axes at once, or &lt;code&gt;None&lt;/code&gt;, to reduce over all axes. The &lt;em&gt;dtype&lt;/em&gt; keyword allows you to manage a very common problem that arises when naively using &lt;a href=&quot;generated/numpy.ufunc.reduce#numpy.ufunc.reduce&quot;&gt;&lt;code&gt;ufunc.reduce&lt;/code&gt;&lt;/a&gt;. Sometimes you may have an array of a certain data type and wish to add up all of its elements, but the result does not fit into the data type of the array. This commonly happens if you have an array of single-byte integers. The &lt;em&gt;dtype&lt;/em&gt; keyword allows you to alter the data type over which the reduction takes place (and therefore the type of the output). Thus, you can ensure that the output is a data type with precision large enough to handle your output. The responsibility of altering the reduce type is mostly up to you. There is one exception: if no &lt;em&gt;dtype&lt;/em&gt; is given for a reduction on the &amp;ldquo;add&amp;rdquo; or &amp;ldquo;multiply&amp;rdquo; operations, then if the input type is an integer (or Boolean) data-type and smaller than the size of the &lt;code&gt;int_&lt;/code&gt; data type, it will be internally upcast to the &lt;code&gt;int_&lt;/code&gt; (or &lt;code&gt;uint&lt;/code&gt;) data-type. Finally, the &lt;em&gt;out&lt;/em&gt; keyword allows you to provide an output array (for single-output ufuncs, which are currently the only ones supported; for future extension, however, a tuple with a single argument can be passed in). If &lt;em&gt;out&lt;/em&gt; is given, the &lt;em&gt;dtype&lt;/em&gt; argument is ignored.</source>
          <target state="translated">모든 ufunc에는 네 가지 방법이 있습니다. 그러나 이러한 메소드는 두 개의 입력 인수를 사용하고 하나의 출력 인수를 리턴하는 스칼라 ufunc에서만 의미가 있습니다. 다른 ufunc에서 이러한 메소드를 호출하려고하면 &lt;a href=&quot;https://docs.python.org/dev/library/exceptions.html#ValueError&quot;&gt; &lt;code&gt;ValueError&lt;/code&gt; &lt;/a&gt; 가 발생합니다 . reduce-like 메소드는 모두 &lt;em&gt;축&lt;/em&gt; 키워드, &lt;em&gt;dtype&lt;/em&gt; 키워드 및 &lt;em&gt;out&lt;/em&gt; 키워드를 사용하며 배열의 치수는 모두&amp;gt; = 1이어야합니다. &lt;em&gt;axis&lt;/em&gt; 키워드는 축소가 발생하는 배열의 축을 지정합니다 (음수 포함) 거꾸로 세는 값). 일반적으로 정수이지만 &lt;a href=&quot;generated/numpy.ufunc.reduce#numpy.ufunc.reduce&quot;&gt; &lt;code&gt;ufunc.reduce&lt;/code&gt; 의&lt;/a&gt; 경우 한 번에 여러 축을 축소하는 &lt;a href=&quot;https://docs.python.org/dev/library/functions.html#int&quot;&gt; &lt;code&gt;int&lt;/code&gt; &lt;/a&gt; 튜플 일 수도 있고 &lt;code&gt;None&lt;/code&gt; 모든 축을 축소합니다. &lt;em&gt;DTYPE의&lt;/em&gt; 키워드는 순진하게 사용할 때 발생하는 매우 일반적인 문제를 관리 할 수 있습니다 &lt;a href=&quot;generated/numpy.ufunc.reduce#numpy.ufunc.reduce&quot;&gt; &lt;code&gt;ufunc.reduce&lt;/code&gt; 을&lt;/a&gt; . 때로는 특정 데이터 유형의 배열이 있고 모든 요소를 ​​더하고 싶지만 결과가 배열의 데이터 유형에 맞지 않습니다. 단일 바이트 정수 배열이있는 경우 일반적으로 발생합니다. &lt;em&gt;DTYPE&lt;/em&gt; 당신이 감소 (따라서 출력의 종류) 일어나는 통해 데이터 유형을 변경할 수 있습니다 키워드. 따라서 출력이 출력을 처리하기에 충분히 큰 정밀도를 가진 데이터 유형인지 확인할 수 있습니다. 감소 유형을 변경하는 책임은 대부분 귀하에게 달려 있습니다. 한 가지 예외가 있습니다 : &lt;em&gt;dtype&lt;/em&gt; 이없는 경우&lt;em&gt;&lt;/em&gt;&quot;add&quot;또는 &quot;multiply&quot;연산을 줄인 경우 입력 유형이 정수 (또는 부울) 데이터 유형이고 &lt;code&gt;int_&lt;/code&gt; 데이터 유형 의 크기보다 작은 경우 내부적으로 &lt;code&gt;int_&lt;/code&gt; 로 업 캐스트됩니다. (또는 &lt;code&gt;uint&lt;/code&gt; ) 데이터 유형. 마지막으로 &lt;em&gt;out&lt;/em&gt; 키워드를 사용하면 출력 배열을 제공 할 수 있습니다 (단일 출력 ufunc의 경우 현재 지원되는 유일한 기능이지만 향후 확장을 위해 단일 인수가있는 튜플을 전달할 수 있음). 경우 &lt;em&gt;출력이&lt;/em&gt; 주어진다는 &lt;em&gt;DTYPE의&lt;/em&gt; 인수는 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="e2318c4003a311a2e1f7718e453877fa81f4be7b" translate="yes" xml:space="preserve">
          <source>All ufuncs take optional keyword arguments. Most of these represent advanced usage and will not typically be used.</source>
          <target state="translated">모든 ufunc는 선택적 키워드 인수를 사용합니다. 이들 중 대부분은 고급 사용을 나타내며 일반적으로 사용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="08323fec08cd786e333ebc5f45dc257ddef21b88" translate="yes" xml:space="preserve">
          <source>All values are within the given interval:</source>
          <target state="translated">모든 값은 주어진 간격 내에 있습니다 :</target>
        </trans-unit>
        <trans-unit id="3557caeafcef351493a190e0ca76e645501ead19" translate="yes" xml:space="preserve">
          <source>All warnings matching will be appended to the &lt;code&gt;log&lt;/code&gt; attribute.</source>
          <target state="translated">일치하는 모든 경고가 &lt;code&gt;log&lt;/code&gt; 속성에 추가됩니다 .</target>
        </trans-unit>
        <trans-unit id="85b6fefe401a8781996bd809383b4e94b035998f" translate="yes" xml:space="preserve">
          <source>Allow a copy of &lt;code&gt;op[i]&lt;/code&gt; to be made if it does not meet the data type or alignment requirements as specified by the constructor flags and parameters.</source>
          <target state="translated">생성자 플래그 및 매개 변수에 지정된 데이터 유형 또는 정렬 요구 사항을 충족하지 않는 경우 &lt;code&gt;op[i]&lt;/code&gt; 의 사본이 작성되도록하십시오.</target>
        </trans-unit>
        <trans-unit id="9404967cc7ae4678bf28075900a5a4a4ae1c650b" translate="yes" xml:space="preserve">
          <source>Allow any cast, no matter what kind of data loss may occur.</source>
          <target state="translated">어떤 종류의 데이터 손실이 발생하더라도 캐스트를 허용하십시오.</target>
        </trans-unit>
        <trans-unit id="546d0b09674a5e30e0706f69483253c6d7dc53df" translate="yes" xml:space="preserve">
          <source>Allow any safe casts, and casts between types of the same kind. For example, float64 -&amp;gt; float32 is permitted with this rule.</source>
          <target state="translated">안전한 캐스트를 허용하고 같은 종류의 유형간에 캐스트하십시오. 예를 들어, float64-&amp;gt; float32는이 규칙에서 허용됩니다.</target>
        </trans-unit>
        <trans-unit id="897375acca9fa85a02ea8180e3301f00c8d2bb31" translate="yes" xml:space="preserve">
          <source>Allow identical and casts involving byte swapping.</source>
          <target state="translated">바이트 스와핑과 관련된 동일한 캐스트를 허용합니다.</target>
        </trans-unit>
        <trans-unit id="5e82a87fb0d9abd791679a7a9c324f1f365a79d4" translate="yes" xml:space="preserve">
          <source>Allow loading pickled object arrays stored in npy files. Reasons for disallowing pickles include security, as loading pickled data can execute arbitrary code. If pickles are disallowed, loading object arrays will fail. Default: False</source>
          <target state="translated">npy 파일에 저장된 절인 객체 배열을로드 할 수 있습니다. 피클을 허용하지 않는 이유는 보안이 포함됩니다. 피클 링 된 데이터를로드하면 임의 코드가 실행될 수 있습니다. 피클이 허용되지 않으면 객체 배열로드가 실패합니다. 기본값 : 거짓</target>
        </trans-unit>
        <trans-unit id="b7be66bfaf7dddda32176dfbd8947ed7745d9801" translate="yes" xml:space="preserve">
          <source>Allow saving object arrays using Python pickles. Reasons for disallowing pickles include security (loading pickled data can execute arbitrary code) and portability (pickled objects may not be loadable on different Python installations, for example if the stored objects require libraries that are not available, and not all pickled data is compatible between Python 2 and Python 3). Default: True</source>
          <target state="translated">파이썬 피클을 사용하여 객체 배열을 저장할 수 있습니다. 피클을 허용하지 않는 이유에는 보안 (피클 링 된 데이터를로드하면 임의의 코드를 실행할 수 있음) 및 이식성 (예 : 저장된 객체에 사용할 수없는 라이브러리가 필요하고 모든 피클 링 된 데이터가 호환되지 않는 경우와 같이 다른 Python 설치에서 피클 링 된 객체를로드 할 수 없음)가 있습니다. 파이썬 2와 파이썬 3). 기본값 : True</target>
        </trans-unit>
        <trans-unit id="54a3f63d2a62cea8a28f6112a74010f0a2fa0c89" translate="yes" xml:space="preserve">
          <source>Allows memory-mapping of the data. See &lt;code&gt;open_memmep&lt;/code&gt;.</source>
          <target state="translated">데이터의 메모리 매핑을 허용합니다. &lt;code&gt;open_memmep&lt;/code&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="9475de22330f0492d32cb9f57a359ae9ebe0344c" translate="yes" xml:space="preserve">
          <source>Allows reductions of empty arrays where they would normally fail, i.e. for ufuncs without an identity.</source>
          <target state="translated">일반적으로 실패하는 빈 배열 (예 : ID가없는 ufunc)을 줄일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f4262e7f150c5914529572b5cd9e309be4f3a1f9" translate="yes" xml:space="preserve">
          <source>Alpha, positive (&amp;gt;0).</source>
          <target state="translated">알파, 양수 (&amp;gt; 0).</target>
        </trans-unit>
        <trans-unit id="1ebdee21b6a505b4aeefd9e14363fed83b554743" translate="yes" xml:space="preserve">
          <source>Alpha: &amp;lsquo;1.8.0a1&amp;rsquo;, &amp;lsquo;1.8.0a2&amp;rsquo;, etc.</source>
          <target state="translated">알파 : '1.8.0a1', '1.8.0a2'등</target>
        </trans-unit>
        <trans-unit id="da5e93aa3d78ef4ca7f7e53b7add77cc4b81efd4" translate="yes" xml:space="preserve">
          <source>Also accepts mu and sigma arguments.</source>
          <target state="translated">mu 및 sigma 인수도 허용합니다.</target>
        </trans-unit>
        <trans-unit id="0b7c5f22b134cc3af66091a2f87fc3b22e43c5ef" translate="yes" xml:space="preserve">
          <source>Also allow scalars for indices.</source>
          <target state="translated">인덱스에 스칼라도 허용합니다.</target>
        </trans-unit>
        <trans-unit id="0d90d80696a309c7c8556cc68ea2ea97804da3bb" translate="yes" xml:space="preserve">
          <source>Also known as the Lorentz distribution.</source>
          <target state="translated">Lorentz 분포라고도합니다.</target>
        </trans-unit>
        <trans-unit id="5314418ba7fc916c6ffe45c7e85e8067bf9357ce" translate="yes" xml:space="preserve">
          <source>Also known as the power function distribution.</source>
          <target state="translated">전력 함수 분포라고도합니다.</target>
        </trans-unit>
        <trans-unit id="5d179db72fc2e3131c342afeebad7f69e76c4889" translate="yes" xml:space="preserve">
          <source>Also note that, in general, the result of integrating a C-series needs to be &amp;ldquo;reprojected&amp;rdquo; onto the C-series basis set. Thus, typically, the result of this function is &amp;ldquo;unintuitive,&amp;rdquo; albeit correct; see Examples section below.</source>
          <target state="translated">또한 일반적으로 C 시리즈 통합 결과는 C 시리즈 기준 세트에 &quot;재 투영&quot;되어야합니다. 따라서 일반적으로이 기능의 결과는 정확하지만 &quot;직관적이지 않습니다&quot;. 아래 예 섹션을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="5069b3090820edc390ac4ea5af79b726578db6bc" translate="yes" xml:space="preserve">
          <source>Also recognize that &lt;code&gt;x[[1,2,3]]&lt;/code&gt; will trigger advanced indexing, whereas due to the deprecated Numeric compatibility mentioned above, &lt;code&gt;x[[1,2,slice(None)]]&lt;/code&gt; will trigger basic slicing.</source>
          <target state="translated">또한 &lt;code&gt;x[[1,2,3]]&lt;/code&gt; 은 고급 인덱싱을 트리거하는 반면 위에 언급되지 않은 Numeric 호환성으로 인해 &lt;code&gt;x[[1,2,slice(None)]]&lt;/code&gt; 은 기본 슬라이싱을 트리거합니다.</target>
        </trans-unit>
        <trans-unit id="40ce80b72a9c1717eb089ed66d73f56dd1035944" translate="yes" xml:space="preserve">
          <source>Also works for complex numbers (and thus can be used to map any line in the complex plane to any other line therein).</source>
          <target state="translated">복소수에도 적용됩니다 (따라서 복소 평면의 모든 선을 그 안의 다른 선에 매핑하는 데 사용할 수 있음).</target>
        </trans-unit>
        <trans-unit id="ae4104c7b18b9b6bb1e8bc147a280cadca288f5d" translate="yes" xml:space="preserve">
          <source>Also works for complex numbers, and thus can be used to calculate the parameters required to map any line in the complex plane to any other line therein.</source>
          <target state="translated">복소수에도 적용되므로 복소 평면의 모든 선을 그 안에있는 다른 선에 매핑하는 데 필요한 매개 변수를 계산하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0f352a3bcd45d367a7b48fa8429730ec7b58156e" translate="yes" xml:space="preserve">
          <source>Also, when invoking the entire SciPy test suite, your tests will be found and run:</source>
          <target state="translated">또한 전체 SciPy 테스트 스위트를 호출 할 때 테스트를 찾아서 실행합니다.</target>
        </trans-unit>
        <trans-unit id="c1698709727c2d257ee26f16d4cc2df0ac59e987" translate="yes" xml:space="preserve">
          <source>Alternate output array in which to place the result. It must have the same shape as the expected output and its type is preserved (e.g., if &lt;code&gt;dtype(out)&lt;/code&gt; is float, the result will consist of 0.0&amp;rsquo;s and 1.0&amp;rsquo;s). See &lt;code&gt;doc.ufuncs&lt;/code&gt; (Section &amp;ldquo;Output arguments&amp;rdquo;) for more details.</source>
          <target state="translated">결과를 배치 할 대체 출력 배열입니다. 예상 출력과 모양이 동일해야하며 유형이 유지됩니다 (예 : &lt;code&gt;dtype(out)&lt;/code&gt; 이 부동이면 결과는 0.0과 1.0으로 구성됨 ). 자세한 내용은 &lt;code&gt;doc.ufuncs&lt;/code&gt; (섹션&amp;ldquo;출력 인수&amp;rdquo;)를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="e7d8cfa461bbd4723af0411cedff8e47a335d9d0" translate="yes" xml:space="preserve">
          <source>Alternate output array in which to place the result. It must have the same shape as the expected output and its type is preserved (e.g., if it is of type float, then it will remain so, returning 1.0 for True and 0.0 for False, regardless of the type of &lt;code&gt;a&lt;/code&gt;). See &lt;code&gt;doc.ufuncs&lt;/code&gt; (Section &amp;ldquo;Output arguments&amp;rdquo;) for details.</source>
          <target state="translated">결과를 배치 할 대체 출력 배열입니다. 예상 출력과 모양이 동일해야하며 유형이 유지됩니다 (예 : float 유형 인 &lt;code&gt;a&lt;/code&gt; ). 유형에 관계없이 True의 경우 1.0, False의 경우 0.0을 반환 합니다. 자세한 내용은 &lt;code&gt;doc.ufuncs&lt;/code&gt; (섹션&amp;ldquo;출력 인수&amp;rdquo;)를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="4866e784e2d9af93d956076b9ca654f019b24a96" translate="yes" xml:space="preserve">
          <source>Alternate output array in which to place the result. It must have the same shape as the expected output, but the type is cast if necessary.</source>
          <target state="translated">결과를 배치 할 대체 출력 배열입니다. 예상 출력과 모양이 같아야하지만 필요한 경우 유형이 캐스트됩니다.</target>
        </trans-unit>
        <trans-unit id="cb1ad439f43dc00d7ef73618d741c98ced923654" translate="yes" xml:space="preserve">
          <source>Alternate output array in which to place the result. The default is &lt;code&gt;None&lt;/code&gt;. If provided, it must have the same shape as the expected output, but the type will be cast if necessary. See &lt;code&gt;doc.ufuncs&lt;/code&gt; for details. The casting of NaN to integer can yield unexpected results.</source>
          <target state="translated">결과를 배치 할 대체 출력 배열입니다. 기본값은 &lt;code&gt;None&lt;/code&gt; 입니다. 제공되는 경우 예상 출력과 모양이 같아야하지만 필요한 경우 유형이 캐스팅됩니다. 자세한 내용은 &lt;code&gt;doc.ufuncs&lt;/code&gt; 를 참조하십시오. NaN을 정수로 캐스팅하면 예기치 않은 결과가 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a1df7e48a8694bc511c33f4fdb83c6299c349bb3" translate="yes" xml:space="preserve">
          <source>Alternate output array in which to place the result. The default is &lt;code&gt;None&lt;/code&gt;; if provided, it must have the same shape as the expected output, but the type will be cast if necessary. See &lt;code&gt;doc.ufuncs&lt;/code&gt; for details.</source>
          <target state="translated">결과를 배치 할 대체 출력 배열입니다. 디폴트는 &lt;code&gt;None&lt;/code&gt; 입니다 . 제공되는 경우 예상 출력과 모양이 같아야하지만 필요한 경우 유형이 캐스트됩니다. 자세한 내용은 &lt;code&gt;doc.ufuncs&lt;/code&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="ad525857dfba045e849cea18042cc3d7880b99c2" translate="yes" xml:space="preserve">
          <source>Alternately, one can omit the seed parameter and set the &lt;code&gt;key&lt;/code&gt; and &lt;code&gt;counter&lt;/code&gt; directly.</source>
          <target state="translated">또는 seed 매개 변수를 생략하고 &lt;code&gt;key&lt;/code&gt; 와 &lt;code&gt;counter&lt;/code&gt; 직접 설정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="04c50d39f026457c3ef039adee4c7d2e01334bf3" translate="yes" xml:space="preserve">
          <source>Alternative output array in which to place the result. If size is not None, it must have the same shape as the provided size and must match the type of the output values.</source>
          <target state="translated">결과를 배치 할 대체 출력 배열입니다. size가 None이 아닌 경우 제공된 크기와 모양이 같아야하며 출력 값의 유형과 일치해야합니다.</target>
        </trans-unit>
        <trans-unit id="ac126422935264a529db37a224ca2732607cef38" translate="yes" xml:space="preserve">
          <source>Alternative output array in which to place the result. It must have the same shape and buffer length as the expected output but the type of the resulting values will be cast if necessary.</source>
          <target state="translated">결과를 배치 할 대체 출력 배열입니다. 예상 출력과 모양 및 버퍼 길이가 같아야하지만 필요한 경우 결과 값의 유형이 캐스트됩니다.</target>
        </trans-unit>
        <trans-unit id="e863787368c91b7bab7460b77df3b49a02452a31" translate="yes" xml:space="preserve">
          <source>Alternative output array in which to place the result. It must have the same shape and buffer length as the expected output but the type will be cast if necessary.</source>
          <target state="translated">결과를 배치 할 대체 출력 배열입니다. 예상 출력과 모양 및 버퍼 길이가 같아야하지만 필요한 경우 유형이 캐스트됩니다.</target>
        </trans-unit>
        <trans-unit id="9008d4b2e922f165a265eb88d277e1ffec09130a" translate="yes" xml:space="preserve">
          <source>Alternative output array in which to place the result. It must have the same shape and buffer length as the expected output but the type will be cast if necessary. See &lt;code&gt;doc.ufuncs&lt;/code&gt; (Section &amp;ldquo;Output arguments&amp;rdquo;) for more details.</source>
          <target state="translated">결과를 배치 할 대체 출력 배열입니다. 예상 출력과 모양 및 버퍼 길이가 같아야하지만 필요한 경우 유형이 캐스트됩니다. 자세한 내용은 &lt;code&gt;doc.ufuncs&lt;/code&gt; (섹션&amp;ldquo;출력 인수&amp;rdquo;)를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="6716188c035c63d861379b98db31dc6a05b5e2ca" translate="yes" xml:space="preserve">
          <source>Alternative output array in which to place the result. It must have the same shape and buffer length as the expected output, but the type (of the output) will be cast if necessary.</source>
          <target state="translated">결과를 배치 할 대체 출력 배열입니다. 예상 출력과 모양 및 버퍼 길이가 같아야하지만 필요한 경우 출력 유형이 캐스트됩니다.</target>
        </trans-unit>
        <trans-unit id="0a76cb94a0ca7efaae715d349afff176965d63b9" translate="yes" xml:space="preserve">
          <source>Alternative output array in which to place the result. It must have the same shape and buffer length as the expected output, but the type of the output values will be cast if necessary.</source>
          <target state="translated">결과를 배치 할 대체 출력 배열입니다. 예상 출력과 모양 및 버퍼 길이가 같아야하지만 필요한 경우 출력 값 유형이 캐스트됩니다.</target>
        </trans-unit>
        <trans-unit id="c295d74f775619fe463f057ab1dbd08a7d79f8f7" translate="yes" xml:space="preserve">
          <source>Alternative output array in which to place the result. It must have the same shape as the expected output but the type (of the calculated values) will be cast if necessary.</source>
          <target state="translated">결과를 배치 할 대체 출력 배열입니다. 예상 출력과 모양이 같아야하지만 필요한 경우 계산 된 값의 유형이 전송됩니다.</target>
        </trans-unit>
        <trans-unit id="61a2880769e0fb1df50a4ab9060f58e553c38840" translate="yes" xml:space="preserve">
          <source>Alternative output array in which to place the result. It must have the same shape as the expected output but the type will be cast if necessary.</source>
          <target state="translated">결과를 배치 할 대체 출력 배열입니다. 예상 출력과 모양이 같아야하지만 필요한 경우 유형이 캐스팅됩니다.</target>
        </trans-unit>
        <trans-unit id="43b99c7a8d7488b79863b62ea908025b20096c8f" translate="yes" xml:space="preserve">
          <source>Alternative output array in which to place the result. It must have the same shape as the expected output, but the type of the output values will be cast if necessary.</source>
          <target state="translated">결과를 배치 할 대체 출력 배열입니다. 예상 출력과 모양이 같아야하지만 필요한 경우 출력 값 유형이 캐스트됩니다.</target>
        </trans-unit>
        <trans-unit id="fd666e1b61b4360073157ecd0d0fcb9aaf5ef0cb" translate="yes" xml:space="preserve">
          <source>Alternative output array in which to place the result. It must have the same shape as the expected output, but the type of the output values will be cast if necessary. See &lt;code&gt;doc.ufuncs&lt;/code&gt; (Section &amp;ldquo;Output arguments&amp;rdquo;) for details.</source>
          <target state="translated">결과를 배치 할 대체 출력 배열입니다. 예상 출력과 모양이 같아야하지만 필요한 경우 출력 값 유형이 캐스트됩니다. 자세한 내용은 &lt;code&gt;doc.ufuncs&lt;/code&gt; (섹션&amp;ldquo;출력 인수&amp;rdquo;)를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="886dc56850e1cdcb4b242ab241178dd7eddb1737" translate="yes" xml:space="preserve">
          <source>Alternative output array in which to place the result. Must be of the same shape and buffer length as the expected output.</source>
          <target state="translated">결과를 배치 할 대체 출력 배열입니다. 예상 출력과 모양 및 버퍼 길이가 같아야합니다.</target>
        </trans-unit>
        <trans-unit id="30fc9cbd185de6b1e0ea1c76efbbd7a9e0eec0f8" translate="yes" xml:space="preserve">
          <source>Alternative output array in which to place the result. Must be of the same shape and buffer length as the expected output. See &lt;code&gt;doc.ufuncs&lt;/code&gt; (Section &amp;ldquo;Output arguments&amp;rdquo;) for more details.</source>
          <target state="translated">결과를 배치 할 대체 출력 배열입니다. 예상 출력과 모양 및 버퍼 길이가 같아야합니다. 자세한 내용은 &lt;code&gt;doc.ufuncs&lt;/code&gt; (섹션&amp;ldquo;출력 인수&amp;rdquo;)를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="b0988f7b666b0761e9579b2bdb1096aad1df99ee" translate="yes" xml:space="preserve">
          <source>Alternatively, &lt;a href=&quot;#numpy.testing.assert_raises&quot;&gt;&lt;code&gt;assert_raises&lt;/code&gt;&lt;/a&gt; can be used as a context manager:</source>
          <target state="translated">또는 &lt;a href=&quot;#numpy.testing.assert_raises&quot;&gt; &lt;code&gt;assert_raises&lt;/code&gt; &lt;/a&gt; 를 컨텍스트 관리자로 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="042b85098c25d452344f7eaee4b5c7db2499e054" translate="yes" xml:space="preserve">
          <source>Alternatively, &lt;code&gt;Philox&lt;/code&gt; can be used in parallel applications by using a sequence of distinct keys where each instance uses different key.</source>
          <target state="translated">또는 &lt;code&gt;Philox&lt;/code&gt; 는 각 인스턴스가 다른 키를 사용하는 일련의 고유 키를 사용하여 병렬 애플리케이션에서 사용될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f0623427bd96685461eb8fa62b01f63338db5ece" translate="yes" xml:space="preserve">
          <source>Alternatively, calling:</source>
          <target state="translated">또는 다음을 호출하십시오.</target>
        </trans-unit>
        <trans-unit id="603108a6af86b03c6a3e370901679f4bbc10b9d8" translate="yes" xml:space="preserve">
          <source>Alternatively, can be used as a context manager like &lt;a href=&quot;numpy.testing.assert_raises#numpy.testing.assert_raises&quot;&gt;&lt;code&gt;assert_raises&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">또는 &lt;a href=&quot;numpy.testing.assert_raises#numpy.testing.assert_raises&quot;&gt; &lt;code&gt;assert_raises&lt;/code&gt; &lt;/a&gt; 와 같은 컨텍스트 관리자로 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="64d1b2b8f8933f7c73a15d5c48954079a5c5f378" translate="yes" xml:space="preserve">
          <source>Alternatively, if &lt;code&gt;obj.__array_ufunc__&lt;/code&gt; is set to &lt;a href=&quot;https://docs.python.org/dev/library/constants.html#None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt;, then as a special case, special methods like &lt;code&gt;ndarray.__add__&lt;/code&gt; will notice this and &lt;em&gt;unconditionally&lt;/em&gt; raise &lt;a href=&quot;https://docs.python.org/dev/library/exceptions.html#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;. This is useful if you want to create objects that interact with arrays via binary operations, but are not themselves arrays. For example, a units handling system might have an object &lt;code&gt;m&lt;/code&gt; representing the &amp;ldquo;meters&amp;rdquo; unit, and want to support the syntax &lt;code&gt;arr * m&lt;/code&gt; to represent that the array has units of &amp;ldquo;meters&amp;rdquo;, but not want to otherwise interact with arrays via ufuncs or otherwise. This can be done by setting &lt;code&gt;__array_ufunc__ = None&lt;/code&gt; and defining &lt;code&gt;__mul__&lt;/code&gt; and &lt;code&gt;__rmul__&lt;/code&gt; methods. (Note that this means that writing an &lt;code&gt;__array_ufunc__&lt;/code&gt; that always returns &lt;a href=&quot;https://docs.python.org/dev/library/constants.html#NotImplemented&quot;&gt;&lt;code&gt;NotImplemented&lt;/code&gt;&lt;/a&gt; is not quite the same as setting &lt;code&gt;__array_ufunc__ = None&lt;/code&gt;: in the former case, &lt;code&gt;arr + obj&lt;/code&gt; will raise &lt;a href=&quot;https://docs.python.org/dev/library/exceptions.html#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;, while in the latter case it is possible to define a &lt;code&gt;__radd__&lt;/code&gt; method to prevent this.)</source>
          <target state="translated">경우 또는, &lt;code&gt;obj.__array_ufunc__&lt;/code&gt; 설정되어 &lt;a href=&quot;https://docs.python.org/dev/library/constants.html#None&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt; , 다음 특별한 경우로, 같은 특별한 방법 &lt;code&gt;ndarray.__add__&lt;/code&gt; 이것과 알 &lt;em&gt;무조건&lt;/em&gt; 인상 &lt;a href=&quot;https://docs.python.org/dev/library/exceptions.html#TypeError&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; . 이진 연산을 통해 배열과 상호 작용하지만 자체 배열이 아닌 객체를 생성하려는 경우에 유용합니다. 예를 들어, 단위 처리 시스템은 &quot;meters&quot;단위를 나타내는 객체 &lt;code&gt;m&lt;/code&gt; 을 가질 수 있고 배열에 &quot;meters&quot;단위가 있음을 나타내는 &lt;code&gt;arr * m&lt;/code&gt; 구문을 지원 하지만 ufuncs를 통해 배열과 상호 작용하지 않으려는 경우 그렇지 않으면. &lt;code&gt;__array_ufunc__ = None&lt;/code&gt; 을 설정 하고 &lt;code&gt;__mul__&lt;/code&gt; 을 정의하면됩니다 .및 &lt;code&gt;__rmul__&lt;/code&gt; 메소드. (참고한다는 쓰는 것이이 방법 &lt;code&gt;__array_ufunc__&lt;/code&gt; 것을 항상 리턴 &lt;a href=&quot;https://docs.python.org/dev/library/constants.html#NotImplemented&quot;&gt; &lt;code&gt;NotImplemented&lt;/code&gt; 하는&lt;/a&gt; 설정과 완전히 동일하지 &lt;code&gt;__array_ufunc__ = None&lt;/code&gt; : 전자의 경우 &lt;code&gt;arr + obj&lt;/code&gt; 올릴 &lt;a href=&quot;https://docs.python.org/dev/library/exceptions.html#TypeError&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; 후자의 경우에이 정의하는 것이 가능하지만, &lt;code&gt;__radd__&lt;/code&gt; 의 에 방법 이것을 방지하십시오.)</target>
        </trans-unit>
        <trans-unit id="0e228119d8236b4e4d18e3b2e104d4d85e550ff8" translate="yes" xml:space="preserve">
          <source>Although we provide the &lt;a href=&quot;bit_generators/mt19937#numpy.random.mt19937.MT19937&quot;&gt;&lt;code&gt;MT19937&lt;/code&gt;&lt;/a&gt; BitGenerator for use independent of &lt;a href=&quot;#numpy.random.mtrand.RandomState&quot;&gt;&lt;code&gt;RandomState&lt;/code&gt;&lt;/a&gt;, note that its default seeding uses &lt;a href=&quot;bit_generators/generated/numpy.random.seedsequence#numpy.random.SeedSequence&quot;&gt;&lt;code&gt;SeedSequence&lt;/code&gt;&lt;/a&gt; rather than the legacy seeding algorithm. &lt;a href=&quot;#numpy.random.mtrand.RandomState&quot;&gt;&lt;code&gt;RandomState&lt;/code&gt;&lt;/a&gt; will use the legacy seeding algorithm. The methods to use the legacy seeding algorithm are currently private as the main reason to use them is just to implement &lt;a href=&quot;#numpy.random.mtrand.RandomState&quot;&gt;&lt;code&gt;RandomState&lt;/code&gt;&lt;/a&gt;. However, one can reset the state of &lt;a href=&quot;bit_generators/mt19937#numpy.random.mt19937.MT19937&quot;&gt;&lt;code&gt;MT19937&lt;/code&gt;&lt;/a&gt; using the state of the &lt;a href=&quot;#numpy.random.mtrand.RandomState&quot;&gt;&lt;code&gt;RandomState&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">우리는 할 수 있지만 &lt;a href=&quot;bit_generators/mt19937#numpy.random.mt19937.MT19937&quot;&gt; &lt;code&gt;MT19937&lt;/code&gt; &lt;/a&gt; 사용의 독립을 위해 BitGenerator을 &lt;a href=&quot;#numpy.random.mtrand.RandomState&quot;&gt; &lt;code&gt;RandomState&lt;/code&gt; &lt;/a&gt; , 참고 기본 파종 용도는 것을 &lt;a href=&quot;bit_generators/generated/numpy.random.seedsequence#numpy.random.SeedSequence&quot;&gt; &lt;code&gt;SeedSequence&lt;/code&gt; &lt;/a&gt; 기존 뿌리기 알고리즘보다는. &lt;a href=&quot;#numpy.random.mtrand.RandomState&quot;&gt; &lt;code&gt;RandomState&lt;/code&gt; &lt;/a&gt; 는 레거시 시드 알고리즘을 사용합니다. 기존 시드 알고리즘을 사용하는 방법은 구현되어이를 사용하는 주된 이유로서 현재 비공개 있습니다 &lt;a href=&quot;#numpy.random.mtrand.RandomState&quot;&gt; &lt;code&gt;RandomState&lt;/code&gt; 을&lt;/a&gt; . 그러나, 하나의 상태를 재설정 할 수 있습니다 &lt;a href=&quot;bit_generators/mt19937#numpy.random.mt19937.MT19937&quot;&gt; &lt;code&gt;MT19937&lt;/code&gt; 을&lt;/a&gt; 의 상태 사용 &lt;a href=&quot;#numpy.random.mtrand.RandomState&quot;&gt; &lt;code&gt;RandomState&lt;/code&gt; 를&lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="dcc9ccd559a420363c97ebc977b2af5b809d20bf" translate="yes" xml:space="preserve">
          <source>Always returns False if &lt;code&gt;x&lt;/code&gt; isn&amp;rsquo;t a MaskedArray.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; 가 MaskedArray가 아닌 경우 항상 False를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="1b6227067f2d29f54359191689a5ac01ab8ecb4c" translate="yes" xml:space="preserve">
          <source>Always returns a sorted complex array.</source>
          <target state="translated">정렬 된 복합 배열을 항상 반환합니다.</target>
        </trans-unit>
        <trans-unit id="7c68db5bc6e63b5b5bb435069771f8f296cb78c3" translate="yes" xml:space="preserve">
          <source>Among other things that are made possible is one can create a new array metadata object that uses the same data buffer to create a new view of that data buffer that has a different interpretation of the buffer (e.g., different shape, offset, byte order, strides, etc) but shares the same data bytes. Many operations in numpy do just this such as slices. Other operations, such as transpose, don&amp;rsquo;t move data elements around in the array, but rather change the information about the shape and strides so that the indexing of the array changes, but the data in the doesn&amp;rsquo;t move.</source>
          <target state="translated">가능한 다른 것들 중에는 동일한 데이터 버퍼를 사용하여 버퍼에 대한 다른 해석 (예 : 다른 모양, 오프셋, 바이트 순서, 보폭 등)이지만 동일한 데이터 바이트를 공유합니다. numpy의 많은 작업은 슬라이스와 같이 이것을 수행합니다. 조옮김과 같은 다른 작업은 배열에서 데이터 요소를 이동하지 않고 배열의 색인이 변경되도록 모양과 보폭에 대한 정보를 변경하지만 데이터는 이동하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="d580c4489c2c610aab44ce0ad58b3f097208f00d" translate="yes" xml:space="preserve">
          <source>Amount paid against the loan changes. The &lt;code&gt;per&lt;/code&gt; is the period of interest.</source>
          <target state="translated">대출 변경에 대해 지불 한 금액입니다. &lt;code&gt;per&lt;/code&gt; 관심의 기간입니다.</target>
        </trans-unit>
        <trans-unit id="99690d58d4abd10cd0938a7adcb56ded08ef66ad" translate="yes" xml:space="preserve">
          <source>An</source>
          <target state="translated">An</target>
        </trans-unit>
        <trans-unit id="acae2de70c42b720bf5497e24967979b922bd47e" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;generated/numpy.ndarray#numpy.ndarray&quot;&gt;&lt;code&gt;ndarray&lt;/code&gt;&lt;/a&gt; is a (usually fixed-size) multidimensional container of items of the same type and size. The number of dimensions and items in an array is defined by its &lt;a href=&quot;generated/numpy.ndarray.shape#numpy.ndarray.shape&quot;&gt;&lt;code&gt;shape&lt;/code&gt;&lt;/a&gt;, which is a &lt;a href=&quot;https://docs.python.org/dev/library/stdtypes.html#tuple&quot;&gt;&lt;code&gt;tuple&lt;/code&gt;&lt;/a&gt; of &lt;em&gt;N&lt;/em&gt; non-negative integers that specify the sizes of each dimension. The type of items in the array is specified by a separate &lt;a href=&quot;arrays.dtypes#arrays-dtypes&quot;&gt;data-type object (dtype)&lt;/a&gt;, one of which is associated with each ndarray.</source>
          <target state="translated">&lt;a href=&quot;generated/numpy.ndarray#numpy.ndarray&quot;&gt; &lt;code&gt;ndarray&lt;/code&gt; 는&lt;/a&gt; 동일한 종류와 사이즈의 아이템 (일반적으로 고정 된 크기) 다차원 컨테이너이다. 배열의 차원과 항목 수는 각 차원의 크기를 지정하는 &lt;em&gt;N&lt;/em&gt; 개의 음이 아닌 정수 의 &lt;a href=&quot;https://docs.python.org/dev/library/stdtypes.html#tuple&quot;&gt; &lt;code&gt;tuple&lt;/code&gt; &lt;/a&gt; 인 &lt;a href=&quot;generated/numpy.ndarray.shape#numpy.ndarray.shape&quot;&gt; &lt;code&gt;shape&lt;/code&gt; &lt;/a&gt; 정의됩니다 . 배열의 항목 유형은 별도의 &lt;a href=&quot;arrays.dtypes#arrays-dtypes&quot;&gt;데이터 유형 객체 (dtype)&lt;/a&gt; 로 지정되며 그 중 하나는 각 ndarray와 연관됩니다.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="7bc19800098fdeab8e6191cd2c74779ca9496d4b" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;generated/numpy.ndarray#numpy.ndarray&quot;&gt;&lt;code&gt;ndarray&lt;/code&gt;&lt;/a&gt; object has many methods which operate on or with the array in some fashion, typically returning an array result. These methods are briefly explained below. (Each method&amp;rsquo;s docstring has a more complete description.)</source>
          <target state="translated">&lt;a href=&quot;generated/numpy.ndarray#numpy.ndarray&quot;&gt; &lt;code&gt;ndarray&lt;/code&gt; &lt;/a&gt; 객체 또는 일반적으로 배열 결과를 반환 어떤 방식으로 배열 작동 많은 방법이있다. 이러한 방법은 아래에 간단히 설명되어 있습니다. (각 메소드의 docstring에 대한 자세한 설명이 있습니다.)</target>
        </trans-unit>
        <trans-unit id="aa95663d09715fdd85c3c286e62db310ab9bc156" translate="yes" xml:space="preserve">
          <source>An Hermite series class.</source>
          <target state="translated">에르 미트 시리즈 수업.</target>
        </trans-unit>
        <trans-unit id="37ba78634b9174a697f0599ae6f6dc13ecb77ada" translate="yes" xml:space="preserve">
          <source>An HermiteE series class.</source>
          <target state="translated">HermiteE 시리즈 클래스.</target>
        </trans-unit>
        <trans-unit id="774f2ca6463ce8bcd64cdfd525d1845b4ce03eef" translate="yes" xml:space="preserve">
          <source>An N-dimensional array containing samples of a scalar function.</source>
          <target state="translated">스칼라 함수의 샘플을 포함하는 N 차원 배열입니다.</target>
        </trans-unit>
        <trans-unit id="3d538fa8637c715f6bbc2c9c38a813643eb7ae9b" translate="yes" xml:space="preserve">
          <source>An N-dimensional iterator object to index arrays.</source>
          <target state="translated">배열을 인덱스하기위한 N 차원 반복자 객체입니다.</target>
        </trans-unit>
        <trans-unit id="3dd52a8c903e6e44d839c6aa398f48a49b2e9a83" translate="yes" xml:space="preserve">
          <source>An N-dimensional tuple of current coordinates.</source>
          <target state="translated">현재 좌표의 N 차원 튜플입니다.</target>
        </trans-unit>
        <trans-unit id="0469df4347714bf84d92842d69579d7dfabaaa72" translate="yes" xml:space="preserve">
          <source>An additional feature is that the path to a data-file can actually be a function that takes no arguments and returns the actual path(s) to the data-files. This is useful when the data files are generated while building the package.</source>
          <target state="translated">추가 기능은 데이터 파일의 경로가 실제로 인수를 취하지 않고 데이터 파일의 실제 경로를 리턴하는 함수일 수 있다는 것입니다. 패키지를 빌드하는 동안 데이터 파일이 생성 될 때 유용합니다.</target>
        </trans-unit>
        <trans-unit id="10dfa862bcfcc9668a1db552ab4daea86348201e" translate="yes" xml:space="preserve">
          <source>An additional list of paths to look for .ini files can be given to &lt;code&gt;get_info&lt;/code&gt;.</source>
          <target state="translated">.ini 파일을 찾는 추가 경로 목록을 &lt;code&gt;get_info&lt;/code&gt; 에 제공 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="963bad104cdcf2da9f9197c7dd8bbca2134670a8" translate="yes" xml:space="preserve">
          <source>An additional set of variables and observations. &lt;code&gt;y&lt;/code&gt; has the same form as &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="translated">추가 변수 및 관측 세트. &lt;code&gt;y&lt;/code&gt; 는 &lt;code&gt;x&lt;/code&gt; 와 같은 형식 입니다.</target>
        </trans-unit>
        <trans-unit id="290ba89cf67c59979f1b14cebdae08675ffa3872" translate="yes" xml:space="preserve">
          <source>An additional set of variables and observations. &lt;code&gt;y&lt;/code&gt; has the same form as that of &lt;code&gt;m&lt;/code&gt;.</source>
          <target state="translated">추가 변수 및 관측 세트. &lt;code&gt;y&lt;/code&gt; 는 &lt;code&gt;m&lt;/code&gt; 과 형태가 같습니다 .</target>
        </trans-unit>
        <trans-unit id="535d7085464b23925e15a73868df4653982051e0" translate="yes" xml:space="preserve">
          <source>An additional set of variables and observations. &lt;code&gt;y&lt;/code&gt; has the same shape as &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="translated">추가 변수 및 관측 세트. &lt;code&gt;y&lt;/code&gt; 는 &lt;code&gt;x&lt;/code&gt; 와 모양이 같습니다 .</target>
        </trans-unit>
        <trans-unit id="0aadce1a1c3678a4b3a0e8fd514232b417ea179b" translate="yes" xml:space="preserve">
          <source>An alias for the density argument that behaves identically. To avoid confusion with the broken normed argument to &lt;a href=&quot;numpy.histogram#numpy.histogram&quot;&gt;&lt;code&gt;histogram&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;density&lt;/code&gt; should be preferred.</source>
          <target state="translated">동일하게 작동하는 밀도 인수의 별명입니다. 에 깨진 NORMED 인수와 혼란을 방지하기 위해 &lt;a href=&quot;numpy.histogram#numpy.histogram&quot;&gt; &lt;code&gt;histogram&lt;/code&gt; &lt;/a&gt; , &lt;code&gt;density&lt;/code&gt; 선호한다.</target>
        </trans-unit>
        <trans-unit id="2dff9706411c38850b8de8293266d9884231cabd" translate="yes" xml:space="preserve">
          <source>An arbitrary Python function.</source>
          <target state="translated">임의의 파이썬 함수.</target>
        </trans-unit>
        <trans-unit id="caae7edaffe66ab62bffc1b2b0bd2b213c039100" translate="yes" xml:space="preserve">
          <source>An array class with possibly masked values.</source>
          <target state="translated">마스크 된 값이있는 배열 클래스입니다.</target>
        </trans-unit>
        <trans-unit id="4c85e68fd622a0d5a6428884a31f19296d5b57f7" translate="yes" xml:space="preserve">
          <source>An array containing the number of bytes to jump to get to the next element in each dimension.</source>
          <target state="translated">각 차원의 다음 요소로 이동하기 위해 이동할 바이트 수를 포함하는 배열입니다.</target>
        </trans-unit>
        <trans-unit id="54ae13ad9fa748df727082d88d41d03835abae7a" translate="yes" xml:space="preserve">
          <source>An array containing the roots of the polynomial.</source>
          <target state="translated">다항식의 근을 포함하는 배열입니다.</target>
        </trans-unit>
        <trans-unit id="40188341aa1ae4126e28065ab4ae4528efd4ab80" translate="yes" xml:space="preserve">
          <source>An array containing the size of the array in each dimension.</source>
          <target state="translated">각 차원의 배열 크기를 포함하는 배열입니다.</target>
        </trans-unit>
        <trans-unit id="c5525cd97ca2fd0380b69e5fa824c4cb8926190c" translate="yes" xml:space="preserve">
          <source>An array containing the x coordinates of the points to be histogrammed.</source>
          <target state="translated">히스토그램 될 점의 x 좌표를 포함하는 배열입니다.</target>
        </trans-unit>
        <trans-unit id="5e0350b6b12b116d1bc018ccc6e377cd22ea853f" translate="yes" xml:space="preserve">
          <source>An array containing the y coordinates of the points to be histogrammed.</source>
          <target state="translated">히스토그램 될 점의 y 좌표를 포함하는 배열입니다.</target>
        </trans-unit>
        <trans-unit id="1cd97d56d812219b3b28e1a0c52b1ff6cc695c36" translate="yes" xml:space="preserve">
          <source>An array describing the shape and dtype of the required MaskedArray.</source>
          <target state="translated">필요한 MaskedArray의 모양과 dtype을 설명하는 배열입니다.</target>
        </trans-unit>
        <trans-unit id="cf313c17a2dcae5eace0c3bac8edc28ea3d4e63f" translate="yes" xml:space="preserve">
          <source>An array is considered aligned if the memory offsets for all elements and the base offset itself is a multiple of &lt;code&gt;self.itemsize&lt;/code&gt;. Understanding &lt;code&gt;memory-alignment&lt;/code&gt; leads to better performance on most hardware.</source>
          <target state="translated">모든 요소에 대한 메모리 오프셋과 기본 오프셋 자체가 &lt;code&gt;self.itemsize&lt;/code&gt; 의 배수 인 경우 배열은 정렬 된 것으로 간주됩니다 . &lt;code&gt;memory-alignment&lt;/code&gt; 이해 하면 대부분의 하드웨어에서 성능이 향상됩니다.</target>
        </trans-unit>
        <trans-unit id="8d722ed07993e54ee58671613ec6bb989469ec46" translate="yes" xml:space="preserve">
          <source>An array iterator is a simple way to access the elements of an N-dimensional array quickly and efficiently. Section &lt;a href=&quot;#sec-array-iterator&quot;&gt;2&lt;/a&gt; provides more description and examples of this useful approach to looping over an array.</source>
          <target state="translated">배열 반복자는 N 차원 배열의 요소에 빠르고 효율적으로 액세스하는 간단한 방법입니다. &lt;a href=&quot;#sec-array-iterator&quot;&gt;2&lt;/a&gt; 장 에서는 배열을 반복하는이 유용한 방법에 대한 자세한 설명과 예를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="8c8ecafe80193daba2a801115dc110f22a3a74c2" translate="yes" xml:space="preserve">
          <source>An array object represents a multidimensional, homogeneous array of fixed-size items.</source>
          <target state="translated">배열 객체는 고정 된 크기의 항목으로 구성된 다차원의 동종 배열을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="4cce5f6c6a06c1eb7b057cb09fd7ff7ffd616b00" translate="yes" xml:space="preserve">
          <source>An array object represents a multidimensional, homogeneous array of fixed-size items. An associated data-type object describes the format of each element in the array (its byte-order, how many bytes it occupies in memory, whether it is an integer, a floating point number, or something else, etc.)</source>
          <target state="translated">배열 객체는 고정 된 크기의 항목으로 구성된 다차원의 동종 배열을 나타냅니다. 연관된 데이터 유형 객체는 배열에서 각 요소의 형식 (바이트 순서, 메모리에서 차지하는 바이트 수, 정수, 부동 소수점 수 등)을 설명합니다.</target>
        </trans-unit>
        <trans-unit id="8d1e82b5439e905b1ddafb253ce61f57276c43a9" translate="yes" xml:space="preserve">
          <source>An array object satisfying the specified requirements.</source>
          <target state="translated">지정된 요구 사항을 만족하는 배열 객체입니다.</target>
        </trans-unit>
        <trans-unit id="b7bb351e2eb8c7a3b66881caf4f6450b8b6137b9" translate="yes" xml:space="preserve">
          <source>An array of</source>
          <target state="translated">의 배열</target>
        </trans-unit>
        <trans-unit id="5e4c885c1848f9a375fc02dab6bce7ae4010158c" translate="yes" xml:space="preserve">
          <source>An array of dates to consider as invalid dates, no matter which weekday they fall upon. Holiday dates may be specified in any order, and NaT (not-a-time) dates are ignored. This list is saved in a normalized form that is suited for fast calculations of valid days.</source>
          <target state="translated">어떤 요일에 관계없이 유효하지 않은 날짜로 간주 할 날짜 배열입니다. 휴일 날짜는 어떤 순서로도 지정할 수 있으며 NaT (비한시) 날짜는 무시됩니다. 이 목록은 유효한 요일의 빠른 계산에 적합한 표준화 된 형식으로 저장됩니다.</target>
        </trans-unit>
        <trans-unit id="43a99ea190c51364ce40fbff67e226039938f643" translate="yes" xml:space="preserve">
          <source>An array of dates to consider as invalid dates. They may be specified in any order, and NaT (not-a-time) dates are ignored. This list is saved in a normalized form that is suited for fast calculations of valid days.</source>
          <target state="translated">유효하지 않은 날짜로 간주 할 날짜 배열입니다. 그것들은 임의의 순서로 지정 될 수 있으며, NaT (비-시간) 날짜는 무시된다. 이 목록은 유효한 요일의 빠른 계산에 적합한 표준화 된 형식으로 저장됩니다.</target>
        </trans-unit>
        <trans-unit id="e52ec49035d815a8b775d98b8000ec27cfc67177" translate="yes" xml:space="preserve">
          <source>An array of floats to be rounded</source>
          <target state="translated">둥글게 될 수레의 배열</target>
        </trans-unit>
        <trans-unit id="f3de1a372b66bb0f894c2b02cc87913d27ccf3e7" translate="yes" xml:space="preserve">
          <source>An array of function pointers &amp;mdash; one for each data type supported by the ufunc. This is the vector loop that is called to implement the underlying function &lt;em&gt;dims&lt;/em&gt; [0] times. The first argument, &lt;em&gt;args&lt;/em&gt;, is an array of &lt;em&gt;nargs&lt;/em&gt; pointers to behaved memory. Pointers to the data for the input arguments are first, followed by the pointers to the data for the output arguments. How many bytes must be skipped to get to the next element in the sequence is specified by the corresponding entry in the &lt;em&gt;steps&lt;/em&gt; array. The last argument allows the loop to receive extra information. This is commonly used so that a single, generic vector loop can be used for multiple functions. In this case, the actual scalar function to call is passed in as &lt;em&gt;extradata&lt;/em&gt;. The size of this function pointer array is ntypes.</source>
          <target state="translated">함수 포인터의 배열 &amp;mdash; ufunc에서 지원하는 각 데이터 유형마다 하나씩입니다. 이 기본 기능 구현 호출 벡터 루프 &lt;em&gt;어두워&lt;/em&gt; [0] 번. 첫 번째 인수 인 &lt;em&gt;args&lt;/em&gt; 는 동작 메모리에 대한 &lt;em&gt;nargs&lt;/em&gt; 포인터 의 배열입니다 . 입력 인수에 대한 데이터에 대한 포인터가 먼저오고 출력 인수에 대한 데이터에 대한 포인터가옵니다. 시퀀스의 다음 요소에 도달하기 위해 건너 뛰어야하는 바이트 수는 &lt;em&gt;단계&lt;/em&gt; 배열 의 해당 항목으로 지정됩니다 . 마지막 인수는 루프가 추가 정보를 수신 할 수있게합니다. 단일의 일반 벡터 루프를 여러 함수에 사용할 수 있도록 일반적으로 사용됩니다. 이 경우 호출 할 실제 스칼라 함수는 다음과 같이 전달됩니다.&lt;em&gt;extradata&lt;/em&gt; . 이 함수 포인터 배열의 크기는 ntype입니다.</target>
        </trans-unit>
        <trans-unit id="89ccf0c919c71e47e2ddd7bf201588725f440dd1" translate="yes" xml:space="preserve">
          <source>An array of function pointers to a particular sorting algorithms. A particular sorting algorithm is obtained using a key (so far &lt;code&gt;NPY_QUICKSORT&lt;/code&gt;, &lt;code&gt;NPY_HEAPSORT&lt;/code&gt;, and &lt;code&gt;NPY_MERGESORT&lt;/code&gt; are defined). These sorts are done in-place assuming contiguous and aligned data.</source>
          <target state="translated">특정 정렬 알고리즘을 가리키는 함수 배열입니다. 특정 정렬 알고리즘은 키를 사용하여 얻습니다 (지금까지 &lt;code&gt;NPY_QUICKSORT&lt;/code&gt; , &lt;code&gt;NPY_HEAPSORT&lt;/code&gt; 및 &lt;code&gt;NPY_MERGESORT&lt;/code&gt; 가 정의 됨). 이러한 정렬은 연속적이고 정렬 된 데이터를 가정하여 제자리에서 수행됩니다.</target>
        </trans-unit>
        <trans-unit id="e16de626c174b91da42175d30f3d8341b71b66d8" translate="yes" xml:space="preserve">
          <source>An array of function pointers to cast from the current type to all of the other builtin types. Each function casts a contiguous, aligned, and notswapped buffer pointed at by &lt;em&gt;from&lt;/em&gt; to a contiguous, aligned, and notswapped buffer pointed at by &lt;em&gt;to&lt;/em&gt; The number of items to cast is given by &lt;em&gt;n&lt;/em&gt;, and the arguments &lt;em&gt;fromarr&lt;/em&gt; and &lt;em&gt;toarr&lt;/em&gt; are interpreted as PyArrayObjects for flexible arrays to get itemsize information.</source>
          <target state="translated">현재 유형에서 다른 모든 내장 유형으로 캐스트 할 함수 포인터의 배열. 각 기능은 정렬 연속 캐스트 및가 가리키는 버퍼 notswapped &lt;em&gt;에서&lt;/em&gt; 정렬 연속으로하고,가 가리키는 된 버퍼 notswapped &lt;em&gt;에&lt;/em&gt; 의해 주어진다 캐스트 항목의 수 &lt;em&gt;N&lt;/em&gt; 과 인수 &lt;em&gt;fromarr&lt;/em&gt; 및 &lt;em&gt;toarr을&lt;/em&gt; 위한 PyArrayObjects로 해석 유연한 배열로 항목 별 정보를 얻습니다.</target>
        </trans-unit>
        <trans-unit id="e200feb9e53ed4ebf2adb54be5ba987c1cf7059b" translate="yes" xml:space="preserve">
          <source>An array of function pointers to sorting algorithms for this data type. The same sorting algorithms as for sort are available. The indices producing the sort are returned in &lt;code&gt;result&lt;/code&gt; (which must be initialized with indices 0 to &lt;code&gt;length-1&lt;/code&gt; inclusive).</source>
          <target state="translated">이 데이터 유형에 대한 정렬 알고리즘에 대한 함수 포인터의 배열입니다. 정렬과 동일한 정렬 알고리즘을 사용할 수 있습니다. 정렬을 생성하는 인덱스가 &lt;code&gt;result&lt;/code&gt; 로 리턴됩니다 (인덱스 0에서 &lt;code&gt;length-1&lt;/code&gt; 까지 초기화해야 함 ).</target>
        </trans-unit>
        <trans-unit id="4bf461a6da3a9c78b86edef9e37f8d374d2671a0" translate="yes" xml:space="preserve">
          <source>An array of indices into the flattened version of an array of dimensions &lt;code&gt;dims&lt;/code&gt;.</source>
          <target state="translated">차원 배열의 전개 된 버전에 대한 인덱스 배열이 &lt;code&gt;dims&lt;/code&gt; 됩니다.</target>
        </trans-unit>
        <trans-unit id="43a2b96955709f32822d46286842703f4390b599" translate="yes" xml:space="preserve">
          <source>An array of indices or a single index value.</source>
          <target state="translated">인덱스 배열 또는 단일 인덱스 값</target>
        </trans-unit>
        <trans-unit id="c327e0cbb835c3f65406d2930b711dc0438fe097" translate="yes" xml:space="preserve">
          <source>An array of integers or booleans whose elements should be packed to bits.</source>
          <target state="translated">요소를 비트로 묶어야하는 정수 또는 부울 배열입니다.</target>
        </trans-unit>
        <trans-unit id="760cd2caf69b9cf29b19f984123cfb0704600d65" translate="yes" xml:space="preserve">
          <source>An array of integers providing for each dimension the number of bytes that must be skipped to get to the next element in that dimension.</source>
          <target state="translated">각 차원에 대해 해당 차원의 다음 요소로 넘어 가기 위해 건너 뛰어야하는 바이트 수를 제공하는 정수 배열.</target>
        </trans-unit>
        <trans-unit id="44196e580ff225be1ef1476b121c70c9f63af8cb" translate="yes" xml:space="preserve">
          <source>An array of integers providing the shape in each dimension as long as nd</source>
          <target state="translated">nd만큼 긴 각 차원의 모양을 제공하는 정수 배열</target>
        </trans-unit>
        <trans-unit id="62ed90156adc402e959f400c23d7929e6a74e615" translate="yes" xml:space="preserve">
          <source>An array of iterator objects that holds the iterators for the arrays to be broadcast together. On return, the iterators are adjusted for broadcasting.</source>
          <target state="translated">배열이 함께 브로드 캐스트되도록 반복자를 보유하는 반복자 오브젝트의 배열입니다. 돌아 왔을 때, 반복자는 방송용으로 조정됩니다.</target>
        </trans-unit>
        <trans-unit id="e3e82fd2fdc82899ac97dd9d7069f0c853f214d0" translate="yes" xml:space="preserve">
          <source>An array of numeric data can also be passed.</source>
          <target state="translated">숫자 데이터 배열도 전달할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ece80d1b5df43cd5fed015f36204934c9ec31960" translate="yes" xml:space="preserve">
          <source>An array of pointers to the actual data for the input and output arrays. The input arguments are given first followed by the output arguments.</source>
          <target state="translated">입력 및 출력 배열의 실제 데이터에 대한 포인터 배열입니다. 입력 인수에는 먼저 출력 인수가 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="d47c875bafe38f3ae53b22be1ca5e1e026b9c87a" translate="yes" xml:space="preserve">
          <source>An array of start and end indexes if there are any masked data in the array. If there are no masked data in the array, &lt;code&gt;edges&lt;/code&gt; is a list of the first and last index.</source>
          <target state="translated">어레이에 마스킹 된 데이터가있는 경우 시작 및 종료 인덱스의 배열입니다. 배열에 마스킹 된 데이터가 없으면 &lt;code&gt;edges&lt;/code&gt; 는 첫 번째 인덱스와 마지막 인덱스의 목록입니다.</target>
        </trans-unit>
        <trans-unit id="c7dec96e92acd76ab0b9a5089a0591ab494441f3" translate="yes" xml:space="preserve">
          <source>An array of strings the same shape as &lt;code&gt;arr&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;arr&lt;/code&gt; 와 동일한 모양의 문자열 배열입니다 .</target>
        </trans-unit>
        <trans-unit id="4864cc2ae1f8d0267df4cabfa6aa6a6b4bbde15b" translate="yes" xml:space="preserve">
          <source>An array of the same shape as &lt;code&gt;x&lt;/code&gt;, containing the cube cube-root of each element in &lt;code&gt;x&lt;/code&gt;. If &lt;code&gt;out&lt;/code&gt; was provided, &lt;code&gt;y&lt;/code&gt; is a reference to it. This is a scalar if &lt;code&gt;x&lt;/code&gt; is a scalar.</source>
          <target state="translated">동일한 형상의 배열 &lt;code&gt;x&lt;/code&gt; 의 각 요소의 큐브 형 큐브 루트 함유 &lt;code&gt;x&lt;/code&gt; . 경우 &lt;code&gt;out&lt;/code&gt; 제공하여, &lt;code&gt;y&lt;/code&gt; 이를 참조한다. &lt;code&gt;x&lt;/code&gt; 가 스칼라 인 경우 스칼라입니다.</target>
        </trans-unit>
        <trans-unit id="2dca043d37393a6e2fc85fdd287fdcbcb4dfecc0" translate="yes" xml:space="preserve">
          <source>An array of the same shape as &lt;code&gt;x&lt;/code&gt;, containing the positive square-root of each element in &lt;code&gt;x&lt;/code&gt;. If any element in &lt;code&gt;x&lt;/code&gt; is complex, a complex array is returned (and the square-roots of negative reals are calculated). If all of the elements in &lt;code&gt;x&lt;/code&gt; are real, so is &lt;code&gt;y&lt;/code&gt;, with negative elements returning &lt;code&gt;nan&lt;/code&gt;. If &lt;code&gt;out&lt;/code&gt; was provided, &lt;code&gt;y&lt;/code&gt; is a reference to it. This is a scalar if &lt;code&gt;x&lt;/code&gt; is a scalar.</source>
          <target state="translated">동일한 형상의 배열 &lt;code&gt;x&lt;/code&gt; 의 각 요소의 양의 제곱근 들어, &lt;code&gt;x&lt;/code&gt; . &lt;code&gt;x&lt;/code&gt; 의 어떤 요소 가 복소수이면 복소수 배열이 반환되고 음의 실수의 제곱근이 계산됩니다. &lt;code&gt;x&lt;/code&gt; 의 모든 요소 가 실수이면 &lt;code&gt;y&lt;/code&gt; 도 그렇고 음수 요소는 &lt;code&gt;nan&lt;/code&gt; 을 반환 합니다. 경우 &lt;code&gt;out&lt;/code&gt; 제공하여, &lt;code&gt;y&lt;/code&gt; 이를 참조한다. &lt;code&gt;x&lt;/code&gt; 가 스칼라 인 경우 스칼라입니다.</target>
        </trans-unit>
        <trans-unit id="b73f11faf81ffda921b160f49100211ca44e9e3b" translate="yes" xml:space="preserve">
          <source>An array of the same type as &lt;code&gt;a&lt;/code&gt;, containing the rounded values. Unless &lt;code&gt;out&lt;/code&gt; was specified, a new array is created. A reference to the result is returned.</source>
          <target state="translated">동일한 유형의 배열 반올림 된 값을 포함. &lt;code&gt;out&lt;/code&gt; 을 지정 하지 않으면 새 배열이 작성됩니다. 결과에 대한 참조가 리턴됩니다. &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="979601eabdfd48b8ade710f0f03e8b5a86f0bf28" translate="yes" xml:space="preserve">
          <source>An array of values &lt;code&gt;w_i&lt;/code&gt; weighing each sample &lt;code&gt;(x_i, y_i)&lt;/code&gt;. Weights are normalized to 1 if &lt;code&gt;normed&lt;/code&gt; is True. If &lt;code&gt;normed&lt;/code&gt; is False, the values of the returned histogram are equal to the sum of the weights belonging to the samples falling into each bin.</source>
          <target state="translated">각 샘플을 계량 하는 값의 배열 &lt;code&gt;w_i&lt;/code&gt; &lt;code&gt;(x_i, y_i)&lt;/code&gt; . &lt;code&gt;normed&lt;/code&gt; 이 참 이면 가중치는 1로 정규화됩니다 . 경우 &lt;code&gt;normed&lt;/code&gt; 거짓이고, 반환 히스토그램의 값은 각 빈에 떨어지는 시료에 속하는 가중치의 합과 동일하다.</target>
        </trans-unit>
        <trans-unit id="e086307191e3a610d256fdc031206d0be076bb2f" translate="yes" xml:space="preserve">
          <source>An array of values &lt;code&gt;w_i&lt;/code&gt; weighing each sample &lt;code&gt;(x_i, y_i, z_i, &amp;hellip;)&lt;/code&gt;. Weights are normalized to 1 if normed is True. If normed is False, the values of the returned histogram are equal to the sum of the weights belonging to the samples falling into each bin.</source>
          <target state="translated">각 샘플을 계량 하는 값의 배열 &lt;code&gt;w_i&lt;/code&gt; &lt;code&gt;(x_i, y_i, z_i, &amp;hellip;)&lt;/code&gt; . 표준이 참이면 가중치는 1로 정규화됩니다. normed가 False 인 경우 반환 된 히스토그램의 값은 각 빈에 떨어지는 샘플에 속하는 가중치의 합과 같습니다.</target>
        </trans-unit>
        <trans-unit id="c0ce1ac9c3e01f3e63767874318d5ec35c6c8162" translate="yes" xml:space="preserve">
          <source>An array of weights associated with the values in &lt;code&gt;a&lt;/code&gt;. Each value in &lt;code&gt;a&lt;/code&gt; contributes to the average according to its associated weight. The weights array can either be 1-D (in which case its length must be the size of &lt;code&gt;a&lt;/code&gt; along the given axis) or of the same shape as &lt;code&gt;a&lt;/code&gt;. If &lt;code&gt;weights=None&lt;/code&gt;, then all data in &lt;code&gt;a&lt;/code&gt; are assumed to have a weight equal to one.</source>
          <target state="translated">의 값과 연관된 가중치의 배열 . 각 값 연관된 가중치에 따른 평균에 기여한다. 가중치 배열은 1 차원 (이 경우 길이는 주어진 축의 크기 여야 함 )이거나 &lt;code&gt;a&lt;/code&gt; 와 같은 모양 일 &lt;code&gt;a&lt;/code&gt; 있습니다. &lt;code&gt;weights=None&lt;/code&gt; 인 경우 &lt;code&gt;a&lt;/code&gt; 의 모든 데이터 는 가중치가 1과 같다고 가정합니다. &lt;code&gt;a&lt;/code&gt; &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="91d3b67fb93cc4bc7812921dd986159ce97b0f1e" translate="yes" xml:space="preserve">
          <source>An array of weights, of the same shape as &lt;code&gt;a&lt;/code&gt;. Each value in &lt;code&gt;a&lt;/code&gt; only contributes its associated weight towards the bin count (instead of 1). If &lt;code&gt;density&lt;/code&gt; is True, the weights are normalized, so that the integral of the density over the range remains 1.</source>
          <target state="translated">동일한 형상의 가중치의 배열 . 각 값 &lt;code&gt;a&lt;/code&gt; 단지 (1 대신에) 빈 카운트으로 연관된 가중치에 기여한다. 경우 &lt;code&gt;density&lt;/code&gt; True 인, 가중치는 범위 밀도의 적분 1 남아 그래서, 정규화된다. &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e08534b68e928582028171965f68debd33645b68" translate="yes" xml:space="preserve">
          <source>An array of weights, of the same shape as &lt;code&gt;a&lt;/code&gt;. Each value in &lt;code&gt;a&lt;/code&gt; only contributes its associated weight towards the bin count (instead of 1). This is currently not used by any of the bin estimators, but may be in the future.</source>
          <target state="translated">동일한 형상의 가중치의 배열 . 각 값 &lt;code&gt;a&lt;/code&gt; 단지 (1 대신에) 빈 카운트으로 연관된 가중치에 기여한다. 이것은 현재 빈 추정기에서 사용되지 않지만 앞으로있을 수 있습니다. &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9f66c5b78a1ee6031ffac8fb1c853e09ee03b883" translate="yes" xml:space="preserve">
          <source>An array shaped as &lt;code&gt;a&lt;/code&gt; but with the specified axis removed. Returns a reference to &lt;code&gt;out&lt;/code&gt; if specified.</source>
          <target state="translated">배열 모양 삭제되지 지정된 축. 에 대한 참조를 반환 &lt;code&gt;out&lt;/code&gt; 지정한 경우입니다. &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="28da6e5d441ca894170555ee158c5c43a7ecacb4" translate="yes" xml:space="preserve">
          <source>An array where all elements are equal to zero, except for the &lt;code&gt;k&lt;/code&gt;-th diagonal, whose values are equal to one.</source>
          <target state="translated">값이 1 인 &lt;code&gt;k&lt;/code&gt; 번째 대각선을 제외하고 모든 요소가 0 인 배열 입니다.</target>
        </trans-unit>
        <trans-unit id="1ea1e5537016317a890a5d4a449f9cc2d733ed07" translate="yes" xml:space="preserve">
          <source>An array whose nonzero or True entries indicate the elements of &lt;code&gt;arr&lt;/code&gt; to extract.</source>
          <target state="translated">0이 아닌 또는 True 항목 이 추출 할 &lt;code&gt;arr&lt;/code&gt; 의 요소를 나타내는 배열입니다 .</target>
        </trans-unit>
        <trans-unit id="c9db9bfd04f4def5fd1afc2affd0945adf42512d" translate="yes" xml:space="preserve">
          <source>An array with (possibly) masked elements.</source>
          <target state="translated">마스크 된 요소가있는 배열입니다.</target>
        </trans-unit>
        <trans-unit id="f661a37bc1f34ccd31f28fc314368c36fc3fd521" translate="yes" xml:space="preserve">
          <source>An array with a shape from broadcasting &lt;code&gt;begindates&lt;/code&gt; and &lt;code&gt;enddates&lt;/code&gt; together, containing the number of valid days between the begin and end dates.</source>
          <target state="translated">방송의 형태로 배열 &lt;code&gt;begindates&lt;/code&gt; 및 &lt;code&gt;enddates&lt;/code&gt; 을 (가) 시작 및 종료일 사이 유효 일수를 함유 함께.</target>
        </trans-unit>
        <trans-unit id="da4b7ef06bb85fc991c331148db99f16620489ed" translate="yes" xml:space="preserve">
          <source>An array with a shape from broadcasting &lt;code&gt;dates&lt;/code&gt; and &lt;code&gt;offsets&lt;/code&gt; together, containing the dates with offsets applied.</source>
          <target state="translated">오프셋이 적용된 날짜를 포함하는 브로드 캐스트 &lt;code&gt;dates&lt;/code&gt; 및 &lt;code&gt;offsets&lt;/code&gt; 에서 모양이있는 배열입니다 .</target>
        </trans-unit>
        <trans-unit id="cb96764e2b9c06bb0ff9fb7ca3e50e3f3bfa36d0" translate="yes" xml:space="preserve">
          <source>An array with elements from &lt;code&gt;x&lt;/code&gt; where &lt;code&gt;condition&lt;/code&gt; is True, and elements from &lt;code&gt;y&lt;/code&gt; elsewhere.</source>
          <target state="translated">행 요소 배열 &lt;code&gt;x&lt;/code&gt; &lt;code&gt;condition&lt;/code&gt; 에서 사실이며, 원소 &lt;code&gt;y&lt;/code&gt; 다른.</target>
        </trans-unit>
        <trans-unit id="1229c9f2e1287182eb9a66528204171c6010bc1b" translate="yes" xml:space="preserve">
          <source>An array with ones at and below the given diagonal and zeros elsewhere.</source>
          <target state="translated">지정된 대각선의 위와 아래에 1이 있고 다른 곳에 0이있는 배열입니다.</target>
        </trans-unit>
        <trans-unit id="13f9e7222fb1b0027174f3c545f28e69a270792e" translate="yes" xml:space="preserve">
          <source>An array with the elements of &lt;code&gt;a&lt;/code&gt;, but where values &amp;lt; &lt;code&gt;a_min&lt;/code&gt; are replaced with &lt;code&gt;a_min&lt;/code&gt;, and those &amp;gt; &lt;code&gt;a_max&lt;/code&gt; with &lt;code&gt;a_max&lt;/code&gt;.</source>
          <target state="translated">의 요소 어레이 있지만 값 &amp;lt;여기서 &lt;code&gt;a_min&lt;/code&gt; 로 대체 &lt;code&gt;a_min&lt;/code&gt; , 그&amp;gt; &lt;code&gt;a_max&lt;/code&gt; 와 &lt;code&gt;a_max&lt;/code&gt; . &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d0d81681b563f7cbf7ca14e4beb55c0e61ff30a7" translate="yes" xml:space="preserve">
          <source>An array with the same shape as &lt;code&gt;a&lt;/code&gt;, with the specified axis removed. If &lt;code&gt;a&lt;/code&gt; is a 0-d array, or if &lt;code&gt;axis&lt;/code&gt; is None, a scalar is returned. If an output array is specified, a reference to &lt;code&gt;out&lt;/code&gt; is returned.</source>
          <target state="translated">지정된 축이 제거 된 &lt;code&gt;a&lt;/code&gt; 와 모양이 같은 배열입니다 . 경우 &lt;code&gt;a&lt;/code&gt; 는 0 차원 배열의 경우, 또는 &lt;code&gt;axis&lt;/code&gt; 것도없고, 스칼라가 반환된다. 출력 배열이 지정되면 &lt;code&gt;out&lt;/code&gt; 에 대한 참조 가 리턴됩니다.</target>
        </trans-unit>
        <trans-unit id="9baa9b65de91284b3761237390d81577243ec095" translate="yes" xml:space="preserve">
          <source>An array with the same shape as &lt;code&gt;a&lt;/code&gt;, with the specified axis removed. If &lt;code&gt;a&lt;/code&gt; is a 0-d array, or if axis is None, an ndarray scalar is returned. The same dtype as &lt;code&gt;a&lt;/code&gt; is returned.</source>
          <target state="translated">지정된 축이 제거 된 &lt;code&gt;a&lt;/code&gt; 와 모양이 같은 배열입니다 . 경우 &lt;code&gt;a&lt;/code&gt; 는 0 차원 배열 또는 축 아무도없는 경우, ndarray 스칼라가 반환된다. &lt;code&gt;a&lt;/code&gt; 와 동일한 dtype 이 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="e70abaa821cac7240773cdf6e7844c07f6b75f59" translate="yes" xml:space="preserve">
          <source>An array with the same shape as &lt;code&gt;dates&lt;/code&gt;, containing True for each valid day, and False for each invalid day.</source>
          <target state="translated">유효한 각 요일에 대해 True를, 유효하지 않은 각 요일에 대해 False를 포함하는 &lt;code&gt;dates&lt;/code&gt; 와 모양이 동일한 배열 입니다.</target>
        </trans-unit>
        <trans-unit id="3dd1a7da3ce189a324136cbefbaa56e7594e5b61" translate="yes" xml:space="preserve">
          <source>An array with the same shape as the input array, with the specified axis removed. If the array is a 0-d array, or if &lt;code&gt;axis&lt;/code&gt; is None, a scalar is returned.</source>
          <target state="translated">지정된 축이 제거 된 입력 배열과 모양이 같은 배열입니다. 배열이 0-d 배열이거나 &lt;code&gt;axis&lt;/code&gt; 이 None이면 스칼라가 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="02c2325cc9f9529260815a39ebd69bc396f69b18" translate="yes" xml:space="preserve">
          <source>An array, any object exposing the array interface, an object whose __array__ method returns an array, or any (nested) sequence.</source>
          <target state="translated">배열, 배열 인터페이스를 노출하는 객체, __array__ 메서드가 배열을 반환하는 객체 또는 (중첩 된) 시퀀스</target>
        </trans-unit>
        <trans-unit id="567f786634fc5daa235d994c1657787eea4b779a" translate="yes" xml:space="preserve">
          <source>An array, or list of arrays, each with &lt;code&gt;a.ndim &amp;gt;= 1&lt;/code&gt;. Copies are made only if necessary.</source>
          <target state="translated">각각 &lt;code&gt;a.ndim &amp;gt;= 1&lt;/code&gt; 인 배열 또는 배열 목록 . 필요한 경우에만 사본을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="cba647ea9fdf896d7caaed5b946ba91dc1f4274e" translate="yes" xml:space="preserve">
          <source>An array, or list of arrays, each with &lt;code&gt;a.ndim &amp;gt;= 2&lt;/code&gt;. Copies are avoided where possible, and views with two or more dimensions are returned.</source>
          <target state="translated">각각 &lt;code&gt;a.ndim &amp;gt;= 2&lt;/code&gt; 인 배열 또는 배열 목록입니다 . 가능한 경우 사본을 피하고 2 차원 이상의 뷰가 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="20047f5be3a0546654cf45798129be0ced7cf529" translate="yes" xml:space="preserve">
          <source>An array, or list of arrays, each with &lt;code&gt;a.ndim &amp;gt;= 3&lt;/code&gt;. Copies are avoided where possible, and views with three or more dimensions are returned. For example, a 1-D array of shape &lt;code&gt;(N,)&lt;/code&gt; becomes a view of shape &lt;code&gt;(1, N, 1)&lt;/code&gt;, and a 2-D array of shape &lt;code&gt;(M, N)&lt;/code&gt; becomes a view of shape &lt;code&gt;(M, N, 1)&lt;/code&gt;.</source>
          <target state="translated">각각 &lt;code&gt;a.ndim &amp;gt;= 3&lt;/code&gt; 인 배열 또는 배열 목록 . 가능한 경우 사본을 피하고 3 차원 이상의 뷰가 반환됩니다. 예를 들어, 1 차원 형상 배열 &lt;code&gt;(N,)&lt;/code&gt; 은 형상 &lt;code&gt;(1, N, 1)&lt;/code&gt; 의 뷰가 되고, 2 차원 형상 배열 &lt;code&gt;(M, N)&lt;/code&gt; 은 형상 &lt;code&gt;(M, N, 1)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f2d598faf58dcce518852d1c23ec2af6d3886d1a" translate="yes" xml:space="preserve">
          <source>An assertion is raised if the following condition is not met:</source>
          <target state="translated">다음 조건이 충족되지 않으면 어설 션이 발생합니다.</target>
        </trans-unit>
        <trans-unit id="c3adef5312938abeed5e9919b7facafa03477317" translate="yes" xml:space="preserve">
          <source>An assignment example:</source>
          <target state="translated">과제 예 :</target>
        </trans-unit>
        <trans-unit id="5b8cae1664bf34207082790eecd4cff8bc80d113" translate="yes" xml:space="preserve">
          <source>An authority is a person who can tell you more about something than you really care to know. &amp;mdash; &lt;em&gt;Unknown&lt;/em&gt;</source>
          <target state="translated">권한은 실제로 알고 싶은 것보다 더 많은 것을 말해 줄 수있는 사람입니다. &amp;mdash; &lt;em&gt;알 수 없음&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="88aa14c58828551e162cc4a4661a6843968586b6" translate="yes" xml:space="preserve">
          <source>An empty (tuple) index is a full scalar index into a zero dimensional array. &lt;code&gt;x[()]&lt;/code&gt; returns a &lt;em&gt;scalar&lt;/em&gt; if &lt;code&gt;x&lt;/code&gt; is zero dimensional and a view otherwise. On the other hand &lt;code&gt;x[...]&lt;/code&gt; always returns a view.</source>
          <target state="translated">빈 (튜플) 인덱스는 0 차원 배열에 대한 전체 스칼라 인덱스입니다. &lt;code&gt;x[()]&lt;/code&gt; 는 &lt;code&gt;x&lt;/code&gt; 가 0 차원 이면 &lt;em&gt;스칼라를&lt;/em&gt; 반환하고 그렇지 않으면 뷰를 반환합니다. 반면에 &lt;code&gt;x[...]&lt;/code&gt; 항상 뷰를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="9f8fe74c5bf94bc803b1bb945a029de2c98e9baa" translate="yes" xml:space="preserve">
          <source>An enumeration type indicating how permissive data conversions should be. This is used by the iterator added in NumPy 1.6, and is intended to be used more broadly in a future version.</source>
          <target state="translated">허용되는 데이터 변환 방법을 나타내는 열거 형입니다. 이것은 NumPy 1.6에 추가 된 이터레이터에서 사용되며 향후 버전에서 더 광범위하게 사용될 예정입니다.</target>
        </trans-unit>
        <trans-unit id="f076fadc0ee0a286669da0779a627fc24ddf6053" translate="yes" xml:space="preserve">
          <source>An enumeration type indicating the element order that an array should be interpreted in. When a brand new array is created, generally only &lt;strong&gt;NPY_CORDER&lt;/strong&gt; and &lt;strong&gt;NPY_FORTRANORDER&lt;/strong&gt; are used, whereas when one or more inputs are provided, the order can be based on them.</source>
          <target state="translated">배열을 해석해야하는 요소 순서를 나타내는 열거 형입니다. 새로운 배열을 만들 때는 일반적으로 &lt;strong&gt;NPY_CORDER&lt;/strong&gt; 및 &lt;strong&gt;NPY_FORTRANORDER&lt;/strong&gt; 만 사용되는 반면 하나 이상의 입력이 제공되는 경우 순서는이를 기반으로 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="64e8f4d7015b6070bf3f50c3e64f0fbef756b878" translate="yes" xml:space="preserve">
          <source>An example from Glantz[1], pp 47-40:</source>
          <target state="translated">Glantz [1]의 예, pp 47-40 :</target>
        </trans-unit>
        <trans-unit id="1ad321a0ede9c3a9da071e8e5fe72a77cf61d678" translate="yes" xml:space="preserve">
          <source>An example of a non-associative case:</source>
          <target state="translated">비연 관적 사례의 예 :</target>
        </trans-unit>
        <trans-unit id="92bcbe60f6b1cdb52a7d953fc81ff3369b0f2592" translate="yes" xml:space="preserve">
          <source>An example to show comments</source>
          <target state="translated">주석을 표시하는 예</target>
        </trans-unit>
        <trans-unit id="ab59fb864b641fc21102fa6867c9f294d4d4a6b9" translate="yes" xml:space="preserve">
          <source>An example using a &amp;ldquo;vector&amp;rdquo; of letters:</source>
          <target state="translated">문자의 &quot;벡터&quot;를 사용하는 예 :</target>
        </trans-unit>
        <trans-unit id="ae67380a5d930011edb475d7e700cc0a79c17af2" translate="yes" xml:space="preserve">
          <source>An example where &lt;code&gt;b&lt;/code&gt; is a scalar:</source>
          <target state="translated">예 &lt;code&gt;b&lt;/code&gt; 스칼라이다 :</target>
        </trans-unit>
        <trans-unit id="94faf0f11390e7c87a6db1e320054aa5b39eed5b" translate="yes" xml:space="preserve">
          <source>An example with fixed-width columns</source>
          <target state="translated">너비가 고정 된 예</target>
        </trans-unit>
        <trans-unit id="ee3a8754bce53d43d3e15790bf69e69f40787cb1" translate="yes" xml:space="preserve">
          <source>An extended example taking advantage of the overloading of + and *:</source>
          <target state="translated">+와 *의 과부하를 이용하는 확장 된 예 :</target>
        </trans-unit>
        <trans-unit id="234994ab6fdb07f0421cdf6417fa8d08aaed3974" translate="yes" xml:space="preserve">
          <source>An important thing to be aware of for this iteration is that the order is chosen to match the memory layout of the array instead of using a standard C or Fortran ordering. This is done for access efficiency, reflecting the idea that by default one simply wants to visit each element without concern for a particular ordering. We can see this by iterating over the transpose of our previous array, compared to taking a copy of that transpose in C order.</source>
          <target state="translated">이 반복에 대해 알아야 할 중요한 사항은 표준 C 또는 포트란 순서를 사용하는 대신 배열의 메모리 레이아웃과 일치하도록 순서를 선택한다는 것입니다. 이는 기본적으로 특정 순서에 대한 염려없이 각 요소를 방문하려고한다는 생각을 반영하여 액세스 효율성을 위해 수행됩니다. 이 전치의 사본을 C 순서로 복사하는 것과 비교하여 이전 배열의 전치를 반복하여 이것을 볼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ce8e2f3f33d5cad8aca5e828b4984abc49c8c85d" translate="yes" xml:space="preserve">
          <source>An improved version of Sturges&amp;rsquo; estimator that works better with non-normal datasets.</source>
          <target state="translated">비정규 데이터 세트에서 더 잘 작동하는 Sturges 추정기의 개선 된 버전입니다.</target>
        </trans-unit>
        <trans-unit id="f04b75dbec8a648ba0471c30efe8cb82bf3011bd" translate="yes" xml:space="preserve">
          <source>An improved version of Sturges&amp;rsquo; formula that produces better estimates for non-normal datasets. This estimator attempts to account for the skew of the data.</source>
          <target state="translated">비정규 데이터 집합에 대한 더 나은 추정치를 생성하는 Sturges 수식의 개선 된 버전. 이 추정기는 데이터의 왜곡을 설명하려고합니다.</target>
        </trans-unit>
        <trans-unit id="6c0daf8923a8ff879a417d16aa3697c8609e06f7" translate="yes" xml:space="preserve">
          <source>An index which matches the order of iteration.</source>
          <target state="translated">반복 순서와 일치하는 인덱스입니다.</target>
        </trans-unit>
        <trans-unit id="fd3ef13b14659602803a66f38a194c91b0d16c51" translate="yes" xml:space="preserve">
          <source>An input can be used in the calculation if its size in a particular dimension either matches the output size in that dimension, or has value exactly 1.</source>
          <target state="translated">특정 차원의 크기가 해당 차원의 출력 크기와 일치하거나 정확히 1의 값을 갖는 경우 입력을 계산에 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="24428e2d87c0033a748d11a9f2ce4caa1e91c810" translate="yes" xml:space="preserve">
          <source>An input object.</source>
          <target state="translated">입력 객체.</target>
        </trans-unit>
        <trans-unit id="ccd98d417809c28451b9172282e9fd64d1c41e89" translate="yes" xml:space="preserve">
          <source>An instance of &lt;a href=&quot;#numpy.ma.MaskedArray&quot;&gt;&lt;code&gt;MaskedArray&lt;/code&gt;&lt;/a&gt; can be thought as the combination of several elements:</source>
          <target state="translated">&lt;a href=&quot;#numpy.ma.MaskedArray&quot;&gt; &lt;code&gt;MaskedArray&lt;/code&gt; &lt;/a&gt; 의 인스턴스는 여러 요소의 조합으로 생각할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="cc6e3d42720c490f4a7b292acd6a9d04e387f93f" translate="yes" xml:space="preserve">
          <source>An instance of &lt;code&gt;numpy.lib.index_tricks.nd_grid&lt;/code&gt; which returns an dense (or fleshed out) mesh-grid when indexed, so that each returned argument has the same shape. The dimensions and number of the output arrays are equal to the number of indexing dimensions. If the step length is not a complex number, then the stop is not inclusive.</source>
          <target state="translated">&lt;code&gt;numpy.lib.index_tricks.nd_grid&lt;/code&gt; 의 인스턴스는 인덱싱 될 때 밀도가 높은 (또는 뭉친 ) 메쉬 그리드를 반환하므로 반환 된 각 인수의 모양이 동일합니다. 출력 배열의 차원과 수는 인덱싱 차원의 수와 같습니다. 단계 길이가 복소수가 아닌 경우 정지는 포함되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="634a502415ebc5263dc90361e50dd67e1f0e70b8" translate="yes" xml:space="preserve">
          <source>An instance of &lt;code&gt;numpy.lib.index_tricks.nd_grid&lt;/code&gt; which returns an open (i.e. not fleshed out) mesh-grid when indexed, so that only one dimension of each returned array is greater than 1. The dimension and number of the output arrays are equal to the number of indexing dimensions. If the step length is not a complex number, then the stop is not inclusive.</source>
          <target state="translated">&lt;code&gt;numpy.lib.index_tricks.nd_grid&lt;/code&gt; 의 인스턴스는 색인을 생성 할 때 열린 (즉, 다듬지 않은) 메쉬 그리드를 반환하여 반환 된 각 배열의 한 차원 만 1보다 큽니다. 출력 배열의 차원과 수는 같습니다 인덱싱 차원 수 단계 길이가 복소수가 아닌 경우 정지는 포함되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="3ea316e4ad89d0b127e75fd6f9a3da36dffed3ba" translate="yes" xml:space="preserve">
          <source>An instance of class &lt;a href=&quot;generated/numpy.ndarray#numpy.ndarray&quot;&gt;&lt;code&gt;ndarray&lt;/code&gt;&lt;/a&gt; consists of a contiguous one-dimensional segment of computer memory (owned by the array, or by some other object), combined with an indexing scheme that maps &lt;em&gt;N&lt;/em&gt; integers into the location of an item in the block. The ranges in which the indices can vary is specified by the &lt;a href=&quot;generated/numpy.ndarray.shape#numpy.ndarray.shape&quot;&gt;&lt;code&gt;shape&lt;/code&gt;&lt;/a&gt; of the array. How many bytes each item takes and how the bytes are interpreted is defined by the &lt;a href=&quot;arrays.dtypes#arrays-dtypes&quot;&gt;data-type object&lt;/a&gt; associated with the array.</source>
          <target state="translated">&lt;a href=&quot;generated/numpy.ndarray#numpy.ndarray&quot;&gt; &lt;code&gt;ndarray&lt;/code&gt; &lt;/a&gt; 클래스의 인스턴스는 &lt;em&gt;N 개의&lt;/em&gt; 정수를 블록의 항목 위치에 매핑하는 인덱싱 체계와 결합 된 컴퓨터 메모리의 연속적인 1 차원 세그먼트 (배열 또는 다른 객체가 소유) 로 구성됩니다. 인덱스가 변할 수있는 범위 는 배열 의 &lt;a href=&quot;generated/numpy.ndarray.shape#numpy.ndarray.shape&quot;&gt; &lt;code&gt;shape&lt;/code&gt; &lt;/a&gt; 으로 지정됩니다 . 각 항목이 차지하는 바이트 수와 바이트를 해석하는 방법 은 배열과 연관된 &lt;a href=&quot;arrays.dtypes#arrays-dtypes&quot;&gt;데이터 유형 객체에&lt;/a&gt; 의해 정의됩니다 .</target>
        </trans-unit>
        <trans-unit id="6e1c5ac8d50b25041dc87f2c7519eb1a86058078" translate="yes" xml:space="preserve">
          <source>An integer array whose elements are indices into the flattened version of an array of dimensions &lt;code&gt;shape&lt;/code&gt;. Before version 1.6.0, this function accepted just one index value.</source>
          <target state="translated">요소가도 지수에 정수 배열 차원 배열의 버전 편평 &lt;code&gt;shape&lt;/code&gt; . 버전 1.6.0 이전에는이 ​​함수가 하나의 인덱스 값만 허용했습니다.</target>
        </trans-unit>
        <trans-unit id="4276a3e1422ad086a54d759953deada7066bbc35" translate="yes" xml:space="preserve">
          <source>An integer as a dimension name freezes that dimension to the value.</source>
          <target state="translated">차원 이름의 정수는 해당 차원을 값으로 고정합니다.</target>
        </trans-unit>
        <trans-unit id="1fa126ddddd0a6a8da1f0e66c4d42624e8184e08" translate="yes" xml:space="preserve">
          <source>An integer offset into the array data region. This can only be used when data is &lt;code&gt;None&lt;/code&gt; or returns a &lt;code&gt;buffer&lt;/code&gt; object.</source>
          <target state="translated">배열 데이터 영역으로의 정수 오프셋입니다. 데이터가 &lt;code&gt;None&lt;/code&gt; 이거나 &lt;code&gt;buffer&lt;/code&gt; 객체를 반환 할 때만 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="7827031c1e4779ee518d6bbc19386c165a21aa2f" translate="yes" xml:space="preserve">
          <source>An integer providing the number of dimensions for this array. When nd is 0, the array is sometimes called a rank-0 array. Such arrays have undefined dimensions and strides and cannot be accessed. &lt;a href=&quot;c-api.array#c.NPY_MAXDIMS&quot;&gt;&lt;code&gt;NPY_MAXDIMS&lt;/code&gt;&lt;/a&gt; is the largest number of dimensions for any array.</source>
          <target state="translated">이 배열의 차원 수를 제공하는 정수입니다. nd가 0이면 배열을 종종 순위 -0 배열이라고합니다. 이러한 배열에는 정의되지 않은 차원과 보폭이 있으며 액세스 할 수 없습니다. &lt;a href=&quot;c-api.array#c.NPY_MAXDIMS&quot;&gt; &lt;code&gt;NPY_MAXDIMS&lt;/code&gt; &lt;/a&gt; 는 모든 배열에서 가장 큰 차원 수입니다.</target>
        </trans-unit>
        <trans-unit id="740a8c0291954a1fc0b575bf55fa7f345ee70e49" translate="yes" xml:space="preserve">
          <source>An integer showing the version of the interface (i.e. 3 for this version). Be careful not to use this to invalidate objects exposing future versions of the interface.</source>
          <target state="translated">인터페이스의 버전을 나타내는 정수 (이 버전의 경우 3) 이 인터페이스를 사용하여 이후 버전의 인터페이스를 노출하는 객체를 무효화하지 않도록주의하십시오.</target>
        </trans-unit>
        <trans-unit id="d87fed7bbbc954e477fb70394a40418f3fdbf745" translate="yes" xml:space="preserve">
          <source>An integer, &lt;em&gt;i&lt;/em&gt;, returns the same values as &lt;code&gt;i:i+1&lt;/code&gt;&lt;strong&gt;except&lt;/strong&gt; the dimensionality of the returned object is reduced by 1. In particular, a selection tuple with the &lt;em&gt;p&lt;/em&gt;-th element an integer (and all other entries &lt;code&gt;:&lt;/code&gt;) returns the corresponding sub-array with dimension &lt;em&gt;N - 1&lt;/em&gt;. If &lt;em&gt;N = 1&lt;/em&gt; then the returned object is an array scalar. These objects are explained in &lt;a href=&quot;arrays.scalars#arrays-scalars&quot;&gt;Scalars&lt;/a&gt;.</source>
          <target state="translated">정수는 &lt;em&gt;난&lt;/em&gt; 과 동일한 값을 반환 &lt;code&gt;i:i+1&lt;/code&gt; &lt;strong&gt;을 제외하고&lt;/strong&gt; , 특히 (1)에 의해 감소된다 리턴 된 객체의 차원은 함께 선택 튜플 &lt;em&gt;P&lt;/em&gt; 번째의 소자 정수 (모든 다른 항목 &lt;code&gt;:&lt;/code&gt; )를를 반환 &lt;em&gt;N-1&lt;/em&gt; 차원의 해당 하위 배열 . 경우 &lt;em&gt;N = 1로&lt;/em&gt; 한 후 리턴 된 객체는 배열 스칼라이다. 이 객체는 &lt;a href=&quot;arrays.scalars#arrays-scalars&quot;&gt;스칼라&lt;/a&gt; 에 설명되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="9337d47802d85cb5aefc4c6ec7749f6fe4d0f859" translate="yes" xml:space="preserve">
          <source>An introduction, with definitions and general explanations.</source>
          <target state="translated">정의 및 일반적인 설명과 함께 소개합니다.</target>
        </trans-unit>
        <trans-unit id="0e55a620091e71a89cb39a3c09fd5cc874040b26" translate="yes" xml:space="preserve">
          <source>An item extracted from an array, &lt;em&gt;e.g.&lt;/em&gt;, by indexing, is represented by a Python object whose type is one of the &lt;a href=&quot;arrays.scalars#arrays-scalars&quot;&gt;array scalar types&lt;/a&gt; built in NumPy. The array scalars allow easy manipulation of also more complicated arrangements of data.</source>
          <target state="translated">배열에서 추출 된 항목 ( &lt;em&gt;예 :&lt;/em&gt; 인덱싱)은 NumPy에 내장 된 &lt;a href=&quot;arrays.scalars#arrays-scalars&quot;&gt;배열 스칼라 유형&lt;/a&gt; 중 하나 인 Python 객체로 표현됩니다 . 배열 스칼라를 사용하면 더 복잡한 데이터 배열도 쉽게 조작 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="de99db091c92a4334b9f2bbfb02c196f89f1e72f" translate="yes" xml:space="preserve">
          <source>An iterable object providing data for the array.</source>
          <target state="translated">배열에 대한 데이터를 제공하는 반복 가능한 객체입니다.</target>
        </trans-unit>
        <trans-unit id="c2c683940adaf3e17b5b2d4dbfdc8fb1f9285bc0" translate="yes" xml:space="preserve">
          <source>An masked array with &lt;a href=&quot;../maskedarray.baseclass#numpy.ma.masked&quot;&gt;&lt;code&gt;masked&lt;/code&gt;&lt;/a&gt; elements where the condition is masked, elements from &lt;code&gt;x&lt;/code&gt; where &lt;code&gt;condition&lt;/code&gt; is True, and elements from &lt;code&gt;y&lt;/code&gt; elsewhere.</source>
          <target state="translated">함께 마스크 배열 &lt;a href=&quot;../maskedarray.baseclass#numpy.ma.masked&quot;&gt; &lt;code&gt;masked&lt;/code&gt; &lt;/a&gt; 조건이 마스크 요소의 요소 &lt;code&gt;x&lt;/code&gt; &lt;code&gt;condition&lt;/code&gt; 에서 사실이며, 원소 &lt;code&gt;y&lt;/code&gt; 다른.</target>
        </trans-unit>
        <trans-unit id="8ce742f07c8b93ebe9e87ec17c3c1ca6bc05421b" translate="yes" xml:space="preserve">
          <source>An ndarray can have a data segment that is not a simple contiguous chunk of well-behaved memory you can manipulate. It may not be aligned with word boundaries (very important on some platforms). It might have its data in a different byte-order than the machine recognizes. It might not be writeable. It might be in Fortan-contiguous order. The array flags are used to indicate what can be said about data associated with an array.</source>
          <target state="translated">ndarray에는 조작 할 수있는 잘 동작하는 메모리의 단순한 연속 덩어리가 아닌 데이터 세그먼트가있을 수 있습니다. 단어 경계와 정렬되지 않을 수 있습니다 (일부 플랫폼에서 매우 중요). 머신이 인식하는 것과 다른 바이트 순서로 데이터를 가질 수 있습니다. 쓰기 불가능할 수 있습니다. Fortan 연속 순서 일 수 있습니다. 배열 플래그는 배열과 관련된 데이터에 대해 말할 수있는 것을 나타내는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="84038cf3f95c6f7f876de572eb50dcdd65ebb4e5" translate="yes" xml:space="preserve">
          <source>An ndarray containing the absolute value of each element in &lt;code&gt;x&lt;/code&gt;. For complex input, &lt;code&gt;a + ib&lt;/code&gt;, the absolute value is</source>
          <target state="translated">각 요소의 절대 값을 포함하는 ndarray &lt;code&gt;x&lt;/code&gt; . 복소수 입력 &lt;code&gt;a + ib&lt;/code&gt; 의 경우 절대 값은</target>
        </trans-unit>
        <trans-unit id="937ff1e9853b1d8bb7896ced9c9a3c640f4a20fd" translate="yes" xml:space="preserve">
          <source>An ndarray of appropriate shape and dtype, filled with False.</source>
          <target state="translated">False로 채워진 적절한 모양과 dtype의 ndarray.</target>
        </trans-unit>
        <trans-unit id="a5ee74273207da7ae537266764fb0a696c970cac" translate="yes" xml:space="preserve">
          <source>An nditer for each item in &lt;code&gt;axes&lt;/code&gt;, outermost first</source>
          <target state="translated">&lt;code&gt;axes&lt;/code&gt; 각 항목에 대한 nditer ( 가장 바깥 쪽)</target>
        </trans-unit>
        <trans-unit id="d7605eba941666733600a4275983300b4a00400c" translate="yes" xml:space="preserve">
          <source>An ndpointer instance is used to describe an ndarray in restypes and argtypes specifications. This approach is more flexible than using, for example, &lt;code&gt;POINTER(c_double)&lt;/code&gt;, since several restrictions can be specified, which are verified upon calling the ctypes function. These include data type, number of dimensions, shape and flags. If a given array does not satisfy the specified restrictions, a &lt;code&gt;TypeError&lt;/code&gt; is raised.</source>
          <target state="translated">ndpointer 인스턴스는 restypes 및 argtypes 사양에서 ndarray를 설명하는 데 사용됩니다. 이 접근 방식은 예를 들어 &lt;code&gt;POINTER(c_double)&lt;/code&gt; 보다 유연 합니다. ctypes 함수를 호출 할 때 확인되는 몇 가지 제한 사항을 지정할 수 있기 때문입니다. 여기에는 데이터 유형, 차원 수, 모양 및 플래그가 포함됩니다. 지정된 배열이 지정된 제한을 만족하지 않으면 &lt;code&gt;TypeError&lt;/code&gt; 가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="8249a78054c0cb82583f75cad623801b99c6e816" translate="yes" xml:space="preserve">
          <source>An object that can be passed as an argument to the &lt;a href=&quot;numpy.dtype#numpy.dtype&quot;&gt;&lt;code&gt;numpy.dtype&lt;/code&gt;&lt;/a&gt; constructor to create the array&amp;rsquo;s dtype.</source>
          <target state="translated">배열의 dtype을 만들기 위해 &lt;a href=&quot;numpy.dtype#numpy.dtype&quot;&gt; &lt;code&gt;numpy.dtype&lt;/code&gt; &lt;/a&gt; 생성자에 인수로 전달할 수있는 객체입니다 .</target>
        </trans-unit>
        <trans-unit id="51b070f54d715dc3c886991b214975d29e065cb3" translate="yes" xml:space="preserve">
          <source>An object that can be queried for it&amp;rsquo;s numeric type.</source>
          <target state="translated">쿼리 할 수있는 개체는 숫자 형식입니다.</target>
        </trans-unit>
        <trans-unit id="757fdfd1c89cb8f173de4247aa51861595590920" translate="yes" xml:space="preserve">
          <source>An object that exposes the buffer interface.</source>
          <target state="translated">버퍼 인터페이스를 노출하는 객체입니다.</target>
        </trans-unit>
        <trans-unit id="9aa10d88b8c5173358367cce862fb4a6d6fc0051" translate="yes" xml:space="preserve">
          <source>An object that specifies a custom set of valid days.</source>
          <target state="translated">유효한 일의 사용자 지정 집합을 지정하는 개체입니다.</target>
        </trans-unit>
        <trans-unit id="9697eabfa36a0c57b03730a9e63e9c0dd7cc2d09" translate="yes" xml:space="preserve">
          <source>An object to simplify the interaction of the array with the ctypes module.</source>
          <target state="translated">ctypes 모듈과 배열의 상호 작용을 단순화하는 객체입니다.</target>
        </trans-unit>
        <trans-unit id="77d04ad5d02d58a854d2c57fda919f98926805a2" translate="yes" xml:space="preserve">
          <source>An offset can be passed also to the masking function. This gets us the indices starting on the first diagonal right of the main one:</source>
          <target state="translated">마스킹 기능에도 오프셋을 전달할 수 있습니다. 이를 통해 주 인덱스의 첫 번째 대각선 오른쪽에서 시작하는 인덱스를 얻을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e7bb40a65a5fed271af7ea895f0c3a327894df3e" translate="yes" xml:space="preserve">
          <source>An open file object, or a string containing a filename.</source>
          <target state="translated">열린 파일 객체 또는 파일 이름이 포함 된 문자열</target>
        </trans-unit>
        <trans-unit id="c61177b92fd6e93436d3f1589cdd0e84373a28c0" translate="yes" xml:space="preserve">
          <source>An optional argument which is passed through to &lt;code&gt;mask_func&lt;/code&gt;. Functions like &lt;a href=&quot;numpy.triu#numpy.triu&quot;&gt;&lt;code&gt;triu&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;numpy.tril#numpy.tril&quot;&gt;&lt;code&gt;tril&lt;/code&gt;&lt;/a&gt; take a second argument that is interpreted as an offset.</source>
          <target state="translated">&lt;code&gt;mask_func&lt;/code&gt; 로 전달되는 선택적 인수입니다 . 같은 기능 &lt;a href=&quot;numpy.triu#numpy.triu&quot;&gt; &lt;code&gt;triu&lt;/code&gt; 는&lt;/a&gt; , &lt;a href=&quot;numpy.tril#numpy.tril&quot;&gt; &lt;code&gt;tril&lt;/code&gt; &lt;/a&gt; 오프셋으로 해석됩니다 두 번째 인수를.</target>
        </trans-unit>
        <trans-unit id="1965c219b7008fe9d099c530f609263a14ec3ab8" translate="yes" xml:space="preserve">
          <source>An optional shape tuple providing how many times this part of the structure should be repeated. No repeats are assumed if this is not given. Very complicated structures can be described using this generic interface. Notice, however, that each element of the array is still of the same data-type. Some examples of using this interface are given below.</source>
          <target state="translated">구조의이 부분을 몇 번 반복해야하는지 선택적인 형태 튜플. 이것이 주어지지 않으면 반복이 가정되지 않습니다. 이 일반 인터페이스를 사용하여 매우 복잡한 구조를 설명 할 수 있습니다. 그러나 배열의 각 요소는 여전히 동일한 데이터 유형입니다. 이 인터페이스를 사용하는 몇 가지 예는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="53899654d34ff89eb71076f6e6bc7701229a1b68" translate="yes" xml:space="preserve">
          <source>An order as close to the order of the inputs as possible, even if the input is in neither C nor Fortran order.</source>
          <target state="translated">입력이 C 또는 포트란 순서가 아닌 경우에도 입력 순서와 최대한 비슷한 순서입니다.</target>
        </trans-unit>
        <trans-unit id="62dbe9a66cb25d1e5f12073cb6b65d7c95221376" translate="yes" xml:space="preserve">
          <source>An ordered tuple of field names. It is NULL if no field is defined.</source>
          <target state="translated">정렬 된 필드 이름의 튜플. 필드가 정의되어 있지 않으면 NULL입니다.</target>
        </trans-unit>
        <trans-unit id="43728498911f9a35c7cfcd97027ee53c73e05582" translate="yes" xml:space="preserve">
          <source>And for assigning values:</source>
          <target state="translated">그리고 값을 할당하기 위해 :</target>
        </trans-unit>
        <trans-unit id="4fb83d7408641f0a8ebf4e9525e3b469b9150326" translate="yes" xml:space="preserve">
          <source>And here are the time units:</source>
          <target state="translated">시간 단위는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="1b699ec82ab8d002ac2193762454ef347af6a2da" translate="yes" xml:space="preserve">
          <source>And in more detail:</source>
          <target state="translated">그리고 더 자세하게 :</target>
        </trans-unit>
        <trans-unit id="d96cb503f931b03fd273a49b170890809399fc62" translate="yes" xml:space="preserve">
          <source>And use it to set the diagonal of an array of zeros to 1:</source>
          <target state="translated">그리고 이것을 사용하여 0의 배열의 대각선을 1로 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="240ae7e192fffb9c12f05d721f8aebdc4754f4de" translate="yes" xml:space="preserve">
          <source>Angle in radians.</source>
          <target state="translated">라디안 각도.</target>
        </trans-unit>
        <trans-unit id="0184757264cf635f3a2e2e908775a586af284275" translate="yes" xml:space="preserve">
          <source>Angle, in radians (</source>
          <target state="translated">라디안 단위 각도 (</target>
        </trans-unit>
        <trans-unit id="531138e549dac342fe270e2699b3c5521bbf5ec8" translate="yes" xml:space="preserve">
          <source>Angles in degrees.</source>
          <target state="translated">각도 (도)입니다.</target>
        </trans-unit>
        <trans-unit id="4043a7e9def49f8cd15e6e1c3c67b85fcd702c3b" translate="yes" xml:space="preserve">
          <source>Another difference with the standard ndarray of str data-type is that the chararray inherits the feature introduced by Numarray that white-space at the end of any element in the array will be ignored on item retrieval and comparison operations.</source>
          <target state="translated">str 데이터 유형의 표준 ndarray와의 또 다른 차이점은 chararray가 Numarray가 도입 한 기능을 상속한다는 점입니다. 배열의 모든 요소 끝에있는 공백은 항목 검색 및 비교 작업에서 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="5dcd2747e1a6d1d5aac68e7e1ee2b04c96abcc9c" translate="yes" xml:space="preserve">
          <source>Another example is the function &lt;code&gt;inner1d(a, b)&lt;/code&gt; with a signature of &lt;code&gt;(i),(i)-&amp;gt;()&lt;/code&gt;. This applies the inner product along the last axis of each input, but keeps the remaining indices intact. For example, where &lt;code&gt;a&lt;/code&gt; is of shape &lt;code&gt;(3, 5, N)&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; is of shape &lt;code&gt;(5, N)&lt;/code&gt;, this will return an output of shape &lt;code&gt;(3,5)&lt;/code&gt;. The underlying elementary function is called &lt;code&gt;3 * 5&lt;/code&gt; times. In the signature, we specify one core dimension &lt;code&gt;(i)&lt;/code&gt; for each input and zero core dimensions &lt;code&gt;()&lt;/code&gt; for the output, since it takes two 1-d arrays and returns a scalar. By using the same name &lt;code&gt;i&lt;/code&gt;, we specify that the two corresponding dimensions should be of the same size.</source>
          <target state="translated">또 다른 예는 &lt;code&gt;(i),(i)-&amp;gt;()&lt;/code&gt; 서명 이있는 &lt;code&gt;inner1d(a, b)&lt;/code&gt; 함수 입니다. 이것은 각 입력의 마지막 축을 따라 내부 제품을 적용하지만 나머지 인덱스는 그대로 유지합니다. 예를 들어, &lt;code&gt;a&lt;/code&gt; 의 모양이 &lt;code&gt;(3, 5, N)&lt;/code&gt; 이고 &lt;code&gt;b&lt;/code&gt; 의 모양이 &lt;code&gt;(5, N)&lt;/code&gt; 인 경우 모양 &lt;code&gt;(3,5)&lt;/code&gt; 의 출력을 반환합니다 . 기본 초등학교 기능은 &lt;code&gt;3 * 5&lt;/code&gt; 번 이라고 합니다. 시그니처에서는 각 입력에 대해 하나의 코어 차원 &lt;code&gt;(i)&lt;/code&gt; 을 지정 하고 출력에 대해 0 개의 코어 차원 &lt;code&gt;()&lt;/code&gt; 을 지정합니다. 두 개의 1 차원 배열을 취하고 스칼라를 반환하기 때문입니다. 같은 이름을 사용하여 &lt;code&gt;i&lt;/code&gt; 두 개의 해당 치수가 동일한 크기 여야한다고 지정합니다.</target>
        </trans-unit>
        <trans-unit id="f0c72feff7651c1b9feda841c49b58c2d454b80e" translate="yes" xml:space="preserve">
          <source>Another important role played by deprecation markings in the C API is to move towards hiding internal details of the NumPy implementation. For those needing direct, easy, access to the data of ndarrays, this will not remove this ability. Rather, there are many potential performance optimizations which require changing the implementation details, and NumPy developers have been unable to try them because of the high value of preserving ABI compatibility. By deprecating this direct access, we will in the future be able to improve NumPy&amp;rsquo;s performance in ways we cannot presently.</source>
          <target state="translated">C API에서 더 이상 사용되지 않는 표시가하는 또 다른 중요한 역할은 NumPy 구현의 내부 세부 사항을 숨기는 것입니다. ndarrays 데이터에 직접 쉽고 쉽게 액세스해야하는 사람들에게는이 기능이 제거되지 않습니다. 오히려 구현 세부 사항을 변경해야하는 잠재적 인 성능 최적화가 많이 있으며 NumPy 개발자는 ABI 호환성을 유지하는 데 많은 가치가 있기 때문에이를 시도 할 수 없었습니다. 이 직접 액세스를 사용하지 않으면 앞으로 현재로서는 불가능한 방식으로 NumPy의 성능을 향상시킬 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="91143b613b806bdad96301f98bc353e17238828f" translate="yes" xml:space="preserve">
          <source>Another method is to use &lt;a href=&quot;generated/numpy.random.mt19937.mt19937.jumped#numpy.random.mt19937.MT19937.jumped&quot;&gt;&lt;code&gt;MT19937.jumped&lt;/code&gt;&lt;/a&gt; which advances the state as-if</source>
          <target state="translated">또 다른 방법은 &lt;a href=&quot;generated/numpy.random.mt19937.mt19937.jumped#numpy.random.mt19937.MT19937.jumped&quot;&gt; &lt;code&gt;MT19937.jumped&lt;/code&gt; &lt;/a&gt; 를 사용 하여 상태를 그대로 유지하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="0fd6c16778a959995e7dc3e9960a7fccd4bf7af0" translate="yes" xml:space="preserve">
          <source>Another possibility is to use the &lt;a href=&quot;generated/numpy.ma.getmask#numpy.ma.getmask&quot;&gt;&lt;code&gt;getmask&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;generated/numpy.ma.getmaskarray#numpy.ma.getmaskarray&quot;&gt;&lt;code&gt;getmaskarray&lt;/code&gt;&lt;/a&gt; functions. &lt;code&gt;getmask(x)&lt;/code&gt; outputs the mask of &lt;code&gt;x&lt;/code&gt; if &lt;code&gt;x&lt;/code&gt; is a masked array, and the special value &lt;a href=&quot;maskedarray.baseclass#numpy.ma.nomask&quot;&gt;&lt;code&gt;nomask&lt;/code&gt;&lt;/a&gt; otherwise. &lt;code&gt;getmaskarray(x)&lt;/code&gt; outputs the mask of &lt;code&gt;x&lt;/code&gt; if &lt;code&gt;x&lt;/code&gt; is a masked array. If &lt;code&gt;x&lt;/code&gt; has no invalid entry or is not a masked array, the function outputs a boolean array of &lt;code&gt;False&lt;/code&gt; with as many elements as &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="translated">또 다른 가능성은 &lt;a href=&quot;generated/numpy.ma.getmask#numpy.ma.getmask&quot;&gt; &lt;code&gt;getmask&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;generated/numpy.ma.getmaskarray#numpy.ma.getmaskarray&quot;&gt; &lt;code&gt;getmaskarray&lt;/code&gt; &lt;/a&gt; 함수 를 사용하는 것 입니다. &lt;code&gt;getmask(x)&lt;/code&gt; 의 출력 마스크 &lt;code&gt;x&lt;/code&gt; 하는 경우 &lt;code&gt;x&lt;/code&gt; 마스킹 된 배열, 그리고 특별 값 &lt;a href=&quot;maskedarray.baseclass#numpy.ma.nomask&quot;&gt; &lt;code&gt;nomask&lt;/code&gt; &lt;/a&gt; 그렇지. &lt;code&gt;x&lt;/code&gt; 가 마스크 된 배열 인 경우 &lt;code&gt;getmaskarray(x)&lt;/code&gt; 는 &lt;code&gt;x&lt;/code&gt; 의 마스크를 출력합니다 . 경우 &lt;code&gt;x&lt;/code&gt; 유효하지 않은 엔트리가 없거나 마스크 배열이 아닌 함수가 부울 어레이 출력 &lt;code&gt;False&lt;/code&gt; 많은 요소와 같은 &lt;code&gt;x&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="05af7d96a4421569602af070d1f51ae85302570e" translate="yes" xml:space="preserve">
          <source>Another use of this flag is for setting up reduction operations. After the iterator is created, and a reduction output is allocated automatically by the iterator (be sure to use READWRITE access), its value may be initialized to the reduction unit. Use &lt;a href=&quot;#c.NpyIter_GetOperandArray&quot;&gt;&lt;code&gt;NpyIter_GetOperandArray&lt;/code&gt;&lt;/a&gt; to get the object. Then, call &lt;a href=&quot;#c.NpyIter_Reset&quot;&gt;&lt;code&gt;NpyIter_Reset&lt;/code&gt;&lt;/a&gt; to allocate and fill the buffers with their initial values.</source>
          <target state="translated">이 플래그의 다른 용도는 축소 작업을 설정하는 것입니다. 이터레이터가 생성되고 이터레이터가 축소 출력을 자동으로 할당 한 후에는 (READWRITE 액세스를 사용해야 함) 해당 값이 축소 장치로 초기화 될 수 있습니다. &lt;a href=&quot;#c.NpyIter_GetOperandArray&quot;&gt; &lt;code&gt;NpyIter_GetOperandArray&lt;/code&gt; &lt;/a&gt; 를 사용 하여 개체를 가져옵니다. 그런 다음 &lt;a href=&quot;#c.NpyIter_Reset&quot;&gt; &lt;code&gt;NpyIter_Reset&lt;/code&gt; &lt;/a&gt; 을 호출 하여 버퍼를 초기 값으로 할당하고 채 웁니다.</target>
        </trans-unit>
        <trans-unit id="1273c53271563cf36a39aab59fe3df9f43442e63" translate="yes" xml:space="preserve">
          <source>Another way to represent the determinant, more suitable for large matrices where underflow/overflow may occur.</source>
          <target state="translated">언더 플로 / 오버플로가 발생할 수있는 큰 행렬에 더 적합한 결정자를 나타내는 다른 방법입니다.</target>
        </trans-unit>
        <trans-unit id="4a9a549b7d1a971f20baf0bc7c2890ecc79e2921" translate="yes" xml:space="preserve">
          <source>Another way to retrieve the valid data is to use the &lt;a href=&quot;generated/numpy.ma.compressed#numpy.ma.compressed&quot;&gt;&lt;code&gt;compressed&lt;/code&gt;&lt;/a&gt; method, which returns a one-dimensional &lt;a href=&quot;generated/numpy.ndarray#numpy.ndarray&quot;&gt;&lt;code&gt;ndarray&lt;/code&gt;&lt;/a&gt; (or one of its subclasses, depending on the value of the &lt;a href=&quot;maskedarray.baseclass#numpy.ma.MaskedArray.baseclass&quot;&gt;&lt;code&gt;baseclass&lt;/code&gt;&lt;/a&gt; attribute):</source>
          <target state="translated">유효 데이터를 검색하기위한 다른 방법은 사용하는 &lt;a href=&quot;generated/numpy.ma.compressed#numpy.ma.compressed&quot;&gt; &lt;code&gt;compressed&lt;/code&gt; &lt;/a&gt; 일차원 반환 방법 &lt;a href=&quot;generated/numpy.ndarray#numpy.ndarray&quot;&gt; &lt;code&gt;ndarray&lt;/code&gt; 을&lt;/a&gt; (의 값에 따라, 또는 그 하위 클래스 중 하나 &lt;a href=&quot;maskedarray.baseclass#numpy.ma.MaskedArray.baseclass&quot;&gt; &lt;code&gt;baseclass&lt;/code&gt; &lt;/a&gt; 속성) :</target>
        </trans-unit>
        <trans-unit id="4c793b7f96dc3a05a24bc874af2795d6270941c5" translate="yes" xml:space="preserve">
          <source>Anti-derivative of a polynomial.</source>
          <target state="translated">다항식의 파생 방지.</target>
        </trans-unit>
        <trans-unit id="a193823ba578f9f1e7b81264ee2c1d9779647da7" translate="yes" xml:space="preserve">
          <source>Any Python object:</source>
          <target state="translated">모든 파이썬 객체 :</target>
        </trans-unit>
        <trans-unit id="58e444efe77e462bb342fdd66c1b5f6f6487f4f4" translate="yes" xml:space="preserve">
          <source>Any binary operation can be extended to an array operation in an outer product fashion like in &lt;a href=&quot;generated/numpy.outer#numpy.outer&quot;&gt;&lt;code&gt;outer&lt;/code&gt;&lt;/a&gt;, and the &lt;a href=&quot;generated/numpy.nditer#numpy.nditer&quot;&gt;&lt;code&gt;nditer&lt;/code&gt;&lt;/a&gt; object provides a way to accomplish this by explicitly mapping the axes of the operands. It is also possible to do this with &lt;a href=&quot;constants#numpy.newaxis&quot;&gt;&lt;code&gt;newaxis&lt;/code&gt;&lt;/a&gt; indexing, but we will show you how to directly use the nditer &lt;code&gt;op_axes&lt;/code&gt; parameter to accomplish this with no intermediate views.</source>
          <target state="translated">이진 동작처럼 외적 형태로 배열 동작으로 확장 될 수있는 &lt;a href=&quot;generated/numpy.outer#numpy.outer&quot;&gt; &lt;code&gt;outer&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;generated/numpy.nditer#numpy.nditer&quot;&gt; &lt;code&gt;nditer&lt;/code&gt; 의&lt;/a&gt; 개체를 명시 적 피연산자의 축 매핑함으로써이를 달성 할 수있는 방법을 제공한다. &lt;a href=&quot;constants#numpy.newaxis&quot;&gt; &lt;code&gt;newaxis&lt;/code&gt; &lt;/a&gt; 인덱싱을 사용 하여이 작업 을 수행 할 수도 있지만 nditer &lt;code&gt;op_axes&lt;/code&gt; 매개 변수를 직접 사용하여 중간 뷰없이이를 수행 하는 방법을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="10078c28a66a73c575c275e6dbad2ad1c3448ead" translate="yes" xml:space="preserve">
          <source>Any class, ndarray subclass or not, can define this method or set it to &lt;a href=&quot;https://docs.python.org/dev/library/constants.html#None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt; in order to override the behavior of NumPy&amp;rsquo;s ufuncs. This works quite similarly to Python&amp;rsquo;s &lt;code&gt;__mul__&lt;/code&gt; and other binary operation routines.</source>
          <target state="translated">ndarray 서브 클래스 여부에 관계없이 모든 클래스 는 NumPy의 ufuncs 동작을 무시하기 위해이 메소드를 정의하거나 &lt;a href=&quot;https://docs.python.org/dev/library/constants.html#None&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt; 으로 설정할 수 있습니다. 이것은 파이썬의 &lt;code&gt;__mul__&lt;/code&gt; 및 기타 이진 연산 루틴과 매우 유사하게 작동합니다.</target>
        </trans-unit>
        <trans-unit id="f4c392144526317c8f8ed6b5a13470ac5e7a3986" translate="yes" xml:space="preserve">
          <source>Any combination of N scalars/arrays with the meaning of 2. and 3.</source>
          <target state="translated">N 스칼라 / 배열의 의미가 2와 3의 조합</target>
        </trans-unit>
        <trans-unit id="299b31e220e37372f3e91f15af6702628188b111" translate="yes" xml:space="preserve">
          <source>Any data flags (&lt;em&gt;e.g.&lt;/em&gt;&lt;a href=&quot;c-api.array#c.NPY_ARRAY_WRITEABLE&quot;&gt;&lt;code&gt;NPY_ARRAY_WRITEABLE&lt;/code&gt;&lt;/a&gt; ) that should be used to interpret the memory.</source>
          <target state="translated">메모리를 해석하는 데 사용해야하는 모든 데이터 플래그 ( &lt;em&gt;예 : &lt;/em&gt;&lt;a href=&quot;c-api.array#c.NPY_ARRAY_WRITEABLE&quot;&gt; &lt;code&gt;NPY_ARRAY_WRITEABLE&lt;/code&gt; &lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="5d0107d5bdb46b9143c29ff9e836efde601fe340" translate="yes" xml:space="preserve">
          <source>Any dynamically allocated memory. Currently, this is used for dynamic ufuncs created from a python function to store room for the types, data, and name members.</source>
          <target state="translated">동적으로 할당 된 메모리 현재, 이것은 파이썬 함수에서 생성 된 동적 ufunc에 사용되어 형식, 데이터 및 이름 멤버를위한 공간을 저장합니다.</target>
        </trans-unit>
        <trans-unit id="f1796623bc2027a8a0877fb0e869c4d3c3990d76" translate="yes" xml:space="preserve">
          <source>Any further arguments given to &lt;a href=&quot;#numpy.piecewise&quot;&gt;&lt;code&gt;piecewise&lt;/code&gt;&lt;/a&gt; are passed to the functions upon execution, i.e., if called &lt;code&gt;piecewise(..., ..., 1, 'a')&lt;/code&gt;, then each function is called as &lt;code&gt;f(x, 1, 'a')&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#numpy.piecewise&quot;&gt; &lt;code&gt;piecewise&lt;/code&gt; 에&lt;/a&gt; 지정된 추가 인수 는 실행시 함수에 전달됩니다. 즉 &lt;code&gt;piecewise(..., ..., 1, 'a')&lt;/code&gt; 이면 각 함수는 &lt;code&gt;f(x, 1, 'a')&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3fd7c425a186534062ca5afb654fb680173c25d5" translate="yes" xml:space="preserve">
          <source>Any keyword arguments the function requires.</source>
          <target state="translated">함수에 필요한 키워드 인수</target>
        </trans-unit>
        <trans-unit id="487737106c5cb105d4cc96a9c1768d045f864529" translate="yes" xml:space="preserve">
          <source>Any masked values in x is propagated in y, and vice-versa.</source>
          <target state="translated">x의 마스크 된 값은 y로 전파되고 그 반대도 마찬가지입니다.</target>
        </trans-unit>
        <trans-unit id="5b3e589175f1027a44f22dd657bf35194fb4efe1" translate="yes" xml:space="preserve">
          <source>Any object that can be interpreted as a numpy data type.</source>
          <target state="translated">numpy 데이터 형식으로 해석 될 수있는 모든 개체</target>
        </trans-unit>
        <trans-unit id="6945ac0af9b8b9ad29a3d13b28b137c3c2801d79" translate="yes" xml:space="preserve">
          <source>Any of the &lt;a href=&quot;c-api.array#c.NPY_CASTING&quot;&gt;&lt;code&gt;NPY_CASTING&lt;/code&gt;&lt;/a&gt; enum values may be passed to &lt;code&gt;casting&lt;/code&gt;. The values include &lt;a href=&quot;c-api.array#c.NPY_NO_CASTING&quot;&gt;&lt;code&gt;NPY_NO_CASTING&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;c-api.array#c.NPY_EQUIV_CASTING&quot;&gt;&lt;code&gt;NPY_EQUIV_CASTING&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;c-api.array#c.NPY_SAFE_CASTING&quot;&gt;&lt;code&gt;NPY_SAFE_CASTING&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;c-api.array#c.NPY_SAME_KIND_CASTING&quot;&gt;&lt;code&gt;NPY_SAME_KIND_CASTING&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;c-api.array#c.NPY_UNSAFE_CASTING&quot;&gt;&lt;code&gt;NPY_UNSAFE_CASTING&lt;/code&gt;&lt;/a&gt;. To allow the casts to occur, copying or buffering must also be enabled.</source>
          <target state="translated">의 모든 &lt;a href=&quot;c-api.array#c.NPY_CASTING&quot;&gt; &lt;code&gt;NPY_CASTING&lt;/code&gt; 의&lt;/a&gt; 열거 값이 전달 될 수 있습니다 &lt;code&gt;casting&lt;/code&gt; . 값은 &lt;a href=&quot;c-api.array#c.NPY_NO_CASTING&quot;&gt; &lt;code&gt;NPY_NO_CASTING&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;c-api.array#c.NPY_EQUIV_CASTING&quot;&gt; &lt;code&gt;NPY_EQUIV_CASTING&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;c-api.array#c.NPY_SAFE_CASTING&quot;&gt; &lt;code&gt;NPY_SAFE_CASTING&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;c-api.array#c.NPY_SAME_KIND_CASTING&quot;&gt; &lt;code&gt;NPY_SAME_KIND_CASTING&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;c-api.array#c.NPY_UNSAFE_CASTING&quot;&gt; &lt;code&gt;NPY_UNSAFE_CASTING&lt;/code&gt; &lt;/a&gt; 입니다. 캐스트가 발생하도록하려면 복사 또는 버퍼링도 활성화해야합니다.</target>
        </trans-unit>
        <trans-unit id="99411ff6757ed2755306b2b1a16852e86b5af656" translate="yes" xml:space="preserve">
          <source>Any of the &lt;a href=&quot;c-api.array#c.NPY_ORDER&quot;&gt;&lt;code&gt;NPY_ORDER&lt;/code&gt;&lt;/a&gt; enum values may be passed to &lt;code&gt;order&lt;/code&gt;. For efficient iteration, &lt;a href=&quot;c-api.array#c.NPY_KEEPORDER&quot;&gt;&lt;code&gt;NPY_KEEPORDER&lt;/code&gt;&lt;/a&gt; is the best option, and the other orders enforce the particular iteration pattern.</source>
          <target state="translated">의 모든 &lt;a href=&quot;c-api.array#c.NPY_ORDER&quot;&gt; &lt;code&gt;NPY_ORDER&lt;/code&gt; 의&lt;/a&gt; 열거 값이 전달 될 수 있습니다 &lt;code&gt;order&lt;/code&gt; . 효율적인 반복을 &lt;a href=&quot;c-api.array#c.NPY_KEEPORDER&quot;&gt; &lt;code&gt;NPY_KEEPORDER&lt;/code&gt; &lt;/a&gt; 가 최선의 선택이며 다른 순서는 특정 반복 패턴을 적용합니다.</target>
        </trans-unit>
        <trans-unit id="edb631f6c3d9ec9fd114b3a0b6be2d92e321c394" translate="yes" xml:space="preserve">
          <source>Any of the &lt;a href=&quot;c-api.array#c.NPY_ORDER&quot;&gt;&lt;code&gt;NPY_ORDER&lt;/code&gt;&lt;/a&gt; enum values may be passed to &lt;code&gt;order&lt;/code&gt;. For efficient iteration, &lt;a href=&quot;c-api.array#c.NPY_KEEPORDER&quot;&gt;&lt;code&gt;NPY_KEEPORDER&lt;/code&gt;&lt;/a&gt; is the best option, and the other orders enforce the particular iteration pattern. When using &lt;a href=&quot;c-api.array#c.NPY_KEEPORDER&quot;&gt;&lt;code&gt;NPY_KEEPORDER&lt;/code&gt;&lt;/a&gt;, if you also want to ensure that the iteration is not reversed along an axis, you should pass the flag &lt;a href=&quot;#c.NPY_ITER_DONT_NEGATE_STRIDES&quot;&gt;&lt;code&gt;NPY_ITER_DONT_NEGATE_STRIDES&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">의 모든 &lt;a href=&quot;c-api.array#c.NPY_ORDER&quot;&gt; &lt;code&gt;NPY_ORDER&lt;/code&gt; 의&lt;/a&gt; 열거 값이 전달 될 수 있습니다 &lt;code&gt;order&lt;/code&gt; . 효율적인 반복을 &lt;a href=&quot;c-api.array#c.NPY_KEEPORDER&quot;&gt; &lt;code&gt;NPY_KEEPORDER&lt;/code&gt; &lt;/a&gt; 가 최선의 선택이며 다른 순서는 특정 반복 패턴을 적용합니다. &lt;a href=&quot;c-api.array#c.NPY_KEEPORDER&quot;&gt; &lt;code&gt;NPY_KEEPORDER&lt;/code&gt; 를&lt;/a&gt; 사용할 때 축을 따라 반복이 반전되지 않도록하려면 플래그 &lt;a href=&quot;#c.NPY_ITER_DONT_NEGATE_STRIDES&quot;&gt; &lt;code&gt;NPY_ITER_DONT_NEGATE_STRIDES&lt;/code&gt; 를&lt;/a&gt; 전달해야합니다 .</target>
        </trans-unit>
        <trans-unit id="b3abc478c3f222918197160be100f748fcb675c9" translate="yes" xml:space="preserve">
          <source>Any of the above can be repeated with an arbitrary array-like instead of just integers. For instance:</source>
          <target state="translated">위의 모든 것은 정수 대신 임의의 배열과 같이 반복 될 수 있습니다. 예를 들어 :</target>
        </trans-unit>
        <trans-unit id="be291c901c4e86c13d0921234777782594d69ca9" translate="yes" xml:space="preserve">
          <source>Any of the bits &lt;a href=&quot;c-api.array#c.NPY_ARRAY_C_CONTIGUOUS&quot;&gt;&lt;code&gt;NPY_ARRAY_C_CONTIGUOUS&lt;/code&gt;&lt;/a&gt; (1), &lt;a href=&quot;c-api.array#c.NPY_ARRAY_F_CONTIGUOUS&quot;&gt;&lt;code&gt;NPY_ARRAY_F_CONTIGUOUS&lt;/code&gt;&lt;/a&gt; (2), &lt;a href=&quot;c-api.array#c.NPY_ARRAY_ALIGNED&quot;&gt;&lt;code&gt;NPY_ARRAY_ALIGNED&lt;/code&gt;&lt;/a&gt; (0x100), &lt;a href=&quot;c-api.array#c.NPY_ARRAY_NOTSWAPPED&quot;&gt;&lt;code&gt;NPY_ARRAY_NOTSWAPPED&lt;/code&gt;&lt;/a&gt; (0x200), or &lt;a href=&quot;c-api.array#c.NPY_ARRAY_WRITEABLE&quot;&gt;&lt;code&gt;NPY_ARRAY_WRITEABLE&lt;/code&gt;&lt;/a&gt; (0x400) to indicate something about the data. The &lt;a href=&quot;c-api.array#c.NPY_ARRAY_ALIGNED&quot;&gt;&lt;code&gt;NPY_ARRAY_ALIGNED&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;c-api.array#c.NPY_ARRAY_C_CONTIGUOUS&quot;&gt;&lt;code&gt;NPY_ARRAY_C_CONTIGUOUS&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;c-api.array#c.NPY_ARRAY_F_CONTIGUOUS&quot;&gt;&lt;code&gt;NPY_ARRAY_F_CONTIGUOUS&lt;/code&gt;&lt;/a&gt; flags can actually be determined from the other parameters. The flag &lt;code&gt;NPY_ARR_HAS_DESCR&lt;/code&gt; (0x800) can also be set to indicate to objects consuming the version 3 array interface that the descr member of the structure is present (it will be ignored by objects consuming version 2 of the array interface).</source>
          <target state="translated">비트들의 상관 &lt;a href=&quot;c-api.array#c.NPY_ARRAY_C_CONTIGUOUS&quot;&gt; &lt;code&gt;NPY_ARRAY_C_CONTIGUOUS&lt;/code&gt; &lt;/a&gt; (1) &lt;a href=&quot;c-api.array#c.NPY_ARRAY_F_CONTIGUOUS&quot;&gt; &lt;code&gt;NPY_ARRAY_F_CONTIGUOUS&lt;/code&gt; &lt;/a&gt; (2) &lt;a href=&quot;c-api.array#c.NPY_ARRAY_ALIGNED&quot;&gt; &lt;code&gt;NPY_ARRAY_ALIGNED&lt;/code&gt; &lt;/a&gt; (0x100에서) &lt;a href=&quot;c-api.array#c.NPY_ARRAY_NOTSWAPPED&quot;&gt; &lt;code&gt;NPY_ARRAY_NOTSWAPPED&lt;/code&gt; &lt;/a&gt; (을 0x200) 또는 &lt;a href=&quot;c-api.array#c.NPY_ARRAY_WRITEABLE&quot;&gt; &lt;code&gt;NPY_ARRAY_WRITEABLE&lt;/code&gt; &lt;/a&gt; (0x400에)는 데이터에 대한 것을 나타냅니다. &lt;a href=&quot;c-api.array#c.NPY_ARRAY_ALIGNED&quot;&gt; &lt;code&gt;NPY_ARRAY_ALIGNED&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;c-api.array#c.NPY_ARRAY_C_CONTIGUOUS&quot;&gt; &lt;code&gt;NPY_ARRAY_C_CONTIGUOUS&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;c-api.array#c.NPY_ARRAY_F_CONTIGUOUS&quot;&gt; &lt;code&gt;NPY_ARRAY_F_CONTIGUOUS&lt;/code&gt; 의&lt;/a&gt; 플래그는 실제로 다른 매개 변수에서 결정될 수있다. &lt;code&gt;NPY_ARR_HAS_DESCR&lt;/code&gt; (0x800) 플래그는 구조의 설명자 멤버 가 있음을 버전 3 배열 인터페이스를 소비하는 오브젝트를 나타내도록 설정할 수도 있습니다 (배열 인터페이스의 버전 2를 소비하는 오브젝트에서는 무시 됨).</target>
        </trans-unit>
        <trans-unit id="c0fc04558da8dd3c7bccbbace9c70f03ebdb6a80" translate="yes" xml:space="preserve">
          <source>Any string in &lt;code&gt;numpy.sctypeDict&lt;/code&gt;.keys():</source>
          <target state="translated">&lt;code&gt;numpy.sctypeDict&lt;/code&gt; .keys ()의 모든 문자열 :</target>
        </trans-unit>
        <trans-unit id="d713c0e047edfbd49f0b3846ac98a9a40d4a3161" translate="yes" xml:space="preserve">
          <source>Any third argument to &lt;a href=&quot;https://docs.python.org/dev/library/functions.html#pow&quot;&gt;&lt;code&gt;pow&lt;/code&gt;&lt;/a&gt; is silently ignored, as the underlying &lt;a href=&quot;generated/numpy.power#numpy.power&quot;&gt;&lt;code&gt;ufunc&lt;/code&gt;&lt;/a&gt; takes only two arguments.</source>
          <target state="translated">기본 &lt;a href=&quot;generated/numpy.power#numpy.power&quot;&gt; &lt;code&gt;ufunc&lt;/code&gt; &lt;/a&gt; 는 두 개의 인수 만 취 하므로 &lt;a href=&quot;https://docs.python.org/dev/library/functions.html#pow&quot;&gt; &lt;code&gt;pow&lt;/code&gt; 에 대한&lt;/a&gt; 세 번째 인수 는 자동으로 무시 됩니다.</target>
        </trans-unit>
        <trans-unit id="53be63b1330ee25c1f855c85df25ca52d3b0d9ac" translate="yes" xml:space="preserve">
          <source>Any type object with a &lt;code&gt;dtype&lt;/code&gt; attribute: The attribute will be accessed and used directly. The attribute must return something that is convertible into a dtype object.</source>
          <target state="translated">&lt;code&gt;dtype&lt;/code&gt; 속성 이있는 모든 유형 객체 : 속성에 직접 액세스하여 사용됩니다. 속성은 dtype 객체로 변환 할 수있는 것을 반환해야합니다.</target>
        </trans-unit>
        <trans-unit id="a26626a547f9526333d65f7f7ac98e634e8d404b" translate="yes" xml:space="preserve">
          <source>Append a new recording filter or apply it if the state is entered.</source>
          <target state="translated">새 기록 필터를 추가하거나 상태가 입력되면 적용하십시오.</target>
        </trans-unit>
        <trans-unit id="01347379ae01a5a40d3d1ed49513be6a422e707d" translate="yes" xml:space="preserve">
          <source>Append elements at the end of an array.</source>
          <target state="translated">배열 끝에 요소를 추가합니다.</target>
        </trans-unit>
        <trans-unit id="6e89159e1cc33f0d869902b46493c6f6e94db543" translate="yes" xml:space="preserve">
          <source>Append values to the end of an array.</source>
          <target state="translated">배열의 끝에 값을 추가합니다.</target>
        </trans-unit>
        <trans-unit id="5d9cf77e8ba225a7ce0a29de1d2139c5781725d4" translate="yes" xml:space="preserve">
          <source>Appends a data function to the data_files list that will generate __svn_version__.py file to the current package directory.</source>
          <target state="translated">__svn_version__.py 파일을 현재 패키지 디렉토리에 생성하는 data_files 목록에 데이터 함수를 추가합니다.</target>
        </trans-unit>
        <trans-unit id="33f5ee9b7c00e9ead408311c459141d052778da5" translate="yes" xml:space="preserve">
          <source>Applies an offset counted in valid days.</source>
          <target state="translated">유효한 일수로 계산 된 오프셋을 적용합니다.</target>
        </trans-unit>
        <trans-unit id="2bf57444d43c734213e1d3c851fdf1b3fb150bdf" translate="yes" xml:space="preserve">
          <source>Applies glob.glob(&amp;hellip;) to each path in the sequence (if needed) and pre-pends the local_path if needed. Because this is called on all source lists, this allows wildcard characters to be specified in lists of sources for extension modules and libraries and scripts and allows path-names be relative to the source directory.</source>
          <target state="translated">시퀀스의 각 경로에 glob.glob (&amp;hellip;)를 적용하고 (필요한 경우) local_path를 미리 추가합니다. 이것은 모든 소스 목록에서 호출되므로 확장 모듈 및 라이브러리 및 스크립트의 소스 목록에서 와일드 카드 문자를 지정할 수 있으며 경로 이름이 소스 디렉토리와 관련 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="78652f7b097973c5af68766b38955ba3ae45a013" translate="yes" xml:space="preserve">
          <source>Applies the Einstein summation convention to the array operands provided, returning a new array or placing the result in &lt;em&gt;out&lt;/em&gt;. The string in &lt;em&gt;subscripts&lt;/em&gt; is a comma separated list of index letters. The number of operands is in &lt;em&gt;nop&lt;/em&gt;, and &lt;em&gt;op_in&lt;/em&gt; is an array containing those operands. The data type of the output can be forced with &lt;em&gt;dtype&lt;/em&gt;, the output order can be forced with &lt;em&gt;order&lt;/em&gt; (&lt;a href=&quot;#c.NPY_KEEPORDER&quot;&gt;&lt;code&gt;NPY_KEEPORDER&lt;/code&gt;&lt;/a&gt; is recommended), and when &lt;em&gt;dtype&lt;/em&gt; is specified, &lt;em&gt;casting&lt;/em&gt; indicates how permissive the data conversion should be.</source>
          <target state="translated">Einstein 요약 규칙을 제공된 배열 피연산자에 적용하여 새 배열을 반환하거나 결과를 &lt;em&gt;출력&lt;/em&gt; 합니다. 아래 &lt;em&gt;첨자&lt;/em&gt; 의 문자열 은 쉼표로 구분 된 색인 문자 목록입니다. 피연산자의 수는 &lt;em&gt;nop&lt;/em&gt; 이며 &lt;em&gt;op_in&lt;/em&gt; 은 해당 피연산자가 포함 된 배열입니다. 출력의 데이터 유형으로 강제 할 수 &lt;em&gt;DTYPE&lt;/em&gt; , 출력 순서로 강제 할 수 &lt;em&gt;순서&lt;/em&gt; ( &lt;a href=&quot;#c.NPY_KEEPORDER&quot;&gt; &lt;code&gt;NPY_KEEPORDER&lt;/code&gt; 가&lt;/a&gt; 권장), 때 &lt;em&gt;DTYPE이&lt;/em&gt; 지정, &lt;em&gt;캐스팅&lt;/em&gt; 데이터 변환해야한다 허용하는 방법을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="a15deb464b32712e5faad1a95646f2d13bba4428" translate="yes" xml:space="preserve">
          <source>Apply a decorator to all methods in a class matching a regular expression.</source>
          <target state="translated">정규식과 일치하는 클래스의 모든 메소드에 데코레이터를 적용하십시오.</target>
        </trans-unit>
        <trans-unit id="9aba00bb90c6eaaa703b9d293078221144653ecd" translate="yes" xml:space="preserve">
          <source>Apply a function repeatedly over multiple axes.</source>
          <target state="translated">여러 축에 반복적으로 함수를 적용하십시오.</target>
        </trans-unit>
        <trans-unit id="930471cd723d35b6c2b966e96ceecc291d0fdf6a" translate="yes" xml:space="preserve">
          <source>Apply a function to 1-D slices along the given axis.</source>
          <target state="translated">주어진 축을 따라 1D 슬라이스에 함수를 적용합니다.</target>
        </trans-unit>
        <trans-unit id="60e579e665f3197d6488027d302750921e380286" translate="yes" xml:space="preserve">
          <source>Apply a function to 1-D slices of an array along the given axis.</source>
          <target state="translated">주어진 축을 따라 배열의 1D 슬라이스에 함수를 적용합니다.</target>
        </trans-unit>
        <trans-unit id="92f37352400ea0595778e975d3829366956d6422" translate="yes" xml:space="preserve">
          <source>Apply glob to paths and prepend local_path if needed.</source>
          <target state="translated">경로에 glob을 적용하고 필요한 경우 local_path를 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="6d57e8ee432c77c347bd91e42e1ec296a790a962" translate="yes" xml:space="preserve">
          <source>Apply linear map to input points.</source>
          <target state="translated">입력 포인트에 선형 맵을 적용합니다.</target>
        </trans-unit>
        <trans-unit id="b451c47d03d2342612630d90e5961330763668d9" translate="yes" xml:space="preserve">
          <source>Apply the same function to a scalar value.</source>
          <target state="translated">동일한 함수를 스칼라 값에 적용하십시오.</target>
        </trans-unit>
        <trans-unit id="c19a38c87eebd888f6ee1a1c74150ed1ef57dd31" translate="yes" xml:space="preserve">
          <source>Apply the ufunc &lt;code&gt;op&lt;/code&gt; to all pairs (a, b) with a in &lt;code&gt;A&lt;/code&gt; and b in &lt;code&gt;B&lt;/code&gt;.</source>
          <target state="translated">ufunc 적용 &lt;code&gt;op&lt;/code&gt; 모두에서 함께 쌍 (a, b)에 및 B &lt;code&gt;B&lt;/code&gt; . &lt;code&gt;A&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0a7e07004db73b8ccd197df301f0c0c88108495f" translate="yes" xml:space="preserve">
          <source>Arbitrary data (extra arguments, function names, &lt;em&gt;etc.&lt;/em&gt; ) that can be stored with the ufunc and will be passed in when it is called.</source>
          <target state="translated">ufunc와 함께 저장 될 수 있고 호출 될 때 전달 될 임의의 데이터 (추가 인수, 함수 이름 &lt;em&gt;등&lt;/em&gt; )</target>
        </trans-unit>
        <trans-unit id="d6c0ec3c601093336049eacec64ee0a29b472718" translate="yes" xml:space="preserve">
          <source>Arbitrary subclasses of numpy.ndarray are not completely preserved. Subclasses will be accepted for writing, but only the array data will be written out. A regular numpy.ndarray object will be created upon reading the file.</source>
          <target state="translated">numpy.ndarray의 임의 서브 클래스는 완전히 보존되지 않습니다. 서브 클래스는 쓰기가 허용되지만 배열 데이터 만 기록됩니다. 파일을 읽을 때 일반 numpy.ndarray 객체가 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="d91c75193c3842b9d909ec7b8dd4d035b07a9f55" translate="yes" xml:space="preserve">
          <source>Are all arguments of a type that we know how to handle?</source>
          <target state="translated">처리 방법을 알고있는 유형의 모든 인수가 있습니까?</target>
        </trans-unit>
        <trans-unit id="14bf0c3e3104c86791f4ce367eca2a5cc6cd438f" translate="yes" xml:space="preserve">
          <source>Are the array elements of type unicode (True) or string (False). Default is False.</source>
          <target state="translated">유니 코드 (True) 또는 문자열 (False) 유형의 배열 요소입니다. 기본값은 거짓입니다.</target>
        </trans-unit>
        <trans-unit id="04b5fdf11f1c668ee1bccda74e473d486cb80034" translate="yes" xml:space="preserve">
          <source>Argout Arrays</source>
          <target state="translated">인수 배열</target>
        </trans-unit>
        <trans-unit id="1f693ea5d95326ee12ba9edafca87f6f5ac163dc" translate="yes" xml:space="preserve">
          <source>Argout View Arrays</source>
          <target state="translated">Argout View Arrays</target>
        </trans-unit>
        <trans-unit id="9362235cd642830a37eb4b0e960e60e4a8a7f208" translate="yes" xml:space="preserve">
          <source>Argout arrays are arrays that appear in the input arguments in C, but are in fact output arrays. This pattern occurs often when there is more than one output variable and the single return argument is therefore not sufficient. In Python, the conventional way to return multiple arguments is to pack them into a sequence (tuple, list, etc.) and return the sequence. This is what the argout typemaps do. If a wrapped function that uses these argout typemaps has more than one return argument, they are packed into a tuple or list, depending on the version of Python. The Python user does not pass these arrays in, they simply get returned. For the case where a dimension is specified, the python user must provide that dimension as an argument. The argout signatures are</source>
          <target state="translated">Argout 배열은 C의 입력 인수에 나타나는 배열이지만 실제로는 출력 배열입니다. 이 패턴은 하나 이상의 출력 변수가 있고 단일 리턴 인수로 충분하지 않은 경우에 종종 발생합니다. Python에서 여러 인수를 반환하는 일반적인 방법은 인수를 시퀀스 (튜플, 목록 등)로 묶고 시퀀스를 반환하는 것입니다. 이것이 argout 타입 맵이하는 일입니다. 이러한 argout 타입 맵을 사용하는 랩핑 된 함수가 둘 이상의 리턴 인수를 갖는 경우, Python 버전에 따라 튜플 또는 목록으로 패킹됩니다. 파이썬 사용자는 이러한 배열을 전달하지 않고 단순히 반환됩니다. 차원이 지정된 경우 Python 사용자는 해당 차원을 인수로 제공해야합니다. argout 서명은</target>
        </trans-unit>
        <trans-unit id="f0d811a8c8b43b06e028e619f05e9d14eafcdca7" translate="yes" xml:space="preserve">
          <source>Argoutview arrays are for when your C code provides you with a view of its internal data and does not require any memory to be allocated by the user. This can be dangerous. There is almost no way to guarantee that the internal data from the C code will remain in existence for the entire lifetime of the NumPy array that encapsulates it. If the user destroys the object that provides the view of the data before destroying the NumPy array, then using that array may result in bad memory references or segmentation faults. Nevertheless, there are situations, working with large data sets, where you simply have no other choice.</source>
          <target state="translated">Argoutview 배열은 C 코드가 내부 데이터보기를 제공하고 사용자가 메모리를 할당 할 필요가없는 경우를위한 것입니다. 위험 할 수 있습니다. C 코드의 내부 데이터가이를 캡슐화하는 NumPy 배열의 전체 수명 동안 존재하도록 보장 할 방법이 거의 없습니다. 사용자가 NumPy 배열을 삭제하기 전에 데이터보기를 제공하는 개체를 삭제하면 해당 배열을 사용하면 메모리 참조 또는 세그먼트 오류가 발생할 수 있습니다. 그럼에도 불구하고 단순히 다른 선택의 여지가없는 큰 데이터 세트로 작업하는 상황이 있습니다.</target>
        </trans-unit>
        <trans-unit id="69013bc8794a33ce0d96e2362b8fd29875b1d20a" translate="yes" xml:space="preserve">
          <source>Argument can be either</source>
          <target state="translated">인수는 다음 중 하나 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="80e8304a176934810abc17d2d26c3888e65cbaa7" translate="yes" xml:space="preserve">
          <source>Argument of complex values.</source>
          <target state="translated">복잡한 값의 인수.</target>
        </trans-unit>
        <trans-unit id="103cd4d5d40741b2189f1a4cd45b1145dc7d5cc2" translate="yes" xml:space="preserve">
          <source>Argument of the Bessel function.</source>
          <target state="translated">베셀 함수의 인수</target>
        </trans-unit>
        <trans-unit id="da03da7501b0f4c3d0e71a81aacac0740f6ea6ce" translate="yes" xml:space="preserve">
          <source>Argument(s) can be either</source>
          <target state="translated">인수는 다음 중 하나 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3a267e3ae3a20fe67defefd5d3c99d6c87f6bed7" translate="yes" xml:space="preserve">
          <source>Argument(s) can be either:</source>
          <target state="translated">인수는 다음 중 하나 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="cbb9fa252e60809efa55a7ad83aea5438ef56753" translate="yes" xml:space="preserve">
          <source>Arguments</source>
          <target state="translated">Arguments</target>
        </trans-unit>
        <trans-unit id="1fece9ebb467e36ae935eb7f9713ac9a4f47e841" translate="yes" xml:space="preserve">
          <source>Arguments passed to &lt;code&gt;func&lt;/code&gt;.</source>
          <target state="translated">인수가 &lt;code&gt;func&lt;/code&gt; 에 전달되었습니다 .</target>
        </trans-unit>
        <trans-unit id="ed091b4d91808383da4576963f0c43e1c919be23" translate="yes" xml:space="preserve">
          <source>Arguments to be passed to the nose test runner. &lt;code&gt;argv[0]&lt;/code&gt; is ignored. All command line arguments accepted by &lt;code&gt;nosetests&lt;/code&gt; will work. If it is the default value None, sys.argv is used.</source>
          <target state="translated">코 테스트 러너에게 전달할 인수. &lt;code&gt;argv[0]&lt;/code&gt; 은 무시됩니다. &lt;code&gt;nosetests&lt;/code&gt; 가 승인 한 모든 명령 행 인수 가 작동합니다. 기본값이 None이면 sys.argv가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="a47a631225ff0c3415173266008602c859777e94" translate="yes" xml:space="preserve">
          <source>Arguments to pass on to the ufunc. Typically &lt;a href=&quot;numpy.dtype#numpy.dtype&quot;&gt;&lt;code&gt;dtype&lt;/code&gt;&lt;/a&gt; or &lt;code&gt;out&lt;/code&gt;.</source>
          <target state="translated">ufunc에 전달할 인수. 일반적으로 &lt;a href=&quot;numpy.dtype#numpy.dtype&quot;&gt; &lt;code&gt;dtype&lt;/code&gt; &lt;/a&gt; 또는 &lt;code&gt;out&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="a0478ca5f4c068ca3ac12f9474f6a15865ce9053" translate="yes" xml:space="preserve">
          <source>Arguments:</source>
          <target state="translated">Arguments:</target>
        </trans-unit>
        <trans-unit id="45f053dc732762c8c17889da40821807b746247b" translate="yes" xml:space="preserve">
          <source>Arithmetic</source>
          <target state="translated">Arithmetic</target>
        </trans-unit>
        <trans-unit id="424915704fdafa9f1991a2f818f149305624ecb5" translate="yes" xml:space="preserve">
          <source>Arithmetic and comparison operations</source>
          <target state="translated">산술 및 비교 연산</target>
        </trans-unit>
        <trans-unit id="c0e6f1226f47528d48f2f359b548a2a985744686" translate="yes" xml:space="preserve">
          <source>Arithmetic and comparison operations are supported by masked arrays. As much as possible, invalid entries of a masked array are not processed, meaning that the corresponding &lt;code&gt;data&lt;/code&gt; entries &lt;em&gt;should&lt;/em&gt; be the same before and after the operation.</source>
          <target state="translated">산술 및 비교 연산은 마스크 배열에서 지원됩니다. 마스크 배열의 유효하지 않은 항목은 처리되지 않으므로 가능한 한 해당 &lt;code&gt;data&lt;/code&gt; 항목 &lt;em&gt;이&lt;/em&gt; 작업 전후에 동일 &lt;em&gt;해야&lt;/em&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="574e424bf0f02d1b18e3ad5386f39a38953e230d" translate="yes" xml:space="preserve">
          <source>Arithmetic and comparison operations on &lt;a href=&quot;generated/numpy.ndarray#numpy.ndarray&quot;&gt;&lt;code&gt;ndarrays&lt;/code&gt;&lt;/a&gt; are defined as element-wise operations, and generally yield &lt;a href=&quot;generated/numpy.ndarray#numpy.ndarray&quot;&gt;&lt;code&gt;ndarray&lt;/code&gt;&lt;/a&gt; objects as results.</source>
          <target state="translated">&lt;a href=&quot;generated/numpy.ndarray#numpy.ndarray&quot;&gt; &lt;code&gt;ndarrays&lt;/code&gt; &lt;/a&gt; 산술 및 비교 연산 은 요소 별 연산으로 정의되며 일반적으로 &lt;a href=&quot;generated/numpy.ndarray#numpy.ndarray&quot;&gt; &lt;code&gt;ndarray&lt;/code&gt; &lt;/a&gt; 객체를 결과로 생성합니다.</target>
        </trans-unit>
        <trans-unit id="6179dfdf1f721c4f139e7add385d54ea9025725c" translate="yes" xml:space="preserve">
          <source>Arithmetic is modular when using integer types, and no error is raised on overflow.</source>
          <target state="translated">정수 유형을 사용할 때는 산술이 모듈 식이며 오버플로시 오류가 발생하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="72188498e399312affe529bd4d440a03ee9c95e4" translate="yes" xml:space="preserve">
          <source>Arithmetic is modular when using integer types, and no error is raised on overflow. That means that, on a 32-bit platform:</source>
          <target state="translated">정수 유형을 사용할 때는 산술이 모듈 식이며 오버플로시 오류가 발생하지 않습니다. 이는 32 비트 플랫폼에서 다음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="339f6492877ce24a534c3f1e9110c317be457d3a" translate="yes" xml:space="preserve">
          <source>Arithmetic mean taken while not ignoring NaNs</source>
          <target state="translated">NaN을 무시하지 않은 채 산술 평균</target>
        </trans-unit>
        <trans-unit id="1fc0feb17ac2848b9f01591a445a367739c560da" translate="yes" xml:space="preserve">
          <source>Arithmetic operations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16ba88bd7d8f2b893c09bcff737706246adcbc3b" translate="yes" xml:space="preserve">
          <source>Arithmetic, in-place:</source>
          <target state="translated">적절한 산술 :</target>
        </trans-unit>
        <trans-unit id="ac2131c4955b2cce396141546558f75712964834" translate="yes" xml:space="preserve">
          <source>Arithmetic, matrix multiplication, and comparison operations</source>
          <target state="translated">산술, 행렬 곱셈 및 비교 연산</target>
        </trans-unit>
        <trans-unit id="d534ca6745f09f171b20632796505d5bd60949d7" translate="yes" xml:space="preserve">
          <source>Arithmetic:</source>
          <target state="translated">Arithmetic:</target>
        </trans-unit>
        <trans-unit id="0771a753fa9fe721bf5720d2f9bacca79fff9e8e" translate="yes" xml:space="preserve">
          <source>Arithmetics</source>
          <target state="translated">Arithmetics</target>
        </trans-unit>
        <trans-unit id="dfc7a32fa9a79ec3a22472c368d871d5e78afd31" translate="yes" xml:space="preserve">
          <source>Array (possibly multi-dimensional) of values for which to to calculate &lt;code&gt;sinc(x)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;sinc(x)&lt;/code&gt; 를 계산할 값의 배열 (다차원 일 수도 있음 ) .</target>
        </trans-unit>
        <trans-unit id="6951f36c01ac0e1bf34c5ee5904784fafce57b89" translate="yes" xml:space="preserve">
          <source>Array API</source>
          <target state="translated">배열 API</target>
        </trans-unit>
        <trans-unit id="5555a6fcea0c1d138c4fd9c9348c13792e83ec8b" translate="yes" xml:space="preserve">
          <source>Array Attributes</source>
          <target state="translated">배열 속성</target>
        </trans-unit>
        <trans-unit id="daa02d3f49bf321fb5979b03ac56b6cd9657dfad" translate="yes" xml:space="preserve">
          <source>Array Functions</source>
          <target state="translated">배열 함수</target>
        </trans-unit>
        <trans-unit id="12d693ff9b1c0d4047e2b7848ca27e4c2aad6719" translate="yes" xml:space="preserve">
          <source>Array Iterator</source>
          <target state="translated">배열 반복자</target>
        </trans-unit>
        <trans-unit id="043a8c676a7d5d7051367cd8181a4b07707df511" translate="yes" xml:space="preserve">
          <source>Array Iterator API</source>
          <target state="translated">배열 반복자 API</target>
        </trans-unit>
        <trans-unit id="23211b01eb261a332c7929b935052183b79935ba" translate="yes" xml:space="preserve">
          <source>Array Iterators</source>
          <target state="translated">배열 반복자</target>
        </trans-unit>
        <trans-unit id="17e44520a1762d19a9e642fb414c494c724cbf21" translate="yes" xml:space="preserve">
          <source>Array Scalars</source>
          <target state="translated">배열 스칼라</target>
        </trans-unit>
        <trans-unit id="2ec85771e631fd3b121a1ff64071bd20ad9c65bf" translate="yes" xml:space="preserve">
          <source>Array attributes</source>
          <target state="translated">배열 속성</target>
        </trans-unit>
        <trans-unit id="447450427b5d5b0e87b960a4d40e39c7fb5454bf" translate="yes" xml:space="preserve">
          <source>Array attributes reflect information that is intrinsic to the array itself. Generally, accessing an array through its attributes allows you to get and sometimes set intrinsic properties of the array without creating a new array. The exposed attributes are the core parts of an array and only some of them can be reset meaningfully without creating a new array. Information on each attribute is given below.</source>
          <target state="translated">배열 속성은 배열 자체에 고유 한 정보를 반영합니다. 일반적으로 해당 속성을 통해 배열에 액세스하면 새 배열을 만들지 않고도 배열의 고유 속성을 가져 오거나 설정할 수 있습니다. 노출 된 속성은 배열의 핵심 부분이며 일부만 새 배열을 만들지 않고 의미있게 재설정 할 수 있습니다. 각 속성에 대한 정보는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="43e339bdd3d217a5df3e10b8dade9046731deb5f" translate="yes" xml:space="preserve">
          <source>Array axis summations, &lt;a href=&quot;numpy.sum#numpy.sum&quot;&gt;&lt;code&gt;numpy.sum&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">배열 합산, 축 &lt;a href=&quot;numpy.sum#numpy.sum&quot;&gt; &lt;code&gt;numpy.sum&lt;/code&gt; 을&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="d7a5d8de55dabc36dc25c0b90e8906cffcb6a61a" translate="yes" xml:space="preserve">
          <source>Array containing data to be averaged. If &lt;code&gt;a&lt;/code&gt; is not an array, a conversion is attempted.</source>
          <target state="translated">평균화 할 데이터가 포함 된 배열입니다. &lt;code&gt;a&lt;/code&gt; 가 배열이 아닌 경우 변환이 시도됩니다.</target>
        </trans-unit>
        <trans-unit id="54d016905c8d5e8ccde24c37f9843bcd318cb81c" translate="yes" xml:space="preserve">
          <source>Array containing elements to clip.</source>
          <target state="translated">클립 할 요소를 포함하는 배열입니다.</target>
        </trans-unit>
        <trans-unit id="3961c6f8eadfe688bca31469d6a9f6d86adf81c6" translate="yes" xml:space="preserve">
          <source>Array containing number of representable floating point numbers between items in &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;a&lt;/code&gt; 와 &lt;code&gt;b&lt;/code&gt; 의 항목 사이에 표현 가능한 부동 소수점 숫자의 수를 포함하는 배열 입니다.</target>
        </trans-unit>
        <trans-unit id="3692161b3a773c7a966c7715be4b4e9968f11340" translate="yes" xml:space="preserve">
          <source>Array containing numbers whose maximum is desired. If &lt;code&gt;a&lt;/code&gt; is not an array, a conversion is attempted.</source>
          <target state="translated">최대 값을 원하는 숫자가 포함 된 배열입니다. &lt;code&gt;a&lt;/code&gt; 가 배열이 아닌 경우 변환이 시도됩니다.</target>
        </trans-unit>
        <trans-unit id="e6449394cdaf60dea5ac71fdd09a0ed9e9fcf7ee" translate="yes" xml:space="preserve">
          <source>Array containing numbers whose mean is desired. If &lt;code&gt;a&lt;/code&gt; is not an array, a conversion is attempted.</source>
          <target state="translated">평균을 원하는 숫자가 포함 된 배열입니다. &lt;code&gt;a&lt;/code&gt; 가 배열이 아닌 경우 변환이 시도됩니다.</target>
        </trans-unit>
        <trans-unit id="535ad2f426544f7de05e5d9017d86d66f0dc26b1" translate="yes" xml:space="preserve">
          <source>Array containing numbers whose minimum is desired. If &lt;code&gt;a&lt;/code&gt; is not an array, a conversion is attempted.</source>
          <target state="translated">최소값을 원하는 숫자가 포함 된 배열입니다. &lt;code&gt;a&lt;/code&gt; 가 배열이 아닌 경우 변환이 시도됩니다.</target>
        </trans-unit>
        <trans-unit id="64bc244f5b24dc5faeb077670f074a7e20727322" translate="yes" xml:space="preserve">
          <source>Array containing numbers whose product is desired. If &lt;code&gt;a&lt;/code&gt; is not an array, a conversion is attempted.</source>
          <target state="translated">제품이 필요한 숫자를 포함하는 배열입니다. &lt;code&gt;a&lt;/code&gt; 가 배열이 아닌 경우 변환이 시도됩니다.</target>
        </trans-unit>
        <trans-unit id="ee6ece6461a907cbfdfd61282756037912ce23f3" translate="yes" xml:space="preserve">
          <source>Array containing numbers whose sum is desired. If &lt;code&gt;a&lt;/code&gt; is not an array, a conversion is attempted.</source>
          <target state="translated">합계를 원하는 숫자가 포함 된 배열입니다. &lt;code&gt;a&lt;/code&gt; 가 배열이 아닌 경우 변환이 시도됩니다.</target>
        </trans-unit>
        <trans-unit id="2effaddf77c674bd9a13dc031c59b1eb4d28fa23" translate="yes" xml:space="preserve">
          <source>Array containing numbers whose variance is desired. If &lt;code&gt;a&lt;/code&gt; is not an array, a conversion is attempted.</source>
          <target state="translated">분산이 필요한 숫자가 포함 된 배열입니다. &lt;code&gt;a&lt;/code&gt; 가 배열이 아닌 경우 변환이 시도됩니다.</target>
        </trans-unit>
        <trans-unit id="f011f52156b6489c00057dbaf1f239251b746676" translate="yes" xml:space="preserve">
          <source>Array containing the roots of the series.</source>
          <target state="translated">계열의 근을 포함하는 배열입니다.</target>
        </trans-unit>
        <trans-unit id="d1fb2d0b90ad27fe772216fd0efb4378564945a2" translate="yes" xml:space="preserve">
          <source>Array contents</source>
          <target state="translated">배열 내용</target>
        </trans-unit>
        <trans-unit id="2ea33ca743035321174ecf9d435d32b0b6324742" translate="yes" xml:space="preserve">
          <source>Array conversion</source>
          <target state="translated">배열 변환</target>
        </trans-unit>
        <trans-unit id="fc6b3a513ef2597bc0f03a1e823241af5164729d" translate="yes" xml:space="preserve">
          <source>Array convolution. Same output as polymul, but has parameter for overlap mode.</source>
          <target state="translated">배열 컨벌루션. polymul과 동일한 출력이지만 오버랩 모드에 대한 매개 변수가 있습니다.</target>
        </trans-unit>
        <trans-unit id="57c72a1a53b95fbe1af3976c75af0287d5c9a140" translate="yes" xml:space="preserve">
          <source>Array creation</source>
          <target state="translated">배열 생성</target>
        </trans-unit>
        <trans-unit id="b5a18bd4e3702b73f0e8bbba0d5f2e2fddff6728" translate="yes" xml:space="preserve">
          <source>Array creation routines</source>
          <target state="translated">배열 생성 루틴</target>
        </trans-unit>
        <trans-unit id="a51f0e8ac2e03ac06587c6b47fb57edec0450c93" translate="yes" xml:space="preserve">
          <source>Array data to be saved.</source>
          <target state="translated">저장할 배열 데이터</target>
        </trans-unit>
        <trans-unit id="4e68baef4a7d203aefd9d4a59b835fc6af2a5db3" translate="yes" xml:space="preserve">
          <source>Array data-type.</source>
          <target state="translated">배열 데이터 유형.</target>
        </trans-unit>
        <trans-unit id="52dbdba544f09b15fca774eb24a9caf2434bcfe6" translate="yes" xml:space="preserve">
          <source>Array desired.</source>
          <target state="translated">원하는 배열.</target>
        </trans-unit>
        <trans-unit id="785376e3605a2b132b04a5af283162b0f7133160" translate="yes" xml:space="preserve">
          <source>Array flags</source>
          <target state="translated">배열 플래그</target>
        </trans-unit>
        <trans-unit id="746aa39a47d26f55bf62b76f045191bc2131b857" translate="yes" xml:space="preserve">
          <source>Array flags provide information about how the memory area used for the array is to be interpreted. There are 7 Boolean flags in use, only four of which can be changed by the user: WRITEBACKIFCOPY, UPDATEIFCOPY, WRITEABLE, and ALIGNED.</source>
          <target state="translated">배열 플래그는 배열에 사용 된 메모리 영역을 해석하는 방법에 대한 정보를 제공합니다. 7 개의 부울 플래그가 사용 중이며 사용자가 WRITEBACKIFCOPY, UPDATEIFCOPY, WRITEABLE 및 ALIGNED 중 4 개만 변경할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5f6e91f1df0558c7246187a2b89a1e305be167b2" translate="yes" xml:space="preserve">
          <source>Array flags; may be one or more of:</source>
          <target state="translated">배열 플래그; 다음 중 하나 이상일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="09f0fcdcc100e898aaa63b04e30eafb660bbc3ed" translate="yes" xml:space="preserve">
          <source>Array from which the diagonals are taken.</source>
          <target state="translated">대각선을 가져 오는 배열입니다.</target>
        </trans-unit>
        <trans-unit id="3966916957967be244949812c17944d586ffd56d" translate="yes" xml:space="preserve">
          <source>Array from which to extract a part.</source>
          <target state="translated">부품을 추출 할 배열입니다.</target>
        </trans-unit>
        <trans-unit id="4a877fe238b2290421c4de0ccb250aa8e3797a13" translate="yes" xml:space="preserve">
          <source>Array interface</source>
          <target state="translated">배열 인터페이스</target>
        </trans-unit>
        <trans-unit id="533db24c36bf6bd74ce0240469f4033043848386" translate="yes" xml:space="preserve">
          <source>Array interpretation of &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="translated">의 배열 해석 . &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1230519a64fd2e0f26f95201257e208e07092a99" translate="yes" xml:space="preserve">
          <source>Array interpretation of &lt;code&gt;a&lt;/code&gt;. If &lt;code&gt;a&lt;/code&gt; is an ndarray or a subclass of ndarray, it is returned as-is and no copy is performed.</source>
          <target state="translated">의 배열 해석 . 경우 &lt;code&gt;a&lt;/code&gt; ndarray 또는 ndarray의 서브 클래스는,있는 그대로 그것은 반환 및 카피가 수행되지 않습니다. &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2a004555e4ca47c97c392427144fe0dcc6f68634" translate="yes" xml:space="preserve">
          <source>Array interpretation of &lt;code&gt;a&lt;/code&gt;. No copy is performed if the input is already an ndarray with matching dtype and order. If &lt;code&gt;a&lt;/code&gt; is a subclass of ndarray, a base class ndarray is returned.</source>
          <target state="translated">의 배열 해석 . 입력이 이미 dtype 및 순서와 일치하는 ndarray 인 경우 복사가 수행되지 않습니다. 경우 &lt;code&gt;a&lt;/code&gt; ndarray의 서브 클래스, 기본 클래스 ndarray이 반환됩니다. &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9a82a73ea4a83ace24f5a89b08b00620d66cb5bf" translate="yes" xml:space="preserve">
          <source>Array interpretation of &lt;code&gt;a&lt;/code&gt;. No copy is performed if the input is already an ndarray. If &lt;code&gt;a&lt;/code&gt; is a subclass of ndarray, a base class ndarray is returned.</source>
          <target state="translated">의 배열 해석 . 입력이 이미 ndarray이면 복사가 수행되지 않습니다. 경우 &lt;code&gt;a&lt;/code&gt; ndarray의 서브 클래스, 기본 클래스 ndarray이 반환됩니다. &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1af36487281180923aa6bea35e0e5228dcc2e12d" translate="yes" xml:space="preserve">
          <source>Array into which the output is placed. Its type is preserved and it must be of the right shape to hold the output.</source>
          <target state="translated">출력이 배치되는 배열입니다. 그 유형은 유지되며 출력을 유지하기에 적합한 모양이어야합니다.</target>
        </trans-unit>
        <trans-unit id="02f71c6bb3adeae64ae8bccd5d811288aeb1d5e1" translate="yes" xml:space="preserve">
          <source>Array into which the result can be placed. Its type is preserved and it must be of the right shape to hold the output.</source>
          <target state="translated">결과를 넣을 수있는 배열입니다. 그 유형은 유지되며 출력을 유지하기에 적합한 모양이어야합니다.</target>
        </trans-unit>
        <trans-unit id="1a57f1ce3b565cb3497401b660e08581c3aafec2" translate="yes" xml:space="preserve">
          <source>Array like index object or slice object for indexing into first operand. If first operand has multiple dimensions, indices can be a tuple of array like index objects or slice objects.</source>
          <target state="translated">첫 번째 피연산자로 인덱싱하기위한 인덱스 객체 또는 슬라이스 객체와 같은 배열입니다. 첫 번째 피연산자가 여러 차원을 갖는 경우 인덱스는 인덱스 개체 또는 슬라이스 개체와 같은 배열의 튜플 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d40d802fdd7ba3f82f5c9dc44f415145a1e22c74" translate="yes" xml:space="preserve">
          <source>Array manipulation routines</source>
          <target state="translated">배열 조작 루틴</target>
        </trans-unit>
        <trans-unit id="069ff2b332e403300b9cde701bf5368c5831882c" translate="yes" xml:space="preserve">
          <source>Array method alternative API</source>
          <target state="translated">배열 방법 대체 API</target>
        </trans-unit>
        <trans-unit id="5a716333b00a93ed3236b0b9385a0a127035480c" translate="yes" xml:space="preserve">
          <source>Array methods</source>
          <target state="translated">배열 방법</target>
        </trans-unit>
        <trans-unit id="4e4004372e15259457b2d1e38548f61c9bc5e00d" translate="yes" xml:space="preserve">
          <source>Array mixins</source>
          <target state="translated">어레이 믹스 인</target>
        </trans-unit>
        <trans-unit id="f161aeb75d90d23a000f60fbe55cf3eae07ee334" translate="yes" xml:space="preserve">
          <source>Array objects</source>
          <target state="translated">배열 객체</target>
        </trans-unit>
        <trans-unit id="cf093406a8132eb8bfd9cf1020e69e3fe6518645" translate="yes" xml:space="preserve">
          <source>Array obtained.</source>
          <target state="translated">배열을 얻었습니다.</target>
        </trans-unit>
        <trans-unit id="6b0a1f1e944aed373e67de14ba6a79b095a23306" translate="yes" xml:space="preserve">
          <source>Array of &lt;code&gt;fill_value&lt;/code&gt; with the given shape, dtype, and order.</source>
          <target state="translated">지정된 모양, dtype 및 순서를 가진 &lt;code&gt;fill_value&lt;/code&gt; 의 배열입니다 .</target>
        </trans-unit>
        <trans-unit id="141b0992112c657405943baa4a593bdfd3d362b8" translate="yes" xml:space="preserve">
          <source>Array of &lt;code&gt;fill_value&lt;/code&gt; with the same shape and type as &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;a&lt;/code&gt; 와 모양 및 유형이 같은 &lt;code&gt;fill_value&lt;/code&gt; 배열입니다 .</target>
        </trans-unit>
        <trans-unit id="d4591434d561c417ccddebc05c5c4eae4564de2b" translate="yes" xml:space="preserve">
          <source>Array of Chebyshev series coefficients. If c is multidimensional the different axis correspond to different variables with the degree in each axis given by the corresponding index.</source>
          <target state="translated">체비 쇼프 계열 계수의 배열. c가 다차원 인 경우, 다른 축은 대응하는 인덱스에 의해 주어진 각 축의 차수를 갖는 다른 변수에 대응한다.</target>
        </trans-unit>
        <trans-unit id="4f8604db9d0154dd7eb0dded915686a2e44b5243" translate="yes" xml:space="preserve">
          <source>Array of Hermite series coefficients. If &lt;code&gt;c&lt;/code&gt; is multidimensional the different axis correspond to different variables with the degree in each axis given by the corresponding index.</source>
          <target state="translated">은자 (Hermite) 시리즈 계수의 배열. 경우 &lt;code&gt;c&lt;/code&gt; 해당 인덱스에 의해 지정된 각 축의 정도와 다른 변수 다차원 다른 축에 대응이다.</target>
        </trans-unit>
        <trans-unit id="817eb4e4585a916e35d1ff46432ac14702692600" translate="yes" xml:space="preserve">
          <source>Array of Hermite series coefficients. If c is multidimensional the different axis correspond to different variables with the degree in each axis given by the corresponding index.</source>
          <target state="translated">은자 (Hermite) 시리즈 계수의 배열. c가 다차원 인 경우, 다른 축은 대응하는 인덱스에 의해 주어진 각 축의 차수를 갖는 다른 변수에 대응한다.</target>
        </trans-unit>
        <trans-unit id="6bb7459da4388ebdd50a78addd0898c1f80aabbe" translate="yes" xml:space="preserve">
          <source>Array of Hermite_e series coefficients. If &lt;code&gt;c&lt;/code&gt; is multidimensional the different axis correspond to different variables with the degree in each axis given by the corresponding index.</source>
          <target state="translated">Hermite_e 시리즈 계수의 배열. 경우 &lt;code&gt;c&lt;/code&gt; 해당 인덱스에 의해 지정된 각 축의 정도와 다른 변수 다차원 다른 축에 대응이다.</target>
        </trans-unit>
        <trans-unit id="63e65a5158a929fafcbc4f8f156592488b9429ea" translate="yes" xml:space="preserve">
          <source>Array of Hermite_e series coefficients. If c is multidimensional the different axis correspond to different variables with the degree in each axis given by the corresponding index.</source>
          <target state="translated">Hermite_e 시리즈 계수의 배열. c가 다차원 인 경우, 다른 축은 대응하는 인덱스에 의해 주어진 각 축의 차수를 갖는 다른 변수에 대응한다.</target>
        </trans-unit>
        <trans-unit id="1ea8d2a10d04a6eb03ee934ed9f9008e87ff51dc" translate="yes" xml:space="preserve">
          <source>Array of Laguerre series coefficients. If &lt;code&gt;c&lt;/code&gt; is multidimensional the different axis correspond to different variables with the degree in each axis given by the corresponding index.</source>
          <target state="translated">Laguerre 시리즈 계수의 배열. 경우 &lt;code&gt;c&lt;/code&gt; 해당 인덱스에 의해 지정된 각 축의 정도와 다른 변수 다차원 다른 축에 대응이다.</target>
        </trans-unit>
        <trans-unit id="35c007605e6d77452f8dad5eb06d7938bab0902f" translate="yes" xml:space="preserve">
          <source>Array of Legendre series coefficients. If c is multidimensional the different axis correspond to different variables with the degree in each axis given by the corresponding index.</source>
          <target state="translated">Legendre 시리즈 계수의 배열. c가 다차원 인 경우, 다른 축은 대응하는 인덱스에 의해 주어진 각 축의 차수를 갖는 다른 변수에 대응한다.</target>
        </trans-unit>
        <trans-unit id="4261b4b77833f5ffb9b4ec031af96d60404d62e0" translate="yes" xml:space="preserve">
          <source>Array of angles in radians, in the range &lt;code&gt;[-pi, pi]&lt;/code&gt;. This is a scalar if both &lt;code&gt;x1&lt;/code&gt; and &lt;code&gt;x2&lt;/code&gt; are scalars.</source>
          <target state="translated">&lt;code&gt;[-pi, pi]&lt;/code&gt; 범위의 라디안 각도 배열입니다 . &lt;code&gt;x1&lt;/code&gt; 과 &lt;code&gt;x2&lt;/code&gt; 가 모두 스칼라 인 경우 스칼라입니다.</target>
        </trans-unit>
        <trans-unit id="d00b51bfc114fceca7b5e804468ddaae71dd1f04" translate="yes" xml:space="preserve">
          <source>Array of bins. It has to be 1-dimensional and monotonic.</source>
          <target state="translated">쓰레기통의 배열. 1 차원적이고 단조로운 것이어야합니다.</target>
        </trans-unit>
        <trans-unit id="2431f4c023950cb461e657c537178d58e27e27dd" translate="yes" xml:space="preserve">
          <source>Array of booleans</source>
          <target state="translated">부울 배열</target>
        </trans-unit>
        <trans-unit id="536a897428fe0f47a3d34f49d6446e12ae81a0e0" translate="yes" xml:space="preserve">
          <source>Array of booleans identical in shape to &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="translated">동일한 형상의 배열 부울 . &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a77bc6459d956649f3ae15d32c4f2c19eb8edf06" translate="yes" xml:space="preserve">
          <source>Array of booleans of same shape as &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="translated">동일 형상의 불리언 배열 . &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a658696b6a89082b912ff090b4b6b37dee9b715c" translate="yes" xml:space="preserve">
          <source>Array of coefficients ordered so that the coefficient of the term of multi-degree i,j is contained in &lt;code&gt;c[i,j]&lt;/code&gt;. If &lt;code&gt;c&lt;/code&gt; has dimension greater than 2 the remaining indices enumerate multiple sets of coefficients.</source>
          <target state="translated">다도 i, j 항의 계수가 &lt;code&gt;c[i,j]&lt;/code&gt; 포함되도록 정렬 된 계수의 배열입니다 . 경우 &lt;code&gt;c&lt;/code&gt; 2보다 큰 차원을 갖는 나머지 지표 계수들의 다수의 세트를 열거.</target>
        </trans-unit>
        <trans-unit id="56c372955c6e7c782716979251e8af46e2f83f0a" translate="yes" xml:space="preserve">
          <source>Array of coefficients ordered so that the coefficient of the term of multi-degree i,j is contained in &lt;code&gt;c[i,j]&lt;/code&gt;. If &lt;code&gt;c&lt;/code&gt; has dimension greater than two the remaining indices enumerate multiple sets of coefficients.</source>
          <target state="translated">다도 i, j 항의 계수가 &lt;code&gt;c[i,j]&lt;/code&gt; 포함되도록 정렬 된 계수의 배열입니다 . 경우 &lt;code&gt;c&lt;/code&gt; 두 개의보다 큰 사이즈를 갖고, 나머지 지수 계수들의 다수의 세트를 열거.</target>
        </trans-unit>
        <trans-unit id="fa76e8a2aedbceba248a9fc307fb834762ffa569" translate="yes" xml:space="preserve">
          <source>Array of coefficients ordered so that the coefficient of the term of multi-degree i,j,k is contained in &lt;code&gt;c[i,j,k]&lt;/code&gt;. If &lt;code&gt;c&lt;/code&gt; has dimension greater than 3 the remaining indices enumerate multiple sets of coefficients.</source>
          <target state="translated">다도 i, j, k 항의 계수가 &lt;code&gt;c[i,j,k]&lt;/code&gt; 포함되도록 정렬 된 계수의 배열입니다 . 경우 &lt;code&gt;c&lt;/code&gt; 3보다 큰 사이즈를 갖고, 나머지 지수 계수들의 다수의 세트를 열거.</target>
        </trans-unit>
        <trans-unit id="2ca7ab8cb88305034f9c8ff4c4bec7fdbf7384a0" translate="yes" xml:space="preserve">
          <source>Array of coefficients ordered so that the coefficients for terms of degree i,j are contained in &lt;code&gt;c[i,j]&lt;/code&gt;. If &lt;code&gt;c&lt;/code&gt; has dimension greater than two the remaining indices enumerate multiple sets of coefficients.</source>
          <target state="translated">차분 i, j에 대한 계수가 &lt;code&gt;c[i,j]&lt;/code&gt; 포함되도록 정렬 된 계수의 배열 . 경우 &lt;code&gt;c&lt;/code&gt; 두 개의보다 큰 사이즈를 갖고, 나머지 지수 계수들의 다수의 세트를 열거.</target>
        </trans-unit>
        <trans-unit id="013054b355ed269971a257a22db8c61fecab58bc" translate="yes" xml:space="preserve">
          <source>Array of coefficients ordered so that the coefficients for terms of degree n are contained in c[n]. If &lt;code&gt;c&lt;/code&gt; is multidimensional the remaining indices enumerate multiple polynomials. In the two dimensional case the coefficients may be thought of as stored in the columns of &lt;code&gt;c&lt;/code&gt;.</source>
          <target state="translated">차수 n 항에 대한 계수가 c [n]에 포함되도록 정렬 된 계수의 배열입니다. 경우 &lt;code&gt;c&lt;/code&gt; 다차원 나머지 인덱스 여러 다항식을 열거. 2 차원 경우에, 계수는 &lt;code&gt;c&lt;/code&gt; 의 열에 저장된 것으로 생각 될 수있다 .</target>
        </trans-unit>
        <trans-unit id="00bc78cb48de3651884eadaf718d38e560006d25" translate="yes" xml:space="preserve">
          <source>Array of evenly spaced values.</source>
          <target state="translated">균일 한 간격의 값으로 구성된 배열입니다.</target>
        </trans-unit>
        <trans-unit id="2d1560c385ed8ca347f0a453a1d3ede23238d315" translate="yes" xml:space="preserve">
          <source>Array of indices into the array. It has the same shape as &lt;code&gt;a.shape&lt;/code&gt; with the dimension along &lt;code&gt;axis&lt;/code&gt; removed.</source>
          <target state="translated">배열에 대한 인덱스 배열. 그것은 동일한 형상 가진다 &lt;code&gt;a.shape&lt;/code&gt; 따라 치수가 &lt;code&gt;axis&lt;/code&gt; 제거한다.</target>
        </trans-unit>
        <trans-unit id="a8ca40e5ac25fd9b6c7a437f8b20abf87b6dd448" translate="yes" xml:space="preserve">
          <source>Array of indices that partition &lt;code&gt;a&lt;/code&gt; along the specified axis. If &lt;code&gt;a&lt;/code&gt; is one-dimensional, &lt;code&gt;a[index_array]&lt;/code&gt; yields a partitioned &lt;code&gt;a&lt;/code&gt;. More generally, &lt;code&gt;np.take_along_axis(a, index_array, axis=a)&lt;/code&gt; always yields the partitioned &lt;code&gt;a&lt;/code&gt;, irrespective of dimensionality.</source>
          <target state="translated">지정된 축을 따라 &lt;code&gt;a&lt;/code&gt; 를 분할 하는 인덱스 배열입니다 . 경우 &lt;code&gt;a&lt;/code&gt; 일차원, &lt;code&gt;a[index_array]&lt;/code&gt; A가 분배 산출 &lt;code&gt;a&lt;/code&gt; . 보다 일반적으로, &lt;code&gt;np.take_along_axis(a, index_array, axis=a)&lt;/code&gt; 는 차원에 관계없이 항상 분할 된 &lt;code&gt;a&lt;/code&gt; 를 생성 합니다.</target>
        </trans-unit>
        <trans-unit id="8b6035bba7c71c43b0b9bba16cae62cbd47fc547" translate="yes" xml:space="preserve">
          <source>Array of indices that sort &lt;code&gt;a&lt;/code&gt; along the specified &lt;code&gt;axis&lt;/code&gt;. If &lt;code&gt;a&lt;/code&gt; is one-dimensional, &lt;code&gt;a[index_array]&lt;/code&gt; yields a sorted &lt;code&gt;a&lt;/code&gt;. More generally, &lt;code&gt;np.take_along_axis(a, index_array, axis=axis)&lt;/code&gt; always yields the sorted &lt;code&gt;a&lt;/code&gt;, irrespective of dimensionality.</source>
          <target state="translated">지정된 &lt;code&gt;axis&lt;/code&gt; 따라 정렬 &lt;code&gt;a&lt;/code&gt; 인덱스 배열입니다 . 경우 &lt;code&gt;a&lt;/code&gt; 일차원, &lt;code&gt;a[index_array]&lt;/code&gt; A가 정렬 산출 &lt;code&gt;a&lt;/code&gt; . 보다 일반적으로 &lt;code&gt;np.take_along_axis(a, index_array, axis=axis)&lt;/code&gt; 는 차원에 관계없이 항상 정렬 된 &lt;code&gt;a&lt;/code&gt; 를 생성 합니다.</target>
        </trans-unit>
        <trans-unit id="a0dc6273aecd116e71b925f830b8b852ca18868e" translate="yes" xml:space="preserve">
          <source>Array of indices that sort &lt;code&gt;a&lt;/code&gt; along the specified axis. In other words, &lt;code&gt;a[index_array]&lt;/code&gt; yields a sorted &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="translated">지정된 축을 따라 정렬 &lt;code&gt;a&lt;/code&gt; 인덱스 배열입니다 . 즉, &lt;code&gt;a[index_array]&lt;/code&gt; 는 정렬 된 &lt;code&gt;a&lt;/code&gt; 를 생성 합니다 .</target>
        </trans-unit>
        <trans-unit id="87cf8b4326e4bf74829f6ee998b605e627a3e05c" translate="yes" xml:space="preserve">
          <source>Array of indices that sort the keys along the specified axis.</source>
          <target state="translated">지정된 축을 따라 키를 정렬하는 인덱스 배열입니다.</target>
        </trans-unit>
        <trans-unit id="9ba877503fdc9b234f8b5bd4ff989ab5b66a993a" translate="yes" xml:space="preserve">
          <source>Array of insertion points with the same shape as &lt;code&gt;v&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;v&lt;/code&gt; 와 모양이 같은 삽입 점 배열 .</target>
        </trans-unit>
        <trans-unit id="eda2f2ab5893d6c8f805112f168403bde8914bdc" translate="yes" xml:space="preserve">
          <source>Array of length &lt;code&gt;n//2 + 1&lt;/code&gt; containing the sample frequencies.</source>
          <target state="translated">샘플 주파수를 포함하는 길이 &lt;code&gt;n//2 + 1&lt;/code&gt; 배열 .</target>
        </trans-unit>
        <trans-unit id="16403e1679edece0422b414ba8df64826286ea95" translate="yes" xml:space="preserve">
          <source>Array of length &lt;code&gt;n&lt;/code&gt; containing the sample frequencies.</source>
          <target state="translated">샘플 주파수를 포함하는 길이 &lt;code&gt;n&lt;/code&gt; 의 배열 .</target>
        </trans-unit>
        <trans-unit id="3e56b710dd7f0b21c34a3b08ffd09a687bf4487b" translate="yes" xml:space="preserve">
          <source>Array of list objects</source>
          <target state="translated">리스트 객체의 배열</target>
        </trans-unit>
        <trans-unit id="8a37d72f2b1b4102a1be6ef75c473c25a6af0723" translate="yes" xml:space="preserve">
          <source>Array of multipliers.</source>
          <target state="translated">승수의 배열.</target>
        </trans-unit>
        <trans-unit id="206e9ffd7bd541d0301a39acc4ace879a4a8c4c0" translate="yes" xml:space="preserve">
          <source>Array of numbers to be decomposed.</source>
          <target state="translated">분해 할 숫자의 배열입니다.</target>
        </trans-unit>
        <trans-unit id="b8d93545bf76db1e421350de1ab5b27bda265c94" translate="yes" xml:space="preserve">
          <source>Array of ones with the given shape, dtype, and order.</source>
          <target state="translated">주어진 모양, dtype 및 순서를 가진 배열.</target>
        </trans-unit>
        <trans-unit id="2a7562df8fd2349ba86c3e8c830bce9f44d2768c" translate="yes" xml:space="preserve">
          <source>Array of ones with the same shape and type as &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="translated">모양과 유형이 &lt;code&gt;a&lt;/code&gt; 와 동일한 배열입니다 .</target>
        </trans-unit>
        <trans-unit id="c57697e4962f7c2af124e859e719b69080933cff" translate="yes" xml:space="preserve">
          <source>Array of ones.</source>
          <target state="translated">하나의 배열.</target>
        </trans-unit>
        <trans-unit id="baa4adf58634fb06ef6ad2372bc5421740221f26" translate="yes" xml:space="preserve">
          <source>Array of points of the same shape as &lt;code&gt;x&lt;/code&gt;, after application of the linear map between the two domains.</source>
          <target state="translated">두 도메인간에 선형 맵을 적용한 후 &lt;code&gt;x&lt;/code&gt; 와 동일한 모양의 점으로 구성된 배열입니다 .</target>
        </trans-unit>
        <trans-unit id="e10ad4b8d9ac04992efd38f05d15c560adaf42ef" translate="yes" xml:space="preserve">
          <source>Array of points. The dtype is converted to float64 or complex128 depending on whether any of the elements are complex. If &lt;code&gt;x&lt;/code&gt; is scalar it is converted to a 1-D array.</source>
          <target state="translated">점의 배열. 요소가 복잡한 지 여부에 따라 dtype이 float64 또는 complex128로 변환됩니다. 경우에 &lt;code&gt;x&lt;/code&gt; 는 스칼라이고 이는 1-D 어레이로 변환된다.</target>
        </trans-unit>
        <trans-unit id="2608e7cd905fe0c68e32ec9f1d08d5e186ac4133" translate="yes" xml:space="preserve">
          <source>Array of polynomial coefficients. If c is multidimensional the different axis correspond to different variables with the degree in each axis given by the corresponding index.</source>
          <target state="translated">다항식 계수의 배열. c가 다차원 인 경우, 다른 축은 대응하는 인덱스에 의해 주어진 각 축의 차수를 갖는 다른 변수에 대응한다.</target>
        </trans-unit>
        <trans-unit id="df9f1c9c3e6efbfb4f90ed818292071092d8d4f0" translate="yes" xml:space="preserve">
          <source>Array of random floats of shape &lt;code&gt;size&lt;/code&gt; (unless &lt;code&gt;size=None&lt;/code&gt;, in which case a single float is returned).</source>
          <target state="translated">모양 &lt;code&gt;size&lt;/code&gt; 의 임의의 부동 소수점 배열 ( &lt;code&gt;size=None&lt;/code&gt; 이 아닌 경우 단일 부동 소수점이 반환 됨).</target>
        </trans-unit>
        <trans-unit id="8c27164f605bc6a37751898bf3ccca7ad65d8b8c" translate="yes" xml:space="preserve">
          <source>Array of roots. If &lt;code&gt;r&lt;/code&gt; is multidimensional the first index is the root index, while the remaining indices enumerate multiple polynomials. For instance, in the two dimensional case the roots of each polynomial may be thought of as stored in the columns of &lt;code&gt;r&lt;/code&gt;.</source>
          <target state="translated">뿌리의 배열. 경우 &lt;code&gt;r&lt;/code&gt; 다차원 나머지 인덱스 여러 다항식을 열거하는 동안 첫번째 인덱스는 원시 인덱스이다. 예를 들어, 2 차원 경우에, 각 다항식의 근은 &lt;code&gt;r&lt;/code&gt; 의 열에 저장된 것으로 생각 될 수있다 .</target>
        </trans-unit>
        <trans-unit id="f5e105f8faad33b4f50f2c4896fe5c70b476d2c2" translate="yes" xml:space="preserve">
          <source>Array of the roots of the polynomial. If all the roots are real, then &lt;code&gt;out&lt;/code&gt; is also real, otherwise it is complex.</source>
          <target state="translated">다항식의 근의 배열입니다. 모든 뿌리가 진짜라면 &lt;code&gt;out&lt;/code&gt; 도 진짜입니다. 그렇지 않으면 복잡합니다.</target>
        </trans-unit>
        <trans-unit id="4d0d9a7ae0205565ce5ab6637ea0bc6fd758edf0" translate="yes" xml:space="preserve">
          <source>Array of the roots of the series. If all the roots are real, then &lt;code&gt;out&lt;/code&gt; is also real, otherwise it is complex.</source>
          <target state="translated">시리즈의 근의 배열입니다. 모든 뿌리가 진짜라면 &lt;code&gt;out&lt;/code&gt; 도 진짜입니다. 그렇지 않으면 복잡합니다.</target>
        </trans-unit>
        <trans-unit id="d523e60421af0d15597be465d458af223885d81e" translate="yes" xml:space="preserve">
          <source>Array of the same shape as &lt;code&gt;x&lt;/code&gt;. This is a scalar if &lt;code&gt;x&lt;/code&gt; is a scalar.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; 와 동일한 모양의 배열입니다 . &lt;code&gt;x&lt;/code&gt; 가 스칼라 인 경우 스칼라입니다.</target>
        </trans-unit>
        <trans-unit id="8fb65c76565be83184293a727b86b612f6baa966" translate="yes" xml:space="preserve">
          <source>Array of the same type and shape as &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="translated">동일한 유형의 배열 및 형상 . &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cde597bca9a6bd0298c0f76843af628711adacdc" translate="yes" xml:space="preserve">
          <source>Array of two or more dimensions.</source>
          <target state="translated">2 차원 이상의 배열.</target>
        </trans-unit>
        <trans-unit id="9c36b99254e0fa9d0972f22709ef88f81c5217da" translate="yes" xml:space="preserve">
          <source>Array of twos exponents. If &lt;code&gt;x1.shape != x2.shape&lt;/code&gt;, they must be broadcastable to a common shape (which becomes the shape of the output).</source>
          <target state="translated">두 지수의 배열. 경우 &lt;code&gt;x1.shape != x2.shape&lt;/code&gt; 들은 (출력의 모양이된다) 공통 캐스트 가능한 형상이어야한다.</target>
        </trans-unit>
        <trans-unit id="ef176723af239a8b84441eb4e1012c9997a74190" translate="yes" xml:space="preserve">
          <source>Array of type uint8 whose elements represent bits corresponding to the logical (0 or nonzero) value of the input elements. The shape of &lt;code&gt;packed&lt;/code&gt; has the same number of dimensions as the input (unless &lt;code&gt;axis&lt;/code&gt; is None, in which case the output is 1-D).</source>
          <target state="translated">요소가 입력 요소의 논리 값 (0 또는 0이 아닌 값)에 해당하는 비트를 나타내는 uint8 유형의 배열입니다. &lt;code&gt;packed&lt;/code&gt; 모양은 입력과 차원 수가 동일합니다 ( &lt;code&gt;axis&lt;/code&gt; 이 없음 인 경우 출력이 1D 임).</target>
        </trans-unit>
        <trans-unit id="d136dd4eb12fa67aaa6854e035f05c7d1d6e0269" translate="yes" xml:space="preserve">
          <source>Array of uninitialized (arbitrary) data of the given shape, dtype, and order. Object arrays will be initialized to None.</source>
          <target state="translated">지정된 모양, dtype 및 순서의 초기화되지 않은 (임의의) 데이터 배열입니다. 객체 배열은 None으로 초기화됩니다.</target>
        </trans-unit>
        <trans-unit id="84a6a10448bc129791439e6ef9301081b2eae3db" translate="yes" xml:space="preserve">
          <source>Array of uninitialized (arbitrary) data with the same shape and type as &lt;code&gt;prototype&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;prototype&lt;/code&gt; 과 동일한 모양과 유형을 가진 초기화되지 않은 (임의의) 데이터 배열 .</target>
        </trans-unit>
        <trans-unit id="e791423834bca116a632635c62e713e7f9a7037b" translate="yes" xml:space="preserve">
          <source>Array of zeros with the given shape, dtype, and order.</source>
          <target state="translated">지정된 모양, dtype 및 순서를 가진 0으로 구성된 배열입니다.</target>
        </trans-unit>
        <trans-unit id="5118cee064bbe572e4b1416e1f0671b0db1bf70d" translate="yes" xml:space="preserve">
          <source>Array of zeros with the same shape and type as &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;a&lt;/code&gt; 와 모양 및 유형이 같은 0으로 구성된 배열입니다 .</target>
        </trans-unit>
        <trans-unit id="16e772e7005bc124d579516af58c7fbb273b27a8" translate="yes" xml:space="preserve">
          <source>Array or &lt;a href=&quot;numpy.poly1d#numpy.poly1d&quot;&gt;&lt;code&gt;poly1d&lt;/code&gt;&lt;/a&gt; object of the difference polynomial&amp;rsquo;s coefficients.</source>
          <target state="translated">차 다항식 계수의 배열 또는 &lt;a href=&quot;numpy.poly1d#numpy.poly1d&quot;&gt; &lt;code&gt;poly1d&lt;/code&gt; &lt;/a&gt; 객체입니다.</target>
        </trans-unit>
        <trans-unit id="367e141a4fff1b31230cbf6695c1abe0275a3a68" translate="yes" xml:space="preserve">
          <source>Array priority.</source>
          <target state="translated">배열 우선 순위.</target>
        </trans-unit>
        <trans-unit id="8afc8a14b9ea339f994a4b92b64eeee0fec93781" translate="yes" xml:space="preserve">
          <source>Array property returning the array transposed.</source>
          <target state="translated">전치 된 배열을 반환하는 배열 속성입니다.</target>
        </trans-unit>
        <trans-unit id="e80625fd7e8e2e9a68261ea8336b974ac71427ae" translate="yes" xml:space="preserve">
          <source>Array protocol: Python side</source>
          <target state="translated">배열 프로토콜 : 파이썬 측</target>
        </trans-unit>
        <trans-unit id="4090e62e110e0132c9a83e32a1060b0b2b11ae1b" translate="yes" xml:space="preserve">
          <source>Array protocol: struct</source>
          <target state="translated">배열 프로토콜 : struct</target>
        </trans-unit>
        <trans-unit id="8bf3a8f5e4206285d07a06e43310e4a207d5bd53" translate="yes" xml:space="preserve">
          <source>Array representing the Chebyshev series of their sum.</source>
          <target state="translated">Chebyshev 계열의 합을 나타내는 배열입니다.</target>
        </trans-unit>
        <trans-unit id="eb3f194c486d46ce1508a5889e8d0e228c628dfe" translate="yes" xml:space="preserve">
          <source>Array representing the Hermite series of their sum.</source>
          <target state="translated">Hermite 계열의 합을 나타내는 배열입니다.</target>
        </trans-unit>
        <trans-unit id="18e93cb56abb59b15e14ea61f7ed36817dbde4e6" translate="yes" xml:space="preserve">
          <source>Array representing the Laguerre series of their sum.</source>
          <target state="translated">Laguerre 계열의 합을 나타내는 배열입니다.</target>
        </trans-unit>
        <trans-unit id="ec5ec69f7e2ff45ce04c960bdf2303ea70114cd3" translate="yes" xml:space="preserve">
          <source>Array representing the Legendre series of their sum.</source>
          <target state="translated">Legendre 계열의 합계를 나타내는 배열입니다.</target>
        </trans-unit>
        <trans-unit id="edc338d6dbe8df5cb4ad885aef823a83fa3236d0" translate="yes" xml:space="preserve">
          <source>Array representing the result of the multiplication.</source>
          <target state="translated">곱셈 결과를 나타내는 배열입니다.</target>
        </trans-unit>
        <trans-unit id="016974069d41d6a6d61d2549905026f66c136979" translate="yes" xml:space="preserve">
          <source>Array scalar checks the value, array does not</source>
          <target state="translated">배열 스칼라는 값을 확인하지만 배열은 그렇지 않습니다.</target>
        </trans-unit>
        <trans-unit id="cc176eaf5a192bedc6a645855de021bd9ca0e1d1" translate="yes" xml:space="preserve">
          <source>Array scalar type</source>
          <target state="translated">배열 스칼라 유형</target>
        </trans-unit>
        <trans-unit id="2ef4e544d40cf2979c0c92b90830370b3508c12a" translate="yes" xml:space="preserve">
          <source>Array scalars can be indexed like 0-dimensional arrays: if &lt;em&gt;x&lt;/em&gt; is an array scalar,</source>
          <target state="translated">배열 스칼라는 0 차원 배열과 같이 인덱싱 할 수 있습니다. &lt;em&gt;x&lt;/em&gt; 가 배열 스칼라 인 경우,</target>
        </trans-unit>
        <trans-unit id="e33eacc8d6c4dbb6e2b8986e0cc11de2dc224ecc" translate="yes" xml:space="preserve">
          <source>Array scalars have exactly the same methods as arrays. The default behavior of these methods is to internally convert the scalar to an equivalent 0-dimensional array and to call the corresponding array method. In addition, math operations on array scalars are defined so that the same hardware flags are set and used to interpret the results as for &lt;a href=&quot;ufuncs#ufuncs&quot;&gt;ufunc&lt;/a&gt;, so that the error state used for ufuncs also carries over to the math on array scalars.</source>
          <target state="translated">배열 스칼라는 배열과 정확히 같은 방법을 갖습니다. 이 메소드의 기본 동작은 스칼라를 내부적으로 동등한 0 차원 배열로 변환하고 해당 배열 메소드를 호출하는 것입니다. 또한 배열 스칼라에 대한 수학 연산이 정의되어 &lt;a href=&quot;ufuncs#ufuncs&quot;&gt;ufunc&lt;/a&gt; 와 동일한 하드웨어 플래그가 설정되고 결과를 해석하는 데 사용 되므로 ufuncs 에 사용되는 오류 상태도 배열 스칼라에 대한 수학으로 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="9e3e59079f5e7b1524c0f3bc70e22cf06a0ad4de" translate="yes" xml:space="preserve">
          <source>Array scalars have the same attributes and methods as &lt;a href=&quot;generated/numpy.ndarray#numpy.ndarray&quot;&gt;&lt;code&gt;ndarrays&lt;/code&gt;&lt;/a&gt;. &lt;a href=&quot;#id2&quot; id=&quot;id1&quot;&gt;[1]&lt;/a&gt; This allows one to treat items of an array partly on the same footing as arrays, smoothing out rough edges that result when mixing scalar and array operations.</source>
          <target state="translated">배열 스칼라는 &lt;a href=&quot;generated/numpy.ndarray#numpy.ndarray&quot;&gt; &lt;code&gt;ndarrays&lt;/code&gt; &lt;/a&gt; 와 동일한 속성 및 메소드를 갖습니다 . &lt;a href=&quot;#id2&quot; id=&quot;id1&quot;&gt;[1]&lt;/a&gt; 이것은 스칼라와 배열 연산을 혼합 할 때 발생하는 거친 가장자리를 부드럽게하여 배열의 항목을 배열과 동일한 기반으로 부분적으로 처리 할 수있게합니다.</target>
        </trans-unit>
        <trans-unit id="9ed6ac908bf9aa1daed6dabda3ab37ae3cfe93cc" translate="yes" xml:space="preserve">
          <source>Array scalars live in a hierarchy (see the Figure below) of data types. They can be detected using the hierarchy: For example, &lt;code&gt;isinstance(val, np.generic)&lt;/code&gt; will return &lt;code&gt;True&lt;/code&gt; if &lt;em&gt;val&lt;/em&gt; is an array scalar object. Alternatively, what kind of array scalar is present can be determined using other members of the data type hierarchy. Thus, for example &lt;code&gt;isinstance(val, np.complexfloating)&lt;/code&gt; will return &lt;code&gt;True&lt;/code&gt; if &lt;em&gt;val&lt;/em&gt; is a complex valued type, while &lt;code&gt;isinstance(val, np.flexible)&lt;/code&gt; will return true if &lt;em&gt;val&lt;/em&gt; is one of the flexible itemsize array types (&lt;code&gt;string&lt;/code&gt;, &lt;code&gt;unicode&lt;/code&gt;, &lt;code&gt;void&lt;/code&gt;).</source>
          <target state="translated">배열 스칼라는 데이터 유형의 계층 구조 (아래 그림 참조)에 있습니다. 예를 들어, &lt;em&gt;val&lt;/em&gt; 이 배열 스칼라 객체 인 경우 &lt;code&gt;isinstance(val, np.generic)&lt;/code&gt; 는 &lt;code&gt;True&lt;/code&gt; 를 반환 합니다. 대안 적으로, 어떤 종류의 배열 스칼라가 존재하는지는 데이터 유형 계층의 다른 멤버를 사용하여 결정될 수있다. 따라서, 예를 들어 대 &lt;code&gt;isinstance(val, np.complexfloating)&lt;/code&gt; 반환 &lt;code&gt;True&lt;/code&gt; 경우 &lt;em&gt;브로는&lt;/em&gt; 복소 값 형태 인 반면, &lt;code&gt;isinstance(val, np.flexible)&lt;/code&gt; 경우에 true를 반환 &lt;em&gt;브로는&lt;/em&gt; 가요 itemsize 어레이 타입 (하나 인 &lt;code&gt;string&lt;/code&gt; , &lt;code&gt;unicode&lt;/code&gt; , &lt;code&gt;void&lt;/code&gt; ).&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="656531cc575d33e2858cc0fa46ccccf4a68a1757" translate="yes" xml:space="preserve">
          <source>Array shape.</source>
          <target state="translated">배열 모양.</target>
        </trans-unit>
        <trans-unit id="ef64ccc224961e26021d9bca9dc014037c55120d" translate="yes" xml:space="preserve">
          <source>Array structure and data access</source>
          <target state="translated">배열 구조 및 데이터 액세스</target>
        </trans-unit>
        <trans-unit id="342f29da2bf216f5bdf0ad7248aaa9e71a355727" translate="yes" xml:space="preserve">
          <source>Array that selects which entries to return. If len(condition) is less than the size of &lt;code&gt;a&lt;/code&gt; along the given axis, then output is truncated to the length of the condition array.</source>
          <target state="translated">반환 할 항목을 선택하는 배열입니다. len (condition)이 주어진 축을 따라 &lt;code&gt;a&lt;/code&gt; 의 크기보다 작 으면 출력이 조건 배열의 길이로 잘립니다.</target>
        </trans-unit>
        <trans-unit id="87d2918cacf26a2502b4f9340bca07e66e5e74fe" translate="yes" xml:space="preserve">
          <source>Array to be divided into sub-arrays.</source>
          <target state="translated">하위 배열로 나눌 배열입니다.</target>
        </trans-unit>
        <trans-unit id="e4b60ba832fd5d14a8b64e94627ba0a71256396f" translate="yes" xml:space="preserve">
          <source>Array to be reshaped.</source>
          <target state="translated">재구성 할 배열입니다.</target>
        </trans-unit>
        <trans-unit id="873958f5c5efd8efa35f71b483ecb2b2925a1b71" translate="yes" xml:space="preserve">
          <source>Array to be resized.</source>
          <target state="translated">크기를 조정할 배열입니다.</target>
        </trans-unit>
        <trans-unit id="b52f152b24d91c43ef9fb5209bce09865fb8369b" translate="yes" xml:space="preserve">
          <source>Array to be sorted.</source>
          <target state="translated">정렬 할 배열입니다.</target>
        </trans-unit>
        <trans-unit id="6b0f55aa6f40b643ba50d2b1a53516ef1346869f" translate="yes" xml:space="preserve">
          <source>Array to check for masked values.</source>
          <target state="translated">마스크 된 값을 확인하기위한 배열입니다.</target>
        </trans-unit>
        <trans-unit id="20f86a6d67f17e927d1d04df5d4b886d82463103" translate="yes" xml:space="preserve">
          <source>Array to create a new.</source>
          <target state="translated">새로운 것을 만들기위한 배열.</target>
        </trans-unit>
        <trans-unit id="a70bc91712a140c808e5cb79192527e68b6c9390" translate="yes" xml:space="preserve">
          <source>Array to mask</source>
          <target state="translated">마스크 할 배열</target>
        </trans-unit>
        <trans-unit id="d43e409e24f30f0a6d90180b76c2efb4ab130452" translate="yes" xml:space="preserve">
          <source>Array to mask.</source>
          <target state="translated">마스크 할 배열입니다.</target>
        </trans-unit>
        <trans-unit id="83c52b56e1210abcac3501b49e1d67729c904dfd" translate="yes" xml:space="preserve">
          <source>Array to put data into.</source>
          <target state="translated">데이터를 넣을 배열.</target>
        </trans-unit>
        <trans-unit id="fd5b40620a3c780ffc94d7f339fd1c7607c14c60" translate="yes" xml:space="preserve">
          <source>Array to sort.</source>
          <target state="translated">정렬 할 배열입니다.</target>
        </trans-unit>
        <trans-unit id="63fbdd1db19d27a9a5c7eab3d132c8bb3f503729" translate="yes" xml:space="preserve">
          <source>Array to test.</source>
          <target state="translated">테스트 할 배열입니다.</target>
        </trans-unit>
        <trans-unit id="55a565dc87ad0f5b9c2ac3f528dacc1158c373a0" translate="yes" xml:space="preserve">
          <source>Array type testing</source>
          <target state="translated">배열 유형 테스트</target>
        </trans-unit>
        <trans-unit id="e4bb8dd78a4c9a8f67c530c9ad1b7a619c52bea4" translate="yes" xml:space="preserve">
          <source>Array whose diagonal is to be filled, it gets modified in-place.</source>
          <target state="translated">대각선을 채울 배열은 제자리에서 수정됩니다.</target>
        </trans-unit>
        <trans-unit id="82c627b6cd9b7d074082f31470ca27bba3557192" translate="yes" xml:space="preserve">
          <source>Array with its lower triangle filled with ones and zero elsewhere; in other words &lt;code&gt;T[i,j] == 1&lt;/code&gt; for &lt;code&gt;i &amp;lt;= j + k&lt;/code&gt;, 0 otherwise.</source>
          <target state="translated">아래쪽 삼각형이 1로 채워지고 다른 곳에서는 0으로 배열됩니다. 다시 말하면 &lt;code&gt;i &amp;lt;= j + k&lt;/code&gt; 경우 &lt;code&gt;T[i,j] == 1&lt;/code&gt; 이고 , 그렇지 않으면 0입니다.</target>
        </trans-unit>
        <trans-unit id="41b54b4163faf0b1aa96452981f42d33d50824ef" translate="yes" xml:space="preserve">
          <source>Array with moved axes. This array is a view of the input array.</source>
          <target state="translated">축이 이동 한 배열. 이 배열은 입력 배열의보기입니다.</target>
        </trans-unit>
        <trans-unit id="84addce66651c27032bab9126d05042eeca1af0e" translate="yes" xml:space="preserve">
          <source>Array with specified requirements and type if given.</source>
          <target state="translated">지정된 요구 사항 및 유형이 지정된 배열.</target>
        </trans-unit>
        <trans-unit id="45f77fd17de7e78ac597a13bf5b178d24ee5d7aa" translate="yes" xml:space="preserve">
          <source>Array-checking restype/argtypes.</source>
          <target state="translated">배열 검사 restype / argtypes.</target>
        </trans-unit>
        <trans-unit id="54d7e23aa660ea078adfa79ac4b2e54c5ef44772" translate="yes" xml:space="preserve">
          <source>Array-protocol type strings (see &lt;a href=&quot;arrays.interface#arrays-interface&quot;&gt;The Array Interface&lt;/a&gt;)</source>
          <target state="translated">배열 프로토콜 유형 문자열 ( &lt;a href=&quot;arrays.interface#arrays-interface&quot;&gt;어레이 인터페이스&lt;/a&gt; 참조 )</target>
        </trans-unit>
        <trans-unit id="7bf6ce513964e0342411a0531bf1b89c426a52c9" translate="yes" xml:space="preserve">
          <source>Array-scalar types</source>
          <target state="translated">배열 스칼라 유형</target>
        </trans-unit>
        <trans-unit id="31b1e39950526e77b6041b42fc1b62056a817d46" translate="yes" xml:space="preserve">
          <source>Arrays &lt;code&gt;x1&lt;/code&gt; and &lt;code&gt;x2&lt;/code&gt; must have the same shape.</source>
          <target state="translated">배열 &lt;code&gt;x1&lt;/code&gt; 과 &lt;code&gt;x2&lt;/code&gt; 는 같은 모양이어야합니다.</target>
        </trans-unit>
        <trans-unit id="f1c67ac3218c1c87b31cea1d27a13f34756f157a" translate="yes" xml:space="preserve">
          <source>Arrays can be both C-style and Fortran-style contiguous simultaneously. This is clear for 1-dimensional arrays, but can also be true for higher dimensional arrays.</source>
          <target state="translated">배열은 C 스타일과 포트란 스타일이 동시에 연속적 일 수 있습니다. 이것은 1 차원 배열에서는 분명하지만 더 높은 차원 배열에서도 마찬가지입니다.</target>
        </trans-unit>
        <trans-unit id="aac913dee168d782f611f9dc70790bf862c5b21d" translate="yes" xml:space="preserve">
          <source>Arrays can be indexed using an extended Python slicing syntax, &lt;code&gt;array[selection]&lt;/code&gt;. Similar syntax is also used for accessing fields in a &lt;a href=&quot;https://docs.scipy.org/doc/numpy-1.17.0/glossary.html#term-structured-data-type&quot;&gt;structured data type&lt;/a&gt;.</source>
          <target state="translated">확장 된 파이썬 슬라이싱 구문 인 &lt;code&gt;array[selection]&lt;/code&gt; 사용하여 배열을 인덱싱 할 수 있습니다 . &lt;a href=&quot;https://docs.scipy.org/doc/numpy-1.17.0/glossary.html#term-structured-data-type&quot;&gt;구조화 된 데이터 유형의&lt;/a&gt; 필드에 액세스 할 때도 비슷한 구문이 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="00ec5e3a73cb29954290e60a6bc0ab13e3437ef3" translate="yes" xml:space="preserve">
          <source>Arrays may have a data-types containing fields, analogous to columns in a spread sheet. An example is &lt;code&gt;[(x, int), (y, float)]&lt;/code&gt;, where each entry in the array is a pair of &lt;code&gt;(int, float)&lt;/code&gt;. Normally, these attributes are accessed using dictionary lookups such as &lt;code&gt;arr['x']&lt;/code&gt; and &lt;code&gt;arr['y']&lt;/code&gt;. Record arrays allow the fields to be accessed as members of the array, using &lt;code&gt;arr.x&lt;/code&gt; and &lt;code&gt;arr.y&lt;/code&gt;.</source>
          <target state="translated">배열에는 스프레드 시트의 열과 유사한 필드를 포함하는 데이터 유형이있을 수 있습니다. 예를 들어 &lt;code&gt;[(x, int), (y, float)]&lt;/code&gt; . 여기서 배열의 각 항목은 &lt;code&gt;(int, float)&lt;/code&gt; 쌍입니다 . 일반적으로 이러한 속성은 &lt;code&gt;arr['x']&lt;/code&gt; 및 &lt;code&gt;arr['y']&lt;/code&gt; 와 같은 사전 검색을 사용하여 액세스합니다 . 레코드 배열을 사용하면 &lt;code&gt;arr.x&lt;/code&gt; 및 &lt;code&gt;arr.y&lt;/code&gt; 를 사용하여 필드를 배열의 구성원으로 액세스 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d404bf1fb512f78d1d6fefbd98ddbbf1ae665dd2" translate="yes" xml:space="preserve">
          <source>Arrays of evenly spaced numbers in N-dimensions.</source>
          <target state="translated">N- 차원으로 균일 한 간격으로 배열 된 숫자.</target>
        </trans-unit>
        <trans-unit id="b8de1bbbfd3c637354288fac451e8a7c60ba28fc" translate="yes" xml:space="preserve">
          <source>Arrays of point coordinates, all of the same shape. The dtypes will be converted to either float64 or complex128 depending on whether any of the elements are complex. Scalars are converted to 1-D arrays.</source>
          <target state="translated">모두 같은 모양의 점 좌표 배열. dtype은 요소가 복잡한 지 여부에 따라 float64 또는 complex128로 변환됩니다. 스칼라는 1 차원 배열로 변환됩니다.</target>
        </trans-unit>
        <trans-unit id="52434d147f7a6b19ab25a12561971251796b7c3c" translate="yes" xml:space="preserve">
          <source>Arrays of strings are not swapped</source>
          <target state="translated">문자열 배열은 교체되지 않습니다</target>
        </trans-unit>
        <trans-unit id="fc13f22057f28c646ca1b198ca565af87af49f1b" translate="yes" xml:space="preserve">
          <source>Arrays of values. If &lt;code&gt;x1.shape != x2.shape&lt;/code&gt;, they must be broadcastable to a common shape (which becomes the shape of the output).</source>
          <target state="translated">값의 배열. 경우 &lt;code&gt;x1.shape != x2.shape&lt;/code&gt; 들은 (출력의 모양이된다) 공통 캐스트 가능한 형상이어야한다.</target>
        </trans-unit>
        <trans-unit id="e6f0032138e45d68f74e2c44f2f735c8b5313272" translate="yes" xml:space="preserve">
          <source>Arrays should be constructed using &lt;a href=&quot;numpy.array#numpy.array&quot;&gt;&lt;code&gt;array&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;numpy.zeros#numpy.zeros&quot;&gt;&lt;code&gt;zeros&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;numpy.empty#numpy.empty&quot;&gt;&lt;code&gt;empty&lt;/code&gt;&lt;/a&gt; (refer to the See Also section below). The parameters given here refer to a low-level method (&lt;code&gt;ndarray(&amp;hellip;)&lt;/code&gt;) for instantiating an array.</source>
          <target state="translated">배열은 &lt;a href=&quot;numpy.array#numpy.array&quot;&gt; &lt;code&gt;array&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;numpy.zeros#numpy.zeros&quot;&gt; &lt;code&gt;zeros&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;numpy.empty#numpy.empty&quot;&gt; &lt;code&gt;empty&lt;/code&gt; &lt;/a&gt;값을 사용하여 구성해야합니다 (아래 참조 섹션 참조). 여기에 주어진 매개 변수 는 배열 인스턴스화를위한 저수준 메소드 ( &lt;code&gt;ndarray(&amp;hellip;)&lt;/code&gt; )를 참조합니다.</target>
        </trans-unit>
        <trans-unit id="c2fde1777833050ff202f7b922dc5d2847610f32" translate="yes" xml:space="preserve">
          <source>Arrays to save to the file. Arrays will be saved in the file with the keyword names.</source>
          <target state="translated">파일에 저장할 배열입니다. 배열은 키워드 이름으로 파일에 저장됩니다.</target>
        </trans-unit>
        <trans-unit id="4ba46cb118e6a4c1684691ff4c3a66ca5c9411f7" translate="yes" xml:space="preserve">
          <source>Arrays to save to the file. Since it is not possible for Python to know the names of the arrays outside &lt;a href=&quot;#numpy.savez&quot;&gt;&lt;code&gt;savez&lt;/code&gt;&lt;/a&gt;, the arrays will be saved with names &amp;ldquo;arr_0&amp;rdquo;, &amp;ldquo;arr_1&amp;rdquo;, and so on. These arguments can be any expression.</source>
          <target state="translated">파일에 저장할 배열입니다. Python이 &lt;a href=&quot;#numpy.savez&quot;&gt; &lt;code&gt;savez&lt;/code&gt; &lt;/a&gt; 외부의 배열 이름을 알 수 없으므로 배열은 &quot;arr_0&quot;, &quot;arr_1&quot;등의 이름으로 저장됩니다. 이러한 주장은 어떤 표현이든 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f51d18ef0f932163df8ae83aea003301ffa197e5" translate="yes" xml:space="preserve">
          <source>Arrays to save to the file. Since it is not possible for Python to know the names of the arrays outside &lt;a href=&quot;numpy.savez#numpy.savez&quot;&gt;&lt;code&gt;savez&lt;/code&gt;&lt;/a&gt;, the arrays will be saved with names &amp;ldquo;arr_0&amp;rdquo;, &amp;ldquo;arr_1&amp;rdquo;, and so on. These arguments can be any expression.</source>
          <target state="translated">파일에 저장할 배열입니다. Python이 &lt;a href=&quot;numpy.savez#numpy.savez&quot;&gt; &lt;code&gt;savez&lt;/code&gt; &lt;/a&gt; 외부의 배열 이름을 알 수 없으므로 배열은 &quot;arr_0&quot;, &quot;arr_1&quot;등의 이름으로 저장됩니다. 이러한 주장은 어떤 표현이든 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="44d87a6dc57d91b7292b09dc95f59e76af66bd2d" translate="yes" xml:space="preserve">
          <source>Arrays to stack. All of them must have the same first dimension.</source>
          <target state="translated">스택 할 배열입니다. 그들 모두는 첫 번째 차원이 같아야합니다.</target>
        </trans-unit>
        <trans-unit id="b99248188fbd19d8c22a40832b75d837dc4de460" translate="yes" xml:space="preserve">
          <source>Arrays with complex dtypes don&amp;rsquo;t return True.</source>
          <target state="translated">복잡한 dtype을 가진 배열은 True를 반환하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="816e3f055425505d10d82fdb50f19dc782762aaa" translate="yes" xml:space="preserve">
          <source>Arrayterator.flat</source>
          <target state="translated">Arrayterator.flat</target>
        </trans-unit>
        <trans-unit id="e63ac43cdcb5a4238c7b9262748f81e7cf3457ea" translate="yes" xml:space="preserve">
          <source>Arrayterator.shape</source>
          <target state="translated">Arrayterator.shape</target>
        </trans-unit>
        <trans-unit id="62735fb443777d7de2d1c29ccbb762ccfb2be570" translate="yes" xml:space="preserve">
          <source>As &lt;a href=&quot;#numpy.ma.MaskedArray&quot;&gt;&lt;code&gt;MaskedArray&lt;/code&gt;&lt;/a&gt; is a subclass of &lt;a href=&quot;generated/numpy.ndarray#numpy.ndarray&quot;&gt;&lt;code&gt;ndarray&lt;/code&gt;&lt;/a&gt;, a masked array also inherits all the attributes and properties of a &lt;a href=&quot;generated/numpy.ndarray#numpy.ndarray&quot;&gt;&lt;code&gt;ndarray&lt;/code&gt;&lt;/a&gt; instance.</source>
          <target state="translated">으로 &lt;a href=&quot;#numpy.ma.MaskedArray&quot;&gt; &lt;code&gt;MaskedArray&lt;/code&gt; 이&lt;/a&gt; 의 서브 클래스입니다 &lt;a href=&quot;generated/numpy.ndarray#numpy.ndarray&quot;&gt; &lt;code&gt;ndarray&lt;/code&gt; 는&lt;/a&gt; , 마스크 배열은 속성과 속성 모든 상속 &lt;a href=&quot;generated/numpy.ndarray#numpy.ndarray&quot;&gt; &lt;code&gt;ndarray&lt;/code&gt; &lt;/a&gt; 인스턴스를.</target>
        </trans-unit>
        <trans-unit id="266410aaeb848f2f7510db1bcf8e20c2778f75df" translate="yes" xml:space="preserve">
          <source>As a &lt;a href=&quot;maskedarray.baseclass#numpy.ma.MaskedArray&quot;&gt;&lt;code&gt;MaskedArray&lt;/code&gt;&lt;/a&gt; is a subclass of &lt;a href=&quot;generated/numpy.ndarray#numpy.ndarray&quot;&gt;&lt;code&gt;numpy.ndarray&lt;/code&gt;&lt;/a&gt;, it inherits its mechanisms for indexing and slicing.</source>
          <target state="translated">A와 &lt;a href=&quot;maskedarray.baseclass#numpy.ma.MaskedArray&quot;&gt; &lt;code&gt;MaskedArray&lt;/code&gt; 이&lt;/a&gt; 의 서브 클래스입니다 &lt;a href=&quot;generated/numpy.ndarray#numpy.ndarray&quot;&gt; &lt;code&gt;numpy.ndarray&lt;/code&gt; &lt;/a&gt; , 그것은 인덱싱과 슬라이싱에 대한 메커니즘을 상속합니다.</target>
        </trans-unit>
        <trans-unit id="572a6b072b5d5bfb6b919bf3e8415158c50e5fd9" translate="yes" xml:space="preserve">
          <source>As a convenience for &lt;code&gt;__array_function__&lt;/code&gt; implementors, &lt;code&gt;types&lt;/code&gt; provides all argument types with an &lt;code&gt;'__array_function__'&lt;/code&gt; attribute. This allows implementors to quickly identify cases where they should defer to &lt;code&gt;__array_function__&lt;/code&gt; implementations on other arguments. Implementations should not rely on the iteration order of &lt;code&gt;types&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;__array_function__&lt;/code&gt; 구현 자의 편의를 위해 &lt;code&gt;types&lt;/code&gt; 는 모든 인수 유형에 &lt;code&gt;'__array_function__'&lt;/code&gt; 특성을 제공합니다. 이를 통해 구현 &lt;code&gt;__array_function__&lt;/code&gt; 다른 인수에 대한 __array_function__ 구현을 연기해야하는 경우를 신속하게 식별 할 수 있습니다 . 구현은 &lt;code&gt;types&lt;/code&gt; 의 반복 순서에 의존해서는 안됩니다 .</target>
        </trans-unit>
        <trans-unit id="943758d1e20ad4276263519968fa94f16b718bb2" translate="yes" xml:space="preserve">
          <source>As a corollary to this change, we no longer prohibit casting between datetimes with date units and datetimes with timeunits. With timezone naive datetimes, the rule for casting from dates to times is no longer ambiguous.</source>
          <target state="translated">이 변경의 결과로 더 이상 날짜 단위가있는 날짜 시간과 시간 단위가있는 날짜 시간 간 전송을 더 이상 금지하지 않습니다. 시간대 순진 날짜 시간을 사용하면 날짜에서 시간으로의 캐스트 규칙이 더 이상 모호하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="20a42179492180fa8aaa4dc644b08e20ca1aef18" translate="yes" xml:space="preserve">
          <source>As an alternative to &lt;code&gt;pytest.mark.&amp;lt;label&amp;gt;&lt;/code&gt;, there are a number of labels you can use.</source>
          <target state="translated">&lt;code&gt;pytest.mark.&amp;lt;label&amp;gt;&lt;/code&gt; 대신 사용할 수있는 레이블이 많이 있습니다.</target>
        </trans-unit>
        <trans-unit id="f7ec8e32822a5e0a0d90b5363a2541452778cbc3" translate="yes" xml:space="preserve">
          <source>As an example, we print out the result of broadcasting a one and a two dimensional array together.</source>
          <target state="translated">예를 들어, 1 차원 배열과 2 차원 배열을 함께 브로드 캐스트 한 결과를 인쇄합니다.</target>
        </trans-unit>
        <trans-unit id="8f262d8c602a1c1784a0611d8d573ccc9d004b7a" translate="yes" xml:space="preserve">
          <source>As an illustration, let&amp;rsquo;s consider the following dataset:</source>
          <target state="translated">예를 들어 다음 데이터 세트를 고려해 보겠습니다.</target>
        </trans-unit>
        <trans-unit id="ff6fd804dd39db5798ff08b4b25e0937a2c068e3" translate="yes" xml:space="preserve">
          <source>As an trivial example, consider this implementation of an &lt;code&gt;ArrayLike&lt;/code&gt; class that simply wraps a NumPy array and ensures that the result of any arithmetic operation is also an &lt;code&gt;ArrayLike&lt;/code&gt; object:</source>
          <target state="translated">사소한 예로서, 단순히 NumPy 배열을 감싸고 산술 연산의 결과가 &lt;code&gt;ArrayLike&lt;/code&gt; 객체 인지 확인 하는 &lt;code&gt;ArrayLike&lt;/code&gt; 클래스 의이 구현을 고려하십시오 .</target>
        </trans-unit>
        <trans-unit id="cede8d515f0ee49ac10c9ddedbb9f437527bae9a" translate="yes" xml:space="preserve">
          <source>As can be seen, the &amp;ldquo;good&amp;rdquo; parts have shrunk to insignificance. In using Chebyshev polynomials for fitting we want to use the region where &lt;code&gt;x&lt;/code&gt; is between -1 and 1 and that is what the &lt;code&gt;window&lt;/code&gt; specifies. However, it is unlikely that the data to be fit has all its data points in that interval, so we use &lt;code&gt;domain&lt;/code&gt; to specify the interval where the data points lie. When the fit is done, the domain is first mapped to the window by a linear transformation and the usual least squares fit is done using the mapped data points. The window and domain of the fit are part of the returned series and are automatically used when computing values, derivatives, and such. If they aren&amp;rsquo;t specified in the call the fitting routine will use the default window and the smallest domain that holds all the data points. This is illustrated below for a fit to a noisy sine curve.</source>
          <target state="translated">보다시피, &quot;좋은&quot;부품은 무의미 해졌다. 피팅에 Chebyshev 다항식을 사용할 때 &lt;code&gt;x&lt;/code&gt; 가 -1과 1 사이 의 영역을 사용하고 이것이 &lt;code&gt;window&lt;/code&gt; 지정 하는 영역을 사용하려고 합니다. 그러나 적합 할 데이터가 해당 간격의 모든 데이터 포인트를 가질 가능성은 낮으므로 &lt;code&gt;domain&lt;/code&gt; 을 사용 합니다.데이터 포인트가있는 간격을 지정합니다. 맞춤이 완료되면 선형 변환에 의해 도메인이 먼저 창에 매핑되고 매핑 된 데이터 포인트를 사용하여 일반적으로 최소 제곱 맞춤이 수행됩니다. 적합의 창과 영역은 반환 된 계열의 일부이며 값, 미분 등을 계산할 때 자동으로 사용됩니다. 호출에 지정되지 않은 경우 피팅 루틴은 기본 창과 모든 데이터 포인트를 보유하는 가장 작은 도메인을 사용합니다. 시끄러운 사인 곡선에 맞추기 위해 아래에 설명되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="6eb7f695a43a210c4ab19e5bc957617a28b1a107" translate="yes" xml:space="preserve">
          <source>As for &lt;code&gt;ndarray.tobytes&lt;/code&gt;, information about the shape, dtype, etc., but also about &lt;a href=&quot;../maskedarray.baseclass#numpy.ma.MaskedArray.fill_value&quot;&gt;&lt;code&gt;fill_value&lt;/code&gt;&lt;/a&gt;, will be lost.</source>
          <target state="translated">에 관해서는 &lt;code&gt;ndarray.tobytes&lt;/code&gt; 등 모양, DTYPE에 대한 정보뿐만 아니라 약 &lt;a href=&quot;../maskedarray.baseclass#numpy.ma.MaskedArray.fill_value&quot;&gt; &lt;code&gt;fill_value&lt;/code&gt; 를&lt;/a&gt; , 손실됩니다.</target>
        </trans-unit>
        <trans-unit id="b59d207ef2133a3867224936518ca5838dca25c9" translate="yes" xml:space="preserve">
          <source>As it turns out, numpy is smart enough when dealing with ufuncs to determine which index is the most rapidly varying one in memory and uses that for the innermost loop. Thus for ufuncs there is no large intrinsic advantage to either approach in most cases. On the other hand, use of .flat with an FORTRAN ordered array will lead to non-optimal memory access as adjacent elements in the flattened array (iterator, actually) are not contiguous in memory.</source>
          <target state="translated">numpy는 ufunc를 처리 할 때 메모리에서 가장 빠르게 변화하는 인덱스를 결정하고 가장 안쪽 루프에 사용하는 인덱스를 결정할 때 충분히 영리합니다. 따라서 ufuncs의 경우 대부분의 경우 두 가지 접근 방식에 비해 본질적인 이점이 없습니다. 반면, FORTRAN 정렬 배열과 함께 .flat을 사용하면 병합 배열 (실제로 반복자)의 인접 요소가 메모리에서 연속적이지 않으므로 최적의 메모리 액세스가 발생하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="13dc2b7c8c10ac2fc73aefee2fde7f627c9b6aa2" translate="yes" xml:space="preserve">
          <source>As mentioned previously, the flat attribute of ndarray objects returns an iterator that will cycle over the entire array in C-style contiguous order.</source>
          <target state="translated">앞에서 언급했듯이 ndarray 객체의 flat 특성은 C 배열 연속 순서로 전체 배열을 순환하는 반복자를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="6bb256df55b0c84359db8c790668112e195bd64a" translate="yes" xml:space="preserve">
          <source>As noted above the inverse Gaussian distribution first arise from attempts to model Brownian motion. It is also a competitor to the Weibull for use in reliability modeling and modeling stock returns and interest rate processes.</source>
          <target state="translated">위에서 언급 한 바와 같이 역 가우시안 분포는 먼저 브라운 운동을 모델링하려는 시도에서 발생합니다. 또한 주식 수익률 및 금리 프로세스의 신뢰성 모델링 및 모델링에 사용하기 위해 Weibull의 경쟁 업체입니다.</target>
        </trans-unit>
        <trans-unit id="ec730138fa95973e97f6613bc68aa1a1f0c5aafb" translate="yes" xml:space="preserve">
          <source>As of 1.6, this function simply calls &lt;a href=&quot;#c.PyArray_CopyInto&quot;&gt;&lt;code&gt;PyArray_CopyInto&lt;/code&gt;&lt;/a&gt;, which handles the casting.</source>
          <target state="translated">1.6 &lt;a href=&quot;#c.PyArray_CopyInto&quot;&gt; &lt;code&gt;PyArray_CopyInto&lt;/code&gt; &lt;/a&gt; 함수는 단순히 캐스팅을 처리하는 PyArray_CopyInto 를 호출합니다 .</target>
        </trans-unit>
        <trans-unit id="3f3530b3b21291b3dd3b74336008cc7a706ed945" translate="yes" xml:space="preserve">
          <source>As of NumPy 1.10, the returned array will have the same type as the input array. (for example, a masked array will be returned for a masked array input)</source>
          <target state="translated">NumPy 1.10부터 반환 된 배열은 입력 배열과 동일한 유형을 갖습니다. (예를 들어, 마스크 배열은 마스크 배열 입력에 대해 반환됩니다)</target>
        </trans-unit>
        <trans-unit id="12042a22f9b6865da757e69e8d2ce21273a85e0c" translate="yes" xml:space="preserve">
          <source>As of NumPy 1.4.0 &lt;a href=&quot;#numpy.argsort&quot;&gt;&lt;code&gt;argsort&lt;/code&gt;&lt;/a&gt; works with real/complex arrays containing nan values. The enhanced sort order is documented in &lt;a href=&quot;numpy.sort#numpy.sort&quot;&gt;&lt;code&gt;sort&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">NumPy 1.4.0 &lt;a href=&quot;#numpy.argsort&quot;&gt; &lt;code&gt;argsort&lt;/code&gt; &lt;/a&gt; 는 nan 값을 포함하는 실수 / 복잡한 배열에서 작동합니다. 향상된 정렬 순서에 설명되어 있습니다 &lt;a href=&quot;numpy.sort#numpy.sort&quot;&gt; &lt;code&gt;sort&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="bba53cf9adf4ac58af71ddd4d6acfa9ee160b6ec" translate="yes" xml:space="preserve">
          <source>As of NumPy 1.4.0 &lt;a href=&quot;#numpy.searchsorted&quot;&gt;&lt;code&gt;searchsorted&lt;/code&gt;&lt;/a&gt; works with real/complex arrays containing &lt;a href=&quot;../constants#numpy.nan&quot;&gt;&lt;code&gt;nan&lt;/code&gt;&lt;/a&gt; values. The enhanced sort order is documented in &lt;a href=&quot;numpy.sort#numpy.sort&quot;&gt;&lt;code&gt;sort&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">NumPy 1.4.0 현재 &lt;a href=&quot;#numpy.searchsorted&quot;&gt; &lt;code&gt;searchsorted&lt;/code&gt; &lt;/a&gt; 는 &lt;a href=&quot;../constants#numpy.nan&quot;&gt; &lt;code&gt;nan&lt;/code&gt; &lt;/a&gt; 값을 포함하는 실수 / 복잡한 배열로 작동 합니다. 향상된 정렬 순서에 설명되어 있습니다 &lt;a href=&quot;numpy.sort#numpy.sort&quot;&gt; &lt;code&gt;sort&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="17597aa038b28f9f5c8df2774b1f9eab6ad3af4c" translate="yes" xml:space="preserve">
          <source>As of NumPy 1.6.0, these array iterators are superceded by the new array iterator, &lt;a href=&quot;c-api.iterator#c.NpyIter&quot;&gt;&lt;code&gt;NpyIter&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">NumPy 1.6.0 &lt;a href=&quot;c-api.iterator#c.NpyIter&quot;&gt; &lt;code&gt;NpyIter&lt;/code&gt; &lt;/a&gt; 배열 반복자는 새로운 배열 반복자 인 NpyIter 로 대체됩니다 .</target>
        </trans-unit>
        <trans-unit id="0eb75b8579bfe992aa268341a4c85c6d503920b9" translate="yes" xml:space="preserve">
          <source>As the scale approaches infinity, the distribution becomes more like a Gaussian. Some references claim that the Wald is an inverse Gaussian with mean equal to 1, but this is by no means universal.</source>
          <target state="translated">스케일이 무한대에 가까울수록 분포는 가우시안처럼됩니다. 일부 참고 문헌은 Wald가 평균 1과 같은 역 가우시안이라고 주장하지만 이것이 보편적 인 것은 아닙니다.</target>
        </trans-unit>
        <trans-unit id="2f0e40b24d4f520710fd1ed228a57a1690ea8227" translate="yes" xml:space="preserve">
          <source>As well as the scalar array special case signaling that an integer array was interpreted as an integer index, which is important because an integer array index forces a copy but is ignored if a scalar is returned (full integer index). The prepared index is guaranteed to be valid with the exception of out of bound values and broadcasting errors for advanced indexing. This includes that an ellipsis is added for incomplete indices for example when a two dimensional array is indexed with a single integer.</source>
          <target state="translated">정수 배열이 정수 인덱스로 해석되었다는 신호를 표시하는 스칼라 배열 특수 사례뿐만 아니라 정수 배열 인덱스가 사본을 강제 실행하지만 스칼라가 리턴되는 경우 (전 정수 인덱스) 무시되므로 중요합니다. 준비된 인덱스는 범위를 벗어난 값과 고급 인덱싱에 대한 브로드 캐스트 오류를 ​​제외하고 유효합니다. 여기에는 2 차원 배열이 단일 정수로 색인화 될 때 불완전한 색인에 줄임표가 추가되는 것도 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="925814af80369e67056380832c2cbc226e28baa6" translate="yes" xml:space="preserve">
          <source>As with other container objects in Python, the contents of an &lt;a href=&quot;generated/numpy.ndarray#numpy.ndarray&quot;&gt;&lt;code&gt;ndarray&lt;/code&gt;&lt;/a&gt; can be accessed and modified by &lt;a href=&quot;arrays.indexing#arrays-indexing&quot;&gt;indexing or slicing&lt;/a&gt; the array (using, for example, &lt;em&gt;N&lt;/em&gt; integers), and via the methods and attributes of the &lt;a href=&quot;generated/numpy.ndarray#numpy.ndarray&quot;&gt;&lt;code&gt;ndarray&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Python의 다른 컨테이너 객체와 마찬가지로 &lt;a href=&quot;generated/numpy.ndarray#numpy.ndarray&quot;&gt; &lt;code&gt;ndarray&lt;/code&gt; &lt;/a&gt; 의 내용은 배열 을 &lt;a href=&quot;arrays.indexing#arrays-indexing&quot;&gt;인덱싱하거나 슬라이싱&lt;/a&gt; (예 : &lt;em&gt;N&lt;/em&gt; 정수 사용)하고 &lt;a href=&quot;generated/numpy.ndarray#numpy.ndarray&quot;&gt; &lt;code&gt;ndarray&lt;/code&gt; &lt;/a&gt; 의 메소드와 속성을 통해 액세스하고 수정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="b3cf9d2ab1eb546a2eba1efeb64eb1e97091b955" translate="yes" xml:space="preserve">
          <source>Assemble an nd-array from nested lists of blocks.</source>
          <target state="translated">중첩 된 블록 목록에서 배열을 배열하십시오.</target>
        </trans-unit>
        <trans-unit id="74cbd6c218f89d00f752e7ba4b2b17d97a1a1ff7" translate="yes" xml:space="preserve">
          <source>Assemble arrays from blocks.</source>
          <target state="translated">블록에서 배열을 조립하십시오.</target>
        </trans-unit>
        <trans-unit id="79536b913447cc8edd9ecd5192bb8530d9a9202a" translate="yes" xml:space="preserve">
          <source>Assert fails with numerical inprecision with floats:</source>
          <target state="translated">부동 소수점이있는 숫자의 정밀도가 틀리면 Assert가 실패합니다.</target>
        </trans-unit>
        <trans-unit id="561c16749736b8dbda1124817a2b4447de5e4505" translate="yes" xml:space="preserve">
          <source>Asserts</source>
          <target state="translated">Asserts</target>
        </trans-unit>
        <trans-unit id="ae9a24254ec6cd55a31a48c28461f44e73e53f66" translate="yes" xml:space="preserve">
          <source>Assume &lt;code&gt;mask_func&lt;/code&gt; is a function that, for a square array a of size &lt;code&gt;(n, n)&lt;/code&gt; with a possible offset argument &lt;code&gt;k&lt;/code&gt;, when called as &lt;code&gt;mask_func(a, k)&lt;/code&gt; returns a new array with zeros in certain locations (functions like &lt;a href=&quot;numpy.triu#numpy.triu&quot;&gt;&lt;code&gt;triu&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;numpy.tril#numpy.tril&quot;&gt;&lt;code&gt;tril&lt;/code&gt;&lt;/a&gt; do precisely this). Then this function returns the indices where the non-zero values would be located.</source>
          <target state="translated">가정 &lt;code&gt;mask_func&lt;/code&gt; 하는 크기의 정사각형 어레이 A의 것을 함수 &lt;code&gt;(n, n)&lt;/code&gt; 의 가능한 오프셋 인자와 &lt;code&gt;k&lt;/code&gt; 로 불리는 &lt;code&gt;mask_func(a, k)&lt;/code&gt; 특정 위치에서 제로로 새로운 배열을 반환 (같은 기능 &lt;a href=&quot;numpy.triu#numpy.triu&quot;&gt; &lt;code&gt;triu&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;numpy.tril#numpy.tril&quot;&gt; &lt;code&gt;tril&lt;/code&gt; &lt;/a&gt; 정확히 이것을하십시오). 그런 다음이 함수는 0이 아닌 값이있는 인덱스를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="87a473db70c6a624c40e23afb12c39561d92a618" translate="yes" xml:space="preserve">
          <source>Assume &lt;em&gt;n&lt;/em&gt; is the number of elements in the dimension being sliced. Then, if &lt;em&gt;i&lt;/em&gt; is not given it defaults to 0 for &lt;em&gt;k &amp;gt; 0&lt;/em&gt; and &lt;em&gt;n - 1&lt;/em&gt; for &lt;em&gt;k &amp;lt; 0&lt;/em&gt; . If &lt;em&gt;j&lt;/em&gt; is not given it defaults to &lt;em&gt;n&lt;/em&gt; for &lt;em&gt;k &amp;gt; 0&lt;/em&gt; and &lt;em&gt;-n-1&lt;/em&gt; for &lt;em&gt;k &amp;lt; 0&lt;/em&gt; . If &lt;em&gt;k&lt;/em&gt; is not given it defaults to 1. Note that &lt;code&gt;::&lt;/code&gt; is the same as &lt;code&gt;:&lt;/code&gt; and means select all indices along this axis.</source>
          <target state="translated">&lt;em&gt;n&lt;/em&gt; 은 슬라이스되는 차원의 요소 수라고 가정합니다 . 그런 다음 &lt;em&gt;i&lt;/em&gt; 를 지정하지 않으면 &lt;em&gt;k&amp;gt; 0의&lt;/em&gt; 경우 기본값은 &lt;em&gt;0&lt;/em&gt; 이고 &lt;em&gt;k &amp;lt;0의 경우 &lt;/em&gt;&lt;em&gt;n-1&lt;/em&gt; 입니다 . 경우 &lt;em&gt;J는&lt;/em&gt; 에 그것을 디폴트 주어지지 &lt;em&gt;N&lt;/em&gt; 에 대한 &lt;em&gt;K&amp;gt; 0&lt;/em&gt; 과 &lt;em&gt;&amp;alpha;-1&lt;/em&gt; 위한 &lt;em&gt;K &amp;lt;0&lt;/em&gt; . 경우 &lt;em&gt;k는&lt;/em&gt; 1 주에에게 기본적으로 부여되지 않는다는는 &lt;code&gt;::&lt;/code&gt; 과 동일 &lt;code&gt;:&lt;/code&gt; 수단이 축을 따라 모든 인덱스를 선택합니다.&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="b9dccb798e5c5e1b5508e3a8630765c07522b225" translate="yes" xml:space="preserve">
          <source>Assume that the observations are in the columns of the observation array &lt;code&gt;m&lt;/code&gt; and let &lt;code&gt;f = fweights&lt;/code&gt; and &lt;code&gt;a = aweights&lt;/code&gt; for brevity. The steps to compute the weighted covariance are as follows:</source>
          <target state="translated">관찰은 관찰 어레이의 컬럼에 있다고 가정 &lt;code&gt;m&lt;/code&gt; 및하자 &lt;code&gt;f = fweights&lt;/code&gt; 와 &lt;code&gt;a = aweights&lt;/code&gt; 간결. 가중 공분산을 계산하는 단계는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="97728787c4c0fd66ac4cc28f08c4ba4e206f76e5" translate="yes" xml:space="preserve">
          <source>Assume we have three matrices</source>
          <target state="translated">세 개의 행렬이 있다고 가정</target>
        </trans-unit>
        <trans-unit id="68035e390827bfef5b6a722908902bf830e33068" translate="yes" xml:space="preserve">
          <source>Assuming that</source>
          <target state="translated">그것을 가정</target>
        </trans-unit>
        <trans-unit id="361dbf446d2fcbde7f8e5127964dd121d2c08adc" translate="yes" xml:space="preserve">
          <source>Assuming that &lt;code&gt;a&lt;/code&gt; is sorted:</source>
          <target state="translated">&lt;code&gt;a&lt;/code&gt; 가 정렬 되었다고 가정하면 :</target>
        </trans-unit>
        <trans-unit id="a66d954bab07db2d2ebde3811f3d1797fded0efb" translate="yes" xml:space="preserve">
          <source>Assuming the foo.ini.in file has the following content:</source>
          <target state="translated">foo.ini.in 파일에 다음 내용이 있다고 가정하십시오.</target>
        </trans-unit>
        <trans-unit id="0527fe789f4627f3a63d0bb5ba48121982fec81a" translate="yes" xml:space="preserve">
          <source>At each iteration of the loop, the &lt;em&gt;nin&lt;/em&gt; input objects are extracted from their object arrays and placed into an argument tuple, the Python &lt;em&gt;callable&lt;/em&gt; is called with the input arguments, and the nout outputs are placed into their object arrays.</source>
          <target state="translated">루프의 각 반복에서, &lt;em&gt;닌&lt;/em&gt; 입력 개체들은 객체 어레이로부터 추출 및 인수 튜플에 넣고, 파이썬 &lt;em&gt;호출은&lt;/em&gt; 상기 입력 인자로 호출되고, NOUT 출력들은 객체 배열로 배치된다.</target>
        </trans-unit>
        <trans-unit id="ca83daf60668ea69e76df727d7b2b16f815d0807" translate="yes" xml:space="preserve">
          <source>At the beginning of every &lt;a href=&quot;ufuncs#ufuncs-output-type&quot;&gt;ufunc&lt;/a&gt;, this method is called on the input object with the highest array priority, or the output object if one was specified. The output array is passed in and whatever is returned is passed to the ufunc. Subclasses inherit a default implementation of this method which simply returns the output array unmodified. Subclasses may opt to use this method to transform the output array into an instance of the subclass and update metadata before returning the array to the ufunc for computation.</source>
          <target state="translated">모든 &lt;a href=&quot;ufuncs#ufuncs-output-type&quot;&gt;ufunc&lt;/a&gt; 의 시작 부분 에서이 메소드는 배열 우선 순위가 가장 높은 입력 오브젝트 또는 지정된 경우 출력 오브젝트에서 호출됩니다. 출력 배열이 전달되고 리턴 된 것은 ufunc에 전달됩니다. 서브 클래스는이 메소드의 기본 구현을 상속하여 단순히 수정되지 않은 출력 배열을 리턴합니다. 서브 클래스는이 메소드를 사용하여 출력 배열을 서브 클래스의 인스턴스로 변환하고 배열을 계산을 위해 ufunc로 리턴하기 전에 메타 데이터를 업데이트하도록 선택할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="12bc262a1577057e701d7713e64c78fa019c087b" translate="yes" xml:space="preserve">
          <source>At the core of every ufunc is a collection of type-specific functions that defines the basic functionality for each of the supported types. These functions must evaluate the underlying function</source>
          <target state="translated">모든 ufunc의 핵심에는 지원되는 각 유형의 기본 기능을 정의하는 유형별 함수 모음이 있습니다. 이 함수는 기본 함수를 평가해야합니다</target>
        </trans-unit>
        <trans-unit id="99499535512b6c181a0f3b43a50d805096cef5c2" translate="yes" xml:space="preserve">
          <source>At the core of every ufunc is a one-dimensional strided loop that implements the actual function for a specific type combination. When a ufunc is created, it is given a static list of inner loops and a corresponding list of type signatures over which the ufunc operates. The ufunc machinery uses this list to determine which inner loop to use for a particular case. You can inspect the &lt;a href=&quot;generated/numpy.ufunc.types#numpy.ufunc.types&quot;&gt;&lt;code&gt;.types&lt;/code&gt;&lt;/a&gt; attribute for a particular ufunc to see which type combinations have a defined inner loop and which output type they produce (&lt;a href=&quot;arrays.scalars#arrays-scalars-character-codes&quot;&gt;character codes&lt;/a&gt; are used in said output for brevity).</source>
          <target state="translated">모든 ufunc의 핵심에는 특정 유형 조합에 대한 실제 기능을 구현하는 1 차원 스트라이드 루프가 있습니다. ufunc가 생성되면 내부 루프의 정적 목록과 ufunc가 작동하는 해당 유형의 서명 목록이 제공됩니다. ufunc 기계 장치는이 목록을 사용하여 특정 사례에 사용할 내부 루프를 결정합니다. 특정 ufunc에 대한 &lt;a href=&quot;generated/numpy.ufunc.types#numpy.ufunc.types&quot;&gt; &lt;code&gt;.types&lt;/code&gt; &lt;/a&gt; 속성을 검사하여 내부 루프가 정의 된 유형 조합과 이들이 생성하는 출력 유형을 확인할 수 있습니다 ( 간단하게 출력에 &lt;a href=&quot;arrays.scalars#arrays-scalars-character-codes&quot;&gt;문자 코드&lt;/a&gt; 가 사용됨).</target>
        </trans-unit>
        <trans-unit id="d886c7715daa7e13f2899ef3973389ec60967548" translate="yes" xml:space="preserve">
          <source>At the end of every &lt;a href=&quot;ufuncs#ufuncs-output-type&quot;&gt;ufunc&lt;/a&gt;, this method is called on the input object with the highest array priority, or the output object if one was specified. The ufunc-computed array is passed in and whatever is returned is passed to the user. Subclasses inherit a default implementation of this method, which transforms the array into a new instance of the object&amp;rsquo;s class. Subclasses may opt to use this method to transform the output array into an instance of the subclass and update metadata before returning the array to the user.</source>
          <target state="translated">모든 &lt;a href=&quot;ufuncs#ufuncs-output-type&quot;&gt;ufunc&lt;/a&gt; 의 끝에서 ,이 메소드는 배열 우선 순위가 가장 높은 입력 오브젝트 또는 지정된 경우 출력 오브젝트에서 호출됩니다. ufunc-computed 배열이 전달되고 리턴 된 것은 사용자에게 전달됩니다. 서브 클래스는이 메소드의 기본 구현을 상속하여 배열을 객체 클래스의 새 인스턴스로 변환합니다. 서브 클래스는이 메소드를 사용하여 출력 배열을 서브 클래스의 인스턴스로 변환하고 배열을 사용자에게 리턴하기 전에 메타 데이터를 업데이트하도록 선택할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a6652617f2c799eb11ee727b16c5646c48af6905" translate="yes" xml:space="preserve">
          <source>Attributes</source>
          <target state="translated">Attributes</target>
        </trans-unit>
        <trans-unit id="cfe76174da05e50b979cc6188b003f45d1df8482" translate="yes" xml:space="preserve">
          <source>Attributes and properties of masked arrays</source>
          <target state="translated">마스크 배열의 속성 및 속성</target>
        </trans-unit>
        <trans-unit id="75d3cd51a61f739cdedf79817eefc8974a835455" translate="yes" xml:space="preserve">
          <source>Attributes providing additional information:</source>
          <target state="translated">추가 정보를 제공하는 속성 :</target>
        </trans-unit>
        <trans-unit id="b8087185e5ee37cef4c337de5697d35d75d909fd" translate="yes" xml:space="preserve">
          <source>Attributes:</source>
          <target state="translated">Attributes:</target>
        </trans-unit>
        <trans-unit id="6854c23ffe094a9dcc2c7d18b7054597700c09d7" translate="yes" xml:space="preserve">
          <source>Author: Pearu Peterson &amp;lt;&lt;a href=&quot;mailto:pearu%40cens.ioc.ee&quot;&gt;pearu@cens.ioc.ee&lt;/a&gt;&amp;gt; Created: 11 January 2003</source>
          <target state="translated">저자 : Pearu Peterson &amp;lt; &lt;a href=&quot;mailto:pearu%40cens.ioc.ee&quot;&gt;pearu@cens.ioc.ee&lt;/a&gt; &amp;gt; 만든 날짜 : 2003 년 1 월 11 일</target>
        </trans-unit>
        <trans-unit id="9a8e09e3b7e8024727baccc0a1e74a9673de3c0e" translate="yes" xml:space="preserve">
          <source>Automated Bin Selection Methods example, using 2 peak random data with 2000 points:</source>
          <target state="translated">자동 빈 선택 방법 예제, 2000 포인트로 2 개의 피크 랜덤 데이터 사용 :</target>
        </trans-unit>
        <trans-unit id="65efb82d6e37e5b9994108df57fecde86e561550" translate="yes" xml:space="preserve">
          <source>Auxiliary Data With Object Semantics</source>
          <target state="translated">객체 시맨틱을 이용한 보조 데이터</target>
        </trans-unit>
        <trans-unit id="b5d54069c98dcc2bb7ef53455746da49544d4c61" translate="yes" xml:space="preserve">
          <source>Available Typemaps</source>
          <target state="translated">사용 가능한 타입 맵</target>
        </trans-unit>
        <trans-unit id="0eba0fa1e7377ce939b86cc49e664126d93a94fb" translate="yes" xml:space="preserve">
          <source>Available labels are:</source>
          <target state="translated">사용 가능한 라벨은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="b9ef456325fee29b959d2b71abeec2f41a07fee2" translate="yes" xml:space="preserve">
          <source>Available ufuncs</source>
          <target state="translated">사용 가능한 ufunc</target>
        </trans-unit>
        <trans-unit id="15f86c051ecf0b64e5f8cdc8c689552f42595942" translate="yes" xml:space="preserve">
          <source>Average</source>
          <target state="translated">Average</target>
        </trans-unit>
        <trans-unit id="00230b1d5c35405f7ca65ccbf60097d1ff75f793" translate="yes" xml:space="preserve">
          <source>Averages and variances</source>
          <target state="translated">평균과 분산</target>
        </trans-unit>
        <trans-unit id="260a17f609be1b620f1eb6b59b7945c255c81429" translate="yes" xml:space="preserve">
          <source>Axes in &lt;code&gt;a&lt;/code&gt; to reorder to the right, before inversion. If None (default), no reordering is done.</source>
          <target state="translated">반전하기 전에 오른쪽으로 재정렬하기 위해의 축을 축으로 &lt;code&gt;a&lt;/code&gt; . None (기본값)이면 재정렬이 수행되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="db233fcb37135c7f09c5ffb89b7ba1fec760ef66" translate="yes" xml:space="preserve">
          <source>Axes over which &lt;code&gt;func&lt;/code&gt; is applied; the elements must be integers.</source>
          <target state="translated">&lt;code&gt;func&lt;/code&gt; 이 적용 되는 축 ; 요소는 정수 여야합니다.</target>
        </trans-unit>
        <trans-unit id="3c7544c1215157a53157a59a39707d4b0bcf94df" translate="yes" xml:space="preserve">
          <source>Axes over which to calculate. Defaults to None, which shifts all axes.</source>
          <target state="translated">계산할 축입니다. 기본적으로 없음으로 설정되어 모든 축이 이동합니다.</target>
        </trans-unit>
        <trans-unit id="01251d80564e6fc5615a7911ad0e73434e304c26" translate="yes" xml:space="preserve">
          <source>Axes over which to compute the FFT.</source>
          <target state="translated">FFT를 계산할 축입니다.</target>
        </trans-unit>
        <trans-unit id="eae74832fcf1fa3443d947416920310bd08270f6" translate="yes" xml:space="preserve">
          <source>Axes over which to compute the FFT. If not given, the last &lt;code&gt;len(s)&lt;/code&gt; axes are used, or all axes if &lt;code&gt;s&lt;/code&gt; is also not specified.</source>
          <target state="translated">FFT를 계산할 축입니다. 지정하지 않으면 마지막 &lt;code&gt;len(s)&lt;/code&gt; 축이 사용되거나 &lt;code&gt;s&lt;/code&gt; 도 지정되지 않은 경우 모든 축이 사용 됩니다.</target>
        </trans-unit>
        <trans-unit id="087a54cd73e6a93e216a09c22b970ec84185e189" translate="yes" xml:space="preserve">
          <source>Axes over which to compute the FFT. If not given, the last &lt;code&gt;len(s)&lt;/code&gt; axes are used, or all axes if &lt;code&gt;s&lt;/code&gt; is also not specified. Repeated indices in &lt;code&gt;axes&lt;/code&gt; means that the transform over that axis is performed multiple times.</source>
          <target state="translated">FFT를 계산할 축입니다. 지정하지 않으면 마지막 &lt;code&gt;len(s)&lt;/code&gt; 축이 사용되거나 &lt;code&gt;s&lt;/code&gt; 도 지정되지 않은 경우 모든 축이 사용 됩니다. &lt;code&gt;axes&lt;/code&gt; 에서 반복되는 인덱스는 해당 축 에 대한 변환이 여러 번 수행됨을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="c012449cfef6487dddab190f30ddad2f2e0316c1" translate="yes" xml:space="preserve">
          <source>Axes over which to compute the FFT. If not given, the last two axes are used. A repeated index in &lt;code&gt;axes&lt;/code&gt; means the transform over that axis is performed multiple times. A one-element sequence means that a one-dimensional FFT is performed.</source>
          <target state="translated">FFT를 계산할 축입니다. 지정하지 않으면 마지막 두 축이 사용됩니다. &lt;code&gt;axes&lt;/code&gt; 반복 인덱스는 해당 축에 대한 변환이 여러 번 수행됨을 의미합니다. 1 요소 시퀀스는 1 차원 FFT가 수행됨을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="c1bbe9559f43f27cc8c677ee579702aea02533b0" translate="yes" xml:space="preserve">
          <source>Axes over which to compute the IFFT. If not given, the last &lt;code&gt;len(s)&lt;/code&gt; axes are used, or all axes if &lt;code&gt;s&lt;/code&gt; is also not specified. Repeated indices in &lt;code&gt;axes&lt;/code&gt; means that the inverse transform over that axis is performed multiple times.</source>
          <target state="translated">IFFT를 계산할 축입니다. 지정하지 않으면 마지막 &lt;code&gt;len(s)&lt;/code&gt; 축이 사용되거나 &lt;code&gt;s&lt;/code&gt; 도 지정되지 않은 경우 모든 축이 사용 됩니다. &lt;code&gt;axes&lt;/code&gt; 에서 반복되는 인덱스는 해당 축 에 대한 역변환이 여러 번 수행됨을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="b354616c4fe4a354f85531d5428c20c0b32f3c2f" translate="yes" xml:space="preserve">
          <source>Axes over which to compute the inverse FFT. If not given, the last &lt;code&gt;len(s)&lt;/code&gt; axes are used, or all axes if &lt;code&gt;s&lt;/code&gt; is also not specified. Repeated indices in &lt;code&gt;axes&lt;/code&gt; means that the inverse transform over that axis is performed multiple times.</source>
          <target state="translated">역 FFT를 계산할 축입니다. 지정하지 않으면 마지막 &lt;code&gt;len(s)&lt;/code&gt; 축이 사용되거나 &lt;code&gt;s&lt;/code&gt; 도 지정되지 않은 경우 모든 축이 사용 됩니다. &lt;code&gt;axes&lt;/code&gt; 에서 반복되는 인덱스는 해당 축 에 대한 역변환이 여러 번 수행됨을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="8a99b64a4a7a7c7ead7b23b02c696f0da53ae319" translate="yes" xml:space="preserve">
          <source>Axes over which to shift. Default is None, which shifts all axes.</source>
          <target state="translated">변속 할 도끼. 기본값은 없음이며 모든 축을 이동시킵니다.</target>
        </trans-unit>
        <trans-unit id="0a52967d9e9b8df8a4f8c170f8ca693ae8a86fe3" translate="yes" xml:space="preserve">
          <source>Axes to be used as the first and second axis of the 2-D sub-arrays from which the diagonals should be taken. Defaults are the first two axes of &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="translated">대각선을 가져와야하는 2 차원 하위 ​​배열의 첫 번째 축과 두 번째 축으로 사용될 축입니다. 기본값의 처음 두 축이다 . &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f303f8b434501d0a0e88a06f71ae6bf60e07440a" translate="yes" xml:space="preserve">
          <source>Axis along which &lt;code&gt;arr&lt;/code&gt; is sliced.</source>
          <target state="translated">&lt;code&gt;arr&lt;/code&gt; 이 슬라이스 되는 축 입니다.</target>
        </trans-unit>
        <trans-unit id="eb47b635b568e5dba0343ed2ed07af3eb1c5f691" translate="yes" xml:space="preserve">
          <source>Axis along which logical OR is performed</source>
          <target state="translated">논리 OR이 수행되는 축</target>
        </trans-unit>
        <trans-unit id="09cfc91cd9019ea0548a0bc697b5fe1ac4febf1f" translate="yes" xml:space="preserve">
          <source>Axis along which the cumulative product is computed. By default the input is flattened.</source>
          <target state="translated">누적 곱이 계산되는 축입니다. 기본적으로 입력은 평평합니다.</target>
        </trans-unit>
        <trans-unit id="57187cefb1f2a69dac281d57460affb45a365e61" translate="yes" xml:space="preserve">
          <source>Axis along which the cumulative sum is computed. The default (None) is to compute the cumsum over the flattened array.</source>
          <target state="translated">누적 합계가 계산되는 축입니다. 기본 (없음)은 평평한 배열에서 누적을 계산하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="f37486b57129451282a7b678277fa8169fe0110e" translate="yes" xml:space="preserve">
          <source>Axis along which the elements are counted. By default, give the total number of elements.</source>
          <target state="translated">요소가 계산되는 축입니다. 기본적으로 총 요소 수를 제공하십시오.</target>
        </trans-unit>
        <trans-unit id="b08197a0ff41e61316a0f60a6919ee14fb5fe98b" translate="yes" xml:space="preserve">
          <source>Axis along which the medians are computed. The default (None) is to compute the median along a flattened version of the array.</source>
          <target state="translated">중앙값이 계산되는 축입니다. 기본 (없음)은 전개 된 버전의 배열을 따라 중앙값을 계산하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="bc92a5f411fa4b8657deb697c80aca8e1f76fb85" translate="yes" xml:space="preserve">
          <source>Axis along which the operation must be performed.</source>
          <target state="translated">작업을 수행해야하는 축입니다.</target>
        </trans-unit>
        <trans-unit id="f2cd71dae3fa50b163de963d5f5e4581028e17b5" translate="yes" xml:space="preserve">
          <source>Axis along which to average &lt;code&gt;a&lt;/code&gt;. If &lt;code&gt;None&lt;/code&gt;, averaging is done over the flattened array.</source>
          <target state="translated">평균을 &lt;code&gt;a&lt;/code&gt; 축 입니다. 경우 &lt;code&gt;None&lt;/code&gt; , 평균은 평평 배열을 통해 이루어집니다.</target>
        </trans-unit>
        <trans-unit id="6740a47c78c530ff5565f890ca7a6510d66b94b6" translate="yes" xml:space="preserve">
          <source>Axis along which to count. If None (default), a flattened version of the array is used.</source>
          <target state="translated">계산할 축입니다. None (기본값)이면 평탄화 된 버전의 어레이가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="87e6cb227cab73030094d0bab3690d5e44d50da1" translate="yes" xml:space="preserve">
          <source>Axis along which to find the peaks. By default, flatten the array. &lt;code&gt;axis&lt;/code&gt; may be negative, in which case it counts from the last to the first axis.</source>
          <target state="translated">피크를 찾는 축입니다. 기본적으로 배열을 평평하게합니다. &lt;code&gt;axis&lt;/code&gt; 음수 일 수 있으며,이 경우 마지막 축부터 첫 번째 축까지 계산됩니다.</target>
        </trans-unit>
        <trans-unit id="d012a76459484bfd8767b22b0537d0b22d4d11bb" translate="yes" xml:space="preserve">
          <source>Axis along which to find the peaks. If None (default) the flattened array is used.</source>
          <target state="translated">피크를 찾는 축입니다. None (기본값)이면 병합 된 배열이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="c855b308fb59a9f63969a5e9a73073df7701d3a8" translate="yes" xml:space="preserve">
          <source>Axis along which to insert &lt;code&gt;values&lt;/code&gt;. If &lt;code&gt;axis&lt;/code&gt; is None then &lt;code&gt;arr&lt;/code&gt; is flattened first.</source>
          <target state="translated">&lt;code&gt;values&lt;/code&gt; 을 삽입 할 축 입니다. 경우 &lt;code&gt;axis&lt;/code&gt; 없음 다음입니다 &lt;code&gt;arr&lt;/code&gt; 첫번째 평평하게됩니다.</target>
        </trans-unit>
        <trans-unit id="caa670fb62ad34335b9428afd9953d664aefbfc6" translate="yes" xml:space="preserve">
          <source>Axis along which to operate. By default flattened input is used.</source>
          <target state="translated">작동 할 축. 기본적으로 납작한 입력이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="1612a72f0d3b6ca5a9a80a269a8a766d4f4346ff" translate="yes" xml:space="preserve">
          <source>Axis along which to operate. By default, &lt;code&gt;axis&lt;/code&gt; is None and the flattened input is used.</source>
          <target state="translated">작동 할 축. 기본적으로 &lt;code&gt;axis&lt;/code&gt; 없음이며 평탄화 된 입력이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="dfc23123538404f83aba951929e9f61fafacf779" translate="yes" xml:space="preserve">
          <source>Axis along which to perform the operation. Default is None.</source>
          <target state="translated">작업을 수행 할 축입니다. 기본값은 없음입니다.</target>
        </trans-unit>
        <trans-unit id="f599b7c76d66ef3380a35805a50ac6efed5828ce" translate="yes" xml:space="preserve">
          <source>Axis along which to perform the operation. If None (default), applies to a flattened version of the array, and this is the same as &lt;a href=&quot;numpy.ma.flatnotmasked_contiguous#numpy.ma.flatnotmasked_contiguous&quot;&gt;&lt;code&gt;flatnotmasked_contiguous&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">작업을 수행 할 축입니다. None (기본값) 인 경우 병합 된 버전의 배열에 적용되며 &lt;a href=&quot;numpy.ma.flatnotmasked_contiguous#numpy.ma.flatnotmasked_contiguous&quot;&gt; &lt;code&gt;flatnotmasked_contiguous&lt;/code&gt; &lt;/a&gt; 와 동일합니다 .</target>
        </trans-unit>
        <trans-unit id="04c94dfe1278eba9030646d853545708152162d2" translate="yes" xml:space="preserve">
          <source>Axis along which to perform the operation. If None (default), applies to a flattened version of the array.</source>
          <target state="translated">작업을 수행 할 축입니다. None (기본값) 인 경우 평탄화 된 버전의 어레이에 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="504f2a8eb88761fe60f8368b4521f8ae3d7cee4e" translate="yes" xml:space="preserve">
          <source>Axis along which to perform the operation. If None, applies to a flattened version of the array.</source>
          <target state="translated">작업을 수행 할 축입니다. None 인 경우, 평평한 버전의 어레이에 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="152709e5051b3ce45dda1f386ffce54b5252f137" translate="yes" xml:space="preserve">
          <source>Axis along which to sort. Default is -1, which means sort along the last axis.</source>
          <target state="translated">정렬 할 축입니다. 기본값은 -1이며 마지막 축을 따라 정렬됩니다.</target>
        </trans-unit>
        <trans-unit id="2188a35fbb2aa8c603498f4b78d1698cebdd5a7d" translate="yes" xml:space="preserve">
          <source>Axis along which to sort. If None, the array is flattened before sorting. The default is -1, which sorts along the last axis.</source>
          <target state="translated">정렬 할 축입니다. None이면 정렬하기 전에 배열이 평평 해집니다. 기본값은 -1이며 마지막 축을 따라 정렬됩니다.</target>
        </trans-unit>
        <trans-unit id="740a6ece80316cdabae954a87f619b8a229d3521" translate="yes" xml:space="preserve">
          <source>Axis along which to sort. If None, the default, the flattened array is used.</source>
          <target state="translated">정렬 할 축입니다. None 인 경우 기본값으로 평탄화 된 배열이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="d4ba2932956beb23c342eb9374fa565cb3b55723" translate="yes" xml:space="preserve">
          <source>Axis along which to sort. The default is -1 (the last axis). If None, the flattened array is used.</source>
          <target state="translated">정렬 할 축입니다. 기본값은 -1 (마지막 축)입니다. None이면 평탄화 된 배열이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="bf13afc2432793901330c8c7a32dd664b93fb6da" translate="yes" xml:space="preserve">
          <source>Axis along which to take slices. If None (default), work on the flattened array.</source>
          <target state="translated">슬라이스를 취할 축. None (기본값)이면 평평한 배열에서 작업합니다.</target>
        </trans-unit>
        <trans-unit id="862dd8c4bcf2d6630f10d14b83366d28de07835e" translate="yes" xml:space="preserve">
          <source>Axis along which unwrap will operate, default is the last axis.</source>
          <target state="translated">랩 해제가 작동 할 축으로, 기본값은 마지막 축입니다.</target>
        </trans-unit>
        <trans-unit id="2642370e7acd3a38fa3e5ae2e4852e710ae2493f" translate="yes" xml:space="preserve">
          <source>Axis of &lt;code&gt;a&lt;/code&gt; that defines the vector(s). By default, the last axis.</source>
          <target state="translated">의 축 벡터 (들)을 정의합니다. 기본적으로 마지막 축입니다. &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ac79a24e9b27340a01d757c607f815c179d09b07" translate="yes" xml:space="preserve">
          <source>Axis of &lt;code&gt;b&lt;/code&gt; that defines the vector(s). By default, the last axis.</source>
          <target state="translated">벡터를 정의하는 &lt;code&gt;b&lt;/code&gt; 의 축입니다 . 기본적으로 마지막 축입니다.</target>
        </trans-unit>
        <trans-unit id="f367b3271f5fcf8c75672a1e31a99c742130492f" translate="yes" xml:space="preserve">
          <source>Axis of &lt;code&gt;c&lt;/code&gt; containing the cross product vector(s). Ignored if both input vectors have dimension 2, as the return is scalar. By default, the last axis.</source>
          <target state="translated">교차 곱 벡터를 포함하는 &lt;code&gt;c&lt;/code&gt; 축 . 반환 값이 스칼라이므로 두 입력 벡터 모두 차원이 2 인 경우 무시됩니다. 기본적으로 마지막 축입니다.</target>
        </trans-unit>
        <trans-unit id="73455e870dee7c0562b8878e31766028fce2291e" translate="yes" xml:space="preserve">
          <source>Axis or axes along which a logical AND reduction is performed. The default (&lt;code&gt;axis&lt;/code&gt; = &lt;code&gt;None&lt;/code&gt;) is to perform a logical AND over all the dimensions of the input array. &lt;code&gt;axis&lt;/code&gt; may be negative, in which case it counts from the last to the first axis.</source>
          <target state="translated">논리 AND 축소가 수행되는 축. 기본값 ( &lt;code&gt;axis&lt;/code&gt; = &lt;code&gt;None&lt;/code&gt; )은 입력 배열의 모든 차원에 대해 논리 AND를 수행하는 것입니다. &lt;code&gt;axis&lt;/code&gt; 음수 일 수 있으며,이 경우 마지막 축부터 첫 번째 축까지 계산됩니다.</target>
        </trans-unit>
        <trans-unit id="f611b0275c8907be5ddfd942eef1d1cb490e3bfa" translate="yes" xml:space="preserve">
          <source>Axis or axes along which a logical OR reduction is performed. The default (&lt;code&gt;axis&lt;/code&gt; = &lt;code&gt;None&lt;/code&gt;) is to perform a logical OR over all the dimensions of the input array. &lt;code&gt;axis&lt;/code&gt; may be negative, in which case it counts from the last to the first axis.</source>
          <target state="translated">논리 OR 축소가 수행되는 축. 기본값 ( &lt;code&gt;axis&lt;/code&gt; = &lt;code&gt;None&lt;/code&gt; )은 입력 배열의 모든 차원에 대해 논리 OR을 수행하는 것입니다. &lt;code&gt;axis&lt;/code&gt; 음수 일 수 있으며,이 경우 마지막 축부터 첫 번째 축까지 계산됩니다.</target>
        </trans-unit>
        <trans-unit id="9fd47f9900eba5a8ae95abac9ad38d16026ca50d" translate="yes" xml:space="preserve">
          <source>Axis or axes along which a product is performed. The default, axis=None, will calculate the product of all the elements in the input array. If axis is negative it counts from the last to the first axis.</source>
          <target state="translated">제품이 수행되는 축. 기본값 인 axis = None은 입력 배열에있는 모든 요소의 곱을 계산합니다. 축이 음수이면 마지막 축부터 첫 번째 축까지 계산합니다.</target>
        </trans-unit>
        <trans-unit id="be576580b5bc0f979cac29a5b9d9045456b366f7" translate="yes" xml:space="preserve">
          <source>Axis or axes along which a reduction is performed. The default (&lt;code&gt;axis&lt;/code&gt; = 0) is perform a reduction over the first dimension of the input array. &lt;code&gt;axis&lt;/code&gt; may be negative, in which case it counts from the last to the first axis.</source>
          <target state="translated">축소가 수행되는 축. 기본값 ( &lt;code&gt;axis&lt;/code&gt; = 0)은 입력 배열의 첫 번째 차원에 대해 축소를 수행하는 것입니다. &lt;code&gt;axis&lt;/code&gt; 음수 일 수 있으며,이 경우 마지막 축부터 첫 번째 축까지 계산됩니다.</target>
        </trans-unit>
        <trans-unit id="a9d8568517293b16cabcf73bd06fbc68a72003cd" translate="yes" xml:space="preserve">
          <source>Axis or axes along which a sum is performed. The default, axis=None, will sum all of the elements of the input array. If axis is negative it counts from the last to the first axis.</source>
          <target state="translated">합이 수행되는 축. 기본값 인 axis = None은 입력 배열의 모든 요소를 ​​합산합니다. 축이 음수이면 마지막 축부터 첫 번째 축까지 계산합니다.</target>
        </trans-unit>
        <trans-unit id="7cc8bc628160032ea1ebe6f16101b997f0306e3e" translate="yes" xml:space="preserve">
          <source>Axis or axes along which elements are shifted. By default, the array is flattened before shifting, after which the original shape is restored.</source>
          <target state="translated">요소가 이동하는 축. 기본적으로 배열은 이동하기 전에 평평한 후에 원래 모양이 복원됩니다.</target>
        </trans-unit>
        <trans-unit id="0e425003e67ef9bdd8af0004538626cffe9c1582" translate="yes" xml:space="preserve">
          <source>Axis or axes along which the count is performed. The default (&lt;code&gt;axis&lt;/code&gt; = &lt;code&gt;None&lt;/code&gt;) performs the count over all the dimensions of the input array. &lt;code&gt;axis&lt;/code&gt; may be negative, in which case it counts from the last to the first axis.</source>
          <target state="translated">카운트가 수행되는 축. 기본값 ( &lt;code&gt;axis&lt;/code&gt; = &lt;code&gt;None&lt;/code&gt; )은 입력 배열의 모든 차원에 대해 카운트를 수행합니다. &lt;code&gt;axis&lt;/code&gt; 음수 일 수 있으며,이 경우 마지막 축부터 첫 번째 축까지 계산됩니다.</target>
        </trans-unit>
        <trans-unit id="337ec9c050b4ae190316c405d645be292f57618f" translate="yes" xml:space="preserve">
          <source>Axis or axes along which the maximum is computed. The default is to compute the maximum of the flattened array.</source>
          <target state="translated">최대 값이 계산되는 축입니다. 기본값은 평평한 배열의 최대 값을 계산하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="5bcbcdbcc90358e775edd4243e64cbf53abf5bcb" translate="yes" xml:space="preserve">
          <source>Axis or axes along which the means are computed. The default is to compute the mean of the flattened array.</source>
          <target state="translated">평균이 계산되는 축입니다. 기본값은 평평한 배열의 평균을 계산하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="81e7f835d919d359ddd019861026589dd953700f" translate="yes" xml:space="preserve">
          <source>Axis or axes along which the medians are computed. The default is to compute the median along a flattened version of the array. A sequence of axes is supported since version 1.9.0.</source>
          <target state="translated">중앙값이 계산되는 축입니다. 기본값은 전개 된 버전의 배열을 따라 중앙값을 계산하는 것입니다. 버전 1.9.0부터 일련의 축이 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="86845400b54274fa2252847f24187b5fc174bc52" translate="yes" xml:space="preserve">
          <source>Axis or axes along which the minimum is computed. The default is to compute the minimum of the flattened array.</source>
          <target state="translated">최소값이 계산되는 축입니다. 기본값은 평탄화 된 배열의 최소값을 계산하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="afcadb3cc3e2b57bd1839f95d5290aac2075b609" translate="yes" xml:space="preserve">
          <source>Axis or axes along which the percentiles are computed. The default is to compute the percentile(s) along a flattened version of the array.</source>
          <target state="translated">백분위 수가 계산되는 축입니다. 기본값은 배열의 평면화 된 버전을 따라 백분위 수를 계산하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="1383f75934b288777f915d7bd0d8e7d4bc49532a" translate="yes" xml:space="preserve">
          <source>Axis or axes along which the product is computed. The default is to compute the product of the flattened array.</source>
          <target state="translated">제품이 계산되는 축입니다. 기본값은 평평한 배열의 곱을 계산하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="dc86583a236f0e917d6fd47accfd6b2805fa40e8" translate="yes" xml:space="preserve">
          <source>Axis or axes along which the quantiles are computed. The default is to compute the quantile(s) along a flattened version of the array.</source>
          <target state="translated">Quantile이 계산되는 축입니다. 기본값은 배열의 평면화 된 버전을 따라 Quantile을 계산하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="ff0198667d8f16fd97a42b385598004387813742" translate="yes" xml:space="preserve">
          <source>Axis or axes along which the standard deviation is computed. The default is to compute the standard deviation of the flattened array.</source>
          <target state="translated">표준 편차가 계산되는 축입니다. 기본값은 평평한 배열의 표준 편차를 계산하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="561888a8d151a5f97b2ece2d51ce899a36bbfbdf" translate="yes" xml:space="preserve">
          <source>Axis or axes along which the sum is computed. The default is to compute the sum of the flattened array.</source>
          <target state="translated">합이 계산되는 축입니다. 기본값은 평평한 배열의 합을 계산하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="949a7d6d27806e44a3241bd974384af685d26396" translate="yes" xml:space="preserve">
          <source>Axis or axes along which the variance is computed. The default is to compute the variance of the flattened array.</source>
          <target state="translated">분산이 계산되는 축입니다. 기본값은 평평한 배열의 분산을 계산하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="daa1ea5e7ee9d15405e9d59d22ce1b86e2982a0b" translate="yes" xml:space="preserve">
          <source>Axis or axes along which to average &lt;code&gt;a&lt;/code&gt;. The default, axis=None, will average over all of the elements of the input array. If axis is negative it counts from the last to the first axis.</source>
          <target state="translated">축 또는 어떤 따라 평균 축 . 기본값 인 axis = None은 입력 배열의 모든 요소에 대한 평균입니다. 축이 음수이면 마지막 축부터 첫 번째 축까지 계산합니다. &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="64370fd7391d23015a65d6e00207ab3ff57c0028" translate="yes" xml:space="preserve">
          <source>Axis or axes along which to flip over. The default, axis=None, will flip over all of the axes of the input array. If axis is negative it counts from the last to the first axis.</source>
          <target state="translated">뒤집을 축입니다. 기본값 인 axis = None은 입력 배열의 모든 축을 뒤집습니다. 축이 음수이면 마지막 축부터 첫 번째 축까지 계산합니다.</target>
        </trans-unit>
        <trans-unit id="f2bf5799ae5ef9d1cdddea7d865553db9614fd21" translate="yes" xml:space="preserve">
          <source>Axis or axes along which to operate. By default, flattened input is used.</source>
          <target state="translated">작동 할 축. 기본적으로 납작한 입력이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="f257ca43f52b8d212133752a1e0cef3f157fcc12" translate="yes" xml:space="preserve">
          <source>Axis or tuple of axes along which to count non-zeros. Default is None, meaning that non-zeros will be counted along a flattened version of &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="translated">0이 아닌 숫자를 세는 축 또는 축의 튜플. 기본값은 없음이며, 0이 아닌 값은 플랫 버전의 &lt;code&gt;a&lt;/code&gt; 에 따라 계산됩니다 .</target>
        </trans-unit>
        <trans-unit id="1dfdd6be5ea8d2b943040ace17a9b289e52760e7" translate="yes" xml:space="preserve">
          <source>Axis over which the anomalies are taken. The default is to use the mean of the flattened array as reference.</source>
          <target state="translated">이상이 발생한 축. 기본값은 평평한 배열의 평균을 참조로 사용하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="5a28ddd98da60a547b5ae35ef6abe54e89e91508" translate="yes" xml:space="preserve">
          <source>Axis over which the derivative is taken. (Default: 0).</source>
          <target state="translated">도함수가 취해지는 축. (기본값 : 0).</target>
        </trans-unit>
        <trans-unit id="ca8db3e3878b22dd385e21680a7f2404ba4af59f" translate="yes" xml:space="preserve">
          <source>Axis over which the integral is taken. (Default: 0).</source>
          <target state="translated">적분을 취하는 축. (기본값 : 0).</target>
        </trans-unit>
        <trans-unit id="7238aa3702fcf05542c14de94bdcecf60c8463af" translate="yes" xml:space="preserve">
          <source>Axis over which to compute the FFT. If not given, the last axis is used.</source>
          <target state="translated">FFT를 계산할 축입니다. 지정하지 않으면 마지막 축이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="78aed7a81e841b649e307d86af83f2a27f772253" translate="yes" xml:space="preserve">
          <source>Axis over which to compute the inverse DFT. If not given, the last axis is used.</source>
          <target state="translated">역 DFT를 계산할 축입니다. 지정하지 않으면 마지막 축이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="1994028401ccc8c25a36ddcd64e63635d1053d3a" translate="yes" xml:space="preserve">
          <source>Axis over which to compute the inverse FFT. If not given, the last axis is used.</source>
          <target state="translated">역 FFT를 계산할 축입니다. 지정하지 않으면 마지막 축이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="7fc8d289aafc37f1ce906424ecc35f2c72d9a34f" translate="yes" xml:space="preserve">
          <source>Axis to be indirectly sorted. By default, sort over the last axis.</source>
          <target state="translated">간접적으로 정렬 될 축. 기본적으로 마지막 축을 기준으로 정렬합니다.</target>
        </trans-unit>
        <trans-unit id="3e1ca61bed45345ef5098f13d05c389833be3df8" translate="yes" xml:space="preserve">
          <source>Axis to be used as the first axis of the 2-D sub-arrays from which the diagonals should be taken. Defaults to first axis (0).</source>
          <target state="translated">대각선을 가져와야하는 2 차원 하위 ​​배열의 첫 번째 축으로 사용될 축입니다. 기본값은 첫 번째 축 (0)입니다.</target>
        </trans-unit>
        <trans-unit id="45f7ee7208a9fb7d4e4732ffbd5f973fe0a479d3" translate="yes" xml:space="preserve">
          <source>Axis to be used as the second axis of the 2-D sub-arrays from which the diagonals should be taken. Defaults to second axis (1).</source>
          <target state="translated">대각선을 가져와야하는 2 차원 하위 ​​배열의 두 번째 축으로 사용될 축입니다. 기본적으로 두 번째 축 (1)입니다.</target>
        </trans-unit>
        <trans-unit id="c7781e5925cc1162bf57ca801ea173a8789aefd5" translate="yes" xml:space="preserve">
          <source>BEHAVED and C_CONTIGUOUS.</source>
          <target state="translated">이상과 C_CONTIGUOUS.</target>
        </trans-unit>
        <trans-unit id="eca3180a6c33b0a38f6f76fa644f63211aa1f14e" translate="yes" xml:space="preserve">
          <source>BEHAVED and F_CONTIGUOUS and not C_CONTIGUOUS.</source>
          <target state="translated">C_CONTIGUOUS가 아닌 BEHAVED 및 F_CONTIGUOUS</target>
        </trans-unit>
        <trans-unit id="64dd60fe1a049fe6db3eb1369dec2e42bf428e21" translate="yes" xml:space="preserve">
          <source>Background</source>
          <target state="translated">Background</target>
        </trans-unit>
        <trans-unit id="bd452a7ea759269a521e984eabecb645ce4b2ea6" translate="yes" xml:space="preserve">
          <source>Background information</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53740dccbfb785b89a2a2e2837295960b3f62362" translate="yes" xml:space="preserve">
          <source>Base Class for generic BitGenerators, which provide a stream of random bits based on different algorithms.</source>
          <target state="translated">서로 다른 알고리즘을 기반으로 임의의 비트 스트림을 제공하는 일반 BitGenerators의 기본 클래스입니다.</target>
        </trans-unit>
        <trans-unit id="2f03f2251cbc22f3d11027c3e6199900a02163b7" translate="yes" xml:space="preserve">
          <source>Base Class for generic BitGenerators, which provide a stream of random bits based on different algorithms. Must be overridden.</source>
          <target state="translated">서로 다른 알고리즘을 기반으로 임의의 비트 스트림을 제공하는 일반 BitGenerators의 기본 클래스입니다. 재정의해야합니다.</target>
        </trans-unit>
        <trans-unit id="18c896688f02b72b07f8b6644f275710e91f33b7" translate="yes" xml:space="preserve">
          <source>Base class</source>
          <target state="translated">기본 수업</target>
        </trans-unit>
        <trans-unit id="c559e4e184dd4d014a0b5060ba07110daeea6a9f" translate="yes" xml:space="preserve">
          <source>Base class for all polynomial types.</source>
          <target state="translated">모든 다항식 유형의 기본 클래스입니다.</target>
        </trans-unit>
        <trans-unit id="6149d0f0d497f5c19a312e242e3099f49c4e1828" translate="yes" xml:space="preserve">
          <source>Base class for errors in this module.</source>
          <target state="translated">이 모듈의 오류에 대한 기본 클래스입니다.</target>
        </trans-unit>
        <trans-unit id="6c3e6ca54a7a88ced88fed404dda8485677d4e2e" translate="yes" xml:space="preserve">
          <source>Base class for numpy scalar types.</source>
          <target state="translated">numpy 스칼라 유형의 기본 클래스입니다.</target>
        </trans-unit>
        <trans-unit id="860a1492914588f337f184bd4823757e7c5382ef" translate="yes" xml:space="preserve">
          <source>Base object if memory is from some other object.</source>
          <target state="translated">메모리가 다른 개체의 경우 기본 개체입니다.</target>
        </trans-unit>
        <trans-unit id="e272affdfa292522d2f5ac68c3e4ab276db10b62" translate="yes" xml:space="preserve">
          <source>Base of natural logarithm (</source>
          <target state="translated">자연 로그의 밑 (</target>
        </trans-unit>
        <trans-unit id="65a08d51a2e698f7325209df48e279e52d580030" translate="yes" xml:space="preserve">
          <source>Base-2 logarithm of &lt;code&gt;2**x1 + 2**x2&lt;/code&gt;. This is a scalar if both &lt;code&gt;x1&lt;/code&gt; and &lt;code&gt;x2&lt;/code&gt; are scalars.</source>
          <target state="translated">&lt;code&gt;2**x1 + 2**x2&lt;/code&gt; 밑이 2 인 로그 . &lt;code&gt;x1&lt;/code&gt; 과 &lt;code&gt;x2&lt;/code&gt; 가 모두 스칼라 인 경우 스칼라입니다.</target>
        </trans-unit>
        <trans-unit id="dc8e13711f25f1ed77c835a90063cf7df6b684db" translate="yes" xml:space="preserve">
          <source>Base-2 logarithm of &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; 의 밑이 2 인 로그 .</target>
        </trans-unit>
        <trans-unit id="99798b5608dba0e80521a63a27ddafba29b89b07" translate="yes" xml:space="preserve">
          <source>Base-2 logarithm of &lt;code&gt;x&lt;/code&gt;. This is a scalar if &lt;code&gt;x&lt;/code&gt; is a scalar.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; 의 밑이 2 인 로그 . &lt;code&gt;x&lt;/code&gt; 가 스칼라 인 경우 스칼라입니다.</target>
        </trans-unit>
        <trans-unit id="38987414db4d1bf81908059ba9b136da28c33714" translate="yes" xml:space="preserve">
          <source>Base-n representations</source>
          <target state="translated">Base-n 표현</target>
        </trans-unit>
        <trans-unit id="da94602e9563f3ceebc2fc5b569a77851b4c7e35" translate="yes" xml:space="preserve">
          <source>Basic &lt;a href=&quot;#numpy.einsum&quot;&gt;&lt;code&gt;einsum&lt;/code&gt;&lt;/a&gt;: ~1520ms (benchmarked on 3.1GHz Intel i5.)</source>
          <target state="translated">기본 &lt;a href=&quot;#numpy.einsum&quot;&gt; &lt;code&gt;einsum&lt;/code&gt; &lt;/a&gt; : ~ 1520ms (3.1GHz Intel i5에서 벤치 마크 됨)</target>
        </trans-unit>
        <trans-unit id="e6e180bdb3abc214441692c8749fa0f6558a1809" translate="yes" xml:space="preserve">
          <source>Basic Array Flags</source>
          <target state="translated">기본 배열 플래그</target>
        </trans-unit>
        <trans-unit id="e4e049299abaf782878f7f84544dfdb97d319e23" translate="yes" xml:space="preserve">
          <source>Basic Datetimes</source>
          <target state="translated">기본 날짜 시간</target>
        </trans-unit>
        <trans-unit id="7169d2b21ccd399c4bc0e79bbfdd0bd5c61ee835" translate="yes" xml:space="preserve">
          <source>Basic Slicing and Indexing</source>
          <target state="translated">기본 슬라이싱 및 인덱싱</target>
        </trans-unit>
        <trans-unit id="bf23a24f7e23fb617c002847d87b0e8162ee99d1" translate="yes" xml:space="preserve">
          <source>Basic customization:</source>
          <target state="translated">기본 맞춤 설정 :</target>
        </trans-unit>
        <trans-unit id="4c8d5fdc5db9950cf7bea592d196bad4f803b3fb" translate="yes" xml:space="preserve">
          <source>Basic examples</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="beb8cd5e0f8e7a06f8d36dc83c4364f7f79078fa" translate="yes" xml:space="preserve">
          <source>Basic operations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b900db10ad3fb5583b98ef507ab36ddd8153f435" translate="yes" xml:space="preserve">
          <source>Basic slicing extends Python&amp;rsquo;s basic concept of slicing to N dimensions. Basic slicing occurs when &lt;em&gt;obj&lt;/em&gt; is a &lt;a href=&quot;https://docs.python.org/dev/library/functions.html#slice&quot;&gt;&lt;code&gt;slice&lt;/code&gt;&lt;/a&gt; object (constructed by &lt;code&gt;start:stop:step&lt;/code&gt; notation inside of brackets), an integer, or a tuple of slice objects and integers. &lt;code&gt;Ellipsis&lt;/code&gt; and &lt;a href=&quot;constants#numpy.newaxis&quot;&gt;&lt;code&gt;newaxis&lt;/code&gt;&lt;/a&gt; objects can be interspersed with these as well.</source>
          <target state="translated">기본 슬라이싱은 Python의 기본 슬라이싱 개념을 N 차원으로 확장합니다. 기본 슬라이싱은 &lt;em&gt;obj&lt;/em&gt; 가 &lt;a href=&quot;https://docs.python.org/dev/library/functions.html#slice&quot;&gt; &lt;code&gt;slice&lt;/code&gt; &lt;/a&gt; 객체 ( 괄호 안의 &lt;code&gt;start:stop:step&lt;/code&gt; 표기법으로 구성됨), 정수 또는 슬라이스 객체와 정수의 튜플 일 때 발생합니다. &lt;code&gt;Ellipsis&lt;/code&gt; 와 &lt;a href=&quot;constants#numpy.newaxis&quot;&gt; &lt;code&gt;newaxis&lt;/code&gt; &lt;/a&gt; 객체가 이것들과 함께 산재 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b34ccf1a566015b10946e74591046f4136452341" translate="yes" xml:space="preserve">
          <source>Basic slicing with more than one non-&lt;code&gt;:&lt;/code&gt; entry in the slicing tuple, acts like repeated application of slicing using a single non-&lt;code&gt;:&lt;/code&gt; entry, where the non-&lt;code&gt;:&lt;/code&gt; entries are successively taken (with all other non-&lt;code&gt;:&lt;/code&gt; entries replaced by &lt;code&gt;:&lt;/code&gt;). Thus, &lt;code&gt;x[ind1,...,ind2,:]&lt;/code&gt; acts like &lt;code&gt;x[ind1][...,ind2,:]&lt;/code&gt; under basic slicing.</source>
          <target state="translated">하나 이상의 비 - 베이직 슬라이싱 &lt;code&gt;:&lt;/code&gt; 슬라이싱 튜플의 엔트리는 하나의 비 사용 슬라이싱 반복 어플리케이션처럼 동작 &lt;code&gt;:&lt;/code&gt; 비 항목 &lt;code&gt;:&lt;/code&gt; 항목이 연속적으로 수행된다 (모든 다른 비와를 &lt;code&gt;:&lt;/code&gt; 항목으로 대체 &lt;code&gt;:&lt;/code&gt; ) . 따라서 &lt;code&gt;x[ind1,...,ind2,:]&lt;/code&gt; &lt;code&gt;x[ind1][...,ind2,:]&lt;/code&gt; 는 기본 슬라이싱에서 x [ind1] [..., ind2 ,:] 처럼 작동 합니다.</target>
        </trans-unit>
        <trans-unit id="af837eca09697118dc16afab4a2dc5bfeccd2a15" translate="yes" xml:space="preserve">
          <source>Basic usage. Note how y is the &amp;ldquo;flattened&amp;rdquo; version of [a[:, 0, :], a[:, 1, 0], a[:, 2, :]] since we specified the first iter&amp;rsquo;s axes as [1]</source>
          <target state="translated">기본 사용법. 첫 번째 iter 's axis를 [1]로 지정했기 때문에 y는 [a [:, 0, :], a [:, 1, 0], a [:, 2, :]]의 &quot;평평한&quot;버전입니다.</target>
        </trans-unit>
        <trans-unit id="5fcebeefad3cdbbf8733aa928160dec7dc90c1a1" translate="yes" xml:space="preserve">
          <source>Basics</source>
          <target state="translated">Basics</target>
        </trans-unit>
        <trans-unit id="11716f1e3c0926fa9c04fbb3c924f0811bf4b112" translate="yes" xml:space="preserve">
          <source>Be careful about round-off error!</source>
          <target state="translated">반올림 오류에주의하십시오!</target>
        </trans-unit>
        <trans-unit id="ac10e1f58e2260e13e0683472d08e8f00358973a" translate="yes" xml:space="preserve">
          <source>Be sure to understand what steps you should take to manage the memory when using these conversion functions. These functions can require freeing memory, and/or altering the reference counts of specific objects based on your use.</source>
          <target state="translated">이러한 변환 기능을 사용할 때 메모리를 관리하기 위해 수행해야하는 단계를 이해해야합니다. 이 기능을 사용하려면 메모리를 비우거나 사용에 따라 특정 객체의 참조 카운트를 변경해야합니다.</target>
        </trans-unit>
        <trans-unit id="782223c5915f4980a539ed4710dad922b52bef1d" translate="yes" xml:space="preserve">
          <source>Because &lt;a href=&quot;generated/numpy.ndarray#numpy.ndarray&quot;&gt;&lt;code&gt;ndarray&lt;/code&gt;&lt;/a&gt; is a built-in type (written in C), the &lt;code&gt;__r{op}__&lt;/code&gt; special methods are not directly defined.</source>
          <target state="translated">때문에 &lt;a href=&quot;generated/numpy.ndarray#numpy.ndarray&quot;&gt; &lt;code&gt;ndarray&lt;/code&gt; 는&lt;/a&gt; 내장 타입 (C로 작성)에있다 &lt;code&gt;__r{op}__&lt;/code&gt; 특별한 방법을 직접 정의되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="67d90e5f1ae663c377ee558cca369308548469d2" translate="yes" xml:space="preserve">
          <source>Because exact overlap detection has exponential runtime in the number of dimensions, the decision is made based on heuristics, which has false positives (needless copies in unusual cases) but has no false negatives.</source>
          <target state="translated">정확한 오버랩 탐지는 차원 수에서 지수 런타임을 가지기 때문에, 휴리스틱을 기반으로 결정됩니다. 휴리스틱은 오 탐지 (비정상적인 경우 불필요한 사본)는 있지만 오음은 없습니다.</target>
        </trans-unit>
        <trans-unit id="b6f4af8bef1f35015b148a058f523cde0f4ccc9d" translate="yes" xml:space="preserve">
          <source>Because of how &lt;a href=&quot;numpy.array#numpy.array&quot;&gt;&lt;code&gt;array&lt;/code&gt;&lt;/a&gt; handles sets, the following does not work as expected:</source>
          <target state="translated">&lt;a href=&quot;numpy.array#numpy.array&quot;&gt; &lt;code&gt;array&lt;/code&gt; &lt;/a&gt; 이 집합을 처리 하는 방식으로 인해 다음과 같이 작동하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="c5a38fa639091b6298538af300d0ae57dcac2792" translate="yes" xml:space="preserve">
          <source>Because python extensions are not used in the same way as usual libraries on most platforms, some errors cannot be automatically detected at build time or even runtime. For example, if you build an extension using a function available only for numpy &amp;gt;= 1.3.0, and you import the extension later with numpy 1.2, you will not get an import error (but almost certainly a segmentation fault when calling the function). That&amp;rsquo;s why several functions are provided to check for numpy versions. The macros &lt;a href=&quot;#c.NPY_VERSION&quot;&gt;&lt;code&gt;NPY_VERSION&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;NPY_FEATURE_VERSION&lt;/code&gt; corresponds to the numpy version used to build the extension, whereas the versions returned by the functions PyArray_GetNDArrayCVersion and PyArray_GetNDArrayCFeatureVersion corresponds to the runtime numpy&amp;rsquo;s version.</source>
          <target state="translated">파이썬 확장은 대부분의 플랫폼에서 일반적인 라이브러리와 같은 방식으로 사용되지 않기 때문에 일부 오류는 빌드 타임 또는 런타임에 자동으로 감지 될 수 없습니다. 예를 들어, numpy&amp;gt; = 1.3.0에만 사용할 수있는 함수를 사용하여 확장을 빌드하고 나중에 numpy 1.2를 사용하여 확장을 가져 오는 경우 가져 오기 오류가 발생하지 않습니다 (그러나 함수 호출시 거의 확실하게 세그먼트 화 오류가 발생 함) . numpy 버전을 확인하기 위해 여러 기능이 제공되는 이유입니다. 매크로 &lt;a href=&quot;#c.NPY_VERSION&quot;&gt; &lt;code&gt;NPY_VERSION&lt;/code&gt; &lt;/a&gt; 및 &lt;code&gt;NPY_FEATURE_VERSION&lt;/code&gt; 은 확장을 빌드하는 데 사용 된 numpy 버전에 해당하는 반면 PyArray_GetNDArrayCVersion 및 PyArray_GetNDArrayCFeatureVersion 함수에 의해 리턴 된 버전은 런타임 numpy 버전에 해당합니다.</target>
        </trans-unit>
        <trans-unit id="29dd075a4977fb05332410d8621bf30c67da289c" translate="yes" xml:space="preserve">
          <source>Because the discrete Fourier transform separates its input into components that contribute at discrete frequencies, it has a great number of applications in digital signal processing, e.g., for filtering, and in this context the discretized input to the transform is customarily referred to as a &lt;em&gt;signal&lt;/em&gt;, which exists in the &lt;em&gt;time domain&lt;/em&gt;. The output is called a &lt;em&gt;spectrum&lt;/em&gt; or &lt;em&gt;transform&lt;/em&gt; and exists in the &lt;em&gt;frequency domain&lt;/em&gt;.</source>
          <target state="translated">이산 푸리에 변환은 입력을 이산 주파수에 기여하는 컴포넌트로 분리하기 때문에, 디지털 신호 처리에있어서, 예를 들어 필터링과 같은 많은 응용이 있으며, 이러한 맥락에서 변환에 대한 이산 입력은 관례 적으로 &lt;em&gt;신호&lt;/em&gt; 라고 불린다 &lt;em&gt;시간 도메인에&lt;/em&gt; 존재 &lt;em&gt;합니다&lt;/em&gt; . 출력을 &lt;em&gt;스펙트럼&lt;/em&gt; 또는 &lt;em&gt;변환&lt;/em&gt; 이라고하며 &lt;em&gt;주파수 영역에&lt;/em&gt; 존재 &lt;em&gt;합니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="9e9097d0b4adb9f9ce14f47bf1a8961a11b5917f" translate="yes" xml:space="preserve">
          <source>Because the output is limited to the range of the C int64 type, a ValueError is raised when &lt;code&gt;lam&lt;/code&gt; is within 10 sigma of the maximum representable value.</source>
          <target state="translated">출력이 C int64 유형의 범위로 제한되기 때문에 &lt;code&gt;lam&lt;/code&gt; 이 최대 표현 가능 값의 10 시그마 내에 있으면 ValueError가 발생 합니다.</target>
        </trans-unit>
        <trans-unit id="29cee176b513b19c85d7dfdf113b326997fd0f33" translate="yes" xml:space="preserve">
          <source>Behavior when the covariance matrix is not positive semidefinite.</source>
          <target state="translated">공분산 행렬이 양의 반정 수가 아닌 경우의 동작입니다.</target>
        </trans-unit>
        <trans-unit id="252e06d389a00c02f7e08aa374784958db4dd768" translate="yes" xml:space="preserve">
          <source>Below are the public attributes of this object which were documented in &amp;ldquo;Guide to NumPy&amp;rdquo; (we have omitted undocumented public attributes, as well as documented private attributes):</source>
          <target state="translated">아래는 &quot;NumPy로 안내&quot;에 설명 된이 개체의 공개 속성입니다 (문서화되지 않은 공개 속성과 문서화 된 비공개 속성은 생략했습니다).</target>
        </trans-unit>
        <trans-unit id="94890db1b347a181e379f1b5ca0fad5bcd6b3fc7" translate="yes" xml:space="preserve">
          <source>Below is an example of a minimal &lt;code&gt;setup.py&lt;/code&gt; file for a pure SciPy package:</source>
          <target state="translated">아래는 순수 SciPy 패키지에 대한 최소 &lt;code&gt;setup.py&lt;/code&gt; 파일 의 예입니다 .</target>
        </trans-unit>
        <trans-unit id="9e0aad69f001fa26b773185a06a8bef93c3f6567" translate="yes" xml:space="preserve">
          <source>Bernoulli trials are experiments with one of two outcomes: success or failure (an example of such an experiment is flipping a coin). The geometric distribution models the number of trials that must be run in order to achieve success. It is therefore supported on the positive integers, &lt;code&gt;k = 1, 2, ...&lt;/code&gt;.</source>
          <target state="translated">베르누이 (Beroulli) 시험은 성공 또는 실패 두 가지 결과 중 하나를 사용한 실험입니다 (이러한 실험의 예는 동전 던지기입니다). 기하 분포는 성공을 달성하기 위해 실행해야하는 시행 횟수를 모델링합니다. 따라서 양의 정수 &lt;code&gt;k = 1, 2, ...&lt;/code&gt; 됩니다.</target>
        </trans-unit>
        <trans-unit id="ab274f607cf51efd384bd87e6b3a93295c182bec" translate="yes" xml:space="preserve">
          <source>Besides the structural information contained in the strides and dimensions members of the &lt;a href=&quot;c-api.types-and-structures#c.PyArrayObject&quot;&gt;&lt;code&gt;PyArrayObject&lt;/code&gt;&lt;/a&gt;, the flags contain important information about how the data may be accessed. In particular, the &lt;a href=&quot;c-api.array#c.NPY_ARRAY_ALIGNED&quot;&gt;&lt;code&gt;NPY_ARRAY_ALIGNED&lt;/code&gt;&lt;/a&gt; flag is set when the memory is on a suitable boundary according to the data-type array. Even if you have a contiguous chunk of memory, you cannot just assume it is safe to dereference a data- type-specific pointer to an element. Only if the &lt;a href=&quot;c-api.array#c.NPY_ARRAY_ALIGNED&quot;&gt;&lt;code&gt;NPY_ARRAY_ALIGNED&lt;/code&gt;&lt;/a&gt; flag is set is this a safe operation (on some platforms it will work but on others, like Solaris, it will cause a bus error). The &lt;a href=&quot;c-api.array#c.NPY_ARRAY_WRITEABLE&quot;&gt;&lt;code&gt;NPY_ARRAY_WRITEABLE&lt;/code&gt;&lt;/a&gt; should also be ensured if you plan on writing to the memory area of the array. It is also possible to obtain a pointer to an unwritable memory area. Sometimes, writing to the memory area when the &lt;a href=&quot;c-api.array#c.NPY_ARRAY_WRITEABLE&quot;&gt;&lt;code&gt;NPY_ARRAY_WRITEABLE&lt;/code&gt;&lt;/a&gt; flag is not set will just be rude. Other times it can cause program crashes ( &lt;em&gt;e.g.&lt;/em&gt; a data-area that is a read-only memory-mapped file).</source>
          <target state="translated">&lt;a href=&quot;c-api.types-and-structures#c.PyArrayObject&quot;&gt; &lt;code&gt;PyArrayObject&lt;/code&gt; &lt;/a&gt; 의 strides 및 dimension 멤버에 포함 된 구조 정보 외에도 플래그에는 데이터 액세스 방법에 대한 중요한 정보가 포함됩니다. 특히 &lt;a href=&quot;c-api.array#c.NPY_ARRAY_ALIGNED&quot;&gt; &lt;code&gt;NPY_ARRAY_ALIGNED&lt;/code&gt; &lt;/a&gt; 플래그는 메모리가 데이터 유형 배열에 따라 적절한 경계에있을 때 설정됩니다. 연속 된 메모리 청크가 있더라도 요소에 대한 데이터 유형별 포인터를 역 참조하는 것이 안전하다고 가정 할 수는 없습니다. &lt;a href=&quot;c-api.array#c.NPY_ARRAY_ALIGNED&quot;&gt; &lt;code&gt;NPY_ARRAY_ALIGNED&lt;/code&gt; &lt;/a&gt; 플래그가 설정된 경우에만 안전한 작업입니다 (일부 플랫폼에서는 작동하지만 Solaris와 같은 다른 플랫폼에서는 버스 오류가 발생 함). &lt;a href=&quot;c-api.array#c.NPY_ARRAY_WRITEABLE&quot;&gt; &lt;code&gt;NPY_ARRAY_WRITEABLE&lt;/code&gt; &lt;/a&gt;어레이의 메모리 영역에 쓰려는 경우에도 확인해야합니다. 쓰기 불가능한 메모리 영역에 대한 포인터를 얻을 수도 있습니다. 때로는 &lt;a href=&quot;c-api.array#c.NPY_ARRAY_WRITEABLE&quot;&gt; &lt;code&gt;NPY_ARRAY_WRITEABLE&lt;/code&gt; &lt;/a&gt; 플래그가 설정되지 않은 경우 메모리 영역에 쓰는 것이 무례한 경우가 있습니다. 다른 경우 프로그램 충돌을 일으킬 수 있습니다 ( &lt;em&gt;예 :&lt;/em&gt; 읽기 전용 메모리 매핑 파일 인 데이터 영역).</target>
        </trans-unit>
        <trans-unit id="22e034c69c8701c0ed22fdd3834451a1ee6eff5e" translate="yes" xml:space="preserve">
          <source>Best practice for achieving reproducible bit streams is to use the default &lt;code&gt;None&lt;/code&gt; for the initial entropy, and then use &lt;a href=&quot;numpy.random.seedsequence.entropy#numpy.random.SeedSequence.entropy&quot;&gt;&lt;code&gt;SeedSequence.entropy&lt;/code&gt;&lt;/a&gt; to log/pickle the &lt;a href=&quot;../../entropy#module-numpy.random.entropy&quot;&gt;&lt;code&gt;entropy&lt;/code&gt;&lt;/a&gt; for reproducibility:</source>
          <target state="translated">재현 가능한 비트 스트림을 달성하는 가장 좋은 방법 은 초기 엔트로피에 기본 &lt;code&gt;None&lt;/code&gt; 을 사용한 다음 &lt;a href=&quot;numpy.random.seedsequence.entropy#numpy.random.SeedSequence.entropy&quot;&gt; &lt;code&gt;SeedSequence.entropy&lt;/code&gt; &lt;/a&gt; 를 사용하여 재현성 을 위해 &lt;a href=&quot;../../entropy#module-numpy.random.entropy&quot;&gt; &lt;code&gt;entropy&lt;/code&gt; &lt;/a&gt; 를 기록 / 피클하는 것 입니다.</target>
        </trans-unit>
        <trans-unit id="ff113b93867eb5d4708dd06e48a11f6662278fd5" translate="yes" xml:space="preserve">
          <source>Beta, positive (&amp;gt;0).</source>
          <target state="translated">베타, 양성 (&amp;gt; 0).</target>
        </trans-unit>
        <trans-unit id="df6d93c232f8ef730e08cac2f842b70dab985fb0" translate="yes" xml:space="preserve">
          <source>Beta: &amp;lsquo;1.8.0b1&amp;rsquo;, &amp;lsquo;1.8.0b2&amp;rsquo;, etc.</source>
          <target state="translated">베타 : '1.8.0b1', '1.8.0b2'등</target>
        </trans-unit>
        <trans-unit id="26ffbba2ad335a399beb79e57cd9f0fee4d0bfe1" translate="yes" xml:space="preserve">
          <source>Beyond the Provided Typemaps</source>
          <target state="translated">제공된 타입 맵을 넘어</target>
        </trans-unit>
        <trans-unit id="2381a720988421ed44a915283532f745ec598844" translate="yes" xml:space="preserve">
          <source>Binary Format Description</source>
          <target state="translated">이진 형식 설명</target>
        </trans-unit>
        <trans-unit id="b26f6c63a335a90adeeab8f4d5013e4f2efe2bec" translate="yes" xml:space="preserve">
          <source>Binary operations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cc036b4a48151bfca642ff2ead78a54a934983c" translate="yes" xml:space="preserve">
          <source>Binary representation of &lt;code&gt;num&lt;/code&gt; or two&amp;rsquo;s complement of &lt;code&gt;num&lt;/code&gt;.</source>
          <target state="translated">바이너리 표현 &lt;code&gt;num&lt;/code&gt; 또는 2의 보수 &lt;code&gt;num&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9cc1259e21c7e613999e790394c5c675e22538ae" translate="yes" xml:space="preserve">
          <source>Binary search is used to find the required insertion points.</source>
          <target state="translated">이진 검색은 필요한 삽입 점을 찾는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="d16d7bbb9c6ef7dc7a209b9f7f44b9f5da556503" translate="yes" xml:space="preserve">
          <source>Binary serialization</source>
          <target state="translated">이진 직렬화</target>
        </trans-unit>
        <trans-unit id="c2fcfedbbaa7680e63fd8ec6b6d6fea722eb952d" translate="yes" xml:space="preserve">
          <source>Binomials</source>
          <target state="translated">Binomials</target>
        </trans-unit>
        <trans-unit id="d12186b0252e4232a8110ba893b738140b658fd0" translate="yes" xml:space="preserve">
          <source>Bit Generators</source>
          <target state="translated">비트 생성기</target>
        </trans-unit>
        <trans-unit id="d9ea127fdd4796c75fc01357c967509bff02d70a" translate="yes" xml:space="preserve">
          <source>Bit field (following integer gives the number of bits in the bit field).</source>
          <target state="translated">비트 필드 (정수 뒤에 오는 비트 필드의 비트 수)</target>
        </trans-unit>
        <trans-unit id="4239f8b7894d76bb52c94538f111a8da8d4fb0a0" translate="yes" xml:space="preserve">
          <source>Bit packing</source>
          <target state="translated">비트 패킹</target>
        </trans-unit>
        <trans-unit id="b80dbb4a253c53f5aa98843beeecc669ef1da4eb" translate="yes" xml:space="preserve">
          <source>Bit-flags describing how this data type is to be interpreted.</source>
          <target state="translated">이 데이터 유형을 해석하는 방법을 설명하는 비트 플래그.</target>
        </trans-unit>
        <trans-unit id="59a321c44dd261b336bb24b8f3a93b2ffcf9ad14" translate="yes" xml:space="preserve">
          <source>Bit-masks are in &lt;code&gt;numpy.core.multiarray&lt;/code&gt; as the constants &lt;code&gt;ITEM_HASOBJECT&lt;/code&gt;, &lt;code&gt;LIST_PICKLE&lt;/code&gt;, &lt;code&gt;ITEM_IS_POINTER&lt;/code&gt;, &lt;code&gt;NEEDS_INIT&lt;/code&gt;, &lt;code&gt;NEEDS_PYAPI&lt;/code&gt;, &lt;code&gt;USE_GETITEM&lt;/code&gt;, &lt;code&gt;USE_SETITEM&lt;/code&gt;. A full explanation of these flags is in C-API documentation; they are largely useful for user-defined data-types.</source>
          <target state="translated">비트 마스크에 &lt;code&gt;numpy.core.multiarray&lt;/code&gt; 상수로 &lt;code&gt;ITEM_HASOBJECT&lt;/code&gt; , &lt;code&gt;LIST_PICKLE&lt;/code&gt; , &lt;code&gt;ITEM_IS_POINTER&lt;/code&gt; , &lt;code&gt;NEEDS_INIT&lt;/code&gt; , &lt;code&gt;NEEDS_PYAPI&lt;/code&gt; , &lt;code&gt;USE_GETITEM&lt;/code&gt; , &lt;code&gt;USE_SETITEM&lt;/code&gt; . 이러한 플래그에 대한 자세한 설명은 C-API 설명서에 있습니다. 이들은 사용자 정의 데이터 유형에 매우 유용합니다.</target>
        </trans-unit>
        <trans-unit id="c6c2f273c5d1a8dcbceea602bbb87c029bbc0d32" translate="yes" xml:space="preserve">
          <source>Bit-twiddling functions</source>
          <target state="translated">비트 트위들 링 기능</target>
        </trans-unit>
        <trans-unit id="460d665e77f8686560c843f72478486336f12a1b" translate="yes" xml:space="preserve">
          <source>Bit-width names</source>
          <target state="translated">비트 폭 이름</target>
        </trans-unit>
        <trans-unit id="7176dd338904b0fc1d2cdf1063572e4e5cbd193a" translate="yes" xml:space="preserve">
          <source>Bit-width references to enumerated typenums</source>
          <target state="translated">열거 된 typenum에 대한 비트 너비 참조</target>
        </trans-unit>
        <trans-unit id="143911730a6c4fbdf6bd766470cddffa24dd0b5c" translate="yes" xml:space="preserve">
          <source>BitGenerator</source>
          <target state="translated">BitGenerator</target>
        </trans-unit>
        <trans-unit id="cc03ca2870189a580c7299116633756162b41a61" translate="yes" xml:space="preserve">
          <source>BitGenerator for Chris Doty-Humphrey&amp;rsquo;s Small Fast Chaotic PRNG.</source>
          <target state="translated">Chris Doty-Humphrey의 소형 고속 혼돈 PRNG 용 BitGenerator.</target>
        </trans-unit>
        <trans-unit id="218df33e7359786597fc4c2a6c1726e5e91ef2e6" translate="yes" xml:space="preserve">
          <source>BitGenerator for the PCG-64 pseudo-random number generator.</source>
          <target state="translated">PCG-64 의사 난수 생성기를위한 BitGenerator.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
