<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="tensorflow">
    <body>
      <group id="tensorflow">
        <trans-unit id="e463cbd7583542e1efcb496fe9f9c46e29c291ca" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: If the entity could not be converted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37d37b2edf29adc7e27dc88a6f74a439fecef271" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: If the existing scope already has the given variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b868a410bd745f991f29b33bafcb745230b30df" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: If the feature_columns are not specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1a84dc8eb5ad08d42b8e082e23c381f3eaace35" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: If the grads_and_vars is empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33fad66c42edf3b82877b192148a0b289edde8d3" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: If the grads_and_vars is malformed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e59d3ff813fb22314563368eb9f798df566dc8e1" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: If the graph contains any numeric operations in a control flow structure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97d250ce303a1daf2d1917b097b5d7ed401bc541" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: If the initial &lt;code&gt;ndims&lt;/code&gt; of &lt;code&gt;ref&lt;/code&gt;, &lt;code&gt;indices&lt;/code&gt;, and &lt;code&gt;updates&lt;/code&gt; are not the same.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="baae9ac1ceb75a8e4a471d3a7258c73b4f5d1532" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: If the initial value is not specified, or does not have a shape and &lt;code&gt;validate_shape&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdcf6f85582a1001d068dd138d980b2c67c7e642" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: If the input signature cannot be inferred from the model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2814dffe704d6c49340c406938df088229711147" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: If the interpreter could not resize the input tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="357f2accc801d57f9718d4254542cc6fa0dbbc79" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: If the interpreter could not set the tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4450b7721fe257422c7aa320c828f48e7a0728e1" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: If the interpreter was unable to create.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a134f56154910149b5864b644b881080b20c943" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: If the last dimension of &lt;code&gt;sorted_sequence &amp;gt;= 2^31-1&lt;/code&gt; elements. If the total size of values exceeds &lt;code&gt;2^31 - 1&lt;/code&gt; elements. If the first &lt;code&gt;N-1&lt;/code&gt; dimensions of the two tensors don't match.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40049e7e954988496f3d38d42bd5a3112c803f9d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: If the number of dimensions in &lt;code&gt;st_input&lt;/code&gt; is not known statically, or is not two.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8e4bb0f0b441a55816c5423598b691c2db6265d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: If the number of inputs per replica does not match the number of formal parameters to &lt;code&gt;computation&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43b1781c809855af519388a04332eadbd40f62c2" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: If the provided tag was already used for this type of event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="670c1df6f9d378a104ea594117998f50dbaddf92" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: If the provided weights list does not match the layer's specifications.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6955c60d52e3cda032ba6fa70ebc0f10d4429c27" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: If the same tensor or variable is specified multiple times in &lt;code&gt;primals&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bded193c37d42ab62cb87115e40e73f8e1f7feaf" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: If the scalar values in &lt;code&gt;pylist&lt;/code&gt; have inconsistent nesting depth; or if ragged_rank or inner_shape are incompatible with &lt;code&gt;pylist&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="178603534c0547cc4c302c36ef847455b44c7a6b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: If the shape of &lt;code&gt;image&lt;/code&gt; is incompatible with the &lt;code&gt;offset_*&lt;/code&gt; or &lt;code&gt;target_*&lt;/code&gt; arguments, or either &lt;code&gt;offset_height&lt;/code&gt; or &lt;code&gt;offset_width&lt;/code&gt; is negative, or either &lt;code&gt;target_height&lt;/code&gt; or &lt;code&gt;target_width&lt;/code&gt; is not positive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99dbb7179ac9029c8c2b23ccf6a0f04c79dc92ea" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: If the shape of &lt;code&gt;image&lt;/code&gt; is incompatible with the &lt;code&gt;offset_*&lt;/code&gt; or &lt;code&gt;target_*&lt;/code&gt; arguments, or either &lt;code&gt;offset_height&lt;/code&gt; or &lt;code&gt;offset_width&lt;/code&gt; is negative.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73734377e6a0a0c44a426641a5132fddcd65fe0c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: If the shape of &lt;code&gt;logits&lt;/code&gt; doesn't match that of &lt;code&gt;multi_class_labels&lt;/code&gt; or if the shape of &lt;code&gt;weights&lt;/code&gt; is invalid, or if &lt;code&gt;weights&lt;/code&gt; is None. Also if &lt;code&gt;multi_class_labels&lt;/code&gt; or &lt;code&gt;logits&lt;/code&gt; is None.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4234431a68db9d7efe16b93ef032a7d304eda10f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: If the shape of &lt;code&gt;logits&lt;/code&gt; doesn't match that of &lt;code&gt;onehot_labels&lt;/code&gt; or if the shape of &lt;code&gt;weights&lt;/code&gt; is invalid or if &lt;code&gt;weights&lt;/code&gt; is None. Also if &lt;code&gt;onehot_labels&lt;/code&gt; or &lt;code&gt;logits&lt;/code&gt; is None.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c475a9fe146da54162a899ec9c74aac8e23a5aba" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: If the shape of &lt;code&gt;predictions&lt;/code&gt; doesn't match that of &lt;code&gt;labels&lt;/code&gt; or if the shape of &lt;code&gt;weights&lt;/code&gt; is invalid or if &lt;code&gt;labels&lt;/code&gt; or &lt;code&gt;predictions&lt;/code&gt; is None.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="394a7a7dbcc70badc83342c942de159ebc7663e6" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: If the shape of &lt;code&gt;predictions&lt;/code&gt; doesn't match that of &lt;code&gt;labels&lt;/code&gt; or if the shape of &lt;code&gt;weights&lt;/code&gt; is invalid. Also if &lt;code&gt;labels&lt;/code&gt; or &lt;code&gt;predictions&lt;/code&gt; is None.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74d97566159e568825059dc253d9d556d87676c4" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: If the shape of &lt;code&gt;sample_weight&lt;/code&gt; is invalid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7315e502a475b5b5447b61427527dd25c87e4bcd" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: If the shape of the input cannot be inferred from the arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b6aa89b8acb09ddbc06d0ebdc4df54ba2853810" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: If the shapes of &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt;, and &lt;code&gt;axes&lt;/code&gt; are incompatible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e601caaec5c81aab657bd2830db84cf7b41dbaa3" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: If the shapes of &lt;code&gt;logits&lt;/code&gt; and &lt;code&gt;labels&lt;/code&gt; don't match or if &lt;code&gt;labels&lt;/code&gt; or &lt;code&gt;logits&lt;/code&gt; is None.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d8a65a31b29a68ceff315ae6099f042ed37791d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: If the shapes of &lt;code&gt;logits&lt;/code&gt;, &lt;code&gt;labels&lt;/code&gt;, and &lt;code&gt;weights&lt;/code&gt; are incompatible, or if any of them are None.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61e58b430ff99d9a04945c63c1e0020d4f1f3a97" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: If the static &lt;code&gt;inputs&lt;/code&gt; dimensions don't match with the values given in &lt;code&gt;maximum_shapes&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="183a3c1ae3178898483912062faa4f658c463988" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: If the string_tensor is a null Python list. At runtime, will fail with an assertion if string_tensor becomes a null tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cef2b4873094b8fa892488c0f1b4087ce85ff16e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: If the structure of inputs per replica does not match the structure of &lt;code&gt;maximum_shapes&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aae69a6b0deb6d34da13ca8e1adbe4be98aa88d3" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: If the tensor is not scalar (rank 0), or if its shape is unknown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f69979463264043bcceb0917d3e584243dfb730e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: If the two shapes can not be broadcasted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f4e1371aff1c712c8a8054582f5828c92359d11" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: If the two structures do not have the same number of elements or if the two structures are not nested in the same way.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f26ca0deab5248fab4ac36fb407c5b864ae7e11d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: If the underlying model isn't configured to compute accuracy. You should pass &lt;code&gt;metrics=[&quot;accuracy&quot;]&lt;/code&gt; to the &lt;code&gt;.compile()&lt;/code&gt; method of the model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fa76d7eef74d48b33777ebd4d4b37dac45ba623" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: If there are no arguments passed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c87d1cace18932b4d33a2332b9356d07fdcf2079" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: If there are too many inputs, the inputs do not match, or input data is missing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ea43a6f7d17207143b757c2f12605aea27ad118" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: If there is a conflict between &lt;code&gt;predict_keys&lt;/code&gt; and &lt;code&gt;predictions&lt;/code&gt;. For example if &lt;code&gt;predict_keys&lt;/code&gt; is not &lt;code&gt;None&lt;/code&gt; but &lt;a href=&quot;../../../../estimator/estimatorspec#predictions&quot;&gt;&lt;code&gt;tf.estimator.EstimatorSpec.predictions&lt;/code&gt;&lt;/a&gt; is not a &lt;code&gt;dict&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="974d2df98cddd2dddbf316e4a439fb92a40d5fdc" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: If there is a conflict between &lt;code&gt;predict_keys&lt;/code&gt; and &lt;code&gt;predictions&lt;/code&gt;. For example if &lt;code&gt;predict_keys&lt;/code&gt; is not &lt;code&gt;None&lt;/code&gt; but &lt;a href=&quot;../../../estimator/estimatorspec#predictions&quot;&gt;&lt;code&gt;tf.estimator.EstimatorSpec.predictions&lt;/code&gt;&lt;/a&gt; is not a &lt;code&gt;dict&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e31516934d8f83a19446e16cd36c7ba6f6d6c72c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: If there is a conflict between &lt;code&gt;predict_keys&lt;/code&gt; and &lt;code&gt;predictions&lt;/code&gt;. For example if &lt;code&gt;predict_keys&lt;/code&gt; is not &lt;code&gt;None&lt;/code&gt; but &lt;a href=&quot;../estimatorspec#predictions&quot;&gt;&lt;code&gt;tf.estimator.EstimatorSpec.predictions&lt;/code&gt;&lt;/a&gt; is not a &lt;code&gt;dict&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c55f4337b223805379329a344ffc2d7300b5d839" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: If there is a conflict between &lt;code&gt;predict_keys&lt;/code&gt; and &lt;code&gt;predictions&lt;/code&gt;. For example if &lt;code&gt;predict_keys&lt;/code&gt; is not &lt;code&gt;None&lt;/code&gt; but &lt;a href=&quot;estimatorspec#predictions&quot;&gt;&lt;code&gt;tf.estimator.EstimatorSpec.predictions&lt;/code&gt;&lt;/a&gt; is not a &lt;code&gt;dict&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e0bc3ccb3c74406d6c13a6be0eba89f829843df" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: If there is no TypeSpec that is compatible with both &lt;code&gt;self&lt;/code&gt; and &lt;code&gt;other&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3051ff6fe536ea3dc2463e4dfd9e797cc23d241a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: If this is called before apply_gradients().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="886b72636d98922fe496c67274f2d92fc569d7b8" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: If this iterator initializes itself automatically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65a2b33b7ff6681336a2fa32e6711785a5f9216d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: If this op does not have an attr with the given &lt;code&gt;name&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c3e977b8ea94f300c0fc1e03e5f1d58726d6637" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: If transpose_a and adjoint_a are both set to True.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59c52c28f9b9cf6e2bd9fcc50db1b98dcfc75551" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: If units is not an int.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="954bab0d20ab1b132f10f5fd5710e2614535f6ca" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: If valid compression_type can't be determined from &lt;code&gt;options&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d811d524caaf3cfe9208f46a34399bd9126b2fa0" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: If validation fails.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec3943d0f00609e96d6ff41bd8f12b6fa554b775" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: If vectorization of jacobian computation fails or if first dimension of &lt;code&gt;target&lt;/code&gt; and &lt;code&gt;source&lt;/code&gt; do not match.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9d52da43d12238b51e7cb517b975241441be795" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: If vectorization of jacobian computation fails.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c28466b15d9ebee5c921bca5dd224ea21f50cefb" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: If weight_column is used in &lt;code&gt;feature_columns&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f50d48651c32098c01e548db0ecd6a95c3965fa" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: If wrong keyword arguments are provided.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ecace18890ebcf3a72d4344031f9079a98bcd55" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: If x is not list, but any other type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d50e51322d04182871eac55e065ec0382ca955a8" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: In case &lt;code&gt;dim(x) == 1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b488489d484c6976c48e8df62c81209b111ec12" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: In case &lt;code&gt;x&lt;/code&gt; is not a symbolic tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04d8b716aa56693ef74d388937f1590a44ba7067" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: In case any gradient cannot be computed (e.g. if gradient function not implemented).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4c6a8a4432541b8dd541b10c60a74878aafe7f4" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: In case of an invalid value for the &quot;scale&quot;, mode&quot; or &quot;distribution&quot; arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60bebe3193d86c1695775ab8fcb3d34d43ee78fc" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: In case of invalid &lt;code&gt;count_mode&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6459d2c3129df57f66eae7f165a53c910b09637b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: In case of invalid &lt;code&gt;data_format&lt;/code&gt; value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5d0dc61e5d25bd311af49e9b3a0b6ca70c54945" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: In case of invalid arguments for &lt;code&gt;optimizer&lt;/code&gt;, &lt;code&gt;loss&lt;/code&gt;, &lt;code&gt;metrics&lt;/code&gt; or &lt;code&gt;sample_weight_mode&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e2d1e5a80603d9a07082189342fd91b32a191b9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: In case of invalid layer name or index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="497264be2240a1f2f34b624cab3abcf2eb60d956" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: In case of invalid shape for &lt;code&gt;y&lt;/code&gt; argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0d6dfaf49988b3d621916a036ca15a7a281ef11" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: In case of invalid user-provided arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45f8b9421c7e65d970b7e8aee65c69529825ed58" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: In case of invalid value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9f60f72518db91e7fb9571474e803b39cb50dc8" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: In case of mismatch between given number of inputs and expectations of the model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8a8512421e22045a04950866be0f1329a2d84ae" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: In case of mismatch between the provided input data and the model's expectations, or in case a stateful model receives a number of samples that is not a multiple of the batch size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8361999462e9345ed0e2111b19f4622735c4c81e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: In case of mismatch between the provided input data and what the model expects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="878ec3515211d2951e60382d4e83326ce0f3a9b8" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: In case the &lt;code&gt;layer&lt;/code&gt; argument does not know its input shape.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97a1d317bff0f1bcbebff1f4f2f76be67ee137e7" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: In case the &lt;code&gt;layer&lt;/code&gt; argument has multiple output tensors, or is already connected somewhere else (forbidden in &lt;code&gt;Sequential&lt;/code&gt; models).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73c9195a5f885e7e5f4cac9e0ab1f00aabd0e91a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: In one of the two cases below: 1. invalid &lt;code&gt;data_format&lt;/code&gt; argument. 2. invalid bias shape. the bias should be either a vector or a tensor with ndim(x) - 1 dimension</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="210d8ab8b596f8485ab4e85de83bd6c6c0fdd07d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: Input is an unknown function or string, i.e., the input does not denote any defined function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="657281280c063f764d410a492d52a9e77b41e9df" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: Input shape is not specified. None value for dimension in input_tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="455abdb35c91813bfde2fae44292b13732114e7c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: Invalid &lt;code&gt;PhysicalDevice&lt;/code&gt; specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e142554b91524e226e6deeb3089dcd6b7da3cb2" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: Invalid arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cd0a106e2c6e12fcbbc773f8a9422b315c24eff" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: Multiple concrete functions are specified. Input shape is not specified. Invalid quantization parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61f7f6211340f820c936cffb32b4162853e04eb9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: On incorrect number of channels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a6c94399662062b9852f664bb07907f2e3ecb60" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: One of &lt;code&gt;save_steps&lt;/code&gt; or &lt;code&gt;save_secs&lt;/code&gt; should be set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e4d52d05575953891df8249efa622263f4166c6" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: Raised if flag_name not defined as a Python flag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7bcd410a0b241b83aed08ccbc31227699644a7e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: Raised if indent or firstline_indent not shorter than length.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0aaf2143b0eb76c24dcaf184e7347a544e2c30ac" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: Raised on flag value parsing error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7c7b0c561feeb5243c8514a62c29f59b2a20ebe" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: Raised when argument didn't match anything in enum.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a33d470011a46c2c463a0ce889ffcfbd4474056c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: Raised when it fails to parse the argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a45495927a1f1bbcd7d53b640ba1e9111a92535" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: Session is not passed and no default session</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f331de93b25cfef03769946cd5399ac478ba1d8" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: The graph is not frozen. input_arrays or output_arrays contains an invalid tensor name. input_shapes is not correctly defined when required</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cf70cebb08acc7d20fd5130f3b94ce5c5574576" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: The input cannot be converted to a tensor, or the specified axis cannot be squeezed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6037a504179c9354d7128ee9c2dbd0220288f7fd" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: The input function is not a valid one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06948e1557bd3895693e10e78372fba77d1db47f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: When attempting to normalize on an empty ensemble or an ensemble of trees which have no splits. Or when attempting to normalize and feature importances have negative values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b8598d5a2fd6e4eb7f915e5ab03d7e54186f5ef" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: When both &lt;code&gt;squeeze_dims&lt;/code&gt; and &lt;code&gt;axis&lt;/code&gt; are specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3aa2f99363a396aac15db37a55f7dd5a0bb3ae62" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: When enum_class is empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fc7be5663598a1e225d100e17b49effa80c2c63" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: When enum_values is empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2246fb99f0d07e731dc91e16206b3b6e717adf79" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: When exactly one of &lt;code&gt;x&lt;/code&gt; or &lt;code&gt;y&lt;/code&gt; is non-None.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e7f8e4409a406b8986b2041da4761bb4d3d4ccf" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: When giving unsupported dtype and no initializer or when trainable has been set to True with synchronization set as &lt;code&gt;ON_READ&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a787272702df49ecf40df9b1f4e1e04e57425bff" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: When indexing keyword argument is not one of &lt;code&gt;xy&lt;/code&gt; or &lt;code&gt;ij&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1d8926b3469d89aac959ad74ab610b6defc7433" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: When indices are not consistent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc997c20afaaca69c15930e5efb92c30bac238f8" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: When mode is not one of &quot;CONSTANT&quot;, &quot;REFLECT&quot;, or &quot;SYMMETRIC&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2568c5acf6db4ef11e8fb2e732759517c11e008" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: When the &lt;code&gt;GraphDef&lt;/code&gt; is larger than 2GB.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f15eddb127c265be4b02f37bdd9a8021f21565b6" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: When the &lt;code&gt;LinearOperator&lt;/code&gt; is not hinted to be &lt;code&gt;non_singular&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ecda0a6b69aeebd6a814be6fa6d16ce27f69f1d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: When the &lt;code&gt;LinearOperator&lt;/code&gt; is not hinted to be positive definite and self adjoint.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd1a93c3937964e9d52312c7dff4b37d4e288e65" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: When the batch size of the RNN layer is unknown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7528cacc2f80bc2a7dcdacbb3f0b1bedf51f7d19" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: When the input numpy array is not compatible with the RNN layer state, either size wise or dtype wise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="178979b2edcb3ad9034e475d0ebb405da0464dfc" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: When the underlying interpreter fails raise ValueError.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a26e0b50a251316e1428c1cd15c6e74e0ca2263" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if 'shuffle' is not provided or a bool.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="812aa4c9d644686efcc9685e86edc44bc924b5ab" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if &lt;code&gt;axis&lt;/code&gt; is neither -1 nor one of the axes of &lt;code&gt;output&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04f0679d71b402c09ccb66c254eb31ccccbca367" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if &lt;code&gt;data_format&lt;/code&gt; is invalid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c27e6f3c4fdf20d7a7e0cd59ac12573e2d8b3c3" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if &lt;code&gt;data_format&lt;/code&gt; is neither &lt;code&gt;&quot;channels_last&quot;&lt;/code&gt; or &lt;code&gt;&quot;channels_first&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64b6dd0d616c8adec4d0814491873c34ef830dae" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if &lt;code&gt;data_format&lt;/code&gt; is neither &lt;code&gt;channels_last&lt;/code&gt; or &lt;code&gt;channels_first&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3c07e09aa8d68a9c1f48f323185128619961ad8" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if &lt;code&gt;default_value&lt;/code&gt; is not in range &lt;code&gt;[0, num_buckets)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e4c5a1d135ebae668c5a99654b769a74d9ccb9d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if &lt;code&gt;dimension&lt;/code&gt; not &amp;gt; 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbb34e3f892f482d73c9d86fed918f2dd11b31c8" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if &lt;code&gt;dtype&lt;/code&gt; is not convertible to &lt;a href=&quot;../../tf#float32&quot;&gt;&lt;code&gt;tf.float32&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa5592454ce20d33caf1558d0a9767de52ffa095" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if &lt;code&gt;dtype&lt;/code&gt; is not convertible to float.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd2b8dca197f8a7d593ce0fcbd5c24772f4afb1b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if &lt;code&gt;dtype&lt;/code&gt; is not integer or string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="338c452f2f180abfb240046975a8af8220e78263" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if &lt;code&gt;embedding_weights&lt;/code&gt; is empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2d417b921378c9ce3398c3249a7d732f7f0e242" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if &lt;code&gt;every_n_iter&lt;/code&gt; is non-positive or it's not a single machine training</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a9e1b5188140abd62635ee2fb6c70816f2a9eac" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if &lt;code&gt;every_n_iter&lt;/code&gt; is non-positive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="305f254cfb2d182d5b442e86dc0d177a4a4922c2" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if &lt;code&gt;global_batch_size&lt;/code&gt; not divisible by &lt;code&gt;num_replicas_in_sync&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49340bb260727a4a11cf56f4c867b29eb1c7f16f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if &lt;code&gt;global_step&lt;/code&gt; is not supplied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8925ebdb60c356bed6266c609ace5da3b1f3e9ae" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if &lt;code&gt;initializer&lt;/code&gt; is specified and is not callable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1da2ea3bed22256402fb4ab88ffa0f220327e4f3" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if &lt;code&gt;initializer&lt;/code&gt; is specified but not callable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55f014c289b878e9f9a851e313e6849401a4b672" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if &lt;code&gt;len(bucket_batch_sizes) != len(bucket_boundaries) + 1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cc9c2ee9915c97381c6247cfb8c22d9ed1e549b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if &lt;code&gt;loop_vars&lt;/code&gt; is empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="562956f96f8dab8f43578211a85e32370b45dce7" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if &lt;code&gt;losses&lt;/code&gt; is not iterable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27a57a481979ac7cfc0261a3edbe2f7cc51b64aa" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if &lt;code&gt;mask&lt;/code&gt; is provided (not &lt;code&gt;None&lt;/code&gt;) but states is not provided (&lt;code&gt;len(states)&lt;/code&gt; == 0).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1e3087494981bb84b80fb16ce43cc86d8ee2dfa" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if &lt;code&gt;max_delta&lt;/code&gt; is invalid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="563824a655606b13e09a9efdbf8ec5aa81816455" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if &lt;code&gt;max_delta&lt;/code&gt; is negative.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f71555f15c914bac2043866789a1616acaa27f5" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if &lt;code&gt;max_sequence_lengths&lt;/code&gt; is positive for a non sequence column or 0 for a sequence column.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd98367a3e23151198c2def6b5ee8f4a96c22c04" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if &lt;code&gt;max_sequence_lengths&lt;/code&gt; is specified and not the same length as &lt;code&gt;categorical_columns&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f51af3d680ea8fbb811c783e0666073b50115dc" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if &lt;code&gt;maxlen&lt;/code&gt; is not a scalar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbdad730c7638b5acd6004bab8abc9af4400af01" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if &lt;code&gt;min_jpeg_quality&lt;/code&gt; or &lt;code&gt;max_jpeg_quality&lt;/code&gt; is invalid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5443c7bc4de862900446a60af4d175e9d19cd161" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if &lt;code&gt;name_&lt;/code&gt; is None.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b448cab882e832f235b112c0359cf6ac06a3aeb" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if &lt;code&gt;num_buckets&lt;/code&gt; is less than one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="249b5b3ceb0bbb58a120c64886ddde949efe2d3a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if &lt;code&gt;num_epochs&lt;/code&gt; is invalid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6190799ab06e70387be787b3a91c168614de746d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if &lt;code&gt;pad_values&lt;/code&gt;, &lt;code&gt;padding_width&lt;/code&gt;, or &lt;code&gt;ngram_width&lt;/code&gt; is set to an invalid value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd4ad8213f5ad50dd9c10c5c712b721c25602901" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if &lt;code&gt;padding&lt;/code&gt; is invalid or the arguments are incompatible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91465b4f7f8a8e44232d3f45ff9ae84fbe02aef9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if &lt;code&gt;pool_mode&lt;/code&gt; is neither &lt;code&gt;&quot;max&quot;&lt;/code&gt; or &lt;code&gt;&quot;avg&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d46407ba4d7cb70d0e33aa90c01e0d982386994" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if &lt;code&gt;pool_size&lt;/code&gt; is not a tuple of 2 integers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0cd3679ce6c5a4792f15af367a7d42bd5aea85f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if &lt;code&gt;rank(mask)&lt;/code&gt; is not known statically; or if &lt;code&gt;mask.shape&lt;/code&gt; is not a prefix of &lt;code&gt;data.shape&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a327e03f2ca0a6b42813dae705a3ea98b2b7d5c4" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if &lt;code&gt;sample_shape&lt;/code&gt; is a &lt;code&gt;TensorShape&lt;/code&gt; and is not fully defined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f38a11b64564b2dbe9b8a5fa1745f51a148da24b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if &lt;code&gt;sess&lt;/code&gt; is None and there isn't any default session.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c3b1d00e23694897cad9bbac132834c46f6864d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if &lt;code&gt;size&lt;/code&gt; has invalid shape or type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40e5e9b9fc65b28416b88fcc312eb1333c408d28" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if &lt;code&gt;slice_input_producer&lt;/code&gt; produces nothing from &lt;code&gt;tensor_list&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21b5c1819d5dc3dd92bad06b5f3974d016d45eb2" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if &lt;code&gt;spatial_dims&lt;/code&gt; are invalid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1361f8dfce77b434351dad8a19b87edab818fc41" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if &lt;code&gt;step_fn&lt;/code&gt; doesn't have a single argument called &lt;code&gt;step_context&lt;/code&gt;. It may also optionally have &lt;code&gt;self&lt;/code&gt; for cases when it belongs to an object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49d5e11cb7f81aa6185da8aa2d36afaaf11335eb" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if &lt;code&gt;strides&lt;/code&gt; is not a tuple of 2 integers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e17e95a06e49f9425c12b9b6034bd1acb2f5ed6" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if &lt;code&gt;summary()&lt;/code&gt; is called before the model is built.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7c97d66bf74e1edd533263410a5b9b667fbe85f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if &lt;code&gt;target_height&lt;/code&gt; or &lt;code&gt;target_width&lt;/code&gt; are zero or negative.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8834fae6802308a866761eee4f82e5b43771d91" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if &lt;code&gt;true_fn&lt;/code&gt; and &lt;code&gt;false_fn&lt;/code&gt; do not return the same number of tensors, or return tensors of different types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d0c33eb4c95ffd4b8d1a1631514f2e389462333" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if &lt;code&gt;unroll&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt; but input timestep is not a fixed number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63f0bf03f51677c7621d5ca9001765cb20cad7d6" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if &lt;code&gt;upper &amp;lt;= lower&lt;/code&gt; or if &lt;code&gt;lower &amp;lt; 0&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d1e63faf5b8183a2b6ad321a146fd86d0720d64" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if &lt;code&gt;value&lt;/code&gt; is neither &lt;code&gt;0&lt;/code&gt; nor &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa1997b802981aeb647bc8d537dfe27a7a640b5c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if &lt;code&gt;value_destination_pairs&lt;/code&gt; is not an iterable of tuples of PerReplica objects and destinations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60b6adafbdb6bc9ad7ce3b55f9ffb2d6f6ec612b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if &lt;code&gt;value_destination_pairs&lt;/code&gt; is not an iterable of tuples of PerReplica objects and destinations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a488bffcc9629485ad8782ac15f4075a05e6594" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if &lt;code&gt;vocabulary_list&lt;/code&gt; is empty, or contains duplicate keys.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d9f6fd1940b63150ceed905afc406579e901565" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if &lt;code&gt;x&lt;/code&gt; already contains a column with the same name as &lt;code&gt;y&lt;/code&gt;, or if the indexes of &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; don't match.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6284dc58137575ceda36dc9deff9b47731064ce6" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if a KL divergence function has already been registered for the given argument classes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c0078e6020a0eb323157d22fab4ce7854b98d10" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if a default writer exists, but no step was provided and &lt;a href=&quot;experimental/get_step&quot;&gt;&lt;code&gt;tf.summary.experimental.get_step()&lt;/code&gt;&lt;/a&gt; is None.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbf870b8beed8cbef0c4a89bc3f341c0ecbe0713" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if a default writer exists, but no step was provided and &lt;a href=&quot;get_step&quot;&gt;&lt;code&gt;tf.summary.experimental.get_step()&lt;/code&gt;&lt;/a&gt; is None.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a392cfe9bfa74eb9ef16ad84e473e3aedf3ff0de" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if an invalid checkpoint_format was given.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e008483a3a982481ca798fedbaf6ed903500cb2" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if an item in &lt;code&gt;feature_columns&lt;/code&gt; is neither a &lt;code&gt;_DenseColumn&lt;/code&gt; nor &lt;code&gt;_CategoricalColumn&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b6e1449ae37f745ea283c30fe97e7b10ea2a6b2" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if an item in &lt;code&gt;feature_columns&lt;/code&gt; is not a &lt;code&gt;DenseColumn&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94aa01dc91aaa0110c96f2c3932b0f89a1bb997a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if an item in &lt;code&gt;feature_columns&lt;/code&gt; is not a &lt;code&gt;_DenseColumn&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bef229760b57bb8ac00036019802c2eb595baba" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if an unsupported resize method is specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc8929f7f3103b4d5f4041d4cfd7ef0fffdb42e0" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if any &lt;code&gt;input_receiver_fn&lt;/code&gt; is &lt;code&gt;None&lt;/code&gt;, no &lt;code&gt;export_outputs&lt;/code&gt; are provided, or no checkpoint can be found.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5b7254b020e425ace4b1552bcfc04f1dcc18346" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if any argument is invalid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ff867c88fbcd8795cbf0c5d2ed59acd3c75554d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if any arguments is invalid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01bf833ed209e7f015eda4278ff4eba2f1498a71" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if any dimension in shape is not a positive integer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efb9d4126b9775e6ae19bf63257d2273e3cef1d0" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if any dimension in shape is not a positive integer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e30646ead7040385758c624b9459d54630a44bf1" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if any feature is invalid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a902a749d8c8867661699347ae118b5b1ef8ece" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if any member of &lt;code&gt;params&lt;/code&gt; is not a valid argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8df4c2f41b378a1b0255e6d261c4aba825e0590" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if any member of graph_parents is &lt;code&gt;None&lt;/code&gt; or not a &lt;code&gt;Tensor&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf94a78eca82f23ba0694a8f7e91cfd9b610d68c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if any of the given &lt;code&gt;categorical_columns&lt;/code&gt; is of different type or has different arguments than the others.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cc2cb7e1a38aef4ef5b9519ce414b706b4dc38b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if any of the keep_probs are not between 0 and 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="324d78ae6d7accc02d7e5c963f07e4e399c18698" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if arguments are invalid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0288aa439b23ed62f634e76be38a9cf12aa24ce" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if arguments have inappropriate values or if verify_shape is True and shape of values is not equals to a shape from the argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5c44700a75dc5123a960e5ae2acb968a6ec5b49" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if both handle and tensor_array_name are provided.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3020881cefd1d6d13e81abec95e0047d9271f423" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if both keras_model and keras_model_path was given.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0aec73a7ac58948e02f38cd9eb0a24a8e380e717" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if called on a symbolic tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdba401cff5878561f5298e5bdb414b38217bb1b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if cells is empty (not allowed), or at least one of the cells returns a state tuple but the flag &lt;code&gt;state_is_tuple&lt;/code&gt; is &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c16cca561b2a69aed634f8070a75676312b2648d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if central_crop_fraction is not within (0, 1].</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c441a27272c1f1c0264e638a25a8e886a9eb3a62" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if cluster is not None and the provided session_config has a cluster_def already.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c33926c840508a3d337206e3d809be5276dd946" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if colocation conflicts with existing device assignment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="040d5c61b1d07088354ffdd1d73200ddecbb64bf" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if duplicate keys are in both &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; when &lt;code&gt;y&lt;/code&gt; is a dict.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66b791d3eee08b41e6bd39f0cfaea13f2e7eec34" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if eager execution is enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b65bc8ee87283c5935401aca29b2a8a1eb8130f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if either both or neither of &lt;code&gt;dim&lt;/code&gt; and &lt;code&gt;axis&lt;/code&gt; are specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b5192e0c800798733b38ede4b13e04367100bad" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if environment variable &lt;code&gt;TF_CONFIG&lt;/code&gt; is incorrectly set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d55b189bdc786b2dc21f111c7d5ce7596b54a176" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if exactly one of &lt;code&gt;ckpt_to_load_from&lt;/code&gt; and &lt;code&gt;tensor_name_in_ckpt&lt;/code&gt; is specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58d728211de0a59db3051b95d42092522300662b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if features and labels have overlapping keys.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02c888e8c0f5ac3e1d587d611176e9c1dfa0cd54" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if features argument is None.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddbd6ce927fb1529383ce89b93da809347db1f74" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if global step tensor is already defined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1752bc75dc199edae555dde470ce5d3a872620b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if images.shape is not a 3-D or 4-D vector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3ecdde94ff009c61bdef8afa37b3aa4dea3a780" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if input &lt;code&gt;a&lt;/code&gt; has fewer than 2 dimensions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="004dcf0283f723ed808657efbfb649bb219b9060" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if input dimension is less than 3.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98e68c4924c92c12c9d3960d311802fdcaff31ba" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if invalid &lt;code&gt;img&lt;/code&gt; or &lt;code&gt;data_format&lt;/code&gt; is passed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c044acf09ef4c7bd4e8d4fa985f7b04a8f4c523" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if invalid &lt;code&gt;x&lt;/code&gt; or &lt;code&gt;data_format&lt;/code&gt; is passed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52116f6bca79c0097669f5edda60e169c95d39d7" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if invalid kwargs are passed in or if in eager execution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbf214d38aee9daf2d392aebe0ebb4347dcd96f4" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if it encounters something that is not a tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b5b197213f76bf10198fc411ce26b41cfa8ae47" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if k is invalid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a61badff3cbf7f9cb834e9f196830a2ffcc5e8ae" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if keras_model has not been compiled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62012749e85dba08ceabb7803ed18df032be18a7" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if label_key is None.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b96888fbca67663b4d2733c1393606a1071a5954" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if len(args) == 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="824b2cb0f7a6870af0609ce6c87b2e615f1aa164" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if logit_fn does not return a Tensor or a dictionary mapping strings to Tensors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8fe6508ccacf998aca590025b4b1b6fc5127d6a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if n_classes &amp;lt; 2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f67fbaeb1d82c24f86c2aa113361e0aae80bd1e9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if neither &lt;code&gt;name&lt;/code&gt; nor &lt;code&gt;default_name&lt;/code&gt; is provided but &lt;code&gt;values&lt;/code&gt; are.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81291c986385366f3764263112169b08705e98ea" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if neither &lt;code&gt;tensors&lt;/code&gt; nor &lt;code&gt;dtype&lt;/code&gt; is supplied, or result is not float, or the common type of the inputs is not a floating point type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9946309a34192398584ffc86ed0857fe98bee461" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if neither classes nor scores is set, or one of them is not a &lt;code&gt;Tensor&lt;/code&gt; with the correct dtype.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee60502794b2431af27341e7e741ef1fa527eeb1" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if neither keras_model nor keras_model_path was given.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fd5e77230afcefcf0eda514aa6e0c69a96083e2" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if neither or both of {&lt;code&gt;window_size&lt;/code&gt;, &lt;code&gt;window_size_func&lt;/code&gt;} are passed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18ce09f44ceca2ca0ce1260f78f9dda5570a2826" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if no &lt;code&gt;serving_input_receiver_fn&lt;/code&gt; is provided, no &lt;code&gt;export_outputs&lt;/code&gt; are provided, or no checkpoint can be found.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5c442623e14f8fef32dd51a1359a77de8f7239a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if only one of &lt;code&gt;a[p]&lt;/code&gt; and &lt;code&gt;b[p]&lt;/code&gt; is a dict or &lt;code&gt;a[p]&lt;/code&gt; and &lt;code&gt;b[p]&lt;/code&gt; have different length, where &lt;code&gt;[p]&lt;/code&gt; denotes a path to the nested structure, e.g. given &lt;code&gt;a = [(1, 1), {'d': (6, 7)}]&lt;/code&gt; and &lt;code&gt;[p] = [1]['d']&lt;/code&gt;, then &lt;code&gt;a[p] = (6, 7)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdc7fca662c5e1dec59ed36bb8de602556de2abe" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if op is None but ignore_existing is False.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ae3ec3fc32927427a490588041406da0e902889" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if per_replica_value can't be converted to a PerReplica object or if destinations aren't strings, Variables or DistributedValues</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31f16fe3b2c0ef6d19a2581956b9ac354472569e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if per_replica_value can't be converted to a PerReplica object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0bef5c6266b3f6045c9f83562f2e2d608dffc79" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if remote_host is None.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd2469bc54d33dfdfdb118a974f861e570a89e56" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if scalar is not a 0-D &lt;code&gt;scalar&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3425720de7fc567d5e344555123260c6e4dbea4" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if the &lt;code&gt;gpus&lt;/code&gt; argument does not match available devices.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f7d1a70ae660280d6f276d1bcb101034bd1f390" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if the &lt;code&gt;node_def&lt;/code&gt; name is not valid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9ae69409e2dc97e1f0de25d377f7c95b8412235" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if the arguments are invalid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="088e38df5776e14f485b502d5e210890b709e2d9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if the checkpoint read doesn't have model_checkpoint_path set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36058b25cc0b1384123b0e9d6e8bc59a90ffbaf6" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if the combination of the parameters is invalid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b217309c23af77bd0b2dc266ddd2539d58f92ad6" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if the given &lt;a href=&quot;options&quot;&gt;&lt;code&gt;tf.data.Options&lt;/code&gt;&lt;/a&gt; cannot be merged</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="246595a75f7587c17a05aff4a4bed9f1931a5e9c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if the input combination is invalid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="209456cb84ea4b9761da220bf5a91a509807a0f3" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if the keras_model_path is a GCS URI.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c32abcc446f864f2bf11f02f41064abbb7526a0" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if the layer isn't yet built (in which case its weights aren't yet defined).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e10de5eef3b4d60b8aa282ab508941b59c10deeb" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if the layer's &lt;code&gt;call&lt;/code&gt; method returns None (an invalid value).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88aa3a9e4576935227da2252b0f21fac80120da9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if the lengths of the output of &lt;code&gt;fn&lt;/code&gt; and &lt;code&gt;dtype&lt;/code&gt; do not match.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f346fa406e867b3a3620ec36fa77002a7348fed" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if the lengths of the output of &lt;code&gt;fn&lt;/code&gt; and &lt;code&gt;initializer&lt;/code&gt; do not match.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3866b86ed3f83f654eebd782b12b328fceb7cd19" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if the node is not a summary op.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6571674941a191abfb7337867bfb00b65d29a83f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if the number of elements in the lists do not match.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41722e6316e8c276c9d26c048fa5d2e4aaef51dd" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if the number of placeholders does not match the number of inputs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4358f05006e18ec60b46dd113ed706a0fd4a6f45" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if the outputs is not dict, or any of its keys are not strings, or any of its values are not &lt;code&gt;Tensor&lt;/code&gt;s.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16d6abc475393f3837c42677a981207b08bf04f7" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if the shape of 'image' is incompatible with this function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8ee11cd85b29ebc3f0142331d2e5b6322ef4605" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if the shape of &lt;code&gt;image&lt;/code&gt; not supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9de59849780e4e2d4f8554fe6bfe16f621b6233c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if the shape of &lt;code&gt;images&lt;/code&gt; is incompatible with the shape arguments to this function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ef66a4217f49ae226836e5872fbf7d94b2ec7c9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if the shape of &lt;code&gt;y&lt;/code&gt; mismatches the shape of values in &lt;code&gt;x&lt;/code&gt; (i.e., values in &lt;code&gt;x&lt;/code&gt; have same shape).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27045a140a70e8b7a881dd56a792032c802b5aa0" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if the spec was not valid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce7da13df5a8a299d4a453e90ec016cca13a177f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if the target is a variable or if unconnected gradients is called with an unknown value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b09915e8b56da5e60fe2d30f903516db66fb3fe" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if the value is not a &lt;code&gt;Tensor&lt;/code&gt; with dtype tf.float32.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b119c921f2edb8254fb6b6c5588e47c91aff5079" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if this is called via a subclass and if that class overrides a member of &lt;code&gt;Estimator&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="067ad286c60ae9f535ea4deedf8658af00739493" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if types of &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;boundaries&lt;/code&gt; do not match, or types of all &lt;code&gt;values&lt;/code&gt; do not match or the number of elements in the lists does not match.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fea7e068b1064912926efd7a0cfacc962935da0" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: if x or y is an empty dict.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abe8e4025b8cd35ee3c230a4e42d59ce34ad0e44" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: in case &lt;code&gt;maxlen&lt;/code&gt; is so low that no input sequence could be kept.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a988d5d430ac39a9b53d148ffaa252919744f2b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: in case of incorrect value for &lt;code&gt;data_format&lt;/code&gt; or &lt;code&gt;interpolation&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e8549c095bc8d8e53a1e7ae55e3c35590a2746d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: in case of invalid &lt;code&gt;label_mode&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="524404a802db69cf86cffcbff72373550e70a6cb" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: in case of invalid &lt;code&gt;model&lt;/code&gt; argument value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fd964e2f39c91e64fcd82b623c6964fe4c54950" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: in case of invalid arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c449d9beb7977bbcb445befc4df526b0f630cf77" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: in case of invalid constructor arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61f0da13fa6903d56b56ff0995754e29aa0b9863" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: parameters of &lt;code&gt;model_fn&lt;/code&gt; don't match &lt;code&gt;params&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bc075f4d45447a66fa91f9037600c8cfc520877" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: when &lt;code&gt;num_oov_buckets&lt;/code&gt; is not positive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0dd91fbaff5db6abbedbe48611846a56b2c01a76" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: when an option is set more than once to a non-default value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92d4bdcaab9ad873245be6ee961b349499ec73b5" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: when creating a new variable and shape is not declared, when violating reuse during variable creation, or when &lt;code&gt;initializer&lt;/code&gt; dtype and &lt;code&gt;dtype&lt;/code&gt; don't match. Reuse is set inside &lt;code&gt;variable_scope&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0682eae7a56d8f6a2398206dd1ac6cd291a4acd8" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: when the filename is empty, or when the table key and value data types do not match the expected data types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c6a14a8b8fa67e6e5242b673f3f155ebdd59bcc" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: when trying to reuse within a create scope, or create within a reuse scope.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="340645a47edacadc3f3c929593b4b87c07ba1440" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/b&gt;: when wrong arguments are given or unsupported functionalities are requested.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e87df106833d34b2bb2ed22442e387d6050865cd" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ValuesError&lt;/code&gt;&lt;/b&gt;: If the dtype is not numeric or boolean.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1237ee7f78b38d2460cfe407223b66849f33a9fc" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;_reuse&lt;/code&gt;&lt;/b&gt;: Boolean, whether to reuse the weights of a previous layer by the same name.</source>
          <target state="translated">&lt;b&gt;&lt;code&gt;_reuse&lt;/code&gt;&lt;/b&gt;: Boolean, whether to reuse the weights of a previous layer by the same name.</target>
        </trans-unit>
        <trans-unit id="e9b5ef697ae14164f0c170e22db64484da3d6534" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;_sentinel&lt;/code&gt;&lt;/b&gt;: Used to prevent positional parameters. Internal, do not use.</source>
          <target state="translated">&lt;b&gt;&lt;code&gt;_sentinel&lt;/code&gt;&lt;/b&gt;: Used to prevent positional parameters. Internal, do not use.</target>
        </trans-unit>
        <trans-unit id="d6fd9a7ac79019e1fb066320ab7214be84d62381" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;a&lt;/code&gt;&lt;/b&gt;: (Batch of) &lt;code&gt;float&lt;/code&gt;-like matrix-shaped &lt;code&gt;Tensor&lt;/code&gt;(s) which are to be pseudo-inverted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0170dcbb13b99a4c6f0b6a1b83e5962e0e9cd9d9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;a&lt;/code&gt;&lt;/b&gt;: &lt;a href=&quot;../../tensor&quot;&gt;&lt;code&gt;tf.Tensor&lt;/code&gt;&lt;/a&gt; of type &lt;code&gt;float16&lt;/code&gt;, &lt;code&gt;float32&lt;/code&gt;, &lt;code&gt;float64&lt;/code&gt;, &lt;code&gt;int32&lt;/code&gt;, &lt;code&gt;complex64&lt;/code&gt;, &lt;code&gt;complex128&lt;/code&gt; and rank &amp;gt; 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="940a49e001605c114cf7ba035cd11f391a4bb67a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;a&lt;/code&gt;&lt;/b&gt;: &lt;a href=&quot;../tensor&quot;&gt;&lt;code&gt;tf.Tensor&lt;/code&gt;&lt;/a&gt; of type &lt;code&gt;float16&lt;/code&gt;, &lt;code&gt;float32&lt;/code&gt;, &lt;code&gt;float64&lt;/code&gt;, &lt;code&gt;int32&lt;/code&gt;, &lt;code&gt;complex64&lt;/code&gt;, &lt;code&gt;complex128&lt;/code&gt; and rank &amp;gt; 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d93f62328d06a2ae552db02be73050fdbf8f8762" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;a&lt;/code&gt;&lt;/b&gt;: &lt;a href=&quot;tensor&quot;&gt;&lt;code&gt;tf.Tensor&lt;/code&gt;&lt;/a&gt; of type &lt;code&gt;float16&lt;/code&gt;, &lt;code&gt;float32&lt;/code&gt;, &lt;code&gt;float64&lt;/code&gt;, &lt;code&gt;int32&lt;/code&gt;, &lt;code&gt;complex64&lt;/code&gt;, &lt;code&gt;complex128&lt;/code&gt; and rank &amp;gt; 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd05e22955b06ce72ff7ffca7bf332d95acd1d70" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;a&lt;/code&gt;&lt;/b&gt;: &lt;code&gt;SparseTensor&lt;/code&gt;, with indices sorted in row-major order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f551ec4e4453ddbef2e1c23318ac76ff261f6dc3" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;a&lt;/code&gt;&lt;/b&gt;: &lt;code&gt;Tensor&lt;/code&gt; of type &lt;code&gt;float16&lt;/code&gt;, &lt;code&gt;float32&lt;/code&gt;, &lt;code&gt;float64&lt;/code&gt;, &lt;code&gt;int32&lt;/code&gt;, &lt;code&gt;complex64&lt;/code&gt;, &lt;code&gt;complex128&lt;/code&gt; and rank &amp;gt; 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d3d6046500a3281edf0d125042c414da96e2909" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;a&lt;/code&gt;&lt;/b&gt;: &lt;code&gt;Tensor&lt;/code&gt; of type &lt;code&gt;float32&lt;/code&gt; or &lt;code&gt;float64&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fed6ab167d6efb39d1335cf7120b0f94c963d789" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;a&lt;/code&gt;&lt;/b&gt;: &lt;code&gt;Tensor&lt;/code&gt; or &lt;code&gt;SparseTensor&lt;/code&gt; of the same type as &lt;code&gt;b&lt;/code&gt;. If sparse, indices must be sorted in row-major order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5e9c85f0127c5c6045b25e039789ca45345d487" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;a&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt; with &lt;code&gt;rank &amp;gt;= 2&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2eaccaa339544ff35ae27cd3b6881fee5a7afecd" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;a&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbc37d558f674db741525f7ad386a315923b52d9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;a&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt;. Must be one of the following types: &lt;code&gt;float32&lt;/code&gt;, &lt;code&gt;bfloat16&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="708754421ebc95152c602a96822cc7ca815ac1bb" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;a&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt;. Must be one of the following types: &lt;code&gt;float32&lt;/code&gt;, &lt;code&gt;float64&lt;/code&gt;, &lt;code&gt;int32&lt;/code&gt;, &lt;code&gt;uint8&lt;/code&gt;, &lt;code&gt;int16&lt;/code&gt;, &lt;code&gt;int8&lt;/code&gt;, &lt;code&gt;int64&lt;/code&gt;, &lt;code&gt;bfloat16&lt;/code&gt;, &lt;code&gt;uint16&lt;/code&gt;, &lt;code&gt;half&lt;/code&gt;, &lt;code&gt;uint32&lt;/code&gt;, &lt;code&gt;uint64&lt;/code&gt;. A tensor containing 3-element vectors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e753e69ee9c8ef68cadd61504e1f300c0ef0d70b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;a&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt;. Must be one of the following types: &lt;code&gt;float32&lt;/code&gt;, &lt;code&gt;float64&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88d6f65818654ecb1efe26e0e103be7c231698fb" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;a&lt;/code&gt;&lt;/b&gt;: A dict, the expected value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f977ee5d378f2f304c86ecababce1627084deca" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;a&lt;/code&gt;&lt;/b&gt;: An &lt;code&gt;IndexedSlices&lt;/code&gt; instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1210ed5f64b04337e47f90a6f50caa967e8656f5" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;a&lt;/code&gt;&lt;/b&gt;: First set of images.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="197f415c40cb8da51707d54fe68decb8ec14e010" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;a&lt;/code&gt;&lt;/b&gt;: Python integer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37a108ba22a116478be6700dfe210dc3d0a6d803" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;a&lt;/code&gt;&lt;/b&gt;: The expected numpy &lt;code&gt;ndarray&lt;/code&gt;, or anything that can be converted into a numpy &lt;code&gt;ndarray&lt;/code&gt; (including Tensor), or any arbitrarily nested of structure of these.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c693196e4713787dfb1306ae3e95af60c5a1e35" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;a&lt;/code&gt;&lt;/b&gt;: The first operand; &lt;code&gt;SparseTensor&lt;/code&gt; or &lt;code&gt;Tensor&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3be4f0210df14114970b85371b5765c5e6c5e5b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;a&lt;/code&gt;&lt;/b&gt;: The first structure to compare.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dbc4fc3fabf45566c38bc406bef27873d565472" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;a&lt;/code&gt;&lt;/b&gt;: The numpy &lt;code&gt;ndarray&lt;/code&gt;, or anything that can be converted into a numpy &lt;code&gt;ndarray&lt;/code&gt; (including Tensor).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36f2839affa7a9da9e47821f2338c04e8744b92e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;a&lt;/code&gt;&lt;/b&gt;: the expected numpy ndarray or anything can be converted to one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2a5c810f10f8c1d34b151a5d375161e1a7f73ba" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;a&lt;/code&gt;&lt;/b&gt;: the first value to compare.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c408aa1026ffeee7c465bc775c1e2b88d643d816" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;a_is_sparse&lt;/code&gt;&lt;/b&gt;: An optional &lt;code&gt;bool&lt;/code&gt;. Defaults to &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6749eb706281ab4ee48e0548d58e586d78a7f467" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;a_is_sparse&lt;/code&gt;&lt;/b&gt;: If &lt;code&gt;True&lt;/code&gt;, &lt;code&gt;a&lt;/code&gt; is treated as a sparse matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5fc0a30922a2efd1e63599eabb7249c543927ac" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;a_pinv&lt;/code&gt;&lt;/b&gt;: (Batch of) pseudo-inverse of input &lt;code&gt;a&lt;/code&gt;. Has same shape as &lt;code&gt;a&lt;/code&gt; except rightmost two dimensions are transposed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f358d867560341e34dfb7b92eb70b4d45a4b4a6d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;accept_options&lt;/code&gt;&lt;/b&gt;: (Optional.) If &lt;code&gt;True&lt;/code&gt;, the returned &lt;code&gt;Callable&lt;/code&gt; will be able to accept &lt;a href=&quot;runoptions&quot;&gt;&lt;code&gt;tf.compat.v1.RunOptions&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;runmetadata&quot;&gt;&lt;code&gt;tf.compat.v1.RunMetadata&lt;/code&gt;&lt;/a&gt; as optional keyword arguments &lt;code&gt;options&lt;/code&gt; and &lt;code&gt;run_metadata&lt;/code&gt;, respectively, with the same syntax and semantics as &lt;code&gt;tf.Session.run&lt;/code&gt;, which is useful for certain use cases (profiling and debugging) but will result in measurable slowdown of the &lt;code&gt;Callable&lt;/code&gt;'s performance. Default: &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5dd85c020ee1434e7edbce4ae553d0843e6db22" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;acceptable_fraction&lt;/code&gt;&lt;/b&gt;: An optional &lt;code&gt;float&lt;/code&gt;. Defaults to &lt;code&gt;1&lt;/code&gt;. The minimum required fraction of lines before a truncated input is accepted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52f2791d3b417ca0c019af00ca2e078f17ad3a24" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;account_type_regexes&lt;/code&gt;&lt;/b&gt;: A list of regexes specifying the types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cb94f31c2a6799ea54ffb88d55be2bafdaf6a3c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;accum_name&lt;/code&gt;&lt;/b&gt;: The suffix for the variable that keeps the gradient squared accumulator. If not present, defaults to name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e88f9fefbda3ae25b8d747fba4017f755856b6db" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;accumulation_fn&lt;/code&gt;&lt;/b&gt;: a function that does accumulation. If None, then &lt;a href=&quot;../math/add_n&quot;&gt;&lt;code&gt;tf.math.add_n&lt;/code&gt;&lt;/a&gt; is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2060a727df73dfb78ecdc729720327d0122db3f4" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;accumulator_ref&lt;/code&gt;&lt;/b&gt;: A handle to the conditional accumulator, created by sub- classes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="917dfa4d5cffc8284dd6278a531507042d585db7" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;accuracy&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt; representing the accuracy, the value of &lt;code&gt;total&lt;/code&gt; divided by &lt;code&gt;count&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0dcd1c353655703a3879efe7f61c14be6e5591ff" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;activation&lt;/code&gt;&lt;/b&gt;: Activation function (callable).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8eb2d3b3167b333fea1d5ee19ffa496c9321584" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;activation&lt;/code&gt;&lt;/b&gt;: Activation function (callable). Set it to None to maintain a linear activation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="447a67777639f16a6c393cdfe6cf5c67003c2ae5" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;activation&lt;/code&gt;&lt;/b&gt;: Activation function of the inner states. Default: &lt;code&gt;tanh&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87fa93d180a75ff0efee0aa0c8265308eb20f2fa" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;activation&lt;/code&gt;&lt;/b&gt;: Activation function of the inner states. Default: &lt;code&gt;tanh&lt;/code&gt;. It could also be string that is within Keras activation function names.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9ffaf131ed8ff9b89ce533118ca6f5d595ed908" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;activation&lt;/code&gt;&lt;/b&gt;: Activation function to use. By default hyperbolic tangent activation function is applied (&lt;code&gt;tanh(x)&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73d213550916cef41036fc399cb521719abf21b1" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;activation&lt;/code&gt;&lt;/b&gt;: Activation function to use. Default: hyperbolic tangent (&lt;code&gt;tanh&lt;/code&gt;). If you pass &lt;code&gt;None&lt;/code&gt;, no activation is applied (ie. &quot;linear&quot; activation: &lt;code&gt;a(x) = x&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94c7c342e10e4000f648e52d56e2b917fa24791d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;activation&lt;/code&gt;&lt;/b&gt;: Activation function to use. Default: hyperbolic tangent (&lt;code&gt;tanh&lt;/code&gt;). If you pass None, no activation is applied (ie. &quot;linear&quot; activation: &lt;code&gt;a(x) = x&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65a7ecec3ec5ff3df122edc017fcf958567c5179" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;activation&lt;/code&gt;&lt;/b&gt;: Activation function to use. If you don't specify anything, no activation is applied (ie. &quot;linear&quot; activation: &lt;code&gt;a(x) = x&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e390f4b3525e7050f139a14f591dcdbec298874" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;activation&lt;/code&gt;&lt;/b&gt;: Activation function to use. If you don't specify anything, no activation is applied (ie. 'linear' activation: &lt;code&gt;a(x) = x&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="687a65626259008626d393a7e7b1e290bff119eb" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;activation&lt;/code&gt;&lt;/b&gt;: Activation function to use. If you don't specify anything, no activation is applied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a15855c3d247d387772302f664db374ab42f09bd" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;activation&lt;/code&gt;&lt;/b&gt;: Activation function, such as &lt;a href=&quot;../../nn/relu&quot;&gt;&lt;code&gt;tf.nn.relu&lt;/code&gt;&lt;/a&gt;, or string name of built-in activation function, such as &quot;relu&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dde53203d48f085e25044735d1be46e777ada05" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;activation&lt;/code&gt;&lt;/b&gt;: Activation function. Set it to &lt;code&gt;None&lt;/code&gt; to maintain a linear activation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0c3a166ba530c8a274a149dcc03af3bdbfa05cc" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;activation&lt;/code&gt;&lt;/b&gt;: Activation function. Set it to None to maintain a linear activation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="917afe8c9ae532a4a492075bd1400d31698bded3" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;activation&lt;/code&gt;&lt;/b&gt;: Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a825dce6bfddfd3dc3efe73820e6b892e9feb250" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;activation&lt;/code&gt;&lt;/b&gt;: Nonlinearity to use. Default: &lt;code&gt;tanh&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b9c8223ab417f7f66f21e1848e4b8a27d05d7bb" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;activation&lt;/code&gt;&lt;/b&gt;: Nonlinearity to use. Default: &lt;code&gt;tanh&lt;/code&gt;. It could also be string that is within Keras activation function names.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f63fe89e08d1fd7022d2d76513fa4d068d94ac9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;activation_fn&lt;/code&gt;&lt;/b&gt;: Activation function applied to each layer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54918611dec6ade224f648cae422b0a829e35859" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;activation_fn&lt;/code&gt;&lt;/b&gt;: Activation function applied to each layer. If &lt;code&gt;None&lt;/code&gt;, will use &lt;a href=&quot;../nn/relu&quot;&gt;&lt;code&gt;tf.nn.relu&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32d95ebe273f56f0320d6f4e77644cc87276e872" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;activations&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt; of type &lt;code&gt;out_type&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee8118b3269b43cf4426d8dfbe789aeb35df3208" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;activity_regularizer&lt;/code&gt;&lt;/b&gt;: Optional regularizer function for the output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bedc156c9ad49e0654d5431c71704065a656bc4" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;activity_regularizer&lt;/code&gt;&lt;/b&gt;: Regularizer function applied to the output of the layer (its &quot;activation&quot;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdb27f60da3502b3f336c7fa2ba0b6d5b2bca9e9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;activity_regularizer&lt;/code&gt;&lt;/b&gt;: Regularizer function applied to the output of the layer (its &quot;activation&quot;). Default: &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc5fbec90ac4fde25188476af17f608402d84cf5" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;activity_regularizer&lt;/code&gt;&lt;/b&gt;: Regularizer function applied to the output of the layer (its &quot;activation&quot;)..</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="580c5409a7378c2a10909af6e77b6bf3a0f04225" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;activity_regularizer&lt;/code&gt;&lt;/b&gt;: Regularizer function applied to the output of the layer (its 'activation').</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c61083a0f6fe09e6c5f1bd2dd4f4325a520164c3" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;activity_regularizer&lt;/code&gt;&lt;/b&gt;: Regularizer function applied to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f8ee6cabf72e540780423be49c773bcf8ba6546" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;activity_regularizer&lt;/code&gt;&lt;/b&gt;: Regularizer function for the output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a083538f1fe336ea2a00c79afd6dbb155b95877" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;activity_regularizer&lt;/code&gt;&lt;/b&gt;: Regularizer instance for the output (callable)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7559aa4bf80b755b90be3a6adf0ae94c38e0afe1" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;actual&lt;/code&gt;&lt;/b&gt;: The &lt;code&gt;GraphDef&lt;/code&gt; we have.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92669b3bf06f20516e6ec2a9d36e5ba090445e8f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;actual&lt;/code&gt;&lt;/b&gt;: str</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6d1abeccba156ab00069b566f61f78ced08982d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;actual_seq&lt;/code&gt;&lt;/b&gt;: The sequence that we are testing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9e57a88a83c16352a4f1d7cae7b3e0cda5c4e12" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;actual_str&lt;/code&gt;&lt;/b&gt;: The string we try to match with the items in regexes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f43445d607e255e7093528b87c37b127e91660e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;adaptative&lt;/code&gt;&lt;/b&gt;: An optional &lt;code&gt;bool&lt;/code&gt;. Defaults to &lt;code&gt;True&lt;/code&gt;. Whether to use Adaptive SDCA for the inner loop.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45dd877ffed6bdf050f78656f7556adf52636e08" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;adaptive&lt;/code&gt;&lt;/b&gt;: A boolean indicating whether to use adaptive sampling.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="592455711d935d3849ad3b726c9e447af19ac0f2" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;add_regularization_losses&lt;/code&gt;&lt;/b&gt;: A boolean indicating whether or not to use the regularization losses in the sum.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa2efc82f2b7d9599b7a66bcc1e9cd122288b925" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;add_shapes&lt;/code&gt;&lt;/b&gt;: If true, adds an &quot;_output_shapes&quot; list attr to each node with the inferred shapes of each of its outputs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5947bcd98e6d360900c37606927f1f42d5b9cfca" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;add_trace&lt;/code&gt;&lt;/b&gt;: Whether to add python code trace information. Used to support &quot;code&quot; view.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4744c12b7a731f0cb0261d8073b52819f16f0b3b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;adjoint&lt;/code&gt;&lt;/b&gt;: An optional &lt;code&gt;bool&lt;/code&gt;. Defaults to &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b10a930acbf668a62d1e4e18b8ac5f86ded67e45" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;adjoint&lt;/code&gt;&lt;/b&gt;: An optional &lt;code&gt;bool&lt;/code&gt;. Defaults to &lt;code&gt;False&lt;/code&gt;. Boolean indicating whether to solve with &lt;code&gt;matrix&lt;/code&gt; or its (block-wise) adjoint.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d2e8bf6e5d5d8e1022492b869e761fb6791028f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;adjoint&lt;/code&gt;&lt;/b&gt;: Python &lt;code&gt;bool&lt;/code&gt;. If &lt;code&gt;True&lt;/code&gt;, left multiply by the adjoint: &lt;code&gt;A^H x&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6276184239e0d9ae70271012c104d42b5257dd7" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;adjoint&lt;/code&gt;&lt;/b&gt;: Python &lt;code&gt;bool&lt;/code&gt;. If &lt;code&gt;True&lt;/code&gt;, solve the system involving the adjoint of this &lt;code&gt;LinearOperator&lt;/code&gt;: &lt;code&gt;A^H X = rhs&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5805b9b62c8186c5ba957adb8344e9e9cc2687c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;adjoint_a&lt;/code&gt;&lt;/b&gt;: If &lt;code&gt;True&lt;/code&gt;, &lt;code&gt;a&lt;/code&gt; is conjugated and transposed before multiplication.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6aaccb5b83e73c9866ba8cb7c3029e0e343e1b63" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;adjoint_a&lt;/code&gt;&lt;/b&gt;: Use the adjoint of A in the matrix multiply. If A is complex, this is transpose(conj(A)). Otherwise it's transpose(A).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a14862a26488de354db7a6a38cd06bf1c445944" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;adjoint_arg&lt;/code&gt;&lt;/b&gt;: Python &lt;code&gt;bool&lt;/code&gt;. If &lt;code&gt;True&lt;/code&gt;, compute &lt;code&gt;A x^H&lt;/code&gt; where &lt;code&gt;x^H&lt;/code&gt; is the hermitian transpose (transposition and complex conjugation).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55b487ce3014611d9042a1c50be7b02ab6fd8624" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;adjoint_arg&lt;/code&gt;&lt;/b&gt;: Python &lt;code&gt;bool&lt;/code&gt;. If &lt;code&gt;True&lt;/code&gt;, solve &lt;code&gt;A X = rhs^H&lt;/code&gt; where &lt;code&gt;rhs^H&lt;/code&gt; is the hermitian transpose (transposition and complex conjugation).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9933b6f6f5e66fd0e50549a4d49a49e28909a761" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;adjoint_b&lt;/code&gt;&lt;/b&gt;: If &lt;code&gt;True&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt; is conjugated and transposed before multiplication.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f2a7cf8af064a4488708ddfc6d90ad8a3e9df9e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;adjoint_b&lt;/code&gt;&lt;/b&gt;: Use the adjoint of B in the matrix multiply. If B is complex, this is transpose(conj(B)). Otherwise it's transpose(B).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c5787c68b99b5813ad4eea354f7461b8e24de79" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;adjustment&lt;/code&gt;&lt;/b&gt;: A function taking the &lt;code&gt;Tensor&lt;/code&gt; containing the (dynamic) shape of the input tensor and returning a pair (scale, bias) to apply to the normalized values (before gamma and beta), only during training. For example, if axis==-1, &lt;code&gt;adjustment = lambda shape: ( tf.random.uniform(shape[-1:], 0.93, 1.07), tf.random.uniform(shape[-1:], -0.1, 0.1))&lt;/code&gt; will scale the normalized value by up to 7% up or down, then shift the result by up to 0.1 (with independent scaling and bias for each feature but shared across all examples), and finally apply gamma and/or beta. If &lt;code&gt;None&lt;/code&gt;, no adjustment is applied. Cannot be specified if virtual_batch_size is specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cdf0a7e24cb49e9d39cb67a2c3ab6841df5b780" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;aggregate&lt;/code&gt;&lt;/b&gt;: Strategy to aggregate. Acceptable values are OpHint.AGGREGATE_FIRST, OpHint.AGGREGATE_LAST, and OpHint.AGGREGATE_STACK. Note, aggregate is only valid if tag is specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e190c76946eae059ff88c78094f2a7fd20785b74" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;aggregation&lt;/code&gt;&lt;/b&gt;: Indicates how a distributed variable will be aggregated. Accepted values are constants defined in the class &lt;a href=&quot;../../variableaggregation&quot;&gt;&lt;code&gt;tf.VariableAggregation&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0054286e04b87f6669b976878a41132cf8bb6cc7" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;aggregation&lt;/code&gt;&lt;/b&gt;: Indicates how a distributed variable will be aggregated. Accepted values are constants defined in the class &lt;a href=&quot;variableaggregation&quot;&gt;&lt;code&gt;tf.VariableAggregation&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93c4671a955abdcf3db90aa09efff80007fc6a67" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;aggregation&lt;/code&gt;&lt;/b&gt;: Sample-wise metric reduction function. If &lt;code&gt;aggregation=None&lt;/code&gt;, it indicates that the metric tensor provided has been aggregated already. eg, &lt;code&gt;bin_acc = BinaryAccuracy(name='acc')&lt;/code&gt; followed by &lt;code&gt;model.add_metric(bin_acc(y_true, y_pred))&lt;/code&gt;. If aggregation='mean', the given metric tensor will be sample-wise reduced using &lt;code&gt;mean&lt;/code&gt; function. eg, &lt;code&gt;model.add_metric(tf.reduce_sum(outputs), name='output_mean', aggregation='mean')&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bedcfc7b1e5021eff75998c897624b1383f6c37" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;aggregation_method&lt;/code&gt;&lt;/b&gt;: See &lt;code&gt;gradients()&lt;/code&gt; documentation for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f572d89bc1acfa93ef1557b4032dd069bfa3e3a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;aggregation_method&lt;/code&gt;&lt;/b&gt;: Specifies the method used to combine gradient terms. Accepted values are constants defined in the class &lt;code&gt;AggregationMethod&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc6f27835cee05f736d5d6d62d18048ff9f5f339" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;aggregation_method&lt;/code&gt;&lt;/b&gt;: Specifies the method used to combine gradient terms. Valid values are defined in the class &lt;code&gt;AggregationMethod&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b13eee9b8b7cad471b97863922e480310e45744f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;alg&lt;/code&gt;&lt;/b&gt;: (optional) the RNG algorithm. If None, it will be auto-selected. See &lt;code&gt;__init__&lt;/code&gt; for its possible values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e3ced9f31d80f0f6a8b7e4192daa8934917d7fe" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;alg&lt;/code&gt;&lt;/b&gt;: the RNG algorithm.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6b20fb82e925bb72212ff81b1df771b83f4bc55" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;alg&lt;/code&gt;&lt;/b&gt;: the RNG algorithm. If None, it will be auto-selected. See &lt;code&gt;__init__&lt;/code&gt; for its possible values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43cc6a3a3796f963aed8cc0eba0ba2e78cd400d8" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;alg&lt;/code&gt;&lt;/b&gt;: the RNG algorithm. Possible values are &lt;code&gt;RNG_ALG_PHILOX&lt;/code&gt; for the Philox algorithm and &lt;code&gt;RNG_ALG_THREEFRY&lt;/code&gt; for the ThreeFry algorithm (see paper 'Parallel Random Numbers: As Easy as 1, 2, 3' [https://www.thesalmons.org/john/random123/papers/random123sc11.pdf]). Note &lt;code&gt;RNG_ALG_PHILOX&lt;/code&gt; guarantees the same numbers are produced (given the same random state) across all architextures (CPU, GPU, XLA etc).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d9cd824444ad97a90295ecd6fb6c12886cd8491" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;algorithm&lt;/code&gt;&lt;/b&gt;: an integer representing the RNG algorithm.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a64a7b072bf3bddf35eb8c04f72ee829ed13021" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;align_corners&lt;/code&gt;&lt;/b&gt;: An optional &lt;code&gt;bool&lt;/code&gt;. Defaults to &lt;code&gt;False&lt;/code&gt;. If true, the centers of the 4 corner pixels of the input and output tensors are aligned, preserving the values at the corner pixels. Defaults to false.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="336648f7edbd7cdd98bde441e9a169f7cad8560a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;align_corners&lt;/code&gt;&lt;/b&gt;: bool. If True, the centers of the 4 corner pixels of the input and output tensors are aligned, preserving the values at the corner pixels. Defaults to &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="558a1b8673c01998841ae8f378468820a15b16d2" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;all_model_checkpoint_paths&lt;/code&gt;&lt;/b&gt;: List of strings. Paths to all not-yet-deleted checkpoints, sorted from oldest to newest. If this is a non-empty list, the last element must be equal to model_checkpoint_path. These paths are also saved in the CheckpointState proto.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="678cfeccee8d9d8c27a5640ce54ca697e829f958" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;all_model_checkpoint_timestamps&lt;/code&gt;&lt;/b&gt;: A list of floats, indicating the number of seconds since the Epoch when each checkpoint was generated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18455fa1b6cc9de59cb36c734221e5a8fb81723a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;all_model_checkpoint_timestamps&lt;/code&gt;&lt;/b&gt;: Optional list of timestamps (floats, seconds since the Epoch) indicating when the checkpoints in &lt;code&gt;all_model_checkpoint_paths&lt;/code&gt; were created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdd152e08a62d7a1ffab4f1e9f4898645dc94371" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;allow_broadcast&lt;/code&gt;&lt;/b&gt;: Boolean that enables allowing scalars and 1 length vector broadcasting. Cannot be true when verify_shape is true.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5c7e0bd09bba1c509e78e850ba053b3f7b4a90d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;allow_custom_ops&lt;/code&gt;&lt;/b&gt;: Boolean indicating whether to allow custom operations. When false any unknown operation is an error. When true, custom ops are created for any op that is unknown. The developer will need to provide these to the TensorFlow Lite runtime with a custom resolver. (default False)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50a7ae0d31c130ecfa41b43b83c3b0bf27c8c4c0" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;allow_empty&lt;/code&gt;&lt;/b&gt;: If &lt;code&gt;False&lt;/code&gt; (default) raise an error if there are no variables in the graph. Otherwise, construct the saver anyway and make it a no-op.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4439ade05d1daa68e5baaaafe549211e6a0ca54" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;allow_missing&lt;/code&gt;&lt;/b&gt;: Whether to allow this feature to be missing from a feature list item. Is available only for parsing &lt;code&gt;SequenceExample&lt;/code&gt; not for parsing &lt;code&gt;Examples&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23c0fab3d4fc35500b4615e3868cc5ee1db37743" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;allow_nan_stats&lt;/code&gt;&lt;/b&gt;: Python &lt;code&gt;bool&lt;/code&gt;, default &lt;code&gt;True&lt;/code&gt;. When &lt;code&gt;True&lt;/code&gt;, statistics (e.g., mean, mode, variance) use the value &quot;&lt;code&gt;NaN&lt;/code&gt;&quot; to indicate the result is undefined. When &lt;code&gt;False&lt;/code&gt;, an exception is raised if one or more of the statistic's batch members are undefined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17914ac9e9f9d200bbec1bc3d9ba8a2cd15f7012" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;allow_nan_stats&lt;/code&gt;&lt;/b&gt;: Python &lt;code&gt;bool&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9a964e5dd8c9bdb4ac7e70e679244cec5eb390e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;allow_operation&lt;/code&gt;&lt;/b&gt;: If true, &lt;code&gt;obj&lt;/code&gt; may refer to an &lt;code&gt;Operation&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e8b2d0860c1e932ec00924bf5b041eee4ad65db" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;allow_smaller_final_batch&lt;/code&gt;&lt;/b&gt;: (Optional) Boolean. If &lt;code&gt;True&lt;/code&gt;, allow the final batch to be smaller if there are insufficient items left in the queue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99521b232c3dca46881ecc26053d78acb751340a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;allow_tensor&lt;/code&gt;&lt;/b&gt;: If true, &lt;code&gt;obj&lt;/code&gt; may refer to a &lt;code&gt;Tensor&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d197026bc54cb9ab98236fded7c7beedbf833c85" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;allowed_batch_sizes&lt;/code&gt;&lt;/b&gt;: Optional list of allowed batch sizes. If left empty, does nothing. Otherwise, supplies a list of batch sizes, causing the op to pad batches up to one of those sizes. The entries must increase monotonically, and the final entry must equal max_batch_size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="640f3a168dfccbf4b1b0b3f5424cee7f8a30b52a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;alpha&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;float&lt;/code&gt; that governs the slope for values lower than the threshold.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6f31f076aad8421f1af4d08c5f37e4bda5a29c6" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;alpha&lt;/code&gt;&lt;/b&gt;: A Tensor or Python value or N-D array of type &lt;code&gt;dtype&lt;/code&gt;. &lt;code&gt;alpha&lt;/code&gt; provides the shape parameter(s) describing the gamma distribution(s) to sample. Must be broadcastable with &lt;code&gt;beta&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6aebd78d3b9e46a339c5bad2b1e4c94794e9fdf8" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;alpha&lt;/code&gt;&lt;/b&gt;: A scalar &lt;code&gt;float32&lt;/code&gt; or &lt;code&gt;float64&lt;/code&gt; Tensor or a Python number. Minimum learning rate value as a fraction of initial_learning_rate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cae766ecaf7f84c89a67743db3e339ba65c1acb9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;alpha&lt;/code&gt;&lt;/b&gt;: A scalar &lt;code&gt;float32&lt;/code&gt; or &lt;code&gt;float64&lt;/code&gt; Tensor or a Python number. Minimum learning rate value as a fraction of learning_rate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecb7e88db5a2112548b458d1ef23c1eb04c1b96c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;alpha&lt;/code&gt;&lt;/b&gt;: A scalar &lt;code&gt;float32&lt;/code&gt; or &lt;code&gt;float64&lt;/code&gt; Tensor or a Python number. Minimum learning rate value as a fraction of the initial_learning_rate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1f0f4f599b925c011d667d4f1b42ffb6bef6f1d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;alpha&lt;/code&gt;&lt;/b&gt;: A scalar &lt;code&gt;float32&lt;/code&gt; or &lt;code&gt;float64&lt;/code&gt; Tensor or a Python number. Minimum learning rate value as a fraction of the learning_rate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2eb10a73db7cab8683eccc9985a241948ff58940" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;alpha&lt;/code&gt;&lt;/b&gt;: A scalar, slope of negative section (default=&lt;code&gt;0.&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69db39b619c98d22b4d14a9792c0ce880a69b52c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;alpha&lt;/code&gt;&lt;/b&gt;: A scalar, slope of negative section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85d08dd6d5d307092343cd0590db4c3dc3a5809a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;alpha&lt;/code&gt;&lt;/b&gt;: An optional &lt;code&gt;float&lt;/code&gt;. Defaults to &lt;code&gt;1&lt;/code&gt;. A scale factor, usually positive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a65d07504c322ffeb0044ff4c6f001be776a279b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;alpha&lt;/code&gt;&lt;/b&gt;: Float &amp;gt;= 0. Negative slope coefficient.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d4b298309dd06b5a34523251f12903863e90384" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;alpha&lt;/code&gt;&lt;/b&gt;: Scale for the negative factor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e02939bf20f1e15f82806cf3b2cbffccb30090f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;alpha&lt;/code&gt;&lt;/b&gt;: See computation above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="012da31ea1aa25f1346aec4d935aecdcf1b66610" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;alpha&lt;/code&gt;&lt;/b&gt;: Slope of the activation function at x &amp;lt; 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="583a096329c8d8a793850e86988f0442ab4f8b7a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;alpha_constraint&lt;/code&gt;&lt;/b&gt;: Constraint for the weights.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a855322908b767c6af4edaeb468324aeb728b829" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;alpha_initializer&lt;/code&gt;&lt;/b&gt;: Initializer function for the weights.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76661769e8bb004ee702877839acffe7b24f3362" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;alpha_regularizer&lt;/code&gt;&lt;/b&gt;: Regularizer for the weights.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="010990d8d816473b8466fcb4b015a92b6ac61c44" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;already_sorted&lt;/code&gt;&lt;/b&gt;: A Python boolean to specify whether the values in &lt;code&gt;value_key&lt;/code&gt; are already sorted by their index position. If so skip sorting. False by default (optional).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aac069a23b079182f23e37d43bfd8f2e205db8f7" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;already_sorted&lt;/code&gt;&lt;/b&gt;: A boolean to specify whether the per-batch values in &lt;code&gt;sp_values&lt;/code&gt; are already sorted. If so skip sorting, False by default (optional).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbad92dc192b4e65614b8a4782972abb3845d57f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;alsologtostdout&lt;/code&gt;&lt;/b&gt;: bool, whether to also output log messages to &lt;code&gt;sys.stdout&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e56124e276af82d439b91e1616404521b2046f29" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;alt&lt;/code&gt;&lt;/b&gt;: What to return otherwise (tensor or callable that returns a tensor).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bdad869639f5e7e85c92c5e2826740df96db8ac" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;aminusb&lt;/code&gt;&lt;/b&gt;: Whether to subtract &lt;code&gt;b&lt;/code&gt; from &lt;code&gt;a&lt;/code&gt;, vs vice versa.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ee265d42aa5ad19f6f0f840fb6f2b740631215a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;amsgrad&lt;/code&gt;&lt;/b&gt;: boolean. Whether to apply AMSGrad variant of this algorithm from the paper &quot;On the Convergence of Adam and beyond&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8c4fcd8843777435076c442ce356a4959fa3695" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;aname&lt;/code&gt;&lt;/b&gt;: Variable name to use for the first structure in assertion messages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8fb9af6b3d5641d3c1eb78c8d8e4aff4ebcf58c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;antialias&lt;/code&gt;&lt;/b&gt;: Whether to use an anti-aliasing filter when downsampling an image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6738bf32745c1dc547d90660077f1cae2e8d027d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;antialias&lt;/code&gt;&lt;/b&gt;: Whether to use anti-aliasing when resizing. See 'image.resize()'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c770aab9bd349e0ce0c2d1af2d98f389ba7734b9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;append&lt;/code&gt;&lt;/b&gt;: True: append if file exists (useful for continuing training). False: overwrite existing file,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9351a68d1aa1e36665ae0e7beaddd921ae739d28" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;append&lt;/code&gt;&lt;/b&gt;: Whether to overwrite or append any existing vocabulary data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29595cc39d4bd2dbfb350a4f436333ca3a70055f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;archive_format&lt;/code&gt;&lt;/b&gt;: Archive format to try for extracting the file. Options are 'auto', 'tar', 'zip', and None. 'tar' includes tar, tar.gz, and tar.bz files. The default 'auto' is ['tar', 'zip']. None or an empty list will return no matches found.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bd00a622ebc34b5375fd6e62c9a33297917d2b4" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;area&lt;/code&gt;&lt;/b&gt;: Anti-aliased resampling with area interpolation. 'antialias' has no effect when used with area interpolation; it always anti-aliases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9336a4ab112e4cebc75d6cce56102c837cd8c93b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;area_range&lt;/code&gt;&lt;/b&gt;: An optional list of &lt;code&gt;floats&lt;/code&gt;. Defaults to &lt;code&gt;[0.05, 1]&lt;/code&gt;. The cropped area of the image must contain a fraction of the supplied image within this range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e8417319c168d7fd72e33ffb350690e602d1574" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;arg&lt;/code&gt;&lt;/b&gt;: A TensorFlow tensor that should be considered an argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="656dff742d4d52aca79962296946924be13d37fb" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;arg_types&lt;/code&gt;&lt;/b&gt;: Deprecated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22bcec19971556fe35f0adde725d3c37b246e8e2" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;arg_values&lt;/code&gt;&lt;/b&gt;: Deprecated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db3849ef7a78144c6f2919b25c1b2324a0d772e5" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;argmax&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt; of type &lt;code&gt;Targmax&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0d46c93fb9aaa42f8e29317c6ac20ed3a7f6436" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;argmax&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt; of type &lt;code&gt;output_dtype&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55dba52181c89690543ec8fe4c2d42f0630a8ad0" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;args&lt;/code&gt;&lt;/b&gt;: (Optional) Positional arguments to &lt;code&gt;fn&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85101eca5c21c46bea6cdd36f56f9637b0cb9970" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;args&lt;/code&gt;&lt;/b&gt;: (Optional.) A tuple of &lt;a href=&quot;../../../../tensor&quot;&gt;&lt;code&gt;tf.Tensor&lt;/code&gt;&lt;/a&gt; objects that will be evaluated and passed to &lt;code&gt;generator&lt;/code&gt; as NumPy-array arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5052f84a3c4b3e59b38a8630a7925b60016d0f65" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;args&lt;/code&gt;&lt;/b&gt;: (Optional.) A tuple of &lt;a href=&quot;../../../tensor&quot;&gt;&lt;code&gt;tf.Tensor&lt;/code&gt;&lt;/a&gt; objects that will be evaluated and passed to &lt;code&gt;generator&lt;/code&gt; as NumPy-array arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce7ccda8768d7eab4e689e56812c0ca3fff72ed6" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;args&lt;/code&gt;&lt;/b&gt;: (Optional.) A tuple of &lt;a href=&quot;../../tensor&quot;&gt;&lt;code&gt;tf.Tensor&lt;/code&gt;&lt;/a&gt; objects that will be evaluated and passed to &lt;code&gt;generator&lt;/code&gt; as NumPy-array arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bf5156e6fbc27fb5f0847c058480af3cdf7d214" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;args&lt;/code&gt;&lt;/b&gt;: (Optional.) A tuple of &lt;a href=&quot;../tensor&quot;&gt;&lt;code&gt;tf.Tensor&lt;/code&gt;&lt;/a&gt; objects that will be evaluated and passed to &lt;code&gt;generator&lt;/code&gt; as NumPy-array arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c17a83d9bfc29628ec2082803370cb977a117e5" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;args&lt;/code&gt;&lt;/b&gt;: Function to be called and extra positional args.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de650e2a4513fd6695872b93cd5fc499e00b0719" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;args&lt;/code&gt;&lt;/b&gt;: List or tuple with positional per-thread arguments for &lt;code&gt;merge_fn&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67d6f12fa029493779820e23d768949756d3331e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;args&lt;/code&gt;&lt;/b&gt;: Optional arguments to pass to &lt;code&gt;target&lt;/code&gt; when calling it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c44227194a6e481491e996cd57202ac7bd8d29b6" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;args&lt;/code&gt;&lt;/b&gt;: Optional positional arguments passed to &lt;code&gt;train_step_fn&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="961f19bcf163aa9f55eb3c78b34c60a299f5be48" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;args&lt;/code&gt;&lt;/b&gt;: The argument tuple for the target invocation. Defaults to ().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7185b35caf0826dfbb8eefe55399ee89250acaff" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;args&lt;/code&gt;&lt;/b&gt;: Tuple or list with positional arguments for &lt;code&gt;fn&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58ca01733b3d6abc5c09d0ea5db844c60a378014" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;args&lt;/code&gt;&lt;/b&gt;: Tuple or list. Additional positional arguments to pass to &lt;code&gt;fn()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f36833bf7beca6865fe8036f9721a6363c1087ed" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;args&lt;/code&gt;&lt;/b&gt;: Tuple or list. Positional arguments to pass to &lt;code&gt;fn()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3e6f87eacf9c36ecf5f7d1f597c68ece537e093" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;argument&lt;/code&gt;&lt;/b&gt;: str or Enum class member, the supplied flag value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01208b458ea0c10374bede478692b1041a3a26d8" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;argument&lt;/code&gt;&lt;/b&gt;: str or the correct flag value type, argument to be parsed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f83a3779ce0c833ca59c0f80d404fe4e8cb0dba9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;argument&lt;/code&gt;&lt;/b&gt;: str, the supplied flag value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ab8ffbe4cdefb4ed3cb16d061ad37c2c4caa47c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;argument&lt;/code&gt;&lt;/b&gt;: string argument passed in the commandline.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f8f13b33f8f43e51187bbe007b31d57c1e97e26" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;arguments&lt;/code&gt;&lt;/b&gt;: Optional dictionary of keyword arguments to be passed to the function. Input shape: Arbitrary. Use the keyword argument input_shape (tuple of integers, does not include the samples axis) when using this layer as the first layer in a model. Output shape: Specified by &lt;code&gt;output_shape&lt;/code&gt; argument</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e89c746fcde9516d8c7c01830bff06d56eab4cd0" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;arguments&lt;/code&gt;&lt;/b&gt;: a single argument or a list of arguments (typically a list of default values); a single argument is converted internally into a list containing one item.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff251f5c253d950f80c0dba31f34959d1c3df6dd" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;argv&lt;/code&gt;&lt;/b&gt;: [str], a list of strings, usually sys.argv[1:], which may contain one or more flagfile directives of the form --flagfile=&quot;./filename&quot;. Note that the name of the program (sys.argv[0]) should be omitted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ad19f7b3f663e177486930a5257ca1f295bf024" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;argv&lt;/code&gt;&lt;/b&gt;: a tuple/list of strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6113e4b394b58b79f5f524841c9897e46acd9b49" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;arr&lt;/code&gt;&lt;/b&gt;: An int32 tensor of non-negative values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61911826bc1111850af970bc9250f1b132d59d7c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;as_text&lt;/code&gt;&lt;/b&gt;: If &lt;code&gt;True&lt;/code&gt;, writes the &lt;code&gt;MetaGraphDef&lt;/code&gt; as an ASCII proto.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f454833bda3f253c88107081893606997e7be1dc" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;as_text&lt;/code&gt;&lt;/b&gt;: If &lt;code&gt;True&lt;/code&gt;, writes the graph as an ASCII proto.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff520d097c8595e1378b38e9cdc46167c63fc425" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;as_text&lt;/code&gt;&lt;/b&gt;: If &lt;code&gt;True&lt;/code&gt;, writes the meta_graph as an ASCII proto.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e96434ee6c55f6cbbde2851a1778afd1b1ba9871" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;as_text&lt;/code&gt;&lt;/b&gt;: Writes the SavedModel protocol buffer in text format to disk. Protocol buffers in text format are useful for debugging, but parsing fails when it encounters an unknown field and so is not forward compatible. This means changes to TensorFlow may prevent deployment of new text format SavedModels to existing serving binaries. Do not deploy &lt;code&gt;as_text&lt;/code&gt; SavedModels to production.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27ad9dca4c3e82318e232731ff4e9c41c9b40f55" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;as_text&lt;/code&gt;&lt;/b&gt;: bool, &lt;code&gt;False&lt;/code&gt; by default. Whether to write the &lt;code&gt;SavedModel&lt;/code&gt; proto in text format. Currently unavailable in serving-only mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d2bcb28fdeba326ea76ebab7dd8f97d6be9cd10" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;as_text&lt;/code&gt;&lt;/b&gt;: whether to write the &lt;code&gt;SavedModel&lt;/code&gt; proto in text format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dd593e64eedc33e84960729707f0d60a1eefb22" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;as_text&lt;/code&gt;&lt;/b&gt;: whether to write the SavedModel proto in text format. Defaults to &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="010769adc408319e23bd9f11899d98ddb302def4" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;aspect_ratio_range&lt;/code&gt;&lt;/b&gt;: An optional list of &lt;code&gt;floats&lt;/code&gt;. Defaults to &lt;code&gt;[0.75, 1.33]&lt;/code&gt;. The cropped area of the image must have an aspect &lt;code&gt;ratio = width / height&lt;/code&gt; within this range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ab01ace399c9264030baef7eb84e0bdbf0e9d3c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;aspect_ratio_range&lt;/code&gt;&lt;/b&gt;: An optional list of &lt;code&gt;floats&lt;/code&gt;. Defaults to &lt;code&gt;[0.75, 1.33]&lt;/code&gt;. The cropped area of the image must have an aspect ratio = width / height within this range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a241aa02abe3e1098cbf05d640bebade243dc9d8" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;assert_op&lt;/code&gt;&lt;/b&gt;: An &lt;code&gt;Operation&lt;/code&gt; that, when executed, raises a &lt;a href=&quot;../errors/invalidargumenterror&quot;&gt;&lt;code&gt;tf.errors.InvalidArgumentError&lt;/code&gt;&lt;/a&gt; if &lt;code&gt;condition&lt;/code&gt; is not true.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae9dee685fbc7a5bcb376caa64c2102b3da5c35b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;assert_proper_shapes&lt;/code&gt;&lt;/b&gt;: Python &lt;code&gt;bool&lt;/code&gt;. If &lt;code&gt;False&lt;/code&gt;, only perform static checks that initialization and method arguments have proper shape. If &lt;code&gt;True&lt;/code&gt;, and static checks are inconclusive, add asserts to the graph.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8342f2e6633948098ef0bb02624623f8b85cdf29" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;asset_path&lt;/code&gt;&lt;/b&gt;: A 0-D &lt;a href=&quot;../../tf#string&quot;&gt;&lt;code&gt;tf.string&lt;/code&gt;&lt;/a&gt; tensor with path to the asset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f92c98bea52431208a44d1d993befad6e2f8c950" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;assets_collection&lt;/code&gt;&lt;/b&gt;: Assets to be saved with SavedModel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ca231f2154b442be5788784d4ceea30bce3fe01" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;assets_collection&lt;/code&gt;&lt;/b&gt;: Assets to be saved with SavedModel. Note that this list should be a subset of the assets saved as part of the first meta graph in the SavedModel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b96115f5f69d0d7fc4e52b951f8186b2e9679aeb" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;assets_extra&lt;/code&gt;&lt;/b&gt;: A dict specifying how to populate the assets.extra directory within the exported &lt;code&gt;SavedModel&lt;/code&gt;, or &lt;code&gt;None&lt;/code&gt; if no extra assets are needed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="772835e52822f0ceabdee4c03a299454de3f25fd" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;assets_extra&lt;/code&gt;&lt;/b&gt;: An optional dict specifying how to populate the assets.extra directory within the exported SavedModel. Each key should give the destination path (including the filename) relative to the assets.extra directory. The corresponding value gives the full path of the source file to be copied. For example, the simple case of copying a single file without renaming it is specified as &lt;code&gt;{'my_asset_file.txt': '/path/to/my_asset_file.txt'}&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d3b79b3d5606aa71449f4da8d48724f568dffff" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;assignment_map&lt;/code&gt;&lt;/b&gt;: Dict, where keys are names of the variables in the checkpoint and values are current variables or names of current variables (in default graph).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcff23a97eeb91217e810f66ea4dd29540518182" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;at_end&lt;/code&gt;&lt;/b&gt;: &lt;code&gt;bool&lt;/code&gt; specifying whether to print the values of &lt;code&gt;tensors&lt;/code&gt; at the end of the run.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2353a01ec5c422d71944daf07c3c4ea5d6f7ab57" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;atol&lt;/code&gt;&lt;/b&gt;: &lt;code&gt;Tensor&lt;/code&gt;. Same &lt;code&gt;dtype&lt;/code&gt; as, and broadcastable to, &lt;code&gt;x&lt;/code&gt;. The absolute tolerance. Default is &lt;code&gt;10 * eps&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a75b48b73fa8ca3f1017f83dedab63dec7495b81" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;atol&lt;/code&gt;&lt;/b&gt;: absolute tolerance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="386cc5e5903082c17c53e31ca1bb595d8809d9cd" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;attr_name&lt;/code&gt;&lt;/b&gt;: Name of attribute to use to store the index for this hint. i.e. FUNCTION_INPUT_INDEX or FUNCTION_OUTPUT_INDEX</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="399bc61a15008d329e0b9f256b5dbc205e3b800f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;attr_name&lt;/code&gt;&lt;/b&gt;: The name of the attribute to modify.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0372d52f535b4590e8629b2614ed66d29482046a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;attribute&lt;/code&gt;&lt;/b&gt;: An attribute the profiler node has.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff515691b9fe8e16c166c225504af780a7688269" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;attributes&lt;/code&gt;&lt;/b&gt;: A list of attribute the profiler node has.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e224c3577a1160e5c2ed7a7b6c387e2ede46e9c1" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;attrs&lt;/code&gt;&lt;/b&gt;: (Optional.) A dictionary where the key is the attribute name (a string) and the value is the respective &lt;code&gt;attr&lt;/code&gt; attribute of the &lt;code&gt;NodeDef&lt;/code&gt; proto that will represent the operation (an &lt;code&gt;AttrValue&lt;/code&gt; proto).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a97c690d4358d894bab1a889b4eace5fecc167e7" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;auc&lt;/code&gt;&lt;/b&gt;: A scalar &lt;code&gt;Tensor&lt;/code&gt; representing the current area-under-curve.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71025b30b3f111c3dc5a3d2397e418492375db3f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;audio&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt; of type &lt;code&gt;float32&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="790bf29ad2c1e534acae9a4cfa18fd4b5d03a9b9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;audio&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt; of type &lt;code&gt;float32&lt;/code&gt;. 2-D with shape &lt;code&gt;[length, channels]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6cfa2e3a88f586150c661ad3bb7a12289b0b09b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;auto_set_gpu&lt;/code&gt;&lt;/b&gt;: Set the visible CUDA devices automatically while resolving the cluster by setting CUDA_VISIBLE_DEVICES environment variable. Defaults to True.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fba17b9a7b6997f00e3c71fcf9c7d9e9d5c11af8" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;autograph&lt;/code&gt;&lt;/b&gt;: Whether autograph should be applied on &lt;code&gt;func&lt;/code&gt; before tracing a graph. Data-dependent control flow requires &lt;code&gt;autograph=True&lt;/code&gt;. For more information, see the &lt;a href=&quot;https://www.tensorflow.org/guide/function&quot;&gt;tf.function and AutoGraph guide&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="218f7e251f36d9ef97640a5af42d7c83dd6c717e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;autograph&lt;/code&gt;&lt;/b&gt;: Whether to use autograph to compile python and eager style code for efficient graph-mode execution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3a0764016dd394fbb2c5711b9797b03e847adcd" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;auxiliary_name_scope&lt;/code&gt;&lt;/b&gt;: If &lt;code&gt;True&lt;/code&gt;, we create an auxiliary name scope with the scope. If &lt;code&gt;False&lt;/code&gt;, we don't create it. Note that the argument is not inherited, and it only takes effect for once when creating. You should only use it for re-entering a premade variable scope.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2aa2c8dbfebd8bed6258038109627feb51e987ce" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;axes&lt;/code&gt;&lt;/b&gt;: 1-d tensor of int32 values; these are the axes along which to compute mean and variance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34a4256dc32eec2742ace4eb8e4010f6943ee3e3" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;axes&lt;/code&gt;&lt;/b&gt;: &lt;code&gt;int&lt;/code&gt; or shape &lt;code&gt;tuple&lt;/code&gt; Axes over which to calculate. Defaults to None, which shifts all axes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b71f16fc109f62269affb2b4cb3952bd933e4370" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;axes&lt;/code&gt;&lt;/b&gt;: &lt;code&gt;int&lt;/code&gt; or shape &lt;code&gt;tuple&lt;/code&gt;, optional Axes over which to shift. Default is None, which shifts all axes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7692f7cdcbc99abaa32cf7e1948bed14ffeb953d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;axes&lt;/code&gt;&lt;/b&gt;: A 1-D (vector) &lt;code&gt;Tensor&lt;/code&gt; of type int32 containing the dimensions to use for computing the L2-norm. If &lt;code&gt;None&lt;/code&gt; (the default), uses all dimensions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aabc0209400e9a0f420441802cb3b152d2dd4caf" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;axes&lt;/code&gt;&lt;/b&gt;: Array of ints. Axes along which to compute mean and variance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd6e6dd47425d4113d034f6580884cc8aba9b12a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;axes&lt;/code&gt;&lt;/b&gt;: Dictionary mapping integer axes to a specific dimension value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41b236da54a6c8176661ad46b68627105b008cb1" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;axes&lt;/code&gt;&lt;/b&gt;: Either a scalar &lt;code&gt;N&lt;/code&gt;, or a list or an &lt;code&gt;int32&lt;/code&gt;&lt;code&gt;Tensor&lt;/code&gt; of shape [2, k]. If axes is a scalar, sum over the last N axes of a and the first N axes of b in order. If axes is a list or &lt;code&gt;Tensor&lt;/code&gt; the first and second row contain the set of unique integers specifying axes along which the contraction is computed, for &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;, respectively. The number of axes for &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; must be equal. If &lt;code&gt;axes=0&lt;/code&gt;, computes the outer product between &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b3b6fbbf18d66718c5c93ae7aee9d514c87f686" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;axes&lt;/code&gt;&lt;/b&gt;: Integer or iterable of integers. Axes to reverse.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6c4d36a203dd4476d0c76cd1e1e3d1a2c142688" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;axes&lt;/code&gt;&lt;/b&gt;: Integer or tuple of integers, axis or axes along which to take the dot product.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2f8a7abc8809e12b82f2922e3a5768645248ad2" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;axes&lt;/code&gt;&lt;/b&gt;: Tuple or list of integers with target dimensions, or single integer. The sizes of &lt;code&gt;x.shape[axes[0]]&lt;/code&gt; and &lt;code&gt;y.shape[axes[1]]&lt;/code&gt; should be equal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61c8fa3b2bdb3245a030274193b5371c7ebd78be" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;axis&lt;/code&gt;&lt;/b&gt;: (Optional) Defaults to -1. The dimension along which the cosine similarity is computed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e36ad49e30109422da1157f4aaac5adc4aa5635e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;axis&lt;/code&gt;&lt;/b&gt;: (Optional) Defaults to -1. The dimension along which the metric is computed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="320394d07d61b6ce534720c17eeb77215d2a3f32" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;axis&lt;/code&gt;&lt;/b&gt;: 0-D (scalar). Specifies the dimension index at which to expand the shape of &lt;code&gt;input&lt;/code&gt;. Must be in the range &lt;code&gt;[-rank(input) - 1, rank(input)]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ebff53a1916b4c1e8e9e6aaf11baedd7836c4a8" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;axis&lt;/code&gt;&lt;/b&gt;: 0-D (scalar). Specifies the dimension index at which to expand the shape of &lt;code&gt;input&lt;/code&gt;. Must be in the range &lt;code&gt;[-rank(sp_input) - 1, rank(sp_input)]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01beb18cf86f4d048e1ad83e8e1c644be20dc2e9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;axis&lt;/code&gt;&lt;/b&gt;: 0-D &lt;code&gt;int32&lt;/code&gt;&lt;code&gt;Tensor&lt;/code&gt;. Dimension along which to concatenate. Must be in the range &lt;code&gt;[-rank(values), rank(values))&lt;/code&gt;. As in Python, indexing for axis is 0-based. Positive axis in the rage of &lt;code&gt;[0, rank(values))&lt;/code&gt; refers to &lt;code&gt;axis&lt;/code&gt;-th dimension. And negative axis refers to &lt;code&gt;axis + rank(values)&lt;/code&gt;-th dimension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cf599e234e22ed37819311f0e247ad004061d5e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;axis&lt;/code&gt;&lt;/b&gt;: &lt;code&gt;int&lt;/code&gt;, axis to partition on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94c5e6349560842b5d4e416c8579a75d41339f9b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;axis&lt;/code&gt;&lt;/b&gt;: A 0-D &lt;code&gt;int32&lt;/code&gt;&lt;code&gt;Tensor&lt;/code&gt;. The dimension along which to split.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dc47fed034ad2a31234d733ac2ba48f863646d9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;axis&lt;/code&gt;&lt;/b&gt;: A 0-D int Tensor representing the axis in &lt;code&gt;tensor&lt;/code&gt; to mask from. By default, axis is 0 which will mask from the first dimension. Otherwise K + axis &amp;lt;= N.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d447cb2a0fd1ea4efc1cc5fbe15a38432be514f0" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;axis&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt; of type &lt;code&gt;int32&lt;/code&gt; (default: 0). Must be in the range &lt;code&gt;[-rank(x), rank(x))&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3291ddbcc40c64aade9f93806190b6dc3abbc588" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;axis&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt; of type &lt;code&gt;int32&lt;/code&gt; or &lt;code&gt;int64&lt;/code&gt; (default: 0). Must be in the range &lt;code&gt;[-rank(x), rank(x))&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71eb11f21ff893440012a558b30a5233ba0784c6" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;axis&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt;. Must be one of the following types: &lt;code&gt;int32&lt;/code&gt;, &lt;code&gt;int64&lt;/code&gt;. 1-D. The indices of the dimensions to reverse. Must be in the range &lt;code&gt;[-rank(tensor), rank(tensor))&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6ba7ba13d75e7f8389426bc761f1cff95846feb" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;axis&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt;. Must be one of the following types: &lt;code&gt;int32&lt;/code&gt;, &lt;code&gt;int64&lt;/code&gt;. Dimension must be 0-D or 1-D. &lt;code&gt;axis[i]&lt;/code&gt; specifies the dimension that the shift &lt;code&gt;shift[i]&lt;/code&gt; should occur. If the same axis is referenced more than once, the total shift for that axis will be the sum of all the shifts that belong to that axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35860baa92f9a2edfe56ffd070441cf07b156ba0" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;axis&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt;. Must be one of the following types: &lt;code&gt;int32&lt;/code&gt;, &lt;code&gt;int64&lt;/code&gt;. The &lt;code&gt;axis&lt;/code&gt; in &lt;code&gt;params&lt;/code&gt; to gather &lt;code&gt;indices&lt;/code&gt; from. Must be greater than or equal to &lt;code&gt;batch_dims&lt;/code&gt;. Defaults to the first non-batch dimension. Supports negative indexes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1808d7153415dd676a0ca4555e6091aa66fc9a1" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;axis&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt;. Must be one of the following types: &lt;code&gt;int32&lt;/code&gt;, &lt;code&gt;int64&lt;/code&gt;. int32 or int64, must be in the range &lt;code&gt;-rank(input), rank(input))&lt;/code&gt;. Describes which axis of the input Tensor to reduce across. For vectors, use axis = 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e928acc41221de16f08e92af5aaa2e67f03f8fa9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;axis&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt;. Must be one of the following types: &lt;code&gt;int32&lt;/code&gt;, &lt;code&gt;int64&lt;/code&gt;. int32 or int64, must be in the range &lt;code&gt;[-rank(input), rank(input))&lt;/code&gt;. Describes which axis of the input Tensor to reduce across. For vectors, use axis = 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cb5bd8d1380cee97036642a5d367616799b50b2" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;axis&lt;/code&gt;&lt;/b&gt;: A list of integer. Axes to compute the mean.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a847503c0ffc59d81e3fc5174b70a64682b61ce" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;axis&lt;/code&gt;&lt;/b&gt;: A python integer, indicating the dimension along which to stack. (Note: Unlike &lt;a href=&quot;../stack&quot;&gt;&lt;code&gt;tf.stack&lt;/code&gt;&lt;/a&gt;, the &lt;code&gt;axis&lt;/code&gt; parameter must be statically known.) Negative values are supported only if the rank of at least one &lt;code&gt;values&lt;/code&gt; value is statically known.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a655acb824db0f0bc47d319859c5dac4de6a152a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;axis&lt;/code&gt;&lt;/b&gt;: A scalar integer &lt;code&gt;Tensor&lt;/code&gt; indicating the axis to frame. Defaults to the last axis. Supports negative values for indexing from the end.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fd2a1f9866623fe69feec55e3fdc1dedfb5a470" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;axis&lt;/code&gt;&lt;/b&gt;: Alias for dim.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f50dc30322bcb03586659baf58bf4c5eb4f4f60c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;axis&lt;/code&gt;&lt;/b&gt;: An &lt;code&gt;int&lt;/code&gt; or list of &lt;code&gt;int&lt;/code&gt;, the axis or axes that should be normalized, typically the features axis/axes. For instance, after a &lt;code&gt;Conv2D&lt;/code&gt; layer with &lt;code&gt;data_format=&quot;channels_first&quot;&lt;/code&gt;, set &lt;code&gt;axis=1&lt;/code&gt;. If a list of axes is provided, each axis in &lt;code&gt;axis&lt;/code&gt; will be normalized simultaneously. Default is &lt;code&gt;-1&lt;/code&gt; which uses the last axis. Note: when using multi-axis batch norm, the &lt;code&gt;beta&lt;/code&gt;, &lt;code&gt;gamma&lt;/code&gt;, &lt;code&gt;moving_mean&lt;/code&gt;, and &lt;code&gt;moving_variance&lt;/code&gt; variables are the same rank as the input Tensor, with dimension size 1 in all reduced (non-axis) dimensions).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87a1427c0bc5a355a913c3d29198ddbd69a61212" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;axis&lt;/code&gt;&lt;/b&gt;: An &lt;code&gt;int&lt;/code&gt;, the axis that should be normalized (typically the features axis). For instance, after a &lt;code&gt;Convolution2D&lt;/code&gt; layer with &lt;code&gt;data_format=&quot;channels_first&quot;&lt;/code&gt;, set &lt;code&gt;axis=1&lt;/code&gt; in &lt;code&gt;BatchNormalization&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbd2eafee39c99fac579a6418268a0d24b998143" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;axis&lt;/code&gt;&lt;/b&gt;: An &lt;code&gt;int&lt;/code&gt;. The axis to stack along. Defaults to the first dimension. Negative values wrap around, so the valid range is &lt;code&gt;[-(R+1), R+1)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5494a4a74222b6749210b209235b6d4446f76a9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;axis&lt;/code&gt;&lt;/b&gt;: An &lt;code&gt;int&lt;/code&gt;. The axis to unstack along. Defaults to the first dimension. Negative values wrap around, so the valid range is &lt;code&gt;[-R, R)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbde9e520afa527ded25a43210a13f771d2f2b88" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;axis&lt;/code&gt;&lt;/b&gt;: An int. The axis along which to repeat values. By default (axis=None), use the flattened input array, and return a flat output array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efe4f9e7f7cc79a6a5bd0427e10f50be35fe82fd" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;axis&lt;/code&gt;&lt;/b&gt;: An integer constant indicating the axis whose row lengths should be returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cb5a114d431b1691dad2cea53f2e9c085f1fc43" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;axis&lt;/code&gt;&lt;/b&gt;: An integer or scalar &lt;code&gt;int32&lt;/code&gt;&lt;code&gt;Tensor&lt;/code&gt;. The dimension along which to split. Must be in the range &lt;code&gt;[-rank(value), rank(value))&lt;/code&gt;. Defaults to 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fda5c620ff9f9c2a3d681e54c22281e76b40345f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;axis&lt;/code&gt;&lt;/b&gt;: An integer scalar or vector indicating which axes to return the bounding box for. If not specified, then the full bounding box is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0493c344f939abb693633a9cb9f03f8b39d457b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;axis&lt;/code&gt;&lt;/b&gt;: An integer, the axis to compute the product.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebd3cf90dac803491725cd01ea84841861320ca5" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;axis&lt;/code&gt;&lt;/b&gt;: An integer, the axis to compute the standard deviation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="158ac1f844cc2201d32d88898ad2b5f34f2d5736" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;axis&lt;/code&gt;&lt;/b&gt;: An integer, the axis to compute the sum.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="304cbade1984d6d57bfa78b49e951654d2fbe78c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;axis&lt;/code&gt;&lt;/b&gt;: An integer, the axis to compute the variance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de6411382f1007d46464b31c9bf3ae4edbf5de47" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;axis&lt;/code&gt;&lt;/b&gt;: An integer, the axis to find maximum values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f36158d401d0d00aef27ca90494df92b9d056a9b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;axis&lt;/code&gt;&lt;/b&gt;: An integer, the axis to find minimum values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd0d0c4b6f88810352fe7e8644c227f3b06e2478" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;axis&lt;/code&gt;&lt;/b&gt;: An integer, the axis to sum over.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a0b4140936b8bd0f44f29f27d22f151f7cad18f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;axis&lt;/code&gt;&lt;/b&gt;: An optional &lt;code&gt;int&lt;/code&gt;. Defaults to &lt;code&gt;-1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="542c9170dca4cf59e638d70472af81c8caaaf045" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;axis&lt;/code&gt;&lt;/b&gt;: An optional list of &lt;code&gt;ints&lt;/code&gt;. Defaults to &lt;code&gt;[]&lt;/code&gt;. If specified, only squeezes the dimensions listed. The dimension index starts at 0. It is an error to squeeze a dimension that is not 1. Must be in the range &lt;code&gt;[-rank(input), rank(input))&lt;/code&gt;. Must be specified if &lt;code&gt;input&lt;/code&gt; is a &lt;code&gt;RaggedTensor&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74bad060564996fca3f1fbc51343b3ed6087d508" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;axis&lt;/code&gt;&lt;/b&gt;: Axis along which to concatenate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c048f5f1cdbbbf4e59d5555181a87b5a56a26d1c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;axis&lt;/code&gt;&lt;/b&gt;: Axis along which to determine similarity.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95ff8ea1e4612bd6a9a7259bff4b2d31f66b7f6e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;axis&lt;/code&gt;&lt;/b&gt;: Axis along which to partition the variable. Defaults to 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d54bffd4b3f00a3d9d2922c395ae16b1ee59494" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;axis&lt;/code&gt;&lt;/b&gt;: Axis along which to perform stacking.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1f78194bc4450d5146f9667e5d530ff384964f2" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;axis&lt;/code&gt;&lt;/b&gt;: Axis along which to repeat.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ad4fe3af7127523097bdc39f927f3a2573c6d06" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;axis&lt;/code&gt;&lt;/b&gt;: Axis to drop.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e29577b474d776514427b8e270cdc31632d725ff" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;axis&lt;/code&gt;&lt;/b&gt;: Dimension along which to normalize. A scalar or a vector of integers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c997dcdff965ef02d9a43cb663abf6d0ac2e8b9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;axis&lt;/code&gt;&lt;/b&gt;: Dimension to concatenate along. Must be in range [-rank, rank), where rank is the number of dimensions in each input &lt;code&gt;SparseTensor&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="342686ba3dbde7e3cc3bbafcd3851cb5a2472fb7" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;axis&lt;/code&gt;&lt;/b&gt;: For future expansion. The axis to compute the DCT along. Must be &lt;code&gt;-1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7d229bcbfc690e9a015da0702e8c48f91e15109" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;axis&lt;/code&gt;&lt;/b&gt;: If &lt;code&gt;axis&lt;/code&gt; is &lt;code&gt;None&lt;/code&gt; (the default), the input is considered a vector and a single vector norm is computed over the entire set of values in the tensor, i.e. &lt;code&gt;norm(tensor, ord=ord)&lt;/code&gt; is equivalent to &lt;code&gt;norm(reshape(tensor, [-1]), ord=ord)&lt;/code&gt;. If &lt;code&gt;axis&lt;/code&gt; is a Python integer, the input is considered a batch of vectors, and &lt;code&gt;axis&lt;/code&gt; determines the axis in &lt;code&gt;tensor&lt;/code&gt; over which to compute vector norms. If &lt;code&gt;axis&lt;/code&gt; is a 2-tuple of Python integers it is considered a batch of matrices and &lt;code&gt;axis&lt;/code&gt; determines the axes in &lt;code&gt;tensor&lt;/code&gt; over which to compute a matrix norm. Negative indices are supported. Example: If you are passing a tensor that can be either a matrix or a batch of matrices at runtime, pass &lt;code&gt;axis=[-2,-1]&lt;/code&gt; instead of &lt;code&gt;axis=None&lt;/code&gt; to make sure that matrix norms are computed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2485812ca346f58dd05a316f3697c06d32ee4e2" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;axis&lt;/code&gt;&lt;/b&gt;: Int specifying the channels axis. &lt;code&gt;axis=-1&lt;/code&gt; corresponds to data format &lt;code&gt;channels_last', and&lt;/code&gt;axis=1&lt;code&gt;corresponds to data format&lt;/code&gt;channels_first`.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98c1b75f7fa26d8653fb0080ae4c3d6e07268cd1" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;axis&lt;/code&gt;&lt;/b&gt;: Integer or List/Tuple. The axis that should be normalized (typically the features axis).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e0e8cbf95c0844379eb9e3d78acf356048a6d1c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;axis&lt;/code&gt;&lt;/b&gt;: Integer or tuple of integers, the axis or axes that should be normalized (typically the features axis). We will normalize each element in the specified axis. The default is '-1' (the innermost axis); 0 (the batch axis) is not allowed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a10b7b759f1a6c117f1611d69463eacd2d80c8bb" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;axis&lt;/code&gt;&lt;/b&gt;: Integer specifying the dimension index at which to expand the shape of &lt;code&gt;input&lt;/code&gt;. Given an input of D dimensions, &lt;code&gt;axis&lt;/code&gt; must be in range &lt;code&gt;[-(D+1), D]&lt;/code&gt; (inclusive).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a92ae25ad09433d3a8b05a14f7a33ff2e75be5f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;axis&lt;/code&gt;&lt;/b&gt;: Integer, axis along which the softmax normalization is applied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cacf5e35cf39445145dab9adde45d2a8d6aae06d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;axis&lt;/code&gt;&lt;/b&gt;: Integer, the axis that should be normalized (typically the features axis). For instance, after a &lt;code&gt;Conv2D&lt;/code&gt; layer with &lt;code&gt;data_format=&quot;channels_first&quot;&lt;/code&gt;, set &lt;code&gt;axis=1&lt;/code&gt; in &lt;code&gt;BatchNormalization&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d584e2e9d5e3bdd993937664229147e5ef398e36" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;axis&lt;/code&gt;&lt;/b&gt;: Integer, the axis that should be normalized. (typically the features axis).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09385c3d9b32af030dcda265d0a18283a934a1c8" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;axis&lt;/code&gt;&lt;/b&gt;: Integer. If specified, refers to a dimension of the input tensor, such that quantization will be per slice along that dimension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f9191b23d8aa14ffceaefd998c29c9ad6a86ba9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;axis&lt;/code&gt;&lt;/b&gt;: Position where to add a new axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8ad3fe326f290fbad7a60cb60f022c7390564a4" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;axis&lt;/code&gt;&lt;/b&gt;: Specifies the dimension to reduce along within each replica's tensor. Should typically be set to the batch dimension, or &lt;code&gt;None&lt;/code&gt; to only reduce across replicas (e.g. if the tensor has no batch dimension).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bc470fdf6049a611473881edd2349159954a872" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;axis&lt;/code&gt;&lt;/b&gt;: The axis along which to sort. The default is -1, which sorts the last axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87e45f28f4f876b842fa47d76d20f8e669b7edb4" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;axis&lt;/code&gt;&lt;/b&gt;: The axis that the output values are concatenated along. Default is -1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a354b65e2fae8a26ee63d54b4dc4b0b5a43f6ce3" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;axis&lt;/code&gt;&lt;/b&gt;: The axis to fill (default: -1, a new inner-most axis).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bebeb80a3a0a96782c255a1e4a45fbe3f3851f63" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;axis&lt;/code&gt;&lt;/b&gt;: The axis to partition along. Default: outermost axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1b3d43724dc1e7a441929f9a94ccadf062a7560" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;axis&lt;/code&gt;&lt;/b&gt;: The class dimension. Defaulted to -1 which is the last dimension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce82026224616ce60137494c01278601124416a5" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;axis&lt;/code&gt;&lt;/b&gt;: The dimension along which the cosine distance is computed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50c01f235481e34394fec86ff8123e2c9310f457" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;axis&lt;/code&gt;&lt;/b&gt;: The dimension softmax would be performed on. The default is -1 which indicates the last dimension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bcf0087553950a96017f26018db6ee89e5f4bfb" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;axis&lt;/code&gt;&lt;/b&gt;: The dimensions to reduce. If &lt;code&gt;None&lt;/code&gt; (the default), reduces all dimensions. Must be in the range &lt;code&gt;[-rank(input), rank(input))&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c489a91bbb35dde9cbc0878aeddfc2c44866fa2f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;axis&lt;/code&gt;&lt;/b&gt;: The dimensions to reduce. If &lt;code&gt;None&lt;/code&gt; (the default), reduces all dimensions. Must be in the range &lt;code&gt;[-rank(input_tensor), rank(input_tensor))&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22afd8828b50b494713c37321aca567819f296cb" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;axis&lt;/code&gt;&lt;/b&gt;: The dimensions to reduce; list or scalar. If &lt;code&gt;None&lt;/code&gt; (the default), reduces all dimensions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9388bbc33ac49a5f76ef96a6851d632ccdefb0b7" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;axis&lt;/code&gt;&lt;/b&gt;: Which axis to join along. The default behavior is to join all elements, producing a scalar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a8a006ad8de823a382d6796679af548de716055" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;axis&lt;/code&gt;&lt;/b&gt;: axis along which to normalize.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7cb1f79c0ba53c9552256a15adcded68ab100f6" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;axis&lt;/code&gt;&lt;/b&gt;: axis along which to perform normalization.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dc08d35be9abcbd49cffe6b861dafb9b3f64072" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;axis&lt;/code&gt;&lt;/b&gt;: axis along which to perform the reduction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9459e72e2b39f7049faad936e2ede051d87be201" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;axis&lt;/code&gt;&lt;/b&gt;: concatenation axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fee53ad564c0896ef0bda81b2c815978edcca91" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;axis&lt;/code&gt;&lt;/b&gt;: integer, axis along which to calculate weight norms. For instance, in a &lt;code&gt;Dense&lt;/code&gt; layer the weight matrix has shape &lt;code&gt;(input_dim, output_dim)&lt;/code&gt;, set &lt;code&gt;axis&lt;/code&gt; to &lt;code&gt;0&lt;/code&gt; to constrain each weight vector of length &lt;code&gt;(input_dim,)&lt;/code&gt;. In a &lt;code&gt;Conv2D&lt;/code&gt; layer with &lt;code&gt;data_format=&quot;channels_last&quot;&lt;/code&gt;, the weight tensor has shape &lt;code&gt;(rows, cols, input_depth, output_depth)&lt;/code&gt;, set &lt;code&gt;axis&lt;/code&gt; to &lt;code&gt;[0, 1, 2]&lt;/code&gt; to constrain the weights of each filter tensor of size &lt;code&gt;(rows, cols, input_depth)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf3a3e58a61072ae2c7927a84b8f4bedcbc949b3" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;b&lt;/code&gt;&lt;/b&gt;: &lt;a href=&quot;../../tensor&quot;&gt;&lt;code&gt;tf.Tensor&lt;/code&gt;&lt;/a&gt; with same type and rank as &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08e08335c3ed8ab0133fd067381157cae0dba4de" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;b&lt;/code&gt;&lt;/b&gt;: &lt;a href=&quot;../tensor&quot;&gt;&lt;code&gt;tf.Tensor&lt;/code&gt;&lt;/a&gt; with same type and rank as &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f53387e24fb1c6c876adb53074b9da518c3bab53" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;b&lt;/code&gt;&lt;/b&gt;: &lt;a href=&quot;tensor&quot;&gt;&lt;code&gt;tf.Tensor&lt;/code&gt;&lt;/a&gt; with same type and rank as &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d58b60b30783cbe4087a5baef9c508d1dfc31e1a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;b&lt;/code&gt;&lt;/b&gt;: &lt;code&gt;Tensor&lt;/code&gt; or &lt;code&gt;SparseTensor&lt;/code&gt; of the same type as &lt;code&gt;a&lt;/code&gt;. If sparse, indices must be sorted in row-major order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5fc7015adfa87fb7c1695b5efe8d33bd417fa69" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;b&lt;/code&gt;&lt;/b&gt;: &lt;code&gt;Tensor&lt;/code&gt; with same type as &lt;code&gt;a&lt;/code&gt; and compatible dimensions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec00f2a0b27dd2b19bb80512c25a222a5f7ee9ff" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;b&lt;/code&gt;&lt;/b&gt;: &lt;code&gt;Tensor&lt;/code&gt; with the same type as &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1675b40637187adaa0510beb2d32fdfacecb27b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;b&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt;. Must be one of the following types: &lt;code&gt;float32&lt;/code&gt;, &lt;code&gt;bfloat16&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f1476d78d9921dc744f68f6a870cbf7af359f0b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;b&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt;. Must have the same type as &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1766491bca0a17c56183c3c1eb1daaacfdabf53" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;b&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt;. Must have the same type as &lt;code&gt;a&lt;/code&gt;. Another tensor, of same type and shape as &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac1bdfc153b2cecefd9d3c0e7e202b9428ce1f87" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;b&lt;/code&gt;&lt;/b&gt;: A dense Matrix with the same dtype as sp_a.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="765468b2a3e7ce299d523a21022f53acfca8e102" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;b&lt;/code&gt;&lt;/b&gt;: A dict, the actual value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40998b18011d7f5eae33b49ac83840b4ee856801" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;b&lt;/code&gt;&lt;/b&gt;: Second set of images.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="719f1cf4a0a47cde9790a41506be53e0da95e48b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;b&lt;/code&gt;&lt;/b&gt;: The actual numpy &lt;code&gt;ndarray&lt;/code&gt;, or anything that can be converted into a numpy &lt;code&gt;ndarray&lt;/code&gt; (including Tensor), or any arbitrarily nested of structure of these.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a848911840f87c2bf06f691b8b50e1b95aff6e5" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;b&lt;/code&gt;&lt;/b&gt;: The second operand; &lt;code&gt;SparseTensor&lt;/code&gt; or &lt;code&gt;Tensor&lt;/code&gt;. At least one operand must be sparse.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee299d4a872ace31cc13f868910ba9387370eeec" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;b&lt;/code&gt;&lt;/b&gt;: The second structure to compare.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04db44ddc53047af14db652b68f2ad6d2436c531" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;b&lt;/code&gt;&lt;/b&gt;: the actual numpy ndarray or anything can be converted to one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9dfd4c6d989cabac9b89680f4daefc03d7237a3" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;b&lt;/code&gt;&lt;/b&gt;: the second value to compare.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4022524bd0e427b80f400431a4e25ef789e84517" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;b_is_sparse&lt;/code&gt;&lt;/b&gt;: An optional &lt;code&gt;bool&lt;/code&gt;. Defaults to &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98c8f74c4f6d1e8b3bbc8225a5e764a765783ace" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;b_is_sparse&lt;/code&gt;&lt;/b&gt;: If &lt;code&gt;True&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt; is treated as a sparse matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d9de1215169076a600354ba11d713c8002debd3" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;back_prop&lt;/code&gt;&lt;/b&gt;: (optional) True enables support for back propagation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e31ae8c8a2980a2fc67b6f8707789eacca2f31b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;back_prop&lt;/code&gt;&lt;/b&gt;: Whether backprop is enabled for this while loop.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0099a94cd5dbb9046bc3a62cceda068c0649f182" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;backprop_wrt_max&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt; of type &lt;code&gt;float32&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56a9d0a5d6cd83204b2a5d415c1a5b987709ae24" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;backprop_wrt_min&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt; of type &lt;code&gt;float32&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a01fd859ac0d0caeb2362315b9cfd1d238efaaee" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;backprops_wrt_input&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt; of type &lt;code&gt;float32&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f81580ed4d0419cdb29f89657f6cf2776b631eca" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;backward_layer&lt;/code&gt;&lt;/b&gt;: Optional &lt;code&gt;Recurrent&lt;/code&gt; instance to be used to handle backwards input processing. If &lt;code&gt;backward_layer&lt;/code&gt; is not provided, the layer instance passed as the &lt;code&gt;layer&lt;/code&gt; argument will be used to generate the backward layer automatically. Note that the provided &lt;code&gt;backward_layer&lt;/code&gt; layer should have properties matching those of the &lt;code&gt;layer&lt;/code&gt; argument, in particular it should have the same values for &lt;code&gt;stateful&lt;/code&gt;, &lt;code&gt;return_states&lt;/code&gt;, &lt;code&gt;return_sequence&lt;/code&gt;, etc. In addition, &lt;code&gt;backward_layer&lt;/code&gt; and &lt;code&gt;layer&lt;/code&gt; should have different &lt;code&gt;go_backwards&lt;/code&gt; argument values. A &lt;code&gt;ValueError&lt;/code&gt; will be raised if these requirements are not met.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="651c6a12f2f8154e2d07b8a102033aa841c133ca" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;base_operator&lt;/code&gt;&lt;/b&gt;: Shape &lt;code&gt;[B1,...,Bb, M, N]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fb3f5564f074796d0bb6d9fafcfc39d44e091e2" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;base_paddings&lt;/code&gt;&lt;/b&gt;: Optional int32 Tensor of shape [N, 2]. Specifies the minimum amount of padding to use. All elements must be &amp;gt;= 0. If not specified, defaults to 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32f139ae9c140d08de60e0c56c117bdbf51c49d8" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;base_type&lt;/code&gt;&lt;/b&gt;: The base type or tuple of base types for all objects that &lt;code&gt;conversion_func&lt;/code&gt; accepts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bdd49f091fc6d3cd77e70e7e58085e23585feab" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;baseline&lt;/code&gt;&lt;/b&gt;: Baseline value for the monitored quantity. Training will stop if the model doesn't show improvement over the baseline.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92a96db1c4f7d771cc661ac6bcf71c847cfcfae1" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;batch&lt;/code&gt;&lt;/b&gt;: integer, index of batch within the current epoch.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2715f4a22a7d2b1f5cc686bcf082ab603e660dc8" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;batch_axis&lt;/code&gt;&lt;/b&gt;: A python tuple of int values describing how each tensor produced by the Estimator &lt;code&gt;input_fn&lt;/code&gt; should be split across the TPU compute shards. For example, if your input_fn produced (images, labels) where the images tensor is in &lt;code&gt;HWCN&lt;/code&gt; format, your shard dimensions would be [3, 0], where 3 corresponds to the &lt;code&gt;N&lt;/code&gt; dimension of your images Tensor, and 0 corresponds to the dimension along which to split the labels to match up with the corresponding images. If None is supplied, and per_host_input_for_training is True, batches will be sharded based on the major dimension. If tpu_config.per_host_input_for_training is False or &lt;code&gt;PER_HOST_V2&lt;/code&gt;, batch_axis is ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cee4507bde44bfff1d957964e979610175f1f93d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;batch_dims&lt;/code&gt;&lt;/b&gt;: An &lt;code&gt;integer&lt;/code&gt;. The number of batch dimensions. Must be less than &lt;code&gt;rank(indices)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4b78d0d9b9302ba4a0a5a012e94e9938f07f189" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;batch_dims&lt;/code&gt;&lt;/b&gt;: An integer or a scalar 'Tensor'. The number of batch dimensions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2b5c57843bc1ca25d8c83adf6cc16a785c3d8fc" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;batch_mean&lt;/code&gt;&lt;/b&gt;: A 1D Tensor for the mean of x.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81e4ce57b427460cbb0f21ce32e895604cba73e4" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;batch_norm&lt;/code&gt;&lt;/b&gt;: Whether to use batch normalization after each hidden layer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6192079e8b9213016dbeb2556619c3ca8f0a3cc8" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;batch_shape&lt;/code&gt;&lt;/b&gt;: &lt;code&gt;Tensor&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d236d08330fd0c34b96de2ed08b9c0edf592918e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;batch_shape&lt;/code&gt;&lt;/b&gt;: &lt;code&gt;TensorShape&lt;/code&gt;, possibly unknown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4ce1a54f8c4d2eb26920ce4c855b31b72a24952" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;batch_shape&lt;/code&gt;&lt;/b&gt;: A list or tuple of Python integers or a 1-D &lt;code&gt;int32&lt;/code&gt;&lt;code&gt;Tensor&lt;/code&gt;. If provided, the returned &lt;code&gt;Tensor&lt;/code&gt; will have leading batch dimensions of this shape.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7769f8a90492aa736401cdf473b7f8a4038a43f7" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;batch_shape&lt;/code&gt;&lt;/b&gt;: Optional &lt;code&gt;1-D&lt;/code&gt; integer &lt;code&gt;Tensor&lt;/code&gt;. The shape of the leading dimensions. If &lt;code&gt;None&lt;/code&gt;, this operator has no leading dimensions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6086a95d0ed25c42ad3ac8bada5dab03740b738" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;batch_size&lt;/code&gt;&lt;/b&gt;: A &lt;a href=&quot;../../../../../tf#int64&quot;&gt;&lt;code&gt;tf.int64&lt;/code&gt;&lt;/a&gt; scalar &lt;a href=&quot;../../../../tensor&quot;&gt;&lt;code&gt;tf.Tensor&lt;/code&gt;&lt;/a&gt;, representing the number of consecutive elements of this dataset to combine in a single batch.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77eac2b75ffb8022c920a92ca3c06f55ec030ef5" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;batch_size&lt;/code&gt;&lt;/b&gt;: A &lt;a href=&quot;../../../../tf#int64&quot;&gt;&lt;code&gt;tf.int64&lt;/code&gt;&lt;/a&gt; scalar &lt;a href=&quot;../../../tensor&quot;&gt;&lt;code&gt;tf.Tensor&lt;/code&gt;&lt;/a&gt;, representing the number of consecutive elements of this dataset to combine in a single batch.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bee4af546983f322d1c2f0941d3242ee9ff2614" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;batch_size&lt;/code&gt;&lt;/b&gt;: A &lt;a href=&quot;../../../tf#int64&quot;&gt;&lt;code&gt;tf.int64&lt;/code&gt;&lt;/a&gt; scalar &lt;a href=&quot;../../tensor&quot;&gt;&lt;code&gt;tf.Tensor&lt;/code&gt;&lt;/a&gt;, representing the number of consecutive elements of this dataset to combine in a single batch.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d0772980136b27d80b02e54c5dcb7078ed53666" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;batch_size&lt;/code&gt;&lt;/b&gt;: A &lt;a href=&quot;../../tf#int64&quot;&gt;&lt;code&gt;tf.int64&lt;/code&gt;&lt;/a&gt; scalar &lt;a href=&quot;../tensor&quot;&gt;&lt;code&gt;tf.Tensor&lt;/code&gt;&lt;/a&gt;, representing the number of consecutive elements of this dataset to combine in a single batch.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7483014de315a89222658285dc9716ed0da7c53" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;batch_size&lt;/code&gt;&lt;/b&gt;: An int representing the number of records to combine in a single batch.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab8c68bdd8a97df543647323a1eb54ce63733f05" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;batch_size&lt;/code&gt;&lt;/b&gt;: An integer. The new batch size pulled from the queue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab3b764c23689c0767607a50db56f1be3a8f3e8b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;batch_size&lt;/code&gt;&lt;/b&gt;: Integer or &lt;code&gt;None&lt;/code&gt;. Number of samples per gradient update. If unspecified, &lt;code&gt;batch_size&lt;/code&gt; will default to 32. Do not specify the &lt;code&gt;batch_size&lt;/code&gt; if your data is in the form of symbolic tensors, dataset, generators, or &lt;a href=&quot;../utils/sequence&quot;&gt;&lt;code&gt;keras.utils.Sequence&lt;/code&gt;&lt;/a&gt; instances (since they generate batches).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2659a3d8b2990dee1dc0264b16bca1ee8161af04" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;batch_size&lt;/code&gt;&lt;/b&gt;: Integer or &lt;code&gt;None&lt;/code&gt;. Number of samples per gradient update. If unspecified, &lt;code&gt;batch_size&lt;/code&gt; will default to 32. Do not specify the &lt;code&gt;batch_size&lt;/code&gt; if your data is in the form of symbolic tensors, dataset, generators, or &lt;a href=&quot;utils/sequence&quot;&gt;&lt;code&gt;keras.utils.Sequence&lt;/code&gt;&lt;/a&gt; instances (since they generate batches).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14f5f75a87c9cefa057f18c32af7a4ad5871cd30" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;batch_size&lt;/code&gt;&lt;/b&gt;: Integer or &lt;code&gt;None&lt;/code&gt;. Number of samples per gradient update. If unspecified, &lt;code&gt;batch_size&lt;/code&gt; will default to 32. Do not specify the &lt;code&gt;batch_size&lt;/code&gt; if your data is in the form of symbolic tensors, datasets, generators, or &lt;a href=&quot;../utils/sequence&quot;&gt;&lt;code&gt;keras.utils.Sequence&lt;/code&gt;&lt;/a&gt; instances (since they generate batches).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79b969c03a1f31273084ed1850a6ec9cd7c5e4b9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;batch_size&lt;/code&gt;&lt;/b&gt;: Integer or &lt;code&gt;None&lt;/code&gt;. Number of samples per gradient update. If unspecified, &lt;code&gt;batch_size&lt;/code&gt; will default to 32. Do not specify the &lt;code&gt;batch_size&lt;/code&gt; if your data is in the form of symbolic tensors, datasets, generators, or &lt;a href=&quot;utils/sequence&quot;&gt;&lt;code&gt;keras.utils.Sequence&lt;/code&gt;&lt;/a&gt; instances (since they generate batches).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7aab0a9c9e20bc851331d6a31710c057e3ddefe2" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;batch_size&lt;/code&gt;&lt;/b&gt;: Integer, size of a batch.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af08cdee65b789293dd4fd75ff6a07dc583a1a57" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;batch_size&lt;/code&gt;&lt;/b&gt;: Integer, size of batches to return.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07ae2ba6159f3549769ea31256429d9b40b91a1f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;batch_size&lt;/code&gt;&lt;/b&gt;: Optional input batch size (integer or None).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99ad4b9677618f21048ea03a616e9b86e755ba40" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;batch_size&lt;/code&gt;&lt;/b&gt;: The new batch size pulled from the queue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="297efa6d142657c9ecd8dfa2356fc80160c0260c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;batch_size&lt;/code&gt;&lt;/b&gt;: int, float, or unit Tensor representing the batch size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34772805fed444efc28af48090620dc674459831" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;batch_size&lt;/code&gt;&lt;/b&gt;: int, size of batches to return.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91bd1a140b4945231d5475b3ed24ba9174bb7579" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;batch_size&lt;/code&gt;&lt;/b&gt;: integer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c11f06225198b226aa0a4703ae36e001f0faeac" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;batch_size&lt;/code&gt;&lt;/b&gt;: optional static batch size (integer).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d3ff1322d78b165c772d9619347a7f0be65216d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;batch_size&lt;/code&gt;&lt;/b&gt;: size of batch of inputs to feed to the network for histograms computation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92a5ebbbb9cfff1c1972f7d7993f750e730bf6c4" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;batch_timeout_micros&lt;/code&gt;&lt;/b&gt;: Maximum number of microseconds to wait before outputting an incomplete batch.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd6139737188dc91f319e2b439651b7305322645" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;batch_var&lt;/code&gt;&lt;/b&gt;: A 1D Tensor for the variance of x.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43d2427ca6448182c5066c9f6eb4dd977c00427c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;bboxes&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt; of type &lt;code&gt;float32&lt;/code&gt;. 3-D with shape &lt;code&gt;[1, 1, 4]&lt;/code&gt; containing the distorted bounding box. Provide as input to &lt;a href=&quot;../../../image/draw_bounding_boxes&quot;&gt;&lt;code&gt;tf.image.draw_bounding_boxes&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6189d53a234578c64193648eae537652586c35b4" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;bboxes&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt; of type &lt;code&gt;float32&lt;/code&gt;. 3-D with shape &lt;code&gt;[1, 1, 4]&lt;/code&gt; containing the distorted bounding box. Provide as input to &lt;a href=&quot;draw_bounding_boxes&quot;&gt;&lt;code&gt;tf.image.draw_bounding_boxes&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23a3fece41b2e6a2e883b8009d62cd64f8570ef5" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;beam_width&lt;/code&gt;&lt;/b&gt;: An int scalar &amp;gt;= 0 (beam search beam width).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24ff553b337e735b0a6c84fa80308d1602eea841" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;beam_width&lt;/code&gt;&lt;/b&gt;: if &lt;code&gt;greedy&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;: a beam search decoder will be used with a beam of this width.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5366411a111a981846c251f4308c3c78b72ca48" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;begin&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt;. Has the same type as &lt;code&gt;image_size&lt;/code&gt;. 1-D, containing &lt;code&gt;[offset_height, offset_width, 0]&lt;/code&gt;. Provide as input to &lt;a href=&quot;../../../slice&quot;&gt;&lt;code&gt;tf.slice&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adfc53c5a40297565c5ede52d11aec72deee4cd9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;begin&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt;. Has the same type as &lt;code&gt;image_size&lt;/code&gt;. 1-D, containing &lt;code&gt;[offset_height, offset_width, 0]&lt;/code&gt;. Provide as input to &lt;a href=&quot;../slice&quot;&gt;&lt;code&gt;tf.slice&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85f8fb56159f489d1816f13aecaa018f9fc0b50f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;begin&lt;/code&gt;&lt;/b&gt;: An &lt;code&gt;int32&lt;/code&gt; or &lt;code&gt;int64&lt;/code&gt;&lt;code&gt;Tensor&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af37f3986f9a130f7fc717d5625f268123228695" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;begin_mask&lt;/code&gt;&lt;/b&gt;: An &lt;code&gt;int32&lt;/code&gt; mask.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c70998ff65dcac7449b2ce1392e0c0779b504b7b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;beta1&lt;/code&gt;&lt;/b&gt;: A float value or a constant float tensor. The exponential decay rate for the 1st moment estimates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3350cbe40405bb0045b726cea34a964b7e61ac52" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;beta1&lt;/code&gt;&lt;/b&gt;: A float value. The exponential decay rate for the 1st moment estimates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3b9cf9a4dda22d2d3c03183f019e1500b6791dc" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;beta2&lt;/code&gt;&lt;/b&gt;: A float value or a constant float tensor. The exponential decay rate for the 2nd moment estimates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70373476fe386fa0cc5866590ad6d5656a0c1cba" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;beta2&lt;/code&gt;&lt;/b&gt;: A float value. The exponential decay rate for the 2nd moment estimates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0e1c330af2224844e9bc2a39949295e18f5e83b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;beta&lt;/code&gt;&lt;/b&gt;: A 1D beta Tensor with size matching the last dimension of t. An offset to be added to the normalized tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4fa56215949e72395b3202dcb2e7f29ef1545b0" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;beta&lt;/code&gt;&lt;/b&gt;: A Tensor or Python value or N-D array of type &lt;code&gt;dtype&lt;/code&gt;. Defaults to 1. &lt;code&gt;beta&lt;/code&gt; provides the inverse scale parameter(s) of the gamma distribution(s) to sample. Must be broadcastable with &lt;code&gt;alpha&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="919075367d260f7a31f70dda775cb7359132df03" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;beta&lt;/code&gt;&lt;/b&gt;: An optional &lt;code&gt;float&lt;/code&gt;. Defaults to &lt;code&gt;0.5&lt;/code&gt;. An exponent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36a98edc3eaf370db8ff8da10aa85104d851c643" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;beta&lt;/code&gt;&lt;/b&gt;: See computation above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca04a11687018870850efee0f210b693263e9deb" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;beta&lt;/code&gt;&lt;/b&gt;: Tensor with which to center the input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1d38bf414897f09921423f7ff9988aa35c16aa9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;beta_1&lt;/code&gt;&lt;/b&gt;: A float value or a constant float tensor. The exponential decay rate for the 1st moment estimates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d12d718749cb4e2062a88052d10fcbbc9aa081d9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;beta_2&lt;/code&gt;&lt;/b&gt;: A float value or a constant float tensor. The exponential decay rate for the 2nd moment estimates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4712ed1c76a344d82461c74aeb12861f24954d5c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;beta_2&lt;/code&gt;&lt;/b&gt;: A float value or a constant float tensor. The exponential decay rate for the exponentially weighted infinity norm.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4992aa9b53a1dbeb30cfdc8a78015fc6d5dbe77d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;beta_constraint&lt;/code&gt;&lt;/b&gt;: An optional projection function to be applied to the &lt;code&gt;beta&lt;/code&gt; weight after being updated by an &lt;code&gt;Optimizer&lt;/code&gt; (e.g. used to implement norm constraints or value constraints for layer weights). The function must take as input the unprojected variable and must return the projected variable (which must have the same shape). Constraints are not safe to use when doing asynchronous distributed training.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c58ac062f9297278defc7c200add62a1577212c9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;beta_constraint&lt;/code&gt;&lt;/b&gt;: Optional constraint for the beta weight.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ed2ad3d5bb2899464d04f8d7f5561baa3a7936a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;beta_initializer&lt;/code&gt;&lt;/b&gt;: Initializer for the beta weight.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42d422e0758972caaa19a2876994723c8808d3b8" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;beta_regularizer&lt;/code&gt;&lt;/b&gt;: Optional regularizer for the beta weight.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbf80922cd830e9ecf93454e53285c1b7e81f5a5" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;bfloat16_atol&lt;/code&gt;&lt;/b&gt;: absolute tolerance for bfloat16.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="924084d57b4f487e91ff2a4ae05ccd4476a4397f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;bfloat16_rtol&lt;/code&gt;&lt;/b&gt;: relative tolerance for bfloat16.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fc15f79b5963915768e3be88ee9cdff9a4325bf" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;bias&lt;/code&gt;&lt;/b&gt;: A 1-D &lt;code&gt;Tensor&lt;/code&gt; with size matching the channel dimension of &lt;code&gt;value&lt;/code&gt;. Must be the same type as &lt;code&gt;value&lt;/code&gt; unless &lt;code&gt;value&lt;/code&gt; is a quantized type, in which case a different quantized type may be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0082f498a5d12c742bdefd30edead2f6eb345e8a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;bias&lt;/code&gt;&lt;/b&gt;: An optional &lt;code&gt;float&lt;/code&gt;. Defaults to &lt;code&gt;1&lt;/code&gt;. An offset (usually positive to avoid dividing by 0).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39a691437f4c93ad6b6aabd364fe0c5e26afb360" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;bias&lt;/code&gt;&lt;/b&gt;: Bias tensor to add.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23ba86d4919fb48dbacaa8ce528c2f0fa69acdd2" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;bias&lt;/code&gt;&lt;/b&gt;: Bias vector, if applicable (TensorFlow variable or tensor).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="460d4d852cc3fa25c02c191c20c0239f8479644f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;bias_constraint&lt;/code&gt;&lt;/b&gt;: An optional projection function to be applied to the bias after being updated by an &lt;code&gt;Optimizer&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6bf7a8f8b08297ee781d18c1fbe4f9303169e2c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;bias_constraint&lt;/code&gt;&lt;/b&gt;: Constraint function applied to the bias vector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="755a274a1ec87d5ce1c40128ac38d7a064bc276e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;bias_constraint&lt;/code&gt;&lt;/b&gt;: Constraint function applied to the bias vector. Default: &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f23dc6826594175386a290419a9bd5e0864604d0" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;bias_constraint&lt;/code&gt;&lt;/b&gt;: Constraint function for the bias.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa211747085dad6f88c378fcddfcf65b7233a5bc" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;bias_constraint&lt;/code&gt;&lt;/b&gt;: Optional projection function to be applied to the bias after being updated by an &lt;code&gt;Optimizer&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9027dae64dd1b4048e5f877d4bf4c8dea304b194" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;bias_initializer&lt;/code&gt;&lt;/b&gt;: (optional) The initializer to use for the bias.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3458f5be0e4a8dc564c3c0913cd1d64687a52c1" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;bias_initializer&lt;/code&gt;&lt;/b&gt;: An initializer for the bias vector. If &lt;code&gt;None&lt;/code&gt;, the default initializer will be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44b2748af77e11a563f36be2f0dcd13786753f94" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;bias_initializer&lt;/code&gt;&lt;/b&gt;: An initializer for the bias vector. If None, the default initializer will be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1295a611718f3388701b8ae62131928c36ccec0" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;bias_initializer&lt;/code&gt;&lt;/b&gt;: Initializer for the bias vector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="371a8ad85f2a7874f79d9bd21a83cc3c590ab22f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;bias_initializer&lt;/code&gt;&lt;/b&gt;: Initializer for the bias vector. Default: &lt;code&gt;zeros&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e82649d550a6cedf39c0460711e319c4cb4c3c05" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;bias_initializer&lt;/code&gt;&lt;/b&gt;: Initializer function for the bias.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e23a89013c6857266e33da0c1f21a239092fda5" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;bias_initializer&lt;/code&gt;&lt;/b&gt;: Initializer instance (or name) for the bias.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3798b874514337eda371afee01d62920a33ded66" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;bias_regularizer&lt;/code&gt;&lt;/b&gt;: Optional regularizer for the bias vector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59fd91d7ffa4c3d65a191374e7f9ddd3f2a0e165" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;bias_regularizer&lt;/code&gt;&lt;/b&gt;: Regularizer function applied to the bias vector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7de0710ce7d721e14417fb63e44f73c1b2f93e2f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;bias_regularizer&lt;/code&gt;&lt;/b&gt;: Regularizer function applied to the bias vector. Default: &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffc08f462bcbe7fb66cae917975eabdaf3b5fbaf" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;bias_regularizer&lt;/code&gt;&lt;/b&gt;: Regularizer function for the bias.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="154b113c406aa59cbadaa02c0f5d966b357acd9a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;bias_regularizer&lt;/code&gt;&lt;/b&gt;: Regularizer instance for the bias (callable).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="065ddcfe74a16572313d7be6f54cedca93bea96b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;bias_regularizer&lt;/code&gt;&lt;/b&gt;: regularizer for bias vector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebee5ebc7c80891c5680baa262e76087e0cc35d8" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;biases&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt; of shape &lt;code&gt;[num_classes]&lt;/code&gt;. The class biases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc249ccfad35e37e5cc348b53134202fbe2fa32d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;biases&lt;/code&gt;&lt;/b&gt;: a 1D tensor. Dimensions: out_units</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd3db5bad63da60fe0ab564340861ddbe9c1788f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;bicubic&lt;/code&gt;&lt;/b&gt;: &lt;a href=&quot;https://en.wikipedia.org/wiki/Bicubic_interpolation&quot;&gt;Cubic interpolant&lt;/a&gt; of Keys. Equivalent to Catmull-Rom kernel. Reasonably good quality and faster than Lanczos3Kernel, particularly when upsampling.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c67bccbedf98eef8378fd479b2f543c9b8b2799" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;bilinear&lt;/code&gt;&lt;/b&gt;: &lt;a href=&quot;https://en.wikipedia.org/wiki/Bilinear_interpolation&quot;&gt;Bilinear interpolation.&lt;/a&gt; If 'antialias' is true, becomes a hat/tent filter function with radius 1 when downsampling.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bb776edb9ca3fe562e515b321300922477cd744" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;blank_index&lt;/code&gt;&lt;/b&gt;: (optional) Set the class index to use for the blank label. Negative values will start from num_classes, ie, -1 will reproduce the ctc_loss behavior of using num_classes - 1 for the blank symbol. There is some memory/performance overhead to switching from the default of 0 as an additional shifted copy of the logits may be created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d817ba24f8213e7a348f8b5a0ff0b2270e44a76f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;block_length&lt;/code&gt;&lt;/b&gt;: (Optional.) The number of consecutive elements to produce from each input element before cycling to another input element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1137fe64c7b1e73d5062e494f6d921f1328064ad" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;block_length&lt;/code&gt;&lt;/b&gt;: The number of consecutive elements to pull from an input &lt;code&gt;Dataset&lt;/code&gt; before advancing to the next input &lt;code&gt;Dataset&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b6a4d63c17df8f232ed982a1da3a49bead3e2d2" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;block_shape&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt;. Must be one of the following types: &lt;code&gt;int32&lt;/code&gt;, &lt;code&gt;int64&lt;/code&gt;. 1-D with shape &lt;code&gt;[M]&lt;/code&gt;, all values must be &amp;gt;= 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a97bfce19e4e564174367d54edc4e99134e37ae6" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;block_shape&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt;. Must be one of the following types: &lt;code&gt;int32&lt;/code&gt;, &lt;code&gt;int64&lt;/code&gt;. 1-D with shape &lt;code&gt;[M]&lt;/code&gt;, all values must be &amp;gt;= 1. For backwards compatibility with TF 1.0, this parameter may be an int, in which case it is converted to &lt;code&gt;numpy.array([block_shape, block_shape], dtype=numpy.int64)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ac15cbc01abfcc3da73ae8df6c5a962582d1a64" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;block_shape&lt;/code&gt;&lt;/b&gt;: int32 Tensor of shape [N].</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f8ede65c48bef3a9ff283887ff5890643b44738" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;block_size&lt;/code&gt;&lt;/b&gt;: An &lt;code&gt;int&lt;/code&gt; that is &lt;code&gt;&amp;gt;= 2&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="709858e0bdd97f1e13ec47d309a4c56a93fb97d3" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;block_size&lt;/code&gt;&lt;/b&gt;: An &lt;code&gt;int&lt;/code&gt; that is &lt;code&gt;&amp;gt;= 2&lt;/code&gt;. The size of the spatial block, same as in Space2Depth.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="310aad778a20e02a3e4135a18eb1b5167e8cbeaa" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;block_size&lt;/code&gt;&lt;/b&gt;: An &lt;code&gt;int&lt;/code&gt; that is &lt;code&gt;&amp;gt;= 2&lt;/code&gt;. The size of the spatial block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bfd1e466d3560936aa6144aa46beedeef4db5df" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;bname&lt;/code&gt;&lt;/b&gt;: Variable name to use for the second structure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7d13e2bf99bcdda509db39fbe36cd74389554ab" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;body&lt;/code&gt;&lt;/b&gt;: A callable that represents the loop body.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33bcd340037ddcab25e30d54b0566fa5a9eda050" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;boundaries&lt;/code&gt;&lt;/b&gt;: A list of &lt;code&gt;Tensor&lt;/code&gt;s or &lt;code&gt;int&lt;/code&gt;s or &lt;code&gt;float&lt;/code&gt;s with strictly increasing entries, and with all elements having the same type as &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87fb11e3bbc607c61e4e6a6808ef1a062bb3c04a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;boundaries&lt;/code&gt;&lt;/b&gt;: A list of &lt;code&gt;Tensor&lt;/code&gt;s or &lt;code&gt;int&lt;/code&gt;s or &lt;code&gt;float&lt;/code&gt;s with strictly increasing entries, and with all elements having the same type as the optimizer step.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef2e301c0ef6c6cabe38d04394173ebcc0a5ec6d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;boundaries&lt;/code&gt;&lt;/b&gt;: A sorted list or tuple of floats specifying the boundaries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1eb87d4eb04436456c6b12ca3d9eb47ac62b1ad1" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;bounding_boxes&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt; of type &lt;code&gt;float32&lt;/code&gt;. 3-D with shape &lt;code&gt;[batch, N, 4]&lt;/code&gt; describing the N bounding boxes associated with the image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7826599ac133989841b5be187d117f066301e7b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;box_ind&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt; of type &lt;code&gt;int32&lt;/code&gt;. A 1-D tensor of shape &lt;code&gt;[num_boxes]&lt;/code&gt; with int32 values in &lt;code&gt;[0, batch)&lt;/code&gt;. The value of &lt;code&gt;box_ind[i]&lt;/code&gt; specifies the image that the &lt;code&gt;i&lt;/code&gt;-th box refers to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c1adce1efa73934829e661aaad8f9eddef0d1d0" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;box_indices&lt;/code&gt;&lt;/b&gt;: A 1-D tensor of shape &lt;code&gt;[num_boxes]&lt;/code&gt; with int32 values in &lt;code&gt;[0, batch)&lt;/code&gt;. The value of &lt;code&gt;box_ind[i]&lt;/code&gt; specifies the image that the &lt;code&gt;i&lt;/code&gt;-th box refers to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78b34fa4369c84d0fa827f8fbd3931c3ca8de5af" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;boxes&lt;/code&gt;&lt;/b&gt;: A 2-D float &lt;code&gt;Tensor&lt;/code&gt; of shape &lt;code&gt;[num_boxes, 4]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b62d7502a763b15be17255fcab012fd36ec05e6" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;boxes&lt;/code&gt;&lt;/b&gt;: A 2-D tensor of shape &lt;code&gt;[num_boxes, 4]&lt;/code&gt;. The &lt;code&gt;i&lt;/code&gt;-th row of the tensor specifies the coordinates of a box in the &lt;code&gt;box_ind[i]&lt;/code&gt; image and is specified in normalized coordinates &lt;code&gt;[y1, x1, y2, x2]&lt;/code&gt;. A normalized coordinate value of &lt;code&gt;y&lt;/code&gt; is mapped to the image coordinate at &lt;code&gt;y * (image_height - 1)&lt;/code&gt;, so as the &lt;code&gt;[0, 1]&lt;/code&gt; interval of normalized image height is mapped to &lt;code&gt;[0, image_height - 1]&lt;/code&gt; in image height coordinates. We do allow &lt;code&gt;y1&lt;/code&gt; &amp;gt; &lt;code&gt;y2&lt;/code&gt;, in which case the sampled crop is an up-down flipped version of the original image. The width dimension is treated similarly. Normalized coordinates outside the &lt;code&gt;[0, 1]&lt;/code&gt; range are allowed, in which case we use &lt;code&gt;extrapolation_value&lt;/code&gt; to extrapolate the input image values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05c0f48926591b0b886a81d3c9436b3c903c4aea" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;boxes&lt;/code&gt;&lt;/b&gt;: A 4-D float &lt;code&gt;Tensor&lt;/code&gt; of shape &lt;code&gt;[batch_size, num_boxes, q, 4]&lt;/code&gt;. If &lt;code&gt;q&lt;/code&gt; is 1 then same boxes are used for all classes otherwise, if &lt;code&gt;q&lt;/code&gt; is equal to number of classes, class-specific boxes are used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="987d6da1e9b73e3b45ec91be6e2098c4a6d623a0" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;boxes&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt; of type &lt;code&gt;float32&lt;/code&gt;. 3-D with shape &lt;code&gt;[batch, num_bounding_boxes, 4]&lt;/code&gt; containing bounding boxes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1019af5fe53bb72ee90d11aae96d26695ac1eef0" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;boxes&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt; of type &lt;code&gt;float32&lt;/code&gt;. A 2-D tensor of shape &lt;code&gt;[num_boxes, 4]&lt;/code&gt;. The &lt;code&gt;i&lt;/code&gt;-th row of the tensor specifies the coordinates of a box in the &lt;code&gt;box_ind[i]&lt;/code&gt; image and is specified in normalized coordinates &lt;code&gt;[y1, x1, y2, x2]&lt;/code&gt;. A normalized coordinate value of &lt;code&gt;y&lt;/code&gt; is mapped to the image coordinate at &lt;code&gt;y * (image_height - 1)&lt;/code&gt;, so as the &lt;code&gt;[0, 1]&lt;/code&gt; interval of normalized image height is mapped to &lt;code&gt;[0, image_height - 1]&lt;/code&gt; in image height coordinates. We do allow &lt;code&gt;y1&lt;/code&gt; &amp;gt; &lt;code&gt;y2&lt;/code&gt;, in which case the sampled crop is an up-down flipped version of the original image. The width dimension is treated similarly. Normalized coordinates outside the &lt;code&gt;[0, 1]&lt;/code&gt; range are allowed, in which case we use &lt;code&gt;extrapolation_value&lt;/code&gt; to extrapolate the input image values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4d6c3d470edee04325a8acc16771cc62ea35538" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;branch_fns&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;dict&lt;/code&gt; mapping &lt;code&gt;int&lt;/code&gt;s to callables, or a &lt;code&gt;list&lt;/code&gt; of (&lt;code&gt;int&lt;/code&gt;, callable) pairs, or simply a list of callables (in which case the index serves as the key). Each callable must return a matching structure of tensors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb7822b4f33aa553f8a6fb032904bbd204a86112" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;branch_index&lt;/code&gt;&lt;/b&gt;: An int Tensor specifying which of &lt;code&gt;branch_fns&lt;/code&gt; should be executed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57c551d6a0a393dd6bc05db3485ea2c49909d847" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;brightness_range&lt;/code&gt;&lt;/b&gt;: Tuple or list of two floats. Range for picking a brightness shift value from.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ffb189be1907f0160246b04e1be4e88ec184dc9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;bucket_batch_sizes&lt;/code&gt;&lt;/b&gt;: &lt;code&gt;list&amp;lt;int&amp;gt;&lt;/code&gt;, batch size per bucket. Length should be &lt;code&gt;len(bucket_boundaries) + 1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1159e29718fcb53983ecc579e8ccd285faf0bb19" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;bucket_boundaries&lt;/code&gt;&lt;/b&gt;: &lt;code&gt;list&amp;lt;int&amp;gt;&lt;/code&gt;, upper length boundaries of the buckets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc2eae16bfcd574726f922c02be13a5e6b668e30" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;buckets&lt;/code&gt;&lt;/b&gt;: Optional positive &lt;code&gt;int&lt;/code&gt;. The output will have this many buckets, except in two edge cases. If there is no data, then there are no buckets. If there is data but all points have the same value, then there is one bucket whose left and right endpoints are the same.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af2095be508b84d66be53ca9f0e1037d7e5f873d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;buffer_output_elements&lt;/code&gt;&lt;/b&gt;: The number of elements each iterator being interleaved should buffer (similar to the &lt;code&gt;.prefetch()&lt;/code&gt; transformation for each interleaved iterator).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="883f6b08142694cc37fd6755ffb02cea2fcc40c4" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;buffer_size&lt;/code&gt;&lt;/b&gt;: (Optional.) A &lt;a href=&quot;../../../../../tf#int64&quot;&gt;&lt;code&gt;tf.int64&lt;/code&gt;&lt;/a&gt; scalar denoting the number of bytes to buffer while reading files. Defaults to 4MB.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="000ad9540a0df0bfc2dbf6b3ac03c1d240fecfcb" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;buffer_size&lt;/code&gt;&lt;/b&gt;: (Optional.) A &lt;a href=&quot;../../../../tf#int64&quot;&gt;&lt;code&gt;tf.int64&lt;/code&gt;&lt;/a&gt; scalar denoting the number of bytes to buffer. A value of 0 results in the default buffering values chosen based on the compression type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62b1413e94b7d4085e4532f53f74e44b337ce8b6" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;buffer_size&lt;/code&gt;&lt;/b&gt;: (Optional.) A &lt;a href=&quot;../../../../tf#int64&quot;&gt;&lt;code&gt;tf.int64&lt;/code&gt;&lt;/a&gt; scalar representing the number of bytes in the read buffer. If your input pipeline is I/O bottlenecked, consider setting this parameter to a value 1-100 MBs. If &lt;code&gt;None&lt;/code&gt;, a sensible default for both local and remote file systems is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d19c1dbfb20912d0a7136f57f98be12af662435f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;buffer_size&lt;/code&gt;&lt;/b&gt;: (Optional.) A &lt;a href=&quot;../../../../tf#int64&quot;&gt;&lt;code&gt;tf.int64&lt;/code&gt;&lt;/a&gt; scalar representing the number of bytes to buffer when reading.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06be5a67fbf03089ad8cd541c2f6a97baec4b19e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;buffer_size&lt;/code&gt;&lt;/b&gt;: (Optional.) A &lt;a href=&quot;../../../tf#int64&quot;&gt;&lt;code&gt;tf.int64&lt;/code&gt;&lt;/a&gt; scalar denoting the number of bytes to buffer while reading files. Defaults to 4MB.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42072d0003fb918f4acfcf1dbaa0a4d008c63d48" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;buffer_size&lt;/code&gt;&lt;/b&gt;: (Optional.) A &lt;a href=&quot;../../tf#int64&quot;&gt;&lt;code&gt;tf.int64&lt;/code&gt;&lt;/a&gt; scalar denoting the number of bytes to buffer. A value of 0 results in the default buffering values chosen based on the compression type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c5fdd4e50ae5b6e6e0f1ce113b5e43cf47c1d12" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;buffer_size&lt;/code&gt;&lt;/b&gt;: (Optional.) A &lt;a href=&quot;../../tf#int64&quot;&gt;&lt;code&gt;tf.int64&lt;/code&gt;&lt;/a&gt; scalar representing the number of bytes in the read buffer. If your input pipeline is I/O bottlenecked, consider setting this parameter to a value 1-100 MBs. If &lt;code&gt;None&lt;/code&gt;, a sensible default for both local and remote file systems is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="871babba154010deb826d5dd244d7b6a956e6834" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;buffer_size&lt;/code&gt;&lt;/b&gt;: (Optional.) A &lt;a href=&quot;../../tf#int64&quot;&gt;&lt;code&gt;tf.int64&lt;/code&gt;&lt;/a&gt; scalar representing the number of bytes to buffer when reading.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d33960b53dee2bd6dcbb22ef349eda87ac6cc0d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;buffer_size&lt;/code&gt;&lt;/b&gt;: (Optional.) The number of elements to buffer on &lt;code&gt;device&lt;/code&gt;. Defaults to an automatically chosen value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efd99d0d18564a8603673202aba6298c23a311d6" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;buffer_size&lt;/code&gt;&lt;/b&gt;: A &lt;a href=&quot;../../../../../tf#int64&quot;&gt;&lt;code&gt;tf.int64&lt;/code&gt;&lt;/a&gt; scalar &lt;a href=&quot;../../../../tensor&quot;&gt;&lt;code&gt;tf.Tensor&lt;/code&gt;&lt;/a&gt;, representing the maximum number of elements that will be buffered when prefetching.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9eae5e8404649bfdf52e4671fb119858a5b77431" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;buffer_size&lt;/code&gt;&lt;/b&gt;: A &lt;a href=&quot;../../../../../tf#int64&quot;&gt;&lt;code&gt;tf.int64&lt;/code&gt;&lt;/a&gt; scalar &lt;a href=&quot;../../../../tensor&quot;&gt;&lt;code&gt;tf.Tensor&lt;/code&gt;&lt;/a&gt;, representing the number of elements from this dataset from which the new dataset will sample.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b73a95ab2bfa08af25f153a4391a0bf49a0f250c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;buffer_size&lt;/code&gt;&lt;/b&gt;: A &lt;a href=&quot;../../../../tf#int64&quot;&gt;&lt;code&gt;tf.int64&lt;/code&gt;&lt;/a&gt; scalar &lt;a href=&quot;../../../tensor&quot;&gt;&lt;code&gt;tf.Tensor&lt;/code&gt;&lt;/a&gt;, representing the maximum number of elements that will be buffered when prefetching.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ea28b6b1d4fa97d68c2795b51f6a2fe4445e8b9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;buffer_size&lt;/code&gt;&lt;/b&gt;: A &lt;a href=&quot;../../../../tf#int64&quot;&gt;&lt;code&gt;tf.int64&lt;/code&gt;&lt;/a&gt; scalar &lt;a href=&quot;../../../tensor&quot;&gt;&lt;code&gt;tf.Tensor&lt;/code&gt;&lt;/a&gt;, representing the number of elements from this dataset from which the new dataset will sample.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9104b90355dae5c5cb9197aed4f7a94b8dce68b0" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;buffer_size&lt;/code&gt;&lt;/b&gt;: A &lt;a href=&quot;../../../tf#int64&quot;&gt;&lt;code&gt;tf.int64&lt;/code&gt;&lt;/a&gt; scalar &lt;a href=&quot;../../tensor&quot;&gt;&lt;code&gt;tf.Tensor&lt;/code&gt;&lt;/a&gt;, representing the maximum number elements that will be buffered when prefetching.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24e48aac14a762268135ba5fa800ef46eff5fdc3" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;buffer_size&lt;/code&gt;&lt;/b&gt;: A &lt;a href=&quot;../../../tf#int64&quot;&gt;&lt;code&gt;tf.int64&lt;/code&gt;&lt;/a&gt; scalar &lt;a href=&quot;../../tensor&quot;&gt;&lt;code&gt;tf.Tensor&lt;/code&gt;&lt;/a&gt;, representing the maximum number of elements that will be buffered when prefetching.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d45b775b5b4609a65acd61acf3521babeb71379" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;buffer_size&lt;/code&gt;&lt;/b&gt;: A &lt;a href=&quot;../../../tf#int64&quot;&gt;&lt;code&gt;tf.int64&lt;/code&gt;&lt;/a&gt; scalar &lt;a href=&quot;../../tensor&quot;&gt;&lt;code&gt;tf.Tensor&lt;/code&gt;&lt;/a&gt;, representing the number of elements from this dataset from which the new dataset will sample.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff07d4edce9871ab2cbff16fdac4a29aa174ffec" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;buffer_size&lt;/code&gt;&lt;/b&gt;: A &lt;a href=&quot;../../tf#int64&quot;&gt;&lt;code&gt;tf.int64&lt;/code&gt;&lt;/a&gt; scalar &lt;a href=&quot;../tensor&quot;&gt;&lt;code&gt;tf.Tensor&lt;/code&gt;&lt;/a&gt;, representing the maximum number of elements that will be buffered when prefetching.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69b6b0183e3572484b88c45be9241e29129cad1f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;buffer_size&lt;/code&gt;&lt;/b&gt;: A &lt;a href=&quot;../../tf#int64&quot;&gt;&lt;code&gt;tf.int64&lt;/code&gt;&lt;/a&gt; scalar &lt;a href=&quot;../tensor&quot;&gt;&lt;code&gt;tf.Tensor&lt;/code&gt;&lt;/a&gt;, representing the number of elements from this dataset from which the new dataset will sample.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bd6eaeed634afe409599155fb56031a827cffa4" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;builder&lt;/code&gt;&lt;/b&gt;: Optional &lt;code&gt;SaverBuilder&lt;/code&gt; to use if a &lt;code&gt;saver_def&lt;/code&gt; was not provided. Defaults to &lt;code&gt;BulkSaverBuilder()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7461d982675c49b934baaa99654cc7c34663fbc" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;burn_iters&lt;/code&gt;&lt;/b&gt;: Number of burn-in iterations to run.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eee8893dc0db3cb63650d9af412329d5b915d04c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;by_name&lt;/code&gt;&lt;/b&gt;: Boolean, whether to load weights by name or by topological order. Only topological loading is supported for weight files in TensorFlow format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a33fc11f93c4598b4a8801435224e89b0b72153" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt; of type &lt;code&gt;string&lt;/code&gt;. A Tensor of string which is compressed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cef79bb00d1619e0bee0558a1afd8e76795b6f5" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt; of type &lt;code&gt;string&lt;/code&gt;. Tensor of serialized protos with shape &lt;code&gt;batch_shape&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f834b9f5d7072ed3ba36a07733919715739a6fac" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/b&gt;: Deprecated parameter. Use &lt;code&gt;input_bytes&lt;/code&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89578469f72728c9de9bd5468027594f19b4c0ac" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;bytes_or_text&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;bytearray&lt;/code&gt;, &lt;code&gt;bytes&lt;/code&gt;, &lt;code&gt;str&lt;/code&gt;, or &lt;code&gt;unicode&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f88c7cfb251d2a4b0bedcb48ab90e88dcf4ef80c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;bytes_or_text&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;bytes&lt;/code&gt;, &lt;code&gt;str&lt;/code&gt;, or &lt;code&gt;unicode&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b4bdc9347335b040b54043136e81f87f661760c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;bytes_per_string_element&lt;/code&gt;&lt;/b&gt;: If the &lt;code&gt;Variable&lt;/code&gt; is of type string, this provides an estimate of how large each scalar in the &lt;code&gt;Variable&lt;/code&gt; is.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e12da95f18f8876d60803011eaf78dac16eecc81" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;cache_dir&lt;/code&gt;&lt;/b&gt;: Location to store cached files, when None it defaults to the &lt;a href=&quot;https://www.tensorflow.org/faq/#where_is_the_keras_configuration_filed_stored&quot;&gt;Keras Directory&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0a5462cde4c90fd9422efc9ee72e6b806879a23" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;cache_subdir&lt;/code&gt;&lt;/b&gt;: Subdirectory under the Keras cache dir where the file is saved. If an absolute path &lt;code&gt;/path/to/folder&lt;/code&gt; is specified the file will be saved at that location.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aee10e2367f630cbe649f413dc3ba9c6a51480a3" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;cached_nrows&lt;/code&gt;&lt;/b&gt;: A 1-D integer scalar tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d52ea7a334a5ccf70cfc4114775383221e6db1f5" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;cached_row_lengths&lt;/code&gt;&lt;/b&gt;: A 1-D integer tensor with shape &lt;code&gt;[nrows]&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e04d9365b37505e92001d5a0c2ec7db814c0c03" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;cached_value_rowids&lt;/code&gt;&lt;/b&gt;: A 1-D integer tensor with shape &lt;code&gt;[nvals]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab494aa868d9b53fa8201e4f720a193744739011" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;caching_device&lt;/code&gt;&lt;/b&gt;: Optional device string describing where the Variable should be cached for reading. Defaults to the Variable's device. If not &lt;code&gt;None&lt;/code&gt;, caches on another device. Typical use is to cache on the device where the Ops using the Variable reside, to deduplicate copying through &lt;code&gt;Switch&lt;/code&gt; and other conditional statements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f9416a226b51753a9149ebaa950ef0519e267c8" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;caching_device&lt;/code&gt;&lt;/b&gt;: Optional device string or function describing where the Variable should be cached for reading. Defaults to the Variable's device. If not &lt;code&gt;None&lt;/code&gt;, caches on another device. Typical use is to cache on the device where the Ops using the Variable reside, to deduplicate copying through &lt;code&gt;Switch&lt;/code&gt; and other conditional statements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="998f5fa64dbc8a702d4c47577565ed94bf6f3bfd" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;caching_device&lt;/code&gt;&lt;/b&gt;: default caching device for variables within this scope.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20dac06e2f52a46e4f00941a5157a19a55cfd0c2" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;caching_device&lt;/code&gt;&lt;/b&gt;: string, callable, or None: the caching device passed to get_variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b81d7210019b66f0659bfff7948fd398ec8c3752" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;calibration_input_fn&lt;/code&gt;&lt;/b&gt;: a generator function that yields input data as a list or tuple, which will be used to execute the converted signature for calibration. All the returned input data should have the same shape. Example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b555cbf6f329c53bdaf3251dca5745525e3b6225" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;callable_obj&lt;/code&gt;&lt;/b&gt;: Function to be called, or None to return a context.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef7778c119494ba95955d1c4603f9518c9ce98c8" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;callbacks&lt;/code&gt;&lt;/b&gt;: List of &lt;a href=&quot;../callbacks/callback&quot;&gt;&lt;code&gt;keras.callbacks.Callback&lt;/code&gt;&lt;/a&gt; instances. List of callbacks to apply during evaluation. See &lt;a href=&quot;../callbacks&quot;&gt;callbacks&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3066afc18ed21ccaa24e68471d2a0e7b617293d4" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;callbacks&lt;/code&gt;&lt;/b&gt;: List of &lt;a href=&quot;../callbacks/callback&quot;&gt;&lt;code&gt;keras.callbacks.Callback&lt;/code&gt;&lt;/a&gt; instances. List of callbacks to apply during prediction. See &lt;a href=&quot;../callbacks&quot;&gt;callbacks&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d35cb443336e6858c0525924ee4d78aefd75b164" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;callbacks&lt;/code&gt;&lt;/b&gt;: List of &lt;a href=&quot;../callbacks/callback&quot;&gt;&lt;code&gt;keras.callbacks.Callback&lt;/code&gt;&lt;/a&gt; instances. List of callbacks to apply during training. See &lt;a href=&quot;../callbacks&quot;&gt;&lt;code&gt;tf.keras.callbacks&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bca520c7e278e14802103b57f83410c289ee074" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;callbacks&lt;/code&gt;&lt;/b&gt;: List of &lt;a href=&quot;callbacks/callback&quot;&gt;&lt;code&gt;keras.callbacks.Callback&lt;/code&gt;&lt;/a&gt; instances. List of callbacks to apply during evaluation. See &lt;a href=&quot;callbacks&quot;&gt;callbacks&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b76704b9cad7816789530189c31ff5659092096" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;callbacks&lt;/code&gt;&lt;/b&gt;: List of &lt;a href=&quot;callbacks/callback&quot;&gt;&lt;code&gt;keras.callbacks.Callback&lt;/code&gt;&lt;/a&gt; instances. List of callbacks to apply during prediction. See &lt;a href=&quot;callbacks&quot;&gt;callbacks&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cabefbbb7a6c721a77f1700bb9a0c22dca723af" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;callbacks&lt;/code&gt;&lt;/b&gt;: List of &lt;a href=&quot;callbacks/callback&quot;&gt;&lt;code&gt;keras.callbacks.Callback&lt;/code&gt;&lt;/a&gt; instances. List of callbacks to apply during training. See &lt;a href=&quot;callbacks&quot;&gt;&lt;code&gt;tf.keras.callbacks&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2456d2919729042b2640006cb1b7c99ad0d07980" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;cancel_op&lt;/code&gt;&lt;/b&gt;: (Optional.) Cancel op for the queue</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57ebcf4a520c72b8c6807ec4865aa75b0c5f4a0d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;cancel_op&lt;/code&gt;&lt;/b&gt;: Cancel op for the queue (optional).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d95cd6aa05a5f1929c99f048cdb7cbceb1eae459" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;cancel_op&lt;/code&gt;&lt;/b&gt;: Op to close the queue and cancel pending enqueue ops.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33ceda13d981b317fb223089bb6b4aacb1ed7d70" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;cancel_pending_enqueues&lt;/code&gt;&lt;/b&gt;: (Optional.) A boolean, defaulting to &lt;code&gt;False&lt;/code&gt; (described above).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dcd0fda5638e2075ac6e7907a41b7ab129eef4f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;capacity&lt;/code&gt;&lt;/b&gt;: (Optional.) The capacity of the queue to be used for buffering the input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6a5f85f818c09ba6ae40e122d42cfd2ac9d7d2b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;capacity&lt;/code&gt;&lt;/b&gt;: An integer. Sets the queue capacity.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4de5df30be3658c51061f1a8bee06a1a6203722" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;capacity&lt;/code&gt;&lt;/b&gt;: An integer. The maximum number of elements in the queue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85aba29ae106d29907225b300df4644e95461588" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;capacity&lt;/code&gt;&lt;/b&gt;: An integer. The upper bound on the number of elements that may be stored in this queue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86082fa9ecd038cbb4df2477c67e51d456607f2a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;case_sensitive&lt;/code&gt;&lt;/b&gt;: Whether or not the enum is to be case-sensitive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9d97ae9adf79ad6f60b74c0baf87ec136425de9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;case_sensitive&lt;/code&gt;&lt;/b&gt;: bool, whether or not the enum is to be case-sensitive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="700b8e81c7a11a27da86165862b5253c4dbf0e9a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;categorical_column&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;CategoricalColumn&lt;/code&gt; created by &lt;code&gt;categorical_column_with_*&lt;/code&gt; functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52862626ee5a918f9e4314935f699af8b1ff7f4a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;categorical_column&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;CategoricalColumn&lt;/code&gt; created by a &lt;code&gt;categorical_column_with_*&lt;/code&gt; function. This column produces the sparse IDs that are inputs to the embedding lookup.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d32a60b12d8654914844bef6672f3b868b4b134" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;categorical_column&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;CategoricalColumn&lt;/code&gt; which is created by &lt;code&gt;categorical_column_with_*&lt;/code&gt; or &lt;code&gt;crossed_column&lt;/code&gt; functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b877501f4746fb8ab82c200e95440fce3bd7554c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;categorical_column&lt;/code&gt;&lt;/b&gt;: A categorical column returned from &lt;code&gt;categorical_column_with_identity&lt;/code&gt;, &lt;code&gt;weighted_categorical_column&lt;/code&gt;, &lt;code&gt;categorical_column_with_vocabulary_file&lt;/code&gt;, &lt;code&gt;categorical_column_with_vocabulary_list&lt;/code&gt;, &lt;code&gt;sequence_categorical_column_with_identity&lt;/code&gt;, &lt;code&gt;sequence_categorical_column_with_vocabulary_file&lt;/code&gt;, &lt;code&gt;sequence_categorical_column_with_vocabulary_list&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c66d5cb0c2cbeda03b4023a91e00b5eead01390" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;categorical_columns&lt;/code&gt;&lt;/b&gt;: A list of categorical columns returned from &lt;code&gt;categorical_column_with_identity&lt;/code&gt;, &lt;code&gt;weighted_categorical_column&lt;/code&gt;, &lt;code&gt;categorical_column_with_vocabulary_file&lt;/code&gt;, &lt;code&gt;categorical_column_with_vocabulary_list&lt;/code&gt;, &lt;code&gt;sequence_categorical_column_with_identity&lt;/code&gt;, &lt;code&gt;sequence_categorical_column_with_vocabulary_file&lt;/code&gt;, &lt;code&gt;sequence_categorical_column_with_vocabulary_list&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7dc9c3d0b2c04384a26c2cdc010da6bbc834734" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;categorical_columns&lt;/code&gt;&lt;/b&gt;: List of categorical columns created by a &lt;code&gt;categorical_column_with_*&lt;/code&gt; function. These columns produce the sparse IDs that are inputs to the embedding lookup. All columns must be of the same type and have the same arguments except &lt;code&gt;key&lt;/code&gt;. E.g. they can be categorical_column_with_vocabulary_file with the same vocabulary_file. Some or all columns could also be weighted_categorical_column.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="822260a27d3636bda23c228a827567c860f7055a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;causal&lt;/code&gt;&lt;/b&gt;: Boolean. Set to &lt;code&gt;True&lt;/code&gt; for decoder self-attention. Adds a mask such that position &lt;code&gt;i&lt;/code&gt; cannot attend to positions &lt;code&gt;j &amp;gt; i&lt;/code&gt;. This prevents the flow of information from the future towards the past.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0586ba004bf2425a7fe63e704ba92c98e9389901" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;cdf&lt;/code&gt;&lt;/b&gt;: a &lt;code&gt;Tensor&lt;/code&gt; of shape &lt;code&gt;sample_shape(x) + self.batch_shape&lt;/code&gt; with values of type &lt;code&gt;self.dtype&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c467e5041e53c87001c93d43bf9a563c5237c89f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;cell&lt;/code&gt;&lt;/b&gt;: A RNN cell instance or a list of RNN cell instances. A RNN cell is a class that has:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="371074e6b1be226f0c2b43bc1f04fd1665b24abd" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;cell&lt;/code&gt;&lt;/b&gt;: An instance of &lt;code&gt;RNNCell&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b7e28f1d83e6a2d6818936cb14e6eda857026f3" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;cell&lt;/code&gt;&lt;/b&gt;: An instance of RNNCell.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f19826a1e3e015c080b245c4217649affd7a3d2" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;cell&lt;/code&gt;&lt;/b&gt;: an RNNCell, a projection to output_size is added to it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b75da09617316cc8d9e229f444d2dad53e09785" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;cell_bw&lt;/code&gt;&lt;/b&gt;: An instance of RNNCell, to be used for backward direction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="047d8cb93c84fe61ae9ff3f64609bd84dee6c9be" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;cell_clip&lt;/code&gt;&lt;/b&gt;: (optional) A float value, if provided the cell state is clipped by this value prior to the cell output activation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86ea6b296b764c617599011916b0cb7d1aa3e3ab" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;cell_fw&lt;/code&gt;&lt;/b&gt;: An instance of RNNCell, to be used for forward direction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e7fce4792dcfcbdfe2579420a3a8082240e4b0f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;cell_type&lt;/code&gt;&lt;/b&gt;: A class producing a RNN cell or a string specifying the cell type. Supported strings are: &lt;code&gt;'simple_rnn'&lt;/code&gt;, &lt;code&gt;'lstm'&lt;/code&gt;, and &lt;code&gt;'gru'&lt;/code&gt;. If set, &lt;code&gt;units&lt;/code&gt; must also be specified and &lt;code&gt;rnn_cell_fn&lt;/code&gt; must be &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb8b0c7d0279b2e055a543104be1c525d0c71796" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;cells&lt;/code&gt;&lt;/b&gt;: List of RNN cell instances.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5292b6a6b2cd9f1546b16d77624a90e5ad9b44bf" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;cells&lt;/code&gt;&lt;/b&gt;: list of RNNCells that will be composed in this order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0e7f2bf8b5edae2038e97617ff9eac94f33e0d8" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;center&lt;/code&gt;&lt;/b&gt;: If True, add offset of &lt;code&gt;beta&lt;/code&gt; to normalized tensor. If False, &lt;code&gt;beta&lt;/code&gt; is ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="349e3e13afa02f122425b12a5a49121b725e75c9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;center_bias&lt;/code&gt;&lt;/b&gt;: Whether bias centering needs to occur. Bias centering refers to the first node in the very first tree returning the prediction that is aligned with the original labels distribution. For example, for regression problems, the first node will return the mean of the labels. For binary classification problems, it will return a logit for a prior probability of label 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d052bb3ae73d1f69eb26dcc4b4f9686213506677" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;centered&lt;/code&gt;&lt;/b&gt;: An optional &lt;code&gt;bool&lt;/code&gt;. Defaults to &lt;code&gt;True&lt;/code&gt;. indicates if the offset coordinates are centered relative to the image, in which case the (0, 0) offset is relative to the center of the input images. If false, the (0,0) offset corresponds to the upper left corner of the input images.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34e27489ea0b63466079ae9361a3752c5ba95820" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;centered&lt;/code&gt;&lt;/b&gt;: If True, gradients are normalized by the estimated variance of the gradient; if False, by the uncentered second moment. Setting this to True may help with training, but is slightly more expensive in terms of computation and memory. Defaults to False.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c456c22815b476f9e7686548c796cd1b1dc45c1c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;central_fraction&lt;/code&gt;&lt;/b&gt;: float (0, 1], fraction of size to crop Usage Example: &lt;code&gt;python &amp;gt;&amp;gt; import tensorflow as tf &amp;gt;&amp;gt; x = tf.random.normal(shape=(256, 256, 3)) &amp;gt;&amp;gt; tf.image.central_crop(x, 0.5)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="763b0a85365d45689e7a485ed25a2bd6fd3410e9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;change_concat_input_ranges&lt;/code&gt;&lt;/b&gt;: Boolean to change behavior of min/max ranges for inputs and outputs of the concat operator for quantized models. Changes the ranges of concat operator overlap when true. (default False)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="765ffd23889ba077601e2f44c57ba43d1b440581" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;channel_shift_range&lt;/code&gt;&lt;/b&gt;: Float. Range for random channel shifts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c511123a3e2c7a25ccf77f4a1addb38b15b55bc6" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;channels&lt;/code&gt;&lt;/b&gt;: An optional &lt;code&gt;int&lt;/code&gt;. Defaults to &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b8bee37476982ab84e79956a31fee4ddf651817" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;channels&lt;/code&gt;&lt;/b&gt;: An optional &lt;code&gt;int&lt;/code&gt;. Defaults to &lt;code&gt;0&lt;/code&gt;. Number of color channels for the decoded image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79dbe90bc56a5c73a0d91dd7f69e737d1187fd7f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;check_types&lt;/code&gt;&lt;/b&gt;: if &lt;code&gt;True&lt;/code&gt; (default) types of sequences are checked as well, including the keys of dictionaries. If set to &lt;code&gt;False&lt;/code&gt;, for example a list and a tuple of objects will look the same if they have the same size. Note that namedtuples with identical name and fields are always considered to have the same shallow structure. Two types will also be considered the same if they are both list subtypes (which allows &quot;list&quot; and &quot;_ListWrapper&quot; from trackable dependency tracking to compare equal).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1cf0149786e52e2ab8796bf88d8cbb2cab3dfe4" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;checkpoint&lt;/code&gt;&lt;/b&gt;: The &lt;a href=&quot;checkpoint&quot;&gt;&lt;code&gt;tf.train.Checkpoint&lt;/code&gt;&lt;/a&gt; instance to save and manage checkpoints for.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ceeaaa1d23c81e50924db69283611346524835e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;checkpoint&lt;/code&gt;&lt;/b&gt;: if True, the contents of the table are saved to and restored from checkpoints. If &lt;code&gt;shared_name&lt;/code&gt; is empty for a checkpointed table, it is shared using the table node name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fbf116e0f6d33b253209bdcbc88c8a895f2a69b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;checkpoint_basename&lt;/code&gt;&lt;/b&gt;: &lt;code&gt;str&lt;/code&gt;, base name for the checkpoint files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acc8a6bbfd75a2037acd4bf437a3e5a6e4f32a9f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;checkpoint_basename&lt;/code&gt;&lt;/b&gt;: The basename for checkpoint saving.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="caa5af11a903188960a8a18a5012eaa960a8b4bf" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;checkpoint_dir&lt;/code&gt;&lt;/b&gt;: &lt;code&gt;str&lt;/code&gt;, base directory for the checkpoint files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3aeb38bf45036fb3a93f32667ef0474157bfa04b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;checkpoint_dir&lt;/code&gt;&lt;/b&gt;: A string. Optional path to a directory where to restore variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd622e2eb49a4074e67613fe4f7dc970859f34eb" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;checkpoint_dir&lt;/code&gt;&lt;/b&gt;: Directory where the variables were saved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="868361a203944d6ddc4166ca14bde583f2cbe8a5" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;checkpoint_dir&lt;/code&gt;&lt;/b&gt;: Path to the checkpoint files. The latest checkpoint in the dir will be used to restore.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c68e39c4092008e314f5345142eaa2fa5a8c1b7" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;checkpoint_dir&lt;/code&gt;&lt;/b&gt;: The directory in which checkpoints are saved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f20a962992db5655c579b86eaa5f59f6c9676b65" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;checkpoint_dir&lt;/code&gt;&lt;/b&gt;: The directory of checkpoints.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="765b3ac418fa68a3781487f4e6c84f34187142ac" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;checkpoint_filename_with_path&lt;/code&gt;&lt;/b&gt;: A string. Optional path to a checkpoint file from which to restore variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bdd759bb1cb9358b900b8ee3372c77e0542fa75" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;checkpoint_filename_with_path&lt;/code&gt;&lt;/b&gt;: Full file name path to the checkpoint file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="798a1700063266b2ac9ed9b508c313392f482f84" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;checkpoint_format&lt;/code&gt;&lt;/b&gt;: Sets the format of the checkpoint saved by the estimator when training. May be &lt;code&gt;saver&lt;/code&gt; or &lt;code&gt;checkpoint&lt;/code&gt;, depending on whether to save checkpoints from &lt;a href=&quot;../../compat/v1/train/saver&quot;&gt;&lt;code&gt;tf.compat.v1.train.Saver&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../../train/checkpoint&quot;&gt;&lt;code&gt;tf.train.Checkpoint&lt;/code&gt;&lt;/a&gt;. The default is &lt;code&gt;checkpoint&lt;/code&gt;. Estimators use name-based &lt;code&gt;tf.train.Saver&lt;/code&gt; checkpoints, while Keras models use object-based checkpoints from &lt;a href=&quot;../../train/checkpoint&quot;&gt;&lt;code&gt;tf.train.Checkpoint&lt;/code&gt;&lt;/a&gt;. Currently, saving object-based checkpoints from &lt;code&gt;model_to_estimator&lt;/code&gt; is only supported by Functional and Sequential models.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="373faf7bea09c9f550ff0a06fd6677af0007a943" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;checkpoint_format&lt;/code&gt;&lt;/b&gt;: Sets the format of the checkpoint saved by the estimator when training. May be &lt;code&gt;saver&lt;/code&gt; or &lt;code&gt;checkpoint&lt;/code&gt;, depending on whether to save checkpoints from &lt;code&gt;tf.train.Saver&lt;/code&gt; or &lt;a href=&quot;../../../../train/checkpoint&quot;&gt;&lt;code&gt;tf.train.Checkpoint&lt;/code&gt;&lt;/a&gt;. This argument currently defaults to &lt;code&gt;saver&lt;/code&gt;. When 2.0 is released, the default will be &lt;code&gt;checkpoint&lt;/code&gt;. Estimators use name-based &lt;code&gt;tf.train.Saver&lt;/code&gt; checkpoints, while Keras models use object-based checkpoints from &lt;a href=&quot;../../../../train/checkpoint&quot;&gt;&lt;code&gt;tf.train.Checkpoint&lt;/code&gt;&lt;/a&gt;. Currently, saving object-based checkpoints from &lt;code&gt;model_to_estimator&lt;/code&gt; is only supported by Functional and Sequential models.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="531d9b51b8e01139bd31107cc1f830de81bb23c2" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;checkpoint_format_version&lt;/code&gt;&lt;/b&gt;: &lt;code&gt;SaverDef.CheckpointFormatVersion&lt;/code&gt;, defaults to &lt;code&gt;SaverDef.V2&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fc60786fdb04ec593562526b17dd65e913718df" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;checkpoint_name&lt;/code&gt;&lt;/b&gt;: Custom name for the checkpoint file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cfc1cd277678200fc2a7937a8ac32e7226eeaf6" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;checkpoint_number&lt;/code&gt;&lt;/b&gt;: An optional integer, or an integer-dtype &lt;code&gt;Variable&lt;/code&gt; or &lt;code&gt;Tensor&lt;/code&gt;, used to number the checkpoint. If &lt;code&gt;None&lt;/code&gt; (default), checkpoints are numbered using &lt;code&gt;checkpoint.save_counter&lt;/code&gt;. Even if &lt;code&gt;checkpoint_number&lt;/code&gt; is provided, &lt;code&gt;save_counter&lt;/code&gt; is still incremented. A user-provided &lt;code&gt;checkpoint_number&lt;/code&gt; is not incremented even if it is a &lt;code&gt;Variable&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75ae99750739f4106403b7f78401ba56bc3d8d48" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;checkpoint_path&lt;/code&gt;&lt;/b&gt;: Path of a specific checkpoint to evaluate. If &lt;code&gt;None&lt;/code&gt;, the latest checkpoint in &lt;code&gt;model_dir&lt;/code&gt; is used. If there are no checkpoints in &lt;code&gt;model_dir&lt;/code&gt;, evaluation is run with newly initialized &lt;code&gt;Variables&lt;/code&gt; instead of ones restored from checkpoint.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f62084c17f8bfd6a570afcdfbee77ff1a902bbc9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;checkpoint_path&lt;/code&gt;&lt;/b&gt;: Path of a specific checkpoint to predict. If &lt;code&gt;None&lt;/code&gt;, the latest checkpoint in &lt;code&gt;model_dir&lt;/code&gt; is used. If there are no checkpoints in &lt;code&gt;model_dir&lt;/code&gt;, prediction is run with newly initialized &lt;code&gt;Variables&lt;/code&gt; instead of ones restored from checkpoint.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bec1f60bf70de335240f2022a836a12a0958e14d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;checkpoint_path&lt;/code&gt;&lt;/b&gt;: The checkpoint path to export.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9180e8d2e6a40dc5f77d15029f57635bf9bdf3d6" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;checkpoint_path&lt;/code&gt;&lt;/b&gt;: The checkpoint path to export. If &lt;code&gt;None&lt;/code&gt; (the default), the most recent checkpoint found within the model directory is chosen.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="609974c8f9d9e7dbfc15bbfd3d208e6cc996716a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;checkpoint_paths&lt;/code&gt;&lt;/b&gt;: a list of checkpoint paths.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d76d7bd3e83c4e77e8da1e9ecfe2ddccbb82f06" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;checkpoint_prefix&lt;/code&gt;&lt;/b&gt;: The prefix of a V1 or V2 checkpoint. Typically the result of &lt;code&gt;Saver.save()&lt;/code&gt; or that of &lt;a href=&quot;../../../train/latest_checkpoint&quot;&gt;&lt;code&gt;tf.train.latest_checkpoint()&lt;/code&gt;&lt;/a&gt;, regardless of sharded/non-sharded or V1/V2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68c69e2d5d8849fe069705ef3c42f16b01522a6f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;checkpoint_prefix&lt;/code&gt;&lt;/b&gt;: the prefix of a V1 or V2 checkpoint, with V2 taking priority. Typically the result of &lt;code&gt;Saver.save()&lt;/code&gt; or that of &lt;a href=&quot;../../../train/latest_checkpoint&quot;&gt;&lt;code&gt;tf.train.latest_checkpoint()&lt;/code&gt;&lt;/a&gt;, regardless of sharded/non-sharded or V1/V2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d42a4e1e1cf0b12900b4903a4182c9b7e981d29b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;checkpoint_prefixes&lt;/code&gt;&lt;/b&gt;: a list of checkpoint paths, typically the results of &lt;code&gt;Saver.save()&lt;/code&gt; or those of &lt;a href=&quot;../../../train/latest_checkpoint&quot;&gt;&lt;code&gt;tf.train.latest_checkpoint()&lt;/code&gt;&lt;/a&gt;, regardless of sharded/non-sharded or V1/V2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a52d99d857190072d0a45c47bc52543e438a378" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;checkpoint_v2&lt;/code&gt;&lt;/b&gt;: boolean determining whether to ignore randomized attribute values that appear in V2 checkpoints.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15c7ed2e8e1375ae22e56f8484db97c857fe2014" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;chief_only_hooks&lt;/code&gt;&lt;/b&gt;: list of &lt;code&gt;SessionRunHook&lt;/code&gt; objects. Activate these hooks if &lt;code&gt;is_chief==True&lt;/code&gt;, ignore otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b71dc9518633bafa1560faff2b693b78d2f1662" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;child_name&lt;/code&gt;&lt;/b&gt;: The name of the attribute to change.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d714b364fe2f24464748bdfb35a9e15ec5c88d34" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;children_inputs_mappings&lt;/code&gt;&lt;/b&gt;: Children OpHint inputs/outputs mapping. children_inputs_mappings should like below: &quot;parent_first_child_input&quot;: [{&quot;parent_input_index&quot;: num, &quot;child_input_index&quot;: num}, ...] &quot;parent_last_child_output&quot;: [{&quot;parent_output_index&quot;: num, &quot;child_output_index&quot;: num}, ...] &quot;internal_children_input_output&quot;: [{&quot;child_input_index&quot;: num, &quot;child_output_index&quot;: num}, ...]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f93638f44840606ddaf75a9ad3903dccdd12f1f4" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;children_inputs_mappings&lt;/code&gt;&lt;/b&gt;: Inputs/Outputs mapping for children hints.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e36fc69533d63a13bbf7faa72fa1201fadf582be" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;choice_dataset&lt;/code&gt;&lt;/b&gt;: A &lt;a href=&quot;../../../../data/dataset&quot;&gt;&lt;code&gt;tf.data.Dataset&lt;/code&gt;&lt;/a&gt; of scalar &lt;a href=&quot;../../../../../tf#int64&quot;&gt;&lt;code&gt;tf.int64&lt;/code&gt;&lt;/a&gt; tensors between &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;len(datasets) - 1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d8cd2cfa1ac3bdc690624ec67e7d604b4e59634" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;choice_dataset&lt;/code&gt;&lt;/b&gt;: A &lt;a href=&quot;../dataset&quot;&gt;&lt;code&gt;tf.data.Dataset&lt;/code&gt;&lt;/a&gt; of scalar &lt;a href=&quot;../../../tf#int64&quot;&gt;&lt;code&gt;tf.int64&lt;/code&gt;&lt;/a&gt; tensors between &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;len(datasets) - 1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7a440b302d1b49afe25fc2e3be0545621cee14b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;chol&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt;. Must be &lt;code&gt;float32&lt;/code&gt; or &lt;code&gt;float64&lt;/code&gt;, shape is &lt;code&gt;[..., M, M]&lt;/code&gt;. Cholesky factorization of &lt;code&gt;A&lt;/code&gt;, e.g. &lt;code&gt;chol = tf.linalg.cholesky(A)&lt;/code&gt;. For that reason, only the lower triangular parts (including the diagonal) of the last two dimensions of &lt;code&gt;chol&lt;/code&gt; are used. The strictly upper part is assumed to be zero and not accessed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1edb8a1656da81cd5dd2e3ed1f502f9e13ba7ec" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;chroma_downsampling&lt;/code&gt;&lt;/b&gt;: An optional &lt;code&gt;bool&lt;/code&gt;. Defaults to &lt;code&gt;True&lt;/code&gt;. See http://en.wikipedia.org/wiki/Chroma_subsampling.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17a710ba976e9246753ab69a973080bdb2e7b8d2" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;circular_buffer_size&lt;/code&gt;&lt;/b&gt;: Size of the circular buffers for execution events. These circular buffers are designed to reduce the overhead of debugging dumping. They hold the most recent debug events concerning eager execution of ops and &lt;a href=&quot;../../function&quot;&gt;&lt;code&gt;tf.function&lt;/code&gt;&lt;/a&gt;s and traces of tensor values computed inside &lt;a href=&quot;../../function&quot;&gt;&lt;code&gt;tf.function&lt;/code&gt;&lt;/a&gt;s. They are written to the file system only when the proper flushing method is called (see description of return values below). Expected to be an integer. If &amp;lt;= 0, the circular-buffer behavior will be disabled, i.e., the execution debug events will be written to the file writers in the same way as non-execution events such as op creations and source-file snapshots.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0447dcbf75c09695eb901c67f7f1e6c464e9bebe" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ckpt_dir_or_file&lt;/code&gt;&lt;/b&gt;: Directory with checkpoints file or path to checkpoint file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf1e9df5dd34874c9ef0f4ee13ac68fe8e266e8c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ckpt_dir_or_file&lt;/code&gt;&lt;/b&gt;: Directory with checkpoints file or path to checkpoint.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f60bdc35fd644e911c1412f46b9762f4b78bc6e9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ckpt_to_initialize_from&lt;/code&gt;&lt;/b&gt;: [Required] A string specifying the directory with checkpoint file(s) or path to checkpoint from which to warm-start the model parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f844f69f85c9bbee58de68c2586f0af075dafb3c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ckpt_to_load_from&lt;/code&gt;&lt;/b&gt;: String representing checkpoint name/pattern from which to restore column weights. Required if &lt;code&gt;tensor_name_in_ckpt&lt;/code&gt; is not &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66c6ef6fb818a22a1c08318bff3e13df54fc398d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;class_func&lt;/code&gt;&lt;/b&gt;: A function mapping an element of the input dataset to a scalar &lt;a href=&quot;../../../tf#int32&quot;&gt;&lt;code&gt;tf.int32&lt;/code&gt;&lt;/a&gt; tensor. Values should be in &lt;code&gt;[0, num_classes)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a41b08b4b50ae5d3237e52d8f76d77386a461a4b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;class_id&lt;/code&gt;&lt;/b&gt;: (Optional) Integer class ID for which we want binary metrics. This must be in the half-open interval &lt;code&gt;[0, num_classes)&lt;/code&gt;, where &lt;code&gt;num_classes&lt;/code&gt; is the last dimension of predictions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ecc01ae67711da244aafbb7bb479b78fdb8a31e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;class_id&lt;/code&gt;&lt;/b&gt;: Integer class ID for which we want binary metrics. This should be in range [0, num_classes), where num_classes is the last dimension of &lt;code&gt;predictions&lt;/code&gt;. If class_id is outside this range, the method returns NAN.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c197fcd67dab0755dba94e0364e43b723f8d3086" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;class_id&lt;/code&gt;&lt;/b&gt;: Integer class ID for which we want binary metrics. This should be in range [0, num_classes], where num_classes is the last dimension of &lt;code&gt;predictions&lt;/code&gt;. If &lt;code&gt;class_id&lt;/code&gt; is outside this range, the method returns NAN.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28e2f904fc3fd59a542eda737d02650be48df346" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;class_mode&lt;/code&gt;&lt;/b&gt;: Mode for yielding the targets: &lt;code&gt;&quot;binary&quot;&lt;/code&gt;: binary targets (if there are only two classes), &lt;code&gt;&quot;categorical&quot;&lt;/code&gt;: categorical targets, &lt;code&gt;&quot;sparse&quot;&lt;/code&gt;: integer targets, &lt;code&gt;&quot;input&quot;&lt;/code&gt;: targets are images identical to input images (mainly used to work with autoencoders), &lt;code&gt;None&lt;/code&gt;: no targets get yielded (only input images are yielded).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2271125beed449d20f4750a76069d9f0cf5aabed" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;class_weight&lt;/code&gt;&lt;/b&gt;: Optional dictionary mapping class indices (integers) to a weight (float) to apply to the model's loss for the samples from this class during training. This can be useful to tell the model to &quot;pay more attention&quot; to samples from an under-represented class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="794dffd6832b0303b5cc59e5708f761bd3a087b1" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;class_weight&lt;/code&gt;&lt;/b&gt;: Optional dictionary mapping class indices (integers) to a weight (float) value, used for weighting the loss function (during training only). This can be useful to tell the model to &quot;pay more attention&quot; to samples from an under-represented class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3a507b4dbb506ebdd6cb815d35e3603eb95d7de" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;classes&lt;/code&gt;&lt;/b&gt;: A string &lt;code&gt;Tensor&lt;/code&gt; giving predicted class labels. May be &lt;code&gt;None&lt;/code&gt;, but only if &lt;code&gt;scores&lt;/code&gt; is set. Interpretation varies-- see class doc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd7303f2849995818a3a75d537a63890105ed8c6" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;classes&lt;/code&gt;&lt;/b&gt;: A string &lt;code&gt;Tensor&lt;/code&gt;. Note that the ClassificationResponse message requires that class labels are strings, not integers or anything else.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ec6cce58d9f5500f14968318506b4edd2fd5ac6" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;classes&lt;/code&gt;&lt;/b&gt;: Optional list of strings, names of subdirectories containing images from each class (e.g. &lt;code&gt;[&quot;dogs&quot;, &quot;cats&quot;]&lt;/code&gt;). It will be computed automatically if not set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a53ba11af9b383321e6bd5de2ab309f136473383" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;classes_for_class_based_metrics&lt;/code&gt;&lt;/b&gt;: List of integer class IDs or string class names for which per-class metrics are evaluated. If integers, all must be in the range &lt;code&gt;[0, n_classes - 1]&lt;/code&gt;. If strings, all must be in &lt;code&gt;label_vocabulary&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5c912cdaa84c2837927dc0fb916b27ea980e66f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;clean_stop_exception_types&lt;/code&gt;&lt;/b&gt;: Optional tuple of Exception types that should cause a clean stop of the coordinator. If an exception of one of these types is reported to &lt;code&gt;request_stop(ex)&lt;/code&gt; the coordinator will behave as if &lt;code&gt;request_stop(None)&lt;/code&gt; was called. Defaults to &lt;code&gt;(tf.errors.OutOfRangeError,)&lt;/code&gt; which is used by input queues to signal the end of input. When feeding training data from a Python iterator it is common to add &lt;code&gt;StopIteration&lt;/code&gt; to this list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7875ceef96d5db1dafe4c8e7647c78def623754f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;cleanup&lt;/code&gt;&lt;/b&gt;: Optional cleanup policy on when/if to remove the directory (and all its contents) at the end of the test. If None, then uses &lt;code&gt;self.tempfile_cleanup&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fae184d04806343d5c38abffd42a88fbd2464dfe" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;clear_after_read&lt;/code&gt;&lt;/b&gt;: Boolean (optional, default: True). If True, clear TensorArray values after reading them. This disables read-many semantics, but allows early release of memory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a96e4883802df4dab4eb4ead23ed1e97146fc9b3" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;clear_devices&lt;/code&gt;&lt;/b&gt;: Set to true if the device info on the default graph should be cleared.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f2348509fdec33d1e064c40efea16557435af59" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;clear_devices&lt;/code&gt;&lt;/b&gt;: Whether or not to clear the device field for an &lt;code&gt;Operation&lt;/code&gt; or &lt;code&gt;Tensor&lt;/code&gt; during export.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="695c0fc90be6c59aaecf91e9d6900960416c1a93" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;clear_devices&lt;/code&gt;&lt;/b&gt;: Whether or not to clear the device field for an &lt;code&gt;Operation&lt;/code&gt; or &lt;code&gt;Tensor&lt;/code&gt; during import.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27b15d73c54a5ecc36d7296eced6fb152a477b11" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;clear_extraneous_savers&lt;/code&gt;&lt;/b&gt;: Remove any Saver-related information from the graph (both Save/Restore ops and SaverDefs) that are not associated with the provided SaverDef.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f0e8d2fd266e7de08567f76d5c90ef2cc127fe3" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;clear_extraneous_savers&lt;/code&gt;&lt;/b&gt;: Remove any Saver-related information from the graph (both Save/Restore ops and SaverDefs) that are not associated with this Saver.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8082517b9c0ade238dbfec41a5e4e9737bb3ea5b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;clip_boxes&lt;/code&gt;&lt;/b&gt;: If true, the coordinates of output nmsed boxes will be clipped to [0, 1]. If false, output the box coordinates as it is. Defaults to true.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb2d3a0d4481d84c9106f8b97136df69e4004eb4" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;clip_norm&lt;/code&gt;&lt;/b&gt;: A 0-D (scalar) &lt;code&gt;Tensor&lt;/code&gt; &amp;gt; 0. A maximum clipping value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80d25c96168868a5e5e3c356aaf070d35393e078" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;clip_norm&lt;/code&gt;&lt;/b&gt;: A 0-D (scalar) &lt;code&gt;Tensor&lt;/code&gt; &amp;gt; 0. The clipping ratio.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2aaa537aafc0831be9762c9be517596e70b9dc3f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;clip_value_max&lt;/code&gt;&lt;/b&gt;: A 0-D (scalar) &lt;code&gt;Tensor&lt;/code&gt;, or a &lt;code&gt;Tensor&lt;/code&gt; with the same shape as &lt;code&gt;t&lt;/code&gt;. The maximum value to clip by.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d95919c60aa4ce21093558fd5124cfaab61243a9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;clip_value_min&lt;/code&gt;&lt;/b&gt;: A 0-D (scalar) &lt;code&gt;Tensor&lt;/code&gt;, or a &lt;code&gt;Tensor&lt;/code&gt; with the same shape as &lt;code&gt;t&lt;/code&gt;. The minimum value to clip by.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4463e4051c849d7a0ded8b1477030b152303961" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;clip_weight_max&lt;/code&gt;&lt;/b&gt;: the maximum value to clip by; None means +infinity.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ec6aebc89851edb3f8fe0d754642c023d53cd1f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;clip_weight_min&lt;/code&gt;&lt;/b&gt;: the minimum value to clip by; None means -infinity.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89f61b03849783b1151dc282b254f0555a8f7ae8" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;clipping_limit&lt;/code&gt;&lt;/b&gt;: (Optional) Clipping limit (absolute value).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="075b9d084c5c632996ce705718f64091105b779e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;clone_function&lt;/code&gt;&lt;/b&gt;: Callable to be used to clone each layer in the target model (except &lt;code&gt;InputLayer&lt;/code&gt; instances). It takes as argument the layer instance to be cloned, and returns the corresponding layer instance to be used in the model copy. If unspecified, this callable defaults to the following serialization/deserialization function: &lt;code&gt;lambda layer: layer.__class__.from_config(layer.get_config())&lt;/code&gt;. By passing a custom callable, you can customize your copy of the model, e.g. by wrapping certain layers of interest (you might want to replace all &lt;code&gt;LSTM&lt;/code&gt; instances with equivalent &lt;code&gt;Bidirectional(LSTM(...))&lt;/code&gt; instances, for example).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05b76b4d2520eddb9fb6c4bb09b0af9517b94f76" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;close_fds&lt;/code&gt;&lt;/b&gt;: Whether or not to close all open fd's in the child after forking.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="913bd7ad22e0bd2da1c485352e1f9bee81e5bc47" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;close_op&lt;/code&gt;&lt;/b&gt;: Op to close the queue. Pending enqueue ops are preserved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0512939fc565c6a403850886fad273de075ddda2" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;close_summary_writer&lt;/code&gt;&lt;/b&gt;: Whether to close the &lt;code&gt;summary_writer&lt;/code&gt;. Defaults to &lt;code&gt;True&lt;/code&gt; if the summary writer was created by the supervisor, &lt;code&gt;False&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8327cb9d8d7a1a22564837823902638df6b623fe" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;close_summary_writer&lt;/code&gt;&lt;/b&gt;: Whether to close the summary writer when closing the session. Defaults to True.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdd90aedddbb843ddd98fb01563dde49f97a46bb" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;cluster&lt;/code&gt;&lt;/b&gt;: &lt;code&gt;ClusterDef&lt;/code&gt; proto or &lt;code&gt;ClusterSpec&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aba680ed5f12e58340a72ec62caacc52ad04dc6d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;cluster&lt;/code&gt;&lt;/b&gt;: A dictionary mapping one or more job names to (i) a list of network addresses, or (ii) a dictionary mapping integer task indices to network addresses; or a &lt;a href=&quot;clusterdef&quot;&gt;&lt;code&gt;tf.train.ClusterDef&lt;/code&gt;&lt;/a&gt; protocol buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d814e9af9e64e790eac1d43c56317f337ea338d9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;cluster&lt;/code&gt;&lt;/b&gt;: a ClusterResolver</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0565a3d465921a30c51cadb327e5ebc3a16fec8" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;cluster_resolver&lt;/code&gt;&lt;/b&gt;: A tf.distribute.cluster_resolver.TPUClusterResolver, which provides information about the TPU cluster.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="132e5317ecf8bece78feb27c4599be3252d0b495" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;cluster_resolver&lt;/code&gt;&lt;/b&gt;: Optional &lt;a href=&quot;../../../../distribute/cluster_resolver/clusterresolver&quot;&gt;&lt;code&gt;tf.distribute.cluster_resolver.ClusterResolver&lt;/code&gt;&lt;/a&gt; object. Defaults to a &lt;a href=&quot;../../../../distribute/cluster_resolver/tfconfigclusterresolver&quot;&gt;&lt;code&gt;tf.distribute.cluster_resolver.TFConfigClusterResolver&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58dab2ff866fa007cb7444a8a08fd44a7137e937" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;cluster_resolver&lt;/code&gt;&lt;/b&gt;: Optional &lt;a href=&quot;../cluster_resolver/clusterresolver&quot;&gt;&lt;code&gt;tf.distribute.cluster_resolver.ClusterResolver&lt;/code&gt;&lt;/a&gt; object. Defaults to a &lt;a href=&quot;../cluster_resolver/tfconfigclusterresolver&quot;&gt;&lt;code&gt;tf.distribute.cluster_resolver.TFConfigClusterResolver&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb5dec01c5d454338835f5612b2bd2c8cb493fdf" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;cluster_resolver&lt;/code&gt;&lt;/b&gt;: optional &lt;a href=&quot;../cluster_resolver/clusterresolver&quot;&gt;&lt;code&gt;distribute.cluster_resolver.ClusterResolver&lt;/code&gt;&lt;/a&gt; object. The default ClusterResolver that is used is the TFConfigClusterResolver which is instantiated from the TF_CONFIG env var.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af7ef891a087cd0c3a8f1db334268c56ecbd7fc8" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;cluster_spec_or_resolver&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;ClusterSpec&lt;/code&gt; or &lt;code&gt;ClusterResolver&lt;/code&gt; describing the cluster.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e73ab7764f2734a0c98bf0ba69137a4d8ab249d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;cmd&lt;/code&gt;&lt;/b&gt;: string. Either 'op', 'scope', 'graph' or 'code'. 'op' view organizes profile using operation type. (e.g. MatMul) 'scope' view organizes profile using graph node name scope. 'graph' view organizes profile using graph node inputs/outputs. 'code' view organizes profile using Python call stack.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4015802a8634ccf6a0bcdbff4d074bd67d59707a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;coeffs&lt;/code&gt;&lt;/b&gt;: A list of &lt;code&gt;Tensor&lt;/code&gt; representing the coefficients of the polynomial.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d021b9989aed130ef5fac3a8c8e12486bbc5163" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;col&lt;/code&gt;&lt;/b&gt;: Shape &lt;code&gt;[B1,...,Bb, N]&lt;/code&gt;&lt;code&gt;Tensor&lt;/code&gt; with &lt;code&gt;b &amp;gt;= 0&lt;/code&gt;&lt;code&gt;N &amp;gt;= 0&lt;/code&gt;. The first column of the operator. Allowed dtypes: &lt;code&gt;float16&lt;/code&gt;, &lt;code&gt;float32&lt;/code&gt;, &lt;code&gt;float64&lt;/code&gt;, &lt;code&gt;complex64&lt;/code&gt;, &lt;code&gt;complex128&lt;/code&gt;. Note that the first entry of &lt;code&gt;col&lt;/code&gt; is assumed to be the same as the first entry of &lt;code&gt;row&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29eaa2f80aabf64a6fe46089276194a12ea102a9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;collapsed_labels&lt;/code&gt;&lt;/b&gt;: Tensor of shape [batch, max_seq_length] with repeated labels collapsed and padded to max_seq_length, eg: &lt;code&gt;[[A, A, B, B, A], [A, B, C, D, E]] =&amp;gt; [[A, B, A, 0, 0], [A, B, C, D, E]]&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2135771023b9566256af037f88c51a622b2284c6" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;collection&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;GraphKey&lt;/code&gt; specifying the graph collection to add the queue runner to. Defaults to &lt;code&gt;GraphKeys.QUEUE_RUNNERS&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32e4c59aa01ebad58f148c57e7570443e21ae10a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;collection&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;GraphKey&lt;/code&gt; specifying the graph collection to get the queue runners from. Defaults to &lt;code&gt;GraphKeys.QUEUE_RUNNERS&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1277f644f808cb1dbd95db254d0624b65c35e68c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;collection_list&lt;/code&gt;&lt;/b&gt;: List of string keys to collect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6e651c77ca210d233bbdf34a74511f99f21a700" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;collections&lt;/code&gt;&lt;/b&gt;: List of graph collections keys to add the Variable to. Defaults to &lt;code&gt;[GraphKeys.GLOBAL_VARIABLES]&lt;/code&gt; (see &lt;a href=&quot;../../variable&quot;&gt;&lt;code&gt;tf.Variable&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="243cdf8afbf3fe9793bc9dfd055f6ae8f82d3757" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;collections&lt;/code&gt;&lt;/b&gt;: List of graph collections keys to add the Variable to. Defaults to &lt;code&gt;[GraphKeys.LOCAL_VARIABLES]&lt;/code&gt; (see &lt;a href=&quot;../../variable&quot;&gt;&lt;code&gt;tf.Variable&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="790b9dc9af8634ebf145d0b8eedbd11844846b59" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;collections&lt;/code&gt;&lt;/b&gt;: List of graph collections keys to add the variables to. Defaults to &lt;code&gt;[GraphKeys.GLOBAL_VARIABLES]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4d6917db69f6ba67f8e89e281c60e1eca8ac670" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;collections&lt;/code&gt;&lt;/b&gt;: List of graph collections keys. The new variable is added to these collections. Defaults to &lt;code&gt;[GraphKeys.GLOBAL_VARIABLES]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98418854a0ad0cc989ba6501d7bfcd2c4fb23367" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;collections&lt;/code&gt;&lt;/b&gt;: Optional list of graph collections keys. The new summary op is added to these collections. Defaults to &lt;code&gt;[GraphKeys.SUMMARIES]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0af251d3a808200a4c43327f59ca59b3ed4b53f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;collections&lt;/code&gt;&lt;/b&gt;: Optional list of graph collections keys. The new summary op is added to these collections. Defaults to &lt;code&gt;[]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b86cc985db4939dc3ada96435c1a966b4cb4428" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;collections&lt;/code&gt;&lt;/b&gt;: Optional list of ops.GraphKeys. The collections to add the summary to. Defaults to [_ops.GraphKeys.SUMMARIES]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d020e840f3dd4a03e11be7c519dbb7477f194260" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;colocate_gradients_with_ops&lt;/code&gt;&lt;/b&gt;: If True, try colocating gradients with the corresponding op.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16ddc4a183070b71734533d262d3e563de54d409" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;colocate_gradients_with_ops&lt;/code&gt;&lt;/b&gt;: See &lt;code&gt;gradients()&lt;/code&gt; documentation for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="171dda6f8543d72fda72b9a73a56f627505ae767" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;colocate_with&lt;/code&gt;&lt;/b&gt;: The return value of &lt;code&gt;non_slot_devices()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b53a9febcbb4df5573953f08deb6aefcbac26931" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;colocate_with_first_write_call&lt;/code&gt;&lt;/b&gt;: If &lt;code&gt;True&lt;/code&gt;, the TensorArray will be colocated on the same device as the Tensor used on its first write (write operations include &lt;code&gt;write&lt;/code&gt;, &lt;code&gt;unstack&lt;/code&gt;, and &lt;code&gt;split&lt;/code&gt;). If &lt;code&gt;False&lt;/code&gt;, the TensorArray will be placed on the device determined by the device context available during its initialization.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dfcf5940cafab74ee9f49d2f984e6a06c4679c8" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;colocate_with_variable&lt;/code&gt;&lt;/b&gt;: A variable created in this strategy's &lt;code&gt;scope()&lt;/code&gt;. Variables created while in the returned context manager will be on the same set of devices as &lt;code&gt;colocate_with_variable&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e919b0b9ee9c01c4f35c2eca5f4e9fff1ceab4a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;color_mode&lt;/code&gt;&lt;/b&gt;: One of &lt;code&gt;&quot;rgb&quot;&lt;/code&gt;, &lt;code&gt;&quot;rgba&quot;&lt;/code&gt;, &lt;code&gt;&quot;grayscale&quot;&lt;/code&gt;. Color mode to read images.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5b6a3c18b55ff4dfc2c914cb3bc5106a1ef28d7" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;colors&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt; of type &lt;code&gt;float32&lt;/code&gt;. 2-D. A list of RGBA colors to cycle through for the boxes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47b45fd72bea5c0cb7476061f5686774fc854a82" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;cols_to_output_tensors&lt;/code&gt;&lt;/b&gt;: If not &lt;code&gt;None&lt;/code&gt;, must be a dictionary that will be filled with a mapping from '_FeatureColumn' to the associated output &lt;code&gt;Tensor&lt;/code&gt;s.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba1cf63b063530075c3a9e10d6bdd8d98c0399bf" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;cols_to_vars&lt;/code&gt;&lt;/b&gt;: If not &lt;code&gt;None&lt;/code&gt;, must be a dictionary that will be filled with a mapping from &lt;code&gt;_FeatureColumn&lt;/code&gt; to associated list of &lt;code&gt;Variable&lt;/code&gt;s. For example, after the call, we might have cols_to_vars = { _NumericColumn( key='numeric_feature1', shape=(1,): [</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3444019d84ca5173f87a6593a9485cfed28be751" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;cols_to_vars&lt;/code&gt;&lt;/b&gt;: If not &lt;code&gt;None&lt;/code&gt;, must be a dictionary that will be filled with a mapping from &lt;code&gt;_FeatureColumn&lt;/code&gt; to list of &lt;code&gt;Variable&lt;/code&gt;s. For example, after the call, we might have cols_to_vars = {_EmbeddingColumn( categorical_column=_HashedCategoricalColumn( key='sparse_feature', hash_bucket_size=5, dtype=tf.string), dimension=10): [&amp;lt;tf.Variable 'some_variable:0' shape=(5, 10), &amp;lt;tf.Variable 'some_variable:1' shape=(5, 10)]} If a column creates no variables, its value will be an empty list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1f1f4b1395fb999cbfd2fb74b85d2d68625c35d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;column_defaults&lt;/code&gt;&lt;/b&gt;: A optional list of default values for the CSV fields. One item per selected column of the input record. Each item in the list is either a valid CSV dtype (float32, float64, int32, int64, or string), or a &lt;code&gt;Tensor&lt;/code&gt; with one of the aforementioned types. The tensor can either be a scalar default value (if the column is optional), or an empty tensor (if the column is required). If a dtype is provided instead of a tensor, the column is also treated as required. If this list is not provided, tries to infer types based on reading the first num_rows_for_inference rows of files specified, and assumes all columns are optional, defaulting to &lt;code&gt;0&lt;/code&gt; for numeric values and &lt;code&gt;&quot;&quot;&lt;/code&gt; for string values. If both this and &lt;code&gt;select_columns&lt;/code&gt; are specified, these must have the same lengths, and &lt;code&gt;column_defaults&lt;/code&gt; is assumed to be sorted in order of increasing column index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="617d343855c50cbfefb99fac9459b324a0446e0a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;column_names&lt;/code&gt;&lt;/b&gt;: An optional list of strings that corresponds to the CSV columns, in order. One per column of the input record. If this is not provided, infers the column names from the first row of the records. These names will be the keys of the features dict of each dataset element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="039e8ffacc11c20a0fab5a5c970a96682c0c739d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;combiner&lt;/code&gt;&lt;/b&gt;: A string specifying how to combine embedding results for each entry. Currently &quot;mean&quot;, &quot;sqrtn&quot; and &quot;sum&quot; are supported, with &quot;mean&quot; the default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c785a0397016ff8be201730211485b991c9d7d9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;combiner&lt;/code&gt;&lt;/b&gt;: A string specifying how to reduce if there are multiple entries in a single row for a non-sequence column. For more information, see &lt;a href=&quot;../../../../feature_column/embedding_column&quot;&gt;&lt;code&gt;tf.feature_column.embedding_column&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="435de627514e1acdaed2fae60d8b5fb2b562580a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;combiner&lt;/code&gt;&lt;/b&gt;: A string specifying how to reduce if there are multiple entries in a single row. Currently 'mean', 'sqrtn' and 'sum' are supported, with 'mean' the default. 'sqrtn' often achieves good accuracy, in particular with bag-of-words columns. Each of this can be thought as example level normalizations on the column. For more information, see &lt;code&gt;tf.embedding_lookup_sparse&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="542b414e67b8a261b8ca2ff5518961c0290bb71c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;combiner&lt;/code&gt;&lt;/b&gt;: A string specifying the reduction op. Currently &quot;mean&quot;, &quot;sqrtn&quot; and &quot;sum&quot; are supported. &quot;sum&quot; computes the weighted sum of the embedding results for each row. &quot;mean&quot; is the weighted sum divided by the total weight. &quot;sqrtn&quot; is the weighted sum divided by the square root of the sum of the squares of the weights.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd95c9e2b11f313b49965403d70be431a637776c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;comma_compat&lt;/code&gt;&lt;/b&gt;: bool - Whether to support comma as an additional separator. If false then only whitespace is supported. This is intended only for backwards compatibility with flags that used to be comma-separated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdab9b9602bf7b03b05f4763ae20cba99b93567e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;comma_compat&lt;/code&gt;&lt;/b&gt;: bool, whether to support comma as an additional separator. If False then only whitespace is supported. This is intended only for backwards compatibility with flags that used to be comma-separated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b342cf509d0113927778ca9d9aaac30e888ffcd6" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;command&lt;/code&gt;&lt;/b&gt;: List or string representing the command to run.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03fd1bdb114c5408c34aa357f27bde1f6fd8d823" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;communication&lt;/code&gt;&lt;/b&gt;: optional Enum of type &lt;a href=&quot;collectivecommunication&quot;&gt;&lt;code&gt;distribute.experimental.CollectiveCommunication&lt;/code&gt;&lt;/a&gt;. This provides a way for the user to override the choice of collective op communication. Possible values include &lt;code&gt;AUTO&lt;/code&gt;, &lt;code&gt;RING&lt;/code&gt;, and &lt;code&gt;NCCL&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53c9c08e1b078ecd3371557f549da96b299e8fb1" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;compare_fn&lt;/code&gt;&lt;/b&gt;: a function that compares two evaluation results and returns true if current evaluation result is better. Follows the signature:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9563733866160865bb0e4caf5028ec8f027d3c9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;comparison_target&lt;/code&gt;&lt;/b&gt;: The target value of comparison.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a4f688a72826f9c9ae8a557504341d8f261b2a0" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;compilation_failure_closes_chips&lt;/code&gt;&lt;/b&gt;: Set the configuration whether we want to close TPU chips when there is a compilation failure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="080b42f59c9b6c51147a977e7db83ef4269ba964" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;compile&lt;/code&gt;&lt;/b&gt;: Boolean, whether to compile the model after loading.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c6bb8aed2b7a17dd80ed179b9e0ce1d7f16a626" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;compile_ops&lt;/code&gt;&lt;/b&gt;: Whether to enable or disable compilation in the scope. Either a Python bool, or a callable that accepts the parameter &lt;code&gt;node_def&lt;/code&gt; and returns a python bool.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9120e64ce504857312226357bc9bdafc15f226bf" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;compression&lt;/code&gt;&lt;/b&gt;: An optional &lt;code&gt;int&lt;/code&gt;. Defaults to &lt;code&gt;-1&lt;/code&gt;. Compression level.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be30072ef72446b1caf899aa9296b50b01c8a249" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;compression_level&lt;/code&gt;&lt;/b&gt;: 0 to 9, or &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e90be7e068a4763c0983494f8d67e12a664a7d6" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;compression_method&lt;/code&gt;&lt;/b&gt;: compression method or &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8afbd973f3934060de5b4e8e826b160b667afd77" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;compression_strategy&lt;/code&gt;&lt;/b&gt;: strategy or &lt;code&gt;None&lt;/code&gt;. Default: Z_DEFAULT_STRATEGY.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f13f37be6fba7f09b76f1539feb0194ff28d28d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;compression_type&lt;/code&gt;&lt;/b&gt;: (Optional.) A &lt;a href=&quot;../../../../../tf#string&quot;&gt;&lt;code&gt;tf.string&lt;/code&gt;&lt;/a&gt; scalar evaluating to one of &lt;code&gt;&quot;&quot;&lt;/code&gt; (no compression), &lt;code&gt;&quot;ZLIB&quot;&lt;/code&gt;, or &lt;code&gt;&quot;GZIP&quot;&lt;/code&gt;. Defaults to no compression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd21a8499f428216e4704da2b1830e71f56c8176" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;compression_type&lt;/code&gt;&lt;/b&gt;: (Optional.) A &lt;a href=&quot;../../../../tf#string&quot;&gt;&lt;code&gt;tf.string&lt;/code&gt;&lt;/a&gt; scalar evaluating to one of &lt;code&gt;&quot;&quot;&lt;/code&gt; (no compression), &lt;code&gt;&quot;ZLIB&quot;&lt;/code&gt;, or &lt;code&gt;&quot;GZIP&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c787528e1b276953b307f7f61c165d41684bb0b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;compression_type&lt;/code&gt;&lt;/b&gt;: (Optional.) A &lt;a href=&quot;../../../tf#string&quot;&gt;&lt;code&gt;tf.string&lt;/code&gt;&lt;/a&gt; scalar evaluating to one of &lt;code&gt;&quot;&quot;&lt;/code&gt; (no compression), &lt;code&gt;&quot;ZLIB&quot;&lt;/code&gt;, or &lt;code&gt;&quot;GZIP&quot;&lt;/code&gt;. Defaults to no compression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f14f4dc2e633b8198ca58ee65c3b51c33e587cd" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;compression_type&lt;/code&gt;&lt;/b&gt;: (Optional.) A &lt;a href=&quot;../../tf#string&quot;&gt;&lt;code&gt;tf.string&lt;/code&gt;&lt;/a&gt; scalar evaluating to one of &lt;code&gt;&quot;&quot;&lt;/code&gt; (no compression), &lt;code&gt;&quot;ZLIB&quot;&lt;/code&gt;, or &lt;code&gt;&quot;GZIP&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4622ce598f1d19ac08ceaad5e07fe1c60c2ad8e5" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;compression_type&lt;/code&gt;&lt;/b&gt;: (Optional.) a string indicating what type of compression to use when writing the file. See &lt;code&gt;tf.io.TFRecordCompressionType&lt;/code&gt; for what types of compression are available. Defaults to &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d0a2aa847b19e5c827ea5200be68594001c9ef0" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;compression_type&lt;/code&gt;&lt;/b&gt;: &lt;code&gt;&quot;GZIP&quot;&lt;/code&gt;, &lt;code&gt;&quot;ZLIB&quot;&lt;/code&gt;, or &lt;code&gt;&quot;&quot;&lt;/code&gt; (no compression).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ad50c6de1330b3f3b9e6d67bbbd7fc5b70e4467" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;compression_type&lt;/code&gt;&lt;/b&gt;: An optional &lt;code&gt;string&lt;/code&gt;. Defaults to &lt;code&gt;&quot;&quot;&lt;/code&gt;. A scalar containing either (i) the empty string (no compression), (ii) &quot;ZLIB&quot;, or (iii) &quot;GZIP&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c744b986a8335e1bcd7b1203b6cbcc25ad70e035" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;computation&lt;/code&gt;&lt;/b&gt;: A Python function that builds a computation to apply to each shard of the input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c10909b91a43d8ba3a55921b475d50a20592c96d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;computation&lt;/code&gt;&lt;/b&gt;: A Python function that builds a computation to apply to the input. If the function takes n inputs, 'inputs' should be a list of n tensors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2dcc90e0a89b0d5d1f27db8d1a7f6d2ca8373af" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;computation&lt;/code&gt;&lt;/b&gt;: A Python function that builds the computation to place on the host.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a8d1a4d71bbca6047e6774287cd9032dcfa8bee" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;computation&lt;/code&gt;&lt;/b&gt;: A Python function that builds the computation to replicate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee0419421bbf3044fb0ef18445af3be826321b53" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;compute_device&lt;/code&gt;&lt;/b&gt;: (Optional.) If True, device functions will be executed to compute the device property of the Operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bb67fad20330266e7bfd9d2b1c796b3e1305c14" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;compute_full_loss&lt;/code&gt;&lt;/b&gt;: Whether to include the constant &lt;code&gt;log(z!)&lt;/code&gt; term in computing the poisson loss. See &lt;a href=&quot;../nn/log_poisson_loss&quot;&gt;&lt;code&gt;tf.nn.log_poisson_loss&lt;/code&gt;&lt;/a&gt; for the full documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e06929b8a5832fb7cb09fee9a4fa56fa1058a371" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;compute_full_loss&lt;/code&gt;&lt;/b&gt;: whether to compute the full loss. If false, a constant term is dropped in favor of more efficient optimization.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fce2b40a449fce6af375fadbb858e811907aed20" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;compute_shapes&lt;/code&gt;&lt;/b&gt;: (Optional.) Deprecated. Has no effect (shapes are always computed).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1164a6ced1f9b80d964dacd7f6e4cf43ada3cb90" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;compute_uv&lt;/code&gt;&lt;/b&gt;: If &lt;code&gt;True&lt;/code&gt; then left and right singular vectors will be computed and returned in &lt;code&gt;u&lt;/code&gt; and &lt;code&gt;v&lt;/code&gt;, respectively. Otherwise, only the singular values will be computed, which can be significantly faster.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33606b5f290ca9ee4d4dc27cd16146fe17e29be5" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;concat_dim&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt; of type &lt;code&gt;int32&lt;/code&gt;. 0-D. The dimension along which to concatenate. Must be in the range [0, rank(values)).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b640554a51c491b17a6bec616cd798e853f38d4d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;concat_dim&lt;/code&gt;&lt;/b&gt;: The old (deprecated) name for axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56677e3a6fd83991f32c707e8134c7cf9b462465" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;concentration0&lt;/code&gt;&lt;/b&gt;: Positive floating-point &lt;code&gt;Tensor&lt;/code&gt; indicating mean number of failures; aka &quot;beta&quot;. Otherwise has same semantics as &lt;code&gt;concentration1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57b98d71e400e44762a6204bfef5c4a3d9531644" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;concentration1&lt;/code&gt;&lt;/b&gt;: Positive floating-point &lt;code&gt;Tensor&lt;/code&gt; indicating mean number of successes; aka &quot;alpha&quot;. Implies &lt;code&gt;self.dtype&lt;/code&gt; and &lt;code&gt;self.batch_shape&lt;/code&gt;, i.e., &lt;code&gt;concentration1.shape = [N1, N2, ..., Nm] = self.batch_shape&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="196a83e3ba87c165e49c10d775ee05405600d4dc" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;concentration&lt;/code&gt;&lt;/b&gt;: Floating point tensor, the concentration params of the distribution(s). Must contain only positive values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b29c90804e79032d211aa5148286f4b8bae08b5a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;concentration&lt;/code&gt;&lt;/b&gt;: Positive floating point tensor, whose dtype is the same as &lt;code&gt;n&lt;/code&gt; with shape broadcastable to &lt;code&gt;[N1,..., Nm, K]&lt;/code&gt;&lt;code&gt;m &amp;gt;= 0&lt;/code&gt;. Defines this as a batch of &lt;code&gt;N1 x ... x Nm&lt;/code&gt; different &lt;code&gt;K&lt;/code&gt; class Dirichlet multinomial distributions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d5308faf6427ed7863029c3b9bc49c405fd918e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;concentration&lt;/code&gt;&lt;/b&gt;: Positive floating-point &lt;code&gt;Tensor&lt;/code&gt; indicating mean number of class occurrences; aka &quot;alpha&quot;. Implies &lt;code&gt;self.dtype&lt;/code&gt;, and &lt;code&gt;self.batch_shape&lt;/code&gt;, &lt;code&gt;self.event_shape&lt;/code&gt;, i.e., if &lt;code&gt;concentration.shape = [N1, N2, ..., Nm, k]&lt;/code&gt; then &lt;code&gt;batch_shape = [N1, N2, ..., Nm]&lt;/code&gt; and &lt;code&gt;event_shape = [k]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e98744fcc11482e764b5bb316edc344dc03fafa5" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;cond&lt;/code&gt;&lt;/b&gt;: A callable that represents the termination condition of the loop.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4afd7e100f5629d09ac13fecc6904c0956bbe33" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;condition&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt; of type &lt;code&gt;bool&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="132015f1f7b99a8da951ea7274a22bb7a7bfb1ce" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;condition&lt;/code&gt;&lt;/b&gt;: The condition to evaluate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46782109bc4e05865cd8d2c2bf97c7162817e4b9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;condition&lt;/code&gt;&lt;/b&gt;: can be True, False, a bool Tensor, or a callable providing such.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf25169da7f342d3711291aec93769721ecef409" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;condition&lt;/code&gt;&lt;/b&gt;: tensor (&lt;code&gt;int&lt;/code&gt; or &lt;code&gt;bool&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="894246abbaffd012309735a9d29aa1b45c30eb31" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;config&lt;/code&gt;&lt;/b&gt;: (Optional) &lt;code&gt;ConfigProto&lt;/code&gt; proto used to configure the session.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee80132b532077c843b2e28ee2b02b888f1b70bb" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;config&lt;/code&gt;&lt;/b&gt;: (Optional.) A &lt;a href=&quot;configproto&quot;&gt;&lt;code&gt;tf.compat.v1.ConfigProto&lt;/code&gt;&lt;/a&gt; to use to configure the environment in which operations are executed. Note that &lt;a href=&quot;configproto&quot;&gt;&lt;code&gt;tf.compat.v1.ConfigProto&lt;/code&gt;&lt;/a&gt; is also used to configure graph execution (via &lt;a href=&quot;session&quot;&gt;&lt;code&gt;tf.compat.v1.Session&lt;/code&gt;&lt;/a&gt;) and many options within &lt;a href=&quot;configproto&quot;&gt;&lt;code&gt;tf.compat.v1.ConfigProto&lt;/code&gt;&lt;/a&gt; are not implemented (or are irrelevant) when eager execution is enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="415c0e01949f9947c3b0883da4293321f4aaca30" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;config&lt;/code&gt;&lt;/b&gt;: (Optional.) A &lt;a href=&quot;https://www.tensorflow.org/code/tensorflow/core/protobuf/config.proto&quot;&gt;&lt;code&gt;ConfigProto&lt;/code&gt;&lt;/a&gt; protocol buffer with configuration options for the session.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1f3de889891e10aae517d951136c4fe02f94072" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;config&lt;/code&gt;&lt;/b&gt;: (Optional.) Protocol buffer with configuration options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35d0da681bb6c260939be40ff520609433f0436e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;config&lt;/code&gt;&lt;/b&gt;: (Options.) A &lt;a href=&quot;../compat/v1/configproto&quot;&gt;&lt;code&gt;tf.compat.v1.ConfigProto&lt;/code&gt;&lt;/a&gt; that specifies default configuration options for all sessions that run on this server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a38b873f12ae0657092175d62f9e84b2bb00e9fe" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;config&lt;/code&gt;&lt;/b&gt;: &lt;a href=&quot;../../../estimator/runconfig&quot;&gt;&lt;code&gt;estimator.RunConfig&lt;/code&gt;&lt;/a&gt; configuration object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e228dd5934a46c3869cfb32d70ea0c5814af78bf" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;config&lt;/code&gt;&lt;/b&gt;: &lt;a href=&quot;runconfig&quot;&gt;&lt;code&gt;estimator.RunConfig&lt;/code&gt;&lt;/a&gt; configuration object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41643f2f83f6f6d3c9511f2b36dda3dfcab2d37a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;config&lt;/code&gt;&lt;/b&gt;: &lt;code&gt;ConfigProto&lt;/code&gt; proto used to configure the session.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1a12b76c7daadd52b19c72136faf44a962504b2" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;config&lt;/code&gt;&lt;/b&gt;: &lt;code&gt;RunConfig&lt;/code&gt; object to configure the runtime settings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1eee4645db7d7ead99759ab58050438b9860faba" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;config&lt;/code&gt;&lt;/b&gt;: &lt;code&gt;RunConfig&lt;/code&gt; to config &lt;code&gt;Estimator&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3542ff03d793862bcb4571d59029b70f3bd17de" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;config&lt;/code&gt;&lt;/b&gt;: A Python dictionary, typically the output of get_config.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e79ae5eb07d2c66d3ed5b4263fdc066a437dc79" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;config&lt;/code&gt;&lt;/b&gt;: A Python dictionary. It will typically be the output of &lt;code&gt;get_config&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e40ee8c2f41471ac6eb42ebd702b0ecd0b1c856c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;config&lt;/code&gt;&lt;/b&gt;: An &lt;code&gt;tpu_config.RunConfig&lt;/code&gt; configuration object. Cannot be &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f99adcd377ae81f0dc53398a6f4be11a9307c20c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;config&lt;/code&gt;&lt;/b&gt;: An optional config_pb2.ConfigProto to use to configure the session.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8798f6b7929c0fac51a27eac5cab0bbed0d5c19" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;config&lt;/code&gt;&lt;/b&gt;: Configuration dictionary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9005a3de35e7043d5733497496f1eecf55dbf7e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;config&lt;/code&gt;&lt;/b&gt;: Optimizer configuration dictionary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f2ddef5934308d37c2a7ff75691292750761bdf" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;config&lt;/code&gt;&lt;/b&gt;: Optional &lt;code&gt;ConfigProto&lt;/code&gt; proto used to configure the session.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95837992b681d2429137cd4e5121db4a2cd58adb" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;config&lt;/code&gt;&lt;/b&gt;: Optional &lt;code&gt;ConfigProto&lt;/code&gt; proto used to configure the session. Passed as-is to create the session.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55e683b93b548afe14bd6b82cdd52f2f1f2b2264" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;config&lt;/code&gt;&lt;/b&gt;: Optional ConfigProto proto used to configure the session, which is passed as-is to create the session.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b837b53e2d4dbc8e72b99b2ba77851bc279f421" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;config&lt;/code&gt;&lt;/b&gt;: Optional ConfigProto proto used to configure the session.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b836142606816c674f513e27873455329f0b469" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;config&lt;/code&gt;&lt;/b&gt;: Output of &lt;code&gt;get_config()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31a5337fe982002391d20a54fa090da1e370042a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;config&lt;/code&gt;&lt;/b&gt;: RunConfig object to configure the runtime settings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d01c207523ccdfa42eb1cb79f5bc1dd9c494248" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;config&lt;/code&gt;&lt;/b&gt;: See &lt;a href=&quot;../../../../estimator/estimator&quot;&gt;&lt;code&gt;tf.estimator.Estimator&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="951923ff60fc90d32797bd4b914ec4c321909180" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;config&lt;/code&gt;&lt;/b&gt;: The configuration object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41bff3d6bee40691c7af4c7d4f08a2254165e8ba" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;config&lt;/code&gt;&lt;/b&gt;: an instance of &lt;a href=&quot;../configproto&quot;&gt;&lt;code&gt;tf.compat.v1.ConfigProto&lt;/code&gt;&lt;/a&gt; proto used to configure the session. It's the &lt;code&gt;config&lt;/code&gt; argument of constructor of &lt;a href=&quot;../session&quot;&gt;&lt;code&gt;tf.compat.v1.Session&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1811bf988353233de33337a1ec529b38a25c8750" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;config&lt;/code&gt;&lt;/b&gt;: dict of the form {'class_name': str, 'config': dict}</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da9e85a1db13b4e29e196be9d2033a05a4041dae" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;config_proto&lt;/code&gt;&lt;/b&gt;: (Optional) Configuration for starting a new session to query how many accelerator cores it has.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82db4b4cd76f4864d6ebd11b27c96a788205a8f5" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;config_proto&lt;/code&gt;&lt;/b&gt;: Unused.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0611523979bb13649574fe917bbdaa8c1b1d0c73" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;config_proto&lt;/code&gt;&lt;/b&gt;: Used to create a connection to a TPU master in order to retrieve the system metadata.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="502ac152675b1248d21a20f30deda66f95809603" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;config_proto&lt;/code&gt;&lt;/b&gt;: a &lt;code&gt;tf.ConfigProto&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fa139be12236cb423e61bd8cbbb4cb365cca275" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;conjugate&lt;/code&gt;&lt;/b&gt;: Optional bool. Setting it to &lt;code&gt;True&lt;/code&gt; is mathematically equivalent to tf.math.conj(tf.linalg.matrix_transpose(input)).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0834e428ce674f86f42136e608fcb75d90f91f01" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;conjugate&lt;/code&gt;&lt;/b&gt;: Optional bool. Setting it to &lt;code&gt;True&lt;/code&gt; is mathematically equivalent to tf.math.conj(tf.transpose(input)).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63fe3601e5e45858647b645ef6e809155516a109" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;conjugate_rhs&lt;/code&gt;&lt;/b&gt;: If &lt;code&gt;True&lt;/code&gt;, &lt;code&gt;rhs&lt;/code&gt; is conjugated before solving.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82ca102248a38b0a1ca43c8bb876d5ac215042d4" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;constant_values&lt;/code&gt;&lt;/b&gt;: In &quot;CONSTANT&quot; mode, the scalar pad value to use. Must be same type as &lt;code&gt;tensor&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a92bfa14551903326e97ce870a62e32f62a0f23" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;constants&lt;/code&gt;&lt;/b&gt;: List of constant tensors to be passed to the cell at each timestep.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c2d3eb568fc7d69168511ec67a289850fcdf80d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;constants&lt;/code&gt;&lt;/b&gt;: List of constant values passed at each step.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="385770d3f625faa7a4b5a7693f1896ac5c9606a5" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;constraint&lt;/code&gt;&lt;/b&gt;: An optional projection function to be applied to the variable after being updated by an &lt;code&gt;Optimizer&lt;/code&gt; (e.g. used to implement norm constraints or value constraints for layer weights). The function must take as input the unprojected Tensor representing the value of the variable and return the Tensor for the projected value (which must have the same shape). Constraints are not safe to use when doing asynchronous distributed training.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e836fdc37d1c358ebd92a9a3425438edf667ee14" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;constraint&lt;/code&gt;&lt;/b&gt;: Constraint instance (callable).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3d392de25ed7dc39540fd096b3ce5c2d579c335" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;constraint&lt;/code&gt;&lt;/b&gt;: Optional projection function to be applied to the variable after an optimizer update.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69a84e12c9ee7bd139250bf6f2ac91c4488a7c0e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;container&lt;/code&gt;&lt;/b&gt;: Anything that implements the collections.abc.Sized interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d7a9bdad14b96bcca41479d9e940c517186c139" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;container&lt;/code&gt;&lt;/b&gt;: the list we're testing for subsequence inclusion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8033b5ba45254638d3852eae2254aec7f9a03fb7" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;container_name&lt;/code&gt;&lt;/b&gt;: The container string to use in the context.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94a14a15635330a4c1b4183e4016b6d803719f93" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;container_name&lt;/code&gt;&lt;/b&gt;: container name string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45c0056eb3742b6cf9c6dcd477cbca52b5633e73" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;containers&lt;/code&gt;&lt;/b&gt;: A list of resource container name strings, or &lt;code&gt;None&lt;/code&gt; if all of all the containers are to be reset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2c21ba6d78ad93d371c89d224fc48cbcba03999" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;content&lt;/code&gt;&lt;/b&gt;: Optional string or bytes to initially write to the file. If not specified, then an empty file is created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="596aacef388fbba339bdf1274aea072d219f82a9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;contents&lt;/code&gt;&lt;/b&gt;: 0-D &lt;code&gt;string&lt;/code&gt;. The encoded image bytes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="332742ac1fbc1fd141c3d9bdd6b0acfd45221876" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;contents&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt; of type &lt;code&gt;string&lt;/code&gt;. 0-D. The BMP-encoded image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15bf5a5e3471abb1af39327b25c246014ddd9aeb" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;contents&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt; of type &lt;code&gt;string&lt;/code&gt;. 0-D. The GIF-encoded image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30503d519626011d0c2845e3e0e86d9d436a7fc4" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;contents&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt; of type &lt;code&gt;string&lt;/code&gt;. 0-D. The JPEG-encoded image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d2af5f0c614e121326effc227554468ac5e0fb1" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;contents&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt; of type &lt;code&gt;string&lt;/code&gt;. 0-D. The PNG-encoded image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5925bceaebd8ed7a1b6f3f3938bd390fc23a6af5" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;contents&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt; of type &lt;code&gt;string&lt;/code&gt;. The WAV-encoded audio, usually from a file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4472e0245f9071aafd3a0876d5339c8013827b0" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;contents&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt; of type &lt;code&gt;string&lt;/code&gt;. scalar. The content to be written to the output file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99b10ed1745dd9e6c1a44e233e199365d2bf7a9a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;context_feature_columns&lt;/code&gt;&lt;/b&gt;: An iterable containing the &lt;code&gt;FeatureColumn&lt;/code&gt;s for contextual input. The data represented by these columns will be replicated and given to the RNN at each timestep. These columns must be instances of classes derived from &lt;code&gt;DenseColumn&lt;/code&gt; such as &lt;code&gt;numeric_column&lt;/code&gt;, not the sequential variants.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="deb04d99e8ebe0ec1517a41a0a93d207b34b628f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;context_features&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;dict&lt;/code&gt; mapping feature keys to &lt;code&gt;FixedLenFeature&lt;/code&gt; or &lt;code&gt;VarLenFeature&lt;/code&gt; or &lt;code&gt;RaggedFeature&lt;/code&gt; values. These features are associated with a &lt;code&gt;SequenceExample&lt;/code&gt; as a whole.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33beb7a6b2d409062baf40986c27bf528b89c8b8" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;contrast_factor&lt;/code&gt;&lt;/b&gt;: A float multiplier for adjusting contrast.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d25002740c4ee0002a7bb6ba0a78b03a3fee656" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;control_inputs&lt;/code&gt;&lt;/b&gt;: A list of &lt;code&gt;Operation&lt;/code&gt; or &lt;code&gt;Tensor&lt;/code&gt; objects which must be executed or computed before running the operations defined in the context. Can also be &lt;code&gt;None&lt;/code&gt; to clear the control dependencies.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12a1e6f47cab492653834a6cc426a0bf5127fd19" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;control_inputs&lt;/code&gt;&lt;/b&gt;: A list of &lt;code&gt;Operation&lt;/code&gt; or &lt;code&gt;Tensor&lt;/code&gt; objects which must be executed or computed before running the operations defined in the context. Can also be &lt;code&gt;None&lt;/code&gt; to clear the control dependencies. If eager execution is enabled, any callable object in the &lt;code&gt;control_inputs&lt;/code&gt; list will be called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a11aec612fb95ab59d5e7c0f1061eaf95c491e98" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;control_inputs&lt;/code&gt;&lt;/b&gt;: List of additional ops to finish before returning.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de05fa52c1d87fcf64fe3c29567df110cad51502" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;control_inputs&lt;/code&gt;&lt;/b&gt;: list of operations or tensors from which to have a control dependency.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7403d25e244db620009122bcedd1223c3e553ec0" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;conversion_func&lt;/code&gt;&lt;/b&gt;: A function that converts instances of &lt;code&gt;base_type&lt;/code&gt; to &lt;code&gt;Tensor&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e70a44683e92d72abcb999089ad432bf0dec4a3" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;conversion_params&lt;/code&gt;&lt;/b&gt;: a TrtConversionParams instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="263b551eaf8e1de69d22b7be525d75c2e1566f52" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;conversion_summary_dir&lt;/code&gt;&lt;/b&gt;: A string indicating the path to the generated conversion logs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2215a4859acb617282b30bb65272a01ba2ade2ce" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;cooldown&lt;/code&gt;&lt;/b&gt;: number of epochs to wait before resuming normal operation after lr has been reduced.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9191a6a1f46c3d0f889c27a6edd6202a3fbab039" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;coord&lt;/code&gt;&lt;/b&gt;: A Coordinator object which keeps track of all threads.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8be4db7846b37e97698a59cdf60d94ac1d828e1" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;coord&lt;/code&gt;&lt;/b&gt;: A Coordinator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f91135873b8582d7af1b4f570e908ba0e69c375f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;coord&lt;/code&gt;&lt;/b&gt;: Optional &lt;code&gt;Coordinator&lt;/code&gt; for coordinating the started threads.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6297bbc5a090747d19f358aff74bd55a95279cd9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;coord&lt;/code&gt;&lt;/b&gt;: Optional &lt;code&gt;Coordinator&lt;/code&gt; object for reporting errors and checking stop conditions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14bc9845b4c1acf3ad4bbef6f05aa0dd09469ca6" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;coordinator_address&lt;/code&gt;&lt;/b&gt;: The address of the coordinator (typically an ip:port pair). If set to None, a TF server will be started. If coordinator_name is None, a TF server will not be started even if coordinator_address is None.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24df4c5a60515e4a3b54390237825d21c1437869" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;coordinator_name&lt;/code&gt;&lt;/b&gt;: The name to use for the coordinator. Set to None if the coordinator should not be included in the computed ClusterSpec.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04a4ffbfcfdca12803aefc191b53a643d2665c07" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;copy_from&lt;/code&gt;&lt;/b&gt;: a generator to be copied from.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39dcba7b5bb5133b4fd89bd1d81b622e8eb7323e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;copy_from_scaffold&lt;/code&gt;&lt;/b&gt;: Optional scaffold object to copy fields from. Its fields will be overwritten by the provided fields in this function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb1e2f29d67512faa9c64def647bea4831a10348" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;core_assignment&lt;/code&gt;&lt;/b&gt;: A logical to physical core mapping, represented as a rank 3 numpy array. See the description of the &lt;code&gt;core_assignment&lt;/code&gt; property for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6614084d83fe3a1ad97daba6a1075baa88ac885d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;count&lt;/code&gt;&lt;/b&gt;: (Optional.) A &lt;a href=&quot;../../../../../tf#int64&quot;&gt;&lt;code&gt;tf.int64&lt;/code&gt;&lt;/a&gt; scalar &lt;a href=&quot;../../../../tensor&quot;&gt;&lt;code&gt;tf.Tensor&lt;/code&gt;&lt;/a&gt;, representing the number of times the dataset should be repeated. The default behavior (if &lt;code&gt;count&lt;/code&gt; is &lt;code&gt;None&lt;/code&gt; or &lt;code&gt;-1&lt;/code&gt;) is for the dataset be repeated indefinitely.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5810e917aa2c4b728770fa60981796986cf40114" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;count&lt;/code&gt;&lt;/b&gt;: (Optional.) A &lt;a href=&quot;../../../../tf#int64&quot;&gt;&lt;code&gt;tf.int64&lt;/code&gt;&lt;/a&gt; scalar &lt;a href=&quot;../../../tensor&quot;&gt;&lt;code&gt;tf.Tensor&lt;/code&gt;&lt;/a&gt;, representing the number of times the dataset should be repeated. The default behavior (if &lt;code&gt;count&lt;/code&gt; is &lt;code&gt;None&lt;/code&gt; or &lt;code&gt;-1&lt;/code&gt;) is for the dataset be repeated indefinitely.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a355d88b65098c955d7811407d29db501a92c88f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;count&lt;/code&gt;&lt;/b&gt;: (Optional.) A &lt;a href=&quot;../../../tf#int64&quot;&gt;&lt;code&gt;tf.int64&lt;/code&gt;&lt;/a&gt; scalar &lt;a href=&quot;../../tensor&quot;&gt;&lt;code&gt;tf.Tensor&lt;/code&gt;&lt;/a&gt;, representing the number of times the dataset should be repeated. The default behavior (if &lt;code&gt;count&lt;/code&gt; is &lt;code&gt;None&lt;/code&gt; or &lt;code&gt;-1&lt;/code&gt;) is for the dataset be repeated indefinitely.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="192662deb773299b41113e61cf27eb7d4f9ee6ff" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;count&lt;/code&gt;&lt;/b&gt;: (Optional.) A &lt;a href=&quot;../../tf#int64&quot;&gt;&lt;code&gt;tf.int64&lt;/code&gt;&lt;/a&gt; scalar &lt;a href=&quot;../tensor&quot;&gt;&lt;code&gt;tf.Tensor&lt;/code&gt;&lt;/a&gt;, representing the number of times the dataset should be repeated. The default behavior (if &lt;code&gt;count&lt;/code&gt; is &lt;code&gt;None&lt;/code&gt; or &lt;code&gt;-1&lt;/code&gt;) is for the dataset be repeated indefinitely.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d8aaffe608f26f03c7e1b15a844ab1539ad5582" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;count&lt;/code&gt;&lt;/b&gt;: A &lt;a href=&quot;../../../../../tf#int64&quot;&gt;&lt;code&gt;tf.int64&lt;/code&gt;&lt;/a&gt; scalar &lt;a href=&quot;../../../../tensor&quot;&gt;&lt;code&gt;tf.Tensor&lt;/code&gt;&lt;/a&gt;, representing the number of elements of this dataset that should be skipped to form the new dataset. If &lt;code&gt;count&lt;/code&gt; is greater than the size of this dataset, the new dataset will contain no elements. If &lt;code&gt;count&lt;/code&gt; is -1, skips the entire dataset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bd1afc6c82f62c685ae2b35ae24d27615ba5265" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;count&lt;/code&gt;&lt;/b&gt;: A &lt;a href=&quot;../../../../../tf#int64&quot;&gt;&lt;code&gt;tf.int64&lt;/code&gt;&lt;/a&gt; scalar &lt;a href=&quot;../../../../tensor&quot;&gt;&lt;code&gt;tf.Tensor&lt;/code&gt;&lt;/a&gt;, representing the number of elements of this dataset that should be taken to form the new dataset. If &lt;code&gt;count&lt;/code&gt; is -1, or if &lt;code&gt;count&lt;/code&gt; is greater than the size of this dataset, the new dataset will contain all elements of this dataset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="691b72c75204477c78b0b983182a9807b61c1409" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;count&lt;/code&gt;&lt;/b&gt;: A &lt;a href=&quot;../../../../tf#int64&quot;&gt;&lt;code&gt;tf.int64&lt;/code&gt;&lt;/a&gt; scalar &lt;a href=&quot;../../../tensor&quot;&gt;&lt;code&gt;tf.Tensor&lt;/code&gt;&lt;/a&gt;, representing the number of elements of this dataset that should be skipped to form the new dataset. If &lt;code&gt;count&lt;/code&gt; is greater than the size of this dataset, the new dataset will contain no elements. If &lt;code&gt;count&lt;/code&gt; is -1, skips the entire dataset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d35d08b80dd90ea43130f722eb5a1aa40e26e09f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;count&lt;/code&gt;&lt;/b&gt;: A &lt;a href=&quot;../../../../tf#int64&quot;&gt;&lt;code&gt;tf.int64&lt;/code&gt;&lt;/a&gt; scalar &lt;a href=&quot;../../../tensor&quot;&gt;&lt;code&gt;tf.Tensor&lt;/code&gt;&lt;/a&gt;, representing the number of elements of this dataset that should be taken to form the new dataset. If &lt;code&gt;count&lt;/code&gt; is -1, or if &lt;code&gt;count&lt;/code&gt; is greater than the size of this dataset, the new dataset will contain all elements of this dataset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb1230179d3a4c5d0b8a5bdd84afa16f54047fb5" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;count&lt;/code&gt;&lt;/b&gt;: A &lt;a href=&quot;../../../tf#int64&quot;&gt;&lt;code&gt;tf.int64&lt;/code&gt;&lt;/a&gt; scalar &lt;a href=&quot;../../tensor&quot;&gt;&lt;code&gt;tf.Tensor&lt;/code&gt;&lt;/a&gt;, representing the number of elements of this dataset that should be skipped to form the new dataset. If &lt;code&gt;count&lt;/code&gt; is greater than the size of this dataset, the new dataset will contain no elements. If &lt;code&gt;count&lt;/code&gt; is -1, skips the entire dataset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85acf345f8532bc2e28aa0098318eb0cc7888415" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;count&lt;/code&gt;&lt;/b&gt;: A &lt;a href=&quot;../../../tf#int64&quot;&gt;&lt;code&gt;tf.int64&lt;/code&gt;&lt;/a&gt; scalar &lt;a href=&quot;../../tensor&quot;&gt;&lt;code&gt;tf.Tensor&lt;/code&gt;&lt;/a&gt;, representing the number of elements of this dataset that should be taken to form the new dataset. If &lt;code&gt;count&lt;/code&gt; is -1, or if &lt;code&gt;count&lt;/code&gt; is greater than the size of this dataset, the new dataset will contain all elements of this dataset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a3595f84aa6fa4894f34eea6abb909f5f0f9c62" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;count&lt;/code&gt;&lt;/b&gt;: A &lt;a href=&quot;../../tf#int64&quot;&gt;&lt;code&gt;tf.int64&lt;/code&gt;&lt;/a&gt; scalar &lt;a href=&quot;../tensor&quot;&gt;&lt;code&gt;tf.Tensor&lt;/code&gt;&lt;/a&gt;, representing the number of elements of this dataset that should be skipped to form the new dataset. If &lt;code&gt;count&lt;/code&gt; is greater than the size of this dataset, the new dataset will contain no elements. If &lt;code&gt;count&lt;/code&gt; is -1, skips the entire dataset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ebf48420b7a867e530afa0bea139e594e1a7c19" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;count&lt;/code&gt;&lt;/b&gt;: A &lt;a href=&quot;../../tf#int64&quot;&gt;&lt;code&gt;tf.int64&lt;/code&gt;&lt;/a&gt; scalar &lt;a href=&quot;../tensor&quot;&gt;&lt;code&gt;tf.Tensor&lt;/code&gt;&lt;/a&gt;, representing the number of elements of this dataset that should be taken to form the new dataset. If &lt;code&gt;count&lt;/code&gt; is -1, or if &lt;code&gt;count&lt;/code&gt; is greater than the size of this dataset, the new dataset will contain all elements of this dataset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc743a0bcbdeceb85797e0a28bc286a59eb3a132" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;count&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt; of type &lt;code&gt;out_idx&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf43ee00d93bfd9851274e339f76cd45f4924681" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;count&lt;/code&gt;&lt;/b&gt;: the number of generators to return.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a19cf4419b80d59badcfe9316a6a2dcafe7a53d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;count&lt;/code&gt;&lt;/b&gt;: the number of seed pairs (note that stateless random ops need a pair of seeds to invoke).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3eb48054d60814f468b47e2b2d8be0acd8a84242" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;count_mode&lt;/code&gt;&lt;/b&gt;: One of &quot;steps&quot; or &quot;samples&quot;. Whether the progress bar should count samples seen or steps (batches) seen.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc73af8ac32b1aff49d5f04738204587224b8d64" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;counter&lt;/code&gt;&lt;/b&gt;: a vector of dtype STATE_TYPE representing the initial counter for the RNG, whose length is algorithm-specific.,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e78166e1d7538db94fa0f661c4ae84148c005ae1" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;counter&lt;/code&gt;&lt;/b&gt;: the new counter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f16dd7bcc58a8bc05e5e6b5075113eae9d7c1c72" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;counts&lt;/code&gt;&lt;/b&gt;: A 0/1-D Tensor or Python value. The counts of the binomial distribution. Must be broadcastable with the leftmost dimension defined by &lt;code&gt;shape&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
