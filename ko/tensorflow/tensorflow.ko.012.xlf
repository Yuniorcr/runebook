<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="tensorflow">
    <body>
      <group id="tensorflow">
        <trans-unit id="159aaffaae4a27747c479c45728f8454927b1e39" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;message&lt;/code&gt;&lt;/b&gt;: Alias for msg.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab2c1cdaaa3f14428fa9cbcb5b509da45165978a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;message&lt;/code&gt;&lt;/b&gt;: Message to log on failure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d803965f5014d167e9655f9115da74ef87314d7" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;message&lt;/code&gt;&lt;/b&gt;: Message to print jointly with the tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7912c296674b039bb23254db8a64f95cd6e03e9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;message&lt;/code&gt;&lt;/b&gt;: The message string describing the failure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a3e28367ad20c29c0cff9898710d4db378e4fee" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;message&lt;/code&gt;&lt;/b&gt;: The message to be printed if the test fails.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67a2f25809392b79ac6c12e079b646ef81ee7be5" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;message&lt;/code&gt;&lt;/b&gt;: str, error text to be shown to the user if checker returns False. If checker raises flags.ValidationError, message from the raised error will be shown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7f08d3d0031e367e8e58e2fd5fc100cccacf55d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;message&lt;/code&gt;&lt;/b&gt;: the message to validate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09651bff33fef70bf31d20e7d25ff78022413bec" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;message_format&lt;/code&gt;&lt;/b&gt;: An optional &lt;code&gt;string&lt;/code&gt;. Defaults to &lt;code&gt;&quot;binary&quot;&lt;/code&gt;. Either &lt;code&gt;binary&lt;/code&gt; or &lt;code&gt;text&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97ff947f57f24091ac453639c72f82f066502ea2" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;message_type&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;string&lt;/code&gt;. Name of the proto message type to decode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a112f63216c31b02839b45c503bad3fb6038d636" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;meta_graph_def&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;MetaGraphDef&lt;/code&gt; object, often as returned by &lt;code&gt;saver.export_meta_graph()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cb6e809bca3605b4c63dfade70a7b8d795225eb" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;meta_graph_or_file&lt;/code&gt;&lt;/b&gt;: &lt;code&gt;MetaGraphDef&lt;/code&gt; protocol buffer or filename (including the path) containing a &lt;code&gt;MetaGraphDef&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfd45a878770cf0f6e32b6fa069096dcadd7a8b0" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;meta_graph_suffix&lt;/code&gt;&lt;/b&gt;: Suffix for &lt;code&gt;MetaGraphDef&lt;/code&gt; file. Defaults to 'meta'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4487825ad70ef1a108adc8912c9d64eb36975f00" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;meta_info_def&lt;/code&gt;&lt;/b&gt;: &lt;code&gt;MetaInfoDef&lt;/code&gt; protocol buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f517cc2c8fe882d42135fc04d216e4b18fea2a85" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;metadata&lt;/code&gt;&lt;/b&gt;: Optional SummaryMetadata, as a proto or serialized bytes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44d87ed0fcb8e6316a6eb56e046740e4901e5514" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;method&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt; of type &lt;a href=&quot;../tf#string&quot;&gt;&lt;code&gt;tf.string&lt;/code&gt;&lt;/a&gt;. Fingerprint method used by this op. Currently available method is &lt;code&gt;farmhash64&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="270d871e278816f7f59c51d4226d64d34bf8d488" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;method&lt;/code&gt;&lt;/b&gt;: An optional &lt;code&gt;string&lt;/code&gt; from: &lt;code&gt;&quot;bilinear&quot;, &quot;nearest&quot;&lt;/code&gt;. Defaults to &lt;code&gt;&quot;bilinear&quot;&lt;/code&gt;. A string specifying the sampling method for resizing. It can be either &lt;code&gt;&quot;bilinear&quot;&lt;/code&gt; or &lt;code&gt;&quot;nearest&quot;&lt;/code&gt; and default to &lt;code&gt;&quot;bilinear&quot;&lt;/code&gt;. Currently two sampling methods are supported: Bilinear and Nearest Neighbor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15335d9214c20dd7839e04fb304d9ad91197df06" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;method&lt;/code&gt;&lt;/b&gt;: An optional string specifying the sampling method for resizing. It can be either &lt;code&gt;&quot;bilinear&quot;&lt;/code&gt; or &lt;code&gt;&quot;nearest&quot;&lt;/code&gt; and default to &lt;code&gt;&quot;bilinear&quot;&lt;/code&gt;. Currently two sampling methods are supported: Bilinear and Nearest Neighbor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5dad33974796deb217366aa9158a5b82c1b99dd8" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;method&lt;/code&gt;&lt;/b&gt;: Method to use for resizing image. See &lt;a href=&quot;resize&quot;&gt;&lt;code&gt;image.resize()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="440ce4b34ff0820df4fc8bfa2047c855ede17e18" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;method&lt;/code&gt;&lt;/b&gt;: Method to use for resizing image. See &lt;code&gt;resize_images()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c541310df08e6c12c748b0c3c5f9f64e7e40c87e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;method&lt;/code&gt;&lt;/b&gt;: ResizeMethod. Defaults to &lt;a href=&quot;../../../image/resizemethod#BILINEAR&quot;&gt;&lt;code&gt;ResizeMethod.BILINEAR&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c59516171055297255365cbd08bfcd4f5854091" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;method&lt;/code&gt;&lt;/b&gt;: ResizeMethod. Defaults to &lt;code&gt;bilinear&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30b2d273f04e95940b9b4b1fd0d4305dfb1efbf3" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;method&lt;/code&gt;&lt;/b&gt;: The method to wrap.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1651c00558e273d674f35e3c84f8f56f18500c46" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;method_name&lt;/code&gt;&lt;/b&gt;: Method name of the SignatureDef as a string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74ed394b29636ced7c2e887329af951a25c01782" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;metric_fn&lt;/code&gt;&lt;/b&gt;: A function which should obey the following signature:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5caa43e8aec599924dfc848b7947e1cde3b49661" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;metric_name&lt;/code&gt;&lt;/b&gt;: &lt;code&gt;str&lt;/code&gt;, metric to track. &quot;loss&quot;, &quot;accuracy&quot;, etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7299b7865e78f2930e0dc677e0dae9ddd4ee1113" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;metrics&lt;/code&gt;&lt;/b&gt;: (optional) A list of dict, where each dict has the keys below name (required), string, metric name value (required), double, metric value min_value (optional), double, minimum acceptable metric value max_value (optional), double, maximum acceptable metric value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e36acdbaade547094c72a64b2fec1c842e5a43a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;metrics&lt;/code&gt;&lt;/b&gt;: List of metrics to be evaluated by the model during training and testing. Typically you will use &lt;code&gt;metrics=['accuracy']&lt;/code&gt;. To specify different metrics for different outputs of a multi-output model, you could also pass a dictionary, such as &lt;code&gt;metrics={'output_a': 'accuracy', 'output_b': ['accuracy', 'mse']}&lt;/code&gt;. You can also pass a list (len = len(outputs)) of lists of metrics such as &lt;code&gt;metrics=[['accuracy'], ['accuracy', 'mse']]&lt;/code&gt; or &lt;code&gt;metrics=['accuracy', ['accuracy', 'mse']]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09cdf02af237cae584b6475f029f05aabb96aea2" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;metrics_collections&lt;/code&gt;&lt;/b&gt;: An optional list of collections that &lt;code&gt;accuracy&lt;/code&gt; should be added to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a63f83c0d5f1f038c971f0cbded436999bb5dd19" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;metrics_collections&lt;/code&gt;&lt;/b&gt;: An optional list of collections that &lt;code&gt;auc&lt;/code&gt; should be added to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="064cb8820ac7198bc491c4ac2e72c130e1d947a1" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;metrics_collections&lt;/code&gt;&lt;/b&gt;: An optional list of collections that &lt;code&gt;false_negatives&lt;/code&gt; should be added to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c062ada3c0a47719c3f2992745afed9b9a809712" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;metrics_collections&lt;/code&gt;&lt;/b&gt;: An optional list of collections that &lt;code&gt;false_positives&lt;/code&gt; should be added to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d77ffc7d4e4a0063aa8aa6ddce04e9626198611e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;metrics_collections&lt;/code&gt;&lt;/b&gt;: An optional list of collections that &lt;code&gt;mean&lt;/code&gt; should be added to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="073ac44ccb6be52ebf76b06be6bf2dcd4ab386fa" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;metrics_collections&lt;/code&gt;&lt;/b&gt;: An optional list of collections that &lt;code&gt;mean_absolute_error&lt;/code&gt; should be added to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92723821396a835297f7fd83aac378b90bde1d62" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;metrics_collections&lt;/code&gt;&lt;/b&gt;: An optional list of collections that &lt;code&gt;mean_iou&lt;/code&gt; should be added to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3623d40a0c142891eb51da9e82564a28cbce6994" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;metrics_collections&lt;/code&gt;&lt;/b&gt;: An optional list of collections that &lt;code&gt;mean_relative_error&lt;/code&gt; should be added to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce173e94a8614503fcd317c53118eb9f97c7117d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;metrics_collections&lt;/code&gt;&lt;/b&gt;: An optional list of collections that &lt;code&gt;mean_squared_error&lt;/code&gt; should be added to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0c092d0ebbeb6134704973474dcd3ae6b302eba" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;metrics_collections&lt;/code&gt;&lt;/b&gt;: An optional list of collections that &lt;code&gt;precision&lt;/code&gt; should be added to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="414d2b42e582e6c26fd8fa9dc9a12a0f38a95267" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;metrics_collections&lt;/code&gt;&lt;/b&gt;: An optional list of collections that &lt;code&gt;recall&lt;/code&gt; should be added to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f1de42c1218c451cb4476a7e4c87b0ef0176731" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;metrics_collections&lt;/code&gt;&lt;/b&gt;: An optional list of collections that &lt;code&gt;root_mean_squared_error&lt;/code&gt; should be added to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18f57f8305c46e5c199878d5a7d0ab94e71f5bf5" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;metrics_collections&lt;/code&gt;&lt;/b&gt;: An optional list of collections that &lt;code&gt;sensitivity&lt;/code&gt; should be added to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8410d9fafa5c057c612ff08014e67d20d63258ae" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;metrics_collections&lt;/code&gt;&lt;/b&gt;: An optional list of collections that &lt;code&gt;specificity&lt;/code&gt; should be added to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2ec8162769b67bd725bfbb5ffff3e1ab1aaf834" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;metrics_collections&lt;/code&gt;&lt;/b&gt;: An optional list of collections that &lt;code&gt;true_negatives&lt;/code&gt; should be added to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cb095b16daedd63c7fed29ff7f00fd5d72752dd" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;metrics_collections&lt;/code&gt;&lt;/b&gt;: An optional list of collections that &lt;code&gt;true_positives&lt;/code&gt; should be added to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df00bbbd41ab2a78338fbabe6e10663a651941d0" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;metrics_collections&lt;/code&gt;&lt;/b&gt;: An optional list of collections that `mean_per_class_accuracy' should be added to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42a88d75bbdda19963be81169cd806ed7ffde664" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;metrics_collections&lt;/code&gt;&lt;/b&gt;: An optional list of collections that the metric value variable should be added to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b3656343c7a387d2e61895b8dcef558e239750f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;metrics_collections&lt;/code&gt;&lt;/b&gt;: An optional list of collections that values should be added to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f1fb593fadc617147e662f4294401b1e53549f4" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;min&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt; of type &lt;code&gt;float32&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7d5d8ab3b68d538afe00e1cc78bfe2a976a3c91" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;min&lt;/code&gt;&lt;/b&gt;: An optional &lt;code&gt;float&lt;/code&gt;. Defaults to &lt;code&gt;-6&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb64e5460c25961cb0194ab05ad5d16c201dce1d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;min_accelerator_micros&lt;/code&gt;&lt;/b&gt;: Only show profiler nodes spend no less than this time on accelerator (e.g. GPU).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fffd35a93f08512899e1282d81fa9df4a209fa3a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;min_activations&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt; of type &lt;code&gt;float32&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84478c6f9860d3b35c6ce031aa0ffe407fca740e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;min_after_dequeue&lt;/code&gt;&lt;/b&gt;: An integer (described above).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b46cdf3dead51647be20917d4782ed4c9bc99c34" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;min_after_dequeue&lt;/code&gt;&lt;/b&gt;: Minimum number elements in the queue after a dequeue, used to ensure a level of mixing of elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a044a27dfebb3036fcf974aefbcba7b85a2e722" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;min_bytes&lt;/code&gt;&lt;/b&gt;: Only show profiler nodes requested to allocate no less bytes than this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72204b284d7d5d848f6ca33a34618536bb65a2a3" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;min_cpu_micros&lt;/code&gt;&lt;/b&gt;: Only show profiler nodes spend no less than this time on cpu.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af8fad59922f3ab8ae1475800cd6c93ae518e9ee" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;min_cuda_compute_capability&lt;/code&gt;&lt;/b&gt;: a (major,minor) pair that indicates the minimum CUDA compute capability required, or None if no requirement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5635a2e46c5a7fb0a5a4c36313f1a85f5b609a95" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;min_delta&lt;/code&gt;&lt;/b&gt;: Minimum change in the monitored quantity to qualify as an improvement, i.e. an absolute change of less than min_delta, will count as no improvement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b529a1acf0d951ba37b394d2cb078b167786f93" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;min_delta&lt;/code&gt;&lt;/b&gt;: threshold for measuring the new optimum, to only focus on significant changes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30d430245feddf5a34847f371ec26f14fdbfa6c2" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;min_features&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt; of type &lt;code&gt;float32&lt;/code&gt;. The float value that the lowest quantized value represents.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18e78b65fe4501d1aed00b3f60534b2dda121e65" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;min_filter&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt; of type &lt;code&gt;float32&lt;/code&gt;. The float value that the lowest quantized filter value represents.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06661d151c4ea2ac50694e69b91217ea28162864" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;min_float_ops&lt;/code&gt;&lt;/b&gt;: Only show profiler nodes with float operations no less than this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db2fccef58a573a428a68a7cdb318fd21a8070f0" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;min_input&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt; of type &lt;code&gt;float32&lt;/code&gt;. The float value that the lowest quantized input value represents.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32803555cfcbae54804b6dcc5c2223093957a8ed" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;min_interval_secs&lt;/code&gt;&lt;/b&gt;: The minimum number of seconds between yielding checkpoints.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9fa7a205000e3f4189f400e58a79cc57563d6a6" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;min_iters&lt;/code&gt;&lt;/b&gt;: Minimum number of iterations to use for timing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53a2cc72b8a13ee1930fe829867575fc16134c14" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;min_jpeg_quality&lt;/code&gt;&lt;/b&gt;: Minimum jpeg encoding quality to use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0daefae227c815d840ad772ad925256049d1ca9d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;min_lr&lt;/code&gt;&lt;/b&gt;: lower bound on the learning rate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9d960828f460b42ebcb142bb69ec00974033e71" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;min_micros&lt;/code&gt;&lt;/b&gt;: Only show profiler nodes with execution time no less than this. It sums accelerator and cpu times.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d1c94741e959c8903a2f3e352e77958e185ad04" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;min_ndim&lt;/code&gt;&lt;/b&gt;: Integer, minimum rank of the input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af1a41f9dc54a17d71d119a5b7c3d3f01ea3c83b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;min_node_weight&lt;/code&gt;&lt;/b&gt;: min_node_weight: minimum hessian a node must have for a split to be considered. The value will be compared with sum(leaf_hessian)/(batch_size * n_batches_per_layer).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8afe4335da871c32657e8abca84a82fb781c9a95" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;min_node_weight&lt;/code&gt;&lt;/b&gt;: minimum hessian a node must have for a split to be considered. The value will be compared with sum(leaf_hessian)/ (batch_size * n_batches_per_layer).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b585eb95936022fb83aad8eb7c96d63127f58bf8" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;min_object_covered&lt;/code&gt;&lt;/b&gt;: A Tensor of type &lt;code&gt;float32&lt;/code&gt;. Defaults to &lt;code&gt;0.1&lt;/code&gt;. The cropped area of the image must contain at least this fraction of any bounding box supplied. The value of this parameter should be non-negative. In the case of 0, the cropped area does not need to overlap any of the bounding boxes supplied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="497db4b087bdc06dc5c0db31aea99f4499810d62" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;min_occurrence&lt;/code&gt;&lt;/b&gt;: Only show nodes including no less than this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15b5942113055ddfeaedb8917398dc910c820855" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;min_output&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt; of type &lt;code&gt;float32&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92f24abc7e56702e17e0b093632a070c9c526421" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;min_output_bytes&lt;/code&gt;&lt;/b&gt;: Only show profiler nodes have no less than this bytes output. The output are not necessarily allocated by this profiler nodes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12b2e279e9b8ddb26023e558612f6abe3e02da00" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;min_params&lt;/code&gt;&lt;/b&gt;: Only show profiler nodes holding number parameters no less than this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f38c75a92f3ff1de06997fe983b804ef41bcb32" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;min_peak_bytes&lt;/code&gt;&lt;/b&gt;: Only show profiler nodes using no less than this bytes at peak (high watermark). For profiler nodes consist of multiple graph nodes, it sums the graph nodes' peak_bytes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbef56bd175bf99501da9b5f9f5559ea9dc1b365" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;min_range&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt; of type &lt;code&gt;float32&lt;/code&gt;. The minimum scalar value possibly produced for the input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7a3ac6413d000fa0949d33f22be1dcf86f65828" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;min_range&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt; of type &lt;code&gt;float32&lt;/code&gt;. The minimum value of the quantization range. This value may be adjusted by the op depending on other parameters. The adjusted value is written to &lt;code&gt;output_min&lt;/code&gt;. If the &lt;code&gt;axis&lt;/code&gt; attribute is specified, this must be a 1-D tensor whose size matches the &lt;code&gt;axis&lt;/code&gt; dimension of the input and output tensors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b4b3e40b520c9448e20b01eeb4408b60d40edc2" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;min_residual_bytes&lt;/code&gt;&lt;/b&gt;: Only show profiler nodes have no less than this bytes not being de-allocated after Compute() ends. For profiler nodes consist of multiple graph nodes, it sums the graph nodes' residual_bytes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a18d7a9bceccc6437a1d1dbdd73ea497b8cbfb5" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;min_slice_size&lt;/code&gt;&lt;/b&gt;: Minimum size of the variable slice per partition. Defaults to 256K.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5674bc80c51fe18b45d93b3e3c8574ba2066e30" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;min_steps&lt;/code&gt;&lt;/b&gt;: &lt;code&gt;int&lt;/code&gt;, stop is never requested if global step is less than this value. Defaults to 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1988080c6c83a42d7f329001aa0a5f197f9f934b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;min_value&lt;/code&gt;&lt;/b&gt;: Python float, integer, or tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="775cf9c6e93ed9605e48e69920ba9325bd871bbf" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;min_value&lt;/code&gt;&lt;/b&gt;: the minimum norm for the incoming weights.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ba14aba8f8409ea22326993f8fe1e2aa4af41b7" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;mini_batch_steps_per_iteration&lt;/code&gt;&lt;/b&gt;: The number of steps after which the updated cluster centers are synced back to a master copy. Used only if &lt;code&gt;use_mini_batch=True&lt;/code&gt;. See explanation above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65df004bbc16f869c3d40377911b78cab2f483c0" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;minlength&lt;/code&gt;&lt;/b&gt;: If given, ensures the output has length at least &lt;code&gt;minlength&lt;/code&gt;, padding with zeros at the end if necessary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2467f2ab82f2a47509fbcb3b502706de70cef157" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;minval&lt;/code&gt;&lt;/b&gt;: A 0-D Tensor or Python value of type &lt;code&gt;dtype&lt;/code&gt;. The lower bound on the range of random values to generate. Defaults to 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="163db457e1187e97df7613eb69f5acafaaabafcf" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;minval&lt;/code&gt;&lt;/b&gt;: A Tensor or Python value of type &lt;code&gt;dtype&lt;/code&gt;, broadcastable with &lt;code&gt;maxval&lt;/code&gt;. The lower bound on the range of random values to generate (inclusive). Defaults to 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="475e3b9695364e2c4ae101b5d4a040674b6ec108" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;minval&lt;/code&gt;&lt;/b&gt;: A float, lower boundary of the uniform distribution to draw samples.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca8effc4d414286feb48816122a9a3ae93bbe5a0" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;minval&lt;/code&gt;&lt;/b&gt;: A python scalar or a scalar tensor. Lower bound of the range of random values to generate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="036287b42a2f9d55ff2d707b99f6b110dbf44635" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;minval&lt;/code&gt;&lt;/b&gt;: A python scalar or a scalar tensor. Lower bound of the range of random values to generate. Defaults to -0.05.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="986f0e285461b57e20fc5fdcb3192764c6e7b164" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;mitchellcubic&lt;/code&gt;&lt;/b&gt;: Mitchell-Netravali Cubic non-interpolating filter. For synthetic images (especially those lacking proper prefiltering), less ringing than Keys cubic kernel but less sharp.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa987755bbba6f8acd4612ce536401d2f06db76f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;mode&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;ModeKeys&lt;/code&gt;. Specifies if this is training, evaluation or prediction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d6899bfa1e2deae0df6fb4237045b427324fca7" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;mode&lt;/code&gt;&lt;/b&gt;: An optional &lt;code&gt;string&lt;/code&gt; from: &lt;code&gt;&quot;MIN_COMBINED&quot;, &quot;MIN_FIRST&quot;, &quot;SCALED&quot;&lt;/code&gt;. Defaults to &lt;code&gt;&quot;MIN_COMBINED&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93c267c41bfb162a5a8d2a81f2e5476870e1e15c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;mode&lt;/code&gt;&lt;/b&gt;: Estimator's &lt;code&gt;ModeKeys&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="179693195224357651451dce804662a6bd1f1444" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;mode&lt;/code&gt;&lt;/b&gt;: Estimator's &lt;code&gt;ModeKeys&lt;/code&gt;. To be used in case loss calculation is different in Train and Eval mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a0b0623c2c2bf686b1ebd1aaee7ecdbd0b5fe07" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;mode&lt;/code&gt;&lt;/b&gt;: Mode string to use when writing content. Only used if &lt;code&gt;content&lt;/code&gt; is non-empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c12353610b24e11c8669331f9ebba34dc5a0b65" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;mode&lt;/code&gt;&lt;/b&gt;: One of &quot;CONSTANT&quot;, &quot;REFLECT&quot;, or &quot;SYMMETRIC&quot; (case-insensitive)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5481e4db17956de2d43188e11f2ae2578b0c6380" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;mode&lt;/code&gt;&lt;/b&gt;: One of &quot;fan_in&quot;, &quot;fan_out&quot;, &quot;fan_avg&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb767fb9ab0da0117e89b89b6414e98c0b871e51" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;mode&lt;/code&gt;&lt;/b&gt;: One of &lt;code&gt;{&quot;auto&quot;, &quot;min&quot;, &quot;max&quot;}&lt;/code&gt;. In &lt;code&gt;min&lt;/code&gt; mode, training will stop when the quantity monitored has stopped decreasing; in &lt;code&gt;max&lt;/code&gt; mode it will stop when the quantity monitored has stopped increasing; in &lt;code&gt;auto&lt;/code&gt; mode, the direction is automatically inferred from the name of the monitored quantity.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad069af02436ba50fd6aecfb3e1ea00afca633a5" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;mode&lt;/code&gt;&lt;/b&gt;: TRAIN / EVAL / PREDICT ModeKeys.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5dcd5260325c741d394cc5f91144a9414e99abce" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;mode&lt;/code&gt;&lt;/b&gt;: one of {auto, min, max}. If &lt;code&gt;save_best_only=True&lt;/code&gt;, the decision to overwrite the current save file is made based on either the maximization or the minimization of the monitored quantity. For &lt;code&gt;val_acc&lt;/code&gt;, this should be &lt;code&gt;max&lt;/code&gt;, for &lt;code&gt;val_loss&lt;/code&gt; this should be &lt;code&gt;min&lt;/code&gt;, etc. In &lt;code&gt;auto&lt;/code&gt; mode, the direction is automatically inferred from the name of the monitored quantity.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24ea054b49cf23ad2cf093ccaf9ee2da8d8f45c0" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;mode&lt;/code&gt;&lt;/b&gt;: one of {auto, min, max}. In &lt;code&gt;min&lt;/code&gt; mode, lr will be reduced when the quantity monitored has stopped decreasing; in &lt;code&gt;max&lt;/code&gt; mode it will be reduced when the quantity monitored has stopped increasing; in &lt;code&gt;auto&lt;/code&gt; mode, the direction is automatically inferred from the name of the monitored quantity.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d57329d084f9616f1bf0b9fa0151d3e7cd98b26" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;model&lt;/code&gt;&lt;/b&gt;: A &lt;a href=&quot;../../../../keras/model&quot;&gt;&lt;code&gt;tf.keras.Model&lt;/code&gt;&lt;/a&gt; to be saved. If the model is subclassed, the flag &lt;code&gt;serving_only&lt;/code&gt; must be set to True.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4405a223d8144369b0a9e27d9e48f2dc635de12c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;model&lt;/code&gt;&lt;/b&gt;: A Keras model instance</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50b10f8bed47689a0bf31e53aa478b2bd2bbba6b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;model&lt;/code&gt;&lt;/b&gt;: A Keras model instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6585421060042315cf9350c4ec1de0f39eac453c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;model&lt;/code&gt;&lt;/b&gt;: A Keras model instance. To avoid OOM errors, this model could have been built on CPU, for instance (see usage example below).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0edd5488e523eaf6c65cf84012098bf275e867d8" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;model&lt;/code&gt;&lt;/b&gt;: Instance of &lt;code&gt;Model&lt;/code&gt; (could be a functional model or a Sequential model).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d444feb70a00022915dedb02679bcc0d8c8c6248" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;model&lt;/code&gt;&lt;/b&gt;: Keras model instance to be saved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24aaca8b35e263d44b31fdc34bebee08ec18f294" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;model&lt;/code&gt;&lt;/b&gt;: instance of &lt;a href=&quot;../model&quot;&gt;&lt;code&gt;keras.models.Model&lt;/code&gt;&lt;/a&gt;. Reference of the model being trained.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0896364f97d49aac72a1d9f3742e6894d5b97f5c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;model&lt;/code&gt;&lt;/b&gt;: target model for the conversion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6f61d712ab013bc646c07195504f113cb0a574f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;model&lt;/code&gt;&lt;/b&gt;: tf.Keras.Model</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c30d4326481d90f34daebeb78b11ca75663df5e4" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;model_checkpoint_path&lt;/code&gt;&lt;/b&gt;: The checkpoint file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="177954d07a6e57fda59a48e211f9aa07ec2af291" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;model_content&lt;/code&gt;&lt;/b&gt;: Content of model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08423df580af6161ff3ce8fa62fb37fd7a4246fe" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;model_dir&lt;/code&gt;&lt;/b&gt;: Directory to save &lt;code&gt;Estimator&lt;/code&gt; model parameters, graph, summary files for TensorBoard, etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f6ed776ab36e23b3e84d118f0074d2c063a85ec" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;model_dir&lt;/code&gt;&lt;/b&gt;: Directory to save model parameters, graph and etc. This can also be used to load checkpoints from the directory into a estimator to continue training a previously saved model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23490214c24472642a411f47c0693e26bbf07508" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;model_dir&lt;/code&gt;&lt;/b&gt;: Directory to save model parameters, graph and etc. This can also be used to load checkpoints from the directory into a estimator to continue training a previously saved model. If &lt;code&gt;None&lt;/code&gt;, the model_dir in &lt;code&gt;config&lt;/code&gt; will be used if set. If both are set, they must be same. If both are &lt;code&gt;None&lt;/code&gt;, a temporary directory will be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ea8c3398778a1bab0140887bb650bebb316f41d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;model_dir&lt;/code&gt;&lt;/b&gt;: Directory to save model parameters, graph and etc. This can also be used to load checkpoints from the directory into an estimator to continue training a previously saved model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36ce9272a0a4bc76389a7d1c62ab0ce30a0da9de" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;model_dir&lt;/code&gt;&lt;/b&gt;: Directory to save model parameters, graph and etc. This can also be used to load checkpoints from the directory into an estimator to continue training a previously saved model. If &lt;code&gt;PathLike&lt;/code&gt; object, the path will be resolved. If &lt;code&gt;None&lt;/code&gt;, the model_dir in &lt;code&gt;config&lt;/code&gt; will be used if set. If both are set, they must be same. If both are &lt;code&gt;None&lt;/code&gt;, a temporary directory will be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4e773dd5d968b5137981e3c96312ae317c83cab" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;model_dir&lt;/code&gt;&lt;/b&gt;: The directory to save the model results and log files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e28efecc4f7ff91d36e31f456fa9b32b8b5022b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;model_dir&lt;/code&gt;&lt;/b&gt;: directory where model parameters, graph, etc are saved. If &lt;code&gt;PathLike&lt;/code&gt; object, the path will be resolved. If &lt;code&gt;None&lt;/code&gt;, will use a default value set by the Estimator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1605094bd6461e7f4c740902d0a13350ed29ab2" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;model_file&lt;/code&gt;&lt;/b&gt;: Full filepath of HDF5 file containing the tf.keras model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9ac9b03924a29328c9492ea26adacc80eb9b2a6" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;model_fn&lt;/code&gt;&lt;/b&gt;: Model function as required by &lt;code&gt;Estimator&lt;/code&gt; which returns EstimatorSpec or TPUEstimatorSpec. &lt;code&gt;training_hooks&lt;/code&gt;, 'evaluation_hooks', and &lt;code&gt;prediction_hooks&lt;/code&gt; must not capure any TPU Tensor inside the model_fn.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c83089d25d2eb1ce0b45649d68ef951f5dfcebc" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;model_fn&lt;/code&gt;&lt;/b&gt;: Model function. Follows the signature:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d5ff4286647bb996c76571b37ab9ff72e7260b3" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;model_path&lt;/code&gt;&lt;/b&gt;: Path to TF-Lite Flatbuffer file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dba52dd6972a4d957ca9d173e34d460d5898ced6" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;module&lt;/code&gt;&lt;/b&gt;: module, the module object from which all key flags will be declared as key flags to the current module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a6ff80b92816b5d9dab848482d54dbc7022bbd9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;module&lt;/code&gt;&lt;/b&gt;: module|str, the module to describe the key flags for.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="404003fefc33fbe3d788a74a50826da97d00de7c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;module&lt;/code&gt;&lt;/b&gt;: module|str, the module to get key flags from.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcb4307e59357204907f0063a6185a075960e022" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;module_id&lt;/code&gt;&lt;/b&gt;: int, the ID of the Python module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ea3ad623fad4bee6df130af9b29c7f182e3f186" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;module_name&lt;/code&gt;&lt;/b&gt;: A string, the name of the Python module declaring this flag. If not provided, it will be computed using the stack trace of this call.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45f99fc980b31e4dc84274aec9c5c704c2020290" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;module_name&lt;/code&gt;&lt;/b&gt;: A string, the name of the module that defines this flag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="540aba1c03db3470e0e885419488c7e5bfbec754" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;module_name&lt;/code&gt;&lt;/b&gt;: str, the name of a Python module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4106875e7fcf6549f70baa99f435b3e222ce67d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;module_name&lt;/code&gt;&lt;/b&gt;: str, the name of the Python module declaring this flag. If not provided, it will be computed using the stack trace of this call.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd7bbdabd62f37bab62a314fefbc7e3dfe9a05dd" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;momentum&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt; or a floating point value. The momentum.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="990e96c661a04df0d001322e74b429ec0f453d57" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;momentum&lt;/code&gt;&lt;/b&gt;: A scalar tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="610d9ec6ea4cdf97faae562e149c9f18f44c6bbc" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;momentum&lt;/code&gt;&lt;/b&gt;: Momentum for the moving average.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55d8e78ddf4e0fe1697aa95b979bf6ec8eacf984" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;momentum&lt;/code&gt;&lt;/b&gt;: The moving average momentum.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fa5ac862f180db151974b93ccd372057d162359" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;momentum&lt;/code&gt;&lt;/b&gt;: float hyperparameter &amp;gt;= 0 that accelerates SGD in the relevant direction and dampens oscillations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eeff1e9fc59ac95aec283f2dbf91af791ace2e5d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;monitor&lt;/code&gt;&lt;/b&gt;: Quantity to be monitored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e42b8457c9d798e488ceeaa6233efaee45e6483" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;monitor&lt;/code&gt;&lt;/b&gt;: quantity to be monitored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="844620845ea71fa64705f91b17584faca78857a4" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;monitor&lt;/code&gt;&lt;/b&gt;: quantity to monitor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73423183189cc7e09f88914dcd3280fd1b6d66ce" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;month&lt;/code&gt;&lt;/b&gt;: A month (1 &amp;lt;= month &amp;lt;= 12) in year. Must be an &lt;code&gt;int&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64d90c84052b6c2baf684bc6540d23dbd9d634e8" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;moving_avg_variables&lt;/code&gt;&lt;/b&gt;: a list of variables that require to use of the moving average variable name to be restored. If None, it will default to variables.moving_average_variables() + variables.trainable_variables()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf7244158a08751171b439381d96941aece38d18" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;moving_mean_initializer&lt;/code&gt;&lt;/b&gt;: Initializer for the moving mean.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cc5373bd2e008c77066ded884a2d651896f0e28" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;moving_variance_initializer&lt;/code&gt;&lt;/b&gt;: Initializer for the moving variance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e29718b99ebe383bf144c216354faffa0ff03071" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;msg&lt;/code&gt;&lt;/b&gt;: Additional text to include in the failure message.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="228437465906917ce8f6a0f163a8c4211cfb4960" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;msg&lt;/code&gt;&lt;/b&gt;: An optional str, the associated message.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbfa098c667c85e35423faf367c1602d45a64ac7" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;msg&lt;/code&gt;&lt;/b&gt;: An optional string message to append to the failure message.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5234d4ab68978433fee379f218631ea349399cb4" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;msg&lt;/code&gt;&lt;/b&gt;: Message to log on failure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb5a667c772474f3cafd45eac1ddc0241300114c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;msg&lt;/code&gt;&lt;/b&gt;: Optional message to report on failure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a722a1b106cc8c24d480870bb40aacffcdc83e72" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;msg&lt;/code&gt;&lt;/b&gt;: Optional message to use on failure instead of a list of differences.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c0e2d31545f6c1a3292004e6d5ccbeef583277e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;msg&lt;/code&gt;&lt;/b&gt;: Optional message used in case of failure. Can only be used when assertRaisesRegex is used as a context manager.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd4ff8d081b54f415546f8b673f3dc262bf2e48e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;msg&lt;/code&gt;&lt;/b&gt;: Optional message used in case of failure. Can only be used when assertWarnsRegex is used as a context manager.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a91fb51bae469a3d93994584ede96a6148549070" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;msg&lt;/code&gt;&lt;/b&gt;: The message to be logged.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a55b63503c791d3302f41b5eca92e79df240dff" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;msg&lt;/code&gt;&lt;/b&gt;: The message to be printed if the test fails.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e0301ac11b298764c21dd647755922c74c45a82" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;multi_class_labels&lt;/code&gt;&lt;/b&gt;: &lt;code&gt;[batch_size, num_classes]&lt;/code&gt; target integer labels in &lt;code&gt;{0, 1}&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="630b28bef6d780d3a0693433a63f306f138d7703" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;multi_flags_checker&lt;/code&gt;&lt;/b&gt;: callable, a function to validate the flag. input - dict, with keys() being flag_names, and value for each key being the value of the corresponding flag (string, boolean, etc). output - bool, True if validator constraint is satisfied. If constraint is not satisfied, it should either return False or raise flags.ValidationError.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a6bdf133fd9c13eae12a8622e7da0e0629730f9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;multi_label&lt;/code&gt;&lt;/b&gt;: boolean indicating whether multilabel data should be treated as such, wherein AUC is computed separately for each label and then averaged across labels, or (when False) if the data should be flattened into a single label before AUC computation. In the latter case, when multilabel data is passed to AUC, each label-prediction pair is treated as an individual data point. Should be set to False for multi-class data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c170b463e295829bfd9f6e5ffe762196cecfb54" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;multiples&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt;. Must be one of the following types: &lt;code&gt;int32&lt;/code&gt;, &lt;code&gt;int64&lt;/code&gt;. 1-D. Length must be the same as the number of dimensions in &lt;code&gt;input&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="346c18dcb3d3fad24ca6a78cac59ac6fe4f9a441" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;multiplier&lt;/code&gt;&lt;/b&gt;: &lt;code&gt;Tensor&lt;/code&gt; of shape &lt;code&gt;[B1,...,Bb]&lt;/code&gt;, or &lt;code&gt;[]&lt;/code&gt; (a scalar).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11e601bbb9501483e73d2f31a12aba74cf4376f2" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;multiplier&lt;/code&gt;&lt;/b&gt;: The multiplier to use when increasing or decreasing the loss scale.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2838a537f9cf3f47238940e36f7e67b92f35ab30" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;n&lt;/code&gt;&lt;/b&gt;: A list of integer. The length must be the same as the number of dimensions in &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f2c16ac279d88d6008642ffbc47bcf62634d141" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;n&lt;/code&gt;&lt;/b&gt;: A scalar &lt;code&gt;Tensor&lt;/code&gt; containing the number of elements to dequeue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d50fcdd01567984ebabfc940c622b5745f20e6ee" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;n&lt;/code&gt;&lt;/b&gt;: For future expansion. The length of the transform. Must be &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ed5fc52acd8136ecb050ffe31ed334ceda64852" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;n&lt;/code&gt;&lt;/b&gt;: Integer, repetition factor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42f478e2667542286aacdf05e98e054a87d06528" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;n&lt;/code&gt;&lt;/b&gt;: Python integer, number of times to repeat.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2279a2608be31361191c32c6e98de2f0477ddc6f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;n&lt;/code&gt;&lt;/b&gt;: Read &lt;code&gt;n&lt;/code&gt; bytes if &lt;code&gt;n != -1&lt;/code&gt;. If &lt;code&gt;n = -1&lt;/code&gt;, reads to end of file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb9e33552de71b4b4df626526117388b5c69d62e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;n&lt;/code&gt;&lt;/b&gt;: The length of the transform. If length is less than sequence length, only the first n elements of the sequence are considered for the DCT. If n is greater than the sequence length, zeros are padded and then the DCT is computed as usual.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36327edcc5de6a67e2472362293fe3bacbcb8ebd" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;n&lt;/code&gt;&lt;/b&gt;: The number of times this should be called before it is logged.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64a19db1821e75beb7f31714ea0284a8e7743e3d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;n_batches_per_layer&lt;/code&gt;&lt;/b&gt;: the number of batches to collect statistics per layer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3321a0cee78ac9d1070806a8b04b1ad8f3db2bfe" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;n_batches_per_layer&lt;/code&gt;&lt;/b&gt;: the number of batches to collect statistics per layer. The total number of batches is total number of data divided by batch size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7e06c346ccd3ab7e35e249fd4ba037782108a5b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;n_classes&lt;/code&gt;&lt;/b&gt;: Number of classes, must be greater than 1 (for 1 class, use &lt;code&gt;BinaryClassHead&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98377410cb78aac8c8198c783d8ae96ab103e253" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;n_classes&lt;/code&gt;&lt;/b&gt;: Number of classes, must be greater than 2 (for 2 classes, use &lt;code&gt;BinaryClassHead&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d16d68949ce51e76d4933e1fcf5905530f3c2fa" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;n_classes&lt;/code&gt;&lt;/b&gt;: Number of label classes. Defaults to 2, namely binary classification. Must be &amp;gt; 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0e6c094a23b4cb4b2b4fda096620caf2db7f7c0" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;n_classes&lt;/code&gt;&lt;/b&gt;: number of label classes. Default is binary classification. It must be greater than 1. Note: Class labels are integers representing the class index (i.e. values from 0 to n_classes-1). For arbitrary label values (e.g. string labels), convert to class indices first.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9139187ca3fc84b2495bcf9a0ebe183d69209472" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;n_classes&lt;/code&gt;&lt;/b&gt;: number of label classes. Default is binary classification. Multiclass support is not yet implemented.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dc38a7b1ee7835b198e51e1734daf4ce13b241d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;n_classes&lt;/code&gt;&lt;/b&gt;: number of label classes. Default is binary classification. Note that class labels are integers representing the class index (i.e. values from 0 to n_classes-1). For arbitrary label values (e.g. string labels), convert to class indices first.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f15b62f15f395afa68a6d406b3b3a18c5e6dc66" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;n_trees&lt;/code&gt;&lt;/b&gt;: number trees to be created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0780118b6fd3c9ecc8d1c1ccc48008b1fb538fe" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;na_value&lt;/code&gt;&lt;/b&gt;: (Optional.) A &lt;a href=&quot;../../../../../tf#string&quot;&gt;&lt;code&gt;tf.string&lt;/code&gt;&lt;/a&gt; scalar indicating a value that will be treated as NA/NaN.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64317915b0e9a07666df982c0526128a88356fc2" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;na_value&lt;/code&gt;&lt;/b&gt;: (Optional.) A &lt;a href=&quot;../../../tf#string&quot;&gt;&lt;code&gt;tf.string&lt;/code&gt;&lt;/a&gt; scalar indicating a value that will be treated as NA/NaN.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="063a68bea2879f99e299fd1729c61dcf777668b9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;na_value&lt;/code&gt;&lt;/b&gt;: Additional string to recognize as NA/NaN.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31605694a5c32aa8c6882313f6b7027cd197afe5" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: (Deprecated) Does nothing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da5a649647abf10218d34cda812010b5832a35b6" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: (Optional) A name for the operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24c16e188d62876f967cbdc02413a9dac9b23e1f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: (Optional) A name for the operations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60c9d3e8e8c9ec21490ba9692f902fbb5b73c89b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: (Optional) Name for the op.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17429fbb2483fb6d6830da1a2078772110642a19" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: (Optional) string name of the metric instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2e69e65253bb84890fe2447f2521224fca09530" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: (Optional.) A name for queue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5362dbd1699e51d8a3b7d181719c0886de42436" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: (Optional.) A name for the created operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f6991bd7ee757ea118a9fba8b796f5ad07c1177" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: (Optional.) A name to use if a new &lt;code&gt;Tensor&lt;/code&gt; is created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce9f7175cdf760706fe852c8c11b41c659d58448" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: (Optional.) A prefix that will be prepended to the names in &lt;code&gt;graph_def&lt;/code&gt;. Note that this does not apply to imported function names. Defaults to &lt;code&gt;&quot;import&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03eca21f6cf957865aa946829f68516739fb786d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: (Optional.) A string name for the operation. If not specified, a name is generated based on &lt;code&gt;op_type&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a75a89b65fcb8680c0fd62c5c17a8f2194ab2e66" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: (optional) A name to use as a &lt;code&gt;name_scope&lt;/code&gt; for the operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="312d8a9073c030f3801caf475605f941803d438a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: (optional) Name prefix for the returned tensors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4bbc0e45082e3b4b4d06a1e9023d91eed8852d1" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: (optional) Override the BenchmarkEntry name with &lt;code&gt;name&lt;/code&gt;. Otherwise it is inferred from the top-level method name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60958a5fcca8aae627dcbde0a26f858810c352ba" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: (optional) the name of the node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e9422b2ab9e8dba8e47b6af9027781ded69afab" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: A name for prefixing the operations (optional).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea2422df5d0150d11908b4177f2515111a4f86a9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: A name for the generated node. If display_name is not set, it will also serve as the tag name in TensorBoard. (In that case, the tag name will inherit tf name scopes.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f685f24942c887596a1361d7b0f4510eb79730d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: A name for the generated node. Will also serve as a series name in TensorBoard.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a377f9dc8940956fed6e9c6b669613a02e48e43c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: A name for the generated node. Will also serve as the series name in TensorBoard.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57fdb56485530207be9728f6dc9550e3c40b5f53" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: A name for the operation (optional)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b00ef7fbf76fa9ba254687cfd69f337e3816483f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: A name for the operation (optional).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92d3a1237610f93d402f10a02c8866194cb10fae" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: A name for the operation (optional). If not specified &quot;conv_transpose&quot; is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b2503ddabbd82f4e1a58b6ba2a097a0ea7d32cc" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: A name for the operation (optional). If not specified &quot;erosion2d&quot; is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22fd9bdbb4b10e916e45fb575fcf03937d3ed8a3" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: A name for the operation (optional). If not specified &quot;nn_relu_layer&quot; is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87b5c3e227e94d89a9061d2cbd30db68ecede7b4" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: A name for the operation (optional). If not specified &quot;xw_plus_b&quot; is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48819aec54423959b270adfdbc12a1e63934de24" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: A name for the operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9a0cfeec4161e153f6d98493160a12d571da965" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: A name for the operation. Defaults to &quot;range&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="080bbef7bd17ad8e6ef9d81306ba9475923c99ea" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: A name for the operations (optional).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2803733af46bb6f921c090e66cf417bac9dc3d5" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: A name for the scope.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cad70145754c026346882f59291b2041f708e270" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: A name for the summary to be written.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e8a9b8db540b95f3f4ef19c93276c9d64baa59b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: A name for this &lt;code&gt;LinearOperator&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63821f039bdd104e2b73d4d6eb1ab8337259c502" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: A name for this &lt;code&gt;LinearOperator&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc3daed5345bdbea49c11c8d0497a9c87d6a300c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: A name for this &lt;code&gt;LinearOperator&lt;/code&gt;. Default is &lt;code&gt;operator.name + &quot;_adjoint&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0b500c03ac11b80d43faf57e9f96d5d546fb409" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: A name for this &lt;code&gt;LinearOperator&lt;/code&gt;. Default is &lt;code&gt;operator.name + &quot;_inv&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c21fb85f25e4803a96a73209bf796d8b649eff4" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: A name for this &lt;code&gt;LinearOperator&lt;/code&gt;. Default is the individual operators names joined with &lt;code&gt;_o_&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="babcc3608038ada83bdf4a81fc4b08bf66f9de00" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: A name for this &lt;code&gt;LinearOperator&lt;/code&gt;. Default is the individual operators names joined with &lt;code&gt;_x_&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26b55ea98ba7feaa6721f2927b076564685a21e2" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: A name for this &lt;code&gt;Op&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="086a507820c3e908e291bd9a3ef6130a5c4b664a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: A name for this &lt;code&gt;Op&lt;/code&gt;. Defaults to &quot;collapse_repeated_labels&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e7848d432d0065e72b75efc11d8278e527f79db" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: A name for this &lt;code&gt;Op&lt;/code&gt;. Defaults to &quot;ctc_loss_dense&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a8ef86358e6c18559cb3890ee523b779bf3705a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: A name for this &lt;code&gt;Op&lt;/code&gt;. Defaults to &quot;ctc_unique_labels&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48534e7c95f99c8d6a7bdcce9a99da7b5cb68fb5" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: A name for this &lt;code&gt;Op&lt;/code&gt;. Defaults to &quot;eye&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8de84d19e18db11d1d5677207d9748c48d944493" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: A name for this operation (defaults to 'histogram_fixed_width').</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27b35578278e97edc8ef3da3a0bb696917b74068" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: A name for this operation (optional).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5edd0c4e6d6f45730a07e0b4dc0c84722100f36" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: A name for this operation (optional). Defaults to &quot;EnsureShape&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="911d58b6ed6f597dd32bcfbf3b61cc2b18518c78" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: A name for this operation (optional). Defaults to &quot;assert_equal&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="523367bc0ac0354484967dbf0acbb74b8739044c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: A name for this operation (optional). Defaults to &quot;assert_greater&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8735dc20ba89ab6e348fb247381f188030c3dcb5" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: A name for this operation (optional). Defaults to &quot;assert_greater_equal&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40292a6ed9006a198f57fd2f61b5e8bfc0450f4e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: A name for this operation (optional). Defaults to &quot;assert_integer&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cef2a5713e008f4c62d0ae38afc0eeadd8ea9da9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: A name for this operation (optional). Defaults to &quot;assert_less&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb23b23fb000eaef9b393a634f8a49e50cdc8051" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: A name for this operation (optional). Defaults to &quot;assert_less_equal&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6abcd8c0c78f5a3b566809a3bea488256163493" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: A name for this operation (optional). Defaults to &quot;assert_near&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b50d2269cf9dc138b0361a95be0f6b312b3356b1" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: A name for this operation (optional). Defaults to &quot;assert_negative&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ddc56259c9b1593efedd505a33ebd317723bb68" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: A name for this operation (optional). Defaults to &quot;assert_non_negative&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c50b00e4ab8afbe5819528961c77fa869efa1c5" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: A name for this operation (optional). Defaults to &quot;assert_non_positive&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2adcabce2e108e293c8b6ad1122458b9b959436e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: A name for this operation (optional). Defaults to &quot;assert_none_equal&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b45769fb8a65aeae1dad0b9a6725cecdaec19781" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: A name for this operation (optional). Defaults to &quot;assert_positive&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e94452ae4d8d0e4a7edaa95bc3dcbe165ffc8d4f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: A name for this operation (optional). Defaults to &quot;assert_rank&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bf7618c3d340be20dd7470b08c9e7709ffbfd91" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: A name for this operation (optional). Defaults to &quot;assert_rank_at_least&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48699651d9c2ef0da288c367f1fa73d8de38f41a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: A name for this operation (optional). Defaults to &quot;assert_rank_in&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec173732591cbf9c78801b6d1c27abddb061b549" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: A name for this operation (optional). Defaults to &quot;assert_shapes&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92607b4f188879ca8224a984ca740084974689bc" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: A name for this operation (optional). Defaults to &quot;is_non_decreasing&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7fb010b048463e1e11c3306f556a85c2ddfc790" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: A name for this operation (optional). Defaults to &quot;is_strictly_increasing&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b58f82e4344db704aac1e02f6b53fa1126d8a2b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: A name for this operation. Defaults to &quot;assert_scalar&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb8e79c417870c1713e009fe0fbd93b5c4eaf87c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: A name for this operation. Defaults to &quot;assert_type&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57b6a77bb4c8dc2967afdc3996300c459de2f642" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: A name for this summary. The summary tag used for TensorBoard will be this name prefixed by any active name scopes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fe2fdb0aa2a477d08dfdeeb113b5db4f48832a1" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: A name of the operation (optional)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c51c00abc46a2a5fcb59258eaa7864cf25f71d6" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: A name of the operation (optional).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="faf551c8d285a7fb2b5a4e74f5f62bd6a01f8e17" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: A name prefix for the RaggedTensor (optional).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cfa97a78d86e79e4ddfdb14b9e7499caf06bedf" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: A name prefix for the returned tensor (optional).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a30518128ccc9a983743776ad05f502080e09d2c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: A name prefix for the returned tensors (optional)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="738aaba0ba43a26f387a6da437eec5d2075ed71a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: A name prefix for the returned tensors (optional).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6487dd57c5a31ac8729abf1c63261d84f952c918" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: A name scope for the associated operations (optional).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="337c1a604a01770e914bcc99151426449bb2b4fe" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: A name scope to use for ops added by this method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fed0e0219008cb4d4e5b02c5dda2d7b4c57fb9d2" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: A name to give this &lt;code&gt;Op&lt;/code&gt; (optional).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4b2b9ccb11d86009399db0ce1e77e0ae2a39130" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: A name to give this &lt;code&gt;Op&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08e279397798c927b7ca431273517a89f9122613" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: A name to give this &lt;code&gt;Op&lt;/code&gt;. Defaults to &quot;assert_type&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5576d05ce0edb08daf33d0a727a7b45414dcdfeb" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: A name to give this &lt;code&gt;Op&lt;/code&gt;. Defaults to &lt;code&gt;cholesky_solve&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cc297c29d21fe9e94e159f74ccca6b2a7608cd0" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: A name to give this &lt;code&gt;Op&lt;/code&gt;. Defaults to &lt;code&gt;logdet&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce7c0e3048889e55949baaad788bdd91b8cf850b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: A name to prepend to all ops created by this class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="945248121e93f088791e32ce8f48cc988a37d3bc" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: A non-empty string. The name to use for accumulators created for the optimizer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef09b4a24ae060b06d6ad2a29b68ccfe5a39acc4" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: A string name for the foldl node in the graph</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="557642292c9809f4a744b2db1480462034492850" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: A string name for the foldr node in the graph</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10f4a1f642727bfc917d3d8dfc342387ae6e06e7" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: A string name for the map node in the graph</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69805b07f1296e70ef26566a11cb234f9eddd659" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: A string name to prepend to created ops.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bba0f8062de0c9bfe468af65264bb553784579a9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: A string with the full name of the device. ex: &lt;code&gt;/job:worker/replica:0/task:3/device:CPU:0&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94022f9039b5b78a6f1df8d1db0fb0b7c7d5f8d2" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: A string, the name of the layer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d70f5a9675e3570c95fdd503bd63b488057a4a0" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: A string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bae41b9da98e958b940e9f552a9d1909e7680b40" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: A string. Can be one of the following values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb9f7c2675597fee4d6a7d42ff04f539c7bc5128" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: A string. Optional name of the operation. Defaults to 'PiecewiseConstant'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="791ca38409c7874f1b97a02a5b17d39a51704a21" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: An optional name for the operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af94775e39b42b83393628c33ad6223f9ce8f6a1" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: An optional name string for the layer. Should be unique in a model (do not reuse the same name twice). It will be autogenerated if it isn't provided.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bb26f19494b903fee760a21d6e62142e848ded5" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: An optional variable_scope name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddcca3c6e9df7bb91620e5e5e1ad16c5189bbd5d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: Equivalent to the &lt;code&gt;name&lt;/code&gt; arg to &lt;code&gt;estimator.evaluate&lt;/code&gt;. Name of the evaluation if user needs to run multiple evaluations on different data sets, such as on training data vs test data. Metrics for different evaluations are saved in separate folders, and appear separately in tensorboard.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce482ef9db79214479e9f19561cdc384cdc1d59c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: Filename for the graph.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="918ba9479bbb586961af0ef05df5f141c8e7d284" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: Name for the operation (optional).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3790f32ba32efef978e186a1b1b8029a32549f5b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: Name of argument. This is included in the Identity hint op names.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee96233283021999348ed895a79abd62ea232164" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: Name of new update operation, and namespace for other dependent ops.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cd27f9a3132cddf8c3c198024e4553a410f9fa8" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: Name of the evaluation if user needs to run multiple evaluations on different data sets, such as on training data vs test data. Metrics for different evaluations are saved in separate folders, and appear separately in tensorboard.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ca285d0c239b31769bb97064c51c416daf6b3cf" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: Name of the head. If provided, summary and metrics keys will be suffixed by &lt;code&gt;&quot;/&quot; + name&lt;/code&gt;. Also used as &lt;code&gt;name_scope&lt;/code&gt; when creating ops.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c03ac51968cfa75d501f81146f124e6dcebb86ce" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: Name of the layer (string).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80528db0939d6c6f65fd4ab09f82f9da320cdf8c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: Name of the variable to return.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2188759cd19570fec856a7c8aaeb3eaa757db4be" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: Name to give to the DenseFeatures.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc5e5b5445631f95c9afd3a62fcfce0ce8b6d6b7" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: Name to give to the SequenceFeatures.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f12d261c3b05322344386d1403cc61dfd1362d3a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: Name used to scope the operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cf81060e69f2b9d6466cc608adaf99112aff0be" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: Name used to scope the operations that compute the moments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4555447d9c3bc55c41b9076dc93be329e4e7e85" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: Name used to scope the operations that compute the sufficient stats.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6078cf4d2d34969eabccaf6cb0c58c3fcbf8d49" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: Namespace to embed the computation in.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4b308b2a5e341970dab58601c311fa50079f2e1" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: Optional name for the Tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="798402520365862eb25491d2f5ff8f9a7736699d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: Optional name for the accumulator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e85ba5be3ca8c054aebb2a7d7c1e86b553b99de9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: Optional name for the full variable. Defaults to &lt;code&gt;&quot;PartitionedVariable&quot;&lt;/code&gt; and gets uniquified automatically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ef3d05b030c9310fde04f7f7269505fdd0e26bd" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: Optional name for the initialization op.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22afc91540ab451811176967c07686df73d24db3" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: Optional name for the op.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8d248876d3e6068bfe5d74dcaf5530aaa3b9e8f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: Optional name for the operation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0b2c9299c61f299d81838a0052db289ad3e5338" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: Optional name for the operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30f33f143772ce7dcab8202b5360e214528a8e9c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: Optional name for the operations created when applying gradients. Defaults to &quot;Adam&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84c35333400c4669327444370833aaefeb679a5b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: Optional name for the operations created when applying gradients. Defaults to &quot;Adam&quot;. @compatibility(eager) When eager execution is enabled, &lt;code&gt;learning_rate&lt;/code&gt;, &lt;code&gt;beta1&lt;/code&gt;, &lt;code&gt;beta2&lt;/code&gt;, and &lt;code&gt;epsilon&lt;/code&gt; can each be a callable that takes no arguments and returns the actual value to use. This can be useful for changing these values across different invocations of optimizer functions. @end_compatibility</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="405ce493867268df4a98293aa5097a0870557a1e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: Optional name for the operations created when applying gradients. Defaults to &quot;Adamax&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cf2224a1cc2f6a6f16eb93a56e82efd8d77dac8" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: Optional name for the queue operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2324f4adfdb92034005c90641f0d83c66324f439" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: Optional name for the returned operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5924df30a1b23644e6eb552374bacdf7dc2e8f24" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: Optional name for the returned operation. Default to the name passed to the &lt;code&gt;Optimizer&lt;/code&gt; constructor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe0147b248c102dcc249cc86e1b58a523f5f4d06" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: Optional name for the returned operation. Default to the name passed to the Optimizer constructor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="453509e491cf1415192eb3f5208f73be8a015bfa" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: Optional name for the returned tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2ce73761e3c903a0f625c4ef52319e676f041f0" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: Optional name for the tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="887816fec848233fb321a99022bf1629e30fe105" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: Optional name for the variable. Defaults to &lt;code&gt;'Variable'&lt;/code&gt; and gets uniquified automatically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b557677051728624d3994ba62224d37a73c76876" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: Optional name of the &lt;code&gt;Operation&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="184fdd10483ff1240ee83054f03f76ce47afd7cb" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: Optional name of the directory. If not given, a unique name will be generated and used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b00aa2aab93f7cbc1b578266816dc9a44068baa0" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: Optional name prefix for the operations created when applying gradients. Defaults to &quot;Adadelta&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2995ce789d8118ad470b4f45f0ccf0f2311ef36" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: Optional name prefix for the operations created when applying gradients. Defaults to &quot;Adagrad&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f0232991ae9f4a3a3aada76b56497524aa6d642" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: Optional name prefix for the operations created when applying gradients. Defaults to &quot;AdagradDA&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d817bb771c967d0507103d6d2de7680c5f66b0ff" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: Optional name prefix for the operations created when applying gradients. Defaults to &quot;CrossShardOptimizer&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8a0e0988c07b66c1a87be788adf92fc9a0fdb51" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: Optional name prefix for the operations created when applying gradients. Defaults to &quot;Ftrl&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6fc9c76543591d6eb01aa02b50184c8a313a9b0" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: Optional name prefix for the operations created when applying gradients. Defaults to &quot;GradientDescent&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ba3e0f3555b7b6378cb4cd9e938019e486e3aab" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: Optional name prefix for the operations created when applying gradients. Defaults to &quot;Momentum&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4217a775fc83ce94a598c70321e9455779898ce2" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: Optional name prefix for the operations created when applying gradients. Defaults to &quot;RMSProp&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="334543ecd801b9ebf00be80f0048e0487ceb664c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: Optional name prefix for the operations created when applying gradients. Defaults to &quot;RMSprop&quot;. @compatibility(eager) When eager execution is enabled, &lt;code&gt;learning_rate&lt;/code&gt;, &lt;code&gt;decay&lt;/code&gt;, &lt;code&gt;momentum&lt;/code&gt;, and &lt;code&gt;epsilon&lt;/code&gt; can each be a callable that takes no arguments and returns the actual value to use. This can be useful for changing these values across different invocations of optimizer functions. @end_compatibility</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b0dc782251df0740f3599884328566631b9163a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: Optional name prefix for the operations created when applying gradients. Defaults to 'SGD'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0409cd30c14e19863a01e8ad1617b6860cde480" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: Optional name prefix for the return tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c5e4b3b608cd3be9369a61a04f70b1894f27ccb" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: Optional name prefix for the returned tensors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c5ba33a40887428c2e9721e3605df8104342e42" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: Optional name string for the placeholder.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="568cf1e2732168eade5d17df8c4d0c060cd20f6b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: Optional name string for the tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5921f8455760164dfd7d69a972411d1bead7dc9b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: Optional name to use for grouping all the gradient ops together. defaults to 'gradients'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97f44d96f878d471706b96fcf78d3eebe59ef686" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: Optional name to use for grouping all the gradient ops together. defaults to 'hessians'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c74e78dccc4505a48a64d073e4cc43217962149" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: Optional name to use if a new &lt;code&gt;Tensor&lt;/code&gt; is created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0401cad9eae04f3006d38ff2552e75e1a17498a5" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: Optional op name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39ee16a95590d9be903370a0dc6d444623ca8954" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: Optional scope name string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00553714243ab554b642868bbb9859be7a8ac84c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: Optional string name for this op.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb7e0d9480257a4ab6c13334e115213eb741ed5c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: Optional string. A name for the operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="956506dfb015f5d7fb0ec3c50e10a6004513262e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: Optional string. The name of the output &lt;code&gt;Tensor&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6162c153ea5c4c1964c13b88e074f7901cab70b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: Optional. Name of the op.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df2cd041368a5d1c09410861eaef13d56a0cb8a3" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: Optional. The name of the function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c171fd46a95bba644685762bd887c90523a0f085" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: Python &lt;code&gt;str&lt;/code&gt; name given to ops managed by this object. Default value: &lt;code&gt;None&lt;/code&gt; (i.e., 'lu_matrix_inverse').</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdd2386de33029e91cd20e4b11b21c69cc6bbd56" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: Python &lt;code&gt;str&lt;/code&gt; name given to ops managed by this object. Default value: &lt;code&gt;None&lt;/code&gt; (i.e., 'lu_reconstruct').</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cce473a92b2fd0f48b39f6864aa40e0d63b3e567" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: Python &lt;code&gt;str&lt;/code&gt; name given to ops managed by this object. Default value: &lt;code&gt;None&lt;/code&gt; (i.e., 'lu_solve').</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9afaea52977f3c55a0a379e81cd1cf9a54f93d51" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: Python &lt;code&gt;str&lt;/code&gt; name prefixed to Ops created by this class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd0259a0e33223987d338ebca043407158a6966d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: Python &lt;code&gt;str&lt;/code&gt; name prefixed to Ops created by this class. Default: subclass name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eddd3c249be312965425276c0f9a49cf1c8474c0" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: Python &lt;code&gt;str&lt;/code&gt; prefixed to ops created by this function. Default value: 'matrix_rank'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d7e12a0d50a5c247fece98605fb91b3a7d5261f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: Python &lt;code&gt;str&lt;/code&gt; prefixed to ops created by this function. Default value: 'pinv'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="604dadc096cf578b95701509bfdb4bc68f2dae90" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: Python &lt;code&gt;str&lt;/code&gt; prepended to names of ops created by this function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33177f111d54aed70e03986f4340843937bce4e7" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: Scope name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ffe292946984fc944377ec9d582bee8dca253dc" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: String metric name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c08616cac373066f7904d050b259a8c65fd658c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: String name of the layer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="424fb9b474781f0bd22f5644a762ef5ab8430ce7" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: String, name for the variable to create.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04e4d9323ad418a6705dcd6ddb06551ea9f568f8" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: String, name of function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06dfad6c7c0c3efe145fa214441de4882754391c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: String, name of layer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="335fa7722c4a03c9f7c9f63cd28c33a5cd43948a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: String, name of returned Keras variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46979fd7def8401174ef3aa96c1adef8e5de1db9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: String, the name of the layer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4411614262587aab3eed6f3ac42d88ffb47852a2" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: String, the name of the layer. Layers with the same name will share weights, but to avoid mistakes we require reuse=True in such cases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a82b84988d6263897ca1b1b1a44fed848848b33" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: String. Name of the evaluation if user needs to run multiple evaluations on different data sets. Metrics for different evaluations are saved in separate folders, and appear separately in tensorboard.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a6405f790773078c8e7211f571c85198ddb270c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: String. Optional name of the operation. Defaults to 'CosineDecay'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7574f0b8a0245d50f248699fd368757668ec5ae9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: String. Optional name of the operation. Defaults to 'ExponentialDecay'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f22c635684094503b10b5d920ca949e032007139" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: String. Optional name of the operation. Defaults to 'ExponentialTimeDecay'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3a448a0043f93e8846bac69dcd878882e487d16" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: String. Optional name of the operation. Defaults to 'InverseTimeDecay'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c7eb7a5885cc8879b95511720cb65b82452d49f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: String. Optional name of the operation. Defaults to 'LinearCosineDecay'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fd440855dc09b66b5b5785624ef13cee6f777f6" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: String. Optional name of the operation. Defaults to 'NoisyLinearCosineDecay'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43f0dd548dbe8611c3fa9ba934f4c43c1472deb9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: String. Optional name of the operation. Defaults to 'PolynomialDecay'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a0ab80c6b65e9eb7a05ff3a6fe46877a4c3f9c5" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: String. Optional name of the operation. Defaults to 'SGDRDecay'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca734dc9d6f9ab3c16d007c64c17b3ae66313ce7" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: String. Optional name to use as a prefix when adding operations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a77c58245f1660bb6b4cfedb99144315d1ea0338" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: String. Optional prefix name to use for the name of ops added in &lt;code&gt;apply()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3a489d49dbdec81d28f958518b5f50e9f6c3dd5" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: The fully qualified name of the device. Can be used for Op or function placement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="088afb9cde4d5ab582febac25350a46876d79480" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: The key for the collection. For example, the &lt;code&gt;GraphKeys&lt;/code&gt; class contains many standard names for collections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af1dba0140f83a1c81d8aa6e431f0fb3447a67af" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: The key for the collection. The &lt;code&gt;GraphKeys&lt;/code&gt; class contains many standard names for collections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb78f09a92a358e8133ec0c0af1ac7cfcee87187" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: The name argument that is passed to the op function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fea0a3bd189220e456605f893e0db8f0f94e5b3" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: The name for an operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cea8a4be65a2f206f45cb0b9eaf43d4d884a14f9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: The name of the &lt;code&gt;Operation&lt;/code&gt; to return.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="966486779de503dc29055699f2252479c8b80198" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: The name of the &lt;code&gt;Tensor&lt;/code&gt; to return.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb8afd6153d0e2b27f2547c22c65b8dec5c73e15" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: The name of the actiuvation function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b9075cd35d84b249635620d9531e78acd64b308" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: The name of the attr to fetch.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed6bea5b2d60d96cf7631b1025858e9dc9029440" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: The name of the layer (string).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e3d085f245739052acbcbcc58ee711d0d8a2b8c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: The name of the new or existing variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a92b67a4021d170f234a68ff7c313e1adcc565d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: The name of the op.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa53ccd6f879c8c37733a24ea7a223eac8a6d32a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: The name of the operation to be created</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43b0d85bc322c0be18e2b151ec5a8c86efb15921" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: The name of the output &lt;code&gt;SparseTensor&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07c664fb341eede9b0576151e87217de8b7ef706" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: The name of the output &lt;code&gt;Tensor&lt;/code&gt; (optional).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2c59489642587967d1bd235c7a830aae1704d38" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: The name of the returned tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8acb3f565fb4f9d8cacaf9075947410ab4166130" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: The name to serialize this class under in this package. If None, the class's name will be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="304b6195a48161019bd3c229f1774678cc9d26e7" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: The name to use when creating the execute operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eabc7591d036849ecacaaa2138f316f04cae0631" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: The op name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4547d283ca00faf2c57f9d037b71ffa4c30ca383" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: The prefix to use on all names created within the name scope.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e4335242fa5ef92bdd1cf986f5794baa111b5cb" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: Unique identifier for device.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26b9514d0a1b9e1885b331a7a6ada4793d813ef3" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: Variable name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e25eabec4213a7d2eb6a4b43a32854da4cc66fac" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: a name for the op that creates the writer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44bc1f116675ca60d119814c99a1a377c017fb00" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: name for the variable to create.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c54d9ceb0f330c62f48cd30ca549073962a222a7" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: name of returned Keras variable</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6803a0d77a837c418e80025ec9a77ff28824c297" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: name of the current scope, used as prefix in get_variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67fc6721a85da6c4f43b652f6f31f3ef15f078af" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: name of the head. If provided, summary and metrics keys will be suffixed by &lt;code&gt;&quot;/&quot; + name&lt;/code&gt;. Also used as &lt;code&gt;name_scope&lt;/code&gt; when creating ops.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8581c1c2a8b42954c28f2c06ff781f317b909be5" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: name of the op.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17f9246696001a1c66e7d225031ac40c64d1b7f4" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: name to give to the op</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d46093bafb19a2ce3bd5e8ad649a057cdd5772f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: name to give to the op.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52d5897a3af8025f14fa90079a5036b7010d8b57" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: name to prepend ops with.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="813e6d0f0cec712d7367cce1cdde291785c3d963" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: optional name of the operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86d1f94ebb79204870791d46577051a425eb6b90" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: str, the flag name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="591a9a8ef43fc94925cd5d51f877d2c258911d39" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: str, the name of a flag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="993d11b8caba81eeefdbfb72dce06019144b307b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: str, the name of the flag to modify.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a2ce88188d53d8512dd2960e8aced10476d279e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: string name for the summary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea034a4f51f266b38c795d54e3d0256b5af1eed6" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: string or a list of string, name of the tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da74cbb323e8e445449636ed351ee0f2603ec61e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: string, optional name of the operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3349c30d159b88fbd5d8eb9f29761b4385b8e74" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: string. Optional name of the returned operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f726c9cd9e7eb1ed5a8049e46e505e674babb0ef" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: string. Optional name prefix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76fa83787769d3f6b4097a3fabeb5bbe3caca0c9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: the name of the operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be9df3684efdff3359e5bd1082e16b4fe39cab5d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name&lt;/code&gt;&lt;/b&gt;: unique name of this &lt;code&gt;Exporter&lt;/code&gt; that is going to be used in the export path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5191301e91a4cfa6c3bb0a42d380c1d4afa70020" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name_&lt;/code&gt;&lt;/b&gt;: A name for the scope created by this template. If necessary, the name will be made unique by appending &lt;code&gt;_N&lt;/code&gt; to the name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58fe0d0fc6b90007862d4f5fd5b8b826edcc3f65" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name_or_scope&lt;/code&gt;&lt;/b&gt;: &lt;code&gt;string&lt;/code&gt; or &lt;code&gt;VariableScope&lt;/code&gt;: the scope to open.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b07b04442ce5b37b159782cdb49cbc86abbfbb6" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;name_scope&lt;/code&gt;&lt;/b&gt;: The name passed to &lt;a href=&quot;../../name_scope&quot;&gt;&lt;code&gt;tf.name_scope&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7da47aaaec2f261264d731adc20b6214f952046b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;names&lt;/code&gt;&lt;/b&gt;: (Optional.) A list of string naming the components in the queue with the same length as &lt;code&gt;dtypes&lt;/code&gt;, or &lt;code&gt;None&lt;/code&gt;. If specified the dequeue methods return a dictionary with the names as keys.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfa4a631b18b61efb194eb32feb499f5270ab3d8" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;names&lt;/code&gt;&lt;/b&gt;: (Optional.) A list of strings naming the components in the queue with the same length as &lt;code&gt;dtypes&lt;/code&gt;, or &lt;code&gt;None&lt;/code&gt;. If specified, the dequeue methods return a dictionary with the names as keys.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b0a2dd57a79763975f0a2c64e768b6e234f1406" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;names&lt;/code&gt;&lt;/b&gt;: Optional list of names. If provided, the &lt;code&gt;enqueue()&lt;/code&gt; and &lt;code&gt;dequeue()&lt;/code&gt; methods will use dictionaries with these names as keys. Must be None or a list or tuple of the same length as &lt;code&gt;dtypes&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f628006882e68865f7df1a9492a8d001c677f8c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;names&lt;/code&gt;&lt;/b&gt;: The key for the collections. The &lt;code&gt;GraphKeys&lt;/code&gt; class contains many standard names for collections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9aee730a759be01e3781b4fe717debea463395ed" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;names&lt;/code&gt;&lt;/b&gt;: The keys for the collections to add to. The &lt;code&gt;GraphKeys&lt;/code&gt; class contains many standard names for collections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcc3d58dd59d15dacefa66b9a8f63c36aa4d99ce" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;namespace_whitelist&lt;/code&gt;&lt;/b&gt;: List of strings containing op namespaces to whitelist when saving a model. Saving an object that uses namespaced ops must explicitly add all namespaces to the whitelist. The namespaced ops must be registered into the framework when loading the SavedModel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fc7560d55d9c72fcaab00b14a2504788ec1d420" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;narrow_range&lt;/code&gt;&lt;/b&gt;: An optional &lt;code&gt;bool&lt;/code&gt;. Defaults to &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="800135148ce3f8de3a95c70df02c18649fdd9cce" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;narrow_range&lt;/code&gt;&lt;/b&gt;: An optional &lt;code&gt;bool&lt;/code&gt;. Defaults to &lt;code&gt;False&lt;/code&gt;. Whether to quantize into 2^num_bits - 1 distinct values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eedb733224db44cf02cd224cea863711c405555d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;narrow_range&lt;/code&gt;&lt;/b&gt;: If true, then the absolute value of the quantized minimum value is the same as the quantized maximum value, instead of 1 greater. i.e. for 8 bit quantization, the minimum value is -127 instead of -128.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a99f1bb1f5dfa39c2d02cc0a59a06eb17fee614e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;nbins&lt;/code&gt;&lt;/b&gt;: Scalar &lt;code&gt;int32 Tensor&lt;/code&gt;. Number of histogram bins.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb74e5d137afe11c7b96ec71090181d105b9e611" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ndarray1&lt;/code&gt;&lt;/b&gt;: a numpy ndarray.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba0aa3598630ad98c5d6f7bc25207f30c4fea293" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ndarray2&lt;/code&gt;&lt;/b&gt;: a numpy ndarray.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b623ee0ef50986d413a5d60ea0140057972af70" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ndim&lt;/code&gt;&lt;/b&gt;: Integer, expected rank of the input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fb03b8020e00303d495d33f35a0f1afd830f686" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ndim&lt;/code&gt;&lt;/b&gt;: Number of axes of the tensor. At least one of {&lt;code&gt;shape&lt;/code&gt;, &lt;code&gt;ndim&lt;/code&gt;} must be specified. If both are specified, &lt;code&gt;shape&lt;/code&gt; is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25194c05823c1ca359b61a0eadcc183e5ab2504a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;nearest&lt;/code&gt;&lt;/b&gt;: &lt;a href=&quot;https://en.wikipedia.org/wiki/Nearest-neighbor_interpolation&quot;&gt;Nearest neighbor interpolation.&lt;/a&gt; 'antialias' has no effect when used with nearest neighbor interpolation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8b6ba1642b03c10e7e7dfc21a173525e954bc86" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;neg_sum_logits&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;float&lt;/code&gt; matrix &lt;code&gt;(batch_size x 1)&lt;/code&gt; containing, for the sequence found, the negative of the sum of the greatest logit at each timeframe.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee79783dae949de09b5c5a33e498c8e67af3b126" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;negative_slope&lt;/code&gt;&lt;/b&gt;: Float &amp;gt;= 0. Negative slope coefficient.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cace1d98a3473daf974a34a128e6e4aa3a7afda" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;nest1&lt;/code&gt;&lt;/b&gt;: an arbitrarily nested structure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c2b08c89923f2901b16abf72a82b9f360b97495" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;nest2&lt;/code&gt;&lt;/b&gt;: an arbitrarily nested structure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="704313854e7fcdc73b2252f328e8de0dd0010356" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;nested_nrows&lt;/code&gt;&lt;/b&gt;: A list of integer scalars. The &lt;code&gt;i&lt;/code&gt;th scalar is used as the &lt;code&gt;nrows&lt;/code&gt; for the &lt;code&gt;i&lt;/code&gt;th ragged dimension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7eb3f63a4761fcac32c21252bbd430c537ebba3" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;nested_row_lengths&lt;/code&gt;&lt;/b&gt;: A list of 1-D integer tensors. The &lt;code&gt;i&lt;/code&gt;th tensor is used as the &lt;code&gt;row_lengths&lt;/code&gt; for the &lt;code&gt;i&lt;/code&gt;th ragged dimension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab0475b27d13c1d2895cfe766b5b7635e1d1fd12" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;nested_row_splits&lt;/code&gt;&lt;/b&gt;: A list of 1-D integer tensors. The &lt;code&gt;i&lt;/code&gt;th tensor is used as the &lt;code&gt;row_splits&lt;/code&gt; for the &lt;code&gt;i&lt;/code&gt;th ragged dimension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="490876e1ad61f20d2f7ac3825faf412d88960c7b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;nested_value_rowids&lt;/code&gt;&lt;/b&gt;: A list of 1-D integer tensors. The &lt;code&gt;i&lt;/code&gt;th tensor is used as the &lt;code&gt;value_rowids&lt;/code&gt; for the &lt;code&gt;i&lt;/code&gt;th ragged dimension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3060aa8e1899e32e3e02f5e967253ae7aa28d9d4" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;nesterov&lt;/code&gt;&lt;/b&gt;: boolean. Whether to apply Nesterov momentum.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10d749cd5dfb2188a23c3735d56bc2b3df7a038e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;new_attr&lt;/code&gt;&lt;/b&gt;: The new value for the attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab862f8f7b7aeb2fdd5f95ac573e187e566fefd7" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;new_axis_mask&lt;/code&gt;&lt;/b&gt;: An &lt;code&gt;int32&lt;/code&gt; mask.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8695d57a3edcc197384b41b32fa4e04e61e0e493" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;new_child&lt;/code&gt;&lt;/b&gt;: The new value of the attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dae3cf59d1949d61c49f32a01453da2a8385677d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;new_global_step&lt;/code&gt;&lt;/b&gt;: Value of new time step. Can be a variable or a constant</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b263587b1e00f4a0d456ba61bc4b5f77f2c4a1dd" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;new_seq_length&lt;/code&gt;&lt;/b&gt;: int tensor of shape [batch] with new sequence lengths.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7683f81fbc296dfb5339954ae9a7e9777137369" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;new_shape&lt;/code&gt;&lt;/b&gt;: None or a vector representing the new shape for the returned &lt;code&gt;SparseTensor&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27efcdc05f650538c5f2a3a120d18910bbee98a4" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;new_target&lt;/code&gt;&lt;/b&gt;: Callable to replace previous_target with.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e84dfa664bd3eea6c1f21c02a1223ef1e86430ac" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;new_values&lt;/code&gt;&lt;/b&gt;: Potentially ragged tensor that should replace &lt;code&gt;self.flat_values&lt;/code&gt;. Must have &lt;code&gt;rank &amp;gt; 0&lt;/code&gt;, and must have the same number of rows as &lt;code&gt;self.flat_values&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ddaa68263d3c91853c23de13f132deeed10207a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;new_values&lt;/code&gt;&lt;/b&gt;: Potentially ragged tensor to use as the &lt;code&gt;values&lt;/code&gt; for the returned &lt;code&gt;RaggedTensor&lt;/code&gt;. Must have &lt;code&gt;rank &amp;gt; 0&lt;/code&gt;, and must have the same number of rows as &lt;code&gt;self.values&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bb08ff91290db4cec238897f6489ffc7b36ca22" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;newname&lt;/code&gt;&lt;/b&gt;: string, pathname to which the file needs to be moved</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2aa632d4b6b21cc4947d0c72c4d1b934cb12c8e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;newpath&lt;/code&gt;&lt;/b&gt;: string, name of the file to which to copy to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="389d19b9cbee75a9df3833d0ce3bd9d4089ebf31" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ngram_width&lt;/code&gt;&lt;/b&gt;: The width(s) of the ngrams to create. If this is a list or tuple, the op will return ngrams of all specified arities in list order. Values must be non-Tensor integers greater than 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2797cde326548670aba834dcb3ec4b3a30051eb3" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ngrams&lt;/code&gt;&lt;/b&gt;: Optional specification for ngrams to create from the possibly-split input text. Values can be None, an integer or tuple of integers; passing an integer will create ngrams up to that integer, and passing a tuple of integers will create ngrams for the specified values in the tuple. Passing None means that no ngrams will be created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81041d4761432f6af35e019a716e3cdc5661e7b1" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;no_padding&lt;/code&gt;&lt;/b&gt;: &lt;code&gt;bool&lt;/code&gt;, indicates whether to pad the batch features (features need to be either of type &lt;a href=&quot;../../sparse/sparsetensor&quot;&gt;&lt;code&gt;tf.SparseTensor&lt;/code&gt;&lt;/a&gt; or of same shape).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f45193fcbbfda9ef646e6c6fe34da4fa790bcbf0" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;node&lt;/code&gt;&lt;/b&gt;: The node to be assigned to a device. Could be either an ops.Operation or NodeDef.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a74aeba86499468c03c0cbcc43fc4aeef2a08eb3" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;node_def&lt;/code&gt;&lt;/b&gt;: &lt;code&gt;node_def_pb2.NodeDef&lt;/code&gt;. &lt;code&gt;NodeDef&lt;/code&gt; for the &lt;code&gt;Operation&lt;/code&gt;. Used for attributes of &lt;code&gt;node_def_pb2.NodeDef&lt;/code&gt;, typically &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;op&lt;/code&gt;, and &lt;code&gt;device&lt;/code&gt;. The &lt;code&gt;input&lt;/code&gt; attribute is irrelevant here as it will be computed when generating the model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="539bca2f896d9461763395296ff21b2099b22e52" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;node_def&lt;/code&gt;&lt;/b&gt;: The &lt;code&gt;node_def_pb2.NodeDef&lt;/code&gt; proto representing the op that failed, if known; otherwise None.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a363b22c623f9eb746fc04133343830a9cf9b40d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;node_def&lt;/code&gt;&lt;/b&gt;: the node_def_pb2.NodeDef of a TensorSummary op</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41ee2f386d396d523bc4de2983ce58d9e86eb37e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;node_index&lt;/code&gt;&lt;/b&gt;: Integer, index of the node from which to retrieve the attribute. E.g. &lt;code&gt;node_index=0&lt;/code&gt; will correspond to the first time the layer was called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e480e57bf448f7b522d8bd30c1c74f5f040de02" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;node_index&lt;/code&gt;&lt;/b&gt;: Origin node index of the tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b76781c297303f8545ef12a9bb43e704499ca342" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;node_name_prefix&lt;/code&gt;&lt;/b&gt;: How identities that are created are named.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce76fcf756bfe70cc4caac46745bb99301edd7fd" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;noise&lt;/code&gt;&lt;/b&gt;: An optional &lt;code&gt;string&lt;/code&gt;. Defaults to &lt;code&gt;uniform&lt;/code&gt;. indicates if the noise should be &lt;code&gt;uniform&lt;/code&gt; (uniform distribution), &lt;code&gt;gaussian&lt;/code&gt; (gaussian distribution), or &lt;code&gt;zero&lt;/code&gt; (zero padding).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3eef75c800d0c97d1eb8ca2172836c7c1b81d21e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;noise_shape&lt;/code&gt;&lt;/b&gt;: 1D integer tensor representing the shape of the binary dropout mask that will be multiplied with the input. For instance, if your inputs have shape &lt;code&gt;(batch_size, timesteps, features)&lt;/code&gt; and you want the dropout mask to be the same for all timesteps, you can use &lt;code&gt;noise_shape=(batch_size, 1, features)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="923218bf88338158893cb6c27efbb0a36c296f04" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;noise_shape&lt;/code&gt;&lt;/b&gt;: 1D tensor of type &lt;code&gt;int32&lt;/code&gt; representing the shape of the binary dropout mask that will be multiplied with the input. For instance, if your inputs have shape &lt;code&gt;(batch_size, timesteps, features)&lt;/code&gt;, and you want the dropout mask to be the same for all timesteps, you can use &lt;code&gt;noise_shape=[batch_size, 1, features]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b83c3f2a61a92f00c5025b9e28f005833c362dc" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;noise_shape&lt;/code&gt;&lt;/b&gt;: A 1-D &lt;code&gt;Tensor&lt;/code&gt; of type &lt;code&gt;int32&lt;/code&gt;, representing the shape for randomly generated keep/drop flags.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a3d60ec963134a59455c60ef7db7a1432dfc7c6" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;noise_shape&lt;/code&gt;&lt;/b&gt;: shape for randomly generated keep/drop flags, must be broadcastable to the shape of &lt;code&gt;x&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20ad0af7fce1d6786dd6085b9e722ea01904dfc4" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;norm&lt;/code&gt;&lt;/b&gt;: The computed norms with the same shape and dtype &lt;code&gt;tensor&lt;/code&gt; but the final axis is 1 instead. Same as running &lt;code&gt;tf.cast(tf.linalg.norm(tensor, ord, axis keepdims=True), tensor.dtype)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac154d2f3dd61d8e5b146a363d1e4466372e1796" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;norm&lt;/code&gt;&lt;/b&gt;: The normalization to apply. &lt;code&gt;None&lt;/code&gt; for no normalization or &lt;code&gt;'ortho'&lt;/code&gt; for orthonormal normalization.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f38e2be4b94c1afac4028f2a1c365f05672b81a2" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;normalize&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;bool&lt;/code&gt;. If &lt;code&gt;True&lt;/code&gt;, normalizes the Levenshtein distance by length of &lt;code&gt;truth.&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5dd5a9beac513694498dea902a35db3c40b5720" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;normalize&lt;/code&gt;&lt;/b&gt;: If True, normalize the feature importances.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9505a68f17945a73ede59496652aa27f607dd559" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;normalize&lt;/code&gt;&lt;/b&gt;: Whether to L2-normalize samples along the dot product axis before taking the dot product. If set to True, then the output of the dot product is the cosine proximity between the two samples.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91b98277511ccda90df1c983b666c1895ca2ff79" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;normalized&lt;/code&gt;&lt;/b&gt;: A normalized &lt;code&gt;Tensor&lt;/code&gt; with the same shape as &lt;code&gt;tensor&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4dc2e788a7b4e49e03aa734a97af30805df5dd8" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;normalized&lt;/code&gt;&lt;/b&gt;: An optional &lt;code&gt;bool&lt;/code&gt;. Defaults to &lt;code&gt;True&lt;/code&gt;. indicates if the offset coordinates are normalized.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4640d5c8e3971b5e7b2bb7aa594c4460d907b27" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;normalizer&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt; of the same shape as &lt;code&gt;predictions&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d715f08bcc45b1cb4ecdfdf6531a292ba2dd428f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;normalizer&lt;/code&gt;&lt;/b&gt;: The normalizer values with same shape as predictions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="496593fc1536499728154d47d88ed95900b39e2c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;normalizer&lt;/code&gt;&lt;/b&gt;: function to be called on data when retrieved</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0c5d7a3d2e57974112df4cc62893a1bc9642a9c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;normalizer_fn&lt;/code&gt;&lt;/b&gt;: If not &lt;code&gt;None&lt;/code&gt;, a function that can be used to normalize the value of the tensor after &lt;code&gt;default_value&lt;/code&gt; is applied for parsing. Normalizer function takes the input &lt;code&gt;Tensor&lt;/code&gt; as its argument, and returns the output &lt;code&gt;Tensor&lt;/code&gt;. (e.g. lambda x: (x - 3.0) / 4.2). Please note that even though the most common use case of this function is normalization, it can be used for any kind of Tensorflow transformations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c82859f390f196f7a36a5086cd87e45d436826d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;np_array&lt;/code&gt;&lt;/b&gt;: A Numpy ndarray or Numpy scalar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31a9c671a970e6dd8528a81434cbc73ee53a2dd4" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;nrows&lt;/code&gt;&lt;/b&gt;: An integer scalar specifying the number of rows. This should be specified if the &lt;code&gt;RaggedTensor&lt;/code&gt; may containing empty training rows. Must be greater than &lt;code&gt;value_rowids[-1]&lt;/code&gt; (or zero if &lt;code&gt;value_rowids&lt;/code&gt; is empty). Defaults to &lt;code&gt;value_rowids[-1]&lt;/code&gt; (or zero if &lt;code&gt;value_rowids&lt;/code&gt; is empty).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39fd209eeec48e4bb75705cd4a048ef27fff7c20" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;nrows&lt;/code&gt;&lt;/b&gt;: The number of rows in the constructed RaggedTensor. If not specified, then it defaults to &lt;code&gt;nvals/uniform_row_length&lt;/code&gt; (or &lt;code&gt;0&lt;/code&gt; if &lt;code&gt;uniform_row_length==0&lt;/code&gt;). &lt;code&gt;nrows&lt;/code&gt; only needs to be specified if &lt;code&gt;uniform_row_length&lt;/code&gt; might be zero. &lt;code&gt;uniform_row_length*nrows&lt;/code&gt; must be &lt;code&gt;nvals&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b7e76e64d5608f15187bf922e8c568469bcdd9d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt;. Must be one of the following types: &lt;code&gt;int32&lt;/code&gt;, &lt;code&gt;int64&lt;/code&gt;. 0-D tensor. Number of values to generate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc2e9ed10c8ea9bb39d7029c301122cb3c1ed96e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num&lt;/code&gt;&lt;/b&gt;: An &lt;code&gt;int&lt;/code&gt;. The length of the dimension &lt;code&gt;axis&lt;/code&gt;. Automatically inferred if &lt;code&gt;None&lt;/code&gt; (the default).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce264bc2e656cc5cfbf09d54f0375c1a4274880a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num&lt;/code&gt;&lt;/b&gt;: Optional, used to specify the number of outputs when it cannot be inferred from the shape of &lt;code&gt;size_splits&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b0929e8159dba3e89831ab8ecc3fda575aa4f1d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num&lt;/code&gt;&lt;/b&gt;: the virtual core number within each replica to which operators should be assigned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eaa5cf272a853f70c6a0844476554d9c5fa0f069" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_batch_threads&lt;/code&gt;&lt;/b&gt;: Number of scheduling threads for processing batches of work. Determines the number of batches processed in parallel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2337dfeb6c0942618e8b11b8d4bc684eebb0f94a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_bits&lt;/code&gt;&lt;/b&gt;: An optional &lt;code&gt;int&lt;/code&gt;. Defaults to &lt;code&gt;8&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ddb149aa60a25d4e23359a66ff1b48e55651e46" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_bits&lt;/code&gt;&lt;/b&gt;: An optional &lt;code&gt;int&lt;/code&gt;. Defaults to &lt;code&gt;8&lt;/code&gt;. The bitwidth of the quantization; between 2 and 16, inclusive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5072095536e6cc1708dd260cc9efe7742749f429" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_bits&lt;/code&gt;&lt;/b&gt;: An optional &lt;code&gt;int&lt;/code&gt;. Defaults to &lt;code&gt;8&lt;/code&gt;. The bitwidth of the quantization; between 2 and 8, inclusive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae3f217a035fd65f05d0a438edf808989fd2b4fd" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_bits&lt;/code&gt;&lt;/b&gt;: The bitwidth of the quantization.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31e591a1c0e6e9906e990690d62e1dc48b303221" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_bits&lt;/code&gt;&lt;/b&gt;: The number of bits for quantize training.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76d28ae19d416fcfb66190c7fb076e7d7a906326" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_buckets&lt;/code&gt;&lt;/b&gt;: An &lt;code&gt;int&lt;/code&gt; that is &lt;code&gt;&amp;gt;= 0&lt;/code&gt;. output = hashed_value%num_buckets if num_buckets &amp;gt; 0 else hashed_value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93c79ff295f08b6dda8700249331e31e1b9d7680" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_buckets&lt;/code&gt;&lt;/b&gt;: An &lt;code&gt;int&lt;/code&gt; that is &lt;code&gt;&amp;gt;= 1&lt;/code&gt;. The number of buckets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45a15c7219cfc37c1fde2ae193b2bf44dc5d43f1" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_buckets&lt;/code&gt;&lt;/b&gt;: Range of inputs and outputs is &lt;code&gt;[0, num_buckets)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2e50bc6ce4e349f7ed4c2a99574787fb3a355bc" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_buckets&lt;/code&gt;&lt;/b&gt;: Range of inputs. Namely, inputs are expected to be in the range &lt;code&gt;[0, num_buckets)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f23b7ce15b5c18c9f188350f2d2b0352458f2d3" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_classes&lt;/code&gt;&lt;/b&gt;: An &lt;code&gt;int&lt;/code&gt;. The number of possible classes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73dd2470ad5c1d254753b96146c56ef6b3e87e65" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_classes&lt;/code&gt;&lt;/b&gt;: Integer, number of classes to consider.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb47b4fee2a236739dbfd0741b128ef3d1699423" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_classes&lt;/code&gt;&lt;/b&gt;: The possible number of labels the classification task can have. If this value is not provided, it will be calculated using both predictions and labels array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff21512dc5fe743ce51e2106b1d310dde25ad7bc" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_classes&lt;/code&gt;&lt;/b&gt;: The possible number of labels the prediction task can have. This value must be provided, since a confusion matrix of dimension = [num_classes, num_classes] will be allocated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14426c5f36c3d76e7992db254a420680d20b0742" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_classes&lt;/code&gt;&lt;/b&gt;: The possible number of labels the prediction task can have. This value must be provided, since two variables with shape = [num_classes] will be allocated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8315817103da5e680615be8cc7b2499c360ea7f7" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_classes&lt;/code&gt;&lt;/b&gt;: total number of classes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed0c58c3419c6282c978898e3dc99f0516757884" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_clusters&lt;/code&gt;&lt;/b&gt;: An integer tensor specifying the number of clusters. This argument is ignored if &lt;code&gt;initial_clusters&lt;/code&gt; is a tensor or numpy array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08de4d538eb8ce32a2991312486be60dcb7626e3" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_cols&lt;/code&gt;&lt;/b&gt;: The number of columns of the output matrix. If it is not provided, the op assumes the output matrix is a square matrix and infers the matrix size from &lt;code&gt;d_lower&lt;/code&gt;, &lt;code&gt;d_upper&lt;/code&gt;, and the innermost dimension of &lt;code&gt;diagonal&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc774e318a2bd40481337c5e5ba0ab0680abaa63" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_columns&lt;/code&gt;&lt;/b&gt;: Optional non-negative &lt;code&gt;int32&lt;/code&gt; scalar &lt;code&gt;Tensor&lt;/code&gt; giving the number of columns in each batch matrix. Defaults to &lt;code&gt;num_rows&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72cc791c2548232a4cd98ddb1327c4426de2e6df" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_columns&lt;/code&gt;&lt;/b&gt;: Optional non-negative integer or &lt;code&gt;int32&lt;/code&gt; scalar &lt;code&gt;tensor&lt;/code&gt; giving the number of columns in the resulting matrix. Defaults to &lt;code&gt;num_rows&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06239ed8965fb9dbb0c9561bbc29591ebeeb9743" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_columns&lt;/code&gt;&lt;/b&gt;: Scalar non-negative integer &lt;code&gt;Tensor&lt;/code&gt;. Number of columns in the corresponding zero matrix. If &lt;code&gt;None&lt;/code&gt;, defaults to the value of &lt;code&gt;num_rows&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb6cf2e47d1d402058d6a9edce034dfcbd73313d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_cores_per_replica&lt;/code&gt;&lt;/b&gt;: Defaults to &lt;code&gt;None&lt;/code&gt;, which disables model parallelism. An integer which describes the number of TPU cores per model replica. This is required by model-parallelism which enables partitioning the model to multiple cores. Currently num_cores_per_replica must be 1, 2, 4, or 8.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4aedfc5a0b5befebfa401e7f12f9c104165fe3cd" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_epochs&lt;/code&gt;&lt;/b&gt;: (Optional.) An integer. If specified &lt;code&gt;input_producer&lt;/code&gt; produces each row of &lt;code&gt;input_tensor&lt;/code&gt;&lt;code&gt;num_epochs&lt;/code&gt; times before generating an &lt;code&gt;OutOfRange&lt;/code&gt; error. If not specified, &lt;code&gt;input_producer&lt;/code&gt; can cycle through the rows of &lt;code&gt;input_tensor&lt;/code&gt; an unlimited number of times.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99b098f03df55f327a0c4f7e61b31635d80dea5a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_epochs&lt;/code&gt;&lt;/b&gt;: A positive integer (optional). If specified, limits the number of steps the output tensor may be evaluated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5adfb19aa8a2ee6d606917e91e5c10f0a909b3e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_epochs&lt;/code&gt;&lt;/b&gt;: An int specifying the number of times this dataset is repeated. If None, cycles through the dataset forever.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9abb3fc8270d5ad003b95274c5c7d76ee92c5caf" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_epochs&lt;/code&gt;&lt;/b&gt;: An integer (optional). If specified, &lt;code&gt;range_input_producer&lt;/code&gt; produces each integer &lt;code&gt;num_epochs&lt;/code&gt; times before generating an OutOfRange error. If not specified, &lt;code&gt;range_input_producer&lt;/code&gt; can cycle through the integers an unlimited number of times.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0c60cd336847c267bbeaa51189f53cadc62e391" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_epochs&lt;/code&gt;&lt;/b&gt;: An integer (optional). If specified, &lt;code&gt;slice_input_producer&lt;/code&gt; produces each slice &lt;code&gt;num_epochs&lt;/code&gt; times before generating an &lt;code&gt;OutOfRange&lt;/code&gt; error. If not specified, &lt;code&gt;slice_input_producer&lt;/code&gt; can cycle through the slices an unlimited number of times.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38da221aa4524c0ceaa69f609a0b776e1ba3eb97" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_epochs&lt;/code&gt;&lt;/b&gt;: An integer (optional). If specified, &lt;code&gt;string_input_producer&lt;/code&gt; produces each string from &lt;code&gt;string_tensor&lt;/code&gt;&lt;code&gt;num_epochs&lt;/code&gt; times before generating an &lt;code&gt;OutOfRange&lt;/code&gt; error. If not specified, &lt;code&gt;string_input_producer&lt;/code&gt; can cycle through the strings in &lt;code&gt;string_tensor&lt;/code&gt; an unlimited number of times.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1db3023fe68e6412097a6056a0f00d2a8ad6843d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_epochs&lt;/code&gt;&lt;/b&gt;: Integer specifying the number of times to read through the dataset. If None, cycles through the dataset forever. Defaults to &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e02964ac6c1718ed374fe9f2e81774e6556cd6e0" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_epochs&lt;/code&gt;&lt;/b&gt;: Integer, number of epochs to iterate over data. If &lt;code&gt;None&lt;/code&gt; will run forever.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbf4c8dc5fd236c97aa0e2ef44a0739214134edb" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_epochs&lt;/code&gt;&lt;/b&gt;: int, number of epochs to iterate over data. If not &lt;code&gt;None&lt;/code&gt;, read attempts that would exceed this value will raise &lt;code&gt;OutOfRangeError&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adab7eeee962b630f9bd8b63b874430450649b60" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_inner_iterations&lt;/code&gt;&lt;/b&gt;: An &lt;code&gt;int&lt;/code&gt; that is &lt;code&gt;&amp;gt;= 1&lt;/code&gt;. Number of iterations per mini-batch.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e16dd9dda9147a9fe636dd1c372b0006f39048b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_input_pipelines&lt;/code&gt;&lt;/b&gt;: the number of input pipelines in a cluster.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2b29eef04b9aef3e4f6c444b87b410f8ca49fa1" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_loss_partitions&lt;/code&gt;&lt;/b&gt;: An &lt;code&gt;int&lt;/code&gt; that is &lt;code&gt;&amp;gt;= 1&lt;/code&gt;. Number of partitions of the global loss function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14e0d33e4b9b828ff5a23fed1b22d5cb0fa50813" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_loss_partitions&lt;/code&gt;&lt;/b&gt;: Number of workers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbdd1f6edc96a145740c00e2bebc475c8bf2010d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_lower&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt;. Must be one of the following types: &lt;code&gt;int32&lt;/code&gt;, &lt;code&gt;int64&lt;/code&gt;. 0-D tensor. Number of subdiagonals to keep. If negative, keep entire lower triangle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce1de65bae7bfe1c134ea5c88879cb2715f6ab82" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_mel_bins&lt;/code&gt;&lt;/b&gt;: Python int. How many bands in the resulting mel spectrum.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="525f756b60082cbff498efa25c60aa12b19fa71d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_oov_buckets&lt;/code&gt;&lt;/b&gt;: Non-negative integer, the number of out-of-vocabulary buckets. All out-of-vocabulary inputs will be assigned IDs in the range &lt;code&gt;[len(vocabulary_list), len(vocabulary_list)+num_oov_buckets)&lt;/code&gt; based on a hash of the input value. A positive &lt;code&gt;num_oov_buckets&lt;/code&gt; can not be specified with &lt;code&gt;default_value&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73b8907e077776f779fd548fa9062ff8b4deed1f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_oov_buckets&lt;/code&gt;&lt;/b&gt;: Non-negative integer, the number of out-of-vocabulary buckets. All out-of-vocabulary inputs will be assigned IDs in the range &lt;code&gt;[vocabulary_size, vocabulary_size+num_oov_buckets)&lt;/code&gt; based on a hash of the input value. A positive &lt;code&gt;num_oov_buckets&lt;/code&gt; can not be specified with &lt;code&gt;default_value&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c0b95dd75e9f2ff87f0e5135ca2743c8506adf8" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_oov_buckets&lt;/code&gt;&lt;/b&gt;: Number of buckets to use for out-of-vocabulary keys. Must be greater than zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20f7c448a7d8df28fce9edeba2e344386aa00e91" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_or_size_splits&lt;/code&gt;&lt;/b&gt;: Either an integer indicating the number of splits along &lt;code&gt;axis&lt;/code&gt; or a 1-D integer &lt;code&gt;Tensor&lt;/code&gt; or Python list containing the sizes of each output tensor along &lt;code&gt;axis&lt;/code&gt;. If a scalar, then it must evenly divide &lt;code&gt;value.shape[axis]&lt;/code&gt;; otherwise the sum of sizes along the split axis must match that of the &lt;code&gt;value&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca0513017bc64921e01d832278e71f8d7203a663" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_packs&lt;/code&gt;&lt;/b&gt;: values will be packed in this many splits. &lt;code&gt;num_packs&lt;/code&gt; should be greater than or equals 0. When it is zero, no packing will be done.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a27ee0020bae0ebbe96510710e47f671416ce0c9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_parallel_batches&lt;/code&gt;&lt;/b&gt;: (Optional.) A &lt;a href=&quot;../../../../../tf#int64&quot;&gt;&lt;code&gt;tf.int64&lt;/code&gt;&lt;/a&gt; scalar &lt;a href=&quot;../../../../tensor&quot;&gt;&lt;code&gt;tf.Tensor&lt;/code&gt;&lt;/a&gt;, representing the number of batches to create in parallel. On one hand, higher values can help mitigate the effect of stragglers. On the other hand, higher values can increase contention if CPU is scarce.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b2c4a1c2bd80b1f4592489c51461a5850790c50" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_parallel_batches&lt;/code&gt;&lt;/b&gt;: (Optional.) A &lt;a href=&quot;../../../tf#int64&quot;&gt;&lt;code&gt;tf.int64&lt;/code&gt;&lt;/a&gt; scalar &lt;a href=&quot;../../tensor&quot;&gt;&lt;code&gt;tf.Tensor&lt;/code&gt;&lt;/a&gt;, representing the number of batches to create in parallel. On one hand, higher values can help mitigate the effect of stragglers. On the other hand, higher values can increase contention if CPU is scarce.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a37ea48b3089158bdd61f853d60b402f4e213506" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_parallel_calls&lt;/code&gt;&lt;/b&gt;: (Optional.) A &lt;a href=&quot;../../../../../tf#int32&quot;&gt;&lt;code&gt;tf.int32&lt;/code&gt;&lt;/a&gt; scalar &lt;a href=&quot;../../../../tensor&quot;&gt;&lt;code&gt;tf.Tensor&lt;/code&gt;&lt;/a&gt;, representing the number elements to process asynchronously in parallel. If not specified, elements will be processed sequentially. If the value &lt;a href=&quot;../../../../data/experimental#AUTOTUNE&quot;&gt;&lt;code&gt;tf.data.experimental.AUTOTUNE&lt;/code&gt;&lt;/a&gt; is used, then the number of parallel calls is set dynamically based on available CPU.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59052e3938bc94b31363caf72c9181ea5f46eaba" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_parallel_calls&lt;/code&gt;&lt;/b&gt;: (Optional.) A &lt;a href=&quot;../../../../../tf#int32&quot;&gt;&lt;code&gt;tf.int32&lt;/code&gt;&lt;/a&gt; scalar &lt;a href=&quot;../../../../tensor&quot;&gt;&lt;code&gt;tf.Tensor&lt;/code&gt;&lt;/a&gt;, representing the number of elements to process in parallel. If not specified, &lt;code&gt;batch_size * num_parallel_batches&lt;/code&gt; elements will be processed in parallel. If the value &lt;a href=&quot;../../../../data/experimental#AUTOTUNE&quot;&gt;&lt;code&gt;tf.data.experimental.AUTOTUNE&lt;/code&gt;&lt;/a&gt; is used, then the number of parallel calls is set dynamically based on available CPU.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d89f9e417c99f2d9f314ec9a54d688779a8eaff3" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_parallel_calls&lt;/code&gt;&lt;/b&gt;: (Optional.) A &lt;a href=&quot;../../../../tf#int32&quot;&gt;&lt;code&gt;tf.int32&lt;/code&gt;&lt;/a&gt; scalar &lt;a href=&quot;../../../tensor&quot;&gt;&lt;code&gt;tf.Tensor&lt;/code&gt;&lt;/a&gt;, representing the number elements to process asynchronously in parallel. If not specified, elements will be processed sequentially. If the value &lt;a href=&quot;../../../data/experimental#AUTOTUNE&quot;&gt;&lt;code&gt;tf.data.experimental.AUTOTUNE&lt;/code&gt;&lt;/a&gt; is used, then the number of parallel calls is set dynamically based on available CPU.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bddfd731ff877684a87323b1d53418be15d6c83d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_parallel_calls&lt;/code&gt;&lt;/b&gt;: (Optional.) A &lt;a href=&quot;../../../tf#int32&quot;&gt;&lt;code&gt;tf.int32&lt;/code&gt;&lt;/a&gt; scalar &lt;a href=&quot;../../tensor&quot;&gt;&lt;code&gt;tf.Tensor&lt;/code&gt;&lt;/a&gt;, representing the number elements to process asynchronously in parallel. If not specified, elements will be processed sequentially. If the value &lt;a href=&quot;../experimental#AUTOTUNE&quot;&gt;&lt;code&gt;tf.data.experimental.AUTOTUNE&lt;/code&gt;&lt;/a&gt; is used, then the number of parallel calls is set dynamically based on available CPU.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37922d4bd8e2044515c06cf4da8a34bea375956c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_parallel_calls&lt;/code&gt;&lt;/b&gt;: (Optional.) A &lt;a href=&quot;../../../tf#int32&quot;&gt;&lt;code&gt;tf.int32&lt;/code&gt;&lt;/a&gt; scalar &lt;a href=&quot;../../tensor&quot;&gt;&lt;code&gt;tf.Tensor&lt;/code&gt;&lt;/a&gt;, representing the number of elements to process in parallel. If not specified, &lt;code&gt;batch_size * num_parallel_batches&lt;/code&gt; elements will be processed in parallel. If the value &lt;a href=&quot;../experimental#AUTOTUNE&quot;&gt;&lt;code&gt;tf.data.experimental.AUTOTUNE&lt;/code&gt;&lt;/a&gt; is used, then the number of parallel calls is set dynamically based on available CPU.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fddcbf4cfb4985226687be327edb7a7fbd0b62a2" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_parallel_calls&lt;/code&gt;&lt;/b&gt;: (Optional.) A &lt;a href=&quot;../../../tf#int32&quot;&gt;&lt;code&gt;tf.int32&lt;/code&gt;&lt;/a&gt; scalar &lt;a href=&quot;../../tensor&quot;&gt;&lt;code&gt;tf.Tensor&lt;/code&gt;&lt;/a&gt;, representing the number of parsing processes to call in parallel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3399ceba3213a06b6ff3b6d373038b84dcab7da4" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_parallel_calls&lt;/code&gt;&lt;/b&gt;: (Optional.) A &lt;a href=&quot;../../tf#int32&quot;&gt;&lt;code&gt;tf.int32&lt;/code&gt;&lt;/a&gt; scalar &lt;a href=&quot;../tensor&quot;&gt;&lt;code&gt;tf.Tensor&lt;/code&gt;&lt;/a&gt;, representing the number elements to process asynchronously in parallel. If not specified, elements will be processed sequentially. If the value &lt;a href=&quot;experimental#AUTOTUNE&quot;&gt;&lt;code&gt;tf.data.experimental.AUTOTUNE&lt;/code&gt;&lt;/a&gt; is used, then the number of parallel calls is set dynamically based on available CPU.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c66e0680b74af7ae924e5783eedb60ce105251a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_parallel_calls&lt;/code&gt;&lt;/b&gt;: (Optional.) If specified, the implementation creates a threadpool, which is used to fetch inputs from cycle elements asynchronously and in parallel. The default behavior is to fetch inputs from cycle elements synchronously with no parallelism. If the value &lt;a href=&quot;../../../../data/experimental#AUTOTUNE&quot;&gt;&lt;code&gt;tf.data.experimental.AUTOTUNE&lt;/code&gt;&lt;/a&gt; is used, then the number of parallel calls is set dynamically based on available CPU.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19c9c40103b65d64cce75e718c68ca153731a496" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_parallel_calls&lt;/code&gt;&lt;/b&gt;: (Optional.) If specified, the implementation creates a threadpool, which is used to fetch inputs from cycle elements asynchronously and in parallel. The default behavior is to fetch inputs from cycle elements synchronously with no parallelism. If the value &lt;a href=&quot;../../../data/experimental#AUTOTUNE&quot;&gt;&lt;code&gt;tf.data.experimental.AUTOTUNE&lt;/code&gt;&lt;/a&gt; is used, then the number of parallel calls is set dynamically based on available CPU.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ffc534768f7ac2648d2c132cbdae571a53bbe39" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_parallel_calls&lt;/code&gt;&lt;/b&gt;: (Optional.) If specified, the implementation creates a threadpool, which is used to fetch inputs from cycle elements asynchronously and in parallel. The default behavior is to fetch inputs from cycle elements synchronously with no parallelism. If the value &lt;a href=&quot;../experimental#AUTOTUNE&quot;&gt;&lt;code&gt;tf.data.experimental.AUTOTUNE&lt;/code&gt;&lt;/a&gt; is used, then the number of parallel calls is set dynamically based on available CPU.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ab5a2c733260ca007d379b2af57111e19bda4f8" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_parallel_calls&lt;/code&gt;&lt;/b&gt;: (Optional.) If specified, the implementation creates a threadpool, which is used to fetch inputs from cycle elements asynchronously and in parallel. The default behavior is to fetch inputs from cycle elements synchronously with no parallelism. If the value &lt;a href=&quot;experimental#AUTOTUNE&quot;&gt;&lt;code&gt;tf.data.experimental.AUTOTUNE&lt;/code&gt;&lt;/a&gt; is used, then the number of parallel calls is set dynamically based on available CPU.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b53987a53348e57c0900a2c48a747e608f9ed16" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_parallel_reads&lt;/code&gt;&lt;/b&gt;: (Optional.) A &lt;a href=&quot;../../../../tf#int64&quot;&gt;&lt;code&gt;tf.int64&lt;/code&gt;&lt;/a&gt; scalar representing the number of files to read in parallel. If greater than one, the records of files read in parallel are outputted in an interleaved order. If your input pipeline is I/O bottlenecked, consider setting this parameter to a value greater than one to parallelize the I/O. If &lt;code&gt;None&lt;/code&gt;, files will be read sequentially.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1035f10efa819d5716777baee45bd65ffd22baa" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_parallel_reads&lt;/code&gt;&lt;/b&gt;: (Optional.) A &lt;a href=&quot;../../tf#int64&quot;&gt;&lt;code&gt;tf.int64&lt;/code&gt;&lt;/a&gt; scalar representing the number of files to read in parallel. If greater than one, the records of files read in parallel are outputted in an interleaved order. If your input pipeline is I/O bottlenecked, consider setting this parameter to a value greater than one to parallelize the I/O. If &lt;code&gt;None&lt;/code&gt;, files will be read sequentially.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="160c269ba29cdfcf9527043a7cefb9a9ca49a25b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_parallel_reads&lt;/code&gt;&lt;/b&gt;: Number of threads used to read CSV records from files. If &amp;gt;1, the results will be interleaved. Defaults to &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b617152b1a40d79f858277d14885ddda64f2b697" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_partitions&lt;/code&gt;&lt;/b&gt;: An &lt;code&gt;int32&lt;/code&gt; or &lt;code&gt;int64&lt;/code&gt; scalar specifying the number of partitions to output. This determines the number of rows in &lt;code&gt;output&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dbe84c648f667ca5d59fcd129e7f42327d6352c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_partitions&lt;/code&gt;&lt;/b&gt;: An &lt;code&gt;int&lt;/code&gt; that is &lt;code&gt;&amp;gt;= 1&lt;/code&gt;. The number of partitions to output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce7ae0d254da6495980e530e096cb332b11af6ec" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_periods&lt;/code&gt;&lt;/b&gt;: Number of periods in the cosine part of the decay. See computation above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed3e0d37905eb3896c899b06b8f973526f6baa45" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_proj&lt;/code&gt;&lt;/b&gt;: (optional) int, The output dimensionality for the projection matrices. If None, no projection is performed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="642c425b581a90e266e67ff97862af3e2a4d7b06" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_proj_shards&lt;/code&gt;&lt;/b&gt;: Deprecated, will be removed by Jan. 2017. Use a variable_scope partitioner instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0d119197933eddbd68538180aa080f0284f07ee" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_ps&lt;/code&gt;&lt;/b&gt;: Number of PS servers to start.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98133c20087da8ca169424cc0666cbb450e47d88" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_records&lt;/code&gt;&lt;/b&gt;: Number of records to read.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cafec4b4dc13174cf0296d45273559f6077808b1" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_replicas_in_sync&lt;/code&gt;&lt;/b&gt;: the number of replicas that are in sync.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8bdac47add2deff93a3158f3dc86fc76bc2f5be" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_required&lt;/code&gt;&lt;/b&gt;: Number of gradients that needs to have been aggregated</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c06eebc0d9e9da66b01c993f659348cf018a0169" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_reserved_ids&lt;/code&gt;&lt;/b&gt;: Optionally some reserved IDs can be added in the range &lt;code&gt;[0, num_reserved_ids)&lt;/code&gt; by the users. One use case is that a special unknown word token is used as ID 0. These IDs will have a sampling probability of 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c39699f222752094b56a2a1da487ff694a122869" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_rows&lt;/code&gt;&lt;/b&gt;: Non-negative &lt;code&gt;int32&lt;/code&gt; scalar &lt;code&gt;Tensor&lt;/code&gt; giving the number of rows in each batch matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="517c923e2f8a77f87377d55e1379f75cb92f4da0" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_rows&lt;/code&gt;&lt;/b&gt;: Non-negative integer or &lt;code&gt;int32&lt;/code&gt; scalar &lt;code&gt;tensor&lt;/code&gt; giving the number of rows in the resulting matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0b985bde68301c9df95f887d317236047b18312" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_rows&lt;/code&gt;&lt;/b&gt;: Scalar non-negative integer &lt;code&gt;Tensor&lt;/code&gt;. Number of rows in the corresponding identity matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8da6cd557c67a0f64b9c64d8bb9ef69f957509da" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_rows&lt;/code&gt;&lt;/b&gt;: Scalar non-negative integer &lt;code&gt;Tensor&lt;/code&gt;. Number of rows in the corresponding zero matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0699ff9c2288ba34ca589257480ac9ef53d80f25" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_rows&lt;/code&gt;&lt;/b&gt;: The number of rows of the output matrix. If it is not provided, the op assumes the output matrix is a square matrix and infers the matrix size from &lt;code&gt;d_lower&lt;/code&gt;, &lt;code&gt;d_upper&lt;/code&gt;, and the innermost dimension of &lt;code&gt;diagonal&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="648896b2f17771eb85688e6fbad94fb6e5380b13" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_rows_for_inference&lt;/code&gt;&lt;/b&gt;: Number of rows of a file to use for type inference if record_defaults is not provided. If None, reads all the rows of all the files. Defaults to 100.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbeb564de371b216094d242316babb56ff1dcacf" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_sampled&lt;/code&gt;&lt;/b&gt;: An &lt;code&gt;int&lt;/code&gt;. The number of classes to randomly sample per batch.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d921652d8921e2b3eb484b628a5c70a16e83e1c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_sampled&lt;/code&gt;&lt;/b&gt;: An &lt;code&gt;int&lt;/code&gt;. The number of classes to randomly sample.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4171f20c565253d3ab2bb3b328baf530b499d96a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_sampled&lt;/code&gt;&lt;/b&gt;: An &lt;code&gt;int&lt;/code&gt;. The number of classes to randomly sample. The &lt;code&gt;sampled_candidates&lt;/code&gt; return value will have shape &lt;code&gt;[num_sampled]&lt;/code&gt;. If &lt;code&gt;unique=True&lt;/code&gt;, &lt;code&gt;num_sampled&lt;/code&gt; must be less than or equal to &lt;code&gt;range_max&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5e4f6ee210bfbaae63ea04aeb63a6f249725d1b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_sampled&lt;/code&gt;&lt;/b&gt;: An &lt;code&gt;int&lt;/code&gt;. The number of negative classes to randomly sample per batch. This single sample of negative classes is evaluated for each element in the batch.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="493812dd721915a8ce2d3e9904ed694356e9cade" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_sampled&lt;/code&gt;&lt;/b&gt;: An &lt;code&gt;int&lt;/code&gt;. The number of possible classes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="108274b3ece3bf76a93b8e46c08cce9386466252" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_samples&lt;/code&gt;&lt;/b&gt;: 0-D. Number of independent samples to draw for each row slice.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae7156a9edb411315179e11b2ed1acfeab409171" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_segments&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt;. Must be one of the following types: &lt;code&gt;int32&lt;/code&gt;, &lt;code&gt;int64&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd000affe3ef8983aa5977e239154518d785b1bc" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_segments&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt;. Must be one of the following types: &lt;code&gt;int32&lt;/code&gt;, &lt;code&gt;int64&lt;/code&gt;. A scalar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9b58099d5a7a06413a3c5661ece35dd75b43e1c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_segments&lt;/code&gt;&lt;/b&gt;: A scalar integer indicating the number of segments. Defaults to &lt;code&gt;max(segment_ids) + 1&lt;/code&gt; (or zero if &lt;code&gt;segment_ids&lt;/code&gt; is empty).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdbf4d34bcefc7d0a992b520c8f4083b97a8da99" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_segments&lt;/code&gt;&lt;/b&gt;: An integer scalar &lt;code&gt;Tensor&lt;/code&gt;. The number of distinct segment IDs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59e3dc01f74f81df685b9201a6cefd378733c118" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_segments&lt;/code&gt;&lt;/b&gt;: An optional int32 scalar. Indicates the size of the output &lt;code&gt;Tensor&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33235031a9e4ba8c6644e4ffd3189758c476454c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_shards&lt;/code&gt;&lt;/b&gt;: (Deprecated, ignored by TPUEstimator). The number of model replicas in the system. For non-model-parallelism case, this number equals the total number of TPU cores. For model-parallelism, the total number of TPU cores equals num_cores_per_replica * num_shards.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c3a8a6140e2d4f9ed87b4fb308fd027a9a162db" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_shards&lt;/code&gt;&lt;/b&gt;: &lt;code&gt;int&lt;/code&gt;, number of shards to partition variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf683a79f892662dca747025ef54cf46f3eec218" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_shards&lt;/code&gt;&lt;/b&gt;: A &lt;a href=&quot;../../../../../tf#int64&quot;&gt;&lt;code&gt;tf.int64&lt;/code&gt;&lt;/a&gt; scalar &lt;a href=&quot;../../../../tensor&quot;&gt;&lt;code&gt;tf.Tensor&lt;/code&gt;&lt;/a&gt;, representing the number of shards operating in parallel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c269d65dc21b8ba47948daf4b004572131514196" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_shards&lt;/code&gt;&lt;/b&gt;: A &lt;a href=&quot;../../../../tf#int64&quot;&gt;&lt;code&gt;tf.int64&lt;/code&gt;&lt;/a&gt; scalar &lt;a href=&quot;../../../tensor&quot;&gt;&lt;code&gt;tf.Tensor&lt;/code&gt;&lt;/a&gt;, representing the number of shards operating in parallel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f5fe7a0b629197005a4fa238bec29729b308897" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_shards&lt;/code&gt;&lt;/b&gt;: A &lt;a href=&quot;../../../tf#int64&quot;&gt;&lt;code&gt;tf.int64&lt;/code&gt;&lt;/a&gt; scalar &lt;a href=&quot;../../tensor&quot;&gt;&lt;code&gt;tf.Tensor&lt;/code&gt;&lt;/a&gt;, representing the number of shards operating in parallel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0b866afff1a4e59f2d1b98405b6465883267f10" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_shards&lt;/code&gt;&lt;/b&gt;: A &lt;a href=&quot;../../tf#int64&quot;&gt;&lt;code&gt;tf.int64&lt;/code&gt;&lt;/a&gt; scalar &lt;a href=&quot;../tensor&quot;&gt;&lt;code&gt;tf.Tensor&lt;/code&gt;&lt;/a&gt;, representing the number of shards operating in parallel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72ada102f235ca979731beef07fac66342b056cc" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_shards&lt;/code&gt;&lt;/b&gt;: A sampler can be used to sample from a subset of the original range in order to speed up the whole computation through parallelism. This parameter (together with &lt;code&gt;shard&lt;/code&gt;) indicates the number of partitions that are being used in the overall computation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d3bdc7acee20e6d23e60fc4b1918ab1949c3c98" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_shards&lt;/code&gt;&lt;/b&gt;: The number of shards.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49b47e8d759cf277179bafab98f0276aea8cde50" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_spectrogram_bins&lt;/code&gt;&lt;/b&gt;: An integer &lt;code&gt;Tensor&lt;/code&gt;. How many bins there are in the source spectrogram data, which is understood to be &lt;code&gt;fft_size // 2 + 1&lt;/code&gt;, i.e. the spectrogram only contains the nonredundant FFT bins.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb6793ccfee97c5139133fad613ce814c67787ae" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_split&lt;/code&gt;&lt;/b&gt;: A Python integer. The number of ways to split.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe74d995b125e26964afa2ed2a3b59401158c6f9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_steps&lt;/code&gt;&lt;/b&gt;: Number of steps to execute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2960054de4aa3d6198bc65b1aab7354891d27007" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_table_shards&lt;/code&gt;&lt;/b&gt;: Number of shards of the internal state table, typically set to match the number of parameter servers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="889821bb83ed3ea1f643b1afafcd56e6b0953c46" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_threads&lt;/code&gt;&lt;/b&gt;: Integer, number of threads used for reading and enqueueing. In order to have predicted and repeatable order of reading and enqueueing, such as in prediction and evaluation mode, &lt;code&gt;num_threads&lt;/code&gt; should be 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40ecfe87e7df831b30ea3c3981745cf1f08b0db9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_threads&lt;/code&gt;&lt;/b&gt;: Number of parallel threads</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09ba70a09a1b4cd6d149ec97c4e6530ab9db2c77" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_threads&lt;/code&gt;&lt;/b&gt;: The number of threads enqueuing &lt;code&gt;tensor_list&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9750cb2ece0bd2b8d2e2ac0c1165c96be712bec0" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_threads&lt;/code&gt;&lt;/b&gt;: The number of threads enqueuing &lt;code&gt;tensors&lt;/code&gt;. The batching will be nondeterministic if &lt;code&gt;num_threads &amp;gt; 1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a876ceccf3c397363135445db124bef235e303e1" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_thresholds&lt;/code&gt;&lt;/b&gt;: (Optional) Defaults to 200. The number of thresholds to use for matching the given recall.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9518dc5eecb56d4b7551cfa1399c280f61d6d60" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_thresholds&lt;/code&gt;&lt;/b&gt;: (Optional) Defaults to 200. The number of thresholds to use for matching the given sensitivity.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92ca9f44f9547f485ad3dfc829ea11f3735aefbe" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_thresholds&lt;/code&gt;&lt;/b&gt;: (Optional) Defaults to 200. The number of thresholds to use for matching the given specificity.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ec1fc46f65fcdbfa469f19adf556ce729a38012" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_thresholds&lt;/code&gt;&lt;/b&gt;: (Optional) Defaults to 200. The number of thresholds to use when discretizing the roc curve. Values must be &amp;gt; 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3b695d0324b9bcb08a267ac3d11f5a7bb220e46" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_thresholds&lt;/code&gt;&lt;/b&gt;: The number of thresholds to use for matching the given sensitivity.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37d7c5d25bc79942ffe0695896e5ec51b03b8d46" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_thresholds&lt;/code&gt;&lt;/b&gt;: The number of thresholds to use for matching the given specificity.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c62afd7e5266e0c39aad7c971c757bc65d14e1e3" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_thresholds&lt;/code&gt;&lt;/b&gt;: The number of thresholds to use when discretizing the roc curve.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3cc0d14bcd40d00392352dd9cf13520ad74308b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_tokens&lt;/code&gt;&lt;/b&gt;: Number of tokens to add to the queue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b94efbc259eeb542b6abec252d38fb111e0c547" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_true&lt;/code&gt;&lt;/b&gt;: An &lt;code&gt;int&lt;/code&gt;. The number of target classes per training example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0098f69d02983dfc845828e8fc03ed696d4704d2" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_unit_shards&lt;/code&gt;&lt;/b&gt;: Deprecated, will be removed by Jan. 2017. Use a variable_scope partitioner instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="966cac777de0e8f6eff6ba8c76bed01581dd00c6" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_units&lt;/code&gt;&lt;/b&gt;: int, The number of units in the GRU cell.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6fdf4d3e4bb4586cfbb188da98144768c496024" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_units&lt;/code&gt;&lt;/b&gt;: int, The number of units in the LSTM cell.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f89da2c8b466c5f26797b350bfcb83e57906a03" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_units&lt;/code&gt;&lt;/b&gt;: int, The number of units in the RNN cell.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fc3b233e7f824b93fe4712f7bd7804e4f4cb52e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_updates&lt;/code&gt;&lt;/b&gt;: Optional count of number of updates applied to variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3455a68cdbfd354564971bc5fb2edd7c617fd20" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_upper&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt;. Must have the same type as &lt;code&gt;num_lower&lt;/code&gt;. 0-D tensor. Number of superdiagonals to keep. If negative, keep entire upper triangle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cc503ec52447db5c88027fad4c925c792c45091" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_words&lt;/code&gt;&lt;/b&gt;: max number of words to include. Words are ranked by how often they occur (in the training set) and only the most frequent words are kept</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe62fdf518b41a8379264413e6221c41c6ed1d15" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;num_workers&lt;/code&gt;&lt;/b&gt;: Number of worker servers to start.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0df8cb527a2c1481e4538bfbec4ed36ecd0bebc7" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;numpy_input&lt;/code&gt;&lt;/b&gt;: A nest of NumPy input arrays that will be converted into a dataset. Note that lists of Numpy arrays are stacked, as that is normal &lt;a href=&quot;../../../../data/dataset&quot;&gt;&lt;code&gt;tf.data.Dataset&lt;/code&gt;&lt;/a&gt; behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0fff17e949ec8c6388d7ddc3a07a2bf906f500d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;numpy_input&lt;/code&gt;&lt;/b&gt;: A nest of NumPy input arrays that will be converted into a dataset. Note that lists of Numpy arrays are stacked, as that is normal &lt;a href=&quot;../../../data/dataset&quot;&gt;&lt;code&gt;tf.data.Dataset&lt;/code&gt;&lt;/a&gt; behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f08c75e782b79efdb968f4e180651dfa29f00186" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;numpy_input&lt;/code&gt;&lt;/b&gt;: A nest of NumPy input arrays that will be converted into a dataset. Note that lists of Numpy arrays are stacked, as that is normal &lt;a href=&quot;../../data/dataset&quot;&gt;&lt;code&gt;tf.data.Dataset&lt;/code&gt;&lt;/a&gt; behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e78a3d2d853ccbc7b9feb7b074bdc433427c3564" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;numpy_input&lt;/code&gt;&lt;/b&gt;: A nest of NumPy input arrays that will be converted into a dataset. Note that lists of Numpy arrays are stacked, as that is normal &lt;a href=&quot;../data/dataset&quot;&gt;&lt;code&gt;tf.data.Dataset&lt;/code&gt;&lt;/a&gt; behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b98d23cdbc592bfb5e856b425d847a538b840bf9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;numpy_input&lt;/code&gt;&lt;/b&gt;: A nest of NumPy input arrays that will be distributed evenly across all replicas. Note that lists of Numpy arrays are stacked, as that is normal &lt;a href=&quot;../../../data/dataset&quot;&gt;&lt;code&gt;tf.data.Dataset&lt;/code&gt;&lt;/a&gt; behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5fa7452f437fae2bba90ab0c3ae7892c7a495d3" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;obj&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt;, an &lt;code&gt;Operation&lt;/code&gt;, or the name of a tensor or operation. Can also be any object with an &lt;code&gt;_as_graph_element()&lt;/code&gt; method that returns a value of one of these types. Note: &lt;code&gt;_as_graph_element&lt;/code&gt; will be called inside the graph's lock and so may not modify the graph.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="461ba39d197f0a9e0721a61da8e6f7219371b390" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;obj&lt;/code&gt;&lt;/b&gt;: A trackable object to export.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b53a816852bf53ba1c747686fdafebce30fd402" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;obj&lt;/code&gt;&lt;/b&gt;: The object whose attributes we want to modify.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89ec9ef5495291370e4ea90e6ce2e23d4503af8c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;off_value&lt;/code&gt;&lt;/b&gt;: A scalar defining the value to fill in output when &lt;code&gt;indices[j] != i&lt;/code&gt;. (default: 0)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d195d04eef6af4d834158e9bc5b7e28042cfb871" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;offset&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt; of 1 dimension for bias.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad20798bc88c164205735a50624e4d4219035149" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;offset&lt;/code&gt;&lt;/b&gt;: An offset &lt;code&gt;Tensor&lt;/code&gt;, often denoted \(\beta\) in equations, or None. If present, will be added to the normalized tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bab1be44fb7b18a81574756401d471ff7e57968" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;offset&lt;/code&gt;&lt;/b&gt;: The byte count relative to the whence argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a108c5a8f113e223eeaf27da6caafc41cb5bd9eb" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;offset_height&lt;/code&gt;&lt;/b&gt;: Number of rows of zeros to add on top.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c4c52dbf497be937b7c7ba4b6550bf0d648cc8d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;offset_height&lt;/code&gt;&lt;/b&gt;: Vertical coordinate of the top-left corner of the result in the input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="993c3457317203edcfb3f6b61010dbd56023ffa9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;offset_width&lt;/code&gt;&lt;/b&gt;: Horizontal coordinate of the top-left corner of the result in the input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c290a529c359d5d378fe70e5032b7734e0ec12e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;offset_width&lt;/code&gt;&lt;/b&gt;: Number of columns of zeros to add on the left.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37cff0e95054ce35b66fe192e1c19df0ded34d38" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;offsets&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt; of type &lt;code&gt;float32&lt;/code&gt;. A 2-D integer tensor of shape &lt;code&gt;[batch_size, 2]&lt;/code&gt; containing the y, x locations of the center of each window.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b143f78a53239ca16bc327ca77d3c1a6b1c77505" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;oldname&lt;/code&gt;&lt;/b&gt;: string, pathname for a file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="951d74e3d3f71e3d6949906e117e670ec79a6ee4" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;oldpath&lt;/code&gt;&lt;/b&gt;: string, name of the file who's contents need to be copied</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1daaefa535f89f92bcf36d0397e43ff4d8ceb0fc" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;on_batch_begin&lt;/code&gt;&lt;/b&gt;: called at the beginning of every batch.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fda15ebe9d1785584fb5e6cc0c3687a6d92fc412" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;on_batch_end&lt;/code&gt;&lt;/b&gt;: called at the end of every batch.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b39202348df3cec47e4ea87f4267a04aabe26676" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;on_epoch_begin&lt;/code&gt;&lt;/b&gt;: called at the beginning of every epoch.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c5204cd84e08dacf3c3af9c6a4ae727fc2b5168" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;on_epoch_end&lt;/code&gt;&lt;/b&gt;: called at the end of every epoch.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a92b062720ac818637e9225bb0a413dab203e3af" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;on_train_begin&lt;/code&gt;&lt;/b&gt;: called at the beginning of model training.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0318d84b8ef0d9a511b98271be9cd3398223848f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;on_train_end&lt;/code&gt;&lt;/b&gt;: called at the end of model training.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bddbd76f141497409aad80d3e8e1f4a701381e5c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;on_value&lt;/code&gt;&lt;/b&gt;: A scalar defining the value to fill in output when &lt;code&gt;indices[j] = i&lt;/code&gt;. (default: 1)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d7cdb279ab1993bd74adb12a980e81ef9600675" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;onehot_labels&lt;/code&gt;&lt;/b&gt;: One-hot-encoded labels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ed0e7d6c1dd9dd61d8a0af5e66c2af58d22d36c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;onerror&lt;/code&gt;&lt;/b&gt;: optional handler for errors. Should be a function, it will be called with the error as argument. Rethrowing the error aborts the walk. Errors that happen while listing directories are ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8b66ceb5a517c846e1ec3ec2362e0226e257be5" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;oov_char&lt;/code&gt;&lt;/b&gt;: words that were cut out because of the &lt;code&gt;num_words&lt;/code&gt; or &lt;code&gt;skip_top&lt;/code&gt; limit will be replaced with this character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="141e0efc88b0f23036870fd18067510353afb030" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;oov_df_value&lt;/code&gt;&lt;/b&gt;: The document frequency of the OOV token. Only necessary if output_mode is TFIDF. OOV data is optional when appending additional data in TFIDF mode; if an OOV value is supplied it will overwrite the existing OOV value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a996d5550e8b5886df0c6d41144b5d1205b271e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;op&lt;/code&gt;&lt;/b&gt;: An &lt;code&gt;Operation&lt;/code&gt;. &lt;code&gt;Operation&lt;/code&gt; that computes this tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c90af404b227988ee4f95f23d4dceeb94e3e7973" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;op&lt;/code&gt;&lt;/b&gt;: Function that maps (input, num_spatial_dims, padding) -&amp;gt; output</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4ceb575e42447ee6cef1ff8026d79009524e2b9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;op&lt;/code&gt;&lt;/b&gt;: The &lt;code&gt;ops.Operation&lt;/code&gt; that failed, if known; otherwise None.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5744a22dd70bddd0631a08c671db0a36cbb9ba8" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;op&lt;/code&gt;&lt;/b&gt;: The op to colocate all created ops with, or &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d6adac15b1bd22e88c8545196b1cd8c0669d4f5" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;op&lt;/code&gt;&lt;/b&gt;: The operation that should be applied to the RaggedTensor &lt;code&gt;flat_values&lt;/code&gt;. &lt;code&gt;op&lt;/code&gt; is typically an element-wise operation (such as math_ops.add), but any operation that preserves the size of the outermost dimension can be used. I.e., &lt;code&gt;shape[0]&lt;/code&gt; of the value returned by &lt;code&gt;op&lt;/code&gt; must match &lt;code&gt;shape[0]&lt;/code&gt; of the &lt;code&gt;RaggedTensor&lt;/code&gt;s' &lt;code&gt;flat_values&lt;/code&gt; tensors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca771a66a9967c8446ced2538ea161dded6af63f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;op_def&lt;/code&gt;&lt;/b&gt;: (Optional.) The &lt;code&gt;OpDef&lt;/code&gt; proto that describes the &lt;code&gt;op_type&lt;/code&gt; that the operation will have.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75d2241514d22f055758777e3c0a8d5f77deb2a2" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;op_def&lt;/code&gt;&lt;/b&gt;: Optional. The &lt;code&gt;op_def_pb2.OpDef&lt;/code&gt; proto that describes the op type that this &lt;code&gt;Operation&lt;/code&gt; represents.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="909d3c5a138a49e8413e3c4fc60f710999785722" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;op_dict&lt;/code&gt;&lt;/b&gt;: (Optional.) Deprecated, do not use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e93333549c905acc49ce05dfd53aafe835c13c30" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;op_input_list&lt;/code&gt;&lt;/b&gt;: An option sequence of tensors or ops, which will be used to determine the current graph. Otherwise the default graph will be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef27cbb149b05f88c9e46ae5962061a7827a8445" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;op_log&lt;/code&gt;&lt;/b&gt;: (Optional) OpLogProto proto to be written. If not provided, an new one is created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b24f948f8a65725f9a72e740362495730130c46" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;op_log&lt;/code&gt;&lt;/b&gt;: optional. tensorflow::tfprof::OpLogProto proto. Used to define extra op types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05a01acd32a84eaf24b18853c97f2698a986ff89" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;op_log&lt;/code&gt;&lt;/b&gt;: tensorflow.tfprof.OpLogProto proto. User can assign &quot;types&quot; to graph nodes with op_log. &quot;types&quot; allow user to flexibly group and account profiles using options['accounted_type_regexes'].</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00f71ae5d9e10bb51d1b0b804adf5b69c5913fbd" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;op_or_tensor&lt;/code&gt;&lt;/b&gt;: &lt;code&gt;Operation&lt;/code&gt; or &lt;code&gt;Tensor&lt;/code&gt; to benchmark.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="609f9098617ce54a8c5b868c09a0c0d88e585db2" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;op_regex&lt;/code&gt;&lt;/b&gt;: Dump data from only the tensors from op types that matches to the regular expression (through Python's &lt;code&gt;re.match()&lt;/code&gt;). &quot;Op type&quot; refers to the names of the TensorFlow operations (e.g., &quot;MatMul&quot;, &quot;LogSoftmax&quot;), which may repeat in a TensorFlow function. It does &lt;em&gt;not&lt;/em&gt; refer to the names of nodes (e.g., &quot;dense/MatMul&quot;, &quot;dense_1/MatMul_1&quot;) which are unique within a function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a9293a228b310cd355c26d13f302dac9e75cd01" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;op_seed&lt;/code&gt;&lt;/b&gt;: integer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dab20307c9b50654b512c9f58b983fa3e09f7bd" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;op_type&lt;/code&gt;&lt;/b&gt;: The &lt;code&gt;Operation&lt;/code&gt; type to create. This corresponds to the &lt;code&gt;OpDef.name&lt;/code&gt; field for the proto that defines the operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bb1e3b957cb6ed0f3163ec6fe8bc4952d0b9676" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;op_type&lt;/code&gt;&lt;/b&gt;: The string type of an operation. This corresponds to the &lt;code&gt;OpDef.name&lt;/code&gt; field for the proto that defines the operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4959c4a86662b1dac5103bc72d793585232e1a3e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;op_type_map&lt;/code&gt;&lt;/b&gt;: A dictionary mapping op type strings to alternative op type strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91a63591a9b8fe669ea8aef1364fa48ca670fb89" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;open_lower_bound&lt;/code&gt;&lt;/b&gt;: (&lt;code&gt;bool&lt;/code&gt;) whether the lower bound is open (i.e., &amp;gt; rather than the default &amp;gt;=)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c08a84572076f16c1071e772102565d9185f0fe" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;open_upper_bound&lt;/code&gt;&lt;/b&gt;: (&lt;code&gt;bool&lt;/code&gt;) whether the upper bound is open (i.e., &amp;lt; rather than the default &amp;lt;=)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31aa9727d1b76b5cd494d1b5d5d6390572690832" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;operator&lt;/code&gt;&lt;/b&gt;: &lt;code&gt;LinearOperator&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2efaaa6f526b9fc031df69a54866419e0a757299" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;operator&lt;/code&gt;&lt;/b&gt;: &lt;code&gt;LinearOperator&lt;/code&gt; object. If &lt;code&gt;operator.is_non_singular == False&lt;/code&gt;, an exception is raised. We do allow &lt;code&gt;operator.is_non_singular == None&lt;/code&gt;, in which case this operator will have &lt;code&gt;is_non_singular == None&lt;/code&gt;. Similarly for &lt;code&gt;is_self_adjoint&lt;/code&gt; and &lt;code&gt;is_positive_definite&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a640b21754b7b87a87c2d41a66678f4225d7b10" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;operators&lt;/code&gt;&lt;/b&gt;: Iterable of &lt;code&gt;LinearOperator&lt;/code&gt; objects, each with the same &lt;code&gt;dtype&lt;/code&gt; and composable shape, representing the Kronecker factors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63e567d1ef0186cbcb9492d6a2cdd5865e25b2fb" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;operators&lt;/code&gt;&lt;/b&gt;: Iterable of &lt;code&gt;LinearOperator&lt;/code&gt; objects, each with the same &lt;code&gt;dtype&lt;/code&gt; and composable shape.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eafd67a7dfc83e0be8b10f0403a00a4e8c8f8c72" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;opt&lt;/code&gt;&lt;/b&gt;: An existing &lt;code&gt;Optimizer&lt;/code&gt; to encapsulate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4feb7898a9a0ac144ccced397bfb5c4acf7e8b5d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;opt&lt;/code&gt;&lt;/b&gt;: An instance of a &lt;a href=&quot;../../../../keras/optimizers/optimizer&quot;&gt;&lt;code&gt;tf.keras.optimizers.Optimizer&lt;/code&gt;&lt;/a&gt; or a &lt;code&gt;tf.train.Optimizer&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="587ed3ccc29b305ff5cb1ab00b4c42c66cc43ce8" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;opt&lt;/code&gt;&lt;/b&gt;: An instance of a &lt;a href=&quot;../../keras/optimizers/optimizer&quot;&gt;&lt;code&gt;tf.keras.optimizers.Optimizer&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58433e2332c6539f5b76673800526c288da7005d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;opt&lt;/code&gt;&lt;/b&gt;: The actual optimizer that will be used to compute and apply the gradients. Must be one of the Optimizer classes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3f5801a234c515606caf88efe4ab46a493495ba" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;optimization_parameters&lt;/code&gt;&lt;/b&gt;: An instance of &lt;code&gt;AdagradParameters&lt;/code&gt;, &lt;code&gt;AdamParameters&lt;/code&gt; or &lt;code&gt;StochasticGradientDescentParameters&lt;/code&gt;. This optimizer will be applied to all embedding variables specified by &lt;code&gt;feature_columns&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81e5af93c0dc46ba01d361302382fcdb513c902c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;optimizations&lt;/code&gt;&lt;/b&gt;: Experimental flag, subject to change. A list of optimizations to apply when converting the model. E.g. &lt;code&gt;[Optimize.DEFAULT]&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddfb0516bc2549eef72679aefdff86517586a6e9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;optimize&lt;/code&gt;&lt;/b&gt;: if true, attempt to statically determine the shape of 'tensor' and encode it as a constant.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e62522ea368c4b1241074989152201914e41aa9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;optimize_size&lt;/code&gt;&lt;/b&gt;: An optional &lt;code&gt;bool&lt;/code&gt;. Defaults to &lt;code&gt;False&lt;/code&gt;. If True, spend CPU/RAM to reduce size with no quality change.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b599171737696c1164c9e50f3d55417efe66cdcc" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;optimizer&lt;/code&gt;&lt;/b&gt;: An &lt;a href=&quot;../keras/optimizers/optimizer&quot;&gt;&lt;code&gt;tf.keras.optimizers.Optimizer&lt;/code&gt;&lt;/a&gt; instance to optimize the loss in TRAIN mode. Namely, sets &lt;code&gt;train_op = optimizer.get_updates(loss, trainable_variables)&lt;/code&gt;, which updates variables to minimize &lt;code&gt;loss&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f245dc63be513b0afe01de20f00c10352cc4a492" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;optimizer&lt;/code&gt;&lt;/b&gt;: An instance of &lt;code&gt;tf.Optimizer&lt;/code&gt; or string specifying optimizer type. Defaults to Adagrad optimizer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23aa4de5f850ac8f11be081e960902f76d0d7af6" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;optimizer&lt;/code&gt;&lt;/b&gt;: An instance of &lt;code&gt;tf.Optimizer&lt;/code&gt; used to train the model. Can also be a string (one of 'Adagrad', 'Adam', 'Ftrl', 'RMSProp', 'SGD'), or callable. Defaults to FTRL optimizer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12a0958363b8e3e4586ed1ceb34ae439f97ca07e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;optimizer&lt;/code&gt;&lt;/b&gt;: An instance of &lt;code&gt;tf.keras.optimizers.*&lt;/code&gt; or &lt;a href=&quot;experimental/linearsdca&quot;&gt;&lt;code&gt;tf.estimator.experimental.LinearSDCA&lt;/code&gt;&lt;/a&gt; used to train the model. Can also be a string (one of 'Adagrad', 'Adam', 'Ftrl', 'RMSProp', 'SGD'), or callable. Defaults to FTRL optimizer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b08acdd225f3999e3dc2252c894c5d617001096a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;optimizer&lt;/code&gt;&lt;/b&gt;: An instance of &lt;code&gt;tf.keras.optimizers.*&lt;/code&gt; used to train the model. Can also be a string (one of 'Adagrad', 'Adam', 'Ftrl', 'RMSProp', 'SGD'), or callable. Defaults to FTRL optimizer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03bc95b541a8ebbf6eca4f93cadbf1a28966a6e9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;optimizer&lt;/code&gt;&lt;/b&gt;: An instance of &lt;code&gt;tf.keras.optimizers.*&lt;/code&gt; used to train the model. Can also be a string (one of 'Adagrad', 'Adam', 'Ftrl', 'RMSProp', SGD'), or callable. Defaults to Adagrad optimizer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce2b5bac35b8d2fdb6cd4c6a72495c6964903f6d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;optimizer&lt;/code&gt;&lt;/b&gt;: String (name of optimizer) or optimizer instance. See &lt;a href=&quot;../optimizers&quot;&gt;&lt;code&gt;tf.keras.optimizers&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3568784683f69596cdd47550f80a1b28d224ceae" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;optimizer&lt;/code&gt;&lt;/b&gt;: String (name of optimizer) or optimizer instance. See &lt;a href=&quot;optimizers&quot;&gt;&lt;code&gt;tf.keras.optimizers&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e61d0867dd2c193035926dc009c9825389452941" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;optimizer&lt;/code&gt;&lt;/b&gt;: String, &lt;code&gt;tf.keras.optimizers.*&lt;/code&gt; object, or callable that creates the optimizer to use for training. If not specified, will use &lt;code&gt;Ftrl&lt;/code&gt; as the default optimizer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abb7abe27cde3521d12131f02defb06b85aefcc9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;optimizer&lt;/code&gt;&lt;/b&gt;: The Optimizer instance to wrap.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d00abaddaaee503dd67cc0dbc6c7fad2edad6aa3" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;options&lt;/code&gt;&lt;/b&gt;: (optional) A TFRecordOptions object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3949a3983f4f09e94e473435c826eabc4876938a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;options&lt;/code&gt;&lt;/b&gt;: (optional) String specifying compression type, &lt;code&gt;TFRecordCompressionType&lt;/code&gt;, or &lt;code&gt;TFRecordOptions&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f118d74fae3c9c02419ef9b8ed31fb68b599b26a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;options&lt;/code&gt;&lt;/b&gt;: &lt;code&gt;RunOptions&lt;/code&gt; from the &lt;code&gt;Session.run()&lt;/code&gt; call.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1a13c391edf6117abd334b5a21dddb146a0246c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;options&lt;/code&gt;&lt;/b&gt;: &lt;code&gt;TFRecordOption&lt;/code&gt;, &lt;code&gt;TFRecordCompressionType&lt;/code&gt;, or string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e0db44580518df305bc54d2e6428513a7408a38" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;options&lt;/code&gt;&lt;/b&gt;: A &lt;a href=&quot;../../../../data/options&quot;&gt;&lt;code&gt;tf.data.Options&lt;/code&gt;&lt;/a&gt; that identifies the options the use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e5f13b1b33951b72d151ce94f86d3280388526c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;options&lt;/code&gt;&lt;/b&gt;: A &lt;a href=&quot;../../../data/options&quot;&gt;&lt;code&gt;tf.data.Options&lt;/code&gt;&lt;/a&gt; that identifies the options the use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a849c39f6812af689e90d61dcdb5e7c4b5d3e02" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;options&lt;/code&gt;&lt;/b&gt;: A &lt;a href=&quot;../options&quot;&gt;&lt;code&gt;tf.data.Options&lt;/code&gt;&lt;/a&gt; that identifies the options the use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a29bcf2e92d197e2ee8c3922fb3cdc818e6d55e4" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;options&lt;/code&gt;&lt;/b&gt;: A &lt;a href=&quot;options&quot;&gt;&lt;code&gt;tf.data.Options&lt;/code&gt;&lt;/a&gt; that identifies the options the use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25e99ec75500aabcd0180b4a9b6e663a7b581b7c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;options&lt;/code&gt;&lt;/b&gt;: A LMDBRecordOptions object (optional).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="064a101fa7eda2e9074d5c7a4ef0e20288b5ba24" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;options&lt;/code&gt;&lt;/b&gt;: A TFRecordOptions object (optional).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="996982930a6f71897fc72d7c7c874544fd83df78" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;options&lt;/code&gt;&lt;/b&gt;: A [&lt;code&gt;RunOptions&lt;/code&gt;] protocol buffer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4d06f401a2ba1a347564ae45fc3f0e2815fcb00" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;options&lt;/code&gt;&lt;/b&gt;: A dict of options. See ALL_ADVICE example above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f6ae085f7e8539171950f0e2916e7e0106e208f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;options&lt;/code&gt;&lt;/b&gt;: A dict of options. See core/profiler/g3doc/options.md.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15dc8afef5cdef53ee97beeb727cbfc6f3c95b68" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;options&lt;/code&gt;&lt;/b&gt;: Dictionary of experimental optimizer options to configure. Valid keys:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d86f9cf0ee2348d5c1892be829be19a5ca152c0d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;options&lt;/code&gt;&lt;/b&gt;: Dictionary of options that are required to load the delegate. All keys and values in the dictionary should be convertible to str. Consult the documentation of the specific delegate for required and legal options. (default None)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="751d1f02a227de7f91cd968b90f6bb93dafe19cd" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;options&lt;/code&gt;&lt;/b&gt;: Exactly like the &lt;code&gt;options&lt;/code&gt; argument to &lt;code&gt;Session.run()&lt;/code&gt;, i.e., a config_pb2.RunOptions proto.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bc42fc45d0411db808edc2b8ea46e027af9765e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;options&lt;/code&gt;&lt;/b&gt;: Optional &lt;a href=&quot;../../saved_model/saveoptions&quot;&gt;&lt;code&gt;tf.saved_model.SaveOptions&lt;/code&gt;&lt;/a&gt; object that specifies options for saving to SavedModel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83d95eb2998454adce3ee3999fdd96c438086d7b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;options&lt;/code&gt;&lt;/b&gt;: Optional &lt;a href=&quot;../saved_model/saveoptions&quot;&gt;&lt;code&gt;tf.saved_model.SaveOptions&lt;/code&gt;&lt;/a&gt; object that specifies options for saving to SavedModel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfacb1941d6fec8aaba8973d5667da008b473c6d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;options&lt;/code&gt;&lt;/b&gt;: Optional initial option dict to start with.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a87c7dde76f9f9598eb41a5d6fe443504b840d3" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;options&lt;/code&gt;&lt;/b&gt;: Optional, &lt;a href=&quot;saveoptions&quot;&gt;&lt;code&gt;tf.saved_model.SaveOptions&lt;/code&gt;&lt;/a&gt; object that specifies options for saving.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="997fd330a1f72fe5eb18c44163370fbf6742a73e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;options&lt;/code&gt;&lt;/b&gt;: Same as &lt;code&gt;tf.Session.run()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9210666b87fd8b5e9336e1f807ff5f563def398" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;options&lt;/code&gt;&lt;/b&gt;: a &lt;a href=&quot;options&quot;&gt;&lt;code&gt;tf.data.Options&lt;/code&gt;&lt;/a&gt; to merge with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="458ac85f05d7b6fdb31e85137fec0dacd234e74e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;options&lt;/code&gt;&lt;/b&gt;: see ALL_ADVICE example above. Default checks everything.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21e9acf8001a2a2a9829730ff5f313ee255ad83b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ord&lt;/code&gt;&lt;/b&gt;: Order of the norm. Supported values are 'fro', 'euclidean', &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;2&lt;/code&gt;, &lt;code&gt;np.inf&lt;/code&gt; and any positive real number yielding the corresponding p-norm. Default is 'euclidean' which is equivalent to Frobenius norm if &lt;code&gt;tensor&lt;/code&gt; is a matrix and equivalent to 2-norm for vectors. Some restrictions apply: a) The Frobenius norm &lt;code&gt;fro&lt;/code&gt; is not defined for vectors, b) If axis is a 2-tuple (matrix norm), only 'euclidean', 'fro', &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;2&lt;/code&gt;, &lt;code&gt;np.inf&lt;/code&gt; are supported. See the description of &lt;code&gt;axis&lt;/code&gt; on how to compute norms for a batch of vectors or matrices stored in a tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7cff153fe46f39b9ccfe7af7987eab3a1398230" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;ord&lt;/code&gt;&lt;/b&gt;: Order of the norm. Supported values are &lt;code&gt;'fro'&lt;/code&gt;, &lt;code&gt;'euclidean'&lt;/code&gt;, &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;2&lt;/code&gt;, &lt;code&gt;np.inf&lt;/code&gt; and any positive real number yielding the corresponding p-norm. Default is &lt;code&gt;'euclidean'&lt;/code&gt; which is equivalent to Frobenius norm if &lt;code&gt;tensor&lt;/code&gt; is a matrix and equivalent to 2-norm for vectors. Some restrictions apply: a) The Frobenius norm &lt;code&gt;'fro'&lt;/code&gt; is not defined for vectors, b) If axis is a 2-tuple (matrix norm), only &lt;code&gt;'euclidean'&lt;/code&gt;, '&lt;code&gt;fro'&lt;/code&gt;, &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;2&lt;/code&gt;, &lt;code&gt;np.inf&lt;/code&gt; are supported. See the description of &lt;code&gt;axis&lt;/code&gt; on how to compute norms for a batch of vectors or matrices stored in a tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93f144523310db616ede34a96c3026282430f17b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;order&lt;/code&gt;&lt;/b&gt;: Normalization order (e.g. 2 for L2 norm).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e4d2f2b9503808667337560a4d00c950e32ee4d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;origin&lt;/code&gt;&lt;/b&gt;: Original URL of the file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fa506bb762135043bf783a54b909bf641008ca8" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;original_name&lt;/code&gt;&lt;/b&gt;: str, the original flag name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a5485bb6e057e68b299f4b2f5ae90ab5ca9b35b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;original_op&lt;/code&gt;&lt;/b&gt;: Optional. Used to associate the new &lt;code&gt;Operation&lt;/code&gt; with an existing &lt;code&gt;Operation&lt;/code&gt; (for example, a replica with the op that was replicated).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4b66a630e85781d7c59f671fca8a6c3d8cd18bb" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;other&lt;/code&gt;&lt;/b&gt;: &lt;a href=&quot;https://www.tensorflow.org/probability/api_docs/python/tfp/distributions/Distribution&quot;&gt;&lt;code&gt;tfp.distributions.Distribution&lt;/code&gt;&lt;/a&gt; instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fab956bcc997a088ade696993c158650c76b0a80" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;other&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;DType&lt;/code&gt; (or object that may be converted to a &lt;code&gt;DType&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="714d4cfe02a30a31006549efa9bc60b94195cfe5" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;other&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;TypeSpec&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c963d8d644e9fac1484cb3c0add58947395280a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;other&lt;/code&gt;&lt;/b&gt;: Another &lt;code&gt;Dimension&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7c2e4a9e9a14ad4e52305ea99352cf696cd87f2" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;other&lt;/code&gt;&lt;/b&gt;: Another &lt;code&gt;TensorShape&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2944c25f350c195d186c799da4b2d03bd00b62ed" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;other&lt;/code&gt;&lt;/b&gt;: Another DeviceSpec</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac00175eb7b0a4f95079bf4985fdb250b451e359" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;other&lt;/code&gt;&lt;/b&gt;: Another Dimension, or a value accepted by &lt;code&gt;as_dimension&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bfa63cfc9ccd63a881d8615b570f6ef7fd61bdf" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;other&lt;/code&gt;&lt;/b&gt;: Another Dimension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95b1b1219a44fd2d00beb363d45dac1ac990f9bc" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;other&lt;/code&gt;&lt;/b&gt;: Another TensorShape.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbfa491d7f233e9e83ddb7cbedda3b93a5e7b046" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;other&lt;/code&gt;&lt;/b&gt;: Object to compare against.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a95f8ffa276174e104d9c778987befa4e7720440" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;other_flag_values&lt;/code&gt;&lt;/b&gt;: FlagValues, if it is not None, it should be the FlagValues object where the second definition of flagname occurs. If it is None, we assume that we're being called when attempting to create the flag a second time, and we use the module calling this one as the source of the second definition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3021ca443e74f54560c9677606e257b779e6c0b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;out&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt;. Has the same type as &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cf2232a142bcb05be0b70358aa0f93879e7206f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;out_backprop&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt;. Must have the same type as &lt;code&gt;filter&lt;/code&gt;. 4-D with shape &lt;code&gt;[batch, out_height, out_width, out_channels]&lt;/code&gt;. Gradients w.r.t. the output of the convolution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17cfaead7b699bcfe5705c1531f5ae979f447c42" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;out_backprop&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt;. Must have the same type as &lt;code&gt;filter&lt;/code&gt;. 4-D with shape based on &lt;code&gt;data_format&lt;/code&gt;. For example, if &lt;code&gt;data_format&lt;/code&gt; is 'NHWC' then out_backprop shape is &lt;code&gt;[batch, out_height, out_width, out_channels]&lt;/code&gt;. Gradients w.r.t. the output of the convolution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="555d856083267f9d78f3565f2bd477d5289ac539" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;out_backprop&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt;. Must have the same type as &lt;code&gt;input&lt;/code&gt;. 4-D with shape &lt;code&gt;[batch, out_height, out_width, out_channels]&lt;/code&gt;. Gradients w.r.t. the output of the convolution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1463c31db699b49bd72d75c3c732e9fe2cbc55a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;out_backprop&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt;. Must have the same type as &lt;code&gt;input&lt;/code&gt;. 4-D with shape based on &lt;code&gt;data_format&lt;/code&gt;. For example, if &lt;code&gt;data_format&lt;/code&gt; is 'NHWC' then out_backprop shape is &lt;code&gt;[batch, out_height, out_width, out_channels]&lt;/code&gt;. Gradients w.r.t. the output of the convolution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0921818ae078a02c49ff80f536b6b633ba44784c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;out_backprop&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt;. Must have the same type as &lt;code&gt;input&lt;/code&gt;. Backprop signal of shape &lt;code&gt;[batch, out_depth, out_rows, out_cols, out_channels]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5cea125b1cc26f7c79d6251434b6ca370ccfa56" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;out_delta_dense_weights&lt;/code&gt;&lt;/b&gt;: A list with the same length as &lt;code&gt;dense_features&lt;/code&gt; of &lt;code&gt;Tensor&lt;/code&gt; objects with type &lt;code&gt;float32&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5065d366b83a3c48e60118470a652b64e2a846a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;out_delta_sparse_weights&lt;/code&gt;&lt;/b&gt;: A list with the same length as &lt;code&gt;sparse_example_indices&lt;/code&gt; of &lt;code&gt;Tensor&lt;/code&gt; objects with type &lt;code&gt;float32&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4aadaf0254cdbe61038e30fa76ab7ac813040ee9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;out_example_state_data&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt; of type &lt;code&gt;float32&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4eab0544b5653806c8cd3392443a1821f49e126a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;out_idx&lt;/code&gt;&lt;/b&gt;: An optional &lt;a href=&quot;../../dtypes/dtype&quot;&gt;&lt;code&gt;tf.DType&lt;/code&gt;&lt;/a&gt; from: &lt;code&gt;tf.int32, tf.int64&lt;/code&gt;. Defaults to &lt;a href=&quot;../../../tf#int32&quot;&gt;&lt;code&gt;tf.int32&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55b5961a4ca474acdf3a15cef703a46cd8a9b95c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;out_idx&lt;/code&gt;&lt;/b&gt;: An optional &lt;a href=&quot;dtypes/dtype&quot;&gt;&lt;code&gt;tf.DType&lt;/code&gt;&lt;/a&gt; from: &lt;code&gt;tf.int32, tf.int64&lt;/code&gt;. Defaults to &lt;a href=&quot;../tf#int32&quot;&gt;&lt;code&gt;tf.int32&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="373f9792e3257c1d21078d3940b1f255a61f202a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;out_type&lt;/code&gt;&lt;/b&gt;: (Optional) The specified non-quantized numeric output type of the operation. Defaults to &lt;a href=&quot;../../../tf#int32&quot;&gt;&lt;code&gt;tf.int32&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01b421afd515d5022143751131482f21e19f157d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;out_type&lt;/code&gt;&lt;/b&gt;: (Optional) The specified output type of the operation (&lt;code&gt;int32&lt;/code&gt; or &lt;code&gt;int64&lt;/code&gt;). Defaults to &lt;a href=&quot;../../../tf#int32&quot;&gt;&lt;code&gt;tf.int32&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3c511cf2c628eceaa21a6a8fa325c084f851293" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;out_type&lt;/code&gt;&lt;/b&gt;: (Optional) The specified output type of the operation (&lt;code&gt;int32&lt;/code&gt; or &lt;code&gt;int64&lt;/code&gt;). Defaults to &lt;a href=&quot;../tf#int32&quot;&gt;&lt;code&gt;tf.int32&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b728cedc9dba497bfaa967eb0aade9caf2487d6d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;out_type&lt;/code&gt;&lt;/b&gt;: &lt;code&gt;DType&lt;/code&gt; of the output. Acceptable types are &lt;code&gt;half&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt;, &lt;code&gt;double&lt;/code&gt;, &lt;code&gt;int32&lt;/code&gt;, &lt;code&gt;uint16&lt;/code&gt;, &lt;code&gt;uint8&lt;/code&gt;, &lt;code&gt;int16&lt;/code&gt;, &lt;code&gt;int8&lt;/code&gt;, &lt;code&gt;int64&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f013af3ed77859c5c40149dea1cdba64d985dc73" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;out_type&lt;/code&gt;&lt;/b&gt;: &lt;code&gt;dtype&lt;/code&gt; for the returned tensor. Defaults to &lt;code&gt;self.row_splits.dtype&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d940edb3e8a41d32f7eec609922fa5a139032141" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;out_type&lt;/code&gt;&lt;/b&gt;: A &lt;a href=&quot;../dtypes/dtype&quot;&gt;&lt;code&gt;tf.DType&lt;/code&gt;&lt;/a&gt;. The type of the serialized tensor. The provided type must match the type of the serialized tensor and no implicit conversion will take place.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="024fb83e5d9324f6ac080467747044c14f03c8b2" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;out_type&lt;/code&gt;&lt;/b&gt;: An optional &lt;a href=&quot;../../../dtypes/dtype&quot;&gt;&lt;code&gt;tf.DType&lt;/code&gt;&lt;/a&gt; from: &lt;code&gt;tf.qint8, tf.quint8, tf.qint32, tf.qint16, tf.quint16&lt;/code&gt;. Defaults to &lt;a href=&quot;../../../../tf#qint32&quot;&gt;&lt;code&gt;tf.qint32&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dba39a8b8ba1563d3da4993ce79496a49fcdb6cf" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;out_type&lt;/code&gt;&lt;/b&gt;: An optional &lt;a href=&quot;../../../dtypes/dtype&quot;&gt;&lt;code&gt;tf.DType&lt;/code&gt;&lt;/a&gt; from: &lt;code&gt;tf.qint8, tf.quint8, tf.qint32, tf.qint16, tf.quint16&lt;/code&gt;. Defaults to &lt;a href=&quot;../../../../tf#quint8&quot;&gt;&lt;code&gt;tf.quint8&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e9f133a43e2704adb13face13d05ad9281237a9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;out_type&lt;/code&gt;&lt;/b&gt;: An optional &lt;a href=&quot;../../dtypes/dtype&quot;&gt;&lt;code&gt;tf.DType&lt;/code&gt;&lt;/a&gt; from: &lt;code&gt;tf.float32, tf.float64, tf.int32, tf.int64&lt;/code&gt;. Defaults to &lt;a href=&quot;../../../tf#float32&quot;&gt;&lt;code&gt;tf.float32&lt;/code&gt;&lt;/a&gt;. The numeric type to interpret each string in &lt;code&gt;string_tensor&lt;/code&gt; as.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d90403bd6fe71af5c9b6b84638e9922bb85d8c1" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;out_type&lt;/code&gt;&lt;/b&gt;: An optional &lt;a href=&quot;../dtypes/dtype&quot;&gt;&lt;code&gt;tf.DType&lt;/code&gt;&lt;/a&gt; from: &lt;code&gt;tf.float32, tf.float64, tf.int32, tf.int64&lt;/code&gt;. Defaults to &lt;code&gt;tf.float32&lt;/code&gt;. The numeric type to interpret each string in &lt;code&gt;string_tensor&lt;/code&gt; as.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b26c04131100d2df39fdd378033b6f720f8e9065" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;out_type&lt;/code&gt;&lt;/b&gt;: The &lt;code&gt;dtype&lt;/code&gt; to use for serialization.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad35eb171b9f2eb4ec8c42557268906f19a57c15" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;out_type&lt;/code&gt;&lt;/b&gt;: The dtype for the return value. Defaults to &lt;code&gt;segment_ids.dtype&lt;/code&gt;, or &lt;a href=&quot;../../tf#int64&quot;&gt;&lt;code&gt;tf.int64&lt;/code&gt;&lt;/a&gt; if &lt;code&gt;segment_ids&lt;/code&gt; does not have a dtype.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e0c2b2e5ec328c999ece32810d40c06186c9beb" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;out_type&lt;/code&gt;&lt;/b&gt;: The dtype for the return value. Defaults to &lt;code&gt;splits.dtype&lt;/code&gt;, or &lt;a href=&quot;../../tf#int64&quot;&gt;&lt;code&gt;tf.int64&lt;/code&gt;&lt;/a&gt; if &lt;code&gt;splits&lt;/code&gt; does not have a dtype.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c31cacf4a143945f021aec812730ac8dd87de78d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;out_type&lt;/code&gt;&lt;/b&gt;: The output type (&lt;code&gt;int32&lt;/code&gt; or &lt;code&gt;int64&lt;/code&gt;). Default is &lt;a href=&quot;../tf#int32&quot;&gt;&lt;code&gt;tf.int32&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7babcf092421e02a87262463a143471d222d8e1" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;out_type&lt;/code&gt;&lt;/b&gt;: The specified output type of the operation (&lt;code&gt;int32&lt;/code&gt; or &lt;code&gt;int64&lt;/code&gt;). Defaults to &lt;a href=&quot;../tf#int32&quot;&gt;&lt;code&gt;tf.int32&lt;/code&gt;&lt;/a&gt;(optional).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca4bb45d97b64e9c4ddd61e1cf760fffb19cc9c0" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;outer_axis&lt;/code&gt;&lt;/b&gt;: &lt;code&gt;int&lt;/code&gt;: The first dimension in the range of dimensions to merge. May be negative if &lt;code&gt;self.shape.rank&lt;/code&gt; is statically known.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c8bee33d766fccd45c803206d2f239ac831cf69" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;outfile&lt;/code&gt;&lt;/b&gt;: File object we write to. Default None means sys.stdout.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="422f62b76319f65ce19d208ec860d3b76ba721ad" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;output&lt;/code&gt;&lt;/b&gt;: &lt;code&gt;Tensor&lt;/code&gt; of shape &lt;code&gt;[..., N, K]&lt;/code&gt; whose inner-most 2 dimensions form &lt;code&gt;M&lt;/code&gt;-by-&lt;code&gt;K&lt;/code&gt; matrices that solve the equations &lt;code&gt;matrix[..., :, :] * output[..., :, :] = rhs[..., :, :]&lt;/code&gt; in the least squares sense.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bd32de5e856b2fe6014dd62d7e9a24ff0eae5de" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;output&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt; of the same type as tensor, containing the vector or matrix norms. If &lt;code&gt;keepdims&lt;/code&gt; is True then the rank of output is equal to the rank of &lt;code&gt;tensor&lt;/code&gt;. Otherwise, if &lt;code&gt;axis&lt;/code&gt; is none the output is a scalar, if &lt;code&gt;axis&lt;/code&gt; is an integer, the rank of &lt;code&gt;output&lt;/code&gt; is one less than the rank of &lt;code&gt;tensor&lt;/code&gt;, if &lt;code&gt;axis&lt;/code&gt; is a 2-tuple the rank of &lt;code&gt;output&lt;/code&gt; is two less than the rank of &lt;code&gt;tensor&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c584b94b2cc085b7494d3fb6b59530e84e66f1c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;output&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt; of type &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c48c90df6b18b6270081c0ac72e7ccd31fbccb8a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;output&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt; of type &lt;code&gt;out_type&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f51cc2dceef32fe65f3926e0d4ad5cc5f3db7ea4" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;output&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt;. Has the same type as &lt;code&gt;input&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="741cb1a5f1f8bdd5938e42c580665655455e35a4" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;output&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt;. Has the same type as &lt;code&gt;values&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18e564b214a72d9158c5ddac06908ad650f0a5ab" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;output&lt;/code&gt;&lt;/b&gt;: A stacked &lt;code&gt;Tensor&lt;/code&gt; with the same type as &lt;code&gt;values&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55e80c82af661275931432f4f3795f398c313e10" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;output&lt;/code&gt;&lt;/b&gt;: A tensor resulting from a softmax (unless &lt;code&gt;from_logits&lt;/code&gt; is True, in which case &lt;code&gt;output&lt;/code&gt; is expected to be the logits).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9262b1995a048d5ee57382a54e2090b0044716b6" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;output&lt;/code&gt;&lt;/b&gt;: A tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="007d1ccc3f3f3a22a609622c46f239fc4d71bb58" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;output&lt;/code&gt;&lt;/b&gt;: N-D &lt;code&gt;SparseTensor&lt;/code&gt; representing the results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84b15c78bc4bc1ceb58dc9a645c91804038500f1" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;output&lt;/code&gt;&lt;/b&gt;: The one-hot tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb31512c93c24edb258dfa5dc908e89329c94474" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;output&lt;/code&gt;&lt;/b&gt;: the output SparseTensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63d905e0ff54aed9c47d38a0fc3acb7ba0d20606" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;output_arrays&lt;/code&gt;&lt;/b&gt;: List of output tensors to freeze graph with.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c84e1504c2e8993e99f663fcceeb2ef3b87f806b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;output_arrays&lt;/code&gt;&lt;/b&gt;: List of output tensors to freeze graph with. Use only when graph cannot be loaded into TensorFlow and when &lt;code&gt;input_tensors&lt;/code&gt; and &lt;code&gt;output_tensors&lt;/code&gt; are None. (default None)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="606d1418fff2e0cac1948f179b7d5777a2f9c9ff" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;output_arrays&lt;/code&gt;&lt;/b&gt;: List of output tensors to freeze graph with. Uses output arrays from SignatureDef when none are provided. (default None)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3be0977f30c5fe1edf1177c5c32ed16372a37bd0" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;output_buffer_size&lt;/code&gt;&lt;/b&gt;: int or &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ae6423b5af1f054c727a5648dc3ac9317f81c45" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;output_classes&lt;/code&gt;&lt;/b&gt;: (Optional.) A nested structure of Python &lt;code&gt;type&lt;/code&gt; objects corresponding to each component of an element of this iterator. If omitted, each component is assumed to be of type &lt;a href=&quot;../../../tensor&quot;&gt;&lt;code&gt;tf.Tensor&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="540467abbd04aec5735ae46200645a7ddebf6a39" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;output_classes&lt;/code&gt;&lt;/b&gt;: A nested structure of Python &lt;code&gt;type&lt;/code&gt; objects corresponding to each component of an element of this iterator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6973c3fb97cf4a7a341d568faf341ada2d8904d5" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;output_dim&lt;/code&gt;&lt;/b&gt;: int &amp;gt;= 0. Dimension of the dense embedding.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abc559422b6dd046e39a4a8728fe46b3cc60cd77" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;output_dir&lt;/code&gt;&lt;/b&gt;: &lt;code&gt;string&lt;/code&gt;, the directory to save the profile traces to. Defaults to the current directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4948940251a905c48add0e222dc990d577ca33d4" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;output_dir&lt;/code&gt;&lt;/b&gt;: &lt;code&gt;string&lt;/code&gt;, the directory to save the summaries to. Only used if no &lt;code&gt;summary_writer&lt;/code&gt; is supplied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6715fccf5cadbe6cd0ee34072e2e93388206af3e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;output_dtype&lt;/code&gt;&lt;/b&gt;: An optional &lt;a href=&quot;../dtypes/dtype&quot;&gt;&lt;code&gt;tf.DType&lt;/code&gt;&lt;/a&gt; from: &lt;code&gt;tf.int32, tf.int64&lt;/code&gt;. Defaults to &lt;a href=&quot;../../tf#int64&quot;&gt;&lt;code&gt;tf.int64&lt;/code&gt;&lt;/a&gt;. The dtype of the returned argmax tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67dd8bff0a567135e4d18252242ec9c102e396d4" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;output_dtype&lt;/code&gt;&lt;/b&gt;: integer type to use for the output. Defaults to int64.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e80e41b37e1667af6b6f010bfad8013a53f40041" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;output_encoding&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;string&lt;/code&gt; from: &lt;code&gt;&quot;UTF-8&quot;, &quot;UTF-16-BE&quot;, &quot;UTF-32-BE&quot;&lt;/code&gt;. The unicode encoding to use in the output. Must be one of &lt;code&gt;&quot;UTF-8&quot;, &quot;UTF-16-BE&quot;, &quot;UTF-32-BE&quot;&lt;/code&gt;. Multi-byte encodings will be big-endian.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c5c6f67613e27716015abae06dc5ec4a339b12d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;output_encoding&lt;/code&gt;&lt;/b&gt;: Unicode encoding that should be used to encode each codepoint sequence. Can be &lt;code&gt;&quot;UTF-8&quot;&lt;/code&gt;, &lt;code&gt;&quot;UTF-16-BE&quot;&lt;/code&gt;, or &lt;code&gt;&quot;UTF-32-BE&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c568fc4acb8a3ecde5e96dbda86e568b0d25991b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;output_format&lt;/code&gt;&lt;/b&gt;: Output file format. Currently must be &lt;code&gt;{TFLITE, GRAPHVIZ_DOT}&lt;/code&gt;. (default TFLITE)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dafa34dd74d6db4255b4c1abf8a0ad2a66f8f2c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;output_gradients&lt;/code&gt;&lt;/b&gt;: a list of gradients, one for each element of target. Defaults to None.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e5579e3e316c647a863e8b9024a69a4537b65d0" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;output_idx_type&lt;/code&gt;&lt;/b&gt;: An optional &lt;a href=&quot;../dtypes/dtype&quot;&gt;&lt;code&gt;tf.DType&lt;/code&gt;&lt;/a&gt; from: &lt;code&gt;tf.int32, tf.int64&lt;/code&gt;. Defaults to &lt;a href=&quot;../../tf#int32&quot;&gt;&lt;code&gt;tf.int32&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5532bd7be8e77bb5af623a4fad55525cbb0a459c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;output_is_sparse&lt;/code&gt;&lt;/b&gt;: If true, returns a &lt;code&gt;SparseTensor&lt;/code&gt; instead of a dense &lt;code&gt;Tensor&lt;/code&gt; (the default).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f24f7064052d54b1701849f6d252b12af0db0568" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;output_keep_prob&lt;/code&gt;&lt;/b&gt;: unit Tensor or float between 0 and 1, output keep probability; if it is constant and 1, no output dropout will be added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b4053f35a39aa51113af0eea23dd9d5bed15be4" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;output_max&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt; of type &lt;code&gt;float32&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11251d735a7ace950b703eefdfba5cc7067ebdcb" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;output_min&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt; of type &lt;code&gt;float32&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e649794a20eb45700eb920bcbdf272a40b0ee68" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;output_mode&lt;/code&gt;&lt;/b&gt;: Optional specification for the output of the layer. Values can be &quot;int&quot;, &quot;binary&quot;, &quot;count&quot; or &quot;tf-idf&quot;, configuring the layer as follows: &quot;int&quot;: Outputs integer indices, one integer index per split string token. &quot;binary&quot;: Outputs a single int array per batch, of either vocab_size or max_tokens size, containing 1s in all elements where the token mapped to that index exists at least once in the batch item. &quot;count&quot;: As &quot;binary&quot;, but the int array contains a count of the number of times the token at that index appeared in the batch item. &quot;tf-idf&quot;: As &quot;binary&quot;, but the TF-IDF algorithm is applied to find the value in each token slot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="982a66df39ac5c944683129fdae8289728987cfd" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;output_mode&lt;/code&gt;&lt;/b&gt;: Optional specification for the output of the layer. Values can be INT, BINARY, COUNT or TFIDF, which control the outputs as follows: INT: Outputs integer indices, one integer index per split string token. BINARY: Outputs a single int array per batch, of either vocab_size or max_tokens size, containing 1s in all elements where the token mapped to that index exists at least once in the batch item. COUNT: As BINARY, but the int array contains a count of the number of times the token at that index appeared in the batch item. TFIDF: As BINARY, but the TF-IDF algorithm is applied to find the value in each token slot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a841f49ca75331fe0192f48e6dfb3f8625d80c52" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;output_node_names&lt;/code&gt;&lt;/b&gt;: List of name strings for the result nodes of the graph.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0faa4ca3f5846993a3fe1e7d1ebdd4ceb182e898" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;output_padding&lt;/code&gt;&lt;/b&gt;: An integer or tuple/list of 2 integers, specifying the amount of padding along the height and width of the output tensor. Can be a single integer to specify the same value for all spatial dimensions. The amount of output padding along a given dimension must be lower than the stride along that same dimension. If set to &lt;code&gt;None&lt;/code&gt; (default), the output shape is inferred.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9282dd132f1dd380fe17674982389af88d468e24" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;output_padding&lt;/code&gt;&lt;/b&gt;: An integer or tuple/list of 3 integers, specifying the amount of padding along the depth, height, and width. Can be a single integer to specify the same value for all spatial dimensions. The amount of output padding along a given dimension must be lower than the stride along that same dimension. If set to &lt;code&gt;None&lt;/code&gt; (default), the output shape is inferred.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75ac30e52eb4dcd0831ba7e290b5ec09305ee051" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;output_saved_model_dir&lt;/code&gt;&lt;/b&gt;: directory to saved the converted SavedModel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea5d3d87a61cc38c63bba391098089cb3e8a23ca" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;output_sequence_length&lt;/code&gt;&lt;/b&gt;: Only valid in INT mode. If set, the output will have its time dimension padded or truncated to exactly &lt;code&gt;output_sequence_length&lt;/code&gt; values, resulting in a tensor of shape [batch_size, output_sequence_length] regardless of how many tokens resulted from the splitting step. Defaults to None.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90e1bb05ec3adbc53f3cc2e46a46ff6f08e3de49" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;output_sequence_length&lt;/code&gt;&lt;/b&gt;: Optional length for the output tensor. If set, the output will be padded or truncated to this value in INT mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8986889eda385d6a0fe258329026274ba28d4a58" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;output_shape&lt;/code&gt;&lt;/b&gt;: 1D int tensor for the output shape.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71db8889871d9d02104408d4a78013f0fd33f362" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;output_shape&lt;/code&gt;&lt;/b&gt;: A 1-D &lt;code&gt;Tensor&lt;/code&gt; of shape representing the output shape of the deconvolution op.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="785a6649abb24c3f6b08a5d9e589f379b69fb6cb" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;output_shape&lt;/code&gt;&lt;/b&gt;: A 1-D &lt;code&gt;Tensor&lt;/code&gt; of the same type as &lt;code&gt;sparse_indices&lt;/code&gt;. Shape of the dense output tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5941991e680657b9490c3fe732282d60a605380" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;output_shape&lt;/code&gt;&lt;/b&gt;: A 1-D &lt;code&gt;Tensor&lt;/code&gt; representing the output shape of the deconvolution op.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10d562f088f4f7454c50cc096896818d9d2d401e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;output_shape&lt;/code&gt;&lt;/b&gt;: A 1-D &lt;code&gt;Tensor&lt;/code&gt;, containing three elements, representing the output shape of the deconvolution op.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="698a43a9c570eb6d667547db7a638ef7fd4aa8e2" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;output_shape&lt;/code&gt;&lt;/b&gt;: Expected output shape from function. This argument can be inferred if not explicitly provided. Can be a tuple or function. If a tuple, it only specifies the first dimension onward; sample dimension is assumed either the same as the input: &lt;code&gt;output_shape = (input_shape[0], ) + output_shape&lt;/code&gt; or, the input is &lt;code&gt;None&lt;/code&gt; and the sample dimension is also &lt;code&gt;None&lt;/code&gt;: &lt;code&gt;output_shape = (None, ) + output_shape&lt;/code&gt; If a function, it specifies the entire shape as a function of the input shape: &lt;code&gt;output_shape = f(input_shape)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="420ed6309d891e028948f98574c20579d1e5aa7b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;output_shape&lt;/code&gt;&lt;/b&gt;: a tuple with (output_row, output_col).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="877b14974974e0e48413b34508ea23071e683381" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;output_shapes&lt;/code&gt;&lt;/b&gt;: (Optional.) A nested structure of &lt;a href=&quot;../../../../tensorshape&quot;&gt;&lt;code&gt;tf.TensorShape&lt;/code&gt;&lt;/a&gt; objects corresponding to each component of an element yielded by &lt;code&gt;generator&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8049c0c5189b360a87febd6a2ab0e9cb1acd9e7e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;output_shapes&lt;/code&gt;&lt;/b&gt;: (Optional.) A nested structure of &lt;a href=&quot;../../../tensorshape&quot;&gt;&lt;code&gt;tf.TensorShape&lt;/code&gt;&lt;/a&gt; objects corresponding to each component of an element of this dataset. If omitted, each component will have an unconstrainted shape.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac77b878c3744794437cdde7b5fd64c8db4158ae" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;output_shapes&lt;/code&gt;&lt;/b&gt;: (Optional.) A nested structure of &lt;a href=&quot;../../../tensorshape&quot;&gt;&lt;code&gt;tf.TensorShape&lt;/code&gt;&lt;/a&gt; objects corresponding to each component of an element yielded by &lt;code&gt;generator&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b886f3aecbb7e31e1d80f96264ef00ea8314d59" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;output_shapes&lt;/code&gt;&lt;/b&gt;: (Optional.) A nested structure of &lt;a href=&quot;../../tensorshape&quot;&gt;&lt;code&gt;tf.TensorShape&lt;/code&gt;&lt;/a&gt; objects corresponding to each component of an element yielded by &lt;code&gt;generator&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4805a77569ae02df30b3308c838a85379e79de45" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;output_shapes&lt;/code&gt;&lt;/b&gt;: (Optional.) A nested structure of &lt;a href=&quot;../tensorshape&quot;&gt;&lt;code&gt;tf.TensorShape&lt;/code&gt;&lt;/a&gt; objects corresponding to each component of an element yielded by &lt;code&gt;generator&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a6f8b19c306e69b2e7242af31458917370be6a2" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;output_shapes&lt;/code&gt;&lt;/b&gt;: A nested structure of &lt;a href=&quot;../../../tensorshape&quot;&gt;&lt;code&gt;tf.TensorShape&lt;/code&gt;&lt;/a&gt; objects corresponding to each component of an element of this iterator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04189803b85635427544a32daa89030ee92cd627" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;output_shard_axes&lt;/code&gt;&lt;/b&gt;: A list of dimensions along which to concatenate the outputs of &lt;code&gt;computation&lt;/code&gt;, or &lt;code&gt;None&lt;/code&gt;. &lt;code&gt;None&lt;/code&gt; means &quot;concatenate all outputs along dimension 0&quot;. If not &lt;code&gt;None&lt;/code&gt;, there must be one dimension per output. Ignored if &lt;code&gt;outputs_from_all_shards&lt;/code&gt; is False.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d670da89699b73fd4cb7a74bbb15e683f49d9617" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;output_stream&lt;/code&gt;&lt;/b&gt;: The output stream, logging level, or file to print to. Defaults to sys.stderr, but sys.stdout, tf.compat.v1.logging.info, tf.compat.v1.logging.warning, tf.compat.v1.logging.error, absl.logging.info, absl.logging.warning and absl.loogging,error are also supported. To print to a file, pass a string started with &quot;file://&quot; followed by the file path, e.g., &quot;file:///tmp/foo.out&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c83d39a7e016e1beeae94e3b983aa19909339b3e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;output_tensors&lt;/code&gt;&lt;/b&gt;: List of output tensors (only .name is used from this).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de597727ceea98827c66bbf0fcb8303b7e68b03a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;output_type&lt;/code&gt;&lt;/b&gt;: An optional &lt;a href=&quot;../../dtypes/dtype&quot;&gt;&lt;code&gt;tf.DType&lt;/code&gt;&lt;/a&gt; from: &lt;code&gt;tf.int32, tf.int64&lt;/code&gt;. Defaults to &lt;a href=&quot;../../../tf#int64&quot;&gt;&lt;code&gt;tf.int64&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0feb7ae35c93f276c8df3b1f55b1aa2b807d9ec" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;output_type&lt;/code&gt;&lt;/b&gt;: An optional &lt;a href=&quot;../dtypes/dtype&quot;&gt;&lt;code&gt;tf.DType&lt;/code&gt;&lt;/a&gt; from: &lt;code&gt;tf.int32, tf.int64&lt;/code&gt;. Defaults to &lt;a href=&quot;../../tf#int32&quot;&gt;&lt;code&gt;tf.int32&lt;/code&gt;&lt;/a&gt;. (Optional) The output type of the operation (int32 or int64). Defaults to int32.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f118b1295012e8b64f4fafafb464409a662c052" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;output_type&lt;/code&gt;&lt;/b&gt;: An optional &lt;a href=&quot;../dtypes/dtype&quot;&gt;&lt;code&gt;tf.DType&lt;/code&gt;&lt;/a&gt; from: &lt;code&gt;tf.int32, tf.int64&lt;/code&gt;. Defaults to &lt;a href=&quot;../../tf#int64&quot;&gt;&lt;code&gt;tf.int64&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="417dd38a7145f40345b47a2504023003adab5521" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;output_types&lt;/code&gt;&lt;/b&gt;: A list of &lt;code&gt;tf.DTypes&lt;/code&gt;. List of TF types to use for the respective field in field_names.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c99efde2f3a1722f6d3aff677269139627bc910d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;output_types&lt;/code&gt;&lt;/b&gt;: A nested structure of &lt;a href=&quot;../../../../dtypes/dtype&quot;&gt;&lt;code&gt;tf.DType&lt;/code&gt;&lt;/a&gt; objects corresponding to each component of an element yielded by &lt;code&gt;generator&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55f6f89829beea6da495b7803d666ef6d40f3f4a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;output_types&lt;/code&gt;&lt;/b&gt;: A nested structure of &lt;a href=&quot;../../../dtypes/dtype&quot;&gt;&lt;code&gt;tf.DType&lt;/code&gt;&lt;/a&gt; objects corresponding to each component of an element of this dataset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49981257e2ada5d70f6438df2e2ae7242fe3c5a8" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;output_types&lt;/code&gt;&lt;/b&gt;: A nested structure of &lt;a href=&quot;../../../dtypes/dtype&quot;&gt;&lt;code&gt;tf.DType&lt;/code&gt;&lt;/a&gt; objects corresponding to each component of an element of this iterator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40dbec2179780f4b13989165bd9fd88a163fb1b0" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;output_types&lt;/code&gt;&lt;/b&gt;: A nested structure of &lt;a href=&quot;../../../dtypes/dtype&quot;&gt;&lt;code&gt;tf.DType&lt;/code&gt;&lt;/a&gt; objects corresponding to each component of an element yielded by &lt;code&gt;generator&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e169afd06d78537090af850f099ea53d75738b4" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;output_types&lt;/code&gt;&lt;/b&gt;: A nested structure of &lt;a href=&quot;../../dtypes/dtype&quot;&gt;&lt;code&gt;tf.DType&lt;/code&gt;&lt;/a&gt; objects corresponding to each component of an element yielded by &lt;code&gt;generator&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bdcb00dbe466b4774eba600c2d6492fb11c13f1" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;output_types&lt;/code&gt;&lt;/b&gt;: A nested structure of &lt;a href=&quot;../dtypes/dtype&quot;&gt;&lt;code&gt;tf.DType&lt;/code&gt;&lt;/a&gt; objects corresponding to each component of an element yielded by &lt;code&gt;generator&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="296cb35366eb204b7e5081f5b5f81f5eb5f7f71d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;output_types&lt;/code&gt;&lt;/b&gt;: A tuple of &lt;a href=&quot;../../../../dtypes/dtype&quot;&gt;&lt;code&gt;tf.DType&lt;/code&gt;&lt;/a&gt; objects representing the types of the columns returned by &lt;code&gt;query&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1b9a18b9383d8703fa212e85e9478e7bbc0df3f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;output_types&lt;/code&gt;&lt;/b&gt;: A tuple of &lt;a href=&quot;../../dtypes/dtype&quot;&gt;&lt;code&gt;tf.DType&lt;/code&gt;&lt;/a&gt; objects representing the types of the columns returned by &lt;code&gt;query&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2529ddca14be4866f56255e78e9c5c2a9314d55c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;output_types&lt;/code&gt;&lt;/b&gt;: list of &lt;code&gt;DType&lt;/code&gt; objects. List of the types of the &lt;code&gt;Tensors&lt;/code&gt; computed by this operation. The length of this list indicates the number of output endpoints of the &lt;code&gt;Operation&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b20d61ea01bf713689dc22925ad20bf7fa26733c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;outputs&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt; or a dict of string to &lt;code&gt;Tensor&lt;/code&gt; representing the predictions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74cd17ac2d7b5e7e4e5978f4920a4133dbea7f4e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;outputs&lt;/code&gt;&lt;/b&gt;: A list of N &lt;code&gt;Tensor&lt;/code&gt;s with rank N.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d4d0252d5f7cf1b1282f659bc0448aed5ab965c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;outputs&lt;/code&gt;&lt;/b&gt;: List of output tensors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8bdf8baef5002fc4576d2046f1ad30cedc0e42e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;outputs&lt;/code&gt;&lt;/b&gt;: Outputs of the SignatureDef defined as a proto map of string to tensor info.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cecf18bb58322d965ffb4d0547ad8975703a18f3" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;outputs&lt;/code&gt;&lt;/b&gt;: The RNN output &lt;code&gt;Tensor&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="102dda2c262762d35977e1fdf0549bcbde74f43d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;outputs&lt;/code&gt;&lt;/b&gt;: dict mapping string output names to tensors. These are added to the SignatureDef as the outputs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b04d7dae2916047f58f4338e2b5e5ca52602645" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;outputs&lt;/code&gt;&lt;/b&gt;: dict of string to &lt;code&gt;Tensor&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="987de311e8b19aaca58b84ce91e5a1f947c679bc" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;outputs_from_all_shards&lt;/code&gt;&lt;/b&gt;: Boolean or list of boolean. For each output, if &lt;code&gt;True&lt;/code&gt;, outputs from all shards are concatenated along the corresponding &lt;code&gt;output_shard_axes&lt;/code&gt; entry. Otherwise, each output is taken from an arbitrary shard. If the argument is a boolean, the argument's value is used for each output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96c290ae578e09dbedc77dd03fc08a0b248f690b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;overlap_threshold&lt;/code&gt;&lt;/b&gt;: A float representing the threshold for deciding whether boxes overlap too much with respect to the provided overlap values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d57ac92d34eac958a5382c2032d363e826c99052" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;overlapping&lt;/code&gt;&lt;/b&gt;: An optional &lt;code&gt;bool&lt;/code&gt;. Defaults to &lt;code&gt;False&lt;/code&gt;. When set to &lt;code&gt;True&lt;/code&gt;, it means when pooling, the values at the boundary of adjacent pooling cells are used by both cells. For example: &lt;code&gt;index 0 1 2 3 4&lt;/code&gt;&lt;code&gt;value 20 5 16 3 7&lt;/code&gt; If the pooling sequence is [0, 2, 4], then 16, at index 2 will be used twice. The result would be [20, 16] for fractional avg pooling.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15f227e01c898e635672d41dadc42ea8fc64647a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;overlapping&lt;/code&gt;&lt;/b&gt;: An optional &lt;code&gt;bool&lt;/code&gt;. Defaults to &lt;code&gt;False&lt;/code&gt;. When set to &lt;code&gt;True&lt;/code&gt;, it means when pooling, the values at the boundary of adjacent pooling cells are used by both cells. For example: &lt;code&gt;index 0 1 2 3 4&lt;/code&gt;&lt;code&gt;value 20 5 16 3 7&lt;/code&gt; If the pooling sequence is [0, 2, 4], then 16, at index 2 will be used twice. The result would be [20, 16] for fractional max pooling.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64a4cace5c6a06046ccd755d6a8bbb9868f6aba8" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;overlaps&lt;/code&gt;&lt;/b&gt;: A 2-D float &lt;code&gt;Tensor&lt;/code&gt; of shape &lt;code&gt;[num_boxes, num_boxes]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2938f151a8e607577fbe0403b54d5fb569b26381" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;override&lt;/code&gt;&lt;/b&gt;: dictionary, values to override &lt;code&gt;sk_params&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7f3223d64ba13bfd8faaa89817738ce3694da03" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;override_client&lt;/code&gt;&lt;/b&gt;: The Kubernetes client (usually automatically retrieved using &lt;code&gt;from kubernetes import client as k8sclient&lt;/code&gt;). If you pass this in, you are responsible for setting Kubernetes credentials manually.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72f320e05b36b37c04ca6d12c263b65b6eb75934" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;overwrite&lt;/code&gt;&lt;/b&gt;: Whether to silently overwrite any existing file at the target location, or provide the user with a manual prompt.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ede510270f399b0f435a31350afd4b93bfb84b66" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;overwrite&lt;/code&gt;&lt;/b&gt;: Whether we should overwrite any existing model at the target location, or instead ask the user with a manual prompt.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="969fcb86e7fbcbafa3b3bea922e97e1841a59804" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;overwrite&lt;/code&gt;&lt;/b&gt;: boolean, if false it's an error for &lt;code&gt;dst&lt;/code&gt; to be occupied by an existing file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93d51ea9c965902e0c40e7fdc7aeebcfbcd55eac" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;overwrite&lt;/code&gt;&lt;/b&gt;: boolean, if false it's an error for &lt;code&gt;newname&lt;/code&gt; to be occupied by an existing file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f890269098137831d690fb1700a8fd4a3d77d92e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;overwrite&lt;/code&gt;&lt;/b&gt;: boolean, if false it's an error for &lt;code&gt;newpath&lt;/code&gt; to be occupied by an existing file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13decb34be5a1ee17416a8aabf7937dd422474c0" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;p&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt; of type &lt;code&gt;output_idx_type&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe124ad29672bfc4375f66a7ab26b53c0146f7d5" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;p&lt;/code&gt;&lt;/b&gt;: A float, &lt;code&gt;0. &amp;lt;= p &amp;lt;= 1&lt;/code&gt;, probability of binomial distribution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f0f2497856342a62bbef30cbc5e5385e1c84ffe" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;package&lt;/code&gt;&lt;/b&gt;: The package that this class belongs to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e84f197f4cf815a54420d025c00741961a71963" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;packed&lt;/code&gt;&lt;/b&gt;: &lt;code&gt;flat_sequence&lt;/code&gt; converted to have the same recursive structure as &lt;code&gt;structure&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ab58ae8768158d9beb935a1f99773610626518e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;pad&lt;/code&gt;&lt;/b&gt;: An optional &lt;code&gt;bool&lt;/code&gt;. Defaults to &lt;code&gt;False&lt;/code&gt;. Bool whether padding is applied at the ends.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="760287cd2b0a56cdefcf7ca222ed7902bf4e1c2b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;pad_end&lt;/code&gt;&lt;/b&gt;: Whether to pad the end of &lt;code&gt;signal&lt;/code&gt; with &lt;code&gt;pad_value&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="209fa7a9f2520d64babdd6a6bfb7dfa216bf0e68" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;pad_end&lt;/code&gt;&lt;/b&gt;: Whether to pad the end of &lt;code&gt;signals&lt;/code&gt; with zeros when the provided frame length and step produces a frame that lies partially past its end.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4160a1da46fab17c84046c047b121d028aaf403a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;pad_per_class&lt;/code&gt;&lt;/b&gt;: If false, the output nmsed boxes, scores and classes are padded/clipped to &lt;code&gt;max_total_size&lt;/code&gt;. If true, the output nmsed boxes, scores and classes are padded to be of length &lt;code&gt;max_size_per_class&lt;/code&gt;*&lt;code&gt;num_classes&lt;/code&gt;, unless it exceeds &lt;code&gt;max_total_size&lt;/code&gt; in which case it is clipped to &lt;code&gt;max_total_size&lt;/code&gt;. Defaults to false.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eacb2141190890d41a8f6f2c01801b5f99cb5ae1" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;pad_step_number&lt;/code&gt;&lt;/b&gt;: if True, pads the global step number in the checkpoint filepaths to some fixed width (8 by default). This is turned off by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bf281d66034a0cfbf901362b7fc9b86bb16e08f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;pad_to_bucket_boundary&lt;/code&gt;&lt;/b&gt;: bool, if &lt;code&gt;False&lt;/code&gt;, will pad dimensions with unknown size to maximum length in batch. If &lt;code&gt;True&lt;/code&gt;, will pad dimensions with unknown size to bucket boundary minus 1 (i.e., the maximum length in each bucket), and caller must ensure that the source &lt;code&gt;Dataset&lt;/code&gt; does not contain any elements with length longer than &lt;code&gt;max(bucket_boundaries)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bca8e5cb366becaa4b1aa96bc5c9e0a22d62b071" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;pad_to_max_output_size&lt;/code&gt;&lt;/b&gt;: bool. If True, size of &lt;code&gt;selected_indices&lt;/code&gt; output is padded to &lt;code&gt;max_output_size&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bb687bf73fdc71880a7ba888a1483cefe8bfb4f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;pad_to_max_tokens&lt;/code&gt;&lt;/b&gt;: If True, BINARY, COUNT, and TFIDF modes will have their outputs padded to max_tokens, even if the number of unique tokens in the vocabulary is less than max_tokens.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7545488b5f025b7bc29968bbea5e6e93adda6995" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;pad_to_max_tokens&lt;/code&gt;&lt;/b&gt;: Only valid in &quot;binary&quot;, &quot;count&quot;, and &quot;tf-idf&quot; modes. If True, the output will have its feature axis padded to &lt;code&gt;max_tokens&lt;/code&gt; even if the number of unique tokens in the vocabulary is less than max_tokens, resulting in a tensor of shape [batch_size, max_tokens] regardless of vocabulary size. Defaults to True.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12541e3d2a65ce1d659d6310b587274e5ed1a8b0" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;pad_value&lt;/code&gt;&lt;/b&gt;: An optional scalar &lt;code&gt;Tensor&lt;/code&gt; to use where the input signal does not exist when &lt;code&gt;pad_end&lt;/code&gt; is True.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1dbc29baca907aca7cee95ef4d0e8157d42f0cf" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;pad_values&lt;/code&gt;&lt;/b&gt;: A tuple of (left_pad_value, right_pad_value), a single string, or None. If None, no padding will be added; if a single string, then that string will be used for both left and right padding. Values must be Python strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4b71d90b6c793c8abc8f2a20381053f286b25bc" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;padded_shapes&lt;/code&gt;&lt;/b&gt;: A nested structure of &lt;a href=&quot;../../../../tensorshape&quot;&gt;&lt;code&gt;tf.TensorShape&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../../../../../tf#int64&quot;&gt;&lt;code&gt;tf.int64&lt;/code&gt;&lt;/a&gt; vector tensor-like objects representing the shape to which the respective component of each input element should be padded prior to batching. Any unknown dimensions (e.g. &lt;a href=&quot;../../dimension&quot;&gt;&lt;code&gt;tf.compat.v1.Dimension(None)&lt;/code&gt;&lt;/a&gt; in a &lt;a href=&quot;../../../../tensorshape&quot;&gt;&lt;code&gt;tf.TensorShape&lt;/code&gt;&lt;/a&gt; or &lt;code&gt;-1&lt;/code&gt; in a tensor-like object) will be padded to the maximum size of that dimension in each batch.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="beaa092477ba1508ce2f3cf610a84849e806a731" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;padded_shapes&lt;/code&gt;&lt;/b&gt;: A nested structure of &lt;a href=&quot;../../../tensorshape&quot;&gt;&lt;code&gt;tf.TensorShape&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../../../../tf#int64&quot;&gt;&lt;code&gt;tf.int64&lt;/code&gt;&lt;/a&gt; vector tensor-like objects representing the shape to which the respective component of each input element should be padded prior to batching. Any unknown dimensions (e.g. &lt;a href=&quot;../dimension&quot;&gt;&lt;code&gt;tf.compat.v1.Dimension(None)&lt;/code&gt;&lt;/a&gt; in a &lt;a href=&quot;../../../tensorshape&quot;&gt;&lt;code&gt;tf.TensorShape&lt;/code&gt;&lt;/a&gt; or &lt;code&gt;-1&lt;/code&gt; in a tensor-like object) will be padded to the maximum size of that dimension in each batch.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cab72af51fb7ae9265ac252b8b6748aed08d1cd" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;padded_shapes&lt;/code&gt;&lt;/b&gt;: A nested structure of &lt;a href=&quot;../../tensorshape&quot;&gt;&lt;code&gt;tf.TensorShape&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../../../tf#int64&quot;&gt;&lt;code&gt;tf.int64&lt;/code&gt;&lt;/a&gt; vector tensor-like objects representing the shape to which the respective component of each input element should be padded prior to batching. Any unknown dimensions (e.g. &lt;a href=&quot;../../compat/v1/dimension&quot;&gt;&lt;code&gt;tf.compat.v1.Dimension(None)&lt;/code&gt;&lt;/a&gt; in a &lt;a href=&quot;../../tensorshape&quot;&gt;&lt;code&gt;tf.TensorShape&lt;/code&gt;&lt;/a&gt; or &lt;code&gt;-1&lt;/code&gt; in a tensor-like object) will be padded to the maximum size of that dimension in each batch.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e08dcaed5e0cfe0f111dc8d8fe692091034898f0" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;padded_shapes&lt;/code&gt;&lt;/b&gt;: A nested structure of &lt;a href=&quot;../tensorshape&quot;&gt;&lt;code&gt;tf.TensorShape&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../../tf#int64&quot;&gt;&lt;code&gt;tf.int64&lt;/code&gt;&lt;/a&gt; vector tensor-like objects representing the shape to which the respective component of each input element should be padded prior to batching. Any unknown dimensions (e.g. &lt;a href=&quot;../compat/v1/dimension&quot;&gt;&lt;code&gt;tf.compat.v1.Dimension(None)&lt;/code&gt;&lt;/a&gt; in a &lt;a href=&quot;../tensorshape&quot;&gt;&lt;code&gt;tf.TensorShape&lt;/code&gt;&lt;/a&gt; or &lt;code&gt;-1&lt;/code&gt; in a tensor-like object) will be padded to the maximum size of that dimension in each batch.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="caf2450177f85d94b39bf860d2232f7ad29e0757" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;padded_shapes&lt;/code&gt;&lt;/b&gt;: Nested structure of &lt;a href=&quot;../../tensorshape&quot;&gt;&lt;code&gt;tf.TensorShape&lt;/code&gt;&lt;/a&gt; to pass to &lt;a href=&quot;../dataset#padded_batch&quot;&gt;&lt;code&gt;tf.data.Dataset.padded_batch&lt;/code&gt;&lt;/a&gt;. If not provided, will use &lt;code&gt;dataset.output_shapes&lt;/code&gt;, which will result in variable length dimensions being padded out to the maximum length in each batch.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee88f1d02410d2aea5f6b318c88ffaf0bb147e24" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;padding&lt;/code&gt;&lt;/b&gt;: 'SAME' or 'VALID'</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e0081c29543fd14c7be1bc89a2a6f8aa67a9bf4" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;padding&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;string&lt;/code&gt; from: &lt;code&gt;&quot;SAME&quot;, &quot;VALID&quot;&lt;/code&gt;. The type of padding algorithm to use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6e6837775c58e23fb0a724492d2d8c13feefb78" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;padding&lt;/code&gt;&lt;/b&gt;: A string, either &lt;code&gt;&quot;VALID&quot;&lt;/code&gt; or &lt;code&gt;&quot;SAME&quot;&lt;/code&gt;. The padding algorithm.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b2b2bf75f42973c48747067696dcdb7b4042cc5" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;padding&lt;/code&gt;&lt;/b&gt;: A string, either &lt;code&gt;'VALID'&lt;/code&gt; or &lt;code&gt;'SAME'&lt;/code&gt;. The padding algorithm.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c598c8f7907d2f9554eedce60ba58ceaee0d3335" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;padding&lt;/code&gt;&lt;/b&gt;: A string, either &lt;code&gt;'VALID'&lt;/code&gt; or &lt;code&gt;'SAME'&lt;/code&gt;. The padding algorithm. See the &quot;returns&quot; section of &lt;a href=&quot;../../../nn/convolution&quot;&gt;&lt;code&gt;tf.nn.convolution&lt;/code&gt;&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0fe9456c4d957bfc13f61501122baf13c81798c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;padding&lt;/code&gt;&lt;/b&gt;: A string, either &lt;code&gt;'VALID'&lt;/code&gt; or &lt;code&gt;'SAME'&lt;/code&gt;. The padding algorithm. See the &quot;returns&quot; section of &lt;a href=&quot;convolution&quot;&gt;&lt;code&gt;tf.nn.convolution&lt;/code&gt;&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91faf6d17db5dd4d2cfc4004bfd843effc6c2c26" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;padding&lt;/code&gt;&lt;/b&gt;: A string. The padding method, either 'valid' or 'same'. Case-insensitive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ea8c3b8316855da05f0f1269d0748ed9c2b7904" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;padding&lt;/code&gt;&lt;/b&gt;: An optional padding value. If specified, then any row suffix consisting entirely of &lt;code&gt;padding&lt;/code&gt; will be excluded from the returned RaggedTensor. &lt;code&gt;padding&lt;/code&gt; is a &lt;code&gt;Tensor&lt;/code&gt; with the same dtype as &lt;code&gt;tensor&lt;/code&gt; and with &lt;code&gt;shape=tensor.shape[ragged_rank + 1:]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="983944cfd62ecc0f3c52f4c99838dbb1adc3ebff" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;padding&lt;/code&gt;&lt;/b&gt;: Currently only support &lt;code&gt;&quot;valid&quot;&lt;/code&gt; (case-insensitive). &lt;code&gt;&quot;same&quot;&lt;/code&gt; will be supported in future.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a19421a91bcb27c7beaf23c0f65e4a6e421c5f1d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;padding&lt;/code&gt;&lt;/b&gt;: Currently only supports &lt;code&gt;&quot;valid&quot;&lt;/code&gt; (case-insensitive). &lt;code&gt;&quot;same&quot;&lt;/code&gt; may be supported in the future.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="272970df4f4956fedc3f0868c8cfc27776091fc6" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;padding&lt;/code&gt;&lt;/b&gt;: Either the &lt;code&gt;string&lt;/code&gt;&quot;SAME&quot;&lt;code&gt;or&lt;/code&gt;&quot;VALID&quot;&lt;code&gt;indicating the type of padding algorithm to use, or a list indicating the explicit paddings at the start and end of each dimension. When explicit padding is used and data_format is&lt;/code&gt;&quot;NHWC&quot;&lt;code&gt;, this should be in the form&lt;/code&gt;[[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]]&lt;code&gt;. When explicit padding used and data_format is&lt;/code&gt;&quot;NCHW&quot;&lt;code&gt;, this should be in the form&lt;/code&gt;[[0, 0], [0, 0], [pad_top, pad_bottom], [pad_left, pad_right]]`.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa42ac9ecfabed83bec2284b41e3260dbba94222" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;padding&lt;/code&gt;&lt;/b&gt;: Either the &lt;code&gt;string&lt;/code&gt;&lt;code&gt;&quot;SAME&quot;&lt;/code&gt; or &lt;code&gt;&quot;VALID&quot;&lt;/code&gt; indicating the type of padding algorithm to use, or a list indicating the explicit paddings at the start and end of each dimension. When explicit padding is used and data_format is &lt;code&gt;&quot;NHWC&quot;&lt;/code&gt;, this should be in the form &lt;code&gt;[[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]]&lt;/code&gt;. When explicit padding used and data_format is &lt;code&gt;&quot;NCHW&quot;&lt;/code&gt;, this should be in the form &lt;code&gt;[[0, 0], [0, 0], [pad_top, pad_bottom], [pad_left, pad_right]]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8031b8211cf0cde866798a90a9da42fa1159d47" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;padding&lt;/code&gt;&lt;/b&gt;: Int, or tuple of 2 ints, or tuple of 2 tuples of 2 ints.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78822d633924d6055f1b18323fa9502aa96067e9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;padding&lt;/code&gt;&lt;/b&gt;: Int, or tuple of 3 ints, or tuple of 3 tuples of 2 ints.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e527d36e91632c8102f5af35506ddf1126c1610" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;padding&lt;/code&gt;&lt;/b&gt;: Int, or tuple of int (length 2), or dictionary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8023447e41ff6535a2ba9e323fc9693217504fb6" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;padding&lt;/code&gt;&lt;/b&gt;: One of &lt;code&gt;&quot;valid&quot;&lt;/code&gt; or &lt;code&gt;&quot;same&quot;&lt;/code&gt; (case-insensitive).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbb9610c64c4d64c7ee4f4fabfae4a0308816e9b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;padding&lt;/code&gt;&lt;/b&gt;: One of &lt;code&gt;&quot;valid&quot;&lt;/code&gt;, &lt;code&gt;&quot;causal&quot;&lt;/code&gt; or &lt;code&gt;&quot;same&quot;&lt;/code&gt; (case-insensitive). &lt;code&gt;&quot;causal&quot;&lt;/code&gt; results in causal (dilated) convolutions, e.g. output[t] does not depend on input[t+1:]. Useful when modeling temporal data where the model should not violate the temporal order. See &lt;a href=&quot;https://arxiv.org/abs/1609.03499&quot;&gt;WaveNet: A Generative Model for Raw Audio, section 2.1&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8251c237670d4a55c3d6c56508609a80fe883c14" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;padding&lt;/code&gt;&lt;/b&gt;: One of &lt;code&gt;&quot;valid&quot;&lt;/code&gt;, &lt;code&gt;&quot;same&quot;&lt;/code&gt;, or &lt;code&gt;&quot;causal&quot;&lt;/code&gt; (case-insensitive).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44da99ae6168c415423026129dfe659dc196fd91" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;padding&lt;/code&gt;&lt;/b&gt;: The padding algorithm, must be &quot;SAME&quot; or &quot;VALID&quot;. Defaults to &quot;SAME&quot;. See the &quot;returns&quot; section of &lt;a href=&quot;convolution&quot;&gt;&lt;code&gt;tf.nn.convolution&lt;/code&gt;&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89909fab8c9837c7ce1c9adb32ac796dd752d872" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;padding&lt;/code&gt;&lt;/b&gt;: The padding algorithm, must be &quot;SAME&quot; or &quot;VALID&quot;. See the &quot;returns&quot; section of &lt;a href=&quot;../../../nn/convolution&quot;&gt;&lt;code&gt;tf.nn.convolution&lt;/code&gt;&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe7ce1ee41e5075b35c38246fb4a330f29826990" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;padding&lt;/code&gt;&lt;/b&gt;: The type of padding algorithm to use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea225a326e90c89dcb091157053065aec4f57a95" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;padding&lt;/code&gt;&lt;/b&gt;: Tuple of 2 integers, how many zeros to add at the start and end of dim 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1052fb659afed2c7b5faf9c9a4559af314e95697" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;padding&lt;/code&gt;&lt;/b&gt;: Tuple of 2 tuples, padding pattern.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d6fb98bb91ef4d38651dfb53b1a66773626fb42" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;padding&lt;/code&gt;&lt;/b&gt;: Tuple of 3 tuples, padding pattern.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75a845bad3d48edffb4fd96337d2c570ebac51e2" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;padding&lt;/code&gt;&lt;/b&gt;: one of &lt;code&gt;&quot;valid&quot;&lt;/code&gt; or &lt;code&gt;&quot;same&quot;&lt;/code&gt; (case-insensitive).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c15c82c9421ed73b098f8313b775b6ea534f9a9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;padding&lt;/code&gt;&lt;/b&gt;: one of &lt;code&gt;'valid'&lt;/code&gt; or &lt;code&gt;'same'&lt;/code&gt; (case-insensitive).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="919f8dfda1c0f3bcf581792a9adb2c1c03227001" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;padding&lt;/code&gt;&lt;/b&gt;: str constant equal to &quot;VALID&quot; or &quot;SAME&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec723b5092d0420c89848e4ac50ea2d4d3527131" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;padding&lt;/code&gt;&lt;/b&gt;: string, &lt;code&gt;&quot;same&quot;&lt;/code&gt; or &lt;code&gt;&quot;valid&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81f5b40a5268cd843eba361342a1f70d87821637" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;padding&lt;/code&gt;&lt;/b&gt;: string, &lt;code&gt;&quot;same&quot;&lt;/code&gt;, &lt;code&gt;&quot;causal&quot;&lt;/code&gt; or &lt;code&gt;&quot;valid&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d25614e9fc3367a0c61eb52a7a1b273e778f2154" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;padding_value&lt;/code&gt;&lt;/b&gt;: The value to fill the area outside the specified diagonal band with. Default is 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8715c03e244c98386097ae639a680e833b03be50" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;padding_values&lt;/code&gt;&lt;/b&gt;: (Optional.) A nested structure of scalar-shaped &lt;a href=&quot;../../../../tensor&quot;&gt;&lt;code&gt;tf.Tensor&lt;/code&gt;&lt;/a&gt;, representing the padding values to use for the respective components. Defaults are &lt;code&gt;0&lt;/code&gt; for numeric types and the empty string for string types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50dcb38338e207d49d333eb814d21e9cb01b825a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;padding_values&lt;/code&gt;&lt;/b&gt;: (Optional.) A nested structure of scalar-shaped &lt;a href=&quot;../../../tensor&quot;&gt;&lt;code&gt;tf.Tensor&lt;/code&gt;&lt;/a&gt;, representing the padding values to use for the respective components. Defaults are &lt;code&gt;0&lt;/code&gt; for numeric types and the empty string for string types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08dad1ca82ce1a6eaccebf74d123b7d6d317564d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;padding_values&lt;/code&gt;&lt;/b&gt;: (Optional.) A nested structure of scalar-shaped &lt;a href=&quot;../../tensor&quot;&gt;&lt;code&gt;tf.Tensor&lt;/code&gt;&lt;/a&gt;, representing the padding values to use for the respective components. Defaults are &lt;code&gt;0&lt;/code&gt; for numeric types and the empty string for string types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe4c7040c07d4c38d41566451759355d30100e57" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;padding_values&lt;/code&gt;&lt;/b&gt;: (Optional.) A nested structure of scalar-shaped &lt;a href=&quot;../tensor&quot;&gt;&lt;code&gt;tf.Tensor&lt;/code&gt;&lt;/a&gt;, representing the padding values to use for the respective components. Defaults are &lt;code&gt;0&lt;/code&gt; for numeric types and the empty string for string types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a07eb56ccab0036dfdba374547e633ed876d6656" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;padding_values&lt;/code&gt;&lt;/b&gt;: Values to pad with, passed to &lt;a href=&quot;../dataset#padded_batch&quot;&gt;&lt;code&gt;tf.data.Dataset.padded_batch&lt;/code&gt;&lt;/a&gt;. Defaults to padding with 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de00e58536a6da849de48566175407673fef9aa0" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;padding_width&lt;/code&gt;&lt;/b&gt;: If set, &lt;code&gt;padding_width&lt;/code&gt; pad values will be added to both sides of each sequence. Defaults to &lt;code&gt;ngram_width&lt;/code&gt;-1. Must be greater than</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7635097a2c719a527d0105d018d1d4c20e9e9eab" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;paddings&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt; of type &lt;code&gt;int32&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5049fbd0be1499e873fec7f60b0f65823588982" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;paddings&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt;. Must be one of the following types: &lt;code&gt;int32&lt;/code&gt;, &lt;code&gt;int64&lt;/code&gt;. 2-D tensor of non-negative integers with shape &lt;code&gt;[2, 2]&lt;/code&gt;. It specifies the padding of the input with zeros across the spatial dimensions as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcff4283f4af4cf62d18dd1c0bb2423a4e8852fc" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;paddings&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt;. Must be one of the following types: &lt;code&gt;int32&lt;/code&gt;, &lt;code&gt;int64&lt;/code&gt;. 2-D with shape &lt;code&gt;[M, 2]&lt;/code&gt;, all values must be &amp;gt;= 0. &lt;code&gt;paddings[i] = [pad_start, pad_end]&lt;/code&gt; specifies the padding for input dimension &lt;code&gt;i + 1&lt;/code&gt;, which corresponds to spatial dimension &lt;code&gt;i&lt;/code&gt;. It is required that &lt;code&gt;block_shape[i]&lt;/code&gt; divides &lt;code&gt;input_shape[i + 1] + pad_start + pad_end&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a6f28a0f78e0a2ebbd5751457ebf6f650e18b4a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;parallel_iterations&lt;/code&gt;&lt;/b&gt;: (Default: 32). The number of iterations to run in parallel. Those operations which do not have any temporal dependency and can be run in parallel, will be. This parameter trades off time for space. Values &amp;gt;&amp;gt; 1 use more memory but take less time, while smaller values use less memory but computations take longer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95e6015ac9166aae22996360cbd79f187663830f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;parallel_iterations&lt;/code&gt;&lt;/b&gt;: (optional) The number of iterations allowed to run in parallel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ec683bbe976a2d9cb89bfd42616e111a061e761" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;parallel_iterations&lt;/code&gt;&lt;/b&gt;: (optional) The number of iterations allowed to run in parallel. When graph building, the default value is 10. While executing eagerly, the default value is set to 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9429ed4cb31f0b741d5cffbd7a0055b09d3b0414" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;parallel_iterations&lt;/code&gt;&lt;/b&gt;: A knob to control how many iterations are dispatched in parallel. This knob can be used to control the total memory usage.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48f4d33e4abc542069a78c659bc49c27279bd30d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;parallel_iterations&lt;/code&gt;&lt;/b&gt;: The number of iterations allowed to run in parallel. It must be a positive integer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f343e80e3e480ad9534eb876a4cceab85de4115" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;parameters&lt;/code&gt;&lt;/b&gt;: Python &lt;code&gt;dict&lt;/code&gt; of parameters used to instantiate this &lt;code&gt;Distribution&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6253d649ca8143150e742d7e2f7525ca073faf12" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;params&lt;/code&gt;&lt;/b&gt;: &lt;code&gt;dict&lt;/code&gt; of hyper parameters that will be passed into &lt;code&gt;model_fn&lt;/code&gt;. Keys are names of parameters, values are basic python types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bfd44e790a7642138e691db51cbdc858c3e6c19" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;params&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt;. The tensor from which to gather values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfcdbb44787713c8d7449d5977394ea246f7b3e7" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;params&lt;/code&gt;&lt;/b&gt;: A single tensor representing the complete embedding tensor, or a list of P tensors all of same shape except for the first dimension, representing sharded embedding tensors. Alternatively, a &lt;code&gt;PartitionedVariable&lt;/code&gt;, created by partitioning along dimension 0. Each element must be appropriately sized for &lt;code&gt;&quot;div&quot;&lt;/code&gt;&lt;code&gt;partition_strategy&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cf200ccfedb1154c76aa3b0003f15251961450b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;params&lt;/code&gt;&lt;/b&gt;: A single tensor representing the complete embedding tensor, or a list of P tensors all of same shape except for the first dimension, representing sharded embedding tensors. Alternatively, a &lt;code&gt;PartitionedVariable&lt;/code&gt;, created by partitioning along dimension 0. Each element must be appropriately sized for the 'div' &lt;code&gt;partition_strategy&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fca7d8a37a7659503ee73b5846e3fd74e2cff9e5" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;params&lt;/code&gt;&lt;/b&gt;: A single tensor representing the complete embedding tensor, or a list of P tensors all of same shape except for the first dimension, representing sharded embedding tensors. Alternatively, a &lt;code&gt;PartitionedVariable&lt;/code&gt;, created by partitioning along dimension 0. Each element must be appropriately sized for the given &lt;code&gt;partition_strategy&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91aa6a88f5898f7b64c85a0678a4af41e5eaebf7" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;params&lt;/code&gt;&lt;/b&gt;: An optional &lt;code&gt;dict&lt;/code&gt; of hyper parameters that will be passed into &lt;code&gt;input_fn&lt;/code&gt; and &lt;code&gt;model_fn&lt;/code&gt;. Keys are names of parameters, values are basic python types. There are reserved keys for &lt;code&gt;TPUEstimator&lt;/code&gt;, including 'batch_size'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c258341b6d54bde179ac4c354c819397940739b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;params&lt;/code&gt;&lt;/b&gt;: List of variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab8230f1350d973d4391cd8727065743ba038270" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;params&lt;/code&gt;&lt;/b&gt;: The &lt;code&gt;Tensor&lt;/code&gt; from which to gather values. Must be at least rank &lt;code&gt;axis + 1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca5d62d5e322969aca8e6d8601d30b48979f39ee" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;params&lt;/code&gt;&lt;/b&gt;: The hyperparameter dict.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba0459f47f4e3fbe590b4dbcf078ec42c6a70010" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;params&lt;/code&gt;&lt;/b&gt;: dict. Training parameters (eg. verbosity, batch size, number of epochs...).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7ed51179c7befd0bf0d744fe139190493bcea0e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;params&lt;/code&gt;&lt;/b&gt;: dictionary; the parameters to be checked</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd504d68f161c388c57b8441a24d19aae132a288" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;parent&lt;/code&gt;&lt;/b&gt;: The context in which the attribute child_name is to be changed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e23d5ef05cbf1aefe2e8cd7b3a9c429d7c2a309d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;parser&lt;/code&gt;&lt;/b&gt;: ArgumentParser, used to parse the flag arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83b7ef0058013ef7a08cd68085447b608357f7ec" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;parser_num_threads&lt;/code&gt;&lt;/b&gt;: Number of threads to use for parsing &lt;code&gt;Example&lt;/code&gt; tensors into a dictionary of &lt;code&gt;Feature&lt;/code&gt; tensors. Defaults to &lt;code&gt;2&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68067c5f908dca5c91a6f629a7cb8e2892f2cbf5" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;partial&lt;/code&gt;&lt;/b&gt;: If True, the returned numpy array is allowed to have partially evaluated values. Values that can't be evaluated will be None.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a82c3837ae6d24e5b44e81aa18b91e3525cc838" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;partial_pivoting&lt;/code&gt;&lt;/b&gt;: whether to perform partial pivoting. &lt;code&gt;True&lt;/code&gt; by default. Partial pivoting makes the procedure more stable, but slower. Partial pivoting is unnecessary in some cases, including diagonally dominant and symmetric positive definite matrices (see e.g. theorem 9.12 in [1]).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff95c4ac19bb77a825671660bd08db8312ed4c86" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;partition_info&lt;/code&gt;&lt;/b&gt;: Optional information about the possible partitioning of a tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f87edff919c68122024f2f8c4f3116185ca7b103" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;partition_strategy&lt;/code&gt;&lt;/b&gt;: A string specifying the partitioning strategy, relevant if &lt;code&gt;len(params) &amp;gt; 1&lt;/code&gt;. Currently &lt;code&gt;&quot;div&quot;&lt;/code&gt; and &lt;code&gt;&quot;mod&quot;&lt;/code&gt; are supported. Default is &lt;code&gt;&quot;mod&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2213c4277cf45103f2e9f4b55f9b9bb4f4d5c62c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;partition_strategy&lt;/code&gt;&lt;/b&gt;: A string specifying the partitioning strategy, relevant if &lt;code&gt;len(params) &amp;gt; 1&lt;/code&gt;. Currently &lt;code&gt;&quot;div&quot;&lt;/code&gt; and &lt;code&gt;&quot;mod&quot;&lt;/code&gt; are supported. Default is &lt;code&gt;&quot;mod&quot;&lt;/code&gt;. See &lt;code&gt;tf.nn.embedding_lookup&lt;/code&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a824d160dde1eeb4a407f2d8f97fb546973208a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;partition_strategy&lt;/code&gt;&lt;/b&gt;: A string specifying the partitioning strategy, relevant if &lt;code&gt;len(weights) &amp;gt; 1&lt;/code&gt;. Currently &lt;code&gt;&quot;div&quot;&lt;/code&gt; and &lt;code&gt;&quot;mod&quot;&lt;/code&gt; are supported. Default is &lt;code&gt;&quot;mod&quot;&lt;/code&gt;. See &lt;code&gt;tf.nn.embedding_lookup&lt;/code&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b219009f4c8db6f72761418e8127bc25b76674d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;partition_strategy&lt;/code&gt;&lt;/b&gt;: A string specifying the partitioning strategy. Currently &lt;code&gt;&quot;div&quot;&lt;/code&gt; and &lt;code&gt;&quot;mod&quot;&lt;/code&gt; are supported. Default is &lt;code&gt;&quot;div&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32aa738539d87bb04ffa359ece6694ede2fd929e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;partition_strategy&lt;/code&gt;&lt;/b&gt;: A string, determining how tensors are sharded to the tpu hosts. See &lt;a href=&quot;../../../../../nn/safe_embedding_lookup_sparse&quot;&gt;&lt;code&gt;tf.nn.safe_embedding_lookup_sparse&lt;/code&gt;&lt;/a&gt; for more details. Allowed value are &lt;code&gt;&quot;div&quot;&lt;/code&gt; and &lt;code&gt;&quot;mod&quot;'. If&lt;/code&gt;&quot;mod&quot;` is used, evaluation and exporting the model to CPU will not work as expected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="671d6971329a26d5fe6b8b3f0afcf359a4ddf73b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;partitioner&lt;/code&gt;&lt;/b&gt;: Optional callable that accepts a fully defined &lt;code&gt;TensorShape&lt;/code&gt; and &lt;code&gt;dtype&lt;/code&gt; of the Variable to be created, and returns a list of partitions for each axis (currently only one axis can be partitioned).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="545af3c8ee897255e046f4bc61cff9bcba8f1e30" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;partitioner&lt;/code&gt;&lt;/b&gt;: Optional. Partitioner for input layer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a10ec224b5b9e06b1c4cf787a7076388e80a2de0" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;partitioner&lt;/code&gt;&lt;/b&gt;: Partitioner to be passed to the &lt;code&gt;Trackable&lt;/code&gt; API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7536ed5db3edfe7e09f74081af17c9d44613ab45" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;partitioner&lt;/code&gt;&lt;/b&gt;: callable or &lt;code&gt;None&lt;/code&gt;: the partitioner passed to &lt;code&gt;get_variable&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26ea07dc11ac29743cbace871d7ed7dd341ef700" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;partitioner&lt;/code&gt;&lt;/b&gt;: default partitioner for variables within this scope.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9602fa652f111308f4e40b7f6625fc3071345723" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;partitions&lt;/code&gt;&lt;/b&gt;: (Optional.) A list of objects specifying the row-partitioning tensors (from outermost to innermost). Each entry in this list must be one of:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f704d1fd6a88b7c51e85851fd3c0af32fb1c9357" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;partitions&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt; of type &lt;code&gt;int32&lt;/code&gt;. Any shape. Indices in the range &lt;code&gt;[0, num_partitions)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="407606b46cfb94e8df8e3652a8ad2ecc8544af1d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;partitions&lt;/code&gt;&lt;/b&gt;: An &lt;code&gt;int32&lt;/code&gt; or &lt;code&gt;int64&lt;/code&gt;&lt;code&gt;Tensor&lt;/code&gt; or &lt;code&gt;RaggedTensor&lt;/code&gt; specifying the partition that each slice of &lt;code&gt;data&lt;/code&gt; should be added to. &lt;code&gt;partitions.shape&lt;/code&gt; must be a prefix of &lt;code&gt;data.shape&lt;/code&gt;. Values must be greater than or equal to zero, and less than &lt;code&gt;num_partitions&lt;/code&gt;. &lt;code&gt;partitions&lt;/code&gt; is not required to be sorted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d03508ad63b1c42f693405f6c2f842c2d75c49e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;pass_pipeline&lt;/code&gt;&lt;/b&gt;: A textual description of an MLIR Pass Pipeline to run on the module, see MLIR documentation for the &lt;a href=&quot;https://github.com/tensorflow/mlir/blob/master/g3doc/WritingAPass.md#textual-pass-pipeline-specification&quot;&gt;textual pass pipeline syntax&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d05d4313c50eb659d4a5abfbb44ac6f3e7086802" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;path&lt;/code&gt;&lt;/b&gt;: An object that can be converted to path representation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04e89eabb99df80eaf48456425e8a059aa49fcf8" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;path&lt;/code&gt;&lt;/b&gt;: Path or file object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c338f4178e6884e0c6b360dc415b952c35089eb" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;path&lt;/code&gt;&lt;/b&gt;: String; path relative to &lt;code&gt;root&lt;/code&gt; to which the events will be sent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab1c79adfbbadfedcbea455ec0a33b805e1b333a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;path&lt;/code&gt;&lt;/b&gt;: The path to an event file created by a &lt;code&gt;SummaryWriter&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1762c568cb797836c3337a4b1d854d5fe914c4f3" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;path&lt;/code&gt;&lt;/b&gt;: The path to the TFRecords file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39f367ac2437450c2116b3e0cad3d9b43823ed5f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;path&lt;/code&gt;&lt;/b&gt;: a string resource path relative to tensorflow/</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a3b31b8aabcd2099b6bebdf2afb4b41d37d326f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;path&lt;/code&gt;&lt;/b&gt;: a string resource path relative to tensorflow/.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7669a821ad4a3c33d16555243cb2af2d610a05c6" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;path&lt;/code&gt;&lt;/b&gt;: path where to cache the dataset locally (relative to ~/.keras/datasets).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="314c4141a402a3127da1ed11686ae67fe65d5164" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;path&lt;/code&gt;&lt;/b&gt;: string, a path</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="284309442a3df5e61f323340b7cbb88c6c35671b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;path&lt;/code&gt;&lt;/b&gt;: string, name of the directory to be created</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e69bb59463ece2673d17b063a72658464fbc5126" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;path&lt;/code&gt;&lt;/b&gt;: string, path to a directory</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b785eda69cfe6eea1ee9e3750c319447e674db5" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;path&lt;/code&gt;&lt;/b&gt;: string, path to a file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a59529b50adbc70a2d5b7751208348fbc43c6b6" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;path&lt;/code&gt;&lt;/b&gt;: string, path to a potential directory</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13cf7e99594ed13c6916d50a4dde80c8a9648781" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;path&lt;/code&gt;&lt;/b&gt;: where to cache the data (relative to &lt;code&gt;~/.keras/dataset&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75e7b2ebeca0a4829b80dd4ad8e689ff193c3324" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;path_length_limit&lt;/code&gt;&lt;/b&gt;: Limit to the file path included in the printed stack trace. Applicable only to ops in &lt;a href=&quot;../function&quot;&gt;&lt;code&gt;tf.function&lt;/code&gt;&lt;/a&gt;s (graphs).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="158518d10553260989873008bb706f77032d4bed" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;patience&lt;/code&gt;&lt;/b&gt;: Number of epochs with no improvement after which training will be stopped.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c00828fa6bb38bda050d331e6d88a326eb71a9ca" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;patience&lt;/code&gt;&lt;/b&gt;: number of epochs with no improvement after which learning rate will be reduced.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="547e7ed6f88c3025234e4fa46bcc735d22c34514" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;pattern&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt; of type &lt;code&gt;string&lt;/code&gt;. A scalar string tensor containing the regular expression to match the input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da3b3fb1dfada203953eef0411c1fe12790e5d78" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;pattern&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt; of type &lt;code&gt;string&lt;/code&gt;. Shell wildcard pattern(s). Scalar or vector of type string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5a9950e31285170f6cbf8656351ca651c6ecfdf" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;pattern&lt;/code&gt;&lt;/b&gt;: A file pattern (glob), or 1D tensor of file patterns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d67855823c472536870efc09345ff37e58dd4a8d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;pattern&lt;/code&gt;&lt;/b&gt;: A tuple of dimension indices, e.g. &lt;code&gt;(0, 2, 1)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdc83563f3544f4af91b432a68ecc65dd388d4f4" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;pattern&lt;/code&gt;&lt;/b&gt;: string or iterable of strings. The glob pattern(s).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4cd4531c1e1d8505bdaaf02073beed7fadd6938" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;pattern&lt;/code&gt;&lt;/b&gt;: string or scalar string &lt;code&gt;Tensor&lt;/code&gt;, regular expression to use, see more details at https://github.com/google/re2/wiki/Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f12d571035bd90aab602241c8dd03651ae396687" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;per_example_loss&lt;/code&gt;&lt;/b&gt;: Per-example loss.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b53fbacd2e1265fd66de180940979abda36992a1" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;per_host_input_for_training&lt;/code&gt;&lt;/b&gt;: If &lt;code&gt;True&lt;/code&gt;, for &lt;code&gt;PER_HOST_V1&lt;/code&gt;, the &lt;code&gt;input_fn&lt;/code&gt; is invoked once on each host, and the number of hosts must be smaller or equal to the number of replicas. For PER_HOST_V2, the &lt;code&gt;input_fn&lt;/code&gt; is invoked once for each host (if the number of hosts is less than the number of replicas) or replica (if the number of replicas is less than the number of hosts. With the per-core input pipeline configuration, it is invoked once for each core. With a global batch size &lt;code&gt;train_batch_size&lt;/code&gt; in &lt;code&gt;TPUEstimator&lt;/code&gt; constructor, the batch size for each shard is &lt;code&gt;train_batch_size&lt;/code&gt; // #hosts in the &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;PER_HOST_V1&lt;/code&gt; mode. In &lt;code&gt;PER_HOST_V2&lt;/code&gt; mode, it is &lt;code&gt;train_batch_size&lt;/code&gt; // #cores. In &lt;code&gt;BROADCAST&lt;/code&gt; mode, &lt;code&gt;input_fn&lt;/code&gt; is only invoked once on host 0 and the tensors are broadcasted to all other replicas. The batch size equals to &lt;code&gt;train_batch_size&lt;/code&gt;. With the per-core input pipeline configuration, the shard batch size is also &lt;code&gt;train_batch_size&lt;/code&gt; // #cores. Note: per_host_input_for_training==PER_SHARD_V1 only supports mode.TRAIN.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf83b4a8825293b02e78c73a3f78f55d84a4827d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;per_replica_value&lt;/code&gt;&lt;/b&gt;: a PerReplica object or a tensor with device set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="099930b500d36fdbbbfcd7eb5786bf421dc7dd87" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;percentage&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt; representing the current mean, the value of &lt;code&gt;total&lt;/code&gt; divided by &lt;code&gt;count&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="620043fed31fc75b1585f8a8dd2c3f915ba62cc5" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;periodic&lt;/code&gt;&lt;/b&gt;: A bool &lt;code&gt;Tensor&lt;/code&gt; indicating whether to generate a periodic or symmetric window. Periodic windows are typically used for spectral analysis while symmetric windows are typically used for digital filter design.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c6dc69b72557ffc82da0d01401fea49bc1b479f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;perm&lt;/code&gt;&lt;/b&gt;: &lt;code&gt;p&lt;/code&gt; as returned by &lt;code&gt;tf.linag.lu&lt;/code&gt;, i.e., if &lt;code&gt;matmul(P, matmul(L, U)) = X&lt;/code&gt; then &lt;code&gt;perm = argmax(P)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="191501eab2291320c5ed84b5e2e309ed1c29a81a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;perm&lt;/code&gt;&lt;/b&gt;: A permutation of the dimensions of &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d670ee59dd58d7deef33be98705c79b5ea5228b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;perm&lt;/code&gt;&lt;/b&gt;: A permutation of the dimensions of &lt;code&gt;sp_input&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a3a9c4583c4ffeb277971c63f30673071fc1874" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;perm&lt;/code&gt;&lt;/b&gt;: Shape &lt;code&gt;[B1,...,Bb, N]&lt;/code&gt; Integer &lt;code&gt;Tensor&lt;/code&gt; with &lt;code&gt;b &amp;gt;= 0&lt;/code&gt;&lt;code&gt;N &amp;gt;= 0&lt;/code&gt;. An integer vector that represents the permutation to apply. Note that this argument is same as &lt;a href=&quot;../transpose&quot;&gt;&lt;code&gt;tf.transpose&lt;/code&gt;&lt;/a&gt;. However, this permutation is applied on the rows, while the permutation in &lt;a href=&quot;../transpose&quot;&gt;&lt;code&gt;tf.transpose&lt;/code&gt;&lt;/a&gt; is applied on the dimensions of the &lt;code&gt;Tensor&lt;/code&gt;. &lt;code&gt;perm&lt;/code&gt; is required to have unique entries from &lt;code&gt;{0, 1, ... N-1}&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30cbb435cd65e4afc1bfb56e2699c95f1931026b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;persistent&lt;/code&gt;&lt;/b&gt;: Boolean controlling whether a persistent gradient tape is created. False by default, which means at most one call can be made to the gradient() method on this object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a09b52cb401fb9369b8c3e44bbdfd32a0c8f4b57" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;pin_variables_on_cpu&lt;/code&gt;&lt;/b&gt;: If True, this function will return False if node_def represents a variable-related op.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97abde7eb5c64a9aaab583cdce2bc13ac84a74d0" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;pipeline_execution_with_tensor_core&lt;/code&gt;&lt;/b&gt;: setting this to &lt;code&gt;True&lt;/code&gt; makes training faster, but trained model will be different if step N and step N+1 involve the same set of embedding IDs. Please see &lt;code&gt;tpu_embedding_configuration.proto&lt;/code&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="005c98ea1cfa43d2b342c5e8ad080dad950054ac" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;placeholder&lt;/code&gt;&lt;/b&gt;: An optional &lt;code&gt;string&lt;/code&gt;. Defaults to &lt;code&gt;{}&lt;/code&gt;. At each placeholder occurring in the template, a subsequent tensor will be inserted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b498f5806dece4804faae6d47d3a27dfb7ce5d43" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;places&lt;/code&gt;&lt;/b&gt;: The number of decimal places to compare.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="426160e2cd3aee04134e29f4a1f18bb675ee834b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;pointwise_constraint&lt;/code&gt;&lt;/b&gt;: Constraint function applied to the pointwise kernel matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc4bbcadeee313182e158d19472f3a8e3252acde" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;pointwise_constraint&lt;/code&gt;&lt;/b&gt;: Optional projection function to be applied to the pointwise kernel after being updated by an &lt;code&gt;Optimizer&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ae1bad65e612c7e01b98dfe27fec841646a2409" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;pointwise_filter&lt;/code&gt;&lt;/b&gt;: 4-D &lt;code&gt;Tensor&lt;/code&gt; with shape &lt;code&gt;[1, 1, channel_multiplier * in_channels, out_channels]&lt;/code&gt;. Pointwise filter to mix channels after &lt;code&gt;depthwise_filter&lt;/code&gt; has convolved spatially.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0247d80d9b6c374e3748e9d11a4ae7d4fa909cae" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;pointwise_initializer&lt;/code&gt;&lt;/b&gt;: An initializer for the pointwise convolution kernel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc7e5eb3eed8e25dae7c1520af8733a89cda305b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;pointwise_initializer&lt;/code&gt;&lt;/b&gt;: Initializer for the pointwise kernel matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e24aacc63a1c04193e890a2c20167187fbdb4abb" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;pointwise_kernel&lt;/code&gt;&lt;/b&gt;: kernel for the 1x1 convolution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ae63023aeede03fa5549e9ec2a38c361df23872" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;pointwise_regularizer&lt;/code&gt;&lt;/b&gt;: Optional regularizer for the pointwise convolution kernel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5055298699b0c31b9e09ed987f9b49208827b461" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;pointwise_regularizer&lt;/code&gt;&lt;/b&gt;: Regularizer function applied to the pointwise kernel matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93fe13a2bfff987312a7ce13fb79dd9df106ba84" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;policy&lt;/code&gt;&lt;/b&gt;: A Policy, or a string that will be converted to a Policy..</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c342236a733aeebdde26123358f680bd1eb8ed1" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;pool_mode&lt;/code&gt;&lt;/b&gt;: string, &lt;code&gt;&quot;max&quot;&lt;/code&gt; or &lt;code&gt;&quot;avg&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ca4dfced30abbb36574e449b578386dd5543f58" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;pool_size&lt;/code&gt;&lt;/b&gt;: An integer or tuple/list of 2 integers: (pool_height, pool_width) specifying the size of the pooling window. Can be a single integer to specify the same value for all spatial dimensions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="197b62fdfd5ec036709718787cf1cc124efe458c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;pool_size&lt;/code&gt;&lt;/b&gt;: An integer or tuple/list of 3 integers: (pool_depth, pool_height, pool_width) specifying the size of the pooling window. Can be a single integer to specify the same value for all spatial dimensions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd4121a9ea8485d997cade206a49e0a165e76a36" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;pool_size&lt;/code&gt;&lt;/b&gt;: An integer or tuple/list of a single integer, representing the size of the pooling window.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a133af468ac5c28110132540ce80d30b951e4d44" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;pool_size&lt;/code&gt;&lt;/b&gt;: Integer, size of the average pooling windows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65be2fb243a40f8ca133a3e08b2367ef8eda86b8" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;pool_size&lt;/code&gt;&lt;/b&gt;: Integer, size of the max pooling windows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="892fbfd38d7ba6b481669cbae5a92a9d3e4c16e6" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;pool_size&lt;/code&gt;&lt;/b&gt;: Tuple of 3 integers, factors by which to downscale (dim1, dim2, dim3). &lt;code&gt;(2, 2, 2)&lt;/code&gt; will halve the size of the 3D input in each dimension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cdb234921b84402ccd71d2ce426724fb91c6aeb" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;pool_size&lt;/code&gt;&lt;/b&gt;: integer or tuple of 2 integers, factors by which to downscale (vertical, horizontal). &lt;code&gt;(2, 2)&lt;/code&gt; will halve the input in both spatial dimension. If only one integer is specified, the same window length will be used for both dimensions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d82b802d479f12fff9a074e962a741f71fad4a6" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;pool_size&lt;/code&gt;&lt;/b&gt;: tuple of 2 integers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4065cd7b26598269c4ed742a7a560b3289e5269a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;pool_size&lt;/code&gt;&lt;/b&gt;: tuple of 3 integers, factors by which to downscale (dim1, dim2, dim3). &lt;code&gt;(2, 2, 2)&lt;/code&gt; will halve the size of the 3D input in each dimension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2166410e7a4387acd8d2a7e69a4c366c1a70d334" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;pool_size&lt;/code&gt;&lt;/b&gt;: tuple of 3 integers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78cea25aa78c5a139e09756afc51cc643821ab4e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;pooling_ratio&lt;/code&gt;&lt;/b&gt;: A list of &lt;code&gt;floats&lt;/code&gt; that has length &amp;gt;= 4. Pooling ratio for each dimension of &lt;code&gt;value&lt;/code&gt;, currently only supports row and col dimension and should be &amp;gt;= 1.0. For example, a valid pooling ratio looks like [1.0, 1.44, 1.73, 1.0]. The first and last elements must be 1.0 because we don't allow pooling on batch and channels dimensions. 1.44 and 1.73 are pooling ratio on height and width dimensions respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f145884424fcaba693e98e7d7814578636e10b07" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;pooling_ratio&lt;/code&gt;&lt;/b&gt;: An int or list of &lt;code&gt;ints&lt;/code&gt; that has length &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;2&lt;/code&gt; or &lt;code&gt;4&lt;/code&gt;. Pooling ratio for each dimension of &lt;code&gt;value&lt;/code&gt;, currently only supports row and col dimension and should be &amp;gt;= 1.0. For example, a valid pooling ratio looks like [1.0, 1.44, 1.73, 1.0]. The first and last elements must be 1.0 because we don't allow pooling on batch and channels dimensions. 1.44 and 1.73 are pooling ratio on height and width dimensions respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bd9f3356cf3c24cc669f78c968b82462dd3955e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;pooling_type&lt;/code&gt;&lt;/b&gt;: Specifies pooling operation, must be &quot;AVG&quot; or &quot;MAX&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="167fd04c0e46cf97c28657e94bce8f3a6e1a39fc" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;port&lt;/code&gt;&lt;/b&gt;: Port of the listening TensorFlow server (default: 8470)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c00409b5cb8dfbf6912863c2a63694be872410d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;port_base&lt;/code&gt;&lt;/b&gt;: The first port number to start with for processes on a node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f4b4f1176a343713b2e063e66ef78269b83d059" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;pos&lt;/code&gt;&lt;/b&gt;: A &lt;code&gt;Tensor&lt;/code&gt;. Must be one of the following types: &lt;code&gt;int32&lt;/code&gt;, &lt;code&gt;int64&lt;/code&gt;. Scalar defining the position of first character in each substring</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9f1406af525d644b2256a8a22536feff4d393b0" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;pos_weight&lt;/code&gt;&lt;/b&gt;: A coefficient to use on the positive examples.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aceecae5956ea5dbe6c84990eb46c960a0b735df" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;positions&lt;/code&gt;&lt;/b&gt;: Relative or absolute positions of log elements in each line. If not provided, defaults to &lt;code&gt;[.33, .55, .67, 1.]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa2a7ee84987efe9a745d9438fd9700a281532df" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;post_training_quantize&lt;/code&gt;&lt;/b&gt;: Deprecated. Please specify &lt;code&gt;[Optimize.DEFAULT]&lt;/code&gt; for &lt;code&gt;optimizations&lt;/code&gt; instead. Boolean indicating whether to quantize the weights of the converted float model. Model size will be reduced and there will be latency improvements (at the cost of accuracy). (default False)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7147469ee05a1a5fbb739d844a3b76aff7151ba5" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;power&lt;/code&gt;&lt;/b&gt;: A scalar &lt;code&gt;float32&lt;/code&gt; or &lt;code&gt;float64&lt;/code&gt;&lt;code&gt;Tensor&lt;/code&gt; or a Python number. The power of the polynomial. Defaults to linear, 1.0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="191d2338e4e6e0286272fb5fd2f5e223cc042f0f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;power_factors&lt;/code&gt;&lt;/b&gt;: Iterable of weights for each of the scales. The number of scales used is the length of the list. Index 0 is the unscaled resolution's weight and each increasing scale corresponds to the image being downsampled by 2. Defaults to (0.0448, 0.2856, 0.3001, 0.2363, 0.1333), which are the values obtained in the original paper.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52a48090b436cb6aeb20c471f2774808f80e8c55" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;pprof_file&lt;/code&gt;&lt;/b&gt;: filename for output, usually suffixed with .pb.gz.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8abf642b218f7522b1d8dd7a621cdfa3d6bba22f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;pr_auc&lt;/code&gt;&lt;/b&gt;: an approximation of the area under the P-R curve.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c7553aa28de63452ee4c3dd79e5b31ef04a6912" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;precision&lt;/code&gt;&lt;/b&gt;: A float &lt;code&gt;Tensor&lt;/code&gt; of shape &lt;code&gt;[len(thresholds)]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="412a5292540a4ba22513d670c04f14f342015fde" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;precision&lt;/code&gt;&lt;/b&gt;: An optional &lt;code&gt;int&lt;/code&gt;. Defaults to &lt;code&gt;-1&lt;/code&gt;. The post-decimal precision to use for floating point numbers. Only used if precision &amp;gt; -1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29b274990297ccc14c9aa8fe9cbf527ecd9b2e46" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;precision&lt;/code&gt;&lt;/b&gt;: Scalar &lt;code&gt;float64&lt;/code&gt;&lt;code&gt;Tensor&lt;/code&gt; with the value of &lt;code&gt;true_positives&lt;/code&gt; divided by the sum of &lt;code&gt;true_positives&lt;/code&gt; and &lt;code&gt;false_positives&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0adec93b2a24faf361913aa98ff7baa46f45a07f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;precision&lt;/code&gt;&lt;/b&gt;: Scalar float &lt;code&gt;Tensor&lt;/code&gt; with the value of &lt;code&gt;true_positives&lt;/code&gt; divided by the sum of &lt;code&gt;true_positives&lt;/code&gt; and &lt;code&gt;false_positives&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1114f805053be90f6fa5c131bc4d3bccf48f2bc8" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;pred&lt;/code&gt;&lt;/b&gt;: A scalar determining whether to return the result of &lt;code&gt;true_fn&lt;/code&gt; or &lt;code&gt;false_fn&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b0742c092a84173a2d5ff6083c9ab41f1d731b5" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;pred_fn_pairs&lt;/code&gt;&lt;/b&gt;: Dict or list of pairs of a boolean scalar tensor and a callable which returns a list of tensors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a6a31fcda7bdd984d3418d64ecd508c5dabd9ff" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;pred_fn_pairs&lt;/code&gt;&lt;/b&gt;: List of pairs of a boolean scalar tensor and a callable which returns a list of tensors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b6ce0f63914c190b366f1f04e35bd85a2e7dd88" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;predicate&lt;/code&gt;&lt;/b&gt;: A function mapping a dataset element to a boolean.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8685412d0590c57fa8ac2414d7ed5264f6dee377" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;predicate&lt;/code&gt;&lt;/b&gt;: A function mapping a nested structure of tensors (having shapes and types defined by &lt;code&gt;self.output_shapes&lt;/code&gt; and &lt;code&gt;self.output_types&lt;/code&gt;) to a scalar &lt;a href=&quot;../../../../../tf#bool&quot;&gt;&lt;code&gt;tf.bool&lt;/code&gt;&lt;/a&gt; tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b8d1b642f61f3f9bab289eaefaf15f3a73ce7bc" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;predicate&lt;/code&gt;&lt;/b&gt;: A function mapping a nested structure of tensors (having shapes and types defined by &lt;code&gt;self.output_shapes&lt;/code&gt; and &lt;code&gt;self.output_types&lt;/code&gt;) to a scalar &lt;a href=&quot;../../../../tf#bool&quot;&gt;&lt;code&gt;tf.bool&lt;/code&gt;&lt;/a&gt; tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f89757abd2519d89cffb0f98a35a914382366f33" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;predicate&lt;/code&gt;&lt;/b&gt;: A function that maps a nested structure of tensors (having shapes and types defined by &lt;code&gt;self.output_shapes&lt;/code&gt; and &lt;code&gt;self.output_types&lt;/code&gt;) to a scalar &lt;a href=&quot;../../../tf#bool&quot;&gt;&lt;code&gt;tf.bool&lt;/code&gt;&lt;/a&gt; tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c58a6efb3c684cedb5cbf4cef23bb1b00b7b681" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;predict_batch_size&lt;/code&gt;&lt;/b&gt;: An int representing the prediction batch size. Must be divisible by total number of replicas.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcb2a96e45bf1e406c3e6c9b59ce09cd1df124e5" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;predict_keys&lt;/code&gt;&lt;/b&gt;: list of &lt;code&gt;str&lt;/code&gt;, name of the keys to predict. It is used if the &lt;a href=&quot;../../../../estimator/estimatorspec#predictions&quot;&gt;&lt;code&gt;tf.estimator.EstimatorSpec.predictions&lt;/code&gt;&lt;/a&gt; is a &lt;code&gt;dict&lt;/code&gt;. If &lt;code&gt;predict_keys&lt;/code&gt; is used then rest of the predictions will be filtered from the dictionary. If &lt;code&gt;None&lt;/code&gt;, returns all.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f758f00fca27945638a1d8973b44688139ec4c63" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;predict_keys&lt;/code&gt;&lt;/b&gt;: list of &lt;code&gt;str&lt;/code&gt;, name of the keys to predict. It is used if the &lt;a href=&quot;../../../estimator/estimatorspec#predictions&quot;&gt;&lt;code&gt;tf.estimator.EstimatorSpec.predictions&lt;/code&gt;&lt;/a&gt; is a &lt;code&gt;dict&lt;/code&gt;. If &lt;code&gt;predict_keys&lt;/code&gt; is used then rest of the predictions will be filtered from the dictionary. If &lt;code&gt;None&lt;/code&gt;, returns all.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd5e7230eaab02fd78efaffe6f04b35b4c77295f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;predict_keys&lt;/code&gt;&lt;/b&gt;: list of &lt;code&gt;str&lt;/code&gt;, name of the keys to predict. It is used if the &lt;a href=&quot;../estimatorspec#predictions&quot;&gt;&lt;code&gt;tf.estimator.EstimatorSpec.predictions&lt;/code&gt;&lt;/a&gt; is a &lt;code&gt;dict&lt;/code&gt;. If &lt;code&gt;predict_keys&lt;/code&gt; is used then rest of the predictions will be filtered from the dictionary. If &lt;code&gt;None&lt;/code&gt;, returns all.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b0a7a5586193e3899e45781b0fc0e905d1c310c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;predict_keys&lt;/code&gt;&lt;/b&gt;: list of &lt;code&gt;str&lt;/code&gt;, name of the keys to predict. It is used if the &lt;a href=&quot;estimatorspec#predictions&quot;&gt;&lt;code&gt;tf.estimator.EstimatorSpec.predictions&lt;/code&gt;&lt;/a&gt; is a &lt;code&gt;dict&lt;/code&gt;. If &lt;code&gt;predict_keys&lt;/code&gt; is used then rest of the predictions will be filtered from the dictionary, with the exception of 'bias' and 'dfc', which will always be in the dictionary. If &lt;code&gt;None&lt;/code&gt;, returns all keys in prediction dict, as well as two new keys 'dfc' and 'bias'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="085043ff2120d7c16dcc6a38606284c7f85b6afe" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;predict_keys&lt;/code&gt;&lt;/b&gt;: list of &lt;code&gt;str&lt;/code&gt;, name of the keys to predict. It is used if the &lt;a href=&quot;estimatorspec#predictions&quot;&gt;&lt;code&gt;tf.estimator.EstimatorSpec.predictions&lt;/code&gt;&lt;/a&gt; is a &lt;code&gt;dict&lt;/code&gt;. If &lt;code&gt;predict_keys&lt;/code&gt; is used then rest of the predictions will be filtered from the dictionary. If &lt;code&gt;None&lt;/code&gt;, returns all.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a79b7d4d13ae1a26d0c46af74c49ba87b23111b9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;prediction_hooks&lt;/code&gt;&lt;/b&gt;: Iterable of &lt;code&gt;tf.train.SessionRunHook&lt;/code&gt; objects to run during predictions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edad13d02febd5d07e869331937d992667c17665" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;predictions&lt;/code&gt;&lt;/b&gt;: 1-D &lt;code&gt;Tensor&lt;/code&gt; of predictions for a given classification.</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
