<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="fish">
    <body>
      <group id="fish">
        <trans-unit id="e3e94829bc8add7b15869b5cc924c0f429eaf284" translate="yes" xml:space="preserve">
          <source>&quot;escape&quot; subcommand</source>
          <target state="translated">&quot;escape&quot;부속 명령</target>
        </trans-unit>
        <trans-unit id="9f2d00860255e2dbd4f89d158012097bde90f8a2" translate="yes" xml:space="preserve">
          <source>&quot;join&quot; subcommand</source>
          <target state="translated">&quot;join&quot;부속 명령</target>
        </trans-unit>
        <trans-unit id="e21d61357a6ad583e922f6673300991dc11d014f" translate="yes" xml:space="preserve">
          <source>&quot;join0&quot; subcommand</source>
          <target state="translated">&quot;join0&quot;부속 명령</target>
        </trans-unit>
        <trans-unit id="8efa442a887f3f14c8496d18cb8b8a740013df6f" translate="yes" xml:space="preserve">
          <source>&quot;length&quot; subcommand</source>
          <target state="translated">&quot;length&quot;부속 명령</target>
        </trans-unit>
        <trans-unit id="ab1d1b746c457012252ac321a73d38ab2ebe5613" translate="yes" xml:space="preserve">
          <source>&quot;lower&quot; subcommand</source>
          <target state="translated">&quot;lower&quot;하위 명령</target>
        </trans-unit>
        <trans-unit id="b19372e35db548e60a80a149d78ccdec982168a9" translate="yes" xml:space="preserve">
          <source>&quot;match&quot; subcommand</source>
          <target state="translated">&quot;match&quot;부속 명령</target>
        </trans-unit>
        <trans-unit id="b9b1ce5c118d52a46c7f1f07f038c7f05c42b1d2" translate="yes" xml:space="preserve">
          <source>&quot;repeat&quot; subcommand</source>
          <target state="translated">&quot;repeat&quot;부속 명령</target>
        </trans-unit>
        <trans-unit id="0e8296f5cf95f7225a62111b0e287cf6764990c5" translate="yes" xml:space="preserve">
          <source>&quot;replace&quot; subcommand</source>
          <target state="translated">&quot;replace&quot;부속 명령</target>
        </trans-unit>
        <trans-unit id="f577a51a0308660f967ba74376e366982bd5206a" translate="yes" xml:space="preserve">
          <source>&quot;split&quot; subcommand</source>
          <target state="translated">&quot;split&quot;부속 명령</target>
        </trans-unit>
        <trans-unit id="b2e3b8ce8d0c3036a9bf7840222ce98fb6d811cf" translate="yes" xml:space="preserve">
          <source>&quot;split0&quot; subcommand</source>
          <target state="translated">&quot;split0&quot;하위 명령</target>
        </trans-unit>
        <trans-unit id="024a25297fddbd9dedad0851b1472db86dcc1dd8" translate="yes" xml:space="preserve">
          <source>&quot;sub&quot; subcommand</source>
          <target state="translated">&quot;sub&quot;부속 명령</target>
        </trans-unit>
        <trans-unit id="28948906c8b23197570e0b5c46cb76df167e0f66" translate="yes" xml:space="preserve">
          <source>&quot;trim&quot; subcommand</source>
          <target state="translated">&quot;trim&quot;부속 명령</target>
        </trans-unit>
        <trans-unit id="40b8829d1faee8ade2f07b43e4f235ff888d301f" translate="yes" xml:space="preserve">
          <source>&quot;upper&quot; subcommand</source>
          <target state="translated">&quot;upper&quot;부속 명령</target>
        </trans-unit>
        <trans-unit id="e74df81673b1955ec5bd878d5a31e75dbad8d930" translate="yes" xml:space="preserve">
          <source>$PATH</source>
          <target state="translated">$PATH</target>
        </trans-unit>
        <trans-unit id="e7c37081f789a86d349860f9514c4a22ed6c8be0" translate="yes" xml:space="preserve">
          <source>&amp;copy; 2005&amp;ndash;2009 Axel Liljencrantz</source>
          <target state="translated">&amp;copy; 2005&amp;ndash;2009 Axel Liljencrantz</target>
        </trans-unit>
        <trans-unit id="6e733f0448b74b200711498fb8f9724e548effef" translate="yes" xml:space="preserve">
          <source>'&lt;code&gt;\ &lt;/code&gt;' escapes the space character</source>
          <target state="translated">' &lt;code&gt;\ &lt;/code&gt; '는 공백 문자를 이스케이프합니다.</target>
        </trans-unit>
        <trans-unit id="3766fe8fd51914d2f0501ba3230d87e85f797d72" translate="yes" xml:space="preserve">
          <source>'&lt;code&gt;\&quot;&lt;/code&gt;' escapes the quote character</source>
          <target state="translated">' &lt;code&gt;\&quot;&lt;/code&gt; '은 따옴표 문자를 이스케이프합니다</target>
        </trans-unit>
        <trans-unit id="d581326b575bb44f2f74c9bcfa7ac107ffb161b6" translate="yes" xml:space="preserve">
          <source>'&lt;code&gt;\#&lt;/code&gt;' escapes the hash character</source>
          <target state="translated">' &lt;code&gt;\#&lt;/code&gt; '는 해시 문자를 이스케이프합니다</target>
        </trans-unit>
        <trans-unit id="908c4a656e232a0ed243dbdbf871954382da6771" translate="yes" xml:space="preserve">
          <source>'&lt;code&gt;\$&lt;/code&gt;' escapes the dollar character</source>
          <target state="translated">' &lt;code&gt;\$&lt;/code&gt; '는 달러 문자를 이스케이프합니다.</target>
        </trans-unit>
        <trans-unit id="74cfbb0c40dd10059a8a310e833ed5ecd9f06a68" translate="yes" xml:space="preserve">
          <source>'&lt;code&gt;\&amp;amp;&lt;/code&gt;' escapes the ampersand character</source>
          <target state="translated">' &lt;code&gt;\&amp;amp;&lt;/code&gt; '는 앰퍼샌드 문자를 이스케이프합니다.</target>
        </trans-unit>
        <trans-unit id="0fd67766a6a7c6b8a983ef28f2fb7ab48dca0bdd" translate="yes" xml:space="preserve">
          <source>'&lt;code&gt;\&amp;gt;&lt;/code&gt;' escapes the more than character</source>
          <target state="translated">' &lt;code&gt;\&amp;gt;&lt;/code&gt; '이상의 문자를 이스케이프 처리</target>
        </trans-unit>
        <trans-unit id="39323fc030aa46aff5b439c421f4b3e39c05b8c7" translate="yes" xml:space="preserve">
          <source>'&lt;code&gt;\&amp;lt;&lt;/code&gt;' escapes the less than character</source>
          <target state="translated">' &lt;code&gt;\&amp;lt;&lt;/code&gt; '은 (는) 문자 미만을 이스케이프합니다</target>
        </trans-unit>
        <trans-unit id="76924e88fd54ecad7def85f7f342985b1ca3498c" translate="yes" xml:space="preserve">
          <source>'&lt;code&gt;\'&lt;/code&gt;' escapes the apostrophe character</source>
          <target state="translated">' &lt;code&gt;\'&lt;/code&gt; '는 아포스트로피 문자를 이스케이프합니다.</target>
        </trans-unit>
        <trans-unit id="b095f868121c0c77a585d3717f0d5539a09b4b2b" translate="yes" xml:space="preserve">
          <source>'&lt;code&gt;\(&lt;/code&gt;' escapes the left parenthesis character</source>
          <target state="translated">' &lt;code&gt;\(&lt;/code&gt; '는 왼쪽 괄호 문자를 이스케이프합니다</target>
        </trans-unit>
        <trans-unit id="9b112a30e504e3c46037c242e293ff3f4f8b9c2f" translate="yes" xml:space="preserve">
          <source>'&lt;code&gt;\)&lt;/code&gt;' escapes the right parenthesis character</source>
          <target state="translated">' &lt;code&gt;\)&lt;/code&gt; '은 오른쪽 괄호 문자를 이스케이프합니다.</target>
        </trans-unit>
        <trans-unit id="fc31528d9df1545ef53e07d9d22803cbe3d529e5" translate="yes" xml:space="preserve">
          <source>'&lt;code&gt;\*&lt;/code&gt;' escapes the star character</source>
          <target state="translated">' &lt;code&gt;\*&lt;/code&gt; '는 별 문자를 이스케이프합니다.</target>
        </trans-unit>
        <trans-unit id="a89d1ebf911639d54265a91ff4d9a3d0df8f4735" translate="yes" xml:space="preserve">
          <source>'&lt;code&gt;\;&lt;/code&gt;' escapes the semicolon character</source>
          <target state="translated">' &lt;code&gt;\;&lt;/code&gt; '세미콜론 문자를 이스케이프</target>
        </trans-unit>
        <trans-unit id="9f59f8478c336a4822088ef663794cea667d0f21" translate="yes" xml:space="preserve">
          <source>'&lt;code&gt;\&lt;em&gt;ooo&lt;/em&gt;&lt;/code&gt;', where &lt;code&gt;&lt;em&gt;ooo&lt;/em&gt;&lt;/code&gt; is an octal number, represents the ascii character with the specified value. For example, &lt;code&gt;\011&lt;/code&gt; is the tab character.</source>
          <target state="translated">' &lt;code&gt;\&lt;em&gt;ooo&lt;/em&gt;&lt;/code&gt; '(여기서 &lt;code&gt;&lt;em&gt;ooo&lt;/em&gt;&lt;/code&gt; 는 8 진수 임)는 지정된 값을 가진 ASCII 문자를 나타냅니다. 예를 들어, &lt;code&gt;\011&lt;/code&gt; 은 탭 문자입니다.</target>
        </trans-unit>
        <trans-unit id="ea43bb2434566162741ba367041d88700753bfad" translate="yes" xml:space="preserve">
          <source>'&lt;code&gt;\?&lt;/code&gt;' escapes the question mark character</source>
          <target state="translated">' &lt;code&gt;\?&lt;/code&gt; '는 물음표 문자를 이스케이프합니다</target>
        </trans-unit>
        <trans-unit id="bf846fe82706846ac44b82971d9d88dec5ade509" translate="yes" xml:space="preserve">
          <source>'&lt;code&gt;\U&lt;em&gt;xxxxxxxx&lt;/em&gt;&lt;/code&gt;', where &lt;code&gt;&lt;em&gt;xxxxxxxx&lt;/em&gt;&lt;/code&gt; is a hexadecimal number, represents the 32-bit Unicode character with the specified value. For example, &lt;code&gt;\U9&lt;/code&gt; is the tab character.</source>
          <target state="translated">' &lt;code&gt;\U&lt;em&gt;xxxxxxxx&lt;/em&gt;&lt;/code&gt; '(여기서 &lt;code&gt;&lt;em&gt;xxxxxxxx&lt;/em&gt;&lt;/code&gt; 는 16 진수)는 지정된 값을 가진 32 비트 유니 코드 문자를 나타냅니다. 예를 들어, &lt;code&gt;\U9&lt;/code&gt; 는 탭 문자입니다.</target>
        </trans-unit>
        <trans-unit id="d9c1fcb035316cb93883343b149870608aafe9c1" translate="yes" xml:space="preserve">
          <source>'&lt;code&gt;\X&lt;em&gt;xx&lt;/em&gt;&lt;/code&gt;', where &lt;code&gt;&lt;em&gt;xx&lt;/em&gt;&lt;/code&gt; is a hexadecimal number, represents a byte of data with the specified value. If you are using a multibyte encoding, this can be used to enter invalid strings. Only use this if you know what you are doing.</source>
          <target state="translated">' &lt;code&gt;\X&lt;em&gt;xx&lt;/em&gt;&lt;/code&gt; '(여기서 &lt;code&gt;&lt;em&gt;xx&lt;/em&gt;&lt;/code&gt; 는 16 진수)는 지정된 값을 가진 데이터 바이트를 나타냅니다. 멀티 바이트 인코딩을 사용하는 경우 유효하지 않은 문자열을 입력하는 데 사용할 수 있습니다. 무엇을하고 있는지 아는 경우에만 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="62c0adf2ee6f56d3c6ed7bdc464ae968899ae7a8" translate="yes" xml:space="preserve">
          <source>'&lt;code&gt;\[&lt;/code&gt;' escapes the left bracket character</source>
          <target state="translated">' &lt;code&gt;\[&lt;/code&gt; '는 왼쪽 대괄호 문자를 이스케이프합니다</target>
        </trans-unit>
        <trans-unit id="50945e1a472b9afc1df6863963378f8d49f78fa2" translate="yes" xml:space="preserve">
          <source>'&lt;code&gt;\\&lt;/code&gt;' escapes the backslash character</source>
          <target state="translated">' &lt;code&gt;\\&lt;/code&gt; '백 슬래시 문자를 이스케이프합니다</target>
        </trans-unit>
        <trans-unit id="9685423c4a5a38dd0fcef08ef3d4e450369b39bd" translate="yes" xml:space="preserve">
          <source>'&lt;code&gt;\]&lt;/code&gt;' escapes the right bracket character</source>
          <target state="translated">' &lt;code&gt;\]&lt;/code&gt; '은 오른쪽 대괄호 문자를 이스케이프합니다</target>
        </trans-unit>
        <trans-unit id="8c7f7da1e32a59c5c45af7806c54f9f0dadd3d87" translate="yes" xml:space="preserve">
          <source>'&lt;code&gt;\^&lt;/code&gt;' escapes the circumflex character</source>
          <target state="translated">' &lt;code&gt;\^&lt;/code&gt; '곡절 문자를 이스케이프합니다</target>
        </trans-unit>
        <trans-unit id="7d5465bb6c5c6397db6a6a8d8e835aee2421cf33" translate="yes" xml:space="preserve">
          <source>'&lt;code&gt;\a&lt;/code&gt;' represents the alert character</source>
          <target state="translated">' &lt;code&gt;\a&lt;/code&gt; '는 경고 문자를 나타냅니다</target>
        </trans-unit>
        <trans-unit id="e2dca00e008764b48ee13cfd5508b3dcc5d0ba46" translate="yes" xml:space="preserve">
          <source>'&lt;code&gt;\b&lt;/code&gt;' represents the backspace character</source>
          <target state="translated">' &lt;code&gt;\b&lt;/code&gt; '는 백 스페이스 문자를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="d3586ff70608070874807d5a06afa71fd2e80dc1" translate="yes" xml:space="preserve">
          <source>'&lt;code&gt;\c&lt;em&gt;x&lt;/em&gt;&lt;/code&gt;', where &lt;code&gt;&lt;em&gt;x&lt;/em&gt;&lt;/code&gt; is a letter of the alphabet, represents the control sequence generated by pressing the control key and the specified letter. For example, &lt;code&gt;\ci&lt;/code&gt; is the tab character</source>
          <target state="translated">' &lt;code&gt;\c&lt;em&gt;x&lt;/em&gt;&lt;/code&gt; '(여기서 &lt;code&gt;&lt;em&gt;x&lt;/em&gt;&lt;/code&gt; 는 알파벳 문자 임)는 제어 키와 지정된 문자를 눌러 생성 된 제어 순서를 나타냅니다. 예를 들어, &lt;code&gt;\ci&lt;/code&gt; 는 탭 문자입니다.</target>
        </trans-unit>
        <trans-unit id="6e28dc20f701d9f4e74f01cdc46f1f132ec5b963" translate="yes" xml:space="preserve">
          <source>'&lt;code&gt;\e&lt;/code&gt;' represents the escape character</source>
          <target state="translated">' &lt;code&gt;\e&lt;/code&gt; '는 이스케이프 문자를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="7f0a21ac4d425415779a6c4bbb53488d9b54ae1a" translate="yes" xml:space="preserve">
          <source>'&lt;code&gt;\f&lt;/code&gt;' represents the form feed character</source>
          <target state="translated">' &lt;code&gt;\f&lt;/code&gt; '는 용지 공급 문자를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="f91c8219493052c97e2aed9919f95aebc5c62fec" translate="yes" xml:space="preserve">
          <source>'&lt;code&gt;\n&lt;/code&gt;' represents a newline character</source>
          <target state="translated">' &lt;code&gt;\n&lt;/code&gt; '은 개행 문자를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="35679010855c22fc43e3377eecfcd251179fb223" translate="yes" xml:space="preserve">
          <source>'&lt;code&gt;\r&lt;/code&gt;' represents the carriage return character</source>
          <target state="translated">' &lt;code&gt;\r&lt;/code&gt; '은 캐리지 리턴 문자를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="511986cf27cf7026f013ff5faf45d98d72bd0e78" translate="yes" xml:space="preserve">
          <source>'&lt;code&gt;\t&lt;/code&gt;' represents the tab character</source>
          <target state="translated">' &lt;code&gt;\t&lt;/code&gt; '는 탭 문자를 나타냅니다</target>
        </trans-unit>
        <trans-unit id="78ef5bd6c7394f12eb41a5e2b59cb25ce0d8493d" translate="yes" xml:space="preserve">
          <source>'&lt;code&gt;\u&lt;em&gt;xxxx&lt;/em&gt;&lt;/code&gt;', where &lt;code&gt;&lt;em&gt;xxxx&lt;/em&gt;&lt;/code&gt; is a hexadecimal number, represents the 16-bit Unicode character with the specified value. For example, &lt;code&gt;\u9&lt;/code&gt; is the tab character.</source>
          <target state="translated">' &lt;code&gt;\u&lt;em&gt;xxxx&lt;/em&gt;&lt;/code&gt; '(여기서 &lt;code&gt;&lt;em&gt;xxxx&lt;/em&gt;&lt;/code&gt; 는 16 진수)는 지정된 값을 가진 16 비트 유니 코드 문자를 나타냅니다. 예를 들어, &lt;code&gt;\u9&lt;/code&gt; 는 탭 문자입니다.</target>
        </trans-unit>
        <trans-unit id="3430111bfbd952f9ac43505656e447139b1b0e1b" translate="yes" xml:space="preserve">
          <source>'&lt;code&gt;\v&lt;/code&gt;' represents the vertical tab character</source>
          <target state="translated">' &lt;code&gt;\v&lt;/code&gt; '는 세로 탭 문자를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="48769ecea19cf70e5a9a7f77fefed5a5214e9c16" translate="yes" xml:space="preserve">
          <source>'&lt;code&gt;\x&lt;em&gt;xx&lt;/em&gt;&lt;/code&gt;', where &lt;code&gt;&lt;em&gt;xx&lt;/em&gt;&lt;/code&gt; is a hexadecimal number, represents the ascii character with the specified value. For example, &lt;code&gt;\x9&lt;/code&gt; is the tab character.</source>
          <target state="translated">' &lt;code&gt;\x&lt;em&gt;xx&lt;/em&gt;&lt;/code&gt; '(여기서 &lt;code&gt;&lt;em&gt;xx&lt;/em&gt;&lt;/code&gt; 는 16 진수)는 지정된 값을 가진 ASCII 문자를 나타냅니다. 예를 들어, &lt;code&gt;\x9&lt;/code&gt; 는 탭 문자입니다.</target>
        </trans-unit>
        <trans-unit id="e26067fc9cd97370cf591ccaad0fb3e55cf7a989" translate="yes" xml:space="preserve">
          <source>'&lt;code&gt;\{&lt;/code&gt;' escapes the left curly bracket character</source>
          <target state="translated">' &lt;code&gt;\{&lt;/code&gt; '는 왼쪽 중괄호 문자를 이스케이프합니다</target>
        </trans-unit>
        <trans-unit id="54b84fdc1e79da38d8b47d6c57faa890f0148f02" translate="yes" xml:space="preserve">
          <source>'&lt;code&gt;\|&lt;/code&gt;' escapes the vertical bar character</source>
          <target state="translated">' &lt;code&gt;\|&lt;/code&gt; '세로 막대 문자를 이스케이프합니다.</target>
        </trans-unit>
        <trans-unit id="4e8239f5e6a392207c141c016aae19280af2b611" translate="yes" xml:space="preserve">
          <source>'&lt;code&gt;\}&lt;/code&gt;' escapes the right curly bracket character</source>
          <target state="translated">' &lt;code&gt;\}&lt;/code&gt; '은 오른쪽 중괄호 문자를 이스케이프합니다</target>
        </trans-unit>
        <trans-unit id="6f51095eb1df3263df93f39d9d7f7d80b9bc8f48" translate="yes" xml:space="preserve">
          <source>'&lt;code&gt;\~&lt;/code&gt;' escapes the tilde character</source>
          <target state="translated">' &lt;code&gt;\~&lt;/code&gt; '물결표 문자를 이스케이프</target>
        </trans-unit>
        <trans-unit id="e2acf5f595596abfaaf2e1c846b580d18eb1ea84" translate="yes" xml:space="preserve">
          <source>(Notice the quotes: without them, &lt;code&gt;Mister&lt;/code&gt; and &lt;code&gt;Noodle&lt;/code&gt; would have been separate arguments, and &lt;code&gt;$name&lt;/code&gt; would have been made into a list of two elements.)</source>
          <target state="translated">(따옴표를 주목하십시오 : 그것들이 없으면 &lt;code&gt;Mister&lt;/code&gt; 와 &lt;code&gt;Noodle&lt;/code&gt; 은 별도의 인수 였을 것이고 &lt;code&gt;$name&lt;/code&gt; 은 두 가지 요소의 목록으로 만들어 졌을 것입니다.)</target>
        </trans-unit>
        <trans-unit id="fe2c45b3c9fee2f956df0a99d9cdc979e3482ac9" translate="yes" xml:space="preserve">
          <source>(To change it back to another shell, just substitute &lt;code&gt;/usr/local/bin/fish&lt;/code&gt; with &lt;code&gt;/bin/bash&lt;/code&gt;, &lt;code&gt;/bin/tcsh&lt;/code&gt; or &lt;code&gt;/bin/zsh&lt;/code&gt; as appropriate in the steps above.)</source>
          <target state="translated">(다른 쉘로 다시 변경하려면 위의 단계에서 &lt;code&gt;/usr/local/bin/fish&lt;/code&gt; 를 &lt;code&gt;/bin/bash&lt;/code&gt; , &lt;code&gt;/bin/tcsh&lt;/code&gt; 또는 &lt;code&gt;/bin/zsh&lt;/code&gt; 로 바꾸십시오 .)</target>
        </trans-unit>
        <trans-unit id="59f3e37977f18ebf94190762fe9b74e49ce52c7f" translate="yes" xml:space="preserve">
          <source>(with the cursor on the &quot;o&quot; of &quot;flounder&quot;)</source>
          <target state="translated">(커서가 &quot;of 치&quot;의 &quot;o&quot;에 있음)</target>
        </trans-unit>
        <trans-unit id="9ea86d42ab79135fe2363ddb06bc732515155e41" translate="yes" xml:space="preserve">
          <source>0 is generally the exit status of fish commands if they successfully performed the requested operation.</source>
          <target state="translated">0은 일반적으로 요청 된 작업을 성공적으로 수행 한 경우 fish 명령의 종료 상태입니다.</target>
        </trans-unit>
        <trans-unit id="d4aa12f4487bb60906e88f2171d4e42804448067" translate="yes" xml:space="preserve">
          <source>1 is generally the exit status of fish commands if they failed to perform the requested operation.</source>
          <target state="translated">1은 일반적으로 요청 된 작업을 수행하지 못한 경우 물고기 명령의 종료 상태입니다.</target>
        </trans-unit>
        <trans-unit id="f189b8dbc452ee2bcbb7cf6ade70c1f019a52882" translate="yes" xml:space="preserve">
          <source>1. Introduction</source>
          <target state="translated">1. 소개</target>
        </trans-unit>
        <trans-unit id="926896a2a12a6b506b2f8392df8c284a8f1ac6bd" translate="yes" xml:space="preserve">
          <source>1. Why fish?</source>
          <target state="translated">1. 왜 물고기?</target>
        </trans-unit>
        <trans-unit id="a46eef5477967beb8023385daf2fa827aa1eb6d4" translate="yes" xml:space="preserve">
          <source>10. Command line editor</source>
          <target state="translated">10. 명령 줄 편집기</target>
        </trans-unit>
        <trans-unit id="7681a4690fb4606cc32a42f6b46c43ef315b2b15" translate="yes" xml:space="preserve">
          <source>10. Tab Completions</source>
          <target state="translated">10. 탭 완성</target>
        </trans-unit>
        <trans-unit id="87d74431c225abf39d48d973b8340e743cea77ec" translate="yes" xml:space="preserve">
          <source>11. Running multiple programs</source>
          <target state="translated">11. 여러 프로그램 실행</target>
        </trans-unit>
        <trans-unit id="18fb7ed35067a1c1fb3c5bc693f1e4851ee5bf4d" translate="yes" xml:space="preserve">
          <source>11. Variables</source>
          <target state="translated">11. 변수</target>
        </trans-unit>
        <trans-unit id="de4d8852e6243e2e42fa5542adbd8099f347d6bb" translate="yes" xml:space="preserve">
          <source>12. Exit Status</source>
          <target state="translated">12. 종료 상태</target>
        </trans-unit>
        <trans-unit id="3ed417bbb2957ff69e737973fce9515ba2cd1095" translate="yes" xml:space="preserve">
          <source>12. Initialization files</source>
          <target state="translated">12. 초기화 파일</target>
        </trans-unit>
        <trans-unit id="3bbe727e9c5348d4f3cd4edb9e9008efb057ad7d" translate="yes" xml:space="preserve">
          <source>121 is generally the exit status of fish commands if they were supplied with invalid arguments.</source>
          <target state="translated">121은 일반적으로 유효하지 않은 인수가 제공되는 경우 물고기 명령의 종료 상태입니다.</target>
        </trans-unit>
        <trans-unit id="2a0c147d7d88bf976d940ec34b60f1a924c98b0d" translate="yes" xml:space="preserve">
          <source>123 means that the command was not executed because the command name contained invalid characters.</source>
          <target state="translated">123은 명령 이름에 유효하지 않은 문자가 포함되어 명령이 실행되지 않았 음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="fae0fa2dfd772339a29a9e0387a44d8cb45f3483" translate="yes" xml:space="preserve">
          <source>124 means that the command was not executed because none of the wildcards in the command produced any matches.</source>
          <target state="translated">124는 명령에서 와일드 카드가 일치하지 않으므로 명령이 실행되지 않았 음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="fff17c994fe538d6ace5ddde5ab3d15a0d6495fe" translate="yes" xml:space="preserve">
          <source>125 means that while an executable with the specified name was located, the operating system could not actually execute the command.</source>
          <target state="translated">125는 지정된 이름의 실행 파일이 있지만 운영 체제가 실제로 명령을 실행할 수 없음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="0561f1dc764014e4c5998c07ac1c9141c8899e06" translate="yes" xml:space="preserve">
          <source>126 means that while a file with the specified name was located, it was not executable.</source>
          <target state="translated">126은 지정된 이름의 파일이 있지만 실행 가능하지 않음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="dbf3a27c54d322cd40838943093884466769b3cb" translate="yes" xml:space="preserve">
          <source>127 means that no function, builtin or command with the given name could be located.</source>
          <target state="translated">127은 주어진 이름의 함수, 내장 또는 명령을 찾을 수 없음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="5069d17fcc2a1dc73b38e51df2e6c80fe34e464a" translate="yes" xml:space="preserve">
          <source>13. Exports (Shell Variables)</source>
          <target state="translated">13. 수출 (쉘 변수)</target>
        </trans-unit>
        <trans-unit id="04c0115b1f4ddd17e82b801c3f67eafac9951c4b" translate="yes" xml:space="preserve">
          <source>13. Future feature flags</source>
          <target state="translated">13. 향후 기능 플래그</target>
        </trans-unit>
        <trans-unit id="106ecb41f2834a2a29557681d6f32d9842a06e05" translate="yes" xml:space="preserve">
          <source>14. Lists</source>
          <target state="translated">14. 목록</target>
        </trans-unit>
        <trans-unit id="5c6d09e29ff9389f51446885f7b8f3852a18e5fa" translate="yes" xml:space="preserve">
          <source>14. Other features</source>
          <target state="translated">14. 기타 특징</target>
        </trans-unit>
        <trans-unit id="78822933a4d6726bf3bd7e9f2ba4cb2622702715" translate="yes" xml:space="preserve">
          <source>15. Command Substitutions</source>
          <target state="translated">15. 명령 대체</target>
        </trans-unit>
        <trans-unit id="329c3cf8e33f350098935aed72cfb6391a642d0d" translate="yes" xml:space="preserve">
          <source>15. Further help and development</source>
          <target state="translated">15. 추가 도움과 개발</target>
        </trans-unit>
        <trans-unit id="1c8a70ff70ea78c6f30f8c8fb1147de3dc4acd28" translate="yes" xml:space="preserve">
          <source>16. Separating Commands (Semicolon)</source>
          <target state="translated">16. 명령 분리 (세미콜론)</target>
        </trans-unit>
        <trans-unit id="6dd51944c9228f899fcb1841517d00049a3055a7" translate="yes" xml:space="preserve">
          <source>17. Combiners (And, Or, Not)</source>
          <target state="translated">17. 결합기 (And, Or, Not)</target>
        </trans-unit>
        <trans-unit id="c06207b8710ca9ad0efafdae660d1987713f6e0d" translate="yes" xml:space="preserve">
          <source>18. Conditionals (If, Else, Switch)</source>
          <target state="translated">18. 조건부 (If, Else, Switch)</target>
        </trans-unit>
        <trans-unit id="6daa5d2c934c3554152d3456a48c8e13a7d9245a" translate="yes" xml:space="preserve">
          <source>19. Functions</source>
          <target state="translated">19. 기능</target>
        </trans-unit>
        <trans-unit id="85c193b6976f5521b772fe1ad29d0691b555cfbb" translate="yes" xml:space="preserve">
          <source>2. Getting started</source>
          <target state="translated">2. 시작</target>
        </trans-unit>
        <trans-unit id="18d25251743163a480371987356ec2f29a08dab1" translate="yes" xml:space="preserve">
          <source>2. Syntax overview</source>
          <target state="translated">2. 구문 개요</target>
        </trans-unit>
        <trans-unit id="ee041c30821084568dbfc50bb090432b66268687" translate="yes" xml:space="preserve">
          <source>20. Loops</source>
          <target state="translated">20. 루프</target>
        </trans-unit>
        <trans-unit id="86411eb3cae7abc8930169220a29c3db3c9c802b" translate="yes" xml:space="preserve">
          <source>21. Prompt</source>
          <target state="translated">21. 프롬프트</target>
        </trans-unit>
        <trans-unit id="be89488a0c8e3692191d4408004330a79262461a" translate="yes" xml:space="preserve">
          <source>22. $PATH</source>
          <target state="translated">22. $ PATH</target>
        </trans-unit>
        <trans-unit id="cc8e3a55c6bcbf66a86159bb612fa396d637db3c" translate="yes" xml:space="preserve">
          <source>23. Startup (Where&amp;#x27;s .bashrc?)</source>
          <target state="translated">23. 시작 (.bashrc는 어디에 있습니까?)</target>
        </trans-unit>
        <trans-unit id="50c3ce1a46da2af866dc1ef9e736109035d68369" translate="yes" xml:space="preserve">
          <source>24. Autoloading Functions</source>
          <target state="translated">24. 자동 로딩 기능</target>
        </trans-unit>
        <trans-unit id="e51c3a82db4ede291cc3acd14197878182050d98" translate="yes" xml:space="preserve">
          <source>25. Universal Variables</source>
          <target state="translated">25. 범용 변수</target>
        </trans-unit>
        <trans-unit id="0dffbe19ca650fa6117985032cdbb0b88bc79c0a" translate="yes" xml:space="preserve">
          <source>26. Switching to fish?</source>
          <target state="translated">26. 물고기로 바꾸는가?</target>
        </trans-unit>
        <trans-unit id="43f07506bd203a0f33c3bc1094f3127fcd1a55d9" translate="yes" xml:space="preserve">
          <source>27. Ready for more?</source>
          <target state="translated">27. 더 준비가 되셨습니까?</target>
        </trans-unit>
        <trans-unit id="7ab1667863ec0fbd298860a797c7a0369def3080" translate="yes" xml:space="preserve">
          <source>3. Help</source>
          <target state="translated">3. 도움</target>
        </trans-unit>
        <trans-unit id="c90a67af71155c62687a3cd53fc8539c17d6ae32" translate="yes" xml:space="preserve">
          <source>3. Learning fish</source>
          <target state="translated">3. 물고기 배우기</target>
        </trans-unit>
        <trans-unit id="7e8d4116400873d5e85436fc6dd954374e494de1" translate="yes" xml:space="preserve">
          <source>4. Autosuggestions</source>
          <target state="translated">4. 자동 제안</target>
        </trans-unit>
        <trans-unit id="bd175fe63395e66837f9f3f159539c0c42bd91c7" translate="yes" xml:space="preserve">
          <source>4. Running Commands</source>
          <target state="translated">4. 명령 실행</target>
        </trans-unit>
        <trans-unit id="15566dc92d12b8d79432a656393c9a90ea9d5a07" translate="yes" xml:space="preserve">
          <source>5. Getting Help</source>
          <target state="translated">5. 도움 받기</target>
        </trans-unit>
        <trans-unit id="fdbfd89ff22ae995764c2bb7580457cada52d1ab" translate="yes" xml:space="preserve">
          <source>5. Tab completion</source>
          <target state="translated">5. 탭 완성</target>
        </trans-unit>
        <trans-unit id="0e49673962b177e7bdd03522f2e9082a0432e609" translate="yes" xml:space="preserve">
          <source>6. Parameter expansion (Globbing)</source>
          <target state="translated">6. 파라미터 확장 (Globbing)</target>
        </trans-unit>
        <trans-unit id="5444a605bbd827344a4f1d85e1da6c810bc02893" translate="yes" xml:space="preserve">
          <source>6. Syntax Highlighting</source>
          <target state="translated">6. 구문 강조</target>
        </trans-unit>
        <trans-unit id="1a6c93bc8ffa5e0b6bb660f83ed9c35e9141821f" translate="yes" xml:space="preserve">
          <source>7. Shell variable and function names</source>
          <target state="translated">7. 쉘 변수 및 함수 이름</target>
        </trans-unit>
        <trans-unit id="142efe57d206a245fbd2577ea3832ab67e73ad9e" translate="yes" xml:space="preserve">
          <source>7. Wildcards</source>
          <target state="translated">7. 와일드 카드</target>
        </trans-unit>
        <trans-unit id="4e5ee173e552fc8627065d510be03a54889fdfd5" translate="yes" xml:space="preserve">
          <source>8. Pipes and Redirections</source>
          <target state="translated">8. 파이프 및 리디렉션</target>
        </trans-unit>
        <trans-unit id="bff15ce7b005a277a3f0460cb6fdb8a4198e4de0" translate="yes" xml:space="preserve">
          <source>8. Shell variables</source>
          <target state="translated">8. 쉘 변수</target>
        </trans-unit>
        <trans-unit id="ffc6dabb88bb72cc10fbb3c3a4eb9acc8d0d5224" translate="yes" xml:space="preserve">
          <source>9. Autosuggestions</source>
          <target state="translated">9. 자동 제안</target>
        </trans-unit>
        <trans-unit id="98d18c141a69d81b7eda98b6f9b2450e3181fbc2" translate="yes" xml:space="preserve">
          <source>9. Builtin commands</source>
          <target state="translated">9. 내장 명령</target>
        </trans-unit>
        <trans-unit id="8beeda3546f3b6009e6452b7772f53401604bc45" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#tut_combiners&quot;&gt;Combiners&lt;/a&gt; can also be used to make more complex conditions, like</source>
          <target state="translated">&lt;a href=&quot;#tut_combiners&quot;&gt;결합기&lt;/a&gt; 는 또한 다음과 같이 더 복잡한 조건을 만드는 데 사용될 수 있습니다</target>
        </trans-unit>
        <trans-unit id="806acfd75575a66c4ca8d5f477286c5b3bf5e1fe" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#variables-universal&quot;&gt;Universal variables&lt;/a&gt; are stored in the file &lt;code&gt;.config/fish/fishd.MACHINE_ID&lt;/code&gt;, where MACHINE_ID is typically your MAC address. Do not edit this file directly, as your edits may be overwritten. Edit them through fish scripts or by using fish interactively instead.</source>
          <target state="translated">&lt;a href=&quot;#variables-universal&quot;&gt;범용 변수&lt;/a&gt; 는 &lt;code&gt;.config/fish/fishd.MACHINE_ID&lt;/code&gt; 파일에 저장됩니다. 여기서 MACHINE_ID는 일반적으로 MAC 주소입니다. 편집 한 내용을 덮어 쓸 수 있으므로이 파일을 직접 편집하지 마십시오. 물고기 스크립트를 통해 또는 대신 대화식으로 물고기를 사용하여 편집하십시오.</target>
        </trans-unit>
        <trans-unit id="1ac2b7dcd58a012b2820693b1315516d5b45a8e9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&amp;larr;&lt;/b&gt; (or &lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;B&lt;/b&gt;) and &lt;b&gt;&amp;rarr;&lt;/b&gt; (or &lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;F&lt;/b&gt;) move the cursor left or right by one character. If the cursor is already at the end of the line, and an autosuggestion is available, the &lt;b&gt;&amp;rarr;&lt;/b&gt; key and the &lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;F&lt;/b&gt; combination accept the suggestion.</source>
          <target state="translated">&lt;b&gt;&amp;larr;&lt;/b&gt; (또는 &lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;B&lt;/b&gt; ) 및 &lt;b&gt;&amp;rarr;&lt;/b&gt; (또는 &lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;F&lt;/b&gt; )는 커서를 한 문자 씩 왼쪽 또는 오른쪽으로 이동합니다. 커서가 줄의 끝에 이미, 그리고 자기 암시를 사용할 수있는 경우 &lt;b&gt;&amp;rarr;의&lt;/b&gt; 키와 &lt;em&gt;컨트롤&lt;/em&gt; - &lt;b&gt;F의&lt;/b&gt; 조합은 제안을 받아 들인다.</target>
        </trans-unit>
        <trans-unit id="eec4adc855d844da8c4d5e4a1f8ad5a4cb1d7bc4" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&amp;larr;&lt;/b&gt; and &lt;b&gt;&amp;rarr;&lt;/b&gt; extend the selection backward/forward by one character.</source>
          <target state="translated">&lt;b&gt;&amp;larr;&lt;/b&gt; 및 &lt;b&gt;&amp;rarr;&lt;/b&gt; 선택을 한 문자 씩 앞뒤로 확장합니다.</target>
        </trans-unit>
        <trans-unit id="ab36d9fad74917cb021e127b3357a04cdddf5aee" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&amp;uarr;&lt;/b&gt; and &lt;b&gt;&amp;darr;&lt;/b&gt; (or &lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;P&lt;/b&gt; and &lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;N&lt;/b&gt; for emacs aficionados) search the command history for the previous/next command containing the string that was specified on the commandline before the search was started. If the commandline was empty when the search started, all commands match. See the &lt;a href=&quot;#history&quot;&gt;history&lt;/a&gt; section for more information on history searching.</source>
          <target state="translated">&lt;b&gt;&amp;uarr;&lt;/b&gt; 및 &lt;b&gt;&amp;darr;&lt;/b&gt; (또는 emacs aficionados의 경우 &lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;P&lt;/b&gt; 및 &lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;N&lt;/b&gt; )는 검색이 시작되기 전에 명령 행에 지정된 문자열을 포함하는 이전 / 다음 명령의 명령 히스토리를 검색합니다. 검색을 시작할 때 명령 줄이 비어 있으면 모든 명령이 일치합니다. 히스토리 검색에 대한 자세한 정보 는 &lt;a href=&quot;#history&quot;&gt;히스토리&lt;/a&gt; 섹션을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="006210777d36c4e66b226397f87f98f871001fd3" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;0&lt;/b&gt; (zero) moves the cursor to beginning of line (remaining in command mode).</source>
          <target state="translated">&lt;b&gt;0&lt;/b&gt; 은 커서를 줄의 시작 부분으로 이동합니다 (명령 모드에 남아 있음).</target>
        </trans-unit>
        <trans-unit id="70c3e2e079bfde4a8b70698300c496a18114461a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Backspace&lt;/b&gt; moves the cursor left.</source>
          <target state="translated">&lt;b&gt;백 스페이스&lt;/b&gt; 는 커서를 왼쪽으로 이동합니다.</target>
        </trans-unit>
        <trans-unit id="40fd3307ef1178120c8ecaca309c95f35877eddd" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Backspace&lt;/b&gt; removes one character to the left.</source>
          <target state="translated">&lt;b&gt;백 스페이스&lt;/b&gt; 는 한 문자를 왼쪽으로 제거합니다.</target>
        </trans-unit>
        <trans-unit id="605fd3500156dad2133a13a6a01fd70ad484358f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Delete&lt;/b&gt; and &lt;b&gt;Backspace&lt;/b&gt; removes one character forwards or backwards respectively.</source>
          <target state="translated">&lt;b&gt;삭제&lt;/b&gt; 및 &lt;b&gt;백 스페이스&lt;/b&gt; 는 한 문자를 각각 앞뒤로 제거합니다.</target>
        </trans-unit>
        <trans-unit id="9a70af14fdf910efc533761e48baff8fcc60831a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;End&lt;/b&gt; or &lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;E&lt;/b&gt; moves to the end of line. If the cursor is already at the end of the line, and an autosuggestion is available, &lt;b&gt;End&lt;/b&gt; or &lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;E&lt;/b&gt; accepts the autosuggestion.</source>
          <target state="translated">&lt;b&gt;종료&lt;/b&gt; 또는 &lt;em&gt;제어&lt;/em&gt; - &lt;b&gt;E의&lt;/b&gt; 라인의 끝으로 이동합니다. 커서가 이미 줄 끝에 있고 자동 제안을 사용할 수있는 경우 &lt;b&gt;End&lt;/b&gt; 또는 &lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;E&lt;/b&gt; 는 자동 제안을 수락합니다.</target>
        </trans-unit>
        <trans-unit id="77c336004eabb259e7091f1fe5a682cf66f54142" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Escape&lt;/b&gt; and &lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;C&lt;/b&gt; enter &lt;a href=&quot;#vi-mode-command&quot;&gt;command mode&lt;/a&gt;.</source>
          <target state="translated">&lt;b&gt;이스케이프&lt;/b&gt; 및 &lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;C는 &lt;/b&gt;&lt;a href=&quot;#vi-mode-command&quot;&gt;명령 모드로&lt;/a&gt; 들어 갑니다 .</target>
        </trans-unit>
        <trans-unit id="46be837ceaced62457025886071ff6a567f114de" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Escape&lt;/b&gt; enters &lt;a href=&quot;#vi-mode-command&quot;&gt;command mode&lt;/a&gt;.</source>
          <target state="translated">&lt;b&gt;이스케이프 &lt;/b&gt;&lt;a href=&quot;#vi-mode-command&quot;&gt;명령 모드&lt;/a&gt; 로 들어갑니다 .</target>
        </trans-unit>
        <trans-unit id="984586e704e53240ea81090ad618e36359b7e19f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Home&lt;/b&gt; or &lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;A&lt;/b&gt; moves the cursor to the beginning of the line.</source>
          <target state="translated">&lt;b&gt;Home&lt;/b&gt; 또는 &lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;A&lt;/b&gt; 는 커서를 줄의 시작 부분으로 이동합니다.</target>
        </trans-unit>
        <trans-unit id="9c66dd8bc88cc38649572548fa083058e8e63f51" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Tab&lt;/b&gt;&lt;a href=&quot;#completion&quot;&gt;completes&lt;/a&gt; the current token. &lt;em&gt;Shift&lt;/em&gt;-&lt;b&gt; Tab&lt;/b&gt; completes the current token and starts the pager's search mode.</source>
          <target state="translated">&lt;b&gt;탭&lt;/b&gt; 은 현재 토큰을 &lt;a href=&quot;#completion&quot;&gt;완성&lt;/a&gt; 합니다. &lt;em&gt;Shift&lt;/em&gt; - &lt;b&gt;Tab&lt;/b&gt; 은 현재 토큰을 완성하고 호출기의 검색 모드를 시작합니다.</target>
        </trans-unit>
        <trans-unit id="5e1d24a4666c037b5c8646789a1bed11e0a9ff52" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;[&lt;/b&gt; and &lt;b&gt;]&lt;/b&gt; search the command history for the previous/next token containing the token under the cursor before the search was started. See the &lt;a href=&quot;#history&quot;&gt;history&lt;/a&gt; section for more information on history searching.</source>
          <target state="translated">&lt;b&gt;[&lt;/b&gt; 및 &lt;b&gt;]&lt;/b&gt; 는 검색이 시작되기 전에 커서 아래에 토큰이 포함 된 이전 / 다음 토큰의 명령 기록을 검색합니다. 히스토리 검색에 대한 자세한 정보 는 &lt;a href=&quot;#history&quot;&gt;히스토리&lt;/a&gt; 섹션을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="f8720d73a57333adcbd6603ebb709a7e8cdccb90" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;a&lt;/b&gt; enters &lt;a href=&quot;#vi-mode-insert&quot;&gt;insert mode&lt;/a&gt; after the current cursor position.</source>
          <target state="translated">&lt;b&gt;a&lt;/b&gt; 는 현재 커서 위치 다음에 &lt;a href=&quot;#vi-mode-insert&quot;&gt;삽입 모드 &lt;/a&gt;&lt;b&gt;로&lt;/b&gt; 들어갑니다 .</target>
        </trans-unit>
        <trans-unit id="a370cea3411c21f6dd8701c9a41f89febf580700" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;argument&lt;/b&gt; a parameter given to a command</source>
          <target state="translated">&lt;b&gt;인수&lt;/b&gt; 는 명령에 주어진 매개 변수</target>
        </trans-unit>
        <trans-unit id="67a045f7269bcd0ec45296ef8943037baa32d906" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;b&lt;/b&gt; and &lt;b&gt;w&lt;/b&gt; extend the selection backward/forward by one word.</source>
          <target state="translated">&lt;b&gt;b&lt;/b&gt; 와 &lt;b&gt;w&lt;/b&gt; 는 선택을 한 단어 씩 앞뒤로 확장합니다.</target>
        </trans-unit>
        <trans-unit id="5a00c14325a9371634a71116c381d05f38047b79" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;builtin&lt;/b&gt; a command that is implemented in the shell. Builtins are commands that are so closely tied to the shell that it is impossible to implement them as external commands.</source>
          <target state="translated">&lt;b&gt;&lt;/b&gt;셸에서 구현되는 명령이 &lt;b&gt;내장&lt;/b&gt; 되어 있습니다. 내장은 셸에 너무 밀접하게 연결되어 외부 명령으로 구현할 수없는 명령입니다.</target>
        </trans-unit>
        <trans-unit id="5b2bba0daf9f3f5b3db3ad3b60ca6ba8a68d3286" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;command&lt;/b&gt; a program that the shell can run.</source>
          <target state="translated">&lt;b&gt;&lt;/b&gt;쉘이 실행할 수있는 프로그램을 &lt;b&gt;명령&lt;/b&gt; 하십시오.</target>
        </trans-unit>
        <trans-unit id="422523c6a60bcb5d18a66490109161153e55762d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;d&lt;/b&gt; and &lt;b&gt;x&lt;/b&gt; move the selection to the &lt;a href=&quot;#killring&quot;&gt;killring&lt;/a&gt; and enter &lt;a href=&quot;#vi-mode-command&quot;&gt;command mode&lt;/a&gt;.</source>
          <target state="translated">&lt;b&gt;d&lt;/b&gt; 와 &lt;b&gt;x&lt;/b&gt; 는 선택을 &lt;a href=&quot;#killring&quot;&gt;킬링으로&lt;/a&gt; 이동하고 &lt;a href=&quot;#vi-mode-command&quot;&gt;명령 모드로&lt;/a&gt; 들어 갑니다 .</target>
        </trans-unit>
        <trans-unit id="fc6a391dddd78663d18e52f19b77cb0603487b00" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;d&lt;/b&gt;&lt;b&gt;d&lt;/b&gt; deletes the current line and moves it to the &lt;a href=&quot;#killring&quot;&gt;killring&lt;/a&gt;.</source>
          <target state="translated">&lt;b&gt;d &lt;/b&gt;&lt;b&gt;d&lt;/b&gt; 현재 행을 삭제하고 &lt;a href=&quot;#killring&quot;&gt;killring으로 옮깁니다&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="2c3c75079a462b7af206a2c31cc779ced40e22e8" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;function&lt;/b&gt; a block of commands that can be called as if they were a single command. By using functions, it is possible to string together multiple smaller commands into one more advanced command.</source>
          <target state="translated">&lt;b&gt;&lt;/b&gt;마치 단일 명령 인 것처럼 호출 할 수있는 명령 블록을 &lt;b&gt;작동&lt;/b&gt; 시킵니다. 기능을 사용하면 여러 개의 작은 명령을 하나의 고급 명령으로 묶을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d401f7e62daa4fd7d0e5b1588d252092e8e26983" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;h&lt;/b&gt; moves the cursor left.</source>
          <target state="translated">&lt;b&gt;h&lt;/b&gt; 커서를 왼쪽으로 이동합니다.</target>
        </trans-unit>
        <trans-unit id="231ea65cb4c90d8b3ea88fe4ada526b1fcccb631" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;i&lt;/b&gt; enters &lt;a href=&quot;#vi-mode-insert&quot;&gt;insert mode&lt;/a&gt; at the current cursor position.</source>
          <target state="translated">&lt;b&gt;저는&lt;/b&gt; 입사 &lt;a href=&quot;#vi-mode-insert&quot;&gt;삽입 모드&lt;/a&gt; 현재 커서 위치에있다.</target>
        </trans-unit>
        <trans-unit id="da2fcea1bd8392d9b49916bb727201427fd412c0" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;job&lt;/b&gt; a running pipeline or command</source>
          <target state="translated">&lt;b&gt;&lt;/b&gt;실행중인 파이프 라인 또는 명령 &lt;b&gt;작업&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="6144e825c10011793a742a7841a5d8a873792605" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;l&lt;/b&gt; moves the cursor right.</source>
          <target state="translated">&lt;b&gt;l&lt;/b&gt; 커서를 오른쪽으로 움직입니다.</target>
        </trans-unit>
        <trans-unit id="a6ebb69e41c42369cb8fb5ef6c84fcd45b608b69" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;p&lt;/b&gt; pastes text from the &lt;a href=&quot;#killring&quot;&gt;killring&lt;/a&gt;.</source>
          <target state="translated">&lt;b&gt;p&lt;/b&gt; 는 &lt;a href=&quot;#killring&quot;&gt;킬링&lt;/a&gt; 에서 텍스트를 붙여 넣습니다 .</target>
        </trans-unit>
        <trans-unit id="ef6843daab3893df594cc19bf74f627f595e905e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;pipeline&lt;/b&gt; a set of commands stringed together so that the output of one command is the input of the next command</source>
          <target state="translated">&lt;b&gt;&lt;/b&gt;한 명령의 출력이 다음 명령의 입력이되도록 함께 문자열로 묶인 명령 세트를 &lt;b&gt;파이프 라인&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="9361323d44f35996b7cf911994082c3575f55649" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;redirection&lt;/b&gt; an operation that changes one of the input/output streams associated with a job</source>
          <target state="translated">&lt;b&gt;&lt;/b&gt;작업과 연관된 입력 / 출력 스트림 중 하나를 변경하는 조작 &lt;b&gt;재 지정&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="fc8c5cd774cd95d52cae0e99b7dc449a30256233" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;switch&lt;/b&gt; a special flag sent as an argument to a command that will alter the behavior of the command. A switch almost always begins with one or two hyphens.</source>
          <target state="translated">&lt;b&gt;&lt;/b&gt;명령 동작을 변경하는 명령으로 인수로 전송 된 특수 플래그를 &lt;b&gt;전환&lt;/b&gt; 합니다. 스위치는 거의 항상 하나 또는 두 개의 하이픈으로 시작합니다.</target>
        </trans-unit>
        <trans-unit id="ce0a396b1268aa8592cfbf7ad40768b4a2cf96ee" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;u&lt;/b&gt; search history backwards.</source>
          <target state="translated">&lt;b&gt;u&lt;/b&gt; 검색 기록을 거꾸로합니다.</target>
        </trans-unit>
        <trans-unit id="62b140a31b4dd842f587a339c973fb84cb89b9ee" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;v&lt;/b&gt; enters &lt;a href=&quot;#vi-mode-visual&quot;&gt;visual mode&lt;/a&gt; at the current cursor position.</source>
          <target state="translated">&lt;b&gt;v&lt;/b&gt; 현재 커서 위치에서 &lt;a href=&quot;#vi-mode-visual&quot;&gt;비주얼 모드&lt;/a&gt; 로 들어갑니다 .</target>
        </trans-unit>
        <trans-unit id="46db239874b5d3423a2cb772c587c90739433a27" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;! EXPRESSION&lt;/code&gt; returns true if &lt;code&gt;EXPRESSION&lt;/code&gt; is false, and false if &lt;code&gt;EXPRESSION&lt;/code&gt; is true.</source>
          <target state="translated">&lt;code&gt;! EXPRESSION&lt;/code&gt; 이 false 이면 &lt;code&gt;EXPRESSION&lt;/code&gt; 이 true를, &lt;code&gt;EXPRESSION&lt;/code&gt; 이 true이면 false를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="fbbf1691c14aa157618e775b202f5ac70dcff316" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;#-max&lt;/code&gt; means that flags matching the regex &quot;^--?\d+$&quot; are valid. When seen they are assigned to the variable &lt;code&gt;_flag_max&lt;/code&gt;. This allows any valid positive or negative integer to be specified by prefixing it with a single &quot;-&quot;. Many commands support this idiom. For example &lt;code&gt;head -3 /a/file&lt;/code&gt; to emit only the first three lines of /a/file.</source>
          <target state="translated">&lt;code&gt;#-max&lt;/code&gt; 는 정규식 &quot;^-? \ d + $&quot;와 일치하는 플래그가 유효 함을 의미합니다. &lt;code&gt;_flag_max&lt;/code&gt; 변수 _flag_max에 할당되어 있습니다. 이를 통해 단일 &quot;-&quot;접두어를 사용하여 유효한 양수 또는 음수를 지정할 수 있습니다. 많은 명령이이 관용구를 지원합니다. 예를 들어 &lt;code&gt;head -3 /a/file&lt;/code&gt; 은 / a / file 의 처음 세 줄만 내 보냅니다.</target>
        </trans-unit>
        <trans-unit id="3b85a7cc93d6e084f05ce49cb793f167aff8ad7d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$PATH&lt;/code&gt; is an environment variable containing the directories in which &lt;code&gt;fish&lt;/code&gt; searches for commands. Unlike other shells, $PATH is a &lt;a href=&quot;#tut_lists&quot;&gt;list&lt;/a&gt;, not a colon-delimited string.</source>
          <target state="translated">&lt;code&gt;$PATH&lt;/code&gt; 는 &lt;code&gt;fish&lt;/code&gt; 가 명령을 검색 하는 디렉토리를 포함하는 환경 변수 입니다. 다른 쉘과 달리 $ PATH는 콜론으로 구분 된 문자열이 아닌 &lt;a href=&quot;#tut_lists&quot;&gt;list&lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="1c3658540efb2c1be8fa547b1e32c76c511cd354" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$__fish_config_dir/conf.d&lt;/code&gt; (by default, &lt;code&gt;~/.config/fish/conf.d/&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;$__fish_config_dir/conf.d&lt;/code&gt; (기본적으로 &lt;code&gt;~/.config/fish/conf.d/&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="c62707b7c2c535405aadf898f636f5e27bc1699f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$__fish_sysconf_dir/conf.d&lt;/code&gt; (by default, &lt;code&gt;/etc/fish/conf.d&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;$__fish_sysconf_dir/conf.d&lt;/code&gt; (기본적으로 &lt;code&gt;/etc/fish/conf.d&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="2e5fc64164a639f303c697307b68832a05b78354" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$n&lt;/code&gt; is a reference from the replacement expression to a group in the match expression.</source>
          <target state="translated">&lt;code&gt;$n&lt;/code&gt; 은 대체 표현식에서 일치 표현식의 그룹에 대한 참조입니다.</target>
        </trans-unit>
        <trans-unit id="0b94095f7d2bcd4271aba839be28faccba894a86" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;%%&lt;/code&gt; signifies a literal &quot;%&quot;.</source>
          <target state="translated">&lt;code&gt;%%&lt;/code&gt; 는 리터럴 &quot;%&quot;를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="23d11882c5e4c3a189432b8f1ff0a090b3459ac9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;%&lt;/code&gt; for modulo.</source>
          <target state="translated">&lt;code&gt;%&lt;/code&gt; 모듈로에 대한 % .</target>
        </trans-unit>
        <trans-unit id="b531b94db8a1881f8d8258fb143c663bcef5c942" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;%b&lt;/code&gt;: As a string, interpreting backslash escapes, except that octal escapes are of the form \0 or \0ooo.</source>
          <target state="translated">&lt;code&gt;%b&lt;/code&gt; : 8 진 이스케이프가 \ 0 또는 \ 0ooo 형식 인 것을 제외하고 백 슬래시 이스케이프를 해석하는 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="d40db559addb2ba1478cff576f906449a7f7f850" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;%d&lt;/code&gt;: Argument will be used as decimal integer (signed or unsigned)</source>
          <target state="translated">&lt;code&gt;%d&lt;/code&gt; : 인수는 십진 정수로 사용됩니다 (부호 또는 부호 없음)</target>
        </trans-unit>
        <trans-unit id="2daacbfd54374f2e4dcb8cddd45378fa4f3afe2f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;%e&lt;/code&gt; or &lt;code&gt;%E&lt;/code&gt;: A floating-point number in scientific (XXXeYY) notation</source>
          <target state="translated">&lt;code&gt;%e&lt;/code&gt; 또는 &lt;code&gt;%E&lt;/code&gt; : 과학 (XXXeYY) 표기법의 부동 소수점 숫자</target>
        </trans-unit>
        <trans-unit id="1b4f7064a3656ce858a71cb74f5fa46889be08f3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;%f&lt;/code&gt;, &lt;code&gt;%g&lt;/code&gt; or &lt;code&gt;%G&lt;/code&gt;: A floating-point number</source>
          <target state="translated">&lt;code&gt;%f&lt;/code&gt; , &lt;code&gt;%g&lt;/code&gt; 또는 &lt;code&gt;%G&lt;/code&gt; : 부동 소수점 숫자</target>
        </trans-unit>
        <trans-unit id="87e7402e8326a173814d30481505cfed92d50943" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;%i&lt;/code&gt;: Argument will be used as a signed integer</source>
          <target state="translated">&lt;code&gt;%i&lt;/code&gt; : 인수는 부호있는 정수로 사용됩니다</target>
        </trans-unit>
        <trans-unit id="09e436d31575a14aba97f6e3421179780d36f990" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;%o&lt;/code&gt;: An octal unsigned integer</source>
          <target state="translated">&lt;code&gt;%o&lt;/code&gt; : 부호없는 8 진수 정수</target>
        </trans-unit>
        <trans-unit id="39f0b49371337597e3d850d5224e4556e4b0aeaa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;%s&lt;/code&gt;: A string</source>
          <target state="translated">&lt;code&gt;%s&lt;/code&gt; : 문자열</target>
        </trans-unit>
        <trans-unit id="26d8892aeeda64089baa67f9a24e11be6621d973" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;%u&lt;/code&gt;: An unsigned decimal integer</source>
          <target state="translated">&lt;code&gt;%u&lt;/code&gt; : 부호없는 십진 정수</target>
        </trans-unit>
        <trans-unit id="365ba2c17f6e4cbbba7946664bd4d911c538c22a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;%x&lt;/code&gt; or &lt;code&gt;%X&lt;/code&gt;: An unsigned hexadecimal integer</source>
          <target state="translated">&lt;code&gt;%x&lt;/code&gt; 또는 &lt;code&gt;%X&lt;/code&gt; : 부호없는 16 진수 정수</target>
        </trans-unit>
        <trans-unit id="9ee023234843cc6d0c14810f9797e91933e71a46" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;( EXPRESSION )&lt;/code&gt; returns the value of &lt;code&gt;EXPRESSION&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;( EXPRESSION )&lt;/code&gt; 의 값을 반환하는 &lt;code&gt;EXPRESSION&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f727cd1560afa11414f2a5a6164ae4676009db96" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;(...)&lt;/code&gt; is a capturing group</source>
          <target state="translated">&lt;code&gt;(...)&lt;/code&gt; 는 캡처 그룹입니다</target>
        </trans-unit>
        <trans-unit id="223792c605b71f3b13397604d45060f76789c2ef" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;(&lt;/code&gt; and &lt;code&gt;)&lt;/code&gt; for grouping.</source>
          <target state="translated">&lt;code&gt;(&lt;/code&gt; 및 &lt;code&gt;)&lt;/code&gt; 를 그룹화합니다.</target>
        </trans-unit>
        <trans-unit id="63e70ae3d58194b627fe1a1e8e2ca9a0792daf7a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;(?:...)&lt;/code&gt; is a non-capturing group</source>
          <target state="translated">&lt;code&gt;(?:...)&lt;/code&gt; 는 비 캡처 그룹입니다.</target>
        </trans-unit>
        <trans-unit id="27cc7f7e4b8d53fd132e362fe337554e71640189" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;**&lt;/code&gt; matches any files and directories in the current directory and all of its subdirectories.</source>
          <target state="translated">&lt;code&gt;**&lt;/code&gt; 는 현재 디렉토리 및 모든 서브 디렉토리의 파일 및 디렉토리와 일치합니다.</target>
        </trans-unit>
        <trans-unit id="1699f23e7af9e9207c7f4162362689d7a8ff2525" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;**&lt;/code&gt; matches any string of characters. This includes matching an empty string. The matched string may include the &lt;code&gt;/&lt;/code&gt; character; that is, it recurses into subdirectories. Note that augmenting this wildcard with other strings will not match files in the current working directory (&lt;code&gt;$PWD&lt;/code&gt;) if you separate the strings with a slash (&quot;/&quot;). This is unlike other shells such as zsh. For example, &lt;code&gt;**\/*.fish&lt;/code&gt; in zsh will match &lt;code&gt;.fish&lt;/code&gt; files in the PWD but in fish will only match such files in a subdirectory. In fish you should type &lt;code&gt;**.fish&lt;/code&gt; to match files in the PWD as well as subdirectories.</source>
          <target state="translated">&lt;code&gt;**&lt;/code&gt; 는 모든 문자열과 일치합니다. 여기에는 빈 문자열 일치가 포함됩니다. 일치하는 문자열은 &lt;code&gt;/&lt;/code&gt; 문자를 포함 할 수 있습니다 . 즉, 서브 디렉토리로 되풀이됩니다. 이 와일드 카드를 다른 문자열로 기능 보강 하면 문자열을 슬래시 ( &quot;/&quot;)로 구분하면 현재 작업 디렉토리 ( &lt;code&gt;$PWD&lt;/code&gt; )의 파일과 일치하지 않습니다 . 이것은 zsh와 같은 다른 쉘과는 다릅니다. 예를 들어, zsh의 &lt;code&gt;**\/*.fish&lt;/code&gt; 는 PWD의 &lt;code&gt;.fish&lt;/code&gt; 파일 과 일치 하지만 fish에서는 하위 디렉토리의 해당 파일과 만 일치합니다. 물고기에서는 PWD 및 하위 디렉토리의 파일과 일치하도록 &lt;code&gt;**.fish&lt;/code&gt; 를 입력해야합니다 .</target>
        </trans-unit>
        <trans-unit id="0906ba373108194515b71314d7314b0e1c0dbda4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;*&lt;/code&gt; can match any string of characters not containing '/'. This includes matching an empty string.</source>
          <target state="translated">&lt;code&gt;*&lt;/code&gt; 는 '/'를 포함하지 않는 모든 문자열과 일치 할 수 있습니다. 여기에는 빈 문자열 일치가 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="37c023d25e670b10a687c0f04d189f7dc1b04e52" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;*&lt;/code&gt; for multiplication, &lt;code&gt;/&lt;/code&gt; for division.</source>
          <target state="translated">&lt;code&gt;*&lt;/code&gt; 곱하기, &lt;code&gt;/&lt;/code&gt; 나누기.</target>
        </trans-unit>
        <trans-unit id="81fba7eefa3e36b3cbffeab875069115bc702387" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;*&lt;/code&gt; refers to 0 or more repetitions of the previous expression</source>
          <target state="translated">&lt;code&gt;*&lt;/code&gt; 이전 식의 0 번 이상의 반복을 나타냄</target>
        </trans-unit>
        <trans-unit id="f385e65b9176aa8a6ca6cd9d5b2f1bdd9f27fe65" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;+&lt;/code&gt; 1 or more</source>
          <target state="translated">&lt;code&gt;+&lt;/code&gt; 1 이상</target>
        </trans-unit>
        <trans-unit id="3fe13a37eae52bd7649108d0145b7e339ee6a6e7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;+&lt;/code&gt; for addition and &lt;code&gt;-&lt;/code&gt; for subtraction.</source>
          <target state="translated">&lt;code&gt;+&lt;/code&gt; 추가 및 대한 &lt;code&gt;-&lt;/code&gt; 뺄셈합니다.</target>
        </trans-unit>
        <trans-unit id="22a8af9ea25122ce490cd879c7e6a0485f64e8b2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-&amp;lt;number&amp;gt;&lt;/code&gt;&lt;code&gt;-n &amp;lt;number&amp;gt;&lt;/code&gt; or &lt;code&gt;--max=&amp;lt;number&amp;gt;&lt;/code&gt; limits the matched history items to the first &quot;n&quot; matching entries. This is only valid for &lt;code&gt;history search&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;-&amp;lt;number&amp;gt;&lt;/code&gt; &lt;code&gt;-n &amp;lt;number&amp;gt;&lt;/code&gt; 또는 &lt;code&gt;--max=&amp;lt;number&amp;gt;&lt;/code&gt; 는 일치하는 기록 항목을 첫 번째 &quot;n&quot;일치 항목으로 제한합니다. &lt;code&gt;history search&lt;/code&gt; 에만 유효합니다 .</target>
        </trans-unit>
        <trans-unit id="c5f49f59433696832e49367b7ce69fae3480a8f6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;--ansi&lt;/code&gt; colorizes the output using ANSI escape sequences, appropriate for the current $TERM, using the colors defined in the environment (such as &lt;code&gt;$fish_color_command&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;--ansi&lt;/code&gt; 는 환경에 정의 된 색상 (예 : &lt;code&gt;$fish_color_command&lt;/code&gt; )을 사용하여 현재 $ TERM에 적합한 ANSI 이스케이프 시퀀스를 사용하여 출력을 채색합니다 .</target>
        </trans-unit>
        <trans-unit id="3aa6b25c41452e29553bd2be8424a15696112b2a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;--dump-parse-tree&lt;/code&gt; dumps information about the parsed statements to stderr. This is likely to be of interest only to people working on the fish source code.</source>
          <target state="translated">&lt;code&gt;--dump-parse-tree&lt;/code&gt; 는 구문 분석 된 명령문에 대한 정보를 stderr에 덤프합니다. 이것은 피쉬 소스 코드를 다루는 사람들에게만 관심이있을 것입니다.</target>
        </trans-unit>
        <trans-unit id="5fa51f89fbcce9db82ce244faef116eeea00adf3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;--html&lt;/code&gt; outputs HTML, which supports syntax highlighting if the appropriate CSS is defined. The CSS class names are the same as the variable names, such as &lt;code&gt;fish_color_command&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;--html&lt;/code&gt; 은 적절한 CSS가 정의 된 경우 구문 강조를 지원하는 HTML을 출력합니다. CSS 클래스 이름은 변수 이름과 같습니다 (예 : &lt;code&gt;fish_color_command&lt;/code&gt; ) .</target>
        </trans-unit>
        <trans-unit id="47006ae21b129811c700a48a8dd1a7bfe52ba37e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;--long-only&lt;/code&gt; means the option spec being defined will only allow the long flag name to be used. The short flag name must still be defined (i.e., &lt;code&gt;--short&lt;/code&gt; must be specified) but it cannot be used when parsing args using this option spec.</source>
          <target state="translated">&lt;code&gt;--long-only&lt;/code&gt; 는 정의중인 옵션 사양이 long 플래그 이름 만 사용할 수 있음을 의미합니다. 짧은 플래그 이름은 여전히 ​​정의되어 있어야하지만 (즉, &lt;code&gt;--short&lt;/code&gt; 를 지정해야 함)이 옵션 스펙을 사용하여 인수를 구문 분석 할 때 사용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="8705328b4d90680bbe72237e569f10b4e4db8bbd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;--multiple-vals&lt;/code&gt; means the option being defined requires a value each time it is seen. Each instance is stored. This means the resulting flag variable created by &lt;code&gt;argparse&lt;/code&gt; will have one element for each instance of this option in the args.</source>
          <target state="translated">&lt;code&gt;--multiple-vals&lt;/code&gt; 는 정의 될 옵션이 표시 될 때마다 값을 요구함을 의미합니다. 각 인스턴스가 저장됩니다. 이는 &lt;code&gt;argparse&lt;/code&gt; 에 의해 생성 된 결과 플래그 변수 가 args에서이 옵션의 각 인스턴스에 대해 하나의 요소를 갖음 을 의미합니다 .</target>
        </trans-unit>
        <trans-unit id="7d7d2c2f45f8450597f301169bbd25ef23b8c87e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;--preset&lt;/code&gt; and &lt;code&gt;--user&lt;/code&gt; specify if bind should operate on user or preset bindings. User bindings take precedence over preset bindings when fish looks up mappings. By default, all &lt;code&gt;bind&lt;/code&gt; invocations work on the &quot;user&quot; level except for listing, which will show both levels. All invocations except for inserting new bindings can operate on both levels at the same time. &lt;code&gt;--preset&lt;/code&gt; should only be used in full binding sets (like when working on &lt;code&gt;fish_vi_key_bindings&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;--preset&lt;/code&gt; 및 &lt;code&gt;--user&lt;/code&gt; 는 바인드가 사용자 또는 사전 설정 바인딩에서 작동해야하는지 여부를 지정합니다. 피쉬가 매핑을 찾을 때 사용자 바인딩이 사전 설정 바인딩보다 우선합니다. 기본적으로 모든 &lt;code&gt;bind&lt;/code&gt; 호출은 목록을 제외한 &quot;사용자&quot;수준에서 작동하며 두 수준이 모두 표시됩니다. 새 바인딩 삽입을 제외한 모든 호출은 두 레벨에서 동시에 작동 할 수 있습니다. &lt;code&gt;--preset&lt;/code&gt; 은 전체 바인딩 세트에서만 사용해야합니다 ( &lt;code&gt;fish_vi_key_bindings&lt;/code&gt; 작업시 ).</target>
        </trans-unit>
        <trans-unit id="b8ae0e78acf17f930184225a25b75dbcb6f4b9af" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;--style=regex&lt;/code&gt; escapes an input string for literal matching within a regex expression. The string is first converted to UTF-8 before being encoded.</source>
          <target state="translated">&lt;code&gt;--style=regex&lt;/code&gt; 는 정규식 내에서 리터럴 일치를 위해 입력 문자열을 이스케이프합니다. 문자열은 인코딩되기 전에 먼저 UTF-8로 변환됩니다.</target>
        </trans-unit>
        <trans-unit id="e65bb404cbd1624028b9f8ee5fbd0ec8cb5bfe09" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;--style=url&lt;/code&gt; ensures the string can be used as a URL by hex encoding any character which is not legal in a URL. The string is first converted to UTF-8 before being encoded.</source>
          <target state="translated">&lt;code&gt;--style=url&lt;/code&gt; 은 URL에서 유효하지 않은 문자를 16 진수로 인코딩하여 문자열을 URL로 사용할 수 있도록합니다. 문자열은 인코딩되기 전에 먼저 UTF-8로 변환됩니다.</target>
        </trans-unit>
        <trans-unit id="eb9da1d5ecc6d798eba6fc06df72ff51e5e165fd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;--style=var&lt;/code&gt; ensures the string can be used as a variable name by hex encoding any non-alphanumeric characters. The string is first converted to UTF-8 before being encoded.</source>
          <target state="translated">&lt;code&gt;--style=var&lt;/code&gt; 는 영숫자가 아닌 문자를 16 진수로 인코딩하여 문자열을 변수 이름으로 사용할 수 있도록합니다. 문자열은 인코딩되기 전에 먼저 UTF-8로 변환됩니다.</target>
        </trans-unit>
        <trans-unit id="4731e2e7ec3185a32125e79c8ade417f865e1462" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-A&lt;/code&gt; and &lt;code&gt;--authoritative&lt;/code&gt; no longer do anything and are silently ignored.</source>
          <target state="translated">&lt;code&gt;-A&lt;/code&gt; 및 &lt;code&gt;--authoritative&lt;/code&gt; 는 더 이상 아무것도하지 않으며 자동으로 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="787dc304805566c01a47bc50fdd52e787a6ee34d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-C&lt;/code&gt; or &lt;code&gt;--case-sensitive&lt;/code&gt; does a case-sensitive search. The default is case-insensitive. Note that prior to fish 2.4.0 the default was case-sensitive.</source>
          <target state="translated">&lt;code&gt;-C&lt;/code&gt; 또는 &lt;code&gt;--case-sensitive&lt;/code&gt; 는 대소 문자를 구분하여 검색합니다. 기본값은 대소 문자를 구분하지 않습니다. fish 2.4.0 이전의 기본값은 대소 문자를 구분했습니다.</target>
        </trans-unit>
        <trans-unit id="270762071d0d0cd9667e2814ce9516f907323783" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-C&lt;/code&gt; or &lt;code&gt;--cursor&lt;/code&gt; set or get the current cursor position, not the contents of the buffer. If no argument is given, the current cursor position is printed, otherwise the argument is interpreted as the new cursor position.</source>
          <target state="translated">&lt;code&gt;-C&lt;/code&gt; 또는 &lt;code&gt;--cursor&lt;/code&gt; 버퍼의 내용이 아닌 현재 커서 위치를 설정하거나 가져옵니다. 인수를 지정하지 않으면 현재 커서 위치가 인쇄되고, 그렇지 않으면 인수가 새 커서 위치로 해석됩니다.</target>
        </trans-unit>
        <trans-unit id="f86c2dd851bdadf49731503f62a001a48c820f6f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-C&lt;/code&gt; or &lt;code&gt;--do-complete&lt;/code&gt; with no argument makes complete try to find all possible completions for the current command line buffer. If the shell is not in interactive mode, an error is returned.</source>
          <target state="translated">&lt;code&gt;-C&lt;/code&gt; 인수없이 -C 또는 &lt;code&gt;--do-complete&lt;/code&gt; 는 현재 명령 행 버퍼에 대해 가능한 모든 완료를 찾으려고 시도합니다. 쉘이 대화식 모드가 아닌 경우 오류가 리턴됩니다.</target>
        </trans-unit>
        <trans-unit id="d1257a90ccc8826d044797e11ad1027b7c489a49" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-C&lt;/code&gt; or &lt;code&gt;--init-command=COMMANDS&lt;/code&gt; evaluate the specified commands after reading the configuration, before running the command specified by &lt;code&gt;-c&lt;/code&gt; or reading interactive input</source>
          <target state="translated">&lt;code&gt;-C&lt;/code&gt; 또는 &lt;code&gt;--init-command=COMMANDS&lt;/code&gt; 는 &lt;code&gt;-c&lt;/code&gt; 로 지정된 명령을 실행 하거나 대화식 입력을 읽기 전에 구성을 읽은 후 지정된 명령을 평가합니다.</target>
        </trans-unit>
        <trans-unit id="cde005567258cf32e945f94b81b14a4110474a47" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-CSTRING&lt;/code&gt; or &lt;code&gt;--do-complete=STRING&lt;/code&gt; makes complete try to find all possible completions for the specified string.</source>
          <target state="translated">&lt;code&gt;-CSTRING&lt;/code&gt; 또는 &lt;code&gt;--do-complete=STRING&lt;/code&gt; 은 지정된 문자열에 대해 가능한 모든 완료를 찾으려고합니다.</target>
        </trans-unit>
        <trans-unit id="61cffcf4ebe0947db0772ea1d7819eb74b2a633a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-D&lt;/code&gt; or &lt;code&gt;--debug-stack-frames=DEBUG_LEVEL&lt;/code&gt; specify how many stack frames to display when debug messages are written. The default is zero. A value of 3 or 4 is usually sufficient to gain insight into how a given debug call was reached but you can specify a value up to 128.</source>
          <target state="translated">&lt;code&gt;-D&lt;/code&gt; 또는 &lt;code&gt;--debug-stack-frames=DEBUG_LEVEL&lt;/code&gt; 디버그 메시지가 기록 될 때 표시 할 스택 프레임 수를 지정합니다. 기본값은 0입니다. 3 또는 4의 값은 일반적으로 주어진 디버그 호출에 도달 한 방법에 대한 통찰력을 얻는 데 충분하지만 최대 128 개의 값을 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6ee62d7b734c381573db2bedd60d5ed9e9631c90" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-D&lt;/code&gt; or &lt;code&gt;--details&lt;/code&gt; reports the path name where each function is defined or could be autoloaded, &lt;code&gt;stdin&lt;/code&gt; if the function was defined interactively or on the command line or by reading stdin, and &lt;code&gt;n/a&lt;/code&gt; if the function isn't available. If the &lt;code&gt;--verbose&lt;/code&gt; option is also specified then five lines are written:</source>
          <target state="translated">&lt;code&gt;-D&lt;/code&gt; 또는 &lt;code&gt;--details&lt;/code&gt; 는 각각의 기능을 정의하거나 자동으로 적재 할 수있는 경로 이름을보고 &lt;code&gt;stdin&lt;/code&gt; 을 함수를 대화 형으로 또는 명령 줄이나 표준 입력을 읽어 정의 된 경우, 그리고 &lt;code&gt;n/a&lt;/code&gt; 기능을 사용할 수없는 경우. 경우 &lt;code&gt;--verbose&lt;/code&gt; 옵션도 다음 지정된 다섯 줄이 기록됩니다</target>
        </trans-unit>
        <trans-unit id="5a18e126cfc5900c415cf3e601fd41b0abb06edc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-E&lt;/code&gt;, Disable interpretation of backslash escapes (default)</source>
          <target state="translated">&lt;code&gt;-E&lt;/code&gt; , 백 슬래시 이스케이프 해석 비활성화 (기본값)</target>
        </trans-unit>
        <trans-unit id="0049b7945091e04bb1ed8217b2bea406ee7b56e9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-F&lt;/code&gt; or &lt;code&gt;--fifo&lt;/code&gt; will cause psub to use a named pipe rather than a file. You should only use this if the command produces no more than 8 KiB of output. The limit on the amount of data a FIFO can buffer varies with the OS but is typically 8 KiB, 16 KiB or 64 KiB. If you use this option and the command on the left of the psub pipeline produces more output a deadlock is likely to occur.</source>
          <target state="translated">&lt;code&gt;-F&lt;/code&gt; 또는 &lt;code&gt;--fifo&lt;/code&gt; 는 psub 가 파일이 아닌 명명 된 파이프를 사용하게합니다. 명령이 8 KiB 이하의 출력을 생성하는 경우에만 사용해야합니다. FIFO가 버퍼링 할 수있는 데이터 양의 한계는 OS에 따라 다르지만 일반적으로 8 KiB, 16 KiB 또는 64 KiB입니다. 이 옵션을 사용하고 psub 파이프 라인의 왼쪽에있는 명령이 더 많은 출력을 생성하면 교착 상태가 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b22e459d124b9dccab2e8b6cc17d059433cd1f60" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-G FILE&lt;/code&gt; returns true if &lt;code&gt;FILE&lt;/code&gt; exists and has the same group ID as the current user.</source>
          <target state="translated">&lt;code&gt;-G FILE&lt;/code&gt; 은 &lt;code&gt;FILE&lt;/code&gt; 이 존재하고 현재 사용자와 동일한 그룹 ID를 갖는 경우 true를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="f10d2bc52e978a82259de5c09bbcd8efce21aa60" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-H&lt;/code&gt; or &lt;code&gt;--handlers&lt;/code&gt; will show all event handlers.</source>
          <target state="translated">&lt;code&gt;-H&lt;/code&gt; 또는 &lt;code&gt;--handlers&lt;/code&gt; 는 모든 이벤트 핸들러를 표시합니다.</target>
        </trans-unit>
        <trans-unit id="b34d9446b84b91e558ca658b2b00c2f2ec994692" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-H&lt;/code&gt; or &lt;code&gt;--hard&lt;/code&gt; sets hard resource limit</source>
          <target state="translated">&lt;code&gt;-H&lt;/code&gt; 또는 &lt;code&gt;--hard&lt;/code&gt; 는 하드 자원 제한을 설정합니다</target>
        </trans-unit>
        <trans-unit id="bd83cc9da6bfba520bce5594349b46ce9f31b63c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-K&lt;/code&gt; or &lt;code&gt;--key-names&lt;/code&gt; Display a list of available key names. Specifying &lt;code&gt;-a&lt;/code&gt; or &lt;code&gt;--all&lt;/code&gt; includes keys that don't have a known mapping</source>
          <target state="translated">&lt;code&gt;-K&lt;/code&gt; 또는 &lt;code&gt;--key-names&lt;/code&gt; 사용 가능한 키 이름 목록을 표시합니다. &lt;code&gt;-a&lt;/code&gt; 또는 &lt;code&gt;--all&lt;/code&gt; 을 지정 하면 알려진 맵핑이없는 키가 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="098d148471a1c1769d247e12fa439212046c965e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-L FILE&lt;/code&gt; returns true if &lt;code&gt;FILE&lt;/code&gt; is a symbolic link.</source>
          <target state="translated">&lt;code&gt;-L FILE&lt;/code&gt; 은 &lt;code&gt;FILE&lt;/code&gt; 이 기호 링크 인 경우 true를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="bd306f8c2abbc594fb7b8bdccf47e9f880ee9842" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-L&lt;/code&gt; or &lt;code&gt;--line&lt;/code&gt; print the line that the cursor is on, with the topmost line starting at 1</source>
          <target state="translated">&lt;code&gt;-L&lt;/code&gt; 또는 &lt;code&gt;--line&lt;/code&gt; 커서가있는 줄을 인쇄하고 맨 위 줄은 1부터 시작합니다</target>
        </trans-unit>
        <trans-unit id="3c39668997ca2fa27178ce32e43413683994246b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-L&lt;/code&gt; or &lt;code&gt;--line&lt;/code&gt; reads each line into successive variables, and stops after each variable has been filled. This cannot be combined with the &lt;code&gt;--delimiter&lt;/code&gt; option.</source>
          <target state="translated">&lt;code&gt;-L&lt;/code&gt; 또는 &lt;code&gt;--line&lt;/code&gt; 은 각 행을 연속 변수로 읽고 각 변수가 채워진 후 중지합니다. &lt;code&gt;--delimiter&lt;/code&gt; 옵션 과 함께 사용할 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="96f87b2f1c7e39d3a955d0bef202a39f610467fd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-L&lt;/code&gt; or &lt;code&gt;--list-modes&lt;/code&gt; Display a list of defined bind modes</source>
          <target state="translated">&lt;code&gt;-L&lt;/code&gt; 또는 &lt;code&gt;--list-modes&lt;/code&gt; 정의 된 바인드 모드 목록을 표시합니다.</target>
        </trans-unit>
        <trans-unit id="d698f2b3f170b127c3d5577ab3768e6600aa3cb7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-L&lt;/code&gt; or &lt;code&gt;--long&lt;/code&gt; do not abbreviate long values when printing set variables</source>
          <target state="translated">&lt;code&gt;-L&lt;/code&gt; 또는 &lt;code&gt;--long&lt;/code&gt; 은 설정 변수를 인쇄 할 때 long 값을 축약하지 않습니다</target>
        </trans-unit>
        <trans-unit id="d75de78498ae2e99ed01c42f9bb91a9f11bf5c00" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-L&lt;/code&gt;, Output the logical working directory, without resolving symlinks (default behavior).</source>
          <target state="translated">&lt;code&gt;-L&lt;/code&gt; , 심볼릭 링크를 해결하지 않고 논리적 작업 디렉토리를 출력합니다 (기본 동작).</target>
        </trans-unit>
        <trans-unit id="efc7d62b516c706165d3a242dc49d2796023d167" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-M MODE&lt;/code&gt; or &lt;code&gt;--mode MODE&lt;/code&gt; Specify a bind mode that the bind is used in. Defaults to &quot;default&quot;</source>
          <target state="translated">&lt;code&gt;-M MODE&lt;/code&gt; 또는 &lt;code&gt;--mode MODE&lt;/code&gt; 바인드가 사용되는 바인드 모드를 지정하십시오. 기본값은 &quot;default&quot;입니다.</target>
        </trans-unit>
        <trans-unit id="cd7e8e65c08a5c89bb70c1f2087723cf6afc2103" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-N&lt;/code&gt; or &lt;code&gt;--min-args&lt;/code&gt; is followed by an integer that defines the minimum number of acceptable non-option arguments. The default is zero.</source>
          <target state="translated">&lt;code&gt;-N&lt;/code&gt; 또는 &lt;code&gt;--min-args&lt;/code&gt; 뒤에는 허용 가능한 비 옵션 인수의 최소 수를 정의하는 정수가옵니다. 기본값은 0입니다.</target>
        </trans-unit>
        <trans-unit id="6d3027729e7e5c176a4601fa0c113ba16b416311" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-O FILE&lt;/code&gt; returns true if &lt;code&gt;FILE&lt;/code&gt; exists and is owned by the current user.</source>
          <target state="translated">&lt;code&gt;-O FILE&lt;/code&gt; 은 &lt;code&gt;FILE&lt;/code&gt; 이 존재하고 현재 사용자가 소유 한 경우 true를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="9b1729ae3f327e38755ba368d309aac815e0472c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-P PROMPT_STR&lt;/code&gt; or &lt;code&gt;--prompt-str=PROMPT_STR&lt;/code&gt; uses the string as the prompt for the interactive mode. It is equivalent to &lt;code&gt;echo PROMPT_STR&lt;/code&gt; and is provided solely to avoid the need to frame the prompt as a command. All special characters in the string are automatically escaped before being passed to the &lt;code&gt;echo&lt;/code&gt; command.</source>
          <target state="translated">&lt;code&gt;-P PROMPT_STR&lt;/code&gt; 또는 &lt;code&gt;--prompt-str=PROMPT_STR&lt;/code&gt; 은 문자열을 대화식 모드의 프롬프트로 사용합니다. &lt;code&gt;echo PROMPT_STR&lt;/code&gt; 과 동일 하며 프롬프트를 명령으로 프레임 할 필요가 없도록하기 위해 제공됩니다. 문자열의 모든 특수 문자는 &lt;code&gt;echo&lt;/code&gt; 명령 으로 전달되기 전에 자동으로 이스케이프됩니다 .</target>
        </trans-unit>
        <trans-unit id="738e0a7af782a36f13cb6455d94528f8977f5a83" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-P&lt;/code&gt; or &lt;code&gt;--force-path&lt;/code&gt; returns the name of the disk file that would be executed, or nothing if no file with the specified name could be found in the &lt;code&gt;$PATH&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;-P&lt;/code&gt; 또는 &lt;code&gt;--force-path&lt;/code&gt; 는 실행될 디스크 파일의 이름을 반환하거나 &lt;code&gt;$PATH&lt;/code&gt; 에서 지정된 이름의 파일을 찾을 수 없으면 아무 것도 반환하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="046068a1ba0b36dd8be9539aaf081b105463917a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-P&lt;/code&gt; or &lt;code&gt;--paging-mode&lt;/code&gt; evaluates to true if the commandline is showing pager contents, such as tab completions</source>
          <target state="translated">&lt;code&gt;-P&lt;/code&gt; 명령 줄에 탭 완성과 같은 호출기 내용이 표시되면 -P 또는 &lt;code&gt;--paging-mode&lt;/code&gt; 는 true 로 평가됩니다.</target>
        </trans-unit>
        <trans-unit id="621575d2a3ca8b4de3d57c00532b285d7bd15675" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-P&lt;/code&gt;, Output the physical working directory, with symlinks resolved.</source>
          <target state="translated">&lt;code&gt;-P&lt;/code&gt; , 심볼릭 링크가 해결 된 실제 작업 디렉토리를 출력합니다.</target>
        </trans-unit>
        <trans-unit id="62972fed299b526bcf7d2e92299051a4b0235b25" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-R RIGHT_PROMPT_CMD&lt;/code&gt; or &lt;code&gt;--right-prompt=RIGHT_PROMPT_CMD&lt;/code&gt; uses the output of the shell command &lt;code&gt;RIGHT_PROMPT_CMD&lt;/code&gt; as the right prompt for the interactive mode. There is no default right prompt command.</source>
          <target state="translated">&lt;code&gt;-R RIGHT_PROMPT_CMD&lt;/code&gt; 또는 &lt;code&gt;--right-prompt=RIGHT_PROMPT_CMD&lt;/code&gt; 는 대화식 모드의 올바른 프롬프트로 쉘 명령 &lt;code&gt;RIGHT_PROMPT_CMD&lt;/code&gt; 의 출력을 사용 합니다. 기본 오른쪽 프롬프트 명령이 없습니다.</target>
        </trans-unit>
        <trans-unit id="40c35b6f687023b042196e56e7608e5272ec7505" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-R&lt;/code&gt; or &lt;code&gt;--reverse&lt;/code&gt; causes the history search results to be ordered oldest to newest. Which is the order used by most shells. The default is newest to oldest.</source>
          <target state="translated">&lt;code&gt;-R&lt;/code&gt; 또는 &lt;code&gt;--reverse&lt;/code&gt; 를 사용 하면 내역 검색 결과가 가장 오래된 것부터 가장 오래된 것으로 정렬됩니다. 대부분의 쉘이 사용하는 순서입니다. 기본값은 최신에서 가장 오래된 것입니다.</target>
        </trans-unit>
        <trans-unit id="d37514c4c067496d40dd57cdff93d3451d5e760f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-S FILE&lt;/code&gt; returns true if &lt;code&gt;FILE&lt;/code&gt; is a socket.</source>
          <target state="translated">&lt;code&gt;-S FILE&lt;/code&gt; 은 &lt;code&gt;FILE&lt;/code&gt; 이 소켓 인 경우 true를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="83c13b44b4c3641162682bb157594e21c8f10a97" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-S&lt;/code&gt; or &lt;code&gt;--no-scope-shadowing&lt;/code&gt; allows the function to access the variables of calling functions. Normally, any variables inside the function that have the same name as variables from the calling function are &quot;shadowed&quot;, and their contents is independent of the calling function.</source>
          <target state="translated">&lt;code&gt;-S&lt;/code&gt; 또는 &lt;code&gt;--no-scope-shadowing&lt;/code&gt; 을 사용하면 함수가 호출 함수의 변수에 액세스 할 수 있습니다. 일반적으로, 호출 함수의 변수와 이름이 같은 함수 내부의 모든 변수는 &quot;그림자&quot;이며 그 내용은 호출 함수와 무관합니다.</target>
        </trans-unit>
        <trans-unit id="d994c777c7d80667025ff7fe476123a1d054f269" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-S&lt;/code&gt; or &lt;code&gt;--search-mode&lt;/code&gt; evaluates to true if the commandline is performing a history search</source>
          <target state="translated">&lt;code&gt;-S&lt;/code&gt; 명령 줄에서 기록 검색을 수행하는 경우 -S 또는 &lt;code&gt;--search-mode&lt;/code&gt; 가 true 로 평가됩니다.</target>
        </trans-unit>
        <trans-unit id="cbc77c574d2245f96d697f6c34134b051e6df9ad" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-S&lt;/code&gt; or &lt;code&gt;--shell&lt;/code&gt; enables syntax highlighting, tab completions and command termination suitable for entering shellscript code in the interactive mode. NOTE: Prior to fish 3.0, the short opt for &lt;code&gt;--shell&lt;/code&gt; was &lt;code&gt;-s&lt;/code&gt;, but it has been changed for compatibility with bash's &lt;code&gt;-s&lt;/code&gt; short opt for &lt;code&gt;--silent&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;-S&lt;/code&gt; 또는 &lt;code&gt;--shell&lt;/code&gt; 은 대화식 모드에서 쉘 스크립트 코드를 입력하는 데 적합한 구문 강조, 탭 완성 및 명령 종료를 활성화합니다. 참고 : fish 3.0 이전에는 &lt;code&gt;--shell&lt;/code&gt; 에 대한 단축 옵션 이 &lt;code&gt;-s&lt;/code&gt; 였지만 bash의 &lt;code&gt;-s&lt;/code&gt; 에 대한 단축 옵션 &lt;code&gt;--silent&lt;/code&gt; 와 호환되도록 변경되었습니다 .</target>
        </trans-unit>
        <trans-unit id="98ecaa0333d6743501b87586a86646a79f56d492" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-S&lt;/code&gt; or &lt;code&gt;--show&lt;/code&gt; Shows information about the given variables. If no variable names are given then all variables are shown in sorted order. No other flags can be used with this option. The information shown includes whether or not it is set in each of the local, global, and universal scopes. If it is set in one of those scopes whether or not it is exported is reported. The individual elements are also shown along with the length of each element.</source>
          <target state="translated">&lt;code&gt;-S&lt;/code&gt; 또는 &lt;code&gt;--show&lt;/code&gt; 주어진 변수에 대한 정보를 표시합니다. 변수 이름을 지정하지 않으면 모든 변수가 정렬 된 순서로 표시됩니다. 이 옵션에는 다른 플래그를 사용할 수 없습니다. 표시된 정보에는 각 로컬, 전역 및 범용 범위에서 설정되었는지 여부가 포함됩니다. 해당 범위 중 하나에 설정된 경우 내보내기 여부가보고됩니다. 개별 요소는 각 요소의 길이와 함께 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="43e04dd28b20a475e06fa5f5aa1a6cfa9756a1d4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-S&lt;/code&gt; or &lt;code&gt;--soft&lt;/code&gt; sets soft resource limit</source>
          <target state="translated">&lt;code&gt;-S&lt;/code&gt; 또는 &lt;code&gt;--soft&lt;/code&gt; 는 소프트 리소스 제한을 설정합니다</target>
        </trans-unit>
        <trans-unit id="152b8404acd15f99fb1ab15bf6d2d12ce31f27ad" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-S&lt;/code&gt; or &lt;code&gt;--symbolic&lt;/code&gt; prints the umask in symbolic form instead of octal form.</source>
          <target state="translated">&lt;code&gt;-S&lt;/code&gt; 또는 &lt;code&gt;--symbolic&lt;/code&gt; 은 8 진 형식 대신 기호 형식으로 umask를 인쇄합니다.</target>
        </trans-unit>
        <trans-unit id="6645c775d6b67dfc1183ee3b6634f8bc6959ac3a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-U&lt;/code&gt; or &lt;code&gt;--universal&lt;/code&gt; causes the specified shell variable to be given a universal scope. If this option is supplied, the variable will be shared between all the current user's fish instances on the current computer, and will be preserved across restarts of the shell.</source>
          <target state="translated">&lt;code&gt;-U&lt;/code&gt; 또는 &lt;code&gt;--universal&lt;/code&gt; 은 지정된 쉘 변수에 범용 범위를 부여합니다. 이 옵션이 제공되면 변수는 현재 컴퓨터의 모든 현재 사용자의 피쉬 인스턴스간에 공유되며 셸을 다시 시작할 때도 유지됩니다.</target>
        </trans-unit>
        <trans-unit id="a12d53a9b4f7e368c1ba1ba89aa4f450790a59ae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-U&lt;/code&gt; or &lt;code&gt;--universal&lt;/code&gt; causes the specified shell variable to be made universal.</source>
          <target state="translated">&lt;code&gt;-U&lt;/code&gt; 또는 &lt;code&gt;--universal&lt;/code&gt; 은 지정된 쉘 변수를 범용으로 만듭니다.</target>
        </trans-unit>
        <trans-unit id="c84454aad05cd42aa19159161b2d6f7c6a3f2b64" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-U&lt;/code&gt; or &lt;code&gt;--universal&lt;/code&gt; to use a universal variable (default).</source>
          <target state="translated">&lt;code&gt;-U&lt;/code&gt; 범용 변수를 사용하려면 -U 또는 &lt;code&gt;--universal&lt;/code&gt; (기본값).</target>
        </trans-unit>
        <trans-unit id="c312a6a782030e8af6e0a9b528907ed64feb993d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-V&lt;/code&gt; or &lt;code&gt;--inherit-variable NAME&lt;/code&gt; snapshots the value of the variable &lt;code&gt;NAME&lt;/code&gt; and defines a local variable with that same name and value when the function is defined. This is similar to a closure in other languages like Python but a bit different. Note the word &quot;snapshot&quot; in the first sentence. If you change the value of the variable after defining the function, even if you do so in the same scope (typically another function) the new value will not be used by the function you just created using this option. See the &lt;code&gt;function notify&lt;/code&gt; example below for how this might be used.</source>
          <target state="translated">&lt;code&gt;-V&lt;/code&gt; 또는 &lt;code&gt;--inherit-variable NAME&lt;/code&gt; 은 변수 &lt;code&gt;NAME&lt;/code&gt; 의 값을 스냅 샷 하고 함수가 정의 될 때 동일한 이름과 값으로 로컬 변수를 정의합니다. 이것은 파이썬과 같은 다른 언어의 클로저와 비슷하지만 약간 다릅니다. 첫 문장에서 &quot;스냅 샷&quot;이라는 단어를 주목하십시오. 함수를 정의한 후 변수 값을 변경하면 동일한 범위 (일반적으로 다른 함수)에서 변경하더라도이 옵션을 사용하여 방금 만든 함수는 새 값을 사용하지 않습니다. 이것이 어떻게 사용될 수 있는지 아래 &lt;code&gt;function notify&lt;/code&gt; 예제를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="7f35a558e494de2f50976ce95a9b9e0d6cc6f975" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-X&lt;/code&gt; or &lt;code&gt;--max-args&lt;/code&gt; is followed by an integer that defines the maximum number of acceptable non-option arguments. The default is infinity.</source>
          <target state="translated">&lt;code&gt;-X&lt;/code&gt; 또는 &lt;code&gt;--max-args&lt;/code&gt; 뒤에는 허용 가능한 비 옵션 인수의 최대 수를 정의하는 정수가옵니다. 기본값은 무한대입니다.</target>
        </trans-unit>
        <trans-unit id="0897689b3cd7e489b8a585ee0cb9e0f0171e9553" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-a NAMES&lt;/code&gt; or &lt;code&gt;--argument-names NAMES&lt;/code&gt; assigns the value of successive command-line arguments to the names given in NAMES.</source>
          <target state="translated">&lt;code&gt;-a NAMES&lt;/code&gt; 또는 &lt;code&gt;--argument-names NAMES&lt;/code&gt; 는 연속 명령 행 인수 값을 NAMES에 지정된 이름에 지정합니다.</target>
        </trans-unit>
        <trans-unit id="0f91ad3c2052a9626ad22c1e8c7da7db5ccc1810" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-a OPTION_ARGUMENTS&lt;/code&gt; or &lt;code&gt;--arguments=OPTION_ARGUMENTS&lt;/code&gt; adds the specified option arguments to the completions list.</source>
          <target state="translated">&lt;code&gt;-a OPTION_ARGUMENTS&lt;/code&gt; 또는 &lt;code&gt;--arguments=OPTION_ARGUMENTS&lt;/code&gt; 는 지정된 옵션 인수를 완료 목록에 추가합니다.</target>
        </trans-unit>
        <trans-unit id="7026f6ee075b08aeaaf42719823d4538ee44fab8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-a WORD EXPANSION&lt;/code&gt; or &lt;code&gt;--add WORD EXPANSION&lt;/code&gt; Adds a new abbreviation, causing WORD to be expanded to PHRASE.</source>
          <target state="translated">&lt;code&gt;-a WORD EXPANSION&lt;/code&gt; 또는 &lt;code&gt;--add WORD EXPANSION&lt;/code&gt; 새로운 약어를 추가하여 WORD가 PHRASE로 확장됩니다.</target>
        </trans-unit>
        <trans-unit id="d661d104bf269b01aed2781eaf0ba96a47dc7a1b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-a&lt;/code&gt; or &lt;code&gt;--all&lt;/code&gt; See &lt;code&gt;--erase&lt;/code&gt; and &lt;code&gt;--key-names&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;-a&lt;/code&gt; 또는 &lt;code&gt;--all&lt;/code&gt; 참조 &lt;code&gt;--erase&lt;/code&gt; 및 &lt;code&gt;--key-names&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7d37fa26c85d777da0a493e7f79027c7f88b1def" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-a&lt;/code&gt; or &lt;code&gt;--all&lt;/code&gt; lists all functions, even those whose name starts with an underscore.</source>
          <target state="translated">&lt;code&gt;-a&lt;/code&gt; 또는 &lt;code&gt;--all&lt;/code&gt; 은 이름이 밑줄로 시작하는 기능을 포함하여 모든 기능을 나열합니다.</target>
        </trans-unit>
        <trans-unit id="7582e23eb01db9a2fa73e9616c035b58a5d8b4cf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-a&lt;/code&gt; or &lt;code&gt;--all&lt;/code&gt; prints all current limits</source>
          <target state="translated">&lt;code&gt;-a&lt;/code&gt; 또는 &lt;code&gt;--all&lt;/code&gt; 은 모든 현재 제한을 인쇄합니다</target>
        </trans-unit>
        <trans-unit id="19d761d026270167f8554ba561b27685573aee1a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-a&lt;/code&gt; or &lt;code&gt;--all&lt;/code&gt; prints all of possible definitions of the specified names.</source>
          <target state="translated">&lt;code&gt;-a&lt;/code&gt; 또는 &lt;code&gt;--all&lt;/code&gt; 은 지정된 이름의 가능한 모든 정의를 인쇄합니다.</target>
        </trans-unit>
        <trans-unit id="0ba5998e7c55e2158c8f4014bf1489b5561ce7b9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-a&lt;/code&gt; or &lt;code&gt;--all&lt;/code&gt; returns all the external commands that are found in &lt;code&gt;$PATH&lt;/code&gt; in the order they are found.</source>
          <target state="translated">&lt;code&gt;-a&lt;/code&gt; 또는 &lt;code&gt;--all&lt;/code&gt; 은 &lt;code&gt;$PATH&lt;/code&gt; 에있는 모든 외부 명령을 찾은 순서대로 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="75b8cb483b6883e7025429aeaa423779bf4dd55b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-a&lt;/code&gt; or &lt;code&gt;--append&lt;/code&gt; causes the values to be appended to the current set of values for the variable. This can be used with &lt;code&gt;--prepend&lt;/code&gt; to both append and prepend at the same time. This cannot be used when assigning to a variable slice.</source>
          <target state="translated">&lt;code&gt;-a&lt;/code&gt; 또는 &lt;code&gt;--append&lt;/code&gt; 는 값을 변수의 현재 값 세트에 추가합니다. &lt;code&gt;--prepend&lt;/code&gt; 와 함께 사용하여 append와 prepend를 동시에 사용할 수 있습니다 . 변수 슬라이스에 할당 할 때는 사용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="572f3cbd49012afc866aec9caaa367d7654603a4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-a&lt;/code&gt; or &lt;code&gt;--append&lt;/code&gt; do not remove the current commandline, append the specified string at the end of it</source>
          <target state="translated">&lt;code&gt;-a&lt;/code&gt; 또는 &lt;code&gt;--append&lt;/code&gt; 는 현재 명령 줄을 제거하지 않고 지정된 문자열을 끝에 추가합니다.</target>
        </trans-unit>
        <trans-unit id="b1e58544403f7edb99ba3cee7af02ca8ea560fba" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-a&lt;/code&gt; or &lt;code&gt;--array&lt;/code&gt; stores the result as an array in a single variable.</source>
          <target state="translated">&lt;code&gt;-a&lt;/code&gt; 또는 &lt;code&gt;--array&lt;/code&gt; 는 결과를 단일 변수에 배열로 저장합니다.</target>
        </trans-unit>
        <trans-unit id="13a836ca83930090e0c202803c5eecfd476f6984" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-b FILE&lt;/code&gt; returns true if &lt;code&gt;FILE&lt;/code&gt; is a block device.</source>
          <target state="translated">&lt;code&gt;-b FILE&lt;/code&gt; 은 &lt;code&gt;FILE&lt;/code&gt; 이 블록 장치 인 경우 true를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="e74ab590ee2552f3c5e3c68fb4bb7d97c7354410" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-b&lt;/code&gt; or &lt;code&gt;--current-buffer&lt;/code&gt; select the entire buffer, including any displayed autosuggestion (default)</source>
          <target state="translated">&lt;code&gt;-b&lt;/code&gt; 또는 &lt;code&gt;--current-buffer&lt;/code&gt; 표시된 자동 제안을 포함하여 전체 버퍼를 선택합니다 (기본값).</target>
        </trans-unit>
        <trans-unit id="bb1f1fc59c64ad30c65ef663dd202769f8fbb9f8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-b&lt;/code&gt;, &lt;code&gt;--background&lt;/code&gt;&lt;em&gt;COLOR&lt;/em&gt; sets the background color.</source>
          <target state="translated">&lt;code&gt;-b&lt;/code&gt; , &lt;code&gt;--background&lt;/code&gt; &lt;em&gt;COLOR&lt;/em&gt; 는 &lt;em&gt;배경색을&lt;/em&gt; 설정합니다.</target>
        </trans-unit>
        <trans-unit id="064f89156e05a5660e3a58034122b22aefcc0cd0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-c CMD&lt;/code&gt; or &lt;code&gt;--command=CMD&lt;/code&gt; sets the initial string in the interactive mode command buffer to &lt;code&gt;CMD&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;-c CMD&lt;/code&gt; 또는 &lt;code&gt;--command=CMD&lt;/code&gt; 는 대화 형 모드 명령 버퍼의 초기 설정 문자열 &lt;code&gt;CMD&lt;/code&gt; 를 .</target>
        </trans-unit>
        <trans-unit id="5fc0989fd6adb9b8a12abddd0a0ddbbb66ae7262" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-c COMMAND&lt;/code&gt; or &lt;code&gt;--command COMMAND&lt;/code&gt; specifies that &lt;code&gt;COMMAND&lt;/code&gt; is the name of the command.</source>
          <target state="translated">&lt;code&gt;-c COMMAND&lt;/code&gt; 또는 &lt;code&gt;--command COMMAND&lt;/code&gt; 는 &lt;code&gt;COMMAND&lt;/code&gt; 가 명령 이름 임을 지정합니다 .</target>
        </trans-unit>
        <trans-unit id="1374d47cfbb1a22005c235d3852cf88b62aac253" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-c FILE&lt;/code&gt; returns true if &lt;code&gt;FILE&lt;/code&gt; is a character device.</source>
          <target state="translated">&lt;code&gt;-c FILE&lt;/code&gt; 은 &lt;code&gt;FILE&lt;/code&gt; 이 문자 장치 인 경우 true를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="8d862e6419e49b1af4b5efc41365bcc2829f3c1a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-c OLDNAME NEWNAME&lt;/code&gt; or &lt;code&gt;--copy OLDNAME NEWNAME&lt;/code&gt; creates a new function named NEWNAME, using the definition of the OLDNAME function.</source>
          <target state="translated">&lt;code&gt;-c OLDNAME NEWNAME&lt;/code&gt; 또는 &lt;code&gt;--copy OLDNAME NEWNAME&lt;/code&gt; 은 OLDNAME 함수의 정의를 사용하여 NEWNAME이라는 새 함수를 작성합니다.</target>
        </trans-unit>
        <trans-unit id="855cb9a8ba097960171107e9ee996eb0413b1233" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-c&lt;/code&gt; or &lt;code&gt;--command&lt;/code&gt; prints the command name for each process in jobs.</source>
          <target state="translated">&lt;code&gt;-c&lt;/code&gt; 또는 &lt;code&gt;--command&lt;/code&gt; 는 작업의 각 프로세스에 대한 명령 이름을 인쇄합니다.</target>
        </trans-unit>
        <trans-unit id="7a730dfa25d5a8cfb51b0535abcaaae8e3060581" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-c&lt;/code&gt; or &lt;code&gt;--command=COMMANDS&lt;/code&gt; evaluate the specified commands instead of reading from the commandline</source>
          <target state="translated">&lt;code&gt;-c&lt;/code&gt; 또는 &lt;code&gt;--command=COMMANDS&lt;/code&gt; 는 명령 줄에서 읽지 않고 지정된 명령을 평가합니다.</target>
        </trans-unit>
        <trans-unit id="5d4124c3a466eb8b5cf7192ef1a4a1bc5ec77554" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-c&lt;/code&gt; or &lt;code&gt;--contains&lt;/code&gt; searches or deletes items in the history that contain the specified text string. This is the default for the &lt;code&gt;--search&lt;/code&gt; flag. This is not currently supported by the &lt;code&gt;delete&lt;/code&gt; subcommand.</source>
          <target state="translated">&lt;code&gt;-c&lt;/code&gt; 또는 &lt;code&gt;--contains&lt;/code&gt; 지정된 텍스트 문자열이 포함 된 기록에서 항목을 검색하거나 삭제합니다. &lt;code&gt;--search&lt;/code&gt; 플래그 의 기본값입니다 . &lt;code&gt;delete&lt;/code&gt; 부속 명령 은 현재 지원하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="d2a1c5b0e4adc3b35bf54fa3480ff8090cfdf273" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-c&lt;/code&gt; or &lt;code&gt;--continuous&lt;/code&gt; begins a session where multiple key sequences can be inspected. By default the program exits after capturing a single key sequence.</source>
          <target state="translated">&lt;code&gt;-c&lt;/code&gt; 또는 &lt;code&gt;--continuous&lt;/code&gt; 는 여러 키 시퀀스를 검사 할 수있는 세션을 시작합니다. 기본적으로 프로그램은 단일 키 시퀀스를 캡처 한 후 종료됩니다.</target>
        </trans-unit>
        <trans-unit id="c85b31c180e247ea738833158ef9cdbb7e47818d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-c&lt;/code&gt; or &lt;code&gt;--core-size&lt;/code&gt;: the maximum size of core files created. By setting this limit to zero, core dumps can be disabled.</source>
          <target state="translated">&lt;code&gt;-c&lt;/code&gt; 또는 &lt;code&gt;--core-size&lt;/code&gt; : 만들어진 코어 파일의 최대 크기입니다. 이 한계를 0으로 설정하면 코어 덤프를 비활성화 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1f444a07e7bb5615847301bf7f4484e1daf7b58c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-c&lt;/code&gt; or &lt;code&gt;--cut-at-cursor&lt;/code&gt; only print selection up until the current cursor position</source>
          <target state="translated">&lt;code&gt;-c&lt;/code&gt; 또는 &lt;code&gt;--cut-at-cursor&lt;/code&gt; 는 현재 커서 위치까지 선택을 인쇄합니다.</target>
        </trans-unit>
        <trans-unit id="e9666a191308166e866cfbe3e2025f34f4fe6b06" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-c&lt;/code&gt;, &lt;code&gt;--print-colors&lt;/code&gt; prints a list of the 16 named colors.</source>
          <target state="translated">&lt;code&gt;-c&lt;/code&gt; , &lt;code&gt;--print-colors&lt;/code&gt; 는 16 개의 명명 된 색상 목록을 인쇄합니다.</target>
        </trans-unit>
        <trans-unit id="ac2258617801e0444f02d4290cb32cd303852a30" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-d DELIMITER&lt;/code&gt; or &lt;code&gt;--delimiter=DELIMITER&lt;/code&gt; splits on DELIMITER. DELIMITER will be used as an entire string to split on, not a set of characters.</source>
          <target state="translated">&lt;code&gt;-d DELIMITER&lt;/code&gt; 또는 &lt;code&gt;--delimiter=DELIMITER&lt;/code&gt; 는 DELIMITER에서 분할됩니다. DELIMITER는 문자 집합이 아닌 분할 할 전체 문자열로 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="972c06734b8f11bf3011cff078df52e3f408d584" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-d DESCRIPTION&lt;/code&gt; or &lt;code&gt;--description=DESCRIPTION&lt;/code&gt; changes the description of this function.</source>
          <target state="translated">&lt;code&gt;-d DESCRIPTION&lt;/code&gt; 또는 &lt;code&gt;--description=DESCRIPTION&lt;/code&gt; 은이 함수의 설명을 변경합니다.</target>
        </trans-unit>
        <trans-unit id="fc5299d96e201eac11427bdd63d8866f5a344d2a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-d DESCRIPTION&lt;/code&gt; or &lt;code&gt;--description=DESCRIPTION&lt;/code&gt; is a description of what the function does, suitable as a completion description.</source>
          <target state="translated">&lt;code&gt;-d DESCRIPTION&lt;/code&gt; 또는 &lt;code&gt;--description=DESCRIPTION&lt;/code&gt; 은 함수가 수행하는 기능에 대한 설명이며 완료 설명으로 적합합니다.</target>
        </trans-unit>
        <trans-unit id="bfc7992cc13e17bd78dc8f6fffca46d803689ce8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-d FILE&lt;/code&gt; returns true if &lt;code&gt;FILE&lt;/code&gt; is a directory.</source>
          <target state="translated">&lt;code&gt;-d FILE&lt;/code&gt; &lt;code&gt;FILE&lt;/code&gt; 이 디렉토리 이면 -d FILE 은 true를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="f3f0315586c1ab49177c1757be17ec23468ccbed" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-d&lt;/code&gt; or &lt;code&gt;--data-size&lt;/code&gt;: the maximum size of a process' data segment.</source>
          <target state="translated">&lt;code&gt;-d&lt;/code&gt; 또는 &lt;code&gt;--data-size&lt;/code&gt; : 프로세스 데이터 세그먼트의 최대 크기입니다.</target>
        </trans-unit>
        <trans-unit id="3020d1f157c77b3b056119c5869f2ea15e2724f3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-d&lt;/code&gt; or &lt;code&gt;--debug-level=DEBUG_LEVEL&lt;/code&gt; enables debug output and specifies a verbosity level (like &lt;code&gt;fish -d&lt;/code&gt;). Defaults to 0.</source>
          <target state="translated">&lt;code&gt;-d&lt;/code&gt; 또는 &lt;code&gt;--debug-level=DEBUG_LEVEL&lt;/code&gt; 은 디버그 출력을 활성화하고 상세 수준 ( &lt;code&gt;fish -d&lt;/code&gt; )을 지정합니다. 기본값은 0입니다.</target>
        </trans-unit>
        <trans-unit id="26507b35bf0a141f312b85b4b17fdce00980d9af" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-d&lt;/code&gt; or &lt;code&gt;--debug-level=DEBUG_LEVEL&lt;/code&gt; specify the verbosity level of fish. A higher number means higher verbosity. The default level is 1.</source>
          <target state="translated">&lt;code&gt;-d&lt;/code&gt; 또는 &lt;code&gt;--debug-level=DEBUG_LEVEL&lt;/code&gt; 은 물고기의 상세 수준을 지정합니다. 숫자가 높을수록 더 자세한 정보가 표시됩니다. 기본 수준은 1입니다.</target>
        </trans-unit>
        <trans-unit id="48f4336b85ac4a55b7590b530ecf6090d91ebe0f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-d&lt;/code&gt;, &lt;code&gt;--dim&lt;/code&gt; sets dim mode.</source>
          <target state="translated">&lt;code&gt;-d&lt;/code&gt; , &lt;code&gt;--dim&lt;/code&gt; 은 희미한 모드를 설정합니다.</target>
        </trans-unit>
        <trans-unit id="2b4614619f43afa89757868171ee69e5db741b34" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-e FILE&lt;/code&gt; returns true if &lt;code&gt;FILE&lt;/code&gt; exists.</source>
          <target state="translated">&lt;code&gt;-e FILE&lt;/code&gt; 은 &lt;code&gt;FILE&lt;/code&gt; 이 존재 하면 true를 리턴 합니다.</target>
        </trans-unit>
        <trans-unit id="d2c819cb61a1e6b7ee76d369af4910b2fe4c2c2d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-e WORD&lt;/code&gt; or &lt;code&gt;--erase WORD&lt;/code&gt; Erase the abbreviation WORD.</source>
          <target state="translated">&lt;code&gt;-e WORD&lt;/code&gt; 또는 &lt;code&gt;--erase WORD&lt;/code&gt; 약어 WORD를 지 웁니다.</target>
        </trans-unit>
        <trans-unit id="eba5e54068a7dbb422a3953b443a4c86a74f2927" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-e command&lt;/code&gt; or &lt;code&gt;--editor command&lt;/code&gt; Open the function body inside the text editor given by the command (for example, &lt;code&gt;-e vi&lt;/code&gt;). The special command &lt;code&gt;fish&lt;/code&gt; will use the built-in editor (same as specifying &lt;code&gt;-i&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;-e command&lt;/code&gt; 또는 &lt;code&gt;--editor command&lt;/code&gt; 지정된 텍스트 편집기에서 함수 본문을 엽니 다 (예 : &lt;code&gt;-e vi&lt;/code&gt; ). 특수 명령 &lt;code&gt;fish&lt;/code&gt; 는 내장 편집기를 사용합니다 ( &lt;code&gt;-i&lt;/code&gt; 지정과 동일 ).</target>
        </trans-unit>
        <trans-unit id="b9fa2b375c094cd352933de3da989312ac4789e4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-e&lt;/code&gt; or &lt;code&gt;--erase&lt;/code&gt; Erase the binding with the given sequence and mode instead of defining a new one. Multiple sequences can be specified with this flag. Specifying &lt;code&gt;-a&lt;/code&gt; or &lt;code&gt;--all&lt;/code&gt; with &lt;code&gt;-M&lt;/code&gt; or &lt;code&gt;--mode&lt;/code&gt; erases all binds in the given mode regardless of sequence. Specifying &lt;code&gt;-a&lt;/code&gt; or &lt;code&gt;--all&lt;/code&gt; without &lt;code&gt;-M&lt;/code&gt; or &lt;code&gt;--mode&lt;/code&gt; erases all binds in all modes regardless of sequence.</source>
          <target state="translated">&lt;code&gt;-e&lt;/code&gt; 또는 &lt;code&gt;--erase&lt;/code&gt; 새 시퀀스를 정의하는 대신 지정된 시퀀스 및 모드로 바인딩을 지 웁니다. 이 플래그를 사용하여 여러 시퀀스를 지정할 수 있습니다. &lt;code&gt;-a&lt;/code&gt; 또는 &lt;code&gt;--all&lt;/code&gt; 을 &lt;code&gt;-M&lt;/code&gt; 또는 &lt;code&gt;--mode&lt;/code&gt; 와 함께 지정 하면 시퀀스에 관계없이 주어진 모드에서 모든 바인드를 지 웁니다. &lt;code&gt;-M&lt;/code&gt; 또는 &lt;code&gt;--mode&lt;/code&gt; 없이 &lt;code&gt;-a&lt;/code&gt; 또는 &lt;code&gt;--all&lt;/code&gt; 을 지정 하면 순서에 관계없이 모든 모드에서 모든 바인드가 지워집니다.</target>
        </trans-unit>
        <trans-unit id="e9ecb92bdaa4ce7de61b3137a99e17fb9083461a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-e&lt;/code&gt; or &lt;code&gt;--erase&lt;/code&gt; Release global block</source>
          <target state="translated">&lt;code&gt;-e&lt;/code&gt; 또는 &lt;code&gt;--erase&lt;/code&gt; 글로벌 블록 지우기</target>
        </trans-unit>
        <trans-unit id="27a04e1dc6eb699ed5e10803c54ad322c6268eaf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-e&lt;/code&gt; or &lt;code&gt;--erase&lt;/code&gt; causes the specified functions to be erased.</source>
          <target state="translated">&lt;code&gt;-e&lt;/code&gt; 또는 &lt;code&gt;--erase&lt;/code&gt; 는 지정된 기능을 지 웁니다 .</target>
        </trans-unit>
        <trans-unit id="573b00e01645229a613c9239a83273b5570e990a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-e&lt;/code&gt; or &lt;code&gt;--erase&lt;/code&gt; causes the specified shell variable to be erased</source>
          <target state="translated">&lt;code&gt;-e&lt;/code&gt; 또는 &lt;code&gt;--erase&lt;/code&gt; 는 지정된 쉘 변수를 지 웁니다.</target>
        </trans-unit>
        <trans-unit id="0dca6a4c2b15693b6ac6061e5caca527165f7c23" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-e&lt;/code&gt; or &lt;code&gt;--erase&lt;/code&gt; deletes the specified completion.</source>
          <target state="translated">&lt;code&gt;-e&lt;/code&gt; 또는 &lt;code&gt;--erase&lt;/code&gt; 는 지정된 완료를 삭제합니다.</target>
        </trans-unit>
        <trans-unit id="6489642520ff27cdb23a71c0177a2808d20a8297" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-e&lt;/code&gt; or &lt;code&gt;--exact&lt;/code&gt; searches or deletes items in the history that exactly match the specified text string. This is the default for the &lt;code&gt;delete&lt;/code&gt; subcommand. Note that the match is case-insensitive by default. If you really want an exact match, including letter case, you must use the &lt;code&gt;-C&lt;/code&gt; or &lt;code&gt;--case-sensitive&lt;/code&gt; flag.</source>
          <target state="translated">&lt;code&gt;-e&lt;/code&gt; 또는 &lt;code&gt;--exact&lt;/code&gt; 는 기록에서 지정된 텍스트 문자열과 정확히 일치하는 항목을 검색하거나 삭제합니다. &lt;code&gt;delete&lt;/code&gt; 부속 명령 의 기본값입니다 . 일치는 기본적으로 대소 문자를 구분하지 않습니다. 대소 문자를 포함하여 정확히 일치하는 항목을 원하면 &lt;code&gt;-C&lt;/code&gt; 또는 &lt;code&gt;--case-sensitive&lt;/code&gt; 플래그를 사용해야합니다 .</target>
        </trans-unit>
        <trans-unit id="5aab2bfef66af17ab67310c68ad3e40ca3bb9075" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-e&lt;/code&gt; or &lt;code&gt;--on-event EVENT_NAME&lt;/code&gt; tells fish to run this function when the specified named event is emitted. Fish internally generates named events e.g. when showing the prompt.</source>
          <target state="translated">&lt;code&gt;-e&lt;/code&gt; 또는 &lt;code&gt;--on-event EVENT_NAME&lt;/code&gt; 은 지정된 명명 된 이벤트가 발생할 때 물고기에게이 기능을 실행하도록 지시합니다. 물고기는 내부적으로 예를 들어 프롬프트를 표시 할 때 명명 된 이벤트를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="833301d35066acbe6983033522f26cd4a786ebaf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-e&lt;/code&gt;, Enable interpretation of backslash escapes</source>
          <target state="translated">&lt;code&gt;-e&lt;/code&gt; , 백 슬래시 이스케이프 해석 가능</target>
        </trans-unit>
        <trans-unit id="c157bf596bde51ca00546421fd8bff33fda0be1a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-f FILE&lt;/code&gt; returns true if &lt;code&gt;FILE&lt;/code&gt; is a regular file.</source>
          <target state="translated">&lt;code&gt;-f FILE&lt;/code&gt; 은 &lt;code&gt;FILE&lt;/code&gt; 이 일반 파일 인 경우 true를 리턴 합니다.</target>
        </trans-unit>
        <trans-unit id="d8a203dcb4901c7273acc8d26f9497e76209f8e8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-f&lt;/code&gt; or &lt;code&gt;--features=FEATURES&lt;/code&gt; enables one or more feature flags (separated by a comma). These are how fish stages changes that might break scripts.</source>
          <target state="translated">&lt;code&gt;-f&lt;/code&gt; 또는 &lt;code&gt;--features=FEATURES&lt;/code&gt; 는 하나 이상의 기능 플래그 (쉼표로 구분)를 활성화합니다. 이것은 물고기 단계가 스크립트를 깨뜨릴 수있는 방법입니다.</target>
        </trans-unit>
        <trans-unit id="7839db86643d49c3802d115090c16caa4e981a2a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-f&lt;/code&gt; or &lt;code&gt;--file-size&lt;/code&gt;: the maximum size of files created by the shell.</source>
          <target state="translated">&lt;code&gt;-f&lt;/code&gt; 또는 &lt;code&gt;--file-size&lt;/code&gt; : 셸에서 만든 파일의 최대 크기입니다.</target>
        </trans-unit>
        <trans-unit id="f54fb7222582e9eddc96e7f09f4774ebb3bc75bc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-f&lt;/code&gt; or &lt;code&gt;--file&lt;/code&gt; will cause psub to use a regular file instead of a named pipe to communicate with the calling process. This will cause &lt;code&gt;psub&lt;/code&gt; to be significantly slower when large amounts of data are involved, but has the advantage that the reading process can seek in the stream. This is the default.</source>
          <target state="translated">&lt;code&gt;-f&lt;/code&gt; 또는 &lt;code&gt;--file&lt;/code&gt; 은 psub가 명명 된 파이프 대신 일반 파일을 사용하여 호출 프로세스와 통신하게합니다. 이로 인해 많은 양의 데이터가 관련된 경우 &lt;code&gt;psub&lt;/code&gt; 가 상당히 느려질 수 있지만 읽기 프로세스가 스트림에서 검색 할 수 있다는 장점이 있습니다. 이것이 기본값입니다.</target>
        </trans-unit>
        <trans-unit id="367b1b980d53af672199b4836b7cac60b166fb30" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-f&lt;/code&gt; or &lt;code&gt;--function-names&lt;/code&gt; Display a list of available input functions</source>
          <target state="translated">&lt;code&gt;-f&lt;/code&gt; 또는 &lt;code&gt;--function-names&lt;/code&gt; 사용 가능한 입력 기능 목록을 표시합니다.</target>
        </trans-unit>
        <trans-unit id="3824139298a5843b0ae039e5de965f163e195909" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-f&lt;/code&gt; or &lt;code&gt;--function&lt;/code&gt; inject readline functions into the reader. This option cannot be combined with any other option. It will cause any additional arguments to be interpreted as readline functions, and these functions will be injected into the reader, so that they will be returned to the reader before any additional actual key presses are read.</source>
          <target state="translated">&lt;code&gt;-f&lt;/code&gt; 또는 &lt;code&gt;--function&lt;/code&gt; 은 판독 선 기능을 판독기에 주입합니다. 이 옵션은 다른 옵션과 함께 사용할 수 없습니다. 추가 인수는 readline 함수로 해석되며,이 함수는 추가 실제 키 누름을 읽기 전에 판독기로 반환되도록 판독기에 주입됩니다.</target>
        </trans-unit>
        <trans-unit id="5c25d8422096b8dd5990544165bc7d86722f41d8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-f&lt;/code&gt; or &lt;code&gt;--no-files&lt;/code&gt; specifies that the options specified by this completion may not be followed by a filename.</source>
          <target state="translated">&lt;code&gt;-f&lt;/code&gt; 또는 &lt;code&gt;--no-files&lt;/code&gt; 는이 완료로 지정된 옵션 뒤에 파일 이름이 올 수 없도록 지정합니다.</target>
        </trans-unit>
        <trans-unit id="2821c1f18b37e502938dfddc66023f1d7df616d2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-f&lt;/code&gt; or &lt;code&gt;--no-functions&lt;/code&gt; suppresses function and builtin lookup.</source>
          <target state="translated">&lt;code&gt;-f&lt;/code&gt; 또는 &lt;code&gt;--no-functions&lt;/code&gt; 는 기능 및 내장 조회를 억제합니다.</target>
        </trans-unit>
        <trans-unit id="62638d54fadc3da6a2c5ef098597ad39ba88c2de" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-g FILE&lt;/code&gt; returns true if &lt;code&gt;FILE&lt;/code&gt; has the set-group-ID bit set.</source>
          <target state="translated">&lt;code&gt;-g FILE&lt;/code&gt; 은 &lt;code&gt;FILE&lt;/code&gt; 에 set-group-ID 비트가 설정되어 있으면 true를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="aa32c159ddc6d13fe9825b9aad46998e6878767a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-g&lt;/code&gt; or &lt;code&gt;--global&lt;/code&gt; Never automatically release the lock</source>
          <target state="translated">&lt;code&gt;-g&lt;/code&gt; 또는 &lt;code&gt;--global&lt;/code&gt; 잠금을 자동으로 해제하지 마십시오</target>
        </trans-unit>
        <trans-unit id="c8862d61ca2ab2921292276ce5571c7110c67a08" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-g&lt;/code&gt; or &lt;code&gt;--global&lt;/code&gt; causes the specified shell variable to be given a global scope. Non-global variables disappear when the block they belong to ends</source>
          <target state="translated">&lt;code&gt;-g&lt;/code&gt; 또는 &lt;code&gt;--global&lt;/code&gt; 은 지정된 쉘 변수에 전역 범위가 지정되도록합니다. 비전 역 변수는 속한 블록이 끝나면 사라집니다</target>
        </trans-unit>
        <trans-unit id="42b9fff6a53dafa7d6ff5234d6e7e414e793cd66" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-g&lt;/code&gt; or &lt;code&gt;--global&lt;/code&gt; makes the variables global.</source>
          <target state="translated">&lt;code&gt;-g&lt;/code&gt; 또는 &lt;code&gt;--global&lt;/code&gt; 은 변수를 전역으로 만듭니다.</target>
        </trans-unit>
        <trans-unit id="2521c42d50af2728233b9238068cb6f26a8677a4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-g&lt;/code&gt; or &lt;code&gt;--global&lt;/code&gt; to use a global variable.</source>
          <target state="translated">&lt;code&gt;-g&lt;/code&gt; 전역 변수를 사용하려면 -g 또는 &lt;code&gt;--global&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7fb68bb57eac9cd6c857ebe9a06a4b927d814748" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-g&lt;/code&gt; or &lt;code&gt;--group&lt;/code&gt; only prints the group ID of each job.</source>
          <target state="translated">&lt;code&gt;-g&lt;/code&gt; 또는 &lt;code&gt;--group&lt;/code&gt; 은 각 작업의 그룹 ID 만 인쇄합니다.</target>
        </trans-unit>
        <trans-unit id="20e98bb361b67679f78d574b46cdcfcf936202a5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-h&lt;/code&gt; or &lt;code&gt;--help&lt;/code&gt; display help for this command.</source>
          <target state="translated">&lt;code&gt;-h&lt;/code&gt; 또는 &lt;code&gt;--help&lt;/code&gt; 는이 명령에 대한 도움말을 표시합니다.</target>
        </trans-unit>
        <trans-unit id="fa62117127b0729fe98580835d320d16100bf561" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-h&lt;/code&gt; or &lt;code&gt;--help&lt;/code&gt; displays help about using this command.</source>
          <target state="translated">&lt;code&gt;-h&lt;/code&gt; 또는 &lt;code&gt;--help&lt;/code&gt; 는이 명령 사용에 대한 도움말을 표시합니다.</target>
        </trans-unit>
        <trans-unit id="361f91af80d0f6ddacdffab758ca5ef187506751" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-h&lt;/code&gt; or &lt;code&gt;--help&lt;/code&gt; prints this message.</source>
          <target state="translated">&lt;code&gt;-h&lt;/code&gt; 또는 &lt;code&gt;--help&lt;/code&gt; 가이 메시지를 인쇄합니다.</target>
        </trans-unit>
        <trans-unit id="a93a61846e7442e3b461eff0ee724d929367424f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-h&lt;/code&gt; or &lt;code&gt;--help&lt;/code&gt; prints usage information.</source>
          <target state="translated">&lt;code&gt;-h&lt;/code&gt; 또는 &lt;code&gt;--help&lt;/code&gt; 는 사용 정보를 인쇄합니다.</target>
        </trans-unit>
        <trans-unit id="b845a0833a08541f363d56024c78c95b1183620a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-i&lt;/code&gt; or &lt;code&gt;--index&lt;/code&gt; print the word index</source>
          <target state="translated">&lt;code&gt;-i&lt;/code&gt; 또는 &lt;code&gt;--index&lt;/code&gt; 단어 색인을 인쇄합니다</target>
        </trans-unit>
        <trans-unit id="11a7e7fcc208641aef0c1e3a7aa6941055c2684b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-i&lt;/code&gt; or &lt;code&gt;--insert&lt;/code&gt; do not remove the current commandline, insert the specified string at the current cursor position</source>
          <target state="translated">&lt;code&gt;-i&lt;/code&gt; 또는 &lt;code&gt;--insert&lt;/code&gt; 는 현재 명령 행을 제거하지 않고 현재 커서 위치에 지정된 문자열을 삽입합니다.</target>
        </trans-unit>
        <trans-unit id="74f713d945e6b04b9c35f3982b4286157db1e5bc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-i&lt;/code&gt; or &lt;code&gt;--interactive&lt;/code&gt; Force opening the function body in the built-in editor even if &lt;code&gt;$VISUAL&lt;/code&gt; or &lt;code&gt;$EDITOR&lt;/code&gt; is defined.</source>
          <target state="translated">&lt;code&gt;-i&lt;/code&gt; 또는 &lt;code&gt;--interactive&lt;/code&gt; &lt;code&gt;$VISUAL&lt;/code&gt; 또는 &lt;code&gt;$EDITOR&lt;/code&gt; 가 정의 된 경우에도 내장 편집기에서 함수 본문을 강제로 엽니 다 .</target>
        </trans-unit>
        <trans-unit id="3cfbd6746407e4463c5ddd8cfce718c1576e7073" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-i&lt;/code&gt; or &lt;code&gt;--interactive&lt;/code&gt; specify that fish is to run in interactive mode</source>
          <target state="translated">&lt;code&gt;-i&lt;/code&gt; 또는 &lt;code&gt;--interactive&lt;/code&gt; 물고기가 대화식 모드로 실행되도록 지정</target>
        </trans-unit>
        <trans-unit id="8617e068c22f296bcd6cf43f711b810d1fa66503" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-i&lt;/code&gt; or &lt;code&gt;--no-indent&lt;/code&gt; do not indent commands; only reformat to one job per line.</source>
          <target state="translated">&lt;code&gt;-i&lt;/code&gt; 또는 &lt;code&gt;--no-indent&lt;/code&gt; 는 명령을 들여 쓰지 않습니다. 한 줄에 하나의 작업으로 다시 포맷하십시오.</target>
        </trans-unit>
        <trans-unit id="e2d1d04ab4b2016decc63e2e5303fbf409e3500f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-i&lt;/code&gt;, &lt;code&gt;--italics&lt;/code&gt; sets italics mode.</source>
          <target state="translated">&lt;code&gt;-i&lt;/code&gt; , &lt;code&gt;--italics&lt;/code&gt; 는 이탤릭체 모드를 설정합니다.</target>
        </trans-unit>
        <trans-unit id="ba7e635219584e39a4410b3e90d74e2e7e2078f8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-j PGID&lt;/code&gt; or &lt;code&gt;--on-job-exit PGID&lt;/code&gt; tells fish to run this function when the job with group ID PGID exits. Instead of PGID, the string 'caller' can be specified. This is only legal when in a command substitution, and will result in the handler being triggered by the exit of the job which created this command substitution.</source>
          <target state="translated">&lt;code&gt;-j PGID&lt;/code&gt; 또는 &lt;code&gt;--on-job-exit PGID&lt;/code&gt; 는 그룹 ID가 PGID 인 작업이 종료 될 때 피쉬에게이 기능을 실행하도록 지시합니다. PGID 대신 문자열 'caller'를 지정할 수 있습니다. 이는 명령 대체시에만 유효하며 핸들러가이 명령 대체를 작성한 작업의 종료에 의해 트리거됩니다.</target>
        </trans-unit>
        <trans-unit id="709342cfce9431c723f6de71eb01b029ca7ad1c3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-j&lt;/code&gt; or &lt;code&gt;--current-job&lt;/code&gt; select the current job</source>
          <target state="translated">&lt;code&gt;-j&lt;/code&gt; 또는 &lt;code&gt;--current-job&lt;/code&gt; 현재 작업을 선택하십시오.</target>
        </trans-unit>
        <trans-unit id="7034d26c617fcf34b9bbdef6be7a76ffdb47443e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-k FILE&lt;/code&gt; returns true if &lt;code&gt;FILE&lt;/code&gt; has the sticky bit set. If the OS does not support the concept it returns false. See &lt;a href=&quot;https://en.wikipedia.org/wiki/Sticky_bit&quot;&gt;https://en.wikipedia.org/wiki/Sticky_bit&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;-k FILE&lt;/code&gt; 은 &lt;code&gt;FILE&lt;/code&gt; 에 고정 비트가 설정되어 있으면 true를 리턴합니다 . OS가이 개념을 지원하지 않으면 false를 반환합니다. &lt;a href=&quot;https://en.wikipedia.org/wiki/Sticky_bit&quot;&gt;https://en.wikipedia.org/wiki/Sticky_bit를&lt;/a&gt; 참조 하십시오 .</target>
        </trans-unit>
        <trans-unit id="051156d49bd39493fbdfdabd9b98bf7edbfda903" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-k&lt;/code&gt; or &lt;code&gt;--keep-order&lt;/code&gt; preserves the order of the &lt;code&gt;OPTION_ARGUMENTS&lt;/code&gt; specified via &lt;code&gt;-a&lt;/code&gt; or &lt;code&gt;--arguments&lt;/code&gt; instead of sorting alphabetically.</source>
          <target state="translated">&lt;code&gt;-k&lt;/code&gt; 또는 &lt;code&gt;--keep-order&lt;/code&gt; 는 알파벳순으로 정렬하는 대신 &lt;code&gt;-a&lt;/code&gt; 또는 &lt;code&gt;--arguments&lt;/code&gt; 를 통해 지정된 &lt;code&gt;OPTION_ARGUMENTS&lt;/code&gt; 의 순서를 유지합니다 .</target>
        </trans-unit>
        <trans-unit id="dd0922d9ecc7a5382ba1c3f7a2f6b435ab60374b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-k&lt;/code&gt; or &lt;code&gt;--key&lt;/code&gt; Specify a key name, such as 'left' or 'backspace' instead of a character sequence</source>
          <target state="translated">&lt;code&gt;-k&lt;/code&gt; 또는 &lt;code&gt;--key&lt;/code&gt; 문자 시퀀스 대신 'left'또는 'backspace'와 같은 키 이름을 지정하십시오.</target>
        </trans-unit>
        <trans-unit id="3748ccfb229666681aec6ee61ddca009c79a011b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-l LONG_OPTION&lt;/code&gt; or &lt;code&gt;--long-option=LONG_OPTION&lt;/code&gt; adds a GNU style long option to the completions list.</source>
          <target state="translated">&lt;code&gt;-l LONG_OPTION&lt;/code&gt; 또는 &lt;code&gt;--long-option=LONG_OPTION&lt;/code&gt; 은 GNU 스타일의 long 옵션을 완료 목록에 추가합니다.</target>
        </trans-unit>
        <trans-unit id="0c968115864736e820bfa8b0ce66b2eae9c91424" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-l&lt;/code&gt; or &lt;code&gt;--last&lt;/code&gt; prints only the last job to be started.</source>
          <target state="translated">&lt;code&gt;-l&lt;/code&gt; 또는 &lt;code&gt;--last&lt;/code&gt; 는 마지막으로 시작된 작업 만 인쇄합니다.</target>
        </trans-unit>
        <trans-unit id="4164e3a6290299e98618681a4d498ee96a9a9519" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-l&lt;/code&gt; or &lt;code&gt;--list-signals&lt;/code&gt; prints a list of signal names.</source>
          <target state="translated">&lt;code&gt;-l&lt;/code&gt; 또는 &lt;code&gt;--list-signals&lt;/code&gt; 는 신호 이름 목록을 인쇄합니다.</target>
        </trans-unit>
        <trans-unit id="7c297a1bcd1e3ec04a461ecbd485f54f31aa1826" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-l&lt;/code&gt; or &lt;code&gt;--list&lt;/code&gt; Lists all abbreviated words.</source>
          <target state="translated">&lt;code&gt;-l&lt;/code&gt; 또는 &lt;code&gt;--list&lt;/code&gt; 모든 축약어를 나열합니다.</target>
        </trans-unit>
        <trans-unit id="1c65d1a53603e17bf56d4000d9bde21d44ef2d31" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-l&lt;/code&gt; or &lt;code&gt;--local&lt;/code&gt; Release the block automatically at the end of the current innermost code block scope</source>
          <target state="translated">&lt;code&gt;-l&lt;/code&gt; 또는 &lt;code&gt;--local&lt;/code&gt; 현재 가장 안쪽의 코드 블록 범위 끝에서 자동으로 블록을 해제합니다</target>
        </trans-unit>
        <trans-unit id="945e4dcf4dc82d3672ad52ce728b5be496a38304" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-l&lt;/code&gt; or &lt;code&gt;--local&lt;/code&gt; forces the specified shell variable to be given a scope that is local to the current block, even if a variable with the given name exists and is non-local</source>
          <target state="translated">&lt;code&gt;-l&lt;/code&gt; 또는 &lt;code&gt;--local&lt;/code&gt; 은 지정된 이름을 가진 변수가 존재하고 로컬이 아닌 경우에도 지정된 쉘 변수에 현재 블록의 로컬 범위를 제공하도록합니다.</target>
        </trans-unit>
        <trans-unit id="5bfc9a0f63c1733c700284fc467bd983754842c7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-l&lt;/code&gt; or &lt;code&gt;--local&lt;/code&gt; makes the variables local.</source>
          <target state="translated">&lt;code&gt;-l&lt;/code&gt; 또는 &lt;code&gt;--local&lt;/code&gt; 은 변수를 로컬로 만듭니다.</target>
        </trans-unit>
        <trans-unit id="334495b8dfc108c8117a2034b4f36e7545df43b3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-l&lt;/code&gt; or &lt;code&gt;--lock-size&lt;/code&gt;: the maximum size that may be locked into memory.</source>
          <target state="translated">&lt;code&gt;-l&lt;/code&gt; 또는 &lt;code&gt;--lock-size&lt;/code&gt; : 메모리에 잠길 수있는 최대 크기입니다.</target>
        </trans-unit>
        <trans-unit id="816b502458ad94052c7edb2e6bb6189162802314" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-l&lt;/code&gt; or &lt;code&gt;--login&lt;/code&gt; specify that fish is to run as a login shell</source>
          <target state="translated">&lt;code&gt;-l&lt;/code&gt; 또는 &lt;code&gt;--login&lt;/code&gt; 은 물고기가 로그인 쉘로 실행되도록 지정합니다.</target>
        </trans-unit>
        <trans-unit id="82db7181c806c9ed89a1ed2f7b1c9a0d986794a3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-l&lt;/code&gt; or &lt;code&gt;--long&lt;/code&gt; takes a string that is used as the long flag in the option being defined. This option is optional and has no default. If no long flag is defined then only the short flag will be allowed when parsing arguments using the option spec.</source>
          <target state="translated">&lt;code&gt;-l&lt;/code&gt; 또는 &lt;code&gt;--long&lt;/code&gt; 은 정의되는 옵션에서 long 플래그로 사용되는 문자열을 사용합니다. 이 옵션은 선택 사항이며 기본값이 없습니다. long 플래그가 정의되지 않은 경우 옵션 spec을 사용하여 인수를 구문 분석 할 때 short 플래그 만 허용됩니다.</target>
        </trans-unit>
        <trans-unit id="d81671ef56e4c9fe71bb02f6a33c00022bb2ae22" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-m NEW_MODE&lt;/code&gt; or &lt;code&gt;--sets-mode NEW_MODE&lt;/code&gt; Change the current mode to &lt;code&gt;NEW_MODE&lt;/code&gt; after this binding is executed</source>
          <target state="translated">&lt;code&gt;-m NEW_MODE&lt;/code&gt; 또는 &lt;code&gt;--sets-mode NEW_MODE&lt;/code&gt; 이 바인딩이 실행 된 후 현재 모드를 &lt;code&gt;NEW_MODE&lt;/code&gt; 로 변경</target>
        </trans-unit>
        <trans-unit id="9fda883bdd3ef12205898fb3b7908c24297e8cea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-m&lt;/code&gt; or &lt;code&gt;--resident-set-size&lt;/code&gt;: the maximum resident set size.</source>
          <target state="translated">&lt;code&gt;-m&lt;/code&gt; 또는 &lt;code&gt;--resident-set-size&lt;/code&gt; : 최대 상주 세트 크기입니다.</target>
        </trans-unit>
        <trans-unit id="c8fd516846ee8b21cb67b009747566aac32a28e6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-n NCHARS&lt;/code&gt; or &lt;code&gt;--nchars=NCHARS&lt;/code&gt; makes &lt;code&gt;read&lt;/code&gt; return after reading NCHARS characters or the end of the line, whichever comes first.</source>
          <target state="translated">&lt;code&gt;-n NCHARS&lt;/code&gt; 또는 &lt;code&gt;--nchars=NCHARS&lt;/code&gt; 는 NCHARS 문자 또는 행 끝을 읽은 후 &lt;code&gt;read&lt;/code&gt; 리턴을 작성합니다 (둘 중 먼저 오는 것).</target>
        </trans-unit>
        <trans-unit id="42d06c8b6f9ce9da1f98730916a28fb7d97567d8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-n STRING&lt;/code&gt; returns true if the length of &lt;code&gt;STRING&lt;/code&gt; is non-zero.</source>
          <target state="translated">&lt;code&gt;-n STRING&lt;/code&gt; 은 길이 true를 반환 &lt;code&gt;STRING&lt;/code&gt; 이 제로가 아닌.</target>
        </trans-unit>
        <trans-unit id="b121398ced700e0e7ffc6178509480268661dc23" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-n&lt;/code&gt; or &lt;code&gt;--condition&lt;/code&gt; specifies a shell command that must return 0 if the completion is to be used. This makes it possible to specify completions that should only be used in some cases.</source>
          <target state="translated">&lt;code&gt;-n&lt;/code&gt; 또는 &lt;code&gt;--condition&lt;/code&gt; 은 완료를 사용하려면 0을 리턴해야하는 쉘 명령을 지정합니다. 이를 통해 일부 경우에만 사용해야하는 완료를 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3eb0a954f3cee9ffc7b02714da619e72fc2ff985" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-n&lt;/code&gt; or &lt;code&gt;--file-descriptor-count&lt;/code&gt;: the maximum number of open file descriptors (most systems do not allow this value to be set).</source>
          <target state="translated">&lt;code&gt;-n&lt;/code&gt; 또는 &lt;code&gt;--file-descriptor-count&lt;/code&gt; : 열린 파일 디스크립터의 최대 수입니다 (대부분의 시스템에서는이 값을 설정할 수 없습니다).</target>
        </trans-unit>
        <trans-unit id="04b03a1ee4a6f0d46f09b6169d1fa9c2c61c3b9a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-n&lt;/code&gt; or &lt;code&gt;--name&lt;/code&gt; is the command name to insert into any error messages. If you don't provide this value &lt;code&gt;argparse&lt;/code&gt; will be used.</source>
          <target state="translated">&lt;code&gt;-n&lt;/code&gt; 또는 &lt;code&gt;--name&lt;/code&gt; 은 오류 메시지에 삽입 할 명령 이름입니다. 이 값을 제공하지 않으면 &lt;code&gt;argparse&lt;/code&gt; 가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="fca2dbc519278a972d5cae10b8aa9342a7fdfb05" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-n&lt;/code&gt; or &lt;code&gt;--names&lt;/code&gt; List only the names of all defined variables, not their value. The names are guaranteed to be sorted.</source>
          <target state="translated">&lt;code&gt;-n&lt;/code&gt; 또는 &lt;code&gt;--names&lt;/code&gt; 값이 아닌 정의 된 모든 변수의 이름 만 나열합니다. 이름이 정렬되도록 보장됩니다.</target>
        </trans-unit>
        <trans-unit id="23fd79e3f88f8cf880d9473d5fcf14aca6160c52" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-n&lt;/code&gt; or &lt;code&gt;--names&lt;/code&gt; List the names of all defined builtins</source>
          <target state="translated">&lt;code&gt;-n&lt;/code&gt; 또는 &lt;code&gt;--names&lt;/code&gt; 정의 된 모든 내장 이름을 나열합니다.</target>
        </trans-unit>
        <trans-unit id="729efce2e6efa162cc3d7d605d7dd06c8976251b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-n&lt;/code&gt; or &lt;code&gt;--names&lt;/code&gt; lists the names of all defined functions.</source>
          <target state="translated">&lt;code&gt;-n&lt;/code&gt; 또는 &lt;code&gt;--names&lt;/code&gt; 는 정의 된 모든 함수의 이름을 나열합니다.</target>
        </trans-unit>
        <trans-unit id="514fe35df7b3a21ba2bb479b2a728ed8cbdc6d9b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-n&lt;/code&gt; or &lt;code&gt;--no-execute&lt;/code&gt; do not execute any commands, only perform syntax checking</source>
          <target state="translated">&lt;code&gt;-n&lt;/code&gt; 또는 &lt;code&gt;--no-execute&lt;/code&gt; 는 명령을 실행 하지 않고 구문 검사 만 수행합니다.</target>
        </trans-unit>
        <trans-unit id="c42f435ef2af2881e6cccf39e21c784be7bc15ae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-n&lt;/code&gt;, Do not output a newline</source>
          <target state="translated">&lt;code&gt;-n&lt;/code&gt; , 개행을 출력하지 않습니다</target>
        </trans-unit>
        <trans-unit id="61d8520a9cca524397e5cb6e004f9b92f1a77926" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-o LONG_OPTION&lt;/code&gt; or &lt;code&gt;--old-option=LONG_OPTION&lt;/code&gt; adds an old style long option to the completions list (See below for details).</source>
          <target state="translated">&lt;code&gt;-o LONG_OPTION&lt;/code&gt; 또는 &lt;code&gt;--old-option=LONG_OPTION&lt;/code&gt; 은 오래된 스타일의 long 옵션을 완성 목록에 추가합니다 (자세한 내용은 아래 참조).</target>
        </trans-unit>
        <trans-unit id="98223db51ab070feeed508f88e529aec442f880e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-o&lt;/code&gt; or &lt;code&gt;--optional&lt;/code&gt; means the option being defined can take a value but it is optional rather than required. If the option is seen more than once when parsing arguments only the last value seen is saved. This means the resulting flag variable created by &lt;code&gt;argparse&lt;/code&gt; will zero elements if no value was given with the option else it will have exactly one element.</source>
          <target state="translated">&lt;code&gt;-o&lt;/code&gt; 또는 &lt;code&gt;--optional&lt;/code&gt; 은 정의중인 옵션이 값을 가질 수 있지만 필수가 아니라 선택적입니다. 인수를 구문 분석 할 때 옵션이 두 번 이상 표시되면 마지막으로 본 값만 저장됩니다. 이것은 옵션으로 값이 주어지지 않으면 &lt;code&gt;argparse&lt;/code&gt; 에 의해 생성 된 결과 플래그 변수 는 0 요소가되고 그렇지 않으면 정확히 하나의 요소가됩니다.</target>
        </trans-unit>
        <trans-unit id="25654b63562054b9b5beec989ee33499a1bc2273" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-o&lt;/code&gt; or &lt;code&gt;--tokenize&lt;/code&gt; tokenize the selection and print one string-type token per line</source>
          <target state="translated">&lt;code&gt;-o&lt;/code&gt; 또는 &lt;code&gt;--tokenize&lt;/code&gt; 는 선택을 토큰 화하고 한 줄에 하나의 문자열 유형 토큰을 인쇄합니다.</target>
        </trans-unit>
        <trans-unit id="ea9f09eb8f39f5666a127e1737e8d72b83e79405" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-o&lt;/code&gt;, &lt;code&gt;--bold&lt;/code&gt; sets bold mode.</source>
          <target state="translated">&lt;code&gt;-o&lt;/code&gt; , &lt;code&gt;--bold&lt;/code&gt; 는 굵게 모드를 설정합니다.</target>
        </trans-unit>
        <trans-unit id="b8a180101e521c5801a77444d908ab8143cbd533" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-p COMMAND&lt;/code&gt; or &lt;code&gt;--path COMMAND&lt;/code&gt; specifies that &lt;code&gt;COMMAND&lt;/code&gt; is the absolute path of the program (optionally containing wildcards).</source>
          <target state="translated">&lt;code&gt;-p COMMAND&lt;/code&gt; 또는 &lt;code&gt;--path COMMAND&lt;/code&gt; 는 &lt;code&gt;COMMAND&lt;/code&gt; 가 프로그램의 절대 경로 (선택적으로 와일드 카드를 포함) 임을 지정합니다 .</target>
        </trans-unit>
        <trans-unit id="6620a055ad7181ac75a7845258925f44d24e61b8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-p FILE&lt;/code&gt; returns true if &lt;code&gt;FILE&lt;/code&gt; is a named pipe.</source>
          <target state="translated">&lt;code&gt;-p FILE&lt;/code&gt; 은 &lt;code&gt;FILE&lt;/code&gt; 이 명명 된 파이프 인 경우 true를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="ec30c3e683f05d6158efa3f71b07ecccfc2daf3f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-p PID&lt;/code&gt; or &lt;code&gt;--on-process-exit PID&lt;/code&gt; tells fish to run this function when the fish child process with process ID PID exits. Instead of a PID, for backward compatibility, &quot;`%self`&quot; can be specified as an alias for &lt;code&gt;$fish_pid&lt;/code&gt;, and the function will be run when the current fish instance exits.</source>
          <target state="translated">&lt;code&gt;-p PID&lt;/code&gt; 또는 &lt;code&gt;--on-process-exit PID&lt;/code&gt; 는 프로세스 ID PID가있는 fish 하위 프로세스가 종료 될 때 물고기에게이 기능을 실행하도록 지시합니다. 이전 버전과의 호환성을 위해 PID 대신 &quot;`% self`&quot;를 &lt;code&gt;$fish_pid&lt;/code&gt; 의 별명으로 지정할 수 있으며 현재 피쉬 인스턴스가 종료 될 때 함수가 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="ce9966574989555db3783a9d5257f3c3688a8e5f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-p PROMPT_CMD&lt;/code&gt; or &lt;code&gt;--prompt=PROMPT_CMD&lt;/code&gt; uses the output of the shell command &lt;code&gt;PROMPT_CMD&lt;/code&gt; as the prompt for the interactive mode. The default prompt command is &lt;code&gt;set_color green; echo read; set_color normal; echo &quot;&amp;gt; &quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;-p PROMPT_CMD&lt;/code&gt; 또는 &lt;code&gt;--prompt=PROMPT_CMD&lt;/code&gt; 는 대화식 모드의 프롬프트로 쉘 명령 &lt;code&gt;PROMPT_CMD&lt;/code&gt; 의 출력을 사용 합니다. 기본 프롬프트 명령은 &lt;code&gt;set_color green; echo read; set_color normal; echo &quot;&amp;gt; &quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8b39afed9ae3d18a0a5d4ab2b51c9285c3afefc8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-p&lt;/code&gt; or &lt;code&gt;--as-command&lt;/code&gt; outputs the umask in a form that may be reused as input</source>
          <target state="translated">&lt;code&gt;-p&lt;/code&gt; 또는 &lt;code&gt;--as-command&lt;/code&gt; 는 입력으로 재사용 할 수있는 형태로 umask를 출력합니다.</target>
        </trans-unit>
        <trans-unit id="95b9ca0a0592cb56cbba102f8c7a3cc1981ee5e2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-p&lt;/code&gt; or &lt;code&gt;--current-process&lt;/code&gt; select the current process</source>
          <target state="translated">&lt;code&gt;-p&lt;/code&gt; 또는 &lt;code&gt;--current-process&lt;/code&gt; 현재 프로세스를 선택하십시오.</target>
        </trans-unit>
        <trans-unit id="774ba50368b7d8d39eb11485bfdfda76d8bf944c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-p&lt;/code&gt; or &lt;code&gt;--path&lt;/code&gt; returns the name of the disk file that would be executed, or nothing if &lt;code&gt;type -t name&lt;/code&gt; would not return &lt;code&gt;file&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;-p&lt;/code&gt; 또는 &lt;code&gt;--path&lt;/code&gt; 는 실행될 디스크 파일의 이름을 반환하거나 &lt;code&gt;type -t name&lt;/code&gt; 이 &lt;code&gt;file&lt;/code&gt; 을 반환하지 않으면 아무 것도 반환하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="99f54997cf90f1bc4aa9126d82a33a302b568824" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-p&lt;/code&gt; or &lt;code&gt;--pid&lt;/code&gt; prints the process ID for each process in all jobs.</source>
          <target state="translated">&lt;code&gt;-p&lt;/code&gt; 또는 &lt;code&gt;--pid&lt;/code&gt; 는 모든 작업에서 각 프로세스의 프로세스 ID를 인쇄합니다.</target>
        </trans-unit>
        <trans-unit id="a53544b83b7cab15224f0a7dcc9b651b34ff925f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-p&lt;/code&gt; or &lt;code&gt;--prefix&lt;/code&gt; searches or deletes items in the history that begin with the specified text string. This is not currently supported by the &lt;code&gt;--delete&lt;/code&gt; flag.</source>
          <target state="translated">&lt;code&gt;-p&lt;/code&gt; 또는 &lt;code&gt;--prefix&lt;/code&gt; 는 지정된 텍스트 문자열로 시작하는 내역에서 항목을 검색하거나 삭제합니다. 이것은 현재 &lt;code&gt;--delete&lt;/code&gt; 플래그 에서 지원되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="babfdfb430d1aa4b61fe75b5bc88a8726272b2a9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-p&lt;/code&gt; or &lt;code&gt;--prepend&lt;/code&gt; causes the values to be prepended to the current set of values for the variable. This can be used with &lt;code&gt;--append&lt;/code&gt; to both append and prepend at the same time. This cannot be used when assigning to a variable slice.</source>
          <target state="translated">&lt;code&gt;-p&lt;/code&gt; 또는 &lt;code&gt;--prepend&lt;/code&gt; 는 변수의 현재 값 세트 앞에 값을 추가합니다. &lt;code&gt;--append&lt;/code&gt; 와 함께 사용 하여 동시에 추가 및 추가 할 수 있습니다 . 변수 슬라이스에 할당 할 때는 사용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="f01889746a1bb81a7c5b108fd4b45d4e7030fd87" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-p&lt;/code&gt; or &lt;code&gt;--print&lt;/code&gt; prints all defined signal handlers.</source>
          <target state="translated">&lt;code&gt;-p&lt;/code&gt; 또는 &lt;code&gt;--print&lt;/code&gt; 는 정의 된 모든 신호 처리기를 인쇄합니다.</target>
        </trans-unit>
        <trans-unit id="e068cb26868cd1f61a2a6747f95e3dc1850cbae6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-p&lt;/code&gt; or &lt;code&gt;--profile=PROFILE_FILE&lt;/code&gt; when fish exits, output timing information on all executed commands to the specified file</source>
          <target state="translated">&lt;code&gt;-p&lt;/code&gt; 피쉬 &lt;code&gt;--profile=PROFILE_FILE&lt;/code&gt; -p 또는 --profile = PROFILE_FILE , 실행 된 모든 명령에 대한 타이밍 정보를 지정된 파일로 출력</target>
        </trans-unit>
        <trans-unit id="c4e5830ead3ac5a621da6558ed9d44670a9f886e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-q&lt;/code&gt; or &lt;code&gt;--query&lt;/code&gt; test if the specified variable names are defined. Does not output anything, but the builtins exit status is the number of variables specified that were not defined.</source>
          <target state="translated">&lt;code&gt;-q&lt;/code&gt; 지정된 변수 이름이 정의되어 있는지 -q 또는 &lt;code&gt;--query&lt;/code&gt; 테스트합니다. 아무것도 출력하지 않지만 내장 종료 상태는 정의되지 않은 지정된 변수의 수입니다.</target>
        </trans-unit>
        <trans-unit id="735530980eb1302c060d0e742b425fb4326e9537" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-q&lt;/code&gt; or &lt;code&gt;--query&lt;/code&gt; tests if the specified functions exist.</source>
          <target state="translated">&lt;code&gt;-q&lt;/code&gt; 또는 &lt;code&gt;--query&lt;/code&gt; 는 지정된 함수가 존재하는지 테스트합니다.</target>
        </trans-unit>
        <trans-unit id="85e97dda561c6501abf8a2477d7e93312571fb7d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-q&lt;/code&gt; or &lt;code&gt;--quiet&lt;/code&gt; prints no output for evaluation of jobs by exit code only.</source>
          <target state="translated">&lt;code&gt;-q&lt;/code&gt; 또는 &lt;code&gt;--quiet&lt;/code&gt; 은 종료 코드로만 작업을 평가하기위한 출력을 인쇄하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="4ce643b4ab44dfecd805ff8ce5a254f8321d122b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-q&lt;/code&gt; or &lt;code&gt;--quiet&lt;/code&gt; suppresses all output; this is useful when testing the exit status.</source>
          <target state="translated">&lt;code&gt;-q&lt;/code&gt; 또는 &lt;code&gt;--quiet&lt;/code&gt; 는 모든 출력을 억제합니다. 종료 상태를 테스트 할 때 유용합니다.</target>
        </trans-unit>
        <trans-unit id="5e7e55d20a35de3a8e342c4ea4204e6a3db7a124" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-q&lt;/code&gt; or &lt;code&gt;--quiet&lt;/code&gt;, in conjunction with &lt;code&gt;-s&lt;/code&gt;, silences the output and prints nothing, setting only the exit code.</source>
          <target state="translated">&lt;code&gt;-q&lt;/code&gt; 또는 &lt;code&gt;--quiet&lt;/code&gt; 은 &lt;code&gt;-s&lt;/code&gt; 와 함께 출력을 침묵시키고 종료 코드 만 설정하여 아무 것도 인쇄하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="06ecd71e78c4ca953744527fe9c3babca754ec70" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-r FILE&lt;/code&gt; returns true if &lt;code&gt;FILE&lt;/code&gt; is marked as readable.</source>
          <target state="translated">&lt;code&gt;-r FILE&lt;/code&gt; 은 &lt;code&gt;FILE&lt;/code&gt; 이 읽기 가능으로 표시 되면 true를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="7c60ccac4e4109c73df2059ba1aea2b0933d7e47" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-r OLD_WORD NEW_WORD&lt;/code&gt; or &lt;code&gt;--rename OLD_WORD NEW_WORD&lt;/code&gt; Renames an abbreviation, from OLD_WORD to NEW_WORD.</source>
          <target state="translated">&lt;code&gt;-r OLD_WORD NEW_WORD&lt;/code&gt; 또는 &lt;code&gt;--rename OLD_WORD NEW_WORD&lt;/code&gt; 약어의 이름을 OLD_WORD에서 NEW_WORD로 바꿉니다.</target>
        </trans-unit>
        <trans-unit id="bf3dc1ad193a8d90528856070355e4caebc07900" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-r&lt;/code&gt; or &lt;code&gt;--replace&lt;/code&gt; remove the current commandline and replace it with the specified string (default)</source>
          <target state="translated">&lt;code&gt;-r&lt;/code&gt; 또는 &lt;code&gt;--replace&lt;/code&gt; 현재 명령 줄을 제거하고 지정된 문자열로 바꿉니다 (기본값).</target>
        </trans-unit>
        <trans-unit id="15f95ae7147f6912429c85c01ead4a80a1e6c1c8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-r&lt;/code&gt; or &lt;code&gt;--require-parameter&lt;/code&gt; specifies that the options specified by this completion always must have an option argument, i.e. may not be followed by another option.</source>
          <target state="translated">&lt;code&gt;-r&lt;/code&gt; 또는 &lt;code&gt;--require-parameter&lt;/code&gt; 는이 완료로 지정된 옵션에 항상 옵션 인수가 있어야한다고 지정합니다. 즉, 다른 옵션이 뒤에 오지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="69f76f6d28ff78a9ef738a079d524c1009da2fe1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-r&lt;/code&gt; or &lt;code&gt;--required&lt;/code&gt; means the option being defined requires a value. If the option is seen more than once when parsing arguments only the last value seen is saved. This means the resulting flag variable created by &lt;code&gt;argparse&lt;/code&gt; will have exactly one element.</source>
          <target state="translated">&lt;code&gt;-r&lt;/code&gt; 또는 &lt;code&gt;--required&lt;/code&gt; 는 정의중인 옵션에 값이 필요함을 의미합니다. 인수를 구문 분석 할 때 옵션이 두 번 이상 표시되면 마지막으로 본 값만 저장됩니다. 이는 &lt;code&gt;argparse&lt;/code&gt; 에 의해 생성 된 결과 플래그 변수에 정확히 하나의 요소가 있음을 의미합니다 .</target>
        </trans-unit>
        <trans-unit id="0b182b5cb0c2eec417d9122bac97697f781a0dc3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-r&lt;/code&gt;, &lt;code&gt;--reverse&lt;/code&gt; sets reverse mode.</source>
          <target state="translated">&lt;code&gt;-r&lt;/code&gt; , &lt;code&gt;--reverse&lt;/code&gt; 는 역방향 모드를 설정합니다.</target>
        </trans-unit>
        <trans-unit id="a8b020088431f2697bf9d981931860bd40f8f9b0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-s FILE&lt;/code&gt; returns true if the size of &lt;code&gt;FILE&lt;/code&gt; is greater than zero.</source>
          <target state="translated">&lt;code&gt;-s FILE&lt;/code&gt; 의 크기있는 경우에 true를 돌려 &lt;code&gt;FILE&lt;/code&gt; 이 0보다 크다.</target>
        </trans-unit>
        <trans-unit id="4760f581e30841a75368b8414c415a1e63aa89d4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-s SHORT_OPTION&lt;/code&gt; or &lt;code&gt;--short-option=SHORT_OPTION&lt;/code&gt; adds a short option to the completions list.</source>
          <target state="translated">&lt;code&gt;-s SHORT_OPTION&lt;/code&gt; 또는 &lt;code&gt;--short-option=SHORT_OPTION&lt;/code&gt; 은 완료 목록에 간단한 옵션을 추가합니다.</target>
        </trans-unit>
        <trans-unit id="26217bbbf2ac6f7359a6d4cd6ff9f88b5850fa42" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-s&lt;/code&gt; or &lt;code&gt;--current-selection&lt;/code&gt; selects the current selection</source>
          <target state="translated">&lt;code&gt;-s&lt;/code&gt; 또는 &lt;code&gt;--current-selection&lt;/code&gt; 은 현재 선택을 선택합니다</target>
        </trans-unit>
        <trans-unit id="9b5184b9a7029c501feb328f026e6186dd75f1aa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-s&lt;/code&gt; or &lt;code&gt;--on-signal SIGSPEC&lt;/code&gt; tells fish to run this function when the signal SIGSPEC is delivered. SIGSPEC can be a signal number, or the signal name, such as SIGHUP (or just HUP).</source>
          <target state="translated">&lt;code&gt;-s&lt;/code&gt; 또는 &lt;code&gt;--on-signal SIGSPEC&lt;/code&gt; 은 신호 SIGSPEC가 전달 될 때 물고기에게이 기능을 실행 하도록 지시합니다. SIGSPEC는 신호 번호 또는 SIGHUP (또는 HUP)와 같은 신호 이름 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d320e2cb2e0370571660b98b14e550d187976532" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-s&lt;/code&gt; or &lt;code&gt;--save&lt;/code&gt; Automatically save the function after successfully editing it.</source>
          <target state="translated">&lt;code&gt;-s&lt;/code&gt; 또는 &lt;code&gt;--save&lt;/code&gt; 기능을 성공적으로 편집 한 후 자동으로 저장합니다.</target>
        </trans-unit>
        <trans-unit id="8ebe9ed54b1aaf6766a7b9f91f37c0933b63858a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-s&lt;/code&gt; or &lt;code&gt;--save&lt;/code&gt; Automatically save the function created by the alias into your fish configuration directory using &lt;a href=&quot;#funcsave&quot;&gt;funcsave&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;-s&lt;/code&gt; 또는 &lt;code&gt;--save&lt;/code&gt; 별명으로 작성된 기능을 &lt;a href=&quot;#funcsave&quot;&gt;funcsave를&lt;/a&gt; 사용하여 fish 구성 디렉토리에 자동으로 저장합니다 .</target>
        </trans-unit>
        <trans-unit id="a3f6831898a232925539b5651976c7ffd3af270e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-s&lt;/code&gt; or &lt;code&gt;--search&lt;/code&gt; returns the name of the external command that would be executed, or nothing if no file with the specified name could be found in the &lt;code&gt;$PATH&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;-s&lt;/code&gt; 또는 &lt;code&gt;--search&lt;/code&gt; 는 실행될 외부 명령의 이름을 반환하거나 &lt;code&gt;$PATH&lt;/code&gt; 에서 지정된 이름의 파일을 찾을 수 없으면 아무 것도 반환하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="23b077c611c5151a2c34a0ba41ec775beef37511" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-s&lt;/code&gt; or &lt;code&gt;--short&lt;/code&gt; takes a single letter that is used as the short flag in the option being defined. This option is mandatory.</source>
          <target state="translated">&lt;code&gt;-s&lt;/code&gt; 또는 &lt;code&gt;--short&lt;/code&gt; 는 정의중인 옵션에서 짧은 플래그로 사용되는 단일 문자를 사용합니다. 이 옵션은 필수입니다.</target>
        </trans-unit>
        <trans-unit id="d58f7373f7a8171fbd3f3a46aa910610bef62834" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-s&lt;/code&gt; or &lt;code&gt;--show&lt;/code&gt; Show all abbreviations in a manner suitable for export and import.</source>
          <target state="translated">&lt;code&gt;-s&lt;/code&gt; 또는 &lt;code&gt;--show&lt;/code&gt; 모든 약어를 내보내기 및 가져 오기에 적합한 방식으로 표시합니다.</target>
        </trans-unit>
        <trans-unit id="da723e7463f58abbb58d5d72a42bea99efea7a2e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-s&lt;/code&gt; or &lt;code&gt;--silent&lt;/code&gt; masks characters written to the terminal, replacing them with asterisks. This is useful for reading things like passwords or other sensitive information.</source>
          <target state="translated">&lt;code&gt;-s&lt;/code&gt; 또는 &lt;code&gt;--silent&lt;/code&gt; 터미널에 기록 된 문자를 별표로 대체하여 마스크합니다. 암호 나 기타 민감한 정보를 읽는 데 유용합니다.</target>
        </trans-unit>
        <trans-unit id="bc8f2201bb25d6534d7b0bddef06fe6c1859a1f8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-s&lt;/code&gt; or &lt;code&gt;--stack-size&lt;/code&gt;: the maximum stack size.</source>
          <target state="translated">&lt;code&gt;-s&lt;/code&gt; 또는 &lt;code&gt;--stack-size&lt;/code&gt; : 최대 스택 크기.</target>
        </trans-unit>
        <trans-unit id="93afc3b795c95b365d4cc29290ee39e49b296180" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-s&lt;/code&gt; or &lt;code&gt;--stop-nonopt&lt;/code&gt; causes scanning the arguments to stop as soon as the first non-option argument is seen. Using this arg is equivalent to calling the C function &lt;code&gt;getopt_long()&lt;/code&gt; with the short options starting with a &lt;code&gt;+&lt;/code&gt; symbol. This is sometimes known as &quot;POSIXLY CORRECT&quot;. If this flag is not used then arguments are reordered (i.e., permuted) so that all non-option arguments are moved after option arguments. This mode has several uses but the main one is to implement a command that has subcommands.</source>
          <target state="translated">&lt;code&gt;-s&lt;/code&gt; 또는 &lt;code&gt;--stop-nonopt&lt;/code&gt; 를 사용 하면 첫 번째 비 옵션 인수가 표시되는 즉시 인수 스캔이 중지됩니다. 이 인수를 사용 하는 것은 &lt;code&gt;+&lt;/code&gt; 옵션으로 시작하는 짧은 옵션으로 C 함수 &lt;code&gt;getopt_long()&lt;/code&gt; 을 호출하는 것과 같습니다 . 이것을 &quot;POSIXLY CORRECT&quot;라고도합니다. 이 플래그를 사용하지 않으면 옵션이 아닌 모든 인수가 옵션 인수 다음으로 이동되도록 인수가 재정렬됩니다 (즉, 순열 됨). 이 모드는 여러 가지 용도로 사용되지만 주된 방법은 하위 명령이있는 명령을 구현하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="9a1e8012d324d1b57b5c8ab0e70cf005ec8caa29" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-s&lt;/code&gt; or &lt;code&gt;--suffix&lt;/code&gt; will append SUFFIX to the filename.</source>
          <target state="translated">&lt;code&gt;-s&lt;/code&gt; 또는 &lt;code&gt;--suffix&lt;/code&gt; 는 파일 이름에 SUFFIX를 추가합니다.</target>
        </trans-unit>
        <trans-unit id="e581bd7700932f6b2e60f5aef3d1b090204498ff" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-s&lt;/code&gt;, Do not separate arguments with spaces</source>
          <target state="translated">&lt;code&gt;-s&lt;/code&gt; , 인수를 공백으로 분리하지 마십시오</target>
        </trans-unit>
        <trans-unit id="ea1fa3b961cc8ca2f67d014afbdc58fdb09ce7cb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-sN&lt;/code&gt; or &lt;code&gt;--scale=N&lt;/code&gt; sets the scale of the result. &lt;code&gt;N&lt;/code&gt; must be an integer. A scale of zero causes results to be rounded down to the nearest integer. So &lt;code&gt;3/2&lt;/code&gt; returns &lt;code&gt;1&lt;/code&gt; rather than &lt;code&gt;2&lt;/code&gt; which &lt;code&gt;1.5&lt;/code&gt; would normally round to. This is for compatibility with &lt;code&gt;bc&lt;/code&gt; which was the basis for this command prior to fish 3.0.0. Scale values greater than zero causes the result to be rounded using the usual rules to the specified number of decimal places.</source>
          <target state="translated">&lt;code&gt;-sN&lt;/code&gt; 또는 &lt;code&gt;--scale=N&lt;/code&gt; 은 결과의 스케일을 설정합니다. &lt;code&gt;N&lt;/code&gt; 은 정수 여야합니다. 스케일이 0이면 결과가 가장 가까운 정수로 내림됩니다. 그래서 &lt;code&gt;3/2&lt;/code&gt; 반환 &lt;code&gt;1&lt;/code&gt; 보다는 &lt;code&gt;2&lt;/code&gt; 있는 &lt;code&gt;1.5&lt;/code&gt; 일반적으로 라운드 것. 이것은 물고기 3.0.0 이전의이 명령의 기본이었던 &lt;code&gt;bc&lt;/code&gt; 와의 호환성을 위한 것입니다. 0보다 큰 스케일 값은 일반적인 규칙을 사용하여 지정된 소수점 이하 자릿수로 결과를 반올림합니다.</target>
        </trans-unit>
        <trans-unit id="6bb6514e884c0df6e9a2c91c0612c928a5a02af1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-t FD&lt;/code&gt; returns true if the file descriptor &lt;code&gt;FD&lt;/code&gt; is a terminal (TTY).</source>
          <target state="translated">&lt;code&gt;-t FD&lt;/code&gt; 는 파일 디스크립터 &lt;code&gt;FD&lt;/code&gt; 가 터미널 (TTY) 인 경우 true를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="424b82ab03b58f16e4e40dd40db8aa79bd8bc68f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-t&lt;/code&gt; or &lt;code&gt;--cpu-time&lt;/code&gt;: the maximum amount of CPU time in seconds.</source>
          <target state="translated">&lt;code&gt;-t&lt;/code&gt; 또는 &lt;code&gt;--cpu-time&lt;/code&gt; : 최대 CPU 시간 (초)입니다.</target>
        </trans-unit>
        <trans-unit id="d8c678dbf84ee2fe2eca910c33a123f68bb9e122" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-t&lt;/code&gt; or &lt;code&gt;--current-token&lt;/code&gt; select the current token</source>
          <target state="translated">&lt;code&gt;-t&lt;/code&gt; 또는 &lt;code&gt;--current-token&lt;/code&gt; 현재 토큰을 선택하십시오</target>
        </trans-unit>
        <trans-unit id="6850094885cf7102d51f8fb0c5a746e2be63915a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-t&lt;/code&gt; or &lt;code&gt;--handlers-type TYPE&lt;/code&gt; will show all event handlers matching the given type</source>
          <target state="translated">&lt;code&gt;-t&lt;/code&gt; 또는 &lt;code&gt;--handlers-type TYPE&lt;/code&gt; 은 주어진 유형과 일치하는 모든 이벤트 핸들러를 표시합니다.</target>
        </trans-unit>
        <trans-unit id="af40344ed96067ce6f9db61754fe50563bc7ab04" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-t&lt;/code&gt; or &lt;code&gt;--show-time&lt;/code&gt; prepends each history entry with the date and time the entry was recorded. By default it uses the strftime format &lt;code&gt;# cn&lt;/code&gt;. You can specify another format; e.g., &lt;code&gt;--show-time=&quot;%Y-%m-%d %H:%M:%S &quot;&lt;/code&gt; or &lt;code&gt;--show-time=&quot;%a%I%p&quot;&lt;/code&gt;. The short option, &lt;code&gt;-t&lt;/code&gt;, doesn't accept a strftime format string; it only uses the default format. Any strftime format is allowed, including &lt;code&gt;s&lt;/code&gt; to get the raw UNIX seconds since the epoch.</source>
          <target state="translated">&lt;code&gt;-t&lt;/code&gt; 또는 &lt;code&gt;--show-time&lt;/code&gt; 은 각 기록 항목 앞에 항목이 기록 된 날짜와 시간을 추가합니다. 기본적으로 strftime 형식 &lt;code&gt;# cn&lt;/code&gt; 사용합니다 . 다른 형식을 지정할 수 있습니다. 예를 들어 &lt;code&gt;--show-time=&quot;%Y-%m-%d %H:%M:%S &quot;&lt;/code&gt; 또는 &lt;code&gt;--show-time=&quot;%a%I%p&quot;&lt;/code&gt; 입니다. 짧은 옵션 인 &lt;code&gt;-t&lt;/code&gt; 는 strftime 형식 문자열을 허용하지 않습니다. 기본 형식 만 사용합니다. epoch 이후 원시 UNIX 초를 가져 오는 &lt;code&gt;s&lt;/code&gt; 를 포함하여 모든 strftime 형식이 허용 됩니다.</target>
        </trans-unit>
        <trans-unit id="467e785a2b44ff8878eb831a86e1f83069816283" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-t&lt;/code&gt; or &lt;code&gt;--type&lt;/code&gt; prints &lt;code&gt;function&lt;/code&gt;, &lt;code&gt;builtin&lt;/code&gt;, or &lt;code&gt;file&lt;/code&gt; if &lt;code&gt;NAME&lt;/code&gt; is a shell function, builtin, or disk file, respectively.</source>
          <target state="translated">&lt;code&gt;-t&lt;/code&gt; 또는 &lt;code&gt;--type&lt;/code&gt; 은 &lt;code&gt;NAME&lt;/code&gt; 이 각각 쉘 함수, 내장 또는 디스크 파일 인 경우 &lt;code&gt;function&lt;/code&gt; , &lt;code&gt;builtin&lt;/code&gt; 또는 &lt;code&gt;file&lt;/code&gt; 을 인쇄 합니다 .</target>
        </trans-unit>
        <trans-unit id="bba79fd23349f2a2912ea0a00a75a56576680a5f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-u FILE&lt;/code&gt; returns true if &lt;code&gt;FILE&lt;/code&gt; has the set-user-ID bit set.</source>
          <target state="translated">&lt;code&gt;-u FILE&lt;/code&gt; 은 &lt;code&gt;FILE&lt;/code&gt; 에 set-user-ID 비트가 설정되어 있으면 true를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="4497b496eb3e26cc3d08c52411bb6a5ba1f971f2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-u&lt;/code&gt; and &lt;code&gt;--unauthoritative&lt;/code&gt; no longer do anything and are silently ignored.</source>
          <target state="translated">&lt;code&gt;-u&lt;/code&gt; 및 &lt;code&gt;--unauthoritative&lt;/code&gt; 는 더 이상 아무것도하지 않으며 자동으로 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="14cbe5ede9e92f605c21f8ee30eef81d1e4cc3e7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-u&lt;/code&gt; or &lt;code&gt;--process-count&lt;/code&gt;: the maximum number of processes available to a single user.</source>
          <target state="translated">&lt;code&gt;-u&lt;/code&gt; 또는 &lt;code&gt;--process-count&lt;/code&gt; : 단일 사용자가 사용할 수있는 최대 프로세스 수입니다.</target>
        </trans-unit>
        <trans-unit id="1c831e4bcbef6d56c989987a5670ee66456e7aa5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-u&lt;/code&gt; or &lt;code&gt;--unexport&lt;/code&gt; causes the specified shell variable to NOT be exported to child processes</source>
          <target state="translated">&lt;code&gt;-u&lt;/code&gt; 또는 &lt;code&gt;--unexport&lt;/code&gt; 는 지정된 쉘 변수를 하위 프로세스로 내 보내지 않도록합니다.</target>
        </trans-unit>
        <trans-unit id="6a35ecff0bb2a63c41a979b1262c37e9b56c7319" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-u&lt;/code&gt; or &lt;code&gt;--unexport&lt;/code&gt; prevents the variables from being exported to child processes (default behaviour).</source>
          <target state="translated">&lt;code&gt;-u&lt;/code&gt; 또는 &lt;code&gt;--unexport&lt;/code&gt; 는 변수가 자식 프로세스로 내보내 지지 않도록합니다 (기본 동작).</target>
        </trans-unit>
        <trans-unit id="edb99d533bb54e8250ac45157fb864288fa88680" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-u&lt;/code&gt;, &lt;code&gt;--underline&lt;/code&gt; sets underlined mode.</source>
          <target state="translated">&lt;code&gt;-u&lt;/code&gt; , &lt;code&gt;--underline&lt;/code&gt; 은 밑줄이있는 모드를 설정합니다.</target>
        </trans-unit>
        <trans-unit id="cd8120b86495d1ca430c3eda5baf4118db1e5caf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-v&lt;/code&gt; or &lt;code&gt;--on-variable VARIABLE_NAME&lt;/code&gt; tells fish to run this function when the variable VARIABLE_NAME changes value.</source>
          <target state="translated">&lt;code&gt;-v&lt;/code&gt; 또는 &lt;code&gt;--on-variable VARIABLE_NAME&lt;/code&gt; 은 변수 VARIABLE_NAME이 값을 변경할 때 물고기에게이 기능을 실행하도록 지시합니다.</target>
        </trans-unit>
        <trans-unit id="1e39111a020c06e6d5b7063c6cef8461b2801bd3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-v&lt;/code&gt; or &lt;code&gt;--verbose&lt;/code&gt; will make some output more verbose.</source>
          <target state="translated">&lt;code&gt;-v&lt;/code&gt; 또는 &lt;code&gt;--verbose&lt;/code&gt; 는 일부 출력을보다 자세하게 만듭니다.</target>
        </trans-unit>
        <trans-unit id="2467d88143d7f2e51821170f0f5adb1d2b897b91" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-v&lt;/code&gt; or &lt;code&gt;--version&lt;/code&gt; display version and exit</source>
          <target state="translated">&lt;code&gt;-v&lt;/code&gt; 또는 &lt;code&gt;--version&lt;/code&gt; 표시 버전 및 종료</target>
        </trans-unit>
        <trans-unit id="ce21cd78ddd71cb1d2a2bb7da53ca548ac307ff4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-v&lt;/code&gt; or &lt;code&gt;--version&lt;/code&gt; displays the current fish version and then exits.</source>
          <target state="translated">&lt;code&gt;-v&lt;/code&gt; 또는 &lt;code&gt;--version&lt;/code&gt; 은 현재 피쉬 버전을 표시 한 다음 종료합니다.</target>
        </trans-unit>
        <trans-unit id="3fdfffd50051506bc9ada9b496552dab7a38ac04" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-v&lt;/code&gt; or &lt;code&gt;--version&lt;/code&gt; prints fish_key_reader's version and exits.</source>
          <target state="translated">&lt;code&gt;-v&lt;/code&gt; 또는 &lt;code&gt;--version&lt;/code&gt; 은 fish_key_reader의 버전을 인쇄하고 종료합니다.</target>
        </trans-unit>
        <trans-unit id="eb16969b8b4aa593d4bbb08bef62152b4d6a6b4b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-v&lt;/code&gt; or &lt;code&gt;--virtual-memory-size&lt;/code&gt; The maximum amount of virtual memory available to the shell.</source>
          <target state="translated">&lt;code&gt;-v&lt;/code&gt; 또는 &lt;code&gt;--virtual-memory-size&lt;/code&gt; 쉘에 사용 가능한 최대 가상 메모리 양.</target>
        </trans-unit>
        <trans-unit id="7d51f6c083dc58ffa832e02844e9f045854ff278" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-w FILE&lt;/code&gt; returns true if &lt;code&gt;FILE&lt;/code&gt; is marked as writable; note that this does not check if the filesystem is read-only.</source>
          <target state="translated">&lt;code&gt;-w FILE&lt;/code&gt; 은 경우에 true를 돌려 &lt;code&gt;FILE&lt;/code&gt; 이 쓰기로 표시되어; 파일 시스템이 읽기 전용인지 여부는 확인하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="a1ca8a6e40a28a6d549d958558d70461fb9f00bc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-w WRAPPED_COMMAND&lt;/code&gt; or &lt;code&gt;--wraps=WRAPPED_COMMAND&lt;/code&gt; causes the function to inherit completions from the given wrapped command. See the documentation for &lt;a href=&quot;#complete&quot;&gt;&lt;code&gt;complete&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;code&gt;-w WRAPPED_COMMAND&lt;/code&gt; 또는 &lt;code&gt;--wraps=WRAPPED_COMMAND&lt;/code&gt; 는 함수가 주어진 랩핑 된 명령으로부터 완료를 상속하도록합니다. 에 대한 설명서를 참조하십시오 &lt;a href=&quot;#complete&quot;&gt; &lt;code&gt;complete&lt;/code&gt; &lt;/a&gt; 자세한 내용은.</target>
        </trans-unit>
        <trans-unit id="bbb87f12cc34b53e2a50b347498983487008d53a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-w WRAPPED_COMMAND&lt;/code&gt; or &lt;code&gt;--wraps=WRAPPED_COMMAND&lt;/code&gt; causes the specified command to inherit completions from the wrapped command (See below for details).</source>
          <target state="translated">&lt;code&gt;-w WRAPPED_COMMAND&lt;/code&gt; 또는 &lt;code&gt;--wraps=WRAPPED_COMMAND&lt;/code&gt; 는 지정된 명령이 랩핑 된 명령에서 완료를 상속하도록합니다 (자세한 내용은 아래 참조).</target>
        </trans-unit>
        <trans-unit id="a6a6a36af05a5b383ba2f8eec0ada74daac228cd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-w&lt;/code&gt; or &lt;code&gt;--write&lt;/code&gt; indents a specified file and immediately writes to that file.</source>
          <target state="translated">&lt;code&gt;-w&lt;/code&gt; 또는 &lt;code&gt;--write&lt;/code&gt; 는 지정된 파일을 들여 쓰고 해당 파일에 즉시 씁니다.</target>
        </trans-unit>
        <trans-unit id="a0b89cfd5caf604ea310a3d346b6727ab3005f59" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-x FILE&lt;/code&gt; returns true if &lt;code&gt;FILE&lt;/code&gt; is marked as executable.</source>
          <target state="translated">&lt;code&gt;-x FILE&lt;/code&gt; 은 &lt;code&gt;FILE&lt;/code&gt; 이 실행 가능으로 표시 되면 true를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="9ad67bc354f0805b5127ce53a7304edb40898e02" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-x&lt;/code&gt; or &lt;code&gt;--exclusive&lt;/code&gt; implies both &lt;code&gt;-r&lt;/code&gt; and &lt;code&gt;-f&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;-x&lt;/code&gt; 또는 &lt;code&gt;--exclusive&lt;/code&gt; 는 &lt;code&gt;-r&lt;/code&gt; 과 &lt;code&gt;-f&lt;/code&gt; 를 모두 의미합니다 .</target>
        </trans-unit>
        <trans-unit id="eb899108bc682200097254064632437d4b231396" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-x&lt;/code&gt; or &lt;code&gt;--exclusive&lt;/code&gt; should be followed by a comma separated list of short of long options that are mutually exclusive. You can use this option more than once to define multiple sets of mutually exclusive options.</source>
          <target state="translated">&lt;code&gt;-x&lt;/code&gt; 또는 &lt;code&gt;--exclusive&lt;/code&gt; 뒤에는 상호 배타적 인 짧은 옵션의 쉼표로 구분 된 목록이 와야합니다. 이 옵션을 두 번 이상 사용하여 상호 배타적 인 옵션의 여러 세트를 정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="13538c702a33ba0ecd18345c2d280a684c3af80a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-x&lt;/code&gt; or &lt;code&gt;--export&lt;/code&gt; causes the specified shell variable to be exported to child processes (making it an &quot;environment variable&quot;)</source>
          <target state="translated">&lt;code&gt;-x&lt;/code&gt; 또는 &lt;code&gt;--export&lt;/code&gt; 는 지정된 쉘 변수를 하위 프로세스로 내보내도록합니다 ( &quot;환경 변수&quot;로 만듭니다).</target>
        </trans-unit>
        <trans-unit id="53be835e40905bc5185c4a21ccc84594f0beabfc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-x&lt;/code&gt; or &lt;code&gt;--export&lt;/code&gt; exports the variables to child processes.</source>
          <target state="translated">&lt;code&gt;-x&lt;/code&gt; 또는 &lt;code&gt;--export&lt;/code&gt; 는 변수를 자식 프로세스로 내 보냅니다.</target>
        </trans-unit>
        <trans-unit id="e1b67217bfe1b8405d8115e575e6426ba466fd97" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-z STRING&lt;/code&gt; returns true if the length of &lt;code&gt;STRING&lt;/code&gt; is zero.</source>
          <target state="translated">&lt;code&gt;-z STRING&lt;/code&gt; 은 길이 true를 반환 &lt;code&gt;STRING&lt;/code&gt; 은 제로이다.</target>
        </trans-unit>
        <trans-unit id="e8d9f13c4a778004ae15d3b908e9364ea5e503e4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-z&lt;/code&gt; or &lt;code&gt;--null&lt;/code&gt; causes history entries written by the search operations to be terminated by a NUL character rather than a newline. This allows the output to be processed by &lt;code&gt;read -z&lt;/code&gt; to correctly handle multiline history entries.</source>
          <target state="translated">&lt;code&gt;-z&lt;/code&gt; 또는 &lt;code&gt;--null&lt;/code&gt; 은 검색 조작으로 작성된 히스토리 항목이 줄 바꾸기가 아닌 NUL 문자로 종료되도록합니다. 이를 통해 여러 행 히스토리 항목을 올바르게 처리하기 위해 &lt;code&gt;read -z&lt;/code&gt; 로 출력을 처리 할 수 ​​있습니다 .</target>
        </trans-unit>
        <trans-unit id="cc10f07bcacc5b98d913c85ba62a3348ec075b9a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-z&lt;/code&gt; or &lt;code&gt;--null&lt;/code&gt; marks the end of the line with the NUL character, instead of newline. This also disables interactive mode.</source>
          <target state="translated">&lt;code&gt;-z&lt;/code&gt; 또는 &lt;code&gt;--null&lt;/code&gt; 은 줄 끝을 줄 바꿈 대신 NUL 문자로 표시합니다. 또한 대화식 모드가 비활성화됩니다.</target>
        </trans-unit>
        <trans-unit id="dd2638140e8e4dda50ed4e35bb66502b67eda35b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.&lt;/code&gt; (a single period) is an alias for the &lt;code&gt;source&lt;/code&gt; command. The use of &lt;code&gt;.&lt;/code&gt; is deprecated in favour of &lt;code&gt;source&lt;/code&gt;, and &lt;code&gt;.&lt;/code&gt; will be removed in a future version of fish.</source>
          <target state="translated">&lt;code&gt;.&lt;/code&gt; (단일 마침표)는 &lt;code&gt;source&lt;/code&gt; 명령 의 별명입니다 . 의 사용 &lt;code&gt;.&lt;/code&gt; 찬성되지 않습니다 &lt;code&gt;source&lt;/code&gt; , 그리고 &lt;code&gt;.&lt;/code&gt; 향후 버전의 물고기에서는 제거 될 예정입니다.</target>
        </trans-unit>
        <trans-unit id="0533ba782906e2b830078d3b507ee91998db9488" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.&lt;/code&gt; any character except newline</source>
          <target state="translated">&lt;code&gt;.&lt;/code&gt; 개행을 제외한 모든 문자</target>
        </trans-unit>
        <trans-unit id="51164dd7a5009a2a2bc932fc73d662671a1824d4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/usr/share/fish/vendor_conf.d&lt;/code&gt; (set at compile time; by default, &lt;code&gt;$__fish_data_dir/conf.d&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;/usr/share/fish/vendor_conf.d&lt;/code&gt; (컴파일시 설정; 기본적으로 &lt;code&gt;$__fish_data_dir/conf.d&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="af97be267f4949a7fd1dad79c939743032d1f763" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;=+&lt;/code&gt; if it requires a value and each instance of the flag is saved.</source>
          <target state="translated">&lt;code&gt;=+&lt;/code&gt; 값이 필요하고 플래그의 각 인스턴스가 저장되면 = + 입니다.</target>
        </trans-unit>
        <trans-unit id="4f7f188d592f9c35c114210e44e1862472649d09" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;=&lt;/code&gt; if it requires a value and only the last instance of the flag is saved, else</source>
          <target state="translated">&lt;code&gt;=&lt;/code&gt; 값이 필요하고 플래그의 마지막 인스턴스 만 저장되는 경우</target>
        </trans-unit>
        <trans-unit id="22d3382ec2f6c929d6d510d1dc13ebe3e237dba8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;=?&lt;/code&gt; it takes an optional value and only the last instance of the flag is saved, else</source>
          <target state="translated">&lt;code&gt;=?&lt;/code&gt; 선택적 값을 취하고 플래그의 마지막 인스턴스 만 저장됩니다.</target>
        </trans-unit>
        <trans-unit id="a40a6355c491e1966b3f7fdf8a2bb557d74a5897" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;?&lt;/code&gt; 0 or 1.</source>
          <target state="translated">&lt;code&gt;?&lt;/code&gt; 0 또는 1.</target>
        </trans-unit>
        <trans-unit id="465577a87d8a708e8820ba32b51f849f4ae462a3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;?&lt;/code&gt; can match any single character except '/'.</source>
          <target state="translated">&lt;code&gt;?&lt;/code&gt; '/'를 제외한 모든 단일 문자와 일치 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="12c55fe66d17c22da05662e21f3958a65c5dc1e2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;???&lt;/code&gt; matches any file in the current directory whose name is exactly three characters long.</source>
          <target state="translated">&lt;code&gt;???&lt;/code&gt; 이름이 정확히 3자인 현재 디렉토리의 파일과 일치합니다.</target>
        </trans-unit>
        <trans-unit id="dc959c1e30d0776e44fe75c3006269b55ec6df84" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ARG&lt;/code&gt; is the command to be executed on signal delivery.</source>
          <target state="translated">&lt;code&gt;ARG&lt;/code&gt; 는 신호 전달시 실행될 명령입니다.</target>
        </trans-unit>
        <trans-unit id="40a614b7d9b6f8fb731b69ae5ac30538eb37e807" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;BROWSER&lt;/code&gt;, the user's preferred web browser. If this variable is set, fish will use the specified browser instead of the system default browser to display the fish documentation.</source>
          <target state="translated">&lt;code&gt;BROWSER&lt;/code&gt; 사용자가 선호하는 웹 브라우저 인 BROWSER 이 변수를 설정하면 fish는 시스템 기본 브라우저 대신 지정된 브라우저를 사용하여 물고기 문서를 표시합니다.</target>
        </trans-unit>
        <trans-unit id="5e17c61f89ab2ecd3a5f7ef82311ac9816c44a43" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;CDPATH&lt;/code&gt;, an array of directories in which to search for the new directory for the &lt;code&gt;cd&lt;/code&gt; builtin.</source>
          <target state="translated">&lt;code&gt;CDPATH&lt;/code&gt; - &lt;code&gt;cd&lt;/code&gt; 내장 의 새 디렉토리를 검색 할 디렉토리의 배열입니다 .</target>
        </trans-unit>
        <trans-unit id="2fad4d28cf53acc55c1fa68d6174fb994fcb6a00" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;CMD_DURATION&lt;/code&gt;, the runtime of the last command in milliseconds.</source>
          <target state="translated">&lt;code&gt;CMD_DURATION&lt;/code&gt; , 마지막 명령의 런타임 (밀리 초)</target>
        </trans-unit>
        <trans-unit id="feddeddfc653ec360674759eebf3d08eb24c2757" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;COLUMNS&lt;/code&gt; and &lt;code&gt;LINES&lt;/code&gt;, the current size of the terminal in height and width. These values are only used by fish if the operating system does not report the size of the terminal. Both variables must be set in that case otherwise a default of 80x24 will be used. They are updated when the window size changes.</source>
          <target state="translated">&lt;code&gt;COLUMNS&lt;/code&gt; and &lt;code&gt;LINES&lt;/code&gt; , 터미널의 현재 크기는 높이와 너비입니다. 이 값은 운영 체제가 터미널 크기를보고하지 않는 경우에만 물고기가 사용합니다. 이 경우 두 변수를 모두 설정해야합니다. 그렇지 않으면 기본값 80x24가 사용됩니다. 창 크기가 변경되면 업데이트됩니다.</target>
        </trans-unit>
        <trans-unit id="5845ca23e1bd3c7828b27c889ffc5514e79f64d7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;COMMAND&lt;/code&gt; can be any fish command, but it can also be one of a set of special input functions. These include functions for moving the cursor, operating on the kill-ring, performing tab completion, etc. Use &lt;code&gt;bind --function-names&lt;/code&gt; for a complete list of these input functions.</source>
          <target state="translated">&lt;code&gt;COMMAND&lt;/code&gt; 는 임의의 fish 명령이 될 수 있지만 특수 입력 기능 세트 중 하나 일 수도 있습니다. 여기에는 커서 이동, 킬 링 작동, 탭 완성 수행 등의 기능이 포함됩니다. 이러한 입력 기능의 전체 목록을 보려면 &lt;code&gt;bind --function-names&lt;/code&gt; 를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="e9e9a0e7c091703e51bc02455e71859385803120" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;COMMAND&lt;/code&gt; is the name of the command for which to add a completion.</source>
          <target state="translated">&lt;code&gt;COMMAND&lt;/code&gt; 는 완료를 추가 할 명령의 이름입니다.</target>
        </trans-unit>
        <trans-unit id="70bca14180f1f5f71e14d272bc1ddc0edb71a05a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;COND1 -a COND2&lt;/code&gt; returns true if both &lt;code&gt;COND1&lt;/code&gt; and &lt;code&gt;COND2&lt;/code&gt; are true.</source>
          <target state="translated">&lt;code&gt;COND1 -a COND2&lt;/code&gt; 는 &lt;code&gt;COND1&lt;/code&gt; 과 &lt;code&gt;COND2&lt;/code&gt; 가 모두 참이면 true를 리턴 합니다.</target>
        </trans-unit>
        <trans-unit id="bbc30bb3ee02b58268da22000810b57306e18e6a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;COND1 -o COND2&lt;/code&gt; returns true if either &lt;code&gt;COND1&lt;/code&gt; or &lt;code&gt;COND2&lt;/code&gt; are true.</source>
          <target state="translated">&lt;code&gt;COND1 -o COND2&lt;/code&gt; 는 &lt;code&gt;COND1&lt;/code&gt; 또는 &lt;code&gt;COND2&lt;/code&gt; 가 참인 경우 true를 리턴 합니다.</target>
        </trans-unit>
        <trans-unit id="05b3e85dba7eb14bbf6cbd6a6bedd931278e42d5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;DEFINITION&lt;/code&gt; is the actual command to execute. The string &lt;code&gt;$argv&lt;/code&gt; will be appended.</source>
          <target state="translated">&lt;code&gt;DEFINITION&lt;/code&gt; 은 실행할 실제 명령입니다. 문자열 &lt;code&gt;$argv&lt;/code&gt; 가 추가됩니다.</target>
        </trans-unit>
        <trans-unit id="33da87e68be43b3db73e8cda0d3d54a670c92295" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;DESCRIPTION&lt;/code&gt; is a description of what the option and/or option arguments do.</source>
          <target state="translated">&lt;code&gt;DESCRIPTION&lt;/code&gt; 은 옵션 및 / 또는 옵션 인수의 기능 에 대한 설명입니다.</target>
        </trans-unit>
        <trans-unit id="11dd45455a7d64e5a3fcb7c868fdc05ddeab446d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;DESTINATION&lt;/code&gt; can be one of the following:</source>
          <target state="translated">&lt;code&gt;DESTINATION&lt;/code&gt; 은 다음 중 하나 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="946a1015ede4136b02ba039f30d0c0430fba4c82" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;FILE DESCRIPTOR&lt;/code&gt; may be either the number of a file descriptor, or one of the strings &lt;code&gt;stdin&lt;/code&gt;, &lt;code&gt;stdout&lt;/code&gt;, or &lt;code&gt;stderr&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;FILE DESCRIPTOR&lt;/code&gt; 는 파일 설명자 수이거나 문자열 &lt;code&gt;stdin&lt;/code&gt; , &lt;code&gt;stdout&lt;/code&gt; 또는 &lt;code&gt;stderr&lt;/code&gt; 중 하나 일 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ebbb62820312a7b40cb17f9cc778a6f3f1b1f8fb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;HOME&lt;/code&gt;, the user's home directory. This variable can be changed by the user.</source>
          <target state="translated">&lt;code&gt;HOME&lt;/code&gt; 사용자의 홈 디렉토리 인 HOME 이 변수는 사용자가 변경할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fdec9da5293d1b36da4b7a9ecd9ae4767249a638" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;IFS&lt;/code&gt;, the internal field separator that is used for word splitting with the &lt;a href=&quot;commands#read&quot;&gt;read builtin&lt;/a&gt;. Setting this to the empty string will also disable line splitting in &lt;a href=&quot;#expand-command-substitution&quot;&gt;command substitution&lt;/a&gt;. This variable can be changed by the user.</source>
          <target state="translated">&lt;code&gt;IFS&lt;/code&gt; 는 워드로 분할하는 데 사용되는 내부 필드 분리 &lt;a href=&quot;commands#read&quot;&gt;판독 내장&lt;/a&gt; . 이 값을 빈 문자열로 설정하면 &lt;a href=&quot;#expand-command-substitution&quot;&gt;명령 대체&lt;/a&gt; 에서 행 분할이 비활성화됩니다 . 이 변수는 사용자가 변경할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="69c233f47f34e613a50386eca6e6da8ee5340e40" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LANG&lt;/code&gt;, &lt;code&gt;LC_ALL&lt;/code&gt;, &lt;code&gt;LC_COLLATE&lt;/code&gt;, &lt;code&gt;LC_CTYPE&lt;/code&gt;, &lt;code&gt;LC_MESSAGES&lt;/code&gt;, &lt;code&gt;LC_MONETARY&lt;/code&gt;, &lt;code&gt;LC_NUMERIC&lt;/code&gt; and &lt;code&gt;LC_TIME&lt;/code&gt; set the language option for the shell and subprograms. See the section &lt;a href=&quot;#variables-locale&quot;&gt;Locale variables&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;code&gt;LANG&lt;/code&gt; , &lt;code&gt;LC_ALL&lt;/code&gt; , &lt;code&gt;LC_COLLATE&lt;/code&gt; , &lt;code&gt;LC_CTYPE&lt;/code&gt; , &lt;code&gt;LC_MESSAGES&lt;/code&gt; , &lt;code&gt;LC_MONETARY&lt;/code&gt; , &lt;code&gt;LC_NUMERIC&lt;/code&gt; 및 &lt;code&gt;LC_TIME&lt;/code&gt; 은 쉘 및 서브 프로그램의 언어 옵션을 설정합니다. 자세한 정보는 &lt;a href=&quot;#variables-locale&quot;&gt;로케일 변수&lt;/a&gt; 섹션 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="13c5e6de3138e4bd46c6420b38783e3eb8a45d66" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LANG&lt;/code&gt;, &lt;code&gt;LC_ALL&lt;/code&gt;, &lt;code&gt;LC_COLLATE&lt;/code&gt;, &lt;code&gt;LC_CTYPE&lt;/code&gt;, &lt;code&gt;LC_MESSAGES&lt;/code&gt;, &lt;code&gt;LC_MONETARY&lt;/code&gt;, &lt;code&gt;LC_NUMERIC&lt;/code&gt; and &lt;code&gt;LC_TIME&lt;/code&gt; set the language option for the shell and subprograms. These variables work as follows: &lt;code&gt;LC_ALL&lt;/code&gt; forces all the aspects of the locale to the specified value. If &lt;code&gt;LC_ALL&lt;/code&gt; is set, all other locale variables will be ignored. The other &lt;code&gt;LC_&lt;/code&gt; variables set the specified aspect of the locale information. &lt;code&gt;LANG&lt;/code&gt; is a fallback value, it will be used if none of the &lt;code&gt;LC_&lt;/code&gt; variables are specified.</source>
          <target state="translated">&lt;code&gt;LANG&lt;/code&gt; , &lt;code&gt;LC_ALL&lt;/code&gt; , &lt;code&gt;LC_COLLATE&lt;/code&gt; , &lt;code&gt;LC_CTYPE&lt;/code&gt; , &lt;code&gt;LC_MESSAGES&lt;/code&gt; , &lt;code&gt;LC_MONETARY&lt;/code&gt; , &lt;code&gt;LC_NUMERIC&lt;/code&gt; 및 &lt;code&gt;LC_TIME&lt;/code&gt; 은 쉘 및 서브 프로그램의 언어 옵션을 설정합니다. 이러한 변수는 다음과 같이 작동합니다. &lt;code&gt;LC_ALL&lt;/code&gt; 은 로케일의 모든 측면을 지정된 값으로 강제합니다. 경우 &lt;code&gt;LC_ALL&lt;/code&gt; 이 설정되고, 다른 모든 로케일 변수는 무시됩니다. 다른 &lt;code&gt;LC_&lt;/code&gt; 변수는 로케일 정보의 지정된 측면을 설정합니다. &lt;code&gt;LANG&lt;/code&gt; 는 폴백 값이며 &lt;code&gt;LC_&lt;/code&gt; 변수가 지정 되지 않은 경우 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="b97e4977c3f20c542629ae502a6674eca13b3fe1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LONG_OPTION&lt;/code&gt; is a multi character option for the command.</source>
          <target state="translated">&lt;code&gt;LONG_OPTION&lt;/code&gt; 은 명령에 대한 다중 문자 옵션입니다.</target>
        </trans-unit>
        <trans-unit id="6c0689e83b930d3970d50624130816074dada21e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NAME&lt;/code&gt; is the name of the alias</source>
          <target state="translated">&lt;code&gt;NAME&lt;/code&gt; 은 별칭의 이름입니다.</target>
        </trans-unit>
        <trans-unit id="659dc6cd6dd2afe1ff1173484ae1e0d19f983851" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NUM1 -eq NUM2&lt;/code&gt; returns true if &lt;code&gt;NUM1&lt;/code&gt; and &lt;code&gt;NUM2&lt;/code&gt; are numerically equal.</source>
          <target state="translated">&lt;code&gt;NUM1 -eq NUM2&lt;/code&gt; 는 &lt;code&gt;NUM1&lt;/code&gt; 과 &lt;code&gt;NUM2&lt;/code&gt; 가 수치 적으로 동일한 경우 true를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="d71e82ba253791bb33eedaf385b23f6417b13124" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NUM1 -ge NUM2&lt;/code&gt; returns true if &lt;code&gt;NUM1&lt;/code&gt; is greater than or equal to &lt;code&gt;NUM2&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;NUM1 -ge NUM2&lt;/code&gt; 는 true를 반환 &lt;code&gt;NUM1&lt;/code&gt; 이 같음보다 큰 경우는 &lt;code&gt;NUM2&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0d9df582d13afb974fbaa29a6848bb816cfaaf5e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NUM1 -gt NUM2&lt;/code&gt; returns true if &lt;code&gt;NUM1&lt;/code&gt; is greater than &lt;code&gt;NUM2&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;NUM1 -gt NUM2&lt;/code&gt; 경우에 true를 돌려 &lt;code&gt;NUM1&lt;/code&gt; 이 보다 큰 &lt;code&gt;NUM2&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a45488a03d4be86a00de61c321e987922dcbc232" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NUM1 -le NUM2&lt;/code&gt; returns true if &lt;code&gt;NUM1&lt;/code&gt; is less than or equal to &lt;code&gt;NUM2&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;NUM1 -le NUM2&lt;/code&gt; true를 반환 &lt;code&gt;NUM1&lt;/code&gt; 이 이상이 같음보다 작이다 &lt;code&gt;NUM2&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="883efe5984f83eb0b9eceed4a4aa02562d1fce4e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NUM1 -lt NUM2&lt;/code&gt; returns true if &lt;code&gt;NUM1&lt;/code&gt; is less than &lt;code&gt;NUM2&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;NUM1 -lt NUM2&lt;/code&gt; 는 &lt;code&gt;NUM1&lt;/code&gt; 이 &lt;code&gt;NUM2&lt;/code&gt; 보다 작은 경우 true를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="d898dea450de1f16ecce0c6618b1a7e0446d0395" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NUM1 -ne NUM2&lt;/code&gt; returns true if &lt;code&gt;NUM1&lt;/code&gt; and &lt;code&gt;NUM2&lt;/code&gt; are not numerically equal.</source>
          <target state="translated">&lt;code&gt;NUM1 -ne NUM2&lt;/code&gt; 는 &lt;code&gt;NUM1&lt;/code&gt; 과 &lt;code&gt;NUM2&lt;/code&gt; 가 숫자가 같지 않으면 true를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="4a253ae8446d1a268f3a1341108f2b08d2c63f9c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;OPTION_ARGUMENTS&lt;/code&gt; is parameter containing a space-separated list of possible option-arguments, which may contain command substitutions.</source>
          <target state="translated">&lt;code&gt;OPTION_ARGUMENTS&lt;/code&gt; 는 명령 대체를 포함 할 수있는 공백으로 구분 된 가능한 옵션 인수 목록을 포함하는 매개 변수입니다.</target>
        </trans-unit>
        <trans-unit id="87dfb2e8277680934b9a6f86f250320b8168eef7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;PATH&lt;/code&gt;, an array of directories in which to search for commands</source>
          <target state="translated">&lt;code&gt;PATH&lt;/code&gt; , 명령을 검색 할 디렉토리의 배열</target>
        </trans-unit>
        <trans-unit id="c49c841209648cd65be707e3bf951935b3b1c05f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;PWD&lt;/code&gt;, the current working directory.</source>
          <target state="translated">&lt;code&gt;PWD&lt;/code&gt; 현재 작업 디렉토리 인 PWD</target>
        </trans-unit>
        <trans-unit id="0a24602681bd3795f2deb5d011de6b47697c940f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RANDOM&lt;/code&gt; generates a pseudo-random integer from a uniform distribution. The range (inclusive) is dependent on the arguments passed. No arguments indicate a range of [0; 32767]. If one argument is specified, the internal engine will be seeded with the argument for future invocations of &lt;code&gt;RANDOM&lt;/code&gt; and no output will be produced. Two arguments indicate a range of [START; END]. Three arguments indicate a range of [START; END] with a spacing of STEP between possible outputs. &lt;code&gt;RANDOM choice&lt;/code&gt; will select one random item from the succeeding arguments.</source>
          <target state="translated">&lt;code&gt;RANDOM&lt;/code&gt; 은 균일 분포에서 의사 난수 정수를 생성합니다. 범위 (포함)는 전달 된 인수에 따라 다릅니다. 인수가 [0; 32767]. 하나의 인수가 지정되면 &lt;code&gt;RANDOM&lt;/code&gt; 의 향후 호출에 대한 인수와 함께 내부 엔진이 시드되며 출력이 생성되지 않습니다. 두 개의 인수는 [START; 종료]. 세 가지 인수는 [START; END] 가능한 출력 사이에 STEP 간격을 둡니다. &lt;code&gt;RANDOM choice&lt;/code&gt; 은 다음 인수에서 임의의 항목을 하나 선택합니다.</target>
        </trans-unit>
        <trans-unit id="850076e736d6b633bb7908034b6ed53ae14a9450" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;REASON&lt;/code&gt; is the name of the event to trap. For example, a signal like &lt;code&gt;INT&lt;/code&gt; or &lt;code&gt;SIGINT&lt;/code&gt;, or the special symbol &lt;code&gt;EXIT&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;REASON&lt;/code&gt; 는 트랩 할 이벤트의 이름입니다. 예를 들어, &lt;code&gt;INT&lt;/code&gt; 또는 &lt;code&gt;SIGINT&lt;/code&gt; 와 같은 신호 또는 특수 기호 &lt;code&gt;EXIT&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="7eff24684fb34bbcfda3c5886cf362420c8b6183" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SHLVL&lt;/code&gt;, the level of nesting of shells</source>
          <target state="translated">&lt;code&gt;SHLVL&lt;/code&gt; 쉘의 중첩 수준 SHLVL</target>
        </trans-unit>
        <trans-unit id="f6dda26458a7e786e0fdc20b95c70c42986fb16f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SHORT_OPTION&lt;/code&gt; is a one character option for the command.</source>
          <target state="translated">&lt;code&gt;SHORT_OPTION&lt;/code&gt; 은 명령의 한 문자 옵션입니다.</target>
        </trans-unit>
        <trans-unit id="55ab4f2d006264b2269600a905a7bafcd927a1ae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;STRING1 != STRING2&lt;/code&gt; returns true if the strings &lt;code&gt;STRING1&lt;/code&gt; and &lt;code&gt;STRING2&lt;/code&gt; are not identical.</source>
          <target state="translated">&lt;code&gt;STRING1 != STRING2&lt;/code&gt; 문자열 &lt;code&gt;STRING1&lt;/code&gt; 과 &lt;code&gt;STRING2&lt;/code&gt; 가 동일하지 않으면 STRING1! = STRING2 는 true를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="325310b7bf1a4f1ee82d91ae0d56e98c0381b312" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;STRING1 = STRING2&lt;/code&gt; returns true if the strings &lt;code&gt;STRING1&lt;/code&gt; and &lt;code&gt;STRING2&lt;/code&gt; are identical.</source>
          <target state="translated">&lt;code&gt;STRING1 = STRING2&lt;/code&gt; 문자열 &lt;code&gt;STRING1&lt;/code&gt; 과 &lt;code&gt;STRING2&lt;/code&gt; 가 동일한 경우 STRING1 = STRING2 는 true를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="17d48b23b08b6733a4dad496c49bd725fb614158" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;USER&lt;/code&gt;, the current username. This variable can be changed by the user.</source>
          <target state="translated">&lt;code&gt;USER&lt;/code&gt; 현재 사용자 이름 인 USER 이 변수는 사용자가 변경할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7d7e9efbe25d8fc40d3f07640c4d689284d46a62" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[...]&lt;/code&gt; (where &quot;...&quot; is some characters) is a character set</source>
          <target state="translated">&lt;code&gt;[...]&lt;/code&gt; (여기서 &quot;...&quot;는 일부 문자 임)는 문자 세트입니다.</target>
        </trans-unit>
        <trans-unit id="55a7aa43cb8d89475a319f8a8834b9e63d4fb19d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[[:^xxx:]]&lt;/code&gt; is the inverse of a named character set</source>
          <target state="translated">&lt;code&gt;[[:^xxx:]]&lt;/code&gt; 는 명명 된 문자 집합의 역수입니다.</target>
        </trans-unit>
        <trans-unit id="8f91610325c933cb2abe51a458c1fbba811fbb75" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[[:alnum:]]&lt;/code&gt; : &quot;alphanumeric&quot;</source>
          <target state="translated">&lt;code&gt;[[:alnum:]]&lt;/code&gt; : &quot;영숫자&quot;</target>
        </trans-unit>
        <trans-unit id="afbae55965e6043ec9b3603ab355555b7db9fa16" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[[:alpha:]]&lt;/code&gt; : &quot;alphabetic&quot;</source>
          <target state="translated">&lt;code&gt;[[:alpha:]]&lt;/code&gt; : &quot;알파벳&quot;</target>
        </trans-unit>
        <trans-unit id="044b4f22a574ddbf01472710731688e81546a80b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[[:ascii:]]&lt;/code&gt; : &quot;0-127&quot;</source>
          <target state="translated">&lt;code&gt;[[:ascii:]]&lt;/code&gt; : &quot;0-127&quot;</target>
        </trans-unit>
        <trans-unit id="859eafc4772001190cac4b4b30822d8882ea96fa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[[:blank:]]&lt;/code&gt; : &quot;space or tab&quot;</source>
          <target state="translated">&lt;code&gt;[[:blank:]]&lt;/code&gt; : &quot;공백 또는 탭&quot;</target>
        </trans-unit>
        <trans-unit id="5ef04cd03f8e9a90f372dd3606f7c46a12cd3a43" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[[:cntrl:]]&lt;/code&gt; : &quot;control character&quot;</source>
          <target state="translated">&lt;code&gt;[[:cntrl:]]&lt;/code&gt; : &quot;제어 문자&quot;</target>
        </trans-unit>
        <trans-unit id="ee673f324efef627744a72bf29e57d06f115f2ac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[[:digit:]]&lt;/code&gt; : &quot;decimal digit&quot;</source>
          <target state="translated">&lt;code&gt;[[:digit:]]&lt;/code&gt; : &quot;10 진수&quot;</target>
        </trans-unit>
        <trans-unit id="66770bba74bed4d3224e2f2b1057af634e30977f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[[:graph:]]&lt;/code&gt; : &quot;printing, excluding space&quot;</source>
          <target state="translated">&lt;code&gt;[[:graph:]]&lt;/code&gt; : &quot;인쇄, 공백 제외&quot;</target>
        </trans-unit>
        <trans-unit id="3b148b2a70bd27eded4cd5c989aad27aa81e14d7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[[:lower:]]&lt;/code&gt; : &quot;lower case letter&quot;</source>
          <target state="translated">&lt;code&gt;[[:lower:]]&lt;/code&gt; : &quot;소문자 소문자&quot;</target>
        </trans-unit>
        <trans-unit id="349f0acff9295529f7acb100e96da6429cbaff7f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[[:print:]]&lt;/code&gt; : &quot;printing, including space&quot;</source>
          <target state="translated">&lt;code&gt;[[:print:]]&lt;/code&gt; : &quot;공간을 포함한 인쇄&quot;</target>
        </trans-unit>
        <trans-unit id="cd5bbd56022145d3ebcfbabe78636b61907fa5af" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[[:punct:]]&lt;/code&gt; : &quot;printing, excluding alphanumeric&quot;</source>
          <target state="translated">&lt;code&gt;[[:punct:]]&lt;/code&gt; : &quot;알파벳을 제외한 인쇄&quot;</target>
        </trans-unit>
        <trans-unit id="0efbdda587a4c9df2ad184567c8fe55f1226c73f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[[:space:]]&lt;/code&gt; : &quot;white space&quot;</source>
          <target state="translated">&lt;code&gt;[[:space:]]&lt;/code&gt; : &quot;공백&quot;</target>
        </trans-unit>
        <trans-unit id="6ecfdf9b3844aedf101b517f9d189e50d3cb1e1d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[[:upper:]]&lt;/code&gt; : &quot;upper case letter&quot;</source>
          <target state="translated">&lt;code&gt;[[:upper:]]&lt;/code&gt; : &quot;대문자&quot;</target>
        </trans-unit>
        <trans-unit id="20970bfd8ffac2ff46875e04f16f239edeaaad59" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[[:word:]]&lt;/code&gt; : &quot;same as \w&quot;</source>
          <target state="translated">&lt;code&gt;[[:word:]]&lt;/code&gt; : &quot;\ w와 동일&quot;</target>
        </trans-unit>
        <trans-unit id="510a2b141258c9f5193f882abd7fc2877bbe76d5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[[:xdigit:]]&lt;/code&gt; : &quot;hexadecimal digit&quot;</source>
          <target state="translated">&lt;code&gt;[[:xdigit:]]&lt;/code&gt; : &quot;16 진수&quot;</target>
        </trans-unit>
        <trans-unit id="0df56150127230ef698d826ba31fa487c31817fa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[[:xxx:]]&lt;/code&gt; is a named character set</source>
          <target state="translated">&lt;code&gt;[[:xxx:]]&lt;/code&gt; 는 명명 된 문자 집합입니다</target>
        </trans-unit>
        <trans-unit id="4142b0bec552fe5af8824c2000b80cc3b58ef5ce" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[^...]&lt;/code&gt; is the inverse of the given character set</source>
          <target state="translated">&lt;code&gt;[^...]&lt;/code&gt; 은 주어진 문자 집합의 역수입니다.</target>
        </trans-unit>
        <trans-unit id="b8885be866728cb4c86020891a22bf3594d7cd79" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[x-y]&lt;/code&gt; is the range of characters from x-y</source>
          <target state="translated">&lt;code&gt;[x-y]&lt;/code&gt; 는 xy 의 문자 범위입니다.</target>
        </trans-unit>
        <trans-unit id="674a67a80e13873d3d1f1e17408ecd6856ad7780" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\&quot;&lt;/code&gt; double quote</source>
          <target state="translated">&lt;code&gt;\&quot;&lt;/code&gt; 큰 따옴표</target>
        </trans-unit>
        <trans-unit id="e09984fc2bba56634c00dc0de4e1023b1299bff7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\0NNN&lt;/code&gt; byte with octal value NNN (1 to 3 digits)</source>
          <target state="translated">&lt;code&gt;\0NNN&lt;/code&gt; 8 진수 값 NNN (1 ~ 3 자리)의 \ 0NNN 바이트</target>
        </trans-unit>
        <trans-unit id="ffccef178b7b6d07f6c65e20b8e3e3f81839cab4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\&lt;/code&gt; backslash</source>
          <target state="translated">&lt;code&gt;\&lt;/code&gt; 백 슬래시</target>
        </trans-unit>
        <trans-unit id="bde0f656c0d40fb4fd988472106703b2f7aa1f81" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\Uhhhhhhhh&lt;/code&gt; 32-bit Unicode character (hhhhhhhh is 8 digits)</source>
          <target state="translated">&lt;code&gt;\Uhhhhhhhh&lt;/code&gt; 32 비트 유니 코드 문자 (hhhhhhhh는 8 자리 임)</target>
        </trans-unit>
        <trans-unit id="563796014a56e4ac5c5f77f062881af141e59497" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\\&lt;/code&gt; backslash</source>
          <target state="translated">&lt;code&gt;\\&lt;/code&gt; 백 슬래시</target>
        </trans-unit>
        <trans-unit id="e85487df761f0119a0ab8b71e82defa28272a27e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\a&lt;/code&gt; alert (BEL)</source>
          <target state="translated">&lt;code&gt;\a&lt;/code&gt; 알림 (BEL)</target>
        </trans-unit>
        <trans-unit id="6ecf11e3a758027d3320219c864ad15d2e511575" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\a&lt;/code&gt; alert (bell)</source>
          <target state="translated">&lt;code&gt;\a&lt;/code&gt; 경고 (종)</target>
        </trans-unit>
        <trans-unit id="e11a806163d10c29b408e05f133a5429af9182a2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\b&lt;/code&gt; backspace</source>
          <target state="translated">&lt;code&gt;\b&lt;/code&gt; 백 스페이스</target>
        </trans-unit>
        <trans-unit id="214294aed08406a291a7bb0c104564bec714ea65" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\b&lt;/code&gt; denotes a word boundary, &lt;code&gt;\B&lt;/code&gt; is not a word boundary.</source>
          <target state="translated">&lt;code&gt;\b&lt;/code&gt; 는 단어 경계를 나타내고 &lt;code&gt;\B&lt;/code&gt; 는 단어 경계가 아닙니다.</target>
        </trans-unit>
        <trans-unit id="fa5c33d70ce6109dcf1693632684d2c1297d79d8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\c&lt;/code&gt; produce no further output</source>
          <target state="translated">&lt;code&gt;\c&lt;/code&gt; 더 이상 출력하지 않습니다</target>
        </trans-unit>
        <trans-unit id="431366d2d7ed426ee90c6dea9bcf6439af798a42" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\d&lt;/code&gt; a decimal digit and &lt;code&gt;\D&lt;/code&gt;, not a decimal digit</source>
          <target state="translated">&lt;code&gt;\d&lt;/code&gt; 는 10 진수가 아니라 &lt;code&gt;\D&lt;/code&gt; 는 10 진수</target>
        </trans-unit>
        <trans-unit id="427e709a9a1e1cf56f02b49e3fb33694fff88fc5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\e&lt;/code&gt; escape</source>
          <target state="translated">&lt;code&gt;\e&lt;/code&gt; 탈출</target>
        </trans-unit>
        <trans-unit id="3dec9886dc5bc26d91961e017093c51aeb623f2d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\f&lt;/code&gt; form feed</source>
          <target state="translated">&lt;code&gt;\f&lt;/code&gt; 양식 피드</target>
        </trans-unit>
        <trans-unit id="d62431de71ccd77e698e0c0b38c15f7e509e3e04" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\n&lt;/code&gt; is a backreference (where n is the number of the group, starting with 1)</source>
          <target state="translated">&lt;code&gt;\n&lt;/code&gt; 은 역 참조입니다 (여기서 n은 1부터 시작하는 그룹 수).</target>
        </trans-unit>
        <trans-unit id="f7118a7690dfcfb797e2cde1ea26ab3518ed7414" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\n&lt;/code&gt; new line</source>
          <target state="translated">&lt;code&gt;\n&lt;/code&gt; 줄 바꾸기</target>
        </trans-unit>
        <trans-unit id="fd22671b65ccb3abb97723f89695a4933e21b59b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\ooo&lt;/code&gt; octal number (ooo is 1 to 3 digits)</source>
          <target state="translated">&lt;code&gt;\ooo&lt;/code&gt; 8 진수 (ooo는 1 ~ 3 자리 숫자 임)</target>
        </trans-unit>
        <trans-unit id="f8d52da29bbc046190185fc575b5d8936ecbc7ab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\r&lt;/code&gt; carriage return</source>
          <target state="translated">&lt;code&gt;\r&lt;/code&gt; 캐리지 리턴</target>
        </trans-unit>
        <trans-unit id="903f0614f89c4e8f4498db7d705c8c2df34864b6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\s&lt;/code&gt; whitespace and &lt;code&gt;\S&lt;/code&gt;, not whitespace</source>
          <target state="translated">&lt;code&gt;\s&lt;/code&gt; 공백이 아닌 \ s 공백 및 &lt;code&gt;\S&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="afb4d0548760e9123909ab09f1fa49fd8324f99b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\t&lt;/code&gt; horizontal tab</source>
          <target state="translated">&lt;code&gt;\t&lt;/code&gt; 수평 탭을</target>
        </trans-unit>
        <trans-unit id="f452f9e21d5b611c87f16a6bbfda9d5fdb3f5ed2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\uhhhh&lt;/code&gt; 16-bit Unicode character (hhhh is 4 digits)</source>
          <target state="translated">&lt;code&gt;\uhhhh&lt;/code&gt; 16 비트 유니 코드 문자 (hhhh는 4 자리 임)</target>
        </trans-unit>
        <trans-unit id="ccc301207bc8cac4ab3b39ff2ca33e98e74ef6cf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\v&lt;/code&gt; vertical tab</source>
          <target state="translated">&lt;code&gt;\v&lt;/code&gt; 세로 탭</target>
        </trans-unit>
        <trans-unit id="f2da1ad0fe9453f3837768ac7bf9ebfb69d1c09b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\w&lt;/code&gt; a &quot;word&quot; character and &lt;code&gt;\W&lt;/code&gt;, a &quot;non-word&quot; character</source>
          <target state="translated">&lt;code&gt;\w&lt;/code&gt; &quot;단어&quot;문자 및 &lt;code&gt;\W&lt;/code&gt; &quot;단어 이외&quot;문자</target>
        </trans-unit>
        <trans-unit id="d31eb1affb2d4908f9fc20413e02e1d32aabb9fd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\xHH&lt;/code&gt; byte with hexadecimal value HH (1 to 2 digits)</source>
          <target state="translated">&lt;code&gt;\xHH&lt;/code&gt; 16 진 값 HH (1 ~ 2 자리)의 \ xHH 바이트</target>
        </trans-unit>
        <trans-unit id="8286c1acd0918a9dc3193991cae71417bb0d86c5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\xhh&lt;/code&gt; hexadecimal number (hhh is 1 to 2 digits)</source>
          <target state="translated">&lt;code&gt;\xhh&lt;/code&gt; 16 진수 (hhh는 1-2 자리 숫자 임)</target>
        </trans-unit>
        <trans-unit id="6f759a1d2212f295e7f2abf2b1fcd24bc2bda5b0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;^&lt;/code&gt; for exponentiation.</source>
          <target state="translated">&lt;code&gt;^&lt;/code&gt; 지수화.</target>
        </trans-unit>
        <trans-unit id="eaba869a7ddbc101338fdfa17c049cd339ef0d47" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;^&lt;/code&gt; is the start of the string or line, &lt;code&gt;$&lt;/code&gt; the end.</source>
          <target state="translated">&lt;code&gt;^&lt;/code&gt; 는 문자열 또는 줄의 시작이며 &lt;code&gt;$&lt;/code&gt; 는 끝입니다.</target>
        </trans-unit>
        <trans-unit id="c317dce6e11f4d87929b0b16556a227ee1a12bf1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;_&lt;/code&gt;, the name of the currently running command.</source>
          <target state="translated">&lt;code&gt;_&lt;/code&gt; , 현재 실행중인 명령의 이름입니다.</target>
        </trans-unit>
        <trans-unit id="d546b2d801cabd40b8a344056c5bf9a1790c4649" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__fish_complete_directories STRING DESCRIPTION&lt;/code&gt; performs path completion on STRING, allowing only directories, and giving them the description DESCRIPTION.</source>
          <target state="translated">&lt;code&gt;__fish_complete_directories STRING DESCRIPTION&lt;/code&gt; STRING에서 경로 완성을 수행하여 디렉토리 만 허용하고 설명을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="151168653813a4190860fb807a539feb72a85ffe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__fish_complete_groups&lt;/code&gt; prints a list of all user groups with the groups members as description.</source>
          <target state="translated">&lt;code&gt;__fish_complete_groups&lt;/code&gt; 는 설명으로 그룹 구성원이있는 모든 사용자 그룹 목록을 인쇄합니다.</target>
        </trans-unit>
        <trans-unit id="c21cd8eb3669994b46b2fd10fee35f8074fe1231" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__fish_complete_path STRING DESCRIPTION&lt;/code&gt; performs path completion on STRING, giving them the description DESCRIPTION.</source>
          <target state="translated">&lt;code&gt;__fish_complete_path STRING DESCRIPTION&lt;/code&gt; 은 STRING에서 경로 완료를 수행하여 설명을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="fe6c99c4d87e577e3f0077e096d1f10e7ed15f4a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__fish_complete_pids&lt;/code&gt; prints a list of all processes IDs with the command name as description.</source>
          <target state="translated">&lt;code&gt;__fish_complete_pids&lt;/code&gt; 는 명령 이름을 설명으로 사용하여 모든 프로세스 ID 목록을 인쇄합니다.</target>
        </trans-unit>
        <trans-unit id="19c8f9e63fbfcbae2a8bcafd31804050cb9c42c7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__fish_complete_suffix SUFFIX&lt;/code&gt; performs file completion allowing only files ending in SUFFIX, with an optional description.</source>
          <target state="translated">&lt;code&gt;__fish_complete_suffix SUFFIX&lt;/code&gt; 는 선택적 설명과 함께 SUFFIX로 끝나는 파일 만 허용하는 파일 완성을 수행합니다.</target>
        </trans-unit>
        <trans-unit id="62f2442829e7fb5cc6246df6b60a835acb901eea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__fish_complete_users&lt;/code&gt; prints a list of all users with their full name as description.</source>
          <target state="translated">&lt;code&gt;__fish_complete_users&lt;/code&gt; 는 설명으로 전체 이름을 가진 모든 사용자 목록을 인쇄합니다.</target>
        </trans-unit>
        <trans-unit id="79d16e25bc08777fbb67f0ca301f242c0bf839c5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__fish_print_filesystems&lt;/code&gt; prints a list of all known file systems. Currently, this is a static list, and not dependent on what file systems the host operating system actually understands.</source>
          <target state="translated">&lt;code&gt;__fish_print_filesystems&lt;/code&gt; 는 알려진 모든 파일 시스템 목록을 인쇄합니다. 현재 이것은 정적 목록이며 호스트 운영 체제가 실제로 이해하는 파일 시스템에 의존하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="be7f901040650f64e3531bd5a2911a4293ff41f9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__fish_print_hostnames&lt;/code&gt; prints a list of all known hostnames. This functions searches the fstab for nfs servers, ssh for known hosts and checks the &lt;code&gt;/etc/hosts&lt;/code&gt; file.</source>
          <target state="translated">&lt;code&gt;__fish_print_hostnames&lt;/code&gt; 는 알려진 모든 호스트 이름 목록을 인쇄합니다. 이 기능은 fstab에서 nfs 서버를 검색하고 ssh는 알려진 호스트를 검색하고 &lt;code&gt;/etc/hosts&lt;/code&gt; 파일을 확인 합니다.</target>
        </trans-unit>
        <trans-unit id="f080f3d4432908c35ec033e993829c0748f45e8d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__fish_print_interfaces&lt;/code&gt; prints a list of all known network interfaces.</source>
          <target state="translated">&lt;code&gt;__fish_print_interfaces&lt;/code&gt; 는 알려진 모든 네트워크 인터페이스 목록을 인쇄합니다.</target>
        </trans-unit>
        <trans-unit id="dab063293bb0ff41158bdf2d084b5f2e6c42f955" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__fish_print_packages&lt;/code&gt; prints a list of all installed packages. This function currently handles Debian, rpm and Gentoo packages.</source>
          <target state="translated">&lt;code&gt;__fish_print_packages&lt;/code&gt; 는 설치된 모든 패키지 목록을 인쇄합니다. 이 함수는 현재 데비안, rpm 및 젠투 패키지를 처리합니다.</target>
        </trans-unit>
        <trans-unit id="f5ced193721f60fcae988eef292b06b71cbdac01" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;_argparse_cmd&lt;/code&gt; will be set to the value of the value of the &lt;code&gt;argparse --name&lt;/code&gt; value.</source>
          <target state="translated">&lt;code&gt;_argparse_cmd&lt;/code&gt; 는 &lt;code&gt;argparse --name&lt;/code&gt; 값의 값으로 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="9989dd44d06686b87c74501e974a49bbae007a90" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;_flag_name&lt;/code&gt; will be set to the short or long flag that being processed.</source>
          <target state="translated">&lt;code&gt;_flag_name&lt;/code&gt; 은 처리중인 short 또는 long 플래그로 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="3e3d051d60a8575f58642534f59f8184e98213f5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;_flag_value&lt;/code&gt; will be set to the value associated with the flag being processed.</source>
          <target state="translated">&lt;code&gt;_flag_value&lt;/code&gt; 는 처리중인 플래그와 연관된 값으로 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="f098091422b8a3149db27131091d105a2234f4c1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a*&lt;/code&gt; matches any files beginning with an 'a' in the current directory.</source>
          <target state="translated">&lt;code&gt;a*&lt;/code&gt; 는 현재 디렉토리에서 'a'로 시작하는 모든 파일과 일치합니다.</target>
        </trans-unit>
        <trans-unit id="da740efe12ef7e9f1e719a1618e3db67d0488541" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;abbr&lt;/code&gt; manages abbreviations - user-defined words that are replaced with longer phrases after they are entered.</source>
          <target state="translated">&lt;code&gt;abbr&lt;/code&gt; 은 약어-사용자 정의 단어를 입력 한 후 더 긴 구로 대체되는 사용자 정의 단어를 관리합니다.</target>
        </trans-unit>
        <trans-unit id="c19acef9767dddae8094fb69c0b451f728946437" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;accept-autosuggestion&lt;/code&gt;, accept the current autosuggestion completely</source>
          <target state="translated">&lt;code&gt;accept-autosuggestion&lt;/code&gt; 수락, 현재 자동 제안 수락</target>
        </trans-unit>
        <trans-unit id="a62dcb13d21b1db60d3092cacb2230a47b2db3ad" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;alias&lt;/code&gt; is a simple wrapper for the &lt;code&gt;function&lt;/code&gt; builtin, which creates a function wrapping a command. It has similar syntax to POSIX shell &lt;code&gt;alias&lt;/code&gt;. For other uses, it is recommended to define a &lt;a href=&quot;#function&quot;&gt;function&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;alias&lt;/code&gt; 는 &lt;code&gt;function&lt;/code&gt; 내장을 위한 간단한 래퍼로, 명령을 감싸는 함수를 만듭니다. POSIX 쉘 &lt;code&gt;alias&lt;/code&gt; 과 유사한 구문을 가지고 있습니다. 다른 용도로는 &lt;a href=&quot;#function&quot;&gt;기능&lt;/a&gt; 을 정의하는 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="a0eea9a0e6ab02f1d549e58e1a161c9edf38e8a2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;and&lt;/code&gt; does not change the current exit status itself, but the command it runs most likely will. The exit status of the last foreground command to exit can always be accessed using the &lt;a href=&quot;index#variables-status&quot;&gt;$status&lt;/a&gt; variable.</source>
          <target state="translated">&lt;code&gt;and&lt;/code&gt; 현재의 종료 상태 자체를 변경할 수 있지만 명령이 가장 가능성이 의지를 실행하지 않습니다. 종료 할 마지막 포 그라운드 명령의 종료 상태는 항상 &lt;a href=&quot;index#variables-status&quot;&gt;$ status&lt;/a&gt; 변수를 사용하여 액세스 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="4b14fc56ef07146413c5146c919fef41d254d71b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;and&lt;/code&gt; is used to execute a command if the previous command was successful (returned a status of 0).</source>
          <target state="translated">&lt;code&gt;and&lt;/code&gt; 이전 명령 (0의 상태를 반환) 성공하면 명령을 실행하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="4d32fad3c25efddc66647b204ec4483b76c85d32" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;and&lt;/code&gt; statements may be used as part of the condition in an &lt;a href=&quot;#if&quot;&gt;&lt;code&gt;if&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#while&quot;&gt;&lt;code&gt;while&lt;/code&gt;&lt;/a&gt; block. See the documentation for &lt;a href=&quot;#if&quot;&gt;&lt;code&gt;if&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#while&quot;&gt;&lt;code&gt;while&lt;/code&gt;&lt;/a&gt; for examples.</source>
          <target state="translated">&lt;code&gt;and&lt;/code&gt; 문은 조건의 일부로서 이용 될 수 &lt;a href=&quot;#if&quot;&gt; &lt;code&gt;if&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;#while&quot;&gt; &lt;code&gt;while&lt;/code&gt; &lt;/a&gt; 블록. &lt;a href=&quot;#if&quot;&gt; &lt;code&gt;if&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#while&quot;&gt; &lt;code&gt;while&lt;/code&gt; &lt;/a&gt; 문서 는 예제 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="cd7e179fd92f8f42e533a58d810881d480a1d6c8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;argv&lt;/code&gt;, an array of arguments to the shell or function. &lt;code&gt;argv&lt;/code&gt; is only defined when inside a function call, or if fish was invoked with a list of arguments, like &lt;code&gt;fish myscript.fish foo bar&lt;/code&gt;. This variable can be changed by the user.</source>
          <target state="translated">&lt;code&gt;argv&lt;/code&gt; , 쉘 또는 함수에 대한 인수 배열. &lt;code&gt;argv&lt;/code&gt; 는 함수 호출 내부에있을 때 또는 &lt;code&gt;fish myscript.fish foo bar&lt;/code&gt; 와 같은 인수 목록으로 물고기를 호출 한 경우에만 정의됩니다 . 이 변수는 사용자가 변경할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b2fea29a00b07f8738493fb54a790cdb48f75ae2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;autoloaded&lt;/code&gt;, &lt;code&gt;not-autoloaded&lt;/code&gt; or &lt;code&gt;n/a&lt;/code&gt;,</source>
          <target state="translated">&lt;code&gt;autoloaded&lt;/code&gt; , &lt;code&gt;not-autoloaded&lt;/code&gt; 또는 해당 &lt;code&gt;n/a&lt;/code&gt; ,</target>
        </trans-unit>
        <trans-unit id="5d000be24614421652f373817cf78d2643e714a3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;backward-bigword&lt;/code&gt;, move one whitespace-delimited word to the left</source>
          <target state="translated">&lt;code&gt;backward-bigword&lt;/code&gt; 단어, 공백으로 구분 된 한 단어를 왼쪽으로 이동</target>
        </trans-unit>
        <trans-unit id="b9c330f6fe66af41777620b2cd2bcd092e6cf6b7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;backward-char&lt;/code&gt;, moves one character to the left</source>
          <target state="translated">&lt;code&gt;backward-char&lt;/code&gt; , 한 문자를 왼쪽으로 이동</target>
        </trans-unit>
        <trans-unit id="da2335b11f9e11649f9220589012e6a456adefb9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;backward-delete-char&lt;/code&gt;, deletes one character of input to the left of the cursor</source>
          <target state="translated">&lt;code&gt;backward-delete-char&lt;/code&gt; , 커서 왼쪽에있는 입력 문자 하나를 삭제합니다</target>
        </trans-unit>
        <trans-unit id="2a6d51c18208675f0c900a84d11e180bb9e962bb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;backward-kill-bigword&lt;/code&gt;, move the whitespace-delimited word to the left of the cursor to the killring</source>
          <target state="translated">&lt;code&gt;backward-kill-bigword&lt;/code&gt; 이면 공백으로 구분 된 단어를 커서 왼쪽으로 킬링 으로 이동하십시오.</target>
        </trans-unit>
        <trans-unit id="62460137fe11bff51d78b929accaa08e73094570" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;backward-kill-line&lt;/code&gt;, move everything from the beginning of the line to the cursor to the killring</source>
          <target state="translated">&lt;code&gt;backward-kill-line&lt;/code&gt; , 줄 의 시작부터 커서, 킬링까지 모든 것을 이동하십시오.</target>
        </trans-unit>
        <trans-unit id="f55ce793945f8c62d486556577ca1c690f46c3c5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;backward-kill-path-component&lt;/code&gt;, move one path component to the left of the cursor (everything from the last &quot;/&quot; or whitespace exclusive) to the killring</source>
          <target state="translated">&lt;code&gt;backward-kill-path-component&lt;/code&gt; , 하나의 경로 구성 요소를 커서의 왼쪽으로 이동 (마지막 &quot;/&quot;또는 공백에서 모든 것)하여 킬링으로 이동</target>
        </trans-unit>
        <trans-unit id="1090ff7b2170dc30812b841e72b981156f48baa3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;backward-kill-word&lt;/code&gt;, move the word to the left of the cursor to the killring</source>
          <target state="translated">&lt;code&gt;backward-kill-word&lt;/code&gt; , 커서 왼쪽의 단어를 킬링으로 이동</target>
        </trans-unit>
        <trans-unit id="eaff15f2e52a4e435dc51f066d2c92044260b5a6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;backward-word&lt;/code&gt;, move one word to the left</source>
          <target state="translated">&lt;code&gt;backward-word&lt;/code&gt; 한 단어를 왼쪽으로 이동</target>
        </trans-unit>
        <trans-unit id="9b8ef1c6b6eca273534fa796a1c6591112199712" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;begin-selection&lt;/code&gt;, start selecting text</source>
          <target state="translated">&lt;code&gt;begin-selection&lt;/code&gt; , 텍스트 선택 시작</target>
        </trans-unit>
        <trans-unit id="0120467949b680095aa0fc369ab744c455ddc2af" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;begin&lt;/code&gt; does not change the current exit status itself. After the block has completed, &lt;code&gt;$status&lt;/code&gt; will be set to the status returned by the most recent command.</source>
          <target state="translated">&lt;code&gt;begin&lt;/code&gt; 은 현재 종료 상태 자체를 변경하지 않습니다. 블록이 완료되면 &lt;code&gt;$status&lt;/code&gt; 는 가장 최근 명령에 의해 반환 된 상태로 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="5e5b90f0591cbf722fd55d6caed6b3327fe08a8f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;begin&lt;/code&gt; is used to create a new block of code.</source>
          <target state="translated">&lt;code&gt;begin&lt;/code&gt; 은 새로운 코드 블록을 만드는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="a77f2c79a8668eac7e52e2afe37ed088dfc2cafa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;beginning-of-buffer&lt;/code&gt;, moves to the beginning of the buffer, i.e. the start of the first line</source>
          <target state="translated">&lt;code&gt;beginning-of-buffer&lt;/code&gt; 의 시작은 버퍼의 시작, 즉 첫 번째 라인의 시작으로 이동합니다</target>
        </trans-unit>
        <trans-unit id="3c0250082ea4964e009fce923a007dd188ae76f2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;beginning-of-history&lt;/code&gt;, move to the beginning of the history</source>
          <target state="translated">&lt;code&gt;beginning-of-history&lt;/code&gt; 의 시작, 역사의 시작으로 이동</target>
        </trans-unit>
        <trans-unit id="6af2ea8ba5d15ff52fc6384e3f88db68525bfce1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;beginning-of-line&lt;/code&gt;, move to the beginning of the line</source>
          <target state="translated">&lt;code&gt;beginning-of-line&lt;/code&gt; 시작, 선의 시작으로 이동</target>
        </trans-unit>
        <trans-unit id="fc7c02a24e6d8c5e722c5deebe07d65b83994404" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bg 123 456 789&lt;/code&gt; will background 123, 456 and 789.</source>
          <target state="translated">&lt;code&gt;bg 123 456 789&lt;/code&gt; 는 123, 456 및 789를 배경으로합니다.</target>
        </trans-unit>
        <trans-unit id="f293b945f0caeb8c9d99e2cb25f696f95455f393" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bg 123 banana&lt;/code&gt; or &lt;code&gt;bg banana 123&lt;/code&gt; will complain that &quot;banana&quot; is not a valid job specifier.</source>
          <target state="translated">&lt;code&gt;bg 123 banana&lt;/code&gt; 또는 &lt;code&gt;bg banana 123&lt;/code&gt; 은 &quot;banana&quot;가 유효한 작업 지정자가 아니라고 불평합니다.</target>
        </trans-unit>
        <trans-unit id="c539500b5512e6cee0343bc2e9f056e044c29a94" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bg&lt;/code&gt; sends &lt;a href=&quot;index#syntax-job-control&quot;&gt;jobs&lt;/a&gt; to the background, resuming them if they are stopped.</source>
          <target state="translated">&lt;code&gt;bg&lt;/code&gt; 는 백그라운드 로 &lt;a href=&quot;index#syntax-job-control&quot;&gt;작업&lt;/a&gt; 을 전송 하고 중지 된 경우 다시 시작합니다.</target>
        </trans-unit>
        <trans-unit id="e056b40eaf99ba81ea6f15243e3e3c5260bb9b60" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bind&lt;/code&gt; adds a binding for the specified key sequence to the specified command.</source>
          <target state="translated">&lt;code&gt;bind&lt;/code&gt; 는 지정된 키 시퀀스에 대한 바인딩을 지정된 명령에 추가합니다.</target>
        </trans-unit>
        <trans-unit id="ba6fc99b1e67b649803426c769ee8900eef1ef37" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;block&lt;/code&gt; prevents events triggered by &lt;code&gt;fish&lt;/code&gt; or the &lt;a href=&quot;commands#emit&quot;&gt;&lt;code&gt;emit&lt;/code&gt;&lt;/a&gt; command from being delivered and acted upon while the block is in place.</source>
          <target state="translated">&lt;code&gt;block&lt;/code&gt; 은 블록이있는 동안 &lt;code&gt;fish&lt;/code&gt; 또는 &lt;a href=&quot;commands#emit&quot;&gt; &lt;code&gt;emit&lt;/code&gt; &lt;/a&gt; 명령 에 의해 트리거 된 이벤트 가 전달되고 수행되는 것을 방지합니다 .</target>
        </trans-unit>
        <trans-unit id="109ab83c61e6f478a432c9453f9f17600e2093aa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;break&lt;/code&gt; halts a currently running loop, such as a &lt;a href=&quot;#for&quot;&gt;for&lt;/a&gt; loop or a &lt;a href=&quot;#while&quot;&gt;while&lt;/a&gt; loop. It is usually added inside of a conditional block such as an &lt;a href=&quot;#if&quot;&gt;if&lt;/a&gt; statement or a &lt;a href=&quot;#switch&quot;&gt;switch&lt;/a&gt; statement.</source>
          <target state="translated">&lt;code&gt;break&lt;/code&gt; 는 &lt;a href=&quot;#for&quot;&gt;for&lt;/a&gt; 루프 나 &lt;a href=&quot;#while&quot;&gt;while&lt;/a&gt; 루프 와 같이 현재 실행중인 루프를 정지시킵니다 . 일반적으로 &lt;a href=&quot;#if&quot;&gt;if&lt;/a&gt; 문이나 &lt;a href=&quot;#switch&quot;&gt;switch&lt;/a&gt; 문과 같은 조건부 블록 안에 추가됩니다 .</target>
        </trans-unit>
        <trans-unit id="0589a3e7659aa381b45140cc091b4d09b126ffbb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;breakpoint&lt;/code&gt; is used to halt a running script and launch an interactive debugging prompt.</source>
          <target state="translated">&lt;code&gt;breakpoint&lt;/code&gt; 은 실행중인 스크립트를 중지하고 대화식 디버깅 프롬프트를 시작하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="fafa721ae5a68c27c8a663706424f7b1c6a18e96" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;builtin&lt;/code&gt; forces the shell to use a builtin command, rather than a function or program.</source>
          <target state="translated">&lt;code&gt;builtin&lt;/code&gt; 은 쉘이 함수 나 프로그램이 아닌 내장 명령을 사용하도록합니다.</target>
        </trans-unit>
        <trans-unit id="e87a6fd326225bdc2ab173301eb10ecadacb604c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;capitalize-word&lt;/code&gt;, make the current word begin with a capital letter</source>
          <target state="translated">&lt;code&gt;capitalize-word&lt;/code&gt; , 현재 단어를 대문자로 시작하게하십시오</target>
        </trans-unit>
        <trans-unit id="bc6959bad84649fbe2865a7c0dd5c9b6b335d6b2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cd&lt;/code&gt; changes the current working directory.</source>
          <target state="translated">&lt;code&gt;cd&lt;/code&gt; 는 현재 작업 디렉토리를 변경합니다.</target>
        </trans-unit>
        <trans-unit id="dfbab8334144a651ba29e3af05dea047614762d0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cd&lt;/code&gt;, change the current directory</source>
          <target state="translated">&lt;code&gt;cd&lt;/code&gt; , 현재 디렉토리 변경</target>
        </trans-unit>
        <trans-unit id="15f5e0406bd47b1eaae4d0ad9774730e2e0fa33f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cdh&lt;/code&gt; with no arguments presents a list of recently visited directories. You can then select one of the entries by letter or number. You can also press &lt;b&gt;tab&lt;/b&gt; to use the completion pager to select an item from the list. If you give it a single argument it is equivalent to &lt;code&gt;cd directory&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;cdh&lt;/code&gt; 인수가없는 cdh 는 최근에 방문한 디렉토리 목록을 제공합니다. 그런 다음 문자 또는 숫자로 항목 중 하나를 선택할 수 있습니다. 또한 완료 페이저를 사용하여 목록에서 항목을 선택하기 위해 &lt;b&gt;tab&lt;/b&gt; 을 누를 수도 있습니다 . 단일 인수를 주면 &lt;code&gt;cd directory&lt;/code&gt; 와 같습니다 .</target>
        </trans-unit>
        <trans-unit id="cda0b4f211e8f08f3bf58155743e1f95b0b82e86" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;clear&lt;/code&gt; clears the history file. A prompt is displayed before the history is erased asking you to confirm you really want to clear all history unless &lt;code&gt;builtin history&lt;/code&gt; is used.</source>
          <target state="translated">&lt;code&gt;clear&lt;/code&gt; 는 내역 파일을 지 웁니다. &lt;code&gt;builtin history&lt;/code&gt; 을 사용 하지 않는 한 모든 기록을 정말로 지 울지 묻는 메시지가 기록을 삭제하기 전에 표시됩니다 .</target>
        </trans-unit>
        <trans-unit id="eeb0f5e272e28ae7c91fd8b023b0a19e7a459058" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;command -s ls&lt;/code&gt; returns the path to the &lt;code&gt;ls&lt;/code&gt; program.</source>
          <target state="translated">&lt;code&gt;command -s ls&lt;/code&gt; 는 &lt;code&gt;ls&lt;/code&gt; 프로그램 의 경로를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="97c259a9d28f9f6b619125e53d36b8df5ba20de8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;command -sq git; and command git log&lt;/code&gt; runs &lt;code&gt;git log&lt;/code&gt; only if &lt;code&gt;git&lt;/code&gt; exists.</source>
          <target state="translated">&lt;code&gt;command -sq git; and command git log&lt;/code&gt; 실행은 &lt;code&gt;git log&lt;/code&gt; 만 &lt;code&gt;git&lt;/code&gt; 존재한다.</target>
        </trans-unit>
        <trans-unit id="a21b95c84bf5868716ad9ac99d71535372dabf6b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;command ls&lt;/code&gt; causes fish to execute the &lt;code&gt;ls&lt;/code&gt; program, even if an &lt;code&gt;ls&lt;/code&gt; function exists.</source>
          <target state="translated">&lt;code&gt;command ls&lt;/code&gt; &lt;code&gt;ls&lt;/code&gt; 함수가 존재 하더라도 &lt;code&gt;ls&lt;/code&gt; 명령 은 물고기가 ls 프로그램 을 실행하도록 합니다.</target>
        </trans-unit>
        <trans-unit id="4a71b195f57af0b58405241fa516c189f211c3b8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;command&lt;/code&gt; forces the shell to execute the program &lt;code&gt;COMMANDNAME&lt;/code&gt; and ignore any functions or builtins with the same name.</source>
          <target state="translated">&lt;code&gt;command&lt;/code&gt; 은 쉘이 &lt;code&gt;COMMANDNAME&lt;/code&gt; 프로그램을 실행하도록 하고 동일한 이름을 가진 함수 나 내장을 무시합니다.</target>
        </trans-unit>
        <trans-unit id="af221efa155137f5c61d4f5aceb1cf7c62f260f2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;commandline -j $history[3]&lt;/code&gt; replaces the job under the cursor with the third item from the command line history.</source>
          <target state="translated">&lt;code&gt;commandline -j $history[3]&lt;/code&gt; 은 커서 아래의 작업을 명령 행 히스토리의 세 번째 항목으로 바꿉니다.</target>
        </trans-unit>
        <trans-unit id="309984e4dd2d8af4b4584b4c3083b4f0d1406f3f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;commandline&lt;/code&gt; can be used to set or get the current contents of the command line buffer.</source>
          <target state="translated">&lt;code&gt;commandline&lt;/code&gt; 커맨드 라인 버퍼의 현재의 내용을 설정하거나 얻기 위하여 사용될 수있다.</target>
        </trans-unit>
        <trans-unit id="f15156642070a0cb6e71c6db8ebcc85452bc0c42" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;complete-and-search&lt;/code&gt;, invoke the searchable pager on completion options (for convenience, this also moves backwards in the completion pager)</source>
          <target state="translated">&lt;code&gt;complete-and-search&lt;/code&gt; , 완료 옵션에서 검색 가능한 호출기를 호출하십시오 (편의를 위해 완료 호출기에서 뒤로 이동합니다)</target>
        </trans-unit>
        <trans-unit id="089be67cff1a03e93a32f020b671eb8b1f56f883" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;complete&lt;/code&gt;, guess the remainder of the current token</source>
          <target state="translated">&lt;code&gt;complete&lt;/code&gt; , 현재 토큰의 나머지를 추측</target>
        </trans-unit>
        <trans-unit id="d29943b58a6614527b303a36cdd18002ba211e22" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;contains&lt;/code&gt; tests whether the set &lt;code&gt;VALUES&lt;/code&gt; contains the string &lt;code&gt;KEY&lt;/code&gt;. If so, &lt;code&gt;contains&lt;/code&gt; exits with status 0; if not, it exits with status 1.</source>
          <target state="translated">&lt;code&gt;contains&lt;/code&gt; 설정 여부를 테스트 &lt;code&gt;VALUES&lt;/code&gt; 이 문자열이 포함 &lt;code&gt;KEY&lt;/code&gt; 를 . 그렇다면 상태 0의 엑시트를 &lt;code&gt;contains&lt;/code&gt; . 그렇지 않으면 상태 1로 종료됩니다.</target>
        </trans-unit>
        <trans-unit id="9eb5230ded7b496a77e086af29b8cd85ff72378f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;continue&lt;/code&gt; skips the remainder of the current iteration of the current inner loop, such as a &lt;a href=&quot;#for&quot;&gt;for&lt;/a&gt; loop or a &lt;a href=&quot;#while&quot;&gt;while&lt;/a&gt; loop. It is usually added inside of a conditional block such as an &lt;a href=&quot;#if&quot;&gt;if&lt;/a&gt; statement or a &lt;a href=&quot;#switch&quot;&gt;switch&lt;/a&gt; statement.</source>
          <target state="translated">&lt;code&gt;continue&lt;/code&gt; 는 &lt;a href=&quot;#for&quot;&gt;for&lt;/a&gt; 루프 또는 &lt;a href=&quot;#while&quot;&gt;while&lt;/a&gt; 루프 와 같이 현재 내부 루프의 현재 반복의 나머지 부분을 건너 뜁니다 . 일반적으로 &lt;a href=&quot;#if&quot;&gt;if&lt;/a&gt; 문이나 &lt;a href=&quot;#switch&quot;&gt;switch&lt;/a&gt; 문과 같은 조건부 블록 안에 추가됩니다 .</target>
        </trans-unit>
        <trans-unit id="889049214149e0bdc403edd0d28167926cc29679" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;count&lt;/code&gt; does not accept any options, not even &lt;code&gt;-h&lt;/code&gt; or &lt;code&gt;--help&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;count&lt;/code&gt; 는 &lt;code&gt;-h&lt;/code&gt; 또는 &lt;code&gt;--help&lt;/code&gt; 조차 옵션을 허용하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="a73ba46d4a83aa8636b8621b29b9a3175d9f43ac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;count&lt;/code&gt; exits with a non-zero exit status if no arguments were passed to it, and with zero if at least one argument was passed.</source>
          <target state="translated">&lt;code&gt;count&lt;/code&gt; 는 인수가 전달되지 않은 경우 0이 아닌 종료 상태로 종료하고 하나 이상의 인수가 전달 된 경우 0으로 종료됩니다.</target>
        </trans-unit>
        <trans-unit id="1cd4f1b7998e711ede282f331ba98b40351f8b37" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;count&lt;/code&gt; prints the number of arguments that were passed to it. This is usually used to find out how many elements an environment variable array contains.</source>
          <target state="translated">&lt;code&gt;count&lt;/code&gt; 는 전달 된 인수 수를 인쇄합니다. 일반적으로 환경 변수 배열에 포함 된 요소 수를 확인하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="664f9b331ae4b98fc7b3aa5e33894b2c305e537a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cp&lt;/code&gt;, copy files</source>
          <target state="translated">&lt;code&gt;cp&lt;/code&gt; , 파일 복사</target>
        </trans-unit>
        <trans-unit id="db428b5648e98023e27b1992a285d5e91a0abb98" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;delete-char&lt;/code&gt;, delete one character to the right of the cursor</source>
          <target state="translated">&lt;code&gt;delete-char&lt;/code&gt; , 커서 오른쪽의 한 문자를 삭제</target>
        </trans-unit>
        <trans-unit id="8ae7a82ff377a36f428165b33436467957d8c7d4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;delete&lt;/code&gt; deletes history items. Without the &lt;code&gt;--prefix&lt;/code&gt; or &lt;code&gt;--contains&lt;/code&gt; options, the exact match of the specified text will be deleted. If you don't specify &lt;code&gt;--exact&lt;/code&gt; a prompt will be displayed before any items are deleted asking you which entries are to be deleted. You can enter the word &quot;all&quot; to delete all matching entries. You can enter a single ID (the number in square brackets) to delete just that single entry. You can enter more than one ID separated by a space to delete multiple entries. Just press [enter] to not delete anything. Note that the interactive delete behavior is a feature of the history function. The history builtin only supports &lt;code&gt;--exact --case-sensitive&lt;/code&gt; deletion.</source>
          <target state="translated">&lt;code&gt;delete&lt;/code&gt; 삭제 기록 항목이 없습니다. &lt;code&gt;--prefix&lt;/code&gt; 또는 &lt;code&gt;--contains&lt;/code&gt; 옵션이 없으면 지정된 텍스트와 정확히 일치하는 항목이 삭제됩니다. &lt;code&gt;--exact&lt;/code&gt; 를 지정하지 않으면 삭제할 항목을 묻는 항목이 삭제되기 전에 프롬프트가 표시됩니다. 일치하는 모든 항목을 삭제하기 위해 &quot;all&quot;이라는 단어를 입력 할 수 있습니다. 단일 ID (대괄호 안의 숫자)를 입력하여 해당 단일 항목 만 삭제할 수 있습니다. 공백으로 구분 된 둘 이상의 ID를 입력하여 여러 항목을 삭제할 수 있습니다. 아무것도 입력하지 않으려면 [enter]를 누르십시오. 대화식 삭제 동작은 히스토리 기능의 기능입니다. 내장 된 기록은 &lt;code&gt;--exact --case-sensitive&lt;/code&gt; 삭제 만 지원합니다 .</target>
        </trans-unit>
        <trans-unit id="eeddc56657f7e157dc8354c870c20f5ecb4d8ad3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dirh&lt;/code&gt; does not accept any parameters.</source>
          <target state="translated">&lt;code&gt;dirh&lt;/code&gt; 는 매개 변수를 허용하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="d5e7b82e83d7b0b50774a2eb148a198ce41a39ca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dirh&lt;/code&gt; prints the current directory history. The current position in the history is highlighted using the color defined in the &lt;code&gt;fish_color_history_current&lt;/code&gt; environment variable.</source>
          <target state="translated">&lt;code&gt;dirh&lt;/code&gt; 는 현재 디렉토리 기록을 인쇄합니다. 내역의 현재 위치는 &lt;code&gt;fish_color_history_current&lt;/code&gt; 환경 변수에 정의 된 색상을 사용하여 강조 표시됩니다 .</target>
        </trans-unit>
        <trans-unit id="d2e40ea360274eda68b869324ac2b93c116e075e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dirs&lt;/code&gt; does not accept any parameters.</source>
          <target state="translated">&lt;code&gt;dirs&lt;/code&gt; 는 매개 변수를 허용하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="fa06ced14a3385987b86c9e9788919b13ad4eba2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dirs&lt;/code&gt; prints the current directory stack, as created by the &lt;a href=&quot;#pushd&quot;&gt;&lt;code&gt;pushd&lt;/code&gt;&lt;/a&gt; command.</source>
          <target state="translated">&lt;code&gt;dirs&lt;/code&gt; 는 &lt;a href=&quot;#pushd&quot;&gt; &lt;code&gt;pushd&lt;/code&gt; &lt;/a&gt; 명령 으로 작성된 현재 디렉토리 스택을 인쇄합니다 .</target>
        </trans-unit>
        <trans-unit id="68e9e94ab8f86bdeefa011d87a89eb714e2e975f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;disown (jobs -p)&lt;/code&gt; removes all jobs from the job list without terminating them.</source>
          <target state="translated">&lt;code&gt;disown (jobs -p)&lt;/code&gt; 은 작업을 종료하지 않고 작업 목록에서 모든 작업을 제거합니다.</target>
        </trans-unit>
        <trans-unit id="8a033e91a71f36b0fee3effb2f84125242340bbe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;disown&lt;/code&gt; removes the specified &lt;a href=&quot;index#syntax-job-control&quot;&gt;job&lt;/a&gt; from the list of jobs. The job itself continues to exist, but fish does not keep track of it any longer.</source>
          <target state="translated">&lt;code&gt;disown&lt;/code&gt; 은 &lt;a href=&quot;index#syntax-job-control&quot;&gt;작업&lt;/a&gt; 목록에서 지정된 작업 을 제거합니다 . 작업 자체는 계속 존재하지만 물고기는 더 이상 추적하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="9c723a54d18efe8d350eb3bbea07e3d214e66566" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;disown&lt;/code&gt; returns 0 if all specified jobs were disowned successfully, and 1 if any problems were encountered.</source>
          <target state="translated">&lt;code&gt;disown&lt;/code&gt; 은 지정된 모든 작업이 성공적으로 해제되면 0을 반환하고 문제가 발생하면 1을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="9b690e3c2f3c4d26267990ca1121e08803e26790" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;downcase-word&lt;/code&gt;, make the current word lowercase</source>
          <target state="translated">&lt;code&gt;downcase-word&lt;/code&gt; , 현재 단어를 소문자로 만듭니다.</target>
        </trans-unit>
        <trans-unit id="c8ce83fdd366a12c3214fbb25e2354db22918e72" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;e&lt;/code&gt; - Euler's number.</source>
          <target state="translated">&lt;code&gt;e&lt;/code&gt; - 오일러 번호.</target>
        </trans-unit>
        <trans-unit id="db82cff03deb4d0edad47e48c508110149601fc3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;echo&lt;/code&gt; displays a string of text.</source>
          <target state="translated">&lt;code&gt;echo&lt;/code&gt; 는 문자열을 표시합니다.</target>
        </trans-unit>
        <trans-unit id="d4ab97d4f9361c5405fbd1cb8b1c830e462276d0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;emit&lt;/code&gt; emits, or fires, an event. Events are delivered to, or caught by, special functions called event handlers. The arguments are passed to the event handlers as function arguments.</source>
          <target state="translated">&lt;code&gt;emit&lt;/code&gt; 이벤트를 발생 시키거나 발생시킵니다. 이벤트는 이벤트 핸들러라는 특수 함수로 전달되거나 포착됩니다. 인수는 함수 핸들러로 이벤트 핸들러에 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="4d522681c2d73791cceab1025800721dd4d39780" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;end-of-buffer&lt;/code&gt;, moves to the end of the buffer, i.e. the end of the first line</source>
          <target state="translated">&lt;code&gt;end-of-buffer&lt;/code&gt; 끝, 버퍼의 끝, 즉 첫 번째 줄의 끝으로 이동</target>
        </trans-unit>
        <trans-unit id="b0b2f9cdb44af1315c1e9e593723762d03d3fe51" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;end-of-history&lt;/code&gt;, move to the end of the history</source>
          <target state="translated">&lt;code&gt;end-of-history&lt;/code&gt; 의 끝, 역사의 끝으로 이동</target>
        </trans-unit>
        <trans-unit id="7707e2618c27c9ed8346db38dfd79af1c381cb7e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;end-of-line&lt;/code&gt;, move to the end of the line</source>
          <target state="translated">&lt;code&gt;end-of-line&lt;/code&gt; 끝, 줄 끝으로 이동</target>
        </trans-unit>
        <trans-unit id="af8e60a2a7ae6dc063d3b5432c2478d27ef3c004" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;end-selection&lt;/code&gt;, end selecting text</source>
          <target state="translated">&lt;code&gt;end-selection&lt;/code&gt; , 텍스트 선택 종료</target>
        </trans-unit>
        <trans-unit id="262f87c81f23dff1f7f93a5b6044595d7948ad4e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;end&lt;/code&gt; ends a block of commands.</source>
          <target state="translated">&lt;code&gt;end&lt;/code&gt; 는 명령 블록을 종료합니다.</target>
        </trans-unit>
        <trans-unit id="50137453d16688a498916282a2c1c45a4f3bcc6b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eval&lt;/code&gt; evaluates the specified parameters as a command. If more than one parameter is specified, all parameters will be joined using a space character as a separator.</source>
          <target state="translated">&lt;code&gt;eval&lt;/code&gt; 은 지정된 매개 변수를 명령으로 평가합니다. 둘 이상의 매개 변수를 지정하면 공백 문자를 구분 기호로 사용하여 모든 매개 변수가 결합됩니다.</target>
        </trans-unit>
        <trans-unit id="54915828756074f95f7a1e549b17591d5bbbc7f1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;exec emacs&lt;/code&gt; starts up the emacs text editor, and exits &lt;code&gt;fish&lt;/code&gt;. When emacs exits, the session will terminate.</source>
          <target state="translated">&lt;code&gt;exec emacs&lt;/code&gt; 는 emacs 텍스트 편집기를 시작하고 &lt;code&gt;fish&lt;/code&gt; 를 종료 합니다 . emacs가 종료되면 세션이 종료됩니다.</target>
        </trans-unit>
        <trans-unit id="dc50b22031778292cfda48a3d988ca690c6c2412" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;exec&lt;/code&gt; replaces the currently running shell with a new command. On successful completion, &lt;code&gt;exec&lt;/code&gt; never returns. &lt;code&gt;exec&lt;/code&gt; cannot be used inside a pipeline.</source>
          <target state="translated">&lt;code&gt;exec&lt;/code&gt; 는 현재 실행중인 쉘을 새로운 명령으로 대체합니다. 성공적으로 완료되면 &lt;code&gt;exec&lt;/code&gt; 는 절대 반환하지 않습니다. 파이프 라인 내에서 &lt;code&gt;exec&lt;/code&gt; 를 사용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="4b4c92277d3c3b535fdab93f22262c655be96df1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;exit&lt;/code&gt; causes fish to exit. If &lt;code&gt;STATUS&lt;/code&gt; is supplied, it will be converted to an integer and used as the exit code. Otherwise, the exit code will be that of the last command executed.</source>
          <target state="translated">&lt;code&gt;exit&lt;/code&gt; 하면 물고기가 종료됩니다. 경우 &lt;code&gt;STATUS&lt;/code&gt; 공급되고, 정수로 변환하여 종료 코드로 사용됩니다. 그렇지 않으면 종료 코드는 마지막으로 실행 된 명령의 종료 코드입니다.</target>
        </trans-unit>
        <trans-unit id="4e29309373a74a1b16ddfa0609041f77380dff25" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;exp&lt;/code&gt; - the base-e exponential function</source>
          <target state="translated">&lt;code&gt;exp&lt;/code&gt; - 기수 지수 함수</target>
        </trans-unit>
        <trans-unit id="b3ec88c5f26ffd60440d3112086d3f1c16e73ee2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fac&lt;/code&gt; - factorial</source>
          <target state="translated">&lt;code&gt;fac&lt;/code&gt; 계승</target>
        </trans-unit>
        <trans-unit id="7bd010b23a35ff01964bb2a67cb5239733c4271d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;false&lt;/code&gt; sets the exit status to 1.</source>
          <target state="translated">&lt;code&gt;false&lt;/code&gt; 는 종료 상태를 1로 설정합니다.</target>
        </trans-unit>
        <trans-unit id="0ca1e464b704300c81bf4a662e655838605e064f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;features&lt;/code&gt; lists all available feature flags.</source>
          <target state="translated">&lt;code&gt;features&lt;/code&gt; 는 사용 가능한 모든 기능 플래그를 나열합니다.</target>
        </trans-unit>
        <trans-unit id="0a7a1110af9305bc1cfb185b18660b97a03ee068" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fg&lt;/code&gt; brings the specified &lt;a href=&quot;index#syntax-job-control&quot;&gt;job&lt;/a&gt; to the foreground, resuming it if it is stopped. While a foreground job is executed, fish is suspended. If no job is specified, the last job to be used is put in the foreground. If PID is specified, the job with the specified group ID is put in the foreground.</source>
          <target state="translated">&lt;code&gt;fg&lt;/code&gt; 는 지정된 &lt;a href=&quot;index#syntax-job-control&quot;&gt;작업&lt;/a&gt; 을 포 그라운드로 가져 와서 중지 된 경우 재개합니다. 포 그라운드 작업이 실행되는 동안 물고기는 일시 중지됩니다. 작업을 지정하지 않으면 마지막으로 사용할 작업이 포 그라운드에 놓입니다. PID가 지정되면 지정된 그룹 ID를 가진 작업이 포 그라운드에 놓입니다.</target>
        </trans-unit>
        <trans-unit id="2aa0e0e8cf8a0bba6d31683fafcc730149fe3080" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fg&lt;/code&gt; will put the last job in the foreground.</source>
          <target state="translated">&lt;code&gt;fg&lt;/code&gt; 는 마지막 작업을 포 그라운드로 놓습니다.</target>
        </trans-unit>
        <trans-unit id="f59d3cc746010fada2bbe7590bb1f716dca37ed5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;filename&lt;/code&gt; prints the filename of the currently running script. Also &lt;code&gt;current-filename&lt;/code&gt;, &lt;code&gt;-f&lt;/code&gt; or &lt;code&gt;--current-filename&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;filename&lt;/code&gt; 은 현재 실행중인 스크립트의 파일 이름을 인쇄합니다. 또한 &lt;code&gt;current-filename&lt;/code&gt; , &lt;code&gt;-f&lt;/code&gt; 또는 &lt;code&gt;--current-filename&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d6cb67ef43537c65789f446737251042e346c8bb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;firefox &amp;amp;; disown&lt;/code&gt; will start the Firefox web browser in the background and remove it from the job list, meaning it will not be closed when the fish process is closed.</source>
          <target state="translated">&lt;code&gt;firefox &amp;amp;; disown&lt;/code&gt; 은 백그라운드에서 Firefox 웹 브라우저를 시작하고 작업 목록에서 제거합니다. 즉, 물고기 프로세스가 닫힐 때 닫히지 않습니다.</target>
        </trans-unit>
        <trans-unit id="b79f46ab70d3df2b244e8bc8b2fd59aefcebc9ce" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish-path&lt;/code&gt; prints the absolute path to the currently executing instance of fish.</source>
          <target state="translated">&lt;code&gt;fish-path&lt;/code&gt; 는 현재 실행중인 물고기 인스턴스에 대한 절대 경로를 인쇄합니다.</target>
        </trans-unit>
        <trans-unit id="d3c1add6b5f641c5abbdbd7961e2d0d5e497b5c4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; also has man pages for its commands. For example, &lt;code&gt;man set&lt;/code&gt; will show the documentation for &lt;code&gt;set&lt;/code&gt; as a man page.</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; 는 명령에 대한 매뉴얼 페이지도 가지고 있습니다. 예를 들어, &lt;code&gt;man set&lt;/code&gt; 은 매뉴얼 페이지로 &lt;code&gt;set&lt;/code&gt; 설명서를 표시합니다 .</target>
        </trans-unit>
        <trans-unit id="055cf18d69e0e1c45eaf95982b74b7ac7158e0d0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; also sends additional information to the user through the values of certain environment variables. The user cannot change the values of most of these variables.</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; 는 또한 특정 환경 변수의 값을 통해 추가 정보를 사용자에게 보냅니다. 사용자는 대부분의 변수 값을 변경할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="9c00223ef2e28efafb5de62e61373ec8694c8272" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; automatically creates arrays from all environment variables whose name ends in PATH, by splitting them on colons. Other variables are not automatically split.</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; 는 이름이 PATH로 끝나는 모든 환경 변수에서 콜론으로 분할하여 배열을 자동으로 만듭니다. 다른 변수는 자동으로 분할되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="be9c60f74c31afa12603c403c8cb2df121109c00" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; can also complete many commands, like git branches:</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; 는 자식 가지와 같은 많은 명령을 완료 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="40e0afc27485f7f758e91f83d0782e508a6c6b86" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; can store a list of multiple strings inside of a variable. To access one element of an array, use the index of the element inside of square brackets, like this:</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; 는 변수 안에 여러 문자열 목록을 저장할 수 있습니다. 배열의 한 요소에 액세스하려면 다음과 같이 대괄호 안에있는 요소의 색인을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="e5066e9e10becfb9012a96c88f59108b874b77ca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; comes with a rich set of tab completions, that work &quot;out of the box.&quot;</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; 는 &quot;즉석에서&quot;작동하는 풍부한 탭 완성 세트와 함께 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="59bdeaf3ad58016c3bbb3a77baf3160d076a45b3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; has a special syntax to support specifying switches accepted by a command. The switches &lt;code&gt;-s&lt;/code&gt;, &lt;code&gt;-l&lt;/code&gt; and &lt;code&gt;-o&lt;/code&gt; are used to specify a short switch (single character, such as &lt;code&gt;-l&lt;/code&gt;), a gnu style long switch (such as '&lt;code&gt;--color&lt;/code&gt;') and an old-style long switch (like '&lt;code&gt;-shuffle&lt;/code&gt;'), respectively. If the command 'myprog' has an option '-o' which can also be written as '&lt;code&gt;--output&lt;/code&gt;', and which can take an additional value of either 'yes' or 'no', this can be specified by writing:</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; 는 명령에 의해 허용되는 스위치 지정을 지원하는 특수 구문을 가지고 있습니다. 스위치 &lt;code&gt;-s&lt;/code&gt; , &lt;code&gt;-l&lt;/code&gt; 및 &lt;code&gt;-o&lt;/code&gt; 는 (예 : 단일 문자, 짧은 스위치를 지정하는 데 사용됩니다 &lt;code&gt;-l&lt;/code&gt; ), (예를 들면 '는 GNU 스타일의 긴 스위치 &lt;code&gt;--color&lt;/code&gt; 같은 (')과 오래 된 스타일의 긴 스위치를 ' &lt;code&gt;-shuffle&lt;/code&gt; '). 'myprog'명령에 '-o'옵션이 있으며 ' &lt;code&gt;--output&lt;/code&gt; ' 으로 작성 될 수 있으며 'yes'또는 'no'의 추가 값을 사용할 수있는 경우 다음을 작성하여 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="777f76e48b998a0f0dd3ad01a18ccbbc0bcab718" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; has an extensive help system. Use the &lt;a href=&quot;commands#help&quot;&gt;&lt;code&gt;help&lt;/code&gt;&lt;/a&gt; command to obtain help on a specific subject or command. For instance, writing &lt;code&gt;help syntax&lt;/code&gt; displays the &lt;a href=&quot;#syntax&quot;&gt;syntax section&lt;/a&gt; of this documentation.</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; 는 광범위한 도움말 시스템을 가지고 있습니다. 특정 주제 나 명령에 대한 도움말을 보려면 &lt;a href=&quot;commands#help&quot;&gt; &lt;code&gt;help&lt;/code&gt; &lt;/a&gt; 명령을 사용하십시오 . 예를 들어, &lt;code&gt;help syntax&lt;/code&gt; 작성 하면 이 문서 의 &lt;a href=&quot;#syntax&quot;&gt;구문 섹션&lt;/a&gt; 이 표시됩니다 .</target>
        </trans-unit>
        <trans-unit id="46c33eab942b519e7667b927731bb7a993f50301" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; has excellent help and man pages. Run &lt;code&gt;help&lt;/code&gt; to open help in a web browser, and &lt;code&gt;man&lt;/code&gt; to open it in a man page. You can also ask for help with a specific command, for example, &lt;code&gt;help set&lt;/code&gt; to open in a web browser, or &lt;code&gt;man set&lt;/code&gt; to see it in the terminal.</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; 는 훌륭한 도움과 매뉴얼 페이지를 가지고 있습니다. 실행 &lt;code&gt;help&lt;/code&gt; 열려있는 웹 브라우저에서 도움말 및에 &lt;code&gt;man&lt;/code&gt; 사람 페이지에서 엽니 다. 웹 브라우저에서 &lt;code&gt;help set&lt;/code&gt; 을 열 도록 설정 하거나 터미널에서 명령을 보도록 &lt;code&gt;man set&lt;/code&gt; 하는 것과 같이 특정 명령에 대한 도움말을 요청할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="df0088c6d7eab9031f3479af26efcea62bffcb1f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; interprets the command line as it is typed and uses syntax highlighting to provide feedback to the user. The most important feedback is the detection of potential errors. By default, errors are marked red.</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; 는 입력 된 명령 줄을 해석하고 구문 강조를 사용하여 사용자에게 피드백을 제공합니다. 가장 중요한 피드백은 잠재적 오류를 감지하는 것입니다. 기본적으로 오류는 빨간색으로 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="da8c01eaaa46f89b4d5f309ef717ebd0dcf5f70a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; is a command-line shell written mainly with interactive use in mind. The full manual is available &lt;a href=&quot;index&quot;&gt;in HTML&lt;/a&gt; by using the &lt;a href=&quot;#help&quot;&gt;help&lt;/a&gt; command from inside fish.</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; 는 주로 대화식 사용을 염두에두고 작성된 명령 줄 셸입니다. 내부 물고기 의 &lt;a href=&quot;#help&quot;&gt;help&lt;/a&gt; 명령을 사용하여 전체 설명서 &lt;a href=&quot;index&quot;&gt;를 HTML&lt;/a&gt; 로 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="35fca2b4c4ec083073cb841e35a4f9e49e66357a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; is a fully-equipped command line shell (like bash or zsh) that is smart and user-friendly. &lt;code&gt;fish&lt;/code&gt; supports powerful features like syntax highlighting, autosuggestions, and tab completions that just work, with nothing to learn or configure.</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; 는 bash 또는 zsh와 같은 완벽하게 갖추어 진 명령 줄 셸로 스마트하고 사용자 친화적입니다. &lt;code&gt;fish&lt;/code&gt; 는 구문 강조, 자동 제안 및 학습이나 구성 할 필요없이 작동하는 탭 완성과 같은 강력한 기능을 지원합니다.</target>
        </trans-unit>
        <trans-unit id="5b0b5a9ecbb138c52d5af59c69a665ea6bf3807c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; marks functions that have been created by &lt;code&gt;alias&lt;/code&gt; by including the command used to create them in the function description. You can list &lt;code&gt;alias&lt;/code&gt;-created functions by running &lt;code&gt;alias&lt;/code&gt; without arguments. They must be erased using &lt;code&gt;functions -e&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; 마크 는 함수 설명에 생성하는 데 사용되는 명령을 포함시켜 &lt;code&gt;alias&lt;/code&gt; 으로 만든 함수를 표시합니다 . 당신은 나열 할 수 있습니다 &lt;code&gt;alias&lt;/code&gt; 실행하여 기능을 -created &lt;code&gt;alias&lt;/code&gt; 인수없이. &lt;code&gt;functions -e&lt;/code&gt; 사용하여 지워야합니다 .</target>
        </trans-unit>
        <trans-unit id="b322552368e11dea3fda5d3f95dfd4c97001414f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; provides a large number of program specific completions. Most of these completions are simple options like the &lt;code&gt;-l&lt;/code&gt; option for &lt;code&gt;ls&lt;/code&gt;, but some are more advanced. The latter include:</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; 는 많은 프로그램 특정 완성을 제공합니다. 이러한 완성의 대부분은 &lt;code&gt;ls&lt;/code&gt; 에 대한 &lt;code&gt;-l&lt;/code&gt; 옵션 과 같은 간단한 옵션 이지만 일부는 고급입니다. 후자는 다음을 포함합니다 :</target>
        </trans-unit>
        <trans-unit id="092c5ff9b15fe33669b2dd44c28e0b29ef6d3de6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; runs commands like other shells: you type a command, followed by its arguments. Spaces are separators:</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; 는 다른 쉘과 같은 명령을 실행합니다. 명령을 입력 한 다음 인수를 입력합니다. 공백은 구분 기호입니다.</target>
        </trans-unit>
        <trans-unit id="53af98c8dc19ee66b69f397cd23abb202d994001" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; ships with a default version of this function that displays the function name and line number of the current execution context.</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; 는 현재 실행 컨텍스트의 기능 이름과 줄 번호를 표시하는이 기능의 기본 버전과 함께 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="ad47759ce8e74a9a1a71d60b65c5fa5bebbae7d6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; ships with a large number of builtin commands, shellscript functions and external commands. These are all described below.</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; 는 많은 내장 명령, 쉘 스크립트 기능 및 외부 명령과 함께 제공됩니다. 이것들은 모두 아래에 설명되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="0a90fcc43cdc3c81feca88b4008c851ae0986302" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; ships with a number of example prompts that can be chosen with the &lt;code&gt;fish_config&lt;/code&gt; command.</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; 는 &lt;code&gt;fish_config&lt;/code&gt; 명령 으로 선택할 수있는 여러 가지 예제 프롬프트와 함께 제공됩니다 .</target>
        </trans-unit>
        <trans-unit id="cf5c6397e1462cac24e466bcb172b4245c8ec087" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; ships with several functions that are very useful when writing command specific completions. Most of these functions name begins with the string '&lt;code&gt;__fish_&lt;/code&gt;'. Such functions are internal to &lt;code&gt;fish&lt;/code&gt; and their name and interface may change in future fish versions. Still, some of them may be very useful when writing completions. A few of these functions are described here. Be aware that they may be removed or changed in future versions of fish.</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; 는 명령 특정 완성을 작성할 때 매우 유용한 여러 기능을 제공합니다. 이러한 함수 이름의 대부분은 문자열 ' &lt;code&gt;__fish_&lt;/code&gt; '로 시작합니다 . 이러한 기능은 &lt;code&gt;fish&lt;/code&gt; 내부에 있으며 향후 물고기 버전에서 이름과 인터페이스가 변경 될 수 있습니다. 그럼에도 불구하고 일부는 완성을 작성할 때 매우 유용 할 수 있습니다. 이러한 기능 중 일부가 여기에 설명되어 있습니다. 향후 버전의 물고기에서는 제거되거나 변경 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e4667f5ebd401acef191ebf9acbeffe48080df4f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; starts by executing commands in &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt;. You can create it if it does not exist.</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; 는 &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt; 에서 명령을 실행하여 시작합니다 . 존재하지 않는 경우 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d041cb58f21e5038ba1dd64df8fd389a7bcc1973" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; suggests commands as you type, and shows the suggestion to the right of the cursor, in gray. For example:</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; 는 입력 할 때 명령을 제안하고 커서 오른쪽에 제안을 회색으로 표시합니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="ca9e9797a19941a7503fe9bfd4d9f99d4b5506fc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; supports the familiar wildcard &lt;code&gt;*&lt;/code&gt;. To list all JPEG files:</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; 익숙한 와일드 카드를 지원합니다 &lt;code&gt;*&lt;/code&gt; . 모든 JPEG 파일을 나열하려면</target>
        </trans-unit>
        <trans-unit id="c25f03f75074f13b43a3d6e3ec17960348bf4ec6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; uses an Emacs style kill ring for copy and paste functionality. Use &lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;K&lt;/b&gt; to cut from the current cursor position to the end of the line. The string that is cut (a.k.a. killed) is inserted into a linked list of kills, called the kill ring. To paste the latest value from the kill ring use &lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;Y&lt;/b&gt;. After pasting, use &lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;Y&lt;/b&gt; to rotate to the previous kill.</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; 는 복사 및 붙여 넣기 기능을 위해 Emacs 스타일 킬 링을 사용합니다. 현재 커서 위치에서 줄 끝까지 잘라내려면 &lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;K&lt;/b&gt; 를 사용하십시오 . 잘린 문자열 (일명 강제 종료)은 킬 링이라고하는 연결된 킬 목록에 삽입됩니다. 킬 링에서 최신 값을 붙여 넣으려면 &lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;Y를 사용하십시오&lt;/b&gt; . 붙여 넣은 후에 &lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;Y&lt;/b&gt; 를 사용 하여 이전 킬로 회전하십시오.</target>
        </trans-unit>
        <trans-unit id="9f38463145211dc9331425ead2c2f55cef58e9aa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; uses parentheses for subcommands. For example:</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; 는 부속 명령에 괄호를 사용합니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="a1bd535d149860f389ddcd2747d2dd0ba1abb31d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; will underline valid file paths as you type them:</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; 는 입력 할 때 유효한 파일 경로에 밑줄을 긋습니다.</target>
        </trans-unit>
        <trans-unit id="d6bb18741f901028c968a22fdbfdd38f9d5a2449" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_ambiguous_width&lt;/code&gt; controls the computed width of ambiguous East Asian characters. This should be set to 1 if your terminal emulator renders these characters as single-width (typical), or 2 if double-width.</source>
          <target state="translated">&lt;code&gt;fish_ambiguous_width&lt;/code&gt; 는 모호한 동아시아 문자의 계산 된 너비를 제어합니다. 터미널 에뮬레이터에서 이러한 문자를 단일 너비 (일반)로 렌더링하는 경우 1로 설정하거나 2 배인 경우 2로 설정해야합니다.</target>
        </trans-unit>
        <trans-unit id="da4f27241087cb9a6d563e249660ba24a88243da" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_color_autosuggestion&lt;/code&gt;, the color used for autosuggestions</source>
          <target state="translated">&lt;code&gt;fish_color_autosuggestion&lt;/code&gt; , 자동 제안에 사용되는 색상</target>
        </trans-unit>
        <trans-unit id="6aab75facde4fc6df798358344a9433f5e66bc35" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_color_cancel&lt;/code&gt;, the color for the '^C' indicator on a canceled command</source>
          <target state="translated">&lt;code&gt;fish_color_cancel&lt;/code&gt; 취소 된 명령의 '^ C'표시기 색상 인 fish_color_cancel</target>
        </trans-unit>
        <trans-unit id="733b6c1f54d7b6d136bd7e04221c88502c82f59d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_color_command&lt;/code&gt;, the color for commands</source>
          <target state="translated">&lt;code&gt;fish_color_command&lt;/code&gt; , 명령의 색상</target>
        </trans-unit>
        <trans-unit id="01d519230d52778f1d20dccecc138d7caa67f264" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_color_comment&lt;/code&gt;, the color used for code comments</source>
          <target state="translated">&lt;code&gt;fish_color_comment&lt;/code&gt; 코드 주석에 사용되는 색상 인 fish_color_comment</target>
        </trans-unit>
        <trans-unit id="dc90b5b2767b7d545e27c7e6096d114342de7bea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_color_cwd&lt;/code&gt;, the color used for the current working directory in the default prompt</source>
          <target state="translated">&lt;code&gt;fish_color_cwd&lt;/code&gt; 기본 프롬프트에서 현재 작업 디렉토리에 사용되는 색상 인 fish_color_cwd</target>
        </trans-unit>
        <trans-unit id="eb987595157776e67d6a5797f3e433f9cc57d537" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_color_end&lt;/code&gt;, the color for process separators like ';' and '&amp;amp;'</source>
          <target state="translated">&lt;code&gt;fish_color_end&lt;/code&gt; '와 같은 프로세스 구분 기호의 색상 인 fish_color_end '&amp;amp;'</target>
        </trans-unit>
        <trans-unit id="422b7f08d142d5b33c0430e85d9d7ec90209dee6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_color_error&lt;/code&gt;, the color used to highlight potential errors</source>
          <target state="translated">&lt;code&gt;fish_color_error&lt;/code&gt; 잠재적 오류를 강조 표시하는 데 사용되는 색상 인 fish_color_error</target>
        </trans-unit>
        <trans-unit id="4bb611c7ae46b00d5c7c4cac298882c1cef474d6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_color_escape&lt;/code&gt;, the color used to highlight character escapes like '\n' and '\x70'</source>
          <target state="translated">&lt;code&gt;fish_color_escape&lt;/code&gt; '및 '\ x70'과 같은 문자 이스케이프를 강조하는 데 사용되는 색상 인 fish_color_escape</target>
        </trans-unit>
        <trans-unit id="aa1b2c546ddbc908168ffebb47d0c6d45f0c4edd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_color_host&lt;/code&gt;, the color used to print the current host system in some of fish default prompts</source>
          <target state="translated">&lt;code&gt;fish_color_host&lt;/code&gt; - 일부 물고기 기본 프롬프트에서 현재 호스트 시스템을 인쇄하는 데 사용되는 색상</target>
        </trans-unit>
        <trans-unit id="3c8da305ccb3f8313b18d70a489b64856bf5cfa0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_color_match&lt;/code&gt;, the color used to highlight matching parenthesis</source>
          <target state="translated">&lt;code&gt;fish_color_match&lt;/code&gt; 일치하는 괄호를 강조 표시하는 데 사용되는 색상 인 fish_color_match</target>
        </trans-unit>
        <trans-unit id="33482fa503efab0519dba81d1dd5ad6b84e139c5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_color_normal&lt;/code&gt;, the default color</source>
          <target state="translated">&lt;code&gt;fish_color_normal&lt;/code&gt; 기본 색상 인 fish_color_normal</target>
        </trans-unit>
        <trans-unit id="899c29bf9a5dc62025dfd8ee621041575ce62bbd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_color_operator&lt;/code&gt;, the color for parameter expansion operators like '*' and '~'</source>
          <target state="translated">&lt;code&gt;fish_color_operator&lt;/code&gt; '및 '~'와 같은 매개 변수 확장 연산자의 색상 인 fish_color_operator</target>
        </trans-unit>
        <trans-unit id="ef5f8193323e367ca260a5737dce24ecac03bf9f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_color_param&lt;/code&gt;, the color for regular command parameters</source>
          <target state="translated">&lt;code&gt;fish_color_param&lt;/code&gt; 일반 명령 매개 변수의 색상 인 fish_color_param</target>
        </trans-unit>
        <trans-unit id="49c4274e0b503cf22abea61dd7205cd045ea1a98" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_color_quote&lt;/code&gt;, the color for quoted blocks of text</source>
          <target state="translated">&lt;code&gt;fish_color_quote&lt;/code&gt; , 인용 된 텍스트 블록의 색상</target>
        </trans-unit>
        <trans-unit id="5b792112bcb5515788014934301442436baf4df6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_color_redirection&lt;/code&gt;, the color for IO redirections</source>
          <target state="translated">&lt;code&gt;fish_color_redirection&lt;/code&gt; , IO 리디렉션의 색상</target>
        </trans-unit>
        <trans-unit id="c607feb13af13865862aa0d14304c945c83f6955" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_color_search_match&lt;/code&gt;, used to highlight history search matches and the selected pager item (must be a background)</source>
          <target state="translated">&lt;code&gt;fish_color_search_match&lt;/code&gt; , 기록 검색 일치 및 선택된 호출기 항목을 강조 표시하는 데 사용됩니다 (배경이어야 함).</target>
        </trans-unit>
        <trans-unit id="e803fbe16df6b0f3458dfc67b45c89270b33c4f6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_color_selection&lt;/code&gt;, the color used when selecting text (in vi visual mode)</source>
          <target state="translated">&lt;code&gt;fish_color_selection&lt;/code&gt; , 텍스트를 선택할 때 사용되는 색상 (vi 비주얼 모드)</target>
        </trans-unit>
        <trans-unit id="c1295a7fe31f87f51d695457ac2170aa53f10fff" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_color_user&lt;/code&gt;, the color used to print the current username in some of fish default prompts</source>
          <target state="translated">&lt;code&gt;fish_color_user&lt;/code&gt; , 일부 물고기 기본 프롬프트에서 현재 사용자 이름을 인쇄하는 데 사용되는 색상</target>
        </trans-unit>
        <trans-unit id="04bb96ac3bb736d6ac808f4395018348bc676e82" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_command_not_found&lt;/code&gt;, which is emitted whenever a command lookup failed.</source>
          <target state="translated">&lt;code&gt;fish_command_not_found&lt;/code&gt; 는 명령 조회가 실패 할 때마다 발생합니다.</target>
        </trans-unit>
        <trans-unit id="a4033f2f2afffa86c138e812a0b0602cdea0f3bf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_config&lt;/code&gt; opens a new web browser window and allows you to configure certain fish settings.</source>
          <target state="translated">&lt;code&gt;fish_config&lt;/code&gt; 는 새로운 웹 브라우저 창을 열고 특정 물고기 설정을 구성 할 수있게합니다.</target>
        </trans-unit>
        <trans-unit id="51703c7e04cc8ef77397ffa5049c1e93750bc0ce" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_config&lt;/code&gt; optionally accepts name of the initial configuration tab. For e.g. &lt;code&gt;fish_config history&lt;/code&gt; will start configuration interface with history tab.</source>
          <target state="translated">&lt;code&gt;fish_config&lt;/code&gt; 는 선택적으로 초기 구성 탭의 이름을 허용합니다. 예를 들어 &lt;code&gt;fish_config history&lt;/code&gt; 는 history 탭으로 구성 인터페이스를 시작합니다.</target>
        </trans-unit>
        <trans-unit id="fecc048a3ad3bcf34e0113164e5621e9895f65b6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_config&lt;/code&gt; starts a local web server and then opens a web browser window; when you have finished, close the browser window and then press the Enter key to terminate the configuration session.</source>
          <target state="translated">&lt;code&gt;fish_config&lt;/code&gt; 는 로컬 웹 서버를 시작한 다음 웹 브라우저 창을 엽니 다. 완료되면 브라우저 창을 닫고 Enter 키를 눌러 구성 세션을 종료하십시오.</target>
        </trans-unit>
        <trans-unit id="c38cd9193bd0838148316ebdf3e342f199d9c0d2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_config&lt;/code&gt; starts the web-based configuration interface.</source>
          <target state="translated">&lt;code&gt;fish_config&lt;/code&gt; 는 웹 기반 구성 인터페이스를 시작합니다.</target>
        </trans-unit>
        <trans-unit id="b93a2f3f04ef4585de8550e51c988b2551888eb2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_emoji_width&lt;/code&gt; controls the computed width of certain characters, in particular emoji, whose rendered width varies across terminal emulators. This should be set to 1 if your terminal emulator renders emoji single-width, or 2 if double-width. Set this only if you see graphical glitching when printing emoji.</source>
          <target state="translated">&lt;code&gt;fish_emoji_width&lt;/code&gt; 는 렌더링 된 너비가 터미널 에뮬레이터마다 다른 특정 문자, 특히 이모티콘의 계산 된 너비를 제어합니다. 터미널 에뮬레이터가 이모티콘을 단일 너비로 렌더링하는 경우 1로 설정되거나 이중 너비 인 경우 2로 설정해야합니다. 이모티콘을 인쇄 할 때 그래픽 결함이 나타나는 경우에만 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="48e742affac41a44f02e9aa3052491a61e53ff7d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_escape_delay_ms&lt;/code&gt; overrides the default timeout of 300ms (default key bindings) or 10ms (vi key bindings) after seeing an escape character before giving up on matching a key binding. See the documentation for the &lt;a href=&quot;bind#special-case-escape&quot;&gt;bind&lt;/a&gt; builtin command. This delay facilitates using escape as a meta key.</source>
          <target state="translated">&lt;code&gt;fish_escape_delay_ms&lt;/code&gt; 는 키 바인딩 일치를 포기하기 전에 이스케이프 문자를 본 후 기본 제한 시간 300ms (기본 키 바인딩) 또는 10ms (vi 키 바인딩)를 대체합니다. &lt;a href=&quot;bind#special-case-escape&quot;&gt;bind&lt;/a&gt; builtin 명령에 대한 설명서를 참조하십시오 . 이 지연은 이스케이프를 메타 키로 사용하도록합니다.</target>
        </trans-unit>
        <trans-unit id="c9b2a1e44ef7bb47d05aa2cecfce06fa5f350598" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_exit&lt;/code&gt; is emitted right before fish exits.</source>
          <target state="translated">&lt;code&gt;fish_exit&lt;/code&gt; 는 물고기가 나오기 직전에 방출됩니다.</target>
        </trans-unit>
        <trans-unit id="2d94ec8ed4f5ca2e247001593671084bcb2b63cd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_greeting&lt;/code&gt;, the greeting message printed on startup.</source>
          <target state="translated">&lt;code&gt;fish_greeting&lt;/code&gt; , 시작시 인사말 메시지가 인쇄됩니다.</target>
        </trans-unit>
        <trans-unit id="b04aed8775880cd3b6a1f6c024e3c890b3d8d1ab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_history&lt;/code&gt;, the current history session name. If set, all subsequent commands within an interactive fish session will be logged to a separate file identified by the value of the variable. If unset, or set to &lt;code&gt;default&lt;/code&gt;, the default session name &quot;fish&quot; is used. If set to an empty string, history is not saved to disk (but is still available within the interactive session).</source>
          <target state="translated">&lt;code&gt;fish_history&lt;/code&gt; , 현재 히스토리 세션 이름. 설정된 경우 대화식 fish 세션 내의 모든 후속 명령은 변수 값으로 식별되는 별도의 파일에 기록됩니다. 설정하지 않거나 &lt;code&gt;default&lt;/code&gt; 로 설정 하면 기본 세션 이름 &quot;fish&quot;가 사용됩니다. 빈 문자열로 설정하면 기록이 디스크에 저장되지 않지만 대화식 세션 내에서는 계속 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="104755c189b715d5c9c42e2652c1cdf288c6ca28" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_indent&lt;/code&gt; is used to indent a piece of fish code. &lt;code&gt;fish_indent&lt;/code&gt; reads commands from standard input and outputs them to standard output or a specified file.</source>
          <target state="translated">&lt;code&gt;fish_indent&lt;/code&gt; 는 물고기 코드를 들여 쓰는 데 사용됩니다. &lt;code&gt;fish_indent&lt;/code&gt; 는 표준 입력에서 명령을 읽고 표준 출력 또는 지정된 파일로 출력합니다.</target>
        </trans-unit>
        <trans-unit id="1f505af424d327895b4f62f9482da2a8a3e1b470" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_key_reader&lt;/code&gt; intentionally disables handling of many signals. To terminate &lt;code&gt;fish_key_reader&lt;/code&gt; in &lt;code&gt;--continuous&lt;/code&gt; mode do:</source>
          <target state="translated">&lt;code&gt;fish_key_reader&lt;/code&gt; 는 의도적으로 많은 신호 처리를 비활성화합니다. 종료하려면 &lt;code&gt;fish_key_reader&lt;/code&gt; 에 &lt;code&gt;--continuous&lt;/code&gt; 모드 수행</target>
        </trans-unit>
        <trans-unit id="9969f810562210b29ac153862ce8488fd46d7c72" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_key_reader&lt;/code&gt; is used to study input received from the terminal and can help with key binds. The program is interactive and works on standard input. Individual characters themselves and their hexadecimal values are displayed.</source>
          <target state="translated">&lt;code&gt;fish_key_reader&lt;/code&gt; 는 터미널에서 수신 한 입력을 연구하는 데 사용되며 키 바인딩에 도움이됩니다. 이 프로그램은 대화식이며 표준 입력에서 작동합니다. 개별 문자 자체와 16 진수 값이 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="f7c684f0faf6861363a50ef125b672ee5e7f8960" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_pager_color_completion&lt;/code&gt;, the color of the completion itself</source>
          <target state="translated">&lt;code&gt;fish_pager_color_completion&lt;/code&gt; 완료 자체의 색상 인 fish_pager_color_completion</target>
        </trans-unit>
        <trans-unit id="02c2b5b4b67a9ed2516d817126320b97d559bb5b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_pager_color_description&lt;/code&gt;, the color of the completion description</source>
          <target state="translated">&lt;code&gt;fish_pager_color_description&lt;/code&gt; 완료 설명의 색상 인 fish_pager_color_description</target>
        </trans-unit>
        <trans-unit id="dad9d641492b848dfa36404193130b01877d7c55" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_pager_color_prefix&lt;/code&gt;, the color of the prefix string, i.e. the string that is to be completed</source>
          <target state="translated">&lt;code&gt;fish_pager_color_prefix&lt;/code&gt; , 접두사 문자열의 색상, 즉 완성 될 문자열</target>
        </trans-unit>
        <trans-unit id="72288186d5b0c5276c2df6d25ce7182ce13c409a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_pager_color_progress&lt;/code&gt;, the color of the progress bar at the bottom left corner</source>
          <target state="translated">&lt;code&gt;fish_pager_color_progress&lt;/code&gt; 왼쪽 하단에서 진행률 표시 줄의 색상 인 fish_pager_color_progress</target>
        </trans-unit>
        <trans-unit id="3e8830576bae489fb92cd5bed56314729ae1656f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_pager_color_secondary&lt;/code&gt;, the background color of the every second completion</source>
          <target state="translated">&lt;code&gt;fish_pager_color_secondary&lt;/code&gt; , 매 초마다 배경색</target>
        </trans-unit>
        <trans-unit id="39301e68719d8270e6ba63e0324f010136d1f361" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_postexec&lt;/code&gt;, which is emitted right after executing an interactive command. The commandline is passed as the first parameter.</source>
          <target state="translated">&lt;code&gt;fish_postexec&lt;/code&gt; 대화 형 명령을 실행 한 직후에 생성되는 fish_postexec 명령 행이 첫 번째 매개 변수로 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="4e5e5b54faf281985c7c7df11e2b068f2d1b1dff" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_preexec&lt;/code&gt;, which is emitted right before executing an interactive command. The commandline is passed as the first parameter.</source>
          <target state="translated">&lt;code&gt;fish_preexec&lt;/code&gt; 대화식 명령을 실행하기 직전에 생성되는 fish_preexec 명령 행이 첫 번째 매개 변수로 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="55d253511a520fed2df4efaa70d38a4aa9455ed3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_prompt&lt;/code&gt;, which is emitted whenever a new fish prompt is about to be displayed.</source>
          <target state="translated">&lt;code&gt;fish_prompt&lt;/code&gt; 는 새로운 물고기 프롬프트가 표시 될 때마다 발생합니다.</target>
        </trans-unit>
        <trans-unit id="8e763b7a1c9e69d8e49402ca1bd27768dc523a3c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_right_prompt&lt;/code&gt; is similar to &lt;code&gt;fish_prompt&lt;/code&gt;, except that it appears on the right side of the terminal window.</source>
          <target state="translated">&lt;code&gt;fish_right_prompt&lt;/code&gt; 는 터미널 창의 오른쪽에 표시되는 점을 제외하고 &lt;code&gt;fish_prompt&lt;/code&gt; 와 유사합니다 .</target>
        </trans-unit>
        <trans-unit id="25375052dde19cad27653f4c1752d8ab6f280d0a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_update_completions&lt;/code&gt; parses manual pages installed on the system, and attempts to create completion files in the &lt;code&gt;fish&lt;/code&gt; configuration directory.</source>
          <target state="translated">&lt;code&gt;fish_update_completions&lt;/code&gt; 는 시스템에 설치된 수동 페이지를 구문 분석하고 &lt;code&gt;fish&lt;/code&gt; 구성 디렉토리 에 완료 파일을 작성하려고 시도합니다 .</target>
        </trans-unit>
        <trans-unit id="1258f51252838f9ffb3287c339e857307bfe13f8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_user_paths&lt;/code&gt;, an array of directories that are prepended to &lt;code&gt;PATH&lt;/code&gt;. This can be a universal variable.</source>
          <target state="translated">&lt;code&gt;fish_user_paths&lt;/code&gt; , 앞에 붙 디렉토리의 배열 &lt;code&gt;PATH&lt;/code&gt; . 이것은 범용 변수 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2d20e70fb52c2b89d39d9ee9f9a3364cf899bbf8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_vi_mode&lt;/code&gt; enters a vi-like command editing mode. To always start in vi mode, add &lt;code&gt;fish_vi_mode&lt;/code&gt; to your &lt;code&gt;config.fish&lt;/code&gt; file.</source>
          <target state="translated">&lt;code&gt;fish_vi_mode&lt;/code&gt; 는 vi와 유사한 명령 편집 모드로 들어갑니다. 항상 vi 모드에서 시작하려면 &lt;code&gt;config.fish&lt;/code&gt; 파일에 &lt;code&gt;fish_vi_mode&lt;/code&gt; 를 추가 하십시오.</target>
        </trans-unit>
        <trans-unit id="a67771d1afbe49fb95a1eb353ddb3304ef83900c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;for&lt;/code&gt; is a loop construct. It will perform the commands specified by &lt;code&gt;COMMANDS&lt;/code&gt; multiple times. On each iteration, the local variable specified by &lt;code&gt;VARNAME&lt;/code&gt; is assigned a new value from &lt;code&gt;VALUES&lt;/code&gt;. If &lt;code&gt;VALUES&lt;/code&gt; is empty, &lt;code&gt;COMMANDS&lt;/code&gt; will not be executed at all. The &lt;code&gt;VARNAME&lt;/code&gt; is visible when the loop terminates and will contain the last value assigned to it. If &lt;code&gt;VARNAME&lt;/code&gt; does not already exist it will be set in the local scope. For our purposes if the &lt;code&gt;for&lt;/code&gt; block is inside a function there must be a local variable with the same name. If the &lt;code&gt;for&lt;/code&gt; block is not nested inside a function then global and universal variables of the same name will be used if they exist.</source>
          <target state="translated">&lt;code&gt;for&lt;/code&gt; 는 루프 구조입니다. &lt;code&gt;COMMANDS&lt;/code&gt; 로 지정된 명령을 여러 번 수행합니다 . 각 반복에서 &lt;code&gt;VARNAME&lt;/code&gt; 으로 지정된 로컬 변수에 &lt;code&gt;VALUES&lt;/code&gt; 의 새 값이 지정됩니다 . 경우 &lt;code&gt;VALUES&lt;/code&gt; 가 비어 &lt;code&gt;COMMANDS&lt;/code&gt; 전혀 실행되지 않습니다. &lt;code&gt;VARNAME&lt;/code&gt; 는 루프가 종료하고, 할당 된 마지막 값을 포함 할 때 볼 수있다. 경우 &lt;code&gt;VARNAME&lt;/code&gt; 가 존재하지 않습니다 그것은 로컬 범위에서 설정됩니다. 우리의 목적을 위해 &lt;code&gt;for&lt;/code&gt; 블록이 함수 안에 있다면 같은 이름을 가진 지역 변수가 있어야합니다. 인 경우] &lt;code&gt;for&lt;/code&gt; 블록은 함수 안에 중첩되지 않으며 같은 이름의 전역 변수와 범용 변수가 있으면 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="7dba540ac348539070f2bf73fd7b4971a05d3926" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;forward-bigword&lt;/code&gt;, move one whitespace-delimited word to the right</source>
          <target state="translated">&lt;code&gt;forward-bigword&lt;/code&gt; 이면 공백으로 구분 된 한 단어를 오른쪽으로 이동</target>
        </trans-unit>
        <trans-unit id="96ac7c933e1aa7b4c77c93b351f34c644f3edfc0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;forward-char&lt;/code&gt;, move one character to the right</source>
          <target state="translated">&lt;code&gt;forward-char&lt;/code&gt; , 한 문자를 오른쪽으로 이동</target>
        </trans-unit>
        <trans-unit id="9b9dad2890372c362f50dea055adac7600258931" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;forward-word&lt;/code&gt;, move one word to the right</source>
          <target state="translated">&lt;code&gt;forward-word&lt;/code&gt; , 한 단어를 오른쪽으로 이동</target>
        </trans-unit>
        <trans-unit id="e6e8eeb61d099e8de1c9e468dbd0faedeaeeb31c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;funced&lt;/code&gt; provides an interface to edit the definition of the function &lt;code&gt;NAME&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;funced&lt;/code&gt; 는 &lt;code&gt;NAME&lt;/code&gt; 함수의 정의를 편집하기위한 인터페이스를 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="f3625cbdd272f6420b828620eec5563a06bbc58c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;funcsave&lt;/code&gt; saves the current definition of a function to a file in the fish configuration directory. This function will be automatically loaded by current and future fish sessions. This can be useful if you have interactively created a new function and wish to save it for later use.</source>
          <target state="translated">&lt;code&gt;funcsave&lt;/code&gt; 는 기능의 현재 정의를 fish 구성 디렉토리의 파일에 저장합니다. 이 기능은 현재 및 미래의 어류 세션에 의해 자동으로로드됩니다. 이는 대화식으로 새 기능을 작성하고 나중에 사용하기 위해 저장하려는 경우 유용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ecc3a042e9241b89ce0f3da16336d2bde1174bba" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;function&lt;/code&gt; creates a new function &lt;code&gt;NAME&lt;/code&gt; with the body &lt;code&gt;BODY&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;function&lt;/code&gt; 는 &lt;code&gt;BODY&lt;/code&gt; 본문 으로 새 함수 &lt;code&gt;NAME&lt;/code&gt; 을 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="3af7bb7223f77891e90adffabdb2080b3a0a2ae0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;function&lt;/code&gt; prints the name of the currently called function if able, when missing displays &quot;Not a function&quot; (or equivalent translated string). Also &lt;code&gt;current-function&lt;/code&gt;, &lt;code&gt;-u&lt;/code&gt; or &lt;code&gt;--current-function&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;function&lt;/code&gt; 은 가능한 경우 현재 호출 된 함수의 이름을 인쇄합니다. 누락 된 경우 &quot;함수 아님&quot;(또는 동등한 번역 된 문자열)이 표시됩니다. 또한 &lt;code&gt;current-function&lt;/code&gt; , &lt;code&gt;-u&lt;/code&gt; 또는 &lt;code&gt;--current-function&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4643812feed737eb3baee29ce5d615a668b85b3a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;functions&lt;/code&gt; prints or erases functions.</source>
          <target state="translated">&lt;code&gt;functions&lt;/code&gt; 은 기능을 인쇄하거나 지 웁니다.</target>
        </trans-unit>
        <trans-unit id="896e9b70a76e025cb7a4fc6ddc0df0cb4a106204" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;h-help&lt;/code&gt; means that only &lt;code&gt;--help&lt;/code&gt; is valid. The flag is a boolean and can be used more than once. If the long flag is used then &lt;code&gt;_flag_h&lt;/code&gt; and &lt;code&gt;_flag_help&lt;/code&gt; will be set to the count of how many times the long flag was seen.</source>
          <target state="translated">&lt;code&gt;h-help&lt;/code&gt; 는 &lt;code&gt;--help&lt;/code&gt; 만 유효 함을 의미 합니다. 플래그는 부울이며 두 번 이상 사용할 수 있습니다. long 플래그가 사용 &lt;code&gt;_flag_h&lt;/code&gt; 및 &lt;code&gt;_flag_help&lt;/code&gt; 는 long 플래그가 표시된 횟수로 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="09288aed8a22be9a82fb278b641f44ba69a35f98" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;h/help&lt;/code&gt; means that both &lt;code&gt;-h&lt;/code&gt; and &lt;code&gt;--help&lt;/code&gt; are valid. The flag is a boolean and can be used more than once. If either flag is used then &lt;code&gt;_flag_h&lt;/code&gt; and &lt;code&gt;_flag_help&lt;/code&gt; will be set to the count of how many times either flag was seen.</source>
          <target state="translated">&lt;code&gt;h/help&lt;/code&gt; 는 &lt;code&gt;-h&lt;/code&gt; 와 &lt;code&gt;--help&lt;/code&gt; 가 모두 유효 함을 의미 합니다. 플래그는 부울이며 두 번 이상 사용할 수 있습니다. 두 플래그 중 하나를 사용하면 &lt;code&gt;_flag_h&lt;/code&gt; 및 &lt;code&gt;_flag_help&lt;/code&gt; 가 어느 플래그를 본 횟수로 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="746970369d18737059fb60a2ece7fe48509ad8b2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;help fg&lt;/code&gt; shows the documentation for the &lt;code&gt;fg&lt;/code&gt; builtin.</source>
          <target state="translated">&lt;code&gt;help fg&lt;/code&gt; 에 대한 문서이다 &lt;code&gt;fg&lt;/code&gt; 내장을.</target>
        </trans-unit>
        <trans-unit id="5797714920f9421847912fe9d670163d439ec8c1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;help&lt;/code&gt; displays the fish help documentation.</source>
          <target state="translated">&lt;code&gt;help&lt;/code&gt; 은 물고기 도움말 설명서를 표시합니다.</target>
        </trans-unit>
        <trans-unit id="ce9a134be7d6c3fd7b46f7c9447ed9fd9db9b116" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;history-search-backward&lt;/code&gt;, search the history for the previous match</source>
          <target state="translated">&lt;code&gt;history-search-backward&lt;/code&gt; , 이전 경기 기록을 검색하십시오.</target>
        </trans-unit>
        <trans-unit id="b12f1af53ca24866df742e9eba7ada28f4d9ae75" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;history-search-forward&lt;/code&gt;, search the history for the next match</source>
          <target state="translated">&lt;code&gt;history-search-forward&lt;/code&gt; , 다음 경기 기록을 검색하십시오.</target>
        </trans-unit>
        <trans-unit id="aa6bf6d133c84804bb8d0f2ee0748027119c8584" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;history&lt;/code&gt; is used to search, delete, and otherwise manipulate the history of interactive commands.</source>
          <target state="translated">&lt;code&gt;history&lt;/code&gt; 는 대화식 명령의 히스토리를 검색, 삭제 및 조작하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="fe57c545655dee290e05e5b32cfb6ad7a4cf5bb0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;history&lt;/code&gt;, an array containing the last commands that were entered.</source>
          <target state="translated">&lt;code&gt;history&lt;/code&gt; , 마지막으로 입력 된 명령을 포함하는 배열.</target>
        </trans-unit>
        <trans-unit id="cd50886aee211e8ad669224737d342b173c7d958" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;hostname&lt;/code&gt;, the machine's hostname.</source>
          <target state="translated">&lt;code&gt;hostname&lt;/code&gt; , 머신의 호스트 이름.</target>
        </trans-unit>
        <trans-unit id="c23d9464a94cb5382adac437601bfc6e6de40d55" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;if&lt;/code&gt; will execute the command &lt;code&gt;CONDITION&lt;/code&gt;. If the condition's exit status is 0, the commands &lt;code&gt;COMMANDS_TRUE&lt;/code&gt; will execute. If it is not 0 and &lt;code&gt;else&lt;/code&gt; is given, &lt;code&gt;COMMANDS_FALSE&lt;/code&gt; will be executed.</source>
          <target state="translated">&lt;code&gt;if&lt;/code&gt; 명령 &lt;code&gt;CONDITION&lt;/code&gt; 을 실행합니다 . 조건의 종료 상태가 0이면 &lt;code&gt;COMMANDS_TRUE&lt;/code&gt; 명령 이 실행됩니다. 0이 아니고 &lt;code&gt;else&lt;/code&gt; 이 주어지면 &lt;code&gt;COMMANDS_FALSE&lt;/code&gt; 가 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="e1c81c3c5812c0d8ce75bdcf435cb169e91e2f99" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;if&lt;/code&gt; will execute the command &lt;code&gt;CONDITION&lt;/code&gt;. If the condition's exit status is 0, the commands &lt;code&gt;COMMANDS_TRUE&lt;/code&gt; will execute. If the exit status is not 0 and &lt;code&gt;else&lt;/code&gt; is given, &lt;code&gt;COMMANDS_FALSE&lt;/code&gt; will be executed.</source>
          <target state="translated">&lt;code&gt;if&lt;/code&gt; 명령 &lt;code&gt;CONDITION&lt;/code&gt; 을 실행합니다 . 조건의 종료 상태가 0이면 &lt;code&gt;COMMANDS_TRUE&lt;/code&gt; 명령 이 실행됩니다. 종료 상태가 0이 아닌 경우 및 &lt;code&gt;else&lt;/code&gt; 주어, &lt;code&gt;COMMANDS_FALSE&lt;/code&gt; 가 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="5a0719c8ef39d5ba9cdb52b9b6994b0a76cb2e60" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;is-block&lt;/code&gt; returns 0 if fish is currently executing a block of code. Also &lt;code&gt;-b&lt;/code&gt; or &lt;code&gt;--is-block&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;is-block&lt;/code&gt; 물고기가 현재 코드 블록을 실행중인 경우 is-block 은 0을 반환합니다. 또한 &lt;code&gt;-b&lt;/code&gt; 또는 &lt;code&gt;--is-block&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="574f1b55820e05845c504b6752312ab9f0763f46" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;is-breakpoint&lt;/code&gt; returns 0 if fish is currently showing a prompt in the context of a &lt;code&gt;breakpoint&lt;/code&gt; command. See also the &lt;code&gt;fish_breakpoint_prompt&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;is-breakpoint&lt;/code&gt; 물고기가 현재 &lt;code&gt;breakpoint&lt;/code&gt; 명령 의 컨텍스트에서 프롬프트를 표시하면 is-breakpoint 는 0을 반환합니다 . &lt;code&gt;fish_breakpoint_prompt&lt;/code&gt; 함수 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="8c8b553e625d0552ce09454c632813c4ee0f7a43" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;is-command-sub&lt;/code&gt; returns 0 if fish is currently executing a command substitution. Also &lt;code&gt;-c&lt;/code&gt; or &lt;code&gt;--is-command-substitution&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;is-command-sub&lt;/code&gt; 물고기가 현재 명령 대체를 실행중인 경우 is-command-sub 는 0을 반환합니다. 또한 &lt;code&gt;-c&lt;/code&gt; 또는 &lt;code&gt;--is-command-substitution&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="44b12fafe48ecfbcc3d29be11195b0e55d3a15ae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;is-full-job-control&lt;/code&gt; returns 0 if full job control is enabled. Also &lt;code&gt;--is-full-job-control&lt;/code&gt; (no short flag).</source>
          <target state="translated">&lt;code&gt;is-full-job-control&lt;/code&gt; 전체 작업 제어가 사용 가능한 경우 is-full-job-control 은 0을 리턴합니다. 또한 &lt;code&gt;--is-full-job-control&lt;/code&gt; (짧은 플래그 없음)입니다.</target>
        </trans-unit>
        <trans-unit id="b8f912dce380e13a37aefd2b619ed5f570f5dd6b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;is-interactive-job-control&lt;/code&gt; returns 0 if interactive job control is enabled. Also, &lt;code&gt;--is-interactive-job-control&lt;/code&gt; (no short flag).</source>
          <target state="translated">&lt;code&gt;is-interactive-job-control&lt;/code&gt; 대화식 작업 제어가 사용 가능한 경우 is-interactive-job-control 은 0을 리턴합니다. 또한 &lt;code&gt;--is-interactive-job-control&lt;/code&gt; (짧은 플래그 없음)입니다.</target>
        </trans-unit>
        <trans-unit id="29a242bbb960281ffd4abd84bdab87e608102fb6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;is-interactive&lt;/code&gt; returns 0 if fish is interactive - that is, connected to a keyboard. Also &lt;code&gt;-i&lt;/code&gt; or &lt;code&gt;--is-interactive&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;is-interactive&lt;/code&gt; 물고기가 대화 형인 경우, 즉 키보드에 연결된 경우 is-interactive 는 0을 반환합니다. 또한 &lt;code&gt;-i&lt;/code&gt; 또는 &lt;code&gt;--is-interactive&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="290a3fec35084c58a9babdadcf87d2dba57950ff" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;is-login&lt;/code&gt; returns 0 if fish is a login shell - that is, if fish should perform login tasks such as setting up the PATH. Also &lt;code&gt;-l&lt;/code&gt; or &lt;code&gt;--is-login&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;is-login&lt;/code&gt; 물고기가 로그인 쉘인 경우 is-login 은 0을 반환합니다. 즉, 물고기가 PATH 설정과 같은 로그인 작업을 수행해야하는 경우입니다. 또한 &lt;code&gt;-l&lt;/code&gt; 또는 &lt;code&gt;--is-login&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="3247c5bb3c8c50669f128e0bae4bc2a69626afe7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;is-no-job-control&lt;/code&gt; returns 0 if no job control is enabled. Also &lt;code&gt;--is-no-job-control&lt;/code&gt; (no short flag).</source>
          <target state="translated">&lt;code&gt;is-no-job-control&lt;/code&gt; 작업 제어가 사용 가능하지 않으면 is-no-job-control 은 0을 리턴합니다. 또한 &lt;code&gt;--is-no-job-control&lt;/code&gt; (짧은 플래그 없음)입니다.</target>
        </trans-unit>
        <trans-unit id="796eccea3c2925946b9056d5cc879303408c0681" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;isatty&lt;/code&gt; tests if a file descriptor is a tty.</source>
          <target state="translated">&lt;code&gt;isatty&lt;/code&gt; 는 파일 디스크립터가 tty인지 테스트합니다.</target>
        </trans-unit>
        <trans-unit id="c0df263f2b948bac739292c3ddc9acf8416ae56f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;job-control CONTROL-TYPE&lt;/code&gt; sets the job control type, which can be &lt;code&gt;none&lt;/code&gt;, &lt;code&gt;full&lt;/code&gt;, or &lt;code&gt;interactive&lt;/code&gt;. Also &lt;code&gt;-j CONTROL-TYPE&lt;/code&gt; or &lt;code&gt;--job-control=CONTROL-TYPE&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;job-control CONTROL-TYPE&lt;/code&gt; 은 작업 제어 유형을 설정합니다. &lt;code&gt;none&lt;/code&gt; , &lt;code&gt;full&lt;/code&gt; 또는 &lt;code&gt;interactive&lt;/code&gt; 일 수 있습니다 . 또한 &lt;code&gt;-j CONTROL-TYPE&lt;/code&gt; 또는 &lt;code&gt;--job-control=CONTROL-TYPE&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="df3951c97a9117fe33e430b00bd1987c8981de1d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;jobs&lt;/code&gt; outputs a summary of the current jobs.</source>
          <target state="translated">&lt;code&gt;jobs&lt;/code&gt; 는 현재 작업의 요약을 출력합니다.</target>
        </trans-unit>
        <trans-unit id="6add538256d52216f5d1b768f00171f403ab1b47" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;jobs&lt;/code&gt; prints a list of the currently running &lt;a href=&quot;index#syntax-job-control&quot;&gt;jobs&lt;/a&gt; and their status.</source>
          <target state="translated">&lt;code&gt;jobs&lt;/code&gt; 는 현재 실행중인 &lt;a href=&quot;index#syntax-job-control&quot;&gt;작업&lt;/a&gt; 및 상태 목록을 인쇄합니다 .</target>
        </trans-unit>
        <trans-unit id="8351e11b5536a97176c78f4c39a337502e837f3d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;kill-bigword&lt;/code&gt;, move the next whitespace-delimited word to the killring</source>
          <target state="translated">&lt;code&gt;kill-bigword&lt;/code&gt; , 다음 공백으로 구분 된 단어를 킬링으로 이동</target>
        </trans-unit>
        <trans-unit id="72618006835f7c9941204bbb5b3a9305d43c8849" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;kill-line&lt;/code&gt;, move everything from the cursor to the end of the line to the killring</source>
          <target state="translated">&lt;code&gt;kill-line&lt;/code&gt; , 커서부터 줄 끝까지, 킬링까지 모든 것을 이동</target>
        </trans-unit>
        <trans-unit id="f2a174739861bddd91263d6062b0ac3b9c38035c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;kill-selection&lt;/code&gt;, move the selected text to the killring</source>
          <target state="translated">&lt;code&gt;kill-selection&lt;/code&gt; , 선택한 텍스트를 킬링으로 이동</target>
        </trans-unit>
        <trans-unit id="42a3bfd3618e3b8e8ffa8030316a091858f2dc8b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;kill-whole-line&lt;/code&gt;, move the line to the killring</source>
          <target state="translated">&lt;code&gt;kill-whole-line&lt;/code&gt; , 줄을 킬링으로 이동</target>
        </trans-unit>
        <trans-unit id="46c753278748bac6dfa1653ee040432fb7997faa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;kill-word&lt;/code&gt;, move the next word to the killring</source>
          <target state="translated">&lt;code&gt;kill-word&lt;/code&gt; , 다음 단어를 killring으로 이동</target>
        </trans-unit>
        <trans-unit id="eeb54e31a64cc891898da48f1a74d6a789921adb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;less&lt;/code&gt;, list the contents of files</source>
          <target state="translated">&lt;code&gt;less&lt;/code&gt; , 파일 내용을 나열하십시오</target>
        </trans-unit>
        <trans-unit id="f65ebe7417be893ffc0ac02b73f221d6578651ac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;line-number&lt;/code&gt; prints the line number of the currently running script. Also &lt;code&gt;current-line-number&lt;/code&gt;, &lt;code&gt;-n&lt;/code&gt; or &lt;code&gt;--current-line-number&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;line-number&lt;/code&gt; 는 현재 실행중인 스크립트의 줄 번호를 인쇄합니다. 또한 &lt;code&gt;current-line-number&lt;/code&gt; , &lt;code&gt;-n&lt;/code&gt; 또는 &lt;code&gt;--current-line-number&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="81061764e65e9ab42280021deb6358105970c12d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;log&lt;/code&gt; or &lt;code&gt;log10&lt;/code&gt; - the base-10 logarithm</source>
          <target state="translated">&lt;code&gt;log&lt;/code&gt; 또는 &lt;code&gt;log10&lt;/code&gt; - 밑이 10 인 로그</target>
        </trans-unit>
        <trans-unit id="60e7cc4141c2d5dd36d802d642e50b97c6b1ca17" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ls&lt;/code&gt;, list files and directories</source>
          <target state="translated">&lt;code&gt;ls&lt;/code&gt; , 파일 및 디렉토리 나열</target>
        </trans-unit>
        <trans-unit id="4830c6e74e8614fb12f3dce5192a1ccc76ff965d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;man&lt;/code&gt; is a command for displaying a manual page on a given topic. The man command takes the name of the manual page to display as an argument. There are manual pages for almost every command on most computers. There are also manual pages for many other things, such as system libraries and important files.</source>
          <target state="translated">&lt;code&gt;man&lt;/code&gt; 은 주어진 주제에 대한 매뉴얼 페이지를 표시하는 명령입니다. man 명령은 매뉴얼 페이지의 이름을 인수로 표시합니다. 대부분의 컴퓨터에는 거의 모든 명령에 대한 매뉴얼 페이지가 있습니다. 시스템 라이브러리 및 중요한 파일과 같은 다른 많은 것들에 대한 매뉴얼 페이지도 있습니다.</target>
        </trans-unit>
        <trans-unit id="73e693d589ad85a4f595f45bc7f491c73bb44d92" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;man&lt;/code&gt;, display a manual page on the screen</source>
          <target state="translated">&lt;code&gt;man&lt;/code&gt; , 화면에 매뉴얼 페이지를 표시</target>
        </trans-unit>
        <trans-unit id="285ed3595a2a67bb3282ae1360db0e30794213ae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;math &quot;sin(pi)&quot;&lt;/code&gt; outputs &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;math &quot;sin(pi)&quot;&lt;/code&gt; &lt;code&gt;0&lt;/code&gt; 을 출력 합니다.</target>
        </trans-unit>
        <trans-unit id="eb050233a037dea5009df6afea79c6a67545439a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;math $status - 128&lt;/code&gt; outputs the numerical exit status of the last command minus 128.</source>
          <target state="translated">&lt;code&gt;math $status - 128&lt;/code&gt; 은 마지막 명령 빼기 128의 숫자 종료 상태를 출력합니다.</target>
        </trans-unit>
        <trans-unit id="62f5bddd60dd031bee23091b7071808993dd4f83" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;math -s0 10.0 / 6.0&lt;/code&gt; outputs &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;math -s0 10.0 / 6.0&lt;/code&gt; 출력 &lt;code&gt;1&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ee576ca1237b790b579b57a522ac77fdfe4dace9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;math -s3 10 / 6&lt;/code&gt; outputs &lt;code&gt;1.666&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;math -s3 10 / 6&lt;/code&gt; &lt;code&gt;1.666&lt;/code&gt; 출력 1.666 .</target>
        </trans-unit>
        <trans-unit id="81cc154eafffdbcc1fc0bc775abc9037a8ee7f57" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;math 1+1&lt;/code&gt; outputs 2.</source>
          <target state="translated">&lt;code&gt;math 1+1&lt;/code&gt; 출력 2.</target>
        </trans-unit>
        <trans-unit id="0b9bceb25a6bea3bf050d266eb2dabb87359d38c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;math 10 / 6&lt;/code&gt; outputs &lt;code&gt;1.666667&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;math 10 / 6&lt;/code&gt; &lt;code&gt;1.666667&lt;/code&gt; 출력 1.666667 .</target>
        </trans-unit>
        <trans-unit id="ac2f6b46e44457ebc6c17a24cac39023b91980ea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;math&lt;/code&gt; ignores whitespace between arguments and takes its input as multiple arguments (internally joined with a space), so &lt;code&gt;math 2 +2&lt;/code&gt; and &lt;code&gt;math &quot;2 +    2&quot;&lt;/code&gt; work the same. &lt;code&gt;math 2 2&lt;/code&gt; is an error.</source>
          <target state="translated">&lt;code&gt;math&lt;/code&gt; 는 인수 사이의 공백을 무시하고 입력을 여러 인수 (내부적으로 공백으로 결합)로 사용하므로 &lt;code&gt;math 2 +2&lt;/code&gt; 와 &lt;code&gt;math &quot;2 + 2&quot;&lt;/code&gt; 는 동일하게 작동합니다. &lt;code&gt;math 2 2&lt;/code&gt; 는 오류입니다.</target>
        </trans-unit>
        <trans-unit id="9ba0660e6966691b91248fb2bd5f96aab0fbeb26" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;math&lt;/code&gt; is used to perform mathematical calculations. It supports all the usual operations such as addition, subtraction, etc. As well as functions like &lt;code&gt;abs()&lt;/code&gt;, &lt;code&gt;sqrt()&lt;/code&gt; and &lt;code&gt;log2()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;math&lt;/code&gt; 은 수학 계산을 수행하는 데 사용됩니다. &lt;code&gt;abs()&lt;/code&gt; , &lt;code&gt;sqrt()&lt;/code&gt; 및 &lt;code&gt;log2()&lt;/code&gt; 와 같은 함수뿐만 아니라 더하기, 빼기 등과 같은 모든 일반적인 작업을 지원합니다 .</target>
        </trans-unit>
        <trans-unit id="f0c967cc75c19f494f0c88a7accc5d3cf4435577" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;math&lt;/code&gt; knows some operators, constants, functions and can (obviously) read numbers.</source>
          <target state="translated">&lt;code&gt;math&lt;/code&gt; 은 일부 연산자, 상수, 함수를 알고 있으며 숫자를 읽을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="be9c5baace2aafc6d8913dc0e713e617b094c022" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;math&lt;/code&gt; knows the following constants:</source>
          <target state="translated">&lt;code&gt;math&lt;/code&gt; 은 다음 상수를 알고 있습니다.</target>
        </trans-unit>
        <trans-unit id="54b59170a6a2d63ae4126c98f35573504c3fe866" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;math&lt;/code&gt; knows the following operators:</source>
          <target state="translated">&lt;code&gt;math&lt;/code&gt; 은 다음 연산자를 알고 있습니다.</target>
        </trans-unit>
        <trans-unit id="009be72b39b76a473ac24d04bf2afb4a541294d2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;math&lt;/code&gt; supports the following functions:</source>
          <target state="translated">&lt;code&gt;math&lt;/code&gt; 은 다음 기능을 지원합니다.</target>
        </trans-unit>
        <trans-unit id="be1434f80555c9e72306465d0deaafae514e79ed" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;merge&lt;/code&gt; immediately incorporates history changes from other sessions. Ordinarily &lt;code&gt;fish&lt;/code&gt; ignores history changes from sessions started after the current one. This command applies those changes immediately.</source>
          <target state="translated">&lt;code&gt;merge&lt;/code&gt; 즉시 다른 세션의 기록 변경 사항을 통합합니다. 일반적으로 &lt;code&gt;fish&lt;/code&gt; 는 현재 세션 이후에 시작된 세션의 기록 변경을 무시합니다. 이 명령은 이러한 변경 사항을 즉시 적용합니다.</target>
        </trans-unit>
        <trans-unit id="774a283e059b420761769f3fd4e58b1c4617fff8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mv&lt;/code&gt;, move (rename) files</source>
          <target state="translated">&lt;code&gt;mv&lt;/code&gt; , 파일 이동 (이름 바꾸기)</target>
        </trans-unit>
        <trans-unit id="7023e674591c966dcf0f86a6fe75236339070f1a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;n-name=+&lt;/code&gt; means that only &lt;code&gt;--name&lt;/code&gt; is valid. It requires a value and can be used more than once. If the flag is seen then &lt;code&gt;_flag_n&lt;/code&gt; and &lt;code&gt;_flag_name&lt;/code&gt; will be set with the values associated with each occurrence of the flag.</source>
          <target state="translated">&lt;code&gt;n-name=+&lt;/code&gt; 는 &lt;code&gt;--name&lt;/code&gt; 만 유효 함을 의미 합니다. 값이 필요하며 두 번 이상 사용할 수 있습니다. 플래그가 표시되면 &lt;code&gt;_flag_n&lt;/code&gt; 및 &lt;code&gt;_flag_name&lt;/code&gt; 은 플래그의 각 발생과 연관된 값으로 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="10c98ccb9e926b5c88017fefb6f1a99d034b3aee" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;n/name=&lt;/code&gt; means that both &lt;code&gt;-n&lt;/code&gt; and &lt;code&gt;--name&lt;/code&gt; are valid. It requires a value and can be used at most once. If the flag is seen then &lt;code&gt;_flag_n&lt;/code&gt; and &lt;code&gt;_flag_name&lt;/code&gt; will be set with the single mandatory value associated with the flag.</source>
          <target state="translated">&lt;code&gt;n/name=&lt;/code&gt; 은 &lt;code&gt;-n&lt;/code&gt; 과 &lt;code&gt;--name&lt;/code&gt; 이 모두 유효 함을 의미 합니다. 값이 필요하며 최대 한 번 사용할 수 있습니다. 플래그가 표시되면 &lt;code&gt;_flag_n&lt;/code&gt; 및 &lt;code&gt;_flag_name&lt;/code&gt; 이 플래그와 연관된 단일 필수 값으로 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="11979a51fb38eb5d6b66a5b8c9d7f5b86329e977" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;n/name=?&lt;/code&gt; means that both &lt;code&gt;-n&lt;/code&gt; and &lt;code&gt;--name&lt;/code&gt; are valid. It accepts an optional value and can be used at most once. If the flag is seen then &lt;code&gt;_flag_n&lt;/code&gt; and &lt;code&gt;_flag_name&lt;/code&gt; will be set with the value associated with the flag if one was provided else it will be set with no values.</source>
          <target state="translated">&lt;code&gt;n/name=?&lt;/code&gt; &lt;code&gt;-n&lt;/code&gt; 과 &lt;code&gt;--name&lt;/code&gt; 이 모두 유효 함을 의미 합니다. 선택적 값을 허용하며 최대 한 번 사용할 수 있습니다. 플래그가 표시되면 &lt;code&gt;_flag_n&lt;/code&gt; 및 &lt;code&gt;_flag_name&lt;/code&gt; 은 플래그가 제공된 경우 플래그와 연관된 값으로 설정되며, 그렇지 않은 경우 값이 설정되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="6a3aaaa7ebe33bd42f7c7723f56bc9270c4a585f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;n::max&lt;/code&gt; means that flags matching the regex &quot;^--?\d+$&quot; are valid. When seen they are assigned to the variables &lt;code&gt;_flag_n&lt;/code&gt; and &lt;code&gt;_flag_max&lt;/code&gt;. This allows any valid positive or negative integer to be specified by prefixing it with a single &quot;-&quot;. Many commands support this idiom. For example &lt;code&gt;head -3 /a/file&lt;/code&gt; to emit only the first three lines of /a/file. You can also specify the value using either flag: &lt;code&gt;-n NNN&lt;/code&gt; or &lt;code&gt;--max NNN&lt;/code&gt; in this example.</source>
          <target state="translated">&lt;code&gt;n::max&lt;/code&gt; 는 정규식 &quot;^-? \ d + $&quot;와 일치하는 플래그가 유효 함을 의미합니다. 보았을 때 변수 &lt;code&gt;_flag_n&lt;/code&gt; 및 &lt;code&gt;_flag_max&lt;/code&gt; 에 할당되었습니다 . 이를 통해 단일 &quot;-&quot;접두어를 사용하여 유효한 양수 또는 음수를 지정할 수 있습니다. 많은 명령이이 관용구를 지원합니다. 예를 들어 &lt;code&gt;head -3 /a/file&lt;/code&gt; 은 / a / file 의 처음 세 줄만 내 보냅니다. 이 예에서 플래그 &lt;code&gt;-n NNN&lt;/code&gt; 또는 &lt;code&gt;--max NNN&lt;/code&gt; 을 사용하여 값을 지정할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="18757061001b09cf2873d7ed5d548b11e41c7525" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nextd&lt;/code&gt; moves forwards &lt;code&gt;POS&lt;/code&gt; positions in the history of visited directories; if the end of the history has been hit, a warning is printed.</source>
          <target state="translated">&lt;code&gt;nextd&lt;/code&gt; 는 방문한 디렉토리 기록에서 &lt;code&gt;POS&lt;/code&gt; 위치를 앞으로 이동 시킵니다 . 히스토리의 끝에 도달하면 경고가 인쇄됩니다.</target>
        </trans-unit>
        <trans-unit id="cea306a2ee9cfb2d8fb7788331bf26c28447c7f3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;not&lt;/code&gt; negates the exit status of another command. If the exit status is zero, &lt;code&gt;not&lt;/code&gt; returns 1. Otherwise, &lt;code&gt;not&lt;/code&gt; returns 0.</source>
          <target state="translated">&lt;code&gt;not&lt;/code&gt; 다른 명령의 종료 상태를 무효화 하지 않습니다 . 종료 상태가 제로의 경우, &lt;code&gt;not&lt;/code&gt; 1. 그렇지 않으면 반환 &lt;code&gt;not&lt;/code&gt; 0을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="db48abf0126ad617f48775398922a0b4b30d0bc0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;open *.txt&lt;/code&gt; opens all the text files in the current directory using your system's default text editor.</source>
          <target state="translated">&lt;code&gt;open *.txt&lt;/code&gt; 는 시스템의 기본 텍스트 편집기를 사용하여 현재 디렉토리의 모든 텍스트 파일을 엽니 다.</target>
        </trans-unit>
        <trans-unit id="e94f06b97a3cfcb7ec8a4770650b1e748f69af17" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;open&lt;/code&gt; opens a file in its default application, using the appropriate tool for the operating system. On GNU/Linux, this requires the common but optional &lt;code&gt;xdg-open&lt;/code&gt; utility, from the &lt;code&gt;xdg-utils&lt;/code&gt; package.</source>
          <target state="translated">&lt;code&gt;open&lt;/code&gt; 은 운영 체제에 적합한 도구를 사용하여 기본 응용 프로그램에서 파일을 엽니 다. GNU / Linux에서는 &lt;code&gt;xdg-utils&lt;/code&gt; 패키지 의 일반적이지만 선택적인 &lt;code&gt;xdg-open&lt;/code&gt; 유틸리티 가 필요합니다 .</target>
        </trans-unit>
        <trans-unit id="23eeee895599e5eae80cda23801496141175086a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;open&lt;/code&gt;, open files with the default application associated with each filetype</source>
          <target state="translated">&lt;code&gt;open&lt;/code&gt; 각 파일 형식과 관련된 기본 응용 프로그램과 함께, 열려있는 파일</target>
        </trans-unit>
        <trans-unit id="dac5a9585518dd59c14ca7616fb90e727007732e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;or&lt;/code&gt; does not change the current exit status itself, but the command it runs most likely will. The exit status of the last foreground command to exit can always be accessed using the &lt;a href=&quot;index#variables-status&quot;&gt;$status&lt;/a&gt; variable.</source>
          <target state="translated">&lt;code&gt;or&lt;/code&gt; 현재 종료 상태 자체를 변경하지는 않지만 가장 많이 실행되는 명령이 작동합니다. 종료 할 마지막 포 그라운드 명령의 종료 상태는 항상 &lt;a href=&quot;index#variables-status&quot;&gt;$ status&lt;/a&gt; 변수를 사용하여 액세스 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="011af2ca1a12c1a3f3a067f4ab735209202aafb7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;or&lt;/code&gt; is used to execute a command if the previous command was not successful (returned a status of something other than 0).</source>
          <target state="translated">&lt;code&gt;or&lt;/code&gt; 이전 명령이 성공적이지 않은 경우 명령을 실행하는 데 사용됩니다 (0 이외의 상태를 반환 함).</target>
        </trans-unit>
        <trans-unit id="afa6b74bd124cb8b57c3d66b4c7a1084e37218d8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;or&lt;/code&gt; statements may be used as part of the condition in an &lt;a href=&quot;#if&quot;&gt;&lt;code&gt;and&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#while&quot;&gt;&lt;code&gt;while&lt;/code&gt;&lt;/a&gt; block. See the documentation for &lt;a href=&quot;#if&quot;&gt;&lt;code&gt;if&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#while&quot;&gt;&lt;code&gt;while&lt;/code&gt;&lt;/a&gt; for examples.</source>
          <target state="translated">&lt;code&gt;or&lt;/code&gt; 문은 &lt;a href=&quot;#if&quot;&gt; &lt;code&gt;and&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;#while&quot;&gt; &lt;code&gt;while&lt;/code&gt; &lt;/a&gt; 블록 에서 조건의 일부로 사용될 수 있습니다 . &lt;a href=&quot;#if&quot;&gt; &lt;code&gt;if&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#while&quot;&gt; &lt;code&gt;while&lt;/code&gt; &lt;/a&gt; 문서 는 예제 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="3f200b52a1765aa96f91d9512533bf90cd4d3e3d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pager-toggle-search&lt;/code&gt;, toggles the search field if the completions pager is visible.</source>
          <target state="translated">&lt;code&gt;pager-toggle-search&lt;/code&gt; , 완료 페이저가 표시되면 검색 필드를 토글합니다.</target>
        </trans-unit>
        <trans-unit id="93e6cd2cf57f32f0f1074687103ba4dd1420c892" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pi&lt;/code&gt; - You know that one. Half of Tau. (Tau is not implemented)</source>
          <target state="translated">&lt;code&gt;pi&lt;/code&gt; - 당신은 저것을 알고 있습니다. 타우의 절반. (타우 구현되지 않음)</target>
        </trans-unit>
        <trans-unit id="91f28400f6533478b46d55c90e3c872cc0eaea4d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;popd&lt;/code&gt; removes the top directory from the directory stack and changes the working directory to the new top directory. Use &lt;a href=&quot;#pushd&quot;&gt;&lt;code&gt;pushd&lt;/code&gt;&lt;/a&gt; to add directories to the stack.</source>
          <target state="translated">&lt;code&gt;popd&lt;/code&gt; 는 디렉토리 스택에서 최상위 디렉토리를 제거하고 작업 디렉토리를 새 최상위 디렉토리로 변경합니다. &lt;a href=&quot;#pushd&quot;&gt; &lt;code&gt;pushd&lt;/code&gt; &lt;/a&gt; 를 사용 하여 스택에 디렉토리를 추가 하십시오 .</target>
        </trans-unit>
        <trans-unit id="c23cde6c68fbe655e308c020e25d49d09dd62da1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pow(x,y)&lt;/code&gt; returns x to the y (and can be written as &lt;code&gt;x ^ y&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;pow(x,y)&lt;/code&gt; 는 x를 y에 반환합니다 ( &lt;code&gt;x ^ y&lt;/code&gt; 로 쓸 수 있음 )</target>
        </trans-unit>
        <trans-unit id="287de450b9e0483d85e25a5a84e5f182194a1456" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;prevd&lt;/code&gt; moves backwards &lt;code&gt;POS&lt;/code&gt; positions in the history of visited directories; if the beginning of the history has been hit, a warning is printed.</source>
          <target state="translated">&lt;code&gt;prevd&lt;/code&gt; 는 방문한 디렉토리 기록에서 &lt;code&gt;POS&lt;/code&gt; 위치를 뒤로 이동합니다 . 히스토리의 시작 부분에 도달하면 경고가 인쇄됩니다.</target>
        </trans-unit>
        <trans-unit id="e5c43c64e240d0f4ae1a99ca5c42cd0423139bc4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pushd +NUMBER&lt;/code&gt; rotates the stack counter-clockwise i.e. from bottom to top</source>
          <target state="translated">&lt;code&gt;pushd +NUMBER&lt;/code&gt; 누르면 스택이 시계 반대 방향으로 회전합니다. 즉, 아래에서 위로</target>
        </trans-unit>
        <trans-unit id="6ba679406b42673c5180f9bba2472c6204d8f0cb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pushd -NUMBER&lt;/code&gt; rotates clockwise i.e. top to bottom.</source>
          <target state="translated">&lt;code&gt;pushd -NUMBER&lt;/code&gt; 시계 방향으로 (예 : 위에서 아래로) 회전합니다.</target>
        </trans-unit>
        <trans-unit id="d9173c9010853802ba5c4a311f821ba14078009e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pwd&lt;/code&gt; outputs (prints) the current working directory.</source>
          <target state="translated">&lt;code&gt;pwd&lt;/code&gt; 는 현재 작업 디렉토리를 출력 (인쇄)합니다.</target>
        </trans-unit>
        <trans-unit id="72ec7167859aebdbfb7c4a4a7e1050eee5ed4896" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;read&lt;/code&gt; reads from standard input and either writes the result back to standard output (for use in command substitution), or stores the result in one or more shell variables. By default, &lt;code&gt;read&lt;/code&gt; reads a single line and splits it into variables on spaces or tabs. Alternatively, a null character or a maximum number of characters can be used to terminate the input, and other delimiters can be given. Unlike other shells, there is no default variable (such as &lt;code&gt;REPLY&lt;/code&gt;) for storing the result - instead, it is printed on standard output.</source>
          <target state="translated">&lt;code&gt;read&lt;/code&gt; 표준 입력에서 읽고 결과를 표준 출력에 다시 쓰거나 (명령 대체에 사용) 하나 이상의 쉘 변수에 결과를 저장합니다. 기본적으로 &lt;code&gt;read&lt;/code&gt; 는 단일 행을 읽고 공백 또는 탭의 변수로 분할합니다. 또는 널 문자 또는 최대 문자 수를 사용하여 입력을 종료하고 다른 구분 기호를 지정할 수 있습니다. 다른 쉘과 달리 결과를 저장하기위한 기본 변수 (예 : &lt;code&gt;REPLY&lt;/code&gt; ) 는 없습니다. 대신 표준 출력에 인쇄됩니다.</target>
        </trans-unit>
        <trans-unit id="4b249dc97dd0ed2d7efc75e8750d13ccd586b86f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;return&lt;/code&gt; halts a currently running function. The exit status is set to &lt;code&gt;STATUS&lt;/code&gt; if it is given.</source>
          <target state="translated">&lt;code&gt;return&lt;/code&gt; 은 현재 실행중인 기능을 중지합니다. 종료 상태가 제공되면 &lt;code&gt;STATUS&lt;/code&gt; 로 설정됩니다 .</target>
        </trans-unit>
        <trans-unit id="2dff648efb696543bf4783ef158dc6faac05096b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;round&lt;/code&gt; - rounds to the nearest integer, away from 0</source>
          <target state="translated">&lt;code&gt;round&lt;/code&gt; -0에서 가장 가까운 정수로 반올림</target>
        </trans-unit>
        <trans-unit id="9ae815b29923bb2081652f0d74075b638b35e307" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;save&lt;/code&gt; immediately writes all changes to the history file. The shell automatically saves the history file; this option is provided for internal use and should not normally need to be used by the user.</source>
          <target state="translated">&lt;code&gt;save&lt;/code&gt; 즉시 모든 변경 사항을 기록 파일에 씁니다. 쉘은 자동으로 히스토리 파일을 저장합니다. 이 옵션은 내부 용으로 제공되며 일반적으로 사용자가 사용할 필요는 없습니다.</target>
        </trans-unit>
        <trans-unit id="f9cbc63b923d6e80c08215a900beb75279f6f039" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;scope-shadowing&lt;/code&gt; if the function shadows the vars in the calling function (the normal case if it wasn't defined with &lt;code&gt;--no-scope-shadowing&lt;/code&gt;), else &lt;code&gt;no-scope-shadowing&lt;/code&gt;, or &lt;code&gt;n/a&lt;/code&gt; if the function isn't defined,</source>
          <target state="translated">&lt;code&gt;scope-shadowing&lt;/code&gt; 함수가 호출 함수에서 var를 음영 처리하는 경우 scope-shadowing ( &lt;code&gt;--no-scope-shadowing&lt;/code&gt; 으로 정의되지 않은 경우 일반적인 경우 ), 그렇지 않으면 &lt;code&gt;no-scope-shadowing&lt;/code&gt; 또는 함수가 아닌 경우 &lt;code&gt;n/a&lt;/code&gt; 한정된,</target>
        </trans-unit>
        <trans-unit id="28ff499477de962fb27a4867869e04752ace3e7f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;search&lt;/code&gt; returns history items matching the search string. If no search string is provided it returns all history items. This is the default operation if no other operation is specified. You only have to explicitly say &lt;code&gt;history search&lt;/code&gt; if you wish to search for one of the subcommands. The &lt;code&gt;--contains&lt;/code&gt; search option will be used if you don't specify a different search option. Entries are ordered newest to oldest unless you use the &lt;code&gt;--reverse&lt;/code&gt; flag. If stdout is attached to a tty the output will be piped through your pager by the history function. The history builtin simply writes the results to stdout.</source>
          <target state="translated">&lt;code&gt;search&lt;/code&gt; 은 검색 문자열과 일치하는 기록 항목을 반환합니다. 검색 문자열이 제공되지 않으면 모든 기록 항목을 반환합니다. 다른 작업이 지정되지 않은 경우 이것이 기본 작업입니다. 부속 명령 중 하나를 검색하려면 &lt;code&gt;history search&lt;/code&gt; 만 명시 적으로 말하면 됩니다. &lt;code&gt;--contains&lt;/code&gt; 의 다른 검색 옵션을 지정하지 않으면 검색 옵션이 사용됩니다. &lt;code&gt;--reverse&lt;/code&gt; 플래그 를 사용하지 않으면 항목은 최신에서 가장 오래된 항목으로 정렬 됩니다. stdout이 tty에 연결되면 출력은 히스토리 기능에 의해 호출기를 통해 파이프됩니다. 히스토리 내장은 단순히 결과를 표준 출력에 기록합니다.</target>
        </trans-unit>
        <trans-unit id="78965c3228dd7b50cac24fd22a4c3a8f0bdef2ab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;set&lt;/code&gt; manipulates &lt;a href=&quot;index#variables&quot;&gt;shell variables&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;set&lt;/code&gt; 은 &lt;a href=&quot;index#variables&quot;&gt;쉘 변수를&lt;/a&gt; 조작 합니다 .</target>
        </trans-unit>
        <trans-unit id="4f185cc7bb3302f1e1eb498766b8e2bd113f381a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;set&lt;/code&gt; requires all options to come before any other arguments. For example, &lt;code&gt;set flags -l&lt;/code&gt; will have the effect of setting the value of the variable &lt;code&gt;flags&lt;/code&gt; to '-l', not making the variable local.</source>
          <target state="translated">&lt;code&gt;set&lt;/code&gt; 은 모든 옵션이 다른 인수보다 먼저 나오도록 요구합니다. 예를 들어, &lt;code&gt;set flags -l&lt;/code&gt; 은 변수를 로컬로 만들지 않고 변수 &lt;code&gt;flags&lt;/code&gt; 의 값 을 '-l' 로 설정하는 효과가 있습니다 .</target>
        </trans-unit>
        <trans-unit id="9948f6276410fe2f9dcf81419917c9bdeb9052d6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;set_color&lt;/code&gt; is used to control the color and styling of text in the terminal. &lt;code&gt;VALUE&lt;/code&gt; corresponds to a reserved color name such as &lt;em&gt;red&lt;/em&gt; or a RGB color value given as 3 or 6 hexadecimal digits. The &lt;em&gt;br&lt;/em&gt;-, as in 'bright', forms are full-brightness variants of the 8 standard-brightness colors on many terminals. &lt;em&gt;brblack&lt;/em&gt; has higher brightness than &lt;em&gt;black&lt;/em&gt; - towards gray. A special keyword &lt;em&gt;normal&lt;/em&gt; resets text formatting to terminal defaults.</source>
          <target state="translated">&lt;code&gt;set_color&lt;/code&gt; 는 터미널에서 텍스트의 색상 및 스타일을 제어하는 ​​데 사용됩니다. &lt;code&gt;VALUE&lt;/code&gt; 는 3 자리 또는 6 자리 16 진수로 지정된 &lt;em&gt;빨강&lt;/em&gt; 또는 RGB 색상 값 과 같은 예약 된 색상 이름에 해당합니다 . &lt;em&gt;BR은&lt;/em&gt; - '밝은'에서와 같이 형태가 전체 밝기가 많은 터미널에 8 표준 밝기 색상의 변종이다. &lt;em&gt;brblack&lt;/em&gt; 은 &lt;em&gt;검은 색&lt;/em&gt; 보다 회색 보다 높은 밝기를 갖습니다 . 특수 키워드 &lt;em&gt;normal은&lt;/em&gt; 텍스트 형식을 터미널 기본값으로 재설정합니다.</target>
        </trans-unit>
        <trans-unit id="ab26307dc8847048c91facf1a58ea82662da70fb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;set_color&lt;/code&gt; works by printing sequences of characters to &lt;em&gt;stdout&lt;/em&gt;. If used in command substitution or a pipe, these characters will also be captured. This may or may not be desirable. Checking the exit code of &lt;code&gt;isatty stdout&lt;/code&gt; before using &lt;code&gt;set_color&lt;/code&gt; can be useful to decide not to colorize output in a script.</source>
          <target state="translated">&lt;code&gt;set_color&lt;/code&gt; 는 일련의 문자를 &lt;em&gt;stdout&lt;/em&gt; 에 인쇄하여 작동합니다 . 명령 대체 또는 파이프에 사용되는 경우 이러한 문자도 캡처됩니다. 이것은 바람직하거나 바람직하지 않을 수 있습니다. &lt;code&gt;set_color&lt;/code&gt; 를 사용하기 전에 &lt;code&gt;isatty stdout&lt;/code&gt; 의 종료 코드를 확인하면 스크립트에서 출력을 색상 화하지 않기로 결정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="92cf10690e111961211954c672900c642fb4e17e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;source&lt;/code&gt; evaluates the commands of the specified file in the current shell. This is different from starting a new process to perform the commands (i.e. &lt;code&gt;fish &amp;lt; FILENAME&lt;/code&gt;) since the commands will be evaluated by the current shell, which means that changes in shell variables will affect the current shell. If additional arguments are specified after the file name, they will be inserted into the &lt;code&gt;$argv&lt;/code&gt; variable. The &lt;code&gt;$argv&lt;/code&gt; variable will not include the name of the sourced file.</source>
          <target state="translated">&lt;code&gt;source&lt;/code&gt; 는 현재 쉘에서 지정된 파일의 명령을 평가합니다. 현재 쉘에서 명령이 평가되므로 쉘 변수의 변경이 현재 쉘에 영향을 미치므로 명령을 수행하기 위해 새 프로세스를 시작하는 것과 다릅니다 (즉, &lt;code&gt;fish &amp;lt; FILENAME&lt;/code&gt; ). 파일 이름 뒤에 추가 인수가 지정되면 &lt;code&gt;$argv&lt;/code&gt; 변수에 삽입됩니다 . &lt;code&gt;$argv&lt;/code&gt; 변수는 전래 파일의 이름을 포함하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="b682c0f9f4fd30b611d91123367bf03905b468de" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;split0&lt;/code&gt; has the important property that its output is not further split when used in a command substitution, allowing for the command substitution to produce elements containing newlines. This is most useful when used with Unix tools that produce zero bytes, such as &lt;code&gt;find -print0&lt;/code&gt; or &lt;code&gt;sort -z&lt;/code&gt;. See split0 examples below.</source>
          <target state="translated">&lt;code&gt;split0&lt;/code&gt; 은 명령 대체에 사용될 때 출력이 더 이상 분할되지 않는 중요한 특성을 가지므로 명령 대체가 개행을 포함하는 요소를 생성 할 수 있습니다. &lt;code&gt;find -print0&lt;/code&gt; 또는 &lt;code&gt;sort -z&lt;/code&gt; 와 같이 0 바이트를 생성하는 Unix 도구와 함께 사용할 때 가장 유용합니다 . 아래 split0 예제를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="b18d9d888505a6c0fddbe8b5ab5788ebfaae04f5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;stack-trace&lt;/code&gt; prints a stack trace of all function calls on the call stack. Also &lt;code&gt;print-stack-trace&lt;/code&gt;, &lt;code&gt;-t&lt;/code&gt; or &lt;code&gt;--print-stack-trace&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;stack-trace&lt;/code&gt; 는 호출 스택에서 모든 함수 호출의 스택 추적을 인쇄합니다. 또한 &lt;code&gt;print-stack-trace&lt;/code&gt; , &lt;code&gt;-t&lt;/code&gt; 또는 &lt;code&gt;--print-stack-trace&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="67df8697fda987cf4b0f9d793cb1a365c353272b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;status&lt;/code&gt;, the &lt;a href=&quot;#variables-status&quot;&gt;exit status&lt;/a&gt; of the last foreground job to exit. If the job was terminated through a signal, the exit status will be 128 plus the signal number.</source>
          <target state="translated">&lt;code&gt;status&lt;/code&gt; , &lt;a href=&quot;#variables-status&quot;&gt;종료&lt;/a&gt; 할 마지막 포 그라운드 작업 의 종료 상태 . 신호를 통해 작업이 종료 된 경우 종료 상태는 128에 신호 번호를 더한 값입니다.</target>
        </trans-unit>
        <trans-unit id="47aeedf462897d3635e7a17a92b7bf0d2db0992d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string escape&lt;/code&gt; escapes each STRING in one of three ways. The first is &lt;code&gt;--style=script&lt;/code&gt;. This is the default. It alters the string such that it can be passed back to &lt;code&gt;eval&lt;/code&gt; to produce the original argument again. By default, all special characters are escaped, and quotes are used to simplify the output when possible. If &lt;code&gt;-n&lt;/code&gt; or &lt;code&gt;--no-quoted&lt;/code&gt; is given, the simplifying quoted format is not used. Exit status: 0 if at least one string was escaped, or 1 otherwise.</source>
          <target state="translated">&lt;code&gt;string escape&lt;/code&gt; 는 세 가지 방법 중 하나로 각 STRING을 이스케이프합니다. 첫 번째는 &lt;code&gt;--style=script&lt;/code&gt; 입니다. 이것이 기본값입니다. 원래 인수를 다시 생성하기 위해 문자열을 &lt;code&gt;eval&lt;/code&gt; 로 다시 전달할 수 있도록 문자열을 변경 합니다. 기본적으로 모든 특수 문자는 이스케이프되며 따옴표는 가능한 경우 출력을 단순화하는 데 사용됩니다. 경우 &lt;code&gt;-n&lt;/code&gt; 또는 &lt;code&gt;--no-quoted&lt;/code&gt; 주어진다의 단순화 인용 형식이 사용되지 않습니다. 종료 상태 : 하나 이상의 문자열이 이스케이프 된 경우 0, 그렇지 않은 경우 1</target>
        </trans-unit>
        <trans-unit id="d4c0633e8572c3f56e421d3e1415eb94bb2502dc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string join&lt;/code&gt; joins its STRING arguments into a single string separated by SEP, which can be an empty string. Exit status: 0 if at least one join was performed, or 1 otherwise.</source>
          <target state="translated">&lt;code&gt;string join&lt;/code&gt; 은 STRING 인수를 SEP로 구분 된 단일 문자열로 결합 합니다 (빈 문자열 일 수 있음). 종료 상태 : 하나 이상의 결합이 수행 된 경우 0, 그렇지 않은 경우 1</target>
        </trans-unit>
        <trans-unit id="4ac8783d6c5b8669120457e3abfbead54a865de8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string join&lt;/code&gt; joins its STRING arguments into a single string separated by the zero byte (NUL), and adds a trailing NUL. This is most useful in conjunction with tools that accept NUL-delimited input, such as &lt;code&gt;sort -z&lt;/code&gt;. Exit status: 0 if at least one join was performed, or 1 otherwise.</source>
          <target state="translated">&lt;code&gt;string join&lt;/code&gt; 은 STRING 인수를 0 바이트 (NUL)로 구분 된 단일 문자열로 결합하고 후미 NUL을 추가합니다. 이는 &lt;code&gt;sort -z&lt;/code&gt; 와 같이 NUL 구분 입력을 허용하는 도구와 함께 사용하면 가장 유용합니다 . 종료 상태 : 하나 이상의 결합이 수행 된 경우 0, 그렇지 않은 경우 1</target>
        </trans-unit>
        <trans-unit id="31f0710b84864509b27d49251c16e09dbb8cd30c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string length&lt;/code&gt; reports the length of each string argument in characters. Exit status: 0 if at least one non-empty STRING was given, or 1 otherwise.</source>
          <target state="translated">&lt;code&gt;string length&lt;/code&gt; 는 각 문자열 인수의 길이를 문자로보고합니다. 종료 상태 : 비어 있지 않은 STRING이 하나 이상 있으면 0, 그렇지 않으면 1</target>
        </trans-unit>
        <trans-unit id="ca94e657994de04d0305dfa680bad3e53fc3ae46" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string lower&lt;/code&gt; converts each string argument to lowercase. Exit status: 0 if at least one string was converted to lowercase, else 1. This means that in conjunction with the &lt;code&gt;-q&lt;/code&gt; flag you can readily test whether a string is already lowercase.</source>
          <target state="translated">&lt;code&gt;string lower&lt;/code&gt; 는 각 문자열 인수를 소문자로 변환합니다. 종료 상태 : 하나 이상의 문자열이 소문자로 변환 된 경우 0, 그렇지 않으면 1. &lt;code&gt;-q&lt;/code&gt; 플래그 와 함께 문자열이 이미 소문자인지 쉽게 테스트 할 수 있음을 의미합니다 .</target>
        </trans-unit>
        <trans-unit id="333a78e8a7e90eb78cb032128941a70a0f45d451" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string match&lt;/code&gt; tests each STRING against PATTERN and prints matching substrings. Only the first match for each STRING is reported unless &lt;code&gt;-a&lt;/code&gt; or &lt;code&gt;--all&lt;/code&gt; is given, in which case all matches are reported.</source>
          <target state="translated">&lt;code&gt;string match&lt;/code&gt; 는 각 STRING을 패턴에 대해 테스트하고 일치하는 하위 문자열을 인쇄합니다. &lt;code&gt;-a&lt;/code&gt; 또는 &lt;code&gt;--all&lt;/code&gt; 을 지정 하지 않으면 각 STRING의 첫 번째 일치 만보고 되며,이 경우 모든 일치가보고됩니다.</target>
        </trans-unit>
        <trans-unit id="91089de95c70b9064ef9a4fecf2979a43632d7c3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string repeat&lt;/code&gt; repeats the STRING &lt;code&gt;-n&lt;/code&gt; or &lt;code&gt;--count&lt;/code&gt; times. The &lt;code&gt;-m&lt;/code&gt; or &lt;code&gt;--max&lt;/code&gt; option will limit the number of outputted char (excluding the newline). This option can be used by itself or in conjunction with &lt;code&gt;--count&lt;/code&gt;. If both &lt;code&gt;--count&lt;/code&gt; and &lt;code&gt;--max&lt;/code&gt; are present, max char will be outputed unless the final repeated string size is less than max, in that case, the string will repeat until count has been reached. Both &lt;code&gt;--count&lt;/code&gt; and &lt;code&gt;--max&lt;/code&gt; will accept a number greater than or equal to zero, in the case of zero, nothing will be outputed. If &lt;code&gt;-N&lt;/code&gt; or &lt;code&gt;--no-newline&lt;/code&gt; is given, the output won't contain a newline character at the end. Exit status: 0 if yielded string is not empty, 1 otherwise.</source>
          <target state="translated">&lt;code&gt;string repeat&lt;/code&gt; 은 STRING &lt;code&gt;-n&lt;/code&gt; 또는 &lt;code&gt;--count&lt;/code&gt; 횟수를 반복합니다 . &lt;code&gt;-m&lt;/code&gt; 또는 &lt;code&gt;--max&lt;/code&gt; 옵션 (줄 바꿈 제외) 출력 문자의 수를 제한합니다. 이 옵션은 &lt;code&gt;--count&lt;/code&gt; 또는 --count 와 함께 사용할 수 있습니다 . &lt;code&gt;--count&lt;/code&gt; 와 &lt;code&gt;--max&lt;/code&gt; 가 모두있는 경우 최종 반복 문자열 크기가 max보다 작지 않으면 max char가 출력됩니다.이 경우 문자열은 count에 도달 할 때까지 반복됩니다. &lt;code&gt;--count&lt;/code&gt; 와 &lt;code&gt;--max&lt;/code&gt; 는 모두 0 이상의 숫자를 허용하며, 0의 경우 아무 것도 출력되지 않습니다. 만약 &lt;code&gt;-N&lt;/code&gt; 또는 &lt;code&gt;--no-newline&lt;/code&gt; 결과는 끝에 줄 바꿈 문자가 포함되지 않습니다. 종료 상태 : 생성 된 문자열이 비어 있지 않으면 0, 그렇지 않으면 1</target>
        </trans-unit>
        <trans-unit id="cd631213eafa5a59cc02430161fa5c4930279381" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string replace&lt;/code&gt; is similar to &lt;code&gt;string match&lt;/code&gt; but replaces non-overlapping matching substrings with a replacement string and prints the result. By default, PATTERN is treated as a literal substring to be matched.</source>
          <target state="translated">&lt;code&gt;string replace&lt;/code&gt; 는 &lt;code&gt;string match&lt;/code&gt; 와 유사 하지만 겹치지 않는 일치하는 하위 문자열을 대체 문자열로 바꾸고 결과를 인쇄합니다. 기본적으로 PATTERN은 일치 할 리터럴 하위 문자열로 처리됩니다.</target>
        </trans-unit>
        <trans-unit id="8aa496c6349d03b4676c999aab50e066cb8b5aeb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string split0&lt;/code&gt; splits each STRING on the zero byte (NUL). Options are the same as &lt;code&gt;string split&lt;/code&gt; except that no separator is given.</source>
          <target state="translated">&lt;code&gt;string split0&lt;/code&gt; 은 각 STRING을 0 바이트 (NUL)로 분할합니다. 옵션은 구분자가 제공되지 않는다는 점을 제외하고 &lt;code&gt;string split&lt;/code&gt; 동일합니다.</target>
        </trans-unit>
        <trans-unit id="04bcff6b42bd8f1e79e01e4a6814e48e20fbe176" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string split&lt;/code&gt; splits each STRING on the separator SEP, which can be an empty string. If &lt;code&gt;-m&lt;/code&gt; or &lt;code&gt;--max&lt;/code&gt; is specified, at most MAX splits are done on each STRING. If &lt;code&gt;-r&lt;/code&gt; or &lt;code&gt;--right&lt;/code&gt; is given, splitting is performed right-to-left. This is useful in combination with &lt;code&gt;-m&lt;/code&gt; or &lt;code&gt;--max&lt;/code&gt;. With &lt;code&gt;-n&lt;/code&gt; or &lt;code&gt;--no-empty&lt;/code&gt;, empty results are excluded from consideration (e.g. &lt;code&gt;hello\n\nworld&lt;/code&gt; would expand to two strings and not three). Exit status: 0 if at least one split was performed, or 1 otherwise.</source>
          <target state="translated">&lt;code&gt;string split&lt;/code&gt; 은 분리기 SEP에서 각 STRING을 분할하며 빈 스트링 일 수 있습니다. 만약 &lt;code&gt;-m&lt;/code&gt; 또는 &lt;code&gt;--max&lt;/code&gt; 는 대부분의 MAX 분할은 각 STRING에 완료에, 지정됩니다. 경우 &lt;code&gt;-r&lt;/code&gt; 또는 &lt;code&gt;--right&lt;/code&gt; 이 주어집니다, 분할은 오른쪽에서 왼쪽으로 수행됩니다. &lt;code&gt;-m&lt;/code&gt; 또는 &lt;code&gt;--max&lt;/code&gt; 와 함께 사용하면 유용합니다 . 함께 &lt;code&gt;-n&lt;/code&gt; 또는 &lt;code&gt;--no-empty&lt;/code&gt; , 빈 결과는 고려 대상에서 제외됩니다 (예 : &lt;code&gt;hello\n\nworld&lt;/code&gt; 두 개의 문자열이 아니라 세 가지로 확장 것이다). 종료 상태 : 하나 이상의 분할이 수행 된 경우 0, 그렇지 않은 경우 1</target>
        </trans-unit>
        <trans-unit id="eb23e8e3b2836edf4562f76805e4e7dee2577723" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string sub&lt;/code&gt; prints a substring of each string argument. The start of the substring can be specified with &lt;code&gt;-s&lt;/code&gt; or &lt;code&gt;--start&lt;/code&gt; followed by a 1-based index value. Positive index values are relative to the start of the string and negative index values are relative to the end of the string. The default start value is 1. The length of the substring can be specified with &lt;code&gt;-l&lt;/code&gt; or &lt;code&gt;--length&lt;/code&gt;. If the length is not specified, the substring continues to the end of each STRING. Exit status: 0 if at least one substring operation was performed, 1 otherwise.</source>
          <target state="translated">&lt;code&gt;string sub&lt;/code&gt; 는 각 문자열 인수의 하위 문자열을 인쇄합니다. 하위 문자열의 시작은 &lt;code&gt;-s&lt;/code&gt; 또는 &lt;code&gt;--start&lt;/code&gt; 와 1 기반 색인 값 으로 지정할 수 있습니다 . 양수 색인 값은 문자열의 시작에 상대적이며 음수 색인 값은 문자열의 끝에 상대적입니다. 기본 시작 값은 1입니다. 하위 문자열의 길이는 &lt;code&gt;-l&lt;/code&gt; 또는 &lt;code&gt;--length&lt;/code&gt; 로 지정할 수 있습니다 . 길이를 지정하지 않으면 부분 문자열은 각 STRING의 끝까지 계속됩니다. 종료 상태 : 하나 이상의 하위 문자열 작업이 수행 된 경우 0, 그렇지 않으면 1</target>
        </trans-unit>
        <trans-unit id="2334b2142123bfb3db8760998428b33ddb48c83c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string trim&lt;/code&gt; removes leading and trailing whitespace from each STRING. If &lt;code&gt;-l&lt;/code&gt; or &lt;code&gt;--left&lt;/code&gt; is given, only leading whitespace is removed. If &lt;code&gt;-r&lt;/code&gt; or &lt;code&gt;--right&lt;/code&gt; is given, only trailing whitespace is trimmed. The &lt;code&gt;-c&lt;/code&gt; or &lt;code&gt;--chars&lt;/code&gt; switch causes the characters in CHARS to be removed instead of whitespace. Exit status: 0 if at least one character was trimmed, or 1 otherwise.</source>
          <target state="translated">&lt;code&gt;string trim&lt;/code&gt; 은 각 STRING에서 선행 및 후행 공백을 제거합니다. 경우 &lt;code&gt;-l&lt;/code&gt; 또는 &lt;code&gt;--left&lt;/code&gt; 이 주어집니다 만 선두 공백이 제거됩니다. 경우 &lt;code&gt;-r&lt;/code&gt; 또는 &lt;code&gt;--right&lt;/code&gt; 이 주어집니다 만 후행 공백은 잘립니다. &lt;code&gt;-c&lt;/code&gt; 또는 &lt;code&gt;--chars&lt;/code&gt; 스위치는 CHARS의 문자 대신 공백의 제거됩니다. 종료 상태 : 하나 이상의 문자가 잘린 경우 0, 그렇지 않으면 1</target>
        </trans-unit>
        <trans-unit id="4af7b90b6c15aa5377e3c5f869a9e47d5e7c1034" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string unescape&lt;/code&gt; performs the inverse of the &lt;code&gt;string escape&lt;/code&gt; command. If the string to be unescaped is not properly formatted it is ignored. For example, doing &lt;code&gt;string unescape --style=var (string escape --style=var $str)&lt;/code&gt; will return the original string. There is no support for unescaping &lt;code&gt;--style=regex&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;string unescape&lt;/code&gt; 는 &lt;code&gt;string escape&lt;/code&gt; 명령 의 역을 수행합니다 . 이스케이프 처리 할 문자열이 올바르게 형식화되지 않으면 무시됩니다. 예를 들어, &lt;code&gt;string unescape --style=var (string escape --style=var $str)&lt;/code&gt; 를 수행하면 원래 문자열이 반환됩니다. &lt;code&gt;--style=regex&lt;/code&gt; 이스케이프 해제를 지원하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="ec537040dfbcd46a1d8e30c2f47ec1a7a8765e12" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string upper&lt;/code&gt; converts each string argument to uppercase. Exit status: 0 if at least one string was converted to uppercase, else 1. This means that in conjunction with the &lt;code&gt;-q&lt;/code&gt; flag you can readily test whether a string is already uppercase.</source>
          <target state="translated">&lt;code&gt;string upper&lt;/code&gt; 는 각 문자열 인수를 대문자로 변환합니다. 종료 상태 : 하나 이상의 문자열이 대문자로 변환 된 경우 0, 그렇지 않으면 1. &lt;code&gt;-q&lt;/code&gt; 플래그 와 함께 문자열이 이미 대문자인지 쉽게 테스트 할 수 있음을 의미합니다 .</target>
        </trans-unit>
        <trans-unit id="661aff77ace918c530880cc3272bdbd7f29220e4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string&lt;/code&gt; performs operations on strings.</source>
          <target state="translated">&lt;code&gt;string&lt;/code&gt; 은 문자열 에 대한 작업을 수행합니다.</target>
        </trans-unit>
        <trans-unit id="2a88199c092063e7efbe0b5f39b511b67eb20c78" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;suppress-autosuggestion&lt;/code&gt;, remove the current autosuggestion</source>
          <target state="translated">&lt;code&gt;suppress-autosuggestion&lt;/code&gt; , 현재 자동 제안 제거</target>
        </trans-unit>
        <trans-unit id="83fb6c3713a11a13683e8334160327a537f8074f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;suspend&lt;/code&gt; suspends execution of the current shell by sending it a SIGTSTP signal, returning to the controlling process. It can be resumed later by sending it a SIGCONT. In order to prevent suspending a shell that doesn't have a controlling process, it will not suspend the shell if it is a login shell. This requirement is bypassed if the &lt;code&gt;--force&lt;/code&gt; option is given or the shell is not interactive.</source>
          <target state="translated">&lt;code&gt;suspend&lt;/code&gt; 는 현재 쉘의 SIGTSTP 신호를 전송하여 제어 프로세스로 돌아가서 현재 쉘의 실행을 일시 중단합니다. 나중에 SIGCONT를 보내서 다시 시작할 수 있습니다. 제어 프로세스가없는 쉘을 일시 중단하지 않으려면 로그인 쉘인 경우 쉘을 일시 중단하지 않습니다. &lt;code&gt;--force&lt;/code&gt; 옵션이 제공되거나 쉘이 대화식이 아닌 경우이 요구 사항은 무시됩니다 .</target>
        </trans-unit>
        <trans-unit id="626f00d07a2e5e46b2688607ebff9eb8a60c9966" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;swap-selection-start-stop&lt;/code&gt;, go to the other end of the highlighted text without changing the selection</source>
          <target state="translated">&lt;code&gt;swap-selection-start-stop&lt;/code&gt; , 선택을 변경하지 않고 강조 표시된 텍스트의 다른 끝으로 이동</target>
        </trans-unit>
        <trans-unit id="9156298ff90a429e917bf58c7cc5f06073a40cd2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;switch&lt;/code&gt; executes one of several blocks of commands, depending on whether a specified value matches one of several values. &lt;code&gt;case&lt;/code&gt; is used together with the &lt;code&gt;switch&lt;/code&gt; statement in order to determine which block should be executed.</source>
          <target state="translated">&lt;code&gt;switch&lt;/code&gt; 는 지정된 값이 여러 값 중 하나와 일치하는지 여부에 따라 여러 명령 블록 중 하나를 실행합니다. &lt;code&gt;case&lt;/code&gt; 는 &lt;code&gt;switch&lt;/code&gt; 블록 과 함께 사용되어 어떤 블록을 실행해야하는지 결정합니다.</target>
        </trans-unit>
        <trans-unit id="51522e2a7f62a39e69b057a1b4e46231f1a7ac4c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;switch&lt;/code&gt; performs one of several blocks of commands, depending on whether a specified value equals one of several wildcarded values. &lt;code&gt;case&lt;/code&gt; is used together with the &lt;code&gt;switch&lt;/code&gt; statement in order to determine which block should be executed.</source>
          <target state="translated">&lt;code&gt;switch&lt;/code&gt; 는 지정된 값이 여러 와일드 카드 값 중 하나와 같은지 여부에 따라 여러 명령 블록 중 하나를 수행합니다. &lt;code&gt;case&lt;/code&gt; 는 &lt;code&gt;switch&lt;/code&gt; 블록 과 함께 사용되어 어떤 블록을 실행해야하는지 결정합니다.</target>
        </trans-unit>
        <trans-unit id="83e86983927861a95c2a328128c72990861f2579" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;test-feature FEATURE&lt;/code&gt; returns 0 when FEATURE is enabled, 1 if it is disabled, and 2 if it is not recognized.</source>
          <target state="translated">&lt;code&gt;test-feature FEATURE&lt;/code&gt; FEATURE가 활성화되면 test-feature FEATURE 는 0을, 비활성화되어 있으면 1, 인식되지 않으면 2를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="49dea13a8691319ba78e4d5ed5960d93da35d7d6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;test&lt;/code&gt; implements a subset of the &lt;a href=&quot;http://www.unix.com/man-page/POSIX/1/test/&quot;&gt;IEEE Std 1003.1-2008 (POSIX.1) standard&lt;/a&gt;. The following exceptions apply:</source>
          <target state="translated">&lt;code&gt;test&lt;/code&gt; 는 &lt;a href=&quot;http://www.unix.com/man-page/POSIX/1/test/&quot;&gt;IEEE Std 1003.1-2008 (POSIX.1) 표준&lt;/a&gt; 의 일부를 구현합니다 . 다음 예외가 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="1560f147987dc48333613d49b888555f9bd4b99c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;transpose-chars&lt;/code&gt;, transpose two characters to the left of the cursor</source>
          <target state="translated">&lt;code&gt;transpose-chars&lt;/code&gt; , 커서 왼쪽에 두 문자를 바꿉니다.</target>
        </trans-unit>
        <trans-unit id="92b2de28003baeca135430a69cac3301df211dca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;transpose-words&lt;/code&gt;, transpose two words to the left of the cursor</source>
          <target state="translated">&lt;code&gt;transpose-words&lt;/code&gt; , 커서 왼쪽에 두 단어를 바꿉니다.</target>
        </trans-unit>
        <trans-unit id="f5ca8c4e095ac239e34f8594ebb4ab87d097fe66" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;trap&lt;/code&gt; is a wrapper around the fish event delivery framework. It exists for backwards compatibility with POSIX shells. For other uses, it is recommended to define an &lt;a href=&quot;index#event&quot;&gt;event handler&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;trap&lt;/code&gt; 은 물고기 이벤트 전달 프레임 워크를 둘러싼 래퍼입니다. POSIX 쉘과의 호환성을 위해 존재합니다. 다른 용도로는 &lt;a href=&quot;index#event&quot;&gt;이벤트 핸들러&lt;/a&gt; 를 정의하는 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="0744337fd5341ea7b8967ff13d484eb039621a85" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; sets the exit status to 0.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 는 종료 상태를 0으로 설정합니다.</target>
        </trans-unit>
        <trans-unit id="2d6b937046bc04378a6f19f7580563228ae32462" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ulimit -Hs 64&lt;/code&gt; sets the hard stack size limit to 64 kB.</source>
          <target state="translated">&lt;code&gt;ulimit -Hs 64&lt;/code&gt; 는 하드 스택 크기 제한을 64kB로 설정합니다.</target>
        </trans-unit>
        <trans-unit id="09823b46aa54108856d9cfe97a6e2d6654edeb51" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ulimit&lt;/code&gt; also accepts the following switches that determine what type of limit to set:</source>
          <target state="translated">&lt;code&gt;ulimit&lt;/code&gt; 는 설정할 제한 유형을 결정하는 다음 스위치도 허용합니다.</target>
        </trans-unit>
        <trans-unit id="27494793012a34dbc727255f14091cec8673cfbd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ulimit&lt;/code&gt; builtin sets or outputs the resource usage limits of the shell and any processes spawned by it. If a new limit value is omitted, the current value of the limit of the resource is printed; otherwise, the specified limit is set to the new value.</source>
          <target state="translated">&lt;code&gt;ulimit&lt;/code&gt; 내장은 쉘 및 그로 인해 생성 된 프로세스의 자원 사용 한계를 설정하거나 출력합니다. 새 한계 값을 생략하면 자원 한계의 현재 값이 인쇄됩니다. 그렇지 않으면 지정된 제한이 새 값으로 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="914a332a706ed930f92dfa2f893c31d61f8829c9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;umask 177&lt;/code&gt; or &lt;code&gt;umask u=rw&lt;/code&gt; sets the file creation mask to read and write for the owner and no permissions at all for any other users.</source>
          <target state="translated">&lt;code&gt;umask 177&lt;/code&gt; 또는 &lt;code&gt;umask u=rw&lt;/code&gt; 는 파일 작성 마스크를 설정하여 소유자가 읽고 쓸 수 있으며 다른 사용자에게는 전혀 권한이 없습니다.</target>
        </trans-unit>
        <trans-unit id="ea8bdfdd73550087a9e5f4d0d74f501ad65d8378" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;umask&lt;/code&gt; displays and manipulates the &quot;umask&quot;, or file creation mode mask, which is used to restrict the default access to files.</source>
          <target state="translated">&lt;code&gt;umask&lt;/code&gt; 는 파일에 대한 기본 액세스를 제한하는 데 사용되는 &quot;umask&quot;또는 파일 작성 모드 마스크를 표시하고 조작합니다.</target>
        </trans-unit>
        <trans-unit id="7b47f786d139724d5a34193ba1786452223e8ac7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;umask&lt;/code&gt;, the current file creation mask. The preferred way to change the umask variable is through the &lt;a href=&quot;commands#umask&quot;&gt;umask function&lt;/a&gt;. An attempt to set umask to an invalid value will always fail.</source>
          <target state="translated">&lt;code&gt;umask&lt;/code&gt; 현재 파일 작성 마스크 인 umask umask 변수를 변경하는 기본 방법은 &lt;a href=&quot;commands#umask&quot;&gt;umask 함수를 사용하는 것&lt;/a&gt; 입니다. umask를 유효하지 않은 값으로 설정하려는 시도는 항상 실패합니다.</target>
        </trans-unit>
        <trans-unit id="67c1b87ec154fe2bec25c34f88af59a7fa3c8771" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;upcase-word&lt;/code&gt;, make the current word uppercase</source>
          <target state="translated">&lt;code&gt;upcase-word&lt;/code&gt; , 현재 단어를 대문자로 만듭니다.</target>
        </trans-unit>
        <trans-unit id="57ccf04032406001bdc11a8189ad69fca2fb8bd0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vared PATH[3]&lt;/code&gt; edits the third element of the PATH array</source>
          <target state="translated">&lt;code&gt;vared PATH[3]&lt;/code&gt; 은 PATH 배열의 세 번째 요소를 편집합니다</target>
        </trans-unit>
        <trans-unit id="88c39c66df63979d68b40cdf38c535e8336f488a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vared&lt;/code&gt; is used to interactively edit the value of an environment variable. Array variables as a whole can not be edited using &lt;code&gt;vared&lt;/code&gt;, but individual array elements can.</source>
          <target state="translated">&lt;code&gt;vared&lt;/code&gt; 는 환경 변수의 값을 대화식으로 편집하는 데 사용됩니다. &lt;code&gt;vared&lt;/code&gt; 를 사용하여 배열 변수를 전체적으로 편집 할 수는 없지만 개별 배열 요소는 편집 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9862f5e93904059a6b32007b38450efce85a2073" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;version&lt;/code&gt;, the version of the currently running fish (also available as &lt;code&gt;FISH_VERSION&lt;/code&gt; for backward compatibility).</source>
          <target state="translated">&lt;code&gt;version&lt;/code&gt; , 현재 실행중인 물고기의 버전입니다 ( 이전 버전과의 호환성을 위해 &lt;code&gt;FISH_VERSION&lt;/code&gt; 으로 도 사용 가능).</target>
        </trans-unit>
        <trans-unit id="63fa20183bc82ef05dd53eaea0bdba2083b42311" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;wait&lt;/code&gt; waits for child jobs to complete.</source>
          <target state="translated">&lt;code&gt;wait&lt;/code&gt; 하위 작업이 완료 될 때까지 기다립니다.</target>
        </trans-unit>
        <trans-unit id="813fdc779468e7aa9ef0139c7dc0dcbe8dce7527" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;while&lt;/code&gt; repeatedly executes &lt;code&gt;CONDITION&lt;/code&gt;, and if the exit status is 0, then executes &lt;code&gt;COMMANDS&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;while&lt;/code&gt; &lt;code&gt;CONDITION&lt;/code&gt; 을 실행 하고 종료 상태가 0이면 &lt;code&gt;COMMANDS&lt;/code&gt; 를 실행 합니다.</target>
        </trans-unit>
        <trans-unit id="3777774e876be438277e734434a6c0c8157ad52c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x-&lt;/code&gt; is not valid since there is no long flag name and therefore the short flag, &lt;code&gt;-x&lt;/code&gt;, has to be usable.</source>
          <target state="translated">&lt;code&gt;x-&lt;/code&gt; 긴 플래그 이름이 없기 때문에 x- 는 유효하지 않으므로 짧은 플래그 &lt;code&gt;-x&lt;/code&gt; 를 사용할 수 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="5fd5ec35b0142154e7c9e8643d553640b56bf3b7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; means that only &lt;code&gt;-x&lt;/code&gt; is valid. It is a boolean can can be used more than once. If it is seen then &lt;code&gt;_flag_x&lt;/code&gt; will be set to the count of how many times the flag was seen.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; 는 &lt;code&gt;-x&lt;/code&gt; 만 유효 함을 의미 합니다. 부울은 두 번 이상 사용할 수 있습니다. 이것이 표시되면 &lt;code&gt;_flag_x&lt;/code&gt; 는 플래그가 표시된 횟수의 카운트로 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="21ede97712b0a6930815ab06e47ca99f9faf164c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x=&lt;/code&gt;, &lt;code&gt;x=?&lt;/code&gt;, and &lt;code&gt;x=+&lt;/code&gt; are similar to the n/name examples above but there is no long flag alternative to the short flag &lt;code&gt;-x&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;x=&lt;/code&gt; , &lt;code&gt;x=?&lt;/code&gt; , &lt;code&gt;x=+&lt;/code&gt; 는 위의 n / name 예제와 비슷하지만 short 플래그 &lt;code&gt;-x&lt;/code&gt; 에 대한 대체 플래그는 없습니다 .</target>
        </trans-unit>
        <trans-unit id="f0527623453636ac5982213b0815cf8b199abd43" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;yank-pop&lt;/code&gt;, rotate to the previous entry of the killring</source>
          <target state="translated">&lt;code&gt;yank-pop&lt;/code&gt; , 킬링의 이전 항목으로 회전</target>
        </trans-unit>
        <trans-unit id="6b2c2003ee77d278bc6a300e349540b9f1fcec50" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;yank&lt;/code&gt;, insert the latest entry of the killring into the buffer</source>
          <target state="translated">&lt;code&gt;yank&lt;/code&gt; , 킬링의 최신 항목을 버퍼에 삽입</target>
        </trans-unit>
        <trans-unit id="d38e08cea2004c22d96c7648bde8064ec9710a41" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{n,m}&lt;/code&gt; at least n, no more than m.</source>
          <target state="translated">&lt;code&gt;{n,m}&lt;/code&gt; 이상 , m 이하</target>
        </trans-unit>
        <trans-unit id="6754034e24ab614bfd421eac3a73529e0acbdf6b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{n,}&lt;/code&gt; n or more</source>
          <target state="translated">&lt;code&gt;{n,}&lt;/code&gt; n 이상</target>
        </trans-unit>
        <trans-unit id="a365c3492a087f6ec4c03c8376dcb30c6386fb2c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{n}&lt;/code&gt; to exactly n (where n is a number)</source>
          <target state="translated">&lt;code&gt;{n}&lt;/code&gt; 에서 정확히 n까지 (여기서 n은 숫자 임)</target>
        </trans-unit>
        <trans-unit id="707c3563364628d29b1994c70cf28e906025d3d1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;|&lt;/code&gt; is &quot;alternation&quot;, i.e. the &quot;or&quot;.</source>
          <target state="translated">&lt;code&gt;|&lt;/code&gt; &quot;대체&quot;, 즉 &quot;또는&quot;입니다.</target>
        </trans-unit>
        <trans-unit id="df0f52ee032449bf7212b4c3984d956c6fa44267" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;&lt;code&gt;SOME_VAR=1 command&lt;/code&gt; produces an error: &lt;code&gt;Unknown command &quot;SOME_VAR=1&quot;&lt;/code&gt;.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt; &lt;code&gt;SOME_VAR=1 command&lt;/code&gt; 은 오류를 생성합니다. &lt;code&gt;Unknown command &quot;SOME_VAR=1&quot;&lt;/code&gt; .&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="0da3c08b202353af950bee5219ca327f11f72cd7" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;&amp;larr;&lt;/b&gt; and &lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;&amp;rarr;&lt;/b&gt; move the cursor one word left or right, or moves forward/backward in the directory history if the command line is empty. If the cursor is already at the end of the line, and an autosuggestion is available, &lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;&amp;rarr;&lt;/b&gt; (or &lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;F&lt;/b&gt;) accepts the first word in the suggestion.</source>
          <target state="translated">&lt;em&gt;Alt 키&lt;/em&gt; - &lt;b&gt;&amp;larr;&lt;/b&gt; 와 &lt;em&gt;Alt 키&lt;/em&gt; - &lt;b&gt;&amp;rarr;는&lt;/b&gt; 명령 줄이 비어있는 경우 커서 한 단어 왼쪽이나 오른쪽으로 이동하거나 디렉토리 역사에서 뒤로 앞으로 이동 /. 커서가 줄의 끝에 이미, 그리고 자기 암시가 사용할 수있는 경우 &lt;em&gt;Alt 키&lt;/em&gt; - &lt;b&gt;&amp;rarr;&lt;/b&gt; (또는 &lt;em&gt;Alt 키&lt;/em&gt; - &lt;b&gt;F&lt;/b&gt; ) 제안의 첫 번째 단어를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="41668896a709e48d38407c24cdaae2f37bd2e2d0" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;&amp;uarr;&lt;/b&gt; and &lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;&amp;darr;&lt;/b&gt; search the command history for the previous/next token containing the token under the cursor before the search was started. If the commandline was not on a token when the search started, all tokens match. See the &lt;a href=&quot;#history&quot;&gt;history&lt;/a&gt; section for more information on history searching.</source>
          <target state="translated">&lt;em&gt;Alt 키&lt;/em&gt; - &lt;b&gt;&amp;uarr;&lt;/b&gt; 및 &lt;em&gt;Alt를&lt;/em&gt; - &lt;b&gt;&amp;darr;&lt;/b&gt; 에 대한 명령 기록을 검색 이전 / 다음 검색이 시작되기 전에 커서 아래에있는 토큰을 포함하는 토큰입니다. 검색이 시작될 때 명령 줄이 토큰에 없으면 모든 토큰이 일치합니다. 히스토리 검색에 대한 자세한 정보 는 &lt;a href=&quot;#history&quot;&gt;히스토리&lt;/a&gt; 섹션을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="dd002a4a5d9f181df1139416f359b0c0b1982d4c" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;&amp;uarr;&lt;/b&gt; recalls individual arguments, starting from the last argument in the last line executed. A single press replaces &quot;!$&quot;, later presses replace &quot;!!:4&quot; and the like.</source>
          <target state="translated">&lt;em&gt;Alt를&lt;/em&gt; - &lt;b&gt;&amp;uarr;&lt;/b&gt; 실행 된 마지막 행의 마지막 인수에서 시작하여, 개별 인수를 회상했다. 한 번의 누르기는 &quot;! $&quot;를 대체하고 나중에 누르는 것은 &quot;!! : 4&quot;등을 대체합니다.</target>
        </trans-unit>
        <trans-unit id="31b5b5642ff4d16559c25c2eec15dc84d9c7c38a" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;c&lt;/b&gt; capitalizes the current word.</source>
          <target state="translated">&lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;c&lt;/b&gt; 는 현재 단어를 대문자로 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="8c08d7cecc389da8fd667cb3de1b66142f66dbc0" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;d&lt;/b&gt; moves the next word to the &lt;a href=&quot;#killring&quot;&gt;killring&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;d&lt;/b&gt; 는 다음 단어를 &lt;a href=&quot;#killring&quot;&gt;킬링으로&lt;/a&gt; 이동합니다 .</target>
        </trans-unit>
        <trans-unit id="ba939795dc763dc37424d264df584c3dc1414201" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;e&lt;/b&gt; edit the current command line in an external editor. The editor is chosen from the first available of the &lt;code&gt;$VISUAL&lt;/code&gt; or &lt;code&gt;$EDITOR&lt;/code&gt; variables.</source>
          <target state="translated">&lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;e&lt;/b&gt; 외부 편집기에서 현재 명령 행을 편집합니다. 편집기는 &lt;code&gt;$VISUAL&lt;/code&gt; 또는 &lt;code&gt;$EDITOR&lt;/code&gt; 변수 중 사용 가능한 첫 번째 항목에서 선택됩니다 .</target>
        </trans-unit>
        <trans-unit id="8d19663ab96f42c66ebcd8b4711cc5775c0115de" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;h&lt;/b&gt; (or &lt;b&gt;F1&lt;/b&gt;) shows the manual page for the current command, if one exists.</source>
          <target state="translated">&lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;h&lt;/b&gt; (또는 &lt;b&gt;F1&lt;/b&gt; )은 현재 명령에 대한 매뉴얼 페이지를 표시합니다 (있는 경우).</target>
        </trans-unit>
        <trans-unit id="6fe0d9f367a7b1fb62d59310e866cb7000917983" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;l&lt;/b&gt; lists the contents of the current directory, unless the cursor is over a directory argument, in which case the contents of that directory will be listed.</source>
          <target state="translated">&lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;l&lt;/b&gt; 은 커서가 디렉토리 인수 위에 있지 않으면 현재 디렉토리의 내용을 나열합니다.이 경우 해당 디렉토리의 내용이 나열됩니다.</target>
        </trans-unit>
        <trans-unit id="ac4ab1e3b2a18333f6469ab62c6774ab20358dd6" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;p&lt;/b&gt; adds the string '&lt;code&gt;| less;&lt;/code&gt;' to the end of the job under the cursor. The result is that the output of the command will be paged.</source>
          <target state="translated">&lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;p&lt;/b&gt; 는 ' &lt;code&gt;| less;&lt;/code&gt; 커서 아래에서 작업이 끝날 때까지 결과적으로 명령 출력이 페이징됩니다.</target>
        </trans-unit>
        <trans-unit id="136abcdd3926f6f6917e785f3c9b3de852a583e3" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;t&lt;/b&gt; transposes the last two words</source>
          <target state="translated">&lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;t&lt;/b&gt; 는 마지막 두 단어를 바꿉니다.</target>
        </trans-unit>
        <trans-unit id="6b4f3c9f30c412c35376eb5c0b053bbecc930222" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;u&lt;/b&gt; makes the current word uppercase.</source>
          <target state="translated">&lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;u&lt;/b&gt; 는 현재 단어를 대문자로 만듭니다.</target>
        </trans-unit>
        <trans-unit id="f055c4fc1257b63bfc385501bfbaf929ca352490" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;v&lt;/b&gt; Same as &lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;e&lt;/b&gt;.</source>
          <target state="translated">&lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;v &lt;/b&gt;&lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;e&lt;/b&gt; 와 동일 합니다.</target>
        </trans-unit>
        <trans-unit id="5781eac00f106e823a16702f30c3a1c598e21b65" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;w&lt;/b&gt; prints a short description of the command under the cursor.</source>
          <target state="translated">&lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;w&lt;/b&gt; 는 커서 아래에 명령에 대한 간단한 설명을 인쇄합니다.</target>
        </trans-unit>
        <trans-unit id="17e2f8a79bdc960577f4eeaedc12d0c21a945731" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;C&lt;/b&gt; cancels the entire line.</source>
          <target state="translated">&lt;em&gt;컨트롤&lt;/em&gt; - &lt;b&gt;C는&lt;/b&gt; 전체 라인을 취소합니다.</target>
        </trans-unit>
        <trans-unit id="9333a2ffd2f21f466d57fc6d1e5b4d1a978b95a0" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;D&lt;/b&gt; delete one character to the right of the cursor. If the command line is empty, &lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;D&lt;/b&gt; will exit fish.</source>
          <target state="translated">&lt;em&gt;컨트롤&lt;/em&gt; - &lt;b&gt;D는&lt;/b&gt; 커서의 오른쪽으로 한 문자를 삭제합니다. 명령 행이 비어 있으면 &lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;D&lt;/b&gt; 는 물고기를 종료합니다.</target>
        </trans-unit>
        <trans-unit id="bb14070b99b4a045f1889b39bfeae27b8794ec9e" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;K&lt;/b&gt; moves contents from the cursor to the end of line to the &lt;a href=&quot;#killring&quot;&gt;killring&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;K&lt;/b&gt; 는 내용을 커서에서 줄 끝으로 &lt;a href=&quot;#killring&quot;&gt;킬링으로 이동&lt;/a&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="04ddb78416f34126599d6fdf7033f85b757d8ea0" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;L&lt;/b&gt; clears and repaints the screen.</source>
          <target state="translated">&lt;em&gt;제어&lt;/em&gt; - &lt;b&gt;L의&lt;/b&gt; 투명 도료 페인트 다시 화면을.</target>
        </trans-unit>
        <trans-unit id="eec641fe659922171462b212fb4e12bfac800762" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;U&lt;/b&gt; moves contents from the beginning of line to the cursor to the &lt;a href=&quot;#killring&quot;&gt;killring&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;U&lt;/b&gt; 는 내용을 줄의 시작 부분에서 커서로 &lt;a href=&quot;#killring&quot;&gt;킬링으로&lt;/a&gt; 이동합니다 .</target>
        </trans-unit>
        <trans-unit id="959eb883117dacfd136a241f1bf9b0d08b63da44" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;W&lt;/b&gt; moves the previous path component (everything up to the previous &quot;/&quot;) to the &lt;a href=&quot;#killring&quot;&gt;killring&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;W&lt;/b&gt; 는 이전 경로 구성 요소 (이전의 모든 &quot;/&quot;까지)를 &lt;a href=&quot;#killring&quot;&gt;킬링으로 이동&lt;/a&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="4437b353083b50d06c142c5629d09aa0198b91c6" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;X&lt;/b&gt; copies the current buffer to the system's clipboard, &lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;V&lt;/b&gt; inserts the clipboard contents.</source>
          <target state="translated">&lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;X&lt;/b&gt; 는 현재 버퍼를 시스템의 클립 보드에 복사하고 &lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;V&lt;/b&gt; 는 클립 보드 내용을 삽입합니다.</target>
        </trans-unit>
        <trans-unit id="5aed52702667fe63b8fc8764b7596443d6fa67f8" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;t&lt;/b&gt; transposes the last two characters</source>
          <target state="translated">&lt;em&gt;제어&lt;/em&gt; - &lt;b&gt;t는&lt;/b&gt; 마지막 두 글자 이항</target>
        </trans-unit>
        <trans-unit id="2a3529141c90e88bccb3cffb04eaf5e452963437" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Shift&lt;/em&gt;-&lt;b&gt;A&lt;/b&gt; enters &lt;a href=&quot;#vi-mode-insert&quot;&gt;insert mode&lt;/a&gt; at the end of the line.</source>
          <target state="translated">&lt;em&gt;Shift&lt;/em&gt; - &lt;b&gt;A&lt;/b&gt; 는 줄 끝에서 &lt;a href=&quot;#vi-mode-insert&quot;&gt;삽입 모드&lt;/a&gt; 로 들어갑니다 .</target>
        </trans-unit>
        <trans-unit id="848bb77d0284135b4b11d0def92f1a7b33558c29" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Shift&lt;/em&gt;-&lt;b&gt;D&lt;/b&gt; deletes text after the current cursor position and moves it to the &lt;a href=&quot;#killring&quot;&gt;killring&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;Shift&lt;/em&gt; - &lt;b&gt;D&lt;/b&gt; 는 현재 커서 위치 다음에있는 텍스트를 삭제하고 &lt;a href=&quot;#killring&quot;&gt;킬링으로&lt;/a&gt; 이동합니다 .</target>
        </trans-unit>
        <trans-unit id="0aa350769e38ad587d4204af5750f62efcffd698" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;black&lt;/em&gt;, &lt;em&gt;red&lt;/em&gt;, &lt;em&gt;green&lt;/em&gt;, &lt;em&gt;yellow&lt;/em&gt;, &lt;em&gt;blue&lt;/em&gt;, &lt;em&gt;magenta&lt;/em&gt;, &lt;em&gt;cyan&lt;/em&gt;, &lt;em&gt;white&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;까맣고&lt;/em&gt; , &lt;em&gt;빨강&lt;/em&gt; , &lt;em&gt;녹색&lt;/em&gt; , &lt;em&gt;노랗고&lt;/em&gt; , &lt;em&gt;파랗고&lt;/em&gt; , &lt;em&gt;자홍색&lt;/em&gt; , &lt;em&gt;청록색&lt;/em&gt; , &lt;em&gt;백색&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="2f06a4164895f4acf75e4fc05849a9f1080eb613" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;brblack&lt;/em&gt;, &lt;em&gt;brred&lt;/em&gt;, &lt;em&gt;brgreen&lt;/em&gt;, &lt;em&gt;bryellow&lt;/em&gt;, &lt;em&gt;brblue&lt;/em&gt;, &lt;em&gt;brmagenta&lt;/em&gt;, &lt;em&gt;brcyan&lt;/em&gt;, &lt;em&gt;brwhite&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;brblack&lt;/em&gt; , &lt;em&gt;brred&lt;/em&gt; , &lt;em&gt;brgreen&lt;/em&gt; , &lt;em&gt;bryellow&lt;/em&gt; , &lt;em&gt;brblue&lt;/em&gt; , &lt;em&gt;brmagenta&lt;/em&gt; , &lt;em&gt;brcyan&lt;/em&gt; , &lt;em&gt;brwhite&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="fba3fd4e3fd6608dd7f90bc1b5ab21add9a24490" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;/&lt;/code&gt; if the short flag can be used by someone invoking your command else &lt;code&gt;-&lt;/code&gt; if it should not be exposed as a valid short flag. If there is no long flag name these characters should be omitted. You can also specify a '#' to indicate the short and long flag names can be used and the value can be specified as an implicit int; i.e., a flag of the form &lt;code&gt;-NNN&lt;/code&gt;.</source>
          <target state="translated">A &lt;code&gt;/&lt;/code&gt; 다른 사람이 명령을 호출하여 짧은 플래그를 사용할 수있는 경우 &lt;code&gt;-&lt;/code&gt; 유효한 짧은 플래그로 노출되어서는 안됩니다. 긴 플래그 이름이 없으면이 문자를 생략해야합니다. 짧고 긴 플래그 이름을 사용할 수 있고 값을 암시 적 int로 지정할 수 있음을 나타 내기 위해 '#'을 지정할 수도 있습니다. 즉, &lt;code&gt;-NNN&lt;/code&gt; 형식의 플래그입니다 .</target>
        </trans-unit>
        <trans-unit id="7198b525f0714279660d3b850cc70c2393d6d32c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;fish&lt;/code&gt; function is a list of commands, which may optionally take arguments. Unlike other shells, arguments are not passed in &quot;numbered variables&quot; like &lt;code&gt;$1&lt;/code&gt;, but instead in a single list &lt;code&gt;$argv&lt;/code&gt;. To create a function, use the &lt;code&gt;function&lt;/code&gt; builtin:</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; 기능은 선택적 인수를 취할 수있다 명령의 목록입니다. 다른 쉘과 달리 인수는 &lt;code&gt;$1&lt;/code&gt; 과 같은 &quot;숫자 변수&quot;로 전달되지 않고 단일 목록 &lt;code&gt;$argv&lt;/code&gt; 됩니다. 함수를 만들려면 사용 &lt;code&gt;function&lt;/code&gt; 내장을 :</target>
        </trans-unit>
        <trans-unit id="19bcfbaa8447e6df7d2da91db70a782c0bf63572" translate="yes" xml:space="preserve">
          <source>A background job is executed simultaneously with fish, and does not have access to the keyboard. If no job is specified, the last job to be used is put in the background. If PID is specified, the jobs with the specified process group IDs are put in the background.</source>
          <target state="translated">백그라운드 작업은 물고기와 동시에 실행되며 키보드에 액세스 할 수 없습니다. 작업을 지정하지 않으면 마지막으로 사용 된 작업이 백그라운드에 배치됩니다. PID가 지정되면 지정된 프로세스 그룹 ID가있는 작업이 백그라운드에 배치됩니다.</target>
        </trans-unit>
        <trans-unit id="b46aed84b0ed848ddd07f44ad7751712530b525e" translate="yes" xml:space="preserve">
          <source>A bind mode name (e.g., &lt;code&gt;bind -m abc ...&lt;/code&gt;) is restricted to the rules for valid variable names.</source>
          <target state="translated">바인드 모드 이름 (예 : &lt;code&gt;bind -m abc ...&lt;/code&gt; )은 유효한 변수 이름의 규칙으로 제한됩니다.</target>
        </trans-unit>
        <trans-unit id="9b580f7fbca87c3708e0299e0e01e7d18f311f8d" translate="yes" xml:space="preserve">
          <source>A block allows the introduction of a new variable scope, redirection of the input or output of a set of commands as a group, or to specify precedence when using the conditional commands like &lt;code&gt;and&lt;/code&gt;.</source>
          <target state="translated">블록을 사용하면 새 변수 범위를 도입하거나 명령 집합의 입력 또는 출력을 그룹으로 리디렉션하거나 &lt;code&gt;and&lt;/code&gt; 와 같은 조건부 명령을 사용할 때 우선 순위를 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="221743bb3156c75a9da83c1a7dacbf3cffddec98" translate="yes" xml:space="preserve">
          <source>A comma separated list of characters enclosed in curly braces will be expanded so each element of the list becomes a new parameter.</source>
          <target state="translated">중괄호로 묶인 쉼표로 구분 된 문자 목록이 확장되어 목록의 각 요소가 새 매개 변수가됩니다.</target>
        </trans-unit>
        <trans-unit id="18819280931565e1e540c3948c1068287f296514" translate="yes" xml:space="preserve">
          <source>A command is executed by writing the name of the command followed by any arguments.</source>
          <target state="translated">명령 이름 뒤에 인수가 있으면 명령이 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="ef0596789e19cf7d157b82b21b7a04276de1271d" translate="yes" xml:space="preserve">
          <source>A command may be invalid because it does not exist, or refers to a file that you cannot execute. When the command becomes valid, it is shown in a different color:</source>
          <target state="translated">명령이 존재하지 않거나 실행할 수없는 파일을 참조하여 명령이 유효하지 않을 수 있습니다. 명령이 유효 해지면 다른 색으로 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="7889a1f8efa9424d9ad0d196f8208854866a152e" translate="yes" xml:space="preserve">
          <source>A common comparison is with $status:</source>
          <target state="translated">일반적인 비교는 $ status입니다.</target>
        </trans-unit>
        <trans-unit id="0ab1d9ac994221a7fc24fe83fee3534ae7e7edc9" translate="yes" xml:space="preserve">
          <source>A common idiom is to capture the output of a command in a variable:</source>
          <target state="translated">일반적인 관용구는 변수의 명령 출력을 캡처하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="e5fc3140c2546b6e6a23e2f80c44a655ee78ea6c" translate="yes" xml:space="preserve">
          <source>A directory for end-users to keep their own completions, usually &lt;code&gt;~/.config/fish/completions&lt;/code&gt; (controlled by the &lt;code&gt;XDG_CONFIG_HOME&lt;/code&gt; environment variable);</source>
          <target state="translated">최종 사용자가 일반적으로 &lt;code&gt;~/.config/fish/completions&lt;/code&gt; ( &lt;code&gt;XDG_CONFIG_HOME&lt;/code&gt; 환경 변수로 제어)를 완료 하기위한 디렉토리입니다 .</target>
        </trans-unit>
        <trans-unit id="65baeff5e625e88bc63f2d15091644216f3ec2bb" translate="yes" xml:space="preserve">
          <source>A directory for end-users to keep their own functions, usually &lt;code&gt;~/.config/fish/functions&lt;/code&gt; (controlled by the &lt;code&gt;XDG_CONFIG_HOME&lt;/code&gt; environment variable).</source>
          <target state="translated">최종 사용자가 일반적으로 &lt;code&gt;~/.config/fish/functions&lt;/code&gt; ( &lt;code&gt;XDG_CONFIG_HOME&lt;/code&gt; 환경 변수로 제어) 기능을 유지하기위한 디렉토리입니다 .</target>
        </trans-unit>
        <trans-unit id="859d016958d7758044bcb3a91d192638e99bef83" translate="yes" xml:space="preserve">
          <source>A directory for systems administrators to install completions for all users on the system, usually &lt;code&gt;/etc/fish/completions&lt;/code&gt;;</source>
          <target state="translated">시스템 관리자가 시스템의 모든 사용자에 대해 완료를 설치하기위한 디렉토리 (일반적으로 &lt;code&gt;/etc/fish/completions&lt;/code&gt; ) ;</target>
        </trans-unit>
        <trans-unit id="641e45d215c27568a98d7ad513ca06236cc4ce30" translate="yes" xml:space="preserve">
          <source>A directory for systems administrators to install functions for all users on the system, usually &lt;code&gt;/etc/fish/functions&lt;/code&gt;.</source>
          <target state="translated">시스템 관리자가 시스템의 모든 사용자를 위해 일반적으로 &lt;code&gt;/etc/fish/functions&lt;/code&gt; 기능 을 설치하기위한 디렉토리입니다 .</target>
        </trans-unit>
        <trans-unit id="9f5e2984dcf6e5df1ad339573ada9e5723fb0b37" translate="yes" xml:space="preserve">
          <source>A directory for third-party software vendors to ship their own completions for their software, usually &lt;code&gt;/usr/share/fish/vendor_completions.d&lt;/code&gt;;</source>
          <target state="translated">타사 소프트웨어 공급 업체가 소프트웨어에 대한 완성품을 배송 할 수있는 디렉토리 (일반적으로 &lt;code&gt;/usr/share/fish/vendor_completions.d&lt;/code&gt; ;</target>
        </trans-unit>
        <trans-unit id="5e8075c8426f4f6e374491e133779cfa809fd782" translate="yes" xml:space="preserve">
          <source>A directory for third-party software vendors to ship their own functions for their software, usually &lt;code&gt;/usr/share/fish/vendor_functions.d&lt;/code&gt;.</source>
          <target state="translated">타사 소프트웨어 공급 업체가 자체 소프트웨어 기능 (일반적으로 &lt;code&gt;/usr/share/fish/vendor_functions.d&lt;/code&gt; )을 제공하기위한 디렉토리입니다 .</target>
        </trans-unit>
        <trans-unit id="a44f52824482af64d09602d2bfcb5e4719f63ad2" translate="yes" xml:space="preserve">
          <source>A dollar sign followed by a string of characters is expanded into the value of the shell variable with the same name. For an introduction to the concept of shell variables, read the &lt;a href=&quot;#variables&quot;&gt;Shell variables&lt;/a&gt; section.</source>
          <target state="translated">달러 기호 다음에 문자열이 같은 이름을 가진 쉘 변수의 값으로 확장됩니다. 쉘 변수 개념에 대한 소개는 &lt;a href=&quot;#variables&quot;&gt;쉘 변수&lt;/a&gt; 섹션을 읽으십시오 .</target>
        </trans-unit>
        <trans-unit id="d2d19574b46bfc9315dc6a4268de0f13c74f87d0" translate="yes" xml:space="preserve">
          <source>A faster way is to modify the &lt;code&gt;$fish_user_paths&lt;/code&gt;&lt;a href=&quot;#tut_universal&quot;&gt;universal variable&lt;/a&gt;, which is automatically prepended to &lt;code&gt;$PATH&lt;/code&gt;. For example, to permanently add &lt;code&gt;/usr/local/bin&lt;/code&gt; to your &lt;code&gt;$PATH&lt;/code&gt;, you could write:</source>
          <target state="translated">더 빠른 방법은 &lt;code&gt;$fish_user_paths&lt;/code&gt; &lt;a href=&quot;#tut_universal&quot;&gt;범용 변수&lt;/a&gt; 를 수정하는 것입니다.이 변수 는 &lt;code&gt;$PATH&lt;/code&gt; 앞에 자동으로 추가됩니다 . 예를 들어 &lt;code&gt;$PATH&lt;/code&gt; 에 &lt;code&gt;/usr/local/bin&lt;/code&gt; 을 영구적으로 추가 하려면 다음 과 같이 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ceec61da03fba72e62b6265e8da899ee3527c4d0" translate="yes" xml:space="preserve">
          <source>A filename. The output will be written to the specified file.</source>
          <target state="translated">파일 이름 출력은 지정된 파일에 기록됩니다.</target>
        </trans-unit>
        <trans-unit id="3d33de98068774700d9110cea5dcb53a094ba7e7" translate="yes" xml:space="preserve">
          <source>A function is a list of commands that will be executed when the name of the function is given as a command.</source>
          <target state="translated">함수는 함수 이름이 명령으로 제공 될 때 실행될 명령 목록입니다.</target>
        </trans-unit>
        <trans-unit id="7601c1858c241e3bd16046e3e56c915853d6505a" translate="yes" xml:space="preserve">
          <source>A function name cannot be empty. It may not begin with a hyphen (&quot;-&quot;) and may not contain a slash (&quot;/&quot;). All other characters, including a space, are valid.</source>
          <target state="translated">함수 이름은 비워 둘 수 없습니다. 하이픈 ( &quot;-&quot;)으로 시작하지 않고 슬래시 ( &quot;/&quot;)를 포함 할 수 없습니다. 공백을 포함한 다른 모든 문자는 유효합니다.</target>
        </trans-unit>
        <trans-unit id="f2876072ebbf01c7648d2358047842fa63f47f6c" translate="yes" xml:space="preserve">
          <source>A global variable of the same name already exists.</source>
          <target state="translated">같은 이름의 전역 변수가 이미 존재합니다.</target>
        </trans-unit>
        <trans-unit id="8b50d81adfb557d2a38d6b95df25f2d574c4f80c" translate="yes" xml:space="preserve">
          <source>A hard limit can only be decreased. Once it is set it cannot be increased; a soft limit may be increased up to the value of the hard limit. If neither -H nor -S is specified, both the soft and hard limits are updated when assigning a new limit value, and the soft limit is used when reporting the current value.</source>
          <target state="translated">하드 한계는 줄일 수 있습니다. 일단 설정되면 증가시킬 수 없습니다. 소프트 한계는 하드 한계의 값까지 증가 될 수있다. -H 또는 -S를 지정하지 않으면 새 한계 값을 지정할 때 소프트 한계와 하드 한계가 모두 업데이트되고 현재 값을보고 할 때 소프트 한계가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="ec2f57dda8cd2b7d726afdc269175dec20de44df" translate="yes" xml:space="preserve">
          <source>A large number of variable starting with the prefixes &lt;code&gt;fish_color&lt;/code&gt; and &lt;code&gt;fish_pager_color.&lt;/code&gt; See &lt;a href=&quot;#variables-color&quot;&gt;Variables for changing highlighting colors&lt;/a&gt; for more information.</source>
          <target state="translated">접두사 &lt;code&gt;fish_color&lt;/code&gt; 및 &lt;code&gt;fish_pager_color.&lt;/code&gt; 시작하는 많은 변수 자세한 내용은 &lt;a href=&quot;#variables-color&quot;&gt;강조 색상 변경을위한 변수를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="5e5cf560f2e4f99636de6a450bd940ddafbd9847" translate="yes" xml:space="preserve">
          <source>A literal &quot;{}&quot; will not be used as a brace expansion:</source>
          <target state="translated">리터럴 &quot;{}&quot;은 중괄호 확장으로 사용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="3b73470b832856451e08f355e80a561c89bef4ab" translate="yes" xml:space="preserve">
          <source>A long flag name which is optional. If not present then only the short flag letter can be used.</source>
          <target state="translated">선택적인 긴 플래그 이름입니다. 존재하지 않으면 짧은 플래그 문자 만 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b7b8ab4ed67c762ac2d0fa14336c7a66f5b2e303" translate="yes" xml:space="preserve">
          <source>A range of indices can be specified, see &lt;a href=&quot;#expand-index-range&quot;&gt;index range expansion&lt;/a&gt; for details.</source>
          <target state="translated">&lt;a href=&quot;#expand-index-range&quot;&gt;인덱스 범위를&lt;/a&gt; 지정할 수 있습니다 . 자세한 내용 은 인덱스 범위 확장 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="fa2eb63a7d926840491eb53403e1e6e33347d750" translate="yes" xml:space="preserve">
          <source>A short flag letter (which is mandatory). It must be an alphanumeric or &quot;#&quot;. The &quot;#&quot; character is special and means that a flag of the form &lt;code&gt;-123&lt;/code&gt; is valid. The short flag &quot;#&quot; must be followed by &quot;-&quot; (since the short name isn't otherwise valid since &lt;code&gt;_flag_#&lt;/code&gt; is not a valid var name) and must be followed by a long flag name with no modifiers.</source>
          <target state="translated">짧은 플래그 문자 (필수). 영숫자 또는 &quot;#&quot;이어야합니다. &quot;#&quot;문자는 특별하며 &lt;code&gt;-123&lt;/code&gt; 형식의 플래그 가 유효 함을 의미 합니다. 짧은 플래그 &quot;#&quot;다음에 &quot;-&quot;가 와야합니다 ( &lt;code&gt;_flag_#&lt;/code&gt; 가 유효한 var 이름이 아니기 때문에 짧은 이름이 유효하지 않기 때문에 ). 뒤에 수정자가없는 긴 플래그 이름이 와야합니다.</target>
        </trans-unit>
        <trans-unit id="610fac60f39f41e55d40e59429099ac45fcaf3c8" translate="yes" xml:space="preserve">
          <source>A simple prompt that is a simplified version of the default debugging prompt:</source>
          <target state="translated">기본 디버깅 프롬프트의 단순화 된 버전 인 간단한 프롬프트 :</target>
        </trans-unit>
        <trans-unit id="631761c6042b0b4defe6087674d679a446f769a6" translate="yes" xml:space="preserve">
          <source>A simple prompt:</source>
          <target state="translated">간단한 프롬프트 :</target>
        </trans-unit>
        <trans-unit id="a457232f4c851ca48444c8b22ce5d86f9157d153" translate="yes" xml:space="preserve">
          <source>A simple right prompt:</source>
          <target state="translated">간단한 올바른 프롬프트 :</target>
        </trans-unit>
        <trans-unit id="e87c54de638d95b5e6d226cc4b4479d88e8ad79d" translate="yes" xml:space="preserve">
          <source>A switch is a very common special type of argument. Switches almost always start with one or more hyphens '&lt;code&gt;-&lt;/code&gt;' and alter the way a command operates. For example, the '&lt;code&gt;ls&lt;/code&gt;' command usually lists all the files and directories in the current working directory, but by using the '&lt;code&gt;-l&lt;/code&gt;' switch, the behavior of '&lt;code&gt;ls&lt;/code&gt;' is changed to not only display the filename, but also the size, permissions, owner and modification time of each file.</source>
          <target state="translated">스위치는 매우 일반적인 특수 유형의 인수입니다. 스위치는 거의 항상 하나 이상의 하이픈 ' &lt;code&gt;-&lt;/code&gt; '으로 시작하고 명령 작동 방식을 변경합니다. 예를 들어, ' &lt;code&gt;ls&lt;/code&gt; '명령은 일반적으로 현재 작업 디렉토리의 모든 파일과 디렉토리를 나열하지만 ' &lt;code&gt;-l&lt;/code&gt; '스위치 를 사용하면 ' &lt;code&gt;ls&lt;/code&gt; ' 의 동작이 파일 이름뿐만 아니라 크기도 표시하도록 변경됩니다. , 권한, 소유자 및 각 파일의 수정 시간.</target>
        </trans-unit>
        <trans-unit id="dfb06de1c7a12f5632480c8ec95581dfbbdcf321" translate="yes" xml:space="preserve">
          <source>A universal variable is a variable whose value is shared across all instances of &lt;code&gt;fish&lt;/code&gt;, now and in the future &amp;ndash; even after a reboot. You can make a variable universal with &lt;code&gt;set -U&lt;/code&gt;:</source>
          <target state="translated">범용 변수는 재부팅 후에도 현재와 미래 의 모든 &lt;code&gt;fish&lt;/code&gt; 인스턴스에서 값을 공유하는 변수입니다 . &lt;code&gt;set -U&lt;/code&gt; 로 변수를 범용으로 만들 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="7b8d375ccbff689a61358d91a3d87c3b4c7bb526" translate="yes" xml:space="preserve">
          <source>A variable name cannot be empty. It can contain only letters, digits, and underscores. It may begin and end with any of those characters.</source>
          <target state="translated">변수 이름은 비워 둘 수 없습니다. 문자, 숫자 및 밑줄 만 포함 할 수 있습니다. 해당 문자로 시작하고 끝날 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e139d85bd15795b0d3efa188c22e165c587928c5" translate="yes" xml:space="preserve">
          <source>Access rights are explained in the manual page for the &lt;code&gt;chmod&lt;/code&gt;(1) program.</source>
          <target state="translated">액세스 권한은 &lt;code&gt;chmod&lt;/code&gt; (1) 프로그램 의 매뉴얼 페이지에 설명되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="cf27f6010a1e75f4bb8d29911772c8214904203b" translate="yes" xml:space="preserve">
          <source>Add a new abbreviation where &lt;code&gt;gco&lt;/code&gt; will be replaced with &lt;code&gt;git checkout&lt;/code&gt; global to the current shell. This abbreviation will not be automatically visible to other shells unless the same command is run in those shells (such as when executing the commands in config.fish).</source>
          <target state="translated">&lt;code&gt;gco&lt;/code&gt; 가 현재 쉘에 대해 전역으로 &lt;code&gt;git checkout&lt;/code&gt; 으로 대체 되는 새로운 약어를 추가하십시오 . config.fish에서 명령을 실행할 때와 같이 해당 쉘에서 동일한 명령을 실행하지 않으면이 약어는 다른 쉘에 자동으로 표시되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="6e3c8915a2556d62c5b7d149b19924656f4d28db" translate="yes" xml:space="preserve">
          <source>Add a new abbreviation where &lt;code&gt;l&lt;/code&gt; will be replaced with &lt;code&gt;less&lt;/code&gt; universal so all shells. Note that you omit the &lt;code&gt;-U&lt;/code&gt; since it is the default.</source>
          <target state="translated">&lt;code&gt;l&lt;/code&gt; 이 &lt;code&gt;less&lt;/code&gt; 보편적이므로 모든 셸로 대체 되는 새로운 약어를 추가하십시오 . &lt;code&gt;-U&lt;/code&gt; 가 기본값이므로 생략합니다 .</target>
        </trans-unit>
        <trans-unit id="fb5d43a3f1c9755eef7928213dbee5eeaa42d36e" translate="yes" xml:space="preserve">
          <source>Add the fish shell &lt;code&gt;/usr/local/bin/fish&lt;/code&gt; to &lt;code&gt;/etc/shells&lt;/code&gt; with:</source>
          <target state="translated">다음을 사용하여 &lt;code&gt;/etc/shells&lt;/code&gt; 에 생선 껍질 &lt;code&gt;/usr/local/bin/fish&lt;/code&gt; 를 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="fc74aa2568dbca49c63c7dc4f2b48adf6334bb72" translate="yes" xml:space="preserve">
          <source>Additionally, the following variables are available to change the highlighting in the completion pager:</source>
          <target state="translated">또한 완료 호출기에서 강조 표시를 변경하기 위해 다음 변수를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3dcf0bfda5eb37d5ad6d848b3b854d252bf95ed5" translate="yes" xml:space="preserve">
          <source>After a command has been entered, it is inserted at the end of a history list. Any duplicate history items are automatically removed. By pressing the up and down keys, the user can search forwards and backwards in the history. If the current command line is not empty when starting a history search, only the commands containing the string entered into the command line are shown.</source>
          <target state="translated">명령이 입력 된 후, 내역 목록의 끝에 삽입됩니다. 중복 기록 항목이 자동으로 제거됩니다. 위 / 아래 키를 누르면 히스토리에서 앞뒤로 검색 할 수 있습니다. 히스토리 검색을 시작할 때 현재 명령 행이 비어 있지 않으면 명령 행에 입력 된 문자열을 포함하는 명령 만 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="a350de02e9b5ffd85be164d43398c5ad2155568f" translate="yes" xml:space="preserve">
          <source>After a variable has been set, you can use the value of a variable in the shell through &lt;a href=&quot;#expand-variable&quot;&gt;variable expansion&lt;/a&gt;.</source>
          <target state="translated">변수가 설정되면 &lt;a href=&quot;#expand-variable&quot;&gt;변수 확장을&lt;/a&gt; 통해 쉘에서 변수 값을 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="6629fd2d9ea9eaa222685dbc3f35af94810deb35" translate="yes" xml:space="preserve">
          <source>After parsing the arguments the &lt;code&gt;argv&lt;/code&gt; var is set with local scope to any values not already consumed during flag processing. If there are not unbound values the var is set but &lt;code&gt;count $argv&lt;/code&gt; will be zero.</source>
          <target state="translated">인수를 구문 분석 한 후 &lt;code&gt;argv&lt;/code&gt; var는 플래그 처리 중에 아직 소비되지 않은 값으로 로컬 범위로 설정됩니다. 바인딩되지 않은 값이 없으면 var가 설정되지만 &lt;code&gt;count $argv&lt;/code&gt; 는 0이됩니다.</target>
        </trans-unit>
        <trans-unit id="c71ccb08a9461f3714b74f1bc1174cad1387e3e4" translate="yes" xml:space="preserve">
          <source>All arrays are one-dimensional and cannot contain other arrays, although it is possible to fake nested arrays using the dereferencing rules of &lt;a href=&quot;#expand-variable&quot;&gt;variable expansion&lt;/a&gt;.</source>
          <target state="translated">모든 배열은 1 차원이며 다른 배열을 포함 할 수 없지만 &lt;a href=&quot;#expand-variable&quot;&gt;변수 확장&lt;/a&gt; 의 역 참조 규칙을 사용하여 중첩 배열을 속일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="66ffedcb95110c61b7f48b8dfe9b357e5be7aafb" translate="yes" xml:space="preserve">
          <source>All of the above expansions can be combined. If several expansions result in more than one parameter, all possible combinations are created.</source>
          <target state="translated">위의 모든 확장을 결합 할 수 있습니다. 여러 확장으로 인해 둘 이상의 매개 변수가 발생하면 가능한 모든 조합이 작성됩니다.</target>
        </trans-unit>
        <trans-unit id="828afdd065730919c157af1148a37aa2e6215eb2" translate="yes" xml:space="preserve">
          <source>All of the trigonometric functions use radians.</source>
          <target state="translated">모든 삼각 함수는 라디안을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="59d286363a981fa0af60a5ca572e501d6a1474e5" translate="yes" xml:space="preserve">
          <source>Almost all fish commands respond to the &lt;code&gt;-h&lt;/code&gt; or &lt;code&gt;--help&lt;/code&gt; options to display their relevant help, also accessible using the &lt;code&gt;help&lt;/code&gt; and &lt;code&gt;man&lt;/code&gt; commands, like so:</source>
          <target state="translated">거의 모든 피쉬 명령은 &lt;code&gt;-h&lt;/code&gt; 또는 &lt;code&gt;--help&lt;/code&gt; 옵션에 응답하여 관련 도움말을 표시하고 &lt;code&gt;help&lt;/code&gt; 및 &lt;code&gt;man&lt;/code&gt; 명령을 사용하여 액세스 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="b83f5e1029e1f8968df11b5b3d40ca89fed19fcf" translate="yes" xml:space="preserve">
          <source>Always take care to add the &lt;code&gt;$argv&lt;/code&gt; variable to the list of parameters to the wrapped command. This makes sure that if the user specifies any additional parameters to the function, they are passed on to the underlying command.</source>
          <target state="translated">항상 &lt;code&gt;$argv&lt;/code&gt; 변수를 랩핑 된 명령의 매개 변수 목록에 추가하십시오 . 이를 통해 사용자가 함수에 추가 매개 변수를 지정하면 기본 명령으로 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="c6698f2ed87e85285db0bd4dfe6d91201b04dda0" translate="yes" xml:space="preserve">
          <source>An RGB value with three or six hex digits, such as A0FF33 or f2f can be used. &lt;code&gt;fish&lt;/code&gt; will choose the closest supported color. A three digit value is equivalent to specifying each digit twice; e.g., &lt;code&gt;set_color 2BC&lt;/code&gt; is the same as &lt;code&gt;set_color 22BBCC&lt;/code&gt;. Hexadecimal RGB values can be in lower or uppercase. Depending on the capabilities of your terminal (and the level of support &lt;code&gt;set_color&lt;/code&gt; has for it) the actual color may be approximated by a nearby matching reserved color name or &lt;code&gt;set_color&lt;/code&gt; may not have an effect on color. A second color may be given as a desired fallback color. e.g. &lt;code&gt;set_color 124212&lt;/code&gt;&lt;em&gt;brblue&lt;/em&gt; will instruct set_color to use &lt;em&gt;brblue&lt;/em&gt; if a terminal is not capable of the exact shade of grey desired. This is very useful when an 8 or 16 color terminal might otherwise not use a color.</source>
          <target state="translated">A0FF33 또는 f2f와 같이 3 자리 또는 6 개의 16 진수가있는 RGB 값을 사용할 수 있습니다. &lt;code&gt;fish&lt;/code&gt; 는 가장 가까운 지원 색상을 선택합니다. 3 자리 숫자 값은 각 숫자를 두 번 지정하는 것과 같습니다. 예를 들어 &lt;code&gt;set_color 2BC&lt;/code&gt; 는 &lt;code&gt;set_color 22BBCC&lt;/code&gt; 와 동일 합니다. 16 진 RGB 값은 소문자 또는 대문자 일 수 있습니다. 터미널의 기능 (및 &lt;code&gt;set_color&lt;/code&gt; 의 지원 수준 )에 따라 실제 색상은 근처에 일치하는 예약 된 색상 이름에 의해 근사되거나 &lt;code&gt;set_color&lt;/code&gt; 는 색상에 영향을 미치지 않을 수 있습니다. 원하는 폴백 컬러로서 제 2 컬러가 주어질 수있다. 예 : &lt;code&gt;set_color 124212&lt;/code&gt; &lt;em&gt;brblue&lt;/em&gt; 는 set_color에 brblue를 사용하도록 &lt;em&gt;지시합니다.&lt;/em&gt;터미널이 원하는 정확한 회색 음영을 만들 수없는 경우 이것은 8 또는 16 색 터미널이 다른 색을 사용할 수 없을 때 매우 유용합니다.</target>
        </trans-unit>
        <trans-unit id="42927afb9c7caf7b6c8ddab65a5441b4f933c6dc" translate="yes" xml:space="preserve">
          <source>An ampersand (&lt;code&gt;&amp;amp;&lt;/code&gt;) followed by the number of another file descriptor. The output will be written to that file descriptor instead.</source>
          <target state="translated">앰퍼샌드 ( &lt;code&gt;&amp;amp;&lt;/code&gt; ) 뒤에 다른 파일 설명자 번호가옵니다. 대신 출력이 해당 파일 설명자에 기록됩니다.</target>
        </trans-unit>
        <trans-unit id="f71943b897ee254dbdc1a97522da125ee417b99e" translate="yes" xml:space="preserve">
          <source>An ampersand followed by a minus sign (&lt;code&gt;&amp;amp;-&lt;/code&gt;). The file descriptor will be closed.</source>
          <target state="translated">앰퍼샌드 뒤에 빼기 부호 ( &lt;code&gt;&amp;amp;-&lt;/code&gt; )가 옵니다 . 파일 디스크립터가 닫힙니다.</target>
        </trans-unit>
        <trans-unit id="feaaca65392fda02c163012d9378b2dddb326e82" translate="yes" xml:space="preserve">
          <source>An example of a file redirection is &lt;code&gt;echo hello &amp;gt; output.txt&lt;/code&gt;, which directs the output of the echo command to the file output.txt.</source>
          <target state="translated">파일 리디렉션의 예는 &lt;code&gt;echo hello &amp;gt; output.txt&lt;/code&gt; 이며 echo 명령의 출력을 output.txt 파일로 보냅니다.</target>
        </trans-unit>
        <trans-unit id="8bcd9af34fdfabd4b79f9b66b86a1699d04abe42" translate="yes" xml:space="preserve">
          <source>And history too. Type a command once, and you can re-summon it by just typing a few letters:</source>
          <target state="translated">그리고 역사도. 명령을 한 번 입력하면 몇 글자 만 입력하면 다시 소환 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0b0fd5cdb40b4cfe992f552884b592eda469a0f9" translate="yes" xml:space="preserve">
          <source>And some other things:</source>
          <target state="translated">그리고 다른 것들 :</target>
        </trans-unit>
        <trans-unit id="561f19ae7fb03ebfc67b782db126853cbbf6f6cb" translate="yes" xml:space="preserve">
          <source>And these will exit non-zero:</source>
          <target state="translated">그리고 이들은 0이 아닌 것을 종료합니다 :</target>
        </trans-unit>
        <trans-unit id="b40c5f88db8dfb0b9bfe4851375485b84d5f21ba" translate="yes" xml:space="preserve">
          <source>And this will open a random picture from any of the subdirectories:</source>
          <target state="translated">그러면 하위 디렉토리에서 임의의 그림이 열립니다.</target>
        </trans-unit>
        <trans-unit id="e8bcc5afa939d9420d0774b5e38828f941829c98" translate="yes" xml:space="preserve">
          <source>Any file descriptor can be directed to a different output than its default through a simple mechanism called a redirection.</source>
          <target state="translated">리디렉션이라고하는 간단한 메커니즘을 통해 모든 파일 설명자를 기본값과 다른 출력으로 보낼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c2f3a230563fd5c0b1186bad49a4d25468f2d9d1" translate="yes" xml:space="preserve">
          <source>Any file descriptor can be redirected in an arbitrary way by prefixing the redirection with the file descriptor.</source>
          <target state="translated">모든 파일 디스크립터는 파일 디스크립터로 경로를 재지 정하여 임의의 방식으로 경로 재 지정 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6ce2360486723d855cffc7d0ddbf62842f609b07" translate="yes" xml:space="preserve">
          <source>Arguments beginning with &lt;code&gt;-&lt;/code&gt; are normally interpreted as switches; &lt;code&gt;--&lt;/code&gt; causes the following arguments not to be treated as switches even if they begin with &lt;code&gt;-&lt;/code&gt;. Switches and required arguments are recognized only on the command line.</source>
          <target state="translated">&lt;code&gt;-&lt;/code&gt; 로 시작하는 인수 는 일반적으로 스위치로 해석됩니다. &lt;code&gt;--&lt;/code&gt; 다음 인수가 &lt;code&gt;-&lt;/code&gt; 로 시작하더라도 스위치로 취급되지 않도록합니다 . 스위치와 필수 인수는 명령 줄에서만 인식됩니다.</target>
        </trans-unit>
        <trans-unit id="b90cc9bfd23567a2ff5ba1f00e7c63ca6da8755e" translate="yes" xml:space="preserve">
          <source>Arrays</source>
          <target state="translated">Arrays</target>
        </trans-unit>
        <trans-unit id="156a75280e065fb5a6b979a2a60062b81d648631" translate="yes" xml:space="preserve">
          <source>As a special case, &lt;code&gt;cd .&lt;/code&gt; is equivalent to &lt;code&gt;cd $PWD&lt;/code&gt;, which is useful in cases where a mountpoint has been recycled or a directory has been removed and recreated.</source>
          <target state="translated">특별한 경우 &lt;code&gt;cd .&lt;/code&gt; &lt;code&gt;cd $PWD&lt;/code&gt; 와 동일합니다 . 이는 마운트 포인트가 재활용되거나 디렉토리가 제거되어 재 작성된 경우에 유용합니다.</target>
        </trans-unit>
        <trans-unit id="20487db156547ac9b0f8f6cda4758b76bf576cc9" translate="yes" xml:space="preserve">
          <source>As in any modern shell, the Up arrow, &lt;b&gt;&amp;uarr;&lt;/b&gt; recalls whole lines, starting from the last line executed. A single press replaces &quot;!!&quot;, later presses replace &quot;!-3&quot; and the like.</source>
          <target state="translated">현대 쉘에서와 같이 위쪽 화살표 ( &lt;b&gt;&amp;uarr;)&lt;/b&gt; 는 마지막 행부터 시작하여 전체 행을 &lt;b&gt;호출&lt;/b&gt; 합니다. 한 번의 누르기는 &quot;!!&quot;를 대체하고 나중에 누르는 것은 &quot;! -3&quot;등을 대체합니다.</target>
        </trans-unit>
        <trans-unit id="67ab2336a0f60cb48a293dcf13625cec05689fb2" translate="yes" xml:space="preserve">
          <source>As mentioned in &lt;a href=&quot;#tut_semicolon&quot;&gt;the section on the semicolon&lt;/a&gt;, this can also be written in multiple lines, like so:</source>
          <target state="translated">&lt;a href=&quot;#tut_semicolon&quot;&gt;세미콜론 섹션에서&lt;/a&gt; 언급했듯이 다음과 같이 여러 줄로 쓸 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="a52775e74dd1367202ccdfebc63ffe15c3fc2a94" translate="yes" xml:space="preserve">
          <source>Autoloading Functions</source>
          <target state="translated">자동 로딩 기능</target>
        </trans-unit>
        <trans-unit id="4824104c7854d679befc6d384e2b164a387c5851" translate="yes" xml:space="preserve">
          <source>Autoloading also won't work for &lt;a href=&quot;#event&quot;&gt;event handlers&lt;/a&gt;, since fish cannot know that a function is supposed to be executed when an event occurs when it hasn't yet loaded the function. See the &lt;a href=&quot;#event&quot;&gt;event handlers&lt;/a&gt; section for more information.</source>
          <target state="translated">이벤트가 아직 함수를로드하지 않았을 때 이벤트가 발생할 때 함수가 실행되어야한다는 것을 물고기가 알 수 없기 때문에 자동로드는 &lt;a href=&quot;#event&quot;&gt;이벤트 핸들러&lt;/a&gt; 에서도 작동 하지 않습니다. 자세한 정보는 &lt;a href=&quot;#event&quot;&gt;이벤트 핸들러&lt;/a&gt; 섹션을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="95c7d742338312cc72973984211afee4d64d688a" translate="yes" xml:space="preserve">
          <source>Autoloading functions</source>
          <target state="translated">자동 로딩 기능</target>
        </trans-unit>
        <trans-unit id="37ebd68a9ad79a75d4984b197d8be79759e981aa" translate="yes" xml:space="preserve">
          <source>Autoloading is not applicable to functions created by the &lt;code&gt;alias&lt;/code&gt; command. For functions simple enough that you prefer to use the &lt;code&gt;alias&lt;/code&gt; command to define them you'll need to put those commands in your &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt; script or some other script run when the shell starts.</source>
          <target state="translated">&lt;code&gt;alias&lt;/code&gt; 명령으로 작성된 기능에는 자동 로딩을 적용 할 수 없습니다 . &lt;code&gt;alias&lt;/code&gt; 명령을 사용하여이를 정의하기 를 선호 할만큼 충분히 간단한 기능을 사용하려면 &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt; 스크립트 또는 쉘이 시작될 때 실행되는 다른 스크립트 에 해당 명령을 넣어야 합니다.</target>
        </trans-unit>
        <trans-unit id="220cc2eeb742925687ae3d99a850d4e272eba270" translate="yes" xml:space="preserve">
          <source>Autoloading isn't applicable to aliases. Since, by definition, the function is created at the time the alias command is executed. You cannot autoload aliases.</source>
          <target state="translated">자동로드는 별칭에 적용 할 수 없습니다. 정의에 따라 별명 명령이 실행될 때 함수가 작성되기 때문입니다. 별칭을 자동로드 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="7833f645e87e9d8459033a17299c17f343cc6bd7" translate="yes" xml:space="preserve">
          <source>Automatically loaded functions cannot be removed using &lt;code&gt;functions -e&lt;/code&gt;. Either remove the definition file or change the $fish_function_path variable to remove autoloaded functions.</source>
          <target state="translated">&lt;code&gt;functions -e&lt;/code&gt; 사용하여 자동으로로드 된 기능을 제거 할 수 없습니다 . 정의 파일을 제거하거나 $ fish_function_path 변수를 변경하여 자동로드 된 기능을 제거하십시오.</target>
        </trans-unit>
        <trans-unit id="08b275b23c8db0abd0fd47a8278bb4a362d42dd2" translate="yes" xml:space="preserve">
          <source>Autosuggestions</source>
          <target state="translated">Autosuggestions</target>
        </trans-unit>
        <trans-unit id="a97c1fe699de2b5c57693a4ec6fbf5427cf3afca" translate="yes" xml:space="preserve">
          <source>Autosuggestions are a powerful way to quickly summon frequently entered commands, by typing the first few characters. They are also an efficient technique for navigating through directory hierarchies.</source>
          <target state="translated">자동 제안은 처음 몇 문자를 입력하여 자주 입력하는 명령을 빠르게 소환하는 강력한 방법입니다. 또한 디렉토리 계층 구조를 탐색하는 효율적인 기술입니다.</target>
        </trans-unit>
        <trans-unit id="efb359fec2a662dc1a33a02af7733ec339aa7947" translate="yes" xml:space="preserve">
          <source>Back to &lt;a href=&quot;index#toc-commands&quot;&gt;command index&lt;/a&gt;.</source>
          <target state="translated">위로 &lt;a href=&quot;index#toc-commands&quot;&gt;명령 인덱스&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="b6d421870c8ff86f5929b69f93de50dd0a6ad8a4" translate="yes" xml:space="preserve">
          <source>Background jobs</source>
          <target state="translated">백그라운드 작업</target>
        </trans-unit>
        <trans-unit id="aef1ee8a9d6b03ca3f008e7820b03d1764d158f0" translate="yes" xml:space="preserve">
          <source>Be careful when you try to use braces to separate variable names from text. The problem shown above can be avoided by wrapping the variable in double quotes instead of braces (&lt;code&gt;echo &quot;$c&quot;word&lt;/code&gt;).</source>
          <target state="translated">중괄호를 사용하여 변수 이름을 텍스트와 구분하려고 할 때주의하십시오. 위에 표시된 문제는 변수를 중괄호 대신 큰 따옴표로 묶어 피할 수 있습니다 ( &lt;code&gt;echo &quot;$c&quot;word&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="7feaea8ff9fd56c39af0c7242d19cfc491332827" translate="yes" xml:space="preserve">
          <source>Because history substitution is an awkward interface that was invented before interactive line editing was even possible. Fish drops it in favor of perfecting the interactive history recall interface. Switching requires a small change of habits: if you want to modify an old line/word, first recall it, then edit. E.g. don't type &quot;sudo !!&quot; - first press Up, then Home, then type &quot;sudo &quot;.</source>
          <target state="translated">히스토리 대체는 대화식 라인 편집이 가능하기 전에 발명 된 어색한 인터페이스이기 때문입니다. 물고기는 대화 형 기록 리콜 인터페이스를 완성하기 위해 그것을 떨어 뜨립니다. 전환하려면 약간의 습관이 필요합니다. 이전 줄 / 단어를 수정하려면 먼저 불러 온 후 편집하십시오. 예를 들어 &quot;sudo !!&quot;를 입력하지 마십시오 -먼저 위로를 누른 다음 홈을 누른 다음 &quot;sudo&quot;를 입력하십시오.</target>
        </trans-unit>
        <trans-unit id="6e2b48e7cf5a31dcb784896532986617c1886b80" translate="yes" xml:space="preserve">
          <source>Because this test is a shell builtin and not a standalone utility, using the -c flag on a special file descriptors like standard input and output may not return the same result when invoked from within a pipe as one would expect when invoking the &lt;code&gt;test&lt;/code&gt; utility in another shell.</source>
          <target state="translated">이 테스트는 독립형 유틸리티가 아닌 쉘 내장이기 때문에 표준 입력 및 출력과 같은 특수 파일 디스크립터에서 -c 플래그를 사용하면 파이프 내에서 호출 될 때 &lt;code&gt;test&lt;/code&gt; 유틸리티를 호출 할 때 예상하는 것과 동일한 결과를 리턴하지 않을 수 있습니다 . 다른 껍질.</target>
        </trans-unit>
        <trans-unit id="2c0a4626f95b4339163a76408544aca1706ad80a" translate="yes" xml:space="preserve">
          <source>Both command substitution and shell variable expansion support accessing only specific items by providing a set of indices in square brackets. It's often needed to access a sequence of elements. To do this, use the range operator '&lt;code&gt;..&lt;/code&gt;' for this. A range '&lt;code&gt;a..b&lt;/code&gt;', where range limits 'a' and 'b' are integer numbers, is expanded into a sequence of indices '&lt;code&gt;a a+1 a+2 ... b&lt;/code&gt;' or '&lt;code&gt;a a-1 a-2 ... b&lt;/code&gt;' depending on which of 'a' or 'b' is higher. The negative range limits are calculated from the end of the array or command substitution. Note that invalid indexes for either end are silently clamped to one or the size of the array as appropriate.</source>
          <target state="translated">명령 대체 및 쉘 변수 확장은 대괄호 안에 인덱스 세트를 제공하여 특정 항목에만 액세스 할 수 있도록 지원합니다. 일련의 요소에 액세스해야하는 경우가 종종 있습니다. 이렇게하려면 범위 연산자 ' &lt;code&gt;..&lt;/code&gt; '를 사용하십시오. 범위 한계 'a'와 'b'가 정수인 범위 ' &lt;code&gt;a..b&lt;/code&gt; '는 일련의 인덱스 ' &lt;code&gt;a a+1 a+2 ... b&lt;/code&gt; '또는 ' &lt;code&gt;a a-1 a-2 ... b&lt;/code&gt; '는'a '또는'b '중 더 높은 것에 따라 다릅니다. 음의 범위 한계는 배열의 끝 또는 명령 대체에서 계산됩니다. 한쪽 끝의 유효하지 않은 인덱스는 적절하게 배열의 크기 나 크기에 자동으로 고정됩니다.</target>
        </trans-unit>
        <trans-unit id="75ffa6a25ecf8db0b72541843389d9eaf8b53a19" translate="yes" xml:space="preserve">
          <source>Both integers and floating point numbers are supported.</source>
          <target state="translated">정수와 부동 소수점 숫자가 모두 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="a427d5ed7ae29cac94543768854841dc58975513" translate="yes" xml:space="preserve">
          <source>Both the &lt;code&gt;match&lt;/code&gt; and &lt;code&gt;replace&lt;/code&gt; subcommand support regular expressions when used with the &lt;code&gt;-r&lt;/code&gt; or &lt;code&gt;--regex&lt;/code&gt; option. The dialect is that of PCRE2.</source>
          <target state="translated">둘 다 &lt;code&gt;match&lt;/code&gt; 와 &lt;code&gt;replace&lt;/code&gt; 함께 사용하면 하위 명령 지원 정규 표현식을 &lt;code&gt;-r&lt;/code&gt; 또는 &lt;code&gt;--regex&lt;/code&gt; 옵션을 선택합니다. 방언은 PCRE2의 방언입니다.</target>
        </trans-unit>
        <trans-unit id="511cb46636e15b326ac52fc0e55d4fdd22eb3466" translate="yes" xml:space="preserve">
          <source>Brace expansion</source>
          <target state="translated">버팀대 확장</target>
        </trans-unit>
        <trans-unit id="b2b396ea7eca30ae26382239ecff257585cae7ee" translate="yes" xml:space="preserve">
          <source>Bracket expansion</source>
          <target state="translated">브래킷 확장</target>
        </trans-unit>
        <trans-unit id="b82bb93621eea3789efc2e789761d65a7d589377" translate="yes" xml:space="preserve">
          <source>Builtin commands</source>
          <target state="translated">내장 명령</target>
        </trans-unit>
        <trans-unit id="3d71f7e1b353d405d0ac11988a391e51c106c8d8" translate="yes" xml:space="preserve">
          <source>But this is not:</source>
          <target state="translated">그러나 이것은 아닙니다 :</target>
        </trans-unit>
        <trans-unit id="48c59a6753b3cfab58dea49a5311a9139ab88123" translate="yes" xml:space="preserve">
          <source>By default interactive commands are logged to &lt;code&gt;$XDG_DATA_HOME/fish/fish_history&lt;/code&gt; (typically &lt;code&gt;~/.local/share/fish/fish_history&lt;/code&gt;).</source>
          <target state="translated">기본적으로 대화식 명령은 &lt;code&gt;$XDG_DATA_HOME/fish/fish_history&lt;/code&gt; (일반적으로 &lt;code&gt;~/.local/share/fish/fish_history&lt;/code&gt; )에 기록됩니다.</target>
        </trans-unit>
        <trans-unit id="32d73806ca1d3aebeb76dd86671a3241e81f5c68" translate="yes" xml:space="preserve">
          <source>By default, Fish searches the following for completions, using the first available file that it finds:</source>
          <target state="translated">기본적으로 Fish는 찾은 첫 번째 사용 가능한 파일을 사용하여 다음을 완료합니다.</target>
        </trans-unit>
        <trans-unit id="0d8a923544fbc788e85068131f51c4e6a9993b6b" translate="yes" xml:space="preserve">
          <source>By default, Fish searches the following for functions, using the first available file that it finds:</source>
          <target state="translated">기본적으로 Fish는 사용 가능한 첫 번째 파일을 사용하여 다음 기능을 검색합니다.</target>
        </trans-unit>
        <trans-unit id="315b1092a86cf296a40f2822b51753c337ac1521" translate="yes" xml:space="preserve">
          <source>By default, the output is as a float with trailing zeroes trimmed. To get a fixed representation, the &lt;code&gt;--scale&lt;/code&gt; option can be used, including &lt;code&gt;--scale=0&lt;/code&gt; for integer output.</source>
          <target state="translated">기본적으로 출력은 후행 0이 트림 된 부동 소수점입니다. 고정 표현을 얻으려면 정수 출력에 &lt;code&gt;--scale=0&lt;/code&gt; 을 포함 하여 &lt;code&gt;--scale&lt;/code&gt; 옵션을 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="db7a1b873a6bb02030899acd0c28b71468ea0843" translate="yes" xml:space="preserve">
          <source>By defining the &lt;code&gt;fish_breakpoint_prompt&lt;/code&gt; function, the user can choose a custom prompt when asking for input in response to a &lt;code&gt;breakpoint&lt;/code&gt; command. The &lt;code&gt;fish_breakpoint_prompt&lt;/code&gt; function is executed when the prompt is to be shown, and the output is used as a prompt.</source>
          <target state="translated">&lt;code&gt;fish_breakpoint_prompt&lt;/code&gt; 함수 를 정의하여 사용자는 &lt;code&gt;breakpoint&lt;/code&gt; 명령 에 대한 응답으로 입력을 요청할 때 사용자 정의 프롬프트를 선택할 수 있습니다 . &lt;code&gt;fish_breakpoint_prompt&lt;/code&gt; 기능은 메시지가 표시 할 때 실행되고, 출력은 메시지로 사용된다.</target>
        </trans-unit>
        <trans-unit id="be6b595ea352dde32c38a4fa33c350b05d798766" translate="yes" xml:space="preserve">
          <source>By defining the &lt;code&gt;fish_prompt&lt;/code&gt; function, the user can choose a custom prompt. The &lt;code&gt;fish_prompt&lt;/code&gt; function is executed when the prompt is to be shown, and the output is used as a prompt.</source>
          <target state="translated">&lt;code&gt;fish_prompt&lt;/code&gt; 기능 을 정의하여 사용자는 사용자 정의 프롬프트를 선택할 수 있습니다. &lt;code&gt;fish_prompt&lt;/code&gt; 기능은 메시지가 표시 할 때 실행되고, 출력은 메시지로 사용된다.</target>
        </trans-unit>
        <trans-unit id="630303d4e2fa4b039b2b6a8e3e8b5957dc1783d2" translate="yes" xml:space="preserve">
          <source>By ending a command with the &lt;code&gt;&amp;amp;&lt;/code&gt; (ampersand) symbol, the user tells &lt;code&gt;fish&lt;/code&gt; to put the specified command into the background. A background process will be run simultaneous with &lt;code&gt;fish&lt;/code&gt;. &lt;code&gt;fish&lt;/code&gt; will retain control of the terminal, so the program will not be able to read from the keyboard.</source>
          <target state="translated">&lt;code&gt;&amp;amp;&lt;/code&gt; (앰퍼샌드) 기호 로 명령을 끝내면 사용자는 &lt;code&gt;fish&lt;/code&gt; 에게 지정된 명령을 백그라운드에 넣도록 지시합니다. 백그라운드 프로세스는 &lt;code&gt;fish&lt;/code&gt; 와 동시에 실행됩니다 . &lt;code&gt;fish&lt;/code&gt; 는 터미널의 제어권을 유지하므로 프로그램은 키보드에서 읽을 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="02079690d5cebbe350c1aa5604a81e7a19265022" translate="yes" xml:space="preserve">
          <source>By inserting a backslash (&lt;code&gt;\&lt;/code&gt;) character before pressing the &lt;b&gt;Enter&lt;/b&gt; key, escaping the newline.</source>
          <target state="translated">&lt;b&gt;Enter&lt;/b&gt; 키 를 누르기 전에 백 슬래시 ( &lt;code&gt;\&lt;/code&gt; ) 문자 를 삽입 하여 줄 바꿈을 피하십시오.&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="5663475279a3c781c24c4811471a2f176e1db991" translate="yes" xml:space="preserve">
          <source>By pressing &lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;&amp;uarr;&lt;/b&gt; and &lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;&amp;darr;&lt;/b&gt;, a history search is also performed, but instead of searching for a complete commandline, each commandline is broken into separate elements just like it would be before execution, and the history is searched for an element matching that under the cursor.</source>
          <target state="translated">누르면 &lt;em&gt;Alt 키&lt;/em&gt; - &lt;b&gt;&amp;uarr;&lt;/b&gt; 및 &lt;em&gt;Alt 키&lt;/em&gt; - &lt;b&gt;&amp;darr;&lt;/b&gt; 이력 검색도으나 전체 커맨드를 검색의 수행을, 각각의 커맨드는 그 실행 전에 것처럼 별도의 요소로 분할되고, 기록이 소자 매칭 검색된 커서 아래에 있습니다.</target>
        </trans-unit>
        <trans-unit id="894ba850efc456224525f2c8a25b95199c183915" translate="yes" xml:space="preserve">
          <source>By pressing &lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;Z&lt;/b&gt;, the user stops a currently running foreground program and returns control to &lt;code&gt;fish&lt;/code&gt;. Some programs do not support this feature, or remap it to another key. GNU Emacs uses &lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;X&lt;/b&gt;&lt;b&gt;z&lt;/b&gt; to stop running.</source>
          <target state="translated">&lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;Z&lt;/b&gt; 를 누르면 사용자는 현재 실행중인 포 그라운드 프로그램을 중지하고 제어를 &lt;code&gt;fish&lt;/code&gt; 되돌 립니다. 일부 프로그램은이 기능을 지원하지 않거나 다른 키로 다시 매핑합니다. GNU Emacs는 &lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;X &lt;/b&gt;&lt;b&gt;z&lt;/b&gt; 를 사용 하여 실행을 중지합니다.</target>
        </trans-unit>
        <trans-unit id="24eaf089af6a9daa271f7a6b0f06e6709ca1da8e" translate="yes" xml:space="preserve">
          <source>By using one of the event handler switches, a function can be made to run automatically at specific events. The user may generate new events using the &lt;a href=&quot;#emit&quot;&gt;emit&lt;/a&gt; builtin. Fish generates the following named events:</source>
          <target state="translated">이벤트 핸들러 스위치 중 하나를 사용하면 특정 이벤트에서 자동으로 기능을 실행할 수 있습니다. 사용자는 &lt;a href=&quot;#emit&quot;&gt;emit&lt;/a&gt; 내장 기능을 사용하여 새로운 이벤트를 생성 할 수 있습니다 . Fish는 다음과 같은 명명 된 이벤트를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="8da67926c227ce4e24b10b06e71944960277e706" translate="yes" xml:space="preserve">
          <source>By using the &lt;a href=&quot;commands#fg&quot;&gt;&lt;code&gt;fg&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;commands#bg&quot;&gt;&lt;code&gt;bg&lt;/code&gt;&lt;/a&gt; builtin commands, the user can send any currently running job into the foreground or background.</source>
          <target state="translated">&lt;a href=&quot;commands#fg&quot;&gt; &lt;code&gt;fg&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;commands#bg&quot;&gt; &lt;code&gt;bg&lt;/code&gt; &lt;/a&gt; 내장 명령 을 사용하면 현재 실행중인 작업을 포 그라운드 또는 백그라운드로 보낼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1b6aff63c75bb0bffcdb7bfed5216e186365ff61" translate="yes" xml:space="preserve">
          <source>Cartesian Products</source>
          <target state="translated">직교 제품</target>
        </trans-unit>
        <trans-unit id="da6418309e4149798278c2a545077667f8bdc404" translate="yes" xml:space="preserve">
          <source>Causes &lt;code&gt;fish&lt;/code&gt; to exit when &lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;D&lt;/b&gt; is pressed.</source>
          <target state="translated">원인 &lt;code&gt;fish&lt;/code&gt; 때 출구 &lt;em&gt;제어&lt;/em&gt; - &lt;b&gt;D를&lt;/b&gt; 누르면됩니다.</target>
        </trans-unit>
        <trans-unit id="bcaa33a7ae44bd5042c37a9cdbea7f843b1cf7c8" translate="yes" xml:space="preserve">
          <source>Caveats</source>
          <target state="translated">Caveats</target>
        </trans-unit>
        <trans-unit id="c8b1d49fdfd53112a6dec6dbd017336ac207e99e" translate="yes" xml:space="preserve">
          <source>Change the value of the variable &lt;code&gt;fish_greeting&lt;/code&gt; or create a &lt;code&gt;fish_greeting&lt;/code&gt; function. For example, to remove the greeting use:</source>
          <target state="translated">변수 &lt;code&gt;fish_greeting&lt;/code&gt; 의 값을 변경 하거나 &lt;code&gt;fish_greeting&lt;/code&gt; 함수를 작성하십시오 . 예를 들어 인사말을 제거하려면 다음을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="f3de89fbff6985c921affb37ab3ad59fbe48b95c" translate="yes" xml:space="preserve">
          <source>Change your default shell to fish with:</source>
          <target state="translated">다음을 사용하여 기본 쉘을 생선으로 변경하십시오.</target>
        </trans-unit>
        <trans-unit id="122ab61fb2390b34bf8bb07c44168363d5d992db" translate="yes" xml:space="preserve">
          <source>Character classes, some of the more important:</source>
          <target state="translated">캐릭터 클래스, 더 중요한 것 :</target>
        </trans-unit>
        <trans-unit id="1aafc3262722e98fb6adb1e17c5cec1e303396d2" translate="yes" xml:space="preserve">
          <source>Combiners (And, Or, Not)</source>
          <target state="translated">결합기 (And, Or, Not)</target>
        </trans-unit>
        <trans-unit id="b6709a8adcdc85a8bf2a1db551231443bd8370ba" translate="yes" xml:space="preserve">
          <source>Combining different expansions</source>
          <target state="translated">다른 확장을 결합</target>
        </trans-unit>
        <trans-unit id="9625ac94507491a715e0ffe2602f1661a6b23708" translate="yes" xml:space="preserve">
          <source>Command Substitutions</source>
          <target state="translated">명령 대체</target>
        </trans-unit>
        <trans-unit id="83637571c7cadd0f3ed544a2316197ea7b780571" translate="yes" xml:space="preserve">
          <source>Command line editor</source>
          <target state="translated">명령 줄 편집기</target>
        </trans-unit>
        <trans-unit id="0bb0bf3bb5581e18abbaa7de52785c4cc0e3a748" translate="yes" xml:space="preserve">
          <source>Command mode</source>
          <target state="translated">명령 모드</target>
        </trans-unit>
        <trans-unit id="a2bd119306b51a92961511ebb58609c5dd727601" translate="yes" xml:space="preserve">
          <source>Command mode is also known as normal mode.</source>
          <target state="translated">명령 모드는 일반 모드라고도합니다.</target>
        </trans-unit>
        <trans-unit id="f0cab561b2d1b6a50046aaac51d5900407780ea5" translate="yes" xml:space="preserve">
          <source>Command reference</source>
          <target state="translated">명령 참조</target>
        </trans-unit>
        <trans-unit id="2bbdbfd618344aa7db88dfcb6076ec5fa368eb17" translate="yes" xml:space="preserve">
          <source>Command specific tab-completions in &lt;code&gt;fish&lt;/code&gt; are based on the notion of options and arguments. An option is a parameter which begins with a hyphen, such as '&lt;code&gt;-h&lt;/code&gt;', '&lt;code&gt;-help&lt;/code&gt;' or '&lt;code&gt;--help&lt;/code&gt;'. Arguments are parameters that do not begin with a hyphen. Fish recognizes three styles of options, the same styles as the GNU version of the getopt library. These styles are:</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; 명령 별 탭 완성 은 옵션과 인수의 개념을 기반으로합니다. 옵션은 ' &lt;code&gt;-h&lt;/code&gt; ', ' &lt;code&gt;-help&lt;/code&gt; '또는 ' &lt;code&gt;--help&lt;/code&gt; ' 와 같이 하이픈으로 시작하는 매개 변수입니다 . 인수는 하이픈으로 시작하지 않는 매개 변수입니다. Fish는 GNU 버전의 getopt 라이브러리와 동일한 스타일의 세 가지 옵션을 인식합니다. 이러한 스타일은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="030d4685e9a5967e8a6f3c21ac5fdf12f5dd2ed5" translate="yes" xml:space="preserve">
          <source>Command substitution</source>
          <target state="translated">명령 대체</target>
        </trans-unit>
        <trans-unit id="530a1cffa7ec59af0b705c2ba3cd0b438869485e" translate="yes" xml:space="preserve">
          <source>Command substitutions</source>
          <target state="translated">명령 대체</target>
        </trans-unit>
        <trans-unit id="878863dedc3f406e3a65e48d9a354f6f067ef79a" translate="yes" xml:space="preserve">
          <source>Command substitutions are not expanded within quotes. Instead, you can temporarily close the quotes, add the command substitution, and reopen them, all in the same argument:</source>
          <target state="translated">명령 대체는 따옴표로 확장되지 않습니다. 대신, 따옴표를 임시로 닫고 명령 대체를 추가 한 후 다시 같은 인수로 다시 열 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="71c192adcb09f8e5eb78adbae51c316308911f17" translate="yes" xml:space="preserve">
          <source>Command substitutions found in &lt;code&gt;OPTION_ARGUMENTS&lt;/code&gt; are not expected to return a space-separated list of arguments. Instead they must return a newline-separated list of arguments, and each argument may optionally have a tab character followed by the argument description. Any description provided in this way overrides a description given with &lt;code&gt;-d&lt;/code&gt; or &lt;code&gt;--description&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;OPTION_ARGUMENTS&lt;/code&gt; 에 있는 명령 대체 는 공백으로 구분 된 인수 목록을 리턴하지 않습니다. 대신 개행으로 구분 된 인수 목록을 리턴해야하며, 각 인수는 선택적으로 탭 문자 뒤에 인수 설명이있을 수 있습니다. 이러한 방식으로 제공된 설명은 &lt;code&gt;-d&lt;/code&gt; 또는 &lt;code&gt;--description&lt;/code&gt; 과 함께 제공된 설명보다 우선합니다 .</target>
        </trans-unit>
        <trans-unit id="874c75da73d00d89463a52a5b3bd6b12c296e9c3" translate="yes" xml:space="preserve">
          <source>Command substitutions use the output of one command as an argument to another. Unlike other shells, &lt;code&gt;fish&lt;/code&gt; does not use backticks ` for command substitutions. Instead, it uses parentheses:</source>
          <target state="translated">명령 대체는 한 명령의 출력을 다른 명령의 인수로 사용합니다. 다른 껍질과 달리 &lt;code&gt;fish&lt;/code&gt; 는 명령 대체에 백틱을 사용하지 않습니다. 대신 괄호를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="45e5f3f72e961cb70134ba35f7a27a9620e515f7" translate="yes" xml:space="preserve">
          <source>Commands</source>
          <target state="translated">Commands</target>
        </trans-unit>
        <trans-unit id="bf9c7a7be3e1f3bbb8b332baec1b3308eba8941c" translate="yes" xml:space="preserve">
          <source>Commands and parameters are separated by the space character ' '. Every command ends with either a newline (i.e. by pressing the return key) or a semicolon '&lt;code&gt;;&lt;/code&gt;'. More than one command can be written on the same line by separating them with semicolons.</source>
          <target state="translated">명령과 매개 변수는 공백 문자 ''로 구분됩니다. 모든 명령은 개행 (즉, 리턴 키를 누름) 또는 세미콜론으로 끝나야합니다 &lt;code&gt;;&lt;/code&gt; '. 세미콜론으로 구분하여 같은 줄에 둘 이상의 명령을 쓸 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1c09ac3482bfc9b09262d71ce2a3754d63bdebcd" translate="yes" xml:space="preserve">
          <source>Commands can be chained with semicolons.</source>
          <target state="translated">세미콜론으로 명령을 연결할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7d648a6dff363974f754bb78876c2b10dadd8183" translate="yes" xml:space="preserve">
          <source>Compatibility notes</source>
          <target state="translated">호환성 노트</target>
        </trans-unit>
        <trans-unit id="af799f168326079cfa5fbcb1f17396cdcd478951" translate="yes" xml:space="preserve">
          <source>Completion of commands (builtins, functions and regular programs).</source>
          <target state="translated">명령 (내장, 기능 및 일반 프로그램) 완료</target>
        </trans-unit>
        <trans-unit id="3e42585f4a363d61f824319c2d4ccdcc434dd210" translate="yes" xml:space="preserve">
          <source>Completion of filenames, even on strings with wildcards such as '&lt;code&gt;*&lt;/code&gt;', '&lt;code&gt;**&lt;/code&gt;' and '&lt;code&gt;?&lt;/code&gt;'.</source>
          <target state="translated">' &lt;code&gt;*&lt;/code&gt; ', ' &lt;code&gt;**&lt;/code&gt; '및 ' 와 같은 와일드 카드가 포함 된 문자열에서도 파일 이름 완성 &lt;code&gt;?&lt;/code&gt; '.</target>
        </trans-unit>
        <trans-unit id="9c40677954f135a6a56c9a9c3b9199834c1a73af" translate="yes" xml:space="preserve">
          <source>Completion of shell variable names.</source>
          <target state="translated">쉘 변수 이름 완성.</target>
        </trans-unit>
        <trans-unit id="15f1e262b91eabd8e311927699155dff284efc75" translate="yes" xml:space="preserve">
          <source>Completion of usernames for tilde expansion.</source>
          <target state="translated">물결표 확장을위한 사용자 이름 완성.</target>
        </trans-unit>
        <trans-unit id="8492522b516edbc0711ffad46d10e7abb03c888a" translate="yes" xml:space="preserve">
          <source>Completions automatically generated from the operating system's manual, usually stored in &lt;code&gt;~/.local/share/fish/generated_completions&lt;/code&gt;.</source>
          <target state="translated">운영 체제 설명서에서 자동으로 생성되며 일반적으로 &lt;code&gt;~/.local/share/fish/generated_completions&lt;/code&gt; 에 저장됩니다 .</target>
        </trans-unit>
        <trans-unit id="77d31de015d4bc8d64c24ea654ff949d735a3c85" translate="yes" xml:space="preserve">
          <source>Completions can be defined on the commandline or in a configuration file, but they can also be automatically loaded. Fish automatically searches through any directories in the array variable &lt;code&gt;$fish_complete_path&lt;/code&gt;, and any completions defined are automatically loaded when needed. A completion file must have a filename consisting of the name of the command to complete and the suffix '&lt;code&gt;.fish&lt;/code&gt;'.</source>
          <target state="translated">명령 줄이나 구성 파일에서 완료를 정의 할 수 있지만 자동으로로드 할 수도 있습니다. Fish는 배열 변수 &lt;code&gt;$fish_complete_path&lt;/code&gt; 의 디렉토리를 자동으로 검색하며 , 정의가 완료되면 필요할 때 자동으로로드됩니다. 완료 파일에는 완료 할 명령 이름과 접미사 ' &lt;code&gt;.fish&lt;/code&gt; ' 로 구성된 파일 이름이 있어야합니다 .</target>
        </trans-unit>
        <trans-unit id="7459a1dd314e140f10e2be4ec65979e72c902ac1" translate="yes" xml:space="preserve">
          <source>Conditional execution of code and flow control</source>
          <target state="translated">코드 및 흐름 제어의 조건부 실행</target>
        </trans-unit>
        <trans-unit id="0d5f4aeff7e3312bef6ba63f6a5b4ba1f78a94cb" translate="yes" xml:space="preserve">
          <source>Conditionals (If, Else, Switch)</source>
          <target state="translated">조건부 (If, Else, Switch)</target>
        </trans-unit>
        <trans-unit id="719fae22a2cd4fb971f775638bdd50f6e63161da" translate="yes" xml:space="preserve">
          <source>Configurable greeting</source>
          <target state="translated">구성 가능한 인사말</target>
        </trans-unit>
        <trans-unit id="f0b58e3b2ee0b9289c02bd1984243913025c6fa6" translate="yes" xml:space="preserve">
          <source>Configuration files are evaluated in the following order:</source>
          <target state="translated">구성 파일은 다음 순서로 평가됩니다.</target>
        </trans-unit>
        <trans-unit id="f4e0d62ab20b29e8432ac06936c92f52d1fc4b42" translate="yes" xml:space="preserve">
          <source>Configuration shipped with fish, which should not be edited, in &lt;code&gt;$__fish_data_dir/config.fish&lt;/code&gt; (usually &lt;code&gt;/usr/share/fish/config.fish&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;$__fish_data_dir/config.fish&lt;/code&gt; (보통 &lt;code&gt;/usr/share/fish/config.fish&lt;/code&gt; ) 에서 편집하지 말아야하는 fish와 함께 제공되는 구성 .</target>
        </trans-unit>
        <trans-unit id="22ff08f353e570d20e5a6366fd00500ccc60eb5a" translate="yes" xml:space="preserve">
          <source>Configuration snippets in files ending in &lt;code&gt;.fish&lt;/code&gt;, in the directories:</source>
          <target state="translated">디렉토리 에서 &lt;code&gt;.fish&lt;/code&gt; 로 끝나는 파일의 구성 스 니펫 :</target>
        </trans-unit>
        <trans-unit id="0f386d7e7881b32fa39cb7b62bdb15c0f3a4c0e1" translate="yes" xml:space="preserve">
          <source>Constants</source>
          <target state="translated">Constants</target>
        </trans-unit>
        <trans-unit id="e3cc27f9da6f6edecf17e1636fab048c5c38faaf" translate="yes" xml:space="preserve">
          <source>Copy and paste (Kill Ring)</source>
          <target state="translated">복사하여 붙여 넣기 (킬 링)</target>
        </trans-unit>
        <trans-unit id="26f56d23fbcc33866ced8719ced9441dcfe31145" translate="yes" xml:space="preserve">
          <source>Copy and paste from outside are also supported, both via the &lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;X&lt;/b&gt; / &lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;V&lt;/b&gt; bindings and via the terminal's paste function, for which fish enables &quot;Bracketed Paste Mode&quot;. When pasting inside single quotes, pasted single quotes and backslashes are automatically escaped so that the result can be used as a single token simply by closing the quote after.</source>
          <target state="translated">&lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;X&lt;/b&gt; / &lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;V&lt;/b&gt; 바인딩과 터미널의 붙여 넣기 기능을 통해 외부에서 복사 및 붙여 넣기가 지원되며, 물고기가 &quot;브래킷 붙여 넣기 모드&quot;를 활성화합니다. 작은 따옴표 안에 붙여 넣을 때 붙여 넣은 작은 따옴표와 백 슬래시는 자동으로 이스케이프되므로 나중에 따옴표를 닫아 결과를 단일 토큰으로 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5f7dd81f0f257215aaa86927e90c28289f61b85c" translate="yes" xml:space="preserve">
          <source>Copying a function using &lt;code&gt;-c&lt;/code&gt; copies only the body of the function, and does not attach any event notifications from the original function.</source>
          <target state="translated">&lt;code&gt;-c&lt;/code&gt; 를 사용하여 함수를 복사하면 함수 의 본문 만 복사되고 원래 함수의 이벤트 알림은 첨부되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="f31494e39f0bc5dcc83282298e8d3d31f1b25880" translate="yes" xml:space="preserve">
          <source>Customizing the name of the history file</source>
          <target state="translated">히스토리 파일 이름 사용자 정의</target>
        </trans-unit>
        <trans-unit id="362f967d51916d26cb3fb3386fd62a1f41da8b5f" translate="yes" xml:space="preserve">
          <source>Debugging fish scripts</source>
          <target state="translated">피쉬 스크립트 디버깅</target>
        </trans-unit>
        <trans-unit id="0d9b8d3822abc3f61828cee574cfdd15ad494e6d" translate="yes" xml:space="preserve">
          <source>Define a single option spec for the boolean help flag:</source>
          <target state="translated">부울 도움말 플래그에 대한 단일 옵션 스펙을 정의하십시오.</target>
        </trans-unit>
        <trans-unit id="e80de1e5ae488060e2716016f7f8aabdda0492f6" translate="yes" xml:space="preserve">
          <source>Defining aliases</source>
          <target state="translated">별칭 정의</target>
        </trans-unit>
        <trans-unit id="a248cf76417fc663be9470cb1f177b04a90df2b1" translate="yes" xml:space="preserve">
          <source>Defining an abbreviation with global scope is slightly faster than universal scope (which is the default). But in general you'll only want to use the global scope when defining abbreviations in a startup script like &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt; like this:</source>
          <target state="translated">전역 범위로 약어를 정의하는 것이 기본 범위 인 범용 범위보다 약간 빠릅니다. 그러나 일반적으로 &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt; 와 같은 시작 스크립트에서 약어를 정의 할 때 전역 범위 만 사용하려고합니다 .</target>
        </trans-unit>
        <trans-unit id="55f8ebc805e65b5b71ddafdae390e3be2bcd69af" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">Description</target>
        </trans-unit>
        <trans-unit id="8d1bc9b98791a1beb71b16bbdb2e8e4cbe2fd1c7" translate="yes" xml:space="preserve">
          <source>Detected errors include:</source>
          <target state="translated">감지 된 오류는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="dee15571e38bfab40555f11f3b66434d50353195" translate="yes" xml:space="preserve">
          <source>Do not append to universal variables in &lt;a href=&quot;index#initialization&quot;&gt;config.fish&lt;/a&gt;, because these variables will then get longer with each new shell instance. Instead, simply set them once at the command line.</source>
          <target state="translated">&lt;a href=&quot;index#initialization&quot;&gt;config.fish의&lt;/a&gt; 범용 변수에는 추가하지 마십시오. 이러한 변수는 각각의 새 쉘 인스턴스마다 더 길어지기 때문입니다. 대신 명령 줄에서 한 번만 설정하면됩니다.</target>
        </trans-unit>
        <trans-unit id="9e9cf3221a30246219863f1d2366e36cb580debc" translate="yes" xml:space="preserve">
          <source>Documentation</source>
          <target state="translated">Documentation</target>
        </trans-unit>
        <trans-unit id="fa4a7a170f7075560c98a976572cae386b13a240" translate="yes" xml:space="preserve">
          <source>E.g.</source>
          <target state="translated">E.g.</target>
        </trans-unit>
        <trans-unit id="5fe4b6029ee0d921705a5109d21de883623ecfe4" translate="yes" xml:space="preserve">
          <source>Each &lt;code&gt;case&lt;/code&gt; command is given one or more parameters. The first &lt;code&gt;case&lt;/code&gt; command with a parameter that matches the string specified in the switch command will be evaluated. &lt;code&gt;case&lt;/code&gt; parameters may contain wildcards. These need to be escaped or quoted in order to avoid regular wildcard expansion using filenames.</source>
          <target state="translated">각 &lt;code&gt;case&lt;/code&gt; 명령에는 하나 이상의 매개 변수가 제공됩니다. 첫번째 &lt;code&gt;case&lt;/code&gt; 스위치 명령에서 지정한 문자열과 일치 매개 변수를 가진 명령이 평가 될 것이다. &lt;code&gt;case&lt;/code&gt; 매개 변수에는 와일드 카드가 포함될 수 있습니다. 파일 이름을 사용하여 규칙적인 와일드 카드 확장을 피하려면 이스케이프 처리하거나 따옴표로 묶어야합니다.</target>
        </trans-unit>
        <trans-unit id="2376e9b5e9f26d5da46eadee722d0d85257f2173" translate="yes" xml:space="preserve">
          <source>Each OPTION_SPEC can be written in the domain specific language &lt;a href=&quot;#argparse-option-specs&quot;&gt;described below&lt;/a&gt; or created using the companion &lt;a href=&quot;#fish-opt&quot;&gt;&lt;code&gt;fish_opt&lt;/code&gt;&lt;/a&gt; command. All OPTION_SPECs must appear after any argparse flags and before the &lt;code&gt;--&lt;/code&gt; that separates them from the arguments to be parsed.</source>
          <target state="translated">각 OPTION_SPEC은 &lt;a href=&quot;#argparse-option-specs&quot;&gt;아래 설명 된&lt;/a&gt; 도메인 특정 언어로 작성되거나 동반 어 &lt;a href=&quot;#fish-opt&quot;&gt; &lt;code&gt;fish_opt&lt;/code&gt; &lt;/a&gt; 명령을 사용하여 작성할 수 있습니다 . 모든 OPTION_SPEC는 argparse 플래그 뒤에 그리고 구문 분석 할 인수와 구분 되는 &lt;code&gt;--&lt;/code&gt; 앞에 나타나야합니다 .</target>
        </trans-unit>
        <trans-unit id="ff6eefef0d522918fc2f6f5c0e0cbad0e9617574" translate="yes" xml:space="preserve">
          <source>Each abbreviation is stored in its own global or universal variable. The name consists of the prefix &lt;code&gt;_fish_abbr_&lt;/code&gt; followed by the WORD after being transformed by &lt;code&gt;string escape style=var&lt;/code&gt;. The WORD cannot contain a space but all other characters are legal.</source>
          <target state="translated">각 약어는 자체 전역 또는 범용 변수에 저장됩니다. 이름은 &lt;code&gt;string escape style=var&lt;/code&gt; 로 변환 된 후 접두사 &lt;code&gt;_fish_abbr_&lt;/code&gt; 와 WORD 로 구성됩니다 . WORD에는 공백이 포함될 수 없지만 다른 모든 문자는 유효합니다.</target>
        </trans-unit>
        <trans-unit id="0057637534d28604b43896d07253a1705495ce04" translate="yes" xml:space="preserve">
          <source>Each option specification is a string composed of</source>
          <target state="translated">각 옵션 사양은 다음과 같이 구성된 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="6f81b2ad5664bf03465a7658ea6e8325e7d4da48" translate="yes" xml:space="preserve">
          <source>Each option that is seen in the ARG list will result in a var name of the form &lt;code&gt;_flag_X&lt;/code&gt;, where &lt;code&gt;X&lt;/code&gt; is the short flag letter and the long flag name. The OPTION_SPEC always requires a short flag even if it can't be used. So there will always be &lt;code&gt;_flag_X&lt;/code&gt; var set using the short flag letter if the corresponding short or long flag is seen. The long flag name var (e.g., &lt;code&gt;_flag_help&lt;/code&gt;) will only be defined, obviously, if the OPTION_SPEC includes a long flag name.</source>
          <target state="translated">ARG 목록에 표시되는 각 옵션은 &lt;code&gt;_flag_X&lt;/code&gt; 형식의 var 이름을 생성합니다 . 여기서 &lt;code&gt;X&lt;/code&gt; 는 짧은 플래그 문자 및 긴 플래그 이름입니다. OPTION_SPEC에는 사용할 수없는 경우에도 항상 짧은 플래그가 필요합니다. 따라서 해당 short 또는 long 플래그가 표시되면 short 플래그 문자를 사용하여 항상 &lt;code&gt;_flag_X&lt;/code&gt; var 세트가 있습니다. 긴 플래그 이름 var (예 : &lt;code&gt;_flag_help&lt;/code&gt; )는 OPTION_SPEC에 긴 플래그 이름이 포함 된 경우에만 정의됩니다.</target>
        </trans-unit>
        <trans-unit id="071ccbc08889857d3dcdf38731f768b6399d8db1" translate="yes" xml:space="preserve">
          <source>Edit the file &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt;, creating it if it does not exist (Note the leading period).</source>
          <target state="translated">&lt;code&gt;~/.config/fish/config.fish&lt;/code&gt; 파일을 편집하여 존재하지 않는 경우 파일을 작성하십시오 (선행 기간 참고).</target>
        </trans-unit>
        <trans-unit id="c2f792ffbea95a6ff2321be7a5cc814288648907" translate="yes" xml:space="preserve">
          <source>Emacs mode commands</source>
          <target state="translated">이맥스 모드 명령</target>
        </trans-unit>
        <trans-unit id="91cbf01f5e4c3a57e74bdd072bfdd05853b57d91" translate="yes" xml:space="preserve">
          <source>Environment variables such as &lt;code&gt;EDITOR&lt;/code&gt; or &lt;code&gt;TZ&lt;/code&gt; can be set universally using &lt;code&gt;set -Ux&lt;/code&gt;. However, if there is an environment variable already set before fish starts (such as by login scripts or system administrators), it is imported into fish as a global variable. The &lt;a href=&quot;index#variables-scope&quot;&gt;variable scopes&lt;/a&gt; are searched from the &quot;inside out&quot;, which means that local variables are checked first, followed by global variables, and finally universal variables.</source>
          <target state="translated">&lt;code&gt;EDITOR&lt;/code&gt; 또는 &lt;code&gt;TZ&lt;/code&gt; 와 같은 환경 변수 는 &lt;code&gt;set -Ux&lt;/code&gt; 를 사용하여 보편적으로 설정할 수 있습니다 . 그러나 물고기를 시작하기 전에 이미 설정 한 환경 변수가있는 경우 (예 : 로그인 스크립트 또는 시스템 관리자 등) 전역 변수로 물고기로 가져옵니다. &lt;a href=&quot;index#variables-scope&quot;&gt;변수 범위는&lt;/a&gt; 글로벌 변수, 마지막 변수 보편적이어서, 로컬 변수들이 먼저 선택되었는지 수단 &quot;뒤집어&quot;에서 검색한다.</target>
        </trans-unit>
        <trans-unit id="91fe509047635fbdbcb723577a02003cc2cfa678" translate="yes" xml:space="preserve">
          <source>Erase the &lt;code&gt;gco&lt;/code&gt; abbreviation.</source>
          <target state="translated">&lt;code&gt;gco&lt;/code&gt; 약어를 삭제하십시오 .</target>
        </trans-unit>
        <trans-unit id="3e13e2405c74a25265ee4e281ccf78feafc5234d" translate="yes" xml:space="preserve">
          <source>Escape Sequences</source>
          <target state="translated">이스케이프 시퀀스</target>
        </trans-unit>
        <trans-unit id="99b19a8ca89a3f1d945ac43f31bfc30845d9b033" translate="yes" xml:space="preserve">
          <source>Escaping characters</source>
          <target state="translated">이스케이프 문자</target>
        </trans-unit>
        <trans-unit id="b5df4081fbed4b9e32929d5db8ab7dee3db26c47" translate="yes" xml:space="preserve">
          <source>Especially powerful is the recursive wildcard ** which searches directories recursively:</source>
          <target state="translated">디렉토리를 재귀 적으로 검색하는 재귀 와일드 카드 **가 특히 강력합니다.</target>
        </trans-unit>
        <trans-unit id="23467b26d86b98db62af718c7193952aae1cc1d7" translate="yes" xml:space="preserve">
          <source>Event blocks should not be confused with code blocks, which are created with &lt;code&gt;begin&lt;/code&gt;, &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt; or &lt;code&gt;for&lt;/code&gt;</source>
          <target state="translated">이벤트 블록을 코드 블록과 혼동해서는 안됩니다. 코드 블록은 &lt;code&gt;begin&lt;/code&gt; , &lt;code&gt;if&lt;/code&gt; , &lt;code&gt;while&lt;/code&gt; 또는 &lt;code&gt;for&lt;/code&gt; 로 생성됩니다</target>
        </trans-unit>
        <trans-unit id="1d0a0bc46dabda5a6dbcf0a2f18e3e9acbc27ae7" translate="yes" xml:space="preserve">
          <source>Event handlers</source>
          <target state="translated">이벤트 핸들러</target>
        </trans-unit>
        <trans-unit id="aa9019553b784d6ddae2179d0e63e658c8aaa8e2" translate="yes" xml:space="preserve">
          <source>Every program on your computer can be used as a command in &lt;code&gt;fish&lt;/code&gt;. If the program file is located in one of the directories in the &lt;a href=&quot;#variables-special&quot;&gt;&lt;code&gt;PATH&lt;/code&gt;&lt;/a&gt;, it is sufficient to type the name of the program to use it. Otherwise the whole filename, including the directory (like &lt;code&gt;/home/me/code/checkers/checkers&lt;/code&gt; or &lt;code&gt;../checkers&lt;/code&gt;) has to be used.</source>
          <target state="translated">컴퓨터의 모든 프로그램은 &lt;code&gt;fish&lt;/code&gt; 명령으로 사용할 수 있습니다 . 프로그램 파일이 &lt;a href=&quot;#variables-special&quot;&gt; &lt;code&gt;PATH&lt;/code&gt; &lt;/a&gt; 의 디렉토리 중 하나에있는 경우 , 사용하기 위해 프로그램 이름을 입력하면 충분합니다. 그렇지 않으면 디렉토리를 포함한 전체 파일 이름 (예 : &lt;code&gt;/home/me/code/checkers/checkers&lt;/code&gt; 또는 &lt;code&gt;../checkers&lt;/code&gt; )을 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="0f01ed56a1e32a05e5ef96e4d779f34784af9a96" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Example</target>
        </trans-unit>
        <trans-unit id="0a06b9ff910c3b825724cca9441830ef76df9a35" translate="yes" xml:space="preserve">
          <source>Example OPTION_SPECs</source>
          <target state="translated">예 OPTION_SPEC</target>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">Example:</target>
        </trans-unit>
        <trans-unit id="39080033040f19165a1f736af78b4c8c529fc254" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;echo Hello 2&amp;gt;output.stderr&lt;/code&gt; writes the standard error (file descriptor 2) of the target program to &lt;code&gt;output.stderr&lt;/code&gt;.</source>
          <target state="translated">예 : &lt;code&gt;echo Hello 2&amp;gt;output.stderr&lt;/code&gt; 상기 대상 프로그램의 표준 오차 (파일 기술자 2) 글 &lt;code&gt;output.stderr&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="eb01bf04c9a0e8a71c45816513df424f1c7ffedb" translate="yes" xml:space="preserve">
          <source>Examples</source>
          <target state="translated">Examples</target>
        </trans-unit>
        <trans-unit id="fb3447b632f6a431215776dcf254a01001a40c4f" translate="yes" xml:space="preserve">
          <source>Examples:</source>
          <target state="translated">Examples:</target>
        </trans-unit>
        <trans-unit id="c8110d9d9732f81a1889221cf14a72d9940e55f1" translate="yes" xml:space="preserve">
          <source>Examples: The default &lt;code&gt;fish&lt;/code&gt; title is</source>
          <target state="translated">예 : 기본 &lt;code&gt;fish&lt;/code&gt; 제목은</target>
        </trans-unit>
        <trans-unit id="6f147bbcdc2ea57f6c81bec669ec536b253dc54b" translate="yes" xml:space="preserve">
          <source>Exit Status</source>
          <target state="translated">종료 상태</target>
        </trans-unit>
        <trans-unit id="1065b589e5e0ae74c7584c46d689bcbb003ff11c" translate="yes" xml:space="preserve">
          <source>Exit status: 0 if at least one match was found, or 1 otherwise.</source>
          <target state="translated">종료 상태 : 일치하는 항목이 하나 이상 있으면 0, 그렇지 않으면 1</target>
        </trans-unit>
        <trans-unit id="b2909c6aa462276dc2976f4590aa354f4c57270d" translate="yes" xml:space="preserve">
          <source>Exit status: 0 if at least one replacement was performed, or 1 otherwise.</source>
          <target state="translated">종료 상태 : 하나 이상의 교체가 수행 된 경우 0, 그렇지 않은 경우 1</target>
        </trans-unit>
        <trans-unit id="f40c28bc81b3ac548eb788aebd329d84f2e392e8" translate="yes" xml:space="preserve">
          <source>Expansions are performed from right to left, nested bracket expansions are performed from the inside and out.</source>
          <target state="translated">확장은 오른쪽에서 왼쪽으로 수행되고 중첩 된 브래킷 확장은 내부 및 외부에서 수행됩니다.</target>
        </trans-unit>
        <trans-unit id="7c7f2508b14ff7696fb2b861af3336c89a128135" translate="yes" xml:space="preserve">
          <source>Exporting variables</source>
          <target state="translated">변수 내보내기</target>
        </trans-unit>
        <trans-unit id="0801a7e9fc76ea024d7fa1606839a9a450923131" translate="yes" xml:space="preserve">
          <source>Exports (Shell Variables)</source>
          <target state="translated">수출 (쉘 변수)</target>
        </trans-unit>
        <trans-unit id="38a8db4fbe3933a6a062a148af12ac9a1f3f9209" translate="yes" xml:space="preserve">
          <source>Expressions can be grouped using parentheses.</source>
          <target state="translated">괄호를 사용하여 표현식을 그룹화 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="50167d66b3a9cf84672e9543b5e003cb2f61fc18" translate="yes" xml:space="preserve">
          <source>Expressions can be inverted using the &lt;code&gt;!&lt;/code&gt; operator:</source>
          <target state="translated">&lt;code&gt;!&lt;/code&gt; 를 사용하여 식을 반전시킬 수 있습니다 . 운영자:</target>
        </trans-unit>
        <trans-unit id="03688ba6aa340b87549088aa5739944cb6b1dc73" translate="yes" xml:space="preserve">
          <source>FAQ</source>
          <target state="translated">FAQ</target>
        </trans-unit>
        <trans-unit id="3c018849599639ed880ecf71dd0372a59354f058" translate="yes" xml:space="preserve">
          <source>Feature flags are how fish stages changes that might break scripts. Breaking changes are introduced as opt-in, in a few releases they become opt-out, and eventually the old behavior is removed.</source>
          <target state="translated">기능 플래그는 스크립트를 손상시킬 수있는 어류 단계 변경 방법입니다. 주요 변경 사항은 옵트 인 (opt-in)으로 도입되고, 일부 릴리스에서는 옵트 아웃 (opt-out)되고 결국 이전 동작이 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="6f3b1d58c2c3684624549238c3096df48948b49f" translate="yes" xml:space="preserve">
          <source>File names beginning with a dot are not considered when wildcarding unless a dot is specifically given as the first character of the file name.</source>
          <target state="translated">점이 파일 이름의 첫 문자로 특별히 지정되지 않으면 와일드 카드를 사용할 때 점으로 시작하는 파일 이름은 고려되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="3030e8ec7633ec1a524bb246aee7dbda6fb3e4bc" translate="yes" xml:space="preserve">
          <source>Fish</source>
          <target state="translated">Fish</target>
        </trans-unit>
        <trans-unit id="5909556c20378f696dc6b5d2bbc3049c7584a774" translate="yes" xml:space="preserve">
          <source>Fish 1.x and 2.x releases relied on the &lt;code&gt;bc&lt;/code&gt; command for handling &lt;code&gt;math&lt;/code&gt; expressions. Starting with fish 3.0.0 fish uses the tinyexpr library and evaluates the expression without the involvement of any external commands.</source>
          <target state="translated">Fish 1.x 및 2.x 릴리스는 &lt;code&gt;math&lt;/code&gt; 표현식 처리를 위해 &lt;code&gt;bc&lt;/code&gt; 명령을 사용했습니다 . fish 3.0.0부터 fish는 tinyexpr 라이브러리를 사용하고 외부 명령을 사용하지 않고 표현을 평가합니다.</target>
        </trans-unit>
        <trans-unit id="d4a3ceecfb0465a0d21d2606941b69ac151cca20" translate="yes" xml:space="preserve">
          <source>Fish &lt;code&gt;ulimit&lt;/code&gt; does not support getting or setting multiple limits in one command, except reporting all values using the -a switch</source>
          <target state="translated">Fish &lt;code&gt;ulimit&lt;/code&gt; 는 -a 스위치를 사용하여 모든 값을보고하는 것을 제외하고 한 명령에서 여러 한계를 가져 오거나 설정하는 것을 지원하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="e7c76c63bac2f3a3dce3482676369a7bd163b6c4" translate="yes" xml:space="preserve">
          <source>Fish &lt;code&gt;ulimit&lt;/code&gt; does not support the &lt;code&gt;-p&lt;/code&gt; option for getting the pipe size. The bash implementation consists of a compile-time check that empirically guesses this number by writing to a pipe and waiting for SIGPIPE. Fish does not do this because it this method of determining pipe size is unreliable. Depending on bash version, there may also be further additional limits to set in bash that do not exist in fish.</source>
          <target state="translated">Fish &lt;code&gt;ulimit&lt;/code&gt; 는 파이프 크기를 얻기 위해 &lt;code&gt;-p&lt;/code&gt; 옵션을 지원하지 않습니다 . bash 구현은 파이프에 쓰고 SIGPIPE를 기다리면서이 숫자를 경험적으로 추측하는 컴파일 타임 검사로 구성됩니다. 물고기는 파이프 크기를 결정하는이 방법이 신뢰할 수 없기 때문에 이것을하지 않습니다. bash 버전에 따라 bash에 설정해야 할 추가 제한이있을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="78c7f05d7bd695376d2e5d1faac7303134fd849d" translate="yes" xml:space="preserve">
          <source>Fish &lt;code&gt;ulimit&lt;/code&gt; supports GNU-style long options for all switches</source>
          <target state="translated">Fish &lt;code&gt;ulimit&lt;/code&gt; 는 모든 스위치에 대해 GNU 스타일의 긴 옵션을 지원합니다</target>
        </trans-unit>
        <trans-unit id="fc7af48505888290815037487d5b7785010a5982" translate="yes" xml:space="preserve">
          <source>Fish also ships a wrapper function around the builtin &lt;code&gt;cd&lt;/code&gt; that understands &lt;code&gt;cd -&lt;/code&gt; as changing to the previous directory. See also &lt;a href=&quot;commands#prevd&quot;&gt;&lt;code&gt;prevd&lt;/code&gt;&lt;/a&gt;. This wrapper function maintains a history of the 25 most recently visited directories in the &lt;code&gt;$dirprev&lt;/code&gt; and &lt;code&gt;$dirnext&lt;/code&gt; global variables. If you make those universal variables your &lt;code&gt;cd&lt;/code&gt; history is shared among all fish instances.</source>
          <target state="translated">내장의 래퍼 기능도 배를 물고기 &lt;code&gt;cd&lt;/code&gt; 이해 &lt;code&gt;cd -&lt;/code&gt; 이전 디렉토리로 변경한다. &lt;a href=&quot;commands#prevd&quot;&gt; &lt;code&gt;prevd&lt;/code&gt; &lt;/a&gt; 도 참조하십시오 . 이 랩퍼 함수는 &lt;code&gt;$dirprev&lt;/code&gt; 및 &lt;code&gt;$dirnext&lt;/code&gt; 전역 변수 에서 가장 최근에 방문한 25 개의 디렉토리 히스토리를 유지 합니다. 이러한 범용 변수를 만들면 모든 기록에서 &lt;code&gt;cd&lt;/code&gt; 기록이 공유됩니다.</target>
        </trans-unit>
        <trans-unit id="8e7b1872333b58f5f95b5e7bec0c0e9e258507d3" translate="yes" xml:space="preserve">
          <source>Fish automatically searches through any directories in the array variable &lt;code&gt;$fish_function_path&lt;/code&gt;, and any functions defined are automatically loaded when needed. A function definition file must have a filename consisting of the name of the function plus the suffix '&lt;code&gt;.fish&lt;/code&gt;'.</source>
          <target state="translated">Fish는 배열 변수 &lt;code&gt;$fish_function_path&lt;/code&gt; 의 디렉토리를 자동으로 검색하며 , 정의 된 함수는 필요할 때 자동으로로드됩니다. 함수 정의 파일에는 함수 이름과 접미사 ' &lt;code&gt;.fish&lt;/code&gt; ' 로 구성된 파일 이름이 있어야합니다 .</target>
        </trans-unit>
        <trans-unit id="fea3d198c56b137efabf4e3b3479e7ecb043e65b" translate="yes" xml:space="preserve">
          <source>Fish has a default limit of 10 MiB on the amount of data a command substitution can output. If the limit is exceeded the entire command, not just the substitution, is failed and &lt;code&gt;$status&lt;/code&gt; is set to 122. You can modify the limit by setting the &lt;code&gt;fish_read_limit&lt;/code&gt; variable at any time including in the environment before fish starts running. If you set it to zero then no limit is imposed. This is a safety mechanism to keep the shell from consuming too much memory if a command outputs an unreasonable amount of data. Note that this limit also affects how much data the &lt;code&gt;read&lt;/code&gt; command will process.</source>
          <target state="translated">피쉬는 명령 대체가 출력 할 수있는 데이터 양에 대해 기본 제한이 10MiB입니다. 한계가 대체뿐만 아니라 전체 명령을 초과하면 실패하고 &lt;code&gt;$status&lt;/code&gt; 는 122로 설정 됩니다. 물고기가 시작되기 전에 환경을 포함하여 언제든지 &lt;code&gt;fish_read_limit&lt;/code&gt; 변수를 설정하여 한계를 수정할 수 있습니다 . 0으로 설정하면 제한이 없습니다. 이것은 명령이 부당한 양의 데이터를 출력하는 경우 쉘이 너무 많은 메모리를 소비하지 않도록하는 안전 메커니즘입니다. 이 제한은 또한 &lt;code&gt;read&lt;/code&gt; 명령이 처리 할 데이터의 양에도 영향을 미칩니다 .</target>
        </trans-unit>
        <trans-unit id="7e69e47a187b17aecb51ad4dc34104e0787069fe" translate="yes" xml:space="preserve">
          <source>Fish history recall is very simple yet effective:</source>
          <target state="translated">물고기 이력 회상은 매우 간단하지만 효과적입니다.</target>
        </trans-unit>
        <trans-unit id="edcb6e0e99c1d29dcec8762593402a5b7fe687c4" translate="yes" xml:space="preserve">
          <source>Fish includes a built in debugging facility. The debugger allows you to stop execution of a script at an arbitrary point. When this happens you are presented with an interactive prompt. At this prompt you can execute any fish command (there are no debug commands as such). For example, you can check or change the value of any variables using &lt;code&gt;printf&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt;. As another example, you can run &lt;code&gt;status print-stack-trace&lt;/code&gt; to see how this breakpoint was reached. To resume normal execution of the script, simply type &lt;code&gt;exit&lt;/code&gt; or [ctrl-D].</source>
          <target state="translated">Fish에는 내장 된 디버깅 기능이 포함되어 있습니다. 디버거를 사용하면 임의의 시점에서 스크립트 실행을 중지 할 수 있습니다. 이 경우 대화식 프롬프트가 표시됩니다. 이 프롬프트에서 모든 피쉬 명령을 실행할 수 있습니다 (디버그 명령은 없습니다). 예를 들어, &lt;code&gt;printf&lt;/code&gt; 및 &lt;code&gt;set&lt;/code&gt; 을 사용하여 변수 값을 확인하거나 변경할 수 있습니다 . 다른 예로, &lt;code&gt;status print-stack-trace&lt;/code&gt; 를 실행 하여이 중단 점에 도달 한 방법을 확인할 수 있습니다. 스크립트의 정상적인 실행을 재개하려면 &lt;code&gt;exit&lt;/code&gt; 또는 [ctrl-D]를 입력하십시오.</target>
        </trans-unit>
        <trans-unit id="c9861432c24cc69aa9bbe8d00780f47c35cceca6" translate="yes" xml:space="preserve">
          <source>Fish is trying to set the titlebar message of your terminal. While screen itself supports this feature, your terminal does not. Unfortunately, when the underlying terminal doesn't support setting the titlebar, screen simply passes through the escape codes and text to the underlying terminal instead of ignoring them. It is impossible to detect and resolve this problem from inside fish since fish has no way of knowing what the underlying terminal type is. For now, the only way to fix this is to unset the titlebar message, as suggested above.</source>
          <target state="translated">Fish가 터미널의 제목 표시 줄 메시지를 설정하려고합니다. 화면 자체는이 기능을 지원하지만 터미널은 지원하지 않습니다. 불행히도, 기본 터미널이 제목 표시 줄 설정을 지원하지 않는 경우, 화면은 단순히 이스케이프 코드와 텍스트를 무시하지 않고 기본 터미널로 전달합니다. 물고기는 기본 터미널 유형이 무엇인지 알 방법이 없기 때문에 물고기 내부에서이 문제를 감지하고 해결하는 것은 불가능합니다. 현재이 문제를 해결하는 유일한 방법은 위에서 제안한대로 제목 표시 줄 메시지를 설정 해제하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="3524f17824fc111784e6c17c1c783f4774ba70aa" translate="yes" xml:space="preserve">
          <source>Fish reserves the &lt;a href=&quot;http://www.unicode.org/faq/private_use.html&quot;&gt;Unicode private-use character range&lt;/a&gt; from U+F600 thru U+F73F for internal use. Any attempt to feed characters in that range to fish will result in them being replaced by the Unicode &quot;replacement character&quot; U+FFFD. This includes both interactive input as well as any file read by fish (but not programs run by fish).</source>
          <target state="translated">Fish 는 내부 용 U + F600부터 U + F73F까지 의 &lt;a href=&quot;http://www.unicode.org/faq/private_use.html&quot;&gt;유니 코드 개인용 문자 범위&lt;/a&gt; 를 예약합니다 . 해당 범위의 문자를 피쉬로 보내려고하면 유니 코드 &quot;대체 문자&quot;U + FFFD로 대체됩니다. 여기에는 대화 형 입력과 물고기가 읽는 파일이 포함됩니다 (물고기가 실행하는 프로그램은 아님).</target>
        </trans-unit>
        <trans-unit id="88f9fa16272ceb2f6496c15e10a64756c22612c9" translate="yes" xml:space="preserve">
          <source>Fish ships with a &lt;code&gt;_validate_int&lt;/code&gt; function that accepts a &lt;code&gt;--min&lt;/code&gt; and &lt;code&gt;--max&lt;/code&gt; flag. Let's say your command accepts a &lt;code&gt;-m&lt;/code&gt; or &lt;code&gt;--max&lt;/code&gt; flag and the minimum allowable value is zero and the maximum is 5. You would define the option like this: &lt;code&gt;m/max=!_validate_int --min 0 --max 5&lt;/code&gt;. The default if you just call &lt;code&gt;_validate_int&lt;/code&gt; without those flags is to simply check that the value is a valid integer with no limits on the min or max value allowed.</source>
          <target state="translated">Fish 는 &lt;code&gt;--min&lt;/code&gt; 및 &lt;code&gt;--max&lt;/code&gt; 플래그 를 허용 하는 &lt;code&gt;_validate_int&lt;/code&gt; 함수 와 함께 제공됩니다 . 명령에 &lt;code&gt;-m&lt;/code&gt; 또는 &lt;code&gt;--max&lt;/code&gt; 플래그를 허용하고 허용되는 최소값은 0이고 최대 값은 5입니다. &lt;code&gt;m/max=!_validate_int --min 0 --max 5&lt;/code&gt; 옵션을 정의합니다 . 이러한 플래그없이 &lt;code&gt;_validate_int&lt;/code&gt; 를 호출 하는 경우 기본값은 허용 된 최소값 또는 최대 값에 제한이없는 유효한 정수인지 간단히 확인하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="da8d10a7f6f5ff6e0088c4b12f7c811ff075340b" translate="yes" xml:space="preserve">
          <source>Fish stores the exit status of the last process in the last job to exit in the &lt;code&gt;status&lt;/code&gt; variable.</source>
          <target state="translated">Fish는 마지막 작업의 마지막 프로세스 종료 상태를 &lt;code&gt;status&lt;/code&gt; 변수 에 종료 합니다.</target>
        </trans-unit>
        <trans-unit id="c7cac64314e5cd1f9679e120b4ee08809136ee30" translate="yes" xml:space="preserve">
          <source>Fish uses a heuristic to decide if a terminal supports the 256-color palette as opposed to the more limited 16 color palette of older terminals. Support can be forced on by setting &lt;code&gt;fish_term256&lt;/code&gt; to &lt;em&gt;1&lt;/em&gt;. If &lt;code&gt;$TERM&lt;/code&gt; contains &quot;256color&quot; (e.g., &lt;em&gt;xterm-256color&lt;/em&gt;), 256-color support is enabled. If &lt;code&gt;$TERM&lt;/code&gt; contains &lt;em&gt;xterm&lt;/em&gt;, 256 color support is enabled (except for MacOS: &lt;code&gt;$TERM_PROGRAM&lt;/code&gt; and &lt;code&gt;$TERM_PROGRAM_VERSION&lt;/code&gt; are used to detect Terminal.app from MacOS 10.6; support is disabled here it because it is known that it reports &lt;code&gt;xterm&lt;/code&gt; and only supports 16 colors.</source>
          <target state="translated">Fish는 휴리스틱을 사용하여 구형 터미널의 16 색 팔레트보다 제한된 256 색 팔레트를 지원하는지 여부를 결정합니다. &lt;code&gt;fish_term256&lt;/code&gt; 을 &lt;em&gt;1&lt;/em&gt; 로 설정하여 지원을 강제 할 수 있습니다 . &lt;code&gt;$TERM&lt;/code&gt; 에 &quot;256color&quot;가 포함 된 경우 (예 : &lt;em&gt;xterm-256color&lt;/em&gt; ) 256 색 지원이 활성화됩니다. &lt;code&gt;$TERM&lt;/code&gt; 에 &lt;em&gt;xterm이&lt;/em&gt; 포함 된 경우 256 색 지원이 활성화됩니다 (MacOS 제외 : &lt;code&gt;$TERM_PROGRAM&lt;/code&gt; 및 &lt;code&gt;$TERM_PROGRAM_VERSION&lt;/code&gt; 은 MacOS 10.6에서 Terminal.app을 감지하는 데 사용됨) &lt;code&gt;xterm&lt;/code&gt; 을보고 하고 16 색만 지원 한다는 것이 알려져 있기 때문에 지원이 비활성화됩니다. .</target>
        </trans-unit>
        <trans-unit id="4a8a4a4f82444a104a993e27513d536247c816d1" translate="yes" xml:space="preserve">
          <source>Fish versions prior to 3.0 supported the syntax &lt;code&gt;set PATH[1] PATH[4] /bin /sbin&lt;/code&gt;, which worked like &lt;code&gt;set PATH[1 4] /bin /sbin&lt;/code&gt;. This syntax was not widely used, and was ambiguous and inconsistent.</source>
          <target state="translated">3.0 이전 버전 생선 구 지원 &lt;code&gt;set PATH[1] PATH[4] /bin /sbin&lt;/code&gt; 같이 일한 &lt;code&gt;set PATH[1 4] /bin /sbin&lt;/code&gt; . 이 구문은 널리 사용되지 않았으며 모호하고 일관성이 없었습니다.</target>
        </trans-unit>
        <trans-unit id="cc39950b13a6699fa5b10206f558fe0ba567276b" translate="yes" xml:space="preserve">
          <source>Fisherman</source>
          <target state="translated">Fisherman</target>
        </trans-unit>
        <trans-unit id="cde1c030202177b2bb85ac304db8a66513736e41" translate="yes" xml:space="preserve">
          <source>Flag Value Validation</source>
          <target state="translated">플래그 값 검증</target>
        </trans-unit>
        <trans-unit id="536cf03606fa94ae7d859eed9d77e1d3116f6703" translate="yes" xml:space="preserve">
          <source>For a list of all builtins, functions and commands shipped with fish, see the &lt;a href=&quot;#toc-commands&quot;&gt;table of contents&lt;/a&gt;. The documentation is also available by using the &lt;code&gt;--help&lt;/code&gt; switch of the command.</source>
          <target state="translated">물고기와 함께 제공된 모든 내장, 기능 및 명령 목록 &lt;a href=&quot;#toc-commands&quot;&gt;은 목차를&lt;/a&gt; 참조하십시오 . 명령 의 &lt;code&gt;--help&lt;/code&gt; 스위치를 사용하여 설명서를 사용할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="aac657fdcd353fd4213af492e11d8fa1236e727e" translate="yes" xml:space="preserve">
          <source>For an introduction to specifying completions, see &lt;a href=&quot;index#completion-own&quot;&gt;Writing your own completions&lt;/a&gt; in the fish manual.</source>
          <target state="translated">완료를 지정하는 것에 대한 소개 는 물고기 매뉴얼에서 &lt;a href=&quot;index#completion-own&quot;&gt;자신의 완료 쓰기를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="97f70256424cd43141b91b58c2edd81b6e14a061" translate="yes" xml:space="preserve">
          <source>For backwards compatibility each subcommand can also be specified as a long or short option. For example, rather than &lt;code&gt;status is-login&lt;/code&gt; you can type &lt;code&gt;status --is-login&lt;/code&gt;. The flag forms are deprecated and may be removed in a future release (but not before fish 3.0).</source>
          <target state="translated">이전 버전과의 호환성을 위해 각 하위 명령을 길거나 짧은 옵션으로 지정할 수도 있습니다. 예를 들어 &lt;code&gt;status is-login&lt;/code&gt; 대신 &lt;code&gt;status --is-login&lt;/code&gt; 을 입력 할 수 있습니다 . 플래그 양식은 더 이상 사용되지 않으며 향후 릴리스에서 제거 될 수 있습니다 (물고기 3.0 이전은 아님).</target>
        </trans-unit>
        <trans-unit id="71cbfbc301ab062537c3b9d9149d9aa54102b0b9" translate="yes" xml:space="preserve">
          <source>For basic compatibility with POSIX &lt;code&gt;command&lt;/code&gt;, the &lt;code&gt;-v&lt;/code&gt; flag is recognized as an alias for &lt;code&gt;-s&lt;/code&gt;.</source>
          <target state="translated">POSIX &lt;code&gt;command&lt;/code&gt; 과의 기본 호환성을 위해 &lt;code&gt;-v&lt;/code&gt; 플래그는 &lt;code&gt;-s&lt;/code&gt; 의 별명으로 인식됩니다 .</target>
        </trans-unit>
        <trans-unit id="fa3cc4b28c62019a96ce74d02cd7c54d07452b42" translate="yes" xml:space="preserve">
          <source>For even more complex conditions, use &lt;code&gt;begin&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt; to group parts of them.</source>
          <target state="translated">더 복잡한 조건의 경우 &lt;code&gt;begin&lt;/code&gt; 과 &lt;code&gt;end&lt;/code&gt; 을 사용 하여 일부를 그룹화하십시오.</target>
        </trans-unit>
        <trans-unit id="2ffbc75d40d5f17483c5a32a91dae37e401b6f2b" translate="yes" xml:space="preserve">
          <source>For example &lt;code&gt;_flag_h&lt;/code&gt; and &lt;code&gt;_flag_help&lt;/code&gt; if &lt;code&gt;-h&lt;/code&gt; or &lt;code&gt;--help&lt;/code&gt; is seen. The var will be set with local scope (i.e., as if the script had done &lt;code&gt;set -l _flag_X&lt;/code&gt;). If the flag is a boolean (that is, does not have an associated value) the values are the short and long flags seen. If the option is not a boolean flag the values will be zero or more values corresponding to the values collected when the ARG list is processed. If the flag was not seen the flag var will not be set.</source>
          <target state="translated">예를 들어 , &lt;code&gt;-h&lt;/code&gt; 또는 &lt;code&gt;--help&lt;/code&gt; 가 표시 되면 &lt;code&gt;_flag_h&lt;/code&gt; 및 &lt;code&gt;_flag_help&lt;/code&gt; 입니다. var는 로컬 범위로 설정됩니다 (예 : 스크립트가 &lt;code&gt;set -l _flag_X&lt;/code&gt; 를 수행 한 것처럼 ). 플래그가 부울 인 경우 (즉, 연관된 값이없는 경우) 값은 짧고 긴 플래그입니다. 옵션이 부울 플래그가 아닌 경우 값은 ARG 목록이 처리 될 때 수집 된 값에 해당하는 0 이상의 값입니다. 플래그가 보이지 않으면 var 플래그가 설정되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="38df69a183da9016b2103a1c9a7def1959322bfa" translate="yes" xml:space="preserve">
          <source>For example, a frequently-run command like &lt;code&gt;git checkout&lt;/code&gt; can be abbreviated to &lt;code&gt;gco&lt;/code&gt;. After entering &lt;code&gt;gco&lt;/code&gt; and pressing &lt;b&gt;Space&lt;/b&gt; or &lt;b&gt;Enter&lt;/b&gt;, the full text &lt;code&gt;git checkout&lt;/code&gt; will appear in the command line.</source>
          <target state="translated">예를 들어, &lt;code&gt;git checkout&lt;/code&gt; 과 같이 자주 실행되는 명령은 &lt;code&gt;gco&lt;/code&gt; 로 축약 될 수 있습니다 . &lt;code&gt;gco&lt;/code&gt; 를 입력 하고 &lt;b&gt;Space&lt;/b&gt; 또는 &lt;b&gt;Enter &lt;/b&gt;키 를 누르면 전체 텍스트 &lt;code&gt;git checkout&lt;/code&gt; 이 명령 행에 나타납니다.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
