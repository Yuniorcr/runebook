<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="cpp">
    <body>
      <group id="cpp">
        <trans-unit id="fe907287cb04f20a105216118071d9dd3937459e" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../container/forward_list&quot;&gt;std::forward_list&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../container/forward_list&quot;&gt;std::forward_list&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5992362ceb89a0b66a0b237ed08daf8b4b8b1205" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../container/list&quot;&gt;std::list&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../container/list&quot;&gt;std::list&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="eba01099fbeaf28b6099312e0eae180351a0ad03" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../container/map&quot;&gt;std::map&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../container/map&quot;&gt;std::map&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8f5ce1adbc9a1ba73152c1d63ded7dcecc302426" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../container/multimap&quot;&gt;std::multimap&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../container/multimap&quot;&gt;std::multimap&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="38aa980fc2d710a61231a897ea25f9ee8d046abe" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../container/multiset&quot;&gt;std::multiset&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../container/multiset&quot;&gt;std::multiset&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c502e43a782ef479c16a6cf13cb52535fe3749d5" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../container/priority_queue&quot;&gt;std::priority_queue&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../container/priority_queue&quot;&gt;std::priority_queue&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b3044a2f8bd50a895a6fe3273adc646a5e332804" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../container/queue&quot;&gt;std::queue&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../container/queue&quot;&gt;std::queue&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d9ef4daccf5dbf76fba65c7d3fcf4bb06c43b8b9" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../container/set&quot;&gt;std::set&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../container/set&quot;&gt;std::set&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0c3845e88afce3fadcddfb28aabc83bbf26770e9" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../container/stack&quot;&gt;std::stack&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../container/stack&quot;&gt;std::stack&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fa3439b4eb49872082fddca332946b876e3f7991" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../container/unordered_map&quot;&gt;std::unordered_map&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../container/unordered_map&quot;&gt;std::unordered_map&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4c2e19db3aa1513e742ae1d18e594dc055cc0966" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../container/unordered_multimap&quot;&gt;std::unordered_multimap&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../container/unordered_multimap&quot;&gt;std::unordered_multimap&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cf5b171dba67e1f85dcd146ad61dc88bc86769d2" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../container/unordered_multiset&quot;&gt;std::unordered_multiset&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../container/unordered_multiset&quot;&gt;std::unordered_multiset&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ee4b296cfa19e366074a1f8970dff6ccfbd24850" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../container/unordered_set&quot;&gt;std::unordered_set&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../container/unordered_set&quot;&gt;std::unordered_set&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ce5c5a04c001e2c7e513de6d76d0421bf6b66440" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../container/vector&quot;&gt;std::vector&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../container/vector&quot;&gt;std::vector&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2cd949ab8fd7ec9c631b7bc9d7ba09eeb8f6425d" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../error/bad_exception&quot;&gt;std::bad_exception&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../error/bad_exception&quot;&gt;std::bad_exception&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9b69a39b1a9929da03e45e25f2d14c646496a05e" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../error/exception&quot;&gt;std::exception&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../error/exception&quot;&gt;std::exception&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="364d5fba9bdf9dbd59ae98885c4385f7725e7c64" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../error/nested_exception&quot;&gt;std::nested_exception&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../error/nested_exception&quot;&gt;std::nested_exception&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a7af5de67d92e374614252bf3d02461992242a8f" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../filesystem/directory_iterator&quot;&gt;std::filesystem::directory_iterator&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../filesystem/directory_iterator&quot;&gt;std::filesystem::directory_iterator&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1455cfad6401368409d51d89fcaf39ec23af90e1" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../filesystem/file_status&quot;&gt;std::filesystem::file_status&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../filesystem/file_status&quot;&gt;std::filesystem::file_status&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="438162460c166b3f8ca6a9bb520e80691b532e5a" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../filesystem/filesystem_error&quot;&gt;std::filesystem::filesystem_error&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../filesystem/filesystem_error&quot;&gt;std::filesystem::filesystem_error&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="582932f402ae26e08640e9821168544973643dec" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../filesystem/path&quot;&gt;std::filesystem::path&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../filesystem/path&quot;&gt;std::filesystem::path&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="18b6ce143a15b4ddb000d179a8bee571dd517a3a" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../filesystem/recursive_directory_iterator&quot;&gt;std::filesystem::recursive_directory_iterator&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../filesystem/recursive_directory_iterator&quot;&gt;std::filesystem::recursive_directory_iterator&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c682ef3037a6e85c56f44d5ec2eb9049e79c0426" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../io/basic_filebuf&quot;&gt;std::basic_filebuf&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../io/basic_filebuf&quot;&gt;std::basic_filebuf&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="647d8b5d561f962ac32198a64389b086f22697de" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../io/basic_fstream&quot;&gt;std::basic_fstream&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../io/basic_fstream&quot;&gt;std::basic_fstream&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e688b61f887d84c14fcddde93303d57575aeddaf" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../io/basic_ifstream&quot;&gt;std::basic_ifstream&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../io/basic_ifstream&quot;&gt;std::basic_ifstream&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="95d3eac84ca9c596e601bdf73d31e861cf939a70" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../io/basic_ios&quot;&gt;std::basic_ios&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../io/basic_ios&quot;&gt;std::basic_ios&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ca72f9d89bf3a5dd95ebbccabb93f8333687078f" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../io/basic_iostream&quot;&gt;std::basic_iostream&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../io/basic_iostream&quot;&gt;std::basic_iostream&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7acc4c050203653ebd5e41e6d99ad86c3d50a436" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../io/basic_istream&quot;&gt;std::basic_istream&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../io/basic_istream&quot;&gt;std::basic_istream&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c5aa173dc8446347a16b49be9fdc23e83535d189" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../io/basic_istringstream&quot;&gt;std::basic_istringstream&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../io/basic_istringstream&quot;&gt;std::basic_istringstream&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="140e4bdb8c3854e784cb6bc6c92eec6674137138" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../io/basic_ofstream&quot;&gt;std::basic_ofstream&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../io/basic_ofstream&quot;&gt;std::basic_ofstream&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2f758695f7426ce3a4c352e8cefab93de5638d11" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../io/basic_ostream&quot;&gt;std::basic_ostream&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../io/basic_ostream&quot;&gt;std::basic_ostream&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a298c6e77e9e09d5a52c9b770335cfea72a93bbf" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../io/basic_ostringstream&quot;&gt;std::basic_ostringstream&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../io/basic_ostringstream&quot;&gt;std::basic_ostringstream&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c1e9884a2f9bb580a54c24170dc6348d797cbbdc" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../io/basic_streambuf&quot;&gt;std::basic_streambuf&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../io/basic_streambuf&quot;&gt;std::basic_streambuf&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8915dd062d60e041d583890382ba035e693cc49e" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../io/basic_stringbuf&quot;&gt;std::basic_stringbuf&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../io/basic_stringbuf&quot;&gt;std::basic_stringbuf&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c34d0b2f9bcbfe172a5bed6be0769e8f27c2b6dc" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../io/basic_stringstream&quot;&gt;std::basic_stringstream&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../io/basic_stringstream&quot;&gt;std::basic_stringstream&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="78d0bfaf99f99f08877728d3240a906319cb4b1c" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../io/fpos&quot;&gt;std::fpos&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../io/fpos&quot;&gt;std::fpos&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="62fe63934d85f2f7d1aee8c40c5eb2e9b0b9f16c" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../io/ios_base&quot;&gt;std::ios_base&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../io/ios_base&quot;&gt;std::ios_base&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fe96353fb47b944079b3f6a0ed14e5e192f310c8" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../io/ios_base/failure&quot;&gt;std::ios_base::failure&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../io/ios_base/failure&quot;&gt;std::ios_base::failure&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f92092992e239ab1f4e7cbd4295e5ec2d55f600d" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../io/ios_base/init&quot;&gt;std::ios_base::Init&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../io/ios_base/init&quot;&gt;std::ios_base::Init&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8072380c71f4a4ad63f50231016925e4b060eafc" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../io/istrstream&quot;&gt;std::istrstream&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../io/istrstream&quot;&gt;std::istrstream&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ac23224d901806ac7aa74d53271ebee6819467aa" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../io/ostrstream&quot;&gt;std::ostrstream&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../io/ostrstream&quot;&gt;std::ostrstream&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b3c46dc66f2b98b04bc20c4a69b7c0f0e646cb12" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../io/strstream&quot;&gt;std::strstream&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../io/strstream&quot;&gt;std::strstream&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2a79bd847dc81f55913d1b0e568bfbb0a79801bb" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../io/strstreambuf&quot;&gt;std::strstreambuf&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../io/strstreambuf&quot;&gt;std::strstreambuf&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="08067246fe5e94de85264908eaf85deef9c345d9" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../locale/codecvt&quot;&gt;std::codecvt&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../locale/codecvt&quot;&gt;std::codecvt&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7c48844013d821bb1f7750ec1e3fdb2c026933b1" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../locale/codecvt_base&quot;&gt;std::codecvt_base&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../locale/codecvt_base&quot;&gt;std::codecvt_base&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="985650e8994ea280f4019986ced6f43a45f6b260" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../locale/codecvt_byname&quot;&gt;std::codecvt_byname&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../locale/codecvt_byname&quot;&gt;std::codecvt_byname&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0a64ac5322b780badd6f99d15414fdd4157fa527" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../locale/codecvt_utf16&quot;&gt;std::codecvt_utf16&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../locale/codecvt_utf16&quot;&gt;std::codecvt_utf16&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c32ac54356c5c112f5c3ca2086348560f38170ac" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../locale/codecvt_utf8&quot;&gt;std::codecvt_utf8&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../locale/codecvt_utf8&quot;&gt;std::codecvt_utf8&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b334fce7272452cfaf39e88508c2ed3ee8a10328" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../locale/codecvt_utf8_utf16&quot;&gt;std::codecvt_utf8_utf16&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../locale/codecvt_utf8_utf16&quot;&gt;std::codecvt_utf8_utf16&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e9bdb029df9e904fd51ee40a4fe42a914726b1b6" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../locale/collate&quot;&gt;std::collate&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../locale/collate&quot;&gt;std::collate&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8623faefbb875a0b02d059d67f03e33f270066ba" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../locale/collate_byname&quot;&gt;std::collate_byname&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../locale/collate_byname&quot;&gt;std::collate_byname&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5b6ea669ddfca2cd993e36dadd791a65c88a1b27" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../locale/ctype&quot;&gt;std::ctype&lt;/a&gt;&amp;lt;char&amp;gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../locale/ctype&quot;&gt;std::ctype&lt;/a&gt;&amp;lt;char&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5a3f59d726a0af4ef818fd640255aca332db94d8" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../locale/ctype&quot;&gt;std::ctype&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../locale/ctype&quot;&gt;std::ctype&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="366960bfa06dacd4a1158adf9f5f7d1d7aeb3aca" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../locale/ctype_base&quot;&gt;std::ctype_base&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../locale/ctype_base&quot;&gt;std::ctype_base&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6a5921e9b3a81c21bf949dae449e7b75412d54c0" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../locale/ctype_byname&quot;&gt;std::ctype_byname&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../locale/ctype_byname&quot;&gt;std::ctype_byname&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d54c1387087af4392f8adcae6f99177c890fc3ed" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../locale/locale&quot;&gt;std::locale&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../locale/locale&quot;&gt;std::locale&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8ef85b5361280b5612d82a65dc1a176e8a5b7db1" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../locale/messages&quot;&gt;std::messages&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../locale/messages&quot;&gt;std::messages&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="72e15db8151f0cf6b14a648b802d2089cf8a8a3d" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../locale/messages_base&quot;&gt;std::messages_base&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../locale/messages_base&quot;&gt;std::messages_base&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="41115e572b511b7a8ae3a6e6c25ad8046e043c1a" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../locale/messages_byname&quot;&gt;std::messages_byname&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../locale/messages_byname&quot;&gt;std::messages_byname&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b74f7da418cc844e916d78c0217d79ec4597b1f8" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../locale/money_base&quot;&gt;std::money_base&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../locale/money_base&quot;&gt;std::money_base&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3489618860ef333ec75ccbddcdd0e6d8d1487339" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../locale/money_get&quot;&gt;std::money_get&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../locale/money_get&quot;&gt;std::money_get&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d37d4e8dd0d700e2a00e891885a0c1692407fbb3" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../locale/money_put&quot;&gt;std::money_put&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../locale/money_put&quot;&gt;std::money_put&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0613ceb45b2bc7ee4d9bc2c0e2619f58437a89ae" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../locale/moneypunct&quot;&gt;std::moneypunct&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../locale/moneypunct&quot;&gt;std::moneypunct&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6ba7bd8020cf564ce809fbdd63f0956d80ab1753" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../locale/moneypunct_byname&quot;&gt;std::moneypunct_byname&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../locale/moneypunct_byname&quot;&gt;std::moneypunct_byname&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="08ab55841899a8da27d4bdb50fcb611b9a1f10f6" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../locale/num_get&quot;&gt;std::num_get&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../locale/num_get&quot;&gt;std::num_get&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2e40ee03c21746e34e3429e431c34804b6800ec8" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../locale/num_put&quot;&gt;std::num_put&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../locale/num_put&quot;&gt;std::num_put&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="438112b54a31b452ff45248d904571a99731fcd8" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../locale/numpunct&quot;&gt;std::numpunct&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../locale/numpunct&quot;&gt;std::numpunct&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="53989d873aa0a412917511c6c3725ff2cfd89243" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../locale/numpunct_byname&quot;&gt;std::numpunct_byname&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../locale/numpunct_byname&quot;&gt;std::numpunct_byname&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="88d31a95e7ff57c59c5e09c5772ffa3bda58f083" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../locale/time_base&quot;&gt;std::time_base&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../locale/time_base&quot;&gt;std::time_base&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5a2b0172620426f63ca72489e6f3fa515a792e27" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../locale/time_get&quot;&gt;std::time_get&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../locale/time_get&quot;&gt;std::time_get&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="96184917592017a70c96d91e6290f4ac48dfbeaf" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../locale/time_get_byname&quot;&gt;std::time_get_byname&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../locale/time_get_byname&quot;&gt;std::time_get_byname&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="eff0e4673551965f8013672066a7f360308ac90a" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../locale/time_put&quot;&gt;std::time_put&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../locale/time_put&quot;&gt;std::time_put&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="51ca47d131d91aa62e9e28bd208ca4c0a3fb0c28" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../locale/time_put_byname&quot;&gt;std::time_put_byname&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../locale/time_put_byname&quot;&gt;std::time_put_byname&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="19e702cf1fc67baf4fb2fcaf28cc80d57ddebcaa" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../locale/wbuffer_convert&quot;&gt;std::wbuffer_convert&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../locale/wbuffer_convert&quot;&gt;std::wbuffer_convert&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d3fa5ee8c70a8e13e271d67d647c151a52dad133" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../locale/wstring_convert&quot;&gt;std::wstring_convert&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../locale/wstring_convert&quot;&gt;std::wstring_convert&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ffdee69b929dc371de36f96de565b6b28c8adbc2" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../memory/allocator_arg_t&quot;&gt;std::allocator_arg_t&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../memory/allocator_arg_t&quot;&gt;std::allocator_arg_t&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="84d034384baf0323d38419f0e9fae5711f8e1063" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../memory/bad_weak_ptr&quot;&gt;std::bad_weak_ptr&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../memory/bad_weak_ptr&quot;&gt;std::bad_weak_ptr&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="53270d99c391533ff8c805a912f8bcd5b0896304" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../memory/memory_resource&quot;&gt;std::pmr::memory_resource&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../memory/memory_resource&quot;&gt;std::pmr::memory_resource&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3885c106db8eb39042c55474ad94640b8fbe517f" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../memory/monotonic_buffer_resource&quot;&gt;std::pmr::monotonic_buffer_resource&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../memory/monotonic_buffer_resource&quot;&gt;std::pmr::monotonic_buffer_resource&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="19c6848af7929033430fdfeaff371de922b03970" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../memory/pool_options&quot;&gt;std::pmr::pool_options&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../memory/pool_options&quot;&gt;std::pmr::pool_options&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0274387103072bc2cf723372e28b327f4d5d51db" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../memory/synchronized_pool_resource&quot;&gt;std::pmr::synchronized_pool_resource&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../memory/synchronized_pool_resource&quot;&gt;std::pmr::synchronized_pool_resource&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="84689351452b9039ad350d2f543d39509a952c75" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../memory/unsynchronized_pool_resource&quot;&gt;std::pmr::unsynchronized_pool_resource&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../memory/unsynchronized_pool_resource&quot;&gt;std::pmr::unsynchronized_pool_resource&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="dd741375b08b2ce7b124c944d4c0c3d9a03a402a" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../numeric/complex&quot;&gt;std::complex&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../numeric/complex&quot;&gt;std::complex&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="960fa5ed7c571730b10f219282486d538c05f362" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../regex/basic_regex&quot;&gt;std::regex&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../regex/basic_regex&quot;&gt;std::regex&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a13175c81354611dd976a14be86c23b82646a0e4" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../regex/match_results&quot;&gt;std::match_results&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../regex/match_results&quot;&gt;std::match_results&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="767dd0aee1fb40fbfc4d8c75b848b36038ea44db" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../regex/regex_error&quot;&gt;std::regex_error&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../regex/regex_error&quot;&gt;std::regex_error&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5cec50b084d10195cdbed4f818ebe162dd9cd2ea" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../regex/regex_traits&quot;&gt;std::regex_traits&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../regex/regex_traits&quot;&gt;std::regex_traits&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="af0bedfb4ca655cc1338b881d1e1594f31aefea2" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../regex/sub_match&quot;&gt;std::sub_match&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../regex/sub_match&quot;&gt;std::sub_match&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="46b140c7861d5109e1bb9b91f99487b9225219b3" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../thread/condition_variable&quot;&gt;std::condition_variable&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../thread/condition_variable&quot;&gt;std::condition_variable&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fcf660e8d179601eb0dc587cdca30630d8a66272" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../thread/condition_variable_any&quot;&gt;std::condition_variable_any&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../thread/condition_variable_any&quot;&gt;std::condition_variable_any&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="68511b7ee3a42293faa01476816eccd93cddde1b" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../thread/future&quot;&gt;std::future&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../thread/future&quot;&gt;std::future&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="58b079a5320295441a043b5a1f493476ab497178" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../thread/future_error&quot;&gt;std::future_error&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../thread/future_error&quot;&gt;std::future_error&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0be6ffbf0dd1cf9a3a104c36b094b4448e19a945" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../thread/lock_guard&quot;&gt;std::lock_guard&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../thread/lock_guard&quot;&gt;std::lock_guard&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f518c81a520b9549f521181087f49afb31c2c490" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../thread/mutex&quot;&gt;std::mutex&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../thread/mutex&quot;&gt;std::mutex&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1f4ced9d4172a7911fb593ddbaaad95282af1659" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../thread/once_flag&quot;&gt;std::once_flag&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../thread/once_flag&quot;&gt;std::once_flag&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="aecf2313d410295b903010eb2b13b7e6cd16fc54" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../thread/packaged_task&quot;&gt;std::packaged_task&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../thread/packaged_task&quot;&gt;std::packaged_task&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d3af08366a7d842ab8059bbfa6fcb564b6809a5a" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../thread/promise&quot;&gt;std::promise&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../thread/promise&quot;&gt;std::promise&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fde1afb39132984f668aa1a9dc7baa84e2634685" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../thread/recursive_mutex&quot;&gt;std::recursive_mutex&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../thread/recursive_mutex&quot;&gt;std::recursive_mutex&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="56abe80d43b5508d3d345959c397e9380a634cfe" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../thread/recursive_timed_mutex&quot;&gt;std::recursive_timed_mutex&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../thread/recursive_timed_mutex&quot;&gt;std::recursive_timed_mutex&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="97bc25902751c531e26abda31d85edf458803f51" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../thread/shared_future&quot;&gt;std::shared_future&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../thread/shared_future&quot;&gt;std::shared_future&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fb9672ec3d040d489b2974fe54a1c5e4e8f682c3" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../thread/shared_lock&quot;&gt;std::shared_lock&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../thread/shared_lock&quot;&gt;std::shared_lock&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3f6f8c8bdc0c019be60e3ed21a78afdf88a46c06" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../thread/shared_mutex&quot;&gt;std::shared_mutex&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../thread/shared_mutex&quot;&gt;std::shared_mutex&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="58c83809c2f6f6c482ccc618e5bc7aa68469c9f7" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../thread/shared_timed_mutex&quot;&gt;std::shared_timed_mutex&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../thread/shared_timed_mutex&quot;&gt;std::shared_timed_mutex&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2bcedd1b9a480e92fa70d3959e31bf52de6fb3c4" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../thread/thread&quot;&gt;std::thread&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../thread/thread&quot;&gt;std::thread&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f65bd7b1be861cc07d53e5a3d12a72500d15f669" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../thread/thread/id&quot;&gt;std::thread::id&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../thread/thread/id&quot;&gt;std::thread::id&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e2cbd8104b328d87ca3ad3a075986fb29330c130" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../thread/timed_mutex&quot;&gt;std::timed_mutex&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../thread/timed_mutex&quot;&gt;std::timed_mutex&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b8cb7c82d62b0312c35be0803c9d772cfdbff364" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../thread/unique_lock&quot;&gt;std::unique_lock&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../thread/unique_lock&quot;&gt;std::unique_lock&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="64792b6c27f56e12b8341beb9195d94e3f497fe0" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../types/bad_cast&quot;&gt;std::bad_cast&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../types/bad_cast&quot;&gt;std::bad_cast&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="18fd421bdee06634fb7c2d44a533fa7e4055f507" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../types/bad_typeid&quot;&gt;std::bad_typeid&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../types/bad_typeid&quot;&gt;std::bad_typeid&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c690ea71f86c0ac0a4048221a566e761416280cf" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../types/integral_constant&quot;&gt;std::integral_constant&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../types/integral_constant&quot;&gt;std::integral_constant&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="52ef53e06c5e1d2d34a803fa31582ccc62b89e05" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../types/type_index&quot;&gt;std::type_index&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../types/type_index&quot;&gt;std::type_index&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="63d4d20b3fd86b4089f5abaf2d1d11014642cad3" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../types/type_info&quot;&gt;std::type_info&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../types/type_info&quot;&gt;std::type_info&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="84c79b13e10a4090171a5ede606260925eed7030" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../utility/any&quot;&gt;std::any&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../utility/any&quot;&gt;std::any&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e3a1b30e4b40012e94cb8b35de4e0da2c235db1e" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../utility/any/bad_any_cast&quot;&gt;std::bad_any_cast&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../utility/any/bad_any_cast&quot;&gt;std::bad_any_cast&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a0e2d07fde8665e3bb509d7c56a4381a0166523c" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../utility/bitset&quot;&gt;std::bitset&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../utility/bitset&quot;&gt;std::bitset&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="518ff59ea7640b8ed7ee601b0cbe142eb9f8ba08" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../utility/functional/bad_function_call&quot;&gt;std::bad_function_call&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../utility/functional/bad_function_call&quot;&gt;std::bad_function_call&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fa345eeff79a404c053d677d8fcc15cdca4b198d" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../utility/functional/function&quot;&gt;std::function&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../utility/functional/function&quot;&gt;std::function&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0221221a7d24283708c72f8ad13fbe25e8874c84" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../utility/functional/is_bind_expression&quot;&gt;std::is_bind_expression&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../utility/functional/is_bind_expression&quot;&gt;std::is_bind_expression&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c01accffb6f1727e0ff8f71a14b2f3b5256d68c4" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../utility/functional/is_placeholder&quot;&gt;std::is_placeholder&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../utility/functional/is_placeholder&quot;&gt;std::is_placeholder&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="80e2391e46833254d8c489c107c7c93ccf3eac42" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../utility/functional/reference_wrapper&quot;&gt;std::reference_wrapper&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../utility/functional/reference_wrapper&quot;&gt;std::reference_wrapper&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b1603fbdc86ef03808f06bdf72f775346a361f35" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../utility/pair&quot;&gt;std::pair&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../utility/pair&quot;&gt;std::pair&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="87ac4f038383ff60b6037ce06d9e4cc90d0ca1a6" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../utility/tuple&quot;&gt;std::tuple&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../utility/tuple&quot;&gt;std::tuple&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5a1f2933328919ade0c94dd32d324210dfd72c84" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../utility/variant/bad_variant_access&quot;&gt;std::bad_variant_access&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../utility/variant/bad_variant_access&quot;&gt;std::bad_variant_access&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="226fc9e4d5bc170c371edb4dd3321a6959a1a01d" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;&lt;a href=&quot;../utility/variant/monostate&quot;&gt;std::monostate&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;&lt;a href=&quot;../utility/variant/monostate&quot;&gt;std::monostate&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="019e47b05bff095803ce66f37b29e89e63484b88" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;std::atomic_ref&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;std::atomic_ref&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="63d2c6d60ce9498435a675df4bc9eaa4e4f5644e" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;std::basic_osyncstream&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;std::basic_osyncstream&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="25b4f0d90caa10600a6aa8c2515baf817870d3ee" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;std::basic_syncbuf&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;std::basic_syncbuf&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4e02e48803fe38353debb1e5446c9fe8fd1876cf" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;std::chrono::high_resolution_clock&lt;/code&gt; represents the clock with the smallest tick period provided by the implementation. It may be an alias of &lt;code&gt;&lt;a href=&quot;system_clock&quot;&gt;std::chrono::system_clock&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;steady_clock&quot;&gt;std::chrono::steady_clock&lt;/a&gt;&lt;/code&gt;, or a third, independent clock.</source>
          <target state="translated">&lt;code&gt;std::chrono::high_resolution_clock&lt;/code&gt; 클래스 는 구현에서 제공하는 가장 작은 틱주기를 가진 시계를 나타냅니다. 그것은의 별칭 될 수있다 &lt;code&gt;&lt;a href=&quot;system_clock&quot;&gt;std::chrono::system_clock&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;steady_clock&quot;&gt;std::chrono::steady_clock&lt;/a&gt;&lt;/code&gt; , 또는 제 3 독립 시계.</target>
        </trans-unit>
        <trans-unit id="55e0ef433c33d4fedea88c9d13fc549999e010d5" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;std::chrono::steady_clock&lt;/code&gt; represents a monotonic clock. The time points of this clock cannot decrease as physical time moves forward and the time between ticks of this clock is constant. This clock is not related to wall clock time (for example, it can be time since last reboot), and is most suitable for measuring intervals.</source>
          <target state="translated">클래스 &lt;code&gt;std::chrono::steady_clock&lt;/code&gt; 은 단조로운 시계를 나타냅니다. 실제 시간이 앞으로 이동하고이 클럭의 눈금 사이의 시간이 일정하므로이 클럭의 시점을 줄일 수 없습니다. 이 시계는 벽시계 시간과 관련이 없으며 (예 : 마지막 재부팅 이후의 시간 일 수 있음) 간격 측정에 가장 적합합니다.</target>
        </trans-unit>
        <trans-unit id="6fc7600fb7dd0479700a4c5f7dec7c3c4a1e1fd1" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;std::chrono::system_clock&lt;/code&gt; represents the system-wide real time wall clock.</source>
          <target state="translated">클래스 &lt;code&gt;std::chrono::system_clock&lt;/code&gt; 은 시스템 전체의 실시간 벽시계를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="db40bbd434949d355e2e048317021d5996aa0e93" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;std::codecvt&lt;/code&gt; encapsulates conversion of character strings, including wide and multibyte, from one encoding to another. All file I/O operations performed through &lt;code&gt;&lt;a href=&quot;../io/basic_fstream&quot;&gt;std::basic_fstream&lt;/a&gt;&amp;lt;CharT&amp;gt;&lt;/code&gt; use the &lt;code&gt;std::codecvt&amp;lt;CharT, char, &lt;a href=&quot;../string/multibyte/mbstate_t&quot;&gt;std::mbstate_t&lt;/a&gt;&amp;gt;&lt;/code&gt; facet of the locale imbued in the stream.</source>
          <target state="translated">&lt;code&gt;std::codecvt&lt;/code&gt; 클래스 는 하나의 인코딩에서 다른 인코딩으로 와이드 및 멀티 바이트를 포함한 문자열의 변환을 캡슐화합니다. &lt;code&gt;&lt;a href=&quot;../io/basic_fstream&quot;&gt;std::basic_fstream&lt;/a&gt;&amp;lt;CharT&amp;gt;&lt;/code&gt; 통해 수행 된 모든 파일 I / O 작업 은 스트림에 삽입 된 로케일 의 &lt;code&gt;std::codecvt&amp;lt;CharT, char, &lt;a href=&quot;../string/multibyte/mbstate_t&quot;&gt;std::mbstate_t&lt;/a&gt;&amp;gt;&lt;/code&gt; 패싯을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="5840521f6fa8a8bffccda4a8ba5ba227288e4843" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;std::collate&lt;/code&gt; encapsulates locale-specific collation (comparison) and hashing of strings. This facet is used by &lt;code&gt;&lt;a href=&quot;../regex/basic_regex&quot;&gt;std::basic_regex&lt;/a&gt;&lt;/code&gt; and can be applied, by means of &lt;code&gt;std::locale::operator()&lt;/code&gt;, directly to all standard algorithms that expect a string comparison predicate.</source>
          <target state="translated">클래스 &lt;code&gt;std::collate&lt;/code&gt; 는 로케일 특정 데이터 정렬 (비교) 및 문자열 해싱을 캡슐화합니다. 이 패싯은 &lt;code&gt;&lt;a href=&quot;../regex/basic_regex&quot;&gt;std::basic_regex&lt;/a&gt;&lt;/code&gt; 사용되며 std :: &lt;code&gt;std::locale::operator()&lt;/code&gt; 통해 문자열 비교 술어를 예상하는 모든 표준 알고리즘에 직접 적용 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="87385a9f28c1488cda22575bd16895441e000e70" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;std::contract_violation&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;std::contract_violation&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0380f1af18b8525af15000067e3499dac60ded40" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;std::default_sentinel_t&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;std::default_sentinel_t&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="06980e963e58c029fb49e3c967ece382be2211a6" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;std::directory_entry&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;std::directory_entry&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="37d0243b5deaf75fc21207e7ef18b566e59ebd18" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;std::money_put&lt;/code&gt; encapsulates the rules for formatting monetary values as strings. The standard I/O manipulator &lt;code&gt;&lt;a href=&quot;../io/manip/put_money&quot;&gt;std::put_money&lt;/a&gt;&lt;/code&gt; uses the &lt;code&gt;std::money_put&lt;/code&gt; facet of the I/O stream's locale.</source>
          <target state="translated">&lt;code&gt;std::money_put&lt;/code&gt; 클래스는 통화 값을 문자열로 형식화하기위한 규칙을 캡슐화합니다. 표준 I / O 조작기 &lt;code&gt;&lt;a href=&quot;../io/manip/put_money&quot;&gt;std::put_money&lt;/a&gt;&lt;/code&gt; 는 I / O 스트림 로케일 의 &lt;code&gt;std::money_put&lt;/code&gt; 패싯을 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="c2bbb796db5fc1496f83f8fd99db44d70ad6696d" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;std::num_get&lt;/code&gt; encapsulates the rules for parsing string representations of numeric values. Specifically, types &lt;code&gt;bool&lt;/code&gt;, &lt;code&gt;unsigned short&lt;/code&gt;, &lt;code&gt;unsigned int&lt;/code&gt;, &lt;code&gt;long&lt;/code&gt;, &lt;code&gt;unsigned long&lt;/code&gt;, &lt;code&gt;long long&lt;/code&gt;, &lt;code&gt;unsigned long long&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt;, &lt;code&gt;double&lt;/code&gt;, &lt;code&gt;long double&lt;/code&gt;, and &lt;code&gt;void*&lt;/code&gt; are supported. The standard formatting input operators (such as &lt;code&gt;cin &amp;gt;&amp;gt; n;&lt;/code&gt;) use the &lt;code&gt;std::num_get&lt;/code&gt; facet of the I/O stream's locale to parse the text representations of the numbers.</source>
          <target state="translated">&lt;code&gt;std::num_get&lt;/code&gt; 클래스 는 숫자 값의 문자열 표현을 구문 분석하기위한 규칙을 캡슐화합니다. 특히 &lt;code&gt;bool&lt;/code&gt; , &lt;code&gt;unsigned short&lt;/code&gt; , &lt;code&gt;unsigned int&lt;/code&gt; , &lt;code&gt;long&lt;/code&gt; , &lt;code&gt;unsigned long&lt;/code&gt; , &lt;code&gt;long long&lt;/code&gt; , &lt;code&gt;unsigned long long&lt;/code&gt; , &lt;code&gt;float&lt;/code&gt; , &lt;code&gt;double&lt;/code&gt; , &lt;code&gt;long double&lt;/code&gt; 및 &lt;code&gt;void*&lt;/code&gt; 유형 이 지원됩니다. 표준 형식화 입력 연산자 (예 : &lt;code&gt;cin &amp;gt;&amp;gt; n;&lt;/code&gt; ) 는 I / O 스트림 로캘 의 &lt;code&gt;std::num_get&lt;/code&gt; 패싯을 사용 하여 숫자의 텍스트 표현을 구문 분석합니다.</target>
        </trans-unit>
        <trans-unit id="5b5d2163cf744d49878474be2cea0c1c070c5bb4" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;std::num_put&lt;/code&gt; encapsulates the rules for formatting numeric values as strings. Specifically, the types &lt;code&gt;bool&lt;/code&gt;, &lt;code&gt;long&lt;/code&gt;, &lt;code&gt;unsigned long&lt;/code&gt;, &lt;code&gt;long long&lt;/code&gt;, &lt;code&gt;unsigned long long&lt;/code&gt;, &lt;code&gt;double&lt;/code&gt;, &lt;code&gt;long double&lt;/code&gt;, &lt;code&gt;void*&lt;/code&gt;, and of all types implicitly convertible to these (such as &lt;code&gt;int&lt;/code&gt; or &lt;code&gt;float&lt;/code&gt;) are supported. The standard formatting output operators (such as &lt;code&gt;cout &amp;lt;&amp;lt; n;&lt;/code&gt;) use the &lt;code&gt;std::num_put&lt;/code&gt; facet of the I/O stream's locale to generate text representation of numbers.</source>
          <target state="translated">&lt;code&gt;std::num_put&lt;/code&gt; 클래스는 숫자 값을 문자열로 형식화하기위한 규칙을 캡슐화합니다. 특히, &lt;code&gt;bool&lt;/code&gt; , &lt;code&gt;long&lt;/code&gt; , &lt;code&gt;unsigned long&lt;/code&gt; , &lt;code&gt;long long&lt;/code&gt; , &lt;code&gt;unsigned long long&lt;/code&gt; , &lt;code&gt;double&lt;/code&gt; , &lt;code&gt;long double&lt;/code&gt; , &lt;code&gt;void*&lt;/code&gt; 및 이러한 유형으로 암시 적으로 변환 가능한 모든 유형 (예 : &lt;code&gt;int&lt;/code&gt; 또는 &lt;code&gt;float&lt;/code&gt; )이 지원됩니다. 표준 형식화 출력 연산자 (예 : &lt;code&gt;cout &amp;lt;&amp;lt; n;&lt;/code&gt; ) 는 I / O 스트림 로케일 의 &lt;code&gt;std::num_put&lt;/code&gt; 패싯을 사용하여 숫자의 텍스트 표현을 생성합니다.</target>
        </trans-unit>
        <trans-unit id="2db94e2e9b27577549ad5dbfa411180a72d14ffd" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;std::partial_ordering&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;std::partial_ordering&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="15b356934b9560f59052936cbebb5faef8aac92f" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;std::ranges::dangling&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;std::ranges::dangling&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="be6559e7233697281fa949a8aac1bfca3fdb2abc" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;std::ranges::filter_view::iterator&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;std::ranges::filter_view::iterator&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6f515ead9c025fe00ebd1e8c15ddc2d1712369c1" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;std::ranges::filter_view::sentinel&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;std::ranges::filter_view::sentinel&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f0b63d56a25465b5780d9d9e016265d6a3d9ed49" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;std::ranges::iota_view::iterator&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;std::ranges::iota_view::iterator&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="74f49ddb7548f34d3374bbb746d8e7baa9114f09" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;std::ranges::iota_view::sentinel&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;std::ranges::iota_view::sentinel&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="93a7b1173d54ee7c2a8ba1fe40ddcf36e37d10d2" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;std::ranges::split_view::outer_iterator::value_type&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;std::ranges::split_view::outer_iterator::value_type&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3a406d67b2f324ddc8d7548db8957917662608e2" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;std::scoped_lock&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;std::scoped_lock&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0665f5596b2117f0ec24a8236b3bbae827974447" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;std::span&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;std::span&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7176b002c1611d3ff662b453e899a612b8e6f386" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;std::strong_equality&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;std::strong_equality&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="db087cbc38ce822c416ad8963fb69d78f435ff55" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;std::strong_ordering&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;std::strong_ordering&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b732d9ede942e4563b063cd853a93634cbfb46e4" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;std::unreachable_sentinel_t&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;std::unreachable_sentinel_t&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b0b0fe0b1e5b3cd0c8cb822f84e2ad1523abd3a4" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;std::weak_equality&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;std::weak_equality&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f8d90d1039711aa6130893b781a9170e3a6ee7a6" translate="yes" xml:space="preserve">
          <source>Class &lt;code&gt;std::weak_ordering&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;std::weak_ordering&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="be684f82b580772f2bf333f01c06af579befd2c4" translate="yes" xml:space="preserve">
          <source>Class Template Argument Deduction</source>
          <target state="translated">클래스 템플릿 인수 공제</target>
        </trans-unit>
        <trans-unit id="e1590b2bbbf9b91073b1edac4e08eb8ecd4f3aea" translate="yes" xml:space="preserve">
          <source>Class Template which describes properties of a character type (class template)</source>
          <target state="translated">문자 유형의 속성을 설명하는 클래스 템플릿 (클래스 템플릿)</target>
        </trans-unit>
        <trans-unit id="a0b6794484318d01a37d27b070e3512e6e42922e" translate="yes" xml:space="preserve">
          <source>Class ctype encapsulates character classification features. All stream input operations performed through &lt;code&gt;&lt;a href=&quot;../io/basic_istream&quot;&gt;std::basic_istream&lt;/a&gt;&amp;lt;charT&amp;gt;&lt;/code&gt; use the &lt;code&gt;std::ctype&amp;lt;charT&amp;gt;&lt;/code&gt; of the locale imbued in the stream to identify whitespace characters for input tokenization. Stream output operations apply &lt;code&gt;std::ctype&amp;lt;charT&amp;gt;::widen()&lt;/code&gt; to narrow-character arguments prior to output.</source>
          <target state="translated">클래스 ctype은 문자 분류 기능을 캡슐화합니다. &lt;code&gt;&lt;a href=&quot;../io/basic_istream&quot;&gt;std::basic_istream&lt;/a&gt;&amp;lt;charT&amp;gt;&lt;/code&gt; 통해 수행 된 모든 스트림 입력 조작 은 입력 토큰 화를위한 공백 문자를 식별하기 위해 스트림에 임베드 된 로케일 의 &lt;code&gt;std::ctype&amp;lt;charT&amp;gt;&lt;/code&gt; 을 사용합니다. 스트림 출력 작업은 &lt;code&gt;std::ctype&amp;lt;charT&amp;gt;::widen()&lt;/code&gt; 을 출력하기 전에 좁은 문자 인수에 적용합니다.</target>
        </trans-unit>
        <trans-unit id="40c69a9ab1aa40a9a4ae362841d5877c79410c42" translate="yes" xml:space="preserve">
          <source>Class declaration</source>
          <target state="translated">클래스 선언</target>
        </trans-unit>
        <trans-unit id="605f02439c667a4d79138c11b3d74e5ef1d07dd8" translate="yes" xml:space="preserve">
          <source>Class definition</source>
          <target state="translated">클래스 정의</target>
        </trans-unit>
        <trans-unit id="472f53373134102f0fb258749c1c8d7ea1334977" translate="yes" xml:space="preserve">
          <source>Class for representing and manipulating arrays of values</source>
          <target state="translated">값의 배열을 표현하고 조작하는 클래스</target>
        </trans-unit>
        <trans-unit id="a7bfb081a7dcf084af8fecbf3a278d20629dd928" translate="yes" xml:space="preserve">
          <source>Class member template</source>
          <target state="translated">반원 템플릿</target>
        </trans-unit>
        <trans-unit id="b847528b6f48fd68c33ba29cde1c7e26adff1eeb" translate="yes" xml:space="preserve">
          <source>Class members</source>
          <target state="translated">반원</target>
        </trans-unit>
        <trans-unit id="9fe5489fcf041262e8d1d6ea1e7b24f4c0c351cc" translate="yes" xml:space="preserve">
          <source>Class members cannot be captured explicitly by a capture without initializer (as mentioned above, only &lt;a href=&quot;objects&quot;&gt;variables&lt;/a&gt; are permitted in the capture list):</source>
          <target state="translated">이니셜 라이저가없는 캡처는 클래스 멤버를 명시 적으로 캡처 할 수 없습니다 (위에서 언급 한 것처럼 &lt;a href=&quot;objects&quot;&gt;변수&lt;/a&gt; 만 캡처 목록에 허용됨).</target>
        </trans-unit>
        <trans-unit id="8d9da8a09a01c92b2448487cff351a8370775252" translate="yes" xml:space="preserve">
          <source>Class scope</source>
          <target state="translated">수업 범위</target>
        </trans-unit>
        <trans-unit id="8e5f63840dee990b459e98e462251117cdb9a3ee" translate="yes" xml:space="preserve">
          <source>Class template</source>
          <target state="translated">수업 템플릿</target>
        </trans-unit>
        <trans-unit id="77962b33dabb8afcda0c8c042930fc01da9c3007" translate="yes" xml:space="preserve">
          <source>Class template &lt;code&gt;&lt;a href=&quot;../atomic/atomic&quot;&gt;std::atomic&lt;/a&gt;&lt;/code&gt;'s specialization for &lt;code&gt;&lt;a href=&quot;../memory/shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 템플릿 &lt;code&gt;&lt;a href=&quot;../atomic/atomic&quot;&gt;std::atomic&lt;/a&gt;&lt;/code&gt; 의 &lt;code&gt;&lt;a href=&quot;../memory/shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&lt;/code&gt; 전문화</target>
        </trans-unit>
        <trans-unit id="abf292d309bc8d38e1084f895f8bfafbcc300b81" translate="yes" xml:space="preserve">
          <source>Class template &lt;code&gt;&lt;a href=&quot;../atomic/atomic&quot;&gt;std::atomic&lt;/a&gt;&lt;/code&gt;'s specialization for &lt;code&gt;&lt;a href=&quot;../memory/weak_ptr&quot;&gt;std::weak_ptr&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 템플릿 &lt;code&gt;&lt;a href=&quot;../atomic/atomic&quot;&gt;std::atomic&lt;/a&gt;&lt;/code&gt; 의 &lt;code&gt;&lt;a href=&quot;../memory/weak_ptr&quot;&gt;std::weak_ptr&lt;/a&gt;&lt;/code&gt; 전문화</target>
        </trans-unit>
        <trans-unit id="403762519e9b4d168b8d2f33b5a818a2dcbfb9aa" translate="yes" xml:space="preserve">
          <source>Class template &lt;code&gt;&lt;a href=&quot;../iterator/back_insert_iterator&quot;&gt;std::back_insert_iterator&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 템플릿 &lt;code&gt;&lt;a href=&quot;../iterator/back_insert_iterator&quot;&gt;std::back_insert_iterator&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c7cb5d69819c4acc58cd4caa5b139e413371be02" translate="yes" xml:space="preserve">
          <source>Class template &lt;code&gt;&lt;a href=&quot;../iterator/front_insert_iterator&quot;&gt;std::front_insert_iterator&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 템플릿 &lt;code&gt;&lt;a href=&quot;../iterator/front_insert_iterator&quot;&gt;std::front_insert_iterator&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9063331fa57b8ae5f7a8cc9dbf103c67fd8d2cbe" translate="yes" xml:space="preserve">
          <source>Class template &lt;code&gt;&lt;a href=&quot;../iterator/insert_iterator&quot;&gt;std::insert_iterator&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 템플릿 &lt;code&gt;&lt;a href=&quot;../iterator/insert_iterator&quot;&gt;std::insert_iterator&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3f1f5b3dacb7774ba44e38cfea4ad9a3b69c45a4" translate="yes" xml:space="preserve">
          <source>Class template &lt;code&gt;&lt;a href=&quot;../iterator/istream_iterator&quot;&gt;std::istream_iterator&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 템플릿 &lt;code&gt;&lt;a href=&quot;../iterator/istream_iterator&quot;&gt;std::istream_iterator&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="73ed2307341fdeedf1bdfadfc05f76bab8e562cf" translate="yes" xml:space="preserve">
          <source>Class template &lt;code&gt;&lt;a href=&quot;../iterator/istreambuf_iterator&quot;&gt;std::istreambuf_iterator&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 템플릿 &lt;code&gt;&lt;a href=&quot;../iterator/istreambuf_iterator&quot;&gt;std::istreambuf_iterator&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="58cb7403d329008e051f9e0f269f430368372550" translate="yes" xml:space="preserve">
          <source>Class template &lt;code&gt;&lt;a href=&quot;../iterator/iterator&quot;&gt;std::iterator&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 템플릿 &lt;code&gt;&lt;a href=&quot;../iterator/iterator&quot;&gt;std::iterator&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="30c3c476f50424b5b7799320e7ca878653770ca6" translate="yes" xml:space="preserve">
          <source>Class template &lt;code&gt;&lt;a href=&quot;../iterator/iterator_traits&quot;&gt;std::iterator_traits&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 템플릿 &lt;code&gt;&lt;a href=&quot;../iterator/iterator_traits&quot;&gt;std::iterator_traits&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8bfab9a507d8b73b213c51232805a9e4f95c8dc0" translate="yes" xml:space="preserve">
          <source>Class template &lt;code&gt;&lt;a href=&quot;../iterator/move_iterator&quot;&gt;std::move_iterator&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 템플릿 &lt;code&gt;&lt;a href=&quot;../iterator/move_iterator&quot;&gt;std::move_iterator&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="72f31865abf4ce1bed5ec5b7dc2b9e43ffd1f859" translate="yes" xml:space="preserve">
          <source>Class template &lt;code&gt;&lt;a href=&quot;../iterator/ostream_iterator&quot;&gt;std::ostream_iterator&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 템플릿 &lt;code&gt;&lt;a href=&quot;../iterator/ostream_iterator&quot;&gt;std::ostream_iterator&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="af4180e5f43ffad8027411aa67c9e56aca6d00d9" translate="yes" xml:space="preserve">
          <source>Class template &lt;code&gt;&lt;a href=&quot;../iterator/ostreambuf_iterator&quot;&gt;std::ostreambuf_iterator&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 템플릿 &lt;code&gt;&lt;a href=&quot;../iterator/ostreambuf_iterator&quot;&gt;std::ostreambuf_iterator&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="27ce4511ad5de544957763d2772f455e6e67ce24" translate="yes" xml:space="preserve">
          <source>Class template &lt;code&gt;&lt;a href=&quot;../iterator/reverse_iterator&quot;&gt;std::reverse_iterator&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 템플릿 &lt;code&gt;&lt;a href=&quot;../iterator/reverse_iterator&quot;&gt;std::reverse_iterator&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8ab895d4f9d22823dca4769fd1e34cd8ff51187c" translate="yes" xml:space="preserve">
          <source>Class template &lt;code&gt;&lt;a href=&quot;../memory/allocator&quot;&gt;std::allocator&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 템플릿 &lt;code&gt;&lt;a href=&quot;../memory/allocator&quot;&gt;std::allocator&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="eccd48dfc7705d152d6c31511249885f789a3c74" translate="yes" xml:space="preserve">
          <source>Class template &lt;code&gt;&lt;a href=&quot;../memory/allocator_traits&quot;&gt;std::allocator_traits&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 템플릿 &lt;code&gt;&lt;a href=&quot;../memory/allocator_traits&quot;&gt;std::allocator_traits&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7d3d95cd1a92a1098ff8d23564d9bbacd6bb4fe3" translate="yes" xml:space="preserve">
          <source>Class template &lt;code&gt;&lt;a href=&quot;../memory/default_delete&quot;&gt;std::default_delete&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 템플릿 &lt;code&gt;&lt;a href=&quot;../memory/default_delete&quot;&gt;std::default_delete&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fcb6a26f6dad12b591dac7d84a13686a04c2e3b1" translate="yes" xml:space="preserve">
          <source>Class template &lt;code&gt;&lt;a href=&quot;../memory/enable_shared_from_this&quot;&gt;std::enable_shared_from_this&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 템플릿 &lt;code&gt;&lt;a href=&quot;../memory/enable_shared_from_this&quot;&gt;std::enable_shared_from_this&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c358f7f1c9b4ad9d741113898b5aa73ba0f7b7bd" translate="yes" xml:space="preserve">
          <source>Class template &lt;code&gt;&lt;a href=&quot;../memory/owner_less&quot;&gt;std::owner_less&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 템플릿 &lt;code&gt;&lt;a href=&quot;../memory/owner_less&quot;&gt;std::owner_less&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="297ed4e9e0dd7d04a6435cf5ff64e3cf745bebf5" translate="yes" xml:space="preserve">
          <source>Class template &lt;code&gt;&lt;a href=&quot;../memory/pointer_traits&quot;&gt;std::pointer_traits&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 템플릿 &lt;code&gt;&lt;a href=&quot;../memory/pointer_traits&quot;&gt;std::pointer_traits&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5d4f37e62346a9130a1c29c6aeba6a05947d1cef" translate="yes" xml:space="preserve">
          <source>Class template &lt;code&gt;&lt;a href=&quot;../memory/polymorphic_allocator&quot;&gt;std::pmr::polymorphic_allocator&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 템플릿 &lt;code&gt;&lt;a href=&quot;../memory/polymorphic_allocator&quot;&gt;std::pmr::polymorphic_allocator&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="720c90a98b18cf777a423c6a77c9c39d2c245aec" translate="yes" xml:space="preserve">
          <source>Class template &lt;code&gt;&lt;a href=&quot;../memory/scoped_allocator_adaptor&quot;&gt;std::scoped_allocator_adaptor&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 템플릿 &lt;code&gt;&lt;a href=&quot;../memory/scoped_allocator_adaptor&quot;&gt;std::scoped_allocator_adaptor&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="18bc2495317a5809c04f2a1120938b919ef72924" translate="yes" xml:space="preserve">
          <source>Class template &lt;code&gt;&lt;a href=&quot;../memory/shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 템플릿 &lt;code&gt;&lt;a href=&quot;../memory/shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0b22a6e9182693a56b2f1b1067a0d614cc382a18" translate="yes" xml:space="preserve">
          <source>Class template &lt;code&gt;&lt;a href=&quot;../memory/unique_ptr&quot;&gt;std::unique_ptr&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 템플릿 &lt;code&gt;&lt;a href=&quot;../memory/unique_ptr&quot;&gt;std::unique_ptr&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="274a5ab6ff02637466684c02db064516bd5a3401" translate="yes" xml:space="preserve">
          <source>Class template &lt;code&gt;&lt;a href=&quot;../memory/weak_ptr&quot;&gt;std::weak_ptr&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 템플릿 &lt;code&gt;&lt;a href=&quot;../memory/weak_ptr&quot;&gt;std::weak_ptr&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cbe8acefc8214cec0fd02dbca5eecefee9eed84b" translate="yes" xml:space="preserve">
          <source>Class template &lt;code&gt;&lt;a href=&quot;../string/basic_string&quot;&gt;std::basic_string&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 템플릿 &lt;code&gt;&lt;a href=&quot;../string/basic_string&quot;&gt;std::basic_string&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="53f1cfc465ed4b98c05dc86aad75ea1657c2e126" translate="yes" xml:space="preserve">
          <source>Class template &lt;code&gt;&lt;a href=&quot;../string/basic_string_view&quot;&gt;std::basic_string_view&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 템플릿 &lt;code&gt;&lt;a href=&quot;../string/basic_string_view&quot;&gt;std::basic_string_view&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8e1cb250b61f9db5f685b20fbbdfbfebebe00569" translate="yes" xml:space="preserve">
          <source>Class template &lt;code&gt;&lt;a href=&quot;../string/char_traits&quot;&gt;std::char_traits&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 템플릿 &lt;code&gt;&lt;a href=&quot;../string/char_traits&quot;&gt;std::char_traits&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a0fff2614e13350b0ed568dfda30befe6825eba6" translate="yes" xml:space="preserve">
          <source>Class template &lt;code&gt;&lt;a href=&quot;../types/numeric_limits&quot;&gt;std::numeric_limits&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 템플릿 &lt;code&gt;&lt;a href=&quot;../types/numeric_limits&quot;&gt;std::numeric_limits&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="65b64934d5b18467b1d7ca05572aa8684e8dc2d2" translate="yes" xml:space="preserve">
          <source>Class template &lt;code&gt;&lt;a href=&quot;../utility/integer_sequence&quot;&gt;std::integer_sequence&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 템플릿 &lt;code&gt;&lt;a href=&quot;../utility/integer_sequence&quot;&gt;std::integer_sequence&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5491db37fb36bba4362e60a5fbdb3da95b35f638" translate="yes" xml:space="preserve">
          <source>Class template &lt;code&gt;&lt;a href=&quot;../utility/optional&quot;&gt;std::optional&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 템플릿 &lt;code&gt;&lt;a href=&quot;../utility/optional&quot;&gt;std::optional&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="54605339b46b37ba4ed9912fc79a3097cd71ce91" translate="yes" xml:space="preserve">
          <source>Class template &lt;code&gt;&lt;a href=&quot;../utility/variant&quot;&gt;std::variant&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">클래스 템플릿 &lt;code&gt;&lt;a href=&quot;../utility/variant&quot;&gt;std::variant&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ac93803ad048e59af62841f37e77749c54696389" translate="yes" xml:space="preserve">
          <source>Class template &lt;code&gt;std::chrono::duration&lt;/code&gt; represents a time interval.</source>
          <target state="translated">클래스 템플릿 &lt;code&gt;std::chrono::duration&lt;/code&gt; 은 시간 간격을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="facabc3b4225d33df11909f18d71eb363ff9ad46" translate="yes" xml:space="preserve">
          <source>Class template &lt;code&gt;std::chrono::time_point&lt;/code&gt; represents a point in time. It is implemented as if it stores a value of type &lt;code&gt;Duration&lt;/code&gt; indicating the time interval from the start of the &lt;code&gt;Clock&lt;/code&gt;'s epoch.</source>
          <target state="translated">클래스 템플릿 &lt;code&gt;std::chrono::time_point&lt;/code&gt; 는 특정 시점을 나타냅니다. 마치 &lt;code&gt;Clock&lt;/code&gt; 의 시작부터 시간 간격을 나타내는 &lt;code&gt;Duration&lt;/code&gt; 유형의 값을 저장하는 것처럼 구현됩니다 .</target>
        </trans-unit>
        <trans-unit id="0a7b7523068c2c6f58f34449b86bd6ea59d9f3eb" translate="yes" xml:space="preserve">
          <source>Class template &lt;code&gt;std::common_iterator&lt;/code&gt;</source>
          <target state="translated">클래스 템플릿 &lt;code&gt;std::common_iterator&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="879715ec279dd6fd962ad9f8822ca80d9b797898" translate="yes" xml:space="preserve">
          <source>Class template &lt;code&gt;std::counted_iterator&lt;/code&gt;</source>
          <target state="translated">클래스 템플릿 &lt;code&gt;std::counted_iterator&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d8dd5e1d246550d729371f16b7e6952fa710922f" translate="yes" xml:space="preserve">
          <source>Class template &lt;code&gt;std::function&lt;/code&gt; is a general-purpose polymorphic function wrapper. Instances of &lt;code&gt;std::function&lt;/code&gt; can store, copy, and invoke any &lt;a href=&quot;../../named_req/callable&quot;&gt;Callable&lt;/a&gt;</source>
          <target state="translated">클래스 템플릿 &lt;code&gt;std::function&lt;/code&gt; 은 범용 다형성 함수 래퍼입니다. &lt;code&gt;std::function&lt;/code&gt; 인스턴스는 모든 &lt;a href=&quot;../../named_req/callable&quot;&gt;Callable을&lt;/a&gt; 저장, 복사 및 호출 할 수 있습니다</target>
        </trans-unit>
        <trans-unit id="7abf9144af31ed81e0faf80e465322241f6c223d" translate="yes" xml:space="preserve">
          <source>Class template &lt;code&gt;std::incrementable_traits&lt;/code&gt;</source>
          <target state="translated">클래스 템플릿 &lt;code&gt;std::incrementable_traits&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2ad9741dd2a5caba432774f7dfdc0772d3624d52" translate="yes" xml:space="preserve">
          <source>Class template &lt;code&gt;std::messages&lt;/code&gt; is a standard locale facet that encapsulates retrieval of strings from message catalogs, such as the ones provided by GNU &lt;a href=&quot;http://www.gnu.org/s/gettext/&quot;&gt;gettext&lt;/a&gt; or by POSIX &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/functions/catgets.html&quot;&gt;catgets&lt;/a&gt;.</source>
          <target state="translated">클래스 템플릿 &lt;code&gt;std::messages&lt;/code&gt; 는 GNU &lt;a href=&quot;http://www.gnu.org/s/gettext/&quot;&gt;gettext&lt;/a&gt; 또는 POSIX &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/functions/catgets.html&quot;&gt;catgets에서&lt;/a&gt; 제공하는 것과 같은 메시지 카탈로그에서 문자열 검색을 캡슐화하는 표준 로케일 패싯입니다 .</target>
        </trans-unit>
        <trans-unit id="218eb3913b8926d31b0d1a0b8d28ef04e9b2a0f0" translate="yes" xml:space="preserve">
          <source>Class template &lt;code&gt;std::money_get&lt;/code&gt; encapsulates the rules for parsing monetary values from character streams. The standard I/O manipulator &lt;code&gt;&lt;a href=&quot;../io/manip/get_money&quot;&gt;std::get_money&lt;/a&gt;&lt;/code&gt; uses the &lt;code&gt;std::money_get&lt;/code&gt; facet of the I/O stream's locale.</source>
          <target state="translated">클래스 템플릿 &lt;code&gt;std::money_get&lt;/code&gt; 은 문자 스트림에서 통화 값을 구문 분석하기위한 규칙을 캡슐화합니다. 표준 I / O 조작기 &lt;code&gt;&lt;a href=&quot;../io/manip/get_money&quot;&gt;std::get_money&lt;/a&gt;&lt;/code&gt; 는 I / O 스트림 로케일 의 &lt;code&gt;std::money_get&lt;/code&gt; 패싯을 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="ee923e231d7f66cf851734f4875495ee92d38b48" translate="yes" xml:space="preserve">
          <source>Class template &lt;code&gt;std::move_sentinel&lt;/code&gt;</source>
          <target state="translated">클래스 템플릿 &lt;code&gt;std::move_sentinel&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9a8d9424c8bd20ae8205becc5297b05765e9a7b6" translate="yes" xml:space="preserve">
          <source>Class template &lt;code&gt;std::projected&lt;/code&gt;</source>
          <target state="translated">클래스 템플릿 &lt;code&gt;std::projected&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="65e72a83da9a2c737ffde5928a5005125155e4f0" translate="yes" xml:space="preserve">
          <source>Class template &lt;code&gt;std::ranges::common_view&lt;/code&gt;</source>
          <target state="translated">클래스 템플릿 &lt;code&gt;std::ranges::common_view&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2cf801c44a1a365a8e515f5e31813eaf2936a9dd" translate="yes" xml:space="preserve">
          <source>Class template &lt;code&gt;std::ranges::empty_view&lt;/code&gt;</source>
          <target state="translated">클래스 템플릿 &lt;code&gt;std::ranges::empty_view&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="df024de640f2c42b0b195ced500d0899aaa030a6" translate="yes" xml:space="preserve">
          <source>Class template &lt;code&gt;std::ranges::filter_view&lt;/code&gt;</source>
          <target state="translated">클래스 템플릿 &lt;code&gt;std::ranges::filter_view&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="13c3349c1715368b6a71644aa024adaf1e3a93c8" translate="yes" xml:space="preserve">
          <source>Class template &lt;code&gt;std::ranges::iota_view&lt;/code&gt;</source>
          <target state="translated">클래스 템플릿 &lt;code&gt;std::ranges::iota_view&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fd569a4806bed568703a852f965fd2f1c431db32" translate="yes" xml:space="preserve">
          <source>Class template &lt;code&gt;std::ranges::join_view::iterator&lt;/code&gt;</source>
          <target state="translated">클래스 템플릿 &lt;code&gt;std::ranges::join_view::iterator&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8755516b97fd75a94816502c39fc0d3387eca335" translate="yes" xml:space="preserve">
          <source>Class template &lt;code&gt;std::ranges::join_view::sentinel&lt;/code&gt;</source>
          <target state="translated">클래스 템플릿 &lt;code&gt;std::ranges::join_view::sentinel&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a88bd35524cd8b67fd9b1139a2b2c7079573afbf" translate="yes" xml:space="preserve">
          <source>Class template &lt;code&gt;std::ranges::join_view&lt;/code&gt;</source>
          <target state="translated">클래스 템플릿 &lt;code&gt;std::ranges::join_view&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c9c1634a8e2b1cf810c0e706fc0e60e2de46d6eb" translate="yes" xml:space="preserve">
          <source>Class template &lt;code&gt;std::ranges::ref_view&lt;/code&gt;</source>
          <target state="translated">클래스 템플릿 &lt;code&gt;std::ranges::ref_view&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cda77d0b2cdea95866da797a8941e28de6806511" translate="yes" xml:space="preserve">
          <source>Class template &lt;code&gt;std::ranges::reverse_view&lt;/code&gt;</source>
          <target state="translated">클래스 템플릿 &lt;code&gt;std::ranges::reverse_view&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d648f6cad6307c2398bb309d0a2a3dcc29e4b507" translate="yes" xml:space="preserve">
          <source>Class template &lt;code&gt;std::ranges::split_&amp;shy;view&lt;/code&gt;</source>
          <target state="translated">클래스 템플릿 &lt;code&gt;std::ranges::split_&amp;shy;view&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e2a2661a5747aef2eacc491b8acbfe14fa141af4" translate="yes" xml:space="preserve">
          <source>Class template &lt;code&gt;std::ranges::split_view::inner_iterator&lt;/code&gt;</source>
          <target state="translated">클래스 템플릿 &lt;code&gt;std::ranges::split_view::inner_iterator&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b663ae9ea634f2be471d3ec7ceb243449834adde" translate="yes" xml:space="preserve">
          <source>Class template &lt;code&gt;std::ranges::split_view::outer_iterator&lt;/code&gt;</source>
          <target state="translated">클래스 템플릿 &lt;code&gt;std::ranges::split_view::outer_iterator&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1b227d9bd4a8f4b3436657f768cc23c8566412fe" translate="yes" xml:space="preserve">
          <source>Class template &lt;code&gt;std::ranges::subrange&lt;/code&gt;</source>
          <target state="translated">클래스 템플릿 &lt;code&gt;std::ranges::subrange&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="937dbaf03d50b29c3ac444720fba19809bef88d6" translate="yes" xml:space="preserve">
          <source>Class template &lt;code&gt;std::ranges::take_view::sentinel&lt;/code&gt;</source>
          <target state="translated">클래스 템플릿 &lt;code&gt;std::ranges::take_view::sentinel&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="23bbb76ff9efac9d7561de1d1bc97ee0d08630a0" translate="yes" xml:space="preserve">
          <source>Class template &lt;code&gt;std::ranges::take_view&lt;/code&gt;</source>
          <target state="translated">클래스 템플릿 &lt;code&gt;std::ranges::take_view&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="db2fc571f0edd11eb46b22e85091e59efb19c9f0" translate="yes" xml:space="preserve">
          <source>Class template &lt;code&gt;std::ranges::transform_view::iterator&lt;/code&gt;</source>
          <target state="translated">클래스 템플릿 &lt;code&gt;std::ranges::transform_view::iterator&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cb4298aa9a4c7166d04eda08e2544031ec38a24e" translate="yes" xml:space="preserve">
          <source>Class template &lt;code&gt;std::ranges::transform_view::sentinel&lt;/code&gt;</source>
          <target state="translated">클래스 템플릿 &lt;code&gt;std::ranges::transform_view::sentinel&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="982f5334766682774bba919abc71946f0c25ab91" translate="yes" xml:space="preserve">
          <source>Class template &lt;code&gt;std::ranges::transform_view&lt;/code&gt;</source>
          <target state="translated">클래스 템플릿 &lt;code&gt;std::ranges::transform_view&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="587a56797b6e9393e24f38ce536ca378a8f4b7cb" translate="yes" xml:space="preserve">
          <source>Class template &lt;code&gt;std::ranges::view_interface&lt;/code&gt;</source>
          <target state="translated">클래스 템플릿 &lt;code&gt;std::ranges::view_interface&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="63964f1264010eecc3f4e80dabe86c903978ebab" translate="yes" xml:space="preserve">
          <source>Class template &lt;code&gt;std::readable_traits&lt;/code&gt;</source>
          <target state="translated">클래스 템플릿 &lt;code&gt;std::readable_traits&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b85a518e34b92981dfd653705179b611bbe03141" translate="yes" xml:space="preserve">
          <source>Class template &lt;code&gt;std::time_get&lt;/code&gt; encapsulates date and time parsing rules. The I/O manipulator &lt;code&gt;&lt;a href=&quot;../io/manip/get_time&quot;&gt;std::get_time&lt;/a&gt;&lt;/code&gt; uses the &lt;code&gt;std::time_get&lt;/code&gt; facet of the I/O stream's locale to convert text input to a &lt;code&gt;&lt;a href=&quot;../chrono/c/tm&quot;&gt;std::tm&lt;/a&gt;&lt;/code&gt; object.</source>
          <target state="translated">클래스 템플릿 &lt;code&gt;std::time_get&lt;/code&gt; 날짜 및 시간 구문 분석 규칙을 캡슐화합니다. I / O 조작기 &lt;code&gt;&lt;a href=&quot;../io/manip/get_time&quot;&gt;std::get_time&lt;/a&gt;&lt;/code&gt; 은 I / O 스트림 로케일 의 &lt;code&gt;std::time_get&lt;/code&gt; 패싯을 사용하여 텍스트 입력을 &lt;code&gt;&lt;a href=&quot;../chrono/c/tm&quot;&gt;std::tm&lt;/a&gt;&lt;/code&gt; 오브젝트 로 변환 합니다.</target>
        </trans-unit>
        <trans-unit id="ba932376118b3d153ffdea982b5be6debd7004ca" translate="yes" xml:space="preserve">
          <source>Class template &lt;code&gt;std::time_put&lt;/code&gt; encapsulates date and time formatting rules. The I/O manipulator &lt;code&gt;&lt;a href=&quot;../io/manip/put_time&quot;&gt;std::put_time&lt;/a&gt;&lt;/code&gt; uses the &lt;code&gt;std::time_put&lt;/code&gt; facet of the I/O stream's locale to generate text representation of an &lt;code&gt;&lt;a href=&quot;../chrono/c/tm&quot;&gt;std::tm&lt;/a&gt;&lt;/code&gt; object.</source>
          <target state="translated">클래스 템플릿 &lt;code&gt;std::time_put&lt;/code&gt; 날짜 및 시간 형식 규칙을 캡슐화합니다. I / O 조작기 &lt;code&gt;&lt;a href=&quot;../io/manip/put_time&quot;&gt;std::put_time&lt;/a&gt;&lt;/code&gt; 은 I / O 스트림 로케일 의 &lt;code&gt;std::time_put&lt;/code&gt; 패싯을 사용하여 &lt;code&gt;&lt;a href=&quot;../chrono/c/tm&quot;&gt;std::tm&lt;/a&gt;&lt;/code&gt; 오브젝트 의 텍스트 표현을 생성 합니다.</target>
        </trans-unit>
        <trans-unit id="647ff82fe845ee3432cdfa44050e9c0afce99715" translate="yes" xml:space="preserve">
          <source>Class template &lt;code&gt;std::tuple&lt;/code&gt; is a fixed-size collection of heterogeneous values. It is a generalization of &lt;code&gt;&lt;a href=&quot;pair&quot;&gt;std::pair&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">클래스 템플릿 &lt;code&gt;std::tuple&lt;/code&gt; 은 고정 된 크기의 이기종 값 모음입니다. &lt;code&gt;&lt;a href=&quot;pair&quot;&gt;std::pair&lt;/a&gt;&lt;/code&gt; 의 일반화입니다 .</target>
        </trans-unit>
        <trans-unit id="fd944186a9505d1645b560f5147ff144c3a60856" translate="yes" xml:space="preserve">
          <source>Class template &lt;code&gt;std::wstring_convert&lt;/code&gt; performs conversions between byte string &lt;code&gt;&lt;a href=&quot;../string/basic_string&quot;&gt;std::string&lt;/a&gt;&lt;/code&gt; and wide string &lt;code&gt;&lt;a href=&quot;../string/basic_string&quot;&gt;std::basic_string&lt;/a&gt;&amp;lt;Elem&amp;gt;&lt;/code&gt;, using an individual code conversion facet &lt;code&gt;Codecvt&lt;/code&gt;. &lt;code&gt;std::wstring_convert&lt;/code&gt; assumes ownership of the conversion facet, and cannot use a facet managed by a locale. The standard facets suitable for use with &lt;code&gt;std::wstring_convert&lt;/code&gt; are &lt;code&gt;&lt;a href=&quot;codecvt_utf8&quot;&gt;std::codecvt_utf8&lt;/a&gt;&lt;/code&gt; for UTF-8/UCS2 and UTF-8/UCS4 conversions and &lt;code&gt;&lt;a href=&quot;codecvt_utf8_utf16&quot;&gt;std::codecvt_utf8_utf16&lt;/a&gt;&lt;/code&gt; for UTF-8/UTF-16 conversions.</source>
          <target state="translated">클래스 템플릿 &lt;code&gt;std::wstring_convert&lt;/code&gt; 는 개별 코드 변환 패싯 &lt;code&gt;Codecvt&lt;/code&gt; 를 사용하여 바이트 문자열 &lt;code&gt;&lt;a href=&quot;../string/basic_string&quot;&gt;std::string&lt;/a&gt;&lt;/code&gt; 과 와이드 문자열 &lt;code&gt;&lt;a href=&quot;../string/basic_string&quot;&gt;std::basic_string&lt;/a&gt;&amp;lt;Elem&amp;gt;&lt;/code&gt; 사이에서 변환을 수행합니다 . &lt;code&gt;std::wstring_convert&lt;/code&gt; 는 변환 패싯의 소유권을 가정하며 로케일이 관리하는 패싯을 사용할 수 없습니다. &lt;code&gt;std::wstring_convert&lt;/code&gt; 와 함께 사용하기에 적합한 표준 패싯 은 UTF-8 / UCS2의 경우 &lt;code&gt;&lt;a href=&quot;codecvt_utf8&quot;&gt;std::codecvt_utf8&lt;/a&gt;&lt;/code&gt; 및 UTF-8 / UCS4의 변환 및 UTF-8 / UTF-16 변환의 경우 &lt;code&gt;&lt;a href=&quot;codecvt_utf8_utf16&quot;&gt;std::codecvt_utf8_utf16&lt;/a&gt;&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="177e989feeb6243caf3dd32c61b2cf0a8676b894" translate="yes" xml:space="preserve">
          <source>Class template argument deduction is only performed if no template argument list is present. If a template argument list is specified, deduction does not take place.</source>
          <target state="translated">클래스 템플릿 인수 공제는 템플릿 인수 목록이없는 경우에만 수행됩니다. 템플리트 인수 목록이 지정되면 추론이 발생하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="03892e69a4f87e20c2b8c68b47afa9421d14c51d" translate="yes" xml:space="preserve">
          <source>Class template argument deduction of aggregates typically requires deduction guides:</source>
          <target state="translated">집합의 클래스 템플릿 인수 공제에는 일반적으로 공제 가이드가 필요합니다.</target>
        </trans-unit>
        <trans-unit id="e232169bb737df654b9d91c9da1ab1b0f43c38f0" translate="yes" xml:space="preserve">
          <source>Class template argument deduction(since C++17)</source>
          <target state="translated">클래스 템플릿 인수 공제 (C ++ 17부터)</target>
        </trans-unit>
        <trans-unit id="baa82d2e5eb3ae53aae61985e5dc6a850317ccd7" translate="yes" xml:space="preserve">
          <source>Class template instantiation</source>
          <target state="translated">클래스 템플릿 인스턴스화</target>
        </trans-unit>
        <trans-unit id="a3338976be57342a67820317052616a4efd25232" translate="yes" xml:space="preserve">
          <source>Class template representing a text string object (class template)</source>
          <target state="translated">텍스트 문자열 객체를 나타내는 클래스 템플릿 (클래스 템플릿)</target>
        </trans-unit>
        <trans-unit id="d25187eb92886edc7f28f54eaf6e006408286303" translate="yes" xml:space="preserve">
          <source>Class types in &lt;a href=&quot;language/template_parameters#Non-type_template_parameter&quot;&gt;non-type template parameters&lt;/a&gt;</source>
          <target state="translated">유형이 &lt;a href=&quot;language/template_parameters#Non-type_template_parameter&quot;&gt;아닌 템플릿 매개 변수의&lt;/a&gt; 클래스 유형</target>
        </trans-unit>
        <trans-unit id="9b0e675119a196d80c1c86c7a3da7463a16aa06d" translate="yes" xml:space="preserve">
          <source>Class-specific overloads</source>
          <target state="translated">클래스 별 과부하</target>
        </trans-unit>
        <trans-unit id="0e5cfd73a7d6fe7c0a5bb9effb1c49f06fbed091" translate="yes" xml:space="preserve">
          <source>Class&lt;code&gt;::&lt;/code&gt;Class(...)&lt;code&gt;:&lt;/code&gt;ref&lt;code&gt;(&lt;/code&gt;object&lt;code&gt;)&lt;/code&gt; {...}</source>
          <target state="translated">클래스 &lt;code&gt;::&lt;/code&gt; 클래스 (...) &lt;code&gt;:&lt;/code&gt; ref &lt;code&gt;(&lt;/code&gt; object &lt;code&gt;)&lt;/code&gt; {...}</target>
        </trans-unit>
        <trans-unit id="e65446ac8324074fe28a00d342e4ffa8fe480832" translate="yes" xml:space="preserve">
          <source>Class&lt;code&gt;::&lt;/code&gt;Class&lt;code&gt;()&amp;nbsp;: &lt;/code&gt;member&lt;code&gt;(&lt;/code&gt;args, ...&lt;code&gt;) { &lt;/code&gt;...&lt;code&gt; } &lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;::&lt;/code&gt; 클래스 &lt;code&gt;()&amp;nbsp;: &lt;/code&gt; 멤버 &lt;code&gt;(&lt;/code&gt; args, ... &lt;code&gt;) { &lt;/code&gt; ... &lt;code&gt; } &lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cd637451d2bd15f6ef8e1220a1201f76a5cf0a8a" translate="yes" xml:space="preserve">
          <source>Class&lt;code&gt;::&lt;/code&gt;Class&lt;code&gt;()&amp;nbsp;: &lt;/code&gt;member&lt;code&gt;{&lt;/code&gt;arg1, arg2, ...&lt;code&gt;} {...&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;::&lt;/code&gt; 클래스 &lt;code&gt;()&amp;nbsp;: &lt;/code&gt; 멤버 &lt;code&gt;{&lt;/code&gt; arg1, arg2, ... &lt;code&gt;} {...&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d68e03cabfcb52cde527d6b08919231c8afd582e" translate="yes" xml:space="preserve">
          <source>Class&lt;code&gt;::&lt;/code&gt;Class&lt;code&gt;(&lt;/code&gt;...&lt;code&gt;)&lt;/code&gt;&lt;code&gt;:&lt;/code&gt;member&lt;code&gt;()&lt;/code&gt;&lt;code&gt;{&lt;/code&gt;...&lt;code&gt;}&lt;/code&gt;</source>
          <target state="translated">Class&lt;code&gt;::&lt;/code&gt;Class&lt;code&gt;(&lt;/code&gt;...&lt;code&gt;)&lt;/code&gt;&lt;code&gt;:&lt;/code&gt;member&lt;code&gt;()&lt;/code&gt;&lt;code&gt;{&lt;/code&gt;...&lt;code&gt;}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f2b091ccb80f9273e7b9e093781936c46358982c" translate="yes" xml:space="preserve">
          <source>Class&lt;code&gt;::&lt;/code&gt;Class&lt;code&gt;(&lt;/code&gt;...&lt;code&gt;)&lt;/code&gt;&lt;code&gt;:&lt;/code&gt;member&lt;code&gt;{} &lt;/code&gt;&lt;code&gt;{&lt;/code&gt;...&lt;code&gt;}&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;::&lt;/code&gt; 클래스 &lt;code&gt;(&lt;/code&gt; ... &lt;code&gt;)&lt;/code&gt; &lt;code&gt;:&lt;/code&gt; 멤버 &lt;code&gt;{} &lt;/code&gt; &lt;code&gt;{&lt;/code&gt; ... &lt;code&gt;}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="da00da1fa351cb12dc3541d789cbb516fff2cb37" translate="yes" xml:space="preserve">
          <source>Class&lt;code&gt;{&lt;/code&gt;Tmember&lt;code&gt;=&lt;/code&gt;&lt;code&gt;{ &lt;/code&gt;arg1, arg2, ...&lt;code&gt;}; };&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;{&lt;/code&gt; Tmember &lt;code&gt;=&lt;/code&gt; &lt;code&gt;{ &lt;/code&gt; arg1, arg2, ... &lt;code&gt;}; };&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4329b3c526e08c08ba940e1d6d849fc21981bbc0" translate="yes" xml:space="preserve">
          <source>Class&lt;code&gt;{&lt;/code&gt;Tmember&lt;code&gt;{ &lt;/code&gt;arg1, arg2, ...&lt;code&gt;}; };&lt;/code&gt;</source>
          <target state="translated">클래스 &lt;code&gt;{&lt;/code&gt; Tmember &lt;code&gt;{ &lt;/code&gt; arg1, arg2, ... &lt;code&gt;}; };&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ed1846afee3be21521286932b99e2aeae9e6414a" translate="yes" xml:space="preserve">
          <source>Classes</source>
          <target state="translated">Classes</target>
        </trans-unit>
        <trans-unit id="176c1e69cba9c842cb0e096e7a69973896661a55" translate="yes" xml:space="preserve">
          <source>Classes and structs are user-defined types, defined by class-specifier, which appears in decl-specifier-seq of the &lt;a href=&quot;declarations&quot;&gt;declaration&lt;/a&gt; syntax. The class specifier has the following syntax:</source>
          <target state="translated">클래스와 구조체는 클래스 지정자가 정의한 사용자 정의 형식이며 &lt;a href=&quot;declarations&quot;&gt;선언&lt;/a&gt; 구문 의 decl-specifier-seq에 나타납니다 . 클래스 지정자의 구문은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="c0f469991a1f6e5fca3369584ff089ce830d043f" translate="yes" xml:space="preserve">
          <source>Classes derived from &lt;code&gt;std::basic_streambuf&lt;/code&gt; are permitted to provide more efficient implementations of this function.</source>
          <target state="translated">&lt;code&gt;std::basic_streambuf&lt;/code&gt; 에서 파생 된 클래스 는이 함수를보다 효율적으로 구현할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="76aa9610f80a63830357f7bc830db8e9cb9ac234" translate="yes" xml:space="preserve">
          <source>Classes that have custom destructors, copy/move constructors or copy/move assignment operators should deal exclusively with ownership (which follows from the &lt;a href=&quot;https://en.wikipedia.org/wiki/Single_responsibility_principle&quot;&gt;Single Responsibility Principle&lt;/a&gt;). Other classes should not have custom destructors, copy/move constructors or copy/move assignment operators.&lt;sup id=&quot;cite_ref-1&quot;&gt;&lt;a href=&quot;rule_of_three#cite_note-1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt;</source>
          <target state="translated">사용자 지정 소멸자, 복사 / 이동 생성자 또는 복사 / 이동 할당 연산자가있는 클래스는 소유권을 단독으로 처리해야합니다 (이는 &lt;a href=&quot;https://en.wikipedia.org/wiki/Single_responsibility_principle&quot;&gt;단일 책임 원칙에&lt;/a&gt; 따름 ). 다른 클래스에는 사용자 정의 소멸자, 복사 / 이동 생성자 또는 복사 / 이동 지정 연산자가 없어야합니다. &lt;sup id=&quot;cite_ref-1&quot;&gt;&lt;a href=&quot;rule_of_three#cite_note-1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="c8187cf658cbd40f6684d7715ace0f0b2ff64b8c" translate="yes" xml:space="preserve">
          <source>Classes that manage non-copyable resources through copyable handles may have to declare copy assignment and copy constructor private and not provide their definitions or define them as deleted. This is another application of the rule of three: deleting one and leaving the other to be implicitly-defined will most likely result in errors.</source>
          <target state="translated">복사 가능한 핸들을 통해 복사 할 수없는 리소스를 관리하는 클래스는 복사 할당 및 복사 생성자를 비공개로 선언해야하며 정의를 제공하거나 삭제 된 것으로 정의하지 않아야합니다. 이것은 세 가지 규칙의 또 다른 적용입니다. 하나를 삭제하고 다른 하나를 암시 적으로 정의 된 상태로두면 오류가 발생할 가능성이 높습니다.</target>
        </trans-unit>
        <trans-unit id="ded262423b57c5e1cd785716292f48675cf8f458" translate="yes" xml:space="preserve">
          <source>Classes with open()/close(), lock()/unlock(), or init()/copyFrom()/destroy() member functions are typical examples of non-RAII classes:</source>
          <target state="translated">open () / close (), lock () / unlock () 또는 init () / copyFrom () / destroy () 멤버 함수가있는 클래스는 비 RAII 클래스의 일반적인 예입니다.</target>
        </trans-unit>
        <trans-unit id="f40b3513a67fad08d59508c29093b0920d548847" translate="yes" xml:space="preserve">
          <source>Classes, algorithms and iterators to support regular expression processing</source>
          <target state="translated">정규식 처리를 지원하는 클래스, 알고리즘 및 반복자</target>
        </trans-unit>
        <trans-unit id="60f3174a33e0e6ad10d1a31cac97b9105bdbb9fa" translate="yes" xml:space="preserve">
          <source>Classes, functions, variables, and member template specializations can be explicitly instantiated from their templates. Member functions, member classes, and static data members of class templates can be explicitly instantiated from their member definitions.</source>
          <target state="translated">클래스, 함수, 변수 및 멤버 템플릿 전문화는 해당 템플릿에서 명시 적으로 인스턴스화 할 수 있습니다. 멤버 함수, 멤버 클래스 및 클래스 템플릿의 정적 데이터 멤버는 멤버 정의에서 명시 적으로 인스턴스화 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="94c2a3189e7f7885455350c4c7a8df2d0d6ad1d1" translate="yes" xml:space="preserve">
          <source>Classification</source>
          <target state="translated">Classification</target>
        </trans-unit>
        <trans-unit id="86c73ff296a69ebbcae03a6a87d277af954ca095" translate="yes" xml:space="preserve">
          <source>Classification and comparison</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="678a1418d0dca4dfa7d114655cc6c809563626e4" translate="yes" xml:space="preserve">
          <source>Classifies the wide character &lt;code&gt;wc&lt;/code&gt; using the current C locale's LC_CTYPE category identified by &lt;code&gt;desc&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15f01497dcb0dc9ff458de7e549ab63d367cef96" translate="yes" xml:space="preserve">
          <source>Clears the state of the error condition. Sets the error code to &lt;code&gt;​0​&lt;/code&gt; and error category to &lt;code&gt;&lt;a href=&quot;../generic_category&quot;&gt;std::generic_category&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">오류 상태를 지 웁니다. 로 설정 오류 코드를 &lt;code&gt;​0​&lt;/code&gt; 과 오류 카테고리하는 &lt;code&gt;&lt;a href=&quot;../generic_category&quot;&gt;std::generic_category&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9f779277749e2124f252a80565c928fcfcf7ebab" translate="yes" xml:space="preserve">
          <source>Clears the stored pathname. &lt;a href=&quot;empty&quot;&gt;&lt;code&gt;empty()&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;true&lt;/code&gt; after the call.</source>
          <target state="translated">저장된 경로 이름을 지 웁니다. 호출 후 &lt;a href=&quot;empty&quot;&gt; &lt;code&gt;empty()&lt;/code&gt; &lt;/a&gt; 는 &lt;code&gt;true&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="04f6b3ea183eb9d70981161c4424a6cf525afd9f" translate="yes" xml:space="preserve">
          <source>Clock</source>
          <target state="translated">Clock</target>
        </trans-unit>
        <trans-unit id="0dea3f5e05252f26723f9f3c1ef10955b407f575" translate="yes" xml:space="preserve">
          <source>Clocks</source>
          <target state="translated">Clocks</target>
        </trans-unit>
        <trans-unit id="8135f24349c77ae098ecf2816f850b1b75b8a4d0" translate="yes" xml:space="preserve">
          <source>Closes the associated file.</source>
          <target state="translated">관련 파일을 닫습니다.</target>
        </trans-unit>
        <trans-unit id="4f846d9e8e5a959a36bfa1fbc2c8184ff034cead" translate="yes" xml:space="preserve">
          <source>Closes the given file stream. Any unwritten buffered data are flushed to the OS. Any unread buffered data are discarded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="297e54b0825be1fa09aa24cdadbfcff5d756febf" translate="yes" xml:space="preserve">
          <source>Closure types are not &lt;a href=&quot;../named_req/defaultconstructible&quot;&gt;DefaultConstructible&lt;/a&gt;. Closure types have a deleted(until C++14)no(since C++14) default constructor.</source>
          <target state="translated">클로저 유형은 &lt;a href=&quot;../named_req/defaultconstructible&quot;&gt;DefaultConstructible&lt;/a&gt; 이 아닙니다 . 클로저 유형에는 C ++ 14 이후 기본 생성자가 삭제 된 (C ++ 14까지) 없습니다.</target>
        </trans-unit>
        <trans-unit id="e709ac0e40cd949d76a1510f738d0a49b5510981" translate="yes" xml:space="preserve">
          <source>ClosureType::Captures</source>
          <target state="translated">ClosureType::Captures</target>
        </trans-unit>
        <trans-unit id="85f7e5f171e81031eb5ed82bd0ef8e20588d179d" translate="yes" xml:space="preserve">
          <source>ClosureType::ClosureType()</source>
          <target state="translated">ClosureType::ClosureType()</target>
        </trans-unit>
        <trans-unit id="5a33b73b769c04e7da6522c358d4174f735e829a" translate="yes" xml:space="preserve">
          <source>ClosureType::operator ret(*)(params)()</source>
          <target state="translated">ClosureType :: operator ret (*) (매개 변수) ()</target>
        </trans-unit>
        <trans-unit id="f3227203635fe23d7bad40529d4643e1b138ba60" translate="yes" xml:space="preserve">
          <source>ClosureType::operator()(params)</source>
          <target state="translated">ClosureType::operator()(params)</target>
        </trans-unit>
        <trans-unit id="bbbd20bb5df296018c32a8216f1fe2731d227d1d" translate="yes" xml:space="preserve">
          <source>ClosureType::operator=(const ClosureType&amp;amp;)</source>
          <target state="translated">폐쇄 유형 :: 연산자 = (const 폐쇄 유형 &amp;amp;)</target>
        </trans-unit>
        <trans-unit id="d8b72eea8025a2899beb313ef7914a6f48eb8083" translate="yes" xml:space="preserve">
          <source>ClosureType::~ClosureType()</source>
          <target state="translated">ClosureType::~ClosureType()</target>
        </trans-unit>
        <trans-unit id="2c2833690bafe4231dda0747944446e0c633c7dd" translate="yes" xml:space="preserve">
          <source>Code points</source>
          <target state="translated">코드 포인트</target>
        </trans-unit>
        <trans-unit id="02fa312598de66be3d7b680ebc9923a05fb123ab" translate="yes" xml:space="preserve">
          <source>Code that relies on some particular implementation option (e.g. &lt;code&gt;int n = &lt;a href=&quot;../io/ios_base/fmtflags&quot;&gt;std::ios_base::hex&lt;/a&gt;&lt;/code&gt;), is nonportable because &lt;code&gt;&lt;a href=&quot;../io/ios_base/fmtflags&quot;&gt;std::ios_base::fmtflags&lt;/a&gt;&lt;/code&gt; is not necessarily implicitly convertible to &lt;code&gt;int&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../io/ios_base/fmtflags&quot;&gt;std::ios_base::fmtflags&lt;/a&gt;&lt;/code&gt; 가 반드시 내재적으로 &lt;code&gt;int&lt;/code&gt; 로 변환 될 필요는 없기 때문에 특정 구현 옵션 (예 : &lt;code&gt;int n = &lt;a href=&quot;../io/ios_base/fmtflags&quot;&gt;std::ios_base::hex&lt;/a&gt;&lt;/code&gt; ) 에 의존하는 코드 는 이식 할 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="c23aca48d50263e613b7da1e3252a4ec0fcaf4f3" translate="yes" xml:space="preserve">
          <source>Collating elements are the symbols found in POSIX regular expressions between &lt;code&gt;[.&lt;/code&gt; and &lt;code&gt;.]&lt;/code&gt;. For example, &lt;code&gt;[.a.]&lt;/code&gt; matches the character &lt;code&gt;a&lt;/code&gt; in the C locale. &lt;code&gt;[.tilde.]&lt;/code&gt; matches the character &lt;code&gt;~&lt;/code&gt; in the C locale as well. &lt;code&gt;[.ch.]&lt;/code&gt; matches the digraph &lt;code&gt;ch&lt;/code&gt; in Czech locale, but generates &lt;code&gt;&lt;a href=&quot;../regex_error&quot;&gt;std::regex_error&lt;/a&gt;&lt;/code&gt; with error code &lt;code&gt;&lt;a href=&quot;../error_type&quot;&gt;std::regex_constants::error_collate&lt;/a&gt;&lt;/code&gt; in most other locales.</source>
          <target state="translated">조합 요소는 &lt;code&gt;[.&lt;/code&gt; 사이의 POSIX 정규식에있는 기호 입니다. 그리고 &lt;code&gt;.]&lt;/code&gt; . 예를 들어 &lt;code&gt;[.a.]&lt;/code&gt; 는 C 로캘 의 문자 &lt;code&gt;a&lt;/code&gt; 와 일치합니다 . &lt;code&gt;[.tilde.]&lt;/code&gt; 는 C 로케일의 &lt;code&gt;~&lt;/code&gt; 문자와 일치합니다 . &lt;code&gt;[.ch.]&lt;/code&gt; 는 체코 어 로케일 의 digraph &lt;code&gt;ch&lt;/code&gt; 와 일치 하지만 대부분의 다른 로케일에서 오류 코드 &lt;code&gt;&lt;a href=&quot;../error_type&quot;&gt;std::regex_constants::error_collate&lt;/a&gt;&lt;/code&gt; 와 함께 &lt;code&gt;&lt;a href=&quot;../regex_error&quot;&gt;std::regex_error&lt;/a&gt;&lt;/code&gt; 를 생성 합니다.</target>
        </trans-unit>
        <trans-unit id="60ce571e9fd40583067484c63f2febcaa5424e29" translate="yes" xml:space="preserve">
          <source>Collation order is the dictionary order: the position of the letter in the national alphabet (its</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9ee3deaae2695cf53cbcebec20aed5fb9b594e3" translate="yes" xml:space="preserve">
          <source>Comma</source>
          <target state="translated">Comma</target>
        </trans-unit>
        <trans-unit id="fce06e20e5f7f74aacccab40b59b75a56c8f7305" translate="yes" xml:space="preserve">
          <source>Comments</source>
          <target state="translated">Comments</target>
        </trans-unit>
        <trans-unit id="9ca53da5e821113071f3715b194565952fb756e6" translate="yes" xml:space="preserve">
          <source>Comments serve as a sort of in-code documentation. When inserted into a program, they are effectively ignored by the compiler; they are solely intended to be used as notes by the humans that read source code. Although specific documentation is not part of the C++ standard, several utilities exist that parse comments with different documentation formats.</source>
          <target state="translated">주석은 일종의 코드 내 문서 역할을합니다. 프로그램에 삽입되면 컴파일러에서 효과적으로 무시합니다. 그것들은 오직 소스 코드를 읽는 사람에 의해 노트로 사용되도록 의도 된 것입니다. 특정 문서는 C ++ 표준의 일부는 아니지만 주석을 다른 문서 형식으로 구문 분석하는 여러 유틸리티가 있습니다.</target>
        </trans-unit>
        <trans-unit id="7de90a65241a6cdbd9ade485d777715d99285a1e" translate="yes" xml:space="preserve">
          <source>Common</source>
          <target state="translated">Common</target>
        </trans-unit>
        <trans-unit id="7e71e5a4d24fb6a86866357cb15dc600a6a3b15a" translate="yes" xml:space="preserve">
          <source>Common algorithm requirements</source>
          <target state="translated">일반적인 알고리즘 요구 사항</target>
        </trans-unit>
        <trans-unit id="300b7ca7537f6f7e544d83703decea74261de072" translate="yes" xml:space="preserve">
          <source>Common mathematical functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d05b85b9373c028c966baf6f72eacf6afdf95cd7" translate="yes" xml:space="preserve">
          <source>Common mathematics functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="044d38e8939c8f6fc027ea1c90729d6aca7109d3" translate="yes" xml:space="preserve">
          <source>Common operators</source>
          <target state="translated">일반적인 연산자</target>
        </trans-unit>
        <trans-unit id="1be9224b46d2c85f0e94f36d9edcd967906bddb2" translate="yes" xml:space="preserve">
          <source>Common technique for algorithm selection based on iterator category tags is to use a dispatcher function (the alternative is &lt;code&gt;&lt;a href=&quot;../types/enable_if&quot;&gt;std::enable_if&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">반복자 범주 태그를 기반으로 알고리즘을 선택하는 일반적인 기술은 디스패처 함수를 사용하는 것입니다 (대안은 &lt;code&gt;&lt;a href=&quot;../types/enable_if&quot;&gt;std::enable_if&lt;/a&gt;&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="c5edc16c49d7c56fa7c3079ce8d57383dcdbacae" translate="yes" xml:space="preserve">
          <source>Common use cases include.</source>
          <target state="translated">일반적인 사용 사례는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="be6c18e2823065f27ee0883bb345cd7798be7ea5" translate="yes" xml:space="preserve">
          <source>CommonRange</source>
          <target state="translated">CommonRange</target>
        </trans-unit>
        <trans-unit id="e87e19ce6af085ae2664c3d42fb5efd47a98388f" translate="yes" xml:space="preserve">
          <source>CommonReference</source>
          <target state="translated">CommonReference</target>
        </trans-unit>
        <trans-unit id="7f0684bf7d2ccc47e4f0fbd3d0a0fcd29762867e" translate="yes" xml:space="preserve">
          <source>Commonly overloaded operators have the following typical, canonical forms:&lt;sup id=&quot;cite_ref-1&quot;&gt;&lt;a href=&quot;operators#cite_note-1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt;</source>
          <target state="translated">일반적으로 오버로드 된 연산자는 다음과 같은 일반적인 표준 형식을 갖습니다. &lt;sup id=&quot;cite_ref-1&quot;&gt;&lt;a href=&quot;operators#cite_note-1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="ed62bc28035976769130c4128738e35c18c296a6" translate="yes" xml:space="preserve">
          <source>Communicating with the environment</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11c0cd8d8498d02c2c87af53c7809a707bd266ec" translate="yes" xml:space="preserve">
          <source>Commutativity is satisfied, i.e. for any two types &lt;code&gt;T&lt;/code&gt; and &lt;code&gt;U&lt;/code&gt;, &lt;code&gt;is_same&amp;lt;T, U&amp;gt;::value == true&lt;/code&gt; if and only if &lt;code&gt;is_same&amp;lt;U, T&amp;gt;::value == true&lt;/code&gt;.</source>
          <target state="translated">정류가 만족됩니다. 즉, 두 유형 &lt;code&gt;T&lt;/code&gt; 및 &lt;code&gt;U&lt;/code&gt; 의 경우 &lt;code&gt;is_same&amp;lt;T, U&amp;gt;::value == true&lt;/code&gt; &lt;code&gt;is_same&amp;lt;U, T&amp;gt;::value == true&lt;/code&gt; 경우에만 true 입니다.</target>
        </trans-unit>
        <trans-unit id="8d105cf44d3926289e65c1c83d8e37cb23fd049e" translate="yes" xml:space="preserve">
          <source>Compare</source>
          <target state="translated">Compare</target>
        </trans-unit>
        <trans-unit id="49dd8e2cdd26c511f55f86d246d75d6332da0acd" translate="yes" xml:space="preserve">
          <source>Compare &lt;code&gt;*this&lt;/code&gt; with &lt;code&gt;other&lt;/code&gt; for identity - memory allocated using a &lt;code&gt;monotonic_buffer_resource&lt;/code&gt; can only be deallocated using that same resource.</source>
          <target state="translated">&lt;code&gt;*this&lt;/code&gt; &lt;code&gt;other&lt;/code&gt; 것과 비교하십시오 &lt;code&gt;monotonic_buffer_resource&lt;/code&gt; 사용하여 할당 된 메모리 는 동일한 자원을 사용해서 만 할당 해제 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fcb833ceca733e303bb17ccab3115236b7724eb7" translate="yes" xml:space="preserve">
          <source>Compare &lt;code&gt;*this&lt;/code&gt; with &lt;code&gt;other&lt;/code&gt; for identity - memory allocated using a &lt;code&gt;synchronized_pool_resource&lt;/code&gt; can only be deallocated using that same resource.</source>
          <target state="translated">비교 &lt;code&gt;*this&lt;/code&gt; 와 &lt;code&gt;other&lt;/code&gt; 정체성 - 메모리는 사용하여 할당 &lt;code&gt;synchronized_pool_resource&lt;/code&gt; 해당 동일한 자원을 사용하여 해제 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="69b16c8621be28a584438591d186e2879f428ed2" translate="yes" xml:space="preserve">
          <source>Compare &lt;code&gt;*this&lt;/code&gt; with &lt;code&gt;other&lt;/code&gt; for identity - memory allocated using a &lt;code&gt;unsynchronized_pool_resource&lt;/code&gt; can only be deallocated using that same resource.</source>
          <target state="translated">비교 &lt;code&gt;*this&lt;/code&gt; 와 &lt;code&gt;other&lt;/code&gt; 정체성 - 메모리는 사용하여 할당 &lt;code&gt;unsynchronized_pool_resource&lt;/code&gt; 해당 동일한 자원을 사용하여 해제 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="11ec138f9eed56d25772b998230a73a2871535d4" translate="yes" xml:space="preserve">
          <source>Compare a &lt;code&gt;basic_string&lt;/code&gt; object and null-terminated array of &lt;code&gt;T&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;basic_string&lt;/code&gt; 객체와 null로 끝나는 &lt;code&gt;T&lt;/code&gt; 의 배열 비교</target>
        </trans-unit>
        <trans-unit id="8f4e18e5563f9e4639dd316a39f0177fbc069f9b" translate="yes" xml:space="preserve">
          <source>Compare a &lt;code&gt;shared_ptr&lt;/code&gt; with a null pointer</source>
          <target state="translated">&lt;code&gt;shared_ptr&lt;/code&gt; 을 널 포인터와 비교</target>
        </trans-unit>
        <trans-unit id="add2480c925dc59d45b2a9e3c83f1e57428f27c2" translate="yes" xml:space="preserve">
          <source>Compare an &lt;code&gt;optional&lt;/code&gt; object with a &lt;code&gt;T&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;optional&lt;/code&gt; 객체와 &lt;code&gt;T&lt;/code&gt; 를 비교</target>
        </trans-unit>
        <trans-unit id="3df533f0449f6e2f437c8e96e150a4ef45585f7f" translate="yes" xml:space="preserve">
          <source>Compare an &lt;code&gt;optional&lt;/code&gt; object with a &lt;code&gt;nullopt&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;optional&lt;/code&gt; 객체와 &lt;code&gt;nullopt&lt;/code&gt; 비교</target>
        </trans-unit>
        <trans-unit id="0545484dc0d00115460b9c4391d3ee4046c442c7" translate="yes" xml:space="preserve">
          <source>Compare comp</source>
          <target state="translated">comp 비교</target>
        </trans-unit>
        <trans-unit id="ef256a17ad0d869d75797c021efa67342145cb97" translate="yes" xml:space="preserve">
          <source>Compare for equality with another &lt;code&gt;&lt;a href=&quot;memory_resource&quot;&gt;std::pmr::memory_resource&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">다른 &lt;code&gt;&lt;a href=&quot;memory_resource&quot;&gt;std::pmr::memory_resource&lt;/a&gt;&lt;/code&gt; 비교하십시오.</target>
        </trans-unit>
        <trans-unit id="2ddffb9bfd0278248262bcf9fcb46fc566c554bb" translate="yes" xml:space="preserve">
          <source>Compare for equality with another &lt;code&gt;memory_resource&lt;/code&gt;</source>
          <target state="translated">다른 &lt;code&gt;memory_resource&lt;/code&gt; 와 동일한 지 비교</target>
        </trans-unit>
        <trans-unit id="7d692e8861bea935a5c3fc8f4e673f19bf9cfe9a" translate="yes" xml:space="preserve">
          <source>Compare the two &lt;code&gt;std::chrono::day&lt;/code&gt;&lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="translated">두 &lt;code&gt;std::chrono::day&lt;/code&gt; &lt;code&gt;x&lt;/code&gt; 와 &lt;code&gt;y&lt;/code&gt; 를 비교하십시오 .</target>
        </trans-unit>
        <trans-unit id="ccd7d4d2aabc3602304842335b6276549853d9e7" translate="yes" xml:space="preserve">
          <source>Compare the two &lt;code&gt;std::chrono::month&lt;/code&gt;&lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="translated">두 &lt;code&gt;std::chrono::month&lt;/code&gt; &lt;code&gt;x&lt;/code&gt; 와 &lt;code&gt;y&lt;/code&gt; 를 비교하십시오 .</target>
        </trans-unit>
        <trans-unit id="ec5e021a8ba5e70fdd3ed63d36fc2b7a652be8eb" translate="yes" xml:space="preserve">
          <source>Compare the two &lt;code&gt;std::chrono::weekday&lt;/code&gt;&lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="translated">두 &lt;code&gt;std::chrono::weekday&lt;/code&gt; &lt;code&gt;x&lt;/code&gt; 와 &lt;code&gt;y&lt;/code&gt; 를 비교하십시오 .</target>
        </trans-unit>
        <trans-unit id="3b07ea9805eaef4422408631045e5366d67ef78c" translate="yes" xml:space="preserve">
          <source>Compare the two &lt;code&gt;std::chrono::year&lt;/code&gt;&lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="translated">두 &lt;code&gt;std::chrono::year&lt;/code&gt; &lt;code&gt;x&lt;/code&gt; 와 &lt;code&gt;y&lt;/code&gt; 를 비교하십시오 .</target>
        </trans-unit>
        <trans-unit id="61a14f5e3646271f4247eb0c2feac2e486ba077a" translate="yes" xml:space="preserve">
          <source>Compare two &lt;code&gt;basic_string&lt;/code&gt; objects</source>
          <target state="translated">두 개의 &lt;code&gt;basic_string&lt;/code&gt; 객체 비교</target>
        </trans-unit>
        <trans-unit id="db39088e92708cb3a3023a8ef25c600bc8a68422" translate="yes" xml:space="preserve">
          <source>Compare two &lt;code&gt;optional&lt;/code&gt; objects</source>
          <target state="translated">두 개의 &lt;code&gt;optional&lt;/code&gt; 객체 비교</target>
        </trans-unit>
        <trans-unit id="6e4065af454f74fb70f62e3bc3a00925c9125938" translate="yes" xml:space="preserve">
          <source>Compare two &lt;code&gt;shared_ptr&lt;/code&gt; objects</source>
          <target state="translated">두 개의 &lt;code&gt;shared_ptr&lt;/code&gt; 객체 비교</target>
        </trans-unit>
        <trans-unit id="654e9a43951cd89045826d1a0b5a51e97ea1fe90" translate="yes" xml:space="preserve">
          <source>Compare two bitsets to determine if they are identical:</source>
          <target state="translated">두 비트 세트를 비교하여 동일한 지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="e8998fe72008a272314a7bc5401ed3d31a46d1dd" translate="yes" xml:space="preserve">
          <source>Compare was required to be a strict weak ordering</source>
          <target state="translated">비교는 엄격한 약한 주문이어야했습니다</target>
        </trans-unit>
        <trans-unit id="e5d9491f38a3bd255c92c8605d6eaba8c3a13293" translate="yes" xml:space="preserve">
          <source>Compare-and-exchange operations are often used as basic building blocks of lockfree data structures.</source>
          <target state="translated">비교 및 교환 작업은 종종 잠금없는 데이터 구조의 기본 빌딩 블록으로 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="3a1be864ba7e793480ef6c41e44267cc730f035b" translate="yes" xml:space="preserve">
          <source>Compares &lt;code&gt;*this&lt;/code&gt; for equality with &lt;code&gt;other&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;*this&lt;/code&gt; 와 &lt;code&gt;other&lt;/code&gt; 의 동등성을 비교합니다 .</target>
        </trans-unit>
        <trans-unit id="db123111a2bcba247a4136e77be796f511f5ae56" translate="yes" xml:space="preserve">
          <source>Compares &lt;code&gt;*this&lt;/code&gt; for equality with &lt;code&gt;other&lt;/code&gt;. Two &lt;code&gt;memory_resource&lt;/code&gt;s compare equal if and only if memory allocated from one &lt;code&gt;memory_resource&lt;/code&gt; can be deallocated from the other and vice versa.</source>
          <target state="translated">&lt;code&gt;*this&lt;/code&gt; 와 &lt;code&gt;other&lt;/code&gt; 의 동등성을 비교합니다 . 하나의 &lt;code&gt;memory_resource&lt;/code&gt; 에서 할당 된 메모리가 다른 memory_resource 에서 할당 해제 될 수 있고 그 반대의 경우에만 두 &lt;code&gt;memory_resource&lt;/code&gt; 가 동일하게 비교됩니다 .</target>
        </trans-unit>
        <trans-unit id="a83227a7024d23a3bfbc93eb1c89460301e4c631" translate="yes" xml:space="preserve">
          <source>Compares &lt;code&gt;lhs.first&lt;/code&gt; and &lt;code&gt;rhs.first&lt;/code&gt; by calling the stored comparator.</source>
          <target state="translated">비교 &lt;code&gt;lhs.first&lt;/code&gt; 및 &lt;code&gt;rhs.first&lt;/code&gt; 저장된 비교기를 호출하여.</target>
        </trans-unit>
        <trans-unit id="df3b3bafd4f8156a0d1dd15113918a2ea5bb20a7" translate="yes" xml:space="preserve">
          <source>Compares &lt;code&gt;lhs&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt; using owner-based semantics. Effectively calls &lt;code&gt;lhs.owner_before(rhs)&lt;/code&gt;.</source>
          <target state="translated">소유자 기반 시맨틱을 사용하여 &lt;code&gt;lhs&lt;/code&gt; 와 &lt;code&gt;rhs&lt;/code&gt; 를 비교합니다 . 효과적으로 &lt;code&gt;lhs.owner_before(rhs)&lt;/code&gt; 호출합니다 .</target>
        </trans-unit>
        <trans-unit id="9bc30fb2fa798e11ca32b60eb02cdb8e9c05b3ad" translate="yes" xml:space="preserve">
          <source>Compares &lt;code&gt;t&lt;/code&gt; and &lt;code&gt;u&lt;/code&gt;. Equivalent to &lt;code&gt;return !&lt;a href=&quot;../../../functional/ranges/equal_to&quot;&gt;ranges::equal_to&lt;/a&gt;{}(&lt;a href=&quot;../../forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;T&amp;gt;(t), &lt;a href=&quot;../../forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;U&amp;gt;(u));&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;t&lt;/code&gt; 와 &lt;code&gt;u&lt;/code&gt; 를 비교합니다 . &lt;code&gt;return !&lt;a href=&quot;../../../functional/ranges/equal_to&quot;&gt;ranges::equal_to&lt;/a&gt;{}(&lt;a href=&quot;../../forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;T&amp;gt;(t), &lt;a href=&quot;../../forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;U&amp;gt;(u));&lt;/code&gt; 것과 동일합니다 ! 범위 :: equal_to {} ( std :: forward &amp;lt;T&amp;gt; (t), std :: forward &amp;lt;U&amp;gt; (u)); .</target>
        </trans-unit>
        <trans-unit id="3455d3840d262ebbea74f45f34476b70ed8a9438" translate="yes" xml:space="preserve">
          <source>Compares &lt;code&gt;t&lt;/code&gt; and &lt;code&gt;u&lt;/code&gt;. Equivalent to &lt;code&gt;return !&lt;a href=&quot;../../../functional/ranges/less&quot;&gt;ranges::less&lt;/a&gt;{}(&lt;a href=&quot;../../forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;T&amp;gt;(t), &lt;a href=&quot;../../forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;U&amp;gt;(u));&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;t&lt;/code&gt; 와 &lt;code&gt;u&lt;/code&gt; 를 비교합니다 . &lt;code&gt;return !&lt;a href=&quot;../../../functional/ranges/less&quot;&gt;ranges::less&lt;/a&gt;{}(&lt;a href=&quot;../../forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;T&amp;gt;(t), &lt;a href=&quot;../../forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;U&amp;gt;(u));&lt;/code&gt; 것과 동일합니다 ! 범위 :: less {} ( std :: forward &amp;lt;T&amp;gt; (t), std :: forward &amp;lt;U&amp;gt; (u)); .</target>
        </trans-unit>
        <trans-unit id="829ea7b8936bcd19bd83e224c87bba03ad833e57" translate="yes" xml:space="preserve">
          <source>Compares &lt;code&gt;t&lt;/code&gt; and &lt;code&gt;u&lt;/code&gt;. Equivalent to &lt;code&gt;return !&lt;a href=&quot;../../../functional/ranges/less&quot;&gt;ranges::less&lt;/a&gt;{}(&lt;a href=&quot;../../forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;U&amp;gt;(u), &lt;a href=&quot;../../forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;T&amp;gt;(t));&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;t&lt;/code&gt; 와 &lt;code&gt;u&lt;/code&gt; 를 비교합니다 . &lt;code&gt;return !&lt;a href=&quot;../../../functional/ranges/less&quot;&gt;ranges::less&lt;/a&gt;{}(&lt;a href=&quot;../../forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;U&amp;gt;(u), &lt;a href=&quot;../../forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;T&amp;gt;(t));&lt;/code&gt; 것과 동일합니다 ! 범위 :: less {} ( std :: forward &amp;lt;U&amp;gt; (u), std :: forward &amp;lt;T&amp;gt; (t)); .</target>
        </trans-unit>
        <trans-unit id="89811c8a5eabbc91dbc03b256d2275e80c9b4b6a" translate="yes" xml:space="preserve">
          <source>Compares &lt;code&gt;t&lt;/code&gt; and &lt;code&gt;u&lt;/code&gt;. Equivalent to &lt;code&gt;return &lt;a href=&quot;../../../functional/ranges/less&quot;&gt;ranges::less&lt;/a&gt;{}(&lt;a href=&quot;../../forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;U&amp;gt;(u), &lt;a href=&quot;../../forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;T&amp;gt;(t));&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;t&lt;/code&gt; 와 &lt;code&gt;u&lt;/code&gt; 를 비교합니다 . &lt;code&gt;return &lt;a href=&quot;../../../functional/ranges/less&quot;&gt;ranges::less&lt;/a&gt;{}(&lt;a href=&quot;../../forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;U&amp;gt;(u), &lt;a href=&quot;../../forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;T&amp;gt;(t));&lt;/code&gt; 와 같습니다. :: less {} ( std :: forward &amp;lt;U&amp;gt; (u), std :: forward &amp;lt;T&amp;gt; (t)); .</target>
        </trans-unit>
        <trans-unit id="ff74d08364a3a1ce215c724aeb47fb00e139817a" translate="yes" xml:space="preserve">
          <source>Compares a &lt;code&gt;std::function&lt;/code&gt; with a null pointer. Empty functions (that is, functions without a callable target) compare equal, non-empty functions compare non-equal.</source>
          <target state="translated">&lt;code&gt;std::function&lt;/code&gt; 과 널 포인터를 비교합니다 . 빈 함수 (즉, 호출 가능한 대상이없는 함수)는 비어 있고 비어 있지 않은 함수는 같지 않습니다.</target>
        </trans-unit>
        <trans-unit id="7c964e28d5578511a1a5a2f5b51ca357aa6f52ed" translate="yes" xml:space="preserve">
          <source>Compares a &lt;code&gt;sub_match&lt;/code&gt; to another &lt;code&gt;sub_match&lt;/code&gt;, a string, a null-terminated character sequence or a character.</source>
          <target state="translated">비교 &lt;code&gt;sub_match&lt;/code&gt; 을 다른 &lt;code&gt;sub_match&lt;/code&gt; , 문자열, null로 끝나는 문자 순서 또는 문자.</target>
        </trans-unit>
        <trans-unit id="c96024a18b7baa0228d6601d1d46a05cee2045ec" translate="yes" xml:space="preserve">
          <source>Compares at most &lt;code&gt;count&lt;/code&gt; characters of two null-terminated byte strings. The comparison is done lexicographically.</source>
          <target state="translated">두 개의 널 종료 바이트 문자열의 최대 &lt;code&gt;count&lt;/code&gt; 문자를 비교 합니다. 사전은 사전 식으로 이루어집니다.</target>
        </trans-unit>
        <trans-unit id="0727eb4b9d940361cfe3eeafe56df0bb6ceff1b1" translate="yes" xml:space="preserve">
          <source>Compares at most &lt;code&gt;count&lt;/code&gt; wide characters of two null-terminated wide strings. The comparison is done lexicographically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a146ec971b1d93c0eca122d627ff96be93cae780" translate="yes" xml:space="preserve">
          <source>Compares different floating-point decomposition functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83325a2956532cdd17754c4c867abf212b0e2ee5" translate="yes" xml:space="preserve">
          <source>Compares each value within the numeric array with another value.</source>
          <target state="translated">숫자 형 배열 내의 각 값을 다른 값과 비교합니다.</target>
        </trans-unit>
        <trans-unit id="cd9b8b967151221edea8e5ca59b2a02d0c602db1" translate="yes" xml:space="preserve">
          <source>Compares the &lt;code&gt;memory_resource&lt;/code&gt;s &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; for equality. Two &lt;code&gt;memory_resource&lt;/code&gt;s compare equal if and only if memory allocated from one &lt;code&gt;memory_resource&lt;/code&gt; can be deallocated from the other and vice versa.</source>
          <target state="translated">&lt;code&gt;memory_resource&lt;/code&gt; s &lt;code&gt;a&lt;/code&gt; 와 &lt;code&gt;b&lt;/code&gt; 가 동일한 지 비교합니다 . 하나의 &lt;code&gt;memory_resource&lt;/code&gt; 에서 할당 된 메모리가 다른 memory_resource 에서 할당 해제 될 수 있고 그 반대의 경우에만 두 &lt;code&gt;memory_resource&lt;/code&gt; 가 동일하게 비교됩니다 .</target>
        </trans-unit>
        <trans-unit id="1e0115be1f0f5cf7f00fe489892f674089942d65" translate="yes" xml:space="preserve">
          <source>Compares the arguments.</source>
          <target state="translated">인수를 비교합니다.</target>
        </trans-unit>
        <trans-unit id="a7ed1f6c3c5d31670cbc33029012fe49ef174c2d" translate="yes" xml:space="preserve">
          <source>Compares the contents of a string with another string or a null-terminated array of &lt;code&gt;CharT&lt;/code&gt;.</source>
          <target state="translated">문자열의 내용을 다른 문자열 또는 null로 끝나는 &lt;code&gt;CharT&lt;/code&gt; 배열로 비교합니다 .</target>
        </trans-unit>
        <trans-unit id="c32023e1bf201c2616d21ab9fd02f150071a03c0" translate="yes" xml:space="preserve">
          <source>Compares the contents of the underlying containers of two container adaptors. The comparison is done by applying the corresponding operator to the underlying containers.</source>
          <target state="translated">두 컨테이너 어댑터의 기본 컨테이너 내용을 비교합니다. 해당 연산자를 기본 컨테이너에 적용하여 비교를 수행합니다.</target>
        </trans-unit>
        <trans-unit id="45133424449fdcab9f09520303b79511c503f479" translate="yes" xml:space="preserve">
          <source>Compares the contents of two arrays.</source>
          <target state="translated">두 배열의 내용을 비교합니다.</target>
        </trans-unit>
        <trans-unit id="281a289cec897a3499ac7e5457b7033ecc1ee8b4" translate="yes" xml:space="preserve">
          <source>Compares the contents of two containers.</source>
          <target state="translated">두 컨테이너의 내용을 비교합니다.</target>
        </trans-unit>
        <trans-unit id="05543d0ab6c60b02ae0f81d9e17126fad2fd1250" translate="yes" xml:space="preserve">
          <source>Compares the contents of two unordered containers.</source>
          <target state="translated">정렬되지 않은 두 컨테이너의 내용을 비교합니다.</target>
        </trans-unit>
        <trans-unit id="c972277ee6cc6a4d474a91db97591868a2813392" translate="yes" xml:space="preserve">
          <source>Compares the date and time represented by the objects &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="translated">객체 &lt;code&gt;x&lt;/code&gt; 와 &lt;code&gt;y&lt;/code&gt; 로 표시되는 날짜와 시간을 비교합니다 .</target>
        </trans-unit>
        <trans-unit id="431e203b75b38ce66c8823c474181b75a5d8abac" translate="yes" xml:space="preserve">
          <source>Compares the first &lt;code&gt;count&lt;/code&gt; characters of the character strings &lt;code&gt;s1&lt;/code&gt; and &lt;code&gt;s2&lt;/code&gt;. The comparison is done lexicographically.</source>
          <target state="translated">문자열 &lt;code&gt;s1&lt;/code&gt; 과 &lt;code&gt;s2&lt;/code&gt; 의 첫 번째 &lt;code&gt;count&lt;/code&gt; 문자를 비교합니다 . 사전은 사전 식으로 이루어집니다.</target>
        </trans-unit>
        <trans-unit id="16f2ac11a2fd2380bb417717663bc21b3dfd90fe" translate="yes" xml:space="preserve">
          <source>Compares the first &lt;code&gt;count&lt;/code&gt; wide characters of the wide character arrays pointed to by &lt;code&gt;lhs&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt;. The comparison is done lexicographically.</source>
          <target state="translated">&lt;code&gt;lhs&lt;/code&gt; 및 &lt;code&gt;rhs&lt;/code&gt; 가 가리키는 와이드 문자 배열 의 첫 번째 &lt;code&gt;count&lt;/code&gt; 와이드 문자를 비교합니다 . 사전은 사전 식으로 이루어집니다.</target>
        </trans-unit>
        <trans-unit id="38addc79772c91eaa374299934180d9108c35a91" translate="yes" xml:space="preserve">
          <source>Compares the lexical representations of the path and another path.</source>
          <target state="translated">경로와 다른 경로의 어휘 표현을 비교합니다.</target>
        </trans-unit>
        <trans-unit id="8c1deb12a0c16badfa18f86c79a26254f5045f93" translate="yes" xml:space="preserve">
          <source>Compares the path with the directory entry &lt;code&gt;rhs&lt;/code&gt;.</source>
          <target state="translated">경로를 디렉토리 항목 &lt;code&gt;rhs&lt;/code&gt; 와 비교합니다 .</target>
        </trans-unit>
        <trans-unit id="b90056fd7e63817ba3443ea41a09886555dde8a8" translate="yes" xml:space="preserve">
          <source>Compares the pointer values of two &lt;code&gt;unique_ptr&lt;/code&gt;s, or a &lt;code&gt;unique_ptr&lt;/code&gt; and &lt;code&gt;nullptr&lt;/code&gt;.</source>
          <target state="translated">두 &lt;code&gt;unique_ptr&lt;/code&gt; 또는 &lt;code&gt;unique_ptr&lt;/code&gt; 및 &lt;code&gt;nullptr&lt;/code&gt; 의 포인터 값을 비교합니다 .</target>
        </trans-unit>
        <trans-unit id="f81dd7d2f194616027a8d2747b1a3fc5f2b7c730" translate="yes" xml:space="preserve">
          <source>Compares the two &lt;code&gt;link&lt;/code&gt; objects &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; by name.</source>
          <target state="translated">두 &lt;code&gt;link&lt;/code&gt; 객체 &lt;code&gt;x&lt;/code&gt; 와 &lt;code&gt;y&lt;/code&gt; 를 이름별로 비교합니다 .</target>
        </trans-unit>
        <trans-unit id="3534d788af965cd01d798bb3b8fc2b153bd9a117" translate="yes" xml:space="preserve">
          <source>Compares the two &lt;code&gt;month_day_last&lt;/code&gt; objects &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;month_day_last&lt;/code&gt; 두 객체 &lt;code&gt;x&lt;/code&gt; 와 &lt;code&gt;y&lt;/code&gt; 를 비교합니다 .</target>
        </trans-unit>
        <trans-unit id="eeb0093fb025b64ef1519c97012210d369acb80c" translate="yes" xml:space="preserve">
          <source>Compares the two &lt;code&gt;month_weekday&lt;/code&gt; objects &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="translated">두 개의 &lt;code&gt;month_weekday&lt;/code&gt; 객체 &lt;code&gt;x&lt;/code&gt; 와 &lt;code&gt;y&lt;/code&gt; 를 비교합니다 .</target>
        </trans-unit>
        <trans-unit id="052e4b2adea55cc60dc563bee747ce03e37bb302" translate="yes" xml:space="preserve">
          <source>Compares the two &lt;code&gt;month_weekday_last&lt;/code&gt; objects &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;month_weekday_last&lt;/code&gt; 두 객체 &lt;code&gt;x&lt;/code&gt; 와 &lt;code&gt;y&lt;/code&gt; 를 비교합니다 .</target>
        </trans-unit>
        <trans-unit id="11822fd2f5eadee009f43ddbfb5c068df60d774d" translate="yes" xml:space="preserve">
          <source>Compares the two &lt;code&gt;time_zone&lt;/code&gt; objects &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; by name.</source>
          <target state="translated">두 &lt;code&gt;time_zone&lt;/code&gt; 객체 &lt;code&gt;x&lt;/code&gt; 와 &lt;code&gt;y&lt;/code&gt; 를 이름별로 비교합니다 .</target>
        </trans-unit>
        <trans-unit id="b08460a90335de6dcc1ceeee6fe4dbff47ae489e" translate="yes" xml:space="preserve">
          <source>Compares the two &lt;code&gt;weekday_indexed&lt;/code&gt;&lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;weekday_indexed&lt;/code&gt; &lt;code&gt;x&lt;/code&gt; 와 &lt;code&gt;y&lt;/code&gt; 두 개를 비교합니다 .</target>
        </trans-unit>
        <trans-unit id="9c04a0c2fe978423b17283f340d3706819700a01" translate="yes" xml:space="preserve">
          <source>Compares the two &lt;code&gt;weekday_last&lt;/code&gt; objects &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="translated">두 &lt;code&gt;weekday_last&lt;/code&gt; 객체 &lt;code&gt;x&lt;/code&gt; 와 &lt;code&gt;y&lt;/code&gt; 를 비교합니다 .</target>
        </trans-unit>
        <trans-unit id="4b27ae1a47d34d7abb4079071cad83efb44f7f79" translate="yes" xml:space="preserve">
          <source>Compares the two &lt;code&gt;year_month&lt;/code&gt; objects &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="translated">두 &lt;code&gt;year_month&lt;/code&gt; 객체 &lt;code&gt;x&lt;/code&gt; 와 &lt;code&gt;y&lt;/code&gt; 를 비교합니다 .</target>
        </trans-unit>
        <trans-unit id="08c275267cbf8ebbaaca38fcae85fc8ec5f42a76" translate="yes" xml:space="preserve">
          <source>Compares the two &lt;code&gt;year_month_day&lt;/code&gt; objects &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;. This is a lexicographical comparison: the &lt;code&gt;year()&lt;/code&gt; is compared first, then &lt;code&gt;month()&lt;/code&gt;, then &lt;code&gt;day()&lt;/code&gt;.</source>
          <target state="translated">두 &lt;code&gt;year_month_day&lt;/code&gt; 객체 &lt;code&gt;x&lt;/code&gt; 와 &lt;code&gt;y&lt;/code&gt; 를 비교합니다 . 이것은 사전 식 비교입니다 : &lt;code&gt;year()&lt;/code&gt; 를 먼저 비교 한 다음 &lt;code&gt;month()&lt;/code&gt; , &lt;code&gt;day()&lt;/code&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="4f16b74bbbcfb9a1271895fbd1d0e8b66e3ad318" translate="yes" xml:space="preserve">
          <source>Compares the two &lt;code&gt;year_month_day_last&lt;/code&gt; objects &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;. This is a lexicographical comparison: the &lt;code&gt;year()&lt;/code&gt; is compared first, then &lt;code&gt;month()&lt;/code&gt;.</source>
          <target state="translated">두 &lt;code&gt;year_month_day_last&lt;/code&gt; 객체 &lt;code&gt;x&lt;/code&gt; 와 &lt;code&gt;y&lt;/code&gt; 를 비교합니다 . 이것은 사전 식 비교입니다 : &lt;code&gt;year()&lt;/code&gt; 를 먼저 비교 한 다음 &lt;code&gt;month()&lt;/code&gt; 를 비교하십시오 .</target>
        </trans-unit>
        <trans-unit id="d60fb82099e1cec205a3506e53b87ea717e068f2" translate="yes" xml:space="preserve">
          <source>Compares the two &lt;code&gt;year_month_weekday&lt;/code&gt; objects &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="translated">두 &lt;code&gt;year_month_weekday&lt;/code&gt; 객체 &lt;code&gt;x&lt;/code&gt; 와 &lt;code&gt;y&lt;/code&gt; 를 비교합니다 .</target>
        </trans-unit>
        <trans-unit id="2dcc0943ee09ec43494a93fd4925007baf422552" translate="yes" xml:space="preserve">
          <source>Compares the two &lt;code&gt;year_month_weekday_last&lt;/code&gt; objects &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="translated">두 &lt;code&gt;year_month_weekday_last&lt;/code&gt; 객체 &lt;code&gt;x&lt;/code&gt; 와 &lt;code&gt;y&lt;/code&gt; 를 비교합니다 .</target>
        </trans-unit>
        <trans-unit id="d1c9629e217610422716fc44f3ad951e51c8f7e1" translate="yes" xml:space="preserve">
          <source>Compares the two &lt;code&gt;zoned_time&lt;/code&gt; objects &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;. Two &lt;code&gt;zoned_time&lt;/code&gt; objects compare equal if their time points and time zone pointers both compare equal according to &lt;code&gt;operator==&lt;/code&gt;.</source>
          <target state="translated">두 개의 &lt;code&gt;zoned_time&lt;/code&gt; 객체 &lt;code&gt;x&lt;/code&gt; 와 &lt;code&gt;y&lt;/code&gt; 를 비교합니다 . 두 개의 &lt;code&gt;zoned_time&lt;/code&gt; 객체는 해당 시간대와 시간대 포인터가 &lt;code&gt;operator==&lt;/code&gt; 에 따라 동일한 경우 비교 됩니다.</target>
        </trans-unit>
        <trans-unit id="934fb701470c7ff74319425c552df1cba0af08ce" translate="yes" xml:space="preserve">
          <source>Compares the underlying &lt;code&gt;&lt;a href=&quot;../type_info&quot;&gt;std::type_info&lt;/a&gt;&lt;/code&gt; objects.</source>
          <target state="translated">기본 &lt;code&gt;&lt;a href=&quot;../type_info&quot;&gt;std::type_info&lt;/a&gt;&lt;/code&gt; 객체를 비교 합니다.</target>
        </trans-unit>
        <trans-unit id="3af51361f6647a9dbea43a3bc16d293d348f5767" translate="yes" xml:space="preserve">
          <source>Compares the underlying iterators.</source>
          <target state="translated">기본 반복자를 비교합니다.</target>
        </trans-unit>
        <trans-unit id="bb25ccb762d7e990373ffef95f8940bd4bcaaaca" translate="yes" xml:space="preserve">
          <source>Compares the underlying iterators. Inverse comparisons are applied in order to take into account that the iterator order is reversed.</source>
          <target state="translated">기본 반복자를 비교합니다. 반복자 순서가 역전됨을 고려하기 위해 역 비교가 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="b166d2ded55314486d5acfdc1502912df5d8b7fc" translate="yes" xml:space="preserve">
          <source>Compares to another error category.</source>
          <target state="translated">다른 오류 범주와 비교합니다.</target>
        </trans-unit>
        <trans-unit id="6c2a312f7366b4663f1cafca23dfa1274dd3cd07" translate="yes" xml:space="preserve">
          <source>Compares two &lt;code&gt;match_results&lt;/code&gt; objects.</source>
          <target state="translated">두 개의 &lt;code&gt;match_results&lt;/code&gt; 객체를 비교 합니다.</target>
        </trans-unit>
        <trans-unit id="be1c9ede2dfa126db9a12c284f7407aeedc533e9" translate="yes" xml:space="preserve">
          <source>Compares two &lt;code&gt;month_day&lt;/code&gt; objects.</source>
          <target state="translated">두 개의 &lt;code&gt;month_day&lt;/code&gt; 객체를 비교 합니다.</target>
        </trans-unit>
        <trans-unit id="c8e9cf58163fa5724e95724f7f0d5a56111dcaad" translate="yes" xml:space="preserve">
          <source>Compares two &lt;code&gt;regex_iterator&lt;/code&gt;s.</source>
          <target state="translated">두 개의 &lt;code&gt;regex_iterator&lt;/code&gt; 를 비교합니다 .</target>
        </trans-unit>
        <trans-unit id="72c5f96a98dff5ccfbe3125f1a19bb1a7cf943b1" translate="yes" xml:space="preserve">
          <source>Compares two &lt;code&gt;shared_ptr&amp;lt;T&amp;gt;&lt;/code&gt; objects or compares &lt;code&gt;shared_ptr&amp;lt;T&amp;gt;&lt;/code&gt; with a null pointer.</source>
          <target state="translated">두 개의 &lt;code&gt;shared_ptr&amp;lt;T&amp;gt;&lt;/code&gt; 객체를 비교하거나 &lt;code&gt;shared_ptr&amp;lt;T&amp;gt;&lt;/code&gt; 를 널 포인터와 비교합니다 .</target>
        </trans-unit>
        <trans-unit id="f21c9f8384ee0ef65f6ce951c98e8f01f6f4b679" translate="yes" xml:space="preserve">
          <source>Compares two character sequences.</source>
          <target state="translated">두 문자 시퀀스를 비교합니다.</target>
        </trans-unit>
        <trans-unit id="f91dd1f9fd47deabe0a82192ed733cdcf2b2ec39" translate="yes" xml:space="preserve">
          <source>Compares two characters.</source>
          <target state="translated">두 문자를 비교합니다.</target>
        </trans-unit>
        <trans-unit id="d42d9180b87c10e6431608a4e521c076f72ba517" translate="yes" xml:space="preserve">
          <source>Compares two complex numbers. Scalar arguments are treated as complex numbers with the real part equal to the argument and the imaginary part set to zero.</source>
          <target state="translated">두 개의 복소수를 비교합니다. 스칼라 인수는 실수 부분이 인수와 같고 허수 부분이 0으로 설정된 복소수로 처리됩니다.</target>
        </trans-unit>
        <trans-unit id="63ddab63f98134211b1ae071925dc2f572f7921f" translate="yes" xml:space="preserve">
          <source>Compares two default allocators. Since default allocators are stateless, two default allocators are always equal.</source>
          <target state="translated">두 개의 기본 할당자를 비교합니다. 기본 할당자는 상태 비 저장이므로 두 개의 기본 할당자는 항상 동일합니다.</target>
        </trans-unit>
        <trans-unit id="326e883c591ac2b3f08118ea7bd1006cce337e32" translate="yes" xml:space="preserve">
          <source>Compares two distribution objects. Two distribution objects are equal when parameter values and internal state is the same.</source>
          <target state="translated">두 분포 개체를 비교합니다. 모수 값과 내부 상태가 동일한 경우 두 분포 개체가 동일합니다.</target>
        </trans-unit>
        <trans-unit id="c2e1fe48cc6f8f0b2d332ce4d72b279f6256d5ce" translate="yes" xml:space="preserve">
          <source>Compares two durations.</source>
          <target state="translated">두 기간을 비교합니다.</target>
        </trans-unit>
        <trans-unit id="2911996554f4cafd24739578761e6e52da849ea4" translate="yes" xml:space="preserve">
          <source>Compares two error code objects.</source>
          <target state="translated">두 개의 오류 코드 객체를 비교합니다.</target>
        </trans-unit>
        <trans-unit id="2dc6da1ba3913f019b0e414934e8a7f1c3c9fbc3" translate="yes" xml:space="preserve">
          <source>Compares two error conditions.</source>
          <target state="translated">두 가지 오류 조건을 비교합니다.</target>
        </trans-unit>
        <trans-unit id="0e00c63c41d94e64efbb2ed0a1eb306b8443cef2" translate="yes" xml:space="preserve">
          <source>Compares two null-terminated byte strings according to the current locale as defined by the &lt;code&gt;&lt;a href=&quot;../../locale/lc_categories&quot;&gt;LC_COLLATE&lt;/a&gt;&lt;/code&gt; category.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d96fd82bc5cfecc84e4ec5ba54d1dce1db99f1b" translate="yes" xml:space="preserve">
          <source>Compares two null-terminated byte strings lexicographically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19a368b58d1853f3a874cf578bd8536072389fa3" translate="yes" xml:space="preserve">
          <source>Compares two null-terminated wide strings according to the locale most recently installed by &lt;code&gt;&lt;a href=&quot;../../locale/setlocale&quot;&gt;std::setlocale&lt;/a&gt;&lt;/code&gt;, as defined by the &lt;code&gt;&lt;a href=&quot;../../locale/lc_categories&quot;&gt;LC_COLLATE&lt;/a&gt;&lt;/code&gt; category.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../../locale/lc_categories&quot;&gt;LC_COLLATE&lt;/a&gt;&lt;/code&gt; 범주에 정의 된대로 &lt;code&gt;&lt;a href=&quot;../../locale/setlocale&quot;&gt;std::setlocale&lt;/a&gt;&lt;/code&gt; 의해 가장 최근에 설치된 로케일에 따라 두 개의 널 종료 와이드 문자열을 비교 합니다.</target>
        </trans-unit>
        <trans-unit id="425c0ed5bb7057b86419e94b1e93f2ea4b7b2de1" translate="yes" xml:space="preserve">
          <source>Compares two null-terminated wide strings lexicographically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d523370fd1efab588edaf2c0de9cdc4032dcb008" translate="yes" xml:space="preserve">
          <source>Compares two paths lexicographically.</source>
          <target state="translated">사 전적으로 두 경로를 비교합니다.</target>
        </trans-unit>
        <trans-unit id="ac5066e3ad363b4df08c668569398fd206b984b6" translate="yes" xml:space="preserve">
          <source>Compares two polymorphic allocators. Two polymorphic allocators compare equal if their underlying memory resource compares equal.</source>
          <target state="translated">두 개의 다형성 할당자를 비교합니다. 기본 메모리 리소스가 동일한 경우 두 개의 다형성 할당자가 동일한지를 비교합니다.</target>
        </trans-unit>
        <trans-unit id="9199ec8c0ac865e596eb946b78e93ef1fac8ee29" translate="yes" xml:space="preserve">
          <source>Compares two pseudo-random number engine adaptors. Two engine adaptors are equal, if their underlying engines are equal and their internal state (if any) is equal, that is, if they would generate equivalent values for any number of calls of &lt;code&gt;operator()&lt;/code&gt;.</source>
          <target state="translated">두 개의 의사 난수 엔진 어댑터를 비교합니다. 기본 엔진이 같고 내부 상태 (있는 경우)가 동일한 경우 (즉, &lt;code&gt;operator()&lt;/code&gt; 의 여러 호출에 대해 동등한 값을 생성하는 경우) 두 개의 엔진 어댑터가 동일합니다 .</target>
        </trans-unit>
        <trans-unit id="826d25211f8c03eda35221c707cc5c14f34fb739" translate="yes" xml:space="preserve">
          <source>Compares two pseudo-random number engines. Two engines are equal, if their internal states are equivalent, that is, if they would generate equivalent values for any number of calls of &lt;code&gt;operator()&lt;/code&gt;.</source>
          <target state="translated">두 개의 의사 난수 엔진을 비교합니다. 내부 상태가 동일한 경우 (즉, &lt;code&gt;operator()&lt;/code&gt; 의 여러 호출에 대해 동등한 값을 생성하는 경우) 두 개의 엔진이 동일 합니다.</target>
        </trans-unit>
        <trans-unit id="d698344385476759ead9ee457e896f0d254bb127" translate="yes" xml:space="preserve">
          <source>Compares two scoped allocator adaptors. Two such allocators are equal if:</source>
          <target state="translated">두 가지 범위 할당 자 어댑터를 비교합니다. 다음과 같은 경우 이러한 두 할당자는 동일합니다.</target>
        </trans-unit>
        <trans-unit id="ea754f7c900a9646902d232271cb424994139fac" translate="yes" xml:space="preserve">
          <source>Compares two string arguments &lt;code&gt;s1&lt;/code&gt; and &lt;code&gt;s2&lt;/code&gt; according to the lexicographic comparison rules defined by this locale's &lt;code&gt;&lt;a href=&quot;../collate&quot;&gt;std::collate&lt;/a&gt;&amp;lt;charT&amp;gt;&lt;/code&gt; facet. This operator allows any locale object that has a collate facet to be used as a binary predicate in the standard algorithms (such as &lt;code&gt;&lt;a href=&quot;../../algorithm/sort&quot;&gt;std::sort&lt;/a&gt;&lt;/code&gt;) and ordered containers (such as &lt;code&gt;&lt;a href=&quot;../../container/set&quot;&gt;std::set&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">이 로케일의 &lt;code&gt;&lt;a href=&quot;../collate&quot;&gt;std::collate&lt;/a&gt;&amp;lt;charT&amp;gt;&lt;/code&gt; &amp;lt;charT&amp;gt; 패싯에 정의 된 사전 사전 비교 규칙에 따라 두 개의 문자열 인수 &lt;code&gt;s1&lt;/code&gt; 및 &lt;code&gt;s2&lt;/code&gt; 를 비교 합니다. 이 연산자를 사용하면 데이터 정렬 패싯이있는 로케일 오브젝트를 표준 알고리즘 ( &lt;code&gt;&lt;a href=&quot;../../algorithm/sort&quot;&gt;std::sort&lt;/a&gt;&lt;/code&gt; ) 및 정렬 된 컨테이너 (예 : &lt;code&gt;&lt;a href=&quot;../../container/set&quot;&gt;std::set&lt;/a&gt;&lt;/code&gt; ) 에서 2 진 술어로 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="880e4e8162a2c794266d7c2e0c0a917366d6ddb9" translate="yes" xml:space="preserve">
          <source>Compares two thread identifiers.</source>
          <target state="translated">두 개의 스레드 식별자를 비교합니다.</target>
        </trans-unit>
        <trans-unit id="420d529109cdd565aedbebc9fedac898a11501e7" translate="yes" xml:space="preserve">
          <source>Compares two time points. The comparison is done by comparing the results &lt;code&gt;&lt;a href=&quot;time_since_epoch&quot;&gt;time_since_epoch()&lt;/a&gt;&lt;/code&gt; for the time points.</source>
          <target state="translated">두 시점을 비교합니다. 시점에 대한 &lt;code&gt;&lt;a href=&quot;time_since_epoch&quot;&gt;time_since_epoch()&lt;/a&gt;&lt;/code&gt; 결과를 비교하여 비교를 수행합니다 .</target>
        </trans-unit>
        <trans-unit id="97839f44c0e196c5a45202c11df4d29c8f9226fa" translate="yes" xml:space="preserve">
          <source>Compares two values using 3-way comparison and produces a result of type &lt;code&gt;std::partial_ordering&lt;/code&gt;.</source>
          <target state="translated">3 방향 비교를 사용하여 두 값을 비교하고 &lt;code&gt;std::partial_ordering&lt;/code&gt; 유형의 결과를 생성합니다 .</target>
        </trans-unit>
        <trans-unit id="a7b549f8407201cf9fb52151c82bce97afacab5b" translate="yes" xml:space="preserve">
          <source>Compares two values using 3-way comparison and produces a result of type &lt;code&gt;std::strong_equality&lt;/code&gt;.</source>
          <target state="translated">3 방향 비교를 사용하여 두 값을 비교하고 &lt;code&gt;std::strong_equality&lt;/code&gt; 유형의 결과를 생성합니다 .</target>
        </trans-unit>
        <trans-unit id="f2c79e36bda8989e1a581d1e7f2175517138302c" translate="yes" xml:space="preserve">
          <source>Compares two values using 3-way comparison and produces a result of type &lt;code&gt;std::strong_ordering&lt;/code&gt;.</source>
          <target state="translated">3 방향 비교를 사용하여 두 값을 비교하고 &lt;code&gt;std::strong_ordering&lt;/code&gt; 유형의 결과를 생성합니다 .</target>
        </trans-unit>
        <trans-unit id="3d40eed778235401ba319dc0975102678a3b38dc" translate="yes" xml:space="preserve">
          <source>Compares two values using 3-way comparison and produces a result of type &lt;code&gt;std::weak_equality&lt;/code&gt;.</source>
          <target state="translated">3 방향 비교를 사용하여 두 값을 비교하고 &lt;code&gt;std::weak_equality&lt;/code&gt; 유형의 결과를 생성합니다 .</target>
        </trans-unit>
        <trans-unit id="886b50f42c21f493d4589e2994127767e7d1db8e" translate="yes" xml:space="preserve">
          <source>Compares two values using 3-way comparison and produces a result of type &lt;code&gt;std::weak_ordering&lt;/code&gt;.</source>
          <target state="translated">3 방향 비교를 사용하여 두 값을 비교하고 &lt;code&gt;std::weak_ordering&lt;/code&gt; 유형의 결과를 생성합니다 .</target>
        </trans-unit>
        <trans-unit id="01d8c7f172eb62db110fc69dba429676c496f43e" translate="yes" xml:space="preserve">
          <source>Compares two values using three-way comparison and produces a result of the strongest applicable comparison category type.</source>
          <target state="translated">3 방향 비교를 사용하여 두 값을 비교하고 가장 강력한 적용 가능한 비교 범주 유형의 결과를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="e3e3414765164421c0e9806d355b60012fe92d0d" translate="yes" xml:space="preserve">
          <source>Compares two views.</source>
          <target state="translated">두 뷰를 비교합니다.</target>
        </trans-unit>
        <trans-unit id="2dfcf898a3bd4e011123eee87384ecb67d0919d4" translate="yes" xml:space="preserve">
          <source>Comparison</source>
          <target state="translated">Comparison</target>
        </trans-unit>
        <trans-unit id="537dd402105c9898c11aa665b6a6da8e6bc2980f" translate="yes" xml:space="preserve">
          <source>Comparison between pointers and null pointer constants was removed in C++14.</source>
          <target state="translated">포인터와 널 포인터 상수의 비교는 C ++ 14에서 제거되었습니다.</target>
        </trans-unit>
        <trans-unit id="6bb47a77df8ae1868aa7fbfadb5d5248b0754a50" translate="yes" xml:space="preserve">
          <source>Comparison concepts</source>
          <target state="translated">비교 개념</target>
        </trans-unit>
        <trans-unit id="19ba303ed18bd459ac968bf2a555f5b084fdafa7" translate="yes" xml:space="preserve">
          <source>Comparison operations</source>
          <target state="translated">비교 연산</target>
        </trans-unit>
        <trans-unit id="9461d4c9f916ad7df5538225ed552fb6e7e3284b" translate="yes" xml:space="preserve">
          <source>Comparison operators</source>
          <target state="translated">비교 연산자</target>
        </trans-unit>
        <trans-unit id="be17b94ce1965920dcdcf0f6770aaac58694fbb4" translate="yes" xml:space="preserve">
          <source>Comparison operators are defined between values of this type and literal &lt;code&gt;​0​&lt;/code&gt;. This supports the expressions &lt;code&gt;a &amp;lt;=&amp;gt; b == 0&lt;/code&gt; and &lt;code&gt;a &amp;lt;=&amp;gt; b != 0&lt;/code&gt; used to convert the result of a three-way comparison operator to a boolean relationship; see &lt;a href=&quot;named_comparison_functions&quot;&gt;&lt;code&gt;std::is_eq&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;named_comparison_functions&quot;&gt;&lt;code&gt;std::is_neq&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">비교 연산자는이 유형의 리터럴 값과의 사이에 형성된다 &lt;code&gt;​0​&lt;/code&gt; . 이는 3 방향 비교 연산자의 결과를 부울 관계로 변환하는 데 사용되는 표현식 &lt;code&gt;a &amp;lt;=&amp;gt; b == 0&lt;/code&gt; 및 &lt;code&gt;a &amp;lt;=&amp;gt; b != 0&lt;/code&gt; 을 지원합니다. &lt;a href=&quot;named_comparison_functions&quot;&gt; &lt;code&gt;std::is_eq&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;named_comparison_functions&quot;&gt; &lt;code&gt;std::is_neq&lt;/code&gt; &lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="789678bdcf392cbbb320f76544018b1b27abdce3" translate="yes" xml:space="preserve">
          <source>Comparison operators are defined between values of this type and literal &lt;code&gt;​0​&lt;/code&gt;. This supports the expressions &lt;code&gt;a &amp;lt;=&amp;gt; b == 0&lt;/code&gt; or &lt;code&gt;a &amp;lt;=&amp;gt; b &amp;lt; 0&lt;/code&gt; that can be used to convert the result of a three-way comparison operator to a boolean relationship; see &lt;a href=&quot;named_comparison_functions&quot;&gt;&lt;code&gt;std::is_eq&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;named_comparison_functions&quot;&gt;&lt;code&gt;std::is_lt&lt;/code&gt;&lt;/a&gt;, etc.</source>
          <target state="translated">비교 연산자는이 유형의 리터럴 값과의 사이에 형성된다 &lt;code&gt;​0​&lt;/code&gt; . 이는 3 방향 비교 연산자의 결과를 부울 관계로 변환하는 데 사용할 수있는 표현식 &lt;code&gt;a &amp;lt;=&amp;gt; b == 0&lt;/code&gt; 또는 &lt;code&gt;a &amp;lt;=&amp;gt; b &amp;lt; 0&lt;/code&gt; 을 지원합니다 . &lt;a href=&quot;named_comparison_functions&quot;&gt; &lt;code&gt;std::is_eq&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;named_comparison_functions&quot;&gt; &lt;code&gt;std::is_lt&lt;/code&gt; &lt;/a&gt; 등을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="0903b87fd3f00e1f95a592a081d771a15f345233" translate="yes" xml:space="preserve">
          <source>Comparison operators are overloaded for many classes in the standard library.</source>
          <target state="translated">비교 연산자는 표준 라이브러리의 많은 클래스에 대해 오버로드됩니다.</target>
        </trans-unit>
        <trans-unit id="cbc2b26b6fa17052e1b37289ed9009ce0ee93c9b" translate="yes" xml:space="preserve">
          <source>Comparison operators can be used to compare two pointers (or pointers-to-members, for &lt;code&gt;operator==&lt;/code&gt; and &lt;code&gt;operator!=&lt;/code&gt; only), or a pointer to member(since C++14) and a null pointer constant, or two null pointer constants (but only as long as at least one of them is &lt;code&gt;&lt;a href=&quot;../types/nullptr_t&quot;&gt;std::nullptr_t&lt;/a&gt;&lt;/code&gt;: comparison of NULL and NULL follows arithmetic comparison rules)(until C++14).</source>
          <target state="translated">비교 연산자를 사용하여 두 개의 포인터 (또는 &lt;code&gt;operator==&lt;/code&gt; 및 &lt;code&gt;operator!=&lt;/code&gt; 경우 멤버에 대한 포인터) 또는 멤버 (C ++ 14부터)와 널 포인터 상수 또는 널 포인터 두 개에 대한 포인터를 비교할 수 있습니다 . 상수 (그러나 그중 하나 이상이 &lt;code&gt;&lt;a href=&quot;../types/nullptr_t&quot;&gt;std::nullptr_t&lt;/a&gt;&lt;/code&gt; : NULL과 NULL의 비교가 산술 비교 규칙을 따르는 경우 에만 ) (C ++ 14까지).</target>
        </trans-unit>
        <trans-unit id="e46ee00fde40e955c86abe019a61121e06d653c9" translate="yes" xml:space="preserve">
          <source>Comparisons</source>
          <target state="translated">Comparisons</target>
        </trans-unit>
        <trans-unit id="45a21f4d4c6881e185734fe89af0666e47f75201" translate="yes" xml:space="preserve">
          <source>Compatibility header, in C defines &lt;a href=&quot;../keyword/true&quot;&gt;&lt;code&gt;true&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../keyword/false&quot;&gt;&lt;code&gt;false&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../keyword/bool&quot;&gt;&lt;code&gt;bool&lt;/code&gt;&lt;/a&gt; which are keywords in C++.</source>
          <target state="translated">C의 호환성 헤더 는 C ++의 키워드 인 &lt;a href=&quot;../keyword/true&quot;&gt; &lt;code&gt;true&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../keyword/false&quot;&gt; &lt;code&gt;false&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../keyword/bool&quot;&gt; &lt;code&gt;bool&lt;/code&gt; &lt;/a&gt; 을 정의 합니다 .</target>
        </trans-unit>
        <trans-unit id="9ba1ed9d63174733c9be92627c8ac92c7ae9f286" translate="yes" xml:space="preserve">
          <source>Compatibility header, in C defines &lt;a href=&quot;../language/operator_alternative&quot;&gt;alternative operator representations&lt;/a&gt; which are keywords in C++.</source>
          <target state="translated">C의 호환성 헤더 는 C ++의 키워드 인 &lt;a href=&quot;../language/operator_alternative&quot;&gt;대체 연산자 표현&lt;/a&gt; 을 정의합니다 .</target>
        </trans-unit>
        <trans-unit id="5ae99493c88f41bfb98ef01795072b6b7c8d22dd" translate="yes" xml:space="preserve">
          <source>Compatibility with C</source>
          <target state="translated">C와의 호환성</target>
        </trans-unit>
        <trans-unit id="dfb89f4f22930468f184da15933ebb985d852661" translate="yes" xml:space="preserve">
          <source>Compilation firewall</source>
          <target state="translated">컴파일 방화벽</target>
        </trans-unit>
        <trans-unit id="51e1ecd033282ea9ec8f23b098463d1ac758d951" translate="yes" xml:space="preserve">
          <source>Compilation takes place: each preprocessing token is converted to a token. The tokens are syntactically and semantically analyzed and translated as a translation unit.</source>
          <target state="translated">컴파일이 수행됩니다. 각 전처리 토큰이 토큰으로 변환됩니다. 토큰은 구문 적으로, 의미 적으로 분석되어 번역 단위로 번역됩니다.</target>
        </trans-unit>
        <trans-unit id="077af7e0ad70f2b39d57192f55c29150488e7b5c" translate="yes" xml:space="preserve">
          <source>Compile-time</source>
          <target state="translated">Compile-time</target>
        </trans-unit>
        <trans-unit id="1c4a945ecc4b13250552f4fd10c268afe5bcdc26" translate="yes" xml:space="preserve">
          <source>Compile-time fractions</source>
          <target state="translated">컴파일 타임 분수</target>
        </trans-unit>
        <trans-unit id="4bf6a902766cbfa05ca0c8a5e2f6d4359c65454e" translate="yes" xml:space="preserve">
          <source>Compile-time integer sequences</source>
          <target state="translated">컴파일 타임 정수 시퀀스</target>
        </trans-unit>
        <trans-unit id="d5b2c68fd22b38a7d2b999ddbfacd319ed58b793" translate="yes" xml:space="preserve">
          <source>Compile-time rational arithmetic</source>
          <target state="translated">컴파일 타임 합리적인 산술</target>
        </trans-unit>
        <trans-unit id="5eb43f2f3dfffc6422ae9ec0a46358668f6dffef" translate="yes" xml:space="preserve">
          <source>Compile-time rational comparison</source>
          <target state="translated">컴파일 타임 합리적인 비교</target>
        </trans-unit>
        <trans-unit id="ce09cd28324ea37987ccccab2066326844bcc237" translate="yes" xml:space="preserve">
          <source>Compile-time type information</source>
          <target state="translated">컴파일 타임 타입 정보</target>
        </trans-unit>
        <trans-unit id="758991f0eca4458bd86dd3593f66546ab885d89a" translate="yes" xml:space="preserve">
          <source>Compiler support</source>
          <target state="translated">컴파일러 지원</target>
        </trans-unit>
        <trans-unit id="516e000262ea99e8e172861e8f0ec8b074da781b" translate="yes" xml:space="preserve">
          <source>Compilers may issue warnings on fallthrough (reaching the next case label without a break) unless the attribute &lt;a href=&quot;attributes&quot;&gt;&lt;code&gt;[[fallthrough]]&lt;/code&gt;&lt;/a&gt; appears immediately before the case label to indicate that the fallthrough is intentional.</source>
          <target state="translated">컴파일러는 &lt;a href=&quot;attributes&quot;&gt; &lt;code&gt;[[fallthrough]]&lt;/code&gt; &lt;/a&gt; 속성 이 케이스 레이블 바로 앞에 나타나고 폴스 루가 의도적임을 나타내지 않는 한 폴 스루에 대해 경고를 표시 할 수 있습니다 (중단없이 다음 케이스 레이블에 도달) .</target>
        </trans-unit>
        <trans-unit id="a88abef718dee9454f8d7bdd1b373a9a24a52d8e" translate="yes" xml:space="preserve">
          <source>Compilers may issue warnings when an expression other than cast to &lt;code&gt;void&lt;/code&gt; discards a value declared &lt;code&gt;[[&lt;a href=&quot;attributes/nodiscard&quot;&gt;nodiscard&lt;/a&gt;]]&lt;/code&gt;.</source>
          <target state="translated">cast to &lt;code&gt;void&lt;/code&gt; 이외의 표현식이 &lt;code&gt;[[&lt;a href=&quot;attributes/nodiscard&quot;&gt;nodiscard&lt;/a&gt;]]&lt;/code&gt; 선언 된 값을 버릴 때 컴파일러에서 경고를 발행 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="5a37748201769d30be07596659fb041cba27df4e" translate="yes" xml:space="preserve">
          <source>Complete objects, member objects, and array elements are also known as</source>
          <target state="translated">완전한 객체, 멤버 객체 및 배열 요소는</target>
        </trans-unit>
        <trans-unit id="d4b6e90f57f67a9a6f059ae7741a99d6647608d0" translate="yes" xml:space="preserve">
          <source>Complex common logarithm of &lt;code&gt;z&lt;/code&gt;.</source>
          <target state="translated">복잡 상용 대수 &lt;code&gt;z&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="588968aece6ec2967902b0c8debd814af1beab35" translate="yes" xml:space="preserve">
          <source>Complex number arithmetic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99bdf32682bfe33b5b500641d2eb9e9f7e38d284" translate="yes" xml:space="preserve">
          <source>Complex number type</source>
          <target state="translated">복소수 타입</target>
        </trans-unit>
        <trans-unit id="f564777ac40c723997c5eed12787c64f393c6531" translate="yes" xml:space="preserve">
          <source>Complexity</source>
          <target state="translated">Complexity</target>
        </trans-unit>
        <trans-unit id="5136a758adc75d25324a5bd39b14bd912a4eb7cb" translate="yes" xml:space="preserve">
          <source>Composite type categories</source>
          <target state="translated">복합 유형 카테고리</target>
        </trans-unit>
        <trans-unit id="3427d50262edcb400adae4cba0ac49a3ea5e9ac4" translate="yes" xml:space="preserve">
          <source>Compound Requirements</source>
          <target state="translated">복합 요구 사항</target>
        </trans-unit>
        <trans-unit id="557ac2424c5366dd0727ffe7e7cd646b1ea065fd" translate="yes" xml:space="preserve">
          <source>Compound statements</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="177bc702ce0c7ce52f17fd3a788774554a3c40d6" translate="yes" xml:space="preserve">
          <source>Compound statements or</source>
          <target state="translated">복합 문장 또는</target>
        </trans-unit>
        <trans-unit id="605c31392cd7f5ba46a140fc1a8cbfc89a3fd7a0" translate="yes" xml:space="preserve">
          <source>Compound types are the types that are constructed from fundamental types. Any C++ type is either fundamental or compound.</source>
          <target state="translated">복합 유형은 기본 유형으로 구성된 유형입니다. 모든 C ++ 유형은 기본 또는 복합입니다.</target>
        </trans-unit>
        <trans-unit id="3c9724768b661bee67359228b52b86656ea902ae" translate="yes" xml:space="preserve">
          <source>Compute base-e exponential of &lt;code&gt;z&lt;/code&gt;, that is</source>
          <target state="translated">계산의 기초 - 전자 지수 &lt;code&gt;z&lt;/code&gt; 이며</target>
        </trans-unit>
        <trans-unit id="9ddc2ac03611aa77ae12176fbdd758714425b569" translate="yes" xml:space="preserve">
          <source>Compute the associated types of an iterator. The exposition-only concept &lt;code&gt;&lt;i&gt;dereferenceable&lt;/i&gt;&lt;/code&gt; is satisfied if and only if the expression &lt;code&gt;*std::declval&amp;lt;T&amp;amp;&amp;gt;()&lt;/code&gt; is valid and has a referenceable type (in particular, not &lt;code&gt;void&lt;/code&gt;).</source>
          <target state="translated">반복자의 연관된 유형을 계산하십시오. &lt;code&gt;*std::declval&amp;lt;T&amp;amp;&amp;gt;()&lt;/code&gt; 표현식 이 유효하고 참조 가능한 유형 (특히 &lt;code&gt;void&lt;/code&gt; 가 아닌 )을 가진 경우 에만 노출 전용 개념 &lt;code&gt;&lt;i&gt;dereferenceable&lt;/i&gt;&lt;/code&gt; 이 충족됩니다 .</target>
        </trans-unit>
        <trans-unit id="ad88b5c709893b3c20a622a8af743326fc15e581" translate="yes" xml:space="preserve">
          <source>Computes</source>
          <target state="translated">Computes</target>
        </trans-unit>
        <trans-unit id="890872b2311732b2d3a98fa84965668f1e6b95ae" translate="yes" xml:space="preserve">
          <source>Computes absolute value of each element in the value array.</source>
          <target state="translated">값 배열에서 각 요소의 절대 값을 계산합니다.</target>
        </trans-unit>
        <trans-unit id="3bcccb6744f34f1c05b403cf99f00cc26ed92aa9" translate="yes" xml:space="preserve">
          <source>Computes an exclusive prefix sum operation using &lt;code&gt;binary_op&lt;/code&gt; (or &lt;code&gt;&lt;a href=&quot;../utility/functional/plus&quot;&gt;std::plus&lt;/a&gt;&amp;lt;&amp;gt;()&lt;/code&gt; for overloads (1-2)) for the range &lt;code&gt;[first, last)&lt;/code&gt;, using &lt;code&gt;init&lt;/code&gt; as the initial value, and writes the results to the range beginning at &lt;code&gt;d_first&lt;/code&gt;. &quot;exclusive&quot; means that the i-th input element is not included in the i-th sum.</source>
          <target state="translated">&lt;code&gt;init&lt;/code&gt; 를 초기 값으로 사용하여 &lt;code&gt;[first, last)&lt;/code&gt; 범위에 대해 &lt;code&gt;binary_op&lt;/code&gt; (또는 과부하 (1-2)의 경우 &lt;code&gt;&lt;a href=&quot;../utility/functional/plus&quot;&gt;std::plus&lt;/a&gt;&amp;lt;&amp;gt;()&lt;/code&gt; 를 사용하여 배타적 접두사 합계 연산을 계산 하고 결과를 시작 범위에 씁니다. 에서 &lt;code&gt;d_first&lt;/code&gt; . &quot;배타적&quot;은 i 번째 입력 요소가 i 번째 합계에 포함되지 않음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="f76964514d47315900fb790f07038edc31ff0bcd" translate="yes" xml:space="preserve">
          <source>Computes an inclusive prefix sum operation using &lt;code&gt;binary_op&lt;/code&gt; (or &lt;code&gt;&lt;a href=&quot;../utility/functional/plus&quot;&gt;std::plus&lt;/a&gt;&amp;lt;&amp;gt;()&lt;/code&gt; for overloads (1-2)) for the range &lt;code&gt;[first, last)&lt;/code&gt;, using &lt;code&gt;init&lt;/code&gt; as the initial value (if provided), and writes the results to the range beginning at &lt;code&gt;d_first&lt;/code&gt;. &quot;inclusive&quot; means that the i-th input element is included in the i-th sum.</source>
          <target state="translated">&lt;code&gt;init&lt;/code&gt; 를 초기 값 (제공된 경우 &lt;code&gt;[first, last)&lt;/code&gt; 으로 사용하여 [first, last) 범위에 대해 &lt;code&gt;binary_op&lt;/code&gt; (또는 과부하 (1-2)의 경우 &lt;code&gt;&lt;a href=&quot;../utility/functional/plus&quot;&gt;std::plus&lt;/a&gt;&amp;lt;&amp;gt;()&lt;/code&gt; 를 사용하여 포괄적 인 접두어 합계 연산을 계산 하고 결과를 씁니다. &lt;code&gt;d_first&lt;/code&gt; 에서 시작하는 범위 까지 . &quot;포함&quot;은 i 번째 입력 요소가 i 번째 합계에 포함됨을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="181b2c5fdb89e27a6008d489d216495b9acd968b" translate="yes" xml:space="preserve">
          <source>Computes both the quotient and the remainder of the division of the numerator &lt;code&gt;x&lt;/code&gt; by the denominator &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1bca3a13f3789493ad704433dd8c0516f3528c2" translate="yes" xml:space="preserve">
          <source>Computes complex arc cosine of a complex value &lt;code&gt;z&lt;/code&gt;. Branch cuts exist outside the interval [&amp;minus;1 ; +1] along the real axis.</source>
          <target state="translated">복소수 값 &lt;code&gt;z&lt;/code&gt; 의 복소수 아크 코사인을 계산합니다 . 분지 컷이 간격 [-1; 실제 축을 따라 +1].</target>
        </trans-unit>
        <trans-unit id="7f451bb58e64ec6fda110a8904e713ed80f695bd" translate="yes" xml:space="preserve">
          <source>Computes complex arc hyperbolic cosine of a complex value &lt;code&gt;z&lt;/code&gt; with branch cut at values less than 1 along the real axis.</source>
          <target state="translated">실수 축을 따라 1보다 작은 값에서 분기 절단을 사용 하여 복소수 값 &lt;code&gt;z&lt;/code&gt; 의 복소 아크 쌍곡 코사인을 계산 합니다.</target>
        </trans-unit>
        <trans-unit id="46c34332326a78af820b40b821ea13cc88436aab" translate="yes" xml:space="preserve">
          <source>Computes complex arc hyperbolic sine of a complex value &lt;code&gt;z&lt;/code&gt; with branch cuts outside the interval [&amp;minus;i; +i] along the imaginary axis.</source>
          <target state="translated">구간을 벗어난 분기 절단 으로 복소수 &lt;code&gt;z&lt;/code&gt; 의 복소수 쌍곡 사인을 계산 합니다. [-i; + i] 가상 축을 따라.</target>
        </trans-unit>
        <trans-unit id="b9470b1ac01f7049ac257afbaa0974479dfab44a" translate="yes" xml:space="preserve">
          <source>Computes complex arc sine of a complex value &lt;code&gt;z&lt;/code&gt;. Branch cut exists outside the interval [&amp;minus;1 ; +1] along the real axis.</source>
          <target state="translated">복소수 값 &lt;code&gt;z&lt;/code&gt; 의 복소수 아크 사인을 계산합니다 . 분지 절단이 간격 [-1; 실제 축을 따라 +1].</target>
        </trans-unit>
        <trans-unit id="72562106bc0a9aa3aa49d2a5b249ca46cc9f0280" translate="yes" xml:space="preserve">
          <source>Computes complex arc tangent of a complex value &lt;code&gt;z&lt;/code&gt;. Branch cut exists outside the interval [&amp;minus;i ; +i] along the imaginary axis.</source>
          <target state="translated">복소수 값 &lt;code&gt;z&lt;/code&gt; 의 복소수 탄젠트를 계산합니다 . 분지 절단이 구간 [-i; + i] 가상 축을 따라.</target>
        </trans-unit>
        <trans-unit id="b123730da049049c13043b0c4cab71d8854aa483" translate="yes" xml:space="preserve">
          <source>Computes complex common (base &lt;code&gt;10&lt;/code&gt;) logarithm of a complex value &lt;code&gt;z&lt;/code&gt; with a branch cut along the negative real axis.</source>
          <target state="translated">음의 실수 축을 따라 브랜치 컷을 사용하여 복소수 값 &lt;code&gt;z&lt;/code&gt; 의 복소수 공통 (기본 &lt;code&gt;10&lt;/code&gt; ) 로그를 계산 합니다.</target>
        </trans-unit>
        <trans-unit id="a73daeff38f74a954d7645a8964cb740f236a2bb" translate="yes" xml:space="preserve">
          <source>Computes complex cosine of a complex value &lt;code&gt;z&lt;/code&gt;.</source>
          <target state="translated">복소수 값 &lt;code&gt;z&lt;/code&gt; 의 복소수 코사인을 계산합니다 .</target>
        </trans-unit>
        <trans-unit id="708289857c367ccf84df6f15c5db8d3207fb2742" translate="yes" xml:space="preserve">
          <source>Computes complex hyperbolic cosine of a complex value &lt;code&gt;z&lt;/code&gt;.</source>
          <target state="translated">복소수 &lt;code&gt;z&lt;/code&gt; 의 복소수 코사인을 계산합니다 .</target>
        </trans-unit>
        <trans-unit id="69c3554ff10d64a18f4743db4b5dc887b90ff957" translate="yes" xml:space="preserve">
          <source>Computes complex hyperbolic sine of a complex value &lt;code&gt;z&lt;/code&gt;.</source>
          <target state="translated">복소수 &lt;code&gt;z&lt;/code&gt; 의 복소수 사인을 계산합니다 .</target>
        </trans-unit>
        <trans-unit id="9ad7a37dbd5675c0a47bd0df3c274329a823a818" translate="yes" xml:space="preserve">
          <source>Computes complex hyperbolic tangent of a complex value &lt;code&gt;z&lt;/code&gt;.</source>
          <target state="translated">복소수 &lt;code&gt;z&lt;/code&gt; 의 복소수 탄젠트를 계산합니다 .</target>
        </trans-unit>
        <trans-unit id="06d2ac1507a310b44c771bfbe1e3949d560a7f6a" translate="yes" xml:space="preserve">
          <source>Computes complex natural (base</source>
          <target state="translated">복잡한 자연 계산 (기본</target>
        </trans-unit>
        <trans-unit id="51c0f8afe7fa15139b0206d459550b91ea8e880e" translate="yes" xml:space="preserve">
          <source>Computes complex sine of a complex value &lt;code&gt;z&lt;/code&gt;.</source>
          <target state="translated">복소수 값 &lt;code&gt;z&lt;/code&gt; 의 복소 사인을 계산합니다 .</target>
        </trans-unit>
        <trans-unit id="13437b0e7aa335c306492c44339dc847e22af5bb" translate="yes" xml:space="preserve">
          <source>Computes complex tangent of a complex value &lt;code&gt;z&lt;/code&gt;.</source>
          <target state="translated">복소수 값 &lt;code&gt;z&lt;/code&gt; 의 복소 탄젠트를 계산합니다 .</target>
        </trans-unit>
        <trans-unit id="0fdd626fa91a64e36c4e4dff7f0aac6a877129df" translate="yes" xml:space="preserve">
          <source>Computes difference between two calendar times as &lt;code&gt;&lt;a href=&quot;time_t&quot;&gt;std::time_t&lt;/a&gt;&lt;/code&gt; objects (&lt;code&gt;time_end - time_beg&lt;/code&gt;) in seconds. If &lt;code&gt;time_end&lt;/code&gt; refers to time point before &lt;code&gt;time_beg&lt;/code&gt; then the result is negative.</source>
          <target state="translated">두 달력 시간 간의 차이 를 초 단위의 &lt;code&gt;&lt;a href=&quot;time_t&quot;&gt;std::time_t&lt;/a&gt;&lt;/code&gt; 객체 ( &lt;code&gt;time_end - time_beg&lt;/code&gt; )로 계산합니다. 경우 &lt;code&gt;time_end&lt;/code&gt; 전에 시점을 의미 &lt;code&gt;time_beg&lt;/code&gt; 결과는 부정적이다.</target>
        </trans-unit>
        <trans-unit id="87682c65b7678e04e5fb418151478b3a85bc563f" translate="yes" xml:space="preserve">
          <source>Computes inner product (i.e. sum of products) or performs ordered map/reduce operation on the range &lt;code&gt;[first1, last1)&lt;/code&gt; and the range beginning at &lt;code&gt;first2&lt;/code&gt;.</source>
          <target state="translated">내부 제품 (예 : 제품의 합계)을 계산하거나 &lt;code&gt;[first1, last1)&lt;/code&gt; 범위와 &lt;code&gt;first2&lt;/code&gt; 에서 시작하는 범위에서 정렬 된 맵 / 감소 작업을 수행 합니다 .</target>
        </trans-unit>
        <trans-unit id="f084847ab9a3b6a1c523a1d2efa6daf3e0743e52" translate="yes" xml:space="preserve">
          <source>Computes symmetric difference of two sorted ranges: the elements that are found in either of the ranges, but not in both of them are copied to the range beginning at &lt;code&gt;d_first&lt;/code&gt;. The resulting range is also sorted.</source>
          <target state="translated">정렬 된 두 범위의 대칭 차이를 계산합니다. 두 범위 중 하나에 있지만 두 가지 모두에없는 요소는 &lt;code&gt;d_first&lt;/code&gt; 에서 시작하는 범위에 복사됩니다 . 결과 범위도 정렬됩니다.</target>
        </trans-unit>
        <trans-unit id="fada816f8d77fb81d9ff5b692bd2596860aa718e" translate="yes" xml:space="preserve">
          <source>Computes the absolute value of an integer number. The behavior is undefined if the result cannot be represented by the return type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cafe37d4b3f10e61e080b0dc8cd786e055c9458" translate="yes" xml:space="preserve">
          <source>Computes the associated difference type of the type &lt;code&gt;I&lt;/code&gt;, if any. Users may specialize &lt;code&gt;incrementable_traits&lt;/code&gt; for a program-defined type.</source>
          <target state="translated">유형 &lt;code&gt;I&lt;/code&gt; 의 연관된 차이 유형을 계산합니다 (있는 경우). 사용자는 프로그램 정의 유형에 대해 &lt;code&gt;incrementable_traits&lt;/code&gt; 를 특수화 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="522f5e028308c648c6c9e92c90a8c12a96d1e442" translate="yes" xml:space="preserve">
          <source>Computes the associated value type of the type &lt;code&gt;I&lt;/code&gt;, if any. Users may specialize &lt;code&gt;readable_traits&lt;/code&gt; for a program-defined type.</source>
          <target state="translated">유형 &lt;code&gt;I&lt;/code&gt; 의 연관된 값 유형을 계산합니다 (있는 경우). 사용자는 프로그램 정의 유형에 대해 &lt;code&gt;readable_traits&lt;/code&gt; 를 전문화 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="fa8ec19b147c2582a203eb89430d80ab08456ae1" translate="yes" xml:space="preserve">
          <source>Computes the complex arc hyperbolic tangent of &lt;code&gt;z&lt;/code&gt; with branch cuts outside the interval [&amp;minus;1; +1] along the real axis.</source>
          <target state="translated">구간 [-1]을 벗어난 브랜치 컷 으로 &lt;code&gt;z&lt;/code&gt; 의 복소 아크 쌍곡 탄젠트를 계산합니다 . 실제 축을 따라 +1].</target>
        </trans-unit>
        <trans-unit id="40600cf58593d2dd25ff6326ebb4fe25fea33e23" translate="yes" xml:space="preserve">
          <source>Computes the differences between the second and the first of each adjacent pair of elements of the range &lt;code&gt;[first, last)&lt;/code&gt; and writes them to the range beginning at &lt;code&gt;d_first + 1&lt;/code&gt;. An unmodified copy of &lt;code&gt;*first&lt;/code&gt; is written to &lt;code&gt;*d_first&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;[first, last)&lt;/code&gt; 범위의 인접한 각 요소 쌍의 두 번째와 첫 번째의 차이를 계산하고 &lt;code&gt;d_first + 1&lt;/code&gt; 에서 시작하는 범위에 씁니다 . &lt;code&gt;*first&lt;/code&gt; 의 수정되지 않은 사본은 &lt;code&gt;*d_first&lt;/code&gt; 에 기록됩니다 .</target>
        </trans-unit>
        <trans-unit id="d713627b8da059f48ed7198c9c491f17614d4900" translate="yes" xml:space="preserve">
          <source>Computes the greatest common divisor of the integers &lt;code&gt;m&lt;/code&gt; and &lt;code&gt;n&lt;/code&gt;.</source>
          <target state="translated">정수 &lt;code&gt;m&lt;/code&gt; 과 &lt;code&gt;n&lt;/code&gt; 의 최대 공약수를 계산합니다 .</target>
        </trans-unit>
        <trans-unit id="6bbd8d6e65b076a6590cb95110d02d75ea3340c1" translate="yes" xml:space="preserve">
          <source>Computes the inverse tangent of &lt;code&gt;y/x&lt;/code&gt; using the signs of arguments to correctly determine quadrant.</source>
          <target state="translated">사분면을 올바르게 결정하기 위해 인수 부호를 사용하여 &lt;code&gt;y/x&lt;/code&gt; 의 역 탄젠트를 계산합니다 .</target>
        </trans-unit>
        <trans-unit id="fa43a8e258de520e9d52a2e165de652feb04b600" translate="yes" xml:space="preserve">
          <source>Computes the least common multiple of the integers &lt;code&gt;m&lt;/code&gt; and &lt;code&gt;n&lt;/code&gt;.</source>
          <target state="translated">정수 &lt;code&gt;m&lt;/code&gt; 과 &lt;code&gt;n&lt;/code&gt; 의 최소 ​​공배수를 계산합니다 .</target>
        </trans-unit>
        <trans-unit id="f968a4caeebcbb0a16b3460ff42de8d2af63c6cb" translate="yes" xml:space="preserve">
          <source>Computes the maximum value of the elements.</source>
          <target state="translated">요소의 최대 값을 계산합니다.</target>
        </trans-unit>
        <trans-unit id="079b6e790a7fbc9318fcbd4346f3a29ad4c1dfd1" translate="yes" xml:space="preserve">
          <source>Computes the midpoint of the integers, floating-points, or pointers &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;.</source>
          <target state="translated">정수, 부동 소수점 또는 포인터 &lt;code&gt;a&lt;/code&gt; 및 &lt;code&gt;b&lt;/code&gt; 의 중간 점을 계산합니다 .</target>
        </trans-unit>
        <trans-unit id="9c5c3acc68ea6f4878347d74c92fd5e8b1a911bc" translate="yes" xml:space="preserve">
          <source>Computes the minimum value of the elements.</source>
          <target state="translated">요소의 최소값을 계산합니다.</target>
        </trans-unit>
        <trans-unit id="a4fd5483aee69f44282328d1d90f8ec7406f0d85" translate="yes" xml:space="preserve">
          <source>Computes the partial sums of the elements in the subranges of the range &lt;code&gt;[first, last)&lt;/code&gt; and writes them to the range beginning at &lt;code&gt;d_first&lt;/code&gt;. The first version uses &lt;code&gt;operator+&lt;/code&gt; to sum up the elements, the second version uses the given binary function &lt;code&gt;op&lt;/code&gt;, both applying &lt;a href=&quot;../utility/move&quot;&gt;&lt;code&gt;std::move&lt;/code&gt;&lt;/a&gt; to their operands on the left hand side(since C++20).</source>
          <target state="translated">&lt;code&gt;[first, last)&lt;/code&gt; 범위의 하위 범위에있는 요소의 부분 합을 계산하여 &lt;code&gt;d_first&lt;/code&gt; 에서 시작하는 범위에 씁니다 . 첫 번째 버전은 &lt;code&gt;operator+&lt;/code&gt; 를 사용 하여 요소를 요약하고 두 번째 버전은 주어진 이진 함수 &lt;code&gt;op&lt;/code&gt; 를 사용 하며 두 가지 모두 왼쪽의 피연산자에 &lt;a href=&quot;../utility/move&quot;&gt; &lt;code&gt;std::move&lt;/code&gt; &lt;/a&gt; 를 적용합니다 (C ++ 20부터).</target>
        </trans-unit>
        <trans-unit id="464f5ea037b2c3413ef58d0d7db0aaa8c944ec76" translate="yes" xml:space="preserve">
          <source>Computes the square root of the complex number &lt;code&gt;z&lt;/code&gt; with a branch cut along the negative real axis.</source>
          <target state="translated">음의 실수 축을 따라 분기 컷으로 복소수 &lt;code&gt;z&lt;/code&gt; 의 제곱근을 계산합니다 .</target>
        </trans-unit>
        <trans-unit id="84463a298c44af96efe913986407014f126d015b" translate="yes" xml:space="preserve">
          <source>Computes the sum of the elements.</source>
          <target state="translated">요소의 합을 계산합니다.</target>
        </trans-unit>
        <trans-unit id="601cf1930797b7aa731f936adea9bfa9f9f9f0b7" translate="yes" xml:space="preserve">
          <source>Computes the sum of the given value &lt;code&gt;init&lt;/code&gt; and the elements in the range &lt;code&gt;[first, last)&lt;/code&gt;. The first version uses &lt;code&gt;operator+&lt;/code&gt; to sum up the elements, the second version uses the given binary function &lt;code&gt;op&lt;/code&gt;, both applying &lt;a href=&quot;../utility/move&quot;&gt;&lt;code&gt;std::move&lt;/code&gt;&lt;/a&gt; to their operands on the left hand side(since C++20).</source>
          <target state="translated">주어진 값 &lt;code&gt;init&lt;/code&gt; 와 &lt;code&gt;[first, last)&lt;/code&gt; 범위의 요소 의 합을 계산합니다 . 첫 번째 버전은 &lt;code&gt;operator+&lt;/code&gt; 를 사용 하여 요소를 요약하고 두 번째 버전은 주어진 이진 함수 &lt;code&gt;op&lt;/code&gt; 를 사용 하며 두 가지 모두 왼쪽의 피연산자에 &lt;a href=&quot;../utility/move&quot;&gt; &lt;code&gt;std::move&lt;/code&gt; &lt;/a&gt; 를 적용합니다 (C ++ 20부터).</target>
        </trans-unit>
        <trans-unit id="7ac88785d87b2437a504dfe066b845fed96b26d9" translate="yes" xml:space="preserve">
          <source>Concatenates the current path and the argument.</source>
          <target state="translated">현재 경로와 인수를 연결합니다.</target>
        </trans-unit>
        <trans-unit id="f1cca782cb4ed37c62b0a5c57c8d7d917a01a8e5" translate="yes" xml:space="preserve">
          <source>Concatenates two path components using the preferred directory separator if appropriate (see &lt;a href=&quot;append&quot;&gt;&lt;code&gt;operator/=&lt;/code&gt;&lt;/a&gt; for details).</source>
          <target state="translated">필요한 경우 기본 디렉토리 구분 기호를 사용하여 두 개의 경로 구성 요소를 연결합니다 (자세한 내용은 &lt;a href=&quot;append&quot;&gt; &lt;code&gt;operator/=&lt;/code&gt; &lt;/a&gt; 참조).</target>
        </trans-unit>
        <trans-unit id="eec037fd21cdbe752cf956ee1da877b809e27461" translate="yes" xml:space="preserve">
          <source>Concatenation</source>
          <target state="translated">Concatenation</target>
        </trans-unit>
        <trans-unit id="c05bafdb56031bb64da1f1d1861f60118932c605" translate="yes" xml:space="preserve">
          <source>Concept</source>
          <target state="translated">Concept</target>
        </trans-unit>
        <trans-unit id="475fae5fecb28315dbb2bce6879711bd4b1379c7" translate="yes" xml:space="preserve">
          <source>Concept &lt;a href=&quot;../concepts/assignable&quot;&gt;&lt;code&gt;Assignable&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">개념 &lt;a href=&quot;../concepts/assignable&quot;&gt; &lt;code&gt;Assignable&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="12f346179af5312ba74444578ed05f3a9e5123af" translate="yes" xml:space="preserve">
          <source>Concept &lt;a href=&quot;../concepts/boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">개념 &lt;a href=&quot;../concepts/boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="100ebd0fa998f188c7466f4e85c958a37afb678c" translate="yes" xml:space="preserve">
          <source>Concept &lt;a href=&quot;../concepts/common&quot;&gt;&lt;code&gt;Common&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">개념 &lt;a href=&quot;../concepts/common&quot;&gt; &lt;code&gt;Common&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="317644c48e5fdf0bb43d8ff4882a67bc97c624c6" translate="yes" xml:space="preserve">
          <source>Concept &lt;a href=&quot;../concepts/commonreference&quot;&gt;&lt;code&gt;CommonReference&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">개념 &lt;a href=&quot;../concepts/commonreference&quot;&gt; &lt;code&gt;CommonReference&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ede6e506911336242de3deaae9f0c6d137f58f19" translate="yes" xml:space="preserve">
          <source>Concept &lt;a href=&quot;../concepts/constructible&quot;&gt;&lt;code&gt;Constructible&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">컨셉 &lt;a href=&quot;../concepts/constructible&quot;&gt; &lt;code&gt;Constructible&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="49c8c7483254d779fb7d39f5edeaab1e789bd0ca" translate="yes" xml:space="preserve">
          <source>Concept &lt;a href=&quot;../concepts/convertibleto&quot;&gt;&lt;code&gt;ConvertibleTo&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">컨셉 &lt;a href=&quot;../concepts/convertibleto&quot;&gt; &lt;code&gt;ConvertibleTo&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="15115abfc1b4fe48ad0226d6c7beb53d549dfe8d" translate="yes" xml:space="preserve">
          <source>Concept &lt;a href=&quot;../concepts/copyable&quot;&gt;&lt;code&gt;Copyable&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">컨셉 &lt;a href=&quot;../concepts/copyable&quot;&gt; &lt;code&gt;Copyable&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3aeb5356619429393503d74b5cf5d28977c739f6" translate="yes" xml:space="preserve">
          <source>Concept &lt;a href=&quot;../concepts/copyconstructible&quot;&gt;&lt;code&gt;CopyConstructible&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">컨셉 &lt;a href=&quot;../concepts/copyconstructible&quot;&gt; &lt;code&gt;CopyConstructible&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5cbbd73c0fd97f1cd34f57aff20dd11a0b6379f1" translate="yes" xml:space="preserve">
          <source>Concept &lt;a href=&quot;../concepts/defaultconstructible&quot;&gt;&lt;code&gt;DefaultConstructible&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">개념 &lt;a href=&quot;../concepts/defaultconstructible&quot;&gt; &lt;code&gt;DefaultConstructible&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1466f69ea3e79d8d88d326aed572b5481ff77348" translate="yes" xml:space="preserve">
          <source>Concept &lt;a href=&quot;../concepts/derivedfrom&quot;&gt;&lt;code&gt;DerivedFrom&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;../concepts/derivedfrom&quot;&gt; &lt;code&gt;DerivedFrom&lt;/code&gt; &lt;/a&gt; 개념</target>
        </trans-unit>
        <trans-unit id="206c7ca17d741df3f0f066716cb877e029ed6ba5" translate="yes" xml:space="preserve">
          <source>Concept &lt;a href=&quot;../concepts/destructible&quot;&gt;&lt;code&gt;Destructible&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">개념 &lt;a href=&quot;../concepts/destructible&quot;&gt; &lt;code&gt;Destructible&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="280d33668e886abef291f9ea171f04c8378baa75" translate="yes" xml:space="preserve">
          <source>Concept &lt;a href=&quot;../concepts/equalitycomparable&quot;&gt;&lt;code&gt;EqualityComparable&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">개념 &lt;a href=&quot;../concepts/equalitycomparable&quot;&gt; &lt;code&gt;EqualityComparable&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c86d04ccf5c949047707441ba0e0955e5cfff675" translate="yes" xml:space="preserve">
          <source>Concept &lt;a href=&quot;../concepts/equalitycomparable&quot;&gt;&lt;code&gt;EqualityComparableWith&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">개념 &lt;a href=&quot;../concepts/equalitycomparable&quot;&gt; &lt;code&gt;EqualityComparableWith&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3e27ab4775b04e04dd58498417415cf0820ccdd7" translate="yes" xml:space="preserve">
          <source>Concept &lt;a href=&quot;../concepts/integral&quot;&gt;&lt;code&gt;Integral&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">개념 &lt;a href=&quot;../concepts/integral&quot;&gt; &lt;code&gt;Integral&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d49f592d987378298e1ddfd2c35e00d81d98e096" translate="yes" xml:space="preserve">
          <source>Concept &lt;a href=&quot;../concepts/invocable&quot;&gt;&lt;code&gt;Invocable&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;../concepts/invocable&quot;&gt; &lt;code&gt;Invocable&lt;/code&gt; &lt;/a&gt; 개념</target>
        </trans-unit>
        <trans-unit id="bb29b6cf10a28d06c579702b6f37469a14eb9177" translate="yes" xml:space="preserve">
          <source>Concept &lt;a href=&quot;../concepts/invocable&quot;&gt;&lt;code&gt;RegularInvocable&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">컨셉 &lt;a href=&quot;../concepts/invocable&quot;&gt; &lt;code&gt;RegularInvocable&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a57e4b77b6bffac972770386069ec0c781ec223d" translate="yes" xml:space="preserve">
          <source>Concept &lt;a href=&quot;../concepts/movable&quot;&gt;&lt;code&gt;Movable&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">컨셉 &lt;a href=&quot;../concepts/movable&quot;&gt; &lt;code&gt;Movable&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="594d47469b7fa998b0333809f6cb95a8759b7afc" translate="yes" xml:space="preserve">
          <source>Concept &lt;a href=&quot;../concepts/moveconstructible&quot;&gt;&lt;code&gt;MoveConstructible&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">컨셉트 &lt;a href=&quot;../concepts/moveconstructible&quot;&gt; &lt;code&gt;MoveConstructible&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ea35ffe3c9f05809183a3ddb8518b0c868c85203" translate="yes" xml:space="preserve">
          <source>Concept &lt;a href=&quot;../concepts/predicate&quot;&gt;&lt;code&gt;Predicate&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">개념 &lt;a href=&quot;../concepts/predicate&quot;&gt; &lt;code&gt;Predicate&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="dc82e5e9eb1313bcc6804b0fb12accb536ce2b69" translate="yes" xml:space="preserve">
          <source>Concept &lt;a href=&quot;../concepts/regular&quot;&gt;&lt;code&gt;Regular&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">컨셉 &lt;a href=&quot;../concepts/regular&quot;&gt; &lt;code&gt;Regular&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c79cbb6ae20e99e7de2117ce2aae1a9e2f066bf1" translate="yes" xml:space="preserve">
          <source>Concept &lt;a href=&quot;../concepts/relation&quot;&gt;&lt;code&gt;Relation&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">개념 &lt;a href=&quot;../concepts/relation&quot;&gt; &lt;code&gt;Relation&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3a49722950ab57b25f81cb16c34ff09d40f70745" translate="yes" xml:space="preserve">
          <source>Concept &lt;a href=&quot;../concepts/same&quot;&gt;&lt;code&gt;Same&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">개념 &lt;a href=&quot;../concepts/same&quot;&gt; &lt;code&gt;Same&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e337f52f0336e649340c8ada25d5345884b5f942" translate="yes" xml:space="preserve">
          <source>Concept &lt;a href=&quot;../concepts/semiregular&quot;&gt;&lt;code&gt;Semiregular&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">개념 &lt;a href=&quot;../concepts/semiregular&quot;&gt; &lt;code&gt;Semiregular&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8c8641e4099769e1795d6f2569156bd89851a87b" translate="yes" xml:space="preserve">
          <source>Concept &lt;a href=&quot;../concepts/signedintegral&quot;&gt;&lt;code&gt;SignedIntegral&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">개념 &lt;a href=&quot;../concepts/signedintegral&quot;&gt; &lt;code&gt;SignedIntegral&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="fffb727e8ea44679d869808309dacd02f156a60a" translate="yes" xml:space="preserve">
          <source>Concept &lt;a href=&quot;../concepts/stricttotallyordered&quot;&gt;&lt;code&gt;StrictTotallyOrdered&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">개념 &lt;a href=&quot;../concepts/stricttotallyordered&quot;&gt; &lt;code&gt;StrictTotallyOrdered&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3639d4b4940d5c4ccd7037436ab683c3b5638e08" translate="yes" xml:space="preserve">
          <source>Concept &lt;a href=&quot;../concepts/stricttotallyordered&quot;&gt;&lt;code&gt;StrictTotallyOrderedWith&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">개념은 &lt;a href=&quot;../concepts/stricttotallyordered&quot;&gt; &lt;code&gt;StrictTotallyOrderedWith&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="549878cb8defb33085964f3831bea1891609c1ba" translate="yes" xml:space="preserve">
          <source>Concept &lt;a href=&quot;../concepts/strictweakorder&quot;&gt;&lt;code&gt;StrictWeakOrder&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">개념 &lt;a href=&quot;../concepts/strictweakorder&quot;&gt; &lt;code&gt;StrictWeakOrder&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="0599ea898b1cac429f5a137778505619c0e9ac33" translate="yes" xml:space="preserve">
          <source>Concept &lt;a href=&quot;../concepts/swappable&quot;&gt;&lt;code&gt;Swappable&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;../concepts/swappable&quot;&gt; &lt;code&gt;Swappable&lt;/code&gt; &lt;/a&gt; 개념</target>
        </trans-unit>
        <trans-unit id="e2219373b332628cd86caca370b374e8ba3d7c27" translate="yes" xml:space="preserve">
          <source>Concept &lt;a href=&quot;../concepts/swappable&quot;&gt;&lt;code&gt;SwappableWith&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;../concepts/swappable&quot;&gt; &lt;code&gt;SwappableWith&lt;/code&gt; &lt;/a&gt; 개념</target>
        </trans-unit>
        <trans-unit id="c466da5f27a6f768b21d8836217261644f35b630" translate="yes" xml:space="preserve">
          <source>Concept &lt;a href=&quot;../concepts/unsignedintegral&quot;&gt;&lt;code&gt;UnsignedIntegral&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">개념 &lt;a href=&quot;../concepts/unsignedintegral&quot;&gt; &lt;code&gt;UnsignedIntegral&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="91584560b3515ba395fd65ade31e72e68ebe73a4" translate="yes" xml:space="preserve">
          <source>Concept &lt;a href=&quot;../ranges/bidirectionalrange&quot;&gt;&lt;code&gt;BidirectionalRange&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">개념 &lt;a href=&quot;../ranges/bidirectionalrange&quot;&gt; &lt;code&gt;BidirectionalRange&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a204981ef46487ddc20d3855dd39f33f4ce7588c" translate="yes" xml:space="preserve">
          <source>Concept &lt;a href=&quot;../ranges/commonrange&quot;&gt;&lt;code&gt;CommonRange&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">개념 &lt;a href=&quot;../ranges/commonrange&quot;&gt; &lt;code&gt;CommonRange&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="90976314172b53881f1105cb1edc4b2c95282478" translate="yes" xml:space="preserve">
          <source>Concept &lt;a href=&quot;../ranges/contiguousrange&quot;&gt;&lt;code&gt;ContiguousRange&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">개념 &lt;a href=&quot;../ranges/contiguousrange&quot;&gt; &lt;code&gt;ContiguousRange&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="85c40dc0cd95e108fd3e3219dc487d043941e19e" translate="yes" xml:space="preserve">
          <source>Concept &lt;a href=&quot;../ranges/forwardrange&quot;&gt;&lt;code&gt;ForwardRange&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">컨셉 &lt;a href=&quot;../ranges/forwardrange&quot;&gt; &lt;code&gt;ForwardRange&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1838bef05af4e2be4bed5ae6f514051568041f30" translate="yes" xml:space="preserve">
          <source>Concept &lt;a href=&quot;../ranges/inputrange&quot;&gt;&lt;code&gt;InputRange&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">컨셉 입력 &lt;a href=&quot;../ranges/inputrange&quot;&gt; &lt;code&gt;InputRange&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="482979b03a7b84a56fa7a931ce0f339073c297a5" translate="yes" xml:space="preserve">
          <source>Concept &lt;a href=&quot;../ranges/outputrange&quot;&gt;&lt;code&gt;OutputRange&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">컨셉 &lt;a href=&quot;../ranges/outputrange&quot;&gt; &lt;code&gt;OutputRange&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2a509ae9cf26e85d7df21562d28aa6b5250c0fa2" translate="yes" xml:space="preserve">
          <source>Concept &lt;a href=&quot;../ranges/randomaccessrange&quot;&gt;&lt;code&gt;RandomAccessRange&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">개념 &lt;a href=&quot;../ranges/randomaccessrange&quot;&gt; &lt;code&gt;RandomAccessRange&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7eeb4cd117154ebbfcb30225e4a2aa0e3817d1ab" translate="yes" xml:space="preserve">
          <source>Concept &lt;a href=&quot;../ranges/range&quot;&gt;&lt;code&gt;Range&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">개념 &lt;a href=&quot;../ranges/range&quot;&gt; &lt;code&gt;Range&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="11cddcd8a7587eadddcd86773af1e18986438840" translate="yes" xml:space="preserve">
          <source>Concept &lt;a href=&quot;../ranges/sizedrange&quot;&gt;&lt;code&gt;SizedRange&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">컨셉 &lt;a href=&quot;../ranges/sizedrange&quot;&gt; &lt;code&gt;SizedRange&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="895da95c7f1e875d6a8c07c1daa0580539b937be" translate="yes" xml:space="preserve">
          <source>Concept &lt;a href=&quot;../ranges/view&quot;&gt;&lt;code&gt;View&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">컨셉 &lt;a href=&quot;../ranges/view&quot;&gt; &lt;code&gt;View&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d567d03154a0fff0edfc7ab8f18df9ed495868fc" translate="yes" xml:space="preserve">
          <source>Concept &lt;a href=&quot;../ranges/viewablerange&quot;&gt;&lt;code&gt;ViewableRange&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">컨셉보기 &lt;a href=&quot;../ranges/viewablerange&quot;&gt; &lt;code&gt;ViewableRange&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8f79d0b57898bb603ca9723f7f179ebda3abe94a" translate="yes" xml:space="preserve">
          <source>Concept &lt;a href=&quot;https://en.cppreference.com/mwiki/index.php?title=cpp/iterator/BidirectionalIterator&amp;amp;action=edit&amp;amp;redlink=1&quot;&gt;&lt;code&gt;BidirectionalIterator&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">개념 &lt;a href=&quot;https://en.cppreference.com/mwiki/index.php?title=cpp/iterator/BidirectionalIterator&amp;amp;action=edit&amp;amp;redlink=1&quot;&gt; &lt;code&gt;BidirectionalIterator&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="4f439905d9f4a3be656b51f3aed8a2780e268204" translate="yes" xml:space="preserve">
          <source>Concept &lt;a href=&quot;https://en.cppreference.com/mwiki/index.php?title=cpp/iterator/ContiguousIterator&amp;amp;action=edit&amp;amp;redlink=1&quot;&gt;&lt;code&gt;ContiguousIterator&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">개념 &lt;a href=&quot;https://en.cppreference.com/mwiki/index.php?title=cpp/iterator/ContiguousIterator&amp;amp;action=edit&amp;amp;redlink=1&quot;&gt; &lt;code&gt;ContiguousIterator&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="296133e483ee95092a05263b050d61f25b7d39de" translate="yes" xml:space="preserve">
          <source>Concept &lt;a href=&quot;https://en.cppreference.com/mwiki/index.php?title=cpp/iterator/ForwardIterator&amp;amp;action=edit&amp;amp;redlink=1&quot;&gt;&lt;code&gt;ForwardIterator&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Concept &lt;a href=&quot;https://en.cppreference.com/mwiki/index.php?title=cpp/iterator/ForwardIterator&amp;amp;action=edit&amp;amp;redlink=1&quot;&gt; &lt;code&gt;ForwardIterator&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="fb3b9c858e1abd3b0149a298ba3d9e82371b9fa9" translate="yes" xml:space="preserve">
          <source>Concept &lt;a href=&quot;https://en.cppreference.com/mwiki/index.php?title=cpp/iterator/Incrementable&amp;amp;action=edit&amp;amp;redlink=1&quot;&gt;&lt;code&gt;Incrementable&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://en.cppreference.com/mwiki/index.php?title=cpp/iterator/Incrementable&amp;amp;action=edit&amp;amp;redlink=1&quot;&gt; &lt;code&gt;Incrementable&lt;/code&gt; &lt;/a&gt; 개념</target>
        </trans-unit>
        <trans-unit id="7afdf1b9ae654bb3c2810e2dee59fbc1ec254b2e" translate="yes" xml:space="preserve">
          <source>Concept &lt;a href=&quot;https://en.cppreference.com/mwiki/index.php?title=cpp/iterator/IndirectRelation&amp;amp;action=edit&amp;amp;redlink=1&quot;&gt;&lt;code&gt;IndirectRelation&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">개념 &lt;a href=&quot;https://en.cppreference.com/mwiki/index.php?title=cpp/iterator/IndirectRelation&amp;amp;action=edit&amp;amp;redlink=1&quot;&gt; &lt;code&gt;IndirectRelation&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="57eb0048f20e448e0d378faa99d8f23f8d2c7c4f" translate="yes" xml:space="preserve">
          <source>Concept &lt;a href=&quot;https://en.cppreference.com/mwiki/index.php?title=cpp/iterator/IndirectStrictWeakOrder&amp;amp;action=edit&amp;amp;redlink=1&quot;&gt;&lt;code&gt;IndirectStrictWeakOrder&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">개념 &lt;a href=&quot;https://en.cppreference.com/mwiki/index.php?title=cpp/iterator/IndirectStrictWeakOrder&amp;amp;action=edit&amp;amp;redlink=1&quot;&gt; &lt;code&gt;IndirectStrictWeakOrder&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7c1ce93da8dbca1717863d86ffc8237756c65857" translate="yes" xml:space="preserve">
          <source>Concept &lt;a href=&quot;https://en.cppreference.com/mwiki/index.php?title=cpp/iterator/IndirectUnaryInvocable&amp;amp;action=edit&amp;amp;redlink=1&quot;&gt;&lt;code&gt;IndirectRegularUnaryInvocable&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://en.cppreference.com/mwiki/index.php?title=cpp/iterator/IndirectUnaryInvocable&amp;amp;action=edit&amp;amp;redlink=1&quot;&gt; &lt;code&gt;IndirectRegularUnaryInvocable&lt;/code&gt; &lt;/a&gt; 개념</target>
        </trans-unit>
        <trans-unit id="4990239cf6eb4b004f143bb513b3443a2f5a804b" translate="yes" xml:space="preserve">
          <source>Concept &lt;a href=&quot;https://en.cppreference.com/mwiki/index.php?title=cpp/iterator/IndirectUnaryInvocable&amp;amp;action=edit&amp;amp;redlink=1&quot;&gt;&lt;code&gt;IndirectUnaryInvocable&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">개념 &lt;a href=&quot;https://en.cppreference.com/mwiki/index.php?title=cpp/iterator/IndirectUnaryInvocable&amp;amp;action=edit&amp;amp;redlink=1&quot;&gt; &lt;code&gt;IndirectUnaryInvocable&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="6d9753898e4bb885d18a977e17db57e12d57212b" translate="yes" xml:space="preserve">
          <source>Concept &lt;a href=&quot;https://en.cppreference.com/mwiki/index.php?title=cpp/iterator/IndirectUnaryPredicate&amp;amp;action=edit&amp;amp;redlink=1&quot;&gt;&lt;code&gt;IndirectUnaryPredicate&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Concept &lt;a href=&quot;https://en.cppreference.com/mwiki/index.php?title=cpp/iterator/IndirectUnaryPredicate&amp;amp;action=edit&amp;amp;redlink=1&quot;&gt; &lt;code&gt;IndirectUnaryPredicate&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b5e6321648ffaad5dc96e0ed91c5c01cffdea8ad" translate="yes" xml:space="preserve">
          <source>Concept &lt;a href=&quot;https://en.cppreference.com/mwiki/index.php?title=cpp/iterator/IndirectlyComparable&amp;amp;action=edit&amp;amp;redlink=1&quot;&gt;&lt;code&gt;IndirectlyComparable&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://en.cppreference.com/mwiki/index.php?title=cpp/iterator/IndirectlyComparable&amp;amp;action=edit&amp;amp;redlink=1&quot;&gt; &lt;code&gt;IndirectlyComparable&lt;/code&gt; &lt;/a&gt; 개념</target>
        </trans-unit>
        <trans-unit id="d9c2dc687b9cf2daaff2e0ea26ba71485219af6f" translate="yes" xml:space="preserve">
          <source>Concept &lt;a href=&quot;https://en.cppreference.com/mwiki/index.php?title=cpp/iterator/IndirectlyCopyable&amp;amp;action=edit&amp;amp;redlink=1&quot;&gt;&lt;code&gt;IndirectlyCopyable&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://en.cppreference.com/mwiki/index.php?title=cpp/iterator/IndirectlyCopyable&amp;amp;action=edit&amp;amp;redlink=1&quot;&gt; &lt;code&gt;IndirectlyCopyable&lt;/code&gt; &lt;/a&gt; 개념</target>
        </trans-unit>
        <trans-unit id="47c7be91710c65b4cf2c34a264217a5c4396ae1d" translate="yes" xml:space="preserve">
          <source>Concept &lt;a href=&quot;https://en.cppreference.com/mwiki/index.php?title=cpp/iterator/IndirectlyCopyableStorable&amp;amp;action=edit&amp;amp;redlink=1&quot;&gt;&lt;code&gt;IndirectlyCopyableStorable&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://en.cppreference.com/mwiki/index.php?title=cpp/iterator/IndirectlyCopyableStorable&amp;amp;action=edit&amp;amp;redlink=1&quot;&gt; &lt;code&gt;IndirectlyCopyableStorable&lt;/code&gt; &lt;/a&gt; 개념</target>
        </trans-unit>
        <trans-unit id="c0eb864edf048540d7e44bd8786c60c84f6f381b" translate="yes" xml:space="preserve">
          <source>Concept &lt;a href=&quot;https://en.cppreference.com/mwiki/index.php?title=cpp/iterator/IndirectlyMovable&amp;amp;action=edit&amp;amp;redlink=1&quot;&gt;&lt;code&gt;IndirectlyMovable&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://en.cppreference.com/mwiki/index.php?title=cpp/iterator/IndirectlyMovable&amp;amp;action=edit&amp;amp;redlink=1&quot;&gt; &lt;code&gt;IndirectlyMovable&lt;/code&gt; &lt;/a&gt; 개념</target>
        </trans-unit>
        <trans-unit id="dc457a93bdd8836a3f7fb3820cc69d78d2e123c8" translate="yes" xml:space="preserve">
          <source>Concept &lt;a href=&quot;https://en.cppreference.com/mwiki/index.php?title=cpp/iterator/IndirectlyMovableStorable&amp;amp;action=edit&amp;amp;redlink=1&quot;&gt;&lt;code&gt;IndirectlyMovableStorable&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://en.cppreference.com/mwiki/index.php?title=cpp/iterator/IndirectlyMovableStorable&amp;amp;action=edit&amp;amp;redlink=1&quot;&gt; &lt;code&gt;IndirectlyMovableStorable&lt;/code&gt; &lt;/a&gt; 개념</target>
        </trans-unit>
        <trans-unit id="37156fb448b198c15265b70117c8778e15ed6fd4" translate="yes" xml:space="preserve">
          <source>Concept &lt;a href=&quot;https://en.cppreference.com/mwiki/index.php?title=cpp/iterator/IndirectlySwappable&amp;amp;action=edit&amp;amp;redlink=1&quot;&gt;&lt;code&gt;IndirectlySwappable&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://en.cppreference.com/mwiki/index.php?title=cpp/iterator/IndirectlySwappable&amp;amp;action=edit&amp;amp;redlink=1&quot;&gt; &lt;code&gt;IndirectlySwappable&lt;/code&gt; &lt;/a&gt; 개념</target>
        </trans-unit>
        <trans-unit id="dd50fbbf34da913386c2111bc2f6f0f300e59e8e" translate="yes" xml:space="preserve">
          <source>Concept &lt;a href=&quot;https://en.cppreference.com/mwiki/index.php?title=cpp/iterator/InputIterator&amp;amp;action=edit&amp;amp;redlink=1&quot;&gt;&lt;code&gt;InputIterator&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">개념 &lt;a href=&quot;https://en.cppreference.com/mwiki/index.php?title=cpp/iterator/InputIterator&amp;amp;action=edit&amp;amp;redlink=1&quot;&gt; &lt;code&gt;InputIterator&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2fc171a891f7d12c587d9f48c00ed8ef69a0b603" translate="yes" xml:space="preserve">
          <source>Concept &lt;a href=&quot;https://en.cppreference.com/mwiki/index.php?title=cpp/iterator/Iterator&amp;amp;action=edit&amp;amp;redlink=1&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">컨셉 &lt;a href=&quot;https://en.cppreference.com/mwiki/index.php?title=cpp/iterator/Iterator&amp;amp;action=edit&amp;amp;redlink=1&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="6aefc83781ce92ab83fe23840e48b2a5bc48b574" translate="yes" xml:space="preserve">
          <source>Concept &lt;a href=&quot;https://en.cppreference.com/mwiki/index.php?title=cpp/iterator/Mergeable&amp;amp;action=edit&amp;amp;redlink=1&quot;&gt;&lt;code&gt;Mergeable&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://en.cppreference.com/mwiki/index.php?title=cpp/iterator/Mergeable&amp;amp;action=edit&amp;amp;redlink=1&quot;&gt; &lt;code&gt;Mergeable&lt;/code&gt; &lt;/a&gt; 개념</target>
        </trans-unit>
        <trans-unit id="0a6e130d3a62ab4aec7d68c8d495d87a6821efdc" translate="yes" xml:space="preserve">
          <source>Concept &lt;a href=&quot;https://en.cppreference.com/mwiki/index.php?title=cpp/iterator/OutputIterator&amp;amp;action=edit&amp;amp;redlink=1&quot;&gt;&lt;code&gt;OutputIterator&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">개념 &lt;a href=&quot;https://en.cppreference.com/mwiki/index.php?title=cpp/iterator/OutputIterator&amp;amp;action=edit&amp;amp;redlink=1&quot;&gt; &lt;code&gt;OutputIterator&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="daa4df7199d4e8dab6574416004466b9bce3a62f" translate="yes" xml:space="preserve">
          <source>Concept &lt;a href=&quot;https://en.cppreference.com/mwiki/index.php?title=cpp/iterator/Permutable&amp;amp;action=edit&amp;amp;redlink=1&quot;&gt;&lt;code&gt;Permutable&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">개념 &lt;a href=&quot;https://en.cppreference.com/mwiki/index.php?title=cpp/iterator/Permutable&amp;amp;action=edit&amp;amp;redlink=1&quot;&gt; &lt;code&gt;Permutable&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="342af6450feec28dd724459a1b4f98a0dbbfa0f4" translate="yes" xml:space="preserve">
          <source>Concept &lt;a href=&quot;https://en.cppreference.com/mwiki/index.php?title=cpp/iterator/RandomAccessIterator&amp;amp;action=edit&amp;amp;redlink=1&quot;&gt;&lt;code&gt;RandomAccessIterator&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">개념 &lt;a href=&quot;https://en.cppreference.com/mwiki/index.php?title=cpp/iterator/RandomAccessIterator&amp;amp;action=edit&amp;amp;redlink=1&quot;&gt; &lt;code&gt;RandomAccessIterator&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b333bb2319a02401df46cdcfd9451d7eac2f160f" translate="yes" xml:space="preserve">
          <source>Concept &lt;a href=&quot;https://en.cppreference.com/mwiki/index.php?title=cpp/iterator/Readable&amp;amp;action=edit&amp;amp;redlink=1&quot;&gt;&lt;code&gt;Readable&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://en.cppreference.com/mwiki/index.php?title=cpp/iterator/Readable&amp;amp;action=edit&amp;amp;redlink=1&quot;&gt; &lt;code&gt;Readable&lt;/code&gt; &lt;/a&gt; 개념</target>
        </trans-unit>
        <trans-unit id="e6b3d7a4846064b11e2517c8fd259b43a8344f6a" translate="yes" xml:space="preserve">
          <source>Concept &lt;a href=&quot;https://en.cppreference.com/mwiki/index.php?title=cpp/iterator/Sentinel&amp;amp;action=edit&amp;amp;redlink=1&quot;&gt;&lt;code&gt;Sentinel&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">컨셉 &lt;a href=&quot;https://en.cppreference.com/mwiki/index.php?title=cpp/iterator/Sentinel&amp;amp;action=edit&amp;amp;redlink=1&quot;&gt; &lt;code&gt;Sentinel&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e772ddcb43f6161459a7ad6148f78f1d19415fb3" translate="yes" xml:space="preserve">
          <source>Concept &lt;a href=&quot;https://en.cppreference.com/mwiki/index.php?title=cpp/iterator/SizedSentinel&amp;amp;action=edit&amp;amp;redlink=1&quot;&gt;&lt;code&gt;SizedSentinel&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">개념 &lt;a href=&quot;https://en.cppreference.com/mwiki/index.php?title=cpp/iterator/SizedSentinel&amp;amp;action=edit&amp;amp;redlink=1&quot;&gt; &lt;code&gt;SizedSentinel&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1a22a0ae0e012dedb089e5669e658eb5c8af7812" translate="yes" xml:space="preserve">
          <source>Concept &lt;a href=&quot;https://en.cppreference.com/mwiki/index.php?title=cpp/iterator/Sortable&amp;amp;action=edit&amp;amp;redlink=1&quot;&gt;&lt;code&gt;Sortable&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">컨셉 &lt;a href=&quot;https://en.cppreference.com/mwiki/index.php?title=cpp/iterator/Sortable&amp;amp;action=edit&amp;amp;redlink=1&quot;&gt; &lt;code&gt;Sortable&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b00cc0375c2d42819778d0ae00f45d76ea6b0fad" translate="yes" xml:space="preserve">
          <source>Concept &lt;a href=&quot;https://en.cppreference.com/mwiki/index.php?title=cpp/iterator/WeaklyIncrementable&amp;amp;action=edit&amp;amp;redlink=1&quot;&gt;&lt;code&gt;WeaklyIncrementable&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://en.cppreference.com/mwiki/index.php?title=cpp/iterator/WeaklyIncrementable&amp;amp;action=edit&amp;amp;redlink=1&quot;&gt; &lt;code&gt;WeaklyIncrementable&lt;/code&gt; &lt;/a&gt; 개념</target>
        </trans-unit>
        <trans-unit id="e63a7e5c78c0acc48f71108fd8e3415feec99608" translate="yes" xml:space="preserve">
          <source>Concept &lt;a href=&quot;https://en.cppreference.com/mwiki/index.php?title=cpp/iterator/Writable&amp;amp;action=edit&amp;amp;redlink=1&quot;&gt;&lt;code&gt;Writable&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://en.cppreference.com/mwiki/index.php?title=cpp/iterator/Writable&amp;amp;action=edit&amp;amp;redlink=1&quot;&gt; &lt;code&gt;Writable&lt;/code&gt; &lt;/a&gt; 개념</target>
        </trans-unit>
        <trans-unit id="d9cabcc12b7ed7ccac0ba77362ff3b71fbeed154" translate="yes" xml:space="preserve">
          <source>Concept requirements</source>
          <target state="translated">개념 요구 사항</target>
        </trans-unit>
        <trans-unit id="6f58d263f33944384921df8405fd4a36e06175e2" translate="yes" xml:space="preserve">
          <source>Concepts</source>
          <target state="translated">Concepts</target>
        </trans-unit>
        <trans-unit id="3f7dfff291db385c163161e9b96261c0e8c13b00" translate="yes" xml:space="preserve">
          <source>Concepts cannot recursively refer to themselves and cannot be constrained:</source>
          <target state="translated">개념은 재귀 적으로 자신을 참조 할 수 없으며 제한 될 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="253c082c116ec75740579db5fa50c9d394d88f45" translate="yes" xml:space="preserve">
          <source>Concepts library</source>
          <target state="translated">개념 라이브러리</target>
        </trans-unit>
        <trans-unit id="51b01adc84449a8502834e62fa609b7a9b9cfc3d" translate="yes" xml:space="preserve">
          <source>Concepts library (C++20)</source>
          <target state="translated">개념 라이브러리 (C ++ 20)</target>
        </trans-unit>
        <trans-unit id="2ec390bfae82ff5b921e55c4ae832ef41eb12f05" translate="yes" xml:space="preserve">
          <source>Concurrency</source>
          <target state="translated">Concurrency</target>
        </trans-unit>
        <trans-unit id="71ca12e3baeef9207c7fba1ab01c0aa2e1e9058d" translate="yes" xml:space="preserve">
          <source>Concurrency TS</source>
          <target state="translated">동시성 TS</target>
        </trans-unit>
        <trans-unit id="6b78f6d8ec33ad07e65ebe59fc09cd97eb28932d" translate="yes" xml:space="preserve">
          <source>Concurrent forward progress</source>
          <target state="translated">동시 진행</target>
        </trans-unit>
        <trans-unit id="2f4979324e03e4571b1d7eba701226670c2ee2da" translate="yes" xml:space="preserve">
          <source>Condition</source>
          <target state="translated">Condition</target>
        </trans-unit>
        <trans-unit id="550cdd8df845219673f1e6408479f6a7ebc62b61" translate="yes" xml:space="preserve">
          <source>Condition evaluation</source>
          <target state="translated">상태 평가</target>
        </trans-unit>
        <trans-unit id="c9310d3b540cdb7701ecb54cf6be827f8499b99f" translate="yes" xml:space="preserve">
          <source>Condition variables</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aee7dadb91de5e3f0952b2b397535700f294149c" translate="yes" xml:space="preserve">
          <source>Condition variables permit concurrent invocation of the &lt;code&gt;&lt;a href=&quot;condition_variable/wait&quot;&gt;wait&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;condition_variable/wait_for&quot;&gt;wait_for&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;condition_variable/wait_until&quot;&gt;wait_until&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;condition_variable/notify_one&quot;&gt;notify_one&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;condition_variable/notify_all&quot;&gt;notify_all&lt;/a&gt;&lt;/code&gt; member functions.</source>
          <target state="translated">조건 변수는 &lt;code&gt;&lt;a href=&quot;condition_variable/wait&quot;&gt;wait&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;condition_variable/wait_for&quot;&gt;wait_for&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;condition_variable/wait_until&quot;&gt;wait_until&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;condition_variable/notify_one&quot;&gt;notify_one&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;condition_variable/notify_all&quot;&gt;notify_all&lt;/a&gt;&lt;/code&gt; 멤버 함수의 동시 호출을 허용합니다 .</target>
        </trans-unit>
        <trans-unit id="ae382767cc8004ef63f077e5c30b8fcc609af876" translate="yes" xml:space="preserve">
          <source>Conditional inclusion</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86d8c4f438a64027d9c179cbd6cac7228180ae16" translate="yes" xml:space="preserve">
          <source>Conditional operator</source>
          <target state="translated">조건부 연산자</target>
        </trans-unit>
        <trans-unit id="ab0dc9cb872ae655f7a41588ae2c936b5456b12b" translate="yes" xml:space="preserve">
          <source>Conditionally</source>
          <target state="translated">Conditionally</target>
        </trans-unit>
        <trans-unit id="a5c5b712f5b77396fc4520f5a9049d95172e4471" translate="yes" xml:space="preserve">
          <source>Conditionally compiled macro that compares its argument to zero</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63f9d8546ec074956de9724ea87a2c22c62fe0df" translate="yes" xml:space="preserve">
          <source>Conditionally executes another statement.</source>
          <target state="translated">조건부로 다른 명령문을 실행합니다.</target>
        </trans-unit>
        <trans-unit id="3409cbb3079d8ca320e66ff7e602cf1effe69b5c" translate="yes" xml:space="preserve">
          <source>Conditionally-explicit constructors make it possible to construct a tuple in copy-initialization context using list-initialization syntax:</source>
          <target state="translated">조건부로 명시적인 생성자는 목록 초기화 구문을 사용하여 복사 초기화 컨텍스트에서 튜플을 구성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d5b59279f2bb1b2b6b4cf70f3343a4f21c728239" translate="yes" xml:space="preserve">
          <source>Conjunction is short-circuiting: if there is a template type argument &lt;code&gt;Bi&lt;/code&gt; with &lt;code&gt;bool(Bi::value) == false&lt;/code&gt;, then instantiating &lt;code&gt;conjunction&amp;lt;B1, ..., BN&amp;gt;::value&lt;/code&gt; does not require the instantiation of &lt;code&gt;Bj::value&lt;/code&gt; for &lt;code&gt;j &amp;gt; i&lt;/code&gt;.</source>
          <target state="translated">접속사 단락은 : 템플릿 유형 인수가 있으면 &lt;code&gt;Bi&lt;/code&gt; 으로 &lt;code&gt;bool(Bi::value) == false&lt;/code&gt; 다음 인스턴스화 &lt;code&gt;conjunction&amp;lt;B1, ..., BN&amp;gt;::value&lt;/code&gt; 인스턴스화 요구하지 않는 &lt;code&gt;Bj::value&lt;/code&gt; 에 대한 &lt;code&gt;j &amp;gt; i&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f99174c2da4a558d883a5da789d1ba602f506204" translate="yes" xml:space="preserve">
          <source>Conjunctions</source>
          <target state="translated">Conjunctions</target>
        </trans-unit>
        <trans-unit id="028d9f5b179fb47ffcad2fdc4c38a1782477b7bd" translate="yes" xml:space="preserve">
          <source>Connection aborted</source>
          <target state="translated">연결이 중단되었습니다</target>
        </trans-unit>
        <trans-unit id="d54d6ea5ea8329ba671167ee71114683955ae7da" translate="yes" xml:space="preserve">
          <source>Connection aborted by network</source>
          <target state="translated">네트워크에 의해 연결이 중단되었습니다</target>
        </trans-unit>
        <trans-unit id="d1f571b97484e107745a5dd326259fb9e039653f" translate="yes" xml:space="preserve">
          <source>Connection already in progress</source>
          <target state="translated">연결이 이미 진행 중입니다</target>
        </trans-unit>
        <trans-unit id="96f7e671b1e48da4a2700769f8225126847b97cf" translate="yes" xml:space="preserve">
          <source>Connection refused</source>
          <target state="translated">연결이 거부되었습니다</target>
        </trans-unit>
        <trans-unit id="343f1381fae777b48e3f18f914a8aa06ea148119" translate="yes" xml:space="preserve">
          <source>Connection reset</source>
          <target state="translated">연결 재설정</target>
        </trans-unit>
        <trans-unit id="52c871ea22dada6554a1363ee61f9567c44efd80" translate="yes" xml:space="preserve">
          <source>Connection timed out</source>
          <target state="translated">연결 시간이 초과되었습니다</target>
        </trans-unit>
        <trans-unit id="5f4698d7eb7560c03319b04ad7878a68eb3ebe27" translate="yes" xml:space="preserve">
          <source>Consider first some scenarios where the argument-dependent lookup is not employed. For that, we use the call &lt;code&gt;(f)(t)&lt;/code&gt;. As described in &lt;a href=&quot;adl&quot;&gt;ADL&lt;/a&gt;, wrapping the function name in parentheses is suppressing the argument-dependent lookup.</source>
          <target state="translated">인수 종속 조회가 사용되지 않는 일부 시나리오를 먼저 고려하십시오. 이를 위해 &lt;code&gt;(f)(t)&lt;/code&gt; 호출을 사용합니다 . &lt;a href=&quot;adl&quot;&gt;ADL에&lt;/a&gt; 설명 된대로 함수 이름을 괄호로 묶으면 인수 종속 조회가 억제됩니다.</target>
        </trans-unit>
        <trans-unit id="555e5ce4634ad68c38a33653d2f1d60131cb9f5d" translate="yes" xml:space="preserve">
          <source>Consistent with the behavior of unions during &lt;a href=&quot;../language/aggregate_initialization&quot;&gt;aggregate initialization&lt;/a&gt;, a default-constructed variant holds a value of its first alternative, unless that alternative is not default-constructible (in which case the variant is not default-constructible either). The helper class &lt;a href=&quot;variant/monostate&quot;&gt;&lt;code&gt;std::monostate&lt;/code&gt;&lt;/a&gt; can be used to make such variants default-constructible.</source>
          <target state="translated">&lt;a href=&quot;../language/aggregate_initialization&quot;&gt;집계 초기화&lt;/a&gt; 동안 공용체의 동작과 일치하여, 기본 구성 변형은 대체 구성이 기본 구성 가능하지 않은 경우를 제외하고 첫 번째 대안의 값을 보유합니다 (이 경우 변형도 기본 구성 가능하지 않음). 도우미 클래스 &lt;a href=&quot;variant/monostate&quot;&gt; &lt;code&gt;std::monostate&lt;/code&gt; &lt;/a&gt; 를 사용하여 이러한 변형을 기본값으로 구성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6eaa563f581ad8d566012951303a85a406809812" translate="yes" xml:space="preserve">
          <source>Const aggregate types are not DefaultConstructible if any of their members is an object of non-class type.</source>
          <target state="translated">멤버 중 하나가 비 클래스 유형의 개체 인 경우 Const 집계 유형은 DefaultConstructible이 아닙니다.</target>
        </trans-unit>
        <trans-unit id="b44f51423c8d0a2a265cda26da0655a42d20e540" translate="yes" xml:space="preserve">
          <source>Const non-class types are not DefaultConstructible.</source>
          <target state="translated">Const 비 클래스 타입은 DefaultConstructible이 아닙니다.</target>
        </trans-unit>
        <trans-unit id="f4846290ef0b5442f1693412be1a8579b3e78ec3" translate="yes" xml:space="preserve">
          <source>Const reference to the requested character.</source>
          <target state="translated">요청 된 문자에 대한 Const 참조</target>
        </trans-unit>
        <trans-unit id="69dc7b98e1091c3f85a087ddd0f1f03ff195e6a4" translate="yes" xml:space="preserve">
          <source>Const-volatility specifiers</source>
          <target state="translated">불변성 지정자</target>
        </trans-unit>
        <trans-unit id="733fd2b4c4e1bca4c7d0e3c2e1c341bcd1d34269" translate="yes" xml:space="preserve">
          <source>Constant</source>
          <target state="translated">Constant</target>
        </trans-unit>
        <trans-unit id="50493e16b6698ef49ce91cc4ab7df1b8b0eaea6a" translate="yes" xml:space="preserve">
          <source>Constant &lt;a href=&quot;../named_req/bidirectionaliterator&quot;&gt;LegacyBidirectionalIterator&lt;/a&gt;</source>
          <target state="translated">상수 &lt;a href=&quot;../named_req/bidirectionaliterator&quot;&gt;레거시 양방향 반복자&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="4cb717274a013c12c86123998ad7f1fcb5ef5963" translate="yes" xml:space="preserve">
          <source>Constant &lt;a href=&quot;../named_req/forwarditerator&quot;&gt;LegacyForwardIterator&lt;/a&gt;</source>
          <target state="translated">Constant &lt;a href=&quot;../named_req/forwarditerator&quot;&gt;LegacyForwardIterator&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c86beae2a8d20751ceb1422f579148da3c2e9c4e" translate="yes" xml:space="preserve">
          <source>Constant &lt;a href=&quot;../named_req/randomaccessiterator&quot;&gt;LegacyRandomAccessIterator&lt;/a&gt;</source>
          <target state="translated">지속적인 &lt;a href=&quot;../named_req/randomaccessiterator&quot;&gt;레거시 RandomAccessIterator&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="80fa08b604ab44ae468f581f2a57636c3ddb7011" translate="yes" xml:space="preserve">
          <source>Constant &lt;a href=&quot;../named_req/randomaccessiterator&quot;&gt;LegacyRandomAccessIterator&lt;/a&gt; and &lt;a href=&quot;../named_req/constexpriterator&quot;&gt;ConstexprIterator&lt;/a&gt;(since C++20)that is a &lt;a href=&quot;../named_req/literaltype&quot;&gt;LiteralType&lt;/a&gt;(since C++17)</source>
          <target state="translated">정수 &lt;a href=&quot;../named_req/randomaccessiterator&quot;&gt;LegacyRandomAccessIterator&lt;/a&gt; 및 &lt;a href=&quot;../named_req/constexpriterator&quot;&gt;ConstexprIterator&lt;/a&gt; (보낸 C ++ 20)는하다 &lt;a href=&quot;../named_req/literaltype&quot;&gt;LiteralType&lt;/a&gt; (C ++ 17 이상)</target>
        </trans-unit>
        <trans-unit id="837a48fad9876251a5ddc2b3fc6c95c3c1d7c53e" translate="yes" xml:space="preserve">
          <source>Constant evaluation context</source>
          <target state="translated">지속적인 평가 맥락</target>
        </trans-unit>
        <trans-unit id="3eac4f53952a8eb124ffb6af01d995dce06379d8" translate="yes" xml:space="preserve">
          <source>Constant evaluation context (since C++20)</source>
          <target state="translated">지속적인 평가 맥락 (C ++ 20부터)</target>
        </trans-unit>
        <trans-unit id="cc6eb2aa57c903962cf7779370c1c47fe005fcf2" translate="yes" xml:space="preserve">
          <source>Constant expression</source>
          <target state="translated">상수 표현</target>
        </trans-unit>
        <trans-unit id="01f3d0f48081336b622122d8a98fa589e08cae6c" translate="yes" xml:space="preserve">
          <source>Constant expressions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c7c710e9ddecf66086431d62a7686df12743db7" translate="yes" xml:space="preserve">
          <source>Constant initialization is performed after(until C++14)instead of(since C++14) zero initialization of the static and thread-local objects and before all other initialization. Only the following variables are constant initialized:</source>
          <target state="translated">정적 및 스레드 로컬 객체의 0 초기화 대신 (C ++ 14 이후) 및 다른 모든 초기화 전에 (C ++ 14까지) 상수 초기화가 수행됩니다. 다음 변수 만 일정하게 초기화됩니다.</target>
        </trans-unit>
        <trans-unit id="9f8e9f310f7e58163b053f01ea8ae5f989bdd719" translate="yes" xml:space="preserve">
          <source>Constant on average, worst case linear in the size of the container.</source>
          <target state="translated">컨테이너 크기에서 평균적으로 일정하며 최악의 경우 선형입니다.</target>
        </trans-unit>
        <trans-unit id="47ee689dc42768fde9f9e9961a9f14e9f20e6424" translate="yes" xml:space="preserve">
          <source>Constant or linear.</source>
          <target state="translated">일정하거나 선형입니다.</target>
        </trans-unit>
        <trans-unit id="8b5719a587925275ed86adbbaca947d7842221de" translate="yes" xml:space="preserve">
          <source>Constant static members</source>
          <target state="translated">상수 정적 멤버</target>
        </trans-unit>
        <trans-unit id="6b82f70e7fad08774b8b97e7e09092df320fc4f5" translate="yes" xml:space="preserve">
          <source>Constant time.</source>
          <target state="translated">일정한 시간.</target>
        </trans-unit>
        <trans-unit id="a3596155d0c65dd61eb6b41aeee5efa20be64821" translate="yes" xml:space="preserve">
          <source>Constant-evaluated context detection (&lt;a href=&quot;types/is_constant_evaluated&quot;&gt;&lt;code&gt;std::is_constant_evaluated()&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">상수 평가 컨텍스트 감지 ( &lt;a href=&quot;types/is_constant_evaluated&quot;&gt; &lt;code&gt;std::is_constant_evaluated()&lt;/code&gt; &lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="69328f1434c8efc5962dd6a28c256d3b924c9458" translate="yes" xml:space="preserve">
          <source>Constant.</source>
          <target state="translated">Constant.</target>
        </trans-unit>
        <trans-unit id="7812739c2b594544a4a068363268feb57e5555e0" translate="yes" xml:space="preserve">
          <source>Constant&lt;sup id=&quot;cite_ref-1&quot;&gt;&lt;a href=&quot;container#cite_note-1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt; if &lt;code&gt;a.size()&amp;nbsp;!= b.size()&lt;/code&gt;, linear otherwise</source>
          <target state="translated">&lt;code&gt;a.size()&amp;nbsp;!= b.size()&lt;/code&gt; 이면 상수 &lt;sup id=&quot;cite_ref-1&quot;&gt;&lt;a href=&quot;container#cite_note-1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt; , 그렇지 않으면 선형</target>
        </trans-unit>
        <trans-unit id="1a1d107faacc8733febb16683ed0c3accf8ef0c5" translate="yes" xml:space="preserve">
          <source>Constant&lt;sup id=&quot;cite_ref-array_2-0&quot;&gt;&lt;a href=&quot;container#cite_note-array-2&quot;&gt;[2]&lt;/a&gt;&lt;/sup&gt;&lt;sup id=&quot;cite_ref-should_3-0&quot;&gt;&lt;a href=&quot;container#cite_note-should-3&quot;&gt;[3]&lt;/a&gt;&lt;/sup&gt;</source>
          <target state="translated">Constant&lt;sup id=&quot;cite_ref-array_2-0&quot;&gt;&lt;a href=&quot;container#cite_note-array-2&quot;&gt;[2]&lt;/a&gt;&lt;/sup&gt;&lt;sup id=&quot;cite_ref-should_3-0&quot;&gt;&lt;a href=&quot;container#cite_note-should-3&quot;&gt;[3]&lt;/a&gt;&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="a89232cf16de5466d177ae009e550e855dc21ec6" translate="yes" xml:space="preserve">
          <source>Constant&lt;sup id=&quot;cite_ref-array_2-1&quot;&gt;&lt;a href=&quot;container#cite_note-array-2&quot;&gt;[2]&lt;/a&gt;&lt;/sup&gt;</source>
          <target state="translated">Constant&lt;sup id=&quot;cite_ref-array_2-1&quot;&gt;&lt;a href=&quot;container#cite_note-array-2&quot;&gt;[2]&lt;/a&gt;&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="64d5f8bf31d6e6ecc72fc88f0d6ecd9676833534" translate="yes" xml:space="preserve">
          <source>Constant&lt;sup id=&quot;cite_ref-should_3-1&quot;&gt;&lt;a href=&quot;container#cite_note-should-3&quot;&gt;[3]&lt;/a&gt;&lt;/sup&gt;</source>
          <target state="translated">Constant&lt;sup id=&quot;cite_ref-should_3-1&quot;&gt;&lt;a href=&quot;container#cite_note-should-3&quot;&gt;[3]&lt;/a&gt;&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="5f83347177c01f4fba24e649c30baee3acfe8e4c" translate="yes" xml:space="preserve">
          <source>Constant&lt;sup id=&quot;cite_ref-should_3-2&quot;&gt;&lt;a href=&quot;container#cite_note-should-3&quot;&gt;[3]&lt;/a&gt;&lt;/sup&gt;</source>
          <target state="translated">Constant&lt;sup id=&quot;cite_ref-should_3-2&quot;&gt;&lt;a href=&quot;container#cite_note-should-3&quot;&gt;[3]&lt;/a&gt;&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="0f386d7e7881b32fa39cb7b62bdb15c0f3a4c0e1" translate="yes" xml:space="preserve">
          <source>Constants</source>
          <target state="translated">Constants</target>
        </trans-unit>
        <trans-unit id="81a468b1743c5032b68b7a887518383ba0d76df2" translate="yes" xml:space="preserve">
          <source>Constexpr If</source>
          <target state="translated">Constexpr If</target>
        </trans-unit>
        <trans-unit id="c7a7ecd1300fe3d783fa4cf271b780a4a3e6d766" translate="yes" xml:space="preserve">
          <source>Constexpr constructors are permitted for classes that aren't literal types. For example, the default constructor of &lt;code&gt;&lt;a href=&quot;../memory/unique_ptr&quot;&gt;std::unique_ptr&lt;/a&gt;&lt;/code&gt; is constexpr, allowing &lt;a href=&quot;constant_initialization&quot;&gt;constant initialization&lt;/a&gt;.</source>
          <target state="translated">리터럴 유형이 아닌 클래스에는 Constexpr 생성자가 허용됩니다. 예를 들어 &lt;code&gt;&lt;a href=&quot;../memory/unique_ptr&quot;&gt;std::unique_ptr&lt;/a&gt;&lt;/code&gt; 의 기본 생성자 는 constexpr이며 &lt;a href=&quot;constant_initialization&quot;&gt;상수 초기화가 가능&lt;/a&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="5064b9f473da0b81f2dd92ea59fa2fa8bb11872a" translate="yes" xml:space="preserve">
          <source>Constexpr for &lt;code&gt;&lt;a href=&quot;algorithm/swap&quot;&gt;swap&lt;/a&gt;&lt;/code&gt; and swap related functions</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;algorithm/swap&quot;&gt;swap&lt;/a&gt;&lt;/code&gt; 및 스왑 관련 기능을 위한 Constexpr</target>
        </trans-unit>
        <trans-unit id="ce8a386a7c8c49e5f165a69f2062423d3edfff9c" translate="yes" xml:space="preserve">
          <source>Constexpr for miscellaneous facilities</source>
          <target state="translated">기타 시설을위한 Constexpr</target>
        </trans-unit>
        <trans-unit id="36e6c8e4283077ffdea4e545940786a188b8398b" translate="yes" xml:space="preserve">
          <source>Constexpr lambda</source>
          <target state="translated">Constexpr Lambda</target>
        </trans-unit>
        <trans-unit id="1ea35d3b98f4dac7bf71d922659a43e0df7c33c7" translate="yes" xml:space="preserve">
          <source>ConstexprIterator</source>
          <target state="translated">ConstexprIterator</target>
        </trans-unit>
        <trans-unit id="6a503830e2c03aa2231830484f5c933f4576c56c" translate="yes" xml:space="preserve">
          <source>Constness</source>
          <target state="translated">Constness</target>
        </trans-unit>
        <trans-unit id="45450f5dadec768f807d35aa84d5a1ab85c1274f" translate="yes" xml:space="preserve">
          <source>Constrained algorithms</source>
          <target state="translated">제한된 알고리즘</target>
        </trans-unit>
        <trans-unit id="449d0d4424c578d80d7c46bd527efa6696f2cd27" translate="yes" xml:space="preserve">
          <source>Constrained algorithms (since C++20)</source>
          <target state="translated">제한된 알고리즘 (C ++ 20부터)</target>
        </trans-unit>
        <trans-unit id="c2258e0d7de713473e46525fb24aa0fa88bac08b" translate="yes" xml:space="preserve">
          <source>Constrained comparison function objects (C++20)</source>
          <target state="translated">제한된 비교 함수 객체 (C ++ 20)</target>
        </trans-unit>
        <trans-unit id="c151a25fcdbae54f38205a9f5bfae85441c2f57d" translate="yes" xml:space="preserve">
          <source>Constrained uninitialized memory algorithms</source>
          <target state="translated">제한된 초기화되지 않은 메모리 알고리즘</target>
        </trans-unit>
        <trans-unit id="3da4f94a358bcd7fa7d57717aa3681f82b446b70" translate="yes" xml:space="preserve">
          <source>Constrained uninitialized memory algorithms (C++20)</source>
          <target state="translated">제약이없는 초기화되지 않은 메모리 알고리즘 (C ++ 20)</target>
        </trans-unit>
        <trans-unit id="cbf7e60f944df26d7caa999f5080f9868586c98f" translate="yes" xml:space="preserve">
          <source>Constraint normalization</source>
          <target state="translated">구속 조건 정규화</target>
        </trans-unit>
        <trans-unit id="52e68a873a2be3470675b9ee933b98d781ae7fef" translate="yes" xml:space="preserve">
          <source>Constraints</source>
          <target state="translated">Constraints</target>
        </trans-unit>
        <trans-unit id="1eac45288f4c46854e7b6ee20783bc10233caa2c" translate="yes" xml:space="preserve">
          <source>Constraints and concepts</source>
          <target state="translated">제약과 개념</target>
        </trans-unit>
        <trans-unit id="5cb028463dc4787241c3e75eb6b4d31d18e870b6" translate="yes" xml:space="preserve">
          <source>Constraints and concepts (since C++20)</source>
          <target state="translated">제약과 개념 (C ++ 20부터)</target>
        </trans-unit>
        <trans-unit id="2c567a2233afe06a28919df8bfcfd4f6b872dbc5" translate="yes" xml:space="preserve">
          <source>Construct an empty container using a &lt;code&gt;Compare()&lt;/code&gt; as &lt;code&gt;key_comp&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;key_comp&lt;/code&gt; 로 &lt;code&gt;Compare()&lt;/code&gt; 를 사용하여 빈 컨테이너를 만듭니다.</target>
        </trans-unit>
        <trans-unit id="e97d727f6aa21ebc012c20791f32565ab9ee03b5" translate="yes" xml:space="preserve">
          <source>Construct an empty container using a copy of &lt;code&gt;c&lt;/code&gt; as &lt;code&gt;key_comp&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;c&lt;/code&gt; 의 사본을 &lt;code&gt;key_comp&lt;/code&gt; 로 사용하여 빈 컨테이너를 만듭니다.</target>
        </trans-unit>
        <trans-unit id="a1f97c2a45af55e08b03dc5abb13f30560bd5496" translate="yes" xml:space="preserve">
          <source>Construct an object of type &lt;code&gt;T&lt;/code&gt;, using the elements of the tuple &lt;code&gt;t&lt;/code&gt; as the arguments to the constructor.</source>
          <target state="translated">튜플 &lt;code&gt;t&lt;/code&gt; 의 요소를 생성자에 대한 인수로 사용하여 &lt;code&gt;T&lt;/code&gt; 유형의 객체를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="15fe92595cb82280faf33e7ec4af7096b098f7ab" translate="yes" xml:space="preserve">
          <source>Construct an object with a tuple of arguments</source>
          <target state="translated">튜플 인수로 객체 생성</target>
        </trans-unit>
        <trans-unit id="9757c67e352fb58ac083c67ee63d3f4adb217b24" translate="yes" xml:space="preserve">
          <source>Constructible</source>
          <target state="translated">Constructible</target>
        </trans-unit>
        <trans-unit id="da33e1b7e0c4eae1911ee4a15280f0990e1a6115" translate="yes" xml:space="preserve">
          <source>Construction</source>
          <target state="translated">Construction</target>
        </trans-unit>
        <trans-unit id="0f15dec5f2139ca4e27bfead589fcb22f9dc95f4" translate="yes" xml:space="preserve">
          <source>Construction and Seeding</source>
          <target state="translated">건축 및 파종</target>
        </trans-unit>
        <trans-unit id="c39fdf0726ffa2155e6d9c714e6b5bed22881416" translate="yes" xml:space="preserve">
          <source>Construction of one-off &lt;code&gt;basic_istringstream&lt;/code&gt; objects in a tight loop, such as when used for string conversion, may be significantly more costly than calling &lt;code&gt;&lt;a href=&quot;str&quot;&gt;str&lt;/a&gt;&lt;/code&gt; to reuse the same object.</source>
          <target state="translated">문자열 변환에 사용될 때와 같이 타이트한 루프에서 일회용 &lt;code&gt;basic_istringstream&lt;/code&gt; 객체를 구성하는 것은 동일한 객체를 재사용하기 위해 &lt;code&gt;&lt;a href=&quot;str&quot;&gt;str&lt;/a&gt;&lt;/code&gt; 을 호출하는 것보다 훨씬 더 많은 비용이들 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a5559b410f47bede98c6449034d5bdca77a42db1" translate="yes" xml:space="preserve">
          <source>Construction of one-off &lt;code&gt;basic_ostringstream&lt;/code&gt; objects in a tight loop, such as when used for string conversion, may be significantly more costly than calling &lt;code&gt;&lt;a href=&quot;str&quot;&gt;str&lt;/a&gt;&lt;/code&gt; to reuse the same object.</source>
          <target state="translated">문자열 변환에 사용될 때와 같이 빡빡한 루프에서 일회용 &lt;code&gt;basic_ostringstream&lt;/code&gt; 객체를 구성하는 것은 같은 객체를 재사용하기 위해 &lt;code&gt;&lt;a href=&quot;str&quot;&gt;str&lt;/a&gt;&lt;/code&gt; 을 호출하는 것보다 훨씬 더 많은 비용이들 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="5614451460e8fe8b609995e0376e63b5f2103d7f" translate="yes" xml:space="preserve">
          <source>Construction of one-off &lt;code&gt;basic_stringstream&lt;/code&gt; objects in a tight loop, such as when used for string conversion, may be significantly more costly than calling &lt;code&gt;&lt;a href=&quot;str&quot;&gt;str&lt;/a&gt;&lt;/code&gt; to reuse the same object.</source>
          <target state="translated">문자열 변환에 사용될 때와 같이 빡빡한 루프에서 일회용 &lt;code&gt;basic_stringstream&lt;/code&gt; 객체를 구성하는 것은 같은 객체를 재사용하기 위해 &lt;code&gt;&lt;a href=&quot;str&quot;&gt;str&lt;/a&gt;&lt;/code&gt; 을 호출하는 것보다 훨씬 더 많은 비용이들 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="3074a68b79e100bff8cec20859cda5a7ed1410f5" translate="yes" xml:space="preserve">
          <source>Constructor is a special non-static &lt;a href=&quot;member_functions&quot;&gt;member function&lt;/a&gt; of a class that is used to initialize objects of its class type.</source>
          <target state="translated">생성자는 클래스 유형의 객체를 초기화하는 데 사용되는 클래스 의 특수한 비 정적 &lt;a href=&quot;member_functions&quot;&gt;멤버 함수&lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="60a5c966a71a24034f9238685790a526710ef75d" translate="yes" xml:space="preserve">
          <source>Constructors</source>
          <target state="translated">Constructors</target>
        </trans-unit>
        <trans-unit id="27507f0e643e29fca4e64cf5baabceb9ffb754b0" translate="yes" xml:space="preserve">
          <source>Constructors (3-4) define implicit conversions from &lt;code&gt;std::chrono::year_month_day_last&lt;/code&gt; and &lt;code&gt;std::chrono::sys_days&lt;/code&gt;, respectively.</source>
          <target state="translated">생성자 (3-4)는 각각 &lt;code&gt;std::chrono::year_month_day_last&lt;/code&gt; 및 &lt;code&gt;std::chrono::sys_days&lt;/code&gt; 에서 암시 적 변환을 정의 합니다.</target>
        </trans-unit>
        <trans-unit id="aaf3692ea05dd1400f54fe1af7ac9f77f76f2507" translate="yes" xml:space="preserve">
          <source>Constructors and member initializer lists</source>
          <target state="translated">생성자와 멤버 이니셜 라이저 목록</target>
        </trans-unit>
        <trans-unit id="22435a66e95b028e5404d4266c063072b581c466" translate="yes" xml:space="preserve">
          <source>Constructors are declared using member &lt;a href=&quot;function&quot;&gt;function declarators&lt;/a&gt; of the following form:</source>
          <target state="translated">생성자는 다음 형식의 멤버 &lt;a href=&quot;function&quot;&gt;함수 선언자&lt;/a&gt; 를 사용하여 선언 됩니다.</target>
        </trans-unit>
        <trans-unit id="e0dbe636d412694a09c856287e1fe5674342c9a8" translate="yes" xml:space="preserve">
          <source>Constructors do not have names, but the injected-class-name of the enclosing class is considered to name a constructor in constructor declarations and definitions.</source>
          <target state="translated">생성자에는 이름이 없지만 엔 클로징 클래스의 주입 된 클래스 이름은 생성자 선언 및 정의에서 생성자를 명명하는 것으로 간주됩니다.</target>
        </trans-unit>
        <trans-unit id="44755dec081fa06b610d824af4d36e5f1470cfaa" translate="yes" xml:space="preserve">
          <source>Constructors have no names and cannot be called directly. They are invoked when &lt;a href=&quot;initialization&quot;&gt;initialization&lt;/a&gt; takes place, and they are selected according to the rules of initialization. The constructors without &lt;code&gt;explicit&lt;/code&gt; specifier are &lt;a href=&quot;converting_constructor&quot;&gt;converting constructors&lt;/a&gt;. The constructors with a &lt;code&gt;constexpr&lt;/code&gt; specifier make their type a &lt;a href=&quot;../named_req/literaltype&quot;&gt;LiteralType&lt;/a&gt;. Constructors that may be called without any argument are &lt;a href=&quot;default_constructor&quot;&gt;default constructors&lt;/a&gt;. Constructors that take another object of the same type as the argument are &lt;a href=&quot;copy_constructor&quot;&gt;copy constructors&lt;/a&gt; and &lt;a href=&quot;move_constructor&quot;&gt;move constructors&lt;/a&gt;.</source>
          <target state="translated">생성자는 이름이 없으며 직접 호출 할 수 없습니다. &lt;a href=&quot;initialization&quot;&gt;초기화&lt;/a&gt; 가 발생할 때 호출 되며 초기화 규칙에 따라 선택됩니다. &lt;code&gt;explicit&lt;/code&gt; 지정자가 없는 생성자는 생성자를 &lt;a href=&quot;converting_constructor&quot;&gt;변환&lt;/a&gt; 합니다. &lt;code&gt;constexpr&lt;/code&gt; 지정자를 가진 생성자 는 해당 유형을 &lt;a href=&quot;../named_req/literaltype&quot;&gt;LiteralType으로 만듭니다&lt;/a&gt; . 인수없이 호출 할 수있는 &lt;a href=&quot;default_constructor&quot;&gt;생성자&lt;/a&gt; 는 기본 생성자 입니다. 인수와 동일한 유형의 다른 객체를 취하는 &lt;a href=&quot;copy_constructor&quot;&gt;생성자&lt;/a&gt; 는 복사 생성자 와 &lt;a href=&quot;move_constructor&quot;&gt;이동 생성자&lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="62516ff659765eb4aa28a5bfd5d7394356c22fb7" translate="yes" xml:space="preserve">
          <source>Constructs &lt;code&gt;a1&lt;/code&gt; such that it equals the prior value of &lt;code&gt;a&lt;/code&gt;. Does not throw exceptions. The value of &lt;code&gt;a&lt;/code&gt; is unchanged and &lt;code&gt;a1 == a&lt;/code&gt;.(since C++20)</source>
          <target state="translated">제물 &lt;code&gt;a1&lt;/code&gt; 는 이전의 값과 동일하도록 &lt;code&gt;a&lt;/code&gt; . 예외를 던지지 않습니다. 값 &lt;code&gt;a&lt;/code&gt; 불변이고 &lt;code&gt;a1 == a&lt;/code&gt; . (20 ++ C 보낸)</target>
        </trans-unit>
        <trans-unit id="85c5c7032087495c0d9589c14e3785537a0c14d2" translate="yes" xml:space="preserve">
          <source>Constructs &lt;code&gt;a&lt;/code&gt; such that &lt;code&gt;B(a)==b&lt;/code&gt; and &lt;code&gt;A(b)==a&lt;/code&gt;. Does not throw exceptions. (Note: this implies that all allocators related by rebind maintain each other's resources, such as memory pools)</source>
          <target state="translated">구축 되도록 &lt;code&gt;B(a)==b&lt;/code&gt; 와 &lt;code&gt;A(b)==a&lt;/code&gt; . 예외를 던지지 않습니다. (참고 : 이것은 리 바인드와 관련된 모든 할당자가 메모리 풀과 같은 서로의 자원을 유지함을 의미합니다) &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="97e21ae1b66dcedfe7c345efc7e699454010c4b3" translate="yes" xml:space="preserve">
          <source>Constructs &lt;code&gt;a&lt;/code&gt; such that it equals the prior value of &lt;code&gt;A(b)&lt;/code&gt;. Does not throw exceptions.</source>
          <target state="translated">구축 그것의 선행 값과 동일하도록 &lt;code&gt;A(b)&lt;/code&gt; . 예외를 던지지 않습니다. &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bbff489c85f98a5a96363bcd39eac131b68f4880" translate="yes" xml:space="preserve">
          <source>Constructs a</source>
          <target state="translated">구성</target>
        </trans-unit>
        <trans-unit id="fbd52ead0e384068170177d091c367708a40fc7d" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;a href=&quot;https://en.wikipedia.org/wiki/Closure_(computer_science)&quot;&gt;closure&lt;/a&gt;: an unnamed function object capable of capturing variables in scope.</source>
          <target state="translated">구축 &lt;a href=&quot;https://en.wikipedia.org/wiki/Closure_(computer_science)&quot;&gt;폐쇄&lt;/a&gt; 범위에서 변수를 캡처 할 수있는 이름 기능 개체 :.</target>
        </trans-unit>
        <trans-unit id="9be34f797a949a36fe8a0d4890bc72754516ee7e" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;&lt;a href=&quot;regex_iterator&quot;&gt;std::regex_iterator&lt;/a&gt;&lt;/code&gt; object &lt;code&gt;i&lt;/code&gt; as if by &lt;code&gt;&lt;a href=&quot;regex_iterator&quot;&gt;std::regex_iterator&lt;/a&gt;&amp;lt;BidirIt, CharT, traits&amp;gt; i(first, last, re, flags)&lt;/code&gt;, and uses it to step through every match of &lt;code&gt;re&lt;/code&gt; within the sequence &lt;code&gt;[first,last)&lt;/code&gt;.</source>
          <target state="translated">구축 &lt;code&gt;&lt;a href=&quot;regex_iterator&quot;&gt;std::regex_iterator&lt;/a&gt;&lt;/code&gt; 개체 &lt;code&gt;i&lt;/code&gt; 의한 것처럼 &lt;code&gt;&lt;a href=&quot;regex_iterator&quot;&gt;std::regex_iterator&lt;/a&gt;&amp;lt;BidirIt, CharT, traits&amp;gt; i(first, last, re, flags)&lt;/code&gt; , 및 모든 매치 단계별로 사용하여 &lt;code&gt;re&lt;/code&gt; 시퀀스 내의 &lt;code&gt;[first,last)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a9ffcb0b168226609fcc4f1d3bb365b17df02711" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;binary_negate&lt;/code&gt; function object with the stored predicate &lt;code&gt;pred&lt;/code&gt;.</source>
          <target state="translated">저장된 술어 &lt;code&gt;pred&lt;/code&gt; 로 &lt;code&gt;binary_negate&lt;/code&gt; 함수 객체를 생성합니다 .</target>
        </trans-unit>
        <trans-unit id="b0f251884937e4f64b7ec49b085cac3353246c1a" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;boyer_moore_horspool_searcher&lt;/code&gt; by storing copies of &lt;code&gt;pat_first&lt;/code&gt;, &lt;code&gt;pat_last&lt;/code&gt;, &lt;code&gt;hf&lt;/code&gt;, and &lt;code&gt;pred&lt;/code&gt;, setting up any necessary internal data structures.</source>
          <target state="translated">구축 &lt;code&gt;boyer_moore_horspool_searcher&lt;/code&gt; 의 사본을 저장함으로써 &lt;code&gt;pat_first&lt;/code&gt; , &lt;code&gt;pat_last&lt;/code&gt; , &lt;code&gt;hf&lt;/code&gt; 및 &lt;code&gt;pred&lt;/code&gt; , 필요한 내부 데이터 구조를 설정한다.</target>
        </trans-unit>
        <trans-unit id="1187383efe400b359f2bacb7cf4d71f3d68b0e20" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;boyer_moore_searcher&lt;/code&gt; by storing copies of &lt;code&gt;pat_first&lt;/code&gt;, &lt;code&gt;pat_last&lt;/code&gt;, &lt;code&gt;hf&lt;/code&gt;, and &lt;code&gt;pred&lt;/code&gt;, setting up any necessary internal data structures.</source>
          <target state="translated">구축 &lt;code&gt;boyer_moore_searcher&lt;/code&gt; 의 사본을 저장함으로써 &lt;code&gt;pat_first&lt;/code&gt; , &lt;code&gt;pat_last&lt;/code&gt; , &lt;code&gt;hf&lt;/code&gt; 및 &lt;code&gt;pred&lt;/code&gt; , 필요한 내부 데이터 구조를 설정한다.</target>
        </trans-unit>
        <trans-unit id="3eb94c804a7ccbdb72b40bb6fbcd358f531d2ea2" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;day&lt;/code&gt; object.</source>
          <target state="translated">구축 &lt;code&gt;day&lt;/code&gt; 개체를.</target>
        </trans-unit>
        <trans-unit id="6a6919edd327ca40709118eaf274986376f1c9da" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;default_searcher&lt;/code&gt; by storing copies of &lt;code&gt;pat_first&lt;/code&gt;, &lt;code&gt;pat_last&lt;/code&gt;, and &lt;code&gt;pred&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;pat_first&lt;/code&gt; , &lt;code&gt;pat_last&lt;/code&gt; 및 &lt;code&gt;pred&lt;/code&gt; 의 사본을 저장 하여 &lt;code&gt;default_searcher&lt;/code&gt; 를 구성합니다 .</target>
        </trans-unit>
        <trans-unit id="3a3e63364adc4bf0e1c516dad173ae9d92dda4c8" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;gslice_array&lt;/code&gt; from another &lt;code&gt;gslice_array&lt;/code&gt;&lt;code&gt;other&lt;/code&gt;.</source>
          <target state="translated">다른 &lt;code&gt;gslice_array&lt;/code&gt; &lt;code&gt;other&lt;/code&gt; 에서 &lt;code&gt;gslice_array&lt;/code&gt; 를 구성합니다 .</target>
        </trans-unit>
        <trans-unit id="753be33fce7cc4452ce11dba1749f47dfad567ab" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;indirect_array&lt;/code&gt; from another &lt;code&gt;indirect_array&lt;/code&gt;&lt;code&gt;other&lt;/code&gt;.</source>
          <target state="translated">다른 &lt;code&gt;indirect_array&lt;/code&gt; &lt;code&gt;other&lt;/code&gt; 로부터 &lt;code&gt;indirect_array&lt;/code&gt; 를 구축합니다 .</target>
        </trans-unit>
        <trans-unit id="845a9f260cb0385fb40a510d9af131e9e0826c3f" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;mask_array&lt;/code&gt; from another &lt;code&gt;mask_array&lt;/code&gt;&lt;code&gt;other&lt;/code&gt;.</source>
          <target state="translated">다른 &lt;code&gt;mask_array&lt;/code&gt; &lt;code&gt;other&lt;/code&gt; 로부터 &lt;code&gt;mask_array&lt;/code&gt; 를 구축합니다 .</target>
        </trans-unit>
        <trans-unit id="7838b542cb7a4e1f93e7926b75a0b88078d13168" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;monotonic_buffer_resource&lt;/code&gt;</source>
          <target state="translated">구축 &lt;code&gt;monotonic_buffer_resource&lt;/code&gt; 을</target>
        </trans-unit>
        <trans-unit id="179d22c76bcf2fd79742675c729fdd043c48e1d6" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;monotonic_buffer_resource&lt;/code&gt;. The constructors not taking a upstream memory resource pointer uses the return value of &lt;code&gt;&lt;a href=&quot;../get_default_resource&quot;&gt;std::pmr::get_default_resource&lt;/a&gt;&lt;/code&gt; as the upstream memory resource.</source>
          <target state="translated">구축 &lt;code&gt;monotonic_buffer_resource&lt;/code&gt; 을 . 업스트림 메모리 리소스 포인터를 사용하지 않는 생성자는 &lt;code&gt;&lt;a href=&quot;../get_default_resource&quot;&gt;std::pmr::get_default_resource&lt;/a&gt;&lt;/code&gt; 의 반환 값을 업스트림 메모리 리소스로 사용합니다.</target>
        </trans-unit>
        <trans-unit id="4c4e22b5719d32fa2b295ce1c8fac97e3a8f0ccc" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;month&lt;/code&gt; object.</source>
          <target state="translated">구축 &lt;code&gt;month&lt;/code&gt; 개체를.</target>
        </trans-unit>
        <trans-unit id="d0319e9f2dbe618b52c91d9a020acfd456a38156" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;month_day&lt;/code&gt;.</source>
          <target state="translated">구축 &lt;code&gt;month_day&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0ffcd922380c79335165770d9dad0b57f8f479a4" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;month_day_last&lt;/code&gt; object that represents the last day of the month &lt;code&gt;m&lt;/code&gt;.</source>
          <target state="translated">구축 &lt;code&gt;month_day_last&lt;/code&gt; 의 달의 마지막 날 나타내는 개체 &lt;code&gt;m&lt;/code&gt; 를 .</target>
        </trans-unit>
        <trans-unit id="3f0defe8bfcd9296a0203a2a9a888622ec9eb340" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;month_weekday&lt;/code&gt; object that stores the &lt;a href=&quot;../month&quot;&gt;&lt;code&gt;month&lt;/code&gt;&lt;/a&gt;&lt;code&gt;m&lt;/code&gt; and the &lt;a href=&quot;../weekday_indexed&quot;&gt;&lt;code&gt;weekday_indexed&lt;/code&gt;&lt;/a&gt;&lt;code&gt;wdi&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;../month&quot;&gt; &lt;code&gt;month&lt;/code&gt; &lt;/a&gt; &lt;code&gt;m&lt;/code&gt; 및 &lt;a href=&quot;../weekday_indexed&quot;&gt; &lt;code&gt;weekday_indexed&lt;/code&gt; &lt;/a&gt; &lt;code&gt;wdi&lt;/code&gt; 를 저장 하는 &lt;code&gt;month_weekday&lt;/code&gt; 객체를 구성 합니다.</target>
        </trans-unit>
        <trans-unit id="801058106b23f839b531118b894ee38eb9938a4f" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;month_weekday_last&lt;/code&gt; object that stores the &lt;a href=&quot;../month&quot;&gt;&lt;code&gt;month&lt;/code&gt;&lt;/a&gt;&lt;code&gt;m&lt;/code&gt; and the &lt;a href=&quot;../weekday_last&quot;&gt;&lt;code&gt;weekday_last&lt;/code&gt;&lt;/a&gt;&lt;code&gt;wdl&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;../month&quot;&gt; &lt;code&gt;month&lt;/code&gt; &lt;/a&gt; &lt;code&gt;m&lt;/code&gt; 과 &lt;a href=&quot;../weekday_last&quot;&gt; &lt;code&gt;weekday_last&lt;/code&gt; &lt;/a&gt; &lt;code&gt;wdl&lt;/code&gt; 을 저장 하는 &lt;code&gt;month_weekday_last&lt;/code&gt; 객체를 구성 합니다.</target>
        </trans-unit>
        <trans-unit id="c097354cae92138f69f70076c70f2480783e006c" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;pointer_to_binary_function&lt;/code&gt; function object with the stored function &lt;code&gt;f&lt;/code&gt;.</source>
          <target state="translated">저장된 함수 &lt;code&gt;f&lt;/code&gt; 로 &lt;code&gt;pointer_to_binary_function&lt;/code&gt; 함수 객체를 생성합니다 .</target>
        </trans-unit>
        <trans-unit id="66973baf429c99c6dd6acecd6f276545cb821faf" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;pointer_to_unary_function&lt;/code&gt; function object with the stored function &lt;code&gt;f&lt;/code&gt;.</source>
          <target state="translated">저장된 함수 &lt;code&gt;f&lt;/code&gt; 로 &lt;code&gt;pointer_to_unary_function&lt;/code&gt; 함수 객체를 생성합니다 .</target>
        </trans-unit>
        <trans-unit id="6c1a0086ff6b792602cb50906d619990875a5724" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;polymorphic_allocator&lt;/code&gt;</source>
          <target state="translated">구축 &lt;code&gt;polymorphic_allocator&lt;/code&gt; 을</target>
        </trans-unit>
        <trans-unit id="d1e1acb4aa0cf4fc6a1afc1e81ee02d84826bbc1" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;promise&lt;/code&gt; object.</source>
          <target state="translated">구축 &lt;code&gt;promise&lt;/code&gt; 개체를.</target>
        </trans-unit>
        <trans-unit id="facef874f0ec368ce8caafda3bf7332dfec9242d" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;regex_error&lt;/code&gt; with a given &lt;code&gt;ecode&lt;/code&gt; of type &lt;code&gt;&lt;a href=&quot;../error_type&quot;&gt;std::regex_constants::error_type&lt;/a&gt;&lt;/code&gt; .</source>
          <target state="translated">구축 &lt;code&gt;regex_error&lt;/code&gt; 주어진와 &lt;code&gt;ecode&lt;/code&gt; 유형은 &lt;code&gt;&lt;a href=&quot;../error_type&quot;&gt;std::regex_constants::error_type&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="eb787ed85bc916a9550294706515856dcfb85821" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;shared_lock&lt;/code&gt;, optionally locking the supplied mutex.</source>
          <target state="translated">제공된 뮤텍스를 선택적으로 잠그는 &lt;code&gt;shared_lock&lt;/code&gt; 을 구성합니다 .</target>
        </trans-unit>
        <trans-unit id="79d418a1db6802e2ddd8060f5d1195910fe0cce1" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;slice_array&lt;/code&gt; from another &lt;code&gt;slice_array&lt;/code&gt;&lt;code&gt;other&lt;/code&gt;.</source>
          <target state="translated">다른 &lt;code&gt;slice_array&lt;/code&gt; &lt;code&gt;other&lt;/code&gt; 로부터 &lt;code&gt;slice_array&lt;/code&gt; 를 구축합니다 .</target>
        </trans-unit>
        <trans-unit id="8bc6f06c9a9a5f8e3a3c786787b791a6637fb725" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;span&lt;/code&gt;.</source>
          <target state="translated">구축 &lt;code&gt;span&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0467ba1ec148915d84516af11c7ad152a077a95d" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;std::function&lt;/code&gt; from a variety of sources.</source>
          <target state="translated">구축 &lt;code&gt;std::function&lt;/code&gt; 다양한 소스에서합니다.</target>
        </trans-unit>
        <trans-unit id="1453ff2c8fdb800e9be3e96dd4f40ded4adf2834" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;std::future&lt;/code&gt; object.</source>
          <target state="translated">구축 &lt;code&gt;std::future&lt;/code&gt; 개체를.</target>
        </trans-unit>
        <trans-unit id="ca8e8712c335b84ee1dafb1c65aa82ee6e9e99fb" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;synchronized_pool_resource&lt;/code&gt;</source>
          <target state="translated">구축 &lt;code&gt;synchronized_pool_resource&lt;/code&gt; 을</target>
        </trans-unit>
        <trans-unit id="417619a77df0d04c09a006935d68bc934b183d2b" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;synchronized_pool_resource&lt;/code&gt;.</source>
          <target state="translated">구축 &lt;code&gt;synchronized_pool_resource&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="4c390e15f64c66cc33898dc80d0ca81f95e27de8" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;time_of_day&lt;/code&gt; object.</source>
          <target state="translated">구축 &lt;code&gt;time_of_day&lt;/code&gt; 개체를.</target>
        </trans-unit>
        <trans-unit id="d82fde17ed724aafd7c4fd0ceb556bc128d7adf3" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;unary_negate&lt;/code&gt; function object with the stored predicate &lt;code&gt;pred&lt;/code&gt;.</source>
          <target state="translated">저장된 술어 &lt;code&gt;pred&lt;/code&gt; 로 &lt;code&gt;unary_negate&lt;/code&gt; 함수 객체를 생성합니다 .</target>
        </trans-unit>
        <trans-unit id="b733d95f44397d70b1a9eecc49297f5114a3ad2c" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;unique_lock&lt;/code&gt;, optionally locking the supplied mutex.</source>
          <target state="translated">제공된 뮤텍스를 선택적으로 잠그고 &lt;code&gt;unique_lock&lt;/code&gt; 을 구성합니다 .</target>
        </trans-unit>
        <trans-unit id="4ad7a68eb6fb7bd4dcadd8b56d38b21610be1c4d" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;unsynchronized_pool_resource&lt;/code&gt;</source>
          <target state="translated">비 &lt;code&gt;unsynchronized_pool_resource&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="81f46f1d4128899d593602546979f782e07ac5d2" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;unsynchronized_pool_resource&lt;/code&gt;.</source>
          <target state="translated">구축 &lt;code&gt;unsynchronized_pool_resource&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="b951af1e4735fa6a301d01c6691e308eab3ab405" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;weekday&lt;/code&gt; object.</source>
          <target state="translated">구축 &lt;code&gt;weekday&lt;/code&gt; 개체를.</target>
        </trans-unit>
        <trans-unit id="12ead169cccf7f1b6b45672d687d4407876ea405" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;weekday_indexed&lt;/code&gt;.</source>
          <target state="translated">A가 구축 &lt;code&gt;weekday_indexed&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="aa6b2d5bf3b5d6f370215f9c388119639212e5d4" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;weekday_last&lt;/code&gt; object storing the &lt;code&gt;weekday&lt;/code&gt;&lt;code&gt;wd&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;weekday&lt;/code&gt; &lt;code&gt;wd&lt;/code&gt; 를 저장 하는 &lt;code&gt;weekday_last&lt;/code&gt; 객체를 생성합니다 .</target>
        </trans-unit>
        <trans-unit id="06d33365c9515747b54a6b5051610b1b04ae6a02" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;year&lt;/code&gt; object.</source>
          <target state="translated">구축 &lt;code&gt;year&lt;/code&gt; 오브젝트를.</target>
        </trans-unit>
        <trans-unit id="6381cb34ca9a6ccbc8c48b24ded2afceccecc56c" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;year_month&lt;/code&gt; object.</source>
          <target state="translated">구축 &lt;code&gt;year_month&lt;/code&gt; 의 개체를.</target>
        </trans-unit>
        <trans-unit id="a4a80c47aab9a83348654795c9befff64eb0e262" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;year_month_day&lt;/code&gt; object.</source>
          <target state="translated">구축 &lt;code&gt;year_month_day&lt;/code&gt; 의 개체를.</target>
        </trans-unit>
        <trans-unit id="36e106b380afc3bf276a6de777206ff69ef06070" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;year_month_day_last&lt;/code&gt; object storing the year &lt;code&gt;y&lt;/code&gt; and the month &lt;code&gt;mdl.month()&lt;/code&gt;. The constructed object represents the last day of that year and month.</source>
          <target state="translated">&lt;code&gt;y&lt;/code&gt; 년 과 &lt;code&gt;mdl.month()&lt;/code&gt; 월을 저장 하는 &lt;code&gt;year_month_day_last&lt;/code&gt; 객체를 구축합니다 . 생성 된 객체는 해당 연도와 월의 마지막 날을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="26e1f40730deffdea57d24f63bfd7de8041b14f3" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;year_month_weekday&lt;/code&gt; object.</source>
          <target state="translated">구축 &lt;code&gt;year_month_weekday&lt;/code&gt; 의 개체를.</target>
        </trans-unit>
        <trans-unit id="1b6924bfc90166c655482f9122490867e23c4930" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;year_month_weekday_last&lt;/code&gt; object storing the year &lt;code&gt;y&lt;/code&gt;, the month &lt;code&gt;m&lt;/code&gt;, and the weekday &lt;code&gt;wdl.weekday()&lt;/code&gt;. The constructed object represents the last weekday of that year and month.</source>
          <target state="translated">연도 &lt;code&gt;y&lt;/code&gt; , 월 &lt;code&gt;m&lt;/code&gt; 및 요일 &lt;code&gt;wdl.weekday()&lt;/code&gt; 저장 하는 &lt;code&gt;year_month_weekday_last&lt;/code&gt; 객체를 구성합니다 . 생성 된 객체는 해당 연도와 월의 마지막 요일을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="bca09a073ed3b84ed05d38ef35bc954bf98da6e6" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;zoned_time&lt;/code&gt; object, initializing the stored time zone pointer and time point according to the following table, where &lt;code&gt;traits&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;../zoned_traits&quot;&gt;std::chrono::zoned_traits&lt;/a&gt;&amp;lt;TimeZonePtr&amp;gt;&lt;/code&gt;:</source>
          <target state="translated">구축 &lt;code&gt;zoned_time&lt;/code&gt; 의 객체, 다음 표에 따라 저장된 시간대 포인터와 시점 초기화 &lt;code&gt;traits&lt;/code&gt; 있다 &lt;code&gt;&lt;a href=&quot;../zoned_traits&quot;&gt;std::chrono::zoned_traits&lt;/a&gt;&amp;lt;TimeZonePtr&amp;gt;&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="40f3cc42c10a206a1c269c9036b86d886fd03921" translate="yes" xml:space="preserve">
          <source>Constructs a dereferenceable pointer or pointer-like object (&quot;fancy pointer&quot;) to its argument.</source>
          <target state="translated">인수에 대한 역 참조 가능한 포인터 또는 포인터와 유사한 객체 ( &quot;팬시 포인터&quot;)를 구성합니다.</target>
        </trans-unit>
        <trans-unit id="d34e4558f94f6952f3f447e627ec6f0927262afa" translate="yes" xml:space="preserve">
          <source>Constructs a locale object which is a copy of &lt;code&gt;*this&lt;/code&gt; except for the facet of type &lt;code&gt;Facet&lt;/code&gt;, which is copied from &lt;code&gt;other&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;other&lt;/code&gt; 유형 에서 복사 된 &lt;code&gt;Facet&lt;/code&gt; 유형의 패싯을 제외하고 &lt;code&gt;*this&lt;/code&gt; 의 사본 인 로케일 오브젝트를 구성합니다 .</target>
        </trans-unit>
        <trans-unit id="c1a3bb29bf168ad4549dd74288d3b644620fa329" translate="yes" xml:space="preserve">
          <source>Constructs a new &lt;code&gt;&lt;a href=&quot;../atomic_flag&quot;&gt;std::atomic_flag&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">새로운 &lt;code&gt;&lt;a href=&quot;../atomic_flag&quot;&gt;std::atomic_flag&lt;/a&gt;&lt;/code&gt; 구축합니다 .</target>
        </trans-unit>
        <trans-unit id="4635a3850712a9a96b46749fac304c9578ec961a" translate="yes" xml:space="preserve">
          <source>Constructs a new &lt;code&gt;any&lt;/code&gt; object.</source>
          <target state="translated">새로운 구축 &lt;code&gt;any&lt;/code&gt; 객체를.</target>
        </trans-unit>
        <trans-unit id="d4eef981f95af807118d193f95a776f38a4cdc5c" translate="yes" xml:space="preserve">
          <source>Constructs a new &lt;code&gt;atomic_ref&lt;/code&gt; object.</source>
          <target state="translated">새로운 &lt;code&gt;atomic_ref&lt;/code&gt; 객체를 구축 합니다.</target>
        </trans-unit>
        <trans-unit id="23c4632aa89f5ea699a43402f73f576c070f0f97" translate="yes" xml:space="preserve">
          <source>Constructs a new &lt;code&gt;directory_entry&lt;/code&gt; object.</source>
          <target state="translated">새로운 &lt;code&gt;directory_entry&lt;/code&gt; 객체를 구축 합니다.</target>
        </trans-unit>
        <trans-unit id="7450f61a0cb1d772860b90ee73f02b726bab195f" translate="yes" xml:space="preserve">
          <source>Constructs a new &lt;code&gt;duration&lt;/code&gt; from one of several optional data sources.</source>
          <target state="translated">여러 선택적 데이터 소스 중 하나에서 새 &lt;code&gt;duration&lt;/code&gt; 을 구성합니다.</target>
        </trans-unit>
        <trans-unit id="fda165466152490347bf03c8a89590780eb0ec16" translate="yes" xml:space="preserve">
          <source>Constructs a new &lt;code&gt;enable_shared_from_this&lt;/code&gt; object. The private &lt;code&gt;std::weak_ptr&amp;lt;T&amp;gt;&lt;/code&gt; member is value-initialized.</source>
          <target state="translated">새로운 &lt;code&gt;enable_shared_from_this&lt;/code&gt; 객체를 구축 합니다. 전용 &lt;code&gt;std::weak_ptr&amp;lt;T&amp;gt;&lt;/code&gt; 멤버는 값으로 초기화됩니다.</target>
        </trans-unit>
        <trans-unit id="7528c1e8c5b99e3c52540956541930868e9e9e47" translate="yes" xml:space="preserve">
          <source>Constructs a new &lt;code&gt;file_status&lt;/code&gt; object.</source>
          <target state="translated">새로운 &lt;code&gt;file_status&lt;/code&gt; 객체를 구축 합니다.</target>
        </trans-unit>
        <trans-unit id="54b56de3328bc46395532fa0450d3d401f848dcd" translate="yes" xml:space="preserve">
          <source>Constructs a new &lt;code&gt;optional&lt;/code&gt; object.</source>
          <target state="translated">새로운 &lt;code&gt;optional&lt;/code&gt; 객체를 구성합니다.</target>
        </trans-unit>
        <trans-unit id="b292e6be319ca6d6cc10a5ee46485638c86b2c7a" translate="yes" xml:space="preserve">
          <source>Constructs a new &lt;code&gt;path&lt;/code&gt; object.</source>
          <target state="translated">새로운 &lt;code&gt;path&lt;/code&gt; 객체를 구축 합니다.</target>
        </trans-unit>
        <trans-unit id="76c4ff2bdde6555f19568329e2a01b31f8c6b0ff" translate="yes" xml:space="preserve">
          <source>Constructs a new &lt;code&gt;polymorphic_allocator&lt;/code&gt;.</source>
          <target state="translated">새로운 &lt;code&gt;polymorphic_allocator&lt;/code&gt; 를 구축합니다 .</target>
        </trans-unit>
        <trans-unit id="637521ddb1cc562b0faf37809e71530ae18f1087" translate="yes" xml:space="preserve">
          <source>Constructs a new &lt;code&gt;regex_iterator&lt;/code&gt;:</source>
          <target state="translated">새로운 &lt;code&gt;regex_iterator&lt;/code&gt; 를 생성합니다 :</target>
        </trans-unit>
        <trans-unit id="31200508d29b33f50e6a35e5d47c718ab2a9b3ba" translate="yes" xml:space="preserve">
          <source>Constructs a new &lt;code&gt;regex_token_iterator&lt;/code&gt;:</source>
          <target state="translated">새로운 &lt;code&gt;regex_token_iterator&lt;/code&gt; 를 생성합니다 :</target>
        </trans-unit>
        <trans-unit id="1ce2c593567b37ba5bb4675789ef541951771f28" translate="yes" xml:space="preserve">
          <source>Constructs a new &lt;code&gt;shared_future&lt;/code&gt;.</source>
          <target state="translated">새로운 &lt;code&gt;shared_future&lt;/code&gt; 를 구축합니다 .</target>
        </trans-unit>
        <trans-unit id="fca1e6f2461d953dd6105b6ecc8d2ca50d0405fa" translate="yes" xml:space="preserve">
          <source>Constructs a new &lt;code&gt;std::codecvt_byname&lt;/code&gt; facet for a locale with &lt;code&gt;name&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; 로케일에 대한 새로운 &lt;code&gt;std::codecvt_byname&lt;/code&gt; 패싯을 구성합니다 .</target>
        </trans-unit>
        <trans-unit id="5a8ad950287d30e998b5a695c2f45630703a5907" translate="yes" xml:space="preserve">
          <source>Constructs a new &lt;code&gt;std::codecvt_utf16&lt;/code&gt; facet, passes the initial reference counter &lt;code&gt;refs&lt;/code&gt; to the base class.</source>
          <target state="translated">새로운 구축 &lt;code&gt;std::codecvt_utf16&lt;/code&gt; ,면을 초기 참조 카운터를 통과 &lt;code&gt;refs&lt;/code&gt; 기본 클래스에 있습니다.</target>
        </trans-unit>
        <trans-unit id="3f998aca66eea39e77cae3decd26a614624dc822" translate="yes" xml:space="preserve">
          <source>Constructs a new &lt;code&gt;std::codecvt_utf8&lt;/code&gt; facet, passes the initial reference counter &lt;code&gt;refs&lt;/code&gt; to the base class.</source>
          <target state="translated">새로운 구축 &lt;code&gt;std::codecvt_utf8&lt;/code&gt; ,면을 초기 참조 카운터를 통과 &lt;code&gt;refs&lt;/code&gt; 기본 클래스에 있습니다.</target>
        </trans-unit>
        <trans-unit id="08741c0943dca043d6eff8f0822c1e4852c5df8e" translate="yes" xml:space="preserve">
          <source>Constructs a new &lt;code&gt;std::codecvt_utf8_utf16&lt;/code&gt; facet, passes the initial reference counter &lt;code&gt;refs&lt;/code&gt; to the base class.</source>
          <target state="translated">새로운 구축 &lt;code&gt;std::codecvt_utf8_utf16&lt;/code&gt; ,면을 초기 참조 카운터를 통과 &lt;code&gt;refs&lt;/code&gt; 기본 클래스에 있습니다.</target>
        </trans-unit>
        <trans-unit id="af729c17b4a63231a0beee5c4a728fb78b8928f8" translate="yes" xml:space="preserve">
          <source>Constructs a new &lt;code&gt;std::collate_byname&lt;/code&gt; facet for a locale with &lt;code&gt;name&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; 로케일에 대한 새로운 &lt;code&gt;std::collate_byname&lt;/code&gt; 패싯을 구성합니다 .</target>
        </trans-unit>
        <trans-unit id="06922ee66cd7de7e948e2fc52858585c71c033aa" translate="yes" xml:space="preserve">
          <source>Constructs a new &lt;code&gt;std::ctype_byname&lt;/code&gt; facet for a locale with &lt;code&gt;name&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; 로케일에 대한 새로운 &lt;code&gt;std::ctype_byname&lt;/code&gt; 패싯을 구성합니다 .</target>
        </trans-unit>
        <trans-unit id="4cea12fe4c9201848d603c3af91a2cba1c7bc0cd" translate="yes" xml:space="preserve">
          <source>Constructs a new &lt;code&gt;std::messages_byname&lt;/code&gt; facet for a locale with &lt;code&gt;name&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; 로케일 의 새로운 &lt;code&gt;std::messages_byname&lt;/code&gt; 패싯을 구성합니다 .</target>
        </trans-unit>
        <trans-unit id="7d98a56b19f76adeb4a5b3c39453155ae6524ed3" translate="yes" xml:space="preserve">
          <source>Constructs a new &lt;code&gt;std::moneypunct_byname&lt;/code&gt; facet for a locale with &lt;code&gt;name&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; 로케일에 대한 새로운 &lt;code&gt;std::moneypunct_byname&lt;/code&gt; 패싯을 구성합니다 .</target>
        </trans-unit>
        <trans-unit id="bb30f4d1be54d655c0ea8343d975db25b398b136" translate="yes" xml:space="preserve">
          <source>Constructs a new &lt;code&gt;std::numpunct_byname&lt;/code&gt; facet for a locale with &lt;code&gt;name&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; 로케일에 대한 새로운 &lt;code&gt;std::numpunct_byname&lt;/code&gt; 패싯을 구성합니다 .</target>
        </trans-unit>
        <trans-unit id="8864301e04782428bae2e9b3f17f9c3d9448b693" translate="yes" xml:space="preserve">
          <source>Constructs a new &lt;code&gt;std::packaged_task&lt;/code&gt; object.</source>
          <target state="translated">새로운 &lt;code&gt;std::packaged_task&lt;/code&gt; 객체를 구성합니다.</target>
        </trans-unit>
        <trans-unit id="3e23dc4a5654582649b3c1764e51763032f1904f" translate="yes" xml:space="preserve">
          <source>Constructs a new &lt;code&gt;std::time_get_byname&lt;/code&gt; facet for a locale with &lt;code&gt;name&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; 로케일에 대한 새로운 &lt;code&gt;std::time_get_byname&lt;/code&gt; 패싯을 구성합니다 .</target>
        </trans-unit>
        <trans-unit id="9e1a16f47daed7de02e11b110a34ab7f40510c1e" translate="yes" xml:space="preserve">
          <source>Constructs a new &lt;code&gt;std::time_put_byname&lt;/code&gt; facet for a locale with &lt;code&gt;name&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; 로케일에 대한 새로운 &lt;code&gt;std::time_put_byname&lt;/code&gt; 패싯을 구성합니다 .</target>
        </trans-unit>
        <trans-unit id="ca412fef968b7bbd642c3f564bbd34bfa4a9243e" translate="yes" xml:space="preserve">
          <source>Constructs a new &lt;code&gt;time_point&lt;/code&gt; from one of several optional data sources.</source>
          <target state="translated">여러 선택적 데이터 소스 중 하나에서 새 &lt;code&gt;time_point&lt;/code&gt; 를 구성합니다.</target>
        </trans-unit>
        <trans-unit id="e86e71c431bd556ce98d65816060830d4fdfba5d" translate="yes" xml:space="preserve">
          <source>Constructs a new &lt;code&gt;variant&lt;/code&gt; object.</source>
          <target state="translated">새로운 &lt;code&gt;variant&lt;/code&gt; 객체를 구성합니다.</target>
        </trans-unit>
        <trans-unit id="14a9a0c0d3d87b76cae50a0dd3dabbaea4af80ff" translate="yes" xml:space="preserve">
          <source>Constructs a new bitset from one of several optional data sources:</source>
          <target state="translated">여러 선택적 데이터 소스 중 하나에서 새 비트 세트를 구성합니다.</target>
        </trans-unit>
        <trans-unit id="297b0f540ba92b9bd99eb8ac13cf101c2afdd7cd" translate="yes" xml:space="preserve">
          <source>Constructs a new container from a variety of data sources, optionally using a user supplied allocator &lt;code&gt;alloc&lt;/code&gt;.</source>
          <target state="translated">선택적으로 사용자 제공 할당 자 &lt;code&gt;alloc&lt;/code&gt; 을 사용하여 다양한 데이터 소스에서 새 컨테이너를 구성합니다 .</target>
        </trans-unit>
        <trans-unit id="e1925563a25d31bb214d67daf0eab9b3e40f5acb" translate="yes" xml:space="preserve">
          <source>Constructs a new directory iterator.</source>
          <target state="translated">새로운 디렉토리 반복자를 구축합니다.</target>
        </trans-unit>
        <trans-unit id="81ac0fb29fdb2b84ebe81a8e67f1b01745527d00" translate="yes" xml:space="preserve">
          <source>Constructs a new distribution object.</source>
          <target state="translated">새로운 분포 객체를 구성합니다.</target>
        </trans-unit>
        <trans-unit id="ee7d625f6d2df7eb7c93d2002107a997b6c5d66b" translate="yes" xml:space="preserve">
          <source>Constructs a new distribution object. (2) uses &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; as the distribution parameters, (3) uses &lt;code&gt;params&lt;/code&gt; as the distribution parameters.</source>
          <target state="translated">새로운 분포 객체를 구성합니다. (2) &lt;code&gt;a&lt;/code&gt; 와 &lt;code&gt;b&lt;/code&gt; 를 분포 모수로 사용 하고 (3) &lt;code&gt;params&lt;/code&gt; 를 분포 모수로 사용합니다.</target>
        </trans-unit>
        <trans-unit id="95fe1afdd52d1f4e1e76da5a08781bd012ed2118" translate="yes" xml:space="preserve">
          <source>Constructs a new distribution object. (2) uses &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; as the distribution parameters. (3) uses &lt;code&gt;params&lt;/code&gt; as the distribution parameters.</source>
          <target state="translated">새로운 분포 객체를 구성합니다. (2) &lt;code&gt;a&lt;/code&gt; 와 &lt;code&gt;b&lt;/code&gt; 를 분포 모수로 사용 합니다 . (3) 사용은 &lt;code&gt;params&lt;/code&gt; 분포 매개한다.</target>
        </trans-unit>
        <trans-unit id="824255d291bbf1de85b4fd12800de8a3e4b50ee5" translate="yes" xml:space="preserve">
          <source>Constructs a new distribution object. (2) uses &lt;code&gt;alpha&lt;/code&gt; and &lt;code&gt;beta&lt;/code&gt; as the distribution parameters. (3) uses &lt;code&gt;params&lt;/code&gt; as the distribution parameters.</source>
          <target state="translated">새로운 분포 객체를 구성합니다. (2) 분포 매개 변수로 &lt;code&gt;alpha&lt;/code&gt; 와 &lt;code&gt;beta&lt;/code&gt; 를 사용합니다. (3) 사용은 &lt;code&gt;params&lt;/code&gt; 분포 매개한다.</target>
        </trans-unit>
        <trans-unit id="ed6dd8795946e117cee92c4893b9781844874278" translate="yes" xml:space="preserve">
          <source>Constructs a new distribution object. (2) uses &lt;code&gt;k&lt;/code&gt; and &lt;code&gt;p&lt;/code&gt; as the distribution parameters. (3) uses &lt;code&gt;params&lt;/code&gt; as the distribution parameters.</source>
          <target state="translated">새로운 분포 객체를 구성합니다. (2)는 &lt;code&gt;k&lt;/code&gt; 와 &lt;code&gt;p&lt;/code&gt; 를 분포 모수로 사용합니다. (3) 사용은 &lt;code&gt;params&lt;/code&gt; 분포 매개한다.</target>
        </trans-unit>
        <trans-unit id="19d0485cf1a5753187ea1b2a59adaac5f6bd6386" translate="yes" xml:space="preserve">
          <source>Constructs a new distribution object. (2) uses &lt;code&gt;lambda&lt;/code&gt; as the distribution parameter. (3) uses &lt;code&gt;params&lt;/code&gt; as the distribution parameter.</source>
          <target state="translated">새로운 분포 객체를 구성합니다. (2) 분포 매개 변수로 &lt;code&gt;lambda&lt;/code&gt; 를 사용합니다 . (3) 분포 매개 &lt;code&gt;params&lt;/code&gt; 로 params 를 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="81a0368a1b31da9955a25676f166168a87d1c440" translate="yes" xml:space="preserve">
          <source>Constructs a new distribution object. (2) uses &lt;code&gt;m&lt;/code&gt; and &lt;code&gt;n&lt;/code&gt; as the distribution parameters. (3) uses &lt;code&gt;params&lt;/code&gt; as the distribution parameters.</source>
          <target state="translated">새로운 분포 객체를 구성합니다. (2)는 &lt;code&gt;m&lt;/code&gt; 과 &lt;code&gt;n&lt;/code&gt; 을 분포 모수로 사용합니다. (3) 사용은 &lt;code&gt;params&lt;/code&gt; 분포 매개한다.</target>
        </trans-unit>
        <trans-unit id="f0392319bc00445e9c6c307702fd5436510e4912" translate="yes" xml:space="preserve">
          <source>Constructs a new distribution object. (2) uses &lt;code&gt;m&lt;/code&gt; and &lt;code&gt;s&lt;/code&gt; as the distribution parameters. (3) uses &lt;code&gt;params&lt;/code&gt; as the distribution parameters.</source>
          <target state="translated">새로운 분포 객체를 구성합니다. (2)는 &lt;code&gt;m&lt;/code&gt; 과 &lt;code&gt;s&lt;/code&gt; 를 분포 모수로 사용합니다. (3) 사용은 &lt;code&gt;params&lt;/code&gt; 분포 매개한다.</target>
        </trans-unit>
        <trans-unit id="19639cd1623c15c10d6375da3781087692b3da30" translate="yes" xml:space="preserve">
          <source>Constructs a new distribution object. (2) uses &lt;code&gt;mean&lt;/code&gt; and &lt;code&gt;stddev&lt;/code&gt; as the distribution parameters. (3) uses &lt;code&gt;params&lt;/code&gt; as the distribution parameters.</source>
          <target state="translated">새로운 분포 객체를 구성합니다. (2)는 &lt;code&gt;mean&lt;/code&gt; 및 &lt;code&gt;stddev&lt;/code&gt; 를 분포 매개 변수로 사용합니다. (3) 사용은 &lt;code&gt;params&lt;/code&gt; 분포 매개한다.</target>
        </trans-unit>
        <trans-unit id="fd924199ccf4cb58dc82f74b6454343829c67612" translate="yes" xml:space="preserve">
          <source>Constructs a new distribution object. (2) uses &lt;code&gt;mean&lt;/code&gt; as the distribution parameter. (3) uses &lt;code&gt;params&lt;/code&gt; as the distribution parameter.</source>
          <target state="translated">새로운 분포 객체를 구성합니다. (2) &lt;code&gt;mean&lt;/code&gt; 을 분포 모수로 사용합니다. (3) 분포 매개 &lt;code&gt;params&lt;/code&gt; 로 params 를 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="77cf0643c8ba830d7d645ab7c7c0e3d264d19061" translate="yes" xml:space="preserve">
          <source>Constructs a new distribution object. (2) uses &lt;code&gt;n&lt;/code&gt; as the distribution parameter. (3) uses &lt;code&gt;params&lt;/code&gt; as the distribution parameter.</source>
          <target state="translated">새로운 분포 객체를 구성합니다. (2) &lt;code&gt;n&lt;/code&gt; 을 분포 모수로 사용합니다. (3) 분포 매개 &lt;code&gt;params&lt;/code&gt; 로 params 를 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="8ce0ed7bbf7a78ce8bbefae1187d9a7fc0f3cac7" translate="yes" xml:space="preserve">
          <source>Constructs a new distribution object. (2) uses &lt;code&gt;p&lt;/code&gt; as the distribution parameter. (3) uses &lt;code&gt;params&lt;/code&gt; as the distribution parameter.</source>
          <target state="translated">새로운 분포 객체를 구성합니다. (2) &lt;code&gt;p&lt;/code&gt; 를 분포 모수로 사용합니다. (3) 분포 매개 &lt;code&gt;params&lt;/code&gt; 로 params 를 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="41f880b09db6b85e311f52fc973831b6deb3eb53" translate="yes" xml:space="preserve">
          <source>Constructs a new distribution object. (2) uses &lt;code&gt;t&lt;/code&gt; and &lt;code&gt;p&lt;/code&gt; as the distribution parameters. (3) uses &lt;code&gt;params&lt;/code&gt; as the distribution parameters.</source>
          <target state="translated">새로운 분포 객체를 구성합니다. (2) &lt;code&gt;t&lt;/code&gt; 와 &lt;code&gt;p&lt;/code&gt; 를 분포 모수로 사용합니다. (3) 사용은 &lt;code&gt;params&lt;/code&gt; 분포 매개한다.</target>
        </trans-unit>
        <trans-unit id="ae23f73fd2c4b1a00a52153ed80bf96364fdaa62" translate="yes" xml:space="preserve">
          <source>Constructs a new filesystem error object. The error code is set to &lt;code&gt;ec&lt;/code&gt; and optionally, the paths that were involved in the operation that resulted in the error, are set to &lt;code&gt;p1&lt;/code&gt; and &lt;code&gt;p2&lt;/code&gt;. &lt;code&gt;what()&lt;/code&gt; after construction returns a string that contains &lt;code&gt;what_arg&lt;/code&gt;.</source>
          <target state="translated">새로운 파일 시스템 에러 객체를 구축합니다. 오류 코드는 &lt;code&gt;ec&lt;/code&gt; 로 설정 되고 선택적으로 오류를 일으킨 조작에 포함 된 경로는 &lt;code&gt;p1&lt;/code&gt; 및 &lt;code&gt;p2&lt;/code&gt; 로 설정됩니다 . 생성 후 &lt;code&gt;what()&lt;/code&gt; 은 &lt;code&gt;what_arg&lt;/code&gt; 가 포함 된 문자열을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="e28dd68224d2f8c22c0a0aafb8f36644e7b0e5dd" translate="yes" xml:space="preserve">
          <source>Constructs a new future error object containing the error code &lt;code&gt;std::make_error_code(ec)&lt;/code&gt;.</source>
          <target state="translated">오류 코드 &lt;code&gt;std::make_error_code(ec)&lt;/code&gt; 포함하는 새로운 미래 오류 객체를 구성합니다 .</target>
        </trans-unit>
        <trans-unit id="bb371f1a1ed974d41365d048f44b73b6b1277ab9" translate="yes" xml:space="preserve">
          <source>Constructs a new generic slice.</source>
          <target state="translated">새로운 일반 슬라이스를 구성합니다.</target>
        </trans-unit>
        <trans-unit id="86bef5015d4bb6ad2faaa329320c81894873aa97" translate="yes" xml:space="preserve">
          <source>Constructs a new instance of &lt;code&gt;std::bad_function_call&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;std::bad_function_call&lt;/code&gt; 의 새 인스턴스를 구성 합니다.</target>
        </trans-unit>
        <trans-unit id="83efb7e91b3e61f3c364422b4506f7305f474b9f" translate="yes" xml:space="preserve">
          <source>Constructs a new instance of &lt;code&gt;std::bad_variant_access&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;std::bad_variant_access&lt;/code&gt; 의 새 인스턴스를 구성 합니다.</target>
        </trans-unit>
        <trans-unit id="2e220fd7ace7028125faae8df08d0f0dea8e29ef" translate="yes" xml:space="preserve">
          <source>Constructs a new instance of &lt;code&gt;std::bad_weak_ptr&lt;/code&gt;. &lt;code&gt;what()&lt;/code&gt; returns an implementation-defined null-terminated byte string.</source>
          <target state="translated">&lt;code&gt;std::bad_weak_ptr&lt;/code&gt; 의 새 인스턴스를 구성 합니다. &lt;code&gt;what()&lt;/code&gt; 은 구현 정의 널 종료 바이트 문자열을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="701f871554f8a48809ed74e6e7b64f4391c76da0" translate="yes" xml:space="preserve">
          <source>Constructs a new iterator adaptor.</source>
          <target state="translated">새로운 반복자 어댑터를 구축합니다.</target>
        </trans-unit>
        <trans-unit id="c9e29c758faa70de1df71b49f1bc50c35c9bd2a8" translate="yes" xml:space="preserve">
          <source>Constructs a new pair.</source>
          <target state="translated">새로운 쌍을 구축합니다.</target>
        </trans-unit>
        <trans-unit id="2867898240143debc7ebae1e26cb785a8abf5bed" translate="yes" xml:space="preserve">
          <source>Constructs a new reference wrapper.</source>
          <target state="translated">새로운 참조 랩퍼를 구축합니다.</target>
        </trans-unit>
        <trans-unit id="e72bbf890f96521303ee14a537fe3f2b3ae59405" translate="yes" xml:space="preserve">
          <source>Constructs a new regular expression from a sequence of characters interpreted according to the flags &lt;code&gt;f&lt;/code&gt;.</source>
          <target state="translated">플래그 &lt;code&gt;f&lt;/code&gt; 에 따라 해석되는 일련의 문자로 새로운 정규식을 구성합니다 .</target>
        </trans-unit>
        <trans-unit id="e59f1c8cecaac94f28b717fe99ea053f1d536f52" translate="yes" xml:space="preserve">
          <source>Constructs a new slice.</source>
          <target state="translated">새로운 슬라이스를 구축합니다.</target>
        </trans-unit>
        <trans-unit id="fafeb069c18e9381a38213cd71732e69cf17843d" translate="yes" xml:space="preserve">
          <source>Constructs a new tuple.</source>
          <target state="translated">새로운 튜플을 구축합니다.</target>
        </trans-unit>
        <trans-unit id="eac3cb5e2c0be06381f36d9a41dcf62163b06723" translate="yes" xml:space="preserve">
          <source>Constructs a path &lt;code&gt;p&lt;/code&gt; from a UTF-8 encoded sequence of &lt;code&gt;char&lt;/code&gt;s, supplied either as an &lt;code&gt;&lt;a href=&quot;../../string/basic_string&quot;&gt;std::string&lt;/a&gt;&lt;/code&gt;, or as &lt;code&gt;&lt;a href=&quot;../../string/basic_string_view&quot;&gt;std::string_view&lt;/a&gt;&lt;/code&gt;, or as a null-terminated multibyte string, or as a [first, last) iterator pair.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../../string/basic_string&quot;&gt;std::string&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;../../string/basic_string_view&quot;&gt;std::string_view&lt;/a&gt;&lt;/code&gt; 또는 null로 끝나는 멀티 바이트 문자열 또는 [first, last) 반복자 쌍 으로 제공되는 UTF-8로 인코딩 된 &lt;code&gt;char&lt;/code&gt; 시퀀스의 경로 &lt;code&gt;p&lt;/code&gt; 를 구성합니다. .</target>
        </trans-unit>
        <trans-unit id="129e60a888da5fe22d6aacc21c5284f48a3f18d5" translate="yes" xml:space="preserve">
          <source>Constructs a raw pointer that references the same object as its pointer-like (&quot;fancy pointer&quot;) argument.</source>
          <target state="translated">포인터와 같은 ( &quot;팬시 포인터&quot;) 인수와 동일한 객체를 참조하는 원시 포인터를 구성합니다.</target>
        </trans-unit>
        <trans-unit id="41238f410e2c1d50efb34401488dcff0984e27dd" translate="yes" xml:space="preserve">
          <source>Constructs a sorted range beginning at &lt;code&gt;d_first&lt;/code&gt; consisting of elements that are found in both sorted ranges &lt;code&gt;[first1, last1)&lt;/code&gt; and &lt;code&gt;[first2, last2)&lt;/code&gt;. If some element is found &lt;code&gt;m&lt;/code&gt; times in &lt;code&gt;[first1, last1)&lt;/code&gt; and &lt;code&gt;n&lt;/code&gt; times in &lt;code&gt;[first2, last2)&lt;/code&gt;, the first &lt;code&gt;&lt;a href=&quot;min&quot;&gt;std::min&lt;/a&gt;(m, n)&lt;/code&gt; elements will be copied from the first range to the destination range. The order of equivalent elements is preserved. The resulting range cannot overlap with either of the input ranges.</source>
          <target state="translated">정렬 된 범위 &lt;code&gt;[first1, last1)&lt;/code&gt; 및 &lt;code&gt;[first2, last2)&lt;/code&gt; 모두에서 발견되는 요소로 구성된 &lt;code&gt;d_first&lt;/code&gt; 에서 시작하는 정렬 된 범위 를 구성합니다 . 어떤 요소가 발견되면 &lt;code&gt;m&lt;/code&gt; 의 시간 &lt;code&gt;[first1, last1)&lt;/code&gt; 및 &lt;code&gt;n&lt;/code&gt; 의 시간 &lt;code&gt;[first2, last2)&lt;/code&gt; , 제 &lt;code&gt;&lt;a href=&quot;min&quot;&gt;std::min&lt;/a&gt;(m, n)&lt;/code&gt; ) (m, n은이 요소는 대상 범위의 제 1 범위에서 복사된다. 동등한 요소의 순서가 유지됩니다. 결과 범위는 입력 범위 중 하나와 겹칠 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="7345847bb40a6c3af6cd3e225ea502223952aad8" translate="yes" xml:space="preserve">
          <source>Constructs a sorted union beginning at &lt;code&gt;d_first&lt;/code&gt; consisting of the set of elements present in one or both sorted ranges &lt;code&gt;[first1, last1)&lt;/code&gt; and &lt;code&gt;[first2, last2)&lt;/code&gt;.</source>
          <target state="translated">정렬 된 범위 &lt;code&gt;[first1, last1)&lt;/code&gt; 및 &lt;code&gt;[first2, last2)&lt;/code&gt; 중 하나 또는 둘 다에 존재하는 요소 세트로 구성된 &lt;code&gt;d_first&lt;/code&gt; 에서 시작하는 정렬 된 공용체를 구성합니다 .</target>
        </trans-unit>
        <trans-unit id="2e7e3f1dfa80d322669710cadc844981241628cb" translate="yes" xml:space="preserve">
          <source>Constructs a tuple of references to the arguments in &lt;code&gt;args&lt;/code&gt; suitable for forwarding as an argument to a function. The tuple has rvalue reference data members when rvalues are used as arguments, and otherwise has lvalue reference data members.</source>
          <target state="translated">함수에 &lt;code&gt;args&lt;/code&gt; 로 전달하기에 적합한 인수로 인수 에 대한 참조의 튜플을 구성 합니다. 튜플에는 rvalue가 인수로 사용될 때 rvalue 참조 데이터 멤버가 있고, 그렇지 않으면 lvalue 참조 데이터 멤버가 있습니다.</target>
        </trans-unit>
        <trans-unit id="4d9d7ca1756a21c7076cdc43f42a47739821c8cd" translate="yes" xml:space="preserve">
          <source>Constructs a tuple that is a concatenation of all tuples in &lt;code&gt;args&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;args&lt;/code&gt; 의 모든 튜플을 연결 한 튜플을 구성합니다 .</target>
        </trans-unit>
        <trans-unit id="1bf87884d3669faff4e92eae5a597457de8eec1c" translate="yes" xml:space="preserve">
          <source>Constructs a value of type &lt;code&gt;std::wctrans_t&lt;/code&gt; that describes a LC_CTYPE category of wide character mapping. It may be one of the standard mappings, or a locale-specific mapping, such as &lt;code&gt;&quot;tojhira&quot;&lt;/code&gt; or &lt;code&gt;&quot;tojkana&quot;&lt;/code&gt;.</source>
          <target state="translated">LC_CTYPE 와이드 문자 매핑 범주를 설명하는 &lt;code&gt;std::wctrans_t&lt;/code&gt; 유형의 값을 구성합니다 . 표준 맵핑 중 하나이거나 &lt;code&gt;&quot;tojhira&quot;&lt;/code&gt; 또는 &lt;code&gt;&quot;tojkana&quot;&lt;/code&gt; 와 같은 로케일 특정 맵핑 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6da5c90104d6beed504d4846b392d0c9e6ef5958" translate="yes" xml:space="preserve">
          <source>Constructs a value of type &lt;code&gt;std::wctype_t&lt;/code&gt; that describes a LC_CTYPE category of wide character classification. It may be one of the standard classification categories, or a locale-specific category, such as &lt;code&gt;&quot;jkanji&quot;&lt;/code&gt;.</source>
          <target state="translated">와이드 문자 분류의 LC_CTYPE 범주를 설명하는 &lt;code&gt;std::wctype_t&lt;/code&gt; 유형의 값을 구성합니다 . 표준 분류 범주 중 하나이거나 &lt;code&gt;&quot;jkanji&quot;&lt;/code&gt; 와 같은 로케일 특정 범주 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8edabe42fa9d17e7cfa23f9ba58a54fd9e766b9b" translate="yes" xml:space="preserve">
          <source>Constructs an &lt;code&gt;&lt;a href=&quot;../../error/error_code&quot;&gt;std::error_code&lt;/a&gt;&lt;/code&gt; object from a value of type &lt;code&gt;&lt;a href=&quot;../future_errc&quot;&gt;std::future_errc&lt;/a&gt;&lt;/code&gt; as if by:</source>
          <target state="translated">구축 &lt;code&gt;&lt;a href=&quot;../../error/error_code&quot;&gt;std::error_code&lt;/a&gt;&lt;/code&gt; 타입의 값으로부터 개체를 &lt;code&gt;&lt;a href=&quot;../future_errc&quot;&gt;std::future_errc&lt;/a&gt;&lt;/code&gt; 경우와 같음 :</target>
        </trans-unit>
        <trans-unit id="3a6d3afdcd5058ad0e838b52736c0772306d848c" translate="yes" xml:space="preserve">
          <source>Constructs an &lt;code&gt;&lt;a href=&quot;../../error/error_code&quot;&gt;std::error_code&lt;/a&gt;&lt;/code&gt; object from a value of type &lt;code&gt;&lt;a href=&quot;../io_errc&quot;&gt;std::io_errc&lt;/a&gt;&lt;/code&gt; as if by &lt;code&gt;return &lt;a href=&quot;../../error/error_code&quot;&gt;std::error_code&lt;/a&gt;(static_cast&amp;lt;int&amp;gt;(e), &lt;a href=&quot;../iostream_category&quot;&gt;std::iostream_category&lt;/a&gt;())&lt;/code&gt;. This function is called by the constructor of &lt;code&gt;&lt;a href=&quot;../../error/error_code&quot;&gt;std::error_code&lt;/a&gt;&lt;/code&gt; when given an &lt;code&gt;&lt;a href=&quot;../io_errc&quot;&gt;std::io_errc&lt;/a&gt;&lt;/code&gt; argument.</source>
          <target state="translated">구축합니다 &lt;code&gt;&lt;a href=&quot;../../error/error_code&quot;&gt;std::error_code&lt;/a&gt;&lt;/code&gt; 타입의 값으로부터 물체 &lt;code&gt;&lt;a href=&quot;../io_errc&quot;&gt;std::io_errc&lt;/a&gt;&lt;/code&gt; 것처럼 의해 &lt;code&gt;return &lt;a href=&quot;../../error/error_code&quot;&gt;std::error_code&lt;/a&gt;(static_cast&amp;lt;int&amp;gt;(e), &lt;a href=&quot;../iostream_category&quot;&gt;std::iostream_category&lt;/a&gt;())&lt;/code&gt; . 이 함수는 &lt;code&gt;&lt;a href=&quot;../io_errc&quot;&gt;std::io_errc&lt;/a&gt;&lt;/code&gt; 인수가 주어지면 &lt;code&gt;&lt;a href=&quot;../../error/error_code&quot;&gt;std::error_code&lt;/a&gt;&lt;/code&gt; 의 생성자에 의해 호출됩니다 .</target>
        </trans-unit>
        <trans-unit id="ca206b558381545fe3065e0e8f4a92d74451c68b" translate="yes" xml:space="preserve">
          <source>Constructs an &lt;code&gt;&lt;a href=&quot;../../error/error_condition&quot;&gt;std::error_condition&lt;/a&gt;&lt;/code&gt; object from a value of type &lt;code&gt;&lt;a href=&quot;../future_errc&quot;&gt;std::future_errc&lt;/a&gt;&lt;/code&gt; as if by:</source>
          <target state="translated">구축 &lt;code&gt;&lt;a href=&quot;../../error/error_condition&quot;&gt;std::error_condition&lt;/a&gt;&lt;/code&gt; 입력 값으로부터 개체를 &lt;code&gt;&lt;a href=&quot;../future_errc&quot;&gt;std::future_errc&lt;/a&gt;&lt;/code&gt; 경우와 같음 :</target>
        </trans-unit>
        <trans-unit id="bb6228c0ad0adf5952381804c8f96199710f8bb0" translate="yes" xml:space="preserve">
          <source>Constructs an &lt;code&gt;&lt;a href=&quot;../../error/error_condition&quot;&gt;std::error_condition&lt;/a&gt;&lt;/code&gt; object from a value of type &lt;code&gt;&lt;a href=&quot;../io_errc&quot;&gt;std::io_errc&lt;/a&gt;&lt;/code&gt; as if by &lt;code&gt;return &lt;a href=&quot;../../error/error_condition&quot;&gt;std::error_condition&lt;/a&gt;(static_cast&amp;lt;int&amp;gt;(e), &lt;a href=&quot;../iostream_category&quot;&gt;std::iostream_category&lt;/a&gt;())&lt;/code&gt;.</source>
          <target state="translated">구축합니다 &lt;code&gt;&lt;a href=&quot;../../error/error_condition&quot;&gt;std::error_condition&lt;/a&gt;&lt;/code&gt; 입력 값으로부터 물체 &lt;code&gt;&lt;a href=&quot;../io_errc&quot;&gt;std::io_errc&lt;/a&gt;&lt;/code&gt; 것처럼 의해 &lt;code&gt;return &lt;a href=&quot;../../error/error_condition&quot;&gt;std::error_condition&lt;/a&gt;(static_cast&amp;lt;int&amp;gt;(e), &lt;a href=&quot;../iostream_category&quot;&gt;std::iostream_category&lt;/a&gt;())&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a1a865675050b627ef3f7447679c6717d0953780" translate="yes" xml:space="preserve">
          <source>Constructs an &lt;code&gt;any&lt;/code&gt; object containing an object of type &lt;code&gt;T&lt;/code&gt;, passing the provided arguments to &lt;code&gt;T&lt;/code&gt;'s constructor.</source>
          <target state="translated">제공된 인수를 &lt;code&gt;T&lt;/code&gt; 의 생성자에 전달하여 &lt;code&gt;T&lt;/code&gt; 유형의 오브젝트를 포함 하는 &lt;code&gt;any&lt;/code&gt; 오브젝트를 구성합니다.</target>
        </trans-unit>
        <trans-unit id="de5bd60a258a1844cf3bd57247751e64497375ef" translate="yes" xml:space="preserve">
          <source>Constructs an &lt;code&gt;once_flag&lt;/code&gt; object. The internal state is set to indicate that no function has been called yet.</source>
          <target state="translated">구축 &lt;code&gt;once_flag&lt;/code&gt; 개체를. 내부 상태는 아직 호출 된 함수가 없음을 나타내도록 설정되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="fa1831f10cd8da0b5d6793c855cf5a80cf69cad7" translate="yes" xml:space="preserve">
          <source>Constructs an empty container using a &lt;code&gt;Compare()&lt;/code&gt; as &lt;code&gt;key_comp&lt;/code&gt; and inserts all elements from the range &lt;code&gt;[i; j)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;key_comp&lt;/code&gt; 로 &lt;code&gt;Compare()&lt;/code&gt; 를 사용하여 빈 컨테이너를 구성하고 &lt;code&gt;[i; j)&lt;/code&gt; 제이)</target>
        </trans-unit>
        <trans-unit id="444f21317ce0378954333f8c0b8fbfb3d10e25b0" translate="yes" xml:space="preserve">
          <source>Constructs an empty container using a copy of &lt;code&gt;c&lt;/code&gt; as &lt;code&gt;key_comp&lt;/code&gt; and inserts all elements from the range &lt;code&gt;[i; j)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;c&lt;/code&gt; 의 사본을 &lt;code&gt;key_comp&lt;/code&gt; 로 사용하여 빈 컨테이너를 구성하고 &lt;code&gt;[i; j)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0fb614f3671e14a7862203818f25225bbda7ec45" translate="yes" xml:space="preserve">
          <source>Constructs an empty container with an unspecified number of buckets, using &lt;code&gt;hasher()&lt;/code&gt; as hash function and &lt;code&gt;key_equal()&lt;/code&gt; as equality predicate</source>
          <target state="translated">&lt;code&gt;hasher()&lt;/code&gt; 를 해시 함수로 사용하고 &lt;code&gt;key_equal()&lt;/code&gt; 을 등호 술어 로 사용하여 지정되지 않은 버킷 수로 빈 컨테이너를 생성합니다</target>
        </trans-unit>
        <trans-unit id="4f1294a64cba42f543b72f8665d546ac7300ba28" translate="yes" xml:space="preserve">
          <source>Constructs an empty container with at least &lt;code&gt;n&lt;/code&gt; buckets, using &lt;code&gt;hasher()&lt;/code&gt; as hash function and &lt;code&gt;key_equal()&lt;/code&gt; as equality predicate</source>
          <target state="translated">&lt;code&gt;hasher()&lt;/code&gt; 를 해시 함수로 사용하고 &lt;code&gt;key_equal()&lt;/code&gt; 을 항등 술어 로 사용하여 최소 &lt;code&gt;n&lt;/code&gt; 개의 버킷으로 빈 컨테이너를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="50c9a5d540eebbadc520029f6dbc1b2f4c2b1409" translate="yes" xml:space="preserve">
          <source>Constructs an empty container with at least &lt;code&gt;n&lt;/code&gt; buckets, using the given hash function and &lt;code&gt;key_equal()&lt;/code&gt; as equality predicate</source>
          <target state="translated">주어진 해시 함수와 &lt;code&gt;key_equal()&lt;/code&gt; 을 항등 술어로 사용하여 적어도 &lt;code&gt;n&lt;/code&gt; 개의 버킷으로 빈 컨테이너를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="21e1711169dd659349cf5e104208204910ed2f77" translate="yes" xml:space="preserve">
          <source>Constructs an empty container with at least &lt;code&gt;n&lt;/code&gt; buckets, using the given hash function and equality predicate</source>
          <target state="translated">주어진 해시 함수와 동등 술어를 사용하여 적어도 &lt;code&gt;n&lt;/code&gt; 개의 버킷으로 빈 컨테이너를 구성합니다.</target>
        </trans-unit>
        <trans-unit id="7adab47cfb53ae45c7542a943e9b2fbd9c853d3b" translate="yes" xml:space="preserve">
          <source>Constructs an empty container with at least &lt;code&gt;n&lt;/code&gt; buckets, using the given hash function and equality predicate, and inserts elements from [i,j) into it.</source>
          <target state="translated">주어진 해시 함수와 동등 술어를 사용하여 적어도 &lt;code&gt;n&lt;/code&gt; 개의 버킷으로 빈 컨테이너를 구성하고 [i, j)의 요소를 컨테이너에 삽입합니다.</target>
        </trans-unit>
        <trans-unit id="9f9a4e80c694ee2b7baa0be7f51cdfc0238bbd60" translate="yes" xml:space="preserve">
          <source>Constructs an empty initializer list.</source>
          <target state="translated">빈 이니셜 라이저 목록을 구성합니다.</target>
        </trans-unit>
        <trans-unit id="c0e8542d6d01113162dc2fd0d8ac04c0fcd6b143" translate="yes" xml:space="preserve">
          <source>Constructs an object in allocated storage</source>
          <target state="translated">할당 된 저장소에 객체를 생성</target>
        </trans-unit>
        <trans-unit id="b71c62e38f1d4913d5ee4a0f0bdbbf5a3dc8b269" translate="yes" xml:space="preserve">
          <source>Constructs an object in allocated, but not initialized storage pointed to by &lt;code&gt;p&lt;/code&gt; the provided constructor arguments. If the object is of type that itself uses allocators, or if it is std::pair, passes &lt;code&gt;this-&amp;gt;resource()&lt;/code&gt; down to the constructed object.</source>
          <target state="translated">제공된 생성자 인자 &lt;code&gt;p&lt;/code&gt; 가 가리키는 할당되었지만 초기화되지 않은 스토리지에 객체를 구성합니다. 객체 자체가 할당자를 사용하는 유형이거나 std :: pair 인 경우 &lt;code&gt;this-&amp;gt;resource()&lt;/code&gt; 를 생성 된 객체로 전달합니다.</target>
        </trans-unit>
        <trans-unit id="be5dddf281cc28d9c945599b53c3edadb59e2a34" translate="yes" xml:space="preserve">
          <source>Constructs an object in allocated, but not initialized storage pointed to by &lt;code&gt;p&lt;/code&gt; using OuterAllocator and the provided constructor arguments. If the object is of type that itself uses allocators, or if it is std::pair, passes InnerAllocator down to the constructed object.</source>
          <target state="translated">OuterAllocator 및 제공된 생성자 인수를 사용하여 &lt;code&gt;p&lt;/code&gt; 가 가리키는 할당되었지만 초기화되지 않은 스토리지에 오브젝트를 구성합니다. 객체 자체가 할당자를 사용하는 유형이거나 std :: pair 인 경우 InnerAllocator를 생성 된 객체로 전달합니다.</target>
        </trans-unit>
        <trans-unit id="2275a8814ff608088bcc7aa0262d9d1f245e4243" translate="yes" xml:space="preserve">
          <source>Constructs an object of type &lt;a href=&quot;../io/basic_istream/sentry&quot;&gt;&lt;code&gt;basic_istream::sentry&lt;/code&gt;&lt;/a&gt; with automatic storage duration and with the &lt;code&gt;noskipws&lt;/code&gt; argument set to &lt;code&gt;false&lt;/code&gt;, which performs the following</source>
          <target state="translated">자동 저장 기간과 &lt;code&gt;noskipws&lt;/code&gt; 인수가 &lt;code&gt;false&lt;/code&gt; 로 설정된 &lt;a href=&quot;../io/basic_istream/sentry&quot;&gt; &lt;code&gt;basic_istream::sentry&lt;/code&gt; &lt;/a&gt; 유형의 객체를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="3565c07d189d00fcdd9fd936a8cf17cb812c0443" translate="yes" xml:space="preserve">
          <source>Constructs an object of type &lt;a href=&quot;../io/basic_istream/sentry&quot;&gt;&lt;code&gt;basic_istream::sentry&lt;/code&gt;&lt;/a&gt; with automatic storage duration and with the &lt;code&gt;noskipws&lt;/code&gt; argument set to &lt;code&gt;true&lt;/code&gt;, which performs the following</source>
          <target state="translated">자동 저장 기간과 &lt;code&gt;noskipws&lt;/code&gt; 인수를 &lt;code&gt;true&lt;/code&gt; 로 설정하여 &lt;a href=&quot;../io/basic_istream/sentry&quot;&gt; &lt;code&gt;basic_istream::sentry&lt;/code&gt; &lt;/a&gt; 유형의 객체를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="d0153413d5f17fe552f201b82f991c2853c75a3c" translate="yes" xml:space="preserve">
          <source>Constructs an object of type &lt;a href=&quot;../io/basic_ostream/sentry&quot;&gt;&lt;code&gt;basic_ostream::sentry&lt;/code&gt;&lt;/a&gt; with automatic storage duration, which performs the following</source>
          <target state="translated">자동 저장 시간을 사용하여 &lt;a href=&quot;../io/basic_ostream/sentry&quot;&gt; &lt;code&gt;basic_ostream::sentry&lt;/code&gt; &lt;/a&gt; 유형의 객체를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="8bd39328590b49d3dbe0ca6a5b00c970c6ce639f" translate="yes" xml:space="preserve">
          <source>Constructs an object of type &lt;code&gt;T&lt;/code&gt; and wraps it in a &lt;code&gt;&lt;a href=&quot;../unique_ptr&quot;&gt;std::unique_ptr&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; 유형의 객체를 구성 하고 &lt;code&gt;&lt;a href=&quot;../unique_ptr&quot;&gt;std::unique_ptr&lt;/a&gt;&lt;/code&gt; 래핑합니다 .</target>
        </trans-unit>
        <trans-unit id="d115341594ca97c2ca1761448a16afb613b704c2" translate="yes" xml:space="preserve">
          <source>Constructs an object of type &lt;code&gt;T&lt;/code&gt; in allocated uninitialized storage pointed to by &lt;code&gt;p&lt;/code&gt;, using placement-new.</source>
          <target state="translated">place -new를 사용하여 &lt;code&gt;p&lt;/code&gt; 가 가리키는 초기화되지 않은 할당 된 스토리지에 &lt;code&gt;T&lt;/code&gt; 유형의 오브젝트를 구성합니다 .</target>
        </trans-unit>
        <trans-unit id="a55588e1e0fe292be1b97de09aa843168e04d85b" translate="yes" xml:space="preserve">
          <source>Constructs an object of type &lt;code&gt;X&lt;/code&gt; in previously-allocated storage at the address pointed to by &lt;code&gt;xptr&lt;/code&gt;, using args as the constructor arguments</source>
          <target state="translated">args를 생성자 인수로 사용하여 &lt;code&gt;xptr&lt;/code&gt; 이 가리키는 주소에서 이전에 할당 된 저장소에 &lt;code&gt;X&lt;/code&gt; 유형의 객체를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="18e022936505246ad70ccf9de8446e6a52b8062f" translate="yes" xml:space="preserve">
          <source>Constructs new &lt;code&gt;&lt;a href=&quot;../bad_cast&quot;&gt;std::bad_cast&lt;/a&gt;&lt;/code&gt; object. The contents of the byte string returned by &lt;a href=&quot;../../error/exception/what&quot;&gt;&lt;code&gt;what()&lt;/code&gt;&lt;/a&gt; are implementation defined.</source>
          <target state="translated">새로운 &lt;code&gt;&lt;a href=&quot;../bad_cast&quot;&gt;std::bad_cast&lt;/a&gt;&lt;/code&gt; 객체를 생성합니다. &lt;a href=&quot;../../error/exception/what&quot;&gt; &lt;code&gt;what()&lt;/code&gt; &lt;/a&gt; 의해 리턴 된 바이트 문자열의 내용 은 구현 정의됩니다.</target>
        </trans-unit>
        <trans-unit id="f044165e591abd53e891e3b38c244ad17ab5d4e4" translate="yes" xml:space="preserve">
          <source>Constructs new &lt;code&gt;&lt;a href=&quot;../bad_typeid&quot;&gt;std::bad_typeid&lt;/a&gt;&lt;/code&gt; object. The contents of the byte string returned by &lt;a href=&quot;../../error/exception/what&quot;&gt;&lt;code&gt;what()&lt;/code&gt;&lt;/a&gt; are implementation defined.</source>
          <target state="translated">새로운 &lt;code&gt;&lt;a href=&quot;../bad_typeid&quot;&gt;std::bad_typeid&lt;/a&gt;&lt;/code&gt; 객체를 생성 합니다. &lt;a href=&quot;../../error/exception/what&quot;&gt; &lt;code&gt;what()&lt;/code&gt; &lt;/a&gt; 의해 리턴 된 바이트 문자열의 내용 은 구현 정의됩니다.</target>
        </trans-unit>
        <trans-unit id="75779a71b4c114f90b05f6241c3943818f2c014c" translate="yes" xml:space="preserve">
          <source>Constructs new &lt;code&gt;bad_alloc&lt;/code&gt; object with an implementation-defined null-terminated byte string which is accessible through &lt;a href=&quot;../../error/exception/what&quot;&gt;&lt;code&gt;what()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../error/exception/what&quot;&gt; &lt;code&gt;what()&lt;/code&gt; &lt;/a&gt; 통해 액세스 할 수있는 구현 정의 된 널 종료 바이트 문자열로 새로운 &lt;code&gt;bad_alloc&lt;/code&gt; 객체를 구성합니다 .</target>
        </trans-unit>
        <trans-unit id="9d8b371c6510676f7eafdb240ed955368525e1fe" translate="yes" xml:space="preserve">
          <source>Constructs new &lt;code&gt;bad_array_new_length&lt;/code&gt; object with in implementation-defined null-terminated byte string which is accessible through &lt;a href=&quot;../../../error/exception/what&quot;&gt;&lt;code&gt;what()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../../error/exception/what&quot;&gt; &lt;code&gt;what()&lt;/code&gt; &lt;/a&gt; 통해 액세스 할 수있는 구현 정의 된 null 종료 바이트 문자열을 사용하여 새로운 &lt;code&gt;bad_array_new_length&lt;/code&gt; 객체를 구성 합니다 .</target>
        </trans-unit>
        <trans-unit id="68edcab2d02084d8e2a6c99bfc7e710258af4d29" translate="yes" xml:space="preserve">
          <source>Constructs new &lt;code&gt;bad_exception&lt;/code&gt; object.</source>
          <target state="translated">새로운 &lt;code&gt;bad_exception&lt;/code&gt; 객체를 생성 합니다.</target>
        </trans-unit>
        <trans-unit id="c2f3a395b29d839f5e88f15d46dddd61c0dcc100" translate="yes" xml:space="preserve">
          <source>Constructs new &lt;code&gt;basic_ios&lt;/code&gt; object.</source>
          <target state="translated">새로운 &lt;code&gt;basic_ios&lt;/code&gt; 객체를 생성 합니다.</target>
        </trans-unit>
        <trans-unit id="7f88d05e42b9fe12f5cc2cf0b042b1a7e94642c0" translate="yes" xml:space="preserve">
          <source>Constructs new &lt;code&gt;nested_exception&lt;/code&gt; object.</source>
          <target state="translated">새로운 &lt;code&gt;nested_exception&lt;/code&gt; 객체를 구축 합니다.</target>
        </trans-unit>
        <trans-unit id="174355bdac8377771ebe877771b9debecffaf6ad" translate="yes" xml:space="preserve">
          <source>Constructs new &lt;code&gt;shared_ptr&lt;/code&gt; from a variety of pointer types that refer to an object to manage.</source>
          <target state="translated">관리 할 객체를 참조하는 다양한 포인터 유형에서 새로운 &lt;code&gt;shared_ptr&lt;/code&gt; 을 생성합니다.</target>
        </trans-unit>
        <trans-unit id="405c881ac5b6f0b9b0f7787e11d3cd1dac9cbd66" translate="yes" xml:space="preserve">
          <source>Constructs new &lt;code&gt;weak_ptr&lt;/code&gt; that potentially shares an object with &lt;code&gt;r&lt;/code&gt;.</source>
          <target state="translated">잠재적으로 &lt;code&gt;r&lt;/code&gt; 과 객체를 공유하는 새로운 &lt;code&gt;weak_ptr&lt;/code&gt; 을 구축 합니다 .</target>
        </trans-unit>
        <trans-unit id="2a01b38c5381eb4686f279812299862c6884a801" translate="yes" xml:space="preserve">
          <source>Constructs new atomic variable.</source>
          <target state="translated">새로운 원자 변수를 구성합니다.</target>
        </trans-unit>
        <trans-unit id="095962a7105ba8cfb49de6b3d28653e3619cc36e" translate="yes" xml:space="preserve">
          <source>Constructs new container from a variety of data sources and optionally using user supplied allocator &lt;code&gt;alloc&lt;/code&gt; or comparison function object &lt;code&gt;comp&lt;/code&gt;.</source>
          <target state="translated">다양한 데이터 소스에서 새 컨테이너를 구성하고 선택적으로 사용자 제공 할당 자 &lt;code&gt;alloc&lt;/code&gt; 또는 비교 함수 객체 &lt;code&gt;comp&lt;/code&gt; 를 사용 합니다.</target>
        </trans-unit>
        <trans-unit id="7a0735c894daf2fdf5573a8daceba002fb78dea5" translate="yes" xml:space="preserve">
          <source>Constructs new container from a variety of data sources. Optionally uses user supplied &lt;code&gt;bucket_count&lt;/code&gt; as a minimal number of buckets to create, &lt;code&gt;hash&lt;/code&gt; as the hash function, &lt;code&gt;equal&lt;/code&gt; as the function to compare keys and &lt;code&gt;alloc&lt;/code&gt; as the allocator.</source>
          <target state="translated">다양한 데이터 소스에서 새 컨테이너를 구성합니다. 선택적으로 사용자 제공 &lt;code&gt;bucket_count&lt;/code&gt; 를 생성하기위한 최소 버킷 수로 해시 함수로 &lt;code&gt;hash&lt;/code&gt; 를 &lt;code&gt;alloc&lt;/code&gt; 하고 키와 할당 자를 할당 자로 비교하는 기능 &lt;code&gt;equal&lt;/code&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="7eb53758e63235d8aa6d7063c135ab67ae1d16ec" translate="yes" xml:space="preserve">
          <source>Constructs new distribution object. (2) uses &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; as the distribution parameters, (3) uses &lt;code&gt;params&lt;/code&gt; as the distribution parameters.</source>
          <target state="translated">새로운 분포 객체를 구성합니다. (2) &lt;code&gt;a&lt;/code&gt; 와 &lt;code&gt;b&lt;/code&gt; 를 분포 모수로 사용 하고 (3) &lt;code&gt;params&lt;/code&gt; 를 분포 모수로 사용합니다.</target>
        </trans-unit>
        <trans-unit id="e18af40090a96bad4e51a68f1a377d24816d0fda" translate="yes" xml:space="preserve">
          <source>Constructs new distribution object. (2) uses &lt;code&gt;p&lt;/code&gt; as the distribution parameter. (3) uses &lt;code&gt;params&lt;/code&gt; as the distribution parameter.</source>
          <target state="translated">새로운 분포 객체를 구성합니다. (2) &lt;code&gt;p&lt;/code&gt; 를 분포 모수로 사용합니다. (3) 분포 매개 &lt;code&gt;params&lt;/code&gt; 로 params 를 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="df049b6872fa508eed4a99d1f7cb87f6387c7b87" translate="yes" xml:space="preserve">
          <source>Constructs new error code.</source>
          <target state="translated">새로운 에러 코드를 구축합니다.</target>
        </trans-unit>
        <trans-unit id="7367ce771a82e34ac59dfda49912a964557f1160" translate="yes" xml:space="preserve">
          <source>Constructs new error condition.</source>
          <target state="translated">새로운 에러 조건을 구축합니다.</target>
        </trans-unit>
        <trans-unit id="8ba9ace6142910455b0f192d56ef22fe5795791d" translate="yes" xml:space="preserve">
          <source>Constructs new exception object.</source>
          <target state="translated">새로운 예외 객체를 구축합니다.</target>
        </trans-unit>
        <trans-unit id="98d1551c4d89bddbe932d84140e21f7b791f3668" translate="yes" xml:space="preserve">
          <source>Constructs new file stream.</source>
          <target state="translated">새로운 파일 스트림을 구축합니다.</target>
        </trans-unit>
        <trans-unit id="82a19becdc74ef3fb436138dda1687b42832008b" translate="yes" xml:space="preserve">
          <source>Constructs new input/output strstream and its underlying &lt;code&gt;&lt;a href=&quot;../strstreambuf&quot;&gt;std::strstreambuf&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">새로운 입력 / 출력 strstream 및 기본 &lt;code&gt;&lt;a href=&quot;../strstreambuf&quot;&gt;std::strstreambuf&lt;/a&gt;&lt;/code&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="56bc4ab79bb5c2fc113ed51e3255e6b988ad42c7" translate="yes" xml:space="preserve">
          <source>Constructs new istrstream and its underlying &lt;code&gt;&lt;a href=&quot;../strstreambuf&quot;&gt;std::strstreambuf&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">새로운 istrstream과 그 기본 &lt;code&gt;&lt;a href=&quot;../strstreambuf&quot;&gt;std::strstreambuf&lt;/a&gt;&lt;/code&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="fd3b5a2dcc6dda9221fdddebde6d670bedbc8a30" translate="yes" xml:space="preserve">
          <source>Constructs new numeric array from various sources.</source>
          <target state="translated">다양한 소스에서 새로운 숫자 형 배열을 구성합니다.</target>
        </trans-unit>
        <trans-unit id="d95877ec2e36218539240bc6b68b079e692e441f" translate="yes" xml:space="preserve">
          <source>Constructs new output strstream and its underlying &lt;code&gt;&lt;a href=&quot;../strstreambuf&quot;&gt;std::strstreambuf&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">새로운 출력 strstream과 그 기본 &lt;code&gt;&lt;a href=&quot;../strstreambuf&quot;&gt;std::strstreambuf&lt;/a&gt;&lt;/code&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="482d3fbcd23a8f3e1821ed8f707a20467e22d717" translate="yes" xml:space="preserve">
          <source>Constructs new piecewise constant distribution object.</source>
          <target state="translated">새로운 단편 상수 분포 객체를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="7a6d1277e5a40242e993d4956b75308215a28ae3" translate="yes" xml:space="preserve">
          <source>Constructs new piecewise linear distribution object.</source>
          <target state="translated">새로운 부분 선형 분포 객체를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="2b5f5277bd5f2cf231495ff8d0ced3f7cfdf6cc8" translate="yes" xml:space="preserve">
          <source>Constructs new pseudo-random engine adaptor.</source>
          <target state="translated">새로운 의사 난수 엔진 어댑터를 구성합니다.</target>
        </trans-unit>
        <trans-unit id="73fb4e03a8c3220101f7e2a9d111878f6083d349" translate="yes" xml:space="preserve">
          <source>Constructs new stream object.</source>
          <target state="translated">새로운 스트림 객체를 구축합니다.</target>
        </trans-unit>
        <trans-unit id="e1be0256e20153c5e07709efc19ea99e4e724d5c" translate="yes" xml:space="preserve">
          <source>Constructs new string from a variety of data sources and optionally using user supplied allocator &lt;code&gt;alloc&lt;/code&gt;.</source>
          <target state="translated">다양한 데이터 소스로부터 그리고 선택적으로 사용자 제공 할당 자 &lt;code&gt;alloc&lt;/code&gt; 을 사용하여 새 문자열을 구성합니다 .</target>
        </trans-unit>
        <trans-unit id="beb75352ff55b2ee73d556e8c4cda6ec51faa25e" translate="yes" xml:space="preserve">
          <source>Constructs new string stream.</source>
          <target state="translated">새로운 캐릭터 라인 스트림을 구축합니다.</target>
        </trans-unit>
        <trans-unit id="25c236f035bfc4f413f5770c41c47913f30145a4" translate="yes" xml:space="preserve">
          <source>Constructs new synchronized output stream.</source>
          <target state="translated">새로운 동기 출력 스트림을 구축합니다.</target>
        </trans-unit>
        <trans-unit id="a8b774b9d3637d2d91e58985989b443cb2b8c4bb" translate="yes" xml:space="preserve">
          <source>Constructs new system error object.</source>
          <target state="translated">새로운 시스템 에러 객체를 구축합니다.</target>
        </trans-unit>
        <trans-unit id="8017515519ae1a7379fd854b2ceca8430332418b" translate="yes" xml:space="preserve">
          <source>Constructs new thread object.</source>
          <target state="translated">새로운 thread 객체를 구축합니다.</target>
        </trans-unit>
        <trans-unit id="4a6f9d1ff9ae163f2fdd18e4f74223ad72e15e7c" translate="yes" xml:space="preserve">
          <source>Constructs new underlying container of the container adaptor from a variety of data sources.</source>
          <target state="translated">다양한 데이터 소스에서 컨테이너 어댑터의 새로운 기본 컨테이너를 구성합니다.</target>
        </trans-unit>
        <trans-unit id="733f8798a11c652c3e11c43b6277e7d7647445fd" translate="yes" xml:space="preserve">
          <source>Constructs the &lt;code&gt;&lt;a href=&quot;../complex&quot;&gt;std::complex&lt;/a&gt;&lt;/code&gt; object.</source>
          <target state="translated">구축 &lt;code&gt;&lt;a href=&quot;../complex&quot;&gt;std::complex&lt;/a&gt;&lt;/code&gt; 개체를.</target>
        </trans-unit>
        <trans-unit id="c8289a7741d4e3e3d2d067acb368d113c9ed9c52" translate="yes" xml:space="preserve">
          <source>Constructs the &lt;code&gt;auto_ptr&lt;/code&gt; from a pointer that refers to the object to manage.</source>
          <target state="translated">관리 할 객체를 참조하는 포인터 에서 &lt;code&gt;auto_ptr&lt;/code&gt; 을 생성합니다.</target>
        </trans-unit>
        <trans-unit id="6c3ce5bd96b6b1de8e845746f5e7f7be1dc7ea57" translate="yes" xml:space="preserve">
          <source>Constructs the contained value in-place. If &lt;code&gt;*this&lt;/code&gt; already contains a value before the call, the contained value is destroyed by calling its destructor.</source>
          <target state="translated">포함 된 값을 제자리에 구성합니다. 경우 &lt;code&gt;*this&lt;/code&gt; 이미 호출하기 전에 값을 포함, 포함 된 값은 소멸자를 호출하여 파괴된다.</target>
        </trans-unit>
        <trans-unit id="5fee4843d1565962db777ea646880659cc9b26b7" translate="yes" xml:space="preserve">
          <source>Constructs the default allocator. Since the default allocator is stateless, the constructors have no visible effect.</source>
          <target state="translated">기본 할당자를 구성합니다. 기본 할당자는 상태 비 저장이므로 생성자는 눈에 띄는 효과가 없습니다.</target>
        </trans-unit>
        <trans-unit id="129faf79069eae00ca48a064bde151f0177782fc" translate="yes" xml:space="preserve">
          <source>Constructs the error category object.</source>
          <target state="translated">에러 카테고리 객체를 구축합니다.</target>
        </trans-unit>
        <trans-unit id="e7d7662e3e409a3b9bb668185ce8cf0679f30813" translate="yes" xml:space="preserve">
          <source>Constructs the exception object using &lt;code&gt;message&lt;/code&gt; as explanation string which can later be retrieved using &lt;a href=&quot;../../error/exception/what&quot;&gt;&lt;code&gt;what()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../error/exception/what&quot;&gt; &lt;code&gt;what()&lt;/code&gt; &lt;/a&gt; 사용하여 나중에 검색 할 수있는 설명 문자열로 &lt;code&gt;message&lt;/code&gt; 를 사용하여 예외 객체를 구성 합니다 .</target>
        </trans-unit>
        <trans-unit id="1dee0c4cc95aeaf93fadb6526ab81f3c1bb3d8b5" translate="yes" xml:space="preserve">
          <source>Constructs the exception object with &lt;code&gt;what_arg&lt;/code&gt; as explanatory string that can be accessed through &lt;code&gt;&lt;a href=&quot;../exception/what&quot;&gt;what()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../exception/what&quot;&gt;what()&lt;/a&gt;&lt;/code&gt; 통해 액세스 할 수있는 설명 문자열 로 &lt;code&gt;what_arg&lt;/code&gt; 를 사용 하여 예외 객체를 구성합니다 .</target>
        </trans-unit>
        <trans-unit id="6b123dfd898eb6bf23f16e095530111b8effbd03" translate="yes" xml:space="preserve">
          <source>Constructs the exception object with &lt;code&gt;what_arg&lt;/code&gt; as explanatory string that can be accessed through &lt;code&gt;what()&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt; as the object that can be accessed through &lt;code&gt;get()&lt;/code&gt;.</source>
          <target state="translated">예외와 오브젝트 구축 &lt;code&gt;what_arg&lt;/code&gt; 통해 액세스 할 수있는 설명 문자열 &lt;code&gt;what()&lt;/code&gt; 및 &lt;code&gt;value&lt;/code&gt; 통해 액세스 할 수있는 객체로 &lt;code&gt;get()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d515d02d1bb3d0fb572c4f8ba82a255fafc2637c" translate="yes" xml:space="preserve">
          <source>Constructs the exception object. The explanatory string returned by &lt;code&gt;what()&lt;/code&gt; is equivalent to that produced by &lt;code&gt;os.str()&lt;/code&gt; after the following code:</source>
          <target state="translated">예외 객체를 구성합니다. &lt;code&gt;what()&lt;/code&gt; 의해 반환되는 설명 문자열 은 다음 코드 이후 &lt;code&gt;os.str()&lt;/code&gt; 의해 생성 된 설명 문자열 과 같습니다.</target>
        </trans-unit>
        <trans-unit id="1985ece162e057f35521ae5b07ecf0a97b4f287f" translate="yes" xml:space="preserve">
          <source>Constructs the pseudo-random number engine.</source>
          <target state="translated">의사 난수 엔진을 구성합니다.</target>
        </trans-unit>
        <trans-unit id="19341ff1aa106d59bb7206caec78afb78f77ca81" translate="yes" xml:space="preserve">
          <source>Constructs the sequence container equal, element-wise, to the range &lt;code&gt;[i,j)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;[i,j)&lt;/code&gt; 범위와 같은 요소 단위로 시퀀스 컨테이너를 구성합니다.</target>
        </trans-unit>
        <trans-unit id="e88d9733557702505ac13870f3ec6c09037dce3c" translate="yes" xml:space="preserve">
          <source>Constructs the sequence container holding &lt;code&gt;n&lt;/code&gt; copies of &lt;code&gt;t&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;t&lt;/code&gt; 의 &lt;code&gt;n&lt;/code&gt; 복사본을 보유하는 시퀀스 컨테이너를 구성합니다.</target>
        </trans-unit>
        <trans-unit id="15259acd1c8840f14149086bc950eecc72740254" translate="yes" xml:space="preserve">
          <source>Constructs the type index from &lt;code&gt;&lt;a href=&quot;../type_info&quot;&gt;std::type_info&lt;/a&gt;&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../type_info&quot;&gt;std::type_info&lt;/a&gt;&lt;/code&gt; 오브젝트 에서 유형 색인을 구성 합니다.</target>
        </trans-unit>
        <trans-unit id="d22ef7237b8d1d71f037aca680865a271dbda6c6" translate="yes" xml:space="preserve">
          <source>Consume operation</source>
          <target state="translated">작업 소비</target>
        </trans-unit>
        <trans-unit id="e6443af99d2f470f50affd5057bf48db2d09dae4" translate="yes" xml:space="preserve">
          <source>Container</source>
          <target state="translated">Container</target>
        </trans-unit>
        <trans-unit id="9d17b7c97073b8cdafbec7b1b3016d83dc527cee" translate="yes" xml:space="preserve">
          <source>Container access</source>
          <target state="translated">컨테이너 접근</target>
        </trans-unit>
        <trans-unit id="5bc66a07cc784f81d102f318233299244ff766f0" translate="yes" xml:space="preserve">
          <source>Container adaptors</source>
          <target state="translated">컨테이너 어댑터</target>
        </trans-unit>
        <trans-unit id="91599474174f1e1f60fdd78ef9c264f7264cda45" translate="yes" xml:space="preserve">
          <source>Container adaptors provide a different interface for sequential containers.</source>
          <target state="translated">컨테이너 어댑터는 순차 컨테이너에 다른 인터페이스를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="b7d7330596f1c71642364d91d3f35c8b8036522f" translate="yes" xml:space="preserve">
          <source>Container c</source>
          <target state="translated">컨테이너 c</target>
        </trans-unit>
        <trans-unit id="14c45777a85e89d009bffab012bf2b1689fe9539" translate="yes" xml:space="preserve">
          <source>Container data races</source>
          <target state="translated">컨테이너 데이터 레이스</target>
        </trans-unit>
        <trans-unit id="b72fdddc7b475091f06db646f64a37d1b53d3be3" translate="yes" xml:space="preserve">
          <source>Container element</source>
          <target state="translated">컨테이너 요소</target>
        </trans-unit>
        <trans-unit id="ff6e547e2731b61aa3b07eda189db295d96da927" translate="yes" xml:space="preserve">
          <source>Container elements may not be modified (even by non const iterators) since modification could change an element's hash and corrupt the container.</source>
          <target state="translated">수정은 요소의 해시를 변경하고 컨테이너를 손상시킬 수 있으므로 컨테이너 요소는 (비 const 반복자조차도) 수정할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="e1cca79bcbc7ded1e47ab326c8a67ce6617bc9dc" translate="yes" xml:space="preserve">
          <source>Container type</source>
          <target state="translated">컨테이너 유형</target>
        </trans-unit>
        <trans-unit id="e040a458f46532a90ec69fa0b4bfc33ba151c98b" translate="yes" xml:space="preserve">
          <source>Containers</source>
          <target state="translated">Containers</target>
        </trans-unit>
        <trans-unit id="abcc2508fc71705564b79b8ed2c7b638c8ebd25b" translate="yes" xml:space="preserve">
          <source>Containers library</source>
          <target state="translated">컨테이너 라이브러리</target>
        </trans-unit>
        <trans-unit id="19f7c427ad83bce1d48207893d549831c6403ef2" translate="yes" xml:space="preserve">
          <source>Contextual conversions</source>
          <target state="translated">상황 별 전환</target>
        </trans-unit>
        <trans-unit id="301aa161c801a3125a23f6d7060de097fe32ba04" translate="yes" xml:space="preserve">
          <source>Contiguous containers in the standard library</source>
          <target state="translated">표준 라이브러리의 연속 컨테이너</target>
        </trans-unit>
        <trans-unit id="ccb6d1f0c231b3af82f01542d67bfdb5a323e2bf" translate="yes" xml:space="preserve">
          <source>ContiguousContainer</source>
          <target state="translated">ContiguousContainer</target>
        </trans-unit>
        <trans-unit id="9c3453c2accc581d478ab3d95a9c8f8b287cff84" translate="yes" xml:space="preserve">
          <source>ContiguousIterator</source>
          <target state="translated">ContiguousIterator</target>
        </trans-unit>
        <trans-unit id="09ae88a726ec7b1800885a91622061a34227aa65" translate="yes" xml:space="preserve">
          <source>ContiguousRange</source>
          <target state="translated">ContiguousRange</target>
        </trans-unit>
        <trans-unit id="ea22d74beda0748e05dacea89ed522e1b4e1db7b" translate="yes" xml:space="preserve">
          <source>Contract conditions</source>
          <target state="translated">계약 조건</target>
        </trans-unit>
        <trans-unit id="46fabdaf05d562dd3dc6f93899ca48fe6d536e92" translate="yes" xml:space="preserve">
          <source>Contract violation information</source>
          <target state="translated">계약 위반 정보</target>
        </trans-unit>
        <trans-unit id="8122d80ff432cf5d47293c627d2e38856b53e919" translate="yes" xml:space="preserve">
          <source>Contract violations</source>
          <target state="translated">계약 위반</target>
        </trans-unit>
        <trans-unit id="d1d85feb2399987d1a6aa365b70bf95ee446c5cb" translate="yes" xml:space="preserve">
          <source>Contructs new &lt;code&gt;std::basic_filebuf&lt;/code&gt; object.</source>
          <target state="translated">새로운 &lt;code&gt;std::basic_filebuf&lt;/code&gt; 객체를 구성합니다.</target>
        </trans-unit>
        <trans-unit id="c82c01af720636c165de6f269afe83c40e590b97" translate="yes" xml:space="preserve">
          <source>Contructs new recursive directory iterator.</source>
          <target state="translated">새로운 재귀 디렉토리 반복자를 구성합니다.</target>
        </trans-unit>
        <trans-unit id="237eb61b59479c4a977a338f6539a23f4c228ef1" translate="yes" xml:space="preserve">
          <source>Contstructs a new locale object.</source>
          <target state="translated">새로운 로케일 객체를 구성합니다.</target>
        </trans-unit>
        <trans-unit id="c304954d58216205b4c84fc04de9fede7cfd2ac8" translate="yes" xml:space="preserve">
          <source>Convenience Typedefs</source>
          <target state="translated">편의 타입 정의</target>
        </trans-unit>
        <trans-unit id="411ee40f93316df9851d501704ce2e3019d82875" translate="yes" xml:space="preserve">
          <source>Convenience aliases for containers using polymorphic allocators</source>
          <target state="translated">다형성 할당자를 사용하는 컨테이너의 편의 별명</target>
        </trans-unit>
        <trans-unit id="174b5bd72a72dd40712964c6ffcb6ef55f08e4c7" translate="yes" xml:space="preserve">
          <source>Convenience function for locating a time zone in the time zone database. Equivalent to &lt;code&gt;&lt;a href=&quot;tzdb_functions&quot;&gt;std::chrono::get_tzdb&lt;/a&gt;().locate_zone(tz_name)&lt;/code&gt;.</source>
          <target state="translated">표준 시간대 데이터베이스에서 표준 시간대를 찾기위한 편의 기능. 상응하는 &lt;code&gt;&lt;a href=&quot;tzdb_functions&quot;&gt;std::chrono::get_tzdb&lt;/a&gt;().locate_zone(tz_name)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f5309dfc33a0dd2da3bf94a59dc30129d999c646" translate="yes" xml:space="preserve">
          <source>Convenience function for obtaining local time zone from the time zone database. Equivalent to &lt;code&gt;&lt;a href=&quot;tzdb_functions&quot;&gt;std::chrono::get_tzdb&lt;/a&gt;().current_zone()&lt;/code&gt;.</source>
          <target state="translated">시간대 데이터베이스에서 현지 시간대를 가져 오는 편의 기능. 상응하는 &lt;code&gt;&lt;a href=&quot;tzdb_functions&quot;&gt;std::chrono::get_tzdb&lt;/a&gt;().current_zone()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9151f8433f795cb0f0b5b6743aeb7de77ec49f00" translate="yes" xml:space="preserve">
          <source>Conversion</source>
          <target state="translated">Conversion</target>
        </trans-unit>
        <trans-unit id="42430b78831842f6d90e5fbddbe1d87a4a89a22f" translate="yes" xml:space="preserve">
          <source>Conversion function can be a template member function, for example, &lt;a href=&quot;../memory/auto_ptr/operator_auto_ptr&quot;&gt;std::auto_ptr&amp;lt;T&amp;gt;::operator auto_ptr&amp;lt;Y&amp;gt;&lt;/a&gt;. See &lt;a href=&quot;member_template#Conversion_function_templates&quot;&gt;member template&lt;/a&gt; and &lt;a href=&quot;template_argument_deduction#conversion_function_template&quot;&gt;template argument deduction&lt;/a&gt; for applicable special rules.</source>
          <target state="translated">변환 함수는 템플리트 멤버 함수일 수 있습니다 (예 : &lt;a href=&quot;../memory/auto_ptr/operator_auto_ptr&quot;&gt;std :: auto_ptr &amp;lt;T&amp;gt; :: operator auto_ptr &amp;lt;Y&amp;gt;)&lt;/a&gt; . 적용 가능한 특수 규칙 은 &lt;a href=&quot;member_template#Conversion_function_templates&quot;&gt;멤버 템플릿&lt;/a&gt; 및 &lt;a href=&quot;template_argument_deduction#conversion_function_template&quot;&gt;템플릿 인수 공제&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="afa493d37132374965d7edfa6a40099c3dfedfd8" translate="yes" xml:space="preserve">
          <source>Conversion function is declared like a &lt;a href=&quot;member_functions&quot;&gt;non-static member function&lt;/a&gt; or member &lt;a href=&quot;function_template&quot;&gt;function template&lt;/a&gt; with no parameters, no explicit return type, and with the name of the form:</source>
          <target state="translated">변환 함수는 &lt;a href=&quot;member_functions&quot;&gt;비 정적 멤버 함수&lt;/a&gt; 또는 멤버 &lt;a href=&quot;function_template&quot;&gt;함수 템플릿&lt;/a&gt; 처럼 선언 되고 매개 변수가없고 명시적인 반환 형식이 없으며 형식 이름 이 선언 됩니다.</target>
        </trans-unit>
        <trans-unit id="fa5493b2728e8a96a57b44f544655a77e8f54f87" translate="yes" xml:space="preserve">
          <source>Conversion function template</source>
          <target state="translated">변환 함수 템플릿</target>
        </trans-unit>
        <trans-unit id="15c64e46470f6f0600361e63538c76fa1bdab615" translate="yes" xml:space="preserve">
          <source>Conversion function templates</source>
          <target state="translated">변환 함수 템플릿</target>
        </trans-unit>
        <trans-unit id="e5e8c511731411cfd276ecd6da820c2a25b8e387" translate="yes" xml:space="preserve">
          <source>Conversion function to its own (possibly cv-qualified) class (or to a reference to it), to the base of its own class (or to a reference to it), and to the type &lt;code&gt;void&lt;/code&gt; can be defined, but can not be executed as part of the conversion sequence, except, in some cases, through &lt;a href=&quot;virtual&quot;&gt;virtual&lt;/a&gt; dispatch:</source>
          <target state="translated">자신의 클래스 (또는 cv-qualified) 클래스 (또는 클래스에 대한 참조), 자체 클래스의베이스 (또는 클래스에 대한 참조) 및 &lt;code&gt;void&lt;/code&gt; 유형 으로의 변환 함수를 정의 할 수는 있지만 정의 할 수는 없습니다. 경우에 따라 &lt;a href=&quot;virtual&quot;&gt;가상&lt;/a&gt; 디스패치를 통해 변환 시퀀스의 일부로 실행됩니다 .</target>
        </trans-unit>
        <trans-unit id="d5a6bb7039c853d067564a04cdc77ab3ed84ce3b" translate="yes" xml:space="preserve">
          <source>Conversion function. Returns the wrapped value.</source>
          <target state="translated">변환 기능. 랩 된 값을 돌려줍니다.</target>
        </trans-unit>
        <trans-unit id="90307f3639cf8ceeafaf64ead0d71333a16e824f" translate="yes" xml:space="preserve">
          <source>Conversion functions can be inherited and can be &lt;a href=&quot;virtual&quot;&gt;virtual&lt;/a&gt;, but cannot be &lt;a href=&quot;static&quot;&gt;static&lt;/a&gt;. A conversion function in the derived class does not hide a conversion function in the base class unless they are converting to the same type.</source>
          <target state="translated">변환 함수는 상속 될 수 있으며 &lt;a href=&quot;virtual&quot;&gt;가상&lt;/a&gt; 일 수 있지만 &lt;a href=&quot;static&quot;&gt;정적 일&lt;/a&gt; 수는 없습니다 . 파생 클래스의 변환 함수는 동일한 유형으로 변환하지 않는 한 기본 클래스의 변환 함수를 숨기지 않습니다.</target>
        </trans-unit>
        <trans-unit id="bcb1376f7a7fd47eafac0d4c52bc1aede52369a0" translate="yes" xml:space="preserve">
          <source>Conversion in the opposite direction, from a pointer to data member of a derived class to a pointer to data member of an unambiguous non-virtual base class, is allowed with &lt;a href=&quot;static_cast&quot;&gt;static_cast&lt;/a&gt; and &lt;a href=&quot;explicit_cast&quot;&gt;explicit cast&lt;/a&gt;, even if the base class does not have that member (but the most-derived class does, when the pointer is used for access):</source>
          <target state="translated">파생 클래스의 데이터 멤버에 대한 포인터에서 모호하지 않은 비가 상 기본 클래스의 데이터 멤버에 대한 포인터로의 반대 방향으로의 변환은 기본 클래스에 해당 멤버가없는 경우에도 &lt;a href=&quot;static_cast&quot;&gt;static_cast&lt;/a&gt; 및 &lt;a href=&quot;explicit_cast&quot;&gt;explicit cast로&lt;/a&gt; 허용됩니다 ( 그러나 포인터가 액세스에 사용될 때 가장 파생 된 클래스가 수행합니다)</target>
        </trans-unit>
        <trans-unit id="558de313e58a9e578a33916791b676e1b6d63720" translate="yes" xml:space="preserve">
          <source>Conversion in the opposite direction, from a pointer to member function of a derived class to a pointer to member function of an unambiguous non-virtual base class, is allowed with &lt;a href=&quot;static_cast&quot;&gt;static_cast&lt;/a&gt; and &lt;a href=&quot;explicit_cast&quot;&gt;explicit cast&lt;/a&gt;, even if the base class does not have that member function (but the most-derived class does, when the pointer is used for access):</source>
          <target state="translated">파생 클래스의 포인터 함수에서 모호하지 않은 비가 상 기본 클래스의 멤버 함수에 대한 포인터로의 반대 방향으로의 변환은 기본 클래스에 해당 멤버 함수가없는 경우에도 &lt;a href=&quot;static_cast&quot;&gt;static_cast&lt;/a&gt; 및 &lt;a href=&quot;explicit_cast&quot;&gt;explicit cast로&lt;/a&gt; 허용됩니다. (그러나 포인터가 액세스에 사용될 때 가장 많이 파생 된 클래스가 수행합니다) :</target>
        </trans-unit>
        <trans-unit id="6ee3265bb7bde6f0176e4301a1b15d8d13503f80" translate="yes" xml:space="preserve">
          <source>Conversion occurs in four stages.</source>
          <target state="translated">전환은 4 단계로 이루어집니다.</target>
        </trans-unit>
        <trans-unit id="14d1184996077fa1be3586abf7c8a49ba9fd0a3a" translate="yes" xml:space="preserve">
          <source>Conversion occurs in three stages.</source>
          <target state="translated">전환은 3 단계로 이루어집니다.</target>
        </trans-unit>
        <trans-unit id="b08eaadf77cfdba7944ddcaf69eee5a983b74af3" translate="yes" xml:space="preserve">
          <source>Conversions</source>
          <target state="translated">Conversions</target>
        </trans-unit>
        <trans-unit id="cb275385e2aed17e5f29f8992c5c81317fb98e55" translate="yes" xml:space="preserve">
          <source>Conversions and classification</source>
          <target state="translated">전환 및 분류</target>
        </trans-unit>
        <trans-unit id="b33060b95c6156e56397175f292d4d45c6d6b5b4" translate="yes" xml:space="preserve">
          <source>Conversions to numeric formats</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58fd78a2cacb7d04e836c75e57ca9a3cbf7499d6" translate="yes" xml:space="preserve">
          <source>Converted character or &lt;code&gt;ch&lt;/code&gt; if no uppercase version is defined by the current C locale.</source>
          <target state="translated">현재 C 로케일에 의해 대문자 버전이 정의되지 않은 경우 문자 또는 &lt;code&gt;ch&lt;/code&gt; 로 변환 됩니다.</target>
        </trans-unit>
        <trans-unit id="909603879806851c1363a337983f045ba405e262" translate="yes" xml:space="preserve">
          <source>Converted constant expression</source>
          <target state="translated">변환 된 상수 표현식</target>
        </trans-unit>
        <trans-unit id="b93f96b1a876c5bf707641f6a505555772deef19" translate="yes" xml:space="preserve">
          <source>ConvertibleTo</source>
          <target state="translated">ConvertibleTo</target>
        </trans-unit>
        <trans-unit id="d27eee3921930a4419ba953d10ca4f2e802d22ae" translate="yes" xml:space="preserve">
          <source>Converting constructor</source>
          <target state="translated">생성자 변환</target>
        </trans-unit>
        <trans-unit id="79ab3f3e5f278871b40e03bdc45c0de30e832cdd" translate="yes" xml:space="preserve">
          <source>Converting to &lt;code&gt;sys_days&lt;/code&gt; and back can be used to normalize a &lt;code&gt;year_month_day&lt;/code&gt; that contains an invalid day but a valid year and month:</source>
          <target state="translated">&lt;code&gt;sys_days&lt;/code&gt; 로 변환 하고 다시 변환 하면 유효하지 않은 연도 및 연도를 포함하는 &lt;code&gt;year_month_day&lt;/code&gt; 를 정규화하는 데 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="366d806f4952dc65a49a47b732378e2540390ebe" translate="yes" xml:space="preserve">
          <source>Converts &lt;code&gt;*this&lt;/code&gt; to a &lt;code&gt;&lt;a href=&quot;../time_point&quot;&gt;std::chrono::time_point&lt;/a&gt;&lt;/code&gt; representing the same date as this &lt;code&gt;year_month_day&lt;/code&gt;.</source>
          <target state="translated">변환은 &lt;code&gt;*this&lt;/code&gt; A를 &lt;code&gt;&lt;a href=&quot;../time_point&quot;&gt;std::chrono::time_point&lt;/a&gt;&lt;/code&gt; 이 같은 날짜 나타내는 &lt;code&gt;year_month_day&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="3d7ec5c1240a309319ebb68536d1266553022229" translate="yes" xml:space="preserve">
          <source>Converts &lt;code&gt;*this&lt;/code&gt; to a &lt;code&gt;&lt;a href=&quot;../time_point&quot;&gt;std::chrono::time_point&lt;/a&gt;&lt;/code&gt; representing the same date as this &lt;code&gt;year_month_day_last&lt;/code&gt;. This is equivalent to composing a &lt;code&gt;year_month_day&lt;/code&gt; from &lt;code&gt;year()&lt;/code&gt;, &lt;code&gt;month()&lt;/code&gt; and &lt;code&gt;day()&lt;/code&gt; and converting that &lt;code&gt;year_month_day&lt;/code&gt; to the destination type.</source>
          <target state="translated">변환은 &lt;code&gt;*this&lt;/code&gt; A를 &lt;code&gt;&lt;a href=&quot;../time_point&quot;&gt;std::chrono::time_point&lt;/a&gt;&lt;/code&gt; 이 같은 날짜 나타내는 &lt;code&gt;year_month_day_last&lt;/code&gt; 을 . 이것은 구성에 해당 &lt;code&gt;year_month_day&lt;/code&gt; 에서 &lt;code&gt;year()&lt;/code&gt; , &lt;code&gt;month()&lt;/code&gt; 와 &lt;code&gt;day()&lt;/code&gt; 하고 변환 &lt;code&gt;year_month_day&lt;/code&gt; 을 대상 유형으로.</target>
        </trans-unit>
        <trans-unit id="19a1c194c5f03304ea6badd32c78fa4ec6a545c0" translate="yes" xml:space="preserve">
          <source>Converts &lt;code&gt;*this&lt;/code&gt; to a &lt;code&gt;&lt;a href=&quot;../time_point&quot;&gt;std::chrono::time_point&lt;/a&gt;&lt;/code&gt; representing the same date as this &lt;code&gt;year_month_weekday&lt;/code&gt;.</source>
          <target state="translated">변환은 &lt;code&gt;*this&lt;/code&gt; A를 &lt;code&gt;&lt;a href=&quot;../time_point&quot;&gt;std::chrono::time_point&lt;/a&gt;&lt;/code&gt; 이 같은 날짜 나타내는 &lt;code&gt;year_month_weekday&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="d3cbba04d26eae13f557bf99e5709c487460b57b" translate="yes" xml:space="preserve">
          <source>Converts &lt;code&gt;*this&lt;/code&gt; to a &lt;code&gt;&lt;a href=&quot;../time_point&quot;&gt;std::chrono::time_point&lt;/a&gt;&lt;/code&gt; representing the same date as this &lt;code&gt;year_month_weekday_last&lt;/code&gt;.</source>
          <target state="translated">변환은 &lt;code&gt;*this&lt;/code&gt; A를 &lt;code&gt;&lt;a href=&quot;../time_point&quot;&gt;std::chrono::time_point&lt;/a&gt;&lt;/code&gt; 이 같은 날짜 나타내는 &lt;code&gt;year_month_weekday_last&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="18f743af94bbf728030f5f799648a85605fa614e" translate="yes" xml:space="preserve">
          <source>Converts &lt;code&gt;*this&lt;/code&gt; to an &lt;code&gt;auto_ptr&lt;/code&gt; for a different type &lt;code&gt;Y&lt;/code&gt;.</source>
          <target state="translated">다른 유형 &lt;code&gt;Y&lt;/code&gt; 에 대해 &lt;code&gt;*this&lt;/code&gt; 를 &lt;code&gt;auto_ptr&lt;/code&gt; 로 변환 합니다.</target>
        </trans-unit>
        <trans-unit id="42dd34264d61add656db8b304cd57a8ce645c7bd" translate="yes" xml:space="preserve">
          <source>Converts &lt;code&gt;ch&lt;/code&gt; to &lt;code&gt;unsigned char&lt;/code&gt; and locates the first occurrence of that value in the initial &lt;code&gt;count&lt;/code&gt; characters (each interpreted as &lt;code&gt;unsigned char&lt;/code&gt;) of the object pointed to by &lt;code&gt;ptr&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ch&lt;/code&gt; 를 &lt;code&gt;unsigned char&lt;/code&gt; 변환 하고 &lt;code&gt;ptr&lt;/code&gt; 이 가리키는 객체 의 초기 &lt;code&gt;count&lt;/code&gt; 문자 (각 &lt;code&gt;unsigned char&lt;/code&gt; 로 해석 됨 ) 에서 해당 값의 첫 항목을 찾습니다 .</target>
        </trans-unit>
        <trans-unit id="4583bce5c0b17e5491498e9c2e99f65848488588" translate="yes" xml:space="preserve">
          <source>Converts &lt;code&gt;t&lt;/code&gt; to a &lt;code&gt;&lt;a href=&quot;../c/time_t&quot;&gt;std::time_t&lt;/a&gt;&lt;/code&gt; type.</source>
          <target state="translated">&lt;code&gt;t&lt;/code&gt; 를 &lt;code&gt;&lt;a href=&quot;../c/time_t&quot;&gt;std::time_t&lt;/a&gt;&lt;/code&gt; 유형으로 변환 합니다.</target>
        </trans-unit>
        <trans-unit id="5e387887e13f63fd18fc52c453b8e33a15be0f66" translate="yes" xml:space="preserve">
          <source>Converts &lt;code&gt;t&lt;/code&gt; to a time point type, using the coarser precision of the two types.</source>
          <target state="translated">두 유형의 거친 정밀도를 사용하여 &lt;code&gt;t&lt;/code&gt; 를 시점 유형으로 변환 합니다.</target>
        </trans-unit>
        <trans-unit id="62d8ead96e4f4feabb840f7c5ab288403c5d3004" translate="yes" xml:space="preserve">
          <source>Converts &lt;code&gt;value&lt;/code&gt; into a character string by successively filling the range &lt;code&gt;[first, last)&lt;/code&gt;, where &lt;code&gt;[first, last)&lt;/code&gt; is required to be a valid range.</source>
          <target state="translated">&lt;code&gt;[first, last)&lt;/code&gt; 범위를 연속적으로 채워서 &lt;code&gt;value&lt;/code&gt; 을 문자열로 변환 합니다 . 여기서 &lt;code&gt;[first, last)&lt;/code&gt; 는 유효한 범위 여야합니다.</target>
        </trans-unit>
        <trans-unit id="73dce4704f2761eca1c1d8a16d14a3c408f601b1" translate="yes" xml:space="preserve">
          <source>Converts a &lt;code&gt;&lt;a href=&quot;../duration&quot;&gt;std::chrono::duration&lt;/a&gt;&lt;/code&gt; to a duration of different type &lt;code&gt;ToDuration&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../duration&quot;&gt;std::chrono::duration&lt;/a&gt;&lt;/code&gt; 을 다른 유형의 &lt;code&gt;ToDuration&lt;/code&gt; 기간으로 변환합니다 .</target>
        </trans-unit>
        <trans-unit id="d685dca8b45f97d9efb92021e4477102127539e8" translate="yes" xml:space="preserve">
          <source>Converts a &lt;code&gt;&lt;a href=&quot;../time_point&quot;&gt;std::chrono::time_point&lt;/a&gt;&lt;/code&gt; from one duration to another.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../time_point&quot;&gt;std::chrono::time_point&lt;/a&gt;&lt;/code&gt; 를 한 기간에서 다른 기간으로 변환합니다 .</target>
        </trans-unit>
        <trans-unit id="2356f6ec767a4978cf33d5ae6cc190eaa82d86c0" translate="yes" xml:space="preserve">
          <source>Converts a &lt;code&gt;sys_time&lt;/code&gt;&lt;code&gt;t&lt;/code&gt; to a &lt;code&gt;utc_time&lt;/code&gt;&lt;code&gt;u&lt;/code&gt; that represents the same point in time.</source>
          <target state="translated">&lt;code&gt;sys_time&lt;/code&gt; &lt;code&gt;t&lt;/code&gt; 를 동일한 시점을 나타내는 &lt;code&gt;utc_time&lt;/code&gt; &lt;code&gt;u&lt;/code&gt; 로 변환합니다 .</target>
        </trans-unit>
        <trans-unit id="0af2f2535ada82ccfdb9a43459fd3586fa86531a" translate="yes" xml:space="preserve">
          <source>Converts a &lt;code&gt;utc_time&lt;/code&gt;&lt;code&gt;t&lt;/code&gt; to a &lt;code&gt;sys_time&lt;/code&gt; representing the same point in time (if possible).</source>
          <target state="translated">변환 &lt;code&gt;utc_time&lt;/code&gt; &lt;code&gt;t&lt;/code&gt; 에 &lt;code&gt;sys_time&lt;/code&gt; 동일한 시점을 (가능한 경우)를 나타내는.</target>
        </trans-unit>
        <trans-unit id="fdc66d8c128923660cb9cd2069982e81e3150969" translate="yes" xml:space="preserve">
          <source>Converts a UTF-32 character to its narrow multibyte representation.</source>
          <target state="translated">UTF-32 문자를 좁은 멀티 바이트 표현으로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="34b159447c87503aee9e696d45604a8d1a4040ca" translate="yes" xml:space="preserve">
          <source>Converts a character &lt;code&gt;c&lt;/code&gt; to its equivalent in the current locale. The result is converted from &lt;code&gt;char&lt;/code&gt; to character type used within the stream if needed.</source>
          <target state="translated">문자 &lt;code&gt;c&lt;/code&gt; 를 현재 로케일에서 동등한 문자로 변환합니다 . 필요한 경우 결과는 스트림에서 사용 된 &lt;code&gt;char&lt;/code&gt; 에서 문자 유형으로 변환됩니다 .</target>
        </trans-unit>
        <trans-unit id="1a8e04512e6fcef69bdffcf85af3a857d5940754" translate="yes" xml:space="preserve">
          <source>Converts a character array literal to &lt;code&gt;basic_string&lt;/code&gt;</source>
          <target state="translated">문자형 배열 리터럴을 &lt;code&gt;basic_string&lt;/code&gt; 으로 변환</target>
        </trans-unit>
        <trans-unit id="befeae984e71abfb35ab6a099b935c38bca5eb41" translate="yes" xml:space="preserve">
          <source>Converts a current locale-specific character &lt;code&gt;c&lt;/code&gt; to its standard equivalent. The result is converted from &lt;code&gt;char_type&lt;/code&gt; to &lt;code&gt;char&lt;/code&gt; if needed. If no conversion can be performed, the function returns &lt;code&gt;dfault&lt;/code&gt;.</source>
          <target state="translated">현재 로케일 특정 문자 &lt;code&gt;c&lt;/code&gt; 를 해당하는 표준 문자로 변환합니다 . 필요한 경우 결과가 &lt;code&gt;char_type&lt;/code&gt; 에서 &lt;code&gt;char&lt;/code&gt; 로 변환됩니다 . 변환을 수행 할 수 없으면이 함수는 &lt;code&gt;dfault&lt;/code&gt; 를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="2073482209f762bb8630efa107a0ce85a19f3169" translate="yes" xml:space="preserve">
          <source>Converts a multibyte character string from the array whose first element is pointed to by &lt;code&gt;src&lt;/code&gt; to its wide character representation. Converted characters are stored in the successive elements of the array pointed to by &lt;code&gt;dst&lt;/code&gt;. No more than &lt;code&gt;len&lt;/code&gt; wide characters are written to the destination array.</source>
          <target state="translated">첫 번째 요소가 &lt;code&gt;src&lt;/code&gt; 로 가리키는 배열에서 멀티 바이트 문자 스트링을 넓은 문자 표현으로 변환합니다. 변환 된 문자는 &lt;code&gt;dst&lt;/code&gt; 가 가리키는 배열의 연속 요소에 저장됩니다 . &lt;code&gt;len&lt;/code&gt; 배열 이상의 문자는 대상 배열에 기록 되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="69cac274e6b28bb335c35746d6cf8b2fc73bbb4f" translate="yes" xml:space="preserve">
          <source>Converts a multibyte character whose first byte is pointed to by &lt;code&gt;s&lt;/code&gt; to a wide character, written to &lt;code&gt;*pwc&lt;/code&gt; if &lt;code&gt;pwc&lt;/code&gt; is not null.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d43ea06c3c03e254b36a28176b52ca3ae7d21407" translate="yes" xml:space="preserve">
          <source>Converts a narrow multibyte character to UTF-16 character representation.</source>
          <target state="translated">좁은 멀티 바이트 문자를 UTF-16 문자 표현으로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="40cb44b6ea10fe84a0e33fc3ff5bb2312ece67d2" translate="yes" xml:space="preserve">
          <source>Converts a narrow multibyte character to UTF-16 encoding</source>
          <target state="translated">좁은 멀티 바이트 문자를 UTF-16 인코딩으로 변환</target>
        </trans-unit>
        <trans-unit id="274ed14736e12244fc27b67430bbde922d003ff1" translate="yes" xml:space="preserve">
          <source>Converts a narrow multibyte character to UTF-8 encoding.</source>
          <target state="translated">좁은 멀티 바이트 문자를 UTF-8 인코딩으로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="7ba22e3db9f2c2187e7ad917443c4e90facd2cec" translate="yes" xml:space="preserve">
          <source>Converts a narrow multibyte character to a wide character.</source>
          <target state="translated">좁은 멀티 바이트 문자를 넓은 문자로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="e38614ad52ee1f7506a00971933672db75236ccc" translate="yes" xml:space="preserve">
          <source>Converts a narrow multibyte character to its UTF-32 character representation.</source>
          <target state="translated">좁은 멀티 바이트 문자를 UTF-32 문자 표현으로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="cb77b0c5bcc52e02e8380879fdf49e527bdca945" translate="yes" xml:space="preserve">
          <source>Converts a null-terminated multibyte character sequence, which begins in the conversion state described by &lt;code&gt;*ps&lt;/code&gt;, from the array whose first element is pointed to by &lt;code&gt;*src&lt;/code&gt; to its wide character representation. If &lt;code&gt;dst&lt;/code&gt; is not null, converted characters are stored in the successive elements of the wchar_t array pointed to by &lt;code&gt;dst&lt;/code&gt;. No more than &lt;code&gt;len&lt;/code&gt; wide characters are written to the destination array.</source>
          <target state="translated">&lt;code&gt;*ps&lt;/code&gt; 로 설명 된 변환 상태에서 시작되는 널 종료 멀티 바이트 문자 시퀀스 를 &lt;code&gt;*src&lt;/code&gt; 가 가리키는 첫 번째 요소가있는 배열에서 넓은 문자 표시로 변환합니다. 경우 &lt;code&gt;dst&lt;/code&gt; null는 아니고, 변환 된 문자가 가리키는 wchar_t를 배열의 연속 요소에 저장됩니다 &lt;code&gt;dst&lt;/code&gt; . &lt;code&gt;len&lt;/code&gt; 배열 이상의 문자는 대상 배열에 기록 되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="99c99aaead2662899065330c7af2604e372e218b" translate="yes" xml:space="preserve">
          <source>Converts a numeric value to &lt;code&gt;&lt;a href=&quot;../basic_string&quot;&gt;std::string&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">숫자 값을 &lt;code&gt;&lt;a href=&quot;../basic_string&quot;&gt;std::string&lt;/a&gt;&lt;/code&gt; 변환 합니다 .</target>
        </trans-unit>
        <trans-unit id="1ce192a1ea9a74303ba07f0ffff279e28eba181f" translate="yes" xml:space="preserve">
          <source>Converts a numeric value to &lt;code&gt;&lt;a href=&quot;../basic_string&quot;&gt;std::wstring&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">숫자 값을 &lt;code&gt;&lt;a href=&quot;../basic_string&quot;&gt;std::wstring&lt;/a&gt;&lt;/code&gt; 변환합니다 .</target>
        </trans-unit>
        <trans-unit id="bf758257b5242ca19795c44ccc9a8a77e95f0319" translate="yes" xml:space="preserve">
          <source>Converts a sequence of wide characters from the array whose first element is pointed to by &lt;code&gt;*src&lt;/code&gt; to its narrow multibyte representation that begins in the conversion state described by &lt;code&gt;*ps&lt;/code&gt;. If &lt;code&gt;dst&lt;/code&gt; is not null, converted characters are stored in the successive elements of the char array pointed to by &lt;code&gt;dst&lt;/code&gt;. No more than &lt;code&gt;len&lt;/code&gt; bytes are written to the destination array.</source>
          <target state="translated">첫 번째 요소가 &lt;code&gt;*src&lt;/code&gt; 로 가리키는 배열에서 와이드 문자 시퀀스를 &lt;code&gt;*ps&lt;/code&gt; 로 설명 된 변환 상태에서 시작하는 좁은 멀티 바이트 표현으로 변환 합니다. 경우 &lt;code&gt;dst&lt;/code&gt; null는 아니고, 변환 된 문자가 가리키는 char 배열의 연속 요소에 저장됩니다 &lt;code&gt;dst&lt;/code&gt; . 대상 배열에 &lt;code&gt;len&lt;/code&gt; 바이트 만 쓰지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="cce1b78ec5f0388e268eeb4d264736095dfb0e97" translate="yes" xml:space="preserve">
          <source>Converts a sequence of wide characters from the array whose first element is pointed to by &lt;code&gt;src&lt;/code&gt; to its narrow multibyte representation that begins in the initial shift state. Converted characters are stored in the successive elements of the char array pointed to by &lt;code&gt;dst&lt;/code&gt;. No more than &lt;code&gt;len&lt;/code&gt; bytes are written to the destination array.</source>
          <target state="translated">첫 번째 요소가 &lt;code&gt;src&lt;/code&gt; 로 가리키는 배열에서 와이드 문자 시퀀스를 초기 시프트 상태에서 시작하는 좁은 멀티 바이트 표현으로 변환합니다. 변환 된 문자는 &lt;code&gt;dst&lt;/code&gt; 가 가리키는 char 배열의 연속 요소에 저장됩니다 . 대상 배열에 &lt;code&gt;len&lt;/code&gt; 바이트 만 쓰지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="15de5a9c7db447bde4908f37f160de5839674a1b" translate="yes" xml:space="preserve">
          <source>Converts a single code point from UTF-8 to a narrow multibyte character representation.</source>
          <target state="translated">단일 코드 포인트를 UTF-8에서 좁은 멀티 바이트 문자 표현으로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="42b2fcd615b84c6c28723bbfb0bb44870efc6280" translate="yes" xml:space="preserve">
          <source>Converts a single code point from variable-length 16-bit character representation (typically, UTF-16) to a narrow multibyte character representation.</source>
          <target state="translated">단일 코드 포인트를 가변 길이의 16 비트 문자 표현 (일반적으로 UTF-16)에서 좁은 멀티 바이트 문자 표현으로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="275dad8b9c99e7242f1d05e88be52b35f17bd2aa" translate="yes" xml:space="preserve">
          <source>Converts a value of &lt;code&gt;char_type&lt;/code&gt; to &lt;code&gt;int_type&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;char_type&lt;/code&gt; 값 을 &lt;code&gt;int_type&lt;/code&gt; 으로 변환합니다 .</target>
        </trans-unit>
        <trans-unit id="1fa738f893a3d99670a2bc2a911547e70bbd1a77" translate="yes" xml:space="preserve">
          <source>Converts a value of &lt;code&gt;int_type&lt;/code&gt; to &lt;code&gt;char_type&lt;/code&gt;. If there are no equivalent value (such as when &lt;code&gt;c&lt;/code&gt; is a copy of the eof value), the results are unspecified.</source>
          <target state="translated">&lt;code&gt;int_type&lt;/code&gt; 값 을 &lt;code&gt;char_type&lt;/code&gt; 으로 변환합니다 . 동등한 값이없는 경우 (예 : &lt;code&gt;c&lt;/code&gt; 가 eof 값의 사본 인 경우) 결과는 지정되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="ecf25e81738641e50a518747e96155cde43896c2" translate="yes" xml:space="preserve">
          <source>Converts a wide character &lt;code&gt;wc&lt;/code&gt; to multibyte encoding and stores it (including any shift sequences) in the char array whose first element is pointed to by &lt;code&gt;s&lt;/code&gt;. No more than &lt;code&gt;MB_CUR_MAX&lt;/code&gt; characters are stored.</source>
          <target state="translated">와이드 문자 &lt;code&gt;wc&lt;/code&gt; 를 멀티 바이트 인코딩으로 변환하고 첫 번째 요소가 &lt;code&gt;s&lt;/code&gt; 로 가리키는 char 배열에 저장합니다 (모든 시프트 시퀀스 포함) . &lt;code&gt;MB_CUR_MAX&lt;/code&gt; 자를 초과 하여 저장 하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="712188da508186849026fb3c8bd4c53083239bd2" translate="yes" xml:space="preserve">
          <source>Converts a wide character to its narrow multibyte representation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6d500d3c156d0e4f0c78ae8488f3afc41e9d1c8" translate="yes" xml:space="preserve">
          <source>Converts all directory separators in the generic-format view of the path to the preferred directory separator.</source>
          <target state="translated">경로의 일반 형식보기에서 모든 디렉토리 분리자를 선호하는 디렉토리 분리 자로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="b63a93efb00ea173cdbb21d674a451973ca3552c" translate="yes" xml:space="preserve">
          <source>Converts any type &lt;code&gt;T&lt;/code&gt; to a reference type, making it possible to use member functions in &lt;code&gt;decltype&lt;/code&gt; expressions without the need to go through constructors.</source>
          <target state="translated">모든 유형 &lt;code&gt;T&lt;/code&gt; 를 참조 유형으로 변환 하여 생성자를 거치지 않고도 &lt;code&gt;decltype&lt;/code&gt; 표현식 에서 멤버 함수를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="6803515298b61ab6e0f57e03dc9f4c7d0aa1dfb6" translate="yes" xml:space="preserve">
          <source>Converts between types by reinterpreting the underlying bit pattern.</source>
          <target state="translated">기본 비트 패턴을 재 해석하여 유형을 변환합니다.</target>
        </trans-unit>
        <trans-unit id="09f00ae9fc69409d6700a3448014608c315b50e4" translate="yes" xml:space="preserve">
          <source>Converts between types using a combination of explicit and implicit conversions.</source>
          <target state="translated">명시 적 변환과 암시 적 변환의 조합을 사용하여 유형간에 변환합니다.</target>
        </trans-unit>
        <trans-unit id="c0b46d21dd8c86bf67cd86dd31f459be301620c7" translate="yes" xml:space="preserve">
          <source>Converts between types using a combination of implicit and user-defined conversions.</source>
          <target state="translated">암시 적 변환과 사용자 정의 변환을 조합하여 유형을 변환합니다.</target>
        </trans-unit>
        <trans-unit id="ff0416706d6743788f48fc41be9eebe7544cdb05" translate="yes" xml:space="preserve">
          <source>Converts between types with different cv-qualification.</source>
          <target state="translated">cv-qualification이 다른 유형간에 변환합니다.</target>
        </trans-unit>
        <trans-unit id="6a18a97bc56bc22106ea23084c8fb3a9bf94f5bc" translate="yes" xml:space="preserve">
          <source>Converts given calendar time &lt;code&gt;&lt;a href=&quot;tm&quot;&gt;std::tm&lt;/a&gt;&lt;/code&gt; to a textual representation of the following fixed 25-character form: &lt;code&gt;Www Mmm dd hh:mm:ss yyyy\n&lt;/code&gt;.</source>
          <target state="translated">주어진 달력 시간 &lt;code&gt;&lt;a href=&quot;tm&quot;&gt;std::tm&lt;/a&gt;&lt;/code&gt; 을 다음 고정 25 자 양식의 텍스트 표현으로 변환 합니다. &lt;code&gt;Www Mmm dd hh:mm:ss yyyy\n&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="48932f36f3343e1017d40c4c407b040a1e8e9521" translate="yes" xml:space="preserve">
          <source>Converts given time since epoch as &lt;code&gt;&lt;a href=&quot;time_t&quot;&gt;std::time_t&lt;/a&gt;&lt;/code&gt; value into calendar time, expressed in Coordinated Universal Time (UTC).</source>
          <target state="translated">epoch 이후의 특정 시간을 &lt;code&gt;&lt;a href=&quot;time_t&quot;&gt;std::time_t&lt;/a&gt;&lt;/code&gt; 값으로 UTC (협정 세계시)로 표시 한 달력 시간으로 변환 합니다.</target>
        </trans-unit>
        <trans-unit id="f527dd6ac644101c92e9993dabbe90c3f5b5954c" translate="yes" xml:space="preserve">
          <source>Converts given time since epoch as &lt;code&gt;&lt;a href=&quot;time_t&quot;&gt;std::time_t&lt;/a&gt;&lt;/code&gt; value into calendar time, expressed in local time.</source>
          <target state="translated">epoch 이후의 특정 시간을 &lt;code&gt;&lt;a href=&quot;time_t&quot;&gt;std::time_t&lt;/a&gt;&lt;/code&gt; 값으로 현지 시간으로 표현 된 달력 시간으로 변환 합니다.</target>
        </trans-unit>
        <trans-unit id="8781be8f28e4be977b8cf9b1bf83a5b1327360d1" translate="yes" xml:space="preserve">
          <source>Converts given time since epoch to a calendar local time and then to a textual representation, as if by calling &lt;code&gt;&lt;a href=&quot;asctime&quot;&gt;std::asctime&lt;/a&gt;(&lt;a href=&quot;localtime&quot;&gt;std::localtime&lt;/a&gt;(time))&lt;/code&gt;. The resulting string has the following format:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;asctime&quot;&gt;std::asctime&lt;/a&gt;(&lt;a href=&quot;localtime&quot;&gt;std::localtime&lt;/a&gt;(time))&lt;/code&gt; 을 호출하는 것처럼 epoch 이후의 특정 시간을 달력 현지 시간으로 변환 한 다음 텍스트 표현으로 변환합니다 . 결과 문자열의 형식은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="d4ed2d206097f7f000b5237bb3f9da69c49ac8b5" translate="yes" xml:space="preserve">
          <source>Converts local calendar time to a time since epoch as a &lt;code&gt;time_t&lt;/code&gt; object. &lt;code&gt;time-&amp;gt;tm_wday&lt;/code&gt; and &lt;code&gt;time-&amp;gt;tm_yday&lt;/code&gt; are ignored. The values in &lt;code&gt;time&lt;/code&gt; are permitted to be outside their normal ranges.</source>
          <target state="translated">현지 달력 시간을 에포크 이후 시간으로 &lt;code&gt;time_t&lt;/code&gt; 객체 로 변환 합니다. &lt;code&gt;time-&amp;gt;tm_wday&lt;/code&gt; 및 &lt;code&gt;time-&amp;gt;tm_yday&lt;/code&gt; 는 무시됩니다. &lt;code&gt;time&lt;/code&gt; 값은 정상 범위를 벗어날 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9416a86bc895c1dedb51b169f5933c69fc12129a" translate="yes" xml:space="preserve">
          <source>Converts the</source>
          <target state="translated">변환</target>
        </trans-unit>
        <trans-unit id="437f95417276fc48634d6c1bdb51ed5f25e09ad5" translate="yes" xml:space="preserve">
          <source>Converts the &lt;code&gt;gps_time&lt;/code&gt;&lt;code&gt;t&lt;/code&gt; to a &lt;code&gt;utc_time&lt;/code&gt; representing the same point in time.</source>
          <target state="translated">회심 &lt;code&gt;gps_time&lt;/code&gt; 의 &lt;code&gt;t&lt;/code&gt; 을 A와 &lt;code&gt;utc_time&lt;/code&gt; 동일한 시점을 나타내는.</target>
        </trans-unit>
        <trans-unit id="4b4fa2b1e456256888b4baf1983855699f2450c7" translate="yes" xml:space="preserve">
          <source>Converts the &lt;code&gt;local_time&lt;/code&gt;&lt;code&gt;tp&lt;/code&gt; in this time zone to the corresponding &lt;code&gt;sys_time&lt;/code&gt;.</source>
          <target state="translated">개종자 &lt;code&gt;local_time&lt;/code&gt; &lt;code&gt;tp&lt;/code&gt; 대응이 시간대 &lt;code&gt;sys_time&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9f62637771070dc1d3d78a843e244598762fd04b" translate="yes" xml:space="preserve">
          <source>Converts the &lt;code&gt;sys_time&lt;/code&gt;&lt;code&gt;tp&lt;/code&gt; to the corresponding &lt;code&gt;local_time&lt;/code&gt; in this time zone.</source>
          <target state="translated">이 시간대 의 &lt;code&gt;sys_time&lt;/code&gt; &lt;code&gt;tp&lt;/code&gt; 를 해당 &lt;code&gt;local_time&lt;/code&gt; 으로 변환합니다 .</target>
        </trans-unit>
        <trans-unit id="44026a872e1fa8ed25e7861971756f03f363a5de" translate="yes" xml:space="preserve">
          <source>Converts the &lt;code&gt;tai_time&lt;/code&gt;&lt;code&gt;t&lt;/code&gt; to a &lt;code&gt;utc_time&lt;/code&gt; representing the same point in time.</source>
          <target state="translated">회심 &lt;code&gt;tai_time&lt;/code&gt; 의 &lt;code&gt;t&lt;/code&gt; 을 A와 &lt;code&gt;utc_time&lt;/code&gt; 동일한 시점을 나타내는.</target>
        </trans-unit>
        <trans-unit id="bbdf0fb3bf13f61bc5d16f254e7979a549231c03" translate="yes" xml:space="preserve">
          <source>Converts the &lt;code&gt;utc_time&lt;/code&gt;&lt;code&gt;t&lt;/code&gt; to a &lt;code&gt;gps_time&lt;/code&gt; representing the same point in time.</source>
          <target state="translated">회심 &lt;code&gt;utc_time&lt;/code&gt; &lt;code&gt;t&lt;/code&gt; 을 A와 &lt;code&gt;gps_time&lt;/code&gt; 동일한 시점을 나타내는.</target>
        </trans-unit>
        <trans-unit id="3d05d72699462ec2c626d117154190982e5f5a3a" translate="yes" xml:space="preserve">
          <source>Converts the &lt;code&gt;utc_time&lt;/code&gt;&lt;code&gt;t&lt;/code&gt; to a &lt;code&gt;tai_time&lt;/code&gt; representing the same point in time.</source>
          <target state="translated">회심 &lt;code&gt;utc_time&lt;/code&gt; &lt;code&gt;t&lt;/code&gt; 을 A와 &lt;code&gt;tai_time&lt;/code&gt; 동일한 시점을 나타내는.</target>
        </trans-unit>
        <trans-unit id="ee17b517c070f6586cda8064237228d5b20219ce" translate="yes" xml:space="preserve">
          <source>Converts the argument &lt;code&gt;&lt;a href=&quot;time_point&quot;&gt;std::chrono::time_point&lt;/a&gt;&lt;/code&gt; to the destination clock.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;time_point&quot;&gt;std::chrono::time_point&lt;/a&gt;&lt;/code&gt; 인수 를 대상 클록으로 변환합니다 .</target>
        </trans-unit>
        <trans-unit id="be98577fda7bce2b55fe0fff28aef56f89e54dae" translate="yes" xml:space="preserve">
          <source>Converts the calendar date and time stored in the &lt;code&gt;&lt;a href=&quot;../../chrono/c/tm&quot;&gt;std::tm&lt;/a&gt;&lt;/code&gt; object pointed to by &lt;code&gt;t&lt;/code&gt; into a character string, according to the format string &lt;code&gt;[fmtbeg, fmtend)&lt;/code&gt;. The format string is the same as used by &lt;code&gt;std::srtftime&lt;/code&gt;, but each format specifier is processed by an individual call to &lt;code&gt;do_put()&lt;/code&gt;, which can be customized by extending this facet.</source>
          <target state="translated">&lt;code&gt;t&lt;/code&gt; 가 가리키는 &lt;code&gt;&lt;a href=&quot;../../chrono/c/tm&quot;&gt;std::tm&lt;/a&gt;&lt;/code&gt; 객체에 저장된 달력 날짜 및 시간을 문자열 &lt;code&gt;[fmtbeg, fmtend)&lt;/code&gt; 형식에 따라 문자열로 변환합니다 . 형식 문자열은 &lt;code&gt;std::srtftime&lt;/code&gt; 사용 된 것과 동일 하지만 각 형식 지정자는 &lt;code&gt;do_put()&lt;/code&gt; 개별 호출에 의해 처리 되며이 패싯을 확장하여 사용자 정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1a9d90cef73a0917a05f7e2d9df37adf53926589" translate="yes" xml:space="preserve">
          <source>Converts the character &lt;code&gt;ch&lt;/code&gt; to lowercase if possible, using the conversion rules specified by the given locale's &lt;code&gt;&lt;a href=&quot;ctype&quot;&gt;std::ctype&lt;/a&gt;&lt;/code&gt; facet.</source>
          <target state="translated">주어진 로케일의 &lt;code&gt;&lt;a href=&quot;ctype&quot;&gt;std::ctype&lt;/a&gt;&lt;/code&gt; facet에 의해 지정된 변환 규칙을 사용하여 가능한 경우 문자 &lt;code&gt;ch&lt;/code&gt; 를 소문자로 변환합니다 .</target>
        </trans-unit>
        <trans-unit id="338a9c2cb8db45bf7287c3b816ffe49a413bec37" translate="yes" xml:space="preserve">
          <source>Converts the character &lt;code&gt;ch&lt;/code&gt; to uppercase if possible, using the conversion rules specified by the given locale's &lt;code&gt;&lt;a href=&quot;ctype&quot;&gt;std::ctype&lt;/a&gt;&lt;/code&gt; facet.</source>
          <target state="translated">주어진 로케일의 &lt;code&gt;&lt;a href=&quot;ctype&quot;&gt;std::ctype&lt;/a&gt;&lt;/code&gt; facet에 의해 지정된 변환 규칙을 사용하여 가능한 경우 문자 &lt;code&gt;ch&lt;/code&gt; 를 대문자로 변환합니다 .</target>
        </trans-unit>
        <trans-unit id="8cead054149f5aae47f396be7949b61349fc2ed6" translate="yes" xml:space="preserve">
          <source>Converts the character sequence designated by the iterator range &lt;code&gt;[F1, F2)&lt;/code&gt; into a value of a &lt;a href=&quot;bitmasktype&quot;&gt;BitmaskType&lt;/a&gt; that can subsequently be passed to &lt;code&gt;isctype&lt;/code&gt;</source>
          <target state="translated">반복자 범위 &lt;code&gt;[F1, F2)&lt;/code&gt; 에 의해 지정된 문자 순서 를 이후 &lt;code&gt;isctype&lt;/code&gt; 에 전달할 수 있는 &lt;a href=&quot;bitmasktype&quot;&gt;BitmaskType&lt;/a&gt; 의 값 으로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="25d8c29ab3f8797126a2ca0d0c21a0e5a0c03c29" translate="yes" xml:space="preserve">
          <source>Converts the contents of the bitset to a string. Uses &lt;code&gt;zero&lt;/code&gt; to represent bits with value of &lt;code&gt;false&lt;/code&gt; and &lt;code&gt;one&lt;/code&gt; to represent bits with value of &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">비트 세트의 내용을 문자열로 변환합니다. 사용은 &lt;code&gt;zero&lt;/code&gt; 의 값을 갖는 비트를 표현하기 위해 &lt;code&gt;false&lt;/code&gt; 및 &lt;code&gt;one&lt;/code&gt; 의 비트 값을 나타내는 &lt;code&gt;true&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="bf0363db70cebdc0b8933ca646455a8618f80441" translate="yes" xml:space="preserve">
          <source>Converts the contents of the bitset to an &lt;code&gt;unsigned long long&lt;/code&gt; integer.</source>
          <target state="translated">비트 세트의 내용을 &lt;code&gt;unsigned long long&lt;/code&gt; 정수로 변환합니다 .</target>
        </trans-unit>
        <trans-unit id="53cdfa26d065a7c3ffc9eda10dca4ddd1e4d4d6e" translate="yes" xml:space="preserve">
          <source>Converts the contents of the bitset to an &lt;code&gt;unsigned long&lt;/code&gt; integer.</source>
          <target state="translated">비트 세트의 내용을 &lt;code&gt;unsigned long&lt;/code&gt; 정수로 변환합니다 .</target>
        </trans-unit>
        <trans-unit id="20aba8933b1ce3e51b50d19af2bb5cd6151f383b" translate="yes" xml:space="preserve">
          <source>Converts the date and time information from a given calendar time &lt;code&gt;time&lt;/code&gt; to a null-terminated multibyte character string &lt;code&gt;str&lt;/code&gt; according to format string &lt;code&gt;format&lt;/code&gt;. Up to &lt;code&gt;count&lt;/code&gt; bytes are written.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6290eddcfe81debafbede6f98da72ff864614327" translate="yes" xml:space="preserve">
          <source>Converts the date and time information from a given calendar time &lt;code&gt;time&lt;/code&gt; to a null-terminated wide character string &lt;code&gt;str&lt;/code&gt; according to format string &lt;code&gt;format&lt;/code&gt;. Up to &lt;code&gt;count&lt;/code&gt; wide characters are written.</source>
          <target state="translated">지정된 달력 시간 &lt;code&gt;time&lt;/code&gt; 에서 날짜 및 시간 정보 를 형식 문자열 &lt;code&gt;format&lt;/code&gt; 에 따라 널로 끝나는 넓은 문자열 &lt;code&gt;str&lt;/code&gt; 로 변환합니다 . 최대 &lt;code&gt;count&lt;/code&gt; 의 문자를 씁니다.</target>
        </trans-unit>
        <trans-unit id="519b80c3038fd902484f3879ce4d6e40b47a488a" translate="yes" xml:space="preserve">
          <source>Converts the given character to lowercase according to the character conversion rules defined by the currently installed C locale.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f569145b51d5c5bd1a8f3f9cda6c230ee4a033fa" translate="yes" xml:space="preserve">
          <source>Converts the given character to uppercase according to the character conversion rules defined by the currently installed C locale.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e2c2190b4ebc6c640c23909d4015a7b7c92b75c" translate="yes" xml:space="preserve">
          <source>Converts the given wide character to lowercase, if possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a302cdd09a562f6faf8a71da6652ad5c7071026" translate="yes" xml:space="preserve">
          <source>Converts the given wide character to uppercase, if possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5387a0ddfbbe6c8f46cd1c4ce1c5dac233e0e9ad" translate="yes" xml:space="preserve">
          <source>Converts the implementation-defined character string &lt;code&gt;arg&lt;/code&gt; into the corresponding quiet NaN value, as if by calling &lt;code&gt;&lt;a href=&quot;../../string/byte/strtof&quot;&gt;std::strtod&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../../string/byte/strtof&quot;&gt;std::strtof&lt;/a&gt;&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;../../string/byte/strtof&quot;&gt;std::strtold&lt;/a&gt;&lt;/code&gt;, respectively, as follows:</source>
          <target state="translated">다음과 같이 각각 &lt;code&gt;&lt;a href=&quot;../../string/byte/strtof&quot;&gt;std::strtod&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;../../string/byte/strtof&quot;&gt;std::strtof&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;../../string/byte/strtof&quot;&gt;std::strtold&lt;/a&gt;&lt;/code&gt; 를 호출 하여 구현 정의 문자열 &lt;code&gt;arg&lt;/code&gt; 를 해당 조용한 NaN 값 으로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="9c5705e1d84ea9c2cd3a169276e559ba9ba08c3c" translate="yes" xml:space="preserve">
          <source>Converts the time point &lt;code&gt;t&lt;/code&gt; of a clock &lt;code&gt;Source&lt;/code&gt; to an equivalent time point of the clock &lt;code&gt;Dest&lt;/code&gt;, using &lt;code&gt;&lt;a href=&quot;system_clock&quot;&gt;std::chrono::system_clock&lt;/a&gt;&lt;/code&gt; and/or &lt;code&gt;std::chrono::utc_clock&lt;/code&gt; as intermediaries if necessary.</source>
          <target state="translated">필요한 경우 &lt;code&gt;&lt;a href=&quot;system_clock&quot;&gt;std::chrono::system_clock&lt;/a&gt;&lt;/code&gt; 및 / 또는 &lt;code&gt;std::chrono::utc_clock&lt;/code&gt; 을 사용하여 클럭 &lt;code&gt;Source&lt;/code&gt; 의 시점 &lt;code&gt;t&lt;/code&gt; 를 시계 &lt;code&gt;Dest&lt;/code&gt; 의 해당 시점으로 변환합니다 .</target>
        </trans-unit>
        <trans-unit id="a7bf4ce38c977f0d61c3a234dc7e18fd005e1f26" translate="yes" xml:space="preserve">
          <source>Converts the value &lt;code&gt;ch&lt;/code&gt; to &lt;code&gt;unsigned char&lt;/code&gt; and copies it into each of the first &lt;code&gt;count&lt;/code&gt; characters of the object pointed to by &lt;code&gt;dest&lt;/code&gt;. If the object is a &lt;a href=&quot;../../language/objects#Subobjects&quot;&gt;potentially-overlapping subobject&lt;/a&gt; or is not &lt;a href=&quot;../../named_req/triviallycopyable&quot;&gt;TriviallyCopyable&lt;/a&gt; (e.g., scalar, C-compatible struct, or an array of trivially copyable type), the behavior is undefined. If &lt;code&gt;count&lt;/code&gt; is greater than the size of the object pointed to by &lt;code&gt;dest&lt;/code&gt;, the behavior is undefined.</source>
          <target state="translated">값 &lt;code&gt;ch&lt;/code&gt; 를 &lt;code&gt;unsigned char&lt;/code&gt; 변환하고 &lt;code&gt;dest&lt;/code&gt; 가 가리키는 객체 의 첫 번째 &lt;code&gt;count&lt;/code&gt; 문자 각각에 복사합니다 . 객체가 &lt;a href=&quot;../../language/objects#Subobjects&quot;&gt;겹칠 수있는 하위 객체&lt;/a&gt; 이거나 &lt;a href=&quot;../../named_req/triviallycopyable&quot;&gt;TriviallyCopyable&lt;/a&gt; 이 아닌 경우 (예 : 스칼라, C 호환 구조체 또는 간단한 복사 가능한 유형의 배열) 동작은 정의되지 않습니다. 경우 &lt;code&gt;count&lt;/code&gt; 개체의 크기가 가리키는 것보다 더 큰 &lt;code&gt;dest&lt;/code&gt; , 행동은 정의되지 않는다.</target>
        </trans-unit>
        <trans-unit id="ceb6ac7887f54ff3ef686dfed1138b2ec7336056" translate="yes" xml:space="preserve">
          <source>Converts to an object of the underlying &lt;code&gt;&lt;a href=&quot;../../string/basic_string&quot;&gt;std::basic_string&lt;/a&gt;&lt;/code&gt; type.</source>
          <target state="translated">기본 &lt;code&gt;&lt;a href=&quot;../../string/basic_string&quot;&gt;std::basic_string&lt;/a&gt;&lt;/code&gt; 유형 의 객체로 변환 합니다.</target>
        </trans-unit>
        <trans-unit id="d28b6ca97a731edb4001d59ca6ce1c08dcc6e5f1" translate="yes" xml:space="preserve">
          <source>Copies 32-bit values to &lt;code&gt;ob&lt;/code&gt; that would reproduce the current state of the object if passed to a constructor of &lt;code&gt;S&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;S&lt;/code&gt; 의 생성자에 전달 된 경우 객체의 현재 상태를 재현 할 수 있도록 32 비트 값을 &lt;code&gt;ob&lt;/code&gt; 로 복사 합니다 .</target>
        </trans-unit>
        <trans-unit id="b2e7422fdccd7c3c76206b7a80f1d5a639c84c8f" translate="yes" xml:space="preserve">
          <source>Copies &lt;code&gt;count&lt;/code&gt; bytes from the object pointed to by &lt;code&gt;src&lt;/code&gt; to the object pointed to by &lt;code&gt;dest&lt;/code&gt;. Both objects are reinterpreted as arrays of &lt;code&gt;unsigned char&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;src&lt;/code&gt; 가 가리키는 객체에서 &lt;code&gt;dest&lt;/code&gt; 가 가리키는 객체까지의 바이트 &lt;code&gt;count&lt;/code&gt; 복사 합니다 . 두 객체 모두 &lt;code&gt;unsigned char&lt;/code&gt; 배열로 해석됩니다 .</target>
        </trans-unit>
        <trans-unit id="cef6e4cb96a984eed579468187c210bce9f71ebd" translate="yes" xml:space="preserve">
          <source>Copies &lt;code&gt;count&lt;/code&gt; character from character string pointed to by &lt;code&gt;src&lt;/code&gt; to character string pointed to by &lt;code&gt;dest&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;src&lt;/code&gt; 가 가리키는 문자열부터 &lt;code&gt;dest&lt;/code&gt; 가 가리키는 문자열까지 문자 &lt;code&gt;count&lt;/code&gt; 복사 합니다.</target>
        </trans-unit>
        <trans-unit id="e1600fd30e395c8b6282a8b9d0d07a64bf430a2c" translate="yes" xml:space="preserve">
          <source>Copies &lt;code&gt;count&lt;/code&gt; characters from the object pointed to by &lt;code&gt;src&lt;/code&gt; to the object pointed to by &lt;code&gt;dest&lt;/code&gt;. Both objects are reinterpreted as arrays of &lt;code&gt;unsigned char&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;src&lt;/code&gt; 가 가리키는 오브젝트에서 &lt;code&gt;dest&lt;/code&gt; 가 가리키는 오브젝트까지 문자 &lt;code&gt;count&lt;/code&gt; 복사 합니다 . 두 객체 모두 &lt;code&gt;unsigned char&lt;/code&gt; 배열로 해석됩니다 .</target>
        </trans-unit>
        <trans-unit id="0d1a4b644443d4ea22f309f9a8e3949af16dc88f" translate="yes" xml:space="preserve">
          <source>Copies a substring &lt;code&gt;[pos, pos+count)&lt;/code&gt; to character string pointed to by &lt;code&gt;dest&lt;/code&gt;. If the requested substring lasts past the end of the string, or if &lt;code&gt;count == npos&lt;/code&gt;, the copied substring is &lt;code&gt;[pos, size())&lt;/code&gt;. The resulting character string is not null-terminated.</source>
          <target state="translated">하위 문자열 &lt;code&gt;[pos, pos+count)&lt;/code&gt; 를 &lt;code&gt;dest&lt;/code&gt; 가 가리키는 문자열로 복사합니다 . 요청 된 하위 문자열이 문자열의 끝을 지난 경우 또는 &lt;code&gt;count == npos&lt;/code&gt; 인 경우 복사 된 하위 문자열은 &lt;code&gt;[pos, size())&lt;/code&gt; 입니다. 결과 문자열은 null로 끝나지 않습니다.</target>
        </trans-unit>
        <trans-unit id="df8285fe91c84681d75e9b00c04c6d935318fbdd" translate="yes" xml:space="preserve">
          <source>Copies a symlink to another location.</source>
          <target state="translated">다른 위치로 심볼릭 링크를 복사합니다.</target>
        </trans-unit>
        <trans-unit id="6f85ae483192ace70d7c97e2fe7a8e38c2982c00" translate="yes" xml:space="preserve">
          <source>Copies at most &lt;code&gt;count&lt;/code&gt; characters of the byte string pointed to by &lt;code&gt;src&lt;/code&gt; (including the terminating null character) to character array pointed to by &lt;code&gt;dest&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;src&lt;/code&gt; (종료 널 문자 포함)가 가리키는 바이트 문자열의 최대 &lt;code&gt;count&lt;/code&gt; 문자를 &lt;code&gt;dest&lt;/code&gt; 가 가리키는 문자 배열에 복사 합니다.</target>
        </trans-unit>
        <trans-unit id="3079f88f2b6220736054e1f2f8f6fb9e6f7d26ba" translate="yes" xml:space="preserve">
          <source>Copies at most &lt;code&gt;count&lt;/code&gt; characters of the wide string pointed to by &lt;code&gt;src&lt;/code&gt; (including the terminating null wide character) to wide character array pointed to by &lt;code&gt;dest&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;src&lt;/code&gt; (종료 널 와이드 문자 포함)가 가리키는 와이드 문자열의 최대 &lt;code&gt;count&lt;/code&gt; 문자를 &lt;code&gt;dest&lt;/code&gt; 가 가리키는 와이드 문자 배열에 복사 합니다.</target>
        </trans-unit>
        <trans-unit id="c349df14561399ae68d048a326b5e20a9ee3d750" translate="yes" xml:space="preserve">
          <source>Copies correctly even where the ranges &lt;code&gt;[p,p+n)&lt;/code&gt; and &lt;code&gt;[s,s+n)&lt;/code&gt; overlap</source>
          <target state="translated">&lt;code&gt;[p,p+n)&lt;/code&gt; 및 &lt;code&gt;[s,s+n)&lt;/code&gt; 범위가 겹치는 경우에도 올바르게 복사</target>
        </trans-unit>
        <trans-unit id="3f1cf37e5eede7d6a3f4e6f5bde5a5a0d7bdf2a4" translate="yes" xml:space="preserve">
          <source>Copies elements from the range &lt;code&gt;[first, last)&lt;/code&gt;, to another range beginning at &lt;code&gt;d_first&lt;/code&gt;, omitting the elements which satisfy specific criteria. Source and destination ranges cannot overlap.</source>
          <target state="translated">&lt;code&gt;[first, last)&lt;/code&gt; 범위에서 &lt;code&gt;d_first&lt;/code&gt; 에서 시작하는 다른 범위로 요소를 복사하고 특정 기준을 만족하는 요소를 생략합니다. 소스 및 대상 범위는 겹칠 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="b4d4fc03f291442fdea952e6a36681cd71b31f78" translate="yes" xml:space="preserve">
          <source>Copies exactly &lt;code&gt;count&lt;/code&gt; successive wide characters from the wide character array pointed to by &lt;code&gt;src&lt;/code&gt; to the wide character array pointed to by &lt;code&gt;dest&lt;/code&gt;.</source>
          <target state="translated">사본 은 &lt;code&gt;src&lt;/code&gt; 가 가리키는 와이드 문자 배열에서 &lt;code&gt;dest&lt;/code&gt; 가 가리키는 와이드 문자 배열 까지 연속적인 와이드 문자를 정확하게 &lt;code&gt;count&lt;/code&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="bff9503b6cbb39c43e8d2d4bbd0084561207fb5f" translate="yes" xml:space="preserve">
          <source>Copies exactly &lt;code&gt;count&lt;/code&gt; successive wide characters from the wide character array pointed to by &lt;code&gt;src&lt;/code&gt; to the wide character array pointed to by &lt;code&gt;dest&lt;/code&gt;. If the objects overlap, the behavior is undefined. If &lt;code&gt;count&lt;/code&gt; is zero, the function does nothing.</source>
          <target state="translated">사본 은 &lt;code&gt;src&lt;/code&gt; 가 가리키는 와이드 문자 배열에서 &lt;code&gt;dest&lt;/code&gt; 가 가리키는 와이드 문자 배열 까지 연속적인 와이드 문자를 정확하게 &lt;code&gt;count&lt;/code&gt; 합니다. 객체가 겹치는 경우 동작이 정의되지 않습니다. 경우 &lt;code&gt;count&lt;/code&gt; 제로,이 함수는 작동하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="9858b67ee02e4515e617db0a399ae580f636cde1" translate="yes" xml:space="preserve">
          <source>Copies files and directories, with a variety of options.</source>
          <target state="translated">다양한 옵션으로 파일과 디렉토리를 복사합니다.</target>
        </trans-unit>
        <trans-unit id="38db4a815d22b43cc9a9d974fc284dcde0a46bce" translate="yes" xml:space="preserve">
          <source>Copies the character string pointed to by &lt;code&gt;src&lt;/code&gt;, including the null terminator, to the character array whose first element is pointed to by &lt;code&gt;dest&lt;/code&gt;.</source>
          <target state="translated">널 종료자를 포함하여 &lt;code&gt;src&lt;/code&gt; 가 가리키는 문자열 을 첫 번째 요소가 &lt;code&gt;dest&lt;/code&gt; 가 가리키는 문자 배열에 복사합니다 .</target>
        </trans-unit>
        <trans-unit id="f63c07621d36df5fadd70894195f13bc8eb50842" translate="yes" xml:space="preserve">
          <source>Copies the elements from the range &lt;code&gt;[first, last)&lt;/code&gt; to another range beginning at &lt;code&gt;d_first&lt;/code&gt; replacing all elements satisfying specific criteria with &lt;code&gt;new_value&lt;/code&gt;. The source and destination ranges cannot overlap.</source>
          <target state="translated">특정 기준을 만족하는 모든 요소를 &lt;code&gt;new_value&lt;/code&gt; 로 대체하여 &lt;code&gt;[first, last)&lt;/code&gt; 범위에서 &lt;code&gt;d_first&lt;/code&gt; 부터 다른 범위로 요소를 복사합니다 . 소스 및 대상 범위는 겹칠 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="de751759c63d21be4b46baa62a0b7f7cb6dec504" translate="yes" xml:space="preserve">
          <source>Copies the elements from the range &lt;code&gt;[first, last)&lt;/code&gt;, to another range beginning at &lt;code&gt;d_first&lt;/code&gt; in such a way that there are no consecutive equal elements. Only the first element of each group of equal elements is copied.</source>
          <target state="translated">연속적인 동일한 요소가없는 방식으로 &lt;code&gt;[first, last)&lt;/code&gt; 범위에서 &lt;code&gt;d_first&lt;/code&gt; 에서 시작하는 다른 범위로 요소를 복사합니다 . 동일한 요소 그룹의 첫 번째 요소 만 복사됩니다.</target>
        </trans-unit>
        <trans-unit id="9bf4c4a0c50e75dd8581c5fe9a7f7fa7b980c9a6" translate="yes" xml:space="preserve">
          <source>Copies the elements from the range, defined by &lt;code&gt;[first, last)&lt;/code&gt;, to another range ending at &lt;code&gt;d_last&lt;/code&gt;. The elements are copied in reverse order (the last element is copied first), but their relative order is preserved.</source>
          <target state="translated">&lt;code&gt;[first, last)&lt;/code&gt; 정의 된 범위에서 &lt;code&gt;d_last&lt;/code&gt; 로 끝나는 다른 범위로 요소를 복사합니다 . 요소는 역순으로 복사되지만 (마지막 요소가 먼저 복사 됨) 상대 순서는 유지됩니다.</target>
        </trans-unit>
        <trans-unit id="57944d1c3539842e2f1755e574074a254a500039" translate="yes" xml:space="preserve">
          <source>Copies the elements from the sorted range &lt;code&gt;[first1, last1)&lt;/code&gt; which are not found in the sorted range &lt;code&gt;[first2, last2)&lt;/code&gt; to the range beginning at &lt;code&gt;d_first&lt;/code&gt;.</source>
          <target state="translated">정렬 된 범위 &lt;code&gt;[first2, last2)&lt;/code&gt; 에 없는 정렬 된 범위 &lt;code&gt;[first1, last1)&lt;/code&gt; 에서 요소를 d_first에서 시작하는 범위로 &lt;code&gt;d_first&lt;/code&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="e2515e27847475f6fa7a8416db77cfa453d114ec" translate="yes" xml:space="preserve">
          <source>Copies the elements in the range, defined by &lt;code&gt;[first, last)&lt;/code&gt;, to another range beginning at &lt;code&gt;d_first&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;[first, last)&lt;/code&gt; 정의 된 범위의 요소 를 &lt;code&gt;d_first&lt;/code&gt; 에서 시작하는 다른 범위로 복사 합니다.</target>
        </trans-unit>
        <trans-unit id="1ea6e4f946badef5f30e69eb58a55623e218ccfc" translate="yes" xml:space="preserve">
          <source>Copies the substring &lt;code&gt;[pos, pos + rcount)&lt;/code&gt; to the character array pointed to by &lt;code&gt;dest&lt;/code&gt;, where &lt;code&gt;rcount&lt;/code&gt; is the smaller of &lt;code&gt;count&lt;/code&gt; and &lt;code&gt;size() - pos&lt;/code&gt;.</source>
          <target state="translated">하위 문자열 &lt;code&gt;[pos, pos + rcount)&lt;/code&gt; 를 &lt;code&gt;dest&lt;/code&gt; 가 가리키는 문자 배열에 복사합니다 . 여기서 &lt;code&gt;rcount&lt;/code&gt; 는 &lt;code&gt;count&lt;/code&gt; 와 &lt;code&gt;size() - pos&lt;/code&gt; -pos 보다 작습니다 .</target>
        </trans-unit>
        <trans-unit id="5a9916c6272af94678fc74ec1f6c842f69d38d6b" translate="yes" xml:space="preserve">
          <source>Copies the wide character &lt;code&gt;ch&lt;/code&gt; into each of the first &lt;code&gt;count&lt;/code&gt; wide characters of the wide character array pointed to by &lt;code&gt;dest&lt;/code&gt;.</source>
          <target state="translated">와이드 문자 &lt;code&gt;ch&lt;/code&gt; 를 &lt;code&gt;dest&lt;/code&gt; 가 가리키는 와이드 문자 배열 의 첫 번째 &lt;code&gt;count&lt;/code&gt; 와이드 문자 각각에 복사합니다 .</target>
        </trans-unit>
        <trans-unit id="ac29e51978bd32cc3e02df83e9769110ed5bf9a8" translate="yes" xml:space="preserve">
          <source>Copies the wide string pointed to by &lt;code&gt;src&lt;/code&gt; (including the terminating null wide character) to wide character array pointed to by &lt;code&gt;dest&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;src&lt;/code&gt; (종료 널 와이드 문자 포함)가 가리키는 와이드 문자열 을 &lt;code&gt;dest&lt;/code&gt; 가 가리키는 와이드 문자 배열에 복사합니다 .</target>
        </trans-unit>
        <trans-unit id="ecf898c80c1778e938f03d7227289d7bd15680fe" translate="yes" xml:space="preserve">
          <source>Copy assignment operator</source>
          <target state="translated">복사 할당 연산자</target>
        </trans-unit>
        <trans-unit id="d4ac77aa14d43c6eb0ffe3560648da569b79620b" translate="yes" xml:space="preserve">
          <source>Copy assignment operator is deleted</source>
          <target state="translated">복사 할당 연산자가 삭제되었습니다.</target>
        </trans-unit>
        <trans-unit id="3dcc4f8ff5570e20709c491d744ad417a7a95dc7" translate="yes" xml:space="preserve">
          <source>Copy assignment operator is deleted. &lt;code&gt;monotonic_buffer_resource&lt;/code&gt; is not copy assignable</source>
          <target state="translated">복사 할당 연산자가 삭제되었습니다. &lt;code&gt;monotonic_buffer_resource&lt;/code&gt; 는 복사 할 수 없습니다</target>
        </trans-unit>
        <trans-unit id="d4e374b045a4068bbac64efb7effe78749fbba43" translate="yes" xml:space="preserve">
          <source>Copy assignment operator is deleted. &lt;code&gt;synchronized_pool_resource&lt;/code&gt; is not copy assignable</source>
          <target state="translated">복사 할당 연산자가 삭제되었습니다. &lt;code&gt;synchronized_pool_resource&lt;/code&gt; 는 복사 가능하지 않습니다</target>
        </trans-unit>
        <trans-unit id="f0d9004ed6463633dc208a4954f272017dd80d26" translate="yes" xml:space="preserve">
          <source>Copy assignment operator is deleted. &lt;code&gt;unsynchronized_pool_resource&lt;/code&gt; is not copy assignable</source>
          <target state="translated">복사 할당 연산자가 삭제되었습니다. &lt;code&gt;unsynchronized_pool_resource&lt;/code&gt; 는 복사 가능하지 않습니다</target>
        </trans-unit>
        <trans-unit id="f34669b97df8ce8cb995288bf4d112aea721389b" translate="yes" xml:space="preserve">
          <source>Copy assignment operator. Assigns the contents of &lt;code&gt;other&lt;/code&gt;.</source>
          <target state="translated">복사 할당 연산자. &lt;code&gt;other&lt;/code&gt; 의 내용을 할당합니다 .</target>
        </trans-unit>
        <trans-unit id="f6bc75969c6391772c7001b3a7415deb196b7c57" translate="yes" xml:space="preserve">
          <source>Copy assignment operator. Drops the current reference and stores a reference to &lt;code&gt;other.get()&lt;/code&gt;.</source>
          <target state="translated">복사 할당 연산자. 현재 참조를 삭제하고 &lt;code&gt;other.get()&lt;/code&gt; 대한 참조를 저장합니다 .</target>
        </trans-unit>
        <trans-unit id="e9a26032cc00583491bc880ad0ab9a32e2bd84bc" translate="yes" xml:space="preserve">
          <source>Copy assignment, also copies the hash function, predicate and maximum load factor</source>
          <target state="translated">복사 할당, 해시 함수, 술어 및 최대로드 계수도 복사</target>
        </trans-unit>
        <trans-unit id="5968ca9f8ec0cefaa6f4d3f45ff0633385eefde9" translate="yes" xml:space="preserve">
          <source>Copy constructor</source>
          <target state="translated">생성자 복사</target>
        </trans-unit>
        <trans-unit id="10472c58f66a0d51fa7f49adddaa0d95f2a799d9" translate="yes" xml:space="preserve">
          <source>Copy constructors</source>
          <target state="translated">생성자 복사</target>
        </trans-unit>
        <trans-unit id="ec2359f5ab5b7e0eb556f1bdd10f0bae913ee4a8" translate="yes" xml:space="preserve">
          <source>Copy constructors of AllocatorAwareContainers obtain their instances of the allocator by calling &lt;code&gt;&lt;a href=&quot;../memory/allocator_traits&quot;&gt;std::allocator_traits&lt;/a&gt;&amp;lt;allocator_type&amp;gt;::select_on_container_copy_construction&lt;/code&gt; on the allocator of the container being copied.</source>
          <target state="translated">AllocatorAwareContainers의 복사 생성자는 복사중인 컨테이너의 할당 자에서 &lt;code&gt;&lt;a href=&quot;../memory/allocator_traits&quot;&gt;std::allocator_traits&lt;/a&gt;&amp;lt;allocator_type&amp;gt;::select_on_container_copy_construction&lt;/code&gt; 을 호출하여 할당 자의 인스턴스를 얻습니다 .</target>
        </trans-unit>
        <trans-unit id="8df4ae117ef11857228829e3004643077d9c59f6" translate="yes" xml:space="preserve">
          <source>Copy constructors, also copies the hash function, predicate and maximum load factor</source>
          <target state="translated">생성자 복사, 해시 함수, 술어 및 최대로드 계수도 복사</target>
        </trans-unit>
        <trans-unit id="d601b78ef49c34335f134e5ca12b1f7eaecc65d8" translate="yes" xml:space="preserve">
          <source>Copy elision</source>
          <target state="translated">복사 제거</target>
        </trans-unit>
        <trans-unit id="4a65139e7060f66016cb92aef6772bd2a9d36f7c" translate="yes" xml:space="preserve">
          <source>Copy elision is the only allowed form of optimization(until C++14)one of the two allowed forms of optimization, alongside &lt;a href=&quot;new#Allocation&quot;&gt;allocation elision and extension&lt;/a&gt;,(since C++14) that can change the observable side-effects. Because some compilers do not perform copy elision in every situation where it is allowed (e.g., in debug mode), programs that rely on the side-effects of copy/move constructors and destructors are not portable.</source>
          <target state="translated">복사 제거 는 관찰 가능한 부작용을 변경할 수있는 &lt;a href=&quot;new#Allocation&quot;&gt;할당 제거 및 확장&lt;/a&gt; (C ++ 14 이후) 과 함께 허용되는 최적화 형태 (C ++ 14까지) 중 허용되는 두 가지 최적화 형태 중 하나입니다 . 일부 컴파일러는 허용되는 모든 상황 (예 : 디버그 모드)에서 복사 제거를 수행하지 않기 때문에 복사 / 이동 생성자와 소멸자의 부작용에 의존하는 프로그램은 이식성이 없습니다.</target>
        </trans-unit>
        <trans-unit id="b50fda331773b6ec8bc63bd55a2b8a7157d6fcd2" translate="yes" xml:space="preserve">
          <source>Copy file content (default behavior)</source>
          <target state="translated">파일 내용 복사 (기본 동작)</target>
        </trans-unit>
        <trans-unit id="f5ee1c4ae63625e0dab71e8a2b6e4473d5d2bc96" translate="yes" xml:space="preserve">
          <source>Copy initialization</source>
          <target state="translated">복사 초기화</target>
        </trans-unit>
        <trans-unit id="0cb0c0693bd5824f0b4b8dc01c85228d6a8ee571" translate="yes" xml:space="preserve">
          <source>Copy initialization is performed in the following situations:</source>
          <target state="translated">복사 초기화는 다음 상황에서 수행됩니다.</target>
        </trans-unit>
        <trans-unit id="6cca3fda537d26b12448c6d7d85dacedc398df01" translate="yes" xml:space="preserve">
          <source>Copy symlinks as symlinks, not as the files they point to</source>
          <target state="translated">가리키는 파일이 아닌 심볼릭 링크를 심볼릭 링크로 복사</target>
        </trans-unit>
        <trans-unit id="8c06f52b993fcd5c1292eb3e3a4e6c0ca02098d6" translate="yes" xml:space="preserve">
          <source>Copy the directory structure, but do not copy any non-directory files</source>
          <target state="translated">디렉토리 구조를 복사하지만 디렉토리가 아닌 파일은 복사하지 마십시오</target>
        </trans-unit>
        <trans-unit id="c9fc8833982983726597e6cd152962c2b20155fa" translate="yes" xml:space="preserve">
          <source>Copy- or move-assigns another file status object.</source>
          <target state="translated">다른 파일 상태 객체를 복사 또는 이동 할당합니다.</target>
        </trans-unit>
        <trans-unit id="00264d6a3ad8d62b68ab79cc2730c7f96dc9110c" translate="yes" xml:space="preserve">
          <source>Copy-assignment operator is defined implicitly.</source>
          <target state="translated">복사 할당 연산자는 암시 적으로 정의됩니다.</target>
        </trans-unit>
        <trans-unit id="a19e6c7b1b8c885862f539bbe4a0ebe4b05d1bf7" translate="yes" xml:space="preserve">
          <source>Copy-assignment will replace the allocator only if &lt;code&gt;&lt;a href=&quot;../memory/allocator_traits&quot;&gt;std::allocator_traits&lt;/a&gt;&amp;lt;allocator_type&amp;gt;::propagate_on_container_copy_assignment::value&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;</source>
          <target state="translated">복사 할당은 &lt;code&gt;&lt;a href=&quot;../memory/allocator_traits&quot;&gt;std::allocator_traits&lt;/a&gt;&amp;lt;allocator_type&amp;gt;::propagate_on_container_copy_assignment::value&lt;/code&gt; 가 &lt;code&gt;true&lt;/code&gt; 인 경우에만 할당자를 대체 합니다.</target>
        </trans-unit>
        <trans-unit id="7c94d7bfd211ddeb14ac74398c7f833b22930efc" translate="yes" xml:space="preserve">
          <source>Copy-constructs &lt;code&gt;a1&lt;/code&gt; such that &lt;code&gt;a1 == a&lt;/code&gt;. Does not throw exceptions. (Note: every Allocator also satisfies &lt;a href=&quot;copyconstructible&quot;&gt;CopyConstructible&lt;/a&gt;)</source>
          <target state="translated">카피 제물 &lt;code&gt;a1&lt;/code&gt; 되도록 &lt;code&gt;a1 == a&lt;/code&gt; . 예외를 던지지 않습니다. (참고 : 모든 할당 &lt;a href=&quot;copyconstructible&quot;&gt;자는 CopyConstructible&lt;/a&gt; 도 충족 합니다 )</target>
        </trans-unit>
        <trans-unit id="5506485f3a7d6ad98c6438a1813ca3d2fd0284ad" translate="yes" xml:space="preserve">
          <source>Copy-initialization by conversion</source>
          <target state="translated">변환에 의한 복사 초기화</target>
        </trans-unit>
        <trans-unit id="fdd1081db449438e18177e383c81944c68dc17e0" translate="yes" xml:space="preserve">
          <source>Copy-initialization is less permissive than direct-initialization: &lt;a href=&quot;explicit&quot;&gt;explicit constructors&lt;/a&gt; are not &lt;a href=&quot;converting_constructor&quot;&gt;converting constructors&lt;/a&gt; and are not considered for copy-initialization.</source>
          <target state="translated">복사 초기화는 직접 초기화보다 덜 관대합니다. &lt;a href=&quot;explicit&quot;&gt;명시 적 생성자&lt;/a&gt; 는 생성자 를 &lt;a href=&quot;converting_constructor&quot;&gt;변환&lt;/a&gt; 하지 않으며 복사 초기화에는 고려되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="ae99e0d75a072f4c7b8b19cf1c371bd1b145f4f7" translate="yes" xml:space="preserve">
          <source>CopyAssignable</source>
          <target state="translated">CopyAssignable</target>
        </trans-unit>
        <trans-unit id="ae6c1d21680a8962f3c82ada24a2766e5700d3f4" translate="yes" xml:space="preserve">
          <source>CopyConstructible</source>
          <target state="translated">CopyConstructible</target>
        </trans-unit>
        <trans-unit id="c06b5706d33771b92edb49337d4fea1c77d098f0" translate="yes" xml:space="preserve">
          <source>CopyInsertable</source>
          <target state="translated">CopyInsertable</target>
        </trans-unit>
        <trans-unit id="45b1f73ec9a1ec0a25cc6d0e50d7ded3bbcca6fe" translate="yes" xml:space="preserve">
          <source>Copyable</source>
          <target state="translated">Copyable</target>
        </trans-unit>
        <trans-unit id="cbdf8fb7ad3731a8eac75286b2b5476318619c75" translate="yes" xml:space="preserve">
          <source>Copying &lt;code&gt;A&lt;/code&gt;'s state includes copying &lt;code&gt;B&lt;/code&gt;'s state</source>
          <target state="translated">복사 의 상태를 포함하는 복사 &lt;code&gt;B&lt;/code&gt; 의 상태를 ' &lt;code&gt;A&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cf489daaaa7187b32bb794c1bcf06ce6f90300ef" translate="yes" xml:space="preserve">
          <source>Copying a container using a &lt;code&gt;polymorphic_allocator&lt;/code&gt; will not call the allocator's copy constructor. Instead, the new container will use the return value of &lt;code&gt;&lt;a href=&quot;select_on_container_copy_construction&quot;&gt;select_on_container_copy_construction&lt;/a&gt;&lt;/code&gt; (a default-constructed &lt;code&gt;polymorphic_allocator&lt;/code&gt;) as its allocator.</source>
          <target state="translated">&lt;code&gt;polymorphic_allocator&lt;/code&gt; 를 사용하여 컨테이너를 복사 하면 할당 자의 복사 생성자가 호출되지 않습니다. 대신, 새로운 컨테이너는 &lt;code&gt;&lt;a href=&quot;select_on_container_copy_construction&quot;&gt;select_on_container_copy_construction&lt;/a&gt;&lt;/code&gt; 의 반환 값 (기본적으로 구성된 &lt;code&gt;polymorphic_allocator&lt;/code&gt; )을 할당 자로 사용합니다.</target>
        </trans-unit>
        <trans-unit id="6694318deca08d07b92903a2a7a0d485e3b7578f" translate="yes" xml:space="preserve">
          <source>Copying an &lt;code&gt;auto_ptr&lt;/code&gt; copies the pointer and transfers ownership to the destination: both copy construction and copy assignment of &lt;code&gt;auto_ptr&lt;/code&gt; modify their right hand arguments, and the &quot;copy&quot; is not equal to the original. Because of these unusual copy semantics, &lt;code&gt;auto_ptr&lt;/code&gt; may not be placed in standard containers. &lt;code&gt;&lt;a href=&quot;unique_ptr&quot;&gt;std::unique_ptr&lt;/a&gt;&lt;/code&gt; is preferred for this and other uses.(since C++11).</source>
          <target state="translated">복사 &lt;code&gt;auto_ptr&lt;/code&gt; 은의 대상으로 복사 포인터 및 전송 소유권 : 모두 복사 건설 및 할당 복사 &lt;code&gt;auto_ptr&lt;/code&gt; 은이 오른손 인수를 수정하고 &quot;복사는&quot;원본과 동일하지 않다. 이러한 비정상적인 복사 의미 때문에 &lt;code&gt;auto_ptr&lt;/code&gt; 은 표준 컨테이너에 배치되지 않을 수 있습니다. &lt;code&gt;&lt;a href=&quot;unique_ptr&quot;&gt;std::unique_ptr&lt;/a&gt;&lt;/code&gt; 이 (와) 다른 용도로 선호됩니다 (C ++ 11부터).</target>
        </trans-unit>
        <trans-unit id="1664cffb4445fbe01dcf38758c52dca9cd71720c" translate="yes" xml:space="preserve">
          <source>Core Issue 1776: Replacement of class objects containing reference members (&lt;code&gt;&lt;a href=&quot;utility/launder&quot;&gt;std::launder&lt;/a&gt;&lt;/code&gt;)</source>
          <target state="translated">핵심 문제 1776 : 참조 멤버를 포함하는 클래스 객체 교체 ( &lt;code&gt;&lt;a href=&quot;utility/launder&quot;&gt;std::launder&lt;/a&gt;&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="c9b0da8d0a8ee7d0a1c059f622fa57d1a967f766" translate="yes" xml:space="preserve">
          <source>Core constant expressions</source>
          <target state="translated">핵심 상수 표현식</target>
        </trans-unit>
        <trans-unit id="fcd91feb162e73cc4a0e7160b246e0fd8ef12d7b" translate="yes" xml:space="preserve">
          <source>Core language concepts</source>
          <target state="translated">핵심 언어 개념</target>
        </trans-unit>
        <trans-unit id="50108e3b191b573779478d3fe0b0a3aa81766464" translate="yes" xml:space="preserve">
          <source>Corner case platforms are also supported:</source>
          <target state="translated">코너 케이스 플랫폼도 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="1a8dba84527bf10f29b05a3cfd5d746ee35d467f" translate="yes" xml:space="preserve">
          <source>Coroutine support library</source>
          <target state="translated">코 루틴 지원 라이브러리</target>
        </trans-unit>
        <trans-unit id="038697113018f4400bc94f1be4aebad0829b635a" translate="yes" xml:space="preserve">
          <source>Coroutines</source>
          <target state="translated">Coroutines</target>
        </trans-unit>
        <trans-unit id="b25dc48ab4048067ea222e6c0d447657932ed95e" translate="yes" xml:space="preserve">
          <source>Coroutines (C++20)</source>
          <target state="translated">코 루틴 (C ++ 20)</target>
        </trans-unit>
        <trans-unit id="05960f0bf2ffd63ea6747d40d5eb0d00e47984a9" translate="yes" xml:space="preserve">
          <source>Coroutines cannot use &lt;a href=&quot;variadic_arguments&quot;&gt;variadic arguments&lt;/a&gt;, plain &lt;a href=&quot;return&quot;&gt;return&lt;/a&gt; statements, or &lt;a href=&quot;function&quot;&gt;placeholder return types&lt;/a&gt; (&lt;a href=&quot;auto&quot;&gt;&lt;code&gt;auto&lt;/code&gt;&lt;/a&gt; or &lt;code&gt;Concept&lt;/code&gt;).</source>
          <target state="translated">코 루틴은 &lt;a href=&quot;variadic_arguments&quot;&gt;변이 형 인수&lt;/a&gt; , 일반 &lt;a href=&quot;return&quot;&gt;리턴&lt;/a&gt; 문 또는 &lt;a href=&quot;function&quot;&gt;플레이스 홀더 리턴 유형&lt;/a&gt; ( &lt;a href=&quot;auto&quot;&gt; &lt;code&gt;auto&lt;/code&gt; &lt;/a&gt; 또는 &lt;code&gt;Concept&lt;/code&gt; )을 사용할 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="e39e5adcc0b72eeb76e320a8ec748fcbaa74cac2" translate="yes" xml:space="preserve">
          <source>Coroutines library</source>
          <target state="translated">코 루틴 라이브러리</target>
        </trans-unit>
        <trans-unit id="533c13f5dbdb4ae790e6746ceefc734422ad8ec4" translate="yes" xml:space="preserve">
          <source>Correct behavior</source>
          <target state="translated">올바른 행동</target>
        </trans-unit>
        <trans-unit id="21f512396dc162284c5310ac7ea2b415672ce587" translate="yes" xml:space="preserve">
          <source>Correctly using &lt;code&gt;reserve()&lt;/code&gt; can prevent unnecessary reallocations, but inappropriate uses of &lt;code&gt;reserve()&lt;/code&gt; (for instance, calling it before every &lt;code&gt;&lt;a href=&quot;push_back&quot;&gt;push_back()&lt;/a&gt;&lt;/code&gt; call) may actually increase the number of reallocations (by causing the capacity to grow linearly rather than exponentially) and result in increased computational complexity and decreased performance. For example, a function that receives an arbitrary vector by reference and appends elements to it should usually</source>
          <target state="translated">&lt;code&gt;reserve()&lt;/code&gt; 올바르게 사용 하면 불필요한 재 할당을 방지 할 수 있지만 reserved &lt;code&gt;reserve()&lt;/code&gt; 의 부적절한 사용 (예 : 모든 &lt;code&gt;&lt;a href=&quot;push_back&quot;&gt;push_back()&lt;/a&gt;&lt;/code&gt; 호출 전에 호출)은 실제로 재 할당 횟수를 증가시킬 수 있습니다 (용량이 기하 급수적으로 선형으로 증가하지 않음). 계산 복잡성이 증가하고 성능이 저하됩니다. 예를 들어, 참조로 임의의 벡터를 수신하고 요소를 추가하는 함수는 일반적으로</target>
        </trans-unit>
        <trans-unit id="9063cb3f3377165953c258be2071177191a79547" translate="yes" xml:space="preserve">
          <source>Covariant return types</source>
          <target state="translated">공변량 반환 유형</target>
        </trans-unit>
        <trans-unit id="6ee0a78dc7e88cdbfe34cb24cb35cc308d3ce55a" translate="yes" xml:space="preserve">
          <source>Create a file for read/write</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f00954c254e5e03c34d4c5d0355138a84dcbd5e" translate="yes" xml:space="preserve">
          <source>Create a file for writing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0db01f5584cddc81edba5c3271e89d44de57db9" translate="yes" xml:space="preserve">
          <source>Create a new &lt;code&gt;polymorphic_allocator&lt;/code&gt; for use by a container's copy constructor</source>
          <target state="translated">컨테이너의 복사 생성자가 사용할 새로운 &lt;code&gt;polymorphic_allocator&lt;/code&gt; 를 만듭니다.</target>
        </trans-unit>
        <trans-unit id="547703394f410af94d93bacaad9158fda8fc9228" translate="yes" xml:space="preserve">
          <source>Create new</source>
          <target state="translated">새로 만들기</target>
        </trans-unit>
        <trans-unit id="f41dd8453d561985d5ad0237276c6ab6c5a21eaa" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;&lt;a href=&quot;../codecvt&quot;&gt;std::codecvt&lt;/a&gt;&lt;/code&gt; facet and forwards the starting reference count &lt;code&gt;refs&lt;/code&gt; to the base class constructor, &lt;a href=&quot;../locale/facet/facet&quot;&gt;&lt;code&gt;locale::facet::facet()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">생성하는 &lt;code&gt;&lt;a href=&quot;../codecvt&quot;&gt;std::codecvt&lt;/a&gt;&lt;/code&gt; 면과 전달 개시 기준 카운트 &lt;code&gt;refs&lt;/code&gt; 기본 클래스 생성자, &lt;a href=&quot;../locale/facet/facet&quot;&gt; &lt;code&gt;locale::facet::facet()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="f1e5389df475a7c7ecf0c84c120426608ed3fe79" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;&lt;a href=&quot;../collate&quot;&gt;std::collate&lt;/a&gt;&lt;/code&gt; facet and forwards the starting reference count &lt;code&gt;refs&lt;/code&gt; to the base class constructor, &lt;a href=&quot;../locale/facet/facet&quot;&gt;&lt;code&gt;locale::facet::facet()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">작성 &lt;code&gt;&lt;a href=&quot;../collate&quot;&gt;std::collate&lt;/a&gt;&lt;/code&gt; 면과 전달 개시 기준 카운트 &lt;code&gt;refs&lt;/code&gt; 기본 클래스 생성자를 &lt;a href=&quot;../locale/facet/facet&quot;&gt; &lt;code&gt;locale::facet::facet()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="3383a9c52bd156dfd2a61109c6547344b0a57cb6" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;&lt;a href=&quot;../ctype&quot;&gt;std::ctype&lt;/a&gt;&amp;lt;char&amp;gt;&lt;/code&gt; facet and forwards the starting reference count &lt;code&gt;refs&lt;/code&gt; to the base class constructor, &lt;a href=&quot;../locale/facet/facet&quot;&gt;&lt;code&gt;locale::facet::facet()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">생성하는 &lt;code&gt;&lt;a href=&quot;../ctype&quot;&gt;std::ctype&lt;/a&gt;&amp;lt;char&amp;gt;&lt;/code&gt; 면과 전달 개시 기준 카운트 &lt;code&gt;refs&lt;/code&gt; 기본 클래스 생성자, &lt;a href=&quot;../locale/facet/facet&quot;&gt; &lt;code&gt;locale::facet::facet()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="7ccff2b8a8b28e99eb0ee6ab64275cb4940336d9" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;&lt;a href=&quot;../ctype&quot;&gt;std::ctype&lt;/a&gt;&lt;/code&gt; facet and forwards the starting reference count &lt;code&gt;refs&lt;/code&gt; to the base class constructor, &lt;a href=&quot;../locale/facet/facet&quot;&gt;&lt;code&gt;locale::facet::facet()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">작성 &lt;code&gt;&lt;a href=&quot;../ctype&quot;&gt;std::ctype&lt;/a&gt;&lt;/code&gt; 면과 전달 개시 기준 카운트 &lt;code&gt;refs&lt;/code&gt; 기본 클래스 생성자를 &lt;a href=&quot;../locale/facet/facet&quot;&gt; &lt;code&gt;locale::facet::facet()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="8f55d7c640d6558b05c2f084df7655c6b70e06ba" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;&lt;a href=&quot;../messages&quot;&gt;std::messages&lt;/a&gt;&lt;/code&gt; facet and forwards the starting reference count &lt;code&gt;refs&lt;/code&gt; to the base class constructor, &lt;a href=&quot;../locale/facet/facet&quot;&gt;&lt;code&gt;locale::facet::facet()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">작성 &lt;code&gt;&lt;a href=&quot;../messages&quot;&gt;std::messages&lt;/a&gt;&lt;/code&gt; 패싯 및 전달 개시 기준 카운트 &lt;code&gt;refs&lt;/code&gt; 기본 클래스 생성자, &lt;a href=&quot;../locale/facet/facet&quot;&gt; &lt;code&gt;locale::facet::facet()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="9a984f5ede58bdfc76cddf14765c1dbfa3550503" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;&lt;a href=&quot;../money_get&quot;&gt;std::money_get&lt;/a&gt;&lt;/code&gt; facet and forwards the starting reference count &lt;code&gt;refs&lt;/code&gt; to the base class constructor, &lt;a href=&quot;../locale/facet/facet&quot;&gt;&lt;code&gt;locale::facet::facet()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">작성 &lt;code&gt;&lt;a href=&quot;../money_get&quot;&gt;std::money_get&lt;/a&gt;&lt;/code&gt; 면과 전달 개시 기준 카운트 &lt;code&gt;refs&lt;/code&gt; 기본 클래스 생성자, &lt;a href=&quot;../locale/facet/facet&quot;&gt; &lt;code&gt;locale::facet::facet()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="5233903cd3ab40e41c6e52e400fe96a2bbe5b4ce" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;&lt;a href=&quot;../money_put&quot;&gt;std::money_put&lt;/a&gt;&lt;/code&gt; facet and forwards the starting reference count &lt;code&gt;refs&lt;/code&gt; to the base class constructor, &lt;a href=&quot;../locale/facet/facet&quot;&gt;&lt;code&gt;locale::facet::facet()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">작성 &lt;code&gt;&lt;a href=&quot;../money_put&quot;&gt;std::money_put&lt;/a&gt;&lt;/code&gt; 면과 전달 개시 기준 카운트 &lt;code&gt;refs&lt;/code&gt; 기본 클래스 생성자를 &lt;a href=&quot;../locale/facet/facet&quot;&gt; &lt;code&gt;locale::facet::facet()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="f076c066f2e32d9a3c1483e23552ba3a35b483da" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;&lt;a href=&quot;../moneypunct&quot;&gt;std::moneypunct&lt;/a&gt;&lt;/code&gt; facet and forwards the starting reference count &lt;code&gt;refs&lt;/code&gt; to the base class constructor, &lt;a href=&quot;../locale/facet/facet&quot;&gt;&lt;code&gt;locale::facet::facet()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">작성 &lt;code&gt;&lt;a href=&quot;../moneypunct&quot;&gt;std::moneypunct&lt;/a&gt;&lt;/code&gt; 면과 전달 개시 기준 카운트 &lt;code&gt;refs&lt;/code&gt; 기본 클래스 생성자를 &lt;a href=&quot;../locale/facet/facet&quot;&gt; &lt;code&gt;locale::facet::facet()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="76d1e4130b4f6db4fc5bd3b6e319ac1f54d74ffa" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;&lt;a href=&quot;../num_get&quot;&gt;std::num_get&lt;/a&gt;&lt;/code&gt; facet and forwards the starting reference count &lt;code&gt;refs&lt;/code&gt; to the base class constructor, &lt;a href=&quot;../locale/facet/facet&quot;&gt;&lt;code&gt;locale::facet::facet()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">작성 &lt;code&gt;&lt;a href=&quot;../num_get&quot;&gt;std::num_get&lt;/a&gt;&lt;/code&gt; 면과 전달 개시 기준 카운트 &lt;code&gt;refs&lt;/code&gt; 기본 클래스 생성자, &lt;a href=&quot;../locale/facet/facet&quot;&gt; &lt;code&gt;locale::facet::facet()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="9904155ef568483ebb1066f7d4062249b057ecf1" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;&lt;a href=&quot;../num_put&quot;&gt;std::num_put&lt;/a&gt;&lt;/code&gt; facet and forwards the starting reference count &lt;code&gt;refs&lt;/code&gt; to the base class constructor, &lt;a href=&quot;../locale/facet/facet&quot;&gt;&lt;code&gt;locale::facet::facet()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">작성 &lt;code&gt;&lt;a href=&quot;../num_put&quot;&gt;std::num_put&lt;/a&gt;&lt;/code&gt; 면과 전달 개시 기준 카운트 &lt;code&gt;refs&lt;/code&gt; 기본 클래스 생성자를 &lt;a href=&quot;../locale/facet/facet&quot;&gt; &lt;code&gt;locale::facet::facet()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="fb6b209376bd0cf0fbf81409b53bd01726276d0d" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;&lt;a href=&quot;../numpunct&quot;&gt;std::numpunct&lt;/a&gt;&lt;/code&gt; facet and forwards the starting reference count &lt;code&gt;refs&lt;/code&gt; to the base class constructor, &lt;a href=&quot;../locale/facet/facet&quot;&gt;&lt;code&gt;locale::facet::facet()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">작성 &lt;code&gt;&lt;a href=&quot;../numpunct&quot;&gt;std::numpunct&lt;/a&gt;&lt;/code&gt; 면과 전달 개시 기준 카운트 &lt;code&gt;refs&lt;/code&gt; 기본 클래스 생성자를 &lt;a href=&quot;../locale/facet/facet&quot;&gt; &lt;code&gt;locale::facet::facet()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="d5c8b13c9ea347da6b69caa3781804fcc6d085c6" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;&lt;a href=&quot;../pair&quot;&gt;std::pair&lt;/a&gt;&lt;/code&gt; object, deducing the target type from the types of arguments.</source>
          <target state="translated">작성 &lt;code&gt;&lt;a href=&quot;../pair&quot;&gt;std::pair&lt;/a&gt;&lt;/code&gt; 인수의 유형의 대상 유형을 추론, 개체를.</target>
        </trans-unit>
        <trans-unit id="78bc7bf0cbab77f6c20438b47e8f31986a1344c3" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;&lt;a href=&quot;../time_get&quot;&gt;std::time_get&lt;/a&gt;&lt;/code&gt; facet and forwards the starting reference count &lt;code&gt;refs&lt;/code&gt; to the base class constructor, &lt;a href=&quot;../locale/facet/facet&quot;&gt;&lt;code&gt;locale::facet::facet()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">작성 &lt;code&gt;&lt;a href=&quot;../time_get&quot;&gt;std::time_get&lt;/a&gt;&lt;/code&gt; 면과 전달 개시 기준 카운트 &lt;code&gt;refs&lt;/code&gt; 기본 클래스 생성자, &lt;a href=&quot;../locale/facet/facet&quot;&gt; &lt;code&gt;locale::facet::facet()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="627409141851dc8cbd89600db04163382b793844" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;&lt;a href=&quot;../time_put&quot;&gt;std::time_put&lt;/a&gt;&lt;/code&gt; facet and forwards the starting reference count &lt;code&gt;refs&lt;/code&gt; to the base class constructor, &lt;a href=&quot;../locale/facet/facet&quot;&gt;&lt;code&gt;locale::facet::facet()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">작성 &lt;code&gt;&lt;a href=&quot;../time_put&quot;&gt;std::time_put&lt;/a&gt;&lt;/code&gt; 면과 전달 개시 기준 카운트 &lt;code&gt;refs&lt;/code&gt; 기본 클래스 생성자, &lt;a href=&quot;../locale/facet/facet&quot;&gt; &lt;code&gt;locale::facet::facet()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="47032bd64c7cd6e2bd12b2f749221ea2bc352844" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;std::array&lt;/code&gt; object from a built-in array</source>
          <target state="translated">내장 &lt;code&gt;std::array&lt;/code&gt; 에서 std :: array 객체를 만듭니다.</target>
        </trans-unit>
        <trans-unit id="bbde9c87b9111fade3b1d6c64b516294d1dde023" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;std::array&lt;/code&gt; object whose size and optionally element type are deduced from the arguments</source>
          <target state="translated">크기와 선택적으로 요소 유형이 인수에서 추론되는 &lt;code&gt;std::array&lt;/code&gt; 객체를 만듭니다.</target>
        </trans-unit>
        <trans-unit id="4e06d4d59b68103326e5e7b32d1ca69b1130d339" translate="yes" xml:space="preserve">
          <source>Creates a copy of &lt;code&gt;other&lt;/code&gt;, replacing the contents of &lt;code&gt;*this&lt;/code&gt;. The reference counts of all facets held by &lt;code&gt;other&lt;/code&gt; are incremented. The reference counts of all facets previously held by &lt;code&gt;*this&lt;/code&gt; are decremented, and those facets whose reference count becomes zero are deleted.</source>
          <target state="translated">&lt;code&gt;*this&lt;/code&gt; 의 내용을 대체하여 &lt;code&gt;other&lt;/code&gt; 의 사본을 작성 합니다 . &lt;code&gt;other&lt;/code&gt; 이 보유한 모든 패싯의 참조 횟수 가 증가합니다. &lt;code&gt;*this&lt;/code&gt; 이전에 보유한 모든 패싯의 참조 카운트 가 감소되고 참조 카운트가 0이되는 패싯이 삭제됩니다.</target>
        </trans-unit>
        <trans-unit id="9d924938dd327a16ab63e0c29bf7fe93bb54c56a" translate="yes" xml:space="preserve">
          <source>Creates a forwarding call wrapper that returns the negation of the callable object it holds.</source>
          <target state="translated">보유하고있는 호출 가능 오브젝트의 부정을 리턴하는 전달 호출 랩퍼를 작성합니다.</target>
        </trans-unit>
        <trans-unit id="d6906002952dd3f9bca59eaf2693d5698a152882" translate="yes" xml:space="preserve">
          <source>Creates a function object that returns the complement of the result of the function object it holds</source>
          <target state="translated">보유하고있는 함수 오브젝트의 결과의 보수를 리턴하는 함수 오브젝트를 작성합니다.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
