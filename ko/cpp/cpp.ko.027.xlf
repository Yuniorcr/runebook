<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="cpp">
    <body>
      <group id="cpp">
        <trans-unit id="108c258177ff50c7bd301b6cfdc99c3b74000111" translate="yes" xml:space="preserve">
          <source>class with trivial constructors, assignment and destructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e4a28abe53a054baac9a65f99b9aa27ed87cb55" translate="yes" xml:space="preserve">
          <source>class with trivial copy, assignment and destructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5613e58d2019f17cbc3addceda46c82df6c17630" translate="yes" xml:space="preserve">
          <source>class-declaration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca6be3a985bd685f682fca41f2b7f1fd2b89c7d2" translate="yes" xml:space="preserve">
          <source>class-head-name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5e4800fd5b453b6e5b7ab3e6399cb58ba545cec" translate="yes" xml:space="preserve">
          <source>class-key</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fd91e5bfb92b2d0706724f30c0b3ccbeafed9e0" translate="yes" xml:space="preserve">
          <source>class-keyattr(optional)class-head-nameclass-virt-specifier(optional)base-clause(optional)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a937e330bf3a947b710b9c3afec88c3896cead4" translate="yes" xml:space="preserve">
          <source>class-keyattr(optional)identifier&lt;code&gt;;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b88a22e04d4b24a8c222beaad9d3a11754d426dc" translate="yes" xml:space="preserve">
          <source>class-keyattrclass-head-name&lt;code&gt;:&lt;/code&gt;base-specifier-list&lt;code&gt;{ &lt;/code&gt;member-specification&lt;code&gt;} &lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18dec73f14cfcfd0bc62f133c63b43718731232d" translate="yes" xml:space="preserve">
          <source>class-keyattrclass-head-name&lt;code&gt;{ &lt;/code&gt;member-specification&lt;code&gt;} &lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc5de72d1664ac258cdda0a9cfe87a2ebb1a5b74" translate="yes" xml:space="preserve">
          <source>class-keyattrclass-head-namebase-clause&lt;code&gt;{ &lt;/code&gt;member-specification&lt;code&gt;} &lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="505f2ef89813f4a41f218aeeb98a220aa75025d7" translate="yes" xml:space="preserve">
          <source>class-keyattridentifier&lt;code&gt;;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7421a8374e1b261e5797a86a2d9e4ad0442f4fb" translate="yes" xml:space="preserve">
          <source>class-keyclass-name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21af04aa3b5af0ea90010d0c0914efac38e9ea5a" translate="yes" xml:space="preserve">
          <source>class-name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="250f1211e961e0ada849fcdf73c3badf79f44902" translate="yes" xml:space="preserve">
          <source>class-name&lt;code&gt;(&lt;/code&gt;parameter-list(optional)&lt;code&gt;)&lt;/code&gt;except-spec(optional)attr(optional)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3826961ce81243fc5539ca668560733ca6f9baa1" translate="yes" xml:space="preserve">
          <source>class-or-identifier</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a4b2e38c86690662b4a0f9b5f3ee8c278731a2e" translate="yes" xml:space="preserve">
          <source>class-or-identifier&lt;code&gt;(&lt;/code&gt;expression-list(optional)&lt;code&gt;)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96a007a821cb21997f3f016e02381033996746fd" translate="yes" xml:space="preserve">
          <source>class-or-identifierbrace-init-list</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6df8d145330622107dd8ffc1a6fcc9fa344f413" translate="yes" xml:space="preserve">
          <source>class-specific allocation functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0f0b7008b748783dd736ed74f2da2555a0b2577" translate="yes" xml:space="preserve">
          <source>class-specific destroying deallocation functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c036320b700f67f4613db4c36884b6415c6c8286" translate="yes" xml:space="preserve">
          <source>class-specific placement allocation functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b46f20b49c8b1def6e0811dc139fd10f84790f5" translate="yes" xml:space="preserve">
          <source>class-specific placement deallocation functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6ea69a25ad87c64e2ac6d622d3a3f867899b6f6" translate="yes" xml:space="preserve">
          <source>class-specific usual deallocation functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cca15d0b27095e6cdc2359cdaf4d6325c5eabd7" translate="yes" xml:space="preserve">
          <source>class_name ( &lt;code&gt;const&lt;/code&gt;class_name&lt;code&gt;&amp;amp;&lt;/code&gt; )</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0abb6c04cc4d4df312ce9a4ea0c01fc87de30bf" translate="yes" xml:space="preserve">
          <source>class_name ( &lt;code&gt;const&lt;/code&gt;class_name&lt;code&gt;&amp;amp;&lt;/code&gt; ) = &lt;code&gt;default;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bb94d76ea80467c7ac04b8c0081eef0a5997e36" translate="yes" xml:space="preserve">
          <source>class_name ( &lt;code&gt;const&lt;/code&gt;class_name&lt;code&gt;&amp;amp;&lt;/code&gt; ) = &lt;code&gt;delete;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5455dc0ed4e6d2212975b0b26473a6e0036729fc" translate="yes" xml:space="preserve">
          <source>class_name ( class_name&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; )</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c42c890d2004eac9dbc90511d08d59eb4e6d58f" translate="yes" xml:space="preserve">
          <source>class_name ( class_name&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; ) = &lt;code&gt;default;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="123fb754f9730fefe48683cf41540d8a1b362ca0" translate="yes" xml:space="preserve">
          <source>class_name ( class_name&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; ) = &lt;code&gt;delete;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3acb0a49fe47b7a3701f0aa2225240fa1bff8e6f" translate="yes" xml:space="preserve">
          <source>class_name&lt;code&gt;&amp;amp;&lt;/code&gt;class_name&lt;code&gt;:: operator=&lt;/code&gt; ( class_name )</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9316791c924402e81ee44c7241d70d710017fe89" translate="yes" xml:space="preserve">
          <source>class_name&lt;code&gt;&amp;amp;&lt;/code&gt;class_name&lt;code&gt;:: operator=&lt;/code&gt; ( class_name&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; )</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6956ba660ea52503568904042da47d9a1f729176" translate="yes" xml:space="preserve">
          <source>class_name&lt;code&gt;&amp;amp;&lt;/code&gt;class_name&lt;code&gt;:: operator=&lt;/code&gt; ( class_name&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; ) = &lt;code&gt;default;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a9c115138f048c5a5174806f060282597a4701e" translate="yes" xml:space="preserve">
          <source>class_name&lt;code&gt;&amp;amp;&lt;/code&gt;class_name&lt;code&gt;:: operator=&lt;/code&gt; ( class_name&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; ) = &lt;code&gt;delete;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ac06ea91f878d63850da1430fc00f9759aaecd8" translate="yes" xml:space="preserve">
          <source>class_name&lt;code&gt;&amp;amp;&lt;/code&gt;class_name&lt;code&gt;:: operator=&lt;/code&gt; ( const class_name&lt;code&gt;&amp;amp;&lt;/code&gt; )</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f1aad033677821d3611a5c93337063b3a541440" translate="yes" xml:space="preserve">
          <source>class_name&lt;code&gt;&amp;amp;&lt;/code&gt;class_name&lt;code&gt;:: operator=&lt;/code&gt; ( const class_name&lt;code&gt;&amp;amp;&lt;/code&gt; ) = &lt;code&gt;default;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28f6e520fb79ab313847afe6691c66069f8c8356" translate="yes" xml:space="preserve">
          <source>class_name&lt;code&gt;&amp;amp;&lt;/code&gt;class_name&lt;code&gt;:: operator=&lt;/code&gt; ( const class_name&lt;code&gt;&amp;amp;&lt;/code&gt; ) = &lt;code&gt;delete;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c0c3c0bb720b59fcbe27b4831bb1d6f73e05b0f" translate="yes" xml:space="preserve">
          <source>class_name&lt;code&gt;()&lt;/code&gt;&lt;code&gt;=&lt;/code&gt;&lt;code&gt;default&lt;/code&gt;&lt;code&gt;;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5133b05ea657e61b26ff8515490aeb6bcd8445f6" translate="yes" xml:space="preserve">
          <source>class_name&lt;code&gt;()&lt;/code&gt;&lt;code&gt;=&lt;/code&gt;&lt;code&gt;delete&lt;/code&gt;&lt;code&gt;;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5feb2f87b58ceb5c3dd5271265f8c7affbeab1d" translate="yes" xml:space="preserve">
          <source>class_name&lt;code&gt;(&lt;/code&gt;&lt;code&gt;)&lt;/code&gt;&lt;code&gt;;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d5567da3c6b6da3a488f41ce6a4039a50df6811" translate="yes" xml:space="preserve">
          <source>class_name&lt;code&gt;::&lt;/code&gt;class_name&lt;code&gt;(&lt;/code&gt;&lt;code&gt;)&lt;/code&gt;&lt;code&gt;=&lt;/code&gt;&lt;code&gt;default&lt;/code&gt;&lt;code&gt;;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cdeb985cb27206c1c7f33ff7f91ef5d05f59341" translate="yes" xml:space="preserve">
          <source>class_name&lt;code&gt;::&lt;/code&gt;class_name&lt;code&gt;(&lt;/code&gt;&lt;code&gt;)&lt;/code&gt;body</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1adaa84dc07a16d34ede5b9a70713ff832a0f853" translate="yes" xml:space="preserve">
          <source>classes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="290b75188d7c9a388b671d1398ef1f2939d6c588" translate="yes" xml:space="preserve">
          <source>classic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbf8b6e391c938294960c1995de63e12a8904aab" translate="yes" xml:space="preserve">
          <source>classic_table</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d08c60cea58e620832caf04779f01d11a3e62a0" translate="yes" xml:space="preserve">
          <source>classification table to use or a null pointer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f9f71f8405c490092dc02d7a7b9cb174d1aa43a" translate="yes" xml:space="preserve">
          <source>classifies a character or a character sequence</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bbc435a22cf501932749ccf8c2f8cc91aafaa1a" translate="yes" xml:space="preserve">
          <source>classifies a character or a character sequence, using the classification table</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="591af84f4847fdb82c24fc654e09487bc7dd68b9" translate="yes" xml:space="preserve">
          <source>classifies a wide character according to the specified LC_CTYPE category</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e56203a86c19245a5a1d9bd976211c2a048080e" translate="yes" xml:space="preserve">
          <source>clause after the template parameter list;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="064babe9837d24b405e067cacec9c929f1900750" translate="yes" xml:space="preserve">
          <source>clause, which declares the associated &lt;a href=&quot;constraints&quot;&gt;constraints&lt;/a&gt; for the function, which must be satisfied in order for the function to be selected by &lt;a href=&quot;overload_resolution&quot;&gt;overload resolution&lt;/a&gt;. (example: &lt;code&gt;void f1(int a) requires true;&lt;/code&gt;) Note that the associated constraint is part of function signature, but not part of function type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a75312ed2ac2d691ec703e1eb72c1758f891cb6a" translate="yes" xml:space="preserve">
          <source>clause.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5974bbf9926dd203590fb2f49e46499a88c4d302" translate="yes" xml:space="preserve">
          <source>cleaned up</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="168cbb2ea52b9e34d271accecfa7d7951e948a99" translate="yes" xml:space="preserve">
          <source>clear</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="438fb93c42c392c26655010bf56f9d4d09232eca" translate="yes" xml:space="preserve">
          <source>clear() without arguments can be used to unset the failbit after unexpected input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="768fbbe061d33fbe7d0be6f621c7d26de8a0d675" translate="yes" xml:space="preserve">
          <source>clearerr</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f9cdb25be9a98b1f1cce0c38fd64fcf8e08af3d" translate="yes" xml:space="preserve">
          <source>clears errors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bcbc5bbd63d2a4f915aa8e046e8771a5f8e3ca1" translate="yes" xml:space="preserve">
          <source>clears specific format flag</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ee08327618edf2a49319fa19d41dca9dd039809" translate="yes" xml:space="preserve">
          <source>clears the contents</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e63fda273ee31c240e7fd22ee6c8e3a519048797" translate="yes" xml:space="preserve">
          <source>clears the specified floating-point status flags</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="192f80f8777aae4d312be82be856f8826df69b03" translate="yes" xml:space="preserve">
          <source>clears the specified ios_base flags</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fceaf388c8e4452fdbddf31a2d92ffde2c9a4b80" translate="yes" xml:space="preserve">
          <source>clears the value Y in the object X</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="712230b16e27fd13e9b14b50765117f89196c668" translate="yes" xml:space="preserve">
          <source>climits</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8f36a98ed465a8b588fa2cf3b7fba840e535eec" translate="yes" xml:space="preserve">
          <source>clocale</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83655a5560ef1c438170f28acfecbe5013e8f34f" translate="yes" xml:space="preserve">
          <source>clock</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66ab88831e1251bb4888536cd79f40089f8367b4" translate="yes" xml:space="preserve">
          <source>clock_cast</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ce40ca3f678048d7c80961f3d154fa94f697822" translate="yes" xml:space="preserve">
          <source>clock_t</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="223d0f0f3d13d8aac3be1d23ed204387d4c4bc5f" translate="yes" xml:space="preserve">
          <source>clock_time_conversion</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80f528771d48e5967ab58c42c49c42e96b0956d4" translate="yes" xml:space="preserve">
          <source>clocks</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e841196d9b850ade545f7770e11916e4bfa0936" translate="yes" xml:space="preserve">
          <source>clogwclog</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da38860cb875cb64092e402d80d9fe29c4865b18" translate="yes" xml:space="preserve">
          <source>close</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27479feedb8e95186a2a258ee6419244abba46e9" translate="yes" xml:space="preserve">
          <source>closes a file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5d6fb86a771c266f1b701f3a541bf0eb245c2f7" translate="yes" xml:space="preserve">
          <source>closes a message catalog</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fd9704a465ec94d949653fcc129a9c4e0a31f64" translate="yes" xml:space="preserve">
          <source>closes the associated file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ede47a966291841bdddfe3c02d21a2fde44c6032" translate="yes" xml:space="preserve">
          <source>closure had a deleted default ctor and implicit copy/move ctors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cecae5f695d99901b1588a9dcfcb8c54d0e0e987" translate="yes" xml:space="preserve">
          <source>closure type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db9c549ff758cb4652abd88be911451e1d14b690" translate="yes" xml:space="preserve">
          <source>cmath</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba6c06e4be30524ef0009a48aabf7d270581932f" translate="yes" xml:space="preserve">
          <source>cmp</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c254abc2a98ca34b1b6a03e030516aa902dae08" translate="yes" xml:space="preserve">
          <source>cntrl</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5895696c08c2b55cac2d3ce03915b34c16540a4a" translate="yes" xml:space="preserve">
          <source>co_await</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfaf7c6842396f16c3c66efedc4becccfc408bed" translate="yes" xml:space="preserve">
          <source>co_return</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e678a769ebb727a906bae5b8a929bdad34cdc05c" translate="yes" xml:space="preserve">
          <source>co_yield</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6fb06210fafc02fd7479ddbed2d042cc3a5155e" translate="yes" xml:space="preserve">
          <source>code</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfa55951ae59e27c16fb5b2ac8945f5a155d361a" translate="yes" xml:space="preserve">
          <source>code point &lt;code&gt;U+nnnn&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfa7289cc06cd09b9eb40a9a08f35f2a51874d3a" translate="yes" xml:space="preserve">
          <source>code point &lt;code&gt;U+nnnnnnnn&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58bc8f5ea64e02ff0dd3dd76bd479dbf2b857e84" translate="yes" xml:space="preserve">
          <source>code such as &lt;code&gt;f(&lt;a href=&quot;../shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&amp;lt;int&amp;gt;(new int(42)), g())&lt;/code&gt; can cause a memory leak if &lt;code&gt;g&lt;/code&gt; gets called after &lt;code&gt;new int(42)&lt;/code&gt; and throws an exception, while &lt;code&gt;f(std::make_shared&amp;lt;int&amp;gt;(42), g())&lt;/code&gt; is safe, since two function calls are &lt;a href=&quot;../../language/eval_order&quot;&gt;never interleaved&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="daf363edd66e82e547d9e5a33eaf875fae5f130d" translate="yes" xml:space="preserve">
          <source>codecvt</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d718c277c787f72e7003e2b0fd057c9170d76386" translate="yes" xml:space="preserve">
          <source>codecvt_base</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66bd584d52a98348e1dd11199878f62b2aa6083f" translate="yes" xml:space="preserve">
          <source>codecvt_byname</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d7c50ee0b143fc0cdce457841c1ee815e625c3c" translate="yes" xml:space="preserve">
          <source>codecvt_mode</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="679202f160c9c06813ce9baf236327aa522c79d3" translate="yes" xml:space="preserve">
          <source>codecvt_utf16</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58390eae7f7e2bd09176e09153c7c46dd9cb4ac7" translate="yes" xml:space="preserve">
          <source>codecvt_utf8</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e83cfcb65fb2dd28e0a3d7852673d0af8cee317a" translate="yes" xml:space="preserve">
          <source>codecvt_utf8_utf16</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f723dc26961cf8673660a1b4e19aa6c54490eb9" translate="yes" xml:space="preserve">
          <source>coherence-ordered-before</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c230b1ae2b543822f7ba074cf811294b1ea57201" translate="yes" xml:space="preserve">
          <source>collate</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51e32b324f4fc8fdf83e22f9d34063803dded042" translate="yes" xml:space="preserve">
          <source>collate_byname</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65bcfdc0a2fe2db8b82bc46c298c6f110730d555" translate="yes" xml:space="preserve">
          <source>collation units</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67ede07f3d64dc04f1d32b9afe43c8349b926bc6" translate="yes" xml:space="preserve">
          <source>collection of key-value pairs, hashed by keys</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bb4fb8e6a7fa44cefa25bf3b5cdc3fa437f93bf" translate="yes" xml:space="preserve">
          <source>collection of key-value pairs, hashed by keys, keys are unique</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22915622a02180384ed8336d7ceecf62ce0b0a6f" translate="yes" xml:space="preserve">
          <source>collection of key-value pairs, sorted by keys</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfda1f63a37ad59c33616394649bc80ecd31a64e" translate="yes" xml:space="preserve">
          <source>collection of key-value pairs, sorted by keys, keys are unique</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e57a6bb02b4f850e21474700ae177e3b26e6f84d" translate="yes" xml:space="preserve">
          <source>collection of keys, hashed by keys</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9eab83b6c16ee4947f51b5e22926f5b1e5becadf" translate="yes" xml:space="preserve">
          <source>collection of keys, sorted by keys</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="136bad7c3bd149e1501c6264ea441e53993d5211" translate="yes" xml:space="preserve">
          <source>collection of unique keys, hashed by keys</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8056d0ae74b26f6f428543e8c2189936a62a34b9" translate="yes" xml:space="preserve">
          <source>collection of unique keys, sorted by keys</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3859d6df463dd645ea3dbf41053bb4a454380d39" translate="yes" xml:space="preserve">
          <source>colon (&lt;code&gt;:&lt;/code&gt;), followed by a type-specifier-seq that names an integral type (if it is cv-qualified, qualifications are ignored) that will serve as the fixed underlying type for this enumeration type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="815f979888d7a7d3cb622eee67d445c0fc94469b" translate="yes" xml:space="preserve">
          <source>combine</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d26da9505c869453fb7bebd824177a7f1cbfbb7f" translate="yes" xml:space="preserve">
          <source>combines &lt;code&gt;&lt;a href=&quot;../types/remove_cv&quot;&gt;std::remove_cv&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../types/remove_reference&quot;&gt;std::remove_reference&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34f5a5651c3cc89c711837e296b3bad9bc5d3ec4" translate="yes" xml:space="preserve">
          <source>combines &lt;code&gt;&lt;a href=&quot;remove_cv&quot;&gt;std::remove_cv&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;remove_reference&quot;&gt;std::remove_reference&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1bde81ca5c33fe0ec9366bbd03159cee87bbd5e" translate="yes" xml:space="preserve">
          <source>combines &lt;code&gt;&lt;a href=&quot;remove_cv&quot;&gt;std::remove_cv&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;std::remove_reference&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4595d1d05edd4ebfe2998617d8dd395305582ed" translate="yes" xml:space="preserve">
          <source>combines &lt;code&gt;&lt;a href=&quot;types/remove_cv&quot;&gt;std::remove_cv&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;types/remove_reference&quot;&gt;std::remove_reference&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53ee74e48db94c6ffb19abd863c0570d0af794b4" translate="yes" xml:space="preserve">
          <source>combines &lt;code&gt;std::remove_cv&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;remove_reference&quot;&gt;std::remove_reference&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82e5e720111d391a87520d8f729f2ec666db8e77" translate="yes" xml:space="preserve">
          <source>combines an iterator-sentinel pair into a &lt;a href=&quot;../ranges/view&quot;&gt;&lt;code&gt;View&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c91d9c70d9dd27a7bd4867c332ae8f05dddd4b4" translate="yes" xml:space="preserve">
          <source>combines an iterator-sentinel pair into a &lt;a href=&quot;ranges/view&quot;&gt;&lt;code&gt;View&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e427d79e626c3125c5b9799e0adfdf3596f446a" translate="yes" xml:space="preserve">
          <source>combines an iterator-sentinel pair into a &lt;a href=&quot;view&quot;&gt;&lt;code&gt;View&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6806f9cdb5c86b97d792597c92a2fbb73aad545c" translate="yes" xml:space="preserve">
          <source>comma</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="070babf090ae29755a98ce3dcd66bb3af63cba99" translate="yes" xml:space="preserve">
          <source>comma expression where the right operand is one of these expressions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a0bae22605baf9ce2ad62bd451c47658aeeff39" translate="yes" xml:space="preserve">
          <source>comma-separated list of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e644e5423b1e4e1c42876d04b8a781f8b49217a4" translate="yes" xml:space="preserve">
          <source>comma-separated list of enumerator definitions, each of which is either simply an identifier, which becomes the name of the enumerator, or an identifier with an initializer: identifier&lt;code&gt;=&lt;/code&gt;constexpr. In either case, the identifier can be directly followed by an optional &lt;a href=&quot;attributes&quot;&gt;attribute specifier sequence&lt;/a&gt;.(since C++17)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="792be65c517123445f2b7341a8556c0651e091e0" translate="yes" xml:space="preserve">
          <source>comma-separated list of one or more declarators of the &lt;code&gt;typename&lt;/code&gt;(optional)nested-name-specifierunqualified-id. Some or all of the declarators may be followed by an ellipsis &lt;code&gt;...&lt;/code&gt; to indicate &lt;a href=&quot;parameter_pack&quot;&gt;pack expansion&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0759d97f5e0ae4e0cc7a4b726dea2056db48847" translate="yes" xml:space="preserve">
          <source>comma-separated list of one or more declarators of the form &lt;code&gt;typename&lt;/code&gt;(optional)nested-name-specifierunqualified-id. The last declarator may be an ellipsis, although that form is only meaningful in &lt;a href=&quot;using_declaration&quot;&gt;derived class definitions&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1925f793093581c47a5c6b2e414506b1cbae280d" translate="yes" xml:space="preserve">
          <source>command</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a7ca35e6cdfe89ecb8d4afa9d29300e57e4941d" translate="yes" xml:space="preserve">
          <source>command line arguments</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="118a9989815489c24b81b160782015890ed2085e" translate="yes" xml:space="preserve">
          <source>comment</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f3e4c773f5a1c95b38d33471a2d691375893d5d" translate="yes" xml:space="preserve">
          <source>common initial sequence</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f142010fd9f540266f510299942bd35807648338" translate="yes" xml:space="preserve">
          <source>common reference type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49e6d3e7ae0c8057ad31e4a97ae951c47d6a5dae" translate="yes" xml:space="preserve">
          <source>common type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac0d206d59e28ed86006f7cf8caf15c95aca6d36" translate="yes" xml:space="preserve">
          <source>common_comparison_category</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="463312681514d43ab2cc98a654a023b979570aaf" translate="yes" xml:space="preserve">
          <source>common_iterator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26455317531e291cf0cba1f16dba8be69eb378df" translate="yes" xml:space="preserve">
          <source>common_referencebasic_common_reference</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="405d45528c8eef450bf307bef69a994ce83c7f35" translate="yes" xml:space="preserve">
          <source>common_type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fbae02ba7fe0b6e97d7672e9fa17ea800591aa8" translate="yes" xml:space="preserve">
          <source>common_viewview::common</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1227d2ef5edb14a1d4bf6dfb9871c3a17b42df0" translate="yes" xml:space="preserve">
          <source>comp</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf9a00669c8a510b9241c92b691eb304242032fb" translate="yes" xml:space="preserve">
          <source>comp_ellint_1comp_ellint_1fcomp_ellint_1l</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db7634907b9c3fe3c7cbe163b4f238ca23a785ef" translate="yes" xml:space="preserve">
          <source>comp_ellint_2comp_ellint_2fcomp_ellint_2l</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebebf561ab3f467795b1ae203279aba828cb16cb" translate="yes" xml:space="preserve">
          <source>comp_ellint_3comp_ellint_3fcomp_ellint_3l</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6e075550b24cdd98f8d34c4f99d6b6d87d8302b" translate="yes" xml:space="preserve">
          <source>comparator to assign</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b64ca250f492e3f0444ad32b68be5f60a163bede" translate="yes" xml:space="preserve">
          <source>compare</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a33c76eea30b9bc6f9b9c56144ae963e2eecbb34" translate="yes" xml:space="preserve">
          <source>compare and exchange operations are often used as basic building blocks of lockfree data structures.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4d2ee1e1f355967930fb2af52dc864d58b0cd9b" translate="yes" xml:space="preserve">
          <source>compare equal</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03bd286f96df65e31d2425bd4c7fb562674a9d35" translate="yes" xml:space="preserve">
          <source>compare for equality with another &lt;code&gt;memory_resource&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecfecdb44aba19fbb66d9a3cc57d4f30a2c445f2" translate="yes" xml:space="preserve">
          <source>compare two &lt;code&gt;memory_resource&lt;/code&gt;s</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe67e8c2daffb0fd6e2fe381d4d2207492235578" translate="yes" xml:space="preserve">
          <source>compare two &lt;code&gt;polymorphic_allocator&lt;/code&gt;s</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16b54fc26ac75992d9961d5b9db0ebb4f6ec7882" translate="yes" xml:space="preserve">
          <source>compare_3way</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bb2b7fccd4d7b69bfaf2abcd8679cd8d501db7a" translate="yes" xml:space="preserve">
          <source>compare_exchange_weakcompare_exchange_strong</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8d685f4dd334f36fc4eb9fa79ef1e17f4d38da8" translate="yes" xml:space="preserve">
          <source>compared all path elements directly</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3734b14de5208704577f09684b7c95e2ffb718a9" translate="yes" xml:space="preserve">
          <source>compared. Having &lt;code&gt;operator&amp;lt;&lt;/code&gt; defined for &lt;code&gt;shared_ptr&lt;/code&gt; allows &lt;code&gt;shared_ptr&lt;/code&gt;s to be used as keys in associative containers, like &lt;code&gt;&lt;a href=&quot;../../container/map&quot;&gt;std::map&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../../container/set&quot;&gt;std::set&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e2adf036a31744fbd2d79cac4e470d741f15517" translate="yes" xml:space="preserve">
          <source>compares &lt;code&gt;error_code&lt;/code&gt; and &lt;code&gt;error_condition&lt;/code&gt; for equivalence</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b72119aaaf9b4b9c010edb3cb44e6bfe90b01721" translate="yes" xml:space="preserve">
          <source>compares &lt;code&gt;optional&lt;/code&gt; objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6795742a06137576cacf5ecb6b4f2f3ff1f2743" translate="yes" xml:space="preserve">
          <source>compares &lt;code&gt;variant&lt;/code&gt; objects as their contained values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="971aef8673043af06742585069d65d37d208965a" translate="yes" xml:space="preserve">
          <source>compares a &lt;code&gt;&lt;a href=&quot;../utility/functional/function&quot;&gt;std::function&lt;/a&gt;&lt;/code&gt; with &lt;code&gt;nullptr&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab94927376ec527a76aa6854a90ddd7a1aeb3743" translate="yes" xml:space="preserve">
          <source>compares a &lt;code&gt;std::function&lt;/code&gt; with &lt;code&gt;nullptr&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64f65a9bec458e9d5bac9552bb6b466e7a56739f" translate="yes" xml:space="preserve">
          <source>compares a certain amount of characters from two wide strings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82a8a95532d14303ad94770238a4b3a9a23d9dfc" translate="yes" xml:space="preserve">
          <source>compares a certain amount of wide characters from two arrays</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d733b2920d0421eeb87c88460872b01dd217b540" translate="yes" xml:space="preserve">
          <source>compares a certain number of characters from two strings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43de86d32ec44dd754fa9274503bf1856efc715a" translate="yes" xml:space="preserve">
          <source>compares error_conditions and error_codes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="331fe643df3c58c8247476d3f37b258b3d9b6bda" translate="yes" xml:space="preserve">
          <source>compares greater</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16ff8ea76f8824c8f914db784596351878af7136" translate="yes" xml:space="preserve">
          <source>compares its arguments using owner-based semantics</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6115fd84c3498a0e727b34df15fc9f39430db03" translate="yes" xml:space="preserve">
          <source>compares matched subsequence (if any)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cded9cd41e4349f10cc1223846813add3bacc3ab" translate="yes" xml:space="preserve">
          <source>compares objects of type &lt;code&gt;value_type&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa0af6c02efdc3e40d6d0c5ce2537f1734018635" translate="yes" xml:space="preserve">
          <source>compares the contents</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d7365eca8c8fd645aad8023512694564b9fe6b4" translate="yes" xml:space="preserve">
          <source>compares the internal states of the adaptors and underlying engines</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68e8940b037c651e39974f1bba8a34922d16e42e" translate="yes" xml:space="preserve">
          <source>compares the internal states of two pseudo-random number engines</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfb93a5089e651c89e49319567ca074c97e6ebfa" translate="yes" xml:space="preserve">
          <source>compares the lexical representations of two paths lexicographically</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e8213face64e5e3c3c30897fcc8a6c0866f08fb" translate="yes" xml:space="preserve">
          <source>compares the underlying &lt;code&gt;&lt;a href=&quot;../types/type_info&quot;&gt;std::type_info&lt;/a&gt;&lt;/code&gt; objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="706d419cf48089b9f2f55634c6b9523d11f32831" translate="yes" xml:space="preserve">
          <source>compares the underlying &lt;code&gt;&lt;a href=&quot;type_info&quot;&gt;std::type_info&lt;/a&gt;&lt;/code&gt; objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="763113f5ea1ac04873f64f62533d37f1351851ef" translate="yes" xml:space="preserve">
          <source>compares the underlying iterators</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c42ce4dfb5fe0fd81d3bbcfa9c1694a14d95e06b" translate="yes" xml:space="preserve">
          <source>compares the values in the unordered_map</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f88af3d62f382e3c1d0a25efe525ed51ca233f5e" translate="yes" xml:space="preserve">
          <source>compares the values in the unordered_multimap</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0419d7ba3fce25c3d63a1ef224265ebe5eb22ef5" translate="yes" xml:space="preserve">
          <source>compares the values in the unordered_multiset</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6582ecd645ec0c5a28cdaae32efaaa7687335280" translate="yes" xml:space="preserve">
          <source>compares the values in the unordered_set</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19ffce8d6af369af8228abe548939ba4caa8dcf2" translate="yes" xml:space="preserve">
          <source>compares to another &lt;code&gt;unique_ptr&lt;/code&gt; or with &lt;code&gt;nullptr&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f40f88d0224472b2521aa3a6b463bd0e0678ae6" translate="yes" xml:space="preserve">
          <source>compares two &lt;code&gt;day&lt;/code&gt; objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e83767f089e8f2096ab13967b78a6fcc3e1bf3ce" translate="yes" xml:space="preserve">
          <source>compares two &lt;code&gt;error_code&lt;/code&gt;s</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4184dfad6a8b88d58ef48d5cdb60cb3c44aa63bf" translate="yes" xml:space="preserve">
          <source>compares two &lt;code&gt;int_type&lt;/code&gt; values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f22feabe28ae7feea56cd1ace03871fffce9607" translate="yes" xml:space="preserve">
          <source>compares two &lt;code&gt;istream_iterator&lt;/code&gt;s</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33dd0112ab9f350408801cf9b7e83baac133400c" translate="yes" xml:space="preserve">
          <source>compares two &lt;code&gt;istreambuf_iterator&lt;/code&gt;s</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fa0b94f5f945c6f9825a211f1e71f736ff57aa8" translate="yes" xml:space="preserve">
          <source>compares two &lt;code&gt;leap&lt;/code&gt; objects or a &lt;code&gt;leap&lt;/code&gt; object and a &lt;code&gt;sys_time&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79a9e8f519074e00cc99ae1483dfc75d0d9c606a" translate="yes" xml:space="preserve">
          <source>compares two &lt;code&gt;link&lt;/code&gt; objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39332ee39fed236efcc1e40529288d0fef22ebde" translate="yes" xml:space="preserve">
          <source>compares two &lt;code&gt;month&lt;/code&gt; objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9768854fca1db93b0c018d95a863f184af989927" translate="yes" xml:space="preserve">
          <source>compares two &lt;code&gt;month_day&lt;/code&gt; objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9da75dbc1b72fd9c33eb8f543ba099a7dc56004b" translate="yes" xml:space="preserve">
          <source>compares two &lt;code&gt;month_day_last&lt;/code&gt; objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c16fc545362c2548d142e61127314ed2209f024" translate="yes" xml:space="preserve">
          <source>compares two &lt;code&gt;month_weekday&lt;/code&gt; objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1197b5a2cc40307e36eb714a6132c815c889d745" translate="yes" xml:space="preserve">
          <source>compares two &lt;code&gt;month_weekday_last&lt;/code&gt; objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="504630db2d7ca645878a2389df778824f6efd1fa" translate="yes" xml:space="preserve">
          <source>compares two &lt;code&gt;ratio&lt;/code&gt; objects for</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2fdbedb69af2bfd3006a7aafe477ab243291ca1" translate="yes" xml:space="preserve">
          <source>compares two &lt;code&gt;ratio&lt;/code&gt; objects for equality at compile-time</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b9b6e27c33cda56463604466606ba2967254011" translate="yes" xml:space="preserve">
          <source>compares two &lt;code&gt;ratio&lt;/code&gt; objects for inequality at compile-time</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09d732ab5365e629d55461121ede27ebd3e43805" translate="yes" xml:space="preserve">
          <source>compares two &lt;code&gt;regex_iterator&lt;/code&gt;s</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a1222a71fe50decb6fbb64b2902b914fa998d52" translate="yes" xml:space="preserve">
          <source>compares two &lt;code&gt;regex_token_iterator&lt;/code&gt;s</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79c86a26dee5d4d379133b222d15ab0e717feef5" translate="yes" xml:space="preserve">
          <source>compares two &lt;code&gt;sub_match&lt;/code&gt; objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a1b87b42e631836dd249b4cf6e29be96df96eb6" translate="yes" xml:space="preserve">
          <source>compares two &lt;code&gt;thread::id&lt;/code&gt; objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b05212ddd760e56651089e2122ec39424d29a468" translate="yes" xml:space="preserve">
          <source>compares two &lt;code&gt;time_zone&lt;/code&gt; objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b33b8c13e4f4b4934cba08f31bcf785e1350c8fb" translate="yes" xml:space="preserve">
          <source>compares two &lt;code&gt;weekday&lt;/code&gt; objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0710d1717c72e86106b5d14cf34bb2127f63bf42" translate="yes" xml:space="preserve">
          <source>compares two &lt;code&gt;weekday_indexed&lt;/code&gt; objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd4791ee78180f3a94948e4ead13220fe556b874" translate="yes" xml:space="preserve">
          <source>compares two &lt;code&gt;weekday_last&lt;/code&gt; objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="612d7dbe36793b129cd7a99473fa1b82325f87c3" translate="yes" xml:space="preserve">
          <source>compares two &lt;code&gt;year&lt;/code&gt; objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="337daa225e29fec61248836e8ef1ea4f35bc3ee8" translate="yes" xml:space="preserve">
          <source>compares two &lt;code&gt;year_month&lt;/code&gt; objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dd0732d73f051a8ef407a361e3c069ae76d506a" translate="yes" xml:space="preserve">
          <source>compares two &lt;code&gt;year_month_day&lt;/code&gt; objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="196bf2950ce445c20d86366343b0042bc4116124" translate="yes" xml:space="preserve">
          <source>compares two &lt;code&gt;year_month_day_last&lt;/code&gt; objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e4e782c7d25a8278628164cdfe04882e3ae1244" translate="yes" xml:space="preserve">
          <source>compares two &lt;code&gt;year_month_weekday&lt;/code&gt; objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc3a6ab44dd0555ff02137958889b61bdfbc874a" translate="yes" xml:space="preserve">
          <source>compares two &lt;code&gt;year_month_weekday_last&lt;/code&gt; objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec66da12f924a408dbe372dcb420404541fc355a" translate="yes" xml:space="preserve">
          <source>compares two &lt;code&gt;zoned_time&lt;/code&gt; objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="831db165301242caeef9ec2fa6daf1c3d43c4abc" translate="yes" xml:space="preserve">
          <source>compares two allocator instances</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a47bb50f5d89064f851e92e83e58e51a8b25d776" translate="yes" xml:space="preserve">
          <source>compares two buffers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98f3a544ffa694bf22875a3303922cc29145f185" translate="yes" xml:space="preserve">
          <source>compares two characters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d07715e8c0ccfc57b250881f70d01941abad5a14" translate="yes" xml:space="preserve">
          <source>compares two complex numbers or a complex and a scalar</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d9d8ec3d7065280338f9d844128e48a7719d3dc" translate="yes" xml:space="preserve">
          <source>compares two directory entries</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f70c2091ad8957204a579b2e40b2eadc7ad02d50" translate="yes" xml:space="preserve">
          <source>compares two distribution objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40d9d738a68a75f339023f343143a5aea9bb970a" translate="yes" xml:space="preserve">
          <source>compares two durations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4945b27bb07950bb8659e532f8012e95b3e5df8" translate="yes" xml:space="preserve">
          <source>compares two error categories</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b1003351aae36cdd4a03f90ab2a315004116516" translate="yes" xml:space="preserve">
          <source>compares two ranges using three-way comparison</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c021f2f6b642c784d85b43c4a49845676342df0c" translate="yes" xml:space="preserve">
          <source>compares two scoped_allocator_adaptor instances</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b49f749b5ee9de3f4e8b7781d5c58c969685a6f0" translate="yes" xml:space="preserve">
          <source>compares two strings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ec82094ff8091449ab258311589dc20a6358ee7" translate="yes" xml:space="preserve">
          <source>compares two strings in accordance to the current locale</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80f66ec05582d5413deb6c2adbd9d07ffb2984b7" translate="yes" xml:space="preserve">
          <source>compares two strings using this facet's collation rules</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb9abfa683077a1510e86acafa9954950cca2196" translate="yes" xml:space="preserve">
          <source>compares two time points</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d6920c270cd10a915af3172bef5ebbbc7218398" translate="yes" xml:space="preserve">
          <source>compares two valarrays or a valarray with a value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56689024d0b76336c21df4feae5d42a9f13e207e" translate="yes" xml:space="preserve">
          <source>compares two values of type &lt;code&gt;value_type&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1445b915aac6c6c54e0d34f8bf5a7b7e7a50c3d1" translate="yes" xml:space="preserve">
          <source>compares two values using three-way comparison</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e720fc97d02c7f231e3c74809c24bc1d3d64db81" translate="yes" xml:space="preserve">
          <source>compares two views</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49b41741ada3b414696cb64808113efe24ce1ecf" translate="yes" xml:space="preserve">
          <source>compares two wide strings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ac964de3ce4e6892a457d3d71aeab6753213352" translate="yes" xml:space="preserve">
          <source>compares two wide strings in accordance to the current locale</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2272a6a0520b99a1b1d61ac14a4b72578db45c00" translate="yes" xml:space="preserve">
          <source>compares with another &lt;code&gt;shared_ptr&lt;/code&gt; or with &lt;code&gt;nullptr&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d03823bb361b33c311b043c34c71db9ed82f2565" translate="yes" xml:space="preserve">
          <source>compares with zero</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d04521b659a980378ebb5bda98bc5d6300c89c8" translate="yes" xml:space="preserve">
          <source>comparison</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="899ec6cff444114c199c53c2cab8d9caeb7393f8" translate="yes" xml:space="preserve">
          <source>comparison function object (i.e. an object that satisfies the requirements of &lt;a href=&quot;../../named_req/compare&quot;&gt;Compare&lt;/a&gt;) which returns ​&lt;code&gt;true&lt;/code&gt; if the first argument is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="903a620d7ff297b1b867a64f754a980643a56261" translate="yes" xml:space="preserve">
          <source>comparison function object (i.e. an object that satisfies the requirements of &lt;a href=&quot;../named_req/compare&quot;&gt;Compare&lt;/a&gt;) which returns ​&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;a&lt;/code&gt; is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="656b4c714c803168288dc8212367d62fab2d6ce0" translate="yes" xml:space="preserve">
          <source>comparison function object (i.e. an object that satisfies the requirements of &lt;a href=&quot;../named_req/compare&quot;&gt;Compare&lt;/a&gt;) which returns ​&lt;code&gt;true&lt;/code&gt; if if &lt;code&gt;*a&lt;/code&gt; is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f65d3df769ebc0dde55104572f7836811b00da09" translate="yes" xml:space="preserve">
          <source>comparison function object (i.e. an object that satisfies the requirements of &lt;a href=&quot;../named_req/compare&quot;&gt;Compare&lt;/a&gt;) which returns ​&lt;code&gt;true&lt;/code&gt; if the first argument is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0f35421a5225697ec7faf615520ee0fda977c00" translate="yes" xml:space="preserve">
          <source>comparison function object to use for all comparisons of keys</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48bb04ac815decbdf2fc5aebce40947ae345f90f" translate="yes" xml:space="preserve">
          <source>comparison function to use for all key comparisons of this container</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de924d356edb026fc7ecb2bd872ab487c5d10c8b" translate="yes" xml:space="preserve">
          <source>comparison function which returns ​a negative integer value if the first argument is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e45c3442e4651639e6c0eaa848f8bde74e86c6f1" translate="yes" xml:space="preserve">
          <source>comparison of floating-point values and returns that result as a value of type &lt;code&gt;std::strong_ordering&lt;/code&gt; (note: this comparison can distinguish between the positive and negative zero and between the NaNs with different representations)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="362a91f725381311e9b609fced8ce1ddc07589a0" translate="yes" xml:space="preserve">
          <source>comparison with &lt;code&gt;1&lt;/code&gt;. If &lt;code&gt;use_count&lt;/code&gt; returns 1, there are no other owners. (The deprecated member function &lt;code&gt;&lt;a href=&quot;unique&quot;&gt;unique()&lt;/a&gt;&lt;/code&gt; is provided for this use case.) In multithreaded environment, this does not imply that the object is safe to modify because accesses to the managed object by former shared owners may not have completed, and because new shared owners may be introduced concurrently, such as by &lt;code&gt;&lt;a href=&quot;../weak_ptr/lock&quot;&gt;std::weak_ptr::lock&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="944f8f98f4eecf371e409b3315defed4a5758ba0" translate="yes" xml:space="preserve">
          <source>comparison with &lt;code&gt;​0​&lt;/code&gt;. If &lt;code&gt;use_count&lt;/code&gt; returns zero, the shared pointer is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1d8519e85de7a2c71e1bdcc965ea96a19652708" translate="yes" xml:space="preserve">
          <source>comparisons where &lt;code&gt;N=&lt;a href=&quot;../iterator/distance&quot;&gt;std::distance&lt;/a&gt;(first, last)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a12005463700b94613f23bc6d9f7a10cc8ad845" translate="yes" xml:space="preserve">
          <source>compatible container to transfer the nodes from</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea6ad361388de5715763496a6c4e8f88c0396255" translate="yes" xml:space="preserve">
          <source>compatible with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da6c1aacd3639233b7dff93680bf2f0f1585be42" translate="yes" xml:space="preserve">
          <source>compile time</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33f00a196872852913a818ba46eed8aa670434bf" translate="yes" xml:space="preserve">
          <source>compile-time</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c77e8b4d3542afdf73cff538ee4a9aeaa278275" translate="yes" xml:space="preserve">
          <source>compile-time constant of specified type with specified value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7f7346844ecf89dd54561ce268a5450bbe9faa3" translate="yes" xml:space="preserve">
          <source>compl</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2e6715504f3d36c6f6d169cc2b1ec7c35b87b48" translate="yes" xml:space="preserve">
          <source>complementary error function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00d5d8358b416cdd56f529399ef93dbf10213158" translate="yes" xml:space="preserve">
          <source>complete enumeration type required</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2970cc89abca4b41131ff8eeeb2100f29f389aa7" translate="yes" xml:space="preserve">
          <source>complete non-array object type, capable of uniquely specifying a position in a file, including its multibyte parse state</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14f35dad119b82ab0afd3eeaa39461408052ade8" translate="yes" xml:space="preserve">
          <source>complete object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="896698dec8d5433e1d5e9587c33b7552804f1a83" translate="yes" xml:space="preserve">
          <source>complete type wasn't required</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ff16b36dc77810e63bda254427a1d6965fa127a" translate="yes" xml:space="preserve">
          <source>complex</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="feb780d262a9d4f8406a6a99fa47f4a4669e62a0" translate="yes" xml:space="preserve">
          <source>complex base</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c36e53f99f54ac18c347ff427d15a35162147fa" translate="yes" xml:space="preserve">
          <source>complex common logarithm with the branch cuts along the negative real axis</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="877c5c164a705feb9020481ee02ae4797364b4fe" translate="yes" xml:space="preserve">
          <source>complex natural logarithm with the branch cuts along the negative real axis</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45966cb8589bd033335c6c855a1eb8478f9ce24f" translate="yes" xml:space="preserve">
          <source>complex number to take the square root of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b216e6c886883d5214e02a2bd1d54db65b63a2b1" translate="yes" xml:space="preserve">
          <source>complex power, one or both arguments may be a complex number</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c79c4f1a80809ea61ac2dbc2bd7123c534d00706" translate="yes" xml:space="preserve">
          <source>complex square root in the range of the right half-plane</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88a65b4c05332dfe30b50765a92712a0b241e1e5" translate="yes" xml:space="preserve">
          <source>complex value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2d98f10509a44e7cc3c0546ca33ea7fc84f5bbb" translate="yes" xml:space="preserve">
          <source>complex value to assign</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d08946e603eb0277964f9dffb00266975512736" translate="yes" xml:space="preserve">
          <source>complexity</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4862ec8d998811eded5dc785df70e55c17ec9068" translate="yes" xml:space="preserve">
          <source>complexity guarantee was mistakenly omitted in C++11</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa4e5116f98e8b912eb2ac145c2df5baa4fd6167" translate="yes" xml:space="preserve">
          <source>complexity reaffirmed as linear</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0843accb03335985c7ec2096697a64318714a933" translate="yes" xml:space="preserve">
          <source>complexity requirement was wrong by a factor of 2</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f64d4c5f90ff8b39db9a5eb3a541743b8e28079d" translate="yes" xml:space="preserve">
          <source>composes a canonical path</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a364512b82a0b794131ec79312febc5d1ce477c4" translate="yes" xml:space="preserve">
          <source>composes a relative path</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffa45f7b79bf1ca57be22f1c95a3527da7e513be" translate="yes" xml:space="preserve">
          <source>composes an absolute path</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03b4cd9969d7ef4ed6ad9033d1036e8786c67038" translate="yes" xml:space="preserve">
          <source>composite pointer type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd9ffcb822e75e83c9ca0e62baea98eb5086f4e4" translate="yes" xml:space="preserve">
          <source>compound assignment</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd9ea692058106ed6d84820e83d4ae39d242ae07" translate="yes" xml:space="preserve">
          <source>compound assignment of two complex numbers or a complex and a scalar</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="332a2796625a9fb8e376806712eac815be4438a6" translate="yes" xml:space="preserve">
          <source>compound requirements</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="384fc176b990c2e3e9fcd45cf87220768aa94442" translate="yes" xml:space="preserve">
          <source>compound types (see also &lt;code&gt;&lt;a href=&quot;../types/is_compound&quot;&gt;std::is_compound&lt;/a&gt;&lt;/code&gt;):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f40041f7d09862cbfb635f0d1ff8d540a353649" translate="yes" xml:space="preserve">
          <source>compound-statement</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e60084d52211f85bd61b2d583cecc223ca72e46" translate="yes" xml:space="preserve">
          <source>computes absolute value of an integral value (|x|)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="021df390c326f5da619d551129700c5fb41f3f69" translate="yes" xml:space="preserve">
          <source>computes arc cosine (arccos(x))</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68809590c80e22d038752de14f44a6f0b9085ecf" translate="yes" xml:space="preserve">
          <source>computes arc cosine of a complex number (arccos(z))</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a44ba4e902e46b1c87dd62532109f91ed74e179d" translate="yes" xml:space="preserve">
          <source>computes arc sine (arcsin(x))</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbc994c4f68849f7dc71a09c6ae1be2e8dc6e6da" translate="yes" xml:space="preserve">
          <source>computes arc sine of a complex number (arcsin(z))</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6779197f8f1a6a7891e496aa425b2be5e8800adf" translate="yes" xml:space="preserve">
          <source>computes arc tangent (arctan(x))</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="227a7a4fe24f7e9931f8b67fe99c4aa2a1c95e58" translate="yes" xml:space="preserve">
          <source>computes arc tangent of a complex number (arctan(z))</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="747bd321ec0bffb772a7e36ab26d054696bdddcc" translate="yes" xml:space="preserve">
          <source>computes area hyperbolic cosine of a complex number</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3a9b5297a4b5795763abb7cb807af684e8619c6" translate="yes" xml:space="preserve">
          <source>computes area hyperbolic sine of a complex number</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3fad1a554f188a15f1f72b71946708304f71318" translate="yes" xml:space="preserve">
          <source>computes area hyperbolic tangent of a complex number</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63cfdefaded6f807e77204742e81d45f0f18ccb3" translate="yes" xml:space="preserve">
          <source>computes common (base</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5ff76893ffc7b330e65b9a6ddd69b8d08d29974" translate="yes" xml:space="preserve">
          <source>computes cosine (cos(x))</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="399f39d783a27e48547a7221f277c100d38ec3b4" translate="yes" xml:space="preserve">
          <source>computes cosine of a complex number (cos(z))</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53c042cfa97c597f90bac0bac11b1a574a7849f9" translate="yes" xml:space="preserve">
          <source>computes cubic root (3&amp;radic;x)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="782f25aa16651bd7314d5502fa17eeccd6cd8248" translate="yes" xml:space="preserve">
          <source>computes hyperbolic cosine (ch(x))</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1771f394e83e7c497d1fbb0cfa176a35f541db66" translate="yes" xml:space="preserve">
          <source>computes hyperbolic cosine of a complex number (ch(z))</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bed57749fced06ae3a7f5955c00646e572a00bd" translate="yes" xml:space="preserve">
          <source>computes hyperbolic sine (sh(x))</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4aed70376ad416c1c44246a0b01351df5ac8942d" translate="yes" xml:space="preserve">
          <source>computes hyperbolic sine of a complex number (sh(z))</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="286649a0176c3e175a83e3c957bc6a4bf5ab0be6" translate="yes" xml:space="preserve">
          <source>computes hyperbolic tangent of a complex number</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f510654c4da2cf32cd7bd7b07f6ce134346f0ec8" translate="yes" xml:space="preserve">
          <source>computes natural (base</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02ade521f2da1983fe5cdf919735be5cbd646bbb" translate="yes" xml:space="preserve">
          <source>computes quotient and remainder of integer division</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e9cc59cf6aed9d24dd91c07087929bf652b4746" translate="yes" xml:space="preserve">
          <source>computes sine (sin(x))</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="301486442537b8b37391c98b11fcc4682ab0c8fa" translate="yes" xml:space="preserve">
          <source>computes sine of a complex number (sin(z))</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="176d1047d728d06296939f28f73936a873460c8c" translate="yes" xml:space="preserve">
          <source>computes square root (&amp;radic;x)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="742bf89e3a879ce9f4d66c207ff3693e11f3293a" translate="yes" xml:space="preserve">
          <source>computes square root of the sum of the squares of two given numbers (&amp;radic;x2</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15a58958e8072fe0e83f2cac7f2a396514e1abb0" translate="yes" xml:space="preserve">
          <source>computes tangent (tan(x))</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="062652bbf469f3a627617d143d41375921ddfb83" translate="yes" xml:space="preserve">
          <source>computes tangent of a complex number (tan(z))</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efc6f6d00fe979f06530b18b188827bdeaada113" translate="yes" xml:space="preserve">
          <source>computes the associate types of an iterator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="336bb88e86e101be1cde04e06624437298db24c1" translate="yes" xml:space="preserve">
          <source>computes the difference between times</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b73b10bfc78c57fb24116d4893e3a37f16f7f237" translate="yes" xml:space="preserve">
          <source>computes the difference between two sets</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b4d350cef43ed067855e9321693808e2e51a253" translate="yes" xml:space="preserve">
          <source>computes the difference type of a &lt;a href=&quot;https://en.cppreference.com/mwiki/index.php?title=cpp/iterator/WeaklyIncrementable&amp;amp;action=edit&amp;amp;redlink=1&quot;&gt;&lt;code&gt;WeaklyIncrementable&lt;/code&gt;&lt;/a&gt; type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed2bec2910cc9d8305ec3479f2cc15d3f8797094" translate="yes" xml:space="preserve">
          <source>computes the differences between adjacent elements in a range</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="491c8a9049efa770a63e8a698fd243264a454e09" translate="yes" xml:space="preserve">
          <source>computes the distance between two iterator adaptors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7bc70e4e15d00a1048368469be6062c0298a61c" translate="yes" xml:space="preserve">
          <source>computes the inner product of two ranges of elements</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32a257ed9f0253ed9466b1e6e419561e7ae502f2" translate="yes" xml:space="preserve">
          <source>computes the intersection of two sets</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="465e254b7efd2d3c158e928e6b8dc7af05b08b05" translate="yes" xml:space="preserve">
          <source>computes the inverse hyperbolic cosine (arcosh(x))</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a95f036c2a46f3e4e71a9e10c5c6e92243c61209" translate="yes" xml:space="preserve">
          <source>computes the inverse hyperbolic sine (arsinh(x))</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4a9d84862893b62a29f18f8bf9c7f131f656450" translate="yes" xml:space="preserve">
          <source>computes the inverse hyperbolic tangent (artanh(x))</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17c416a6af32e6c316280ebd1bc134a97b90cbcf" translate="yes" xml:space="preserve">
          <source>computes the partial sum of a range of elements</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf453890a41f50b044d32f91e4f0509426181a17" translate="yes" xml:space="preserve">
          <source>computes the result of invoking a callable object on the result of dereferencing some set of &lt;a href=&quot;https://en.cppreference.com/mwiki/index.php?title=cpp/iterator/Readable&amp;amp;action=edit&amp;amp;redlink=1&quot;&gt;&lt;code&gt;Readable&lt;/code&gt;&lt;/a&gt; types</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32bdc7590c5095d5c2065bf78ac1fbb3a611a87e" translate="yes" xml:space="preserve">
          <source>computes the symmetric difference between two sets</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dfd2c98919761f76aad7be14db5473a9f8c080d" translate="yes" xml:space="preserve">
          <source>computes the union of two sets</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc1d86e27660898fdf1373a3a856ccfda666ab11" translate="yes" xml:space="preserve">
          <source>computes the value of the operand of an operator (such prvalue has no</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="051c1d9cf4f647eb6679321cb73364e9b7602ffa" translate="yes" xml:space="preserve">
          <source>computes the value type of a &lt;a href=&quot;https://en.cppreference.com/mwiki/index.php?title=cpp/iterator/Readable&amp;amp;action=edit&amp;amp;redlink=1&quot;&gt;&lt;code&gt;Readable&lt;/code&gt;&lt;/a&gt; type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2c58a9ec22ddf58e47343e507e633e3cdaba537" translate="yes" xml:space="preserve">
          <source>concatenates a certain amount of characters of two strings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82bd191fcf9d080b5ad23ed696ecf734a21767b0" translate="yes" xml:space="preserve">
          <source>concatenates two paths with a directory separator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bf4b631bba557701acb962402ae08c59fa9a743" translate="yes" xml:space="preserve">
          <source>concatenates two paths without introducing a directory separator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44f9336fc620658af6617ef3fe616c41934d1833" translate="yes" xml:space="preserve">
          <source>concatenates two strings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="160d77a4b37dec417726a5949f64c3ad65c4d3e1" translate="yes" xml:space="preserve">
          <source>concatenates two strings or a string and a char</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3523382e96c452e8d20c4e1235047d889e7149c" translate="yes" xml:space="preserve">
          <source>concatoperator+=</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49376c9cc5b0e14fd884d69409e4ada19cf26a5d" translate="yes" xml:space="preserve">
          <source>concept</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35d5877162ea847ae3802f8a5852ba297035e3f6" translate="yes" xml:space="preserve">
          <source>concept-name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efb04f17ddbf8f4b46ddb522ab2c7a591d9a88a3" translate="yes" xml:space="preserve">
          <source>concepts</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e2c03dd689123cbf1a4e230e36fb32ae66f4bbf" translate="yes" xml:space="preserve">
          <source>concurrent forward progress</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c84732627eaa01f101310cf335d647b16850be0b" translate="yes" xml:space="preserve">
          <source>concurrent forward progress guarantee</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f6ac45d655a5f0482d41f9448c610204725de71" translate="yes" xml:space="preserve">
          <source>concurrently, with no interference and no synchronization requirements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9b3c21e895be55922fa8fbdd5f7a004769b4fca" translate="yes" xml:space="preserve">
          <source>cond</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afad9a69767e7c24ecda5af9187202e1b4b070b2" translate="yes" xml:space="preserve">
          <source>condition</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a98cad6a2032a9b7eb043a6e08be3700becadd5d" translate="yes" xml:space="preserve">
          <source>condition_variable</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90c82f735674f377dcf05206a9c39dce55b04c37" translate="yes" xml:space="preserve">
          <source>condition_variable_any</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8db74851106a36fd1bb6bca2a63409a5e13bcd5b" translate="yes" xml:space="preserve">
          <source>conditional</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9032e28ae37e6659a3addbf9daac7f92f057f49" translate="yes" xml:space="preserve">
          <source>conditional explicit specifiers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="441fe8c65a0cee52aad4cbc1b820a43dedb3d5f8" translate="yes" xml:space="preserve">
          <source>conditional expression where both the second and the third operands are one of these expressions,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb996269eff67c0452e0538cc0f31775fb604799" translate="yes" xml:space="preserve">
          <source>conditional operator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8eb525d26e1bfccf25865e02eef17703b609c66" translate="yes" xml:space="preserve">
          <source>conditions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebc44ec3bb9c25d4bb6ed5be2f0ce4fb142d723b" translate="yes" xml:space="preserve">
          <source>conditions of &lt;a href=&quot;../language/if#constexpr_if&quot;&gt;constexpr if statements&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae214513a0d21125291c9566dfdb0fcb1fdd1d2b" translate="yes" xml:space="preserve">
          <source>conflict</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5047aaac53a437f67a5f1ecbc9dbbdd3f29f0687" translate="yes" xml:space="preserve">
          <source>conj</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d4db13a5f36335c5504270183a5515c34cf64a7" translate="yes" xml:space="preserve">
          <source>conjunction</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da4f063c733c2c650fdd295748735efc2e7ecc9b" translate="yes" xml:space="preserve">
          <source>consecutive</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b343b03d62e249e9c41fe8b4660bde8ab7708131" translate="yes" xml:space="preserve">
          <source>consists of 96 characters:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4527a343bb89fb554e4270748eeb0cc15b115926" translate="yes" xml:space="preserve">
          <source>consists of a simple type specifier or a typedef specifier (in other words, a single-word type name: &lt;code&gt;unsigned int(expression)&lt;/code&gt; or &lt;code&gt;int*(expression)&lt;/code&gt; are not valid), followed by a single expression in parentheses. This cast expression is exactly equivalent to the corresponding C-style cast expression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8130e3138289f3a70110498f04ea74c9b2af7509" translate="yes" xml:space="preserve">
          <source>consists of every non-static data member and bit field(since C++14) (in the example above, &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt; are layout-compatible).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b42f3f6f796fa3cfcb6b1b8d49c7bcccc3a7164c" translate="yes" xml:space="preserve">
          <source>const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e379491ff624411ab20f2922fe3753b90d42aaec" translate="yes" xml:space="preserve">
          <source>const T&amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="159da7407f8b6071b0d636efcd09a0d7c210bf24" translate="yes" xml:space="preserve">
          <source>const bool&lt;code&gt;intl&lt;/code&gt;(static)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83a383054bef1ee1ae2b9c5531420dfccad272f0" translate="yes" xml:space="preserve">
          <source>const iterator pointing to T</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4708e2367577df7e7da77179ba250b295028225e" translate="yes" xml:space="preserve">
          <source>const iterators denoting a valid range in &lt;code&gt;a&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c50df45ec95f5ae4d4cefe12762f0a868da8ab1b" translate="yes" xml:space="preserve">
          <source>const prvalues (only allowed for class types) and const xvalues do not bind to T&amp;amp;&amp;amp; overloads, but they bind to the const T&amp;amp;&amp;amp; overloads, which are also classified as &quot;move constructor&quot; and &quot;move assignment operator&quot; by the standard, satisfying the definition of &quot;can be moved from&quot; for the purpose of this classification. However, such overloads cannot modify their arguments and are not used in practice; in their absence const prvalues and const xvalues bind to const T&amp;amp; overloads.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36bc2f019d55ff109bcf2c0b6d4eca86c30f79a1" translate="yes" xml:space="preserve">
          <source>const qualifier does not affect the linkage of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdaad78fa2db54df12b34f02d11f1f5c9f76ee20" translate="yes" xml:space="preserve">
          <source>const-, volatile-, and ref-qualified member functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="babae9661c24e811a371051f8d96c0ba25ac1d85" translate="yes" xml:space="preserve">
          <source>const-qualified member functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54bf35f66572a040a9b488797a72346550fdb6de" translate="yes" xml:space="preserve">
          <source>const-volatility (cv) specifiers and qualifiers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17942f67cd9bd3d49fab74ec403aa7e2299a2a52" translate="yes" xml:space="preserve">
          <source>const/volatile qualification which apply to the pointer that is being declared (not to the pointed-to type, whose qualifications are part of decl-specifier-seq)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a5f00b31efe5cc5d4c26da190365308a57a76f6" translate="yes" xml:space="preserve">
          <source>const/volatile qualification, only allowed in non-static member function declarations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c992a27fcc00c9d6c47c7afbc1911afa2690b9f1" translate="yes" xml:space="preserve">
          <source>const_cast</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="950cb09313d9b5216607ef3bdb00d5046e1ff06c" translate="yes" xml:space="preserve">
          <source>const_cast conversion</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5a4ecc238c4fdfb894a830836f2d82c2d502779" translate="yes" xml:space="preserve">
          <source>const_iterator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d810ca965a236c6f46a932efff918a4b3a191918" translate="yes" xml:space="preserve">
          <source>constant</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="105e3ca4aed807967b9bfd81d518ec536edee057" translate="yes" xml:space="preserve">
          <source>constant &lt;a href=&quot;../named_req/forwarditerator&quot;&gt;LegacyForwardIterator&lt;/a&gt; whose value type is &lt;code&gt;std::chrono::tzdb&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="481cfdbe9db93286d960585445db5bfe8a07869b" translate="yes" xml:space="preserve">
          <source>constant expression</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="917614fcd42e14483bf08232890b7dc77410d9ab" translate="yes" xml:space="preserve">
          <source>constant expressions with zero value such as 1-1 were allowed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d284cb723c355fffeb3025c0f44a39b752ee352" translate="yes" xml:space="preserve">
          <source>constant if &lt;code&gt;m == rv.get_allocator()&lt;/code&gt;, otherwise linear</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a1d035979df3b1c1c802100217deccb312affd5" translate="yes" xml:space="preserve">
          <source>constant initialization</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc97b2c73ac250ed3f3c7a0766b0fa03a8ac1a11" translate="yes" xml:space="preserve">
          <source>constant initialization of an atomic variable of static storage duration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd1eaf49687b92ebb2f15c13fc97b120d9526602" translate="yes" xml:space="preserve">
          <source>constant iterator type whose value type is &lt;code&gt;T&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36374ded6e157dca73d6cf18ba0dc99cc3a2014b" translate="yes" xml:space="preserve">
          <source>constant pointer to constant object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e95fc9e009951a1e64102bcb03c45bdf2b9acde" translate="yes" xml:space="preserve">
          <source>constant pointer to object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9397f49251edd90aaf290f4c5fcade825e21b457" translate="yes" xml:space="preserve">
          <source>constant.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1973b4e00306c01206b6ac90109baa9d4027bcd4" translate="yes" xml:space="preserve">
          <source>constant_expression</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45c6e56f55b59ff3ef624ba090bc9b78a329e2ec" translate="yes" xml:space="preserve">
          <source>consteval</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a580315798464f87bb9098af4897b7229e0a718" translate="yes" xml:space="preserve">
          <source>consteval specifier</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45d05cf70a54895b549d2da98276e41d820f8df3" translate="yes" xml:space="preserve">
          <source>consteval specifier (since C++20)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1be76e73ed8e6eb79747d24838c567dfe1db883e" translate="yes" xml:space="preserve">
          <source>constexpr</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f545b0ad29657fdc09b56d193152ba696be368d2" translate="yes" xml:space="preserve">
          <source>constexpr &lt;code&gt;&lt;a href=&quot;memory/addressof&quot;&gt;std::addressof&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed7418b3d8ca4f6f87cc74ed308310dae1afd2a9" translate="yes" xml:space="preserve">
          <source>constexpr T value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e4d23a79ceeb12ae637c94e378f5a86854bdf03" translate="yes" xml:space="preserve">
          <source>constexpr UIntType default_seed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ab8a9d63456a05844a64f69df4ece8f658d262a" translate="yes" xml:space="preserve">
          <source>constexpr UIntType increment</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e102fa607fc2acc6cb52d90dc885a74119fc1a03" translate="yes" xml:space="preserve">
          <source>constexpr UIntType initialization_multiplier</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37b0e76fcf5eff9d16fb38ecba79b82b4ec42749" translate="yes" xml:space="preserve">
          <source>constexpr UIntType modulus</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="955f1f318e4202139b874bd954275d955931bec4" translate="yes" xml:space="preserve">
          <source>constexpr UIntType multiplier</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2dde76b68f5f56f26825b3a3603232bf8f8b2efe" translate="yes" xml:space="preserve">
          <source>constexpr UIntType tempering_b</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af7f37359a284610864c1c13012af2c410eefd5d" translate="yes" xml:space="preserve">
          <source>constexpr UIntType tempering_c</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff447f4081b662897edaefed6adc68b517dda83f" translate="yes" xml:space="preserve">
          <source>constexpr UIntType tempering_d</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8af28142aac885eae97f1fbca199616eb53bbed" translate="yes" xml:space="preserve">
          <source>constexpr UIntType xor_mask</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d3562103d22eae143cffd18fa16184d8b8715d3" translate="yes" xml:space="preserve">
          <source>constexpr bool is_steady</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd048bda04720f01816d834a0e216c935dfb25ed" translate="yes" xml:space="preserve">
          <source>constexpr constructors for non-literal types were not allowed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b2f9110469a40c96190a883b75bbc1f7f2e7058" translate="yes" xml:space="preserve">
          <source>constexpr if statement</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0728f36e9eb2b1e379190030e462a392c2c8bbd2" translate="yes" xml:space="preserve">
          <source>constexpr if statements</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c25894af99b953b71e025b8b55041b046404523f" translate="yes" xml:space="preserve">
          <source>constexpr int ambiguous</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6aa3e84da564c90a3240a3d32f4c35b60f793a9b" translate="yes" xml:space="preserve">
          <source>constexpr int nonexistent</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c2b273a135ab0596a478273d983cadae1670ffc" translate="yes" xml:space="preserve">
          <source>constexpr int unique</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dc3957707a5da58ab1bfdce96753edec9a033e5" translate="yes" xml:space="preserve">
          <source>constexpr intmax_t den</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a1156f9f1f26078b2f9625f548b0ef409099f3c" translate="yes" xml:space="preserve">
          <source>constexpr intmax_t num</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8904573ab3d1c018c29fa7480d78ed3b77b9f3bc" translate="yes" xml:space="preserve">
          <source>constexpr size_t block_size</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20b4ba4984269ddfc1e1759a59f6a1180da8126d" translate="yes" xml:space="preserve">
          <source>constexpr size_t long_lag</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fb96b219b6da7f54b06217886a266db85385406" translate="yes" xml:space="preserve">
          <source>constexpr size_t mask_bits</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52bc86aa4a617376b9d003d54b53478008beaa62" translate="yes" xml:space="preserve">
          <source>constexpr size_t shift_size</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d19e08e43b332c32c8771a90626c668481c869ac" translate="yes" xml:space="preserve">
          <source>constexpr size_t short_lag</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="333ea39e5e69805e34e8012e7249f966449e2e70" translate="yes" xml:space="preserve">
          <source>constexpr size_t state_size</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c24b4435be7e862a0c2fe647932537e94abd040" translate="yes" xml:space="preserve">
          <source>constexpr size_t table_size</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3aca6ce0ab5c173ebef240ca133158eeb882c686" translate="yes" xml:space="preserve">
          <source>constexpr size_t tempering_l</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7eb95714bf1f9361807678955f115f570a9d6724" translate="yes" xml:space="preserve">
          <source>constexpr size_t tempering_s</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da2fbff51c52fb1a15340eb5bdd3e46af09745a3" translate="yes" xml:space="preserve">
          <source>constexpr size_t tempering_t</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a84a876aabd95bd361324aada81ec4e03f590b26" translate="yes" xml:space="preserve">
          <source>constexpr size_t tempering_u</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="647b7169713d089dea528207bfa55a22486fc15b" translate="yes" xml:space="preserve">
          <source>constexpr size_t used_size</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90b13a5375da8664a2068cd9bc55dbf151e02f79" translate="yes" xml:space="preserve">
          <source>constexpr size_t word_size</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c119459887dc3d06e89f7ec14dac32a751c8aca3" translate="yes" xml:space="preserve">
          <source>constexpr specifier</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="092a598e6c526b3fe02c1a19070bbcc94f67b510" translate="yes" xml:space="preserve">
          <source>constexpr specifier (since C++11)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51fbc33ed2286fb48ac9d132c60282ed43460947" translate="yes" xml:space="preserve">
          <source>constexpr std::hardware_{constructive, destructive}_interference_size</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="238b4a510798b84b85ebfe01eeb0aca06fdf0086" translate="yes" xml:space="preserve">
          <source>constexpr user-defined conversions (so a class can be used where integral type is expected)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d100b91f2fe2536900c45d154aa8f1b50f080f35" translate="yes" xml:space="preserve">
          <source>constexpr value_type preferred_separator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c5b5aa677b06d3c27da0c8f90213bdec523d273" translate="yes" xml:space="preserve">
          <source>constness</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d91f8b4d5c1c1e415a792285fe856d2415436c5" translate="yes" xml:space="preserve">
          <source>constrained</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93ac66362b1103a1c98ce1ebd2914f01e879cc19" translate="yes" xml:space="preserve">
          <source>constrained to not accept pairs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f454fd4e87ea87fb0c5329cac667d00f8adf8be" translate="yes" xml:space="preserve">
          <source>constraint</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f6903e36a8b57229e2b3225347e37e17b5821a1" translate="yes" xml:space="preserve">
          <source>constraint &lt;code&gt;Q&lt;/code&gt; if it can be proven that &lt;code&gt;P&lt;/code&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Logical_consequence&quot;&gt;implies&lt;/a&gt;&lt;code&gt;Q&lt;/code&gt; up to the identity of atomic constraints in P and Q. (Types and expressions are not analyzed for equivalence: &lt;code&gt;N &amp;gt;= 0&lt;/code&gt; does not subsume &lt;code&gt;N &amp;gt; 0&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbec076eb4ef79bc179ba4a6adc4debbf549fb61" translate="yes" xml:space="preserve">
          <source>constraint added</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb507701abdc950687005671b8c29364cc639859" translate="yes" xml:space="preserve">
          <source>constraint expressions in &lt;a href=&quot;../language/constraints#Concepts&quot;&gt;concept&lt;/a&gt; definitions, &lt;a href=&quot;../language/constraints#Nested_requirements&quot;&gt;nested requirements&lt;/a&gt;, and &lt;a href=&quot;../language/constraints#Requires_clauses&quot;&gt;requires clauses&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf821c4f185120c497b50baa3db8ed892206e89f" translate="yes" xml:space="preserve">
          <source>constraint(C++20)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0311daa3b6bfbd134d0aa0d16cb153b4595662cf" translate="yes" xml:space="preserve">
          <source>constraint-expression</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b012113a2ee8300b6d1ed3f9b62d06efc19024ba" translate="yes" xml:space="preserve">
          <source>construct</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e727b5d82ed8c2c907b04f40429d46c186d6d94" translate="yes" xml:space="preserve">
          <source>construct a &lt;code&gt;&lt;a href=&quot;../io/basic_ostringstream&quot;&gt;std::basic_ostringstream&lt;/a&gt;&amp;lt;CharT, Traits, Alloc&amp;gt;&lt;/code&gt;&lt;code&gt;os&lt;/code&gt; (where &lt;code&gt;Traits&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;../string/char_traits&quot;&gt;std::char_traits&lt;/a&gt;&amp;lt;CharT&amp;gt;&lt;/code&gt; and &lt;code&gt;Alloc&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;../memory/allocator&quot;&gt;std::allocator&lt;/a&gt;&amp;lt;CharT&amp;gt;&lt;/code&gt; for (1,2));</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="498dff46741098db358626ac944e124afa557340" translate="yes" xml:space="preserve">
          <source>construction of &lt;code&gt;It&lt;/code&gt; with a singular value;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a1c1339801686eb9bf9a9ac5b4719b8c8b8fc9b" translate="yes" xml:space="preserve">
          <source>constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3716a753ded0f42255540003e54922d7f1261c96" translate="yes" xml:space="preserve">
          <source>constructor argument for the outer allocator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d301ca33e657a3e1bdbff800a14cacf066b46edb" translate="yes" xml:space="preserve">
          <source>constructor arguments for the inner allocators</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a541a78eef3a38ff5ef6b7e37c6d9a51ec3c51c" translate="yes" xml:space="preserve">
          <source>constructor arguments to use when constructing the new value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12d8e9ac3f1a61e75505cd50c03521063f87b89e" translate="yes" xml:space="preserve">
          <source>constructors made conditionally-explicit</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9495c0a91fa01e71d45136779f017892420eb2e1" translate="yes" xml:space="preserve">
          <source>constructors removed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d19c31ad16a56737e6364d167f07a4f25508366" translate="yes" xml:space="preserve">
          <source>constructors taking &lt;code&gt;OuterA2&lt;/code&gt; weren't constrained, interfering with metaprogramming</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="686955d352c2b8d2c4db933a2217bd66b4446eda" translate="yes" xml:space="preserve">
          <source>constructs a &lt;code&gt; basic_string_view&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0dfb2a06f64e4159e327f264112c27960e8983d" translate="yes" xml:space="preserve">
          <source>constructs a &lt;code&gt; span&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eed5c8cc7eb5459261d3813dbf978a0a0b20e315" translate="yes" xml:space="preserve">
          <source>constructs a &lt;code&gt;basic_string&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ac717a82bcb447671c65cd08267551f3a0348e9" translate="yes" xml:space="preserve">
          <source>constructs a &lt;code&gt;day&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="181589edafc72b4cdd4167fd0fd412dba2114157" translate="yes" xml:space="preserve">
          <source>constructs a &lt;code&gt;default_delete&lt;/code&gt; object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3d900997ab63a4d6148ccfcec62c46fa05907b7" translate="yes" xml:space="preserve">
          <source>constructs a &lt;code&gt;file_status&lt;/code&gt; object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b16665a0c7c017570f7e9c4ea481488bddb7f395" translate="yes" xml:space="preserve">
          <source>constructs a &lt;code&gt;gslice_array&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5606f9a059b76b2813ccc2c6b0cdde665fffaf8" translate="yes" xml:space="preserve">
          <source>constructs a &lt;code&gt;indirect_array&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5434a78d8de5fbf63dc687427c042f62f34d00d" translate="yes" xml:space="preserve">
          <source>constructs a &lt;code&gt;mask_array&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="453a035aaa2fc7978dc4437535fbec5617300816" translate="yes" xml:space="preserve">
          <source>constructs a &lt;code&gt;month&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="869795c09fd441ec8080c1c40ab8a55f2cd9044e" translate="yes" xml:space="preserve">
          <source>constructs a &lt;code&gt;month_day&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7396c072753065c76754f2c03b276246975a282" translate="yes" xml:space="preserve">
          <source>constructs a &lt;code&gt;month_day_last&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4296dc68becf5ab457750450934ebaf0bae68b78" translate="yes" xml:space="preserve">
          <source>constructs a &lt;code&gt;month_weekday&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb5e836e380fa74266ba5e1fe5e62205d3ebc9c1" translate="yes" xml:space="preserve">
          <source>constructs a &lt;code&gt;month_weekday_last&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efa2e31a1079b7332848fb53ca1d63035bfd8a9f" translate="yes" xml:space="preserve">
          <source>constructs a &lt;code&gt;path&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a01586e329133641e89b831727827e702297ec3" translate="yes" xml:space="preserve">
          <source>constructs a &lt;code&gt;regex_error&lt;/code&gt; object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58424bc47f699957150956c604d6ffe4e7f33401" translate="yes" xml:space="preserve">
          <source>constructs a &lt;code&gt;shared_lock&lt;/code&gt;, optionally locking the supplied mutex</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f8e9a5fb9ee70554ed5001e0a2cce4da53338f8" translate="yes" xml:space="preserve">
          <source>constructs a &lt;code&gt;slice_array&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a78b0e9eb3e2401e53864def141d8326c515a17a" translate="yes" xml:space="preserve">
          <source>constructs a &lt;code&gt;time_of_day&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7864f17ad96878a1163d03fa0eb1af74b7903b3c" translate="yes" xml:space="preserve">
          <source>constructs a &lt;code&gt;unique_lock&lt;/code&gt;, optionally locking the supplied mutex</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd158cec3a2b221fdf668d9481ba36ed79480880" translate="yes" xml:space="preserve">
          <source>constructs a &lt;code&gt;weekday&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f7991fb965c8798261b4c30e32e9644df902701" translate="yes" xml:space="preserve">
          <source>constructs a &lt;code&gt;weekday_indexed&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a791cafd9bae5340141470253cc383f120ba232" translate="yes" xml:space="preserve">
          <source>constructs a &lt;code&gt;weekday_last&lt;/code&gt; object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8601ade402ba4ac985c5e2b2759bc79b7d045871" translate="yes" xml:space="preserve">
          <source>constructs a &lt;code&gt;year&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="398f7769b78fadf476376e383ff8b00a0cc6c4ce" translate="yes" xml:space="preserve">
          <source>constructs a &lt;code&gt;year_month&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc1806138f9a40ddea21ce0a90593418951f7a1b" translate="yes" xml:space="preserve">
          <source>constructs a &lt;code&gt;year_month_day&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8919f0dae60b8c8b12f0d5aaa7080b8362274b1e" translate="yes" xml:space="preserve">
          <source>constructs a &lt;code&gt;year_month_day_last&lt;/code&gt; object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcc015205da40109c3f7bffa71a2ca46ec50cb4f" translate="yes" xml:space="preserve">
          <source>constructs a &lt;code&gt;year_month_weekday&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6592c2b46abc1504fd60dfdabeba0fa2912548d" translate="yes" xml:space="preserve">
          <source>constructs a &lt;code&gt;year_month_weekday_last&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa4b23a984cfec8a3a34b35d9654b0e7916aebf9" translate="yes" xml:space="preserve">
          <source>constructs a &lt;code&gt;zoned_time&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a896e5bda39d9119db2c4305fdc92f0f0ee4300d" translate="yes" xml:space="preserve">
          <source>constructs a basic_filebuf object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc82aed7c59c9a36e09b867e05333354292a83d5" translate="yes" xml:space="preserve">
          <source>constructs a basic_osyncstream</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8a5413ece4566eb46a01a86eeea36e5cebdf169" translate="yes" xml:space="preserve">
          <source>constructs a basic_streambuf object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="234ae6b66925a8fc7a45324bca3609028b7ae8bc" translate="yes" xml:space="preserve">
          <source>constructs a basic_stringbuf object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a2b04f9a9d1b87d5c2365877b9dc49dc185d067" translate="yes" xml:space="preserve">
          <source>constructs a basic_syncbuf object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="677252a43a87fb2a05b80458dbe6eca34d716c70" translate="yes" xml:space="preserve">
          <source>constructs a complex number</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a39c99b3e54ef61b6bdec5e9c6a2dac866840d58" translate="yes" xml:space="preserve">
          <source>constructs a complex number from magnitude and phase angle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e07503a5d64d83c08e2462a7d6bd842007f9e1c4" translate="yes" xml:space="preserve">
          <source>constructs a directory entry</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec6c546dd5db0166669ed505616f41325e24ef3a" translate="yes" xml:space="preserve">
          <source>constructs a directory iterator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34f6f6742964ac671ef8da26994a8aee9890da73" translate="yes" xml:space="preserve">
          <source>constructs a future error code</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95b536a8c34d4a5f961bcbbc4cc9dbcc3e02427c" translate="yes" xml:space="preserve">
          <source>constructs a future error_condition</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d63afeb454875c8a94cbe98eadf6bc4c0dfa11f8" translate="yes" xml:space="preserve">
          <source>constructs a generic slice</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74f533493595e019204e9d1f6d5acb1e0a9e94fd" translate="yes" xml:space="preserve">
          <source>constructs a hash function object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c013a66a2d9cd46c4b027eb002e167aab7215135" translate="yes" xml:space="preserve">
          <source>constructs a locale with compile-time identified facet copied from another locale</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3f3eb0961780ba44deb1569d0888482405a13d7" translate="yes" xml:space="preserve">
          <source>constructs a lock_guard, optionally locking the given mutex</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83bcc1840e6eb3d9a623bc851d5bb835ae3393f8" translate="yes" xml:space="preserve">
          <source>constructs a nested_exception</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49c23165411783cf1507d51818f9844a4a54f031" translate="yes" xml:space="preserve">
          <source>constructs a new &lt;code&gt;&lt;a href=&quot;ctype&quot;&gt;std::ctype&lt;/a&gt;&amp;lt;char&amp;gt;&lt;/code&gt; facet</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9bec2e3c8470e925fd93ba020756813f94d810c" translate="yes" xml:space="preserve">
          <source>constructs a new &lt;code&gt;back_insert_iterator&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b797a3891b468edc557b39c378d75a04777eb598" translate="yes" xml:space="preserve">
          <source>constructs a new &lt;code&gt;bad_typeid&lt;/code&gt; object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b615c035ae0613a2465adcec5b10c9b3494dd36" translate="yes" xml:space="preserve">
          <source>constructs a new &lt;code&gt;codecvt_byname&lt;/code&gt; facet</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31abb151ae7cef4dc71d594537eeea0fa502839e" translate="yes" xml:space="preserve">
          <source>constructs a new &lt;code&gt;codecvt_utf16&lt;/code&gt; facet</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67b45e41dfc98f60afffc3a35ca113e806669026" translate="yes" xml:space="preserve">
          <source>constructs a new &lt;code&gt;codecvt_utf8&lt;/code&gt; facet</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33aa6408107b7855990ae82c58faab9e4ab729bb" translate="yes" xml:space="preserve">
          <source>constructs a new &lt;code&gt;codecvt_utf8_utf16&lt;/code&gt; facet</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="486a19b03d8a65ddbd4c4de4863eeff6dc40d9a6" translate="yes" xml:space="preserve">
          <source>constructs a new &lt;code&gt;collate_byname&lt;/code&gt; facet</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="716fd8d1b60d34d9629407d79676f04b376c0b32" translate="yes" xml:space="preserve">
          <source>constructs a new &lt;code&gt;ctype_byname&lt;/code&gt; facet</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8195c0a6f5aa3f35a3c66db036a37b46b9a15e7b" translate="yes" xml:space="preserve">
          <source>constructs a new &lt;code&gt;front_insert_iterator&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="059028c14a09bc5f4f70913287b199290f562724" translate="yes" xml:space="preserve">
          <source>constructs a new &lt;code&gt;insert_iterator&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="334fbbabe174545b4e1c1aa45752b892ddf3c693" translate="yes" xml:space="preserve">
          <source>constructs a new &lt;code&gt;istreambuf_iterator&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84f0b561ab01c51c907dae7b8a0acb3949b8b9c4" translate="yes" xml:space="preserve">
          <source>constructs a new &lt;code&gt;memory_resource&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="feacd237477027b5b8796e1ef7e2dd57d6ad3855" translate="yes" xml:space="preserve">
          <source>constructs a new &lt;code&gt;messages_byname&lt;/code&gt; facet</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b029c5693fc739ddd72d4425db036a1a90c68719" translate="yes" xml:space="preserve">
          <source>constructs a new &lt;code&gt;moneypunct_byname&lt;/code&gt; facet</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="264325390e802934b415c0c427788b4f1e7d0246" translate="yes" xml:space="preserve">
          <source>constructs a new &lt;code&gt;numpunct_byname&lt;/code&gt; facet</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acaeac73191dab43b9ed6fff825aaf7ac5a36987" translate="yes" xml:space="preserve">
          <source>constructs a new &lt;code&gt;ostreambuf_iterator&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41db2f0f62478e8fa141948437be528ba79f069c" translate="yes" xml:space="preserve">
          <source>constructs a new &lt;code&gt;pointer_to_binary_function&lt;/code&gt; object with the supplied function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d51d6d426e90673827be82302f2a181d23c09edb" translate="yes" xml:space="preserve">
          <source>constructs a new &lt;code&gt;pointer_to_unary_function&lt;/code&gt; object with the supplied function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6ef2007954d986ca2fb896b38476dc76cb84408" translate="yes" xml:space="preserve">
          <source>constructs a new &lt;code&gt;regex_iterator&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c96281f78ef326d822b6d5661053c1af10fdbdfb" translate="yes" xml:space="preserve">
          <source>constructs a new &lt;code&gt;regex_token_iterator&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e35f8227b18d610f7a1bbe2c0dafd849a326d8f" translate="yes" xml:space="preserve">
          <source>constructs a new &lt;code&gt;std::function&lt;/code&gt; instance</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca9bb7ac7ccac819fa7c7ce1647b6f3812cd26f0" translate="yes" xml:space="preserve">
          <source>constructs a new &lt;code&gt;time_get_byname&lt;/code&gt; facet</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ea8de539a217f5db8cd560365e48781ce0b1384" translate="yes" xml:space="preserve">
          <source>constructs a new &lt;code&gt;time_put_byname&lt;/code&gt; facet</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4db31b2bc58aba10c5daaa8d1ac9d1c453079f20" translate="yes" xml:space="preserve">
          <source>constructs a new &lt;code&gt;tuple&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c19e7df8d6c09994c82325bb049890204c8fa83" translate="yes" xml:space="preserve">
          <source>constructs a new &lt;code&gt;unique_ptr&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5c5199cbddf1a29eca76633356a2159b71866c8" translate="yes" xml:space="preserve">
          <source>constructs a new &lt;code&gt;value_compare&lt;/code&gt; object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebe2e1e8e418a96b759ff9e039f5902585e29aa0" translate="yes" xml:space="preserve">
          <source>constructs a new bad_cast object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c6c9eaadc28245f0d7491240161844c7cf06c99" translate="yes" xml:space="preserve">
          <source>constructs a new binary_negate object with the supplied predicate</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d280428b0bbf240ea0de48007324487094a62799" translate="yes" xml:space="preserve">
          <source>constructs a new codecvt facet</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15563c45e77aff8bb3c37071bfbd97b359f5ddd1" translate="yes" xml:space="preserve">
          <source>constructs a new collate facet</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45e540b09650ddbe6a01324ba11710c91bd35c9f" translate="yes" xml:space="preserve">
          <source>constructs a new ctype facet</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ceaf570f2dd72dbcbdc61e0e5b7d93dcd1ecae24" translate="yes" xml:space="preserve">
          <source>constructs a new ctype_byname&amp;lt;char&amp;gt; facet</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41296ea4d9aab643600da97eeb96274221ae0cfb" translate="yes" xml:space="preserve">
          <source>constructs a new facet with specified reference count</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ca7736ee1ebb755748e10308747dff847f1e83b" translate="yes" xml:space="preserve">
          <source>constructs a new id</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5b7b779236758ea904e3d4637f0139932543eb1" translate="yes" xml:space="preserve">
          <source>constructs a new istream_iterator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db081ec3baef96183ea03bf139d8b828d8313771" translate="yes" xml:space="preserve">
          <source>constructs a new iterator adaptor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e02161c3c6658c3c1205383860f815557c0065b" translate="yes" xml:space="preserve">
          <source>constructs a new locale</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf19a852e65c62236e2d72458978537dc130be0a" translate="yes" xml:space="preserve">
          <source>constructs a new messages facet</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1ca77bdff17d01a871a013598ee38cd3d1404c8" translate="yes" xml:space="preserve">
          <source>constructs a new money_get facet</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69fc8eb07b52915bf55f20bf6107f8b08dab7e5c" translate="yes" xml:space="preserve">
          <source>constructs a new money_put facet</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4aff908476e29b1289d9734d2880b7cc9fdba339" translate="yes" xml:space="preserve">
          <source>constructs a new moneypunct facet</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cae02487a87c44eac971cf2aee46aa9e71379e82" translate="yes" xml:space="preserve">
          <source>constructs a new num_get facet</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e95773580967929e3330a455224afbfa7fd358c8" translate="yes" xml:space="preserve">
          <source>constructs a new num_put facet</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbf52657270caaeb65a1350fd60344063e5bbf7c" translate="yes" xml:space="preserve">
          <source>constructs a new numpunct facet</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="821b7607c16a80c993c6afa003e3a1b746b6ce25" translate="yes" xml:space="preserve">
          <source>constructs a new ostream_iterator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29d9b52863a5610d8f9c0b2d1f4cc2a3d5dca4c2" translate="yes" xml:space="preserve">
          <source>constructs a new time point</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b88c586645f9677d75cabf933049f6045444b809" translate="yes" xml:space="preserve">
          <source>constructs a new time_get facet</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="237e0d63fb50ae522727e8e2a5d4518904ef51f5" translate="yes" xml:space="preserve">
          <source>constructs a new time_put facet</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="030ac330576765821dcfbcaf37306beac907e3ba" translate="yes" xml:space="preserve">
          <source>constructs a new unary_negate object with the supplied predicate</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9197ededc0ebcaa086220b9ec38b2095cddc07a3" translate="yes" xml:space="preserve">
          <source>constructs a new wbuffer_convert</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="302b69d592045379e67edef99ebd8cb1beb7ae42" translate="yes" xml:space="preserve">
          <source>constructs a new wstring_convert</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72a631e31f460a979e88ed061fc78b02cf2fbc1e" translate="yes" xml:space="preserve">
          <source>constructs a recursive directory iterator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d6e4305842a7b5fd42c749d32ca6bf3e9c2fac2" translate="yes" xml:space="preserve">
          <source>constructs a scoped_lock, optionally locking the given mutexes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4c408f5e7db854c231902d6fea796692e56e980" translate="yes" xml:space="preserve">
          <source>constructs a slice</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="033526b76ee6898c9c3b82ad4b693a134eb664c8" translate="yes" xml:space="preserve">
          <source>constructs a strstreambuf object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a11fd71b0dd1865e958ad697e83ea060dda3c4a" translate="yes" xml:space="preserve">
          <source>constructs a value in the variant, in place</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53053b950cb660ab9dbafb31d91484dd596b591d" translate="yes" xml:space="preserve">
          <source>constructs an &lt;code&gt;&lt;a href=&quot;../errc&quot;&gt;std::errc&lt;/a&gt;&lt;/code&gt; error code</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aacfccc1cbc023db5bec43e21d09c9cb1ac98b8b" translate="yes" xml:space="preserve">
          <source>constructs an &lt;code&gt;&lt;a href=&quot;../errc&quot;&gt;std::errc&lt;/a&gt;&lt;/code&gt; error condition</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc6bcc066197454f5e6aedfd4b29bfd9b0e80829" translate="yes" xml:space="preserve">
          <source>constructs an &lt;code&gt;&lt;a href=&quot;../error/errc&quot;&gt;std::errc&lt;/a&gt;&lt;/code&gt; error code</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0d07e254d019d8f65a73d1157b697e4620c94c7" translate="yes" xml:space="preserve">
          <source>constructs an &lt;code&gt;&lt;a href=&quot;../error/errc&quot;&gt;std::errc&lt;/a&gt;&lt;/code&gt; error condition</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dd28891e1b266b50ef7f90ffdc4317bdacd6ff9" translate="yes" xml:space="preserve">
          <source>constructs an &lt;code&gt;any&lt;/code&gt; object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="206d497c268c97c1dc0c207db6243dc3b8f13834" translate="yes" xml:space="preserve">
          <source>constructs an &lt;code&gt;atomic_ref&lt;/code&gt; object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a548e4943b206f64df8f236231d133aac4f725b" translate="yes" xml:space="preserve">
          <source>constructs an &lt;code&gt;enable_shared_from_this&lt;/code&gt; object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c906a646ae159a7536e4a6b010c4f3035d16fe7" translate="yes" xml:space="preserve">
          <source>constructs an &lt;code&gt;error_category&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7298c046c3ee2fecc392ecab7c5757c98c9ff056" translate="yes" xml:space="preserve">
          <source>constructs an &lt;code&gt;error_condition&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce714e2a7bbc1401ace3aeb0de03936fe58f0e10" translate="yes" xml:space="preserve">
          <source>constructs an &lt;code&gt;std::errc&lt;/code&gt; error code</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1982b52b10bf88c729b3be7ca36a5473b00ad0f4" translate="yes" xml:space="preserve">
          <source>constructs an &lt;code&gt;std::errc&lt;/code&gt; error condition</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b45638d2032f7a5edfd3d526a939a40e3f4e7359" translate="yes" xml:space="preserve">
          <source>constructs an atomic object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="405a9fdf3e79f0008f2fc377611cbc4497ddf23f" translate="yes" xml:space="preserve">
          <source>constructs an atomic_flag</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3c8b6b61abc5403030095572543c9947fc948cc" translate="yes" xml:space="preserve">
          <source>constructs an element in-place at the beginning</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d4635ffa5b1a7eb2acbd63aa88ca2cb3503b893" translate="yes" xml:space="preserve">
          <source>constructs an element in-place at the end</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f02f483d5fe775458ed6c01448f5bce7dab1314" translate="yes" xml:space="preserve">
          <source>constructs an error code</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2489555d51c5e9771b3d29b478280a710db72733" translate="yes" xml:space="preserve">
          <source>constructs an id that does not represent a thread</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="921f24b5a2cf63bc927591c6e94cf81592226ecd" translate="yes" xml:space="preserve">
          <source>constructs an iostream error code</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af29a558e57a36a865389ee7bd8b381731a56921" translate="yes" xml:space="preserve">
          <source>constructs an iostream error_condition</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f74bfc1c6700e02f988a346a927649e461ffae8b" translate="yes" xml:space="preserve">
          <source>constructs an object at the pointed-to location in the buffer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfce82bc633b63fb4498ce0a03e24ce952844f84" translate="yes" xml:space="preserve">
          <source>constructs an object in allocated storage</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f37f5edf1b7ee3cfe138122dec1482a2c6ec21f3" translate="yes" xml:space="preserve">
          <source>constructs an object in allocated storage, passing the inner allocator to its constructor if appropriate</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="229ae4305145eae067feb23a3dd6ddbeaa53829a" translate="yes" xml:space="preserve">
          <source>constructs an object in the allocated storage</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="121bfd53719472ff0a8b8cf0b87c235092af4c1f" translate="yes" xml:space="preserve">
          <source>constructs an strstream, optionally allocating the buffer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0e15e5fbc8f967af81289eeb1bb5537261b081c" translate="yes" xml:space="preserve">
          <source>constructs and seeds the std::seed_seq object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68723df8f9fae12345fe33358fa9f450110e33a8" translate="yes" xml:space="preserve">
          <source>constructs custom &lt;code&gt;&lt;a href=&quot;../utility/functional/binary_negate&quot;&gt;std::binary_negate&lt;/a&gt;&lt;/code&gt; object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf57ae4084b1362bef7bb3888ac1f0b6386372b9" translate="yes" xml:space="preserve">
          <source>constructs custom &lt;code&gt;&lt;a href=&quot;../utility/functional/unary_negate&quot;&gt;std::unary_negate&lt;/a&gt;&lt;/code&gt; object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d911abe2dd4de36556ce63de43278caa2ca3bbdb" translate="yes" xml:space="preserve">
          <source>constructs custom &lt;code&gt;&lt;a href=&quot;binary_negate&quot;&gt;std::binary_negate&lt;/a&gt;&lt;/code&gt; object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fd2a9f45f9ecaa8083a9c4a6737f06a51f151e9" translate="yes" xml:space="preserve">
          <source>constructs custom &lt;code&gt;&lt;a href=&quot;functional/binary_negate&quot;&gt;std::binary_negate&lt;/a&gt;&lt;/code&gt; object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6de9f88fbabaf22022e78a178061838e7c84ca53" translate="yes" xml:space="preserve">
          <source>constructs custom &lt;code&gt;&lt;a href=&quot;functional/unary_negate&quot;&gt;std::unary_negate&lt;/a&gt;&lt;/code&gt; object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a833fc98e5775ccb34c93498141db6ab67516e5" translate="yes" xml:space="preserve">
          <source>constructs custom &lt;code&gt;&lt;a href=&quot;unary_negate&quot;&gt;std::unary_negate&lt;/a&gt;&lt;/code&gt; object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35c8880c8ccc6488e320b2105cabe3c9070d831f" translate="yes" xml:space="preserve">
          <source>constructs custom &lt;code&gt;std::binary_negate&lt;/code&gt; object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23a2be471ab6b19cdb433f4199af5bb955c6493d" translate="yes" xml:space="preserve">
          <source>constructs custom &lt;code&gt;std::unary_negate&lt;/code&gt; object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7fb36a39f77d27a6a4d79762b18d68c77781939" translate="yes" xml:space="preserve">
          <source>constructs element in-place</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2164bbff07198ad8605535e3f1b963cd1b5e0b35" translate="yes" xml:space="preserve">
          <source>constructs element in-place and sorts the underlying container</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b25c70cd9f77994e0dd52b0e475917363394026" translate="yes" xml:space="preserve">
          <source>constructs element in-place at the end</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa4547f7f8a04c08775e6e5de267676af43f60ea" translate="yes" xml:space="preserve">
          <source>constructs element in-place at the top</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69132c81a20d36fd992902ef16e3ba82a65e19c4" translate="yes" xml:space="preserve">
          <source>constructs elements in-place after an element</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1edd3ca2ce7c5ff6b7fc9740221223a421569570" translate="yes" xml:space="preserve">
          <source>constructs elements in-place at the end</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c23322ed59f6f6ed60e0d051c607f3eae95806b" translate="yes" xml:space="preserve">
          <source>constructs elements in-place using a hint</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9fc164f93827875b3b66e7da374053a3614a6df" translate="yes" xml:space="preserve">
          <source>constructs new &lt;code&gt;shared_ptr&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c0ffe078a77e80536ff854c2f99dcdeea3e83c5" translate="yes" xml:space="preserve">
          <source>constructs new distribution</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a7340c4d6a731c1ce86900e100ffd0bc3c089e8" translate="yes" xml:space="preserve">
          <source>constructs new duration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4269aab1cbecdd088f5ae9b91faa121fe838ab13" translate="yes" xml:space="preserve">
          <source>constructs new numeric array</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbfa1be601c98d1b005f987cd5b77d97885279ae" translate="yes" xml:space="preserve">
          <source>constructs new pair</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="126109c4fd37ad39944a9f799465868f0b10226a" translate="yes" xml:space="preserve">
          <source>constructs new thread object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d55bd8a245cc68a76deebbbaf8a3e47c5067476a" translate="yes" xml:space="preserve">
          <source>constructs objects by &lt;a href=&quot;../language/default_initialization&quot;&gt;default-initialization&lt;/a&gt; in an uninitialized area of memory, defined by a range</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5292343b5341a0e36673e7b0af593a6cea0c2c8" translate="yes" xml:space="preserve">
          <source>constructs objects by &lt;a href=&quot;../language/default_initialization&quot;&gt;default-initialization&lt;/a&gt; in an uninitialized area of memory, defined by a start and a count</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3458079d0dc8e0f950549cb1527db823b9597d2" translate="yes" xml:space="preserve">
          <source>constructs objects by &lt;a href=&quot;../language/default_initialization&quot;&gt;default-initialization&lt;/a&gt; in an uninitialized area of memory, defined by a start and count</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8942521c8ca305e53775bdd2828a33f403e11f7" translate="yes" xml:space="preserve">
          <source>constructs objects by &lt;a href=&quot;../language/value_initialization&quot;&gt;value-initialization&lt;/a&gt; in an uninitialized area of memory, defined by a range</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69c7161e2a0c2c8d5b0be457ce315f77b3adddbb" translate="yes" xml:space="preserve">
          <source>constructs objects by &lt;a href=&quot;../language/value_initialization&quot;&gt;value-initialization&lt;/a&gt; in an uninitialized area of memory, defined by a start and a count</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5edae1caaed81185ec004c3e0d8e889fcf9f3c2" translate="yes" xml:space="preserve">
          <source>constructs objects by &lt;a href=&quot;language/default_initialization&quot;&gt;default-initialization&lt;/a&gt; in an uninitialized area of memory, defined by a range</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d74d2a39fb6216d0a5e70e5aa73109e25301c68" translate="yes" xml:space="preserve">
          <source>constructs objects by &lt;a href=&quot;language/default_initialization&quot;&gt;default-initialization&lt;/a&gt; in an uninitialized area of memory, defined by a start and a count</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="582423661048e2dddedd0c01bbfbe5be37871cbb" translate="yes" xml:space="preserve">
          <source>constructs objects by &lt;a href=&quot;language/default_initialization&quot;&gt;default-initialization&lt;/a&gt; in an uninitialized area of memory, defined by a start and count</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c489632f6f9e613877ddd8f92031c3a0972bb082" translate="yes" xml:space="preserve">
          <source>constructs objects by &lt;a href=&quot;language/value_initialization&quot;&gt;value-initialization&lt;/a&gt; in an uninitialized area of memory, defined by a range</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7ea280e496f70cb2715413d9ac683b2629e01ed" translate="yes" xml:space="preserve">
          <source>constructs objects by &lt;a href=&quot;language/value_initialization&quot;&gt;value-initialization&lt;/a&gt; in an uninitialized area of memory, defined by a start and a count</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b25199a6907b6149c3db2fddb03e02631b802a00" translate="yes" xml:space="preserve">
          <source>constructs the &lt;code&gt;bad_array_new_length&lt;/code&gt; object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="daa6c6689ddaf78cb423af33a1481c038d5b6d02" translate="yes" xml:space="preserve">
          <source>constructs the &lt;code&gt;bad_exception&lt;/code&gt; object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81f5bc8e79846b89c1eb22ebbb8a4d83ad203cff" translate="yes" xml:space="preserve">
          <source>constructs the &lt;code&gt;deque&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15d69f02a344d65494219c7a6ff3aac765250768" translate="yes" xml:space="preserve">
          <source>constructs the &lt;code&gt;forward_list&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a060d9add919ac02560c518e2096ecafa331cf86" translate="yes" xml:space="preserve">
          <source>constructs the &lt;code&gt;list&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b51d67a56adf404ac876c1456e84fd5dcf348d2b" translate="yes" xml:space="preserve">
          <source>constructs the &lt;code&gt;map&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7b83aaad99cc5de8fff8f0cc1ea78110c96bf8d" translate="yes" xml:space="preserve">
          <source>constructs the &lt;code&gt;multimap&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9dd1fa381fac3c6414a258a9816623577e0cb57" translate="yes" xml:space="preserve">
          <source>constructs the &lt;code&gt;multiset&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c2ca1063767a931f60d374977d4de228fb37632" translate="yes" xml:space="preserve">
          <source>constructs the &lt;code&gt;priority_queue&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="731121db99c3023abf7de83aef67daa25859f12a" translate="yes" xml:space="preserve">
          <source>constructs the &lt;code&gt;queue&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb38c532f79b482518db2f16adc359cc06b514df" translate="yes" xml:space="preserve">
          <source>constructs the &lt;code&gt;set&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06dd08b9e0b2e9424c4915f1a802148f95617a44" translate="yes" xml:space="preserve">
          <source>constructs the &lt;code&gt;stack&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dfca0eab7e110ead94b0f760aabd95768e037a5" translate="yes" xml:space="preserve">
          <source>constructs the &lt;code&gt;system_error&lt;/code&gt; object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aeb5b200c775f748428c4a407f7c4ec69090faa9" translate="yes" xml:space="preserve">
          <source>constructs the &lt;code&gt;unordered_map&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a851cc8eb6050e878baa44f716e8a1de0251fe7" translate="yes" xml:space="preserve">
          <source>constructs the &lt;code&gt;unordered_multimap&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c9afddebc684ccb4ff1a0371db8df39ccca706e" translate="yes" xml:space="preserve">
          <source>constructs the &lt;code&gt;unordered_multiset&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8890989a4450a2cfbb92bd5878caa9b68942b735" translate="yes" xml:space="preserve">
          <source>constructs the &lt;code&gt;unordered_set&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdc2ffa59ad3c18dcba102dff27d8e9a6a45e1a5" translate="yes" xml:space="preserve">
          <source>constructs the &lt;code&gt;vector&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e2fcb1e6b28ec0dc9692c9229e8528d4f8db784" translate="yes" xml:space="preserve">
          <source>constructs the bad_alloc object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c71265f500e07c6376cb74b9c21d9e34987986d" translate="yes" xml:space="preserve">
          <source>constructs the bad_function_call object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8381ca4a399d9b177f53bcfc3cabdcc70cddfbf" translate="yes" xml:space="preserve">
          <source>constructs the bad_variant_access object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="addc10e7c2ad0d5c8be054ae6ed173fe7fec5897" translate="yes" xml:space="preserve">
          <source>constructs the bad_weak_ptr object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc755bce33adf0f4f611ce4ce1bb77aeadf4fac1" translate="yes" xml:space="preserve">
          <source>constructs the bitset</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a099afaf687ea0d5fb73663b04474ef0e9fe08aa" translate="yes" xml:space="preserve">
          <source>constructs the contained value in-place</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="052088aafb3c30e192b4dc1d943157bfcdadb656" translate="yes" xml:space="preserve">
          <source>constructs the engine</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82ce24336f27d201d0392324a5317b247abb3af5" translate="yes" xml:space="preserve">
          <source>constructs the engine adaptor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff362509e1e4463d4aee874d063a87766bc8722f" translate="yes" xml:space="preserve">
          <source>constructs the error object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="059ec1a34394d6b3ba173a6bf3d37800f024596f" translate="yes" xml:space="preserve">
          <source>constructs the exception object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2da44fd6f975ffe6f3c550a51100d092519c7e08" translate="yes" xml:space="preserve">
          <source>constructs the file stream</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bac8ebda91cb65ff05e8b82950f3a564d4a2b13" translate="yes" xml:space="preserve">
          <source>constructs the future object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebb82a4f150758db1f33810e1579588774c53245" translate="yes" xml:space="preserve">
          <source>constructs the match object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c9c3b86347a095e4a4ffbd5cdf59368fb7fe092" translate="yes" xml:space="preserve">
          <source>constructs the mutex</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f0be2c48bd06511745dcd55f7b70bc3bdc3d24e" translate="yes" xml:space="preserve">
          <source>constructs the object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9372e86c361a6d08d8d6b698aa379a36cf4e0d4a" translate="yes" xml:space="preserve">
          <source>constructs the optional object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96aa15157fa73a78d0585ac9d353772f5a20675c" translate="yes" xml:space="preserve">
          <source>constructs the promise object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6acc8608cd8d9451bcf61db204f161338db01fa6" translate="yes" xml:space="preserve">
          <source>constructs the reference. Accessible only to &lt;code&gt;&lt;a href=&quot;../bitset&quot;&gt;std::bitset&lt;/a&gt;&lt;/code&gt; itself</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1e0b22f41085e4b67c1d1650a2adc4e0f8d989b" translate="yes" xml:space="preserve">
          <source>constructs the reference. Accessible only to &lt;code&gt;&lt;a href=&quot;../vector&quot;&gt;std::vector&lt;/a&gt;&amp;lt;bool&amp;gt;&lt;/code&gt; itself</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="691b4535d628c166535d3b1fa9575f3a9deb2cbe" translate="yes" xml:space="preserve">
          <source>constructs the regex object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4d66e82753ed11d43be0a288849c45832bc81a4" translate="yes" xml:space="preserve">
          <source>constructs the regex_traits object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4975dbae5061ca9a5daaa1d9842cd8707e13bb02" translate="yes" xml:space="preserve">
          <source>constructs the sentry object. All the preparation tasks are done here</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4646df412a976eaa217474460efb9ccd3fe67c34" translate="yes" xml:space="preserve">
          <source>constructs the string stream</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="437b16e665ffb99f452a3aebb1ccdba3e0220e37" translate="yes" xml:space="preserve">
          <source>constructs the task object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6311545f1158d5d2785469b0d688a61884ebdaa3" translate="yes" xml:space="preserve">
          <source>constructs the variant object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a97aee551c88304d5badc002660a91d594c435f0" translate="yes" xml:space="preserve">
          <source>constructs zero, min, and max values of a tick count of given type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b566da393589f6ca63ac0a2c45bce4a912d8670" translate="yes" xml:space="preserve">
          <source>consume operation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b10e05d8fff7e678ebe9d5df38788dbfda468392" translate="yes" xml:space="preserve">
          <source>consume the byte order mark, if present at the start of input sequence, and (in case of UTF-16), rely on the byte order it specifies for decoding the rest of the input</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="377edad4e546467890e837cbf1973d441d1c35b6" translate="yes" xml:space="preserve">
          <source>consumes a sequence of integers and produces a sequence of 32-bit unsigned values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62e2721b3954e4d103b5eb5a544e94adfb982f10" translate="yes" xml:space="preserve">
          <source>consumes whitespace</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="228b557915b6f91d7b37d153f4f1ca0258f4ea9a" translate="yes" xml:space="preserve">
          <source>consuming</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72e9a547fbb17beb5b5ea139f68f91eea1ed3e1d" translate="yes" xml:space="preserve">
          <source>cont</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e647eeb48d4b8408223b78ea4287b1925281cf24" translate="yes" xml:space="preserve">
          <source>contained in &lt;code&gt;delim&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fb1688dfc5781bcfb8a518b77585402d9f41519" translate="yes" xml:space="preserve">
          <source>contained value type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85e795df06ccca304fdbf8b5c6b983b55b2868ee" translate="yes" xml:space="preserve">
          <source>contained value, i.e. a value that may or may not be present.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="211e80c05a6a26baf1f291e6f6c1b812eb2b8045" translate="yes" xml:space="preserve">
          <source>container adaptor to exchange the contents with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc92c784c8042ea857f7e29936684eca37e6ccc5" translate="yes" xml:space="preserve">
          <source>container adaptors whose contents to compare</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6a44aba94d42c77d8e26f368f0e7a17a1921e53" translate="yes" xml:space="preserve">
          <source>container from which to erase</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3247096440d5e84670c7072516c351ff31968da" translate="yes" xml:space="preserve">
          <source>container that stores elements by associating them to keys</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa71dd03f854f7485d0147fb7c4436e31004fd51" translate="yes" xml:space="preserve">
          <source>container that stores elements stored in buckets by associating them to keys</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91f20c8d5e5308b6bd58ee52969735f9d27c89c6" translate="yes" xml:space="preserve">
          <source>container that supports a &lt;code&gt;insert&lt;/code&gt; operation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e34e69f772632c42b0d52ce7b3591b7374a28eda" translate="yes" xml:space="preserve">
          <source>container that supports a &lt;code&gt;push_front&lt;/code&gt; operation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5d557b60b443cb7adfdf4f5582814770f08b8bf" translate="yes" xml:space="preserve">
          <source>container that supports a push_back operation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6eb14d8d6a867a4c0c183ec043304c6d69e0bde1" translate="yes" xml:space="preserve">
          <source>container to be used as source to initialize the underlying container</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f35b82887ae99013a814d8bbd20685bdf96f2920" translate="yes" xml:space="preserve">
          <source>container to construct a view for</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c75f561108da60253da5a11b6e663b184f97ff27" translate="yes" xml:space="preserve">
          <source>container to exchange the contents with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c0b39193d6b7b1955a3a1c6a0bc3fd9b98fb6b9" translate="yes" xml:space="preserve">
          <source>container to initialize the inserter with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7406c6eb2f315e35bc18b4e3bcfc4c16ff13b7d1" translate="yes" xml:space="preserve">
          <source>container using an allocator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b97e31c71410097f2efb71ac76ffcbfeb896a50" translate="yes" xml:space="preserve">
          <source>container using bidirectional iterators</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14e5745099f488f45f2bf8995a44d595a571c29e" translate="yes" xml:space="preserve">
          <source>container with elements stored at adjacent memory addresses</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5d72255e4982d5d655d4693ef54bb9751a5ab6c" translate="yes" xml:space="preserve">
          <source>container with elements stored linearly</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="642b5cd982d48582ca759a01b28bd2ade45c3b8a" translate="yes" xml:space="preserve">
          <source>containers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f509635cf7c565d5e743a6b7b597be3d1cc7b20e" translate="yes" xml:space="preserve">
          <source>containers whose contents to compare</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d1c76f5edfc88bbd5215223e8830ceb42594a96" translate="yes" xml:space="preserve">
          <source>containers whose contents to swap</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="caeb909ae4ff4ee25a0ff0d476946ed256f2aee1" translate="yes" xml:space="preserve">
          <source>contains</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6651ed356724fc77f7907a758fd5201876de8b38" translate="yes" xml:space="preserve">
          <source>contains a dependent &lt;a href=&quot;templates#template-id&quot;&gt;template-id&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b5bd27a16d83f00b99e278bcf15b108b3b1e0ba" translate="yes" xml:space="preserve">
          <source>contains a nested name specifier or &lt;a href=&quot;name&quot;&gt;qualified-id&lt;/a&gt; that is a member of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dff7617258738f82c400a11f411c74a6fd44804e" translate="yes" xml:space="preserve">
          <source>contains a placeholder type,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d24d57a0d2a4fecca861bb41e1ad1660d0bbeb0d" translate="yes" xml:space="preserve">
          <source>contains a value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad16136b350e1b1f9c3e47e02e64f045ddbd540f" translate="yes" xml:space="preserve">
          <source>contains an identifier for which by name lookup finds a variable declared with a type that contains a placeholder type (e.g., &lt;code&gt;auto&lt;/code&gt; static data member), where the initializer is type-dependent,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9192343c50d19c5dfcf3238ad6362135de4720e" translate="yes" xml:space="preserve">
          <source>contains an identifier for which name lookup finds a &lt;a href=&quot;structured_binding&quot;&gt;structured binding declaration&lt;/a&gt; whose initializer is type-dependent</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="068dfc5544a33b217e1c4134c1e7d02a9ed28830" translate="yes" xml:space="preserve">
          <source>contains an identifier for which name lookup finds a non-type template parameter whose type contains the placeholder &lt;code&gt;auto&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="583e957218760575eb3415b30d7708d5822a5762" translate="yes" xml:space="preserve">
          <source>contains an identifier for which name lookup finds at least one dependent declaration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98c9381c3e19f3a7b11c86b56ab0ff791cd3c3de" translate="yes" xml:space="preserve">
          <source>contains an identifier for which name lookup finds one or more declarations of member functions of the current instantiation declared with &lt;a href=&quot;function#Return_type_deduction&quot;&gt;return type deduction&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab6a3376caecab0a45be9b07c5433bd689ed06d2" translate="yes" xml:space="preserve">
          <source>contains an identifier introduced in a &lt;a href=&quot;attributes/contract&quot;&gt;postcondition&lt;/a&gt; to represent the result of a templated function whose declared return type contains a placeholder type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="207378f3ef39b305c23c1fbc0f6496690e935acc" translate="yes" xml:space="preserve">
          <source>contains information about a leap second insertion</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5e25ce0fdd7698bafb7417389d6924ac007b2db" translate="yes" xml:space="preserve">
          <source>contains some type's information, generated by the implementation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a5c05b88982bfd6db98d7201742f74cde6059ff" translate="yes" xml:space="preserve">
          <source>contains the name of &lt;a href=&quot;cast_operator&quot;&gt;conversion function&lt;/a&gt; to a dependent type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8363de354f2cd8877143c7f30083692d2c686978" translate="yes" xml:space="preserve">
          <source>contains the special identifier &lt;code&gt;__func__&lt;/code&gt; (if some enclosing function is a template, a non-template member of a class template, or a generic lambda(since C++14))</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec2727b3b71f07635f726026bef44352ec89e452" translate="yes" xml:space="preserve">
          <source>context</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3b1c75dfdee5b0f43bb2848174d08920d266975" translate="yes" xml:space="preserve">
          <source>context and the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e0a245dc18792c7959a93c694ea5733fbd80388" translate="yes" xml:space="preserve">
          <source>contextually converted constant expression of type &lt;code&gt;bool&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57f8ed3497571a69b3e141a02b263318a6aaaeeb" translate="yes" xml:space="preserve">
          <source>contextually converted to bool</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="901954eb707b78ea8cbe624aa5029cf3f991006a" translate="yes" xml:space="preserve">
          <source>contextually convertible to &lt;code&gt;bool&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a23498ff0c348cb79cc04c0933322df38b1b05c1" translate="yes" xml:space="preserve">
          <source>contextually implicitly converted</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c250b75d01d1395553a5794dd2c0c06228b2064" translate="yes" xml:space="preserve">
          <source>contiguous storage</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eee0bbba4ff92adbeb038a77df0466d660f15716" translate="yes" xml:space="preserve">
          <source>continue</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d09d3c8559f710fe2911c41f855cc2a0890ee83" translate="yes" xml:space="preserve">
          <source>continue statement</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d61ceadbdb0081cce7a2c1f65558bd2243ecc161" translate="yes" xml:space="preserve">
          <source>contract</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8982da2618b0c1e8c2858b7f99ad12fc4c969b32" translate="yes" xml:space="preserve">
          <source>contract conditions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cc22ccef41f2e7827047689f2ab1ae218cfb0e2" translate="yes" xml:space="preserve">
          <source>contract-level</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="574c0e1fb1ea5dd9b7c3b823826c3dedbb00f42d" translate="yes" xml:space="preserve">
          <source>contract_violation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4d06ebbbc4a43025239d212bafbe92bb1deaa50" translate="yes" xml:space="preserve">
          <source>contracted</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bab9500f92d926aa3ddd0d258640a17d9dbca6ef" translate="yes" xml:space="preserve">
          <source>contracting</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="150ef49b91af6841c082a1d0adb87fdce27f4543" translate="yes" xml:space="preserve">
          <source>control block</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c54a9515b6b47769616e5b12ffc7d31503fcf147" translate="yes" xml:space="preserve">
          <source>control codes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b120b76b7fb23a808ec5f3ca6e6c6bca82cc8f3" translate="yes" xml:space="preserve">
          <source>control codes (&lt;code&gt;NUL&lt;/code&gt;, etc.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65294a1b6d83f84e8d88995513f8880a93a746b6" translate="yes" xml:space="preserve">
          <source>controlled character sequence</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2df0eddc2a261a91c6878517521e4c2f7f9f9c1" translate="yes" xml:space="preserve">
          <source>controls whether a stream's &lt;a href=&quot;../basic_syncbuf&quot;&gt;&lt;code&gt;basic_syncbuf&lt;/code&gt;&lt;/a&gt; emits on flush</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1585cfef71064c226c278004662c77603350e50" translate="yes" xml:space="preserve">
          <source>controls whether a stream's &lt;a href=&quot;basic_syncbuf&quot;&gt;&lt;code&gt;basic_syncbuf&lt;/code&gt;&lt;/a&gt; emits on flush</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c290fd24b3643f1e46f8ce73ac79e03ce92c9ec" translate="yes" xml:space="preserve">
          <source>controls whether decimal point is always included in floating-point representation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e96a5c8b4c51a17d130f0954b7fa69560cdce4e" translate="yes" xml:space="preserve">
          <source>controls whether leading whitespace is skipped on input</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a461529875d40b0fba3fe51caae372b37e50fed" translate="yes" xml:space="preserve">
          <source>controls whether output is flushed after each operation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c889f7e2b9f946c18d58dd02bc33a9bb1607703" translate="yes" xml:space="preserve">
          <source>controls whether prefix is used to indicate numeric base</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="568260f99f359b519381b494d2176be48281aa7a" translate="yes" xml:space="preserve">
          <source>controls whether the &lt;code&gt;+&lt;/code&gt; sign used with non-negative numbers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbc39d3b7e423dd49d4405539dba347c995a9565" translate="yes" xml:space="preserve">
          <source>controls whether uppercase characters are used with some output formats</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6998be1d54cd14b6561e815a7d53abf743ebb923" translate="yes" xml:space="preserve">
          <source>convenience syntax for constructing a &lt;a href=&quot;../weekday_indexed&quot;&gt;&lt;code&gt;weekday_indexed&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../weekday_last&quot;&gt;&lt;code&gt;weekday_last&lt;/code&gt;&lt;/a&gt; from this &lt;code&gt;weekday&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9710b2d40da4c22a0c6254873b560a1e28a2a50d" translate="yes" xml:space="preserve">
          <source>convenience syntax for constructing a &lt;a href=&quot;weekday_indexed&quot;&gt;&lt;code&gt;weekday_indexed&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;weekday_last&quot;&gt;&lt;code&gt;weekday_last&lt;/code&gt;&lt;/a&gt; from this &lt;code&gt;weekday&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d534bce85f05c6d94c2b6a95a642283dccd024bb" translate="yes" xml:space="preserve">
          <source>conventional syntax for Gregorian calendar date creation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e24a2a69355927e52406d01250563d393d7c7e8d" translate="yes" xml:space="preserve">
          <source>conversion between UTF-16 and UTF-8 (since C++11)(deprecated in C++20)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31b50d8b5a00d722f84a2d66e3c51c5824f3a873" translate="yes" xml:space="preserve">
          <source>conversion between UTF-16 and UTF-8 (since C++20)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e221d163901ac7c956c585c202836598d971a60" translate="yes" xml:space="preserve">
          <source>conversion between UTF-32 and UTF-8 (since C++11)(deprecated in C++20)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e46060c729e17cb1f84f860d48e8ca46cc45b7bb" translate="yes" xml:space="preserve">
          <source>conversion between UTF-32 and UTF-8 (since C++20)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c8da2e1bd6ff90ffc899340a718b081f9682d08" translate="yes" xml:space="preserve">
          <source>conversion between function pointers and object pointers not allowed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68eb578d6fd9265370d70a3c927c0bc22015dcb6" translate="yes" xml:space="preserve">
          <source>conversion between the system's native wide and the single-byte narrow character sets</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3eae561114126e98de17c488acb9bb9511dabe07" translate="yes" xml:space="preserve">
          <source>conversion completed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ffca6477553f64e2cfd9b261f09cc91d0c63996" translate="yes" xml:space="preserve">
          <source>conversion format specifier</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df544b6c7c0bd513684ddd64e05095d1e5e9b81d" translate="yes" xml:space="preserve">
          <source>conversion from</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f53a4a37a44f68dc20959a18666f8f40c304e05" translate="yes" xml:space="preserve">
          <source>conversion from &lt;code&gt;double * const (*p)[3]&lt;/code&gt; to &lt;code&gt;double const * const (*p)[3]&lt;/code&gt; invalid</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="490bf99b44aff88f6bd47cd0c266636859ed351a" translate="yes" xml:space="preserve">
          <source>conversion from &lt;code&gt;float&lt;/code&gt;/&lt;code&gt;double&lt;/code&gt;/&lt;code&gt;long double&lt;/code&gt; to decimal with at least &lt;code&gt;FLT_DECIMAL_DIG&lt;/code&gt;/&lt;code&gt;DBL_DECIMAL_DIG&lt;/code&gt;/&lt;code&gt;LDBL_DECIMAL_DIG&lt;/code&gt; digits and back is the identity conversion. : this is the decimal precision required to serialize/deserialize a floating-point value (see also &lt;code&gt;&lt;a href=&quot;../types/numeric_limits/max_digits10&quot;&gt;std::numeric_limits::max_digits10&lt;/a&gt;&lt;/code&gt;). Defined to at least 6, 10, and 10 respectively, or 9 for IEEE float and 17 for IEEE double.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cdb1136345ac8e986b1994f22a4f27c1ed3a435" translate="yes" xml:space="preserve">
          <source>conversion from &lt;code&gt;float&lt;/code&gt;/&lt;code&gt;double&lt;/code&gt;/&lt;code&gt;long double&lt;/code&gt; to decimal with at least &lt;code&gt;FLT_DECIMAL_DIG&lt;/code&gt;/&lt;code&gt;DBL_DECIMAL_DIG&lt;/code&gt;/&lt;code&gt;LDBL_DECIMAL_DIG&lt;/code&gt; digits and back is the identity conversion. : this is the decimal precision required to serialize/deserialize a floating-point value (see also &lt;code&gt;&lt;a href=&quot;numeric_limits/max_digits10&quot;&gt;std::numeric_limits::max_digits10&lt;/a&gt;&lt;/code&gt;). Defined to at least 6, 10, and 10 respectively, or 9 for IEEE float and 17 for IEEE double.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f10be844c71390e0c3d4a64202f576812def1d3a" translate="yes" xml:space="preserve">
          <source>conversion from &lt;code&gt;long double&lt;/code&gt; to decimal with at least &lt;code&gt;DECIMAL_DIG&lt;/code&gt; digits and back to &lt;code&gt;long double&lt;/code&gt; is the identity conversion. : this is the decimal precision required to serialize/deserialize a &lt;code&gt;long double&lt;/code&gt; (see also &lt;code&gt;&lt;a href=&quot;../types/numeric_limits/max_digits10&quot;&gt;std::numeric_limits::max_digits10&lt;/a&gt;&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6a98a933e5c54ccccac117605d1f7126c853f87" translate="yes" xml:space="preserve">
          <source>conversion from &lt;code&gt;long double&lt;/code&gt; to decimal with at least &lt;code&gt;DECIMAL_DIG&lt;/code&gt; digits and back to &lt;code&gt;long double&lt;/code&gt; is the identity conversion. : this is the decimal precision required to serialize/deserialize a &lt;code&gt;long double&lt;/code&gt; (see also &lt;code&gt;&lt;a href=&quot;numeric_limits/max_digits10&quot;&gt;std::numeric_limits::max_digits10&lt;/a&gt;&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60f36e94b410981b9b6df2f604f52b3c153b3561" translate="yes" xml:space="preserve">
          <source>conversion from a &lt;code&gt;long double&lt;/code&gt; to &lt;code&gt;double&lt;/code&gt; or to &lt;code&gt;float&lt;/code&gt; and conversion from &lt;code&gt;double&lt;/code&gt; to &lt;code&gt;float&lt;/code&gt;, except where the source is a &lt;a href=&quot;constant_expression&quot;&gt;constant expression&lt;/a&gt; and overflow does not occur</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb128951cc827169c1fe3c8781f6d83abd5aee9e" translate="yes" xml:space="preserve">
          <source>conversion from a floating-point type to an integer type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="867caafb887ba7072afee4493c5051b70db9775d" translate="yes" xml:space="preserve">
          <source>conversion from an integer type to a floating-point type, except where the source is a constant expression whose value can be stored exactly in the target type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6189c79470860051216628ec0b2fcb9358605b33" translate="yes" xml:space="preserve">
          <source>conversion from enum to its underlying type did not prefer the fixed underlying type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aba2c709b70767ef437a2238904e5643f8fda12a" translate="yes" xml:space="preserve">
          <source>conversion from integer or unscoped enumeration type to integer type that cannot represent all values of the original, except where source is a constant expression whose value can be stored exactly in the target type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb6f4b8495a3bab0c53def15fcad2f4f9af44e01" translate="yes" xml:space="preserve">
          <source>conversion function is noexcept</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abd636b1ac3424b48dcf0557759dc70b853464d9" translate="yes" xml:space="preserve">
          <source>conversion rank</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f621d898004b4e49dac58be7589b4b8abae8a7a" translate="yes" xml:space="preserve">
          <source>conversion specifications. Each conversion specification has the following format:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9acd60e2a11ef13358f62e150af59a2026123db4" translate="yes" xml:space="preserve">
          <source>conversion state information necessary to iterate multibyte character strings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="404f7e24074545dae20849b9e2556c65dad031c1" translate="yes" xml:space="preserve">
          <source>conversion valid</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00c13008aaf25bb6482a838c621235af556332bd" translate="yes" xml:space="preserve">
          <source>conversion was completed with no error</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b99f23b1842f963df98af0356c5a6941b7b7431" translate="yes" xml:space="preserve">
          <source>conversion-type-id is a &lt;a href=&quot;type-id#Type_naming&quot;&gt;type-id&lt;/a&gt; except that function and array operators &lt;code&gt;[]&lt;/code&gt; or &lt;code&gt;()&lt;/code&gt; are not allowed in its declarator (thus conversion to types such as pointer to array requires a type alias/typedef or an identity template: see below). Regardless of typedef, conversion-type-id cannot represent an array or a function type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dacbbb5a45f6b024a80921cccac010c5fbb37a63" translate="yes" xml:space="preserve">
          <source>conversions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b206ef8b1ab3c67edb7cc79bf01633fae3b04a60" translate="yes" xml:space="preserve">
          <source>convert a 16-bit wide character to narrow multibyte string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e1777b5f9f4e972b567c4804ee2009a41d94b11" translate="yes" xml:space="preserve">
          <source>convert a 32-bit wide character to narrow multibyte string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9753ddf4624e910f50f712cc1673498476d29c08" translate="yes" xml:space="preserve">
          <source>convert time points of one clock to another</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fc9c272870b6329c4c261f99576f84ee1496c72" translate="yes" xml:space="preserve">
          <source>converted</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d17abbd0e3adbad4972b49abac5ce62c8752d10" translate="yes" xml:space="preserve">
          <source>converted constant expression</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d97b9d7a16fe6ddc1ba4488e1de39086833f6b47" translate="yes" xml:space="preserve">
          <source>convertible to &lt;code&gt;const It&amp;amp;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b28e95d881b7846e043aed21e7f02c0608cad7e4" translate="yes" xml:space="preserve">
          <source>convertible to &lt;code&gt;const X&amp;amp;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d5af9317ba20e2d5efe364002162b091a5fca57" translate="yes" xml:space="preserve">
          <source>convertible to &lt;code&gt;const_iterator&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7077d5c39480bb0662e46c48319167b704887628" translate="yes" xml:space="preserve">
          <source>convertible to &lt;code&gt;reference&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae9d5333fc83409e9f545571f3087a834f1d6eab" translate="yes" xml:space="preserve">
          <source>convertible to &lt;code&gt;value_type&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f55a26919885dee0cc436f9ce650adbd2aed6d7" translate="yes" xml:space="preserve">
          <source>convertible to bool</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e143ec38d69b3ad1c7b2043c8d71d87a5e22a95" translate="yes" xml:space="preserve">
          <source>converting constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="788bf32fe38ca3ff6c9f4b7c957b6c4026760ee6" translate="yes" xml:space="preserve">
          <source>converting constructor blindly assembles an overload set, leading to unintended conversions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b93580a47571c629af51906af73b2d9f9e67ed1" translate="yes" xml:space="preserve">
          <source>converting constructor template interacts poorly with class template argument deduction</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b9d4dabbfb6339603d12d795750a5829994a994" translate="yes" xml:space="preserve">
          <source>converting move constructor look up enabled</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4149adac4b786e807cba5d9e73173c1c23c5d5ee" translate="yes" xml:space="preserve">
          <source>converts &lt;b&gt;floating-point number&lt;/b&gt; to decimal or decimal exponent notation depending on the value and the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0507681f90cab3024b901abdd25f595afbb553db" translate="yes" xml:space="preserve">
          <source>converts &lt;b&gt;floating-point number&lt;/b&gt; to the decimal exponent notation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c043176aa4aad4f724e634fb37e770b0443982fa" translate="yes" xml:space="preserve">
          <source>converts &lt;b&gt;floating-point number&lt;/b&gt; to the decimal notation in the style</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d35d85a9b1f424df97107f45d9e60333a79c2aa" translate="yes" xml:space="preserve">
          <source>converts &lt;b&gt;floating-point number&lt;/b&gt; to the hexadecimal exponent notation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75c93df6c13246d3eabe47860b767196113e71a4" translate="yes" xml:space="preserve">
          <source>converts &lt;code&gt;&lt;a href=&quot;../c/time_t&quot;&gt;std::time_t&lt;/a&gt;&lt;/code&gt; to a system clock time point</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3977341f7c76f68ba50c2b37f132d2ba6abd7e2" translate="yes" xml:space="preserve">
          <source>converts &lt;code&gt;&lt;a href=&quot;c/time_t&quot;&gt;std::time_t&lt;/a&gt;&lt;/code&gt; to a system clock time point</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fbdaadfe7bf50f5b437f45174031ee220b28e1f" translate="yes" xml:space="preserve">
          <source>converts &lt;code&gt;char_type&lt;/code&gt; to equivalent &lt;code&gt;int_type&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f582983c6801032ed58249aedd80e7d80a8ea4cd" translate="yes" xml:space="preserve">
          <source>converts &lt;code&gt;int_type&lt;/code&gt; to equivalent &lt;code&gt;char_type&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="becb84db4104a5ca14bb4fec3361280db2330e98" translate="yes" xml:space="preserve">
          <source>converts &lt;code&gt;sys_time&lt;/code&gt; to &lt;code&gt;utc_time&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfc0fff0575eb197af1c88000491e999182df028" translate="yes" xml:space="preserve">
          <source>converts &lt;code&gt;tai_time&lt;/code&gt; to &lt;code&gt;utc_time&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81cae44a0d12f9434702c30acac30468331b169e" translate="yes" xml:space="preserve">
          <source>converts &lt;code&gt;utc_time&lt;/code&gt; to &lt;code&gt;sys_time&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d559dc474d11f2f9431594a1ed0d4f8d0ab8d1b0" translate="yes" xml:space="preserve">
          <source>converts &lt;code&gt;utc_time&lt;/code&gt; to &lt;code&gt;tai_time&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="836032b950390dc7c6df49e95d9085e00d73f939" translate="yes" xml:space="preserve">
          <source>converts UTF-8 string to narrow multibyte encoding</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8a26dc5dec3002c25b82c27d059f77cab27c31b" translate="yes" xml:space="preserve">
          <source>converts a &lt;a href=&quot;../ranges/view&quot;&gt;&lt;code&gt;View&lt;/code&gt;&lt;/a&gt; into a &lt;a href=&quot;../ranges/commonrange&quot;&gt;&lt;code&gt;CommonRange&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ecbb4c64e7bcadda8b562d5f7dd179cd3a52bb7" translate="yes" xml:space="preserve">
          <source>converts a &lt;a href=&quot;ranges/view&quot;&gt;&lt;code&gt;View&lt;/code&gt;&lt;/a&gt; into a &lt;a href=&quot;ranges/commonrange&quot;&gt;&lt;code&gt;CommonRange&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddcfcb4040b83c546a68189008f3f9450d054f09" translate="yes" xml:space="preserve">
          <source>converts a &lt;b&gt;signed integer&lt;/b&gt; into decimal representation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="018dc8ab17b80c4b45f3260bc6ca4d57a7a58476" translate="yes" xml:space="preserve">
          <source>converts a &lt;b&gt;unsigned integer&lt;/b&gt; into octal representation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="655e1d020025c8cdd5a7bc6d1a48b35894f4bb36" translate="yes" xml:space="preserve">
          <source>converts a &lt;code&gt;gps_time&lt;/code&gt; to &lt;code&gt;utc_time&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fc09422b07a0f4c59e7dafcd2e122937322834e" translate="yes" xml:space="preserve">
          <source>converts a &lt;code&gt;local_time&lt;/code&gt; in this time zone to a &lt;code&gt;sys_time&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b679917ff77f210053e415d6f3601522fd614247" translate="yes" xml:space="preserve">
          <source>converts a &lt;code&gt;span&lt;/code&gt; into a view of its underlying bytes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a04e86a8328faba7f9d2916763ffe4be98e1e59a" translate="yes" xml:space="preserve">
          <source>converts a &lt;code&gt;sys_time&lt;/code&gt; to a &lt;code&gt;local_time&lt;/code&gt; in this time zone</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96b96fed171d883f2f0d34e33d2841d3399b0f66" translate="yes" xml:space="preserve">
          <source>converts a &lt;code&gt;time_t&lt;/code&gt; object to a textual representation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e575105f6614ada7987fa0111cf8040d3859998" translate="yes" xml:space="preserve">
          <source>converts a &lt;code&gt;tm&lt;/code&gt; object to a textual representation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5713bcb76fe22ee15df399bc81fd507de4988e8e" translate="yes" xml:space="preserve">
          <source>converts a &lt;code&gt;tm&lt;/code&gt; object to custom textual representation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12e13c8b6220de430e8bb4211b86395eb0b5d5cd" translate="yes" xml:space="preserve">
          <source>converts a &lt;code&gt;tm&lt;/code&gt; object to custom wide string textual representation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="910644725e7db80656162054831498e7d1ccf7f2" translate="yes" xml:space="preserve">
          <source>converts a &lt;code&gt;utc_time&lt;/code&gt; to &lt;code&gt;gps_time&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="390f210ec22415f1eea47ee9b396fac22c4b63a4" translate="yes" xml:space="preserve">
          <source>converts a byte string into a wide string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb1b80c084f88540d33c06058c5caa0951952870" translate="yes" xml:space="preserve">
          <source>converts a byte string to &lt;code&gt;&lt;a href=&quot;../../types/integer&quot;&gt;std::intmax_t&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../../types/integer&quot;&gt;std::uintmax_t&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fabb9c0d95c34ab4bee6ac7642942951e08440a" translate="yes" xml:space="preserve">
          <source>converts a byte string to &lt;code&gt;&lt;a href=&quot;../types/integer&quot;&gt;std::intmax_t&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../types/integer&quot;&gt;std::uintmax_t&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36681482efa7f50e6e9faf556fd49965a9296db0" translate="yes" xml:space="preserve">
          <source>converts a byte string to a floating point value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e06a60ccf734973d7ddb6a4295af48303be8cdc1" translate="yes" xml:space="preserve">
          <source>converts a byte string to an integer value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba6d3e68765ef6d95c182b85a0331a1969f26867" translate="yes" xml:space="preserve">
          <source>converts a byte string to an unsigned integer value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b67a74667f0a73180d792d01f610fb487c78c1ba" translate="yes" xml:space="preserve">
          <source>converts a character or characters from &lt;code&gt;char&lt;/code&gt; to &lt;code&gt;charT&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d903c0ef6983f0521f459eb97158aa91a682ce10" translate="yes" xml:space="preserve">
          <source>converts a character or characters from &lt;code&gt;charT&lt;/code&gt; to &lt;code&gt;char&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="734693ecae5ea69c964d499c243bc82f7bf7d899" translate="yes" xml:space="preserve">
          <source>converts a character or characters to lowercase</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fd6430c777ec2a99c6a22d9ae82a3bb82e2cab6" translate="yes" xml:space="preserve">
          <source>converts a character or characters to uppercase</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8a55f8dc9c69fe0e1d6b9ce8bc8c9e3a3c12c0b" translate="yes" xml:space="preserve">
          <source>converts a character sequence to an integer or floating-point value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="266625e7c60fa757054738645ce4ca7e73c3249e" translate="yes" xml:space="preserve">
          <source>converts a character to lowercase</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f6c6e483cdb0353f0fe1fec9498dc2ff54ccb6b" translate="yes" xml:space="preserve">
          <source>converts a character to lowercase using the ctype facet of a locale</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1ebe61747fd3e96a65b87b9a3d3572f0a7e14e5" translate="yes" xml:space="preserve">
          <source>converts a character to uppercase</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5233970f59e2645752e10bba4dc4f2f347a5fd5f" translate="yes" xml:space="preserve">
          <source>converts a character to uppercase using the ctype facet of a locale</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28188695920003bdc5fc46b5cfbbc803f14ff931" translate="yes" xml:space="preserve">
          <source>converts a duration to another, rounding down</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15e461d0f0dd6cf95320fc3aaa6cba7a2580659c" translate="yes" xml:space="preserve">
          <source>converts a duration to another, rounding to nearest, ties to even</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c3250b644cdf204e7de6fc3d90bae868fa75cfc" translate="yes" xml:space="preserve">
          <source>converts a duration to another, rounding up</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1030bf3451b64e359a04d20a1f14a2bd8b18462" translate="yes" xml:space="preserve">
          <source>converts a duration to another, with a different tick interval</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4816371834299500c79b1616ee7a308630fc0cc1" translate="yes" xml:space="preserve">
          <source>converts a narrow multibyte character string to wide string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f6ee11f99d62e6ec6e779dc24d4885499b147ef" translate="yes" xml:space="preserve">
          <source>converts a narrow multibyte character string to wide string, given state</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00445e410479334c12fd84ee0205894f592283c9" translate="yes" xml:space="preserve">
          <source>converts a narrow multibyte character to UTF-32 encoding</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c4aa97a2693b5bae3c7549e834e49d573d41070" translate="yes" xml:space="preserve">
          <source>converts a narrow multibyte character to UTF-8 encoding</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c37a3e8da5de8a3eba501ceea50ae76e507fc12d" translate="yes" xml:space="preserve">
          <source>converts a string from externT to internT, such as when reading from file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bdbd0ad735117416fb7f690403214f5d253192c" translate="yes" xml:space="preserve">
          <source>converts a string from internT to externT, such as when writing to file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7429dd0bbb4a219c5c03affe6b4c6b030b4fc55b" translate="yes" xml:space="preserve">
          <source>converts a string to a floating point value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d07b77484e11f1f21693e77cdec123f8edb2cd9" translate="yes" xml:space="preserve">
          <source>converts a string to a signed integer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c90b01787dc4101ee5a81946929cd7473f9d6531" translate="yes" xml:space="preserve">
          <source>converts a string to an unsigned integer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="072fc266b3a04b48231ddb975e8a6153ccf684e6" translate="yes" xml:space="preserve">
          <source>converts a system clock time point to &lt;code&gt;&lt;a href=&quot;../c/time_t&quot;&gt;std::time_t&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="752b1510cc134b6e64a9550f556c36b1789cc8e1" translate="yes" xml:space="preserve">
          <source>converts a system clock time point to &lt;code&gt;&lt;a href=&quot;c/time_t&quot;&gt;std::time_t&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adda122412cc577b3abc07fe91263b94ca64b607" translate="yes" xml:space="preserve">
          <source>converts a time point to another time point on the same clock, with a different duration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c28f1ffe2dcb958d0d115dd4186ee3dcf459d319" translate="yes" xml:space="preserve">
          <source>converts a time_point to another, rounding down</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9adef3f860f7c74a9c2a67925cfb97343652d50" translate="yes" xml:space="preserve">
          <source>converts a time_point to another, rounding to nearest, ties to even</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64cda827b0091def97da883d3b218c50be2a28d0" translate="yes" xml:space="preserve">
          <source>converts a time_point to another, rounding up</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38d24b4ad3ff096a38dbd1ee8d77221006b3172e" translate="yes" xml:space="preserve">
          <source>converts a wide character to its multibyte representation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31ed70a3284d629b8527c00e3128ddd9dcc767da" translate="yes" xml:space="preserve">
          <source>converts a wide character to its multibyte representation, given state</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="390871d3f85d53c19997bf326873a947ef06d0a0" translate="yes" xml:space="preserve">
          <source>converts a wide character to lowercase</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3fbe6b2d6f848a65376be86b38a8fd9e1b79883" translate="yes" xml:space="preserve">
          <source>converts a wide character to uppercase</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58772ed43c7c27b15b0003051805fcdce40768ab" translate="yes" xml:space="preserve">
          <source>converts a wide string into a byte string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c18be0e222e041f701206b87162ea9b79e8a0821" translate="yes" xml:space="preserve">
          <source>converts a wide string to &lt;code&gt;&lt;a href=&quot;../../types/integer&quot;&gt;std::intmax_t&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../../types/integer&quot;&gt;std::uintmax_t&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13859d62c5b69d8447b407f7c33a68af3e0619b2" translate="yes" xml:space="preserve">
          <source>converts a wide string to &lt;code&gt;&lt;a href=&quot;../types/integer&quot;&gt;std::intmax_t&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../types/integer&quot;&gt;std::uintmax_t&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d15ee6ca63681ee938df0462781ab75e66c1ceb2" translate="yes" xml:space="preserve">
          <source>converts a wide string to a floating point value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="383a020a372d049d7a8e91d74f14cf11182abf0a" translate="yes" xml:space="preserve">
          <source>converts a wide string to an integer value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cbe9ccf022b0c9da3ecd026e80f43337e993f37" translate="yes" xml:space="preserve">
          <source>converts a wide string to an unsigned integer value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="835dba29f720938bc9b2bac3407e49bdf2756ca0" translate="yes" xml:space="preserve">
          <source>converts a wide string to narrow multibyte character string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c651f436d188a6f0d0ce32784619802c2face2dc" translate="yes" xml:space="preserve">
          <source>converts a wide string to narrow multibyte character string, given state</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7fa0fbd32804a647dacdda22e22dee2b8040ce0" translate="yes" xml:space="preserve">
          <source>converts an &lt;b&gt;unsigned integer&lt;/b&gt; into decimal representation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a8d59abc092a8c6c539bb30d424bec207514365" translate="yes" xml:space="preserve">
          <source>converts an &lt;b&gt;unsigned integer&lt;/b&gt; into hexadecimal representation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44bd1c08788a5fa9c3ab1ca3da1d9d0c889515d5" translate="yes" xml:space="preserve">
          <source>converts an integer or floating-point value to a character sequence</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6c3adc2489ccac9f7c591d096eb3a7607a63371" translate="yes" xml:space="preserve">
          <source>converts an integral or floating point value to &lt;code&gt;string&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="892448b98ebe3c68838f083338f0a6b603282bf1" translate="yes" xml:space="preserve">
          <source>converts an integral or floating point value to &lt;code&gt;wstring&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b9c869b40dfec9e117a50aecb3acd6eccf5d496" translate="yes" xml:space="preserve">
          <source>converts between &lt;code&gt;file_time&lt;/code&gt; and &lt;code&gt;sys_time&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f17db4a97884f9e43b06f17904d241108c3c2ec" translate="yes" xml:space="preserve">
          <source>converts between &lt;code&gt;file_time&lt;/code&gt; and &lt;code&gt;utc_time&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="838839b0c5f711c1c84a7e1474bfd201c5b83bec" translate="yes" xml:space="preserve">
          <source>converts between UTF-16 and UCS2/UCS4</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8d18cb94157d4a7c8f21eee442aae1978d5811c" translate="yes" xml:space="preserve">
          <source>converts between UTF-8 and UCS2/UCS4</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9bb7377320579e4fcad90a75b39b1cf7c30b866" translate="yes" xml:space="preserve">
          <source>converts between UTF-8 and UTF-16</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="357d5c3842dbbff5f44d0734595b2671953bb333" translate="yes" xml:space="preserve">
          <source>converts between character encodings, including UTF-8, UTF-16, UTF-32</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbbebad2a95c106cb3a3497fa527ae6e985c857a" translate="yes" xml:space="preserve">
          <source>converts calendar time to time since epoch</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29d7f059aa985bc3bc9c1ed2bb04b206bf80e09f" translate="yes" xml:space="preserve">
          <source>converts directory separators to preferred directory separator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fab4272449bd7c5d17a7446fc46db0077996a29" translate="yes" xml:space="preserve">
          <source>converts path to normal form</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02113f0e8ce1de870bba3517901e4336581aed52" translate="yes" xml:space="preserve">
          <source>converts path to proximate form</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d946b337bd2cfd34ca78e2bdf735d71876d3f4f" translate="yes" xml:space="preserve">
          <source>converts path to relative form</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43f6ae84e9d488e0a46358443fff8c0378ce182d" translate="yes" xml:space="preserve">
          <source>converts the glvalue to a prvalue whose result object is copy-initialized by the glvalue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d2e8860e726acdff595290f0a88356e08662485" translate="yes" xml:space="preserve">
          <source>converts the managed pointer to a pointer to different type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="640cb2f1159e44641b7c88efc710a3b3764f93b8" translate="yes" xml:space="preserve">
          <source>converts the next multibyte character to wide character</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12ba55055fdbfdfd3e7a66a1748dbe824b5d6867" translate="yes" xml:space="preserve">
          <source>converts the next multibyte character to wide character, given state</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dde6d4de2385ddd1362f3340d1c0f33db4cf12a0" translate="yes" xml:space="preserve">
          <source>converts the object to &lt;code&gt;&lt;a href=&quot;../../types/size_t&quot;&gt;std::size_t&lt;/a&gt;&lt;/code&gt;, returns &lt;code&gt;value&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae7f671a405b1634062055968e98d31876167a65" translate="yes" xml:space="preserve">
          <source>converts the object to &lt;code&gt;&lt;a href=&quot;size_t&quot;&gt;std::size_t&lt;/a&gt;&lt;/code&gt;, returns &lt;code&gt;value&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="409ae19618662033a66e0270d81be6dbc8ac6679" translate="yes" xml:space="preserve">
          <source>converts the object to &lt;code&gt;bool&lt;/code&gt;, returns &lt;code&gt;value&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7aed717eecce573e85fa28ce3b857e9b9936f9fc" translate="yes" xml:space="preserve">
          <source>converts the object to &lt;code&gt;int&lt;/code&gt;, returns &lt;code&gt;value&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="923eec988fdcc1d93ab880c3f372d001cf31682f" translate="yes" xml:space="preserve">
          <source>converts time since epoch to calendar time expressed as Universal Coordinated Time</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="560dee92110536457d54d91638ab0ba1744da646" translate="yes" xml:space="preserve">
          <source>converts time since epoch to calendar time expressed as local time</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="327874dc1364d0bea727c860f2444275fbd1021e" translate="yes" xml:space="preserve">
          <source>converts to a &lt;code&gt;&lt;a href=&quot;../time_point&quot;&gt;std::chrono::time_point&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b311e481324cce96ce3e5a3c9563b2e5cd21eaa7" translate="yes" xml:space="preserve">
          <source>converts to a &lt;code&gt;&lt;a href=&quot;time_point&quot;&gt;std::chrono::time_point&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="466f72c6ca666b6e93bb61d240ff6bc104ac82f8" translate="yes" xml:space="preserve">
          <source>converts to the underlying string type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="717063d9c775997fb2b73b9178849ebe44408015" translate="yes" xml:space="preserve">
          <source>copies a certain amount of characters from one string to another</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0fd198896a63519fae30da87e78d8c13d47dd31" translate="yes" xml:space="preserve">
          <source>copies a certain amount of wide characters between two non-overlapping arrays</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc0cbd722a716754264029b58b513239c4ae2aec" translate="yes" xml:space="preserve">
          <source>copies a certain amount of wide characters between two, possibly overlapping, arrays</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f6b4eed574f4d2745f302dde8b8ad8351f62d0b" translate="yes" xml:space="preserve">
          <source>copies a certain amount of wide characters from one string to another</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed6a536a820f766ca1bf5b63d91e629178c38878" translate="yes" xml:space="preserve">
          <source>copies a character sequence</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="523ee41a6c1722676f130a4b77d31cdcf534d039" translate="yes" xml:space="preserve">
          <source>copies a number of elements to a new location</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c4351b5399ce3523ea1ef29f74b5ade0a22af77" translate="yes" xml:space="preserve">
          <source>copies a number of objects to an uninitialized area of memory</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2adf0a272728fda4eb27b21381a83c06bb20dbf" translate="yes" xml:space="preserve">
          <source>copies a range dividing the elements into two groups</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c2aa52c7670ed53b0670eadc35ac51934bc40ec" translate="yes" xml:space="preserve">
          <source>copies a range of elements in backwards order</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18b3953b6a4e0b277d946f265a3aaabace7ab523" translate="yes" xml:space="preserve">
          <source>copies a range of elements omitting those that satisfy specific criteria</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38dbebd4ed31a2902ec937aa7f35b35824deb4aa" translate="yes" xml:space="preserve">
          <source>copies a range of elements to a new location</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98d882d1588946829db7273ee4844733764a0a19" translate="yes" xml:space="preserve">
          <source>copies a range of objects to an uninitialized area of memory</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d27a21b27838e63e4e2b7ef9e39119058ed908c4" translate="yes" xml:space="preserve">
          <source>copies a range, replacing elements satisfying specific criteria with another value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e25335ac8a735d87824dfb930d6c8a474d9069d" translate="yes" xml:space="preserve">
          <source>copies a symbolic link</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce575c6a27b37d798d3f62896881c26b2642f3ba" translate="yes" xml:space="preserve">
          <source>copies all function parameters to the coroutine state: by-value parameters are moved or copied, by-reference parameters remain references (and so may become dangling if the coroutine is resumed after the lifetime of referred object ends)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d68f6ca9ded1cd3f7c38182f5037a4207ca31b2" translate="yes" xml:space="preserve">
          <source>copies an object to an uninitialized area of memory, defined by a range</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f617a3eeb18d8231460c6fbdcf07555df323b391" translate="yes" xml:space="preserve">
          <source>copies an object to an uninitialized area of memory, defined by a start and a count</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bba092c7c94c48a661ba4fe5e173bf2f32627c56" translate="yes" xml:space="preserve">
          <source>copies and partially sorts a range of elements</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="457fdd19ef360e5b389e1a88a3a8e30942d2bcee" translate="yes" xml:space="preserve">
          <source>copies and rotate a range of elements</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2bbc7fe93b921860490bf38cb52e5fd9bb31443" translate="yes" xml:space="preserve">
          <source>copies characters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="796f0718a033799174a46fe18c077b3cbae211a1" translate="yes" xml:space="preserve">
          <source>copies exception object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad11198ea404e6c6cc2d5b1a3d2aa15a99738ced" translate="yes" xml:space="preserve">
          <source>copies file contents</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="226d8d86c7f115d4998894447ce17791ca25fd17" translate="yes" xml:space="preserve">
          <source>copies files or directories</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ab9d8382f8e538c0e2b68e92d0f9fda3b822efa" translate="yes" xml:space="preserve">
          <source>copies formatting information</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe36db30d1dc20a8a578f081c17e89701a94d967" translate="yes" xml:space="preserve">
          <source>copies one buffer to another</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="798148074b730c751c82106f913ff34b7c60e2e5" translate="yes" xml:space="preserve">
          <source>copies one string to another</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6dad75f16d695621c45ba6ffdf2e571d10b6349" translate="yes" xml:space="preserve">
          <source>copies one wide string to another</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f424d26675aeb28dc97d2bf2014d9d52bf0d3674" translate="yes" xml:space="preserve">
          <source>copies the given wide character to every position in a wide character array</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04149594b8f3ad1c1f545a388361c5ecbc15135a" translate="yes" xml:space="preserve">
          <source>copies the object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffb13cb53037024ba2e1366a8928d8549fac4e30" translate="yes" xml:space="preserve">
          <source>copies the sign of a floating point value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0477673b2a49a8976e6e19044cf9aeb6adebdee" translate="yes" xml:space="preserve">
          <source>copies the state of scoped_allocator_adaptor and all its allocators</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfd4e1bf1b32bc78da2163551c791b1965c50769" translate="yes" xml:space="preserve">
          <source>copies the state of the specified floating-point status flags from or to the floating-point environment</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f84e2e2dadd87384fb55f25886926b777e8378f1" translate="yes" xml:space="preserve">
          <source>copy</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0454da29d07c42b5996f04ba0edc392bbbb90a6c" translate="yes" xml:space="preserve">
          <source>copy assignment</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="786758b263b54ec3cbeaaf929ae18d3a7f59a568" translate="yes" xml:space="preserve">
          <source>copy assignment operator is defined as deleted</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76af73d9b000cc598c8ce8174c55e14254f51e16" translate="yes" xml:space="preserve">
          <source>copy assignment operator is deleted</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="183ecfccbbd2d4096ad1d48b49c8f24046ebf9c1" translate="yes" xml:space="preserve">
          <source>copy constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41a70de71ec0c160ad271e6f12e14988db9b46c9" translate="yes" xml:space="preserve">
          <source>copy constructor doesn't participate in overload resolution if any member type is not copyable</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed3fbb312555bc8f738f0fcbda6f7df96feb6024" translate="yes" xml:space="preserve">
          <source>copy constructor is defined as deleted</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c949ca558e154526912521bc41bcac7b0cb0c9d2" translate="yes" xml:space="preserve">
          <source>copy constructor required</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8740637735caf00ac97d3d9d094a51a4870646c" translate="yes" xml:space="preserve">
          <source>copy constructor was not required for move-only exception objects when thrown, but copying allowed later</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28407052de5e31619ebfabb1bb2ef16fd2efa211" translate="yes" xml:space="preserve">
          <source>copy constructor with the value &lt;code&gt;T()&lt;/code&gt; has the same effect as value-initialization</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a03abdafd2029b43f54e75e5baab85baa0c38f7a" translate="yes" xml:space="preserve">
          <source>copy elision</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="656343ae5fd32f4137c6b22b8ff5f30923b5ebc0" translate="yes" xml:space="preserve">
          <source>copy elision mandatory</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20b6fa6931978a7c2c7366543eb4af7e4831dbfe" translate="yes" xml:space="preserve">
          <source>copy elision was optional in constant expressions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0229f1d9aca268b53b469da665214eafb5797c84" translate="yes" xml:space="preserve">
          <source>copy initialization</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5b64b805e9b83eb8c85fac2abfe35f102c60f2f" translate="yes" xml:space="preserve">
          <source>copy-assigns the given value to N elements in a range</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ba1bba259f7d2209d0dc882a4e458ed4ab6193f" translate="yes" xml:space="preserve">
          <source>copy-assigns the given value to every element in a range</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a64ac74afc4fafc322dd110c2c5187d7e6f45cf6" translate="yes" xml:space="preserve">
          <source>copy-list-initialization</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2ecf1fcc971ba208705ffbf3ace1e52b44cf810" translate="yes" xml:space="preserve">
          <source>copy-list-initialization (both explicit and non-explicit constructors are considered, but only non-explicit constructors may be called)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c3d666822ebf593b35bac822b54da7b138ff939" translate="yes" xml:space="preserve">
          <source>copy/move assignment operator may not be trivial even if underlying operations are trivial</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84aeac9bdc46f0df330ca16417737720669b76c6" translate="yes" xml:space="preserve">
          <source>copy/move constructors may not be trivial even if underlying constructor is trivial</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d22e51ba16de3b643289c8660b26845e0527c571" translate="yes" xml:space="preserve">
          <source>copy/move constructors may not be trivial even if underlying constructors are trivial</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09a3898e6a7287424c2f924173df609178492a82" translate="yes" xml:space="preserve">
          <source>copy/move of a union with a mutable member was allowed in a constant expression</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43ad9bf16371e1bf538cefc82d7bfc790ad89229" translate="yes" xml:space="preserve">
          <source>copy/move of a union with a mutable member was prohibited by cwg 2004</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0ae3c973f5b84df9ca38461d042e1967148bb8d" translate="yes" xml:space="preserve">
          <source>copy_backward</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66fa60223f1986a1d38dd4f2ea0994959535ba91" translate="yes" xml:space="preserve">
          <source>copy_file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26c5e82f467ff91eaa483f6de719dfc9bd017422" translate="yes" xml:space="preserve">
          <source>copy_n</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d02fdf42eb489ae8febb7fbc14d90d8abbc9ab6e" translate="yes" xml:space="preserve">
          <source>copy_options</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70d46fb81015011864242b33b8fdcf804a913d92" translate="yes" xml:space="preserve">
          <source>copy_symlink</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58643ca179816719db6317752791780e3724024d" translate="yes" xml:space="preserve">
          <source>copycopy_if</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3d00e14cc1d04320db2f164077371b845b398ce" translate="yes" xml:space="preserve">
          <source>copyfmt</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c18feb1f23dba404dd7687ea4e904f4ad48a4fc" translate="yes" xml:space="preserve">
          <source>copysigncopysignfcopysignl</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9eb1c21444e56a9efe7b0655609bc5702dd228c" translate="yes" xml:space="preserve">
          <source>core constant expression</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d0d9add1080eee292307ea84cd7184c218c691a" translate="yes" xml:space="preserve">
          <source>coroutine handle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="089d8e4add4de8068b9654a180b9bcc6321c3c9e" translate="yes" xml:space="preserve">
          <source>coroutine state</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cb3d415329904bf9582ed846971cb870f30ce9a" translate="yes" xml:space="preserve">
          <source>coroutine state is allocated on the heap via non-array &lt;code&gt;&lt;a href=&quot;../memory/new/operator_new&quot;&gt;operator new&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cc73f637d7634fd0b4b3baab8388647997f7d22" translate="yes" xml:space="preserve">
          <source>corrected</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14bc2ba0aad9ab820327ebef27e98fb5ef4b6d96" translate="yes" xml:space="preserve">
          <source>corrected return type and clarified that rvalues are used</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e9c8731cf9d24ff08023a14fba98837d20b3559" translate="yes" xml:space="preserve">
          <source>corrected to require move assignment</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2bbd27583cd011292de9724425b50228a9ba6d4" translate="yes" xml:space="preserve">
          <source>corrected to support allocators</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="881732f752dc76912bb9b15a12e5f6d3746d2eac" translate="yes" xml:space="preserve">
          <source>cos(std::complex)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1472e03d6aa21535111ce5c3c317e2d71e2698a" translate="yes" xml:space="preserve">
          <source>cos(std::valarray)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="599f8dbeaac0dbe557dfb8a9af16182bf5d5102c" translate="yes" xml:space="preserve">
          <source>coscosfcosl</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dec66032a165faadb3091f49e0e338206aca6d51" translate="yes" xml:space="preserve">
          <source>cosh(std::complex)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d72817e4d4926ced58a1663fed4b0deaff7d2dc1" translate="yes" xml:space="preserve">
          <source>cosh(std::valarray)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7d2305371af43dbd36d51c3dd996dd847287681" translate="yes" xml:space="preserve">
          <source>coshcoshfcoshl</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee9f38e186ba06f57b7b74d7e626b94e13ce2556" translate="yes" xml:space="preserve">
          <source>count</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ebba3a2ec0b2071f6e2546bfc95b421cd85d959" translate="yes" xml:space="preserve">
          <source>count1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23baad4da664d8d924a5d8a18ecbb6628d13eef5" translate="yes" xml:space="preserve">
          <source>count2</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1aaac769d88519aa30de4b0e368819caba0ae590" translate="yes" xml:space="preserve">
          <source>countcount_if</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc78042b76e951a40f6f1ed39e34248e748fec09" translate="yes" xml:space="preserve">
          <source>counted range</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c982bc2416e70862f550e842366692bbe81d2b9e" translate="yes" xml:space="preserve">
          <source>counted_iterator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8baa6193aba11aaf003310c38e11b426ffe71433" translate="yes" xml:space="preserve">
          <source>coutwcout</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b629844c06459311586806d8c11d02e760a1908" translate="yes" xml:space="preserve">
          <source>covariant</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09bf7e102464eac60f4739550061680fe5944604" translate="yes" xml:space="preserve">
          <source>cpp/header</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="272f7e18270b016e6c33e25db05d56914de1e5d6" translate="yes" xml:space="preserve">
          <source>create new</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a5631cd5ec60fddf28de9dac5240460b0f94dc3" translate="yes" xml:space="preserve">
          <source>create_directorycreate_directories</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62b2707b5a98a3c6cb4fd024a7f0eefcf66304b0" translate="yes" xml:space="preserve">
          <source>create_hard_link</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68824d0632364aa6aab6beb66d6e363caac377f6" translate="yes" xml:space="preserve">
          <source>create_symlinkcreate_directory_symlink</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb13891cd7b3207c3aa20feedf9d46c0c670dcbf" translate="yes" xml:space="preserve">
          <source>creates a &lt;code&gt;&lt;a href=&quot;../iterator/back_insert_iterator&quot;&gt;std::back_insert_iterator&lt;/a&gt;&lt;/code&gt; of type inferred from the argument</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82e7842e5ecfde01d04c1758212b02380b3144f9" translate="yes" xml:space="preserve">
          <source>creates a &lt;code&gt;&lt;a href=&quot;../iterator/front_insert_iterator&quot;&gt;std::front_insert_iterator&lt;/a&gt;&lt;/code&gt; of type inferred from the argument</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3794c4fa277708cdeefe0718195105587151172" translate="yes" xml:space="preserve">
          <source>creates a &lt;code&gt;&lt;a href=&quot;../iterator/insert_iterator&quot;&gt;std::insert_iterator&lt;/a&gt;&lt;/code&gt; of type inferred from the argument</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8811ad733975eddb5ea98b6bd8ba46108a00661" translate="yes" xml:space="preserve">
          <source>creates a &lt;code&gt;&lt;a href=&quot;../iterator/move_iterator&quot;&gt;std::move_iterator&lt;/a&gt;&lt;/code&gt; of type inferred from the argument</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f71248d722f5348b7ba717aa78abc207f0dc4126" translate="yes" xml:space="preserve">
          <source>creates a &lt;code&gt;&lt;a href=&quot;../iterator/reverse_iterator&quot;&gt;std::reverse_iterator&lt;/a&gt;&lt;/code&gt; of type inferred from the argument</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90a241b82b69c2f85dbe7ef791e7db6acf4dc749" translate="yes" xml:space="preserve">
          <source>creates a &lt;code&gt;&lt;a href=&quot;../utility/functional/reference_wrapper&quot;&gt;std::reference_wrapper&lt;/a&gt;&lt;/code&gt; with a type deduced from its argument</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0f4b34409ad3c5b76ef44b959c2a626ba76ad68" translate="yes" xml:space="preserve">
          <source>creates a &lt;code&gt;&lt;a href=&quot;back_insert_iterator&quot;&gt;std::back_insert_iterator&lt;/a&gt;&lt;/code&gt; of type inferred from the argument</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ebad45013c3ec5f6517b701513bc6134afaa521" translate="yes" xml:space="preserve">
          <source>creates a &lt;code&gt;&lt;a href=&quot;front_insert_iterator&quot;&gt;std::front_insert_iterator&lt;/a&gt;&lt;/code&gt; of type inferred from the argument</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2e2bc292ef5131350e0c3ccf0750b2f1d44cb63" translate="yes" xml:space="preserve">
          <source>creates a &lt;code&gt;&lt;a href=&quot;functional/reference_wrapper&quot;&gt;std::reference_wrapper&lt;/a&gt;&lt;/code&gt; with a type deduced from its argument</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33e15b0ea612cfed039bfd133815aa5c27d753f4" translate="yes" xml:space="preserve">
          <source>creates a &lt;code&gt;&lt;a href=&quot;insert_iterator&quot;&gt;std::insert_iterator&lt;/a&gt;&lt;/code&gt; of type inferred from the argument</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dd1b54c38fffc58a45e258eadc8fb9a777bd4c7" translate="yes" xml:space="preserve">
          <source>creates a &lt;code&gt;&lt;a href=&quot;iterator/back_insert_iterator&quot;&gt;std::back_insert_iterator&lt;/a&gt;&lt;/code&gt; of type inferred from the argument</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03a113d34d36ef648b0de8cdbb9a893210aa02ec" translate="yes" xml:space="preserve">
          <source>creates a &lt;code&gt;&lt;a href=&quot;iterator/front_insert_iterator&quot;&gt;std::front_insert_iterator&lt;/a&gt;&lt;/code&gt; of type inferred from the argument</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad8b6d6ff6a3b729f89634be462bf134c80dfce9" translate="yes" xml:space="preserve">
          <source>creates a &lt;code&gt;&lt;a href=&quot;iterator/insert_iterator&quot;&gt;std::insert_iterator&lt;/a&gt;&lt;/code&gt; of type inferred from the argument</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="122e20504c9f06a38cb5367317798f075d6b6ae9" translate="yes" xml:space="preserve">
          <source>creates a &lt;code&gt;&lt;a href=&quot;iterator/move_iterator&quot;&gt;std::move_iterator&lt;/a&gt;&lt;/code&gt; of type inferred from the argument</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29bf3efc779bda633d6577b235f2d3870185fdef" translate="yes" xml:space="preserve">
          <source>creates a &lt;code&gt;&lt;a href=&quot;iterator/reverse_iterator&quot;&gt;std::reverse_iterator&lt;/a&gt;&lt;/code&gt; of type inferred from the argument</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ad0696345779c9205182bd3a70d99f8ec2230c0" translate="yes" xml:space="preserve">
          <source>creates a &lt;code&gt;pair&lt;/code&gt; object of type, defined by the argument types</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f6e9343bfcde86e96601749a481e60ae7a60e34" translate="yes" xml:space="preserve">
          <source>creates a &lt;code&gt;path&lt;/code&gt; from a UTF-8 encoded source</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7571ab28fa16279ee1b671f3aeb2aeb81fe300a" translate="yes" xml:space="preserve">
          <source>creates a &lt;code&gt;shared_ptr&lt;/code&gt; that manages the referenced object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d923f766af63d6e9280f6df7e72e133b55e25eec" translate="yes" xml:space="preserve">
          <source>creates a &lt;code&gt;std::back_insert_iterator&lt;/code&gt; of type inferred from the argument</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd4b655dabe5ee4835df49c3d0a4846f4b11734e" translate="yes" xml:space="preserve">
          <source>creates a &lt;code&gt;std::front_insert_iterator&lt;/code&gt; of type inferred from the argument</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5de497c4d4a914fb5016401d5400d7ede90f212d" translate="yes" xml:space="preserve">
          <source>creates a &lt;code&gt;std::future_error&lt;/code&gt; object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb863efcfc386073537a78887349e7b5974fa30f" translate="yes" xml:space="preserve">
          <source>creates a &lt;code&gt;std::insert_iterator&lt;/code&gt; of type inferred from the argument</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e19c6bfc557984e147ab7df470f7794047e68563" translate="yes" xml:space="preserve">
          <source>creates a &lt;code&gt;std::move_iterator&lt;/code&gt; of type inferred from the argument</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91bf065e8e2a37d1839062e38e54c8b808b0a33e" translate="yes" xml:space="preserve">
          <source>creates a &lt;code&gt;std::reference_wrapper&lt;/code&gt; with a type deduced from its argument</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3b1577f8f5e6c74674070170592509b0efacd94" translate="yes" xml:space="preserve">
          <source>creates a &lt;code&gt;std::reverse_iterator&lt;/code&gt; of type inferred from the argument</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b515c6f2a80746d577ed87d091ad03d2a14b74f0" translate="yes" xml:space="preserve">
          <source>creates a &lt;code&gt;tuple&lt;/code&gt; by concatenating any number of tuples</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b545fa66429780b6bdee3dbdee52327b2e8644a5" translate="yes" xml:space="preserve">
          <source>creates a &lt;code&gt;tuple&lt;/code&gt; object of the type defined by the argument types</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b5893752ddb8d00a10caa8518ec0f744dca4cb9" translate="yes" xml:space="preserve">
          <source>creates a &lt;code&gt;tuple&lt;/code&gt; of lvalue references or unpacks a tuple into individual objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74d1ccf985cf42b7b2b70811936e31fd1b5da34d" translate="yes" xml:space="preserve">
          <source>creates a &lt;code&gt;tuple&lt;/code&gt; of rvalue references</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a5aea9cba6a2e99ea5391c812e0d15aed37c5bf" translate="yes" xml:space="preserve">
          <source>creates a codecvt facet for the named locale</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34a1af81411757b23c3e3b9794ccef2881b94768" translate="yes" xml:space="preserve">
          <source>creates a collate facet for the named locale</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d18884ec8047ef77105fe5df6f83fe25b00a3bde" translate="yes" xml:space="preserve">
          <source>creates a copy of &lt;code&gt;a&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70ed0999ab702b3861d81141f3dbba648602f2f3" translate="yes" xml:space="preserve">
          <source>creates a copy of a range that is reversed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be3fb023b4330d875c4cf484bf07a16e94dae218" translate="yes" xml:space="preserve">
          <source>creates a copy of some range of elements that contains no consecutive duplicates</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b37c3de3166f56b87c96f59d89174d4a4e15538a" translate="yes" xml:space="preserve">
          <source>creates a copy of the object, increments or decrements the value of the object and returns the copy from before the increment or decrement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e4fc57cd5f982428a5f4e77a0d3f7b27763ac90" translate="yes" xml:space="preserve">
          <source>creates a ctype facet for the named locale</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22eedc2e9d73de41563c2da00a47beecdd6fd486" translate="yes" xml:space="preserve">
          <source>creates a distribution indistinguishable from &lt;code&gt;D&lt;/code&gt; constructed directly from the values used to construct &lt;code&gt;p&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0abbb3e86b0d312a52a940bcb49338130d61de7b" translate="yes" xml:space="preserve">
          <source>creates a distribution indistinguishable from any other default-constructed &lt;code&gt;D&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2de9788ec306e2ee06df1d31c30a5987aa307ba6" translate="yes" xml:space="preserve">
          <source>creates a function object out of a pointer to a member</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec3bc3d30e2b01e66f4e20842303c72a8b78d7d2" translate="yes" xml:space="preserve">
          <source>creates a hard link</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcd8fbf30594706702e2875907cea4f111e603c4" translate="yes" xml:space="preserve">
          <source>creates a max heap out of a range of elements</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e99bd8fd4eada2497dcdcebfcdfebc4952d9a227" translate="yes" xml:space="preserve">
          <source>creates a messages facet for the named locale</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="730dc91d6e47cdfdef87b63f20ea5c779b8380dd" translate="yes" xml:space="preserve">
          <source>creates a new &lt;code&gt;auto_ptr&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69039015838ffd139376a34a8c19c7a0c6cbb5a1" translate="yes" xml:space="preserve">
          <source>creates a new &lt;code&gt;raw_storage_iterator&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85c40a1e53d9e8e75589ecbefc506bd47f926ea6" translate="yes" xml:space="preserve">
          <source>creates a new &lt;code&gt;weak_ptr&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc97bd36e0093fccc9fb05035175e2953f0726e6" translate="yes" xml:space="preserve">
          <source>creates a new allocator instance</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5addb9d17122d3442bc2d208eee3b2489558e3ef" translate="yes" xml:space="preserve">
          <source>creates a new scoped_allocator_adaptor instance</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d58864bdba494cc2b5dffa16c866e5858490a93" translate="yes" xml:space="preserve">
          <source>creates a numpunct facet for the named locale</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59177cd4f5e322b22cf4d51e0738e032af5e1dd3" translate="yes" xml:space="preserve">
          <source>creates a shared pointer that manages a new object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="291a08cfa5de6a7e00d4f2c23829a5fc38b84a1e" translate="yes" xml:space="preserve">
          <source>creates a shared pointer that manages a new object allocated using an allocator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="242015dcd64bc8784a1eaa4e2943ef16a98fd5a0" translate="yes" xml:space="preserve">
          <source>creates a subrange from an iterator and a count</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5700c2af275e1ce993650ef27be2d2577f6c1af" translate="yes" xml:space="preserve">
          <source>creates a symbolic link</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88be56a8691625b0d5d68d2f2a051a2bb095d7aa" translate="yes" xml:space="preserve">
          <source>creates a synonym for a type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c75714698a5b2d2446b7940f527c7781ecbab774" translate="yes" xml:space="preserve">
          <source>creates a unique pointer that manages a new object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6900817a192a1a06e470e7d2ffef69973d29e109" translate="yes" xml:space="preserve">
          <source>creates a wrapper from a pointer to member function, callable with a pointer to object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa354995e1af25d06d555200bfe98bb7b8a59f03" translate="yes" xml:space="preserve">
          <source>creates a wrapper from a pointer to member function, callable with a reference to object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="019955c203e056832bb6560816997ba2ce28e222" translate="yes" xml:space="preserve">
          <source>creates an &lt;code&gt;&lt;a href=&quot;../error/exception_ptr&quot;&gt;std::exception_ptr&lt;/a&gt;&lt;/code&gt; from an exception object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="859a475009166fd67d0c39ec9d618a5a8f50f9ff" translate="yes" xml:space="preserve">
          <source>creates an &lt;code&gt;&lt;a href=&quot;error/exception_ptr&quot;&gt;std::exception_ptr&lt;/a&gt;&lt;/code&gt; from an exception object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ce4b6c3b632da428fe9c1533138f1ca427eeb1f" translate="yes" xml:space="preserve">
          <source>creates an &lt;code&gt;&lt;a href=&quot;exception_ptr&quot;&gt;std::exception_ptr&lt;/a&gt;&lt;/code&gt; from an exception object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29dcb8b6ce736baf89c734daee1b94b6adfa8315" translate="yes" xml:space="preserve">
          <source>creates an &lt;code&gt;any&lt;/code&gt; object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a247303c1c02196a1c2f934d62333b8df7a86e23" translate="yes" xml:space="preserve">
          <source>creates an &lt;code&gt;optional&lt;/code&gt; object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4206c42e87f76c55dce968ddd6417bdb42f9768" translate="yes" xml:space="preserve">
          <source>creates an &lt;code&gt;std::exception_ptr&lt;/code&gt; from an exception object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31bad952695e35cb921211681d611cfffa65cef5" translate="yes" xml:space="preserve">
          <source>creates an adaptor-compatible function object wrapper from a pointer to function</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
