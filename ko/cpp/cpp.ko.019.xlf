<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="cpp">
    <body>
      <group id="cpp">
        <trans-unit id="714e8e0d9935902a6887a396fa6d2f712afabcf0" translate="yes" xml:space="preserve">
          <source>Positive value if &lt;code&gt;lhs&lt;/code&gt; is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f07de6b6e7f7f4c9848913bcbea3c04d282f1f3e" translate="yes" xml:space="preserve">
          <source>Positive value if &lt;code&gt;s1&lt;/code&gt; is</source>
          <target state="translated">&lt;code&gt;s1&lt;/code&gt; 이 양수인 경우 양수</target>
        </trans-unit>
        <trans-unit id="c8da30a556cc6a558610c8a6fdf30e74fd738d9f" translate="yes" xml:space="preserve">
          <source>Positive value if the first differing byte in &lt;code&gt;lhs&lt;/code&gt; is greater than the corresponding byte in &lt;code&gt;rhs&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;lhs&lt;/code&gt; 의 첫 번째 다른 바이트가 &lt;code&gt;rhs&lt;/code&gt; 의 해당 바이트보다 큰 경우 양수 값 입니다.</target>
        </trans-unit>
        <trans-unit id="2c5624e422d114bf4c07e574d33c43264c084cff" translate="yes" xml:space="preserve">
          <source>Positive value if the value of the first differing wide character in &lt;code&gt;lhs&lt;/code&gt; is greater than the value of the corresponding wide character in &lt;code&gt;rhs&lt;/code&gt;: &lt;code&gt;rhs&lt;/code&gt; precedes &lt;code&gt;lhs&lt;/code&gt; in lexicographical order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22699cd695b19df35f40c030da01dbad38091e8e" translate="yes" xml:space="preserve">
          <source>Possible Implementation</source>
          <target state="translated">가능한 구현</target>
        </trans-unit>
        <trans-unit id="00d014f6e89348741eecc9997521bd010438349e" translate="yes" xml:space="preserve">
          <source>Possible implementation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a78bac5dbecd72e3a2b6b9a7c6387b18bbb07e9b" translate="yes" xml:space="preserve">
          <source>Possible implementation of &lt;code&gt;mbstate_t&lt;/code&gt; is a struct type holding an array representing the incomplete multibyte character, an integer counter indicating the number of bytes in the array that have been processed, and a representation of the current shift state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fef4f19dbc69bc7fa8ed2879ac59a6eb92531a56" translate="yes" xml:space="preserve">
          <source>Possible output:</source>
          <target state="translated">가능한 출력 :</target>
        </trans-unit>
        <trans-unit id="e68bf1ee5fb7ebaa2c60990e3a4313fdbc43ee4a" translate="yes" xml:space="preserve">
          <source>Possibly const value of type &lt;code&gt;X&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;X&lt;/code&gt; 유형의 const 값</target>
        </trans-unit>
        <trans-unit id="c78f87bc6e30cc3d7c639f338588006b1df69867" translate="yes" xml:space="preserve">
          <source>Possibly const value of type &lt;code&gt;X&lt;/code&gt; when type &lt;code&gt;X::key_compare::is_transparent&lt;/code&gt; exists</source>
          <target state="translated">형의 아마 CONST 값 &lt;code&gt;X&lt;/code&gt; 타입 &lt;code&gt;X::key_compare::is_transparent&lt;/code&gt; 존재</target>
        </trans-unit>
        <trans-unit id="b801bf3c3f479a3d017aa24607f9e949752972a8" translate="yes" xml:space="preserve">
          <source>Post-conditions</source>
          <target state="translated">Post-conditions</target>
        </trans-unit>
        <trans-unit id="dba3afaa7e3ccf2691afef5136eb2331ecad912a" translate="yes" xml:space="preserve">
          <source>Post-increment</source>
          <target state="translated">Post-increment</target>
        </trans-unit>
        <trans-unit id="4a33ada7833e60337527816ecffe126bac77ffb5" translate="yes" xml:space="preserve">
          <source>Post: C().empty() == true</source>
          <target state="translated">게시물 : C (). empty () == true</target>
        </trans-unit>
        <trans-unit id="935988d8aabd70e6e17594844fbe4dfb47a845f1" translate="yes" xml:space="preserve">
          <source>Post: a == C(a)</source>
          <target state="translated">게시물 : a == C (a)</target>
        </trans-unit>
        <trans-unit id="569bc86b2a2f98fe054699b3b0aa05f0876ef81b" translate="yes" xml:space="preserve">
          <source>Post: a == b</source>
          <target state="translated">게시물 : a == b</target>
        </trans-unit>
        <trans-unit id="aa536d0211c0fef5dc061c78a2b2f8be7b6e0bb9" translate="yes" xml:space="preserve">
          <source>Postcondition:</source>
          <target state="translated">Postcondition:</target>
        </trans-unit>
        <trans-unit id="d8634e6f132ac80533665408e1979d7cf23e4b92" translate="yes" xml:space="preserve">
          <source>Postcondition: &lt;code&gt;d.param() == p&lt;/code&gt;</source>
          <target state="translated">사후 조건 : &lt;code&gt;d.param() == p&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="82ecf35c1a8706936b0e8617bb976a01dca6b88c" translate="yes" xml:space="preserve">
          <source>Postconditions</source>
          <target state="translated">Postconditions</target>
        </trans-unit>
        <trans-unit id="779a08778b546cc01e4f490dfca4c982a8f25744" translate="yes" xml:space="preserve">
          <source>Postconditions:</source>
          <target state="translated">Postconditions:</target>
        </trans-unit>
        <trans-unit id="25766a5bae056013827d0b4d2af70bb06346b62d" translate="yes" xml:space="preserve">
          <source>Potential exceptions</source>
          <target state="translated">잠재적 예외</target>
        </trans-unit>
        <trans-unit id="3b3a2228beca8f49314c3fcd02a2b8475fe33e8f" translate="yes" xml:space="preserve">
          <source>Power functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="290521a86bdefe7230bf95eab0f7dc26f5f47447" translate="yes" xml:space="preserve">
          <source>Pragma directive controls implementation-specific behavior of the compiler, such as disabling compiler warnings or changing alignment requirements. Any pragma that is not recognized is ignored.</source>
          <target state="translated">Pragma 지시문은 컴파일러 경고 비활성화 또는 정렬 요구 사항 변경과 같은 컴파일러의 구현 별 동작을 제어합니다. 인식되지 않는 pragma는 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="db110193cf4704a68ac76522997460ef9d33fd6e" translate="yes" xml:space="preserve">
          <source>Pre-2011 C++ followed the C model, but restored the name &quot;rvalue&quot; to non-lvalue expressions, made functions into lvalues, and added the rule that references can bind to lvalues, but only references to const can bind to rvalues. Several non-lvalue C expressions became lvalue expressions in C++.</source>
          <target state="translated">2011 년 이전 C ++은 C 모델을 따르지만 &quot;rvalue&quot;라는 이름을 llvalue가 아닌 표현식으로 복원하고 함수를 lvalue로 만들고 참조가 lvalue에 바인딩 할 수 있지만 const에 대한 참조 만 rvalue에 바인딩 할 수있는 규칙을 추가했습니다. 비 lvalue C 표현식은 C ++에서 lvalue 표현식이되었습니다.</target>
        </trans-unit>
        <trans-unit id="60b1ae7a18fa0640d04646f99fe80ba3f35e9a17" translate="yes" xml:space="preserve">
          <source>Pre-condition</source>
          <target state="translated">Pre-condition</target>
        </trans-unit>
        <trans-unit id="2622d6b55c869bdb8a6059863ab2859b84b011cc" translate="yes" xml:space="preserve">
          <source>Pre-increment</source>
          <target state="translated">Pre-increment</target>
        </trans-unit>
        <trans-unit id="5ad216c7802dab8280c48dbc52be49edac86980e" translate="yes" xml:space="preserve">
          <source>Pre: T must be &lt;a href=&quot;copyinsertable&quot;&gt;CopyInsertable&lt;/a&gt;</source>
          <target state="translated">Pre : T는 &lt;a href=&quot;copyinsertable&quot;&gt;CopyInsertable&lt;/a&gt; 이어야합니다</target>
        </trans-unit>
        <trans-unit id="3c3a86736b899c9affc0e179e88236d9561581cc" translate="yes" xml:space="preserve">
          <source>Pre: T must be &lt;a href=&quot;equalitycomparable&quot;&gt;EqualityComparable&lt;/a&gt;</source>
          <target state="translated">Pre : T는 &lt;a href=&quot;equalitycomparable&quot;&gt;같음&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ab86fb82a986460447b29bbb55ca5b9bf867bad6" translate="yes" xml:space="preserve">
          <source>Precedence</source>
          <target state="translated">Precedence</target>
        </trans-unit>
        <trans-unit id="d328b896ce45a273d4761ff13c59c36bf6405865" translate="yes" xml:space="preserve">
          <source>Precedence and associativity are compile-time concepts and are independent from &lt;a href=&quot;eval_order&quot;&gt;order of evaluation&lt;/a&gt;, which is a runtime concept.</source>
          <target state="translated">우선 순위와 연관성은 컴파일 타임 개념이며 런타임 개념 &lt;a href=&quot;eval_order&quot;&gt;인 평가 순서&lt;/a&gt; 와 독립적 입니다.</target>
        </trans-unit>
        <trans-unit id="3dd4db5ce7ea626f59e720f0c27096a22aa1ecd0" translate="yes" xml:space="preserve">
          <source>Precision</source>
          <target state="translated">Precision</target>
        </trans-unit>
        <trans-unit id="646ad9740d80073615a87f1e15d4c39112839036" translate="yes" xml:space="preserve">
          <source>Precondition</source>
          <target state="translated">Precondition</target>
        </trans-unit>
        <trans-unit id="2999ac3ba2bc477f3afc51730a9b2e061a97bc1d" translate="yes" xml:space="preserve">
          <source>Precondition:</source>
          <target state="translated">Precondition:</target>
        </trans-unit>
        <trans-unit id="3e9e6889bb8f4623acbbcf4674f69009bc88434a" translate="yes" xml:space="preserve">
          <source>Preconditions and postconditions are collectively called</source>
          <target state="translated">전제 조건과 사후 조건을 총칭합니다</target>
        </trans-unit>
        <trans-unit id="e42ec15ba1c3ad18c4c1f8ca973ef75f0142de9d" translate="yes" xml:space="preserve">
          <source>Preconditions:</source>
          <target state="translated">Preconditions:</target>
        </trans-unit>
        <trans-unit id="755d0fb58f888971d45aecc98562855a286dff7f" translate="yes" xml:space="preserve">
          <source>Predefined execution policies for parallel versions of the algorithms</source>
          <target state="translated">병렬 버전의 알고리즘에 대한 사전 정의 된 실행 정책</target>
        </trans-unit>
        <trans-unit id="a736be4bbfebe3160daae16f87e30915c41e06a7" translate="yes" xml:space="preserve">
          <source>Predefined generators</source>
          <target state="translated">사전 정의 된 생성기</target>
        </trans-unit>
        <trans-unit id="75f2e4344f7133573ec1e2a5657aee298b86d10a" translate="yes" xml:space="preserve">
          <source>Predefined macros</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4ff31c92f7dca4f72432a1af9a6a5ec6c5ee5cd" translate="yes" xml:space="preserve">
          <source>Predefined random number generators</source>
          <target state="translated">미리 정의 된 난수 생성기</target>
        </trans-unit>
        <trans-unit id="71c35a62f0da8b066fc3ea68b8cfbbf75618b8a1" translate="yes" xml:space="preserve">
          <source>Predefined standard stream objects</source>
          <target state="translated">미리 정의 된 표준 스트림 객체</target>
        </trans-unit>
        <trans-unit id="9eee28bfd739e1debf4d3b892d013537ae16da9f" translate="yes" xml:space="preserve">
          <source>Predicate</source>
          <target state="translated">Predicate</target>
        </trans-unit>
        <trans-unit id="0e6000a83320dfd08fff8ba58509740e164f29c7" translate="yes" xml:space="preserve">
          <source>Predicate is typically used with algorithms that take input data (individual objects/containers) and a predicate, which is then called on input data to decide on further course of action. Some examples of predicate usage in C++ standard library are:</source>
          <target state="translated">술어는 일반적으로 입력 데이터 (개별 오브젝트 / 컨테이너)와 술어를 취하는 알고리즘과 함께 사용되며,이 술어는 추가 조치 과정을 결정하기 위해 입력 데이터에서 호출됩니다. C ++ 표준 라이브러리에서 술어 사용법의 몇 가지 예는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="af25fa09ce46d49eb67a92a80d4337b94a9a6590" translate="yes" xml:space="preserve">
          <source>Prefix &lt;a href=&quot;operator_incdec&quot;&gt;increment and decrement&lt;/a&gt;</source>
          <target state="translated">접두사 &lt;a href=&quot;operator_incdec&quot;&gt;증가 및 감소&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ff075ee89070b678c3e79c8363a0e3d8017577b2" translate="yes" xml:space="preserve">
          <source>Prefix versions of the built-in operators return</source>
          <target state="translated">내장 연산자의 접두사 버전은</target>
        </trans-unit>
        <trans-unit id="9d4c68c11d780fd882c671bb15dfc340f69aa42f" translate="yes" xml:space="preserve">
          <source>Prepares the argument list needed to create an object of the given type &lt;code&gt;T&lt;/code&gt; by means of &lt;a href=&quot;uses_allocator&quot;&gt;uses-allocator construction&lt;/a&gt;.</source>
          <target state="translated">주어진 타입의 객체 생성하는데 필요한 준비 인수리스트 &lt;code&gt;T&lt;/code&gt; 를 통해 &lt;a href=&quot;uses_allocator&quot;&gt;사용-할당 건설&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="1f41a0dbe8592683435fed7c29a92966b72fd7cc" translate="yes" xml:space="preserve">
          <source>Prepares the stream for formatted input.</source>
          <target state="translated">형식화 된 입력을 위해 스트림을 준비합니다.</target>
        </trans-unit>
        <trans-unit id="45f7938dc8567dca15b76d644c0796c47b249b99" translate="yes" xml:space="preserve">
          <source>Prepares the stream for formatted output.</source>
          <target state="translated">형식화 된 출력을 위해 스트림을 준비합니다.</target>
        </trans-unit>
        <trans-unit id="b13364fb5d6feff1c8f34a1dea2e791d8059905e" translate="yes" xml:space="preserve">
          <source>Prepends a &lt;code&gt;T&lt;/code&gt; constructed with &lt;code&gt;&lt;a href=&quot;../utility/forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;Args&amp;gt;(args)...&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../utility/forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;Args&amp;gt;(args)...&lt;/code&gt; &amp;lt;Args&amp;gt; (args)로 구성된 &lt;code&gt;T&lt;/code&gt; 앞에 추가합니다 ...</target>
        </trans-unit>
        <trans-unit id="9cd4d22db2184099b75c1ae40fce939fd4a812e0" translate="yes" xml:space="preserve">
          <source>Prepends a copy of &lt;code&gt;rv&lt;/code&gt;, possibly using move semantics</source>
          <target state="translated">이동 의미론을 사용하여 &lt;code&gt;rv&lt;/code&gt; 사본 앞에 추가</target>
        </trans-unit>
        <trans-unit id="c6e30d4f1210f70fc516a028bc8c46c51657b500" translate="yes" xml:space="preserve">
          <source>Prepends a copy of &lt;code&gt;t&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;t&lt;/code&gt; 의 사본 앞에 붙는다</target>
        </trans-unit>
        <trans-unit id="7fa9308afb9ddf840546b871e028077e01bf66cb" translate="yes" xml:space="preserve">
          <source>Prepends the given element &lt;code&gt;value&lt;/code&gt; to the beginning of the container.</source>
          <target state="translated">컨테이너 시작 부분에 주어진 요소 &lt;code&gt;value&lt;/code&gt; 을 추가합니다 .</target>
        </trans-unit>
        <trans-unit id="690b8706d3e1f79bde61f6dc644048c260a4aafe" translate="yes" xml:space="preserve">
          <source>Preprocessor</source>
          <target state="translated">Preprocessor</target>
        </trans-unit>
        <trans-unit id="74419c3d7a94db8c36eddeafd3e7fa4e7dab34a1" translate="yes" xml:space="preserve">
          <source>Preprocessor macros</source>
          <target state="translated">전 처리기 매크로</target>
        </trans-unit>
        <trans-unit id="2cadb737a3c128ae8bea9f580dfb32f139a93360" translate="yes" xml:space="preserve">
          <source>Previous owner died</source>
          <target state="translated">이전 소유자가 사망</target>
        </trans-unit>
        <trans-unit id="4f4bbb5e0cb36ae9eddced10ea643518cae66105" translate="yes" xml:space="preserve">
          <source>Previous signal handler on success or &lt;code&gt;&lt;a href=&quot;sig_err&quot;&gt;SIG_ERR&lt;/a&gt;&lt;/code&gt; on failure (setting a signal handler can be disabled on some implementations).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9a96ec019494d5b8b041c1d2468061ae66e35d5" translate="yes" xml:space="preserve">
          <source>Primary</source>
          <target state="translated">Primary</target>
        </trans-unit>
        <trans-unit id="b81c3b2406a040705cea018bdc1408c0675f3ad3" translate="yes" xml:space="preserve">
          <source>Primary categories</source>
          <target state="translated">기본 카테고리</target>
        </trans-unit>
        <trans-unit id="610cd0ab8c3ab5b15fdfa49aabc7a8429ee0623d" translate="yes" xml:space="preserve">
          <source>Primary expressions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2d83338b8e29ac2309be82d56e0443145d5a534" translate="yes" xml:space="preserve">
          <source>Primary expressions are any of the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28dda6eaafce0f04d7da7ca7af888f4098747176" translate="yes" xml:space="preserve">
          <source>Primary template</source>
          <target state="translated">기본 템플릿</target>
        </trans-unit>
        <trans-unit id="e5b8721b54492cfe7442ac77139b87555d01cc17" translate="yes" xml:space="preserve">
          <source>Primary type categories</source>
          <target state="translated">기본 유형 카테고리</target>
        </trans-unit>
        <trans-unit id="ffafa88c6f976297b9421ad4171675a387b485a2" translate="yes" xml:space="preserve">
          <source>Primitives</source>
          <target state="translated">Primitives</target>
        </trans-unit>
        <trans-unit id="fdcb0c29e349affc468fbe04893dfb1a8788329e" translate="yes" xml:space="preserve">
          <source>Prints a textual description of the error code currently stored in the system variable &lt;code&gt;&lt;a href=&quot;../../error/errno&quot;&gt;errno&lt;/a&gt;&lt;/code&gt; to &lt;code&gt;&lt;a href=&quot;../c&quot;&gt;stderr&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">시스템 변수 &lt;code&gt;&lt;a href=&quot;../../error/errno&quot;&gt;errno&lt;/a&gt;&lt;/code&gt; 에 현재 저장된 오류 코드의 텍스트 설명 을 &lt;code&gt;&lt;a href=&quot;../c&quot;&gt;stderr&lt;/a&gt;&lt;/code&gt; 에 인쇄 합니다.</target>
        </trans-unit>
        <trans-unit id="85efb3ad9f12618fd579b4e182cb87fc553de0b4" translate="yes" xml:space="preserve">
          <source>Prior &lt;code&gt;&lt;a href=&quot;unlock&quot;&gt;unlock()&lt;/a&gt;&lt;/code&gt; operation on the same mutex</source>
          <target state="translated">동일한 뮤텍스에서 이전 &lt;code&gt;&lt;a href=&quot;unlock&quot;&gt;unlock()&lt;/a&gt;&lt;/code&gt; 작업</target>
        </trans-unit>
        <trans-unit id="2557b80b9ddaa2e3af5806757ac28361ae5dd7b1" translate="yes" xml:space="preserve">
          <source>Prior &lt;code&gt;&lt;a href=&quot;unlock&quot;&gt;unlock()&lt;/a&gt;&lt;/code&gt; operations on the same mutex</source>
          <target state="translated">동일한 뮤텍스에 대한 이전 &lt;code&gt;&lt;a href=&quot;unlock&quot;&gt;unlock()&lt;/a&gt;&lt;/code&gt; 작업</target>
        </trans-unit>
        <trans-unit id="f3ad407a801bcab6d08ae9af05f29dbf44f0d236" translate="yes" xml:space="preserve">
          <source>Prior &lt;code&gt;m.unlock()&lt;/code&gt; operations on the same mutex</source>
          <target state="translated">동일한 뮤텍스에 대한 이전 &lt;code&gt;m.unlock()&lt;/code&gt; 작업</target>
        </trans-unit>
        <trans-unit id="586aa094d23c73e66fdb393424cab4c5ec13250e" translate="yes" xml:space="preserve">
          <source>Prior to C++03 (which introduced &lt;a href=&quot;value_initialization&quot;&gt;value initialization&lt;/a&gt;), the expression &lt;code&gt;new T()&lt;/code&gt; as well as a member initializer naming a base or a member with the initializer in the form of an empty pair of parentheses was classified as default initialization, but specified &lt;a href=&quot;zero_initialization&quot;&gt;zero initialization&lt;/a&gt; for non-class types.</source>
          <target state="translated">C ++ 03 ( &lt;a href=&quot;value_initialization&quot;&gt;값 초기화&lt;/a&gt; 를 도입 한 ) 이전에, &lt;code&gt;new T()&lt;/code&gt; 표현식 과 기본 이름을 지정하는 멤버 이니셜 라이저 또는 빈 괄호 쌍으로 이니셜 라이저가있는 멤버를 기본 초기화로 분류했지만 비 클래스 유형에 대해 지정된 &lt;a href=&quot;zero_initialization&quot;&gt;제로 초기화&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="36495fdb7c9bc047248d980fb3033ad613c29035" translate="yes" xml:space="preserve">
          <source>Prior to C++20, including &lt;a href=&quot;ciso646&quot;&gt;&lt;code&gt;&amp;lt;ciso646&amp;gt;&lt;/code&gt;&lt;/a&gt; is sometimes used for this purpose.</source>
          <target state="translated">C ++ 20 이전에는 &lt;a href=&quot;ciso646&quot;&gt; &lt;code&gt;&amp;lt;ciso646&amp;gt;&lt;/code&gt; 을&lt;/a&gt; 포함 하여이 목적으로 사용되기도합니다.</target>
        </trans-unit>
        <trans-unit id="b96bc2fa1287c534fdaf29b60bc90d9ede6166c6" translate="yes" xml:space="preserve">
          <source>Prior to C++20, including &lt;code&gt;&amp;lt;ciso646&amp;gt;&lt;/code&gt; was sometimes used as a technique for obtaining definitions of implementation-specific library version macros without causing other effects. As of C++20, the header &lt;a href=&quot;version&quot;&gt;&lt;code&gt;&amp;lt;version&amp;gt;&lt;/code&gt;&lt;/a&gt; was added for this purpose.</source>
          <target state="translated">C ++ 20 이전에는 &lt;code&gt;&amp;lt;ciso646&amp;gt;&lt;/code&gt; 을 포함 하여 다른 효과를 일으키지 않고 구현 별 라이브러리 버전 매크로의 정의를 얻는 기술로 사용되기도했습니다. C ++ 20 에서이 목적을 위해 헤더 &lt;a href=&quot;version&quot;&gt; &lt;code&gt;&amp;lt;version&amp;gt;&lt;/code&gt; &lt;/a&gt; 이 추가되었습니다.</target>
        </trans-unit>
        <trans-unit id="0bb7f5c22220620a4cbb93872f53caa4b0bb3f9f" translate="yes" xml:space="preserve">
          <source>Prior to C++20, the C++ Standard allowed any signed integer representation, and the minimum guaranteed range of N-bit signed integers was from -(2N-1</source>
          <target state="translated">C ++ 20 이전에는 C ++ 표준이 부호있는 정수 표현을 허용했으며 N 비트 부호있는 정수의 최소 보장 범위는-(2N-1)입니다.</target>
        </trans-unit>
        <trans-unit id="ce6528b08da9027e71f0461910097a8416ed03ba" translate="yes" xml:space="preserve">
          <source>Prior to calling &lt;code&gt;va_arg&lt;/code&gt;, &lt;code&gt;ap&lt;/code&gt; must be initialized by a call to either &lt;code&gt;&lt;a href=&quot;va_start&quot;&gt;va_start&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;va_copy&quot;&gt;va_copy&lt;/a&gt;&lt;/code&gt;, with no intervening call to &lt;code&gt;&lt;a href=&quot;va_end&quot;&gt;va_end&lt;/a&gt;&lt;/code&gt;. Each invocation of the &lt;code&gt;va_arg&lt;/code&gt; macro modifies &lt;code&gt;ap&lt;/code&gt; to point to the next variable argument.</source>
          <target state="translated">호출하기 전에 &lt;code&gt;va_arg&lt;/code&gt; 를을 , &lt;code&gt;ap&lt;/code&gt; 하나의 호출에 의해 초기화해야합니다 &lt;code&gt;&lt;a href=&quot;va_start&quot;&gt;va_start&lt;/a&gt;&lt;/code&gt; 를 또는 &lt;code&gt;&lt;a href=&quot;va_copy&quot;&gt;va_copy&lt;/a&gt;&lt;/code&gt; 없이 중간에 호출, &lt;code&gt;&lt;a href=&quot;va_end&quot;&gt;va_end&lt;/a&gt;&lt;/code&gt; 의 . &lt;code&gt;va_arg&lt;/code&gt; 매크로를 호출 할 때마다 다음 변수 인수를 가리 키도록 &lt;code&gt;ap&lt;/code&gt; 가 수정 됩니다.</target>
        </trans-unit>
        <trans-unit id="78d8fbfbd118d1d3d4df7bcfce2536f17f07cf5e" translate="yes" xml:space="preserve">
          <source>Private inheritance</source>
          <target state="translated">개인 상속</target>
        </trans-unit>
        <trans-unit id="fb4ffd080efe28380e63bd79f1bfd72d2a668041" translate="yes" xml:space="preserve">
          <source>Private inheritance can also be used to implement the composition relationship (the base class subobject is an implementation detail of the derived class object). Using a member offers better encapsulation and is generally preferred unless the derived class requires access to protected members (including constructors) of the base, needs to override a virtual member of the base, needs the base to be constructed before and destructed after some other base subobject, needs to share a virtual base or needs to control the construction of a virtual base. Use of members to implement composition is also not applicable in the case of multiple inheritance from a &lt;a href=&quot;parameter_pack&quot;&gt;parameter pack&lt;/a&gt; or when the identities of the base classes are determined at compile time through template metaprogramming.</source>
          <target state="translated">개인 상속을 사용하여 작성 관계를 구현할 수도 있습니다 (기본 클래스 하위 오브젝트는 파생 클래스 오브젝트의 구현 세부 사항입니다). 멤버를 사용하면 캡슐화가 향상되고 파생 클래스가베이스의 보호 멤버 (생성자 포함)에 액세스해야하고베이스의 가상 멤버를 재정의해야하며베이스가 다른베이스보다 먼저 생성되고 소멸되어야하는 경우가 아니면 바람직합니다. 하위 오브젝트, 가상베이스를 공유해야하거나 가상베이스의 구성을 제어해야합니다. 구성 요소를 구현하기 위해 멤버를 사용하는 것은 &lt;a href=&quot;parameter_pack&quot;&gt;매개 변수 팩&lt;/a&gt; 에서 여러 상속을 받거나 기본 클래스의 ID가 템플릿 메타 프로그래밍을 통해 컴파일 타임에 결정될 때 적용 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="218e29f2f69f8947e31270f51b805ca53bc75c61" translate="yes" xml:space="preserve">
          <source>Private inheritance is commonly used in policy-based design, since policies are usually empty classes, and using them as bases both enables static polymorphism and leverages &lt;a href=&quot;ebo&quot;&gt;empty-base optimization&lt;/a&gt;.</source>
          <target state="translated">정책은 일반적으로 빈 클래스이고 기본으로 사용하면 정적 다형성을 가능하게하고 &lt;a href=&quot;ebo&quot;&gt;빈 기반 최적화를&lt;/a&gt; 활용하기 때문에 개인 상속은 정책 기반 디자인에서 일반적으로 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="afb9ea2d123e66166eec4988195c8534b10061b4" translate="yes" xml:space="preserve">
          <source>Private member access</source>
          <target state="translated">개인 회원 액세스</target>
        </trans-unit>
        <trans-unit id="7bda3a3abd8117060b1e19a8bee14ecb87b8b483" translate="yes" xml:space="preserve">
          <source>Private member functions</source>
          <target state="translated">개인 멤버 기능</target>
        </trans-unit>
        <trans-unit id="a50c5ae71a8d2a0ec645344479dc67203a5c787b" translate="yes" xml:space="preserve">
          <source>Private members form the implementation of a class, as well as the private interface for the other members of the class.</source>
          <target state="translated">비공개 멤버는 클래스의 구현과 클래스의 다른 멤버에 대한 프라이빗 인터페이스를 형성합니다.</target>
        </trans-unit>
        <trans-unit id="b1513c51029a00390dd31722274823a1adb93267" translate="yes" xml:space="preserve">
          <source>Process control</source>
          <target state="translated">공정 제어</target>
        </trans-unit>
        <trans-unit id="25a8e99b2b428303422345fdac98cd9fee9d875b" translate="yes" xml:space="preserve">
          <source>Processor time used by the program so far or &lt;code&gt;(clock_t)(-1)&lt;/code&gt; if that information is unavailable or its value cannot be represented.</source>
          <target state="translated">지금까지 프로그램에서 사용한 프로세서 시간 또는 해당 정보를 사용할 수 없거나 해당 값을 표시 할 수없는 경우 &lt;code&gt;(clock_t)(-1)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="69927f368c2cab595e7fed0136b4b16eae67a3ac" translate="yes" xml:space="preserve">
          <source>Produce cv-/ref-qualified function types themselves.</source>
          <target state="translated">cv- / ref-qualified 함수 유형 자체를 생성하십시오.</target>
        </trans-unit>
        <trans-unit id="284f4cc441a5ef32ce3012d58e2c3ab4502645b9" translate="yes" xml:space="preserve">
          <source>Produces cv-/ref-qualified function types themselves.</source>
          <target state="translated">cv- / ref-qualified 함수 유형 자체를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="7398ece277148cc970bc562b87404185d1c68358" translate="yes" xml:space="preserve">
          <source>Produces random boolean values, according to the discrete probability function. The probability of &lt;code&gt;true&lt;/code&gt; is  P(b|p) =</source>
          <target state="translated">이산 확률 함수에 따라 임의의 부울 값을 생성합니다. &lt;code&gt;true&lt;/code&gt; 확률 은 P (b | p) =</target>
        </trans-unit>
        <trans-unit id="d79179f3d7bd11bb14d0dcd523adf792f92db1a6" translate="yes" xml:space="preserve">
          <source>Produces random floating-point values i, uniformly distributed on the interval &lt;code&gt;[a, b)&lt;/code&gt;, that is, distributed according to the probability density function:  P(i|a,b) =</source>
          <target state="translated">간격 &lt;code&gt;[a, b)&lt;/code&gt; 에 균일하게 분포 된 , 즉 확률 밀도 함수에 따라 분포 된 임의의 부동 소수점 값 i 를 생성합니다. P (i | a, b) =</target>
        </trans-unit>
        <trans-unit id="6ccdf511dded895fa8cc1bb3ea28fed0a8ac43ae" translate="yes" xml:space="preserve">
          <source>Produces random floating-point values x, distributed according to probability density function:  \(p(x|n) = \frac{1}{\sqrt{n\pi} } \cdot \frac{\Gamma(\frac{n+1}{2})}{\Gamma(\frac{n}{2})} \cdot (1+\frac{x^2}{n})^{-\frac{n+1}{2} } \)p(x|n) =</source>
          <target state="translated">확률 밀도 함수에 따라 분포 된 임의의 부동 소수점 값 x를 생성합니다. \ (p (x | n) = \ frac {1} {\ sqrt {n \ pi}} \ cdot \ frac {\ Gamma (\ frac {n +1} {2})} {\ Gamma (\ frac {n} {2})} \ cdot (1+ \ frac {x ^ 2} {n}) ^ {-\ frac {n + 1} {2 }} \) p (x | n) =</target>
        </trans-unit>
        <trans-unit id="2895130a362344adad80f31acdc04091208a8b95" translate="yes" xml:space="preserve">
          <source>Produces random integer values i, uniformly distributed on the closed interval &lt;code&gt;[a, b]&lt;/code&gt;, that is, distributed according to the discrete probability function  P(i|a,b) =</source>
          <target state="translated">닫힌 간격 &lt;code&gt;[a, b]&lt;/code&gt; 에 균일하게 분포 된 , 즉 이산 확률 함수 P (i | a, b) =에 따라 분포 된 난수 정수 i 를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="e81e5a0f719516c20e3b7efd9738e594c83a31fe" translate="yes" xml:space="preserve">
          <source>Produces random non-negative floating-point values x, distributed according to probability density function:  P(x|&amp;lambda;) = &amp;lambda;e.</source>
          <target state="translated">확률 밀도 함수 : P (x | &amp;lambda;) = &amp;lambda;e에 따라 분포 된 임의의 음이 아닌 부동 소수점 값 x를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="6a29b8a830dc5414bf0e054d92718bbeaa426c2e" translate="yes" xml:space="preserve">
          <source>Produces random non-negative integer values i, distributed according to discrete probability function:  \(P(i | \mu) = \frac{e^{-\mu}\mu^i}{i!}\)P(i|&amp;mu;) =</source>
          <target state="translated">불연속 확률 함수에 따라 분포 된 임의의 음이 아닌 정수 값 i를 생성합니다. \ (P (i | \ mu) = \ frac {e ^ {-\ mu} \ mu ^ i} {i!} \) P (i | &amp;mu;) =</target>
        </trans-unit>
        <trans-unit id="0c1a0e643df72c6810bdbb23dd51b4ccb1dde162" translate="yes" xml:space="preserve">
          <source>Produces random non-negative integer values i, distributed according to discrete probability function:  \(P(i|k, p) = \binom{k + i - 1}{i} \cdot p^k \cdot (1 - p)^i\)P(i|k,p) =</source>
          <target state="translated">불연속 확률 함수에 따라 분포 된 임의의 음이 아닌 정수 값 i를 생성합니다. \ (P (i | k, p) = \ binom {k + i-1} {i} \ cdot p ^ k \ cdot (1-p ) ^ i \) P (i | k, p) =</target>
        </trans-unit>
        <trans-unit id="34429cceb32abba04a6f2aee71c8ba2abbfe6ca8" translate="yes" xml:space="preserve">
          <source>Produces random non-negative integer values i, distributed according to discrete probability function:  \(P(i|p) = p \cdot (1-p)^i\)P(i|p) = p &amp;middot; (1 &amp;minus; p).</source>
          <target state="translated">불연속 확률 함수에 따라 분포 된 임의의 음이 아닌 정수 값 i를 생성합니다. \ (P (i | p) = p \ cdot (1-p) ^ i \) P (i | p) = p &amp;middot; (1- &amp;minus; p ).</target>
        </trans-unit>
        <trans-unit id="66a3aab27d6b43e1ed61d5002c62d00e0e214cdd" translate="yes" xml:space="preserve">
          <source>Produces random non-negative integer values i, distributed according to discrete probability function:  \(P(i|t,p) = \binom{t}{i} \cdot p^i \cdot (1-p)^{t-i}\)P(i|t,p) =</source>
          <target state="translated">불연속 확률 함수에 따라 분포 된 임의의 음이 아닌 정수 값 i를 생성합니다. \ (P (i | t, p) = \ binom {t} {i} \ cdot p ^ i \ cdot (1-p) ^ {ti } \) P (i | t, p) =</target>
        </trans-unit>
        <trans-unit id="5f99cacd1d4a892532f1a1b21ce9a90820ab9bb6" translate="yes" xml:space="preserve">
          <source>Produces random numbers according to a Cauchy distribution (also called Lorentz distribution):  f(x; a,b) =</source>
          <target state="translated">코시 분포 (로렌츠 분포라고도 함)에 따라 난수를 생성합니다. f (x; a, b) =</target>
        </trans-unit>
        <trans-unit id="1677f8975b324726ee392f3049ad663b3cc666ef" translate="yes" xml:space="preserve">
          <source>Produces random numbers according to the &lt;a href=&quot;https://en.wikipedia.org/wiki/F-distribution&quot;&gt;f-distribution&lt;/a&gt;:  p(x;m,n) =</source>
          <target state="translated">&lt;a href=&quot;https://en.wikipedia.org/wiki/F-distribution&quot;&gt;f- 분포&lt;/a&gt; 에 따라 난수를 생성합니다 . p (x; m, n) =</target>
        </trans-unit>
        <trans-unit id="bceadad56e5130f57d1438ef98fed7735937185e" translate="yes" xml:space="preserve">
          <source>Produces random numbers according to the &lt;a href=&quot;https://en.wikipedia.org/wiki/Generalized_extreme_value_distribution&quot;&gt;extreme value distribution&lt;/a&gt; (it is also known as Gumbel Type I, log-Weibull, Fisher-Tippett Type I):  p(x;a,b) =</source>
          <target state="translated">&lt;a href=&quot;https://en.wikipedia.org/wiki/Generalized_extreme_value_distribution&quot;&gt;극값 분포&lt;/a&gt; 에 따라 난수를 생성합니다 (Gumbel Type I, log-Weibull, Fisher-Tippett Type I이라고도 함). p (x; a, b) =</target>
        </trans-unit>
        <trans-unit id="74f7fe6d9c8f974b224518a3fbdc53623257e1db" translate="yes" xml:space="preserve">
          <source>Produces random positive floating-point values x, distributed according to probability density function:  \(\mathsf{p}(x\mid\alpha,\beta) = \frac{e^{-x/\beta} }{\beta^\alpha\cdot\Gamma(\alpha)}\cdot x^{\alpha-1} \)P(x|&amp;alpha;,&amp;beta;) =</source>
          <target state="translated">확률 밀도 함수에 따라 분포 된 임의의 양의 부동 소수점 값 x를 생성합니다. \ (\ mathsf {p} (x \ mid \ alpha, \ beta) = \ frac {e ^ {-x / \ beta}} {\ beta ^ \ alpha \ cdot \ Gamma (\ alpha)} \ cdot x ^ {\ alpha-1} \) P (x | &amp;alpha;, &amp;beta;) =</target>
        </trans-unit>
        <trans-unit id="1e8d9313490c82ca81623307ec10d5f0ca9c7e23" translate="yes" xml:space="preserve">
          <source>Program support utilities</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd74641b834d4b980ea6b99d6f71d4205f5d04af" translate="yes" xml:space="preserve">
          <source>Program termination</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1aea5d7b0affef03e96f9261c5e3d01e8ed3063f" translate="yes" xml:space="preserve">
          <source>Program utilities</source>
          <target state="translated">프로그램 유틸리티</target>
        </trans-unit>
        <trans-unit id="741e22a3e35f0e2227bf409a8d132fe861e03cef" translate="yes" xml:space="preserve">
          <source>Programs with &lt;a href=&quot;ub&quot;&gt;undefined behavior&lt;/a&gt;, e.g. due to access to an array out of bounds, modification of a const object, &lt;a href=&quot;eval_order&quot;&gt;evaluation order&lt;/a&gt; violations, etc, are free from the as-if rule: they often change observable behavior when recompiled with different optimization settings. For example, if a test for signed integer overflow relies on the result of that overflow, e.g. &lt;code&gt;if(n+1 &amp;lt; n) abort();&lt;/code&gt;, &lt;a href=&quot;http://blog.llvm.org/2011/05/what-every-c-programmer-should-know_14.html&quot;&gt;it is removed entirely by some compilers&lt;/a&gt; because &lt;a href=&quot;operator_arithmetic#Overflows&quot;&gt;signed overflow is undefined behavior&lt;/a&gt; and the optimizer is free to assume it never happens and the test is redundant.</source>
          <target state="translated">범위를 벗어난 배열에 대한 액세스, const 객체 수정, &lt;a href=&quot;eval_order&quot;&gt;평가 순서&lt;/a&gt; 위반 등 으로 인해 &lt;a href=&quot;ub&quot;&gt;정의되지 않은 동작이있는&lt;/a&gt; 프로그램 은 as-if 규칙이 없습니다. 종종 다른 최적화 설정으로 다시 컴파일 할 때 관찰 가능한 동작이 변경됩니다. 예를 들어, 부호있는 정수 오버플로에 대한 테스트가 해당 오버플로의 결과에 의존하는 &lt;code&gt;if(n+1 &amp;lt; n) abort();&lt;/code&gt; , 예를 들어 if (n + 1 &amp;lt;n) abort (); , &lt;a href=&quot;http://blog.llvm.org/2011/05/what-every-c-programmer-should-know_14.html&quot;&gt;그것은 어떤 컴파일러에 의해 완전히 제거되어&lt;/a&gt; 있기 때문에 &lt;a href=&quot;operator_arithmetic#Overflows&quot;&gt;서명 오버 플로우가 정의되지 않은 동작입니다&lt;/a&gt; 및 최적화가 결코 발생하지 가정 무료이며, 테스트가 중복됩니다.</target>
        </trans-unit>
        <trans-unit id="823ace5db3022669aeee67759a8fd354aa4543af" translate="yes" xml:space="preserve">
          <source>Progress guarantee</source>
          <target state="translated">진행 보증</target>
        </trans-unit>
        <trans-unit id="fe5671922bc7f67cfabfa60ab97a9542ac21f39f" translate="yes" xml:space="preserve">
          <source>Promise</source>
          <target state="translated">Promise</target>
        </trans-unit>
        <trans-unit id="bc6c88db2f0703a9e2461a4a8060ccf1cb881998" translate="yes" xml:space="preserve">
          <source>Properties</source>
          <target state="translated">Properties</target>
        </trans-unit>
        <trans-unit id="351f56a6fefd5127c90506d3e91990f1d7631787" translate="yes" xml:space="preserve">
          <source>Properties:</source>
          <target state="translated">Properties:</target>
        </trans-unit>
        <trans-unit id="6537d3e70b32d4615c40b4a0c2abdf1f23e1ecf8" translate="yes" xml:space="preserve">
          <source>Property queries</source>
          <target state="translated">속성 쿼리</target>
        </trans-unit>
        <trans-unit id="bfa418f784d01002997fded247f5e9e4c3ab6762" translate="yes" xml:space="preserve">
          <source>Proportional to</source>
          <target state="translated">비례</target>
        </trans-unit>
        <trans-unit id="91dbbf032ad21e4946eb671d31585c25617d8da0" translate="yes" xml:space="preserve">
          <source>Protected inheritance</source>
          <target state="translated">상속 상속</target>
        </trans-unit>
        <trans-unit id="bfeee6ec842d770cd3002e93350981d15b8e69e0" translate="yes" xml:space="preserve">
          <source>Protected inheritance may be used for &quot;controlled polymorphism&quot;: within the members of Derived, as well as within the members of all further-derived classes, the derived class IS-A base: references and pointers to Derived may be used where references and pointers to Base are expected.</source>
          <target state="translated">보호 된 상속은 &quot;제어 된 다형성&quot;에 사용될 수있다 : 파생 된 모든 구성원,뿐만 아니라 모든 파생 클래스의 구성원 내에서 파생 된 클래스 IS-A 기본 : 참조 및 포인터가 참조 및 포인터에서 사용될 수있다 베이스로 예상됩니다.</target>
        </trans-unit>
        <trans-unit id="e0cdd5aa6f8c0eb0ac4911b493400386e2f149c7" translate="yes" xml:space="preserve">
          <source>Protected member access</source>
          <target state="translated">보호 된 회원 액세스</target>
        </trans-unit>
        <trans-unit id="8067d13f0b7577f4d8730118ce88d437e443ab43" translate="yes" xml:space="preserve">
          <source>Protected member functions</source>
          <target state="translated">보호 된 멤버 기능</target>
        </trans-unit>
        <trans-unit id="f943de0cb4025273b5c3675bdc528322c9ee2ee7" translate="yes" xml:space="preserve">
          <source>Protected member objects</source>
          <target state="translated">보호 된 멤버 객체</target>
        </trans-unit>
        <trans-unit id="e43c04b0ce27d91785cddc777e7c8fdc291200c6" translate="yes" xml:space="preserve">
          <source>Protected members form the interface for the derived classes (which is distinct from the public interface of the class).</source>
          <target state="translated">보호 된 멤버는 파생 클래스에 대한 인터페이스를 형성합니다 (클래스의 공용 인터페이스와 구별됨).</target>
        </trans-unit>
        <trans-unit id="a31583107f763ed101ab870682277a15652cc1cb" translate="yes" xml:space="preserve">
          <source>Protocol error</source>
          <target state="translated">프로토콜 오류</target>
        </trans-unit>
        <trans-unit id="59bb2975367cf35f9a618efe163f6de98389a1c2" translate="yes" xml:space="preserve">
          <source>Protocol not available</source>
          <target state="translated">사용할 수없는 프로토콜</target>
        </trans-unit>
        <trans-unit id="05ba63ff22fffa946a6c1e3e8b9d184a5a911e55" translate="yes" xml:space="preserve">
          <source>Protocol not supported</source>
          <target state="translated">프로토콜이 지원되지 않습니다</target>
        </trans-unit>
        <trans-unit id="3ff5f085a157b60cb28dba0860f39cd3e12b11e1" translate="yes" xml:space="preserve">
          <source>Protocol wrong type for socket</source>
          <target state="translated">소켓에 대한 프로토콜 유형이 잘못되었습니다</target>
        </trans-unit>
        <trans-unit id="89bd0bbc8dba110ebd6107978c6bf2926400a21f" translate="yes" xml:space="preserve">
          <source>Prototype examples (for &lt;code&gt;class T&lt;/code&gt;)</source>
          <target state="translated">프로토 타입 예제 ( &lt;code&gt;class T&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="912607a96502c985d59aad3c32a512562883226b" translate="yes" xml:space="preserve">
          <source>Provide automatic comparison operators</source>
          <target state="translated">자동 비교 연산자 제공</target>
        </trans-unit>
        <trans-unit id="36f47783eb436bfec79c2ae8a4b06844533f9db1" translate="yes" xml:space="preserve">
          <source>Provides a hint to the implementation to reschedule the execution of threads, allowing other threads to run.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8480054becd3b689a3eeb794e61d5c93e7d94e05" translate="yes" xml:space="preserve">
          <source>Provides a specialization of the &lt;code&gt;&lt;a href=&quot;../../memory/uses_allocator&quot;&gt;std::uses_allocator&lt;/a&gt;&lt;/code&gt; type trait for &lt;code&gt;&lt;a href=&quot;../packaged_task&quot;&gt;std::packaged_task&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">의 전문성 제공 &lt;code&gt;&lt;a href=&quot;../../memory/uses_allocator&quot;&gt;std::uses_allocator&lt;/a&gt;&lt;/code&gt; 대한 유형 특성 &lt;code&gt;&lt;a href=&quot;../packaged_task&quot;&gt;std::packaged_task&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e47ec25866e740283661bcf153e7a91ae5a664d2" translate="yes" xml:space="preserve">
          <source>Provides a specialization of the &lt;code&gt;&lt;a href=&quot;../../memory/uses_allocator&quot;&gt;std::uses_allocator&lt;/a&gt;&lt;/code&gt; type trait for &lt;code&gt;&lt;a href=&quot;../promise&quot;&gt;std::promise&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">의 전문성 제공 &lt;code&gt;&lt;a href=&quot;../../memory/uses_allocator&quot;&gt;std::uses_allocator&lt;/a&gt;&lt;/code&gt; 대한 유형 특성 &lt;code&gt;&lt;a href=&quot;../promise&quot;&gt;std::promise&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="292f5513776420dfd0bc6f98a1c28b2a7114b54f" translate="yes" xml:space="preserve">
          <source>Provides a transparent specialization of the &lt;code&gt;&lt;a href=&quot;../../memory/uses_allocator&quot;&gt;std::uses_allocator&lt;/a&gt;&lt;/code&gt; type trait for &lt;code&gt;&lt;a href=&quot;../priority_queue&quot;&gt;std::priority_queue&lt;/a&gt;&lt;/code&gt;: the container adaptor uses allocator if and only if the underlying container does.</source>
          <target state="translated">의 투명한 전문 제공 &lt;code&gt;&lt;a href=&quot;../../memory/uses_allocator&quot;&gt;std::uses_allocator&lt;/a&gt;&lt;/code&gt; 대한 유형 특성 &lt;code&gt;&lt;a href=&quot;../priority_queue&quot;&gt;std::priority_queue&lt;/a&gt;&lt;/code&gt; 기본 컨테이너가 수행하고있는 경우에만 경우 컨테이너 어댑터가 사용하는 할당을 :.</target>
        </trans-unit>
        <trans-unit id="a42ef848c5b4f8e760719477188f58cf5628b7b2" translate="yes" xml:space="preserve">
          <source>Provides a transparent specialization of the &lt;code&gt;&lt;a href=&quot;../../memory/uses_allocator&quot;&gt;std::uses_allocator&lt;/a&gt;&lt;/code&gt; type trait for &lt;code&gt;&lt;a href=&quot;../queue&quot;&gt;std::queue&lt;/a&gt;&lt;/code&gt;: the container adaptor uses allocator if and only if the underlying container does.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../queue&quot;&gt;std::queue&lt;/a&gt;&lt;/code&gt; 대한 &lt;code&gt;&lt;a href=&quot;../../memory/uses_allocator&quot;&gt;std::uses_allocator&lt;/a&gt;&lt;/code&gt; 유형 특성 의 투명한 전문화를 제공합니다 . 컨테이너 어댑터는 기본 컨테이너가 수행하는 경우에만 할당자를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="718e235b8892f53c849015dd0d07915ec7007542" translate="yes" xml:space="preserve">
          <source>Provides a transparent specialization of the &lt;code&gt;&lt;a href=&quot;../../memory/uses_allocator&quot;&gt;std::uses_allocator&lt;/a&gt;&lt;/code&gt; type trait for &lt;code&gt;&lt;a href=&quot;../stack&quot;&gt;std::stack&lt;/a&gt;&lt;/code&gt;: the container adaptor uses allocator if and only if the underlying container does.</source>
          <target state="translated">의 투명한 전문 제공 &lt;code&gt;&lt;a href=&quot;../../memory/uses_allocator&quot;&gt;std::uses_allocator&lt;/a&gt;&lt;/code&gt; 대한 유형 특성 &lt;code&gt;&lt;a href=&quot;../stack&quot;&gt;std::stack&lt;/a&gt;&lt;/code&gt; : 컨테이너 어댑터 사용에 할당하는 경우 및 기본 컨테이너가하는 경우에만 가능합니다.</target>
        </trans-unit>
        <trans-unit id="d9c44274836fb1e7e47b7c3e058df06af507396f" translate="yes" xml:space="preserve">
          <source>Provides a way to request the compiler to generate consistent relational operators for a class.</source>
          <target state="translated">컴파일러에게 클래스에 대한 일관된 관계 연산자를 생성하도록 요청하는 방법을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="c56f5be2a40a27ce61131015ecbaf9739189dafd" translate="yes" xml:space="preserve">
          <source>Provides access to the iterator passed in the constructor of this raw_storage_iterator.</source>
          <target state="translated">이 raw_storage_iterator의 생성자에 전달 된 반복자에 대한 액세스를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="73bd20a1573f60afd74db9205597036242b208ef" translate="yes" xml:space="preserve">
          <source>Provides access to the number of alternatives in a possibly cv-qualified variant as a compile-time constant expression.</source>
          <target state="translated">cv-qualified 변형에서 컴파일 타임 상수 표현식으로 여러 대안에 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="49b2719c04143ff4e98c41f5c2c605d201c9a5df" translate="yes" xml:space="preserve">
          <source>Provides access to the number of elements in a static-extent &lt;code&gt;span&lt;/code&gt; as a compile-time constant expression. If the &lt;code&gt;span&lt;/code&gt; has dynamic extent, the &lt;code&gt;tuple_size&lt;/code&gt; specialization is an incomplete type.</source>
          <target state="translated">컴파일 타임 상수 표현식으로 정적 익스텐트 &lt;code&gt;span&lt;/code&gt; 의 요소 수에 액세스 할 수 있습니다. 상기 중간 &lt;code&gt;span&lt;/code&gt; 동적 범위를 갖는다는 &lt;code&gt;tuple_size&lt;/code&gt; 의 특성화 불완전한 타입이다.</target>
        </trans-unit>
        <trans-unit id="d9044a41cab0332a1f6811c177613a94f5cded96" translate="yes" xml:space="preserve">
          <source>Provides access to the number of elements in a tuple as a compile-time constant expression.</source>
          <target state="translated">컴파일 타임 상수 표현식으로 튜플의 요소 수에 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3b2c69871fe2effc8a08eb7e581545d11ecd8782" translate="yes" xml:space="preserve">
          <source>Provides access to the number of elements in an &lt;code&gt;&lt;a href=&quot;../array&quot;&gt;std::array&lt;/a&gt;&lt;/code&gt; as a compile-time constant expression.</source>
          <target state="translated">컴파일 타임 상수 표현식으로 &lt;code&gt;&lt;a href=&quot;../array&quot;&gt;std::array&lt;/a&gt;&lt;/code&gt; 의 요소 수에 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9daf1d9a933818d15da540f468677243e6d04656" translate="yes" xml:space="preserve">
          <source>Provides an instance of &lt;code&gt;A&lt;/code&gt; to be used by the container that is copy-constructed from the one that uses &lt;code&gt;a&lt;/code&gt; currently. Usually returns either a copy of &lt;code&gt;a&lt;/code&gt; or a default-constructed &lt;code&gt;A()&lt;/code&gt;.</source>
          <target state="translated">인스턴스 제공 &lt;code&gt;A&lt;/code&gt; 는 복사 - 제작 사용하는 하나 내지 컨테이너가 사용될 현재. 일반적으로 &lt;code&gt;a&lt;/code&gt; 또는 기본 구성 &lt;code&gt;A()&lt;/code&gt; 의 복사본을 반환합니다 . &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="605708618ea8792e48fabbe7a7f2e34c3c5698cd" translate="yes" xml:space="preserve">
          <source>Provides compile-time indexed access to the type of the elements of the array using tuple-like interface.</source>
          <target state="translated">튜플과 같은 인터페이스를 사용하여 배열의 요소 유형에 대한 컴파일 타임 인덱스 액세스를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="e1018457a744777cbab68b6efb67f37930382f13" translate="yes" xml:space="preserve">
          <source>Provides compile-time indexed access to the type of the elements of the span using tuple-like interface. The program is ill-formed if &lt;code&gt;I &amp;gt;= N&lt;/code&gt; or if &lt;code&gt;N == &lt;a href=&quot;dynamic_extent&quot;&gt;std::dynamic_extent&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">튜플과 같은 인터페이스를 사용하여 스팬 요소 유형에 대한 컴파일 타임 인덱스 액세스를 제공합니다. &lt;code&gt;I &amp;gt;= N&lt;/code&gt; 또는 &lt;code&gt;N == &lt;a href=&quot;dynamic_extent&quot;&gt;std::dynamic_extent&lt;/a&gt;&lt;/code&gt; 경우 프로그램이 잘못 구성됩니다 .</target>
        </trans-unit>
        <trans-unit id="7df6df4f6ac05a60981477a88d49a4c8e1f8b8e0" translate="yes" xml:space="preserve">
          <source>Provides compile-time indexed access to the types of the alternatives of the possibly cv-qualified variant, combining cv-qualifications of the variant (if any) with the cv-qualifications of the alternative.</source>
          <target state="translated">cv-qualified 변형의 대안의 유형에 대한 컴파일 타임 인덱스 액세스를 제공하고 변형의 cv-qualification (있는 경우)과 대안의 cv-qualification을 결합합니다.</target>
        </trans-unit>
        <trans-unit id="8f5d62a478bb6d0d78a4f635d0643e95b2b93818" translate="yes" xml:space="preserve">
          <source>Provides compile-time indexed access to the types of the elements of the tuple.</source>
          <target state="translated">튜플 요소 유형에 대한 컴파일 타임 인덱스 액세스를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="fa0bda45a8b32f906b856e8bfef2723365da27e2" translate="yes" xml:space="preserve">
          <source>Provides consistent interface to handle errors through the &lt;a href=&quot;../language/throw&quot;&gt;throw expression&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../language/throw&quot;&gt;throw 식을&lt;/a&gt; 통해 오류를 처리 할 수있는 일관된 인터페이스를 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="0432bc3dbc26a29cee331e15137aa0959b40ef8a" translate="yes" xml:space="preserve">
          <source>Provides conversions from C &lt;a href=&quot;../string/byte&quot;&gt;byte&lt;/a&gt; and &lt;a href=&quot;../string/wide&quot;&gt;wide&lt;/a&gt; strings to &lt;code&gt;&lt;a href=&quot;../types/integer&quot;&gt;std::intmax_t&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../types/integer&quot;&gt;std::uintmax_t&lt;/a&gt;&lt;/code&gt;, overloads some &lt;a href=&quot;../numeric/math&quot;&gt;math functions&lt;/a&gt; for &lt;code&gt;&lt;a href=&quot;../types/integer&quot;&gt;std::intmax_t&lt;/a&gt;&lt;/code&gt; and provide &lt;a href=&quot;../io/c&quot;&gt;C style input/output&lt;/a&gt; format macros for the types declared in &lt;a href=&quot;cstdint&quot;&gt;&lt;code&gt;&amp;lt;cstdint&amp;gt;&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">C의에서 변환 제공 &lt;a href=&quot;../string/byte&quot;&gt;바이트&lt;/a&gt; 및 &lt;a href=&quot;../string/wide&quot;&gt;넓은&lt;/a&gt; 문자열에 대한 &lt;code&gt;&lt;a href=&quot;../types/integer&quot;&gt;std::intmax_t&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;../types/integer&quot;&gt;std::uintmax_t&lt;/a&gt;&lt;/code&gt; , 과부하 일부 &lt;a href=&quot;../numeric/math&quot;&gt;수학 함수를&lt;/a&gt; 위한 &lt;code&gt;&lt;a href=&quot;../types/integer&quot;&gt;std::intmax_t&lt;/a&gt;&lt;/code&gt; 및 제공하는 &lt;a href=&quot;../io/c&quot;&gt;C 스타일의 입력 / 출력&lt;/a&gt; 유형에 대한 형식 매크로 선언에 &lt;a href=&quot;cstdint&quot;&gt; &lt;code&gt;&amp;lt;cstdint&amp;gt;&lt;/code&gt; 을&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="cc539c7b8a6d1afa363070f7caae3b108581c2e3" translate="yes" xml:space="preserve">
          <source>Provides for linkage between modules written in different programming languages.</source>
          <target state="translated">다른 프로그래밍 언어로 작성된 모듈 간의 연결을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="a2fa6fe6cbd2ce83fb03d226122e055e5ac14480" translate="yes" xml:space="preserve">
          <source>Provides member typedef &lt;code&gt;type&lt;/code&gt;, which is defined as &lt;code&gt;T&lt;/code&gt; if &lt;code&gt;B&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; at compile time, or as &lt;code&gt;F&lt;/code&gt; if &lt;code&gt;B&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">멤버 형식 정의의 제공 &lt;code&gt;type&lt;/code&gt; 으로 정의, &lt;code&gt;T&lt;/code&gt; 경우 &lt;code&gt;B&lt;/code&gt; 가 있다 &lt;code&gt;true&lt;/code&gt; 컴파일시에, 또는 &lt;code&gt;F&lt;/code&gt; 경우 &lt;code&gt;B&lt;/code&gt; 가 있습니다 &lt;code&gt;false&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f8c7046a49c81423fad18ec20009bb885a08851e" translate="yes" xml:space="preserve">
          <source>Provides the member constant &lt;code&gt;value&lt;/code&gt; equal to the &lt;a href=&quot;../language/objects#Alignment&quot;&gt;alignment requirement&lt;/a&gt; of the type &lt;code&gt;T&lt;/code&gt;, as if obtained by an &lt;code&gt;alignof&lt;/code&gt; expression. If &lt;code&gt;T&lt;/code&gt; is an array type, returns the alignment requirements of the element type. If &lt;code&gt;T&lt;/code&gt; is a reference type, returns the alignment requirements of the type referred to.</source>
          <target state="translated">&lt;code&gt;alignof&lt;/code&gt; 식으로 얻은 것처럼 유형 &lt;code&gt;T&lt;/code&gt; 의 &lt;a href=&quot;../language/objects#Alignment&quot;&gt;정렬 요구 사항&lt;/a&gt; 과 동일한 멤버 상수 &lt;code&gt;value&lt;/code&gt; 제공합니다 . 경우 &lt;code&gt;T&lt;/code&gt; 가 배열 유형, 요소 유형의 정렬 요구 사항을 반환합니다. 경우 &lt;code&gt;T&lt;/code&gt; 는 참조 타입, 유형의 정렬 요구 사항이 언급 반환합니다.</target>
        </trans-unit>
        <trans-unit id="475fffff872f4c4426c4612901a68e18bae668e6" translate="yes" xml:space="preserve">
          <source>Provides the member constant &lt;code&gt;value&lt;/code&gt; that is equal to &lt;code&gt;true&lt;/code&gt;, if &lt;code&gt;T&lt;/code&gt; is the type &lt;code&gt;&lt;a href=&quot;nullptr_t&quot;&gt;std::nullptr_t&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;const &lt;a href=&quot;nullptr_t&quot;&gt;std::nullptr_t&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;volatile &lt;a href=&quot;nullptr_t&quot;&gt;std::nullptr_t&lt;/a&gt;&lt;/code&gt;, or &lt;code&gt;const volatile &lt;a href=&quot;nullptr_t&quot;&gt;std::nullptr_t&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; 가 &lt;code&gt;&lt;a href=&quot;nullptr_t&quot;&gt;std::nullptr_t&lt;/a&gt;&lt;/code&gt; 유형 , &lt;code&gt;const &lt;a href=&quot;nullptr_t&quot;&gt;std::nullptr_t&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;nullptr_t&quot;&gt;std :: nullptr_t&lt;/a&gt; , &lt;code&gt;volatile &lt;a href=&quot;nullptr_t&quot;&gt;std::nullptr_t&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;nullptr_t&quot;&gt;std :: nullptr_t&lt;/a&gt; 또는 &lt;code&gt;const volatile &lt;a href=&quot;nullptr_t&quot;&gt;std::nullptr_t&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;nullptr_t&quot;&gt;std :: nullptr_t&lt;/a&gt; 인 경우 &lt;code&gt;true&lt;/code&gt; 와 같은 멤버 상수 &lt;code&gt;value&lt;/code&gt; 을 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="7ce165e06fc0b5e145ff49b98a793613379da1e4" translate="yes" xml:space="preserve">
          <source>Provides the member constant &lt;code&gt;value&lt;/code&gt; which is equal to &lt;code&gt;true&lt;/code&gt;, if &lt;code&gt;T&lt;/code&gt; is &lt;a href=&quot;execution_policy_tag_t&quot;&gt;a standard execution policy type&lt;/a&gt;, or an implementation-defined execution policy type. Otherwise, &lt;code&gt;value&lt;/code&gt; is equal to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; 가 &lt;a href=&quot;execution_policy_tag_t&quot;&gt;표준 실행 정책 유형&lt;/a&gt; 이거나 구현 정의 실행 정책 유형 인 경우 멤버 상수 &lt;code&gt;value&lt;/code&gt; 을 &lt;code&gt;true&lt;/code&gt; 로 제공합니다 . 그렇지 않으면 &lt;code&gt;value&lt;/code&gt; 는 &lt;code&gt;false&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="a3986600082198d59640bc0d5712ce60136d8837" translate="yes" xml:space="preserve">
          <source>Provides the member typedef &lt;code&gt;type&lt;/code&gt; that names &lt;code&gt;T&lt;/code&gt; (i.e., the identity transformation).</source>
          <target state="translated">이름이 &lt;code&gt;T&lt;/code&gt; (즉, ID 변환) 인 멤버 typedef &lt;code&gt;type&lt;/code&gt; 을 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="aa77003ba7128d55985620f7c23b63385a04d503" translate="yes" xml:space="preserve">
          <source>Provides the member typedef &lt;code&gt;type&lt;/code&gt; which is the same as &lt;code&gt;T&lt;/code&gt;, except it has a cv-qualifier added (unless &lt;code&gt;T&lt;/code&gt; is a function, a reference, or already has this cv-qualifier).</source>
          <target state="translated">cv-qualifier가 추가 된 점을 제외하고 &lt;code&gt;T&lt;/code&gt; 와 동일한 멤버 typedef &lt;code&gt;type&lt;/code&gt; 을 제공합니다 ( &lt;code&gt;T&lt;/code&gt; 가 함수, 참조이거나 이미이 cv-qualifier가 없는 경우 제외 ).</target>
        </trans-unit>
        <trans-unit id="ad8f5a632335756cbf366e1ed2ed250ef5a4a3af" translate="yes" xml:space="preserve">
          <source>Provides the member typedef &lt;code&gt;type&lt;/code&gt; which is the same as &lt;code&gt;T&lt;/code&gt;, except that its topmost cv-qualifiers are removed.</source>
          <target state="translated">최상위 cv 한정자가 제거 된 것을 제외하고 &lt;code&gt;T&lt;/code&gt; 와 동일한 멤버 typedef &lt;code&gt;type&lt;/code&gt; 을 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="3f083f4c62ca8ccad08802af4d95600947099c84" translate="yes" xml:space="preserve">
          <source>Provides the member typedef &lt;code&gt;type&lt;/code&gt; which is the type pointed to by &lt;code&gt;T&lt;/code&gt;, or, if &lt;code&gt;T&lt;/code&gt; is not a pointer, then &lt;code&gt;type&lt;/code&gt; is the same as &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; 가 가리키는 &lt;code&gt;type&lt;/code&gt; 인 멤버 typedef 유형 을 제공 하거나, &lt;code&gt;T&lt;/code&gt; 가 포인터가 아닌 경우 &lt;code&gt;type&lt;/code&gt; 은 &lt;code&gt;T&lt;/code&gt; 와 동일합니다 .</target>
        </trans-unit>
        <trans-unit id="cb08dea25102c2fb47a408b0b5a807c0f5af5c70" translate="yes" xml:space="preserve">
          <source>Provides the nested type &lt;code&gt;type&lt;/code&gt;, which is a &lt;a href=&quot;../named_req/trivialtype&quot;&gt;trivial&lt;/a&gt;&lt;a href=&quot;../named_req/standardlayouttype&quot;&gt;standard-layout&lt;/a&gt; type of a size and alignment suitable for use as uninitialized storage for an object of any of the types listed in &lt;code&gt;Types&lt;/code&gt;. The size of the storage is at least &lt;code&gt;Len&lt;/code&gt;. &lt;code&gt;std::aligned_union&lt;/code&gt; also determines the strictest (largest) alignment requirement among all &lt;code&gt;Types&lt;/code&gt; and makes it available as the constant &lt;code&gt;alignment_value&lt;/code&gt;.</source>
          <target state="translated">중첩 형 제공 &lt;code&gt;type&lt;/code&gt; A는, &lt;a href=&quot;../named_req/trivialtype&quot;&gt;사소한 &lt;/a&gt;&lt;a href=&quot;../named_req/standardlayouttype&quot;&gt;표준 레이아웃&lt;/a&gt; 에 나열된 임의의 유형의 객체에 대한 초기화 저장소로서 사용하기에 적합한 크기와 배향 형 &lt;code&gt;Types&lt;/code&gt; . 스토리지의 크기는 &lt;code&gt;Len&lt;/code&gt; 이상 입니다. &lt;code&gt;std::aligned_union&lt;/code&gt; 은 또한 모든 &lt;code&gt;Types&lt;/code&gt; 중에서 가장 엄격한 (가장 큰) 정렬 요구 사항을 결정 하여 상수 &lt;code&gt;alignment_value&lt;/code&gt; 로 사용할 수있게합니다 .</target>
        </trans-unit>
        <trans-unit id="47d0e9165817dd1babf43392a7c8df6a74c0bdaa" translate="yes" xml:space="preserve">
          <source>Provides the nested type &lt;code&gt;type&lt;/code&gt;, which is a &lt;a href=&quot;../named_req/trivialtype&quot;&gt;trivial&lt;/a&gt;&lt;a href=&quot;../named_req/standardlayouttype&quot;&gt;standard-layout&lt;/a&gt; type suitable for use as uninitialized storage for any object whose size is at most &lt;code&gt;Len&lt;/code&gt; and whose &lt;a href=&quot;../language/objects#Alignment&quot;&gt;alignment requirement&lt;/a&gt; is a divisor of &lt;code&gt;Align&lt;/code&gt;.</source>
          <target state="translated">중첩 형 제공 &lt;code&gt;type&lt;/code&gt; A는, &lt;a href=&quot;../named_req/trivialtype&quot;&gt;사소한 &lt;/a&gt;&lt;a href=&quot;../named_req/standardlayouttype&quot;&gt;표준 레이아웃&lt;/a&gt; 크기 이하인 임의의 객체에 대한 초기화 저장소로서 사용하기에 적합한 유형 &lt;code&gt;Len&lt;/code&gt; 및 그 &lt;a href=&quot;../language/objects#Alignment&quot;&gt;정렬 조건&lt;/a&gt; 의 약수 &lt;code&gt;Align&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="50ed5f8f2a50a6e52a45fc4e2eda4b05b7541ba3" translate="yes" xml:space="preserve">
          <source>Pseudo-random integral value between &lt;code&gt;​0​&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;rand_max&quot;&gt;RAND_MAX&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">의사 - 랜덤 사이의 적분 값 &lt;code&gt;​0​&lt;/code&gt; 과 &lt;code&gt;&lt;a href=&quot;rand_max&quot;&gt;RAND_MAX&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ec5a7109434fde15be7042621fb38dd5bd8bc899" translate="yes" xml:space="preserve">
          <source>Pseudo-random number generation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b7ccd93599e991d1acbed07dff9f25d05ef1e0a" translate="yes" xml:space="preserve">
          <source>Public inheritance</source>
          <target state="translated">공공 상속</target>
        </trans-unit>
        <trans-unit id="b444db0546e692b8faecb6c665a9df7b8d3978c2" translate="yes" xml:space="preserve">
          <source>Public inheritance models the subtyping relationship of object-oriented programming: the derived class object IS-A base class object. References and pointers to a derived object are expected to be usable by any code that expects references or pointers to any of its public bases (see &lt;a href=&quot;https://en.wikipedia.org/wiki/Liskov_substitution_principle&quot;&gt;LSP&lt;/a&gt;) or, in &lt;a href=&quot;https://en.wikipedia.org/wiki/Design_by_contract&quot;&gt;DbC&lt;/a&gt; terms, a derived class should maintain class invariants of its public bases, should not strengthen any precondition or weaken any postcondition of a member function it &lt;a href=&quot;virtual&quot;&gt;overrides&lt;/a&gt;.</source>
          <target state="translated">퍼블릭 상속은 객체 지향 프로그래밍의 서브 타이핑 관계, 즉 파생 클래스 객체 IS- 기본 클래스 객체를 모델링합니다. 파생 객체에 대한 참조 및 포인터는 퍼블릭베이스에 대한 참조 또는 포인터를 예상하는 코드 ( &lt;a href=&quot;https://en.wikipedia.org/wiki/Liskov_substitution_principle&quot;&gt;LSP&lt;/a&gt; 참조 ) 또는 &lt;a href=&quot;https://en.wikipedia.org/wiki/Design_by_contract&quot;&gt;DbC&lt;/a&gt; 용어로 파생 클래스가 퍼블릭베이스의 클래스 불변을 유지해야하는 코드에서 사용할 수 있어야합니다. &lt;a href=&quot;virtual&quot;&gt;재정의&lt;/a&gt; 하는 전제 조건을 강화하거나 구성원 함수의 사후 조건을 약화 시키십시오 .</target>
        </trans-unit>
        <trans-unit id="615d2f2503c727f65242099efd876bcbe3bbd031" translate="yes" xml:space="preserve">
          <source>Public member access</source>
          <target state="translated">공개 회원 액세스</target>
        </trans-unit>
        <trans-unit id="a7028dbf031c0a3ff5632d06bd63bfafd7aef31d" translate="yes" xml:space="preserve">
          <source>Public member functions</source>
          <target state="translated">공개 멤버 기능</target>
        </trans-unit>
        <trans-unit id="cd392bda3dab3678a454d8bc7758de84525c8077" translate="yes" xml:space="preserve">
          <source>Public members form a part of the public interface of the class (other parts of the public interface are the non-member functions found by &lt;a href=&quot;adl&quot;&gt;ADL&lt;/a&gt;).</source>
          <target state="translated">퍼블릭 멤버는 클래스의 퍼블릭 인터페이스의 일부를 형성합니다 (퍼블릭 인터페이스의 다른 파트는 &lt;a href=&quot;adl&quot;&gt;ADL이&lt;/a&gt; 찾은 비 멤버 함수입니다 ).</target>
        </trans-unit>
        <trans-unit id="654ddca2dc5ccfa3ac68fe766682e26bc3023948" translate="yes" xml:space="preserve">
          <source>Publicly and unambiguously derived from a specialization of &lt;code&gt;intergral_constant&lt;/code&gt;, known as its</source>
          <target state="translated">공개적 모호의 특성화로부터 유도 &lt;code&gt;intergral_constant&lt;/code&gt; 알려진 그</target>
        </trans-unit>
        <trans-unit id="55bf0508e5a9bb3ca49d0a9b45f47445909e6331" translate="yes" xml:space="preserve">
          <source>Publicly inheriting from &lt;code&gt;std::enable_shared_from_this&amp;lt;T&amp;gt;&lt;/code&gt; provides the type &lt;code&gt;T&lt;/code&gt; with a member function &lt;code&gt;shared_from_this&lt;/code&gt;. If an object &lt;code&gt;t&lt;/code&gt; of type &lt;code&gt;T&lt;/code&gt; is managed by a &lt;code&gt;&lt;a href=&quot;shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&amp;lt;T&amp;gt;&lt;/code&gt; named &lt;code&gt;pt&lt;/code&gt;, then calling &lt;code&gt;T::shared_from_this&lt;/code&gt; will return a new &lt;code&gt;&lt;a href=&quot;shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&amp;lt;T&amp;gt;&lt;/code&gt; that shares ownership of &lt;code&gt;t&lt;/code&gt; with &lt;code&gt;pt&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;std::enable_shared_from_this&amp;lt;T&amp;gt;&lt;/code&gt; 에서 공개적으로 상속 하면 type &lt;code&gt;T&lt;/code&gt; 에 멤버 함수 &lt;code&gt;shared_from_this&lt;/code&gt; 가 제공 됩니다. &lt;code&gt;T&lt;/code&gt; 유형 의 객체 &lt;code&gt;t&lt;/code&gt; 가 &lt;code&gt;pt&lt;/code&gt; 라는 &lt;code&gt;&lt;a href=&quot;shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&amp;lt;T&amp;gt;&lt;/code&gt; &amp;lt;T&amp;gt;에 의해 관리되는 경우 &lt;code&gt;T::shared_from_this&lt;/code&gt; 를 호출 하면 &lt;code&gt;t&lt;/code&gt; 의 소유권을 &lt;code&gt;pt&lt;/code&gt; 와 공유 하는 새로운 &lt;code&gt;&lt;a href=&quot;shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&amp;lt;T&amp;gt;&lt;/code&gt; &amp;lt;T&amp;gt; 가 리턴됩니다 .</target>
        </trans-unit>
        <trans-unit id="1c6eeb93fdd61d8b7161c26132c39da743f2a407" translate="yes" xml:space="preserve">
          <source>Pure output-only iterator is allowed to declare its &lt;code&gt;iterator_traits&amp;lt;X&amp;gt;::value_type&lt;/code&gt;, &lt;code&gt;iterator_traits&amp;lt;X&amp;gt;::difference_type&lt;/code&gt;, &lt;code&gt;iterator_traits&amp;lt;X&amp;gt;::pointer&lt;/code&gt;, and &lt;code&gt;iterator_traits&amp;lt;X&amp;gt;::reference&lt;/code&gt; to be &lt;code&gt;void&lt;/code&gt; (and iterators such as &lt;code&gt;&lt;a href=&quot;../iterator/back_insert_iterator&quot;&gt;std::back_insert_iterator&lt;/a&gt;&lt;/code&gt; do just that).</source>
          <target state="translated">순수 출력 전용 반복자는 &lt;code&gt;iterator_traits&amp;lt;X&amp;gt;::value_type&lt;/code&gt; , &lt;code&gt;iterator_traits&amp;lt;X&amp;gt;::difference_type&lt;/code&gt; , &lt;code&gt;iterator_traits&amp;lt;X&amp;gt;::pointer&lt;/code&gt; 및 &lt;code&gt;iterator_traits&amp;lt;X&amp;gt;::reference&lt;/code&gt; 를 &lt;code&gt;void&lt;/code&gt; 로 선언 할 수 있습니다 (예 : &lt;code&gt;&lt;a href=&quot;../iterator/back_insert_iterator&quot;&gt;std::back_insert_iterator&lt;/a&gt;&lt;/code&gt; 가 그렇게합니다).</target>
        </trans-unit>
        <trans-unit id="51ba3c120a77197d7ba891c9f4a54a8198c83fe1" translate="yes" xml:space="preserve">
          <source>Pure virtual destructors</source>
          <target state="translated">순수한 가상 소멸자</target>
        </trans-unit>
        <trans-unit id="8d69e31ae7a393f0b987a94f34bdc5cc5d2cd714" translate="yes" xml:space="preserve">
          <source>Pushes a new element on top of the stack. The element is constructed in-place, i.e. no copy or move operations are performed. The constructor of the element is called with exactly the same arguments as supplied to the function.</source>
          <target state="translated">스택 맨 위에 새 요소를 넣습니다. 요소가 제자리에 구성되어 있습니다. 즉, 복사 또는 이동 작업이 수행되지 않습니다. 요소의 생성자는 함수에 제공된 것과 정확히 동일한 인수로 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="32ad47cd1f435b5d3ef247850cbb8ecd20790dad" translate="yes" xml:space="preserve">
          <source>Pushes a new element to the end of the queue. The element is constructed in-place, i.e. no copy or move operations are performed. The constructor of the element is called with exactly the same arguments as supplied to the function.</source>
          <target state="translated">큐의 끝으로 새 요소를 푸시합니다. 요소가 제자리에 구성되어 있습니다. 즉, 복사 또는 이동 작업이 수행되지 않습니다. 요소의 생성자는 함수에 제공된 것과 정확히 동일한 인수로 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="a24624cfe16d4e33a8abb0dc694cab16642e8f70" translate="yes" xml:space="preserve">
          <source>Pushes a new element to the priority queue. The element is constructed in-place, i.e. no copy or move operations are performed. The constructor of the element is called with exactly the same arguments as supplied to the function.</source>
          <target state="translated">새 요소를 우선 순위 큐로 푸시합니다. 요소가 제자리에 구성되어 있습니다. 즉, 복사 또는 이동 작업이 수행되지 않습니다. 요소의 생성자는 함수에 제공된 것과 정확히 동일한 인수로 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="a2797d021ee45ddab7ed7efda6ca975b7476cac0" translate="yes" xml:space="preserve">
          <source>Pushes the given element &lt;code&gt;value&lt;/code&gt; to the end of the queue.</source>
          <target state="translated">주어진 요소 &lt;code&gt;value&lt;/code&gt; 을 큐의 끝으로 푸시합니다 .</target>
        </trans-unit>
        <trans-unit id="739008a7b6bb5f27e725477db8d619cfb571322e" translate="yes" xml:space="preserve">
          <source>Pushes the given element &lt;code&gt;value&lt;/code&gt; to the priority queue.</source>
          <target state="translated">주어진 요소 &lt;code&gt;value&lt;/code&gt; 을 우선 순위 큐로 푸시합니다 .</target>
        </trans-unit>
        <trans-unit id="6a39fb5c76f9ce806ee0dbb38b704d1ddc0bf7a7" translate="yes" xml:space="preserve">
          <source>Pushes the given element &lt;code&gt;value&lt;/code&gt; to the top of the stack.</source>
          <target state="translated">주어진 요소 &lt;code&gt;value&lt;/code&gt; 을 스택의 맨 위로 푸시합니다 .</target>
        </trans-unit>
        <trans-unit id="4511d07323783a484fe71d8458998eea79646348" translate="yes" xml:space="preserve">
          <source>Put area</source>
          <target state="translated">영역을 넣어</target>
        </trans-unit>
        <trans-unit id="89e6b0d4d6d270d13ba6d6bf949d3b4053be2912" translate="yes" xml:space="preserve">
          <source>Putback</source>
          <target state="translated">Putback</target>
        </trans-unit>
        <trans-unit id="0b344af530974663597c633484dda4054459a9d7" translate="yes" xml:space="preserve">
          <source>Puts back a character back to the get area.</source>
          <target state="translated">문자를 다시 가져 오기 영역으로 되돌립니다.</target>
        </trans-unit>
        <trans-unit id="1a0122429b6ec04f9e9e13a6faf83a9aa7edab9b" translate="yes" xml:space="preserve">
          <source>Puts the character &lt;code&gt;ch&lt;/code&gt; back to the input stream so the next extracted character will be &lt;code&gt;ch&lt;/code&gt;.</source>
          <target state="translated">문자 &lt;code&gt;ch&lt;/code&gt; 를 입력 스트림에 되돌려 다음에 추출 된 문자가 &lt;code&gt;ch&lt;/code&gt; 가되도록 합니다.</target>
        </trans-unit>
        <trans-unit id="4bc8ef6e14d1a18556b0d1717f1d7deb251217b6" translate="yes" xml:space="preserve">
          <source>Qualification conversions</source>
          <target state="translated">자격 전환</target>
        </trans-unit>
        <trans-unit id="75d473df538a38876caa1d19238d65ed85d72d56" translate="yes" xml:space="preserve">
          <source>Qualified &lt;a href=&quot;lookup&quot;&gt;name lookup&lt;/a&gt; that examines the enclosing namespace will include the names from the inline namespaces even if the same name is present in the enclosing namespace.</source>
          <target state="translated">엔 클로징 네임 스페이스를 검사하는 정규화 된 &lt;a href=&quot;lookup&quot;&gt;이름 조회&lt;/a&gt; 에는 동일한 이름이 엔 클로징 네임 스페이스에있는 경우에도 인라인 네임 스페이스의 이름이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="a62cc48bfab9d85ef11cfa0e0f46014722f2cb48" translate="yes" xml:space="preserve">
          <source>Qualified identifiers</source>
          <target state="translated">한정된 식별자</target>
        </trans-unit>
        <trans-unit id="592d7c648032dfee328456d2dc9abd0834df60d5" translate="yes" xml:space="preserve">
          <source>Qualified lookup within the scope of a &lt;a href=&quot;namespace&quot;&gt;namespace&lt;/a&gt;&lt;code&gt;N&lt;/code&gt; first considers all declarations that are located in &lt;code&gt;N&lt;/code&gt; and all declarations that are located in the &lt;a href=&quot;namespace#Inline_namespaces&quot;&gt;inline namespace members&lt;/a&gt; of &lt;code&gt;N&lt;/code&gt; (and, transitively, in their inline namespace members). If there are no declarations in that set then it considers declarations in all namespaces named by &lt;a href=&quot;namespace#Using-directives&quot;&gt;using-directives&lt;/a&gt; found in &lt;code&gt;N&lt;/code&gt; and in all transitive inline namespace members of &lt;code&gt;N&lt;/code&gt;. The rules are applied recursively:</source>
          <target state="translated">(A)의 범위 내에서 조회 공인 &lt;a href=&quot;namespace&quot;&gt;공간 &lt;/a&gt; &lt;code&gt;N&lt;/code&gt; 은 처음에있는 모든 선언 고려 &lt;code&gt;N&lt;/code&gt; 및에있는 모든 선언 &lt;a href=&quot;namespace#Inline_namespaces&quot;&gt;인라인 스페이스 부재&lt;/a&gt; 의 &lt;code&gt;N&lt;/code&gt; (그 인라인 공간 부재에 이적 및). 어떤 선언이 그 세트가없는 경우 다음에 의해 명명 된 모든 네임 스페이스의 선언 고려 &lt;a href=&quot;namespace#Using-directives&quot;&gt;-사용하여 지시문&lt;/a&gt; 에서 발견 된 &lt;code&gt;N&lt;/code&gt; 과 모든 이적 인라인 네임 스페이스의 멤버 &lt;code&gt;N&lt;/code&gt; 을 . 규칙은 재귀 적으로 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="267803cf0627299d78cd6cd0aa7095dc839ea1f8" translate="yes" xml:space="preserve">
          <source>Qualified name lookup</source>
          <target state="translated">정규화 된 이름 조회</target>
        </trans-unit>
        <trans-unit id="f4d12cab30981cea4718b91f6b39368f75eba495" translate="yes" xml:space="preserve">
          <source>Qualified name lookup can be used to access a class member that is hidden by a nested declaration or by a derived class. A call to a qualified member function is never virtual.</source>
          <target state="translated">정규화 된 이름 조회를 사용하여 중첩 선언 또는 파생 클래스에 의해 숨겨진 클래스 멤버에 액세스 할 수 있습니다. 정규화 된 멤버 함수에 대한 호출은 절대 가상이 아닙니다.</target>
        </trans-unit>
        <trans-unit id="2644b7d942f174a4bbf0bc8675c1badf9352393e" translate="yes" xml:space="preserve">
          <source>Queries</source>
          <target state="translated">Queries</target>
        </trans-unit>
        <trans-unit id="b2d47fefb72fdf3ae19050bffefa3a003d28a51e" translate="yes" xml:space="preserve">
          <source>Queries alignment requirements of a type.</source>
          <target state="translated">유형의 정렬 요구 사항을 쿼리합니다.</target>
        </trans-unit>
        <trans-unit id="81b48ff136746bb560fd6f4129c95da81d912900" translate="yes" xml:space="preserve">
          <source>Queries information of a type.</source>
          <target state="translated">유형의 정보를 쿼리합니다.</target>
        </trans-unit>
        <trans-unit id="16bebbd20f166f2a5ea26c1b0af5de0e236903be" translate="yes" xml:space="preserve">
          <source>Queries size of the object or type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79b86f09354c28013748dc8b4bb0fd4913044f7d" translate="yes" xml:space="preserve">
          <source>Queries the contained type.</source>
          <target state="translated">포함 된 유형을 쿼리합니다.</target>
        </trans-unit>
        <trans-unit id="f838f0aa0677c4b435d276c95b86e63e13fe9d73" translate="yes" xml:space="preserve">
          <source>Queries the number of elements in a &lt;a href=&quot;parameter_pack&quot;&gt;parameter pack&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;parameter_pack&quot;&gt;매개 변수 팩&lt;/a&gt; 의 요소 수를 쿼리합니다 .</target>
        </trans-unit>
        <trans-unit id="c2fd55e9aeddc47d74762a33cb4d7b4f5599dad1" translate="yes" xml:space="preserve">
          <source>Queries the number of elements in a parameter pack.</source>
          <target state="translated">매개 변수 팩의 요소 수를 조회합니다.</target>
        </trans-unit>
        <trans-unit id="06576556d1ad802f247cad11ae748be47b70cd9c" translate="yes" xml:space="preserve">
          <source>R</source>
          <target state="translated">R</target>
        </trans-unit>
        <trans-unit id="ae267208ff2f424566cc85f48f343c3a6db268b1" translate="yes" xml:space="preserve">
          <source>RAII</source>
          <target state="translated">RAII</target>
        </trans-unit>
        <trans-unit id="39b3a26be84a95796b9a96ea22160902d9481c49" translate="yes" xml:space="preserve">
          <source>RAII can be summarized as follows:</source>
          <target state="translated">RAII는 다음과 같이 요약 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="56c09d4f221d97a7d6b2fd44ae8a947e5e6c38d2" translate="yes" xml:space="preserve">
          <source>RAII does not apply to the management of the resources that are not acquired before use: CPU time, cores, and cache capacity, entropy pool capacity, network bandwidth, electric power consumption, stack memory.</source>
          <target state="translated">RAII는 CPU 시간, 코어 및 캐시 용량, 엔트로피 풀 용량, 네트워크 대역폭, 전력 소비, 스택 메모리와 같이 사용하기 전에 획득하지 않은 리소스 관리에는 적용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="61f03399664d74f13f34bbbf23c4e901cda3ffc9" translate="yes" xml:space="preserve">
          <source>RAII guarantees that the resource is available to any function that may access the object (resource availability is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Class_invariant&quot;&gt;class invariant&lt;/a&gt;, eliminating redundant runtime tests). It also guarantees that all resources are released when the lifetime of their controlling object ends, in reverse order of acquisition. Likewise, if resource acquisition fails (the constructor exits with an exception), all resources acquired by every fully-constructed member and base subobject are released in reverse order of initialization. This leverages the core language features (&lt;a href=&quot;lifetime&quot;&gt;object lifetime&lt;/a&gt;, &lt;a href=&quot;statements&quot;&gt;scope exit&lt;/a&gt;, &lt;a href=&quot;constructor#Initialization_order&quot;&gt;order of initialization&lt;/a&gt; and &lt;a href=&quot;throw#Stack_unwinding&quot;&gt;stack unwinding&lt;/a&gt;) to eliminate resource leaks and guarantee exception safety. Another name for this technique is</source>
          <target state="translated">RAII는 객체에 액세스 할 수있는 모든 함수에서 리소스를 사용할 수 있음을 보장합니다 (리소스 가용성은 &lt;a href=&quot;https://en.wikipedia.org/wiki/Class_invariant&quot;&gt;클래스가 변하지 않으므로&lt;/a&gt; 중복 런타임 테스트가 필요 없습니다). 또한 제어 대상의 수명이 종료되면 획득 순서와 반대로 모든 리소스가 해제되도록합니다. 마찬가지로, 자원 확보에 실패하면 (생성자가 예외와 함께 종료) 모든 완전히 구성된 멤버 및 기본 서브 오브젝트에 의해 확보 된 모든 자원은 초기화의 역순으로 해제됩니다. 핵심 언어 기능 ( &lt;a href=&quot;lifetime&quot;&gt;객체 수명&lt;/a&gt; , &lt;a href=&quot;statements&quot;&gt;범위 종료&lt;/a&gt; , &lt;a href=&quot;constructor#Initialization_order&quot;&gt;초기화 순서&lt;/a&gt; 및 &lt;a href=&quot;throw#Stack_unwinding&quot;&gt;스택 해제)을 활용합니다.&lt;/a&gt;)를 통해 리소스 누수를 제거하고 예외 안전을 보장합니다. 이 기술의 다른 이름은</target>
        </trans-unit>
        <trans-unit id="f3be8941500d349cc7eb1cfaec50ff047fdaddc9" translate="yes" xml:space="preserve">
          <source>RAII in Stroustrup's C++ FAQ</source>
          <target state="translated">Stroustrup의 C ++ FAQ에있는 RAII</target>
        </trans-unit>
        <trans-unit id="7cd72c18ecc72527ffc7db119290d9fafdfaada3" translate="yes" xml:space="preserve">
          <source>RAND_MAX</source>
          <target state="translated">RAND_MAX</target>
        </trans-unit>
        <trans-unit id="df8e5cb1fbb906f15052798c446df0ed08dfeb91" translate="yes" xml:space="preserve">
          <source>RTTI</source>
          <target state="translated">RTTI</target>
        </trans-unit>
        <trans-unit id="6c995967dddb04d30accdab7790a588d559ea696" translate="yes" xml:space="preserve">
          <source>RVO</source>
          <target state="translated">RVO</target>
        </trans-unit>
        <trans-unit id="ab4c72ff208fddd834e7f607e86972514a6c3972" translate="yes" xml:space="preserve">
          <source>Raises a value to a power.</source>
          <target state="translated">값을 거듭 제곱합니다.</target>
        </trans-unit>
        <trans-unit id="29d31f8e86794328666fa65d8666f3d844922e24" translate="yes" xml:space="preserve">
          <source>Random Number Generation</source>
          <target state="translated">난수 생성</target>
        </trans-unit>
        <trans-unit id="c88e9c9e69807e65fd9437d5099a054ec28a66fd" translate="yes" xml:space="preserve">
          <source>Random access - constant O(1)</source>
          <target state="translated">랜덤 액세스-상수 O (1)</target>
        </trans-unit>
        <trans-unit id="4ad416a69fe05a2ce31042fa3deef41deb37dd9d" translate="yes" xml:space="preserve">
          <source>Random number distributions</source>
          <target state="translated">난수 분포</target>
        </trans-unit>
        <trans-unit id="378c21c2a957349e6aa58385e51da05f8befba3b" translate="yes" xml:space="preserve">
          <source>Random number distributions (e.g. &lt;a href=&quot;random/uniform_int_distribution&quot;&gt;uniform&lt;/a&gt;, &lt;a href=&quot;random/normal_distribution&quot;&gt;normal&lt;/a&gt;, or &lt;a href=&quot;random/poisson_distribution&quot;&gt;poisson distributions&lt;/a&gt;) which convert the output of URBGs into various statistical distributions</source>
          <target state="translated">URBG의 출력을 다양한 통계적 분포로 변환하는 난수 분포 (예 : &lt;a href=&quot;random/uniform_int_distribution&quot;&gt;균일&lt;/a&gt; , &lt;a href=&quot;random/normal_distribution&quot;&gt;정규&lt;/a&gt; 또는 &lt;a href=&quot;random/poisson_distribution&quot;&gt;포아송 분포&lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="a42e01ea37bedde658e89fbc4618bd2c75fe5035" translate="yes" xml:space="preserve">
          <source>Random number distributions satisfy &lt;a href=&quot;../named_req/randomnumberdistribution&quot;&gt;RandomNumberDistribution&lt;/a&gt;.</source>
          <target state="translated">난수 분포는 &lt;a href=&quot;../named_req/randomnumberdistribution&quot;&gt;RandomNumberDistribution을&lt;/a&gt; 충족 시킵니다 .</target>
        </trans-unit>
        <trans-unit id="6c4deabc20a0cd2da58a1bcb397b4023398a8f17" translate="yes" xml:space="preserve">
          <source>Random number engine adaptors</source>
          <target state="translated">난수 엔진 어댑터</target>
        </trans-unit>
        <trans-unit id="5003089c797b569321c47e658b07eb8069433f38" translate="yes" xml:space="preserve">
          <source>Random number engine adaptors generate pseudo-random numbers using another random number engine as entropy source. They are generally used to alter the spectral characteristics of the underlying engine.</source>
          <target state="translated">난수 엔진 어댑터는 엔트로피 소스로 다른 난수 엔진을 사용하여 의사 난수를 생성합니다. 일반적으로 기본 엔진의 스펙트럼 특성을 변경하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="60bda0a6389ce2eaeecc4f9c29006ad31244762b" translate="yes" xml:space="preserve">
          <source>Random number engines</source>
          <target state="translated">난수 엔진</target>
        </trans-unit>
        <trans-unit id="75bb66fc02b5262b9475367669f1ccdc2d430469" translate="yes" xml:space="preserve">
          <source>Random number engines generate pseudo-random numbers using seed data as entropy source. Several different classes of pseudo-random number generation algorithms are implemented as templates that can be customized.</source>
          <target state="translated">난수 엔진은 시드 데이터를 엔트로피 소스로 사용하여 의사 난수를 생성합니다. 여러 가지 의사 난수 생성 알고리즘 클래스가 사용자 정의 할 수있는 템플릿으로 구현됩니다.</target>
        </trans-unit>
        <trans-unit id="dff3a0335dcc982ad6d70cdca46532b5785f3f4c" translate="yes" xml:space="preserve">
          <source>Random number generators and distributions</source>
          <target state="translated">난수 생성기 및 분포</target>
        </trans-unit>
        <trans-unit id="8873b2df9a109b83098f322bb00889d4946e2a8e" translate="yes" xml:space="preserve">
          <source>RandomAccessIterator</source>
          <target state="translated">RandomAccessIterator</target>
        </trans-unit>
        <trans-unit id="ec0c4b9e4435e53cdb0cbbec4115460a0f22a488" translate="yes" xml:space="preserve">
          <source>RandomAccessRange</source>
          <target state="translated">RandomAccessRange</target>
        </trans-unit>
        <trans-unit id="82916f1dbbdcee145d460824c8df630bb4c08f45" translate="yes" xml:space="preserve">
          <source>RandomNumberDistribution</source>
          <target state="translated">RandomNumberDistribution</target>
        </trans-unit>
        <trans-unit id="71c088d031705978625f855c9cd4d2d9c6ba384d" translate="yes" xml:space="preserve">
          <source>RandomNumberEngine</source>
          <target state="translated">RandomNumberEngine</target>
        </trans-unit>
        <trans-unit id="bdce701db10f2a6a990b71db9d3710fecd1f6d05" translate="yes" xml:space="preserve">
          <source>RandomNumberEngineAdaptor</source>
          <target state="translated">RandomNumberEngineAdaptor</target>
        </trans-unit>
        <trans-unit id="a16c5bbe4bf996740f257aa1e81bd57e4c52c8dd" translate="yes" xml:space="preserve">
          <source>Range</source>
          <target state="translated">Range</target>
        </trans-unit>
        <trans-unit id="d7c3ef6248b14ebb84f8d7b59e2d4c7f6b2c11f7" translate="yes" xml:space="preserve">
          <source>Range access</source>
          <target state="translated">범위 접근</target>
        </trans-unit>
        <trans-unit id="7f4a03451da3a3b22ae74a67a84165f6da9ef0e3" translate="yes" xml:space="preserve">
          <source>Range access, primitives, requirements, utilities and adaptors</source>
          <target state="translated">범위 접근, 프리미티브, 요구 사항, 유틸리티 및 어댑터</target>
        </trans-unit>
        <trans-unit id="9f1c559cd0d7b522cdef02a4c051dde257b73e76" translate="yes" xml:space="preserve">
          <source>Range adaptors</source>
          <target state="translated">레인지 어댑터</target>
        </trans-unit>
        <trans-unit id="4062f62dc83456f28bcc0a19f88a62f67ef77d78" translate="yes" xml:space="preserve">
          <source>Range adaptors accept &lt;a href=&quot;ranges/viewablerange&quot;&gt;&lt;code&gt;ViewableRange&lt;/code&gt;&lt;/a&gt; as their first arguments and returns a &lt;a href=&quot;ranges/view&quot;&gt;&lt;code&gt;View&lt;/code&gt;&lt;/a&gt;. They can also be chained using the pipe operator: if &lt;code&gt;C&lt;/code&gt; and &lt;code&gt;D&lt;/code&gt; are a range adaptors and &lt;code&gt;R&lt;/code&gt; is a &lt;a href=&quot;ranges/viewablerange&quot;&gt;&lt;code&gt;ViewableRange&lt;/code&gt;&lt;/a&gt;, these two expressions are equivalent:</source>
          <target state="translated">범위 어댑터는 &lt;a href=&quot;ranges/viewablerange&quot;&gt; &lt;code&gt;ViewableRange&lt;/code&gt; &lt;/a&gt; 를 첫 번째 인수로 받아들이고 &lt;a href=&quot;ranges/view&quot;&gt; &lt;code&gt;View&lt;/code&gt; 를&lt;/a&gt; 반환합니다 . 파이프 연산자를 사용하여 연결할 수도 있습니다. &lt;code&gt;C&lt;/code&gt; 및 &lt;code&gt;D&lt;/code&gt; 가 범위 어댑터이고 &lt;code&gt;R&lt;/code&gt; 이 &lt;a href=&quot;ranges/viewablerange&quot;&gt; &lt;code&gt;ViewableRange&lt;/code&gt; &lt;/a&gt; 인 경우이 두 표현식은 동일합니다.</target>
        </trans-unit>
        <trans-unit id="7fe11cf73fc9809608e6634837be124f2c354a55" translate="yes" xml:space="preserve">
          <source>Range allows for a positive leap second. Two leap seconds in the same minute are not allowed (the range 0..61 was a defect introduced in C89 and corrected in C99)</source>
          <target state="translated">범위는 양의 도약을 허용합니다. 같은 분에 두 번의 윤초는 허용되지 않습니다 (0..61 범위는 C89에서 발생하고 C99에서 수정 된 결함).</target>
        </trans-unit>
        <trans-unit id="8c5ebcfa76fa9fcb6d1c4ad738db0703d791aa99" translate="yes" xml:space="preserve">
          <source>Range concepts</source>
          <target state="translated">범위 개념</target>
        </trans-unit>
        <trans-unit id="b6a2342a836fe9c8230bf65e4558f0b9e4f68cf9" translate="yes" xml:space="preserve">
          <source>Range error due to overflow</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de112ad2a3e15627f3e2c881b1c1bf4687ea0fa6" translate="yes" xml:space="preserve">
          <source>Range error due to underflow</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f6207afbc5fb4f2b31854cc06b2eb7682a16127" translate="yes" xml:space="preserve">
          <source>Range factories</source>
          <target state="translated">범위 공장</target>
        </trans-unit>
        <trans-unit id="cb49c762941ab6d144ffed832b4d945676fae7d6" translate="yes" xml:space="preserve">
          <source>Range iterators</source>
          <target state="translated">범위 반복자</target>
        </trans-unit>
        <trans-unit id="f53c2d131febb348823fab8a8a7d0f0c49482130" translate="yes" xml:space="preserve">
          <source>Range of values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77e67487e9cb8bf2a5778f171bf816c7161b5db1" translate="yes" xml:space="preserve">
          <source>Range primitives</source>
          <target state="translated">레인지 프리미티브</target>
        </trans-unit>
        <trans-unit id="206c6df2313ea7052c090a71b5f6b408c985f0d1" translate="yes" xml:space="preserve">
          <source>Range-based &lt;code&gt;for&lt;/code&gt; loop</source>
          <target state="translated">범위 기반 &lt;code&gt;for&lt;/code&gt; 루프</target>
        </trans-unit>
        <trans-unit id="86a8c0aa1d63073e207764df76d37e1df1002276" translate="yes" xml:space="preserve">
          <source>Range-based for loop</source>
          <target state="translated">범위 기반 for 루프</target>
        </trans-unit>
        <trans-unit id="7c304ff567e27d0e3c4edcc94ff694e22315d604" translate="yes" xml:space="preserve">
          <source>Range-based for loop (since C++11)</source>
          <target state="translated">범위 기반 for 루프 (C ++ 11부터)</target>
        </trans-unit>
        <trans-unit id="0d5fda95e3940bc09dc1ccc22666813c0b54f73d" translate="yes" xml:space="preserve">
          <source>Ranges</source>
          <target state="translated">Ranges</target>
        </trans-unit>
        <trans-unit id="da214618f8e4cf6dfdea2a4032f3997846623733" translate="yes" xml:space="preserve">
          <source>Ranges TS</source>
          <target state="translated">TS 범위</target>
        </trans-unit>
        <trans-unit id="76cf69c326b709b413539c7865cb01eae1cc9a1a" translate="yes" xml:space="preserve">
          <source>Ranges library</source>
          <target state="translated">범위 라이브러리</target>
        </trans-unit>
        <trans-unit id="ffb0867df897a205167c9d668210420f065af48a" translate="yes" xml:space="preserve">
          <source>Ranges library (C++20)</source>
          <target state="translated">범위 라이브러리 (C ++ 20)</target>
        </trans-unit>
        <trans-unit id="3adf7ca6e2d92a42ec0e12fe21ca6072c22e8dbc" translate="yes" xml:space="preserve">
          <source>Ranking of implicit conversion sequences</source>
          <target state="translated">암시 적 변환 순서의 순위</target>
        </trans-unit>
        <trans-unit id="5bbec7dc583ab121b0ee3263e2680e6770efefef" translate="yes" xml:space="preserve">
          <source>Rarely overloaded operators</source>
          <target state="translated">거의 오버로드 된 연산자</target>
        </trans-unit>
        <trans-unit id="f1732969097813a9d981ac5899ac77e45adac224" translate="yes" xml:space="preserve">
          <source>Rationale for &lt;code&gt;std::uncaught_exceptions&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;std::uncaught_exceptions&lt;/code&gt; 이론적 근거</target>
        </trans-unit>
        <trans-unit id="4a3abccd82276b992cc6481563903c3d1a3ba8da" translate="yes" xml:space="preserve">
          <source>Raw pointer that represents the same address as &lt;code&gt;p&lt;/code&gt; does.</source>
          <target state="translated">같은 주소를 나타냅니다 원시 포인터 &lt;code&gt;p&lt;/code&gt; 는 않습니다.</target>
        </trans-unit>
        <trans-unit id="ce9a4a772a88d49b6a63f78245488ac96b3f98ab" translate="yes" xml:space="preserve">
          <source>Raw string literals</source>
          <target state="translated">원시 문자열 리터럴</target>
        </trans-unit>
        <trans-unit id="7675afc29f19cdcd6280287a1701c921c58e4602" translate="yes" xml:space="preserve">
          <source>Re-enabling shared_from_this</source>
          <target state="translated">shared_from_this 다시 활성화</target>
        </trans-unit>
        <trans-unit id="ac2ce76a0d7a849831382bd4993f066da6056c88" translate="yes" xml:space="preserve">
          <source>Reaching the end of a catch clause for a function-try-block on a destructor also automatically rethrows the current exception as if by &lt;code&gt;throw;&lt;/code&gt;, but a return statement is allowed.</source>
          <target state="translated">소멸자에서 function-try-block에 대한 catch 절 끝에 도달하면 throw에 의해 현재 예외가 자동으로 다시 발생합니다 &lt;code&gt;throw;&lt;/code&gt; 하지만 return 문은 허용됩니다.</target>
        </trans-unit>
        <trans-unit id="2c53f5957c4edf865a1a2ec4f7cc355fce0d7043" translate="yes" xml:space="preserve">
          <source>Read from start</source>
          <target state="translated">처음부터 읽기</target>
        </trans-unit>
        <trans-unit id="fd7967994dfc943a9d75a158de2c9b6edcab50b2" translate="yes" xml:space="preserve">
          <source>Read-only file system</source>
          <target state="translated">읽기 전용 파일 시스템</target>
        </trans-unit>
        <trans-unit id="2fb35a181814bf32ad3e2a2300c2bd3a4815ec2f" translate="yes" xml:space="preserve">
          <source>Read-only methods never invalidate iterators or references. Methods which modify the contents of a container may invalidate iterators and/or references, as summarized in this table.</source>
          <target state="translated">읽기 전용 메소드는 반복자 또는 참조를 무효화하지 않습니다. 컨테이너의 내용을 수정하는 메소드는이 표에 요약 된대로 반복자 및 / 또는 참조를 무효화 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="06af0a4deb4cddc8d563087bcb0d08a78915bbd1" translate="yes" xml:space="preserve">
          <source>Readable</source>
          <target state="translated">Readable</target>
        </trans-unit>
        <trans-unit id="1b1cb8761aae66ff9f85a2060c7e62fc247902a7" translate="yes" xml:space="preserve">
          <source>Reads &lt;code&gt;&lt;a href=&quot;../c&quot;&gt;stdin&lt;/a&gt;&lt;/code&gt; into given character string until a newline character is found or end-of-file occurs.</source>
          <target state="translated">개행 문자를 찾거나 파일 끝이 발생할 때까지 지정된 문자열로 &lt;code&gt;&lt;a href=&quot;../c&quot;&gt;stdin&lt;/a&gt;&lt;/code&gt; 을 읽 습니다.</target>
        </trans-unit>
        <trans-unit id="f73edbbe3039f7f207f0800e0022a861d1c62d02" translate="yes" xml:space="preserve">
          <source>Reads a single character by calling &lt;code&gt;sbuf_-&amp;gt;sgetc()&lt;/code&gt; where &lt;code&gt;sbuf_&lt;/code&gt; is the stored pointer to the stream buffer.</source>
          <target state="translated">&lt;code&gt;sbuf_-&amp;gt;sgetc()&lt;/code&gt; 를 호출하여 단일 문자를 읽습니다. 여기서 &lt;code&gt;sbuf_&lt;/code&gt; 는 스트림 버퍼에 대한 저장된 포인터입니다.</target>
        </trans-unit>
        <trans-unit id="e51e5fe380b1ccae7d7e57a06cec95c5639a9afa" translate="yes" xml:space="preserve">
          <source>Reads a value from the underlying stream and stores it into the iterator object. If the read fails, the iterator becomes the end-of-stream iterator.</source>
          <target state="translated">기본 스트림에서 값을 읽고 반복자 객체에 저장합니다. 읽기에 실패하면 반복자는 스트림 끝 반복기가됩니다.</target>
        </trans-unit>
        <trans-unit id="56a59b97cbb0a982d9686aeb31565312afe0f5f6" translate="yes" xml:space="preserve">
          <source>Reads at most &lt;code&gt;count - 1&lt;/code&gt; characters from the given file stream and stores them in the character array pointed to by &lt;code&gt;str&lt;/code&gt;. Reading stops if end-of-file occurs or a newline character is found, in which case &lt;code&gt;str&lt;/code&gt; will contain that newline character. If no errors occur, writes a null character at the position immediately after the last character written to &lt;code&gt;str&lt;/code&gt;.</source>
          <target state="translated">주어진 파일 스트림 에서 최대 &lt;code&gt;count - 1&lt;/code&gt; 문자를 읽고 &lt;code&gt;str&lt;/code&gt; 이 가리키는 문자 배열에 저장합니다 . 파일 끝이 발생하거나 개행 문자가 발견되면 읽기가 중지됩니다.이 경우 &lt;code&gt;str&lt;/code&gt; 은 개행 문자를 포함합니다. 오류가 발생하지 않으면 &lt;code&gt;str&lt;/code&gt; 에 마지막으로 쓴 문자 바로 다음 위치에 널 문자를 씁니다 .</target>
        </trans-unit>
        <trans-unit id="a053a84cc889b5d3c92765d188b2591de5606290" translate="yes" xml:space="preserve">
          <source>Reads at most &lt;code&gt;count - 1&lt;/code&gt; wide characters from the given file stream and stores them in &lt;code&gt;str&lt;/code&gt;. The produced wide string is always null-terminated. Parsing stops if end-of-file occurs or a newline wide character is found, in which case &lt;code&gt;str&lt;/code&gt; will contain that wide newline character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="577d417b88723fd8d0664a0440d1fc3c6b1a5869" translate="yes" xml:space="preserve">
          <source>Reads data from the a variety of sources, interprets it according to &lt;code&gt;format&lt;/code&gt; and stores the results into given locations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63c3f38917027942bdf2defee55f33a1a1676ada" translate="yes" xml:space="preserve">
          <source>Reads data from the a variety of sources, interprets it according to &lt;code&gt;format&lt;/code&gt; and stores the results into locations defined by &lt;code&gt;vlist&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27cfbcc600cedc647b7ae7ca401efa5b8aa65c15" translate="yes" xml:space="preserve">
          <source>Reads from &lt;code&gt;is&lt;/code&gt; the textual representation of &lt;code&gt;v&lt;/code&gt;'s current state, such that if that state was previously written via &lt;code&gt;os &amp;lt;&amp;lt; x&lt;/code&gt;, then &lt;code&gt;x == v&lt;/code&gt;. If &lt;code&gt;is&lt;/code&gt;'s fmtflags are not set to &lt;code&gt;ios_base::dec&lt;/code&gt;, the behavior may be undefined.</source>
          <target state="translated">읽은 &lt;code&gt;is&lt;/code&gt; &lt;code&gt;v&lt;/code&gt; 의 현재 상태를 텍스트로 표현한 것으로, 해당 상태가 이전에 &lt;code&gt;os &amp;lt;&amp;lt; x&lt;/code&gt; 를 통해 작성된 경우 &lt;code&gt;x == v&lt;/code&gt; 입니다. 경우 &lt;code&gt;is&lt;/code&gt; 의 fmtflags로 설정되지 않은 &lt;code&gt;ios_base::dec&lt;/code&gt; , 동작은 정의되지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1105bfa2f97c0025444b1268d025ba3852fb5ff5" translate="yes" xml:space="preserve">
          <source>Reads more data into the input area.</source>
          <target state="translated">입력 영역으로 더 많은 데이터를 읽습니다.</target>
        </trans-unit>
        <trans-unit id="35c091085ddf2a849b8a391fdf7055621c82a62b" translate="yes" xml:space="preserve">
          <source>Reads one character and advances the input sequence by one character.</source>
          <target state="translated">한 문자를 읽고 한 문자 씩 입력 순서를 진행시킵니다.</target>
        </trans-unit>
        <trans-unit id="23c38ea2c487abe47e92f3c69e5c258945798974" translate="yes" xml:space="preserve">
          <source>Reads one character from the input sequence.</source>
          <target state="translated">입력 순서에서 한 문자를 읽습니다.</target>
        </trans-unit>
        <trans-unit id="6ed85e4ba2a41e6a7c2a4eb07b9f3010021d38f6" translate="yes" xml:space="preserve">
          <source>Reads the next character from &lt;code&gt;&lt;a href=&quot;../c&quot;&gt;stdin&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../c&quot;&gt;stdin&lt;/a&gt;&lt;/code&gt; 에서 다음 문자를 읽습니다 .</target>
        </trans-unit>
        <trans-unit id="04fa5044ec53f8a703fd7455a62c3da5684f9b3f" translate="yes" xml:space="preserve">
          <source>Reads the next character from the get area of the buffer.</source>
          <target state="translated">버퍼의 get 영역에서 다음 문자를 읽습니다.</target>
        </trans-unit>
        <trans-unit id="7fb5856ecddcc3bd86f84bd6111937e1222d9a2c" translate="yes" xml:space="preserve">
          <source>Reads the next character from the given input stream.</source>
          <target state="translated">주어진 입력 스트림에서 다음 문자를 읽습니다.</target>
        </trans-unit>
        <trans-unit id="4826074ff2b7b03c776ae943c9ef75a5805efa42" translate="yes" xml:space="preserve">
          <source>Reads the next wide character from &lt;code&gt;&lt;a href=&quot;../c&quot;&gt;stdin&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../c&quot;&gt;stdin&lt;/a&gt;&lt;/code&gt; 에서 다음 와이드 문자를 읽습니다 .</target>
        </trans-unit>
        <trans-unit id="a84d93c4e41037a71622e042bcd5082f7de2ea49" translate="yes" xml:space="preserve">
          <source>Reads the next wide character from the given input stream. &lt;code&gt;getwc()&lt;/code&gt; may be implemented as a macro and may evaluate &lt;code&gt;stream&lt;/code&gt; more than once.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="172e576faf926bc95477bcc5330edc5ea547d862" translate="yes" xml:space="preserve">
          <source>Reads up to &lt;code&gt;count&lt;/code&gt; objects into the array &lt;code&gt;buffer&lt;/code&gt; from the given input stream &lt;code&gt;stream&lt;/code&gt; as if by calling &lt;code&gt;&lt;a href=&quot;fgetc&quot;&gt;std::fgetc&lt;/a&gt;&lt;/code&gt;&lt;code&gt;size&lt;/code&gt; times for each object, and storing the results, in the order obtained, into the successive positions of &lt;code&gt;buffer&lt;/code&gt;, which is reinterpreted as an array of &lt;code&gt;unsigned char&lt;/code&gt;. The file position indicator for the stream is advanced by the number of characters read.</source>
          <target state="translated">최대 읽어 &lt;code&gt;count&lt;/code&gt; 어레이에 오브젝트 &lt;code&gt;buffer&lt;/code&gt; 지정된 입력 스트림에서 &lt;code&gt;stream&lt;/code&gt; 호출하여 것처럼 &lt;code&gt;&lt;a href=&quot;fgetc&quot;&gt;std::fgetc&lt;/a&gt;&lt;/code&gt; &lt;code&gt;size&lt;/code&gt; 결과를 각각의 객체에 대한 시간 및 저장하는 연속적인 위치로 얻어진 위해 &lt;code&gt;buffer&lt;/code&gt; 로 재 해석하고, 배열 &lt;code&gt;unsigned char&lt;/code&gt; . 스트림의 파일 위치 표시기는 읽은 문자 수만큼 증가합니다.</target>
        </trans-unit>
        <trans-unit id="e4716526bbfcb1c5d4b25028aeddc94ccd5f2fd7" translate="yes" xml:space="preserve">
          <source>Real floating-point numbers may be used with &lt;a href=&quot;operator_arithmetic&quot;&gt;arithmetic operators&lt;/a&gt; + - / * and various mathematical functions from &lt;a href=&quot;../numeric/math&quot;&gt;cmath&lt;/a&gt;. Both built-in operators and library functions may raise floating-point exceptions and set &lt;code&gt;&lt;a href=&quot;../error/errno&quot;&gt;errno&lt;/a&gt;&lt;/code&gt; as described in &lt;a href=&quot;../numeric/math/math_errhandling&quot;&gt;&lt;code&gt;math_errhandling&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">실제 부동 소수점 숫자는 &lt;a href=&quot;operator_arithmetic&quot;&gt;산술 연산자&lt;/a&gt; +-/ * 및 &lt;a href=&quot;../numeric/math&quot;&gt;cmath의&lt;/a&gt; 다양한 수학 함수와 함께 사용할 수 있습니다 . 내장 연산자와 라이브러리 함수는 &lt;a href=&quot;../numeric/math/math_errhandling&quot;&gt; &lt;code&gt;math_errhandling&lt;/code&gt; 에&lt;/a&gt; 설명 된대로 부동 소수점 예외를 발생시키고 &lt;code&gt;&lt;a href=&quot;../error/errno&quot;&gt;errno&lt;/a&gt;&lt;/code&gt; 를 설정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0867910adec06db4e930f4b0105a1c9dd2023a55" translate="yes" xml:space="preserve">
          <source>RealType</source>
          <target state="translated">RealType</target>
        </trans-unit>
        <trans-unit id="2f2c95bf96c3f011423d6400df0d37e5fb611fae" translate="yes" xml:space="preserve">
          <source>Reallocates the given area of memory. It must be previously allocated by &lt;code&gt;&lt;a href=&quot;malloc&quot;&gt;std::malloc()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;calloc&quot;&gt;std::calloc()&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;std::realloc()&lt;/code&gt; and not yet freed with &lt;code&gt;&lt;a href=&quot;free&quot;&gt;std::free()&lt;/a&gt;&lt;/code&gt;, otherwise, the results are undefined.</source>
          <target state="translated">주어진 메모리 영역을 재 할당합니다. &lt;code&gt;&lt;a href=&quot;malloc&quot;&gt;std::malloc()&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;calloc&quot;&gt;std::calloc()&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;std::realloc()&lt;/code&gt; 의해 이전에 할당 되었지만 &lt;code&gt;&lt;a href=&quot;free&quot;&gt;std::free()&lt;/a&gt;&lt;/code&gt; 아직 해제되지 않은 경우에는 결과가 정의되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="b6a696a9ccf543570482fbf55faf1be43572be52" translate="yes" xml:space="preserve">
          <source>Reallocations are usually costly operations in terms of performance. The &lt;code&gt;&lt;a href=&quot;vector/reserve&quot;&gt;reserve()&lt;/a&gt;&lt;/code&gt; function can be used to eliminate reallocations if the number of elements is known beforehand.</source>
          <target state="translated">재 할당은 일반적으로 성능 측면에서 비용이 많이 드는 작업입니다. &lt;code&gt;&lt;a href=&quot;vector/reserve&quot;&gt;reserve()&lt;/a&gt;&lt;/code&gt; 함수는 요소의 개수가 미리 알고있는 경우 재 할당을 제거하는데 사용될 수있다.</target>
        </trans-unit>
        <trans-unit id="4336931a3ff30bbc12f00f35ed60f2278fb56607" translate="yes" xml:space="preserve">
          <source>Rearranges elements such that the range &lt;code&gt;[first, middle)&lt;/code&gt; contains the sorted &lt;code&gt;middle - first&lt;/code&gt; smallest elements in the range &lt;code&gt;[first, last)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;[first, middle)&lt;/code&gt; 범위가 &lt;code&gt;[first, last)&lt;/code&gt; 범위에서 정렬 된 &lt;code&gt;middle - first&lt;/code&gt; 가장 작은 요소를 포함하도록 요소를 재 배열합니다 .</target>
        </trans-unit>
        <trans-unit id="2bac6ad11995f27faa6724f5490a285260ce0cbb" translate="yes" xml:space="preserve">
          <source>Recursive directory iterators do not follow directory symlinks by default. To enable this behavior, specify &lt;code&gt;directory_options::follow_directory_symlink&lt;/code&gt; among the &lt;code&gt;options&lt;/code&gt; option set.</source>
          <target state="translated">재귀 디렉토리 반복자는 기본적으로 디렉토리 심볼릭 링크를 따르지 않습니다. 이 동작을 활성화하려면 &lt;code&gt;options&lt;/code&gt; 옵션 세트 중에서 &lt;code&gt;directory_options::follow_directory_symlink&lt;/code&gt; 지정 하십시오 .</target>
        </trans-unit>
        <trans-unit id="8025c57614ca148f214e43807dee765ef8aac503" translate="yes" xml:space="preserve">
          <source>Recursively copy subdirectories and their content</source>
          <target state="translated">하위 디렉토리와 해당 컨텐츠를 재귀 적으로 복사</target>
        </trans-unit>
        <trans-unit id="8dc0ab131d0de1e36a3c4bfc9ab78d9178422a2b" translate="yes" xml:space="preserve">
          <source>Reduces (&lt;a href=&quot;https://en.wikipedia.org/wiki/Fold_(higher-order_function)&quot;&gt;folds&lt;/a&gt;) a &lt;a href=&quot;parameter_pack&quot;&gt;parameter pack&lt;/a&gt; over a binary operator.</source>
          <target state="translated">이진 연산자에 대한 &lt;a href=&quot;parameter_pack&quot;&gt;매개 변수 팩&lt;/a&gt; 을 줄입니다 ( &lt;a href=&quot;https://en.wikipedia.org/wiki/Fold_(higher-order_function)&quot;&gt;접힘&lt;/a&gt; ) .</target>
        </trans-unit>
        <trans-unit id="db1c784524e1b54011a95823026161f7c8517fe0" translate="yes" xml:space="preserve">
          <source>Reference</source>
          <target state="translated">Reference</target>
        </trans-unit>
        <trans-unit id="1f538f81d7b2e2c8d4604fe2236abd82b7939929" translate="yes" xml:space="preserve">
          <source>Reference cannot be default-initialized.</source>
          <target state="translated">참조는 기본값으로 초기화 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="27feef4318d1a9f2d1479db178e06a1cc3b6bd88" translate="yes" xml:space="preserve">
          <source>Reference collapsing</source>
          <target state="translated">참조 축소</target>
        </trans-unit>
        <trans-unit id="7b44b65dadfdf409d2cab602ae94b0489188f130" translate="yes" xml:space="preserve">
          <source>Reference constant expression</source>
          <target state="translated">참조 상수 표현식</target>
        </trans-unit>
        <trans-unit id="6d6fbbd4527db8853381a9578272288f3dd5e652" translate="yes" xml:space="preserve">
          <source>Reference declaration</source>
          <target state="translated">참조 선언</target>
        </trans-unit>
        <trans-unit id="41a65f69b82ff9e1b9f2da1c9556c7c69286e1f6" translate="yes" xml:space="preserve">
          <source>Reference initialization</source>
          <target state="translated">참조 초기화</target>
        </trans-unit>
        <trans-unit id="68ce85717a9cc701a75f83c7315c20db4c210ad3" translate="yes" xml:space="preserve">
          <source>Reference initialization by conversion</source>
          <target state="translated">변환에 의한 참조 초기화</target>
        </trans-unit>
        <trans-unit id="e1a4bd71fe89bdef1bfdadeeabef8e213394e315" translate="yes" xml:space="preserve">
          <source>Reference members cannot be bound to temporaries in a default member initializer (note; same rule exists for &lt;a href=&quot;constructor#Explanation&quot;&gt;member initializer lists&lt;/a&gt;).</source>
          <target state="translated">기본 멤버 이니셜 라이저에서 참조 멤버를 임시에 바인딩 할 수 없습니다 (참고 : &lt;a href=&quot;constructor#Explanation&quot;&gt;멤버 이니셜 라이저 목록에&lt;/a&gt; 동일한 규칙이 있음 ).</target>
        </trans-unit>
        <trans-unit id="bf1ac69d4c8bdd1332bcbbc1de0f08c8d6036b6b" translate="yes" xml:space="preserve">
          <source>Reference members cannot be bound to temporaries in a member initializer list:</source>
          <target state="translated">참조 멤버는 멤버 초기화 목록에서 임시에 바인딩 될 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="98fb8f32aad4f44f917c852edd96707f23ae8d45" translate="yes" xml:space="preserve">
          <source>Reference members cannot be initialized with a default member initializer if it has a subexpression that would execute aggregate initialization which would use the same initializer:</source>
          <target state="translated">참조 멤버는 동일한 이니셜 라이저를 사용하는 집계 초기화를 실행하는 하위 표현식이있는 경우 기본 멤버 이니셜 라이저로 초기화 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="300b43522daabfc29a69871fe5117abbca2f0664" translate="yes" xml:space="preserve">
          <source>Reference or pointer to the element previous to &lt;code&gt;current&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;current&lt;/code&gt; 이전 요소에 대한 참조 또는 포인터 .</target>
        </trans-unit>
        <trans-unit id="bb616147807ea22f629d7cf6b432e14a0abd5d12" translate="yes" xml:space="preserve">
          <source>Reference to &lt;code&gt;lo&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is less than &lt;code&gt;lo&lt;/code&gt;, reference to &lt;code&gt;hi&lt;/code&gt; if &lt;code&gt;hi&lt;/code&gt; is less than &lt;code&gt;v&lt;/code&gt;, otherwise reference to &lt;code&gt;v&lt;/code&gt;.</source>
          <target state="translated">참조 &lt;code&gt;lo&lt;/code&gt; 경우 &lt;code&gt;v&lt;/code&gt; 이하보다 &lt;code&gt;lo&lt;/code&gt; 을 참조 &lt;code&gt;hi&lt;/code&gt; 경우 &lt;code&gt;hi&lt;/code&gt; 미만이고 &lt;code&gt;v&lt;/code&gt; 그렇지 참조 &lt;code&gt;v&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3c1af32a621e0dc61f39b572bda60cd992c6eda2" translate="yes" xml:space="preserve">
          <source>Reference to the &lt;code&gt;&lt;a href=&quot;../sub_match&quot;&gt;std::sub_match&lt;/a&gt;&lt;/code&gt; representing the specified matched subrange within the target sequence.</source>
          <target state="translated">대상 시퀀스 내에서 지정된 일치 하위 범위를 나타내는 &lt;code&gt;&lt;a href=&quot;../sub_match&quot;&gt;std::sub_match&lt;/a&gt;&lt;/code&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="ff5aef3c5ac0ab4a17255adaecb01327a021965c" translate="yes" xml:space="preserve">
          <source>Reference to the first element.</source>
          <target state="translated">첫 번째 요소를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="2121364055c5d049898852aa6298f567138e3187" translate="yes" xml:space="preserve">
          <source>Reference to the last character, equivalent to &lt;code&gt;operator[](size() - 1)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;operator[](size() - 1)&lt;/code&gt; 와 동일한 마지막 문자에 대한 참조 입니다.</target>
        </trans-unit>
        <trans-unit id="86d9a4349709b508a9aaaf5de52cb05544b0602c" translate="yes" xml:space="preserve">
          <source>Reference to the last element.</source>
          <target state="translated">마지막 요소를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="584953079692211eac629f65d34a8e9981275436" translate="yes" xml:space="preserve">
          <source>Reference to the mapped value of the new element if no element with key &lt;code&gt;key&lt;/code&gt; existed. Otherwise a reference to the mapped value of the existing element whose key is equivalent to &lt;code&gt;key&lt;/code&gt;.</source>
          <target state="translated">키 &lt;code&gt;key&lt;/code&gt; 가있는 요소가없는 경우 새 요소의 맵핑 된 값을 참조하십시오 . 그렇지 않으면 키 기존 요소 매핑 된 값에 대한 참조에 해당 &lt;code&gt;key&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5e2c81626a532f8c811b084dadd4f32d2cb46c6d" translate="yes" xml:space="preserve">
          <source>Reference to the mapped value of the requested element.</source>
          <target state="translated">요청 된 요소의 맵핑 된 값에 대한 참조</target>
        </trans-unit>
        <trans-unit id="c05d1f4ddea6c28b0f8fe979de9aceb16ace389d" translate="yes" xml:space="preserve">
          <source>Reference to the requested character.</source>
          <target state="translated">요청 된 문자를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="9b7fad21bb7d84bd1b65191e7b964a8c397568f5" translate="yes" xml:space="preserve">
          <source>Reference to the requested element.</source>
          <target state="translated">요청 된 요소에 대한 참조</target>
        </trans-unit>
        <trans-unit id="37d6ca6de6b155b7aedc1c3a9ef5026d7653e9aa" translate="yes" xml:space="preserve">
          <source>Reference to the top element as if obtained by a call to &lt;code&gt;c.front()&lt;/code&gt;.</source>
          <target state="translated">호출에 의해 얻어진 것처럼 상단 요소의 참조 &lt;code&gt;c.front()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="215cd2bfbba25cba3bf021306bec0c2ebe741d49" translate="yes" xml:space="preserve">
          <source>Reference to the type of &lt;code&gt;is&lt;/code&gt;</source>
          <target state="translated">유형 참조 &lt;code&gt;is&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="32a911304a265bc778f45e5add8d9c230a4b386e" translate="yes" xml:space="preserve">
          <source>Reference to the type of &lt;code&gt;os&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;os&lt;/code&gt; 유형에 대한 참조</target>
        </trans-unit>
        <trans-unit id="8219b6b7fef06639b92a8cb4dde218abcab975ef" translate="yes" xml:space="preserve">
          <source>Reference to the unmatched prefix.</source>
          <target state="translated">일치하지 않는 접두사를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="65a152a7c1c23ecb4f75fb8ec6782609a06d1935" translate="yes" xml:space="preserve">
          <source>Reference to the unmatched suffix.</source>
          <target state="translated">일치하지 않는 접미사를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="3b1ffaef65ca860b97bee71cdbd9992f99a1a2a2" translate="yes" xml:space="preserve">
          <source>Reference to the value stored in the variant.</source>
          <target state="translated">변형에 저장된 값을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="f7ee77f060b5f6ac81a59365671f09dde8caf32a" translate="yes" xml:space="preserve">
          <source>Reference types cannot be &lt;a href=&quot;cv&quot;&gt;cv-qualified&lt;/a&gt; at the top level; there is no syntax for that in declaration, and if a qualification is introduced through a typedef, decltype, or template type argument, it is ignored.</source>
          <target state="translated">최상위 레벨에서는 참조 유형을 &lt;a href=&quot;cv&quot;&gt;cv로 규정&lt;/a&gt; 할 수 없습니다 . 선언에는 구문이 없으며 typedef, decltype 또는 template type 인수를 통해 규정이 도입되면 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="1ae627fdd27471d3add24f91a6176b4dd52e067b" translate="yes" xml:space="preserve">
          <source>Reference variables can be declared constexpr (their initializers have to be &lt;a href=&quot;constant_expression#Constant_expression&quot;&gt;reference constant expressions&lt;/a&gt;):</source>
          <target state="translated">참조 변수는 constexpr로 선언 될 수 있습니다 (초기화자는 &lt;a href=&quot;constant_expression#Constant_expression&quot;&gt;참조 상수 표현식&lt;/a&gt; 이어야 함 ).</target>
        </trans-unit>
        <trans-unit id="3d594001d3b207cf8936c157a55b924fe6cbde4b" translate="yes" xml:space="preserve">
          <source>Reference wrappers</source>
          <target state="translated">참조 래퍼</target>
        </trans-unit>
        <trans-unit id="32ca59359d68e4bed09b8b2dcfd781b2d40f33c6" translate="yes" xml:space="preserve">
          <source>Reference wrappers allow reference arguments to be stored in copyable function objects:</source>
          <target state="translated">참조 래퍼를 사용하면 참조 인수를 복사 가능한 함수 객체에 저장할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5d20d0fee3b91643dd8d272ac33d01ca95179d82" translate="yes" xml:space="preserve">
          <source>References</source>
          <target state="translated">References</target>
        </trans-unit>
        <trans-unit id="b12235bfcfd32e3c6e3dba2478e0a7aa390916c9" translate="yes" xml:space="preserve">
          <source>References and iterators to the erased element are invalidated.</source>
          <target state="translated">지워진 요소에 대한 참조 및 반복자는 무효화됩니다.</target>
        </trans-unit>
        <trans-unit id="92b71789a3e861d85bf1071c7bdb1e7aaeb7bb57" translate="yes" xml:space="preserve">
          <source>References and iterators to the erased elements are invalidated. Other iterators and references are not invalidated.</source>
          <target state="translated">지워진 요소에 대한 참조 및 반복자는 무효화됩니다. 다른 반복자와 참조는 무효화되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="2ddd3de3decde5911ce920de5b1ff764dec1014d" translate="yes" xml:space="preserve">
          <source>References and iterators to the erased elements are invalidated. Other references and iterators are not affected.</source>
          <target state="translated">지워진 요소에 대한 참조 및 반복자는 무효화됩니다. 다른 참조 및 반복자는 영향을받지 않습니다.</target>
        </trans-unit>
        <trans-unit id="4f84f9f702cfb99fda1b35476741bc40b9241b24" translate="yes" xml:space="preserve">
          <source>References and pointers to arrays of unknown bound can be formed, but cannot be initialized or assigned from arrays and pointers to arrays of known bound. Note that in the C programming language, pointers to arrays of unknown bound are compatible with pointers to arrays of known bound and are thus convertible and assignable in both directions.</source>
          <target state="translated">알려지지 않은 바인드 배열에 대한 참조 및 포인터는 형성 될 수 있지만, 배열 및 알려진 바운드 된 배열에 대한 포인터에서 초기화 또는 할당 될 수 없습니다. C 프로그래밍 언어에서 알려지지 않은 경계의 배열에 대한 포인터는 알려진 경계의 배열에 대한 포인터와 호환되므로 양방향으로 변환 및 할당 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="dd858acfd18eaa9d41f9da42dceed8685f9f2271" translate="yes" xml:space="preserve">
          <source>References and pointers to cv-qualified types may be &lt;a href=&quot;implicit_cast#Qualification_conversions&quot;&gt; implicitly converted&lt;/a&gt; to references and pointers to</source>
          <target state="translated">cv-qualified 형식 에 대한 참조 및 포인터는 &lt;a href=&quot;implicit_cast#Qualification_conversions&quot;&gt;암시 적&lt;/a&gt; 으로 참조 및 포인터로 변환 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="35208b59cda9bc20d29c307afb8c790f330b5fac" translate="yes" xml:space="preserve">
          <source>References and pointers to either key or data stored in the container are only invalidated by erasing that element, even when the corresponding iterator is invalidated.</source>
          <target state="translated">컨테이너에 저장된 키 또는 데이터에 대한 참조 및 포인터는 해당 반복자가 무효화 된 경우에도 해당 요소를 지워야 무효화됩니다.</target>
        </trans-unit>
        <trans-unit id="097b0424e0fd1eade52cd9bbfd9205f87765f5d4" translate="yes" xml:space="preserve">
          <source>References appear without initializers only in function parameter declaration, in function return type declaration, in the declaration of a class member, and with the &lt;code&gt;extern&lt;/code&gt; specifier.</source>
          <target state="translated">참조는 함수 매개 변수 선언, 함수 반환 형식 선언, 클래스 멤버 선언 및 &lt;code&gt;extern&lt;/code&gt; 지정자 와 함께 초기화 프로그램없이 만 나타납니다 .</target>
        </trans-unit>
        <trans-unit id="440e81f160b61869c1254fad3dcd60d70b523797" translate="yes" xml:space="preserve">
          <source>References are initialized in the following situations:</source>
          <target state="translated">다음과 같은 상황에서 참조가 초기화됩니다.</target>
        </trans-unit>
        <trans-unit id="98084945dc68ad770d916fcc848a11e333adb57e" translate="yes" xml:space="preserve">
          <source>References are not objects; they do not necessarily occupy storage, although the compiler may allocate storage if it is necessary to implement the desired semantics (e.g. a non-static data member of reference type usually increases the size of the class by the amount necessary to store a memory address).</source>
          <target state="translated">참조는 객체가 아닙니다. 컴파일러는 원하는 의미를 구현해야하는 경우 컴파일러가 스토리지를 할당 할 수 있지만 반드시 스토리지를 차지할 필요는 없습니다 (예 : 비 정적 참조 유형의 정적 데이터 멤버는 일반적으로 메모리 주소를 저장하는 데 필요한 양만큼 클래스 크기를 증가시킵니다) .</target>
        </trans-unit>
        <trans-unit id="359a47ac6d4301bdc353a06c78cad3d50b052e74" translate="yes" xml:space="preserve">
          <source>References become invalid on &lt;a href=&quot;resize&quot;&gt;resize&lt;/a&gt; or when the array is destructed.</source>
          <target state="translated">&lt;a href=&quot;resize&quot;&gt;크기&lt;/a&gt; 를 조정 하거나 배열이 삭제되면 참조가 유효하지 않게됩니다 .</target>
        </trans-unit>
        <trans-unit id="b97517b39ff305f026aef47f8f8154f2883ca30f" translate="yes" xml:space="preserve">
          <source>References cannot be value-initialized.</source>
          <target state="translated">참조는 값을 초기화 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="084f870de5376a14cc6b9d5dd50fedb1c1d6123f" translate="yes" xml:space="preserve">
          <source>Regardless of the value of &lt;code&gt;FLT_EVAL_METHOD&lt;/code&gt;, any floating-point expression may be</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35eb0b15cd46ea358a89d8eebda9ffec29959244" translate="yes" xml:space="preserve">
          <source>Regardless of threads, evaluation A</source>
          <target state="translated">스레드에 관계없이 평가 A</target>
        </trans-unit>
        <trans-unit id="83da3dc1d543053c8cc335d5b0bee13d5eab2ad3" translate="yes" xml:space="preserve">
          <source>RegexTraits</source>
          <target state="translated">RegexTraits</target>
        </trans-unit>
        <trans-unit id="fee4e49bbebfed2e579b3eae6b7d5a414faef611" translate="yes" xml:space="preserve">
          <source>RegexTraits is satisfied by the following standard library classes:</source>
          <target state="translated">RegexTraits는 다음 표준 라이브러리 클래스에 의해 충족됩니다.</target>
        </trans-unit>
        <trans-unit id="ab32bb4b29de49f39b504707aa00b09b6d3d0aaa" translate="yes" xml:space="preserve">
          <source>Registers a user-defined function which will be called by &lt;code&gt;&lt;a href=&quot;imbue&quot;&gt;imbue()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../basic_ios/copyfmt&quot;&gt;std::basic_ios::copyfmt()&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;~ios_base()&lt;/code&gt;. Every registered callback is called every time: the event type (a value of type &lt;code&gt;&lt;a href=&quot;event&quot;&gt;event&lt;/a&gt;&lt;/code&gt;) is passed as its first argument, and may be used to distinguish between the callers.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;imbue&quot;&gt;imbue()&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;../basic_ios/copyfmt&quot;&gt;std::basic_ios::copyfmt()&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;~ios_base()&lt;/code&gt; 의해 호출 될 사용자 정의 함수를 등록합니다 . 이벤트 타입 (타입 값 : 모든 등록 된 콜백마다 호출 &lt;code&gt;&lt;a href=&quot;event&quot;&gt;event&lt;/a&gt;&lt;/code&gt; )의 첫 번째 인수로서 전달되고, 발신자를 구별하는데 사용될 수있다.</target>
        </trans-unit>
        <trans-unit id="647f9a2fc24c9fcf6f8c61b48d3233e6f5988648" translate="yes" xml:space="preserve">
          <source>Registers the function pointed to by &lt;code&gt;func&lt;/code&gt; to be called on normal program termination (via &lt;code&gt;&lt;a href=&quot;exit&quot;&gt;std::exit()&lt;/a&gt;&lt;/code&gt; or returning from the &lt;a href=&quot;../../language/main_function&quot;&gt;main function&lt;/a&gt;).</source>
          <target state="translated">일반 프로그램 종료시 ( &lt;code&gt;&lt;a href=&quot;exit&quot;&gt;std::exit()&lt;/a&gt;&lt;/code&gt; 를 통해 또는 &lt;a href=&quot;../../language/main_function&quot;&gt;main 함수&lt;/a&gt; 에서 리턴 ) &lt;code&gt;func&lt;/code&gt; 이 가리키는 함수를 등록합니다 .</target>
        </trans-unit>
        <trans-unit id="3773ae25ede3442e65c215fda5078ec33b2ed76a" translate="yes" xml:space="preserve">
          <source>Registers the function pointed to by &lt;code&gt;func&lt;/code&gt; to be called on quick program termination (via &lt;code&gt;&lt;a href=&quot;quick_exit&quot;&gt;std::quick_exit&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">빠른 프로그램 종료시 ( &lt;code&gt;&lt;a href=&quot;quick_exit&quot;&gt;std::quick_exit&lt;/a&gt;&lt;/code&gt; 를 통해) &lt;code&gt;func&lt;/code&gt; 이 가리키는 함수를 등록합니다 .</target>
        </trans-unit>
        <trans-unit id="8d4e4ef3ea5252ec5235e4b1dd463ae9c302422c" translate="yes" xml:space="preserve">
          <source>Regular</source>
          <target state="translated">Regular</target>
        </trans-unit>
        <trans-unit id="5735772f427c0feca7155da053476c1faa961ebe" translate="yes" xml:space="preserve">
          <source>Regular &lt;code&gt;&lt;a href=&quot;malloc&quot;&gt;std::malloc&lt;/a&gt;&lt;/code&gt; aligns memory suitable for any object type (which, in practice, means that it is aligned to &lt;code&gt;alignof(&lt;a href=&quot;../../types/max_align_t&quot;&gt;std::max_align_t&lt;/a&gt;)&lt;/code&gt;). This function is useful for over-aligned allocations, such as to SSE, cache line, or VM page boundary.</source>
          <target state="translated">일반 &lt;code&gt;&lt;a href=&quot;malloc&quot;&gt;std::malloc&lt;/a&gt;&lt;/code&gt; 은 모든 객체 유형에 적합한 메모리를 정렬합니다 (실제로는 &lt;code&gt;alignof(&lt;a href=&quot;../../types/max_align_t&quot;&gt;std::max_align_t&lt;/a&gt;)&lt;/code&gt; 정렬됨을 의미 ). 이 기능은 SSE, 캐시 라인 또는 VM 페이지 경계와 같이 과도하게 정렬 된 할당에 유용합니다.</target>
        </trans-unit>
        <trans-unit id="0e3a57dd80ce3c13736d20fba014e9e474dddbfc" translate="yes" xml:space="preserve">
          <source>Regular Expressions library</source>
          <target state="translated">정규식 라이브러리</target>
        </trans-unit>
        <trans-unit id="3172c4ae8fee97c04bb506eac2e6f47443f5a679" translate="yes" xml:space="preserve">
          <source>Regular expressions</source>
          <target state="translated">정규식</target>
        </trans-unit>
        <trans-unit id="6a1c5c68a9d2affa19c55b186b4b3e672555ae81" translate="yes" xml:space="preserve">
          <source>Regular expressions library</source>
          <target state="translated">정규식 라이브러리</target>
        </trans-unit>
        <trans-unit id="20587220d5c297affc4c00aadd4d7834ac66981c" translate="yes" xml:space="preserve">
          <source>Rehashing invalidates iterator and might cause the elements to be re-arranged in different buckets but it doesn't invalidate references to the elements.</source>
          <target state="translated">리 해싱은 반복자를 무효화하고 요소가 다른 버킷에 다시 정렬되도록하지만 요소에 대한 참조는 무효화하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="87888d23469b7f6d228494b46e08d60caa4d0782" translate="yes" xml:space="preserve">
          <source>Reinitializes the internal state of the random-number engine using new seed value.</source>
          <target state="translated">새로운 시드 값을 사용하여 난수 엔진의 내부 상태를 다시 초기화합니다.</target>
        </trans-unit>
        <trans-unit id="698db0adc115596c93355f23cc1ceccc67c8c08a" translate="yes" xml:space="preserve">
          <source>Reinitializes the internal state of the underlying engine using a new seed value.</source>
          <target state="translated">새로운 시드 값을 사용하여 기본 엔진의 내부 상태를 다시 초기화합니다.</target>
        </trans-unit>
        <trans-unit id="55b60a9953670049da788380b0b2bae6e6404a3b" translate="yes" xml:space="preserve">
          <source>Reinterprets the objects pointed to by &lt;code&gt;lhs&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt; as arrays of &lt;code&gt;unsigned char&lt;/code&gt; and compares the first &lt;code&gt;count&lt;/code&gt; characters of these arrays. The comparison is done lexicographically.</source>
          <target state="translated">&lt;code&gt;lhs&lt;/code&gt; 및 &lt;code&gt;rhs&lt;/code&gt; 가 가리키는 객체 를 &lt;code&gt;unsigned char&lt;/code&gt; 배열로 해석 하고이 배열 의 첫 번째 &lt;code&gt;count&lt;/code&gt; 문자를 비교합니다 . 사전은 사전 식으로 이루어집니다.</target>
        </trans-unit>
        <trans-unit id="33a5a7571bf686aab9c742d3d618a2dde6a4506e" translate="yes" xml:space="preserve">
          <source>Relation</source>
          <target state="translated">Relation</target>
        </trans-unit>
        <trans-unit id="40fa22a00ce265dc796c706bf3adebe616b0341c" translate="yes" xml:space="preserve">
          <source>Relational operators</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bbdd9148b3036b1321dc79327ce52e01191a05a" translate="yes" xml:space="preserve">
          <source>Relational operators and comparison</source>
          <target state="translated">관계 연산자 및 비교</target>
        </trans-unit>
        <trans-unit id="00a2a14b494539349e2aa89d4c2db0bddf6cf85c" translate="yes" xml:space="preserve">
          <source>Relationship with &lt;code&gt;volatile&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;volatile&lt;/code&gt; 과의 관계</target>
        </trans-unit>
        <trans-unit id="09186002606defe5579c74a3fbc3a38a6f54bc26" translate="yes" xml:space="preserve">
          <source>Relationship with C library macro constants</source>
          <target state="translated">C 라이브러리 매크로 상수와의 관계</target>
        </trans-unit>
        <trans-unit id="270247ce92fda8c33fe83a9443baeafcac5df91b" translate="yes" xml:space="preserve">
          <source>Relationship with std::fpos</source>
          <target state="translated">std :: fpos와의 관계</target>
        </trans-unit>
        <trans-unit id="d8d06320b3cf84590422c4f7500f0c9997914cea" translate="yes" xml:space="preserve">
          <source>Relationship with the main function</source>
          <target state="translated">주요 기능과의 관계</target>
        </trans-unit>
        <trans-unit id="a5c5cb0dd39fd5f8960a126f776dbc3b14c78315" translate="yes" xml:space="preserve">
          <source>Relaxed operation: there are no synchronization or ordering constraints imposed on other reads or writes, only this operation's atomicity is guaranteed (see &lt;a href=&quot;memory_order#Relaxed_ordering&quot;&gt;Relaxed ordering&lt;/a&gt; below)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="332a6fa800dab748056c239b8ee0efb205f4447c" translate="yes" xml:space="preserve">
          <source>Relaxed ordering</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0af66f7a6b8d1e0d15d08e2d9c5e7281f7582d2" translate="yes" xml:space="preserve">
          <source>Relaxing constraints on &lt;code&gt;constexpr&lt;/code&gt; functions / &lt;code&gt;constexpr&lt;/code&gt; member functions and implicit &lt;code&gt;const&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;constexpr&lt;/code&gt; 함수 / &lt;code&gt;constexpr&lt;/code&gt; 멤버 함수 및 암시 적 &lt;code&gt;const&lt;/code&gt; 에 대한 편안한 제약</target>
        </trans-unit>
        <trans-unit id="9815b94f028f1e8c53989319af091cc24620423b" translate="yes" xml:space="preserve">
          <source>Release all allocated memory</source>
          <target state="translated">할당 된 모든 메모리 해제</target>
        </trans-unit>
        <trans-unit id="da73e242e9ab0a435466a19472cdff51dac15489" translate="yes" xml:space="preserve">
          <source>Release operation</source>
          <target state="translated">릴리즈 조작</target>
        </trans-unit>
        <trans-unit id="e58453a35482a76c4a6c848eaa246de1ef9209c7" translate="yes" xml:space="preserve">
          <source>Release sequence</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1d1207cbd03d1b413657584c3395f5bd0ed2f5e" translate="yes" xml:space="preserve">
          <source>Release-Acquire ordering</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f39c9974a3cea1d56e06409a4e0aafdeca8e0911" translate="yes" xml:space="preserve">
          <source>Release-Consume ordering</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50f7ad8512ef3c92ae62b9f6e1ca2908a7fc66a7" translate="yes" xml:space="preserve">
          <source>Releases all allocated memory by calling the &lt;code&gt;deallocate&lt;/code&gt; function on the upstream memory resource as necessary.</source>
          <target state="translated">필요에 따라 업스트림 메모리 리소스 에서 &lt;code&gt;deallocate&lt;/code&gt; 기능을 호출하여 할당 된 모든 메모리를 해제 합니다.</target>
        </trans-unit>
        <trans-unit id="eae3a8fc2dc19ffd6b7cbef1c80b3dba482b060c" translate="yes" xml:space="preserve">
          <source>Releases all memory owned by this resource by calling the &lt;code&gt;deallocate&lt;/code&gt; function of the upstream memory resource as needed.</source>
          <target state="translated">필요에 따라 업스트림 메모리 리소스 의 &lt;code&gt;deallocate&lt;/code&gt; 기능을 호출하여이 리소스가 소유 한 모든 메모리를 해제 합니다.</target>
        </trans-unit>
        <trans-unit id="213778813372579eb02b4a920b3e0988d80a6dca" translate="yes" xml:space="preserve">
          <source>Releases any shared state. This means.</source>
          <target state="translated">공유 상태를 해제합니다. 이것은 의미합니다.</target>
        </trans-unit>
        <trans-unit id="4fb02a4330e8f3837855d7fdc7d3c3f0801bfff8" translate="yes" xml:space="preserve">
          <source>Releases the calling thread's ownership of the mutex and</source>
          <target state="translated">호출 스레드의 뮤텍스 소유권을 해제하고</target>
        </trans-unit>
        <trans-unit id="8ca635067166e4da1016c9fc5113531d946c3230" translate="yes" xml:space="preserve">
          <source>Releases the held pointer. After the call &lt;code&gt;*this&lt;/code&gt; holds the null pointer.</source>
          <target state="translated">홀드 포인터를 해제합니다. 호출 후 &lt;code&gt;*this&lt;/code&gt; 널 포인터를 보유합니다.</target>
        </trans-unit>
        <trans-unit id="6deefee17f27ab11c5fc69b6e4b470cbda211d98" translate="yes" xml:space="preserve">
          <source>Releases the lock held by the execution agent. Throws no exceptions.</source>
          <target state="translated">실행 에이전트가 보유한 잠금을 해제합니다. 예외는 발생하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="dfb38798746934f262a3b8a9d8373bfb778503a2" translate="yes" xml:space="preserve">
          <source>Releases the mutex from shared ownership by the calling thread.</source>
          <target state="translated">호출 스레드가 공유 소유권에서 뮤텍스를 해제합니다.</target>
        </trans-unit>
        <trans-unit id="647da988abf58030cf2496242ac479daa8e306a1" translate="yes" xml:space="preserve">
          <source>Releases the ownership of the managed object if any. &lt;code&gt;&lt;a href=&quot;get&quot;&gt;get()&lt;/a&gt;&lt;/code&gt; returns &lt;code&gt;nullptr&lt;/code&gt; after the call.</source>
          <target state="translated">관리 대상 객체의 소유권을 해제합니다 (있는 경우). &lt;code&gt;&lt;a href=&quot;get&quot;&gt;get()&lt;/a&gt;&lt;/code&gt; 은 호출 후 &lt;code&gt;nullptr&lt;/code&gt; 을 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="2779702647127de53a1fd378df2e35adfa9ae518" translate="yes" xml:space="preserve">
          <source>Releases the ownership of the owned mutex.</source>
          <target state="translated">소유 한 뮤텍스의 소유권을 해제합니다.</target>
        </trans-unit>
        <trans-unit id="f27a2da706447f06f1eb6907007212ef9ca2d054" translate="yes" xml:space="preserve">
          <source>Releases the ownership of the owned mutexes.</source>
          <target state="translated">소유 한 뮤텍스의 소유권을 해제합니다.</target>
        </trans-unit>
        <trans-unit id="5ac79e9179b6d82d4e5f31ce43c1485c62961651" translate="yes" xml:space="preserve">
          <source>Releases the reference to the managed object. After the call &lt;code&gt;*this&lt;/code&gt; manages no object.</source>
          <target state="translated">관리 객체에 대한 참조를 해제합니다. 호출 후 &lt;code&gt;*this&lt;/code&gt; 객체를 관리하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="d7020f448aaf8aacc8b4d63537e375e865fff9d8" translate="yes" xml:space="preserve">
          <source>Remarks</source>
          <target state="translated">Remarks</target>
        </trans-unit>
        <trans-unit id="97ac05d3ac2bbfa1017829af6bb1a1d9a399e202" translate="yes" xml:space="preserve">
          <source>Removes a single generic-format filename component (as returned by &lt;a href=&quot;filename&quot;&gt;&lt;code&gt;filename&lt;/code&gt;&lt;/a&gt;) from the given generic-format path.</source>
          <target state="translated">주어진 일반 형식 경로에서 단일 일반 형식 파일 이름 구성 요소 ( &lt;a href=&quot;filename&quot;&gt; &lt;code&gt;filename&lt;/code&gt; &lt;/a&gt; 에서 반환 )를 제거합니다.</target>
        </trans-unit>
        <trans-unit id="2f2b04707c98afe8aea846d5b8301c1a3bd172ed" translate="yes" xml:space="preserve">
          <source>Removes all</source>
          <target state="translated">모두 제거</target>
        </trans-unit>
        <trans-unit id="4f8de84cab405093266028614412ac4a5b9c8965" translate="yes" xml:space="preserve">
          <source>Removes all characters from the string as if by executing &lt;code&gt;erase(begin(), end())&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;erase(begin(), end())&lt;/code&gt; 를 실행하여 문자열에서 모든 문자를 제거합니다 .</target>
        </trans-unit>
        <trans-unit id="635f870858042a8684a038907c9cf636a6a15c21" translate="yes" xml:space="preserve">
          <source>Removes all elements satisfying specific criteria from the range &lt;code&gt;[first, last)&lt;/code&gt; and returns a past-the-end iterator for the new end of the range.</source>
          <target state="translated">&lt;code&gt;[first, last)&lt;/code&gt; 범위에서 특정 기준을 만족하는 모든 요소를 ​​제거하고 범위 의 새 끝에 대한 과거 반복기를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="cb250410dcae3a3e23c63fcc076af1a3294aa768" translate="yes" xml:space="preserve">
          <source>Removes all elements satisfying specific criteria. The first version removes all elements that are equal to &lt;code&gt;value&lt;/code&gt;, the second version removes all elements for which predicate &lt;code&gt;p&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">특정 기준을 만족하는 모든 요소를 ​​제거합니다. 첫 번째 버전은 &lt;code&gt;value&lt;/code&gt; 와 동일한 모든 요소를 ​​제거하고 두 번째 버전은 술어 &lt;code&gt;p&lt;/code&gt; 가 &lt;code&gt;true&lt;/code&gt; 를 반환 하는 모든 요소를 ​​제거 합니다 .</target>
        </trans-unit>
        <trans-unit id="340d677d50a5e88d981737c6031356c74a6ef8d5" translate="yes" xml:space="preserve">
          <source>Removes an element from the front of the queue. Effectively calls &lt;code&gt;c.pop_front()&lt;/code&gt;.</source>
          <target state="translated">큐의 앞면에서 요소를 제거합니다. 효과적으로 &lt;code&gt;c.pop_front()&lt;/code&gt; 호출합니다 .</target>
        </trans-unit>
        <trans-unit id="a15448364f167fb0857196da13fae2493a7d7eec" translate="yes" xml:space="preserve">
          <source>Removes specified characters from the string.</source>
          <target state="translated">문자열에서 지정된 문자를 제거합니다.</target>
        </trans-unit>
        <trans-unit id="47c4dc3b9295eb94760fc911ffa31f4a7600ee2c" translate="yes" xml:space="preserve">
          <source>Removes specified elements from the container.</source>
          <target state="translated">컨테이너에서 지정된 요소를 제거합니다.</target>
        </trans-unit>
        <trans-unit id="b04a532fae552b85b1592806b7712d100dd19a5a" translate="yes" xml:space="preserve">
          <source>Removes the first element of the container. If there are no elements in the container, the behavior is undefined.</source>
          <target state="translated">컨테이너의 첫 번째 요소를 제거합니다. 컨테이너에 요소가 없으면 동작이 정의되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="564482467dd499ff8f0906819cd9fd4e71217330" translate="yes" xml:space="preserve">
          <source>Removes the last character from the string.</source>
          <target state="translated">문자열에서 마지막 문자를 제거합니다.</target>
        </trans-unit>
        <trans-unit id="f35fe59c743e7cc9f3907f410c3d5e865b8ff585" translate="yes" xml:space="preserve">
          <source>Removes the last element of the container.</source>
          <target state="translated">컨테이너의 마지막 요소를 제거합니다.</target>
        </trans-unit>
        <trans-unit id="498bb16c978d9d423aa797edb6da8c2f91d6582e" translate="yes" xml:space="preserve">
          <source>Removes the reachable status of the object, referenced by the pointer &lt;code&gt;p&lt;/code&gt;, if it was previously set by &lt;code&gt;&lt;a href=&quot;declare_reachable&quot;&gt;std::declare_reachable&lt;/a&gt;&lt;/code&gt;. If the object was declared reachable multiple times, equal number of calls to &lt;code&gt;undeclare_reachable&lt;/code&gt; would be needed to remove this status. Once the object is not declared reachable and has no pointers referencing it, it may be reclaimed by garbage collector or reported as a leak by a leak detector.</source>
          <target state="translated">이전에 &lt;code&gt;&lt;a href=&quot;declare_reachable&quot;&gt;std::declare_reachable&lt;/a&gt;&lt;/code&gt; 설정 한 경우 포인터 &lt;code&gt;p&lt;/code&gt; 로 참조되는 오브젝트의 도달 가능한 상태를 제거합니다 . 객체가 여러 번 도달 할 수 있다고 선언 된 경우이 상태를 제거 하려면 &lt;code&gt;undeclare_reachable&lt;/code&gt; 에 대한 동일한 횟수의 호출 이 필요합니다. 객체가 도달 가능하다고 선언되지 않고이를 참조하는 포인터가 없으면 가비지 수집기에서 회수하거나 누출 감지기에 의해 누출로보고 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b457efca2472c9cbdf821df9e9a582d31c870ce3" translate="yes" xml:space="preserve">
          <source>Removes the top element from the priority queue. Effectively calls &lt;code&gt;&lt;a href=&quot;../../algorithm/pop_heap&quot;&gt;std::pop_heap&lt;/a&gt;(c.begin(), c.end(), comp); c.pop_back();&lt;/code&gt;</source>
          <target state="translated">우선 순위 큐에서 맨 위 요소를 제거합니다. 효과적으로 &lt;code&gt;&lt;a href=&quot;../../algorithm/pop_heap&quot;&gt;std::pop_heap&lt;/a&gt;(c.begin(), c.end(), comp); c.pop_back();&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e22143efe77b6d5c03cfdaeae00a3e48ce4fa7c3" translate="yes" xml:space="preserve">
          <source>Removes the top element from the stack. Effectively calls &lt;code&gt;c.pop_back()&lt;/code&gt;.</source>
          <target state="translated">스택에서 상단 요소를 제거합니다. 효과적으로 &lt;code&gt;c.pop_back()&lt;/code&gt; 호출합니다 .</target>
        </trans-unit>
        <trans-unit id="8117ca41e1d1b6fbb693ddfee59c7dd1a6f1c20b" translate="yes" xml:space="preserve">
          <source>Removing const/volatile from &lt;code&gt;const volatile int *&lt;/code&gt; does not modify the type, because the pointer itself is neither const nor volatile.</source>
          <target state="translated">&lt;code&gt;const volatile int *&lt;/code&gt; 에서 const / volatile을 제거 하면 포인터 자체가 const이거나 휘발성이 아니기 때문에 유형이 수정되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="ff836fccf669f3ed03101955601d31883f3f5608" translate="yes" xml:space="preserve">
          <source>Removing is done by shifting (by means of move assignment) the elements in the range in such a way that the elements that are not to be removed appear in the beginning of the range. Relative order of the elements that remain is preserved and the</source>
          <target state="translated">제거하지 않을 요소가 범위의 시작 부분에 나타나는 방식으로 범위의 요소를 이동 (이동 할당을 통해)하여 제거합니다. 남아있는 요소의 상대적 순서가 유지되고</target>
        </trans-unit>
        <trans-unit id="507ee4f64bdbc422b60c6b4d5e5b36bb5d2d8ac4" translate="yes" xml:space="preserve">
          <source>Removing is done by shifting the elements in the range in such a way that elements to be erased are overwritten. Relative order of the elements that remain is preserved and the</source>
          <target state="translated">제거 할 요소를 덮어 쓰는 방식으로 범위 내의 요소를 이동하여 제거합니다. 남아있는 요소의 상대적 순서가 유지되고</target>
        </trans-unit>
        <trans-unit id="66c9c4c7ff544773710c0a5efab3a0ecd1d8bbec" translate="yes" xml:space="preserve">
          <source>Rename &lt;code&gt;shared_mutex&lt;/code&gt; to &lt;code&gt;&lt;a href=&quot;thread/shared_timed_mutex&quot;&gt;shared_timed_mutex&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;shared_mutex&lt;/code&gt; 를 &lt;code&gt;&lt;a href=&quot;thread/shared_timed_mutex&quot;&gt;shared_timed_mutex&lt;/a&gt;&lt;/code&gt; 로 이름 을 바꿉니다.</target>
        </trans-unit>
        <trans-unit id="d904a43e3041cecabf55b02ef9c2bf93ff1d2055" translate="yes" xml:space="preserve">
          <source>Rename fails if.</source>
          <target state="translated">이름이 바뀌면 실패합니다.</target>
        </trans-unit>
        <trans-unit id="ced9a8bd86a9ec2b8206f92e8e66797e18d67a46" translate="yes" xml:space="preserve">
          <source>Renders the entire program meaningless if certain rules of the language are violated.</source>
          <target state="translated">특정 언어 규칙을 위반하면 전체 프로그램을 의미가 없게 만듭니다.</target>
        </trans-unit>
        <trans-unit id="e850548abc9c832eb91f2efcf13f90104fe81565" translate="yes" xml:space="preserve">
          <source>Reorders the elements in the given range &lt;code&gt;[first, last)&lt;/code&gt; such that each possible permutation of those elements has equal probability of appearance.</source>
          <target state="translated">주어진 범위의 요소를 &lt;code&gt;[first, last)&lt;/code&gt; 순서로 재정렬하여 해당 요소의 각 가능한 순열이 동일한 출현 확률을 갖도록합니다.</target>
        </trans-unit>
        <trans-unit id="91c2de576f962d7363fec8d9784d3ecc380e6c4d" translate="yes" xml:space="preserve">
          <source>Replace the existing file</source>
          <target state="translated">기존 파일 교체</target>
        </trans-unit>
        <trans-unit id="2fcae0ca3b5c5437d4e2ef57e50493a2ccc6aa1f" translate="yes" xml:space="preserve">
          <source>Replace the existing file only if it is older than the file being copied</source>
          <target state="translated">기존 파일이 복사중인 파일보다 오래된 경우에만 교체하십시오.</target>
        </trans-unit>
        <trans-unit id="2a745201834920e7f0ed91d93aed5716b56c5855" translate="yes" xml:space="preserve">
          <source>Replaces a single filename component with &lt;code&gt;replacement&lt;/code&gt;.</source>
          <target state="translated">단일 파일 이름 구성 요소를 &lt;code&gt;replacement&lt;/code&gt; 로 바꿉니다 .</target>
        </trans-unit>
        <trans-unit id="618b75fbb8942f1eaf7115630d64df9f681dcba8" translate="yes" xml:space="preserve">
          <source>Replaces all elements satisfying specific criteria with &lt;code&gt;new_value&lt;/code&gt; in the range &lt;code&gt;[first, last)&lt;/code&gt;.</source>
          <target state="translated">특정 기준을 만족하는 모든 요소를 &lt;code&gt;[first, last)&lt;/code&gt; 범위의 &lt;code&gt;new_value&lt;/code&gt; 로 바꿉니다 . .</target>
        </trans-unit>
        <trans-unit id="28c58f294cc35422ed916a63badc0cf40eaa6ad9" translate="yes" xml:space="preserve">
          <source>Replaces contents of &lt;code&gt;*this&lt;/code&gt; with the contents of &lt;code&gt;other&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;*this&lt;/code&gt; 의 내용을 &lt;code&gt;other&lt;/code&gt; 내용으로 대체 .</target>
        </trans-unit>
        <trans-unit id="d4529fd126edacf175b34afaf9e56b1a90587849" translate="yes" xml:space="preserve">
          <source>Replaces elements in &lt;code&gt;a&lt;/code&gt; with &lt;code&gt;n&lt;/code&gt; copies of &lt;code&gt;t&lt;/code&gt;</source>
          <target state="translated">요소의 대체한다 와 &lt;code&gt;n&lt;/code&gt; 사본 &lt;code&gt;t&lt;/code&gt; &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="88b59c52f891daf09842eefd7a9ad71b18734ea7" translate="yes" xml:space="preserve">
          <source>Replaces elements in a with a copy of &lt;code&gt;[i, j)&lt;/code&gt;</source>
          <target state="translated">a의 요소를 &lt;code&gt;[i, j)&lt;/code&gt; 의 사본으로 대체</target>
        </trans-unit>
        <trans-unit id="8e672f4bbf61cf149c372b799e4128eed20f1760" translate="yes" xml:space="preserve">
          <source>Replaces the contents of the container adaptor with those of &lt;code&gt;other&lt;/code&gt;.</source>
          <target state="translated">컨테이너 어댑터의 내용을 &lt;code&gt;other&lt;/code&gt; 내용으로 바꿉니다 .</target>
        </trans-unit>
        <trans-unit id="69183af5908f3d3232ddc98f83f335544cdff8e7" translate="yes" xml:space="preserve">
          <source>Replaces the contents of the container.</source>
          <target state="translated">컨테이너의 내용을 바꿉니다.</target>
        </trans-unit>
        <trans-unit id="f18aaab9db971281746cef0cbfd3d29cfd35cd3e" translate="yes" xml:space="preserve">
          <source>Replaces the contents of the directory entry (path and cached attributes, if any) with the contents of &lt;code&gt;other&lt;/code&gt;.</source>
          <target state="translated">디렉토리 항목의 내용 (경로 및 캐시 된 속성이있는 경우)을 &lt;code&gt;other&lt;/code&gt; 의 내용으로 바꿉니다 .</target>
        </trans-unit>
        <trans-unit id="b6abfb604d4532bdf5831c7d99c6e519993fa303" translate="yes" xml:space="preserve">
          <source>Replaces the contents of the numeric array.</source>
          <target state="translated">숫자 형 배열의 내용을 바꿉니다.</target>
        </trans-unit>
        <trans-unit id="91b6f6a42695be27f44fe7bdfdbbf26f1752e3cb" translate="yes" xml:space="preserve">
          <source>Replaces the contents of the pair.</source>
          <target state="translated">쌍의 내용을 바꿉니다.</target>
        </trans-unit>
        <trans-unit id="8a03ca57ce87f56830afb992813b381d5a7a864e" translate="yes" xml:space="preserve">
          <source>Replaces the contents of the string.</source>
          <target state="translated">문자열의 내용을 바꿉니다.</target>
        </trans-unit>
        <trans-unit id="b45dcfc5aa55d54c1510d9d3cf4baf069f1ca787" translate="yes" xml:space="preserve">
          <source>Replaces the contents of the tuple with the contents of another tuple or a pair.</source>
          <target state="translated">튜플의 내용을 다른 튜플 또는 쌍의 내용으로 바꿉니다.</target>
        </trans-unit>
        <trans-unit id="2b1ab2c8c43bc7d2408fabb4754e968c4315a020" translate="yes" xml:space="preserve">
          <source>Replaces the contents to the &lt;code&gt;path&lt;/code&gt; object by a new pathname constructed from the given character sequence.</source>
          <target state="translated">지정된 문자 순서로 구성된 새 경로 이름으로 &lt;code&gt;path&lt;/code&gt; 객체 의 내용을 바꿉니다 .</target>
        </trans-unit>
        <trans-unit id="879df88886f1831ef0fd436593adabf5a6d9745e" translate="yes" xml:space="preserve">
          <source>Replaces the contents with error code &lt;code&gt;ec&lt;/code&gt; and corresponding category &lt;code&gt;ecat&lt;/code&gt;.</source>
          <target state="translated">내용을 오류 코드 &lt;code&gt;ec&lt;/code&gt; 및 해당 범주 &lt;code&gt;ecat&lt;/code&gt; 으로 바꿉니다. .</target>
        </trans-unit>
        <trans-unit id="4e832b2ff4b35c356c64f745bf9b528ef6c88dba" translate="yes" xml:space="preserve">
          <source>Replaces the current locale with &lt;code&gt;loc&lt;/code&gt;. The regular expression does not match any character sequence after the call.</source>
          <target state="translated">현재 로케일을 &lt;code&gt;loc&lt;/code&gt; 로 바꿉니다 . 정규식은 호출 후 문자 순서와 일치하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="9b3d68e2fcbde1639e676dc9fd1422ad8af45393" translate="yes" xml:space="preserve">
          <source>Replaces the current locale with a copy of &lt;code&gt;loc&lt;/code&gt;. If &lt;code&gt;loc&lt;/code&gt; is different than the current locale, then all cached data is invalidated.</source>
          <target state="translated">현재 로케일을 &lt;code&gt;loc&lt;/code&gt; 사본으로 바꿉니다 . 경우 &lt;code&gt;loc&lt;/code&gt; 현재 로케일과 다른, 모든 캐시 된 데이터는 무효화된다.</target>
        </trans-unit>
        <trans-unit id="5ad0a36d2199bb51b34b7ca2c6b0137b44f39688" translate="yes" xml:space="preserve">
          <source>Replaces the current locale. Effectively calls &lt;code&gt;ios_base::imbue(loc)&lt;/code&gt; and if there is an associated stream buffer (&lt;code&gt;rdbuf() != 0&lt;/code&gt;), then calls &lt;code&gt;rdbuf()-&amp;gt;pubimbue(loc)&lt;/code&gt;.</source>
          <target state="translated">현재 로캘을 바꿉니다. 효과적으로 &lt;code&gt;ios_base::imbue(loc)&lt;/code&gt; 호출 하고 연관된 스트림 버퍼 ( &lt;code&gt;rdbuf() != 0&lt;/code&gt; )가 &lt;code&gt;rdbuf()-&amp;gt;pubimbue(loc)&lt;/code&gt; 를 호출합니다 .</target>
        </trans-unit>
        <trans-unit id="bf71578af88666026ac7fc84f244d2f566590499" translate="yes" xml:space="preserve">
          <source>Replaces the current state with that of &lt;code&gt;other&lt;/code&gt;, except for the associated &lt;code&gt;rdbuf&lt;/code&gt;. &lt;code&gt;other&lt;/code&gt; is in valid, but unspecified state after the call. After the call to this function, &lt;code&gt;&lt;a href=&quot;rdbuf&quot;&gt;rdbuf()&lt;/a&gt;&lt;/code&gt; returns &lt;code&gt;&lt;a href=&quot;../../types/null&quot;&gt;NULL&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;other.rdbuf()&lt;/code&gt; returns the same value as before the call, and &lt;code&gt;other.tie()&lt;/code&gt; returns 0.</source>
          <target state="translated">관련 &lt;code&gt;rdbuf&lt;/code&gt; 를 제외하고 현재 상태를 &lt;code&gt;other&lt;/code&gt; 상태로 바꿉니다 . &lt;code&gt;other&lt;/code&gt; 것은 호출 후 유효하지만 지정되지 않은 상태입니다. 이 함수 호출, 후 &lt;code&gt;&lt;a href=&quot;rdbuf&quot;&gt;rdbuf()&lt;/a&gt;&lt;/code&gt; 를 반환 &lt;code&gt;&lt;a href=&quot;../../types/null&quot;&gt;NULL&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;other.rdbuf()&lt;/code&gt; 호출 전과 동일한 값을 반환하고 &lt;code&gt;other.tie()&lt;/code&gt; 0을 반환한다.</target>
        </trans-unit>
        <trans-unit id="b8cc7fdc951d51928bb13da79534541221260e5f" translate="yes" xml:space="preserve">
          <source>Replaces the error code and corresponding category with those representing error code enum &lt;code&gt;e&lt;/code&gt;.</source>
          <target state="translated">오류 코드와 해당 범주를 오류 코드 열거 형 &lt;code&gt;e&lt;/code&gt; 를 나타내는 범주로 바꿉니다 .</target>
        </trans-unit>
        <trans-unit id="3df13328907d77fff1515cc923a70d9b3709895e" translate="yes" xml:space="preserve">
          <source>Replaces the error code and error category with default values.</source>
          <target state="translated">오류 코드 및 오류 범주를 기본값으로 바꿉니다.</target>
        </trans-unit>
        <trans-unit id="d13ab2ad9ca24939426bd7daa47ad3816bd3a16a" translate="yes" xml:space="preserve">
          <source>Replaces the extension with &lt;code&gt;replacement&lt;/code&gt; or removes it when the default value of &lt;code&gt;replacement&lt;/code&gt; is used.</source>
          <target state="translated">확장을 &lt;code&gt;replacement&lt;/code&gt; 로 바꾸 거나 기본값 인 &lt;code&gt;replacement&lt;/code&gt; 가 사용될 때 제거합니다 .</target>
        </trans-unit>
        <trans-unit id="19946cf14751cea8eea56057d66e77e8cdeb23a9" translate="yes" xml:space="preserve">
          <source>Replaces the global C++ locale with &lt;code&gt;loc&lt;/code&gt;, which means all future calls to the &lt;code&gt;&lt;a href=&quot;../locale&quot;&gt;std::locale&lt;/a&gt;&lt;/code&gt; default constructor will now return a copy of &lt;code&gt;loc&lt;/code&gt;. If &lt;code&gt;loc&lt;/code&gt; has a name, also replaces the C locale as if by &lt;code&gt;&lt;a href=&quot;../setlocale&quot;&gt;std::setlocale&lt;/a&gt;(&lt;a href=&quot;../lc_categories&quot;&gt;LC_ALL&lt;/a&gt;, loc.name().c_str());&lt;/code&gt;. This function is the only way to modify the global C++ locale, which is otherwise equivalent to &lt;code&gt;&lt;a href=&quot;classic&quot;&gt;std::locale::classic&lt;/a&gt;()&lt;/code&gt; at program startup.</source>
          <target state="translated">전역 C ++ 로케일을 &lt;code&gt;loc&lt;/code&gt; 로 대체합니다. 이는 향후 &lt;code&gt;&lt;a href=&quot;../locale&quot;&gt;std::locale&lt;/a&gt;&lt;/code&gt; 기본 생성자 에 대한 모든 호출 이 &lt;code&gt;loc&lt;/code&gt; 사본을 리턴 함을 의미합니다 . 경우 &lt;code&gt;loc&lt;/code&gt; 이름을 가지고, 또한 C 로케일을 대체하는 경우와 같은 &lt;code&gt;&lt;a href=&quot;../setlocale&quot;&gt;std::setlocale&lt;/a&gt;(&lt;a href=&quot;../lc_categories&quot;&gt;LC_ALL&lt;/a&gt;, loc.name().c_str());&lt;/code&gt; . 이 함수는 글로벌 C ++ 로케일을 수정하는 유일한 방법입니다. 그렇지 않으면 프로그램 시작시 &lt;code&gt;&lt;a href=&quot;classic&quot;&gt;std::locale::classic&lt;/a&gt;()&lt;/code&gt; 과 같습니다 .</target>
        </trans-unit>
        <trans-unit id="4c99fb8b37e96440a75eee4eab903d9e80d42a8a" translate="yes" xml:space="preserve">
          <source>Replaces the held pointer by &lt;code&gt;p&lt;/code&gt;. If the currently held pointer is not null pointer, &lt;code&gt;delete get()&lt;/code&gt; is called.</source>
          <target state="translated">보류 포인터를 &lt;code&gt;p&lt;/code&gt; 로 바꿉니다 . 현재 보유 된 포인터가 널 포인터가 아닌 경우, &lt;code&gt;delete get()&lt;/code&gt; 가 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="880ee0939fff5ffaeeb6663d37ef7aebbcd7cf8b" translate="yes" xml:space="preserve">
          <source>Replaces the managed object with an object pointed to by &lt;code&gt;ptr&lt;/code&gt;. Optional deleter &lt;code&gt;d&lt;/code&gt; can be supplied, which is later used to destroy the new object when no &lt;code&gt;shared_ptr&lt;/code&gt; objects own it. By default, &lt;a href=&quot;../../language/delete&quot;&gt;&lt;code&gt;delete&lt;/code&gt;&lt;/a&gt; expression is used as deleter. Proper &lt;a href=&quot;../../language/delete&quot;&gt;&lt;code&gt;delete&lt;/code&gt;&lt;/a&gt; expression corresponding to the supplied type is always selected, this is the reason why the function is implemented as template using a separate parameter &lt;code&gt;Y&lt;/code&gt;.</source>
          <target state="translated">관리 객체를 &lt;code&gt;ptr&lt;/code&gt; 이 가리키는 객체로 바꿉니다 . 선택적 deleter &lt;code&gt;d&lt;/code&gt; 를 제공 할 수 있으며, 이는 &lt;code&gt;shared_ptr&lt;/code&gt; 오브젝트가 소유 하지 않을 때 새 오브젝트를 제거하는 데 사용됩니다 . 기본적으로 &lt;a href=&quot;../../language/delete&quot;&gt; &lt;code&gt;delete&lt;/code&gt; &lt;/a&gt; 표현식이 삭제 자로 사용됩니다. 제공된 유형에 해당하는 적절한 &lt;a href=&quot;../../language/delete&quot;&gt; &lt;code&gt;delete&lt;/code&gt; &lt;/a&gt; 표현식이 항상 선택되므로 함수가 별도의 매개 변수 &lt;code&gt;Y&lt;/code&gt; 를 사용하여 템플리트로 구현되는 이유 입니다.</target>
        </trans-unit>
        <trans-unit id="a3ad70d6f6d2a9d87751802fe1734672dbbf2331" translate="yes" xml:space="preserve">
          <source>Replaces the managed object with the one managed by &lt;code&gt;r&lt;/code&gt;.</source>
          <target state="translated">관리 대상 개체를 &lt;code&gt;r&lt;/code&gt; 이 관리하는 대상으로 바꿉니다 .</target>
        </trans-unit>
        <trans-unit id="8b174c8f75780af2fc57dc67054c1dcf54482d7a" translate="yes" xml:space="preserve">
          <source>Replaces the managed object with the one managed by &lt;code&gt;r&lt;/code&gt;. The object is shared with &lt;code&gt;r&lt;/code&gt;. If &lt;code&gt;r&lt;/code&gt; manages no object, &lt;code&gt;*this&lt;/code&gt; manages no object too.</source>
          <target state="translated">관리 대상 개체를 &lt;code&gt;r&lt;/code&gt; 이 관리하는 대상으로 바꿉니다 . 객체는 &lt;code&gt;r&lt;/code&gt; 과 공유됩니다 . &lt;code&gt;r&lt;/code&gt; &lt;code&gt;*this&lt;/code&gt; 오브젝트를 관리하지 않으면 *이 오브젝트도 관리하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="bd87b22f9ce93d0be18341b6951a15999f5258a7" translate="yes" xml:space="preserve">
          <source>Replaces the managed object.</source>
          <target state="translated">관리 대상 객체를 교체합니다.</target>
        </trans-unit>
        <trans-unit id="ef191bf8ac75bdbda1c674ae7110deffb4baef6a" translate="yes" xml:space="preserve">
          <source>Replaces the part of the string indicated by either &lt;code&gt;[pos, pos + count)&lt;/code&gt; or &lt;code&gt;[first, last)&lt;/code&gt; with a new string.</source>
          <target state="translated">&lt;code&gt;[pos, pos + count)&lt;/code&gt; 또는 &lt;code&gt;[first, last)&lt;/code&gt; 로 표시된 문자열 부분을 새 문자열로 바꿉니다 .</target>
        </trans-unit>
        <trans-unit id="6da92aa24c946dcc754df898d6149645914780cf" translate="yes" xml:space="preserve">
          <source>Replaces the stored exception with the one held in &lt;code&gt;other&lt;/code&gt;.</source>
          <target state="translated">저장된 예외를 &lt;code&gt;other&lt;/code&gt; 예외로 대체합니다 .</target>
        </trans-unit>
        <trans-unit id="18f1255d0adbb4064f0af1c9ee7a19f687e1dd7b" translate="yes" xml:space="preserve">
          <source>Replaces the value of &lt;code&gt;obj&lt;/code&gt; with &lt;code&gt;new_value&lt;/code&gt; and returns the old value of &lt;code&gt;obj&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;obj&lt;/code&gt; 값을 &lt;code&gt;new_value&lt;/code&gt; 로 바꾸고 이전 값 &lt;code&gt;obj&lt;/code&gt; 를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="2200b44f26713f435344f02925e6087bf00c1e25" translate="yes" xml:space="preserve">
          <source>Replaces the view with that of &lt;code&gt;view&lt;/code&gt;.</source>
          <target state="translated">그와 함께보기 대체 &lt;code&gt;view&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d54f3dfed1488935d7c52054cea01eb56aeaf7df" translate="yes" xml:space="preserve">
          <source>Replacing text macros</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de5576ae0077415670fba38b4e973f9219df5aae" translate="yes" xml:space="preserve">
          <source>Report an error (default behavior)</source>
          <target state="translated">오류보고 (기본 동작)</target>
        </trans-unit>
        <trans-unit id="cc21b7fcd2210c11c9de0b884b8af20aeb6375df" translate="yes" xml:space="preserve">
          <source>Reports the maximum allocation size supported by the outer allocator, by calling &lt;code&gt;&lt;a href=&quot;../allocator_traits&quot;&gt;std::allocator_traits&lt;/a&gt;&amp;lt;OuterAlloc&amp;gt;::max_size(outer_allocator())&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../allocator_traits&quot;&gt;std::allocator_traits&lt;/a&gt;&amp;lt;OuterAlloc&amp;gt;::max_size(outer_allocator())&lt;/code&gt; 를 호출하여 외부 할당자가 지원하는 최대 할당 크기를보고합니다 .</target>
        </trans-unit>
        <trans-unit id="11a42e54adfed88e2edfe70efda28bbed8a216cc" translate="yes" xml:space="preserve">
          <source>Repositions &lt;code&gt;&lt;a href=&quot;../basic_streambuf/gptr&quot;&gt;std::basic_streambuf::gptr&lt;/a&gt;&lt;/code&gt; and/or &lt;code&gt;&lt;a href=&quot;../basic_streambuf/pptr&quot;&gt;std::basic_streambuf::pptr&lt;/a&gt;&lt;/code&gt;, if possible, to the position indicated by &lt;code&gt;sp&lt;/code&gt;.</source>
          <target state="translated">재배치 &lt;code&gt;&lt;a href=&quot;../basic_streambuf/gptr&quot;&gt;std::basic_streambuf::gptr&lt;/a&gt;&lt;/code&gt; 및 / 또는 &lt;code&gt;&lt;a href=&quot;../basic_streambuf/pptr&quot;&gt;std::basic_streambuf::pptr&lt;/a&gt;&lt;/code&gt; 의 위치에 의해 표시 가능한 경우에 &lt;code&gt;sp&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e83fc3ab42798d2a8c07af47feff66646b3866f2" translate="yes" xml:space="preserve">
          <source>Repositions &lt;code&gt;&lt;a href=&quot;../basic_streambuf/gptr&quot;&gt;std::basic_streambuf::gptr&lt;/a&gt;&lt;/code&gt; and/or &lt;code&gt;&lt;a href=&quot;../basic_streambuf/pptr&quot;&gt;std::basic_streambuf::pptr&lt;/a&gt;&lt;/code&gt;, if possible, to the position that corresponds to exactly &lt;code&gt;off&lt;/code&gt; characters from beginning, end, or current position of the get and/or put area of the buffer.</source>
          <target state="translated">재배치 &lt;code&gt;&lt;a href=&quot;../basic_streambuf/gptr&quot;&gt;std::basic_streambuf::gptr&lt;/a&gt;&lt;/code&gt; 및 / 또는 &lt;code&gt;&lt;a href=&quot;../basic_streambuf/pptr&quot;&gt;std::basic_streambuf::pptr&lt;/a&gt;&lt;/code&gt; , 가능하다면, 위치에 해당 정확히에 해당 &lt;code&gt;off&lt;/code&gt; , 시작 종료, 또는 버퍼의 GET 및 / 또는 풋 영역의 현재 위치의 문자 .</target>
        </trans-unit>
        <trans-unit id="2ac0641425ccffae41678552c1163b00ffe67ff9" translate="yes" xml:space="preserve">
          <source>Repositions the</source>
          <target state="translated">재배치</target>
        </trans-unit>
        <trans-unit id="052fd56b4ead08eb06f7c5d41c83db7837c358cc" translate="yes" xml:space="preserve">
          <source>Repositions the file pointer, if possible, to the position indicated by &lt;code&gt;sp&lt;/code&gt;.</source>
          <target state="translated">가능한 경우 파일 포인터를 &lt;code&gt;sp&lt;/code&gt; 로 표시된 위치로 재배치합니다 .</target>
        </trans-unit>
        <trans-unit id="9b11325c2589354702e1662a98ad6fbe9e6883d0" translate="yes" xml:space="preserve">
          <source>Repositions the file pointer, if possible, to the position that corresponds to exactly &lt;code&gt;off&lt;/code&gt; characters from beginning, end, or current position of the file (depending on the value of &lt;code&gt;dir&lt;/code&gt;.</source>
          <target state="translated">가능한 경우 파일 포인터를 파일의 시작, 끝 또는 현재 위치에서 정확히 &lt;code&gt;off&lt;/code&gt; 문자에 해당하는 위치 ( &lt;code&gt;dir&lt;/code&gt; 의 값에 따라 다름)로 재배치합니다 .</target>
        </trans-unit>
        <trans-unit id="360bc539904b3901915f57b0aead8cb40373f0de" translate="yes" xml:space="preserve">
          <source>Representation</source>
          <target state="translated">Representation</target>
        </trans-unit>
        <trans-unit id="60cf7479969284de43e3ef3c900c3f40f5d8f1c3" translate="yes" xml:space="preserve">
          <source>Represents a character classification and is capable of holding an implementation specific set returned by &lt;code&gt;lookup_classname&lt;/code&gt;. Must be a &lt;a href=&quot;../named_req/bitmasktype&quot;&gt;BitmaskType&lt;/a&gt;.</source>
          <target state="translated">문자 분류를 &lt;code&gt;lookup_classname&lt;/code&gt; 리턴 한 구현 특정 세트를 보유 할 수 있습니다. &lt;a href=&quot;../named_req/bitmasktype&quot;&gt;BitmaskType&lt;/a&gt; 이어야합니다 .</target>
        </trans-unit>
        <trans-unit id="8b98478a419a269d4c5494e0c4ad4b363b5cf1f3" translate="yes" xml:space="preserve">
          <source>Represents a directory entry. The object stores a &lt;code&gt;path&lt;/code&gt; as a member and may also store additional file attributes (hard link count, status, symlink status file size, and last write time) during directory iteration.</source>
          <target state="translated">디렉토리 엔트리를 나타냅니다. 객체는 &lt;code&gt;path&lt;/code&gt; 를 멤버로 저장하고 디렉토리 반복 중 추가 파일 속성 (하드 링크 수, 상태, 심볼릭 링크 상태 파일 크기 및 마지막 쓰기 시간)을 저장할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="2847d1283befde0d8bfb244e99658270d8ac8791" translate="yes" xml:space="preserve">
          <source>Represents file time.</source>
          <target state="translated">파일 시간을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="ebc6169d1804307dba7baec52c117c7460669ebf" translate="yes" xml:space="preserve">
          <source>Represents the filesystem information as determined by &lt;a href=&quot;space&quot;&gt;space&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;space&quot;&gt;공간에&lt;/a&gt; 의해 결정된 파일 시스템 정보를 나타 냅니다.</target>
        </trans-unit>
        <trans-unit id="d008bdf0f0d206235df435983aa3e7528e62afda" translate="yes" xml:space="preserve">
          <source>Requests the removal of unused capacity.</source>
          <target state="translated">사용되지 않은 용량 제거를 요청합니다.</target>
        </trans-unit>
        <trans-unit id="09a428f93ec07a73d726f8bd037ecacfaaf8b044" translate="yes" xml:space="preserve">
          <source>Requirements</source>
          <target state="translated">Requirements</target>
        </trans-unit>
        <trans-unit id="0d8f3993addaf8e899b3c59e63854cff7e0eb7d1" translate="yes" xml:space="preserve">
          <source>Requirements may refer to the template parameters that are in scope, to the local parameters introduced in the parameter-list, and to any other declarations that are visible from the enclosing context.</source>
          <target state="translated">요구 사항은 범위에있는 템플릿 매개 변수, 매개 변수 목록에 도입 된 로컬 매개 변수 및 엔 클로징 컨텍스트에서 볼 수있는 다른 선언을 참조 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="07bdc031513dce1fb2a64d8eb7bcb9daa882171f" translate="yes" xml:space="preserve">
          <source>Requirements on &lt;a href=&quot;index&quot;&gt;standard library headers&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;index&quot;&gt;표준 라이브러리 헤더&lt;/a&gt; 에 대한 요구 사항</target>
        </trans-unit>
        <trans-unit id="1f8dbc12b297c32f580a44ea38a02ec009a78fea" translate="yes" xml:space="preserve">
          <source>Requirements on &lt;a href=&quot;language/memory_model&quot;&gt;multi-threaded executions and data races&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;language/memory_model&quot;&gt;멀티 스레드 실행 및 데이터 레이스&lt;/a&gt; 에 대한 요구 사항</target>
        </trans-unit>
        <trans-unit id="81a161b98b768be8dd2aa59a15736e9e78710e77" translate="yes" xml:space="preserve">
          <source>Requirements on the &lt;a href=&quot;language/main_function&quot;&gt;&lt;code&gt;main&lt;/code&gt;&lt;/a&gt; function</source>
          <target state="translated">&lt;a href=&quot;language/main_function&quot;&gt; &lt;code&gt;main&lt;/code&gt; &lt;/a&gt; 기능 에 대한 요구 사항</target>
        </trans-unit>
        <trans-unit id="63c2178c36666b52b538ae4daf84c57f71791918" translate="yes" xml:space="preserve">
          <source>Requires</source>
          <target state="translated">Requires</target>
        </trans-unit>
        <trans-unit id="41d4117b84f0b33be5f762a3de23b4514ac6a40a" translate="yes" xml:space="preserve">
          <source>Requires clauses</source>
          <target state="translated">필수 조항</target>
        </trans-unit>
        <trans-unit id="8652c4da3dc8061f0f50572e1c360d02a0e58cd8" translate="yes" xml:space="preserve">
          <source>Requires expressions</source>
          <target state="translated">식 필요</target>
        </trans-unit>
        <trans-unit id="f3b5a76925d43fdbb53b48f2da84a49a93d7975d" translate="yes" xml:space="preserve">
          <source>Requires that 0 &amp;le; p &amp;le; 1 and 0 &amp;le; t.</source>
          <target state="translated">0 &amp;le; p &amp;le; 1 및 0 &amp;le; t가 필요합니다.</target>
        </trans-unit>
        <trans-unit id="58c99fe6c0186ccc2e44bb3d6890e9a1601fd99e" translate="yes" xml:space="preserve">
          <source>Requires that 0 &amp;lt; lambda.</source>
          <target state="translated">0 &amp;lt;람다가 필요합니다.</target>
        </trans-unit>
        <trans-unit id="397d93b3982a8fc2b5cce2cc49c595d2b0c06bc7" translate="yes" xml:space="preserve">
          <source>Requires that 0 &amp;lt; mean.</source>
          <target state="translated">0 &amp;lt;평균이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="96aa197e588604a76bc9719a811c2574a38900f3" translate="yes" xml:space="preserve">
          <source>Requires that 0 &amp;lt; p &amp;le; 1 and 0 &amp;lt; k.</source>
          <target state="translated">0 &amp;lt;p &amp;le; 1 및 0 &amp;lt;k가 필요합니다.</target>
        </trans-unit>
        <trans-unit id="e07d5bfcdf176dad718eb6fcf21d087b4d96cd6a" translate="yes" xml:space="preserve">
          <source>Requires that 0 &amp;lt; p &amp;lt; 1.</source>
          <target state="translated">0 &amp;lt;p &amp;lt;1이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="674eba18406f7a07f7c1349d4a5f2229f90cdfc3" translate="yes" xml:space="preserve">
          <source>Requires that &lt;code&gt;&lt;a href=&quot;../../types/is_copy_constructible&quot;&gt;std::is_copy_constructible&lt;/a&gt;&amp;lt;Ti&amp;gt;::value&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; for all &lt;code&gt;i&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../../types/is_copy_constructible&quot;&gt;std::is_copy_constructible&lt;/a&gt;&amp;lt;Ti&amp;gt;::value&lt;/code&gt; 는 모든 &lt;code&gt;i&lt;/code&gt; 에 대해 &lt;code&gt;true&lt;/code&gt; 여야 합니다 .</target>
        </trans-unit>
        <trans-unit id="5ea7d0931cf135cbe6bf5d1f73ebc6569c5b6ba6" translate="yes" xml:space="preserve">
          <source>Requires that &lt;code&gt;&lt;a href=&quot;../../types/is_move_constructible&quot;&gt;std::is_move_constructible&lt;/a&gt;&amp;lt;Ti&amp;gt;::value&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; for all &lt;code&gt;i&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../../types/is_move_constructible&quot;&gt;std::is_move_constructible&lt;/a&gt;&amp;lt;Ti&amp;gt;::value&lt;/code&gt; 는 모든 &lt;code&gt;i&lt;/code&gt; 에 대해 &lt;code&gt;true&lt;/code&gt; 여야 합니다 .</target>
        </trans-unit>
        <trans-unit id="90d7438b77852a9154b3a481a4c5cf2be4bf13d3" translate="yes" xml:space="preserve">
          <source>Requires that &lt;code&gt;&lt;a href=&quot;../types/decay&quot;&gt;std::decay&lt;/a&gt;&amp;lt;T&amp;gt;::type&lt;/code&gt; is &lt;a href=&quot;../named_req/copyconstructible&quot;&gt;CopyConstructible&lt;/a&gt;.</source>
          <target state="translated">요구하는 &lt;code&gt;&lt;a href=&quot;../types/decay&quot;&gt;std::decay&lt;/a&gt;&amp;lt;T&amp;gt;::type&lt;/code&gt; 입니다 &lt;a href=&quot;../named_req/copyconstructible&quot;&gt;CopyConstructible (복사 가능 생성자)&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="c96db6fe8e545460f4be3d8e606a04eb3630029f" translate="yes" xml:space="preserve">
          <source>Requires that &lt;code&gt;from &amp;lt;= from_end &amp;amp;&amp;amp; to &amp;lt;= to_end&lt;/code&gt; and that &lt;code&gt;state&lt;/code&gt; either representing the initial shift state or obtained by converting the preceding characters in the sequence.</source>
          <target state="translated">있어야 &lt;code&gt;from &amp;lt;= from_end &amp;amp;&amp;amp; to &amp;lt;= to_end&lt;/code&gt; 그 &lt;code&gt;state&lt;/code&gt; 중 초기 변속 상태를 나타내는 시퀀스 또는 이전 문자를 변환함으로써 얻어지는.</target>
        </trans-unit>
        <trans-unit id="cac05ce174c8eb4cb5eb7ff6fbe11d4c74830225" translate="yes" xml:space="preserve">
          <source>Requires that &lt;code&gt;get_deleter()(get())&lt;/code&gt; does not throw exceptions.</source>
          <target state="translated">그 필요 &lt;code&gt;get_deleter()(get())&lt;/code&gt; 예외를 throw하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="0052230ab5a1f5c10fb5ebdbe6cff855e6c20d8b" translate="yes" xml:space="preserve">
          <source>Requires that a &amp;le; b and b-a &amp;le; std::numeric_limits&amp;lt;RealType&amp;gt;::max().</source>
          <target state="translated">a &amp;le; b 및 ba &amp;le; std :: numeric_limits &amp;lt;RealType&amp;gt; :: max ()가 필요합니다.</target>
        </trans-unit>
        <trans-unit id="c06cfdadfbed7855f39290e5e505459d07775307" translate="yes" xml:space="preserve">
          <source>Requires: &lt;code&gt;p&lt;/code&gt; not in &lt;code&gt;[s,s+n)&lt;/code&gt;</source>
          <target state="translated">필수 : &lt;code&gt;p&lt;/code&gt; 는 &lt;code&gt;[s,s+n)&lt;/code&gt; 에 없습니다.</target>
        </trans-unit>
        <trans-unit id="c5957465db8860423fda4366954767439b6edf20" translate="yes" xml:space="preserve">
          <source>Reserved macro names</source>
          <target state="translated">예약 된 매크로 이름</target>
        </trans-unit>
        <trans-unit id="ed1beabd25888481ef7e7320f042c946ece8ae71" translate="yes" xml:space="preserve">
          <source>Resets the error flags and the &lt;code&gt;EOF&lt;/code&gt; indicator for the given file stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a888a6f6a29ecf00d51530e3511d749b1fd644b5" translate="yes" xml:space="preserve">
          <source>Resets the internal state of the distribution object. After a call to this function, the next call to &lt;code&gt;&lt;a href=&quot;operator()&quot;&gt;operator()&lt;/a&gt;&lt;/code&gt; on the distribution object will not be dependent on previous calls to &lt;code&gt;&lt;a href=&quot;operator()&quot;&gt;operator()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">배포 객체의 내부 상태를 재설정합니다. 이 함수를 호출 한 후,에 대한 다음 호출 &lt;code&gt;&lt;a href=&quot;operator()&quot;&gt;operator()&lt;/a&gt;&lt;/code&gt; 분산 객체가 이전 호출에 의존하지 않습니다 &lt;code&gt;&lt;a href=&quot;operator()&quot;&gt;operator()&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5300aeccf7cf0c0f2e7be1ca381d0cf179ff9003" translate="yes" xml:space="preserve">
          <source>Resets the internal state of the distribution object. After a call to this function, the next call to &lt;code&gt;operator()&lt;/code&gt; on the distribution object will not be dependent on previous calls to &lt;code&gt;operator()&lt;/code&gt;.</source>
          <target state="translated">배포 객체의 내부 상태를 재설정합니다. 이 함수를 호출 한 후,에 대한 다음 호출 &lt;code&gt;operator()&lt;/code&gt; 분산 객체가 이전 호출에 의존하지 않습니다 &lt;code&gt;operator()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="727f7d0ef24d2dc40d3e440671d9a8ae1b3c466a" translate="yes" xml:space="preserve">
          <source>Resets the internal state of the distribution. The next call to &lt;code&gt;operator()&lt;/code&gt; on &lt;code&gt;d&lt;/code&gt; will not depend on values produced by any engine prior to &lt;code&gt;reset()&lt;/code&gt;.</source>
          <target state="translated">분포의 내부 상태를 재설정합니다. &lt;code&gt;d&lt;/code&gt; 에 대한 다음 &lt;code&gt;operator()&lt;/code&gt; 호출 은 &lt;code&gt;reset()&lt;/code&gt; 이전에 엔진에서 생성 된 값에 의존하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="93ffc731b5b3277e8c0ef8a946c693d0f41ba1c3" translate="yes" xml:space="preserve">
          <source>Resets the state abandoning the results of previous executions. New shared state is constructed.</source>
          <target state="translated">이전 실행 결과를 포기한 상태를 재설정합니다. 새로운 공유 상태가 구성됩니다.</target>
        </trans-unit>
        <trans-unit id="8d24ac965c60eb16c2f52e726963bfd242eaa2de" translate="yes" xml:space="preserve">
          <source>Resizes the container to contain &lt;code&gt;count&lt;/code&gt; elements.</source>
          <target state="translated">&lt;code&gt;count&lt;/code&gt; 요소 를 포함하도록 컨테이너 크기를 조정합니다 .</target>
        </trans-unit>
        <trans-unit id="5f2f5f969a5ac32748ade89b3baea2483adfbf60" translate="yes" xml:space="preserve">
          <source>Resizes the string to contain &lt;code&gt;count&lt;/code&gt; characters.</source>
          <target state="translated">&lt;code&gt;count&lt;/code&gt; 문자 를 포함하도록 문자열의 크기를 조정합니다 .</target>
        </trans-unit>
        <trans-unit id="20b94fbed531540997834b23e804cf1bef331d9e" translate="yes" xml:space="preserve">
          <source>Resizes the valarray to contain &lt;code&gt;count&lt;/code&gt; elements and assigns &lt;code&gt;value&lt;/code&gt; to each element.</source>
          <target state="translated">&lt;code&gt;count&lt;/code&gt; 요소 를 포함하도록 valarray의 크기를 조정하고 각 요소에 &lt;code&gt;value&lt;/code&gt; 을 할당 합니다 .</target>
        </trans-unit>
        <trans-unit id="8129d5e98af0ecf86dd6edb307a5f0cff0cc3304" translate="yes" xml:space="preserve">
          <source>Resource Acquisition Is Initialization</source>
          <target state="translated">자원 획득이 초기화됩니다</target>
        </trans-unit>
        <trans-unit id="e0b796ded4a0d39c45dff51e9ab8b3830740661f" translate="yes" xml:space="preserve">
          <source>Resource acquisition is initialization</source>
          <target state="translated">자원 획득은 초기화입니다</target>
        </trans-unit>
        <trans-unit id="4d2b9449646a0ee5d5e77b1f7dfdbd7898f4fbf0" translate="yes" xml:space="preserve">
          <source>Resource deadlock would occur</source>
          <target state="translated">리소스 교착 상태가 발생합니다</target>
        </trans-unit>
        <trans-unit id="d9abc300c6e1d878a14615dcfd536a7617e8e97c" translate="yes" xml:space="preserve">
          <source>Resource unavailable, try again</source>
          <target state="translated">리소스를 사용할 수 없습니다. 다시 시도하십시오</target>
        </trans-unit>
        <trans-unit id="6ed6fb8992c88b4662804ffa0f8489faa0d4121b" translate="yes" xml:space="preserve">
          <source>Restores the distribution parameters and internal state with data read from &lt;code&gt;is&lt;/code&gt;. The formatting flags of &lt;code&gt;is&lt;/code&gt; are unchanged. The data must have been written using a stream with the same locale, &lt;code&gt;CharT&lt;/code&gt; and &lt;code&gt;Traits&lt;/code&gt; stream template parameters, otherwise the behavior is undefined. If bad input is encountered, &lt;code&gt;is.setstate(std::ios::failbit)&lt;/code&gt; is called, which may throw &lt;code&gt;&lt;a href=&quot;../io/ios_base/failure&quot;&gt;std::ios_base::failure&lt;/a&gt;&lt;/code&gt;. &lt;code&gt;d&lt;/code&gt; is unchanged in that case.</source>
          <target state="translated">&lt;code&gt;is&lt;/code&gt; 에서 읽은 데이터로 분포 매개 변수 및 내부 상태를 복원합니다 . 의 서식 플래그 &lt;code&gt;is&lt;/code&gt; 변경되지 않습니다. 동일한 로케일, &lt;code&gt;CharT&lt;/code&gt; 및 &lt;code&gt;Traits&lt;/code&gt; 스트림 템플리트 매개 변수가 있는 스트림을 사용하여 데이터를 작성해야합니다 . 그렇지 않으면 동작이 정의되지 않습니다. 입력이 잘못되면 &lt;code&gt;is.setstate(std::ios::failbit)&lt;/code&gt; 가 호출되어 &lt;code&gt;&lt;a href=&quot;../io/ios_base/failure&quot;&gt;std::ios_base::failure&lt;/a&gt;&lt;/code&gt; 있습니다. 이 경우 &lt;code&gt;d&lt;/code&gt; 는 변경되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="38ad8517f1dfe99e4d87fbdbdd90a3a14b28b872" translate="yes" xml:space="preserve">
          <source>Restrictions</source>
          <target state="translated">Restrictions</target>
        </trans-unit>
        <trans-unit id="5faa59d4bc3756040b8ce9e673c09f929e6ee9ba" translate="yes" xml:space="preserve">
          <source>Result</source>
          <target state="translated">Result</target>
        </trans-unit>
        <trans-unit id="299a15e6a23badee14ff1ded59c353807a27199b" translate="yes" xml:space="preserve">
          <source>Result too large</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="612e12d29278b5519294bc25cdaddffec6d0f1c6" translate="yes" xml:space="preserve">
          <source>Results</source>
          <target state="translated">Results</target>
        </trans-unit>
        <trans-unit id="cea123540a55db38b484da4807ab7cb4a974db66" translate="yes" xml:space="preserve">
          <source>Rethrows the stored exception. If there is no stored exceptions (i.e. &lt;code&gt;&lt;a href=&quot;nested_ptr&quot;&gt;nested_ptr()&lt;/a&gt;&lt;/code&gt; returns null pointer), then &lt;code&gt;&lt;a href=&quot;../terminate&quot;&gt;std::terminate&lt;/a&gt;&lt;/code&gt; is called.</source>
          <target state="translated">저장된 예외를 다시 발생시킵니다. 저장된 예외가 없으면 (즉, &lt;code&gt;&lt;a href=&quot;nested_ptr&quot;&gt;nested_ptr()&lt;/a&gt;&lt;/code&gt; 이 널 포인터를 리턴 함) &lt;code&gt;&lt;a href=&quot;../terminate&quot;&gt;std::terminate&lt;/a&gt;&lt;/code&gt; 가 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="478da4354d2afc323b67dd66ca609cf070d557f6" translate="yes" xml:space="preserve">
          <source>Retrieve single elements or portions of the array.</source>
          <target state="translated">단일 요소 또는 배열의 일부를 검색합니다.</target>
        </trans-unit>
        <trans-unit id="810745f90ecb529e1df313ec5ba81d5685c14792" translate="yes" xml:space="preserve">
          <source>Retrieves a copy of the &lt;a href=&quot;../month&quot;&gt;&lt;code&gt;month&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../weekday_indexed&quot;&gt;&lt;code&gt;weekday_indexed&lt;/code&gt;&lt;/a&gt; objects stored in &lt;code&gt;*this&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;*this&lt;/code&gt; 에 저장된 &lt;a href=&quot;../month&quot;&gt; &lt;code&gt;month&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../weekday_indexed&quot;&gt; &lt;code&gt;weekday_indexed&lt;/code&gt; &lt;/a&gt; 객체 의 복사본을 검색합니다 .</target>
        </trans-unit>
        <trans-unit id="edd61d33d926cd2e0f4ffd706e5146f3ddbca4cd" translate="yes" xml:space="preserve">
          <source>Retrieves a copy of the &lt;a href=&quot;../month&quot;&gt;&lt;code&gt;month&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../weekday_last&quot;&gt;&lt;code&gt;weekday_last&lt;/code&gt;&lt;/a&gt; objects stored in &lt;code&gt;*this&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;*this&lt;/code&gt; 에 저장된 &lt;a href=&quot;../month&quot;&gt; &lt;code&gt;month&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../weekday_last&quot;&gt; &lt;code&gt;weekday_last&lt;/code&gt; &lt;/a&gt; 객체 의 복사본을 검색합니다 .</target>
        </trans-unit>
        <trans-unit id="341782330e03c8f3862f1071aaf678ed94e1dda6" translate="yes" xml:space="preserve">
          <source>Retrieves a copy of the &lt;code&gt;std::chrono::month&lt;/code&gt; object stored in &lt;code&gt;*this&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;*this&lt;/code&gt; 에 저장된 &lt;code&gt;std::chrono::month&lt;/code&gt; 오브젝트 의 사본을 검색합니다 .</target>
        </trans-unit>
        <trans-unit id="1154f92c0c4185c47b26d010690870436bae2369" translate="yes" xml:space="preserve">
          <source>Retrieves a copy of the &lt;code&gt;std::chrono::weekday&lt;/code&gt; object stored in &lt;code&gt;*this&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;*this&lt;/code&gt; 에 저장된 &lt;code&gt;std::chrono::weekday&lt;/code&gt; 객체 의 복사본을 검색합니다 .</target>
        </trans-unit>
        <trans-unit id="1b3164e2e5e2a0ffa4cc8774ebc37cee3f819de0" translate="yes" xml:space="preserve">
          <source>Retrieves the field values stored in this &lt;code&gt;year_month_day_last&lt;/code&gt; object.</source>
          <target state="translated">이 &lt;code&gt;year_month_day_last&lt;/code&gt; 객체에 저장된 필드 값을 검색 합니다.</target>
        </trans-unit>
        <trans-unit id="4fa99b560c685b2de8135d23b85d2f5728e5d655" translate="yes" xml:space="preserve">
          <source>Retrieves the field values stored in this &lt;code&gt;year_month_weekday&lt;/code&gt; object.</source>
          <target state="translated">이 &lt;code&gt;year_month_weekday&lt;/code&gt; 객체에 저장된 필드 값을 검색 합니다.</target>
        </trans-unit>
        <trans-unit id="c241cf0fec1b383402b612900e62489f3218349e" translate="yes" xml:space="preserve">
          <source>Retrieves the field values stored in this &lt;code&gt;year_month_weekday_last&lt;/code&gt; object.</source>
          <target state="translated">이 &lt;code&gt;year_month_weekday_last&lt;/code&gt; 객체에 저장된 필드 값을 검색 합니다.</target>
        </trans-unit>
        <trans-unit id="86e5af707a587a9d63db364050c45295bcda7433" translate="yes" xml:space="preserve">
          <source>Retrieves the month and day values stored in this &lt;code&gt;month_day&lt;/code&gt; object.</source>
          <target state="translated">이 &lt;code&gt;month_day&lt;/code&gt; 객체에 저장된 월 및 일 값을 검색 합니다.</target>
        </trans-unit>
        <trans-unit id="a04d47e1bb2d4306e543fd34db98a85565bcf6df" translate="yes" xml:space="preserve">
          <source>Retrieves the stored time zone pointer.</source>
          <target state="translated">저장된 시간대 포인터를 검색합니다.</target>
        </trans-unit>
        <trans-unit id="f8416bd1bba852414cf31f9f7ce33b3bc75aa8c7" translate="yes" xml:space="preserve">
          <source>Retrieves the year and month values stored in this &lt;code&gt;year_month&lt;/code&gt; object.</source>
          <target state="translated">이 &lt;code&gt;year_month&lt;/code&gt; 객체에 저장된 연도 및 월 값을 검색 합니다.</target>
        </trans-unit>
        <trans-unit id="d488335efe677fc140bc1087f3b17bf5d1247856" translate="yes" xml:space="preserve">
          <source>Retrieves the year, month and day values stored in this &lt;code&gt;year_month_day&lt;/code&gt; object.</source>
          <target state="translated">이 &lt;code&gt;year_month_day&lt;/code&gt; 객체에 저장된 년, 월 및 일 값을 검색 합니다.</target>
        </trans-unit>
        <trans-unit id="24f096b221f9534bcad007f2b5a32b490950b5b5" translate="yes" xml:space="preserve">
          <source>Return</source>
          <target state="translated">Return</target>
        </trans-unit>
        <trans-unit id="88f2b3f5a0eff8fce83b5ded45c3cac6f39abfd9" translate="yes" xml:space="preserve">
          <source>Return Type</source>
          <target state="translated">반품 유형</target>
        </trans-unit>
        <trans-unit id="4ed1a51e3c7c6cf43a3633b3e58f69e74b9dd263" translate="yes" xml:space="preserve">
          <source>Return Value</source>
          <target state="translated">반환 값</target>
        </trans-unit>
        <trans-unit id="e20ebfe1c5cd7adb32327bf554149ef3dc300428" translate="yes" xml:space="preserve">
          <source>Return Value Optimization</source>
          <target state="translated">반환 값 최적화</target>
        </trans-unit>
        <trans-unit id="027b87ed7cdb8ad1b1bbfbf20caf8edfcd00f17f" translate="yes" xml:space="preserve">
          <source>Return memory to the pool</source>
          <target state="translated">풀로 메모리 반환</target>
        </trans-unit>
        <trans-unit id="21f2dc0e7803f71f5ca6b614da1ff4266539743d" translate="yes" xml:space="preserve">
          <source>Return the &lt;code&gt;n&lt;/code&gt;th predecessor of iterator &lt;code&gt;it&lt;/code&gt;.</source>
          <target state="translated">iterator 의 &lt;code&gt;n&lt;/code&gt; 번째 선행 작업을 반환 &lt;code&gt;it&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ac3f5d58e44083deb51c0570a203115e6d39457a" translate="yes" xml:space="preserve">
          <source>Return the &lt;code&gt;n&lt;/code&gt;th successor of iterator &lt;code&gt;it&lt;/code&gt;.</source>
          <target state="translated">iterator 의 &lt;code&gt;n&lt;/code&gt; 번째 후속 작업을 반환 &lt;code&gt;it&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="41b1fb407b7fa442b77381701968fb175362cf78" translate="yes" xml:space="preserve">
          <source>Return type</source>
          <target state="translated">반품 유형</target>
        </trans-unit>
        <trans-unit id="405e9fcb7cee13b054cfb8ad1b2225903096dc38" translate="yes" xml:space="preserve">
          <source>Return type deduction</source>
          <target state="translated">반품 유형 공제</target>
        </trans-unit>
        <trans-unit id="e41758d5c4632d7b15eaeb29adcd95b61edcd798" translate="yes" xml:space="preserve">
          <source>Return type deduction for normal functions</source>
          <target state="translated">정상적인 기능을위한 리턴 타입 공제</target>
        </trans-unit>
        <trans-unit id="b99edceffec9e7477ae4f66857ad0feb76f9fb71" translate="yes" xml:space="preserve">
          <source>Return type. If not present it's implied by the function return statements (or void if it doesn't return any value)</source>
          <target state="translated">반환 유형 존재하지 않으면 함수 return 문에 의해 암시됩니다 (또는 값을 반환하지 않으면 void)</target>
        </trans-unit>
        <trans-unit id="232f3db04c4faa620bfbfc11fd3689a472ef9881" translate="yes" xml:space="preserve">
          <source>Return value</source>
          <target state="translated">반환 값</target>
        </trans-unit>
        <trans-unit id="f3d7c9610d9fd6e95cf7be845697f6014183c350" translate="yes" xml:space="preserve">
          <source>Return value optimization is mandatory and no longer considered as copy elision; see above.</source>
          <target state="translated">반환 값 최적화는 필수이며 더 이상 복사 제거로 간주되지 않습니다. 위 참조.</target>
        </trans-unit>
        <trans-unit id="9d42e2f739c476b4724ed40443cd1bdc8b0b0c31" translate="yes" xml:space="preserve">
          <source>Return values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b57a983192aed1ae8478f185e1932c3258eb180" translate="yes" xml:space="preserve">
          <source>Returned iterator points at the copy of &lt;code&gt;rv&lt;/code&gt; inserted into &lt;code&gt;a&lt;/code&gt;</source>
          <target state="translated">의 사본에서 반환 된 반복자 포인트 &lt;code&gt;rv&lt;/code&gt; 삽입 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="524f9b62aa155861ce75b12ae0cad27c2086c769" translate="yes" xml:space="preserve">
          <source>Returned iterator points at the copy of &lt;code&gt;t&lt;/code&gt; inserted into &lt;code&gt;a&lt;/code&gt;</source>
          <target state="translated">의 사본에서 반환 된 반복자 포인트 &lt;code&gt;t&lt;/code&gt; 은 삽입 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="19d1416565151e295523ac527a8f43e1da2b920c" translate="yes" xml:space="preserve">
          <source>Returned iterator points at the copy of the first element inserted into &lt;code&gt;a&lt;/code&gt; or is &lt;code&gt;p&lt;/code&gt; for &lt;code&gt;n==0&lt;/code&gt;</source>
          <target state="translated">삽입 된 첫 번째 요소의 카피에 반복자 지점을 반환 또는 인 &lt;code&gt;p&lt;/code&gt; 에 대한 &lt;code&gt;n==0&lt;/code&gt; &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c4585900ba4e949b764c04121c09f228d09ce63f" translate="yes" xml:space="preserve">
          <source>Returned iterator points at the copy of the first element inserted into &lt;code&gt;a&lt;/code&gt; or is &lt;code&gt;p&lt;/code&gt; if &lt;code&gt;il&lt;/code&gt; is empty.</source>
          <target state="translated">반환 된 반복자 는 &lt;code&gt;a&lt;/code&gt; 에 삽입 된 첫 번째 요소의 사본을 가리키며, &lt;code&gt;il&lt;/code&gt; 이 비어 있으면 &lt;code&gt;p&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="2ad496d62afc4519b1b04cd9b30a985b0c1fdd95" translate="yes" xml:space="preserve">
          <source>Returned iterator points at the element constructed from &lt;code&gt;args&lt;/code&gt; into &lt;code&gt;a&lt;/code&gt;</source>
          <target state="translated">로 구성 요소에 리턴 반복기 포인트 &lt;code&gt;args&lt;/code&gt; 로 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="752d1525c51ff56026c40b5d2cf1a4f120012cd4" translate="yes" xml:space="preserve">
          <source>Returned iterator points at the element that was immediately following &lt;code&gt;q&lt;/code&gt; prior to erasure, or &lt;code&gt;a.end()&lt;/code&gt; if no such element exists.</source>
          <target state="translated">삭제 직전에 &lt;code&gt;q&lt;/code&gt; 바로 다음에있는 요소의 반복자 포인트를 반환 하거나, 해당 요소가없는 경우 &lt;code&gt;a.end()&lt;/code&gt; 반환합니다.</target>
        </trans-unit>
        <trans-unit id="eddb85ccd2f9833a1c82585f27d5cd07d3c75689" translate="yes" xml:space="preserve">
          <source>Returned iterator points at the element that was pointed by &lt;code&gt;q2&lt;/code&gt; prior to any erasure, or &lt;code&gt;a.end()&lt;/code&gt; if no such element exists.</source>
          <target state="translated">삭제하기 전에 &lt;code&gt;q2&lt;/code&gt; 가 지적한 요소의 반복자 점을 반환 하거나 &lt;code&gt;a.end()&lt;/code&gt; 요소가 없으면 a.end ()를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="15f6ded0a15edbd792d645ece89baed28bf1ac4c" translate="yes" xml:space="preserve">
          <source>Returning by value may involve construction and copy/move of a temporary object, unless &lt;a href=&quot;copy_elision&quot;&gt;copy elision&lt;/a&gt; is used. Specifically, the conditions for copy/move are as follows:</source>
          <target state="translated">&lt;a href=&quot;copy_elision&quot;&gt;복사 소거&lt;/a&gt; 를 사용 하지 않는 한 값으로 반환하면 임시 개체의 구성 및 복사 / 이동이 포함될 수 있습니다 . 특히 복사 / 이동 조건은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="b9e17a7da7755b1715217e80d2bfe02de58c0a2d" translate="yes" xml:space="preserve">
          <source>Returning from the &lt;a href=&quot;../../language/main_function&quot;&gt;main function&lt;/a&gt;, either by a &lt;code&gt;return&lt;/code&gt; statement or by reaching the end of the function performs the normal function termination (calls the destructors of the variables with automatic &lt;a href=&quot;../../language/storage_duration&quot;&gt; storage durations&lt;/a&gt;) and then executes &lt;code&gt;std::exit&lt;/code&gt;, passing the argument of the return statement (or &lt;code&gt;​0​&lt;/code&gt; if implicit return was used) as &lt;code&gt;exit_code&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;return&lt;/code&gt; 문 또는 함수의 끝에 도달 하여 &lt;a href=&quot;../../language/main_function&quot;&gt;main 함수&lt;/a&gt; 에서 리턴 하면 일반 함수 종료 (자동 &lt;a href=&quot;../../language/storage_duration&quot;&gt;저장 기간&lt;/a&gt; 을 사용하여 변수의 소멸자를 호출 )를 수행 한 다음 &lt;code&gt;std::exit&lt;/code&gt; 를 실행 하여 리턴 인수를 전달합니다. 문 (또는 &lt;code&gt;​0​&lt;/code&gt; 암시 복귀가 사용 된 경우) 등 &lt;code&gt;exit_code&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9fbfc396e2c30ff31efa137e5792c967ee123199" translate="yes" xml:space="preserve">
          <source>Returns &lt;a href=&quot;objects#Alignment&quot;&gt;the alignment&lt;/a&gt;, in bytes, required for any instance of the type indicated by &lt;a href=&quot;type-id#Type_naming&quot;&gt;type-id&lt;/a&gt;, which is either complete type, an array type, or a reference type.</source>
          <target state="translated">&lt;a href=&quot;type-id#Type_naming&quot;&gt;type-id로&lt;/a&gt; 표시된 유형의 인스턴스에 필요한 &lt;a href=&quot;objects#Alignment&quot;&gt;alignment&lt;/a&gt; 를 바이트 단위로 리턴 합니다. 완전한 유형, 배열 유형 또는 참조 유형)에 .</target>
        </trans-unit>
        <trans-unit id="348cc7dc84e54a513d9e9968e060b47854dd9d11" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;*this&lt;/code&gt;, which is now a copy of &lt;code&gt;other&lt;/code&gt;.</source>
          <target state="translated">반환 &lt;code&gt;*this&lt;/code&gt; 지금의 사본 인 &lt;code&gt;other&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6a2d9028adbd56974b6b84a3554c3bdfd60e8e46" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;0&lt;/code&gt; if &lt;code&gt;*this&lt;/code&gt; does not represent the result of a successful match.</source>
          <target state="translated">반환 &lt;code&gt;0&lt;/code&gt; 경우 &lt;code&gt;*this&lt;/code&gt; 성공적인 경기의 결과를 나타내지 않습니다.</target>
        </trans-unit>
        <trans-unit id="657a094b10cdc274018462b06f54ca3fa1ab6f8f" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;&lt;a href=&quot;../forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;T&amp;gt;(t)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;T&amp;gt;(t)&lt;/code&gt; 리턴 합니다.</target>
        </trans-unit>
        <trans-unit id="b89661b79490440147cc747b0b4c745e3fb16be4" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;false&lt;/code&gt; if and only if the variant holds a value.</source>
          <target state="translated">변형이 값을 보유하는 경우에만 &lt;code&gt;false&lt;/code&gt; 를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="ce1b5cefbd279e9d9d799c7084e6f876d25f4e94" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">반환 &lt;code&gt;false&lt;/code&gt; 이 없습니다.</target>
        </trans-unit>
        <trans-unit id="caff5dee6102d357a2abb03226077ddf3bdd5bc0" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;p&lt;/code&gt; such that &lt;code&gt;D(p).param() == p&lt;/code&gt;</source>
          <target state="translated">반환 &lt;code&gt;p&lt;/code&gt; 되도록 &lt;code&gt;D(p).param() == p&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ce54f7d92348d62480b8f44fad721d4d55bd4e67" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if a match exists, &lt;code&gt;false&lt;/code&gt; otherwise. In either case, the object &lt;code&gt;m&lt;/code&gt; is updated, as follows:</source>
          <target state="translated">반환 &lt;code&gt;true&lt;/code&gt; 일치가 존재하는 경우 &lt;code&gt;false&lt;/code&gt; , 그렇지. 두 경우 모두 다음과 같이 객체 &lt;code&gt;m&lt;/code&gt; 이 업데이트됩니다.</target>
        </trans-unit>
        <trans-unit id="423b663109ec653c815f28a2e8138317db6b8112" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if an error has occurred on the associated stream. Specifically, returns &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;badbit&lt;/code&gt; or &lt;code&gt;failbit&lt;/code&gt; is set in &lt;code&gt;&lt;a href=&quot;rdstate&quot;&gt;rdstate()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">연결된 스트림에서 오류가 발생한 경우 &lt;code&gt;true&lt;/code&gt; 를 반환 합니다 . 특히, 반환 &lt;code&gt;true&lt;/code&gt; 경우 &lt;code&gt;badbit&lt;/code&gt; 또는 &lt;code&gt;failbit&lt;/code&gt; 가 설정되어 &lt;code&gt;&lt;a href=&quot;rdstate&quot;&gt;rdstate()&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="21382c59b8fbd47952cbe99a503db72ebbf67485" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if an error has occurred on the associated stream. Specifically, returns &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;badbit&lt;/code&gt; or &lt;code&gt;failbit&lt;/code&gt; is set in &lt;code&gt;rdstate()&lt;/code&gt;.</source>
          <target state="translated">연결된 스트림에서 오류가 발생한 경우 &lt;code&gt;true&lt;/code&gt; 를 반환 합니다 . 특히, &lt;code&gt;rdstate()&lt;/code&gt; 에 &lt;code&gt;badbit&lt;/code&gt; 또는 &lt;code&gt;failbit&lt;/code&gt; 가 설정되어 있으면 &lt;code&gt;true&lt;/code&gt; 를 반환 합니다 .</target>
        </trans-unit>
        <trans-unit id="677115426004f5c622e2fdac2e7f78fe361e3c29" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if non-recoverable error has occurred on the associated stream. Specifically, returns &lt;code&gt;true&lt;/code&gt; if &lt;a href=&quot;../ios_base/iostate&quot;&gt;&lt;code&gt;badbit&lt;/code&gt;&lt;/a&gt; is set in &lt;code&gt;rdstate()&lt;/code&gt;.</source>
          <target state="translated">연결된 스트림에서 복구 할 수없는 오류가 발생한 경우 &lt;code&gt;true&lt;/code&gt; 를 반환 합니다 . 특히, &lt;a href=&quot;../ios_base/iostate&quot;&gt; &lt;code&gt;badbit&lt;/code&gt; &lt;/a&gt; 가 &lt;code&gt;rdstate()&lt;/code&gt; 설정된 경우 &lt;code&gt;true&lt;/code&gt; 를 반환 합니다 .</target>
        </trans-unit>
        <trans-unit id="5095fc2b423a79130651d491d389d5a201f0235e" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the associated stream has reached end-of-file. Specifically, returns &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;eofbit&lt;/code&gt; is set in &lt;code&gt;&lt;a href=&quot;rdstate&quot;&gt;rdstate()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">연결된 스트림이 파일 끝에 도달하면 &lt;code&gt;true&lt;/code&gt; 를 반환 합니다. 특히, &lt;code&gt;eofbit&lt;/code&gt; 가 &lt;code&gt;&lt;a href=&quot;rdstate&quot;&gt;rdstate()&lt;/a&gt;&lt;/code&gt; 설정된 경우 &lt;code&gt;true&lt;/code&gt; 를 리턴 합니다 .</target>
        </trans-unit>
        <trans-unit id="7c65558038b2fbe265a1ebce462f93b617b0dd51" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the character is classified as a blank character, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">문자가 공백 문자로 분류되면 &lt;code&gt;true&lt;/code&gt; 를 , 그렇지 않으면 &lt;code&gt;false&lt;/code&gt; 를 리턴 합니다 .</target>
        </trans-unit>
        <trans-unit id="26e2601b1af2a913e0d311a5bed9ad0474aac329" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the character is classified as a control character, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">문자가 제어 문자로 분류되면 &lt;code&gt;true&lt;/code&gt; 를 리턴 하고 &lt;code&gt;false&lt;/code&gt; 그렇지 않으면 .</target>
        </trans-unit>
        <trans-unit id="978b058aa31c4a0a1bd8c2ef70b1f1f2c2486956" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the character is classified as a digit, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">문자가 숫자로 분류되면 &lt;code&gt;true&lt;/code&gt; 를 , 그렇지 않으면 &lt;code&gt;false&lt;/code&gt; 를 리턴 합니다 .</target>
        </trans-unit>
        <trans-unit id="d5b3184dbe096f21b012bac15b9cdd6238ce8723" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the character is classified as a hexadecimal digit, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">문자가 16 진수로 분류되면 &lt;code&gt;true&lt;/code&gt; 를 , 그렇지 않으면 &lt;code&gt;false&lt;/code&gt; 를 리턴 합니다 .</target>
        </trans-unit>
        <trans-unit id="d7ce10f3719eaab6be24e7a355cfa5003ccda8f3" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the character is classified as a whitespace character, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">문자가 공백 문자로 분류되면 &lt;code&gt;true&lt;/code&gt; 를 리턴 하고 &lt;code&gt;false&lt;/code&gt; 그렇지 않으면 .</target>
        </trans-unit>
        <trans-unit id="f50905994b335567050e180b52c780552a7e1317" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the character is classified as alphabetic, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">문자가 알파벳으로 분류되면 &lt;code&gt;true&lt;/code&gt; 를 반환 하고 &lt;code&gt;false&lt;/code&gt; , 그렇지.</target>
        </trans-unit>
        <trans-unit id="766a31c3c1d3c2b10252ce2683b652670a8370ce" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the character is classified as alphanumeric, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">문자가 영숫자로 분류되면 &lt;code&gt;true&lt;/code&gt; 를 반환 하고 &lt;code&gt;false&lt;/code&gt; 그렇지 않으면 .</target>
        </trans-unit>
        <trans-unit id="759ef4ce510ee3f6b402f95235e43d011f83c842" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the character is classified as graphic, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">문자가 그래픽으로 분류되면 &lt;code&gt;true&lt;/code&gt; 를 , &lt;code&gt;false&lt;/code&gt; 를 반환 합니다 그렇지 않으면 .</target>
        </trans-unit>
        <trans-unit id="407307b2bcbc029df72ce3929bb086da9b9742ad" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the character is classified as lowercase, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">문자가 소문자로 분류되면 &lt;code&gt;true&lt;/code&gt; 를 , 그렇지 않으면 &lt;code&gt;false&lt;/code&gt; 를 리턴 합니다 .</target>
        </trans-unit>
        <trans-unit id="264844cf9a2a08c1a8569b0ad808fabb8cd24fd4" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the character is classified as printable, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">문자가 인쇄 가능한 것으로 분류되면 &lt;code&gt;true&lt;/code&gt; 를 , 그렇지 않으면 &lt;code&gt;false&lt;/code&gt; 를 리턴 합니다 .</target>
        </trans-unit>
        <trans-unit id="926f5168b6d529374c027f003364f04e34eac293" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the character is classified as punctuation, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">문자가 문장 부호로 분류되면 &lt;code&gt;true&lt;/code&gt; 를 , 그렇지 않으면 &lt;code&gt;false&lt;/code&gt; 를 리턴 합니다 .</target>
        </trans-unit>
        <trans-unit id="563b35548971a5b4c7f6405cc3a98887babe4fab" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the character is classified as uppercase, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">문자가 대문자로 분류되면 &lt;code&gt;true&lt;/code&gt; 를 , 그렇지 않으면 &lt;code&gt;false&lt;/code&gt; 를 리턴 합니다 .</target>
        </trans-unit>
        <trans-unit id="36b40827ae37f8973d0e316de3bf83161f857a7b" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the facet &lt;code&gt;Facet&lt;/code&gt; was installed in the locale &lt;code&gt;loc&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">패싯 &lt;code&gt;Facet&lt;/code&gt; 이 로케일 &lt;code&gt;loc&lt;/code&gt; 에 설치된 경우 &lt;code&gt;true&lt;/code&gt; 를 , 그렇지 않으면 &lt;code&gt;false&lt;/code&gt; 를 리턴 합니다 .</target>
        </trans-unit>
        <trans-unit id="9adedfadab46fd3082f0680559c8a5402abb017f" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the iterator encountered the end-of-file condition, that is, if an earlier call to &lt;code&gt;&lt;a href=&quot;../../io/basic_streambuf/sputc&quot;&gt;std::basic_streambuf::sputc&lt;/a&gt;&lt;/code&gt; (made by &lt;a href=&quot;operator=&quot;&gt;&lt;code&gt;operator=&lt;/code&gt;&lt;/a&gt;) returned &lt;code&gt;Traits::eof&lt;/code&gt;.</source>
          <target state="translated">반복자가 파일 끝 조건에 &lt;code&gt;&lt;a href=&quot;../../io/basic_streambuf/sputc&quot;&gt;std::basic_streambuf::sputc&lt;/a&gt;&lt;/code&gt; 경우, 즉 std :: basic_streambuf :: sputc에 대한 이전 호출 ( &lt;a href=&quot;operator=&quot;&gt; &lt;code&gt;operator=&lt;/code&gt; &lt;/a&gt; )이 &lt;code&gt;Traits::eof&lt;/code&gt; 리턴 한 &lt;code&gt;true&lt;/code&gt; 리턴 합니다. .</target>
        </trans-unit>
        <trans-unit id="6ff43ff3b9e92850db2793da0e0a370105b8f45b" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the most recent call to &lt;code&gt;&lt;a href=&quot;open&quot;&gt;open()&lt;/a&gt;&lt;/code&gt; succeeded and there has been no call to &lt;code&gt;&lt;a href=&quot;close&quot;&gt;close()&lt;/a&gt;&lt;/code&gt; since then.</source>
          <target state="translated">가장 최근에 &lt;code&gt;&lt;a href=&quot;open&quot;&gt;open()&lt;/a&gt;&lt;/code&gt; 호출하고 그 이후 로 &lt;code&gt;&lt;a href=&quot;close&quot;&gt;close()&lt;/a&gt;&lt;/code&gt; 호출하지 않은 경우 &lt;code&gt;true&lt;/code&gt; 를 리턴 합니다 .</target>
        </trans-unit>
        <trans-unit id="d8542b8429a54567347711db60dc170c180796eb" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the next increment will cause the directory currently referred to by &lt;code&gt;*this&lt;/code&gt; to be iterated into.</source>
          <target state="translated">다음 증분으로 인해 현재 &lt;code&gt;*this&lt;/code&gt; 로 참조되는 디렉토리 가 반복되는 경우 &lt;code&gt;true&lt;/code&gt; 를 리턴 합니다 .</target>
        </trans-unit>
        <trans-unit id="1c3752b4867edc3e29b031e769f6912671674cfb" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the sorted range &lt;code&gt;[first2, last2)&lt;/code&gt; is a &lt;a href=&quot;https://en.wikipedia.org/wiki/subsequence&quot;&gt;subsequence&lt;/a&gt; of the sorted range &lt;code&gt;[first1, last1)&lt;/code&gt;. (A subsequence need not be contiguous.).</source>
          <target state="translated">정렬 된 범위 &lt;code&gt;[first2, last2)&lt;/code&gt; 가 정렬 된 범위 &lt;code&gt;[first1, last1)&lt;/code&gt; 의 &lt;a href=&quot;https://en.wikipedia.org/wiki/subsequence&quot;&gt;하위 시퀀스&lt;/a&gt; 인 경우 &lt;code&gt;true&lt;/code&gt; 를 리턴 합니다. . 하위 시퀀스는 연속적 일 필요는 없습니다.</target>
        </trans-unit>
        <trans-unit id="21333b59318ca88e1dcef763e8b7908d6d667701" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the the most recent I/O operation on the stream completed successfully. Specifically, returns result of &lt;code&gt;rdstate() == 0&lt;/code&gt;.</source>
          <target state="translated">스트림에서 가장 최근의 I / O 작업이 성공적으로 완료되면 &lt;code&gt;true&lt;/code&gt; 를 반환 합니다 . 특히 &lt;code&gt;rdstate() == 0&lt;/code&gt; 결과를 반환합니다. .</target>
        </trans-unit>
        <trans-unit id="dbda86a4dd19967ab0484b47ef3fd906bf6e7eb5" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the type of this &lt;code&gt;type_info&lt;/code&gt; precedes the type of &lt;code&gt;rhs&lt;/code&gt; in the implementation's collation order. No guarantees are given; in particular, the collation order can change between the invocations of the same program.</source>
          <target state="translated">구현의 조합 순서 에서이 &lt;code&gt;type_info&lt;/code&gt; 의 유형이 &lt;code&gt;rhs&lt;/code&gt; 의 유형보다 우선하면 &lt;code&gt;true&lt;/code&gt; 를 리턴 합니다 . 보장은 없습니다. 특히 데이터 정렬 순서는 동일한 프로그램의 호출간에 변경 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a03f89994b0fb2f078a428efbe6e1a80a91406c1" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if there exists a permutation of the elements in the range &lt;code&gt;[first1, last1)&lt;/code&gt; that makes that range equal to the range &lt;code&gt;[first2,last2)&lt;/code&gt;, where &lt;code&gt;last2&lt;/code&gt; denotes &lt;code&gt;first2 + (last1 - first1)&lt;/code&gt; if it was not given.</source>
          <target state="translated">범위가 &lt;code&gt;[first2,last2)&lt;/code&gt; 범위와 동일한 &lt;code&gt;[first1, last1)&lt;/code&gt; 범위에있는 요소의 순열이있는 경우 &lt;code&gt;true&lt;/code&gt; 를 리턴 합니다 . 여기서 &lt;code&gt;last2&lt;/code&gt; 는 지정되지 않은 경우 &lt;code&gt;first2 + (last1 - first1)&lt;/code&gt; 나타냅니다 .</target>
        </trans-unit>
        <trans-unit id="b3c6de90b23169d6f174b12ffb8d2aaeca2a0c12" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;y&lt;/code&gt;, no longer a part of a dependency tree.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f00c416c84e5e1b2db0adca496145b109d5010c8" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;​0​&lt;/code&gt; if the character sequence is not the name of a character class recognized by &lt;code&gt;X&lt;/code&gt;.</source>
          <target state="translated">반환 &lt;code&gt;​0​&lt;/code&gt; 문자 순서가 인식 할 수있는 문자 클래스의 이름이 아닌 경우 &lt;code&gt;X&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f27bc1ee14d96f619d547ee20ae3553c5ad692e2" translate="yes" xml:space="preserve">
          <source>Returns a &lt;a href=&quot;value_category&quot;&gt;prvalue&lt;/a&gt; of type &lt;code&gt;bool&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;bool&lt;/code&gt; 유형 의 &lt;a href=&quot;value_category&quot;&gt;prvalue&lt;/a&gt; 를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="74c54e791bb590575ab977595cd071c97fa914e8" translate="yes" xml:space="preserve">
          <source>Returns a &lt;code&gt;&lt;a href=&quot;../basic_string_view&quot;&gt;std::basic_string_view&lt;/a&gt;&lt;/code&gt;, constructed as if by &lt;code&gt;&lt;a href=&quot;../basic_string_view&quot;&gt;std::basic_string_view&lt;/a&gt;&amp;lt;CharT, Traits&amp;gt;(data(), size())&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../basic_string_view&quot;&gt;std::basic_string_view&lt;/a&gt;&amp;lt;CharT, Traits&amp;gt;(data(), size())&lt;/code&gt; &amp;lt;CharT, Traits&amp;gt; (data (), size ()) 로 구성된 것처럼 &lt;code&gt;&lt;a href=&quot;../basic_string_view&quot;&gt;std::basic_string_view&lt;/a&gt;&lt;/code&gt; 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="d521580712f007b0ee2aa294ddba7a7588d37a82" translate="yes" xml:space="preserve">
          <source>Returns a &lt;code&gt;&lt;a href=&quot;../duration&quot;&gt;duration&lt;/a&gt;&lt;/code&gt; representing the amount of time between &lt;code&gt;*this&lt;/code&gt; and the &lt;code&gt;clock&lt;/code&gt;'s epoch.</source>
          <target state="translated">&lt;code&gt;*this&lt;/code&gt; 와 &lt;code&gt;clock&lt;/code&gt; 의 에포크 사이의 시간을 나타내는 &lt;code&gt;&lt;a href=&quot;../duration&quot;&gt;duration&lt;/a&gt;&lt;/code&gt; 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="9a3e51e8d33ad07948f02967372466f5f87fa47f" translate="yes" xml:space="preserve">
          <source>Returns a &lt;code&gt;&lt;a href=&quot;../shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&amp;lt;T&amp;gt;&lt;/code&gt; that shares ownership of &lt;code&gt;*this&lt;/code&gt; with all existing &lt;code&gt;&lt;a href=&quot;../shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&lt;/code&gt; that refer to &lt;code&gt;*this&lt;/code&gt;.</source>
          <target state="translated">리턴 &lt;code&gt;&lt;a href=&quot;../shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&amp;lt;T&amp;gt;&lt;/code&gt; 그 주식 소유권 &lt;code&gt;*this&lt;/code&gt; 기존의 모든 &lt;code&gt;&lt;a href=&quot;../shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&lt;/code&gt; 참조하는 &lt;code&gt;*this&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9c32a5549cdd6db2b59c473b5be6eb6e49bcefcb" translate="yes" xml:space="preserve">
          <source>Returns a &lt;code&gt;&lt;a href=&quot;../weak_ptr&quot;&gt;std::weak_ptr&lt;/a&gt;&amp;lt;T&amp;gt;&lt;/code&gt; that tracks ownership of &lt;code&gt;*this&lt;/code&gt; by all existing &lt;code&gt;&lt;a href=&quot;../shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&lt;/code&gt; that refer to &lt;code&gt;*this&lt;/code&gt;.</source>
          <target state="translated">리턴 &lt;code&gt;&lt;a href=&quot;../weak_ptr&quot;&gt;std::weak_ptr&lt;/a&gt;&amp;lt;T&amp;gt;&lt;/code&gt; 그 트랙 소유권 &lt;code&gt;*this&lt;/code&gt; 모든 기존의 &lt;code&gt;&lt;a href=&quot;../shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&lt;/code&gt; 참조하는 &lt;code&gt;*this&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="675f523241ec3f01b2a36ebd7b1175560bd4556c" translate="yes" xml:space="preserve">
          <source>Returns a &lt;code&gt;future&lt;/code&gt; which shares the same shared state as &lt;code&gt;*this&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;*this&lt;/code&gt; 와 동일한 공유 상태를 공유 하는 &lt;code&gt;future&lt;/code&gt; 를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="ebf510f38013ed0fde358a7dd564f35ae062463e" translate="yes" xml:space="preserve">
          <source>Returns a &lt;code&gt;time_point&lt;/code&gt; object representing the current point in time.</source>
          <target state="translated">현재 시점을 나타내는 &lt;code&gt;time_point&lt;/code&gt; 객체를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="b8fa136e4597b284ff55e1a920c98e99b09c75c9" translate="yes" xml:space="preserve">
          <source>Returns a &lt;code&gt;time_point&lt;/code&gt; with the largest possible duration, i.e. &lt;code&gt;time_point(std::chrono::duration::max())&lt;/code&gt;.</source>
          <target state="translated">가능한 최대 지속 시간을 가진 &lt;code&gt;time_point&lt;/code&gt; 를 리턴합니다 &lt;code&gt;time_point(std::chrono::duration::max())&lt;/code&gt; 예 : time_point (std :: chrono :: duration :: max ())) .</target>
        </trans-unit>
        <trans-unit id="682b27f03cef4d4cd685edc2b1214f48a737053a" translate="yes" xml:space="preserve">
          <source>Returns a &lt;code&gt;time_point&lt;/code&gt; with the smallest possible duration, i.e. &lt;code&gt;time_point(std::chrono::duration::min())&lt;/code&gt;.</source>
          <target state="translated">가능한 최소 지속 시간을 가진 &lt;code&gt;time_point&lt;/code&gt; 를 리턴합니다 &lt;code&gt;time_point(std::chrono::duration::min())&lt;/code&gt; 예 : time_point (std :: chrono :: duration :: min ())) .</target>
        </trans-unit>
        <trans-unit id="e6c8c1066b88010504b23ecf215c59a7444680bd" translate="yes" xml:space="preserve">
          <source>Returns a complex number with magnitude &lt;code&gt;r&lt;/code&gt; and phase angle &lt;code&gt;theta&lt;/code&gt;.</source>
          <target state="translated">크기 &lt;code&gt;r&lt;/code&gt; 과 위상 각 &lt;code&gt;theta&lt;/code&gt; 를 갖는 복소수를 반환합니다. .</target>
        </trans-unit>
        <trans-unit id="5c2eb94ea57d430b4e4333a82aff75e8100c67be" translate="yes" xml:space="preserve">
          <source>Returns a const reference to the character at specified location &lt;code&gt;pos&lt;/code&gt;.</source>
          <target state="translated">지정된 위치 &lt;code&gt;pos&lt;/code&gt; 의 문자에 대한 const 참조를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="3a79cbfa2d61285b70ab87f34052d42e6b772617" translate="yes" xml:space="preserve">
          <source>Returns a constant of type &lt;code&gt;&lt;a href=&quot;../types/size_t&quot;&gt;std::size_t&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../types/size_t&quot;&gt;std::size_t&lt;/a&gt;&lt;/code&gt; 유형의 상수를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="4d0963a3c6426ccf7883b34bb28e1079108f6d44" translate="yes" xml:space="preserve">
          <source>Returns a copy of &lt;code&gt;dest&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="882cad8c6f486ccf932d4f67b968ca2734465b13" translate="yes" xml:space="preserve">
          <source>Returns a copy of &lt;code&gt;out&lt;/code&gt; after the last sample that was output, that is, end of the sample range.</source>
          <target state="translated">반환의 사본 &lt;code&gt;out&lt;/code&gt; 출력이며, 샘플 범위의 끝이었다 마지막 샘플 후.</target>
        </trans-unit>
        <trans-unit id="940b8a4d5ece7dda312895f7e83a3f14bb17b5ae" translate="yes" xml:space="preserve">
          <source>Returns a copy of the allocator that was passed in as the constructor argument or replaced through the assignment operator.</source>
          <target state="translated">생성자 인수로 전달되었거나 할당 연산자를 통해 대체 된 할당 자의 사본을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="7dfbf02899d5bec78ed9485277f3ecf2f9b4c65d" translate="yes" xml:space="preserve">
          <source>Returns a default-constructed &lt;code&gt;polymorphic_allocator&lt;/code&gt; object.</source>
          <target state="translated">기본 생성 된 &lt;code&gt;polymorphic_allocator&lt;/code&gt; 객체를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="10d3167f9bca50e543fda014512bf607e1bcc462" translate="yes" xml:space="preserve">
          <source>Returns a duration with the largest possible value.</source>
          <target state="translated">가능한 가장 큰 값을 가진 기간을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="8dec05bb80a5b9a36bfdc239a696f226f965ba67" translate="yes" xml:space="preserve">
          <source>Returns a duration with the lowest possible value.</source>
          <target state="translated">가능한 가장 낮은 값으로 기간을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="ed1bcc15a23e8a369c7c6d383a31838ab61ee2ac" translate="yes" xml:space="preserve">
          <source>Returns a function object that compares objects of type std::map::value_type (key-value pairs) by using &lt;code&gt;&lt;a href=&quot;key_comp&quot;&gt;key_comp&lt;/a&gt;&lt;/code&gt; to compare the first components of the pairs.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;key_comp&quot;&gt;key_comp&lt;/a&gt;&lt;/code&gt; 를 사용하여 쌍 의 첫 번째 구성 요소를 비교 하여 std :: map :: value_type (키-값 쌍) 유형의 오브젝트를 비교하는 함수 오브젝트를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="e597c4b17630b85d7e8fb96dd60d367240151608" translate="yes" xml:space="preserve">
          <source>Returns a function object that compares objects of type std::multimap::value_type (key-value pairs) by using &lt;code&gt;&lt;a href=&quot;key_comp&quot;&gt;key_comp&lt;/a&gt;&lt;/code&gt; to compare the first components of the pairs.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;key_comp&quot;&gt;key_comp&lt;/a&gt;&lt;/code&gt; 를 사용하여 쌍 의 첫 번째 구성 요소를 비교 하여 std :: multimap :: value_type (키-값 쌍) 유형의 오브젝트를 비교하는 함수 오브젝트를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="c50eaa26c7fc93d72a8ea2e3e2294758404e4e84" translate="yes" xml:space="preserve">
          <source>Returns a future object associated with the same shared state as &lt;code&gt;*this&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;*this&lt;/code&gt; 와 동일한 공유 상태와 연관된 미래의 객체를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="f98d3f768bac72ebcd99e28a8718c3656053b52b" translate="yes" xml:space="preserve">
          <source>Returns a new valarray of the same size with elements whose positions are shifted by &lt;code&gt;count&lt;/code&gt; elements. The new position of each element is i&amp;minus;count where i is the previous position. The value of shifted in elements is &lt;code&gt;T()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;count&lt;/code&gt; 요소에 의해 위치가 이동 된 요소와 동일한 크기의 새로운 valarray를 반환합니다 . 각 요소의 새로운 위치는 i- 카운트이며 여기서 i는 이전 위치입니다. 요소에서 이동 된 값은 &lt;code&gt;T()&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="271abdf07ddeaf75d3a71561faa0a6c38ad00b2f" translate="yes" xml:space="preserve">
          <source>Returns a new valarray of the same size with elements whose positions are shifted circularly by &lt;code&gt;count&lt;/code&gt; elements. The new position of each element is (i&amp;minus;count) mod s where i is the previous position and s is &lt;code&gt;size()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;count&lt;/code&gt; 요소에 의해 위치가 원형으로 이동하는 요소를 가진 동일한 크기의 새로운 valarray를 반환합니다 . 각 요소의 새 위치는 (i-count) mod s입니다. 여기서 i는 이전 위치이고 s는 &lt;code&gt;size()&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="06586b4501151cb8720a38036b2aff7dc0f5a7e5" translate="yes" xml:space="preserve">
          <source>Returns a new valarray of the same size with values which are acquired by applying function &lt;code&gt;func&lt;/code&gt; to the previous values of the elements.</source>
          <target state="translated">함수 &lt;code&gt;func&lt;/code&gt; 를 요소의 이전 값 에 적용하여 얻은 값과 동일한 크기의 새 valarray를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="874fb83ddc55b65ec08d0e7ebd5f2fe277c5c61c" translate="yes" xml:space="preserve">
          <source>Returns a pair consisting of an iterator to the inserted element, or the already-existing element if no insertion happened, and a &lt;code&gt;bool&lt;/code&gt; denoting whether the insertion took place. True for Insertion, False for No Insertion.</source>
          <target state="translated">삽입 된 요소에 대한 반복자 또는 삽입이 발생하지 않은 경우 이미 존재하는 요소와 삽입이 발생했는지 여부를 나타내는 &lt;code&gt;bool&lt;/code&gt; 로 구성된 쌍을 리턴합니다 . 삽입에 대해서는 True, 삽입 없음에 대해서는 False입니다.</target>
        </trans-unit>
        <trans-unit id="f61cd9bf9097edc37645ff9e78e472dc81b619e4" translate="yes" xml:space="preserve">
          <source>Returns a pair of iterators &lt;code&gt;i, j&lt;/code&gt;, where &lt;code&gt;i&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;../../algorithm/search&quot;&gt;std::search&lt;/a&gt;(first, last, pat_first, pat_last, pred)&lt;/code&gt; and &lt;code&gt;j&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;../../iterator/next&quot;&gt;std::next&lt;/a&gt;(i, &lt;a href=&quot;../../iterator/distance&quot;&gt;std::distance&lt;/a&gt;(pat_first, pat_last))&lt;/code&gt; unless &lt;code&gt;std::search&lt;/code&gt; returned &lt;code&gt;last&lt;/code&gt; (no match), in which case &lt;code&gt;j&lt;/code&gt; equals &lt;code&gt;last&lt;/code&gt; as well.</source>
          <target state="translated">반복자 &lt;code&gt;i, j&lt;/code&gt; 쌍을 리턴합니다 . &lt;code&gt;i&lt;/code&gt; 되는 &lt;code&gt;&lt;a href=&quot;../../algorithm/search&quot;&gt;std::search&lt;/a&gt;(first, last, pat_first, pat_last, pred)&lt;/code&gt; 와 &lt;code&gt;j&lt;/code&gt; 되는 &lt;code&gt;&lt;a href=&quot;../../iterator/next&quot;&gt;std::next&lt;/a&gt;(i, &lt;a href=&quot;../../iterator/distance&quot;&gt;std::distance&lt;/a&gt;(pat_first, pat_last))&lt;/code&gt; 하지 않는 한 &lt;code&gt;std::search&lt;/code&gt; &lt;code&gt;last&lt;/code&gt; 반환되었습니다 (일치하지 않음).이 경우 &lt;code&gt;j&lt;/code&gt; 도 &lt;code&gt;last&lt;/code&gt; 과 같습니다 .</target>
        </trans-unit>
        <trans-unit id="9d528f2083b6e9c859529d0399a8f25b6324a704" translate="yes" xml:space="preserve">
          <source>Returns a path referencing the same file system location as &lt;code&gt;p&lt;/code&gt;, for which &lt;a href=&quot;path/is_absrel&quot;&gt;&lt;code&gt;is_absolute()&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;true&lt;/code&gt;. The non-throwing overload returns default-constructed path if an error occurs.</source>
          <target state="translated">같은 파일 시스템 위치 참조하는 경로 반환 &lt;code&gt;p&lt;/code&gt; 하는, &lt;a href=&quot;path/is_absrel&quot;&gt; &lt;code&gt;is_absolute()&lt;/code&gt; &lt;/a&gt; 인 &lt;code&gt;true&lt;/code&gt; . 비 투사 과부하는 오류가 발생하면 기본 구성 경로를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="f01cf36354038c7c072a1143d7fce9c8c73a6def" translate="yes" xml:space="preserve">
          <source>Returns a pointer &lt;code&gt;p&lt;/code&gt; to a static storage duration object of a type derived from &lt;code&gt;&lt;a href=&quot;memory_resource&quot;&gt;std::pmr::memory_resource&lt;/a&gt;&lt;/code&gt;, with the following properties:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;memory_resource&quot;&gt;std::pmr::memory_resource&lt;/a&gt;&lt;/code&gt; 에서 파생 된 유형의 정적 저장 기간 오브젝트에 대한 포인터 &lt;code&gt;p&lt;/code&gt; 를 리턴합니다. 다음 특성과 함께 합니다.</target>
        </trans-unit>
        <trans-unit id="73e01f0e0725da82fea9d158acb3a7293f22650e" translate="yes" xml:space="preserve">
          <source>Returns a pointer or a reference to the current element.</source>
          <target state="translated">현재 요소에 대한 포인터 또는 참조를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="5010dfcbcaf07d101399327b7e253c1c90fc863b" translate="yes" xml:space="preserve">
          <source>Returns a pointer or reference to the current match.</source>
          <target state="translated">현재 일치에 대한 포인터 또는 참조를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="425f36a8f139e91b1e5f81d3bc4d16590c9b5049" translate="yes" xml:space="preserve">
          <source>Returns a pointer to a &lt;code&gt;memory_resource&lt;/code&gt; that doesn't perform any allocation.</source>
          <target state="translated">할당을 수행하지 않는 &lt;code&gt;memory_resource&lt;/code&gt; 에 대한 포인터를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="8e0548530825742a0c9ccf7b1ba73938e0359f73" translate="yes" xml:space="preserve">
          <source>Returns a pointer to a &lt;code&gt;memory_resource&lt;/code&gt; that uses the global &lt;code&gt;&lt;a href=&quot;new/operator_new&quot;&gt;operator new&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;new/operator_delete&quot;&gt;operator delete&lt;/a&gt;&lt;/code&gt; to allocate memory.</source>
          <target state="translated">전역 &lt;code&gt;&lt;a href=&quot;new/operator_new&quot;&gt;operator new&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;new/operator_delete&quot;&gt;operator delete&lt;/a&gt;&lt;/code&gt; 를 사용 하여 메모리를 할당 하는 &lt;code&gt;memory_resource&lt;/code&gt; 에 대한 포인터를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="8c94bdb1bb0f8cbd2cf6ff3790697b88b7882df2" translate="yes" xml:space="preserve">
          <source>Returns a pointer to a null-terminated byte string that specifies the name of the error category.</source>
          <target state="translated">오류 카테고리의 이름을 지정하는 널 종료 바이트 문자열에 대한 포인터를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="de42586b0859fcdf6349910ffbd482e3d1b0c5e0" translate="yes" xml:space="preserve">
          <source>Returns a pointer to a null-terminated character array with data equivalent to those stored in the string.</source>
          <target state="translated">문자열에 저장된 데이터와 동등한 데이터로 널 종료 문자 배열에 대한 포인터를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="dad3569bcab42bd0a4be81e74a29a7f11e533994" translate="yes" xml:space="preserve">
          <source>Returns a pointer to one past the last element in the initializer list, i.e. &lt;code&gt;begin() + size()&lt;/code&gt;.</source>
          <target state="translated">이니셜 라이저 목록의 마지막 요소를 지나는 포인터, 즉 &lt;code&gt;begin() + size()&lt;/code&gt; 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="959206470c23e4a765bf69c87ccd7d2bf13e59eb" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the associated &lt;code&gt;&lt;a href=&quot;../strstreambuf&quot;&gt;std::strstreambuf&lt;/a&gt;&lt;/code&gt;, casting away its constness (despite the const qualifier on the member function).</source>
          <target state="translated">관련 &lt;code&gt;&lt;a href=&quot;../strstreambuf&quot;&gt;std::strstreambuf&lt;/a&gt;&lt;/code&gt; 대한 포인터를 반환하여 해당 constness를 제거합니다 (구성자 한정자에 const 한정자 임에도 불구하고).</target>
        </trans-unit>
        <trans-unit id="e6ac54904c6a07b3637978a0b736646efc6afaff" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the associated mutex, or a null pointer if there is no associated mutex.</source>
          <target state="translated">연결된 뮤텍스에 대한 포인터를 반환하거나 연결된 뮤텍스가 없으면 null 포인터를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="a16f244e0e59e18d6f043924b343eae9ec25951f" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the beginning of the sequence.</source>
          <target state="translated">시퀀스의 시작 부분에 대한 포인터를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="f6c26924571ec0e6f13d7c8aef8806943c91120c" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the block of memory containing the elements of the container.</source>
          <target state="translated">컨테이너의 요소를 포함하는 메모리 블록에 대한 포인터를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="a4272464b976b7a256cc4c7466f606ea9fd0b9ba" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the first element in the initializer list.</source>
          <target state="translated">이니셜 라이저 목록의 첫 번째 요소에 대한 포인터를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="a0d37902c6c105794cf5675d216d645f74d6ae06" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the managed object or &lt;code&gt;nullptr&lt;/code&gt; if no object is owned.</source>
          <target state="translated">관리 객체에 대한 포인터 또는 객체가없는 경우 &lt;code&gt;nullptr&lt;/code&gt; 을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="20cbb28c57d9c1a1979b2f0d6baf11360c14bc34" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the stored callable function target.</source>
          <target state="translated">저장된 호출 가능 함수 대상에 대한 포인터를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="6bd5301b4d36bdb16542a82649ecb95ef4cf17ce" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the stored exception, if any.</source>
          <target state="translated">저장된 예외에 대한 포인터를 리턴합니다 (있는 경우).</target>
        </trans-unit>
        <trans-unit id="d476bc044773606e462dca24f10d2c9f5a01727f" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the textual description of the system error code &lt;code&gt;errnum&lt;/code&gt;, identical to the description that would be printed by &lt;code&gt;&lt;a href=&quot;../../io/c/perror&quot;&gt;std::perror()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../../io/c/perror&quot;&gt;std::perror()&lt;/a&gt;&lt;/code&gt; 의해 인쇄되는 설명과 동일하게 시스템 오류 코드 &lt;code&gt;errnum&lt;/code&gt; 의 텍스트 설명에 대한 포인터를 리턴합니다. .</target>
        </trans-unit>
        <trans-unit id="619e808e304792b4daf7a340d59928fd3c8e94ed" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the underlying &lt;code&gt;std::basic_syncbuf&lt;/code&gt;.</source>
          <target state="translated">기본 &lt;code&gt;std::basic_syncbuf&lt;/code&gt; 대한 포인터를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="d1a33accdc70e7b133677bf7dae44f38c54f71d5" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the underlying array serving as character storage. The pointer is such that the range &lt;code&gt;[data(); data() + size())&lt;/code&gt; is valid and the values in it correspond to the values stored in the string.</source>
          <target state="translated">문자 스토리지 역할을하는 기본 배열에 대한 포인터를 반환합니다. 포인터는 &lt;code&gt;[data(); data() + size())&lt;/code&gt; 는 유효하며 그 값은 문자열에 저장된 값과 일치합니다.</target>
        </trans-unit>
        <trans-unit id="2e82d5ecec9a6b6b185289c81c2c2fb649e8678c" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the underlying character array. The pointer is such that the range [data(); data() + size()) is valid and the values in it correspond to the values of the view.</source>
          <target state="translated">기본 문자 배열에 대한 포인터를 반환합니다. 포인터는 [data (); data () + size ())는 유효하며 그 값은 뷰의 값과 일치합니다.</target>
        </trans-unit>
        <trans-unit id="4e0e4313d38e0679677e13b7fea64fedc116deeb" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the underlying memory resource</source>
          <target state="translated">기본 메모리 리소스에 대한 포인터를 반환</target>
        </trans-unit>
        <trans-unit id="9e9abf103eb99b7dcfcc50105afadbd5bc180e3c" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the upstream memory resource</source>
          <target state="translated">업스트림 메모리 리소스에 대한 포인터를 반환</target>
        </trans-unit>
        <trans-unit id="0a7cfc00154c5d3f847b5c024451c910991d5fca" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the upstream memory resource. This is the same value as the &lt;code&gt;upstream&lt;/code&gt; argument passed to the constructor of this object.</source>
          <target state="translated">업스트림 메모리 리소스에 대한 포인터를 반환합니다. 이것은 &lt;code&gt;upstream&lt;/code&gt; 과 동일한 값입니다 이 객체의 생성자에 전달 인수 입니다.</target>
        </trans-unit>
        <trans-unit id="99942d493edcf9bc5732d65d313920b2eeda49fa" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the wrapped &lt;code&gt;&lt;a href=&quot;../basic_streambuf&quot;&gt;std::basic_streambuf&lt;/a&gt;&lt;/code&gt;, obtained by calling &lt;a href=&quot;../basic_syncbuf/get_wrapped&quot;&gt;&lt;code&gt;get_wrapped()&lt;/code&gt;&lt;/a&gt; on the underlying &lt;code&gt;std::basic_syncbuf&lt;/code&gt;.</source>
          <target state="translated">기본이되는 &lt;code&gt;std::basic_syncbuf&lt;/code&gt; 에서 &lt;a href=&quot;../basic_syncbuf/get_wrapped&quot;&gt; &lt;code&gt;get_wrapped()&lt;/code&gt; &lt;/a&gt; 를 호출 하여, 랩 된 &lt;code&gt;&lt;a href=&quot;../basic_streambuf&quot;&gt;std::basic_streambuf&lt;/a&gt;&lt;/code&gt; 대한 포인터를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="b2701742b82d1fb1da31f76f241df07bd12fff04" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the wrapped &lt;code&gt;&lt;a href=&quot;../basic_streambuf&quot;&gt;std::basic_streambuf&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">랩핑 된 &lt;code&gt;&lt;a href=&quot;../basic_streambuf&quot;&gt;std::basic_streambuf&lt;/a&gt;&lt;/code&gt; 대한 포인터를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="5ff3fa8082b5fd8de8830e4e32c32aced092f249" translate="yes" xml:space="preserve">
          <source>Returns a pseudo-random integral value between &lt;code&gt;​0​&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;rand_max&quot;&gt;RAND_MAX&lt;/a&gt;&lt;/code&gt; (0 and &lt;code&gt;RAND_MAX&lt;/code&gt; included).</source>
          <target state="translated">간의 의사 랜덤 정수 리턴 값 &lt;code&gt;​0​&lt;/code&gt; 과 &lt;code&gt;&lt;a href=&quot;rand_max&quot;&gt;RAND_MAX&lt;/a&gt;&lt;/code&gt; (0 &lt;code&gt;RAND_MAX&lt;/code&gt; 가 포함 참조).</target>
        </trans-unit>
        <trans-unit id="4ea65e7d825b34532f11cbd83f6e5aacc16ddb65" translate="yes" xml:space="preserve">
          <source>Returns a range containing all elements equivalent to &lt;code&gt;value&lt;/code&gt; in the range &lt;code&gt;[first, last)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;[first, last)&lt;/code&gt; 범위의 &lt;code&gt;value&lt;/code&gt; 와 동등한 모든 요소를 ​​포함하는 범위를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="7bcbccd9f884d3cfa0ab2d8b09eb1aa0298e15b7" translate="yes" xml:space="preserve">
          <source>Returns a range containing all elements with the given key in the container. The range is defined by two iterators, one pointing to the first element that is</source>
          <target state="translated">컨테이너에 주어진 키를 가진 모든 요소를 ​​포함하는 범위를 반환합니다. 범위는 두 개의 반복자로 정의되며, 하나는 첫 번째 요소를 가리 킵니다.</target>
        </trans-unit>
        <trans-unit id="22a7e4d6cb9b903ac910558116f99ad67e4b32fd" translate="yes" xml:space="preserve">
          <source>Returns a reference or pointer to the element previous to &lt;code&gt;current&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;current&lt;/code&gt; 이전 요소에 대한 참조 또는 포인터를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="0ed2a2402d606adae64c28820fe5b226bdf11b09" translate="yes" xml:space="preserve">
          <source>Returns a reference to the &quot;C&quot; locale.</source>
          <target state="translated">&quot;C&quot;로캘에 대한 참조를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="e4cb6a18dd4195785792bd0db2a04902067ab807" translate="yes" xml:space="preserve">
          <source>Returns a reference to the &lt;code&gt;idx&lt;/code&gt;-th element of the sequence. The behavior is undefined if &lt;code&gt;idx&lt;/code&gt; is out of range (i.e., if it is greater than or equal to &lt;code&gt;size()&lt;/code&gt;).</source>
          <target state="translated">시퀀스 의 &lt;code&gt;idx&lt;/code&gt; -th 요소에 대한 참조를 리턴합니다 . &lt;code&gt;idx&lt;/code&gt; 가 범위를 벗어난 경우 (즉, &lt;code&gt;size()&lt;/code&gt; 이상인 경우) 동작이 정의되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="e4671426e3ffd64afe4bc49db3db05d0d172617f" translate="yes" xml:space="preserve">
          <source>Returns a reference to the character at specified location &lt;code&gt;pos&lt;/code&gt;. Bounds checking is performed, exception of type &lt;code&gt;&lt;a href=&quot;../../error/out_of_range/out_of_range&quot;&gt;std::out_of_range&lt;/a&gt;&lt;/code&gt; will be thrown on invalid access.</source>
          <target state="translated">지정된 위치 &lt;code&gt;pos&lt;/code&gt; 의 문자에 대한 참조를 리턴합니다 . 바운드 검사가 수행 되고 유효하지 않은 액세스에서 &lt;code&gt;&lt;a href=&quot;../../error/out_of_range/out_of_range&quot;&gt;std::out_of_range&lt;/a&gt;&lt;/code&gt; 유형의 예외 가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="8485acf199bdc9bdeaa1e3d669de04e628a02081" translate="yes" xml:space="preserve">
          <source>Returns a reference to the character at specified location &lt;code&gt;pos&lt;/code&gt;. No bounds checking is performed. If &lt;code&gt;pos &amp;gt; size()&lt;/code&gt;, the behavior is undefined.</source>
          <target state="translated">지정된 위치 &lt;code&gt;pos&lt;/code&gt; 의 문자에 대한 참조를 리턴합니다 . 경계 검사가 수행되지 않습니다. 경우 &lt;code&gt;pos &amp;gt; size()&lt;/code&gt; , 행동은 정의되지 않는다.</target>
        </trans-unit>
        <trans-unit id="2dbaafa3b108acdcfe5d3b3487a7bc102e963f13" translate="yes" xml:space="preserve">
          <source>Returns a reference to the element at specified location &lt;code&gt;pos&lt;/code&gt;, with bounds checking.</source>
          <target state="translated">경계를 확인 하여 지정된 위치 &lt;code&gt;pos&lt;/code&gt; 의 요소에 대한 참조를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="b2665679f497339d0516c0ad5a688e867f71aa37" translate="yes" xml:space="preserve">
          <source>Returns a reference to the element at specified location &lt;code&gt;pos&lt;/code&gt;. No bounds checking is performed.</source>
          <target state="translated">지정된 위치 &lt;code&gt;pos&lt;/code&gt; 의 요소에 대한 참조를 리턴합니다 . 경계 검사가 수행되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="db154e8ab62b6272156b1705e3eb48ea36661560" translate="yes" xml:space="preserve">
          <source>Returns a reference to the element at specified relative location.</source>
          <target state="translated">지정된 상대 위치의 요소에 대한 참조를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="40b11148e9f16b408786d3ab577d77a530ef2afd" translate="yes" xml:space="preserve">
          <source>Returns a reference to the facet. The reference returned by this function is valid as long as any &lt;code&gt;&lt;a href=&quot;locale&quot;&gt;std::locale&lt;/a&gt;&lt;/code&gt; object exists that implements &lt;code&gt;Facet&lt;/code&gt;.</source>
          <target state="translated">패싯에 대한 참조를 리턴합니다. 이 함수가 리턴 한 참조는 &lt;code&gt;Facet&lt;/code&gt; 를 구현 하는 &lt;code&gt;&lt;a href=&quot;locale&quot;&gt;std::locale&lt;/a&gt;&lt;/code&gt; 오브젝트가 존재하는 한 유효합니다 .</target>
        </trans-unit>
        <trans-unit id="7d828e0486984b6d976355023bfcaeb9faf1ec60" translate="yes" xml:space="preserve">
          <source>Returns a reference to the first element in the container.</source>
          <target state="translated">컨테이너의 첫 번째 요소에 대한 참조를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="5c12b4cdecf8215d253b8464d67f21ea11028fe9" translate="yes" xml:space="preserve">
          <source>Returns a reference to the first element in the span.</source>
          <target state="translated">범위의 첫 번째 요소에 대한 참조를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="97b513b9f306c41c7d8fe7059ec8dfe2aeaaa8f7" translate="yes" xml:space="preserve">
          <source>Returns a reference to the last element in the span.</source>
          <target state="translated">범위의 마지막 요소에 대한 참조를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="646a2d3fd42a91e8ad7197c63c0f185cd748f5b9" translate="yes" xml:space="preserve">
          <source>Returns a reference to the mapped value of the element with key equivalent to &lt;code&gt;key&lt;/code&gt;. If no such element exists, an exception of type &lt;code&gt;&lt;a href=&quot;../../error/out_of_range/out_of_range&quot;&gt;std::out_of_range&lt;/a&gt;&lt;/code&gt; is thrown.</source>
          <target state="translated">열쇠 동등한 요소의 맵핑 된 값을 기준 리턴 &lt;code&gt;key&lt;/code&gt; . 이러한 요소가 없으면 &lt;code&gt;&lt;a href=&quot;../../error/out_of_range/out_of_range&quot;&gt;std::out_of_range&lt;/a&gt;&lt;/code&gt; 유형의 예외 가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="d170667d4ac4fe5d7797a97703e4b3d937cef369" translate="yes" xml:space="preserve">
          <source>Returns a reference to the value that is mapped to a key equivalent to &lt;code&gt;key&lt;/code&gt;, performing an insertion if such key does not already exist.</source>
          <target state="translated">반환 값에 해당하는 키에 대응하는 값에 대한 참조 &lt;code&gt;key&lt;/code&gt; 등의 키가 존재하지 않는 경우의 삽입을 수행.</target>
        </trans-unit>
        <trans-unit id="d34824e7e6ac6749c5f13f5cccf791766b7b08f5" translate="yes" xml:space="preserve">
          <source>Returns a reverse iterator to the character following the last character of the reversed string. It corresponds to the character preceding the first character of the non-reversed string. This character acts as a placeholder, attempting to access it results in undefined behavior.</source>
          <target state="translated">반전 된 문자열의 마지막 문자 다음에 오는 문자에 대해 역 반복자를 리턴합니다. 반전되지 않은 문자열의 첫 번째 문자 앞에 오는 문자에 해당합니다. 이 캐릭터는 플레이스 홀더 역할을하며 액세스하려고하면 정의되지 않은 동작이 발생합니다.</target>
        </trans-unit>
        <trans-unit id="3656633a67960294e04771fc73f5b90d8313f859" translate="yes" xml:space="preserve">
          <source>Returns a reverse iterator to the character following the last character of the reversed view. It corresponds to the character preceding the first character of the non-reversed view. This character acts as a placeholder, attempting to access it results in undefined behavior.</source>
          <target state="translated">반전 된 뷰의 마지막 문자 다음에 오는 문자로 역 반복자를 리턴합니다. 반전되지 않은보기의 첫 번째 문자 앞에 오는 문자에 해당합니다. 이 캐릭터는 플레이스 홀더 역할을하며 액세스하려고하면 정의되지 않은 동작이 발생합니다.</target>
        </trans-unit>
        <trans-unit id="6e776c5a06edbf66c14ca8e3edcd3f32fa3b6f7d" translate="yes" xml:space="preserve">
          <source>Returns a reverse iterator to the element following the last element of the reversed container. It corresponds to the element preceding the first element of the non-reversed container. This element acts as a placeholder, attempting to access it results in undefined behavior.</source>
          <target state="translated">역 컨테이너의 마지막 요소 다음에 오는 요소의 역 반복자를 리턴합니다. 반전되지 않은 컨테이너의 첫 번째 요소 앞에있는 요소에 해당합니다. 이 요소는 자리 표시 자 역할을하여 액세스하려고하면 정의되지 않은 동작이 발생합니다.</target>
        </trans-unit>
        <trans-unit id="e90548751849ff411afa18606cc114c74e350044" translate="yes" xml:space="preserve">
          <source>Returns a reverse iterator to the element following the last element of the reversed span. It corresponds to the element preceding the first element of the non-reversed span. This element acts as a placeholder, attempting to access it results in undefined behavior.</source>
          <target state="translated">반전 된 범위의 마지막 요소 다음에 오는 요소에 대해 역 반복자를 반환합니다. 반전되지 않은 범위의 첫 번째 요소 앞에 오는 요소에 해당합니다. 이 요소는 자리 표시 자 역할을하여 액세스하려고하면 정의되지 않은 동작이 발생합니다.</target>
        </trans-unit>
        <trans-unit id="f6ba54c6f29cc40a4cb0fe0bff90ad373f071710" translate="yes" xml:space="preserve">
          <source>Returns a reverse iterator to the first character of the reversed string. It corresponds to the last character of the non-reversed string.</source>
          <target state="translated">반전 된 문자열의 첫 문자에 대해 역 반복기를 리턴합니다. 반전되지 않은 문자열의 마지막 문자에 해당합니다.</target>
        </trans-unit>
        <trans-unit id="32d3c95198e3442e4602619163e5f3a9aef69381" translate="yes" xml:space="preserve">
          <source>Returns a reverse iterator to the first character of the reversed view. It corresponds to the last character of the non-reversed view.</source>
          <target state="translated">반전 된보기의 첫 번째 문자로 역 반복기를 리턴합니다. 반전되지 않은 뷰의 마지막 문자에 해당합니다.</target>
        </trans-unit>
        <trans-unit id="9ba58e4344771a7422534d10f9de9f0066c77731" translate="yes" xml:space="preserve">
          <source>Returns a reverse iterator to the first element of the reversed container. It corresponds to the last element of the non-reversed container. If the container is empty, the returned iterator is equal to &lt;code&gt;&lt;a href=&quot;rend&quot;&gt;rend()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">반전 된 컨테이너의 첫 번째 요소에 역 반복자를 반환합니다. 반전되지 않은 컨테이너의 마지막 요소에 해당합니다. 컨테이너가 비어 있으면 반환 된 반복자는 &lt;code&gt;&lt;a href=&quot;rend&quot;&gt;rend()&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="dd9d865bb5369a4a4318a00eeefea3103301d43f" translate="yes" xml:space="preserve">
          <source>Returns a reverse iterator to the first element of the reversed span. It corresponds to the last element of the non-reversed span. If the span is empty, the returned iterator is equal to &lt;code&gt;rend()&lt;/code&gt;.</source>
          <target state="translated">역 스팬의 첫 번째 요소에 역 반복자를 반환합니다. 반전되지 않은 범위의 마지막 요소에 해당합니다. 범위가 비어 있으면 반환 된 반복자는 &lt;code&gt;rend()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e032cdd7b192f435986dc2e4de6428bf733bea7f" translate="yes" xml:space="preserve">
          <source>Returns a rvalue-reference or pointer to the current element.</source>
          <target state="translated">rvalue-reference 또는 현재 요소에 대한 포인터를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="fe181d9986125a7c774aa98095351ee1179c50da" translate="yes" xml:space="preserve">
          <source>Returns a string describing the assertion level of the violated contract.</source>
          <target state="translated">위반 된 계약의 어설 션 레벨을 설명하는 문자열을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="2cdd203798f9286fe3ab20e1299670ed579e1b69" translate="yes" xml:space="preserve">
          <source>Returns a string describing the given error condition for the error category represented by &lt;code&gt;*this&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;*this&lt;/code&gt; 로 표시되는 오류 범주에 대해 지정된 오류 조건을 설명하는 문자열을 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="a6ceb037e01c531ca11be8953bed0bac16f9646d" translate="yes" xml:space="preserve">
          <source>Returns a string representing the indicated sub-match.</source>
          <target state="translated">표시된 부분 일치를 나타내는 문자열을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="49b612ca607ffd20db39e26dc4aa3c96e7319403" translate="yes" xml:space="preserve">
          <source>Returns a string representing the specified match or sub match.</source>
          <target state="translated">지정된 일치 또는 하위 일치를 나타내는 문자열을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="03ac5a4f212325483c6400c65d1609005b779e1e" translate="yes" xml:space="preserve">
          <source>Returns a substring &lt;code&gt;[pos, pos+count)&lt;/code&gt;. If the requested substring extends past the end of the string, or if &lt;code&gt;count == npos&lt;/code&gt;, the returned substring is &lt;code&gt;[pos, &lt;/code&gt;&lt;a href=&quot;size&quot;&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/a&gt;&lt;code&gt;)&lt;/code&gt;.</source>
          <target state="translated">하위 문자열 &lt;code&gt;[pos, pos+count)&lt;/code&gt; 반환합니다 . 요청 된 하위 문자열이 문자열의 끝을지나 연장되거나 &lt;code&gt;count == npos&lt;/code&gt; 인 경우 반환 된 하위 문자열은 &lt;code&gt;[pos, &lt;/code&gt; &lt;a href=&quot;size&quot;&gt; &lt;code&gt;size()&lt;/code&gt; &lt;/a&gt; &lt;code&gt;)&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="910086cfe4a1dfcf618515bdc47158c3676aa6cb" translate="yes" xml:space="preserve">
          <source>Returns a time point representing the current point in time.</source>
          <target state="translated">현재 시점을 나타내는 시점을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="290c0f71c0ee220714bce8a060889a5ee63fa289" translate="yes" xml:space="preserve">
          <source>Returns a time point representing the current point in time. The result is calculated as if by &lt;code&gt;&lt;a href=&quot;from_sys&quot;&gt;std::chrono::utc_clock::from_sys&lt;/a&gt;(&lt;a href=&quot;../system_clock/now&quot;&gt;std::chrono::system_clock::now&lt;/a&gt;())&lt;/code&gt;. Implementations may use a more accurate value of UTC time.</source>
          <target state="translated">현재 시점을 나타내는 시점을 반환합니다. 결과는 &lt;code&gt;&lt;a href=&quot;from_sys&quot;&gt;std::chrono::utc_clock::from_sys&lt;/a&gt;(&lt;a href=&quot;../system_clock/now&quot;&gt;std::chrono::system_clock::now&lt;/a&gt;())&lt;/code&gt; 의해 계산됩니다 . 구현시보다 정확한 UTC 시간 값을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="438720a98b939f160da72cb0ee999770274722ff" translate="yes" xml:space="preserve">
          <source>Returns a time point representing the current point in time. The result is calculated as if by &lt;code&gt;&lt;a href=&quot;from_utc&quot;&gt;std::chrono::gps_clock::from_utc&lt;/a&gt;(&lt;a href=&quot;../utc_clock/now&quot;&gt;std::chrono::utc_clock::now&lt;/a&gt;())&lt;/code&gt;. Implementations may use a more accurate value of GPS time.</source>
          <target state="translated">현재 시점을 나타내는 시점을 반환합니다. 결과는 &lt;code&gt;&lt;a href=&quot;from_utc&quot;&gt;std::chrono::gps_clock::from_utc&lt;/a&gt;(&lt;a href=&quot;../utc_clock/now&quot;&gt;std::chrono::utc_clock::now&lt;/a&gt;())&lt;/code&gt; 의해 계산됩니다 . 구현시보다 정확한 GPS 시간 값을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="cb36ff441435e0d54ebea93ab202922aa250be49" translate="yes" xml:space="preserve">
          <source>Returns a time point representing the current point in time. The result is calculated as if by &lt;code&gt;&lt;a href=&quot;from_utc&quot;&gt;std::chrono::tai_clock::from_utc&lt;/a&gt;(&lt;a href=&quot;../utc_clock/now&quot;&gt;std::chrono::utc_clock::now&lt;/a&gt;())&lt;/code&gt;. Implementations may use a more accurate value of TAI time.</source>
          <target state="translated">현재 시점을 나타내는 시점을 반환합니다. 결과는 &lt;code&gt;&lt;a href=&quot;from_utc&quot;&gt;std::chrono::tai_clock::from_utc&lt;/a&gt;(&lt;a href=&quot;../utc_clock/now&quot;&gt;std::chrono::utc_clock::now&lt;/a&gt;())&lt;/code&gt; 의해 계산됩니다 . 구현시보다 정확한 TAI 시간 값을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3b5a4c5644a89e01b774bcce4d2365ade1b73f35" translate="yes" xml:space="preserve">
          <source>Returns a time zone pointer for the default time zone (UTC).</source>
          <target state="translated">기본 시간대 (UTC)에 대한 시간대 포인터를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="a8403fc0c4e506c29ae4218ebecb8e7716db67ad" translate="yes" xml:space="preserve">
          <source>Returns a unique (program-wide) index value that can be used to access one &lt;code&gt;long&lt;/code&gt; and one &lt;code&gt;void*&lt;/code&gt; elements in the private storage of &lt;code&gt;std::ios_base&lt;/code&gt; by calling &lt;code&gt;&lt;a href=&quot;iword&quot;&gt;iword()&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;pword&quot;&gt;pword()&lt;/a&gt;&lt;/code&gt;. The call to &lt;code&gt;xalloc&lt;/code&gt; does not allocate memory.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;iword&quot;&gt;iword()&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;pword&quot;&gt;pword()&lt;/a&gt;&lt;/code&gt; 를 호출 하여 &lt;code&gt;std::ios_base&lt;/code&gt; 의 개인 저장소에있는 하나의 &lt;code&gt;long&lt;/code&gt; 및 하나의 &lt;code&gt;void*&lt;/code&gt; 요소에 액세스하는 데 사용할 수있는 고유 한 (프로그램 전체) 색인 값을 리턴합니다 . 를 호출 &lt;code&gt;xalloc&lt;/code&gt; 는 메모리를 할당하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="4afdb1bce5fa35b070eb3ea8cfb88eb4d3e33273" translate="yes" xml:space="preserve">
          <source>Returns a value in the closed interval &lt;code&gt;[E::min(), E::max()]&lt;/code&gt;. Has amortized constant complexity.</source>
          <target state="translated">닫힌 간격 &lt;code&gt;[E::min(), E::max()]&lt;/code&gt; 의 값을 반환합니다 . 지속적인 복잡성을 상실했습니다.</target>
        </trans-unit>
        <trans-unit id="d874f19a26f9ad6764f9c8d0632e7a9722b58449" translate="yes" xml:space="preserve">
          <source>Returns a value in the closed interval &lt;code&gt;[G::min(), G::max()]&lt;/code&gt;. Has amortized constant complexity.</source>
          <target state="translated">닫힌 간격 &lt;code&gt;[G::min(), G::max()]&lt;/code&gt; 의 값을 반환합니다 . 지속적인 복잡성을 상실했습니다.</target>
        </trans-unit>
        <trans-unit id="b3fc4ae486fd2727b227ca55636203554c6ce098" translate="yes" xml:space="preserve">
          <source>Returns a value not equivalent to any valid value of type &lt;code&gt;char_type&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;char_type&lt;/code&gt; 유형의 유효한 값과 같지 않은 값을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="33f9bb911051172743f8a9431ca9627ef632db68" translate="yes" xml:space="preserve">
          <source>Returns a value of &lt;code&gt;&lt;a href=&quot;id&quot;&gt;std::thread::id&lt;/a&gt;&lt;/code&gt; identifying the thread associated with &lt;code&gt;*this&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;*this&lt;/code&gt; 와 연관된 스레드를 식별하는 &lt;code&gt;&lt;a href=&quot;id&quot;&gt;std::thread::id&lt;/a&gt;&lt;/code&gt; 값을 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="d411b1f72a375b561985434690018ec29f250373" translate="yes" xml:space="preserve">
          <source>Returns a value of type &lt;code&gt;&lt;a href=&quot;../../types/size_t&quot;&gt;std::size_t&lt;/a&gt;&lt;/code&gt; that represents the hash value of &lt;code&gt;key&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;key&lt;/code&gt; 의 해시 값을 나타내는 &lt;code&gt;&lt;a href=&quot;../../types/size_t&quot;&gt;std::size_t&lt;/a&gt;&lt;/code&gt; 유형의 값을 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="442e42c7b7955540a814b6a421ae4c5ecda6a7bc" translate="yes" xml:space="preserve">
          <source>Returns a value of type &lt;code&gt;&lt;a href=&quot;../types/size_t&quot;&gt;std::size_t&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../types/size_t&quot;&gt;std::size_t&lt;/a&gt;&lt;/code&gt; 유형의 값을 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="e6e56a50f45a92b52174ad0d943d9c6e8d34eaa8" translate="yes" xml:space="preserve">
          <source>Returns a value of type &lt;code&gt;new_type&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;new_type&lt;/code&gt; 유형의 값을 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="a11264ea73e8b71499dc4fa4ab0fbc55c8a65ced" translate="yes" xml:space="preserve">
          <source>Returns a view of the substring &lt;code&gt;[pos, pos + rcount)&lt;/code&gt;, where &lt;code&gt;rcount&lt;/code&gt; is the smaller of &lt;code&gt;count&lt;/code&gt; and &lt;code&gt;size() - pos&lt;/code&gt;.</source>
          <target state="translated">하위 문자열 &lt;code&gt;[pos, pos + rcount)&lt;/code&gt; 의 뷰를 리턴합니다 . 여기서 &lt;code&gt;rcount&lt;/code&gt; 는 &lt;code&gt;count&lt;/code&gt; 및 &lt;code&gt;size() - pos&lt;/code&gt; -pos 보다 작습니다 .</target>
        </trans-unit>
        <trans-unit id="dc33f9a01fa7703049b843df04316f99e95a0756" translate="yes" xml:space="preserve">
          <source>Returns a zero-length duration.</source>
          <target state="translated">길이가 0 인 기간을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="5028852b7a9f3094e44699116e8b1a3b55283adb" translate="yes" xml:space="preserve">
          <source>Returns a zero-length representation.</source>
          <target state="translated">길이가 0 인 표현을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="09d077b32c2691b6d7fffbccdef2f724c0697878" translate="yes" xml:space="preserve">
          <source>Returns an absolute (although not necessarily canonical) pathname referencing the same file as &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;p&lt;/code&gt; 와 동일한 파일을 참조하는 절대 경로 이름 (정규적인 것은 아니지만)을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="097c5a99872db70d1352c8ee1e7080a670fac084" translate="yes" xml:space="preserve">
          <source>Returns an explanatory byte string. This explanatory string contains the explanatory string passed at the time of construction. Implementations are encouraged to include the pathnames of &lt;code&gt;&lt;a href=&quot;path&quot;&gt;path1()&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;path&quot;&gt;path2()&lt;/a&gt;&lt;/code&gt; in native format and the &lt;code&gt;&lt;a href=&quot;../../error/system_error/what&quot;&gt;std::system_error::what()&lt;/a&gt;&lt;/code&gt; string inside the returned string as well.</source>
          <target state="translated">설명 바이트 문자열을 반환합니다. 이 설명 문자열에는 구성시 전달 된 설명 문자열이 포함되어 있습니다. 구현시 기본 형식 으로 &lt;code&gt;&lt;a href=&quot;path&quot;&gt;path1()&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;path&quot;&gt;path2()&lt;/a&gt;&lt;/code&gt; 의 경로 이름 과 리턴 된 문자열 안에 &lt;code&gt;&lt;a href=&quot;../../error/system_error/what&quot;&gt;std::system_error::what()&lt;/a&gt;&lt;/code&gt; 문자열을 포함시키는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="6d4e35eb62ff8430d06c060cd2a7c698e9eb925b" translate="yes" xml:space="preserve">
          <source>Returns an explanatory message for the stored error code and error category. Effectively calls &lt;code&gt;category().message(value())&lt;/code&gt;.</source>
          <target state="translated">저장된 오류 코드 및 오류 범주에 대한 설명 메시지를 반환합니다. 효과적으로 &lt;code&gt;category().message(value())&lt;/code&gt; 호출합니다 .</target>
        </trans-unit>
        <trans-unit id="169011eab0784e2bb8ba4076138b46b4cdf5b672" translate="yes" xml:space="preserve">
          <source>Returns an implementation defined null-terminated character string containing the name of the type. No guarantees are given; in particular, the returned string can be identical for several types and change between invocations of the same program.</source>
          <target state="translated">유형의 이름을 포함하는 구현 정의 널 종료 문자열을 리턴합니다. 보장은 없습니다. 특히, 리턴 된 문자열은 여러 유형에 대해 동일 할 수 있으며 동일한 프로그램의 호출간에 변경 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b27aa6c95080a23f5c796aab8a422ae595b3a704" translate="yes" xml:space="preserve">
          <source>Returns an implementation-defined string describing the predicate of the violated contract.</source>
          <target state="translated">위반 된 계약의 술어를 설명하는 구현 정의 문자열을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="47ef43bd183c1221f7d6751fb0df8366104ed1a6" translate="yes" xml:space="preserve">
          <source>Returns an iterator pointing to the first element in the range &lt;code&gt;[first, last)&lt;/code&gt; that is</source>
          <target state="translated">반복자 범위의 첫 번째 요소를 가리키는 반환 &lt;code&gt;[first, last)&lt;/code&gt; 즉</target>
        </trans-unit>
        <trans-unit id="d8ed8f52c7f9d8abcfffa37638ec3826bcee39d2" translate="yes" xml:space="preserve">
          <source>Returns an iterator referring to the first &lt;code&gt;std::chrono::tzdb&lt;/code&gt; in the container.</source>
          <target state="translated">컨테이너 의 첫 번째 &lt;code&gt;std::chrono::tzdb&lt;/code&gt; 를 참조하는 반복자를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="cac8796e5d454984fb57ed6a0cf3316880617201" translate="yes" xml:space="preserve">
          <source>Returns an iterator to the beginning of the given container &lt;code&gt;c&lt;/code&gt; or array &lt;code&gt;array&lt;/code&gt;. These templates rely on &lt;code&gt;C::begin()&lt;/code&gt; having a reasonable implementation.</source>
          <target state="translated">지정된 컨테이너 &lt;code&gt;c&lt;/code&gt; 또는 배열 &lt;code&gt;array&lt;/code&gt; 의 선두에 반복자를 돌려 줍니다. 이 템플릿은 &lt;code&gt;C::begin()&lt;/code&gt; 을 사용하여 구현이 합리적입니다.</target>
        </trans-unit>
        <trans-unit id="200111369d1eeb84564640727237304222749952" translate="yes" xml:space="preserve">
          <source>Returns an iterator to the beginning of the list of sub-matches. If match was successful, the iterator will point to the entire matched expression.</source>
          <target state="translated">하위 일치 목록의 시작 부분으로 반복자를 리턴합니다. 일치하는 경우 반복자는 전체 일치 된 표현식을 가리 킵니다.</target>
        </trans-unit>
        <trans-unit id="8a18ce23dbd62f8766ed62924720905ca243b4c0" translate="yes" xml:space="preserve">
          <source>Returns an iterator to the character following the last character of the string. This character acts as a placeholder, attempting to access it results in undefined behavior.</source>
          <target state="translated">문자열의 마지막 문자 뒤의 문자에 대한 반복자를 리턴합니다. 이 캐릭터는 플레이스 홀더 역할을하며 액세스하려고하면 정의되지 않은 동작이 발생합니다.</target>
        </trans-unit>
        <trans-unit id="88e70725cfc468dda90f1b4f0b4f105f78e7a287" translate="yes" xml:space="preserve">
          <source>Returns an iterator to the character following the last character of the view. This character acts as a placeholder, attempting to access it results in undefined behavior.</source>
          <target state="translated">뷰의 마지막 문자 다음에 오는 문자로 반복자를 리턴합니다. 이 캐릭터는 플레이스 홀더 역할을하며 액세스하려고하면 정의되지 않은 동작이 발생합니다.</target>
        </trans-unit>
        <trans-unit id="aa3c2f196f36a90d5196d932caf1b9332d4a4d39" translate="yes" xml:space="preserve">
          <source>Returns an iterator to the element before the first element of the container. This element acts as a placeholder, attempting to access it results in undefined behavior. The only usage cases are in functions &lt;code&gt;&lt;a href=&quot;insert_after&quot;&gt;insert_after()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;emplace_after&quot;&gt;emplace_after()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;erase_after&quot;&gt;erase_after()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;splice_after&quot;&gt;splice_after()&lt;/a&gt;&lt;/code&gt; and the increment operator: incrementing the before-begin iterator gives exactly the same iterator as obtained from &lt;code&gt;&lt;a href=&quot;begin&quot;&gt;begin()&lt;/a&gt;&lt;/code&gt;/&lt;code&gt;&lt;a href=&quot;begin&quot;&gt;cbegin()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">컨테이너의 첫 번째 요소 앞의 요소에 대한 반복자를 반환합니다. 이 요소는 자리 표시 자 역할을하여 액세스하려고하면 정의되지 않은 동작이 발생합니다. 유일한 사용 사례는 &lt;code&gt;&lt;a href=&quot;insert_after&quot;&gt;insert_after()&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;emplace_after&quot;&gt;emplace_after()&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;erase_after&quot;&gt;erase_after()&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;splice_after&quot;&gt;splice_after()&lt;/a&gt;&lt;/code&gt; 및 증가 연산자에 있습니다 : 시작 전 반복기를 증가 시키면 &lt;code&gt;&lt;a href=&quot;begin&quot;&gt;begin()&lt;/a&gt;&lt;/code&gt; / &lt;code&gt;&lt;a href=&quot;begin&quot;&gt;cbegin()&lt;/a&gt;&lt;/code&gt; 에서 얻은 것과 동일한 반복자를 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="c2b7e59f3a5a7cfd9bff3b170a41f303af54e526" translate="yes" xml:space="preserve">
          <source>Returns an iterator to the element following the last element of the bucket with index &lt;code&gt;n&lt;/code&gt;. . This element acts as a placeholder, attempting to access it results in undefined behavior.</source>
          <target state="translated">인덱스가 &lt;code&gt;n&lt;/code&gt; 인 버킷의 마지막 요소 다음에 나오는 요소에 대해 반복자를 반환합니다 . . 이 요소는 자리 표시 자 역할을하여 액세스하려고하면 정의되지 않은 동작이 발생합니다.</target>
        </trans-unit>
        <trans-unit id="528b29ca7f9c6500dcdd37a0040d44c4d9d99fc8" translate="yes" xml:space="preserve">
          <source>Returns an iterator to the element following the last element of the container.</source>
          <target state="translated">컨테이너의 마지막 요소 다음에 나오는 요소에 대해 반복자를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="cca4b763f9c5e0916a4e213ac068d0bbefc2d27d" translate="yes" xml:space="preserve">
          <source>Returns an iterator to the element following the last element of the span.</source>
          <target state="translated">범위의 마지막 요소 다음에 나오는 요소에 대해 반복자를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="79c5fd75b8a1e3b470f3a927f675d3bb75482f80" translate="yes" xml:space="preserve">
          <source>Returns an iterator to the end (i.e. the element after the last element) of the given container &lt;code&gt;c&lt;/code&gt; or array &lt;code&gt;array&lt;/code&gt;. These templates rely on &lt;code&gt;C::end()&lt;/code&gt; having a reasonable implementation.</source>
          <target state="translated">주어진 컨테이너 &lt;code&gt;c&lt;/code&gt; 또는 배열 &lt;code&gt;array&lt;/code&gt; 의 끝 (즉, 마지막 요소 뒤의 요소)에 대한 반복자를 반환합니다 . 이 템플릿은 합리적인 구현을하는 &lt;code&gt;C::end()&lt;/code&gt; 에 의존합니다 .</target>
        </trans-unit>
        <trans-unit id="a4415dbc1b12f4898ab1846841726049b88fe997" translate="yes" xml:space="preserve">
          <source>Returns an iterator to the end of the list of sub-matches.</source>
          <target state="translated">하위 일치 목록의 끝까지 반복자를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="1921abee0e26ecd5c8b82910f4191f212c876b66" translate="yes" xml:space="preserve">
          <source>Returns an iterator to the first character of the string.</source>
          <target state="translated">문자열의 첫 문자에 대한 반복자를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="cf0e8cb8298ba60b6f900dac5dd33047be4e2ef6" translate="yes" xml:space="preserve">
          <source>Returns an iterator to the first character of the view.</source>
          <target state="translated">반복자를 뷰의 첫 문자로 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="9cc8c7b646216bde3e068394ceb4f9534af88119" translate="yes" xml:space="preserve">
          <source>Returns an iterator to the first element of the bucket with index &lt;code&gt;n&lt;/code&gt;.</source>
          <target state="translated">인덱스가 &lt;code&gt;n&lt;/code&gt; 인 버킷의 첫 번째 요소에 반복자를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="86903693516c601450ff4f34cf4b232b1f695e7d" translate="yes" xml:space="preserve">
          <source>Returns an iterator to the first element of the container.</source>
          <target state="translated">컨테이너의 첫 번째 요소에 반복자를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="81c543a407309416aae5e3e2a54ea6d33b32b843" translate="yes" xml:space="preserve">
          <source>Returns an iterator to the first element of the span.</source>
          <target state="translated">범위의 첫 번째 요소에 반복자를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="586a75c92e5a6a45b3124bd38308df2f23fc9f7b" translate="yes" xml:space="preserve">
          <source>Returns an iterator to the inserted element.</source>
          <target state="translated">삽입 된 요소에 반복자를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="75b6a322e6db7d26e701286c5eeccfc5f40ec3cb" translate="yes" xml:space="preserve">
          <source>Returns an iterator to the newly inserted element.</source>
          <target state="translated">새로 삽입 된 요소에 반복자를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="6f620ca14ec6fc7905911cd1adc6e6683f766686" translate="yes" xml:space="preserve">
          <source>Returns an iterator to the reverse-beginning of the given container &lt;code&gt;c&lt;/code&gt; or array &lt;code&gt;array&lt;/code&gt;.</source>
          <target state="translated">주어진 컨테이너 &lt;code&gt;c&lt;/code&gt; 또는 배열 &lt;code&gt;array&lt;/code&gt; 의 역 시작에 대한 반복자를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="a7bc601d5cfece22ab64bbb9558aad3c5df09c1c" translate="yes" xml:space="preserve">
          <source>Returns an iterator to the reverse-end of the given container &lt;code&gt;c&lt;/code&gt; or array &lt;code&gt;array&lt;/code&gt;.</source>
          <target state="translated">지정된 컨테이너 &lt;code&gt;c&lt;/code&gt; 또는 배열 &lt;code&gt;array&lt;/code&gt; 의 역방향에 반복자를 돌려 줍니다.</target>
        </trans-unit>
        <trans-unit id="4c8f3b9b9af9a512ff3ca3dcf2accf9a42acf1cd" translate="yes" xml:space="preserve">
          <source>Returns an object &lt;code&gt;manip&lt;/code&gt; of unspecified type such that, given a &lt;code&gt;&lt;a href=&quot;../io/basic_istream&quot;&gt;std::basic_istream&lt;/a&gt;&amp;lt;CharT, Traits&amp;gt;&lt;/code&gt; object &lt;code&gt;is&lt;/code&gt;, the expression &lt;code&gt;is &amp;gt;&amp;gt; manip&lt;/code&gt; calls &lt;code&gt;from_stream&lt;/code&gt; (unqualified, to enable &lt;a href=&quot;../language/adl&quot;&gt;argument-dependent lookup&lt;/a&gt;) as follows:</source>
          <target state="translated">오브젝트 반환 &lt;code&gt;manip&lt;/code&gt; 소정 같은 것을 불특정 형 &lt;code&gt;&lt;a href=&quot;../io/basic_istream&quot;&gt;std::basic_istream&lt;/a&gt;&amp;lt;CharT, Traits&amp;gt;&lt;/code&gt; 객체 &lt;code&gt;is&lt;/code&gt; ,식이 &lt;code&gt;is &amp;gt;&amp;gt; manip&lt;/code&gt; 호출 &lt;code&gt;from_stream&lt;/code&gt; (비정규이 활성화 &lt;a href=&quot;../language/adl&quot;&gt;인자 의존적 조회를&lt;/a&gt; 다음과 같이)</target>
        </trans-unit>
        <trans-unit id="2b912c70b7e5cf1f387d4db4c0abd36d06e03d33" translate="yes" xml:space="preserve">
          <source>Returns an object of unspecified type such that if &lt;code&gt;in&lt;/code&gt; is the name of an input stream of type &lt;code&gt;&lt;a href=&quot;../basic_istream&quot;&gt;std::basic_istream&lt;/a&gt;&amp;lt;CharT, Traits&amp;gt;&lt;/code&gt;, then the expression &lt;code&gt;in &amp;gt;&amp;gt; get_money(mon, intl)&lt;/code&gt; behaves as if the following code was executed:</source>
          <target state="translated">&lt;code&gt;in&lt;/code&gt; 이 &lt;code&gt;&lt;a href=&quot;../basic_istream&quot;&gt;std::basic_istream&lt;/a&gt;&amp;lt;CharT, Traits&amp;gt;&lt;/code&gt; 유형의 입력 스트림 이름 인 경우 &lt;code&gt;in &amp;gt;&amp;gt; get_money(mon, intl)&lt;/code&gt; 의 표현식 이 다음 코드가 실행 된 것처럼 동작 하도록 지정되지 않은 유형의 오브젝트를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="f7b8eb9dae19e297d78a02f22054f0345a6009a9" translate="yes" xml:space="preserve">
          <source>Returns an object of unspecified type such that if &lt;code&gt;in&lt;/code&gt; is the name of an input stream of type &lt;code&gt;&lt;a href=&quot;../basic_istream&quot;&gt;std::basic_istream&lt;/a&gt;&amp;lt;CharT, Traits&amp;gt;&lt;/code&gt;, then the expression &lt;code&gt;in &amp;gt;&amp;gt; get_time(tmb, fmt)&lt;/code&gt; behaves as if the following code was executed:</source>
          <target state="translated">&lt;code&gt;in&lt;/code&gt; 이 &lt;code&gt;&lt;a href=&quot;../basic_istream&quot;&gt;std::basic_istream&lt;/a&gt;&amp;lt;CharT, Traits&amp;gt;&lt;/code&gt; 유형의 입력 스트림 이름 인 경우 &lt;code&gt;in &amp;gt;&amp;gt; get_time(tmb, fmt)&lt;/code&gt; 의 표현식 이 다음 코드가 실행 된 것처럼 동작 하도록 지정되지 않은 유형의 객체를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="dd93f4216c896a7a95c5f72ce6a6efdd30d9da0e" translate="yes" xml:space="preserve">
          <source>Returns an object of unspecified type such that if &lt;code&gt;out&lt;/code&gt; is the name of an output stream of type &lt;code&gt;&lt;a href=&quot;../basic_ostream&quot;&gt;std::basic_ostream&lt;/a&gt;&amp;lt;CharT, Traits&amp;gt;&lt;/code&gt;, then the expression &lt;code&gt;out &amp;lt;&amp;lt; put_money(mon, intl)&lt;/code&gt; behaves as if the following code was executed:</source>
          <target state="translated">&lt;code&gt;out&lt;/code&gt; 이 &lt;code&gt;&lt;a href=&quot;../basic_ostream&quot;&gt;std::basic_ostream&lt;/a&gt;&amp;lt;CharT, Traits&amp;gt;&lt;/code&gt; 유형의 출력 스트림 이름 인 경우 &lt;code&gt;out &amp;lt;&amp;lt; put_money(mon, intl)&lt;/code&gt; 식이 다음 코드가 실행 된 것처럼 동작 하도록 지정되지 않은 유형의 객체를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="62ae4c6be8fd20ac15bf4f697cecf21538c27d50" translate="yes" xml:space="preserve">
          <source>Returns an object of unspecified type such that if &lt;code&gt;out&lt;/code&gt; is the name of an output stream of type &lt;code&gt;&lt;a href=&quot;../basic_ostream&quot;&gt;std::basic_ostream&lt;/a&gt;&amp;lt;CharT, Traits&amp;gt;&lt;/code&gt;, then the expression &lt;code&gt;out &amp;lt;&amp;lt; put_time(tmb, fmt)&lt;/code&gt; behaves as if the following code was executed:</source>
          <target state="translated">&lt;code&gt;out&lt;/code&gt; 이 &lt;code&gt;&lt;a href=&quot;../basic_ostream&quot;&gt;std::basic_ostream&lt;/a&gt;&amp;lt;CharT, Traits&amp;gt;&lt;/code&gt; 유형의 출력 스트림 이름 인 경우 &lt;code&gt;out &amp;lt;&amp;lt; put_time(tmb, fmt)&lt;/code&gt; 식이 다음 코드가 실행 된 것처럼 동작 하도록 지정되지 않은 유형의 객체를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="2f02d5f45ccc2a86bb7523ba5517f4a5124fbbfb" translate="yes" xml:space="preserve">
          <source>Returns an object of unspecified type such that if &lt;code&gt;out&lt;/code&gt; is the name of an output stream of type &lt;code&gt;&lt;a href=&quot;../basic_ostream&quot;&gt;std::basic_ostream&lt;/a&gt;&amp;lt;CharT, Traits&amp;gt;&lt;/code&gt;, then the expression &lt;code&gt;out &amp;lt;&amp;lt; setfill(n)&lt;/code&gt; behaves as if the following code was executed:</source>
          <target state="translated">&lt;code&gt;out&lt;/code&gt; 이 &lt;code&gt;&lt;a href=&quot;../basic_ostream&quot;&gt;std::basic_ostream&lt;/a&gt;&amp;lt;CharT, Traits&amp;gt;&lt;/code&gt; 유형의 출력 스트림 이름 인 경우 &lt;code&gt;out &amp;lt;&amp;lt; setfill(n)&lt;/code&gt; 표현식 이 다음 코드가 실행 된 것처럼 동작 하도록 지정되지 않은 유형의 객체를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="ac046e2119792d5bea1b8409425faada550bc7cc" translate="yes" xml:space="preserve">
          <source>Returns an object of unspecified type such that if &lt;code&gt;str&lt;/code&gt; is the name of a stream of type &lt;code&gt;&lt;a href=&quot;../basic_ostream&quot;&gt;std::basic_ostream&lt;/a&gt;&amp;lt;CharT, Traits&amp;gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../basic_istream&quot;&gt;std::basic_istream&lt;/a&gt;&amp;lt;CharT, Traits&amp;gt;&lt;/code&gt;, then the expression &lt;code&gt;str &amp;lt;&amp;lt; resetiosflags(mask)&lt;/code&gt; or &lt;code&gt;str &amp;gt;&amp;gt; resetiosflags(mask)&lt;/code&gt; behaves as if the following code was executed:</source>
          <target state="translated">&lt;code&gt;str&lt;/code&gt; 이 &lt;code&gt;&lt;a href=&quot;../basic_ostream&quot;&gt;std::basic_ostream&lt;/a&gt;&amp;lt;CharT, Traits&amp;gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;../basic_istream&quot;&gt;std::basic_istream&lt;/a&gt;&amp;lt;CharT, Traits&amp;gt;&lt;/code&gt; 유형의 스트림 이름 인 경우 &lt;code&gt;str &amp;lt;&amp;lt; resetiosflags(mask)&lt;/code&gt; 또는 &lt;code&gt;str &amp;gt;&amp;gt; resetiosflags(mask)&lt;/code&gt; 식과 같이 지정되지 않은 유형의 객체를 반환합니다. &amp;gt;&amp;gt; resetiosflags (mask) 는 다음 코드가 실행 된 것처럼 동작합니다.</target>
        </trans-unit>
        <trans-unit id="8cfe440bb0461e50d9d52051f74e3742bee2cffb" translate="yes" xml:space="preserve">
          <source>Returns an object of unspecified type such that if &lt;code&gt;str&lt;/code&gt; is the name of a stream of type &lt;code&gt;&lt;a href=&quot;../basic_ostream&quot;&gt;std::basic_ostream&lt;/a&gt;&amp;lt;CharT, Traits&amp;gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../basic_istream&quot;&gt;std::basic_istream&lt;/a&gt;&amp;lt;CharT, Traits&amp;gt;&lt;/code&gt;, then the expression &lt;code&gt;str &amp;lt;&amp;lt; setiosflags(mask)&lt;/code&gt; or &lt;code&gt;str &amp;gt;&amp;gt; setiosflags(mask)&lt;/code&gt; behaves as if the following code was executed:</source>
          <target state="translated">&lt;code&gt;str&lt;/code&gt; 이 &lt;code&gt;&lt;a href=&quot;../basic_ostream&quot;&gt;std::basic_ostream&lt;/a&gt;&amp;lt;CharT, Traits&amp;gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;../basic_istream&quot;&gt;std::basic_istream&lt;/a&gt;&amp;lt;CharT, Traits&amp;gt;&lt;/code&gt; 유형의 스트림 이름 인 경우 &lt;code&gt;str &amp;lt;&amp;lt; setiosflags(mask)&lt;/code&gt; 또는 &lt;code&gt;str &amp;gt;&amp;gt; setiosflags(mask)&lt;/code&gt; 식과 같이 지정되지 않은 유형의 객체를 반환합니다. &amp;gt;&amp;gt; setiosflags (mask) 는 다음 코드가 실행 된 것처럼 동작합니다.</target>
        </trans-unit>
        <trans-unit id="84088dd4200032f3ae3d59597c68a3a9c3126c37" translate="yes" xml:space="preserve">
          <source>Returns an object of unspecified type such that if &lt;code&gt;str&lt;/code&gt; is the name of an output stream of type &lt;code&gt;&lt;a href=&quot;../basic_ostream&quot;&gt;std::basic_ostream&lt;/a&gt;&amp;lt;CharT, Traits&amp;gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../basic_istream&quot;&gt;std::basic_istream&lt;/a&gt;&amp;lt;CharT, Traits&amp;gt;&lt;/code&gt;, then the expression &lt;code&gt;str &amp;lt;&amp;lt; setbase(base)&lt;/code&gt; or &lt;code&gt;str &amp;gt;&amp;gt; setbase(base)&lt;/code&gt; behaves as if the following code was executed:</source>
          <target state="translated">반환 불특정 유형의 객체되도록 만약 &lt;code&gt;str&lt;/code&gt; 유형의 출력 스트림의 이름이다 &lt;code&gt;&lt;a href=&quot;../basic_ostream&quot;&gt;std::basic_ostream&lt;/a&gt;&amp;lt;CharT, Traits&amp;gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;../basic_istream&quot;&gt;std::basic_istream&lt;/a&gt;&amp;lt;CharT, Traits&amp;gt;&lt;/code&gt; 다음 식 &lt;code&gt;str &amp;lt;&amp;lt; setbase(base)&lt;/code&gt; 또는 &lt;code&gt;str &amp;gt;&amp;gt; setbase(base)&lt;/code&gt; 는 다음 코드가 실행 된 것처럼 동작합니다.</target>
        </trans-unit>
        <trans-unit id="99e9158854aa614a650002c301d40ccfd60b2bd3" translate="yes" xml:space="preserve">
          <source>Returns an object of unspecified type such that if &lt;code&gt;str&lt;/code&gt; is the name of an output stream of type &lt;code&gt;&lt;a href=&quot;../basic_ostream&quot;&gt;std::basic_ostream&lt;/a&gt;&amp;lt;CharT, Traits&amp;gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../basic_istream&quot;&gt;std::basic_istream&lt;/a&gt;&amp;lt;CharT, Traits&amp;gt;&lt;/code&gt;, then the expression &lt;code&gt;str &amp;lt;&amp;lt; setw(n)&lt;/code&gt; or &lt;code&gt;str &amp;gt;&amp;gt; setw(n)&lt;/code&gt; behaves as if the following code was executed:</source>
          <target state="translated">반환 불특정 유형의 객체되도록 만약 &lt;code&gt;str&lt;/code&gt; 유형의 출력 스트림의 이름이다 &lt;code&gt;&lt;a href=&quot;../basic_ostream&quot;&gt;std::basic_ostream&lt;/a&gt;&amp;lt;CharT, Traits&amp;gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;../basic_istream&quot;&gt;std::basic_istream&lt;/a&gt;&amp;lt;CharT, Traits&amp;gt;&lt;/code&gt; 다음 식 &lt;code&gt;str &amp;lt;&amp;lt; setw(n)&lt;/code&gt; 또는 &lt;code&gt;str &amp;gt;&amp;gt; setw(n)&lt;/code&gt; 은 다음 코드가 실행 된 것처럼 동작합니다.</target>
        </trans-unit>
        <trans-unit id="18f6da15b1f512ded981aab319c724a1a686be4a" translate="yes" xml:space="preserve">
          <source>Returns an object of unspecified type such that if &lt;code&gt;str&lt;/code&gt; is the name of an output stream of type &lt;code&gt;&lt;a href=&quot;../basic_ostream&quot;&gt;std::basic_ostream&lt;/a&gt;&amp;lt;CharT, Traits&amp;gt;&lt;/code&gt; or an input stream of type &lt;code&gt;&lt;a href=&quot;../basic_istream&quot;&gt;std::basic_istream&lt;/a&gt;&amp;lt;CharT, Traits&amp;gt;&lt;/code&gt;, then the expression &lt;code&gt;str &amp;lt;&amp;lt; setprecision(n)&lt;/code&gt; or &lt;code&gt;str &amp;gt;&amp;gt; setprecision(n)&lt;/code&gt; behaves as if the following code was executed:</source>
          <target state="translated">반환 불특정 유형의 객체되도록 만약 &lt;code&gt;str&lt;/code&gt; 유형의 출력 스트림의 이름이다 &lt;code&gt;&lt;a href=&quot;../basic_ostream&quot;&gt;std::basic_ostream&lt;/a&gt;&amp;lt;CharT, Traits&amp;gt;&lt;/code&gt; 또는 유형의 입력 스트림 &lt;code&gt;&lt;a href=&quot;../basic_istream&quot;&gt;std::basic_istream&lt;/a&gt;&amp;lt;CharT, Traits&amp;gt;&lt;/code&gt; 다음 식 &lt;code&gt;str &amp;lt;&amp;lt; setprecision(n)&lt;/code&gt; 또는 &lt;code&gt;str &amp;gt;&amp;gt; setprecision(n)&lt;/code&gt; 은 다음 코드가 실행 된 것처럼 동작합니다.</target>
        </trans-unit>
        <trans-unit id="b745e79c4379e75f4b180783dac4652e2d1e31fd" translate="yes" xml:space="preserve">
          <source>Returns an object of unspecified type such that the described behavior takes place.</source>
          <target state="translated">설명 된 동작이 발생하도록 지정되지 않은 유형의 객체를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="85f3b9be5010fe45a01d94049a49a73fba0bd2d5" translate="yes" xml:space="preserve">
          <source>Returns an unspecified value such that for all &lt;code&gt;type_info&lt;/code&gt; objects referring to the same type, their hash_code() is the same.</source>
          <target state="translated">동일한 유형을 참조하는 모든 &lt;code&gt;type_info&lt;/code&gt; 객체의 hash_code ()가 동일 하도록 지정되지 않은 값을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="27f99fe4340eabdc7811882cacea94a1c7fd3d9d" translate="yes" xml:space="preserve">
          <source>Returns input position indicator of the current associated &lt;code&gt;streambuf&lt;/code&gt; object.</source>
          <target state="translated">현재 연결된 &lt;code&gt;streambuf&lt;/code&gt; 객체 의 입력 위치 표시기를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="645f3739a8fcf9f946430acd5a736ee49d0acd26" translate="yes" xml:space="preserve">
          <source>Returns or changes the current path.</source>
          <target state="translated">현재 경로를 반환하거나 변경합니다.</target>
        </trans-unit>
        <trans-unit id="88f0fb449a1cd691627d7c97f4f3346b7f85be4e" translate="yes" xml:space="preserve">
          <source>Returns path relative to root-path, that is, a pathname composed of every generic-format component of &lt;code&gt;*this&lt;/code&gt; after root-path. If &lt;code&gt;*this&lt;/code&gt; is an empty path, returns an empty path.</source>
          <target state="translated">루트 경로에 상대적인 경로, 즉 루트 경로 뒤에 &lt;code&gt;*this&lt;/code&gt; 의 모든 일반 형식 구성 요소로 구성된 경로 이름을 리턴합니다 . 경우 &lt;code&gt;*this&lt;/code&gt; 빈 경로 빈 경로를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="ba0c27ff4a8dd6ec2622e7f7648f3ce5fe04921f" translate="yes" xml:space="preserve">
          <source>Returns pointer to the underlying array serving as element storage. The pointer is such that range &lt;code&gt;[data(); data() + size())&lt;/code&gt; is always a valid range, even if the container is empty (&lt;code&gt;data()&lt;/code&gt; is not dereferenceable in that case).</source>
          <target state="translated">요소 스토리지 역할을하는 기본 배열에 대한 포인터를 반환합니다. 포인터는 &lt;code&gt;[data(); data() + size())&lt;/code&gt; 컨테이너가 비어 있어도 data () + size ()) 는 항상 유효한 범위입니다 (이 경우 &lt;code&gt;data()&lt;/code&gt; 를 역 참조 할 수 없음).</target>
        </trans-unit>
        <trans-unit id="b324337bca6901739a0d6b464df4f250bd943ee6" translate="yes" xml:space="preserve">
          <source>Returns pointer to the underlying raw file device object.</source>
          <target state="translated">기본 원시 파일 장치 객체에 대한 포인터를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="899a681f8d781c317b804221f5bd5e62e3e295f7" translate="yes" xml:space="preserve">
          <source>Returns pointer to the underlying raw string device object.</source>
          <target state="translated">기본 원시 문자열 장치 객체에 대한 포인터를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="bbab3130428af2187064993ce0ff0633b9865970" translate="yes" xml:space="preserve">
          <source>Returns pointers defining the get area.</source>
          <target state="translated">get 영역을 정의하는 포인터를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="7ff65b99b68790d89d1b7f93e946711c279d836e" translate="yes" xml:space="preserve">
          <source>Returns pointers defining the put area.</source>
          <target state="translated">풋 영역을 정의하는 포인터를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="2ead22d770dec43a4abc3fa0576b69c55c48423b" translate="yes" xml:space="preserve">
          <source>Returns reference to the first character in the string. The behavior is undefined if &lt;code&gt;empty() == true&lt;/code&gt;.</source>
          <target state="translated">문자열에서 첫 번째 문자에 대한 참조를 반환합니다. &lt;code&gt;empty() == true&lt;/code&gt; 경우 동작이 정의되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="d3aca74d080d5f0df6dd88cb7cecd9178e16210d" translate="yes" xml:space="preserve">
          <source>Returns reference to the first character in the view. The behavior is undefined if &lt;code&gt;empty() == true&lt;/code&gt;.</source>
          <target state="translated">뷰에서 첫 번째 문자에 대한 참조를 반환합니다. &lt;code&gt;empty() == true&lt;/code&gt; 경우 동작이 정의되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="fe6e6d4bb4638ec9eec365c440bfa8428c43edb6" translate="yes" xml:space="preserve">
          <source>Returns reference to the first element in the queue. This element will be the first element to be removed on a call to &lt;code&gt;&lt;a href=&quot;pop&quot;&gt;pop()&lt;/a&gt;&lt;/code&gt;. Effectively calls &lt;code&gt;c.front()&lt;/code&gt;.</source>
          <target state="translated">큐의 첫 번째 요소에 대한 참조를 리턴합니다. 이 요소는 &lt;code&gt;&lt;a href=&quot;pop&quot;&gt;pop()&lt;/a&gt;&lt;/code&gt; 호출시 제거되는 첫 번째 요소 입니다. 효과적으로 &lt;code&gt;c.front()&lt;/code&gt; 호출합니다 .</target>
        </trans-unit>
        <trans-unit id="685fcd428312fe7cf891319fce7b32a5fb2ebf4b" translate="yes" xml:space="preserve">
          <source>Returns reference to the last character in the string. The behavior is undefined if &lt;code&gt;empty() == true&lt;/code&gt;.</source>
          <target state="translated">문자열의 마지막 문자에 대한 참조를 반환합니다. &lt;code&gt;empty() == true&lt;/code&gt; 경우 동작이 정의되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="95e1b6b4db52c2a0da5c0151cb59f69be8e586e4" translate="yes" xml:space="preserve">
          <source>Returns reference to the last character in the view. The behavior is undefined if &lt;code&gt;empty() == true&lt;/code&gt;.</source>
          <target state="translated">뷰의 마지막 문자에 대한 참조를 반환합니다. &lt;code&gt;empty() == true&lt;/code&gt; 경우 동작이 정의되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="0acce844c6988b7cde0bbbcd9f8641e1222008a4" translate="yes" xml:space="preserve">
          <source>Returns reference to the last element in the container.</source>
          <target state="translated">컨테이너의 마지막 요소에 대한 참조를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="22141daf79385233d4a90fa547f9520188030385" translate="yes" xml:space="preserve">
          <source>Returns reference to the last element in the queue. This is the most recently pushed element. Effectively calls &lt;code&gt;c.back()&lt;/code&gt;.</source>
          <target state="translated">큐의 마지막 요소에 대한 참조를 리턴합니다. 가장 최근에 푸시 된 요소입니다. 효과적으로 &lt;code&gt;c.back()&lt;/code&gt; 호출합니다 .</target>
        </trans-unit>
        <trans-unit id="7fbac0774d223179a0d9fd48476894789da372d7" translate="yes" xml:space="preserve">
          <source>Returns reference to the top element in the priority queue. This element will be removed on a call to &lt;code&gt;&lt;a href=&quot;pop&quot;&gt;pop()&lt;/a&gt;&lt;/code&gt;. If default comparison function is used, the returned element is also the greatest among the elements in the queue.</source>
          <target state="translated">우선 순위 큐의 최상위 요소에 대한 참조를 리턴합니다. 이 요소는 &lt;code&gt;&lt;a href=&quot;pop&quot;&gt;pop()&lt;/a&gt;&lt;/code&gt; 호출시 제거됩니다 . 기본 비교 함수가 사용되면 리턴 된 요소도 큐의 요소 중에서 가장 큽니다.</target>
        </trans-unit>
        <trans-unit id="b11acf765aab7757073dbe00d2e0ec3e73b49e31" translate="yes" xml:space="preserve">
          <source>Returns reference to the top element in the stack. This is the most recently pushed element. This element will be removed on a call to &lt;code&gt;&lt;a href=&quot;pop&quot;&gt;pop()&lt;/a&gt;&lt;/code&gt;. Effectively calls &lt;code&gt;c.back()&lt;/code&gt;.</source>
          <target state="translated">스택의 최상위 요소에 대한 참조를 반환합니다. 가장 최근에 푸시 된 요소입니다. 이 요소는 &lt;code&gt;&lt;a href=&quot;pop&quot;&gt;pop()&lt;/a&gt;&lt;/code&gt; 호출시 제거됩니다 . 효과적으로 &lt;code&gt;c.back()&lt;/code&gt; 호출합니다 .</target>
        </trans-unit>
        <trans-unit id="749c2334f29b2b96a440124d9ec5143c2f80d479" translate="yes" xml:space="preserve">
          <source>Returns the</source>
          <target state="translated">를 반환</target>
        </trans-unit>
        <trans-unit id="24a933bb361ee34ade953c61fca95a6c080c75cf" translate="yes" xml:space="preserve">
          <source>Returns the &amp;lambda; distribution parameter the distribution was constructed with. The parameter defines the rate of events, per unit. The default value is &lt;code&gt;1.0&lt;/code&gt;.</source>
          <target state="translated">분포가 구성된 &amp;lambda; 분포 모수를 반환합니다. 이 매개 변수는 단위당 이벤트 비율을 정의합니다. 기본값은 &lt;code&gt;1.0&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="ed55f59c4892907c94ccb9730fac56d6ca2de3a6" translate="yes" xml:space="preserve">
          <source>Returns the &amp;mu; parameter the distribution was constructed with. The parameter defines mean number of occurrences of the event. The default value is &lt;code&gt;1.0&lt;/code&gt;.</source>
          <target state="translated">분포가 구성된 &amp;mu; 모수를 반환합니다. 이 매개 변수는 이벤트의 평균 발생 횟수를 정의합니다. 기본값은 &lt;code&gt;1.0&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="b9c45ae490f535ee7d89f5866489bc962cf0532a" translate="yes" xml:space="preserve">
          <source>Returns the &lt;code&gt;&lt;a href=&quot;../error_type&quot;&gt;std::regex_constants::error_type&lt;/a&gt;&lt;/code&gt; that was passed to the &lt;code&gt;&lt;a href=&quot;../regex_error&quot;&gt;std::regex_error&lt;/a&gt;&lt;/code&gt; constructor.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../regex_error&quot;&gt;std::regex_error&lt;/a&gt;&lt;/code&gt; 생성자 에 전달 된 &lt;code&gt;&lt;a href=&quot;../error_type&quot;&gt;std::regex_constants::error_type&lt;/a&gt;&lt;/code&gt; 을 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="39bd6d2de32f188b7f0663a5b0f9e255670df522" translate="yes" xml:space="preserve">
          <source>Returns the absolute value of the duration &lt;code&gt;d&lt;/code&gt;. Specifically, if &lt;code&gt;d &amp;gt;= d.zero()&lt;/code&gt;, return &lt;code&gt;d&lt;/code&gt;, otherwise return &lt;code&gt;-d&lt;/code&gt;.</source>
          <target state="translated">지속 시간 &lt;code&gt;d&lt;/code&gt; 의 절대 값을 반환합니다 . 구체적으로, 만일 &lt;code&gt;d &amp;gt;= d.zero()&lt;/code&gt; , 리턴 &lt;code&gt;d&lt;/code&gt; 달리 반환 &lt;code&gt;-d&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c7d0ddd379d72b6ec77e0397d65e38b17936b0ee" translate="yes" xml:space="preserve">
          <source>Returns the actual address of &lt;code&gt;x&lt;/code&gt; even in presence of overloaded &lt;code&gt;operator&amp;amp;&lt;/code&gt;.</source>
          <target state="translated">오버로드 된 &lt;code&gt;operator&amp;amp;&lt;/code&gt; 있는 경우에도 &lt;code&gt;x&lt;/code&gt; 의 실제 주소를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="0df3b1d17f703d365105b0c7b9d331124b75f356" translate="yes" xml:space="preserve">
          <source>Returns the allocator associated with the container.</source>
          <target state="translated">컨테이너와 관련된 할당자를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="d10d84f70be461c9481d105927dfb422fcca4c80" translate="yes" xml:space="preserve">
          <source>Returns the allocator associated with the object.</source>
          <target state="translated">객체와 관련된 할당자를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="7e581fa261ec06cd26166d0d72700fac65659b5a" translate="yes" xml:space="preserve">
          <source>Returns the allocator associated with the string.</source>
          <target state="translated">문자열과 관련된 할당자를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="ed42ce13836b8d9516eb4d394b49d2d721c61a7a" translate="yes" xml:space="preserve">
          <source>Returns the approximate processor time used by the process since the beginning of an implementation-defined era related to the program's execution. To convert result value to seconds divide it by &lt;code&gt;&lt;a href=&quot;clocks_per_sec&quot;&gt;CLOCKS_PER_SEC&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">프로그램 실행과 관련된 구현 정의 시대가 시작된 이후 프로세스가 사용한 대략적인 프로세서 시간을 반환합니다. 결과 값을 초로 변환하려면 &lt;code&gt;&lt;a href=&quot;clocks_per_sec&quot;&gt;CLOCKS_PER_SEC&lt;/a&gt;&lt;/code&gt; 로 나눕니다 .</target>
        </trans-unit>
        <trans-unit id="ef39635d8a06519f1db7f1bcddd385d01aac249c" translate="yes" xml:space="preserve">
          <source>Returns the associated locale.</source>
          <target state="translated">연결된 로캘을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="513d5f438ffdc8f18910f6f09b0dd8507830709d" translate="yes" xml:space="preserve">
          <source>Returns the average number of elements per bucket, that is, &lt;code&gt;&lt;a href=&quot;size&quot;&gt;size()&lt;/a&gt;&lt;/code&gt; divided by &lt;code&gt;&lt;a href=&quot;bucket_count&quot;&gt;bucket_count()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">버킷 당 평균 요소 수, 즉 &lt;code&gt;&lt;a href=&quot;size&quot;&gt;size()&lt;/a&gt;&lt;/code&gt; 를 &lt;code&gt;&lt;a href=&quot;bucket_count&quot;&gt;bucket_count()&lt;/a&gt;&lt;/code&gt; 나눈 값을 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="56b434aabc853b13888b50cb0807e7e7480ac954" translate="yes" xml:space="preserve">
          <source>Returns the classification table that matches the classification used by the minimal &quot;C&quot; locale.</source>
          <target state="translated">최소 &quot;C&quot;로캘이 사용하는 분류와 일치하는 분류 테이블을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="84bb6f37ea8c28053dc9c4bc5f84e5ffe2db38cc" translate="yes" xml:space="preserve">
          <source>Returns the classification table that was provided in the constructor of this instance of &lt;code&gt;&lt;a href=&quot;../ctype&quot;&gt;std::ctype&lt;/a&gt;&amp;lt;char&amp;gt;&lt;/code&gt;, or returns a copy of &lt;code&gt;classic_table()&lt;/code&gt; if none was provided.</source>
          <target state="translated">이 &lt;code&gt;&lt;a href=&quot;../ctype&quot;&gt;std::ctype&lt;/a&gt;&amp;lt;char&amp;gt;&lt;/code&gt; 인스턴스의 생성자에서 제공 한 분류 테이블을 리턴 하거나, 제공되지 않은 경우 &lt;code&gt;classic_table()&lt;/code&gt; 의 사본을 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="cec5508c3658b5da405d0d139d93a5210bf5311b" translate="yes" xml:space="preserve">
          <source>Returns the contained value if &lt;code&gt;*this&lt;/code&gt; has a value, otherwise returns &lt;code&gt;default_value&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;*this&lt;/code&gt; 에 값이 있으면 포함 된 값을 리턴하고 , 그렇지 않으면 &lt;code&gt;default_value&lt;/code&gt; 를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="5175e5486ea3b7acf946c0bccd84c0bfca4593bd" translate="yes" xml:space="preserve">
          <source>Returns the current calendar time encoded as a &lt;code&gt;&lt;a href=&quot;time_t&quot;&gt;std::time_t&lt;/a&gt;&lt;/code&gt; object, and also stores it in the object pointed to by &lt;code&gt;arg&lt;/code&gt;, unless &lt;code&gt;arg&lt;/code&gt; is a null pointer.</source>
          <target state="translated">리턴로 인코딩 현재 달력 시간 &lt;code&gt;&lt;a href=&quot;time_t&quot;&gt;std::time_t&lt;/a&gt;&lt;/code&gt; 개체에서 개체를도 저장이 가리키는 &lt;code&gt;arg&lt;/code&gt; 하지 않는 한, &lt;code&gt;arg&lt;/code&gt; 널 포인터입니다.</target>
        </trans-unit>
        <trans-unit id="d7d1f5b5fc29fcb3aca822d082591189208bc01b" translate="yes" xml:space="preserve">
          <source>Returns the current locale associated with the regular expression.</source>
          <target state="translated">정규식과 관련된 현재 로캘을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="126617a3b6e024763851c89f7f7cbaeff67a5b00" translate="yes" xml:space="preserve">
          <source>Returns the current locale associated with the stream.</source>
          <target state="translated">스트림과 관련된 현재 로캘을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="27eff443a8cc3749bd05823eeaaa013d89cc3d44" translate="yes" xml:space="preserve">
          <source>Returns the current locale of the traits object.</source>
          <target state="translated">특성 오브젝트의 현재 로케일을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="a57a239fd3f60e2e159c6e3807675647141046c9" translate="yes" xml:space="preserve">
          <source>Returns the current stream error state.</source>
          <target state="translated">현재 스트림 오류 상태를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="c91da68dbeda44f9527bff1069dec2d6a9f7d0fc" translate="yes" xml:space="preserve">
          <source>Returns the current value of the conversion state, which is stored in this &lt;code&gt;wbuffer_convert&lt;/code&gt; object. The conversion state may be explicitly set in the constructor and is updated by all conversion operations.</source>
          <target state="translated">이 &lt;code&gt;wbuffer_convert&lt;/code&gt; 객체에 저장된 변환 상태의 현재 값을 반환 합니다. 변환 상태는 생성자에서 명시 적으로 설정 될 수 있으며 모든 변환 작업에 의해 업데이트됩니다.</target>
        </trans-unit>
        <trans-unit id="9a54919eb90bfe15dbd7231e299286868aa275d6" translate="yes" xml:space="preserve">
          <source>Returns the current value of the conversion state, which is stored in this &lt;code&gt;wstring_convert&lt;/code&gt; object. The conversion state may be explicitly set in the constructor and is updated by all conversion operations.</source>
          <target state="translated">이 &lt;code&gt;wstring_convert&lt;/code&gt; 객체에 저장된 변환 상태의 현재 값을 반환 합니다. 변환 상태는 생성자에서 명시 적으로 설정 될 수 있으며 모든 변환 작업에 의해 업데이트됩니다.</target>
        </trans-unit>
        <trans-unit id="21e7330c7492003ef581c54529e1ec213ca6eba1" translate="yes" xml:space="preserve">
          <source>Returns the current value of the file position indicator for the file stream &lt;code&gt;stream&lt;/code&gt;.</source>
          <target state="translated">파일 스트림 &lt;code&gt;stream&lt;/code&gt; 대한 파일 위치 표시기의 현재 값을 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="87a9bd38db27dfa2e570d960db5258d67df118c7" translate="yes" xml:space="preserve">
          <source>Returns the currently installed &lt;code&gt;&lt;a href=&quot;terminate_handler&quot;&gt;std::terminate_handler&lt;/a&gt;&lt;/code&gt;, which may be a null pointer.</source>
          <target state="translated">현재 설치되어있는 &lt;code&gt;&lt;a href=&quot;terminate_handler&quot;&gt;std::terminate_handler&lt;/a&gt;&lt;/code&gt; 리턴합니다 ( 널 포인터 일 수 있음).</target>
        </trans-unit>
        <trans-unit id="3a909107c485a18aeb0e65b097d2b7b246b4da8f" translate="yes" xml:space="preserve">
          <source>Returns the currently installed &lt;code&gt;&lt;a href=&quot;unexpected_handler&quot;&gt;std::unexpected_handler&lt;/a&gt;&lt;/code&gt;, which may be a null pointer.</source>
          <target state="translated">현재 설치되어있는 &lt;code&gt;&lt;a href=&quot;unexpected_handler&quot;&gt;std::unexpected_handler&lt;/a&gt;&lt;/code&gt; 리턴하는데 , 이는 널 포인터 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0eebac854ef06908098ab562e43be843daac0023" translate="yes" xml:space="preserve">
          <source>Returns the currently installed new-handler, which may be a null pointer.</source>
          <target state="translated">현재 설치되어있는 새로운 핸들러를 반환하며, null 포인터 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9a34da4bdbca25b8220ad85f7c7e98ad92ec7676" translate="yes" xml:space="preserve">
          <source>Returns the day value stored in &lt;code&gt;*this&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;*this&lt;/code&gt; 에 저장된 일 값을 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="2f2d3ebe5de9ccb237377ca395e5cab852dd42c8" translate="yes" xml:space="preserve">
          <source>Returns the default error condition for the current error value.</source>
          <target state="translated">현재 오류 값의 기본 오류 조건을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="6a6643039f6b1a81b1d288317143a6d97779523c" translate="yes" xml:space="preserve">
          <source>Returns the deleter object which would be used for destruction of the managed object.</source>
          <target state="translated">관리 대상 객체를 삭제하는 데 사용할 삭제 객체를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="97e9f158ded27d6c46baac7e76586825738ed0f7" translate="yes" xml:space="preserve">
          <source>Returns the difference between &lt;code&gt;lhs&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;lhs&lt;/code&gt; 와 &lt;code&gt;rhs&lt;/code&gt; 의 차이를 돌려 줍니다.</target>
        </trans-unit>
        <trans-unit id="0e4112e6cef8ec5e45a8ed312a62346d0a591f75" translate="yes" xml:space="preserve">
          <source>Returns the directory location suitable for temporary files.</source>
          <target state="translated">임시 파일에 적합한 디렉토리 위치를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="0ac314227e51139a4635ec7a906c7d111cdbaf08" translate="yes" xml:space="preserve">
          <source>Returns the distance between two iterator adaptors.</source>
          <target state="translated">두 반복자 어댑터 사이의 거리를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="5c7d44f3da5724df89d31964d01fb30cfb367391" translate="yes" xml:space="preserve">
          <source>Returns the distribution parameters the distribution has been constructed with.</source>
          <target state="translated">분포가 구성된 분포 매개 변수를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="c892fc6d996e686fd08a5a6f686dcd06605ec628" translate="yes" xml:space="preserve">
          <source>Returns the distribution parameters with which the distribution was constructed.</source>
          <target state="translated">분포가 구성된 분포 모수를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="c21dab5affe00ddcef46241bec377a01d0a48bad" translate="yes" xml:space="preserve">
          <source>Returns the distribution parameters.</source>
          <target state="translated">분포 모수를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="4199c030677b8e2d438f4d0fef3c0ba01cafd759" translate="yes" xml:space="preserve">
          <source>Returns the element at index &lt;code&gt;i&lt;/code&gt;, i.e. &lt;code&gt;get()[i]&lt;/code&gt;.</source>
          <target state="translated">인덱스 &lt;code&gt;i&lt;/code&gt; 의 요소 , 즉 &lt;code&gt;get()[i]&lt;/code&gt; 줍니다.</target>
        </trans-unit>
        <trans-unit id="915f0c38069cb7df2ab7c3a84b3fb3580e130db6" translate="yes" xml:space="preserve">
          <source>Returns the error category of the error value.</source>
          <target state="translated">오류 값의 오류 범주를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="2cbec075c92a3ac9691e962fa7ddb74b8c07a692" translate="yes" xml:space="preserve">
          <source>Returns the error condition for the given error code.</source>
          <target state="translated">주어진 오류 코드에 대한 오류 조건을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="924bb1f8b0cc4979f07050dc78c49d9966575da7" translate="yes" xml:space="preserve">
          <source>Returns the explanatory string.</source>
          <target state="translated">설명 문자열을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="b3ea672d21dccc9d34eeff89242d53f7276c2a31" translate="yes" xml:space="preserve">
          <source>Returns the extension of the filename component of the generic-format view of &lt;code&gt;*this&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;*this&lt;/code&gt; 의 일반 형식보기에서 파일 이름 구성 요소의 확장자를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="6f3ef8abc7ee80bd57fe84e7a246d450bbdb3c5c" translate="yes" xml:space="preserve">
          <source>Returns the filename identified by the generic-format path stripped of its extension.</source>
          <target state="translated">확장명이 제거 된 일반 형식 경로로 식별 된 파일 이름을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="af2cc6e15e70315b07bf74a90889f17910a00792" translate="yes" xml:space="preserve">
          <source>Returns the first element in the range &lt;code&gt;[first, last)&lt;/code&gt; that satisfies specific criteria:</source>
          <target state="translated">특정 기준을 만족하는 &lt;code&gt;[first, last)&lt;/code&gt; 범위의 첫 번째 요소를 리턴 합니다.</target>
        </trans-unit>
        <trans-unit id="5e08a83e9f29b4b57e3621250241e9fbff764140" translate="yes" xml:space="preserve">
          <source>Returns the first mismatching pair of elements from two ranges: one defined by &lt;code&gt;[first1, last1)&lt;/code&gt; and another defined by &lt;code&gt;[first2,last2)&lt;/code&gt;. If &lt;code&gt;last2&lt;/code&gt; is not provided (overloads (1-4)), it denotes &lt;code&gt;first2 + (last1 - first1)&lt;/code&gt;.</source>
          <target state="translated">두 범위에서 첫 번째 불일치 요소 쌍을 리턴합니다. 하나는 &lt;code&gt;[first1, last1)&lt;/code&gt; 의해 정의되고 다른 하나는 &lt;code&gt;[first2,last2)&lt;/code&gt; 에 의해 정의됩니다 . 경우 &lt;code&gt;last2&lt;/code&gt; 가 제공되지 않은 경우 (오버로드 (1-4))가 나타내고 &lt;code&gt;first2 + (last1 - first1)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7d67c154b2b7d09d2b77a7995af0498339b0310f" translate="yes" xml:space="preserve">
          <source>Returns the full path the directory entry refers to.</source>
          <target state="translated">디렉토리 항목이 참조하는 전체 경로를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="3dae28d0e440f9aae0f69e92b84bb4bf9b6a1c2c" translate="yes" xml:space="preserve">
          <source>Returns the function object that compares the keys, which is a copy of this container's &lt;a href=&quot;map&quot;&gt;constructor&lt;/a&gt; argument &lt;code&gt;comp&lt;/code&gt;.</source>
          <target state="translated">이 컨테이너의 &lt;a href=&quot;map&quot;&gt;생성자&lt;/a&gt; 인수 &lt;code&gt;comp&lt;/code&gt; 의 카피 인 키를 비교하는 함수 객체를 돌려 줍니다.</target>
        </trans-unit>
        <trans-unit id="73fa0faeee4c7f26cb770a1d0af6ec6366f293a9" translate="yes" xml:space="preserve">
          <source>Returns the function object that compares the keys, which is a copy of this container's &lt;a href=&quot;multimap&quot;&gt;constructor&lt;/a&gt; argument &lt;code&gt;comp&lt;/code&gt;.</source>
          <target state="translated">이 컨테이너의 &lt;a href=&quot;multimap&quot;&gt;생성자&lt;/a&gt; 인수 &lt;code&gt;comp&lt;/code&gt; 의 카피 인 키를 비교하는 함수 객체를 돌려 줍니다.</target>
        </trans-unit>
        <trans-unit id="d4c7d0113970949f52a17cd98e4c6612f8fa1105" translate="yes" xml:space="preserve">
          <source>Returns the function object that compares the keys, which is a copy of this container's &lt;a href=&quot;multiset&quot;&gt;constructor&lt;/a&gt; argument &lt;code&gt;comp&lt;/code&gt;. It is the same as &lt;code&gt;&lt;a href=&quot;value_comp&quot;&gt;value_comp&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">이 컨테이너의 &lt;a href=&quot;multiset&quot;&gt;생성자&lt;/a&gt; 인수 &lt;code&gt;comp&lt;/code&gt; 의 카피 인 키를 비교하는 함수 객체를 돌려 줍니다. &lt;code&gt;&lt;a href=&quot;value_comp&quot;&gt;value_comp&lt;/a&gt;&lt;/code&gt; 와 동일합니다 .</target>
        </trans-unit>
        <trans-unit id="3e79c5694a5ca13d3ef6595a32fd93a2d24d054d" translate="yes" xml:space="preserve">
          <source>Returns the function object that compares the keys, which is a copy of this container's &lt;a href=&quot;set&quot;&gt;constructor&lt;/a&gt; argument &lt;code&gt;comp&lt;/code&gt;. It is the same as &lt;code&gt;&lt;a href=&quot;value_comp&quot;&gt;value_comp&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">이 컨테이너의 &lt;a href=&quot;set&quot;&gt;생성자&lt;/a&gt; 인수 &lt;code&gt;comp&lt;/code&gt; 의 카피 인 키를 비교하는 함수 객체를 돌려 줍니다. &lt;code&gt;&lt;a href=&quot;value_comp&quot;&gt;value_comp&lt;/a&gt;&lt;/code&gt; 와 동일합니다 .</target>
        </trans-unit>
        <trans-unit id="2d0818688267b234089d835fee6194568cd3c654" translate="yes" xml:space="preserve">
          <source>Returns the function object that compares the values. It is the same as &lt;code&gt;&lt;a href=&quot;key_comp&quot;&gt;key_comp&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">값을 비교하는 함수 객체를 반환합니다. &lt;code&gt;&lt;a href=&quot;key_comp&quot;&gt;key_comp&lt;/a&gt;&lt;/code&gt; 와 동일합니다 .</target>
        </trans-unit>
        <trans-unit id="6351e5540742614ebe1cd3ef60c325759a9d3773" translate="yes" xml:space="preserve">
          <source>Returns the function that compares keys for equality.</source>
          <target state="translated">키가 동일한 지 비교하는 함수를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="a6651bce5b64948ab9c2d3de79cd11eee7b577ab" translate="yes" xml:space="preserve">
          <source>Returns the function that hashes the keys.</source>
          <target state="translated">키를 해시하는 함수를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="c89b74edc29e895ee4e2da2cbd4352cdee9f5007" translate="yes" xml:space="preserve">
          <source>Returns the generic-format filename component of the path.</source>
          <target state="translated">경로의 일반 형식 파일 이름 구성 요소를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="394ba36818f14f9d54ebeb1e3c44f770b406a844" translate="yes" xml:space="preserve">
          <source>Returns the greater of the given values.</source>
          <target state="translated">주어진 값보다 큰 값을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="2ac65e1429bba404fbf3b56ab10fabbd6cf039d1" translate="yes" xml:space="preserve">
          <source>Returns the greatest duration &lt;code&gt;t&lt;/code&gt; representable in &lt;code&gt;ToDuration&lt;/code&gt; that is less or equal to &lt;code&gt;d&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ToDuration&lt;/code&gt; 에서 표현할 수 있는 최대 지속 시간 &lt;code&gt;t&lt;/code&gt; 를 &lt;code&gt;d&lt;/code&gt; 이하로 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="e49acd04a83ec324a942890fa83f1e6d994063c0" translate="yes" xml:space="preserve">
          <source>Returns the hash code of the associated &lt;code&gt;&lt;a href=&quot;../type_info&quot;&gt;std::type_info&lt;/a&gt;&lt;/code&gt; object. Equivalent to calling &lt;a href=&quot;../type_info/hash_code&quot;&gt;&lt;code&gt;type_info::hash_code&lt;/code&gt;&lt;/a&gt; directly.</source>
          <target state="translated">연결된 &lt;code&gt;&lt;a href=&quot;../type_info&quot;&gt;std::type_info&lt;/a&gt;&lt;/code&gt; 객체 의 해시 코드를 반환 합니다. &lt;a href=&quot;../type_info/hash_code&quot;&gt; &lt;code&gt;type_info::hash_code&lt;/code&gt; &lt;/a&gt; 직접 호출하는 것과 같습니다 .</target>
        </trans-unit>
        <trans-unit id="6efa4a7cdd4adc256985d83d2fa1766c18f7b83c" translate="yes" xml:space="preserve">
          <source>Returns the implementation defined underlying thread handle.</source>
          <target state="translated">구현 정의 기본 스레드 핸들을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="f5d9a4522bda0a936f4f0368dbd1d4e72b85b2d2" translate="yes" xml:space="preserve">
          <source>Returns the index of the bucket for key &lt;code&gt;key&lt;/code&gt;. Elements (if any) with keys equivalent to &lt;code&gt;key&lt;/code&gt; are always found in this bucket. The returned value is valid only for instances of the container for which &lt;code&gt;&lt;a href=&quot;bucket_count&quot;&gt;bucket_count()&lt;/a&gt;&lt;/code&gt; returns the same value.</source>
          <target state="translated">키 &lt;code&gt;key&lt;/code&gt; 의 버킷 인덱스를 돌려 줍니다. 에 해당 키 요소 (있는 경우) &lt;code&gt;key&lt;/code&gt; 항상이 버킷에서 발견된다. 반환 값은 &lt;code&gt;&lt;a href=&quot;bucket_count&quot;&gt;bucket_count()&lt;/a&gt;&lt;/code&gt; 가 같은 값을 반환하는 컨테이너의 인스턴스에만 유효 합니다.</target>
        </trans-unit>
        <trans-unit id="47b50815c5ef1820d57ea614477f63a6cc6e95f2" translate="yes" xml:space="preserve">
          <source>Returns the internal pathname in generic pathname format, converted to specific string type. Conversion, if any, is specified as follows:</source>
          <target state="translated">내부 경로 이름을 일반 경로 이름 형식으로 특정 문자열 유형으로 변환하여 반환합니다. 있는 경우 변환은 다음과 같이 지정됩니다.</target>
        </trans-unit>
        <trans-unit id="2d42ace4dfa5061849f9fc93a61b842e0e4472f2" translate="yes" xml:space="preserve">
          <source>Returns the internal pathname in native pathname format, converted to specific string type. Conversion, if any, is performed as follows:</source>
          <target state="translated">내부 경로 이름을 기본 경로 이름 형식으로 특정 문자열 유형으로 변환하여 반환합니다. 있는 경우 변환은 다음과 같이 수행됩니다.</target>
        </trans-unit>
        <trans-unit id="3b4e119d6f8bcb1df619f769f8bfc0db4d6921b3" translate="yes" xml:space="preserve">
          <source>Returns the inverse of the referenced bit.</source>
          <target state="translated">참조 된 비트의 역수를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="7898101876be6783d6c5cdd7cb145ed9928e3ae3" translate="yes" xml:space="preserve">
          <source>Returns the iterator initialized with &lt;code&gt;bound_&lt;/code&gt; if this view is bounded, or the sentinel initialized with &lt;code&gt;bound_&lt;/code&gt; if this view is unbounded.</source>
          <target state="translated">이 뷰가 &lt;code&gt;bound_&lt;/code&gt; 경우 bound_로 초기화 된 반복자를 ,이 뷰가 바인드 되지 않은 경우 , sentinel가 &lt;code&gt;bound_&lt;/code&gt; 로 초기화 된 것을 리턴 합니다.</target>
        </trans-unit>
        <trans-unit id="be11bbfa6b6b8a6a788e21ad8bb48054c6c29500" translate="yes" xml:space="preserve">
          <source>Returns the iterator initialized with &lt;code&gt;value_&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;value_&lt;/code&gt; 로 초기화 된 반복자를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="0e6153a918b75dcf65903cab44e6937a0be0d9df" translate="yes" xml:space="preserve">
          <source>Returns the iterator initialized with &lt;code&gt;{*this, ranges::find_if(base_, &lt;a href=&quot;../utility/functional/ref&quot;&gt;std::ref&lt;/a&gt;(*pred_))}.&lt;/code&gt; In order to provide the amortized constant time complexity required by the &lt;a href=&quot;range&quot;&gt;&lt;code&gt;Range&lt;/code&gt;&lt;/a&gt; concept, this function caches the result within the &lt;code&gt;filter_view&lt;/code&gt; object for use on subsequent calls.</source>
          <target state="translated">&lt;code&gt;{*this, ranges::find_if(base_, &lt;a href=&quot;../utility/functional/ref&quot;&gt;std::ref&lt;/a&gt;(*pred_))}.&lt;/code&gt; 초기화 된 반복자를 리턴합니다 . &lt;a href=&quot;range&quot;&gt; &lt;code&gt;Range&lt;/code&gt; &lt;/a&gt; 개념에 필요한 상각 된 일정한 시간 복잡성을 제공하기 위해이 함수 는 후속 호출에서 사용하기 위해 &lt;code&gt;filter_view&lt;/code&gt; 객체 내에 결과를 캐시 합니다.</target>
        </trans-unit>
        <trans-unit id="1a0a09ea622b641e8e53e77e42a5fead717ad4a2" translate="yes" xml:space="preserve">
          <source>Returns the largest possible &lt;code&gt;year&lt;/code&gt;, that is, &lt;code&gt;&lt;a href=&quot;../year&quot;&gt;std::chrono::year&lt;/a&gt;(32767)&lt;/code&gt;.</source>
          <target state="translated">가능한 가장 큰 &lt;code&gt;year&lt;/code&gt; , 즉 &lt;code&gt;&lt;a href=&quot;../year&quot;&gt;std::chrono::year&lt;/a&gt;(32767)&lt;/code&gt; 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="395e0aac0548f5b4f3c90d369ef77a8e3c5e4cf3" translate="yes" xml:space="preserve">
          <source>Returns the largest possible representation.</source>
          <target state="translated">가능한 가장 큰 표현을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="6ae0866e270dfda35cf58c63b5ff5908d0a12d81" translate="yes" xml:space="preserve">
          <source>Returns the largest possible rounding error in ULPs (units in the last place) as defined by ISO 10967, which can vary from 0.5 (rounding to the nearest digit) to 1.0 (rounding to zero or to infinity). It is only meaningful if &lt;code&gt;&lt;a href=&quot;../numeric_limits&quot;&gt;std::numeric_limits&lt;/a&gt;&amp;lt;T&amp;gt;::is_integer == false&lt;/code&gt;.</source>
          <target state="translated">ISO 10967에 정의 된대로 ULP (마지막 장소의 단위)에서 가장 큰 반올림 오류를 반환하며, 0.5 (가장 가까운 숫자로 반올림)에서 1.0 (반올림으로 0으로 또는 무한으로)까지 다양합니다. &lt;code&gt;&lt;a href=&quot;../numeric_limits&quot;&gt;std::numeric_limits&lt;/a&gt;&amp;lt;T&amp;gt;::is_integer == false&lt;/code&gt; 경우에만 의미가 있습니다.</target>
        </trans-unit>
        <trans-unit id="4a7e3d0587c79c8aee9cebd08d6ed40775e55213" translate="yes" xml:space="preserve">
          <source>Returns the largest time point &lt;code&gt;t&lt;/code&gt; representable in &lt;code&gt;ToDuration&lt;/code&gt; that is smaller or equal to &lt;code&gt;tp&lt;/code&gt;.</source>
          <target state="translated">반환 가장 큰 시점 &lt;code&gt;t&lt;/code&gt; 의 에서 표현할 수 &lt;code&gt;ToDuration&lt;/code&gt; 작거나 같은 &lt;code&gt;tp&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="57fcfff97781b1a6c8875ce5abe02ecadd9a8acc" translate="yes" xml:space="preserve">
          <source>Returns the largest value that G's operator() may return. The value is strictly greater than &lt;code&gt;G::min()&lt;/code&gt;</source>
          <target state="translated">G의 operator ()가 반환 할 수있는 가장 큰 값을 반환합니다. 값이 &lt;code&gt;G::min()&lt;/code&gt; 보다 엄격하게 큽니다.</target>
        </trans-unit>
        <trans-unit id="1719308a7a082d9cdab9f0db78594e920128d800" translate="yes" xml:space="preserve">
          <source>Returns the length of a wide string, that is the number of non-null wide characters that precede the terminating null wide character.</source>
          <target state="translated">넓은 문자열의 길이, 즉 종료 널 와이드 문자 앞에 오는 널이 아닌 와이드 문자 수를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="8388aba4880ce317608f53440a2bf9b4fe7da3e5" translate="yes" xml:space="preserve">
          <source>Returns the length of the character sequence pointed to by &lt;code&gt;s&lt;/code&gt;, that is, the position of the terminating null character (&lt;code&gt;CharT()&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;s&lt;/code&gt; 가 가리키는 문자 시퀀스의 길이 , 즉 종료 널 문자 ( &lt;code&gt;CharT()&lt;/code&gt; ) 의 위치를 ​​리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="2a3b9c0a60c4d34bff18ac8a4fad9e8264434c21" translate="yes" xml:space="preserve">
          <source>Returns the length of the given byte string, that is, the number of characters in a character array whose first element is pointed to by &lt;code&gt;str&lt;/code&gt; up to and not including the first null character. The behavior is undefined if there is no null character in the character array pointed to by &lt;code&gt;str&lt;/code&gt;.</source>
          <target state="translated">주어진 바이트 문자열의 길이, 즉 첫 번째 요소가 &lt;code&gt;str&lt;/code&gt; 에 의해 지시되고 첫 번째 널 문자를 포함하지 않는 문자 배열의 문자 수를 리턴합니다. &lt;code&gt;str&lt;/code&gt; 가 가리키는 문자 배열에 널 문자가없는 경우 동작이 정의되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="adde90905d8e5647b754a9ef5e7816b0ac6c89c5" translate="yes" xml:space="preserve">
          <source>Returns the length of the maximum initial segment (span) of the byte string pointed to by &lt;code&gt;dest&lt;/code&gt;, that consists of only the characters found in byte string pointed to by &lt;code&gt;src&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;dest&lt;/code&gt; 가 가리키는 바이트 문자열의 최대 초기 세그먼트 (스팬) 길이를 반환합니다 .이 문자열은 &lt;code&gt;src&lt;/code&gt; 가 가리키는 바이트 문자열에서 찾은 문자만으로 구성됩니다 .</target>
        </trans-unit>
        <trans-unit id="873c1d7e1a62028ef2efb999cba0ae22ccf7b127" translate="yes" xml:space="preserve">
          <source>Returns the length of the maximum initial segment of the byte string pointed to by &lt;code&gt;dest&lt;/code&gt;, that consists of only the characters</source>
          <target state="translated">&lt;code&gt;dest&lt;/code&gt; 가 가리키는 바이트 문자열의 최대 초기 세그먼트 길이를 리턴하며 문자만으로 구성됩니다.</target>
        </trans-unit>
        <trans-unit id="cd874c8f829aec557cab43dde4fea18e303b214e" translate="yes" xml:space="preserve">
          <source>Returns the length of the maximum initial segment of the wide string pointed to by &lt;code&gt;dest&lt;/code&gt;, that consists of only the characters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84cfb1d10d156ad85db1a941437a837070c48ee2" translate="yes" xml:space="preserve">
          <source>Returns the length of the maximum initial segment of the wide string pointed to by &lt;code&gt;dest&lt;/code&gt;, that consists of only the characters found in wide string pointed to by &lt;code&gt;src&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b596ecd99bf2165d05a62b8913dab5e01bf9744a" translate="yes" xml:space="preserve">
          <source>Returns the length of the specified sub-match.</source>
          <target state="translated">지정된 부분 일치의 길이를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="c7e5951d261f5f6ba1380d657965073b0cbe0231" translate="yes" xml:space="preserve">
          <source>Returns the location of the source code where the contract violation happened. If the name is unknown, an implementation may return 0 instead.</source>
          <target state="translated">계약 위반이 발생한 소스 코드의 위치를 ​​반환합니다. 이름을 알 수없는 경우 구현에서 대신 0을 반환 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="135c7cc96d127453a23afbfbf11182d966328d5e" translate="yes" xml:space="preserve">
          <source>Returns the logical AND of &lt;code&gt;lhs&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;lhs&lt;/code&gt; 및 &lt;code&gt;rhs&lt;/code&gt; 의 논리 AND를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="bbba8e56929229b9538d5be275ac41c1219d32a6" translate="yes" xml:space="preserve">
          <source>Returns the logical NOT of &lt;code&gt;arg&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;arg&lt;/code&gt; 의 논리 NOT을 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="4c72ca9fadd6b0ac5bc49503349fddffed0e7076" translate="yes" xml:space="preserve">
          <source>Returns the logical OR of &lt;code&gt;lhs&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;lhs&lt;/code&gt; 및 &lt;code&gt;rhs&lt;/code&gt; 의 논리합을 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="d84a91bedfe94de171ef1e12eaed19b8bc33cd32" translate="yes" xml:space="preserve">
          <source>Returns the logical complement of the result of calling &lt;code&gt;pred(x)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;pred(x)&lt;/code&gt; 호출 결과의 논리적 보완을 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="64bc9d1fd51560b5534a2335be3b83a71e7eeed0" translate="yes" xml:space="preserve">
          <source>Returns the logical complement of the result of calling &lt;code&gt;pred(x, y)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;pred(x, y)&lt;/code&gt; 호출 결과의 논리적 보수를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="25f362a8ab8f6843b05eb6b866462005692e22b1" translate="yes" xml:space="preserve">
          <source>Returns the lowercase form of &lt;code&gt;ch&lt;/code&gt; if one is listed in the locale, otherwise return &lt;code&gt;ch&lt;/code&gt; unchanged.</source>
          <target state="translated">로케일에 나열된 &lt;code&gt;ch&lt;/code&gt; 의 소문자 형식을 리턴하고 , 그렇지 않으면 &lt;code&gt;ch&lt;/code&gt; 를 변경하지 않고 리턴 합니다.</target>
        </trans-unit>
        <trans-unit id="eea72ed87bffba768a19518a154402a11f041465" translate="yes" xml:space="preserve">
          <source>Returns the lowest and the greatest of the given values.</source>
          <target state="translated">주어진 값 중 가장 낮은 값과 가장 큰 값을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="a93fa886fd8eb701f1ae23c98b2c265bed143be7" translate="yes" xml:space="preserve">
          <source>Returns the lowest finite value representable by the numeric type &lt;code&gt;T&lt;/code&gt;, that is, a finite value &lt;code&gt;x&lt;/code&gt; such that there is no other finite value &lt;code&gt;y&lt;/code&gt; where &lt;code&gt;y &amp;lt; x&lt;/code&gt;. This is different from &lt;code&gt;&lt;a href=&quot;../numeric_limits&quot;&gt;std::numeric_limits&lt;/a&gt;&amp;lt;T&amp;gt;::min()&lt;/code&gt; for floating-point types. Only meaningful for bounded types.</source>
          <target state="translated">반환 숫자 형식으로 낮은 유한 값 표현할 &lt;code&gt;T&lt;/code&gt; 이며, 유한 한 값을 &lt;code&gt;x&lt;/code&gt; 다른 유한 한 값이 존재하지 않도록 &lt;code&gt;y&lt;/code&gt; &lt;code&gt;y &amp;lt; x&lt;/code&gt; . 부동 소수점 유형의 경우 &lt;code&gt;&lt;a href=&quot;../numeric_limits&quot;&gt;std::numeric_limits&lt;/a&gt;&amp;lt;T&amp;gt;::min()&lt;/code&gt; 과 다릅니다 . 바운드 유형에만 의미가 있습니다.</target>
        </trans-unit>
        <trans-unit id="4561e1e89a1a77f40ba5fe1fb242d82535e7ebd8" translate="yes" xml:space="preserve">
          <source>Returns the lowest possible representation.</source>
          <target state="translated">가능한 가장 낮은 표현을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="0a9e0a78388e07bdf79568d141b6449f2b351ed4" translate="yes" xml:space="preserve">
          <source>Returns the machine epsilon, that is, the difference between &lt;code&gt;1.0&lt;/code&gt; and the next value representable by the floating-point type &lt;code&gt;T&lt;/code&gt;. It is only meaningful if &lt;code&gt;&lt;a href=&quot;../numeric_limits&quot;&gt;std::numeric_limits&lt;/a&gt;&amp;lt;T&amp;gt;::is_integer == false&lt;/code&gt;.</source>
          <target state="translated">기계 엡실론, 즉 부동 소수점 타입 &lt;code&gt;T&lt;/code&gt; 로 표현할 수있는 다음 값과 &lt;code&gt;1.0&lt;/code&gt; 의 차이를 리턴합니다 . &lt;code&gt;&lt;a href=&quot;../numeric_limits&quot;&gt;std::numeric_limits&lt;/a&gt;&amp;lt;T&amp;gt;::is_integer == false&lt;/code&gt; &amp;lt;T&amp;gt; :: is_integer == false 인 경우에만 의미가 있습니다.</target>
        </trans-unit>
        <trans-unit id="cf4a4d88f3c6d0d2a7eb36edffded27ac2cb8917" translate="yes" xml:space="preserve">
          <source>Returns the magnitude of the complex number &lt;code&gt;z&lt;/code&gt;.</source>
          <target state="translated">복소수 &lt;code&gt;z&lt;/code&gt; 의 크기를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="a508032ce2b347a3dee22de1ebf8237cd5dbfa59" translate="yes" xml:space="preserve">
          <source>Returns the matched character sequence as an object of the underlying &lt;code&gt;&lt;a href=&quot;../../string/basic_string&quot;&gt;std::basic_string&lt;/a&gt;&lt;/code&gt; type. If the &lt;code&gt;matched&lt;/code&gt; member is</source>
          <target state="translated">일치하는 문자 시퀀스를 기본 &lt;code&gt;&lt;a href=&quot;../../string/basic_string&quot;&gt;std::basic_string&lt;/a&gt;&lt;/code&gt; 유형 의 객체로 반환합니다 . 는 IF &lt;code&gt;matched&lt;/code&gt; 부재는</target>
        </trans-unit>
        <trans-unit id="6777e797a0dde9d70cf8fb8454e487feaf7461d9" translate="yes" xml:space="preserve">
          <source>Returns the maximum finite value representable by the numeric type &lt;code&gt;T&lt;/code&gt;. Meaningful for all bounded types.</source>
          <target state="translated">숫자 유형 &lt;code&gt;T&lt;/code&gt; 로 표시 할 수있는 최대 유한 값을 반환합니다 . 모든 경계 유형에 의미가 있습니다.</target>
        </trans-unit>
        <trans-unit id="7ec54ab677f3b0b7cde77849d3e88ecffefde235" translate="yes" xml:space="preserve">
          <source>Returns the maximum number of buckets the container is able to hold due to system or library implementation limitations.</source>
          <target state="translated">시스템 또는 라이브러리 구현 제한으로 인해 컨테이너가 보유 할 수있는 최대 버킷 수를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="e5ca74813341c79dd49c5f5360af1d21eba60605" translate="yes" xml:space="preserve">
          <source>Returns the maximum number of elements the container is able to hold due to system or library implementation limitations, i.e. &lt;code&gt;&lt;a href=&quot;../../iterator/distance&quot;&gt;std::distance&lt;/a&gt;(begin(), end())&lt;/code&gt; for the largest container.</source>
          <target state="translated">시스템 또는 라이브러리 구현 제한으로 인해 컨테이너가 보유 할 수있는 최대 요소 수를 리턴합니다 (예 &lt;code&gt;&lt;a href=&quot;../../iterator/distance&quot;&gt;std::distance&lt;/a&gt;(begin(), end())&lt;/code&gt; 가장 큰 컨테이너의 경우 std :: distance (begin (), end ())) .</target>
        </trans-unit>
        <trans-unit id="6cb4509918aeb6ecfe35d6a4d1a2107449158e39" translate="yes" xml:space="preserve">
          <source>Returns the maximum number of elements the string is able to hold due to system or library implementation limitations, i.e. ​&lt;code&gt;&lt;a href=&quot;../../iterator/distance&quot;&gt;std::distance&lt;/a&gt;(begin(), end())&lt;/code&gt;​ for the largest string.</source>
          <target state="translated">문자열 인해 시스템이나 라이브러리 구현 한계, 즉까지 보유 할 수있는 요소의 최대 수 반환 &lt;code&gt;&lt;a href=&quot;../../iterator/distance&quot;&gt;std::distance&lt;/a&gt;(begin(), end())&lt;/code&gt; 가장 큰 문자열.</target>
        </trans-unit>
        <trans-unit id="d9bf4d2ffcdb08e2888ee7df5435214b4ee76a81" translate="yes" xml:space="preserve">
          <source>Returns the maximum number of submatches the &lt;code&gt;match_results&lt;/code&gt; type is able to hold due to system or library implementation limitations, i.e. &lt;code&gt;&lt;a href=&quot;../../iterator/distance&quot;&gt;std::distance&lt;/a&gt;(begin(), end())&lt;/code&gt; for the largest number of submatches.</source>
          <target state="translated">시스템 또는 라이브러리 구현 제한으로 인해 &lt;code&gt;match_results&lt;/code&gt; 유형이 보유 할 수 있는 최대 부분 일치 수를 리턴합니다 (예 : 최대 부분 일치 수에 대한 &lt;code&gt;&lt;a href=&quot;../../iterator/distance&quot;&gt;std::distance&lt;/a&gt;(begin(), end())&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="81ebbf51d4203b58774423b501e0eafed181534c" translate="yes" xml:space="preserve">
          <source>Returns the maximum theoretically possible value of &lt;code&gt;n&lt;/code&gt;, for which the call &lt;code&gt;allocate(n, 0)&lt;/code&gt; could succeed.</source>
          <target state="translated">이론적으로 가능한 최대 값 &lt;code&gt;n&lt;/code&gt; 을 반환합니다.이 값은 &lt;code&gt;allocate(n, 0)&lt;/code&gt; 호출 이 성공할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="85815fc14613c1ee8993e485ec8efeb258f0f836" translate="yes" xml:space="preserve">
          <source>Returns the maximum value potentially generated by the distribution.</source>
          <target state="translated">분포에서 잠재적으로 생성 된 최대 값을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="8402b1f6712e911eadb8a087aa174527e99f4aaa" translate="yes" xml:space="preserve">
          <source>Returns the maximum value potentially generated by the engine adaptor. This value is equal to 2w</source>
          <target state="translated">엔진 어댑터에 의해 잠재적으로 생성 된 최대 값을 리턴합니다. 이 값은 2w와 같습니다</target>
        </trans-unit>
        <trans-unit id="4cf5acd412dc0901d48980f12630e2945d5b9263" translate="yes" xml:space="preserve">
          <source>Returns the maximum value potentially generated by the engine adaptor. This value is equal to &lt;code&gt;e.max()&lt;/code&gt; where &lt;code&gt;e&lt;/code&gt; is the underlying engine.</source>
          <target state="translated">엔진 어댑터에 의해 잠재적으로 생성 된 최대 값을 리턴합니다. 이 값은 &lt;code&gt;e.max()&lt;/code&gt; 여기서 &lt;code&gt;e&lt;/code&gt; 는 기본 엔진입니다.</target>
        </trans-unit>
        <trans-unit id="c21aa7ebce516ecae56ba26f27d3cf3f7756ebfa" translate="yes" xml:space="preserve">
          <source>Returns the maximum value potentially generated by the random-number engine. This value is equal to 2w</source>
          <target state="translated">난수 엔진에 의해 잠재적으로 생성 된 최대 값을 리턴합니다. 이 값은 2w와 같습니다</target>
        </trans-unit>
        <trans-unit id="43bbe3e859cd8d065ac4465590d4060f03a32add" translate="yes" xml:space="preserve">
          <source>Returns the maximum value potentially generated by the random-number engine. This value is equal to &lt;code&gt;&lt;a href=&quot;../../../types/numeric_limits&quot;&gt;std::numeric_limits&lt;/a&gt;&amp;lt;unsigned int&amp;gt;::max()&lt;/code&gt;.</source>
          <target state="translated">난수 엔진에 의해 잠재적으로 생성 된 최대 값을 리턴합니다. 이 값은 &lt;code&gt;&lt;a href=&quot;../../../types/numeric_limits&quot;&gt;std::numeric_limits&lt;/a&gt;&amp;lt;unsigned int&amp;gt;::max()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7af58bc1ff40680ea570ca3046b0ec168770e6a4" translate="yes" xml:space="preserve">
          <source>Returns the maximum value potentially generated by the random-number engine. This value is one less than &lt;code&gt;modulus&lt;/code&gt;.</source>
          <target state="translated">난수 엔진에 의해 잠재적으로 생성 된 최대 값을 리턴합니다. 이 값은 &lt;code&gt;modulus&lt;/code&gt; 보다 하나 작습니다 .</target>
        </trans-unit>
        <trans-unit id="9e4e20b50ccf9a93c57e36c7c58e309acf7abedc" translate="yes" xml:space="preserve">
          <source>Returns the memory at &lt;code&gt;p&lt;/code&gt; to the pool. It is unspecified if or under what circumstances this operation will result in a call to &lt;code&gt;deallocate()&lt;/code&gt; on the upstream memory resource.</source>
          <target state="translated">&lt;code&gt;p&lt;/code&gt; 의 메모리를 풀로 리턴합니다 . 이 작업 으로 인해 업스트림 메모리 리소스에서 &lt;code&gt;deallocate()&lt;/code&gt; 가 호출되는지 여부는 어떤 상황에서도 지정되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="e7704180180c21daba09fd65be84a2381320f189" translate="yes" xml:space="preserve">
          <source>Returns the memory resource pointer used by this polymorphic allocator.</source>
          <target state="translated">이 다형성 할당자가 사용하는 메모리 리소스 포인터를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="ca2d5329cb6c4a279c924dcdbad3c370faae5e09" translate="yes" xml:space="preserve">
          <source>Returns the message corresponding to the current error value and category.</source>
          <target state="translated">현재 오류 값 및 범주에 해당하는 메시지를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="3c85237897f6adfce31db4c47af2b9b9f7f85715" translate="yes" xml:space="preserve">
          <source>Returns the minimum finite value representable by the numeric type &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="translated">숫자 유형 &lt;code&gt;T&lt;/code&gt; 로 표시 할 수있는 최소 유한 값을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="21d502a35e3d5f22d1f9b4d2dd602a62dcfac8e3" translate="yes" xml:space="preserve">
          <source>Returns the minimum positive &lt;a href=&quot;https://en.wikipedia.org/wiki/Denormal_number&quot;&gt;subnormal value&lt;/a&gt; of the type &lt;code&gt;T&lt;/code&gt;, if &lt;code&gt;&lt;a href=&quot;../numeric_limits&quot;&gt;std::numeric_limits&lt;/a&gt;&amp;lt;T&amp;gt;::has_denorm != &lt;a href=&quot;float_denorm_style&quot;&gt;std::denorm_absent&lt;/a&gt;&lt;/code&gt;, otherwise returns &lt;code&gt;&lt;a href=&quot;../numeric_limits&quot;&gt;std::numeric_limits&lt;/a&gt;&amp;lt;T&amp;gt;::min()&lt;/code&gt;. Only meaningful for floating-point types.</source>
          <target state="translated">반환 최소 양 &lt;a href=&quot;https://en.wikipedia.org/wiki/Denormal_number&quot;&gt;정상 이하의 값&lt;/a&gt; 타입의 &lt;code&gt;T&lt;/code&gt; , 만약 &lt;code&gt;&lt;a href=&quot;../numeric_limits&quot;&gt;std::numeric_limits&lt;/a&gt;&amp;lt;T&amp;gt;::has_denorm != &lt;a href=&quot;float_denorm_style&quot;&gt;std::denorm_absent&lt;/a&gt;&lt;/code&gt; , 그렇지 않으면 반환 &lt;code&gt;&lt;a href=&quot;../numeric_limits&quot;&gt;std::numeric_limits&lt;/a&gt;&amp;lt;T&amp;gt;::min()&lt;/code&gt; . 부동 소수점 유형에만 의미가 있습니다.</target>
        </trans-unit>
        <trans-unit id="bcf7dd695d5e27b364f46aa5575e9546a63223ea" translate="yes" xml:space="preserve">
          <source>Returns the minimum value potentially generated by the distribution.</source>
          <target state="translated">분포에서 잠재적으로 생성 된 최소값을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="2730b089c4be641767c7a9e223cbfecb4c64dfaf" translate="yes" xml:space="preserve">
          <source>Returns the minimum value potentially generated by the engine adaptor. This value is equal to 0u.</source>
          <target state="translated">엔진 어댑터에 의해 잠재적으로 생성 된 최소값을 리턴합니다. 이 값은 0u와 같습니다.</target>
        </trans-unit>
        <trans-unit id="c0119f36535e91743242c18cf3dbe67a8b4f7c84" translate="yes" xml:space="preserve">
          <source>Returns the minimum value potentially generated by the engine adaptor. This value is equal to &lt;code&gt;e.min()&lt;/code&gt; where &lt;code&gt;e&lt;/code&gt; is the underlying engine.</source>
          <target state="translated">엔진 어댑터에 의해 잠재적으로 생성 된 최소값을 리턴합니다. 이 값은 &lt;code&gt;e.min()&lt;/code&gt; 과 같습니다. 여기서 &lt;code&gt;e&lt;/code&gt; 는 기본 엔진입니다.</target>
        </trans-unit>
        <trans-unit id="8f0a963ec6c9b85f526c2f118e867e0083d44244" translate="yes" xml:space="preserve">
          <source>Returns the minimum value potentially generated by the random-number engine. This value is equal to &lt;code&gt;0u&lt;/code&gt;.</source>
          <target state="translated">난수 엔진에 의해 잠재적으로 생성 된 최소값을 리턴합니다. 이 값은 &lt;code&gt;0u&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="1b660d7384e7bbb9429636a82bc8003c63f80d29" translate="yes" xml:space="preserve">
          <source>Returns the minimum value potentially generated by the random-number engine. This value is equal to &lt;code&gt;1u&lt;/code&gt; if &lt;code&gt;increment&lt;/code&gt; is &lt;code&gt;0u&lt;/code&gt;, and is equal to &lt;code&gt;0u&lt;/code&gt; otherwise.</source>
          <target state="translated">난수 엔진에 의해 잠재적으로 생성 된 최소값을 리턴합니다. &lt;code&gt;increment&lt;/code&gt; 이 &lt;code&gt;0u&lt;/code&gt; 이면 이 값은 &lt;code&gt;1u&lt;/code&gt; 이고 , 그렇지 않으면 &lt;code&gt;0u&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="eb494f8a3655b2e51ce879a04bba74dae8348331" translate="yes" xml:space="preserve">
          <source>Returns the month value stored in &lt;code&gt;*this&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;*this&lt;/code&gt; 에 저장된 월 값을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="fe8c3f5f4aab4e1d7f1f2a3d3f8f07aa9b64e9e5" translate="yes" xml:space="preserve">
          <source>Returns the n distribution parameter (number of the degrees of freedom) the distribution was constructed with. The default value is &lt;code&gt;1.0&lt;/code&gt;.</source>
          <target state="translated">분포가 구성된 n 분포 모수 (자유도의 수)를 반환합니다. 기본값은 &lt;code&gt;1.0&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="aff82fc5606930ee56d524d123f441f0c3dfca38" translate="yes" xml:space="preserve">
          <source>Returns the n parameter the distribution was constructed with. It specifies the &lt;a href=&quot;https://en.wikipedia.org/wiki/Degrees_of_freedom_(statistics)&quot;&gt;degrees of freedom&lt;/a&gt; of the distribution. The default value is &lt;code&gt;1.0&lt;/code&gt;.</source>
          <target state="translated">분포가 구성된 n 매개 변수를 반환합니다. 분포 &lt;a href=&quot;https://en.wikipedia.org/wiki/Degrees_of_freedom_(statistics)&quot;&gt;의 자유도&lt;/a&gt; 를 지정합니다 . 기본값은 &lt;code&gt;1.0&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="43622c2e65b163151e1cba2739c6700a85e42d47" translate="yes" xml:space="preserve">
          <source>Returns the name of the associated &lt;code&gt;&lt;a href=&quot;../type_info&quot;&gt;std::type_info&lt;/a&gt;&lt;/code&gt; object. Equivalent to calling &lt;code&gt;&lt;a href=&quot;../type_info/name&quot;&gt;std::type_info::name()&lt;/a&gt;&lt;/code&gt; directly.</source>
          <target state="translated">연결된 &lt;code&gt;&lt;a href=&quot;../type_info&quot;&gt;std::type_info&lt;/a&gt;&lt;/code&gt; 객체 의 이름을 반환 합니다. &lt;code&gt;&lt;a href=&quot;../type_info/name&quot;&gt;std::type_info::name()&lt;/a&gt;&lt;/code&gt; 직접 호출하는 것과 같습니다 .</target>
        </trans-unit>
        <trans-unit id="63731644d4e27d814c2ac43f92333a23087d8080" translate="yes" xml:space="preserve">
          <source>Returns the name of the function where the contract violation happened. If the name is unknown, an implementation may return an empty &lt;code&gt;string_view&lt;/code&gt; instead.</source>
          <target state="translated">계약 위반이 발생한 함수의 이름을 반환합니다. 이름을 알 수없는 경우 구현시 빈 &lt;code&gt;string_view&lt;/code&gt; 를 대신 반환 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="bf652de1b26ef0e84557a7ea04a12ba82348ce00" translate="yes" xml:space="preserve">
          <source>Returns the name of the locale, which is the name by which it is known to the operating system, such as &quot;POSIX&quot; or &quot;en_US.UTF8&quot; or &quot;English_United States.1252&quot;. If the locale is not a copy of a system-supplied locale, the string &quot;*&quot; is returned.</source>
          <target state="translated">&quot;POSIX&quot;또는 &quot;en_US.UTF8&quot;또는 &quot;English_United States.1252&quot;와 같이 운영 체제에 알려진 로케일의 이름을 리턴합니다. 로케일이 시스템 제공 로케일의 사본이 아닌 경우 문자열 &quot;*&quot;가 리턴됩니다.</target>
        </trans-unit>
        <trans-unit id="d71a634f49e0ffa83725a83c23069eb0ae2d604f" translate="yes" xml:space="preserve">
          <source>Returns the name of the the source file where the contract violation happened. If the name is unknown, an implementation may return an empty &lt;code&gt;string_view&lt;/code&gt; instead.</source>
          <target state="translated">계약 위반이 발생한 소스 파일의 이름을 반환합니다. 이름을 알 수없는 경우 구현시 빈 &lt;code&gt;string_view&lt;/code&gt; 를 대신 반환 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="5f4d724ca50edcb9194d4a32504fbd81f36987d6" translate="yes" xml:space="preserve">
          <source>Returns the nearest time point to &lt;code&gt;tp&lt;/code&gt; representable in &lt;code&gt;ToDuration&lt;/code&gt;, rounding to even in halfway cases.</source>
          <target state="translated">&lt;code&gt;ToDuration&lt;/code&gt; 에서 표현할 수있는 &lt;code&gt;tp&lt;/code&gt; 에 가장 가까운 시점을 반올림하는 경우에도 반올림합니다.</target>
        </trans-unit>
        <trans-unit id="5751c1d8f24591fb51c2d8e65267444e2348b9a0" translate="yes" xml:space="preserve">
          <source>Returns the negation of &lt;code&gt;arg&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;arg&lt;/code&gt; 의 부정을 돌려 줍니다.</target>
        </trans-unit>
        <trans-unit id="9b401f52e7fcb85ca5c4f9c0b12d938c010d8106" translate="yes" xml:space="preserve">
          <source>Returns the next representable value of &lt;code&gt;from&lt;/code&gt; in the direction of &lt;code&gt;to&lt;/code&gt;.</source>
          <target state="translated">의 다음 표현 가능한 값을 반환 &lt;code&gt;from&lt;/code&gt; 의 방향 &lt;code&gt;to&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3d741cc6a5787f9ea5fe51617aca9334f39d2ecd" translate="yes" xml:space="preserve">
          <source>Returns the number of &lt;code&gt;CharT&lt;/code&gt; elements in the string, i.e. &lt;code&gt;&lt;a href=&quot;../../iterator/distance&quot;&gt;std::distance&lt;/a&gt;(begin(), end())&lt;/code&gt;.</source>
          <target state="translated">문자열 의 &lt;code&gt;CharT&lt;/code&gt; 요소 수를 리턴합니다 &lt;code&gt;&lt;a href=&quot;../../iterator/distance&quot;&gt;std::distance&lt;/a&gt;(begin(), end())&lt;/code&gt; 예 : &lt;a href=&quot;../../iterator/distance&quot;&gt;std :: distance&lt;/a&gt; (begin (), end ())) .</target>
        </trans-unit>
        <trans-unit id="932e08759fc4cfc84672fe4b27730fefadf9db78" translate="yes" xml:space="preserve">
          <source>Returns the number of &lt;code&gt;CharT&lt;/code&gt; elements in the view, i.e. &lt;code&gt;&lt;a href=&quot;../../iterator/distance&quot;&gt;std::distance&lt;/a&gt;(begin(), end())&lt;/code&gt;.</source>
          <target state="translated">뷰 의 &lt;code&gt;CharT&lt;/code&gt; 요소 수를 리턴합니다 &lt;code&gt;&lt;a href=&quot;../../iterator/distance&quot;&gt;std::distance&lt;/a&gt;(begin(), end())&lt;/code&gt; 예 : &lt;a href=&quot;../../iterator/distance&quot;&gt;std :: distance&lt;/a&gt; (begin (), end ())) .</target>
        </trans-unit>
        <trans-unit id="2f65442fe83ff47a779816ef1f75fc1c4a93759f" translate="yes" xml:space="preserve">
          <source>Returns the number of &lt;code&gt;shared_ptr&lt;/code&gt; instances that share ownership of the managed object, or &lt;code&gt;​0​&lt;/code&gt; if the managed object has already been deleted, i.e. &lt;code&gt;*this&lt;/code&gt; is empty.</source>
          <target state="translated">반환 수 &lt;code&gt;shared_ptr&lt;/code&gt; 관리 객체의 주식 소유권, 또는 인스턴스를 것으로 &lt;code&gt;​0​&lt;/code&gt; 관리되는 개체가 이미 삭제 된 경우, 즉 &lt;code&gt;*this&lt;/code&gt; 비어 있습니다.</target>
        </trans-unit>
        <trans-unit id="63562fc895320772383f007a9ac77da6cff58945" translate="yes" xml:space="preserve">
          <source>Returns the number of bits that are set to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 로 설정된 비트 수를 반환 합니다 .</target>
        </trans-unit>
        <trans-unit id="06908c113c8a2a587a4a9f8de59e23e0265d014c" translate="yes" xml:space="preserve">
          <source>Returns the number of bits that the bitset can hold.</source>
          <target state="translated">비트 세트가 보유 할 수있는 비트 수를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="017832020bb0e12bdcd6e1b453a407187835ffb6" translate="yes" xml:space="preserve">
          <source>Returns the number of buckets in the container.</source>
          <target state="translated">컨테이너의 버킷 수를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="98ad1bbdae22924b87fb4ba4fa35c8ef28cff5cf" translate="yes" xml:space="preserve">
          <source>Returns the number of characters available in the get area. If a read position is available, effectively returns &lt;code&gt;egptr() - gptr()&lt;/code&gt;, the size of the get area. In this case, the number of bytes returned is the number of bytes that can be extracted from the buffer without calling &lt;code&gt;&lt;a href=&quot;underflow&quot;&gt;underflow()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">get 영역에서 사용 가능한 문자 수를 반환합니다. 읽기 위치가 사용 가능한 경우, get 영역의 크기 인 &lt;code&gt;egptr() - gptr()&lt;/code&gt; 효과적으로 리턴 합니다. 이 경우 반환되는 바이트 수는 &lt;code&gt;&lt;a href=&quot;underflow&quot;&gt;underflow()&lt;/a&gt;&lt;/code&gt; 를 호출하지 않고 버퍼에서 추출 할 수있는 바이트 수입니다 .</target>
        </trans-unit>
        <trans-unit id="7a3d766de30a99eee2e3353eecb1102ef2b578b2" translate="yes" xml:space="preserve">
          <source>Returns the number of characters extracted by the last &lt;a href=&quot;../../named_req/unformattedinputfunction&quot;&gt;unformatted input operation&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../named_req/unformattedinputfunction&quot;&gt;형식화되지 않은&lt;/a&gt; 마지막 입력 작업 에서 추출한 문자 수를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="d1f21c9deda5b327f120782cefaf8663259a75e9" translate="yes" xml:space="preserve">
          <source>Returns the number of characters in the match, i.e. &lt;code&gt;&lt;a href=&quot;../../iterator/distance&quot;&gt;std::distance&lt;/a&gt;(first, second)&lt;/code&gt; if the match is valid, 0 otherwise.</source>
          <target state="translated">일치하는 문자 수를 반환합니다 &lt;code&gt;&lt;a href=&quot;../../iterator/distance&quot;&gt;std::distance&lt;/a&gt;(first, second)&lt;/code&gt; 예 &lt;a href=&quot;../../iterator/distance&quot;&gt;:&lt;/a&gt; 일치하는 경우 std :: distance (first, second)) . 그렇지 않으면 0입니다.</target>
        </trans-unit>
        <trans-unit id="2e513954d3ca355624799c17f9e8acfbfd285f0f" translate="yes" xml:space="preserve">
          <source>Returns the number of characters that the string has currently allocated space for.</source>
          <target state="translated">문자열이 현재 공간을 할당 한 문자 수를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="b771834e440230f8fdd3401bf841c930002186f5" translate="yes" xml:space="preserve">
          <source>Returns the number of characters that were output in the put area of the associated &lt;code&gt;&lt;a href=&quot;../strstreambuf&quot;&gt;std::strstreambuf&lt;/a&gt;&lt;/code&gt;. Effectively calls &lt;code&gt;rdbuf()-&amp;gt;pcount()&lt;/code&gt;.</source>
          <target state="translated">연관된 &lt;code&gt;&lt;a href=&quot;../strstreambuf&quot;&gt;std::strstreambuf&lt;/a&gt;&lt;/code&gt; 의 넣기 영역에 출력 된 문자 수를 리턴합니다 . 효과적으로 &lt;code&gt;rdbuf()-&amp;gt;pcount()&lt;/code&gt; 호출합니다 .</target>
        </trans-unit>
        <trans-unit id="8b453516fa4fd1d8ddb3adeaee4563f2bac41eb3" translate="yes" xml:space="preserve">
          <source>Returns the number of characters written to the output sequence.</source>
          <target state="translated">출력 순서에 기록 된 문자 수를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="aebd7b77d5d4d5408464f5c6dfc238e7fb1a2daf" translate="yes" xml:space="preserve">
          <source>Returns the number of concurrent threads supported by the implementation. The value should be considered only a hint.</source>
          <target state="translated">구현이 지원하는 동시 스레드 수를 리턴합니다. 이 값은 힌트 일뿐입니다.</target>
        </trans-unit>
        <trans-unit id="174b7586f5d4312f65e02b03a8c1e26e46f220f8" translate="yes" xml:space="preserve">
          <source>Returns the number of different &lt;code&gt;shared_ptr&lt;/code&gt; instances (&lt;code&gt;this&lt;/code&gt; included) managing the current object. If there is no managed object, &lt;code&gt;​0​&lt;/code&gt; is returned.</source>
          <target state="translated">현재 객체를 관리하는 서로 다른 &lt;code&gt;shared_ptr&lt;/code&gt; 인스턴스 ( &lt;code&gt;this&lt;/code&gt; 포함) 의 수를 반환 합니다. 어떤 개체가 관리되는 경우, &lt;code&gt;​0​&lt;/code&gt; 반환되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="38b8fad439f710a3feabdc127a55e6aac93bc0ae" translate="yes" xml:space="preserve">
          <source>Returns the number of directories from the starting directory to the currently iterated directory, i.e. the current depth of the directory hierarchy.</source>
          <target state="translated">시작 디렉토리에서 현재 반복 된 디렉토리까지의 디렉토리 수를 리턴합니다 (예 : 디렉토리 계층의 현재 깊이).</target>
        </trans-unit>
        <trans-unit id="dc53d735298482bde24a7c4ec081dd352beb5364" translate="yes" xml:space="preserve">
          <source>Returns the number of elements in &lt;code&gt;Ints&lt;/code&gt;. Equivalent to &lt;code&gt;sizeof...(Ints)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Ints&lt;/code&gt; 의 요소 수를 반환합니다 . &lt;code&gt;sizeof...(Ints)&lt;/code&gt; 와 같습니다 .</target>
        </trans-unit>
        <trans-unit id="03d068eb7b84955218d0cac9ee86af5b33bafdf1" translate="yes" xml:space="preserve">
          <source>Returns the number of elements in a &lt;a href=&quot;parameter_pack&quot;&gt;parameter pack&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;parameter_pack&quot;&gt;파라미터 팩&lt;/a&gt; 내의 요소 수를 돌려줍니다 .</target>
        </trans-unit>
        <trans-unit id="a43f59de23159724dc26eb4cb86352bd210998e9" translate="yes" xml:space="preserve">
          <source>Returns the number of elements in the bucket with index &lt;code&gt;n&lt;/code&gt;.</source>
          <target state="translated">인덱스가 &lt;code&gt;n&lt;/code&gt; 인 버킷의 요소 수를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="a28ca1ab56894a2bc9256c2016002a73e49bb113" translate="yes" xml:space="preserve">
          <source>Returns the number of elements in the container, i.e. &lt;code&gt;&lt;a href=&quot;../../iterator/distance&quot;&gt;std::distance&lt;/a&gt;(begin(), end())&lt;/code&gt;.</source>
          <target state="translated">컨테이너의 요소 수를 리턴합니다 &lt;code&gt;&lt;a href=&quot;../../iterator/distance&quot;&gt;std::distance&lt;/a&gt;(begin(), end())&lt;/code&gt; 예 : &lt;a href=&quot;../../iterator/distance&quot;&gt;std :: distance&lt;/a&gt; (begin (), end ())) .</target>
        </trans-unit>
        <trans-unit id="98acced69a33fdceef1c882d99fe06881b91001a" translate="yes" xml:space="preserve">
          <source>Returns the number of elements in the initializer list, i.e. &lt;code&gt;&lt;a href=&quot;../../iterator/distance&quot;&gt;std::distance&lt;/a&gt;(begin(), end())&lt;/code&gt;.</source>
          <target state="translated">이니셜 라이저 목록의 요소 수를 리턴합니다 &lt;code&gt;&lt;a href=&quot;../../iterator/distance&quot;&gt;std::distance&lt;/a&gt;(begin(), end())&lt;/code&gt; 예 : &lt;a href=&quot;../../iterator/distance&quot;&gt;std :: distance&lt;/a&gt; (begin (), end ())) .</target>
        </trans-unit>
        <trans-unit id="f0895409c4a96c66249936eb82061635a917fc7b" translate="yes" xml:space="preserve">
          <source>Returns the number of elements in the range &lt;code&gt;[first, last)&lt;/code&gt; satisfying specific criteria.</source>
          <target state="translated">특정 기준을 만족하는 &lt;code&gt;[first, last)&lt;/code&gt; 범위의 요소 수를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="7d5495fb69cdfe811773acd6a923ecb64de1b37d" translate="yes" xml:space="preserve">
          <source>Returns the number of elements in the span.</source>
          <target state="translated">범위의 요소 수를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="4f1d41dfc7754764a4936ef4e09527e042a9d113" translate="yes" xml:space="preserve">
          <source>Returns the number of elements in the underlying container, that is, &lt;code&gt;c.size()&lt;/code&gt;.</source>
          <target state="translated">기본이되는 컨테이너 내의 요소 수, 즉 &lt;code&gt;c.size()&lt;/code&gt; 줍니다.</target>
        </trans-unit>
        <trans-unit id="d68130cd8a1a766b06ac25df710fcd56506b5248" translate="yes" xml:space="preserve">
          <source>Returns the number of elements in the valarray.</source>
          <target state="translated">valarray의 요소 수를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="3ec9ea4e2b9bd7b23f1513bec6579b6ddaf86d5e" translate="yes" xml:space="preserve">
          <source>Returns the number of elements that the container has currently allocated space for.</source>
          <target state="translated">컨테이너가 현재 공간을 할당 한 요소 수를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="7257c0fd76399238d036f9bd52cc9a64d0d7568e" translate="yes" xml:space="preserve">
          <source>Returns the number of elements with key that compares</source>
          <target state="translated">키와 비교하는 요소 수를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="5de8b03df52da9de7e5e03103eb97836a2ae02a7" translate="yes" xml:space="preserve">
          <source>Returns the number of hard links for the filesystem object identified by path &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="translated">경로 &lt;code&gt;p&lt;/code&gt; 로 식별되는 파일 시스템 객체의 하드 링크 수를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="5cb46613d39c3e41d2278c75f7ca7217a515434a" translate="yes" xml:space="preserve">
          <source>Returns the number of hops from &lt;code&gt;first&lt;/code&gt; to &lt;code&gt;last&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;first&lt;/code&gt; 에서 &lt;code&gt;last&lt;/code&gt; 홉 수를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="4a7568fe2e7ce0ac1f110bbd315439ee6ee7dd86" translate="yes" xml:space="preserve">
          <source>Returns the number of marked sub-expressions (also known as capture groups) within the regular expression.</source>
          <target state="translated">정규 표현식 내에서 표시된 하위 표현식 (캡처 그룹이라고도 함)의 수를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="56804e4401fb018410a93e90f2e6bcb525e89a10" translate="yes" xml:space="preserve">
          <source>Returns the number of source characters that were processed by the most recent &lt;code&gt;&lt;a href=&quot;from_bytes&quot;&gt;from_bytes()&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;to_bytes&quot;&gt;to_bytes()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">가장 최근의 &lt;code&gt;&lt;a href=&quot;from_bytes&quot;&gt;from_bytes()&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;to_bytes&quot;&gt;to_bytes()&lt;/a&gt;&lt;/code&gt; 의해 처리 된 소스 문자 수를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="9db4d647cbc0a34e02a6f5eaa8ef3eb94a196197" translate="yes" xml:space="preserve">
          <source>Returns the number of submatches, i.e. &lt;code&gt;&lt;a href=&quot;../../iterator/distance&quot;&gt;std::distance&lt;/a&gt;(begin(), end())&lt;/code&gt;.</source>
          <target state="translated">부분 일치 횟수를 반환합니다 &lt;code&gt;&lt;a href=&quot;../../iterator/distance&quot;&gt;std::distance&lt;/a&gt;(begin(), end())&lt;/code&gt; 예 : &lt;a href=&quot;../../iterator/distance&quot;&gt;std :: distance&lt;/a&gt; (begin (), end ())) .</target>
        </trans-unit>
        <trans-unit id="c5c39e6c4fd31ae0cdd5fcf52af7564c373e1ce5" translate="yes" xml:space="preserve">
          <source>Returns the number of ticks for this duration.</source>
          <target state="translated">이 기간 동안의 틱 수를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="a7fe96f5c66294e8341691e7f9477fbbb3c0f662" translate="yes" xml:space="preserve">
          <source>Returns the options that affect the directory iteration. The options can only be supplied when constructing the directory iterator.</source>
          <target state="translated">디렉토리 반복에 영향을주는 옵션을 리턴합니다. 디렉토리 반복자를 구성 할 때만 옵션을 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0920249e93b7f3344c500733d97d00607385b9dd" translate="yes" xml:space="preserve">
          <source>Returns the options that control the pooling behavior of this resource</source>
          <target state="translated">이 자원의 풀링 동작을 제어하는 ​​옵션을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="f1387e8b7ead6c351e6c717632dab29a4f22bf8e" translate="yes" xml:space="preserve">
          <source>Returns the options that controls the pooling behavior of this resource.</source>
          <target state="translated">이 자원의 풀링 동작을 제어하는 ​​옵션을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="3e4b1931c1cabd2139a4c13ee3369a5995cabc55" translate="yes" xml:space="preserve">
          <source>Returns the output position indicator of the current associated &lt;code&gt;streambuf&lt;/code&gt; object.</source>
          <target state="translated">현재 연결된 &lt;code&gt;streambuf&lt;/code&gt; 객체 의 출력 위치 표시기를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="12aebbd1c28a2803f63003944239c810c025c38f" translate="yes" xml:space="preserve">
          <source>Returns the p distribution parameter the distribution was constructed with. The parameter defines the probability of a trial generating &lt;code&gt;true&lt;/code&gt;. The default value is &lt;code&gt;0.5&lt;/code&gt;.</source>
          <target state="translated">분포가 구성된 p 분포 모수를 반환합니다. 이 매개 변수는 시험이 &lt;code&gt;true&lt;/code&gt; 를 생성 할 확률을 정의 합니다 . 기본값은 &lt;code&gt;0.5&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="3baf563df393fafeea323ae7e229a4a84660aa02" translate="yes" xml:space="preserve">
          <source>Returns the p parameter the distribution was constructed with. It defines the probability of generating &lt;code&gt;true&lt;/code&gt;. The default value is &lt;code&gt;0.5&lt;/code&gt;.</source>
          <target state="translated">분포가 구성된 p 매개 변수를 반환합니다. &lt;code&gt;true&lt;/code&gt; 를 생성 할 확률을 정의 합니다 . 기본값은 &lt;code&gt;0.5&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="e2de0569a7215a4910b7cd8bacd7edde4dd891e6" translate="yes" xml:space="preserve">
          <source>Returns the parameters passed to the slice on construction - start, size and stride respectively.</source>
          <target state="translated">시공시 슬라이스에 전달 된 매개 변수 (시작, 크기 및 보폭)를 각각 반환합니다.</target>
        </trans-unit>
        <trans-unit id="c51020f12a51f6f101e0f62f279e4b40bfd1cdf9" translate="yes" xml:space="preserve">
          <source>Returns the parameters passed to the slice on construction - start, sizes and strides respectively.</source>
          <target state="translated">시공시 슬라이스로 전달 된 매개 변수 (시작, 크기 및 보폭)를 각각 반환합니다.</target>
        </trans-unit>
        <trans-unit id="7579288dcd4058707c83d5af637573b3d46876ec" translate="yes" xml:space="preserve">
          <source>Returns the parameters the distribution has been constructed with.</source>
          <target state="translated">분포가 구성된 모수를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="0a74612f310625d9f24a40d92035f119ba202cd9" translate="yes" xml:space="preserve">
          <source>Returns the parameters the distribution was constructed with.</source>
          <target state="translated">분포가 구성된 모수를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="32a2165771f5bc8f32f8b8d18effcb4bfd1e3299" translate="yes" xml:space="preserve">
          <source>Returns the past-the-end iterator of the &lt;code&gt;tzdb_list&lt;/code&gt;. Attempting to dereference this iterator results in undefined behavior.</source>
          <target state="translated">&lt;code&gt;tzdb_list&lt;/code&gt; 의 과거 반복기를 리턴합니다 . 이 반복자를 역 참조하려고하면 정의되지 않은 동작이 발생합니다.</target>
        </trans-unit>
        <trans-unit id="f489031c3712347aeb02fe102e74033aed5ba361" translate="yes" xml:space="preserve">
          <source>Returns the path to the parent directory.</source>
          <target state="translated">부모 디렉토리의 경로를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="d72e0a0de6b27210c5d8173027623c174ddb1628" translate="yes" xml:space="preserve">
          <source>Returns the paths that were stored in the exception object.</source>
          <target state="translated">예외 객체에 저장된 경로를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="c29b4c8f5a0f7ecc30c93502dfe1b21f499a4d6b" translate="yes" xml:space="preserve">
          <source>Returns the payload object object held by the exception object.</source>
          <target state="translated">예외 객체가 보유한 페이로드 객체 객체를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="fac79435ff8b5f43fce78d6fa9195abbb5d34db1" translate="yes" xml:space="preserve">
          <source>Returns the platform dependent error value.</source>
          <target state="translated">플랫폼 종속 오류 값을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="eb450bce8b1ae6ae650550321099bc64a5c809dd" translate="yes" xml:space="preserve">
          <source>Returns the pointer that is held by &lt;code&gt;*this&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;*this&lt;/code&gt; 가 보유한 포인터를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="b538bee84f4de41049a64b846c6b0597cecc3861" translate="yes" xml:space="preserve">
          <source>Returns the pointer to the beginning of the buffer, after freezing it. Effectively calls &lt;code&gt;rdbuf()-&amp;gt;str()&lt;/code&gt;.</source>
          <target state="translated">버퍼를 고정한 후 버퍼의 시작 부분에 대한 포인터를 반환합니다. 효과적으로 &lt;code&gt;rdbuf()-&amp;gt;str()&lt;/code&gt; 호출합니다 .</target>
        </trans-unit>
        <trans-unit id="5778e4440cb9d3b18aea817f6e2114a76d6c51cf" translate="yes" xml:space="preserve">
          <source>Returns the position of the first character of the specified sub-match.</source>
          <target state="translated">지정된 부분 일치의 첫 문자 위치를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="21e0589db00cc1e4d7a1735a64ac57916b57d527" translate="yes" xml:space="preserve">
          <source>Returns the previous value of the default memory resource pointer.</source>
          <target state="translated">기본 메모리 리소스 포인터의 이전 값을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="558cb056c529e0c218f09ed9a1aa012a0041bd19" translate="yes" xml:space="preserve">
          <source>Returns the product of &lt;code&gt;lhs&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;lhs&lt;/code&gt; 및 &lt;code&gt;rhs&lt;/code&gt; 의 곱을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="3f481c14ac7ba99d44abf1406a844e2495748b7c" translate="yes" xml:space="preserve">
          <source>Returns the projection of the complex number &lt;code&gt;z&lt;/code&gt; onto the Riemann sphere.</source>
          <target state="translated">복소수 &lt;code&gt;z&lt;/code&gt; 의 투영을 리만 구체에 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="ca7e521f336ebf18b29aa4306c2f184230918ff9" translate="yes" xml:space="preserve">
          <source>Returns the regular expression syntax flags as set in the constructor or the last call to &lt;code&gt;&lt;a href=&quot;assign&quot;&gt;assign()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">생성자 또는 &lt;code&gt;&lt;a href=&quot;assign&quot;&gt;assign()&lt;/a&gt;&lt;/code&gt; 의 마지막 호출에서 설정된 정규식 구문 플래그를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="9b401d695fbe6b4e8d7f86294ca7a058b2f923ee" translate="yes" xml:space="preserve">
          <source>Returns the remainder of the division of &lt;code&gt;lhs&lt;/code&gt; by &lt;code&gt;rhs&lt;/code&gt; (or whatever &lt;code&gt;operator%&lt;/code&gt; is overloaded to do).</source>
          <target state="translated">&lt;code&gt;lhs&lt;/code&gt; 를 &lt;code&gt;rhs&lt;/code&gt; 로 나눈 나머지를 반환합니다 (또는 &lt;code&gt;operator%&lt;/code&gt; 가 오버로드 할 경우).</target>
        </trans-unit>
        <trans-unit id="1b6419ca3c44ea1f1777445c553a6bc2c9e0089b" translate="yes" xml:space="preserve">
          <source>Returns the remainder of the division of &lt;code&gt;lhs&lt;/code&gt; by &lt;code&gt;rhs&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;lhs&lt;/code&gt; 를 &lt;code&gt;rhs&lt;/code&gt; 로 나눈 나머지를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="a489ac4058841d39dab0c237cb1cdd4e08726447" translate="yes" xml:space="preserve">
          <source>Returns the result of &lt;code&gt;!arg&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;!arg&lt;/code&gt; 의 결과를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="b76179239a4827522c804788032dd6df8986a6c1" translate="yes" xml:space="preserve">
          <source>Returns the result of &lt;code&gt;&lt;a href=&quot;../forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;T&amp;gt;(lhs) | &lt;a href=&quot;../forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;U&amp;gt;(rhs)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;T&amp;gt;(lhs) | &lt;a href=&quot;../forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;U&amp;gt;(rhs)&lt;/code&gt; 의 결과를 리턴합니다. std :: forward &amp;lt;U&amp;gt; (rhs) .</target>
        </trans-unit>
        <trans-unit id="e3169d401e9ba1c9966abac7c38bdf384ee457be" translate="yes" xml:space="preserve">
          <source>Returns the result of &lt;code&gt;&lt;a href=&quot;../forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;T&amp;gt;(lhs) || &lt;a href=&quot;../forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;U&amp;gt;(rhs)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;T&amp;gt;(lhs) || &lt;a href=&quot;../forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;U&amp;gt;(rhs)&lt;/code&gt; 의 결과를 리턴합니다. std :: forward &amp;lt;U&amp;gt; (rhs) .</target>
        </trans-unit>
        <trans-unit id="0a5d626166e8a69eec141f44dddc99650199dcb4" translate="yes" xml:space="preserve">
          <source>Returns the result of &lt;code&gt;lhs &amp;amp; rhs&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;lhs &amp;amp; rhs&lt;/code&gt; 의 결과를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="13ca9f4975e27b5beba29e3e0f960c3933519d65" translate="yes" xml:space="preserve">
          <source>Returns the result of &lt;code&gt;lhs &amp;amp;&amp;amp; rhs&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;lhs &amp;amp;&amp;amp; rhs&lt;/code&gt; 의 결과를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="a7d145e63fa2070ddfd405d7654d30fbd3b53a31" translate="yes" xml:space="preserve">
          <source>Returns the result of &lt;code&gt;lhs &amp;gt; rhs&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;lhs &amp;gt; rhs&lt;/code&gt; 의 결과를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="c4395605546acf7773a50bc05011299181cb0bda" translate="yes" xml:space="preserve">
          <source>Returns the result of &lt;code&gt;lhs &amp;gt;= rhs&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;lhs &amp;gt;= rhs&lt;/code&gt; 의 결과를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="21281ea5ea6191827c7ce24db046ecbddf019afe" translate="yes" xml:space="preserve">
          <source>Returns the result of &lt;code&gt;lhs &amp;lt; rhs&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;lhs &amp;lt; rhs&lt;/code&gt; 의 결과를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="7a1b4c262bc32ab82d1eee3be90a8fd94044ca72" translate="yes" xml:space="preserve">
          <source>Returns the result of &lt;code&gt;lhs &amp;lt;= rhs&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;lhs &amp;lt;= rhs&lt;/code&gt; 의 결과를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="75d694a506550ea0d1606c7df8eff438679ea94c" translate="yes" xml:space="preserve">
          <source>Returns the result of &lt;code&gt;lhs ^ rhs&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;lhs ^ rhs&lt;/code&gt; 의 결과를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="fb9a3a707cbe1cab27e132fd73f574d2c1d57ae3" translate="yes" xml:space="preserve">
          <source>Returns the result of &lt;code&gt;~arg&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;~arg&lt;/code&gt; 의 결과를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="4343aabbcd37404f3c59d2ed2b9b7984b4344a4f" translate="yes" xml:space="preserve">
          <source>Returns the result of a boolean operation.</source>
          <target state="translated">부울 연산의 결과를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="881482ab3fc01aadc81a9cce7653ade6fa55e47b" translate="yes" xml:space="preserve">
          <source>Returns the result of bitwise AND of &lt;code&gt;lhs&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;lhs&lt;/code&gt; 및 &lt;code&gt;rhs&lt;/code&gt; 의 비트 단위 AND 결과를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="1955211d206c743e21181b5e7367a478de7b30bc" translate="yes" xml:space="preserve">
          <source>Returns the result of bitwise NOT of &lt;code&gt;arg&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;arg&lt;/code&gt; 의 비트 단위 NOT의 결과를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="cef577051dec53f03ac9d053acd5c8654673a6a6" translate="yes" xml:space="preserve">
          <source>Returns the result of bitwise OR of &lt;code&gt;lhs&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;lhs&lt;/code&gt; 및 &lt;code&gt;rhs&lt;/code&gt; 의 비트 단위 OR 결과를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="def2c8843906d0e76afc76ad5a526a6557cc0a5a" translate="yes" xml:space="preserve">
          <source>Returns the result of bitwise XOR of &lt;code&gt;lhs&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;lhs&lt;/code&gt; 및 &lt;code&gt;rhs&lt;/code&gt; 의 비트 별 XOR 결과를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="8a77208cdf7204fc6a54fb3082c0aa1a0bec55ff" translate="yes" xml:space="preserve">
          <source>Returns the result of dividing &lt;code&gt;lhs&lt;/code&gt; by &lt;code&gt;rhs&lt;/code&gt; (or whatever &lt;code&gt;operator/&lt;/code&gt; is overloaded to do).</source>
          <target state="translated">&lt;code&gt;lhs&lt;/code&gt; 를 &lt;code&gt;rhs&lt;/code&gt; 로 나눈 결과 (또는 &lt;code&gt;operator/&lt;/code&gt; 과부하가 걸리는 모든 결과)를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="03dcb59cbb2ff368f0a42a3ec69944a9d4f34163" translate="yes" xml:space="preserve">
          <source>Returns the result of division of &lt;code&gt;lhs&lt;/code&gt; by &lt;code&gt;rhs&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;lhs&lt;/code&gt; 를 &lt;code&gt;rhs&lt;/code&gt; 로 나눈 결과를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="85d78c913115f00e10769aab5178fc2a0c672543" translate="yes" xml:space="preserve">
          <source>Returns the result of equality comparison between &lt;code&gt;lhs&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;lhs&lt;/code&gt; 와 &lt;code&gt;rhs&lt;/code&gt; 의 동등 비교 결과를 돌려 줍니다.</target>
        </trans-unit>
        <trans-unit id="7282e4c27e79564b836e48d63e126ae093797316" translate="yes" xml:space="preserve">
          <source>Returns the result of multiplying &lt;code&gt;lhs&lt;/code&gt; by &lt;code&gt;rhs&lt;/code&gt; (or whatever &lt;code&gt;operator*&lt;/code&gt; is overloaded to do).</source>
          <target state="translated">&lt;code&gt;lhs&lt;/code&gt; 에 &lt;code&gt;rhs&lt;/code&gt; 를 곱한 결과를 반환합니다 (또는 어떤 &lt;code&gt;operator*&lt;/code&gt; 에 과부하가 걸리 든지 ).</target>
        </trans-unit>
        <trans-unit id="78f4ed611a4f405d5e32f333fb574dcb6d8d584f" translate="yes" xml:space="preserve">
          <source>Returns the result of negating &lt;code&gt;arg&lt;/code&gt; (or whatever the unary &lt;code&gt;operator-&lt;/code&gt; is overloaded to do).</source>
          <target state="translated">&lt;code&gt;arg&lt;/code&gt; 를 부정한 결과 (또는 단항 &lt;code&gt;operator-&lt;/code&gt; 가 오버로드 된 모든 결과)를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="875720805b3df50fda82f43a079aa0b15fa70e43" translate="yes" xml:space="preserve">
          <source>Returns the result of non-equality comparison between &lt;code&gt;lhs&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;lhs&lt;/code&gt; 와 &lt;code&gt;rhs&lt;/code&gt; 의 비 균등 비교 결과를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="336b4ba6e4e0aa78b82be614532b4d74203d30ef" translate="yes" xml:space="preserve">
          <source>Returns the result of specific arithmetic operation.</source>
          <target state="translated">특정 산술 연산의 결과를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="b525d075a5f67e324f33e7dd7cda9257a636e2d9" translate="yes" xml:space="preserve">
          <source>Returns the result of subtracting &lt;code&gt;rhs&lt;/code&gt; from &lt;code&gt;lhs&lt;/code&gt; (or whatever &lt;code&gt;operator-&lt;/code&gt; if overloaded to do).</source>
          <target state="translated">반환 뺀 결과 &lt;code&gt;rhs&lt;/code&gt; 에서 &lt;code&gt;lhs&lt;/code&gt; (어떤 또는 &lt;code&gt;operator-&lt;/code&gt; 할 과부하 경우).</target>
        </trans-unit>
        <trans-unit id="b49d529fbd2b427b6dddb2c5e8941d4e6cb0c563" translate="yes" xml:space="preserve">
          <source>Returns the root directory of the generic-format path. If the path (in generic format) does not include root directory, returns &lt;code&gt;path()&lt;/code&gt;.</source>
          <target state="translated">일반 형식 경로의 루트 디렉토리를 반환합니다. 경로 (일반 형식)에 루트 디렉토리가 포함되지 않은 경우 &lt;code&gt;path()&lt;/code&gt; 리턴 합니다 .</target>
        </trans-unit>
        <trans-unit id="133d5f67f6c88049f9795b28968927491d2846d7" translate="yes" xml:space="preserve">
          <source>Returns the root name of the generic-format path. If the path (in generic format) does not include root name, returns &lt;code&gt;path()&lt;/code&gt;.</source>
          <target state="translated">일반 형식 경로의 루트 이름을 반환합니다. 경로 (일반 형식)에 루트 이름이 포함되지 않은 경우 &lt;code&gt;path()&lt;/code&gt; 반환 합니다 .</target>
        </trans-unit>
        <trans-unit id="0b44c8377c4f396d6dda638d397eab6f23a5398f" translate="yes" xml:space="preserve">
          <source>Returns the root path of the path. If the path does not include root path, returns &lt;code&gt;path()&lt;/code&gt;.</source>
          <target state="translated">경로의 루트 경로를 반환합니다. 경로에 루트 경로가 포함되어 있지 않으면 &lt;code&gt;path()&lt;/code&gt; 반환 합니다 .</target>
        </trans-unit>
        <trans-unit id="585647f583397b20795f7946a8cc3f9bc4081c42" translate="yes" xml:space="preserve">
          <source>Returns the size of the given container &lt;code&gt;c&lt;/code&gt; or array &lt;code&gt;array&lt;/code&gt;.</source>
          <target state="translated">주어진 컨테이너 &lt;code&gt;c&lt;/code&gt; 또는 배열 &lt;code&gt;array&lt;/code&gt; 의 크기를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="85e91e2a179c6157d3612306839727bdc8a92d95" translate="yes" xml:space="preserve">
          <source>Returns the size of the sequence in bytes.</source>
          <target state="translated">시퀀스의 크기를 바이트 단위로 반환합니다.</target>
        </trans-unit>
        <trans-unit id="085de6f1a4028fd3bfd623816ba4c76bc359ae7a" translate="yes" xml:space="preserve">
          <source>Returns the size of the stored initial seed sequence.</source>
          <target state="translated">저장된 초기 시드 시퀀스의 크기를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="8f918b826b106b878ecb7fd2c10be5c245778c0e" translate="yes" xml:space="preserve">
          <source>Returns the size of the view if the view is bounded.</source>
          <target state="translated">뷰가 바운드 된 경우 뷰의 크기를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="d91d3d0c4f8e44e6e8cfffce7bc191f0350f4557" translate="yes" xml:space="preserve">
          <source>Returns the smaller of the given values.</source>
          <target state="translated">주어진 값 중 작은 값을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="093ef039d6fc581e3dd5bda7a8b01bb4e4b5b7ad" translate="yes" xml:space="preserve">
          <source>Returns the smallest duration &lt;code&gt;t&lt;/code&gt; representable in &lt;code&gt;ToDuration&lt;/code&gt; that is greater or equal to &lt;code&gt;d&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ToDuration&lt;/code&gt; 에서 표현할 수 있는 최소 지속 시간 &lt;code&gt;t&lt;/code&gt; 를 &lt;code&gt;d&lt;/code&gt; 이상으로 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="d52d579f6de1c80db285131b472aac9a590166ce" translate="yes" xml:space="preserve">
          <source>Returns the smallest possible &lt;code&gt;year&lt;/code&gt;, that is, &lt;code&gt;&lt;a href=&quot;../year&quot;&gt;std::chrono::year&lt;/a&gt;(-32767)&lt;/code&gt;.</source>
          <target state="translated">가능한 가장 작은 &lt;code&gt;year&lt;/code&gt; , 즉 &lt;code&gt;&lt;a href=&quot;../year&quot;&gt;std::chrono::year&lt;/a&gt;(-32767)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1177ca955cbf8a34005878518c49835ad32bb877" translate="yes" xml:space="preserve">
          <source>Returns the smallest time point &lt;code&gt;t&lt;/code&gt; representable in &lt;code&gt;ToDuration&lt;/code&gt; that is greater or equal to &lt;code&gt;tp&lt;/code&gt;.</source>
          <target state="translated">반환 작은, 시점 &lt;code&gt;t&lt;/code&gt; 에서 의 표현할 &lt;code&gt;ToDuration&lt;/code&gt; 크거나 같은 &lt;code&gt;tp&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2c7a7b1cb3599d004f091fea0e029165c4e8f151" translate="yes" xml:space="preserve">
          <source>Returns the smallest value that G's operator() may return. The value is strictly less than &lt;code&gt;G::max()&lt;/code&gt;.</source>
          <target state="translated">G의 operator ()가 반환 할 수있는 가장 작은 값을 반환합니다. 값은 &lt;code&gt;G::max()&lt;/code&gt; 보다 엄격히 작습니다 .</target>
        </trans-unit>
        <trans-unit id="c0831994761462bff1fd6037b70388f9abbb5781" translate="yes" xml:space="preserve">
          <source>Returns the special value &quot;positive infinity&quot;, as represented by the floating-point type &lt;code&gt;T&lt;/code&gt;. Only meaningful if &lt;code&gt;&lt;a href=&quot;../numeric_limits&quot;&gt;std::numeric_limits&lt;/a&gt;&amp;lt;T&amp;gt;::has_infinity == true&lt;/code&gt;. In IEEE 754, the most common binary representation of floating-point numbers, the positive infinity is the value with all bits of the exponent set and all bits of the fraction cleared.</source>
          <target state="translated">부동 소수점 유형 &lt;code&gt;T&lt;/code&gt; 로 표시되는 특수한 값 &quot;positive infinity&quot;를 리턴합니다 . &lt;code&gt;&lt;a href=&quot;../numeric_limits&quot;&gt;std::numeric_limits&lt;/a&gt;&amp;lt;T&amp;gt;::has_infinity == true&lt;/code&gt; 경우에만 의미가 있습니다 . 부동 소수점 숫자의 가장 일반적인 이진 표현 인 IEEE 754에서 양의 무한대는 지수 세트의 모든 비트와 분수의 모든 비트가 지워진 값입니다.</target>
        </trans-unit>
        <trans-unit id="2bce02d15814aec567e12d7175ab166495414834" translate="yes" xml:space="preserve">
          <source>Returns the special value &quot;quiet &lt;a href=&quot;https://en.wikipedia.org/wiki/NaN&quot;&gt;not-a-number&lt;/a&gt;&quot;, as represented by the floating-point type &lt;code&gt;T&lt;/code&gt;. Only meaningful if &lt;code&gt;&lt;a href=&quot;../numeric_limits&quot;&gt;std::numeric_limits&lt;/a&gt;&amp;lt;T&amp;gt;::has_quiet_NaN == true&lt;/code&gt;. In IEEE 754, the most common binary representation of floating-point numbers, any value with all bits of the exponent set and at least one bit of the fraction set represents a NaN. It is implementation-defined which values of the fraction represent quiet or signaling NaNs, and whether the sign bit is meaningful.</source>
          <target state="translated">부동 소수점 유형 &lt;code&gt;T&lt;/code&gt; 로 표시되는 특수 값 &quot;quiet &lt;a href=&quot;https://en.wikipedia.org/wiki/NaN&quot;&gt;not-a-number&lt;/a&gt; &quot;를 리턴합니다 . &lt;code&gt;&lt;a href=&quot;../numeric_limits&quot;&gt;std::numeric_limits&lt;/a&gt;&amp;lt;T&amp;gt;::has_quiet_NaN == true&lt;/code&gt; &amp;lt;T&amp;gt; :: has_quiet_NaN == true 인 경우에만 의미가 있습니다 . IEEE 754에서 부동 소수점 숫자의 가장 일반적인 이진 표현, 지수 세트의 모든 비트 및 분수 세트의 최소 1 비트를 가진 모든 값은 NaN을 나타냅니다. 분수의 어떤 값이 조용한 NaN 또는 시그널링 NaN을 나타내는 지, 그리고 부호 비트가 의미가 있는지 여부는 구현에 따라 정의됩니다.</target>
        </trans-unit>
        <trans-unit id="75b4ec948fc38898ca158011eb77bf1e30c8a9de" translate="yes" xml:space="preserve">
          <source>Returns the special value &quot;signaling &lt;a href=&quot;https://en.wikipedia.org/wiki/NaN&quot;&gt;not-a-number&lt;/a&gt;&quot;, as represented by the floating-point type &lt;code&gt;T&lt;/code&gt;. Only meaningful if &lt;code&gt;&lt;a href=&quot;../numeric_limits&quot;&gt;std::numeric_limits&lt;/a&gt;&amp;lt;T&amp;gt;::has_signaling_NaN == true&lt;/code&gt;. In IEEE 754, the most common binary representation of floating-point numbers, any value with all bits of the exponent set and at least one bit of the fraction set represents a NaN. It is implementation-defined which values of the fraction represent quiet or signaling NaNs, and whether the sign bit is meaningful.</source>
          <target state="translated">부동 소수점 유형 &lt;code&gt;T&lt;/code&gt; 로 표시되는 특수 값 &quot; &lt;a href=&quot;https://en.wikipedia.org/wiki/NaN&quot;&gt;숫자가 아닌&lt;/a&gt; 신호&quot;를 리턴합니다 . &lt;code&gt;&lt;a href=&quot;../numeric_limits&quot;&gt;std::numeric_limits&lt;/a&gt;&amp;lt;T&amp;gt;::has_signaling_NaN == true&lt;/code&gt; &amp;lt;T&amp;gt; :: has_signaling_NaN == true 인 경우에만 의미가 있습니다 . IEEE 754에서 부동 소수점 숫자의 가장 일반적인 이진 표현, 지수 세트의 모든 비트 및 분수 세트의 최소 1 비트를 가진 모든 값은 NaN을 나타냅니다. 분수의 어떤 값이 조용한 NaN 또는 시그널링 NaN을 나타내는 지, 그리고 부호 비트가 의미가 있는지 여부는 구현에 따라 정의됩니다.</target>
        </trans-unit>
        <trans-unit id="1d966c6fbd5a14aecf42147325c657cd02208c3b" translate="yes" xml:space="preserve">
          <source>Returns the stored duration.</source>
          <target state="translated">저장된 기간을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="876ffef01a8477837ee8a640ab4a18c8114387c6" translate="yes" xml:space="preserve">
          <source>Returns the stored error category.</source>
          <target state="translated">저장된 오류 범주를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="9d07134d5cf7d55b30a68d4f60eeeead919b6df0" translate="yes" xml:space="preserve">
          <source>Returns the stored error code.</source>
          <target state="translated">저장된 오류 코드를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="e50a78a7c8f65eef8efc0215e84cf77a2239db34" translate="yes" xml:space="preserve">
          <source>Returns the stored pointer.</source>
          <target state="translated">저장된 포인터를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="6e76437c9da1ef7b6d8133968891bded8116b105" translate="yes" xml:space="preserve">
          <source>Returns the stored reference.</source>
          <target state="translated">저장된 참조를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="d797ef2f230d2d8d65e3ca87bd8cf5517717a47e" translate="yes" xml:space="preserve">
          <source>Returns the substring from the beginning of &lt;a href=&quot;filename&quot;&gt;&lt;code&gt;filename()&lt;/code&gt;&lt;/a&gt; up to and not including the last period (&lt;code&gt;.&lt;/code&gt;) character, with the following exceptions:</source>
          <target state="translated">&lt;a href=&quot;filename&quot;&gt; &lt;code&gt;filename()&lt;/code&gt; &lt;/a&gt; 의 시작 부분부터 마지막 마침표 ( &lt;code&gt;.&lt;/code&gt; ) 문자를 포함하지 않는 부분 문자열을 반환합니다 . 단, 다음과 같은 예외가 있습니다.</target>
        </trans-unit>
        <trans-unit id="af4f12acf9eed987d20278e420b31f08024edec2" translate="yes" xml:space="preserve">
          <source>Returns the sum of &lt;code&gt;lhs&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;lhs&lt;/code&gt; 및 &lt;code&gt;rhs&lt;/code&gt; 의 합을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="617a20189d7c6b1aec644802e36d40caf43425d7" translate="yes" xml:space="preserve">
          <source>Returns the time zone pointer for the time zone designated by &lt;code&gt;name&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; 으로 지정된 시간대의 시간대 포인터를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="a22b18625a3c1559e51355f6c94504a5147f1173" translate="yes" xml:space="preserve">
          <source>Returns the type of the stored function.</source>
          <target state="translated">저장된 함수의 유형을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="b90da109a7cd57bb3436fa012220c6196cf694d5" translate="yes" xml:space="preserve">
          <source>Returns the underlying base iterator.</source>
          <target state="translated">기본이되는 반복자를 돌려줍니다.</target>
        </trans-unit>
        <trans-unit id="bc30cbe098ecc9d81481847c32e0723b01a083e4" translate="yes" xml:space="preserve">
          <source>Returns the underlying base iterator. That is &lt;code&gt;&lt;a href=&quot;../reverse_iterator&quot;&gt;std::reverse_iterator&lt;/a&gt;(it).base() == it&lt;/code&gt;.</source>
          <target state="translated">기본이되는 반복자를 돌려줍니다. 그것은 &lt;code&gt;&lt;a href=&quot;../reverse_iterator&quot;&gt;std::reverse_iterator&lt;/a&gt;(it).base() == it&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="9481a59c003da5e7f87785ded055343488b15667" translate="yes" xml:space="preserve">
          <source>Returns the underlying engine.</source>
          <target state="translated">기본 엔진을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="3ebf76603603bad4394125ecd772b29ed85c2680" translate="yes" xml:space="preserve">
          <source>Returns the underlying implementation-defined native handle object.</source>
          <target state="translated">기본 구현 정의 네이티브 핸들 객체를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="5c6084ff7b53cf76e2ea1476dc9fe76f57b948e9" translate="yes" xml:space="preserve">
          <source>Returns the uppercase form of &lt;code&gt;ch&lt;/code&gt; if one is listed in the locale, otherwise returns &lt;code&gt;ch&lt;/code&gt; unchanged.</source>
          <target state="translated">로케일에 나열된 &lt;code&gt;ch&lt;/code&gt; 의 대문자 양식을 리턴하고 , 그렇지 않으면 &lt;code&gt;ch&lt;/code&gt; 를 변경하지 않고 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="28208fa722bf87d3628c4300c69fa486d0702dcd" translate="yes" xml:space="preserve">
          <source>Returns the value &lt;code&gt;t&lt;/code&gt; representable in &lt;code&gt;ToDuration&lt;/code&gt; that is the closest to &lt;code&gt;d&lt;/code&gt;. If there are two such values, returns the even value (that is, the value &lt;code&gt;t&lt;/code&gt; such that &lt;code&gt;t % 2 == 0&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;d&lt;/code&gt; 에 가장 가까운 &lt;code&gt;ToDuration&lt;/code&gt; 에서 표시 할 수있는 값 &lt;code&gt;t&lt;/code&gt; 를 반환합니다 . 이러한 값이 두 개이면 짝수 값 (즉, &lt;code&gt;t % 2 == 0&lt;/code&gt; 과 같은 값 &lt;code&gt;t&lt;/code&gt; ) 을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="e6f8ac72940fce8b334f45e0ad077a2d6cc47519" translate="yes" xml:space="preserve">
          <source>Returns the value of the bit at the position &lt;code&gt;pos&lt;/code&gt;.</source>
          <target state="translated">위치 &lt;code&gt;pos&lt;/code&gt; 의 비트 값을 돌려줍니다 .</target>
        </trans-unit>
        <trans-unit id="774879d960694b9d5667848888e4fb4226c3e74a" translate="yes" xml:space="preserve">
          <source>Returns the value of the default memory resource pointer.</source>
          <target state="translated">기본 메모리 리소스 포인터의 값을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="4fcf5e7fc6b2038496c474896fb07e47feb78a84" translate="yes" xml:space="preserve">
          <source>Returns the value of the referenced bit.</source>
          <target state="translated">참조 된 비트의 값을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="04ec66d7ca0c58062b715a2242cbdceda9402ce4" translate="yes" xml:space="preserve">
          <source>Returns the weekday value stored in &lt;code&gt;*this&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;*this&lt;/code&gt; 에 저장된 요일 값을 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="26e284ea26164b9c8c430c54d4ab6e3482e57631" translate="yes" xml:space="preserve">
          <source>Returns the wrapped value. This function enables &lt;code&gt;std::integral_constant&lt;/code&gt; to serve as a source of compile-time function objects.</source>
          <target state="translated">랩 된 값을 돌려줍니다. 이 함수는 &lt;code&gt;std::integral_constant&lt;/code&gt; 가 컴파일 타임 함수 객체의 소스로 사용되도록합니다.</target>
        </trans-unit>
        <trans-unit id="ec317a0c618a00783b65ef01c344c671c0c98ccb" translate="yes" xml:space="preserve">
          <source>Returns the year value stored in &lt;code&gt;*this&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;*this&lt;/code&gt; 에 저장된 연도 값을 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="93bf104fe6b74cb3c929a5649d33c831bd74379a" translate="yes" xml:space="preserve">
          <source>Returns the zero-based index of the alternative that is currently held by the variant.</source>
          <target state="translated">변형이 현재 보유하고있는 대안의 인덱스 (0부터 시작)를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="cb6c9d35c2a93a09af93fc95a1c618a790d37b2c" translate="yes" xml:space="preserve">
          <source>Returns true if the atomic operations on all objects of this type are lock-free, false otherwise.</source>
          <target state="translated">이 유형의 모든 객체에 대한 원자 연산에 잠금이없는 경우 true를, 그렇지 않으면 false를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="e65cebe674230d59ac8923f2ba16f831847a0826" translate="yes" xml:space="preserve">
          <source>Returns unspecified value not equal to &lt;code&gt;Traits::eof()&lt;/code&gt; on success, &lt;code&gt;Traits::eof()&lt;/code&gt; on failure.</source>
          <target state="translated">성공하면 &lt;code&gt;Traits::eof()&lt;/code&gt; , 실패 하면 &lt;code&gt;Traits::eof()&lt;/code&gt; 와 같지 않은 지정되지 않은 값을 리턴 합니다.</target>
        </trans-unit>
        <trans-unit id="7b9d2d182455d63762414ba5104580e163fa4341" translate="yes" xml:space="preserve">
          <source>Returns whether &lt;code&gt;lhs&lt;/code&gt;'s base engine is equal to &lt;code&gt;rhs&lt;/code&gt;'s base engine or not.</source>
          <target state="translated">&lt;code&gt;lhs&lt;/code&gt; 의 기본 엔진이 &lt;code&gt;rhs&lt;/code&gt; 의 기본 엔진 과 같은지 여부를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="bcf6a7fa371ccfbaf9ec607c5cba9566ef77aa26" translate="yes" xml:space="preserve">
          <source>Returns whether the given container is empty.</source>
          <target state="translated">주어진 컨테이너가 비어 있는지 여부를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="2a54ab117b8775c13fec8afbd910451aa91a3103" translate="yes" xml:space="preserve">
          <source>Returns zero on success. Otherwise &lt;code&gt;&lt;a href=&quot;../c&quot;&gt;EOF&lt;/a&gt;&lt;/code&gt; is returned and the error indicator of the file stream is set.</source>
          <target state="translated">성공하면 0을 반환합니다. 그렇지 않으면 &lt;code&gt;&lt;a href=&quot;../c&quot;&gt;EOF&lt;/a&gt;&lt;/code&gt; 가 리턴되고 파일 스트림의 오류 표시기가 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="7749fcf802c472b6c2f5bd0556805e456ffd5674" translate="yes" xml:space="preserve">
          <source>Returns:</source>
          <target state="translated">Returns:</target>
        </trans-unit>
        <trans-unit id="a4e184e80388458881aad54bf402ea36f6f4ea52" translate="yes" xml:space="preserve">
          <source>Returns: &lt;code&gt;s&lt;/code&gt;</source>
          <target state="translated">리턴 : &lt;code&gt;s&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="46130b151acfa71a4f164ee3519a58c1360be134" translate="yes" xml:space="preserve">
          <source>Returns: The previous locale used by &lt;code&gt;u&lt;/code&gt; if any</source>
          <target state="translated">&lt;code&gt;u&lt;/code&gt; 가 사용하는 이전 로케일 (있는 경우)</target>
        </trans-unit>
        <trans-unit id="da6f5a6268552104c82633df2ad5b36704b7b4cf" translate="yes" xml:space="preserve">
          <source>Returns: The previous locale used by &lt;code&gt;v&lt;/code&gt; if any.</source>
          <target state="translated">&lt;code&gt;v&lt;/code&gt; 가 사용하는 이전 로케일 (있는 경우)</target>
        </trans-unit>
        <trans-unit id="d7b8f099da9a2d411e8085d03a23ba7307422285" translate="yes" xml:space="preserve">
          <source>Returns: a character such that for any character &lt;code&gt;C&lt;/code&gt; considered to be equivalent to &lt;code&gt;c&lt;/code&gt; without regard to case, then &lt;code&gt;v.translate_nocase(c) == v.translate_nocase(C)&lt;/code&gt;.</source>
          <target state="translated">결과 : 문자되도록 모든 문자에 대한 &lt;code&gt;C&lt;/code&gt; 동등한 것으로 간주 &lt;code&gt;c&lt;/code&gt; 의 경우에 상관없이, 다음 &lt;code&gt;v.translate_nocase(c) == v.translate_nocase(C)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c0cf5999dd0eabdd512520638dfbbe017e37bbaf" translate="yes" xml:space="preserve">
          <source>Returns: a character such that for any character &lt;code&gt;d&lt;/code&gt; considered to be equivalent to &lt;code&gt;c&lt;/code&gt;, then &lt;code&gt;v.translate(c) == v.translate(d)&lt;/code&gt;.</source>
          <target state="translated">결과 : 문자되도록 어떤 캐릭터 용 &lt;code&gt;d&lt;/code&gt; 동등한 것으로 간주 &lt;code&gt;c&lt;/code&gt; 다음 &lt;code&gt;v.translate(c) == v.translate(d)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3ca57ed1d8e3a67c110c19414384074a64c3bd90" translate="yes" xml:space="preserve">
          <source>Returns: a sort key for the character sequence designated by the iterator range &lt;code&gt;[F1, F2)&lt;/code&gt; such that if the character sequence &lt;code&gt;[G1, G2)&lt;/code&gt; sorts before the character sequence &lt;code&gt;[H1, H2)&lt;/code&gt; without regard to case, then &lt;code&gt;v.transform_primary(G1, G2) &amp;lt; v.transform_primary(H1, H2)&lt;/code&gt;.</source>
          <target state="translated">반환 값 : 반복자 범위 &lt;code&gt;[F1, F2)&lt;/code&gt; 의해 지정된 문자 순서에 대한 정렬 키 . 문자 순서 &lt;code&gt;[G1, G2)&lt;/code&gt; 가 대소 문자와 상관없이 문자 순서 &lt;code&gt;[H1, H2)&lt;/code&gt; 전에 정렬 되는 경우 &lt;code&gt;v.transform_primary(G1, G2) &amp;lt; v.transform_primary(H1, H2)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2f35499fb66ee9c529a0ce69d6a486cb5e887704" translate="yes" xml:space="preserve">
          <source>Returns: a sort key for the character sequence designated by the iterator range &lt;code&gt;[F1, F2)&lt;/code&gt; such that if the character sequence &lt;code&gt;[G1, G2)&lt;/code&gt; sorts before the character sequence &lt;code&gt;[H1, H2)&lt;/code&gt;, then &lt;code&gt;v.transform(G1, G2) &amp;lt; v.transform(H1, H2)&lt;/code&gt;.</source>
          <target state="translated">반환 값 : 문자 시퀀스 &lt;code&gt;[G1, G2)&lt;/code&gt; 가 문자 시퀀스 &lt;code&gt;[H1, H2)&lt;/code&gt; 전에 정렬 되면 &lt;code&gt;v.transform(G1, G2) &amp;lt; v.transform(H1, H2)&lt;/code&gt; 되도록 반복자 범위 &lt;code&gt;[F1, F2)&lt;/code&gt; 지정된 문자 시퀀스의 정렬 키 &amp;lt;v.transform (H1, H2) .</target>
        </trans-unit>
        <trans-unit id="4ceab92f8ea99e032315873d59ef7bf909c33a18" translate="yes" xml:space="preserve">
          <source>Returns: a value &lt;code&gt;e&lt;/code&gt; such that &lt;code&gt;X​::​eq_int_type(e, X​::​to_int_type(c))&lt;/code&gt; is false for all values &lt;code&gt;c&lt;/code&gt;</source>
          <target state="translated">반환 값 : 값 &lt;code&gt;e&lt;/code&gt; 그러한 &lt;code&gt;X​::​eq_int_type(e, X​::​to_int_type(c))&lt;/code&gt; 모든 값에 대한 거짓 &lt;code&gt;c&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0bfae7aec82cd7cad2c241c57261bf7c2ec85c8b" translate="yes" xml:space="preserve">
          <source>Returns: some value &lt;code&gt;e&lt;/code&gt;, constrained by the definitions of &lt;code&gt;X::to_char_type&lt;/code&gt; and &lt;code&gt;X::eq_int_type&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;X::to_char_type&lt;/code&gt; 및 &lt;code&gt;X::eq_int_type&lt;/code&gt; 의 정의에 의해 제한되는 일부 값 &lt;code&gt;e&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="586356d7a229fbe99b8c67b460fde30f75cdf11c" translate="yes" xml:space="preserve">
          <source>Returns: the smallest &lt;code&gt;i&lt;/code&gt; such that &lt;code&gt;X​::​eq(p[i], CharT())&lt;/code&gt; is true</source>
          <target state="translated">결과 :이 작은 &lt;code&gt;i&lt;/code&gt; 되도록 &lt;code&gt;X​::​eq(p[i], CharT())&lt;/code&gt; 에 해당하는</target>
        </trans-unit>
        <trans-unit id="e1b84cd0f4a2717c874dc64db89207b5b2afe067" translate="yes" xml:space="preserve">
          <source>Returns: the smallest &lt;code&gt;i&lt;/code&gt; such that &lt;code&gt;p[i] == 0&lt;/code&gt;. Complexity is linear in &lt;code&gt;i&lt;/code&gt;.</source>
          <target state="translated">결과 : 작은 &lt;code&gt;i&lt;/code&gt; 되도록 &lt;code&gt;p[i] == 0&lt;/code&gt; . 복잡성은 &lt;code&gt;i&lt;/code&gt; 에서 선형입니다 .</target>
        </trans-unit>
        <trans-unit id="4d11c8317f846bd6df80edb484618d736a4dd097" translate="yes" xml:space="preserve">
          <source>Returns: whether &lt;code&gt;c&lt;/code&gt; is a member of one of the character classes designated by &lt;code&gt;cl&lt;/code&gt; or not.</source>
          <target state="translated">반환 값 : 여부를 &lt;code&gt;c&lt;/code&gt; 지정한 문자 클래스 중 하나의 구성원 &lt;code&gt;cl&lt;/code&gt; 여부가.</target>
        </trans-unit>
        <trans-unit id="bf5f200f7863579a19ebbae6b7f03e26f06106c2" translate="yes" xml:space="preserve">
          <source>Returns: whether &lt;code&gt;c&lt;/code&gt; is to be treated as equal to &lt;code&gt;d&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;c&lt;/code&gt; 를 &lt;code&gt;d&lt;/code&gt; 와 동일하게 취급 할지 여부</target>
        </trans-unit>
        <trans-unit id="c8966b98a16d17f720a124beca943b4e6836a118" translate="yes" xml:space="preserve">
          <source>Returns: whether &lt;code&gt;c&lt;/code&gt; is to be treated as less than &lt;code&gt;d&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;c&lt;/code&gt; 를 &lt;code&gt;d&lt;/code&gt; 보다 작은 것으로 취급 할지 여부</target>
        </trans-unit>
        <trans-unit id="96f99d9b768c1e64b8479d02a0b2c54f8a71cd44" translate="yes" xml:space="preserve">
          <source>Reverse iterator to the element following the last element.</source>
          <target state="translated">반복자를 마지막 요소 다음의 요소로 되돌립니다.</target>
        </trans-unit>
        <trans-unit id="2803e975dea75f6ec40edf15f00190d864eea7f8" translate="yes" xml:space="preserve">
          <source>Reverse iterator to the first element.</source>
          <target state="translated">반복자를 첫 번째 요소로 되돌립니다.</target>
        </trans-unit>
        <trans-unit id="9abb0afb9b6ad570941253de1412d82917589c89" translate="yes" xml:space="preserve">
          <source>Reverses the order of the elements in the container. No references or iterators become invalidated.</source>
          <target state="translated">컨테이너의 요소 순서를 반대로 바꿉니다. 참조 또는 반복자가 무효화되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="f07f0239cd49dc1e6e0280d87432a68d4f852d26" translate="yes" xml:space="preserve">
          <source>ReversibleContainer</source>
          <target state="translated">ReversibleContainer</target>
        </trans-unit>
        <trans-unit id="834f71f3f271492f7a56dcc9326dd1fc88267c90" translate="yes" xml:space="preserve">
          <source>Rewording inheriting constructors</source>
          <target state="translated">상속 생성자 리워드</target>
        </trans-unit>
        <trans-unit id="4c7a9cedbc1dc3ad80c286f4b5cc8d0e22dc20cb" translate="yes" xml:space="preserve">
          <source>Riemann zeta function</source>
          <target state="translated">리만 제타 기능</target>
        </trans-unit>
        <trans-unit id="fe82ba6f5d66b495587b08ed97ce387d2c4f2f77" translate="yes" xml:space="preserve">
          <source>Right-to-left</source>
          <target state="translated">Right-to-left</target>
        </trans-unit>
        <trans-unit id="49ed666d70b8888deb29d586a94141023306b421" translate="yes" xml:space="preserve">
          <source>Rounding style cannot be determined</source>
          <target state="translated">반올림 스타일을 결정할 수 없습니다</target>
        </trans-unit>
        <trans-unit id="6abd4b64458aebfbceaa796c4c1d3b4fa05c8ddf" translate="yes" xml:space="preserve">
          <source>Rounding toward nearest representable value</source>
          <target state="translated">가장 가까운 표현 가능한 값으로 반올림</target>
        </trans-unit>
        <trans-unit id="f804baa0b9d2ab33c5089427cf82dca999fd78ca" translate="yes" xml:space="preserve">
          <source>Rounding toward negative infinity</source>
          <target state="translated">음의 무한대로 반올림</target>
        </trans-unit>
        <trans-unit id="df15d911c2038de84de4758382ce422f9f72dd3f" translate="yes" xml:space="preserve">
          <source>Rounding toward positive infinity</source>
          <target state="translated">양의 무한대로 반올림</target>
        </trans-unit>
        <trans-unit id="158e7ea05786cecfa8341bfe9b942802e206bd09" translate="yes" xml:space="preserve">
          <source>Rounding toward zero</source>
          <target state="translated">0으로 반올림</target>
        </trans-unit>
        <trans-unit id="e2573475649d335ded7b5572dcc8e8ae0d17abdc" translate="yes" xml:space="preserve">
          <source>Rule of five</source>
          <target state="translated">5의 규칙</target>
        </trans-unit>
        <trans-unit id="d44c9d4a6f4d64a33049ca829ddc0e65cc22ecc5" translate="yes" xml:space="preserve">
          <source>Rule of three</source>
          <target state="translated">3의 규칙</target>
        </trans-unit>
        <trans-unit id="5f79a5c57474a6b48e9bbb8949233ba1d5a4e0e2" translate="yes" xml:space="preserve">
          <source>Rule of three/five/zero</source>
          <target state="translated">3/5의 규칙</target>
        </trans-unit>
        <trans-unit id="ffccabef044b8080354b7b42c46234d0ba4de6f7" translate="yes" xml:space="preserve">
          <source>Rule of zero</source>
          <target state="translated">0의 규칙</target>
        </trans-unit>
        <trans-unit id="d7dd5f9933ecc8c067dbea0a7376d229940f810e" translate="yes" xml:space="preserve">
          <source>RunTime Type Identification</source>
          <target state="translated">런타임 유형 식별</target>
        </trans-unit>
        <trans-unit id="d7ce630298bb0f0d32988acc69fe3f19192fff9b" translate="yes" xml:space="preserve">
          <source>Runtime overhead</source>
          <target state="translated">런타임 오버 헤드</target>
        </trans-unit>
        <trans-unit id="0056c02caf65dc65ef6829dab9b01341fe08d2ea" translate="yes" xml:space="preserve">
          <source>Runtime type identification</source>
          <target state="translated">런타임 타입 식별</target>
        </trans-unit>
        <trans-unit id="19259b880fb6ca47a883d0f25e9e152c7ddc185c" translate="yes" xml:space="preserve">
          <source>Runtime type information utilities</source>
          <target state="translated">런타임 유형 정보 유틸리티</target>
        </trans-unit>
        <trans-unit id="48cf6fde2143f8fc379b0d92e7ad0e99193762de" translate="yes" xml:space="preserve">
          <source>Rvalue reference</source>
          <target state="translated">R 값 참조</target>
        </trans-unit>
        <trans-unit id="e5592cd0fb417300cbaac9ee976b933b1a98a51d" translate="yes" xml:space="preserve">
          <source>Rvalue references</source>
          <target state="translated">Rvalue 참조</target>
        </trans-unit>
        <trans-unit id="f8a89a8d3cb56875e30f7eddd2007fbf07addb63" translate="yes" xml:space="preserve">
          <source>Rvalue references can be used to &lt;a href=&quot;reference_initialization#Lifetime_of_a_temporary&quot;&gt;extend the lifetimes&lt;/a&gt; of temporary objects (note, lvalue references to const can extend the lifetimes of temporary objects too, but they are not modifiable through them):</source>
          <target state="translated">Rvalue 참조는 임시 객체 &lt;a href=&quot;reference_initialization#Lifetime_of_a_temporary&quot;&gt;의 수명&lt;/a&gt; 을 연장하는 데 사용될 수 있습니다 (const에 대한 lvalue 참조는 임시 객체의 수명도 연장 할 수 있지만이를 통해 수정할 수는 없습니다).</target>
        </trans-unit>
        <trans-unit id="05a2bf8d36793aa8bab6e0777cef4331bd455a0a" translate="yes" xml:space="preserve">
          <source>Rvalue-reference or pointer to the current element.</source>
          <target state="translated">현재 요소에 대한 Rvalue-reference 또는 포인터.</target>
        </trans-unit>
        <trans-unit id="02aa629c8b16cd17a44f3a0efec2feed43937642" translate="yes" xml:space="preserve">
          <source>S</source>
          <target state="translated">S</target>
        </trans-unit>
        <trans-unit id="99ccba96b6ef0e235a4c8577bd670239479a2ae5" translate="yes" xml:space="preserve">
          <source>S (b</source>
          <target state="translated">S (b</target>
        </trans-unit>
        <trans-unit id="535830dcd538178615f9fc300712a30d4e0428b0" translate="yes" xml:space="preserve">
          <source>S = -&amp;Sigma;n-1</source>
          <target state="translated">S = -&amp;Sigma;n-1</target>
        </trans-unit>
        <trans-unit id="6e6d43281a16ef5a5dead88ad98f3e36adbb9abf" translate="yes" xml:space="preserve">
          <source>S. Meyers (1996) &quot;More Effective C++&quot; Item 13</source>
          <target state="translated">S. Meyers (1996) &quot;더 효과적인 C ++&quot;항목 13</target>
        </trans-unit>
        <trans-unit id="09727c14bfcfb9af33d5654fa5b75511c035ca53" translate="yes" xml:space="preserve">
          <source>SBO</source>
          <target state="translated">SBO</target>
        </trans-unit>
        <trans-unit id="e0e1e9bb21dd6bf2ca9e0ec4ae5e68aeafe63a3a" translate="yes" xml:space="preserve">
          <source>SCHAR_MAXSHRT_MAXINT_MAXLONG_MAXLLONG_MAX</source>
          <target state="translated">SCHAR_MAXSHRT_MAXINT_MAXLONG_MAXLLONG_MAX</target>
        </trans-unit>
        <trans-unit id="0c1c4579f2c3ffdd09da47704048a8f99de86d92" translate="yes" xml:space="preserve">
          <source>SCHAR_MINSHRT_MININT_MINLONG_MINLLONG_MIN</source>
          <target state="translated">SCHAR_MINSHRT_MININT_MINLONG_MINLLONG_MIN</target>
        </trans-unit>
        <trans-unit id="150a2746d9e59e986b58baa96d09d397cddbbd1c" translate="yes" xml:space="preserve">
          <source>SCNd8SCNd16SCNd32SCNd64SCNdLEAST8SCNdLEAST16SCNdLEAST32SCNdLEAST64SCNdFAST8SCNdFAST16SCNdFAST32SCNdFAST64SCNdMAXSCNdPTR</source>
          <target state="translated">SCNd8SCNd16SCNd32SCNd64SCNdLEAST8SCNdLEAST16SCNdLEAST32SCNdLEAST64SCNdFAST8SCNdFAST16SCNdFAST32SCNdFAST64SCNdMAXSCNdPTR</target>
        </trans-unit>
        <trans-unit id="6d04b55aadc6ab9c5bbc2aa7259245c75e68b744" translate="yes" xml:space="preserve">
          <source>SCNd&lt;b&gt;x&lt;/b&gt;</source>
          <target state="translated">SCNd&lt;b&gt;x&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="3dd91f84d0faf1a7978dad2e71c905da0953b4bb" translate="yes" xml:space="preserve">
          <source>SCNdFAST&lt;b&gt;x&lt;/b&gt;</source>
          <target state="translated">SCNdFAST&lt;b&gt;x&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="31c5cc7de51ea969f267e338f9664c295f050b1c" translate="yes" xml:space="preserve">
          <source>SCNdLEAST&lt;b&gt;x&lt;/b&gt;</source>
          <target state="translated">SCNdLEAST&lt;b&gt;x&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="954af9691203e55c28f455fe350cb91ac544605d" translate="yes" xml:space="preserve">
          <source>SCNdMAX</source>
          <target state="translated">SCNdMAX</target>
        </trans-unit>
        <trans-unit id="130aefc4b4c263044102a86d820fa5fa1b1267bc" translate="yes" xml:space="preserve">
          <source>SCNdPTR</source>
          <target state="translated">SCNdPTR</target>
        </trans-unit>
        <trans-unit id="5189e3a97427b6b0bfdaa21b92591de45b1d523c" translate="yes" xml:space="preserve">
          <source>SCNi8SCNi16SCNi32SCNi64SCNiLEAST8SCNiLEAST16SCNiLEAST32SCNiLEAST64SCNiFAST8SCNiFAST16SCNiFAST32SCNiFAST64SCNiMAXSCNiPTR</source>
          <target state="translated">SCNi8SCNi16SCNi32SCNi64SCNiLEAST8SCNiLEAST16SCNiLEAST32SCNiLEAST64SCNiFAST8SCNiFAST16SCNiFAST32SCNiFAST64SCNiMAXSCNiPTR</target>
        </trans-unit>
        <trans-unit id="27443f5d3060bebbc97c2ae3ad46791875b6f35f" translate="yes" xml:space="preserve">
          <source>SCNi&lt;b&gt;x&lt;/b&gt;</source>
          <target state="translated">SCNi&lt;b&gt;x&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="3333b86b76b7339b77825f7f7d8a7feabb8e8fb0" translate="yes" xml:space="preserve">
          <source>SCNiFAST&lt;b&gt;x&lt;/b&gt;</source>
          <target state="translated">SCNiFAST&lt;b&gt;x&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="2ec5adaf2b1bc307dc3d7f5c6e0e39ce1b1461a0" translate="yes" xml:space="preserve">
          <source>SCNiLEAST&lt;b&gt;x&lt;/b&gt;</source>
          <target state="translated">SCNiLEAST&lt;b&gt;x&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="322b1af9a53c72c177fbf3ea5885fc063c2ee978" translate="yes" xml:space="preserve">
          <source>SCNiMAX</source>
          <target state="translated">SCNiMAX</target>
        </trans-unit>
        <trans-unit id="1bca168cd6b75e54e9556697d1fefb33e9be5462" translate="yes" xml:space="preserve">
          <source>SCNiPTR</source>
          <target state="translated">SCNiPTR</target>
        </trans-unit>
        <trans-unit id="b48b8e6f1d3c9fc7d857d945fdd996c4b393273f" translate="yes" xml:space="preserve">
          <source>SCNo8SCNo16SCNo32SCNo64SCNoLEAST8SCNoLEAST16SCNoLEAST32SCNoLEAST64SCNoFAST8SCNoFAST16SCNoFAST32SCNoFAST64SCNoMAXSCNoPTR</source>
          <target state="translated">SCNo8SCNo16SCNo32SCNo64SCNoLEAST8SCNoLEAST16SCNoLEAST32SCNoLEAST64SCNoFAST8SCNoFAST16SCNoFAST32SCNoFAST64SCNoMAXSCNoPTR</target>
        </trans-unit>
        <trans-unit id="7ec6b9b949b7e74e362fe8e3617e5f1254b8993a" translate="yes" xml:space="preserve">
          <source>SCNo&lt;b&gt;x&lt;/b&gt;</source>
          <target state="translated">SCNo&lt;b&gt;x&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="c2aa75357781bdcd5db86111157ab4458a8d31f7" translate="yes" xml:space="preserve">
          <source>SCNoFAST&lt;b&gt;x&lt;/b&gt;</source>
          <target state="translated">SCNoFAST&lt;b&gt;x&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="48241bcacb32921016825bbe262366c64825ba9f" translate="yes" xml:space="preserve">
          <source>SCNoLEAST&lt;b&gt;x&lt;/b&gt;</source>
          <target state="translated">SCNoLEAST&lt;b&gt;x&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="dd57c71f9af34a05df64b2cb0852af74079c8e77" translate="yes" xml:space="preserve">
          <source>SCNoMAX</source>
          <target state="translated">SCNoMAX</target>
        </trans-unit>
        <trans-unit id="6ee478f14171bc68088d3a2d62f00688c4e93a83" translate="yes" xml:space="preserve">
          <source>SCNoPTR</source>
          <target state="translated">SCNoPTR</target>
        </trans-unit>
        <trans-unit id="f2fb012963bc207bbb835a88833057af83f04485" translate="yes" xml:space="preserve">
          <source>SCNu8SCNu16SCNu32SCNu64SCNuLEAST8SCNuLEAST16SCNuLEAST32SCNuLEAST64SCNuFAST8SCNuFAST16SCNuFAST32SCNuFAST64SCNuMAXSCNuPTR</source>
          <target state="translated">SCNu8SCNu16SCNu32SCNu64SCNuLEAST8SCNuLEAST16SCNuLEAST32SCNuLEAST64SCNuFAST8SCNuFAST16SCNuFAST32SCNuFAST64SCNuMAXSCNuPTR</target>
        </trans-unit>
        <trans-unit id="82d2cfea406b75d643446d58e315fa444c32a554" translate="yes" xml:space="preserve">
          <source>SCNu&lt;b&gt;x&lt;/b&gt;</source>
          <target state="translated">SCNu&lt;b&gt;x&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="e9291e6fe3e56533e850c78bc70f169efe028e26" translate="yes" xml:space="preserve">
          <source>SCNuFAST&lt;b&gt;x&lt;/b&gt;</source>
          <target state="translated">SCNuFAST&lt;b&gt;x&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="c2482617647b1a07313a59631c1399e21f866b25" translate="yes" xml:space="preserve">
          <source>SCNuLEAST&lt;b&gt;x&lt;/b&gt;</source>
          <target state="translated">SCNuLEAST&lt;b&gt;x&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="77a1bea67b77d4f2b90e2e18413d19c05eb1afcf" translate="yes" xml:space="preserve">
          <source>SCNuMAX</source>
          <target state="translated">SCNuMAX</target>
        </trans-unit>
        <trans-unit id="66f3921dcb65715e758f659e948b555986f1dc25" translate="yes" xml:space="preserve">
          <source>SCNuPTR</source>
          <target state="translated">SCNuPTR</target>
        </trans-unit>
        <trans-unit id="f7f7de19350f1e6976985a7e13886132a89f23bb" translate="yes" xml:space="preserve">
          <source>SCNx8SCNx16SCNx32SCNx64SCNxLEAST8SCNxLEAST16SCNxLEAST32SCNxLEAST64SCNxFAST8SCNxFAST16SCNxFAST32SCNxFAST64SCNxMAXSCNxPTR</source>
          <target state="translated">SCNx8SCNx16SCNx32SCNx64SCNxLEAST8SCNxLEAST16SCNxLEAST32SCNxLEAST64SCNxFAST8SCNxFAST16SCNxFAST32SCNxFAST64SCNxMAXSCNxPTR</target>
        </trans-unit>
        <trans-unit id="ff05862f1b9f3256053ef1a0a82cfa0412a700b5" translate="yes" xml:space="preserve">
          <source>SCNx&lt;b&gt;x&lt;/b&gt;</source>
          <target state="translated">SCNx&lt;b&gt;x&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="da030e2b848d9fb4ff0dfef8744f6ff50635067a" translate="yes" xml:space="preserve">
          <source>SCNxFAST&lt;b&gt;x&lt;/b&gt;</source>
          <target state="translated">SCNxFAST&lt;b&gt;x&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="dc927540afddc8460a68daa198c325339d793206" translate="yes" xml:space="preserve">
          <source>SCNxLEAST&lt;b&gt;x&lt;/b&gt;</source>
          <target state="translated">SCNxLEAST&lt;b&gt;x&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="6d951cfaf38ab5146110920c0c300a03b43579d0" translate="yes" xml:space="preserve">
          <source>SCNxMAX</source>
          <target state="translated">SCNxMAX</target>
        </trans-unit>
        <trans-unit id="b28ed0a5c405253f7f22d9a0ed2013840fd1e090" translate="yes" xml:space="preserve">
          <source>SCNxPTR</source>
          <target state="translated">SCNxPTR</target>
        </trans-unit>
        <trans-unit id="cbc7e0a19e1921df2bb4f7d98a66cf6142b0f475" translate="yes" xml:space="preserve">
          <source>SEEK_SETSEEK_CURSEEK_END</source>
          <target state="translated">SEEK_SETSEEK_CURSEEK_END</target>
        </trans-unit>
        <trans-unit id="e470d50f0a19acfd2bf99e89c59b5d419fff7097" translate="yes" xml:space="preserve">
          <source>SFINAE</source>
          <target state="translated">SFINAE</target>
        </trans-unit>
        <trans-unit id="a4987582417fa8d350d09c41eb8cd2418585e91d" translate="yes" xml:space="preserve">
          <source>SIGABRTSIGFPESIGILLSIGINTSIGSEGVSIGTERM</source>
          <target state="translated">SIGABRTSIGFPESIGILLSIGINTSIGSEGVSIGTERM</target>
        </trans-unit>
        <trans-unit id="e85f8b5c7eac9f932a93cbf9d03712194c0da0e2" translate="yes" xml:space="preserve">
          <source>SIGTERM</source>
          <target state="translated">SIGTERM</target>
        </trans-unit>
        <trans-unit id="c14418b849b6f44f556b64e716d39aa40f64e3c9" translate="yes" xml:space="preserve">
          <source>SIGTERM, SIGSEGV, SIGINT, SIGILL, SIGABRT, SIGFPE</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
