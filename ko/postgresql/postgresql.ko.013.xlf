<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="postgresql">
    <body>
      <group id="postgresql">
        <trans-unit id="4f367bbdd5ee6e1f68b6c0cdb73aa6b90920b34b" translate="yes" xml:space="preserve">
          <source>Recreate the specified index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03e087e4deee73a53d2927c0137b964b66c223d9" translate="yes" xml:space="preserve">
          <source>Rectangular box</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="978b1b93b222e22c8f18cadc02048782f7e02890" translate="yes" xml:space="preserve">
          <source>Recursive queries are typically used to deal with hierarchical or tree-structured data. A useful example is this query to find all the direct and indirect sub-parts of a product, given only a table that shows immediate inclusions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dee4703f115772790755710d6bfeb6dc272e019e" translate="yes" xml:space="preserve">
          <source>Recursive self-references in data-modifying statements are not allowed. In some cases it is possible to work around this limitation by referring to the output of a recursive &lt;code&gt;WITH&lt;/code&gt;, for example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb286d186d58a11b4ff049aa94d4a850a545db60" translate="yes" xml:space="preserve">
          <source>Recursive wildcard member accessor that processes all levels of the JSON hierarchy of the current object and returns all the member values, regardless of their nesting level. This is a PostgreSQL extension of the SQL/JSON standard.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="598f9976006d7832dfe0186ff7402baf44e23a91" translate="yes" xml:space="preserve">
          <source>Reducing &lt;code&gt;checkpoint_timeout&lt;/code&gt; and/or &lt;code&gt;max_wal_size&lt;/code&gt; causes checkpoints to occur more often. This allows faster after-crash recovery, since less work will need to be redone. However, one must balance this against the increased cost of flushing dirty data pages more often. If &lt;a href=&quot;runtime-config-wal#GUC-FULL-PAGE-WRITES&quot;&gt;full_page_writes&lt;/a&gt; is set (as is the default), there is another factor to consider. To ensure data page consistency, the first modification of a data page after each checkpoint results in logging the entire page content. In that case, a smaller checkpoint interval increases the volume of output to the WAL log, partially negating the goal of using a smaller interval, and in any case causing more disk I/O.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="494a1fc98607c2b79eb20bb477bcd9be2cf06f26" translate="yes" xml:space="preserve">
          <source>Reducing this value relative to &lt;code&gt;seq_page_cost&lt;/code&gt; will cause the system to prefer index scans; raising it will make index scans look relatively more expensive. You can raise or lower both values together to change the importance of disk I/O costs relative to CPU costs, which are described by the following parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="251ad29b4411d43a3a9a30b406875d5a65389db8" translate="yes" xml:space="preserve">
          <source>Refer back to the queries in &lt;a href=&quot;tutorial-join&quot;&gt;Section 2.6&lt;/a&gt;. Suppose the combined listing of weather records and city location is of particular interest to your application, but you do not want to type the query each time you need it. You can create a &lt;em&gt;view&lt;/em&gt; over the query, which gives a name to the query that you can refer to like an ordinary table:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5341f0a986aadb7626dd320ff543ffcc47c2af62" translate="yes" xml:space="preserve">
          <source>Refer to &lt;a href=&quot;datatype-datetime#DATATYPE-TIMEZONES&quot;&gt;Section 8.5.3&lt;/a&gt; for more information on how to specify time zones.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02b2f7b17bdaaa710224a6f2d9a2726f153fa045" translate="yes" xml:space="preserve">
          <source>Refer to &lt;a href=&quot;ddl-partitioning#DDL-PARTITIONING-CONSTRAINT-EXCLUSION&quot;&gt;Section 5.11.5&lt;/a&gt; for more information on using constraint exclusion to implement partitioning.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7964fa10016da66ba834552c5f6f3d79c42b983" translate="yes" xml:space="preserve">
          <source>Refer to &lt;a href=&quot;functions-comparison&quot;&gt;Section 9.2&lt;/a&gt; for related information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="932cd8269f413b99acbf9dda316973dd905d3f3c" translate="yes" xml:space="preserve">
          <source>Refer to &lt;a href=&quot;https://www.postgresql.org/docs/12/textsearch.html&quot;&gt;Chapter 12&lt;/a&gt; for further information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac5208d4dfd6aaebe17f294e56aadc09a8ee2371" translate="yes" xml:space="preserve">
          <source>Refer to &lt;a href=&quot;https://www.postgresql.org/docs/12/triggers.html&quot;&gt;Chapter 38&lt;/a&gt; for more information about triggers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b126e4c9c2b3fa7a55338cb7c3fde69bffbdfc6b" translate="yes" xml:space="preserve">
          <source>Refer to &lt;a href=&quot;https://www.postgresql.org/docs/12/xfunc.html&quot;&gt;Section 37.3&lt;/a&gt; for further information on writing functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49ee5e1da059c3b24e417da3dd10d0688c87f134" translate="yes" xml:space="preserve">
          <source>Refer to &lt;a href=&quot;https://www.postgresql.org/docs/12/xindex.html&quot;&gt;Section 37.16&lt;/a&gt; for further information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6675af0c392d5af8b7c55e0161f1192b2c0614b4" translate="yes" xml:space="preserve">
          <source>Refer to &lt;a href=&quot;https://www.postgresql.org/docs/12/xoper.html&quot;&gt;Section 37.14&lt;/a&gt; for further information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81c0d22e543b8fbbfd78441a6db5d3bcb9732152" translate="yes" xml:space="preserve">
          <source>Refer to &lt;a href=&quot;sql-createforeigntable&quot;&gt;CREATE FOREIGN TABLE&lt;/a&gt; for a further description of valid parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="529ebf827d15794539adf323c0b5dd84c2ef037e" translate="yes" xml:space="preserve">
          <source>Refer to &lt;a href=&quot;sql-createtable&quot;&gt;CREATE TABLE&lt;/a&gt; for a further description of valid parameters. &lt;a href=&quot;https://www.postgresql.org/docs/12/ddl.html&quot;&gt;Chapter 5&lt;/a&gt; has further information on inheritance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d776c1e96ee0d53dc452c6e906582e94ed8c8a3" translate="yes" xml:space="preserve">
          <source>Refer to &lt;a href=&quot;sql-set&quot;&gt;SET&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="609c2795f7a690913912d5e264816e4e9164d450" translate="yes" xml:space="preserve">
          <source>Refer to &lt;a href=&quot;sql-set-transaction&quot;&gt;SET TRANSACTION&lt;/a&gt; for information on the meaning of the other parameters to this statement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d06e508a800c4c40dd3731e649c715fcaf29e325" translate="yes" xml:space="preserve">
          <source>Refer to &lt;a href=&quot;sql-set-transaction&quot;&gt;SET TRANSACTION&lt;/a&gt; for information on the meaning of the parameters to this statement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="caf3a3cb58a59c5e7d0b671f4b23ae6f1ac82bbd" translate="yes" xml:space="preserve">
          <source>Refer to &lt;a href=&quot;sql-syntax-lexical#SQL-SYNTAX-BIT-STRINGS&quot;&gt;Section 4.1.2.5&lt;/a&gt; for information about the syntax of bit string constants. Bit-logical operators and string manipulation functions are available; see &lt;a href=&quot;functions-bitstring&quot;&gt;Section 9.6&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d35d3dc5bce3759ad0df28ccf9adfdcb5eaef1cd" translate="yes" xml:space="preserve">
          <source>Refer to &lt;a href=&quot;sql-syntax-lexical#SQL-SYNTAX-STRINGS&quot;&gt;Section 4.1.2.1&lt;/a&gt; for information about the syntax of string literals, and to &lt;a href=&quot;https://www.postgresql.org/docs/12/functions.html&quot;&gt;Chapter 9&lt;/a&gt; for information about available operators and functions. The database character set determines the character set used to store textual values; for more information on character set support, refer to &lt;a href=&quot;multibyte&quot;&gt;Section 23.3&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68f526fdb1027db9af7b4687b7d1042dee620292" translate="yes" xml:space="preserve">
          <source>Reference to publication</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c91d0d87e60cb20990141bbe02d9f237a55e0121" translate="yes" xml:space="preserve">
          <source>Reference to relation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24af67776500e9991887cc83519acb42d9245d67" translate="yes" xml:space="preserve">
          <source>Reference to subscription</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d20d0fee3b91643dd8d272ac33d01ca95179d82" translate="yes" xml:space="preserve">
          <source>References</source>
          <target state="translated">References</target>
        </trans-unit>
        <trans-unit id="7755b6b0268cbada41bfc99a6d01239ad804fdd5" translate="yes" xml:space="preserve">
          <source>References a handler function that is responsible for supplying execution routines for the foreign-data wrapper. Zero if no handler is provided</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81f8ea3c3b2029895b80bf94078cee9ca10e2aad" translate="yes" xml:space="preserve">
          <source>References a validator function that is responsible for checking the validity of the options given to the foreign-data wrapper, as well as options for foreign servers and user mappings using the foreign-data wrapper. Zero if no validator is provided</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94aee6d482ecb3f09069cf7385eb4b5f9994e8b3" translate="yes" xml:space="preserve">
          <source>References to the grouping columns or expressions are replaced by null values in result rows for grouping sets in which those columns do not appear. To distinguish which grouping a particular output row resulted from, see &lt;a href=&quot;functions-aggregate#FUNCTIONS-GROUPING-TABLE&quot;&gt;Table 9.59&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66e02725ebd9aa9311d4a6b9c921ba2f715b0338" translate="yes" xml:space="preserve">
          <source>Referential integrity checks, such as unique or primary key constraints and foreign key references, always bypass row security to ensure that data integrity is maintained. Care must be taken when developing schemas and row level policies to avoid &amp;ldquo;covert channel&amp;rdquo; leaks of information through such referential integrity checks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e2b9c0f115444e379a6c97308738cfbdce59cf7" translate="yes" xml:space="preserve">
          <source>Refresh the materialized view without locking out concurrent selects on the materialized view. Without this option a refresh which affects a lot of rows will tend to use fewer resources and complete more quickly, but could block other connections which are trying to read from the materialized view. This option may be faster in cases where a small number of rows are affected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bff75355c49691c7ddaa3736614750dd687bc9f" translate="yes" xml:space="preserve">
          <source>Refuse the operation if the type being altered is the type of a typed table. This is the default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43dd73a807dfb39f857a0c4012b2a8804e8b8b55" translate="yes" xml:space="preserve">
          <source>Refuse to drop the access method if any objects depend on it. This is the default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c53c26491a1120ccd155c89dcd8b789b3da1f457" translate="yes" xml:space="preserve">
          <source>Refuse to drop the aggregate function if any objects depend on it. This is the default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7ddcc98242405d6ad6360c6007375ba7b09a193" translate="yes" xml:space="preserve">
          <source>Refuse to drop the collation if any objects depend on it. This is the default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0eff259136cd7b78338514e5569fa22606ca59c2" translate="yes" xml:space="preserve">
          <source>Refuse to drop the column or constraint if there are any dependent objects. This is the default behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6e443e66ae892ab268aea2de27d2612ffcf26e8" translate="yes" xml:space="preserve">
          <source>Refuse to drop the constraint if there are any dependent objects. This is the default behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="878d584397c7ef1b4398ad588dd45eaaa81e9f7e" translate="yes" xml:space="preserve">
          <source>Refuse to drop the domain if any objects depend on it. This is the default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="494cbc679f9ac7b42ef7100e5a73a27cd1613e1b" translate="yes" xml:space="preserve">
          <source>Refuse to drop the extension if any objects depend on it (other than its own member objects and other extensions listed in the same &lt;code&gt;DROP&lt;/code&gt; command). This is the default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1046e4eddd9a2d6c8d68bfedbc03eeced957bcb1" translate="yes" xml:space="preserve">
          <source>Refuse to drop the foreign table if any objects depend on it. This is the default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="defd51323ef723de63599b001264ee39e90d8913" translate="yes" xml:space="preserve">
          <source>Refuse to drop the foreign-data wrapper if any objects depend on it. This is the default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0150383dd8d94436742bd8fd7109148d3d619e45" translate="yes" xml:space="preserve">
          <source>Refuse to drop the function if any objects depend on it. This is the default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b7a0f391b0ee774d2c975d18104a182ee301c81" translate="yes" xml:space="preserve">
          <source>Refuse to drop the index if any objects depend on it. This is the default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f9ba1d7f006867a6e704b36618e8a1351cdf3a9" translate="yes" xml:space="preserve">
          <source>Refuse to drop the language if any objects depend on it. This is the default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d9a2ecee02d4c9fc22f2f195b05c81bbb5dffdc" translate="yes" xml:space="preserve">
          <source>Refuse to drop the materialized view if any objects depend on it. This is the default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="621dea1a7e1320a745fbf978ba4106f8310bbce1" translate="yes" xml:space="preserve">
          <source>Refuse to drop the objects owned by a role if any other database objects depend on one of the affected objects. This is the default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a789cc33300014ee350c2eb48b143dc9ddebad7" translate="yes" xml:space="preserve">
          <source>Refuse to drop the operator class if any objects depend on it. This is the default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="870b2fe64c0ea33ce1b281919cc1325534fa4bad" translate="yes" xml:space="preserve">
          <source>Refuse to drop the operator family if any objects depend on it. This is the default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c71f16d7b4f2d42d0daf40e50982f5b9c648cd4b" translate="yes" xml:space="preserve">
          <source>Refuse to drop the operator if any objects depend on it. This is the default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71b5d483fad1c4f863c70e262ab735a9835b4fc7" translate="yes" xml:space="preserve">
          <source>Refuse to drop the procedure if any objects depend on it. This is the default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fe1b207b360ccd2e50ad5d39db13b5f4dab9a8a" translate="yes" xml:space="preserve">
          <source>Refuse to drop the rule if any objects depend on it. This is the default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8c49b5275bc8ec12dcbae343b6866fe07992886" translate="yes" xml:space="preserve">
          <source>Refuse to drop the schema if it contains any objects. This is the default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36dcab33503541d5152b5e1895fe66ce96d3c09a" translate="yes" xml:space="preserve">
          <source>Refuse to drop the sequence if any objects depend on it. This is the default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c1316beeb6baf08045ac2b15886dc7a03419182" translate="yes" xml:space="preserve">
          <source>Refuse to drop the server if any objects depend on it. This is the default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="712a6b7070757e2267379b7401ecb5c67a456fd4" translate="yes" xml:space="preserve">
          <source>Refuse to drop the table if any objects depend on it. This is the default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1e9e5e684b308d1b0c8c4d05875be920d7482a1" translate="yes" xml:space="preserve">
          <source>Refuse to drop the text search configuration if any objects depend on it. This is the default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12d21ebdd940bb597e0dd37ed52c4791930900e2" translate="yes" xml:space="preserve">
          <source>Refuse to drop the text search dictionary if any objects depend on it. This is the default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe470a506597a8b33a6ab332b146913b4a76f0f1" translate="yes" xml:space="preserve">
          <source>Refuse to drop the text search parser if any objects depend on it. This is the default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d8bf83634871f4e22640603535dc9bbd13fc3ed" translate="yes" xml:space="preserve">
          <source>Refuse to drop the text search template if any objects depend on it. This is the default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9e6091f591793e8ad9c77664c041f40588c6069" translate="yes" xml:space="preserve">
          <source>Refuse to drop the transform if any objects depend on it. This is the default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12837c5fd79e7a5b19bcb5f0dfa233e329516cdc" translate="yes" xml:space="preserve">
          <source>Refuse to drop the trigger if any objects depend on it. This is the default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00c3304296f4b2519f194fc867b59cd8843fce10" translate="yes" xml:space="preserve">
          <source>Refuse to drop the type if any objects depend on it. This is the default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df94617ebcdd5028135e035215bed2adcbba22e7" translate="yes" xml:space="preserve">
          <source>Refuse to drop the view if any objects depend on it. This is the default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a53ab26c76373620c2b1c6ead162b9dfbdb34341" translate="yes" xml:space="preserve">
          <source>Refuse to truncate if any of the tables have foreign-key references from tables that are not listed in the command. This is the default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4174e7eda86d07af88d6484dd6458272b1bfb72" translate="yes" xml:space="preserve">
          <source>Registering Event Log on Windows</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34cd131c395b1f1047df22c0836fe7e66ca70df9" translate="yes" xml:space="preserve">
          <source>Registrations of buffers (step 2) and modifications of page images (step 3) can be mixed freely, i.e., both steps may be repeated in any sequence. Keep in mind that buffers should be registered in the same order in which locks are to be obtained on them during replay.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fe3be7115c5a4aaa140d5f74508a43962501a6f" translate="yes" xml:space="preserve">
          <source>Regular expressions (REs), as defined in POSIX 1003.2, come in two forms: &lt;em&gt;extended&lt;/em&gt; REs or EREs (roughly those of &lt;code&gt;egrep&lt;/code&gt;), and &lt;em&gt;basic&lt;/em&gt; REs or BREs (roughly those of &lt;code&gt;ed&lt;/code&gt;). PostgreSQL supports both forms, and also implements some extensions that are not in the POSIX standard, but have become widely used due to their availability in programming languages such as Perl and Tcl. REs using these non-POSIX extensions are called &lt;em&gt;advanced&lt;/em&gt; REs or AREs in this documentation. AREs are almost an exact superset of EREs, but BREs have several notational incompatibilities (as well as being much more limited). We first describe the ARE and ERE forms, noting features that apply only to AREs, and then describe how BREs differ.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ef6a627f81168779c110d4a2624ef60760ec025" translate="yes" xml:space="preserve">
          <source>Regular index builds permit other regular index builds on the same table to occur simultaneously, but only one concurrent index build can occur on a table at a time. In both cases, no other types of schema modification on the table are allowed meanwhile. Another difference is that a regular &lt;code&gt;REINDEX TABLE&lt;/code&gt; or &lt;code&gt;REINDEX INDEX&lt;/code&gt; command can be performed within a transaction block, but &lt;code&gt;REINDEX CONCURRENTLY&lt;/code&gt; cannot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d75179b4f5b958195a40c299fe90c950530340c8" translate="yes" xml:space="preserve">
          <source>Regular index builds permit other regular index builds on the same table to occur simultaneously, but only one concurrent index build can occur on a table at a time. In either case, schema modification of the table is not allowed while the index is being built. Another difference is that a regular &lt;code&gt;CREATE INDEX&lt;/code&gt; command can be performed within a transaction block, but &lt;code&gt;CREATE INDEX CONCURRENTLY&lt;/code&gt; cannot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ae8d3d81d2d5e40cfc055a729eccc7a81b64aa8" translate="yes" xml:space="preserve">
          <source>Regularly running commands that acquire locks conflicting with a &lt;code&gt;SHARE UPDATE EXCLUSIVE&lt;/code&gt; lock (e.g., ANALYZE) can effectively prevent autovacuums from ever completing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8813ae31d27dcc310eb1f6124468134f135d4954" translate="yes" xml:space="preserve">
          <source>Reindex &lt;code&gt;schema&lt;/code&gt; only. Multiple schemas can be reindexed by writing multiple &lt;code&gt;-S&lt;/code&gt; switches.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e1d5b57c9b34e9f9ada1758ccfa40ababc88563" translate="yes" xml:space="preserve">
          <source>Reindex &lt;code&gt;table&lt;/code&gt; only. Multiple tables can be reindexed by writing multiple &lt;code&gt;-t&lt;/code&gt; switches.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d910fecb0d2357bf86c3b0ef74602bc6afd5b0e" translate="yes" xml:space="preserve">
          <source>Reindex all databases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a3108bf4eb4882d7cc0b0d57cc25dc139c37e59" translate="yes" xml:space="preserve">
          <source>Reindex database's system catalogs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c38215271064777a005780ed0f0064fff7109bf4" translate="yes" xml:space="preserve">
          <source>Reindexing a single index or table requires being the owner of that index or table. Reindexing a schema or database requires being the owner of that schema or database. Note that is therefore sometimes possible for non-superusers to rebuild indexes of tables owned by other users. However, as a special exception, when &lt;code&gt;REINDEX DATABASE&lt;/code&gt;, &lt;code&gt;REINDEX SCHEMA&lt;/code&gt; or &lt;code&gt;REINDEX SYSTEM&lt;/code&gt; is issued by a non-superuser, indexes on shared catalogs will be skipped unless the user owns the catalog (which typically won't be the case). Of course, superusers can always reindex anything.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3732c3e767e76fa61edf003049e8c01441bc75bd" translate="yes" xml:space="preserve">
          <source>Reindexing partitioned tables or partitioned indexes is not supported. Each individual partition can be reindexed separately instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59606e6327ee4c4f80cae8423c5dd84ab8e91cff" translate="yes" xml:space="preserve">
          <source>Reject the connection unconditionally. This is useful for &amp;ldquo;filtering out&amp;rdquo; certain hosts from a group, for example a &lt;code&gt;reject&lt;/code&gt; line could block a specific host from connecting, while a later line allows the remaining hosts in a specific network to connect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c1dec438ab80dc49300e564a043eac51485c03c" translate="yes" xml:space="preserve">
          <source>Related operator classes can be grouped into &lt;em&gt;operator families&lt;/em&gt;. To add a new operator class to an existing family, specify the &lt;code&gt;FAMILY&lt;/code&gt; option in &lt;code&gt;CREATE OPERATOR CLASS&lt;/code&gt;. Without this option, the new class is placed into a family named the same as the new class (creating that family if it doesn't already exist).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f369ed623733cd6f463273c0aa73628b7ba95c1b" translate="yes" xml:space="preserve">
          <source>Relational Database Management System</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc77773ed3150c2411e560f9daf299ff511a8d6e" translate="yes" xml:space="preserve">
          <source>Release a shared session level advisory lock</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd621b22b99e9ff0f3d224c0eaf33f077ebf084b" translate="yes" xml:space="preserve">
          <source>Release all session level advisory locks held by the current session</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff6eabe4bcbd036e3fe085528fe5c290de6bb028" translate="yes" xml:space="preserve">
          <source>Release an exclusive session level advisory lock</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c61f66f1507721e3f1b8e44c214575cedfff651c" translate="yes" xml:space="preserve">
          <source>Releases all cached query plans, forcing re-planning to occur the next time the associated prepared statement is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a838b417fcda4f30e1a492d3ddbe99c9726ccc7" translate="yes" xml:space="preserve">
          <source>Releases all temporary resources associated with the current session and resets the session to its initial state. Currently, this has the same effect as executing the following sequence of statements:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6780c7503406d5c808023f1dbc6dcca47d00fc73" translate="yes" xml:space="preserve">
          <source>Reliability</source>
          <target state="translated">Reliability</target>
        </trans-unit>
        <trans-unit id="f94181d90df67988ed71b6a4ef21359762c0df31" translate="yes" xml:space="preserve">
          <source>Reliability is an important property of any serious database system, and PostgreSQL does everything possible to guarantee reliable operation. One aspect of reliable operation is that all data recorded by a committed transaction should be stored in a nonvolatile area that is safe from power loss, operating system failure, and hardware failure (except failure of the nonvolatile area itself, of course). Successfully writing the data to the computer's permanent storage (disk drive or equivalent) ordinarily meets this requirement. In fact, even if a computer is fatally damaged, if the disk drives survive they can be moved to another computer with similar hardware and all committed transactions will remain intact.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48ae4daa25d9b79feca4544e95c804ed055f470c" translate="yes" xml:space="preserve">
          <source>Reload with:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95e357c875cc07a5addf3d5db392d3a90e7e665e" translate="yes" xml:space="preserve">
          <source>Relocate the tablespace in directory &lt;code&gt;olddir&lt;/code&gt; to &lt;code&gt;newdir&lt;/code&gt; during the backup. To be effective, &lt;code&gt;olddir&lt;/code&gt; must exactly match the path specification of the tablespace as it is currently defined. (But it is not an error if there is no tablespace in &lt;code&gt;olddir&lt;/code&gt; contained in the backup.) Both &lt;code&gt;olddir&lt;/code&gt; and &lt;code&gt;newdir&lt;/code&gt; must be absolute paths. If a path happens to contain a &lt;code&gt;=&lt;/code&gt; sign, escape it with a backslash. This option can be specified multiple times for multiple tablespaces. See examples below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e78ca558b7b645306875698b9871b0c8ac592f9" translate="yes" xml:space="preserve">
          <source>Remedial possibilities exist if the number of standby-query cancellations is found to be unacceptable. The first option is to set the parameter &lt;code&gt;hot_standby_feedback&lt;/code&gt;, which prevents &lt;code&gt;VACUUM&lt;/code&gt; from removing recently-dead rows and so cleanup conflicts do not occur. If you do this, you should note that this will delay cleanup of dead rows on the primary, which may result in undesirable table bloat. However, the cleanup situation will be no worse than if the standby queries were running directly on the primary server, and you are still getting the benefit of off-loading execution onto the standby. If standby servers connect and disconnect frequently, you might want to make adjustments to handle the period when &lt;code&gt;hot_standby_feedback&lt;/code&gt; feedback is not being provided. For example, consider increasing &lt;code&gt;max_standby_archive_delay&lt;/code&gt; so that queries are not rapidly canceled by conflicts in WAL archive files during disconnected periods. You should also consider increasing &lt;code&gt;max_standby_streaming_delay&lt;/code&gt; to avoid rapid cancellations by newly-arrived streaming WAL entries after reconnection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e523c36981a750e68c1786cf70abb1c30ac3ee96" translate="yes" xml:space="preserve">
          <source>Remember that any date or time literal input needs to be enclosed in single quotes, like text strings. Refer to &lt;a href=&quot;sql-syntax-lexical#SQL-SYNTAX-CONSTANTS-GENERIC&quot;&gt;Section 4.1.2.7&lt;/a&gt; for more information. SQL requires the following syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e0b3a6925f48fde9d3773981544c11f88b9b699" translate="yes" xml:space="preserve">
          <source>Remember that if you want to be able to convert types both ways you need to declare casts both ways explicitly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9aaf166105bc52b3f7e13a48e1504eda53fe5b72" translate="yes" xml:space="preserve">
          <source>Remember that the extension itself is not considered to be within any schema: extensions have unqualified names that must be unique database-wide. But objects belonging to the extension can be within schemas.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95621284dae010dd385d5ead41a0123ebd3423b7" translate="yes" xml:space="preserve">
          <source>Remember that what you write in an SQL command will first be interpreted as a string literal, and then as a composite. This doubles the number of backslashes you need (assuming escape string syntax is used). For example, to insert a &lt;code&gt;text&lt;/code&gt; field containing a double quote and a backslash in a composite value, you'd need to write:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bb0c9f245c255eae850f56ff9563deccd9b1a9f" translate="yes" xml:space="preserve">
          <source>Remember to take the sampling rate into account when processing the log file. For example, when computing TPS values, you need to multiply the numbers accordingly (e.g. with 0.01 sample rate, you'll only get 1/100 of the actual TPS).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab6cf957dae0dc19a48a039cf0750609cf67ca48" translate="yes" xml:space="preserve">
          <source>Remembering the bank database, suppose we debit $100.00 from Alice's account, and credit Bob's account, only to find later that we should have credited Wally's account. We could do it using savepoints like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="842c822478c504e35eeff8c45bae2b8ce6031242" translate="yes" xml:space="preserve">
          <source>Remote TCP/IP connections will not be possible unless the server is started with an appropriate value for the &lt;a href=&quot;runtime-config-connection#GUC-LISTEN-ADDRESSES&quot;&gt;listen_addresses&lt;/a&gt; configuration parameter, since the default behavior is to listen for TCP/IP connections only on the local loopback address &lt;code&gt;localhost&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a879f2dbaf3964d8aba5cd82556984ba4338d912" translate="yes" xml:space="preserve">
          <source>Remote host name or IP address</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b71007d1384eab408c5512869ba7b411e571003" translate="yes" xml:space="preserve">
          <source>Remote host name or IP address, and remote port</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1194dba360cbb280f4209079650ec51d43f8d7c" translate="yes" xml:space="preserve">
          <source>Remove a file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57552c6da0adf1c54f6663ca41f7250ccec030eb" translate="yes" xml:space="preserve">
          <source>Remove a role's password:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d0fbd4b60f564325702ec011fd855fb24a1415f" translate="yes" xml:space="preserve">
          <source>Remove a user from a group:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e428af973dad7ff57398c6b5295c67e6b45c8cb" translate="yes" xml:space="preserve">
          <source>Remove all existing files and subdirectories under the cluster data directory and under the root directories of any tablespaces you are using.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b61e23de7ea2b18fa7cb28186fbc220e9900c0a6" translate="yes" xml:space="preserve">
          <source>Remove any files present in &lt;code&gt;pg_wal/&lt;/code&gt;; these came from the file system backup and are therefore probably obsolete rather than current. If you didn't archive &lt;code&gt;pg_wal/&lt;/code&gt; at all, then recreate it with proper permissions, being careful to ensure that you re-establish it as a symbolic link if you had it set up that way before.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0a9f637f70e6e6b34b98189949106a438deac6c" translate="yes" xml:space="preserve">
          <source>Remove columns</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f54dd505a2435a6862e82a8c6260592aec8db2cf" translate="yes" xml:space="preserve">
          <source>Remove constraints</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f977a675b654e90cde5fe0899c4392ae4eaeb56b" translate="yes" xml:space="preserve">
          <source>Remove it again:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a88d5788127cfbb7d39008266be2eedc60a62c8" translate="yes" xml:space="preserve">
          <source>Remove multiple operators in one command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcd8ca723dcb2b36f8831966ed638adde36dfcc4" translate="yes" xml:space="preserve">
          <source>Remove the B-tree operator class &lt;code&gt;widget_ops&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28566c3cc60824030f5ebb73b37b207275614f18" translate="yes" xml:space="preserve">
          <source>Remove the B-tree operator family &lt;code&gt;float_ops&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94c59770db5398910f1083ac29d26d81a4f7d92e" translate="yes" xml:space="preserve">
          <source>Remove the left unary bitwise complement operator &lt;code&gt;~b&lt;/code&gt; for type &lt;code&gt;bit&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f864c9512e439d9745abb1e0507baeb680b4e245" translate="yes" xml:space="preserve">
          <source>Remove the longest string consisting only of characters in &lt;em&gt;&lt;code&gt;characters&lt;/code&gt;&lt;/em&gt; (a space by default) from the start and end of &lt;em&gt;&lt;code&gt;string&lt;/code&gt;&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f70f796651f43a979a736adfe45570af5b33860a" translate="yes" xml:space="preserve">
          <source>Remove the longest string containing only bytes appearing in &lt;em&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/em&gt; from the start and end of &lt;em&gt;&lt;code&gt;string&lt;/code&gt;&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1ea63f4db46e23ebd666d0584c6061b7223bc43" translate="yes" xml:space="preserve">
          <source>Remove the longest string containing only characters from &lt;em&gt;&lt;code&gt;characters&lt;/code&gt;&lt;/em&gt; (a space by default) from the end of &lt;em&gt;&lt;code&gt;string&lt;/code&gt;&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9ff04983cdea8b96af38e8e4b6ccc20f3cf9809" translate="yes" xml:space="preserve">
          <source>Remove the longest string containing only characters from &lt;em&gt;&lt;code&gt;characters&lt;/code&gt;&lt;/em&gt; (a space by default) from the start of &lt;em&gt;&lt;code&gt;string&lt;/code&gt;&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a347ca08af9a1d623690133ccbe521d71621afa" translate="yes" xml:space="preserve">
          <source>Remove the longest string containing only characters from &lt;em&gt;&lt;code&gt;characters&lt;/code&gt;&lt;/em&gt; (a space by default) from the start, end, or both ends (&lt;code&gt;both&lt;/code&gt; is the default) of &lt;em&gt;&lt;code&gt;string&lt;/code&gt;&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="772e09cb6631f01fb89f619f8b6f941d1bda1cb6" translate="yes" xml:space="preserve">
          <source>Remove the old columns from &lt;code&gt;pg_proc.h&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fd24a9c6e5dd730697527e9868cc7553497f755" translate="yes" xml:space="preserve">
          <source>Remove the power operator &lt;code&gt;a^b&lt;/code&gt; for type &lt;code&gt;integer&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="620fad1ae165dd2bdce7daf265521745f6d3caa9" translate="yes" xml:space="preserve">
          <source>Remove the public EXECUTE permission that is normally granted on functions, for all functions subsequently created by role &lt;code&gt;admin&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29977f0371bbb0e075323c59b2545a05c552b320" translate="yes" xml:space="preserve">
          <source>Remove the public schema from &lt;code&gt;search_path&lt;/code&gt; in &lt;a href=&quot;config-setting#CONFIG-SETTING-CONFIGURATION-FILE&quot;&gt;&lt;code&gt;postgresql.conf&lt;/code&gt;&lt;/a&gt;. The ensuing user experience matches the previous pattern. In addition to that pattern's implications for functions and &lt;code&gt;CREATEROLE&lt;/code&gt;, this trusts database owners like &lt;code&gt;CREATEROLE&lt;/code&gt;. If you create functions or extensions in the public schema or assign the &lt;code&gt;CREATEROLE&lt;/code&gt; privilege, &lt;code&gt;CREATEDB&lt;/code&gt; privilege or individual database ownership to users not warranting almost-superuser access, use the first pattern instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9070961546dc3808ef6a815af2f37a85fa483815" translate="yes" xml:space="preserve">
          <source>Remove the public schema from each user's default search path using &lt;code&gt;ALTER ROLE user SET search_path = &quot;$user&quot;&lt;/code&gt;. Everyone retains the ability to create objects in the public schema, but only qualified names will choose those objects. While qualified table references are fine, calls to functions in the public schema &lt;a href=&quot;typeconv-func&quot;&gt;will be unsafe or unreliable&lt;/a&gt;. Also, a user holding the &lt;code&gt;CREATEROLE&lt;/code&gt; privilege can undo this setting and issue arbitrary queries under the identity of users relying on the setting. If you create functions or extensions in the public schema or grant &lt;code&gt;CREATEROLE&lt;/code&gt; to users not warranting this almost-superuser ability, use the first pattern instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb2878da56d196bee52e23112b4f5efbc8eb5558" translate="yes" xml:space="preserve">
          <source>Remove the right unary factorial operator &lt;code&gt;x!&lt;/code&gt; for type &lt;code&gt;bigint&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44f80c9ad85ce03c49b4438220d5965fc1a2da97" translate="yes" xml:space="preserve">
          <source>Remove the text search configuration &lt;code&gt;my_english&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d5c793ba57aab45e30717fbdc0de286d4732569" translate="yes" xml:space="preserve">
          <source>Remove the text search dictionary &lt;code&gt;english&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d8c8148a34e2ed3b9a5e2f1b8e0e66aae753bce" translate="yes" xml:space="preserve">
          <source>Remove the text search parser &lt;code&gt;my_parser&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="027cddf95c7556fe219bf2b77e4616a66db9ed80" translate="yes" xml:space="preserve">
          <source>Remove the text search template &lt;code&gt;thesaurus&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0904861ebe57004a8eb3d40b476d16313409d99" translate="yes" xml:space="preserve">
          <source>Rename a file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="983127fc3b4932782da0b343978a6d5a28fd3cb0" translate="yes" xml:space="preserve">
          <source>Rename columns</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3dfbff60f6bb713f73dd6688d55659fd85340de" translate="yes" xml:space="preserve">
          <source>Rename tables</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b379e85bf09554c4ba4e4fedb5d295b72bdfb82" translate="yes" xml:space="preserve">
          <source>Rename tablespace &lt;code&gt;index_space&lt;/code&gt; to &lt;code&gt;fast_raid&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4634ecaac0ff1ac1f0be3e805b594d7787cdbea" translate="yes" xml:space="preserve">
          <source>Renaming an index acquires a &lt;code&gt;SHARE UPDATE EXCLUSIVE&lt;/code&gt; lock.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd51402825de5813421c28b307b2961d0bd344ad" translate="yes" xml:space="preserve">
          <source>Repeat &lt;em&gt;&lt;code&gt;string&lt;/code&gt;&lt;/em&gt; the specified &lt;em&gt;&lt;code&gt;number&lt;/code&gt;&lt;/em&gt; of times</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6652d4ac01f0857bd97cf41fb36cb38527592b64" translate="yes" xml:space="preserve">
          <source>Repeatable read</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a78e4d34bd573771f51cd07e7f7e6bc4165b167d" translate="yes" xml:space="preserve">
          <source>Repeatedly execute the current query buffer (as &lt;code&gt;\g&lt;/code&gt; does) until interrupted or the query fails. Wait the specified number of seconds (default 2) between executions. Each query result is displayed with a header that includes the &lt;code&gt;\pset title&lt;/code&gt; string (if any), the time as of query start, and the delay interval.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4acbc8176a46ccfec5ce02471e187112ad89fe22" translate="yes" xml:space="preserve">
          <source>Repeats the most recent server error message at maximum verbosity, as though &lt;code&gt;VERBOSITY&lt;/code&gt; were set to &lt;code&gt;verbose&lt;/code&gt; and &lt;code&gt;SHOW_CONTEXT&lt;/code&gt; were set to &lt;code&gt;always&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="985bff2e66b26070f9eba4257882e74b1881d3fd" translate="yes" xml:space="preserve">
          <source>Replace all occurrences in &lt;em&gt;&lt;code&gt;string&lt;/code&gt;&lt;/em&gt; of substring &lt;em&gt;&lt;code&gt;from&lt;/code&gt;&lt;/em&gt; with substring &lt;em&gt;&lt;code&gt;to&lt;/code&gt;&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52538fb3b2939a956fb894433be904beaeb513f9" translate="yes" xml:space="preserve">
          <source>Replace substring</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="346914142a41e369762f438f2de4bd85c9d64449" translate="yes" xml:space="preserve">
          <source>Replace substring(s) matching a POSIX regular expression. See &lt;a href=&quot;functions-matching#FUNCTIONS-POSIX-REGEXP&quot;&gt;Section 9.7.3&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d1d2947a40abfbdc9d683203869535afbcafc82" translate="yes" xml:space="preserve">
          <source>Replace the contents of the working table with the contents of the intermediate table, then empty the intermediate table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a39800a0c59941c74fe3ff53e8f936d8cf8bafab" translate="yes" xml:space="preserve">
          <source>Replicas accept read-only queries</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="722a8bb542ea393f48ca936e084109b805daa87a" translate="yes" xml:space="preserve">
          <source>Replication</source>
          <target state="translated">Replication</target>
        </trans-unit>
        <trans-unit id="6f09fb875fe3a38f5c516ac01b6a0f360fb74e68" translate="yes" xml:space="preserve">
          <source>Replication is only possible from base tables to base tables. That is, the tables on the publication and on the subscription side must be normal tables, not views, materialized views, partition root tables, or foreign tables. In the case of partitions, you can therefore replicate a partition hierarchy one-to-one, but you cannot currently replicate to a differently partitioned setup. Attempts to replicate tables other than base tables will result in an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1f12470b4ef6c8cb7c1354648de3fd389be1165" translate="yes" xml:space="preserve">
          <source>Replication of &lt;code&gt;TRUNCATE&lt;/code&gt; commands is supported, but some care must be taken when truncating groups of tables connected by foreign keys. When replicating a truncate action, the subscriber will truncate the same group of tables that was truncated on the publisher, either explicitly specified or implicitly collected via &lt;code&gt;CASCADE&lt;/code&gt;, minus tables that are not part of the subscription. This will work correctly if all affected tables are part of the same subscription. But if some tables to be truncated on the subscriber have foreign-key links to tables that are not part of the same (or any) subscription, then the application of the truncate action on the subscriber will fail.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43a5ca330e60a751d1b568887d69d1006363638c" translate="yes" xml:space="preserve">
          <source>Replication slot name used by this WAL receiver</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d2d71c0380e4834aaf46c99ba1ffb1a8b30df8c" translate="yes" xml:space="preserve">
          <source>Replication slots provide an automated way to ensure that the master does not remove WAL segments until they have been received by all standbys, and that the master does not remove rows which could cause a &lt;a href=&quot;hot-standby#HOT-STANDBY-CONFLICT&quot;&gt;recovery conflict&lt;/a&gt; even when the standby is disconnected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c694ca7535113be29774a178a3c7065aa27cbae7" translate="yes" xml:space="preserve">
          <source>Report the average per-statement latency (execution time from the perspective of the client) of each command after the benchmark finishes. See below for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9dd22f01446ace65614fd4ab08f76707d9d9443" translate="yes" xml:space="preserve">
          <source>Report the specified scale factor in pgbench's output. With the built-in tests, this is not necessary; the correct scale factor will be detected by counting the number of rows in the &lt;code&gt;pgbench_branches&lt;/code&gt; table. However, when testing only custom benchmarks (&lt;code&gt;-f&lt;/code&gt; option), the scale factor will be reported as 1 unless this option is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d83062c6a01e8b746b30b163b41d66312c1d063" translate="yes" xml:space="preserve">
          <source>Reports an error that caused all database sessions to abort.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="634362caeb68a2478dfff4d7450be36e15342477" translate="yes" xml:space="preserve">
          <source>Reports an error that caused the current command to abort.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0c0ba295058bb797fc1c18d0e77e23b1df7c51b" translate="yes" xml:space="preserve">
          <source>Reports an error that caused the current session to abort.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="083e20585228364d83f96aba60d408f319ad22e3" translate="yes" xml:space="preserve">
          <source>Reports information of interest to administrators, e.g., checkpoint activity.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04c20be8d98825fc019eb5064b5b3f242104a49b" translate="yes" xml:space="preserve">
          <source>Reports the database encoding (character set). It is determined when the database is created. Ordinarily, clients need only be concerned with the value of &lt;a href=&quot;runtime-config-client#GUC-CLIENT-ENCODING&quot;&gt;client_encoding&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="215d9b58c6f8de6a32caee9722c29bb401984167" translate="yes" xml:space="preserve">
          <source>Reports the locale in which sorting of textual data is done. See &lt;a href=&quot;locale&quot;&gt;Section 23.1&lt;/a&gt; for more information. This value is determined when a database is created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6839a2a576833aec64f3dc89ff503898eaf1c409" translate="yes" xml:space="preserve">
          <source>Reports the locale that determines character classifications. See &lt;a href=&quot;locale&quot;&gt;Section 23.1&lt;/a&gt; for more information. This value is determined when a database is created. Ordinarily this will be the same as &lt;code&gt;lc_collate&lt;/code&gt;, but for special applications it might be set differently.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="133ec403fdec744b56409d77e26f2f62824fc43b" translate="yes" xml:space="preserve">
          <source>Reports the maximum identifier length. It is determined as one less than the value of &lt;code&gt;NAMEDATALEN&lt;/code&gt; when building the server. The default value of &lt;code&gt;NAMEDATALEN&lt;/code&gt; is 64; therefore the default &lt;code&gt;max_identifier_length&lt;/code&gt; is 63 bytes, which can be less than 63 characters when using multibyte encodings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="799a25e0c8bcd91d436e1fdd4d1b36d57467e8f5" translate="yes" xml:space="preserve">
          <source>Reports the maximum number of function arguments. It is determined by the value of &lt;code&gt;FUNC_MAX_ARGS&lt;/code&gt; when building the server. The default value is 100 arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e39bec50a64eb33dfcefff7f0512d78a414a231" translate="yes" xml:space="preserve">
          <source>Reports the maximum number of index keys. It is determined by the value of &lt;code&gt;INDEX_MAX_KEYS&lt;/code&gt; when building the server. The default value is 32 keys.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44943d2e139b56c2c67784809c638bce6d77f7a7" translate="yes" xml:space="preserve">
          <source>Reports the name of the SSL library that this PostgreSQL server was built with (even if SSL is not currently configured or in use on this instance), for example &lt;code&gt;OpenSSL&lt;/code&gt;, or an empty string if none.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15ae5e19224c54b7edd2214e6ede4a313d82ebb5" translate="yes" xml:space="preserve">
          <source>Reports the number of blocks (pages) that can be stored within a file segment. It is determined by the value of &lt;code&gt;RELSEG_SIZE&lt;/code&gt; when building the server. The maximum size of a segment file in bytes is equal to &lt;code&gt;segment_size&lt;/code&gt; multiplied by &lt;code&gt;block_size&lt;/code&gt;; by default this is 1GB.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb331d77cf4705e0f8df49014aeb0027a810f55e" translate="yes" xml:space="preserve">
          <source>Reports the size of a WAL disk block. It is determined by the value of &lt;code&gt;XLOG_BLCKSZ&lt;/code&gt; when building the server. The default value is 8192 bytes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c79f7039bd9d8d820003b68f17f8e83482934deb" translate="yes" xml:space="preserve">
          <source>Reports the size of a disk block. It is determined by the value of &lt;code&gt;BLCKSZ&lt;/code&gt; when building the server. The default value is 8192 bytes. The meaning of some configuration variables (such as &lt;a href=&quot;runtime-config-resource#GUC-SHARED-BUFFERS&quot;&gt;shared_buffers&lt;/a&gt;) is influenced by &lt;code&gt;block_size&lt;/code&gt;. See &lt;a href=&quot;runtime-config-resource&quot;&gt;Section 19.4&lt;/a&gt; for information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95d6c92a6e0872d3f5543d6e209f7d8c656bbb1b" translate="yes" xml:space="preserve">
          <source>Reports the size of write ahead log segments. The default value is 16MB. See &lt;a href=&quot;wal-configuration&quot;&gt;Section 29.4&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b05298534a10e0596a512e46fce83803ee71164c" translate="yes" xml:space="preserve">
          <source>Reports the version number of the server as an integer. It is determined by the value of &lt;code&gt;PG_VERSION_NUM&lt;/code&gt; when building the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2102c190e614e506ba029216961013061e92c185" translate="yes" xml:space="preserve">
          <source>Reports the version number of the server. It is determined by the value of &lt;code&gt;PG_VERSION&lt;/code&gt; when building the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e5caa6a9c11f9b17dfc30ca4f361130e7ffbffb" translate="yes" xml:space="preserve">
          <source>Reports whether PostgreSQL has been built with assertions enabled. That is the case if the macro &lt;code&gt;USE_ASSERT_CHECKING&lt;/code&gt; is defined when PostgreSQL is built (accomplished e.g. by the &lt;code&gt;configure&lt;/code&gt; option &lt;code&gt;--enable-cassert&lt;/code&gt;). By default PostgreSQL is built without assertions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09ff4a3a0d4960f7372602a42263bbd9655d4d97" translate="yes" xml:space="preserve">
          <source>Reports whether PostgreSQL was built with support for 64-bit-integer dates and times. As of PostgreSQL 10, this is always &lt;code&gt;on&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1d5abce92cc5273f66418437c3f192f01669f6c" translate="yes" xml:space="preserve">
          <source>Reports whether data checksums are enabled for this cluster. See &lt;a href=&quot;app-initdb#APP-INITDB-DATA-CHECKSUMS&quot;&gt;data checksums&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="360bc539904b3901915f57b0aead8cb40373f0de" translate="yes" xml:space="preserve">
          <source>Representation</source>
          <target state="translated">Representation</target>
        </trans-unit>
        <trans-unit id="03e7bce3807c3a4cf4dcc58550a69557f7afa5fc" translate="yes" xml:space="preserve">
          <source>Representing data as JSON can be considerably more flexible than the traditional relational data model, which is compelling in environments where requirements are fluid. It is quite possible for both approaches to co-exist and complement each other within the same application. However, even for applications where maximal flexibility is desired, it is still recommended that JSON documents have a somewhat fixed structure. The structure is typically unenforced (though enforcing some business rules declaratively is possible), but having a predictable structure makes it easier to write queries that usefully summarize a set of &amp;ldquo;documents&amp;rdquo; (datums) in a table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cef36dafdcabba4dbf5fee579fee0bc28a1b898" translate="yes" xml:space="preserve">
          <source>Represents</source>
          <target state="translated">Represents</target>
        </trans-unit>
        <trans-unit id="450e545f258454903db061f0d08097035b20ae56" translate="yes" xml:space="preserve">
          <source>Request For Comments</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42605f8990d221376a9352954b711b9b4a2d1393" translate="yes" xml:space="preserve">
          <source>Requested Lock Mode</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbd1082386f55fd320bdd79e87b73081fe27827a" translate="yes" xml:space="preserve">
          <source>Requesting exclusive locks on database objects while running a parallel dump could cause the dump to fail. The reason is that the pg_dump master process requests shared locks on the objects that the worker processes are going to dump later in order to make sure that nobody deletes them and makes them go away while the dump is running. If another client then requests an exclusive lock on a table, that lock will not be granted but will be queued waiting for the shared lock of the master process to be released. Consequently any other access to the table will not be granted either and will queue after the exclusive lock request. This includes the worker process trying to dump the table. Without any precautions this would be a classic deadlock situation. To detect this conflict, the pg_dump worker process requests another shared lock using the &lt;code&gt;NOWAIT&lt;/code&gt; option. If the worker process is not granted this shared lock, somebody else must have requested an exclusive lock in the meantime and there is no way to continue with the dump, so pg_dump has no choice but to abort the dump.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c98a917aac5e5d4f0dec7f637bf05dd08be540d5" translate="yes" xml:space="preserve">
          <source>Requests copying the data with rows already frozen, just as they would be after running the &lt;code&gt;VACUUM FREEZE&lt;/code&gt; command. This is intended as a performance option for initial data loading. Rows will be frozen only if the table being loaded has been created or truncated in the current subtransaction, there are no cursors open and there are no older snapshots held by this transaction. It is currently not possible to perform a &lt;code&gt;COPY FREEZE&lt;/code&gt; on a partitioned table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2aa5dcbad187bcd9ce0d0f82c94976028cac05e5" translate="yes" xml:space="preserve">
          <source>Require pg_receivewal to use an existing replication slot (see &lt;a href=&quot;warm-standby#STREAMING-REPLICATION-SLOTS&quot;&gt;Section 26.2.6&lt;/a&gt;). When this option is used, pg_receivewal will report a flush position to the server, indicating when each segment has been synchronized to disk so that the server can remove that segment if it is not otherwise needed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39c132992eaf551e608f483baf45dd594e123137" translate="yes" xml:space="preserve">
          <source>Require that each schema (&lt;code&gt;-n&lt;/code&gt;/&lt;code&gt;--schema&lt;/code&gt;) and table (&lt;code&gt;-t&lt;/code&gt;/&lt;code&gt;--table&lt;/code&gt;) qualifier match at least one schema/table in the backup file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09f649ea02d81273e1e69ee30fa4b6cb52f20736" translate="yes" xml:space="preserve">
          <source>Require that each schema (&lt;code&gt;-n&lt;/code&gt;/&lt;code&gt;--schema&lt;/code&gt;) and table (&lt;code&gt;-t&lt;/code&gt;/&lt;code&gt;--table&lt;/code&gt;) qualifier match at least one schema/table in the database to be dumped. Note that if none of the schema/table qualifiers find matches, pg_dump will generate an error even without &lt;code&gt;--strict-names&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6e361115e1183ff1cb7acf4feaf95f5086c65fc" translate="yes" xml:space="preserve">
          <source>Require the client to supply an unencrypted password for authentication. Since the password is sent in clear text over the network, this should not be used on untrusted networks. See &lt;a href=&quot;auth-password&quot;&gt;Section 20.5&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3c2477b77154167391f3c1364dc6a6eadce08d6" translate="yes" xml:space="preserve">
          <source>Required to invoke initialization mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38bd9ce2cc05e7a0fc3a449b82bd3413a381dafa" translate="yes" xml:space="preserve">
          <source>Reset all statistics counters for the current database to zero (requires superuser privileges by default, but EXECUTE for this function can be granted to others.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5cbc88dcef6f894227fd836d5359b0b8b433831" translate="yes" xml:space="preserve">
          <source>Reset some cluster-wide statistics counters to zero, depending on the argument (requires superuser privileges by default, but EXECUTE for this function can be granted to others). Calling &lt;code&gt;pg_stat_reset_shared('bgwriter')&lt;/code&gt; will zero all the counters shown in the &lt;code&gt;pg_stat_bgwriter&lt;/code&gt; view. Calling &lt;code&gt;pg_stat_reset_shared('archiver')&lt;/code&gt; will zero all the counters shown in the &lt;code&gt;pg_stat_archiver&lt;/code&gt; view.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f806044bb4f58255ea7f1237af0ed7185031a43f" translate="yes" xml:space="preserve">
          <source>Reset statistics for a single function in the current database to zero (requires superuser privileges by default, but EXECUTE for this function can be granted to others)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d348272b7007212085eae9a1a69701536144e331" translate="yes" xml:space="preserve">
          <source>Reset statistics for a single table or index in the current database to zero (requires superuser privileges by default, but EXECUTE for this function can be granted to others)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e61cc12da5ed1835d8f4611f3962fed5df0285d" translate="yes" xml:space="preserve">
          <source>Reset the sequence object's counter value. The two-parameter form sets the sequence's &lt;code&gt;last_value&lt;/code&gt; field to the specified value and sets its &lt;code&gt;is_called&lt;/code&gt; field to &lt;code&gt;true&lt;/code&gt;, meaning that the next &lt;code&gt;nextval&lt;/code&gt; will advance the sequence before returning a value. The value reported by &lt;code&gt;currval&lt;/code&gt; is also set to the specified value. In the three-parameter form, &lt;code&gt;is_called&lt;/code&gt; can be set to either &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;. &lt;code&gt;true&lt;/code&gt; has the same effect as the two-parameter form. If it is set to &lt;code&gt;false&lt;/code&gt;, the next &lt;code&gt;nextval&lt;/code&gt; will return exactly the specified value, and sequence advancement commences with the following &lt;code&gt;nextval&lt;/code&gt;. Furthermore, the value reported by &lt;code&gt;currval&lt;/code&gt; is not changed in this case. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54f8cb663de0b7cace333df931e93c52752ca59d" translate="yes" xml:space="preserve">
          <source>Resets (clears) the query buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07b8804bd424e241a6174ecc27bcfae832682878" translate="yes" xml:space="preserve">
          <source>Resets all settable run-time parameters to default values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="516aae52959dcf5398a9985414a78b8c24a4f0e5" translate="yes" xml:space="preserve">
          <source>Resolution</source>
          <target state="translated">Resolution</target>
        </trans-unit>
        <trans-unit id="0f9d42c9270c0ec8b9978c654938a3fda35cd075" translate="yes" xml:space="preserve">
          <source>Resource Consumption</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43c182983159d1d95ce6de080236b07cc610f25e" translate="yes" xml:space="preserve">
          <source>Restart a sequence called &lt;code&gt;serial&lt;/code&gt;, at 105:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be0ed1ec4356de35c270412ac99585872239a672" translate="yes" xml:space="preserve">
          <source>Restarting the Server</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7569b188ab01cd0e95751a72317a9eeb7a8756a3" translate="yes" xml:space="preserve">
          <source>Restarting the server is almost equivalent to stopping the server and starting it again, except that by default, &lt;code&gt;pg_ctl&lt;/code&gt; saves and reuses the command line options that were passed to the previously-running instance. To restart the server using the same options as before, use:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5567296a67c64996c56058acf955d5ad87aac914" translate="yes" xml:space="preserve">
          <source>Restarts recovery if it was paused (restricted to superusers by default, but other users can be granted EXECUTE to run the function).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="655ac4339a6d21ce050ff27e73304e42e3631431" translate="yes" xml:space="preserve">
          <source>Restore definition and/or data of only the named table. For this purpose, &amp;ldquo;table&amp;rdquo; includes views, materialized views, sequences, and foreign tables. Multiple tables can be selected by writing multiple &lt;code&gt;-t&lt;/code&gt; switches. This option can be combined with the &lt;code&gt;-n&lt;/code&gt; option to specify table(s) in a particular schema.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="623195e281db5418bbf569f1e1992b38d957ceeb" translate="yes" xml:space="preserve">
          <source>Restore definition of named index only. Multiple indexes may be specified with multiple &lt;code&gt;-I&lt;/code&gt; switches.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4075c46556585fbb73f83724d8a9b4ab5f0b0882" translate="yes" xml:space="preserve">
          <source>Restore named trigger only. Multiple triggers may be specified with multiple &lt;code&gt;-T&lt;/code&gt; switches.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21e27a35ceb0ae1abe3966da51bcd75af8594c6d" translate="yes" xml:space="preserve">
          <source>Restore only objects that are in the named schema. Multiple schemas may be specified with multiple &lt;code&gt;-n&lt;/code&gt; switches. This can be combined with the &lt;code&gt;-t&lt;/code&gt; option to restore just a specific table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9782cae50d1097c39f4de92fa740f242782eeef" translate="yes" xml:space="preserve">
          <source>Restore only the data, not the schema (data definitions). Table data, large objects, and sequence values are restored, if present in the archive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7c59f7eab51db1bd7970fee7102ace189aeb6d3" translate="yes" xml:space="preserve">
          <source>Restore only the schema (data definitions), not data, to the extent that schema entries are present in the archive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a84f942a3445ce47e7219837e340e3ec2ec76a5" translate="yes" xml:space="preserve">
          <source>Restore only those archive elements that are listed in &lt;code&gt;list-file&lt;/code&gt;, and restore them in the order they appear in the file. Note that if filtering switches such as &lt;code&gt;-n&lt;/code&gt; or &lt;code&gt;-t&lt;/code&gt; are used with &lt;code&gt;-L&lt;/code&gt;, they will further restrict the items restored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="380edb761adddb8b866c4c1fbcae7db94c9fcb6e" translate="yes" xml:space="preserve">
          <source>Restore the database files from your file system backup. Be sure that they are restored with the right ownership (the database system user, not &lt;code&gt;root&lt;/code&gt;!) and with the right permissions. If you are using tablespaces, you should verify that the symbolic links in &lt;code&gt;pg_tblspc/&lt;/code&gt; were correctly restored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3191bbaf27e82dc7be5f93a88e9a86a5c064f0b8" translate="yes" xml:space="preserve">
          <source>Restore the named function only. Be careful to spell the function name and arguments exactly as they appear in the dump file's table of contents. Multiple functions may be specified with multiple &lt;code&gt;-P&lt;/code&gt; switches.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41181b5cc8144a05bbcab44700c270b0c5848fdf" translate="yes" xml:space="preserve">
          <source>Restore the scan to the most recently marked position.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3da0c5779f0f7d48a16980bbbed99755ffed4f3d" translate="yes" xml:space="preserve">
          <source>Restore your previous &lt;code&gt;pg_hba.conf&lt;/code&gt; and any &lt;code&gt;postgresql.conf&lt;/code&gt; modifications.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25f7ceb141e29257b66ea98aeeba48c79636a1e0" translate="yes" xml:space="preserve">
          <source>Restricting and cascading deletes are the two most common options. &lt;code&gt;RESTRICT&lt;/code&gt; prevents deletion of a referenced row. &lt;code&gt;NO ACTION&lt;/code&gt; means that if any referencing rows still exist when the constraint is checked, an error is raised; this is the default behavior if you do not specify anything. (The essential difference between these two choices is that &lt;code&gt;NO ACTION&lt;/code&gt; allows the check to be deferred until later in the transaction, whereas &lt;code&gt;RESTRICT&lt;/code&gt; does not.) &lt;code&gt;CASCADE&lt;/code&gt; specifies that when a referenced row is deleted, row(s) referencing it should be automatically deleted as well. There are two other options: &lt;code&gt;SET NULL&lt;/code&gt; and &lt;code&gt;SET DEFAULT&lt;/code&gt;. These cause the referencing column(s) in the referencing row(s) to be set to nulls or their default values, respectively, when the referenced row is deleted. Note that these do not excuse you from observing any constraints. For example, if an action specifies &lt;code&gt;SET DEFAULT&lt;/code&gt; but the default value would not satisfy the foreign key constraint, the operation will fail.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d5c2e1889f58afab9c5af759b800e34de165147" translate="yes" xml:space="preserve">
          <source>Restriction selectivity estimation function for this operator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38ad8517f1dfe99e4d87fbdbdd90a3a14b28b872" translate="yes" xml:space="preserve">
          <source>Restrictions</source>
          <target state="translated">Restrictions</target>
        </trans-unit>
        <trans-unit id="e4030936d5011845f4167d015ff214a58e320e9d" translate="yes" xml:space="preserve">
          <source>Restrictions are that &lt;code&gt;frame_start&lt;/code&gt; cannot be &lt;code&gt;UNBOUNDED FOLLOWING&lt;/code&gt;, &lt;code&gt;frame_end&lt;/code&gt; cannot be &lt;code&gt;UNBOUNDED PRECEDING&lt;/code&gt;, and the &lt;code&gt;frame_end&lt;/code&gt; choice cannot appear earlier in the above list of &lt;code&gt;frame_start&lt;/code&gt; and &lt;code&gt;frame_end&lt;/code&gt; options than the &lt;code&gt;frame_start&lt;/code&gt; choice does &amp;mdash; for example &lt;code&gt;RANGE BETWEEN CURRENT ROW AND offset PRECEDING&lt;/code&gt; is not allowed. But, for example, &lt;code&gt;ROWS BETWEEN 7 PRECEDING AND 8 PRECEDING&lt;/code&gt; is allowed, even though it would never select any rows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5faa59d4bc3756040b8ce9e673c09f929e6ee9ba" translate="yes" xml:space="preserve">
          <source>Result</source>
          <target state="translated">Result</target>
        </trans-unit>
        <trans-unit id="bd4afc0073cac79bf136f8e1d922b83f76e969ad" translate="yes" xml:space="preserve">
          <source>Result:</source>
          <target state="translated">Result:</target>
        </trans-unit>
        <trans-unit id="88f2b3f5a0eff8fce83b5ded45c3cac6f39abfd9" translate="yes" xml:space="preserve">
          <source>Return Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a9d63eb1d17793ba8ab33ff34bf6ace7f3ed600" translate="yes" xml:space="preserve">
          <source>Return a record containing multiple output parameters:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2afbe0e3b0b76fd48a64868e31283baed1a5b6b9" translate="yes" xml:space="preserve">
          <source>Return actual version of collation from operating system</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d41c59510ee376d764f6de483cc519bc177516f0" translate="yes" xml:space="preserve">
          <source>Return captured substring(s) resulting from matching a POSIX regular expression to the &lt;em&gt;&lt;code&gt;string&lt;/code&gt;&lt;/em&gt;. See &lt;a href=&quot;functions-matching#FUNCTIONS-POSIX-REGEXP&quot;&gt;Section 9.7.3&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0842b7e99ec161977782ca8251e39a35af13f0b6" translate="yes" xml:space="preserve">
          <source>Return captured substring(s) resulting from the first match of a POSIX regular expression to the &lt;em&gt;&lt;code&gt;string&lt;/code&gt;&lt;/em&gt;. See &lt;a href=&quot;functions-matching#FUNCTIONS-POSIX-REGEXP&quot;&gt;Section 9.7.3&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ad4ba0bb690df0ea2fad8b27bd0acbb52a9118e" translate="yes" xml:space="preserve">
          <source>Return first &lt;code&gt;n&lt;/code&gt; characters in the string. When &lt;code&gt;n&lt;/code&gt; is negative, return all but last |&lt;code&gt;n&lt;/code&gt;| characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d880c554d23a84d7fb943adfbea35de8b403868e" translate="yes" xml:space="preserve">
          <source>Return information about a file. Restricted to superusers by default, but other users can be granted EXECUTE to run the function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44887d1d39bfa8f8d486246dd192b841ad31f183" translate="yes" xml:space="preserve">
          <source>Return last &lt;code&gt;n&lt;/code&gt; characters in the string. When &lt;code&gt;n&lt;/code&gt; is negative, return all but first |&lt;code&gt;n&lt;/code&gt;| characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51144c7057388a9ddd52fc2f768884b9089ef475" translate="yes" xml:space="preserve">
          <source>Return reversed string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc0eb20772a44bc552722a28742f8c7c5d090982" translate="yes" xml:space="preserve">
          <source>Return the contents of a file. Restricted to superusers by default, but other users can be granted EXECUTE to run the function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff6f193117a2e28dfd9bf976d03f27e993088606" translate="yes" xml:space="preserve">
          <source>Return the contents of a text file. Restricted to superusers by default, but other users can be granted EXECUTE to run the function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f24e6a36cf89cb9e95870a3143de3ec68700671" translate="yes" xml:space="preserve">
          <source>Return the given string suitably quoted to be used as a string literal in an SQL statement string. Embedded single-quotes and backslashes are properly doubled. Note that &lt;code&gt;quote_literal&lt;/code&gt; returns null on null input; if the argument might be null, &lt;code&gt;quote_nullable&lt;/code&gt; is often more suitable. See also &lt;a href=&quot;https://www.postgresql.org/docs/12/plpgsql-statements.html#PLPGSQL-QUOTE-LITERAL-EXAMPLE&quot;&gt;Example 42.1&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53525574dae97c82a2a3a894b1e737a2f25851b9" translate="yes" xml:space="preserve">
          <source>Return the given string suitably quoted to be used as a string literal in an SQL statement string; or, if the argument is null, return &lt;code&gt;NULL&lt;/code&gt;. Embedded single-quotes and backslashes are properly doubled. See also &lt;a href=&quot;https://www.postgresql.org/docs/12/plpgsql-statements.html#PLPGSQL-QUOTE-LITERAL-EXAMPLE&quot;&gt;Example 42.1&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d57ac7b7e9c16ea588ceab9134ea36165a2bd992" translate="yes" xml:space="preserve">
          <source>Return the given string suitably quoted to be used as an identifier in an SQL statement string. Quotes are added only if necessary (i.e., if the string contains non-identifier characters or would be case-folded). Embedded quotes are properly doubled. See also &lt;a href=&quot;https://www.postgresql.org/docs/12/plpgsql-statements.html#PLPGSQL-QUOTE-LITERAL-EXAMPLE&quot;&gt;Example 42.1&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fae87cdc51cc109aeafda44315fb90823f2fa6e" translate="yes" xml:space="preserve">
          <source>Return the replay location for the given replication origin. The parameter &lt;em&gt;&lt;code&gt;flush&lt;/code&gt;&lt;/em&gt; determines whether the corresponding local transaction will be guaranteed to have been flushed to disk or not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3299483f42517bcadeb6d426f26ff9253356c589" translate="yes" xml:space="preserve">
          <source>Return the replay location for the replication origin configured in the current session. The parameter &lt;em&gt;&lt;code&gt;flush&lt;/code&gt;&lt;/em&gt; determines whether the corresponding local transaction will be guaranteed to have been flushed to disk or not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef843faa85518666fe64ecde17adff0a4d03d5b0" translate="yes" xml:space="preserve">
          <source>Return the textual name of the given build phase number. The phase numbers are those reported during an index build via the &lt;code&gt;pgstat_progress_update_param&lt;/code&gt; interface. The phase names are then exposed in the &lt;code&gt;pg_stat_progress_create_index&lt;/code&gt; view.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eba0d2ed796a8b65e235d55b26d6558b63ea4b0e" translate="yes" xml:space="preserve">
          <source>Return the top-most parent of a partition tree to which the given relation belongs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3960f5434772d8c3f4a1c34458060eaa3b172c6" translate="yes" xml:space="preserve">
          <source>Return the value most recently obtained by &lt;code&gt;nextval&lt;/code&gt; for this sequence in the current session. (An error is reported if &lt;code&gt;nextval&lt;/code&gt; has never been called for this sequence in this session.) Because this is returning a session-local value, it gives a predictable answer whether or not other sessions have executed &lt;code&gt;nextval&lt;/code&gt; since the current session did.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a196bd2fd1eb37dd31397901c76c6bfc41811ae" translate="yes" xml:space="preserve">
          <source>Return the value most recently returned by &lt;code&gt;nextval&lt;/code&gt; in the current session. This function is identical to &lt;code&gt;currval&lt;/code&gt;, except that instead of taking the sequence name as an argument it refers to whichever sequence &lt;code&gt;nextval&lt;/code&gt; was most recently applied to in the current session. It is an error to call &lt;code&gt;lastval&lt;/code&gt; if &lt;code&gt;nextval&lt;/code&gt; has not yet been called in the current session.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41b1fb407b7fa442b77381701968fb175362cf78" translate="yes" xml:space="preserve">
          <source>Return type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a104fa6924d6cf1b5f735046301d423f6bbcc52" translate="yes" xml:space="preserve">
          <source>Return value most recently obtained with &lt;code&gt;nextval&lt;/code&gt; for any sequence</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75189bfb93d24f7f318bad8af560b8904d6e2990" translate="yes" xml:space="preserve">
          <source>Return value most recently obtained with &lt;code&gt;nextval&lt;/code&gt; for specified sequence</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b104f79c1174b5dd88b2cc520aaa0fd42a5cae0" translate="yes" xml:space="preserve">
          <source>Returning Data From Modified Rows</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c30f45bfe474f8bbdabef9be767996cc9538e7a6" translate="yes" xml:space="preserve">
          <source>Returning to our example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9582a02f141fc4b345b2936eba691cd0654efebc" translate="yes" xml:space="preserve">
          <source>Returns</source>
          <target state="translated">Returns</target>
        </trans-unit>
        <trans-unit id="f5f925aa7de398f7d5494e55a7ca7d4b56d7f414" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;from_json&lt;/code&gt; as indented JSON text.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f66332ffcc126cd7c481e7192be5159684c325b0" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;from_json&lt;/code&gt; with all object fields that have null values omitted. Other null values are untouched.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d5a41ae98f5a243e8cd966447774299a8f77a10" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;target&lt;/code&gt; with &lt;code&gt;new_value&lt;/code&gt; inserted. If &lt;code&gt;target&lt;/code&gt; section designated by &lt;code&gt;path&lt;/code&gt; is in a JSONB array, &lt;code&gt;new_value&lt;/code&gt; will be inserted before target or after if &lt;code&gt;insert_after&lt;/code&gt; is true (default is &lt;code&gt;false&lt;/code&gt;). If &lt;code&gt;target&lt;/code&gt; section designated by &lt;code&gt;path&lt;/code&gt; is in JSONB object, &lt;code&gt;new_value&lt;/code&gt; will be inserted only if &lt;code&gt;target&lt;/code&gt; does not exist. As with the path oriented operators, negative integers that appear in &lt;code&gt;path&lt;/code&gt; count from the end of JSON arrays.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba58fee75e015b43343a8b7d351b30ae053d3178" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;target&lt;/code&gt; with the section designated by &lt;code&gt;path&lt;/code&gt; replaced by &lt;code&gt;new_value&lt;/code&gt;, or with &lt;code&gt;new_value&lt;/code&gt; added if &lt;code&gt;create_missing&lt;/code&gt; is true (default is &lt;code&gt;true&lt;/code&gt;) and the item designated by &lt;code&gt;path&lt;/code&gt; does not exist. As with the path oriented operators, negative integers that appear in &lt;code&gt;path&lt;/code&gt; count from the end of JSON arrays.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae93e6635a64d536df458004d5daf3ba8aabc741" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if its arguments have a similarity that is greater than the current similarity threshold set by &lt;code&gt;pg_trgm.similarity_threshold&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="293852056bf3418b664b171c1fd96c9051d1c28c" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if its second argument has a continuous extent of an ordered trigram set that matches word boundaries, and its similarity to the trigram set of the first argument is greater than the current strict word similarity threshold set by the &lt;code&gt;pg_trgm.strict_word_similarity_threshold&lt;/code&gt; parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0f88f55e3dce9a819ae48b5b56c0c8abcc7a87d" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the similarity between the trigram set in the first argument and a continuous extent of an ordered trigram set in the second argument is greater than the current word similarity threshold set by &lt;code&gt;pg_trgm.word_similarity_threshold&lt;/code&gt; parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c12d3bbbf747cdec9370085b1f308f38081489e5" translate="yes" xml:space="preserve">
          <source>Returns &lt;em&gt;&lt;code&gt;count&lt;/code&gt;&lt;/em&gt; cryptographically strong random bytes. At most 1024 bytes can be extracted at a time. This is to avoid draining the randomness generator pool.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="835184550533b99bc7dafe08c0d025af6c40ae96" translate="yes" xml:space="preserve">
          <source>Returns JSON value pointed to by &lt;code&gt;path_elems&lt;/code&gt; (equivalent to &lt;code&gt;#&amp;gt;&lt;/code&gt; operator).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fba032e696c17ba56d0f3438443e5bc4c78dbdc1" translate="yes" xml:space="preserve">
          <source>Returns JSON value pointed to by &lt;code&gt;path_elems&lt;/code&gt; as &lt;code&gt;text&lt;/code&gt; (equivalent to &lt;code&gt;#&amp;gt;&amp;gt;&lt;/code&gt; operator).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f48450bfe5044cdcafdc1ff3faaa7a1be7332d36" translate="yes" xml:space="preserve">
          <source>Returns a box suitable for an indexed search using the cube &lt;code&gt;@&amp;gt;&lt;/code&gt; operator for points within a given great circle distance of a location. Some points in this box are further than the specified great circle distance from the location, so a second check using &lt;code&gt;earth_distance&lt;/code&gt; should be included in the query.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ad43f1eda8ab056ea70c29cb1f77c38968d5179" translate="yes" xml:space="preserve">
          <source>Returns a number that indicates how similar the two arguments are. The range of the result is zero (indicating that the two strings are completely dissimilar) to one (indicating that the two strings are identical).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0f48283f4ca73ac011523d34651f6d7fec13564" translate="yes" xml:space="preserve">
          <source>Returns a number that indicates the greatest similarity between the set of trigrams in the first string and any continuous extent of an ordered set of trigrams in the second string. For details, see the explanation below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb17021f648dcd2ab7c36183aa2a866ee7f5508f" translate="yes" xml:space="preserve">
          <source>Returns a palloc'd array of keys given a value to be queried; that is, &lt;code&gt;query&lt;/code&gt; is the value on the right-hand side of an indexable operator whose left-hand side is the indexed column. &lt;code&gt;n&lt;/code&gt; is the strategy number of the operator within the operator class (see &lt;a href=&quot;https://www.postgresql.org/docs/12/xindex.html#XINDEX-STRATEGIES&quot;&gt;Section 37.16.2&lt;/a&gt;). Often, &lt;code&gt;extractQuery&lt;/code&gt; will need to consult &lt;code&gt;n&lt;/code&gt; to determine the data type of &lt;code&gt;query&lt;/code&gt; and the method it should use to extract key values. The number of returned keys must be stored into &lt;code&gt;*nkeys&lt;/code&gt;. If any of the keys can be null, also palloc an array of &lt;code&gt;*nkeys&lt;/code&gt;&lt;code&gt;bool&lt;/code&gt; fields, store its address at &lt;code&gt;*nullFlags&lt;/code&gt;, and set these null flags as needed. &lt;code&gt;*nullFlags&lt;/code&gt; can be left &lt;code&gt;NULL&lt;/code&gt; (its initial value) if all keys are non-null. The return value can be &lt;code&gt;NULL&lt;/code&gt; if the &lt;code&gt;query&lt;/code&gt; contains no keys.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7aa4a42d2008a74656fb447440aceef698c69463" translate="yes" xml:space="preserve">
          <source>Returns a palloc'd array of keys given an item to be indexed. The number of returned keys must be stored into &lt;code&gt;*nkeys&lt;/code&gt;. If any of the keys can be null, also palloc an array of &lt;code&gt;*nkeys&lt;/code&gt;&lt;code&gt;bool&lt;/code&gt; fields, store its address at &lt;code&gt;*nullFlags&lt;/code&gt;, and set these null flags as needed. &lt;code&gt;*nullFlags&lt;/code&gt; can be left &lt;code&gt;NULL&lt;/code&gt; (its initial value) if all keys are non-null. The return value can be &lt;code&gt;NULL&lt;/code&gt; if the item contains no keys.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3463ce6e00d031335609f51b52f15924592d3c3a" translate="yes" xml:space="preserve">
          <source>Returns a query that searches for a match to the first given query followed by a match to the second given query at a distance of at &lt;code&gt;distance&lt;/code&gt; lexemes, using the &lt;code&gt;&amp;lt;N&amp;gt;&lt;/code&gt;&lt;code&gt;tsquery&lt;/code&gt; operator. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9598e183f78ab270e992d26b5cf02dd7e71f41a" translate="yes" xml:space="preserve">
          <source>Returns a query that searches for a match to the first given query immediately followed by a match to the second given query, using the &lt;code&gt;&amp;lt;-&amp;gt;&lt;/code&gt; (FOLLOWED BY) &lt;code&gt;tsquery&lt;/code&gt; operator. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bd36d08963122a7d85e2e702a408b2ac783158a" translate="yes" xml:space="preserve">
          <source>Returns a record of information about the backend with the specified PID, or one record for each active backend in the system if &lt;code&gt;NULL&lt;/code&gt; is specified. The fields returned are a subset of those in the &lt;code&gt;pg_stat_activity&lt;/code&gt; view.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8f02168cf846c33a8dd7dcdfca1542689a739b7" translate="yes" xml:space="preserve">
          <source>Returns a value indicating the &amp;ldquo;cost&amp;rdquo; of inserting the new entry into a particular branch of the tree. Items will be inserted down the path of least &lt;code&gt;penalty&lt;/code&gt; in the tree. Values returned by &lt;code&gt;penalty&lt;/code&gt; should be non-negative. If a negative value is returned, it will be treated as zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a38079832b711512e236337de21aed3e2d6d2987" translate="yes" xml:space="preserve">
          <source>Returns a vector that lists the same lexemes as the given vector, but lacks any position or weight information. The result is usually much smaller than an unstripped vector, but it is also less useful. Relevance ranking does not work as well on stripped vectors as unstripped ones. Also, the &lt;code&gt;&amp;lt;-&amp;gt;&lt;/code&gt; (FOLLOWED BY) &lt;code&gt;tsquery&lt;/code&gt; operator will never match stripped input, since it cannot determine the distance between lexeme occurrences.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36f6090c359bd9ab41ad3656b2c2008d34919deb" translate="yes" xml:space="preserve">
          <source>Returns a version 4 (random) UUID.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1acea8098e7cd5d49d5a2f08983b1c8dea6d032f" translate="yes" xml:space="preserve">
          <source>Returns all values of the input enum type in an ordered array</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fc478b8335b03662cc293cce9f3cdeecd2c897e" translate="yes" xml:space="preserve">
          <source>Returns an array of all the trigrams in the given string. (In practice this is seldom useful except for debugging.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="478f0a9dae63088d59bf6b73f1fa784f74c9ccaf" translate="yes" xml:space="preserve">
          <source>Returns changes in the slot &lt;em&gt;&lt;code&gt;slot_name&lt;/code&gt;&lt;/em&gt;, starting from the point at which since changes have been consumed last. If &lt;em&gt;&lt;code&gt;upto_lsn&lt;/code&gt;&lt;/em&gt; and &lt;em&gt;&lt;code&gt;upto_nchanges&lt;/code&gt;&lt;/em&gt; are NULL, logical decoding will continue until end of WAL. If &lt;em&gt;&lt;code&gt;upto_lsn&lt;/code&gt;&lt;/em&gt; is non-NULL, decoding will include only those transactions which commit prior to the specified LSN. If &lt;em&gt;&lt;code&gt;upto_nchanges&lt;/code&gt;&lt;/em&gt; is non-NULL, decoding will stop when the number of rows produced by decoding exceeds the specified value. Note, however, that the actual number of rows returned may be larger, since this limit is only checked after adding the rows produced when decoding each new transaction commit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a27e8a277fbb21ba600cced17405fd8d485d4498" translate="yes" xml:space="preserve">
          <source>Returns information about cluster initialization state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="763f519436bbc94f33f5cc934beac9a0056e24cd" translate="yes" xml:space="preserve">
          <source>Returns information about current checkpoint state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe00dcb79370817badaa5645198d0523960140b5" translate="yes" xml:space="preserve">
          <source>Returns information about current control file state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94374ce523a7946cfd2c763e8c1f45c8b8526166" translate="yes" xml:space="preserve">
          <source>Returns information about recovery state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e187b05e2932593c6282c4f72c780b597557fc12" translate="yes" xml:space="preserve">
          <source>Returns internal information about the indexed columns' summary data. The return value must point to a palloc'd &lt;code&gt;BrinOpcInfo&lt;/code&gt;, which has this definition:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d4a226d93129508393d26718b33747d3a312c25" translate="yes" xml:space="preserve">
          <source>Returns serial number of current client certificate. The combination of certificate serial number and certificate issuer is guaranteed to uniquely identify a certificate (but not its owner &amp;mdash; the owner ought to regularly change their keys, and get new certificates from the issuer).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8bb9df3a9fe7c7254cc51f8ca1bfa607e2b8cf2" translate="yes" xml:space="preserve">
          <source>Returns set of keys in the outermost JSON object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6149a0c35cf199410e63b02c919df4f72b2a252c" translate="yes" xml:space="preserve">
          <source>Returns set of nodes (branches) to follow during tree search.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d0597704e8ca0a8ebc65a287230875a8a4665e5" translate="yes" xml:space="preserve">
          <source>Returns static information about the index implementation, including the data type OIDs of the prefix and node label data types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fa361007b675d09ec5c4535e3385c82bd5b607c" translate="yes" xml:space="preserve">
          <source>Returns the &amp;ldquo;distance&amp;rdquo; between the arguments, that is one minus the &lt;code&gt;similarity()&lt;/code&gt; value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac7ff362080d4db6c458a6342843ca4fb83bbcc1" translate="yes" xml:space="preserve">
          <source>Returns the &amp;ldquo;distance&amp;rdquo; between the arguments, that is one minus the &lt;code&gt;strict_word_similarity()&lt;/code&gt; value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cf1cbb6e41d5400a8f5b7933861dd56b69a3bdf" translate="yes" xml:space="preserve">
          <source>Returns the &amp;ldquo;distance&amp;rdquo; between the arguments, that is one minus the &lt;code&gt;word_similarity()&lt;/code&gt; value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="281d34aa9da9a13493722f7652be5e6c72cabbc9" translate="yes" xml:space="preserve">
          <source>Returns the &lt;code&gt;n&lt;/code&gt;-th coordinate value for the lower left corner of the cube.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9dcaf0d09d07ac76586a9bbcb0fb2a275f2a7c3" translate="yes" xml:space="preserve">
          <source>Returns the &lt;code&gt;n&lt;/code&gt;-th coordinate value for the upper right corner of the cube.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="932fcaf01eb90a9b4451fe67cc8df0d84322e352" translate="yes" xml:space="preserve">
          <source>Returns the AND-combination of the two given queries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d28e0e1cb3750bbce8961cb532ce551f5bb32269" translate="yes" xml:space="preserve">
          <source>Returns the OR-combination of the two given queries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="daf4fb8ae530402bf18ba41e41556832f117ebb1" translate="yes" xml:space="preserve">
          <source>Returns the TIDs of non-all-visible tuples stored in pages marked all-visible in the visibility map. If this function returns a non-empty set of TIDs, the visibility map is corrupt.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d54c4189d60394ab28dd0d2c93b4b6da39309b2d" translate="yes" xml:space="preserve">
          <source>Returns the TIDs of non-frozen tuples stored in pages marked all-frozen in the visibility map. If this function returns a non-empty set of TIDs, the visibility map is corrupt.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e9c08991cd6d19b770d0249d21a843d3a99434a" translate="yes" xml:space="preserve">
          <source>Returns the all-visible and all-frozen bits in the visibility map for each block of the given relation, plus the &lt;code&gt;PD_ALL_VISIBLE&lt;/code&gt; bit of each block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="437e42a28dd5daaee260c590f40a9dc5d49be478" translate="yes" xml:space="preserve">
          <source>Returns the all-visible and all-frozen bits in the visibility map for each block of the given relation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89f9d0f2181564598be194a9772f01742cf256e9" translate="yes" xml:space="preserve">
          <source>Returns the all-visible and all-frozen bits in the visibility map for the given block of the given relation, plus the &lt;code&gt;PD_ALL_VISIBLE&lt;/code&gt; bit of that block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="511adc479b6586a44c22190f1555d28dee4b1f40" translate="yes" xml:space="preserve">
          <source>Returns the all-visible and all-frozen bits in the visibility map for the given block of the given relation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3487c55606d89ac8ac54bd3b8cef88dae17b0a26" translate="yes" xml:space="preserve">
          <source>Returns the amount of free space on the page of the relation, specified by &lt;code&gt;blkno&lt;/code&gt;, according to the FSM.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86e6a85c877a0b7f2dabfd0fe8f850a63385d480" translate="yes" xml:space="preserve">
          <source>Returns the array as a JSON array. A PostgreSQL multidimensional array becomes a JSON array of arrays. Line feeds will be added between dimension-1 elements if &lt;em&gt;&lt;code&gt;pretty_bool&lt;/code&gt;&lt;/em&gt; is true.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddd178aff046aabfc6149931e4deb214a8d5055d" translate="yes" xml:space="preserve">
          <source>Returns the assumed radius of the Earth.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64a8e0f91336826c249a710a1dd7109fa959567e" translate="yes" xml:space="preserve">
          <source>Returns the client domain, the current security label of the client.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65ee03cf7b6073ea9bc76c1758552b4c3914ffd8" translate="yes" xml:space="preserve">
          <source>Returns the current similarity threshold used by the &lt;code&gt;%&lt;/code&gt; operator. This sets the minimum similarity between two words for them to be considered similar enough to be misspellings of each other, for example (&lt;em&gt;deprecated&lt;/em&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31eae9e9b69d7fe499dd5538a60cbd5e0a0587de" translate="yes" xml:space="preserve">
          <source>Returns the distance between two cubes. If both cubes are points, this is the normal distance function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f86ad5eae0402acda72bd78d67143ab90e61887" translate="yes" xml:space="preserve">
          <source>Returns the first value of the input enum type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce565a5a7dc19462d2eae354fe4d4ac2c31cce50" translate="yes" xml:space="preserve">
          <source>Returns the full issuer name of the current client certificate, converting character data into the current database encoding. Encoding conversions are handled the same as for &lt;code&gt;ssl_client_dn&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5016794d2ec70f3c2d09e0e6cc9b28f25f648bea" translate="yes" xml:space="preserve">
          <source>Returns the full subject of the current client certificate, converting character data into the current database encoding. It is assumed that if you use non-ASCII characters in the certificate names, your database is able to represent these characters, too. If your database uses the SQL_ASCII encoding, non-ASCII characters in the name will be represented as UTF-8 sequences.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c669de864ddb48ed1f9d7f861a95a69d070730e" translate="yes" xml:space="preserve">
          <source>Returns the great circle distance between two points on the surface of the Earth.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95647a28d7c23079322b947e8a1a361851738716" translate="yes" xml:space="preserve">
          <source>Returns the last value of the input enum type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="543975e34373a3857609d9202d116cb196708d8d" translate="yes" xml:space="preserve">
          <source>Returns the latitude in degrees of a point on the surface of the Earth.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19dbc4feb41af25ba7e91f2b3b0d089c7381e055" translate="yes" xml:space="preserve">
          <source>Returns the location of a point on the surface of the Earth given its latitude (argument 1) and longitude (argument 2) in degrees.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff3907e7aa605252b170d681fac75a870920a63b" translate="yes" xml:space="preserve">
          <source>Returns the longitude in degrees of a point on the surface of the Earth.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66c5e29144b8e24d53aa661b779bc97243e82e8d" translate="yes" xml:space="preserve">
          <source>Returns the name of the cipher used for the SSL connection (e.g. DHE-RSA-AES256-SHA).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82bd205eb968248e9c07aea802c527c24bad365b" translate="yes" xml:space="preserve">
          <source>Returns the name of the protocol used for the SSL connection (e.g. TLSv1.0 TLSv1.1, or TLSv1.2).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42882e5a776856ef2eaac0885239976fbf50716c" translate="yes" xml:space="preserve">
          <source>Returns the negation (NOT) of the given query.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57ef53b6d165d885995f3b10028d69c83d0db19d" translate="yes" xml:space="preserve">
          <source>Returns the number of all-visible pages and the number of all-frozen pages in the relation according to the visibility map.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8fb41aa8699f545d0cac9c04bfc05840ff9f808" translate="yes" xml:space="preserve">
          <source>Returns the number of dimensions of the cube.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75df8d1c595738e8673e9cf269dfbc2e5a1268cf" translate="yes" xml:space="preserve">
          <source>Returns the number of elements in the outermost JSON array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="417683899ad74902fb8d34af73e8fc9b79a96279" translate="yes" xml:space="preserve">
          <source>Returns the number of lexemes stored in the vector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a212de166f4305c7d7e8b9d327a9bd5292e26bdd" translate="yes" xml:space="preserve">
          <source>Returns the number of nodes (lexemes plus operators) in a &lt;code&gt;tsquery&lt;/code&gt;. This function is useful to determine if the &lt;code&gt;query&lt;/code&gt; is meaningful (returns &amp;gt; 0), or contains only stop words (returns 0). Examples:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef01dcc094cc93fbd12697ddf163c5470c5a3e83" translate="yes" xml:space="preserve">
          <source>Returns the portion of a &lt;code&gt;tsquery&lt;/code&gt; that can be used for searching an index. This function is useful for detecting unindexable queries, for example those containing only stop words or only negated terms. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d95824a3f1a82f80778aa32733385fc40948a39" translate="yes" xml:space="preserve">
          <source>Returns the range between the two given enum values, as an ordered array. The values must be from the same enum type. If the first parameter is null, the result will start with the first value of the enum type. If the second parameter is null, the result will end with the last value of the enum type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6660f79eeec147f4684b1b528f25e278c71fe84" translate="yes" xml:space="preserve">
          <source>Returns the result of JSON path predicate check for the specified JSON value. Only the first item of the result is taken into account. If the result is not Boolean, then &lt;code&gt;null&lt;/code&gt; is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f57c834bfba36bb8ba15bf423833edfeeab40984" translate="yes" xml:space="preserve">
          <source>Returns the row as a JSON object. Line feeds will be added between level-1 elements if &lt;em&gt;&lt;code&gt;pretty_bool&lt;/code&gt;&lt;/em&gt; is true.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="267da4976346f49097371b8fcc3114a7bceac6e9" translate="yes" xml:space="preserve">
          <source>Returns the timestamp of the current statistics snapshot</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4763586ac2cee79326f4d7cf5064c57368486f65" translate="yes" xml:space="preserve">
          <source>Returns the type of the outermost JSON value as a text string. Possible types are &lt;code&gt;object&lt;/code&gt;, &lt;code&gt;array&lt;/code&gt;, &lt;code&gt;string&lt;/code&gt;, &lt;code&gt;number&lt;/code&gt;, &lt;code&gt;boolean&lt;/code&gt;, and &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11bd45e92996808c1fe1b83fd3205581620fd400" translate="yes" xml:space="preserve">
          <source>Returns the value as &lt;code&gt;json&lt;/code&gt; or &lt;code&gt;jsonb&lt;/code&gt;. Arrays and composites are converted (recursively) to arrays and objects; otherwise, if there is a cast from the type to &lt;code&gt;json&lt;/code&gt;, the cast function will be used to perform the conversion; otherwise, a scalar value is produced. For any scalar type other than a number, a Boolean, or a null value, the text representation will be used, in such a fashion that it is a valid &lt;code&gt;json&lt;/code&gt; or &lt;code&gt;jsonb&lt;/code&gt; value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="217bfb657ace163b79b3fb7198a40e6eb7a74f59" translate="yes" xml:space="preserve">
          <source>Returns true if &lt;em&gt;&lt;code&gt;string&lt;/code&gt;&lt;/em&gt; starts with &lt;em&gt;&lt;code&gt;prefix&lt;/code&gt;&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce75e337af091484d9c810cd4e05e56fcb324043" translate="yes" xml:space="preserve">
          <source>Returns true if a leaf tuple satisfies a query.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4251595d61752b7c49d562b79f49882d84bf3788" translate="yes" xml:space="preserve">
          <source>Returns true if an indexed item satisfies the query operator with strategy number &lt;code&gt;n&lt;/code&gt; (or might satisfy it, if the recheck indication is returned). This function does not have direct access to the indexed item's value, since GIN does not store items explicitly. Rather, what is available is knowledge about which key values extracted from the query appear in a given indexed item. The &lt;code&gt;check&lt;/code&gt; array has length &lt;code&gt;nkeys&lt;/code&gt;, which is the same as the number of keys previously returned by &lt;code&gt;extractQuery&lt;/code&gt; for this &lt;code&gt;query&lt;/code&gt; datum. Each element of the &lt;code&gt;check&lt;/code&gt; array is true if the indexed item contains the corresponding query key, i.e., if (check[i] == true) the i-th key of the &lt;code&gt;extractQuery&lt;/code&gt; result array is present in the indexed item. The original &lt;code&gt;query&lt;/code&gt; datum is passed in case the &lt;code&gt;consistent&lt;/code&gt; method needs to consult it, and so are the &lt;code&gt;queryKeys[]&lt;/code&gt; and &lt;code&gt;nullFlags[]&lt;/code&gt; arrays previously returned by &lt;code&gt;extractQuery&lt;/code&gt;. &lt;code&gt;extra_data&lt;/code&gt; is the extra-data array returned by &lt;code&gt;extractQuery&lt;/code&gt;, or &lt;code&gt;NULL&lt;/code&gt; if none.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cbe1dec3539cdca4938e0349b6f66f881ddbc4e" translate="yes" xml:space="preserve">
          <source>Returns true if current client has presented a valid SSL client certificate to the server, and false otherwise. (The server might or might not be configured to require a client certificate.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7500349575d0e3f503a55711c0e5c31d767de6ec" translate="yes" xml:space="preserve">
          <source>Returns true if current connection to server uses SSL, and false otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bc21ccfc844291339f09373a7c81202eef66f69" translate="yes" xml:space="preserve">
          <source>Returns true if the cube is a point, that is, the two defining corners are the same.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be4aa2ed56eaef039697a872f548c395d7c2cc2a" translate="yes" xml:space="preserve">
          <source>Returns true if two index entries are identical, false otherwise. (An &amp;ldquo;index entry&amp;rdquo; is a value of the index's storage type, not necessarily the original indexed column's type.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d92b40b8a8cb821d7fa3d23e392e9b9ca5992b32" translate="yes" xml:space="preserve">
          <source>Returns whether the ScanKey is consistent with the given indexed values for a range. The attribute number to use is passed as part of the scan key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3fe0cd14154a3767505b0d3be7715d57f2e5254" translate="yes" xml:space="preserve">
          <source>Revoke all privileges from user &lt;code&gt;manuel&lt;/code&gt; on view &lt;code&gt;kinds&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35e6e9cec307502c52713b2eecb56bef27c61f41" translate="yes" xml:space="preserve">
          <source>Revoke insert privilege for the public on table &lt;code&gt;films&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a5f4d52d4dd8cc3afa62b0a3067968b8fdaad6e" translate="yes" xml:space="preserve">
          <source>Revoke membership in role &lt;code&gt;admins&lt;/code&gt; from user &lt;code&gt;joe&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6248970f19f2f6c9f9a1fc432a48fcc10df598e3" translate="yes" xml:space="preserve">
          <source>Rewriting can be slow when there are many rewriting rules, since it checks every rule for a possible match. To filter out obvious non-candidate rules we can use the containment operators for the &lt;code&gt;tsquery&lt;/code&gt; type. In the example below, we select only those rules which might match the original query:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b5c3d2df469cdad1d1980603060435a26bf3190" translate="yes" xml:space="preserve">
          <source>Right Operand Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbb823098e08f37230332f6252057ac4669316b7" translate="yes" xml:space="preserve">
          <source>Right-hand input data type of associated operator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f59d88d1847754a88addf790048ccac612afccf3" translate="yes" xml:space="preserve">
          <source>Right-hand input data type of operator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c019f3e6ea125cc861fc5ef94a849aacd396c74d" translate="yes" xml:space="preserve">
          <source>Rijndael cipher</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55860be98c63406b5191317990ab4ff698425494" translate="yes" xml:space="preserve">
          <source>Robert Haas &lt;code&gt;&amp;lt;&lt;a href=&quot;mailto:rhaas@postgresql.org&quot;&gt;rhaas@postgresql.org&lt;/a&gt;&amp;gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3f104d1365744b538bfde9f4adb6a6df4b80355" translate="yes" xml:space="preserve">
          <source>Role</source>
          <target state="translated">Role</target>
        </trans-unit>
        <trans-unit id="eb6e98d5428e19f460eca55972b5be21db84a627" translate="yes" xml:space="preserve">
          <source>Role Attributes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55d928292e0ac1823705341e38908e9270209175" translate="yes" xml:space="preserve">
          <source>Role Membership</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="997aba76f087a6bc1ce552e91893ce39e11e4d3a" translate="yes" xml:space="preserve">
          <source>Role automatically inherits privileges of roles it is a member of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff36769e4a00d50f0802e283044405aa6c9a0c69" translate="yes" xml:space="preserve">
          <source>Role bypasses every row level security policy, see &lt;a href=&quot;ddl-rowsecurity&quot;&gt;Section 5.8&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afc7a51f03b0a0fc9190f9d14ce83ffe49cd85ea" translate="yes" xml:space="preserve">
          <source>Role can create databases</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0196ff58ec5fe921f810cd3c3cb4c4b55c84e6e0" translate="yes" xml:space="preserve">
          <source>Role can create more roles</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93dbe5db61333f7ddf3bd92c4ed7fe8b19455560" translate="yes" xml:space="preserve">
          <source>Role can log in. That is, this role can be given as the initial session authorization identifier</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e11ef76ad0b2bec45a6b65ff3706a08d5e931d24" translate="yes" xml:space="preserve">
          <source>Role has superuser privileges</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d87b5b57ae4546f3b619c8a4534f225b1b24c815" translate="yes" xml:space="preserve">
          <source>Role is a replication role. A replication role can initiate replication connections and create and drop replication slots.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4204d818543e404ab9954ff39126b09abf1c29d0" translate="yes" xml:space="preserve">
          <source>Role name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf9a1d977579931f3d09d8923cfd993412eb28f6" translate="yes" xml:space="preserve">
          <source>Role-specific defaults for run-time configuration variables</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2881883464f348ff298e08348bc67564e1c59e1c" translate="yes" xml:space="preserve">
          <source>Role-specific variable settings take effect only at login; &lt;a href=&quot;sql-set-role&quot;&gt;SET ROLE&lt;/a&gt; and &lt;a href=&quot;sql-set-session-authorization&quot;&gt;SET SESSION AUTHORIZATION&lt;/a&gt; do not process role-specific variable settings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5485ed95782ed384efb35eb2b43dbe52dfe42fdb" translate="yes" xml:space="preserve">
          <source>Roll back all commands that were executed after the savepoint was established. The savepoint remains valid and can be rolled back to again later, if needed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a49833a3786b82b90ad4a045732bd530907fbaf6" translate="yes" xml:space="preserve">
          <source>Roll back the transaction identified by the transaction identifier &lt;code&gt;foobar&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="576aa9e54d679a1374299fe11109f95cb12af924" translate="yes" xml:space="preserve">
          <source>Roman numeral (input between 1 and 3999)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfd5233f6c25112a7ae3ff91e4acc195f899f25f" translate="yes" xml:space="preserve">
          <source>Romanian</source>
          <target state="translated">Romanian</target>
        </trans-unit>
        <trans-unit id="c7203941830e6b8852fc805973ff9909ff84f94b" translate="yes" xml:space="preserve">
          <source>Root DN to begin the search for the user in, when doing search+bind authentication.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7472b9a144ec4caefdca4a82b485ab6edf88295b" translate="yes" xml:space="preserve">
          <source>Root collation with Emoji collation type, per Unicode Technical Standard #51</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba7af3578b294f6862af1a9c16afae26053c954a" translate="yes" xml:space="preserve">
          <source>Rotate server's log file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="750b890208d6dc8fee2d5800870cd4ee2d53a68e" translate="yes" xml:space="preserve">
          <source>Routine Reindexing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9120cda3b64845a5c22f996c01888cde5b6ea9c" translate="yes" xml:space="preserve">
          <source>Routine Vacuuming</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4bd12801e828062a23cc51816c4185edb49bf68" translate="yes" xml:space="preserve">
          <source>Row Estimation Examples</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49328d595db05d2620671f005a532c2227f7046e" translate="yes" xml:space="preserve">
          <source>Row Security Policies</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23974c6f452933ec24b6bd0f8756f5d7111e421e" translate="yes" xml:space="preserve">
          <source>Row constructors can be used to build composite values to be stored in a composite-type table column, or to be passed to a function that accepts a composite parameter. Also, it is possible to compare two row values or test a row with &lt;code&gt;IS NULL&lt;/code&gt; or &lt;code&gt;IS NOT NULL&lt;/code&gt;, for example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acbe7c0c38cb066c2d954166e75c80a880a78b0d" translate="yes" xml:space="preserve">
          <source>Row identifier</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c69805140819ad779b3d0d804d054b0754bc3db" translate="yes" xml:space="preserve">
          <source>Row security can also be disabled with the &lt;code&gt;ALTER TABLE&lt;/code&gt; command. Disabling row security does not remove any policies that are defined on the table; they are simply ignored. Then all rows in the table are visible and modifiable, subject to the standard SQL privileges system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06562b0a99b89532266a3e2527391759220a1e5a" translate="yes" xml:space="preserve">
          <source>Row security policies can be specific to commands, or to roles, or to both. A policy can be specified to apply to &lt;code&gt;ALL&lt;/code&gt; commands, or to &lt;code&gt;SELECT&lt;/code&gt;, &lt;code&gt;INSERT&lt;/code&gt;, &lt;code&gt;UPDATE&lt;/code&gt;, or &lt;code&gt;DELETE&lt;/code&gt;. Multiple roles can be assigned to a given policy, and normal role membership and inheritance rules apply.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7968ef205b4aa4053b5c6c63ab1f777985b7e0cc" translate="yes" xml:space="preserve">
          <source>Row updates or deletions caused by foreign-key enforcement actions, such as &lt;code&gt;ON UPDATE CASCADE&lt;/code&gt; or &lt;code&gt;ON DELETE SET NULL&lt;/code&gt;, are treated as part of the SQL command that caused them (note that such actions are never deferred). Relevant triggers on the affected table will be fired, so that this provides another way in which a SQL command might fire triggers not directly matching its type. In simple cases, triggers that request transition relations will see all changes caused in their table by a single original SQL command as a single transition relation. However, there are cases in which the presence of an &lt;code&gt;AFTER ROW&lt;/code&gt; trigger that requests transition relations will cause the foreign-key enforcement actions triggered by a single SQL command to be split into multiple steps, each with its own transition relation(s). In such cases, any statement-level triggers that are present will be fired once per creation of a transition relation set, ensuring that the triggers see each affected row in a transition relation once and only once.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1880c1b27e2fa6de43e06cd840214e1ebc6c7165" translate="yes" xml:space="preserve">
          <source>Row-level</source>
          <target state="translated">Row-level</target>
        </trans-unit>
        <trans-unit id="8fcfe76cf6751dd36ffcc6847e514026a8acb027" translate="yes" xml:space="preserve">
          <source>Row-level access control</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e3edf6d9ff58a7bd4365693f10058f6c59ed823" translate="yes" xml:space="preserve">
          <source>Rows can be removed from a table using the &lt;code&gt;DELETE&lt;/code&gt; command. Suppose you are no longer interested in the weather of Hayward. Then you can do the following to delete those rows from the table:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0c31ba0e68802a3618d9d3326e6468b0dea8a34" translate="yes" xml:space="preserve">
          <source>Rows inserted into a partitioned table will be automatically routed to the correct partition. If no suitable partition exists, an error will occur.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8631a3ec99afcfc0c6150a87cf0d4e747e6f9a0" translate="yes" xml:space="preserve">
          <source>Rule definition (a reconstructed creation command)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e84d721dc29380b88a37b0dd5ec0f925b4ac77f" translate="yes" xml:space="preserve">
          <source>Rule name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19eb490bb6a3e7286eda32afd971e0be7d21a797" translate="yes" xml:space="preserve">
          <source>Rules on &lt;code&gt;SELECT&lt;/code&gt; statements that generate DML commands.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="933a7264641d7d78f686c2a0c1ea09ab0a899add" translate="yes" xml:space="preserve">
          <source>Run &lt;code&gt;ANALYZE&lt;/code&gt; afterwards.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="823b9330e269f7883e25c291c90ba88e19524085" translate="yes" xml:space="preserve">
          <source>Run built-in select-only script. Shorthand for &lt;code&gt;-b select-only&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24b0a9385b875d9b1346cafa6c8c8e3349b0f8ea" translate="yes" xml:space="preserve">
          <source>Run built-in simple-update script. Shorthand for &lt;code&gt;-b simple-update&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ada1a290e3435924302286454b87e5d8cdf99e0" translate="yes" xml:space="preserve">
          <source>Run in single-step mode. That means the user is prompted before each command is sent to the server, with the option to cancel execution as well. Use this to debug scripts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1be7e98070f25a7f7e53bb83439c1727051f37dc" translate="yes" xml:space="preserve">
          <source>Run the dump in parallel by dumping &lt;code&gt;njobs&lt;/code&gt; tables simultaneously. This option reduces the time of the dump but it also increases the load on the database server. You can only use this option with the directory output format because this is the only output format where multiple processes can write their data at the same time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a5a19a4add5fbe88d90e258d947d8d0ffdfd872" translate="yes" xml:space="preserve">
          <source>Run the most time-consuming parts of pg_restore &amp;mdash; those which load data, create indexes, or create constraints &amp;mdash; using multiple concurrent jobs. This option can dramatically reduce the time to restore a large database to a server running on a multiprocessor machine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="306b49d675b536987906a8c1eaf0e9ffaf685957" translate="yes" xml:space="preserve">
          <source>Run the new script:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b0806df128628173754d037af7b3f1c40843aa3" translate="yes" xml:space="preserve">
          <source>Run the test for this many seconds, rather than a fixed number of transactions per client. &lt;code&gt;-t&lt;/code&gt; and &lt;code&gt;-T&lt;/code&gt; are mutually exclusive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef7242e1da9218c25ab49e603c7554daf3d3a11e" translate="yes" xml:space="preserve">
          <source>Run through all candidates and keep those that accept preferred types (of the input data type's type category) at the most positions where type conversion will be required. Keep all candidates if none accept preferred types. If only one candidate remains, use it; else continue to the next step.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d9f7b1b3e8ce9c7f41afc9156c0b0f0894d3208" translate="yes" xml:space="preserve">
          <source>Run through all candidates and keep those with the most exact matches on input types. Keep all candidates if none have exact matches. If only one candidate remains, use it; else continue to the next step.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0009744aa716ceb939fafa8ed848fd29e766f0a9" translate="yes" xml:space="preserve">
          <source>Run-time Statistics</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfad02711bc1b59eba645d8ebee3e6f2df5bcf65" translate="yes" xml:space="preserve">
          <source>Run-time configuration parameter name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a3537e1b1141685ddea37a6bf3d62bd54b47173" translate="yes" xml:space="preserve">
          <source>Running &lt;code&gt;DROP DATABASE&lt;/code&gt; or &lt;code&gt;ALTER DATABASE ... SET TABLESPACE&lt;/code&gt; on the primary will generate a WAL entry that will cause all users connected to that database on the standby to be forcibly disconnected. This action occurs immediately, whatever the setting of &lt;code&gt;max_standby_streaming_delay&lt;/code&gt;. Note that &lt;code&gt;ALTER DATABASE ... RENAME&lt;/code&gt; does not disconnect users, which in most cases will go unnoticed, though might in some cases cause a program confusion if it depends in some way upon database name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71157cbfad52170782ef78b45e43fe59de81fafa" translate="yes" xml:space="preserve">
          <source>Running queries in hot standby mode is similar to normal query operation, though there are several usage and administrative differences explained below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93362be79e5b1c35c85313b52f149b521a850ee5" translate="yes" xml:space="preserve">
          <source>Running the PostgreSQL interactive terminal program, called &lt;em&gt;psql&lt;/em&gt;, which allows you to interactively enter, edit, and execute SQL commands.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81a885e4a05b7837bf89bc257dddd0ff56951c9d" translate="yes" xml:space="preserve">
          <source>Running with connection parameters to a PostgreSQL cluster in startup:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fff922ce66314e8cfaf8cdfeac0e9f934608d16" translate="yes" xml:space="preserve">
          <source>Running with connection parameters to a non-responsive PostgreSQL cluster:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7cf597064714419ae36955f74efc83a4748a9d7" translate="yes" xml:space="preserve">
          <source>Runs in single-line mode where a newline terminates an SQL command, as a semicolon does.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02aa629c8b16cd17a44f3a0efec2feed43937642" translate="yes" xml:space="preserve">
          <source>S</source>
          <target state="translated">S</target>
        </trans-unit>
        <trans-unit id="9a2833a68b2b5a8101cbef39bec23f0b3a9245c1" translate="yes" xml:space="preserve">
          <source>SASL Authentication</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc5e17646da120752ee7e631a8a7f6cec0756eed" translate="yes" xml:space="preserve">
          <source>SASL Authentication: SCRAM-SHA-256 Authentication</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c5e7d070ec0ab017535260be8b2a8640c2f6758" translate="yes" xml:space="preserve">
          <source>SAVEPOINT</source>
          <target state="translated">SAVEPOINT</target>
        </trans-unit>
        <trans-unit id="2968898746c112d95829f5ba43f3ab14d5a8ee5d" translate="yes" xml:space="preserve">
          <source>SAVEPOINT &amp;mdash; define a new savepoint within the current transaction</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d54d461b0e93966e734b026dfe2118ed16f1a78" translate="yes" xml:space="preserve">
          <source>SCRAM with channel binding prevents such man-in-the-middle attacks by mixing the signature of the server's certificate into the transmitted password hash. While a fake server can retransmit the real server's certificate, it doesn't have access to the private key matching that certificate, and therefore cannot prove it is the owner, causing SSL connection failure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f15bccb6a4b6b1dfc8c3c1c8fad90ae83f94463" translate="yes" xml:space="preserve">
          <source>SE-PostgreSQL Introduction</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5602d710f5ace4caf5686004b21ead1c001ffa04" translate="yes" xml:space="preserve">
          <source>SECURITY LABEL</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bac9deee0ff8b69144f6c494a64bcef7fbb99dc" translate="yes" xml:space="preserve">
          <source>SECURITY LABEL &amp;mdash; define or change a security label applied to an object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4942c26d0735947d8a22a2fbe2735a12e381808" translate="yes" xml:space="preserve">
          <source>SELECT</source>
          <target state="translated">SELECT</target>
        </trans-unit>
        <trans-unit id="c109d6ea26b33b8f0b1a2c16691c91b61b1f47cb" translate="yes" xml:space="preserve">
          <source>SELECT ... DISTINCT</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f1d17dea1e56188a8f7a85a9fa0feb0643f7db6" translate="yes" xml:space="preserve">
          <source>SELECT ... EXCEPT</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="549332f553955260423fbb630328c298c10b6076" translate="yes" xml:space="preserve">
          <source>SELECT ... FROM</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e99306609429d4ffb8a50f26f40eba41d3ee3c5c" translate="yes" xml:space="preserve">
          <source>SELECT ... GROUP BY</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="433714c6e39ac140bd21394a29cedbb7fc60a9b3" translate="yes" xml:space="preserve">
          <source>SELECT ... HAVING</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a73b45bfd999b51a91b0b9b9ed54f345884bdea3" translate="yes" xml:space="preserve">
          <source>SELECT ... INTERSECT</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2931cc0f46be4e8ce851ea645a1c5efd7fb4aa6e" translate="yes" xml:space="preserve">
          <source>SELECT ... LIMIT</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a93a8812a9d37903b646b93126b8371980dd78f" translate="yes" xml:space="preserve">
          <source>SELECT ... ORDER BY</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5072dde920c520e6bf032e69f5ee5ec9a52d72a1" translate="yes" xml:space="preserve">
          <source>SELECT ... UNION</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76fd8400684291139689533af00a6695888dd449" translate="yes" xml:space="preserve">
          <source>SELECT ... WHERE</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c85dcaf943d3c6b197884b4fca581471f89d511" translate="yes" xml:space="preserve">
          <source>SELECT ... WINDOW</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bee9a601c0eb262445256d0a7ecc5438d432d191" translate="yes" xml:space="preserve">
          <source>SELECT ... WITH</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7768caeabea6c20082aba945fd23ed5dfc00a60c" translate="yes" xml:space="preserve">
          <source>SELECT INTO</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4a6ab2364aeebf690fa1f713d0dabe0ae95b18a" translate="yes" xml:space="preserve">
          <source>SELECT INTO &amp;mdash; define a new table from the results of a query</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa8a4aa6ea022cf29ffdf6e3888dcd1cee0da2de" translate="yes" xml:space="preserve">
          <source>SELECT Lists</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96dd17a13e6fff2435b60a5f376e38039e737e64" translate="yes" xml:space="preserve">
          <source>SELECT Lists: Column Labels</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dea0ef1027ae4ecb70602b4a4001c28929277e62" translate="yes" xml:space="preserve">
          <source>SELECT Lists: DISTINCT</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="492d193a017c3e59fc04b60927f171a28ae9ddfc" translate="yes" xml:space="preserve">
          <source>SELECT Lists: Select-List Items</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17002e6b6d7ff4c0ae74a77c468d57589e24fd6a" translate="yes" xml:space="preserve">
          <source>SELECT Output Columns</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0369adca6ccf64b5d7c0d197ffc3a2f769e240b5" translate="yes" xml:space="preserve">
          <source>SELECT, TABLE, WITH &amp;mdash; retrieve rows from a table or view</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44f7e965be1235f05e305a467631982e8069c34c" translate="yes" xml:space="preserve">
          <source>SELinux User's and Administrator's Guide</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb318e1bb5fc77b4396492cdee9ce6459bc0b341" translate="yes" xml:space="preserve">
          <source>SELinux access control decisions are made using security labels, which are represented by strings such as &lt;code&gt;system_u:object_r:sepgsql_table_t:s0&lt;/code&gt;. Each access control decision involves two labels: the label of the subject attempting to perform the action, and the label of the object on which the operation is to be performed. Since these labels can be applied to any sort of object, access control decisions for objects stored within the database can be (and, with this module, are) subjected to the same general criteria used for objects of any other type, such as files. This design is intended to allow a centralized security policy to protect information assets independent of the particulars of how those assets are stored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="baaadd42a98998ad54f9f7f0dc049575f8bcb06e" translate="yes" xml:space="preserve">
          <source>SELinux defines several permissions to control common operations for each object type; such as creation, alter, drop and relabel of security label. In addition, several object types have special permissions to control their characteristic operations; such as addition or deletion of name entries within a particular schema.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55c5d81017a30edf1e47ba1b78c377a5e5ebfd50" translate="yes" xml:space="preserve">
          <source>SET</source>
          <target state="translated">SET</target>
        </trans-unit>
        <trans-unit id="ed50e3276003310a8e9fe68c9d0558543dc625db" translate="yes" xml:space="preserve">
          <source>SET &amp;mdash; change a run-time parameter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74fea83b8e29ed0d9baf2051ea0b6cbf4c781859" translate="yes" xml:space="preserve">
          <source>SET CONSTRAINTS</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="151992ecd11aebbdfe70b48dd5706caf33551f93" translate="yes" xml:space="preserve">
          <source>SET CONSTRAINTS &amp;mdash; set constraint check timing for the current transaction</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48e764b927b1590ddbd9c82bf55e742796154628" translate="yes" xml:space="preserve">
          <source>SET ROLE</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adf0107c1cf0989ac94cb9393a5c03d5526bfebd" translate="yes" xml:space="preserve">
          <source>SET ROLE &amp;mdash; set the current user identifier of the current session</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f8324a7bcedd239f742a57722fb4b5b2d84154d" translate="yes" xml:space="preserve">
          <source>SET SESSION AUTHORIZATION</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b437edc175bcc6c087b4a76b7709936ccc7454a" translate="yes" xml:space="preserve">
          <source>SET SESSION AUTHORIZATION &amp;mdash; set the session user identifier and the current user identifier of the current session</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f4b879a4b48823a45046d9fb3d07c9ee88879b4" translate="yes" xml:space="preserve">
          <source>SET TRANSACTION</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8432189084f1bc6f4e893c032c5d3ce6777ea57" translate="yes" xml:space="preserve">
          <source>SET TRANSACTION &amp;mdash; set the characteristics of the current transaction</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b9079dcb3b5d1ef1e40482f9c01179073a53f17" translate="yes" xml:space="preserve">
          <source>SGML</source>
          <target state="translated">SGML</target>
        </trans-unit>
        <trans-unit id="bb99119e95c8e6a227bc34a3ce384008860cd848" translate="yes" xml:space="preserve">
          <source>SHA-224 hash</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b260b421bfc6ab475a987b7a1c5931415e226de" translate="yes" xml:space="preserve">
          <source>SHA-256 hash</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7394298d86c031077a91787405f5786ad9c7812d" translate="yes" xml:space="preserve">
          <source>SHA-384 hash</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c4cdc245cabaa422a74ba60747103e9d93edb8e" translate="yes" xml:space="preserve">
          <source>SHA-512 hash</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1744a525099d9a53c0460ef9cb7ab0e4c4fc939" translate="yes" xml:space="preserve">
          <source>SHA1</source>
          <target state="translated">SHA1</target>
        </trans-unit>
        <trans-unit id="694c58aaafb0c6dc9ac6113fda787fb752fd1fa6" translate="yes" xml:space="preserve">
          <source>SHA224/256/384/512</source>
          <target state="translated">SHA224/256/384/512</target>
        </trans-unit>
        <trans-unit id="5f048dbc0f9901d32b771c4583f8c05bf3099ed4" translate="yes" xml:space="preserve">
          <source>SHA256/384/512</source>
          <target state="translated">SHA256/384/512</target>
        </trans-unit>
        <trans-unit id="dd19b86ae45a271261a2769df9693b7eeeac1d33" translate="yes" xml:space="preserve">
          <source>SHARE</source>
          <target state="translated">SHARE</target>
        </trans-unit>
        <trans-unit id="75d04aa8efcc077848b5418389044c2e997b4339" translate="yes" xml:space="preserve">
          <source>SHARE ROW EXCLUSIVE</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="116b0b7668c7a2f9618740565ec4bb084306eddb" translate="yes" xml:space="preserve">
          <source>SHARE UPDATE EXCLUSIVE</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40ae6fd23e318904854df6e040723138bba16421" translate="yes" xml:space="preserve">
          <source>SHOW</source>
          <target state="translated">SHOW</target>
        </trans-unit>
        <trans-unit id="8ee2ce05179dded29f3a5b52317a29c34826f3d5" translate="yes" xml:space="preserve">
          <source>SHOW &amp;mdash; show the value of a run-time parameter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d14a2e1185b80296038156e7c70b8194935d3a8e" translate="yes" xml:space="preserve">
          <source>SIGINT</source>
          <target state="translated">SIGINT</target>
        </trans-unit>
        <trans-unit id="c17a4b6e8878d862728ca038a99603d61d7ca07f" translate="yes" xml:space="preserve">
          <source>SIGQUIT</source>
          <target state="translated">SIGQUIT</target>
        </trans-unit>
        <trans-unit id="e85f8b5c7eac9f932a93cbf9d03712194c0da0e2" translate="yes" xml:space="preserve">
          <source>SIGTERM</source>
          <target state="translated">SIGTERM</target>
        </trans-unit>
        <trans-unit id="3ac833a3df1ae61fe062d63f8b82ffba391eb78d" translate="yes" xml:space="preserve">
          <source>SP-GiST</source>
          <target state="translated">SP-GiST</target>
        </trans-unit>
        <trans-unit id="2add1e1e2bc766022fc5586d1f53200a86310220" translate="yes" xml:space="preserve">
          <source>SP-GiST Indexes: Built-in Operator Classes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa104075633d3201168a1bb39b0c4e539c83a68b" translate="yes" xml:space="preserve">
          <source>SP-GiST Indexes: Examples</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95d5d0637d61ad8c3a8e44a2c45b55c37465c697" translate="yes" xml:space="preserve">
          <source>SP-GiST Indexes: Extensibility</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e7dc6fa3a11c3934b44832416519adf68556f2f" translate="yes" xml:space="preserve">
          <source>SP-GiST Indexes: Implementation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6a66bb3e75623245ed5dea0220aa160fb0caabf" translate="yes" xml:space="preserve">
          <source>SP-GiST indexes, like GiST indexes, offer an infrastructure that supports various kinds of searches. SP-GiST permits implementation of a wide range of different non-balanced disk-based data structures, such as quadtrees, k-d trees, and radix trees (tries). As an example, the standard distribution of PostgreSQL includes SP-GiST operator classes for two-dimensional points, which support indexed queries using these operators:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cdd1caa127b3e88e8a1fed97cfbcba3d77e43ef" translate="yes" xml:space="preserve">
          <source>SP-GiST is an abbreviation for space-partitioned GiST. SP-GiST supports partitioned search trees, which facilitate development of a wide range of different non-balanced data structures, such as quad-trees, k-d trees, and radix trees (tries). The common feature of these structures is that they repeatedly divide the search space into partitions that need not be of equal size. Searches that are well matched to the partitioning rule can be very fast.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cad58fcd1c84d93a1ccc36db2394a92b2702598f" translate="yes" xml:space="preserve">
          <source>SP-GiST offers an interface with a high level of abstraction, requiring the access method developer to implement only methods specific to a given data type. The SP-GiST core is responsible for efficient disk mapping and searching the tree structure. It also takes care of concurrency and logging considerations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="576bfa9599018ae4ab50451e1a4d78e4622222be" translate="yes" xml:space="preserve">
          <source>SPI</source>
          <target state="translated">SPI</target>
        </trans-unit>
        <trans-unit id="2064cb643caa8d9e1de12eea7f3e143ca9f8680d" translate="yes" xml:space="preserve">
          <source>SQL</source>
          <target state="translated">SQL</target>
        </trans-unit>
        <trans-unit id="50315be8d6d0ce57ead2a36e2bf8dc5de912c90f" translate="yes" xml:space="preserve">
          <source>SQL &lt;code&gt;INSERT&lt;/code&gt; and &lt;code&gt;UPDATE&lt;/code&gt; statements place the results of expressions into a table. The expressions in the statement must be matched up with, and perhaps converted to, the types of the target columns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a31c0b48ed8450b0441203e59656b02b2047060f" translate="yes" xml:space="preserve">
          <source>SQL &lt;code&gt;NULL&lt;/code&gt; is a different concept</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5118cabed55c518cba17e213be23757b2c695769" translate="yes" xml:space="preserve">
          <source>SQL &lt;code&gt;UNION&lt;/code&gt; constructs must match up possibly dissimilar types to become a single result set. The resolution algorithm is applied separately to each output column of a union query. The &lt;code&gt;INTERSECT&lt;/code&gt; and &lt;code&gt;EXCEPT&lt;/code&gt; constructs resolve dissimilar types in the same way as &lt;code&gt;UNION&lt;/code&gt;. The &lt;code&gt;CASE&lt;/code&gt;, &lt;code&gt;ARRAY&lt;/code&gt;, &lt;code&gt;VALUES&lt;/code&gt;, &lt;code&gt;GREATEST&lt;/code&gt; and &lt;code&gt;LEAST&lt;/code&gt; constructs use the identical algorithm to match up their component expressions and select a result data type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f8bafe5e0fb303a372d3d572cf81e76910f3189" translate="yes" xml:space="preserve">
          <source>SQL Commands</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c2a139e3c7fca0485f190d4c35e4af784637120" translate="yes" xml:space="preserve">
          <source>SQL Dump</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cda1b219180ae57eb8d6130a51d423ecf131c870" translate="yes" xml:space="preserve">
          <source>SQL Interpolation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c1f76dc7ad0afa25c5cf780385079fdfa6b9459" translate="yes" xml:space="preserve">
          <source>SQL Key Words</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc5f1a9e49159712d94151bb6eee565938bb9e46" translate="yes" xml:space="preserve">
          <source>SQL defines some string functions that use key words, rather than commas, to separate arguments. Details are in &lt;a href=&quot;functions-binarystring#FUNCTIONS-BINARYSTRING-SQL&quot;&gt;Table 9.12&lt;/a&gt;. PostgreSQL also provides versions of these functions that use the regular function invocation syntax (see &lt;a href=&quot;functions-binarystring#FUNCTIONS-BINARYSTRING-OTHER&quot;&gt;Table 9.13&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="215b8afae6c95fbdbc5864947d8f6ba84d83adca" translate="yes" xml:space="preserve">
          <source>SQL defines some string functions that use key words, rather than commas, to separate arguments. Details are in &lt;a href=&quot;functions-string#FUNCTIONS-STRING-SQL&quot;&gt;Table 9.9&lt;/a&gt;. PostgreSQL also provides versions of these functions that use the regular function invocation syntax (see &lt;a href=&quot;functions-string#FUNCTIONS-STRING-OTHER&quot;&gt;Table 9.10&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a497b6b015e330bfe740a1bf7d4ecce6f82a4e18" translate="yes" xml:space="preserve">
          <source>SQL defines two primary character types: &lt;code&gt;character varying(n)&lt;/code&gt; and &lt;code&gt;character(n)&lt;/code&gt;, where &lt;code&gt;n&lt;/code&gt; is a positive integer. Both of these types can store strings up to &lt;code&gt;n&lt;/code&gt; characters (not bytes) in length. An attempt to store a longer string into a column of these types will result in an error, unless the excess characters are all spaces, in which case the string will be truncated to the maximum length. (This somewhat bizarre exception is required by the SQL standard.) If the string to be stored is shorter than the declared length, values of type &lt;code&gt;character&lt;/code&gt; will be space-padded; values of type &lt;code&gt;character varying&lt;/code&gt; will simply store the shorter string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30b0fb5e98403d1665277637d2af26848e3d9d16" translate="yes" xml:space="preserve">
          <source>SQL distinguishes between &lt;em&gt;reserved&lt;/em&gt; and &lt;em&gt;non-reserved&lt;/em&gt; key words. According to the standard, reserved key words are the only real key words; they are never allowed as identifiers. Non-reserved key words only have a special meaning in particular contexts and can be used as identifiers in other contexts. Most non-reserved key words are actually the names of built-in tables and functions specified by SQL. The concept of non-reserved key words essentially only exists to declare that some predefined meaning is attached to a word in some contexts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec2a1f9054d07ada194d645f7dd19b745d42e99b" translate="yes" xml:space="preserve">
          <source>SQL identifiers and key words must begin with a letter (&lt;code&gt;a&lt;/code&gt;-&lt;code&gt;z&lt;/code&gt;, but also letters with diacritical marks and non-Latin letters) or an underscore (&lt;code&gt;_&lt;/code&gt;). Subsequent characters in an identifier or key word can be letters, underscores, digits (&lt;code&gt;0&lt;/code&gt;-&lt;code&gt;9&lt;/code&gt;), or dollar signs (&lt;code&gt;$&lt;/code&gt;). Note that dollar signs are not allowed in identifiers according to the letter of the SQL standard, so their use might render applications less portable. The SQL standard will not define a key word that contains digits or starts or ends with an underscore, so identifiers of this form are safe against possible conflict with future extensions of the standard.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61673e852a4298e6fe28f40a88d7a0b73cb031b4" translate="yes" xml:space="preserve">
          <source>SQL input consists of a sequence of &lt;em&gt;commands&lt;/em&gt;. A command is composed of a sequence of &lt;em&gt;tokens&lt;/em&gt;, terminated by a semicolon (&amp;ldquo;;&amp;rdquo;). The end of the input stream also terminates a command. Which tokens are valid depends on the syntax of the particular command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0124049f46b5b7f47719e2938a3959c20ec2ce0" translate="yes" xml:space="preserve">
          <source>SQL is a strongly typed language. That is, every data item has an associated data type which determines its behavior and allowed usage. PostgreSQL has an extensible type system that is more general and flexible than other SQL implementations. Hence, most type conversion behavior in PostgreSQL is governed by general rules rather than by &lt;em&gt;ad hoc&lt;/em&gt; heuristics. This allows the use of mixed-type expressions even with user-defined types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72a2f56fcbaf685b04bee00dedaa0944a11af68a" translate="yes" xml:space="preserve">
          <source>SQL only specifies the integer types &lt;code&gt;integer&lt;/code&gt; (or &lt;code&gt;int&lt;/code&gt;), &lt;code&gt;smallint&lt;/code&gt;, and &lt;code&gt;bigint&lt;/code&gt;. The type names &lt;code&gt;int2&lt;/code&gt;, &lt;code&gt;int4&lt;/code&gt;, and &lt;code&gt;int8&lt;/code&gt; are extensions, which are also used by some other SQL database systems.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26c0a0733071a752233b529d9be28bc34d094b1c" translate="yes" xml:space="preserve">
          <source>SQL requires a savepoint to be destroyed automatically when another savepoint with the same name is established. In PostgreSQL, the old savepoint is kept, though only the more recent one will be used when rolling back or releasing. (Releasing the newer savepoint with &lt;code&gt;RELEASE SAVEPOINT&lt;/code&gt; will cause the older one to again become accessible to &lt;code&gt;ROLLBACK TO SAVEPOINT&lt;/code&gt; and &lt;code&gt;RELEASE SAVEPOINT&lt;/code&gt;.) Otherwise, &lt;code&gt;SAVEPOINT&lt;/code&gt; is fully SQL conforming.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c239e838c9d250a1fb9c5efb07b76cf00e7ef97" translate="yes" xml:space="preserve">
          <source>SQL specifies that &lt;code&gt;BEFORE DELETE&lt;/code&gt; triggers on cascaded deletes fire &lt;em&gt;after&lt;/em&gt; the cascaded &lt;code&gt;DELETE&lt;/code&gt; completes. The PostgreSQL behavior is for &lt;code&gt;BEFORE DELETE&lt;/code&gt; to always fire before the delete action, even a cascading one. This is considered more consistent. There is also nonstandard behavior if &lt;code&gt;BEFORE&lt;/code&gt; triggers modify rows or prevent updates during an update that is caused by a referential action. This can lead to constraint violations or stored data that does not honor the referential constraint.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11671fe053ce1592a4e16b009e40a2f5deac42c8" translate="yes" xml:space="preserve">
          <source>SQL specifies that multiple triggers should be fired in time-of-creation order. PostgreSQL uses name order, which was judged to be more convenient.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ac61b1e5b5dc9089362bb1dfbdcf97bde7805b3" translate="yes" xml:space="preserve">
          <source>SQL standard format: 1 year 2 months</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7857b228e9efbb70f80b0029fe2e0f16e3eb640f" translate="yes" xml:space="preserve">
          <source>SQL standard format: 3 days 4 hours 5 minutes 6 seconds</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82c859d1f3667694d2494f25690cbab016f76960" translate="yes" xml:space="preserve">
          <source>SQL uses a three-valued logic system with true, false, and &lt;code&gt;null&lt;/code&gt;, which represents &amp;ldquo;unknown&amp;rdquo;. Observe the following truth tables:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f79470b3ee244f840e7d2d4a78791cf5daef595b" translate="yes" xml:space="preserve">
          <source>SQL-92</source>
          <target state="translated">SQL-92</target>
        </trans-unit>
        <trans-unit id="884b56143a83902d89ca94cfbf6e0c50f0a4b7ed" translate="yes" xml:space="preserve">
          <source>SQL-language functions that are simple enough to be &amp;ldquo;inlined&amp;rdquo; into the calling query will not be tracked, regardless of this setting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="396d530882aca889c386f5cfc0e495440f5d041a" translate="yes" xml:space="preserve">
          <source>SQL/JSON arrays are 0-relative, unlike regular SQL arrays that start from 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72f791640f6b8591ac7a9f46ee935dda3c25679d" translate="yes" xml:space="preserve">
          <source>SQL/JSON path expressions allow matching text to a regular expression with the &lt;code&gt;like_regex&lt;/code&gt; filter. For example, the following SQL/JSON path query would case-insensitively match all strings in an array that start with an English vowel:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f723a202e85aa4a821b4382dc10a12a217b0e03" translate="yes" xml:space="preserve">
          <source>SQL/JSON path expressions specify the items to be retrieved from the JSON data, similar to XPath expressions used for SQL access to XML. In PostgreSQL, path expressions are implemented as the &lt;code&gt;jsonpath&lt;/code&gt; data type and can use any elements described in &lt;a href=&quot;datatype-json#DATATYPE-JSONPATH&quot;&gt;Section 8.14.6&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="176bb82da3b29b559ce48dbf3e06ea17f7de00a5" translate="yes" xml:space="preserve">
          <source>SQL:1999 and later use a slightly different definition which is not entirely upward compatible with SQL-92. In most cases, however, PostgreSQL will interpret an &lt;code&gt;ORDER BY&lt;/code&gt; or &lt;code&gt;GROUP BY&lt;/code&gt; expression the same way SQL:1999 does.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="175caa438cc0c85490ce98c2d0dc3ecfa1e51adc" translate="yes" xml:space="preserve">
          <source>SQL:2008 introduced a different syntax to achieve the same result, which PostgreSQL also supports. It is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="984c51e54e6539d7d0b9df0afe24e6672f17c063" translate="yes" xml:space="preserve">
          <source>SQL:2011</source>
          <target state="translated">SQL:2011</target>
        </trans-unit>
        <trans-unit id="25a10c42e37bdc3f41e2ba28de017247195ceec9" translate="yes" xml:space="preserve">
          <source>SQL:2016</source>
          <target state="translated">SQL:2016</target>
        </trans-unit>
        <trans-unit id="a903e9c7ff9ddbfcd112771c78c6496174606de1" translate="yes" xml:space="preserve">
          <source>SQLSTATE error code</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c99e19efe064a97f1f0d667e41e711ee2ae8217" translate="yes" xml:space="preserve">
          <source>SRF</source>
          <target state="translated">SRF</target>
        </trans-unit>
        <trans-unit id="839226786b62bf95c9258e79140ac43890ceae07" translate="yes" xml:space="preserve">
          <source>SSH</source>
          <target state="translated">SSH</target>
        </trans-unit>
        <trans-unit id="78bb8826fcc2504583e625386c238563e6207595" translate="yes" xml:space="preserve">
          <source>SSL</source>
          <target state="translated">SSL</target>
        </trans-unit>
        <trans-unit id="75f5b809fd16f8c1f83643b71df6da31e8d39d40" translate="yes" xml:space="preserve">
          <source>SSL Host Authentication</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="799d9c3ec94ba9c3e1fb61b95c4ea8663387f535" translate="yes" xml:space="preserve">
          <source>SSL connections encrypt all data sent across the network: the password, the queries, and the data returned. The &lt;code&gt;pg_hba.conf&lt;/code&gt; file allows administrators to specify which hosts can use non-encrypted connections (&lt;code&gt;host&lt;/code&gt;) and which require SSL-encrypted connections (&lt;code&gt;hostssl&lt;/code&gt;). Also, clients can specify that they connect to servers only via SSL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d50390961a0b32adc3073373e957f54be2007ad1" translate="yes" xml:space="preserve">
          <source>SSPI</source>
          <target state="translated">SSPI</target>
        </trans-unit>
        <trans-unit id="d05c3657583117ef9526aa06e8764eb1af739953" translate="yes" xml:space="preserve">
          <source>SSPI Authentication</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52401dd05ffd3ca82cab3bd4cdf18c622b87752b" translate="yes" xml:space="preserve">
          <source>SSPI is a Windows technology for secure authentication with single sign-on. PostgreSQL will use SSPI in &lt;code&gt;negotiate&lt;/code&gt; mode, which will use Kerberos when possible and automatically fall back to NTLM in other cases. SSPI authentication only works when both server and client are running Windows, or, on non-Windows platforms, when GSSAPI is available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31af9d39b417e9de78c051ce8339a8b204511160" translate="yes" xml:space="preserve">
          <source>START TRANSACTION</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a6120ce22115bdf90b8e5ee1fb574b72a4d3d6c" translate="yes" xml:space="preserve">
          <source>START TRANSACTION &amp;mdash; start a transaction block</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d900f37c21b42b857e58379babe502b8de7b073" translate="yes" xml:space="preserve">
          <source>SYSV</source>
          <target state="translated">SYSV</target>
        </trans-unit>
        <trans-unit id="2fbe56d80bc33f157b40f13705029851c03baa63" translate="yes" xml:space="preserve">
          <source>Safely write all database files to disk and exit. This does not perform any of the normal initdb operations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="991f9ff1b1ca6d7141558d8175d57bda83d57350" translate="yes" xml:space="preserve">
          <source>Salt Bits</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6293703460a43f11122394b7f0d04b7170d07c35" translate="yes" xml:space="preserve">
          <source>Same as &amp;mdash; The segments [a, b] and [c, d] are identical, that is, a = c and b = d.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30116d0842065b110cb0105ab36a39499acf6dbd" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;.**&lt;/code&gt;, but with a filter over nesting levels of JSON hierarchy. Nesting levels are specified as integers. Zero level corresponds to the current object. To access the lowest nesting level, you can use the &lt;code&gt;last&lt;/code&gt; keyword. This is a PostgreSQL extension of the SQL/JSON standard.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c34b09b66be40aef26e7e9ed1a4c53f473498d8e" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;\setshell&lt;/code&gt;, but the result of the command is discarded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3aa9c47501819277365c57d68d78a3dc1b716967" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;pg_stat_all_indexes&lt;/code&gt;, except that only indexes on system tables are shown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6623d67b9186ea331111cca75554c88ad4177489" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;pg_stat_all_indexes&lt;/code&gt;, except that only indexes on user tables are shown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0a09f23e5a698f94156c58b4dfcbfdb11a63992" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;pg_stat_all_tables&lt;/code&gt;, except that only system tables are shown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fd36ceac7544411d132f394cfd51cf8cb5b9eb0" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;pg_stat_all_tables&lt;/code&gt;, except that only user tables are shown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d18e7f77ee7d734f9d3c06caa22fa6d2381239e" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;pg_stat_xact_all_tables&lt;/code&gt;, except that only system tables are shown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bd260bbf827ee3015b6b0e21409fa4bcf543730" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;pg_stat_xact_all_tables&lt;/code&gt;, except that only user tables are shown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8efd1b61c42e9db6ce0135824836d5868a7be9d" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;pg_statio_all_indexes&lt;/code&gt;, except that only indexes on system tables are shown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2dfcc70130a65c4642e59f998a55a8bc204ba75" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;pg_statio_all_indexes&lt;/code&gt;, except that only indexes on user tables are shown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a6baa118a4ad107eb8341fa0f670c417e86efec" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;pg_statio_all_sequences&lt;/code&gt;, except that only system sequences are shown. (Presently, no system sequences are defined, so this view is always empty.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66c6e90b8b50ab3b105ec81afd9f726e9a0948f6" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;pg_statio_all_sequences&lt;/code&gt;, except that only user sequences are shown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="438a4c6f2d0c87790b8abacd03d7e84f41d3e681" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;pg_statio_all_tables&lt;/code&gt;, except that only system tables are shown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="164d2a01903e2d1159e6f8a5c1e4612c60aab48e" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;pg_statio_all_tables&lt;/code&gt;, except that only user tables are shown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a77043c28a680c2ab376ef9d079737021fff1194" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;ssl_client_dn_field&lt;/code&gt;, but for the certificate issuer rather than the certificate subject.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1413a7ef2814fa6b0f5de019f0154a3e3c333237" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;word_similarity(text, text)&lt;/code&gt;, but forces extent boundaries to match word boundaries. Since we don't have cross-word trigrams, this function actually returns greatest similarity between first string and any continuous extent of words of the second string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ad74946392dd878bc042f0609aca2be883ed9b7" translate="yes" xml:space="preserve">
          <source>Same as above</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8215fd43b7fa7c92178d9857533890db2546d9e7" translate="yes" xml:space="preserve">
          <source>Same as?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="437c1f3a262710aa22c56be425fd705652c3be30" translate="yes" xml:space="preserve">
          <source>Sampling rate, used when writing data into the log, to reduce the amount of log generated. If this option is given, only the specified fraction of transactions are logged. 1.0 means all transactions will be logged, 0.05 means only 5% of the transactions will be logged.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b782d41b0c29e2f39f93a8352c43300b042c6cd" translate="yes" xml:space="preserve">
          <source>Sat</source>
          <target state="translated">Sat</target>
        </trans-unit>
        <trans-unit id="17063c506b81a46c2eb7716af50cf19d4ed5a6c6" translate="yes" xml:space="preserve">
          <source>Saturday</source>
          <target state="translated">Saturday</target>
        </trans-unit>
        <trans-unit id="9903d5e707096f81b8c4f6f708ff17d88237c305" translate="yes" xml:space="preserve">
          <source>Save any configuration files from the old standbys' configuration directories you need to keep, e.g. &lt;code&gt;postgresql.conf&lt;/code&gt;, &lt;code&gt;pg_hba.conf&lt;/code&gt;, because these will be overwritten or removed in the next step.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67ff8e5fefb96820266599c347303f3a5cb1d59c" translate="yes" xml:space="preserve">
          <source>Save the current snapshot and return its identifier</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00974b83a4583d069996b8466e13d0e8e4834890" translate="yes" xml:space="preserve">
          <source>Savepoints can only be established when inside a transaction block. There can be multiple savepoints defined within a transaction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4d66c40739cf077a9f02a7b272e595edee0d893" translate="yes" xml:space="preserve">
          <source>Say you have the product table that we have used several times already:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03e2e8c190b7bc78ca87cfad0aa006018914c37c" translate="yes" xml:space="preserve">
          <source>Scaling/rotation</source>
          <target state="translated">Scaling/rotation</target>
        </trans-unit>
        <trans-unit id="25433afa84d6a7243bf01819a4ead6aed2ca4602" translate="yes" xml:space="preserve">
          <source>Scan the WAL log of the target cluster, starting from the last checkpoint before the point where the source cluster's timeline history forked off from the target cluster. For each WAL record, record each data block that was touched. This yields a list of all the data blocks that were changed in the target cluster, after the source cluster forked off.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee03ab84f43bdf9fc596fbd2d181195ac9c0b33a" translate="yes" xml:space="preserve">
          <source>Scanning a large table to verify a new foreign key or check constraint can take a long time, and other updates to the table are locked out until the &lt;code&gt;ALTER TABLE ADD CONSTRAINT&lt;/code&gt; command is committed. The main purpose of the &lt;code&gt;NOT VALID&lt;/code&gt; constraint option is to reduce the impact of adding a constraint on concurrent updates. With &lt;code&gt;NOT VALID&lt;/code&gt;, the &lt;code&gt;ADD CONSTRAINT&lt;/code&gt; command does not scan the table and can be committed immediately. After that, a &lt;code&gt;VALIDATE CONSTRAINT&lt;/code&gt; command can be issued to verify that existing rows satisfy the constraint. The validation step does not need to lock out concurrent updates, since it knows that other transactions will be enforcing the constraint for rows that they insert or update; only pre-existing rows need to be checked. Hence, validation acquires only a &lt;code&gt;SHARE UPDATE EXCLUSIVE&lt;/code&gt; lock on the table being altered. (If the constraint is a foreign key then a &lt;code&gt;ROW SHARE&lt;/code&gt; lock is also required on the table referenced by the constraint.) In addition to improving concurrency, it can be useful to use &lt;code&gt;NOT VALID&lt;/code&gt; and &lt;code&gt;VALIDATE CONSTRAINT&lt;/code&gt; in cases where the table is known to contain pre-existing violations. Once the constraint is in place, no new violations can be inserted, and the existing problems can be corrected at leisure until &lt;code&gt;VALIDATE CONSTRAINT&lt;/code&gt; finally succeeds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ff0f6c62975ef14225df2367c5a97d37335cd89" translate="yes" xml:space="preserve">
          <source>Scans of common table expressions (CTEs).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7734d5050292021df5a3f59cadc2276fa46eab6c" translate="yes" xml:space="preserve">
          <source>Scans of foreign tables, unless the foreign data wrapper has an &lt;code&gt;IsForeignScanParallelSafe&lt;/code&gt; API which indicates otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0af2fa08ad9416fdc99daa54c4628ea4316b4703" translate="yes" xml:space="preserve">
          <source>Scans of temporary tables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55c9c1619579d6d58862bfb4678195a9a701b18b" translate="yes" xml:space="preserve">
          <source>Schema containing the extension's exported objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e822bade7555ec9a940ddf4e7370bf08bf08ae5c" translate="yes" xml:space="preserve">
          <source>Schema names beginning with &lt;code&gt;pg_&lt;/code&gt; are reserved for system purposes and cannot be created by users.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db77ed065e4e0ae24d5474707494552cb72cf711" translate="yes" xml:space="preserve">
          <source>Schemas</source>
          <target state="translated">Schemas</target>
        </trans-unit>
        <trans-unit id="b8b247157bec97dc65f9b4376bf7e57f06f5951b" translate="yes" xml:space="preserve">
          <source>Schemas are analogous to directories at the operating system level, except that schemas cannot be nested.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2e5935e7a8baaaec13839bf8d1afcd03a8e8dfd" translate="yes" xml:space="preserve">
          <source>Schemas can be used to organize your data in many ways. There are a few usage patterns easily supported by the default configuration, only one of which suffices when database users mistrust other database users:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe05c5f5e36c7ad3c233ad8d962f55161893038e" translate="yes" xml:space="preserve">
          <source>Schemas: Creating a Schema</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdb81be608c6b5ac375fe714d4aa924af26ae0fa" translate="yes" xml:space="preserve">
          <source>Schemas: Public Schema</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7705fc4d879045f4bfff8ed20c3c331b16e9f78" translate="yes" xml:space="preserve">
          <source>Schemas: Schema Search Path</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d3aaf9c6e41501899d83e6eee474131e49c4eab" translate="yes" xml:space="preserve">
          <source>Schemas: Schemas and Privileges</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="300d79632baf61bfba173669d951a12fe402fc35" translate="yes" xml:space="preserve">
          <source>Schemas: System Catalog Schema</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d45329dfe8f96c785e74aa3c999aa9931e7b9ef" translate="yes" xml:space="preserve">
          <source>Scientific notation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="639e77f4cb9172dbb261f81cbe49e759033825dc" translate="yes" xml:space="preserve">
          <source>Script file meta commands begin with a backslash (&lt;code&gt;\&lt;/code&gt;) and normally extend to the end of the line, although they can be continued to additional lines by writing backslash-return. Arguments to a meta command are separated by white space. These meta commands are supported:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acdba350042b55dc9008bebcefe90a96316c6910" translate="yes" xml:space="preserve">
          <source>Scrollable and &lt;code&gt;WITH HOLD&lt;/code&gt; cursors may give unexpected results if they invoke any volatile functions (see &lt;a href=&quot;https://www.postgresql.org/docs/12/xfunc-volatility.html&quot;&gt;Section 37.7&lt;/a&gt;). When a previously fetched row is re-fetched, the functions might be re-executed, perhaps leading to results different from the first time. One workaround for such cases is to declare the cursor &lt;code&gt;WITH HOLD&lt;/code&gt; and commit the transaction before reading any rows from it. This will force the entire output of the cursor to be materialized in temporary storage, so that volatile functions are executed exactly once for each row.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3f8b5e7722ab09d6e92f5aac6b25cb972d37aa2" translate="yes" xml:space="preserve">
          <source>Searches using &lt;code&gt;SIMILAR TO&lt;/code&gt; patterns have the same security hazards, since &lt;code&gt;SIMILAR TO&lt;/code&gt; provides many of the same capabilities as POSIX-style regular expressions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f207101e41aba87f6cbc5cd59185cc3e139ec5cc" translate="yes" xml:space="preserve">
          <source>Searching for phrases is possible with the help of the &lt;code&gt;&amp;lt;-&amp;gt;&lt;/code&gt; (FOLLOWED BY) &lt;code&gt;tsquery&lt;/code&gt; operator, which matches only if its arguments have matches that are adjacent and in the given order. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1267e1be543bd1d1c9d15c26b60b124ab5fb8b25" translate="yes" xml:space="preserve">
          <source>Second, build and install the policy package for the regression test. The &lt;code&gt;sepgsql-regtest&lt;/code&gt; policy is a special purpose policy package which provides a set of rules to be allowed during the regression tests. It should be built from the policy source file &lt;code&gt;sepgsql-regtest.te&lt;/code&gt;, which is done using &lt;code&gt;make&lt;/code&gt; with a Makefile supplied by SELinux. You will need to locate the appropriate Makefile on your system; the path shown below is only an example. Once built, install this policy package using the &lt;code&gt;semodule&lt;/code&gt; command, which loads supplied policy packages into the kernel. If the package is correctly installed, &lt;code&gt;semodule -l&lt;/code&gt; should list &lt;code&gt;sepgsql-regtest&lt;/code&gt; as an available policy package:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4947ce66a60dd8dd783f54f1a65bb0bdcdc82416" translate="yes" xml:space="preserve">
          <source>Second, it allows PostgreSQL to answer some queries using only the index, without reference to the underlying table. Since PostgreSQL indexes don't contain tuple visibility information, a normal index scan fetches the heap tuple for each matching index entry, to check whether it should be seen by the current transaction. An &lt;a href=&quot;indexes-index-only-scans&quot;&gt;&lt;em&gt;index-only scan&lt;/em&gt;&lt;/a&gt;, on the other hand, checks the visibility map first. If it's known that all tuples on the page are visible, the heap fetch can be skipped. This is most useful on large data sets where the visibility map can prevent disk accesses. The visibility map is vastly smaller than the heap, so it can easily be cached even when the heap is very large.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b862ceb4146fba8b15eca2ac604e3b372a9b79d3" translate="yes" xml:space="preserve">
          <source>Second, tablespaces allow an administrator to use knowledge of the usage pattern of database objects to optimize performance. For example, an index which is very heavily used can be placed on a very fast, highly available disk, such as an expensive solid state device. At the same time a table storing archived data which is rarely used or not performance critical could be stored on a less expensive, slower disk system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f82ab476441f2fbfb5eecf3a3055620e0a9acbcf" translate="yes" xml:space="preserve">
          <source>Secondly, MCV lists handle a wider range of clause types, not just equality clauses like functional dependencies. For example, consider the following range query for the same table:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fb1db527825d2996e37c655e5dec49d4da80c09" translate="yes" xml:space="preserve">
          <source>Seconds</source>
          <target state="translated">Seconds</target>
        </trans-unit>
        <trans-unit id="9d7bbdc2872b96dc9d19fceb57b528b74a14e6c4" translate="yes" xml:space="preserve">
          <source>Section 29.5</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f425733abb8c4273d7e995c4affb2b5e60be58ec" translate="yes" xml:space="preserve">
          <source>Secure Shell</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d46b48624d925b281d27f5cebf686d51528d2de1" translate="yes" xml:space="preserve">
          <source>Secure Sockets Layer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04cf3091a9dce3e81018c41460f530cc7fbf97a3" translate="yes" xml:space="preserve">
          <source>Secure TCP/IP Connections with GSSAPI Encryption</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adf40af6654d98fbc6f0a7f0fc3588b6e04d9d7a" translate="yes" xml:space="preserve">
          <source>Secure TCP/IP Connections with GSSAPI Encryption: Basic Setup</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c27716678c2aeede2d6d03d8fadd9c904fab429" translate="yes" xml:space="preserve">
          <source>Secure TCP/IP Connections with SSH Tunnels</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="765d9d3c5cad6196564e715c97fcebff52d23d26" translate="yes" xml:space="preserve">
          <source>Secure TCP/IP Connections with SSL</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b52f6f4e6b8b4b15f3b4e49aaabd8df3ecccc64" translate="yes" xml:space="preserve">
          <source>Secure TCP/IP Connections with SSL: Basic Setup</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2932477bf8173ca0143855a2cc0fa440d4d9849" translate="yes" xml:space="preserve">
          <source>Secure TCP/IP Connections with SSL: Client Certificates</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75d825e571d0d525faf236643945b64a606840f3" translate="yes" xml:space="preserve">
          <source>Secure TCP/IP Connections with SSL: Creating Certificates</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3865198733340ebf8251b57165e25b11db31d65" translate="yes" xml:space="preserve">
          <source>Secure TCP/IP Connections with SSL: OpenSSL Configuration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86cbeaec52ccc656d29df1ceb3ae9e96c2a078b4" translate="yes" xml:space="preserve">
          <source>Secure TCP/IP Connections with SSL: SSL Server File Usage</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f25ce1b8a399bd8621a57427a20039b4b13935db" translate="yes" xml:space="preserve">
          <source>Security</source>
          <target state="translated">Security</target>
        </trans-unit>
        <trans-unit id="b0e2b68fe5c77a1104089ba4786849d1c44ed4e7" translate="yes" xml:space="preserve">
          <source>Security Support Provider Interface</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="129594b2e81c3073c544da019624bf6380f10df8" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;arrays&quot;&gt;Section 8.15&lt;/a&gt; for more details about array operator behavior. See &lt;a href=&quot;indexes-types&quot;&gt;Section 11.2&lt;/a&gt; for more details about which operators support indexed operations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91fe439d07c9c7489eb06d1f888cd3c5425576d7" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;collation#COLLATION-CREATE&quot;&gt;Section 23.2.2.3&lt;/a&gt; for more information on how to create collations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21dff2e6760e62802bf83321134c955aba4830c5" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;config-setting&quot;&gt;Section 19.1&lt;/a&gt; for more information about the various ways to change run-time parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20044de8233785ce451ac7762b09dd959a52d7c6" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;config-setting&quot;&gt;Section 19.1&lt;/a&gt; for more information about the various ways to change these parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8df945e5fb404f92c8a3a77f55aa7a33908d550" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;config-setting&quot;&gt;Section 19.1&lt;/a&gt; for other ways to set the parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3aa2dabfa10b32ce3d3591d55b432af66d5f14e6" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;datatype-datetime#DATATYPE-TIMEZONES&quot;&gt;Section 8.5.3&lt;/a&gt; for more information about time zones.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8c362f3c080f6c399e1928c12a904e8f0377b84" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;datatype-oid&quot;&gt;Section 8.19&lt;/a&gt; for more information about &lt;code&gt;regclass&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6121942b911db00103c296046d2f56571852959" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;ddl-depend&quot;&gt;Section 5.14&lt;/a&gt; for a description of the general mechanism behind this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5436fd6c7a9e0d4448841144cf08cf034fd03681" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;ddl-partitioning&quot;&gt;Section 5.11&lt;/a&gt; for more discussion on table partitioning.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e5737db37680106cc30deed32f46d04081cb6ca" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;ddl-priv&quot;&gt;Section 5.7&lt;/a&gt; for more information about specific privilege types, as well as how to inspect objects' privileges.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc1e49b4f43d37545c8f3f325e1aa810829424f6" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;functions-comparisons#ROW-WISE-COMPARISON&quot;&gt;Section 9.23.5&lt;/a&gt; for details about the meaning of a row constructor comparison.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99077fee3edc81ab2e900b38cc76283836ea98b1" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;functions-range#RANGE-OPERATORS-TABLE&quot;&gt;Table 9.53&lt;/a&gt; and &lt;a href=&quot;functions-range#RANGE-FUNCTIONS-TABLE&quot;&gt;Table 9.54&lt;/a&gt; for complete lists of operators and functions on range types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dc7bf166017c5ab01e8f179799ef718f15e4cc6" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;http://unicode.org/reports/tr35/tr35-collation.html&quot;&gt;Unicode Technical Standard #35&lt;/a&gt; and &lt;a href=&quot;https://tools.ietf.org/html/bcp47&quot;&gt;BCP 47&lt;/a&gt; for details. The list of possible collation types (&lt;code&gt;co&lt;/code&gt; subtag) can be found in the &lt;a href=&quot;http://www.unicode.org/repos/cldr/trunk/common/bcp47/collation.xml&quot;&gt;CLDR repository&lt;/a&gt;. The &lt;a href=&quot;https://ssl.icu-project.org/icu-bin/locexp&quot;&gt;ICU Locale Explorer&lt;/a&gt; can be used to check the details of a particular locale definition. The examples using the &lt;code&gt;k*&lt;/code&gt; subtags require at least ICU version 54.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="582d4fa80677a54a1ee172dc48b0285a2eaa1864" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://www.postgresql.org/docs/12/client-authentication.html&quot;&gt;Chapter 20&lt;/a&gt; for more information about client authentication configuration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38f1194916115ea94d91b361343fd5fa05583c78" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://www.postgresql.org/docs/12/extend-extensions.html&quot;&gt;Section 37.17&lt;/a&gt; for more information about these operations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="892416cf396bca7c46f14f91d5f875eae43cb1ca" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://www.postgresql.org/docs/12/indexes.html&quot;&gt;Chapter 11&lt;/a&gt; for information about when indexes can be used, when they are not used, and in which particular situations they can be useful.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5dc185077b13c96658273b13ce5ac4cae80ae9f" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://www.postgresql.org/docs/12/logicaldecoding-example.html&quot;&gt;Section 48.1&lt;/a&gt; for an example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6786a791493e2be59f08be03325336baf1d9b56d" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://www.postgresql.org/docs/12/runtime.html&quot;&gt;Chapter 18&lt;/a&gt; for details about starting and stopping the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab3cfe431becc967b2d8707ffa503148a0bf1ef7" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://www.postgresql.org/docs/12/xaggr.html&quot;&gt;Section 37.12&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c82056d140064babef823c90a745402bb0eaad0d" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;logical-replication-security&quot;&gt;Section 30.7&lt;/a&gt; for details on how to configure access control between the subscription and the publication instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fc6222de7f143b98f8f58d71a3c1ef0f2ed5e81" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;postgres-fdw&quot;&gt;postgres_fdw&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6afe2a2cf993b290dad8327744ed47ff8cb76f26" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;queries-with&quot;&gt;Section 7.8&lt;/a&gt; for additional information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d30023efb26270c0f643e34f708bf2c117a6dd98" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;rangetypes&quot;&gt;Section 8.17&lt;/a&gt; for an overview of range types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f50140c0f54dcd737110b916618da4f2ed0d2b6f" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;role-removal&quot;&gt;Section 21.4&lt;/a&gt; for more discussion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1311c6be729433d7e0d41bc36cc94bcb9e04ac98" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;rowtypes#ROWTYPES-USAGE&quot;&gt;Section 8.16.5&lt;/a&gt; for more about the &lt;code&gt;table_name&lt;/code&gt;&lt;code&gt;.*&lt;/code&gt; notation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2599d6941f298f4ebc6ff1c171836213c6e90dd" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;sepgsql#SEPGSQL-RESOURCES&quot;&gt;Section F.35.8&lt;/a&gt; for details on adjusting your working domain, if necessary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b63e06af771a4ffc188f17077941948fe6a397d" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;sql-createfunction&quot;&gt;CREATE FUNCTION&lt;/a&gt; for more details on function creation that also apply to procedures.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25aa6584689a54363475900a782425bf48c820bf" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;sql-createtype&quot;&gt;CREATE TYPE&lt;/a&gt; for more information about creating range types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cb868edee10c53ef3cb407a6108254e17240e80" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;sql-fetch&quot;&gt;FETCH&lt;/a&gt; for more examples of cursor usage.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dee20c85d57efa9a03b8b80c0a54652b2cef0e62" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;sql-set&quot;&gt;SET&lt;/a&gt; and &lt;a href=&quot;https://www.postgresql.org/docs/12/runtime-config.html&quot;&gt;Chapter 19&lt;/a&gt; for more information about allowed parameter names and values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5a0f9a31c8d4cb8e95380e7154f328b18b2f1dc" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;sql-set-transaction&quot;&gt;SET TRANSACTION&lt;/a&gt; for details of how to use an exported snapshot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="560351833cec2b456d077d537e6a8e36290f0101" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;sql-syntax-lexical#SQL-PRECEDENCE&quot;&gt;Section 4.1.6&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b16e1b88e75eae9fac619972836298831a57a94" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;ssl-tcp&quot;&gt;Section 18.9&lt;/a&gt; for more information about setting up SSL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="563b7e65559e2ffd1dcd4b25a043a5d7ce41e394" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;transaction-iso#XACT-SERIALIZABLE&quot;&gt;Section 13.2.3&lt;/a&gt; for performance suggestions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31d709bb26fab6d76bc114f179cc9b4a74012c23" translate="yes" xml:space="preserve">
          <source>See &lt;code&gt;src/backend/jit/README&lt;/code&gt; for further details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a053a4027cc8f8f5331001723fdc0df313e812ce" translate="yes" xml:space="preserve">
          <source>See &lt;code&gt;src/backend/storage/freespace/README&lt;/code&gt; for more details on how the FSM is structured, and how it's updated and searched. The &lt;a href=&quot;pgfreespacemap&quot;&gt;pg_freespacemap&lt;/a&gt; module can be used to examine the information stored in free space maps.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="982e2b1c8d12c35e58c724d217a408f75dbd560d" translate="yes" xml:space="preserve">
          <source>See &lt;code&gt;src/backend/storage/freespace/README&lt;/code&gt; for more information on the structure of an FSM page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ef0ebfd4fc78ddb23c7d11b428b37f7924c235c" translate="yes" xml:space="preserve">
          <source>See &lt;code&gt;src/include/storage/itemid.h&lt;/code&gt; and &lt;code&gt;src/include/access/htup_details.h&lt;/code&gt; for explanations of the fields returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67373bb92cd7ecbf243edb9d60ad6f00f86a6052" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1de983eb571c65e4cf91c99df72813ddd57b16b" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;catalog-pg-depend&quot;&gt;&lt;code&gt;pg_depend&lt;/code&gt;&lt;/a&gt;, which performs a similar function for dependencies involving objects within a single database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad7d639c3b0ac96867bd9b54da5256d9fa9187be" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;catalog-pg-description&quot;&gt;&lt;code&gt;pg_description&lt;/code&gt;&lt;/a&gt;, which performs a similar function for descriptions involving objects within a single database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd53e36cfb7120641bdfde4b9debd109aae624c4" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;catalog-pg-seclabel&quot;&gt;&lt;code&gt;pg_seclabel&lt;/code&gt;&lt;/a&gt;, which performs a similar function for security labels involving objects within a single database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b279716a6e4c2d389ff8eb6891492dc3ea6c55aa" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;catalog-pg-shdepend&quot;&gt;&lt;code&gt;pg_shdepend&lt;/code&gt;&lt;/a&gt;, which performs a similar function for dependencies involving objects that are shared across a database cluster.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f93abe962ae6fffe5b4393bf3a7a551bd9c115ab" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;catalog-pg-shdescription&quot;&gt;&lt;code&gt;pg_shdescription&lt;/code&gt;&lt;/a&gt;, which performs a similar function for descriptions involving objects that are shared across a database cluster.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cea165f9c06f3d524bf490cd29cc33c55feee31" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;catalog-pg-shseclabel&quot;&gt;&lt;code&gt;pg_shseclabel&lt;/code&gt;&lt;/a&gt;, which performs a similar function for security labels of database objects that are shared across a database cluster.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1df8b632444bf92211ebacd4b3f224d866cac89c" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;functions-aggregate&quot;&gt;Section 9.20&lt;/a&gt; about the aggregate function &lt;code&gt;array_agg&lt;/code&gt; for use with arrays.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bda9ba00d2498975f9b058d90e79b3b230025976" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;functions-aggregate&quot;&gt;Section 9.20&lt;/a&gt; for the aggregate function &lt;code&gt;json_agg&lt;/code&gt; which aggregates record values as JSON, and the aggregate function &lt;code&gt;json_object_agg&lt;/code&gt; which aggregates pairs of values into a JSON object, and their &lt;code&gt;jsonb&lt;/code&gt; equivalents, &lt;code&gt;jsonb_agg&lt;/code&gt; and &lt;code&gt;jsonb_object_agg&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e399735f139a89cd5c81b9d91b4af6f3ecfaaaba" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;functions-info&quot;&gt;Section 9.25&lt;/a&gt; for other ways to manipulate the schema search path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f96d074ebf7693f0aebd0f259a5b12ef2c1d4a0" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;runtime-config-client#GUC-DEFAULT-TABLESPACE&quot;&gt;default_tablespace&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40e8bb395b4f7993ff9f91c724e85a4869d719c5" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;sql-altercollation&quot;&gt;ALTER COLLATION&lt;/a&gt; for how to handle collation version mismatches.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61ea69823fe6c6e4f5558b3086cfd393b0cb5762" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;sql-createtable#SQL-CREATETABLE-EXCLUDE&quot;&gt;&lt;code&gt;CREATE TABLE ... CONSTRAINT ... EXCLUDE&lt;/code&gt;&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dee4f6c549e6186ad297cb4e513333334dbe6582" translate="yes" xml:space="preserve">
          <source>See also the &lt;a href=&quot;app-pgdump&quot;&gt;pg_dump&lt;/a&gt; documentation for details on limitations of pg_dump.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b819d0d15460a62d154724c598880fe9a3cdd1bd" translate="yes" xml:space="preserve">
          <source>See also the &lt;code&gt;&lt;a href=&quot;app-psql#APP-PSQL-META-COMMANDS-CROSSTABVIEW&quot;&gt;\crosstabview&lt;/a&gt;&lt;/code&gt; command in psql, which provides functionality similar to &lt;code&gt;crosstab()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21701b6a0c6bce35e4a7bac5e2f1c38753b42cfc" translate="yes" xml:space="preserve">
          <source>See also the aggregate function &lt;code&gt;string_agg&lt;/code&gt; in &lt;a href=&quot;functions-aggregate&quot;&gt;Section 9.20&lt;/a&gt; and the large object functions in &lt;a href=&quot;https://www.postgresql.org/docs/12/lo-funcs.html&quot;&gt;Section 34.4&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad1bde271a1bd1beac102378f06fedfbe83bc709" translate="yes" xml:space="preserve">
          <source>See also the aggregate function &lt;code&gt;string_agg&lt;/code&gt; in &lt;a href=&quot;functions-aggregate&quot;&gt;Section 9.20&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a612d7fa4857adb5bc7b0df595dafd80b5feb11" translate="yes" xml:space="preserve">
          <source>See also the compatibility section of &lt;a href=&quot;sql-set-transaction&quot;&gt;SET TRANSACTION&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8319be7b579e7e4a49dee750a5403a1584575fbd" translate="yes" xml:space="preserve">
          <source>See if the token matches any known time zone abbreviation. These abbreviations are supplied by the configuration file described in &lt;a href=&quot;datetime-config-files&quot;&gt;Section B.4&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db3af396acc6f9d65d6497b3a79795186833e19d" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;app-pgdump&quot;&gt;pg_dump&lt;/a&gt; and &lt;a href=&quot;app-pgrestore&quot;&gt;pg_restore&lt;/a&gt; reference pages for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51522476ad0a924ea2975abf1b9ba1b7069b4d48" translate="yes" xml:space="preserve">
          <source>See the description of the &lt;a href=&quot;sql-grant&quot;&gt;GRANT&lt;/a&gt; command for the meaning of the privilege types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="943bbcc97100871ab9497a75cc44428d84d573b9" translate="yes" xml:space="preserve">
          <source>See under &lt;a href=&quot;app-psql#APP-PSQL-ENVIRONMENT&quot;&gt;Environment&lt;/a&gt; for how to configure and customize your editor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f129f8fd6cdd385b6670be37b85854c18e599a18" translate="yes" xml:space="preserve">
          <source>Seldom-used data can be migrated to cheaper and slower storage media.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72dd4bb7db3a13c8c0d3ad0c5e46b386c41b24d3" translate="yes" xml:space="preserve">
          <source>Select the functions to be considered from the &lt;code&gt;pg_proc&lt;/code&gt; system catalog. If a non-schema-qualified function name was used, the functions considered are those with the matching name and argument count that are visible in the current search path (see &lt;a href=&quot;ddl-schemas#DDL-SCHEMAS-PATH&quot;&gt;Section 5.9.3&lt;/a&gt;). If a qualified function name was given, only functions in the specified schema are considered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32f3a5d205bcf542d1aadfba60d5d681cb0b232e" translate="yes" xml:space="preserve">
          <source>Select the next number from this sequence:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fe440be095ce2bd7b29f542095771fe0791634d" translate="yes" xml:space="preserve">
          <source>Select the operators to be considered from the &lt;code&gt;pg_operator&lt;/code&gt; system catalog. If a non-schema-qualified operator name was used (the usual case), the operators considered are those with the matching name and argument count that are visible in the current search path (see &lt;a href=&quot;ddl-schemas#DDL-SCHEMAS-PATH&quot;&gt;Section 5.9.3&lt;/a&gt;). If a qualified operator name was given, only operators in the specified schema are considered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="840bcfd867c3072390d17401d02c8a88816dd10d" translate="yes" xml:space="preserve">
          <source>Selectivity estimation functions contained in third-party extensions that potentially operate on statistics with user-defined operators should follow the same security rules. Consult the PostgreSQL source code for guidance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4835ab696629d27e900e8b7a2bb8c66cf1bce1f4" translate="yes" xml:space="preserve">
          <source>Selects &amp;ldquo;full&amp;rdquo; vacuum, which can reclaim more space, but takes much longer and exclusively locks the table. This method also requires extra disk space, since it writes a new copy of the table and doesn't release the old copy until the operation is complete. Usually this should only be used when a significant amount of space needs to be reclaimed from within the table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d54bcb32f97a80be7795ef5e2affcbe745306a9" translate="yes" xml:space="preserve">
          <source>Selects aggressive &amp;ldquo;freezing&amp;rdquo; of tuples. Specifying &lt;code&gt;FREEZE&lt;/code&gt; is equivalent to performing &lt;code&gt;VACUUM&lt;/code&gt; with the &lt;a href=&quot;runtime-config-client#GUC-VACUUM-FREEZE-MIN-AGE&quot;&gt;vacuum_freeze_min_age&lt;/a&gt; and &lt;a href=&quot;runtime-config-client#GUC-VACUUM-FREEZE-TABLE-AGE&quot;&gt;vacuum_freeze_table_age&lt;/a&gt; parameters set to zero. Aggressive freezing is always performed when the table is rewritten, so this option is redundant when &lt;code&gt;FULL&lt;/code&gt; is specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="329cab98b2e7b277730223d8da005110fee2ce14" translate="yes" xml:space="preserve">
          <source>Selects run-time behavior. &lt;code&gt;Option&lt;/code&gt; can be one of the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30560935504cb508b22a03e31a19e5c0b9eff148" translate="yes" xml:space="preserve">
          <source>Selects the data format to be read or written: &lt;code&gt;text&lt;/code&gt;, &lt;code&gt;csv&lt;/code&gt; (Comma Separated Values), or &lt;code&gt;binary&lt;/code&gt;. The default is &lt;code&gt;text&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1bb679a3701e627e6a88c7eaa8ec36e9390aa34" translate="yes" xml:space="preserve">
          <source>Selects the encoding of the template database. This will also be the default encoding of any database you create later, unless you override it there. The default is derived from the locale, or &lt;code&gt;SQL_ASCII&lt;/code&gt; if that does not work. The character sets supported by the PostgreSQL server are described in &lt;a href=&quot;multibyte#MULTIBYTE-CHARSET-SUPPORTED&quot;&gt;Section 23.3.1&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79c1d13e961dcca6fe5a4b3d6a9c0638c2cea516" translate="yes" xml:space="preserve">
          <source>Selects the format for the output. &lt;code&gt;format&lt;/code&gt; can be one of the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6b62f3170d3d486af26f832f1af22a99e7d95a8" translate="yes" xml:space="preserve">
          <source>Selects the format of the output. &lt;code&gt;format&lt;/code&gt; can be one of the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afc533a4481d9542840f8ed6b66fa98fa2d1291c" translate="yes" xml:space="preserve">
          <source>Selects the single-user mode. This must be the first argument on the command line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d91db2e07b2a67479eef75a9ec73a4ac5d36972" translate="yes" xml:space="preserve">
          <source>Selects the text search configuration that is used by those variants of the text search functions that do not have an explicit argument specifying the configuration. See &lt;a href=&quot;https://www.postgresql.org/docs/12/textsearch.html&quot;&gt;Chapter 12&lt;/a&gt; for further information. The built-in default is &lt;code&gt;pg_catalog.simple&lt;/code&gt;, but initdb will initialize the configuration file with a setting that corresponds to the chosen &lt;code&gt;lc_ctype&lt;/code&gt; locale, if a configuration matching that locale can be identified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2ed9afd3ab43731b8b497dd1a35f07512ff896f" translate="yes" xml:space="preserve">
          <source>Selects the user name of the database superuser. This defaults to the name of the effective user running &lt;code&gt;initdb&lt;/code&gt;. It is really not important what the superuser's name is, but one might choose to keep the customary name postgres, even if the operating system user's name is different.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43dcee11d979703dc4a6f78428bb60696686afea" translate="yes" xml:space="preserve">
          <source>Semi-Internal Options</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95ba5a1965fee51378c8670f078becf7e031cfc1" translate="yes" xml:space="preserve">
          <source>Semicolons start a comment, and the numbers at the start of lines refer to the internal archive ID assigned to each item.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="116281428e559c13e4155e2fe5084c2909518e2d" translate="yes" xml:space="preserve">
          <source>Send all server log output to &lt;code&gt;filename&lt;/code&gt;. This option is only honored when supplied as a command-line option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd03a98afc597876d66d83f82adeba8f47c5f9e2" translate="yes" xml:space="preserve">
          <source>Send output to the specified file. If this is omitted, the standard output is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9497b91e004e52409080481445f38595a6426702" translate="yes" xml:space="preserve">
          <source>Send output to the specified file. This parameter can be omitted for file based output formats, in which case the standard output is used. It must be given for the directory output format however, where it specifies the target directory instead of a file. In this case the directory is created by &lt;code&gt;pg_dump&lt;/code&gt; and must not exist before.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c28a4a94a5a072f0608dad3b338d2a4f05e4f66a" translate="yes" xml:space="preserve">
          <source>Send time of last message received from origin WAL sender</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11441f01c656a7a6e5fb17c1dad36715c7d4fb27" translate="yes" xml:space="preserve">
          <source>Send time of last reply message received from standby server</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="827bcfb8dc975e32ea5886d951bc1ade5a13c496" translate="yes" xml:space="preserve">
          <source>Sends the current query buffer to the server and stores the query's output into psql variables (see &lt;a href=&quot;app-psql#APP-PSQL-VARIABLES&quot;&gt;Variables&lt;/a&gt;). The query to be executed must return exactly one row. Each column of the row is stored into a separate variable, named the same as the column. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e34f4142455c22708bec5bb66edc23659021e08e" translate="yes" xml:space="preserve">
          <source>Sends the current query buffer to the server for execution. If an argument is given, the query's output is written to the named file or piped to the given shell command, instead of displaying it as usual. The file or command is written to only if the query successfully returns zero or more tuples, not if the query fails or is a non-data-returning SQL command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16c6228f3c84dd51ad99bdc12059c6d42048bc72" translate="yes" xml:space="preserve">
          <source>Sends the current query buffer to the server, then treats each column of each row of the query's output (if any) as a SQL statement to be executed. For example, to create an index on each column of &lt;code&gt;my_table&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6910dde6996e8d930104bdf1016b0bc2d0405a12" translate="yes" xml:space="preserve">
          <source>Sep, Sept</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c542e79c9b4257e640ccf72974d61fd590a5c26" translate="yes" xml:space="preserve">
          <source>September</source>
          <target state="translated">September</target>
        </trans-unit>
        <trans-unit id="5c8f4e0e1a2281faf562976c2410f76c3d8fbc95" translate="yes" xml:space="preserve">
          <source>Sequence</source>
          <target state="translated">Sequence</target>
        </trans-unit>
        <trans-unit id="07bc489e5c22ab662328dfdad5c7b347ebdfe88e" translate="yes" xml:space="preserve">
          <source>Sequence Functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa301e805997f1a99cfb41977fb6c8ab1f1b6154" translate="yes" xml:space="preserve">
          <source>Sequence Functions: currval</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30e5044af29a5e75a7c62a260ffd2a07b89083a7" translate="yes" xml:space="preserve">
          <source>Sequence Functions: lastval</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ea626544c964041267072d55619008b1c0a51f1" translate="yes" xml:space="preserve">
          <source>Sequence Functions: nextval</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21d95a03113a24a4ed178a05cc8de033d3d8ab56" translate="yes" xml:space="preserve">
          <source>Sequence Functions: setval</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bd032907a26ee7f0a23a1af0498a469eb893726" translate="yes" xml:space="preserve">
          <source>Sequence data is not replicated. The data in serial or identity columns backed by sequences will of course be replicated as part of the table, but the sequence itself would still show the start value on the subscriber. If the subscriber is used as a read-only database, then this should typically not be a problem. If, however, some kind of switchover or failover to the subscriber database is intended, then the sequences would need to be updated to the latest values, either by copying the current data from the publisher (perhaps using &lt;code&gt;pg_dump&lt;/code&gt;) or by determining a sufficiently high value from the tables themselves.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97234aae16b6ff095ff213aca26dc80ddef220ef" translate="yes" xml:space="preserve">
          <source>Sequence of object's key-value pairs represented as array of items containing three fields (&lt;code&gt;&quot;key&quot;&lt;/code&gt;, &lt;code&gt;&quot;value&quot;&lt;/code&gt;, and &lt;code&gt;&quot;id&quot;&lt;/code&gt;). &lt;code&gt;&quot;id&quot;&lt;/code&gt; is a unique identifier of the object key-value pair belongs to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="251f5dac0aca5e7ac9c42b47c12bdc19ca30c8be" translate="yes" xml:space="preserve">
          <source>Sequence updates - &lt;code&gt;nextval()&lt;/code&gt;, &lt;code&gt;setval()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19265d915c7caffbad5ffe481ad6585135aae0da" translate="yes" xml:space="preserve">
          <source>Sequences are based on &lt;code&gt;bigint&lt;/code&gt; arithmetic, so the range cannot exceed the range of an eight-byte integer (-9223372036854775808 to 9223372036854775807).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd35ab2ab61ca9152a68f0dda4d3d2eddfefe916" translate="yes" xml:space="preserve">
          <source>Serial number of the client certificate, or NULL if no client certificate was supplied or if SSL is not in use on this connection. The combination of certificate serial number and certificate issuer uniquely identifies a certificate (unless the issuer erroneously reuses serial numbers).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc1f3c2690cec070768cf5dde8291f16c094e668" translate="yes" xml:space="preserve">
          <source>Serializable</source>
          <target state="translated">Serializable</target>
        </trans-unit>
        <trans-unit id="ad0e6e010a3b8ec3d572049722baa6ae80e6ba2a" translate="yes" xml:space="preserve">
          <source>Serialization Anomaly</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91defb67bd083b4dbe25fedc563e29b2b50751d9" translate="yes" xml:space="preserve">
          <source>Serialization function (zero if none)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac5f12a7cf2c4bb81c6db95b524f8fe37dd72bd4" translate="yes" xml:space="preserve">
          <source>Server C-language API</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99bf7f202420ce369158974abb061f91cfba7f8d" translate="yes" xml:space="preserve">
          <source>Server Character Set</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="add5557e5f62829e10b2473a14ff984c6ddb6075" translate="yes" xml:space="preserve">
          <source>Server Configuration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="098c3ece35362ab15eb34ffc7a84bcf142c7c154" translate="yes" xml:space="preserve">
          <source>Server Programming Interface</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14436173aa6b5cb94cb403c2e8bb58b03facf70f" translate="yes" xml:space="preserve">
          <source>Server Setup and Operation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f10b934bc2ab4c078f78fee28fd61f5fee243d3c" translate="yes" xml:space="preserve">
          <source>Server name of the user mapping.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ac699bcfdb977f7d37e2683ee34b784a0d8bd8c" translate="yes" xml:space="preserve">
          <source>Server sends an AuthenticationSASLContinue message, with a SCRAM &lt;code&gt;server-first-message&lt;/code&gt; as the content.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dba72e67c7eed9c742c9c3dbf2ce3c14c9d5ff5d" translate="yes" xml:space="preserve">
          <source>Server sends an AuthenticationSASLFinal message, with the SCRAM &lt;code&gt;server-final-message&lt;/code&gt;, followed immediately by an AuthenticationOk message.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="221a7c6119dff8264ec9639fcc0447d548c97324" translate="yes" xml:space="preserve">
          <source>Server?</source>
          <target state="translated">Server?</target>
        </trans-unit>
        <trans-unit id="b13a196b7010a3bc6833221bad2d39a01c70cfa1" translate="yes" xml:space="preserve">
          <source>Session ID: see below</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aab4bf6a8ec7c39317f36d91f044715f0ea2755b" translate="yes" xml:space="preserve">
          <source>Session defaults for run-time configuration variables</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f9b0ae1082a65481e36e0822adc544170af3179" translate="yes" xml:space="preserve">
          <source>Session only</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c8411785f58288914255d3b580ee51d4ac2476e" translate="yes" xml:space="preserve">
          <source>Set &lt;code&gt;hasPrefix&lt;/code&gt; to indicate whether the new inner tuple should have a prefix, and if so set &lt;code&gt;prefixDatum&lt;/code&gt; to the prefix value. Set &lt;code&gt;nNodes&lt;/code&gt; to indicate the number of nodes that the new inner tuple will contain, and set &lt;code&gt;nodeLabels&lt;/code&gt; to an array of their label values, or to NULL if node labels are not required. Set &lt;code&gt;mapTuplesToNodes&lt;/code&gt; to an array that gives the index (from zero) of the node that each leaf tuple should be assigned to. Set &lt;code&gt;leafTupleDatums&lt;/code&gt; to an array of the values to be stored in the new leaf tuples (these will be the same as the input &lt;code&gt;datums&lt;/code&gt; if the operator class does not modify datums from one level to the next). Note that the &lt;code&gt;picksplit&lt;/code&gt; function is responsible for palloc'ing the &lt;code&gt;nodeLabels&lt;/code&gt;, &lt;code&gt;mapTuplesToNodes&lt;/code&gt; and &lt;code&gt;leafTupleDatums&lt;/code&gt; arrays.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3bd8dc1589d6249d5649e32bb4d93b0f924fa44" translate="yes" xml:space="preserve">
          <source>Set &lt;code&gt;log_filename&lt;/code&gt; and &lt;code&gt;log_rotation_age&lt;/code&gt; to provide a consistent, predictable naming scheme for your log files. This lets you predict what the file name will be and know when an individual log file is complete and therefore ready to be imported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7471a027645aaf9e67db15a19684eddb9ac4cf12" translate="yes" xml:space="preserve">
          <source>Set &lt;code&gt;log_rotation_size&lt;/code&gt; to 0 to disable size-based log rotation, as it makes the log file name difficult to predict.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2db880e519eeac98cb7ade3da9cd8cb0a3aead01" translate="yes" xml:space="preserve">
          <source>Set &lt;code&gt;log_truncate_on_rotation&lt;/code&gt; to &lt;code&gt;on&lt;/code&gt; so that old log data isn't mixed with the new in the same file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d9c416ee539d70a1d91adea4bb99fbaeceefb8b" translate="yes" xml:space="preserve">
          <source>Set Returning Functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa8cb94350f85c1e0de0f21612f572ed56fc0188" translate="yes" xml:space="preserve">
          <source>Set Returning Functions: generate_series</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67304188db740577889de74eb33fb05853ef9fb4" translate="yes" xml:space="preserve">
          <source>Set Returning Functions: generate_subscripts</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60e443d11f81d2fe080ec8d571308a3a3ea3c083" translate="yes" xml:space="preserve">
          <source>Set a compatibility mode. &lt;code&gt;mode&lt;/code&gt; can be &lt;code&gt;INFORMIX&lt;/code&gt;, &lt;code&gt;INFORMIX_SE&lt;/code&gt;, or &lt;code&gt;ORACLE&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3c328fb303d188846faa57ec644dd452b85cfe9" translate="yes" xml:space="preserve">
          <source>Set a maximum number of connections for the new user. The default is to set no limit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51b6bdc39cce328ed5f5d8b1d6e61e21b8c3e054" translate="yes" xml:space="preserve">
          <source>Set appropriate (i.e., larger than normal) values for &lt;code&gt;maintenance_work_mem&lt;/code&gt; and &lt;code&gt;max_wal_size&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84ac01b40d3c10a0aea679cf301cee7cdd55289a" translate="yes" xml:space="preserve">
          <source>Set bit in string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2c28bae18a058e2ea0c39d89999ab33172a4394" translate="yes" xml:space="preserve">
          <source>Set byte in string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f275ac0255129308183e3644a900ef6092d9b3bd" translate="yes" xml:space="preserve">
          <source>Set of currently active backend ID numbers (from 1 to the number of active backends)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="588fb0566e74c531a513e11adb480d0679df040c" translate="yes" xml:space="preserve">
          <source>Set or change the planner support function to use for this function. See &lt;a href=&quot;https://www.postgresql.org/docs/12/xfunc-optimization.html&quot;&gt;Section 37.11&lt;/a&gt; for details. You must be superuser to use this option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccffbb66ab26cee6787c7d40f463f548a96b9dec" translate="yes" xml:space="preserve">
          <source>Set random generator seed. Seeds the system random number generator, which then produces a sequence of initial generator states, one for each thread. Values for &lt;code&gt;SEED&lt;/code&gt; may be: &lt;code&gt;time&lt;/code&gt; (the default, the seed is based on the current time), &lt;code&gt;rand&lt;/code&gt; (use a strong random source, failing if none is available), or an unsigned decimal integer value. The random generator is invoked explicitly from a pgbench script (&lt;code&gt;random...&lt;/code&gt; functions) or implicitly (for instance option &lt;code&gt;--rate&lt;/code&gt; uses it to schedule transactions). When explicitly set, the value used for seeding is shown on the terminal. Any value allowed for &lt;code&gt;SEED&lt;/code&gt; may also be provided through the environment variable &lt;code&gt;PGBENCH_RANDOM_SEED&lt;/code&gt;. To ensure that the provided seed impacts all possible uses, put this option first or use the environment variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9159888d66506fdf072bd581af715b59097beff" translate="yes" xml:space="preserve">
          <source>Set recovery configuration settings in &lt;code&gt;postgresql.conf&lt;/code&gt; (see &lt;a href=&quot;runtime-config-wal#RUNTIME-CONFIG-WAL-ARCHIVE-RECOVERY&quot;&gt;Section 19.5.4&lt;/a&gt;) and create a file &lt;code&gt;recovery.signal&lt;/code&gt; in the cluster data directory. You might also want to temporarily modify &lt;code&gt;pg_hba.conf&lt;/code&gt; to prevent ordinary users from connecting until you are sure the recovery was successful.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ead6355d6453693c27e28bafe7302da83d8bfe3" translate="yes" xml:space="preserve">
          <source>Set replication progress for the given node to the given location. This primarily is useful for setting up the initial location or a new location after configuration changes and similar. Be aware that careless use of this function can lead to inconsistently replicated data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be58e3ee4067339cb19889acfdd49b7d21f4e8bc" translate="yes" xml:space="preserve">
          <source>Set sequence's current value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6bae9769dd9f455c8ef2a9e96d75f9cdc12a0f4" translate="yes" xml:space="preserve">
          <source>Set sequence's current value and &lt;code&gt;is_called&lt;/code&gt; flag</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eeb3f03a4c8992b077c228c6248eaf67d7a9fc10" translate="yes" xml:space="preserve">
          <source>Set the &lt;code&gt;timezone&lt;/code&gt; configuration variable to its default value:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c736ffb9f27232dc710a4363cc3c7a992295fb5" translate="yes" xml:space="preserve">
          <source>Set the &lt;code&gt;wal_level&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="708fa20cd3910bbb838bff343155417452fdabab" translate="yes" xml:space="preserve">
          <source>Set the &lt;em&gt;WAL segment size&lt;/em&gt;, in megabytes. This is the size of each individual file in the WAL log. The default size is 16 megabytes. The value must be a power of 2 between 1 and 1024 (megabytes). This option can only be set during initialization, and cannot be changed later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82e3bec9ca58f477e298d1bdc71c691481216998" translate="yes" xml:space="preserve">
          <source>Set the code page by entering &lt;strong&gt;&lt;code&gt;cmd.exe /c chcp 1252&lt;/code&gt;&lt;/strong&gt;. (1252 is a code page that is appropriate for German; replace it with your value.) If you are using Cygwin, you can put this command in &lt;code&gt;/etc/profile&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6bec4d792538a673a4f60f64189450e971808bc" translate="yes" xml:space="preserve">
          <source>Set the column to its default value (which will be NULL if no specific default expression has been assigned to it).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2895983a156ee68c70321bd7cfef33e4ab2bd9e0" translate="yes" xml:space="preserve">
          <source>Set the console font to &lt;code&gt;Lucida Console&lt;/code&gt;, because the raster font does not work with the ANSI code page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12d6fdd540d771975adb3546fb00e4e6d7961bdc" translate="yes" xml:space="preserve">
          <source>Set the field separator for unaligned output to a zero byte. This is equivalent to &lt;code&gt;\pset fieldsep_zero&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52d2aca222ee84cda82dfff67e7e4f3011c415d8" translate="yes" xml:space="preserve">
          <source>Set the filename prefix for the log files created by &lt;code&gt;--log&lt;/code&gt;. The default is &lt;code&gt;pgbench_log&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5dbce7ba05546ca573be289cbde8e726b566ab3" translate="yes" xml:space="preserve">
          <source>Set the fraction of transactions whose statements are all logged, in addition to statements logged for other reasons. It applies to each new transaction regardless of its statements' durations. The default is &lt;code&gt;0&lt;/code&gt;, meaning not to log statements from any additional transaction. Setting this to &lt;code&gt;1&lt;/code&gt; logs all statements for all transactions. &lt;code&gt;log_transaction_sample_rate&lt;/code&gt; is helpful to track a sample of transaction. Only superusers can change this setting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c59ee63956f28bcccd652b600e48fb099e42097a" translate="yes" xml:space="preserve">
          <source>Set the maximum number of concurrent connections from the standby servers (see &lt;a href=&quot;runtime-config-replication#GUC-MAX-WAL-SENDERS&quot;&gt;max_wal_senders&lt;/a&gt; for details).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87fbf2d5d0cfc148e22d33324829fd6df34456c7" translate="yes" xml:space="preserve">
          <source>Set the new WAL segment size, in megabytes. The value must be set to a power of 2 between 1 and 1024 (megabytes). See the same option of &lt;a href=&quot;app-initdb&quot;&gt;initdb&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c312d39ce47081cae0df0986fb7f1e54f7fd0cb0" translate="yes" xml:space="preserve">
          <source>Set the record separator for unaligned output to a zero byte. This is useful for interfacing, for example, with &lt;code&gt;xargs -0&lt;/code&gt;. This is equivalent to &lt;code&gt;\pset recordsep_zero&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="930ef6885c00cc97435a715386680dcde7714694" translate="yes" xml:space="preserve">
          <source>Set the referencing column(s) to null.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d9cd2328de0ac3ebe9aaea25390e3d3b8a5586e" translate="yes" xml:space="preserve">
          <source>Set the referencing column(s) to their default values. (There must be a row in the referenced table matching the default values, if they are not null, or the operation will fail.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ab8a3ed57ed5cc7dcd55edbdf7b03e75089bdff" translate="yes" xml:space="preserve">
          <source>Set the schema search path:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2e8112fccc0d9b0690c85d167011ecb3d68df74" translate="yes" xml:space="preserve">
          <source>Set the statistics-gathering target for an expression index:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c1a40c0a63382cbfde8c839977e818bedccccad" translate="yes" xml:space="preserve">
          <source>Set the style of date to traditional POSTGRES with &amp;ldquo;day before month&amp;rdquo; input convention:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83ff14acdf29bad9c0b8e0edf50b709bf2c57639" translate="yes" xml:space="preserve">
          <source>Set the time zone for Berkeley, California:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fcfc84885ac79cefce8ee11634afa4ff9a1e342" translate="yes" xml:space="preserve">
          <source>Set the time zone for Italy:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba6f75276f3a6ed816228af5900a7701f7509f56" translate="yes" xml:space="preserve">
          <source>Set the time zone to your local time zone (that is, the server's default value of &lt;code&gt;timezone&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c69df8586fe91a449a340c15070908c685ac07f" translate="yes" xml:space="preserve">
          <source>Set this database's session default for the specified configuration parameter to the given value. If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;DEFAULT&lt;/code&gt; or, equivalently, &lt;code&gt;RESET&lt;/code&gt; is used, the database-specific setting is removed, so the system-wide default setting will be inherited in new sessions. Use &lt;code&gt;RESET ALL&lt;/code&gt; to clear all database-specific settings. &lt;code&gt;SET FROM CURRENT&lt;/code&gt; saves the session's current value of the parameter as the database-specific value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68f5bcb6816068647c401920a5c1c25a3d69bf1c" translate="yes" xml:space="preserve">
          <source>Set this role's session default for the specified configuration parameter to the given value. If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;DEFAULT&lt;/code&gt; or, equivalently, &lt;code&gt;RESET&lt;/code&gt; is used, the role-specific variable setting is removed, so the role will inherit the system-wide default setting in new sessions. Use &lt;code&gt;RESET ALL&lt;/code&gt; to clear all role-specific settings. &lt;code&gt;SET FROM CURRENT&lt;/code&gt; saves the session's current value of the parameter as the role-specific value. If &lt;code&gt;IN DATABASE&lt;/code&gt; is specified, the configuration parameter is set or removed for the given role and database only.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c6a35312ef12da1fe2d822f8332fdc98e7c69d9" translate="yes" xml:space="preserve">
          <source>Set to 1 to make the connection between PostgreSQL and the LDAP server use TLS encryption. This uses the &lt;code&gt;StartTLS&lt;/code&gt; operation per RFC 4513. See also the &lt;code&gt;ldapscheme&lt;/code&gt; option for an alternative.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="683669090494412f70884ca6fb430512580817c6" translate="yes" xml:space="preserve">
          <source>Set to &lt;code&gt;ldaps&lt;/code&gt; to use LDAPS. This is a non-standard way of using LDAP over SSL, supported by some LDAP server implementations. See also the &lt;code&gt;ldaptls&lt;/code&gt; option for an alternative.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e660238c05164064387bf1a9d83bcf539151bd62" translate="yes" xml:space="preserve">
          <source>Set to correlation coefficient between index scan order and underlying table's order</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2330a55e7653c2a15d3ce13913d3523e6bfc30ad" translate="yes" xml:space="preserve">
          <source>Set to cost of index start-up processing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6182156409a90176ef213757ef2fcb929216fcc9" translate="yes" xml:space="preserve">
          <source>Set to index selectivity</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="220b564cf30074d79f0445248bd40d06d084fc32" translate="yes" xml:space="preserve">
          <source>Set to number of index leaf pages</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c98d7fe8a451d4163d65a6edb590b39ce4b61a5" translate="yes" xml:space="preserve">
          <source>Set to total cost of index processing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5359a9498756c3b228b42db08b2eda0230fec090" translate="yes" xml:space="preserve">
          <source>Set up continuous archiving from the primary to a WAL archive directory on the standby server. Ensure that &lt;a href=&quot;runtime-config-wal#GUC-ARCHIVE-MODE&quot;&gt;archive_mode&lt;/a&gt;, &lt;a href=&quot;runtime-config-wal#GUC-ARCHIVE-COMMAND&quot;&gt;archive_command&lt;/a&gt; and &lt;a href=&quot;runtime-config-wal#GUC-ARCHIVE-TIMEOUT&quot;&gt;archive_timeout&lt;/a&gt; are set appropriately on the primary (see &lt;a href=&quot;continuous-archiving#BACKUP-ARCHIVING-WAL&quot;&gt;Section 25.3.1&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f9ede509821bafb716f13390c574a64efb7c48b" translate="yes" xml:space="preserve">
          <source>Set up continuous archiving on the primary to an archive directory accessible from the standby, as described in &lt;a href=&quot;continuous-archiving&quot;&gt;Section 25.3&lt;/a&gt;. The archive location should be accessible from the standby even when the master is down, i.e. it should reside on the standby server itself or another trusted server, not on the master server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba3c1c98673b5e6457689ce72c3830f8e0271e7f" translate="yes" xml:space="preserve">
          <source>Set up primary and standby systems as nearly identical as possible, including two identical copies of PostgreSQL at the same release level.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2fcee7256a27aba62c3ac4f3a3e22e85e96077c" translate="yes" xml:space="preserve">
          <source>Set-Returning Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b0c1ea3def792585ed0dea855bd1a53e789d41d" translate="yes" xml:space="preserve">
          <source>Sets a name that identifies this database cluster (instance) for various purposes. The cluster name appears in the process title for all server processes in this cluster. Moreover, it is the default application name for a standby connection (see &lt;a href=&quot;runtime-config-replication#GUC-SYNCHRONOUS-STANDBY-NAMES&quot;&gt;synchronous_standby_names&lt;/a&gt;.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed735bd783061dca7982171b5c9ebe7a346a5c11" translate="yes" xml:space="preserve">
          <source>Sets a named run-time parameter. The configuration parameters supported by PostgreSQL are described in &lt;a href=&quot;https://www.postgresql.org/docs/12/runtime-config.html&quot;&gt;Chapter 19&lt;/a&gt;. Most of the other command line options are in fact short forms of such a parameter assignment. &lt;code&gt;-c&lt;/code&gt; can appear multiple times to set multiple parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31043e3327e97d20dfb6d1539baa1a874e2c002d" translate="yes" xml:space="preserve">
          <source>Sets a named run-time parameter; a shorter form of &lt;code&gt;-c&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5da8c217bb1dba6c6d867dd666bfa4ff9e021ba" translate="yes" xml:space="preserve">
          <source>Sets an external command to be invoked when a passphrase for decrypting an SSL file such as a private key needs to be obtained. By default, this parameter is empty, which means the built-in prompting mechanism is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc6ce3b991bc5b15c28df298e7bc5c83c4e57c95" translate="yes" xml:space="preserve">
          <source>Sets checkpoint mode to fast (immediate) or spread (default) (see &lt;a href=&quot;continuous-archiving#BACKUP-LOWLEVEL-BASE-BACKUP&quot;&gt;Section 25.3.3&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a78247a7e33823edc1dad3d6f55aca8c9cf244e9" translate="yes" xml:space="preserve">
          <source>Sets how binary values are to be encoded in XML. This applies for example when &lt;code&gt;bytea&lt;/code&gt; values are converted to XML by the functions &lt;code&gt;xmlelement&lt;/code&gt; or &lt;code&gt;xmlforest&lt;/code&gt;. Possible values are &lt;code&gt;base64&lt;/code&gt; and &lt;code&gt;hex&lt;/code&gt;, which are both defined in the XML Schema standard. The default is &lt;code&gt;base64&lt;/code&gt;. For further information about XML-related functions, see &lt;a href=&quot;functions-xml&quot;&gt;Section 9.14&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15a96440e720528fbfdee2a4bdf9de98f4038bad" translate="yes" xml:space="preserve">
          <source>Sets maximum number of concurrent connections that can be made to this database. -1 means no limit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a0e551e8702d55f0e306d4663110fa615f5d1aa" translate="yes" xml:space="preserve">
          <source>Sets or resets a view option. Currently supported options are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="679b9629c4460c677f4963908686e11816d4c62f" translate="yes" xml:space="preserve">
          <source>Sets or toggles expanded table formatting mode. As such it is equivalent to &lt;code&gt;\pset expanded&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1167314e9da9165a4ecfbeaf5207efeb06fbb7ff" translate="yes" xml:space="preserve">
          <source>Sets the access permissions of the Unix-domain socket(s). Unix-domain sockets use the usual Unix file system permission set. The parameter value is expected to be a numeric mode specified in the format accepted by the &lt;code&gt;chmod&lt;/code&gt; and &lt;code&gt;umask&lt;/code&gt; system calls. (To use the customary octal format the number must start with a &lt;code&gt;0&lt;/code&gt; (zero).)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a6f469f1d1f928ad6a1d54c66c5b13a6529fbff" translate="yes" xml:space="preserve">
          <source>Sets the amount of memory the database server uses for shared memory buffers. The default is typically 128 megabytes (&lt;code&gt;128MB&lt;/code&gt;), but might be less if your kernel settings will not support it (as determined during initdb). This setting must be at least 128 kilobytes. However, settings significantly higher than the minimum are usually needed for good performance. If this value is specified without units, it is taken as blocks, that is &lt;code&gt;BLCKSZ&lt;/code&gt; bytes, typically 8kB. (Non-default values of &lt;code&gt;BLCKSZ&lt;/code&gt; change the minimum value.) This parameter can only be set at server start.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c11997d5801d5d90ca41a32aba2e1420ec14bb67" translate="yes" xml:space="preserve">
          <source>Sets the border drawing style for the &lt;code&gt;unicode&lt;/code&gt; line style to one of &lt;code&gt;single&lt;/code&gt; or &lt;code&gt;double&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddca1c468c89d3c635fe6142fe9c8ec3e8bfb309" translate="yes" xml:space="preserve">
          <source>Sets the border line drawing style to one of &lt;code&gt;ascii&lt;/code&gt;, &lt;code&gt;old-ascii&lt;/code&gt;, or &lt;code&gt;unicode&lt;/code&gt;. Unique abbreviations are allowed. (That would mean one letter is enough.) The default setting is &lt;code&gt;ascii&lt;/code&gt;. This option only affects the &lt;code&gt;aligned&lt;/code&gt; and &lt;code&gt;wrapped&lt;/code&gt; output formats.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccf918125330a91b0b053e186744cbdc511c1139" translate="yes" xml:space="preserve">
          <source>Sets the client character set encoding. Without an argument, this command shows the current encoding.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ca3459955f1a2d16536b1e1a6629645bad3442f" translate="yes" xml:space="preserve">
          <source>Sets the client-side encoding (character set). The default is to use the database encoding. The character sets supported by the PostgreSQL server are described in &lt;a href=&quot;multibyte#MULTIBYTE-CHARSET-SUPPORTED&quot;&gt;Section 23.3.1&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="101420fb1bdd363bfb4fc74209fc3ce35a1f2232" translate="yes" xml:space="preserve">
          <source>Sets the collection of time zone abbreviations that will be accepted by the server for datetime input. The default is &lt;code&gt;'Default'&lt;/code&gt;, which is a collection that works in most of the world; there are also &lt;code&gt;'Australia'&lt;/code&gt; and &lt;code&gt;'India'&lt;/code&gt;, and other collections can be defined for a particular installation. See &lt;a href=&quot;datetime-config-files&quot;&gt;Section B.4&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d2d6fab3f45f53eef51a7610b019e27ca0455e3" translate="yes" xml:space="preserve">
          <source>Sets the column drawing style for the &lt;code&gt;unicode&lt;/code&gt; line style to one of &lt;code&gt;single&lt;/code&gt; or &lt;code&gt;double&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="427af7ca184d1754159de0f7314e9d25355f3e91" translate="yes" xml:space="preserve">
          <source>Sets the current similarity threshold that is used by the &lt;code&gt;%&lt;/code&gt; operator. The threshold must be between 0 and 1 (default is 0.3).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b140843aaa99b7a0771486bfccf71022252d8ea5" translate="yes" xml:space="preserve">
          <source>Sets the current similarity threshold that is used by the &lt;code&gt;%&lt;/code&gt; operator. The threshold must be between 0 and 1 (default is 0.3). Returns the same value passed in (&lt;em&gt;deprecated&lt;/em&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb3fcef8539dc55176e548b2fc3a9288bdd92da4" translate="yes" xml:space="preserve">
          <source>Sets the current strict word similarity threshold that is used by the &lt;code&gt;&amp;lt;&amp;lt;%&lt;/code&gt; and &lt;code&gt;%&amp;gt;&amp;gt;&lt;/code&gt; operators. The threshold must be between 0 and 1 (default is 0.5).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90e66a2fef8e334523508ce94ca84f7873e520fe" translate="yes" xml:space="preserve">
          <source>Sets the current word similarity threshold that is used by the &lt;code&gt;&amp;lt;%&lt;/code&gt; and &lt;code&gt;%&amp;gt;&lt;/code&gt; operators. The threshold must be between 0 and 1 (default is 0.6).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf67a99f64dcda3530942c13f616f4059128e0ee" translate="yes" xml:space="preserve">
          <source>Sets the debug level. The higher this value is set, the more debugging output is written to the server log. Values are from 1 to 5. It is also possible to pass &lt;code&gt;-d 0&lt;/code&gt; for a specific session, which will prevent the server log level of the parent &lt;code&gt;postgres&lt;/code&gt; process from being propagated to this session.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1d3d71e9ac2216b846e079b3b77a36ef85e95c4" translate="yes" xml:space="preserve">
          <source>Sets the default date style to &amp;ldquo;European&amp;rdquo;, that is &lt;code&gt;DMY&lt;/code&gt; ordering of input date fields. This also causes the day to be printed before the month in certain date output formats. See &lt;a href=&quot;datatype-datetime&quot;&gt;Section 8.5&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06b8835c9925b9c88a1677189417ca7070f5914d" translate="yes" xml:space="preserve">
          <source>Sets the default locale for the database cluster. If this option is not specified, the locale is inherited from the environment that &lt;code&gt;initdb&lt;/code&gt; runs in. Locale support is described in &lt;a href=&quot;locale&quot;&gt;Section 23.1&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51c091ced8eaab5eee9ba74488a133cd6ae8630c" translate="yes" xml:space="preserve">
          <source>Sets the default statistics target for table columns without a column-specific target set via &lt;code&gt;ALTER TABLE SET STATISTICS&lt;/code&gt;. Larger values increase the time needed to do &lt;code&gt;ANALYZE&lt;/code&gt;, but might improve the quality of the planner's estimates. The default is 100. For more information on the use of statistics by the PostgreSQL query planner, refer to &lt;a href=&quot;planner-stats&quot;&gt;Section 14.2&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29f7d62c6b1f3372d7f449e1d8c27e26ee5c3430" translate="yes" xml:space="preserve">
          <source>Sets the default text search configuration. See &lt;a href=&quot;runtime-config-client#GUC-DEFAULT-TEXT-SEARCH-CONFIG&quot;&gt;default_text_search_config&lt;/a&gt; for further information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab4ee0bd00aa149c3079a604b266282122001246" translate="yes" xml:space="preserve">
          <source>Sets the directory to store temporary statistics data in. This can be a path relative to the data directory or an absolute path. The default is &lt;code&gt;pg_stat_tmp&lt;/code&gt;. Pointing this at a RAM-based file system will decrease physical I/O requirements and can lead to improved performance. This parameter can only be set in the &lt;code&gt;postgresql.conf&lt;/code&gt; file or on the server command line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5de41f7a43d918ac8425108d9af6484110715198" translate="yes" xml:space="preserve">
          <source>Sets the display format for date and time values, as well as the rules for interpreting ambiguous date input values. For historical reasons, this variable contains two independent components: the output format specification (&lt;code&gt;ISO&lt;/code&gt;, &lt;code&gt;Postgres&lt;/code&gt;, &lt;code&gt;SQL&lt;/code&gt;, or &lt;code&gt;German&lt;/code&gt;) and the input/output specification for year/month/day ordering (&lt;code&gt;DMY&lt;/code&gt;, &lt;code&gt;MDY&lt;/code&gt;, or &lt;code&gt;YMD&lt;/code&gt;). These can be set separately or together. The keywords &lt;code&gt;Euro&lt;/code&gt; and &lt;code&gt;European&lt;/code&gt; are synonyms for &lt;code&gt;DMY&lt;/code&gt;; the keywords &lt;code&gt;US&lt;/code&gt;, &lt;code&gt;NonEuro&lt;/code&gt;, and &lt;code&gt;NonEuropean&lt;/code&gt; are synonyms for &lt;code&gt;MDY&lt;/code&gt;. See &lt;a href=&quot;datatype-datetime&quot;&gt;Section 8.5&lt;/a&gt; for more information. The built-in default is &lt;code&gt;ISO, MDY&lt;/code&gt;, but initdb will initialize the configuration file with a setting that corresponds to the behavior of the chosen &lt;code&gt;lc_time&lt;/code&gt; locale.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58f48ffade96607de7baf0ad73b8b8a85d198fbe" translate="yes" xml:space="preserve">
          <source>Sets the display format for interval values. The value &lt;code&gt;sql_standard&lt;/code&gt; will produce output matching SQL standard interval literals. The value &lt;code&gt;postgres&lt;/code&gt; (which is the default) will produce output matching PostgreSQL releases prior to 8.4 when the &lt;a href=&quot;runtime-config-client#GUC-DATESTYLE&quot;&gt;DateStyle&lt;/a&gt; parameter was set to &lt;code&gt;ISO&lt;/code&gt;. The value &lt;code&gt;postgres_verbose&lt;/code&gt; will produce output matching PostgreSQL releases prior to 8.4 when the &lt;code&gt;DateStyle&lt;/code&gt; parameter was set to non-&lt;code&gt;ISO&lt;/code&gt; output. The value &lt;code&gt;iso_8601&lt;/code&gt; will produce output matching the time interval &amp;ldquo;format with designators&amp;rdquo; defined in section 4.4.3.2 of ISO 8601.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a20dec33eef22411e9b425e2640de61886335226" translate="yes" xml:space="preserve">
          <source>Sets the environment variable &lt;code&gt;name&lt;/code&gt; to &lt;code&gt;value&lt;/code&gt;, or if the &lt;code&gt;value&lt;/code&gt; is not supplied, unsets the environment variable. Example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="190bfe6a04ad011d88e91ad5c787ffb49764249c" translate="yes" xml:space="preserve">
          <source>Sets the field separator for unaligned query output. The default is the vertical bar (&lt;code&gt;|&lt;/code&gt;). It is equivalent to &lt;code&gt;\pset fieldsep&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4f305ecb1e8b3a8014c6025983d81717acb3fea" translate="yes" xml:space="preserve">
          <source>Sets the field separator to use in unaligned output format to a zero byte.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9bd0c99ab221f4b5cce5fa4dcdbdf55e4b30001" translate="yes" xml:space="preserve">
          <source>Sets the header drawing style for the &lt;code&gt;unicode&lt;/code&gt; line style to one of &lt;code&gt;single&lt;/code&gt; or &lt;code&gt;double&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61676b650256c9e48818ba185a4d7c07cedcd9dd" translate="yes" xml:space="preserve">
          <source>Sets the internal seed for the random number generator (the function &lt;code&gt;random&lt;/code&gt;). Allowed values are floating-point numbers between -1 and 1, which are then multiplied by 2&lt;sup&gt;31&lt;/sup&gt;-1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="647334bfd6eb7d1d85a2abc8c5d1eb68432c393b" translate="yes" xml:space="preserve">
          <source>Sets the label for the backup. If none is specified, a default value of &amp;ldquo;&lt;code&gt;pg_basebackup base backup&lt;/code&gt;&amp;rdquo; will be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fca2623008438b82b0df89fa815664dd1ab59762" translate="yes" xml:space="preserve">
          <source>Sets the language in which messages are displayed. Acceptable values are system-dependent; see &lt;a href=&quot;locale&quot;&gt;Section 23.1&lt;/a&gt; for more information. If this variable is set to the empty string (which is the default) then the value is inherited from the execution environment of the server in a system-dependent way.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f58b8840f32cb51a47487307892919cbbf1ec7b" translate="yes" xml:space="preserve">
          <source>Sets the locale to use for formatting dates and times, for example with the &lt;code&gt;to_char&lt;/code&gt; family of functions. Acceptable values are system-dependent; see &lt;a href=&quot;locale&quot;&gt;Section 23.1&lt;/a&gt; for more information. If this variable is set to the empty string (which is the default) then the value is inherited from the execution environment of the server in a system-dependent way.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36dc6691ab4feec6ef81633d17f3adde91e85fc9" translate="yes" xml:space="preserve">
          <source>Sets the locale to use for formatting monetary amounts, for example with the &lt;code&gt;to_char&lt;/code&gt; family of functions. Acceptable values are system-dependent; see &lt;a href=&quot;locale&quot;&gt;Section 23.1&lt;/a&gt; for more information. If this variable is set to the empty string (which is the default) then the value is inherited from the execution environment of the server in a system-dependent way.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5f798489e929f8e1b573ab1fae913b9e3237244" translate="yes" xml:space="preserve">
          <source>Sets the locale to use for formatting numbers, for example with the &lt;code&gt;to_char&lt;/code&gt; family of functions. Acceptable values are system-dependent; see &lt;a href=&quot;locale&quot;&gt;Section 23.1&lt;/a&gt; for more information. If this variable is set to the empty string (which is the default) then the value is inherited from the execution environment of the server in a system-dependent way.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2888edc2876a08d9cef6033805ad6d16c80fdc37" translate="yes" xml:space="preserve">
          <source>Sets the location of the Kerberos server key file. See &lt;a href=&quot;gssapi-auth&quot;&gt;Section 20.6&lt;/a&gt; for details. This parameter can only be set in the &lt;code&gt;postgresql.conf&lt;/code&gt; file or on the server command line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b10f255fd2eee6dc0fc02af3d1fe3c233206e1f5" translate="yes" xml:space="preserve">
          <source>Sets the maximum SSL/TLS protocol version to use. Valid values are as for &lt;a href=&quot;runtime-config-connection#GUC-SSL-MIN-PROTOCOL-VERSION&quot;&gt;ssl_min_protocol_version&lt;/a&gt;, with addition of an empty string, which allows any protocol version. The default is to allow any version. Setting the maximum protocol version is mainly useful for testing or if some component has issues working with a newer protocol.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09e9a95788728bb2c52e5c5666264c555f3b58da" translate="yes" xml:space="preserve">
          <source>Sets the maximum amount of memory to be used by a query operation (such as a sort or hash table) before writing to temporary disk files. If this value is specified without units, it is taken as kilobytes. The default value is four megabytes (&lt;code&gt;4MB&lt;/code&gt;). Note that for a complex query, several sort or hash operations might be running in parallel; each operation will be allowed to use as much memory as this value specifies before it starts to write data into temporary files. Also, several running sessions could be doing such operations concurrently. Therefore, the total memory used could be many times the value of &lt;code&gt;work_mem&lt;/code&gt;; it is necessary to keep this fact in mind when choosing the value. Sort operations are used for &lt;code&gt;ORDER BY&lt;/code&gt;, &lt;code&gt;DISTINCT&lt;/code&gt;, and merge joins. Hash tables are used in hash joins, hash-based aggregation, and hash-based processing of &lt;code&gt;IN&lt;/code&gt; subqueries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf7df0bb598dbc5d886a0bfa616392c0f6b9e9dc" translate="yes" xml:space="preserve">
          <source>Sets the maximum amount of memory used for temporary buffers within each database session. These are session-local buffers used only for access to temporary tables. If this value is specified without units, it is taken as blocks, that is &lt;code&gt;BLCKSZ&lt;/code&gt; bytes, typically 8kB. The default is eight megabytes (&lt;code&gt;8MB&lt;/code&gt;). (If &lt;code&gt;BLCKSZ&lt;/code&gt; is not 8kB, the default value scales proportionally to it.) This setting can be changed within individual sessions, but only before the first use of temporary tables within the session; subsequent attempts to change the value will have no effect on that session.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b238dcae0530019aa71ba04893255065ce2a75eb" translate="yes" xml:space="preserve">
          <source>Sets the maximum number of background processes that the system can support. This parameter can only be set at server start. The default is 8.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc86721860c86c00054caddc811c14f4bec785c4" translate="yes" xml:space="preserve">
          <source>Sets the maximum number of client connections that this server will accept. The default value of this parameter is chosen automatically by initdb. Specifying this option is equivalent to setting the &lt;a href=&quot;runtime-config-connection#GUC-MAX-CONNECTIONS&quot;&gt;max_connections&lt;/a&gt; configuration parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="debab47e934ebb882a2dcd5b3e8d15b9861eabec" translate="yes" xml:space="preserve">
          <source>Sets the maximum number of parallel workers that can be started by a single utility command. Currently, the only parallel utility command that supports the use of parallel workers is &lt;code&gt;CREATE INDEX&lt;/code&gt;, and only when building a B-tree index. Parallel workers are taken from the pool of processes established by &lt;a href=&quot;runtime-config-resource#GUC-MAX-WORKER-PROCESSES&quot;&gt;max_worker_processes&lt;/a&gt;, limited by &lt;a href=&quot;runtime-config-resource#GUC-MAX-PARALLEL-WORKERS&quot;&gt;max_parallel_workers&lt;/a&gt;. Note that the requested number of workers may not actually be available at run time. If this occurs, the utility operation will run with fewer workers than expected. The default value is 2. Setting this value to 0 disables the use of parallel workers by utility commands.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af96d1a1eaf1d9c2283b575d813d2dc98425a564" translate="yes" xml:space="preserve">
          <source>Sets the maximum number of simultaneously open files allowed to each server subprocess. The default is one thousand files. If the kernel is enforcing a safe per-process limit, you don't need to worry about this setting. But on some platforms (notably, most BSD systems), the kernel will allow individual processes to open many more files than the system can actually support if many processes all try to open that many files. If you find yourself seeing &amp;ldquo;Too many open files&amp;rdquo; failures, try reducing this setting. This parameter can only be set at server start.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="025e061fa08a60d41ce046d952f0b4c07bca9418" translate="yes" xml:space="preserve">
          <source>Sets the maximum number of transactions that can be in the &amp;ldquo;prepared&amp;rdquo; state simultaneously (see &lt;a href=&quot;sql-prepare-transaction&quot;&gt;PREPARE TRANSACTION&lt;/a&gt;). Setting this parameter to zero (which is the default) disables the prepared-transaction feature. This parameter can only be set at server start.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fa1dc4040c19ad52dfaf5872a4b49622cd52f7c" translate="yes" xml:space="preserve">
          <source>Sets the maximum number of workers that can be started by a single &lt;code&gt;Gather&lt;/code&gt; or &lt;code&gt;Gather Merge&lt;/code&gt; node. Parallel workers are taken from the pool of processes established by &lt;a href=&quot;runtime-config-resource#GUC-MAX-WORKER-PROCESSES&quot;&gt;max_worker_processes&lt;/a&gt;, limited by &lt;a href=&quot;runtime-config-resource#GUC-MAX-PARALLEL-WORKERS&quot;&gt;max_parallel_workers&lt;/a&gt;. Note that the requested number of workers may not actually be available at run time. If this occurs, the plan will run with fewer workers than expected, which may be inefficient. The default value is 2. Setting this value to 0 disables parallel query execution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="155702d6d50f2cff0b9a4dfa528f017610f80f8c" translate="yes" xml:space="preserve">
          <source>Sets the maximum number of workers that the system can support for parallel operations. The default value is 8. When increasing or decreasing this value, consider also adjusting &lt;a href=&quot;runtime-config-resource#GUC-MAX-PARALLEL-WORKERS-MAINTENANCE&quot;&gt;max_parallel_maintenance_workers&lt;/a&gt; and &lt;a href=&quot;runtime-config-resource#GUC-MAX-PARALLEL-WORKERS-PER-GATHER&quot;&gt;max_parallel_workers_per_gather&lt;/a&gt;. Also, note that a setting for this value which is higher than &lt;a href=&quot;runtime-config-resource#GUC-MAX-WORKER-PROCESSES&quot;&gt;max_worker_processes&lt;/a&gt; will have no effect, since parallel workers are taken from the pool of worker processes established by that setting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb8251d8b842feccb9f6584d9b39c67f02c7e6ac" translate="yes" xml:space="preserve">
          <source>Sets the maximum size of a GIN index's pending list, which is used when &lt;code&gt;fastupdate&lt;/code&gt; is enabled. If the list grows larger than this maximum size, it is cleaned up by moving the entries in it to the index's main GIN data structure in bulk. If this value is specified without units, it is taken as kilobytes. The default is four megabytes (&lt;code&gt;4MB&lt;/code&gt;). This setting can be overridden for individual GIN indexes by changing index storage parameters. See &lt;a href=&quot;gin-implementation#GIN-FAST-UPDATE&quot;&gt;Section 66.4.1&lt;/a&gt; and &lt;a href=&quot;gin-tips&quot;&gt;Section 66.5&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fef49339de480b7d24f8a4f307af2d786eb4a359" translate="yes" xml:space="preserve">
          <source>Sets the minimum SSL/TLS protocol version to use. Valid values are currently: &lt;code&gt;TLSv1&lt;/code&gt;, &lt;code&gt;TLSv1.1&lt;/code&gt;, &lt;code&gt;TLSv1.2&lt;/code&gt;, &lt;code&gt;TLSv1.3&lt;/code&gt;. Older versions of the OpenSSL library do not support all values; an error will be raised if an unsupported setting is chosen. Protocol versions before TLS 1.0, namely SSL version 2 and 3, are always disabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f97ae0260e3c3fd55b1ee24f2c37bb1286524f6" translate="yes" xml:space="preserve">
          <source>Sets the minimum amount of index data that must be scanned in order for a parallel scan to be considered. Note that a parallel index scan typically won't touch the entire index; it is the number of pages which the planner believes will actually be touched by the scan which is relevant. If this value is specified without units, it is taken as blocks, that is &lt;code&gt;BLCKSZ&lt;/code&gt; bytes, typically 8kB. The default is 512 kilobytes (&lt;code&gt;512kB&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e775314fe6483204313c3388bb03f121406fcfa" translate="yes" xml:space="preserve">
          <source>Sets the minimum amount of table data that must be scanned in order for a parallel scan to be considered. For a parallel sequential scan, the amount of table data scanned is always equal to the size of the table, but when indexes are used the amount of table data scanned will normally be less. If this value is specified without units, it is taken as blocks, that is &lt;code&gt;BLCKSZ&lt;/code&gt; bytes, typically 8kB. The default is 8 megabytes (&lt;code&gt;8MB&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f505daff682e43751f274409c725e39b2063304a" translate="yes" xml:space="preserve">
          <source>Sets the minimum amount of time that a query snapshot can be used without risk of a &amp;ldquo;snapshot too old&amp;rdquo; error occurring when using the snapshot. Data that has been dead for longer than this threshold is allowed to be vacuumed away. This can help prevent bloat in the face of snapshots which remain in use for a long time. To prevent incorrect results due to cleanup of data which would otherwise be visible to the snapshot, an error is generated when the snapshot is older than this threshold and the snapshot is used to read a page which has been modified since the snapshot was built.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="639d71177255894af48e7cc59b6237adb1a67d10" translate="yes" xml:space="preserve">
          <source>Sets the number of concurrent disk I/O operations that PostgreSQL expects can be executed simultaneously. Raising this value will increase the number of I/O operations that any individual PostgreSQL session attempts to initiate in parallel. The allowed range is 1 to 1000, or zero to disable issuance of asynchronous I/O requests. Currently, this setting only affects bitmap heap scans.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8a4b8635581c10272ed56e26835a20b76551d62" translate="yes" xml:space="preserve">
          <source>Sets the number of shared buffers for use by the server processes. The default value of this parameter is chosen automatically by initdb. Specifying this option is equivalent to setting the &lt;a href=&quot;runtime-config-resource#GUC-SHARED-BUFFERS&quot;&gt;shared_buffers&lt;/a&gt; configuration parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f522a397d47fccbd22581cdfc6bb6d4f77232d4d" translate="yes" xml:space="preserve">
          <source>Sets the output format for values of type &lt;code&gt;bytea&lt;/code&gt;. Valid values are &lt;code&gt;hex&lt;/code&gt; (the default) and &lt;code&gt;escape&lt;/code&gt; (the traditional PostgreSQL format). See &lt;a href=&quot;datatype-binary&quot;&gt;Section 8.4&lt;/a&gt; for more information. The &lt;code&gt;bytea&lt;/code&gt; type always accepts both formats on input, regardless of this setting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49dd5aeef046daa87cfb1678f36acfad50707ec8" translate="yes" xml:space="preserve">
          <source>Sets the output format to one of &lt;code&gt;aligned&lt;/code&gt;, &lt;code&gt;asciidoc&lt;/code&gt;, &lt;code&gt;csv&lt;/code&gt;, &lt;code&gt;html&lt;/code&gt;, &lt;code&gt;latex&lt;/code&gt;, &lt;code&gt;latex-longtable&lt;/code&gt;, &lt;code&gt;troff-ms&lt;/code&gt;, &lt;code&gt;unaligned&lt;/code&gt;, or &lt;code&gt;wrapped&lt;/code&gt;. Unique abbreviations are allowed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="678f9ce990e8b695092b47c67490b2121aa837bd" translate="yes" xml:space="preserve">
          <source>Sets the owning group of the Unix-domain socket(s). (The owning user of the sockets is always the user that starts the server.) In combination with the parameter &lt;code&gt;unix_socket_permissions&lt;/code&gt; this can be used as an additional access control mechanism for Unix-domain connections. By default this is the empty string, which uses the default group of the server user. This parameter can only be set at server start.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eade538eea18ba5eb439351980c9800215ed5677" translate="yes" xml:space="preserve">
          <source>Sets the planner's assumption about the effective size of the disk cache that is available to a single query. This is factored into estimates of the cost of using an index; a higher value makes it more likely index scans will be used, a lower value makes it more likely sequential scans will be used. When setting this parameter you should consider both PostgreSQL's shared buffers and the portion of the kernel's disk cache that will be used for PostgreSQL data files, though some data might exist in both places. Also, take into account the expected number of concurrent queries on different tables, since they will have to share the available space. This parameter has no effect on the size of shared memory allocated by PostgreSQL, nor does it reserve kernel disk cache; it is used only for estimation purposes. The system also does not assume data remains in the disk cache between queries. If this value is specified without units, it is taken as blocks, that is &lt;code&gt;BLCKSZ&lt;/code&gt; bytes, typically 8kB. The default is 4 gigabytes (&lt;code&gt;4GB&lt;/code&gt;). (If &lt;code&gt;BLCKSZ&lt;/code&gt; is not 8kB, the default value scales proportionally to it.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="215bba23753ba431ea9d47a1344bfbb484f42418" translate="yes" xml:space="preserve">
          <source>Sets the planner's estimate of the cost of a disk page fetch that is part of a series of sequential fetches. The default is 1.0. This value can be overridden for tables and indexes in a particular tablespace by setting the tablespace parameter of the same name (see &lt;a href=&quot;sql-altertablespace&quot;&gt;ALTER TABLESPACE&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f06fe60b01aef7c49d720f83144298118281440b" translate="yes" xml:space="preserve">
          <source>Sets the planner's estimate of the cost of a non-sequentially-fetched disk page. The default is 4.0. This value can be overridden for tables and indexes in a particular tablespace by setting the tablespace parameter of the same name (see &lt;a href=&quot;sql-altertablespace&quot;&gt;ALTER TABLESPACE&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ff883f52213020414cafe7fe8a8e6096a2e5d5d" translate="yes" xml:space="preserve">
          <source>Sets the planner's estimate of the cost of launching parallel worker processes. The default is 1000.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66e5badbac5fd1bbd7672e6dd40f7f2b48faf215" translate="yes" xml:space="preserve">
          <source>Sets the planner's estimate of the cost of processing each index entry during an index scan. The default is 0.005.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01cc41364b70160c8f70e1cc9440a01907623c28" translate="yes" xml:space="preserve">
          <source>Sets the planner's estimate of the cost of processing each operator or function executed during a query. The default is 0.0025.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="441825be2111d888c818bbe5ef23b877ca2dd83f" translate="yes" xml:space="preserve">
          <source>Sets the planner's estimate of the cost of processing each row during a query. The default is 0.01.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="430e7f5d6b274bc96b06ad9a3e320e52dfe7ab39" translate="yes" xml:space="preserve">
          <source>Sets the planner's estimate of the cost of transferring one tuple from a parallel worker process to another process. The default is 0.1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75e961f550770321a47a55eee42c87dc47d89649" translate="yes" xml:space="preserve">
          <source>Sets the planner's estimate of the fraction of a cursor's rows that will be retrieved. The default is 0.1. Smaller values of this setting bias the planner towards using &amp;ldquo;fast start&amp;rdquo; plans for cursors, which will retrieve the first few rows quickly while perhaps taking a long time to fetch all rows. Larger values put more emphasis on the total estimated time. At the maximum setting of 1.0, cursors are planned exactly like regular queries, considering only the total estimated time and not how soon the first rows might be delivered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b74cc7eea094402f1d8f572b15430c9a3f23366e" translate="yes" xml:space="preserve">
          <source>Sets the psql variable &lt;code&gt;name&lt;/code&gt; to &lt;code&gt;value&lt;/code&gt;, or if more than one value is given, to the concatenation of all of them. If only one argument is given, the variable is set to an empty-string value. To unset a variable, use the &lt;code&gt;\unset&lt;/code&gt; command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3cc427ac8e9c4b356d6e649d2678371c55621cd" translate="yes" xml:space="preserve">
          <source>Sets the query cost above which JIT compilation applies expensive optimizations. Such optimization adds planning time, but can improve execution speed. It is not meaningful to set this to less than &lt;code&gt;jit_above_cost&lt;/code&gt;, and it is unlikely to be beneficial to set it to more than &lt;code&gt;jit_inline_above_cost&lt;/code&gt;. Setting this to &lt;code&gt;-1&lt;/code&gt; disables expensive optimizations. The default is &lt;code&gt;500000&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac2dd9f4841a542f63ff04be55fe948629592e5a" translate="yes" xml:space="preserve">
          <source>Sets the query cost above which JIT compilation attempts to inline functions and operators. Inlining adds planning time, but can improve execution speed. It is not meaningful to set this to less than &lt;code&gt;jit_above_cost&lt;/code&gt;. Setting this to &lt;code&gt;-1&lt;/code&gt; disables inlining. The default is &lt;code&gt;500000&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02063082bcb76821ede05005f821c8cf0e62cee9" translate="yes" xml:space="preserve">
          <source>Sets the query cost above which JIT compilation is activated, if enabled (see &lt;a href=&quot;https://www.postgresql.org/docs/12/jit.html&quot;&gt;Chapter 31&lt;/a&gt;). Performing JIT costs planning time but can accelerate query execution. Setting this to &lt;code&gt;-1&lt;/code&gt; disables JIT compilation. The default is &lt;code&gt;100000&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02cb702a94c659f0e96017a2835d5c3582132b90" translate="yes" xml:space="preserve">
          <source>Sets the realm to match user principal names against. If this parameter is set, only users of that realm will be accepted. If it is not set, users of any realm can connect, subject to whatever user name mapping is done.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1da8e17872d56e3b32b3439f187fa84edb464ed" translate="yes" xml:space="preserve">
          <source>Sets the record separator to use in unaligned output format to a zero byte.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5606d630619350ef9abeda5c764ac4222147ef4b" translate="yes" xml:space="preserve">
          <source>Sets the role's password. (A password is only of use for roles having the &lt;code&gt;LOGIN&lt;/code&gt; attribute, but you can nonetheless define one for roles without it.) If you do not plan to use password authentication you can omit this option. If no password is specified, the password will be set to null and password authentication will always fail for that user. A null password can optionally be written explicitly as &lt;code&gt;PASSWORD NULL&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7024cf8010aece3606a76f8e37e44d42076b1f2" translate="yes" xml:space="preserve">
          <source>Sets the string to be printed in place of a null value. The default is to print nothing, which can easily be mistaken for an empty string. For example, one might prefer &lt;code&gt;\pset null '(null)'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d0d5999942c3fce4dd3df1e49ffecfb914beb30" translate="yes" xml:space="preserve">
          <source>Sets the table title for any subsequently printed tables. This can be used to give your output descriptive tags. If no &lt;code&gt;value&lt;/code&gt; is given, the title is unset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9e1af3b2fb689d9e53f574ca3df72726aa01880" translate="yes" xml:space="preserve">
          <source>Sets the target width for the &lt;code&gt;wrapped&lt;/code&gt; format, and also the width limit for determining whether output is wide enough to require the pager or switch to the vertical display in expanded auto mode. Zero (the default) causes the target width to be controlled by the environment variable &lt;code&gt;COLUMNS&lt;/code&gt;, or the detected screen width if &lt;code&gt;COLUMNS&lt;/code&gt; is not set. In addition, if &lt;code&gt;columns&lt;/code&gt; is zero then the &lt;code&gt;wrapped&lt;/code&gt; format only affects screen output. If &lt;code&gt;columns&lt;/code&gt; is nonzero then file and pipe output is wrapped to that width as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9418304bf83c8059c2c09a5f3ac4f6b29f3fb74e" translate="yes" xml:space="preserve">
          <source>Sets the time zone for displaying and interpreting time stamps. The built-in default is &lt;code&gt;GMT&lt;/code&gt;, but that is typically overridden in &lt;code&gt;postgresql.conf&lt;/code&gt;; initdb will install a setting there corresponding to its system environment. See &lt;a href=&quot;datatype-datetime#DATATYPE-TIMEZONES&quot;&gt;Section 8.5.3&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e16c7d7ee9ffcd6202a7613a26919ce859e9812" translate="yes" xml:space="preserve">
          <source>Sets the time zone used for timestamps written in the server log. Unlike &lt;a href=&quot;runtime-config-client#GUC-TIMEZONE&quot;&gt;TimeZone&lt;/a&gt;, this value is cluster-wide, so that all sessions will report timestamps consistently. The built-in default is &lt;code&gt;GMT&lt;/code&gt;, but that is typically overridden in &lt;code&gt;postgresql.conf&lt;/code&gt;; initdb will install a setting there corresponding to its system environment. See &lt;a href=&quot;datatype-datetime#DATATYPE-TIMEZONES&quot;&gt;Section 8.5.3&lt;/a&gt; for more information. This parameter can only be set in the &lt;code&gt;postgresql.conf&lt;/code&gt; file or on the server command line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1e9be4ad78776b39da3bb8c7ea45eba8f1ad12a" translate="yes" xml:space="preserve">
          <source>Sets the title of any tables being printed as the result of a query or unset any such title. This command is equivalent to &lt;code&gt;\pset title title&lt;/code&gt;. (The name of this command derives from &amp;ldquo;caption&amp;rdquo;, as it was previously only used to set the caption in an HTML table.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13c4b9ea31ba093e5244fa2e73ddd78a559c5130" translate="yes" xml:space="preserve">
          <source>Sets the weak input mode (returns new setting)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88768dee379947c4f7e08aaa204b29d2e74dfb86" translate="yes" xml:space="preserve">
          <source>Sets up initial security labels for all objects within the current database. The argument may be NULL, or the name of a specfile to be used as alternative of the system default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dab2b0c24fa44268a1bd5bc3db6cefa59a5e85b0" translate="yes" xml:space="preserve">
          <source>Sets variable &lt;code&gt;varname&lt;/code&gt; to a value calculated from &lt;code&gt;expression&lt;/code&gt;. The expression may contain the &lt;code&gt;NULL&lt;/code&gt; constant, Boolean constants &lt;code&gt;TRUE&lt;/code&gt; and &lt;code&gt;FALSE&lt;/code&gt;, integer constants such as &lt;code&gt;5432&lt;/code&gt;, double constants such as &lt;code&gt;3.14159&lt;/code&gt;, references to variables &lt;code&gt;:&lt;/code&gt;&lt;code&gt;variablename&lt;/code&gt;, &lt;a href=&quot;pgbench#PGBENCH-BUILTIN-OPERATORS&quot;&gt;operators&lt;/a&gt; with their usual SQL precedence and associativity, &lt;a href=&quot;pgbench#PGBENCH-BUILTIN-FUNCTIONS&quot;&gt;function calls&lt;/a&gt;, SQL &lt;a href=&quot;functions-conditional#FUNCTIONS-CASE&quot;&gt;&lt;code&gt;CASE&lt;/code&gt; generic conditional expressions&lt;/a&gt; and parentheses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f924dad559be5e0c9b0095784ed5f3ccd6066315" translate="yes" xml:space="preserve">
          <source>Sets variable &lt;code&gt;varname&lt;/code&gt; to the result of the shell command &lt;code&gt;command&lt;/code&gt; with the given &lt;code&gt;argument&lt;/code&gt;(s). The command must return an integer value through its standard output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06a831dd90f4fcce0caf06c98d85b86d9781c861" translate="yes" xml:space="preserve">
          <source>Sets whether &lt;code&gt;DOCUMENT&lt;/code&gt; or &lt;code&gt;CONTENT&lt;/code&gt; is implicit when converting between XML and character string values. See &lt;a href=&quot;datatype-xml&quot;&gt;Section 8.13&lt;/a&gt; for a description of this. Valid values are &lt;code&gt;DOCUMENT&lt;/code&gt; and &lt;code&gt;CONTENT&lt;/code&gt;. The default is &lt;code&gt;CONTENT&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="333c8849db9af052371db80618770b64f3dc1314" translate="yes" xml:space="preserve">
          <source>Sets whether GSSAPI user names should be treated case-insensitively. The default is &lt;code&gt;off&lt;/code&gt; (case sensitive). This parameter can only be set in the &lt;code&gt;postgresql.conf&lt;/code&gt; file or on the server command line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47dc609161a8bb03371f6441c5ee3ee0b0a6fe41" translate="yes" xml:space="preserve">
          <source>Setting &lt;code&gt;commit_delay&lt;/code&gt; adds a time delay before a WAL flush is initiated. This can improve group commit throughput by allowing a larger number of transactions to commit via a single WAL flush, if system load is high enough that additional transactions become ready to commit within the given interval. However, it also increases latency by up to the &lt;code&gt;commit_delay&lt;/code&gt; for each WAL flush. Because the delay is just wasted if no other transactions become ready to commit, a delay is only performed if at least &lt;code&gt;commit_siblings&lt;/code&gt; other transactions are active when a flush is about to be initiated. Also, no delays are performed if &lt;code&gt;fsync&lt;/code&gt; is disabled. If this value is specified without units, it is taken as microseconds. The default &lt;code&gt;commit_delay&lt;/code&gt; is zero (no delay). Only superusers can change this setting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55f163c4026b369afdcf7bc41ff57f0a179c3fc4" translate="yes" xml:space="preserve">
          <source>Setting &lt;code&gt;lock_timeout&lt;/code&gt; in &lt;code&gt;postgresql.conf&lt;/code&gt; is not recommended because it would affect all sessions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5de84dde4ac09d0b73ef1551fcd1b6fb34265ef6" translate="yes" xml:space="preserve">
          <source>Setting &lt;code&gt;max_stack_depth&lt;/code&gt; higher than the actual kernel limit will mean that a runaway recursive function can crash an individual backend process. On platforms where PostgreSQL can determine the kernel limit, the server will not allow this variable to be set to an unsafe value. However, not all platforms provide the information, so caution is recommended in selecting a value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="280c0f486c1375fc10412fec06e31ca1f194f910" translate="yes" xml:space="preserve">
          <source>Setting &lt;code&gt;statement_timeout&lt;/code&gt; in &lt;code&gt;postgresql.conf&lt;/code&gt; is not recommended because it would affect all sessions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5cec1702484034fb224149bdce32ce0d06ff6eb" translate="yes" xml:space="preserve">
          <source>Setting &lt;code&gt;synchronous_commit&lt;/code&gt; to &lt;code&gt;remote_apply&lt;/code&gt; will cause each commit to wait until the current synchronous standbys report that they have replayed the transaction, making it visible to user queries. In simple cases, this allows for load balancing with causal consistency.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c638e32ab460b36192a8a3670d7ed6fc5ef48897" translate="yes" xml:space="preserve">
          <source>Setting &lt;code&gt;synchronous_commit&lt;/code&gt; to &lt;code&gt;remote_write&lt;/code&gt; will cause each commit to wait for confirmation that the standby has received the commit record and written it out to its own operating system, but not for the data to be flushed to disk on the standby. This setting provides a weaker guarantee of durability than &lt;code&gt;on&lt;/code&gt; does: the standby could lose the data in the event of an operating system crash, though not a PostgreSQL crash. However, it's a useful setting in practice because it can decrease the response time for the transaction. Data loss could only occur if both the primary and the standby crash and the database of the primary gets corrupted at the same time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58bb37c9c188c485a0fd527ed01ff2f5d42d9586" translate="yes" xml:space="preserve">
          <source>Setting Parameters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3deebc173c82b03c24ea5b544f3dfa1e2e6c2b6e" translate="yes" xml:space="preserve">
          <source>Setting a value for &lt;code&gt;parallel_workers&lt;/code&gt; via &lt;a href=&quot;sql-altertable&quot;&gt;ALTER TABLE&lt;/a&gt; directly controls how many parallel worker processes will be requested by a &lt;code&gt;CREATE INDEX&lt;/code&gt; against the table. This bypasses the cost model completely, and prevents &lt;code&gt;maintenance_work_mem&lt;/code&gt; from affecting how many parallel workers are requested. Setting &lt;code&gt;parallel_workers&lt;/code&gt; to 0 via &lt;code&gt;ALTER TABLE&lt;/code&gt; will disable parallel index builds on the table in all cases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="feb5c4ae5f778553cba809af284b054e9b9bf136" translate="yes" xml:space="preserve">
          <source>Setting file-system permissions only helps for Unix-socket connections. Local TCP/IP connections are not restricted by file-system permissions. Therefore, if you want to use file-system permissions for local security, remove the &lt;code&gt;host ... 127.0.0.1 ...&lt;/code&gt; line from &lt;code&gt;pg_hba.conf&lt;/code&gt;, or change it to a non-&lt;code&gt;trust&lt;/code&gt; authentication method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd50f0143fe2b357563572277fe9b73ebc378f80" translate="yes" xml:space="preserve">
          <source>Setting the &lt;code&gt;LEAKPROOF&lt;/code&gt; attribute on a function requires &lt;code&gt;install&lt;/code&gt; permission.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="424109d8edff1803029472e86b9b860cdc86e197" translate="yes" xml:space="preserve">
          <source>Setting the seed explicitly allows to reproduce a &lt;code&gt;pgbench&lt;/code&gt; run exactly, as far as random numbers are concerned. As the random state is managed per thread, this means the exact same &lt;code&gt;pgbench&lt;/code&gt; run for an identical invocation if there is one client per thread and there are no external or data dependencies. From a statistical viewpoint reproducing runs exactly is a bad idea because it can hide the performance variability or improve performance unduly, e.g. by hitting the same pages as a previous run. However, it may also be of great help for debugging, for instance re-running a tricky case which leads to an error. Use wisely.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a140ae3d48aebdb9dbb636e5572c996be1028f9" translate="yes" xml:space="preserve">
          <source>Setting this value to &lt;a href=&quot;runtime-config-query#GUC-GEQO-THRESHOLD&quot;&gt;geqo_threshold&lt;/a&gt; or more may trigger use of the GEQO planner, resulting in non-optimal plans. See &lt;a href=&quot;runtime-config-query#RUNTIME-CONFIG-QUERY-GEQO&quot;&gt;Section 19.7.3&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64eb45a8294e62b8b952a38285fef07ddf186ccf" translate="yes" xml:space="preserve">
          <source>Setting this value to &lt;code&gt;regress&lt;/code&gt; has all of the same effects as setting it to &lt;code&gt;on&lt;/code&gt; plus some additional effects that are intended to facilitate automated regression testing. Normally, messages from a parallel worker include a context line indicating that, but a setting of &lt;code&gt;regress&lt;/code&gt; suppresses this line so that the output is the same as in non-parallel execution. Also, the &lt;code&gt;Gather&lt;/code&gt; nodes added to plans by this setting are hidden in &lt;code&gt;EXPLAIN&lt;/code&gt; output so that the output matches what would be obtained if this setting were turned &lt;code&gt;off&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef1c09963cd9d1024c50bc537034add064157e7f" translate="yes" xml:space="preserve">
          <source>Setting this variable does not disable all security checks related to large objects &amp;mdash; only those for which the default behavior has changed in PostgreSQL 9.0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dfd406e86c501d612013ad1b39a50a94d711af9" translate="yes" xml:space="preserve">
          <source>Setting this variable to &lt;code&gt;on&lt;/code&gt; is equivalent to the command line option &lt;code&gt;-S&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96e74f5c79f4b7010d067a371cf639f4b9a5b740" translate="yes" xml:space="preserve">
          <source>Setting this variable to &lt;code&gt;on&lt;/code&gt; is equivalent to the command line option &lt;code&gt;-q&lt;/code&gt;. It is probably not too useful in interactive mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a7cab545f744602a3eb0eb4dc36411eb7e36891" translate="yes" xml:space="preserve">
          <source>Setting this variable to &lt;code&gt;on&lt;/code&gt; is equivalent to the command line option &lt;code&gt;-s&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de0a1efb5fb420f0c59eac94e6307c2a1df1ff4c" translate="yes" xml:space="preserve">
          <source>Settings provided in this way override those set via &lt;code&gt;postgresql.conf&lt;/code&gt; or &lt;code&gt;ALTER SYSTEM&lt;/code&gt;, so they cannot be changed globally without restarting the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63a647a2c75794bd5989eb828ac51dd0f38b4c1e" translate="yes" xml:space="preserve">
          <source>Several of the Boolean flags in &lt;code&gt;pg_class&lt;/code&gt; are maintained lazily: they are guaranteed to be true if that's the correct state, but may not be reset to false immediately when the condition is no longer true. For example, &lt;code&gt;relhasindex&lt;/code&gt; is set by &lt;code&gt;CREATE INDEX&lt;/code&gt;, but it is never cleared by &lt;code&gt;DROP INDEX&lt;/code&gt;. Instead, &lt;code&gt;VACUUM&lt;/code&gt; clears &lt;code&gt;relhasindex&lt;/code&gt; if it finds the table has no indexes. This arrangement avoids race conditions and improves concurrency.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ec3656aee808a47715f95baabbfbe025c9785bc" translate="yes" xml:space="preserve">
          <source>Several other applications exist that can provide secure tunnels using a procedure similar in concept to the one just described.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4042351a6d5c02c8dcd311ac414faef5a2d39735" translate="yes" xml:space="preserve">
          <source>Several predefined text search configurations are available, and you can create custom configurations easily. To facilitate management of text search objects, a set of SQL commands is available, and there are several psql commands that display information about text search objects (&lt;a href=&quot;textsearch-psql&quot;&gt;Section 12.10&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="737630e42a62c460c14d1fdef742a1ea8aa4971b" translate="yes" xml:space="preserve">
          <source>Several predefined views, listed in &lt;a href=&quot;monitoring-stats#MONITORING-STATS-DYNAMIC-VIEWS-TABLE&quot;&gt;Table 27.1&lt;/a&gt;, are available to show the current state of the system. There are also several other views, listed in &lt;a href=&quot;monitoring-stats#MONITORING-STATS-VIEWS-TABLE&quot;&gt;Table 27.2&lt;/a&gt;, available to show the results of statistics collection. Alternatively, one can build custom views using the underlying statistics functions, as discussed in &lt;a href=&quot;monitoring-stats#MONITORING-STATS-FUNCTIONS&quot;&gt;Section 27.2.3&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c46dc52cb0fd044935ca07ffb1115c2c1707436" translate="yes" xml:space="preserve">
          <source>Several restrictions apply to the definition of generated columns and tables involving generated columns:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea8dadc9bbe78dc1c6065234378727b1ccee99ab" translate="yes" xml:space="preserve">
          <source>Several settings are available for preloading shared libraries into the server, in order to load additional functionality or achieve performance benefits. For example, a setting of &lt;code&gt;'$libdir/mylib'&lt;/code&gt; would cause &lt;code&gt;mylib.so&lt;/code&gt; (or on some platforms, &lt;code&gt;mylib.sl&lt;/code&gt;) to be preloaded from the installation's standard library directory. The differences between the settings are when they take effect and what privileges are required to change them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de314fa0c9d9e359b633f2fdab4659c886fe5986" translate="yes" xml:space="preserve">
          <source>Severity</source>
          <target state="translated">Severity</target>
        </trans-unit>
        <trans-unit id="8382497862b5333e89d71eb83d6201f7edbc1ae1" translate="yes" xml:space="preserve">
          <source>Share/exclusive hash-bucket-level locks are used for read/write access. Locks are released after the whole bucket is processed. Bucket-level locks provide better concurrency than index-level ones, but deadlock is possible since the locks are held longer than one index operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="327854df6cd5176c2c4c283a7be52111f5c9d91c" translate="yes" xml:space="preserve">
          <source>Shared Disk Failover</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81204b5b8aa655d624ef594ceffa8bff9a8dbdda" translate="yes" xml:space="preserve">
          <source>Shared disk failover avoids synchronization overhead by having only one copy of the database. It uses a single disk array that is shared by multiple servers. If the main database server fails, the standby server is able to mount and start the database as though it were recovering from a database crash. This allows rapid failover with no data loss.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be4677bc3167ff156c0f70748645ca17d9d6e0ac" translate="yes" xml:space="preserve">
          <source>Shared hardware functionality is common in network storage devices. Using a network file system is also possible, though care must be taken that the file system has full POSIX behavior (see &lt;a href=&quot;creating-cluster#CREATING-CLUSTER-NFS&quot;&gt;Section 18.2.2.1&lt;/a&gt;). One significant limitation of this method is that if the shared disk array fails or becomes corrupt, the primary and standby servers are both nonfunctional. Another issue is that the standby server should never access the shared storage while the primary server is running.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5faec398d75b30791d35577459b95beb89fc7cab" translate="yes" xml:space="preserve">
          <source>Shift JIS</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40ebc998343deb6927aa9c3448541680b6c8def8" translate="yes" xml:space="preserve">
          <source>Shift JIS, JIS X 0213</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ed964d488a18629e5189d1ef4f5ddc3e0e84362" translate="yes" xml:space="preserve">
          <source>Shigeru Hanada &lt;code&gt;&amp;lt;&lt;a href=&quot;mailto:shigeru.hanada@gmail.com&quot;&gt;shigeru.hanada@gmail.com&lt;/a&gt;&amp;gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d33a942717635731a46b5d50f82c6b059874f0c2" translate="yes" xml:space="preserve">
          <source>Short Option</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6bddca4094838cb2e61e94daf11b2b4cc784a24" translate="yes" xml:space="preserve">
          <source>Short Options</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef7e415769ea172bce2213c07734e8903372ed1e" translate="yes" xml:space="preserve">
          <source>Short form of &lt;code&gt;zulu&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de3ce5331f63c72577518f7528978506dc16d741" translate="yes" xml:space="preserve">
          <source>Short-term share/exclusive page-level locks are used for read/write access. Locks are released immediately after each index row is fetched or inserted. But note that insertion of a GIN-indexed value usually produces several index key insertions per row, so GIN might do substantial work for a single value's insertion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c90e10c04766b36c2f74bf105975100a7e1dcf9" translate="yes" xml:space="preserve">
          <source>Short-term share/exclusive page-level locks are used for read/write access. Locks are released immediately after each index row is fetched or inserted. These index types provide the highest concurrency without deadlock conditions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fd7f6da3aeb5f90c1d6f0a2df406e91992bb3cd" translate="yes" xml:space="preserve">
          <source>Shorthand for &lt;code&gt;pg_relation_size(..., 'main')&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c31c3c4c5cf335124cdfd61e93866afd5dad378" translate="yes" xml:space="preserve">
          <source>Show all settings:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a9084f3875ffc056911648550cc631358f302b2" translate="yes" xml:space="preserve">
          <source>Show help about clusterdb command line arguments, and exit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d4dd3a0c50ed2654b818661c167f2a3bd6b9124" translate="yes" xml:space="preserve">
          <source>Show help about createdb command line arguments, and exit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a5af20a7c6bf20f0aa15a095d7f9b0297426bcb" translate="yes" xml:space="preserve">
          <source>Show help about createuser command line arguments, and exit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b359d0e0d247bffc5abeb2eb2a1eed9cefe95d23" translate="yes" xml:space="preserve">
          <source>Show help about dropdb command line arguments, and exit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85ad7006e83f3b7cdc3b9a444ee647c2693c3e62" translate="yes" xml:space="preserve">
          <source>Show help about dropuser command line arguments, and exit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ca705ddc437a08690f3b2633d651eeb6c7221e6" translate="yes" xml:space="preserve">
          <source>Show help about ecpg command line arguments, and exit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73715df766764994de623a68abf14e48f23f7349" translate="yes" xml:space="preserve">
          <source>Show help about initdb command line arguments, and exit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b84593990bc08ba01da4988c0f7e73c741946a7d" translate="yes" xml:space="preserve">
          <source>Show help about pg_archivecleanup command line arguments, and exit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4aceb4979d50ee44a118b0fce69d3be44ec4ba6" translate="yes" xml:space="preserve">
          <source>Show help about pg_basebackup command line arguments, and exit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e3aa5c6fa25a6cadefaf4bde59df7c1d6b1d8f5" translate="yes" xml:space="preserve">
          <source>Show help about pg_checksums command line arguments, and exit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea3847703c10ba685b57506f2a33ef0fc22ccf08" translate="yes" xml:space="preserve">
          <source>Show help about pg_config command line arguments, and exit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bac1d489e9cf15b27f7a1475ea4553db014b689" translate="yes" xml:space="preserve">
          <source>Show help about pg_ctl command line arguments, and exit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25344abf0da27426c6a81f8477775fd5857dacb6" translate="yes" xml:space="preserve">
          <source>Show help about pg_dump command line arguments, and exit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="252f4c6458149db7367df4f024be1c1aa53d70c4" translate="yes" xml:space="preserve">
          <source>Show help about pg_dumpall command line arguments, and exit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7bc13eb0622c3f124b5ba3911a6618b4f4f0f4c" translate="yes" xml:space="preserve">
          <source>Show help about pg_isready command line arguments, and exit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d102b7d8e69189b6d4db79b4aaf624da2a4f00b9" translate="yes" xml:space="preserve">
          <source>Show help about pg_receivewal command line arguments, and exit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e510900385b0c15bce2d9ea628171cba6cfa7ee2" translate="yes" xml:space="preserve">
          <source>Show help about pg_recvlogical command line arguments, and exit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a78c16a92d9fcb81c65c7e94b3011da393d2eae" translate="yes" xml:space="preserve">
          <source>Show help about pg_restore command line arguments, and exit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cecd50c76204357040439f99b90a74d321e243c0" translate="yes" xml:space="preserve">
          <source>Show help about pg_test_fsync command line arguments, and exit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b05d99c0a7e9019926f42b70f6aae6818336643" translate="yes" xml:space="preserve">
          <source>Show help about pg_test_timing command line arguments, and exit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e3719f3789034db8c05fbd718aacfde8b5aaeef" translate="yes" xml:space="preserve">
          <source>Show help about pg_waldump command line arguments, and exit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42fd77de24cc2823d795b8d22114a540dcd7fe80" translate="yes" xml:space="preserve">
          <source>Show help about pgbench command line arguments, and exit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0946fc1a8adf084a5eb44987caeef6ba091a830f" translate="yes" xml:space="preserve">
          <source>Show help about postgres command line arguments, and exit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eebcfe60f222ff4e3652f621ababf859ea73c31b" translate="yes" xml:space="preserve">
          <source>Show help about psql and exit. The optional &lt;code&gt;topic&lt;/code&gt; parameter (defaulting to &lt;code&gt;options&lt;/code&gt;) selects which part of psql is explained: &lt;code&gt;commands&lt;/code&gt; describes psql's backslash commands; &lt;code&gt;options&lt;/code&gt; describes the command-line options that can be passed to psql; and &lt;code&gt;variables&lt;/code&gt; shows help about psql configuration variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba3d23f2597556381797d0c6c8bb3e512d3daa97" translate="yes" xml:space="preserve">
          <source>Show help about reindexdb command line arguments, and exit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e19aa78e67104bf85a432189f2c47920bedbcc9" translate="yes" xml:space="preserve">
          <source>Show help about vacuumdb command line arguments, and exit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afb15fc44cb6eec9c1fdc80debd70adfa40b4f5c" translate="yes" xml:space="preserve">
          <source>Show help, then exit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="853b3853482eccbc21580256609af5ca7ba32698" translate="yes" xml:space="preserve">
          <source>Show progress report every &lt;code&gt;sec&lt;/code&gt; seconds. The report includes the time since the beginning of the run, the TPS since the last report, and the transaction latency average and standard deviation since the last report. Under throttling (&lt;code&gt;-R&lt;/code&gt;), the latency is computed with respect to the transaction scheduled start time, not the actual transaction beginning time, thus it also includes the average schedule lag time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed713b56989add97be271f9656a275850020dfc7" translate="yes" xml:space="preserve">
          <source>Show the current setting of the parameter &lt;code&gt;DateStyle&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd59602fbf15ca57f257b03685c081bb8613fab2" translate="yes" xml:space="preserve">
          <source>Show the current setting of the parameter &lt;code&gt;geqo&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="266672d0cc93e22ed4bf63fe8c0f659334e863a2" translate="yes" xml:space="preserve">
          <source>Show the values of all configuration parameters, with descriptions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49b5cec2f994c16948c97011500b3790384813f9" translate="yes" xml:space="preserve">
          <source>Showing the Server Status</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03e04d17e9625f007a5930f6dbef22dbb7475bb6" translate="yes" xml:space="preserve">
          <source>Shows a list of all PostgreSQL large objects currently stored in the database, along with any comments provided for them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="011ca580c53f19f685a47339e8e97c8581f4ac28" translate="yes" xml:space="preserve">
          <source>Shows help information. The optional &lt;code&gt;topic&lt;/code&gt; parameter (defaulting to &lt;code&gt;commands&lt;/code&gt;) selects which part of psql is explained: &lt;code&gt;commands&lt;/code&gt; describes psql's backslash commands; &lt;code&gt;options&lt;/code&gt; describes the command-line options that can be passed to psql; and &lt;code&gt;variables&lt;/code&gt; shows help about psql configuration variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45ec1a5a1006c75578b3139ef6d7ae2ac55d7cd0" translate="yes" xml:space="preserve">
          <source>Shows the copyright and distribution terms of PostgreSQL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a47b6d887b45dd7212c15f40c6ff8a8aae869b5" translate="yes" xml:space="preserve">
          <source>Shows the database's locale setting for character classification. At present, this parameter can be shown but not set, because the setting is determined at database creation time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ac8c135c4c95d185f7579e7d5ccb0427fc13a39" translate="yes" xml:space="preserve">
          <source>Shows the database's locale setting for collation (text ordering). At present, this parameter can be shown but not set, because the setting is determined at database creation time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd25d10b3cec124bfdabf6a423610ed5000cc105" translate="yes" xml:space="preserve">
          <source>Shows the description (that is, the column names and data types) of the result of the current query buffer. The query is not actually executed; however, if it contains some type of syntax error, that error will be reported in the normal way.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21b4282cfebef6d54a7e8c50989b472f07da30c2" translate="yes" xml:space="preserve">
          <source>Shows the descriptions of objects of type &lt;code&gt;constraint&lt;/code&gt;, &lt;code&gt;operator class&lt;/code&gt;, &lt;code&gt;operator family&lt;/code&gt;, &lt;code&gt;rule&lt;/code&gt;, and &lt;code&gt;trigger&lt;/code&gt;. All other comments may be viewed by the respective backslash commands for those object types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1032e9154653a6dd5bf55d7799b107ba3d8815bc" translate="yes" xml:space="preserve">
          <source>Shows the server's version number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8d534909c6977fe5e3f9d9d97b23b556650d2a4" translate="yes" xml:space="preserve">
          <source>Shows the server-side character set encoding. At present, this parameter can be shown but not set, because the encoding is determined at database creation time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="608848ac8eb224447f6517c28fd5b5db42577e53" translate="yes" xml:space="preserve">
          <source>Shut down the old server:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e17f9efd0805c8246331cb3ab6203ca24fa0a685" translate="yes" xml:space="preserve">
          <source>Shutting Down the Server</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a65d66a4dc5e30365f03511181a1724147283b7" translate="yes" xml:space="preserve">
          <source>Signal another backend to cancel a query or terminate its session.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f32be1dc74166373c988ec03b0bd86f0a576919" translate="yes" xml:space="preserve">
          <source>Signature</source>
          <target state="translated">Signature</target>
        </trans-unit>
        <trans-unit id="12bdee3f61d46761159d41e97b863d2f61d29c72" translate="yes" xml:space="preserve">
          <source>Signed integer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c98e235c841706a6cbee5f9d1606bb1993e58386" translate="yes" xml:space="preserve">
          <source>Significant revisions to the XML-related specifications in ISO/IEC 9075-14 (SQL/XML) were introduced with SQL:2006. PostgreSQL's implementation of the XML data type and related functions largely follows the earlier 2003 edition, with some borrowing from later editions. In particular:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c26865b7acf062340bd07b2839d9d6963defdb29" translate="yes" xml:space="preserve">
          <source>Similar considerations apply to generated columns. Stored generated columns are computed on insert or update on the local PostgreSQL server and handed to the foreign-data wrapper for writing out to the foreign data store, but it is not enforced that a query of the foreign table returns values for stored generated columns that are consistent with the generation expression. Again, this might result in incorrect query results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a8444e4e9c13437ed15e7447381867a17698dd8" translate="yes" xml:space="preserve">
          <source>Similar syntactic issues apply whenever you select a field from a composite value. For instance, to select just one field from the result of a function that returns a composite value, you'd need to write something like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82d360ed3bd0431e461a2955b0ee547f41f83c52" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;index_column_name&lt;/code&gt;, but used to infer expressions on &lt;code&gt;table_name&lt;/code&gt; columns appearing within index definitions (not simple columns). Follows &lt;code&gt;CREATE INDEX&lt;/code&gt; format. &lt;code&gt;SELECT&lt;/code&gt; privilege on any column appearing within &lt;code&gt;index_expression&lt;/code&gt; is required.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea1336797aa51dc0636abf33f41b9a4a9fbb1870" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;pg_stat_all_tables&lt;/code&gt;, but counts actions taken so far within the current transaction (which are &lt;em&gt;not&lt;/em&gt; yet included in &lt;code&gt;pg_stat_all_tables&lt;/code&gt; and related views). The columns for numbers of live and dead rows and vacuum and analyze actions are not present in this view.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e70de572f476159a3244afa139c9185457204d2" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;pg_stat_user_functions&lt;/code&gt;, but counts only calls during the current transaction (which are &lt;em&gt;not&lt;/em&gt; yet included in &lt;code&gt;pg_stat_user_functions&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e689a8890e7e6a1af5ab0e817474640d50617090" translate="yes" xml:space="preserve">
          <source>Similarly we can add a new partition to handle new data. We can create an empty partition in the partitioned table just as the original partitions were created above:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bda45196d8678e0790851fc9e9c1fa7f966b177" translate="yes" xml:space="preserve">
          <source>Similarly, &lt;a href=&quot;runtime-config-replication#GUC-HOT-STANDBY-FEEDBACK&quot;&gt;hot_standby_feedback&lt;/a&gt; and &lt;a href=&quot;runtime-config-replication#GUC-VACUUM-DEFER-CLEANUP-AGE&quot;&gt;vacuum_defer_cleanup_age&lt;/a&gt; provide protection against relevant rows being removed by vacuum, but the former provides no protection during any time period when the standby is not connected, and the latter often needs to be set to a high value to provide adequate protection. Replication slots overcome these disadvantages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4798e0a3d47ed876bcabb4cbfef5e1505f1e94dd" translate="yes" xml:space="preserve">
          <source>Similarly, &lt;code&gt;pg_walfile_name&lt;/code&gt; extracts just the write-ahead log file name. When the given write-ahead log location is exactly at a write-ahead log file boundary, both these functions return the name of the preceding write-ahead log file. This is usually the desired behavior for managing write-ahead log archiving behavior, since the preceding file is the last one that currently needs to be archived.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aefb1fe7f7adc82a8dccb50c9b3ec4c8e66f41ea" translate="yes" xml:space="preserve">
          <source>Similarly, all of the following functions perform matching case-insensitively if their arguments are &lt;code&gt;citext&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebb7dcd0160bb0e060c55b65d95fffb0cf4dedd0" translate="yes" xml:space="preserve">
          <source>Similarly, arrays with equal numbers of elements are compared in the order:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70d56d24501f3dfc0a8d03d95fcdf2a728bdbc63" translate="yes" xml:space="preserve">
          <source>Similarly, if a conflicting valid row has been deleted by an as-yet-uncommitted transaction, the would-be inserter must wait for that transaction to commit or abort, and then repeat the test.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="154c8c237f68225822b54cc980016061e8e3ab90" translate="yes" xml:space="preserve">
          <source>Similarly, if we were to specify that &lt;code&gt;cities&lt;/code&gt;.&lt;code&gt;name&lt;/code&gt;&lt;code&gt;REFERENCES&lt;/code&gt; some other table, this constraint would not automatically propagate to &lt;code&gt;capitals&lt;/code&gt;. In this case you could work around it by manually adding the same &lt;code&gt;REFERENCES&lt;/code&gt; constraint to &lt;code&gt;capitals&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe1287a923f84fb8e9e9c0365246beccb582f0a1" translate="yes" xml:space="preserve">
          <source>Similarly, the elements of the &lt;code&gt;ORDER BY&lt;/code&gt; list are interpreted in much the same fashion as elements of an &lt;a href=&quot;sql-select#SQL-ORDERBY&quot;&gt;&lt;code&gt;ORDER BY&lt;/code&gt; Clause&lt;/a&gt;, except that the expressions are always taken as simple expressions and never the name or number of an output column.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d3024f9a331118f7440ffabd1a19e023456c32f" translate="yes" xml:space="preserve">
          <source>Similarly, when attaching a new partition it may be scanned to verify that existing rows meet the partition constraint.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c48cb40a4f0c379a4df44a747937ffa89e7d2973" translate="yes" xml:space="preserve">
          <source>Simon Tatham</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="589d8785493e5221497663234de1727f7cba786b" translate="yes" xml:space="preserve">
          <source>Simple example using &lt;code&gt;btree_gist&lt;/code&gt; instead of &lt;code&gt;btree&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="563523c7fb9aeb90cd3ca9914f9f94d5abfe8ef0" translate="yes" xml:space="preserve">
          <source>Simple example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c415d561a9b9919ddec87d4fd9e66273eabb01ba" translate="yes" xml:space="preserve">
          <source>Simple views are automatically updatable: the system will allow &lt;code&gt;INSERT&lt;/code&gt;, &lt;code&gt;UPDATE&lt;/code&gt; and &lt;code&gt;DELETE&lt;/code&gt; statements to be used on the view in the same way as on a regular table. A view is automatically updatable if it satisfies all of the following conditions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e03f20a90b59b059ccb5f39b63fa73e127da8ce9" translate="yes" xml:space="preserve">
          <source>Simplified Chinese</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43411abb7d1c9c7f47655d69079a79307e822d3d" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;CRAAAA&lt;/code&gt; appears in the list of MCVs, the selectivity is merely the corresponding entry in the list of most common frequencies (MCFs):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89f3cdc5948c45f8197dab43b045aed5e4d97049" translate="yes" xml:space="preserve">
          <source>Since LDAP often uses commas and spaces to separate the different parts of a DN, it is often necessary to use double-quoted parameter values when configuring LDAP options, as shown in the examples.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bf1354d7ff8db3b8a4186015b13543b3510c3e8" translate="yes" xml:space="preserve">
          <source>Since PostgreSQL 8.1, the concepts of users and groups have been unified into a single kind of entity called a role. It is therefore no longer necessary to use the keyword &lt;code&gt;GROUP&lt;/code&gt; to identify whether a grantee is a user or a group. &lt;code&gt;GROUP&lt;/code&gt; is still allowed in the command, but it is a noise word.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8be3314cdf4b87d9c93a33ad52e0b7f880da0dc8" translate="yes" xml:space="preserve">
          <source>Since SQL:2008, the SQL standard includes a &lt;code&gt;LIKE_REGEX&lt;/code&gt; operator that performs pattern matching according to the XQuery regular expression standard. PostgreSQL does not yet implement this operator, but you can get very similar behavior using the &lt;code&gt;regexp_match()&lt;/code&gt; function, since XQuery regular expressions are quite close to the ARE syntax described above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8625b9ba3949c7fe8554cb85d09fc8b9c86c2c79" translate="yes" xml:space="preserve">
          <source>Since a longer document has a greater chance of containing a query term it is reasonable to take into account document size, e.g., a hundred-word document with five instances of a search word is probably more relevant than a thousand-word document with five instances. Both ranking functions take an integer &lt;code&gt;normalization&lt;/code&gt; option that specifies whether and how a document's length should impact its rank. The integer option controls several behaviors, so it is a bit mask: you can specify one or more behaviors using &lt;code&gt;|&lt;/code&gt; (for example, &lt;code&gt;2|4&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ba0221ecb447121dfa5d71859ea140f8e5182c9" translate="yes" xml:space="preserve">
          <source>Since a thesaurus dictionary has the capability to recognize phrases it must remember its state and interact with the parser. A thesaurus dictionary uses these assignments to check if it should handle the next word or stop accumulation. The thesaurus dictionary must be configured carefully. For example, if the thesaurus dictionary is assigned to handle only the &lt;code&gt;asciiword&lt;/code&gt; token, then a thesaurus dictionary definition like &lt;code&gt;one 7&lt;/code&gt; will not work since token type &lt;code&gt;uint&lt;/code&gt; is not assigned to the thesaurus dictionary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5101ea15275034ff0ce451417a60ca5633f481de" translate="yes" xml:space="preserve">
          <source>Since all query results from a unionized &lt;code&gt;SELECT&lt;/code&gt; statement must appear in a single set of columns, the types of the results of each &lt;code&gt;SELECT&lt;/code&gt; clause must be matched up and converted to a uniform set. Similarly, the result expressions of a &lt;code&gt;CASE&lt;/code&gt; construct must be converted to a common type so that the &lt;code&gt;CASE&lt;/code&gt; expression as a whole has a known output type. The same holds for &lt;code&gt;ARRAY&lt;/code&gt; constructs, and for the &lt;code&gt;GREATEST&lt;/code&gt; and &lt;code&gt;LEAST&lt;/code&gt; functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="546529f4e3657ccae2446f6d0ea0308f1634f110" translate="yes" xml:space="preserve">
          <source>Since collection of statistics adds some overhead to query execution, the system can be configured to collect or not collect information. This is controlled by configuration parameters that are normally set in &lt;code&gt;postgresql.conf&lt;/code&gt;. (See &lt;a href=&quot;https://www.postgresql.org/docs/12/runtime-config.html&quot;&gt;Chapter 19&lt;/a&gt; for details about setting configuration parameters.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1106b832d115f6cb6282d0cbe20ff8c3da3e4cde" translate="yes" xml:space="preserve">
          <source>Since colons can legally appear in SQL commands, an apparent attempt at interpolation (that is, &lt;code&gt;:name&lt;/code&gt;, &lt;code&gt;:'name'&lt;/code&gt;, or &lt;code&gt;:&quot;name&quot;&lt;/code&gt;) is not replaced unless the named variable is currently set. In any case, you can escape a colon with a backslash to protect it from substitution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="298653261d4e2da3a9897d5b9600b182775e828e" translate="yes" xml:space="preserve">
          <source>Since different kinds of statistics might be appropriate for different kinds of data, &lt;code&gt;pg_statistic&lt;/code&gt; is designed not to assume very much about what sort of statistics it stores. Only extremely general statistics (such as nullness) are given dedicated columns in &lt;code&gt;pg_statistic&lt;/code&gt;. Everything else is stored in &amp;ldquo;slots&amp;rdquo;, which are groups of associated columns whose content is identified by a code number in one of the slot's columns. For more information see &lt;code&gt;src/include/catalog/pg_statistic.h&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67415d92cc320226f230127e74cb20a035aa08f5" translate="yes" xml:space="preserve">
          <source>Since foreign keys are implemented as triggers, setting this parameter to &lt;code&gt;replica&lt;/code&gt; also disables all foreign key checks, which can leave data in an inconsistent state if improperly used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b5638279ed10f4ed2bb5eeeabd98eb092d6ef65" translate="yes" xml:space="preserve">
          <source>Since hashes are unordered data structures, field order and line layout aren't semantically significant. However, to maintain a consistent appearance, we set a few rules that are applied by the formatting script &lt;code&gt;reformat_dat_file.pl&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56947fc240edc3c959fec40008ed4b043f4a55b1" translate="yes" xml:space="preserve">
          <source>Since multidimensional arrays must be rectangular, inner constructors at the same level must produce sub-arrays of identical dimensions. Any cast applied to the outer &lt;code&gt;ARRAY&lt;/code&gt; constructor propagates automatically to all the inner constructors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6918a0b90b7088d29e58c799c230b8d7458180d4" translate="yes" xml:space="preserve">
          <source>Since no connection is made when this option is set to &lt;code&gt;false&lt;/code&gt;, the tables are not subscribed, and so after you enable the subscription nothing will be replicated. It is required to run &lt;code&gt;ALTER SUBSCRIPTION ... REFRESH PUBLICATION&lt;/code&gt; in order for tables to be subscribed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35520ec628c2741d8fd046f2b3cb96e56df400fa" translate="yes" xml:space="preserve">
          <source>Since numeric constants with decimal points are initially assigned the type &lt;code&gt;numeric&lt;/code&gt;, the following query will require no type conversion and therefore might be slightly more efficient:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4bf82794f73c7ce541429d778bec739ee3ffb6f" translate="yes" xml:space="preserve">
          <source>Since pg_dumpall calls pg_dump internally, some diagnostic messages will refer to pg_dump.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fdb38a8aa429db79e46e5c1e427dcd369ad7ca6" translate="yes" xml:space="preserve">
          <source>Since pg_dumpall reads tables from all databases you will most likely have to connect as a database superuser in order to produce a complete dump. Also you will need superuser privileges to execute the saved script in order to be allowed to add roles and create databases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6373a2bb40076c8e7f65d74d1f21b0d82a94e6e" translate="yes" xml:space="preserve">
          <source>Since policy expressions are added to the user's query directly, they will be run with the rights of the user running the overall query. Therefore, users who are using a given policy must be able to access any tables or functions referenced in the expression or they will simply receive a permission denied error when attempting to query the table that has row-level security enabled. This does not change how views work, however. As with normal queries and views, permission checks and policies for the tables which are referenced by a view will use the view owner's rights and any policies which apply to the view owner.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a333e96b1b276814ee5afd42350289a1a05356ee" translate="yes" xml:space="preserve">
          <source>Since system table names begin with &lt;code&gt;pg_&lt;/code&gt;, it is best to avoid such names to ensure that you won't suffer a conflict if some future version defines a system table named the same as your table. (With the default search path, an unqualified reference to your table name would then be resolved as the system table instead.) System tables will continue to follow the convention of having names beginning with &lt;code&gt;pg_&lt;/code&gt;, so that they will not conflict with unqualified user-table names so long as users avoid the &lt;code&gt;pg_&lt;/code&gt; prefix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2a157ff6943b51f82e8abe52b286fec37765c98" translate="yes" xml:space="preserve">
          <source>Since the &lt;code&gt;pg_hba.conf&lt;/code&gt; records are examined sequentially for each connection attempt, the order of the records is significant. Typically, earlier records will have tight connection match parameters and weaker authentication methods, while later records will have looser match parameters and stronger authentication methods. For example, one might wish to use &lt;code&gt;trust&lt;/code&gt; authentication for local TCP/IP connections but require a password for remote TCP/IP connections. In this case a record specifying &lt;code&gt;trust&lt;/code&gt; authentication for connections from 127.0.0.1 would appear before a record specifying password authentication for a wider range of allowed client IP addresses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f958cad737d4e0d36812e54ad5367cb224ed80eb" translate="yes" xml:space="preserve">
          <source>Since the &lt;code&gt;queryid&lt;/code&gt; hash value is computed on the post-parse-analysis representation of the queries, the opposite is also possible: queries with identical texts might appear as separate entries, if they have different meanings as a result of factors such as different &lt;code&gt;search_path&lt;/code&gt; settings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13c61675eb3d1018af99b38293ca322654b1b9aa" translate="yes" xml:space="preserve">
          <source>Since the &lt;code&gt;words&lt;/code&gt; table has been generated as a separate, static table, it will need to be periodically regenerated so that it remains reasonably up-to-date with the document collection. Keeping it exactly current is usually unnecessary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="199cdfbed8830469169fdf887fd0ad4eb308081c" translate="yes" xml:space="preserve">
          <source>Since the columns all had different names, the parser automatically found which table they belong to. If there were duplicate column names in the two tables you'd need to &lt;em&gt;qualify&lt;/em&gt; the column names to show which one you meant, as in:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0d6de9fdd70693e1bfa76116e7b090830230099" translate="yes" xml:space="preserve">
          <source>Since the output of this data type is locale-sensitive, it might not work to load &lt;code&gt;money&lt;/code&gt; data into a database that has a different setting of &lt;code&gt;lc_monetary&lt;/code&gt;. To avoid problems, before restoring a dump into a new database make sure &lt;code&gt;lc_monetary&lt;/code&gt; has the same or equivalent value as in the database that was dumped.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bce94f9d77091dc118411d2ffd0703ec455cc475" translate="yes" xml:space="preserve">
          <source>Since the predefined libc collations already include all collations defined in the operating system when the database instance is initialized, it is not often necessary to manually create new ones. Reasons might be if a different naming system is desired (in which case see also &lt;a href=&quot;collation#COLLATION-COPY&quot;&gt;Section 23.2.2.3.3&lt;/a&gt;) or if the operating system has been upgraded to provide new locale definitions (in which case see also &lt;a href=&quot;functions-admin#FUNCTIONS-ADMIN-COLLATION&quot;&gt;&lt;code&gt;pg_import_system_collations()&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5c6e0d394e36fb0de36f2183a9b746b60816e5c" translate="yes" xml:space="preserve">
          <source>Since the purpose of &lt;code&gt;commit_delay&lt;/code&gt; is to allow the cost of each flush operation to be amortized across concurrently committing transactions (potentially at the expense of transaction latency), it is necessary to quantify that cost before the setting can be chosen intelligently. The higher that cost is, the more effective &lt;code&gt;commit_delay&lt;/code&gt; is expected to be in increasing transaction throughput, up to a point. The &lt;a href=&quot;pgtestfsync&quot;&gt;pg_test_fsync&lt;/a&gt; program can be used to measure the average time in microseconds that a single WAL flush operation takes. A value of half of the average time the program reports it takes to flush after a single 8kB write operation is often the most effective setting for &lt;code&gt;commit_delay&lt;/code&gt;, so this value is recommended as the starting point to use when optimizing for a particular workload. While tuning &lt;code&gt;commit_delay&lt;/code&gt; is particularly useful when the WAL log is stored on high-latency rotating disks, benefits can be significant even on storage media with very fast sync times, such as solid-state drives or RAID arrays with a battery-backed write cache; but this should definitely be tested against a representative workload. Higher values of &lt;code&gt;commit_siblings&lt;/code&gt; should be used in such cases, whereas smaller &lt;code&gt;commit_siblings&lt;/code&gt; values are often helpful on higher latency media. Note that it is quite possible that a setting of &lt;code&gt;commit_delay&lt;/code&gt; that is too high can increase transaction latency by so much that total transaction throughput suffers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38404e4ae252c0fb6df726708c4db9566cc1f602" translate="yes" xml:space="preserve">
          <source>Since the result depends only on whether any rows are returned, and not on the contents of those rows, the output list of the subquery is normally unimportant. A common coding convention is to write all &lt;code&gt;EXISTS&lt;/code&gt; tests in the form &lt;code&gt;EXISTS(SELECT 1 WHERE ...)&lt;/code&gt;. There are exceptions to this rule however, such as subqueries that use &lt;code&gt;INTERSECT&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6915022737a4ee251e7aa12cc406103a469017ba" translate="yes" xml:space="preserve">
          <source>Since there are no comparison operators for the &lt;code&gt;xml&lt;/code&gt; data type, it is not possible to create an index directly on a column of this type. If speedy searches in XML data are desired, possible workarounds include casting the expression to a character string type and indexing that, or indexing an XPath expression. Of course, the actual query would have to be adjusted to search by the indexed expression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3aba811d08ea8d6654643c46d530e502e8f4ddb8" translate="yes" xml:space="preserve">
          <source>Since these functions return the start time of the current transaction, their values do not change during the transaction. This is considered a feature: the intent is to allow a single transaction to have a consistent notion of the &amp;ldquo;current&amp;rdquo; time, so that multiple modifications within the same transaction bear the same time stamp.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5081d2a8e80dce1e5372cc4efeef98be322bd7d6" translate="yes" xml:space="preserve">
          <source>Since this catalog contains passwords, it must not be publicly readable. &lt;a href=&quot;view-pg-roles&quot;&gt;&lt;code&gt;pg_roles&lt;/code&gt;&lt;/a&gt; is a publicly readable view on &lt;code&gt;pg_authid&lt;/code&gt; that blanks out the password field.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31a4560fac13b05921bb77646c88072cae1336d5" translate="yes" xml:space="preserve">
          <source>Since this query has no &lt;code&gt;WHERE&lt;/code&gt; clause, it must scan all the rows of the table, so the planner has chosen to use a simple sequential scan plan. The numbers that are quoted in parentheses are (left to right):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a9438bb8f01ddb0be97393ce893812f2800e878" translate="yes" xml:space="preserve">
          <source>Since timezone abbreviations are not well standardized, PostgreSQL provides a means to customize the set of abbreviations accepted by the server. The &lt;a href=&quot;runtime-config-client#GUC-TIMEZONE-ABBREVIATIONS&quot;&gt;timezone_abbreviations&lt;/a&gt; run-time parameter determines the active set of abbreviations. While this parameter can be altered by any database user, the possible values for it are under the control of the database administrator &amp;mdash; they are in fact names of configuration files stored in &lt;code&gt;.../share/timezonesets/&lt;/code&gt; of the installation directory. By adding or altering files in that directory, the administrator can set local policy for timezone abbreviations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33079a20f3bb27296f94172a1ac1f04b23f52103" translate="yes" xml:space="preserve">
          <source>Since we can combine an indefinitely long sequence of WAL files for replay, continuous backup can be achieved simply by continuing to archive the WAL files. This is particularly valuable for large databases, where it might not be convenient to take a full backup frequently.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af508a7006ceeb87b894c9ffcc385e2969ee8697" translate="yes" xml:space="preserve">
          <source>Since you are modifying copies of buffer pages, &lt;code&gt;GenericXLogStart()&lt;/code&gt; does not start a critical section. Thus, you can safely do memory allocation, error throwing, etc. between &lt;code&gt;GenericXLogStart()&lt;/code&gt; and &lt;code&gt;GenericXLogFinish()&lt;/code&gt;. The only actual critical section is present inside &lt;code&gt;GenericXLogFinish()&lt;/code&gt;. There is no need to worry about calling &lt;code&gt;GenericXLogAbort()&lt;/code&gt; during an error exit, either.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c98f077687b3caf297476f42f2cb0dd223e177f3" translate="yes" xml:space="preserve">
          <source>Since you have to keep around all the archived WAL files back to your last base backup, the interval between base backups should usually be chosen based on how much storage you want to expend on archived WAL files. You should also consider how long you are prepared to spend recovering, if recovery should be necessary &amp;mdash; the system will have to replay all those WAL segments, and that could take awhile if it has been a long time since the last base backup.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2331858b0c48cc7fd8cb1731819314a507f8abe" translate="yes" xml:space="preserve">
          <source>Since you need to be connected to the database server in order to execute the &lt;code&gt;CREATE DATABASE&lt;/code&gt; command, the question remains how the &lt;em&gt;first&lt;/em&gt; database at any given site can be created. The first database is always created by the &lt;code&gt;initdb&lt;/code&gt; command when the data storage area is initialized. (See &lt;a href=&quot;creating-cluster&quot;&gt;Section 18.2&lt;/a&gt;.) This database is called &lt;code&gt;postgres&lt;/code&gt;. So to create the first &amp;ldquo;ordinary&amp;rdquo; database you can connect to &lt;code&gt;postgres&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9186aaf22f650a773c9d0e96e50a0a1c0ab4ed4" translate="yes" xml:space="preserve">
          <source>Single value (zero-length interval)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53eb49dab80f523be1880417f8f5fed8236f5b2c" translate="yes" xml:space="preserve">
          <source>Single-User Mode</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbe740227f2ee74f6b3f6ca1703aa2041cde81bc" translate="yes" xml:space="preserve">
          <source>Single-column statistics store the number of distinct values in each column. Estimates of the number of distinct values when combining more than one column (for example, for &lt;code&gt;GROUP BY a, b&lt;/code&gt;) are frequently wrong when the planner only has single-column statistical data, causing it to select bad plans.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68a7d07a9bea11c5a8b5df3b4fa351aa00a15d55" translate="yes" xml:space="preserve">
          <source>Size of the SQL/JSON item</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a42ce7fa92f794da485e0f331ab739e28eab0ce" translate="yes" xml:space="preserve">
          <source>Size of the on-disk representation of this table in pages (of size &lt;code&gt;BLCKSZ&lt;/code&gt;). This is only an estimate used by the planner. It is updated by &lt;code&gt;VACUUM&lt;/code&gt;, &lt;code&gt;ANALYZE&lt;/code&gt;, and a few DDL commands such as &lt;code&gt;CREATE INDEX&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ea0cfa4b145056f2c2d8358087cc5b370f627f6" translate="yes" xml:space="preserve">
          <source>Skip relations that cannot be immediately locked for processing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e96cc5c07585101e529cab02361cc17e2d162624" translate="yes" xml:space="preserve">
          <source>Slony-I is an example of this type of replication, with per-table granularity, and support for multiple standby servers. Because it updates the standby server asynchronously (in batches), there is possible data loss during fail over.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2375a5ecc3081b59c979ed2ad80655f50fe1b938" translate="yes" xml:space="preserve">
          <source>Slots can be created and dropped either via the streaming replication protocol (see &lt;a href=&quot;https://www.postgresql.org/docs/12/protocol-replication.html&quot;&gt;Section 52.4&lt;/a&gt;) or via SQL functions (see &lt;a href=&quot;functions-admin#FUNCTIONS-REPLICATION&quot;&gt;Section 9.26.6&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10d4f61f3c7009bc1274e568e420899a76d8b1b0" translate="yes" xml:space="preserve">
          <source>Smaller values of &lt;code&gt;bgwriter_lru_maxpages&lt;/code&gt; and &lt;code&gt;bgwriter_lru_multiplier&lt;/code&gt; reduce the extra I/O load caused by the background writer, but make it more likely that server processes will have to issue writes for themselves, delaying interactive queries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3504b77b6faee648de025e7aa88cd59afa4e78e" translate="yes" xml:space="preserve">
          <source>Snapshots are exported with the &lt;code&gt;pg_export_snapshot&lt;/code&gt; function, shown in &lt;a href=&quot;functions-admin#FUNCTIONS-SNAPSHOT-SYNCHRONIZATION-TABLE&quot;&gt;Table 9.87&lt;/a&gt;, and imported with the &lt;a href=&quot;sql-set-transaction&quot;&gt;SET TRANSACTION&lt;/a&gt; command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8328cf8bf38a03a33deb3844df7fb01ce959fca2" translate="yes" xml:space="preserve">
          <source>So far we have explained how to add data to tables and how to change data. What remains is to discuss how to remove data that is no longer needed. Just as adding data is only possible in whole rows, you can only remove entire rows from a table. In the previous section we explained that SQL does not provide a way to directly address individual rows. Therefore, removing rows can only be done by specifying conditions that the rows to be removed have to match. If you have a primary key in the table then you can specify the exact row. But you can also remove groups of rows matching a condition, or you can remove all rows in the table at once.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29ebc1a400c5a829663dbb6ebc2cefb5d5ce86a6" translate="yes" xml:space="preserve">
          <source>So if you index, say, an image collection with a PostgreSQL B-tree, you can only issue queries such as &amp;ldquo;is imagex equal to imagey&amp;rdquo;, &amp;ldquo;is imagex less than imagey&amp;rdquo; and &amp;ldquo;is imagex greater than imagey&amp;rdquo;. Depending on how you define &amp;ldquo;equals&amp;rdquo;, &amp;ldquo;less than&amp;rdquo; and &amp;ldquo;greater than&amp;rdquo; in this context, this could be useful. However, by using a GiST based index, you could create ways to ask domain-specific questions, perhaps &amp;ldquo;find all images of horses&amp;rdquo; or &amp;ldquo;find all over-exposed images&amp;rdquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63a0f355c69905f2f252426e49f864ef2a5b7861" translate="yes" xml:space="preserve">
          <source>So long as no deadlock situation is detected, a transaction seeking either a table-level or row-level lock will wait indefinitely for conflicting locks to be released. This means it is a bad idea for applications to hold transactions open for long periods of time (e.g., while waiting for user input).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="802f301feb830e18927d63ec2e1513704a48826b" translate="yes" xml:space="preserve">
          <source>So long as the working table is not empty, repeat these steps:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7e7a2e939ab5bf22f9b4b74474d6d2680d09ed4" translate="yes" xml:space="preserve">
          <source>So the parser does a type conversion on the operand and the query is equivalent to:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63fa8bc82dac59b478b1bb95af998c32c5f7979f" translate="yes" xml:space="preserve">
          <source>So the planner will usually select an index scan if possible. With a btree index, we get results like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b73efed3f68f4f478dfb510317bd6d6d0d980bd1" translate="yes" xml:space="preserve">
          <source>So to create a table in the new schema, use:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2c8bfb31e799316901a0916e3e3f5dc632a7a93" translate="yes" xml:space="preserve">
          <source>So, 1700, 1800, 1900, 2100, and 2200 are not leap years. But 1600, 2000, and 2400 are leap years. By contrast, in the older Julian calendar all years divisible by 4 are leap years.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3821383c968c02f69cf8fa47cf23c0a33104a8f" translate="yes" xml:space="preserve">
          <source>So, for example, these are equivalent:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3f3af4406f7f6601b6bf605bf9a16e75f82fc7a" translate="yes" xml:space="preserve">
          <source>So, if you run your own CA and allow only certificates from this CA to be accepted by the server, the serial number is the most reliable (albeit not very mnemonic) means to identify a user.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a2802bd2fde3f4714df8f02ed567c871086b01a" translate="yes" xml:space="preserve">
          <source>So, switching from primary to standby server can be fast but requires some time to re-prepare the failover cluster. Regular switching from primary to standby is useful, since it allows regular downtime on each system for maintenance. This also serves as a test of the failover mechanism to ensure that it will really work when you need it. Written administration procedures are advised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="041344b27b335d177c1a075d7d1e305e6cdfe865" translate="yes" xml:space="preserve">
          <source>So, to specify a named constraint, use the key word &lt;code&gt;CONSTRAINT&lt;/code&gt; followed by an identifier followed by the constraint definition. (If you don't specify a constraint name in this way, the system chooses a name for you.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1c700123479a2be7a31632c6a79166e2365e5fb" translate="yes" xml:space="preserve">
          <source>So, with the introduction of PGP encryption, usage of raw encryption functions is discouraged.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb983e9ffaa4215db72398a2e5c05b59f1b19993" translate="yes" xml:space="preserve">
          <source>Soft upper limit of the size of the set returned by GIN index scans. For more information see &lt;a href=&quot;gin-tips&quot;&gt;Section 66.5&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48f43423db0562ef2e10fb3fce70a29d303c9a19" translate="yes" xml:space="preserve">
          <source>Solar Designer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26e63dc273e3d7592946ac5e0a54673f05516860" translate="yes" xml:space="preserve">
          <source>Solaris 2.10 (Solaris 10) and laterOpenSolaris</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="800a5d597c25aa9b354ed3f5a4ea3f53e2b17909" translate="yes" xml:space="preserve">
          <source>Solaris 2.6 to 2.9 (Solaris 6 to Solaris 9)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a812a86aecf127168fdd7bc939660cd07ba4f075" translate="yes" xml:space="preserve">
          <source>Solaris requires special handling. You must use &lt;code&gt;/usr/ucb/ps&lt;/code&gt;, rather than &lt;code&gt;/bin/ps&lt;/code&gt;. You also must use two &lt;code&gt;w&lt;/code&gt; flags, not just one. In addition, your original invocation of the &lt;code&gt;postgres&lt;/code&gt; command must have a shorter &lt;code&gt;ps&lt;/code&gt; status display than that provided by each server process. If you fail to do all three things, the &lt;code&gt;ps&lt;/code&gt; output for each server process will be the original &lt;code&gt;postgres&lt;/code&gt; command line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e49cdd8b4661cbbc91446b849a1194e499a9884d" translate="yes" xml:space="preserve">
          <source>Some (less frequently used) encodings are not supported by ICU. When the database encoding is one of these, ICU collation entries in &lt;code&gt;pg_collation&lt;/code&gt; are ignored. Attempting to use one will draw an error along the lines of &amp;ldquo;collation &quot;de-x-icu&quot; for encoding &quot;WIN874&quot; does not exist&amp;rdquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee40f9b9734dbd4a91a7d92973258b40bb531dfd" translate="yes" xml:space="preserve">
          <source>Some DDL commands, currently only &lt;a href=&quot;sql-truncate&quot;&gt;TRUNCATE&lt;/a&gt; and the table-rewriting forms of &lt;a href=&quot;sql-altertable&quot;&gt;ALTER TABLE&lt;/a&gt;, are not MVCC-safe. This means that after the truncation or rewrite commits, the table will appear empty to concurrent transactions, if they are using a snapshot taken before the DDL command committed. This will only be an issue for a transaction that did not access the table in question before the DDL command started &amp;mdash; any transaction that has done so would hold at least an &lt;code&gt;ACCESS SHARE&lt;/code&gt; table lock, which would block the DDL command until that transaction completes. So these commands will not cause any apparent inconsistency in the table contents for successive queries on the target table, but they could cause visible inconsistency between the contents of the target table and other tables in the database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f09ee2851258052d3c5f49a32727d2a1519806f" translate="yes" xml:space="preserve">
          <source>Some ISBN13 numbers can be displayed as ISBN.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f82b7dbf85db87bb9f84d8253cdea6c48e3402bf" translate="yes" xml:space="preserve">
          <source>Some ISMN13 numbers can be displayed as ISMN.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89bee48c2e802304b5519040cc804d32c04717b2" translate="yes" xml:space="preserve">
          <source>Some ISSN13 numbers can be displayed as ISSN.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4593e8caad52040d1bc379ad01ac76ec2b814f4" translate="yes" xml:space="preserve">
          <source>Some PostgreSQL data types and functions have special rules regarding transactional behavior. In particular, changes made to a sequence (and therefore the counter of a column declared using &lt;code&gt;serial&lt;/code&gt;) are immediately visible to all other transactions and are not rolled back if the transaction that made the changes aborts. See &lt;a href=&quot;functions-sequence&quot;&gt;Section 9.16&lt;/a&gt; and &lt;a href=&quot;datatype-numeric#DATATYPE-SERIAL&quot;&gt;Section 8.1.4&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8a3c2417878b41e5d1b86eff70225a555273e65" translate="yes" xml:space="preserve">
          <source>Some XML-related functions may not work at all on non-ASCII data when the server encoding is not UTF-8. This is known to be an issue for &lt;code&gt;xmltable()&lt;/code&gt; and &lt;code&gt;xpath()&lt;/code&gt; in particular.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87797d4e7cb9291108c3962a9881c1e9bcb03149" translate="yes" xml:space="preserve">
          <source>Some access methods return index entries in a well-defined order, others do not. There are actually two different ways that an access method can support sorted output:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a655a45cf20ecf3645a89541b00f0a115c90a4a6" translate="yes" xml:space="preserve">
          <source>Some administrators prefer to schedule vacuuming themselves, for example doing all the work at night when load is low. The difficulty with doing vacuuming according to a fixed schedule is that if a table has an unexpected spike in update activity, it may get bloated to the point that &lt;code&gt;VACUUM FULL&lt;/code&gt; is really necessary to reclaim space. Using the autovacuum daemon alleviates this problem, since the daemon schedules vacuuming dynamically in response to update activity. It is unwise to disable the daemon completely unless you have an extremely predictable workload. One possible compromise is to set the daemon's parameters so that it will only react to unusually heavy update activity, thus keeping things from getting out of hand, while scheduled &lt;code&gt;VACUUM&lt;/code&gt;s are expected to do the bulk of the work when the load is typical.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c20ac7f8d98b9c6d45f1cce6f0f6c935fedfd48" translate="yes" xml:space="preserve">
          <source>Some applications might expect that &lt;code&gt;expression = NULL&lt;/code&gt; returns true if &lt;code&gt;expression&lt;/code&gt; evaluates to the null value. It is highly recommended that these applications be modified to comply with the SQL standard. However, if that cannot be done the &lt;a href=&quot;runtime-config-compatible#GUC-TRANSFORM-NULL-EQUALS&quot;&gt;transform_null_equals&lt;/a&gt; configuration variable is available. If it is enabled, PostgreSQL will convert &lt;code&gt;x = NULL&lt;/code&gt; clauses to &lt;code&gt;x IS NULL&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="632b4b8d0fdc54c7c1f407669799be4b0d2545df" translate="yes" xml:space="preserve">
          <source>Some approximation is allowed when determining the distance, so long as the result is never greater than the entry's actual distance. Thus, for example, distance to a bounding box is usually sufficient in geometric applications. For an internal tree node, the distance returned must not be greater than the distance to any of the child nodes. If the returned distance is not exact, the function must set &lt;code&gt;*recheck&lt;/code&gt; to true. (This is not necessary for internal tree nodes; for them, the calculation is always assumed to be inexact.) In this case the executor will calculate the accurate distance after fetching the tuple from the heap, and reorder the tuples if necessary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc95418e24415c3b6866cd84571618bbdb7f3d8a" translate="yes" xml:space="preserve">
          <source>Some characters that are not alphanumeric have a special meaning that is different from being an operator. Details on the usage can be found at the location where the respective syntax element is described. This section only exists to advise the existence and summarize the purposes of these characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ca914c9f90c186cfb79184e4eadf75e2fbfec3f" translate="yes" xml:space="preserve">
          <source>Some client libraries issue &lt;code&gt;BEGIN&lt;/code&gt; and &lt;code&gt;COMMIT&lt;/code&gt; commands automatically, so that you might get the effect of transaction blocks without asking. Check the documentation for the interface you are using.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfb7d31c489ce387e3ca7981ab56df426c824263" translate="yes" xml:space="preserve">
          <source>Some client programs, like psql, attempt to connect twice while determining if a password is required, so duplicate &amp;ldquo;connection received&amp;rdquo; messages do not necessarily indicate a problem.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c43ec6be8964e23d2bba782762fe004df6ab23d3" translate="yes" xml:space="preserve">
          <source>Some commands take an SQL identifier (such as a table name) as argument. These arguments follow the syntax rules of SQL: Unquoted letters are forced to lowercase, while double quotes (&lt;code&gt;&quot;&lt;/code&gt;) protect letters from case conversion and allow incorporation of whitespace into the identifier. Within double quotes, paired double quotes reduce to a single double quote in the resulting name. For example, &lt;code&gt;FOO&quot;BAR&quot;BAZ&lt;/code&gt; is interpreted as &lt;code&gt;fooBARbaz&lt;/code&gt;, and &lt;code&gt;&quot;A weird&quot;&quot; name&quot;&lt;/code&gt; becomes &lt;code&gt;A weird&quot; name&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="186353a504f0c7029783349653466298212002b7" translate="yes" xml:space="preserve">
          <source>Some comparison-related functions are also available, as shown in &lt;a href=&quot;functions-comparison#FUNCTIONS-COMPARISON-FUNC-TABLE&quot;&gt;Table 9.3&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2c4e01e43acca2c293b4331040f91820301e727" translate="yes" xml:space="preserve">
          <source>Some examples follow.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46355adbf6a9403e9485a04889f466fe8dde4386" translate="yes" xml:space="preserve">
          <source>Some examples of &lt;code&gt;pg_hba.conf&lt;/code&gt; entries are shown in &lt;a href=&quot;auth-pg-hba-conf#EXAMPLE-PG-HBA.CONF&quot;&gt;Example 20.1&lt;/a&gt;. See the next section for details on the different authentication methods.</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
