<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="postgresql">
    <body>
      <group id="postgresql">
        <trans-unit id="23fe24f85cebd351b3b05171efa5d22c8435d8a9" translate="yes" xml:space="preserve">
          <source>This option is never essential, since clusterdb will automatically prompt for a password if the server demands password authentication. However, clusterdb will waste a connection attempt finding out that the server wants a password. In some cases it is worth typing &lt;code&gt;-W&lt;/code&gt; to avoid the extra connection attempt.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f254a9b047ca402de17693af7a288974f935b320" translate="yes" xml:space="preserve">
          <source>This option is never essential, since createdb will automatically prompt for a password if the server demands password authentication. However, createdb will waste a connection attempt finding out that the server wants a password. In some cases it is worth typing &lt;code&gt;-W&lt;/code&gt; to avoid the extra connection attempt.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="157ee8063fde732007da77e5a7853bb1478d9344" translate="yes" xml:space="preserve">
          <source>This option is never essential, since createuser will automatically prompt for a password if the server demands password authentication. However, createuser will waste a connection attempt finding out that the server wants a password. In some cases it is worth typing &lt;code&gt;-W&lt;/code&gt; to avoid the extra connection attempt.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a83ff3482275d0139a05f884462c1cbde3746882" translate="yes" xml:space="preserve">
          <source>This option is never essential, since dropdb will automatically prompt for a password if the server demands password authentication. However, dropdb will waste a connection attempt finding out that the server wants a password. In some cases it is worth typing &lt;code&gt;-W&lt;/code&gt; to avoid the extra connection attempt.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e23fb76571b4a9d33af9f1ddf6f1f50ba682fde" translate="yes" xml:space="preserve">
          <source>This option is never essential, since dropuser will automatically prompt for a password if the server demands password authentication. However, dropuser will waste a connection attempt finding out that the server wants a password. In some cases it is worth typing &lt;code&gt;-W&lt;/code&gt; to avoid the extra connection attempt.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7fdd419219d3924efcfbfee9fcca516b8868b92" translate="yes" xml:space="preserve">
          <source>This option is never essential, since pg_basebackup will automatically prompt for a password if the server demands password authentication. However, pg_basebackup will waste a connection attempt finding out that the server wants a password. In some cases it is worth typing &lt;code&gt;-W&lt;/code&gt; to avoid the extra connection attempt.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e876a82eec6b6016da4b2fff5952e7b1eae2117" translate="yes" xml:space="preserve">
          <source>This option is never essential, since pg_dump will automatically prompt for a password if the server demands password authentication. However, pg_dump will waste a connection attempt finding out that the server wants a password. In some cases it is worth typing &lt;code&gt;-W&lt;/code&gt; to avoid the extra connection attempt.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27e4143fa6008ebc17a6f2bd2303d88c172e5590" translate="yes" xml:space="preserve">
          <source>This option is never essential, since pg_dumpall will automatically prompt for a password if the server demands password authentication. However, pg_dumpall will waste a connection attempt finding out that the server wants a password. In some cases it is worth typing &lt;code&gt;-W&lt;/code&gt; to avoid the extra connection attempt.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb179ceeb157dc043c6e084a77ba22cf202bd214" translate="yes" xml:space="preserve">
          <source>This option is never essential, since pg_receivewal will automatically prompt for a password if the server demands password authentication. However, pg_receivewal will waste a connection attempt finding out that the server wants a password. In some cases it is worth typing &lt;code&gt;-W&lt;/code&gt; to avoid the extra connection attempt.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f63e7019adc4bf629542d951d6d5ad2c631d4cd" translate="yes" xml:space="preserve">
          <source>This option is never essential, since pg_recvlogical will automatically prompt for a password if the server demands password authentication. However, pg_recvlogical will waste a connection attempt finding out that the server wants a password. In some cases it is worth typing &lt;code&gt;-W&lt;/code&gt; to avoid the extra connection attempt.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c89398ef361ce35bb760f8007920d0c1cab1f07e" translate="yes" xml:space="preserve">
          <source>This option is never essential, since pg_restore will automatically prompt for a password if the server demands password authentication. However, pg_restore will waste a connection attempt finding out that the server wants a password. In some cases it is worth typing &lt;code&gt;-W&lt;/code&gt; to avoid the extra connection attempt.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95a2ae73f9f018a5089634f6a2f0aa09f43ae7cf" translate="yes" xml:space="preserve">
          <source>This option is never essential, since psql will automatically prompt for a password if the server demands password authentication. However, psql will waste a connection attempt finding out that the server wants a password. In some cases it is worth typing &lt;code&gt;-W&lt;/code&gt; to avoid the extra connection attempt.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a901f15557b845dee3a28d047b1c6eaa3bd5227" translate="yes" xml:space="preserve">
          <source>This option is never essential, since reindexdb will automatically prompt for a password if the server demands password authentication. However, reindexdb will waste a connection attempt finding out that the server wants a password. In some cases it is worth typing &lt;code&gt;-W&lt;/code&gt; to avoid the extra connection attempt.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbc79a1fac3829f416356bb18d094f1758bd877c" translate="yes" xml:space="preserve">
          <source>This option is never essential, since vacuumdb will automatically prompt for a password if the server demands password authentication. However, vacuumdb will waste a connection attempt finding out that the server wants a password. In some cases it is worth typing &lt;code&gt;-W&lt;/code&gt; to avoid the extra connection attempt.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdca7882144557a657e3bff6adae96d14c901833" translate="yes" xml:space="preserve">
          <source>This option is not beneficial for a dump which is intended only for disaster recovery. It could be useful for a dump used to load a copy of the database for reporting or other read-only load sharing while the original database continues to be updated. Without it the dump may reflect a state which is not consistent with any serial execution of the transactions eventually committed. For example, if batch processing techniques are used, a batch may show as closed in the dump without all of the items which are in the batch appearing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1596ca6548e67cb8844cfbb65595e0b71113d97f" translate="yes" xml:space="preserve">
          <source>This option is obsolete but still accepted for backward compatibility.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e30db5eac1f2738189322576d23177c26d58b051" translate="yes" xml:space="preserve">
          <source>This option is obsolete but still accepted for backwards compatibility.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="227e2cf57ba512d3c77422f415b31285dea4085a" translate="yes" xml:space="preserve">
          <source>This option is only allowed if there is at least one &lt;code&gt;UNIQUE&lt;/code&gt; index on the materialized view which uses only column names and includes all rows; that is, it must not be an expression index or include a &lt;code&gt;WHERE&lt;/code&gt; clause.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4296d287e293665ac5a27dd6a9adf50943b9468" translate="yes" xml:space="preserve">
          <source>This option is only available for servers running PostgreSQL 12 and later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b30b52665fa2ce02b72d1a4b69125f19a948988b" translate="yes" xml:space="preserve">
          <source>This option is only available for servers running PostgreSQL 9.6 and later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37e0bc099903a971ee1851f56b57d535fe28abb3" translate="yes" xml:space="preserve">
          <source>This option is only meaningful for the plain-text format. For the archive formats, you can specify the option when you call &lt;code&gt;pg_restore&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32d675434a5906af1a52811945caa7f3758ed1a6" translate="yes" xml:space="preserve">
          <source>This option is relevant only when creating a data-only dump. It instructs pg_dump to include commands to temporarily disable triggers on the target tables while the data is reloaded. Use this if you have referential integrity checks or other triggers on the tables that you do not want to invoke during data reload.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e55f65ea72f8a90277e680e4be1296a1699e5d3e" translate="yes" xml:space="preserve">
          <source>This option is relevant only when creating a data-only dump. It instructs pg_dumpall to include commands to temporarily disable triggers on the target tables while the data is reloaded. Use this if you have referential integrity checks or other triggers on the tables that you do not want to invoke during data reload.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36d07ffa5564debc3dc316ccc0efca57402fc186" translate="yes" xml:space="preserve">
          <source>This option is relevant only when dumping the contents of a table which has row security. By default, pg_dump will set &lt;a href=&quot;runtime-config-client#GUC-ROW-SECURITY&quot;&gt;row_security&lt;/a&gt; to off, to ensure that all data is dumped from the table. If the user does not have sufficient privileges to bypass row security, then an error is thrown. This parameter instructs pg_dump to set &lt;a href=&quot;runtime-config-client#GUC-ROW-SECURITY&quot;&gt;row_security&lt;/a&gt; to on instead, allowing the user to dump the parts of the contents of the table that they have access to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7d02ec8b27bc6590e144e516d9c202d42175dc3" translate="yes" xml:space="preserve">
          <source>This option is relevant only when performing a data-only restore. It instructs pg_restore to execute commands to temporarily disable triggers on the target tables while the data is reloaded. Use this if you have referential integrity checks or other triggers on the tables that you do not want to invoke during data reload.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="215e331321ddcb53a6c0155b5517f0808745ff2d" translate="yes" xml:space="preserve">
          <source>This option is relevant only when restoring the contents of a table which has row security. By default, pg_restore will set &lt;a href=&quot;runtime-config-client#GUC-ROW-SECURITY&quot;&gt;row_security&lt;/a&gt; to off, to ensure that all data is restored in to the table. If the user does not have sufficient privileges to bypass row security, then an error is thrown. This parameter instructs pg_restore to set &lt;a href=&quot;runtime-config-client#GUC-ROW-SECURITY&quot;&gt;row_security&lt;/a&gt; to on instead, allowing the user to attempt to restore the contents of the table with row security enabled. This might still fail if the user does not have the right to insert the rows from the dump into the table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="669c8d507812e76e70b7a6698088435172bcb4c4" translate="yes" xml:space="preserve">
          <source>This option is required.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8e2f962f48b10705c69e42af3599ebbe139dded" translate="yes" xml:space="preserve">
          <source>This option is similar to, but for historical reasons not identical to, specifying &lt;code&gt;--section=data&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcf8c055342b65365f647de20886432a97a9fb3f" translate="yes" xml:space="preserve">
          <source>This option is the inverse of &lt;code&gt;--data-only&lt;/code&gt;. It is similar to, but for historical reasons not identical to, specifying &lt;code&gt;--section=pre-data --section=post-data&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0ef2836d01c5b66262cf8fb0f99f24d0487c16e" translate="yes" xml:space="preserve">
          <source>This option is useful to analyze a database that was newly populated from a restored dump or by &lt;code&gt;pg_upgrade&lt;/code&gt;. This option will try to create some statistics as fast as possible, to make the database usable, and then produce full statistics in the subsequent stages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="077e267cb6b3ecfbfb03040a23b63baaeb817565" translate="yes" xml:space="preserve">
          <source>This option is useful when needing to synchronize the dump with a logical replication slot (see &lt;a href=&quot;https://www.postgresql.org/docs/12/logicaldecoding.html&quot;&gt;Chapter 48&lt;/a&gt;) or with a concurrent session.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3633c4f24d10d4cb48c93fba1de68cf9fa92f151" translate="yes" xml:space="preserve">
          <source>This option may not be used when the materialized view is not already populated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3512c53edd5cba187313504c9c38bb9bebba16b9" translate="yes" xml:space="preserve">
          <source>This option prevents the creation of a temporary replication slot during the backup even if it's supported by the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3c0cee7bd9ef9a16e32247c016aeb298ec61871" translate="yes" xml:space="preserve">
          <source>This option should be specified if the replication client of pg_receivewal is configured on the server as a synchronous standby, to ensure that timely feedback is sent to the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e2f9ae86d0526f44e2335b7a077c0c7bf363ea0" translate="yes" xml:space="preserve">
          <source>This option specifies the authentication method for local users via TCP/IP connections used in &lt;code&gt;pg_hba.conf&lt;/code&gt; (&lt;code&gt;host&lt;/code&gt; lines).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="804c43ea411a36eef9c28b7d23a8aedda99cd7ef" translate="yes" xml:space="preserve">
          <source>This option specifies the authentication method for local users via Unix-domain socket connections used in &lt;code&gt;pg_hba.conf&lt;/code&gt; (&lt;code&gt;local&lt;/code&gt; lines).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73ac8a9ea2f27acca3addec852f67d4b056e3a63" translate="yes" xml:space="preserve">
          <source>This option specifies the default authentication method for local users used in &lt;code&gt;pg_hba.conf&lt;/code&gt; (&lt;code&gt;host&lt;/code&gt; and &lt;code&gt;local&lt;/code&gt; lines). &lt;code&gt;initdb&lt;/code&gt; will prepopulate &lt;code&gt;pg_hba.conf&lt;/code&gt; entries using the specified authentication method for non-replication as well as replication connections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33880c0202e463453735147893fedee96072b505" translate="yes" xml:space="preserve">
          <source>This option specifies the directory where the database cluster should be stored. This is the only information required by &lt;code&gt;initdb&lt;/code&gt;, but you can avoid writing it by setting the &lt;code&gt;PGDATA&lt;/code&gt; environment variable, which can be convenient since the database server (&lt;code&gt;postgres&lt;/code&gt;) can find the database directory later by the same variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2481fe81f534e308eab6b927c279c7c516c6f6c9" translate="yes" xml:space="preserve">
          <source>This option specifies the directory where the write-ahead log should be stored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5ab029306c7aba204799ea5d9a25ae6a49ed455" translate="yes" xml:space="preserve">
          <source>This option specifies the number of rows &lt;code&gt;postgres_fdw&lt;/code&gt; should get in each fetch operation. It can be specified for a foreign table or a foreign server. The option specified on a table overrides an option specified for the server. The default is &lt;code&gt;100&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="647df7560822159475f98885467e55eb675890f8" translate="yes" xml:space="preserve">
          <source>This option specifies the target data directory that is synchronized with the source. The target server must be shut down cleanly before running pg_rewind</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff01b505d4bc957630a4ef6552d6b1f3f78071f5" translate="yes" xml:space="preserve">
          <source>This option specifies whether the final function is a pure function that does not modify its arguments. &lt;code&gt;READ_ONLY&lt;/code&gt; indicates it does not; the other two values indicate that it may change the transition state value. See &lt;a href=&quot;sql-createaggregate#SQL-CREATEAGGREGATE-NOTES&quot;&gt;Notes&lt;/a&gt; below for more detail. The default is &lt;code&gt;READ_ONLY&lt;/code&gt;, except for ordered-set aggregates, for which the default is &lt;code&gt;READ_WRITE&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7f68a96aa921444e2d40ac76a43185ab6a9f312" translate="yes" xml:space="preserve">
          <source>This option will make no difference if there are no read-write transactions active when pg_dump is started. If read-write transactions are active, the start of the dump may be delayed for an indeterminate length of time. Once running, performance with or without the switch is the same.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1a6fd10746c87d481fd1e3f7d6dfee998b43bb9" translate="yes" xml:space="preserve">
          <source>This option, which can be specified for a column of a foreign table, gives the column name to use for the column on the remote server. If this option is omitted, the column's name is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4af1de2d1bcdacfc86aa091d4dc53d1aa115b546" translate="yes" xml:space="preserve">
          <source>This option, which can be specified for a foreign server, is a numeric value that is added to the estimated startup cost of any foreign-table scan on that server. This represents the additional overhead of establishing a connection, parsing and planning the query on the remote side, etc. The default value is &lt;code&gt;100&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca3fd60b70e15baee78bd32e8d43582b1c2df725" translate="yes" xml:space="preserve">
          <source>This option, which can be specified for a foreign server, is a numeric value that is used as extra cost per-tuple for foreign-table scans on that server. This represents the additional overhead of data transfer between servers. You might increase or decrease this number to reflect higher or lower network delay to the remote server. The default value is &lt;code&gt;0.01&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6db445412c679c14afee682db0f908555cd61891" translate="yes" xml:space="preserve">
          <source>This option, which can be specified for a foreign table or a foreign server, controls whether &lt;code&gt;postgres_fdw&lt;/code&gt; issues remote &lt;code&gt;EXPLAIN&lt;/code&gt; commands to obtain cost estimates. A setting for a foreign table overrides any setting for its server, but only for that table. The default is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b3bc87c793b518f8cb8ef921546c45361e5e8ae" translate="yes" xml:space="preserve">
          <source>This option, which can be specified for a foreign table, gives the schema name to use for the foreign table on the remote server. If this option is omitted, the name of the foreign table's schema is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9bf0730e389ac20110b162cce98c39dc1dadc6b" translate="yes" xml:space="preserve">
          <source>This option, which can be specified for a foreign table, gives the table name to use for the foreign table on the remote server. If this option is omitted, the foreign table's name is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03ad95dc874ed74ab0a774486c7f7e813aede7b9" translate="yes" xml:space="preserve">
          <source>This optional clause specifies the table access method to use to store the contents for the new materialized view; the method needs be an access method of type &lt;code&gt;TABLE&lt;/code&gt;. See &lt;a href=&quot;tableam&quot;&gt;Chapter 60&lt;/a&gt; for more information. If this option is not specified, the default table access method is chosen for the new materialized view. See &lt;a href=&quot;runtime-config-client#GUC-DEFAULT-TABLE-ACCESS-METHOD&quot;&gt;default_table_access_method&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55edaedc2635dc462befb01330512122e702699e" translate="yes" xml:space="preserve">
          <source>This optional clause specifies the table access method to use to store the contents for the new table; the method needs be an access method of type &lt;code&gt;TABLE&lt;/code&gt;. See &lt;a href=&quot;tableam&quot;&gt;Chapter 60&lt;/a&gt; for more information. If this option is not specified, the default table access method is chosen for the new table. See &lt;a href=&quot;runtime-config-client#GUC-DEFAULT-TABLE-ACCESS-METHOD&quot;&gt;default_table_access_method&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d07ee1bbba1bc08763833fec13cc7baed7c30f7" translate="yes" xml:space="preserve">
          <source>This optional parameter specifies a shell command that will be executed at every restartpoint. The purpose of &lt;code&gt;archive_cleanup_command&lt;/code&gt; is to provide a mechanism for cleaning up old archived WAL files that are no longer needed by the standby server. Any &lt;code&gt;%r&lt;/code&gt; is replaced by the name of the file containing the last valid restart point. That is the earliest file that must be &lt;em&gt;kept&lt;/em&gt; to allow a restore to be restartable, and so all files earlier than &lt;code&gt;%r&lt;/code&gt; may be safely removed. This information can be used to truncate the archive to just the minimum required to support restart from the current restore. The &lt;a href=&quot;pgarchivecleanup&quot;&gt;pg_archivecleanup&lt;/a&gt; module is often used in &lt;code&gt;archive_cleanup_command&lt;/code&gt; for single-standby configurations, for example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a73490037361c0f29250fb41ec57cf1fa01ef705" translate="yes" xml:space="preserve">
          <source>This package has applications to astronomical databases as well. Astronomers will probably want to change &lt;code&gt;earth()&lt;/code&gt; to return a radius of &lt;code&gt;180/pi()&lt;/code&gt; so that distances are in degrees.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccbc9227762cc1b1b338f8650f8f4de4947b9bb4" translate="yes" xml:space="preserve">
          <source>This page describes usage of cursors at the SQL command level. If you are trying to use cursors inside a PL/pgSQL function, the rules are different &amp;mdash; see &lt;a href=&quot;https://www.postgresql.org/docs/12/plpgsql-cursors.html&quot;&gt;Section 42.7&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56562eeab71ceb4b4deb48e8b0753e859819b0d5" translate="yes" xml:space="preserve">
          <source>This page describes usage of cursors at the SQL command level. If you are trying to use cursors inside a PL/pgSQL function, the rules are different &amp;mdash; see &lt;a href=&quot;https://www.postgresql.org/docs/12/plpgsql-cursors.html#PLPGSQL-CURSOR-USING&quot;&gt;Section 42.7.3&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f12b1cf7624fdc2fc587dd45a6d547cd93a31157" translate="yes" xml:space="preserve">
          <source>This parameter adjusts the number of digits used for textual output of floating-point values, including &lt;code&gt;float4&lt;/code&gt;, &lt;code&gt;float8&lt;/code&gt;, and geometric data types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c8c19d46b2082ce8ad9cb949c44fbf4a9d2bc51" translate="yes" xml:space="preserve">
          <source>This parameter can be changed at any time; the behavior for any one transaction is determined by the setting in effect when it commits. It is therefore possible, and useful, to have some transactions commit synchronously and others asynchronously. For example, to make a single multistatement transaction commit asynchronously when the default is the opposite, issue &lt;code&gt;SET LOCAL synchronous_commit TO OFF&lt;/code&gt; within the transaction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c374abd82fae67b6ad47305ef8df0f9c2c332166" translate="yes" xml:space="preserve">
          <source>This parameter can be changed at run time by superusers, but a setting done that way will only persist until the end of the client connection, so this method should be reserved for development purposes. The recommended way to set this parameter is in the &lt;code&gt;postgresql.conf&lt;/code&gt; configuration file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb2aeee56cb3f5ebc1b1a01c4c8dad28553fc839" translate="yes" xml:space="preserve">
          <source>This parameter can only be set at server start.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="548ece31c9a5607a8e7aaa0cea1df9acffd23d07" translate="yes" xml:space="preserve">
          <source>This parameter can only be set at server start. The default value is &lt;code&gt;off&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c2e150a470aea3c7b743c7181598f9938b94089" translate="yes" xml:space="preserve">
          <source>This parameter can only be set at server start. This setting has no effect if the server is not in standby mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aea2a5594193af5a590a3ea36df84b74060812a5" translate="yes" xml:space="preserve">
          <source>This parameter can only be set in the &lt;code&gt;postgresql.conf&lt;/code&gt; file or on the server command line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc5df5bbc83b51e3d05d700128363b10537046bc" translate="yes" xml:space="preserve">
          <source>This parameter can only be set in the &lt;code&gt;postgresql.conf&lt;/code&gt; file or on the server command line. It is ignored unless &lt;code&gt;archive_mode&lt;/code&gt; was enabled at server start. If &lt;code&gt;archive_command&lt;/code&gt; is an empty string (the default) while &lt;code&gt;archive_mode&lt;/code&gt; is enabled, WAL archiving is temporarily disabled, but the server continues to accumulate WAL segment files in the expectation that a command will soon be provided. Setting &lt;code&gt;archive_command&lt;/code&gt; to a command that does nothing but return true, e.g. &lt;code&gt;/bin/true&lt;/code&gt; (&lt;code&gt;REM&lt;/code&gt; on Windows), effectively disables archiving, but also breaks the chain of WAL files needed for archive recovery, so it should only be used in unusual circumstances.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e07235f8bb7f2137e8d29b1c48712e024bfd7c79" translate="yes" xml:space="preserve">
          <source>This parameter can only be set in the &lt;code&gt;postgresql.conf&lt;/code&gt; file or on the server command line. The default is &lt;code&gt;on&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab121fa8e3ea34fd830e0e6103b67d7f977831b1" translate="yes" xml:space="preserve">
          <source>This parameter controls the default deferrable status of each new transaction. It currently has no effect on read-write transactions or those operating at isolation levels lower than &lt;code&gt;serializable&lt;/code&gt;. The default is &lt;code&gt;off&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4b6ea430b61a904ec5971253ee54b2fa2eddfa5" translate="yes" xml:space="preserve">
          <source>This parameter determines whether the passphrase command set by &lt;code&gt;ssl_passphrase_command&lt;/code&gt; will also be called during a configuration reload if a key file needs a passphrase. If this parameter is off (the default), then &lt;code&gt;ssl_passphrase_command&lt;/code&gt; will be ignored during a reload and the SSL configuration will not be reloaded if a passphrase is needed. That setting is appropriate for a command that requires a TTY for prompting, which might not be available when the server is running. Setting this parameter to on might be appropriate if the passphrase is obtained from a file, for example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4f4eed730ec55ccc4eaff2dacaa08b0b2fcb82f" translate="yes" xml:space="preserve">
          <source>This parameter determines which DML operations will be published by the new publication to the subscribers. The value is comma-separated list of operations. The allowed operations are &lt;code&gt;insert&lt;/code&gt;, &lt;code&gt;update&lt;/code&gt;, &lt;code&gt;delete&lt;/code&gt;, and &lt;code&gt;truncate&lt;/code&gt;. The default is to publish all actions, and so the default value for this option is &lt;code&gt;'insert, update, delete, truncate'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c366805ffcbad04565bd73b6d69694df15ae916" translate="yes" xml:space="preserve">
          <source>This parameter enables &lt;code&gt;sepgsql&lt;/code&gt; to function in permissive mode, regardless of the system setting. The default is off. This parameter can only be set in the &lt;code&gt;postgresql.conf&lt;/code&gt; file or on the server command line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8293e99f1916de3cd3eb1e1f2ed9f1e458fe46c" translate="yes" xml:space="preserve">
          <source>This parameter enables per-database user names. It is off by default. This parameter can only be set in the &lt;code&gt;postgresql.conf&lt;/code&gt; file or on the server command line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f5fcb1a1b2c04d28c8162ce15f61ea3ecacd8ad" translate="yes" xml:space="preserve">
          <source>This parameter enables the &lt;em&gt;logging collector&lt;/em&gt;, which is a background process that captures log messages sent to stderr and redirects them into log files. This approach is often more useful than logging to syslog, since some types of messages might not appear in syslog output. (One common example is dynamic-linker failure messages; another is error messages produced by scripts such as &lt;code&gt;archive_command&lt;/code&gt;.) This parameter can only be set at server start.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b0de510e67bd8744ec5eabde4b996ce5f2b54bc" translate="yes" xml:space="preserve">
          <source>This parameter enables the printing of audit messages regardless of the system policy settings. The default is off, which means that messages will be printed according to the system settings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38b076e09722f67dcc2931b6f7d49ce3816bbff6" translate="yes" xml:space="preserve">
          <source>This parameter forces all possible logging to be turned on, regardless of the system policy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b77a5363fdf0aac9e0a3daf60d7960abab567a4" translate="yes" xml:space="preserve">
          <source>This parameter is intended for use with streaming replication deployments; however, if the parameter is specified it will be honored in all cases except crash recovery. &lt;code&gt;hot_standby_feedback&lt;/code&gt; will be delayed by use of this feature which could lead to bloat on the master; use both together with care.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9661b0520a182dcd9a1573ee14abaaf7af72f4ef" translate="yes" xml:space="preserve">
          <source>This parameter is intended to be used to check for bugs in the WAL redo routines. When enabled, full-page images of any buffers modified in conjunction with the WAL record are added to the record. If the record is subsequently replayed, the system will first apply each record and then test whether the buffers modified by the record match the stored images. In certain cases (such as hint bits), minor variations are acceptable, and will be ignored. Any unexpected differences will result in a fatal error, terminating recovery.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79e45ac588c210513ee2f2dfb89a49d85d30136b" translate="yes" xml:space="preserve">
          <source>This parameter is irrelevant on Windows, which does not have Unix-domain sockets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d64ae81fa444da28c76340e9acb4f864a787cd0" translate="yes" xml:space="preserve">
          <source>This parameter is irrelevant on systems, notably Solaris as of Solaris 10, that ignore socket permissions entirely. There, one can achieve a similar effect by pointing &lt;code&gt;unix_socket_directories&lt;/code&gt; to a directory having search permission limited to the desired audience. This parameter is also irrelevant on Windows, which does not have Unix-domain sockets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dd094f0736aa3ae7edd4ff5cd79706a00b54ce9" translate="yes" xml:space="preserve">
          <source>This parameter is normally on. When set to &lt;code&gt;off&lt;/code&gt;, it disables validation of the function body string during &lt;a href=&quot;sql-createfunction&quot;&gt;CREATE FUNCTION&lt;/a&gt;. Disabling validation avoids side effects of the validation process and avoids false positives due to problems such as forward references. Set this parameter to &lt;code&gt;off&lt;/code&gt; before loading functions on behalf of other users; pg_dump does so automatically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="757f13945c2c0187d0950790cc03fde26586d7a4" translate="yes" xml:space="preserve">
          <source>This parameter is not supported on Windows, and must be zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2763e8b9da5e6a86b4f3be45fa54afbb6338381" translate="yes" xml:space="preserve">
          <source>This parameter is only available if the &lt;code&gt;BTREE_BUILD_STATS&lt;/code&gt; macro was defined when PostgreSQL was compiled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c80b12aeb2b9de43621c9a7ca80fead69181cd4d" translate="yes" xml:space="preserve">
          <source>This parameter is only available if the &lt;code&gt;LOCK_DEBUG&lt;/code&gt; macro was defined when PostgreSQL was compiled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c8a9b81edbcb0f5ee50f2aa2c3229e2b238c0d5" translate="yes" xml:space="preserve">
          <source>This parameter is required.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="230b46508e1bcacd6e7909740fdc39adfae605d5" translate="yes" xml:space="preserve">
          <source>This parameter is useful in configurations where a node in recovery needs to control the amount of time to wait for new WAL data to be available. For example, in archive recovery, it is possible to make the recovery more responsive in the detection of a new WAL log file by reducing the value of this parameter. On a system with low WAL activity, increasing it reduces the amount of requests necessary to access WAL archives, something useful for example in cloud environments where the amount of times an infrastructure is accessed is taken into account.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60b8dda68ddec78bdd153122213269123706aba2" translate="yes" xml:space="preserve">
          <source>This parameter may be either &lt;code&gt;local&lt;/code&gt; or &lt;code&gt;cascaded&lt;/code&gt;, and is equivalent to specifying &lt;code&gt;WITH [ CASCADED | LOCAL ] CHECK OPTION&lt;/code&gt; (see below). This option can be changed on existing views using &lt;a href=&quot;sql-alterview&quot;&gt;ALTER VIEW&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8076b1a53637e369327b419272c25be1f35d885" translate="yes" xml:space="preserve">
          <source>This parameter specifies a list of standby servers using either of the following syntaxes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3119205c74e3feadc21f1edb96559651e07399f" translate="yes" xml:space="preserve">
          <source>This parameter specifies a shell command that will be executed once only at the end of recovery. This parameter is optional. The purpose of the &lt;code&gt;recovery_end_command&lt;/code&gt; is to provide a mechanism for cleanup following replication or recovery. Any &lt;code&gt;%r&lt;/code&gt; is replaced by the name of the file containing the last valid restart point, like in &lt;a href=&quot;runtime-config-wal#GUC-ARCHIVE-CLEANUP-COMMAND&quot;&gt;archive_cleanup_command&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc3d884be2df2669703142223fbc549ce1860529" translate="yes" xml:space="preserve">
          <source>This parameter specifies that recovery should end as soon as a consistent state is reached, i.e. as early as possible. When restoring from an online backup, this means the point where taking the backup ended.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="038ead23d053aaeb92ffc414e5b17ac7f1401e33" translate="yes" xml:space="preserve">
          <source>This parameter specifies the LSN of the write-ahead log location up to which recovery will proceed. The precise stopping point is also influenced by &lt;a href=&quot;runtime-config-wal#GUC-RECOVERY-TARGET-INCLUSIVE&quot;&gt;recovery_target_inclusive&lt;/a&gt;. This parameter is parsed using the system data type &lt;a href=&quot;datatype-pg-lsn&quot;&gt;&lt;code&gt;pg_lsn&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efffdc4221077284f352653adef6ab331dce1918" translate="yes" xml:space="preserve">
          <source>This parameter specifies the default table access method to use when creating tables or materialized views if the &lt;code&gt;CREATE&lt;/code&gt; command does not explicitly specify an access method, or when &lt;code&gt;SELECT ... INTO&lt;/code&gt; is used, which does not allow to specify a table access method. The default is &lt;code&gt;heap&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5eccd6d9a8a05839ca4090c77807db10a5ab201b" translate="yes" xml:space="preserve">
          <source>This parameter specifies the named restore point (created with &lt;code&gt;pg_create_restore_point()&lt;/code&gt;) to which recovery will proceed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="867f446a2e7adc40927cc70cf6283de855e50f8d" translate="yes" xml:space="preserve">
          <source>This parameter specifies the time stamp up to which recovery will proceed. The precise stopping point is also influenced by &lt;a href=&quot;runtime-config-wal#GUC-RECOVERY-TARGET-INCLUSIVE&quot;&gt;recovery_target_inclusive&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8874d47b3d5a339b6f4f727528a118f988fbf4ff" translate="yes" xml:space="preserve">
          <source>This parameter specifies the transaction ID up to which recovery will proceed. Keep in mind that while transaction IDs are assigned sequentially at transaction start, transactions can complete in a different numeric order. The transactions that will be recovered are those that committed before (and optionally including) the specified one. The precise stopping point is also influenced by &lt;a href=&quot;runtime-config-wal#GUC-RECOVERY-TARGET-INCLUSIVE&quot;&gt;recovery_target_inclusive&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8107ac8a053e104cbe77d39e7e4ed7f575d4cd68" translate="yes" xml:space="preserve">
          <source>This parses the document text in its parameter and returns true if the document is well-formed XML. (Note: this is an alias for the standard PostgreSQL function &lt;code&gt;xml_is_well_formed()&lt;/code&gt;. The name &lt;code&gt;xml_valid()&lt;/code&gt; is technically incorrect since validity and well-formedness have different meanings in XML.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55ccf48fdd4beed006b2ceea636ca3d5535efe1b" translate="yes" xml:space="preserve">
          <source>This problem can be fixed by creating a statistics object that directs &lt;code&gt;ANALYZE&lt;/code&gt; to calculate functional-dependency multivariate statistics on the two columns:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc382ec8b1a79d496a545a65f41a47da71a48e61" translate="yes" xml:space="preserve">
          <source>This process is inherently nondeterministic, because of the randomized choices made during both the initial population selection and subsequent &amp;ldquo;mutation&amp;rdquo; of the best candidates. To avoid surprising changes of the selected plan, each run of the GEQO algorithm restarts its random number generator with the current &lt;a href=&quot;runtime-config-query#GUC-GEQO-SEED&quot;&gt;geqo_seed&lt;/a&gt; parameter setting. As long as &lt;code&gt;geqo_seed&lt;/code&gt; and the other GEQO parameters are kept fixed, the same plan will be generated for a given query (and other planner inputs such as statistics). To experiment with different search paths, try changing &lt;code&gt;geqo_seed&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c97c4b9be9f2b4404173b6ba238590cba29edc4b" translate="yes" xml:space="preserve">
          <source>This produces a text array if there's a match, or &lt;code&gt;NULL&lt;/code&gt; if not, the same as &lt;code&gt;regexp_match()&lt;/code&gt; would do. Without the sub-select, this query would produce no output at all for table rows without a match, which is typically not the desired behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc14695b218efe7dec594359c6d20dcaf55f8c15" translate="yes" xml:space="preserve">
          <source>This provides the full power of the SQL query mechanism (&lt;a href=&quot;https://www.postgresql.org/docs/12/queries.html&quot;&gt;Chapter 7&lt;/a&gt;) for computing the rows to be inserted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9d073846645e6925e79e0c3d11f6f147a90ca99" translate="yes" xml:space="preserve">
          <source>This query can use an index if one has been defined on the result of the &lt;code&gt;lower(col1)&lt;/code&gt; function:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="685680c205a35176edb0e50018d5cb6373c36816" translate="yes" xml:space="preserve">
          <source>This query could also be written</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbd78ff71b7c52624fbdd5dd58209049c5f353fd" translate="yes" xml:space="preserve">
          <source>This query effectively moves rows from &lt;code&gt;products&lt;/code&gt; to &lt;code&gt;products_log&lt;/code&gt;. The &lt;code&gt;DELETE&lt;/code&gt; in &lt;code&gt;WITH&lt;/code&gt; deletes the specified rows from &lt;code&gt;products&lt;/code&gt;, returning their contents by means of its &lt;code&gt;RETURNING&lt;/code&gt; clause; and then the primary query reads that output and inserts it into &lt;code&gt;products_log&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="022c5b0eea8d62f63af6a712dbf2b1ba8308d986" translate="yes" xml:space="preserve">
          <source>This query is called a &lt;em&gt;left outer join&lt;/em&gt; because the table mentioned on the left of the join operator will have each of its rows in the output at least once, whereas the table on the right will only have those rows output that match some row of the left table. When outputting a left-table row for which there is no right-table match, empty (null) values are substituted for the right-table columns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="177886fdfa19f957f8c9f12b4d04756d588aa024" translate="yes" xml:space="preserve">
          <source>This query produces a single composite-valued column, so we might get output like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ff805b5878a400bc03d5c21def35ab5370b1a9c" translate="yes" xml:space="preserve">
          <source>This query retrieves the third quarter pay of all employees:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2463afc5c9099ca3f1d4275282addba1fd3ebec" translate="yes" xml:space="preserve">
          <source>This query shows all defined operator families and all the operators included in each family:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54e5aac3750ebc9ffb7663de95bf9e99bb00e49b" translate="yes" xml:space="preserve">
          <source>This query will loop if the &lt;code&gt;link&lt;/code&gt; relationships contain cycles. Because we require a &amp;ldquo;depth&amp;rdquo; output, just changing &lt;code&gt;UNION ALL&lt;/code&gt; to &lt;code&gt;UNION&lt;/code&gt; would not eliminate the looping. Instead we need to recognize whether we have reached the same row again while following a particular path of links. We add two columns &lt;code&gt;path&lt;/code&gt; and &lt;code&gt;cycle&lt;/code&gt; to the loop-prone query:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99e758d16683ea2408024769a36931bb47e964b5" translate="yes" xml:space="preserve">
          <source>This query will match any label path that:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fdf2ab9a1267601ff578f17895042ec3f81192c" translate="yes" xml:space="preserve">
          <source>This query will match any word in a &lt;code&gt;tsvector&lt;/code&gt; that begins with &amp;ldquo;super&amp;rdquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57af393c8374427869919ed9d1490df9f15189d7" translate="yes" xml:space="preserve">
          <source>This query will not use the custom operator. The parser will first see if there is a &lt;code&gt;mytext&lt;/code&gt;&lt;code&gt;=&lt;/code&gt;&lt;code&gt;mytext&lt;/code&gt; operator (&lt;a href=&quot;typeconv-oper#OP-RESOL-EXACT-UNKNOWN&quot;&gt;Step 2.a&lt;/a&gt;), which there is not; then it will consider the domain's base type &lt;code&gt;text&lt;/code&gt;, and see if there is a &lt;code&gt;text&lt;/code&gt;&lt;code&gt;=&lt;/code&gt;&lt;code&gt;text&lt;/code&gt; operator (&lt;a href=&quot;typeconv-oper#OP-RESOL-EXACT-DOMAIN&quot;&gt;Step 2.b&lt;/a&gt;), which there is; so it resolves the &lt;code&gt;unknown&lt;/code&gt;-type literal as &lt;code&gt;text&lt;/code&gt; and uses the &lt;code&gt;text&lt;/code&gt;&lt;code&gt;=&lt;/code&gt;&lt;code&gt;text&lt;/code&gt; operator. The only way to get the custom operator to be used is to explicitly cast the literal:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e1307cd9ebfbfd4618c4e4fa0b6171f2574b87f" translate="yes" xml:space="preserve">
          <source>This query will use the configuration set by &lt;a href=&quot;runtime-config-client#GUC-DEFAULT-TEXT-SEARCH-CONFIG&quot;&gt;default_text_search_config&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="772d10eaef65ba067a9a91fb64ad922fec135eca" translate="yes" xml:space="preserve">
          <source>This query would remove all direct and indirect subparts of a product.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31069b011561af14dacd4c6e9f8a75852a903c9c" translate="yes" xml:space="preserve">
          <source>This record matches connection attempts made using TCP/IP, but only when the connection is made with GSSAPI encryption.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9fabd411db1c8bc15edbea94205d1cbeda901f1" translate="yes" xml:space="preserve">
          <source>This record matches connection attempts made using TCP/IP, but only when the connection is made with SSL encryption.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4881dcf03549dbbd4f3907276b28052ef74959c1" translate="yes" xml:space="preserve">
          <source>This record matches connection attempts made using TCP/IP. &lt;code&gt;host&lt;/code&gt; records match SSL or non-SSL connection attempts as well as GSSAPI encrypted or non-GSSAPI encrypted connection attempts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="980501924f376459d15d0a5c5db8499b7255c1bb" translate="yes" xml:space="preserve">
          <source>This record matches connection attempts using Unix-domain sockets. Without a record of this type, Unix-domain socket connections are disallowed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0feefb6f7cf4b291e2319a9344c59b819e8fd16b" translate="yes" xml:space="preserve">
          <source>This record type has the opposite behavior of &lt;code&gt;hostgssenc&lt;/code&gt;; it only matches connection attempts made over TCP/IP that do not use GSSAPI encryption.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42de4ec30f5134f52861e4d13f8e0897d5515f16" translate="yes" xml:space="preserve">
          <source>This record type has the opposite behavior of &lt;code&gt;hostssl&lt;/code&gt;; it only matches connection attempts made over TCP/IP that do not use SSL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdac87a685f48979a0382e2f425d5422b1cea994" translate="yes" xml:space="preserve">
          <source>This reference page does not describe the embedded SQL language. See &lt;a href=&quot;https://www.postgresql.org/docs/12/ecpg.html&quot;&gt;Chapter 35&lt;/a&gt; for more information on that topic.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9455758ac29d288f9d863b3b9a52a001aafdf9d3" translate="yes" xml:space="preserve">
          <source>This references a function that is responsible for executing &amp;ldquo;inline&amp;rdquo; anonymous code blocks (&lt;a href=&quot;sql-do&quot;&gt;DO&lt;/a&gt; blocks). Zero if inline blocks are not supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1bdaa47f9aa6f846a6b5a2e5bd41bcbcff51ce1" translate="yes" xml:space="preserve">
          <source>This references a language validator function that is responsible for checking the syntax and validity of new functions when they are created. Zero if no validator is provided.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3578784aa58f3b4c597b7efb7e0f5cb34cc12bb9" translate="yes" xml:space="preserve">
          <source>This represents a not-null constraint.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0d26f9c2c294dc6bad121a60a45edf3f61c2846" translate="yes" xml:space="preserve">
          <source>This restriction applies only to cases where the planner would need to execute a user-defined operator on one or more values from &lt;code&gt;pg_statistic&lt;/code&gt;. Thus the planner is permitted to use generic statistical information, such as the fraction of null values or the number of distinct values in a column, regardless of access privileges.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c63585630ca8ea8585e254ea84b2de23abf28ba" translate="yes" xml:space="preserve">
          <source>This restriction is made to reduce ambiguity. There is still ambiguity if an &lt;code&gt;ORDER BY&lt;/code&gt; item is a simple name that could match either an output column name or a column from the table expression. The output column is used in such cases. This would only cause confusion if you use &lt;code&gt;AS&lt;/code&gt; to rename an output column to match some other table column's name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4b4e7539fae825407db528c4ddfb962b1364a94" translate="yes" xml:space="preserve">
          <source>This returns &lt;code&gt;description&lt;/code&gt; if it is not null, otherwise &lt;code&gt;short_description&lt;/code&gt; if it is not null, otherwise &lt;code&gt;(none)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56453523ba12fcdc5569aa80495dc2ebae8ffdff" translate="yes" xml:space="preserve">
          <source>This returns &lt;code&gt;true&lt;/code&gt; if the entered password is correct.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e450193561cf91ce82c2251b4755de760a2b210" translate="yes" xml:space="preserve">
          <source>This scheme has a number of advantages compared to a more straightforward approach such as allowing row values to span pages. Assuming that queries are usually qualified by comparisons against relatively small key values, most of the work of the executor will be done using the main row entry. The big values of TOASTed attributes will only be pulled out (if selected at all) at the time the result set is sent to the client. Thus, the main table is much smaller and more of its rows fit in the shared buffer cache than would be the case without any out-of-line storage. Sort sets shrink also, and sorts will more often be done entirely in memory. A little test showed that a table containing typical HTML pages and their URLs was stored in about half of the raw data size including the TOAST table, and that the main table contained only about 10% of the entire data (the URLs and some small HTML pages). There was no run time difference compared to an un-TOASTed comparison table, in which all the HTML pages were cut down to 7 kB to fit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="931ae4ac07974a516a75c4a0fb5344d4de15b384" translate="yes" xml:space="preserve">
          <source>This script allows each iteration of the transaction to reference different, randomly-chosen rows. (This example also shows why it's important for each client session to have its own variables &amp;mdash; otherwise they'd not be independently touching different rows.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a06cc7d2225d879e4baf3b5d87eff2d8fceb78b2" translate="yes" xml:space="preserve">
          <source>This script will attempt to verify that you have done all the configuration steps correctly, and then it will run the regression tests for the &lt;code&gt;sepgsql&lt;/code&gt; module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4abfec97901c9f5545ed7f9d531e3f594a60d05" translate="yes" xml:space="preserve">
          <source>This second example shows a multiplication table with rows sorted in reverse numerical order and columns with an independent, ascending numerical order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70517dd03c7a023f4b63122ef2607a8bb09453ad" translate="yes" xml:space="preserve">
          <source>This section concerns limits that are not inherent in the libxml2 library, but apply to the current implementation in PostgreSQL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9c2d04552ba91a05718611a7d18eeefc7243226" translate="yes" xml:space="preserve">
          <source>This section covers implementation details and other tricks that are useful for implementers of SP-GiST operator classes to know.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82ea52fe608db7eb14abb1bc47e7a0d7e788e138" translate="yes" xml:space="preserve">
          <source>This section covers parameters that may be used when only inserting new rows. Parameters &lt;em&gt;exclusively&lt;/em&gt; used with the &lt;code&gt;ON CONFLICT&lt;/code&gt; clause are described separately.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7807f695e34f4b1eac9463bb59bd4074598384a" translate="yes" xml:space="preserve">
          <source>This section describes a PostgreSQL-specific way to create an autoincrementing column. Another way is to use the SQL-standard identity column feature, described at &lt;a href=&quot;sql-createtable&quot;&gt;CREATE TABLE&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f81e5e9f39108fa574970aa59c9663d6ba95ff1" translate="yes" xml:space="preserve">
          <source>This section describes additional functions and operators that are useful in connection with text search.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a4f8d994f18d2a21002c3a9cf18de77dd441569" translate="yes" xml:space="preserve">
          <source>This section describes functions and operators for examining and manipulating bit strings, that is values of the types &lt;code&gt;bit&lt;/code&gt; and &lt;code&gt;bit varying&lt;/code&gt;. Aside from the usual comparison operators, the operators shown in &lt;a href=&quot;functions-bitstring#FUNCTIONS-BIT-STRING-OP-TABLE&quot;&gt;Table 9.14&lt;/a&gt; can be used. Bit string operands of &lt;code&gt;&amp;amp;&lt;/code&gt;, &lt;code&gt;|&lt;/code&gt;, and &lt;code&gt;#&lt;/code&gt; must be of equal length. When bit shifting, the original length of the string is preserved, as shown in the examples.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87c3af132af71e9d06f2e69bc9cb2fabb82cfdae" translate="yes" xml:space="preserve">
          <source>This section describes functions and operators for examining and manipulating string values. Strings in this context include values of the types &lt;code&gt;character&lt;/code&gt;, &lt;code&gt;character varying&lt;/code&gt;, and &lt;code&gt;text&lt;/code&gt;. Unless otherwise noted, all of the functions listed below work on all of these types, but be wary of potential effects of automatic space-padding when using the &lt;code&gt;character&lt;/code&gt; type. Some functions also exist natively for the bit-string types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33495850b72b20959dd4e9cc8d5ffd57ebaf33b2" translate="yes" xml:space="preserve">
          <source>This section describes functions and operators for examining and manipulating values of type &lt;code&gt;bytea&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e496c508c41ace731778c7db8e284ddab372720" translate="yes" xml:space="preserve">
          <source>This section describes functions for operating on &lt;em&gt;sequence objects&lt;/em&gt;, also called sequence generators or just sequences. Sequence objects are special single-row tables created with &lt;a href=&quot;sql-createsequence&quot;&gt;CREATE SEQUENCE&lt;/a&gt;. Sequence objects are commonly used to generate unique identifiers for rows of a table. The sequence functions, listed in &lt;a href=&quot;functions-sequence#FUNCTIONS-SEQUENCE-TABLE&quot;&gt;Table 9.50&lt;/a&gt;, provide simple, multiuser-safe methods for obtaining successive sequence values from sequence objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bbad968fc5872c67f7bc619db0866c3845188b7" translate="yes" xml:space="preserve">
          <source>This section describes functions that possibly return more than one row. The most widely used functions in this class are series generating functions, as detailed in &lt;a href=&quot;functions-srf#FUNCTIONS-SRF-SERIES&quot;&gt;Table 9.61&lt;/a&gt; and &lt;a href=&quot;functions-srf#FUNCTIONS-SRF-SUBSCRIPTS&quot;&gt;Table 9.62&lt;/a&gt;. Other, more specialized set-returning functions are described elsewhere in this manual. See &lt;a href=&quot;queries-table-expressions#QUERIES-TABLEFUNCTIONS&quot;&gt;Section 7.2.1.4&lt;/a&gt; for ways to combine multiple set-returning functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dfa6ccb5fc708e17b3c2138c2ea27f1c67b607b" translate="yes" xml:space="preserve">
          <source>This section describes several specialized constructs for making multiple comparisons between groups of values. These forms are syntactically related to the subquery forms of the previous section, but do not involve subqueries. The forms involving array subexpressions are PostgreSQL extensions; the rest are SQL-compliant. All of the expression forms documented in this section return Boolean (true/false) results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57f85eb5e6f2d55d8369ac9b3abade0eafd046e8" translate="yes" xml:space="preserve">
          <source>This section describes the SQL-compliant conditional expressions available in PostgreSQL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5da57e6e3608b9fe086d7f3b55296f911c387483" translate="yes" xml:space="preserve">
          <source>This section describes the SQL-compliant subquery expressions available in PostgreSQL. All of the expression forms documented in this section return Boolean (true/false) results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="161fd87db311749fb3c7966d6e4c44e430dceb4a" translate="yes" xml:space="preserve">
          <source>This section describes the settings that apply only for the duration of the recovery. They must be reset for any subsequent recovery you wish to perform.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec4289c6ae60dc86583f63bcfa1ab2282875f421" translate="yes" xml:space="preserve">
          <source>This section describes the storage format at the level of files and directories.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba5d2422f445963cd3ce879f09ea9078bbeca96e" translate="yes" xml:space="preserve">
          <source>This section describes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ece9977ad348713454c60a551c6e69fda61960b" translate="yes" xml:space="preserve">
          <source>This section discusses how to upgrade your database data from one PostgreSQL release to a newer one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48ea0981b8339378a93a9c98caccd890ae95e94c" translate="yes" xml:space="preserve">
          <source>This section introduces multivariate variant of MCV (most-common values) lists, a straightforward extension of the per-column statistics described in &lt;a href=&quot;row-estimation-examples&quot;&gt;Section 70.1&lt;/a&gt;. These statistics address the limitation by storing individual values, but it is naturally more expensive, both in terms of building the statistics in &lt;code&gt;ANALYZE&lt;/code&gt;, storage and planning time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7347f9c564588e3c1f50679c373c1a34d851437" translate="yes" xml:space="preserve">
          <source>This section presents some of the resulting differences you may encounter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="987de3a2c28c06d130851059547cd1a57f333d64" translate="yes" xml:space="preserve">
          <source>This section provides an overview of TOAST (The Oversized-Attribute Storage Technique).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22e2c735002756aac0cd53f48c77e94addceba8d" translate="yes" xml:space="preserve">
          <source>This section provides an overview of the page format used within PostgreSQL tables and indexes.&lt;a href=&quot;#ftn.id-1.10.21.8.2.2&quot;&gt;&lt;sup id=&quot;id-1.10.21.8.2.2&quot;&gt;[15]&lt;/sup&gt;&lt;/a&gt; Sequences and TOAST tables are formatted just like a regular table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b7ff27c909be2ddf359caa08cc7dd7e70850531" translate="yes" xml:space="preserve">
          <source>This sets only the minimum number of segments retained in &lt;code&gt;pg_wal&lt;/code&gt;; the system might need to retain more segments for WAL archival or to recover from a checkpoint. If &lt;code&gt;wal_keep_segments&lt;/code&gt; is zero (the default), the system doesn't keep any extra segments for standby purposes, so the number of old WAL segments available to standby servers is a function of the location of the previous checkpoint and status of WAL archiving. This parameter can only be set in the &lt;code&gt;postgresql.conf&lt;/code&gt; file or on the server command line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52a9b5608610577ceec8bb54f78e5c4867056fa3" translate="yes" xml:space="preserve">
          <source>This sets the number of workers that should be used to assist a parallel scan of this table. If not set, the system will determine a value based on the relation size. The actual number of workers chosen by the planner or by utility statements that use parallel scans may be less, for example due to the setting of &lt;a href=&quot;runtime-config-resource#GUC-MAX-WORKER-PROCESSES&quot;&gt;max_worker_processes&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc2b98f968a25c7e42b52a06c47e3ef33cd30253" translate="yes" xml:space="preserve">
          <source>This setting constrains the total space used at any instant by all temporary files used by a given PostgreSQL process. It should be noted that disk space used for explicit temporary tables, as opposed to temporary files used behind-the-scenes in query execution, does &lt;em&gt;not&lt;/em&gt; count against this limit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="139dfa45f922c9380ccf94aed30326869ecb29b0" translate="yes" xml:space="preserve">
          <source>This setting controls usage of the fast update technique described in &lt;a href=&quot;gin-implementation#GIN-FAST-UPDATE&quot;&gt;Section 66.4.1&lt;/a&gt;. It is a Boolean parameter: &lt;code&gt;ON&lt;/code&gt; enables fast update, &lt;code&gt;OFF&lt;/code&gt; disables it. (Alternative spellings of &lt;code&gt;ON&lt;/code&gt; and &lt;code&gt;OFF&lt;/code&gt; are allowed as described in &lt;a href=&quot;config-setting&quot;&gt;Section 19.1&lt;/a&gt;.) The default is &lt;code&gt;ON&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88c5ee85f398c9445f5170ac51b66b98052f302e" translate="yes" xml:space="preserve">
          <source>This setting does not attempt to guarantee that an error will be generated under any particular circumstances. In fact, if the correct results can be generated from (for example) a cursor which has materialized a result set, no error will be generated even if the underlying rows in the referenced table have been vacuumed away. Some tables cannot safely be vacuumed early, and so will not be affected by this setting, such as system catalogs. For such tables this setting will neither reduce bloat nor create a possibility of a &amp;ldquo;snapshot too old&amp;rdquo; error on scanning.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a17178f6f108f66e558374c8c51711f31a5f8a53" translate="yes" xml:space="preserve">
          <source>This setting does not override the behavior of &lt;code&gt;old_snapshot_threshold&lt;/code&gt; on the primary; a snapshot on the standby which exceeds the primary's age threshold can become invalid, resulting in cancellation of transactions on the standby. This is because &lt;code&gt;old_snapshot_threshold&lt;/code&gt; is intended to provide an absolute limit on the time which dead rows can contribute to bloat, which would otherwise be violated because of the configuration of a standby.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fcceaeb0992bcd64acc1981c44ad2c4975f0743" translate="yes" xml:space="preserve">
          <source>This setting has no effect if no recovery target is set. If &lt;a href=&quot;runtime-config-replication#GUC-HOT-STANDBY&quot;&gt;hot_standby&lt;/a&gt; is not enabled, a setting of &lt;code&gt;pause&lt;/code&gt; will act the same as &lt;code&gt;shutdown&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="243a6a2a0cf02294a9fc7bce185732812dc50642" translate="yes" xml:space="preserve">
          <source>This shell syntax can get tedious quickly. Therefore the wrapper program &lt;a href=&quot;app-pg-ctl&quot;&gt;pg_ctl&lt;/a&gt; is provided to simplify some tasks. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1732a07a9954b37aedbdc19948ece5c409757c1b" translate="yes" xml:space="preserve">
          <source>This shortest-precise output format is much faster to generate than the historical rounded format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98021c2c2c1d427e7a19ee968ec54370a03719cc" translate="yes" xml:space="preserve">
          <source>This should be used if the view is intended to provide row-level security. See &lt;a href=&quot;https://www.postgresql.org/docs/12/rules-privileges.html&quot;&gt;Section 40.5&lt;/a&gt; for full details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="207a8bf754b11f0d0bc92abd250767a3408a12a5" translate="yes" xml:space="preserve">
          <source>This should give:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8430336b76d6ed211113aaafd34defc44406bde4" translate="yes" xml:space="preserve">
          <source>This simple example is like an inner join on &lt;code&gt;col2&lt;/code&gt;, but it produces at most one output row for each &lt;code&gt;tab1&lt;/code&gt; row, even if there are several matching &lt;code&gt;tab2&lt;/code&gt; rows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef082c18dfaad5c1a6c1b5da836306677be5d419" translate="yes" xml:space="preserve">
          <source>This situation might arise from use of a view that contains a join; the view's &lt;code&gt;SELECT&lt;/code&gt; rule will be inserted in place of the view reference, yielding a query much like the above. Normally, the planner will try to collapse the subquery into the parent, yielding:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a39e33486ee442780bd96095dc0388345e0cdf9e" translate="yes" xml:space="preserve">
          <source>This solution requires that index scans be &amp;ldquo;synchronous&amp;rdquo;: we have to fetch each heap tuple immediately after scanning the corresponding index entry. This is expensive for a number of reasons. An &amp;ldquo;asynchronous&amp;rdquo; scan in which we collect many TIDs from the index, and only visit the heap tuples sometime later, requires much less index locking overhead and can allow a more efficient heap access pattern. Per the above analysis, we must use the synchronous approach for non-MVCC-compliant snapshots, but an asynchronous scan is workable for a query using an MVCC snapshot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58431f9279cf2f016596c7e33d4276e32dc1fc57" translate="yes" xml:space="preserve">
          <source>This sort of arrangement gives a unique name for each configuration file variation. This can help eliminate ambiguity when several servers have their configurations all stored in one place, such as in a version control repository. (Storing database configuration files under version control is another good practice to consider.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9da156a75ef112b4defafc29639879cb4c7837ee" translate="yes" xml:space="preserve">
          <source>This specifies that the combination of values in the indicated columns is unique across the whole table, though any one of the columns need not be (and ordinarily isn't) unique.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50433f72840feb7b225965b424dc31d63bcc0468" translate="yes" xml:space="preserve">
          <source>This specifies whether the trigger function should be fired once for every row affected by the trigger event, or just once per SQL statement. If neither is specified, &lt;code&gt;FOR EACH STATEMENT&lt;/code&gt; is the default. Constraint triggers can only be specified &lt;code&gt;FOR EACH ROW&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65ec2d513cde79958e874b751ab72a29f3d98df0" translate="yes" xml:space="preserve">
          <source>This standby's &lt;code&gt;xmin&lt;/code&gt; horizon reported by &lt;a href=&quot;runtime-config-replication#GUC-HOT-STANDBY-FEEDBACK&quot;&gt;hot_standby_feedback&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5eb77416f4fbff585a0d52973a7eb52599177c4" translate="yes" xml:space="preserve">
          <source>This statement is partially compatible with the &lt;code&gt;ALTER FUNCTION&lt;/code&gt; statement in the SQL standard. The standard allows more properties of a function to be modified, but does not provide the ability to rename a function, make a function a security definer, attach configuration parameter values to a function, or change the owner, schema, or volatility of a function. The standard also requires the &lt;code&gt;RESTRICT&lt;/code&gt; key word, which is optional in PostgreSQL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bab59343a0c1e996fdb8d33ae8133f4f89f5db11" translate="yes" xml:space="preserve">
          <source>This statement is partially compatible with the &lt;code&gt;ALTER PROCEDURE&lt;/code&gt; statement in the SQL standard. The standard allows more properties of a procedure to be modified, but does not provide the ability to rename a procedure, make a procedure a security definer, attach configuration parameter values to a procedure, or change the owner, schema, or volatility of a procedure. The standard also requires the &lt;code&gt;RESTRICT&lt;/code&gt; key word, which is optional in PostgreSQL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67eeb572930074f1aa2002423769801647479601" translate="yes" xml:space="preserve">
          <source>This statement is partially compatible with the &lt;code&gt;ALTER ROUTINE&lt;/code&gt; statement in the SQL standard. See under &lt;a href=&quot;sql-alterfunction&quot;&gt;ALTER FUNCTION&lt;/a&gt; and &lt;a href=&quot;sql-alterprocedure&quot;&gt;ALTER PROCEDURE&lt;/a&gt; for more details. Allowing routine names to refer to aggregate functions is a PostgreSQL extension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18979809699a0da3f5c4a5180cc7bf11bc2207bc" translate="yes" xml:space="preserve">
          <source>This syntax is also available in PostgreSQL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90c440913cb92e8f17aef62117fa623f19d86749" translate="yes" xml:space="preserve">
          <source>This syntax is not as commonly used as the one above, but we show it here to help you understand the following topics.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b79ba66ac4c531cc13f46e2424e3fe201d124e6" translate="yes" xml:space="preserve">
          <source>This table sampling method accepts a single floating-point argument that is the maximum number of milliseconds to spend reading the table. This gives you direct control over how long the query takes, at the price that the size of the sample becomes hard to predict. The resulting sample will contain as many rows as could be read in the specified time, unless the whole table has been read first.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d13a701183ff5565141456253121184e55459bd" translate="yes" xml:space="preserve">
          <source>This table sampling method accepts a single integer argument that is the maximum number of rows to read. The resulting sample will always contain exactly that many rows, unless the table does not contain enough rows, in which case the whole table is selected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5f2abc30d834e5b2c40918a5861662c490e2353" translate="yes" xml:space="preserve">
          <source>This technique can be used with &lt;code&gt;UNIQUE&lt;/code&gt; and &lt;code&gt;PRIMARY KEY&lt;/code&gt; constraints too; the indexes are created implicitly when the constraint is created. Example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d162e1cfd2d4961b90fb7a1a7999e3946102a8e" translate="yes" xml:space="preserve">
          <source>This tells the function handler how to invoke the function. It might be the actual source code of the function for interpreted languages, a link symbol, a file name, or just about anything else, depending on the implementation language/call convention.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="952d3091870b548dd58edb38d79a5b0fc4d8774a" translate="yes" xml:space="preserve">
          <source>This terminates backup mode. On a primary, it also performs an automatic switch to the next WAL segment. On a standby, it is not possible to automatically switch WAL segments, so you may wish to run &lt;code&gt;pg_switch_wal&lt;/code&gt; on the primary to perform a manual switch. The reason for the switch is to arrange for the last WAL segment file written during the backup interval to be ready to archive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c97b686a9ecca6b8afcf92aa63be38096470c601" translate="yes" xml:space="preserve">
          <source>This timestamp could validly be rendered as either 2:30 UTC-4 or 1:30 UTC-5; the timestamp output code chooses the latter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bfd78cb22d7d6657a7d8e56f10eceb750ab13b4" translate="yes" xml:space="preserve">
          <source>This type of index is most useful when a table has many attributes and queries test arbitrary combinations of them. A traditional btree index is faster than a bloom index, but it can require many btree indexes to support all possible queries where one needs only a single bloom index. Note however that bloom indexes only support equality queries, whereas btree indexes can also perform inequality and range searches.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a47ad5551aa3274bc0c3233a9d21f8ee9873b817" translate="yes" xml:space="preserve">
          <source>This usually means just what it suggests: you tried to start another server on the same port where one is already running. However, if the kernel error message is not &lt;code&gt;Address already in use&lt;/code&gt; or some variant of that, there might be a different problem. For example, trying to start a server on a reserved port number might draw something like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3923b38241d597877e4759e25323172e3016ea9a" translate="yes" xml:space="preserve">
          <source>This usually results in a better plan than planning the subquery separately. (For example, the outer &lt;code&gt;WHERE&lt;/code&gt; conditions might be such that joining X to A first eliminates many rows of A, thus avoiding the need to form the full logical output of the subquery.) But at the same time, we have increased the planning time; here, we have a five-way join problem replacing two separate three-way join problems. Because of the exponential growth of the number of possibilities, this makes a big difference. The planner tries to avoid getting stuck in huge join search problems by not collapsing a subquery if more than &lt;code&gt;from_collapse_limit&lt;/code&gt;&lt;code&gt;FROM&lt;/code&gt; items would result in the parent query. You can trade off planning time against quality of plan by adjusting this run-time parameter up or down.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7d3526fb85f461f5326ed5d5597e3881ab88546" translate="yes" xml:space="preserve">
          <source>This utility can only be run by the user who initialized the cluster because it requires read access to the data directory. You can specify the data directory on the command line, or use the environment variable &lt;code&gt;PGDATA&lt;/code&gt;. This utility supports the options &lt;code&gt;-V&lt;/code&gt; and &lt;code&gt;--version&lt;/code&gt;, which print the pg_controldata version and exit. It also supports options &lt;code&gt;-?&lt;/code&gt; and &lt;code&gt;--help&lt;/code&gt;, which output the supported arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23e7baae96eaae6ec7f8f90d39ec37038a1d3983" translate="yes" xml:space="preserve">
          <source>This utility can only be run by the user who installed the server, because it requires read-only access to the data directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63c8b87fb5e6f05eb7f41b9abcb56cbe448e2808" translate="yes" xml:space="preserve">
          <source>This utility can only be run by the user who installed the server, because it requires read/write access to the data directory. For safety reasons, you must specify the data directory on the command line. &lt;code&gt;pg_resetwal&lt;/code&gt; does not use the environment variable &lt;code&gt;PGDATA&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e50692fa3aa9f732d24bdd19e107158cb244fbb0" translate="yes" xml:space="preserve">
          <source>This utility, like most other PostgreSQL utilities, also uses the environment variables supported by libpq (see &lt;a href=&quot;https://www.postgresql.org/docs/12/libpq-envars.html&quot;&gt;Section 33.14&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22f89c28349abae20f5bec16bf71f19805aa29b4" translate="yes" xml:space="preserve">
          <source>This utility, like most other PostgreSQL utilities, also uses the environment variables supported by libpq (see &lt;a href=&quot;https://www.postgresql.org/docs/12/libpq-envars.html&quot;&gt;Section 33.14&lt;/a&gt;). However, it does not read &lt;code&gt;PGDATABASE&lt;/code&gt; when a database name is not supplied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f64ddd714f65036056a8efca366deffd5cb8370" translate="yes" xml:space="preserve">
          <source>This utility, like most other PostgreSQL utilities, uses the environment variables supported by libpq (see &lt;a href=&quot;https://www.postgresql.org/docs/12/libpq-envars.html&quot;&gt;Section 33.14&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="891e0f3b431a5b76a5e7675d6f5b4cfd398567dc" translate="yes" xml:space="preserve">
          <source>This value is the default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e84fec0574a10e039e309ea4e9bfbbae84d5f20" translate="yes" xml:space="preserve">
          <source>This variable can be set to the values &lt;code&gt;default&lt;/code&gt;, &lt;code&gt;verbose&lt;/code&gt;, &lt;code&gt;terse&lt;/code&gt;, or &lt;code&gt;sqlstate&lt;/code&gt; to control the verbosity of error reports. (See also &lt;code&gt;\errverbose&lt;/code&gt;, for use when you want a verbose version of the error you just got.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b047288ac9be4f5ef83b6fcef3edce3028098d1c" translate="yes" xml:space="preserve">
          <source>This variable can be set to the values &lt;code&gt;never&lt;/code&gt;, &lt;code&gt;errors&lt;/code&gt;, or &lt;code&gt;always&lt;/code&gt; to control whether &lt;code&gt;CONTEXT&lt;/code&gt; fields are displayed in messages from the server. The default is &lt;code&gt;errors&lt;/code&gt; (meaning that context will be shown in error messages, but not in notice or warning messages). This setting has no effect when &lt;code&gt;VERBOSITY&lt;/code&gt; is set to &lt;code&gt;terse&lt;/code&gt; or &lt;code&gt;sqlstate&lt;/code&gt;. (See also &lt;code&gt;\errverbose&lt;/code&gt;, for use when you want a verbose version of the error you just got.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ec30cffc79914e7e50180450597583323f64746" translate="yes" xml:space="preserve">
          <source>This variable controls whether to raise an error in lieu of applying a row security policy. When set to &lt;code&gt;on&lt;/code&gt;, policies apply normally. When set to &lt;code&gt;off&lt;/code&gt;, queries fail which would otherwise apply at least one policy. The default is &lt;code&gt;on&lt;/code&gt;. Change to &lt;code&gt;off&lt;/code&gt; where limited row visibility could cause incorrect results; for example, pg_dump makes that change by default. This variable has no effect on roles which bypass every row security policy, to wit, superusers and roles with the &lt;code&gt;BYPASSRLS&lt;/code&gt; attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a6e57232329d24f7b297105fcb53de791463fcf" translate="yes" xml:space="preserve">
          <source>This variable is also not used when creating databases. By default, a new database inherits its tablespace setting from the template database it is copied from.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96dcd0eeb5a806520fa3d76a941adb54cde586df" translate="yes" xml:space="preserve">
          <source>This variable is not used for temporary tables; for them, &lt;a href=&quot;runtime-config-client#GUC-TEMP-TABLESPACES&quot;&gt;temp_tablespaces&lt;/a&gt; is consulted instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9610b064ff12036d0dbbd211a65bbda376efe2c" translate="yes" xml:space="preserve">
          <source>This variable is the name of the JIT provider library to be used (see &lt;a href=&quot;jit-extensibility#JIT-PLUGGABLE&quot;&gt;Section 31.4.2&lt;/a&gt;). The default is &lt;code&gt;llvmjit&lt;/code&gt;. This parameter can only be set at server start.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6364d91b8c705de69fb141059f0b5ecd041ff5d" translate="yes" xml:space="preserve">
          <source>This variable specifies one or more shared libraries that are to be preloaded at connection start. It contains a comma-separated list of library names, where each name is interpreted as for the &lt;a href=&quot;sql-load&quot;&gt;LOAD&lt;/a&gt; command. Whitespace between entries is ignored; surround a library name with double quotes if you need to include whitespace or commas in the name. The parameter value only takes effect at the start of the connection. Subsequent changes have no effect. If a specified library is not found, the connection attempt will fail.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cd177877be9e8c77ea886c4ef3d6df8ca9e8ff0" translate="yes" xml:space="preserve">
          <source>This variable specifies one or more shared libraries that are to be preloaded at connection start. It contains a comma-separated list of library names, where each name is interpreted as for the &lt;a href=&quot;sql-load&quot;&gt;LOAD&lt;/a&gt; command. Whitespace between entries is ignored; surround a library name with double quotes if you need to include whitespace or commas in the name. The parameter value only takes effect at the start of the connection. Subsequent changes have no effect. If a specified library is not found, the connection attempt will fail. Only superusers can change this setting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9894de0e5352de9dfea84284d95098f1e2c92234" translate="yes" xml:space="preserve">
          <source>This variable specifies one or more shared libraries to be preloaded at server start. It contains a comma-separated list of library names, where each name is interpreted as for the &lt;a href=&quot;sql-load&quot;&gt;LOAD&lt;/a&gt; command. Whitespace between entries is ignored; surround a library name with double quotes if you need to include whitespace or commas in the name. This parameter can only be set at server start. If a specified library is not found, the server will fail to start.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6a915d9ae632e6aef6922feee6cf3ba5d4a2ff6" translate="yes" xml:space="preserve">
          <source>This variable specifies tablespaces in which to create temporary objects (temp tables and indexes on temp tables) when a &lt;code&gt;CREATE&lt;/code&gt; command does not explicitly specify a tablespace. Temporary files for purposes such as sorting large data sets are also created in these tablespaces.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5d218762619bb59129fccf6c7fc7392957b7115" translate="yes" xml:space="preserve">
          <source>This variable specifies the default tablespace in which to create objects (tables and indexes) when a &lt;code&gt;CREATE&lt;/code&gt; command does not explicitly specify a tablespace. It also determines the tablespace that a partitioned relation will direct future partitions to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa9f42e1d0645607acfe05a083c6feee4e9b8b48" translate="yes" xml:space="preserve">
          <source>This variable specifies the order in which schemas are searched when an object (table, data type, function, etc.) is referenced by a simple name with no schema specified. When there are objects of identical names in different schemas, the one found first in the search path is used. An object that is not in any of the schemas in the search path can only be referenced by specifying its containing schema with a qualified (dotted) name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5053ca7743fcc4bdc3ab5765d75a2a61d6e73363" translate="yes" xml:space="preserve">
          <source>This variant of the &lt;code&gt;GRANT&lt;/code&gt; command gives specific privileges on a database object to one or more roles. These privileges are added to those already granted, if any.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fb709052776e6c45691491df6bfccba610d1b30" translate="yes" xml:space="preserve">
          <source>This variant of the &lt;code&gt;GRANT&lt;/code&gt; command grants membership in a role to one or more other roles. Membership in a role is significant because it conveys the privileges granted to a role to each of its members.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4d8e8957d26c9fb345fec5b62e4899e915fe79e" translate="yes" xml:space="preserve">
          <source>This view can be helpful for checking whether planned changes in the authentication configuration file will work, or for diagnosing a previous failure. Note that this view reports on the &lt;em&gt;current&lt;/em&gt; contents of the file, not on what was last loaded by the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ded4110d64c07701bd32e461534d6aff35fce772" translate="yes" xml:space="preserve">
          <source>This view is helpful for checking whether planned changes in the configuration files will work, or for diagnosing a previous failure. Note that this view reports on the &lt;em&gt;current&lt;/em&gt; contents of the files, not on what was last applied by the server. (The &lt;a href=&quot;view-pg-settings&quot;&gt;&lt;code&gt;pg_settings&lt;/code&gt;&lt;/a&gt; view is usually sufficient to determine that.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5f7617dee4bd0dacfc46b9c395f294c122bc12e" translate="yes" xml:space="preserve">
          <source>This view will support &lt;code&gt;INSERT&lt;/code&gt;, &lt;code&gt;UPDATE&lt;/code&gt; and &lt;code&gt;DELETE&lt;/code&gt;. All the columns from the &lt;code&gt;films&lt;/code&gt; table will be updatable, whereas the computed columns &lt;code&gt;country&lt;/code&gt; and &lt;code&gt;avg_rating&lt;/code&gt; will be read-only.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5744bd9bfe826277ab362eee3d81a2f8763c59df" translate="yes" xml:space="preserve">
          <source>This way you can also use LDAP for connection parameter lookup as described in &lt;a href=&quot;https://www.postgresql.org/docs/12/libpq-ldap.html&quot;&gt;Section 33.17&lt;/a&gt;. See &lt;a href=&quot;https://www.postgresql.org/docs/12/libpq-connect.html#LIBPQ-PARAMKEYWORDS&quot;&gt;Section 33.1.2&lt;/a&gt; for more information on all the available connection options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fc85cb1dbf306614c53ff81c420fe96724ef4bd" translate="yes" xml:space="preserve">
          <source>This wiki page provides a brief overview, security design, architecture, administration and upcoming features.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7facb549adad733a90a16ab11be82cd587ad267" translate="yes" xml:space="preserve">
          <source>This will also find related words such as &lt;code&gt;friends&lt;/code&gt; and &lt;code&gt;friendly&lt;/code&gt;, since all these are reduced to the same normalized lexeme.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ac371241bbb2e0a4e09eb743c54a9583dbf830b" translate="yes" xml:space="preserve">
          <source>This will create a database named &lt;code&gt;korean&lt;/code&gt; that uses the character set &lt;code&gt;EUC_KR&lt;/code&gt;, and locale &lt;code&gt;ko_KR&lt;/code&gt;. Another way to accomplish this is to use this SQL command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcc2d5a65486c9c94a37090b57dae833aa54736a" translate="yes" xml:space="preserve">
          <source>This will create a table with one row per left item, and an array of right items. Now this is pretty useless without some way of using the array; that's why there is an array enumerator. You can do</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="456202e5286a667b495d0d080a420980563fc127" translate="yes" xml:space="preserve">
          <source>This will create a view based on the &lt;code&gt;comedies&lt;/code&gt; view, showing only films with &lt;code&gt;kind = 'Comedy'&lt;/code&gt; and &lt;code&gt;classification = 'U'&lt;/code&gt;. Any attempt to &lt;code&gt;INSERT&lt;/code&gt; or &lt;code&gt;UPDATE&lt;/code&gt; a row in the view will be rejected if the new row doesn't have &lt;code&gt;classification = 'U'&lt;/code&gt;, but the film &lt;code&gt;kind&lt;/code&gt; will not be checked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7310496c1ef4e42c77607893ab0567ee3cd08f0" translate="yes" xml:space="preserve">
          <source>This will create a view containing the columns that are in the &lt;code&gt;film&lt;/code&gt; table at the time of view creation. Though &lt;code&gt;*&lt;/code&gt; was used to create the view, columns added later to the table will not be part of the view.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec4f0e34512b88917e6ee4edf638401662483cd5" translate="yes" xml:space="preserve">
          <source>This will create a view that checks both the &lt;code&gt;kind&lt;/code&gt; and &lt;code&gt;classification&lt;/code&gt; of new rows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4e6c3b1ee3c6ae0ce592e53fe304140df76442d" translate="yes" xml:space="preserve">
          <source>This will match paths that contain the label &lt;code&gt;Europe&lt;/code&gt; and any label beginning with &lt;code&gt;Russia&lt;/code&gt; (case-insensitive), but not paths containing the label &lt;code&gt;Transportation&lt;/code&gt;. The location of these words within the path is not important. Also, when &lt;code&gt;%&lt;/code&gt; is used, the word can be matched to any underscore-separated word within a label, regardless of position.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7070480e63fc28db9b2bfc400f51e909df548e18" translate="yes" xml:space="preserve">
          <source>This will not work since the name &lt;code&gt;item&lt;/code&gt; is taken to be a table name, not a column name of &lt;code&gt;on_hand&lt;/code&gt;, per SQL syntax rules. You must write it like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc724810451e07ee1624d0d89bd9f99d8b85081f" translate="yes" xml:space="preserve">
          <source>This will produce a result something like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc934f85b42e420c854cb082c555601046530eec" translate="yes" xml:space="preserve">
          <source>This will return a table of two columns and three rows. It's effectively equivalent to:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00d87bb57d3abbae7f2092f201fbf64e1ef1e407" translate="yes" xml:space="preserve">
          <source>This will return all the items in the right hand table for an entry in the left hand table. This is a very common construct in SQL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9684b1543ba00fa275566c42af863391caa86e12" translate="yes" xml:space="preserve">
          <source>This will return all values in the text column for which there is a continuous extent in the corresponding ordered trigram set that is sufficiently similar to the trigram set of &lt;code&gt;word&lt;/code&gt;, sorted from best match to worst. The index will be used to make this a fast operation even over very large data sets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9601b6fc7f3154db7fc5d9d05b2c9284f9d222e6" translate="yes" xml:space="preserve">
          <source>This will return all values in the text column that are sufficiently similar to &lt;code&gt;word&lt;/code&gt;, sorted from best match to worst. The index will be used to make this a fast operation even over very large data sets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e0c4ccba178d64fe3f5a4a8f9774cdd12a6ce9f" translate="yes" xml:space="preserve">
          <source>This will save the setting (but not set it immediately). In subsequent connections by this role it will appear as though &lt;code&gt;SET enable_indexscan TO off&lt;/code&gt; had been executed just before the session started. You can still alter this setting during the session; it will only be the default. To remove a role-specific default setting, use &lt;code&gt;ALTER ROLE rolename RESET varname&lt;/code&gt;. Note that role-specific defaults attached to roles without &lt;code&gt;LOGIN&lt;/code&gt; privilege are fairly useless, since they will never be invoked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c957489b768ad1121e70ecf58707bd37aac80d87" translate="yes" xml:space="preserve">
          <source>This will save the setting (but not set it immediately). In subsequent connections to this database it will appear as though &lt;code&gt;SET geqo TO off;&lt;/code&gt; had been executed just before the session started. Note that users can still alter this setting during their sessions; it will only be the default. To undo any such setting, use &lt;code&gt;ALTER DATABASE dbname RESET varname&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e04d0ca6130cc2fa0f50fc16bc721bc9344ebb8a" translate="yes" xml:space="preserve">
          <source>This will succeed only if each existing entry in the column can be converted to the new type by an implicit cast. If a more complex conversion is needed, you can add a &lt;code&gt;USING&lt;/code&gt; clause that specifies how to compute the new values from the old.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07f6af6a1757ce5004ed8f1bbb0c1ac5b13f2237" translate="yes" xml:space="preserve">
          <source>This will work too:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2518d47395fb2d8240dcc264bbc1439e37da1fb7" translate="yes" xml:space="preserve">
          <source>This works OK as far as querying goes, but it gets ugly when you need to update several rows, for one thing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="745e343b5d1e33e36d85f39d0c717159c4f6b58f" translate="yes" xml:space="preserve">
          <source>This works anywhere a table name is expected, including the table modification commands and the data access commands discussed in the following chapters. (For brevity we will speak of tables only, but the same ideas apply to other kinds of named objects, such as types and functions.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2957424d9ef693c1b1a96a104ee978e9de4983b8" translate="yes" xml:space="preserve">
          <source>This works because PostgreSQL's implementation evaluates only as many rows of a &lt;code&gt;WITH&lt;/code&gt; query as are actually fetched by the parent query. Using this trick in production is not recommended, because other systems might work differently. Also, it usually won't work if you make the outer query sort the recursive query's results or join them to some other table, because in such cases the outer query will usually try to fetch all of the &lt;code&gt;WITH&lt;/code&gt; query's output anyway.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f4e84fb95c842771a51ab73c2b062507d6eff5c" translate="yes" xml:space="preserve">
          <source>This works in both regular SQL commands and meta-commands; there is more detail in &lt;a href=&quot;app-psql#APP-PSQL-INTERPOLATION&quot;&gt;SQL Interpolation&lt;/a&gt;, below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94c314a6fc9266b79d71f9330565442779b31db1" translate="yes" xml:space="preserve">
          <source>This works reasonably well, but has a number of drawbacks:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb7380b7f7c690853b919f0af451d457543e80c8" translate="yes" xml:space="preserve">
          <source>This works similarly to the previous example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e6ed82ca645f9e4d9f11c1613a5711464a40bfe" translate="yes" xml:space="preserve">
          <source>This works the same for all constraint types except not-null constraints. To drop a not null constraint use:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c526d5097db889159006cee4ad293de5eee6b33" translate="yes" xml:space="preserve">
          <source>This would be accomplished by the following query:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6009d7325db9d9fecfe7a5f56808293dedf32ff8" translate="yes" xml:space="preserve">
          <source>Though PostgreSQL provides nonblocking read/write access to table data, nonblocking read/write access is not currently offered for every index access method implemented in PostgreSQL. The various index types are handled as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2b387dafa062f79d85fee46034cc439a5b198ed" translate="yes" xml:space="preserve">
          <source>Three different bits are used to store information about page-level visibility. The all-visible bit in the visibility map indicates that every tuple in the corresponding page of the relation is visible to every current and future transaction. The all-frozen bit in the visibility map indicates that every tuple in the page is frozen; that is, no future vacuum will need to modify the page until such time as a tuple is inserted, updated, deleted, or locked on that page. The page header's &lt;code&gt;PD_ALL_VISIBLE&lt;/code&gt; bit has the same meaning as the all-visible bit in the visibility map, but is stored within the data page itself rather than in a separate data structure. These two bits will normally agree, but the page's all-visible bit can sometimes be set while the visibility map bit is clear after a crash recovery. The reported values can also disagree because of a change that occurs after &lt;code&gt;pg_visibility&lt;/code&gt; examines the visibility map and before it examines the data page. Any event that causes data corruption can also cause these bits to disagree.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3eb05e9b0f9498e4b2b12babd625a604206f4c79" translate="yes" xml:space="preserve">
          <source>Through simulation of the evolutionary operations &lt;em&gt;recombination&lt;/em&gt;, &lt;em&gt;mutation&lt;/em&gt;, and &lt;em&gt;selection&lt;/em&gt; new generations of search points are found that show a higher average fitness than their ancestors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c27dce1f6609095e9fe5fc64a23bbb9715cf9868" translate="yes" xml:space="preserve">
          <source>Throughout running a transaction, a server process holds an exclusive lock on the transaction's virtual transaction ID. If a permanent ID is assigned to the transaction (which normally happens only if the transaction changes the state of the database), it also holds an exclusive lock on the transaction's permanent transaction ID until it ends. When a process finds it necessary to wait specifically for another transaction to end, it does so by attempting to acquire share lock on the other transaction's ID (either virtual or permanent ID depending on the situation). That will succeed only when the other transaction terminates and releases its locks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28362fc6bf38f9ce00db5bd7a58a7c2aea63ad0d" translate="yes" xml:space="preserve">
          <source>Thu, Thur, Thurs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76031ddf92450ba52c1e3945097079807a9065c2" translate="yes" xml:space="preserve">
          <source>Thursday</source>
          <target state="translated">Thursday</target>
        </trans-unit>
        <trans-unit id="e159393321d195e0b9a1e51cafce029229164b8f" translate="yes" xml:space="preserve">
          <source>Thus far, our queries have only accessed one table at a time. Queries can access multiple tables at once, or access the same table in such a way that multiple rows of the table are being processed at the same time. A query that accesses multiple rows of the same or different tables at one time is called a &lt;em&gt;join&lt;/em&gt; query. As an example, say you wish to list all the weather records together with the location of the associated city. To do that, we need to compare the &lt;code&gt;city&lt;/code&gt; column of each row of the &lt;code&gt;weather&lt;/code&gt; table with the &lt;code&gt;name&lt;/code&gt; column of all rows in the &lt;code&gt;cities&lt;/code&gt; table, and select the pairs of rows where these values match.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33d92a6f947116307ff818dcd12f8100aa0644a8" translate="yes" xml:space="preserve">
          <source>Thus, the &lt;code&gt;strict_word_similarity(text, text)&lt;/code&gt; function is useful for finding the similarity to whole words, while &lt;code&gt;word_similarity(text, text)&lt;/code&gt; is more suitable for finding the similarity for parts of words.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae8d95556da752362e5bc888aa863b02957f8964" translate="yes" xml:space="preserve">
          <source>Thus, these functions can be used directly when the input query produces &lt;code&gt;row_name&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt; columns of type &lt;code&gt;text&lt;/code&gt;, and you want 2, 3, or 4 output values columns. In all other ways they behave exactly as described above for the general &lt;code&gt;crosstab&lt;/code&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4db015abd914b1b3990881a3d9a556ca3470734a" translate="yes" xml:space="preserve">
          <source>Thus, we have created an integer column and arranged for its default values to be assigned from a sequence generator. A &lt;code&gt;NOT NULL&lt;/code&gt; constraint is applied to ensure that a null value cannot be inserted. (In most cases you would also want to attach a &lt;code&gt;UNIQUE&lt;/code&gt; or &lt;code&gt;PRIMARY KEY&lt;/code&gt; constraint to prevent duplicate values from being inserted by accident, but this is not automatic.) Lastly, the sequence is marked as &amp;ldquo;owned by&amp;rdquo; the column, so that it will be dropped if the column or table is dropped.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="824c19a1cbeb13e4af22007a250bca9cc9d5aa71" translate="yes" xml:space="preserve">
          <source>Time at which the last data page checksum failure was detected in this database (or on a shared object), or NULL if data checksums are not enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31a4493404d403e4b069700b973d39eee08d905b" translate="yes" xml:space="preserve">
          <source>Time at which the transaction was prepared for commit</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c312600dc8a52a3cdeb07b3c4822cc0aa7fc3793" translate="yes" xml:space="preserve">
          <source>Time at which these statistics were last reset</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b42073a799486b6bcd7e2d53dba2eb7477ef1dac" translate="yes" xml:space="preserve">
          <source>Time elapsed between flushing recent WAL locally and receiving notification that this standby server has written and flushed it (but not yet applied it). This can be used to gauge the delay that &lt;code&gt;synchronous_commit&lt;/code&gt; level &lt;code&gt;on&lt;/code&gt; incurred while committing if this server was configured as a synchronous standby.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0c7f5fcbdb1638dc5b20b8d46067760a93260d7" translate="yes" xml:space="preserve">
          <source>Time elapsed between flushing recent WAL locally and receiving notification that this standby server has written it (but not yet flushed it or applied it). This can be used to gauge the delay that &lt;code&gt;synchronous_commit&lt;/code&gt; level &lt;code&gt;remote_write&lt;/code&gt; incurred while committing if this server was configured as a synchronous standby.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87f2fef0ff3885ece1737c889873c3a7dd9caea0" translate="yes" xml:space="preserve">
          <source>Time elapsed between flushing recent WAL locally and receiving notification that this standby server has written, flushed and applied it. This can be used to gauge the delay that &lt;code&gt;synchronous_commit&lt;/code&gt; level &lt;code&gt;remote_apply&lt;/code&gt; incurred while committing if this server was configured as a synchronous standby.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad92df2acc969fab807c3d10901a294d8ff7f754" translate="yes" xml:space="preserve">
          <source>Time is before 12:00</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43b71e95a19ea4a6f1b340ce357037e706d5a3cf" translate="yes" xml:space="preserve">
          <source>Time is on or after 12:00</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bd0601e2f87239d97d77738bf3ca024a85d5838" translate="yes" xml:space="preserve">
          <source>Time of last write-ahead log location reported to origin WAL sender</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="689e239460d59d7671ce2c908f91fa122b359c25" translate="yes" xml:space="preserve">
          <source>Time of the last failed archival operation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cb8f733cf5d5d099965d55bbe98e4d1fa3e9d29" translate="yes" xml:space="preserve">
          <source>Time of the last successful archive operation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21397053368fe3010616b276ed5043a12f8cb11f" translate="yes" xml:space="preserve">
          <source>Time spent reading data file blocks by backends in this database, in milliseconds</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="555585fed0e713bf1b368cbbf5bba5754318a952" translate="yes" xml:space="preserve">
          <source>Time spent writing data file blocks by backends in this database, in milliseconds</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7c6e9c6e492ee3767af155479b912c5dbab4797" translate="yes" xml:space="preserve">
          <source>Time stamp with milliseconds</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60f359c6300b47ebed0b97fcdfa3cace5afca052" translate="yes" xml:space="preserve">
          <source>Time stamp with milliseconds (as a Unix epoch)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ac2d64d58668aa63843fa9aac25d77d00659a02" translate="yes" xml:space="preserve">
          <source>Time stamp without milliseconds</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51bb8ad970c492c6e4e04fdc998b0e86ee08e582" translate="yes" xml:space="preserve">
          <source>Time when the &lt;code&gt;state&lt;/code&gt; was last changed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d762072c616665b71d7c55c79cd97af33543bb34" translate="yes" xml:space="preserve">
          <source>Time when the current transaction was started</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11625d6eed69f1fabf53d97fbcee125227cacb32" translate="yes" xml:space="preserve">
          <source>Time when the currently active query was started, or if &lt;code&gt;state&lt;/code&gt; is not &lt;code&gt;active&lt;/code&gt;, when the last query was started</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94633bb8d7222b0ec4b3348ef60e473c680e5d05" translate="yes" xml:space="preserve">
          <source>Time when the most recent query was started</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25af4b3f3521f87fcd782cc01e0d9b93c6165347" translate="yes" xml:space="preserve">
          <source>Time when this process was started</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="933cb365f238bab1b9f23247a7559754209bd8c6" translate="yes" xml:space="preserve">
          <source>Time when this process was started, i.e., when the client connected to this WAL sender</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="559b0a476d9e562ad140be918c065bb024b1f003" translate="yes" xml:space="preserve">
          <source>Time when this process was started. For client backends, this is the time the client connected to the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc12d0007d4c73cf73c1568b7bfdf5da27728eae" translate="yes" xml:space="preserve">
          <source>Time when this process' current transaction was started, or null if no transaction is active. If the current query is the first of its transaction, this column is equal to the &lt;code&gt;query_start&lt;/code&gt; column.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbdc0abebabeabc5d4b770a667845ccc3c799e2b" translate="yes" xml:space="preserve">
          <source>Time zone abbreviation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e460672f042e9a6f5cb5587fff9b633a5f807f4f" translate="yes" xml:space="preserve">
          <source>Time zone abbreviations defined in the configuration file override non-timezone meanings built into PostgreSQL. For example, the &lt;code&gt;Australia&lt;/code&gt; configuration file defines &lt;code&gt;SAT&lt;/code&gt; (for South Australian Standard Time). When this file is active, &lt;code&gt;SAT&lt;/code&gt; will not be recognized as an abbreviation for Saturday.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37a9001f0d01c5209af64be7dc1968df4b54e043" translate="yes" xml:space="preserve">
          <source>Time zone name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9837496505fa39574debf57863d4c5a7a7e1fa2" translate="yes" xml:space="preserve">
          <source>Time zones, and time-zone conventions, are influenced by political decisions, not just earth geometry. Time zones around the world became somewhat standardized during the 1900s, but continue to be prone to arbitrary changes, particularly with respect to daylight-savings rules. PostgreSQL uses the widely-used IANA (Olson) time zone database for information about historical time zone rules. For times in the future, the assumption is that the latest known rules for a given time zone will continue to be observed indefinitely far into the future.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51e0ae72446d2bbeb8c3c3c8b1ad7cfa9371d4af" translate="yes" xml:space="preserve">
          <source>Timeline from which to read log records. The default is to use the value in &lt;code&gt;startseg&lt;/code&gt;, if that is specified; otherwise, the default is 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a493fe5eba595d570a4b23a6ba4061eb25ab8ef" translate="yes" xml:space="preserve">
          <source>Timeline number of last write-ahead log location received and flushed to disk, the initial value of this field being the timeline number of the first log location used when WAL receiver is started</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae2147bbbd74fc0ea70c9f9c1ab21cda42f12f26" translate="yes" xml:space="preserve">
          <source>Timers used on older PC hardware include the 8254 Programmable Interval Timer (PIT), the real-time clock (RTC), the Advanced Programmable Interrupt Controller (APIC) timer, and the Cyclone timer. These timers aim for millisecond resolution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87f6f783967c5bb200b51b61ac60c7b2d206bb65" translate="yes" xml:space="preserve">
          <source>Timespan types</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="239e2086e6fe0c5571eca32707440c4ba53f1fcd" translate="yes" xml:space="preserve">
          <source>Timezone settings given as numbers or intervals are internally translated to POSIX timezone syntax. For example, after &lt;code&gt;SET TIME ZONE -7&lt;/code&gt;, &lt;code&gt;SHOW TIME ZONE&lt;/code&gt; would report &lt;code&gt;&amp;lt;-07&amp;gt;+07&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d19ceca501465c339e3bcf2bc0d8ff02bb697d6c" translate="yes" xml:space="preserve">
          <source>Tip</source>
          <target state="translated">Tip</target>
        </trans-unit>
        <trans-unit id="7e007f7fc0996f8d4eac8a1e1e90b6f80a635659" translate="yes" xml:space="preserve">
          <source>To abort all changes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1de6dbe0b98af8c297b94378a5d03d8bb0f5d29" translate="yes" xml:space="preserve">
          <source>To access a field of a composite column, one writes a dot and the field name, much like selecting a field from a table name. In fact, it's so much like selecting from a table name that you often have to use parentheses to keep from confusing the parser. For example, you might try to select some subfields from our &lt;code&gt;on_hand&lt;/code&gt; example table with something like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="017b192526f458780b51a75f9b3b25aefc868352" translate="yes" xml:space="preserve">
          <source>To access foreign data, you need to create a &lt;em&gt;foreign server&lt;/em&gt; object, which defines how to connect to a particular external data source according to the set of options used by its supporting foreign data wrapper. Then you need to create one or more &lt;em&gt;foreign tables&lt;/em&gt;, which define the structure of the remote data. A foreign table can be used in queries just like a normal table, but a foreign table has no storage in the PostgreSQL server. Whenever it is used, PostgreSQL asks the foreign data wrapper to fetch data from the external source, or transmit data to the external source in the case of update commands.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c882ff143aff4abbe56ed4decc5353a3e40be0c7" translate="yes" xml:space="preserve">
          <source>To achieve a similar effect when running a transaction at the &lt;code&gt;REPEATABLE READ&lt;/code&gt; or &lt;code&gt;SERIALIZABLE&lt;/code&gt; isolation level, you have to execute the &lt;code&gt;LOCK TABLE&lt;/code&gt; statement before executing any &lt;code&gt;SELECT&lt;/code&gt; or data modification statement. A &lt;code&gt;REPEATABLE READ&lt;/code&gt; or &lt;code&gt;SERIALIZABLE&lt;/code&gt; transaction's view of data will be frozen when its first &lt;code&gt;SELECT&lt;/code&gt; or data modification statement begins. A &lt;code&gt;LOCK TABLE&lt;/code&gt; later in the transaction will still prevent concurrent writes &amp;mdash; but it won't ensure that what the transaction reads corresponds to the latest committed values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b48da783d51f53cd43e5c00aa186c9d8deaec51" translate="yes" xml:space="preserve">
          <source>To add a (multicolumn) unique constraint to a table:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c2dc11d3fbd2d572d80e9f7f2427e18b8265aab" translate="yes" xml:space="preserve">
          <source>To add a &lt;code&gt;NOT NULL&lt;/code&gt; constraint to a domain:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05f31d6bcf939e6d5e9a463994e90aee8d1e54a8" translate="yes" xml:space="preserve">
          <source>To add a Unix user account to your system, look for a command &lt;code&gt;useradd&lt;/code&gt; or &lt;code&gt;adduser&lt;/code&gt;. The user name postgres is often used, and is assumed throughout this book, but you can use another name if you like.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebfcefdd7e6dd46087f7db4f56ad55b502aa3b38" translate="yes" xml:space="preserve">
          <source>To add a check constraint only to a table and not to its children:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb3438d5034c17e4d50c71f282c86de2e7e88a0e" translate="yes" xml:space="preserve">
          <source>To add a check constraint to a domain:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2e451d1684f5b60db7be22ba4fea7da5b7b7b9e" translate="yes" xml:space="preserve">
          <source>To add a check constraint to a table and all its children:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="174131dc66d4970ba5125ca4661ff1a19109b4b9" translate="yes" xml:space="preserve">
          <source>To add a column of type &lt;code&gt;varchar&lt;/code&gt; to a table:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1c2f4fa0ab2023d587d3b98db8f6427264ba706" translate="yes" xml:space="preserve">
          <source>To add a column, use a command like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f37ab4f4bb9bd95a03c2a18bda2edd2159fb3ba" translate="yes" xml:space="preserve">
          <source>To add a constraint, the table constraint syntax is used. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="552cd578dc1fe8e243759547fbc657cae049fb54" translate="yes" xml:space="preserve">
          <source>To add a foreign key constraint to a table with the least impact on other work:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ab66f0fba250760a2399696fd0b16e5bf040c43" translate="yes" xml:space="preserve">
          <source>To add a foreign key constraint to a table:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3411926179ac8624e69940712a6f3380af5e790a" translate="yes" xml:space="preserve">
          <source>To add a new attribute to a type:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db77b529c04682a830e59457f320121602d467bb" translate="yes" xml:space="preserve">
          <source>To add a new child table to handle new data, create an empty child table just as the original children were created above:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9161ab2c4e67b5fb82cc744c9d3774972dec4893" translate="yes" xml:space="preserve">
          <source>To add a new value to an enum type in a particular sort position:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a31abc40dd1208477736069bb4013695302376d8" translate="yes" xml:space="preserve">
          <source>To add a not-null constraint to a column:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb6a3f80db2bc2ad72d4c62c4940bdf89c57476e" translate="yes" xml:space="preserve">
          <source>To add a not-null constraint, which cannot be written as a table constraint, use this syntax:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bad209cf083236dccc11fc40cf4f91317deadaf" translate="yes" xml:space="preserve">
          <source>To add a table to a publication, the invoking user must have ownership rights on the table. The &lt;code&gt;FOR ALL TABLES&lt;/code&gt; clause requires the invoking user to be a superuser.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ae21ae330630cd68145a9fe01a93dd7045defb6" translate="yes" xml:space="preserve">
          <source>To add an automatically named primary key constraint to a table, noting that a table can only ever have one primary key:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afa12cb0c308a9db161baf8949e517c49dc4c5c8" translate="yes" xml:space="preserve">
          <source>To add an existing function to the &lt;code&gt;hstore&lt;/code&gt; extension:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22b234bd9cd26b96824fe520230d7c5e449fc297" translate="yes" xml:space="preserve">
          <source>To add tables to a publication, the user must have ownership rights on the table. To create a publication that publishes all tables automatically, the user must be a superuser.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83730299a560c3c0731431f81b51c2abe2442fdf" translate="yes" xml:space="preserve">
          <source>To address these difficulties, we recommend using date/time types that contain both date and time when using time zones. We do &lt;em&gt;not&lt;/em&gt; recommend using the type &lt;code&gt;time with time zone&lt;/code&gt; (though it is supported by PostgreSQL for legacy applications and for compliance with the SQL standard). PostgreSQL assumes your local time zone for any type containing only date or time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7065094627525a073a51f64da60efc6b8e9bee4" translate="yes" xml:space="preserve">
          <source>To adjust the search path that is automatically set for a function:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="454e8b704e7b145c0be218174873a9c9a43d4489" translate="yes" xml:space="preserve">
          <source>To adjust the search path that is automatically set for a procedure:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43832a6258ef921e1a75d9d839da59e22b5679fa" translate="yes" xml:space="preserve">
          <source>To allow many users to use one database without interfering with each other.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69f1ad561f1cfb2e35cd3c6eff1bf6db4e335624" translate="yes" xml:space="preserve">
          <source>To alter the default collation order or character set classes, use the &lt;code&gt;--lc-collate&lt;/code&gt; and &lt;code&gt;--lc-ctype&lt;/code&gt; options. Collation orders other than &lt;code&gt;C&lt;/code&gt; or &lt;code&gt;POSIX&lt;/code&gt; also have a performance penalty. For these reasons it is important to choose the right locale when running &lt;code&gt;initdb&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2add0ec4b26fbbc0bb9c1c7436006edf85689aa1" translate="yes" xml:space="preserve">
          <source>To alter the default encoding, use the &lt;code&gt;--encoding&lt;/code&gt;. More details can be found in &lt;a href=&quot;multibyte&quot;&gt;Section 23.3&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1826e1649b94ce735f6431fdd9a17150394fd248" translate="yes" xml:space="preserve">
          <source>To alter the server you must be the owner of the server. Additionally to alter the owner, you must own the server and also be a direct or indirect member of the new owning role, and you must have &lt;code&gt;USAGE&lt;/code&gt; privilege on the server's foreign-data wrapper. (Note that superusers satisfy all these criteria automatically.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ddeb73fb5d4e79b9c3c1e564a7ef4c6351feb67" translate="yes" xml:space="preserve">
          <source>To analyze a table, one must ordinarily be the table's owner or a superuser. However, database owners are allowed to analyze all tables in their databases, except shared catalogs. (The restriction for shared catalogs means that a true database-wide &lt;code&gt;ANALYZE&lt;/code&gt; can only be performed by a superuser.) &lt;code&gt;ANALYZE&lt;/code&gt; will skip over any tables that the calling user does not have permission to analyze.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ceea8787427d383c0bca554922094f48e526fe4" translate="yes" xml:space="preserve">
          <source>To assign privileges, the &lt;a href=&quot;sql-grant&quot;&gt;GRANT&lt;/a&gt; command is used. For example, if &lt;code&gt;joe&lt;/code&gt; is an existing role, and &lt;code&gt;accounts&lt;/code&gt; is an existing table, the privilege to update the table can be granted with:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="841afb234a29a395e3e0830fae028e72521f88ca" translate="yes" xml:space="preserve">
          <source>To attach a default column value to an updatable view:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c91056b552b812becaf03884b78b11880acaa830" translate="yes" xml:space="preserve">
          <source>To attach a default partition to a partitioned table:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="903700b262c75e1e9a2686570b8d3d9a905f0191" translate="yes" xml:space="preserve">
          <source>To attach a partition to a hash-partitioned table:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="816912ec3804829192e5b4b51ed04c4c04e0fc1d" translate="yes" xml:space="preserve">
          <source>To attach a partition to a list-partitioned table:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38cc90d5c14d343f7257c521bec65b2a2c788861" translate="yes" xml:space="preserve">
          <source>To attach a partition to a range-partitioned table:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a338146ab7e1a8a6c29211a64020a73e715d047f" translate="yes" xml:space="preserve">
          <source>To avoid blocking concurrent transactions that obtain numbers from the same sequence, a &lt;code&gt;nextval&lt;/code&gt; operation is never rolled back; that is, once a value has been fetched it is considered used and will not be returned again. This is true even if the surrounding transaction later aborts, or if the calling query ends up not using the value. For example an &lt;code&gt;INSERT&lt;/code&gt; with an &lt;code&gt;ON CONFLICT&lt;/code&gt; clause will compute the to-be-inserted tuple, including doing any required &lt;code&gt;nextval&lt;/code&gt; calls, before detecting any conflict that would cause it to follow the &lt;code&gt;ON CONFLICT&lt;/code&gt; rule instead. Such cases will leave unused &amp;ldquo;holes&amp;rdquo; in the sequence of assigned values. Thus, PostgreSQL sequence objects &lt;em&gt;cannot be used to obtain &amp;ldquo;gapless&amp;rdquo; sequences&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77db4bef2cb8a0ae44c281dac0dfd436dc1a536b" translate="yes" xml:space="preserve">
          <source>To avoid confusion with the non-slice case, it's best to use slice syntax for all dimensions, e.g., &lt;code&gt;[1:2][1:1]&lt;/code&gt;, not &lt;code&gt;[2][1:1]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2abfccf591d4ddb924887ea39256c518691d084" translate="yes" xml:space="preserve">
          <source>To avoid flooding the I/O system with a burst of page writes, writing dirty buffers during a checkpoint is spread over a period of time. That period is controlled by &lt;a href=&quot;runtime-config-wal#GUC-CHECKPOINT-COMPLETION-TARGET&quot;&gt;checkpoint_completion_target&lt;/a&gt;, which is given as a fraction of the checkpoint interval. The I/O rate is adjusted so that the checkpoint finishes when the given fraction of &lt;code&gt;checkpoint_timeout&lt;/code&gt; seconds have elapsed, or before &lt;code&gt;max_wal_size&lt;/code&gt; is exceeded, whichever is sooner. With the default value of 0.5, PostgreSQL can be expected to complete each checkpoint in about half the time before the next checkpoint starts. On a system that's very close to maximum I/O throughput during normal operation, you might want to increase &lt;code&gt;checkpoint_completion_target&lt;/code&gt; to reduce the I/O load from checkpoints. The disadvantage of this is that prolonging checkpoints affects recovery time, because more WAL segments will need to be kept around for possible use in recovery. Although &lt;code&gt;checkpoint_completion_target&lt;/code&gt; can be set as high as 1.0, it is best to keep it less than that (perhaps 0.9 at most) since checkpoints include some other activities besides writing dirty buffers. A setting of 1.0 is quite likely to result in checkpoints not being completed on time, which would result in performance loss due to unexpected variation in the number of WAL segments needed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b5b7ab793933b28d259bd7231f552d4046ed360" translate="yes" xml:space="preserve">
          <source>To back up your database installation, type:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f94848a530617c32c61eaedaa18cb50416b23aee" translate="yes" xml:space="preserve">
          <source>To be able to create a cast, you must own the source or the target data type and have &lt;code&gt;USAGE&lt;/code&gt; privilege on the other type. To create a binary-coercible cast, you must be superuser. (This restriction is made because an erroneous binary-coercible cast conversion can easily crash the server.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9403a03a717e8159d4311e7a77af5d9d4fb13286" translate="yes" xml:space="preserve">
          <source>To be able to create a collation, you must have &lt;code&gt;CREATE&lt;/code&gt; privilege on the destination schema.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="004ac46cbced6bb34d9fcdda47baad54a412d6db" translate="yes" xml:space="preserve">
          <source>To be able to create a composite type, you must have &lt;code&gt;USAGE&lt;/code&gt; privilege on all attribute types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20b3394619973d7ff2a0ab6610243d2596213934" translate="yes" xml:space="preserve">
          <source>To be able to create a conversion, you must have &lt;code&gt;EXECUTE&lt;/code&gt; privilege on the function and &lt;code&gt;CREATE&lt;/code&gt; privilege on the destination schema.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="295a1d858678a24280b233e415d3074c116b7910" translate="yes" xml:space="preserve">
          <source>To be able to create a domain, you must have &lt;code&gt;USAGE&lt;/code&gt; privilege on the underlying type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e4637b6352c01797fe0bddb86f23c5c0081af1c" translate="yes" xml:space="preserve">
          <source>To be able to create a foreign table, you must have &lt;code&gt;USAGE&lt;/code&gt; privilege on the foreign server, as well as &lt;code&gt;USAGE&lt;/code&gt; privilege on all column types used in the table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ce885ed17ee0914c81250038c5ba73a1255a62b" translate="yes" xml:space="preserve">
          <source>To be able to create a function, you must have &lt;code&gt;USAGE&lt;/code&gt; privilege on the argument types and the return type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3349946c487347d94244d5f0d2b8cbf6db2014c" translate="yes" xml:space="preserve">
          <source>To be able to create a procedure, you must have &lt;code&gt;USAGE&lt;/code&gt; privilege on the argument types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e8d0cffcf604ddb9a2b21dd6b9ecc772bbb4ea7" translate="yes" xml:space="preserve">
          <source>To be able to create a table, you must have &lt;code&gt;USAGE&lt;/code&gt; privilege on all column types or the type in the &lt;code&gt;OF&lt;/code&gt; clause, respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c3d9e2e6a7511d1edae30a9dff5bd26d7e819ca" translate="yes" xml:space="preserve">
          <source>To be able to create a transform, you must own and have &lt;code&gt;USAGE&lt;/code&gt; privilege on the type, have &lt;code&gt;USAGE&lt;/code&gt; privilege on the language, and own and have &lt;code&gt;EXECUTE&lt;/code&gt; privilege on the from-SQL and to-SQL functions, if specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="492ecbb35318f60a13457061cf57ee1399559558" translate="yes" xml:space="preserve">
          <source>To be able to create an aggregate function, you must have &lt;code&gt;USAGE&lt;/code&gt; privilege on the argument types, the state type(s), and the return type, as well as &lt;code&gt;EXECUTE&lt;/code&gt; privilege on the supporting functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ec21fb5fc656c37513106d994c36fd0ac97b19a" translate="yes" xml:space="preserve">
          <source>To be able to create an operator, you must have &lt;code&gt;USAGE&lt;/code&gt; privilege on the argument types and the return type, as well as &lt;code&gt;EXECUTE&lt;/code&gt; privilege on the underlying function. If a commutator or negator operator is specified, you must own these operators.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1576f76a79f37902dec9d1049cfafa4fa8226f10" translate="yes" xml:space="preserve">
          <source>To be able to drop a cast, you must own the source or the target data type. These are the same privileges that are required to create a cast.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f24771db16a8b952d2aba66eabbf00ce04304eb5" translate="yes" xml:space="preserve">
          <source>To be able to drop a transform, you must own the type and the language. These are the same privileges that are required to create a transform.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b5f4f9a5727d863fa1595ea99bd05f639d52879" translate="yes" xml:space="preserve">
          <source>To be useful, an index access method must also have one or more &lt;em&gt;operator families&lt;/em&gt; and &lt;em&gt;operator classes&lt;/em&gt; defined in &lt;a href=&quot;catalog-pg-opfamily&quot;&gt;&lt;code&gt;pg_opfamily&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;catalog-pg-opclass&quot;&gt;&lt;code&gt;pg_opclass&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;catalog-pg-amop&quot;&gt;&lt;code&gt;pg_amop&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;catalog-pg-amproc&quot;&gt;&lt;code&gt;pg_amproc&lt;/code&gt;&lt;/a&gt;. These entries allow the planner to determine what kinds of query qualifications can be used with indexes of this access method. Operator families and classes are described in &lt;a href=&quot;https://www.postgresql.org/docs/12/xindex.html&quot;&gt;Section 37.16&lt;/a&gt;, which is prerequisite material for reading this chapter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20a4c4c99064dacb5bf122b1b529d83437bd93dc" translate="yes" xml:space="preserve">
          <source>To begin a SASL authentication exchange, the server sends an AuthenticationSASL message. It includes a list of SASL authentication mechanisms that the server can accept, in the server's preferred order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d863c4c1d2466cf7360c719b28ca35b233ce142" translate="yes" xml:space="preserve">
          <source>To begin a new transaction with the same snapshot as an already existing transaction, first export the snapshot from the existing transaction. That will return the snapshot identifier, for example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5f67d1858f44978073928296e3d5bdf0c554243" translate="yes" xml:space="preserve">
          <source>To begin a transaction block:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d63fb8b018b45b6ca4678226dc5b5b97fddd13a" translate="yes" xml:space="preserve">
          <source>To build this module, include the option &lt;code&gt;--with-selinux&lt;/code&gt; in your PostgreSQL &lt;code&gt;configure&lt;/code&gt; command. Be sure that the &lt;code&gt;libselinux-devel&lt;/code&gt; RPM is installed at build time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7fa621baea0b3b0913b5bf5570b502c47b4a36d" translate="yes" xml:space="preserve">
          <source>To call a function (not a procedure), use &lt;code&gt;SELECT&lt;/code&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5bfe5b3536a1a2fad1b91e3fc2b1b162c62c4bf" translate="yes" xml:space="preserve">
          <source>To cancel a running query, send the &lt;code&gt;SIGINT&lt;/code&gt; signal to the process running that command. To terminate a backend process cleanly, send &lt;code&gt;SIGTERM&lt;/code&gt; to that process. See also &lt;code&gt;pg_cancel_backend&lt;/code&gt; and &lt;code&gt;pg_terminate_backend&lt;/code&gt; in &lt;a href=&quot;functions-admin#FUNCTIONS-ADMIN-SIGNAL&quot;&gt;Section 9.26.2&lt;/a&gt; for the SQL-callable equivalents of these two actions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7124694e949a1f4440b60306713bd6c20059c689" translate="yes" xml:space="preserve">
          <source>To change an index's fill factor (assuming that the index method supports it):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6955113ac82d44bffe42ad325ae4781dcb416e27" translate="yes" xml:space="preserve">
          <source>To change an integer column containing Unix timestamps to &lt;code&gt;timestamp with time zone&lt;/code&gt; via a &lt;code&gt;USING&lt;/code&gt; clause:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c297dad60dcd6cd314e12568c335bf0cd7fff41" translate="yes" xml:space="preserve">
          <source>To change options of a foreign table:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99d1020f0ea652992c1f3cc6d0862f5775f34f3d" translate="yes" xml:space="preserve">
          <source>To change the owner of the aggregate function &lt;code&gt;myavg&lt;/code&gt; for type &lt;code&gt;integer&lt;/code&gt; to &lt;code&gt;joe&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef10e3fcd3c6781c71305649cddcd491edef3899" translate="yes" xml:space="preserve">
          <source>To change the owner of the collation &lt;code&gt;en_US&lt;/code&gt; to &lt;code&gt;joe&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2210eee6a53d3f3138510ccb5b7192d71091c40" translate="yes" xml:space="preserve">
          <source>To change the owner of the conversion &lt;code&gt;iso_8859_1_to_utf8&lt;/code&gt; to &lt;code&gt;joe&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9315eb7f46fb852d6250bffd8c242174b624ca93" translate="yes" xml:space="preserve">
          <source>To change the owner of the function &lt;code&gt;sqrt&lt;/code&gt; for type &lt;code&gt;integer&lt;/code&gt; to &lt;code&gt;joe&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e02af5ff31aa7df16e74fe6528519fcbdbfdd4a0" translate="yes" xml:space="preserve">
          <source>To change the owner of the procedure &lt;code&gt;insert_data&lt;/code&gt; with two arguments of type &lt;code&gt;integer&lt;/code&gt; to &lt;code&gt;joe&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e3fa5d60b34896d63a2a5418d8361fead53b69f" translate="yes" xml:space="preserve">
          <source>To change the owner of the type &lt;code&gt;email&lt;/code&gt; to &lt;code&gt;joe&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ba22599c15d79141f2290f4581a20c44866aa92" translate="yes" xml:space="preserve">
          <source>To change the schema of the &lt;code&gt;hstore&lt;/code&gt; extension to &lt;code&gt;utils&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a49ec78abaf3db529ca1802f32d2a37a26f5e05" translate="yes" xml:space="preserve">
          <source>To change the schema of the function &lt;code&gt;sqrt&lt;/code&gt; for type &lt;code&gt;integer&lt;/code&gt; to &lt;code&gt;maths&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="961024d3f9ac4941122ab86c292598b33e9c7465" translate="yes" xml:space="preserve">
          <source>To change the schema of the procedure &lt;code&gt;insert_data&lt;/code&gt; with two arguments of type &lt;code&gt;integer&lt;/code&gt; to &lt;code&gt;accounting&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1017843ce076fcbd256ae42991691e946e03d4f" translate="yes" xml:space="preserve">
          <source>To change the schema of the type &lt;code&gt;email&lt;/code&gt; to &lt;code&gt;customers&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02fa2f5cd59b1c854d3ebaeb3ad99f4c5cde5f62" translate="yes" xml:space="preserve">
          <source>To change the types of two existing columns in one operation:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="049a5efebaaac49c898beb6813a00487d2d41002" translate="yes" xml:space="preserve">
          <source>To check the total size of the data contained in &lt;code&gt;measurement&lt;/code&gt; table described in &lt;a href=&quot;ddl-partitioning#DDL-PARTITIONING-DECLARATIVE-EXAMPLE&quot;&gt;Section 5.11.2.1&lt;/a&gt;, one could use the following query:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a3decf48834644b5c1569c04cccf33236b32d5a" translate="yes" xml:space="preserve">
          <source>To check whether a value is or is not null, use the predicates:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6ba3615ed77c16bfcd03c7a57a0a7efbe26986a" translate="yes" xml:space="preserve">
          <source>To clean a single table &lt;code&gt;foo&lt;/code&gt; in a database named &lt;code&gt;xyzzy&lt;/code&gt;, and analyze a single column &lt;code&gt;bar&lt;/code&gt; of the table for the optimizer:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03d008a394089139c42aa272f11af61d21af849c" translate="yes" xml:space="preserve">
          <source>To clean a single table &lt;code&gt;onek&lt;/code&gt;, analyze it for the optimizer and print a detailed vacuum activity report:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0223c4eeb9d8178bcdc05a32e433b2a9dbbbd79a" translate="yes" xml:space="preserve">
          <source>To clean and analyze for the optimizer a database named &lt;code&gt;bigdb&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ebd0dab8ff9260010700d5784ae60c43d956fbb" translate="yes" xml:space="preserve">
          <source>To clean the database &lt;code&gt;test&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d36a88d4536d1564194241cddefae5029a567721" translate="yes" xml:space="preserve">
          <source>To cluster a single table &lt;code&gt;foo&lt;/code&gt; in a database named &lt;code&gt;xyzzy&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cab04f1bb9371b8d93c069fac5fea1fc0c16730c" translate="yes" xml:space="preserve">
          <source>To cluster the database &lt;code&gt;test&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8068924d6aaad9348ff2cc80e45e87a55218c74c" translate="yes" xml:space="preserve">
          <source>To combine multiple indexes, the system scans each needed index and prepares a &lt;em&gt;bitmap&lt;/em&gt; in memory giving the locations of table rows that are reported as matching that index's conditions. The bitmaps are then ANDed and ORed together as needed by the query. Finally, the actual table rows are visited and returned. The table rows are visited in physical order, because that is how the bitmap is laid out; this means that any ordering of the original indexes is lost, and so a separate sort step will be needed if the query has an &lt;code&gt;ORDER BY&lt;/code&gt; clause. For this reason, and because each additional index scan adds extra time, the planner will sometimes choose to use a simple index scan even though additional indexes are available that could have been used as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00ca92af0e53c4377a2cb5350ec6b01f99364b8e" translate="yes" xml:space="preserve">
          <source>To commit a prepared transaction, you must be either the same user that executed the transaction originally, or a superuser. But you do not have to be in the same session that executed the transaction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c2c489f97856e1040807fb30de91b1ff577ac3f" translate="yes" xml:space="preserve">
          <source>To commit the current transaction and make all changes permanent:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8722e0a102936bb4e4c8a1d09a997df3bf85a004" translate="yes" xml:space="preserve">
          <source>To complicate matters, some jurisdictions have used the same timezone abbreviation to mean different UTC offsets at different times; for example, in Moscow &lt;code&gt;MSK&lt;/code&gt; has meant UTC+3 in some years and UTC+4 in others. PostgreSQL interprets such abbreviations according to whatever they meant (or had most recently meant) on the specified date; but, as with the &lt;code&gt;EST&lt;/code&gt; example above, this is not necessarily the same as local civil time on that date.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e97a3d957963e8fcc423128adb2cd06a9c70b0e8" translate="yes" xml:space="preserve">
          <source>To configure a standby server to use pg_archivecleanup, put this into its &lt;code&gt;postgresql.conf&lt;/code&gt; configuration file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15b03f0e740dbe1dcdd3d494e8fe7ef028e5cebd" translate="yes" xml:space="preserve">
          <source>To configure the standby to use this slot, &lt;code&gt;primary_slot_name&lt;/code&gt; should be configured on the standby. Here is a simple example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6290ec10542845d0ddebfa7746333f2a489b6d0f" translate="yes" xml:space="preserve">
          <source>To connect to a particular database, a user must not only pass the &lt;code&gt;pg_hba.conf&lt;/code&gt; checks, but must have the &lt;code&gt;CONNECT&lt;/code&gt; privilege for the database. If you wish to restrict which users can connect to which databases, it's usually easier to control this by granting/revoking &lt;code&gt;CONNECT&lt;/code&gt; privilege than to put the rules in &lt;code&gt;pg_hba.conf&lt;/code&gt; entries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ebc848d3357434419fff443659c293fb158987a" translate="yes" xml:space="preserve">
          <source>To connect to this server using psql, specify this port with the -p option:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4410b5e31b45b8b22ca1d9903ef6943e81eb2ac0" translate="yes" xml:space="preserve">
          <source>To convert a column to a different data type, use a command like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fef5624a1d1e08c22d86e5fbc6f1e0129dd604df" translate="yes" xml:space="preserve">
          <source>To copy a table completely, the short form using the &lt;code&gt;TABLE&lt;/code&gt; command can also be used:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e75e99b9c752d67b15f22015a111ca5f58da271e" translate="yes" xml:space="preserve">
          <source>To copy data from a file into the &lt;code&gt;country&lt;/code&gt; table:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1392415e4938e657b0920236ebe7bdc0d105f5e" translate="yes" xml:space="preserve">
          <source>To copy into a compressed file, you can pipe the output through an external compression program:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b0e96672f8aca7577ebe018bf4d51d014d00c0c" translate="yes" xml:space="preserve">
          <source>To copy into a file just the countries whose names start with 'A':</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9938c28d5e04efe3b2ed6d4b9e038b44b264feb1" translate="yes" xml:space="preserve">
          <source>To create a GIN index with fast updates disabled:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70b56f88ded64f4ee2c9afba4799fc0371abf06b" translate="yes" xml:space="preserve">
          <source>To create a GiST index on a point attribute so that we can efficiently use box operators on the result of the conversion function:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3aea2a10769e18a2aeada094ee0d0b98f9fa398" translate="yes" xml:space="preserve">
          <source>To create a backup of a local database where the tablespace in &lt;code&gt;/opt/ts&lt;/code&gt; is relocated to &lt;code&gt;./backup/ts&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6459c1471fe7288d512cf1eb3beb6d53897abf59" translate="yes" xml:space="preserve">
          <source>To create a backup of a single-tablespace local database and compress this with bzip2:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c249aecad18bf81babc126ff3cabfeb813ea5fd" translate="yes" xml:space="preserve">
          <source>To create a backup of the local server with one compressed tar file for each tablespace, and store it in the directory &lt;code&gt;backup&lt;/code&gt;, showing a progress report while running:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4512427b0bf3312fa6a876ae68c686a59bfc1e1a" translate="yes" xml:space="preserve">
          <source>To create a base backup of the server at &lt;code&gt;mydbserver&lt;/code&gt; and store it in the local directory &lt;code&gt;/usr/local/pgsql/data&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dd9c8299d9f5843b300e409173ef3b9254191b7" translate="yes" xml:space="preserve">
          <source>To create a collation from an existing collation:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c3ab8737c7f5d3cbae3bfe2663adcc61cd53c0e" translate="yes" xml:space="preserve">
          <source>To create a collation from the operating system locale &lt;code&gt;fr_FR.utf8&lt;/code&gt; (assuming the current database encoding is &lt;code&gt;UTF8&lt;/code&gt;):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6f995f6b55b09e4192f2da33dedebef3c0f9550" translate="yes" xml:space="preserve">
          <source>To create a collation using the ICU provider using German phone book sort order:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37400e312eb41c20789506b2aff48f51d113fb06" translate="yes" xml:space="preserve">
          <source>To create a conversion from encoding &lt;code&gt;UTF8&lt;/code&gt; to &lt;code&gt;LATIN1&lt;/code&gt; using &lt;code&gt;myfunc&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89d026413429cbe22fa30a37ce5992d4ad7a1deb" translate="yes" xml:space="preserve">
          <source>To create a database &lt;code&gt;music2&lt;/code&gt; with a different locale and a different character set encoding:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddf790c056f93f33fa0d0613c7b46f81031cf7b9" translate="yes" xml:space="preserve">
          <source>To create a database &lt;code&gt;music&lt;/code&gt; with a different locale:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77c7a58e702554d6a54a59128c311148147ebec1" translate="yes" xml:space="preserve">
          <source>To create a database &lt;code&gt;sales&lt;/code&gt; owned by user &lt;code&gt;salesapp&lt;/code&gt; with a default tablespace of &lt;code&gt;salesspace&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3228293205178b589ad42b9758471b3eb9d23e95" translate="yes" xml:space="preserve">
          <source>To create a database by copying &lt;code&gt;template0&lt;/code&gt;, use:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98c1e5ccbfb7a38c808d162facd87b5b3f873eb5" translate="yes" xml:space="preserve">
          <source>To create a database, you must be a superuser or have the special &lt;code&gt;CREATEDB&lt;/code&gt; privilege. See &lt;a href=&quot;sql-createrole&quot;&gt;CREATE ROLE&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d728f64aca75037086b1f8f773c55b39dbc706f2" translate="yes" xml:space="preserve">
          <source>To create a generated column, use the &lt;code&gt;GENERATED ALWAYS AS&lt;/code&gt; clause in &lt;code&gt;CREATE TABLE&lt;/code&gt;, for example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe6d46bed46bf76a565070a6f714a6f85543fb8b" translate="yes" xml:space="preserve">
          <source>To create a new database, in this example named &lt;code&gt;mydb&lt;/code&gt;, you use the following command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="944120cb7dfcbcf00146c8068b87b4b7681b58f2" translate="yes" xml:space="preserve">
          <source>To create a new database:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="164615fbd4052417b63e19f9e6150d9fa43cadd5" translate="yes" xml:space="preserve">
          <source>To create a new row, use the &lt;a href=&quot;sql-insert&quot;&gt;INSERT&lt;/a&gt; command. The command requires the table name and column values. For example, consider the products table from &lt;a href=&quot;https://www.postgresql.org/docs/12/ddl.html&quot;&gt;Chapter 5&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e4a9625799af4fa2c817e41733ba1818843f4bc" translate="yes" xml:space="preserve">
          <source>To create a nondeterministic collation, specify the property &lt;code&gt;deterministic = false&lt;/code&gt; to &lt;code&gt;CREATE COLLATION&lt;/code&gt;, for example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bece4672c16769d53407f8ac1fce152578224a4" translate="yes" xml:space="preserve">
          <source>To create a partial index that suits our example, use a command such as this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94c4a05ba1b161a82cb7f1cede5c13fa27ff0d31" translate="yes" xml:space="preserve">
          <source>To create a publication, the invoking user must have the &lt;code&gt;CREATE&lt;/code&gt; privilege for the current database. (Of course, superusers bypass this check.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e19fe1acbe2c89906009c9ae7f5b9b8e50b0116" translate="yes" xml:space="preserve">
          <source>To create a publication, the user must have the &lt;code&gt;CREATE&lt;/code&gt; privilege in the database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82818a82b8737a5ccba600431c5567222d5f7217" translate="yes" xml:space="preserve">
          <source>To create a schema, the invoking user must have the &lt;code&gt;CREATE&lt;/code&gt; privilege for the current database. (Of course, superusers bypass this check.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e16e57c628302c59115654ccf739b24bc40990c" translate="yes" xml:space="preserve">
          <source>To create a schema, use the &lt;a href=&quot;sql-createschema&quot;&gt;CREATE SCHEMA&lt;/a&gt; command. Give the schema a name of your choice. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c076c41c550c9d20ce9da7cb634e90253f684fe" translate="yes" xml:space="preserve">
          <source>To create a server certificate whose identity can be validated by clients, first create a certificate signing request (CSR) and a public/private key file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b7bd094f458984cd99ccbc500517389e47e3d27" translate="yes" xml:space="preserve">
          <source>To create a simple self-signed certificate for the server, valid for 365 days, use the following OpenSSL command, replacing &lt;code&gt;dbhost.yourdomain.com&lt;/code&gt; with the server's host name:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdc276e86df85d79d1975e1aab1405440c49a4a5" translate="yes" xml:space="preserve">
          <source>To create a subscription, the user must be a superuser.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f62ecd7fc3b3c7cddbee7892269e1b205e56b9f5" translate="yes" xml:space="preserve">
          <source>To create a table alias, write</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a36b6ab5a3c0f86da9166604c99b7556b78e53d3" translate="yes" xml:space="preserve">
          <source>To create a table, you use the aptly named &lt;a href=&quot;sql-createtable&quot;&gt;CREATE TABLE&lt;/a&gt; command. In this command you specify at least a name for the new table, the names of the columns and the data type of each column. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef7e4c5658e9c01ed12be2b853f9a21a21c0a775" translate="yes" xml:space="preserve">
          <source>To create a tablespace &lt;code&gt;dbspace&lt;/code&gt; at file system location &lt;code&gt;/data/dbs&lt;/code&gt;, first create the directory using operating system facilities and set the correct ownership:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c90745ea9680b02fd1264be6b5adf41862e7bb1b" translate="yes" xml:space="preserve">
          <source>To create a tablespace owned by a different database user, use a command like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59a1849fe63b24cb0890dd29697e64e3955e0989" translate="yes" xml:space="preserve">
          <source>To create a transform for type &lt;code&gt;hstore&lt;/code&gt; and language &lt;code&gt;plpythonu&lt;/code&gt;, first set up the type and the language:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82e9f78b5e0935384e76288e143c8285785f8f57" translate="yes" xml:space="preserve">
          <source>To create a trigger on a table, the user must have the &lt;code&gt;TRIGGER&lt;/code&gt; privilege on the table. The user must also have &lt;code&gt;EXECUTE&lt;/code&gt; privilege on the trigger function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ad55cc89474d269f7ab84efbc2f63c3cf2a776a" translate="yes" xml:space="preserve">
          <source>To create a unique B-tree index on the column &lt;code&gt;title&lt;/code&gt; in the table &lt;code&gt;films&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ac8384bf603c41e77fc0497788f00754dc4f97d" translate="yes" xml:space="preserve">
          <source>To create a unique B-tree index on the column &lt;code&gt;title&lt;/code&gt; with included columns &lt;code&gt;director&lt;/code&gt; and &lt;code&gt;rating&lt;/code&gt; in the table &lt;code&gt;films&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2771d4c58e957e52b458e2099556c1af64484a04" translate="yes" xml:space="preserve">
          <source>To create a user &lt;code&gt;joe&lt;/code&gt; on the default database server with prompting for some additional attributes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="237677bf7f6116190203bde2a56293c2c9744671" translate="yes" xml:space="preserve">
          <source>To create a user &lt;code&gt;joe&lt;/code&gt; on the default database server:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c626cd27d2903b041a265be4cbc4cd70ada6c091" translate="yes" xml:space="preserve">
          <source>To create an Ispell dictionary perform these steps:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f623c21177eb05a9c2c99ce655edbf1921ade3c" translate="yes" xml:space="preserve">
          <source>To create an assignment cast from type &lt;code&gt;bigint&lt;/code&gt; to type &lt;code&gt;int4&lt;/code&gt; using the function &lt;code&gt;int4(bigint)&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e425065f3f16826d8585cb251e9294cec898cef" translate="yes" xml:space="preserve">
          <source>To create an index on the column &lt;code&gt;code&lt;/code&gt; in the table &lt;code&gt;films&lt;/code&gt; and have the index reside in the tablespace &lt;code&gt;indexspace&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51282a9a6eaf7d1d2c775ba39707e66f5cc8d2ab" translate="yes" xml:space="preserve">
          <source>To create an index on the expression &lt;code&gt;lower(title)&lt;/code&gt;, allowing efficient case-insensitive searches:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05080049ba907f8e2ebb4f8e83189ac4df6eae27" translate="yes" xml:space="preserve">
          <source>To create an index with non-default collation:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae5e619c87b8495a3c775c2e057cf9cc24726284" translate="yes" xml:space="preserve">
          <source>To create an index with non-default fill factor:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa7ca2ae5a8ba1b87ad938de2374091c155e63c3" translate="yes" xml:space="preserve">
          <source>To create an index with non-default sort ordering of nulls:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bfa732afcdfdf06839ce25d42124ae300659f8e" translate="yes" xml:space="preserve">
          <source>To create an index without locking out writes to the table:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d53339e9d8aae8b8d5f4abfe2e3853a4dcdbc60c" translate="yes" xml:space="preserve">
          <source>To create functions in a procedural language, a user must have the &lt;code&gt;USAGE&lt;/code&gt; privilege for the language. By default, &lt;code&gt;USAGE&lt;/code&gt; is granted to &lt;code&gt;PUBLIC&lt;/code&gt; (i.e., everyone) for trusted languages. This can be revoked if desired.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="128acbfc6605f02795881a6d5e5df2f768c7238b" translate="yes" xml:space="preserve">
          <source>To create or access objects in a schema, write a &lt;em&gt;qualified name&lt;/em&gt; consisting of the schema name and table name separated by a dot:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="319b11f872179f690e1c636d54351f3fcf40ca66" translate="yes" xml:space="preserve">
          <source>To create the database &lt;code&gt;demo&lt;/code&gt; using the default database server:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e89ca2b57992709dac0e0f7f21762ad921861100" translate="yes" xml:space="preserve">
          <source>To create the database &lt;code&gt;demo&lt;/code&gt; using the server on host &lt;code&gt;eden&lt;/code&gt;, port 5000, using the &lt;code&gt;template0&lt;/code&gt; template database, here is the command-line command and the underlying SQL command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ed18302d2f5c67326d42076e0c535c3180f4594" translate="yes" xml:space="preserve">
          <source>To create the same user &lt;code&gt;joe&lt;/code&gt; using the server on host &lt;code&gt;eden&lt;/code&gt;, port 5000, with attributes explicitly specified, taking a look at the underlying command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04dfb9f7e981bc2d21a15704ba7750b7d32766f0" translate="yes" xml:space="preserve">
          <source>To create the user &lt;code&gt;joe&lt;/code&gt; as a superuser, and assign a password immediately:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="babc49c12d3facd66590239c46cb7e620e0bfd11" translate="yes" xml:space="preserve">
          <source>To deal with default (anonymous) namespaces, do something like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd9e4512d47fc711a9256823ffecbf1d45d4bd71" translate="yes" xml:space="preserve">
          <source>To deal with the case where &lt;code&gt;pg_control&lt;/code&gt; is corrupt, we should support the possibility of scanning existing log segments in reverse order &amp;mdash; newest to oldest &amp;mdash; in order to find the latest checkpoint. This has not been implemented yet. &lt;code&gt;pg_control&lt;/code&gt; is small enough (less than one disk page) that it is not subject to partial-write problems, and as of this writing there have been no reports of database failures due solely to the inability to read &lt;code&gt;pg_control&lt;/code&gt; itself. So while it is theoretically a weak spot, &lt;code&gt;pg_control&lt;/code&gt; does not seem to be a problem in practice.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39c5bf42838c1568d98d59b59281df581edfb974" translate="yes" xml:space="preserve">
          <source>To deal with this problem, PostgreSQL has a notion of &lt;em&gt;timelines&lt;/em&gt;. Whenever an archive recovery completes, a new timeline is created to identify the series of WAL records generated after that recovery. The timeline ID number is part of WAL segment file names so a new timeline does not overwrite the WAL data generated by previous timelines. It is in fact possible to archive many different timelines. While that might seem like a useless feature, it's often a lifesaver. Consider the situation where you aren't quite sure what point-in-time to recover to, and so have to do several point-in-time recoveries by trial and error until you find the best place to branch off from the old history. Without timelines this process would soon generate an unmanageable mess. With timelines, you can recover to &lt;em&gt;any&lt;/em&gt; prior state, including states in timeline branches that you abandoned earlier.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d2134c754d1f2a6c1e2e46af69683b00472282e" translate="yes" xml:space="preserve">
          <source>To declare a cursor:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84af5092ab2a247997e10ca0d1bc473758fcfac3" translate="yes" xml:space="preserve">
          <source>To define a new thesaurus dictionary, use the &lt;code&gt;thesaurus&lt;/code&gt; template. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="986fed59a4009699f6854122fd2da5a9d70e789c" translate="yes" xml:space="preserve">
          <source>To define a tablespace, use the &lt;a href=&quot;sql-createtablespace&quot;&gt;CREATE TABLESPACE&lt;/a&gt; command, for example::</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3322b8a3e9208d1b84d64763aa4d498d5f5f9b90" translate="yes" xml:space="preserve">
          <source>To define a unique constraint for a group of columns, write it as a table constraint with the column names separated by commas:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13984f59bd22b2e9a275f04bd11f7f208d4ebb22" translate="yes" xml:space="preserve">
          <source>To destroy a group role, use &lt;a href=&quot;sql-droprole&quot;&gt;DROP ROLE&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64a4ab0af63189bc2f7d08c702da849479dd3444" translate="yes" xml:space="preserve">
          <source>To destroy the database &lt;code&gt;demo&lt;/code&gt; on the default database server:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f03b9dc196b5135db2ccadd50b164e25c9e5713e" translate="yes" xml:space="preserve">
          <source>To destroy the database &lt;code&gt;demo&lt;/code&gt; using the server on host &lt;code&gt;eden&lt;/code&gt;, port 5000, with verification and a peek at the underlying command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df964b5603cc1f31ca3e16e223d4d090f27c044b" translate="yes" xml:space="preserve">
          <source>To destroy two foreign tables, &lt;code&gt;films&lt;/code&gt; and &lt;code&gt;distributors&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ec6a07ba428b18226f2b5a402d4961467e4a4ea" translate="yes" xml:space="preserve">
          <source>To destroy two statistics objects in different schemas, without failing if they don't exist:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81af71b34f901bb661a7e2f097b2993687db9cf7" translate="yes" xml:space="preserve">
          <source>To destroy two tables, &lt;code&gt;films&lt;/code&gt; and &lt;code&gt;distributors&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b252fd181d3818b104f824d7c95b6854e6d1ece7" translate="yes" xml:space="preserve">
          <source>To detach a partition from a partitioned table:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0044107f538078feefff2c648b605c188ca65c2e" translate="yes" xml:space="preserve">
          <source>To determine the appropriate binary format for the actual tuple data you should consult the PostgreSQL source, in particular the &lt;code&gt;*send&lt;/code&gt; and &lt;code&gt;*recv&lt;/code&gt; functions for each column's data type (typically these functions are found in the &lt;code&gt;src/backend/utils/adt/&lt;/code&gt; directory of the source distribution).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e31d0944ab57fd8cade86828e515e67c0b9e0ae8" translate="yes" xml:space="preserve">
          <source>To determine the order of the concatenation, an &lt;code&gt;ORDER BY&lt;/code&gt; clause may be added to the aggregate call as described in &lt;a href=&quot;sql-expressions#SYNTAX-AGGREGATES&quot;&gt;Section 4.2.7&lt;/a&gt;. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cc82b13558ed0c2d82c9bba8c5ef830aa7a5ef2" translate="yes" xml:space="preserve">
          <source>To determine the set of existing roles, examine the &lt;code&gt;pg_roles&lt;/code&gt; system catalog, for example</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b4a4628e23a852dc21a12a35a6273456e5d0a74" translate="yes" xml:space="preserve">
          <source>To determine the set of existing tablespaces, examine the &lt;a href=&quot;catalog-pg-tablespace&quot;&gt;&lt;code&gt;pg_tablespace&lt;/code&gt;&lt;/a&gt; system catalog, for example</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67be13fb22fe0a90f5bd44f329bd0f53bd1ebaeb" translate="yes" xml:space="preserve">
          <source>To determine whether JIT compilation should be used, the total estimated cost of a query (see &lt;a href=&quot;https://www.postgresql.org/docs/12/planner-stats-details.html&quot;&gt;Chapter 70&lt;/a&gt; and &lt;a href=&quot;runtime-config-query#RUNTIME-CONFIG-QUERY-CONSTANTS&quot;&gt;Section 19.7.2&lt;/a&gt;) is used. The estimated cost of the query will be compared with the setting of &lt;a href=&quot;runtime-config-query#GUC-JIT-ABOVE-COST&quot;&gt;jit_above_cost&lt;/a&gt;. If the cost is higher, JIT compilation will be performed. Two further decisions are then needed. Firstly, if the estimated cost is more than the setting of &lt;a href=&quot;runtime-config-query#GUC-JIT-INLINE-ABOVE-COST&quot;&gt;jit_inline_above_cost&lt;/a&gt;, short functions and operators used in the query will be inlined. Secondly, if the estimated cost is more than the setting of &lt;a href=&quot;runtime-config-query#GUC-JIT-OPTIMIZE-ABOVE-COST&quot;&gt;jit_optimize_above_cost&lt;/a&gt;, expensive optimizations are applied to improve the generated code. Each of these options increases the JIT compilation overhead, but can reduce query execution time considerably.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff46a0305932a1f3445ee6313f1d0daf52062e57" translate="yes" xml:space="preserve">
          <source>To disable automatic setting of &lt;code&gt;search_path&lt;/code&gt; for a function:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77fbee93c3d08bf4bda4ad9e741740820f97d1d4" translate="yes" xml:space="preserve">
          <source>To disable automatic setting of &lt;code&gt;search_path&lt;/code&gt; for a procedure:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b6c666b2d88a7708fb69cf0c000987713ddc46b" translate="yes" xml:space="preserve">
          <source>To disable index scans by default in the database &lt;code&gt;test&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="974aa31fe110ad158240e77cb25b55cdcd0f2bb8" translate="yes" xml:space="preserve">
          <source>To drop a column from a table:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7563d557973f5540735b227a3024deefab9a8f9a" translate="yes" xml:space="preserve">
          <source>To drop a role:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea1476cc270643bf4c0daffe9f6762c612c57a68" translate="yes" xml:space="preserve">
          <source>To drop a schema if it's empty (all objects in it have been dropped), use:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98f5a15e760ae655ecd92960d3186ff62d5da1a9" translate="yes" xml:space="preserve">
          <source>To drop a schema including all contained objects, use:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae7da2be12d9a6b52a1340412503a9cc6c084b6b" translate="yes" xml:space="preserve">
          <source>To drop the cast from type &lt;code&gt;text&lt;/code&gt; to type &lt;code&gt;int&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d7ae6be69ee16ba6ee8e2f538a3a91b6b9353cc" translate="yes" xml:space="preserve">
          <source>To drop the collation named &lt;code&gt;german&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="765c47319b0ff7251415602face256f2933e7d23" translate="yes" xml:space="preserve">
          <source>To drop the conversion named &lt;code&gt;myname&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5dd444bb871586a10018bf6ff6b8b8550a2c9a8" translate="yes" xml:space="preserve">
          <source>To drop the database and recreate it from the dump:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95246e041a3a0cc9fdc71cc859d3bf606b576692" translate="yes" xml:space="preserve">
          <source>To drop the policy called &lt;code&gt;p1&lt;/code&gt; on the table named &lt;code&gt;my_table&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a5bae2f9602e17d08d292952c8a5d8f7ac34691" translate="yes" xml:space="preserve">
          <source>To drop the rewrite rule &lt;code&gt;newrule&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="110d9c4f62582ddf4909360dee5c526218c434e0" translate="yes" xml:space="preserve">
          <source>To drop the routine &lt;code&gt;foo&lt;/code&gt; for type &lt;code&gt;integer&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c536a04fe8d2446d8d61338be4ba1bab5c783796" translate="yes" xml:space="preserve">
          <source>To drop the transform for type &lt;code&gt;hstore&lt;/code&gt; and language &lt;code&gt;plpythonu&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5caa707f178a9cc755d7e779932a23df8fa2f1ca" translate="yes" xml:space="preserve">
          <source>To dump a database called &lt;code&gt;mydb&lt;/code&gt; into a SQL-script file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8121f62b8666545b2e2e99dedbccab51245f9807" translate="yes" xml:space="preserve">
          <source>To dump a database into a custom-format archive file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d437ca9f46ee2993ef3f0545d06bedd57d2c6b4f" translate="yes" xml:space="preserve">
          <source>To dump a database into a directory-format archive in parallel with 5 worker jobs:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31fa398ad5cf2d5e038474c944b981aa565b1e44" translate="yes" xml:space="preserve">
          <source>To dump a database into a directory-format archive:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad76ea44a0ef53ad9ef9efb8caa4b902f280c164" translate="yes" xml:space="preserve">
          <source>To dump a single table named &lt;code&gt;mytab&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d511ed087693f26bd4759bf8b1d27193b49e5e6" translate="yes" xml:space="preserve">
          <source>To dump all database objects except for tables whose names begin with &lt;code&gt;ts_&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5105a7d069d122946e3111a4bbe722d0a3cd0a79" translate="yes" xml:space="preserve">
          <source>To dump all databases:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="999dcebdfcf4047b6459cc6ecf19931338457350" translate="yes" xml:space="preserve">
          <source>To dump all schemas whose names start with &lt;code&gt;east&lt;/code&gt; or &lt;code&gt;west&lt;/code&gt; and end in &lt;code&gt;gsm&lt;/code&gt;, excluding any schemas whose names contain the word &lt;code&gt;test&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5301289a56ba7d9472a3d1bd5a043059fbfce396" translate="yes" xml:space="preserve">
          <source>To dump all tables whose names start with &lt;code&gt;emp&lt;/code&gt; in the &lt;code&gt;detroit&lt;/code&gt; schema, except for the table named &lt;code&gt;employee_log&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f5c9b25307e1ce17bf381cf6cff0bda0e9cf7e6" translate="yes" xml:space="preserve">
          <source>To ease transition from the &lt;code&gt;md5&lt;/code&gt; method to the newer SCRAM method, if &lt;code&gt;md5&lt;/code&gt; is specified as a method in &lt;code&gt;pg_hba.conf&lt;/code&gt; but the user's password on the server is encrypted for SCRAM (see below), then SCRAM-based authentication will automatically be chosen instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88489631fd89d19542342fc6ed140890035ad782" translate="yes" xml:space="preserve">
          <source>To enable WAL archiving, set the &lt;a href=&quot;runtime-config-wal#GUC-WAL-LEVEL&quot;&gt;wal_level&lt;/a&gt; configuration parameter to &lt;code&gt;replica&lt;/code&gt; or higher, &lt;a href=&quot;runtime-config-wal#GUC-ARCHIVE-MODE&quot;&gt;archive_mode&lt;/a&gt; to &lt;code&gt;on&lt;/code&gt;, and specify the shell command to use in the &lt;a href=&quot;runtime-config-wal#GUC-ARCHIVE-COMMAND&quot;&gt;archive_command&lt;/a&gt; configuration parameter. In practice these settings will always be placed in the &lt;code&gt;postgresql.conf&lt;/code&gt; file. In &lt;code&gt;archive_command&lt;/code&gt;, &lt;code&gt;%p&lt;/code&gt; is replaced by the path name of the file to archive, while &lt;code&gt;%f&lt;/code&gt; is replaced by only the file name. (The path name is relative to the current working directory, i.e., the cluster's data directory.) Use &lt;code&gt;%%&lt;/code&gt; if you need to embed an actual &lt;code&gt;%&lt;/code&gt; character in the command. The simplest useful command is something like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="163a2853661a9a827e1b4d5f0ebf9245d216aeaf" translate="yes" xml:space="preserve">
          <source>To enable automatic character set conversion, you have to tell PostgreSQL the character set (encoding) you would like to use in the client. There are several ways to accomplish this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61f220328ec4a4eaf272f16874cf3e03c4c355b3" translate="yes" xml:space="preserve">
          <source>To enable event logging in the database server, modify &lt;a href=&quot;runtime-config-logging#GUC-LOG-DESTINATION&quot;&gt;log_destination&lt;/a&gt; to include &lt;code&gt;eventlog&lt;/code&gt; in &lt;code&gt;postgresql.conf&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a794df8102be7ea9270fd8cde81341bb2ca2e8b9" translate="yes" xml:space="preserve">
          <source>To enable messages to be translated to the user's preferred language, NLS must have been selected at build time (&lt;code&gt;configure --enable-nls&lt;/code&gt;). All other locale support is built in automatically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33769b6666be88b23bc239c6978f70ef47bd7c0c" translate="yes" xml:space="preserve">
          <source>To enable this module, add &lt;code&gt;'$libdir/passwordcheck'&lt;/code&gt; to &lt;a href=&quot;runtime-config-client#GUC-SHARED-PRELOAD-LIBRARIES&quot;&gt;shared_preload_libraries&lt;/a&gt; in &lt;code&gt;postgresql.conf&lt;/code&gt;, then restart the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49d847ac2d6554d00f1cf26dcadd69be9408d2b9" translate="yes" xml:space="preserve">
          <source>To ensure the integrity of the entire database structure, PostgreSQL makes sure that you cannot drop objects that other objects still depend on. For example, attempting to drop the products table we considered in &lt;a href=&quot;ddl-constraints#DDL-CONSTRAINTS-FK&quot;&gt;Section 5.4.5&lt;/a&gt;, with the orders table depending on it, would result in an error message like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4eb94062de7d5c68db4eebe8d5792a4bae6fa4de" translate="yes" xml:space="preserve">
          <source>To establish a savepoint and later undo the effects of all commands executed after it was established:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc6a8d9f6b4e580d2ee11faae1f76e83795f9119" translate="yes" xml:space="preserve">
          <source>To establish and later destroy a savepoint:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d022cb095a28d12057cc4d30c9ed630d8c4a81c" translate="yes" xml:space="preserve">
          <source>To examine a list of the currently outstanding locks in a database server, use the &lt;a href=&quot;view-pg-locks&quot;&gt;&lt;code&gt;pg_locks&lt;/code&gt;&lt;/a&gt; system view. For more information on monitoring the status of the lock manager subsystem, refer to &lt;a href=&quot;https://www.postgresql.org/docs/12/monitoring.html&quot;&gt;Chapter 27&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee179a7e650337f5be46128f8c744f60566325a2" translate="yes" xml:space="preserve">
          <source>To examine the query plan PostgreSQL is using for a prepared statement, use &lt;a href=&quot;sql-explain&quot;&gt;EXPLAIN&lt;/a&gt;, for example</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ab98980692e8ae3b65879ae33d5792b980cffc7" translate="yes" xml:space="preserve">
          <source>To exclude data for all tables in the database, see &lt;code&gt;--schema-only&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd00aea3b9256ff7a4422dd7af6985b4801677da" translate="yes" xml:space="preserve">
          <source>To exclude table data for only a subset of tables in the database, see &lt;code&gt;--exclude-table-data&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6162526b00490b1f2f1658b53775455d6ca15472" translate="yes" xml:space="preserve">
          <source>To export a public key in ASCII-armor format:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a23b559273ee4d257c470044a91813e890937385" translate="yes" xml:space="preserve">
          <source>To export a secret key in ASCII-armor format:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86f886ace5f866856fb04921712ddce243cc4f95" translate="yes" xml:space="preserve">
          <source>To facilitate controlled execution of such queries, GIN has a configurable soft upper limit on the number of rows returned: the &lt;code&gt;gin_fuzzy_search_limit&lt;/code&gt; configuration parameter. It is set to 0 (meaning no limit) by default. If a non-zero limit is set, then the returned set is a subset of the whole result set, chosen at random.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fabf2744d8a8f45bc9091582373665b13db0b3ab" translate="yes" xml:space="preserve">
          <source>To find an available OID for a new pre-loaded row, run the script &lt;code&gt;src/include/catalog/unused_oids&lt;/code&gt;. It prints inclusive ranges of unused OIDs (e.g., the output line &amp;ldquo;45-900&amp;rdquo; means OIDs 45 through 900 have not been allocated yet). Currently, OIDs 1-9999 are reserved for manual assignment; the &lt;code&gt;unused_oids&lt;/code&gt; script simply looks through the catalog headers and &lt;code&gt;.dat&lt;/code&gt; files to see which ones do not appear. You can also use the &lt;code&gt;duplicate_oids&lt;/code&gt; script to check for mistakes. (&lt;code&gt;genbki.pl&lt;/code&gt; will assign OIDs for any rows that didn't get one hand-assigned to them, and it will also detect duplicate OIDs at compile time.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7b4d89e57b00cb717b3a45dca9a44135790f4f2" translate="yes" xml:space="preserve">
          <source>To force immediate reclamation of space occupied by a dropped column, you can execute one of the forms of &lt;code&gt;ALTER TABLE&lt;/code&gt; that performs a rewrite of the whole table. This results in reconstructing each row with the dropped column replaced by a null value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e539dee4c479de5ce6227904539c51905413b8a2" translate="yes" xml:space="preserve">
          <source>To force the planner to follow the join order laid out by explicit &lt;code&gt;JOIN&lt;/code&gt;s, set the &lt;a href=&quot;runtime-config-query#GUC-JOIN-COLLAPSE-LIMIT&quot;&gt;join_collapse_limit&lt;/a&gt; run-time parameter to 1. (Other possible values are discussed below.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b97e829e4f12bf390f60edd12090a6e21acdc24" translate="yes" xml:space="preserve">
          <source>To generate a new key:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2c066b392d0690f674361c2e00b7a60bde09ccb" translate="yes" xml:space="preserve">
          <source>To get &lt;code&gt;doc_num&lt;/code&gt; on every line, the solution is to use two invocations of &lt;code&gt;xpath_table&lt;/code&gt; and join the results:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69c96837968de4279f15cf969e5e70dc5b6c75e5" translate="yes" xml:space="preserve">
          <source>To get out of &lt;code&gt;psql&lt;/code&gt;, type:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f841c80668fce3c31645a5d7959f701a568c379f" translate="yes" xml:space="preserve">
          <source>To get the start time of segments with such values instead, you have to filter out irrelevant segments before returning the start time, so the filter expression is applied to the previous step, and the path used in the condition is different:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c348e1fb7d6b60d5bb3b8782cdcf8ec28351c7b2" translate="yes" xml:space="preserve">
          <source>To give a schema-qualified operator name in &lt;code&gt;com_op&lt;/code&gt; or the other optional arguments, use the &lt;code&gt;OPERATOR()&lt;/code&gt; syntax, for example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="181dc64889b2ae0155da88752e6851b32114a550" translate="yes" xml:space="preserve">
          <source>To guarantee true serializability PostgreSQL uses &lt;em&gt;predicate locking&lt;/em&gt;, which means that it keeps locks which allow it to determine when a write would have had an impact on the result of a previous read from a concurrent transaction, had it run first. In PostgreSQL these locks do not cause any blocking and therefore can &lt;em&gt;not&lt;/em&gt; play any part in causing a deadlock. They are used to identify and flag dependencies among concurrent Serializable transactions which in certain combinations can lead to serialization anomalies. In contrast, a Read Committed or Repeatable Read transaction which wants to ensure data consistency may need to take out a lock on an entire table, which could block other users attempting to use that table, or it may use &lt;code&gt;SELECT FOR UPDATE&lt;/code&gt; or &lt;code&gt;SELECT FOR SHARE&lt;/code&gt; which not only can block other transactions but cause disk access.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f68a15ec78f387befd6d0298f8810f1045e197b1" translate="yes" xml:space="preserve">
          <source>To illustrate the difference, if &lt;code&gt;x&lt;/code&gt; is an XML value, these two queries in an SQL:2006 environment would produce true and false, respectively:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33e38f50067618192123a7a6ea2a2035a90e4fb0" translate="yes" xml:space="preserve">
          <source>To illustrate the use of array types, we create this table:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b5b94d4b187e4064dd8c2d93482d78bbe19ae50" translate="yes" xml:space="preserve">
          <source>To illustrate this, let's implement the following policy on the many-to-many relationship example above: when someone wants to remove a product that is still referenced by an order (via &lt;code&gt;order_items&lt;/code&gt;), we disallow it. If someone removes an order, the order items are removed as well:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f35959c3ce0c736cba407ce1950e3b7f93b092e" translate="yes" xml:space="preserve">
          <source>To implement an access method, an implementor will typically need to implement an AM-specific type of tuple table slot (see &lt;a href=&quot;https://git.postgresql.org/gitweb/?p=postgresql.git;a=blob;f=src/include/executor/tuptable.h;hb=HEAD&quot;&gt;&lt;code&gt;src/include/executor/tuptable.h&lt;/code&gt;&lt;/a&gt;), which allows code outside the access method to hold references to tuples of the AM, and to access the columns of the tuple.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea65817bb743af7def6e62b531aec8b8c7c1a366" translate="yes" xml:space="preserve">
          <source>To implement full text searching there must be a function to create a &lt;code&gt;tsvector&lt;/code&gt; from a document and a &lt;code&gt;tsquery&lt;/code&gt; from a user query. Also, we need to return results in a useful order, so we need a function that compares documents with respect to their relevance to the query. It's also important to be able to display the results nicely. PostgreSQL provides support for all of these functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f90b4fcb28ef9c823a8d7810618ebba2004bd7be" translate="yes" xml:space="preserve">
          <source>To implement sub-partitioning, specify the &lt;code&gt;PARTITION BY&lt;/code&gt; clause in the commands used to create individual partitions, for example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="846839113d5d394eb45527ccc7c7a96f15b009ec" translate="yes" xml:space="preserve">
          <source>To implement transactional support in a manner that allows different table access methods be accessed within a single transaction, it likely is necessary to closely integrate with the machinery in &lt;code&gt;src/backend/access/transam/xlog.c&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0b8cb073edc0febf35e9cd737b45bb493e96aed" translate="yes" xml:space="preserve">
          <source>To import a log file into this table, use the &lt;code&gt;COPY FROM&lt;/code&gt; command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28e732fd3da22b22756fa7755e21953801d94a6c" translate="yes" xml:space="preserve">
          <source>To improve such estimates, &lt;code&gt;ANALYZE&lt;/code&gt; can collect MCV lists on combinations of columns. Similarly to functional dependencies and n-distinct coefficients, it's impractical to do this for every possible column grouping. Even more so in this case, as the MCV list (unlike functional dependencies and n-distinct coefficients) does store the common column values. So data is collected only for those groups of columns appearing together in a statistics object defined with the &lt;code&gt;mcv&lt;/code&gt; option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="726a8877a697c9a76f8ec5b5c68e9adbda1257f4" translate="yes" xml:space="preserve">
          <source>To improve such estimates, &lt;code&gt;ANALYZE&lt;/code&gt; can collect n-distinct statistics for groups of columns. As before, it's impractical to do this for every possible column grouping, so data is collected only for those groups of columns appearing together in a statistics object defined with the &lt;code&gt;ndistinct&lt;/code&gt; option. Data will be collected for each possible combination of two or more columns from the set of listed columns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fc7cc9bd907a538cf92f4185feaaa71d0884dc6" translate="yes" xml:space="preserve">
          <source>To include a literal &lt;code&gt;]&lt;/code&gt; in the list, make it the first character (after &lt;code&gt;^&lt;/code&gt;, if that is used). To include a literal &lt;code&gt;-&lt;/code&gt;, make it the first or last character, or the second endpoint of a range. To use a literal &lt;code&gt;-&lt;/code&gt; as the first endpoint of a range, enclose it in &lt;code&gt;[.&lt;/code&gt; and &lt;code&gt;.]&lt;/code&gt; to make it a collating element (see below). With the exception of these characters, some combinations using &lt;code&gt;[&lt;/code&gt; (see next paragraphs), and escapes (AREs only), all other special characters lose their special significance within a bracket expression. In particular, &lt;code&gt;\&lt;/code&gt; is not special when following ERE or BRE rules, though it is special (as introducing an escape) in AREs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4184bf034050051b34f3bc62384d8d2db0c8c933" translate="yes" xml:space="preserve">
          <source>To include the escape character in the identifier literally, write it twice.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e84215b046c65219d5ce30b242beef53ee6e7a36" translate="yes" xml:space="preserve">
          <source>To include the escape character in the string literally, write it twice.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78f88921a54fbd43b8bb79b923defafecfc3cd3f" translate="yes" xml:space="preserve">
          <source>To include whitespace in an argument you can quote it with single quotes. To include a single quote in an argument, write two single quotes within single-quoted text. Anything contained in single quotes is furthermore subject to C-like substitutions for &lt;code&gt;\n&lt;/code&gt; (new line), &lt;code&gt;\t&lt;/code&gt; (tab), &lt;code&gt;\b&lt;/code&gt; (backspace), &lt;code&gt;\r&lt;/code&gt; (carriage return), &lt;code&gt;\f&lt;/code&gt; (form feed), &lt;code&gt;\&lt;/code&gt;&lt;code&gt;digits&lt;/code&gt; (octal), and &lt;code&gt;\x&lt;/code&gt;&lt;code&gt;digits&lt;/code&gt; (hexadecimal). A backslash preceding any other character within single-quoted text quotes that single character, whatever it is.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f2cb44f0c5a3aa8e112ae7be973fd139113c473" translate="yes" xml:space="preserve">
          <source>To index the original phrase as well as the substitute, just include it in the right-hand part of the definition:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95ef2591a1c7f1278d7f81a1fe53a76759cd33d8" translate="yes" xml:space="preserve">
          <source>To indicate that a type is an array, specify the type of the array elements using the &lt;code&gt;ELEMENT&lt;/code&gt; key word. For example, to define an array of 4-byte integers (&lt;code&gt;int4&lt;/code&gt;), specify &lt;code&gt;ELEMENT = int4&lt;/code&gt;. More details about array types appear below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfac2991049d03ecd33ce1361a3f4d83513beefd" translate="yes" xml:space="preserve">
          <source>To indicate the delimiter to be used between values in the external representation of arrays of this type, &lt;code&gt;delimiter&lt;/code&gt; can be set to a specific character. The default delimiter is the comma (&lt;code&gt;,&lt;/code&gt;). Note that the delimiter is associated with the array element type, not the array type itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9cbc2cc662f87e5cddcf234e0f6469fdfb69842" translate="yes" xml:space="preserve">
          <source>To inform the planner about functional dependencies, &lt;code&gt;ANALYZE&lt;/code&gt; can collect measurements of cross-column dependency. Assessing the degree of dependency between all sets of columns would be prohibitively expensive, so data collection is limited to those groups of columns appearing together in a statistics object defined with the &lt;code&gt;dependencies&lt;/code&gt; option. It is advisable to create &lt;code&gt;dependencies&lt;/code&gt; statistics only for column groups that are strongly correlated, to avoid unnecessary overhead in both &lt;code&gt;ANALYZE&lt;/code&gt; and later query planning.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40cf525f7b3d73ebe89741dbac88fd30351f8be3" translate="yes" xml:space="preserve">
          <source>To insert a percent sign into your prompt, write &lt;code&gt;%%&lt;/code&gt;. The default prompts are &lt;code&gt;'%/%R%# '&lt;/code&gt; for prompts 1 and 2, and &lt;code&gt;'&amp;gt;&amp;gt; '&lt;/code&gt; for prompt 3.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1ee9bbe110857fcf2f7841b805a4e345fe77366" translate="yes" xml:space="preserve">
          <source>To insert a row consisting entirely of default values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5156cf333413525236a7d8f0063c5f452f5f26a" translate="yes" xml:space="preserve">
          <source>To insert multiple rows using the multirow &lt;code&gt;VALUES&lt;/code&gt; syntax:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74b9c8be569e80f1c859ef51f10adea40ff85de7" translate="yes" xml:space="preserve">
          <source>To insert the next value of the sequence into the &lt;code&gt;serial&lt;/code&gt; column, specify that the &lt;code&gt;serial&lt;/code&gt; column should be assigned its default value. This can be done either by excluding the column from the list of columns in the &lt;code&gt;INSERT&lt;/code&gt; statement, or through the use of the &lt;code&gt;DEFAULT&lt;/code&gt; key word.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9325a56bbba931c18bc288d06702b77030782fe9" translate="yes" xml:space="preserve">
          <source>To inspect the currently available locales, use the query &lt;code&gt;SELECT * FROM pg_collation&lt;/code&gt;, or the command &lt;code&gt;\dOS+&lt;/code&gt; in psql.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="396cd46392c72184b16377243ca319a056a0005a" translate="yes" xml:space="preserve">
          <source>To intersperse text output in between query results, use &lt;code&gt;\qecho&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11793d6d388c3ed014d8177be32ebeaaabfb3f69" translate="yes" xml:space="preserve">
          <source>To join the table &lt;code&gt;films&lt;/code&gt; with the table &lt;code&gt;distributors&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="628b8c5cdb42f7dc53d8569d2746c631140dbcd9" translate="yes" xml:space="preserve">
          <source>To learn more about the SQL/JSON standard, see &lt;a href=&quot;https://www.postgresql.org/docs/12/biblio.html#SQLTR-19075-6&quot;&gt;[sqltr-19075-6]&lt;/a&gt;. For details on JSON types supported in PostgreSQL, see &lt;a href=&quot;datatype-json&quot;&gt;Section 8.14&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="889344cf4fa47381ec5fba6605b2194e6f5635b8" translate="yes" xml:space="preserve">
          <source>To list keys:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1746b8a797d81baecf4e64517cb9e2b4e171ea4d" translate="yes" xml:space="preserve">
          <source>To look up functions taking arguments or returning values of a specific data type, use your pager's search capability to scroll through the &lt;code&gt;\df&lt;/code&gt; output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f63105a6bdca6f2a502122ad5fab70a09773a1ea" translate="yes" xml:space="preserve">
          <source>To make a registration:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21a3f307d9fb66d4c9cdb328cd1d7f268094c295" translate="yes" xml:space="preserve">
          <source>To make effective use of the index-only scan feature, you might choose to create a &lt;em&gt;covering index&lt;/em&gt;, which is an index specifically designed to include the columns needed by a particular type of query that you run frequently. Since queries typically need to retrieve more columns than just the ones they search on, PostgreSQL allows you to create an index in which some columns are just &amp;ldquo;payload&amp;rdquo; and are not part of the search key. This is done by adding an &lt;code&gt;INCLUDE&lt;/code&gt; clause listing the extra columns. For example, if you commonly run queries like</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f2951feb65ad64d0c55b52fdde9cfe0496f2a09" translate="yes" xml:space="preserve">
          <source>To make it easier to build custom text search configurations, a configuration is built up from simpler database objects. PostgreSQL's text search facility provides four types of configuration-related database objects:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32e1597b40ce1accf80ccac6a6e7b7c63bd5a013" translate="yes" xml:space="preserve">
          <source>To make it harder for people to break things, there is a limit of 100 on the number of dimensions of cubes. This is set in &lt;code&gt;cubedata.h&lt;/code&gt; if you need something bigger.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76612115b359bc164a8d942bcbc6e3a7da781870" translate="yes" xml:space="preserve">
          <source>To make the backup, you can use the pg_dumpall command from the version you are currently running; see &lt;a href=&quot;backup-dump#BACKUP-DUMP-ALL&quot;&gt;Section 25.1.2&lt;/a&gt; for more details. For best results, however, try to use the pg_dumpall command from PostgreSQL 12.1, since this version contains bug fixes and improvements over older versions. While this advice might seem idiosyncratic since you haven't installed the new version yet, it is advisable to follow it if you plan to install the new version in parallel with the old version. In that case you can complete the installation normally and transfer the data later. This will also decrease the downtime.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e42d34197cf02a7569c42521d0a78b2a30e87e2d" translate="yes" xml:space="preserve">
          <source>To make these settings persist over reboots, modify &lt;code&gt;/etc/sysctl.conf&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16fb8688ad143822900835b4d9dfbd8b94a6f1bd" translate="yes" xml:space="preserve">
          <source>To make use of the backup, you will need to keep all the WAL segment files generated during and after the file system backup. To aid you in doing this, the base backup process creates a &lt;em&gt;backup history file&lt;/em&gt; that is immediately stored into the WAL archive area. This file is named after the first WAL segment file that you need for the file system backup. For example, if the starting WAL file is &lt;code&gt;0000000100001234000055CD&lt;/code&gt; the backup history file will be named something like &lt;code&gt;0000000100001234000055CD.007C9330.backup&lt;/code&gt;. (The second part of the file name stands for an exact position within the WAL file, and can ordinarily be ignored.) Once you have safely archived the file system backup and the WAL segment files used during the backup (as specified in the backup history file), all archived WAL segments with names numerically less are no longer needed to recover the file system backup and can be deleted. However, you should consider keeping several backup sets to be absolutely certain that you can recover your data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="837f5c3ebb10e0d282d6e0a633fa9a3ba3bd9b54" translate="yes" xml:space="preserve">
          <source>To make use of this option the server must be built with GSSAPI support. Otherwise, the &lt;code&gt;hostgssenc&lt;/code&gt; record is ignored except for logging a warning that it cannot match any connections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da85971aae5c8da752be674039f1e182750b7050" translate="yes" xml:space="preserve">
          <source>To make use of this option the server must be built with SSL support. Furthermore, SSL must be enabled by setting the &lt;a href=&quot;runtime-config-connection#GUC-SSL&quot;&gt;ssl&lt;/a&gt; configuration parameter (see &lt;a href=&quot;ssl-tcp&quot;&gt;Section 18.9&lt;/a&gt; for more information). Otherwise, the &lt;code&gt;hostssl&lt;/code&gt; record is ignored except for logging a warning that it cannot match any connections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f4fbb22a44e979c8471b584d8cdd3143713ac75" translate="yes" xml:space="preserve">
          <source>To mark a column as not-null:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f74bd55605f3a01ec683a6cc2669467803377606" translate="yes" xml:space="preserve">
          <source>To mark a trigger as being dependent on an extension:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c90682a525c8ca51473c2dabbbd5e3caebbcf407" translate="yes" xml:space="preserve">
          <source>To mark the function &lt;code&gt;sqrt&lt;/code&gt; for type &lt;code&gt;integer&lt;/code&gt; as being dependent on the extension &lt;code&gt;mathlib&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a87f0d3b5cf6424cb45c1011ca70e93d95e07f0b" translate="yes" xml:space="preserve">
          <source>To mark the procedure &lt;code&gt;insert_data(integer, integer)&lt;/code&gt; as being dependent on the extension &lt;code&gt;myext&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e51d812b2e54f1c7bfb9e394f6c2840143f55cf" translate="yes" xml:space="preserve">
          <source>To match a literal underscore or percent sign without matching other characters, the respective character in &lt;code&gt;pattern&lt;/code&gt; must be preceded by the escape character. The default escape character is the backslash but a different one can be selected by using the &lt;code&gt;ESCAPE&lt;/code&gt; clause. To match the escape character itself, write two escape characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e09584e2c2503d2bf224a496615b4861e94b3c2" translate="yes" xml:space="preserve">
          <source>To move a table to a different schema:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d011ac99577ed35b95668f7ed24ce9848185382" translate="yes" xml:space="preserve">
          <source>To move a table to a different tablespace:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57daeef8cdb28166a441c43e57ab1dd9215bcf07" translate="yes" xml:space="preserve">
          <source>To move an index to a different tablespace:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23d5f69d43a2751745b91c696b1be2d6f922bf4b" translate="yes" xml:space="preserve">
          <source>To move the domain into a different schema:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea05678bf7924aa16dd7d33be9bf040afd714f48" translate="yes" xml:space="preserve">
          <source>To move the ordered-set aggregate &lt;code&gt;mypercentile&lt;/code&gt; with direct argument of type &lt;code&gt;float8&lt;/code&gt; and aggregated argument of type &lt;code&gt;integer&lt;/code&gt; into schema &lt;code&gt;myschema&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d7dd7e920e4885b23e892227ca575284224505b" translate="yes" xml:space="preserve">
          <source>To organize database objects into logical groups to make them more manageable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f2fab70f4674d6404b7fc489c77334e4ba71503" translate="yes" xml:space="preserve">
          <source>To perform a WAL-logged data update using the generic WAL record facility, follow these steps:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ddc039b48dc0b7fc5e1030df7201c9c49ee4806" translate="yes" xml:space="preserve">
          <source>To pick an appropriate iteration count, consider that the original DES crypt was designed to have the speed of 4 hashes per second on the hardware of that time. Slower than 4 hashes per second would probably dampen usability. Faster than 100 hashes per second is probably too fast.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23bef6aee4ed8528c2ee117da497c8f55faa7e35" translate="yes" xml:space="preserve">
          <source>To prepare for remote access using &lt;code&gt;postgres_fdw&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a386c565eb5f05e54673a40938f1d71b0ca70e6" translate="yes" xml:space="preserve">
          <source>To present search results it is ideal to show a part of each document and how it is related to the query. Usually, search engines show fragments of the document with marked search terms. PostgreSQL provides a function &lt;code&gt;ts_headline&lt;/code&gt; that implements this functionality.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91610d07afcd9d2407804f922d11df9315715c95" translate="yes" xml:space="preserve">
          <source>To prevent spoofing on TCP connections, either use SSL certificates and make sure that clients check the server's certificate, or use GSSAPI encryption (or both, if they're on separate connections).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42f51c2695b73fa0a4e3d791c3132ceaa8c8104e" translate="yes" xml:space="preserve">
          <source>To prevent spoofing with GSSAPI, the server must be configured to accept only &lt;code&gt;hostgssenc&lt;/code&gt; connections (&lt;a href=&quot;auth-pg-hba-conf&quot;&gt;Section 20.1&lt;/a&gt;) and use &lt;code&gt;gss&lt;/code&gt; authentication with them. The TCP client must connect using &lt;code&gt;gssencmode=require&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9ff680f80545ba63d8e750795a7c5531ae0e64d" translate="yes" xml:space="preserve">
          <source>To prevent spoofing with SSL, the server must be configured to accept only &lt;code&gt;hostssl&lt;/code&gt; connections (&lt;a href=&quot;auth-pg-hba-conf&quot;&gt;Section 20.1&lt;/a&gt;) and have SSL key and certificate files (&lt;a href=&quot;ssl-tcp&quot;&gt;Section 18.9&lt;/a&gt;). The TCP client must connect using &lt;code&gt;sslmode=verify-ca&lt;/code&gt; or &lt;code&gt;verify-full&lt;/code&gt; and have the appropriate root certificate file installed (&lt;a href=&quot;https://www.postgresql.org/docs/12/libpq-ssl.html#LIBQ-SSL-CERTIFICATES&quot;&gt;Section 33.18.1&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc27b676093ff9c2ed0caeb8bb451423cb6132ec" translate="yes" xml:space="preserve">
          <source>To prevent the operation from waiting for other transactions to commit, use either the &lt;code&gt;NOWAIT&lt;/code&gt; or &lt;code&gt;SKIP LOCKED&lt;/code&gt; option. With &lt;code&gt;NOWAIT&lt;/code&gt;, the statement reports an error, rather than waiting, if a selected row cannot be locked immediately. With &lt;code&gt;SKIP LOCKED&lt;/code&gt;, any selected rows that cannot be immediately locked are skipped. Skipping locked rows provides an inconsistent view of the data, so this is not suitable for general purpose work, but can be used to avoid lock contention with multiple consumers accessing a queue-like table. Note that &lt;code&gt;NOWAIT&lt;/code&gt; and &lt;code&gt;SKIP LOCKED&lt;/code&gt; apply only to the row-level lock(s) &amp;mdash; the required &lt;code&gt;ROW SHARE&lt;/code&gt; table-level lock is still taken in the ordinary way (see &lt;a href=&quot;https://www.postgresql.org/docs/12/mvcc.html&quot;&gt;Chapter 13&lt;/a&gt;). You can use &lt;a href=&quot;sql-lock&quot;&gt;LOCK&lt;/a&gt; with the &lt;code&gt;NOWAIT&lt;/code&gt; option first, if you need to acquire the table-level lock without waiting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fafa62267d5a132b9de46d4638dc16e7682262f" translate="yes" xml:space="preserve">
          <source>To prevent unencrypted passwords from being sent across the network, written to the server log or otherwise stolen by a database administrator, PostgreSQL allows the user to supply pre-encrypted passwords. Many client programs make use of this functionality and encrypt the password before sending it to the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c451daeed477af5e11625a2ad40100dc2bdf1542" translate="yes" xml:space="preserve">
          <source>To print your current working directory, use &lt;code&gt;\! pwd&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a131063e73631c22faf8847eb9eabb84d102d285" translate="yes" xml:space="preserve">
          <source>To process values of data type &lt;code&gt;xml&lt;/code&gt;, PostgreSQL offers the functions &lt;code&gt;xpath&lt;/code&gt; and &lt;code&gt;xpath_exists&lt;/code&gt;, which evaluate XPath 1.0 expressions, and the &lt;code&gt;XMLTABLE&lt;/code&gt; table function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98d5d2d83e0f32f0cf968b16a03133578932bc09" translate="yes" xml:space="preserve">
          <source>To produce a value of type &lt;code&gt;xml&lt;/code&gt; from character data, use the function &lt;code&gt;xmlparse&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbc26abf86484eb02c81e19a75b343ee2d71adcb" translate="yes" xml:space="preserve">
          <source>To protect against loss of very old data due to &lt;em&gt;transaction ID wraparound&lt;/em&gt; or &lt;em&gt;multixact ID wraparound&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aecbc3cb94c5315064318106fc3dd71a1faa9ab3" translate="yes" xml:space="preserve">
          <source>To protect password information stored as a user mapping option, the &lt;code&gt;umoptions&lt;/code&gt; column will read as null unless one of the following applies:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51b2cfa383e2f1702167bdd2ca292f075ce10dc7" translate="yes" xml:space="preserve">
          <source>To provide a concrete example, assume that the top node is a &lt;code&gt;MergeJoin&lt;/code&gt; node. Before any merge can be done two rows have to be fetched (one from each subplan). So the executor recursively calls itself to process the subplans (it starts with the subplan attached to &lt;code&gt;lefttree&lt;/code&gt;). The new top node (the top node of the left subplan) is, let's say, a &lt;code&gt;Sort&lt;/code&gt; node and again recursion is needed to obtain an input row. The child node of the &lt;code&gt;Sort&lt;/code&gt; might be a &lt;code&gt;SeqScan&lt;/code&gt; node, representing actual reading of a table. Execution of this node causes the executor to fetch a row from the table and return it up to the calling node. The &lt;code&gt;Sort&lt;/code&gt; node will repeatedly call its child to obtain all the rows to be sorted. When the input is exhausted (as indicated by the child node returning a NULL instead of a row), the &lt;code&gt;Sort&lt;/code&gt; code performs the sort, and finally is able to return its first output row, namely the first one in sorted order. It keeps the remaining rows stored so that it can deliver them in sorted order in response to later demands.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8f2f6c60f59be342f296675cbb6d7d227bbb0e5" translate="yes" xml:space="preserve">
          <source>To put our new schema in the path, we use:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2ab4b8e95ce2374ac017800199c82360e8ede52" translate="yes" xml:space="preserve">
          <source>To put this together, assume we have tables &lt;code&gt;t1&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8f25452daa9e8fa2f75b3821f5a1a4903c6db98" translate="yes" xml:space="preserve">
          <source>To query the current client encoding:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cf10f5f8dca749b86d683a9d81cf1278b14624d" translate="yes" xml:space="preserve">
          <source>To quit the session, type EOF (&lt;strong&gt;Control&lt;/strong&gt;+&lt;strong&gt;D&lt;/strong&gt;, usually). If you've entered any text since the last command entry terminator, then EOF will be taken as a command entry terminator, and another EOF will be needed to exit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d36fa75ce18b12e898c68aa49a95948a9fcf9202" translate="yes" xml:space="preserve">
          <source>To read the data you need to examine each attribute in turn. First check whether the field is NULL according to the null bitmap. If it is, go to the next. Then make sure you have the right alignment. If the field is a fixed width field, then all the bytes are simply placed. If it's a variable length field (attlen = -1) then it's a bit more complicated. All variable-length data types share the common header structure &lt;code&gt;struct varlena&lt;/code&gt;, which includes the total length of the stored value and some flag bits. Depending on the flags, the data can be either inline or in a TOAST table; it might be compressed, too (see &lt;a href=&quot;storage-toast&quot;&gt;Section 68.2&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9866d0ae8c9c03df48b8c82014bb3ec303fe38d" translate="yes" xml:space="preserve">
          <source>To recover or reuse disk space occupied by updated or deleted rows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ec6cf49dce03885d6924bd642450bf7ec8ca2bb" translate="yes" xml:space="preserve">
          <source>To recover successfully using continuous archiving (also called &amp;ldquo;online backup&amp;rdquo; by many database vendors), you need a continuous sequence of archived WAL files that extends back at least as far as the start time of your backup. So to get started, you should set up and test your procedure for archiving WAL files &lt;em&gt;before&lt;/em&gt; you take your first base backup. Accordingly, we first discuss the mechanics of archiving WAL files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d53b3ac0ed6d158f6c1a488d4a5b85260dfbebb1" translate="yes" xml:space="preserve">
          <source>To recreate a primary key constraint, without blocking updates while the index is rebuilt:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2cdf032afa04bfde3b56e7422c93b52014fb3ad" translate="yes" xml:space="preserve">
          <source>To refer to the JSON data to be queried (the &lt;em&gt;context item&lt;/em&gt;), use the &lt;code&gt;$&lt;/code&gt; sign in the path expression. It can be followed by one or more &lt;a href=&quot;datatype-json#TYPE-JSONPATH-ACCESSORS&quot;&gt;accessor operators&lt;/a&gt;, which go down the JSON structure level by level to retrieve the content of context item. Each operator that follows deals with the result of the previous evaluation step.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3f35bb3c3217f63e284e67100cd585c002369af" translate="yes" xml:space="preserve">
          <source>To register a Windows event log library with the operating system, issue this command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcb97cb35602cb8d8e37b3f72ca29c284ab19a82" translate="yes" xml:space="preserve">
          <source>To reindex the database &lt;code&gt;test&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="138f6f46f9b12919030644b082f862e4465c8a0a" translate="yes" xml:space="preserve">
          <source>To reindex the table &lt;code&gt;foo&lt;/code&gt; and the index &lt;code&gt;bar&lt;/code&gt; in a database named &lt;code&gt;abcd&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5057bddf51642163d4a618fef89da2f20efe141" translate="yes" xml:space="preserve">
          <source>To reload an archive file into a (freshly created) database named &lt;code&gt;newdb&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b7e0dad208d77313671288bf71252a8aeccebaa" translate="yes" xml:space="preserve">
          <source>To reload an archive file into the same database it was dumped from, discarding the current contents of that database:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27e3d3483ae6968cc1f2c3ce744fe6ae6e8dc36d" translate="yes" xml:space="preserve">
          <source>To reload database(s) from this file, you can use:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae1f253d1ca56a0ccbe7b45bc0b81811cbddeeaf" translate="yes" xml:space="preserve">
          <source>To reload such a script into a (freshly created) database named &lt;code&gt;newdb&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bddc1307f67d5937507c3936d2f30649aec06219" translate="yes" xml:space="preserve">
          <source>To reload the dump into a new database called &lt;code&gt;newdb&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aaf515c8d58cd92994dfa8743f12dbbc2da1e757" translate="yes" xml:space="preserve">
          <source>To remove a &lt;code&gt;NOT NULL&lt;/code&gt; constraint from a domain:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43d57a60bc9ae4720c85f65f48b02b03c6794f87" translate="yes" xml:space="preserve">
          <source>To remove a check constraint from a domain:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a9e31afd39806417b7470fbbe1579d5f02a99b3" translate="yes" xml:space="preserve">
          <source>To remove a check constraint from a table and all its children:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e497bf41a3189343b6ead8f2d75b97c2d5c2bcf" translate="yes" xml:space="preserve">
          <source>To remove a check constraint from one table only:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="828d46eba3a55278c8fef7d5b286efdc8ef06ffe" translate="yes" xml:space="preserve">
          <source>To remove a column, use a command like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38b773bd2feefcad9281dad1181f9587cfd50577" translate="yes" xml:space="preserve">
          <source>To remove a constraint you need to know its name. If you gave it a name then that's easy. Otherwise the system assigned a generated name, which you need to find out. The psql command &lt;code&gt;\d tablename&lt;/code&gt; can be helpful here; other interfaces might also provide a way to inspect table details. Then the command is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d7bf31a2f8f86534f45191efcc458666b31374c" translate="yes" xml:space="preserve">
          <source>To remove a not-null constraint from a column:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f18a4496457502cea39c274b659cf7a0e3dd2ca" translate="yes" xml:space="preserve">
          <source>To remove an empty tablespace, use the &lt;a href=&quot;sql-droptablespace&quot;&gt;DROP TABLESPACE&lt;/a&gt; command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d6c89dfb4f37ed7623a88212bd89770872746a5" translate="yes" xml:space="preserve">
          <source>To remove an index, use the &lt;code&gt;DROP INDEX&lt;/code&gt; command. Indexes can be added to and removed from tables at any time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="863c52a00c465065e0fd5b5b9e4219a452bdd2e6" translate="yes" xml:space="preserve">
          <source>To remove any default value, use:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4da4a9003d8a732be59d4e186cdb4572715ec792" translate="yes" xml:space="preserve">
          <source>To remove multiple aggregate functions in one command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b21c46be28b23a3a07faf23f47b9607ffc3c2e4" translate="yes" xml:space="preserve">
          <source>To remove old data quickly, simply drop the child table that is no longer necessary:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65fd62c46521a14a29fb65a65dedbdfbb6d6b06a" translate="yes" xml:space="preserve">
          <source>To remove schema &lt;code&gt;mystuff&lt;/code&gt; from the database, along with everything it contains:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e78e623783230e4cc0e151a3cb51e4033af11214" translate="yes" xml:space="preserve">
          <source>To remove tablespace &lt;code&gt;mystuff&lt;/code&gt; from the system:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2a01c776d1c085c3540b493a34415d36ce80315" translate="yes" xml:space="preserve">
          <source>To remove the aggregate function &lt;code&gt;myavg&lt;/code&gt; for type &lt;code&gt;integer&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18432f9ba2212a860ecc264cd27f66a7159842e5" translate="yes" xml:space="preserve">
          <source>To remove the child table from the inheritance hierarchy table but retain access to it as a table in its own right:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="886afd40ec1a253663f53b4cfe1afde02afa622c" translate="yes" xml:space="preserve">
          <source>To remove the data type &lt;code&gt;box&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="635ed4f05863a9f71083e43a22035c0726192374" translate="yes" xml:space="preserve">
          <source>To remove the domain &lt;code&gt;box&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82d262101f6ede3cfc7b9b800d5bff7eebc905f2" translate="yes" xml:space="preserve">
          <source>To remove the extension &lt;code&gt;hstore&lt;/code&gt; from the current database:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="494e3e330fb09e7b6316ea0f77db993749794bdb" translate="yes" xml:space="preserve">
          <source>To remove the hypothetical-set aggregate function &lt;code&gt;myrank&lt;/code&gt;, which takes an arbitrary list of ordering columns and a matching list of direct arguments:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbcb6cb74fb44eda858f0ac7e28a925c61f87522" translate="yes" xml:space="preserve">
          <source>To remove the sequence &lt;code&gt;serial&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b7ff8809c902f7b43d3c36cc0a9d83ff1ce8a61" translate="yes" xml:space="preserve">
          <source>To remove these entries again:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4108ee2cc9d5481b40105aec05235dc19894777f" translate="yes" xml:space="preserve">
          <source>To remove user &lt;code&gt;joe&lt;/code&gt; from the default database server:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72cfb1afee008e173ec2d90c24909e8d66dcffdd" translate="yes" xml:space="preserve">
          <source>To remove user &lt;code&gt;joe&lt;/code&gt; using the server on host &lt;code&gt;eden&lt;/code&gt;, port 5000, with verification and a peek at the underlying command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e37544649a72b8a59f8c0b68b1aacebc069fd9f8" translate="yes" xml:space="preserve">
          <source>To rename a check constraint on a domain:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b83e0f282dba779e1c589b71830e43ea103d9012" translate="yes" xml:space="preserve">
          <source>To rename a column:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5e5da677db2fffdfcf0e82e91bd6cc552c32de7" translate="yes" xml:space="preserve">
          <source>To rename a data type:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d71c65ad2b7649e53d418d1384b99760b8cbf7d" translate="yes" xml:space="preserve">
          <source>To rename a table:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bebd170e762f96e494ba703054401a1292e6a4cd" translate="yes" xml:space="preserve">
          <source>To rename an enum value:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d7cb45901b32ab3bbca6ee1b7fd15872ac86082" translate="yes" xml:space="preserve">
          <source>To rename an existing column:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="385765b2179fde3d6b2824f89a1271dbcc7b0710" translate="yes" xml:space="preserve">
          <source>To rename an existing constraint:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19c54adeb02c0368e819e3163324f15879d5d129" translate="yes" xml:space="preserve">
          <source>To rename an existing index:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14be6b17313dbc046405c1a325a71641d10beb04" translate="yes" xml:space="preserve">
          <source>To rename an existing rule:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56da100cf20dd052a2da93853002e3fdb0762cc7" translate="yes" xml:space="preserve">
          <source>To rename an existing table:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bbd8f56914d76dfacdfc65adea299ab3845b458" translate="yes" xml:space="preserve">
          <source>To rename an existing trigger:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdf19eae86ecfc217b5d5f46e0856386ad5eae2f" translate="yes" xml:space="preserve">
          <source>To rename the aggregate function &lt;code&gt;myavg&lt;/code&gt; for type &lt;code&gt;integer&lt;/code&gt; to &lt;code&gt;my_average&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73c57928390ad7de8bef0ca57d35d82c58caddbc" translate="yes" xml:space="preserve">
          <source>To rename the collation &lt;code&gt;de_DE&lt;/code&gt; to &lt;code&gt;german&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a17ea574108719c0205b5d2e7a7cb84dbc9485ae" translate="yes" xml:space="preserve">
          <source>To rename the conversion &lt;code&gt;iso_8859_1_to_utf8&lt;/code&gt; to &lt;code&gt;latin1_to_unicode&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="294d57ccf76b0a74a2d7f7f68af3ab1df25411cd" translate="yes" xml:space="preserve">
          <source>To rename the function &lt;code&gt;sqrt&lt;/code&gt; for type &lt;code&gt;integer&lt;/code&gt; to &lt;code&gt;square_root&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe4158dd5c515d2058cc9b30dfc63ceb0718218d" translate="yes" xml:space="preserve">
          <source>To rename the materialized view &lt;code&gt;foo&lt;/code&gt; to &lt;code&gt;bar&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb76974774fa71ac10b20040500aca23ab2159c9" translate="yes" xml:space="preserve">
          <source>To rename the procedure &lt;code&gt;insert_data&lt;/code&gt; with two arguments of type &lt;code&gt;integer&lt;/code&gt; to &lt;code&gt;insert_record&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f62e25c88ab08cbb7e93b34f512b78b01a264d89" translate="yes" xml:space="preserve">
          <source>To rename the routine &lt;code&gt;foo&lt;/code&gt; for type &lt;code&gt;integer&lt;/code&gt; to &lt;code&gt;foobar&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1263372069e771787275bba5c32ba81c76bacbb" translate="yes" xml:space="preserve">
          <source>To rename the view &lt;code&gt;foo&lt;/code&gt; to &lt;code&gt;bar&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26bdd6f1e45a99315aafab5faba4caedc29cd14b" translate="yes" xml:space="preserve">
          <source>To reorder database items, it is first necessary to dump the table of contents of the archive:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e91986eabef2675111d76504a2dca941d4323fb" translate="yes" xml:space="preserve">
          <source>To replace the current definition of an existing function, use &lt;code&gt;CREATE OR REPLACE FUNCTION&lt;/code&gt;. It is not possible to change the name or argument types of a function this way (if you tried, you would actually be creating a new, distinct function). Also, &lt;code&gt;CREATE OR REPLACE FUNCTION&lt;/code&gt; will not let you change the return type of an existing function. To do that, you must drop and recreate the function. (When using &lt;code&gt;OUT&lt;/code&gt; parameters, that means you cannot change the types of any &lt;code&gt;OUT&lt;/code&gt; parameters except by dropping the function.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e07e56e3dea5794b7967ede7f52d55f75fb914f4" translate="yes" xml:space="preserve">
          <source>To replace the current definition of an existing procedure, use &lt;code&gt;CREATE OR REPLACE PROCEDURE&lt;/code&gt;. It is not possible to change the name or argument types of a procedure this way (if you tried, you would actually be creating a new, distinct procedure).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4a3314b1af2194d4a9d0e3864d532cddd54f341" translate="yes" xml:space="preserve">
          <source>To represent lexemes containing whitespace or punctuation, surround them with quotes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9ee960ea9a62dbb00e555c52be286d5babe0b9b" translate="yes" xml:space="preserve">
          <source>To reproduce the build configuration of the current PostgreSQL installation, run the following command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c852628026196abd448f5bcdf2f61ec1a2440fe6" translate="yes" xml:space="preserve">
          <source>To require the client to supply a trusted certificate, place certificates of the root certificate authorities (CAs) you trust in a file in the data directory, set the parameter &lt;a href=&quot;runtime-config-connection#GUC-SSL-CA-FILE&quot;&gt;ssl_ca_file&lt;/a&gt; in &lt;code&gt;postgresql.conf&lt;/code&gt; to the new file name, and add the authentication option &lt;code&gt;clientcert=verify-ca&lt;/code&gt; or &lt;code&gt;clientcert=verify-full&lt;/code&gt; to the appropriate &lt;code&gt;hostssl&lt;/code&gt; line(s) in &lt;code&gt;pg_hba.conf&lt;/code&gt;. A certificate will then be requested from the client during SSL connection startup. (See &lt;a href=&quot;https://www.postgresql.org/docs/12/libpq-ssl.html&quot;&gt;Section 33.18&lt;/a&gt; for a description of how to set up certificates on the client.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6aa65fcf4333fcf0b551df531e03fa872e27a539" translate="yes" xml:space="preserve">
          <source>To retrieve data from a table, the table is &lt;em&gt;queried&lt;/em&gt;. An SQL &lt;code&gt;SELECT&lt;/code&gt; statement is used to do this. The statement is divided into a select list (the part that lists the columns to be returned), a table list (the part that lists the tables from which to retrieve the data), and an optional qualification (the part that specifies any restrictions). For example, to retrieve all the rows of table &lt;code&gt;weather&lt;/code&gt;, type:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bfba777df1f29aa913bd5d40ce1d4c73c765650" translate="yes" xml:space="preserve">
          <source>To retrieve the available track segments, you need to use the &lt;code&gt;.key&lt;/code&gt; accessor operator for all the preceding JSON objects:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb967f785473e839c4078f1c39fcb9477a78913b" translate="yes" xml:space="preserve">
          <source>To return the coordinates of the first segment only, you can specify the corresponding subscript in the &lt;code&gt;[]&lt;/code&gt; accessor operator. Note that the SQL/JSON arrays are 0-relative:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ff702ac9e947fb4cd3f752235dd9e8f46729035" translate="yes" xml:space="preserve">
          <source>To return to the default encoding:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="406cc6a0a28c1612b545a71cb3737c23188fdb8b" translate="yes" xml:space="preserve">
          <source>To revoke a privilege, use the fittingly named &lt;a href=&quot;sql-revoke&quot;&gt;REVOKE&lt;/a&gt; command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e18502fe2468ae34b02daa8dc891d75789cf38d6" translate="yes" xml:space="preserve">
          <source>To roll back a prepared transaction, you must be either the same user that executed the transaction originally, or a superuser. But you do not have to be in the same session that executed the transaction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4ea9597dfb8955018f00e4ee84fd5fc8eae4064" translate="yes" xml:space="preserve">
          <source>To search for a value in an array, each value must be checked. This can be done manually, if you know the size of the array. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69b97083ddc183a0945aabca7a025e7b75b30250" translate="yes" xml:space="preserve">
          <source>To send a notification you can also use the function &lt;code&gt;pg_notify(text, text)&lt;/code&gt;. The function takes the channel name as the first argument and the payload as the second. The function is much easier to use than the &lt;code&gt;NOTIFY&lt;/code&gt; command if you need to work with non-constant channel names and payloads.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a86001d56e96cd630855718e6c84e4c20be116d" translate="yes" xml:space="preserve">
          <source>To set a new default for a column, use a command like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d61997ef9694eace869cea24bbcc67002c9d4dc7" translate="yes" xml:space="preserve">
          <source>To set a variable, use the psql meta-command &lt;code&gt;\set&lt;/code&gt;. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1474ee12a3dc56b938508517724586f81f6e63ce" translate="yes" xml:space="preserve">
          <source>To set an element of an array constant to NULL, write &lt;code&gt;NULL&lt;/code&gt; for the element value. (Any upper- or lower-case variant of &lt;code&gt;NULL&lt;/code&gt; will do.) If you want an actual string value &amp;ldquo;NULL&amp;rdquo;, you must put double quotes around it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b72ae8178b03bffc3e97e1ff9f2d6120eb29fe1d" translate="yes" xml:space="preserve">
          <source>To set the transaction isolation level of a transaction, use the command &lt;a href=&quot;sql-set-transaction&quot;&gt;SET TRANSACTION&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4100879263231dfae5d8c1d12f7f89131b8b4c4d" translate="yes" xml:space="preserve">
          <source>To set up a group role, first create the role:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0840fa596df18f796bffaaea8cb71ad58fdfa8cf" translate="yes" xml:space="preserve">
          <source>To set up the standby server, restore the base backup taken from primary server (see &lt;a href=&quot;continuous-archiving#BACKUP-PITR-RECOVERY&quot;&gt;Section 25.3.4&lt;/a&gt;). Create a file &lt;code&gt;standby.signal&lt;/code&gt; in the standby's cluster data directory. Set &lt;a href=&quot;runtime-config-wal#GUC-RESTORE-COMMAND&quot;&gt;restore_command&lt;/a&gt; to a simple command to copy files from the WAL archive. If you plan to have multiple standby servers for high availability purposes, make sure that &lt;code&gt;recovery_target_timeline&lt;/code&gt; is set to &lt;code&gt;latest&lt;/code&gt; (the default), to make the standby server follow the timeline change that occurs at failover to another standby.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5849cdcb821c47fc2718617bba0084cf85489ef6" translate="yes" xml:space="preserve">
          <source>To show the current search path, use the following command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7b88e1f0fb39dd04eb638f67e6c58bab151183a" translate="yes" xml:space="preserve">
          <source>To show the plan for a simple query on a table with a single &lt;code&gt;integer&lt;/code&gt; column and 10000 rows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="290d88a25608fc889befd23db33e59b88bf74d38" translate="yes" xml:space="preserve">
          <source>To show the space used by TOAST tables, use a query like the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eeb7477a4c4b89c5dfe00ff91f3aab61ad3c8fbd" translate="yes" xml:space="preserve">
          <source>To simplify typing, commands that consists of several words do not have to be quoted. Thus it is fine to type &lt;strong&gt;&lt;code&gt;\help alter table&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8d550c244dcf6d72fa7225070e337e07ebb8470" translate="yes" xml:space="preserve">
          <source>To solve this performance problem, PostgreSQL supports &lt;em&gt;index-only scans&lt;/em&gt;, which can answer queries from an index alone without any heap access. The basic idea is to return values directly out of each index entry instead of consulting the associated heap entry. There are two fundamental restrictions on when this method can be used:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="142d0651fdf015e04d576467b1aca4229d0b4cfb" translate="yes" xml:space="preserve">
          <source>To solve this problem, PostgreSQL allows a transaction to &lt;em&gt;export&lt;/em&gt; the snapshot it is using. As long as the exporting transaction remains open, other transactions can &lt;em&gt;import&lt;/em&gt; its snapshot, and thereby be guaranteed that they see exactly the same view of the database that the first transaction sees. But note that any database changes made by any one of these transactions remain invisible to the other transactions, as is usual for changes made by uncommitted transactions. So the transactions are synchronized with respect to pre-existing data, but act normally for changes they make themselves.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e123382d05d38fbf63b38f935a0571d58e1f08cc" translate="yes" xml:space="preserve">
          <source>To specify a different event source name (see &lt;a href=&quot;runtime-config-logging#GUC-EVENT-SOURCE&quot;&gt;event_source&lt;/a&gt;), use the &lt;code&gt;/n&lt;/code&gt; and &lt;code&gt;/i&lt;/code&gt; options:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="333792e531c8f32efba6f6ddb4b9558b3b16db75" translate="yes" xml:space="preserve">
          <source>To specify an upper-case or mixed-case name in &lt;code&gt;-t&lt;/code&gt; and related switches, you need to double-quote the name; else it will be folded to lower case (see &lt;a href=&quot;app-psql#APP-PSQL-PATTERNS&quot;&gt;Patterns&lt;/a&gt;). But double quotes are special to the shell, so in turn they must be quoted. Thus, to dump a single table with a mixed-case name, you need something like</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8a91bc31974f5e5387a73acf127cc171d44ea38" translate="yes" xml:space="preserve">
          <source>To specify which database server pg_dump should contact, use the command line options &lt;code&gt;-h host&lt;/code&gt; and &lt;code&gt;-p port&lt;/code&gt;. The default host is the local host or whatever your &lt;code&gt;PGHOST&lt;/code&gt; environment variable specifies. Similarly, the default port is indicated by the &lt;code&gt;PGPORT&lt;/code&gt; environment variable or, failing that, by the compiled-in default. (Conveniently, the server will normally have the same compiled-in default.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8ff8afd5bb22ed648c2e1e515d2f8e282c556cb" translate="yes" xml:space="preserve">
          <source>To specify which rows are visible or modifiable according to a policy, an expression is required that returns a Boolean result. This expression will be evaluated for each row prior to any conditions or functions coming from the user's query. (The only exceptions to this rule are &lt;code&gt;leakproof&lt;/code&gt; functions, which are guaranteed to not leak information; the optimizer may choose to apply such functions ahead of the row-security check.) Rows for which the expression does not return &lt;code&gt;true&lt;/code&gt; will not be processed. Separate expressions may be specified to provide independent control over the rows which are visible and the rows which are allowed to be modified. Policy expressions are run as part of the query and with the privileges of the user running the query, although security-definer functions can be used to access data not available to the calling user.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d640746b2c70f04616145411ddf1ea54e8f0eff4" translate="yes" xml:space="preserve">
          <source>To start &lt;code&gt;postgres&lt;/code&gt; in the background using default values, type:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="101c9345ec9b8869dda1a4c2ec2f4ff5869b5099" translate="yes" xml:space="preserve">
          <source>To start &lt;code&gt;postgres&lt;/code&gt; with a specific port, e.g. 1234:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f290a7625948bd090c0e63e75ca4290799de7fe3" translate="yes" xml:space="preserve">
          <source>To start a single-user mode server, use a command like</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d719f25eade71e1fabc96df0f987f16d1127fb5e" translate="yes" xml:space="preserve">
          <source>To start in SSL mode, files containing the server certificate and private key must exist. By default, these files are expected to be named &lt;code&gt;server.crt&lt;/code&gt; and &lt;code&gt;server.key&lt;/code&gt;, respectively, in the server's data directory, but other names and locations can be specified using the configuration parameters &lt;a href=&quot;runtime-config-connection#GUC-SSL-CERT-FILE&quot;&gt;ssl_cert_file&lt;/a&gt; and &lt;a href=&quot;runtime-config-connection#GUC-SSL-KEY-FILE&quot;&gt;ssl_key_file&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d7e48565791a62e0096773265d70badc454279d" translate="yes" xml:space="preserve">
          <source>To start the server in standby mode, create a file called &lt;code&gt;standby.signal&lt;/code&gt; in the data directory. The server will enter recovery and will not stop recovery when the end of archived WAL is reached, but will keep trying to continue recovery by connecting to the sending server as specified by the &lt;code&gt;primary_conninfo&lt;/code&gt; setting and/or by fetching new WAL segments using &lt;code&gt;restore_command&lt;/code&gt;. For this mode, the parameters from this section and &lt;a href=&quot;runtime-config-replication#RUNTIME-CONFIG-REPLICATION-STANDBY&quot;&gt;Section 19.6.3&lt;/a&gt; are of interest. Parameters from &lt;a href=&quot;runtime-config-wal#RUNTIME-CONFIG-WAL-RECOVERY-TARGET&quot;&gt;Section 19.5.5&lt;/a&gt; will also be applied but are typically not useful in this mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58559fc6e49f271c8ef253d540e88016fc097dd2" translate="yes" xml:space="preserve">
          <source>To start the server in targeted recovery mode, create a file called &lt;code&gt;recovery.signal&lt;/code&gt; in the data directory. If both &lt;code&gt;standby.signal&lt;/code&gt; and &lt;code&gt;recovery.signal&lt;/code&gt; files are created, standby mode takes precedence. Targeted recovery mode ends when the archived WAL is fully replayed, or when &lt;code&gt;recovery_target&lt;/code&gt; is reached. In this mode, the parameters from both this section and &lt;a href=&quot;runtime-config-wal#RUNTIME-CONFIG-WAL-RECOVERY-TARGET&quot;&gt;Section 19.5.5&lt;/a&gt; will be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d341372ce0cfe667939ee30d204c0837e61558e" translate="yes" xml:space="preserve">
          <source>To start the server using port 5433, and running without &lt;code&gt;fsync&lt;/code&gt;, use:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="741786fb73cdee8a94bd2c27689a09674c4f86b0" translate="yes" xml:space="preserve">
          <source>To start the server, waiting until the server is accepting connections:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e232c4fd74a8cef6ce964e0f028fd1b8e4b0c9b" translate="yes" xml:space="preserve">
          <source>To stop the server, use:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e14a268ee248e30a81dcc736a7cb520ff381afb" translate="yes" xml:space="preserve">
          <source>To stream the write-ahead log from the server at &lt;code&gt;mydbserver&lt;/code&gt; and store it in the local directory &lt;code&gt;/usr/local/pgsql/archive&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c30744e41f4e0393724c62af8eb916c4e9f5d86" translate="yes" xml:space="preserve">
          <source>To sum the column &lt;code&gt;len&lt;/code&gt; of all films and group the results by &lt;code&gt;kind&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6a50b5a600cffd4f7b634f4dde62436d9843ce3" translate="yes" xml:space="preserve">
          <source>To sum the column &lt;code&gt;len&lt;/code&gt; of all films, group the results by &lt;code&gt;kind&lt;/code&gt; and show those group totals that are less than 5 hours:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a9fccec8e53d2c310f94aa58faf4ad93d29d232" translate="yes" xml:space="preserve">
          <source>To support &amp;ldquo;partial match&amp;rdquo; queries, an operator class must provide the &lt;code&gt;comparePartial&lt;/code&gt; method, and its &lt;code&gt;extractQuery&lt;/code&gt; method must set the &lt;code&gt;pmatch&lt;/code&gt; parameter when a partial-match query is encountered. See &lt;a href=&quot;gin-implementation#GIN-PARTIAL-MATCH&quot;&gt;Section 66.4.2&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c766280bc71ea6c99fe469d91b62dcecd981191" translate="yes" xml:space="preserve">
          <source>To support matching of rows which include elements without a default B-tree operator class, the following operators are defined for composite type comparison: &lt;code&gt;*=&lt;/code&gt;, &lt;code&gt;*&amp;lt;&amp;gt;&lt;/code&gt;, &lt;code&gt;*&amp;lt;&lt;/code&gt;, &lt;code&gt;*&amp;lt;=&lt;/code&gt;, &lt;code&gt;*&amp;gt;&lt;/code&gt;, and &lt;code&gt;*&amp;gt;=&lt;/code&gt;. These operators compare the internal binary representation of the two rows. Two rows might have a different binary representation even though comparisons of the two rows with the equality operator is true. The ordering of rows under these comparison operators is deterministic but not otherwise meaningful. These operators are used internally for materialized views and might be useful for other specialized purposes such as replication but are not intended to be generally useful for writing queries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78257dbeaf1e3faf2c5d4978a0aec796a742cc0e" translate="yes" xml:space="preserve">
          <source>To terminate an individual session while allowing other sessions to continue, use &lt;code&gt;pg_terminate_backend()&lt;/code&gt; (see &lt;a href=&quot;functions-admin#FUNCTIONS-ADMIN-SIGNAL-TABLE&quot;&gt;Table 9.83&lt;/a&gt;) or send a SIGTERM signal to the child process associated with the session.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b948441d5404b9b545e1ffba5fe2679215c93a3d" translate="yes" xml:space="preserve">
          <source>To terminate the &lt;code&gt;postgres&lt;/code&gt; server normally, the signals &lt;code&gt;SIGTERM&lt;/code&gt;, &lt;code&gt;SIGINT&lt;/code&gt;, or &lt;code&gt;SIGQUIT&lt;/code&gt; can be used. The first will wait for all clients to terminate before quitting, the second will forcefully disconnect all clients, and the third will quit immediately without proper shutdown, resulting in a recovery run during restart.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bff9e4861d994fa404b9d306224e5e46521976c6" translate="yes" xml:space="preserve">
          <source>To test the dictionary, you can try</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7848817fe1c28c6bfbe8e65d2117ae56c0839fe" translate="yes" xml:space="preserve">
          <source>To test the dictionary, you can try:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c037e68aa2a278c5321043e5bd649588e1ed1409" translate="yes" xml:space="preserve">
          <source>To that end, SQL allows you to define constraints on columns and tables. Constraints give you as much control over the data in your tables as you wish. If a user attempts to store data in a column that would violate a constraint, an error is raised. This applies even if the value came from the default value definition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cc21a302cf460d16fd25ba3a4c82bca11c0140f" translate="yes" xml:space="preserve">
          <source>To the database server it will then look as though you are really user &lt;code&gt;joe&lt;/code&gt; on host &lt;code&gt;foo.com&lt;/code&gt; connecting to &lt;code&gt;localhost&lt;/code&gt; in that context, and it will use whatever authentication procedure was configured for connections from this user and host. Note that the server will not think the connection is SSL-encrypted, since in fact it is not encrypted between the SSH server and the PostgreSQL server. This should not pose any extra security risk as long as they are on the same machine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27fa29cd778cfa5bac13b40048f336e41ba246ff" translate="yes" xml:space="preserve">
          <source>To track the age of the oldest unfrozen XIDs in a database, &lt;code&gt;VACUUM&lt;/code&gt; stores XID statistics in the system tables &lt;code&gt;pg_class&lt;/code&gt; and &lt;code&gt;pg_database&lt;/code&gt;. In particular, the &lt;code&gt;relfrozenxid&lt;/code&gt; column of a table's &lt;code&gt;pg_class&lt;/code&gt; row contains the freeze cutoff XID that was used by the last aggressive &lt;code&gt;VACUUM&lt;/code&gt; for that table. All rows inserted by transactions with XIDs older than this cutoff XID are guaranteed to have been frozen. Similarly, the &lt;code&gt;datfrozenxid&lt;/code&gt; column of a database's &lt;code&gt;pg_database&lt;/code&gt; row is a lower bound on the unfrozen XIDs appearing in that database &amp;mdash; it is just the minimum of the per-table &lt;code&gt;relfrozenxid&lt;/code&gt; values within the database. A convenient way to examine this information is to execute queries such as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab93659339e52adb4a11b32e33a244aa5b607ece" translate="yes" xml:space="preserve">
          <source>To trigger failover of a log-shipping standby server, run &lt;code&gt;pg_ctl promote&lt;/code&gt;, call &lt;code&gt;pg_promote&lt;/code&gt;, or create a trigger file with the file name and path specified by the &lt;code&gt;promote_trigger_file&lt;/code&gt;. If you're planning to use &lt;code&gt;pg_ctl promote&lt;/code&gt; or to call &lt;code&gt;pg_promote&lt;/code&gt; to fail over, &lt;code&gt;promote_trigger_file&lt;/code&gt; is not required. If you're setting up the reporting servers that are only used to offload read-only queries from the primary, not for high availability purposes, you don't need to promote it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8afd9598c39f6e70f137c025d2dd4395fe84fd38" translate="yes" xml:space="preserve">
          <source>To undo the effects of the commands executed after &lt;code&gt;my_savepoint&lt;/code&gt; was established:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdbbd3b7380f7c99f49bcfa3a98c5897db3e04c3" translate="yes" xml:space="preserve">
          <source>To unregister the event log library from the operating system, issue this command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04ca9b3d12432d00b33dc0196874addb1efae8ee" translate="yes" xml:space="preserve">
          <source>To update data statistics used by the PostgreSQL query planner.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17b36c6a109313b445886e7e15a5a71d21fc608f" translate="yes" xml:space="preserve">
          <source>To update existing rows, use the &lt;a href=&quot;sql-update&quot;&gt;UPDATE&lt;/a&gt; command. This requires three pieces of information:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfdb73ad446ce465aedfcde295a04d6e546563ff" translate="yes" xml:space="preserve">
          <source>To update the &lt;code&gt;hstore&lt;/code&gt; extension to version 2.0:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c75aa506204ac6f6a642540af590f22a822261f" translate="yes" xml:space="preserve">
          <source>To update the visibility map, which speeds up &lt;a href=&quot;indexes-index-only-scans&quot;&gt;index-only scans&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9d6d4049d4d6f7a80e714c7b5defc7ca6ffbb75" translate="yes" xml:space="preserve">
          <source>To upgrade an existing installation from &lt;code&gt;md5&lt;/code&gt; to &lt;code&gt;scram-sha-256&lt;/code&gt;, after having ensured that all client libraries in use are new enough to support SCRAM, set &lt;code&gt;password_encryption = 'scram-sha-256'&lt;/code&gt; in &lt;code&gt;postgresql.conf&lt;/code&gt;, make all users set new passwords, and change the authentication method specifications in &lt;code&gt;pg_hba.conf&lt;/code&gt; to &lt;code&gt;scram-sha-256&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c1dafd2ac169280b07d90746edddfeb0fb7e3f0" translate="yes" xml:space="preserve">
          <source>To use &lt;code&gt;ALTER POLICY&lt;/code&gt;, you must own the table that the policy applies to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f6f185d569782026545f1b03aa2b8da54e54fce" translate="yes" xml:space="preserve">
          <source>To use &lt;code&gt;ALTER RULE&lt;/code&gt;, you must own the table or view that the rule applies to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66f7c52e4029da55c8222ce24959b959b971e824" translate="yes" xml:space="preserve">
          <source>To use &lt;code&gt;IMPORT FOREIGN SCHEMA&lt;/code&gt;, the user must have &lt;code&gt;USAGE&lt;/code&gt; privilege on the foreign server, as well as &lt;code&gt;CREATE&lt;/code&gt; privilege on the target schema.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="530dbd614178074a579a490a0ab956d80ef8434a" translate="yes" xml:space="preserve">
          <source>To use &lt;code&gt;ORDINALITY&lt;/code&gt; together with a column definition list, you must use the &lt;code&gt;ROWS FROM( ... )&lt;/code&gt; syntax and put the column definition list inside &lt;code&gt;ROWS FROM( ... )&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ca1d65da43222b484ff3cb107702a15116b7a77" translate="yes" xml:space="preserve">
          <source>To use BSD Authentication, the PostgreSQL user account (that is, the operating system user running the server) must first be added to the &lt;code&gt;auth&lt;/code&gt; group. The &lt;code&gt;auth&lt;/code&gt; group exists by default on OpenBSD systems.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="624d53b3d98397bc183e4f4a83d89ad1b366e0d6" translate="yes" xml:space="preserve">
          <source>To use a different policy for rows that are being added to the table compared to those rows that are visible, multiple policies can be combined. This pair of policies would allow all users to view all rows in the &lt;code&gt;users&lt;/code&gt; table, but only modify their own:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5918c2e1e45dcb5d119151af6621e2293acc38e" translate="yes" xml:space="preserve">
          <source>To use cascading replication, set up the cascading standby so that it can accept replication connections (that is, set &lt;a href=&quot;runtime-config-replication#GUC-MAX-WAL-SENDERS&quot;&gt;max_wal_senders&lt;/a&gt; and &lt;a href=&quot;runtime-config-replication#GUC-HOT-STANDBY&quot;&gt;hot_standby&lt;/a&gt;, and configure &lt;a href=&quot;auth-pg-hba-conf&quot;&gt;host-based authentication&lt;/a&gt;). You will also need to set &lt;code&gt;primary_conninfo&lt;/code&gt; in the downstream standby to point to the cascading standby.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e28d80b37aa18075f5d4cc483ffa5b0226809b8f" translate="yes" xml:space="preserve">
          <source>To use declarative partitioning in this case, use the following steps:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c24fdd930cccd16791dba8614e06b7437b950109" translate="yes" xml:space="preserve">
          <source>To use pg_config, supply one or more of the following options:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b164c8911c184b1eed541e609fde5b54cf0537e" translate="yes" xml:space="preserve">
          <source>To use streaming replication, set up a file-based log-shipping standby server as described in &lt;a href=&quot;warm-standby&quot;&gt;Section 26.2&lt;/a&gt;. The step that turns a file-based log-shipping standby into streaming replication standby is setting the &lt;code&gt;primary_conninfo&lt;/code&gt; setting to point to the primary server. Set &lt;a href=&quot;runtime-config-connection#GUC-LISTEN-ADDRESSES&quot;&gt;listen_addresses&lt;/a&gt; and authentication options (see &lt;code&gt;pg_hba.conf&lt;/code&gt;) on the primary so that the standby server can connect to the &lt;code&gt;replication&lt;/code&gt; pseudo-database on the primary server (see &lt;a href=&quot;warm-standby#STREAMING-REPLICATION-AUTHENTICATION&quot;&gt;Section 26.2.5.1&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d41a57b888d94c07385a12eb346d75263c49a383" translate="yes" xml:space="preserve">
          <source>To use this facility, just write an &lt;code&gt;array_type_oid =&amp;gt; nnnn&lt;/code&gt; metadata field in the scalar type's &lt;code&gt;pg_type&lt;/code&gt; entry, specifying the OID to use for the array type. You may then omit the &lt;code&gt;typarray&lt;/code&gt; field, since it will be filled automatically with that OID.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed41221f827f590a776bd2d7b32a2a20c13339d7" translate="yes" xml:space="preserve">
          <source>To use this module, you must include &lt;code&gt;sepgsql&lt;/code&gt; in the &lt;a href=&quot;runtime-config-client#GUC-SHARED-PRELOAD-LIBRARIES&quot;&gt;shared_preload_libraries&lt;/a&gt; parameter in &lt;code&gt;postgresql.conf&lt;/code&gt;. The module will not function correctly if loaded in any other manner. Once the module is loaded, you should execute &lt;code&gt;sepgsql.sql&lt;/code&gt; in each database. This will install functions needed for security label management, and assign initial security labels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fe488ba1b87ef7cbcb5c901cbf44cb2fcec20d8" translate="yes" xml:space="preserve">
          <source>To use, create a &lt;code&gt;BEFORE INSERT&lt;/code&gt; (or optionally &lt;code&gt;BEFORE INSERT OR UPDATE&lt;/code&gt;) trigger using this function. Specify two trigger arguments: the name of the integer column to be modified, and the name of the sequence object that will supply values. (Actually, you can specify any number of pairs of such names, if you'd like to update more than one autoincrementing column.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b06330e3e364688bdf4415b2dee7148b99079ba6" translate="yes" xml:space="preserve">
          <source>To use, create a &lt;code&gt;BEFORE INSERT&lt;/code&gt; and/or &lt;code&gt;UPDATE&lt;/code&gt; trigger using this function. Specify a single trigger argument: the name of the text column to be modified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="813ca35a99340fc74c82b99013f68fdb28a1bd3f" translate="yes" xml:space="preserve">
          <source>To use, create a &lt;code&gt;BEFORE UPDATE&lt;/code&gt; trigger using this function. Specify a single trigger argument: the name of the column to be modified. The column must be of type &lt;code&gt;timestamp&lt;/code&gt; or &lt;code&gt;timestamp with time zone&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d651aa40a647d96848db306e9d4e53d2fd74d529" translate="yes" xml:space="preserve">
          <source>To vacuum a table, one must ordinarily be the table's owner or a superuser. However, database owners are allowed to vacuum all tables in their databases, except shared catalogs. (The restriction for shared catalogs means that a true database-wide &lt;code&gt;VACUUM&lt;/code&gt; can only be performed by a superuser.) &lt;code&gt;VACUUM&lt;/code&gt; will skip over any tables that the calling user does not have permission to vacuum.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b12aef90b0765da4396291cbd68b40200f811baa" translate="yes" xml:space="preserve">
          <source>To write a composite value as a literal constant, enclose the field values within parentheses and separate them by commas. You can put double quotes around any field value, and must do so if it contains commas or parentheses. (More details appear &lt;a href=&quot;rowtypes#ROWTYPES-IO-SYNTAX&quot;&gt;below&lt;/a&gt;.) Thus, the general format of a composite constant is the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36be791e0428b306325653957972a9f27bc7282d" translate="yes" xml:space="preserve">
          <source>To write an array value as a literal constant, enclose the element values within curly braces and separate them by commas. (If you know C, this is not unlike the C syntax for initializing structures.) You can put double quotes around any element value, and must do so if it contains commas or curly braces. (More details appear below.) Thus, the general format of an array constant is the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1573410db1a5214d17bb9421a6156f411884884" translate="yes" xml:space="preserve">
          <source>To write an operator class for a complex data type which has values included within another type, it's possible to use the inclusion support functions alongside the corresponding operators, as shown in &lt;a href=&quot;brin-extensibility#BRIN-EXTENSIBILITY-INCLUSION-TABLE&quot;&gt;Table 67.3&lt;/a&gt;. It requires only a single additional function, which can be written in any language. More functions can be defined for additional functionality. All operators are optional. Some operators require other operators, as shown as dependencies on the table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c41930744b3f03d751f8aa722eaefe121e7c4135" translate="yes" xml:space="preserve">
          <source>To write an operator class for a data type that implements a totally ordered set, it is possible to use the minmax support functions alongside the corresponding operators, as shown in &lt;a href=&quot;brin-extensibility#BRIN-EXTENSIBILITY-MINMAX-TABLE&quot;&gt;Table 67.2&lt;/a&gt;. All operator class members (functions and operators) are mandatory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4a3b1136e1641950f065b8d855140afc16cbb62" translate="yes" xml:space="preserve">
          <source>Toggles the display of output column name headings and row count footer. This command is equivalent to &lt;code&gt;\pset tuples_only&lt;/code&gt; and is provided for convenience.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db8eba10da49a68fddbc05012de430b49248b9b2" translate="yes" xml:space="preserve">
          <source>Tokens such as &lt;code&gt;SELECT&lt;/code&gt;, &lt;code&gt;UPDATE&lt;/code&gt;, or &lt;code&gt;VALUES&lt;/code&gt; in the example above are examples of &lt;em&gt;key words&lt;/em&gt;, that is, words that have a fixed meaning in the SQL language. The tokens &lt;code&gt;MY_TABLE&lt;/code&gt; and &lt;code&gt;A&lt;/code&gt; are examples of &lt;em&gt;identifiers&lt;/em&gt;. They identify names of tables, columns, or other database objects, depending on the command they are used in. Therefore they are sometimes simply called &amp;ldquo;names&amp;rdquo;. Key words and identifiers have the same lexical structure, meaning that one cannot know whether a token is an identifier or a key word without knowing the language. A complete list of key words can be found in &lt;a href=&quot;sql-keywords-appendix&quot;&gt;Appendix C&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fdf6469a5fdbc62b046cf253917814a2537bbac" translate="yes" xml:space="preserve">
          <source>Too large or small integer and double constants, as well as integer arithmetic operators (&lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt; and &lt;code&gt;/&lt;/code&gt;) raise errors on overflows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d299b72cc8e4fe0852effc6e9ba7475bfceb97f7" translate="yes" xml:space="preserve">
          <source>Top-level transaction identifier of this backend, if any.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b94a11c6c4384bcb235fe450b134cbeae2334827" translate="yes" xml:space="preserve">
          <source>Total amount of data written to temporary files by queries in this database. All temporary files are counted, regardless of why the temporary file was created, and regardless of the &lt;a href=&quot;runtime-config-logging#GUC-LOG-TEMP-FILES&quot;&gt;log_temp_files&lt;/a&gt; setting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="048f9cb0c1fef49da291331aa694810bbf7c5eaf" translate="yes" xml:space="preserve">
          <source>Total amount of shared memory available (bytes or pages)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c89a5c064950bd223dd4b0d4940f5906ef93b42c" translate="yes" xml:space="preserve">
          <source>Total amount of time that has been spent in the portion of checkpoint processing where files are synchronized to disk, in milliseconds</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e73c325b1deeb96ed9f601ced16f69bc748b945" translate="yes" xml:space="preserve">
          <source>Total amount of time that has been spent in the portion of checkpoint processing where files are written to disk, in milliseconds</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71415a93ebff8bf2944bf82c235b10d6a4874b3a" translate="yes" xml:space="preserve">
          <source>Total disk space used by indexes attached to the specified table</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7f95b912814449591b52712042e3e25ade209c4" translate="yes" xml:space="preserve">
          <source>Total disk space used by the specified table, including all indexes and TOAST data</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ee9b213fd39d43e6dff25c490fe089aa0f14ead" translate="yes" xml:space="preserve">
          <source>Total free space in bytes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57d76893f09fe684f4b71eeb58289be5bae9b545" translate="yes" xml:space="preserve">
          <source>Total free space in bytes (estimated)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1b33dddd9dc06b94a7dc19125345a3ba04c6ba7" translate="yes" xml:space="preserve">
          <source>Total index size in bytes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6e222d69efe669c5fefda27390cf10ca078aa0d" translate="yes" xml:space="preserve">
          <source>Total length of dead tuples in bytes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6a855ca8640e026c82ad34a21c2afe4864021a0" translate="yes" xml:space="preserve">
          <source>Total length of dead tuples in bytes (exact)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="998db26f06b8a72881082a9b3df052ec2d49b9d8" translate="yes" xml:space="preserve">
          <source>Total length of live tuples in bytes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5de5b16f6d80a5b30ec964c09c76bd5a80231924" translate="yes" xml:space="preserve">
          <source>Total length of live tuples in bytes (estimated)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1ce6625b6e47aeee73d2c1b1b71597cc6a9a9eb" translate="yes" xml:space="preserve">
          <source>Total number of blocks to be processed in the current phase.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3f02827d30602c98795371990fc0010531688f8" translate="yes" xml:space="preserve">
          <source>Total number of heap blocks in the table. This number is reported as of the beginning of &lt;code&gt;seq scanning heap&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e4181d322bb75a54b26cb82d6a33040c9b04e2f" translate="yes" xml:space="preserve">
          <source>Total number of heap blocks in the table. This number is reported as of the beginning of the scan; blocks added later will not be (and need not be) visited by this &lt;code&gt;VACUUM&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="139c9a494fed3d2e3c71e34a5377d33fc050686f" translate="yes" xml:space="preserve">
          <source>Total number of local block cache hits by the statement</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0444ce0d25e58c3dd39f796bef3ec3b458f342a6" translate="yes" xml:space="preserve">
          <source>Total number of local blocks dirtied by the statement</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa8d6c141a66861c96281f0f98242227f5426245" translate="yes" xml:space="preserve">
          <source>Total number of local blocks read by the statement</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4c74b725d95cc43eb047faf06c7999e553ed6e3" translate="yes" xml:space="preserve">
          <source>Total number of local blocks written by the statement</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45b980cf18ac4474aa05feb6af93d1110cc5268b" translate="yes" xml:space="preserve">
          <source>Total number of lockers to wait for, when applicable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52c88d84e12390f95fdf71590482ec7e55e73347" translate="yes" xml:space="preserve">
          <source>Total number of rows retrieved or affected by the statement</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c19070c91bef841456a88dfe27bbe57dee0681a" translate="yes" xml:space="preserve">
          <source>Total number of shared block cache hits by the statement</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a10785244a51d5a13cdcecb0439b9565a7085faf" translate="yes" xml:space="preserve">
          <source>Total number of shared blocks dirtied by the statement</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b53a3b5f4cb61c2d5cff8b511400281b57ffd420" translate="yes" xml:space="preserve">
          <source>Total number of shared blocks read by the statement</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80f7d9d3865345cc690816c3728dd14e4bb7e4b9" translate="yes" xml:space="preserve">
          <source>Total number of shared blocks written by the statement</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d52c8d86744555c33141f6cf6855a23715ba448" translate="yes" xml:space="preserve">
          <source>Total number of temp blocks read by the statement</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d68b8452834fec0662460159475cf3a49ba37364" translate="yes" xml:space="preserve">
          <source>Total number of temp blocks written by the statement</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fc7e0f8478eebbe50dca363939606b67ef16e62" translate="yes" xml:space="preserve">
          <source>Total number of tuples to be processed in the current phase.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68f2ac9e60d0e97728209a16e26e37eeb3dc266b" translate="yes" xml:space="preserve">
          <source>Total time spent in the statement, in milliseconds</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dc28fb55c553e60327ba7c4192353b9fe9a42ae" translate="yes" xml:space="preserve">
          <source>Total time spent in this function and all other functions called by it, in milliseconds</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="128b607d292f1a55909a9645569d2e8961a6c971" translate="yes" xml:space="preserve">
          <source>Total time spent in this function itself, not including other functions called by it, in milliseconds</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fdfbad291288b3e0fb3447fb003299fb7e4adba" translate="yes" xml:space="preserve">
          <source>Total time the statement spent reading blocks, in milliseconds (if &lt;a href=&quot;runtime-config-statistics#GUC-TRACK-IO-TIMING&quot;&gt;track_io_timing&lt;/a&gt; is enabled, otherwise zero)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2bf126392434f87ab4af3802a7e86186f9be4fd" translate="yes" xml:space="preserve">
          <source>Total time the statement spent writing blocks, in milliseconds (if &lt;a href=&quot;runtime-config-statistics#GUC-TRACK-IO-TIMING&quot;&gt;track_io_timing&lt;/a&gt; is enabled, otherwise zero)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b612e72ed8b42ec172f3e6dbff27929a0f89575" translate="yes" xml:space="preserve">
          <source>Traditional Chinese</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb7f41346d8c75d2dd240c360bc90f8fc8bf4ce2" translate="yes" xml:space="preserve">
          <source>Traditional Chinese, Taiwanese</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9af7edd2b08bdbc2ff56eb3fefef8426307788e0" translate="yes" xml:space="preserve">
          <source>Traditional Postgres format: 1 year 2 months 3 days 4 hours 5 minutes 6 seconds</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d71728de27860673275b28c16ef5e7f90331435b" translate="yes" xml:space="preserve">
          <source>Traditionally, implementing a new index access method meant a lot of difficult work. It was necessary to understand the inner workings of the database, such as the lock manager and Write-Ahead Log. The GiST interface has a high level of abstraction, requiring the access method implementer only to implement the semantics of the data type being accessed. The GiST layer itself takes care of concurrency, logging and searching the tree structure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e44f86c162c3284066aeae3888c8a4b415d14e56" translate="yes" xml:space="preserve">
          <source>Traditionally, the configuration and data files used by a database cluster are stored together within the cluster's data directory, commonly referred to as &lt;code&gt;PGDATA&lt;/code&gt; (after the name of the environment variable that can be used to define it). A common location for &lt;code&gt;PGDATA&lt;/code&gt; is &lt;code&gt;/var/lib/pgsql/data&lt;/code&gt;. Multiple clusters, managed by different server instances, can exist on the same machine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20805c5f220ddf62c478af0fa328fd76b59b6fbd" translate="yes" xml:space="preserve">
          <source>Transaction ID (0 if none is assigned)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18878616c87726806d6badd68af497dae4b41656" translate="yes" xml:space="preserve">
          <source>Transaction ID of locker, or multixact ID if multitransaction</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10ae26a42b974bab55e86677c8854e6023be47c7" translate="yes" xml:space="preserve">
          <source>Transaction IDs of lockers (more than one if multitransaction)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b857f9c61d290e017488262bdfa776200c8930d" translate="yes" xml:space="preserve">
          <source>Transaction Identifier</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="362cc7ebfcc8b6860ba84b6be6157ee564a4269e" translate="yes" xml:space="preserve">
          <source>Transaction Isolation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e3fee17c38273e0e622dcdfde38cb6e3e451ec0" translate="yes" xml:space="preserve">
          <source>Transaction Isolation: Read Committed Isolation Level</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0295f8efef0a16226ca1dadeb7b1cef90dbc2ba8" translate="yes" xml:space="preserve">
          <source>Transaction Isolation: Repeatable Read Isolation Level</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdc308a16f76158b2289592e32f76f134ccb174a" translate="yes" xml:space="preserve">
          <source>Transaction Isolation: Serializable Isolation Level</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b163af0dec8e2d414f03eeaa5a4aa6c8443bd48e" translate="yes" xml:space="preserve">
          <source>Transaction Processing Performance Council</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="783653ce8aabc988ab1fbf0b7b77def9554206d6" translate="yes" xml:space="preserve">
          <source>Transaction identifiers are also 32-bit quantities. In a long-lived database it is possible for transaction IDs to wrap around. This is not a fatal problem given appropriate maintenance procedures; see &lt;a href=&quot;https://www.postgresql.org/docs/12/maintenance.html&quot;&gt;Chapter 24&lt;/a&gt; for details. It is unwise, however, to depend on the uniqueness of transaction IDs over the long term (more than one billion transactions).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad3cae69d174599e4cc4c127a9de08ea538533e3" translate="yes" xml:space="preserve">
          <source>Transaction management commands</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="244648d2a2b4c5e9f046005998c3282e5c7fd698" translate="yes" xml:space="preserve">
          <source>Transaction management commands that explicitly set non-read-only state:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bae2f8d1524dbc31720a0e3939f64fa26db9b78" translate="yes" xml:space="preserve">
          <source>Transaction one attempts to acquire a row-level lock on the specified row, but it cannot: transaction two already holds such a lock. So it waits for transaction two to complete. Thus, transaction one is blocked on transaction two, and transaction two is blocked on transaction one: a deadlock condition. PostgreSQL will detect this situation and abort one of the transactions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2df50b58a3e87095cd42c2f4034bc6e5e6a2ae50" translate="yes" xml:space="preserve">
          <source>Transaction status &quot;hint bits&quot; written on the primary are not WAL-logged, so data on the standby will likely re-write the hints again on the standby. Thus, the standby server will still perform disk writes even though all users are read-only; no changes occur to the data values themselves. Users will still write large sort temporary files and re-generate relcache info files, so no part of the database is truly read-only during hot standby mode. Note also that writes to remote databases using dblink module, and other operations outside the database using PL functions will still be possible, even though the transaction is read-only locally.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9115fef6aaf514e06f30c02d5ba3730bf585a59c" translate="yes" xml:space="preserve">
          <source>Transaction status: an empty string when not in a transaction block, or &lt;code&gt;*&lt;/code&gt; when in a transaction block, or &lt;code&gt;!&lt;/code&gt; when in a failed transaction block, or &lt;code&gt;?&lt;/code&gt; when the transaction state is indeterminate (for example, because there is no connection).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47ebfa32d50285675f9d154d8a4546223948507a" translate="yes" xml:space="preserve">
          <source>TransactionId</source>
          <target state="translated">TransactionId</target>
        </trans-unit>
        <trans-unit id="01df28d63a600d976f605002c1c87ca85d599d36" translate="yes" xml:space="preserve">
          <source>Transactions started during hot standby may issue the following commands:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cf9ced370da4876292141e53b2b552a9cf764b7" translate="yes" xml:space="preserve">
          <source>Transactions started during hot standby will never be assigned a transaction ID and cannot write to the system write-ahead log. Therefore, the following actions will produce error messages:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="479ffbbc1b67ed11701ba8d2dcae959b56067bd4" translate="yes" xml:space="preserve">
          <source>Transactions that last more than &lt;code&gt;limit&lt;/code&gt; milliseconds are counted and reported separately, as &lt;em&gt;late&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dd0b9585e0aac48b40c541fafaca4f31c93300a" translate="yes" xml:space="preserve">
          <source>Transition function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59a6244fac8a9c9d9686484f98e57e4b38d7e551" translate="yes" xml:space="preserve">
          <source>Translates the given qualified MLS/MCS range into raw format if the mcstrans daemon is running.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="731119f8198322e42d9eac5b43c02d9adc999a6f" translate="yes" xml:space="preserve">
          <source>Translates the given raw MLS/MCS range into qualified format if the mcstrans daemon is running.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac26a7a94ea2e66490f932b6415a09ef6f2a913c" translate="yes" xml:space="preserve">
          <source>Translation</source>
          <target state="translated">Translation</target>
        </trans-unit>
        <trans-unit id="6ba02139a90ba90fe7b0f004a77e148246991531" translate="yes" xml:space="preserve">
          <source>Transmission Control Protocol (TCP) / Internet Protocol (IP)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0078eb875cd6a9009a98bbca564ba5b0c49f0742" translate="yes" xml:space="preserve">
          <source>Treat given time stamp &lt;em&gt;without time zone&lt;/em&gt; as located in the specified time zone</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22ea8d02160441883e871c64b4bf207437c3c434" translate="yes" xml:space="preserve">
          <source>Tree level of the root page</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9451e7469c06f9b530822204de7004d1e937be5b" translate="yes" xml:space="preserve">
          <source>Trigger name (must be unique among triggers of same table)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e20ca83547dde923f083f9c8fa915e58f12e5b0e" translate="yes" xml:space="preserve">
          <source>Trigger name (must be unique)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a556d389e53119654090ed90caa41185b3f9c1f" translate="yes" xml:space="preserve">
          <source>Trigger-Based Master-Standby Replication</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="358d2d9b79bd7e7b52f1a586b3f6090ae9e39c21" translate="yes" xml:space="preserve">
          <source>Trigger-based replication systems such as Slony, Londiste and Bucardo won't run on the standby at all, though they will run happily on the primary server as long as the changes are not sent to standby servers to be applied. WAL replay is not trigger-based so you cannot relay from the standby to any system that requires additional database writes or relies on the use of triggers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec9dd8da4cbb76e8113d156c57ac6bcb808fcaed" translate="yes" xml:space="preserve">
          <source>Triggers or rules will be needed to route rows to the desired child table, unless the application is explicitly aware of the partitioning scheme. Triggers may be complicated to write, and will be much slower than the tuple routing performed internally by declarative partitioning.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5d696aa282753969e978fb0a8849d8e4a8fd3c1" translate="yes" xml:space="preserve">
          <source>Triggers that are specified to fire &lt;code&gt;INSTEAD OF&lt;/code&gt; the trigger event must be marked &lt;code&gt;FOR EACH ROW&lt;/code&gt;, and can only be defined on views. &lt;code&gt;BEFORE&lt;/code&gt; and &lt;code&gt;AFTER&lt;/code&gt; triggers on a view must be marked as &lt;code&gt;FOR EACH STATEMENT&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fc33655c302a2026e3c03ef9f67004fc688e0bc" translate="yes" xml:space="preserve">
          <source>Trigram matching is a very useful tool when used in conjunction with a full text index. In particular it can help to recognize misspelled input words that will not be matched directly by the full text search mechanism.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c47b56bcac7cb1a1a1a2b8b071447953ef205236" translate="yes" xml:space="preserve">
          <source>True if &lt;code&gt;member&lt;/code&gt; can grant membership in &lt;code&gt;roleid&lt;/code&gt; to others</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27b88e660e42da283a963fedfe7ddba5acc1eb37" translate="yes" xml:space="preserve">
          <source>True if GSSAPI authentication was used for this connection</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0294acd5dcbc0ec5fe0501f3d6e4f6631feaea3" translate="yes" xml:space="preserve">
          <source>True if GSSAPI encryption is in use on this connection</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="249fa4238b509d9384131b077e4a974fe52e87b7" translate="yes" xml:space="preserve">
          <source>True if SSL compression is in use, false if not, or NULL if SSL is not in use on this connection</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b09e7e431be1f0ef9d3f61bae90a5b84de49fc09" translate="yes" xml:space="preserve">
          <source>True if SSL is used on this connection</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73fc59a0dc7300971fbdc23724099ed0b896857f" translate="yes" xml:space="preserve">
          <source>True if an on-line exclusive backup is still in progress.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="012e79baddd407b1c921d97d791e3cf55a10cb4d" translate="yes" xml:space="preserve">
          <source>True if constraint trigger is deferrable</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d2220de13bd9a2d96db7735aed49d6345d08164" translate="yes" xml:space="preserve">
          <source>True if constraint trigger is initially deferred</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23d7a2135b9ce4e46ed5cd1464346506b9a106a5" translate="yes" xml:space="preserve">
          <source>True if currently observing daylight savings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c9e701104bae2b464c2020db78d7e9600016eaa" translate="yes" xml:space="preserve">
          <source>True if extension can be relocated to another schema</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13194a8bcdf4e8395775186edb8919bbe57277d7" translate="yes" xml:space="preserve">
          <source>True if language is considered trusted</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f48edc9cc0d1d8a7aedf7f448e48a3a8e2dfdc7e" translate="yes" xml:space="preserve">
          <source>True if language may be created by a database owner</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64e3a4a3dce2e5bcd672ebfd09e86521c286718f" translate="yes" xml:space="preserve">
          <source>True if lock is held, false if lock is awaited</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b6ef157f06387be075989a37f516c89a4bd0a37" translate="yes" xml:space="preserve">
          <source>True if lock was taken via fast path, false if taken via main lock table</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad71d91044693983ff02d60ae2955e48c5fc2452" translate="yes" xml:space="preserve">
          <source>True if locker is a multitransaction</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fda8e2d43deca4588633ff2520ae6d5cec5b396c" translate="yes" xml:space="preserve">
          <source>True if materialized view has (or recently had) any indexes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f8da21d8e6ff2b7a2076689ef9d08e87aef74dd" translate="yes" xml:space="preserve">
          <source>True if materialized view is currently populated</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99506ea5356b9ad791ad9c495955d35220b0a84f" translate="yes" xml:space="preserve">
          <source>True if only superusers are allowed to install this extension</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a35a480c8856109ea6f28e3f43d8363e78cf83fe" translate="yes" xml:space="preserve">
          <source>True if recovery is paused.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f63f3a290f4cbaf52602d088d18db98a25a18728" translate="yes" xml:space="preserve">
          <source>True if recovery is still in progress.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="952d1d48ba36745c7442261d09e7833e6a695b65" translate="yes" xml:space="preserve">
          <source>True if relation is populated (this is true for all relations other than some materialized views)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8415173c3c9124dc63f70c0e4fc258f7f25295a4" translate="yes" xml:space="preserve">
          <source>True if row level security (when enabled) will also apply to table owner; see &lt;a href=&quot;catalog-pg-policy&quot;&gt;&lt;code&gt;pg_policy&lt;/code&gt;&lt;/a&gt; catalog</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84b8ae8060dc19fffeb8070b76ac95ebd9162532" translate="yes" xml:space="preserve">
          <source>True if row security is enabled on the table</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c016f5a7ce842e21ac5e05ef1d678380be642aaa" translate="yes" xml:space="preserve">
          <source>True if table has (or once had) rules</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86d78d4068510676f3b29858a7d35e8046be10f2" translate="yes" xml:space="preserve">
          <source>True if table has (or once had) rules; see &lt;a href=&quot;catalog-pg-rewrite&quot;&gt;&lt;code&gt;pg_rewrite&lt;/code&gt;&lt;/a&gt; catalog</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbd3dd1777eb1a65592ad8111a5ec7282e029b6a" translate="yes" xml:space="preserve">
          <source>True if table has (or once had) triggers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="232c6e9f5f95405c7928ec2722737febf663144a" translate="yes" xml:space="preserve">
          <source>True if table has (or once had) triggers; see &lt;a href=&quot;catalog-pg-trigger&quot;&gt;&lt;code&gt;pg_trigger&lt;/code&gt;&lt;/a&gt; catalog</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66b69b4d62a4378bccf42a60097c0c71c291ce56" translate="yes" xml:space="preserve">
          <source>True if table has (or recently had) any indexes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7bd1fe139d42d7b1519b72cb282ee9cb54850bb" translate="yes" xml:space="preserve">
          <source>True if table has row level security enabled; see &lt;a href=&quot;catalog-pg-policy&quot;&gt;&lt;code&gt;pg_policy&lt;/code&gt;&lt;/a&gt; catalog</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="955515f99b28aae950e8f042fb8a268a1914bd68" translate="yes" xml:space="preserve">
          <source>True if table or index has (or once had) any inheritance children</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a519990c88d7093181aaba6f5c8906c338ebda6d" translate="yes" xml:space="preserve">
          <source>True if table or index is a partition</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6faf5538e123802b74af773b1f794f3bde782ef0" translate="yes" xml:space="preserve">
          <source>True if the current role has superuser privileges.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42ccdc48d1316985de4ceff096fc1090b18ac5fc" translate="yes" xml:space="preserve">
          <source>True if the rule is an &lt;code&gt;INSTEAD&lt;/code&gt; rule</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb4d292a249d96e18b80c58763a501bbad7d05de" translate="yes" xml:space="preserve">
          <source>True if the type is a preferred cast target within its &lt;code&gt;typcategory&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c404ccf3e65aa528ab96ca3872357652195dd689" translate="yes" xml:space="preserve">
          <source>True if the type is defined, false if this is a placeholder entry for a not-yet-defined type. When &lt;code&gt;typisdefined&lt;/code&gt; is false, nothing except the type name, namespace, and OID can be relied on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf25c33cad22135a1491bee944b6f10caae211df" translate="yes" xml:space="preserve">
          <source>True if the value can be applied successfully</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32b0c20ba6a36c06232673842b1188efcec879d2" translate="yes" xml:space="preserve">
          <source>True if this is a daylight-savings abbreviation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36393d0a0fd9ddbaafe14fa3d4329cc46ba38ce7" translate="yes" xml:space="preserve">
          <source>True if this is a table and it has (or recently had) any indexes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26ed87abfb4393c79c8c847eb10dc8103b4a50c1" translate="yes" xml:space="preserve">
          <source>True if this is a temporary replication slot. Temporary slots are not saved to disk and are automatically dropped on error or when the session has finished.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef96945409922985d107491ffa09903856c28a62" translate="yes" xml:space="preserve">
          <source>True if this is a trusted language, which means that it is believed not to grant access to anything outside the normal SQL execution environment. Only superusers can create functions in untrusted languages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c204724b18388c85e2216fcb59a67a33fb072e1d" translate="yes" xml:space="preserve">
          <source>True if this is the default conversion</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="965b2818c43a8348e19c577671df21f2fc196f83" translate="yes" xml:space="preserve">
          <source>True if this operator class is the default for &lt;code&gt;opcintype&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bd82801197995cc7c2f18df7e169fd34abd4933" translate="yes" xml:space="preserve">
          <source>True if this slot is currently actively being used</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df76a619896b77be64d0f3cb65694575b20c8bda" translate="yes" xml:space="preserve">
          <source>True if this table is shared across all databases in the cluster. Only certain system catalogs (such as &lt;code&gt;pg_database&lt;/code&gt;) are shared.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00d7d10a299138dca72b8e64f880eb593bd8c0c1" translate="yes" xml:space="preserve">
          <source>True if this type is a preferred type within its type category, else false. The default is false. Be very careful about creating a new preferred type within an existing type category, as this could cause surprising changes in behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9def5bf7a41790ac3b8e30f1fc70c1fdbb898bec" translate="yes" xml:space="preserve">
          <source>True if this type's operations can use collation information. The default is false.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0ad09cb04969121b61e35716b0db046d9cadd81" translate="yes" xml:space="preserve">
          <source>True if this version of this extension is currently installed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab9af1736eb3931ab0baf9949ee8108e0d2bfebd" translate="yes" xml:space="preserve">
          <source>True if trigger is internally generated (usually, to enforce the constraint identified by &lt;code&gt;tgconstraint&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ca548743e2786b08e3fd52b9381c1735b9c020c" translate="yes" xml:space="preserve">
          <source>True to pass extra dummy arguments to &lt;code&gt;aggfinalfn&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="164596b2be84a485eca692d6a04580df3d74a2aa" translate="yes" xml:space="preserve">
          <source>True to pass extra dummy arguments to &lt;code&gt;aggmfinalfn&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d4ee65593919418e1bd8e29f7e952e96736cb58" translate="yes" xml:space="preserve">
          <source>Truncate the table &lt;code&gt;othertable&lt;/code&gt;, and cascade to any tables that reference &lt;code&gt;othertable&lt;/code&gt; via foreign-key constraints:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dc17db6052d197657f4b66cc0edb567325a2bbb" translate="yes" xml:space="preserve">
          <source>Truncate the tables &lt;code&gt;bigtable&lt;/code&gt; and &lt;code&gt;fattable&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00f1193a7fa78df4b4d56560c05dd84766a6e43f" translate="yes" xml:space="preserve">
          <source>Truncate to specified precision in the specified time zone; see &lt;a href=&quot;functions-datetime#FUNCTIONS-DATETIME-TRUNC&quot;&gt;Section 9.9.2&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be6b9181b48ae3b21719c3424b9df5c25e4cf704" translate="yes" xml:space="preserve">
          <source>Truncate to specified precision; see &lt;a href=&quot;functions-datetime#FUNCTIONS-DATETIME-TRUNC&quot;&gt;Section 9.9.2&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20d769e0b499920cf570c76fa726c85ce63bdb4b" translate="yes" xml:space="preserve">
          <source>Truncates the visibility map for the given relation. This function is useful if you believe that the visibility map for the relation is corrupt and wish to force rebuilding it. The first &lt;code&gt;VACUUM&lt;/code&gt; executed on the given relation after this function is executed will scan every page in the relation and rebuild the visibility map. (Until that is done, queries will treat the visibility map as containing all zeroes.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fc0100312a64373efd7c390d92763a84341669f" translate="yes" xml:space="preserve">
          <source>Trust Authentication</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6525fd8384c1b1a98745cafdc4fe870534c5b3c9" translate="yes" xml:space="preserve">
          <source>Trust both system and database administrator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0303d1058ff834ee7d3f9e41bfb45de83313adee" translate="yes" xml:space="preserve">
          <source>Trusted procedures are similar to security definer functions or setuid commands. SELinux provides a feature to allow trusted code to run using a security label different from that of the client, generally for the purpose of providing highly controlled access to sensitive data (e.g. rows might be omitted, or the precision of stored values might be reduced). Whether or not a function acts as a trusted procedure is controlled by its security label and the operating system security policy. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66a91624c0de6e82ae0fef2e1f06a35f0bd22897" translate="yes" xml:space="preserve">
          <source>Trying to update the same row twice in a single statement is not supported. Only one of the modifications takes place, but it is not easy (and sometimes not possible) to reliably predict which one. This also applies to deleting a row that was already updated in the same statement: only the update is performed. Therefore you should generally avoid trying to modify a single row twice in a single statement. In particular avoid writing &lt;code&gt;WITH&lt;/code&gt; sub-statements that could affect the same rows changed by the main statement or a sibling sub-statement. The effects of such a statement will not be predictable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b26f6753852a596fe51a0b24ba50ca61c0a5cc05" translate="yes" xml:space="preserve">
          <source>Tsearch2 Development Site &lt;a href=&quot;http://www.sai.msu.su/~megera/postgres/gist/tsearch/V2/&quot;&gt;http://www.sai.msu.su/~megera/postgres/gist/tsearch/V2/&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfb00a997a076b71d83b496d4907048db3c803c8" translate="yes" xml:space="preserve">
          <source>Tue, Tues</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42e43b612a5dfae57ddf5929f0fb945ae83cbf61" translate="yes" xml:space="preserve">
          <source>Tuesday</source>
          <target state="translated">Tuesday</target>
        </trans-unit>
        <trans-unit id="de9422afddf78236a21b50c7a1aae8eadf26c4b6" translate="yes" xml:space="preserve">
          <source>Tuple ID (TID) of locked row</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a288c729f3b11b14057ff94886b8d82b1b114cb1" translate="yes" xml:space="preserve">
          <source>Tuple Identifier</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f26ca0c5d69bec575e9ec24eeec65dfcec7bd62" translate="yes" xml:space="preserve">
          <source>Tuple deforming is the process of transforming an on-disk tuple (see &lt;a href=&quot;storage-page-layout#STORAGE-TUPLE-LAYOUT&quot;&gt;Section 68.6.1&lt;/a&gt;) into its in-memory representation. It can be accelerated by creating a function specific to the table layout and the number of columns to be extracted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86e46b735d6cd66502b1333be16b366c854a2020" translate="yes" xml:space="preserve">
          <source>Tuple number targeted by the lock within the page, or null if the target is not a tuple</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="538a8ce3fbdcaee00a14353bd57bcf3600c6e0d0" translate="yes" xml:space="preserve">
          <source>Tuples</source>
          <target state="translated">Tuples</target>
        </trans-unit>
        <trans-unit id="ab650a1a4b8fdf3a4053ce8d277d335dd82e5447" translate="yes" xml:space="preserve">
          <source>Turkish</source>
          <target state="translated">Turkish</target>
        </trans-unit>
        <trans-unit id="f4049144a6e32c443901c30714628293045b3669" translate="yes" xml:space="preserve">
          <source>Turn off &lt;a href=&quot;runtime-config-wal#GUC-FSYNC&quot;&gt;fsync&lt;/a&gt;; there is no need to flush data to disk.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd6d343fd0c3083f0c7e90c0e461974b687534bf" translate="yes" xml:space="preserve">
          <source>Turn off &lt;a href=&quot;runtime-config-wal#GUC-FULL-PAGE-WRITES&quot;&gt;full_page_writes&lt;/a&gt;; there is no need to guard against partial page writes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df8b7a87a09ca0a552f551d1eb119e7c2b44535c" translate="yes" xml:space="preserve">
          <source>Turn off &lt;a href=&quot;runtime-config-wal#GUC-SYNCHRONOUS-COMMIT&quot;&gt;synchronous_commit&lt;/a&gt;; there might be no need to force WAL writes to disk on every commit. This setting does risk transaction loss (though not data corruption) in case of a crash of the &lt;em&gt;database&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c25473f6f439ed3d685a7fc2f4053fbeaf6af493" translate="yes" xml:space="preserve">
          <source>Turn off printing of column names and result row count footers, etc. This is equivalent to &lt;code&gt;\t&lt;/code&gt; or &lt;code&gt;\pset tuples_only&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c452943219408586e340ca7eae9dc9861f0212c" translate="yes" xml:space="preserve">
          <source>Turn on autocommit of transactions. In this mode, each SQL command is automatically committed unless it is inside an explicit transaction block. In the default mode, commands are committed only when &lt;code&gt;EXEC SQL COMMIT&lt;/code&gt; is issued.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="082802bc6506a1fb8c80b6b9796c7710bdeb3763" translate="yes" xml:space="preserve">
          <source>Turn on the expanded table formatting mode. This is equivalent to &lt;code&gt;\x&lt;/code&gt; or &lt;code&gt;\pset expanded&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ac524768d250e29de07aaee53faeda03896b32c" translate="yes" xml:space="preserve">
          <source>Turning &lt;code&gt;fastupdate&lt;/code&gt; off via &lt;code&gt;ALTER INDEX&lt;/code&gt; prevents future insertions from going into the list of pending index entries, but does not in itself flush previous entries. You might want to &lt;code&gt;VACUUM&lt;/code&gt; the table or call &lt;code&gt;gin_clean_pending_list&lt;/code&gt; function afterward to ensure the pending list is emptied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f12445322d4c10bb21d0f4cf2ccb90ed3605df43" translate="yes" xml:space="preserve">
          <source>Turning off this parameter does not affect use of WAL archiving for point-in-time recovery (PITR) (see &lt;a href=&quot;continuous-archiving&quot;&gt;Section 25.3&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1686b206d7cc35bb7f5514f93be0cb2800c13338" translate="yes" xml:space="preserve">
          <source>Turning this parameter off speeds normal operation, but might lead to either unrecoverable data corruption, or silent data corruption, after a system failure. The risks are similar to turning off &lt;code&gt;fsync&lt;/code&gt;, though smaller, and it should be turned off only based on the same circumstances recommended for that parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93c364b56baaa4f87c84df84869c49e931e78c4b" translate="yes" xml:space="preserve">
          <source>Turning this parameter on can reduce the WAL volume without increasing the risk of unrecoverable data corruption, but at the cost of some extra CPU spent on the compression during WAL logging and on the decompression during WAL replay.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fbf2fe24b1539aa2687ce60e2adbf515dad4763" translate="yes" xml:space="preserve">
          <source>Turns on HTML query output format. If the HTML format is already on, it is switched back to the default aligned text format. This command is for compatibility and convenience, but see &lt;code&gt;\pset&lt;/code&gt; about setting other output options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2dd2e8d41b109545398675ecaa4d48e806818d15" translate="yes" xml:space="preserve">
          <source>Tutorial: Advanced Features</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="462c9e67f015d8940f17ef1bf7e40741a0bcf586" translate="yes" xml:space="preserve">
          <source>Tutorial: Getting Started</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d479f44cf7a48c33abced080cd7b547c6bd3a7b" translate="yes" xml:space="preserve">
          <source>Tutorial: The SQL Language</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d96f74ad720891d7859b479263f4e39be9378130" translate="yes" xml:space="preserve">
          <source>Two GiST index operator classes are provided: &lt;code&gt;gist__int_ops&lt;/code&gt; (used by default) is suitable for small- to medium-size data sets, while &lt;code&gt;gist__intbig_ops&lt;/code&gt; uses a larger signature and is more suitable for indexing large data sets (i.e., columns containing a large number of distinct array values). The implementation uses an RD-tree data structure with built-in lossy compression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd21e98bab637ed7f2ea4e4b5c263e9096bd942d" translate="yes" xml:space="preserve">
          <source>Two functions are considered the same if they have the same names and &lt;em&gt;input&lt;/em&gt; argument types, ignoring any &lt;code&gt;OUT&lt;/code&gt; parameters. Thus for example these declarations conflict:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="662248ac968d8ab661b9569a6e6849ae788e24f8" translate="yes" xml:space="preserve">
          <source>Two significant incompatibilities exist between AREs and the ERE syntax recognized by pre-7.4 releases of PostgreSQL:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a32f2ed2800b3a048eac6f3c98ed4d6f0004a87" translate="yes" xml:space="preserve">
          <source>Two string constants that are only separated by whitespace &lt;em&gt;with at least one newline&lt;/em&gt; are concatenated and effectively treated as if the string had been written as one constant. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90b63e2a4e205cf20d0c53869ecd885349050bdf" translate="yes" xml:space="preserve">
          <source>Two tablespaces are automatically created when the database cluster is initialized. The &lt;code&gt;pg_global&lt;/code&gt; tablespace is used for shared system catalogs. The &lt;code&gt;pg_default&lt;/code&gt; tablespace is the default tablespace of the &lt;code&gt;template1&lt;/code&gt; and &lt;code&gt;template0&lt;/code&gt; databases (and, therefore, will be the default tablespace for other databases as well, unless overridden by a &lt;code&gt;TABLESPACE&lt;/code&gt; clause in &lt;code&gt;CREATE DATABASE&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5b854b5685b242cd142ae86c5c04afbc5fc30b6" translate="yes" xml:space="preserve">
          <source>Two types can be &lt;em&gt;binary coercible&lt;/em&gt;, which means that the conversion can be performed &amp;ldquo;for free&amp;rdquo; without invoking any function. This requires that corresponding values use the same internal representation. For instance, the types &lt;code&gt;text&lt;/code&gt; and &lt;code&gt;varchar&lt;/code&gt; are binary coercible both ways. Binary coercibility is not necessarily a symmetric relationship. For example, the cast from &lt;code&gt;xml&lt;/code&gt; to &lt;code&gt;text&lt;/code&gt; can be performed for free in the present implementation, but the reverse direction requires a function that performs at least a syntax check. (Two types that are binary coercible both ways are also referred to as binary compatible.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51632bd25b09e4b06271cc8939c29fce73a7a60c" translate="yes" xml:space="preserve">
          <source>Two useful flags exist in &lt;code&gt;pg_database&lt;/code&gt; for each database: the columns &lt;code&gt;datistemplate&lt;/code&gt; and &lt;code&gt;datallowconn&lt;/code&gt;. &lt;code&gt;datistemplate&lt;/code&gt; can be set to indicate that a database is intended as a template for &lt;code&gt;CREATE DATABASE&lt;/code&gt;. If this flag is set, the database can be cloned by any user with &lt;code&gt;CREATEDB&lt;/code&gt; privileges; if it is not set, only superusers and the owner of the database can clone it. If &lt;code&gt;datallowconn&lt;/code&gt; is false, then no new connections to that database will be allowed (but existing sessions are not terminated simply by setting the flag false). The &lt;code&gt;template0&lt;/code&gt; database is normally marked &lt;code&gt;datallowconn = false&lt;/code&gt; to prevent its modification. Both &lt;code&gt;template0&lt;/code&gt; and &lt;code&gt;template1&lt;/code&gt; should always be marked with &lt;code&gt;datistemplate = true&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ba8214ba00d79461864d0001c2912a5c18b7b9a" translate="yes" xml:space="preserve">
          <source>Two-phase commit commands - &lt;code&gt;PREPARE TRANSACTION&lt;/code&gt;, &lt;code&gt;COMMIT PREPARED&lt;/code&gt;, &lt;code&gt;ROLLBACK PREPARED&lt;/code&gt; because even read-only transactions need to write WAL in the prepare phase (the first phase of two phase commit).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3deb7456519697ecf4eefc455516c969a3681bae" translate="yes" xml:space="preserve">
          <source>Type</source>
          <target state="translated">Type</target>
        </trans-unit>
        <trans-unit id="caa2352205156323130852be37f36d8839e386c6" translate="yes" xml:space="preserve">
          <source>Type &lt;code&gt;ltree&lt;/code&gt; has the usual comparison operators &lt;code&gt;=&lt;/code&gt;, &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;=&lt;/code&gt;, &lt;code&gt;&amp;gt;=&lt;/code&gt;. Comparison sorts in the order of a tree traversal, with the children of a node sorted by label text. In addition, the specialized operators shown in &lt;a href=&quot;ltree#LTREE-OP-TABLE&quot;&gt;Table F.13&lt;/a&gt; are available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e1573953474c6c0a25673b1f064154b46a8a93e" translate="yes" xml:space="preserve">
          <source>Type Conversion</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f621c80a40b4c3bb2242b9a8d5ab32c97b28181" translate="yes" xml:space="preserve">
          <source>Type modifier input function, or 0 if type does not support modifiers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49427798b611e70520545325588242b32904d7b8" translate="yes" xml:space="preserve">
          <source>Type modifier output function, or 0 to use the standard format</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13f4f7c42905c25fa5436f830df968dd5cfd652c" translate="yes" xml:space="preserve">
          <source>Type of connection</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a864d40476979903a17a15ee7653201ddd8043f" translate="yes" xml:space="preserve">
          <source>Type of current backend. Possible types are &lt;code&gt;autovacuum launcher&lt;/code&gt;, &lt;code&gt;autovacuum worker&lt;/code&gt;, &lt;code&gt;logical replication launcher&lt;/code&gt;, &lt;code&gt;logical replication worker&lt;/code&gt;, &lt;code&gt;parallel worker&lt;/code&gt;, &lt;code&gt;background writer&lt;/code&gt;, &lt;code&gt;client backend&lt;/code&gt;, &lt;code&gt;checkpointer&lt;/code&gt;, &lt;code&gt;startup&lt;/code&gt;, &lt;code&gt;walreceiver&lt;/code&gt;, &lt;code&gt;walsender&lt;/code&gt; and &lt;code&gt;walwriter&lt;/code&gt;. In addition, background workers registered by extensions may have additional types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c82ff0d03f044b1bc03e6d585b2bc9ad0f83dd9c" translate="yes" xml:space="preserve">
          <source>Type of data stored in index, or zero if same as &lt;code&gt;opcintype&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4055eb85cfd66c39ef30f33fb4b4a5d50d592112" translate="yes" xml:space="preserve">
          <source>Type of object this entry is for: &lt;code&gt;r&lt;/code&gt; = relation (table, view), &lt;code&gt;S&lt;/code&gt; = sequence, &lt;code&gt;f&lt;/code&gt; = function, &lt;code&gt;T&lt;/code&gt; = type, &lt;code&gt;n&lt;/code&gt; = schema</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6f5ec2f1c5458817693d6d76b369073909c045e" translate="yes" xml:space="preserve">
          <source>Type of the SQL/JSON item</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00a9fa45d41b5ea65aa7f18aa2626b820f2f9cef" translate="yes" xml:space="preserve">
          <source>Type of the left operand</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="767fb9969a4cc64a16553ca389e0f0b5a4e5c458" translate="yes" xml:space="preserve">
          <source>Type of the lockable object: &lt;code&gt;relation&lt;/code&gt;, &lt;code&gt;extend&lt;/code&gt;, &lt;code&gt;page&lt;/code&gt;, &lt;code&gt;tuple&lt;/code&gt;, &lt;code&gt;transactionid&lt;/code&gt;, &lt;code&gt;virtualxid&lt;/code&gt;, &lt;code&gt;object&lt;/code&gt;, &lt;code&gt;userlock&lt;/code&gt;, or &lt;code&gt;advisory&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="727af93962dbd00f156d10d2619e6fe4d2766070" translate="yes" xml:space="preserve">
          <source>Type of the result</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b171dbb72682b90735ae1019128b1fa8fc68223" translate="yes" xml:space="preserve">
          <source>Type of the right operand</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="886a7edda3ba752fafb210f2d1fc042903763b8a" translate="yes" xml:space="preserve">
          <source>Type of the server (optional)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b84c44ea065844d42eb4ff46ceca0a63ebb5fb0f" translate="yes" xml:space="preserve">
          <source>Typed Tables</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e36cf7838eed64c7c287419b5db638ff701a9f7" translate="yes" xml:space="preserve">
          <source>Typed tables implement a subset of the SQL standard. According to the standard, a typed table has columns corresponding to the underlying composite type as well as one other column that is the &amp;ldquo;self-referencing column&amp;rdquo;. PostgreSQL does not support self-referencing columns explicitly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5754e4191a491637e871b6ade422b1bcee16cbbf" translate="yes" xml:space="preserve">
          <source>Types of extended statistics enabled for this record</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30b55d03eac01f6040e3abe9feb9e154100f2081" translate="yes" xml:space="preserve">
          <source>Typical examples of an IPv4 address range specified this way are &lt;code&gt;172.20.143.89/32&lt;/code&gt; for a single host, or &lt;code&gt;172.20.143.0/24&lt;/code&gt; for a small network, or &lt;code&gt;10.6.0.0/16&lt;/code&gt; for a larger one. An IPv6 address range might look like &lt;code&gt;::1/128&lt;/code&gt; for a single host (in this case the IPv6 loopback address) or &lt;code&gt;fe80::7a31:c1ff:0000:0000/96&lt;/code&gt; for a small network. &lt;code&gt;0.0.0.0/0&lt;/code&gt; represents all IPv4 addresses, and &lt;code&gt;::0/0&lt;/code&gt; represents all IPv6 addresses. To specify a single host, use a mask length of 32 for IPv4 or 128 for IPv6. In a network address, do not omit trailing zeroes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ba7280f9a6416aff842d582d030dc0d547a8079" translate="yes" xml:space="preserve">
          <source>Typical examples would be:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3ae6c139f98be74a60c4eaf214c1269190843b0" translate="yes" xml:space="preserve">
          <source>Typical output from pgbench looks like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f215729680a38802cfd4b9559a7e299252d552b" translate="yes" xml:space="preserve">
          <source>Typical output from this plugin, used over the SQL logical decoding interface, might be:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d9380cc46b3004a735b71b1ddc5769ac9cc9d80" translate="yes" xml:space="preserve">
          <source>Typically a role being used as a group would not have the &lt;code&gt;LOGIN&lt;/code&gt; attribute, though you can set it if you wish.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c79e0bb5747a47177b68165db0b8e29d1e90432" translate="yes" xml:space="preserve">
          <source>Typically an &lt;code&gt;UPDATE&lt;/code&gt; command also needs to read data from columns in the relation being updated (e.g., in a &lt;code&gt;WHERE&lt;/code&gt; clause or a &lt;code&gt;RETURNING&lt;/code&gt; clause, or in an expression on the right hand side of the &lt;code&gt;SET&lt;/code&gt; clause). In this case, &lt;code&gt;SELECT&lt;/code&gt; rights are also required on the relation being updated, and the appropriate &lt;code&gt;SELECT&lt;/code&gt; or &lt;code&gt;ALL&lt;/code&gt; policies will be applied in addition to the &lt;code&gt;UPDATE&lt;/code&gt; policies. Thus the user must have access to the row(s) being updated through a &lt;code&gt;SELECT&lt;/code&gt; or &lt;code&gt;ALL&lt;/code&gt; policy in addition to being granted permission to update the row(s) via an &lt;code&gt;UPDATE&lt;/code&gt; or &lt;code&gt;ALL&lt;/code&gt; policy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a5dff53d37ef582f6443160c6077ab3c024f6ad" translate="yes" xml:space="preserve">
          <source>Typically libraries like libpq only add new functionality, again unless mentioned in the release notes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d506067679b9e62e7a37578f7129dcc3d999cc58" translate="yes" xml:space="preserve">
          <source>Typically this includes new SQL command capabilities and not changes in behavior, unless specifically mentioned in the release notes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3822092fc5f3e669e643e30f8ce5e23c88a10d9c" translate="yes" xml:space="preserve">
          <source>Typically weights are used to mark words from special areas of the document, like the title or an initial abstract, so they can be treated with more or less importance than words in the document body.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75ec6d184c198c058b18b104c2264bc1718aff70" translate="yes" xml:space="preserve">
          <source>UNION, CASE, and Related Constructs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e85ec09bfd030dc1a5734a458795c226244fc313" translate="yes" xml:space="preserve">
          <source>UNLISTEN</source>
          <target state="translated">UNLISTEN</target>
        </trans-unit>
        <trans-unit id="4e75e16efe1381bdf958afc52921070dcac9674c" translate="yes" xml:space="preserve">
          <source>UNLISTEN &amp;mdash; stop listening for a notification</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e42fbf3248836a2bda1822a0f26f66440fa0c899" translate="yes" xml:space="preserve">
          <source>UPC &amp;lt;=&amp;gt; EAN13</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ea457eae40d594e81201972c4abd897fed37408" translate="yes" xml:space="preserve">
          <source>UPC numbers are a subset of the EAN13 numbers (they are basically EAN13 without the first &lt;code&gt;0&lt;/code&gt; digit).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52c6c1812015585dc1092393a1f244f60d68c60a" translate="yes" xml:space="preserve">
          <source>UPDATE</source>
          <target state="translated">UPDATE</target>
        </trans-unit>
        <trans-unit id="391f048e928d94ac0bc9a0124d925ff0ab247d37" translate="yes" xml:space="preserve">
          <source>UPDATE &amp;mdash; update rows of a table</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e2d9b0777a485c1276de0803c12a7d76fbc5c39" translate="yes" xml:space="preserve">
          <source>URL</source>
          <target state="translated">URL</target>
        </trans-unit>
        <trans-unit id="5bc5065b4243467de49ffd6feb4dc052247ba467" translate="yes" xml:space="preserve">
          <source>URL locations can be canonicalized to make equivalent URLs match:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e1156d91b64895766702da1dac1a03bdacc18d8" translate="yes" xml:space="preserve">
          <source>URL path</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdfd4d8d6952777c39403b2d2e2f8a2a52bf255f" translate="yes" xml:space="preserve">
          <source>UTC</source>
          <target state="translated">UTC</target>
        </trans-unit>
        <trans-unit id="618f65101275eae124d9a7c9c7a5431c588e88d8" translate="yes" xml:space="preserve">
          <source>UTF</source>
          <target state="translated">UTF</target>
        </trans-unit>
        <trans-unit id="006a48ffb6b1c6d449c6f984e56102797a110071" translate="yes" xml:space="preserve">
          <source>UTF-8 (8-bit UCS/Unicode Transformation Format) is defined here.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fa9ad7f9065e92883a9407e908d043b05c218a2" translate="yes" xml:space="preserve">
          <source>UTF8</source>
          <target state="translated">UTF8</target>
        </trans-unit>
        <trans-unit id="21bf75a5255af008f6315cb6aca4bb3bdccee521" translate="yes" xml:space="preserve">
          <source>UUID</source>
          <target state="translated">UUID</target>
        </trans-unit>
        <trans-unit id="0b3aa0aafa91ea5c6d6154167ed0f9530a1ec26c" translate="yes" xml:space="preserve">
          <source>UUID Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbfa247ab63ebe054b1f625efaac8d7d2ed2786f" translate="yes" xml:space="preserve">
          <source>Unconditionally trace locks on this table (OID).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a26494bd46f598c2d3b286cc32f8f8da4c3c529" translate="yes" xml:space="preserve">
          <source>Undo that, restoring whatever setting was effective in &lt;code&gt;postgresql.conf&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d82f20269a7ba351c65d96d467573f44ed2241db" translate="yes" xml:space="preserve">
          <source>Undo the above, so that subsequently-created tables won't have any more permissions than normal:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69537adb0c6a954242641822e574baa70cf65b67" translate="yes" xml:space="preserve">
          <source>Unexpected results might be obtained if a &lt;code&gt;cache&lt;/code&gt; setting greater than one is used for a sequence object that will be used concurrently by multiple sessions. Each session will allocate and cache successive sequence values during one access to the sequence object and increase the sequence object's &lt;code&gt;last_value&lt;/code&gt; accordingly. Then, the next &lt;code&gt;cache&lt;/code&gt;-1 uses of &lt;code&gt;nextval&lt;/code&gt; within that session simply return the preallocated values without touching the sequence object. So, any numbers allocated but not used within a session will be lost when that session ends, resulting in &amp;ldquo;holes&amp;rdquo; in the sequence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bac601add3bc88ae7a8e23e81f98747db513fcef" translate="yes" xml:space="preserve">
          <source>Unfortunately, there is no well-defined method for determining ideal values for the cost variables. They are best treated as averages over the entire mix of queries that a particular installation will receive. This means that changing them on the basis of just a few experiments is very risky.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5477f70b1eea785630b35cd84e386522cded5715" translate="yes" xml:space="preserve">
          <source>Unicode Transformation Format</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8de2de87fc64e84d8c1aa641cad76e717bc7b29c" translate="yes" xml:space="preserve">
          <source>Unicode, 8-bit</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93a858d6fa1dc81e7eaad3250789d05cb036b8fa" translate="yes" xml:space="preserve">
          <source>Unified Hangul Code</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67ef7a3b2dde1ee8d6d2f80347f89266789839b9" translate="yes" xml:space="preserve">
          <source>Uniform Resource Locator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86a932dd65a48b174d2aada36f1bfffd412deac8" translate="yes" xml:space="preserve">
          <source>Unique Indexes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4e5e39c7a8efbcd5a2b7282c47950080c8841cd" translate="yes" xml:space="preserve">
          <source>Unique constraints and primary keys are not inherited in the current implementation. This makes the combination of inheritance and unique constraints rather dysfunctional.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a46827700fc4ef4d046ba4ec7203d49efc58d66f" translate="yes" xml:space="preserve">
          <source>Unique constraints ensure that the data contained in a column, or a group of columns, is unique among all the rows in the table. The syntax is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9aef8c8c0041d90e74399130137479516c8ba5f" translate="yes" xml:space="preserve">
          <source>Unique constraints on partitioned tables must include all the partition key columns. This limitation exists because PostgreSQL can only enforce uniqueness in each partition individually.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ef954009038fb621257b004ec6cd8cd826ed58e" translate="yes" xml:space="preserve">
          <source>Unique prefixes of these strings are also accepted, for example &lt;code&gt;t&lt;/code&gt; or &lt;code&gt;n&lt;/code&gt;. Leading or trailing whitespace is ignored, and case does not matter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f49788f44915bd3a94e16e6f26e2424dc403e286" translate="yes" xml:space="preserve">
          <source>Universal Product Codes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3357a0d067580c052d7ebc854b226e0d5262199" translate="yes" xml:space="preserve">
          <source>Universally Unique Identifier</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49e71ce661ccc6dfcd03e849d0ea4cd3cac1c011" translate="yes" xml:space="preserve">
          <source>Unix System V</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="356c3f979b3eb09e01dc5a248ce81de4df5a2076" translate="yes" xml:space="preserve">
          <source>Unix-like operating systems enforce various kinds of resource limits that might interfere with the operation of your PostgreSQL server. Of particular importance are limits on the number of processes per user, the number of open files per process, and the amount of memory available to each process. Each of these have a &amp;ldquo;hard&amp;rdquo; and a &amp;ldquo;soft&amp;rdquo; limit. The soft limit is what actually counts but it can be changed by the user up to the hard limit. The hard limit can only be changed by the root user. The system call &lt;code&gt;setrlimit&lt;/code&gt; is responsible for setting these parameters. The shell's built-in command &lt;code&gt;ulimit&lt;/code&gt; (Bourne shells) or &lt;code&gt;limit&lt;/code&gt; (csh) is used to control the resource limits from the command line. On BSD-derived systems the file &lt;code&gt;/etc/login.conf&lt;/code&gt; controls the various resource limits set during login. See the operating system documentation for details. The relevant parameters are &lt;code&gt;maxproc&lt;/code&gt;, &lt;code&gt;openfiles&lt;/code&gt;, and &lt;code&gt;datasize&lt;/code&gt;. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a738963ffda0371927d9ea96b648a8947fa84b5" translate="yes" xml:space="preserve">
          <source>Unless &lt;code&gt;WITH HOLD&lt;/code&gt; is specified, the cursor created by this command can only be used within the current transaction. Thus, &lt;code&gt;DECLARE&lt;/code&gt; without &lt;code&gt;WITH HOLD&lt;/code&gt; is useless outside a transaction block: the cursor would survive only to the completion of the statement. Therefore PostgreSQL reports an error if such a command is used outside a transaction block. Use &lt;a href=&quot;sql-begin&quot;&gt;BEGIN&lt;/a&gt; and &lt;a href=&quot;sql-commit&quot;&gt;COMMIT&lt;/a&gt; (or &lt;a href=&quot;sql-rollback&quot;&gt;ROLLBACK&lt;/a&gt;) to define a transaction block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f36df6a348af57e59d7545a3e535407a26fb9186" translate="yes" xml:space="preserve">
          <source>Unless it is passed an &lt;code&gt;-X&lt;/code&gt; option, psql attempts to read and execute commands from the system-wide startup file (&lt;code&gt;psqlrc&lt;/code&gt;) and then the user's personal startup file (&lt;code&gt;~/.psqlrc&lt;/code&gt;), after connecting to the database but before accepting normal commands. These files can be used to set up the client and/or the server to taste, typically with &lt;code&gt;\set&lt;/code&gt; and &lt;code&gt;SET&lt;/code&gt; commands.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ebac9c6005801410e118c32c680d55ed8b8c195" translate="yes" xml:space="preserve">
          <source>Unlike &lt;a href=&quot;runtime-config-client#GUC-SHARED-PRELOAD-LIBRARIES&quot;&gt;shared_preload_libraries&lt;/a&gt;, there is no large performance advantage to loading a library at session start rather than when it is first used. There is some advantage, however, when connection pooling is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36f97215c9ceadf639797c9ff18cfda7e2adaae5" translate="yes" xml:space="preserve">
          <source>Unlike &lt;code&gt;INHERITS&lt;/code&gt;, the new table and original table are completely decoupled after creation is complete. Changes to the original table will not be applied to the new table, and it is not possible to include data of the new table in scans of the original table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="155a510971d12c46f75bfa7a5024bf809f98a32b" translate="yes" xml:space="preserve">
          <source>Unlike &lt;code&gt;statement_timeout&lt;/code&gt;, this timeout can only occur while waiting for locks. Note that if &lt;code&gt;statement_timeout&lt;/code&gt; is nonzero, it is rather pointless to set &lt;code&gt;lock_timeout&lt;/code&gt; to the same or larger value, since the statement timeout would always trigger first. If &lt;code&gt;log_min_error_statement&lt;/code&gt; is set to &lt;code&gt;ERROR&lt;/code&gt; or lower, the statement that timed out will be logged.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01f67f25338b64081817dcfc5c06974c9678164c" translate="yes" xml:space="preserve">
          <source>Unlike an XQuery/XPath sequence, which can contain any desired items in any desired order, an XPath 1.0 node-set has no guaranteed order and, like any set, does not allow multiple appearances of the same item.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bd39bd8bedec3e142d1db4767a229ec44898026" translate="yes" xml:space="preserve">
          <source>Unlike most other meta-commands, the entire remainder of the line is always taken to be the argument(s) of &lt;code&gt;\!&lt;/code&gt;, and neither variable interpolation nor backquote expansion are performed in the arguments. The rest of the line is simply passed literally to the shell.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f03bc80a9071747274c116c1e2637b147c1236d6" translate="yes" xml:space="preserve">
          <source>Unlike most other meta-commands, the entire remainder of the line is always taken to be the argument(s) of &lt;code&gt;\ef&lt;/code&gt;, and neither variable interpolation nor backquote expansion are performed in the arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ad59f5d51ac2d51e40eadad80e70c35b9563ffa" translate="yes" xml:space="preserve">
          <source>Unlike most other meta-commands, the entire remainder of the line is always taken to be the argument(s) of &lt;code&gt;\ev&lt;/code&gt;, and neither variable interpolation nor backquote expansion are performed in the arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="969a2dc5b4f67a3964fc411e75789aab5f823e51" translate="yes" xml:space="preserve">
          <source>Unlike most other meta-commands, the entire remainder of the line is always taken to be the argument(s) of &lt;code&gt;\help&lt;/code&gt;, and neither variable interpolation nor backquote expansion are performed in the arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bcb7b9bd68e7cf599cb0566f121f159d3638a90" translate="yes" xml:space="preserve">
          <source>Unlike most other meta-commands, the entire remainder of the line is always taken to be the argument(s) of &lt;code&gt;\sf&lt;/code&gt;, and neither variable interpolation nor backquote expansion are performed in the arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3d8189c59a9d485c225bb21085a7dacfbf70328" translate="yes" xml:space="preserve">
          <source>Unlike most other meta-commands, the entire remainder of the line is always taken to be the argument(s) of &lt;code&gt;\sv&lt;/code&gt;, and neither variable interpolation nor backquote expansion are performed in the arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af5b4f9ec65cdc48545903249d2323c25ceebafa" translate="yes" xml:space="preserve">
          <source>Unlike most system catalogs, &lt;code&gt;pg_database&lt;/code&gt; is shared across all databases of a cluster: there is only one copy of &lt;code&gt;pg_database&lt;/code&gt; per cluster, not one per database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4e709aa40757d88375a6ee47a77d6e0698e4303" translate="yes" xml:space="preserve">
          <source>Unlike most system catalogs, &lt;code&gt;pg_db_role_setting&lt;/code&gt; is shared across all databases of a cluster: there is only one copy of &lt;code&gt;pg_db_role_setting&lt;/code&gt; per cluster, not one per database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2dbf1c1060e2c0aacae52353ec7fcd45b3ccceac" translate="yes" xml:space="preserve">
          <source>Unlike most system catalogs, &lt;code&gt;pg_pltemplate&lt;/code&gt; is shared across all databases of a cluster: there is only one copy of &lt;code&gt;pg_pltemplate&lt;/code&gt; per cluster, not one per database. This allows the information to be accessible in each database as it is needed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90ff2576b542214d688a9eed4987d1a4510c063b" translate="yes" xml:space="preserve">
          <source>Unlike most system catalogs, &lt;code&gt;pg_replication_origin&lt;/code&gt; is shared across all databases of a cluster: there is only one copy of &lt;code&gt;pg_replication_origin&lt;/code&gt; per cluster, not one per database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="091dfd81e1c158b99b74cd5401b694679d3d2a31" translate="yes" xml:space="preserve">
          <source>Unlike most system catalogs, &lt;code&gt;pg_shdepend&lt;/code&gt; is shared across all databases of a cluster: there is only one copy of &lt;code&gt;pg_shdepend&lt;/code&gt; per cluster, not one per database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1cd5b470b7693ec3b4e72d1482e8ab6f1102fe7" translate="yes" xml:space="preserve">
          <source>Unlike most system catalogs, &lt;code&gt;pg_shdescription&lt;/code&gt; is shared across all databases of a cluster: there is only one copy of &lt;code&gt;pg_shdescription&lt;/code&gt; per cluster, not one per database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45f9981f7d01238e6386247ed7e8c9b367559cb4" translate="yes" xml:space="preserve">
          <source>Unlike most system catalogs, &lt;code&gt;pg_shseclabel&lt;/code&gt; is shared across all databases of a cluster: there is only one copy of &lt;code&gt;pg_shseclabel&lt;/code&gt; per cluster, not one per database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eec8ee0cfbfbe1f6f908ff68c376680c64650f41" translate="yes" xml:space="preserve">
          <source>Unlike most system catalogs, &lt;code&gt;pg_subscription&lt;/code&gt; is shared across all databases of a cluster: there is only one copy of &lt;code&gt;pg_subscription&lt;/code&gt; per cluster, not one per database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b07b56a669f78b6086b457c5748686a76e734e9" translate="yes" xml:space="preserve">
          <source>Unlike most system catalogs, &lt;code&gt;pg_tablespace&lt;/code&gt; is shared across all databases of a cluster: there is only one copy of &lt;code&gt;pg_tablespace&lt;/code&gt; per cluster, not one per database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92c63faeedbf5e16bc5b93cceba5f7d683c79fc1" translate="yes" xml:space="preserve">
          <source>Unlike the WAL receiver of a PostgreSQL standby server, pg_receivewal by default flushes WAL data only when a WAL file is closed. The option &lt;code&gt;--synchronous&lt;/code&gt; must be specified to flush WAL data in real time. Since pg_receivewal does not apply WAL, you should not allow it to become a synchronous standby when &lt;a href=&quot;runtime-config-wal#GUC-SYNCHRONOUS-COMMIT&quot;&gt;synchronous_commit&lt;/a&gt; equals &lt;code&gt;remote_apply&lt;/code&gt;. If it does, it will appear to be a standby that never catches up, and will cause transaction commits to block. To avoid this, you should either configure an appropriate value for &lt;a href=&quot;runtime-config-replication#GUC-SYNCHRONOUS-STANDBY-NAMES&quot;&gt;synchronous_standby_names&lt;/a&gt;, or specify &lt;code&gt;application_name&lt;/code&gt; for pg_receivewal that does not match it, or change the value of &lt;code&gt;synchronous_commit&lt;/code&gt; to something other than &lt;code&gt;remote_apply&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="209b27f026f1a4e49e27f779263f8527ec3c4bc5" translate="yes" xml:space="preserve">
          <source>Unlike the case when adding a constraint to a regular table, nothing is done to verify the constraint is correct; rather, this action simply declares that some new condition should be assumed to hold for all rows in the foreign table. (See the discussion in &lt;a href=&quot;sql-createforeigntable&quot;&gt;CREATE FOREIGN TABLE&lt;/a&gt;.) If the constraint is marked &lt;code&gt;NOT VALID&lt;/code&gt;, then it isn't assumed to hold, but is only recorded for possible future use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e0b1d236f8fe0f3fb7bccf02c7559e609f29c15" translate="yes" xml:space="preserve">
          <source>Unlike the case with privileges, membership in a role cannot be granted to &lt;code&gt;PUBLIC&lt;/code&gt;. Note also that this form of the command does not allow the noise word &lt;code&gt;GROUP&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d61210b660dd2a2ba353539f0d486b1b1e1ca0f9" translate="yes" xml:space="preserve">
          <source>Unlike the standard C function &lt;code&gt;sprintf&lt;/code&gt;, PostgreSQL's &lt;code&gt;format&lt;/code&gt; function allows format specifiers with and without &lt;code&gt;position&lt;/code&gt; fields to be mixed in the same format string. A format specifier without a &lt;code&gt;position&lt;/code&gt; field always uses the next argument after the last argument consumed. In addition, the &lt;code&gt;format&lt;/code&gt; function does not require all function arguments to be used in the format string. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b45f16ac00bccd2d97ad31eb4586a8a733d1ed1a" translate="yes" xml:space="preserve">
          <source>Unsets (deletes) the psql variable &lt;code&gt;name&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b27e09825b38c1619e31484868bfeb48e96d8d2" translate="yes" xml:space="preserve">
          <source>Unsigned integer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50b79815e623c9d659af2f6f4f16ea14ba889265" translate="yes" xml:space="preserve">
          <source>Unused column contain zeroes. For example, &lt;code&gt;oprleft&lt;/code&gt; is zero for a prefix operator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2038bdec9210202d0d9d74839e3925ff0cd91ba1" translate="yes" xml:space="preserve">
          <source>Up</source>
          <target state="translated">Up</target>
        </trans-unit>
        <trans-unit id="d7530c6545fdfa9b651c7e47222acdb144b78573" translate="yes" xml:space="preserve">
          <source>Updatable Views</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f08e7604a29958aee71de0f6521d5ea65d07570" translate="yes" xml:space="preserve">
          <source>Update &lt;code&gt;autoprewarm.blocks&lt;/code&gt; immediately. This may be useful if the autoprewarm worker is not running but you anticipate running it after the next restart. The return value is the number of records written to &lt;code&gt;autoprewarm.blocks&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd357ab63dd67dab2769f9aad042acbec503d583" translate="yes" xml:space="preserve">
          <source>Update a pre-9.1 installation of &lt;code&gt;hstore&lt;/code&gt; into extension style:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="155fdafe50a3b57765513f60c5758d6496a123b2" translate="yes" xml:space="preserve">
          <source>Update contact names in an accounts table to match the currently assigned salesmen:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a54b58d6201c8e67be3e5d043168cab0aaf4bd7b" translate="yes" xml:space="preserve">
          <source>Update statistics in a summary table to match the current data:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a72e347972a409d75e922a98a8cb86184a8c091e" translate="yes" xml:space="preserve">
          <source>Update the collation's version. See &lt;a href=&quot;sql-altercollation#SQL-ALTERCOLLATION-NOTES&quot;&gt;Notes&lt;/a&gt; below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="886aa2619ee6c1b5dcabc291df392328e61fad29" translate="yes" xml:space="preserve">
          <source>Update the sequence value after a &lt;code&gt;COPY FROM&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40cf1fe41c48155dea09e4ac1106c72553cfd43c" translate="yes" xml:space="preserve">
          <source>Updates statistics used by the planner to determine the most efficient way to execute a query.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd8ce06e479993fd7940ea48abaafb1c49415931" translate="yes" xml:space="preserve">
          <source>Updating Data</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbfacc342802549d59dc86ad3b2d308cd32c8b65" translate="yes" xml:space="preserve">
          <source>Updating a GIN index tends to be slow because of the intrinsic nature of inverted indexes: inserting or updating one heap row can cause many inserts into the index (one for each key extracted from the indexed item). As of PostgreSQL 8.4, GIN is capable of postponing much of this work by inserting new tuples into a temporary, unsorted list of pending entries. When the table is vacuumed or autoanalyzed, or when &lt;code&gt;gin_clean_pending_list&lt;/code&gt; function is called, or if the pending list becomes larger than &lt;a href=&quot;runtime-config-client#GUC-GIN-PENDING-LIST-LIMIT&quot;&gt;gin_pending_list_limit&lt;/a&gt;, the entries are moved to the main GIN data structure using the same bulk insert techniques used during initial index creation. This greatly improves GIN index update speed, even counting the additional vacuum overhead. Moreover the overhead work can be done by a background process instead of in foreground query processing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5a2d3257a7cb0893d951688c3d6595c16276249" translate="yes" xml:space="preserve">
          <source>Updating the partition key of a row might cause it to be moved into a different partition where this row satisfies the partition bounds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf5d0b369531663af264541c44e93e18c3ec6ca5" translate="yes" xml:space="preserve">
          <source>Upgrading a PostgreSQL Cluster</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="953812b4543e49a3e367bde451848478a686a885" translate="yes" xml:space="preserve">
          <source>Upgrading a PostgreSQL Cluster: Upgrading Data via Replication</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a87484838982cc6d197b8aae2ccdf6a9936eca6" translate="yes" xml:space="preserve">
          <source>Upgrading a PostgreSQL Cluster: Upgrading Data via pg_dumpall</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="725bfd4bce7d201deda730473db6dfc713d4524b" translate="yes" xml:space="preserve">
          <source>Upgrading a PostgreSQL Cluster: Upgrading Data via pg_upgrade</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b80cb33cf9b567178f3f5855946aac8c80e285f" translate="yes" xml:space="preserve">
          <source>Upon creation, a constraint is given one of three characteristics: &lt;code&gt;DEFERRABLE INITIALLY DEFERRED&lt;/code&gt;, &lt;code&gt;DEFERRABLE INITIALLY IMMEDIATE&lt;/code&gt;, or &lt;code&gt;NOT DEFERRABLE&lt;/code&gt;. The third class is always &lt;code&gt;IMMEDIATE&lt;/code&gt; and is not affected by the &lt;code&gt;SET CONSTRAINTS&lt;/code&gt; command. The first two classes start every transaction in the indicated mode, but their behavior can be changed within a transaction by &lt;code&gt;SET CONSTRAINTS&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d7a654640c2b50b3e7df60aeeabb5b08422ed24" translate="yes" xml:space="preserve">
          <source>Upper Limit</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">Usage</target>
        </trans-unit>
        <trans-unit id="b4f04a10cb842d23a6e0c14dfb525ccfc19a7eeb" translate="yes" xml:space="preserve">
          <source>Usage notes for date/time formatting:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c18762bb9fd2f772e7a3cc1038dad6521a3cdc73" translate="yes" xml:space="preserve">
          <source>Usage notes for numeric formatting:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c17fd067f164433138f454d194adc8307cae8bca" translate="yes" xml:space="preserve">
          <source>Usage of &lt;em&gt;edge recombination crossover&lt;/em&gt; which is especially suited to keep edge losses low for the solution of the TSP by means of a GA;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cb6064dc167ff3a0e3b42195a78e15770baa73c" translate="yes" xml:space="preserve">
          <source>Usage of a &lt;em&gt;steady state&lt;/em&gt; GA (replacement of the least fit individuals in a population, not whole-generational replacement) allows fast convergence towards improved query plans. This is essential for query handling with reasonable time;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc32adaef16ee6908ebadfca82b7126506f9473f" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;app-psql&quot;&gt;psql&lt;/a&gt;'s &lt;code&gt;\ddp&lt;/code&gt; command to obtain information about existing assignments of default privileges. The meaning of the privilege display is the same as explained for &lt;code&gt;\dp&lt;/code&gt; in &lt;a href=&quot;ddl-priv&quot;&gt;Section 5.7&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ba1f539905474c7406568a7a7f9b3f0d11b5735" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;sql-alterrole&quot;&gt;ALTER ROLE&lt;/a&gt; to change the attributes of a role, and &lt;a href=&quot;sql-droprole&quot;&gt;DROP ROLE&lt;/a&gt; to remove a role. All the attributes specified by &lt;code&gt;CREATE ROLE&lt;/code&gt; can be modified by later &lt;code&gt;ALTER ROLE&lt;/code&gt; commands.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7488ebe056d7926158f410bc5c4336c809c61a3" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;sql-call&quot;&gt;CALL&lt;/a&gt; to execute a procedure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63fbf455d11c44c5877b87a971f27977e59c85ca" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;sql-commit&quot;&gt;COMMIT&lt;/a&gt; or &lt;a href=&quot;sql-rollback&quot;&gt;ROLLBACK&lt;/a&gt; to terminate a transaction block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa95bc5e0df28b02065365fe45c3e1b0d1eafbd6" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;sql-commit&quot;&gt;COMMIT&lt;/a&gt; to successfully terminate a transaction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66e6213ccf4796834fff65a2132381a6fc00d716" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;sql-copy&quot;&gt;COPY&lt;/a&gt; to load all the rows in one command, instead of using a series of &lt;code&gt;INSERT&lt;/code&gt; commands. The &lt;code&gt;COPY&lt;/code&gt; command is optimized for loading large numbers of rows; it is less flexible than &lt;code&gt;INSERT&lt;/code&gt;, but incurs significantly less overhead for large data loads. Since &lt;code&gt;COPY&lt;/code&gt; is a single command, there is no need to disable autocommit if you use this method to populate a table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09047c3a617e15ed6b5d857521bdd8e734e0300e" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;sql-createrole&quot;&gt;CREATE ROLE&lt;/a&gt; to add new roles, and &lt;a href=&quot;sql-droprole&quot;&gt;DROP ROLE&lt;/a&gt; to remove a role.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b4d3d6618c9949a9ad76ab0ddb5874169d923d3" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;sql-dropcast&quot;&gt;DROP CAST&lt;/a&gt; to remove user-defined casts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f593b5e915433730446b465706be5f4af789f7c8" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;sql-dropdatabase&quot;&gt;DROP DATABASE&lt;/a&gt; to remove a database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6d31dd4270e5743088ace63fb2eb93db009e693" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;sql-dropindex&quot;&gt;DROP INDEX&lt;/a&gt; to remove an index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c243eaa6db16e01a7e2d96464804f5badfa4a886" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;sql-droplanguage&quot;&gt;DROP LANGUAGE&lt;/a&gt; to drop procedural languages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="611b170ec13c2b52270c3dae6f1ab02cf82d138c" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;sql-dropoperator&quot;&gt;DROP OPERATOR&lt;/a&gt; to delete user-defined operators from a database. Use &lt;a href=&quot;sql-alteroperator&quot;&gt;ALTER OPERATOR&lt;/a&gt; to modify operators in a database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58497b86e7746a484024506bf39de0e9955831f3" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;sql-droptransform&quot;&gt;DROP TRANSFORM&lt;/a&gt; to remove transforms.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b075359ef1491da7c72c666849ad06ca28042837" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;sql-droptrigger&quot;&gt;DROP TRIGGER&lt;/a&gt; to remove a trigger.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e27e35b2729f99b5a4d57cb1356ed22041def512" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;sql-release-savepoint&quot;&gt;RELEASE SAVEPOINT&lt;/a&gt; to destroy a savepoint without discarding the effects of commands executed after it was established.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54340c6db432893de03388140d111cf79cc5bd33" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;sql-rollback&quot;&gt;ROLLBACK&lt;/a&gt; to abort a transaction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b54ec80fcdd9c1cc0a780b0c3e10b24a114e978c" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;sql-rollback-to&quot;&gt;ROLLBACK TO SAVEPOINT&lt;/a&gt; to rollback to a savepoint. Use &lt;a href=&quot;sql-release-savepoint&quot;&gt;RELEASE SAVEPOINT&lt;/a&gt; to destroy a savepoint, keeping the effects of commands executed after it was established.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8f348396f663d6710748aac99721ad4f0c1192d" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;DROP COLLATION&lt;/code&gt; to remove user-defined collations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f84b3986ffc86a297e493d0aa18ef741b0d79725" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;DROP CONVERSION&lt;/code&gt; to remove user-defined conversions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff15db4e13f780cb214c1fb5755bb245ba8cdda8" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;DROP SEQUENCE&lt;/code&gt; to remove a sequence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15726e7944bcacfcfd9200215f0e42b66131bfdd" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;OUT&lt;/code&gt; parameters to define the return type implicitly. The same example could also be done this way:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67538321bf9a606c6338bda53e8523a0fee89c08" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;\lo_list&lt;/code&gt; to find out the large object's OID.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c1ddd9e45a36cc1cb06c4712dd45f333163ae53" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;separator&lt;/code&gt; as the field separator for unaligned output. This is equivalent to &lt;code&gt;\pset fieldsep&lt;/code&gt; or &lt;code&gt;\f&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f33f5b37daa8a924b75643b07be4642a71a3839" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;separator&lt;/code&gt; as the record separator for unaligned output. This is equivalent to &lt;code&gt;\pset recordsep&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5d5c3e044f569ed4a54b5c8b2aeebf1c2b6cc75" translate="yes" xml:space="preserve">
          <source>Use GSSAPI to authenticate the user. This is only available for TCP/IP connections. See &lt;a href=&quot;gssapi-auth&quot;&gt;Section 20.6&lt;/a&gt; for details. It can be used in conjunction with GSSAPI encryption.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aeb12709af5299bd1b78d1fc87510677adf5e4d9" translate="yes" xml:space="preserve">
          <source>Use SSPI to authenticate the user. This is only available on Windows. See &lt;a href=&quot;sspi-auth&quot;&gt;Section 20.7&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09a0b632c4471d6df190780101d005ba97319161" translate="yes" xml:space="preserve">
          <source>Use a &lt;code&gt;serializable&lt;/code&gt; transaction for the dump, to ensure that the snapshot used is consistent with later database states; but do this by waiting for a point in the transaction stream at which no anomalies can be present, so that there isn't a risk of the dump failing or causing other transactions to roll back with a &lt;code&gt;serialization_failure&lt;/code&gt;. See &lt;a href=&quot;https://www.postgresql.org/docs/12/mvcc.html&quot;&gt;Chapter 13&lt;/a&gt; for more information about transaction isolation and concurrency control.</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
