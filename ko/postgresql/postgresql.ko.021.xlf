<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="postgresql">
    <body>
      <group id="postgresql">
        <trans-unit id="529b5d98779f3a599ef6687154fe8084cc70faf2" translate="yes" xml:space="preserve">
          <source>pg_basebackup makes a binary copy of the database cluster files, while making sure the system is put in and out of backup mode automatically. Backups are always taken of the entire database cluster; it is not possible to back up individual databases or database objects. For individual database backups, a tool such as &lt;a href=&quot;app-pgdump&quot;&gt;pg_dump&lt;/a&gt; must be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="514864905a59f04cafc63fb115ff6c89ac46442c" translate="yes" xml:space="preserve">
          <source>pg_basebackup will preserve group permissions in both the &lt;code&gt;plain&lt;/code&gt; and &lt;code&gt;tar&lt;/code&gt; formats if group permissions are enabled on the source cluster.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5c0a45d584ad544772564f26127f5f7417699df" translate="yes" xml:space="preserve">
          <source>pg_basebackup works with servers of the same or an older major version, down to 9.1. However, WAL streaming mode (&lt;code&gt;-X stream&lt;/code&gt;) only works with server version 9.3 and later, and tar format mode (&lt;code&gt;--format=tar&lt;/code&gt;) of the current version only works with server version 9.5 or later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8acf563c6d1625620f15257a63efd86cebe4313" translate="yes" xml:space="preserve">
          <source>pg_buffercache</source>
          <target state="translated">pg_buffercache</target>
        </trans-unit>
        <trans-unit id="0ef4ea3aa256d585ec00df5a99879d369be85ddc" translate="yes" xml:space="preserve">
          <source>pg_checksums</source>
          <target state="translated">pg_checksums</target>
        </trans-unit>
        <trans-unit id="90ae66d70a624ae9b96be5b203ad12dc8e7d5d60" translate="yes" xml:space="preserve">
          <source>pg_checksums &amp;mdash; enable, disable or check data checksums in a PostgreSQL database cluster</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="813cc0376462b15e12355d4c4548e39a8d18f17d" translate="yes" xml:space="preserve">
          <source>pg_checksums checks, enables or disables data checksums in a PostgreSQL cluster. The server must be shut down cleanly before running pg_checksums. When verifying checksums, the exit status is zero if there are no checksum errors, and nonzero if at least one checksum failure is detected. When enabling or disabling checksums, the exit status is nonzero if the operation failed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5162f3429af1a80afacc7254235d05a6025e64e7" translate="yes" xml:space="preserve">
          <source>pg_config</source>
          <target state="translated">pg_config</target>
        </trans-unit>
        <trans-unit id="8073aa64da0eac2c81292a0bbb8ce41a0e7ed8ad" translate="yes" xml:space="preserve">
          <source>pg_config &amp;mdash; retrieve information about the installed version of PostgreSQL</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4e2f9e6b20f7fa1b0903cc040828b9640af4021" translate="yes" xml:space="preserve">
          <source>pg_controldata</source>
          <target state="translated">pg_controldata</target>
        </trans-unit>
        <trans-unit id="07b40a5b14c9b384ac8f11af731819d5a1551f54" translate="yes" xml:space="preserve">
          <source>pg_controldata &amp;mdash; display control information of a PostgreSQL database cluster</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0be30c91582acee8b973587f46378305af0cb5c" translate="yes" xml:space="preserve">
          <source>pg_ctl</source>
          <target state="translated">pg_ctl</target>
        </trans-unit>
        <trans-unit id="c85445e36f769fbbf11c683aeb1c9ab391ab69fe" translate="yes" xml:space="preserve">
          <source>pg_ctl &amp;mdash; initialize, start, stop, or control a PostgreSQL server</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29ba8cdfd9f0d2b0d68d584548245b17bf5288d3" translate="yes" xml:space="preserve">
          <source>pg_ctl examines this file in the data directory to determine whether the server is currently running.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b70ba2b76746357ee9da1bcb461f7befd1620bb" translate="yes" xml:space="preserve">
          <source>pg_ctl is a utility for initializing a PostgreSQL database cluster, starting, stopping, or restarting the PostgreSQL database server (&lt;a href=&quot;app-postgres&quot;&gt;postgres&lt;/a&gt;), or displaying the status of a running server. Although the server can be started manually, pg_ctl encapsulates tasks such as redirecting log output and properly detaching from the terminal and process group. It also provides convenient options for controlled shutdown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea826551b10fb6c5e564f99e7c4e25be3158639b" translate="yes" xml:space="preserve">
          <source>pg_dump</source>
          <target state="translated">pg_dump</target>
        </trans-unit>
        <trans-unit id="d8da13e92102bd85260ade5ff9c13d51ca40faef" translate="yes" xml:space="preserve">
          <source>pg_dump &amp;mdash; extract a PostgreSQL database into a script file or other archive file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8ea28acb24d80028b25ae201709e6bb00490da1" translate="yes" xml:space="preserve">
          <source>pg_dump and pg_dumpall do not produce file-system-level backups and cannot be used as part of a continuous-archiving solution. Such dumps are &lt;em&gt;logical&lt;/em&gt; and do not contain enough information to be used by WAL replay.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e47ad46f08cc11e1f2a426da16dbef9d16e18818" translate="yes" xml:space="preserve">
          <source>pg_dump dumps only a single database at a time, and it does not dump information about roles or tablespaces (because those are cluster-wide rather than per-database). To support convenient dumping of the entire contents of a database cluster, the &lt;a href=&quot;app-pg-dumpall&quot;&gt;pg_dumpall&lt;/a&gt; program is provided. pg_dumpall backs up each database in a given cluster, and also preserves cluster-wide data such as role and tablespace definitions. The basic usage of this command is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0154d094296b519cfc7459beede252e12c93fe9" translate="yes" xml:space="preserve">
          <source>pg_dump internally executes &lt;code&gt;SELECT&lt;/code&gt; statements. If you have problems running pg_dump, make sure you are able to select information from the database using, for example, &lt;a href=&quot;app-psql&quot;&gt;psql&lt;/a&gt;. Also, any default connection settings and environment variables used by the libpq front-end library will apply.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc054a0de3b70e851fabffa910222129ed95340c" translate="yes" xml:space="preserve">
          <source>pg_dump is a regular PostgreSQL client application (albeit a particularly clever one). This means that you can perform this backup procedure from any remote host that has access to the database. But remember that pg_dump does not operate with special permissions. In particular, it must have read access to all tables that you want to back up, so in order to back up the entire database you almost always have to run it as a database superuser. (If you do not have sufficient privileges to back up the entire database, you can still back up portions of the database to which you do have access using options such as &lt;code&gt;-n schema&lt;/code&gt; or &lt;code&gt;-t table&lt;/code&gt;.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="322f1ec764d24ca5c75f49cbfca0f5142b5381d7" translate="yes" xml:space="preserve">
          <source>pg_dump is a utility for backing up a PostgreSQL database. It makes consistent backups even if the database is being used concurrently. pg_dump does not block other users accessing the database (readers or writers).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9285b9852f91f9bf38ce8586513844d04b82de91" translate="yes" xml:space="preserve">
          <source>pg_dump only dumps a single database. To back up an entire cluster, or to back up global objects that are common to all databases in a cluster (such as roles and tablespaces), use &lt;a href=&quot;app-pg-dumpall&quot;&gt;pg_dumpall&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2a92aec7942642c03a7f7e44eb999c08afa7bae" translate="yes" xml:space="preserve">
          <source>pg_dump will open &lt;code&gt;njobs&lt;/code&gt; + 1 connections to the database, so make sure your &lt;a href=&quot;runtime-config-connection#GUC-MAX-CONNECTIONS&quot;&gt;max_connections&lt;/a&gt; setting is high enough to accommodate all connections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57a436913fcb30038b4168179b5f7bd99782c1b6" translate="yes" xml:space="preserve">
          <source>pg_dumpall</source>
          <target state="translated">pg_dumpall</target>
        </trans-unit>
        <trans-unit id="3579ff641791cc87ba3443578d0893e8f967308d" translate="yes" xml:space="preserve">
          <source>pg_dumpall &amp;mdash; extract a PostgreSQL database cluster into a script file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d9e15c0ba3f2c3a890f79cf69bfe7b4f89e81f1" translate="yes" xml:space="preserve">
          <source>pg_dumpall is a utility for writing out (&amp;ldquo;dumping&amp;rdquo;) all PostgreSQL databases of a cluster into one script file. The script file contains SQL commands that can be used as input to &lt;a href=&quot;app-psql&quot;&gt;psql&lt;/a&gt; to restore the databases. It does this by calling &lt;a href=&quot;app-pgdump&quot;&gt;pg_dump&lt;/a&gt; for each database in the cluster. pg_dumpall also dumps global objects that are common to all databases, that is, database roles and tablespaces. (pg_dump does not save these objects.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2503e589c33511a1a65bd54eb7a0dcc83e8ad567" translate="yes" xml:space="preserve">
          <source>pg_dumpall needs to connect several times to the PostgreSQL server (once per database). If you use password authentication it will ask for a password each time. It is convenient to have a &lt;code&gt;~/.pgpass&lt;/code&gt; file in such cases. See &lt;a href=&quot;https://www.postgresql.org/docs/12/libpq-pgpass.html&quot;&gt;Section 33.15&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="974bcea1e9898acafbb490060238b693f28c2cc4" translate="yes" xml:space="preserve">
          <source>pg_dumpall requires all needed tablespace directories to exist before the restore; otherwise, database creation will fail for databases in non-default locations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1dad65c3aac45f76a12712aa519b21363527f94" translate="yes" xml:space="preserve">
          <source>pg_dumpall works by emitting commands to re-create roles, tablespaces, and empty databases, then invoking pg_dump for each database. This means that while each database will be internally consistent, the snapshots of different databases are not synchronized.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="578edb4f43436295397597e57e832bbca8c9e27d" translate="yes" xml:space="preserve">
          <source>pg_execute_server_program</source>
          <target state="translated">pg_execute_server_program</target>
        </trans-unit>
        <trans-unit id="79ef7796e352e674bd306ff0a5433ea164b3ea6d" translate="yes" xml:space="preserve">
          <source>pg_freespacemap</source>
          <target state="translated">pg_freespacemap</target>
        </trans-unit>
        <trans-unit id="c3445e0d6cf1955fea5138d496261730712eca98" translate="yes" xml:space="preserve">
          <source>pg_hba.conf File</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6243f91ed5c8d268f7cf5a522cd0c13955153be" translate="yes" xml:space="preserve">
          <source>pg_isready</source>
          <target state="translated">pg_isready</target>
        </trans-unit>
        <trans-unit id="3e4613393d05f200ab7e38fba9819b80caeafcba" translate="yes" xml:space="preserve">
          <source>pg_isready &amp;mdash; check the connection status of a PostgreSQL server</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42c6a3314dc52f63b8f63f7950410b2aead89f72" translate="yes" xml:space="preserve">
          <source>pg_isready is a utility for checking the connection status of a PostgreSQL database server. The exit status specifies the result of the connection check.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f61c89ddb8129241f13a5c2059dc6cdcf68d836d" translate="yes" xml:space="preserve">
          <source>pg_isready returns &lt;code&gt;0&lt;/code&gt; to the shell if the server is accepting connections normally, &lt;code&gt;1&lt;/code&gt; if the server is rejecting connections (for example during startup), &lt;code&gt;2&lt;/code&gt; if there was no response to the connection attempt, and &lt;code&gt;3&lt;/code&gt; if no attempt was made (for example due to invalid parameters).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c089e765ee8d5f8d020c7c5e53128dda4a88cd81" translate="yes" xml:space="preserve">
          <source>pg_lsn</source>
          <target state="translated">pg_lsn</target>
        </trans-unit>
        <trans-unit id="916d0cf004c1a6325c661a9e22a82a1c57c4f72d" translate="yes" xml:space="preserve">
          <source>pg_lsn Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04db75756af42b2f9bb20ed5e8d8cc3abda15a5f" translate="yes" xml:space="preserve">
          <source>pg_monitor</source>
          <target state="translated">pg_monitor</target>
        </trans-unit>
        <trans-unit id="1e568301d754266eab1d7e428c19202117954bbb" translate="yes" xml:space="preserve">
          <source>pg_notify</source>
          <target state="translated">pg_notify</target>
        </trans-unit>
        <trans-unit id="0caa58cf689e0ddc74445101967dc7faa51dcdc3" translate="yes" xml:space="preserve">
          <source>pg_prewarm</source>
          <target state="translated">pg_prewarm</target>
        </trans-unit>
        <trans-unit id="a90d50f249d5bb779aed594463314495d73b87e3" translate="yes" xml:space="preserve">
          <source>pg_read_all_settings</source>
          <target state="translated">pg_read_all_settings</target>
        </trans-unit>
        <trans-unit id="ce40e10cf48163abe2e4467d9b8fefdd34e99d39" translate="yes" xml:space="preserve">
          <source>pg_read_all_stats</source>
          <target state="translated">pg_read_all_stats</target>
        </trans-unit>
        <trans-unit id="672ccde4199244371d3187022b0c77cb6aba0242" translate="yes" xml:space="preserve">
          <source>pg_read_server_files</source>
          <target state="translated">pg_read_server_files</target>
        </trans-unit>
        <trans-unit id="2efd5ab30369a88508d8585f1cc52aa1ff6d58ab" translate="yes" xml:space="preserve">
          <source>pg_receivewal</source>
          <target state="translated">pg_receivewal</target>
        </trans-unit>
        <trans-unit id="666f6b0c830ac42867979e7e4d28a769aa449122" translate="yes" xml:space="preserve">
          <source>pg_receivewal &amp;mdash; stream write-ahead logs from a PostgreSQL server</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57337d575e5d67e54753c5901e40708eeba5bfa3" translate="yes" xml:space="preserve">
          <source>pg_receivewal can perform one of the two following actions in order to control physical replication slots:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b99d484557f926ba9322617cdc90fdac93c874fa" translate="yes" xml:space="preserve">
          <source>pg_receivewal is used to stream the write-ahead log from a running PostgreSQL cluster. The write-ahead log is streamed using the streaming replication protocol, and is written to a local directory of files. This directory can be used as the archive location for doing a restore using point-in-time recovery (see &lt;a href=&quot;continuous-archiving&quot;&gt;Section 25.3&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff89740628485b49733ba40c63ee1bd2c5fc5341" translate="yes" xml:space="preserve">
          <source>pg_receivewal streams the write-ahead log in real time as it's being generated on the server, and does not wait for segments to complete like &lt;a href=&quot;runtime-config-wal#GUC-ARCHIVE-COMMAND&quot;&gt;archive_command&lt;/a&gt; does. For this reason, it is not necessary to set &lt;a href=&quot;runtime-config-wal#GUC-ARCHIVE-TIMEOUT&quot;&gt;archive_timeout&lt;/a&gt; when using pg_receivewal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db4efe6f6a91f9ac4c22014235d4941903efcda3" translate="yes" xml:space="preserve">
          <source>pg_receivewal will exit with status 0 when terminated by the SIGINT signal. (That is the normal way to end it. Hence it is not an error.) For fatal errors or other signals, the exit status will be nonzero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26440cf76205c66bbba0f1ef7928c60c117d0476" translate="yes" xml:space="preserve">
          <source>pg_receivewal will preserve group permissions on the received WAL files if group permissions are enabled on the source cluster.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f518b9d9af81fd4207ef9135fe7fb771aaa09697" translate="yes" xml:space="preserve">
          <source>pg_recvlogical</source>
          <target state="translated">pg_recvlogical</target>
        </trans-unit>
        <trans-unit id="6da88adcafce4a1cb80eb5eae2a7affb239d8ddd" translate="yes" xml:space="preserve">
          <source>pg_recvlogical &amp;mdash; control PostgreSQL logical decoding streams</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f138a3233f7701f7bd0d97da69582123628c5a61" translate="yes" xml:space="preserve">
          <source>pg_recvlogical will preserve group permissions on the received WAL files if group permissions are enabled on the source cluster.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="754dc09cceaf6ea233c5f5643ba3aca03c10ebc7" translate="yes" xml:space="preserve">
          <source>pg_resetwal</source>
          <target state="translated">pg_resetwal</target>
        </trans-unit>
        <trans-unit id="818d00beab76c8e586ff07e5b2087a573e1add8b" translate="yes" xml:space="preserve">
          <source>pg_resetwal &amp;mdash; reset the write-ahead log and other control information of a PostgreSQL database cluster</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6234470bdef81a74befac78cc2c427e186dfa6f" translate="yes" xml:space="preserve">
          <source>pg_restore</source>
          <target state="translated">pg_restore</target>
        </trans-unit>
        <trans-unit id="ca95d01c7a33bf71c3eea328ddfcdb1e56431966" translate="yes" xml:space="preserve">
          <source>pg_restore &amp;mdash; restore a PostgreSQL database from an archive file created by pg_dump</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab496d205ea98a853ee3c68b03e5ccb4380184fd" translate="yes" xml:space="preserve">
          <source>pg_restore accepts the following command line arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19db1b034924755f0e95004ffeeaf863aa074742" translate="yes" xml:space="preserve">
          <source>pg_restore also accepts the following command line arguments for connection parameters:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4be105d36dd859e85e4e529a3d0c42289206d20c" translate="yes" xml:space="preserve">
          <source>pg_restore can operate in two modes. If a database name is specified, pg_restore connects to that database and restores archive contents directly into the database. Otherwise, a script containing the SQL commands necessary to rebuild the database is created and written to a file or standard output. This script output is equivalent to the plain text output format of pg_dump. Some of the options controlling the output are therefore analogous to pg_dump options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3cc457529707f81114cd1448474b5e02b6e8f99" translate="yes" xml:space="preserve">
          <source>pg_restore cannot restore large objects selectively; for instance, only those for a specific table. If an archive contains large objects, then all large objects will be restored, or none of them if they are excluded via &lt;code&gt;-L&lt;/code&gt;, &lt;code&gt;-t&lt;/code&gt;, or other options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="956f1c367931d9683e268fe8d0c78e3b19e36f3a" translate="yes" xml:space="preserve">
          <source>pg_restore is a utility for restoring a PostgreSQL database from an archive created by &lt;a href=&quot;app-pgdump&quot;&gt;pg_dump&lt;/a&gt; in one of the non-plain-text formats. It will issue the commands necessary to reconstruct the database to the state it was in at the time it was saved. The archive files also allow pg_restore to be selective about what is restored, or even to reorder the items prior to being restored. The archive files are designed to be portable across architectures.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f80bd451e260233a7c84d3bfd4e0034f9f613a4" translate="yes" xml:space="preserve">
          <source>pg_rewind</source>
          <target state="translated">pg_rewind</target>
        </trans-unit>
        <trans-unit id="6636be6c84c6409c9a35bbfb0dbc37537161e15a" translate="yes" xml:space="preserve">
          <source>pg_rewind &amp;mdash; synchronize a PostgreSQL data directory with another data directory that was forked from it</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a5f33fb21f68bcc0a6323ed0e740d0bd790eb74" translate="yes" xml:space="preserve">
          <source>pg_rewind accepts the following command-line arguments:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53c10c8e611dacfe47f7b1a2084a81f3fd2dc876" translate="yes" xml:space="preserve">
          <source>pg_rewind examines the timeline histories of the source and target clusters to determine the point where they diverged, and expects to find WAL in the target cluster's &lt;code&gt;pg_wal&lt;/code&gt; directory reaching all the way back to the point of divergence. The point of divergence can be found either on the target timeline, the source timeline, or their common ancestor. In the typical failover scenario where the target cluster was shut down soon after the divergence, this is not a problem, but if the target cluster ran for a long time after the divergence, the old WAL files might no longer be present. In that case, they can be manually copied from the WAL archive to the &lt;code&gt;pg_wal&lt;/code&gt; directory, or fetched on startup by configuring &lt;a href=&quot;runtime-config-replication#GUC-PRIMARY-CONNINFO&quot;&gt;primary_conninfo&lt;/a&gt; or &lt;a href=&quot;runtime-config-wal#GUC-RESTORE-COMMAND&quot;&gt;restore_command&lt;/a&gt;. The use of pg_rewind is not limited to failover, e.g. a standby server can be promoted, run some write transactions, and then rewinded to become a standby again.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcdc8d4062fab160de9805afabf418913c60bc57" translate="yes" xml:space="preserve">
          <source>pg_rewind is a tool for synchronizing a PostgreSQL cluster with another copy of the same cluster, after the clusters' timelines have diverged. A typical scenario is to bring an old master server back online after failover as a standby that follows the new master.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d64189cb4ba992fd9873d2591fb756a57f4b1e2c" translate="yes" xml:space="preserve">
          <source>pg_rewind requires that the target server either has the &lt;a href=&quot;runtime-config-wal#GUC-WAL-LOG-HINTS&quot;&gt;wal_log_hints&lt;/a&gt; option enabled in &lt;code&gt;postgresql.conf&lt;/code&gt; or data checksums enabled when the cluster was initialized with initdb. Neither of these are currently on by default. &lt;a href=&quot;runtime-config-wal#GUC-FULL-PAGE-WRITES&quot;&gt;full_page_writes&lt;/a&gt; must also be set to &lt;code&gt;on&lt;/code&gt;, but is enabled by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74f82f642c7becfe7ad885d63165ce9b214dce23" translate="yes" xml:space="preserve">
          <source>pg_rewind will fail immediately if it finds files it cannot write directly to. This can happen for example when the source and the target server use the same file mapping for read-only SSL keys and certificates. If such files are present on the target server it is recommended to remove them before running pg_rewind. After doing the rewind, some of those files may have been copied from the source, in which case it may be necessary to remove the data copied and restore back the set of links used before the rewind.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e80101e20d2867b25293eefce9d4a04d672b2671" translate="yes" xml:space="preserve">
          <source>pg_signal_backend</source>
          <target state="translated">pg_signal_backend</target>
        </trans-unit>
        <trans-unit id="aad2c0e43071f13f3222c0ba6eab09b7f30893b7" translate="yes" xml:space="preserve">
          <source>pg_standby</source>
          <target state="translated">pg_standby</target>
        </trans-unit>
        <trans-unit id="a56e931b58520268d70eefc4c64a9aa8bd3ed0c7" translate="yes" xml:space="preserve">
          <source>pg_stat_scan_tables</source>
          <target state="translated">pg_stat_scan_tables</target>
        </trans-unit>
        <trans-unit id="c182f3e761e7613ccff958112c789958486117fb" translate="yes" xml:space="preserve">
          <source>pg_stat_statements</source>
          <target state="translated">pg_stat_statements</target>
        </trans-unit>
        <trans-unit id="564e0a7d640b2d6ab107346798a953a06901e12c" translate="yes" xml:space="preserve">
          <source>pg_test_fsync</source>
          <target state="translated">pg_test_fsync</target>
        </trans-unit>
        <trans-unit id="d4a3eb8509e2f05ae585a775b4578c9dc9c7de51" translate="yes" xml:space="preserve">
          <source>pg_test_fsync &amp;mdash; determine fastest &lt;code&gt;wal_sync_method&lt;/code&gt; for PostgreSQL</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6976c1c9983406c54c1e8e5692258977a8a0bbd" translate="yes" xml:space="preserve">
          <source>pg_test_fsync accepts the following command-line options:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35f3c773e39a7f66548a7f91bdc6fc654aeb8b43" translate="yes" xml:space="preserve">
          <source>pg_test_fsync is intended to give you a reasonable idea of what the fastest &lt;a href=&quot;runtime-config-wal#GUC-WAL-SYNC-METHOD&quot;&gt;wal_sync_method&lt;/a&gt; is on your specific system, as well as supplying diagnostic information in the event of an identified I/O problem. However, differences shown by pg_test_fsync might not make any significant difference in real database throughput, especially since many database servers are not speed-limited by their write-ahead logs. pg_test_fsync reports average file sync operation time in microseconds for each &lt;code&gt;wal_sync_method&lt;/code&gt;, which can also be used to inform efforts to optimize the value of &lt;a href=&quot;runtime-config-wal#GUC-COMMIT-DELAY&quot;&gt;commit_delay&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83cc2633e28e387aaf13db93d466eb64fbb23327" translate="yes" xml:space="preserve">
          <source>pg_test_timing</source>
          <target state="translated">pg_test_timing</target>
        </trans-unit>
        <trans-unit id="f3f198929c632c68bfd97792c716e58ff1f864bf" translate="yes" xml:space="preserve">
          <source>pg_test_timing &amp;mdash; measure timing overhead</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7e7fd0480719760f05328974c70beb596e23fe4" translate="yes" xml:space="preserve">
          <source>pg_test_timing accepts the following command-line options:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9d0be3c84d75586efb4426191f97be9944b103e" translate="yes" xml:space="preserve">
          <source>pg_test_timing is a tool to measure the timing overhead on your system and confirm that the system time never moves backwards. Systems that are slow to collect timing data can give less accurate &lt;code&gt;EXPLAIN ANALYZE&lt;/code&gt; results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1a36c2a002cdeabf0a45ed04c4935a47efbcdf5" translate="yes" xml:space="preserve">
          <source>pg_trgm</source>
          <target state="translated">pg_trgm</target>
        </trans-unit>
        <trans-unit id="cba44b607c1052a326dda79f1d0ce35cdd115465" translate="yes" xml:space="preserve">
          <source>pg_upgrade</source>
          <target state="translated">pg_upgrade</target>
        </trans-unit>
        <trans-unit id="db12765aee1e8acd735eaba4a5cefc9809c12bc5" translate="yes" xml:space="preserve">
          <source>pg_upgrade &amp;mdash; upgrade a PostgreSQL server instance</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a476ffdc14a7d4aeeb3284fd6b093dea66779db" translate="yes" xml:space="preserve">
          <source>pg_upgrade (formerly called pg_migrator) allows data stored in PostgreSQL data files to be upgraded to a later PostgreSQL major version without the data dump/reload typically required for major version upgrades, e.g. from 9.5.8 to 9.6.4 or from 10.7 to 11.2. It is not required for minor version upgrades, e.g. from 9.6.2 to 9.6.3 or from 10.1 to 10.2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="932eaff886c3896eeb52c391ab6acb1368335bbe" translate="yes" xml:space="preserve">
          <source>pg_upgrade accepts the following command-line arguments:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d75641e412966ab64583947d2b63323e7cafe1a" translate="yes" xml:space="preserve">
          <source>pg_upgrade creates various working files, such as schema dumps, in the current working directory. For security, be sure that that directory is not readable or writable by any other users.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="578bd193f3c9b3d85257ebce226541a1e984626b" translate="yes" xml:space="preserve">
          <source>pg_upgrade does its best to make sure the old and new clusters are binary-compatible, e.g. by checking for compatible compile-time settings, including 32/64-bit binaries. It is important that any external modules are also binary compatible, though this cannot be checked by pg_upgrade.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f51d2be0d71ad87b7891c8abc6b1dd7e1c78b56" translate="yes" xml:space="preserve">
          <source>pg_upgrade does not support upgrading of databases containing table columns using these &lt;code&gt;reg*&lt;/code&gt; OID-referencing system data types: &lt;code&gt;regproc&lt;/code&gt;, &lt;code&gt;regprocedure&lt;/code&gt;, &lt;code&gt;regoper&lt;/code&gt;, &lt;code&gt;regoperator&lt;/code&gt;, &lt;code&gt;regconfig&lt;/code&gt;, and &lt;code&gt;regdictionary&lt;/code&gt;. (&lt;code&gt;regtype&lt;/code&gt; can be upgraded.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e3d172eb2170af33d67a25363a94103aabed12a" translate="yes" xml:space="preserve">
          <source>pg_upgrade launches short-lived postmasters in the old and new data directories. Temporary Unix socket files for communication with these postmasters are, by default, made in the current working directory. In some situations the path name for the current directory might be too long to be a valid socket name. In that case you can use the &lt;code&gt;-s&lt;/code&gt; option to put the socket files in some directory with a shorter path name. For security, be sure that that directory is not readable or writable by any other users. (This is not relevant on Windows.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15ac306bacc2a60a72c1c9360e893d17d00be783" translate="yes" xml:space="preserve">
          <source>pg_upgrade supports upgrades from 8.4.X and later to the current major release of PostgreSQL, including snapshot and beta releases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37c686f398a9bb31c2422ff4b08aeb2b525d7834" translate="yes" xml:space="preserve">
          <source>pg_visibility</source>
          <target state="translated">pg_visibility</target>
        </trans-unit>
        <trans-unit id="546e23c144574eee6d557036b662070f16964bb9" translate="yes" xml:space="preserve">
          <source>pg_waldump</source>
          <target state="translated">pg_waldump</target>
        </trans-unit>
        <trans-unit id="88429903c93bfb0478c87d3bda8bb2d8c8bf280f" translate="yes" xml:space="preserve">
          <source>pg_waldump &amp;mdash; display a human-readable rendering of the write-ahead log of a PostgreSQL database cluster</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b40058a7035f42d82f70789b37d25d93facc1f44" translate="yes" xml:space="preserve">
          <source>pg_waldump cannot read WAL files with suffix &lt;code&gt;.partial&lt;/code&gt;. If those files need to be read, &lt;code&gt;.partial&lt;/code&gt; suffix needs to be removed from the file name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2282bf04ae8a7a1e4aa1896740ba86b32012320" translate="yes" xml:space="preserve">
          <source>pg_write_server_files</source>
          <target state="translated">pg_write_server_files</target>
        </trans-unit>
        <trans-unit id="fe4faa584d303fc2dd774e2a7ced9c19e26a1c1d" translate="yes" xml:space="preserve">
          <source>pgbench</source>
          <target state="translated">pgbench</target>
        </trans-unit>
        <trans-unit id="245c76923352f6a7de2f5a1b3e955b0edd1157e6" translate="yes" xml:space="preserve">
          <source>pgbench &amp;mdash; run a benchmark test on PostgreSQL</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="190bcecdd132d2a68519fb2b781a6adfb4ddc0e3" translate="yes" xml:space="preserve">
          <source>pgbench accepts the following command-line benchmarking arguments:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68b9788cb122c3e8aa31861bd9d7a75c5229ba5e" translate="yes" xml:space="preserve">
          <source>pgbench accepts the following command-line common arguments:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1405ebd8a8650e87de5d39651f4d5b65343f474b" translate="yes" xml:space="preserve">
          <source>pgbench accepts the following command-line initialization arguments:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9746116a3b23b867ca385a3589051115eb6b8768" translate="yes" xml:space="preserve">
          <source>pgbench executes test scripts chosen randomly from a specified list. They include built-in scripts with &lt;code&gt;-b&lt;/code&gt; and user-provided custom scripts with &lt;code&gt;-f&lt;/code&gt;. Each script may be given a relative weight specified after a &lt;code&gt;@&lt;/code&gt; so as to change its drawing probability. The default weight is &lt;code&gt;1&lt;/code&gt;. Scripts with a weight of &lt;code&gt;0&lt;/code&gt; are ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aec38f1f442d7ff16e1fb7ab9b99473afffa334c" translate="yes" xml:space="preserve">
          <source>pgbench has support for running custom benchmark scenarios by replacing the default transaction script (described above) with a transaction script read from a file (&lt;code&gt;-f&lt;/code&gt; option). In this case a &amp;ldquo;transaction&amp;rdquo; counts as one execution of a script file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="babde96d8ded7d5bdc20bc24ab75503073b3895f" translate="yes" xml:space="preserve">
          <source>pgbench is a simple program for running benchmark tests on PostgreSQL. It runs the same sequence of SQL commands over and over, possibly in multiple concurrent database sessions, and then calculates the average transaction rate (transactions per second). By default, pgbench tests a scenario that is loosely based on TPC-B, involving five &lt;code&gt;SELECT&lt;/code&gt;, &lt;code&gt;UPDATE&lt;/code&gt;, and &lt;code&gt;INSERT&lt;/code&gt; commands per transaction. However, it is easy to test other cases by writing your own transaction script files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fab810234a95f67305254aa81ec2b657d21bac4" translate="yes" xml:space="preserve">
          <source>pgbench's implementation is based on &quot;Non-Uniform Random Variate Generation&quot;, Luc Devroye, p. 550-551, Springer 1986. Due to limitations of that algorithm, the &lt;code&gt;parameter&lt;/code&gt; value is restricted to the range [1.001, 1000].</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="630caf5598ccb0bc5c66255e525f41ce5c906c41" translate="yes" xml:space="preserve">
          <source>pgcrypto</source>
          <target state="translated">pgcrypto</target>
        </trans-unit>
        <trans-unit id="9a9bd59965b3ffd5f41cb5b0367c199ea55c00b3" translate="yes" xml:space="preserve">
          <source>pgpool-II</source>
          <target state="translated">pgpool-II</target>
        </trans-unit>
        <trans-unit id="9489f59aeab8215239a1109df9f4ca10adf1fe8e" translate="yes" xml:space="preserve">
          <source>pgrowlocks</source>
          <target state="translated">pgrowlocks</target>
        </trans-unit>
        <trans-unit id="1cd76ab24bde38e5fa0a0e278f738a576c68fc4d" translate="yes" xml:space="preserve">
          <source>pgstattuple</source>
          <target state="translated">pgstattuple</target>
        </trans-unit>
        <trans-unit id="0b6b7db1f468b507eab5c49dd59287bcfd5c48c3" translate="yes" xml:space="preserve">
          <source>phantom read</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cfbf2e993e254c5b33748bce7c5b2fef2c905de" translate="yes" xml:space="preserve">
          <source>planner statistics</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5447bde33f10b6359a65bcf167f9f8778a245da" translate="yes" xml:space="preserve">
          <source>plus sign in specified position (if number &amp;gt; 0)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4eabb21ebd678c553f80333411576e18b7c6113e" translate="yes" xml:space="preserve">
          <source>plus/minus sign in specified position</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="339dc3363c545578a35444d39ca9832d8fed2693" translate="yes" xml:space="preserve">
          <source>point to empty box</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="469ea8ee30e53a20d2b688c624f215eea08e0b21" translate="yes" xml:space="preserve">
          <source>points to box</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75cb84871a07d724e7282a8e54779a0bca207e4c" translate="yes" xml:space="preserve">
          <source>points to line</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7eaf8061fddd8df9a3125cdf60df4bc0c9a066c1" translate="yes" xml:space="preserve">
          <source>points to line segment</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e757f5e64a2b87ba44d756bec784fbc3b9b25240" translate="yes" xml:space="preserve">
          <source>policies</source>
          <target state="translated">policies</target>
        </trans-unit>
        <trans-unit id="408a5771606748ff56935b5d1da14d2d738d90b8" translate="yes" xml:space="preserve">
          <source>polygon</source>
          <target state="translated">polygon</target>
        </trans-unit>
        <trans-unit id="1fe627e496249ff689da09f1af8a3f608320f1a2" translate="yes" xml:space="preserve">
          <source>polygon to box</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e65c8a6ee032bad896e52a6d51df628bb54741d8" translate="yes" xml:space="preserve">
          <source>polygon to circle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="075b578ac8e782d35cac54fab519b2a2981bc89f" translate="yes" xml:space="preserve">
          <source>polygon to path</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3c4ff64c117cb4046ac95814764274a611eadc9" translate="yes" xml:space="preserve">
          <source>population covariance</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b452fd4c478086ef7a14516e40b822a09ff62833" translate="yes" xml:space="preserve">
          <source>population standard deviation of the input values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f740a71816fcb8405e1c34d0bbda7430e02f052e" translate="yes" xml:space="preserve">
          <source>population variance of the input values (square of the population standard deviation)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddbaa205a7ea7a2d200998c54ca41d802bcbfd44" translate="yes" xml:space="preserve">
          <source>port of the local connection</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87064c70cafd74317278b63c5b157cd735fdf360" translate="yes" xml:space="preserve">
          <source>port of the remote connection</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96a7749d440357880e5a976d2fd59e31720bb064" translate="yes" xml:space="preserve">
          <source>portion of array starting at position &lt;em&gt;&lt;code&gt;start&lt;/code&gt;&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6779ce971cf67554824777a128c0dad919c2eb2" translate="yes" xml:space="preserve">
          <source>portion of array starting at position &lt;em&gt;&lt;code&gt;start&lt;/code&gt;&lt;/em&gt;, &lt;em&gt;&lt;code&gt;len&lt;/code&gt;&lt;/em&gt; elements</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4645518782ef67f072236132657362fb96e3e1c1" translate="yes" xml:space="preserve">
          <source>position of first occurrence of &lt;em&gt;&lt;code&gt;b&lt;/code&gt;&lt;/em&gt; in &lt;em&gt;&lt;code&gt;a&lt;/code&gt;&lt;/em&gt;, searching starting at &lt;em&gt;&lt;code&gt;offset&lt;/code&gt;&lt;/em&gt;; negative &lt;em&gt;&lt;code&gt;offset&lt;/code&gt;&lt;/em&gt; means start &lt;em&gt;&lt;code&gt;-offset&lt;/code&gt;&lt;/em&gt; labels from the end of the path</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1bd6b6e8ca0e52e97dc3a0c4f3cebf095aa90b7" translate="yes" xml:space="preserve">
          <source>position of first occurrence of &lt;em&gt;&lt;code&gt;b&lt;/code&gt;&lt;/em&gt; in &lt;em&gt;&lt;code&gt;a&lt;/code&gt;&lt;/em&gt;; -1 if not found</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afc848c316af1a89d49826c5ae9d00ed769415f3" translate="yes" xml:space="preserve">
          <source>postgres</source>
          <target state="translated">postgres</target>
        </trans-unit>
        <trans-unit id="8390740c441882222c2362f52cee5c919ebfa7e2" translate="yes" xml:space="preserve">
          <source>postgres &amp;mdash; PostgreSQL database server</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5b569dfbe79173f90e1b22c4a9d9ef1d17d6ff5" translate="yes" xml:space="preserve">
          <source>postgres_fdw</source>
          <target state="translated">postgres_fdw</target>
        </trans-unit>
        <trans-unit id="97607be36098a11ebbd418e8cb692e80c46220f1" translate="yes" xml:space="preserve">
          <source>postmaster</source>
          <target state="translated">postmaster</target>
        </trans-unit>
        <trans-unit id="db9882a50c59d73039601dcb6fde5eebfad74950" translate="yes" xml:space="preserve">
          <source>postmaster &amp;mdash; PostgreSQL database server</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61fb54e7e590d7cad09c692298af99246641fc3b" translate="yes" xml:space="preserve">
          <source>prepared statements</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9350bfebf12d74a4f13ad68c3478192c9952b02c" translate="yes" xml:space="preserve">
          <source>prepared transactions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7a0eda00d411aa762901238aba5394b820b1e5f" translate="yes" xml:space="preserve">
          <source>print &lt;code&gt;a&lt;/code&gt; to stderr, and return &lt;code&gt;a&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd13efcdda80e14e3ff6f29792578d886340f030" translate="yes" xml:space="preserve">
          <source>probably means your kernel's limit on the size of shared memory is smaller than the work area PostgreSQL is trying to create (4011376640 bytes in this example). Or it could mean that you do not have System-V-style shared memory support configured into your kernel at all. As a temporary workaround, you can try starting the server with a smaller-than-normal number of buffers (&lt;a href=&quot;runtime-config-resource#GUC-SHARED-BUFFERS&quot;&gt;shared_buffers&lt;/a&gt;). You will eventually want to reconfigure your kernel to increase the allowed shared memory size. You might also see this message when trying to start multiple servers on the same machine, if their total space requested exceeds the kernel limit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5eb476d6ced75dc0f494167f046c38238d16ca3" translate="yes" xml:space="preserve">
          <source>produce &lt;code&gt;tsquery&lt;/code&gt; from a web search style query</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d843088914396896c8a6ccbd1400e89c8769a944" translate="yes" xml:space="preserve">
          <source>produce &lt;code&gt;tsquery&lt;/code&gt; ignoring punctuation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="737a676c9e9772615b88a960070fc05c74241bc2" translate="yes" xml:space="preserve">
          <source>produce &lt;code&gt;tsquery&lt;/code&gt; that searches for a phrase, ignoring punctuation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d11e992305f12419f753193a9fd40fdcec1d7209" translate="yes" xml:space="preserve">
          <source>produce debugging output in &lt;code&gt;cleanup.log&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf7f38c1536eab5569d86ce758482414f719bea3" translate="yes" xml:space="preserve">
          <source>proves server certificate was sent by the owner; does not indicate certificate owner is trustworthy</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15fbbe3ec90e89c9a42166e95d352669a7d04728" translate="yes" xml:space="preserve">
          <source>psql</source>
          <target state="translated">psql</target>
        </trans-unit>
        <trans-unit id="fca46a43005a869700891f785840854a10a5e6c1" translate="yes" xml:space="preserve">
          <source>psql &amp;mdash; PostgreSQL interactive terminal</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="347fa40df625faa5bd528852ecb450c286d4db96" translate="yes" xml:space="preserve">
          <source>psql Command</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5e04b58c747ee3884ce2400c147b7d3bcf98e2f" translate="yes" xml:space="preserve">
          <source>psql Support</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95e125fea70f6101322b293b37180b375e82e943" translate="yes" xml:space="preserve">
          <source>psql is a regular PostgreSQL client application. In order to connect to a database you need to know the name of your target database, the host name and port number of the server, and what user name you want to connect as. psql can be told about those parameters via command line options, namely &lt;code&gt;-d&lt;/code&gt;, &lt;code&gt;-h&lt;/code&gt;, &lt;code&gt;-p&lt;/code&gt;, and &lt;code&gt;-U&lt;/code&gt; respectively. If an argument is found that does not belong to any option it will be interpreted as the database name (or the user name, if the database name is already given). Not all of these options are required; there are useful defaults. If you omit the host name, psql will connect via a Unix-domain socket to a server on the local host, or via TCP/IP to &lt;code&gt;localhost&lt;/code&gt; on machines that don't have Unix-domain sockets. The default port number is determined at compile time. Since the database server uses the same default, you will not have to specify the port in most cases. The default user name is your operating-system user name, as is the default database name. Note that you cannot just connect to any database under any user name. Your database administrator should have informed you about your access rights.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b7bd245882c2b30f2066333f8b2b51dbe7b4bee" translate="yes" xml:space="preserve">
          <source>psql is a terminal-based front-end to PostgreSQL. It enables you to type in queries interactively, issue them to PostgreSQL, and see the query results. Alternatively, input can be from a file or from command line arguments. In addition, psql provides a number of meta-commands and various shell-like features to facilitate writing scripts and automating a wide variety of tasks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b22c3083f3acff373849bd925841c6ca17029691" translate="yes" xml:space="preserve">
          <source>psql is built as a &amp;ldquo;console application&amp;rdquo;. Since the Windows console windows use a different encoding than the rest of the system, you must take special care when using 8-bit characters within psql. If psql detects a problematic console code page, it will warn you at startup. To change the console code page, two things are necessary:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f42826a99d3a8b74d1cfec2913f0d508a2a89747" translate="yes" xml:space="preserve">
          <source>psql provides variable substitution features similar to common Unix command shells. Variables are simply name/value pairs, where the value can be any string of any length. The name must consist of letters (including non-Latin letters), digits, and underscores.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6e54522ea4611b9507672c9989cd73e23e597ad" translate="yes" xml:space="preserve">
          <source>psql returns 0 to the shell if it finished normally, 1 if a fatal error of its own occurs (e.g. out of memory, file not found), 2 if the connection to the server went bad and the session was not interactive, and 3 if an error occurred in a script and the variable &lt;code&gt;ON_ERROR_STOP&lt;/code&gt; was set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb629d8072664137a941709037828dd50c9b9da4" translate="yes" xml:space="preserve">
          <source>psql supports the Readline library for convenient line editing and retrieval. The command history is automatically saved when psql exits and is reloaded when psql starts up. Tab-completion is also supported, although the completion logic makes no claim to be an SQL parser. The queries generated by tab-completion can also interfere with other SQL commands, e.g. &lt;code&gt;SET TRANSACTION ISOLATION LEVEL&lt;/code&gt;. If for some reason you do not like the tab completion, you can turn it off by putting this in a file named &lt;code&gt;.inputrc&lt;/code&gt; in your home directory:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a16e3c52a81da60949a222ec1f2beace78fd46bd" translate="yes" xml:space="preserve">
          <source>psql will print this command tag only if the command was not &lt;code&gt;COPY ... TO STDOUT&lt;/code&gt;, or the equivalent psql meta-command &lt;code&gt;\copy ... to stdout&lt;/code&gt;. This is to prevent confusing the command tag with the data that was just printed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9030a8d8a8e0a797144de8dad2ab91ccd68b521" translate="yes" xml:space="preserve">
          <source>psql works best with servers of the same or an older major version. Backslash commands are particularly likely to fail if the server is of a newer version than psql itself. However, backslash commands of the &lt;code&gt;\d&lt;/code&gt; family should work with servers of versions back to 7.4, though not necessarily with servers newer than psql itself. The general functionality of running SQL commands and displaying query results should also work with servers of a newer major version, but this cannot be guaranteed in all cases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f688be98f5b8c1f64cb5029d985e2970051ea65a" translate="yes" xml:space="preserve">
          <source>publications and their associated tables</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32cdbe585cee84aaf7b83fff94029a9d86ceddaa" translate="yes" xml:space="preserve">
          <source>publications for logical replication</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09b662744d3b70e3c297a816849f207244de2aa4" translate="yes" xml:space="preserve">
          <source>push element onto array (add it to end of array)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fa1f94325c1f93ccb98d699eacb2bfd7d300dc2" translate="yes" xml:space="preserve">
          <source>quarter</source>
          <target state="translated">quarter</target>
        </trans-unit>
        <trans-unit id="25254f339a98dbc5a3b1dfb9ae984fdeecd56b20" translate="yes" xml:space="preserve">
          <source>query rewrite rules</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="642953c903e225c7ba0c3da75015e01837b730d3" translate="yes" xml:space="preserve">
          <source>radians to degrees</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="101ff7a6595f39b284bb822cf9f8e2f159302ecf" translate="yes" xml:space="preserve">
          <source>radius of circle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d06226ac77f8f5ba216268c5c76122beb3306150" translate="yes" xml:space="preserve">
          <source>random generator seed (unless overwritten with &lt;code&gt;-D&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="991aabe67a8a06e97c39a7db711c50ff461e9b21" translate="yes" xml:space="preserve">
          <source>random value in the range 0.0 &amp;lt;= x &amp;lt; 1.0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2613a16780a46e105e48eb6131089e98895939e1" translate="yes" xml:space="preserve">
          <source>range containment, set membership, string matching</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbd5a79f25e51a24132457cea5c33398a113cab2" translate="yes" xml:space="preserve">
          <source>range is contained by</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d64c6f39222c05f598d1e3361aa6949b4308b3a8" translate="yes" xml:space="preserve">
          <source>range's element type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="069624e6963a6be975b7cc2a6d79ce1e4e392e23" translate="yes" xml:space="preserve">
          <source>rank document for query</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7905619b1f220805fc4b27c39f18646781254c7a" translate="yes" xml:space="preserve">
          <source>rank document for query using cover density</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42e62ae935036c81180fd1b96a0d131ace6d62cd" translate="yes" xml:space="preserve">
          <source>rank of the current row with gaps; same as &lt;code&gt;row_number&lt;/code&gt; of its first peer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c957e7d462191d34d9b87b7a9dfb0016feca8ae" translate="yes" xml:space="preserve">
          <source>rank of the current row without gaps; this function counts peer groups</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15e40867aed4cd80a2d2990e6249bf25cd91e548" translate="yes" xml:space="preserve">
          <source>rank of the hypothetical row, with gaps for duplicate rows</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a0a39c75abd6da6c39b8fac3443be9d12755c52" translate="yes" xml:space="preserve">
          <source>rank of the hypothetical row, without gaps</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82b524d90dbcf160ddb4a560d1503123520ae7c4" translate="yes" xml:space="preserve">
          <source>rather than:</source>
          <target state="translated">오히려</target>
        </trans-unit>
        <trans-unit id="e2f19716babfc608f3ce223697ed0ba39d2f7f7f" translate="yes" xml:space="preserve">
          <source>rectangular box on a plane</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37151e24d7e9197d44b4f0dc711ed6382e5e405a" translate="yes" xml:space="preserve">
          <source>reduce document text to &lt;code&gt;tsvector&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79dbda1f3b73509078526efded3d2f3d32809d63" translate="yes" xml:space="preserve">
          <source>reduce each string value in the document to a &lt;code&gt;tsvector&lt;/code&gt;, and then concatenate those in document order to produce a single &lt;code&gt;tsvector&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1250b7cb90774e995b4514a5d5654a66de678684" translate="yes" xml:space="preserve">
          <source>reduce each value in the document, specified by &lt;code&gt;filter&lt;/code&gt; to a &lt;code&gt;tsvector&lt;/code&gt;, and then concatenate those in document order to produce a single &lt;code&gt;tsvector&lt;/code&gt;. &lt;code&gt;filter&lt;/code&gt; is a &lt;code&gt;jsonb&lt;/code&gt; array, that enumerates what kind of elements need to be included into the resulting &lt;code&gt;tsvector&lt;/code&gt;. Possible values for &lt;code&gt;filter&lt;/code&gt; are &lt;code&gt;&quot;string&quot;&lt;/code&gt; (to include all string values), &lt;code&gt;&quot;numeric&quot;&lt;/code&gt; (to include all numeric values in the string format), &lt;code&gt;&quot;boolean&quot;&lt;/code&gt; (to include all Boolean values in the string format &lt;code&gt;&quot;true&quot;&lt;/code&gt;/&lt;code&gt;&quot;false&quot;&lt;/code&gt;), &lt;code&gt;&quot;key&quot;&lt;/code&gt; (to include all keys) or &lt;code&gt;&quot;all&quot;&lt;/code&gt; (to include all above). These values can be combined together to include, e.g. all string and numeric values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4039072cefb5e0e74fe21ef2eb4a0339c3c8dc4e" translate="yes" xml:space="preserve">
          <source>regional style</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="926c6c489eca334e575a3c27916c7d476217b0a9" translate="yes" xml:space="preserve">
          <source>registered replication origins</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30cc491139c5bb6825ec1bb708cbc29e19e42c6e" translate="yes" xml:space="preserve">
          <source>reindexdb</source>
          <target state="translated">reindexdb</target>
        </trans-unit>
        <trans-unit id="083d684ba690a7c535599e3ad84d043b25bbe13a" translate="yes" xml:space="preserve">
          <source>reindexdb &amp;mdash; reindex a PostgreSQL database</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1b9275c96db955794a0d238bdcaa339012cd19d" translate="yes" xml:space="preserve">
          <source>reindexdb accepts the following command-line arguments:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82c90da5e98614fb40487a8c5028bb77858ddea5" translate="yes" xml:space="preserve">
          <source>reindexdb also accepts the following command-line arguments for connection parameters:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9269293224da190486779e55d8f6b94e5d6d1201" translate="yes" xml:space="preserve">
          <source>reindexdb is a utility for rebuilding indexes in a PostgreSQL database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d4846cca29f724c060a9881a5e641df632902bd" translate="yes" xml:space="preserve">
          <source>reindexdb is a wrapper around the SQL command &lt;a href=&quot;sql-reindex&quot;&gt;REINDEX&lt;/a&gt;. There is no effective difference between reindexing databases via this utility and via other methods for accessing the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c386b54f02652791115877233ca0ba1ce06ebef8" translate="yes" xml:space="preserve">
          <source>reindexdb might need to connect several times to the PostgreSQL server, asking for a password each time. It is convenient to have a &lt;code&gt;~/.pgpass&lt;/code&gt; file in such cases. See &lt;a href=&quot;https://www.postgresql.org/docs/12/libpq-pgpass.html&quot;&gt;Section 33.15&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3714b0aaa498a583b571049556e19a91f7bef9e6" translate="yes" xml:space="preserve">
          <source>relation access methods</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f400895dee5339e40297de7a78009334a356660" translate="yes" xml:space="preserve">
          <source>relation name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3dbaa46992ab2c1ab0d9fdb8024b94ae7c97076" translate="yes" xml:space="preserve">
          <source>relation size</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe32d19bfff33ad58517c3fc62382bd3f2859f20" translate="yes" xml:space="preserve">
          <source>relation state for subscriptions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c407d5c54a039db27fa9d1f28eff43a65bd023a" translate="yes" xml:space="preserve">
          <source>relation to publication mapping</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ecaec07c66f8d55696d8e38bb71c94f66d69c3f" translate="yes" xml:space="preserve">
          <source>relations per database</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f2cb6cd22a564475f9a31aaec7a99bd69db2284" translate="yes" xml:space="preserve">
          <source>relative rank of the current row: (&lt;code&gt;rank&lt;/code&gt; - 1) / (total partition rows - 1)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24bf28d5d4bd6d0f16802dfd07220b0a5a687110" translate="yes" xml:space="preserve">
          <source>relative rank of the hypothetical row, ranging from 0 to 1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d774b57696232aac3e604d7200bbba22b10a765" translate="yes" xml:space="preserve">
          <source>relative rank of the hypothetical row, ranging from 1/&lt;code&gt;N&lt;/code&gt; to 1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7baab710de6a3acc2e604844ea0beee2b050c68" translate="yes" xml:space="preserve">
          <source>remainder of &lt;em&gt;&lt;code&gt;y&lt;/code&gt;&lt;/em&gt;/&lt;em&gt;&lt;code&gt;x&lt;/code&gt;&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="250d4ef2cf0b2baba4d4ce6be41e56e6bfe2aa66" translate="yes" xml:space="preserve">
          <source>remove adjacent duplicates</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38dd1de42138997a66af4f3b8bc7e57dac1b0c88" translate="yes" xml:space="preserve">
          <source>remove all elements equal to the given value from the array (array must be one-dimensional)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dd16a7aac4245908ba8e61e1b938465ae69c6ba" translate="yes" xml:space="preserve">
          <source>remove any occurrence of lexemes in &lt;code&gt;lexemes&lt;/code&gt; from &lt;code&gt;vector&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f557bf48148ab0d42c59438c97083ebe97964b9a" translate="yes" xml:space="preserve">
          <source>remove elements of right array from left</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4c2ce7c00e9f4f6ff237ed7d79bb592a368e241" translate="yes" xml:space="preserve">
          <source>remove entries matching right argument from array</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a85e7687c04dd79ad41273a333495c4a666af38" translate="yes" xml:space="preserve">
          <source>remove given &lt;code&gt;lexeme&lt;/code&gt; from &lt;code&gt;vector&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23acc1303deaae495d1853a3bfb7b51da8d3e16d" translate="yes" xml:space="preserve">
          <source>remove no-longer-needed files from the archive directory</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fe926fa047bec6ba89c76c931f71121be744ab2" translate="yes" xml:space="preserve">
          <source>remove positions and weights from &lt;code&gt;tsvector&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dc6cb30e1258dd38c8070535185e19e9fafc89e" translate="yes" xml:space="preserve">
          <source>replace &lt;code&gt;target&lt;/code&gt; with &lt;code&gt;substitute&lt;/code&gt; within query</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5188d18c0f7f37bcf7e981e94e98e14b02a1ad11" translate="yes" xml:space="preserve">
          <source>replace each array element equal to the given value with a new value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="082d585357b132d574d47eb232747743bbcaa89f" translate="yes" xml:space="preserve">
          <source>replace fields in &lt;code&gt;record&lt;/code&gt; with matching values from &lt;code&gt;hstore&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6497423feeb7cfbcbea6dfe9043ee8a2d8a82ce" translate="yes" xml:space="preserve">
          <source>replace using targets and substitutes from a &lt;code&gt;SELECT&lt;/code&gt; command</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f641218d2d50f1a8843c5b665bee0c71b3cd8081" translate="yes" xml:space="preserve">
          <source>replication slot information</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd9d9b14b554540f18ebbc89119208ebf00845a1" translate="yes" xml:space="preserve">
          <source>report the status of the given transaction: &lt;code&gt;committed&lt;/code&gt;, &lt;code&gt;aborted&lt;/code&gt;, &lt;code&gt;in progress&lt;/code&gt;, or null if the transaction ID is too old</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5135b0db9215727e0820279b872a0bf3a7a995ab" translate="yes" xml:space="preserve">
          <source>represents the given list and all of its possible subsets (i.e. the power set). Thus</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="356ffe4c0384f09906245d0f662d4f64ca925e90" translate="yes" xml:space="preserve">
          <source>represents the given list of expressions and all prefixes of the list including the empty list; thus it is equivalent to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3fed1dae28105416889eb25d33d7d24c7a20450" translate="yes" xml:space="preserve">
          <source>reserved</source>
          <target state="translated">reserved</target>
        </trans-unit>
        <trans-unit id="7cf3815c9bd862676a352eeccf7ac7542600b6c5" translate="yes" xml:space="preserve">
          <source>reserved (can be function or type)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed21c3e5b93bf74f1eaef8bef11e84e4f4d063cc" translate="yes" xml:space="preserve">
          <source>rest of RE is a BRE</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecc3be46f9db605f5a4800017e62c87a14975389" translate="yes" xml:space="preserve">
          <source>rest of RE is a literal (&amp;ldquo;quoted&amp;rdquo;) string, all ordinary characters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91d89625c583905657cc3796e4a310389dbcc99b" translate="yes" xml:space="preserve">
          <source>rest of RE is an ERE</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="975c06d7cafa478c3fe79782ed24c7c6272e47b5" translate="yes" xml:space="preserve">
          <source>results in a boldfaced (&lt;code&gt;1;&lt;/code&gt;) yellow-on-black (&lt;code&gt;33;40&lt;/code&gt;) prompt on VT100-compatible, color-capable terminals.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a330de73ae3e6dd801ff4acc1591c2a394148067" translate="yes" xml:space="preserve">
          <source>results in an error, because even though the &lt;code&gt;||&lt;/code&gt; operator doesn't need to know a collation, the &lt;code&gt;ORDER BY&lt;/code&gt; clause does. As before, the conflict can be resolved with an explicit collation specifier:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="444b34c633eaec66d1c65cbe124cb5d92d2bd179" translate="yes" xml:space="preserve">
          <source>results in sending the three SQL commands to the server in a single request, when the non-backslashed semicolon is reached. The server executes such a request as a single transaction, unless there are explicit &lt;code&gt;BEGIN&lt;/code&gt;/&lt;code&gt;COMMIT&lt;/code&gt; commands included in the string to divide it into multiple transactions. (See &lt;a href=&quot;https://www.postgresql.org/docs/12/protocol-flow.html#PROTOCOL-FLOW-MULTI-STATEMENT&quot;&gt;Section 52.2.2.1&lt;/a&gt; for more details about how the server handles multi-query strings.) psql prints only the last query result it receives for each request; in this example, although all three &lt;code&gt;SELECT&lt;/code&gt;s are indeed executed, psql only prints the &lt;code&gt;3&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fce577ae88abc86447ced8062ac57ef7a232995" translate="yes" xml:space="preserve">
          <source>retain SQL and log files even after successful completion</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16bf0aaa4359a81eaeb06e64f3c0357d5ae75c44" translate="yes" xml:space="preserve">
          <source>retrieves the most recent weather report for each location. But if we had not used &lt;code&gt;ORDER BY&lt;/code&gt; to force descending order of time values for each location, we'd have gotten a report from an unpredictable time for each location.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee22df0a1fecf5d6e65d0f717939490ca3a867a6" translate="yes" xml:space="preserve">
          <source>return the bucket number to which &lt;em&gt;&lt;code&gt;operand&lt;/code&gt;&lt;/em&gt; would be assigned given an array listing the lower bounds of the buckets; returns &lt;code&gt;0&lt;/code&gt; for an input less than the first lower bound; the &lt;em&gt;&lt;code&gt;thresholds&lt;/code&gt;&lt;/em&gt; array &lt;em&gt;must be sorted&lt;/em&gt;, smallest first, or unexpected results will be obtained</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3002498c207f977bb1a57f96069026decbcaab11" translate="yes" xml:space="preserve">
          <source>return the bucket number to which &lt;em&gt;&lt;code&gt;operand&lt;/code&gt;&lt;/em&gt; would be assigned in a histogram having &lt;em&gt;&lt;code&gt;count&lt;/code&gt;&lt;/em&gt; equal-width buckets spanning the range &lt;em&gt;&lt;code&gt;b1&lt;/code&gt;&lt;/em&gt; to &lt;em&gt;&lt;code&gt;b2&lt;/code&gt;&lt;/em&gt;; returns &lt;code&gt;0&lt;/code&gt; or &lt;code&gt;&lt;em&gt;count&lt;/em&gt;+1&lt;/code&gt; for an input outside the range</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7267abd0eccd3050c932ca8f9a39b2db7805ebf" translate="yes" xml:space="preserve">
          <source>returns &lt;code&gt;value&lt;/code&gt; evaluated at the row that is &lt;code&gt;offset&lt;/code&gt; rows after the current row within the partition; if there is no such row, instead return &lt;code&gt;default&lt;/code&gt; (which must be of the same type as &lt;code&gt;value&lt;/code&gt;). Both &lt;code&gt;offset&lt;/code&gt; and &lt;code&gt;default&lt;/code&gt; are evaluated with respect to the current row. If omitted, &lt;code&gt;offset&lt;/code&gt; defaults to 1 and &lt;code&gt;default&lt;/code&gt; to null</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebdeb428fdccc9cb040c31c14014be4f17047d0d" translate="yes" xml:space="preserve">
          <source>returns &lt;code&gt;value&lt;/code&gt; evaluated at the row that is &lt;code&gt;offset&lt;/code&gt; rows before the current row within the partition; if there is no such row, instead return &lt;code&gt;default&lt;/code&gt; (which must be of the same type as &lt;code&gt;value&lt;/code&gt;). Both &lt;code&gt;offset&lt;/code&gt; and &lt;code&gt;default&lt;/code&gt; are evaluated with respect to the current row. If omitted, &lt;code&gt;offset&lt;/code&gt; defaults to 1 and &lt;code&gt;default&lt;/code&gt; to null</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3f6b1427093198f62e2acf28b696edf486be820" translate="yes" xml:space="preserve">
          <source>returns &lt;code&gt;value&lt;/code&gt; evaluated at the row that is the &lt;code&gt;nth&lt;/code&gt; row of the window frame (counting from 1); null if no such row</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe444fc771c8feb6c57dc4688d6426860a1d491c" translate="yes" xml:space="preserve">
          <source>returns &lt;code&gt;value&lt;/code&gt; evaluated at the row that is the first row of the window frame</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1396dd2e096fb41f0e4f5a3f241ebed4c06e1d0c" translate="yes" xml:space="preserve">
          <source>returns &lt;code&gt;value&lt;/code&gt; evaluated at the row that is the last row of the window frame</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71a10c96eee8568f3508c9aa39cf3e3ea3ed15ca" translate="yes" xml:space="preserve">
          <source>returns a text representation of array's dimensions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b62532b94231f6238b17c538120a19aee2a06bf" translate="yes" xml:space="preserve">
          <source>returns an array initialized with supplied value and dimensions, optionally with lower bounds other than 1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cd245f5e95769a191196af0e331ee0930cd1c26" translate="yes" xml:space="preserve">
          <source>returns an array of subscripts of all occurrences of the second argument in the array given as first argument (array must be one-dimensional)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c82d508b01a6e8cbe051297d24034e9c62249ab" translate="yes" xml:space="preserve">
          <source>returns lower bound of the requested array dimension</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b46912b18272e12992ac296592f4fa8c7a7364a" translate="yes" xml:space="preserve">
          <source>returns the length of the requested array dimension</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6548b44faf585f67ff06870acc7d8b484dba54c" translate="yes" xml:space="preserve">
          <source>returns the most frequent input value (arbitrarily choosing the first one if there are multiple equally-frequent results)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a6cbc667a3301906e72bbd9b93b36f18bc6aa8a" translate="yes" xml:space="preserve">
          <source>returns the number of dimensions of the array</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1521a81520f2ac81215752f9f1dd8450e26db7a8" translate="yes" xml:space="preserve">
          <source>returns the number of non-null arguments</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41dc754b6fcfa81efc4d59f1d30e6f1bc08e52ea" translate="yes" xml:space="preserve">
          <source>returns the number of null arguments</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="950bb0d705afa2ecdf04dc69b670d776908717d5" translate="yes" xml:space="preserve">
          <source>returns the subscript of the first occurrence of the second argument in the array, starting at the element indicated by the third argument or at the first element (array must be one-dimensional)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2796675e9a2fc94171df461336da329dd018137d" translate="yes" xml:space="preserve">
          <source>returns the total number of elements in the array, or 0 if the array is empty</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6457c7b2d74cd1057087944da3309b3e771916f7" translate="yes" xml:space="preserve">
          <source>returns upper bound of the requested array dimension</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d27a1f11771200949714b1af99f048a416f5d6f4" translate="yes" xml:space="preserve">
          <source>right</source>
          <target state="translated">right</target>
        </trans-unit>
        <trans-unit id="7a6adcc3945face87585fd8155c0a3bfe12c1aea" translate="yes" xml:space="preserve">
          <source>role creation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f20913ec848d650926d4542f930064b4e800121" translate="yes" xml:space="preserve">
          <source>role name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30035c6118dd0b42e0d54eff22bda5ac1667a64a" translate="yes" xml:space="preserve">
          <source>round to &lt;em&gt;&lt;code&gt;s&lt;/code&gt;&lt;/em&gt; decimal places</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4e5b6836d776c479140516a0df34da04eb26f7e" translate="yes" xml:space="preserve">
          <source>round to nearest integer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afca603cb13b0f0b0e9d13ff9e678c072fe1a068" translate="yes" xml:space="preserve">
          <source>row-security policies</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf443f73fbbb68c960a09139294cf81dd9c4311f" translate="yes" xml:space="preserve">
          <source>rows per table</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="caa155adf81fddd29ab4b21a147927fb0295eb53" translate="yes" xml:space="preserve">
          <source>rules</source>
          <target state="translated">rules</target>
        </trans-unit>
        <trans-unit id="7f97770a91e79897c140e6d67dd7c50d07a1eedb" translate="yes" xml:space="preserve">
          <source>same as 04:05; AM does not affect value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f04a71dc97d5af82e0ee8edb9253d169ee48a0ce" translate="yes" xml:space="preserve">
          <source>same as 16:05; input hour must be &amp;lt;= 12</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="381ad91239df75c43baa01c572764914bd0529ce" translate="yes" xml:space="preserve">
          <source>same as &lt;code&gt;SHMMAX&lt;/code&gt; if bytes, or &lt;code&gt;ceil(SHMMAX/PAGE_SIZE)&lt;/code&gt; if pages, plus room for other applications</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="444029a8e89cc9b36d7757a94617ef66b90b1ec0" translate="yes" xml:space="preserve">
          <source>same as &lt;code&gt;a&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="725e9a292ccbf46a0011119b27055450e073ee89" translate="yes" xml:space="preserve">
          <source>same as &lt;code&gt;txid_current()&lt;/code&gt; but returns null instead of assigning a new transaction ID if none is already assigned</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2550c14b9889607f837e2bceed8ca16c04df8628" translate="yes" xml:space="preserve">
          <source>same as argument data type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6505c58080c76822039bb8092fd3dc7c084088d5" translate="yes" xml:space="preserve">
          <source>same as argument type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29d4500a9f8344a41e893c32af126918b437f345" translate="yes" xml:space="preserve">
          <source>same as argument types</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75d1035aa98b33a93d51413789c402f68a1e958a" translate="yes" xml:space="preserve">
          <source>same as sort expression</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b04ca48928a88a6f40948b741bd4a4aa9a940096" translate="yes" xml:space="preserve">
          <source>sample covariance</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b475ac96d1fa258fe07f14c2bca707d6c31af09" translate="yes" xml:space="preserve">
          <source>sample standard deviation of the input values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6f6c117f9c0d8f537673cb495b75dc42dd3c9d7" translate="yes" xml:space="preserve">
          <source>sample variance of the input values (square of the sample standard deviation)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8420ac235635b82c2dba8c4c33bee009cfe6d73" translate="yes" xml:space="preserve">
          <source>scale of the argument (the number of decimal digits in the fractional part)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c20018ff0e789e8b5fbb66e98bfc41abd855a441" translate="yes" xml:space="preserve">
          <source>schemas</source>
          <target state="translated">schemas</target>
        </trans-unit>
        <trans-unit id="158ec945e449489046fe7f0d6278576a3e5e99d6" translate="yes" xml:space="preserve">
          <source>second (00-59)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44def91fc11923bbab937d474f217ff8bc930277" translate="yes" xml:space="preserve">
          <source>seconds past midnight (0-86399)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1c5e0f7813fff587cbcf086ee5a937547200510" translate="yes" xml:space="preserve">
          <source>security labels</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7f7da16285a8232ead81524f850ad3798c96fbb" translate="yes" xml:space="preserve">
          <source>security labels on database objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13f0095e6696d94a4573ac4c799bdda01d997028" translate="yes" xml:space="preserve">
          <source>security labels on shared database objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d57d13fe1b83c37010a258861fb2f7cad8afcec" translate="yes" xml:space="preserve">
          <source>see Examples section</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74acdbefb150f3934bfb4c52a48120f7bb3e2de3" translate="yes" xml:space="preserve">
          <source>see text</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2679f8bbcd41e24d3e47024eb1e57f9c2de822a3" translate="yes" xml:space="preserve">
          <source>seed used in hash functions by default</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bea4a97042f47e1fdf46da61cad740998fb72742" translate="yes" xml:space="preserve">
          <source>seg</source>
          <target state="translated">seg</target>
        </trans-unit>
        <trans-unit id="4c56967d91bb3aca321c3df62c169fed6bdef73a" translate="yes" xml:space="preserve">
          <source>select only elements with given &lt;code&gt;weights&lt;/code&gt; from &lt;code&gt;vector&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="644e5c2acdd03305f6e3d3fd02e387f18ee262e8" translate="yes" xml:space="preserve">
          <source>selects a scale of 0. Specifying:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c87eafc5e4f7d06ceebb389c8131b970291e23e2" translate="yes" xml:space="preserve">
          <source>sent to client to indicate server's identity</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07bfb4c7c3f91af6d4d516112db1cda98690f754" translate="yes" xml:space="preserve">
          <source>sepgsql</source>
          <target state="translated">sepgsql</target>
        </trans-unit>
        <trans-unit id="6e0abecd9209de3a67bf617f2a320a16833ff235" translate="yes" xml:space="preserve">
          <source>sequences</source>
          <target state="translated">sequences</target>
        </trans-unit>
        <trans-unit id="50de66b735d30738618568294742fcf1dfa52a47" translate="yes" xml:space="preserve">
          <source>serial</source>
          <target state="translated">serial</target>
        </trans-unit>
        <trans-unit id="e07cc34dbfcde8a6a6b9e26e394598959862e030" translate="yes" xml:space="preserve">
          <source>serialization anomaly</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb95185afa76ed511c8e284a022b3ab5a2053b04" translate="yes" xml:space="preserve">
          <source>server certificate</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3012cb613cb7a5b6af88819a82a682de4a6fbf66" translate="yes" xml:space="preserve">
          <source>server private key</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30c38a4a7c10a113e25809757f44fe3b350d2a0d" translate="yes" xml:space="preserve">
          <source>server start time</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f149fd4651ad8c2853db89a728ed4063d863c34f" translate="yes" xml:space="preserve">
          <source>session user name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2176f740dcbe933b33347e08ad8f878db90a67a7" translate="yes" xml:space="preserve">
          <source>set 7th bit to one, also known as modified EUI-64, for inclusion in an IPv6 address</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bb89ca75be98937c9666fbaeb5284390c99901a" translate="yes" xml:space="preserve">
          <source>set last 3 bytes to zero</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9915c518a4be3e539a68b91c3693842f0a3e949" translate="yes" xml:space="preserve">
          <source>set last 5 bytes to zero</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6b50cd4aea4f89f6723d8dee6940c3db608439d" translate="yes" xml:space="preserve">
          <source>set netmask length for &lt;code&gt;cidr&lt;/code&gt; value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38d64c3e82d8607f24ef4f2f2226730c77afcbb1" translate="yes" xml:space="preserve">
          <source>set netmask length for &lt;code&gt;inet&lt;/code&gt; value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d25995862e194e5a3a5c2bd155fdb0e4324e3a5a" translate="yes" xml:space="preserve">
          <source>set parameter and return new value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b13d3693e75409e62fe740c49c5c3fb72bedffd5" translate="yes" xml:space="preserve">
          <source>set seed for subsequent &lt;code&gt;random()&lt;/code&gt; calls (value between -1.0 and 1.0, inclusive)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe21788b00e3b77dd3e5ec835ccc1f5b49e1dc5b" translate="yes" xml:space="preserve">
          <source>sets the default character set to &lt;code&gt;EUC_JP&lt;/code&gt; (Extended Unix Code for Japanese). You can use &lt;code&gt;--encoding&lt;/code&gt; instead of &lt;code&gt;-E&lt;/code&gt; if you prefer longer option strings. If no &lt;code&gt;-E&lt;/code&gt; or &lt;code&gt;--encoding&lt;/code&gt; option is given, &lt;code&gt;initdb&lt;/code&gt; attempts to determine the appropriate encoding to use based on the specified or default locale.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1cdd98ece11ec8696e4549b7fd49fdfb53329a5" translate="yes" xml:space="preserve">
          <source>sets the variable &lt;code&gt;foo&lt;/code&gt; to the value &lt;code&gt;bar&lt;/code&gt;. To retrieve the content of the variable, precede the name with a colon, for example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f14194e1ad0db4fc5a6c41c25d97b88b0b0eb9d2" translate="yes" xml:space="preserve">
          <source>shared disk</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bd12a73caaa637f0067a8ea8256c6ef51ec7eb4" translate="yes" xml:space="preserve">
          <source>shift specified number of digits (see notes)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0d3354171909fec092803a13e57504284839b56" translate="yes" xml:space="preserve">
          <source>show help, then exit</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a4c1ffcc21e466d4c03636dfe48d7208ff34a2a" translate="yes" xml:space="preserve">
          <source>sign anchored to number (uses locale)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d8038b8fa79ee6f4e0333b7d9abbd6d27192e74" translate="yes" xml:space="preserve">
          <source>sign of the argument (-1, 0, +1)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92e213bad97bab9b212d988dd8e7d25cdfca5dac" translate="yes" xml:space="preserve">
          <source>signed eight-byte integer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b262fe7ab8a722f5a80f938f46cf8f4584413294" translate="yes" xml:space="preserve">
          <source>signed four-byte integer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4da4ccae877e5d648124e213d97abcb322d4e5d7" translate="yes" xml:space="preserve">
          <source>signed two-byte integer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f00b74f11b767c79cdfe4e57b77d6c9229acca2" translate="yes" xml:space="preserve">
          <source>since here no normalization of the word &lt;code&gt;rats&lt;/code&gt; will occur. The elements of a &lt;code&gt;tsvector&lt;/code&gt; are lexemes, which are assumed already normalized, so &lt;code&gt;rats&lt;/code&gt; does not match &lt;code&gt;rat&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ceffe1ce290eba808bf1b206f569dc259347da3" translate="yes" xml:space="preserve">
          <source>sine</source>
          <target state="translated">sine</target>
        </trans-unit>
        <trans-unit id="23df04a0cdcf2537524dd2bc11ff311556f2d0d7" translate="yes" xml:space="preserve">
          <source>single precision floating-point number (4 bytes)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44817ac90b4676f63ab6aa851d0d68fe7668eb1d" translate="yes" xml:space="preserve">
          <source>single quote</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99a4cbeed5e697c938719c7074046afe2c5d7b40" translate="yes" xml:space="preserve">
          <source>single-byte internal type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b232aae2ea051a8b4eaddeaefe182cb7892647ee" translate="yes" xml:space="preserve">
          <source>slope of the least-squares-fit linear equation determined by the (&lt;code&gt;X&lt;/code&gt;, &lt;code&gt;Y&lt;/code&gt;) pairs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46cbb81a5d630d179cb52059ee20297c400b1416" translate="yes" xml:space="preserve">
          <source>small autoincrementing integer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="558af7381b144d3cc082f2123a4bc36981e7bc21" translate="yes" xml:space="preserve">
          <source>small-range integer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="909c8f67764ae9c083dec81d2f306957c4d8be27" translate="yes" xml:space="preserve">
          <source>smallest value among arguments</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65054f9d9beebbd4a2951daf149f1905474abfaa" translate="yes" xml:space="preserve">
          <source>smallint</source>
          <target state="translated">smallint</target>
        </trans-unit>
        <trans-unit id="a1052ff798b7fb9365168ccf304ef07f3cc90e46" translate="yes" xml:space="preserve">
          <source>smallserial</source>
          <target state="translated">smallserial</target>
        </trans-unit>
        <trans-unit id="403cf57b0a03d649674382c49443d5cfce45091b" translate="yes" xml:space="preserve">
          <source>so that the &lt;code&gt;mytext&lt;/code&gt;&lt;code&gt;=&lt;/code&gt;&lt;code&gt;text&lt;/code&gt; operator is found immediately according to the exact-match rule. If the best-match rules are reached, they actively discriminate against operators on domain types. If they did not, such an operator would create too many ambiguous-operator failures, because the casting rules always consider a domain as castable to or from its base type, and so the domain operator would be considered usable in all the same cases as a similarly-named operator on the base type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2d5b92a83b79fb705b5433a3595097766599749" translate="yes" xml:space="preserve">
          <source>so that the parent query's restrictions can be applied directly to scans of &lt;code&gt;big_table&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33287210e7f37c0de60bcc486617260fed9646cd" translate="yes" xml:space="preserve">
          <source>so those parameters can be &lt;em&gt;anything&lt;/em&gt; valid in those particular locations. The result from this SELECT needs to return exactly two columns (which it will unless you try to list multiple fields for key or document). Beware that this simplistic approach requires that you validate any user-supplied values to avoid SQL injection attacks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bbe4f2c3d484261a28a0a9d79b86a28dda8aed6" translate="yes" xml:space="preserve">
          <source>sort array &amp;mdash; &lt;em&gt;&lt;code&gt;dir&lt;/code&gt;&lt;/em&gt; must be &lt;code&gt;asc&lt;/code&gt; or &lt;code&gt;desc&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ab26c613ad783ec5c4279647c4568cb60270e77" translate="yes" xml:space="preserve">
          <source>sort in ascending order</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb775ca116e6daf98d00622b5a2803573dc2febb" translate="yes" xml:space="preserve">
          <source>sort in descending order</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca3c7b2fd53d38a6a7c264721dafcec998424fe9" translate="yes" xml:space="preserve">
          <source>spell mode (not implemented)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efee56d94903e1b7e28b79f8005d10a42494ad38" translate="yes" xml:space="preserve">
          <source>spi</source>
          <target state="translated">spi</target>
        </trans-unit>
        <trans-unit id="07ad7dd79d10d356d3f19ca7b4961bd475f4ce9c" translate="yes" xml:space="preserve">
          <source>splits string into array elements using supplied delimiter and optional null string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2e8f58c13899630f0106304b4acdc14ab8327ed" translate="yes" xml:space="preserve">
          <source>square of the correlation coefficient</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ffba3c538fd4255e879f2b7a70c1b72afcd84f0" translate="yes" xml:space="preserve">
          <source>square root</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d29e8b0f25329304da24b8f5667deb49b699ff9c" translate="yes" xml:space="preserve">
          <source>ssl_ca_file</source>
          <target state="translated">ssl_ca_file</target>
        </trans-unit>
        <trans-unit id="2775392bb369de7d75269131ab9f0f5c70d8d785" translate="yes" xml:space="preserve">
          <source>ssl_crl_file</source>
          <target state="translated">ssl_crl_file</target>
        </trans-unit>
        <trans-unit id="d63313191bc16a4e5613009efa64dfed354c4d72" translate="yes" xml:space="preserve">
          <source>sslinfo</source>
          <target state="translated">sslinfo</target>
        </trans-unit>
        <trans-unit id="0e24c2b184b5e3e7b75dfc61701788e720c9898e" translate="yes" xml:space="preserve">
          <source>state of true or false</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76d6ac0cd9f5ce2ee31b1316375ad2ee4ceb0a05" translate="yes" xml:space="preserve">
          <source>strict &amp;mdash; if a structural error occurs, an error is raised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c725950adf558e08ebc2be1f8506cf33d890586" translate="yes" xml:space="preserve">
          <source>strictly left of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16e3eac5295a5a86760ddf1668ab883d6f97e415" translate="yes" xml:space="preserve">
          <source>strictly right of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff0902db07bc383387414b9b62a35d91a903191b" translate="yes" xml:space="preserve">
          <source>stripping characters from beginning (at prefix) or end (at suffix) of the word</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2ee44ca661afb794a87a879241a503270262fe3" translate="yes" xml:space="preserve">
          <source>subpath of &lt;code&gt;ltree&lt;/code&gt; from position &lt;em&gt;&lt;code&gt;start&lt;/code&gt;&lt;/em&gt; to position &lt;em&gt;&lt;code&gt;end&lt;/code&gt;&lt;/em&gt;-1 (counting from 0)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db7985ce034d4afe6de74558c8e7ec35b413a467" translate="yes" xml:space="preserve">
          <source>subpath of &lt;code&gt;ltree&lt;/code&gt; starting at position &lt;em&gt;&lt;code&gt;offset&lt;/code&gt;&lt;/em&gt;, extending to end of path. If &lt;em&gt;&lt;code&gt;offset&lt;/code&gt;&lt;/em&gt; is negative, subpath starts that far from the end of the path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c84f52912bfefd68b6818002b2502e529886498e" translate="yes" xml:space="preserve">
          <source>subpath of &lt;code&gt;ltree&lt;/code&gt; starting at position &lt;em&gt;&lt;code&gt;offset&lt;/code&gt;&lt;/em&gt;, length &lt;em&gt;&lt;code&gt;len&lt;/code&gt;&lt;/em&gt;. If &lt;em&gt;&lt;code&gt;offset&lt;/code&gt;&lt;/em&gt; is negative, subpath starts that far from the end of the path. If &lt;em&gt;&lt;code&gt;len&lt;/code&gt;&lt;/em&gt; is negative, leaves that many labels off the end of the path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="148d46fb75d907f1fd6bcb109cb532d2ed504a21" translate="yes" xml:space="preserve">
          <source>subtraction</source>
          <target state="translated">subtraction</target>
        </trans-unit>
        <trans-unit id="65d1e029a91246a971c572acd9ec3d08d257f763" translate="yes" xml:space="preserve">
          <source>sum of &lt;code&gt;expression&lt;/code&gt; across all non-null input values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09f5c2fc49e7c07dd883faf65026ffe4105202a6" translate="yes" xml:space="preserve">
          <source>summarize page ranges not already summarized</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c24280a4a78ffdc75c705d5e8ce72de573b9991a" translate="yes" xml:space="preserve">
          <source>summarize the page range covering the given block, if not already summarized</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c87e21d0d6de8652d2e01dca2c7ebde52c0aa50" translate="yes" xml:space="preserve">
          <source>summary of client authentication configuration file contents</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58142ece3d6a908aba0b58fc5cad299c6174210e" translate="yes" xml:space="preserve">
          <source>summary of configuration file contents</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e04e42dee218dde251ef4ebdcb76ed806dcd11e5" translate="yes" xml:space="preserve">
          <source>superuser status</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5326eb908107f97478c23d9b99f7cb41cf4644c3" translate="yes" xml:space="preserve">
          <source>synonym for backslash (&lt;code&gt;\&lt;/code&gt;) to help reduce the need for backslash doubling</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0543ba22ccc80a5d2365241ee2adb754f80be19" translate="yes" xml:space="preserve">
          <source>syslog</source>
          <target state="translated">syslog</target>
        </trans-unit>
        <trans-unit id="b5f19ccea91f97d4b15d06255ee16e18d4f5df7e" translate="yes" xml:space="preserve">
          <source>t_cid</source>
          <target state="translated">t_cid</target>
        </trans-unit>
        <trans-unit id="3566c3333b7c1e7dc546f8fd79009bce96d3a9f1" translate="yes" xml:space="preserve">
          <source>t_ctid</source>
          <target state="translated">t_ctid</target>
        </trans-unit>
        <trans-unit id="906c2d9bf143985320f3172f192daac3e80b12eb" translate="yes" xml:space="preserve">
          <source>t_hoff</source>
          <target state="translated">t_hoff</target>
        </trans-unit>
        <trans-unit id="218215b970a0f483facba84ec4d966687ecce7a8" translate="yes" xml:space="preserve">
          <source>t_infomask</source>
          <target state="translated">t_infomask</target>
        </trans-unit>
        <trans-unit id="55cda73bf8273d254cca1cabe30439d075274f02" translate="yes" xml:space="preserve">
          <source>t_infomask2</source>
          <target state="translated">t_infomask2</target>
        </trans-unit>
        <trans-unit id="f688b8f7e24c0430b3539f7001dfaab559aef213" translate="yes" xml:space="preserve">
          <source>t_xmax</source>
          <target state="translated">t_xmax</target>
        </trans-unit>
        <trans-unit id="3e027aae59957e2fe3d0ceca25224da26dc08f92" translate="yes" xml:space="preserve">
          <source>t_xmin</source>
          <target state="translated">t_xmin</target>
        </trans-unit>
        <trans-unit id="ac0ede48d7d4858148c9f1d118fd54633957d4ec" translate="yes" xml:space="preserve">
          <source>t_xvac</source>
          <target state="translated">t_xvac</target>
        </trans-unit>
        <trans-unit id="e974602114f14fbf55401c109937e173b1b23220" translate="yes" xml:space="preserve">
          <source>tab</source>
          <target state="translated">tab</target>
        </trans-unit>
        <trans-unit id="539f190c6cfa469da7783a58b84a11ba6723b3ed" translate="yes" xml:space="preserve">
          <source>table columns (&amp;ldquo;attributes&amp;rdquo;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6044dcccc38779772fabb83f940da1325990ecdf" translate="yes" xml:space="preserve">
          <source>table inheritance hierarchy</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f21cabf566df4a25de1bab1e0837d3989e5dc66b" translate="yes" xml:space="preserve">
          <source>table rows</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fbbef6781f1813071bdc92cdf08e9b81d54c1f1" translate="yes" xml:space="preserve">
          <source>table rows and row locks</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10cc15a4361cbd00043d8d62255c92110f6cc283" translate="yes" xml:space="preserve">
          <source>table/column name separator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a84340fb304f44925184800129598d97f49a2b4" translate="yes" xml:space="preserve">
          <source>tablefunc</source>
          <target state="translated">tablefunc</target>
        </trans-unit>
        <trans-unit id="3915396b5fe58dce8505b3e62c31b4f79b3ccc2c" translate="yes" xml:space="preserve">
          <source>tables</source>
          <target state="translated">tables</target>
        </trans-unit>
        <trans-unit id="3eb23c4bab7e32930a985de5e12e792e44e167aa" translate="yes" xml:space="preserve">
          <source>tables, indexes, sequences, views (&amp;ldquo;relations&amp;rdquo;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e05d28c3042a9932c72923ff3735eb14986d9865" translate="yes" xml:space="preserve">
          <source>tablespaces within this database cluster</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04a662df36aeb5b23cf012b1ff916de932b16f68" translate="yes" xml:space="preserve">
          <source>tangent</source>
          <target state="translated">tangent</target>
        </trans-unit>
        <trans-unit id="cd0fa5ece2c6e9528c815c5ea2f02656d4885419" translate="yes" xml:space="preserve">
          <source>tcn</source>
          <target state="translated">tcn</target>
        </trans-unit>
        <trans-unit id="c5db23c752c68e4d55538e93bfa3ce941678aa84" translate="yes" xml:space="preserve">
          <source>template data for procedural languages</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8eea0dbe1b0e9a919b18d7021f82a37a6d7c7718" translate="yes" xml:space="preserve">
          <source>test a configuration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd37c37fecb0d96a58174a99ee410100079e48fc" translate="yes" xml:space="preserve">
          <source>test a dictionary</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fda4b2d759b71d3f97140244c5f3ec627c2b55f3" translate="yes" xml:space="preserve">
          <source>test a parser</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01ee0ff2889bfeb9730ae8ee3f6a11e6a75c4329" translate="yes" xml:space="preserve">
          <source>test whether an index access method has a specified property</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6369d5568ef487e68f0502b41cd4c863cb98d191" translate="yes" xml:space="preserve">
          <source>test whether an index column has a specified property</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a78395943c148a0e65cc0b00b33b2dc5c67c724" translate="yes" xml:space="preserve">
          <source>test whether an index has a specified property</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="136e386e2bd42653ff2f4bb324e89751746b5a98" translate="yes" xml:space="preserve">
          <source>test_decoding</source>
          <target state="translated">test_decoding</target>
        </trans-unit>
        <trans-unit id="3c7bb6a0fede2d554560499fd4fb3f4027e84dd9" translate="yes" xml:space="preserve">
          <source>text of the currently executing query, as submitted by the client (might contain more than one statement)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="262239a41b135d05790ef69def8268bf051ef132" translate="yes" xml:space="preserve">
          <source>text search configuration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc59c4b8921d0c5c108d497968cc5eca63c40a45" translate="yes" xml:space="preserve">
          <source>text search configurations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f423eeeef1ded8a7df8e347ea3b02639ee83a76" translate="yes" xml:space="preserve">
          <source>text search configurations' token mappings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a90227c13fd84c9cc0f3eed6e793c54b874bc0c" translate="yes" xml:space="preserve">
          <source>text search dictionaries</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c173e71038b608a5c1c0b8b5fd855e11d8eb7b20" translate="yes" xml:space="preserve">
          <source>text search dictionary</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a475eff8ebd03c8c3c3373631c481d09aca484e9" translate="yes" xml:space="preserve">
          <source>text search document</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d90e6d4122e65f9b7d5edeea7b27dfadab2bfb2" translate="yes" xml:space="preserve">
          <source>text search parsers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1eaf6a8a449804f77d406cbabc050e21c053c5da" translate="yes" xml:space="preserve">
          <source>text search query</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dfaa13ffd2afb6f6dd51c3343b0a8fd4173e0dd" translate="yes" xml:space="preserve">
          <source>text search templates</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ccd4b9b1fc8d97f17bea17bb0147fb21fb6ee0f" translate="yes" xml:space="preserve">
          <source>textual JSON data</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="327dd5dc64b82107d30da0f7b5b23a327a33f652" translate="yes" xml:space="preserve">
          <source>that is, one whole bucket plus a linear fraction of the second, divided by the number of buckets. The estimated number of rows can now be calculated as the product of the selectivity and the cardinality of &lt;code&gt;tenk1&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13aaac9452dafc1adedc1cb992241d4d10016515" translate="yes" xml:space="preserve">
          <source>the &lt;code&gt;&amp;lt;&lt;/code&gt; comparison is performed according to &lt;code&gt;de_DE&lt;/code&gt; rules, because the expression combines an implicitly derived collation with the default collation. But in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3a0853b309b91e750aa6c995b1ed30221e3d7fb" translate="yes" xml:space="preserve">
          <source>the &lt;code&gt;OPERATOR&lt;/code&gt; construct is taken to have the default precedence shown in &lt;a href=&quot;sql-syntax-lexical#SQL-PRECEDENCE-TABLE&quot;&gt;Table 4.2&lt;/a&gt; for &amp;ldquo;any other operator&amp;rdquo;. This is true no matter which specific operator appears inside &lt;code&gt;OPERATOR()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="692d3dbb22fcf56525bbfdad2ab865e41fbfb12a" translate="yes" xml:space="preserve">
          <source>the &lt;code&gt;WITH&lt;/code&gt; query will be materialized, producing a temporary copy of &lt;code&gt;big_table&lt;/code&gt; that is then joined with itself &amp;mdash; without benefit of any index. This query will be executed much more efficiently if written as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68a3e816bafbbd38d1315ac2b7739fca48d634f2" translate="yes" xml:space="preserve">
          <source>the SQL/JSON path language</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfd6f4954706a27f3fed453664626de5f684d01e" translate="yes" xml:space="preserve">
          <source>the average (arithmetic mean) of all non-null input values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e121256ee6598dbd950a22c0a77e7b4b0350e572" translate="yes" xml:space="preserve">
          <source>the bitwise AND of all non-null input values, or null if none</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cef86adb7c1a5ce3f1811981d8674ac103930aa" translate="yes" xml:space="preserve">
          <source>the bitwise OR of all non-null input values, or null if none</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccb4720bc22a556d25cbe1a747ae19fc5c271450" translate="yes" xml:space="preserve">
          <source>the character whose collating-sequence name is &lt;code&gt;ESC&lt;/code&gt;, or failing that, the character with octal value &lt;code&gt;033&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e48210f07eb6dca117738a3754973042871ed42c" translate="yes" xml:space="preserve">
          <source>the character whose value is &lt;code&gt;0&lt;/code&gt; (the null byte)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc943613073c0cf4c6ae229720a8ca8e66b2c2ab" translate="yes" xml:space="preserve">
          <source>the comparison is performed using &lt;code&gt;fr_FR&lt;/code&gt; rules, because the explicit collation derivation overrides the implicit one. Furthermore, given</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67f903fa66c74bd798e19bdd9417f38e203398e4" translate="yes" xml:space="preserve">
          <source>the contents of the WHERE clause. This cannot be omitted, so use &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;1=1&lt;/code&gt; if you want to process all the rows in the relation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf8bcd18127e475c226093573533808203171701" translate="yes" xml:space="preserve">
          <source>the estimated cost and row count for the Index Scan node are shown as though it were run to completion. But in reality the Limit node stopped requesting rows after it got two, so the actual row count is only 2 and the run time is less than the cost estimate would suggest. This is not an estimation error, only a discrepancy in the way the estimates and true values are displayed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="307b7b912d469ebb074397ba0e4ce4d2b7c7d8fd" translate="yes" xml:space="preserve">
          <source>the name of the &amp;ldquo;key&amp;rdquo; field &amp;mdash; this is just a field to be used as the first column of the output table, i.e., it identifies the record from which each output row came (see note below about multiple values)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f232d9d562d9367d1dc1d3b757de968dbe7eba7a" translate="yes" xml:space="preserve">
          <source>the name of the field containing the XML document</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4add5db060b3f4241ef36678355329244966dc1" translate="yes" xml:space="preserve">
          <source>the name of the table or view containing the documents</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfdc5bc44c2880cc5dae08ec8961eb2ab399a3f7" translate="yes" xml:space="preserve">
          <source>the new PostgreSQL executable directory; environment variable &lt;code&gt;PGBINNEW&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eef95f709069bb1666ba77bdce6f9f945b42f62f" translate="yes" xml:space="preserve">
          <source>the new cluster port number; environment variable &lt;code&gt;PGPORTNEW&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="047de36a4c83d7de99f696d8e01f43a0bc061673" translate="yes" xml:space="preserve">
          <source>the new database cluster configuration directory; environment variable &lt;code&gt;PGDATANEW&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16c62222ab02e25661dde573b5c8e6c3a3d1a3ad" translate="yes" xml:space="preserve">
          <source>the old PostgreSQL executable directory; environment variable &lt;code&gt;PGBINOLD&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1064b361d7619de39dcff5be794668d124216960" translate="yes" xml:space="preserve">
          <source>the old cluster port number; environment variable &lt;code&gt;PGPORTOLD&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58793dcee0d39f4a57ec2eae4c6562b49ae428bf" translate="yes" xml:space="preserve">
          <source>the old database cluster configuration directory; environment variable &lt;code&gt;PGDATAOLD&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50a49416dffc3fc516dc2db500e43a1d23fb67a8" translate="yes" xml:space="preserve">
          <source>the ordering will be done according to &lt;code&gt;de_DE&lt;/code&gt; rules. But this query:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d6b9af88d7b3358ed10a1ac78512d2e224067ae" translate="yes" xml:space="preserve">
          <source>the outer &lt;code&gt;SELECT&lt;/code&gt; would return the original prices before the action of the &lt;code&gt;UPDATE&lt;/code&gt;, while in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e0353aea2c20b6763d8c7f7b14c65ae7297a6f1" translate="yes" xml:space="preserve">
          <source>the outer &lt;code&gt;SELECT&lt;/code&gt; would return the updated data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a5ed5fd0a8e425db5af03a91264aaa32fda43c6" translate="yes" xml:space="preserve">
          <source>the parser cannot determine which collation to apply, since the &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; columns have conflicting implicit collations. Since the &lt;code&gt;&amp;lt;&lt;/code&gt; operator does need to know which collation to use, this will result in an error. The error can be resolved by attaching an explicit collation specifier to either input expression, thus:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="449a2bf2bd22fbd6eb33a3054acb7a3d9eb99581" translate="yes" xml:space="preserve">
          <source>the planner is free to join the given tables in any order. For example, it could generate a query plan that joins A to B, using the &lt;code&gt;WHERE&lt;/code&gt; condition &lt;code&gt;a.id = b.id&lt;/code&gt;, and then joins C to this joined table, using the other &lt;code&gt;WHERE&lt;/code&gt; condition. Or it could join B to C and then join A to that result. Or it could join A to C and then join them with B &amp;mdash; but that would be inefficient, since the full Cartesian product of A and C would have to be formed, there being no applicable condition in the &lt;code&gt;WHERE&lt;/code&gt; clause to allow optimization of the join. (All joins in the PostgreSQL executor happen between two input tables, so it's necessary to build up the result in one or another of these fashions.) The important point is that these different join possibilities give semantically equivalent results but might have hugely different execution costs. Therefore, the planner will explore all of them to try to find the most efficient query plan.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fea5fc0258f7fff14a4bf4c6b5adb0eddd4ecc8" translate="yes" xml:space="preserve">
          <source>the planner will disregard the &lt;code&gt;city&lt;/code&gt; clause as not changing the selectivity, which is correct. However, it will make the same assumption about</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68d57bf578d30a6a56c4aeb65e05915bea7742be" translate="yes" xml:space="preserve">
          <source>the session would have use of only those privileges granted to &lt;code&gt;admin&lt;/code&gt;, and not those granted to &lt;code&gt;joe&lt;/code&gt;. After:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="deff53370899ab0952270a9c1e224bf7c655df0c" translate="yes" xml:space="preserve">
          <source>the session would have use of only those privileges granted to &lt;code&gt;wheel&lt;/code&gt;, and not those granted to either &lt;code&gt;joe&lt;/code&gt; or &lt;code&gt;admin&lt;/code&gt;. The original privilege state can be restored with any of:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17a629578dc1ac76e946c713046793a9150b785f" translate="yes" xml:space="preserve">
          <source>the smallest network which includes both of the given networks</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e174768520268ac2fa949a909a94d5d4ee88b6c" translate="yes" xml:space="preserve">
          <source>the smallest range which includes both of the given ranges</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fc28ad78efaa5e3b63b3b1348a9b0a8c5c3ce00" translate="yes" xml:space="preserve">
          <source>the string must begin with &lt;code&gt;P&lt;/code&gt;, and a &lt;code&gt;T&lt;/code&gt; separates the date and time parts of the interval. The values are given as numbers similar to ISO 8601 dates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="674c279997ed5c86b11d56ba540cf11094276d75" translate="yes" xml:space="preserve">
          <source>the traditional approach to speeding up such queries would be to create an index on &lt;code&gt;x&lt;/code&gt; only. However, an index defined as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="862685a78a839c855a395d7bb986bbab1ed890d8" translate="yes" xml:space="preserve">
          <source>the uniqueness condition applies to just column &lt;code&gt;x&lt;/code&gt;, not to the combination of &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;. (An &lt;code&gt;INCLUDE&lt;/code&gt; clause can also be written in &lt;code&gt;UNIQUE&lt;/code&gt; and &lt;code&gt;PRIMARY KEY&lt;/code&gt; constraints, providing alternative syntax for setting up an index like this.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fe91804ad697d3116d66bcc7e8fa7c5c0ed77c2" translate="yes" xml:space="preserve">
          <source>the whitespace will be ignored if the field type is integer, but not if it is text.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad76f53ea805e426301ceff5c8ced8f35125123c" translate="yes" xml:space="preserve">
          <source>then &lt;code&gt;somefunc()&lt;/code&gt; would (probably) not be called at all. The same would be the case if one wrote:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="089585ade96141f6137202b19b0f873716bd658f" translate="yes" xml:space="preserve">
          <source>then PostgreSQL was not installed properly. Either it was not installed at all or your shell's search path was not set to include it. Try calling the command with an absolute path instead:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e46e625b31bfd81aaa584e64018e61cbb218ea95" translate="yes" xml:space="preserve">
          <source>then a label not matching &lt;code&gt;football&lt;/code&gt; nor &lt;code&gt;tennis&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b6bcdb33f5018845232e3051cc52aaf65bb775a" translate="yes" xml:space="preserve">
          <source>then all rows in the table will be deleted! Caveat programmer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40fb4ee6aa859598a9c37c1fbc825bacd5ddfef0" translate="yes" xml:space="preserve">
          <source>then it might be appropriate to define an index on the columns &lt;code&gt;major&lt;/code&gt; and &lt;code&gt;minor&lt;/code&gt; together, e.g.:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d27e7c457c4a52c8a6bde4f641352725f47fd06" translate="yes" xml:space="preserve">
          <source>then it might be worth creating an index like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa9dbd83d7e426c2e83718b8ab3bc0f8a4c4a8a1" translate="yes" xml:space="preserve">
          <source>then the same &lt;code&gt;inventory_item&lt;/code&gt; composite type shown above would come into being as a byproduct, and could be used just as above. Note however an important restriction of the current implementation: since no constraints are associated with a composite type, the constraints shown in the table definition &lt;em&gt;do not apply&lt;/em&gt; to values of the composite type outside the table. (To work around this, create a domain over the composite type, and apply the desired constraints as &lt;code&gt;CHECK&lt;/code&gt; constraints of the domain.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eac39d4ad084d724fa0bcd581aae9b198ada8a10" translate="yes" xml:space="preserve">
          <source>then value &lt;code&gt;i&lt;/code&gt; between &lt;code&gt;min&lt;/code&gt; and &lt;code&gt;max&lt;/code&gt; inclusive is drawn with probability: &lt;code&gt;f(i + 0.5) - f(i - 0.5)&lt;/code&gt;. Intuitively, the larger the &lt;code&gt;parameter&lt;/code&gt;, the more frequently values close to the middle of the interval are drawn, and the less frequently values close to the &lt;code&gt;min&lt;/code&gt; and &lt;code&gt;max&lt;/code&gt; bounds. About 67% of values are drawn from the middle &lt;code&gt;1.0 / parameter&lt;/code&gt;, that is a relative &lt;code&gt;0.5 / parameter&lt;/code&gt; around the mean, and 95% in the middle &lt;code&gt;2.0 / parameter&lt;/code&gt;, that is a relative &lt;code&gt;1.0 / parameter&lt;/code&gt; around the mean; for instance, if &lt;code&gt;parameter&lt;/code&gt; is 4.0, 67% of values are drawn from the middle quarter (1.0 / 4.0) of the interval (i.e. from &lt;code&gt;3.0 / 8.0&lt;/code&gt; to &lt;code&gt;5.0 / 8.0&lt;/code&gt;) and 95% from the middle half (&lt;code&gt;2.0 / 4.0&lt;/code&gt;) of the interval (second and third quartiles). The minimum allowed &lt;code&gt;parameter&lt;/code&gt; value is 2.0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d38e3b26d1226acb500b8ee6071a2d7ca057630c" translate="yes" xml:space="preserve">
          <source>then we get the following results for the various joins:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52e8a28cfc35c704e96d85d3c117771bbe4ebb21" translate="yes" xml:space="preserve">
          <source>then, according to the SQL standard, we should get the contents of the table expanded into separate columns:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad9d61c37bc7476b78610e5e4bdf997896c037ca" translate="yes" xml:space="preserve">
          <source>there is nothing to identify what type the string literal should be taken as. In this situation PostgreSQL will fall back to resolving the literal's type as &lt;code&gt;text&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="675ae7350f8af3e66ccdba7a28d3aa802f8f059c" translate="yes" xml:space="preserve">
          <source>tight syntax (default; see below)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac0ebd8468baebb9491a07eddd92e75f6c726bac" translate="yes" xml:space="preserve">
          <source>time interval</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ee1ea35bb76355841bda6b830868fe71c0df836" translate="yes" xml:space="preserve">
          <source>time of day (no date)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="910c8c87788d6880db6b5dd0f0b8468a7eed8f9d" translate="yes" xml:space="preserve">
          <source>time of day (no date), with time zone</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e19861055f3ca8cb07211edc3d29e31ce26e5694" translate="yes" xml:space="preserve">
          <source>time of day (no time zone)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a541446be0ba0374ced11a39b31e0e7e6e4d50f" translate="yes" xml:space="preserve">
          <source>time of day, including time zone</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d5cd61c60ddd9ec810d1fca1879a37f916186dd" translate="yes" xml:space="preserve">
          <source>time span</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d45347beab7f84762668f97f8b6d14328b6f586" translate="yes" xml:space="preserve">
          <source>time with time zone</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70201cff3483f8665e789ead1e8e4ba5bf8e02b8" translate="yes" xml:space="preserve">
          <source>time zone abbreviations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="882133be8af8c2816ca9e7b0fe6e3556c221875f" translate="yes" xml:space="preserve">
          <source>time zone names</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76023cb1359236643e55b8eee9559becc6cc116e" translate="yes" xml:space="preserve">
          <source>time zone specified by abbreviation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a39b9dd941c047cf9f8e54b8e8208c0ffeefad77" translate="yes" xml:space="preserve">
          <source>time zone specified by full name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="849d0277d4e83cea63b503c63ca3a5f178f90513" translate="yes" xml:space="preserve">
          <source>time-zone hours</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="476c5260af0bb6664ae31f8adf0c99c7d8aa6ae3" translate="yes" xml:space="preserve">
          <source>time-zone minutes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="625acb81057beef248f7134ca433ae4c0eac60d9" translate="yes" xml:space="preserve">
          <source>time-zone offset from UTC (only supported in &lt;code&gt;to_char&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5a01b8fa531faad566300a7eedefd11c4d01fde" translate="yes" xml:space="preserve">
          <source>timestamp</source>
          <target state="translated">timestamp</target>
        </trans-unit>
        <trans-unit id="0aa7ed235161236970521752f6ca1a03278bc01b" translate="yes" xml:space="preserve">
          <source>timestamp with time zone</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ce1805e4b5f351a0fb46c7e0a05beff1a2be153" translate="yes" xml:space="preserve">
          <source>to &lt;code&gt;/etc/rc.d/rc.local&lt;/code&gt; or &lt;code&gt;/etc/rc.local&lt;/code&gt; or look at the file &lt;code&gt;contrib/start-scripts/linux&lt;/code&gt; in the PostgreSQL source distribution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fcbadcafadd255fb5e353fa4b0362465f703b4e" translate="yes" xml:space="preserve">
          <source>to examine the parameters and current state of a sequence. In particular, the &lt;code&gt;last_value&lt;/code&gt; field of the sequence shows the last value allocated by any session. (Of course, this value might be obsolete by the time it's printed, if other sessions are actively doing &lt;code&gt;nextval&lt;/code&gt; calls.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14b5a6198c6c0d08f07e8c09b6ad956c7163ac63" translate="yes" xml:space="preserve">
          <source>to rename the directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e73046f279ae0b6763a76622a0704ea4fdbac3ea" translate="yes" xml:space="preserve">
          <source>to the syslog daemon's configuration file to make it work.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7538bfc3fa9519e0550e749442775baecca74119" translate="yes" xml:space="preserve">
          <source>to transfer your data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8abc79f7e7ece86c6a1a14ee58503cf82eeb5966" translate="yes" xml:space="preserve">
          <source>traditional style</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25be3224e355ab745c855819c72ea60b3f346faa" translate="yes" xml:space="preserve">
          <source>transforms (data type to procedural language conversions)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d474687adece4246be7a0f43e5cdf88a135d3672" translate="yes" xml:space="preserve">
          <source>translation mode (print localized day and month names based on &lt;a href=&quot;runtime-config-client#GUC-LC-TIME&quot;&gt;lc_time&lt;/a&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="608430456776b767a45cfe44d2daf36d0aea1581" translate="yes" xml:space="preserve">
          <source>trigger function for automatic &lt;code&gt;tsvector&lt;/code&gt; column update</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d850d1fb8c4564a96bca7874d3015c0176cbdd0" translate="yes" xml:space="preserve">
          <source>triggers</source>
          <target state="translated">triggers</target>
        </trans-unit>
        <trans-unit id="9546575366698be9dc3339385ecc226802ffce6e" translate="yes" xml:space="preserve">
          <source>true if all input values are true, otherwise false</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0ed3d53c4e2a2ba679a3d31f68b49bcc000d1f2" translate="yes" xml:space="preserve">
          <source>true if at least one input value is true, otherwise false</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="676f3dd71ebf9aaf4b17b5a32c43ba35b85b2858" translate="yes" xml:space="preserve">
          <source>truncate to &lt;em&gt;&lt;code&gt;s&lt;/code&gt;&lt;/em&gt; decimal places</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f277633b773b878ad72f1b39c1e59ee5f87fe70" translate="yes" xml:space="preserve">
          <source>truncate toward zero</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc8761dd806bfc6e9c7818b4d00e5c9c77f32b19" translate="yes" xml:space="preserve">
          <source>trusted certificate authorities</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7fc787c0791506254f82d1f6cdec70e8766fe7a" translate="yes" xml:space="preserve">
          <source>tsm_system_rows</source>
          <target state="translated">tsm_system_rows</target>
        </trans-unit>
        <trans-unit id="c921d28508e9dd5ecf35e231b94a62cbd32ce141" translate="yes" xml:space="preserve">
          <source>tsm_system_time</source>
          <target state="translated">tsm_system_time</target>
        </trans-unit>
        <trans-unit id="f973befd080b2f010e4ad1b799afb0b8c2fb8567" translate="yes" xml:space="preserve">
          <source>tsquery</source>
          <target state="translated">tsquery</target>
        </trans-unit>
        <trans-unit id="583abee19c6b93555cf1156e26e4af8002a6a95c" translate="yes" xml:space="preserve">
          <source>tsvector</source>
          <target state="translated">tsvector</target>
        </trans-unit>
        <trans-unit id="e8dd9c53392235b67f66d1f5dbcc7f67180bd94c" translate="yes" xml:space="preserve">
          <source>txid_snapshot</source>
          <target state="translated">txid_snapshot</target>
        </trans-unit>
        <trans-unit id="12fcab458227ac117050daf9e3d6590c92085efd" translate="yes" xml:space="preserve">
          <source>typical choice for integer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ffb20caf93251ba7e5c57f747ba85d7f5bc1c05" translate="yes" xml:space="preserve">
          <source>uint16</source>
          <target state="translated">uint16</target>
        </trans-unit>
        <trans-unit id="e0c0463b32fc07d8d003fd3d7c2aafeee72b97c5" translate="yes" xml:space="preserve">
          <source>uint8</source>
          <target state="translated">uint8</target>
        </trans-unit>
        <trans-unit id="47d947d7a7bc349d6556615c0b97b33f01b72bb8" translate="yes" xml:space="preserve">
          <source>unaccent</source>
          <target state="translated">unaccent</target>
        </trans-unit>
        <trans-unit id="4733d5969a0631154730f80662597dcf64f61a4f" translate="yes" xml:space="preserve">
          <source>unambiguous in any &lt;code&gt;datestyle&lt;/code&gt; input mode</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f35d00dc17da97aae84ee915e465c1cc5e7e477" translate="yes" xml:space="preserve">
          <source>unary plus, unary minus</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="deaaf5ecd475cc19cfe8dc6939345ab56aa84c13" translate="yes" xml:space="preserve">
          <source>uniformly-distributed random integer in &lt;code&gt;[lb, ub]&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67ad5a07a2b999e38f2228365318c33459ab727a" translate="yes" xml:space="preserve">
          <source>union</source>
          <target state="translated">union</target>
        </trans-unit>
        <trans-unit id="5db7298da48ddfb62e71af9cb857bcb096433248" translate="yes" xml:space="preserve">
          <source>union of arguments</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9c7a5b4c45a634dab61330755c4014c3fd7e21c" translate="yes" xml:space="preserve">
          <source>union of arrays</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23b91e19c57aced544a7f5e44fe3c7966c16869d" translate="yes" xml:space="preserve">
          <source>unique number identifying the client session (starts from zero)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f75603856194fe1878bcadff1a5fededf8734ef" translate="yes" xml:space="preserve">
          <source>universally unique identifier</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1a6f0b6f73a57a8b3ee30419e28f6cb95143908" translate="yes" xml:space="preserve">
          <source>unlimited</source>
          <target state="translated">unlimited</target>
        </trans-unit>
        <trans-unit id="06647ef63369928e96eb9c3870dbd7bd9e93df8a" translate="yes" xml:space="preserve">
          <source>unspecified (see text)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6a8e0866f7f03293a30849bc162a8c2f4818fc5" translate="yes" xml:space="preserve">
          <source>up to 131072 digits before the decimal point; up to 16383 digits after the decimal point</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b42a5d7fe096994a11b818473f2669928a5dba69" translate="yes" xml:space="preserve">
          <source>upper bound of range</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30cfd923f02de39cecf439b115b7cf828835d142" translate="yes" xml:space="preserve">
          <source>upper case ordinal number suffix</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae12ab34a766a4939271ced9061de451e3fa0944" translate="yes" xml:space="preserve">
          <source>upper case time-zone abbreviation (only supported in &lt;code&gt;to_char&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d449e34fd3b092418b5a2a566608d763a55317b" translate="yes" xml:space="preserve">
          <source>use hard links instead of copying files to the new cluster</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4973dcc07764d6816796626f62ae369e27f7526" translate="yes" xml:space="preserve">
          <source>user mappings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca7b0e484889d9f7667e415fdb65ec333f91c3af" translate="yes" xml:space="preserve">
          <source>user name of current execution context</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ecdf2ca9fee52b2cac0d8dd1d9845660e313a12" translate="yes" xml:space="preserve">
          <source>user-level transaction ID snapshot</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bcd853384b0d1306c229db53057e92c809d9e95" translate="yes" xml:space="preserve">
          <source>user-specified precision, exact</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8782baefd5b9fb265c66ecc34780fd0b8a1dbc87" translate="yes" xml:space="preserve">
          <source>using the &lt;em&gt;new&lt;/em&gt; psql.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a046c43e9c192caf6bd401480cc0f5fad7ceec8a" translate="yes" xml:space="preserve">
          <source>uuid-ossp</source>
          <target state="translated">uuid-ossp</target>
        </trans-unit>
        <trans-unit id="8f0faf3a7751e4af5b9c227d30bfcbaa444edd84" translate="yes" xml:space="preserve">
          <source>vacuumdb</source>
          <target state="translated">vacuumdb</target>
        </trans-unit>
        <trans-unit id="145988faa1e40e7ddecb2ea65b7c51807c3271cb" translate="yes" xml:space="preserve">
          <source>vacuumdb &amp;mdash; garbage-collect and analyze a PostgreSQL database</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5c778a21d37b9be0e61c44b2474a01bfe05b692" translate="yes" xml:space="preserve">
          <source>vacuumdb accepts the following command-line arguments:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93abf036b734fe132167e900b4c0fba2398d2224" translate="yes" xml:space="preserve">
          <source>vacuumdb also accepts the following command-line arguments for connection parameters:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1528a6903cc3a4ec373552daced8a437d4c5cafd" translate="yes" xml:space="preserve">
          <source>vacuumdb is a utility for cleaning a PostgreSQL database. vacuumdb will also generate internal statistics used by the PostgreSQL query optimizer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c3547b30c049ff8ffce05ab606ec48070300fed" translate="yes" xml:space="preserve">
          <source>vacuumdb is a wrapper around the SQL command &lt;a href=&quot;sql-vacuum&quot;&gt;VACUUM&lt;/a&gt;. There is no effective difference between vacuuming and analyzing databases via this utility and via other methods for accessing the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c5fb8d56ab327b2f14d361fe631ab7a16e896a2" translate="yes" xml:space="preserve">
          <source>vacuumdb might need to connect several times to the PostgreSQL server, asking for a password each time. It is convenient to have a &lt;code&gt;~/.pgpass&lt;/code&gt; file in such cases. See &lt;a href=&quot;https://www.postgresql.org/docs/12/libpq-pgpass.html&quot;&gt;Section 33.15&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f46818d78f22eaf25aea8864f72802c46059e9c3" translate="yes" xml:space="preserve">
          <source>vacuumdb will open &lt;code&gt;njobs&lt;/code&gt; connections to the database, so make sure your &lt;a href=&quot;runtime-config-connection#GUC-MAX-CONNECTIONS&quot;&gt;max_connections&lt;/a&gt; setting is high enough to accommodate all connections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df99bb033a353b66cc7ec2ee85cd87fb87542059" translate="yes" xml:space="preserve">
          <source>value of the constant PI</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8279b9e0fcc10e814e566b08c3a4a690bc1ceca1" translate="yes" xml:space="preserve">
          <source>value tests</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="551c3faca5896d7034c0ce682bd144af83b995d8" translate="yes" xml:space="preserve">
          <source>values stored in the MCV item</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b46d0172433dd6895dac7544b9dacbb87b361e9f" translate="yes" xml:space="preserve">
          <source>variable</source>
          <target state="translated">variable</target>
        </trans-unit>
        <trans-unit id="7298df2d9cff6d1a98ebb8f3292bdd052dda2f66" translate="yes" xml:space="preserve">
          <source>variable unlimited length</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c33a839f17cccf416f33c1ff72d670667eaa6316" translate="yes" xml:space="preserve">
          <source>variable-length binary string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82e998f6547837b4bb250aed85de1f06e90b526b" translate="yes" xml:space="preserve">
          <source>variable-length bit string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8c9e9056b1fc953c6624f2a90d33200eccefab2" translate="yes" xml:space="preserve">
          <source>variable-length character string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0383de504e58025d45eb9992e372542a0abf7899" translate="yes" xml:space="preserve">
          <source>variable-length with limit</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b50074f44d7610d791284812510de93631d572ef" translate="yes" xml:space="preserve">
          <source>variable-precision, inexact</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="793813d775cb84067082961ebfb6d08120f27fae" translate="yes" xml:space="preserve">
          <source>various flag bits</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e9847031591279c4882662842e6bb8b45759840" translate="yes" xml:space="preserve">
          <source>vertical size of box</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="935fc2d7ce72de659cb2219b67b2ae35cb7c8cc3" translate="yes" xml:space="preserve">
          <source>vertical tab, as in C</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1bad95fa507072f46712bded24f41b01216bc69" translate="yes" xml:space="preserve">
          <source>via the &lt;a href=&quot;sql-declare&quot;&gt;DECLARE&lt;/a&gt; statement in SQL</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7578d82766f9bd29c639036328b849ce29a39304" translate="yes" xml:space="preserve">
          <source>via the Bind message in the frontend/backend protocol, as described in &lt;a href=&quot;https://www.postgresql.org/docs/12/protocol-flow.html#PROTOCOL-FLOW-EXT-QUERY&quot;&gt;Section 52.2.3&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a28d981942e491b947c92a0e2f3f7947ce1c9893" translate="yes" xml:space="preserve">
          <source>via the Server Programming Interface (SPI), as described in &lt;a href=&quot;https://www.postgresql.org/docs/12/spi-interface.html&quot;&gt;Section 46.1&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81f33187147211336a4984d8ab8fccdfeb11a42c" translate="yes" xml:space="preserve">
          <source>views</source>
          <target state="translated">views</target>
        </trans-unit>
        <trans-unit id="6e7a9821d49ea8d70b1ce202fbb6c4bbe7a8864d" translate="yes" xml:space="preserve">
          <source>week number of ISO 8601 week-numbering year (01-53; the first Thursday of the year is in week 1)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcf0a4257eaf2654515093d684fc76c3f351114a" translate="yes" xml:space="preserve">
          <source>week number of year (1-53) (the first week starts on the first day of the year)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e36af5a529b747070a5db3558591e88d36bb68b6" translate="yes" xml:space="preserve">
          <source>week of month (1-5) (the first week starts on the first day of the month)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="428b9e698aec6af472173b26531814f7afdee96a" translate="yes" xml:space="preserve">
          <source>when followed by a character other than a digit, matches the left-brace character &lt;code&gt;{&lt;/code&gt;; when followed by a digit, it is the beginning of a &lt;code&gt;bound&lt;/code&gt; (see below)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="364c8705353be0aad06a99befe16e732767f00ac" translate="yes" xml:space="preserve">
          <source>when written as a column constraint, and:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e1ec19a99583071720740b9242482fdde3817c6" translate="yes" xml:space="preserve">
          <source>when written as a table constraint.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f8a66e7adff2f3b4d4dcb113d02b2e17f726203" translate="yes" xml:space="preserve">
          <source>where &lt;code&gt;(x,y)&lt;/code&gt; is the center point and &lt;code&gt;r&lt;/code&gt; is the radius of the circle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd37643d0dd6010b481c08b474014ac24270a823" translate="yes" xml:space="preserve">
          <source>where &lt;code&gt;(x1,y1)&lt;/code&gt; and &lt;code&gt;(x2,y2)&lt;/code&gt; are any two opposite corners of the box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18182ac0abf5fa69da0135991df6a4b42daf0796" translate="yes" xml:space="preserve">
          <source>where &lt;code&gt;(x1,y1)&lt;/code&gt; and &lt;code&gt;(x2,y2)&lt;/code&gt; are the end points of the line segment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd0a33de1e918a3a5dbe460c4835d4bab41aef8b" translate="yes" xml:space="preserve">
          <source>where &lt;code&gt;(x1,y1)&lt;/code&gt; and &lt;code&gt;(x2,y2)&lt;/code&gt; are two different points on the line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62cc883c4cff0d727c6bccd03373401e789a3bdc" translate="yes" xml:space="preserve">
          <source>where &lt;code&gt;aggregate_name&lt;/code&gt; is a previously defined aggregate (possibly qualified with a schema name) and &lt;code&gt;expression&lt;/code&gt; is any value expression that does not itself contain an aggregate expression or a window function call. The optional &lt;code&gt;order_by_clause&lt;/code&gt; and &lt;code&gt;filter_clause&lt;/code&gt; are described below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb27ce432756b53a4aded2a65828cbdaa1282ba5" translate="yes" xml:space="preserve">
          <source>where &lt;code&gt;algorithm&lt;/code&gt; is one of:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7cd4f12063c1975f0d255a05965b38eb93bc6c2" translate="yes" xml:space="preserve">
          <source>where &lt;code&gt;archivelocation&lt;/code&gt; is the directory from which WAL segment files should be removed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39d50e4fc00ccd5c8ec9a75dd873782f3183c2ce" translate="yes" xml:space="preserve">
          <source>where &lt;code&gt;c&lt;/code&gt; is alphanumeric (possibly followed by other characters) is an &lt;em&gt;escape&lt;/em&gt;, see &lt;a href=&quot;functions-matching#POSIX-ESCAPE-SEQUENCES&quot;&gt;Section 9.7.3.3&lt;/a&gt; (AREs only; in EREs and BREs, this matches &lt;code&gt;c&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95363da9cd107f5dcc6d6108200a75dee0fecc9d" translate="yes" xml:space="preserve">
          <source>where &lt;code&gt;client_id&lt;/code&gt; indicates which client session ran the transaction, &lt;code&gt;transaction_no&lt;/code&gt; counts how many transactions have been run by that session, &lt;code&gt;time&lt;/code&gt; is the total elapsed transaction time in microseconds, &lt;code&gt;script_no&lt;/code&gt; identifies which script file was used (useful when multiple scripts were specified with &lt;code&gt;-f&lt;/code&gt; or &lt;code&gt;-b&lt;/code&gt;), and &lt;code&gt;time_epoch&lt;/code&gt;/&lt;code&gt;time_us&lt;/code&gt; are a Unix-epoch time stamp and an offset in microseconds (suitable for creating an ISO 8601 time stamp with fractional seconds) showing when the transaction completed. The &lt;code&gt;schedule_lag&lt;/code&gt; field is the difference between the transaction's scheduled start time, and the time it actually started, in microseconds. It is only present when the &lt;code&gt;--rate&lt;/code&gt; option is used. When both &lt;code&gt;--rate&lt;/code&gt; and &lt;code&gt;--latency-limit&lt;/code&gt; are used, the &lt;code&gt;time&lt;/code&gt; for a skipped transaction will be reported as &lt;code&gt;skipped&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15575bf8bc20a17322a91c6a004375b23fe3bede" translate="yes" xml:space="preserve">
          <source>where &lt;code&gt;collation&lt;/code&gt; is a possibly schema-qualified identifier. The &lt;code&gt;COLLATE&lt;/code&gt; clause binds tighter than operators; parentheses can be used when necessary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd38ffefd9af14e03f114a3c898a1682942460e2" translate="yes" xml:space="preserve">
          <source>where &lt;code&gt;condition&lt;/code&gt; is any expression that evaluates to a result of type &lt;code&gt;boolean&lt;/code&gt;. Any row that does not satisfy this condition will be eliminated from the output. A row satisfies the condition if it returns true when the actual row values are substituted for any variable references.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="883e212f0298979617ff0fdf44518bd05a084205" translate="yes" xml:space="preserve">
          <source>where &lt;code&gt;condition&lt;/code&gt; is any expression that evaluates to a result of type &lt;code&gt;boolean&lt;/code&gt;. Any row that does not satisfy this condition will not be inserted to the table. A row satisfies the condition if it returns true when the actual row values are substituted for any variable references.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50d757545c644d09173ed3fc8ac85d6de14f6f0b" translate="yes" xml:space="preserve">
          <source>where &lt;code&gt;condition&lt;/code&gt; is the same as specified for the &lt;code&gt;WHERE&lt;/code&gt; clause.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e39ffa4c4736dc3798858fa334aa10d101b9ea1" translate="yes" xml:space="preserve">
          <source>where &lt;code&gt;config_name&lt;/code&gt; is a column in the &lt;code&gt;pgweb&lt;/code&gt; table. This allows mixed configurations in the same index while recording which configuration was used for each index entry. This would be useful, for example, if the document collection contained documents in different languages. Again, queries that are meant to use the index must be phrased to match, e.g., &lt;code&gt;WHERE to_tsvector(config_name, body) @@ 'a &amp;amp; b'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e33c809b5aed59b29d15e3755cf042bcd7cf972" translate="yes" xml:space="preserve">
          <source>where &lt;code&gt;dbname&lt;/code&gt; is the name of the already-created database to test in. (You may also need &lt;code&gt;-h&lt;/code&gt;, &lt;code&gt;-p&lt;/code&gt;, and/or &lt;code&gt;-U&lt;/code&gt; options to specify how to connect to the database server.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2efafe66fc0fb01790e7b075da02f4b34a5191f4" translate="yes" xml:space="preserve">
          <source>where &lt;code&gt;delim&lt;/code&gt; is the delimiter character for the type, as recorded in its &lt;code&gt;pg_type&lt;/code&gt; entry. Among the standard data types provided in the PostgreSQL distribution, all use a comma (&lt;code&gt;,&lt;/code&gt;), except for type &lt;code&gt;box&lt;/code&gt; which uses a semicolon (&lt;code&gt;;&lt;/code&gt;). Each &lt;code&gt;val&lt;/code&gt; is either a constant of the array element type, or a subarray. An example of an array constant is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc0c370cc6c4db09350c38f91dbc0ead530523ea" translate="yes" xml:space="preserve">
          <source>where &lt;code&gt;digits&lt;/code&gt; is one or more decimal digits (0 through 9). At least one digit must be before or after the decimal point, if one is used. At least one digit must follow the exponent marker (&lt;code&gt;e&lt;/code&gt;), if one is present. There cannot be any spaces or other characters embedded in the constant. Note that any leading plus or minus sign is not actually considered part of the constant; it is an operator applied to the constant.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfd7fccfedd66d19eee35d6037183fff7ab24667" translate="yes" xml:space="preserve">
          <source>where &lt;code&gt;documents&lt;/code&gt; is a table that has a text field &lt;code&gt;bodytext&lt;/code&gt; that we wish to search. The reason for using the &lt;code&gt;simple&lt;/code&gt; configuration with the &lt;code&gt;to_tsvector&lt;/code&gt; function, instead of using a language-specific configuration, is that we want a list of the original (unstemmed) words.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a039bb227f52a1b9a93d81d62221c9b30047689" translate="yes" xml:space="preserve">
          <source>where &lt;code&gt;dumpfile&lt;/code&gt; is the file output by the pg_dump command. The database &lt;code&gt;dbname&lt;/code&gt; will not be created by this command, so you must create it yourself from &lt;code&gt;template0&lt;/code&gt; before executing psql (e.g., with &lt;code&gt;createdb -T template0 dbname&lt;/code&gt;). psql supports options similar to pg_dump for specifying the database server to connect to and the user name to use. See the &lt;a href=&quot;app-psql&quot;&gt;psql&lt;/a&gt; reference page for more information. Non-text file dumps are restored using the &lt;a href=&quot;app-pgrestore&quot;&gt;pg_restore&lt;/a&gt; utility.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e33127f2af6130f52a3e81c11a87546a1d4d1276" translate="yes" xml:space="preserve">
          <source>where &lt;code&gt;frame_start&lt;/code&gt; and &lt;code&gt;frame_end&lt;/code&gt; can be one of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f4a0bb9f112237b3006e826384b66b73f19342f" translate="yes" xml:space="preserve">
          <source>where &lt;code&gt;interval_start&lt;/code&gt; is the start of the interval (as a Unix epoch time stamp), &lt;code&gt;num_transactions&lt;/code&gt; is the number of transactions within the interval, &lt;code&gt;sum_latency&lt;/code&gt; is the sum of the transaction latencies within the interval, &lt;code&gt;sum_latency_2&lt;/code&gt; is the sum of squares of the transaction latencies within the interval, &lt;code&gt;min_latency&lt;/code&gt; is the minimum latency within the interval, and &lt;code&gt;max_latency&lt;/code&gt; is the maximum latency within the interval. The next fields, &lt;code&gt;sum_lag&lt;/code&gt;, &lt;code&gt;sum_lag_2&lt;/code&gt;, &lt;code&gt;min_lag&lt;/code&gt;, and &lt;code&gt;max_lag&lt;/code&gt;, are only present if the &lt;code&gt;--rate&lt;/code&gt; option is used. They provide statistics about the time each transaction had to wait for the previous one to finish, i.e. the difference between each transaction's scheduled start time and the time it actually started. The very last field, &lt;code&gt;skipped&lt;/code&gt;, is only present if the &lt;code&gt;--latency-limit&lt;/code&gt; option is used, too. It counts the number of transactions skipped because they would have started too late. Each transaction is counted in the interval when it was committed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02521c4b560914d5a494676dd3a10eaddf5a2d27" translate="yes" xml:space="preserve">
          <source>where &lt;code&gt;label&lt;/code&gt; is any string you want to use to uniquely identify this backup operation. &lt;code&gt;pg_start_backup&lt;/code&gt; creates a &lt;em&gt;backup label&lt;/em&gt; file, called &lt;code&gt;backup_label&lt;/code&gt;, in the cluster directory with information about your backup, including the start time and label string. The function also creates a &lt;em&gt;tablespace map&lt;/em&gt; file, called &lt;code&gt;tablespace_map&lt;/code&gt;, in the cluster directory with information about tablespace symbolic links in &lt;code&gt;pg_tblspc/&lt;/code&gt; if one or more such link is present. Both files are critical to the integrity of the backup, should you need to restore from it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2632c6a394b4c5afed578e3db6104be70d7c969c" translate="yes" xml:space="preserve">
          <source>where &lt;code&gt;label&lt;/code&gt; is any string you want to use to uniquely identify this backup operation. The connection calling &lt;code&gt;pg_start_backup&lt;/code&gt; must be maintained until the end of the backup, or the backup will be automatically aborted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14ec95115d9949716f5574166b53e4a99c82ef40" translate="yes" xml:space="preserve">
          <source>where &lt;code&gt;lock_strength&lt;/code&gt; can be one of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc24930f3c49a2f1c610c96b58a313a1bb2f6567" translate="yes" xml:space="preserve">
          <source>where &lt;code&gt;name&lt;/code&gt; follows the usual rules for SQL identifiers. The current role automatically becomes the owner of the new database. It is the privilege of the owner of a database to remove it later (which also removes all the objects in it, even if they have a different owner).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e04d3386ac5dbafbf688329834c2f0edf9b1b29" translate="yes" xml:space="preserve">
          <source>where &lt;code&gt;num_sync&lt;/code&gt; is the number of synchronous standbys that transactions need to wait for replies from, and &lt;code&gt;standby_name&lt;/code&gt; is the name of a standby server. &lt;code&gt;FIRST&lt;/code&gt; and &lt;code&gt;ANY&lt;/code&gt; specify the method to choose synchronous standbys from the listed servers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="051ce8638a4cb0df58ccc78d0226c857003f3754" translate="yes" xml:space="preserve">
          <source>where &lt;code&gt;old_cluster&lt;/code&gt; and &lt;code&gt;new_cluster&lt;/code&gt; are relative to the current directory on the primary, and &lt;code&gt;remote_dir&lt;/code&gt; is &lt;em&gt;above&lt;/em&gt; the old and new cluster directories on the standby. The directory structure under the specified directories on the primary and standbys must match. Consult the rsync manual page for details on specifying the remote directory, e.g.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6995f4e58e8fe029424bd429b077f2eb8c3fe1f6" translate="yes" xml:space="preserve">
          <source>where &lt;code&gt;p&lt;/code&gt; is an optional precision specification giving the number of fractional digits in the seconds field. Precision can be specified for &lt;code&gt;time&lt;/code&gt;, &lt;code&gt;timestamp&lt;/code&gt;, and &lt;code&gt;interval&lt;/code&gt; types, and can range from 0 to 6. If no precision is specified in a constant specification, it defaults to the precision of the literal value (but not more than 6 digits).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ae43e1773ab7435ea942bef4aab35ea977ed17e" translate="yes" xml:space="preserve">
          <source>where &lt;code&gt;quantity&lt;/code&gt; is a number (possibly signed); &lt;code&gt;unit&lt;/code&gt; is &lt;code&gt;microsecond&lt;/code&gt;, &lt;code&gt;millisecond&lt;/code&gt;, &lt;code&gt;second&lt;/code&gt;, &lt;code&gt;minute&lt;/code&gt;, &lt;code&gt;hour&lt;/code&gt;, &lt;code&gt;day&lt;/code&gt;, &lt;code&gt;week&lt;/code&gt;, &lt;code&gt;month&lt;/code&gt;, &lt;code&gt;year&lt;/code&gt;, &lt;code&gt;decade&lt;/code&gt;, &lt;code&gt;century&lt;/code&gt;, &lt;code&gt;millennium&lt;/code&gt;, or abbreviations or plurals of these units; &lt;code&gt;direction&lt;/code&gt; can be &lt;code&gt;ago&lt;/code&gt; or empty. The at sign (&lt;code&gt;@&lt;/code&gt;) is optional noise. The amounts of the different units are implicitly added with appropriate sign accounting. &lt;code&gt;ago&lt;/code&gt; negates all the fields. This syntax is also used for interval output, if &lt;a href=&quot;runtime-config-client#GUC-INTERVALSTYLE&quot;&gt;IntervalStyle&lt;/a&gt; is set to &lt;code&gt;postgres_verbose&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb85a9d1ba20986c4eabc4c0cc672867a0082382" translate="yes" xml:space="preserve">
          <source>where &lt;code&gt;salt&lt;/code&gt;, &lt;code&gt;StoredKey&lt;/code&gt; and &lt;code&gt;ServerKey&lt;/code&gt; are in Base64 encoded format. This format is the same as that specified by RFC 5803.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="902cd914b55268a7f42373967de3300fb2a6df74" translate="yes" xml:space="preserve">
          <source>where &lt;code&gt;search_condition&lt;/code&gt; is any value expression (see &lt;a href=&quot;sql-expressions&quot;&gt;Section 4.2&lt;/a&gt;) that returns a value of type &lt;code&gt;boolean&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cab206ed9f849b266fa8bbb5c105eda41d171c2" translate="yes" xml:space="preserve">
          <source>where &lt;code&gt;window_definition&lt;/code&gt; has the syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ffcb73100c9208f3d73e7359a7710f21793aea4" translate="yes" xml:space="preserve">
          <source>where &lt;code&gt;window_name&lt;/code&gt; is a name that can be referenced from &lt;code&gt;OVER&lt;/code&gt; clauses or subsequent window definitions, and &lt;code&gt;window_definition&lt;/code&gt; is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05865f2594ddc7befb862529cd119701ff24e8ac" translate="yes" xml:space="preserve">
          <source>where &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; are the respective coordinates, as floating-point numbers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63a67aa07860e75ed55512e599efa11799c590cd" translate="yes" xml:space="preserve">
          <source>where &lt;code&gt;x&lt;/code&gt; is a single character with no other significance, matches that character</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cfc72d3af1bb50704e8aee07809af6321faa971" translate="yes" xml:space="preserve">
          <source>where &lt;code&gt;xsi&lt;/code&gt; is the XML namespace prefix for XML Schema Instance. An appropriate namespace declaration will be added to the result value. If false, columns containing null values are simply omitted from the output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbd4a92c9b71cd49ffa17bbdcc8f19ea4f09000a" translate="yes" xml:space="preserve">
          <source>where the &lt;code&gt;nextval()&lt;/code&gt; function supplies successive values from a &lt;em&gt;sequence object&lt;/em&gt; (see &lt;a href=&quot;functions-sequence&quot;&gt;Section 9.16&lt;/a&gt;). This arrangement is sufficiently common that there's a special shorthand for it:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f13f6d0c9013e1b5a9453aad6e84166421dc49f" translate="yes" xml:space="preserve">
          <source>where the &lt;code&gt;operator&lt;/code&gt; token follows the syntax rules of &lt;a href=&quot;sql-syntax-lexical#SQL-SYNTAX-OPERATORS&quot;&gt;Section 4.1.3&lt;/a&gt;, or is one of the key words &lt;code&gt;AND&lt;/code&gt;, &lt;code&gt;OR&lt;/code&gt;, and &lt;code&gt;NOT&lt;/code&gt;, or is a qualified operator name in the form:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a017c95f90d3833011c4cbc0c74fcbcfe44ef42" translate="yes" xml:space="preserve">
          <source>where the archive directory is physically located on the standby server, so that the &lt;code&gt;archive_command&lt;/code&gt; is accessing it across NFS, but the files are local to the standby. This will:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6b4be2958f0bb91c3ed3c4e4583c088a4832f4d" translate="yes" xml:space="preserve">
          <source>where the colon (&lt;code&gt;:&lt;/code&gt;) symbol acts as a delimiter between a phrase and its replacement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e11e7f071949ee7312e3026921c20a83a618fe45" translate="yes" xml:space="preserve">
          <source>where the comment begins with &lt;code&gt;/*&lt;/code&gt; and extends to the matching occurrence of &lt;code&gt;*/&lt;/code&gt;. These block comments nest, as specified in the SQL standard but unlike C, so that one can comment out larger blocks of code that might contain existing block comments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e7c67b39887933602dcee06120320113183300a" translate="yes" xml:space="preserve">
          <source>where the component fields are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a5be562692973652e8751f219be291ae87f74a1" translate="yes" xml:space="preserve">
          <source>where the file name for the source file must be available on the machine running the backend process, not the client, since the backend process reads the file directly. You can read more about the &lt;code&gt;COPY&lt;/code&gt; command in &lt;a href=&quot;sql-copy&quot;&gt;COPY&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aca0a6010ee58659cb962578b12187acb232c0bd" translate="yes" xml:space="preserve">
          <source>where the format of a table mapping depends on the &lt;em&gt;&lt;code&gt;tableforest&lt;/code&gt;&lt;/em&gt; parameter as explained above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c322d4fb81e0c24a81de070751209570b9a21fe2" translate="yes" xml:space="preserve">
          <source>where the points are the end points of the line segments comprising the boundary of the polygon.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3a39e39e3dc55cc38a327aeb589b6bbda39e7f5" translate="yes" xml:space="preserve">
          <source>where the points are the end points of the line segments comprising the path. Square brackets (&lt;code&gt;[]&lt;/code&gt;) indicate an open path, while parentheses (&lt;code&gt;()&lt;/code&gt;) indicate a closed path. When the outermost parentheses are omitted, as in the third through fifth syntaxes, a closed path is assumed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b49a312334fd1bdab104f06f0ce7761910dd239" translate="yes" xml:space="preserve">
          <source>where the recursive self-reference must appear on the right-hand side of the &lt;code&gt;UNION&lt;/code&gt;. Only one recursive self-reference is permitted per query. Recursive data-modifying statements are not supported, but you can use the results of a recursive &lt;code&gt;SELECT&lt;/code&gt; query in a data-modifying statement. See &lt;a href=&quot;queries-with&quot;&gt;Section 7.8&lt;/a&gt; for an example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dab6fc9fba9dce67d798f2e3e758f073548c0c8" translate="yes" xml:space="preserve">
          <source>where the schema mapping is as above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e9fff4ccdc17ba4f1e6aa42fae36f876c94b66d" translate="yes" xml:space="preserve">
          <source>where the vacuum base threshold is &lt;a href=&quot;runtime-config-autovacuum#GUC-AUTOVACUUM-VACUUM-THRESHOLD&quot;&gt;autovacuum_vacuum_threshold&lt;/a&gt;, the vacuum scale factor is &lt;a href=&quot;runtime-config-autovacuum#GUC-AUTOVACUUM-VACUUM-SCALE-FACTOR&quot;&gt;autovacuum_vacuum_scale_factor&lt;/a&gt;, and the number of tuples is &lt;code&gt;pg_class&lt;/code&gt;.&lt;code&gt;reltuples&lt;/code&gt;. The number of obsolete tuples is obtained from the statistics collector; it is a semi-accurate count updated by each &lt;code&gt;UPDATE&lt;/code&gt; and &lt;code&gt;DELETE&lt;/code&gt; operation. (It is only semi-accurate because some information might be lost under heavy load.) If the &lt;code&gt;relfrozenxid&lt;/code&gt; value of the table is more than &lt;code&gt;vacuum_freeze_table_age&lt;/code&gt; transactions old, an aggressive vacuum is performed to freeze old tuples and advance &lt;code&gt;relfrozenxid&lt;/code&gt;; otherwise, only pages that have been modified since the last vacuum are scanned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e9d5d3d104047e0064d4303bd59ec16810bf890" translate="yes" xml:space="preserve">
          <source>where your own login name is mentioned. This will happen if the administrator has not created a PostgreSQL user account for you. (PostgreSQL user accounts are distinct from operating system user accounts.) If you are the administrator, see &lt;a href=&quot;https://www.postgresql.org/docs/12/user-manag.html&quot;&gt;Chapter 21&lt;/a&gt; for help creating accounts. You will need to become the operating system user under which PostgreSQL was installed (usually &lt;code&gt;postgres&lt;/code&gt;) to create the first user account. It could also be that you were assigned a PostgreSQL user name that is different from your operating system user name; in that case you need to use the &lt;code&gt;-U&lt;/code&gt; switch or set the &lt;code&gt;PGUSER&lt;/code&gt; environment variable to specify your PostgreSQL user name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f1cf5f67d7b1357c152874d6df8382f05565c46" translate="yes" xml:space="preserve">
          <source>which displays per-product sales totals in only the top sales regions. The &lt;code&gt;WITH&lt;/code&gt; clause defines two auxiliary statements named &lt;code&gt;regional_sales&lt;/code&gt; and &lt;code&gt;top_regions&lt;/code&gt;, where the output of &lt;code&gt;regional_sales&lt;/code&gt; is used in &lt;code&gt;top_regions&lt;/code&gt; and the output of &lt;code&gt;top_regions&lt;/code&gt; is used in the primary &lt;code&gt;SELECT&lt;/code&gt; query. This example could have been written without &lt;code&gt;WITH&lt;/code&gt;, but we'd have needed two levels of nested sub-&lt;code&gt;SELECT&lt;/code&gt;s. It's a bit easier to follow this way.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bae8a1a20973cccefd7c610839e91bd3974b4005" translate="yes" xml:space="preserve">
          <source>which finds the ten places closest to a given target point. The ability to do this is again dependent on the particular operator class being used. In &lt;a href=&quot;gist-builtin-opclasses#GIST-BUILTIN-OPCLASSES-TABLE&quot;&gt;Table 64.1&lt;/a&gt;, operators that can be used in this way are listed in the column &amp;ldquo;Ordering Operators&amp;rdquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dfde0f1cc2ebaaf170e42acdfe9b417e65a8fd3" translate="yes" xml:space="preserve">
          <source>which gives us one output row per city. Each aggregate result is computed over the table rows matching that city. We can filter these grouped rows using &lt;code&gt;HAVING&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18b9fcfc65791db8244d0ec78c95baca6172d630" translate="yes" xml:space="preserve">
          <source>which gives us the same results for only the cities that have all &lt;code&gt;temp_lo&lt;/code&gt; values below 40. Finally, if we only care about cities whose names begin with &amp;ldquo;&lt;code&gt;S&lt;/code&gt;&amp;rdquo;, we might do:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="689a2e02b1a49db16b3b1be754391d4fc8da64e0" translate="yes" xml:space="preserve">
          <source>which is executed as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f15875e884530dd30ab6d27db56535aa74c98f64" translate="yes" xml:space="preserve">
          <source>which obtains the 50th percentile, or median, value of the &lt;code&gt;income&lt;/code&gt; column from table &lt;code&gt;households&lt;/code&gt;. Here, &lt;code&gt;0.5&lt;/code&gt; is a direct argument; it would make no sense for the percentile fraction to be a value varying across rows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6ee8c6433c23fa17a7f1946c5c1b26470b55b09" translate="yes" xml:space="preserve">
          <source>which refers to a function with zero arguments, whereas the first variant can refer to a function with any number of arguments, including zero, as long as the name is unique.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e899e70b75b90b65729658ed54cd0ca39432992" translate="yes" xml:space="preserve">
          <source>which returns:</source>
          <target state="translated">다음을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="74cad75d5e4f20aa31f501f8fefdc21abad67352" translate="yes" xml:space="preserve">
          <source>which shows that the planner thinks that sorting &lt;code&gt;onek&lt;/code&gt; by index-scanning is about 12% more expensive than sequential-scan-and-sort. Of course, the next question is whether it's right about that. We can investigate that using &lt;code&gt;EXPLAIN ANALYZE&lt;/code&gt;, as discussed below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c0656a99c8833cfc345dd27d0b6820caa432991" translate="yes" xml:space="preserve">
          <source>which we wish to display like</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c282db8639e1ae34ff018f3c72116a8c43100b68" translate="yes" xml:space="preserve">
          <source>which will copy archivable WAL segments to the directory &lt;code&gt;/mnt/server/archivedir&lt;/code&gt;. (This is an example, not a recommendation, and might not work on all platforms.) After the &lt;code&gt;%p&lt;/code&gt; and &lt;code&gt;%f&lt;/code&gt; parameters have been replaced, the actual command executed might look like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a169e40949af2620c4e85dda15d79975492e73f" translate="yes" xml:space="preserve">
          <source>which will copy previously archived WAL segments from the directory &lt;code&gt;/mnt/server/archivedir&lt;/code&gt;. Of course, you can use something much more complicated, perhaps even a shell script that requests the operator to mount an appropriate tape.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26cd6a2051ea99afa4a27d84b6ed47beb5036a7c" translate="yes" xml:space="preserve">
          <source>which will leave the server running in the foreground. This must be done while logged into the PostgreSQL user account. Without &lt;code&gt;-D&lt;/code&gt;, the server will try to use the data directory named by the environment variable &lt;code&gt;PGDATA&lt;/code&gt;. If that variable is not provided either, it will fail.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4e8f14819326dd3aae3a2cf53d737470310c24e" translate="yes" xml:space="preserve">
          <source>which will match the stemmed form of &lt;code&gt;postgraduate&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ff082187c1d02a1fdad2296ffb917870a45b03c" translate="yes" xml:space="preserve">
          <source>which would allow a box value's component numbers to be accessed by subscripting. Otherwise the type behaves the same as before.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df5d2347727e9e14fc56d97420272403e963b0b6" translate="yes" xml:space="preserve">
          <source>which would be a valid value of the &lt;code&gt;inventory_item&lt;/code&gt; type defined above. To make a field be NULL, write no characters at all in its position in the list. For example, this constant specifies a NULL third field:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a3be0245636efccdc3c57134520df09a0e4a0a4" translate="yes" xml:space="preserve">
          <source>white space and comments cannot appear within multi-character symbols, such as &lt;code&gt;(?:&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b43caaeffd6a470ec3896dc284dda83445964f79" translate="yes" xml:space="preserve">
          <source>white space or &lt;code&gt;#&lt;/code&gt; within a bracket expression is retained</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52b07ed610fcda069d74b3a411d9e935637def49" translate="yes" xml:space="preserve">
          <source>will be allowed if the cast from type &lt;code&gt;integer&lt;/code&gt; to type &lt;code&gt;text&lt;/code&gt; is marked &lt;code&gt;AS ASSIGNMENT&lt;/code&gt;, otherwise not. (We generally use the term &lt;em&gt;assignment cast&lt;/em&gt; to describe this kind of cast.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7b329bd0ae166b219c0dac7856440cebddc7bef" translate="yes" xml:space="preserve">
          <source>will be parsed as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcc5b8ad0d43009e11ed531b9ba723b81a61922b" translate="yes" xml:space="preserve">
          <source>will draw an error even though the &lt;code&gt;C&lt;/code&gt; and &lt;code&gt;POSIX&lt;/code&gt; collations have identical behaviors. Mixing stripped and non-stripped collation names is therefore not recommended.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ea301593a0a7ff485b37c9d6c155df86be3bfc8" translate="yes" xml:space="preserve">
          <source>will lock only rows having &lt;code&gt;col1 = 5&lt;/code&gt;, even though that condition is not textually within the sub-query.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9075f9f3f87909783fee359888bd2c471dea042" translate="yes" xml:space="preserve">
          <source>will only process the master table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="166a3172a29e9b1013bd7227d7fa350d195805cd" translate="yes" xml:space="preserve">
          <source>will remove the domain part for users with system user names that end with &lt;code&gt;@mydomain.com&lt;/code&gt;, and allow any user whose system name ends with &lt;code&gt;@otherdomain.com&lt;/code&gt; to log in as &lt;code&gt;guest&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="733025f436e0af6dc9df77a7ba625859cbbf72ca" translate="yes" xml:space="preserve">
          <source>will require effort proportional to the size of the table: PostgreSQL will need to scan either the entire table or the entirety of an index which includes all rows in the table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91e07485ce9849ddc161bb7d803839b8f2cfb477" translate="yes" xml:space="preserve">
          <source>will result in the three SQL commands being individually sent to the server, with each one's results being displayed before continuing to the next command. However, a semicolon entered as &lt;code&gt;\;&lt;/code&gt; will not trigger command processing, so that the command before it and the one after are effectively combined and sent to the server in one request. So for example</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="047ba62edd680e2d56a13904abdabc4188cb005b" translate="yes" xml:space="preserve">
          <source>will return a table of two columns and three rows. It's effectively equivalent to:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cf8c1d7fdc60299e5a5cb3f3300a0c91cf43fb7" translate="yes" xml:space="preserve">
          <source>will start the server in the background and put the output into the named log file. The &lt;code&gt;-D&lt;/code&gt; option has the same meaning here as for &lt;code&gt;postgres&lt;/code&gt;. &lt;code&gt;pg_ctl&lt;/code&gt; is also capable of stopping the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7130bc171fc84062054c81f8bc4460528312537b" translate="yes" xml:space="preserve">
          <source>with hot standby</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af6d8270bf9a28cb0890365af8ad9fbaf343522d" translate="yes" xml:space="preserve">
          <source>with sync off</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a3cc3c4fb4b36db89f9594987cae52aab437928" translate="yes" xml:space="preserve">
          <source>with sync on</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9370d4f218264e82510fdcf2db2c6328e076bb0c" translate="yes" xml:space="preserve">
          <source>with the default &lt;code&gt;BLCKSZ&lt;/code&gt; of 8192 bytes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fcb8a613e6e45488de8c47b5f45118a3ee76969" translate="yes" xml:space="preserve">
          <source>without any precision or scale creates a column in which numeric values of any precision and scale can be stored, up to the implementation limit on precision. A column of this kind will not coerce input values to any particular scale, whereas &lt;code&gt;numeric&lt;/code&gt; columns with a declared scale will coerce input values to that scale. (The SQL standard requires a default scale of 0, i.e., coercion to integer precision. We find this a bit useless. If you're concerned about portability, always specify the precision and scale explicitly.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db48d21b6765af674c2d86f7d7085037c147d319" translate="yes" xml:space="preserve">
          <source>would fail to preserve the &lt;code&gt;FOR UPDATE&lt;/code&gt; lock after the &lt;code&gt;ROLLBACK TO&lt;/code&gt;. This has been fixed in release 9.3.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d993c428e713634961b14ab1031f2202eb8ab483" translate="yes" xml:space="preserve">
          <source>would query the table &lt;code&gt;my_table&lt;/code&gt;. Note that this may be unsafe: the value of the variable is copied literally, so it can contain unbalanced quotes, or even backslash commands. You must make sure that it makes sense where you put it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fb1884d01fa0af9488b72c839058eb9b1cd3ec9" translate="yes" xml:space="preserve">
          <source>www.openwall.com</source>
          <target state="translated">www.openwall.com</target>
        </trans-unit>
        <trans-unit id="ee60015c8f586443db97ad8f39f2b79227b8fd01" translate="yes" xml:space="preserve">
          <source>xact</source>
          <target state="translated">xact</target>
        </trans-unit>
        <trans-unit id="30e2ca63aa35fbb6880b2c6d43d8e5e3aa97095e" translate="yes" xml:space="preserve">
          <source>xml2</source>
          <target state="translated">xml2</target>
        </trans-unit>
        <trans-unit id="f94d7d22277dd8bae275a25a490b99203cccb3b3" translate="yes" xml:space="preserve">
          <source>y-intercept of the least-squares-fit linear equation determined by the (&lt;code&gt;X&lt;/code&gt;, &lt;code&gt;Y&lt;/code&gt;) pairs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="150f912c47bfa78eaad7a19807fcef6747d4b800" translate="yes" xml:space="preserve">
          <source>year (4 or more digits)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="611de26b771af738f57fb9b6c8721bb546f69f99" translate="yes" xml:space="preserve">
          <source>year (4 or more digits) with comma</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="127cd8c2aa50e43e37fcd0ad357fa69ed4e6f270" translate="yes" xml:space="preserve">
          <source>year 99 BC</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d468eeeab09a5f89dd95cca8a1d68fbf5b52784a" translate="yes" xml:space="preserve">
          <source>year and day of year</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb360f9c09ac8c5edb2f18be5de4e80ea4c430d0" translate="yes" xml:space="preserve">
          <source>yes</source>
          <target state="translated">yes</target>
        </trans-unit>
        <trans-unit id="b7caf4dc1da846acd815fdde550fbd1677a60c12" translate="yes" xml:space="preserve">
          <source>yes (Note 1)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6e931eb3e1e969efa57eb9a58fd4f25fd4cb2e1" translate="yes" xml:space="preserve">
          <source>you will find that &lt;code&gt;tenk1&lt;/code&gt; has 358 disk pages and 10000 rows. The estimated cost is computed as (disk pages read * &lt;a href=&quot;runtime-config-query#GUC-SEQ-PAGE-COST&quot;&gt;seq_page_cost&lt;/a&gt;) + (rows scanned * &lt;a href=&quot;runtime-config-query#GUC-CPU-TUPLE-COST&quot;&gt;cpu_tuple_cost&lt;/a&gt;). By default, &lt;code&gt;seq_page_cost&lt;/code&gt; is 1.0 and &lt;code&gt;cpu_tuple_cost&lt;/code&gt; is 0.01, so the estimated cost is (358 * 1.0) + (10000 * 0.01) = 458.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1982d2d3e9d46b67ceb2b6b1086e041a7f7ce8a9" translate="yes" xml:space="preserve">
          <source>zero octet</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5aab974202bf0788f59e7ce97b96b6b4d59e6caf" translate="yes" xml:space="preserve">
          <source>{A,B,C}</source>
          <target state="translated">{A,B,C}</target>
        </trans-unit>
        <trans-unit id="f751f41a86686962c7eb6a6c72d7aead8c2eed66" translate="yes" xml:space="preserve">
          <source>~ ! @ # % ^ &amp;amp; | ` ?</source>
          <target state="translated">~ ! @ # % ^ &amp;amp; | ` ?</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
