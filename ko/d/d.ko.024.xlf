<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="d">
    <body>
      <group id="d">
        <trans-unit id="e7b192a44d290f22b2a52787d75d812455e1a7ff" translate="yes" xml:space="preserve">
          <source>Returns true if lhs and rhs are equal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ab2f0f2963444c95e5d2134154cb97c261debda" translate="yes" xml:space="preserve">
          <source>Returns true if the Tag is a start tag</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bc937d2d630c04cee3d009eb64466e23e412ab9" translate="yes" xml:space="preserve">
          <source>Returns true if the Tag is an empty tag</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3185a01a1ab62171d02a2ad80c7513b2d9264cb" translate="yes" xml:space="preserve">
          <source>Returns true if the Tag is an end tag</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b17e172a7b60c4716b624a4986e53e7b2f1b546" translate="yes" xml:space="preserve">
          <source>Returns true if the array is encoded correctly</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72846752e712dd8b0400faa570281eb1dc2027b2" translate="yes" xml:space="preserve">
          <source>Returns true if the character c can be represented in this encoding scheme.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee11f868a93433cf3721bba9ada0c0e23161b4d7" translate="yes" xml:space="preserve">
          <source>Returns true if the character is a base character according to the XML standard</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ed6e26873b798abcb2be5a23ca0eb9d4ce764bc" translate="yes" xml:space="preserve">
          <source>Returns true if the character is a character according to the XML standard</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb5377ef48ea29e7c3ddbde117c30414bca2a914" translate="yes" xml:space="preserve">
          <source>Returns true if the character is a combining character according to the XML standard</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="581a5bb1cb76c27bc05a09665dff669924e51288" translate="yes" xml:space="preserve">
          <source>Returns true if the character is a digit according to the XML standard</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc80edd02d4ba33cf3880e92daca03f6488bb791" translate="yes" xml:space="preserve">
          <source>Returns true if the character is a letter according to the XML standard</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d4254190cbc9ee3956d0b9d34e37b6f91bbceb6" translate="yes" xml:space="preserve">
          <source>Returns true if the character is an extender according to the XML standard</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98b812df609439a4618cf65118e80281a06d8ef7" translate="yes" xml:space="preserve">
          <source>Returns true if the character is an ideographic character according to the XML standard</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d4fefd3a3c0f8d257980f4b1799fcfb3a7786cd" translate="yes" xml:space="preserve">
          <source>Returns true if the character is whitespace according to the XML standard</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47569ca8b39615ed1ad3396b701a1654b91c2512" translate="yes" xml:space="preserve">
          <source>Returns true if the code unit is legal. For example, the byte 0x80 would not be legal in ASCII, because ASCII code units must always be in the range 0x00 to 0x7F.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90a6fe546782a21f3ba7df3f1dadc4d54092a388" translate="yes" xml:space="preserve">
          <source>Returns true if the content is the empty string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="200466eecc8eeb7f6712610d6e36be7c216a97d3" translate="yes" xml:space="preserve">
          <source>Returns true if the current thread is in a critical region; otherwise, false.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ff81a00af8120911ce1e06c2641b13a285ec41f" translate="yes" xml:space="preserve">
          <source>Returns true if the expression may throw exceptions. If 'mustNotThrow' is true, generate an error if it throws</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="defec8929bbdd9c3e56c330cda0ff8c4a8f0b0fd" translate="yes" xml:space="preserve">
          <source>Returns true if the generator is empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c69b80a2c5f787a14025c77620c70d4748cec24e" translate="yes" xml:space="preserve">
          <source>Returns true if the item represents empty XML text</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f49062b1b1da8d0386864b39946993407faf2743" translate="yes" xml:space="preserve">
          <source>Returns true if the string is encoded correctly</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c92c02a0a49dde438909607e2409e70c09bc3f51" translate="yes" xml:space="preserve">
          <source>Returns true if there's an extra member which is the 'this' pointer to the enclosing context (enclosing aggregate or function)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2a91a6c9819f50c117c6dcfa975ecc94517bac5" translate="yes" xml:space="preserve">
          <source>Returns true if this is not instantiated in non-root module, and is a part of non-speculative instantiatiation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d739611ad1542e81fbbbd7f6c69182a53332b0f4" translate="yes" xml:space="preserve">
          <source>Returns true if this symbol is defined in a non-root module without instantiation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b9f2680319b7e6a64c0bbb56b7501127db51d33" translate="yes" xml:space="preserve">
          <source>Returns true iff it is possible to represent the specified codepoint in the encoding.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b73f6993cc90995562085700b23d2b9d1a31bdc3" translate="yes" xml:space="preserve">
          <source>Returns underlying reference count if it is allocated and initialized (a positive integer), and &lt;code&gt;0&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47e84ff3cc0a2906d4557a0807365b812012feef" translate="yes" xml:space="preserve">
          <source>Returns utcOffset as a &lt;a href=&quot;core_time#Duration&quot;&gt;&lt;code&gt;core.time.Duration&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0cea6c0c8bb9a0927ce744433ca3aac4b38a0de" translate="yes" xml:space="preserve">
          <source>Returns vendor string, for display purposes only. Do NOT use this to determine features! Note that some CPUs have programmable vendorIDs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e321e4464ea0729c55bacf6d6488ae23c4a221c1" translate="yes" xml:space="preserve">
          <source>Returns what the offset from UTC is at the given std time. It includes the DST offset in effect at that time (if any).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48510e171f2259637b410e1d6ec7f710f8e1d10b" translate="yes" xml:space="preserve">
          <source>Returns what the offset from UTC is for this &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt;. It includes the DST offset in effect at that time (if any).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c10cabaff5e9865a97c1d29e61edfcde6f67545" translate="yes" xml:space="preserve">
          <source>Returns whether &lt;code&gt;c&lt;/code&gt; is a Unicode Private Use &lt;a href=&quot;#Code%20point&quot;&gt;code point&lt;/a&gt; (general Unicode category: Co).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b1c413347814e12626e1a890ec0821fce680f1c" translate="yes" xml:space="preserve">
          <source>Returns whether &lt;code&gt;c&lt;/code&gt; is a Unicode alphabetic &lt;a href=&quot;#Character&quot;&gt;character&lt;/a&gt; (general Unicode category: Alphabetic).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20412304893875ea3e018f7a726da2a8f8476f14" translate="yes" xml:space="preserve">
          <source>Returns whether &lt;code&gt;c&lt;/code&gt; is a Unicode alphabetic &lt;a href=&quot;#Character&quot;&gt;character&lt;/a&gt; or number. (general Unicode category: Alphabetic, Nd, Nl, No).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8052a83c24e57dc4e4444167682783731f57df26" translate="yes" xml:space="preserve">
          <source>Returns whether &lt;code&gt;c&lt;/code&gt; is a Unicode control &lt;a href=&quot;#Character&quot;&gt;character&lt;/a&gt; (general Unicode category: Cc).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48123650fef8c5fbb7ca07365c2df319be52309c" translate="yes" xml:space="preserve">
          <source>Returns whether &lt;code&gt;c&lt;/code&gt; is a Unicode formatting &lt;a href=&quot;#Character&quot;&gt;character&lt;/a&gt; (general Unicode category: Cf).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52cb9f5fdcef562bfd57e037cbe7e5c7fa96ae53" translate="yes" xml:space="preserve">
          <source>Returns whether &lt;code&gt;c&lt;/code&gt; is a Unicode graphical &lt;a href=&quot;#Character&quot;&gt;character&lt;/a&gt; (general Unicode category: L, M, N, P, S, Zs).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e328e581ac0dc24314f31ecbc0908c7abb2f7127" translate="yes" xml:space="preserve">
          <source>Returns whether &lt;code&gt;c&lt;/code&gt; is a Unicode high surrogate (lead surrogate).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fe00a23eff6a644a0c6ba70189cfa530b7b6903" translate="yes" xml:space="preserve">
          <source>Returns whether &lt;code&gt;c&lt;/code&gt; is a Unicode low surrogate (trail surrogate).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c2ff9ed3fdd9c4b449a64051aeedb338901e989" translate="yes" xml:space="preserve">
          <source>Returns whether &lt;code&gt;c&lt;/code&gt; is a Unicode mark (general Unicode category: Mn, Me, Mc).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5edcb59636f6ab1fc5ccf2d42a7f3a7b301dadc8" translate="yes" xml:space="preserve">
          <source>Returns whether &lt;code&gt;c&lt;/code&gt; is a Unicode non-character i.e. a &lt;a href=&quot;#Code%20point&quot;&gt;code point&lt;/a&gt; with no assigned abstract character. (general Unicode category: Cn)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7595af263e47d4b9c34550528bb8edf7a07b170f" translate="yes" xml:space="preserve">
          <source>Returns whether &lt;code&gt;c&lt;/code&gt; is a Unicode numerical &lt;a href=&quot;#Character&quot;&gt;character&lt;/a&gt; (general Unicode category: Nd, Nl, No).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1478faa31958f0238c5486524214089322f5cd36" translate="yes" xml:space="preserve">
          <source>Returns whether &lt;code&gt;c&lt;/code&gt; is a Unicode punctuation &lt;a href=&quot;#Character&quot;&gt;character&lt;/a&gt; (general Unicode category: Pd, Ps, Pe, Pc, Po, Pi, Pf).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="156a9001b6ee458850080b18ed8a855adfe5a1e0" translate="yes" xml:space="preserve">
          <source>Returns whether &lt;code&gt;c&lt;/code&gt; is a Unicode space &lt;a href=&quot;#Character&quot;&gt;character&lt;/a&gt; (general Unicode category: Zs)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c80de8e3306b8da6b9918d9184b2f0b65b08d16" translate="yes" xml:space="preserve">
          <source>Returns whether &lt;code&gt;c&lt;/code&gt; is a Unicode surrogate &lt;a href=&quot;#Code%20point&quot;&gt;code point&lt;/a&gt; (general Unicode category: Cs).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adc7a749d9ed08ffd6fb11619e94adc5df751f73" translate="yes" xml:space="preserve">
          <source>Returns whether &lt;code&gt;c&lt;/code&gt; is a Unicode symbol &lt;a href=&quot;#Character&quot;&gt;character&lt;/a&gt; (general Unicode category: Sm, Sc, Sk, So).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9d0b0a92175f6ed528c435f87183e3751be3f32" translate="yes" xml:space="preserve">
          <source>Returns whether DST is in effect for this &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ab4d3d13a4b9e6532ff34435c6a4689b5a02a38" translate="yes" xml:space="preserve">
          <source>Returns whether the &lt;code&gt;back&lt;/code&gt;s of &lt;code&gt;lhs&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt; both refer to the same place in memory, making one of the arrays a slice of the other which end at index &lt;code&gt;$&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6be7cfa2f1bb7e4991fc4a28bb92409c19aae932" translate="yes" xml:space="preserve">
          <source>Returns whether the &lt;code&gt;front&lt;/code&gt;s of &lt;code&gt;lhs&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt; both refer to the same place in memory, making one of the arrays a slice of the other which starts at index &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14de15801224be248dd002e5742a8ce6e00309c9" translate="yes" xml:space="preserve">
          <source>Returns whether the file represented by this &lt;code&gt;DirEntry&lt;/code&gt; is a directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3b0014cf0e4c483c081ccc8b96dc40ccc447a6b" translate="yes" xml:space="preserve">
          <source>Returns whether the file represented by this &lt;code&gt;DirEntry&lt;/code&gt; is a file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbddd3a269a6acf94608d7b485670c33ca54303f" translate="yes" xml:space="preserve">
          <source>Returns whether the file represented by this &lt;code&gt;DirEntry&lt;/code&gt; is a symbolic link.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba3db36224e13e2474d0dd4f5c75bcb323efc167" translate="yes" xml:space="preserve">
          <source>Returns whether the given day is valid for the given year and month.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd0cae71c12ced837f12efb8bed85b2d663584ad" translate="yes" xml:space="preserve">
          <source>Returns whether the given file (or directory) is a file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1d9f2dd278102b2a31cc3434c73368266665cd1" translate="yes" xml:space="preserve">
          <source>Returns whether the given file attributes are for a directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a80b5fb681696719b08f9c26c6949cdacb39962" translate="yes" xml:space="preserve">
          <source>Returns whether the given file attributes are for a file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77ccc710157d8864fb9582400cce8aec394abde3" translate="yes" xml:space="preserve">
          <source>Returns whether the given file attributes are for a symbolic link.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b361d0b04b5b5842232aa78493d9985b18b232ca" translate="yes" xml:space="preserve">
          <source>Returns whether the given file is a directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da5a0bad39028a7d4481de8d65e49dfcb3c95276" translate="yes" xml:space="preserve">
          <source>Returns whether the given file is a symbolic link.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fe6f4c2454ab20247885739acba1adb4cad2ec8" translate="yes" xml:space="preserve">
          <source>Returns whether the given value is valid for the given unit type when in a time point. Naturally, a duration is not held to a particular range, but the values in a time point are (e.g. a month must be in the range of 1 - 12 inclusive).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5626c162db92c34f6c67b7210f42c09088f14eb" translate="yes" xml:space="preserve">
          <source>Returns whether the resource exists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="547f6e36f8abd95e8ba99e550f4f1f4c7bd5746d" translate="yes" xml:space="preserve">
          <source>Returns whether this &lt;code&gt;Duration&lt;/code&gt; is negative.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0afcdbd574ed97c633aeb99e4d6e73fb6c95ac45" translate="yes" xml:space="preserve">
          <source>Returns whether this StopWatch is currently running.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="838ce6f04b144643d883aba09cab9cea3aa97645" translate="yes" xml:space="preserve">
          <source>Returns x rounded to a long value using the FE_TONEAREST rounding mode. If the integer value of x is greater than long.max, the result is indeterminate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a95802367fe5f1b74a0d9f770d25f2f23e46b59" translate="yes" xml:space="preserve">
          <source>Returns x rounded to a long value using the current rounding mode. If the integer value of x is greater than long.max, the result is indeterminate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80b52c39509623a517e5744a3fafec2a8b652469" translate="yes" xml:space="preserve">
          <source>Returns |x|</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7749fcf802c472b6c2f5bd0556805e456ffd5674" translate="yes" xml:space="preserve">
          <source>Returns:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="042600f6d61956e81270c4621932f5503cc00b56" translate="yes" xml:space="preserve">
          <source>Reuses the &lt;code&gt;File&lt;/code&gt; object to either open a different file, or change the file mode. If &lt;code&gt;name&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, the mode of the currently open file is changed; otherwise, a new file is opened, reusing the C &lt;code&gt;FILE*&lt;/code&gt;. The function has the same semantics as in the C standard library &lt;a href=&quot;http://cplusplus.com/reference/cstdio/freopen/&quot;&gt;freopen&lt;/a&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81f6a2c4d287154f1ce5316a434686509dd8c2c4" translate="yes" xml:space="preserve">
          <source>Reverse a list in place.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02bba980f228add0c93063c7e5848dfa4b43823a" translate="yes" xml:space="preserve">
          <source>Reverse an array in-place.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="486fcc000e3e1c1b7111db7b98eb05fe4c35e9ea" translate="yes" xml:space="preserve">
          <source>Reverses &lt;code&gt;r&lt;/code&gt; in-place. Performs &lt;code&gt;r.length / 2&lt;/code&gt; evaluations of &lt;code&gt;swap&lt;/code&gt;. UTF sequences consisting of multiple code units are preserved properly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36b64711436f6dd1804041259ae5426a477f2fe3" translate="yes" xml:space="preserve">
          <source>Reverses SList in-place. Performs no memory allocation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2c24b3de5bc34f6bc17f9d7532084a2887cdd6e" translate="yes" xml:space="preserve">
          <source>Reverses the bits of the &lt;code&gt;BitArray&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cb19a0522bebe49634bd788f59866fd3167457e" translate="yes" xml:space="preserve">
          <source>Reverses the order of bits in a 32-bit integer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52b779a914b388fa595c14cb18714aac8a12728d" translate="yes" xml:space="preserve">
          <source>Reverses the order of bits in a 64-bit integer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="913c17e6f3ea1b0c8c04639c0711b667473adbb7" translate="yes" xml:space="preserve">
          <source>Revert to a default value upon an error:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e92da2a9db5a146a33de55a03086369ae07d386" translate="yes" xml:space="preserve">
          <source>Reviewed by Brad Roberts. Daniel Keep provided a detailed code review prompting the following improvements: (1) better support for arrays; (2) support for associative arrays; (3) friendlier behavior towards the garbage collector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f976e9a2195ccad9e07346e959b4ecc76c325eff" translate="yes" xml:space="preserve">
          <source>Revision history.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="646189a1955445c94d7221e00a651a2046c1c871" translate="yes" xml:space="preserve">
          <source>Rewrite contracts as statements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89b5d5e37f6f56a29c2561c072dc241cd55931aa" translate="yes" xml:space="preserve">
          <source>Rewriting of comparison operations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2def1680135bf4b47297c8087f4620ec0b2e4a9" translate="yes" xml:space="preserve">
          <source>Rhs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e526ff266e522a5426ba99295485c6b8af7b831" translate="yes" xml:space="preserve">
          <source>Rhs &lt;code&gt;rhs&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bde1c79b7d3fd6e3d0fb5b38d93ff6a5d75715e7" translate="yes" xml:space="preserve">
          <source>Right bound of initial range of &lt;code&gt;f&lt;/code&gt; known to contain the root.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a51ab2c4a960026caf59b69b53b43b1ec73a88f5" translate="yes" xml:space="preserve">
          <source>Right bound of initial range of f known to contain the minimum.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afb13751cbca853ef0a548421c5ad4469c798c3d" translate="yes" xml:space="preserve">
          <source>Right justify &lt;code&gt;s&lt;/code&gt; in a field &lt;code&gt;width&lt;/code&gt; characters wide. &lt;code&gt;fillChar&lt;/code&gt; is the character that will be used to fill up the space in the field that &lt;code&gt;s&lt;/code&gt; doesn't fill.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc84b9f323c969ed747f63616d18cb0e2559eefa" translate="yes" xml:space="preserve">
          <source>Rng &lt;code&gt;rnd&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18748a54bf90fc0b5a4a3a7527f67a3a4d953d4a" translate="yes" xml:space="preserve">
          <source>RoR &lt;code&gt;r&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64c2bd3f7cd65ceac20ebd1622a287b9466bc72e" translate="yes" xml:space="preserve">
          <source>RoR &lt;code&gt;ror&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18ba044430e02f2958be80a25158f225f656d9b1" translate="yes" xml:space="preserve">
          <source>Robert burner Schadek</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0c828eded61ec9ce66ca119b9686e81b389c44d" translate="yes" xml:space="preserve">
          <source>Rolls a dice with relative probabilities stored in &lt;code&gt;proportions&lt;/code&gt;. Returns the index in &lt;code&gt;proportions&lt;/code&gt; that was chosen.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12c0a4d87f9da9ea7c5d02b3d258368b74939baf" translate="yes" xml:space="preserve">
          <source>RootObject &lt;code&gt;id&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cd58c4c77682fa001856e18b08987d9c7304449" translate="yes" xml:space="preserve">
          <source>RootObject &lt;code&gt;o&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="581ba447c0a648c09593b4209f69b921e66e29fb" translate="yes" xml:space="preserve">
          <source>RootObject &lt;strong id=&quot;aliasParameterSemantic&quot;&gt;aliasParameterSemantic&lt;/strong&gt;(Loc loc, Scope* sc, RootObject o, TemplateParameters* parameters);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d593553b26c6fd5515161b0277225d93c8a2251" translate="yes" xml:space="preserve">
          <source>RootObject &lt;strong id=&quot;declareParameter&quot;&gt;declareParameter&lt;/strong&gt;(Scope* sc, TemplateParameter tp, RootObject o);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd5e5447f2a2e34e3141a1bcd21ba5c605ed9ef2" translate="yes" xml:space="preserve">
          <source>RootObject &lt;strong id=&quot;parseTypeOrAssignExp&quot;&gt;parseTypeOrAssignExp&lt;/strong&gt;();</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b41a314bf17040d8b5e323877c0e8fe02f9fba89" translate="yes" xml:space="preserve">
          <source>RootObject representing the AST</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ba043d4ad1fd9feaa94d824a766c624f78a67ee" translate="yes" xml:space="preserve">
          <source>Round &lt;code&gt;val&lt;/code&gt; to a multiple of &lt;code&gt;pow(base, exp)&lt;/code&gt;. &lt;code&gt;rfunc&lt;/code&gt; specifies the rounding function to use; by default this is &lt;code&gt;rint&lt;/code&gt;, which uses the current rounding mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="729404f7fdd29f46bc8030966e8df9381b6f53f0" translate="yes" xml:space="preserve">
          <source>Round &lt;code&gt;val&lt;/code&gt; to a multiple of &lt;code&gt;unit&lt;/code&gt;. &lt;code&gt;rfunc&lt;/code&gt; specifies the rounding function to use; by default this is &lt;code&gt;rint&lt;/code&gt;, which uses the current rounding mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c9fcd821c05596d6a4e9e2c37c9b79af458d2d7" translate="yes" xml:space="preserve">
          <source>Round up request size to allocation size</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fd5c41f6700ee519edf618656bada84a4f1c15e" translate="yes" xml:space="preserve">
          <source>Rounded conversion from floating point to integral.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="659e3ebceec95fe76068b19e1defb6c7ca41b740" translate="yes" xml:space="preserve">
          <source>Rounded conversions do not work with non-integral target types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="905cc3792492961c10eb158788a7c9f956d57aa5" translate="yes" xml:space="preserve">
          <source>Rounding</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed8aff3fee04dc785e0009447efda6debf75523d" translate="yes" xml:space="preserve">
          <source>Rounding Control</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcb5ec50f2ff4848cbdf10cd3aca75df1aae70d8" translate="yes" xml:space="preserve">
          <source>RoundingMode &lt;code&gt;newMode&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc46ee2c4198eaa115c62825b2bc01d30bf3319e" translate="yes" xml:space="preserve">
          <source>Rounds the allocation size to the next multiple of the page size. The allocation only reserves a range of virtual pages but the actual physical memory is allocated on demand, when accessing the memory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9330049c8ecb309df4b4f2448f62c07ca3a5bfc1" translate="yes" xml:space="preserve">
          <source>Rounds the given size to a multiple of the &lt;code&gt;alignment&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf6bdd959037cb97c60373b1c6c57fbce0f61cd1" translate="yes" xml:space="preserve">
          <source>Rounds the given size to a multiple of thew &lt;code&gt;alignment&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="014f4474c49fd6651e10ead6abedbffd20a6b747" translate="yes" xml:space="preserve">
          <source>Rounds the mapping size to the next multiple of the page size and calls the OS primitive responsible for creating memory mappings: &lt;code&gt;mmap&lt;/code&gt; on POSIX and &lt;code&gt;VirtualAlloc&lt;/code&gt; on Windows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91034be1d9b5696626eca72339485ed35eb1c32c" translate="yes" xml:space="preserve">
          <source>Rounds the requested size to the next multiple of the page size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb30f3b3a072315c39d8c23f795265f803a1f40a" translate="yes" xml:space="preserve">
          <source>Rounds up to the maximum size of the bucket in which &lt;code&gt;bytes&lt;/code&gt; falls.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="731df05540a9b4da46134227754879d50511760e" translate="yes" xml:space="preserve">
          <source>Rounds x to the nearest integer value, using the current rounding mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d63adc049eca9d725dc69dc2d8ec8d8ff1fcd9bf" translate="yes" xml:space="preserve">
          <source>Rounds x to the nearest integer value, using the current rounding mode. If the return value is not equal to x, the FE_INEXACT exception is raised. &lt;b&gt;nearbyint&lt;/b&gt; performs the same operation, but does not set the FE_INEXACT exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="284a7f5e42a363953a5a0c3e60335230917805e7" translate="yes" xml:space="preserve">
          <source>Routines specific to the ASCII subset of Unicode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6805fd1202106fd7a5b33f7938919a99122b9436" translate="yes" xml:space="preserve">
          <source>Rs &lt;code&gt;needles&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70d98aa2b860f17dc12cc094ee367ed29d25899f" translate="yes" xml:space="preserve">
          <source>Rs &lt;code&gt;ranges&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30691c304c0236788193b6f2b9255d54b7feeef4" translate="yes" xml:space="preserve">
          <source>Rs &lt;code&gt;rs&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4649e75ce0ca5e2108b66926fc94b55756d33ca" translate="yes" xml:space="preserve">
          <source>Rumi Numeral Symbols</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89df0e63db6dedf1067d015771af8537f9f0a5c7" translate="yes" xml:space="preserve">
          <source>Run full semantic analysis on a module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67bb6e4e60e2ed7434c05e6c4fd8fe82d7918af4" translate="yes" xml:space="preserve">
          <source>Run semantic of tiargs as arguments of template.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2f1578ded20a82e135ec7d157cd65eda0b27068" translate="yes" xml:space="preserve">
          <source>Run semantic on the elements of tiargs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24c47178385ae643551870f725edd4d44000744c" translate="yes" xml:space="preserve">
          <source>Run semantic() on deferred symbols.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="487018e035aa1a925c09e288af33a70420405da7" translate="yes" xml:space="preserve">
          <source>Run the compiled program. Return exit status.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a442da74d9b7a844e73f5eb10b3afcd2d4b6c59c" translate="yes" xml:space="preserve">
          <source>Run the destructor on the object and all its sub-objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65155cef6176c6b4a7372235d02b5318ebb48bd7" translate="yes" xml:space="preserve">
          <source>Run the linker. Return status of execution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8684492770a34ac36f41175eeb606cbd485765c3" translate="yes" xml:space="preserve">
          <source>Run the postblit on the object and all its sub-objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a404918f75e1c621a9e51e540dea6b35ddf73cd9" translate="yes" xml:space="preserve">
          <source>Run-Time Library Compilation Options Diagnostics</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3a1ab24d28a4516dc6367fed9cebd2e03e59a70" translate="yes" xml:space="preserve">
          <source>Run-Time Library Version Numbers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4574000a6e96e607432e6012acf5a8e676d5db3e" translate="yes" xml:space="preserve">
          <source>Run-time Limits</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10edb70120d58b585eb716dac04179f10c05bfdd" translate="yes" xml:space="preserve">
          <source>Runic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f23108daf10fc3ed86df2bb60d044dcbc323f158" translate="yes" xml:space="preserve">
          <source>Running destructors for all queued memory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="076c12c94d5b2e24f616a54dcfe8c9154603b9ed" translate="yes" xml:space="preserve">
          <source>Running unittests in &lt;code&gt;-betterC&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ba8bd6c28554c6202fef1066cc234eae87487bf" translate="yes" xml:space="preserve">
          <source>Runs any finalizer that is located in address range of the given code segment. This is used before unloading shared libraries. All matching objects which have a finalizer in this code segment are assumed to be dead, using them while or after calling this method has undefined behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="470a6d23ca6f426b222731ede8c4aa789158b8dc" translate="yes" xml:space="preserve">
          <source>Runs program directly</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9d3311dbe287dca576c90f42488f7c77856b7ac" translate="yes" xml:space="preserve">
          <source>Runs semantic on ae.arguments. Declares temporary variables if '$' was used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4e7cb34c2ab1babf604d85da7c5d6cb4fd0dc24" translate="yes" xml:space="preserve">
          <source>Runs semantic on se.lwr and se.upr. Declares a temporary variable if '$' was used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eef5fd1918e9d70b9d5f48364fcaaf084f45f2b2" translate="yes" xml:space="preserve">
          <source>Runs semantic() for all instance field variables, but also the field types can remain yet not resolved forward references, except direct recursive definitions. After the process sizeok is set to Sizeok.fwd.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e842f74109e182d726417475c208ddf41aa30d0" translate="yes" xml:space="preserve">
          <source>Runs shell command</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66945c04f3e95699c5fdec4cf7dd394fe1c7d455" translate="yes" xml:space="preserve">
          <source>Runtime Helper Functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19429dc4f33b4606e69944f9c03a5f91e1716396" translate="yes" xml:space="preserve">
          <source>Runtime Initialization of Immutable AAs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cd0c965651550e6b7d802c00c94f2266c77cfe0" translate="yes" xml:space="preserve">
          <source>Runtime Type Identification</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c144d6087854e8cbe0377f690fa84167ea88336c" translate="yes" xml:space="preserve">
          <source>Runtime definitions generated by Ddoc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cce066c267be49d859d26b1e82f47342169d76d" translate="yes" xml:space="preserve">
          <source>Runtime environment, such as OS type and endianness.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="629014c630c14ebdb1feb763095453ae92ce0c74" translate="yes" xml:space="preserve">
          <source>Runtime support for complex arithmetic code generation (for Posix).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98c8a9d894097346cd0b357382518ce28e5bf6f3" translate="yes" xml:space="preserve">
          <source>Runtime type information (a.k.a &lt;code&gt;TypeInfo&lt;/code&gt;) is supported. Evaluates to &lt;code&gt;false&lt;/code&gt; when compiling with command line switch &lt;a href=&quot;https://dlang.org/dmd.html#switch-betterC&quot;&gt;&lt;em&gt;-betterC&lt;/em&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7909f3e2a880ec8330c6e14e5d738f440fdbd059" translate="yes" xml:space="preserve">
          <source>Runtime type information about a class. Can be retrieved from an object instance by using the &lt;a href=&quot;https://dlang.org/spec/property.html#classinfo&quot;&gt;.classinfo&lt;/a&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b2db9e635e2be76be75ebc790eef0550a4049d2" translate="yes" xml:space="preserve">
          <source>Runtime type information about a type. Can be retrieved for any type using a &lt;a href=&quot;https://dlang.org/spec/expression.html#TypeidExpression&quot;&gt;&lt;i&gt;TypeidExpression&lt;/i&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02aa629c8b16cd17a44f3a0efec2feed43937642" translate="yes" xml:space="preserve">
          <source>S</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e382de0e0fb44a2437e2cafcf5204582a3adea25" translate="yes" xml:space="preserve">
          <source>S &lt;code&gt;args&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dbe2bde1e0e339ad7404569dc9b29ac5d3dc2c0" translate="yes" xml:space="preserve">
          <source>S &lt;code&gt;firstindent&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a11859009423adbef61f15df07771c3ab6ebf08f" translate="yes" xml:space="preserve">
          <source>S &lt;code&gt;indent&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f4406f8ac105ec20618542297c575d74db7e0d4" translate="yes" xml:space="preserve">
          <source>S &lt;code&gt;input&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="699d25e2b0ab4544fad7df604e63a857fced9182" translate="yes" xml:space="preserve">
          <source>S &lt;code&gt;isoExtString&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4763442f1fcdb7c934956ed0c078ca94cecb4b69" translate="yes" xml:space="preserve">
          <source>S &lt;code&gt;isoString&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87c2a614b00f9d46a131e521b1c970e87e284981" translate="yes" xml:space="preserve">
          <source>S &lt;code&gt;newLocation&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="864d7c2b61b468f3d87395f5b343509939e3d3b2" translate="yes" xml:space="preserve">
          <source>S &lt;code&gt;oldLocation&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4594949c12176e425e44b2503e0be257a46d9771" translate="yes" xml:space="preserve">
          <source>S &lt;code&gt;pattern&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c58fb4ceef8dbb498c32322ef5a373c844e63f9a" translate="yes" xml:space="preserve">
          <source>S &lt;code&gt;s&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7560f20d4834fa9d42d83d64caa71bf12ee60dd4" translate="yes" xml:space="preserve">
          <source>S &lt;code&gt;seed&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="572e91654bcf8c42d0bb05a4baf68154c349006f" translate="yes" xml:space="preserve">
          <source>S &lt;code&gt;simpleString&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0748e7ed68d912b4985ea58f1801865321ed280" translate="yes" xml:space="preserve">
          <source>S &lt;code&gt;source&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22085ab23c0a2c2b457708dc398e2151f27afd63" translate="yes" xml:space="preserve">
          <source>S &lt;code&gt;step&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcd939c73571bdbf9811413c52cedd8170546d1b" translate="yes" xml:space="preserve">
          <source>S &lt;code&gt;str&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea8e3ebcf296d0466ec5b83431c3f508a1129aed" translate="yes" xml:space="preserve">
          <source>S &lt;strong id=&quot;center&quot;&gt;center&lt;/strong&gt;(S)(S s, size_t width, dchar fillChar = ' ')</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff194ac8e1659fb1ef55f84ca193edab71e46fe9" translate="yes" xml:space="preserve">
          <source>S &lt;strong id=&quot;encode&quot;&gt;encode&lt;/strong&gt;(S)(S s);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45bede8d40f4ea2b9d66eb19c9f1bb74d28dece7" translate="yes" xml:space="preserve">
          <source>S &lt;strong id=&quot;leftJustify&quot;&gt;leftJustify&lt;/strong&gt;(S)(S s, size_t width, dchar fillChar = ' ')</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="faacb70ba561f5eaab2d93d9e1ff8fec17106215" translate="yes" xml:space="preserve">
          <source>S &lt;strong id=&quot;readText&quot;&gt;readText&lt;/strong&gt;(S = string, R)(auto ref R name)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1f793c68a84ebeeb87f9b20a9fe015b979293d4" translate="yes" xml:space="preserve">
          <source>S &lt;strong id=&quot;readln&quot;&gt;readln&lt;/strong&gt;(S = string)(dchar terminator = '\x0a')</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="684aa7427e974eb85fd33b4bb65ae99bcfd64843" translate="yes" xml:space="preserve">
          <source>S &lt;strong id=&quot;rightJustify&quot;&gt;rightJustify&lt;/strong&gt;(S)(S s, size_t width, dchar fillChar = ' ')</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0393059fed805e5ef642dd11255c12523350d4b3" translate="yes" xml:space="preserve">
          <source>S &lt;strong id=&quot;wrap&quot;&gt;wrap&lt;/strong&gt;(S)(S s, in size_t columns = 80, S firstindent = null, S indent = null, in size_t tabsize = 8)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e917cf6ebf99c11da0b0aa44342f6a56c3838c33" translate="yes" xml:space="preserve">
          <source>S1 &lt;code&gt;r1&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f5aa57d10094e07762a865607ca3aebaebcfaf1" translate="yes" xml:space="preserve">
          <source>S2 &lt;code&gt;r2&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90f7dcbe0a7adc29f1b7883d9998068696ebe5c2" translate="yes" xml:space="preserve">
          <source>SDC (Stupid D Compiler) is the compiler</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aaad61307e238135c76b878cf7f2b76b019102a4" translate="yes" xml:space="preserve">
          <source>SELECT ... FROM &amp;lt;rtree&amp;gt; WHERE &amp;lt;rtree col&amp;gt; MATCH zGeom(... params ...)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dea28f2424de76cbec5c0f706b39a3a24402ebb" translate="yes" xml:space="preserve">
          <source>SHA alias for SHA-1, hash is ubyte[20]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6ba60d6057db7ffbde7428d5efb7ca39d8e5a8d" translate="yes" xml:space="preserve">
          <source>SHA alias for SHA-224, hash is ubyte[28]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef412b0408f1131601bc1d081c71753f55a6f5f5" translate="yes" xml:space="preserve">
          <source>SHA alias for SHA-256, hash is ubyte[32]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e1c0999aff0e08d1cc34cb7c8be49144fdf7d19" translate="yes" xml:space="preserve">
          <source>SHA alias for SHA-384, hash is ubyte[48]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be1e06763922a87658d0515fcb65953b951af771" translate="yes" xml:space="preserve">
          <source>SHA alias for SHA-512, hash is ubyte[64]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83d47a665aa11f19470eabbe4ad0c6a468a784c5" translate="yes" xml:space="preserve">
          <source>SHA alias for SHA-512/224, hash is ubyte[28]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edb9edf7cba4777e2af2817cdc003dc252ec2048" translate="yes" xml:space="preserve">
          <source>SHA alias for SHA-512/256, hash is ubyte[32]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="218e949ab000eedecd7f5be2181af475d7a28bf4" translate="yes" xml:space="preserve">
          <source>SHA initialization. Begins an SHA1/SHA2 operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="377b0c5330ca180363130716108279f340ca8914" translate="yes" xml:space="preserve">
          <source>SHA2 comes in several different versions, all supported by this module: SHA-224, SHA-256, SHA-384, SHA-512, SHA-512/224 and SHA-512/256.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6de691384f5963f51651150662473268acfe159d" translate="yes" xml:space="preserve">
          <source>SIMD</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ae7a444746a4694c1f810fd55c72594ceaefb23" translate="yes" xml:space="preserve">
          <source>SIMD intrinsics</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="585340cadbd70b05ddcce6b79f008a8cfde57213" translate="yes" xml:space="preserve">
          <source>SIMD vectors are formatted as arrays.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="988fdc325bf41ddaa8687b657a22220f9b0cf25e" translate="yes" xml:space="preserve">
          <source>SIZE_INVALID when the size cannot be determined</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86abe807b4ad4886d4e603cb7e82f1ea78f0b47d" translate="yes" xml:space="preserve">
          <source>SList &lt;strong id=&quot;opBinary&quot;&gt;opBinary&lt;/strong&gt;(string op, Stuff)(Stuff rhs)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="787bca980009633361375ca85176c51bdd5eafe3" translate="yes" xml:space="preserve">
          <source>SList &lt;strong id=&quot;opBinaryRight&quot;&gt;opBinaryRight&lt;/strong&gt;(string op, Stuff)(Stuff lhs)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96f382d010f0023803a2572f0d3691ad7e5ef724" translate="yes" xml:space="preserve">
          <source>SPNEGO auth</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e9ce45942cc7e9d26f3a46fe1708d35956c0bbd" translate="yes" xml:space="preserve">
          <source>SParent &lt;strong id=&quot;parent&quot;&gt;parent&lt;/strong&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a4d6cf316fc8dd03be409de229b75e6a4445a50" translate="yes" xml:space="preserve">
          <source>SQL Function Context Object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c354013bd3ec56e8aa2a52a6efc8e220327d20d0" translate="yes" xml:space="preserve">
          <source>SQL Keyword Checking</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba1a0225e63388b5a990690d4b4fb5821830e1d8" translate="yes" xml:space="preserve">
          <source>SQL Statement Object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d284e692561007ebb69fa47dc5417ac0d2e8670c" translate="yes" xml:space="preserve">
          <source>SQL Trace Hook</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b61cfd89697cf1e4c1606af934cf897a3a7e3c3" translate="yes" xml:space="preserve">
          <source>SQLite Runtime Status</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e7ef778859b488d78ccefae8b84f6a54088b1fa" translate="yes" xml:space="preserve">
          <source>SRCFILENAME</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0460781581237ef65859a0682e556728b2150b0a" translate="yes" xml:space="preserve">
          <source>SRange &lt;code&gt;source&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d69c2ff3c2f8e2e33ba27b1f75b0e8bda6f0441" translate="yes" xml:space="preserve">
          <source>SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2 and AVX are supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c2137290ddc17e1bf47aba75e1fa887c3bb0d0b" translate="yes" xml:space="preserve">
          <source>SSL for all communication or fail</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94c18953250ee18df93c40e56974f7303e0e4b86" translate="yes" xml:space="preserve">
          <source>SSL for the control connection or fail</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34a8103eb62af3cb2a59c7412e2ef9c7225d5a2f" translate="yes" xml:space="preserve">
          <source>SSL options are present</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d903d50621cb00ff243d594748c29302fa3665e" translate="yes" xml:space="preserve">
          <source>SSPI is supported</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bec5a021426205f4bcb6e907edee1eeb124b5cad" translate="yes" xml:space="preserve">
          <source>ST1 real part ST0 imaginary part</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7196e7c29d205cf35657781e59674fc592b0e1d5" translate="yes" xml:space="preserve">
          <source>START</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ead9d31f2913387ea670737a1d22aa3db8997291" translate="yes" xml:space="preserve">
          <source>STL's &lt;code&gt;adjacent_find&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d433c1de58ad88f4a0ab9475db3fbc3a187c129" translate="yes" xml:space="preserve">
          <source>STL's &lt;code&gt;rotate&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c52da2e75828833f502383caea12087d8488f445" translate="yes" xml:space="preserve">
          <source>STRICT</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8704c48de99f629f97125ecc53909c6abff4468" translate="yes" xml:space="preserve">
          <source>STerm</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed77febc58c1f597f3bbfc31c0982965457b2d93" translate="yes" xml:space="preserve">
          <source>SYSTEMTIME* &lt;code&gt;st&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b60f7266895adacdf4bfc664cfeee4d1a844556" translate="yes" xml:space="preserve">
          <source>S[] &lt;code&gt;lines&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3f35d2d44b26e7ed2fcf89c8e36d5bd36488aae" translate="yes" xml:space="preserve">
          <source>S[] &lt;code&gt;patterns&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d4a129672b620efc79c9478b37bd02b09f23063" translate="yes" xml:space="preserve">
          <source>Safe Functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c922825bf9f43cf96017af296ca65b80d35299b0" translate="yes" xml:space="preserve">
          <source>Safe functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb258855cc717eb39d618134eb80322fd4721cb0" translate="yes" xml:space="preserve">
          <source>Safe functions are covariant with trusted or system functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af004793aec7230c86f503125f1c07aba86a96df" translate="yes" xml:space="preserve">
          <source>Safe functions are marked with the &lt;code&gt;@safe&lt;/code&gt; attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5666ba4ff9ee05db0c478f56571ac6677e83dab" translate="yes" xml:space="preserve">
          <source>Samaritan</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99bd6516e5bd61924dcf1c10ab4f7049ad6403d4" translate="yes" xml:space="preserve">
          <source>Same as !(x.empty), provided for its convenience in conditional statements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="727481a8b962fc466248dedb31261f069b953503" translate="yes" xml:space="preserve">
          <source>Same as .front, provided for compatibility with original std.regex.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd3ad512eab2f944941edd64a482d503631baaf1" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;#moveSome&quot;&gt;&lt;code&gt;moveSome&lt;/code&gt;&lt;/a&gt; but assumes all elements in &lt;code&gt;tgt&lt;/code&gt; are uninitialized. Uses &lt;a href=&quot;#moveEmplace&quot;&gt;&lt;code&gt;moveEmplace&lt;/code&gt;&lt;/a&gt; to move elements from &lt;code&gt;src&lt;/code&gt; over elements from &lt;code&gt;tgt&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78d4c9aecdc6038f22eef6a6ff18f5537f1170ac" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;c.insert(v)&lt;/code&gt; but relaxes complexity to linear.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75a9773be000b0028e154f6bb028458e9b68ee7d" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;c.insert(x)&lt;/code&gt;, but is guaranteed to not invalidate any ranges.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cbb07b2f250984e910a19b183cea054456f94d7" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;c.insertBack(v)&lt;/code&gt;, but guarantees no ranges will be invalidated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7b832c907a3c8e2c88fd08867c961e0660e4dc4" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;c.insertFront(v)&lt;/code&gt;, but guarantees no ranges will be invalidated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4511bbf2dc51a3f2a6ed286e36440cb10f6b4fa" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;c.linearRemove(r)&lt;/code&gt;, but guarantees iterators are not invalidated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33a4e65e5aca4c9b1c52f16398b17a822156c321" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;c.remove(r)&lt;/code&gt;, but guarantees iterators are not invalidated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b75d756c31c9feaab2cdaef81d897d243a886269" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;c.removeAny()&lt;/code&gt;, but is guaranteed to not invalidate any iterators.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4df85d259bba8c69823d7406dfe7ba0f09b5800f" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;c.removeBack()&lt;/code&gt;, but guarantees no ranges will be invalidated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3948eac36809d043a27f12e3ecdcee465617ea58" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;c.removeFront()&lt;/code&gt;, but guarantees no ranges will be invalidated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd0144d3023f6044dfa1ded65b6882f70a32dd7e" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;c.stableInsert(v)&lt;/code&gt; but relaxes complexity to linear.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ab6de85a2865e49e64d621a96ffa42c153da266" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;deprecation&lt;/code&gt;, but takes a va_list parameter, and optionally additional message prefixes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a19728bd700823f3dce9f62e0e300f7b45545b66" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;deprecationSupplemental&lt;/code&gt;, but takes a va_list parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="297b5301668c075c062dde99e98da1f1b3af4f6b" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;error&lt;/code&gt;, but takes a va_list parameter, and optionally additional message prefixes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37b532d31065c6d359d467676f9d969d2815ef54" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;errorSupplemental&lt;/code&gt;, but takes a va_list parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f384e1f2863a2aeebc9dd8f5c5d2184416ff5cbc" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;fold&lt;/code&gt;, but specialized for accurate summation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="032c9e0e823b8183cf4d02cceba81d25aad65725" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;message&lt;/code&gt;, but takes a va_list parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71490da7d6c15740278024bfb9cca42797f20b8b" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;receive&lt;/code&gt; except that rather than wait forever for a message, it waits until either it receives a message or the given &lt;a href=&quot;core_time#Duration&quot;&gt;&lt;code&gt;core.time.Duration&lt;/code&gt;&lt;/a&gt; has passed. It returns &lt;code&gt;true&lt;/code&gt; if it received a message and &lt;code&gt;false&lt;/code&gt; if it timed out waiting for one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7a3019ce60733d0ce7b4dc634b679a1d4891785" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;tip&lt;/code&gt;, but takes a va_list parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5c4fbf85f3beb6de49795fef02185002ad63624" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;warning&lt;/code&gt;, but takes a va_list parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c48b5bda54b35c0efd762ae2341da89fa913ce1" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;warningSupplemental&lt;/code&gt;, but takes a va_list parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="751f77d7da736194060538a83757f294ac637c7b" translate="yes" xml:space="preserve">
          <source>Same as ==, except that positive and negative zero are not identical, and two NANs are identical if they have the same 'payload'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d61bd76cf8c63963304e90e422617e5e5227083" translate="yes" xml:space="preserve">
          <source>Same as Dsymbol::oneMember(), but look at an array of Dsymbols.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f83382eba02336641c8e8bb79a1282343a63f02" translate="yes" xml:space="preserve">
          <source>Same as TIMEOUT and CONNECTTIMEOUT, but with ms resolution</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffb011bf8703e4764378cf5a0a0bf448f82d9b15" translate="yes" xml:space="preserve">
          <source>Same as above but also checks for protected symbols visible from scope &lt;code&gt;sc&lt;/code&gt;. Used for qualified name lookup.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8efe3f62051383a075e76337100acf0e39cbebb0" translate="yes" xml:space="preserve">
          <source>Same as above, but allows Loc() literals to be passed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9308ddbd8fba34c5d92529f2a71ce3a97c679fc" translate="yes" xml:space="preserve">
          <source>Same as above, but determines the lookup module from symbols &lt;code&gt;origin&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="755f3e16e6c0eccc99c51dc60992931000e6c820" translate="yes" xml:space="preserve">
          <source>Same as above, but doesn't take a location argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a5d84d8c80211114b7047ff1d9ff284dbeb9850" translate="yes" xml:space="preserve">
          <source>Same as above, but takes a filename and line information arguments as separate parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4148bec1f4d9c3025435fe1637b31f691f714c80" translate="yes" xml:space="preserve">
          <source>Same as above, but takes a separate mutex instead of sharing one among all initOnce instances.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ef3b765e0b83339c93f08100b26d393bcd759f2" translate="yes" xml:space="preserve">
          <source>Same as above, for item with non-zero initializer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5dedd4e173847bb02bce0989d35ee088225c2966" translate="yes" xml:space="preserve">
          <source>Same as above, zero initializes the item.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d718b33c18604b3f2825d9a34893682fd36cbcb8" translate="yes" xml:space="preserve">
          <source>Same as aggregates and functions, variable declarations with &lt;a href=&quot;declaration#Initializer&quot;&gt;&lt;i&gt;Initializer&lt;/i&gt;&lt;/a&gt; can have optional template parameters:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df42bab69a32a505468aa4d21852e1296728537a" translate="yes" xml:space="preserve">
          <source>Same as getFieldIndex, but checks for a direct match with the VarDeclaration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87a0a5b05ee89501954d4b629bf09767caba736f" translate="yes" xml:space="preserve">
          <source>Same as previous, but addr is an IPv4 address string in the dotted-decimal form</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9bfe9476663fc816dde2351073538df50c0def9" translate="yes" xml:space="preserve">
          <source>Same as the overload, but allows for the results to be stored in a user- provided buffer. The buffer must be of the same length as range, must be a random-access range, must have slicing, and must contain elements that are complex-like. This means that they must have a .re and a .im member or property that can be both read and written and are floating point numbers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="490fc4a66e27c7b7fee23222da4c9d9a1088faff" translate="yes" xml:space="preserve">
          <source>Same features as &lt;code&gt;FreeList&lt;/code&gt;, but packaged as a &lt;code&gt;shared&lt;/code&gt; structure that is accessible to several threads.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33e1356035ce5d0eb2ee979799006e6fb53631bb" translate="yes" xml:space="preserve">
          <source>Sample Assembly</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a55a0fc647ab82f0d156dbe48832b224670188d1" translate="yes" xml:space="preserve">
          <source>Sanitizes a string by replacing malformed code unit sequences with valid code unit sequences. The result is guaranteed to be valid for this encoding.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="588fb4501b6744b77a958bd12f00e2d300ddbedb" translate="yes" xml:space="preserve">
          <source>Sanitizes an array by replacing malformed ubyte sequences with valid ubyte sequences. The result is guaranteed to be valid for this encoding scheme.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="640306121d4405dbfeb73bb587411093702f90f8" translate="yes" xml:space="preserve">
          <source>Saturation is not sticky; if a value reaches its saturation value, another operation may take it back to normal range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c04544993d1d8f789981802f89231df026eb2cfc" translate="yes" xml:space="preserve">
          <source>Saurashtra</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6cf92931d2174dd1c0e30bb678dd9a1781b9fac" translate="yes" xml:space="preserve">
          <source>Save the current iteration state of the range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b2b51abae62959c4f172203815c976a3e0e3c7d" translate="yes" xml:space="preserve">
          <source>Save the environment variable &lt;code&gt;name&lt;/code&gt; if not saved already.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="109607031a9b2768a10f71f63027aa34e30b8964" translate="yes" xml:space="preserve">
          <source>Saves the current iteration state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6367ce3e46fb723629c15b19a2aa7445e9b5134f" translate="yes" xml:space="preserve">
          <source>Saving a range is not duplicating it; in the example above, &lt;code&gt;r1&lt;/code&gt; and &lt;code&gt;r2&lt;/code&gt; still refer to the same underlying data. They just navigate that data independently.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cc8cc783b9bed9065864d3ac7dc001f239a0ecd" translate="yes" xml:space="preserve">
          <source>Saving the &lt;code&gt;IAllocator&lt;/code&gt; Reference For Later Use</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9552773249da4fe207e8bf1ff0fb9fd855f56a8c" translate="yes" xml:space="preserve">
          <source>Sc</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16d7763f80d8f9d31be0bdc44b2bb5a243164311" translate="yes" xml:space="preserve">
          <source>Scalar expression sub-trees of &lt;code&gt;e&lt;/code&gt; are evaluated before calling into druntime to hoist them out of the loop. This is a valid evaluation order as the actual array operations have no side-effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b22d31e72e19c5dabc897823cb6fdb3fd44f49eb" translate="yes" xml:space="preserve">
          <source>Scale addition/subtraction to/from pointer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6b7e412b3d18473712a0b7f4a6d02a01db4204b" translate="yes" xml:space="preserve">
          <source>Scan forward to one of: start of identifier beginning of next line end of buf</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8bac0de981f93a8ab291e2720acf8b97063ff17" translate="yes" xml:space="preserve">
          <source>Scan function implementations in Module m looking for functions that can be inlined, and inline them in situ.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ddbc9228342b01ba225e91715e7b177ad4b7a3a" translate="yes" xml:space="preserve">
          <source>ScanAllThreadsFn &lt;code&gt;scan&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="264479eda458a0b0320ed850cc6eaac5667ad0b3" translate="yes" xml:space="preserve">
          <source>ScanAllThreadsTypeFn &lt;code&gt;scan&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7faa1d62cca1d532292ea70ecc03becc2e5fdc9a" translate="yes" xml:space="preserve">
          <source>Scanning all &amp;lsquo;root&amp;rsquo; memory ranges for pointers into GC allocated memory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dd5be73b688b9a1c111e4512ec7b5b9a208c35d" translate="yes" xml:space="preserve">
          <source>Scans the bits in v from the most significant bit to the least significant bit, looking for the first set bit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fab7bc0eb467c6a0a3f3550b4413fe32726a2d8f" translate="yes" xml:space="preserve">
          <source>Scans the bits in v starting with bit 0, looking for the first set bit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="569aae5b47e464b83049959de67717fbf2ff4407" translate="yes" xml:space="preserve">
          <source>Scenario</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8d0fd7d6c36cdbcb6f334d0410d40ef7a6c465c" translate="yes" xml:space="preserve">
          <source>Scheduled for deprecation. Please use &lt;code&gt;dataCaches&lt;/code&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e489cc0f7231aff9d2f32dae249c97a424d884b" translate="yes" xml:space="preserve">
          <source>Scheduler &lt;strong id=&quot;scheduler&quot;&gt;scheduler&lt;/strong&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4057abdd4ada17d51ad3de8bfe7399eb8ec6b4b9" translate="yes" xml:space="preserve">
          <source>Scope &lt;code&gt;sc&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="feeeb5ea742e01f78e79d82899cf5470dd9ceda4" translate="yes" xml:space="preserve">
          <source>Scope Block Statements</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efddbb9da8296c76dccb4126bfe638c8368ab8e1" translate="yes" xml:space="preserve">
          <source>Scope Classes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff37f38826365912c58038af9027c9b58c85cbb3" translate="yes" xml:space="preserve">
          <source>Scope Guard Statement</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef7bff657e6b17b6bdf5df55e7c5e8449a231f32" translate="yes" xml:space="preserve">
          <source>Scope Statements</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbea6fb6b090070290dd113beb8a61b82be2ca72" translate="yes" xml:space="preserve">
          <source>Scope Table</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9eb6a47f1c65e6eab0b311403716abb5d2986340" translate="yes" xml:space="preserve">
          <source>Scope and Return Parameters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93c85a0c24e024cf624c6cd55b5bf042d8a27202" translate="yes" xml:space="preserve">
          <source>Scope in which the call occurs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18f1215f452aa02e3d371abc03ee7220bd6faee8" translate="yes" xml:space="preserve">
          <source>Scope which triggered the generation of the C main, used to get the module where the D main is.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="530a514d37623d594f817863dd9345f32171dbc7" translate="yes" xml:space="preserve">
          <source>Scope* &lt;code&gt;sc&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c18627f4598d0f0fadc7bafaad6d84963b0115f7" translate="yes" xml:space="preserve">
          <source>Scope* &lt;strong id=&quot;newScope&quot;&gt;newScope&lt;/strong&gt;(Scope* sc);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a72527b2f4d99350413c59a6d59f72142044189a" translate="yes" xml:space="preserve">
          <source>Scope* &lt;strong id=&quot;scopeForTemplateParameters&quot;&gt;scopeForTemplateParameters&lt;/strong&gt;(TemplateInstance ti, Scope* sc);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2079a397ee6263a2f96e01550925b0a932f092ec" translate="yes" xml:space="preserve">
          <source>ScopeDsymbol &lt;strong id=&quot;forward&quot;&gt;forward&lt;/strong&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4169d5fa8946da60036063bbb0f697953c5d62d1" translate="yes" xml:space="preserve">
          <source>ScopeDsymbol &lt;strong id=&quot;scopesym&quot;&gt;scopesym&lt;/strong&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b3f28294e22c837eef3daf20e8c0c69bfbe6033" translate="yes" xml:space="preserve">
          <source>ScopeGuardStatement</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e229afc1cfbd552b13db67a7a57ecb7a9e1eaf4f" translate="yes" xml:space="preserve">
          <source>ScopeStatement</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30d85dc75fd3ccdc187797c4e4326534883fa5d7" translate="yes" xml:space="preserve">
          <source>Scoped Imports</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb4353978bb23faf444b47d21dc8ed624e11238c" translate="yes" xml:space="preserve">
          <source>Scoped class instances can be embedded in a parent &lt;code&gt;class&lt;/code&gt; or &lt;code&gt;struct&lt;/code&gt;, just like a child struct instance. Scoped member variables must have type &lt;code&gt;typeof(scoped!Class(args))&lt;/code&gt;, and be initialized with a call to scoped. See below for an example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5070c3b950a719e474a1f4d51b687331b1a946ab" translate="yes" xml:space="preserve">
          <source>Sean Kelly</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="112db5f7c7defff70dd52c960e759d2d7d3cef37" translate="yes" xml:space="preserve">
          <source>Sean Kelly and &lt;a href=&quot;http://jmdavisprog.com&quot;&gt;Jonathan M Davis&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03df2b6aaf7455322223689bbd7461f8d6f32167" translate="yes" xml:space="preserve">
          <source>Sean Kelly, Alex R&amp;oslash;nne Petersen</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d1f410b20137253a90aa187e04a5819bc443cbe" translate="yes" xml:space="preserve">
          <source>Sean Kelly, Alex R&amp;oslash;nne Petersen, Manu Evans</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67e666191ebe7fef8960d4e0a33c23b48d0af3c6" translate="yes" xml:space="preserve">
          <source>Sean Kelly, Alex R&amp;oslash;nne Petersen, Martin Nowak</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0e67e3650a9a7ee96fc07c10b9f845794beae3f" translate="yes" xml:space="preserve">
          <source>Sean Kelly, Walter Bright, Alex R&amp;oslash;nne Petersen, Martin Nowak</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b9d8e641c6ac9a092d9254127af696506298508" translate="yes" xml:space="preserve">
          <source>Search Path for file in a safe manner.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c54b4aeec03de5bf3ac5445a6032756655918bbe" translate="yes" xml:space="preserve">
          <source>Search all modules for TypeInfo_Class corresponding to classname.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40dc545655470ed0c0f91741de8d7603008ed400" translate="yes" xml:space="preserve">
          <source>Search base classes in depth-first, left-to-right order for a class or interface named 'ident'. Stops at first found. Does not look for additional matches.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05a0c94b71eaa6145a54d9861efafeac514433c9" translate="yes" xml:space="preserve">
          <source>Search for function funcid in aggregate ad.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3457640c7fb124ed8ee7343562a3881696029a7" translate="yes" xml:space="preserve">
          <source>Search for ident as member of s.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e4e80f1ee35dec2575daec97fba0228e833b557" translate="yes" xml:space="preserve">
          <source>Search for identifier id as a member of &lt;code&gt;this&lt;/code&gt;. &lt;code&gt;id&lt;/code&gt; may be a template instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91eea3a437111e0a36b219519cd9b5506cc5af2c" translate="yes" xml:space="preserve">
          <source>Search for mutliple items in an array of items (search for needles in an array of hay stacks)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f973c551ba9b74d7cdf6f7aec752fd9b8047cc53" translate="yes" xml:space="preserve">
          <source>Search for ptr in list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b082131e5aaa638d89e81072e02fa0a35938d5d" translate="yes" xml:space="preserve">
          <source>Search paths for file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e66d80f386edb12b19c4e812c05579c4fd4e5f45" translate="yes" xml:space="preserve">
          <source>Search sd for a member function of the form: &lt;code&gt;extern (D) string toString();&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b515692596497e8eac06050b176bd5e7c7688df8" translate="yes" xml:space="preserve">
          <source>Search the list of all threads for a thread with the given thread identifier.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92ad6483a2bd4aa98d97199db784db2ac78880e1" translate="yes" xml:space="preserve">
          <source>Searches for a &lt;code&gt;dmd.conf&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b451945774b0c2a5083e60fde704989ae7cc56af" translate="yes" xml:space="preserve">
          <source>Searches for a &lt;code&gt;ldc2.conf&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f834eba1b2192f6c7c68e67fc2fd6e10437feb42" translate="yes" xml:space="preserve">
          <source>Searches for character in range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bede4e788f7625375b2f02fbd23f4cfc34d7a3f4" translate="yes" xml:space="preserve">
          <source>Searches for substring in &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27f4ce89033bc50eaffbd3f0b0ae0ce07bab14ae" translate="yes" xml:space="preserve">
          <source>Searches in a linear fashion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d230169534309838c9ee27aeebc1cc36fa9bd660" translate="yes" xml:space="preserve">
          <source>Searches the given range for an element that matches one of the given choices.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33b05da4acf3c73cb3c0816fc3f2780f769acf20" translate="yes" xml:space="preserve">
          <source>Searches using a classic interval halving policy. The search starts in the middle of the range, and each search step cuts the range in half. This policy finds a value in &amp;Omicron;(&lt;code&gt;log(n)&lt;/code&gt;) time but is less cache friendly than &lt;code&gt;gallop&lt;/code&gt; for large ranges. The &lt;code&gt;binarySearch&lt;/code&gt; policy is used as the last step of &lt;code&gt;trot&lt;/code&gt;, &lt;code&gt;gallop&lt;/code&gt;, &lt;code&gt;trotBackwards&lt;/code&gt;, and &lt;code&gt; gallopBackwards&lt;/code&gt; strategies.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3ab2b30008072787361f41cd64ea2a6e111bffc" translate="yes" xml:space="preserve">
          <source>Searches with a step that is grows linearly (1, 2, 3,...) leading to a quadratic search schedule (indexes tried are 0, 1, 3, 6, 10, 15, 21, 28,...) Once the search overshoots its target, the remaining interval is searched using binary search. The search is completed in &amp;Omicron;(&lt;code&gt;sqrt(n)&lt;/code&gt;) time. Use it when you are reasonably confident that the value is around the beginning of the range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98cc363c0119e35d1c8070755fc4d4c2387aad71" translate="yes" xml:space="preserve">
          <source>Searching</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef61693f1051e67a96d1ce21e9dcd2a80ac5564a" translate="yes" xml:space="preserve">
          <source>Second item to compare.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f586a64b1d3b5d9a3b47f03ad11ea20e586672d3" translate="yes" xml:space="preserve">
          <source>Second of the minute [0 - 60).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe1f701c6b405860b6f7ed99a47d792a19b3cedf" translate="yes" xml:space="preserve">
          <source>Seconds from midnight, January 1st, 1970 in UTC.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05c6552589f2957076213d53542c5cdb3a02f4aa" translate="yes" xml:space="preserve">
          <source>Seconds past the current minute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99ba5a2231f8aafc56b315f631420d5225ea6f90" translate="yes" xml:space="preserve">
          <source>Seconds past the minute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2c6b564bd8119e16a3e573a6f9e7c6d1ac7820f" translate="yes" xml:space="preserve">
          <source>Section</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15b04a3f72bbdbc8b42c3ac02343c26f2ef292f6" translate="yes" xml:space="preserve">
          <source>Section names starting with 'http://' or 'https://' are not recognized as section names.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ff5a6dafd806f6d95302657c480d07703b64604" translate="yes" xml:space="preserve">
          <source>Sections</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da2860612425cb47d412d63bf2c0cebeeaefae10" translate="yes" xml:space="preserve">
          <source>Sections - each documentation comment is divided up into a sequence of sections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c545787818a72c6d5ce007559a5e3149a9e514f8" translate="yes" xml:space="preserve">
          <source>Secure Hash Signature Standard (SHS) (FIPS PUB 180-2)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af266f84929c03de0e05203de3b2d71c6cb59fe7" translate="yes" xml:space="preserve">
          <source>Securely compares two digest representations while protecting against timing attacks. Do not use &lt;code&gt;==&lt;/code&gt; to compare digest representations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2931d5d3232f2248933a3926c6bcfde0392f4223" translate="yes" xml:space="preserve">
          <source>Security considerations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce3df4d818316dd10c7bca5ae8539c894dc07dbb" translate="yes" xml:space="preserve">
          <source>See</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9c497a4daa0646e69f125d8bf30206df914d1e8" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#Base64Impl&quot;&gt;&lt;code&gt;Base64Impl&lt;/code&gt;&lt;/a&gt; for a description of available methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3ff2ba441e1e884d06b5826c3de15889410a086" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#MatcherConcept&quot;&gt;&lt;code&gt;MatcherConcept&lt;/code&gt;&lt;/a&gt; for API outline.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd0537aaaa43f315e782023eaca639a88ef05803" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#Unicode%20properties&quot;&gt;table of properties&lt;/a&gt; for available sets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afb94a061cbb4efc100483cf8c401b22b3e7f513" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#array-ops&quot;&gt;Array Indexing and Slicing Operators Overloading&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a50c41b118a826a55c078f4026f240d5b33f150" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#toHexString&quot;&gt;&lt;code&gt;toHexString&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a066f203c787644dbf959443cd2ebf77b75da02" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;core_internal_array_appending#d_arrayappendTImpl&quot;&gt;&lt;code&gt;core.internal.array.appending.d_arrayappendTImpl&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52fb6d3a21e0b2d97670783212c8c505760a8c97" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;core_internal_array_appending#d_arrayappendcTXImpl&quot;&gt;&lt;code&gt;core.internal.array.appending.d_arrayappendcTXImpl&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c8b167414158317de00d83443c7dc6d34e31498" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;core_internal_array_capacity#assumeSafeAppend&quot;&gt;&lt;code&gt;core.internal.array.capacity.assumeSafeAppend&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a65621029ce2377d47e203d07bab5c825fbeaf0b" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;core_internal_array_capacity#capacity&quot;&gt;&lt;code&gt;core.internal.array.capacity.capacity&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee1b21043b230fab13955eba761e103cb46b14fb" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;core_internal_array_capacity#d_arraysetlengthTImpl&quot;&gt;&lt;code&gt;core.internal.array.capacity.d_arraysetlengthTImpl&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cd179c0954f069f398a0ce9e32931987349e667" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;core_internal_array_capacity#reserve&quot;&gt;&lt;code&gt;core.internal.array.capacity.reserve&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a02137d694d15b9cf0d171ed206c6e5024fe829" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;core_internal_array_casting#_ArrayCast&quot;&gt;&lt;code&gt;core.internal.array.casting._ArrayCast&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28724693b5c46e09f70f07d87cd503b6725617df" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;core_internal_array_comparison#_cmp&quot;&gt;&lt;code&gt;core.internal.array.comparison._cmp&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="766cdaabcaf09a7054a37b8f5a74665607d37e9f" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;core_internal_array_concatenation#d_arraycatnTXImpl&quot;&gt;&lt;code&gt;core.internal.array.concatenation.d_arraycatnTXImpl&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3168606106f92dba1ffadf6b707881afda02ae4c" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;core_internal_array_construction#d_arrayctor&quot;&gt;&lt;code&gt;core.internal.array.construction.d_arrayctor&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89e2202d4a06b1fc57a117ccc993e7d8a9fb3c64" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;core_internal_array_construction#d_arraysetctor&quot;&gt;&lt;code&gt;core.internal.array.construction.d_arraysetctor&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7587223cf6e9df4fd010bf20883392efee343e2c" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;core_internal_array_equality#_ArrayEq&quot;&gt;&lt;code&gt;core.internal.array.equality._ArrayEq&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94a3f213db8e88ba0f7a2552554fe1f7c85cb41e" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;core_internal_array_equality#_equals&quot;&gt;&lt;code&gt;core.internal.array.equality._equals&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f99a995997152cddbe2f1e3fddebfa9f2a168f36" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;expression#FunctionLiteral&quot;&gt;&lt;i&gt;FunctionLiteral&lt;/i&gt;&lt;/a&gt;s.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2231af64c20abf3290805c9ea5d8d1814c348561" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;function#nothrow-functions&quot;&gt;Nothrow Functions&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd369cb28ee36c88f27da470a4a1050302eb38dc" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;function#property-functions&quot;&gt;Property Functions&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0f44a630c8ab7bcfdb41acf5197c22514e723f2" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;function#pure-functions&quot;&gt;Pure Functions&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b5af9b0971b631cfba58aaa98f21e0216709b9b" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;function#ref-functions&quot;&gt;Ref Functions&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="514c0a74e180d0f14dbd0c0f59be031380306088" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;function#return-ref-parameters&quot;&gt;Return Ref Parameters&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0762f079ac3dd269848a58eb467ff3449d0d7bfc" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://dlang.org/function.html#function-safety&quot;&gt;Function Safety&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8475f85b045b130ab096ea52849404f04f678642" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://dlang.org/function.html#nogc-functions&quot;&gt;No-GC Functions&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6506b2f314a4a6a872f9af213bab0f4de73538d1" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://dlang.org/function.html#pseudo-member&quot;&gt;Uniform Function Call Syntax (UFCS)&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="930d98c6d35abcfa23776e3b8ae228bba5c6f04f" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://dlang.org/phobos/core_simd.html&quot;&gt;&lt;code&gt;core.simd&lt;/code&gt;&lt;/a&gt; for the supported intrinsics.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e650b8163b12b7a007bb6af48f10467e0c39a10a" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://github.com/dlang/dmd/blob/master/samples/listener.d&quot;&gt;/dmd/samples/d/listener.d&lt;/a&gt; and &lt;a href=&quot;https://github.com/dlang/dmd/blob/master/samples/htmlget.d&quot;&gt;/dmd/samples/d/htmlget.d&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="798d8954e5f2f266ed96a238c41b5aa9e3c1a0e8" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;std_container&quot;&gt;std.container.*&lt;/a&gt; for an overview.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c2602d2c8fe40f5b50076249ce71b31969269a6" translate="yes" xml:space="preserve">
          <source>See &lt;code&gt;std.digest.digest&lt;/code&gt; for differences between template and OOP API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a0af469eb50854e3e34d0e65ae310f8570e0b4f" translate="yes" xml:space="preserve">
          <source>See &lt;code&gt;std.digest&lt;/code&gt; for differences between template and OOP API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61a08f389a25b863d0fca5015a2885ff6fd5c8cd" translate="yes" xml:space="preserve">
          <source>See Also:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aacde3566ce82625ba04b3ab8431e9b38041c372" translate="yes" xml:space="preserve">
          <source>See Also: &lt;a href=&quot;#lazy_variadic_functions&quot;&gt;Lazy Variadic Functions&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a20ba872f1e0f396a7ea871c86c99e92a2c9525" translate="yes" xml:space="preserve">
          <source>See StatementSemanticVisitor.makeTupleForeach. This is a simple wrapper that returns the generated statements/declarations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e05a91b690100a209261d9adf1ee2eff4a842a7" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#function-templates&quot;&gt;function templates&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5eaaeb98d8ec5994d4f282affdcdd142b373577c" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#implicit-nesting&quot;&gt;Implicit Template Nesting&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="074a72a8df5807b3473b05291f5edddb71c6a3b5" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#unicode&quot;&gt;&lt;code&gt;unicode&lt;/code&gt;&lt;/a&gt; for simpler construction of sets from predefined ones.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a59ec1762ae86fe770ed1684f0fe7cf21aa23902" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;expression#IndexExpression&quot;&gt;&lt;i&gt;IndexExpression&lt;/i&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fc283e11e2a828dbd1031faf1caf5d1e74986cf" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;expression#SliceExpression&quot;&gt;&lt;i&gt;SliceExpression&lt;/i&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13b5ed1d8f7cf09ba733be2b8794c91c4e4dce8c" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;https://dlang.org/function.html#safe-functions&quot;&gt;Safe Functions&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b2d600783260a2d7c00ecf87216e64427e3b96e" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;https://wiki.dlang.org/Memory_Management#Explicit_Class_Instance_Allocation&quot;&gt; Explicit Class Instance Allocation&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="098c45167b50b4d454201327f53de51cda6c9f6b" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;parent&lt;/code&gt;, &lt;code&gt;toParent&lt;/code&gt; and &lt;code&gt;toParent2&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76d7950857df91efbcc2e2d9e3072c934e0bf3e5" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;attribute#UserDefinedAttribute&quot;&gt;&lt;i&gt;User-Defined Attributes&lt;/i&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e75b50924fc2077c22f35bf7e4fd2589ca1ad47d" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;https://dlang.org/phobos/std_functional.html#partial&quot;&gt;&lt;code&gt;std.functional.partial&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c6c43913ca8da05fc74b6c014e07e9707962d8f" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;version#staticforeach&quot;&gt;Static Foreach&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1210f1577f6bd3c6994a624b22cc19197a8a5f3a" translate="yes" xml:space="preserve">
          <source>See if both types are arrays that can be compared for equality without any casting. Return true if so. This is to enable comparing things like an immutable array with a mutable one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19239d98c47446fb192bfcfba0771074c5578d5b" translate="yes" xml:space="preserve">
          <source>See if both types are arrays that can be compared for equality. Return true if so. If they are arrays, but incompatible, issue error. This is to enable comparing things like an immutable array with a mutable one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2d5994b26bc328fb865ec548bbd678392387036" translate="yes" xml:space="preserve">
          <source>See if context &lt;code&gt;s&lt;/code&gt; is nested within context &lt;code&gt;p&lt;/code&gt;, meaning it &lt;code&gt;p&lt;/code&gt; is reachable at runtime by walking the static links. If any of the intervening contexts are function literals, make sure they are delegates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="529e4c9e3d397454a92610a9c6eb2b1be227d7b7" translate="yes" xml:space="preserve">
          <source>See if pointers from function parameters, mutable globals, or uplevel functions could leak into return value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ec9220fbc46b738b8b9c20032a63b36be29da45" translate="yes" xml:space="preserve">
          <source>See if pointers from function parameters, mutable globals, or uplevel functions could leak into type &lt;code&gt;t&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2663b20a7956d78a2dd8db0847c7558e8ca705d" translate="yes" xml:space="preserve">
          <source>See if type resolves to a symbol, if so, return that symbol.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62796dd1d3daa2e0bfc7f372dc22f5b71e52aa0d" translate="yes" xml:space="preserve">
          <source>See the '!' &lt;a href=&quot;#opUnary&quot;&gt;&lt;code&gt;opUnary&lt;/code&gt;&lt;/a&gt; for the same but using operators.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e694b25b255ecc091cc971d84d997ec47c991e52" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;#Synopsis&quot;&gt;Synopsis&lt;/a&gt; section for example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="245ccdf71f1f6e91a6ab6d01c65baf50a9f10c56" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;#Unicode%20properties&quot;&gt;table of properties&lt;/a&gt; for available sets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4414574c453770bbd72e3ab19f304a20c61921fe" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;#spawnProcess&quot;&gt;&lt;code&gt;spawnProcess&lt;/code&gt;&lt;/a&gt; documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4746ac7b229cf611c63ba1699fcbcbd4e469c6b3" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;std_format&quot;&gt;&lt;code&gt;std.format&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;std_string#format&quot;&gt;&lt;code&gt;std.string.format&lt;/code&gt;&lt;/a&gt; documentation for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="226d596c8aa5cb229584c07389f4402088ce3cc4" translate="yes" xml:space="preserve">
          <source>See the comment for INFILESIZE above, but in short, specifies the size of the file being uploaded. -1 means unknown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e49d4adbf5b5645c48f86a972eff4c6aebfa6ac4" translate="yes" xml:space="preserve">
          <source>See the documentation for &lt;code&gt;UnitTestResult&lt;/code&gt; for details on how the runtime treats the return value from this function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c395269737082721a6f616c8ff72dd8be0eed697" translate="yes" xml:space="preserve">
          <source>See the documentation for &lt;code&gt;UnitTestResult&lt;/code&gt; to see how you should set up the return structure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c43537cb5c8fcf979a8b0843f56ad28f8198b83b" translate="yes" xml:space="preserve">
          <source>See the documentation for &lt;code&gt;runModuleUnitTests&lt;/code&gt; for how the default algorithm works, or read the example below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7fbe074bec1d4cf7c7eb7b99543695878439d64" translate="yes" xml:space="preserve">
          <source>Seed version. The seed should be a single value if &lt;code&gt;fun&lt;/code&gt; is a single function. If &lt;code&gt;fun&lt;/code&gt; is multiple functions, then &lt;code&gt;seed&lt;/code&gt; should be a &lt;a href=&quot;std_typecons#Tuple&quot;&gt;&lt;code&gt;std.typecons.Tuple&lt;/code&gt;&lt;/a&gt;, with one field per function in &lt;code&gt;f&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56570141b0656659fef83cdec1eea9bfbe5323f4" translate="yes" xml:space="preserve">
          <source>Seed version. The seed should be a single value if &lt;code&gt;fun&lt;/code&gt; is a single function. If &lt;code&gt;fun&lt;/code&gt; is multiple functions, then &lt;code&gt;seed&lt;/code&gt; should be a &lt;a href=&quot;std_typecons#Tuple&quot;&gt;&lt;code&gt;std.typecons.Tuple&lt;/code&gt;&lt;/a&gt;, with one field per function in &lt;code&gt;f&lt;/code&gt;. For convenience, if the seed is &lt;code&gt;const&lt;/code&gt;, or has qualified fields, then &lt;code&gt;cumulativeFold&lt;/code&gt; will operate on an unqualified copy. If this happens then the returned type will not perfectly match &lt;code&gt;S&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bf0881b657a5dd846a29b4c4097e345e1f2e119" translate="yes" xml:space="preserve">
          <source>Seeds a MersenneTwisterEngine object using an InputRange.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd22b02bc771c91069d5e0e67c214d8b493984f4" translate="yes" xml:space="preserve">
          <source>Seeds a MersenneTwisterEngine object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a098804b14ee33330b8c8a8ec1195174aad5b3cc" translate="yes" xml:space="preserve">
          <source>Segregates allocation requests by size and dispatches them to distinct allocators.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38d60f3e7b95cc3d915507db06a46b17b8caae05" translate="yes" xml:space="preserve">
          <source>Select &quot;file method&quot; to use when doing FTP, see the curl_ftpmethod above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59104d41affc4eb62d929b6d56267dc9f487cf96" translate="yes" xml:space="preserve">
          <source>Select one context pointer from a dual-context array</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="def9a1b4b216eaa192bdd8c041abd356f9073d1f" translate="yes" xml:space="preserve">
          <source>Select one of two functions to run via template parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7131b47f27a4be5f48ab270383535a81bc33b85" translate="yes" xml:space="preserve">
          <source>Select!(Types.length == 1, Types[0][], Tuple!Types[]) &lt;strong id=&quot;slurp&quot;&gt;slurp&lt;/strong&gt;(Types...)(string filename, scope const(char)[] format);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04de5b85b57e514b580f08634d850f571b5fc6d9" translate="yes" xml:space="preserve">
          <source>Select!(isFloatingPoint!F, F, double) &lt;strong id=&quot;gapWeightedSimilarityNormalized&quot;&gt;gapWeightedSimilarityNormalized&lt;/strong&gt;(alias comp = &quot;a == b&quot;, R1, R2, F)(R1 s, R2 t, F lambda, F sSelfSim = F.init, F tSelfSim = F.init)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd7d7bec67d146e0b05c0c0e7eabc3124ead984a" translate="yes" xml:space="preserve">
          <source>Selective Imports</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68aabce7d8ad38eda2923fb8a136b6d9f666a4ab" translate="yes" xml:space="preserve">
          <source>Selectors in Objective-C can contain the colon character, which is not valid in D identifiers. D supports method overloading while Objective-C achieves something similar by using different selectors. For these two reasons it is better to be able to specify the selectors manually in D, instead of trying to infer it. This allows to have a more natural names for the methods in D. Example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5148c140d42764520d6c806c0e39e27cecf84c06" translate="yes" xml:space="preserve">
          <source>Selects a random subsample out of &lt;code&gt;r&lt;/code&gt;, containing exactly &lt;code&gt;n&lt;/code&gt; elements. The order of elements is the same as in the original range. The total length of &lt;code&gt;r&lt;/code&gt; must be known. If &lt;code&gt;total&lt;/code&gt; is passed in, the total number of sample is considered to be &lt;code&gt;total&lt;/code&gt;. Otherwise, &lt;code&gt;RandomSample&lt;/code&gt; uses &lt;code&gt;r.length&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8af7aa32e44b8df6b3666b8681f1c22f69cd9601" translate="yes" xml:space="preserve">
          <source>Selects a subset of &lt;code&gt;Args&lt;/code&gt; by stepping with fixed &lt;code&gt;stepSize&lt;/code&gt; over the sequence. A negative &lt;code&gt;stepSize&lt;/code&gt; starts iteration with the last element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="889f8a8a7b968fb4722dc701e22497c28b85d286" translate="yes" xml:space="preserve">
          <source>Selects the maximal element of a range. &lt;code&gt;maxElement([3, 4, 1, 2])&lt;/code&gt; returns &lt;code&gt;4&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="124988cb48743956f1747f136a45535a67c16ac5" translate="yes" xml:space="preserve">
          <source>Selects the minimal element of a range. &lt;code&gt;minElement([3, 4, 1, 2])&lt;/code&gt; returns &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36c4a71277dddfc41ec64ecb59c9b75585c9d629" translate="yes" xml:space="preserve">
          <source>Self-Referential Types</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc0ce9f7a4fdb9dae86f556ca4a6b9a09bba4442" translate="yes" xml:space="preserve">
          <source>Semantic analysis will convert it to a real type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec46752702565052feae5098b00cdf3ddcda8bd4" translate="yes" xml:space="preserve">
          <source>Semantically analyze and then evaluate a static condition at compile time. This is special because short circuit operators &amp;amp;&amp;amp;, || and ?: at the top level are not semantically analyzed if the result of the expression is not necessary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="448b7b4c42f1ccdac0f323ad79d63d110e5f5ad4" translate="yes" xml:space="preserve">
          <source>Semantically consecutive</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe03c3515833357d89e7094df960e757cae3bc1d" translate="yes" xml:space="preserve">
          <source>Semantics</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6198101739664e7a8802cfb7788d298cd6ac552d" translate="yes" xml:space="preserve">
          <source>Semantics in &lt;code&gt;Checked!(T, Hook)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16f08c1f257608530031c2662fc6c938b496082b" translate="yes" xml:space="preserve">
          <source>Send CCC (Clear Command Channel) after authentication</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd503406f5e2cf39b96f25532bcff30b89a61673" translate="yes" xml:space="preserve">
          <source>Send a message to &lt;code&gt;tid&lt;/code&gt; but place it at the front of &lt;code&gt;tid&lt;/code&gt;'s message queue instead of at the back. This function is typically used for out-of-band communication, to signal exceptional conditions, etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="949e85be9582e0577574ba4d925e2d02227e0b6e" translate="yes" xml:space="preserve">
          <source>Send buffer size</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab3b808167f0d6e36d48337a60f2c7c510a30660" translate="yes" xml:space="preserve">
          <source>Send data on the connection. If the socket is blocking and there is no buffer space left, &lt;code&gt;send&lt;/code&gt; waits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="deb92624b29bb38f75549e82624de23b4fd7185a" translate="yes" xml:space="preserve">
          <source>Send data to a specific destination Address. If the destination address is not specified, a connection must have been made and that address is used. If the socket is blocking and there is no buffer space left, &lt;code&gt;sendTo&lt;/code&gt; waits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d291c3aa4655629ec8783be2b1729258d82b8be" translate="yes" xml:space="preserve">
          <source>Send or receive error code. See &lt;code&gt;wouldHaveBlocked&lt;/code&gt;, &lt;code&gt;lastSocketError&lt;/code&gt; and &lt;code&gt;Socket.getErrorText&lt;/code&gt; for obtaining more information about the error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c59fc91e8c1901f2e3d6b4b5df8e43f7f8c4fd5f" translate="yes" xml:space="preserve">
          <source>Send timeout</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95250fa209dbe5429ff36bab52baa679f0a15361" translate="yes" xml:space="preserve">
          <source>Sends data over the connected socket. Use after successful curl_easy_perform() with CURLOPT_CONNECT_ONLY option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9bb32eb4b4f2b957611c663774ae39376feed31" translate="yes" xml:space="preserve">
          <source>Sends the supplied value to the thread represented by tid. As with &lt;a href=&quot;std_concurrency#spawn&quot;&gt;&lt;code&gt;std.concurrency.spawn&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;T&lt;/code&gt; must not have unshared aliasing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6984aff1b4ca4daad45d2746b8f628e6aaf2de7e" translate="yes" xml:space="preserve">
          <source>Sentinel &lt;code&gt;sentinel&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20f0de7e9c5bbb8a8f1cb6dde782a1000ee29f62" translate="yes" xml:space="preserve">
          <source>Sentinel for an anonymous identifier.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a0936f9144d3b8003d3cc698b62051e9a278eaf" translate="yes" xml:space="preserve">
          <source>Separate floating point value into significand and exponent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e3349bd5f27aaef53450e5443d7777d51088142" translate="yes" xml:space="preserve">
          <source>Separates the top elements in a range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4b289a7b76be83adf9d38e7a3ee28190349bff2" translate="yes" xml:space="preserve">
          <source>Separator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="caa413d164734ab337ab4f1f1948d4ea51962e85" translate="yes" xml:space="preserve">
          <source>Separator &lt;code&gt;quote&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e21177def8865affac067df99a01fdd18c27b32" translate="yes" xml:space="preserve">
          <source>Separator &lt;code&gt;s&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="261470676cf03b111e2cde5007e382f24dd39a59" translate="yes" xml:space="preserve">
          <source>Separator &lt;code&gt;sep&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe873306a49dc49f7ddd65790cd571ee830c6dbd" translate="yes" xml:space="preserve">
          <source>Separators</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aaefe4545a2bedd3eb4207fa3cad92b4cb94884f" translate="yes" xml:space="preserve">
          <source>Seq = The &lt;a href=&quot;#AliasSeq&quot;&gt;&lt;code&gt;AliasSeq&lt;/code&gt;&lt;/a&gt; to check</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dff6911c432849f8c4c85aa47c379626476903d1" translate="yes" xml:space="preserve">
          <source>Seq = The &lt;a href=&quot;#AliasSeq&quot;&gt;&lt;code&gt;AliasSeq&lt;/code&gt;&lt;/a&gt; to sort</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9527a2fe79eae41ef49ac9f2b3d57d675508c129" translate="yes" xml:space="preserve">
          <source>Sequenced, reliable, two-way communication-based byte streams</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4101f67b973e245c03b35faac18737df83d5372c" translate="yes" xml:space="preserve">
          <source>Sequenced, reliable, two-way connection-based datagrams with a fixed maximum length</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="479c1dd65f4bbfda7ca3ad9c5857c89f36331de9" translate="yes" xml:space="preserve">
          <source>Sequentially compares elements in &lt;code&gt;r1&lt;/code&gt; and &lt;code&gt;r2&lt;/code&gt; in lockstep, and stops at the first mismatch (according to &lt;code&gt;pred&lt;/code&gt;, by default equality). Returns a tuple with the reduced ranges that start with the two mismatched values. Performs &amp;Omicron;(&lt;code&gt;min(r1.length, r2.length)&lt;/code&gt;) evaluations of &lt;code&gt;pred&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="048b31e324fca500e37a983712a54829e56ac537" translate="yes" xml:space="preserve">
          <source>Serialize a curl_httppost struct built with curl_formadd(). Accepts a void pointer as second argument which will be passed to the curl_formget_callback function. Returns 0 on success.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="161e892d7ec8a862357db6902d35743dfd186ae4" translate="yes" xml:space="preserve">
          <source>Serialize data to &lt;code&gt;ubyte&lt;/code&gt; arrays.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f85d3160290acbd99ebe39250668ad4777fb45f6" translate="yes" xml:space="preserve">
          <source>Set 'purity' field of 'this'. Do this lazily, as the parameter types might be forward referenced.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efdec671fc0ce8bcb4bdb00d3f437085821cf12c" translate="yes" xml:space="preserve">
          <source>Set A Busy Timeout</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a9d4c0c21a69006002e1be67cc967b5ffcc8d5f" translate="yes" xml:space="preserve">
          <source>Set CSX bits in flow analysis state</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="768dc53d7034fd9e8bace2a19d66c9838c229aae" translate="yes" xml:space="preserve">
          <source>Set a file path to where a cookie jar should be read/stored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5aff2c3c6daf324e428b75bdefa61ff172972c9" translate="yes" xml:space="preserve">
          <source>Set a long curl option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1505d6f96d28a530885b0665ec6fedf954eaf9d3" translate="yes" xml:space="preserve">
          <source>Set a password for authenticated TLS</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b93d38cda510f7d08522daabe84e6f3ebbed03ac" translate="yes" xml:space="preserve">
          <source>Set a socket option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d29b5e3434575fe1f176698b4964a853abc29313" translate="yes" xml:space="preserve">
          <source>Set a string curl option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8d443dfcac7ba907e63d1ab638618badab986b6" translate="yes" xml:space="preserve">
          <source>Set a username for authenticated TLS</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9ebf3ffc622ff2f2dea2364d9fd0a955ee57d62" translate="yes" xml:space="preserve">
          <source>Set a void* curl option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89573044e1b6762059e119812e7519705f439170" translate="yes" xml:space="preserve">
          <source>Set access/modified times of file or folder &lt;code&gt;name&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f541bfbefaae3484074a7b90e0eb6f756c8060ec" translate="yes" xml:space="preserve">
          <source>Set aliases for HTTP 200 in the HTTP Response header</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3c1267be21e23ff8761905eaee5f71165976eea" translate="yes" xml:space="preserve">
          <source>Set all of the floating-point status flags to false.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6e3013311c0d6d42da7dbc5688a6c72f300785f" translate="yes" xml:space="preserve">
          <source>Set authentication type for authenticated TLS</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad192227a73144e022e751c4f39018d1522606d7" translate="yes" xml:space="preserve">
          <source>Set cookie in request:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f386478cd4b58252d9992af32f2f71978bbf91d7" translate="yes" xml:space="preserve">
          <source>Set fields of Srcpos</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcfbe6bed4cfd8a8cd9c6d6c3bab72bcd9b49d13" translate="yes" xml:space="preserve">
          <source>Set if we should verify the Common name from the peer certificate in ssl handshake, set 1 to check existence, 2 to ensure that it matches the provided hostname.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4af6417bea14f63d3c9f743649ebda313553b8bb" translate="yes" xml:space="preserve">
          <source>Set if we should verify the peer in ssl handshake, set 1 to verify.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1df87712e3de6d7b52dec036f3de0050b4979193" translate="yes" xml:space="preserve">
          <source>Set max allowed redirections using the location header. uint.max for infinite.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d9d7317faeb2d6dc39e579f5859d23cb38f8735" translate="yes" xml:space="preserve">
          <source>Set maximum time an operation is allowed to take. This includes dns resolution, connecting, data transfer, etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ca35c7b505168b9de04b8666fa5d27c1d9d751a" translate="yes" xml:space="preserve">
          <source>Set merge mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69eac3e91bbd1ee108b1b54f0aa8f9dccf3dabbc" translate="yes" xml:space="preserve">
          <source>Set of range primitives to handle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a98b187266728d4230601a6c71f36e2048e5011" translate="yes" xml:space="preserve">
          <source>Set operations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03fc7791a17da6e8ed498e96c022ab3a5d3214c8" translate="yes" xml:space="preserve">
          <source>Set operator precedence for each operator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ef734be9e6f52f061dc701851b7dfa793b5ca74" translate="yes" xml:space="preserve">
          <source>Set output path for coverage reports.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2a278f19f902c6e212fc4fa6371177f4c4468ea" translate="yes" xml:space="preserve">
          <source>Set path to where listing files are to be written.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1ab23e95e86cf799672d4bec30fd53bdd9fad54" translate="yes" xml:space="preserve">
          <source>Set path to where source files are located.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e03c5fa363f6da94521800fc9c90a636bbb0ca3c" translate="yes" xml:space="preserve">
          <source>Set pointer to private data</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f73362a7fe8fbeac09e7ae1e5f20be4e95ee9814" translate="yes" xml:space="preserve">
          <source>Set scope for future semantic analysis so we can deal better with forward references.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c93b54fab221a0587de85a29d97f554fbce4653" translate="yes" xml:space="preserve">
          <source>Set source file path for coverage reports.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cd015cd04b2702333c2e1d13fd53bf3cc6d7514" translate="yes" xml:space="preserve">
          <source>Set the &quot;low speed limit&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2602306992fe23c71e6afd68ef2827a4b9a03bca" translate="yes" xml:space="preserve">
          <source>Set the &quot;low speed time&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53c87f2eebd69bd7edc222020b33410bf421457c" translate="yes" xml:space="preserve">
          <source>Set the &lt;code&gt;is&lt;/code&gt; target fields of &lt;code&gt;params&lt;/code&gt; according to the TARGET value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d85b3035a115c6c63d02dc4abf330a4b7a6a94f" translate="yes" xml:space="preserve">
          <source>Set the Accept-Encoding string. Use this to tell a server you would like the response to be compressed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fff1c0bae4f13a1d15a33c8572cdc7edb3484f50" translate="yes" xml:space="preserve">
          <source>Set the CA certificate bundle file to use for SSL peer verification</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e105e22a09c0692f6eda8c63706fe71b795cb034" translate="yes" xml:space="preserve">
          <source>Set the FTP PORT string (interface name, named or numerical IP address) Use i.e '-' to use default address.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="241b76cbed3f5655045e8aff832d7f03205ef4fe" translate="yes" xml:space="preserve">
          <source>Set the Last Insert Rowid value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77849a419bdb353b21b12f22a869c201a22d38f8" translate="yes" xml:space="preserve">
          <source>Set the OS specific file attributes, as obtained by &lt;a href=&quot;std_file#getAttributes&quot;&gt;&lt;code&gt;std.file.getAttributes&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;std_file#DirEntry.attributes&quot;&gt;&lt;code&gt;std.file.DirEntry.attributes&lt;/code&gt;&lt;/a&gt;, for this archive member.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1506314c52335abb758dd57cfc25147bcb95b43c" translate="yes" xml:space="preserve">
          <source>Set the User-Agent string (examined by some CGIs)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="665bb4f120506336ef9358a5a1a4a0f7cf93996e" translate="yes" xml:space="preserve">
          <source>Set the active cookie string e.g. &quot;name1=value1;name2=value2&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0901c913347c9792d39219753f2ae3671e19ac75" translate="yes" xml:space="preserve">
          <source>Set the allocated length of the array block. This is called any time an array is appended to or its length is set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="846a3928ca820b6f3fff905b53d48e6914d1a1cf" translate="yes" xml:space="preserve">
          <source>Set the amount of time which has been measured since the stop watch was started.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0f249eb040103481042fc5f0b77463006cb1039" translate="yes" xml:space="preserve">
          <source>Set the attributes of the given file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7287a98d20b7e7f18963cf4a482cff98d451d398" translate="yes" xml:space="preserve">
          <source>Set the behaviour of POST when redirecting. Values must be set to one of CURL_REDIR* defines below. This used to be called CURLOPT_POST301</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="514ef13e30e40d9ff21feb174a8150e84eb60200" translate="yes" xml:space="preserve">
          <source>Set the code unit at index i to c</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9fc03b77ed528baed37af7133a70f4a16b85123" translate="yes" xml:space="preserve">
          <source>Set the continuation offset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d13f715191eebae17d8d3c54ae37c1336cf93a58" translate="yes" xml:space="preserve">
          <source>Set the event handler that receives incoming headers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a926655a0aead765f34cb8acc93e9716964ce402" translate="yes" xml:space="preserve">
          <source>Set the event to &quot;signaled&quot;, so that waiting clients are resumed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="344382f4bf0537b13c59d6fa31f853e6b5b848aa" translate="yes" xml:space="preserve">
          <source>Set the extension of &lt;code&gt;path&lt;/code&gt; to &lt;code&gt;ext&lt;/code&gt; if &lt;code&gt;path&lt;/code&gt; doesn't have one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1b9f5625456730e28f820a96f6d072a7835cb63" translate="yes" xml:space="preserve">
          <source>Set the interface string to use as outgoing network interface</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fee2f39a3c78ac60d6d5a7062d791ba946413353" translate="yes" xml:space="preserve">
          <source>Set the krb4/5 security level, this also enables krb4/5 awareness. This is a string, 'clear', 'safe', 'confidential' or 'private'. If the string is set but doesn't match one of these, 'private' will be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d0ea8efff0bd509fa484e2b3373fc70891c5d2a" translate="yes" xml:space="preserve">
          <source>Set the last modification time for this member.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="caa5946623067dd81bd14045acd3c24527f684f9" translate="yes" xml:space="preserve">
          <source>Set the linger option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b61ea980027f91ac8fcf92fdfa9032491761278b" translate="yes" xml:space="preserve">
          <source>Set the local outgoing port range to use. This can be used together with the localPort property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8eb3903a4acb2157c163db6b4d000e50af85000d" translate="yes" xml:space="preserve">
          <source>Set the local outgoing port to use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab2e1557f433637765f8cc0919a8d038ac0efd8c" translate="yes" xml:space="preserve">
          <source>Set the output file name for memory profile reports (-profile=gc switch). An empty name will set the output to stdout.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37f776383dd0961f2f118931cf6d03dec6da6292" translate="yes" xml:space="preserve">
          <source>Set the output file name for profile reports (-profile switch). An empty name will set the output to stdout.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="485b8e5cb4511df53ed738b39ed14e6f6ef952c9" translate="yes" xml:space="preserve">
          <source>Set the output file name for the optimized profile linker DEF file (-profile switch). An empty name will set the output to stdout.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="baf50ac3a5a397f7e1b93e49166b83110d154d55" translate="yes" xml:space="preserve">
          <source>Set the referrer page (needed by some CGIs)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d6a0213b97d490fbf581a5bae9d7d929162a8a7" translate="yes" xml:space="preserve">
          <source>Set the ssl context callback function, currently only for OpenSSL ssl_ctx in second argument. The function must be matching the curl_ssl_ctx_callback proto.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7679e3e7ded49360dd6018f2f3b085fc6f1c087a" translate="yes" xml:space="preserve">
          <source>Set the tcp no-delay socket option on or off.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8238a18630a4279223e1493a0b39cfc03d8ad3ab" translate="yes" xml:space="preserve">
          <source>Set the user name and password for proxy authentication.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cd6946aa7edbee6907c12deed9397d3efb32da9" translate="yes" xml:space="preserve">
          <source>Set the user name, password and optionally domain for authentication purposes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1d8afc3d64d232c28e5d720c13be94bc14d50b6" translate="yes" xml:space="preserve">
          <source>Set the userdata for the ssl context callback function's third argument</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db83de3bcb383844e57c8c0c9e28c8cba31a7aca" translate="yes" xml:space="preserve">
          <source>Set the value of the user agent request header field.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9555c6376c9d29bd4ebbe4eb31cafed9cdd30627" translate="yes" xml:space="preserve">
          <source>Set this option to limit the size of a file that will be downloaded from an HTTP or FTP server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71994caa16ea2eab2d6049aad2f9e408890ac46a" translate="yes" xml:space="preserve">
          <source>Set this option to one of the CURL_IPRESOLVE_* defines (see below) to tell libcurl to resolve names to those IP versions only. This only has affect on systems with support for more than one, i.e IPv4 and_ IPv6.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="216c53df0da89288c7c9ba6f5f942b2d92ace842" translate="yes" xml:space="preserve">
          <source>Set this option to the file name of your .netrc file you want libcurl to parse (using the CURLOPT_NETRC option). If not set, libcurl will do a poor attempt to find the user's home directory and check for a .netrc file in there.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b0e7cb1d6c04988953bafdf30d45b0029f6e393" translate="yes" xml:space="preserve">
          <source>Set this to a bitmask value to enable the particular authentications methods you like. Use this in combination with CURLOPT_PROXYUSERPWD. Note that setting multiple bits may cause extra network round-trips.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8be7c9ebde1222a120734111e3e32708dedd4362" translate="yes" xml:space="preserve">
          <source>Set this to a bitmask value to enable the particular authentications methods you like. Use this in combination with CURLOPT_USERPWD. Note that setting multiple bits may cause extra network round-trips.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="201e3cba9030ba9ab5a35c83252bc5ead8294021" translate="yes" xml:space="preserve">
          <source>Set this to force the HTTP request to get back to GET. Only really usable if POST, PUT or a custom request have been used first.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f104bb80064caa014cf0adf29f3e8125902341e" translate="yes" xml:space="preserve">
          <source>Set this to true to force building a Zip64 archive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23a655c6e32767d492534620ca0081b3ccbc2c90" translate="yes" xml:space="preserve">
          <source>Set time condition on the request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d651cb3e3a90414cec95ae265f7fbe28365fcb44" translate="yes" xml:space="preserve">
          <source>Set timeout for activity on connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1785e0180635ec9dca571be96a892e6ce985fc3" translate="yes" xml:space="preserve">
          <source>Set timeout for connecting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8d027f532d570ab8abd44d2a643c871ab0120c7" translate="yes" xml:space="preserve">
          <source>Set to &lt;code&gt;DYNAMIC&lt;/code&gt; when the separator character is supplied at runtime.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9119359f812931974f7851b1e5a665f2790ae201" translate="yes" xml:space="preserve">
          <source>Set to a file name that contains random data for libcurl to use to seed the random engine when doing SSL connects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c08ec70d4a461752b2e8aa5152bd0caec0533c0" translate="yes" xml:space="preserve">
          <source>Set to contents of buf</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9231fb1b184fc2a1046ed26cd4eba72306fbd54" translate="yes" xml:space="preserve">
          <source>Set to contents of ptr[0..length]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ff2d458b072d2076c2219210a6bfc32ec0d5513" translate="yes" xml:space="preserve">
          <source>Set to empty string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec46414a2d1f4b48e1a53e911ecafd62f351df9d" translate="yes" xml:space="preserve">
          <source>Set to explicitly forbid the upcoming transfer's connection to be re-used when done. Do not use this unless you're absolutely sure of this, as it makes the operation slower and is less friendly for the network.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4eb15a3148023c53a4c0af4bb9ce2f559fdf0c0" translate="yes" xml:space="preserve">
          <source>Set to explicitly use a new connection for the upcoming transfer. Do not use this unless you're absolutely sure of this, as it makes the operation slower and is less friendly for the network.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c283deefca841a2a9b3b7514944ac0a77278b4f" translate="yes" xml:space="preserve">
          <source>Set to non-zero to skip the IP address received in a 227 PASV FTP server response. Typically used for FTP-SSL purposes but is not restricted to that. libcurl will then instead use the same IP address it used for the control connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25061787b94db4845964a443c6504a63f03eaa90" translate="yes" xml:space="preserve">
          <source>Set to the Entropy Gathering Daemon socket pathname</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12fc8c26a0da1ce4e6391c7a4b91fdc453370ac7" translate="yes" xml:space="preserve">
          <source>Set to the contents of any Copyright: section that is part of the module comment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7034e83fffcde3e850cf20f2162a87f36f116452" translate="yes" xml:space="preserve">
          <source>Set to the current date and time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c487affd880cade5ddb6a111ef002304da6f038b" translate="yes" xml:space="preserve">
          <source>Set to the current year.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ddfd7be39021c19d0e715df3c452ec9a8afc719" translate="yes" xml:space="preserve">
          <source>Set to the generated document text.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f42a40af8b3bb16dd21b3c837515ef740d595e70" translate="yes" xml:space="preserve">
          <source>Set to the module name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ed404ba9359e17483da3a33e3dc05a2672bd2bc" translate="yes" xml:space="preserve">
          <source>Set to the name of the generated output file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c13a85836d9abe87fb670b26d20c2536404d9b9" translate="yes" xml:space="preserve">
          <source>Set to the name of the source file the documentation is being generated from.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27af8e026712ab86c8c4533a892d3c3e6716a697" translate="yes" xml:space="preserve">
          <source>Set type inference target t Target type flag 1: don't put an error when inference fails</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15d4dac14cae1a121e66a646f2b3b4edc6406573" translate="yes" xml:space="preserve">
          <source>Set value in regimmed for reg.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87ccee842641de47b9c89073992065b48d2fe3c8" translate="yes" xml:space="preserve">
          <source>Set values with the | operator and test with &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75c91e5af0067d1f0b54d46d2bc83c031ba228db" translate="yes" xml:space="preserve">
          <source>Set verbose. This will print request information to stderr.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9bb191692360ac4ffb39127abc9818ad988068b" translate="yes" xml:space="preserve">
          <source>SetDifference!(less, R1, R2) &lt;strong id=&quot;setDifference&quot;&gt;setDifference&lt;/strong&gt;(alias less = &quot;a &amp;lt; b&quot;, R1, R2)(R1 r1, R2 r2);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b91966bbcbf79324ede11a41ccebf62e775f6a1" translate="yes" xml:space="preserve">
          <source>SetIntersection!(less, Rs) &lt;strong id=&quot;setIntersection&quot;&gt;setIntersection&lt;/strong&gt;(alias less = &quot;a &amp;lt; b&quot;, Rs...)(Rs ranges)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d646d06eae3f32333d0b71024d7727e10bf286f" translate="yes" xml:space="preserve">
          <source>SetSymmetricDifference!(less, R1, R2) &lt;strong id=&quot;setSymmetricDifference&quot;&gt;setSymmetricDifference&lt;/strong&gt;(alias less = &quot;a &amp;lt; b&quot;, R1, R2)(R1 r1, R2 r2);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ab262f44dfc9e1ee8adf98c1aa64de34434fa83" translate="yes" xml:space="preserve">
          <source>Sets</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81bc9474049e1c24a68f94f43d6b51160990c4e2" translate="yes" xml:space="preserve">
          <source>Sets A=0, B=12, C=13, D=21, and E=22, all of type &lt;code&gt;int&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecaf98436539b7edb272030c0fadd70a74519dc7" translate="yes" xml:space="preserve">
          <source>Sets A=3, B=4 all of type &lt;code&gt;long&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfb8ffe2236a1d1db5d287896b4fd749671e66c3" translate="yes" xml:space="preserve">
          <source>Sets a limit on the maximum number of user messages allowed in the mailbox. If this limit is reached, the caller attempting to add a new message will execute onCrowdingDoThis. If messages is zero, the mailbox is unbounded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b74e8b8b9b5cddf5eb7f634091bbf7ed591e0c51" translate="yes" xml:space="preserve">
          <source>Sets a limit on the maximum number of user messages allowed in the mailbox. If this limit is reached, the caller attempting to add a new message will execute the behavior specified by doThis. If messages is zero, the mailbox is unbounded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="697a1ff6575b1394c71a05324b767cb1c9faf7aa" translate="yes" xml:space="preserve">
          <source>Sets a maximum mailbox size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="292a9002e1512617d6738bff39f24217d4c2bb98" translate="yes" xml:space="preserve">
          <source>Sets a timeout (duration) option, i.e. &lt;code&gt;SocketOption.SNDTIMEO&lt;/code&gt; or &lt;code&gt;RCVTIMEO&lt;/code&gt;. Zero indicates no timeout.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f87815093796b5ffac64a0b3af8b5733fd246f6" translate="yes" xml:space="preserve">
          <source>Sets all the values in the &lt;code&gt;BitArray&lt;/code&gt; to the value specified by &lt;code&gt;val&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6da9000b8ec57f3b95db83c9dd5dfac4e7a8e9ee" translate="yes" xml:space="preserve">
          <source>Sets and returns byte at index i in file to value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fdcdce88cd10b3ed5090af15defd58da9575e91" translate="yes" xml:space="preserve">
          <source>Sets are value types (just like &lt;code&gt;int&lt;/code&gt; is) thus they are never aliased.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6a52af9458a5790f52e15db310816d087c851a4" translate="yes" xml:space="preserve">
          <source>Sets element at specified index into the container.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a31ba0b60613b1233b775f7c2381df5e1accaf5" translate="yes" xml:space="preserve">
          <source>Sets for other commonly useful properties that are accessible with &lt;a href=&quot;#unicode&quot;&gt;&lt;code&gt;unicode&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4418b122a29efbc21e15b469928193823725e7e" translate="yes" xml:space="preserve">
          <source>Sets options for the multi handle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b44fea3b86fa0afd844df65537d6f7a43c4df881" translate="yes" xml:space="preserve">
          <source>Sets or replaces an extension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="284c001dfad03244260c2a1919f5633ea1676e8e" translate="yes" xml:space="preserve">
          <source>Sets support natural syntax for set algebra, namely:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02fd72d7faabee170a0a6c965445dec391892133" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;i&lt;/code&gt;'th bit in the &lt;code&gt;BitArray&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="225090da905c762b5c909c248ec5623d807c6892" translate="yes" xml:space="preserve">
          <source>Sets the Scheduler behavior within the program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5e3a3cfe31661b70391fa864ac637d601a76cc2" translate="yes" xml:space="preserve">
          <source>Sets the amount of bits in the &lt;code&gt;BitArray&lt;/code&gt;. Warning: increasing length may overwrite bits in final word up to the next word boundary. i.e. D dynamic array extension semantics are not followed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d52c575da672463980f69d84435df8d5f7f1d6a" translate="yes" xml:space="preserve">
          <source>Sets the behavior to match the implementation's default behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75407550a52304675e0318955ea5cd0a9cd19394" translate="yes" xml:space="preserve">
          <source>Sets the bits of a slice of &lt;code&gt;BitArray&lt;/code&gt; starting at index &lt;code&gt;start&lt;/code&gt; and ends at index ($D end - 1) with the values specified by &lt;code&gt;val&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27db0a7701911b54b034f053f1c187134dfe0469" translate="yes" xml:space="preserve">
          <source>Sets the continuation offset. There is also a LONG version of this; look above for RESUME_FROM.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfbea342a1515def7456754560705b91bf2e2d09" translate="yes" xml:space="preserve">
          <source>Sets the current thread to a specific reference. Only to be used when dealing with externally-created threads (in e.g. C code). The primary use of this function is when Thread.getThis() must return a sensible value in, for example, TLS destructors. In other words, don't touch this unless you know what you're doing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4954aa6959a83f86997aa49369a3ae8f2afbd23" translate="yes" xml:space="preserve">
          <source>Sets the daemon status for this thread. While the runtime will wait for all normal threads to complete before tearing down the process, daemon threads are effectively ignored and thus will not prevent the process from terminating. In effect, daemon threads will be terminated automatically by the OS when the process exits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38f0b07a99511a146250582c6c65505770e78cde" translate="yes" xml:space="preserve">
          <source>Sets the front of all iterated ranges.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9821406f83b9e6da65e02fcd764d4eb4648e539e" translate="yes" xml:space="preserve">
          <source>Sets the local time zone on Posix systems with the TZ Database name by setting the TZ environment variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e24a24bf2426cc98ae097dfc214199eaab2d14c" translate="yes" xml:space="preserve">
          <source>Sets the maximum size of data that will be downloaded from an HTTP or FTP server. See MAXFILESIZE above for the LONG version.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3665fa50f56844545b1e1b2044dfe37abca514d3" translate="yes" xml:space="preserve">
          <source>Sets the message body text.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eff0469175cb0f487f0ce92ef24c6f950f7b0760" translate="yes" xml:space="preserve">
          <source>Sets the number of elements in the array to &lt;code&gt;newLength&lt;/code&gt;. If &lt;code&gt;newLength&lt;/code&gt; is greater than &lt;code&gt;length&lt;/code&gt;, the new elements are added to the end of the array and initialized with &lt;code&gt;T.init&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecc1ad59924cd310397177dbf6c0c06143c66afa" translate="yes" xml:space="preserve">
          <source>Sets the number of elements in the array to &lt;code&gt;newLength&lt;/code&gt;. If &lt;code&gt;newLength&lt;/code&gt; is greater than &lt;code&gt;length&lt;/code&gt;, the new elements are added to the end of the array and initialized with &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b537b7cfc54dad83a13d9b10f2f1d345b4b3a95" translate="yes" xml:space="preserve">
          <source>Sets the scheduling priority for the associated thread.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6f3e2e6091e39eac99dbadd1f83973556251d84" translate="yes" xml:space="preserve">
          <source>Sets the specified bits for the memory references by p. If p references memory not originally allocated by this garbage collector, points to the interior of a memory block, or if p is null, no action will be performed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97fa5c4077bdf220de3501d960a577c73c5140b1" translate="yes" xml:space="preserve">
          <source>Sets the total time which the StopWatch has been running (i.e. what peek returns).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c6b0c0a5a679bcf00b43e12952a25062561ca68" translate="yes" xml:space="preserve">
          <source>Sets the user-readable label for this thread.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6fddd876838e38c27b140a51a21762f99241835" translate="yes" xml:space="preserve">
          <source>Sets to the URL of the SMTP server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79d2a0c7a4d5883e23241d7ef66ab21937eac8bc" translate="yes" xml:space="preserve">
          <source>Sets up Boyer-Moore matching for use with &lt;code&gt;find&lt;/code&gt; below. By default, elements are compared for equality.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bddc6b35fba4256b5b11ca36fe87c2177e1b6c8" translate="yes" xml:space="preserve">
          <source>Sets up the D char[][] command-line args, initializes druntime, runs embedded unittests and then runs the given D main() function, optionally catching and printing any unhandled exceptions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d6b41b22972e0e872f83a2f9de1e1f86a269e0b" translate="yes" xml:space="preserve">
          <source>Setter for the recipient email addresses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4719b129e49aca03c29a01463be6aaf4ac015058" translate="yes" xml:space="preserve">
          <source>Setter for the sender's email address.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ca041f19722ef275c827ef387a628043e7b127f" translate="yes" xml:space="preserve">
          <source>Setting Dynamic Array Length</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fa000f3c0976d971f291c1208857c79532870ca" translate="yes" xml:space="preserve">
          <source>Setting The Result Of An SQL Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="376c40335fbc64ba88186585845cff32b8fdb24b" translate="yes" xml:space="preserve">
          <source>Setting default configuration properties in the executable can be done by specifying an array of options named &lt;code&gt;rt_options&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9a83dfd3d505719af9e507ad0a80716b5442739" translate="yes" xml:space="preserve">
          <source>Setting the alignment of a field aligns it to that power of 2, regardless of the size of the field.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e949612f6d1f5529e3d8a8c93f238f8461a55b1" translate="yes" xml:space="preserve">
          <source>Setting the priority of a thread that already terminated might have no effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a43c64ff039bb6e2ba89116b3d27a2ee99cdd844" translate="yes" xml:space="preserve">
          <source>Setup defines, protos etc for the sharing stuff.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83a62f58d714c18211d2120087f1ef9a71b2d256" translate="yes" xml:space="preserve">
          <source>Several environmental version identifiers and identifier name spaces are predefined for consistent usage. Version identifiers do not conflict with other identifiers in the code, they are in a separate name space. Predefined version identifiers are global, i.e. they apply to all modules being compiled and imported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1999b28ce10eeddd9229bdd4cdb29f0107536815" translate="yes" xml:space="preserve">
          <source>Sharada</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3927953c3f07d44dd2e538bb9ede2bec75b30027" translate="yes" xml:space="preserve">
          <source>Shared Static Constructors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34b5b7a5e18f2d0524ce68089204465b28a5cb02" translate="yes" xml:space="preserve">
          <source>Shared Static Destructors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="781472b0e0483738772c3e12d3608981023836c1" translate="yes" xml:space="preserve">
          <source>Shared read access and mutually exclusive write access.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9489f15d31579262118612b30665998a43c3a41" translate="yes" xml:space="preserve">
          <source>Shared static constructors and destructors are used to initialize and terminate shared global data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="239c74d1f02e4d3cc95b83d26c8ae9465392f948" translate="yes" xml:space="preserve">
          <source>Shared static constructors are executed before any &lt;a href=&quot;#StaticConstructor&quot;&gt;&lt;i&gt;StaticConstructor&lt;/i&gt;&lt;/a&gt;s, and are intended for initializing any shared global data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e91507825c25e1db4a5ff114a98eaabf59ae05d" translate="yes" xml:space="preserve">
          <source>Shared static constructors are run once on before &lt;code&gt;main()&lt;/code&gt; is called. Shared static destructors are run after the &lt;code&gt;main()&lt;/code&gt; returns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e23199f62178235f0f84ee766305b70b298fe0e" translate="yes" xml:space="preserve">
          <source>Shared static constructors on all modules are run before any non-shared static constructors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1737851278bd668bd2c581b975ed2cfd77f03f5" translate="yes" xml:space="preserve">
          <source>Shared static destructors are executed after static destructors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="078a62e5d80c369c69fd66b268ee9e7f790c69dd" translate="yes" xml:space="preserve">
          <source>Shared static destructors are executed at program termination in the reverse order that &lt;a href=&quot;#SharedStaticConstructor&quot;&gt;&lt;i&gt;SharedStaticConstructor&lt;/i&gt;&lt;/a&gt;s were executed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61106366759b055e0ad334722705582952604753" translate="yes" xml:space="preserve">
          <source>Shavian</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="971c7a6a748d71a29b1cfbb97ff76dbbcd4fa2d8" translate="yes" xml:space="preserve">
          <source>Shift Expressions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc5708169da223062910c236437e504717936476" translate="yes" xml:space="preserve">
          <source>Shift in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fed18343cbc79b587ba54aff87854eacef585ff" translate="yes" xml:space="preserve">
          <source>Shift out</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b578389ba8490743d68f49e0ab06f39766e9e90d" translate="yes" xml:space="preserve">
          <source>Shifts all the bits in the array to the left by the given number of bits. The leftmost bits are dropped, and 0's are appended to the end to fill up the vacant bits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16fde53f91e535f595d8ffc693824856fcb8db12" translate="yes" xml:space="preserve">
          <source>Shifts all the bits in the array to the right by the given number of bits. The rightmost bits are dropped, and 0's are inserted at the back to fill up the vacant bits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea3ec0f1934081acc947ea6f8c37aaabf0f21067" translate="yes" xml:space="preserve">
          <source>Shifts the &lt;code&gt;begin&lt;/code&gt; of this interval forward or backwards in time by the given duration (a positive duration shifts the interval forward; a negative duration shifts it backward). Effectively, it does &lt;code&gt;begin += duration&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9f1562c1aed87d26e2cf1b75594f3ce55962a99" translate="yes" xml:space="preserve">
          <source>Shifts the &lt;code&gt;begin&lt;/code&gt; of this interval forward or backwards in time by the given number of years and/or months (a positive number of years and months shifts the interval forward; a negative number shifts it backward). It adds the years the given years and months to &lt;code&gt;begin&lt;/code&gt;. It effectively calls &lt;code&gt;add!&quot;years&quot;()&lt;/code&gt; and then &lt;code&gt;add!&quot;months&quot;()&lt;/code&gt; on &lt;code&gt;begin&lt;/code&gt; with the given number of years and months.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c82547f0737e793367d6e1e37ab592d275fec24" translate="yes" xml:space="preserve">
          <source>Shifts the &lt;code&gt;end&lt;/code&gt; of this interval forward or backwards in time by the given duration (a positive duration shifts the interval forward; a negative duration shifts it backward). Effectively, it does &lt;code&gt;end += duration&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63de514dbaa05de9b008c83de88b2ff0ed8b0c48" translate="yes" xml:space="preserve">
          <source>Shifts the &lt;code&gt;end&lt;/code&gt; of this interval forward or backwards in time by the given number of years and/or months (a positive number of years and months shifts the interval forward; a negative number shifts it backward). It adds the years the given years and months to end. It effectively calls &lt;code&gt;add!&quot;years&quot;()&lt;/code&gt; and then &lt;code&gt;add!&quot;months&quot;()&lt;/code&gt; on end with the given number of years and months.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30c9d1069e93012138639700bbbe15896f4e5cb3" translate="yes" xml:space="preserve">
          <source>Shifts the interval forward or backwards in time by the given duration (a positive duration shifts the interval forward; a negative duration shifts it backward). Effectively, it does &lt;code&gt;begin += duration&lt;/code&gt; and &lt;code&gt;end += duration&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4add9d7d82a3dd821e51e23449ece85aebf8a80a" translate="yes" xml:space="preserve">
          <source>Shifts the interval forward or backwards in time by the given number of years and/or months (a positive number of years and months shifts the interval forward; a negative number shifts it backward). It adds the years the given years and months to both begin and end. It effectively calls &lt;code&gt;add!&quot;years&quot;()&lt;/code&gt; and then &lt;code&gt;add!&quot;months&quot;()&lt;/code&gt; on begin and end with the given number of years and months.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ba2504ce66ba65ab22952cff0f306bbf1dd5257" translate="yes" xml:space="preserve">
          <source>Short versus long options</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5347561dd8843691180a39ba854a586b1676d70f" translate="yes" xml:space="preserve">
          <source>Shorthand aliases from values indicating normalization forms.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d41512e37e9c64d11462707ee1e27003b9974b84" translate="yes" xml:space="preserve">
          <source>Shorthands for front.pre, front.post, front.hit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61e9ce84401a9004ea4bc4f89b213797cfc0aa74" translate="yes" xml:space="preserve">
          <source>Should check that finish() returns a ubyte[num] array</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bffc824c1f43619f360c6700eeccbdffa63ed6c" translate="yes" xml:space="preserve">
          <source>Should the main function be run or not? This is ignored if any tests failed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b26360966ef820ecba4ab8edfa14276c1044a149" translate="yes" xml:space="preserve">
          <source>Should we print a summary of the results?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b43e9d333c031c4ff5adf55bdb3c087df48ecbf" translate="yes" xml:space="preserve">
          <source>Showing usage with binary predicate:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c067cf134d6861c85fc1cd3a5f0426bc25c9088" translate="yes" xml:space="preserve">
          <source>Showing usage with unary predicate:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f361d0705e500d4327048599e0e2758d534ec6e" translate="yes" xml:space="preserve">
          <source>Shrink the &quot;allocated&quot; length of an array to be the exact size of the array. It doesn't matter what the current allocated length of the array is, the user is telling the runtime that he knows what he is doing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a16c7e507fa944f9a0fcabb7eb071ff43bcd994" translate="yes" xml:space="preserve">
          <source>Shrinks an array by &lt;code&gt;delta&lt;/code&gt; elements using &lt;code&gt;allocatorFor!(T[])&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85bb9c22bbf24a1d89cbacaaaa00da5fcc2727a6" translate="yes" xml:space="preserve">
          <source>Shrinks an array by &lt;code&gt;delta&lt;/code&gt; elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ba066a9397ad225cfa9acb045b9418e30fdd1cd" translate="yes" xml:space="preserve">
          <source>Shrinks the managed array to the given length.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b772b7bfd0a43273fb7c5f49a6c16d837261f35" translate="yes" xml:space="preserve">
          <source>Shuffle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aaf0b0bde728b6462a74eb7fae5f0efb5c36492a" translate="yes" xml:space="preserve">
          <source>Shuffles elements of &lt;code&gt;r&lt;/code&gt; using &lt;code&gt;gen&lt;/code&gt; as a shuffler. &lt;code&gt;r&lt;/code&gt; must be a random-access range with length. If no RNG is specified, &lt;code&gt;rndGen&lt;/code&gt; will be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11ba4f933be7da59fa1a8894cd79eda8f3614c1e" translate="yes" xml:space="preserve">
          <source>Sibling nested functions which called this one</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5803c381c3fbeb2adce2449545f1a22aba8afa44" translate="yes" xml:space="preserve">
          <source>Signal unrecognized arguments as errors (default)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="273f9fcdd9d572ce7c3f2acf811fb18cb1d1f5b4" translate="yes" xml:space="preserve">
          <source>Signal-and-slots framework for event-driven programming.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f29e2260bf30618d0a4b240bc1ae129d54f6b287" translate="yes" xml:space="preserve">
          <source>Signal/Slot mechanism?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af9ab2cf0575064ac868c9aa3b6b29d4fa960e29" translate="yes" xml:space="preserve">
          <source>Signals &amp;amp; Slots for Walter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e026eae17a905fff0a878d1d38a48d790e005f22" translate="yes" xml:space="preserve">
          <source>Signals a mismatch between a format and its corresponding argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="710e390451b6f56dfcf89f556e69da82d687b97a" translate="yes" xml:space="preserve">
          <source>Signals and Slots are an implementation of the Observer Pattern. Essentially, when a Signal is emitted, a list of connected Observers (called slots) are called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81b80dc52d89567caaa6fb38a70defb987634659" translate="yes" xml:space="preserve">
          <source>Signals and Slots in D</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a563d9321d6aa2b8ce7712bfdc2239d68339a924" translate="yes" xml:space="preserve">
          <source>Signals and slots ready for evaluation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bdfba1813b882961ad634ed801fa955cc36a36a" translate="yes" xml:space="preserve">
          <source>Signals and slots?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9ddd57b7422109947eddb3c729418157a91b8f9" translate="yes" xml:space="preserve">
          <source>Signals that the calling thread is no longer in a critical region. Following a call to this function, the thread can once again be suspended.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52c017b3f156f7e6aa3f689e8c679aade3ffdf46" translate="yes" xml:space="preserve">
          <source>Signals that the code following this call is a critical region. Any code in this region must finish running before the calling thread can be suspended by a call to thread_suspendAll.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58e9d80b370f25c78cb8554c930eeef09c3307e9" translate="yes" xml:space="preserve">
          <source>Signals that the message has been written and no more calls to &lt;code&gt;logMsgPart&lt;/code&gt; follow.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62b7609699662d9bbec7e8d49880c389cc92ac8d" translate="yes" xml:space="preserve">
          <source>Signals to all worker threads to terminate as soon as they are finished with their current &lt;code&gt;Task&lt;/code&gt;, or immediately if they are not executing a &lt;code&gt;Task&lt;/code&gt;. &lt;code&gt;Task&lt;/code&gt;s that were in queue will not be executed unless a call to &lt;code&gt;Task.workForce&lt;/code&gt;, &lt;code&gt;Task.yieldForce&lt;/code&gt; or &lt;code&gt;Task.spinForce&lt;/code&gt; causes them to be executed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13e862aedfa87c2df005d3ebaddfad4bb6992eae" translate="yes" xml:space="preserve">
          <source>Signals worker threads to terminate when the queue becomes empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f4b2b1fe3026e91fd812985c5ed8dc0c1baec84" translate="yes" xml:space="preserve">
          <source>Signed long divide.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1364970def51f7072a103f129964af773ab98dc4" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;#drop&quot;&gt;&lt;code&gt;drop&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;dropBack&lt;/code&gt; but they call &lt;code&gt;range.&lt;a href=&quot;#popFrontExactly&quot;&gt;popFrontExactly&lt;/a&gt;(n)&lt;/code&gt; and &lt;code&gt;range.popBackExactly(n)&lt;/code&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="146d6acd97dc5553503e6fd694d3a72e1742d861" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;#move&quot;&gt;&lt;code&gt;move&lt;/code&gt;&lt;/a&gt; but assumes &lt;code&gt;target&lt;/code&gt; is uninitialized. This is more efficient because &lt;code&gt;source&lt;/code&gt; can be blitted over &lt;code&gt;target&lt;/code&gt; without destroying or initializing it first.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3706a453f41f9e51ed63f64114d2c9bd0594b921" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;#moveAll&quot;&gt;&lt;code&gt;moveAll&lt;/code&gt;&lt;/a&gt; but assumes all elements in &lt;code&gt;tgt&lt;/code&gt; are uninitialized. Uses &lt;a href=&quot;#moveEmplace&quot;&gt;&lt;code&gt;moveEmplace&lt;/code&gt;&lt;/a&gt; to move elements from &lt;code&gt;src&lt;/code&gt; over elements from &lt;code&gt;tgt&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d103a8187a9214ae6cc10911d4364c8638d5e5b1" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;#take&quot;&gt;&lt;code&gt;take&lt;/code&gt;&lt;/a&gt;, but assumes that &lt;code&gt;range&lt;/code&gt; has at least &lt;code&gt;n&lt;/code&gt; elements. Consequently, the result of &lt;code&gt;takeExactly(range, n)&lt;/code&gt; always defines the &lt;code&gt;length&lt;/code&gt; property (and initializes it to &lt;code&gt;n&lt;/code&gt;) even when &lt;code&gt;range&lt;/code&gt; itself does not define &lt;code&gt;length&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f88cce15b78a354970852d1135c52539911a4416" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;#topN&quot;&gt;&lt;code&gt;topN&lt;/code&gt;&lt;/a&gt;, except that the range is not modified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="831057d3cabd55563c3c8680f2e80dc1eb2a8b08" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;std_algorithm_iteration#fold&quot;&gt;&lt;code&gt;std.algorithm.iteration.fold&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;fold&lt;/code&gt; is a wrapper around &lt;a href=&quot;#reduce&quot;&gt;&lt;code&gt;reduce&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c4fa8aadc9151dbd27f0e0bf4d40581f315d6ef" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;Rebindable!(T)&lt;/code&gt; but strips all qualifiers from the reference as opposed to just constness / immutability. Primary intended use case is with shared (having thread-local reference to shared class data)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5290f0485e4d0cffcb03a7c25cd70a75d89f705f" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;allocate&lt;/code&gt;, with the additional guarantee that the memory returned is aligned to at least &lt;code&gt;a&lt;/code&gt; bytes. &lt;code&gt;a&lt;/code&gt; must be a power of 2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc9d4ef2702bd71579e70746db9014e1e51c18f8" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;filter&lt;/code&gt;, but also provides &lt;code&gt;back&lt;/code&gt; and &lt;code&gt;popBack&lt;/code&gt; at a small increase in cost.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62f4238328f91927598d21769ae09f62580d6c52" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;filter&lt;/code&gt;, except it defines a &lt;a href=&quot;std_range_primitives#isBidirectionalRange&quot;&gt;bidirectional range&lt;/a&gt;. There is a speed disadvantage - the constructor spends time finding the last element in the range that satisfies the filtering condition (in addition to finding the first one). The advantage is that the filtered range can be spanned from both directions. Also, &lt;a href=&quot;std_range#retro&quot;&gt;&lt;code&gt;std.range.retro&lt;/code&gt;&lt;/a&gt; can be applied against the filtered range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="875dfdf15738fab32e181636efd3f70fe1a5bc97" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;fold&lt;/code&gt;, but returns a range containing the successive reduced values. The call &lt;code&gt;cumulativeFold!(fun)(range, seed)&lt;/code&gt; first assigns &lt;code&gt;seed&lt;/code&gt; to an internal variable &lt;code&gt;result&lt;/code&gt;, also called the accumulator. The returned range contains the values &lt;code&gt;result = fun(result, x)&lt;/code&gt; lazily evaluated for each element &lt;code&gt;x&lt;/code&gt; in &lt;code&gt;range&lt;/code&gt;. Finally, the last element has the same value as &lt;code&gt;fold!(fun)(seed, range)&lt;/code&gt;. The one-argument version &lt;code&gt;cumulativeFold!(fun)(range)&lt;/code&gt; works similarly, but it returns the first element unchanged and uses it as seed for the next elements. This function is also known as &lt;a href=&quot;http://en.cppreference.com/w/cpp/algorithm/partial_sum&quot;&gt;partial_sum&lt;/a&gt;, &lt;a href=&quot;http://docs.python.org/3/library/itertools.html#itertools.accumulate&quot;&gt;accumulate&lt;/a&gt;, &lt;a href=&quot;http://hackage.haskell.org/package/base-4.8.2.0/docs/Prelude.html#v:scanl&quot;&gt;scan&lt;/a&gt;, &lt;a href=&quot;http://mathworld.wolfram.com/CumulativeSum.html&quot;&gt;Cumulative Sum&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98f1c9b2d7ec77eaa5f50a87a4458ad6a7da62ad" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;gallop&lt;/code&gt; but starts backwards. Use it when confident that the value is around the end of the range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e0b9221369a6d897768c95e5120cfec4d7976ca" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;gapWeightedSimilarity&lt;/code&gt;, just works in an incremental manner by first revealing the matches of length 1, then gapped matches of length 2, and so on. The memory requirement is &amp;Omicron;(&lt;code&gt;s.length * t.length&lt;/code&gt;). The time complexity is &amp;Omicron;(&lt;code&gt;s.length * t.length&lt;/code&gt;) time for computing each step. Continuing on the previous example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2dfa06c80c4a885eef61ba259cdcb6ba7d0cbc32" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;insertAfter&lt;/code&gt; above, but accepts a range bounded in count. This is important for ensuring fast insertions in the middle of the list. For fast insertions after a specified position &lt;code&gt;r&lt;/code&gt;, use &lt;code&gt;insertAfter(take(r, 1), stuff)&lt;/code&gt;. The complexity of that operation only depends on the number of elements in &lt;code&gt;stuff&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b797db3612f0a2347696ca93b6893d10fde2923" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;largestPartialIntersection&lt;/code&gt;, but associates a weight with each distinct element in the intersection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e9419714f50c773ae93d2d3274ae164e526ec99" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;move&lt;/code&gt; but assumes &lt;code&gt;target&lt;/code&gt; is uninitialized.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68e8c7327afbf26448721d417be3d2ff5a02dbc9" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;moveAll&lt;/code&gt; but assumes all elements in &lt;code&gt;target&lt;/code&gt; are uninitialized.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00eff355ec508270d90640e6051a11f58f6d5469" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;moveSome&lt;/code&gt; but assumes all elements in &lt;code&gt;target&lt;/code&gt; are uninitialized.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="474445e8c242f41429d63fa8e986e31d56208a28" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;reallocate&lt;/code&gt;, but guarantees the reallocated memory is aligned at &lt;code&gt;a&lt;/code&gt; bytes. The buffer must have been originated with a call to &lt;code&gt;alignedAllocate&lt;/code&gt;. &lt;code&gt;a&lt;/code&gt; must be a power of 2 greater than &lt;code&gt;(void*).sizeof&lt;/code&gt;. An allocator should implement &lt;code&gt;alignedReallocate&lt;/code&gt; if it can derive some advantage from doing so; otherwise, this module defines a &lt;code&gt;alignedReallocate&lt;/code&gt; free function implemented in terms of &lt;code&gt;expand&lt;/code&gt;, &lt;code&gt;alignedAllocate&lt;/code&gt;, and &lt;code&gt;deallocate&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc1bc770df87eeebc738073274a9237a823b991d" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;reallocate&lt;/code&gt;, with alignment. Defined only if &lt;code&gt;Allocator&lt;/code&gt; defines &lt;code&gt;alignedReallocate&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43baedd7196a8fe860328cff6ef77afca247c335" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;recurrence&lt;/code&gt;, except that a random-access range is created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d994bbc71a258b2577aafa11915565174c68136" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;toChars&lt;/code&gt;, but does not print the template constraints</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7af7972ffec12d69a30ba14482fbb1e87f0a6ae9" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;trot&lt;/code&gt; but starts backwards. Use it when confident that the value is around the end of the range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ea4bc4ec425f2003be610ca38f929b9692dd551" translate="yes" xml:space="preserve">
          <source>Similar to TypeIdentifier, but with a TemplateInstance as the root</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dbb12675313723882196bc3f58539e9e47468dd" translate="yes" xml:space="preserve">
          <source>Similar to behaviour of the &lt;code&gt;or&lt;/code&gt; operator in dynamic languages such as Lisp's &lt;code&gt;(or ...)&lt;/code&gt; and Python's &lt;code&gt;a or b or ...&lt;/code&gt; except that the last argument is returned upon no match.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="325593c3e6b3bd72dd18a5cb6cc7f0409f448d64" translate="yes" xml:space="preserve">
          <source>Similar translations are done for assignment operators involving slicing, for example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3c6d2f1dd4bfc87e8a352d5323cb5e13287161e" translate="yes" xml:space="preserve">
          <source>Similarities of &lt;code&gt;KRRegion&lt;/code&gt; (in free list mode) with the Kernighan-Ritchie allocator:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbac7a0c2b389b73e4f4b86ff6eee34bb3278d8b" translate="yes" xml:space="preserve">
          <source>Similarly to &lt;code&gt;uniq&lt;/code&gt;, &lt;code&gt;group&lt;/code&gt; produces a range that iterates over unique consecutive elements of the given range. Each element of this range is a tuple of the element and the number of times it is repeated in the original range. Equivalence of elements is assessed by using the predicate &lt;code&gt;pred&lt;/code&gt;, which defaults to &lt;code&gt;&quot;a == b&quot;&lt;/code&gt;. The predicate is passed to &lt;a href=&quot;std_functional#binaryFun&quot;&gt;&lt;code&gt;std.functional.binaryFun&lt;/code&gt;&lt;/a&gt;, and can either accept a string, or any callable that can be executed via &lt;code&gt;pred(element, element)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdc50fd60a42d41117d8b743c9e8e2d7e333492a" translate="yes" xml:space="preserve">
          <source>Similarly, &lt;code&gt;checked(-1) &amp;gt; uint(0)&lt;/code&gt; aborts execution (even though the built-in comparison &lt;code&gt;int(-1) &amp;gt; uint(0)&lt;/code&gt; is surprisingly true due to language's conversion rules modeled after C). Thus, &lt;code&gt;Checked!int&lt;/code&gt; is a virtually drop-in replacement for &lt;code&gt;int&lt;/code&gt; useable in debug builds, to be replaced by &lt;code&gt;int&lt;/code&gt; in release mode if efficiency demands it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d5e00be66011a32121dd9e13ceecfc7523a05db" translate="yes" xml:space="preserve">
          <source>Similarly, for &lt;code&gt;foreach_reverse&lt;/code&gt;, the following properties and methods must be defined:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea20b90cf8e598a399dad19e6a356250ad3113f1" translate="yes" xml:space="preserve">
          <source>Similarly, the ~= operator means append, as in:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78a395ea6546039af1e9fef7523487ccaeb12fb0" translate="yes" xml:space="preserve">
          <source>Simple Assignment Expression</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbbaea3a554aa8bfacb01066617959b77e799af6" translate="yes" xml:space="preserve">
          <source>Simple check for whether execution should continue after unit tests have been run. Works with legacy code that expected a bool return.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc980e8162e6f61bc2d8245b9627aba85460a51d" translate="yes" xml:space="preserve">
          <source>Simple getter and setter properties can be written using &lt;a href=&quot;#pseudo-member&quot;&gt;UFCS&lt;/a&gt;. These can be enhanced with the additon of the &lt;code&gt;@property&lt;/code&gt; attribute to the function, which adds the following behaviors:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2adbf99d5203be3b0456ddb46ed27e03e83c612" translate="yes" xml:space="preserve">
          <source>Simple return code that says unit tests failed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="324c92f6c4e9a5cbba4d1efe5dd87db3316d4ebc" translate="yes" xml:space="preserve">
          <source>Simple return code that says unit tests pass, and main should be run</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="892aabb3d26dc0c4f94802f6ca51d2f455bc0630" translate="yes" xml:space="preserve">
          <source>Simplifies logic, for instance, in parsing rules where a set of alternative matchers are tried. The first one that matches returns it match result, typically as an abstract syntax tree (AST).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38419a14ed372facb9293fd76c0b1ff15c2cb039" translate="yes" xml:space="preserve">
          <source>Simplifying the process of integration at the build-system level</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d14e252fd5b7f99e45066025f61d09a15d67a780" translate="yes" xml:space="preserve">
          <source>Simply extracting elements from a &lt;code&gt;BinaryHeap&lt;/code&gt; container is tantamount to lazily fetching elements of &lt;code&gt;Store&lt;/code&gt; in descending order. Extracting elements from the &lt;code&gt;BinaryHeap&lt;/code&gt; to completion leaves the underlying store sorted in ascending order but, again, yields elements in descending order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fff71f5d9948b62393b6c3aad5a1172cb1097cb" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;name&lt;/code&gt; needs to be &lt;code&gt;\0&lt;/code&gt; terminated for &lt;code&gt;toChars&lt;/code&gt;, no slice overload is provided yet.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2d001632009ea88df58e04eeb8ec24dcf362b58" translate="yes" xml:space="preserve">
          <source>Since D 2.065, this value does not indicate a restriction, and &lt;code&gt;SocketSet&lt;/code&gt; will grow its capacity as needed automatically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2661c0f97ace1b0668041a7efd924ac6f0992ccc" translate="yes" xml:space="preserve">
          <source>Since D can call C code directly, it can also call any C library functions, giving D access to the smorgasbord of existing C libraries. To do so, however, one needs to write a D interface (.di) file, which is a translation of the C .h header file for the C library into D.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86192558a0a267f0ea541fdb288067add83a2aa1" translate="yes" xml:space="preserve">
          <source>Since a row and column is not meaningful when a column specified by the header is not found in the data, both row and col will be zero. Otherwise row is always one and col is the first instance found in header that occurred before the previous starting at one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f383cb3e0c3a9209ae8227153870b9b9426e96d4" translate="yes" xml:space="preserve">
          <source>Since even permutations are only distinct from all permutations when the range elements are unique, this function assumes that there are no duplicate elements under the specified ordering. If this is not true, some permutations may fail to be generated. When the range has non-unique elements, you should use &lt;a href=&quot;#nextPermutation&quot;&gt;&lt;em&gt;nextPermutation&lt;/em&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c578c7741efe325b3e985c03c3baa539c81cae56" translate="yes" xml:space="preserve">
          <source>Since it wouldn't really make sense to be iterating over a specific month and end up with some of the time points in the succeeding month or two years after the previous time point, &lt;code&gt;AllowDayOverflow.no&lt;/code&gt; is always used when calculating the next time point.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0db5455fe1a86ce6b93aee9bcb5b8d0bb4ad557f" translate="yes" xml:space="preserve">
          <source>Since strings, however, are not 0 terminated in D, when transferring a pointer to a string to C, add a terminating 0:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="510c14a1fbf6074d7e016035d9ac96728f25a9a4" translate="yes" xml:space="preserve">
          <source>Since the invariant is called at the start of public or exported members, such members should not be called from constructors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df6150644d7e7cf15e537622380baa59b4e2c6ac" translate="yes" xml:space="preserve">
          <source>Since the normal flow code does not have to check every function call for error returns, it can be realistically faster to use exception handling for the errors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7cd6e9d31a381990e68ac298f1a88442574ddf0" translate="yes" xml:space="preserve">
          <source>Since the underlying data for this struct is heap-allocated, this struct has reference semantics when passed between functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab61c5d42bcd4a247750b704670f2fda2d225e0d" translate="yes" xml:space="preserve">
          <source>Since version 2.067, The garbage collector can now be configured through the command line, the environment or by options embedded into the executable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce1c4cc3769863daa594f0622b238816edbd4a9e" translate="yes" xml:space="preserve">
          <source>Single value replacements (&lt;code&gt;'&amp;ouml;'.substitute!('&amp;auml;', 'a', '&amp;ouml;', 'o', '&amp;uuml;', 'u)&lt;/code&gt;) are supported as well and in &amp;Omicron;(&lt;code&gt;1&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="338005d6e0b09d64dfbf775ef90047fe2e6b63bb" translate="yes" xml:space="preserve">
          <source>Single-letter options can be bundled together, i.e. &quot;-abc&quot; is the same as &lt;code&gt;&quot;-a -b -c&quot;&lt;/code&gt;. By default, this option is turned off. You can turn it on with the &lt;code&gt;std.getopt.config.bundling&lt;/code&gt; directive:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b932e3243433ddb1503795c617e30b68c4c2f81" translate="yes" xml:space="preserve">
          <source>Single-line mode, makes . match '\n' and '\r' as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d8bc28bd230eae9445fec6a48931c7bdeb53ee1" translate="yes" xml:space="preserve">
          <source>Sinhala</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dbee4d3a7445c1cd30120304066ae6c0efdbaed" translate="yes" xml:space="preserve">
          <source>Sink &lt;code&gt;sink&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2a4bda7a15c0a5a44ed2d1241baf53ae52cfe3f" translate="yes" xml:space="preserve">
          <source>Sink-load + sink-store barrier. Corresponds to &lt;a href=&quot;https://llvm.org/docs/Atomics.html#release&quot;&gt;LLVM AtomicOrdering.Release&lt;/a&gt; and C++11/C11 &lt;code&gt;memory_order_release&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11e406d5b22aca14c9680c0dcfa470c5c6f007e6" translate="yes" xml:space="preserve">
          <source>Size boundary struct needs to be aligned on</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fad8fbb2edd088ff29306e915b1e0ffcbaf457d" translate="yes" xml:space="preserve">
          <source>Size in bytes of struct</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="460c53373ffa107ec680e7ef572b40f1223c6543" translate="yes" xml:space="preserve">
          <source>Size of array aParam[]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37455835abbf120d237a9172d26327c7e91ee2f3" translate="yes" xml:space="preserve">
          <source>Size of storage for an enumerated value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ada7946108dd9aaf5c5f2b76c96f3882368560a" translate="yes" xml:space="preserve">
          <source>Size of the cache, in kilobytes, per CPU. For L1 unified (data + code) caches, this size is half the physical size. (we don't halve it for larger sizes, since normally data size is much greater than code size for critical loops).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f635f04c92e85f47c7740835bb8d134635d1272f" translate="yes" xml:space="preserve">
          <source>Size of the target OS critical section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d489a0f19ab468ea5a2eff352c17970cba0c1014" translate="yes" xml:space="preserve">
          <source>Sizes through 3584 bytes are handled via freelists of staggered sizes. Sizes from 3585 bytes through 4072 KB are handled by a &lt;code&gt;BitmappedBlock&lt;/code&gt; with a block size of 4 KB. Sizes above that are passed direct to the &lt;code&gt;GCAllocator&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7ec317f3d8dbad572e54a655ed793814fe12796" translate="yes" xml:space="preserve">
          <source>Sk</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d66e72b0d67d479d4d9e8be543ce4bf3792a1c72" translate="yes" xml:space="preserve">
          <source>Skip over the initial portion of the first given range (&lt;code&gt;haystack&lt;/code&gt;) that matches any of the additionally given ranges (&lt;code&gt;needles&lt;/code&gt;) fully, or if no second range is given skip over the elements that fulfill pred. Do nothing if there is no match.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db7c68156080679ceb2c3871e448fcb4e220e9e8" translate="yes" xml:space="preserve">
          <source>Skip. The range is always advanced by the size of the tested &lt;a href=&quot;#Code%20point&quot;&gt;code point&lt;/a&gt; regardless of the result of test.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81d5d01a859b1e2fa5073f8fd8a449a457fb4301" translate="yes" xml:space="preserve">
          <source>Slice Assignment Operator Overloading</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7688b35604a29c39bbe45541db204b316901640" translate="yes" xml:space="preserve">
          <source>Slice Expressions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eaf2dda172d6cbf6e798ffb03b2f7e3fa0bdf807" translate="yes" xml:space="preserve">
          <source>Slice Op Assignment Operator Overloading</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="033f3e7ed24bf0ab62fb5af98b33337c149808a4" translate="yes" xml:space="preserve">
          <source>Slice Operator Overloading</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ec9226b2d5d43367faf628133f316e11037d51a" translate="yes" xml:space="preserve">
          <source>Slice of input immediately after the match.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af9ac26f04daab6c8b2cd64b2e7c4fdea6f4b9f8" translate="yes" xml:space="preserve">
          <source>Slice of input prior to the match.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2168c47047fd1214c73835b41283816e7f6f8fba" translate="yes" xml:space="preserve">
          <source>Slice of matched portion of input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c63804f40d4748b06b1d4aca52f2cafe9ae68fd" translate="yes" xml:space="preserve">
          <source>Slice to use to call the C function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fa209ae95a1e4cee2d6070fbec700f062888d64" translate="yes" xml:space="preserve">
          <source>Slice up a path into its elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43e5f8cbbd409599cea4ae25ce289111e221feda" translate="yes" xml:space="preserve">
          <source>SliceExpression</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d4b93574454cef3eafd7db86992829787f4e567" translate="yes" xml:space="preserve">
          <source>Slices a &lt;code&gt;\0&lt;/code&gt;-terminated C-string, excluding the terminator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b8d3bff7b282e8424f968f9e948b9dc2006e7fb" translate="yes" xml:space="preserve">
          <source>Slicing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea8456ea67eab747d7c896ec527873e8de5956c7" translate="yes" xml:space="preserve">
          <source>Slicing &amp;amp; bitsSet</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fab534e7c736fc37b3e439fe76b972d0bf75326" translate="yes" xml:space="preserve">
          <source>Slicing and zero memory allocations orientation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b8880cbe99fe0113cf3b504205ca3e78e79dbdc" translate="yes" xml:space="preserve">
          <source>Slicing if offered if &lt;code&gt;RangeOfRanges&lt;/code&gt; supports slicing and all the conditions for supporting indexing are met.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e129bec0636d8830fae25a8346e190ad710ee04d" translate="yes" xml:space="preserve">
          <source>Slicing is not only handy for referring to parts of other arrays, but for converting pointers into bounds-checked arrays:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7cd97c88dbf791b98c4b98d7497b11a31d25419" translate="yes" xml:space="preserve">
          <source>Slicing operators executing the specified operation on the entire slice.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="832fd33f8e2a970083120d6396a18099ab908dc9" translate="yes" xml:space="preserve">
          <source>Sliding window size</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc9c13bd4a9c6a9291fea4f02ee509836974cf94" translate="yes" xml:space="preserve">
          <source>Slots can only be delegates formed from class objects or interfaces to class objects. If a delegate to something else is passed to connect(), such as a struct member function, a nested function or a COM interface, undefined behavior will result.  Not safe for multiple threads operating on the same signals or slots.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5673719e82d0cea7e5290d4cb5db9831ea891646" translate="yes" xml:space="preserve">
          <source>Sm</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="363328bdd211155d67649d1572971fabe0870421" translate="yes" xml:space="preserve">
          <source>Small Form Variants</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b1d4acaa7778f448af93aed9ebfd2a13dfefc4e" translate="yes" xml:space="preserve">
          <source>Smallest generated value (0).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7605031425edea81fed3ecf57264b570d59a460" translate="yes" xml:space="preserve">
          <source>Smallest generated value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a681dad3a36642ccf53919812d1386c119c2ac8d" translate="yes" xml:space="preserve">
          <source>Smallest value of enum</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26c0ca793e8f7074d3f8c82877440040dbf9523b" translate="yes" xml:space="preserve">
          <source>So</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09ea2774c656968dbc5ddf03bd8a3b951308d3d3" translate="yes" xml:space="preserve">
          <source>So for those blocks, it looks like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4519a10d3120a45f508a759d4090cbf678cee1a" translate="yes" xml:space="preserve">
          <source>So,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="845499d26e97535c75b3bb87bc5d821a24cf1d51" translate="yes" xml:space="preserve">
          <source>So, MonoTime should be used for anything involving timers and timing, whereas &lt;a href=&quot;std_datetime#SysTime&quot;&gt;&lt;code&gt;std.datetime.SysTime&lt;/code&gt;&lt;/a&gt; should be used when the wall clock time is required.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3845103f46891c295d20936440aaae75acfb132" translate="yes" xml:space="preserve">
          <source>So, for now, when using std.datetime.stopwatch, if other modules from std.datetime are needed, then either import them individually rather than importing std.datetime, or use selective or static imports to import std.datetime.stopwatch. e.g.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe0d5a13ba1c41796c6f232223baae85bc612e1a" translate="yes" xml:space="preserve">
          <source>So, if used directly in the condition of an if statement or loop, the result will be &lt;code&gt;true&lt;/code&gt; if one of the needles is found and &lt;code&gt;false&lt;/code&gt; if none are found, whereas if the result is used elsewhere, it can either be cast to &lt;code&gt;bool&lt;/code&gt; for the same effect or used to get which needle was found first without having to deal with the tuple that &lt;code&gt;LREF find&lt;/code&gt; returns for the same operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a837b57082bcc58825c7e604b80ebe93d8eabc23" translate="yes" xml:space="preserve">
          <source>So, the primary difference between &lt;code&gt;ClockType.coarse&lt;/code&gt; and &lt;code&gt;ClockType.second&lt;/code&gt; is that &lt;code&gt;ClockType.coarse&lt;/code&gt; sacrifices some precision in order to get speed but is still fairly precise, whereas &lt;code&gt;ClockType.second&lt;/code&gt; tries to be as fast as possible at the expense of all sub-second precision.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1478f3298db93427a81fe6af7af45737bc679d2f" translate="yes" xml:space="preserve">
          <source>So, using this delegate allows iteration over successive time points which are in the same month but different years. For example, iterate over each successive December 25th in an interval by starting with a date which had the 25th as its day and passed &lt;code&gt;Month.dec&lt;/code&gt; to &lt;code&gt;everyMonth&lt;/code&gt; to create the delegate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecf24c90374571b085213911f58232148a9ad42a" translate="yes" xml:space="preserve">
          <source>So, why does the first string literal to printf not need the &lt;code&gt;.ptr&lt;/code&gt;? The first parameter is prototyped as a &lt;code&gt;const(char)*&lt;/code&gt;, and a string literal can be implicitly &lt;code&gt;cast&lt;/code&gt; to a &lt;code&gt;const(char)*&lt;/code&gt;. The rest of the arguments to printf, however, are variadic (specified by ...), and a string literal typed &lt;code&gt;immutable(char)[]&lt;/code&gt; cannot pass to variadic parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09cc71950ae208360eb13271508b27114befe553" translate="yes" xml:space="preserve">
          <source>Socket address</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc3995663128e17ee6612f2170efddabf747b3e5" translate="yes" xml:space="preserve">
          <source>Socket exceptions representing attempts to use network capabilities not available on the current system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="452372eeb0387d0d93663d0f90e0f67d0ae34c47" translate="yes" xml:space="preserve">
          <source>Socket exceptions representing invalid parameters specified by user code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24f9fbd1cb123eb31b8c7e406265a81a2168d44a" translate="yes" xml:space="preserve">
          <source>Socket exceptions representing network errors reported by the operating system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e0549d64e93c2d07276baf7aca9b8122b065e95" translate="yes" xml:space="preserve">
          <source>Socket level</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7998a3e9bd472f04be438831583ce6f4fe7061a" translate="yes" xml:space="preserve">
          <source>Socket primitives.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44977f379f1c02803857933034b64abf658f4fbb" translate="yes" xml:space="preserve">
          <source>Socket type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="200e47aefb645d55570b9cc40370ec89706a094e" translate="yes" xml:space="preserve">
          <source>SocketOption &lt;code&gt;option&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff46bba5c54945805bb53568f2ae4c6f75a3b842" translate="yes" xml:space="preserve">
          <source>SocketOptionLevel &lt;code&gt;level&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5e5da4b6822a0b28935dc3bb3d95c7d6ffa26c0" translate="yes" xml:space="preserve">
          <source>SocketType &lt;strong id=&quot;type&quot;&gt;type&lt;/strong&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b10ee51e8c38baa03729228da30dec6637ac0b9" translate="yes" xml:space="preserve">
          <source>Socks Service</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15525e37347abe0b41da5392a412d8ce47bdf1e3" translate="yes" xml:space="preserve">
          <source>Soft_Dotted</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc519c7ef2d6dbb18688fa3c1b77dabd858570f0" translate="yes" xml:space="preserve">
          <source>Solaris</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3acabda87c09b109fcfd90a3e22a077f501da3b4" translate="yes" xml:space="preserve">
          <source>Some allocators are</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ac13c35062d26e03101d27b31a8dee102eec364" translate="yes" xml:space="preserve">
          <source>Some characters have special meaning to the documentation processor, to avoid confusion it can be best to replace them with their corresponding character entities:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efd7b71edfe80f6677b8d065e2fd01384d0e475b" translate="yes" xml:space="preserve">
          <source>Some characters of pattern have a special meaning (they are</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb8672b4faeaa02b62bf4fe0e194df5ceef2a00e" translate="yes" xml:space="preserve">
          <source>Some declaration statements:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e87943a463ede46b4307b5d627466d47b421cfa7" translate="yes" xml:space="preserve">
          <source>Some existing approaches to this are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa40dcf62b29b9846c632304f090c6351c436be3" translate="yes" xml:space="preserve">
          <source>Some keywords, such as &lt;code&gt;const&lt;/code&gt;, can be used both as a type qualifier and a storage class. The distinction is determined by the syntax where it appears.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed503b617b69f0da3889f48e0d624a31dabdae45" translate="yes" xml:space="preserve">
          <source>Some kind of disk I/O error occurred</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e27c2e425edcb35a2e04ffac35785d33cb0f020e" translate="yes" xml:space="preserve">
          <source>Some new processors do not fit into the existing categories:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="914c9b26bb6f288e79f8ab53569ff3ffea5d44e4" translate="yes" xml:space="preserve">
          <source>Some of this information was extremely difficult to track down. Some of the documents below were found only in cached versions stored by search engines! This code relies on information found in:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2f2bf00506d387a3c7cba5757b7b93e76171a87" translate="yes" xml:space="preserve">
          <source>Some operating system objects, like COM/OLE/ActiveX for Win32, have specialized interfaces. D interfaces that are compatible with COM/OLE/ActiveX are called &lt;a href=&quot;#com-interfaces&quot;&gt;&lt;i&gt;COM Interfaces&lt;/i&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9038713ce308e45914e38a2746c656e145855947" translate="yes" xml:space="preserve">
          <source>Some operations on alias sequences are built into the language, such as &lt;code&gt;S[i]&lt;/code&gt;, which accesses the element at index &lt;code&gt;i&lt;/code&gt; in the sequence. &lt;code&gt;S[low .. high]&lt;/code&gt; returns a new alias sequence that is a slice of the old one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3b319356a2a2fff42fe207f611eb47fe757a9b9" translate="yes" xml:space="preserve">
          <source>Some protocols may need authentication in some cases. Use this function to provide credentials.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df6d093a2ec69fbff9f4e2626635370e092bd401" translate="yes" xml:space="preserve">
          <source>Some schedulers have a dispatching loop that must run if they are to work properly, so for the sake of consistency, when using a scheduler, start() must be called within main(). This yields control to the scheduler and will ensure that any spawned threads are executed in an expected manner.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="953db068b53726d46813fd816633f4e2c4aabab6" translate="yes" xml:space="preserve">
          <source>Some sections have specialized meanings and syntax.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac46e12419d38d3ba0b1ad6d915d6c01a578977b" translate="yes" xml:space="preserve">
          <source>Some sections of code may need to avoid using the garbage collector. The following constructs may allocate memory using the garbage collector:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a80c2d4fd4c5b652915ef2099d6ab425b4a7961" translate="yes" xml:space="preserve">
          <source>Some situations require that the algorithm must NOT ever change the relative ordering of equivalent elements (in the example above, only &lt;code&gt;[ &quot;abc&quot;, &quot;aBc&quot;, &quot;b&quot; ]&lt;/code&gt; would be the correct result). Such algorithms are called &lt;b&gt;stable&lt;/b&gt;. If the ordering algorithm may swap equivalent elements discretionarily, the ordering is called &lt;b&gt;unstable&lt;/b&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7556cd36bb8525d449148205d71486a914b9e16" translate="yes" xml:space="preserve">
          <source>SomethingTypeOf</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f94dd32cac37c8e304dad8021673ff4e774d4ce" translate="yes" xml:space="preserve">
          <source>Sometimes it is necessary to know whether the value was constructed or already exists. The &lt;code&gt;require&lt;/code&gt; function doesn't provide a boolean parameter to indicate whether the value was constructed but instead allows the construction via a function or delegate. This allows the use of any mechanism as demonstrated below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04414c4c86b2bb5b830e853fbe39c500d6d27a58" translate="yes" xml:space="preserve">
          <source>Sometimes it is necessary to perform different operations depending on whether a value already exists or needs to be constructed. The &lt;code&gt;update&lt;/code&gt; function provides a means to construct a new value via the &lt;code&gt;create&lt;/code&gt; delegate or update an existing value via the &lt;code&gt;update&lt;/code&gt; delegate. The &lt;code&gt;update&lt;/code&gt; operation avoids the need to perform multiple key lookups.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cece5954af286326ec4aa7f7ca0b6f71348791ab" translate="yes" xml:space="preserve">
          <source>Sometimes it is very useful to compute multiple aggregates in one pass. One advantage is that the computation is faster because the looping overhead is shared. That's why &lt;code&gt;cumulativeFold&lt;/code&gt; accepts multiple functions. If two or more functions are passed, &lt;code&gt;cumulativeFold&lt;/code&gt; returns a &lt;a href=&quot;std_typecons#Tuple&quot;&gt;&lt;code&gt;std.typecons.Tuple&lt;/code&gt;&lt;/a&gt; object with one member per passed-in function. The number of seeds must be correspondingly increased.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2a411eacffb6b94232bf4da1895842f36f88243" translate="yes" xml:space="preserve">
          <source>Sometimes it is very useful to compute multiple aggregates in one pass. One advantage is that the computation is faster because the looping overhead is shared. That's why &lt;code&gt;reduce&lt;/code&gt; accepts multiple functions. If two or more functions are passed, &lt;code&gt;reduce&lt;/code&gt; returns a &lt;a href=&quot;std_typecons#Tuple&quot;&gt;&lt;code&gt;std.typecons.Tuple&lt;/code&gt;&lt;/a&gt; object with one member per passed-in function. The number of seeds must be correspondingly increased.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c0e99a0caf74b949d08a0407afe4311153d538e" translate="yes" xml:space="preserve">
          <source>Sometimes option synonyms are desirable, e.g. &quot;--verbose&quot;, &quot;--loquacious&quot;, and &quot;--garrulous&quot; should have the same effect. Such alternate option names can be included in the option specification, using &quot;|&quot; as a separator:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e718397c55527786336acb2386af54bb50c8d635" translate="yes" xml:space="preserve">
          <source>Sora Sompeng</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c3d850f9c60834aad749bf8ac8a3f5f1f45da55" translate="yes" xml:space="preserve">
          <source>Sora_Sompeng</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8fa48453c4ce543dca830d634befb13e5a096fd" translate="yes" xml:space="preserve">
          <source>SortOutput &lt;code&gt;sorted&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89efbe64ae6c4fc36a4fc81713f91e95fa930e25" translate="yes" xml:space="preserve">
          <source>SortedRange!(Lhs, less) &lt;code&gt;lhs&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0b377d9ce46298cc7129f5925c761fadfd27750" translate="yes" xml:space="preserve">
          <source>SortedRange!(R, (a, b) =&amp;gt; binaryFun!less(unaryFun!transform(a), unaryFun!transform(b))) &lt;strong id=&quot;schwartzSort&quot;&gt;schwartzSort&lt;/strong&gt;(alias transform, alias less = &quot;a &amp;lt; b&quot;, SwapStrategy ss = SwapStrategy.unstable, R)(R r)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af6781b1c4e77a826dcc67686b527e11e8a587cb" translate="yes" xml:space="preserve">
          <source>SortedRange!(Range, less) &lt;strong id=&quot;sort&quot;&gt;sort&lt;/strong&gt;(alias less = &quot;a &amp;lt; b&quot;, SwapStrategy ss = SwapStrategy.unstable, Range)(Range r)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebf3b6d3f03e920793f01a7e9397b364f5e43a88" translate="yes" xml:space="preserve">
          <source>SortedRange!(RangeIndex, (a, b) =&amp;gt; binaryFun!less(*a, *b)) &lt;strong id=&quot;makeIndex&quot;&gt;makeIndex&lt;/strong&gt;(alias less = &quot;a &amp;lt; b&quot;, SwapStrategy ss = SwapStrategy.unstable, Range, RangeIndex)(Range r, RangeIndex index)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e3aae318568e41c0c045749a5a7ccc579e16959" translate="yes" xml:space="preserve">
          <source>Sortedness</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="378e9e163b7eecefadb4415cae533096e336c4ab" translate="yes" xml:space="preserve">
          <source>Sorting</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fb322fda24d7b9f660ddc43be0bc644f1434e9b" translate="yes" xml:space="preserve">
          <source>Sorts a random-access range according to the predicate &lt;code&gt;less&lt;/code&gt;. Performs &amp;Omicron;(&lt;code&gt;r.length * log(r.length)&lt;/code&gt;) evaluations of &lt;code&gt;less&lt;/code&gt;. If &lt;code&gt;less&lt;/code&gt; involves expensive computations on the sort key, it may be worthwhile to use &lt;a href=&quot;#schwartzSort&quot;&gt;&lt;code&gt;schwartzSort&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a17948345657e2b1bc567bbb5806c53a99b154f8" translate="yes" xml:space="preserve">
          <source>Sorts a range by multiple keys. The call &lt;code&gt;multiSort!(&quot;a.id &amp;lt; b.id&quot;, &quot;a.date &amp;gt; b.date&quot;)(r)&lt;/code&gt; sorts the range &lt;code&gt;r&lt;/code&gt; by &lt;code&gt;id&lt;/code&gt; ascending, and sorts elements that have the same &lt;code&gt;id&lt;/code&gt; by &lt;code&gt;date&lt;/code&gt; descending. Such a call is equivalent to &lt;code&gt;sort!&quot;a.id != b.id ? a.id &amp;lt; b.id : a.date &amp;gt; b.date&quot;(r)&lt;/code&gt;, but &lt;code&gt;multiSort&lt;/code&gt; is faster because it does fewer comparisons (in addition to being more convenient).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="010e469cdf28d8b8c51195f61110c3a8d6a54a8f" translate="yes" xml:space="preserve">
          <source>Sorts an &lt;a href=&quot;#AliasSeq&quot;&gt;&lt;code&gt;AliasSeq&lt;/code&gt;&lt;/a&gt; using &lt;code&gt;cmp&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcb9cc6435ec29ded693b4233ed7358f18596428" translate="yes" xml:space="preserve">
          <source>Sorts by multiple keys.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="737e3891e5ec30277bdde65d5f5e6f38f4631fc4" translate="yes" xml:space="preserve">
          <source>Sorts the &lt;code&gt;BitArray&lt;/code&gt;'s elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10eacfa7c3e4d90e48b22f36dd0d185464986256" translate="yes" xml:space="preserve">
          <source>Sorts the random-access range &lt;code&gt;chain(lhs, rhs)&lt;/code&gt; according to predicate &lt;code&gt;less&lt;/code&gt;. The left-hand side of the range &lt;code&gt;lhs&lt;/code&gt; is assumed to be already sorted; &lt;code&gt;rhs&lt;/code&gt; is assumed to be unsorted. The exact strategy chosen depends on the relative sizes of &lt;code&gt;lhs&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt;. Performs &amp;Omicron;(&lt;code&gt;lhs.length + rhs.length * log(rhs.length)&lt;/code&gt;) (best case) to &amp;Omicron;(&lt;code&gt;(lhs.length + rhs.length) * log(lhs.length + rhs.length)&lt;/code&gt;) (worst-case) evaluations of &lt;code&gt;swap&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="515e7fc1e438d69248608331b611fc91b48cf9b8" translate="yes" xml:space="preserve">
          <source>Sorts with the help of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Schwartzian_transform&quot;&gt;Schwartzian transform&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e17f8f5f33bf9ea60e3267efc028a543167bb09" translate="yes" xml:space="preserve">
          <source>Sorts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="510f0327ec680217e5cab8ab4329242405142b1e" translate="yes" xml:space="preserve">
          <source>Soundex algorithm.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6da13addb000b67d42a6d66391713819e634149f" translate="yes" xml:space="preserve">
          <source>Source</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9e743cd8bcbf4bf91c507c2a65b55f9be321d5a" translate="yes" xml:space="preserve">
          <source>Source &lt;code&gt;s&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4e61cbcbf5ff2c5b6ffcc2028aefa463fa355c4" translate="yes" xml:space="preserve">
          <source>Source &lt;code&gt;source&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc5bffca83e74b397c44137e808d6432b38c763a" translate="yes" xml:space="preserve">
          <source>Source &lt;code&gt;src&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="516e89309d994acf5d94c4a4907b3ff4a8e53a80" translate="yes" xml:space="preserve">
          <source>Source Of Data In A Query Result</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee8802351d6e22861e48df0e04ada50045ee5da1" translate="yes" xml:space="preserve">
          <source>Source Text</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e05fff63d01d2a6123b34a772f9ed76b5da154c" translate="yes" xml:space="preserve">
          <source>Source array of &lt;code&gt;bool&lt;/code&gt; values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45201944414648b622fc978af956181bbadb08b1" translate="yes" xml:space="preserve">
          <source>Source array. &lt;code&gt;v.length&lt;/code&gt; must be a multple of &lt;code&gt;size_t.sizeof&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="138406055069f0280f6b52003dba3f443ba41550" translate="yes" xml:space="preserve">
          <source>Source can be either a &lt;code&gt;class&lt;/code&gt; or a &lt;code&gt;struct&lt;/code&gt;, but it must</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e14700102f2c60349314b3eea474af03c2709a9c" translate="yes" xml:space="preserve">
          <source>Source path, using unix-style ('/') path separators</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f0dd57b83cbc4cdfb07df100e14cded58b6162c" translate="yes" xml:space="preserve">
          <source>Source string. Must be validly encoded. This is enforced by the function's in-contract.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="778b57a12b7199f40dc7d9ac836b4853bec2034f" translate="yes" xml:space="preserve">
          <source>Source text can be in one of the following formats:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28e332629163342518fe07b18fda9a77c9a91777" translate="yes" xml:space="preserve">
          <source>SourceRange &lt;code&gt;source&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="390fa1da9660ca55eab66ea3ac9707aa84cfd679" translate="yes" xml:space="preserve">
          <source>Space_Separator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="856b13bf74320e2b8cdfd631d910a0f338d7cc8d" translate="yes" xml:space="preserve">
          <source>Spacing Modifier Letters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e640732b094d855b06e4fa9714bc8cf7870b2ed0" translate="yes" xml:space="preserve">
          <source>Spacing_Mark</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c22353a54ecbd436faee1ef79811687b78c2d98c" translate="yes" xml:space="preserve">
          <source>SpanMode &lt;code&gt;mode&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47c2d54b27fd01565800a0bdc01fdb1664c4f907" translate="yes" xml:space="preserve">
          <source>Spans multiple ranges in sequence. The function &lt;code&gt;chain&lt;/code&gt; takes any number of ranges and returns a &lt;code&gt;Chain!(R1, R2,...)&lt;/code&gt; object. The ranges may be different, but they must have the same element type. The result is a range that offers the &lt;code&gt;front&lt;/code&gt;, &lt;code&gt;popFront&lt;/code&gt;, and &lt;code&gt;empty&lt;/code&gt; primitives. If all input ranges offer random access and &lt;code&gt;length&lt;/code&gt;, &lt;code&gt;Chain&lt;/code&gt; offers them as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="206e4f7efd0e1fea2f5fb21cc70bb903e7570a9f" translate="yes" xml:space="preserve">
          <source>Spans the directory in &lt;a href=&quot;https://en.wikipedia.org/wiki/Tree_traversal#Post-order&quot;&gt; depth-first &lt;b&gt;post&lt;/b&gt;-order&lt;/a&gt;, i.e. the content of any subdirectory is spanned before that subdirectory itself. Useful e.g. when recursively deleting files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef8079e8dd52b3f568727b30d4071b85b5727159" translate="yes" xml:space="preserve">
          <source>Spans the directory in &lt;a href=&quot;https://en.wikipedia.org/wiki/Tree_traversal#Pre-order&quot;&gt;depth-first &lt;b&gt;pre&lt;/b&gt;-order&lt;/a&gt;, i.e. the content of any subdirectory is spanned right after that subdirectory itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab31bc7af8469fe102ffebd53407ae0f695f2ff3" translate="yes" xml:space="preserve">
          <source>Spawn process in detached state. This removes the need in calling &lt;a href=&quot;#wait&quot;&gt;&lt;code&gt;wait&lt;/code&gt;&lt;/a&gt; to clean up the process resources.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3445d4022a5f355699a1cc9a82ba12862301444" translate="yes" xml:space="preserve">
          <source>Spawns a new process, optionally assigning it an arbitrary set of standard input, output, and error streams.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e0278b14855a154efdcf52e8c9b1b76685434af" translate="yes" xml:space="preserve">
          <source>Spawns the supplied op and starts the Scheduler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59d087dc75b0125829932eacfe32bedfeaf6b0f0" translate="yes" xml:space="preserve">
          <source>Special Array Types</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59f265692e8532f3f9f4cf8098a358d626fbb2eb" translate="yes" xml:space="preserve">
          <source>Special Cases</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28b4cba58ade296ded6a36069cd4c3e57b6eec9d" translate="yes" xml:space="preserve">
          <source>Special Keywords</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9436734ece2b31ee380f0745c673d6087d30a60f" translate="yes" xml:space="preserve">
          <source>Special Member Functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3b04afefcacbd4716b4d1f72fed36486e799a1f" translate="yes" xml:space="preserve">
          <source>Special Sections</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee1c5aa1f841b958c88bf1643c633ddfd44472b1" translate="yes" xml:space="preserve">
          <source>Special Symbols</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b87b7f9095725df9f3e853b9233ae5b255273d49" translate="yes" xml:space="preserve">
          <source>Special Token Sequences</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="620030712c6097118980c1dc48c87252681e558e" translate="yes" xml:space="preserve">
          <source>Special Tokens</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0eb3c8acb4db764904b42641ce80a2ca233031b8" translate="yes" xml:space="preserve">
          <source>Special Values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56064f3962c04c365c47471ff7513622d3ab0964" translate="yes" xml:space="preserve">
          <source>Special cases:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84f5bf5bcf93a3766794ac053754c2ed40203a71" translate="yes" xml:space="preserve">
          <source>Special enum names are used by the C++ name mangler to represent C++ types that are not basic D types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fc8e1612ce4dd8fb4b805edc6914c7d3bf6537d" translate="yes" xml:space="preserve">
          <source>Special information for class templates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce4782e62c163d377928a63581fc7fee244547a3" translate="yes" xml:space="preserve">
          <source>Special information for enums.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae69f0b218cc23056671162b9b0ed914e8438468" translate="yes" xml:space="preserve">
          <source>Special information for structs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18874d2b991e44f99b301b1bce8064ab614a4bf4" translate="yes" xml:space="preserve">
          <source>Special intervals</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="041bcd95a1e8f8a89aef417ce6a228ddb2bbce81" translate="yes" xml:space="preserve">
          <source>Special return values of &lt;a href=&quot;#ilogb&quot;&gt;&lt;code&gt;ilogb&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83fdebf17936ecf7c4e4908ce66eb6fc37165902" translate="yes" xml:space="preserve">
          <source>Special sections are processed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72ae70233248a8bdd323567afd75e11d341e8dbc" translate="yes" xml:space="preserve">
          <source>Special token sequences are processed by the lexical analyzer, may appear between any other tokens, and do not affect the syntax parsing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c33ad15e3328c28833961a0290de878695354d2c" translate="yes" xml:space="preserve">
          <source>Special value for precision, meaning the format specifier contained no explicit precision.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="996395a86dc7aca1dd4b31b71f0290f471e84dda" translate="yes" xml:space="preserve">
          <source>Special value for width and precision. &lt;code&gt;DYNAMIC&lt;/code&gt; width or precision means that they were specified with &lt;code&gt;'*'&lt;/code&gt; in the format string and are passed at runtime through the varargs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c9f97d70a09166ac146bc571e66fb10f8f02fcd" translate="yes" xml:space="preserve">
          <source>Special value returned by &lt;code&gt;safeDecode&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0f090c0f44aceac36d2c9eb988dd8280d3ee8e3" translate="yes" xml:space="preserve">
          <source>Specialization</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9aae93f8101b4a3af167727c83378fe5a30fbb5" translate="yes" xml:space="preserve">
          <source>Specialized &lt;a href=&quot;declaration#Vector&quot;&gt;&lt;i&gt;Vector&lt;/i&gt;&lt;/a&gt; types provide access to them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adc3296dff7bc5290f96150d469f88acc0459b51" translate="yes" xml:space="preserve">
          <source>Specials</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31b80ff7eb5064ffc980e34d6af2c2e862027b50" translate="yes" xml:space="preserve">
          <source>Specific symbols can be exclusively imported from a module and bound into the current namespace:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdceac3c34c6c4eead856667fb45b9ee47e0b8a0" translate="yes" xml:space="preserve">
          <source>Specifically switch on or off the FTP engine's use of the EPRT command ( it also disables the LPRT attempt). By default, those ones will always be attempted before the good old traditional PORT command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c26f1aae33d457b623dbb904b3d40c55e90c3948" translate="yes" xml:space="preserve">
          <source>Specifically switch on or off the FTP engine's use of the EPSV command. By default, that one will always be attempted before the more traditional PASV command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ef56146924e94cc27718242ea499c8e077d8910" translate="yes" xml:space="preserve">
          <source>Specifically unlike &lt;code&gt;codepointSetTrie&lt;/code&gt; it's allows creating mappings of &lt;code&gt;dchar&lt;/code&gt; to an arbitrary type &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ccf5d25dfedda0749e3abb6685b56a5fed8013a" translate="yes" xml:space="preserve">
          <source>Specification</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e37a1da7ca02ebb30242bc819d9a5df4bf509fe3" translate="yes" xml:space="preserve">
          <source>Specified file stream to upload from (use as input):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="525b9a39f4f493f05cd5bc27f8f401987269f108" translate="yes" xml:space="preserve">
          <source>Specifies a read (shared) lock. A read lock denies all processes write access to the specified region of the file, including the process that first locks the region. All processes can read the locked region. Multiple simultaneous read locks are allowed, as long as there are no exclusive locks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af1d78f318c886769b70ae50ebc04eb286a9282e" translate="yes" xml:space="preserve">
          <source>Specifies a read/write (exclusive) lock. A read/write lock denies all other processes both read and write access to the locked file region. If a segment has an exclusive lock, it may not have any shared locks or other exclusive locks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdce8ed61e99c9378dba3cff00bbcde90f4fedd8" translate="yes" xml:space="preserve">
          <source>Specifies a socket option:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1775a40d61643937004883af2dc4b73816092eb" translate="yes" xml:space="preserve">
          <source>Specifies the alignment of:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7747cdadbb9a9549bde6542049b8bdeeec06497a" translate="yes" xml:space="preserve">
          <source>Specifies the current version of the declaration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb15bfc9472aaba219ea08a843787e05ec32a704" translate="yes" xml:space="preserve">
          <source>Specifies the date of the current revision. The date should be in a form parseable by std.date.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7a51b0f04077bc80e03ae9266efb2d78a8569da" translate="yes" xml:space="preserve">
          <source>Specifies the memory ordering semantics of an atomic operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="255b8caf82a183f6141fcc6a07243d39fd97b963" translate="yes" xml:space="preserve">
          <source>Specifies the minimum field width. If the width is a &lt;b&gt;*&lt;/b&gt;, an additional argument of type &lt;b&gt;int&lt;/b&gt;, preceding the actual argument, is taken as the width. If the width is negative, it is as if the &lt;b&gt;-&lt;/b&gt; was given as a</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c1489badebc09bd2958dda4953cf3af8bf425bb" translate="yes" xml:space="preserve">
          <source>Specifies whether the output of certain algorithm is desired in sorted format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64b9e7d33ee4cf01936b0e7c9ecaf8b626608618" translate="yes" xml:space="preserve">
          <source>Specify data to post when not using the onSend callback, with user-specified Content-Type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a70437c98d99de0a8ba47ba5fb5b2be915df9a4" translate="yes" xml:space="preserve">
          <source>Specify repetition of other elements</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c395071c3f3397e4ec1f24c658891a7f89fb094f" translate="yes" xml:space="preserve">
          <source>Specify the activation key for a CEROD database. Unless activated, none of the CEROD routines will work.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63abc174f98e825489cd92c814f92aea776d3396" translate="yes" xml:space="preserve">
          <source>Specify the activation key for a SEE database. Unless activated, none of the SEE routines will work.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="968326a04c4068ca185f58fd5cb96f766dcd1b73" translate="yes" xml:space="preserve">
          <source>Specify this flag when calling &lt;code&gt;execute&lt;/code&gt; or &lt;code&gt;executeShell&lt;/code&gt; to cause invoked processes' stderr stream to be sent to &lt;a href=&quot;std_stdio#stderr&quot;&gt;&lt;code&gt; std.stdio.stderr&lt;/code&gt;&lt;/a&gt;, and only capture and return standard output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="905a02fdeed90594d29f54360a8abd6e36db1791" translate="yes" xml:space="preserve">
          <source>Specify whether to read the user+password from the .netrc or the URL. This must be one of the CURL_NETRC_* enums below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c39b43647c4a2969f3f88e81b6072b13de223e74" translate="yes" xml:space="preserve">
          <source>Specify which HTTP version to use! This must be set to one of the CURL_HTTP_VERSION* enums set below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e6fa76f10b08dcef7ad1ed51c4cbadf214086d2" translate="yes" xml:space="preserve">
          <source>Specify which SSL ciphers to use</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62c1a3c188227f19d23cb5aafc5a54f623a10b56" translate="yes" xml:space="preserve">
          <source>Specify which file name to write all known cookies in after completed operation. Set file name to &quot;-&quot; (dash) to make it go to stdout.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb02b987936a927de037b940f4485b8bf5e8b590" translate="yes" xml:space="preserve">
          <source>Specifying &lt;code&gt;ErrorLevel&lt;/code&gt; as &lt;a href=&quot;#Malformed.ignore&quot;&gt;&lt;code&gt;Malformed.ignore&lt;/code&gt;&lt;/a&gt; will lift restrictions on the format. This example shows that an exception is not thrown when finding a quote in a field not quoted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04f98db35893027ab57a47f6085299bc506ad44f" translate="yes" xml:space="preserve">
          <source>Specifying data to post when not using the onSend callback.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b4379a60050b3f8c0955159ba45aa1d56de9268" translate="yes" xml:space="preserve">
          <source>Specs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc8230b4119ad4b994db2324d71f4e0ae7ad932c" translate="yes" xml:space="preserve">
          <source>Split</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="360d8e949caaa7982a0d2e9eca4eb034ea271b58" translate="yes" xml:space="preserve">
          <source>Split &lt;code&gt;s&lt;/code&gt; into an array of lines according to the unicode standard using &lt;code&gt;'\r'&lt;/code&gt;, &lt;code&gt;'\n'&lt;/code&gt;, &lt;code&gt;&quot;\r\n&quot;&lt;/code&gt;, &lt;a href=&quot;std_uni#lineSep&quot;&gt;&lt;code&gt;std.uni.lineSep&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;std_uni#paraSep&quot;&gt;&lt;code&gt;std.uni.paraSep&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;U+0085&lt;/code&gt; (NEL), &lt;code&gt;'\v'&lt;/code&gt; and &lt;code&gt;'\f'&lt;/code&gt; as delimiters. If &lt;code&gt;keepTerm&lt;/code&gt; is set to &lt;code&gt;KeepTerminator.yes&lt;/code&gt;, then the delimiter is included in the strings returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fad473c9a2f3f670a1706f49e59513b9379eb382" translate="yes" xml:space="preserve">
          <source>Split an array or slicable range of characters into a range of lines using &lt;code&gt;'\r'&lt;/code&gt;, &lt;code&gt;'\n'&lt;/code&gt;, &lt;code&gt;'\v'&lt;/code&gt;, &lt;code&gt;'\f'&lt;/code&gt;, &lt;code&gt;&quot;\r\n&quot;&lt;/code&gt;, &lt;a href=&quot;std_uni#lineSep&quot;&gt;&lt;code&gt;std.uni.lineSep&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;std_uni#paraSep&quot;&gt;&lt;code&gt;std.uni.paraSep&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;'\u0085'&lt;/code&gt; (NEL) as delimiters. If &lt;code&gt;keepTerm&lt;/code&gt; is set to &lt;code&gt;Yes.keepTerminator&lt;/code&gt;, then the delimiter is included in the slices returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c84755753e2d8a49b06006de7bd267ce42e601ed" translate="yes" xml:space="preserve">
          <source>Split on a pattern, but keep the matches in the resulting range</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe0521abbfb2abd85894739d8e4cf2ad14871568" translate="yes" xml:space="preserve">
          <source>Split path (such as that returned by &lt;code&gt;getenv(&quot;PATH&quot;)&lt;/code&gt;) into pieces, each piece is mem.xmalloc'd Handle double quotes and ~. Pass the pieces to sink()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51f403edc8c56d5d856aeb95f2fe3448e4f7b9c3" translate="yes" xml:space="preserve">
          <source>Splits a string &lt;code&gt;r&lt;/code&gt; using a regular expression &lt;code&gt;pat&lt;/code&gt; as a separator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cdfe0b5aaf9a7e6b995fade295bae58e57f59c7" translate="yes" xml:space="preserve">
          <source>Splits out the Duration into the given units.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="566e19f5fa99b44bd32c38d5ba57bcb0f61d85be" translate="yes" xml:space="preserve">
          <source>Splits the array at &lt;code&gt;index&lt;/code&gt; and expands it to make room for &lt;code&gt;length&lt;/code&gt; elements by shifting everything past &lt;code&gt;index&lt;/code&gt; to the right.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cae03bfa7b1021de6817bf5b29b1271efd7aff67" translate="yes" xml:space="preserve">
          <source>Splitter returns bidirectional ranges if the delimiter is a single element</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95bf5feb3a78f24ca6df8764afa83bc61a38cf30" translate="yes" xml:space="preserve">
          <source>Splitter!(keepSeparators, Range, RegEx) &lt;strong id=&quot;splitter&quot;&gt;splitter&lt;/strong&gt;(Flag!&quot;keepSeparators&quot; keepSeparators = No.keepSeparators, Range, RegEx)(Range r, RegEx pat)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6f2b3a7436dd77a274d65abac7245f222d461bd" translate="yes" xml:space="preserve">
          <source>Splitting and coalescing should be implemented if &lt;code&gt;ParentAllocator&lt;/code&gt; does not defined &lt;code&gt;deallocate&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9db771de1c969717dfba162eccdf73a8f611fc73" translate="yes" xml:space="preserve">
          <source>Splitting by word lazily</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c8bb41f321042de6da904e0d9e42ab11e9e2b42" translate="yes" xml:space="preserve">
          <source>Squaring is optimized independently of multiplication</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de71fa90b02db879a7b633e82faaad9423d773ea" translate="yes" xml:space="preserve">
          <source>Src &lt;code&gt;src&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1f1eb489093453e5a5fd5174a0b298e65851e4f" translate="yes" xml:space="preserve">
          <source>Src[] &lt;code&gt;s&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b34bff947ff0b311d005a8b56681dfb72350e00" translate="yes" xml:space="preserve">
          <source>Stable sorting requires &lt;code&gt;hasAssignableElements!Range&lt;/code&gt; to be true.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="055f393b79270a5d6f47eadccb1bc73ba1d8693d" translate="yes" xml:space="preserve">
          <source>Stable topN has not been implemented yet.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4727429791feed2a8b4596d76c2c7cab540b7fa" translate="yes" xml:space="preserve">
          <source>Stack Variables</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2604e128ab59cdef4c9ae53ce6aced71abf3ae32" translate="yes" xml:space="preserve">
          <source>Stack variables (variables local to a function and allocated on the stack) are accessed via the name of the variable indexed by EBP:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5b24dd7b71218cfa454a2135cf59c9570f9d40e" translate="yes" xml:space="preserve">
          <source>Standard I/O functions that extend &lt;b&gt;core.stdc.stdio&lt;/b&gt;. &lt;b&gt;core.stdc.stdio&lt;/b&gt; is publically imported when importing &lt;b&gt;std.stdio&lt;/b&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cb415aad6cbaa9c4fa7be73745a3aa640613244" translate="yes" xml:space="preserve">
          <source>Standard Sections</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1da483c1f582370d9ee30807abf8a59ea1f90a15" translate="yes" xml:space="preserve">
          <source>Standard allocator API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70205660a543a0bf44da100742e7a872afa073c0" translate="yes" xml:space="preserve">
          <source>Standard allocator methods per the semantics defined above. The &lt;code&gt; deallocate&lt;/code&gt; and &lt;code&gt;reallocate&lt;/code&gt; methods are &lt;code&gt;@system&lt;/code&gt; because they may move memory around, leaving dangling pointers in user code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dd2390234b811f72ba26a328eb6972faa1e3f1c" translate="yes" xml:space="preserve">
          <source>Standard allocator methods per the semantics defined above. The &lt;code&gt;deallocate&lt;/code&gt; and &lt;code&gt;reallocate&lt;/code&gt; methods are &lt;code&gt;@system&lt;/code&gt; because they may move memory around, leaving dangling pointers in user code. Somewhat paradoxically, &lt;code&gt;malloc&lt;/code&gt; is &lt;code&gt;@safe&lt;/code&gt; but that's only useful to safe programs that can afford to leak memory allocated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d9d4323b17ec624c5cf2f317f08e4dd4effedb9" translate="yes" xml:space="preserve">
          <source>Standard allocator methods. Each is defined if and only if the parent allocator defines the homonym method (except for &lt;code&gt;goodAllocSize&lt;/code&gt;, which may use the global default). Also, the methods will be &lt;code&gt; shared&lt;/code&gt; if the parent allocator defines them as such.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba18977eae770e4222f643451cf6928c17a00098" translate="yes" xml:space="preserve">
          <source>Standard allocator primitives.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1828f0f6b5bb20f77a7f0240b815bb6201f4f4e" translate="yes" xml:space="preserve">
          <source>Standard constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c7697d218967f04606afe49503268bca4b3cbc4" translate="yes" xml:space="preserve">
          <source>Standard exception constructors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c16adc60a1f93372d0c260c0d2b67c097d83e33a" translate="yes" xml:space="preserve">
          <source>Standard extending</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b47c14030ad2a0a1d9f8d5ca39bd52cc43cba336" translate="yes" xml:space="preserve">
          <source>Standard primitives.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5affd6446b7e85acdc88935c5fa44788beca97b" translate="yes" xml:space="preserve">
          <source>Standard streams</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="762b3c22cec24239bff8c6533ee09eab8222cdf7" translate="yes" xml:space="preserve">
          <source>Standards:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7c030e5d3e4d2b2e63a9cbb806f1899585057c8" translate="yes" xml:space="preserve">
          <source>Start an unordered list with a hypen (&lt;code&gt;-&lt;/code&gt;), an asterisk (&lt;code&gt;*&lt;/code&gt;) or a plus (&lt;code&gt;+&lt;/code&gt;). Subsequent items in the same list must also start with the same symbol:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e32aafc795b9c675b5e11ba0ec7d5cfc1c8b4bef" translate="yes" xml:space="preserve">
          <source>Start index of tparams to limit the tested parameters. If it's nonzero, tparams[0..iStart] will be excluded from the test target.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98aeca21287df45ea5049be5eceb135069af9f70" translate="yes" xml:space="preserve">
          <source>Start matching &lt;code&gt;input&lt;/code&gt; to regex pattern &lt;code&gt;re&lt;/code&gt;, using Thompson NFA matching scheme.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57da264632de430d9a0c79422f7a111a8d59fa5f" translate="yes" xml:space="preserve">
          <source>Start matching of &lt;code&gt;input&lt;/code&gt; to regex pattern &lt;code&gt;re&lt;/code&gt;, using traditional &lt;a href=&quot;https://en.wikipedia.org/wiki/Backtracking&quot;&gt; backtracking&lt;/a&gt; matching scheme.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28c679ae949db00e05f8d762ae2bd34cf5918077" translate="yes" xml:space="preserve">
          <source>Start of heading</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7168ff93d44381888612d6584de11b0bc64d220d" translate="yes" xml:space="preserve">
          <source>Start of text</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1326c593f8c25aa297c3b87a0d8022546f8aab49" translate="yes" xml:space="preserve">
          <source>Start up the browser and set it to viewing the page at url.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3b1fa51ee2efeb19f57e4b3faa6c91710fc8edc" translate="yes" xml:space="preserve">
          <source>Starting and manipulating processes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6af658e314af4612cee232c762d06b035d3ba04" translate="yes" xml:space="preserve">
          <source>Starts a new process, creating pipes to redirect its standard input, output and/or error streams.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4832a9c8b64020a1460e9ca2172c5eccf89dcf84" translate="yes" xml:space="preserve">
          <source>Starts fn(args) in a logical thread and will receive a LinkTerminated message when the operation terminates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33ac9071b8aa062b5dd5c035305104ac2cbe3590" translate="yes" xml:space="preserve">
          <source>Starts fn(args) in a new logical thread.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d82bc6416c6ed05f8ca9cc38babd372d2125258" translate="yes" xml:space="preserve">
          <source>Starts the StopWatch.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5a30effba89a2ad552acab440cfa9bea719582a" translate="yes" xml:space="preserve">
          <source>Starts the stop watch.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f046094592ab35e6ce7b007455ecf2673ad345c5" translate="yes" xml:space="preserve">
          <source>Starts the thread and invokes the function or delegate passed upon construction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a72ca256dc49e55a1a57b9a727fbde9834c9a3f7" translate="yes" xml:space="preserve">
          <source>Statement</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a97500ca918fe5d1ea491a9281b5fd8e046799e0" translate="yes" xml:space="preserve">
          <source>Statement &lt;code&gt;s&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6da113b7c951fe8b844d6d60ee54a66407e0171e" translate="yes" xml:space="preserve">
          <source>Statement &lt;strong id=&quot;_body&quot;&gt;_body&lt;/strong&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fb2e1ca5541609210a25b997d855a898c2652d8" translate="yes" xml:space="preserve">
          <source>Statement &lt;strong id=&quot;asmSemantic&quot;&gt;asmSemantic&lt;/strong&gt;(AsmStatement s, Scope* sc);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5be067fa1640b77a237680b9a0df841a651ecf2a" translate="yes" xml:space="preserve">
          <source>Statement &lt;strong id=&quot;fbody&quot;&gt;fbody&lt;/strong&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="025fc6bd1f43c8a93900c6cc3cd0c81ccde15051" translate="yes" xml:space="preserve">
          <source>Statement &lt;strong id=&quot;fensure&quot;&gt;fensure&lt;/strong&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b322f168084ee1b56e5f53a0de8332c610952a7c" translate="yes" xml:space="preserve">
          <source>Statement &lt;strong id=&quot;frequire&quot;&gt;frequire&lt;/strong&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a4aa88e52cc848709f9889ebac28cfa15fdb079" translate="yes" xml:space="preserve">
          <source>Statement &lt;strong id=&quot;gccAsmSemantic&quot;&gt;gccAsmSemantic&lt;/strong&gt;(GccAsmStatement s, Scope* sc);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d20ea6307330199d9533bc27b2a23b78febc0909" translate="yes" xml:space="preserve">
          <source>Statement &lt;strong id=&quot;inlineAsmSemantic&quot;&gt;inlineAsmSemantic&lt;/strong&gt;(InlineAsmStatement s, Scope* sc);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbe4661211773a30a1e4ecf6e6bdb0d254260fa7" translate="yes" xml:space="preserve">
          <source>Statement &lt;strong id=&quot;scopeCode&quot;&gt;scopeCode&lt;/strong&gt;(Scope* sc, Statement* sentry, Statement* sexception, Statement* sfinally);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ce3d5a037d182f8eb0d12a69608af57cbcdf4dd" translate="yes" xml:space="preserve">
          <source>Statement &lt;strong id=&quot;statement&quot;&gt;statement&lt;/strong&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c54adb6079cea697e3943466fa977ab7593fdeae" translate="yes" xml:space="preserve">
          <source>Statement &lt;strong id=&quot;tryBody&quot;&gt;tryBody&lt;/strong&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6999236455cc9ecbb4a0a9317face44d64df2ec1" translate="yes" xml:space="preserve">
          <source>Statement whose symbol table contains foreach index variables in a local scope and forwards other members to the parent scope. This wraps a statement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="006768d00ec771fb31ed78197e78df72c879c678" translate="yes" xml:space="preserve">
          <source>Statement* &lt;code&gt;sentry&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="199be484ddbd3480c4f0ae2652b06b6c800a1c50" translate="yes" xml:space="preserve">
          <source>Statement* &lt;code&gt;sexception&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d172d2804bcfea5d3e872aea2f4e1189e169e99" translate="yes" xml:space="preserve">
          <source>Statement* &lt;code&gt;sfinally&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d84a93b59441ebc43795d4d84babf255db6034d0" translate="yes" xml:space="preserve">
          <source>Statement[] &lt;code&gt;sts&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5653cebc057d4791ce07031ad9286e729de6d691" translate="yes" xml:space="preserve">
          <source>Statements</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e284f22088078c2832670c42f05f330939cd93ec" translate="yes" xml:space="preserve">
          <source>Statements can be labeled. A label is an identifier that precedes a statement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73a4c36eb953f99c2bb9d51a6d011342a5b22c37" translate="yes" xml:space="preserve">
          <source>Statements* &lt;code&gt;statements&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80456b665cc583291a429ed37b6ac28aefafdff1" translate="yes" xml:space="preserve">
          <source>Statements* &lt;strong id=&quot;flatten&quot;&gt;flatten&lt;/strong&gt;(Scope* sc);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6e8c83d2895f71038326d8d0cf9202bdc6e5851" translate="yes" xml:space="preserve">
          <source>Statements* &lt;strong id=&quot;frequires&quot;&gt;frequires&lt;/strong&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74a9598ee294d5281fbf15b964230d8af57c4a10" translate="yes" xml:space="preserve">
          <source>Static Array Properties</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15647ceeb119f2d5665d0951b50d239bc5d46d02" translate="yes" xml:space="preserve">
          <source>Static Arrays</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d158928850ffa69f6fefaaf67f49d29947280026" translate="yes" xml:space="preserve">
          <source>Static Assert</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c3316689f8a190f568dee213777d3e29d568880" translate="yes" xml:space="preserve">
          <source>Static Construction and Destruction</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a975794cbb1d75cf396cca7187daaf16b8bf2775" translate="yes" xml:space="preserve">
          <source>Static Constructors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f8e4a96211dc722c10b009857cb572e478130f5" translate="yes" xml:space="preserve">
          <source>Static Destructors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7516ec546e3b5ea587b573b6c269f9c061c5e887" translate="yes" xml:space="preserve">
          <source>Static Foreach</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1618e6112125d97a8e13dadae847f2be37c593ed" translate="yes" xml:space="preserve">
          <source>Static If Condition</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97ff881acf4ad64663be23533fa00c0e7fc62480" translate="yes" xml:space="preserve">
          <source>Static Imports</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="163e8482c10b1cf61292aa6ada5a302109de7d10" translate="yes" xml:space="preserve">
          <source>Static Initialization of AAs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b2ab0b7fb680b3888fa591757e2cec7aaace7bd" translate="yes" xml:space="preserve">
          <source>Static Initialization of Statically Allocated Arrays</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87e6aed00b6ca0509c6dd340312d2d8388956be4" translate="yes" xml:space="preserve">
          <source>Static Initialization of Structs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b16831889cbf92c4f937b425c264db1b3f186aae" translate="yes" xml:space="preserve">
          <source>Static Initialization of Unions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f25a170113fc5ecb6874b67b08f49e180a881998" translate="yes" xml:space="preserve">
          <source>Static array contents are initialized to the default initializer for the array element type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30561fc6678405d13f7bfbf10a56a3d754a1efd5" translate="yes" xml:space="preserve">
          <source>Static array properties are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56baec7fedf12f6d8bbe49933d7b6bebbad5e151" translate="yes" xml:space="preserve">
          <source>Static array, one with a fixed dimension</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fc6d78bfd1b3cbec3f64c6df4199384d6e606cb" translate="yes" xml:space="preserve">
          <source>Static arrays</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c9438ce1d763844a6c0cb60e38b2a1704af1348" translate="yes" xml:space="preserve">
          <source>Static arrays are value types. They are passed to and returned by functions by value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b32c5c44a169ca1c2e0e3e4245303d820d2ec63c" translate="yes" xml:space="preserve">
          <source>Static arrays have a length fixed at compile time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f25ec723747f6150b9236ee6a61873d5dd4a3f5e" translate="yes" xml:space="preserve">
          <source>Static arrays of characters (like &lt;code&gt;char[80]&lt;/code&gt;) are not considered built-in string types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2811fdfd5207ed142b4743a1dc966a0865b0b6f2" translate="yes" xml:space="preserve">
          <source>Static arrays with 0 elements are useful as the last member of a variable length struct, or as the degenerate case of a template expansion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ef5ae5c00c4ef36dbdbadd531bc91c83d90a2f2" translate="yes" xml:space="preserve">
          <source>Static constructors and static destructors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e4601d7883dcc21f948fb92abf82e16fa71d820" translate="yes" xml:space="preserve">
          <source>Static constructors are executed to initialize a module's state. Static destructors terminate a module's state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9827f28fd8cdc37153193c3c464dfb2fcdf0d6e" translate="yes" xml:space="preserve">
          <source>Static constructors are used to initialize static class members with values that cannot be computed at compile time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd0337c7df44699fee6f0bbb631bfd1895bcfd64" translate="yes" xml:space="preserve">
          <source>Static constructors have empty parameter lists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="467f2fb522bf80510a1e05ee37ec86da56f0ec14" translate="yes" xml:space="preserve">
          <source>Static constructors in other languages are built implicitly by using member initializers that can't be computed at compile time. The trouble with this stems from not having good control over exactly when the code is executed, for example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cab35a4bed3714e7a0358d3c749fc09a8f7f4028" translate="yes" xml:space="preserve">
          <source>Static constructors within a module are executed in the lexical order in which they appear. All the static constructors for modules that are directly or indirectly imported are executed before the static constructors for the importer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0846a2a92ec899a5b138e5a4d93861d5905677b" translate="yes" xml:space="preserve">
          <source>Static data has one instance per thread, not one per object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bec39e789c7c691d1da11d54cdde92698b9c346d" translate="yes" xml:space="preserve">
          <source>Static does not have the additional C meaning of being local to a file. Use the &lt;code&gt;private&lt;/code&gt; attribute in D to achieve that. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8bd6252632f6eeb347f4ca4165223a7c99fd656" translate="yes" xml:space="preserve">
          <source>Static foreach at declaration scope, like: static foreach (i; [0, 1, 2]){ }</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4ee91726f24dc08033e7373022fd07a74383ee1" translate="yes" xml:space="preserve">
          <source>Static functions are never virtual.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94281938c02ddfc796472644dded4b0c21620dc7" translate="yes" xml:space="preserve">
          <source>Static functions with &lt;code&gt;Objective-C&lt;/code&gt; linkage are overridable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bc198852b573eacaf151b9fb3da242f9b76b0a6" translate="yes" xml:space="preserve">
          <source>Static initalizations are supplied by a list of array element values enclosed in [ ]. The values can be optionally preceded by an index and a :. If an index is not supplied, it is set to the previous index plus 1, or 0 if it is the first value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91367e63fc1be0d90fb813c5cedbe3bfe19d788c" translate="yes" xml:space="preserve">
          <source>Static member functions with the Objective-C linkage are placed in the hidden nested metaclass as non-static member functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ddd921cba26f4514b3ea97e5dac73d83f2ca5b7" translate="yes" xml:space="preserve">
          <source>Static module constructors or destructors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c36dc90dddd0f35d93900fb5bfe26c7b85dc33a5" translate="yes" xml:space="preserve">
          <source>Static nested functions cannot access any stack variables of any lexically enclosing function, but can access static variables. This is analogous to how static member functions behave.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2975f5b918a004b322941ad463d778441a497b5e" translate="yes" xml:space="preserve">
          <source>Static opCall</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="342cc310e95183b98666b467473f553dfc15a4fb" translate="yes" xml:space="preserve">
          <source>Static tuple composed of the members of the enumerated type &lt;code&gt;E&lt;/code&gt;. The members are arranged in the same order as declared in &lt;code&gt;E&lt;/code&gt;. The name of the enum can be found by querying the compiler for the name of the identifier, i.e. &lt;code&gt;__traits(identifier, EnumMembers!MyEnum[i])&lt;/code&gt;. For enumerations with unique values, &lt;a href=&quot;std_conv#to&quot;&gt;&lt;code&gt;std.conv.to&lt;/code&gt;&lt;/a&gt; can also be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78aed6fcd980ff86c24f860dd30a33b8c7882e77" translate="yes" xml:space="preserve">
          <source>Static-size arrays are formatted as dynamic arrays.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="372b0a930805a709b72055ebf86eacc1841ca1e0" translate="yes" xml:space="preserve">
          <source>StaticAssert</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f73fcb62a0dab7308fe0c76045581fa93a91ad1b" translate="yes" xml:space="preserve">
          <source>StaticForeach &lt;strong id=&quot;sfe&quot;&gt;sfe&lt;/strong&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eff5d60c5edfbba5c66ce173b90a1dd7cb63fa84" translate="yes" xml:space="preserve">
          <source>StaticIfCondition</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78c0adbad4c16317b58ea05b2326db87118e115b" translate="yes" xml:space="preserve">
          <source>StaticIfConditional</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e87ba2c73dc87b12f6b01b151d762c628ed3ccdd" translate="yes" xml:space="preserve">
          <source>StaticIfStatement</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a40c288ab212afa0fbd024990cf2f54fc96b80ee" translate="yes" xml:space="preserve">
          <source>StaticRegex object for faster matching.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1f3f745057346aedd9824db0b05ab7800d5fa80" translate="yes" xml:space="preserve">
          <source>StaticRegex!char (wchar/dchar) that contains a pattern in the form of compiled native machine code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bae7d5be70820ed56467bd9a63744e23b47bd711" translate="yes" xml:space="preserve">
          <source>Status</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df542e628beff2a0b73ed1e479f1091511d9cd6a" translate="yes" xml:space="preserve">
          <source>Status Of A Dynamic String</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f51e9856d7bd11fbe182005185d52310b5218913" translate="yes" xml:space="preserve">
          <source>Status registers are not saved by the current implementations. This means floating point exception status bits (overflow, divide by 0), rounding mode and similar stuff is set per-thread, not per Fiber!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59a71977661d7b7da36393e7060027aa476ae0c5" translate="yes" xml:space="preserve">
          <source>StdLoggerDisableCritical</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="973cf1b738987ac29ea017d462f4bfa00b1fc8e0" translate="yes" xml:space="preserve">
          <source>StdLoggerDisableError</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3253001b1433d6180bf3b677a243d81b9296c74" translate="yes" xml:space="preserve">
          <source>StdLoggerDisableFatal</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd436319a9f365b57d6be082212f5fbeef1390c7" translate="yes" xml:space="preserve">
          <source>StdLoggerDisableInfo</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9c89ba179777b5c375ecc5b27691f7bff704c99" translate="yes" xml:space="preserve">
          <source>StdLoggerDisableTrace</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cce55d5caec86db598f6c2ee595188242b1b6a6b" translate="yes" xml:space="preserve">
          <source>StdLoggerDisableWarning</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50d770fcc780a4c1aabe2bc88044a890369c7c5d" translate="yes" xml:space="preserve">
          <source>Stephen L. Moshier (original C code). Conversion to D by Don Clugston</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee22bb905db92474a202e34a8275a148462c914f" translate="yes" xml:space="preserve">
          <source>Steps between the windows (by default 1)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50b3f2eb11dc1608c8cec0a02812bffb2ca2e281" translate="yes" xml:space="preserve">
          <source>Steven Schveighoffer, &lt;a href=&quot;http://erdani.com&quot;&gt;Andrei Alexandrescu&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98e9b57b1ae7dca36873361aac1c6696e21f6d59" translate="yes" xml:space="preserve">
          <source>Stewart Gordon, Walter Bright</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46d1c1069ad597d19ffe1f289c664dac37c4f540" translate="yes" xml:space="preserve">
          <source>Stop and invalidate this curl instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51dfcf3715d3ef9a4f84b705d96f9e5e81e9f616" translate="yes" xml:space="preserve">
          <source>Stop and invalidate this instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf054b5d75f22791cf01974e1490df4ccaff0ec0" translate="yes" xml:space="preserve">
          <source>Stop at first argument that does not look like an option</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1662e7d0de3c5d0292671734870aefe66c5e9d6a" translate="yes" xml:space="preserve">
          <source>Stop when the longest range is exhausted</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b9625c3bd97fd27b55f644441bbff9b1699d89d" translate="yes" xml:space="preserve">
          <source>Stop when the shortest range is exhausted</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e57c5d4b93f1cc57d9f749c5609e18a57a07e060" translate="yes" xml:space="preserve">
          <source>StopWatch is used to measure time just like one would do with a physical stopwatch, including stopping, restarting, and/or resetting it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2bb227469a0f058cce21dd1c2b8bd0d1d6a7bbf" translate="yes" xml:space="preserve">
          <source>Stopping all other threads than the thread currently trying to allocate GC memory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1245d24c80ce54ad452a5ee34a0c782703eb4ad" translate="yes" xml:space="preserve">
          <source>StoppingPolicy &lt;code&gt;sp&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5889343e4a4cab84818af31119d6b47a01635cd" translate="yes" xml:space="preserve">
          <source>Stops the StopWatch.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51db97173eb8b411ed12d7cda978857405c2da99" translate="yes" xml:space="preserve">
          <source>Stops the stop watch.</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
