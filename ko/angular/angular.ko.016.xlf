<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="angular">
    <body>
      <group id="angular">
        <trans-unit id="a7493965b825fd3f2b58e7ecba7857e304c1a347" translate="yes" xml:space="preserve">
          <source>You can also preserve query parameters and fragments across navigations without having to provide them again when navigating. In the &lt;code&gt;LoginComponent&lt;/code&gt;, you'll add an &lt;em&gt;object&lt;/em&gt; as the second argument in the &lt;code&gt;router.navigateUrl()&lt;/code&gt; function and provide the &lt;code&gt;queryParamsHandling&lt;/code&gt; and &lt;code&gt;preserveFragment&lt;/code&gt; to pass along the current query parameters and fragment to the next route.</source>
          <target state="translated">탐색 할 때 다시 제공하지 않고도 탐색에서 쿼리 매개 변수 및 조각을 보존 할 수도 있습니다. 에서 &lt;code&gt;LoginComponent&lt;/code&gt; , 당신은 추가 할 것입니다 &lt;em&gt;개체를&lt;/em&gt; 의 두 번째 인수로 &lt;code&gt;router.navigateUrl()&lt;/code&gt; 함수와 제공 &lt;code&gt;queryParamsHandling&lt;/code&gt; 을 하고 &lt;code&gt;preserveFragment&lt;/code&gt; 는 다음 경로에 현재 조회 매개 변수와 조각 함께 전달합니다.</target>
        </trans-unit>
        <trans-unit id="c26ef44be89c5e65a5b8f981623f1b3c592e1408" translate="yes" xml:space="preserve">
          <source>You can also protect child routes with the &lt;code&gt;&lt;a href=&quot;../api/router/canactivatechild&quot;&gt;CanActivateChild&lt;/a&gt;&lt;/code&gt; guard. The &lt;code&gt;&lt;a href=&quot;../api/router/canactivatechild&quot;&gt;CanActivateChild&lt;/a&gt;&lt;/code&gt; guard is similar to the &lt;code&gt;&lt;a href=&quot;../api/router/canactivate&quot;&gt;CanActivate&lt;/a&gt;&lt;/code&gt; guard. The key difference is that it runs &lt;em&gt;before&lt;/em&gt; any child route is activated.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/canactivatechild&quot;&gt;CanActivateChild&lt;/a&gt;&lt;/code&gt; 가드를 사용하여 하위 경로를 보호 할 수도 있습니다 . &lt;code&gt;&lt;a href=&quot;../api/router/canactivatechild&quot;&gt;CanActivateChild&lt;/a&gt;&lt;/code&gt; 의 경비는 비슷합니다 &lt;code&gt;&lt;a href=&quot;../api/router/canactivate&quot;&gt;CanActivate&lt;/a&gt;&lt;/code&gt; 의 가드. 주요 차이점은 하위 경로가 활성화 &lt;em&gt;되기 전에&lt;/em&gt; 실행된다는 것 입니다.</target>
        </trans-unit>
        <trans-unit id="641b3bea7c85ba0af5b136447221717d92903110" translate="yes" xml:space="preserve">
          <source>You can also push values into that &lt;code&gt;Observable&lt;/code&gt; by calling its &lt;code&gt;next(value)&lt;/code&gt; method as the &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/%24locationshim#search&quot;&gt;search()&lt;/a&gt;&lt;/code&gt; method does.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/upgrade/%24locationshim#search&quot;&gt;search()&lt;/a&gt;&lt;/code&gt; 메소드 와 마찬가지로 &lt;code&gt;next(value)&lt;/code&gt; 메소드를 호출하여 해당 &lt;code&gt;Observable&lt;/code&gt; 에 값을 푸시 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="9439c5a9cee353a64e79c3fde687e6a67472f82a" translate="yes" xml:space="preserve">
          <source>You can also unit test an Angular app with other testing libraries and test runners. Each library and runner has its own distinctive installation procedures, configuration, and syntax.</source>
          <target state="translated">다른 테스트 라이브러리 및 테스트 러너와 함께 Angular 앱을 단위 테스트 할 수도 있습니다. 각 라이브러리와 러너에는 고유 한 설치 절차, 구성 및 구문이 있습니다.</target>
        </trans-unit>
        <trans-unit id="3dadda04deeb9f9194ec56cd58861de84466eeaa" translate="yes" xml:space="preserve">
          <source>You can also use RxJS scheduler in &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; just like using &lt;code&gt;setTimeout()&lt;/code&gt; or &lt;code&gt;setInterval()&lt;/code&gt;, but you need to import &lt;code&gt;zone.js/dist/zone-patch-rxjs-fake-async&lt;/code&gt; to patch RxJS scheduler.</source>
          <target state="translated">&lt;code&gt;setTimeout()&lt;/code&gt; 또는 &lt;code&gt;setInterval()&lt;/code&gt; 사용하는 것처럼 &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; 에서 RxJS 스케줄러를 사용할 수도 있지만 &lt;code&gt;zone.js/dist/zone-patch-rxjs-fake-async&lt;/code&gt; 를 가져 와서 RxJS 스케줄러를 패치해야합니다.</target>
        </trans-unit>
        <trans-unit id="1148887e8f5d0c5866c716744f552c4492878245" translate="yes" xml:space="preserve">
          <source>You can also use a &lt;code&gt;&lt;a href=&quot;query&quot;&gt;Query&lt;/a&gt;&lt;/code&gt; to find a &lt;code&gt;&lt;a href=&quot;templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt; associated with a component or a directive.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;query&quot;&gt;Query&lt;/a&gt;&lt;/code&gt; 를 사용 하여 구성 요소 또는 지시문과 연관된 &lt;code&gt;&lt;a href=&quot;templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt; 를 찾을 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d2ff8602cd8de5d23f2fc4f2afb55a0b81e1087e" translate="yes" xml:space="preserve">
          <source>You can also use a reactive (or model-driven) approach to build forms. However, this page focuses on template-driven forms.</source>
          <target state="translated">반응 형 (또는 모델 중심) 접근 방식을 사용하여 양식을 작성할 수도 있습니다. 그러나이 페이지에서는 템플릿 기반 양식에 중점을 둡니다.</target>
        </trans-unit>
        <trans-unit id="21c518f562b8fea5178333a9fd8030cd677cbbf4" translate="yes" xml:space="preserve">
          <source>You can also use forward references to break circular dependencies. See an example in the &lt;a href=&quot;dependency-injection-in-action#forwardref&quot;&gt;DI Cookbook&lt;/a&gt;.</source>
          <target state="translated">순방향 참조를 사용하여 순환 종속성을 끊을 수도 있습니다. &lt;a href=&quot;dependency-injection-in-action#forwardref&quot;&gt;DI Cookbook&lt;/a&gt; 의 예를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="011694da04fab7703ee387cc7935395cb1a15c38" translate="yes" xml:space="preserve">
          <source>You can also write &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; tags into the component's HTML template.</source>
          <target state="translated">&lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; 태그를 구성 요소의 HTML 템플릿에 쓸 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="9b537abac2e0aa96e672eec385ad1595b1cc2787" translate="yes" xml:space="preserve">
          <source>You can alternatively provide a function with the &lt;code&gt;&lt;a href=&quot;route#canActivate&quot;&gt;canActivate&lt;/a&gt;&lt;/code&gt; signature:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;route#canActivate&quot;&gt;canActivate&lt;/a&gt;&lt;/code&gt; 서명 으로 함수를 제공 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="5d7df29bac92cb6ceef0364985e8483678913314" translate="yes" xml:space="preserve">
          <source>You can alternatively provide a function with the &lt;code&gt;&lt;a href=&quot;route#canActivateChild&quot;&gt;canActivateChild&lt;/a&gt;&lt;/code&gt; signature:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;route#canActivateChild&quot;&gt;canActivateChild&lt;/a&gt;&lt;/code&gt; 서명을 사용하여 함수를 제공 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="bd4940cbc635487f4166f04a16f57d8f34f56d90" translate="yes" xml:space="preserve">
          <source>You can alternatively provide a function with the &lt;code&gt;&lt;a href=&quot;route#canDeactivate&quot;&gt;canDeactivate&lt;/a&gt;&lt;/code&gt; signature:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;route#canDeactivate&quot;&gt;canDeactivate&lt;/a&gt;&lt;/code&gt; 서명 으로 함수를 제공 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="017b791cb2a79246951c11f855b0145ced89d786" translate="yes" xml:space="preserve">
          <source>You can alternatively provide a function with the &lt;code&gt;&lt;a href=&quot;route#canLoad&quot;&gt;canLoad&lt;/a&gt;&lt;/code&gt; signature:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;route#canLoad&quot;&gt;canLoad&lt;/a&gt;&lt;/code&gt; 서명 으로 함수를 제공 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ac73238ab80850452a81dfb5e676e1366f39a577" translate="yes" xml:space="preserve">
          <source>You can alternatively provide a function with the &lt;code&gt;&lt;a href=&quot;route#resolve&quot;&gt;resolve&lt;/a&gt;&lt;/code&gt; signature:</source>
          <target state="translated">다른 방법으로 &lt;code&gt;&lt;a href=&quot;route#resolve&quot;&gt;resolve&lt;/a&gt;&lt;/code&gt; 서명 으로 함수를 제공 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="4a968df9fb4629fecd8ccfea8666dacbe72676df" translate="yes" xml:space="preserve">
          <source>You can apply many &lt;em&gt;attribute&lt;/em&gt; directives to one host element. You can &lt;a href=&quot;structural-directives#one-per-element&quot;&gt;only apply one&lt;/a&gt;&lt;em&gt;structural&lt;/em&gt; directive to a host element.</source>
          <target state="translated">하나의 호스트 요소에 많은 &lt;em&gt;속성&lt;/em&gt; 지시문을 적용 할 수 있습니다 . &lt;a href=&quot;structural-directives#one-per-element&quot;&gt;하나의 &lt;/a&gt;&lt;em&gt;구조적&lt;/em&gt; 지시문 만 호스트 요소에 적용 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="048d6024e82ffaa8032832cdcdadb0fa97dcb69c" translate="yes" xml:space="preserve">
          <source>You can apply the same trick to the application's route configuration file in &lt;code&gt;app.config.ts&lt;/code&gt;, where you are using the location and route services. By annotating them accordingly TypeScript can verify you're calling their APIs with the correct kinds of arguments.</source>
          <target state="translated">위치 및 경로 서비스를 사용하는 &lt;code&gt;app.config.ts&lt;/code&gt; 의 응용 프로그램 경로 구성 파일에 동일한 트릭을 적용 할 수 있습니다 . 적절하게 주석을 달아서 TypeScript는 올바른 종류의 인수로 API를 호출하고 있는지 확인할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="75bb7e44b1f16f8817023fa6cb1d196458eeb22d" translate="yes" xml:space="preserve">
          <source>You can apply the spy to any native or component element and it'll be initialized and destroyed at the same time as that element. Here it is attached to the repeated hero &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;:</source>
          <target state="translated">스파이는 모든 기본 또는 구성 요소에 적용 할 수 있으며 해당 요소와 동시에 초기화 및 파괴됩니다. 반복되는 hero &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 에 첨부되어 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a7563385a82391d1fe26ea4d0c2c69c4e4a830ce" translate="yes" xml:space="preserve">
          <source>You can assign the RouterLinkActive instance to a template variable and directly check the &lt;code&gt;&lt;a href=&quot;routerlinkactive#isActive&quot;&gt;isActive&lt;/a&gt;&lt;/code&gt; status.</source>
          <target state="translated">RouterLinkActive 인스턴스를 템플릿 변수에 할당하고 &lt;code&gt;&lt;a href=&quot;routerlinkactive#isActive&quot;&gt;isActive&lt;/a&gt;&lt;/code&gt; 상태를 직접 확인할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ccd2ecf8c6674aedde9429ab78c08401d264ed2e" translate="yes" xml:space="preserve">
          <source>You can attach a context object to the &lt;code&gt;&lt;a href=&quot;../core/embeddedviewref&quot;&gt;EmbeddedViewRef&lt;/a&gt;&lt;/code&gt; by setting &lt;code&gt;[&lt;a href=&quot;ngtemplateoutlet#ngTemplateOutletContext&quot;&gt;ngTemplateOutletContext&lt;/a&gt;]&lt;/code&gt;. &lt;code&gt;[&lt;a href=&quot;ngtemplateoutlet#ngTemplateOutletContext&quot;&gt;ngTemplateOutletContext&lt;/a&gt;]&lt;/code&gt; should be an object, the object's keys will be available for binding by the local template &lt;code&gt;let&lt;/code&gt; declarations.</source>
          <target state="translated">&lt;code&gt;[&lt;a href=&quot;ngtemplateoutlet#ngTemplateOutletContext&quot;&gt;ngTemplateOutletContext&lt;/a&gt;]&lt;/code&gt; &lt;a href=&quot;ngtemplateoutlet#ngTemplateOutletContext&quot;&gt;ngTemplateOutletContext&lt;/a&gt; ] 를 설정 하여 컨텍스트 객체를 &lt;code&gt;&lt;a href=&quot;../core/embeddedviewref&quot;&gt;EmbeddedViewRef&lt;/a&gt;&lt;/code&gt; 에 연결할 수 있습니다 . &lt;code&gt;[&lt;a href=&quot;ngtemplateoutlet#ngTemplateOutletContext&quot;&gt;ngTemplateOutletContext&lt;/a&gt;]&lt;/code&gt; &lt;a href=&quot;ngtemplateoutlet#ngTemplateOutletContext&quot;&gt;ngTemplateOutletContext&lt;/a&gt; ] 는 객체 여야하며, 로컬 템플릿 &lt;code&gt;let&lt;/code&gt; 선언에 의해 객체의 키를 바인딩 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="cfeead7a9cba90c2c4acff7ac30ba6611e4e82ef" translate="yes" xml:space="preserve">
          <source>You can avoid that by waiting for the app to stabilize first, before starting to poll for updates (as shown in the example above).</source>
          <target state="translated">업데이트를 폴링하기 전에 앱이 먼저 안정화 될 때까지 기다리면 위의 예와 같이이를 피할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="cc0f1c03d0a358630425afc0bf16032ad9ba29e2" translate="yes" xml:space="preserve">
          <source>You can bind the &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; directive to such an array like this:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; 지시문을 다음과 같은 배열에 바인딩 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="0885e2058166ac10a877b38937a3a205f94c938c" translate="yes" xml:space="preserve">
          <source>You can both try and download the source code for this guide in the live example.</source>
          <target state="translated">라이브 예제에서이 안내서의 소스 코드를 시도하고 다운로드 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e3ed6e15150f97635059bb4fcc2f58a93abc0d1b" translate="yes" xml:space="preserve">
          <source>You can build almost any form with an Angular template&amp;mdash;login forms, contact forms, and pretty much any business form. You can lay out the controls creatively, bind them to data, specify validation rules and display validation errors, conditionally enable or disable specific controls, trigger built-in visual feedback, and much more.</source>
          <target state="translated">Angular 템플릿으로 거의 모든 양식 (로그인 양식, 연락처 양식 및 거의 모든 비즈니스 양식)을 작성할 수 있습니다. 컨트롤을 창의적으로 배치하고, 데이터에 바인딩하고, 유효성 검사 규칙을 지정하고 유효성 검사 오류를 표시하며, 조건부로 특정 컨트롤을 활성화 또는 비활성화하고 내장 된 시각적 피드백을 트리거 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f9b347426239b086ed007f2c3c16d9bac4c14712" translate="yes" xml:space="preserve">
          <source>You can build forms by writing templates in the Angular &lt;a href=&quot;template-syntax&quot;&gt;template syntax&lt;/a&gt; with the form-specific directives and techniques described in this page.</source>
          <target state="translated">이 페이지에 설명 된 양식 별 지시문 및 기술 을 사용하여 Angular &lt;a href=&quot;template-syntax&quot;&gt;템플릿 구문&lt;/a&gt; 으로 템플릿을 작성하여 양식을 작성할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="fe3c9f27494d5a3059c7a2125bc01e82bc6f5957" translate="yes" xml:space="preserve">
          <source>You can build forms in one of two ways:</source>
          <target state="translated">다음 두 가지 방법 중 하나로 양식을 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="707d471c41b13f647ded4f1cffab9addbf05c898" translate="yes" xml:space="preserve">
          <source>You can build, test, and lint the project with CLI commands:</source>
          <target state="translated">CLI 명령으로 프로젝트를 빌드, 테스트 및 린트 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="cdc62cf78a7df66548bd5bdae88738b3d660dece" translate="yes" xml:space="preserve">
          <source>You can call the &lt;code&gt;wrapInArray&lt;/code&gt; in a metadata definition because it returns the value of an expression that conforms to the compiler's restrictive JavaScript subset.</source>
          <target state="translated">메타 데이터 정의에서 &lt;code&gt;wrapInArray&lt;/code&gt; 를 호출하면 컴파일러의 제한적 JavaScript 서브 세트를 따르는 표현식의 값이 리턴되므로이를 정의 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="fb33901921825a3ba4df7372e8f797a50059f50f" translate="yes" xml:space="preserve">
          <source>You can chain expressions through multiple pipes:</source>
          <target state="translated">여러 파이프를 통해 표현식을 연결할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4b5ee08ece7f8cb05a90545360581865c840c160" translate="yes" xml:space="preserve">
          <source>You can chain pipes together in potentially useful combinations. In the following example, to display the birthday in uppercase, the birthday is chained to the &lt;code&gt;&lt;a href=&quot;../api/common/datepipe&quot;&gt;DatePipe&lt;/a&gt;&lt;/code&gt; and on to the &lt;code&gt;&lt;a href=&quot;../api/common/uppercasepipe&quot;&gt;UpperCasePipe&lt;/a&gt;&lt;/code&gt;. The birthday displays as &lt;strong&gt;&lt;samp&gt;APR 15, 1988&lt;/samp&gt;&lt;/strong&gt;.</source>
          <target state="translated">잠재적으로 유용한 조합으로 파이프를 함께 연결할 수 있습니다. 다음 예제에서는 생일을 대문자로 표시하기 위해 생일이 &lt;code&gt;&lt;a href=&quot;../api/common/datepipe&quot;&gt;DatePipe&lt;/a&gt;&lt;/code&gt; 에 연결되고 &lt;code&gt;&lt;a href=&quot;../api/common/uppercasepipe&quot;&gt;UpperCasePipe&lt;/a&gt;&lt;/code&gt; 에 연결됩니다 . 생일은 다음과 같이 표시됩니다&lt;strong&gt;&lt;samp&gt;1988 년 4 월 15 일&lt;/samp&gt;&lt;/strong&gt;.</target>
        </trans-unit>
        <trans-unit id="15ee58b9b649fd06ca4f748828b84891a13da1b0" translate="yes" xml:space="preserve">
          <source>You can chain pipes, sending the output of one pipe function to be transformed by another pipe function. A pipe can also take arguments that control how it performs its transformation. For example, you can pass the desired format to the &lt;code&gt;date&lt;/code&gt; pipe.</source>
          <target state="translated">파이프를 체인화하여 한 파이프 함수의 출력을 다른 파이프 함수에 의해 변환 할 수 있습니다. 파이프는 변환 수행 방법을 제어하는 ​​인수를 취할 수도 있습니다. 예를 들어 원하는 형식을 &lt;code&gt;date&lt;/code&gt; 파이프 로 전달할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f1d7f8f297a03122938cf7584e67b33b6f02ba6c" translate="yes" xml:space="preserve">
          <source>You can change or remove component CSS code without searching through the whole application to find where else the code is used.</source>
          <target state="translated">전체 응용 프로그램을 검색하지 않고도 구성 요소 CSS 코드를 변경하거나 제거하여 코드가 사용되는 곳을 찾을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9426689092ed2f9f6e8e7440a45cb13c148e7e2b" translate="yes" xml:space="preserve">
          <source>You can change the appearance and behavior of the live example with attributes and classes.</source>
          <target state="translated">속성과 클래스를 사용하여 라이브 예제의 모양과 동작을 변경할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7d6ffb9e9e11eb10665d9d70341f2f295418c7e6" translate="yes" xml:space="preserve">
          <source>You can change the name of the translation source file that is generated by the extraction tool with the &lt;code&gt;--outFile&lt;/code&gt; command option:</source>
          <target state="translated">&lt;code&gt;--outFile&lt;/code&gt; 명령 옵션을 사용하여 추출 도구로 생성 된 변환 소스 파일의 이름을 변경할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="3b13ad9ec95a01f5220a0e8b907200fca03d45c2" translate="yes" xml:space="preserve">
          <source>You can check to see that a module is indeed being lazy loaded with the Chrome developer tools. In Chrome, open the dev tools by pressing &lt;code&gt;Cmd+Option+i&lt;/code&gt; on a Mac or &lt;code&gt;Ctrl+Shift+j&lt;/code&gt; on a PC and go to the Network Tab.</source>
          <target state="translated">Chrome 개발자 도구를 사용하여 모듈이 실제로 지연로드되어 있는지 확인할 수 있습니다. 크롬에서 눌러 개발 도구를 열고 &lt;code&gt;Cmd+Option+i&lt;/code&gt; Mac 또는에서 &lt;code&gt;Ctrl+Shift+j&lt;/code&gt; 를 PC와 네트워크 탭으로 이동합니다.</target>
        </trans-unit>
        <trans-unit id="8ee6d4a0bcab8e5a1c29996b6475091409bc4a12" translate="yes" xml:space="preserve">
          <source>You can choose to &lt;a href=&quot;form-validation#custom-validators&quot;&gt;write your own validator functions&lt;/a&gt;, or you can use some of Angular's built-in validators.</source>
          <target state="translated">&lt;a href=&quot;form-validation#custom-validators&quot;&gt;자체 유효성 검사기 함수&lt;/a&gt; 를 작성 하도록 선택 하거나 Angular의 내장 유효성 검사기 중 일부를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="29d4d8014109237c33070364152baf517e891473" translate="yes" xml:space="preserve">
          <source>You can choose to use a descriptive string as the key value, or be assigned a random key when you run the CLI command. For example, the following command adds a configuration key named &quot;tracking&quot;.</source>
          <target state="translated">설명 문자열을 키 값으로 사용하거나 CLI 명령을 실행할 때 임의의 키를 할당하도록 선택할 수 있습니다. 예를 들어 다음 명령은 &quot;tracking&quot;이라는 구성 키를 추가합니다.</target>
        </trans-unit>
        <trans-unit id="e9618e54f7d5540a45646e2daf57e55cf4737030" translate="yes" xml:space="preserve">
          <source>You can click the &quot;View Details&quot; button to drill into the editable details of the selected hero.</source>
          <target state="translated">&quot;세부 정보보기&quot;버튼을 클릭하여 선택한 영웅의 편집 가능한 세부 정보를 드릴 다운 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0f82d4671c9e5f7709c5e6e8b2a8db9f44352d90" translate="yes" xml:space="preserve">
          <source>You can click the two links above the dashboard (&quot;Dashboard&quot; and &quot;Heroes&quot;) to navigate between this Dashboard view and a Heroes view.</source>
          <target state="translated">대시 보드 위의 두 링크 ( &quot;대시 보드&quot;및 &quot;영웅&quot;)를 클릭하여이 대시 보드보기와 영웅보기 사이를 탐색 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="907f7e28735dbb54215acbf59c7d8da2c64ead5b" translate="yes" xml:space="preserve">
          <source>You can co-locate the CSS code of each component with the TypeScript and HTML code of the component, which leads to a neat and tidy project structure.</source>
          <target state="translated">각 구성 요소의 CSS 코드를 구성 요소의 TypeScript 및 HTML 코드와 함께 배치하면 깔끔하고 깔끔한 프로젝트 구조를 얻을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ad5e93413ff3b157034427dcca9c7b4e9726a62f" translate="yes" xml:space="preserve">
          <source>You can combine &lt;code&gt;yarn docs-watch&lt;/code&gt; and &lt;code&gt;yarn start&lt;/code&gt; into one command with &lt;code&gt;yarn serve-and-sync&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;yarn docs-watch&lt;/code&gt; 와 &lt;code&gt;yarn start&lt;/code&gt; 을 &lt;code&gt;yarn serve-and-sync&lt;/code&gt; 함께 하나의 명령으로 결합 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c6fc6741dd6f106d4b60145a47630c2d396bc083" translate="yes" xml:space="preserve">
          <source>You can combine keyframes with &lt;code&gt;duration&lt;/code&gt;, &lt;code&gt;delay&lt;/code&gt;, and &lt;code&gt;easing&lt;/code&gt; within a single animation.</source>
          <target state="translated">키 프레임을 단일 애니메이션 내에서 &lt;code&gt;duration&lt;/code&gt; , &lt;code&gt;delay&lt;/code&gt; 및 &lt;code&gt;easing&lt;/code&gt; 과 결합 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="b07827c34b2712c5fb92ac30253ae1d59fc938c4" translate="yes" xml:space="preserve">
          <source>You can combine relative navigation syntax with an ancestor path. If you must navigate to a sibling route, you could use the &lt;code&gt;../&amp;lt;sibling&amp;gt;&lt;/code&gt; convention to go up one level, then over and down the sibling route path.</source>
          <target state="translated">상대 탐색 구문을 상위 경로와 결합 할 수 있습니다. 형제 경로로 이동해야하는 경우 &lt;code&gt;../&amp;lt;sibling&amp;gt;&lt;/code&gt; 규칙을 사용하여 한 수준 위로 올라간 다음 형제 경로 경로를 위아래로 이동할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2d6d5f82c4426fb4f2c02970240cac7beb04b412" translate="yes" xml:space="preserve">
          <source>You can combine several fragments from the same file into a single code snippet by defining multiple &lt;em&gt;#docregions&lt;/em&gt; with the &lt;em&gt;same region name&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;동일한 지역 이름으로&lt;/em&gt; 여러 &lt;em&gt;#docregion&lt;/em&gt; 을 정의하여 동일한 파일의 여러 조각을 단일 코드 스 니펫으로 결합 할 수 있습니다 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="892b0e652b52f3c1298e1d8efa0356038b6e630b" translate="yes" xml:space="preserve">
          <source>You can combine wildcard and void states in a transition to trigger animations that enter and leave the page:</source>
          <target state="translated">전환에 와일드 카드와 공백 상태를 결합하여 페이지에 들어오고 나가는 애니메이션을 트리거 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2be97c9f6f5b928311c1df36ab8c4683b94dfa0d" translate="yes" xml:space="preserve">
          <source>You can configure RouterLinkActive by passing &lt;code&gt;exact: true&lt;/code&gt;. This will add the classes only when the url matches the link exactly.</source>
          <target state="translated">&lt;code&gt;exact: true&lt;/code&gt; 를 전달하여 RouterLinkActive를 구성 할 수 있습니다 . 이것은 URL이 링크와 정확히 일치하는 경우에만 클래스를 추가합니다.</target>
        </trans-unit>
        <trans-unit id="edfd91a02f9b6083c0b480709f090dd77a6e6a2e" translate="yes" xml:space="preserve">
          <source>You can configure injectors with different providers that can provide different implementations of the same dependency.</source>
          <target state="translated">동일한 종속성의 다른 구현을 제공 할 수있는 다른 제공자로 인젝터를 구성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b04dd254b3272bfb8d7ba1d5651935b8d6e7f26e" translate="yes" xml:space="preserve">
          <source>You can configure injectors with providers at different levels of your app, by setting a metadata value in one of three places:</source>
          <target state="translated">다음 세 곳 중 하나에 메타 데이터 값을 설정하여 앱의 다른 수준에있는 공급자로 인젝터를 구성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="cd5dfc0da3065a2550d8027a7853f827867617ad" translate="yes" xml:space="preserve">
          <source>You can confirm this by looking in the &lt;code&gt;ItemDetailComponent&lt;/code&gt; where the &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; type is set to a string:</source>
          <target state="translated">당신은에보고하여 확인할 수 있습니다 &lt;code&gt;ItemDetailComponent&lt;/code&gt; &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; 유형이 문자열로 설정한다 :</target>
        </trans-unit>
        <trans-unit id="85abae6aa135f3574cd963c9903fa945ad66a330" translate="yes" xml:space="preserve">
          <source>You can consolidate the two &lt;code&gt;beforeEach()&lt;/code&gt; functions into a single, async &lt;code&gt;beforeEach()&lt;/code&gt;.</source>
          <target state="translated">두 개의 &lt;code&gt;beforeEach()&lt;/code&gt; 함수를 하나의 비동기 &lt;code&gt;beforeEach()&lt;/code&gt; 로 통합 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d116f52df726e7b795448d2a1e4786b60bb017f2" translate="yes" xml:space="preserve">
          <source>You can construct a format string using symbols to specify the components of a date-time value, as described in the following table. Format details depend on the locale. Fields marked with (*) are only available in the extra data set for the given locale.</source>
          <target state="translated">다음 표에 설명 된대로 기호를 사용하여 형식 문자열을 구성하여 날짜-시간 값의 구성 요소를 지정할 수 있습니다. 형식 세부 사항은 로캘에 따라 다릅니다. (*)로 표시된 필드는 지정된 로케일에 대한 추가 데이터 세트에서만 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6a4fa2e299bb51897796717f9de20e9ef5dd66fb" translate="yes" xml:space="preserve">
          <source>You can continue expanding lazy loaded feature areas without increasing the size of the initial load bundle.</source>
          <target state="translated">초기로드 번들의 크기를 늘리지 않고도 지연로드 된 기능 영역을 계속 확장 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4e4d4d5d0a420de9325f75c043f57ac29b54e167" translate="yes" xml:space="preserve">
          <source>You can control the component creation process by using the following optional attributes:</source>
          <target state="translated">다음과 같은 선택적 속성을 사용하여 구성 요소 작성 프로세스를 제어 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3277c9eb638be586bd69b635e81f7899373b6c37" translate="yes" xml:space="preserve">
          <source>You can control what and how the router preloads with a custom preloading strategy.</source>
          <target state="translated">사용자 정의 사전로드 전략을 사용하여 라우터의 사전로드 내용과 방법을 제어 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="79c24750c2da92f3ba02b782e94bc5c8b049542a" translate="yes" xml:space="preserve">
          <source>You can count on Angular to call the &lt;code&gt;ngOnInit()&lt;/code&gt; method &lt;em&gt;soon&lt;/em&gt; after creating the component. That's where the heavy initialization logic belongs.</source>
          <target state="translated">구성 요소를 만든 후 &lt;em&gt;곧&lt;/em&gt; Angular를 사용하여 &lt;code&gt;ngOnInit()&lt;/code&gt; 메서드 를 호출 할 수 있습니다 . 바로 여기에 강력한 초기화 로직이 있습니다.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="fea97f1368eff44072b3d4e5f46081101f8a8006" translate="yes" xml:space="preserve">
          <source>You can count on the test runner to wait for the first asynchronous &lt;code&gt;beforeEach&lt;/code&gt; to finish before calling the second.</source>
          <target state="translated">첫 번째 비동기 &lt;code&gt;beforeEach&lt;/code&gt; 가 완료 되기를 기다렸다가 두 번째를 호출하기 전에 테스트 실행기를 의지 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c99ad8b58c1bce47f50287f5f4b4c4dd9ad3d8b1" translate="yes" xml:space="preserve">
          <source>You can create a new hero like this:</source>
          <target state="translated">다음과 같이 새로운 영웅을 만들 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="61c2e7af5a86ddccfb6542bf2e207be0249ab305" translate="yes" xml:space="preserve">
          <source>You can create additional, named definition files in the form &lt;code&gt;name.stackblitz.json&lt;/code&gt;. See &lt;code&gt;content/examples/testing&lt;/code&gt; for examples.</source>
          <target state="translated">&lt;code&gt;name.stackblitz.json&lt;/code&gt; 형식으로 이름이 지정된 추가 정의 파일을 작성할 수 있습니다 . &lt;code&gt;content/examples/testing&lt;/code&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="37158753ba4a406bbe191500b2f260b1c28de78b" translate="yes" xml:space="preserve">
          <source>You can create and publish new libraries to extend Angular functionality. If you find that you need to solve the same problem in more than one app (or want to share your solution with other developers), you have a candidate for a library.</source>
          <target state="translated">Angular 기능을 확장하기 위해 새 라이브러리를 생성 및 게시 할 수 있습니다. 둘 이상의 앱에서 동일한 문제를 해결해야하거나 솔루션을 다른 개발자와 공유하려는 경우 라이브러리 후보가 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="30e4df335e071d5d56bcf80f928f13f415b68e1b" translate="yes" xml:space="preserve">
          <source>You can create your own schematics to operate on Angular projects. Library developers typically package schematics with their libraries in order to integrate them with the Angular CLI. You can also create stand-alone schematics to manipulate the files and constructs in Angular applications as a way of customizing them for your development environment and making them conform to your standards and constraints. Schematics can be chained, running other schematics to perform complex operations.</source>
          <target state="translated">Angular 프로젝트에서 작동하는 자체 회로도를 만들 수 있습니다. 라이브러리 개발자는 일반적으로 회로도를 Angular CLI와 통합하기 위해 라이브러리와 함께 패키지합니다. 또한 개발 환경에 맞게 사용자 지정하고 표준 및 제약 조건을 준수하도록 Angular 응용 프로그램에서 파일 및 구성을 조작하는 독립형 회로도를 만들 수 있습니다. 회로도를 연결하여 다른 회로도를 실행하여 복잡한 작업을 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4a8d67e28759289cc6bcbb51cc77c3e30a377365" translate="yes" xml:space="preserve">
          <source>You can customize the colors and location of the &quot;required&quot; bar with standard CSS.</source>
          <target state="translated">표준 CSS를 사용하여 &quot;필수&quot;막대의 색상과 위치를 사용자 정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0c330139238c45a28d705043db327fe346fa05aa" translate="yes" xml:space="preserve">
          <source>You can define &lt;a href=&quot;template-syntax#custom-events-with-eventemitter&quot;&gt;custom events&lt;/a&gt; that send observable output data from a child to a parent component.</source>
          <target state="translated">관찰 가능한 출력 데이터를 자식에서 부모 구성 요소로 보내는 &lt;a href=&quot;template-syntax#custom-events-with-eventemitter&quot;&gt;사용자 지정 이벤트&lt;/a&gt; 를 정의 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f6e05a52d59bd7416a65b3c822f47eb478920897" translate="yes" xml:space="preserve">
          <source>You can define and name additional alternate configurations (such as &lt;code&gt;stage&lt;/code&gt;, for instance) appropriate to your development process. Some examples of different build configurations are &lt;code&gt;stable&lt;/code&gt;, &lt;code&gt;archive&lt;/code&gt; and &lt;code&gt;next&lt;/code&gt; used by AIO itself, and the individual locale-specific configurations required for building localized versions of an app. For details, see &lt;a href=&quot;i18n#merge-aot&quot;&gt;Internationalization (i18n)&lt;/a&gt;.</source>
          <target state="translated">개발 프로세스에 적합한 추가 대체 구성 (예 : &lt;code&gt;stage&lt;/code&gt; )을 정의하고 이름을 지정할 수 있습니다 . 서로 다른 빌드 구성의 예로는 &lt;code&gt;stable&lt;/code&gt; , &lt;code&gt;archive&lt;/code&gt; 및 &lt;code&gt;next&lt;/code&gt; 에 AIO 자체에서 사용되며 현지화 된 버전의 앱을 빌드하는 데 필요한 개별 로캘 별 구성이 있습니다. 자세한 내용은 &lt;a href=&quot;i18n#merge-aot&quot;&gt;국제화 (i18n)를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="070c92c14b69843aa875a87772abc978bbc5bbba" translate="yes" xml:space="preserve">
          <source>You can define different named build configurations for your project, such as &lt;em&gt;stage&lt;/em&gt; and &lt;em&gt;production&lt;/em&gt;, with different defaults.</source>
          <target state="translated">다른 기본값 을 사용하여 프로젝트에 대해 다른 명명 된 빌드 구성 (예 : &lt;em&gt;스테이지&lt;/em&gt; 및 &lt;em&gt;프로덕션&lt;/em&gt; )을 정의 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d7c79c2994263547496b806d8f0d9b9c752d11bb" translate="yes" xml:space="preserve">
          <source>You can define more than one animation trigger for a component. You can attach animation triggers to different elements, and the parent-child relationships among the elements affect how and when the animations run.</source>
          <target state="translated">구성 요소에 대해 둘 이상의 애니메이션 트리거를 정의 할 수 있습니다. 애니메이션 트리거를 다른 요소에 첨부 할 수 있으며 요소 간의 부모-자식 관계가 애니메이션 실행 방법 및시기에 영향을줍니다.</target>
        </trans-unit>
        <trans-unit id="3449bb7cad3d7509a12617298d2aac87b4f37417" translate="yes" xml:space="preserve">
          <source>You can define more typings as needed.</source>
          <target state="translated">필요에 따라 더 많은 입력을 정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2b86e82b76575c06502b5cbf966f538ae5960b8a" translate="yes" xml:space="preserve">
          <source>You can define new targets and their configuration options in the &quot;architect&quot; section of the &lt;code&gt;angular.json&lt;/code&gt; file. If you do so, you can run them from the command line using the &lt;code&gt;ng run&lt;/code&gt; command. Execute the command using the following format.</source>
          <target state="translated">&lt;code&gt;angular.json&lt;/code&gt; 파일 의 &quot;architect&quot;섹션에서 새 대상 및 해당 구성 옵션을 정의 할 수 있습니다 . 그렇게하면 &lt;code&gt;ng run&lt;/code&gt; 명령을 사용하여 명령 행에서 실행할 수 있습니다 . 다음 형식을 사용하여 명령을 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="555e2b815ef71136a660d7333caebaaea286463c" translate="yes" xml:space="preserve">
          <source>You can derive a &lt;code&gt;FlyingHeroesImpureComponent&lt;/code&gt; from &lt;code&gt;FlyingHeroesComponent&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;FlyingHeroesImpureComponent&lt;/code&gt; 에서 &lt;code&gt;FlyingHeroesComponent&lt;/code&gt; 파생시킬 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="4b55901ea48bb7ba604055c678ad4c2468477e58" translate="yes" xml:space="preserve">
          <source>You can display a simple, inline code snippet with the markdown backtick syntax. Use a single backtick on either side of a term when referring to code or the name of a file in a sentence. The following are some examples:</source>
          <target state="translated">markdown backtick 구문을 사용하여 간단한 인라인 코드 스 니펫을 표시 할 수 있습니다. 문장에서 코드 또는 파일 이름을 참조 할 때는 용어의 양쪽에 하나의 백틱을 사용하십시오. 다음은 몇 가지 예입니다.</target>
        </trans-unit>
        <trans-unit id="2ffd0ad079ad1ea51a270451ed3e1c28e0ab44e5" translate="yes" xml:space="preserve">
          <source>You can display an entire JSON file by referring to it in the &lt;code&gt;src&lt;/code&gt; attribute. But you can't display JSON fragments because you can't add &lt;code&gt;#docregion&lt;/code&gt; tags to the file.</source>
          <target state="translated">&lt;code&gt;src&lt;/code&gt; 속성 에서 전체 JSON 파일을 참조하여 표시 할 수 있습니다 . 그러나 &lt;code&gt;#docregion&lt;/code&gt; 태그를 파일에 추가 할 수 없으므로 JSON 조각을 표시 할 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="291d240e95d4d063d545379c3c51724bce25c2e8" translate="yes" xml:space="preserve">
          <source>You can display data by binding controls in an HTML template to properties of an Angular component.</source>
          <target state="translated">HTML 템플릿의 컨트롤을 Angular 구성 요소의 속성에 바인딩하여 데이터를 표시 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ede39e87e87aee0795c2d7d1ea78f8c841b3aad9" translate="yes" xml:space="preserve">
          <source>You can display the value in these ways:</source>
          <target state="translated">다음과 같은 방법으로 값을 표시 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ac58ffa3b071516db387527586fca41e868b2ad6" translate="yes" xml:space="preserve">
          <source>You can do better. The current version of the helper function can only alias the &lt;code&gt;Parent&lt;/code&gt; class interface. The application might have a variety of parent types, each with its own class interface token.</source>
          <target state="translated">넌 더 잘할 수있어. 도우미 함수의 현재 버전은 &lt;code&gt;Parent&lt;/code&gt; 클래스 인터페이스의 별칭 만 지정할 수 있습니다 . 응용 프로그램에는 각각 고유 클래스 인터페이스 토큰이있는 다양한 상위 유형이있을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c7e5b36898ec53ccfbae3960fab9e44e2c6e63e8" translate="yes" xml:space="preserve">
          <source>You can do this using the &lt;code&gt;Tree&lt;/code&gt; object that is passed in to the factory function. The &lt;code&gt;Tree&lt;/code&gt; methods give you access to the complete file tree in your workspace, allowing you to read and write files during the execution of the schematic.</source>
          <target state="translated">팩토리 함수에 전달 된 &lt;code&gt;Tree&lt;/code&gt; 객체를 사용하여이 작업을 수행 할 수 있습니다 . &lt;code&gt;Tree&lt;/code&gt; 방법은 당신이 회로도를 실행하는 동안 읽기 및 쓰기 파일을 할 수 있도록 작업 공간에 전체 파일 트리에 대한 액세스를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="d60529d154b74681358fb9cf90c6c7508fc0ed4d" translate="yes" xml:space="preserve">
          <source>You can do this with the following CLI command:</source>
          <target state="translated">다음 CLI 명령으로이를 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="13f0f823e3d3100beeeb91979f874022c4217e88" translate="yes" xml:space="preserve">
          <source>You can download and install these npm packages by using the &lt;a href=&quot;https://docs.npmjs.com/cli/install&quot;&gt;npm CLI client&lt;/a&gt;, which is installed with and runs as a &lt;a href=&quot;https://nodejs.org&quot;&gt;Node.js&amp;reg;&lt;/a&gt; application. By default, the Angular CLI uses the npm client.</source>
          <target state="translated">&lt;a href=&quot;https://nodejs.org&quot;&gt;Node.js&amp;reg;&lt;/a&gt; 애플리케이션 과 함께 설치되고 실행되는 &lt;a href=&quot;https://docs.npmjs.com/cli/install&quot;&gt;npm CLI 클라이언트&lt;/a&gt; 를 사용하여 이러한 npm 패키지를 다운로드하고 설치할 수 있습니다 . 기본적으로 Angular CLI는 npm 클라이언트를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="a02e0bb30025aa00e170368ade31ca3ea0131f9b" translate="yes" xml:space="preserve">
          <source>You can download the full code for the example here.</source>
          <target state="translated">예제의 전체 코드를 여기에서 다운로드 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9c2a2a89a8319949ef9b88709ed46c7cdbf8bf21" translate="yes" xml:space="preserve">
          <source>You can dramatically reduce launch time by only loading the application modules that absolutely must be present when the app starts.</source>
          <target state="translated">앱을 시작할 때 반드시 있어야하는 애플리케이션 모듈 만로드하여 시작 시간을 크게 줄일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4f4c3896b5dc34933cdf887de5836df2414d596e" translate="yes" xml:space="preserve">
          <source>You can easily prepare an app for server-side rendering by using the &lt;a href=&quot;glossary#cli&quot;&gt;CLI&lt;/a&gt; to run the &lt;a href=&quot;glossary#universal&quot;&gt;Angular Universal&lt;/a&gt; tool, using the &lt;code&gt;@nguniversal/express-engine&lt;/code&gt;&lt;a href=&quot;glossary#schematic&quot;&gt;schematic&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;@nguniversal/express-engine&lt;/code&gt; &lt;a href=&quot;glossary#schematic&quot;&gt;개략도&lt;/a&gt; 를 사용하여 &lt;a href=&quot;glossary#cli&quot;&gt;CLI&lt;/a&gt; 를 사용 하여 &lt;a href=&quot;glossary#universal&quot;&gt;Angular Universal&lt;/a&gt; 도구 를 실행 하여 서버 측 렌더링을위한 앱을 쉽게 준비 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a143e8b55a76be2dea3a8ae04ec59950910ae18d" translate="yes" xml:space="preserve">
          <source>You can easily prepare an app for server-side rendering using the &lt;a href=&quot;glossary#cli&quot;&gt;Angular CLI&lt;/a&gt;. The CLI schematic &lt;code&gt;@nguniversal/express-engine&lt;/code&gt; performs the required steps, as described below.</source>
          <target state="translated">&lt;a href=&quot;glossary#cli&quot;&gt;Angular CLI를&lt;/a&gt; 사용하여 서버 측 렌더링을 위해 앱을 쉽게 준비 할 수 있습니다 . &lt;code&gt;@nguniversal/express-engine&lt;/code&gt; CLI 회로도 는 아래 설명과 같이 필요한 단계를 수행합니다.</target>
        </trans-unit>
        <trans-unit id="a3830cf1ca507cad1ddec4a3f166a3756522e2ff" translate="yes" xml:space="preserve">
          <source>You can edit the generated files directly, or add to and modify them using CLI commands. Use the &lt;a href=&quot;https://angular.io/cli/generate&quot;&gt;ng generate&lt;/a&gt; command to add new files for additional components and services, and code for new pipes, directives, and so on. Commands such as &lt;a href=&quot;https://angular.io/cli/add&quot;&gt;add&lt;/a&gt; and &lt;a href=&quot;https://angular.io/cli/generate&quot;&gt;generate&lt;/a&gt;, which create or operate on apps and libraries, must be executed from within a workspace or project folder.</source>
          <target state="translated">생성 된 파일을 직접 편집하거나 CLI 명령을 사용하여 파일을 추가 및 수정할 수 있습니다. &lt;a href=&quot;https://angular.io/cli/generate&quot;&gt;ng generate&lt;/a&gt; 명령을 사용하여 추가 구성 요소 및 서비스를위한 새 파일을 추가하고 새 파이프, 지시문 등을위한 코드를 추가하십시오. 앱 및 라이브러리에서 작성 또는 작동하는 &lt;a href=&quot;https://angular.io/cli/add&quot;&gt;add&lt;/a&gt; 및 &lt;a href=&quot;https://angular.io/cli/generate&quot;&gt;generate&lt;/a&gt; 와 같은 명령 은 작업 공간 또는 프로젝트 폴더 내에서 실행해야합니다.</target>
        </trans-unit>
        <trans-unit id="55b2b440eef3d22b70c021aecd01704cff5b5ffb" translate="yes" xml:space="preserve">
          <source>You can edit the proxy configuration file to add configuration options; some examples are given below. For a description of all options, see &lt;a href=&quot;https://webpack.js.org/configuration/dev-server/#devserver-proxy&quot;&gt;webpack DevServer documentation&lt;/a&gt;.</source>
          <target state="translated">프록시 구성 파일을 편집하여 구성 옵션을 추가 할 수 있습니다. 몇 가지 예가 아래에 나와 있습니다. 모든 옵션에 대한 설명은 &lt;a href=&quot;https://webpack.js.org/configuration/dev-server/#devserver-proxy&quot;&gt;webpack DevServer documentation를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="d55887342a7e2b4bf61a9bc497f55a86b85f0a3c" translate="yes" xml:space="preserve">
          <source>You can embed CSS styles directly into the HTML template by putting them inside &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/animations/style&quot;&gt;style&lt;/a&gt;&amp;gt;&lt;/code&gt; tags.</source>
          <target state="translated">CSS 스타일을 &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/animations/style&quot;&gt;style&lt;/a&gt;&amp;gt;&lt;/code&gt; 태그 안에 넣어 HTML 템플릿에 직접 포함시킬 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="59381f7e67a6d9d828a11b65cfc74f3f527203a2" translate="yes" xml:space="preserve">
          <source>You can embed the child components in the top component's template. Alternatively, make the top component a routing host by giving it a &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&amp;gt;&lt;/code&gt;. Define child routes and let the router load module components into that outlet.</source>
          <target state="translated">하위 구성 요소를 최상위 구성 요소의 템플리트에 임베드 할 수 있습니다. 또는 &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&amp;gt;&lt;/code&gt; 을 제공하여 최상위 구성 요소를 라우팅 호스트로 만드 십시오 . 하위 경로를 정의하고 라우터가 해당 콘센트에 모듈 구성 요소를로드하도록하십시오.</target>
        </trans-unit>
        <trans-unit id="953bebafebd51eb4c834565e895b188e6299649c" translate="yes" xml:space="preserve">
          <source>You can evolve the &lt;code&gt;HeroDetailComponent&lt;/code&gt; into a rich hero editor without touching the parent &lt;code&gt;HeroesComponent&lt;/code&gt;.</source>
          <target state="translated">부모 &lt;code&gt;HeroesComponent&lt;/code&gt; 를 건드리지 않고 &lt;code&gt;HeroDetailComponent&lt;/code&gt; 를 풍부한 영웅 편집기로 발전시킬 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="7d14f84ae6b84469f93f38c19cac1baac2328f35" translate="yes" xml:space="preserve">
          <source>You can evolve the &lt;code&gt;HeroesComponent&lt;/code&gt; without touching the hero detail view.</source>
          <target state="translated">영웅 디테일 뷰를 건드리지 않고 &lt;code&gt;HeroesComponent&lt;/code&gt; 를 진화시킬 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="dd30bc281b49ef7b245cac200e3d2195aa62b753" translate="yes" xml:space="preserve">
          <source>You can extend the HTML vocabulary of your templates with components and directives that appear as new elements and attributes. In the following sections, you'll learn how to get and set DOM (Document Object Model) values dynamically through data binding.</source>
          <target state="translated">새로운 요소 및 속성으로 나타나는 구성 요소 및 지시문을 사용하여 템플릿의 HTML 어휘를 확장 할 수 있습니다. 다음 섹션에서는 데이터 바인딩을 통해 DOM (Document Object Model) 값을 동적으로 가져오고 설정하는 방법에 대해 설명합니다.</target>
        </trans-unit>
        <trans-unit id="c0277bf0af27fe3682bdfe5a611d0bd44ec3863e" translate="yes" xml:space="preserve">
          <source>You can extract that logic into a helper function like the following.</source>
          <target state="translated">다음과 같이 해당 논리를 도우미 함수로 추출 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e3244f9996e0345480cc6e85252fa30afafd1a3d" translate="yes" xml:space="preserve">
          <source>You can find a full-featured example with custom Bazel configurations at &lt;a href=&quot;http://github.com/angular/angular-bazel-example&quot;&gt;http://github.com/angular/angular-bazel-example&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://github.com/angular/angular-bazel-example&quot;&gt;http://github.com/angular/angular-bazel-example&lt;/a&gt; 에서 맞춤형 Bazel 구성을 갖춘 모든 기능을 갖춘 예제를 찾을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="6a5dfa2867ec063c10de236be817414ebb299888" translate="yes" xml:space="preserve">
          <source>You can find a parent component with a &lt;a href=&quot;dependency-injection-in-action#class-interface&quot;&gt;class interface&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;dependency-injection-in-action#class-interface&quot;&gt;클래스 인터페이스가&lt;/a&gt; 있는 상위 컴포넌트를 찾을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="7e675b03c39c851f8b67200a9727d69956a81531" translate="yes" xml:space="preserve">
          <source>You can find out more about TypeScript support in Visual Studio &lt;strong&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/typescript/announcing-typescript-3-1/&quot;&gt;here&lt;/a&gt;&lt;/strong&gt;.</source>
          <target state="translated">Visual Studio의 TypeScript 지원에 대한 자세한 내용은 &lt;strong&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/typescript/announcing-typescript-3-1/&quot;&gt;여기를 참조하십시오&lt;/a&gt;&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="cdb7d0fae6312602ef41e8ab26fbb1e0c71bf16f" translate="yes" xml:space="preserve">
          <source>You can find the code from the examples used here in &lt;a href=&quot;https://github.com/mgechev/cli-builders-demo&quot;&gt;this GitHub repository&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/mgechev/cli-builders-demo&quot;&gt;이 GitHub 리포지토리&lt;/a&gt; 에서 여기에 사용 된 예제에서 코드를 찾을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="7139d56e71c53394c552354f6dc94485d47d774d" translate="yes" xml:space="preserve">
          <source>You can fine-tune many options by editing the &lt;code&gt;karma.conf.js&lt;/code&gt; and the &lt;code&gt;test.ts&lt;/code&gt; files in the &lt;code&gt;src/&lt;/code&gt; folder.</source>
          <target state="translated">&lt;code&gt;src/&lt;/code&gt; 폴더 에서 &lt;code&gt;karma.conf.js&lt;/code&gt; 및 &lt;code&gt;test.ts&lt;/code&gt; 파일 을 편집하여 많은 옵션을 미세 조정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="4183363dbcc2b00645b348754346df8bdfbefe47" translate="yes" xml:space="preserve">
          <source>You can fix the error by converting to this:</source>
          <target state="translated">다음과 같이 변환하여 오류를 해결할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e4e039b97114a71a3ad91fd8f91f005c957be10b" translate="yes" xml:space="preserve">
          <source>You can float the image to the left or right of text by applying the class=&quot;left&quot; or class=&quot;right&quot; attributes respectively.</source>
          <target state="translated">class = &quot;left&quot;또는 class = &quot;right&quot;속성을 각각 적용하여 이미지를 텍스트의 왼쪽 또는 오른쪽으로 띄울 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="02a6b79592ca7ded1204263d305e6d1f79e1b37d" translate="yes" xml:space="preserve">
          <source>You can force a single space to be preserved in a text node by using &lt;code&gt;&amp;amp;ngsp;&lt;/code&gt;, which is replaced with a space character by Angular's template compiler:</source>
          <target state="translated">&lt;code&gt;&amp;amp;ngsp;&lt;/code&gt; 를 사용하여 텍스트 노드에서 단일 공간을 유지하도록 할 수 있습니다 . Angular의 템플릿 컴파일러에 의해 공백 문자로 대체됩니다.</target>
        </trans-unit>
        <trans-unit id="0cf5418bbf3be1c76066055129b066c942158ee6" translate="yes" xml:space="preserve">
          <source>You can free the links from this dependency by defining paths that are &lt;strong&gt;relative&lt;/strong&gt; to the current URL segment. Navigation &lt;em&gt;within&lt;/em&gt; the feature area remains intact even if you change the parent route path to the feature.</source>
          <target state="translated">현재 URL 세그먼트에 &lt;strong&gt;상대적인&lt;/strong&gt; 경로를 정의하여이 종속성에서 링크를 해제 할 수 있습니다 . 상위 경로 경로를 피쳐로 변경하더라도 피쳐 영역 &lt;em&gt;내&lt;/em&gt; 탐색 은 그대로 유지됩니다.</target>
        </trans-unit>
        <trans-unit id="14d266a08a1829aaabf8a339bc2083708e745d2d" translate="yes" xml:space="preserve">
          <source>You can further configure assets to be copied by specifying assets as objects, rather than as simple paths relative to the workspace root. A asset specification object can have the following fields.</source>
          <target state="translated">작업 공간 루트에 상대적인 단순 경로가 아닌 자산을 자산으로 지정하여 자산이 복사되도록 추가 구성 할 수 있습니다. 자산 스펙 오브젝트는 다음 필드를 가질 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0523228fda909a4e3f682c92ec4eb74a546dfea5" translate="yes" xml:space="preserve">
          <source>You can go old-school with the &lt;code&gt;&lt;a href=&quot;../api/common/hashlocationstrategy&quot;&gt;HashLocationStrategy&lt;/a&gt;&lt;/code&gt; by providing the &lt;code&gt;useHash: true&lt;/code&gt; in an object as the second argument of the &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt; in the &lt;code&gt;AppModule&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;AppModule&lt;/code&gt; 에서 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt; 의 두 번째 인수로 객체에 &lt;code&gt;useHash: true&lt;/code&gt; 를 제공하여 HashLocationStrategy를 사용하여 &lt;code&gt;&lt;a href=&quot;../api/common/hashlocationstrategy&quot;&gt;HashLocationStrategy&lt;/a&gt;&lt;/code&gt; 으로 갈 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="2f83daad825c2f27b864014bca63f996be0470b9" translate="yes" xml:space="preserve">
          <source>You can handle this with a &lt;code&gt;select&lt;/code&gt; ICU expression. It is similar to the &lt;code&gt;plural&lt;/code&gt; expressions except that you choose among alternative translations based on a string value instead of a number, and you define those string values.</source>
          <target state="translated">&lt;code&gt;select&lt;/code&gt; ICU 표현식으로 이를 처리 할 수 ​​있습니다 . 숫자 대신 문자열 값을 기준으로 대체 변환 중에서 선택하고 해당 문자열 값을 정의한다는 점을 제외하고 는 &lt;code&gt;plural&lt;/code&gt; 표현식 과 유사 합니다.</target>
        </trans-unit>
        <trans-unit id="e324b17603243d77a5b9220072a776f8afa8a8af" translate="yes" xml:space="preserve">
          <source>You can have multiple guards at every level of a routing hierarchy. The router checks the &lt;code&gt;&lt;a href=&quot;../api/router/candeactivate&quot;&gt;CanDeactivate&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/router/canactivatechild&quot;&gt;CanActivateChild&lt;/a&gt;&lt;/code&gt; guards first, from the deepest child route to the top. Then it checks the &lt;code&gt;&lt;a href=&quot;../api/router/canactivate&quot;&gt;CanActivate&lt;/a&gt;&lt;/code&gt; guards from the top down to the deepest child route. If the feature module is loaded asynchronously, the &lt;code&gt;&lt;a href=&quot;../api/router/canload&quot;&gt;CanLoad&lt;/a&gt;&lt;/code&gt; guard is checked before the module is loaded. If &lt;em&gt;any&lt;/em&gt; guard returns false, pending guards that have not completed will be canceled, and the entire navigation is canceled.</source>
          <target state="translated">라우팅 계층의 모든 수준에서 여러 가드를 가질 수 있습니다. 라우터는 가장 깊은 하위 경로에서 상단까지 &lt;code&gt;&lt;a href=&quot;../api/router/candeactivate&quot;&gt;CanDeactivate&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;../api/router/canactivatechild&quot;&gt;CanActivateChild&lt;/a&gt;&lt;/code&gt; 가드를 먼저 확인합니다 . 그런 다음 &lt;code&gt;&lt;a href=&quot;../api/router/canactivate&quot;&gt;CanActivate&lt;/a&gt;&lt;/code&gt; 가드를 위에서 아래로 가장 깊은 하위 경로까지 검사 합니다. 기능 모듈이 비동기식으로로드 되면 모듈을로드하기 전에 &lt;code&gt;&lt;a href=&quot;../api/router/canload&quot;&gt;CanLoad&lt;/a&gt;&lt;/code&gt; 가드를 확인합니다. 경우 &lt;em&gt;모든&lt;/em&gt; 경비는 false를 반환 완료되지 않은 대기중인 경비원이 취소되며, 전체 탐색이 취소됩니다.</target>
        </trans-unit>
        <trans-unit id="f17b33a8668079897337758622845364d5988572" translate="yes" xml:space="preserve">
          <source>You can ignore this section if you &lt;em&gt;only&lt;/em&gt; run tests with the CLI &lt;code&gt;ng test&lt;/code&gt; command because the CLI compiles the application before running the tests.</source>
          <target state="translated">CLI 는 테스트를 실행하기 전에 애플리케이션을 컴파일하므로 CLI &lt;code&gt;ng test&lt;/code&gt; 명령으로 테스트 &lt;em&gt;만&lt;/em&gt; 실행 하는 경우이 섹션을 무시할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="74f74e622335e9c1a7e6eb95fadee60d4aeee5cb" translate="yes" xml:space="preserve">
          <source>You can implement custom scroll restoration behavior by adapting the enabled behavior as in the following example.</source>
          <target state="translated">다음 예제와 같이 활성화 된 동작을 조정하여 사용자 정의 스크롤 복원 동작을 구현할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="63ab6fcd9949fcaabde71a35cfa892d68734915b" translate="yes" xml:space="preserve">
          <source>You can import many standard directives from the &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; but some familiar directives belong to other modules. For example, you can use &lt;code&gt;[(&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;)]&lt;/code&gt; only after importing the Angular &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; 에서 많은 표준 지시문을 가져올 수 있지만 일부 친숙한 지시문은 다른 모듈에 속합니다. 예를 들어 Angular &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; 을 가져온 후에 만 &lt;code&gt;[(&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;)]&lt;/code&gt; 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="048d6b955997ab2dc90361320fef8a383f5dbdc3" translate="yes" xml:space="preserve">
          <source>You can import the reusable &lt;code&gt;transAnimation&lt;/code&gt; variable in your component class and reuse it using the &lt;code&gt;&lt;a href=&quot;../api/animations/useanimation&quot;&gt;useAnimation&lt;/a&gt;()&lt;/code&gt; method as shown below.</source>
          <target state="translated">컴포넌트 클래스에서 재사용 가능한 &lt;code&gt;transAnimation&lt;/code&gt; 변수를 가져 와서 아래와 같이 &lt;code&gt;&lt;a href=&quot;../api/animations/useanimation&quot;&gt;useAnimation&lt;/a&gt;()&lt;/code&gt; 메소드를 사용하여 재사용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="cb0b05a9fa7fcb3928b70e74b8f3538db46d78f8" translate="yes" xml:space="preserve">
          <source>You can improve the form. The &lt;em&gt;Name&lt;/em&gt; input box is required and clearing it turns the bar red. That says something is wrong but the user doesn't know &lt;em&gt;what&lt;/em&gt; is wrong or what to do about it. Leverage the control's state to reveal a helpful message.</source>
          <target state="translated">양식을 향상시킬 수 있습니다. &lt;em&gt;이름&lt;/em&gt; 입력 상자가 필요하고 삭제하는 것은 빨간색 막대를 회전한다. 그것은 무언가 잘못되었다고 말하지만 사용자는 &lt;em&gt;무엇이&lt;/em&gt; 잘못되었거나 무엇을해야하는지 모른다. 컨트롤 상태를 활용하여 유용한 메시지를 표시하십시오.</target>
        </trans-unit>
        <trans-unit id="a0c75c66228b5f5ce329827b3449e29bf82dcddc" translate="yes" xml:space="preserve">
          <source>You can include multiple state pairs within the same &lt;code&gt;&lt;a href=&quot;../api/animations/transition&quot;&gt;transition&lt;/a&gt;()&lt;/code&gt; argument: &lt;code&gt;&lt;a href=&quot;../api/animations/transition&quot;&gt;transition&lt;/a&gt;( 'on =&amp;gt; off, off =&amp;gt; void' )&lt;/code&gt;.</source>
          <target state="translated">동일한 &lt;code&gt;&lt;a href=&quot;../api/animations/transition&quot;&gt;transition&lt;/a&gt;()&lt;/code&gt; 인수 내에 &lt;code&gt;&lt;a href=&quot;../api/animations/transition&quot;&gt;transition&lt;/a&gt;( 'on =&amp;gt; off, off =&amp;gt; void' )&lt;/code&gt; 내에 여러 상태 쌍을 포함시킬 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="9ac156c79a06cd914e8c4b134fe770761f4f8382" translate="yes" xml:space="preserve">
          <source>You can initialize a form array with any number of controls, from zero to many, by defining them in an array. Add an &lt;code&gt;aliases&lt;/code&gt; property to the form group instance for &lt;code&gt;profileForm&lt;/code&gt; to define the form array.</source>
          <target state="translated">배열에서 컨트롤을 정의하여 0에서 많은 컨트롤까지 원하는 수의 폼 배열로 초기화 할 수 있습니다. &lt;code&gt;profileForm&lt;/code&gt; 이 양식 배열을 정의하도록 양식 그룹 인스턴스에 &lt;code&gt;aliases&lt;/code&gt; 특성을 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="57a7cbf9d17d84729454c2ae11c3381c9231cf33" translate="yes" xml:space="preserve">
          <source>You can inject &lt;code&gt;Logger&lt;/code&gt;, but you can't inject the &lt;code&gt;isAuthorized&lt;/code&gt; flag. Instead, you can use a factory provider to create a new logger instance for &lt;code&gt;HeroService&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Logger&lt;/code&gt; 를 주입 할 수 있지만 &lt;code&gt;isAuthorized&lt;/code&gt; 플래그를 주입 할 수 없습니다 . 대신 팩토리 제공자를 사용하여 &lt;code&gt;HeroService&lt;/code&gt; 에 대한 새 로거 인스턴스를 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d358461a8a4ad4e8935a6c66926e986469d18046" translate="yes" xml:space="preserve">
          <source>You can inject a &lt;code&gt;&lt;a href=&quot;swpush&quot;&gt;SwPush&lt;/a&gt;&lt;/code&gt; instance into any component or service as a dependency.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;swpush&quot;&gt;SwPush&lt;/a&gt;&lt;/code&gt; 인스턴스를 모든 구성 요소 또는 서비스에 종속성으로 삽입 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="4e31ab6372af6365b67fa16cea127e455ab610dd" translate="yes" xml:space="preserve">
          <source>You can inspect the router's current configuration any time by injecting it and examining its &lt;code&gt;&lt;a href=&quot;../api/router/router#config&quot;&gt;config&lt;/a&gt;&lt;/code&gt; property. For example, update the &lt;code&gt;AppModule&lt;/code&gt; as follows and look in the browser console window to see the finished route configuration.</source>
          <target state="translated">라우터를 주입하고 &lt;code&gt;&lt;a href=&quot;../api/router/router#config&quot;&gt;config&lt;/a&gt;&lt;/code&gt; 속성을 검사하여 언제든지 라우터의 현재 구성을 검사 할 수 있습니다 . 예를 들어, 다음과 같이 &lt;code&gt;AppModule&lt;/code&gt; 을 업데이트하고 브라우저 콘솔 창에서 완성 된 경로 구성을 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="88e42aa644052a3cd780c837838d3b25c03ed2aa" translate="yes" xml:space="preserve">
          <source>You can install these typings via &lt;code&gt;npm&lt;/code&gt; using the &lt;a href=&quot;http://www.typescriptlang.org/docs/handbook/declaration-files/consumption.html&quot;&gt;&lt;code&gt;@types/*&lt;/code&gt; scoped package&lt;/a&gt; and Typescript, starting at 2.0, automatically recognizes them.</source>
          <target state="translated">&lt;a href=&quot;http://www.typescriptlang.org/docs/handbook/declaration-files/consumption.html&quot;&gt; &lt;code&gt;@types/*&lt;/code&gt; &lt;/a&gt; 범위의 패키지를 사용하여 &lt;code&gt;npm&lt;/code&gt; 을 통해 이러한 입력을 설치할 수 있으며 2.0부터 시작하여 Typescript가 자동으로 인식됩니다.</target>
        </trans-unit>
        <trans-unit id="e311ff2a06fc6a14636f4cb8e72cf657949b7e97" translate="yes" xml:space="preserve">
          <source>You can invoke a builder indirectly through a CLI command, or directly with the Angular CLI &lt;code&gt;ng run&lt;/code&gt; command. In either case, you must provide required inputs, but can allow other inputs to default to values that are pre-configured for a specific &lt;a href=&quot;glossary#target&quot;&gt;&lt;em&gt;target&lt;/em&gt;&lt;/a&gt;, provide a pre-defined, named override configuration, and provide further override option values on the command line.</source>
          <target state="translated">CLI 명령을 통해 간접적으로 또는 Angular CLI &lt;code&gt;ng run&lt;/code&gt; 명령을 사용 하여 빌더를 간접적으로 호출 할 수 있습니다 . 각각의 경우에, 당신은 필요한 입력을 제공해야하지만, 다른 입력이 특정에 대한 사전 구성 값을 기본값으로 허용 할 수있다 &lt;a href=&quot;glossary#target&quot;&gt;&lt;em&gt;대상&lt;/em&gt;&lt;/a&gt; , 미리 정의라는 재정의 구성을 제공하고, 명령 행에 더 재정의 옵션 값을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="c328e928c0f81c114fcb525c3dd49a41f94be397" translate="yes" xml:space="preserve">
          <source>You can learn about more advanced features in Angular animations under the Animation section, beginning with advanced techniques in &lt;a href=&quot;transition-and-triggers&quot;&gt;transition and triggers&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;transition-and-triggers&quot;&gt;전환 및 트리거의&lt;/a&gt; 고급 기술부터 시작하여 애니메이션 섹션에서 각도 애니메이션의 고급 기능에 대해 배울 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="5d504b4aea418c20eb9652980c43550affca7677" translate="yes" xml:space="preserve">
          <source>You can limit the scope of an injected service to a &lt;em&gt;branch&lt;/em&gt; of the application hierarchy by providing that service &lt;em&gt;at the sub-root component for that branch&lt;/em&gt;. This example shows how to make a different instance of &lt;code&gt;HeroService&lt;/code&gt; available to &lt;code&gt;HeroesBaseComponent&lt;/code&gt; by adding it to the &lt;code&gt;providers&lt;/code&gt; array of the &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; decorator of the sub-component.</source>
          <target state="translated">해당 &lt;em&gt;지점&lt;/em&gt; 의 &lt;em&gt;하위 루트 구성 요소에서&lt;/em&gt; 해당 서비스 &lt;em&gt;를&lt;/em&gt; 제공 하여 주입 된 서비스의 범위를 응용 프로그램 계층 의 &lt;em&gt;지점&lt;/em&gt; 으로 제한 할 수 있습니다 . 이 예는 하위 &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; 의 @ Component () 데코레이터의 &lt;code&gt;providers&lt;/code&gt; 배열에 &lt;code&gt;HeroesBaseComponent&lt;/code&gt; 에 다른 &lt;code&gt;HeroService&lt;/code&gt; 인스턴스를 추가하여 사용 가능 하게하는 방법을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="e6070da25b2a0b151c4ce287cbcaf5c26128e1f4" translate="yes" xml:space="preserve">
          <source>You can load feature areas only when requested by the user.</source>
          <target state="translated">사용자가 요청한 경우에만 기능 영역을로드 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="97e5cc86ea12ce045788f5079a5f052bb8f44ab3" translate="yes" xml:space="preserve">
          <source>You can load styles from external CSS files by adding a &lt;code&gt;&lt;a href=&quot;../api/core/component#styleUrls&quot;&gt;styleUrls&lt;/a&gt;&lt;/code&gt; property to a component's &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; decorator:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/component#styleUrls&quot;&gt;styleUrls&lt;/a&gt;&lt;/code&gt; 속성을 컴포넌트의 &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; 데코레이터 에 추가하여 외부 CSS 파일에서 스타일을로드 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="21d2bebf7b40dee40bc3a4ea1294b9a104a5f164" translate="yes" xml:space="preserve">
          <source>You can locate the anchor elements with an attached directive using &lt;code&gt;By.directive&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;By.directive&lt;/code&gt; 를 사용하여 연결된 지시문으로 앵커 요소를 찾을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="11b942fb978594e7c72343401bfdc14dac1069c9" translate="yes" xml:space="preserve">
          <source>You can make AngularJS services available for injection to Angular code by &lt;em&gt;upgrading&lt;/em&gt; them. The same singleton instance of each service is shared between the frameworks. In Angular these services will always be in the &lt;em&gt;root injector&lt;/em&gt; and available to all components.</source>
          <target state="translated">AngularJS 서비스를 &lt;em&gt;업그레이드&lt;/em&gt; 하여 Angular 코드에 주입 할 수 있습니다. 각 서비스의 동일한 단일 인스턴스가 프레임 워크간에 공유됩니다. Angular에서 이러한 서비스는 항상 &lt;em&gt;루트 인젝터에&lt;/em&gt; 있으며 모든 구성 요소에서 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c620f67eb0a795fbb0c95a02ff707b1d0e3f53a6" translate="yes" xml:space="preserve">
          <source>You can make a provider tree-shakable by specifying it in the &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; decorator on the service itself, rather than in the metadata for the NgModule or component that depends on the service.</source>
          <target state="translated">서비스에 의존하는 NgModule 또는 컴포넌트의 메타 데이터가 아닌 서비스 자체 의 &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; 데코레이터에서 공급자를 지정하여 공급자를 트리 스태킹 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f5115f6597d1fb8a8800fdb5e9baeb31f495399d" translate="yes" xml:space="preserve">
          <source>You can make better decisions about what to optimize and how when you have a clear and accurate understanding of what's making the application slow. The cause may not be what you think it is. You can waste a lot of time and money optimizing something that has no tangible benefit or even makes the app slower. You should measure the app's actual behavior when running in the environments that are important to you.</source>
          <target state="translated">응용 프로그램을 느리게 만드는 요소를 명확하고 정확하게 이해할 때 최적화 방법과 방법에 대해 더 나은 결정을 내릴 수 있습니다. 원인이 생각과 다를 수 있습니다. 실질적인 이점이 없거나 앱 속도를 늦추는 것을 최적화하는 데 많은 시간과 비용을 낭비 할 수 있습니다. 중요한 환경에서 실행할 때 앱의 실제 동작을 측정해야합니다.</target>
        </trans-unit>
        <trans-unit id="ea15caf34b9c2e675bec7f06fbaebb5697ffd0ac" translate="yes" xml:space="preserve">
          <source>You can make this more efficient with &lt;code&gt;trackBy&lt;/code&gt;. Add a method to the component that returns the value &lt;code&gt;NgFor&lt;/code&gt; should track. In this case, that value is the hero's &lt;code&gt;id&lt;/code&gt;. If the &lt;code&gt;id&lt;/code&gt; has already been rendered, Angular keeps track of it and doesn't re-query the server for the same &lt;code&gt;id&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;trackBy&lt;/code&gt; 로보다 효율적으로 만들 수 있습니다 . &lt;code&gt;NgFor&lt;/code&gt; 추적해야하는 값을 반환하는 메서드를 구성 요소에 추가하십시오 . 이 경우 해당 값은 영웅의 &lt;code&gt;id&lt;/code&gt; 입니다. &lt;code&gt;id&lt;/code&gt; 가 이미 렌더링 된 경우 Angular는 해당 ID 를 추적하고 동일한 &lt;code&gt;id&lt;/code&gt; 에 대해 서버를 다시 쿼리하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="045ade6f004f8024c8284fa17c5d7a0a2346b54e" translate="yes" xml:space="preserve">
          <source>You can manually adjust the Bazel configuration to:</source>
          <target state="translated">Bazel 구성을 수동으로 조정하여 다음을 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b61e4e80136f98ed58f12a42c20d45c91705d428" translate="yes" xml:space="preserve">
          <source>You can manually trigger a change detection run in Angular using &lt;a href=&quot;../../core/ngzone#run&quot;&gt;ngZone.run(...)&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../core/ngzone#run&quot;&gt;ngZone.run (...)을&lt;/a&gt; 사용하여 Angular에서 변경 감지 실행을 수동으로 트리거 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="58372084792d705f05707f76c61fb4eb814ea680" translate="yes" xml:space="preserve">
          <source>You can manually trigger a change detection run in AngularJS using &lt;a href=&quot;https://docs.angularjs.org/api/ng/type/%24rootScope.Scope#%24apply&quot;&gt;scope.$apply(...)&lt;/a&gt; or &lt;a href=&quot;https://docs.angularjs.org/api/ng/type/%24rootScope.Scope#%24digest&quot;&gt;$rootScope.$digest()&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://docs.angularjs.org/api/ng/type/%24rootScope.Scope#%24apply&quot;&gt;scope. $ apply (...)&lt;/a&gt; 또는 &lt;a href=&quot;https://docs.angularjs.org/api/ng/type/%24rootScope.Scope#%24digest&quot;&gt;$ rootScope. $ digest ()를&lt;/a&gt; 사용하여 AngularJS에서 변경 감지 실행을 수동으로 트리거 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="8c7243a1f5e131603784c456c2cc58a65c1e923e" translate="yes" xml:space="preserve">
          <source>You can mark required fields and invalid data at the same time with a colored bar on the left of the input box:</source>
          <target state="translated">입력 상자 왼쪽의 색상 막대를 사용하여 필수 필드와 유효하지 않은 데이터를 동시에 표시 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="88a8a63ecb441c7b5113a16a3b36a5b49c911106" translate="yes" xml:space="preserve">
          <source>You can mix simple and complex file references for styles and scripts.</source>
          <target state="translated">스타일과 스크립트에 대해 단순하고 복잡한 파일 참조를 혼합 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e5a0a85d80c2399e713250eb9c8252c0c895b8b6" translate="yes" xml:space="preserve">
          <source>You can nest &lt;em&gt;#docregions&lt;/em&gt; within &lt;em&gt;#docregions&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;#docregions&lt;/em&gt; 내에 &lt;em&gt;#docregion을&lt;/em&gt; 중첩 &lt;em&gt;시킬&lt;/em&gt; 수 있습니다&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="41e67eb51e333fead5fa73e3940ea80832ba058c" translate="yes" xml:space="preserve">
          <source>You can now inject &lt;code&gt;UserService&lt;/code&gt; anywhere in your application.</source>
          <target state="translated">이제 응용 프로그램의 어느 곳에서나 &lt;code&gt;UserService&lt;/code&gt; 를 주입 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d8087288313565593d700d4490b370c59ff4808f" translate="yes" xml:space="preserve">
          <source>You can now link the AngularJS and Angular modules together using &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; 사용하여 AngularJS 및 Angular 모듈을 함께 연결할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="701cf0f18eab7b3d090d4b2dc773f03f87a69e45" translate="yes" xml:space="preserve">
          <source>You can often use observables instead of promises to deliver values asynchronously. Similarly, observables can take the place of event handlers. Finally, because observables deliver multiple values, you can use them where you might otherwise build and operate on arrays.</source>
          <target state="translated">비동기식으로 값을 전달하는 약속 대신 관측 가능 항목을 사용할 수있는 경우가 종종 있습니다. 마찬가지로, Observable은 이벤트 핸들러를 대신 할 수 있습니다. 마지막으로, 옵저버 블은 여러 값을 제공하기 때문에 배열에서 구축 및 작동 할 수있는 위치에서 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c95780511a4865de9a130836f30d710e5494d668" translate="yes" xml:space="preserve">
          <source>You can override the default behavior to preserve whitespace characters in certain fragments of a template. For example, you can exclude an entire DOM sub-tree by using the &lt;code&gt;ngPreserveWhitespaces&lt;/code&gt; attribute:</source>
          <target state="translated">템플릿의 특정 조각에서 공백 문자를 유지하기 위해 기본 동작을 무시할 수 있습니다. 예를 들어 &lt;code&gt;ngPreserveWhitespaces&lt;/code&gt; 속성 을 사용하여 전체 DOM 하위 트리를 제외 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="daeb3c5b720f7322722cafbcc680d64a007b3a22" translate="yes" xml:space="preserve">
          <source>You can pass an &lt;code&gt;&lt;a href=&quot;httprequest&quot;&gt;HttpRequest&lt;/a&gt;&lt;/code&gt; directly as the only parameter. In this case, the call returns an observable of the raw &lt;code&gt;&lt;a href=&quot;httpevent&quot;&gt;HttpEvent&lt;/a&gt;&lt;/code&gt; stream.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;httprequest&quot;&gt;HttpRequest&lt;/a&gt;&lt;/code&gt; 를 유일한 매개 변수로 직접 전달할 수 있습니다 . 이 경우 호출은 원시 &lt;code&gt;&lt;a href=&quot;httpevent&quot;&gt;HttpEvent&lt;/a&gt;&lt;/code&gt; 스트림 의 관찰 가능 항목을 리턴 합니다.</target>
        </trans-unit>
        <trans-unit id="3185ab6fec67953120e0e3dfce102272c27a3966" translate="yes" xml:space="preserve">
          <source>You can place a local variable, &lt;code&gt;#timer&lt;/code&gt;, on the tag &lt;code&gt;&amp;lt;countdown-timer&amp;gt;&lt;/code&gt; representing the child component. That gives you a reference to the child component and the ability to access &lt;em&gt;any of its properties or methods&lt;/em&gt; from within the parent template.</source>
          <target state="translated">하위 구성 요소를 나타내는 &lt;code&gt;&amp;lt;countdown-timer&amp;gt;&lt;/code&gt; 태그에 &lt;code&gt;#timer&lt;/code&gt; 로컬 변수를 배치 할 수 있습니다 . 그러면 하위 구성 요소에 대한 참조와 상위 템플릿 내에서 &lt;em&gt;해당 속성 또는 메서드&lt;/em&gt; 에 액세스 할 수 있습니다 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="538aeb68ccb0479fb2ec5493a04a764d6a34b9fb" translate="yes" xml:space="preserve">
          <source>You can provide a &lt;code&gt;&lt;a href=&quot;../animations/state&quot;&gt;state&lt;/a&gt;&lt;/code&gt; value to be persisted to the browser's History.state property (See &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/History#Properties&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/API/History#Properties&lt;/a&gt;). It's used as follows:</source>
          <target state="translated">브라우저의 History.state 속성에 유지 될 &lt;code&gt;&lt;a href=&quot;../animations/state&quot;&gt;state&lt;/a&gt;&lt;/code&gt; 값을 제공 할 수 있습니다 ( &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/History#Properties&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/API/History#Properties 참조&lt;/a&gt; ). 다음과 같이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="0ff1114178f29ffc52254006ffd95d9da686b8c6" translate="yes" xml:space="preserve">
          <source>You can provide a logger-like object.</source>
          <target state="translated">로거와 유사한 오브젝트를 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="676d7126f545e5e4768bed2cd0345410a667691f" translate="yes" xml:space="preserve">
          <source>You can provide a substitute class.</source>
          <target state="translated">대체 수업을 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a9a21dca8b65c320ef8f82a6f713ac6a63053eb5" translate="yes" xml:space="preserve">
          <source>You can provide optional route parameters in an object like this:</source>
          <target state="translated">다음과 같은 객체에 선택적 경로 매개 변수를 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="92f630132bb026b30dfb76b81ff8dc91955e4f6a" translate="yes" xml:space="preserve">
          <source>You can provide options in the &lt;code&gt;tsconfig.json&lt;/code&gt;&lt;a href=&quot;typescript-configuration&quot;&gt;TypeScript configuration file&lt;/a&gt; that control the compilation process. See &lt;a href=&quot;angular-compiler-options&quot;&gt;Angular compiler options&lt;/a&gt; for a complete list of available options.</source>
          <target state="translated">컴파일 프로세스를 제어하는 &lt;code&gt;tsconfig.json&lt;/code&gt; &lt;a href=&quot;typescript-configuration&quot;&gt;TypeScript 구성 파일에&lt;/a&gt; 옵션을 제공 할 수 있습니다 . 사용 가능한 옵션의 전체 목록은 &lt;a href=&quot;angular-compiler-options&quot;&gt;각도 컴파일러 옵션&lt;/a&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="e242f46e8ea47ee054b620b9ef85db8bc3f60a51" translate="yes" xml:space="preserve">
          <source>You can proxy multiple entries to the same target by defining the configuration in JavaScript.</source>
          <target state="translated">JavaScript에서 구성을 정의하여 여러 대상을 동일한 대상으로 프록시 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e2f27807ce823bda66ee569bdd20d88eff9d363d" translate="yes" xml:space="preserve">
          <source>You can publish the builder to &lt;code&gt;npm&lt;/code&gt; (see &lt;a href=&quot;creating-libraries#publishing-your-library&quot;&gt;Publishing your Library&lt;/a&gt;). If you publish it as &lt;code&gt;@example/my-builder&lt;/code&gt;, you can install it using the following command.</source>
          <target state="translated">빌더를 &lt;code&gt;npm&lt;/code&gt; 에 공개 할 수 있습니다 ( &lt;a href=&quot;creating-libraries#publishing-your-library&quot;&gt;라이브러리 공개&lt;/a&gt; 참조 ). &lt;code&gt;@example/my-builder&lt;/code&gt; 로 게시 하면 다음 명령을 사용하여 설치할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2c36c897ce7d3fdd4ea2b997c0a5cac88c795a31" translate="yes" xml:space="preserve">
          <source>You can quickly delete the &lt;em&gt;non-essential&lt;/em&gt; files that concern testing and QuickStart repository maintenance (&lt;strong&gt;&lt;em&gt;including all git-related artifacts&lt;/em&gt;&lt;/strong&gt; such as the &lt;code&gt;.git&lt;/code&gt; folder and &lt;code&gt;.gitignore&lt;/code&gt;!).</source>
          <target state="translated">테스트 및 QuickStart 리포지토리 유지 관리와 관련된 &lt;em&gt;중요하지 않은&lt;/em&gt; 파일 ( &lt;code&gt;.git&lt;/code&gt; 폴더 및 &lt;code&gt;.gitignore&lt;/code&gt; ! 와 같은 &lt;strong&gt;&lt;em&gt;모든 git 관련 아티팩트 포함)을&lt;/em&gt;&lt;/strong&gt; 빠르게 삭제할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c8b40253d813013725ea47afec63ea2be28a9278" translate="yes" xml:space="preserve">
          <source>You can re-use the &lt;code&gt;HeroDetailComponent&lt;/code&gt; in the template of some future component.</source>
          <target state="translated">향후 컴포넌트의 템플릿 에서 &lt;code&gt;HeroDetailComponent&lt;/code&gt; 를 재사용 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="56cc95da9973b3816e147921ac071900a4dc96b4" translate="yes" xml:space="preserve">
          <source>You can rebuild your library whenever you make changes to it, but this extra step takes time. &lt;em&gt;Incremental builds&lt;/em&gt; functionality improves the library-development experience. Every time a file is changed a partial build is performed that emits the amended files.</source>
          <target state="translated">라이브러리를 변경할 때마다 라이브러리를 재 구축 할 수 있지만이 추가 단계에는 시간이 걸립니다. &lt;em&gt;증분 빌드&lt;/em&gt; 기능은 라이브러리 개발 경험을 향상시킵니다. 파일이 변경 될 때마다 수정 된 파일을 내보내는 부분 빌드가 수행됩니다.</target>
        </trans-unit>
        <trans-unit id="f7ec3186adba56adb8f9143b8f42e25ff87f069c" translate="yes" xml:space="preserve">
          <source>You can refer to a template reference variable anywhere in the component's template. Here, a &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; further down the template refers to the &lt;code&gt;phone&lt;/code&gt; variable.</source>
          <target state="translated">컴포넌트 템플릿의 어느 곳에서나 템플릿 참조 변수를 참조 할 수 있습니다. 여기서 템플릿 아래쪽 으로 &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; 은 &lt;code&gt;phone&lt;/code&gt; 변수를 나타냅니다 .</target>
        </trans-unit>
        <trans-unit id="f6b770c753688e3e107552c140680af7064ef400" translate="yes" xml:space="preserve">
          <source>You can remove the &lt;code&gt;ng-app&lt;/code&gt; and &lt;code&gt;ng-strict-di&lt;/code&gt; directives from the HTML and instead switch to calling &lt;code&gt;angular.bootstrap&lt;/code&gt; from JavaScript, which will result in the same thing:</source>
          <target state="translated">당신은 제거 할 수 있습니다 &lt;code&gt;ng-app&lt;/code&gt; 과 &lt;code&gt;ng-strict-di&lt;/code&gt; HTML에서 지시를 대신 호출로 전환 &lt;code&gt;angular.bootstrap&lt;/code&gt; 같은 일이 발생합니다 자바 스크립트에서를 :</target>
        </trans-unit>
        <trans-unit id="4f60c3d9950ef77a8e039a1a31e3c8ff52b2c0d8" translate="yes" xml:space="preserve">
          <source>You can replace that with a binding to a string of the desired class names; this is an all-or-nothing, replacement binding.</source>
          <target state="translated">이를 원하는 클래스 이름의 문자열에 대한 바인딩으로 바꿀 수 있습니다. 이것은 전혀 또는 전혀없는 대체 바인딩입니다.</target>
        </trans-unit>
        <trans-unit id="206aafc37bb578768e7437683d411e6dd264c7f0" translate="yes" xml:space="preserve">
          <source>You can replace this implementation with an Angular service class, while keeping the controllers in AngularJS land.</source>
          <target state="translated">컨트롤러를 AngularJS 랜드에 유지하면서이 구현을 Angular 서비스 클래스로 대체 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1b887d25a90a1292b3bbb0b11889b1f7ff2cafc4" translate="yes" xml:space="preserve">
          <source>You can run the live example in Stackblitz and download the code from there.</source>
          <target state="translated">Stackblitz에서 라이브 예제를 실행하고 거기서 코드를 다운로드 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="85168d9914082585c0a0f29e0ee2e7411592612e" translate="yes" xml:space="preserve">
          <source>You can run the live example of the sample app that accompanies this guide.</source>
          <target state="translated">이 가이드와 함께 제공되는 샘플 앱의 라이브 예제를 실행할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bff3daf58991142a36fa7e1bfb8b0fc2eef1f638" translate="yes" xml:space="preserve">
          <source>You can run the live example that accompanies this guide.</source>
          <target state="translated">이 안내서와 함께 제공되는 라이브 예제를 실행할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="576ff802a6b3276e1c5dcfdb4a5924ab79d28e00" translate="yes" xml:space="preserve">
          <source>You can run these sample tests in a live coding environment.</source>
          <target state="translated">이 샘플 테스트는 라이브 코딩 환경에서 실행할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="60ab75ab23a5bae8c8870f7ce7de1176c12f8990" translate="yes" xml:space="preserve">
          <source>You can say &quot;OK&quot; and lose your changes or click &quot;Cancel&quot; and continue editing.</source>
          <target state="translated">&quot;확인&quot;이라고 말하고 변경 사항을 잃어 버리거나 &quot;취소&quot;를 클릭하고 편집을 계속하십시오.</target>
        </trans-unit>
        <trans-unit id="bd8060c9ef6844ae859fc100f0b1443fca20ae63" translate="yes" xml:space="preserve">
          <source>You can see &lt;a href=&quot;https://material.angular.io/components/form-field/overview&quot;&gt;&lt;code&gt;MatFormField&lt;/code&gt;&lt;/a&gt; as an example of this pattern.</source>
          <target state="translated">이 패턴의 예로 &lt;a href=&quot;https://material.angular.io/components/form-field/overview&quot;&gt; &lt;code&gt;MatFormField&lt;/code&gt; &lt;/a&gt; 를 볼 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="8d1c990e3148ef378045702cc6a3ce3ef228bc9d" translate="yes" xml:space="preserve">
          <source>You can see an &lt;a href=&quot;https://github.com/angular/angular-cli/blob/ba21c855c0c8b778005df01d4851b5a2176edc6f/packages/angular_devkit/build_angular/src/tslint/index.ts#L107&quot;&gt;example&lt;/a&gt; of how the &lt;code&gt;tslint&lt;/code&gt; builder reports progress.</source>
          <target state="translated">&lt;code&gt;tslint&lt;/code&gt; 빌더가 진행 상황을보고 하는 방법의 &lt;a href=&quot;https://github.com/angular/angular-cli/blob/ba21c855c0c8b778005df01d4851b5a2176edc6f/packages/angular_devkit/build_angular/src/tslint/index.ts#L107&quot;&gt;예&lt;/a&gt; 를 볼 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="128d004e25ac720b903271778856c926e0a4a47e" translate="yes" xml:space="preserve">
          <source>You can see examples of schema files for the Angular CLI command schematics in &lt;a href=&quot;https://github.com/angular/angular-cli/blob/7.0.x/packages/schematics/angular/application/schema.json&quot;&gt;&lt;code&gt;@schematics/angular&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/angular/angular-cli/blob/7.0.x/packages/schematics/angular/application/schema.json&quot;&gt; &lt;code&gt;@schematics/angular&lt;/code&gt; &lt;/a&gt; 에서 Angular CLI 명령 회로도의 스키마 파일 예제를 볼 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="502b585714ecf57ef0b9a3d545f8ad635566c0db" translate="yes" xml:space="preserve">
          <source>You can see examples of this pattern in Angular Material: &lt;a href=&quot;https://github.com/angular/components/blob/master/src/material/button/button.ts#L66-L68&quot;&gt;&lt;code&gt;MatButton&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/angular/components/blob/master/src/material/tabs/tab-nav-bar/tab-nav-bar.ts#L67&quot;&gt;&lt;code&gt;MatTabNav&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/angular/components/blob/master/src/material/table/table.ts#L17&quot;&gt;&lt;code&gt;MatTable&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Angular Material : &lt;a href=&quot;https://github.com/angular/components/blob/master/src/material/button/button.ts#L66-L68&quot;&gt; &lt;code&gt;MatButton&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;https://github.com/angular/components/blob/master/src/material/tabs/tab-nav-bar/tab-nav-bar.ts#L67&quot;&gt; &lt;code&gt;MatTabNav&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;https://github.com/angular/components/blob/master/src/material/table/table.ts#L17&quot;&gt; &lt;code&gt;MatTable&lt;/code&gt; &lt;/a&gt; 에서이 패턴의 예를 볼 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="cb3cfb701825a231377d8a0c8d03511a9984db53" translate="yes" xml:space="preserve">
          <source>You can see that the &quot;else&quot; clause references the &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; with the &lt;code&gt;#loading&lt;/code&gt; label, and the template for the &quot;then&quot; clause is provided as the content of the anchor element.</source>
          <target state="translated">&quot;else&quot;절 은 &lt;code&gt;#loading&lt;/code&gt; 레이블이 있는 &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; 을 참조 하고 &quot;then&quot;절의 템플리트는 앵커 요소의 컨텐츠로 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="56406c24ea9d5fc270b44c820d5c46a91cf9a288" translate="yes" xml:space="preserve">
          <source>You can see your deployed page at &lt;code&gt;https://&amp;lt;user_name&amp;gt;.github.io/&amp;lt;project_name&amp;gt;/&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;https://&amp;lt;user_name&amp;gt;.github.io/&amp;lt;project_name&amp;gt;/&lt;/code&gt; 에서 배포 된 페이지를 볼 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="4298c04a10fbb73991da64f5ec031597c9b432b6" translate="yes" xml:space="preserve">
          <source>You can set a variable's type to &lt;code&gt;any&lt;/code&gt; even when the &lt;code&gt;noImplicitAny&lt;/code&gt; flag is &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;noImplicitAny&lt;/code&gt; 플래그가 &lt;code&gt;true&lt;/code&gt; 인 경우에도 변수 유형을 &lt;code&gt;any&lt;/code&gt; 로 설정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="8bb6bf06c660edc5278f516a795c25ce73fe67af" translate="yes" xml:space="preserve">
          <source>You can set inline styles with a &lt;strong&gt;style binding&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;스타일 바인딩으로&lt;/strong&gt; 인라인 스타일을 설정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="73fbffd8c2305a57664c4637661d6594b370753a" translate="yes" xml:space="preserve">
          <source>You can set more than one class, as follows:</source>
          <target state="translated">다음과 같이 둘 이상의 클래스를 설정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9fdcdb04c738970582afb4da721d20f20288dd7a" translate="yes" xml:space="preserve">
          <source>You can set query params and fragment as follows:</source>
          <target state="translated">다음과 같이 쿼리 매개 변수 및 조각을 설정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4d3c527958b8644f52734e046ee392113aac88b4" translate="yes" xml:space="preserve">
          <source>You can set to &lt;code&gt;true&lt;/code&gt; when using factory summaries, because the factory summaries include a copy of the information that is in the &lt;code&gt;.metadata.json&lt;/code&gt; file.</source>
          <target state="translated">팩토리 요약에는 &lt;code&gt;.metadata.json&lt;/code&gt; 파일 에있는 정보의 사본이 포함되므로 팩토리 요약을 사용할 때 &lt;code&gt;true&lt;/code&gt; 로 설정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="77b582bcb0b4b2042388933028c395543a1496b7" translate="yes" xml:space="preserve">
          <source>You can share parameters between sibling components. For example, suppose that two sibling components should go next to each other, and both of them require an ID parameter. You can accomplish this using a route that does not specify a component at the top level.</source>
          <target state="translated">형제 구성 요소간에 매개 변수를 공유 할 수 있습니다. 예를 들어, 두 개의 형제 구성 요소가 서로 옆에 있어야하며 둘 다 ID 매개 변수가 필요하다고 가정하십시오. 최상위 레벨에서 구성 요소를 지정하지 않은 경로를 사용하여이를 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="245e2bae44d1ad9f4f464d6191b2f479fc2ec010" translate="yes" xml:space="preserve">
          <source>You can simulate a slower network to see the transition more clearly as follows:</source>
          <target state="translated">느린 네트워크를 시뮬레이션하여 다음과 같이 전환을보다 명확하게 볼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5f3e48771ab0b5e481a402f1de32597bec9dc7e5" translate="yes" xml:space="preserve">
          <source>You can sit with us!</source>
          <target state="translated">당신은 우리와 함께 앉을 수 있습니다!</target>
        </trans-unit>
        <trans-unit id="f413ab10e8c9f0d874618a045079dc6d1add43f4" translate="yes" xml:space="preserve">
          <source>You can specify more than one styles file or even a combination of &lt;code&gt;styles&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/core/component#styleUrls&quot;&gt;styleUrls&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">하나 이상의 스타일 파일을 지정하거나 &lt;code&gt;styles&lt;/code&gt; 과 &lt;code&gt;&lt;a href=&quot;../api/core/component#styleUrls&quot;&gt;styleUrls&lt;/a&gt;&lt;/code&gt; 조합을 지정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="46aeaff68e3cffc7073b5a9fac4b0569d9a1870c" translate="yes" xml:space="preserve">
          <source>You can specify multiple classes, as shown in the second example.</source>
          <target state="translated">두 번째 예와 같이 여러 클래스를 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f23a7667486ce010b7c65ae259fdea04c59f946f" translate="yes" xml:space="preserve">
          <source>You can specify size budgets for the entire app, and for particular parts. Each budget entry configures a budget of a given type. Specify size values in the following formats:</source>
          <target state="translated">전체 앱 및 특정 부분에 대한 크기 예산을 지정할 수 있습니다. 각 예산 항목은 주어진 유형의 예산을 구성합니다. 다음 형식으로 크기 값을 지정하십시오.</target>
        </trans-unit>
        <trans-unit id="e79f6e5db678454bbd9c78e2a80b279c19cd3f4d" translate="yes" xml:space="preserve">
          <source>You can specify the alias for the property name by passing the alias name to the &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt;/&lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; decorator. The internal name remains as usual.</source>
          <target state="translated">별명 이름을 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; / &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; 데코레이터 에 전달하여 특성 이름의 별명을 지정할 수 있습니다 . 내부 이름은 평소대로 유지됩니다.</target>
        </trans-unit>
        <trans-unit id="427d81b35ff85f26af415a525908e2e3608d841e" translate="yes" xml:space="preserve">
          <source>You can specify the base locale of your app with the&lt;code&gt;--i18n-locale&lt;/code&gt; command option:</source>
          <target state="translated">&lt;code&gt;--i18n-locale&lt;/code&gt; 명령 옵션 을 사용하여 앱의 기본 로캘을 지정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="4b958009f66b6d2a749dec89f849f3976c6d7e49" translate="yes" xml:space="preserve">
          <source>You can specify the path-match strategy 'full' to make sure that the path covers the whole unconsumed URL. It is important to do this when redirecting empty-path routes. Otherwise, because an empty path is a prefix of any URL, the router would apply the redirect even when navigating to the redirect destination, creating an endless loop.</source>
          <target state="translated">경로 일치 전략 'full'을 지정하여 경로가 사용되지 않은 전체 URL을 포함하도록 할 수 있습니다. 빈 경로 경로를 리디렉션 할 때이 작업을 수행해야합니다. 그렇지 않으면 빈 경로는 URL의 접두사이므로 라우터는 리디렉션 대상으로 탐색 할 때도 리디렉션을 적용하여 무한 루프를 만듭니다.</target>
        </trans-unit>
        <trans-unit id="9cc859d8b7efee88a04a13260cd3b9ab2e8329ef" translate="yes" xml:space="preserve">
          <source>You can specify the translation format explicitly with the &lt;code&gt;--i18nFormat&lt;/code&gt; command option, as illustrated in these example commands:</source>
          <target state="translated">다음 예제 명령 과 같이 &lt;code&gt;--i18nFormat&lt;/code&gt; 명령 옵션을 사용하여 변환 형식을 명시 적으로 지정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="384f16e367259f81cfe10962ce559119d58d1981" translate="yes" xml:space="preserve">
          <source>You can speed up load time for users that only visit certain areas of the application.</source>
          <target state="translated">응용 프로그램의 특정 영역 만 방문하는 사용자의로드 시간을 단축 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b6fbb559d826e90e9560e0b56fdf16a8a2f7e3a7" translate="yes" xml:space="preserve">
          <source>You can still load those files separately, but the order is important, you must import &lt;code&gt;proxy&lt;/code&gt; before &lt;code&gt;sync-test&lt;/code&gt;, &lt;code&gt;async-test&lt;/code&gt;, &lt;code&gt;fake-async-test&lt;/code&gt; and &lt;code&gt;jasmine-patch&lt;/code&gt;. And you also need to import &lt;code&gt;sync-test&lt;/code&gt; before &lt;code&gt;jasmine-patch&lt;/code&gt;, so it is recommended to just import &lt;code&gt;zone-testing&lt;/code&gt; instead of loading those separated files.</source>
          <target state="translated">해당 파일을 개별적으로로드 할 수 있지만 순서는 중요합니다. &lt;code&gt;sync-test&lt;/code&gt; , &lt;code&gt;async-test&lt;/code&gt; , &lt;code&gt;fake-async-test&lt;/code&gt; 및 &lt;code&gt;jasmine-patch&lt;/code&gt; 전에 &lt;code&gt;proxy&lt;/code&gt; 를 가져와야 합니다 . 또한 &lt;code&gt;jasmine-patch&lt;/code&gt; 전에 &lt;code&gt;sync-test&lt;/code&gt; 를 가져와야 하므로 분리 된 파일을로드하는 대신 &lt;code&gt;zone-testing&lt;/code&gt; 을 가져 오는 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="39f843fd7cb45bf1679e955a3d19b7628c2c7e35" translate="yes" xml:space="preserve">
          <source>You can store your component's template in one of two places. You can define it &lt;em&gt;inline&lt;/em&gt; using the &lt;code&gt;template&lt;/code&gt; property, or you can define the template in a separate HTML file and link to it in the component metadata using the &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; decorator's &lt;code&gt;templateUrl&lt;/code&gt; property.</source>
          <target state="translated">구성 요소 템플릿을 두 곳 중 하나에 저장할 수 있습니다. &lt;code&gt;template&lt;/code&gt; 속성을 사용하여 &lt;em&gt;인라인으로&lt;/em&gt; 정의 하거나 별도의 HTML 파일로 템플릿을 정의하고 &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt; 데코레이터의 &lt;code&gt;templateUrl&lt;/code&gt; 속성을 사용하여 구성 요소 메타 데이터에 링크 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c4a40114d213b47c1bd06b1cd7ea2c170cb47c4b" translate="yes" xml:space="preserve">
          <source>You can structure your &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; request to declare the type of the response object, to make consuming the output easier and more obvious. Specifying the response type acts as a type assertion during the compile time.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; 요청을 구성하여 응답 오브젝트의 유형을 선언하여 출력을보다 쉽고 명확하게 사용할 수 있습니다. 응답 유형을 지정하면 컴파일 시간 동안 유형 어설 션으로 작동합니다.</target>
        </trans-unit>
        <trans-unit id="49f719b0fb8d2848ee9889c71f9ea6dad214734e" translate="yes" xml:space="preserve">
          <source>You can supply an optional name to use in templates when the component is instantiated, that maps to the name of the bound property. By default, the original name of the bound property is used for input binding.</source>
          <target state="translated">컴포넌트가 인스턴스화 될 때 템플리트에서 사용할 바인딩 된 특성의 이름에 맵핑되는 선택적 이름을 제공 할 수 있습니다. 기본적으로 바인딩 된 속성의 원래 이름이 입력 바인딩에 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="2144f858ef2c0bf7f1ed6c42337e752160d88469" translate="yes" xml:space="preserve">
          <source>You can supply an optional name to use in templates when the component is instantiated, that maps to the name of the bound property. By default, the original name of the bound property is used for output binding.</source>
          <target state="translated">컴포넌트가 인스턴스화 될 때 템플리트에서 사용할 바인딩 된 특성의 이름에 맵핑되는 선택적 이름을 제공 할 수 있습니다. 기본적으로 바인딩 된 속성의 원래 이름이 출력 바인딩에 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="b7325974be7eba6bc5a5980629fe9753f8341d40" translate="yes" xml:space="preserve">
          <source>You can supply command options to change the format, the name, the location, and the source locale of the extracted file. For example, to create a file in the &lt;code&gt;src/&lt;a href=&quot;../api/common/nglocalelocalization#locale&quot;&gt;locale&lt;/a&gt;&lt;/code&gt; folder, specify the output path:</source>
          <target state="translated">추출 된 파일의 형식, 이름, 위치 및 소스 로캘을 변경하는 명령 옵션을 제공 할 수 있습니다. 예를 들어, &lt;code&gt;src/&lt;a href=&quot;../api/common/nglocalelocalization#locale&quot;&gt;locale&lt;/a&gt;&lt;/code&gt; 폴더에 파일을 작성 하려면 출력 경로를 지정하십시오.</target>
        </trans-unit>
        <trans-unit id="d2ad710db576d63dc67847e6d2a337321c53b95a" translate="yes" xml:space="preserve">
          <source>You can take advantage of Ahead-of-time (AOT) compilation on hybrid apps just like on any other Angular application. The setup for a hybrid app is mostly the same as described in &lt;a href=&quot;aot-compiler&quot;&gt;the Ahead-of-time Compilation chapter&lt;/a&gt; save for differences in &lt;code&gt;index.html&lt;/code&gt; and &lt;code&gt;main-aot.ts&lt;/code&gt;</source>
          <target state="translated">다른 Angular 응용 프로그램과 마찬가지로 하이브리드 앱에서 AOT (Ahead-of-time) 컴파일을 활용할 수 있습니다. 하이브리드 앱의 설정 은 &lt;code&gt;index.html&lt;/code&gt; 과 &lt;code&gt;main-aot.ts&lt;/code&gt; 의 차이점을 위해 &lt;a href=&quot;aot-compiler&quot;&gt;Ahead-of-time Compilation 장&lt;/a&gt; 저장 에서 설명한 것과 대부분 동일합니다.</target>
        </trans-unit>
        <trans-unit id="fec70fe3eb1b4b43b5aca7b7299a6b554656f9e0" translate="yes" xml:space="preserve">
          <source>You can take advantage of ahead-of-time (AOT) compilation in hybrid apps just like in any other Angular app. The setup for a hybrid app is mostly the same as described in the &lt;a href=&quot;aot-compiler&quot;&gt;Ahead-of-Time Compilation&lt;/a&gt; guide save for differences in &lt;code&gt;index.html&lt;/code&gt; and &lt;code&gt;main-aot.ts&lt;/code&gt;.</source>
          <target state="translated">다른 Angular 앱과 마찬가지로 하이브리드 앱에서 AOT (미리보기) 컴파일을 활용할 수 있습니다. 하이브리드 앱의 설정 은 &lt;code&gt;index.html&lt;/code&gt; 및 &lt;code&gt;main-aot.ts&lt;/code&gt; 의 차이점에 대해 &lt;a href=&quot;aot-compiler&quot;&gt;Ahead-of-Time Compilation&lt;/a&gt; 안내서 저장 에서 설명한 것과 대부분 동일 합니다.</target>
        </trans-unit>
        <trans-unit id="d32a43798be3e464ac7989911edae435dc241305" translate="yes" xml:space="preserve">
          <source>You can take steps to mitigate both bundle size and performance issues. By isolating your AngularJS app to a separate bundle, you can take advantage of &lt;a href=&quot;glossary#lazy-loading&quot;&gt;lazy loading&lt;/a&gt; to load, bootstrap, and render the AngularJS application only when needed. This strategy reduces your initial bundle size, defers any potential impact from loading both frameworks until absolutely necessary, and keeps your application running as efficiently as possible.</source>
          <target state="translated">번들 크기 및 성능 문제를 완화하기위한 단계를 수행 할 수 있습니다. AngularJS 앱을 별도의 번들로 격리함으로써 &lt;a href=&quot;glossary#lazy-loading&quot;&gt;지연로드&lt;/a&gt; 를 활용하여 필요할 때만 AngularJS 애플리케이션을로드, 부트 스트랩 및 렌더링 할 수 있습니다. 이 전략은 초기 번들 크기를 줄이고, 절대적으로 필요할 때까지 두 프레임 워크를로드 할 때 발생할 수있는 영향을 미연에 방지하고, 애플리케이션을 최대한 효율적으로 실행합니다.</target>
        </trans-unit>
        <trans-unit id="79c67bc97a52d07ac7ea5dd54a8ed1c5c30f8195" translate="yes" xml:space="preserve">
          <source>You can take this example a step further by including the &lt;code&gt;template&lt;/code&gt; constant in another expression:</source>
          <target state="translated">다른 표현식에 &lt;code&gt;template&lt;/code&gt; 상수를 포함시켜이 예제를 한 단계 더 발전시킬 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f01f576a2cce738662c91a4a6f9fea9b3c5ac4a7" translate="yes" xml:space="preserve">
          <source>You can tell Angular to inject a dependency in a component's constructor by specifying a &lt;strong&gt;constructor parameter with the dependency type&lt;/strong&gt;. Here's the &lt;code&gt;HeroListComponent&lt;/code&gt; constructor, asking for the &lt;code&gt;HeroService&lt;/code&gt; to be injected.</source>
          <target state="translated">&lt;strong&gt;종속성 유형으로 생성자 매개 변수를&lt;/strong&gt; 지정하여 &lt;strong&gt;구성&lt;/strong&gt; 요소 생성자에 종속성을 주입하도록 Angular에 지시 할 수 있습니다 . 다음 은 &lt;code&gt;HeroService&lt;/code&gt; 를 주입하도록 요청 하는 &lt;code&gt;HeroListComponent&lt;/code&gt; 생성자 입니다.</target>
        </trans-unit>
        <trans-unit id="27a82176879f6291216dd373887a9b553bd07348" translate="yes" xml:space="preserve">
          <source>You can tell Autoprefixer what browsers to target by adding a browserslist property to the package configuration file, &lt;code&gt;package.json&lt;/code&gt;:</source>
          <target state="translated">패키지 구성 파일 &lt;code&gt;package.json&lt;/code&gt; 에 browserslist 속성을 추가하여 Autoprefixer에게 타겟팅 할 브라우저를 지정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d5fd8f60f22c78115d506826cd69ec1abee3f90e" translate="yes" xml:space="preserve">
          <source>You can tell if &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; is needed by the position of the property name in a binding.</source>
          <target state="translated">바인딩에서 속성 이름의 위치로 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; 이 필요한지 알 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="53e55ee6014dcbbd753d1670dc4d9168ed68cb6f" translate="yes" xml:space="preserve">
          <source>You can tell the directive how to handle queryParams. Available options are:</source>
          <target state="translated">지시문에 queryParams 처리 방법을 알려줄 수 있습니다. 사용 가능한 옵션은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="9672334aa21e9f545accdce0bf6ce424e19ffe42" translate="yes" xml:space="preserve">
          <source>You can tell the router to navigate an entire tree at once by filling out the &lt;code&gt;outlets&lt;/code&gt; object mentioned above. Then pass that object inside a &lt;em&gt;link parameters array&lt;/em&gt; to the &lt;code&gt;router.navigate&lt;/code&gt; method.</source>
          <target state="translated">위에서 언급 한 &lt;code&gt;outlets&lt;/code&gt; 개체를 채워 라우터가 한 번에 전체 트리를 탐색하도록 할 수 있습니다 . 그런 다음 &lt;em&gt;링크 매개 변수 배열&lt;/em&gt; 내의 해당 개체 를 &lt;code&gt;router.navigate&lt;/code&gt; 메서드로 전달하십시오.</target>
        </trans-unit>
        <trans-unit id="5cc0674587de17ef20b5f473235cc5119477d514" translate="yes" xml:space="preserve">
          <source>You can test a data service with an injected &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; spy as you would test any service with a dependency.</source>
          <target state="translated">종속성이있는 서비스를 테스트 할 때 주입 된 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; 스파이를 사용하여 데이터 서비스를 테스트 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="2a72b2bb417e8480994725b7f643ae6ce46031f7" translate="yes" xml:space="preserve">
          <source>You can test that the class code works without creating the &lt;code&gt;DashboardHeroComponent&lt;/code&gt; or its parent component.</source>
          <target state="translated">&lt;code&gt;DashboardHeroComponent&lt;/code&gt; 또는 해당 상위 구성 요소를 작성하지 않고 클래스 코드가 작동하는지 테스트 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ca247d14400aaf83610f376bc43ae93a7f5e14b7" translate="yes" xml:space="preserve">
          <source>You can then add the import statement in the &lt;code&gt;src/polyfills.ts&lt;/code&gt; file. For many polyfills, you can simply un-comment the corresponding &lt;code&gt;import&lt;/code&gt; statement in the file, as in the following example.</source>
          <target state="translated">그런 다음 &lt;code&gt;src/polyfills.ts&lt;/code&gt; 파일 에 import 문을 추가 할 수 있습니다 . 많은 폴리 ​​필의 경우 다음 예제와 같이 파일에서 해당 &lt;code&gt;import&lt;/code&gt; 문의 주석을 해제 하면됩니다.</target>
        </trans-unit>
        <trans-unit id="72654a349068f8aefb5b50f3642c47c21ceb91c2" translate="yes" xml:space="preserve">
          <source>You can then generate apps and libraries with names that are unique within the workspace.</source>
          <target state="translated">그런 다음 작업 공간 내에서 고유 한 이름으로 앱 및 라이브러리를 생성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="37a8b23aa155eefeb00b8a262914140d8a2d31a3" translate="yes" xml:space="preserve">
          <source>You can then import this module into your application module to make the service available for injection in your app, as in the following example.</source>
          <target state="translated">그런 다음이 모듈을 애플리케이션 모듈로 가져 와서 다음 예제와 같이 앱에 서비스를 삽입 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d577e5970b842ddb48aebaf58591cea0ba9aca66" translate="yes" xml:space="preserve">
          <source>You can then inspect the control's state by exporting &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; to a local template variable. The following example exports &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; into a variable called &lt;code&gt;name&lt;/code&gt;:</source>
          <target state="translated">그런 다음 &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; 을 로컬 템플릿 변수 로 내보내 컨트롤의 상태를 검사 할 수 있습니다 . 다음 예제는 &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; 을 &lt;code&gt;name&lt;/code&gt; 이라는 변수로 내 보냅니다 .</target>
        </trans-unit>
        <trans-unit id="3f146d50c3c0ff5896938d11370428f8eb59b251" translate="yes" xml:space="preserve">
          <source>You can then pass this configuration to the &lt;code&gt;ng serve&lt;/code&gt; or &lt;code&gt;ng build&lt;/code&gt; commands. The example below shows how to serve the French language file created in previous sections of this guide:</source>
          <target state="translated">그런 다음이 구성을 &lt;code&gt;ng serve&lt;/code&gt; 또는 &lt;code&gt;ng build&lt;/code&gt; 명령으로 전달할 수 있습니다 . 아래 예는이 안내서의 이전 섹션에서 작성된 프랑스어 파일을 제공하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="daf232e8f81ff80505be61c6eedf919038ae8cbb" translate="yes" xml:space="preserve">
          <source>You can then provide the service to Angular by adding it to the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">그런 다음 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 서비스를 추가하여 Angular에 서비스를 제공 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="aeded6a628c76085fc28f6c50a2cb94c61d30495" translate="yes" xml:space="preserve">
          <source>You can then run the &lt;code&gt;ng e2e&lt;/code&gt; command with this configuration. Make sure to replace &lt;code&gt;&amp;lt;app-name&amp;gt;&lt;/code&gt; (in &lt;code&gt;&quot;&amp;lt;app-name&amp;gt;:serve:es5&quot;&lt;/code&gt;) with the actual name of the app, as it appears under &lt;code&gt;projects&lt;/code&gt; in &lt;code&gt;angular.json&lt;/code&gt;. For example, if your app name is &lt;code&gt;myAngularApp&lt;/code&gt; the config will become &lt;code&gt;&quot;devServerTarget&quot;: &quot;myAngularApp:serve:es5&quot;&lt;/code&gt;.</source>
          <target state="translated">그런 다음 이 구성으로 &lt;code&gt;ng e2e&lt;/code&gt; 명령 을 실행할 수 있습니다 . 교체해야합니다 &lt;code&gt;&amp;lt;app-name&amp;gt;&lt;/code&gt; (에서 &lt;code&gt;&quot;&amp;lt;app-name&amp;gt;:serve:es5&quot;&lt;/code&gt; ) 응용 프로그램의 실제 이름을, 그 아래에 표시되는 &lt;code&gt;projects&lt;/code&gt; 에 &lt;code&gt;angular.json&lt;/code&gt; . 예를 들어, 앱 이름이 &lt;code&gt;myAngularApp&lt;/code&gt; 인 경우 구성은 &lt;code&gt;&quot;devServerTarget&quot;: &quot;myAngularApp:serve:es5&quot;&lt;/code&gt; 됩니다.</target>
        </trans-unit>
        <trans-unit id="7af9dd7d35bf9ace92be7b1217e80ef2294962ab" translate="yes" xml:space="preserve">
          <source>You can then run the &lt;code&gt;ng serve&lt;/code&gt; command with this configuration. Make sure to replace &lt;code&gt;&amp;lt;app-name&amp;gt;&lt;/code&gt; (in &lt;code&gt;&quot;&amp;lt;app-name&amp;gt;:build:es5&quot;&lt;/code&gt;) with the actual name of the app, as it appears under &lt;code&gt;projects&lt;/code&gt; in &lt;code&gt;angular.json&lt;/code&gt;. For example, if your app name is &lt;code&gt;myAngularApp&lt;/code&gt; the config will become &lt;code&gt;&quot;browserTarget&quot;: &quot;myAngularApp:build:es5&quot;&lt;/code&gt;.</source>
          <target state="translated">그런 다음 이 구성으로 &lt;code&gt;ng serve&lt;/code&gt; 명령 을 실행할 수 있습니다 . 교체해야합니다 &lt;code&gt;&amp;lt;app-name&amp;gt;&lt;/code&gt; (에가 &lt;code&gt;&quot;&amp;lt;app-name&amp;gt;:build:es5&quot;&lt;/code&gt; 응용 프로그램의 실제 이름으로, 그것은 아래에 표시되는) &lt;code&gt;projects&lt;/code&gt; 의 &lt;code&gt;angular.json&lt;/code&gt; . 예를 들어 앱 이름이 &lt;code&gt;myAngularApp&lt;/code&gt; 인 경우 구성은 &lt;code&gt;&quot;browserTarget&quot;: &quot;myAngularApp:build:es5&quot;&lt;/code&gt; 됩니다.</target>
        </trans-unit>
        <trans-unit id="01f7f614d36b24c086b2ef30780b2cc5bb869ee2" translate="yes" xml:space="preserve">
          <source>You can then run the tests with this configuration</source>
          <target state="translated">그런 다음이 구성으로 테스트를 실행할 수 있습니다</target>
        </trans-unit>
        <trans-unit id="7f5047fa13946133e44fce35b9bff9f41d96419e" translate="yes" xml:space="preserve">
          <source>You can think of &lt;code&gt;.metadata.json&lt;/code&gt; as a diagram of the overall structure of a decorator's metadata, represented as an &lt;a href=&quot;https://en.wikipedia.org/wiki/Abstract_syntax_tree&quot;&gt;abstract syntax tree (AST)&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;.metadata.json&lt;/code&gt; 을 &lt;a href=&quot;https://en.wikipedia.org/wiki/Abstract_syntax_tree&quot;&gt;추상 구문 트리 (AST)&lt;/a&gt; 로 표시되는 데코레이터 메타 데이터의 전체 구조 다이어그램으로 생각할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="88487d11506c2395060fa75a6fe5385653b08fe7" translate="yes" xml:space="preserve">
          <source>You can think of these observables as &lt;em&gt;blueprints&lt;/em&gt; for actual HTTP requests.</source>
          <target state="translated">이러한 관찰 가능 항목 은 실제 HTTP 요청에 대한 &lt;em&gt;청사진&lt;/em&gt; 으로 생각할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="cf7bd46650d373ecec64fc25eaaaf9b7f791a93a" translate="yes" xml:space="preserve">
          <source>You can toggle a CSS style class with a &lt;code&gt;class&lt;/code&gt; binding.</source>
          <target state="translated">&lt;code&gt;class&lt;/code&gt; 바인딩 으로 CSS 스타일 클래스를 토글 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="35bc172ea92f7f4e7db119e6ef43ca372c1e898e" translate="yes" xml:space="preserve">
          <source>You can turn off TOC generation for the &lt;em&gt;entire&lt;/em&gt; page by writing the title with an &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; tag and the &lt;code&gt;no-toc&lt;/code&gt; class.</source>
          <target state="translated">&lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; 태그와 &lt;code&gt;no-toc&lt;/code&gt; 클래스로 제목을 작성 하여 &lt;em&gt;전체&lt;/em&gt; 페이지에 대한 TOC 생성을 끌 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="47469fd15c4575c830cb6106c9451ca1cfb66e6c" translate="yes" xml:space="preserve">
          <source>You can upgrade the service using a Angular &lt;a href=&quot;dependency-injection-providers#factory-providers&quot;&gt;factory provider&lt;/a&gt; that requests the service from the AngularJS &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule#%24injector&quot;&gt;$injector&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">AngularJS &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule#%24injector&quot;&gt;$injector&lt;/a&gt;&lt;/code&gt; 에서 서비스를 요청 하는 Angular &lt;a href=&quot;dependency-injection-providers#factory-providers&quot;&gt;팩토리 제공자&lt;/a&gt; 를 사용하여 서비스를 업그레이드 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ce7735c22d78c73b2a59358e5c5cf56bdcf5948d" translate="yes" xml:space="preserve">
          <source>You can upgrade this component to Angular, annotate inputs and outputs in the upgrade directive, and then provide the input and output using Angular template syntax:</source>
          <target state="translated">이 컴포넌트를 Angular로 업그레이드하고 upgrade 지시문에서 입력 및 출력에 주석을 달고 Angular 템플리트 구문을 사용하여 입력 및 출력을 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f9deab6750177fe9650fd42d133d3523d7bd1e38" translate="yes" xml:space="preserve">
          <source>You can use &lt;a href=&quot;template-syntax#event-binding&quot;&gt;Angular event bindings&lt;/a&gt; to respond to any &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events&quot;&gt;DOM event&lt;/a&gt;. Many DOM events are triggered by user input. Binding to these events provides a way to get input from the user.</source>
          <target state="translated">&lt;a href=&quot;template-syntax#event-binding&quot;&gt;Angular 이벤트 바인딩&lt;/a&gt; 을 사용 하여 모든 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events&quot;&gt;DOM 이벤트&lt;/a&gt; 에 응답 할 수 있습니다 . 많은 DOM 이벤트가 사용자 입력에 의해 트리거됩니다. 이러한 이벤트에 바인딩하면 사용자로부터 입력을받을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="14c513d08faad8ec362ee20a1eb2bb6d365025e4" translate="yes" xml:space="preserve">
          <source>You can use &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; on the same child component as in the following:</source>
          <target state="translated">다음과 같은 하위 구성 요소에서 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; 및 &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; 을 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f29475139f2522d7f2ddf89fdb56b12a00c51715" translate="yes" xml:space="preserve">
          <source>You can use &lt;code&gt;typeof&lt;/code&gt; and bracket notation in normal application code. You just can't use those features within expressions that define Angular metadata.</source>
          <target state="translated">당신은 사용할 수 있습니다 &lt;code&gt;typeof&lt;/code&gt; 일반 응용 프로그램 코드에서와 브래킷 표기법을. Angular 메타 데이터를 정의하는 표현식에서 이러한 기능을 사용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="d88a36cf0dda32f2c9d19f31b7688c24f67a6df5" translate="yes" xml:space="preserve">
          <source>You can use &lt;em&gt;pipes&lt;/em&gt; to link operators together. Pipes let you combine multiple functions into a single function. The &lt;code&gt;pipe()&lt;/code&gt; function takes as its arguments the functions you want to combine, and returns a new function that, when executed, runs the composed functions in sequence.</source>
          <target state="translated">&lt;em&gt;파이프&lt;/em&gt; 를 사용 하여 연산자를 서로 연결할 수 있습니다. 파이프를 사용하면 여러 기능을 단일 기능으로 결합 할 수 있습니다. &lt;code&gt;pipe()&lt;/code&gt; 함수는 인수로 당신이 결합하려는 기능을 소요하고, 실행될 때, 순서대로 구성 기능을 실행하는 새로운 기능을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="ed15516e6420536a7039f012941c971836d6677c" translate="yes" xml:space="preserve">
          <source>You can use a custom id in combination with a description by including both in the value of the &lt;code&gt;i18n&lt;/code&gt; attribute. In the example below, the &lt;code&gt;i18n&lt;/code&gt; attribute value includes a description, followed by the custom &lt;code&gt;id&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;i18n&lt;/code&gt; 속성 값에 둘 다 포함하여 설명과 함께 사용자 정의 ID를 사용할 수 있습니다 . 아래 예에서 &lt;code&gt;i18n&lt;/code&gt; 속성 값에는 설명과 맞춤 &lt;code&gt;id&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8583ed1bee4e5b238526688f8608728778d0d405" translate="yes" xml:space="preserve">
          <source>You can use an injection token for any kind of provider but it's particularly helpful when the dependency is a simple value like a string, a number, or a function.</source>
          <target state="translated">모든 종류의 공급자에 대해 주입 토큰을 사용할 수 있지만 종속성이 문자열, 숫자 또는 함수와 같은 단순한 값인 경우 특히 유용합니다.</target>
        </trans-unit>
        <trans-unit id="8ce43e1b812a60d33d6bf6918eacc202b7139202" translate="yes" xml:space="preserve">
          <source>You can use command-line arguments to override the configured defaults. For example, to run with a different &lt;code&gt;command&lt;/code&gt; value, use the following CLI command.</source>
          <target state="translated">명령 행 인수를 사용하여 구성된 기본값을 대체 할 수 있습니다. 예를 들어, 다른 &lt;code&gt;command&lt;/code&gt; 값 으로 실행 하려면 다음 CLI 명령을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="6077b937171057ef8efd4e409adf3d43ff8768d7" translate="yes" xml:space="preserve">
          <source>You can use interpolations and html markup inside of your translations.</source>
          <target state="translated">번역 내에서 보간 및 HTML 마크 업을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f9aac4c3af5be265f4c902f3509d5b713f408628" translate="yes" xml:space="preserve">
          <source>You can use the &lt;a href=&quot;https://webpack.js.org/configuration/dev-server/#devserver-proxy&quot;&gt;proxying support&lt;/a&gt; in the &lt;code&gt;webpack&lt;/code&gt; dev server to divert certain URLs to a backend server, by passing a file to the &lt;code&gt;--proxy-config&lt;/code&gt; build option. For example, to divert all calls for &lt;code&gt;http://localhost:4200/api&lt;/code&gt; to a server running on &lt;code&gt;http://localhost:3000/api&lt;/code&gt;, take the following steps.</source>
          <target state="translated">&lt;code&gt;--proxy-config&lt;/code&gt; 빌드 옵션 으로 파일을 전달 하여 &lt;code&gt;webpack&lt;/code&gt; dev 서버 의 &lt;a href=&quot;https://webpack.js.org/configuration/dev-server/#devserver-proxy&quot;&gt;프록시 지원&lt;/a&gt; 을 사용하여 특정 URL을 백엔드 서버로 전환 할 수 있습니다. 예를 들어 &lt;code&gt;http://localhost:4200/api&lt;/code&gt; 에 대한 모든 호출을 &lt;code&gt;http://localhost:3000/api&lt;/code&gt; 에서 실행중인 서버 로 전환 하려면 다음 단계를 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="13429b02517ccefddb31dc6575449a8510e272bc" translate="yes" xml:space="preserve">
          <source>You can use the &lt;code&gt;ng-xi18n&lt;/code&gt; tool directly from the &lt;code&gt;@angular/compiler-cli&lt;/code&gt; package. For more information, see the &lt;a href=&quot;cli/xi18n&quot;&gt;&lt;code&gt;ng xi18n&lt;/code&gt; command documentation&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;@angular/compiler-cli&lt;/code&gt; 패키지 에서 &lt;code&gt;ng-xi18n&lt;/code&gt; 도구를 직접 사용할 수 있습니다 . 자세한 내용은 &lt;a href=&quot;cli/xi18n&quot;&gt; &lt;code&gt;ng xi18n&lt;/code&gt; &lt;/a&gt; 명령 설명서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="4ee980ab46844b0613d78892df262c932a9a8351" translate="yes" xml:space="preserve">
          <source>You can use the &lt;code&gt;ref-&lt;/code&gt; prefix alternative to &lt;code&gt;#&lt;/code&gt;. This example declares the &lt;code&gt;fax&lt;/code&gt; variable as &lt;code&gt;ref-fax&lt;/code&gt; instead of &lt;code&gt;#fax&lt;/code&gt;.</source>
          <target state="translated">당신은 사용할 수 있습니다 &lt;code&gt;ref-&lt;/code&gt; 에 접두사 대안을 &lt;code&gt;#&lt;/code&gt; . 이 예에서는 &lt;code&gt;fax&lt;/code&gt; 변수 를 &lt;code&gt;#fax&lt;/code&gt; 대신 &lt;code&gt;ref-fax&lt;/code&gt; 로 선언합니다 .</target>
        </trans-unit>
        <trans-unit id="f948dbeb30fd6d76129a289edcdde9269d2b163f" translate="yes" xml:space="preserve">
          <source>You can use the &lt;code&gt;void&lt;/code&gt; state to configure transitions for an element that is entering or leaving a page. See &lt;a href=&quot;transition-and-triggers#enter-leave-view&quot;&gt;Animating entering and leaving a view&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;void&lt;/code&gt; 상태를 사용하여 페이지에 들어가거나 나가는 요소에 대한 전환을 구성 할 수 있습니다 . 보기 &lt;a href=&quot;transition-and-triggers#enter-leave-view&quot;&gt;시작 및 나가기 애니메이션을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="778aaf9be1f598659f7252d64f8d9efb2bf13f53" translate="yes" xml:space="preserve">
          <source>You can use the API to transform an Angular component so that it can be registered with the browser and used in any HTML that you add directly to the DOM within an Angular app. The custom element tag inserts the component's view, with change-detection and data-binding functionality, into content that would otherwise be displayed without Angular processing.</source>
          <target state="translated">API를 사용하여 브라우저에 등록하고 Angular 앱 내 DOM에 직접 추가 한 HTML에 사용할 수 있도록 Angular 구성 요소를 변환 할 수 있습니다. 사용자 정의 요소 태그는 변경 감지 및 데이터 바인딩 기능이있는 컴포넌트의보기를 각도 처리없이 표시되는 컨텐츠에 삽입합니다.</target>
        </trans-unit>
        <trans-unit id="b3df2298044eac3cff7ace6d7dc3f88f0445489a" translate="yes" xml:space="preserve">
          <source>You can use the Angular CLI to &lt;a href=&quot;cli/generate#appshell&quot;&gt;generate&lt;/a&gt; an app shell. This can improve the user experience by quickly launching a static rendered page (a skeleton common to all pages) while the browser downloads the full client version and switches to it automatically after the code loads.</source>
          <target state="translated">Angular CLI를 &lt;a href=&quot;cli/generate#appshell&quot;&gt;사용&lt;/a&gt; 하여 앱 셸 을 생성 할 수 있습니다 . 이렇게하면 브라우저가 전체 클라이언트 버전을 다운로드하고 코드가로드 된 후 자동으로 페이지를 전환하는 동안 정적 렌더링 페이지 (모든 페이지에 공통적 인 골격)를 빠르게 시작하여 사용자 경험을 향상시킬 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="29e0856573525113f6dfeb3707c4005402268a58" translate="yes" xml:space="preserve">
          <source>You can use the CLI Webpack plugin &lt;code&gt;AngularCompilerPlugin&lt;/code&gt; from the &lt;code&gt;@ngtools/webpack&lt;/code&gt; package. Set the parameters &lt;code&gt;i18nOutFile&lt;/code&gt; and &lt;code&gt;i18nOutFormat&lt;/code&gt; to trigger the extraction. For more information, see the &lt;a href=&quot;https://github.com/angular/angular-cli/tree/master/packages/ngtools/webpack&quot;&gt;Angular Ahead-of-Time Webpack Plugin documentation&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;@ngtools/webpack&lt;/code&gt; 패키지 에서 CLI &lt;code&gt;AngularCompilerPlugin&lt;/code&gt; 플러그인 AngularCompilerPlugin 을 사용할 수 있습니다 . 추출을 트리거하도록 &lt;code&gt;i18nOutFile&lt;/code&gt; 및 &lt;code&gt;i18nOutFormat&lt;/code&gt; 매개 변수를 설정하십시오 . 자세한 정보는 &lt;a href=&quot;https://github.com/angular/angular-cli/tree/master/packages/ngtools/webpack&quot;&gt;Angular Ahead-of-Time Webpack Plugin 문서를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="0ec47fabebbe0c57fcade5b7ed8cf8de561f99fe" translate="yes" xml:space="preserve">
          <source>You can use the CSS class names and selectors that make the most sense in the context of each component.</source>
          <target state="translated">각 구성 요소의 상황에서 가장 적합한 CSS 클래스 이름과 선택자를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="cab2cb6cc9ac36bfe7b8bcbf2352758bf31c4180" translate="yes" xml:space="preserve">
          <source>You can use the monorepo model to use the same workspace for multiple projects. See &lt;a href=&quot;file-structure#multiple-projects&quot;&gt;Setting up for a multi-project workspace&lt;/a&gt;.</source>
          <target state="translated">monorepo 모델을 사용하여 여러 프로젝트에 동일한 작업 공간을 사용할 수 있습니다. &lt;a href=&quot;file-structure#multiple-projects&quot;&gt;다중 프로젝트 작업 공간 설정을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="00e5278758f199e2d0215e90a0e1f1da3594ccc0" translate="yes" xml:space="preserve">
          <source>You can use these events to notify the user of a pending update or to refresh their pages when the code they are running is out of date.</source>
          <target state="translated">이러한 이벤트를 사용하여 보류중인 업데이트를 사용자에게 알리거나 실행중인 코드가 최신 버전이 아닌 경우 페이지를 새로 고칠 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d04ff9f7877eb69f07d15a68c07945f4fa4a7e09" translate="yes" xml:space="preserve">
          <source>You can use these persistent bits of information for things that need to be provided across pages like authentication tokens or session ids.</source>
          <target state="translated">인증 토큰 또는 세션 ID와 같은 페이지에서 제공해야하는 사항에 이러한 영구 비트 정보를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ef3fea4a43d7d7385ecdc4eec6bd88759f646cbc" translate="yes" xml:space="preserve">
          <source>You can use this extended configuration to copy assets from outside your project. For example, the following configuration copies assets from a node package:</source>
          <target state="translated">이 확장 구성을 사용하여 프로젝트 외부에서 자산을 복사 할 수 있습니다. 예를 들어 다음 구성은 노드 패키지에서 자산을 복사합니다.</target>
        </trans-unit>
        <trans-unit id="879e157c42523ab5e1a79a66ed0d994936399588" translate="yes" xml:space="preserve">
          <source>You can use this technique to narrow an API through an aliasing interface. The following example shows an alias introduced for that purpose.</source>
          <target state="translated">이 기술을 사용하여 앨리어싱 인터페이스를 통해 API를 좁힐 수 있습니다. 다음 예제는 해당 목적으로 도입 된 별명을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="02f673b45f597676412e33095473c76bc4fad521" translate="yes" xml:space="preserve">
          <source>You can use this token to define a provider that generates the registration options at runtime, for example via a function call:</source>
          <target state="translated">이 토큰을 사용하여 런타임시 등록 옵션을 생성하는 제공자를 정의 할 수 있습니다 (예 : 함수 호출을 통해).</target>
        </trans-unit>
        <trans-unit id="01063779ffcd4ab8ae6e45ba9a224837e0a3b2cb" translate="yes" xml:space="preserve">
          <source>You can use this type of provider to substitute an &lt;em&gt;alternative implementation&lt;/em&gt; for a common or default class. The alternative implementation could, for example, implement a different strategy, extend the default class, or emulate the behavior of the real class in a test case.</source>
          <target state="translated">이 유형의 제공자를 사용 하여 공통 또는 기본 클래스 의 &lt;em&gt;대체 구현&lt;/em&gt; 을 &lt;em&gt;대체&lt;/em&gt; 할 수 있습니다 . 예를 들어, 대체 구현은 다른 전략을 구현하거나 기본 클래스를 확장하거나 테스트 사례에서 실제 클래스의 동작을 에뮬레이션 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="207dd4aac8768ca04bba6cbd1c89911987218182" translate="yes" xml:space="preserve">
          <source>You can write many useful tests with this spy, even though its &lt;code&gt;Observable&lt;/code&gt; is synchronous.</source>
          <target state="translated">&lt;code&gt;Observable&lt;/code&gt; 이 동 기적 임에도 불구하고이 스파이로 여러 가지 유용한 테스트를 작성할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="26f3b3bf7f16b6c0abe040ac1fb2878080c80ecc" translate="yes" xml:space="preserve">
          <source>You can write your own custom pipes. Here's a custom pipe named &lt;code&gt;ExponentialStrengthPipe&lt;/code&gt; that can boost a hero's powers:</source>
          <target state="translated">자신 만의 파이프를 작성할 수 있습니다. 다음 은 영웅의 힘을 높일 수있는 &lt;code&gt;ExponentialStrengthPipe&lt;/code&gt; 라는 사용자 지정 파이프입니다 .</target>
        </trans-unit>
        <trans-unit id="29353386f7d3444b799c5845be88ccda3e6cad0a" translate="yes" xml:space="preserve">
          <source>You can't add or delete a hero.</source>
          <target state="translated">영웅을 추가하거나 삭제할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="1525f5345c430bce787b3f17866fb37b2e5bd030" translate="yes" xml:space="preserve">
          <source>You can't apply &lt;code&gt;[(&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;)]&lt;/code&gt; to a non-form native element or a third-party custom component until you write a suitable value accessor. For more information, see the API documentation on &lt;a href=&quot;../api/forms/defaultvalueaccessor&quot;&gt;DefaultValueAccessor&lt;/a&gt;.</source>
          <target state="translated">적합한 값 접근자를 작성할 때까지 &lt;code&gt;[(&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;)]&lt;/code&gt; 을 비 형식 기본 요소 또는 타사 사용자 지정 구성 요소에 적용 할 수 없습니다 . 자세한 정보는 &lt;a href=&quot;../api/forms/defaultvalueaccessor&quot;&gt;DefaultValueAccessor&lt;/a&gt; 의 API 문서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="8925c521b2d46ab20f52ceea4c3bca1cbde1c73d" translate="yes" xml:space="preserve">
          <source>You can't block while waiting for the server&amp;mdash;that's not possible in a browser. You need to stop the navigation while you wait, asynchronously, for the server to return with its answer.</source>
          <target state="translated">서버를 기다리는 동안 차단할 수 없으며 브라우저에서는 불가능합니다. 비동기 적으로 서버가 응답을 반환 할 때까지 탐색을 중지해야합니다.</target>
        </trans-unit>
        <trans-unit id="a3134d58d42c25279e4310763add4251424be7a3" translate="yes" xml:space="preserve">
          <source>You can't call &lt;code&gt;&lt;a href=&quot;../api/core/applicationinitstatus#done&quot;&gt;done&lt;/a&gt;()&lt;/code&gt; in &lt;code&gt;&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;()&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; functions, because the &lt;code&gt;&lt;a href=&quot;../api/core/applicationinitstatus#done&quot;&gt;done&lt;/a&gt; parameter&lt;/code&gt; is &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/applicationinitstatus#done&quot;&gt;done&lt;/a&gt; parameter&lt;/code&gt; 매개 변수 가 &lt;code&gt;undefined&lt;/code&gt; 이므로 &lt;code&gt;&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;()&lt;/code&gt; () 또는 &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; () 함수 에서 &lt;code&gt;&lt;a href=&quot;../api/core/applicationinitstatus#done&quot;&gt;done&lt;/a&gt;()&lt;/code&gt; 을 호출 할 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="f19d782103111bd0cf17ac0f6a3a63e20d5ff3d0" translate="yes" xml:space="preserve">
          <source>You can't directly modify the existing headers within the previous options object because instances of the &lt;code&gt;&lt;a href=&quot;../api/common/http/httpheaders&quot;&gt;HttpHeaders&lt;/a&gt;&lt;/code&gt; class are immutable.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/http/httpheaders&quot;&gt;HttpHeaders&lt;/a&gt;&lt;/code&gt; 클래스의 인스턴스는 변경할 수 없으므로 이전 옵션 개체 내에서 기존 헤더를 직접 수정할 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="a4320caf3da3b50d78819738aa5ba2c89d557d51" translate="yes" xml:space="preserve">
          <source>You can't test this partial file and you'll never use it in the application. But at least your IDE can confirm that it is syntactically correct.</source>
          <target state="translated">이 부분 파일은 테스트 할 수 없으며 응용 프로그램에서 절대 사용하지 않습니다. 그러나 적어도 IDE는 구문 상 올바른지 확인할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="847777e22c49928d973cdf1d0c9ef3af46fa5ce5" translate="yes" xml:space="preserve">
          <source>You can't use JavaScript expressions that have or promote side effects, including:</source>
          <target state="translated">다음을 포함하여 부작용이 있거나이를 촉진하는 JavaScript 표현식을 사용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="23a2a254f2a0b7dc4fd28d5035a5292fa6c9efca" translate="yes" xml:space="preserve">
          <source>You can't use property binding to read or pull values out of target elements. Similarly, you cannot use property binding to call a method on the target element. If the element raises events, you can listen to them with an &lt;a href=&quot;template-syntax#event-binding&quot;&gt;event binding&lt;/a&gt;.</source>
          <target state="translated">속성 바인딩을 사용하여 대상 요소에서 값을 읽거나 가져올 수 없습니다. 마찬가지로, 속성 바인딩을 사용하여 대상 요소에서 메소드를 호출 할 수 없습니다. 요소가 이벤트를 발생시키는 &lt;a href=&quot;template-syntax#event-binding&quot;&gt;경우 이벤트 바인딩으로&lt;/a&gt; 들을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="cbc8b4a39bee78e919dfa91c8ba1dccc7804ee0e" translate="yes" xml:space="preserve">
          <source>You can't use the &lt;em&gt;local variable&lt;/em&gt; technique if an instance of the parent component &lt;em&gt;class&lt;/em&gt; must read or write child component values or must call child component methods.</source>
          <target state="translated">부모 구성 요소 &lt;em&gt;클래스&lt;/em&gt; 의 인스턴스가 자식 구성 요소 값을 읽거나 써야하거나 자식 구성 요소 메서드를 호출해야하는 경우 &lt;em&gt;로컬 변수&lt;/em&gt; 기술을 사용할 수 없습니다 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="abbaf658542d9058a53b26b95bd380763ec91ec1" translate="yes" xml:space="preserve">
          <source>You can, however, configure an injector with an alternative provider, in order to deliver some other object that provides the needed logging functionality. For instance:</source>
          <target state="translated">그러나 필요한 로깅 기능을 제공하는 다른 개체를 제공하기 위해 대체 공급자로 인젝터를 구성 할 수 있습니다. 예를 들어 :</target>
        </trans-unit>
        <trans-unit id="c442c974d351231bffade79aff31ddd3cc6970d2" translate="yes" xml:space="preserve">
          <source>You cannot call any more &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; configuration methods, not &lt;code&gt;configureTestingModule()&lt;/code&gt;, nor &lt;code&gt;get()&lt;/code&gt;, nor any of the &lt;code&gt;override...&lt;/code&gt; methods. If you try, &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; throws an error.</source>
          <target state="translated">&lt;code&gt;configureTestingModule()&lt;/code&gt; , &lt;code&gt;get()&lt;/code&gt; 또는 &lt;code&gt;override...&lt;/code&gt; 메소드가 아닌 더 이상 &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; 구성 메소드를 호출 할 수 없습니다 . 시도하면 &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; 에서 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="e0b373ee80bbf7addb567f5760991089c85b8c3b" translate="yes" xml:space="preserve">
          <source>You cannot change the order or remove interceptors later. If you need to enable and disable an interceptor dynamically, you'll have to build that capability into the interceptor itself.</source>
          <target state="translated">나중에 주문을 변경하거나 인터셉터를 제거 할 수 없습니다. 인터셉터를 동적으로 활성화 및 비활성화해야하는 경우 인터셉터 자체에 해당 기능을 빌드해야합니다.</target>
        </trans-unit>
        <trans-unit id="195ad85e3fc794dc3acdbe3b5c1247c80e63cecf" translate="yes" xml:space="preserve">
          <source>You cannot use &lt;code&gt;&lt;a href=&quot;downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; in the same hybrid application. Use one or the other.</source>
          <target state="translated">동일한 하이브리드 애플리케이션에서 &lt;code&gt;&lt;a href=&quot;downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; 을 사용할 수 없습니다 . 하나 또는 다른 것을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="3f42b30122e9b38fac7f0378c47566a523a9dcdd" translate="yes" xml:space="preserve">
          <source>You configured an in-memory web API.</source>
          <target state="translated">인 메모리 웹 API를 구성했습니다.</target>
        </trans-unit>
        <trans-unit id="1a862ff841b2f1f71b38ace20138439e8a392c73" translate="yes" xml:space="preserve">
          <source>You configured the router in an &lt;code&gt;AppRoutingModule&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;AppRoutingModule&lt;/code&gt; 에서 라우터를 구성했습니다</target>
        </trans-unit>
        <trans-unit id="e7e90d6b734bc97c1ad51e8fd7d4be5b5512fb3c" translate="yes" xml:space="preserve">
          <source>You control the &lt;em&gt;code-example&lt;/em&gt; output by setting one or more of its attributes:</source>
          <target state="translated">하나 이상의 속성을 설정 하여 &lt;em&gt;코드 예제&lt;/em&gt; 출력을 제어 합니다.</target>
        </trans-unit>
        <trans-unit id="fa3d8d2bfaf5aa80f0f4d374abfbd630bd751e95" translate="yes" xml:space="preserve">
          <source>You control visibility of the name error message by binding properties of the &lt;code&gt;name&lt;/code&gt; control to the message &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; element's &lt;code&gt;hidden&lt;/code&gt; property.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; 컨트롤의 속성을 메시지 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 요소의 &lt;code&gt;hidden&lt;/code&gt; 속성 에 바인딩하여 이름 오류 메시지의 가시성을 제어 합니다.</target>
        </trans-unit>
        <trans-unit id="44387f29f98dce396269ef4e00684dcb18469e88" translate="yes" xml:space="preserve">
          <source>You could achieve the same result with separate bindings to the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; element's &lt;code&gt;value&lt;/code&gt; property and &lt;code&gt;input&lt;/code&gt; event:</source>
          <target state="translated">&lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 요소의 &lt;code&gt;value&lt;/code&gt; 속성 및 &lt;code&gt;input&lt;/code&gt; 이벤트 에 대한 별도의 바인딩으로 동일한 결과를 얻을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d6e853bd06044adc529961029cc4d772479216ae" translate="yes" xml:space="preserve">
          <source>You could add more styles to &lt;code&gt;styles.css&lt;/code&gt; and keep growing that stylesheet as you add components.</source>
          <target state="translated">&lt;code&gt;styles.css&lt;/code&gt; 에 더 많은 스타일을 추가하고 구성 요소를 추가 할 때 해당 스타일 시트를 계속 확장 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f3a67407f541c304df213be45d25c45419c43892" translate="yes" xml:space="preserve">
          <source>You could also create more transitions for other routes. This trigger is sufficient for the current milestone.</source>
          <target state="translated">다른 경로에 대해 더 많은 전환을 만들 수도 있습니다. 이 트리거는 현재 이정표에 충분합니다.</target>
        </trans-unit>
        <trans-unit id="1fd46d7235b105f0a662cab18f53893271fb6ce2" translate="yes" xml:space="preserve">
          <source>You could also provide &lt;code&gt;HeroService&lt;/code&gt; to a different component elsewhere in the application. That would result in a different instance of the service, living in a different injector.</source>
          <target state="translated">응용 프로그램의 다른 곳에서 &lt;code&gt;HeroService&lt;/code&gt; 를 다른 구성 요소에 제공 할 수도 있습니다 . 그 결과 다른 인젝터에 사는 다른 서비스 인스턴스가 생길 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bd8473fe08d3d79c8c61e0a315a06fb3d9c6c12d" translate="yes" xml:space="preserve">
          <source>You could continue to use absolute paths like this to navigate inside the &lt;em&gt;Crisis Center&lt;/em&gt; feature, but that pins the links to the parent routing structure. If you changed the parent &lt;code&gt;/crisis-center&lt;/code&gt; path, you would have to change the link parameters array.</source>
          <target state="translated">이와 같은 절대 경로를 계속 사용하여 &lt;em&gt;Crisis Center&lt;/em&gt; 기능 내부를 탐색 할 수 있지만 이는 상위 라우팅 구조에 대한 링크를 고정합니다. 부모 &lt;code&gt;/crisis-center&lt;/code&gt; 경로를 변경 한 경우 링크 매개 변수 배열을 변경해야합니다.</target>
        </trans-unit>
        <trans-unit id="f72f6303e1cabc4decc74d5290b40948dd42031f" translate="yes" xml:space="preserve">
          <source>You could fix the problem by initializing &lt;code&gt;foo&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;foo&lt;/code&gt; 를 초기화하여 문제를 해결할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="452d8a3343bceece9dfedc6bc1975a311f096b58" translate="yes" xml:space="preserve">
          <source>You could go a step further and not even download the code for the Angular part of the app to the user's browser until it is needed. This is especially useful when you use Angular on parts of the hybrid app that are not necessary for the initial rendering or that the user doesn't reach.</source>
          <target state="translated">한 걸음 더 나아가서 필요할 때까지 앱의 Angular 부분에 대한 코드를 사용자의 브라우저로 다운로드 할 수도 없습니다. 이것은 초기 렌더링에 필요하지 않거나 사용자가 도달하지 않는 하이브리드 앱의 일부에서 Angular를 사용할 때 특히 유용합니다.</target>
        </trans-unit>
        <trans-unit id="32fe4756192cc804baf2b86fa293df1560f38995" translate="yes" xml:space="preserve">
          <source>You could hide the link until the user logs in. But that's tricky and difficult to maintain.</source>
          <target state="translated">사용자가 로그인 할 때까지 링크를 숨길 수 있습니다. 그러나 유지하기가 까다 롭고 어렵습니다.</target>
        </trans-unit>
        <trans-unit id="e88ea5d91e18e7ba7e3b3b6275466f318da99357" translate="yes" xml:space="preserve">
          <source>You could lazy load the &lt;em&gt;Crisis Center&lt;/em&gt;. But you're almost certain that the user will visit the &lt;em&gt;Crisis Center&lt;/em&gt; within minutes of launching the app. Ideally, the app would launch with just the &lt;code&gt;AppModule&lt;/code&gt; and the &lt;code&gt;HeroesModule&lt;/code&gt; loaded and then, almost immediately, load the &lt;code&gt;CrisisCenterModule&lt;/code&gt; in the background. By the time the user navigates to the &lt;em&gt;Crisis Center&lt;/em&gt;, its module will have been loaded and ready to go.</source>
          <target state="translated">&lt;em&gt;위기 센터를&lt;/em&gt; 게으르게로드 할 수 &lt;em&gt;있습니다&lt;/em&gt; . 그러나 사용자는 앱을 시작한 후 몇 분 내에 &lt;em&gt;위기 센터&lt;/em&gt; 를 방문 할 것 입니다. 이상적으로는 앱은 &lt;code&gt;AppModule&lt;/code&gt; 과 &lt;code&gt;HeroesModule&lt;/code&gt; 만 로드 한 후 시작한 다음 거의 즉시 &lt;code&gt;CrisisCenterModule&lt;/code&gt; 을 백그라운드에서 로드합니다 . 사용자가 &lt;em&gt;Crisis Center를&lt;/em&gt; 탐색 할 때 해당 모듈이로드되어 준비 상태가됩니다.</target>
        </trans-unit>
        <trans-unit id="630e9e902a4f3606cea5fb430c3edd98b5abe262" translate="yes" xml:space="preserve">
          <source>You could test with the actual &lt;code&gt;DashboardComponent&lt;/code&gt;. But doing so could require a lot of setup, especially when its template features an &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; repeater, other components, layout HTML, additional bindings, a constructor that injects multiple services, and it starts interacting with those services right away.</source>
          <target state="translated">실제 &lt;code&gt;DashboardComponent&lt;/code&gt; 로 테스트 할 수 있습니다. 그러나 이렇게하면 해당 템플리트가 특징 특히, 설치를 많이 요구할 수 &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 의 리피터, 다른 구성 요소, 레이아웃 HTML, 추가 바인딩, 생성자가 주입한다 여러 서비스를, 그리고 바로 이러한 서비스와 상호 작용을 시작합니다.</target>
        </trans-unit>
        <trans-unit id="1e4578f22546791ed72d7316e677c856d894d826" translate="yes" xml:space="preserve">
          <source>You could try this now and confirm that the &lt;code&gt;CrisisCenterModule&lt;/code&gt; loads after you click the &quot;Crisis Center&quot; button.</source>
          <target state="translated">지금 시도 하여 &quot;Crisis Center&quot;버튼을 클릭 한 후 &lt;code&gt;CrisisCenterModule&lt;/code&gt; 이로드되는지 확인할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="97cf8184b16fb368c1cf568c89a61f8256882bec" translate="yes" xml:space="preserve">
          <source>You could use the &lt;code&gt;toPromise&lt;/code&gt; method of &lt;code&gt;Observable&lt;/code&gt; to turn those observables into promises in the service. In many cases that reduce the number of changes to the component controllers.</source>
          <target state="translated">&lt;code&gt;Observable&lt;/code&gt; 의 &lt;code&gt;toPromise&lt;/code&gt; 메소드를 사용하여 관찰 가능한 서비스를 약속으로 전환 할 수 있습니다. 많은 경우 구성 요소 컨트롤러에 대한 변경 횟수가 줄어 듭니다.</target>
        </trans-unit>
        <trans-unit id="706fc2ce4be926c88dbcfd29fb697e778bd4a192" translate="yes" xml:space="preserve">
          <source>You could use the techniques you already know, but instead you'll use the new &lt;code&gt;[(&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;)]&lt;/code&gt; syntax, which makes binding the form to the model easy.</source>
          <target state="translated">이미 알고있는 기술을 사용할 수 있지만 대신 새로운 &lt;code&gt;[(&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;)]&lt;/code&gt; 구문을 사용하면 양식을 모델에 쉽게 바인딩 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d96ea0f549c2692a3fbaa103c2dd3a8d102a4c86" translate="yes" xml:space="preserve">
          <source>You could wait for the user's answer with synchronous, blocking code. The app will be more responsive&amp;mdash;and can do other work&amp;mdash;by waiting for the user's answer asynchronously. Waiting for the user asynchronously is like waiting for the server asynchronously.</source>
          <target state="translated">동기식 차단 코드로 사용자의 답변을 기다릴 수 있습니다. 앱은 사용자의 답변을 비동기 적으로 기다림으로써보다 반응이 빠르고 다른 작업을 수행 할 수 있습니다. 사용자를 비동기 적으로 기다리는 것은 서버를 비동기 적으로 기다리는 것과 같습니다.</target>
        </trans-unit>
        <trans-unit id="97da5902bede5292928b0764fadd7ce008d22c25" translate="yes" xml:space="preserve">
          <source>You create a &lt;em&gt;predicate&lt;/em&gt; with the help of a &lt;code&gt;&lt;a href=&quot;../api/platform-browser/by&quot;&gt;By&lt;/a&gt;&lt;/code&gt; class imported from a library for the runtime platform. Here's the &lt;code&gt;&lt;a href=&quot;../api/platform-browser/by&quot;&gt;By&lt;/a&gt;&lt;/code&gt; import for the browser platform:</source>
          <target state="translated">런타임 플랫폼 용 라이브러리에서 가져온 &lt;code&gt;&lt;a href=&quot;../api/platform-browser/by&quot;&gt;By&lt;/a&gt;&lt;/code&gt; 클래스를 사용하여 &lt;em&gt;술어&lt;/em&gt; 를 작성합니다 . 브라우저 플랫폼의 가져 오기 &lt;code&gt;&lt;a href=&quot;../api/platform-browser/by&quot;&gt;By&lt;/a&gt;&lt;/code&gt; 은 다음과 같습니다 .</target>
        </trans-unit>
        <trans-unit id="2e997d81fa984826f24995df4129ddce79c66abe" translate="yes" xml:space="preserve">
          <source>You create a car component (A) that displays a car constructed from these three generic services.</source>
          <target state="translated">이 세 가지 일반 서비스로 구성된 자동차를 표시하는 자동차 구성 요소 (A)를 작성합니다.</target>
        </trans-unit>
        <trans-unit id="4c680cbe1e975f58df40aec0525bbef6d84d0d05" translate="yes" xml:space="preserve">
          <source>You created a &lt;code&gt;MessageService&lt;/code&gt; for loosely-coupled communication between classes.</source>
          <target state="translated">클래스 간 느슨하게 연결된 통신을 위해 &lt;code&gt;MessageService&lt;/code&gt; 를 작성했습니다 .</target>
        </trans-unit>
        <trans-unit id="69879e078cc685e11611d81835f00e23554349e3" translate="yes" xml:space="preserve">
          <source>You created a separate, reusable &lt;code&gt;HeroDetailComponent&lt;/code&gt;.</source>
          <target state="translated">별도의 재사용 가능한 &lt;code&gt;HeroDetailComponent&lt;/code&gt; 를 작성했습니다 .</target>
        </trans-unit>
        <trans-unit id="ec63722b698f2f7f9f6f52669d935fef4190644e" translate="yes" xml:space="preserve">
          <source>You created the &lt;code&gt;TITLE&lt;/code&gt; token like this:</source>
          <target state="translated">다음 과 같이 &lt;code&gt;TITLE&lt;/code&gt; 토큰을 만들었습니다 .</target>
        </trans-unit>
        <trans-unit id="15a8aa054567a7f3841fdb91558134e2798b7f48" translate="yes" xml:space="preserve">
          <source>You created the initial application structure using the Angular CLI.</source>
          <target state="translated">Angular CLI를 사용하여 초기 애플리케이션 구조를 작성했습니다.</target>
        </trans-unit>
        <trans-unit id="49bbf95f67c77eff1eb874d3aaba2410beba0a5c" translate="yes" xml:space="preserve">
          <source>You decide to give users a way to contact the crisis center. When a user clicks a &quot;Contact&quot; button, you want to display a message in a popup view.</source>
          <target state="translated">사용자에게 위기 센터에 연락 할 수있는 방법을 제공하기로 결정했습니다. 사용자가 &quot;연락처&quot;버튼을 클릭하면 팝업보기에 메시지를 표시하려고합니다.</target>
        </trans-unit>
        <trans-unit id="cda637d7a6f8a41307a3eb2938e4e491f519d86a" translate="yes" xml:space="preserve">
          <source>You declare a template &lt;em&gt;input&lt;/em&gt; variable using the &lt;code&gt;let&lt;/code&gt; keyword (&lt;code&gt;let hero&lt;/code&gt;). The variable's scope is limited to a &lt;em&gt;single instance&lt;/em&gt; of the repeated template. You can use the same variable name again in the definition of other structural directives.</source>
          <target state="translated">&lt;code&gt;let&lt;/code&gt; 키워드 ( &lt;code&gt;let hero&lt;/code&gt; )를 사용하여 템플릿 &lt;em&gt;입력&lt;/em&gt; 변수를 선언합니다 . 변수의 범위는 반복되는 템플릿 의 &lt;em&gt;단일 인스턴스&lt;/em&gt; 로 제한됩니다 . 다른 구조적 지시문의 정의에서 동일한 변수 이름을 다시 사용할 수 있습니다.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="0f1d6b583d7f653d43a33ac1d03564fbc757009e" translate="yes" xml:space="preserve">
          <source>You declare a template &lt;em&gt;reference&lt;/em&gt; variable by prefixing the variable name with &lt;code&gt;#&lt;/code&gt; (&lt;code&gt;#var&lt;/code&gt;). A &lt;em&gt;reference&lt;/em&gt; variable refers to its attached element, component or directive. It can be accessed &lt;em&gt;anywhere&lt;/em&gt; in the &lt;em&gt;entire template&lt;/em&gt;.</source>
          <target state="translated">변수 이름 앞에 &lt;code&gt;#&lt;/code&gt; ( &lt;code&gt;#var&lt;/code&gt; ) 을 붙여 템플릿 &lt;em&gt;참조&lt;/em&gt; 변수를 선언합니다 . &lt;em&gt;기준&lt;/em&gt; 변수는 부착 요소, 구성 요소 또는 지정을 의미한다. 그것은 액세스 할 수 있습니다 &lt;em&gt;어디서나&lt;/em&gt; 에서 &lt;em&gt;전체 템플릿&lt;/em&gt; .&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="8f7426ba201410bebeedab8f0bcba003ad655a70" translate="yes" xml:space="preserve">
          <source>You define a component's application logic&amp;mdash;what it does to support the view&amp;mdash;inside a class. The class interacts with the view through an API of properties and methods.</source>
          <target state="translated">클래스 내에서 구성 요소의 응용 프로그램 논리 (보기 지원 기능)를 정의합니다. 클래스는 속성 및 메서드 API를 통해 뷰와 상호 작용합니다.</target>
        </trans-unit>
        <trans-unit id="5b7927eca765670ed44c6b097df099aafdd30d47" translate="yes" xml:space="preserve">
          <source>You define a component's view with its companion template. A template is a form of HTML that tells Angular how to render the component.</source>
          <target state="translated">컴패니언 템플릿을 사용하여 구성 요소의보기를 정의합니다. 템플릿은 Angular에게 구성 요소를 렌더링하는 방법을 알려주는 HTML 형식입니다.</target>
        </trans-unit>
        <trans-unit id="32acd7fa6645150c28bda4a44925bafff2de6a74" translate="yes" xml:space="preserve">
          <source>You define builder inputs in a JSON schema associated with that builder. The Architect tool collects the resolved input values into an &lt;code&gt;options&lt;/code&gt; object, and validates their types against the schema before passing them to the builder function. (The Schematics library does the same kind of validation of user input).</source>
          <target state="translated">해당 빌더와 연관된 JSON 스키마에서 빌더 입력을 정의하십시오. Architect 도구는 분석 된 입력 값을 &lt;code&gt;options&lt;/code&gt; 오브젝트 로 수집 하고 빌더 함수에 전달하기 전에 스키마에 대해 해당 유형의 유효성을 검증합니다. Schematics 라이브러리는 동일한 종류의 사용자 입력 유효성 검사를 수행합니다.</target>
        </trans-unit>
        <trans-unit id="ba11e7820731438da2ab7b201740f1db45d7b9e5" translate="yes" xml:space="preserve">
          <source>You define private styles either inline in the &lt;code&gt;@&lt;a href=&quot;../api/core/component#styles&quot;&gt;Component.styles&lt;/a&gt;&lt;/code&gt; array or as stylesheet file(s) identified in the &lt;code&gt;@&lt;a href=&quot;../api/core/component#styleUrls&quot;&gt;Component.styleUrls&lt;/a&gt;&lt;/code&gt; array.</source>
          <target state="translated">당신은에 어느 인라인 개인 스타일을 정의 &lt;code&gt;@&lt;a href=&quot;../api/core/component#styles&quot;&gt;Component.styles&lt;/a&gt;&lt;/code&gt; 배열 또는에서 확인 된 스타일 시트 파일 (들)로 &lt;code&gt;@&lt;a href=&quot;../api/core/component#styleUrls&quot;&gt;Component.styleUrls&lt;/a&gt;&lt;/code&gt; 배열입니다.</target>
        </trans-unit>
        <trans-unit id="a4afec75480609b577b546845b75d0193d9a7484" translate="yes" xml:space="preserve">
          <source>You defined dummy data for &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel#model&quot;&gt;model&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;powers&lt;/code&gt;, as befits a demo.</source>
          <target state="translated">데모에 적합하도록 &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel#model&quot;&gt;model&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;powers&lt;/code&gt; 에 대한 더미 데이터를 정의했습니다 .</target>
        </trans-unit>
        <trans-unit id="9775074048765a7506b60b3498a845f0ee99a8eb" translate="yes" xml:space="preserve">
          <source>You defined simple routes, a redirect route, and a parameterized route.</source>
          <target state="translated">간단한 경로, 경로 재 지정 경로 및 매개 변수화 된 경로를 정의했습니다.</target>
        </trans-unit>
        <trans-unit id="c94272eeef2f70c3770238ca8d900608e51e367a" translate="yes" xml:space="preserve">
          <source>You develop applications in the context of an Angular &lt;a href=&quot;glossary#workspace&quot;&gt;workspace&lt;/a&gt;. A workspace contains the files for one or more &lt;a href=&quot;glossary#project&quot;&gt;projects&lt;/a&gt;. A project is the set of files that comprise a standalone application or a shareable library.</source>
          <target state="translated">Angular &lt;a href=&quot;glossary#workspace&quot;&gt;작업 영역&lt;/a&gt; 에서 응용 프로그램을 개발합니다 . 작업 공간에는 하나 이상의 &lt;a href=&quot;glossary#project&quot;&gt;프로젝트에&lt;/a&gt; 대한 파일이 포함 됩니다. 프로젝트는 독립형 애플리케이션 또는 공유 가능한 라이브러리를 구성하는 파일 세트입니다.</target>
        </trans-unit>
        <trans-unit id="529da0c90bf482cb894e6c0d2308fa67c709758a" translate="yes" xml:space="preserve">
          <source>You develop apps in the context of an Angular &lt;a href=&quot;../guide/glossary#workspace&quot;&gt;workspace&lt;/a&gt;. A workspace contains the files for one or more &lt;a href=&quot;../guide/glossary#project&quot;&gt;projects&lt;/a&gt;. A project is the set of files that comprise an app, a library, or end-to-end (e2e) tests. For this tutorial, you will create a new workspace.</source>
          <target state="translated">Angular &lt;a href=&quot;../guide/glossary#workspace&quot;&gt;작업 영역&lt;/a&gt; 에서 앱을 개발합니다 . 작업 공간에는 하나 이상의 &lt;a href=&quot;../guide/glossary#project&quot;&gt;프로젝트에&lt;/a&gt; 대한 파일이 포함 됩니다. 프로젝트는 앱, 라이브러리 또는 엔드 투 엔드 (e2e) 테스트를 구성하는 파일 세트입니다. 이 학습서에서는 새 작업 공간을 작성합니다.</target>
        </trans-unit>
        <trans-unit id="8c153a8b8dd4eef6ee944563093b018b249cf8bc" translate="yes" xml:space="preserve">
          <source>You develop apps in the context of an Angular &lt;a href=&quot;glossary#workspace&quot;&gt;&lt;strong&gt;workspace&lt;/strong&gt;&lt;/a&gt;.</source>
          <target state="translated">Angular &lt;a href=&quot;glossary#workspace&quot;&gt;&lt;strong&gt;작업 영역&lt;/strong&gt;&lt;/a&gt; 에서 앱을 개발합니다 .</target>
        </trans-unit>
        <trans-unit id="cad868462720f78e39fb54113107bdb2151bf554" translate="yes" xml:space="preserve">
          <source>You discovered &lt;code&gt;Observable&lt;/code&gt; and the RxJS &lt;em&gt;Observable&lt;/em&gt; library.</source>
          <target state="translated">&lt;code&gt;Observable&lt;/code&gt; 및 RxJS &lt;em&gt;Observable&lt;/em&gt; 라이브러리를 발견했습니다 .</target>
        </trans-unit>
        <trans-unit id="ae593ea8f7cf5d76b13a2df3cf6fd060bbbe460a" translate="yes" xml:space="preserve">
          <source>You displayed the &lt;code&gt;HeroesComponent&lt;/code&gt; by adding it to the &lt;code&gt;AppComponent&lt;/code&gt; shell.</source>
          <target state="translated">&lt;code&gt;HeroesComponent&lt;/code&gt; 를 &lt;code&gt;AppComponent&lt;/code&gt; 쉘 에 추가하여 표시했습니다 .</target>
        </trans-unit>
        <trans-unit id="e996b18b32d62cc7b697a4a44de75a2198dc64ed" translate="yes" xml:space="preserve">
          <source>You do have to call &lt;code&gt;&lt;a href=&quot;../api/core/applicationref#tick&quot;&gt;tick()&lt;/a&gt;&lt;/code&gt; to advance the (virtual) clock.</source>
          <target state="translated">(가상) 시계를 진행 시키려면 &lt;code&gt;&lt;a href=&quot;../api/core/applicationref#tick&quot;&gt;tick()&lt;/a&gt;&lt;/code&gt; 을 호출해야합니다 .</target>
        </trans-unit>
        <trans-unit id="968d2cfadfc8d156baf5a614df3bd087519fdfba" translate="yes" xml:space="preserve">
          <source>You do not add a &lt;code&gt;bootstrap&lt;/code&gt; declaration to the &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; decorator since AngularJS owns the root template of the app and &lt;code&gt;ngUpgrade&lt;/code&gt; bootstraps the necessary components.</source>
          <target state="translated">AngularJS는 앱의 루트 템플릿을 소유하고 &lt;code&gt;ngUpgrade&lt;/code&gt; 는 필요한 구성 요소를 부트 스트랩 하기 때문에 &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 데코레이터에 &lt;code&gt;bootstrap&lt;/code&gt; 선언을 추가하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="f339ed0ea3e57c3325a2a5f69381bf18524d93c4" translate="yes" xml:space="preserve">
          <source>You do not need a &lt;code&gt;providers&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; array. Next, in &lt;code&gt;inspector.component.html&lt;/code&gt;, add the same markup from previous components:</source>
          <target state="translated">&lt;code&gt;providers&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; 배열이 필요하지 않습니다 . 다음으로 &lt;code&gt;inspector.component.html&lt;/code&gt; 에서 이전 구성 요소와 동일한 마크 업을 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="2397e2bbc8ab79911f639f7e2b5b4df13a0c67c4" translate="yes" xml:space="preserve">
          <source>You don't add this guard to the &lt;code&gt;MissionControlComponent&lt;/code&gt; because, as the parent, it controls the lifetime of the &lt;code&gt;MissionService&lt;/code&gt;.</source>
          <target state="translated">당신은이 경비를 추가하지 &lt;code&gt;MissionControlComponent&lt;/code&gt; 부모로, 그것의 수명을 제어하기 때문 &lt;code&gt;MissionService&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="f1a31d9fae72f722beff985f29aa3adb965f9851" translate="yes" xml:space="preserve">
          <source>You don't have to publish your library to the npm package manager in order to use it in your own apps, but you do have to build it first.</source>
          <target state="translated">자신의 앱에서 라이브러리를 사용하기 위해 라이브러리를 npm 패키지 관리자에 게시 할 필요는 없지만 먼저 빌드해야합니다.</target>
        </trans-unit>
        <trans-unit id="3c0dd27f24884c44ac80fd44e87404ba88ac9237" translate="yes" xml:space="preserve">
          <source>You don't need a value accessor for an Angular component that you write because you can name the value and event properties to suit Angular's basic &lt;a href=&quot;template-syntax#two-way&quot;&gt;two-way binding syntax&lt;/a&gt; and skip &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; altogether. The &lt;code&gt;sizer&lt;/code&gt; in the &lt;a href=&quot;template-syntax#two-way&quot;&gt;Two-way Binding&lt;/a&gt; section is an example of this technique.</source>
          <target state="translated">Angular의 기본 &lt;a href=&quot;template-syntax#two-way&quot;&gt;양방향 바인딩 구문&lt;/a&gt; 에 맞게 값 및 이벤트 속성의 이름을 지정하고 &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; 을 건너 뛸 수 있으므로 작성하는 Angular 구성 요소에 대한 값 접근자가 필요하지 않습니다 . &lt;code&gt;sizer&lt;/code&gt; 에서 &lt;a href=&quot;template-syntax#two-way&quot;&gt;양방향 바인딩&lt;/a&gt; 부분은이 기술의 예입니다.</target>
        </trans-unit>
        <trans-unit id="6edb42c4ded36ca1b5f0c0194408b230a9baac09" translate="yes" xml:space="preserve">
          <source>You don't pass the Angular module directly to &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt;. All &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; needs is a &quot;recipe&quot;, for example, a factory function, to create an instance for your module.</source>
          <target state="translated">Angular 모듈을 &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; 직접 전달하지 않습니다 . &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; 모듈 ()의 모든 요구 사항은 모듈의 인스턴스를 만들기위한 팩토리 함수와 같은 &quot;레시피&quot;입니다.</target>
        </trans-unit>
        <trans-unit id="06ad2eea71ea7357c8fec4884fe86cd43775854c" translate="yes" xml:space="preserve">
          <source>You don't see hero data because you're not binding to the &lt;code&gt;Hero&lt;/code&gt; yet. You know how to do that from earlier pages. &lt;a href=&quot;displaying-data&quot;&gt;Displaying Data&lt;/a&gt; teaches property binding. &lt;a href=&quot;user-input&quot;&gt;User Input&lt;/a&gt; shows how to listen for DOM events with an event binding and how to update a component property with the displayed value.</source>
          <target state="translated">아직 &lt;code&gt;Hero&lt;/code&gt; 바인딩되어 있지 않기 때문에 영웅 데이터가 표시되지 않습니다 . 이전 페이지에서이를 수행하는 방법을 알고 있습니다. &lt;a href=&quot;displaying-data&quot;&gt;데이터 표시&lt;/a&gt; 는 속성 바인딩을 가르쳐줍니다. &lt;a href=&quot;user-input&quot;&gt;사용자 입력&lt;/a&gt; 은 이벤트 바인딩으로 DOM 이벤트를 청취하는 방법 및 표시된 값으로 구성 요소 특성을 업데이트하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="ddf4fd09c38d4933aed6c7d3ec97d63c53eb3416" translate="yes" xml:space="preserve">
          <source>You don't send data as you did with &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient#put&quot;&gt;put()&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient#post&quot;&gt;post()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient#put&quot;&gt;put()&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient#post&quot;&gt;post()&lt;/a&gt;&lt;/code&gt; 와 같이 데이터를 보내지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="c8932957788788260cbad74d840121c65dcda189" translate="yes" xml:space="preserve">
          <source>You don't want the router to remove the current &lt;code&gt;HeroDetailComponent&lt;/code&gt; instance from the DOM only to re-create it for the next &lt;code&gt;id&lt;/code&gt;. That could be visibly jarring. Better to simply re-use the same component instance and update the parameter.</source>
          <target state="translated">라우터가 DOM에서 현재 &lt;code&gt;HeroDetailComponent&lt;/code&gt; 인스턴스 를 제거 하여 다음 &lt;code&gt;id&lt;/code&gt; 에 대해서만 인스턴스를 다시 작성 하지 않도록합니다 . 눈에 띄게 왜곡 될 수 있습니다. 동일한 컴포넌트 인스턴스를 재사용하고 매개 변수를 업데이트하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="874a57897e2b077437d3f003e7f72568492154eb" translate="yes" xml:space="preserve">
          <source>You don't yet have such a root component, because the app is still managed as an AngularJS app. Create a new &lt;code&gt;app.component.ts&lt;/code&gt; file with the following &lt;code&gt;AppComponent&lt;/code&gt; class:</source>
          <target state="translated">앱은 여전히 ​​AngularJS 앱으로 관리되기 때문에 아직 루트 구성 요소가 없습니다. 다음 &lt;code&gt;AppComponent&lt;/code&gt; 클래스를 사용하여 새 &lt;code&gt;app.component.ts&lt;/code&gt; 파일을 작성하십시오 .</target>
        </trans-unit>
        <trans-unit id="9e773f9fce09e61fe127558d4b87784c5cd60c78" translate="yes" xml:space="preserve">
          <source>You enable these features in the string assigned to &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt;, which you write in Angular's &lt;a href=&quot;structural-directives#microsyntax&quot;&gt;microsyntax&lt;/a&gt;.</source>
          <target state="translated">Angular의 &lt;a href=&quot;structural-directives#microsyntax&quot;&gt;microsyntax로&lt;/a&gt; 작성하는 &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 에 지정된 문자열에서 이러한 기능을 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d18a7bb85112be047d72a8888d9a3d974d1dd317" translate="yes" xml:space="preserve">
          <source>You extended &lt;code&gt;HeroService&lt;/code&gt; to support &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient#post&quot;&gt;post()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient#put&quot;&gt;put()&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;delete()&lt;/code&gt; methods.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient#post&quot;&gt;post()&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient#put&quot;&gt;put()&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;delete()&lt;/code&gt; 메서드 를 지원하도록 &lt;code&gt;HeroService&lt;/code&gt; 를 확장 했습니다 .</target>
        </trans-unit>
        <trans-unit id="d0a22e5863eb8545076e90d175707ef42a1fe0cb" translate="yes" xml:space="preserve">
          <source>You face this dilemma when a class makes &lt;em&gt;a reference to itself&lt;/em&gt; as does &lt;code&gt;AlexComponent&lt;/code&gt; in its &lt;code&gt;providers&lt;/code&gt; array. The &lt;code&gt;providers&lt;/code&gt; array is a property of the &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; decorator function which must appear &lt;em&gt;above&lt;/em&gt; the class definition.</source>
          <target state="translated">당신은 클래스를 만드는이 딜레마에 직면 &lt;em&gt;자체에 대한 참조를&lt;/em&gt; 처럼 &lt;code&gt;AlexComponent&lt;/code&gt; 을 자사에서 &lt;code&gt;providers&lt;/code&gt; 배열. &lt;code&gt;providers&lt;/code&gt; 배열의 속성이다 &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; 나타나야 장식 기능 &lt;em&gt;이상&lt;/em&gt; 클래스 정의.</target>
        </trans-unit>
        <trans-unit id="6ef967a004f34b820e4c797e11c707baab096d2e" translate="yes" xml:space="preserve">
          <source>You gave the &lt;code&gt;HeroService&lt;/code&gt;&lt;em&gt;get data&lt;/em&gt; method an asynchronous signature.</source>
          <target state="translated">당신은 준 &lt;code&gt;HeroService&lt;/code&gt; 의&lt;em&gt;데이터 가져 오기&lt;/em&gt; 방법을 비동기 서명을.</target>
        </trans-unit>
        <trans-unit id="df6909bc3e1d9962f6410ea44e84383dbf079a01" translate="yes" xml:space="preserve">
          <source>You get the best of both worlds: the property name you want and the binding syntax you want:</source>
          <target state="translated">원하는 속성 이름과 원하는 바인딩 구문을 모두 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8eb2a4f5af2b4624d26450a803642ace378a3265" translate="yes" xml:space="preserve">
          <source>You get this test failure message when the runtime environment compiles the source code &lt;em&gt;during the tests themselves&lt;/em&gt;.</source>
          <target state="translated">테스트 &lt;em&gt;중에&lt;/em&gt; 런타임 환경에서 소스 코드를 컴파일 할 때이 테스트 실패 메시지가 표시됩니다 .</target>
        </trans-unit>
        <trans-unit id="7c7f73eb7078bb63026d14eafb1dd6977cc163ff" translate="yes" xml:space="preserve">
          <source>You have a basic online store catalog with a product list, &quot;Share&quot; button, and &quot;Notify Me&quot; button. You've learned about the foundation of Angular: components and template syntax. You've also learned how the component class and template interact, and how components communicate with each other.</source>
          <target state="translated">제품 목록, &quot;공유&quot;단추 및 &quot;알림&quot;단추가있는 기본 온라인 상점 카탈로그가 있습니다. Angular의 기초 : 구성 요소 및 템플릿 구문에 대해 배웠습니다. 또한 구성 요소 클래스와 템플릿이 상호 작용하는 방법과 구성 요소가 서로 통신하는 방법에 대해서도 배웠습니다.</target>
        </trans-unit>
        <trans-unit id="2bda297628d1d79533887db4f5250339e59b413f" translate="yes" xml:space="preserve">
          <source>You have mastered the basic primitives for responding to user input and gestures.</source>
          <target state="translated">사용자 입력 및 제스처에 응답하기위한 기본 기본 요소를 마스터했습니다.</target>
        </trans-unit>
        <trans-unit id="403a24ab72807826d6e99db19df590ad937b3e9a" translate="yes" xml:space="preserve">
          <source>You have to clear all of the flags imperatively, which you can do by calling the form's &lt;code&gt;reset()&lt;/code&gt; method after calling the &lt;code&gt;newHero()&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;newHero()&lt;/code&gt; 메소드를 호출 한 후 폼의 &lt;code&gt;reset()&lt;/code&gt; 메소드를 호출하여 수행 할 수있는 모든 플래그를 반드시 지워야합니다 .</target>
        </trans-unit>
        <trans-unit id="647900f0f6b5a29a423879375ffc5d105b62d794" translate="yes" xml:space="preserve">
          <source>You have to configure the server to return &lt;code&gt;index.html&lt;/code&gt; for requests to these &quot;unknown&quot; pages. The &lt;code&gt;lite-server&lt;/code&gt; development server does out-of-the-box. If you've switched over to F5 and IIS, you have to configure IIS to do it. This section walks through the steps to adapt the Getting Started application.</source>
          <target state="translated">이러한 &quot;알 수없는&quot;페이지에 대한 요청에 대해 &lt;code&gt;index.html&lt;/code&gt; 을 반환하도록 서버를 구성해야합니다 . &lt;code&gt;lite-server&lt;/code&gt; 개발 서버는 기본적으로 사용 됩니다. F5 및 IIS로 전환 한 경우 IIS를 구성해야합니다. 이 섹션에서는 시작하기 응용 프로그램을 조정하는 단계를 안내합니다.</target>
        </trans-unit>
        <trans-unit id="b2b9527630bfca265914c0c26cfaef53e94e543a" translate="yes" xml:space="preserve">
          <source>You have to write the listeners correctly.</source>
          <target state="translated">리스너를 올바르게 작성해야합니다.</target>
        </trans-unit>
        <trans-unit id="94b2f100c969ea726907f13bdc210ab42003ac48" translate="yes" xml:space="preserve">
          <source>You identified the snippet's source file by setting the &lt;code&gt;path&lt;/code&gt; attribute to sample folder's location &lt;em&gt;within&lt;/em&gt;&lt;code&gt;content/examples&lt;/code&gt;. In this example, that path is &lt;code&gt;docs-style-guide/src/app/app.module.ts&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;content/examples&lt;/code&gt; &lt;em&gt;내&lt;/em&gt; 에서 &lt;code&gt;path&lt;/code&gt; 속성을 sample 폴더 위치 로 설정하여 스 니펫의 소스 파일을 식별했습니다 . 이 예에서 해당 경로는 &lt;code&gt;docs-style-guide/src/app/app.module.ts&lt;/code&gt; 입니다.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="dfd9ddc7009058357875f01d6d0ddfbeacf21af7" translate="yes" xml:space="preserve">
          <source>You identify the sort fields by text strings, expecting the pipe to reference a property value by indexing (such as &lt;code&gt;hero['name']&lt;/code&gt;). Unfortunately, aggressive minification manipulates the &lt;code&gt;Hero&lt;/code&gt; property names so that &lt;code&gt;Hero.name&lt;/code&gt; and &lt;code&gt;Hero.planet&lt;/code&gt; become something like &lt;code&gt;Hero.a&lt;/code&gt; and &lt;code&gt;Hero.b&lt;/code&gt;. Clearly &lt;code&gt;hero['name']&lt;/code&gt; doesn't work.</source>
          <target state="translated">파이프가 색인화하여 특성 값 (예 : &lt;code&gt;hero['name']&lt;/code&gt; ) 을 참조 할 것으로 예상하여 텍스트 문자열로 정렬 필드를 식별합니다 . 불행히도 공격적인 축소 는 &lt;code&gt;Hero.name&lt;/code&gt; 및 &lt;code&gt;Hero.planet&lt;/code&gt; 이 &lt;code&gt;Hero.a&lt;/code&gt; 및 &lt;code&gt;Hero.b&lt;/code&gt; 와 같이 되도록 &lt;code&gt;Hero&lt;/code&gt; 속성 이름을 조작합니다 . 분명히 &lt;code&gt;hero['name']&lt;/code&gt; 은 작동하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="534030ccbe4c8339979c2da0870383ab2e09b0fc" translate="yes" xml:space="preserve">
          <source>You import &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; 을 가져 옵니다 .</target>
        </trans-unit>
        <trans-unit id="dc5cb30c9f13ada9c51270e8d71b5c0f6b00bcd0" translate="yes" xml:space="preserve">
          <source>You import the &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; symbol from the Angular core library.</source>
          <target state="translated">Angular 코어 라이브러리에서 &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; 기호를 가져옵니다 .</target>
        </trans-unit>
        <trans-unit id="ea44ad56c9289580e7c7dea1838b81b5f4e116ed" translate="yes" xml:space="preserve">
          <source>You imported the &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; in the &lt;code&gt;AppModule&lt;/code&gt; so that Angular would recognize and apply the &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; directive.</source>
          <target state="translated">Angular가 &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; 지시문을 인식하고 적용 할 수 있도록 &lt;code&gt;AppModule&lt;/code&gt; 에서 &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; 을 가져 왔습니다 .</target>
        </trans-unit>
        <trans-unit id="7d6395ce5a6721b240c9bfc19235c9223f65f55c" translate="yes" xml:space="preserve">
          <source>You include array-level validators and async validators. These come in handy when you want to perform validation that considers the value of more than one child control.</source>
          <target state="translated">배열 수준 유효성 검사기와 비동기 유효성 검사기를 포함합니다. 둘 이상의 자식 컨트롤 값을 고려한 유효성 검사를 수행 할 때 유용합니다.</target>
        </trans-unit>
        <trans-unit id="31211eaedbd1e3c3f45d87bb4ee605329ebcce4a" translate="yes" xml:space="preserve">
          <source>You include group-level validators as the second arg, or group-level async validators as the third arg. These come in handy when you want to perform validation that considers the value of more than one child control.</source>
          <target state="translated">그룹 레벨 유효성 검사기를 두 번째 인수로 포함하거나 그룹 레벨 비동기 유효성 검사기를 세 번째 인수로 포함합니다. 둘 이상의 자식 컨트롤 값을 고려한 유효성 검사를 수행 할 때 유용합니다.</target>
        </trans-unit>
        <trans-unit id="a5a5b9e7cc3c59932a70736c975c97b789830b6d" translate="yes" xml:space="preserve">
          <source>You inherit from &lt;code&gt;FlyingHeroesPipe&lt;/code&gt; to prove the point that nothing changed internally. The only difference is the &lt;code&gt;pure&lt;/code&gt; flag in the pipe metadata.</source>
          <target state="translated">내부적으로 변경된 것이 없다는 점을 증명하기 위해 &lt;code&gt;FlyingHeroesPipe&lt;/code&gt; 에서 상속 합니다. 유일한 차이점은 파이프 메타 데이터 의 &lt;code&gt;pure&lt;/code&gt; 플래그입니다.</target>
        </trans-unit>
        <trans-unit id="45b3d22fb1abc1464375fb57cdba98755cc9ce40" translate="yes" xml:space="preserve">
          <source>You inject both in the directive constructor as private variables of the class.</source>
          <target state="translated">지시문 생성자에 클래스의 전용 변수로 둘 다 삽입합니다.</target>
        </trans-unit>
        <trans-unit id="54a6b237e6466d9412e1f7c99d407f301f408b83" translate="yes" xml:space="preserve">
          <source>You just have to make sure, in this case, that you're supplying an object because that's the type of &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; and is what the nested component, &lt;code&gt;ListItemComponent&lt;/code&gt;, expects.</source>
          <target state="translated">이 경우 &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; 유형이며 중첩 된 구성 요소 인 &lt;code&gt;ListItemComponent&lt;/code&gt; 가 기대 하는 것이므로 객체를 제공하고 있는지 확인하면됩니다 .</target>
        </trans-unit>
        <trans-unit id="9c87ffac97edf99c44c05be8432ec5d85c183a5a" translate="yes" xml:space="preserve">
          <source>You know how to spy on the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; and a data service.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; 와 데이터 서비스 를 감시하는 방법을 알고 있습니다.</target>
        </trans-unit>
        <trans-unit id="43d649d6e1796b0013dac6c4d0274ce215ce3980" translate="yes" xml:space="preserve">
          <source>You learned</source>
          <target state="translated">당신이 배운</target>
        </trans-unit>
        <trans-unit id="2effd1458050a600ce87de67a9f44e297c3819b6" translate="yes" xml:space="preserve">
          <source>You learned about the &lt;code&gt;AppModule&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;AppModule&lt;/code&gt; 에 대해 배웠습니다 .</target>
        </trans-unit>
        <trans-unit id="ec106256b7d6821eb29a5d9c3d4651ad72a91314" translate="yes" xml:space="preserve">
          <source>You learned how to use observables.</source>
          <target state="translated">옵저버 블을 사용하는 방법을 배웠습니다.</target>
        </trans-unit>
        <trans-unit id="fd40c2d31af0a62fe960e98a2b2a338ef69b2ee9" translate="yes" xml:space="preserve">
          <source>You learned that Angular components display data.</source>
          <target state="translated">각도 구성 요소가 데이터를 표시한다는 것을 알게되었습니다.</target>
        </trans-unit>
        <trans-unit id="218f49a9777671f831a085c14e8cb78896e24d60" translate="yes" xml:space="preserve">
          <source>You learned the basics of Angular animations in the &lt;a href=&quot;animations&quot;&gt;introduction&lt;/a&gt; page.</source>
          <target state="translated">&lt;a href=&quot;animations&quot;&gt;소개&lt;/a&gt; 페이지 에서 Angular 애니메이션의 기본 사항을 배웠습니다 .</target>
        </trans-unit>
        <trans-unit id="986d0d34ac77bc518f14910657f1af62c062e2e5" translate="yes" xml:space="preserve">
          <source>You learned the basics of Angular dependency injection in this page. You can register various kinds of providers, and you know how to ask for an injected object (such as a service) by adding a parameter to a constructor.</source>
          <target state="translated">이 페이지에서 각도 의존성 주입의 기본 사항을 배웠습니다. 다양한 종류의 공급자를 등록 할 수 있으며 생성자에 매개 변수를 추가하여 서비스와 같은 주입 된 개체를 요청하는 방법을 알고 있습니다.</target>
        </trans-unit>
        <trans-unit id="43cb427f81e9f13df0d370db9434387eee018c36" translate="yes" xml:space="preserve">
          <source>You learned the importance of declaring components in the &lt;code&gt;AppModule&lt;/code&gt; and appreciated that the CLI declared it for you.</source>
          <target state="translated">&lt;code&gt;AppModule&lt;/code&gt; 에서 컴포넌트를 선언하는 것의 중요성을 배웠고 CLI 가이를 선언 한 것에 감사했습니다.</target>
        </trans-unit>
        <trans-unit id="f1480492cb461306d102f676c74995e1c9b2177d" translate="yes" xml:space="preserve">
          <source>You learned to add animation to a simple transition between two states, using &lt;code&gt;&lt;a href=&quot;../api/animations/style&quot;&gt;style&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/%24locationshim#state&quot;&gt;state()&lt;/a&gt;&lt;/code&gt; along with &lt;code&gt;&lt;a href=&quot;../api/animations/animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; for the timing.</source>
          <target state="translated">타이밍에 대해 &lt;code&gt;&lt;a href=&quot;../api/animations/animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; () 과 함께 &lt;code&gt;&lt;a href=&quot;../api/animations/style&quot;&gt;style&lt;/a&gt;()&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/%24locationshim#state&quot;&gt;state()&lt;/a&gt;&lt;/code&gt; 를 사용하여 두 상태 간의 간단한 전환에 애니메이션을 추가하는 방법을 배웠습니다 .</target>
        </trans-unit>
        <trans-unit id="1d836c61590a9bedb7743208cf2fe3521c59ac14" translate="yes" xml:space="preserve">
          <source>You may also be interested in the following:</source>
          <target state="translated">다음에 관심이있을 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="e740b712501900f1eaa079a6bd3664db587c47aa" translate="yes" xml:space="preserve">
          <source>You may also be interested in:</source>
          <target state="translated">당신은 또한 관심이있을 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="c4d515285739d4a8385ca0308eb1ed02069c61aa" translate="yes" xml:space="preserve">
          <source>You may also completely remove the following files. They are AngularJS module configuration files and not needed in Angular:</source>
          <target state="translated">다음 파일을 완전히 제거 할 수도 있습니다. AngularJS 모듈 구성 파일이며 Angular에서는 필요하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="0d5187f7488fc4eeca07d6931cc3ff75a045d26f" translate="yes" xml:space="preserve">
          <source>You may be familiar with the component/template duality from your experience with model-view-controller (MVC) or model-view-viewmodel (MVVM). In Angular, the component plays the part of the controller/viewmodel, and the template represents the view.</source>
          <target state="translated">MVC (model-view-controller) 또는 MVVM (model-view-viewmodel)에 대한 경험을 통해 구성 요소 / 템플릿 이중성에 익숙 할 수 있습니다. Angular에서 구성 요소는 컨트롤러 / 뷰 모델의 일부를 재생하며 템플릿은 뷰를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="6fedc8f95eb6ff03cbad27e4d9d8c19359b6666b" translate="yes" xml:space="preserve">
          <source>You may call this method &lt;em&gt;exactly once&lt;/em&gt;. If you must change this default in the middle of your test run, call &lt;code&gt;resetTestEnvironment&lt;/code&gt; first.</source>
          <target state="translated">이 메소드를 &lt;em&gt;정확히 한 번만&lt;/em&gt; 호출 할 수 있습니다 . 테스트 실행 &lt;code&gt;resetTestEnvironment&lt;/code&gt; 기본값을 변경 해야하는 경우 먼저 resetTestEnvironment를 호출 하십시오 .</target>
        </trans-unit>
        <trans-unit id="956116cef16d826f55f0ee882124115469b51de6" translate="yes" xml:space="preserve">
          <source>You may have expected the &lt;code&gt;&lt;a href=&quot;../api/common/http/jsonpinterceptor#intercept&quot;&gt;intercept()&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;handle()&lt;/code&gt; methods to return observables of &lt;code&gt;&lt;a href=&quot;../api/common/http/httpresponse&quot;&gt;HttpResponse&lt;/a&gt;&amp;lt;any&amp;gt;&lt;/code&gt; as most &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; methods do.</source>
          <target state="translated">대부분의 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; 메소드 와 같이 &lt;code&gt;&lt;a href=&quot;../api/common/http/jsonpinterceptor#intercept&quot;&gt;intercept()&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;handle()&lt;/code&gt; 메소드가 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpresponse&quot;&gt;HttpResponse&lt;/a&gt;&amp;lt;any&amp;gt;&lt;/code&gt; 의 옵저버 블 을 리턴 할 것으로 예상했을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="76bc712cc68d7c5402da4772daaca0be99aa1297" translate="yes" xml:space="preserve">
          <source>You may have noticed that the custom validation directive is instantiated with &lt;code&gt;&lt;a href=&quot;../api/core/existingsansprovider#useExisting&quot;&gt;useExisting&lt;/a&gt;&lt;/code&gt; rather than &lt;code&gt;useClass&lt;/code&gt;. The registered validator must be &lt;em&gt;this instance&lt;/em&gt; of the &lt;code&gt;ForbiddenValidatorDirective&lt;/code&gt;&amp;mdash;the instance in the form with its &lt;code&gt;forbiddenName&lt;/code&gt; property bound to &amp;ldquo;bob&quot;. If you were to replace &lt;code&gt;&lt;a href=&quot;../api/core/existingsansprovider#useExisting&quot;&gt;useExisting&lt;/a&gt;&lt;/code&gt; with &lt;code&gt;useClass&lt;/code&gt;, then you&amp;rsquo;d be registering a new class instance, one that doesn&amp;rsquo;t have a &lt;code&gt;forbiddenName&lt;/code&gt;.</source>
          <target state="translated">사용자 정의 유효성 검증 지시문이 &lt;code&gt;&lt;a href=&quot;../api/core/existingsansprovider#useExisting&quot;&gt;useExisting&lt;/a&gt;&lt;/code&gt; 가 아닌 &lt;code&gt;useClass&lt;/code&gt; 인스턴스화 되었음을 알 수 있습니다. 등록 된 검증이 있어야합니다 &lt;em&gt;이 인스턴스&lt;/em&gt; 의 &lt;code&gt;ForbiddenValidatorDirective&lt;/code&gt; 그와 형태 년 - 예를 &lt;code&gt;forbiddenName&lt;/code&gt; 의 &quot;밥&quot;에 바인딩 속성입니다. 당신은 대체한다면 &lt;code&gt;&lt;a href=&quot;../api/core/existingsansprovider#useExisting&quot;&gt;useExisting&lt;/a&gt;&lt;/code&gt; 와 &lt;code&gt;useClass&lt;/code&gt; , 당신은 새로운 클래스 인스턴스를 등록 할 것, 하나의 그 아무튼 ' t &lt;code&gt;forbiddenName&lt;/code&gt; 이 없습니다 .</target>
        </trans-unit>
        <trans-unit id="1494a062fc491e2edb8c9768a1f3149cff2fb785" translate="yes" xml:space="preserve">
          <source>You may not want your application to display errors before the user has a chance to edit the form. The checks for &lt;code&gt;dirty&lt;/code&gt; and &lt;code&gt;touched&lt;/code&gt; prevent errors from showing until the user does one of two things: changes the value, turning the control dirty; or blurs the form control element, setting the control to touched.</source>
          <target state="translated">사용자가 양식을 편집하기 전에 응용 프로그램에 오류가 표시되지 않도록 할 수 있습니다. &lt;code&gt;dirty&lt;/code&gt; 및 &lt;code&gt;touched&lt;/code&gt; 확인 은 사용자가 두 가지 중 하나를 수행 할 때까지 오류가 표시되지 않도록합니다. 값을 변경하고 컨트롤을 더럽게합니다. 또는 컨트롤을 터치하도록 설정하여 양식 컨트롤 요소를 흐리게합니다.</target>
        </trans-unit>
        <trans-unit id="2cbdf34b0e05bd8e2763ff6b92dfc13e5f273e20" translate="yes" xml:space="preserve">
          <source>You may prefer instead to define private styles for a specific component and keep everything a component needs&amp;mdash; the code, the HTML, and the CSS &amp;mdash;together in one place.</source>
          <target state="translated">대신 특정 구성 요소에 대한 개인 스타일을 정의하고 구성 요소에 필요한 모든 것 (코드, HTML 및 CSS)을 한 곳에 보관하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="63ed428a1fc59ae167783ce22f7f21595f5f7c4f" translate="yes" xml:space="preserve">
          <source>You may prefer this approach to the property setter when watching multiple, interacting input properties.</source>
          <target state="translated">여러 개의 상호 작용하는 입력 속성을 볼 때 속성 설정기에이 접근 방식을 선호 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b76d5a2e15be04297ebf5f1de99ce2183f9e73ff" translate="yes" xml:space="preserve">
          <source>You might ask the user if it's OK to discard pending changes rather than save them.</source>
          <target state="translated">보류중인 변경 내용을 저장하지 않고 무시해도 괜찮은지를 사용자에게 요청할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="432129a8533c399d3f0f2a7cbe6dde40ae0b3b09" translate="yes" xml:space="preserve">
          <source>You might be satisfied with the test coverage of these tests.</source>
          <target state="translated">이 테스트의 테스트 범위에 만족할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e1478dd5d10334ec0d9cccd60da96358f954e9c2" translate="yes" xml:space="preserve">
          <source>You might decide only to test that the &lt;code&gt;clicked()&lt;/code&gt; method toggles the light's &lt;em&gt;on/off&lt;/em&gt; state and sets the message appropriately.</source>
          <target state="translated">&lt;code&gt;clicked()&lt;/code&gt; 메소드가 라이트의 &lt;em&gt;켜기 / 끄기&lt;/em&gt; 상태를 전환 하고 메시지를 적절하게 설정 하는지 테스트 만 결정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="929a38a57e16c6eb4e8a1a9a2706dddb726f699e" translate="yes" xml:space="preserve">
          <source>You might first devise an error handler like this one:</source>
          <target state="translated">먼저 다음과 같은 오류 처리기를 고안 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="403f3d3d06d0dc644f9174d6c5ad9b91e0519d2c" translate="yes" xml:space="preserve">
          <source>You might have noticed that the CLI adds &lt;code&gt;RouterModule.forRoot(routes)&lt;/code&gt; to the &lt;code&gt;app-routing.module.ts&lt;/code&gt;&lt;code&gt;imports&lt;/code&gt; array. This lets Angular know that this module, &lt;code&gt;AppRoutingModule&lt;/code&gt;, is a routing module and &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; specifies that this is the root routing module. It configures all the routes you pass to it, gives you access to the router directives, and registers the &lt;code&gt;RouterService&lt;/code&gt;. Use &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; in the &lt;code&gt;AppRoutingModule&lt;/code&gt;&amp;mdash;that is, one time in the app at the root level.</source>
          <target state="translated">CLI가 &lt;code&gt;RouterModule.forRoot(routes)&lt;/code&gt; 를 &lt;code&gt;app-routing.module.ts&lt;/code&gt; &lt;code&gt;imports&lt;/code&gt; 배열에 추가 한 것을 알 수 있습니다 . 이를 통해 Angular는이 모듈 인 &lt;code&gt;AppRoutingModule&lt;/code&gt; 이 라우팅 모듈이며 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; 는 이것이 루트 라우팅 모듈임을 지정합니다. 전달하는 모든 경로를 구성하고, 라우터 지시문에 대한 액세스 권한을 부여하고, &lt;code&gt;RouterService&lt;/code&gt; 를 등록합니다 . 사용 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; 에서 &lt;code&gt;AppRoutingModule&lt;/code&gt; - 즉, 루트 수준에서 응용 프로그램에서 한 번.</target>
        </trans-unit>
        <trans-unit id="f6079d8483be401ad138352575926ddc58bf1975" translate="yes" xml:space="preserve">
          <source>You might start by creating a mock of the &lt;code&gt;UserService&lt;/code&gt; that meets the minimum needs of this component.</source>
          <target state="translated">이 구성 요소의 최소 요구 사항을 충족시키는 &lt;code&gt;UserService&lt;/code&gt; 모형을 작성하여 시작할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ed7751305dc22d34370d9f6e664d2bcc27da3b7d" translate="yes" xml:space="preserve">
          <source>You might think to use the RxJS &lt;code&gt;map&lt;/code&gt; operator. But the &lt;code&gt;HeroService&lt;/code&gt; returns an &lt;code&gt;Observable&amp;lt;Hero&amp;gt;&lt;/code&gt;. So you flatten the &lt;code&gt;Observable&lt;/code&gt; with the &lt;code&gt;switchMap&lt;/code&gt; operator instead.</source>
          <target state="translated">RxJS &lt;code&gt;map&lt;/code&gt; 연산자 를 사용하는 것이 좋습니다 . 그러나 &lt;code&gt;HeroService&lt;/code&gt; 는 &lt;code&gt;Observable&amp;lt;Hero&amp;gt;&lt;/code&gt; 반환합니다 . 당신은 평평 그래서 &lt;code&gt;Observable&lt;/code&gt; 와 &lt;code&gt;switchMap&lt;/code&gt; 의 대신 연산자.</target>
        </trans-unit>
        <trans-unit id="e30be15038151fc2f2c080f3de3d083f36bbc26c" translate="yes" xml:space="preserve">
          <source>You might use &lt;code&gt;wrapInArray()&lt;/code&gt; like this:</source>
          <target state="translated">다음 과 같이 &lt;code&gt;wrapInArray()&lt;/code&gt; 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="9d165fe6c9b4efe41c85018555af6c13d0e46474" translate="yes" xml:space="preserve">
          <source>You might want to save pending changes before leaving a component.</source>
          <target state="translated">구성 요소를 떠나기 전에 보류중인 변경 사항을 저장하려고 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3edc155944950f9bf9f543751979fba952a1076a" translate="yes" xml:space="preserve">
          <source>You might want to show a set of properties from the same object. If you are waiting for asynchronous data, the object can be undefined. In this case, you can use &lt;code&gt;&lt;a href=&quot;ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; and store the result of the condition in a local variable as shown in the the following example.</source>
          <target state="translated">동일한 객체에서 일련의 속성을 표시 할 수 있습니다. 비동기 데이터를 기다리는 경우 오브젝트를 정의 할 수 없습니다. 이 경우 다음 예제와 같이 &lt;code&gt;&lt;a href=&quot;ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; 를 사용 하고 조건 결과를 로컬 변수에 저장할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="bb8520969cd82002b38b01af6dc58abd6a1f849a" translate="yes" xml:space="preserve">
          <source>You might write something like:</source>
          <target state="translated">다음과 같이 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b24fac47bf2497729e1f4eed80aa6922ad6ee232" translate="yes" xml:space="preserve">
          <source>You must &lt;strong&gt;add a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base&quot;&gt;&amp;lt;base href&amp;gt; element&lt;/a&gt;&lt;/strong&gt; to the app's &lt;code&gt;index.html&lt;/code&gt; for &lt;code&gt;pushState&lt;/code&gt; routing to work. The browser uses the &lt;code&gt;&amp;lt;base href&amp;gt;&lt;/code&gt; value to prefix &lt;em&gt;relative&lt;/em&gt; URLs when referencing CSS files, scripts, and images.</source>
          <target state="translated">&lt;code&gt;pushState&lt;/code&gt; 라우팅이 작동 하려면 앱의 &lt;code&gt;index.html&lt;/code&gt; 에 &lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base&quot;&gt;&amp;lt;base href&amp;gt; 요소&lt;/a&gt;&lt;/strong&gt; 를 &lt;strong&gt;추가&lt;/strong&gt; 해야합니다 . 브라우저는 CSS 파일, 스크립트 및 이미지를 참조 할 때 &lt;code&gt;&amp;lt;base href&amp;gt;&lt;/code&gt; 값을 사용하여 &lt;em&gt;상대&lt;/em&gt; URL 을 접두어로 사용합니다 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="b4cba1c33d2662527ae578de85414e826cb87e7f" translate="yes" xml:space="preserve">
          <source>You must add special code snippet markup to sample source code files before they can be displayed by &lt;code&gt;&amp;lt;code-example&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;code-tabs&amp;gt;&lt;/code&gt; components.</source>
          <target state="translated">&lt;code&gt;&amp;lt;code-example&amp;gt;&lt;/code&gt; 및 &lt;code&gt;&amp;lt;code-tabs&amp;gt;&lt;/code&gt; 구성 요소 로 표시하려면 샘플 소스 코드 파일에 특수 코드 스 니펫 마크 업을 추가해야합니다 .</target>
        </trans-unit>
        <trans-unit id="573c2ae6a46af8fb0f3ca7357ae4610bf6950de8" translate="yes" xml:space="preserve">
          <source>You must also remove the bootstrap of the AngularJS module from &lt;code&gt;ngDoBootstrap()&lt;/code&gt; in &lt;code&gt;app.module.ts&lt;/code&gt; and the &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; import.</source>
          <target state="translated">당신은 또한에서 AngularJS와 모듈의 부트 스트랩 제거해야 &lt;code&gt;ngDoBootstrap()&lt;/code&gt; 에서 &lt;code&gt;app.module.ts&lt;/code&gt; 과 &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; 의 가져 오기를.</target>
        </trans-unit>
        <trans-unit id="4e9a129261a56cb9bd624f844138c3c78ba5c82c" translate="yes" xml:space="preserve">
          <source>You must call &lt;code&gt;compileComponents()&lt;/code&gt; within an asynchronous test function.</source>
          <target state="translated">비동기 테스트 함수 내에서 &lt;code&gt;compileComponents()&lt;/code&gt; 를 호출해야합니다 .</target>
        </trans-unit>
        <trans-unit id="d8bc84f9b4dc3475382e6a14514d7ab28ab58e2d" translate="yes" xml:space="preserve">
          <source>You must call &lt;em&gt;subscribe()&lt;/em&gt; or nothing happens. Just calling &lt;code&gt;HeroesService.deleteHero()&lt;/code&gt;&lt;strong&gt;does not initiate the DELETE request.&lt;/strong&gt;</source>
          <target state="translated">&lt;em&gt;subscribe ()를&lt;/em&gt; 호출해야 합니다. 그렇지 않으면 아무 일도 일어나지 않습니다. &lt;code&gt;HeroesService.deleteHero()&lt;/code&gt; 호출 해도 &lt;strong&gt;DELETE 요청이 시작되지 않습니다.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c04670e58aee8adbf3a2823e3c78a467f07c4788" translate="yes" xml:space="preserve">
          <source>You must choose a strategy and you need to make the right call early in the project. It won't be easy to change later once the application is in production and there are lots of application URL references in the wild.</source>
          <target state="translated">전략을 선택해야하며 프로젝트 초기에 올바른 통화를해야합니다. 응용 프로그램이 프로덕션 환경에 있고 나중에 응용 프로그램 URL 참조가 많으면 나중에 변경하기가 쉽지 않습니다.</target>
        </trans-unit>
        <trans-unit id="81950e940684ea38c4606163c02f3c360250a337" translate="yes" xml:space="preserve">
          <source>You must configure an injector with a provider, or it won't know how to create the dependency. The most obvious way for an injector to create an instance of a service class is with the class itself. If you specify the service class itself as the provider token, the default behavior is for the injector to instantiate that class with &lt;code&gt;new&lt;/code&gt;.</source>
          <target state="translated">제공자로 인젝터를 구성해야합니다. 그렇지 않으면 종속성을 작성하는 방법을 모릅니다. 인젝터가 서비스 클래스의 인스턴스를 작성하는 가장 확실한 방법은 클래스 자체를 사용하는 것입니다. 서비스 클래스 자체를 제공자 토큰으로 지정하면 기본 작동은 인젝터가 해당 클래스를 &lt;code&gt;new&lt;/code&gt; 로 인스턴스화하는 것 입니다.</target>
        </trans-unit>
        <trans-unit id="d26b62344c9b96fed54860eb5e2189570bf5063f" translate="yes" xml:space="preserve">
          <source>You must declare every component in exactly one &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; class. If you use a component without declaring it, Angular returns an error message.</source>
          <target state="translated">정확히 하나의 &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 클래스 에 모든 컴포넌트를 선언해야합니다 . 구성 요소를 선언하지 않고 사용하면 Angular는 오류 메시지를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="1579948f48ca762b524a31d185209b2bf750cef0" translate="yes" xml:space="preserve">
          <source>You must include your pipe in the &lt;code&gt;declarations&lt;/code&gt; array of the &lt;code&gt;AppModule&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;AppModule&lt;/code&gt; 의 &lt;code&gt;declarations&lt;/code&gt; 배열에 파이프를 포함해야합니다.</target>
        </trans-unit>
        <trans-unit id="4d7f2060f27da6323e7dd129a35c9663756cd137" translate="yes" xml:space="preserve">
          <source>You must install a suitable interceptor, such as one provided by &lt;code&gt;&lt;a href=&quot;httpclientjsonpmodule&quot;&gt;HttpClientJsonpModule&lt;/a&gt;&lt;/code&gt;. If no such interceptor is reached, then the &lt;code&gt;JSONP&lt;/code&gt; request can be rejected by the configured backend.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;httpclientjsonpmodule&quot;&gt;HttpClientJsonpModule&lt;/a&gt;&lt;/code&gt; 에서 제공하는 것과 같은 적절한 인터셉터를 설치해야합니다 . 이러한 인터셉터에 도달하지 않으면 구성된 백엔드 에서 &lt;code&gt;JSONP&lt;/code&gt; 요청을 거부 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9dd56d88b83342e1fe90bfc898c247f87a55121c" translate="yes" xml:space="preserve">
          <source>You must make the &lt;code&gt;HeroService&lt;/code&gt; available to the dependency injection system before Angular can &lt;em&gt;inject&lt;/em&gt; it into the &lt;code&gt;HeroesComponent&lt;/code&gt; by registering a &lt;em&gt;provider&lt;/em&gt;. A provider is something that can create or deliver a service; in this case, it instantiates the &lt;code&gt;HeroService&lt;/code&gt; class to provide the service.</source>
          <target state="translated">Angular 가 &lt;em&gt;공급자&lt;/em&gt; 를 등록 하여 &lt;code&gt;HeroesComponent&lt;/code&gt; 에 &lt;em&gt;주입&lt;/em&gt; 할 수 있으려면 먼저 종속 주입 시스템 에서 &lt;code&gt;HeroService&lt;/code&gt; 를 사용 가능 하게해야합니다 . 공급자는 서비스를 만들거나 제공 할 수있는 것입니다. 이 경우 서비스를 제공하기 위해 &lt;code&gt;HeroService&lt;/code&gt; 클래스를 인스턴스화합니다 .&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="845c86944126fad934355a803514097fba2b7f9d" translate="yes" xml:space="preserve">
          <source>You must register at least one &lt;em&gt;provider&lt;/em&gt; of any service you are going to use. The provider can be part of the service's own metadata, making that service available everywhere, or you can register providers with specific modules or components. You register providers in the metadata of the service (in the &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; decorator), or in the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;()&lt;/code&gt; or &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; metadata</source>
          <target state="translated">사용할 서비스 &lt;em&gt;제공자&lt;/em&gt; 를 하나 이상 등록해야합니다 . 공급자는 서비스 자체 메타 데이터의 일부가되어 해당 서비스를 모든 곳에서 사용할 수있게하거나 특정 모듈이나 구성 요소로 공급자를 등록 할 수 있습니다. 서비스의 메타 데이터 ( &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; 데코레이터) 또는 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;()&lt;/code&gt; 또는 &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; 메타 데이터에 공급자를 등록 합니다.</target>
        </trans-unit>
        <trans-unit id="37e3031ca14ef3801be26c764c65d17ec6e188f5" translate="yes" xml:space="preserve">
          <source>You must register custom pipes. If you don't, Angular reports an error. The &lt;a href=&quot;cli&quot;&gt;Angular CLI's&lt;/a&gt; generator registers the pipe automatically.</source>
          <target state="translated">사용자 지정 파이프를 등록해야합니다. 그렇지 않으면 Angular는 오류를보고합니다. &lt;a href=&quot;cli&quot;&gt;각도 CLI의&lt;/a&gt; 발전기가 자동으로 파이프를 등록합니다.</target>
        </trans-unit>
        <trans-unit id="d4c6aa6d6d1a638e163055c56532e8527f05006e" translate="yes" xml:space="preserve">
          <source>You must tell the &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; to perform data binding by calling &lt;code&gt;fixture.detectChanges()&lt;/code&gt;. Only then does the &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; have the expected title.</source>
          <target state="translated">&lt;code&gt;fixture.detectChanges()&lt;/code&gt; 를 호출하여 데이터 바인딩을 수행하도록 &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; 에 지시 해야합니다 . 그런 다음에 만 &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; 에 예상 제목이 있습니다.</target>
        </trans-unit>
        <trans-unit id="96214b102c11a6a384a38e5c9b0426413f663320" translate="yes" xml:space="preserve">
          <source>You must unwrap that result to get the paragraph element.</source>
          <target state="translated">단락 요소를 얻으려면 해당 결과의 랩을 해제해야합니다.</target>
        </trans-unit>
        <trans-unit id="2acf3ef695397eeca16b0f90bb627abbf354b430" translate="yes" xml:space="preserve">
          <source>You need a &lt;code&gt;LoginComponent&lt;/code&gt; for the user to log in to the app. After logging in, you'll redirect to the stored URL if available, or use the default URL. There is nothing new about this component or the way you wire it into the router configuration.</source>
          <target state="translated">사용자가 앱에 로그인하려면 &lt;code&gt;LoginComponent&lt;/code&gt; 가 필요합니다 . 로그인 한 후 사용 가능한 경우 저장된 URL로 리디렉션하거나 기본 URL을 사용합니다. 이 구성 요소 또는 라우터 구성에 연결하는 방법에 대한 새로운 내용은 없습니다.</target>
        </trans-unit>
        <trans-unit id="ce1cc8a9525aacbf2afdf53cf659deb548ae370e" translate="yes" xml:space="preserve">
          <source>You need a &lt;em&gt;resolver&lt;/em&gt;.</source>
          <target state="translated">당신은 &lt;em&gt;리졸버&lt;/em&gt; 가 필요합니다 .</target>
        </trans-unit>
        <trans-unit id="8c441b7e02e7ba7a072991eab3f266ed2bc236c0" translate="yes" xml:space="preserve">
          <source>You need a template reference variable to access the input box's Angular control from within the template. Here you created a variable called &lt;code&gt;name&lt;/code&gt; and gave it the value &quot;ngModel&quot;.</source>
          <target state="translated">템플릿 내에서 입력 상자의 각도 컨트롤에 액세스하려면 템플릿 참조 변수가 필요합니다. 여기에서 &lt;code&gt;name&lt;/code&gt; 이라는 변수를 만들고 &quot;ngModel&quot;값을 지정했습니다.</target>
        </trans-unit>
        <trans-unit id="eee8f9b7bdb07990e6b416f967ea07707b2c08a0" translate="yes" xml:space="preserve">
          <source>You need one more addition to display the data. Declare a template variable for the form. Update the &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; tag with &lt;code&gt;#heroForm=&quot;&lt;a href=&quot;../api/forms/ngform&quot;&gt;ngForm&lt;/a&gt;&quot;&lt;/code&gt; as follows:</source>
          <target state="translated">데이터를 표시하려면 하나 더 추가해야합니다. 양식의 템플릿 변수를 선언하십시오. 다음과 같이 &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; &lt;code&gt;#heroForm=&quot;&lt;a href=&quot;../api/forms/ngform&quot;&gt;ngForm&lt;/a&gt;&quot;&lt;/code&gt; 으로 &amp;lt;form&amp;gt; 태그를 업데이트하십시오 .</target>
        </trans-unit>
        <trans-unit id="1111de02e835e7dc2497c3e7c420093367e46cb8" translate="yes" xml:space="preserve">
          <source>You need the &lt;code&gt;&lt;a href=&quot;../api/router/candeactivate&quot;&gt;CanDeactivate&lt;/a&gt;&lt;/code&gt; guard.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/candeactivate&quot;&gt;CanDeactivate&lt;/a&gt;&lt;/code&gt; 가드 가 필요합니다 .</target>
        </trans-unit>
        <trans-unit id="f2729926d13e03c2c9679d7ee0bcc1e6eb8a0d29" translate="yes" xml:space="preserve">
          <source>You need the router helper function, &lt;code&gt;&lt;a href=&quot;../api/router/converttoparammap&quot;&gt;convertToParamMap&lt;/a&gt;()&lt;/code&gt;, to create a &lt;code&gt;&lt;a href=&quot;../api/router/parammap&quot;&gt;ParamMap&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/parammap&quot;&gt;ParamMap&lt;/a&gt;&lt;/code&gt; 을 만들려면 라우터 도우미 함수 인 &lt;code&gt;&lt;a href=&quot;../api/router/converttoparammap&quot;&gt;convertToParamMap&lt;/a&gt;()&lt;/code&gt; 이 필요합니다 .</target>
        </trans-unit>
        <trans-unit id="2bf27fb928ad76ea1b0ea5c303aab922105acf81" translate="yes" xml:space="preserve">
          <source>You need to &lt;a href=&quot;https://github.com/join&quot;&gt;create a GitHub account&lt;/a&gt; if you don't have one, and then &lt;a href=&quot;https://help.github.com/articles/create-a-repo/&quot;&gt;create a repository&lt;/a&gt; for your project. Make a note of the user name and project name in GitHub.</source>
          <target state="translated">당신은 할 필요가 &lt;a href=&quot;https://github.com/join&quot;&gt;GitHub의 계정을 만들&lt;/a&gt; 당신이 하나를 가지고, 다음하지 않는 경우 &lt;a href=&quot;https://help.github.com/articles/create-a-repo/&quot;&gt;저장소 생성&lt;/a&gt; 프로젝트에 있습니다. GitHub에서 사용자 이름과 프로젝트 이름을 기록하십시오.</target>
        </trans-unit>
        <trans-unit id="99a3c77e24af21acfd7389ae3cc458f30f6e0071" translate="yes" xml:space="preserve">
          <source>You need to build and deploy a separate version of the app for each supported language.</source>
          <target state="translated">지원되는 각 언어에 대해 별도의 버전의 앱을 빌드하고 배포해야합니다.</target>
        </trans-unit>
        <trans-unit id="6391c1628bde436b54ea7bae9be036a5f9116b93" translate="yes" xml:space="preserve">
          <source>You need to load all the AngularJS files you already use in &lt;code&gt;index.html&lt;/code&gt; in &lt;code&gt;aot/index.html&lt;/code&gt; as well:</source>
          <target state="translated">&lt;code&gt;index.html&lt;/code&gt; 에서 이미 사용중인 모든 AngularJS 파일을 &lt;code&gt;aot/index.html&lt;/code&gt; 에서도 로드해야합니다 .</target>
        </trans-unit>
        <trans-unit id="6eb4d35c981bb0706aef5034d0f1817be029ccf5" translate="yes" xml:space="preserve">
          <source>You no longer have to hardcode the links to phone details in the phone list. You can generate data bindings for each phone's &lt;code&gt;id&lt;/code&gt; to the &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;&lt;/code&gt; directive and let that directive construct the appropriate URL to the &lt;code&gt;PhoneDetailComponent&lt;/code&gt;:</source>
          <target state="translated">더 이상 전화 목록의 전화 세부 정보에 대한 링크를 하드 코딩 할 필요가 없습니다. 각 전화의 &lt;code&gt;id&lt;/code&gt; 에 대해 &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;&lt;/code&gt; 지시문에 대한 데이터 바인딩을 생성 하고 해당 지시문이 &lt;code&gt;PhoneDetailComponent&lt;/code&gt; 에 대한 적절한 URL을 구성하도록 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="0577eb67ae8c2868ed81d0fae14c8e96b0f18c06" translate="yes" xml:space="preserve">
          <source>You no longer need the stub components.</source>
          <target state="translated">더 이상 스텁 구성 요소가 필요하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="37d9f2ce65cb78b1a64b9dfd99566ec3cfcc764f" translate="yes" xml:space="preserve">
          <source>You now have a basic routable animation that animates routing from one view to another.</source>
          <target state="translated">이제 한 뷰에서 다른 뷰로 라우팅을 애니메이션하는 기본 라우팅 가능 애니메이션이 있습니다.</target>
        </trans-unit>
        <trans-unit id="80ee557433481e075d16f7b5330d11ab8f24bc4c" translate="yes" xml:space="preserve">
          <source>You often have a choice between interpolation and property binding. The following binding pairs do the same thing:</source>
          <target state="translated">보간과 속성 바인딩 중에서 선택할 수 있습니다. 다음 바인딩 쌍은 동일한 작업을 수행합니다.</target>
        </trans-unit>
        <trans-unit id="63737955c08aa1f6e5a6aab112e2f347877a0c8d" translate="yes" xml:space="preserve">
          <source>You optionally export the directive into a local template variable using &lt;code&gt;&lt;a href=&quot;ngform&quot;&gt;ngForm&lt;/a&gt;&lt;/code&gt; as the key (ex: &lt;code&gt;#myForm=&quot;&lt;a href=&quot;ngform&quot;&gt;ngForm&lt;/a&gt;&quot;&lt;/code&gt;). This is optional, but useful. Many properties from the underlying &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; instance are duplicated on the directive itself, so a reference to it gives you access to the aggregate value and validity status of the form, as well as user interaction properties like &lt;code&gt;dirty&lt;/code&gt; and &lt;code&gt;touched&lt;/code&gt;.</source>
          <target state="translated">선택적으로 &lt;code&gt;&lt;a href=&quot;ngform&quot;&gt;ngForm&lt;/a&gt;&lt;/code&gt; 을 키로 사용하여 지시문을 로컬 템플릿 변수로 내 보냅니다 (예 : &lt;code&gt;#myForm=&quot;&lt;a href=&quot;ngform&quot;&gt;ngForm&lt;/a&gt;&quot;&lt;/code&gt; ). 이것은 선택 사항이지만 유용합니다. 기본 &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 인스턴스 의 많은 속성 이 지시문 자체에 복제되므로이를 참조하면 양식의 집계 값 및 유효성 상태뿐만 아니라 &lt;code&gt;dirty&lt;/code&gt; 및 &lt;code&gt;touched&lt;/code&gt; 와 같은 사용자 상호 작용 속성에 액세스 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="4ef46e0d28f508e66000ef7877b2eea3588d48a3" translate="yes" xml:space="preserve">
          <source>You protected the admin feature module from unauthorized access. You should also protect child routes &lt;em&gt;within&lt;/em&gt; the feature module.</source>
          <target state="translated">관리자 기능 모듈을 무단 액세스로부터 보호했습니다. 또한 기능 모듈 &lt;em&gt;내&lt;/em&gt; 에서 하위 경로를 보호해야 합니다.</target>
        </trans-unit>
        <trans-unit id="b42b502db7e46f18b540ad2d521f3120848d24d2" translate="yes" xml:space="preserve">
          <source>You put a lot of effort into configuring the router in several routing module files and were careful to list them &lt;a href=&quot;router#routing-module-order&quot;&gt;in the proper order&lt;/a&gt;. Are routes actually evaluated as you planned? How is the router really configured?</source>
          <target state="translated">라우터를 여러 라우팅 모듈 파일로 구성하는 데 많은 노력을 기울였으며 &lt;a href=&quot;router#routing-module-order&quot;&gt;올바른 순서&lt;/a&gt; 로 나열하도록주의를 기울 였습니다. 계획대로 경로가 실제로 평가됩니까? 라우터는 실제로 어떻게 구성되어 있습니까?</target>
        </trans-unit>
        <trans-unit id="aafa231c202eefbceac744d6d60875f3ce51ed2d" translate="yes" xml:space="preserve">
          <source>You refactored &lt;code&gt;HeroService&lt;/code&gt; to load heroes from a web API.</source>
          <target state="translated">웹 API에서 영웅을로드하기 위해 &lt;code&gt;HeroService&lt;/code&gt; 를 리팩토링 했습니다 .</target>
        </trans-unit>
        <trans-unit id="d54570870a8c6dc3341468b3713c0e780b76a88c" translate="yes" xml:space="preserve">
          <source>You refactored a tightly-coupled master/detail view into a routed detail view.</source>
          <target state="translated">밀접하게 연결된 마스터 / 디테일 뷰를 라우팅 된 상세 뷰로 리팩토링했습니다.</target>
        </trans-unit>
        <trans-unit id="7670300b961a4cc60ff0144378416d5371b76fef" translate="yes" xml:space="preserve">
          <source>You refactored data access to the &lt;code&gt;HeroService&lt;/code&gt; class.</source>
          <target state="translated">&lt;code&gt;HeroService&lt;/code&gt; 클래스에 대한 데이터 액세스를 리팩터링했습니다 .</target>
        </trans-unit>
        <trans-unit id="5a46650531665bdfb2f295a8f537ed035a6a62a4" translate="yes" xml:space="preserve">
          <source>You registered the &lt;code&gt;HeroService&lt;/code&gt; as the &lt;em&gt;provider&lt;/em&gt; of its service at the root level so that it can be injected anywhere in the app.</source>
          <target state="translated">앱의 어느 곳에 나 주입 할 수 있도록 &lt;code&gt;HeroService&lt;/code&gt; 를 루트 수준에서 서비스 제공 &lt;em&gt;업체&lt;/em&gt; 로 등록했습니다 .</target>
        </trans-unit>
        <trans-unit id="cb579f3447e87c231dd3c83de77d02b5167fdf37" translate="yes" xml:space="preserve">
          <source>You replaced the &lt;code&gt;filter&lt;/code&gt; and &lt;code&gt;orderBy&lt;/code&gt; filters with bindings to the &lt;code&gt;getPhones()&lt;/code&gt; controller method, which implements the filtering and ordering logic inside the component itself.</source>
          <target state="translated">&lt;code&gt;filter&lt;/code&gt; 및 &lt;code&gt;orderBy&lt;/code&gt; 필터를 &lt;code&gt;getPhones()&lt;/code&gt; 컨트롤러 메소드 에 대한 바인딩으로 대체했습니다.이 메소드는 컴포넌트 자체 내부의 필터링 및 순서 로직을 구현합니다.</target>
        </trans-unit>
        <trans-unit id="1b0f155a70a067b1b321b870b5a5787911d96127" translate="yes" xml:space="preserve">
          <source>You reset to a specific form state by passing in a map of states that matches the structure of your form, with control names as keys. The state is a standalone value or a form state object with both a value and a disabled status.</source>
          <target state="translated">제어 이름을 키로 사용하여 양식의 구조와 일치하는 상태 맵을 전달하여 특정 양식 상태로 재설정합니다. 상태는 독립형 값이거나 값과 비활성화 된 상태가 모두있는 양식 상태 개체입니다.</target>
        </trans-unit>
        <trans-unit id="43695722bd4b3b9eabbb7cb493216e0ceda6d23c" translate="yes" xml:space="preserve">
          <source>You reset to a specific form state by passing in an array of states that matches the structure of the control. The state is a standalone value or a form state object with both a value and a disabled status.</source>
          <target state="translated">컨트롤의 구조와 일치하는 상태 배열을 전달하여 특정 양식 상태로 다시 설정합니다. 상태는 독립형 값이거나 값과 비활성화 된 상태가 모두있는 양식 상태 개체입니다.</target>
        </trans-unit>
        <trans-unit id="7d4eb20283669e1aa1dd4562e941fd251f0457d5" translate="yes" xml:space="preserve">
          <source>You reset to a specific form state by passing through a standalone value or a form state object that contains both a value and a disabled state (these are the only two properties that cannot be calculated).</source>
          <target state="translated">독립형 값 또는 값과 비활성화 된 상태를 모두 포함하는 양식 상태 개체를 통해 특정 양식 상태로 재설정합니다 (이 둘은 계산할 수없는 두 가지 속성 임).</target>
        </trans-unit>
        <trans-unit id="89f81181dabdebed7b3eb4c7806377c8fb6af04e" translate="yes" xml:space="preserve">
          <source>You routinely initialize attributes this way in standard HTML, and it works just as well for directive and component property initialization. The following example initializes the &lt;code&gt;prefix&lt;/code&gt; property of the &lt;code&gt;StringInitComponent&lt;/code&gt; to a fixed string, not a template expression. Angular sets it and forgets about it.</source>
          <target state="translated">표준 HTML에서 이러한 방식으로 속성을 일상적으로 초기화하면 지시문 및 구성 요소 속성 초기화에도 적용됩니다. 다음 예제 에서는 &lt;code&gt;StringInitComponent&lt;/code&gt; 의 &lt;code&gt;prefix&lt;/code&gt; 속성을 템플릿식이 아닌 고정 문자열로 초기화합니다 . Angular가 설정하고 잊어 버립니다.</target>
        </trans-unit>
        <trans-unit id="89cbbabb09609b81ccef3f7d33da3d6c1c0834c0" translate="yes" xml:space="preserve">
          <source>You see at a glance if a part of your application lacks tests.</source>
          <target state="translated">응용 프로그램의 일부에 테스트가없는 경우 한 눈에 볼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d4a27c2aa11f28149e13c9aa67e3b813226566cd" translate="yes" xml:space="preserve">
          <source>You shared the &lt;code&gt;HeroService&lt;/code&gt; among multiple components.</source>
          <target state="translated">여러 구성 요소간에 &lt;code&gt;HeroService&lt;/code&gt; 를 공유했습니다 .</target>
        </trans-unit>
        <trans-unit id="5d0cc10785a35283f87d2bc35fd90f89f4ee0927" translate="yes" xml:space="preserve">
          <source>You should also configure the TypeScript compiler with a &lt;code&gt;tsconfig.json&lt;/code&gt; in the project directory as described in the &lt;a href=&quot;typescript-configuration&quot;&gt;TypeScript Configuration&lt;/a&gt; guide. The &lt;code&gt;tsconfig.json&lt;/code&gt; file tells the TypeScript compiler how to turn your TypeScript files into ES5 code bundled into CommonJS modules.</source>
          <target state="translated">&lt;a href=&quot;typescript-configuration&quot;&gt;TypeScript 구성&lt;/a&gt; 안내서에 설명 된대로 프로젝트 디렉토리에서 &lt;code&gt;tsconfig.json&lt;/code&gt; 을 사용하여 TypeScript 컴파일러를 구성해야합니다 . &lt;code&gt;tsconfig.json&lt;/code&gt; 의 파일 CommonJS 모듈에 번들 ES5 코드로 타이프 스크립트 파일을 설정하는 방법을 타이프 스크립트 컴파일러를 알려줍니다.</target>
        </trans-unit>
        <trans-unit id="d6adb95b05244100e5decf300ed44bc7c02f4a2a" translate="yes" xml:space="preserve">
          <source>You should also direct the output to a locale-specific folder to keep it separate from other locale versions of your app, by setting the &lt;code&gt;outputPath&lt;/code&gt; configuration option.</source>
          <target state="translated">또한 &lt;code&gt;outputPath&lt;/code&gt; 구성 옵션 을 설정하여 출력을 로케일 별 폴더로 보내서 다른 로케일 버전의 앱과 별도로 유지해야합니다 .</target>
        </trans-unit>
        <trans-unit id="30c45d622e1fcd7c538fa7e9a47bdf8d20d96f65" translate="yes" xml:space="preserve">
          <source>You should always provide your service in the root injector unless there is a case where you want the service to be available only if the consumer imports a particular &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">소비자가 특정 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 가져 오는 경우에만 서비스를 사용할 수있는 경우가 아니라면 항상 루트 인젝터에 서비스를 제공해야합니다 .</target>
        </trans-unit>
        <trans-unit id="51095b779e50e2e09c61d3469398469cd624e188" translate="yes" xml:space="preserve">
          <source>You should be careful. Readers don't always read carefully and are likely to copy and paste your example of bad code in their own applications. So don't display bad code often.</source>
          <target state="translated">너 조심하는 게 좋아. 독자는 항상주의 깊게 읽지는 않으며 자신의 응용 프로그램에 잘못된 코드 예제를 복사하여 붙여 넣을 가능성이 높습니다. 따라서 잘못된 코드를 자주 표시하지 마십시오.</target>
        </trans-unit>
        <trans-unit id="52df89a1b446176f5c69199563685a0d0108662d" translate="yes" xml:space="preserve">
          <source>You should nest the &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tag within a &lt;code&gt;&amp;lt;figure&amp;gt;&lt;/code&gt; tag, which styles the image within a drop-shadow frame. You'll need the editor's permission to skip the &lt;code&gt;&amp;lt;figure&amp;gt;&lt;/code&gt; tag.</source>
          <target state="translated">&lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; 태그를 &lt;code&gt;&amp;lt;figure&amp;gt;&lt;/code&gt; &amp;gt; 태그 내에 중첩해야 이미지의 그림자 스타일을 지정할 수 있습니다. &lt;code&gt;&amp;lt;figure&amp;gt;&lt;/code&gt; 태그 를 건너 뛰려면 편집자 권한이 필요합니다 .</target>
        </trans-unit>
        <trans-unit id="8e7cd2888ca9d22c97d53d8cde19593150cc97dc" translate="yes" xml:space="preserve">
          <source>You should not create your own TOC by hand. The TOC is generated automatically from the page's main and secondary section headers.</source>
          <target state="translated">직접 손으로 TOC를 만들면 안됩니다. TOC는 페이지의 기본 및 보조 섹션 헤더에서 자동으로 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="ea389cc13a880a9e343a84dc949bf08c3f9ea723" translate="yes" xml:space="preserve">
          <source>You should now also remove the phone detail component &amp;lt;script&amp;gt; tag from &lt;code&gt;index.html&lt;/code&gt;.</source>
          <target state="translated">또한 &lt;code&gt;index.html&lt;/code&gt; 에서 전화 세부 사항 구성 요소 &amp;lt;script&amp;gt; 태그를 제거해야합니다 .</target>
        </trans-unit>
        <trans-unit id="32863aed9a56962331d8fc5bbf8e0f52fb368acb" translate="yes" xml:space="preserve">
          <source>You should see the app running in your browser.</source>
          <target state="translated">브라우저에서 앱이 실행되고 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="520d199e1bd4d7c3ce68cfbf6ab8d880ed0c4735" translate="yes" xml:space="preserve">
          <source>You should see the default paragraph from &lt;code&gt;MessagesComponent&lt;/code&gt; at the bottom of the page.</source>
          <target state="translated">페이지 하단의 &lt;code&gt;MessagesComponent&lt;/code&gt; 에서 기본 단락을 볼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="19f838d7d6530d2cc50bfdbfc476adb799b5dc04" translate="yes" xml:space="preserve">
          <source>You should see the following transitions and class names:</source>
          <target state="translated">다음과 같은 전환 및 클래스 이름이 표시되어야합니다.</target>
        </trans-unit>
        <trans-unit id="018542cb9d4df1d969461c5aac5be07c3aa14152" translate="yes" xml:space="preserve">
          <source>You should source code snippets &lt;a href=&quot;docs-style-guide#from-code-samples&quot;&gt;from working sample code&lt;/a&gt; when possible. But there are times when an inline snippet is the better choice.</source>
          <target state="translated">가능하면 &lt;a href=&quot;docs-style-guide#from-code-samples&quot;&gt;작업 샘플 코드에서&lt;/a&gt; 코드 스 니펫 을 소스해야 합니다. 그러나 인라인 스 니펫이 더 나은 선택 인 경우가 있습니다.</target>
        </trans-unit>
        <trans-unit id="d7d206d1894640be7995f88772bdbf5feb524683" translate="yes" xml:space="preserve">
          <source>You should still be running with this CLI command.</source>
          <target state="translated">이 CLI 명령으로 계속 실행 중이어야합니다.</target>
        </trans-unit>
        <trans-unit id="84535c33e9a0911dd152cd3532876b1d94f2037a" translate="yes" xml:space="preserve">
          <source>You should test the app's defenses against HTTP requests that fail.</source>
          <target state="translated">실패한 HTTP 요청에 대해 앱 방어를 테스트해야합니다.</target>
        </trans-unit>
        <trans-unit id="a861d5fab6b421578e8b7a20fa85fab7963408f9" translate="yes" xml:space="preserve">
          <source>You simplified the &lt;code&gt;HeroesComponent&lt;/code&gt; by reducing its responsibilities.</source>
          <target state="translated">책임을 줄임으로써 &lt;code&gt;HeroesComponent&lt;/code&gt; 를 단순화했습니다 .</target>
        </trans-unit>
        <trans-unit id="8992ea96709e262a06622c0bdf58df11fb9c86cb" translate="yes" xml:space="preserve">
          <source>You specify the warning level in the &lt;code&gt;configurations&lt;/code&gt; section of your Angular CLI configuration file, &lt;code&gt;angular.json&lt;/code&gt;. The example below shows how to set the warning level to error.</source>
          <target state="translated">Angular CLI 구성 파일 &lt;code&gt;angular.json&lt;/code&gt; 의 &lt;code&gt;configurations&lt;/code&gt; 섹션 에서 경고 레벨을 지정하십시오 . 아래 예는 경고 수준을 오류로 설정하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="7763a3a5e8459f14f0c072ab85c16b19d8b4ed95" translate="yes" xml:space="preserve">
          <source>You still might delay navigation until the save succeeds. If you let the user move to the next screen immediately and the save were to fail (perhaps the data are ruled invalid), you would lose the context of the error.</source>
          <target state="translated">저장이 성공할 때까지 탐색을 지연시킬 수 있습니다. 사용자가 다음 화면으로 즉시 이동할 수 있고 저장이 실패한 경우 (아마 데이터가 유효하지 않은 것으로 간주 됨) 오류 컨텍스트가 유실됩니다.</target>
        </trans-unit>
        <trans-unit id="0d9b8e5b1134fffdea61dc2f21213f3a57915c0a" translate="yes" xml:space="preserve">
          <source>You still send the &lt;code&gt;httpOptions&lt;/code&gt;.</source>
          <target state="translated">여전히 &lt;code&gt;httpOptions&lt;/code&gt; 를 보냅니다 .</target>
        </trans-unit>
        <trans-unit id="7cceeda124319983d408264321808618cf6e4189" translate="yes" xml:space="preserve">
          <source>You turned the &lt;code&gt;AppComponent&lt;/code&gt; into a navigation shell with &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routerlinkwithhref&quot;&gt;a&lt;/a&gt;&amp;gt;&lt;/code&gt; links and a &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">당신은 설정 &lt;code&gt;AppComponent&lt;/code&gt; 을 가진 네비게이션 쉘에 &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routerlinkwithhref&quot;&gt;a&lt;/a&gt;&amp;gt;&lt;/code&gt; 링크와 &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&amp;gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f0f43e5fd2256a68f384fdb2d77996d6d0bbdd09" translate="yes" xml:space="preserve">
          <source>You update the &lt;code&gt;beforeEach&lt;/code&gt; to find that element with a standard HTML &lt;code&gt;querySelector&lt;/code&gt; and assign it to the &lt;code&gt;h1&lt;/code&gt; variable.</source>
          <target state="translated">&lt;code&gt;beforeEach&lt;/code&gt; 를 업데이트하여 표준 HTML &lt;code&gt;querySelector&lt;/code&gt; 로 해당 요소를 찾아 &lt;code&gt;h1&lt;/code&gt; 변수에 지정합니다 .</target>
        </trans-unit>
        <trans-unit id="9a82e7a305abebc12f90f24bc8f3b5d8875a7f44" translate="yes" xml:space="preserve">
          <source>You updated the components to allow adding, editing, and deleting of heroes.</source>
          <target state="translated">영웅을 추가, 편집 및 삭제할 수 있도록 구성 요소를 업데이트했습니다.</target>
        </trans-unit>
        <trans-unit id="f0ba9b22a9552cb151befab3c50306d01e973ea0" translate="yes" xml:space="preserve">
          <source>You use Angular for a feature that is not critical for the initial rendering of the app and you can afford a small delay in favor of better initial load performance.</source>
          <target state="translated">앱의 초기 렌더링에 중요하지 않은 기능에 Angular를 사용하면 더 나은 초기로드 성능을 위해 약간의 지연을 줄 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="48b70b3001c26daa939ec47f4bdee9711b7ee90d" translate="yes" xml:space="preserve">
          <source>You use Angular for features that are only visible to specific types of users; for example, logged-in users, administrators, or VIP members. You don't need to load Angular until a user is authenticated.</source>
          <target state="translated">특정 유형의 사용자에게만 보이는 기능에는 Angular를 사용합니다. 예를 들어, 로그인 한 사용자, 관리자 또는 VIP 회원. 사용자가 인증 될 때까지 Angular를로드 할 필요는 없습니다.</target>
        </trans-unit>
        <trans-unit id="45bb334756b721ae4a4dbd98cd39a5c479b59c8b" translate="yes" xml:space="preserve">
          <source>You use Angular on specific routes only and you don't need it until/if a user visits such a route.</source>
          <target state="translated">Angular는 특정 경로에서만 사용하며 사용자가 그러한 경로를 방문 할 때까지 / 필요하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="4f50f948b449737f6ddcee4ce26fcf4687f678a2" translate="yes" xml:space="preserve">
          <source>You use standard class injection to acquire a parent component whose type you know.</source>
          <target state="translated">표준 클래스 인젝션을 사용하여 알고있는 유형의 상위 컴포넌트를 얻습니다.</target>
        </trans-unit>
        <trans-unit id="b5f72985b93e4188f0cbcdb92a0d89899e3615af" translate="yes" xml:space="preserve">
          <source>You use the &lt;code&gt;&lt;a href=&quot;../api/core/elementref&quot;&gt;ElementRef&lt;/a&gt;&lt;/code&gt; in the directive's constructor to &lt;a href=&quot;dependency-injection&quot;&gt;inject&lt;/a&gt; a reference to the host DOM element, the element to which you applied &lt;code&gt;appHighlight&lt;/code&gt;.</source>
          <target state="translated">지시문의 생성자에서 &lt;code&gt;&lt;a href=&quot;../api/core/elementref&quot;&gt;ElementRef&lt;/a&gt;&lt;/code&gt; 를 사용하여 &lt;code&gt;appHighlight&lt;/code&gt; 를 적용한 호스트 DOM 요소에 대한 참조를 &lt;a href=&quot;dependency-injection&quot;&gt;삽입&lt;/a&gt; 합니다 .</target>
        </trans-unit>
        <trans-unit id="935ad0c301af5ae716b4c0996bf9d340bc2147f7" translate="yes" xml:space="preserve">
          <source>You use the Angular CLI to create projects, generate application and library code, and perform a variety of ongoing development tasks such as testing, bundling, and deployment.</source>
          <target state="translated">Angular CLI를 사용하여 프로젝트를 작성하고 애플리케이션 및 라이브러리 코드를 생성하며 테스트, 번들링 및 배치와 같은 다양한 진행중인 개발 태스크를 수행합니다.</target>
        </trans-unit>
        <trans-unit id="aea706448e6bb9acffcc1b5aac0ec8c6c1c82fd0" translate="yes" xml:space="preserve">
          <source>You use your custom pipe the same way you use built-in pipes.</source>
          <target state="translated">내장 파이프를 사용하는 것과 같은 방식으로 사용자 지정 파이프를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="38cf14313d23c24ace22b262261968aeac713659" translate="yes" xml:space="preserve">
          <source>You used &lt;a href=&quot;../guide/dependency-injection&quot;&gt;Angular Dependency Injection&lt;/a&gt; to inject it into a component.</source>
          <target state="translated">&lt;a href=&quot;../guide/dependency-injection&quot;&gt;각도 의존성 주입&lt;/a&gt; 을 사용 하여 컴포넌트에 주입했습니다.</target>
        </trans-unit>
        <trans-unit id="39c076e4551812dbf918d3d70a079d39ff96a110" translate="yes" xml:space="preserve">
          <source>You used &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; to display a list.</source>
          <target state="translated">&lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 를 사용 하여 목록을 표시했습니다.</target>
        </trans-unit>
        <trans-unit id="40633f50cc004c91044bf7dfe68cab72722ded0e" translate="yes" xml:space="preserve">
          <source>You used &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; to conditionally include or exclude a block of HTML.</source>
          <target state="translated">HTML 블록을 조건부로 포함하거나 제외하려면 &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; 를 사용했습니다 .</target>
        </trans-unit>
        <trans-unit id="e7d65c16f601b6489a4a50a9a17886e79a0e4d3e" translate="yes" xml:space="preserve">
          <source>You used RxJS &lt;code&gt;of()&lt;/code&gt; to return an observable of mock heroes (&lt;code&gt;Observable&amp;lt;Hero[]&amp;gt;&lt;/code&gt;).</source>
          <target state="translated">RxJS &lt;code&gt;of()&lt;/code&gt; 를 사용 하여 모의 영웅을 관찰 할 수있는 것을 반환했습니다 ( &lt;code&gt;Observable&amp;lt;Hero[]&amp;gt;&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="a5ef9693bbb6008ad25a588183292699167ab0ca" translate="yes" xml:space="preserve">
          <source>You used a &lt;a href=&quot;../guide/template-syntax#property-binding&quot;&gt;property binding&lt;/a&gt; to give the parent &lt;code&gt;HeroesComponent&lt;/code&gt; control over the child &lt;code&gt;HeroDetailComponent&lt;/code&gt;.</source>
          <target state="translated">당신은 사용 &lt;a href=&quot;../guide/template-syntax#property-binding&quot;&gt;바인딩 특성&lt;/a&gt; 부모 제공하는 &lt;code&gt;HeroesComponent&lt;/code&gt; 의 자식 제어 &lt;code&gt;HeroDetailComponent&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="0c18208d09cd5f84fdd7ede871179047144c1c62" translate="yes" xml:space="preserve">
          <source>You used router link parameters to navigate to the detail view of a user-selected hero.</source>
          <target state="translated">라우터 링크 매개 변수를 사용하여 사용자가 선택한 영웅의 상세보기로 이동했습니다.</target>
        </trans-unit>
        <trans-unit id="f0c0de9af915985d3f8e0c843049b5a33d34ab82" translate="yes" xml:space="preserve">
          <source>You used the &lt;a href=&quot;../guide/template-syntax#inputs-outputs&quot;&gt;&lt;code&gt;@Input&lt;/code&gt; decorator&lt;/a&gt; to make the &lt;code&gt;hero&lt;/code&gt; property available for binding by the external &lt;code&gt;HeroesComponent&lt;/code&gt;.</source>
          <target state="translated">당신은 사용 &lt;a href=&quot;../guide/template-syntax#inputs-outputs&quot;&gt; &lt;code&gt;@Input&lt;/code&gt; 의 장식을&lt;/a&gt; 하기 위해 &lt;code&gt;hero&lt;/code&gt; 외부에 의해 바인딩 속성을 사용할 수 &lt;code&gt;HeroesComponent&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f892015ceebcb64bc9519af90cb0e58432b72805" translate="yes" xml:space="preserve">
          <source>You used the &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;&lt;/code&gt; directive in anchor elements.</source>
          <target state="translated">앵커 요소에서 &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;&lt;/code&gt; 지시문을 사용했습니다 .</target>
        </trans-unit>
        <trans-unit id="fc2b91bf1c636ea89f22f00da5e56ec7656943e0" translate="yes" xml:space="preserve">
          <source>You used the CLI to create a second &lt;code&gt;HeroesComponent&lt;/code&gt;.</source>
          <target state="translated">CLI를 사용하여 두 번째 &lt;code&gt;HeroesComponent&lt;/code&gt; 를 작성했습니다 .</target>
        </trans-unit>
        <trans-unit id="96f2b0be883d711ffd9da4d5745adae857f3034f" translate="yes" xml:space="preserve">
          <source>You used the double curly braces of interpolation to display the app title.</source>
          <target state="translated">보간 중괄호를 사용하여 앱 제목을 표시했습니다.</target>
        </trans-unit>
        <trans-unit id="1afd785b64f4cd8f36203c986e2903df5a64c82c" translate="yes" xml:space="preserve">
          <source>You used two-way data binding with the &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; directive.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; 지시문에 양방향 데이터 바인딩을 사용했습니다 .</target>
        </trans-unit>
        <trans-unit id="00f06a62393293247ad78417c507c31a2e0874a0" translate="yes" xml:space="preserve">
          <source>You will add a heroes search feature to the Dashboard. As the user types a name into a search box, you'll make repeated HTTP requests for heroes filtered by that name. Your goal is to issue only as many requests as necessary.</source>
          <target state="translated">영웅 검색 기능을 대시 보드에 추가합니다. 사용자가 검색 창에 이름을 입력하면 해당 이름으로 필터링 된 영웅에 대해 반복적 인 HTTP 요청을합니다. 목표는 필요한만큼만 요청을 발행하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="e76bcd12737a96430ead16ad0401e242ba2e0a40" translate="yes" xml:space="preserve">
          <source>You will add more tests as this component evolves. Rather than duplicate the &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; configuration for each test, you refactor to pull the setup into a Jasmine &lt;code&gt;beforeEach()&lt;/code&gt; and some supporting variables:</source>
          <target state="translated">이 구성 요소가 발전함에 따라 더 많은 테스트를 추가하게됩니다. 각 테스트에 대해 &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; 구성을 복제하지 않고 설정을 Jasmine &lt;code&gt;beforeEach()&lt;/code&gt; 및 일부 지원 변수 로 가져 오기 위해 리팩터링 합니다.</target>
        </trans-unit>
        <trans-unit id="8e8352acb9fadc748d4f1ff09a0ea96135aad49f" translate="yes" xml:space="preserve">
          <source>You will call &lt;code&gt;fixture.detectChanges()&lt;/code&gt; to trigger Angular's change detection. But there is an essential, intermediate step.</source>
          <target state="translated">Angular의 변경 감지를 트리거하기 위해 &lt;code&gt;fixture.detectChanges()&lt;/code&gt; 를 호출 합니다. 그러나 필수적인 중간 단계가 있습니다.</target>
        </trans-unit>
        <trans-unit id="ae8cd5c0fc90d6bb6dc64f8ebc9c8d0d45834463" translate="yes" xml:space="preserve">
          <source>You won't change the &lt;code&gt;HeroesComponent&lt;/code&gt;&lt;em&gt;class&lt;/em&gt; but you will change its &lt;em&gt;template&lt;/em&gt;.</source>
          <target state="translated">당신은 변경되지 않습니다 &lt;code&gt;HeroesComponent&lt;/code&gt; 의&lt;em&gt;클래스를&lt;/em&gt; 하지만 당신은 그 변경됩니다 &lt;em&gt;템플릿&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="aa6fceed8ce215ef34228b7e6b33c0abe56c7e10" translate="yes" xml:space="preserve">
          <source>You would rarely, if ever, implement all of the interfaces like this. The peek-a-boo exists to show how Angular calls the hooks in the expected order.</source>
          <target state="translated">이런 식으로 모든 인터페이스를 구현하는 경우는 거의 없습니다. peek-a-boo는 Angular가 어떻게 후크를 예상 순서대로 호출하는지 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="9bbf74fccab73b0e21280d1410fe663ce65db41b" translate="yes" xml:space="preserve">
          <source>You write metadata in a &lt;em&gt;subset&lt;/em&gt; of TypeScript that must conform to the following general constraints:</source>
          <target state="translated">다음 일반 제약 조건을 준수해야하는 TypeScript &lt;em&gt;하위 집합&lt;/em&gt; 에 메타 데이터를 작성 합니다.</target>
        </trans-unit>
        <trans-unit id="7555df7eda1680e7d295070ecaf56e685aee8779" translate="yes" xml:space="preserve">
          <source>You'd already defined a template reference variable, &lt;code&gt;#heroForm&lt;/code&gt;, and initialized it with the value &quot;ngForm&quot;. Now, use that variable to access the form with the Submit button.</source>
          <target state="translated">템플릿 참조 변수 &lt;code&gt;#heroForm&lt;/code&gt; 을 이미 정의하고 &quot;ngForm&quot;값으로 초기화했습니다. 이제 해당 변수를 사용하여 제출 단추로 양식에 액세스하십시오.</target>
        </trans-unit>
        <trans-unit id="562fd742221c12785061969f6464c3338baebdef" translate="yes" xml:space="preserve">
          <source>You'd also get this error if you imported &lt;code&gt;someTemplate&lt;/code&gt; from some other module and neglected to initialize it there.</source>
          <target state="translated">다른 모듈에서 &lt;code&gt;someTemplate&lt;/code&gt; 을 가져 와서 초기화하지 않으면이 오류가 발생합니다 .</target>
        </trans-unit>
        <trans-unit id="9cc1a5931ad6e95b75178ec43e7a0f260898fd98" translate="yes" xml:space="preserve">
          <source>You'd get this error:</source>
          <target state="translated">이 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="0c94c6de276c53e1e07b077a58839a04b8d0ad21" translate="yes" xml:space="preserve">
          <source>You'll acquire the &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; contents with a &lt;a href=&quot;../api/core/templateref&quot;&gt;&lt;code&gt;TemplateRef&lt;/code&gt;&lt;/a&gt; and access the &lt;em&gt;view container&lt;/em&gt; through a &lt;a href=&quot;../api/core/viewcontainerref&quot;&gt;&lt;code&gt;ViewContainerRef&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../api/core/templateref&quot;&gt; &lt;code&gt;TemplateRef&lt;/code&gt; &lt;/a&gt; 를 사용 하여 &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; 컨텐츠를 얻고 &lt;a href=&quot;../api/core/viewcontainerref&quot;&gt; &lt;code&gt;ViewContainerRef&lt;/code&gt; 를&lt;/a&gt; 통해 &lt;em&gt;뷰 컨테이너에&lt;/em&gt; 액세스합니다 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="6580dab0f78cc1239efbe404bff535c4bab545df" translate="yes" xml:space="preserve">
          <source>You'll add a &lt;code&gt;select&lt;/code&gt; to the form and bind the options to the &lt;code&gt;powers&lt;/code&gt; list using &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt;, a technique seen previously in the &lt;a href=&quot;displaying-data&quot;&gt;Displaying Data&lt;/a&gt; page.</source>
          <target state="translated">당신은 추가 할 것입니다 &lt;code&gt;select&lt;/code&gt; 형식과 바인드의 옵션에 &lt;code&gt;powers&lt;/code&gt; 사용 목록 &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 는 이전에 볼 수있는 기술 &lt;a href=&quot;displaying-data&quot;&gt;표시 데이터&lt;/a&gt; 페이지를.</target>
        </trans-unit>
        <trans-unit id="445582d6ff7ea9cb99eb7b91f8cc72406f0b3c41" translate="yes" xml:space="preserve">
          <source>You'll also start to gradually phase out the Bower package manager in favor of NPM, installing all new dependencies using NPM, and eventually removing Bower from the project.</source>
          <target state="translated">또한 NPM을 위해 Bower 패키지 관리자를 단계적으로 중단하고 NPM을 사용하여 모든 새로운 종속성을 설치하고 결국 프로젝트에서 Bower를 제거합니다.</target>
        </trans-unit>
        <trans-unit id="813064eb15f45d8306cdfbf120535d64ccf6cd60" translate="yes" xml:space="preserve">
          <source>You'll be able to re-implement &lt;code&gt;getHero()&lt;/code&gt; as a real &lt;code&gt;Http&lt;/code&gt; request without having to change the &lt;code&gt;HeroDetailComponent&lt;/code&gt; that calls it.</source>
          <target state="translated">&lt;code&gt;getHero()&lt;/code&gt; 를 호출 하는 &lt;code&gt;HeroDetailComponent&lt;/code&gt; 를 변경하지 않고도 실제 &lt;code&gt;Http&lt;/code&gt; 요청 으로 다시 구현할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0d7743b6d6cb273bd51265b0580c7350d42fd379" translate="yes" xml:space="preserve">
          <source>You'll bind the form's overall validity via the &lt;code&gt;heroForm&lt;/code&gt; variable to the button's &lt;code&gt;disabled&lt;/code&gt; property using an event binding. Here's the code:</source>
          <target state="translated">이벤트 바인딩을 사용하여 &lt;code&gt;heroForm&lt;/code&gt; 변수를 통해 폼의 전체 유효성을 버튼의 &lt;code&gt;disabled&lt;/code&gt; 속성에 바인딩합니다. 코드는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="db6e4afb7f2536d6549887929a0b6f38bb6da350" translate="yes" xml:space="preserve">
          <source>You'll build this form in small steps:</source>
          <target state="translated">이 양식은 작은 단계로 작성합니다.</target>
        </trans-unit>
        <trans-unit id="9497ba807b00d5e3c6c9bd8ea6b9e52ff20b7472" translate="yes" xml:space="preserve">
          <source>You'll find many such files among the samples in the Angular documentation.</source>
          <target state="translated">Angular 문서의 샘플 중에서 많은 파일을 찾을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="23af3212b382ce196aa58af4d091fd663c737886" translate="yes" xml:space="preserve">
          <source>You'll find the implementation of the shell &lt;code&gt;AppComponent&lt;/code&gt; distributed over three files:</source>
          <target state="translated">세 개의 파일에 분산 된 쉘 &lt;code&gt;AppComponent&lt;/code&gt; 의 구현을 찾을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c9fb1216278f2c02c28b4bfe3ecd5240c2cdc713" translate="yes" xml:space="preserve">
          <source>You'll get an error if you reference it in the component constructor, which the compiler must statically analyze.</source>
          <target state="translated">컴파일러가 정적으로 분석 해야하는 구성 요소 생성자에서 참조하면 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="8125f4e3dcd2f9f0130029b41f4b772275653e90" translate="yes" xml:space="preserve">
          <source>You'll have to adjust to that difference in &lt;code&gt;HeroesComponent&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;HeroesComponent&lt;/code&gt; 의 차이에 맞게 조정해야합니다 .</target>
        </trans-unit>
        <trans-unit id="498286be1a5676455a92a1b5d4d526dc13943bff" translate="yes" xml:space="preserve">
          <source>You'll have to fix the private stylesheet (&lt;code&gt;heroes.component.css&lt;/code&gt;) to make the list look as it did before. Revised styles are in the &lt;a href=&quot;toh-pt5#heroescomponent&quot;&gt;final code review&lt;/a&gt; at the bottom of this guide.</source>
          <target state="translated">목록을 이전처럼 보이게 하려면 개인 스타일 시트 ( &lt;code&gt;heroes.component.css&lt;/code&gt; ) 를 수정 해야합니다. 수정 된 스타일은 이 가이드 하단의 &lt;a href=&quot;toh-pt5#heroescomponent&quot;&gt;최종 코드 검토&lt;/a&gt; 에 있습니다.</target>
        </trans-unit>
        <trans-unit id="75afdd7cdeeb665e928dd924acfed8af30df1379" translate="yes" xml:space="preserve">
          <source>You'll have to manually trigger the change detection to update the template.</source>
          <target state="translated">템플릿을 업데이트하려면 변경 감지를 수동으로 트리거해야합니다.</target>
        </trans-unit>
        <trans-unit id="930b75e78330140fb561271aa3439eed8b876b62" translate="yes" xml:space="preserve">
          <source>You'll have to rename the directive's &lt;code&gt;highlightColor&lt;/code&gt; property to &lt;code&gt;appHighlight&lt;/code&gt; because that's now the color property binding name.</source>
          <target state="translated">지시문의 &lt;code&gt;highlightColor&lt;/code&gt; 속성 의 이름 을 &lt;code&gt;appHighlight&lt;/code&gt; 로 바꿔야 합니다. 이제 색상 속성 바인딩 이름이기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="93ca6476b40bb9e20641f458375e4e5de27e9c44" translate="yes" xml:space="preserve">
          <source>You'll implement this feature in a moment by including the viewed hero's &lt;code&gt;id&lt;/code&gt; in the URL as an optional parameter when returning from the &lt;code&gt;HeroDetailComponent&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;HeroDetailComponent&lt;/code&gt; 에서 돌아올 때 URL에서 조회 된 영웅의 &lt;code&gt;id&lt;/code&gt; 를 선택적 매개 변수로 포함하여이 기능을 즉시 구현할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ddbd7cc44d40336bddf1a242a40b58809b6ec25f" translate="yes" xml:space="preserve">
          <source>You'll learn about more options in the &lt;a href=&quot;router#browser-url-styles&quot;&gt;details below&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;router#browser-url-styles&quot;&gt;아래 세부 사항&lt;/a&gt; 에서 더 많은 옵션에 대해 배웁니다 .</target>
        </trans-unit>
        <trans-unit id="b6b066a9f60bf0d9d216a1acfaee4b183d81590a" translate="yes" xml:space="preserve">
          <source>You'll learn about styles for live examples in the &lt;a href=&quot;docs-style-guide#live-examples&quot;&gt;section below&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;docs-style-guide#live-examples&quot;&gt;아래 섹션&lt;/a&gt; 에서 라이브 예제의 스타일에 대해 배웁니다 .</target>
        </trans-unit>
        <trans-unit id="26ac91a7423d8cf9c25747073a3dce6052d32f29" translate="yes" xml:space="preserve">
          <source>You'll learn about these advanced test features below. For now, you can radically reduce this test file to a more manageable size:</source>
          <target state="translated">아래에서 이러한 고급 테스트 기능에 대해 알아 봅니다. 지금은이 테스트 파일을보다 관리하기 쉬운 크기로 크게 줄일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="69dea9b6a28c19946d4d5d3dd39796d9d7e7f429" translate="yes" xml:space="preserve">
          <source>You'll learn enough Angular to get started and gain confidence that Angular can do whatever you need it to do.</source>
          <target state="translated">시작하기에 충분한 Angular를 배우고 Angular가 필요한 모든 작업을 수행 할 수 있다는 자신감을 얻게됩니다.</target>
        </trans-unit>
        <trans-unit id="941342b25e1eb255693f997db764f6f2611f8ed7" translate="yes" xml:space="preserve">
          <source>You'll learn in this guide that the &lt;a href=&quot;structural-directives#asterisk&quot;&gt;asterisk (*) is a convenience notation&lt;/a&gt; and the string is a &lt;a href=&quot;structural-directives#microsyntax&quot;&gt;&lt;em&gt;microsyntax&lt;/em&gt;&lt;/a&gt; rather than the usual &lt;a href=&quot;template-syntax#template-expressions&quot;&gt;template expression&lt;/a&gt;. Angular desugars this notation into a marked-up &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; that surrounds the host element and its descendents. Each structural directive does something different with that template.</source>
          <target state="translated">이 안내서에서 &lt;a href=&quot;structural-directives#asterisk&quot;&gt;별표 (*)는 편의 표기법&lt;/a&gt; 이고 문자열은 일반적인 &lt;a href=&quot;template-syntax#template-expressions&quot;&gt;템플릿 표현식이&lt;/a&gt; 아니라 &lt;a href=&quot;structural-directives#microsyntax&quot;&gt;&lt;em&gt;마이크로 구문임을 알게&lt;/em&gt;&lt;/a&gt; 됩니다. Angular는이 표기법을 호스트 요소와 그 하위 요소를 둘러싸는 마크 업 &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; 으로 분리 합니다. 각 구조적 지시문은 해당 템플리트와 다른 작업을 수행합니다.</target>
        </trans-unit>
        <trans-unit id="859b6f9edb818f839808ecc27a3c14a4ac704a82" translate="yes" xml:space="preserve">
          <source>You'll learn to build a template-driven form that looks like this:</source>
          <target state="translated">다음과 같은 템플릿 기반 양식을 작성하는 방법을 배웁니다.</target>
        </trans-unit>
        <trans-unit id="16bea36a4314d9a700d75612239cf381fc3ee2cb" translate="yes" xml:space="preserve">
          <source>You'll most likely get a &lt;em&gt;404 - Page Not Found&lt;/em&gt; response from the server for any address other than &lt;code&gt;/&lt;/code&gt; or &lt;code&gt;/index.html&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;/&lt;/code&gt; 또는 &lt;code&gt;/index.html&lt;/code&gt; 이외의 주소에 대해서는 서버로부터 &lt;em&gt;404-Page Not Found&lt;/em&gt; 응답을 얻을 가능성이 큽니다 .</target>
        </trans-unit>
        <trans-unit id="c0578e2052fdde2941cb348d9e79ebd87143751a" translate="yes" xml:space="preserve">
          <source>You'll need some heroes to display.</source>
          <target state="translated">표시 할 영웅이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="fb80c43c8e2ba4e95e0da73253b26425fa7a7362" translate="yes" xml:space="preserve">
          <source>You'll need to use the generated &lt;code&gt;AppModuleFactory&lt;/code&gt;, instead of the original &lt;code&gt;AppModule&lt;/code&gt; to bootstrap the hybrid app:</source>
          <target state="translated">하이브리드 앱을 부트 스트랩하려면 원래 &lt;code&gt;AppModule&lt;/code&gt; 대신 생성 된 &lt;code&gt;AppModuleFactory&lt;/code&gt; 를 사용해야합니다 .</target>
        </trans-unit>
        <trans-unit id="5b27043f30baf6f6a944d5b2512d688a8d1d4aff" translate="yes" xml:space="preserve">
          <source>You'll notice two different types of redirects. The first change is from &lt;code&gt;/heroes&lt;/code&gt; to &lt;code&gt;/superheroes&lt;/code&gt; without any parameters. This is a straightforward redirect, unlike the change from &lt;code&gt;/hero/:id&lt;/code&gt; to &lt;code&gt;/superhero/:id&lt;/code&gt;, which includes the &lt;code&gt;:id&lt;/code&gt; route parameter. Router redirects also use powerful pattern matching, so the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; inspects the URL and replaces route parameters in the &lt;code&gt;path&lt;/code&gt; with their appropriate destination. Previously, you navigated to a URL such as &lt;code&gt;/hero/15&lt;/code&gt; with a route parameter &lt;code&gt;id&lt;/code&gt; of &lt;code&gt;15&lt;/code&gt;.</source>
          <target state="translated">서로 다른 두 가지 유형의 리디렉션이 있습니다. 첫 번째 변경 사항은 매개 변수없이 &lt;code&gt;/heroes&lt;/code&gt; 에서 &lt;code&gt;/superheroes&lt;/code&gt; 로 변경 됩니다. 이것은 &lt;code&gt;/hero/:id&lt;/code&gt; 에서 &lt;code&gt;/superhero/:id&lt;/code&gt; 로의 변경과 달리 간단한 리디렉션으로, &lt;code&gt;:id&lt;/code&gt; route 매개 변수 를 포함 합니다. 라우터 리디렉션은 또한 강력한 패턴 일치를 사용하므로 &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; 는 URL을 검사하고 &lt;code&gt;path&lt;/code&gt; 의 경로 매개 변수를 적절한 대상으로 바꿉니다 . 이전 에는 경로 매개 변수 &lt;code&gt;id&lt;/code&gt; 가 &lt;code&gt;15&lt;/code&gt; 인 &lt;code&gt;/hero/15&lt;/code&gt; 와 같은 URL로 이동했습니다 .</target>
        </trans-unit>
        <trans-unit id="13f9ec443fed7be8dc7ac1d38243046de27749d3" translate="yes" xml:space="preserve">
          <source>You'll often display multiple snippets from different fragments within the same file. You distinguish among them by giving each fragment its own &lt;em&gt;#docregion name&lt;/em&gt; as follows.</source>
          <target state="translated">동일한 파일 내에서 다른 조각의 여러 조각을 종종 표시합니다. 다음과 같이 각 조각에 고유 한 &lt;em&gt;#docregion 이름&lt;/em&gt; 을 &lt;em&gt;지정&lt;/em&gt; 하여 이들을 구별 합니다.</target>
        </trans-unit>
        <trans-unit id="c517902471f04d952f3a448dbd5291cbf5fc9bcd" translate="yes" xml:space="preserve">
          <source>You'll set it in &lt;a href=&quot;toh-pt6#search-pipe&quot;&gt;&lt;code&gt;ngOnInit()&lt;/code&gt;&lt;/a&gt;. Before you do, focus on the definition of &lt;code&gt;searchTerms&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;toh-pt6#search-pipe&quot;&gt; &lt;code&gt;ngOnInit()&lt;/code&gt; &lt;/a&gt; 에서 설정합니다 . 시작하기 전에 &lt;code&gt;searchTerms&lt;/code&gt; 정의에 초점을 맞추십시오 .</target>
        </trans-unit>
        <trans-unit id="6dd0b2fb97b5e772840b87ba903d543302c0242f" translate="yes" xml:space="preserve">
          <source>You'll take a different approach with &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; because</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; 와는 다른 접근 방식을 사용 합니다 .</target>
        </trans-unit>
        <trans-unit id="e98ce50bd21ffc4625e6bffb4b1df3b7cd73f41f" translate="yes" xml:space="preserve">
          <source>You'll use mock crises instead of mock heroes:</source>
          <target state="translated">모의 영웅 대신 모의 위기를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="ffbb00a61db8b56610ad6cc18128fe650b41da70" translate="yes" xml:space="preserve">
          <source>You'll write a sequence of tests that inspect the value of the &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; element that wraps the &lt;em&gt;title&lt;/em&gt; property interpolation binding.</source>
          <target state="translated">&lt;em&gt;제목&lt;/em&gt; 속성 보간 바인딩 을 래핑하는 &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; 요소 의 값을 검사하는 일련의 테스트를 작성합니다 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="45abac03594861f44c9d4bd8bec7c53301ff5f7a" translate="yes" xml:space="preserve">
          <source>You're already part of the way there. By organizing the application into modules&amp;mdash;&lt;code&gt;AppModule&lt;/code&gt;, &lt;code&gt;HeroesModule&lt;/code&gt;, &lt;code&gt;AdminModule&lt;/code&gt; and &lt;code&gt;CrisisCenterModule&lt;/code&gt;&amp;mdash;you have natural candidates for lazy loading.</source>
          <target state="translated">당신은 이미 그 길의 일부입니다. 응용 프로그램을 &lt;code&gt;AppModule&lt;/code&gt; , &lt;code&gt;HeroesModule&lt;/code&gt; , &lt;code&gt;AdminModule&lt;/code&gt; 및 &lt;code&gt;CrisisCenterModule&lt;/code&gt; 모듈로 구성하면 지연로드에 대한 자연스러운 후보가됩니다.</target>
        </trans-unit>
        <trans-unit id="8bb1ac36e3e8e7549f64e80c697df14fc2d35b19" translate="yes" xml:space="preserve">
          <source>You're already protecting the &lt;code&gt;AdminModule&lt;/code&gt; with a &lt;code&gt;&lt;a href=&quot;../api/router/canactivate&quot;&gt;CanActivate&lt;/a&gt;&lt;/code&gt; guard that prevents unauthorized users from accessing the admin feature area. It redirects to the login page if the user is not authorized.</source>
          <target state="translated">권한이없는 사용자가 관리 기능 영역에 액세스하지 못하게 하는 &lt;code&gt;&lt;a href=&quot;../api/router/canactivate&quot;&gt;CanActivate&lt;/a&gt;&lt;/code&gt; 가드로 &lt;code&gt;AdminModule&lt;/code&gt; 을 이미 보호하고 있습니다. 사용자에게 권한이 없으면 로그인 페이지로 경로 재 지정됩니다.</target>
        </trans-unit>
        <trans-unit id="b1fb8ba175245188998c09b27fdae81f6979ece3" translate="yes" xml:space="preserve">
          <source>You're at the end of your journey, and you've accomplished a lot.</source>
          <target state="translated">당신은 당신의 여행이 끝났고 많은 것을 성취했습니다.</target>
        </trans-unit>
        <trans-unit id="fcdc6969d9ea878ef004718261abe103bf08fa3e" translate="yes" xml:space="preserve">
          <source>You're navigating to the &lt;code&gt;CrisisListComponent&lt;/code&gt;, whose route path is &lt;code&gt;/&lt;/code&gt;, but you don't need to explicitly add the slash.</source>
          <target state="translated">경로 경로가 &lt;code&gt;/&lt;/code&gt; 인 &lt;code&gt;CrisisListComponent&lt;/code&gt; 로 이동 하지만 슬래시를 명시 적으로 추가 할 필요는 없습니다.</target>
        </trans-unit>
        <trans-unit id="678daa8e660f65ecc5e7ffb4a01c5b971a058200" translate="yes" xml:space="preserve">
          <source>You're not actually doing that here. But to target a named outlet, you must use the richer, more verbose syntax.</source>
          <target state="translated">당신은 실제로 여기서하지 않습니다. 그러나 명명 된 콘센트를 대상으로하려면 더 풍부하고 더 자세한 구문을 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="36aae90a45d77ae376e72371259fc544bb1498dc" translate="yes" xml:space="preserve">
          <source>You're not so lucky when testing the error path. Although the service spy will return an error synchronously, the component method calls &lt;code&gt;setTimeout()&lt;/code&gt;. The test must wait at least one full turn of the JavaScript engine before the value becomes available. The test must become &lt;em&gt;asynchronous&lt;/em&gt;.</source>
          <target state="translated">오류 경로를 테스트 할 때 운이 좋지 않습니다. 서비스 스파이는 동 기적으로 오류를 반환하지만 구성 요소 메서드는 &lt;code&gt;setTimeout()&lt;/code&gt; 호출합니다 . 값을 사용할 수 있으려면 테스트에서 JavaScript 엔진을 한 번 이상 완전히 기다려야합니다. 테스트는 &lt;em&gt;비동기식&lt;/em&gt; 이어야합니다 .</target>
        </trans-unit>
        <trans-unit id="36456f173f02008bfaef334a8ec23d26cc7bac08" translate="yes" xml:space="preserve">
          <source>You're using Angular &lt;a href=&quot;../guide/template-syntax#interpolation&quot;&gt;interpolation binding&lt;/a&gt; within the &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; repeater to insert the current iteration's &lt;code&gt;hero.id&lt;/code&gt; into each &lt;a href=&quot;toh-pt5#routerlink&quot;&gt;&lt;code&gt;routerLink&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt; repeater 내에서 Angular &lt;a href=&quot;../guide/template-syntax#interpolation&quot;&gt;보간 바인딩을&lt;/a&gt; 사용 하여 현재 반복의 &lt;code&gt;hero.id&lt;/code&gt; 를 각 &lt;a href=&quot;toh-pt5#routerlink&quot;&gt; &lt;code&gt;routerLink&lt;/code&gt; &lt;/a&gt; 에 삽입하십시오 .</target>
        </trans-unit>
        <trans-unit id="dfe3e9a739928bed07b9dd2c4b2994be9c2fa829" translate="yes" xml:space="preserve">
          <source>You're using the property binding syntax around &lt;code&gt;ng-class&lt;/code&gt;. Though Angular does have &lt;a href=&quot;template-syntax#directives&quot;&gt;a very similar &lt;code&gt;ngClass&lt;/code&gt;&lt;/a&gt; as AngularJS does, its value is not magically evaluated as an expression. In Angular, you always specify in the template when an attribute's value is a property expression, as opposed to a literal string.</source>
          <target state="translated">&lt;code&gt;ng-class&lt;/code&gt; 주위에 속성 바인딩 구문을 사용하고 있습니다 . Angular는 AngularJS &lt;a href=&quot;template-syntax#directives&quot;&gt;와 매우 유사한 &lt;code&gt;ngClass&lt;/code&gt; &lt;/a&gt; 를 가지고 있지만 그 값은 마술처럼 표현되지 않습니다. Angular에서는 리터럴 문자열과 달리 속성 값이 속성 표현식 인 경우 항상 템플릿에 지정합니다.</target>
        </trans-unit>
        <trans-unit id="4a0ae36a9db9219558a159a26c4a0bda9d430916" translate="yes" xml:space="preserve">
          <source>You've already injected the &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; that you need to compose the relative navigation path.</source>
          <target state="translated">상대 탐색 경로를 작성해야하는 &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; 를 이미 삽입했습니다 .</target>
        </trans-unit>
        <trans-unit id="5adc351892de2e9a2ad7fc95a03dc7eb896158fb" translate="yes" xml:space="preserve">
          <source>You've bound template HTML to component properties before and never used &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt;. What's different?</source>
          <target state="translated">이전에는 템플릿 HTML을 구성 요소 속성에 바인딩했으며 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; 사용한 적이 없습니다 . 무엇이 다른가요?</target>
        </trans-unit>
        <trans-unit id="778c9920db4e19ebc717c4b893e1eda04b89946f" translate="yes" xml:space="preserve">
          <source>You've covered a lot of ground in this guide and the application is too big to reprint here. Please visit the  where you can download the final source code.</source>
          <target state="translated">이 안내서에서 많은 내용을 다루었으며 응용 프로그램이 너무 커서 여기에 다시 인쇄 할 수 없습니다. 최종 소스 코드를 다운로드 할 수있는 곳을 방문하십시오.</target>
        </trans-unit>
        <trans-unit id="c16367f42bd93bb09c9bf31f23c4438a48c300ec" translate="yes" xml:space="preserve">
          <source>You've created two routes in the app so far, one to &lt;code&gt;/crisis-center&lt;/code&gt; and the other to &lt;code&gt;/heroes&lt;/code&gt;. Any other URL causes the router to throw an error and crash the app.</source>
          <target state="translated">지금까지 앱에서 두 개의 경로를 만들었습니다. 하나는 &lt;code&gt;/crisis-center&lt;/code&gt; , 다른 하나는 &lt;code&gt;/heroes&lt;/code&gt; 입니다. 다른 URL은 라우터가 오류를 발생시키고 앱을 중단시킵니다.</target>
        </trans-unit>
        <trans-unit id="9c0af5d049a686d3e4815bf6d173a777fc7a11e7" translate="yes" xml:space="preserve">
          <source>You've defined a class with a constructor and two properties: &lt;code&gt;id&lt;/code&gt; and &lt;code&gt;name&lt;/code&gt;.</source>
          <target state="translated">생성자와 &lt;code&gt;id&lt;/code&gt; 및 &lt;code&gt;name&lt;/code&gt; 두 속성을 사용하여 클래스를 정의했습니다 .</target>
        </trans-unit>
        <trans-unit id="2730b5827cec90c5cd2cf599589fae9a7d6fe4c7" translate="yes" xml:space="preserve">
          <source>You've got a very basic navigating app, one that can switch between two views when the user clicks a link.</source>
          <target state="translated">매우 기본적인 탐색 앱이 있는데 사용자가 링크를 클릭 할 때 두보기간에 전환 할 수있는 앱입니다.</target>
        </trans-unit>
        <trans-unit id="4704f86f9e7dcf74dafad6a5b772ebd708b17a22" translate="yes" xml:space="preserve">
          <source>You've learned how to do the following:</source>
          <target state="translated">다음을 수행하는 방법을 배웠습니다.</target>
        </trans-unit>
        <trans-unit id="ce126987f8593e8603341979d69ceaf5e44f1841" translate="yes" xml:space="preserve">
          <source>You've learned how to load modules on-demand. You can also load modules asynchronously with &lt;em&gt;preloading&lt;/em&gt;.</source>
          <target state="translated">주문형으로 모듈을로드하는 방법을 배웠습니다. &lt;em&gt;사전로드를 사용&lt;/em&gt; 하여 모듈을 비동기식으로 &lt;em&gt;로드&lt;/em&gt; 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ffb8766c68361f41672403f2e7a1f276b72d3ddd" translate="yes" xml:space="preserve">
          <source>You've learned the basics about the main building blocks of an Angular application. The following diagram shows how these basic pieces are related.</source>
          <target state="translated">Angular 응용 프로그램의 기본 빌딩 블록에 대한 기본 사항을 배웠습니다. 다음 다이어그램은 이러한 기본 부분이 어떻게 관련되어 있는지 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="7aaf5f231aee4f52c87de77d7e68e688a3cd6527" translate="yes" xml:space="preserve">
          <source>You've removed the &lt;code&gt;$ctrl.&lt;/code&gt; prefix from all expressions.</source>
          <target state="translated">&lt;code&gt;$ctrl.&lt;/code&gt; 제거했습니다 . 모든 식의 접두사.</target>
        </trans-unit>
        <trans-unit id="70c8c2169715c36cb9b86718e83d512a6e64ed3f" translate="yes" xml:space="preserve">
          <source>You've replaced &lt;code&gt;ng-click&lt;/code&gt; with an event binding for the standard &lt;code&gt;click&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ng-click&lt;/code&gt; 을 표준 &lt;code&gt;click&lt;/code&gt; 에 대한 이벤트 바인딩으로 교체했습니다 .</target>
        </trans-unit>
        <trans-unit id="fafd226bf7d4cb70ec74941efa1e32ef845a5293" translate="yes" xml:space="preserve">
          <source>You've replaced &lt;code&gt;ng-repeat&lt;/code&gt;s with &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt;s.</source>
          <target state="translated">&lt;code&gt;ng-repeat&lt;/code&gt; 를 &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 로 대체했습니다 .</target>
        </trans-unit>
        <trans-unit id="6f8947e5ef1b8c3889320df2d4af8e55a46d5742" translate="yes" xml:space="preserve">
          <source>You've replaced &lt;code&gt;ng-src&lt;/code&gt; with property bindings for the standard &lt;code&gt;src&lt;/code&gt; property.</source>
          <target state="translated">&lt;code&gt;ng-src&lt;/code&gt; 를 표준 &lt;code&gt;src&lt;/code&gt; 속성에 대한 속성 바인딩으로 대체 했습니다.</target>
        </trans-unit>
        <trans-unit id="8ee085f1a9062b00575e6e1bacb40a8c99553c00" translate="yes" xml:space="preserve">
          <source>You've seen how to add a delay between each successive animation. But you may also want to configure animations that happen in parallel. For example, you may want to animate two CSS properties of the same element but use a different &lt;code&gt;easing&lt;/code&gt; function for each one. For this, you can use the animation &lt;a href=&quot;../api/animations/group&quot;&gt;&lt;code&gt;group()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">각 연속 애니메이션 사이에 지연을 추가하는 방법을 살펴 보았습니다. 그러나 동시에 발생하는 애니메이션을 구성 할 수도 있습니다. 예를 들어 동일한 요소의 두 CSS 속성에 애니메이션을 적용 하고 각 요소 마다 다른 &lt;code&gt;easing&lt;/code&gt; 함수를 사용할 수 있습니다 . 이를 위해 animation &lt;a href=&quot;../api/animations/group&quot;&gt; &lt;code&gt;group()&lt;/code&gt; &lt;/a&gt; 함수를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="1d2bc087158803233fbe64632f1fab291cd90121" translate="yes" xml:space="preserve">
          <source>You've seen how to navigate using the &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; directive. Now you'll learn the following:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; 지시문 을 사용하여 탐색하는 방법을 살펴 보았습니다 . 이제 다음을 배우게됩니다.</target>
        </trans-unit>
        <trans-unit id="fc0dff14cfe07a42b753e6490c496873d900e361" translate="yes" xml:space="preserve">
          <source>You've seen it with an alias:</source>
          <target state="translated">별명으로 보았습니다.</target>
        </trans-unit>
        <trans-unit id="74ed5cfd265d3c5e296c49d293be5ef8a2793486" translate="yes" xml:space="preserve">
          <source>You've setup the routes for navigating around your application. You've used navigation imperatively and declaratively to many different routes. But like any application, requirements change over time. You've setup links and navigation to &lt;code&gt;/heroes&lt;/code&gt; and &lt;code&gt;/hero/:id&lt;/code&gt; from the &lt;code&gt;HeroListComponent&lt;/code&gt; and &lt;code&gt;HeroDetailComponent&lt;/code&gt; components. If there was a requirement that links to &lt;code&gt;heroes&lt;/code&gt; become &lt;code&gt;superheroes&lt;/code&gt;, you still want the previous URLs to navigate correctly. You also don't want to go and update every link in your application, so redirects makes refactoring routes trivial.</source>
          <target state="translated">애플리케이션을 탐색하기위한 경로를 설정했습니다. 다양한 경로를 탐색 적으로 필수적이고 선언적으로 사용했습니다. 그러나 다른 응용 프로그램과 마찬가지로 요구 사항은 시간이 지남에 따라 변경됩니다. &lt;code&gt;HeroListComponent&lt;/code&gt; 및 &lt;code&gt;HeroDetailComponent&lt;/code&gt; 구성 요소 에서 &lt;code&gt;/heroes&lt;/code&gt; 및 &lt;code&gt;/hero/:id&lt;/code&gt; 에 대한 링크 및 탐색을 설정했습니다 . &lt;code&gt;heroes&lt;/code&gt; 연결되는 링크 가 &lt;code&gt;superheroes&lt;/code&gt; 가되어야 한다는 요구 사항이 있었 더라도 여전히 이전 URL이 올바르게 탐색되기를 원합니다. 또한 응용 프로그램의 모든 링크를 이동하고 업데이트하고 싶지 않으므로 리디렉션을 통해 리팩토링 경로가 간단합니다.</target>
        </trans-unit>
        <trans-unit id="f39c084e8000187b1413e7f10a34a4b001f969f9" translate="yes" xml:space="preserve">
          <source>You've swapped &lt;code&gt;of()&lt;/code&gt; for &lt;code&gt;http.get()&lt;/code&gt; and the app keeps working without any other changes because both functions return an &lt;code&gt;Observable&amp;lt;Hero[]&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">당신이 교환 한 &lt;code&gt;of()&lt;/code&gt; 대한 &lt;code&gt;http.get()&lt;/code&gt; 두 함수는 반환하기 때문에 응용 프로그램이 다른 변경없이 작업에 지속적 &lt;code&gt;Observable&amp;lt;Hero[]&amp;gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0b364c5e2546321a1a66dff712db0e998af77459" translate="yes" xml:space="preserve">
          <source>You've wrapped the whole template in an &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; that causes it only to be rendered when there is a phone present. You need this because when the component first loads, you don't have &lt;code&gt;phone&lt;/code&gt; yet and the expressions will refer to a non-existing value. Unlike in AngularJS, Angular expressions do not fail silently when you try to refer to properties on undefined objects. You need to be explicit about cases where this is expected.</source>
          <target state="translated">전체 템플릿을 &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; 로 감싸서 전화가있을 때만 렌더링되도록합니다. 구성 요소가 처음로드 될 때 아직 &lt;code&gt;phone&lt;/code&gt; 가없고 표현식이 존재하지 않는 값을 참조하기 때문에 이것이 필요 합니다. AngularJS와 달리 정의되지 않은 객체의 속성을 참조하려고 할 때 각도 표현식은 자동으로 실패하지 않습니다. 이것이 예상되는 경우에 대해 명시해야합니다.</target>
        </trans-unit>
        <trans-unit id="cce4065fd0594082094edad6e456d3f7362c9fca" translate="yes" xml:space="preserve">
          <source>You've written a two element array when specifying a route parameter like this:</source>
          <target state="translated">다음과 같이 경로 매개 변수를 지정할 때 두 개의 요소 배열을 작성했습니다.</target>
        </trans-unit>
        <trans-unit id="e3211f16f2bf13ae261e0950e95fcb097de41f22" translate="yes" xml:space="preserve">
          <source>Your AngularJS application is configured with only the routes it needs to render content. The remaining routes in your application are handled by the Angular Router. The exposed &lt;code&gt;bootstrap&lt;/code&gt; method is called in your Angular app to bootstrap the AngularJS application after the bundle is loaded.</source>
          <target state="translated">AngularJS 애플리케이션은 컨텐츠를 렌더링하는 데 필요한 경로만으로 구성됩니다. 응용 프로그램의 나머지 경로는 Angular Router에 의해 처리됩니다. 번들이로드 된 후 AngularJS 애플리케이션을 부트 스트랩하기 위해 노출 된 &lt;code&gt;bootstrap&lt;/code&gt; 메소드가 Angular 앱에서 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="65bfaf96c06d97f96e8a65f9438758ce7b3569a9" translate="yes" xml:space="preserve">
          <source>Your app greets you with a message:</source>
          <target state="translated">앱이 메시지와 함께 인사합니다 :</target>
        </trans-unit>
        <trans-unit id="c3e748379c0414e0121830fc533540732cc48d9e" translate="yes" xml:space="preserve">
          <source>Your app relies on Angular &lt;a href=&quot;dependency-injection&quot;&gt;dependency injection (DI)&lt;/a&gt; to create services. When a service has a dependent service, DI finds or creates that dependent service. And if that dependent service has its own dependencies, DI finds-or-creates them as well.</source>
          <target state="translated">앱은 서비스를 생성하기 위해 각도 &lt;a href=&quot;dependency-injection&quot;&gt;의존성 주입 (DI)&lt;/a&gt; 에 의존 합니다. 서비스에 종속 서비스가있는 경우 DI는 해당 종속 서비스를 찾거나 생성합니다. 그리고 종속 서비스에 고유 한 종속성이있는 경우 DI도이를 찾아서 만듭니다.</target>
        </trans-unit>
        <trans-unit id="c716f3ea5620bf66e2e4c4b3ee6d42236db25538" translate="yes" xml:space="preserve">
          <source>Your app should look like this live example.</source>
          <target state="translated">앱은이 라이브 예제와 같아야합니다.</target>
        </trans-unit>
        <trans-unit id="0f950aa0359003244b24ae8203ac4e789899bf4d" translate="yes" xml:space="preserve">
          <source>Your app should look like this live example. Here are the code files discussed on this page.</source>
          <target state="translated">앱은이 라이브 예제와 같아야합니다. 이 페이지에서 설명한 코드 파일은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="e13067ae32219b5a8f055e17abc4462a9a25799c" translate="yes" xml:space="preserve">
          <source>Your editor autodetects that you are opening an Angular file. It then uses the Angular Language Service to read your &lt;code&gt;tsconfig.json&lt;/code&gt; file, find all the templates you have in your application, and then provide language services for any templates that you open.</source>
          <target state="translated">편집기는 Angular 파일을 여는 중임을 자동 감지합니다. 그런 다음 Angular Language Service를 사용하여 &lt;code&gt;tsconfig.json&lt;/code&gt; 파일 을 읽고 애플리케이션에있는 모든 템플리트를 찾은 다음 열려는 템플리트에 대한 언어 서비스를 제공하십시오.</target>
        </trans-unit>
        <trans-unit id="73d09ca9a86e236db4617d978e1523f63f053378" translate="yes" xml:space="preserve">
          <source>Your library and schematics are packaged and placed in the &lt;code&gt;dist/my-lib&lt;/code&gt; folder at the root of your workspace. For running the schematic, you need to link the library into your &lt;code&gt;node_modules&lt;/code&gt; folder. From the root of your workspace, run the &lt;code&gt;npm link&lt;/code&gt; command with the path to your distributable library.</source>
          <target state="translated">라이브러리와 회로도는 패키지되어 작업 공간 루트의 &lt;code&gt;dist/my-lib&lt;/code&gt; 폴더에 배치됩니다 . 회로도를 실행하려면 라이브러리를 &lt;code&gt;node_modules&lt;/code&gt; 폴더 에 연결해야 합니다. 작업 공간의 루트에서 분배 가능한 라이브러리의 경로와 함께 &lt;code&gt;npm link&lt;/code&gt; 명령을 실행하십시오 .</target>
        </trans-unit>
        <trans-unit id="430d95875f2338142d28aa95b619117061765909" translate="yes" xml:space="preserve">
          <source>Your library needs a custom Typescript configuration file with instructions on how to compile your schematics into your distributed library.</source>
          <target state="translated">라이브러리에는 회로도를 분산 라이브러리로 컴파일하는 방법에 대한 지침이 포함 된 사용자 정의 Typescript 구성 파일이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="7607bee84c0ac254691ea836fbb691148cbf2e26" translate="yes" xml:space="preserve">
          <source>Your library should supply documentation (typically a README file) for installation and maintenance.</source>
          <target state="translated">라이브러리는 설치 및 유지 보수를위한 문서 (일반적으로 README 파일)를 제공해야합니다.</target>
        </trans-unit>
        <trans-unit id="b34572142e030d2e8d230e0be5d3163ebb3992cc" translate="yes" xml:space="preserve">
          <source>Your provider can call a logger factory function.</source>
          <target state="translated">공급자는 로거 팩토리 기능을 호출 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="43dc6f60e03229ee07ca7d84e055218a09bcd4cb" translate="yes" xml:space="preserve">
          <source>Your rules can make changes to your projects by calling external tools and implementing logic. You need a rule, for example, to define how a template in the schematic is to be merged into the hosting project.</source>
          <target state="translated">규칙은 외부 도구를 호출하고 로직을 구현하여 프로젝트를 변경할 수 있습니다. 예를 들어 회로도의 템플릿을 호스팅 프로젝트에 병합하는 방법을 정의하는 규칙이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="dc3e1878c2c23d1279becf7ad8bf2217914ed599" translate="yes" xml:space="preserve">
          <source>Your templates can use &lt;em&gt;pipes&lt;/em&gt; to improve the user experience by transforming values for display. For example, use pipes to display dates and currency values that are appropriate for a user's locale. Angular provides predefined pipes for common transformations, and you can also define your own pipes.</source>
          <target state="translated">템플릿은 &lt;em&gt;파이프&lt;/em&gt; 를 사용 하여 표시 할 값을 변환하여 사용자 경험을 향상시킬 수 있습니다 . 예를 들어 파이프를 사용하여 사용자 로캘에 적합한 날짜 및 통화 값을 표시합니다. Angular는 일반적인 변환을 위해 사전 정의 된 파이프를 제공하며 사용자 고유의 파이프를 정의 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="12c29279def0a091db7f06c9ec1a90435cb179f3" translate="yes" xml:space="preserve">
          <source>Your tests will reflect the real world more faithfully if you return an &lt;em&gt;asynchronous&lt;/em&gt; observable from the &lt;code&gt;getQuote()&lt;/code&gt; spy like this.</source>
          <target state="translated">이와 같이 &lt;code&gt;getQuote()&lt;/code&gt; 스파이 에서 &lt;em&gt;비동기식&lt;/em&gt; 관찰 가능 을 반환하면 테스트에 실제 환경이 더욱 충실하게 반영됩니다 .</target>
        </trans-unit>
        <trans-unit id="909f99a779adb66a76fc53ab56c7dd1caf35d0fd" translate="yes" xml:space="preserve">
          <source>Z</source>
          <target state="translated">Z</target>
        </trans-unit>
        <trans-unit id="9809f6e7ead907aa76775d5d232511ba044d0175" translate="yes" xml:space="preserve">
          <source>Z (GMT-8:00)</source>
          <target state="translated">Z (GMT-8 : 00)</target>
        </trans-unit>
        <trans-unit id="ce6905f17ae50018fff90df06bf53efca8b75312" translate="yes" xml:space="preserve">
          <source>Z, ZZ &amp;amp; ZZZ</source>
          <target state="translated">Z, ZZ 및 ZZZ</target>
        </trans-unit>
        <trans-unit id="9865d483bc5a94f2e30056fc256ed3066af54d04" translate="yes" xml:space="preserve">
          <source>ZZZZ</source>
          <target state="translated">ZZZZ</target>
        </trans-unit>
        <trans-unit id="f888fa8a61ba9a53a45f040a4bbb8b2fc1f64444" translate="yes" xml:space="preserve">
          <source>ZZZZZ</source>
          <target state="translated">ZZZZZ</target>
        </trans-unit>
        <trans-unit id="03efccb49f3ff5f0055a644eae98835dda00b789" translate="yes" xml:space="preserve">
          <source>Zone</source>
          <target state="translated">Zone</target>
        </trans-unit>
        <trans-unit id="7493b79ac0c62e8b584d412dde9f29700c26e65c" translate="yes" xml:space="preserve">
          <source>[( )] = banana in a box</source>
          <target state="translated">[( )] = banana in a box</target>
        </trans-unit>
        <trans-unit id="8da3a9ecbf4c246f6fcffd966ab9e4806aaad198" translate="yes" xml:space="preserve">
          <source>`getLocaleTimeFormat()</source>
          <target state="translated">`getLocaleTimeFormat()</target>
        </trans-unit>
        <trans-unit id="1fa1e2c60fc5a084bc22d2a7d0f01c6078631982" translate="yes" xml:space="preserve">
          <source>`{</source>
          <target state="translated">`{</target>
        </trans-unit>
        <trans-unit id="86f7e437faa5a7fce15d1ddcb9eaeaea377667b8" translate="yes" xml:space="preserve">
          <source>a</source>
          <target state="translated">a</target>
        </trans-unit>
        <trans-unit id="823f4e719202246f14fd7590cb4e33f1abc5cdc5" translate="yes" xml:space="preserve">
          <source>a (PM)</source>
          <target state="translated">(PM)</target>
        </trans-unit>
        <trans-unit id="66b0cf14f96df85dc5ee5c13aac8359f099c9d29" translate="yes" xml:space="preserve">
          <source>a &lt;code&gt;string&lt;/code&gt; defining the locale to use (uses the current &lt;a href=&quot;../core/locale_id&quot;&gt;&lt;code&gt;LOCALE_ID&lt;/code&gt;&lt;/a&gt; by default).</source>
          <target state="translated">사용할 로케일을 정의 하는 &lt;code&gt;string&lt;/code&gt; ( 기본적으로 현재 &lt;a href=&quot;../core/locale_id&quot;&gt; &lt;code&gt;LOCALE_ID&lt;/code&gt; &lt;/a&gt; 사용 )</target>
        </trans-unit>
        <trans-unit id="fe457c7b4dc19559387ac89d6fc0f65d03cfffa2" translate="yes" xml:space="preserve">
          <source>a &lt;code&gt;token&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;token&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="31f3145b9898054c07f0fe1699cdcb2b0208b386" translate="yes" xml:space="preserve">
          <source>a blank line separates the &lt;code&gt;&amp;lt;/header&amp;gt;&lt;/code&gt; tag from the markdown content</source>
          <target state="translated">빈 줄은 &lt;code&gt;&amp;lt;/header&amp;gt;&lt;/code&gt; 태그를 마크 다운 내용과 구분합니다.</target>
        </trans-unit>
        <trans-unit id="792ddc6d2cd564a55a9258f06c988eeaeb89e581" translate="yes" xml:space="preserve">
          <source>a collection of Angular modules to include in the configuration.</source>
          <target state="translated">구성에 포함 할 Angular 모듈 모음.</target>
        </trans-unit>
        <trans-unit id="d96e6a13a8e73828f54529bbe84ddc48239792db" translate="yes" xml:space="preserve">
          <source>a collection of the names of AngularJS modules to include in the configuration.</source>
          <target state="translated">구성에 포함 할 AngularJS 모듈의 이름 모음.</target>
        </trans-unit>
        <trans-unit id="af28a6d536ce9ed6cc4395862a4615ec66b4a3fa" translate="yes" xml:space="preserve">
          <source>a link that downloads that sample.</source>
          <target state="translated">해당 샘플을 다운로드하는 링크</target>
        </trans-unit>
        <trans-unit id="56abb829e8921279762bb2822d03d2991bb2db93" translate="yes" xml:space="preserve">
          <source>a link to the Stackblitz defined by the default &lt;code&gt;stackblitz.json&lt;/code&gt; file located in the code sample folder with the same name as the guide page.</source>
          <target state="translated">가이드 페이지와 이름이 같은 코드 샘플 폴더 에있는 기본 &lt;code&gt;stackblitz.json&lt;/code&gt; 파일로 정의 된 Stackblitz에 대한 링크</target>
        </trans-unit>
        <trans-unit id="717b98f3de9faa9344ac0571bd0724b92610f35e" translate="yes" xml:space="preserve">
          <source>a reference to the name input box to inspect and set it.</source>
          <target state="translated">이름 입력 상자를 참조하여 검사하고 설정합니다.</target>
        </trans-unit>
        <trans-unit id="9a0c7871fd08512bb1050d80ca092b16f04b67d2" translate="yes" xml:space="preserve">
          <source>a reference to the title text.</source>
          <target state="translated">제목 텍스트에 대한 참조</target>
        </trans-unit>
        <trans-unit id="9334edd62ead6e8adfc4df97a1c327db878b242e" translate="yes" xml:space="preserve">
          <source>a string to be internationalized.</source>
          <target state="translated">국제화 할 문자열</target>
        </trans-unit>
        <trans-unit id="3abe5cca7bf561de98582d9fe2fb2d665bfd1ba5" translate="yes" xml:space="preserve">
          <source>a system-wide unique &lt;code&gt;id&lt;/code&gt;.</source>
          <target state="translated">시스템 전체의 고유 &lt;code&gt;id&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2667a406dc78e1e704dcc8bee1dc5151fcd8f893" translate="yes" xml:space="preserve">
          <source>a, aa &amp;amp; aaa</source>
          <target state="translated">a, aa &amp;amp; aaa</target>
        </trans-unit>
        <trans-unit id="38f736753c3b3f1a206b32e99462c79afac7a284" translate="yes" xml:space="preserve">
          <source>a/p</source>
          <target state="translated">a/p</target>
        </trans-unit>
        <trans-unit id="70c881d4a26984ddce795f6f71817c9cf4480e79" translate="yes" xml:space="preserve">
          <source>aaaa</source>
          <target state="translated">aaaa</target>
        </trans-unit>
        <trans-unit id="df51e37c269aa94d38f93e537bf6e2020b21406c" translate="yes" xml:space="preserve">
          <source>aaaaa</source>
          <target state="translated">aaaaa</target>
        </trans-unit>
        <trans-unit id="d7fdc791db8b46d5e09a39a6610a223d3110075d" translate="yes" xml:space="preserve">
          <source>about the &lt;a href=&quot;structural-directives#microsyntax&quot;&gt;&lt;em&gt;microsyntax&lt;/em&gt;&lt;/a&gt; that expands into a &lt;a href=&quot;structural-directives#template&quot;&gt;&lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">[정보 &lt;a href=&quot;structural-directives#microsyntax&quot;&gt;&lt;em&gt;microsyntax&lt;/em&gt;&lt;/a&gt; 하는으로 확장 &lt;a href=&quot;structural-directives#template&quot;&gt; &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="ee0286874aed7f85170aca71fd1330f64c84f6af" translate="yes" xml:space="preserve">
          <source>add &lt;code&gt;src/app/app.worker.ts&lt;/code&gt; with scaffolded code to receive messages:</source>
          <target state="translated">메시지를 받기 위해 스캐 폴딩 된 코드와 함께 &lt;code&gt;src/app/app.worker.ts&lt;/code&gt; 를 추가하십시오 :</target>
        </trans-unit>
        <trans-unit id="02f2201bbab649c58224bbb4dc7680ce54b0a2a9" translate="yes" xml:space="preserve">
          <source>add scaffolded code to &lt;code&gt;src/app/app.component.ts&lt;/code&gt; to use the worker:</source>
          <target state="translated">작업자를 사용하기 위해 스캐 폴딩 된 코드를 &lt;code&gt;src/app/app.component.ts&lt;/code&gt; 에 추가하십시오 :</target>
        </trans-unit>
        <trans-unit id="734abd5d6da02581194bea4c2db1dd267373d931" translate="yes" xml:space="preserve">
          <source>adding a &lt;code&gt;MessagesComponent&lt;/code&gt; that displays app messages at the bottom of the screen</source>
          <target state="translated">화면 하단에 앱 &lt;code&gt;MessagesComponent&lt;/code&gt; 를 표시 하는 MessagesComponent 추가</target>
        </trans-unit>
        <trans-unit id="f49228cf1b44ff91371451fca10366f2403cd2d5" translate="yes" xml:space="preserve">
          <source>ahead-of-time (AOT) compilation</source>
          <target state="translated">AOT (미리보기) 컴파일</target>
        </trans-unit>
        <trans-unit id="20c2ff0ee7e25c78087be9ecd4a0ec98e4961685" translate="yes" xml:space="preserve">
          <source>am, pm, midnight, noon, morning, afternoon, evening, night</source>
          <target state="translated">오전, 오후, 자정, 정오, 아침, 오후, 저녁, 밤</target>
        </trans-unit>
        <trans-unit id="258740dd5704662c5eb20ef4e022ed3835ba5376" translate="yes" xml:space="preserve">
          <source>am/pm or AM/PM</source>
          <target state="translated">오전 / 오후 또는 오전 / 오후</target>
        </trans-unit>
        <trans-unit id="4613c8a5ddad387ceb95e34eeb3629756d803f33" translate="yes" xml:space="preserve">
          <source>an &lt;code&gt;&lt;a href=&quot;../../core/injectiontoken&quot;&gt;InjectionToken&lt;/a&gt;&lt;/code&gt; that identifies a service provided from Angular.</source>
          <target state="translated">Angular에서 제공하는 서비스를 식별 하는 &lt;code&gt;&lt;a href=&quot;../../core/injectiontoken&quot;&gt;InjectionToken&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4195a4fd0ab22e9f7f28a0578d3b916cdfacae2e" translate="yes" xml:space="preserve">
          <source>an object that indicates the text that should be displayed for different values of the provided &lt;code&gt;value&lt;/code&gt;.</source>
          <target state="translated">제공된 다른 값의 표시해야 할 텍스트를 나타내는 객체 &lt;code&gt;value&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="058bfd198d0d515c17d02b04736ef140cbcfb96d" translate="yes" xml:space="preserve">
          <source>an object that mimics the ICU format, see &lt;a href=&quot;http://userguide.icu-project.org/formatparse/messages&quot;&gt;http://userguide.icu-project.org/formatparse/messages&lt;/a&gt;.</source>
          <target state="translated">ICU 형식을 모방하는 객체는 &lt;a href=&quot;http://userguide.icu-project.org/formatparse/messages&quot;&gt;http://userguide.icu-project.org/formatparse/messages를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="06f997c71355dfe0d40c1299ebc61333b8ce980c" translate="yes" xml:space="preserve">
          <source>and component reuse</source>
          <target state="translated">구성 요소 재사용</target>
        </trans-unit>
        <trans-unit id="4ec4eb2dc45819c4773e7a1f334b37b106cf1f6c" translate="yes" xml:space="preserve">
          <source>and that we have included this in our upgrade app &lt;code&gt;&lt;a href=&quot;../../core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">업그레이드 앱 &lt;code&gt;&lt;a href=&quot;../../core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 에 포함 시켰 습니다</target>
        </trans-unit>
        <trans-unit id="a8de46a78779f54ee657c8327b407f1eac015758" translate="yes" xml:space="preserve">
          <source>animate</source>
          <target state="translated">animate</target>
        </trans-unit>
        <trans-unit id="ce9ef307bbb975da50a4ed4ec4093bc02f3fc1d4" translate="yes" xml:space="preserve">
          <source>animateChild</source>
          <target state="translated">animateChild</target>
        </trans-unit>
        <trans-unit id="a6b8b600c27ce95ddcf867cfc503564c89fe816a" translate="yes" xml:space="preserve">
          <source>animation</source>
          <target state="translated">animation</target>
        </trans-unit>
        <trans-unit id="2600a0d627b47b76c6692fa9e794c8671c2ccdc2" translate="yes" xml:space="preserve">
          <source>animations</source>
          <target state="translated">animations</target>
        </trans-unit>
        <trans-unit id="2e76f544229901c5a942849ee61ac86bda6e5609" translate="yes" xml:space="preserve">
          <source>annotation</source>
          <target state="translated">annotation</target>
        </trans-unit>
        <trans-unit id="b17d80c4a4d519330c5ea8c72df2afacdfcf5ba4" translate="yes" xml:space="preserve">
          <source>ante meridiem/post meridiem</source>
          <target state="translated">앤티 메리 디움 / 포스트 메리 디엠</target>
        </trans-unit>
        <trans-unit id="c979aa22bccb48838c1d5be40f276f1f6627e457" translate="yes" xml:space="preserve">
          <source>any AngularJS modules that the upgrade module should depend upon</source>
          <target state="translated">업그레이드 모듈이 의존해야하는 AngularJS 모듈</target>
        </trans-unit>
        <trans-unit id="b375d6e0a5ac835fc6013dedd792cb5a74d5d15c" translate="yes" xml:space="preserve">
          <source>app-routing.module.ts</source>
          <target state="translated">app-routing.module.ts</target>
        </trans-unit>
        <trans-unit id="a773c6167188af695b33c511f56cd4a1fcb6f6aa" translate="yes" xml:space="preserve">
          <source>app-shell</source>
          <target state="translated">app-shell</target>
        </trans-unit>
        <trans-unit id="a531b2272149fca085dfd0cf4f8da2f5de520a33" translate="yes" xml:space="preserve">
          <source>app.component.ts</source>
          <target state="translated">app.component.ts</target>
        </trans-unit>
        <trans-unit id="7f07bea6f014a80740d8133ff4b5cdad1822dfdf" translate="yes" xml:space="preserve">
          <source>app.e2e-spec.ts</source>
          <target state="translated">app.e2e-spec.ts</target>
        </trans-unit>
        <trans-unit id="0b12988707c80a7246f28df5b2426fb8f9a0a25d" translate="yes" xml:space="preserve">
          <source>app.module.ts</source>
          <target state="translated">app.module.ts</target>
        </trans-unit>
        <trans-unit id="04c285392b9f8d21a544fccd4a714c1da2f7c1a9" translate="yes" xml:space="preserve">
          <source>asNativeElements</source>
          <target state="translated">asNativeElements</target>
        </trans-unit>
        <trans-unit id="66bcee95a45645296a3f1352fc6d89d060c500bd" translate="yes" xml:space="preserve">
          <source>assertPlatform</source>
          <target state="translated">assertPlatform</target>
        </trans-unit>
        <trans-unit id="b7e04b33fdd186ab6bd2deace04ea6b551b9bd4a" translate="yes" xml:space="preserve">
          <source>async</source>
          <target state="translated">async</target>
        </trans-unit>
        <trans-unit id="d2050a06561ab84d91d57e0e59eec52b2bf59fa2" translate="yes" xml:space="preserve">
          <source>attribute directives</source>
          <target state="translated">속성 지시문</target>
        </trans-unit>
        <trans-unit id="cc7dd7e4d351ad1cf2d2858cd707caa2d7e6095e" translate="yes" xml:space="preserve">
          <source>b, bb &amp;amp; bbb</source>
          <target state="translated">B, BB &amp;amp; BBB</target>
        </trans-unit>
        <trans-unit id="2ed8e7de1b8db564a5d623cff367097cbe23f9b8" translate="yes" xml:space="preserve">
          <source>back to top</source>
          <target state="translated">맨 위로</target>
        </trans-unit>
        <trans-unit id="01bada152405b958af7e5fe4c072d1cee851aa3b" translate="yes" xml:space="preserve">
          <source>baseline</source>
          <target state="translated">baseline</target>
        </trans-unit>
        <trans-unit id="8aed1322e5450badb078e1fb60a817a1df25a2ca" translate="yes" xml:space="preserve">
          <source>bbbb</source>
          <target state="translated">bbbb</target>
        </trans-unit>
        <trans-unit id="68413fb4ed973e62a1f45819569915d3adf53e53" translate="yes" xml:space="preserve">
          <source>bbbbb</source>
          <target state="translated">bbbbb</target>
        </trans-unit>
        <trans-unit id="c02ceb78ff4863ee1a75d232c4f53af56b182ec9" translate="yes" xml:space="preserve">
          <source>becomes:</source>
          <target state="translated">becomes:</target>
        </trans-unit>
        <trans-unit id="4a9fb8d92972382b39b524ce7f8cdc6213d95500" translate="yes" xml:space="preserve">
          <source>binding</source>
          <target state="translated">binding</target>
        </trans-unit>
        <trans-unit id="3c71cc99d2fc1c12a3d3e1b27e448ca612a89a1d" translate="yes" xml:space="preserve">
          <source>bootstrap</source>
          <target state="translated">bootstrap</target>
        </trans-unit>
        <trans-unit id="db08c3f4c2c0f3c87a17963927b3471f0843dab6" translate="yes" xml:space="preserve">
          <source>bootstrapWorkerUi</source>
          <target state="translated">bootstrapWorkerUi</target>
        </trans-unit>
        <trans-unit id="ef98362b8a6b0c8cd804b0d227aa1ffeaba89786" translate="yes" xml:space="preserve">
          <source>browser</source>
          <target state="translated">browser</target>
        </trans-unit>
        <trans-unit id="f52318a05e518a5596012af2ed38de68ac26a468" translate="yes" xml:space="preserve">
          <source>builder</source>
          <target state="translated">builder</target>
        </trans-unit>
        <trans-unit id="3e09a4bf8883f7fcd5582f6a41ac5fe1fc20482a" translate="yes" xml:space="preserve">
          <source>call the base class from the constructor, passing</source>
          <target state="translated">생성자에서 기본 클래스를 호출하여</target>
        </trans-unit>
        <trans-unit id="24d9738ba0c0eb872af837d81f7e9d57c80ef94a" translate="yes" xml:space="preserve">
          <source>camelCase : Symbols, properties, methods, pipe names, non-component directive selectors, constants. Standard or lower camel case uses lowercase on the first letter of the item. For example, &quot;selectedHero&quot;.</source>
          <target state="translated">camelCase : 기호, 속성, 메소드, 파이프 이름, 비 컴포넌트 지시자 선택기, 상수 표준 또는 소문자 낙타 케이스는 항목의 첫 글자에 소문자를 사용합니다. 예를 들어 &quot;selectedHero&quot;입니다.</target>
        </trans-unit>
        <trans-unit id="bd35b2f872f1484533f5dce355a6ac69215584c5" translate="yes" xml:space="preserve">
          <source>case types</source>
          <target state="translated">케이스 유형</target>
        </trans-unit>
        <trans-unit id="78173d5707fa4e8183f4afcc2b42c8cf7ace1068" translate="yes" xml:space="preserve">
          <source>class decorator</source>
          <target state="translated">클래스 데코레이터</target>
        </trans-unit>
        <trans-unit id="37ac4c7306b49aa3eb07fd6152961c74e13625fb" translate="yes" xml:space="preserve">
          <source>class field decorator</source>
          <target state="translated">클래스 필드 데코레이터</target>
        </trans-unit>
        <trans-unit id="26757f0e091b155710815c63986d5eb15dc0be2c" translate="yes" xml:space="preserve">
          <source>classList</source>
          <target state="translated">classList</target>
        </trans-unit>
        <trans-unit id="2037de437c80264ccbce8a8b61d0bf9f593d2322" translate="yes" xml:space="preserve">
          <source>collection</source>
          <target state="translated">collection</target>
        </trans-unit>
        <trans-unit id="e3f3c969b4a1fc45ab764793a82ecf1edb0cecab" translate="yes" xml:space="preserve">
          <source>command-line interface (CLI)</source>
          <target state="translated">명령 행 인터페이스 (CLI)</target>
        </trans-unit>
        <trans-unit id="94c8c21d08740f5da9eaa38d1f175c592692f0d1" translate="yes" xml:space="preserve">
          <source>common</source>
          <target state="translated">common</target>
        </trans-unit>
        <trans-unit id="335c4c1e2f05b5297a56769d8de75ad9c4874cd3" translate="yes" xml:space="preserve">
          <source>component</source>
          <target state="translated">component</target>
        </trans-unit>
        <trans-unit id="0652e436f42d75f5672a8bd9ae2f398a55115d51" translate="yes" xml:space="preserve">
          <source>configuration</source>
          <target state="translated">configuration</target>
        </trans-unit>
        <trans-unit id="957c09f4575f27ba69d3e8641e5c0eef5983087a" translate="yes" xml:space="preserve">
          <source>configure your project to use Web Workers, if it isn't already.</source>
          <target state="translated">웹 워커를 사용하지 않도록 프로젝트를 구성하십시오 (아직없는 경우).</target>
        </trans-unit>
        <trans-unit id="38bd340c3898f58c0ab1f86902b77087428a3a5f" translate="yes" xml:space="preserve">
          <source>confirmation</source>
          <target state="translated">confirmation</target>
        </trans-unit>
        <trans-unit id="93a6c19249d308ae0d84b5cab41329a95c74cfec" translate="yes" xml:space="preserve">
          <source>confirmation (&quot;yes&quot;=&lt;code&gt;true&lt;/code&gt;, &quot;no&quot;=&lt;code&gt;false&lt;/code&gt;)</source>
          <target state="translated">확인 ( &quot;yes&quot;= &lt;code&gt;true&lt;/code&gt; , &quot;no&quot;= &lt;code&gt;false&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="8a0a17f4746c2bceba8a683cbc80705301c043d9" translate="yes" xml:space="preserve">
          <source>containing the new value.</source>
          <target state="translated">새로운 가치를 담고 있습니다.</target>
        </trans-unit>
        <trans-unit id="1de60e253c35dd4fb2152e54f4e9615a0853b7a7" translate="yes" xml:space="preserve">
          <source>contains information about the Component that is being downgraded:</source>
          <target state="translated">다운 그레이드되는 구성 요소에 대한 정보를 포함합니다.</target>
        </trans-unit>
        <trans-unit id="a80aea77037a27e710633f6982fd1ae71f09a1e8" translate="yes" xml:space="preserve">
          <source>convertToParamMap</source>
          <target state="translated">convertToParamMap</target>
        </trans-unit>
        <trans-unit id="94a0426e8d3203da5468ccf0c624f93cb37601e2" translate="yes" xml:space="preserve">
          <source>core</source>
          <target state="translated">core</target>
        </trans-unit>
        <trans-unit id="93e88f6f0496ca29503f649dc3f0c6b1e520cad4" translate="yes" xml:space="preserve">
          <source>createAngularJSTestingModule</source>
          <target state="translated">createAngularJSTestingModule</target>
        </trans-unit>
        <trans-unit id="e28354df498a6ef00ec0ff2ebb2c2123b672dd85" translate="yes" xml:space="preserve">
          <source>createAngularTestingModule</source>
          <target state="translated">createAngularTestingModule</target>
        </trans-unit>
        <trans-unit id="ce41a54003246632f134a987f1c3f12b2f84940c" translate="yes" xml:space="preserve">
          <source>createCustomElement</source>
          <target state="translated">createCustomElement</target>
        </trans-unit>
        <trans-unit id="3ce6164f18da5985c067a30765f39211c3750526" translate="yes" xml:space="preserve">
          <source>createPlatform</source>
          <target state="translated">createPlatform</target>
        </trans-unit>
        <trans-unit id="9b0b0d3423e2caec8265be68f5d9db85e0a52689" translate="yes" xml:space="preserve">
          <source>createPlatformFactory</source>
          <target state="translated">createPlatformFactory</target>
        </trans-unit>
        <trans-unit id="3552a8df25b821ccd3f64b30c3aeca23e43a0768" translate="yes" xml:space="preserve">
          <source>creating an injectable, app-wide &lt;code&gt;MessageService&lt;/code&gt; for sending messages to be displayed</source>
          <target state="translated">표시 할 메시지를 보내기위한 주사 가능한 앱 전체 &lt;code&gt;MessageService&lt;/code&gt; 만들기</target>
        </trans-unit>
        <trans-unit id="99998e3643ac6a6441e16594668e066cf26f61b1" translate="yes" xml:space="preserve">
          <source>credit.service.ts</source>
          <target state="translated">credit.service.ts</target>
        </trans-unit>
        <trans-unit id="001517ee5d3d0c7f4481ec2cd77c6aefd2fa802e" translate="yes" xml:space="preserve">
          <source>currency</source>
          <target state="translated">currency</target>
        </trans-unit>
        <trans-unit id="a8480e7124725cbdfde85e3fde8145bf2d04cefc" translate="yes" xml:space="preserve">
          <source>custom element</source>
          <target state="translated">맞춤 요소</target>
        </trans-unit>
        <trans-unit id="f68a790f4bd530c61ec445b1d0ba7a228eff5245" translate="yes" xml:space="preserve">
          <source>customize the build steps</source>
          <target state="translated">빌드 단계 사용자 정의</target>
        </trans-unit>
        <trans-unit id="3c363836cf4e16666669a25da280a1865c2d2874" translate="yes" xml:space="preserve">
          <source>d</source>
          <target state="translated">d</target>
        </trans-unit>
        <trans-unit id="12d64184a8c3855405db6807056769ccdd450451" translate="yes" xml:space="preserve">
          <source>d (3)</source>
          <target state="translated">d (3)</target>
        </trans-unit>
        <trans-unit id="81a0942f3fd4769a8bcc9654de1bdfdc1bbb5795" translate="yes" xml:space="preserve">
          <source>dash-case (or &quot;kebab-case&quot;): Descriptive part of file names, component selectors. For example, &quot;app-hero-list&quot;.</source>
          <target state="translated">대소 문자 (또는 &quot;kebab-case&quot;) : 파일 이름의 설명적인 부분, 구성 요소 선택기. 예를 들어 &quot;app-hero-list&quot;입니다.</target>
        </trans-unit>
        <trans-unit id="f0f39729c8bff81fbca3d3298fd183a2023d14c7" translate="yes" xml:space="preserve">
          <source>data binding</source>
          <target state="translated">데이터 바인딩</target>
        </trans-unit>
        <trans-unit id="e927d0677c77241b707442314346326278051dd6" translate="yes" xml:space="preserve">
          <source>date</source>
          <target state="translated">date</target>
        </trans-unit>
        <trans-unit id="a2620cbc10f5198dd03e3f5a1569eb5dcf9a6a87" translate="yes" xml:space="preserve">
          <source>day</source>
          <target state="translated">day</target>
        </trans-unit>
        <trans-unit id="388ad1c312a488ee9e12998fe097f2258fa8d5ee" translate="yes" xml:space="preserve">
          <source>dd</source>
          <target state="translated">dd</target>
        </trans-unit>
        <trans-unit id="25113f74795fc59942bbc1d9bf4ff161da798430" translate="yes" xml:space="preserve">
          <source>dd (03)</source>
          <target state="translated">dd (03)</target>
        </trans-unit>
        <trans-unit id="d4faee6fc8e32453adb703b756acafa5cfae01c0" translate="yes" xml:space="preserve">
          <source>declarable</source>
          <target state="translated">declarable</target>
        </trans-unit>
        <trans-unit id="f6e8bc52b9d7869a3703cc3097a19b111ab35301" translate="yes" xml:space="preserve">
          <source>decorator | decoration</source>
          <target state="translated">데코레이터 | 장식</target>
        </trans-unit>
        <trans-unit id="673a186d661f24879aeda87ccd5374b40f6c21ca" translate="yes" xml:space="preserve">
          <source>default/&lt;code&gt;''&lt;/code&gt;: use the queryParams only</source>
          <target state="translated">default / &lt;code&gt;''&lt;/code&gt; : queryParams 만 사용</target>
        </trans-unit>
        <trans-unit id="8ea4ffdb0deede8ee694f4b4d9c505a1d4d0747b" translate="yes" xml:space="preserve">
          <source>defineInjectable</source>
          <target state="translated">defineInjectable</target>
        </trans-unit>
        <trans-unit id="307a7cd459c193aa7f7cd579ff5f7491f9c0109f" translate="yes" xml:space="preserve">
          <source>dependency injection (DI)</source>
          <target state="translated">의존성 주입 (DI)</target>
        </trans-unit>
        <trans-unit id="5c3682fc7a4920b55c3585a44e4d06c1a4110f0e" translate="yes" xml:space="preserve">
          <source>deprecated from v8.0.0 use Type</source>
          <target state="translated">v8.0.0에서 사용되지 않음 사용 유형</target>
        </trans-unit>
        <trans-unit id="7ada71eda18467c06cffdf19ac0d3c2176b81385" translate="yes" xml:space="preserve">
          <source>derive from &lt;code&gt;&lt;a href=&quot;upgradecomponent&quot;&gt;UpgradeComponent&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;upgradecomponent&quot;&gt;UpgradeComponent&lt;/a&gt;&lt;/code&gt; 에서 파생</target>
        </trans-unit>
        <trans-unit id="26015470b9cad4657713e2ad0af10a7f96dafc3a" translate="yes" xml:space="preserve">
          <source>destroyPlatform</source>
          <target state="translated">destroyPlatform</target>
        </trans-unit>
        <trans-unit id="93749784962f3a738c721e86e9446fbf7909441f" translate="yes" xml:space="preserve">
          <source>dev-server</source>
          <target state="translated">dev-server</target>
        </trans-unit>
        <trans-unit id="3d981bf920ab98c455a9796d062745b9d6b5cbfb" translate="yes" xml:space="preserve">
          <source>directive</source>
          <target state="translated">directive</target>
        </trans-unit>
        <trans-unit id="a4a7df5aa4945625dd9a718fa8a24e456fa52106" translate="yes" xml:space="preserve">
          <source>disableDebugTools</source>
          <target state="translated">disableDebugTools</target>
        </trans-unit>
        <trans-unit id="07596f183f5e91b1778d5e47b2752b8d42aa763d" translate="yes" xml:space="preserve">
          <source>disabled</source>
          <target state="translated">disabled</target>
        </trans-unit>
        <trans-unit id="3175c47b6bd91e50aa556bdc914d1d13ca296dca" translate="yes" xml:space="preserve">
          <source>discardPeriodicTasks</source>
          <target state="translated">discardPeriodicTasks</target>
        </trans-unit>
        <trans-unit id="9b22883de5b81b19b6bc37b48507b99fd210c35e" translate="yes" xml:space="preserve">
          <source>displaying a message when &lt;code&gt;HeroService&lt;/code&gt; fetches heroes successfully</source>
          <target state="translated">&lt;code&gt;HeroService&lt;/code&gt; 가 영웅을 가져올 때 메시지 표시</target>
        </trans-unit>
        <trans-unit id="02ad78b32d91c9f92c08fff62a2088e02001d863" translate="yes" xml:space="preserve">
          <source>domain-specific language (DSL)</source>
          <target state="translated">도메인 별 언어 (DSL)</target>
        </trans-unit>
        <trans-unit id="671b726c7780419df3ac115a30f6025a409e2143" translate="yes" xml:space="preserve">
          <source>downgradeComponent</source>
          <target state="translated">downgradeComponent</target>
        </trans-unit>
        <trans-unit id="5dbec4732dc3bbc923ccd94c9adf9864d20daafb" translate="yes" xml:space="preserve">
          <source>downgradeInjectable</source>
          <target state="translated">downgradeInjectable</target>
        </trans-unit>
        <trans-unit id="422962fa50c9a484bb656148e75a4f957b5a86c0" translate="yes" xml:space="preserve">
          <source>downgradeModule</source>
          <target state="translated">downgradeModule</target>
        </trans-unit>
        <trans-unit id="bee33c4505fae51d91d9cf75e9777ccdd83a9e18" translate="yes" xml:space="preserve">
          <source>dynamic component loading</source>
          <target state="translated">동적 구성 요소 로딩</target>
        </trans-unit>
        <trans-unit id="eb9ab97eccb42224074474b090caec52facf55f0" translate="yes" xml:space="preserve">
          <source>eager loading</source>
          <target state="translated">열망하는 로딩</target>
        </trans-unit>
        <trans-unit id="dece05484839df110745b0a800297c33cc078287" translate="yes" xml:space="preserve">
          <source>element</source>
          <target state="translated">element</target>
        </trans-unit>
        <trans-unit id="6851b3982dec35e29a2f2f6d0b028f8311aa1a47" translate="yes" xml:space="preserve">
          <source>elements</source>
          <target state="translated">elements</target>
        </trans-unit>
        <trans-unit id="b5bae9f5a5fbd0b84ebc53f553d2369932783e83" translate="yes" xml:space="preserve">
          <source>elements in the component.</source>
          <target state="translated">구성 요소의 요소</target>
        </trans-unit>
        <trans-unit id="5b061ca06d5d677b33a5256cf4bd59260396b0f5" translate="yes" xml:space="preserve">
          <source>ellipsis.pipe.spec.ts</source>
          <target state="translated">ellipsis.pipe.spec.ts</target>
        </trans-unit>
        <trans-unit id="1ef7b5a959f0b9bdc1044560318426d33c99483f" translate="yes" xml:space="preserve">
          <source>ellipsis.pipe.ts</source>
          <target state="translated">ellipsis.pipe.ts</target>
        </trans-unit>
        <trans-unit id="e093745f97e94c8b7006178dedc0b2f94ae11ba9" translate="yes" xml:space="preserve">
          <source>enableDebugTools</source>
          <target state="translated">enableDebugTools</target>
        </trans-unit>
        <trans-unit id="8c3dd1ca824127984d5e493c27a9c9f8f15c9138" translate="yes" xml:space="preserve">
          <source>enableProdMode</source>
          <target state="translated">enableProdMode</target>
        </trans-unit>
        <trans-unit id="3ea3f9802accf8817bacd6f3df46a73b93ccddec" translate="yes" xml:space="preserve">
          <source>enabled</source>
          <target state="translated">enabled</target>
        </trans-unit>
        <trans-unit id="ad86384dc374b06a99dc1a01c135124c6319508c" translate="yes" xml:space="preserve">
          <source>entry point</source>
          <target state="translated">진입 지점</target>
        </trans-unit>
        <trans-unit id="281f09155c96bf1277ed70fab0b043322f873f41" translate="yes" xml:space="preserve">
          <source>era</source>
          <target state="translated">era</target>
        </trans-unit>
        <trans-unit id="11f9578d05e6f7bb58a3cdd00107e9f4e3882671" translate="yes" xml:space="preserve">
          <source>error</source>
          <target state="translated">error</target>
        </trans-unit>
        <trans-unit id="2bddb453f91528c5bca5ac42f85c2002b5102cbf" translate="yes" xml:space="preserve">
          <source>es2015</source>
          <target state="translated">es2015</target>
        </trans-unit>
        <trans-unit id="04fd367a754d12acaf37607d62e169a42efc8e2f" translate="yes" xml:space="preserve">
          <source>es5</source>
          <target state="translated">es5</target>
        </trans-unit>
        <trans-unit id="0c5734c89be5dd88ccbd4ad099535a476702e590" translate="yes" xml:space="preserve">
          <source>extract-i18n</source>
          <target state="translated">extract-i18n</target>
        </trans-unit>
        <trans-unit id="56bea9aaf0420605352fd1c5fe3fd78a2ce22bbf" translate="yes" xml:space="preserve">
          <source>fakeAsync</source>
          <target state="translated">fakeAsync</target>
        </trans-unit>
        <trans-unit id="8def4372cd160453bb0cf48b1211fe06f9e74f9b" translate="yes" xml:space="preserve">
          <source>few</source>
          <target state="translated">few</target>
        </trans-unit>
        <trans-unit id="3c5d85670ede60f3829428073b57120df70ec0de" translate="yes" xml:space="preserve">
          <source>fil</source>
          <target state="translated">fil</target>
        </trans-unit>
        <trans-unit id="4bb4ca75941b7bbc5bc6a12be44b22fc9c8d234e" translate="yes" xml:space="preserve">
          <source>filter</source>
          <target state="translated">filter</target>
        </trans-unit>
        <trans-unit id="78853b9ad227d201230c0f8eb676b2abb6e0e3f3" translate="yes" xml:space="preserve">
          <source>filter-text.service.spec.ts</source>
          <target state="translated">filter-text.service.spec.ts</target>
        </trans-unit>
        <trans-unit id="e4706359fc4117d0efea7adb012984601954e2af" translate="yes" xml:space="preserve">
          <source>flush</source>
          <target state="translated">flush</target>
        </trans-unit>
        <trans-unit id="4858668c63c3b059468b588d1d8c7f12f5b6baa5" translate="yes" xml:space="preserve">
          <source>flushMicrotasks</source>
          <target state="translated">flushMicrotasks</target>
        </trans-unit>
        <trans-unit id="37e54ead4228c22806f656b1c2e23169d42352ff" translate="yes" xml:space="preserve">
          <source>form control</source>
          <target state="translated">양식 제어</target>
        </trans-unit>
        <trans-unit id="a05c411acec705f7ecd7fd6491dde06efcfcfddc" translate="yes" xml:space="preserve">
          <source>form model</source>
          <target state="translated">양식 모델</target>
        </trans-unit>
        <trans-unit id="c9c7dfcc4664ab3fbce1c441b7daa7cc2f8be117" translate="yes" xml:space="preserve">
          <source>form validation</source>
          <target state="translated">양식 검증</target>
        </trans-unit>
        <trans-unit id="c201705052683444e0226cc5fc7ee0f420a5c008" translate="yes" xml:space="preserve">
          <source>formatCurrency</source>
          <target state="translated">formatCurrency</target>
        </trans-unit>
        <trans-unit id="29c2bc729073d902d5893a1c6e34388f5cf78a38" translate="yes" xml:space="preserve">
          <source>formatDate</source>
          <target state="translated">formatDate</target>
        </trans-unit>
        <trans-unit id="f063264e5e86c78948efda26dac49a93da79190a" translate="yes" xml:space="preserve">
          <source>formatNumber</source>
          <target state="translated">formatNumber</target>
        </trans-unit>
        <trans-unit id="f1188a02f03c6e52b36c39d6cbfc0578df9939e4" translate="yes" xml:space="preserve">
          <source>formatPercent</source>
          <target state="translated">formatPercent</target>
        </trans-unit>
        <trans-unit id="453ca94c1e10b3851ca2d2b9fe5902abb50b2db6" translate="yes" xml:space="preserve">
          <source>forms</source>
          <target state="translated">forms</target>
        </trans-unit>
        <trans-unit id="2a9c677d9e1aaf4332df5b5937be5f58393baadf" translate="yes" xml:space="preserve">
          <source>forwardRef</source>
          <target state="translated">forwardRef</target>
        </trans-unit>
        <trans-unit id="0f2deb5a51e70cab863a8d4379f887f907d32efb" translate="yes" xml:space="preserve">
          <source>getAngularJSGlobal</source>
          <target state="translated">getAngularJSGlobal</target>
        </trans-unit>
        <trans-unit id="2aa046740685d2319b2e2001bb0ca76871c36cc8" translate="yes" xml:space="preserve">
          <source>getAngularLib</source>
          <target state="translated">getAngularLib</target>
        </trans-unit>
        <trans-unit id="a30483b7c09bbcd5382ed5d002143cdfce837492" translate="yes" xml:space="preserve">
          <source>getCurrencySymbol</source>
          <target state="translated">getCurrencySymbol</target>
        </trans-unit>
        <trans-unit id="7425ea4ded639b2834b3698a3c70262e75817348" translate="yes" xml:space="preserve">
          <source>getDebugNode</source>
          <target state="translated">getDebugNode</target>
        </trans-unit>
        <trans-unit id="195507d309c858fe4a19793aab76c5c704029983" translate="yes" xml:space="preserve">
          <source>getLocaleCurrencyName</source>
          <target state="translated">getLocaleCurrencyName</target>
        </trans-unit>
        <trans-unit id="2cacbe04b8668cf34716cae6f4d565fc18ff028f" translate="yes" xml:space="preserve">
          <source>getLocaleCurrencySymbol</source>
          <target state="translated">getLocaleCurrencySymbol</target>
        </trans-unit>
        <trans-unit id="54c29d26832ae09ce62ee31e8426d0f8d7af623b" translate="yes" xml:space="preserve">
          <source>getLocaleDateFormat</source>
          <target state="translated">getLocaleDateFormat</target>
        </trans-unit>
        <trans-unit id="c0e42e493ccae6eeae960ee8bad9ca58591c3b5c" translate="yes" xml:space="preserve">
          <source>getLocaleDateTimeFormat</source>
          <target state="translated">getLocaleDateTimeFormat</target>
        </trans-unit>
        <trans-unit id="cd51096bca4f3b696e55473b3b2d7a8507166ae3" translate="yes" xml:space="preserve">
          <source>getLocaleDayNames</source>
          <target state="translated">getLocaleDayNames</target>
        </trans-unit>
        <trans-unit id="62539c1f506d76a478d822e9ec32b78ea33de08b" translate="yes" xml:space="preserve">
          <source>getLocaleDayPeriods</source>
          <target state="translated">getLocaleDayPeriods</target>
        </trans-unit>
        <trans-unit id="cad22fc8d54da5b1bb1804d7930e06f7978a328d" translate="yes" xml:space="preserve">
          <source>getLocaleEraNames</source>
          <target state="translated">getLocaleEraNames</target>
        </trans-unit>
        <trans-unit id="5cc8c1123676960b2c7e63cdd7917d4eaa1b7313" translate="yes" xml:space="preserve">
          <source>getLocaleExtraDayPeriodRules</source>
          <target state="translated">getLocaleExtraDayPeriodRules</target>
        </trans-unit>
        <trans-unit id="d7b6ab8c5bdd9872ecdaa9c03e665ad1dddfcbdc" translate="yes" xml:space="preserve">
          <source>getLocaleExtraDayPeriods</source>
          <target state="translated">getLocaleExtraDayPeriods</target>
        </trans-unit>
        <trans-unit id="0b5e959af9b8813a14a3eb403a984df156ac888a" translate="yes" xml:space="preserve">
          <source>getLocaleFirstDayOfWeek</source>
          <target state="translated">getLocaleFirstDayOfWeek</target>
        </trans-unit>
        <trans-unit id="15a5f51f72464083edc0fc114d0229fd73f18b98" translate="yes" xml:space="preserve">
          <source>getLocaleId</source>
          <target state="translated">getLocaleId</target>
        </trans-unit>
        <trans-unit id="17b81c85d5aa1d8822d37663ebb7e122f2b14aa0" translate="yes" xml:space="preserve">
          <source>getLocaleMonthNames</source>
          <target state="translated">getLocaleMonthNames</target>
        </trans-unit>
        <trans-unit id="e6ea87a805eac148999f3385839b9315c9dca3cf" translate="yes" xml:space="preserve">
          <source>getLocaleNumberFormat</source>
          <target state="translated">getLocaleNumberFormat</target>
        </trans-unit>
        <trans-unit id="97b82ac482f39ce16e0ceafe75d2ed0d1197930d" translate="yes" xml:space="preserve">
          <source>getLocaleNumberSymbol</source>
          <target state="translated">getLocaleNumberSymbol</target>
        </trans-unit>
        <trans-unit id="2a57a7132a8815027c8420c0682a9cf6d7a44304" translate="yes" xml:space="preserve">
          <source>getLocalePluralCase</source>
          <target state="translated">getLocalePluralCase</target>
        </trans-unit>
        <trans-unit id="2d5efa7f4e7d044d55781d4873099412af016329" translate="yes" xml:space="preserve">
          <source>getLocaleTimeFormat</source>
          <target state="translated">getLocaleTimeFormat</target>
        </trans-unit>
        <trans-unit id="cb564f6213173cb390e048e3df0ca47fe443e13e" translate="yes" xml:space="preserve">
          <source>getLocaleWeekEndRange</source>
          <target state="translated">getLocaleWeekEndRange</target>
        </trans-unit>
        <trans-unit id="573b9c784ccff77046de4952b9a92834d78c1854" translate="yes" xml:space="preserve">
          <source>getModuleFactory</source>
          <target state="translated">getModuleFactory</target>
        </trans-unit>
        <trans-unit id="e75e130dd554dd9ac5b2ca22c808c6d88b9bad5e" translate="yes" xml:space="preserve">
          <source>getNumberOfCurrencyDigits</source>
          <target state="translated">getNumberOfCurrencyDigits</target>
        </trans-unit>
        <trans-unit id="8be39798163ca2414d10cf691073da0f700302f4" translate="yes" xml:space="preserve">
          <source>getPlatform</source>
          <target state="translated">getPlatform</target>
        </trans-unit>
        <trans-unit id="412738b21562c3e1d99455355e61bd2440b32aba" translate="yes" xml:space="preserve">
          <source>getTestBed</source>
          <target state="translated">getTestBed</target>
        </trans-unit>
        <trans-unit id="64292b1c2b2e13ead8788fc8a2b8edc8c1db4ecd" translate="yes" xml:space="preserve">
          <source>group</source>
          <target state="translated">group</target>
        </trans-unit>
        <trans-unit id="27d5482eebd075de44389774fce28c69f45c8a75" translate="yes" xml:space="preserve">
          <source>h</source>
          <target state="translated">h</target>
        </trans-unit>
        <trans-unit id="e9d97dc587bb666f377577a6522e6524211b6e1c" translate="yes" xml:space="preserve">
          <source>h (1 PM)</source>
          <target state="translated">h (오후 1시)</target>
        </trans-unit>
        <trans-unit id="e95ce4459c31d78457704591b5852841bc3d8d44" translate="yes" xml:space="preserve">
          <source>handle invalid routes with a &lt;code&gt;wildcard&lt;/code&gt; route.</source>
          <target state="translated">&lt;code&gt;wildcard&lt;/code&gt; 경로로 유효하지 않은 경로를 처리 합니다.</target>
        </trans-unit>
        <trans-unit id="30f088ea6673877c2e2c1edbe7513ff90eda9a6f" translate="yes" xml:space="preserve">
          <source>he</source>
          <target state="translated">he</target>
        </trans-unit>
        <trans-unit id="7d3735bc5be4eddcde5f3524982eda7f8e71c0d8" translate="yes" xml:space="preserve">
          <source>hero-data.service.ts</source>
          <target state="translated">hero-data.service.ts</target>
        </trans-unit>
        <trans-unit id="b7d9b280c193df8227c9c35e909c9b1a03052267" translate="yes" xml:space="preserve">
          <source>hero-detail.component.spec.ts</source>
          <target state="translated">hero-detail.component.spec.ts</target>
        </trans-unit>
        <trans-unit id="70ed9f18b24c676795c5e058d251f751442b65af" translate="yes" xml:space="preserve">
          <source>hero-detail.component.ts</source>
          <target state="translated">hero-detail.component.ts</target>
        </trans-unit>
        <trans-unit id="ceb535ba0602757afb10bd5ad021e933d61ef5fb" translate="yes" xml:space="preserve">
          <source>hero-list.component.spec.ts</source>
          <target state="translated">hero-list.component.spec.ts</target>
        </trans-unit>
        <trans-unit id="06d591e25f2075b1467e090002da2fd96913a07d" translate="yes" xml:space="preserve">
          <source>hero-list.component.ts</source>
          <target state="translated">hero-list.component.ts</target>
        </trans-unit>
        <trans-unit id="aa126847596c4dd96ef6e5ef1ca689a26f4ef162" translate="yes" xml:space="preserve">
          <source>hero.service.spec.ts</source>
          <target state="translated">hero.service.spec.ts</target>
        </trans-unit>
        <trans-unit id="534b91802a64af98f23ae4e4fac953102922c4a6" translate="yes" xml:space="preserve">
          <source>heroes-routing.module.ts</source>
          <target state="translated">heroes-routing.module.ts</target>
        </trans-unit>
        <trans-unit id="a0ddc39dae26589c0bda386abc70a19198044352" translate="yes" xml:space="preserve">
          <source>heroes.component.spec.ts</source>
          <target state="translated">heroes.component.spec.ts</target>
        </trans-unit>
        <trans-unit id="cff5c0afdd603b6150c76db1237113d8731c4f2f" translate="yes" xml:space="preserve">
          <source>heroes.component.ts</source>
          <target state="translated">heroes.component.ts</target>
        </trans-unit>
        <trans-unit id="7dfd164966b5ef3e6a32af96d5c74ce54f173d27" translate="yes" xml:space="preserve">
          <source>heroes.e2e-spec.ts</source>
          <target state="translated">heroes.e2e-spec.ts</target>
        </trans-unit>
        <trans-unit id="45901ca786ffaea3a0e4bf2fa83c2f0dc991a378" translate="yes" xml:space="preserve">
          <source>heroes.module.ts</source>
          <target state="translated">heroes.module.ts</target>
        </trans-unit>
        <trans-unit id="d3fc13dc12d8d7a58e7ae87295e93dbaddb5d36b" translate="yes" xml:space="preserve">
          <source>hh</source>
          <target state="translated">hh</target>
        </trans-unit>
        <trans-unit id="1b63f65aaf166ee130ee01867427411637fc2bf4" translate="yes" xml:space="preserve">
          <source>hh (01 PM)</source>
          <target state="translated">hh (오후 1시)</target>
        </trans-unit>
        <trans-unit id="52ab86a87214a453d9f82538264f190854915247" translate="yes" xml:space="preserve">
          <source>hour</source>
          <target state="translated">hour</target>
        </trans-unit>
        <trans-unit id="15cd97c2a1358bcce6adb02fee85927ce1fa2f69" translate="yes" xml:space="preserve">
          <source>hour12</source>
          <target state="translated">hour12</target>
        </trans-unit>
        <trans-unit id="b69a669ab5f2ed15c8a7d19b6f631fca520f532e" translate="yes" xml:space="preserve">
          <source>hour24</source>
          <target state="translated">hour24</target>
        </trans-unit>
        <trans-unit id="2a95e48ee7c034018e6b2cc78e889a99fbd750ea" translate="yes" xml:space="preserve">
          <source>how that works for the &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;NgFor&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/common/ngswitch&quot;&gt;NgSwitch&lt;/a&gt;&lt;/code&gt; built-in directives.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;NgFor&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;../api/common/ngswitch&quot;&gt;NgSwitch&lt;/a&gt;&lt;/code&gt; 내장 지시문에서 작동하는 방식 .</target>
        </trans-unit>
        <trans-unit id="9d20a9c0b7d2590e828f72fa549920d540d77ebb" translate="yes" xml:space="preserve">
          <source>i18n pipes</source>
          <target state="translated">i18n 파이프</target>
        </trans-unit>
        <trans-unit id="6413e837d316aafcf260786cd21a849f88ae3069" translate="yes" xml:space="preserve">
          <source>iOS</source>
          <target state="translated">iOS</target>
        </trans-unit>
        <trans-unit id="87ea5dfc8b8e384d848979496e706390b497e547" translate="yes" xml:space="preserve">
          <source>id</source>
          <target state="translated">id</target>
        </trans-unit>
        <trans-unit id="d702f1851496ff5152be6aa5b118ccb344d292fe" translate="yes" xml:space="preserve">
          <source>if &lt;code&gt;[&lt;a href=&quot;ngpluralcase&quot;&gt;ngPluralCase&lt;/a&gt;]&lt;/code&gt; is set to a value starting with &lt;code&gt;=&lt;/code&gt;, it will only display if the value matches the switch expression exactly,</source>
          <target state="translated">만약 &lt;code&gt;[&lt;a href=&quot;ngpluralcase&quot;&gt;ngPluralCase&lt;/a&gt;]&lt;/code&gt; 로 시작하는 값으로 설정된다 &lt;code&gt;=&lt;/code&gt; 값이 정확히 스위치 표현과 일치하는 경우에만 표시되며,</target>
        </trans-unit>
        <trans-unit id="eebb4040b1568ba95c3e34baf38beb49ee5cedac" translate="yes" xml:space="preserve">
          <source>immutability</source>
          <target state="translated">immutability</target>
        </trans-unit>
        <trans-unit id="af10ef20dd9060bbeead0afbc55381a66af442ef" translate="yes" xml:space="preserve">
          <source>in</source>
          <target state="translated">in</target>
        </trans-unit>
        <trans-unit id="7d2463f90633f954464211ac0098a34816f9b6b8" translate="yes" xml:space="preserve">
          <source>in &lt;code&gt;HeroService&lt;/code&gt; which uses the service to send a message</source>
          <target state="translated">서비스를 사용하여 메시지를 보내는 &lt;code&gt;HeroService&lt;/code&gt; 에서</target>
        </trans-unit>
        <trans-unit id="d3eb495379285739494a8436bfdca77afd08b0c6" translate="yes" xml:space="preserve">
          <source>in &lt;code&gt;MessagesComponent&lt;/code&gt; which displays that message</source>
          <target state="translated">&lt;code&gt;MessagesComponent&lt;/code&gt; 에서 해당 메시지 를 표시합니다</target>
        </trans-unit>
        <trans-unit id="145d7c1d9408927934cf584385bc3605b11e61cc" translate="yes" xml:space="preserve">
          <source>in turn is used by the &lt;a href=&quot;location&quot;&gt;&lt;code&gt;Location&lt;/code&gt;&lt;/a&gt; service which is used directly by the &lt;a href=&quot;../router/router&quot;&gt;&lt;code&gt;Router&lt;/code&gt;&lt;/a&gt; in order to navigate between routes. Since all interactions between &lt;a href=&quot;../router/router&quot;&gt;&lt;code&gt;Router&lt;/code&gt;&lt;/a&gt; / &lt;a href=&quot;location&quot;&gt;&lt;code&gt;Location&lt;/code&gt;&lt;/a&gt; / &lt;a href=&quot;locationstrategy&quot;&gt;&lt;code&gt;LocationStrategy&lt;/code&gt;&lt;/a&gt; and DOM apis flow through the &lt;code&gt;&lt;a href=&quot;platformlocation&quot;&gt;PlatformLocation&lt;/a&gt;&lt;/code&gt; class they are all platform independent.</source>
          <target state="translated">차례로 경로 사이를 탐색하기 위해 &lt;a href=&quot;../router/router&quot;&gt; &lt;code&gt;Router&lt;/code&gt; &lt;/a&gt; 가 직접 사용 하는 &lt;a href=&quot;location&quot;&gt; &lt;code&gt;Location&lt;/code&gt; &lt;/a&gt; 서비스에서 사용됩니다 . &lt;a href=&quot;../router/router&quot;&gt; &lt;code&gt;Router&lt;/code&gt; &lt;/a&gt; / &lt;a href=&quot;location&quot;&gt; &lt;code&gt;Location&lt;/code&gt; &lt;/a&gt; / &lt;a href=&quot;locationstrategy&quot;&gt; &lt;code&gt;LocationStrategy&lt;/code&gt; &lt;/a&gt; 전략과 DOM API 간의 모든 상호 작용 은 &lt;code&gt;&lt;a href=&quot;platformlocation&quot;&gt;PlatformLocation&lt;/a&gt;&lt;/code&gt; 클래스를 통해 흐르기 때문에 모두 플랫폼 독립적입니다.</target>
        </trans-unit>
        <trans-unit id="ff754abae51eedcf06407e33d853c9b7762b32d6" translate="yes" xml:space="preserve">
          <source>increment and decrement operators, &lt;code&gt;++&lt;/code&gt; and &lt;code&gt;--&lt;/code&gt;</source>
          <target state="translated">증가 및 감소 연산자, &lt;code&gt;++&lt;/code&gt; 및 &lt;code&gt;--&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bca86ef1895eeaad0d226c5b88d0ad7152ff284f" translate="yes" xml:space="preserve">
          <source>init-caps.pipe.spec.ts</source>
          <target state="translated">init-caps.pipe.spec.ts</target>
        </trans-unit>
        <trans-unit id="25fa481fa6d394d4667e110acde7aac48cab2f9e" translate="yes" xml:space="preserve">
          <source>init-caps.pipe.ts</source>
          <target state="translated">init-caps.pipe.ts</target>
        </trans-unit>
        <trans-unit id="9701020516dc3a723b89188d856f0666af402e16" translate="yes" xml:space="preserve">
          <source>inject</source>
          <target state="translated">inject</target>
        </trans-unit>
        <trans-unit id="fab424ae1d74e7c1662294c32741e8d0ca3c4203" translate="yes" xml:space="preserve">
          <source>inject is currently a function because of some Traceur limitation the syntax should eventually becomes &lt;code&gt;it('...', @&lt;a href=&quot;../inject&quot;&gt;Inject&lt;/a&gt; (object: AClass, &lt;a href=&quot;async&quot;&gt;async&lt;/a&gt;: AsyncTestCompleter) =&amp;gt; { ... });&lt;/code&gt;</source>
          <target state="translated">분사 일부 Traceur 제한 구문 결국하게해야하기 때문에 현재 함수 &lt;code&gt;it('...', @&lt;a href=&quot;../inject&quot;&gt;Inject&lt;/a&gt; (object: AClass, &lt;a href=&quot;async&quot;&gt;async&lt;/a&gt;: AsyncTestCompleter) =&amp;gt; { ... });&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3a5b6a35bd34ddb6a636489d8944aa4e6c4633d6" translate="yes" xml:space="preserve">
          <source>injectable</source>
          <target state="translated">injectable</target>
        </trans-unit>
        <trans-unit id="bcb2564028b7a79531a78ce4dff28acdfddb1a7d" translate="yes" xml:space="preserve">
          <source>injecting &lt;code&gt;MessageService&lt;/code&gt; into the &lt;code&gt;HeroService&lt;/code&gt;</source>
          <target state="translated">주입 &lt;code&gt;MessageService&lt;/code&gt; 에 &lt;code&gt;HeroService&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="14187a7368125e3da3285ae4a6dab1fa336c307e" translate="yes" xml:space="preserve">
          <source>injector</source>
          <target state="translated">injector</target>
        </trans-unit>
        <trans-unit id="140f86aae51ab9e1cda9b4254fe98a74eb54c1a1" translate="yes" xml:space="preserve">
          <source>input</source>
          <target state="translated">input</target>
        </trans-unit>
        <trans-unit id="6a538b0a95fea945fcb70988d6be3e166eb1b18b" translate="yes" xml:space="preserve">
          <source>input (only valid numbers accepted)</source>
          <target state="translated">입력 (유효한 숫자 만 허용)</target>
        </trans-unit>
        <trans-unit id="9f33a7c798af6fd6abb28049d9c1b3edfa2fd24a" translate="yes" xml:space="preserve">
          <source>internal</source>
          <target state="translated">internal</target>
        </trans-unit>
        <trans-unit id="bd3e3bae86aed5d98047d91fc3620a79cc02a533" translate="yes" xml:space="preserve">
          <source>interpolation</source>
          <target state="translated">interpolation</target>
        </trans-unit>
        <trans-unit id="9a0068341ddff52f6c15c4b76cb304fc1c3aed61" translate="yes" xml:space="preserve">
          <source>is rejected when an error happens.</source>
          <target state="translated">오류가 발생하면 거부됩니다.</target>
        </trans-unit>
        <trans-unit id="b3dfb73abd6ade6f22a3843cd64e10c483c93700" translate="yes" xml:space="preserve">
          <source>isDevMode</source>
          <target state="translated">isDevMode</target>
        </trans-unit>
        <trans-unit id="269058ff602551f929bc87882e8f31c94ad0b9a4" translate="yes" xml:space="preserve">
          <source>isPlatformBrowser</source>
          <target state="translated">isPlatformBrowser</target>
        </trans-unit>
        <trans-unit id="eedb1c215bd26f5de09d200b152e70f40b97daae" translate="yes" xml:space="preserve">
          <source>isPlatformServer</source>
          <target state="translated">isPlatformServer</target>
        </trans-unit>
        <trans-unit id="e4178ea2398ee18c11d8b72dd05f47aa9e2179bd" translate="yes" xml:space="preserve">
          <source>isPlatformWorkerApp</source>
          <target state="translated">isPlatformWorkerApp</target>
        </trans-unit>
        <trans-unit id="40629429bfc61448a836ee71e964e3d426e33868" translate="yes" xml:space="preserve">
          <source>isPlatformWorkerUi</source>
          <target state="translated">isPlatformWorkerUi</target>
        </trans-unit>
        <trans-unit id="5b1148cd5c20f70bdf0512a657f2a088e797f491" translate="yes" xml:space="preserve">
          <source>isStable examples and caveats</source>
          <target state="translated">안정적인 예와 경고</target>
        </trans-unit>
        <trans-unit id="7316c8b2e74870d9d7e9d30bbc28ecf4cdf945ee" translate="yes" xml:space="preserve">
          <source>items</source>
          <target state="translated">items</target>
        </trans-unit>
        <trans-unit id="f851e1596f07e4bf8bb575a8916519c320733992" translate="yes" xml:space="preserve">
          <source>iw</source>
          <target state="translated">iw</target>
        </trans-unit>
        <trans-unit id="5c2dd944dde9e08881bef0894fe7b22a5c9c4b06" translate="yes" xml:space="preserve">
          <source>j</source>
          <target state="translated">j</target>
        </trans-unit>
        <trans-unit id="92defb6308459d8b64755b4735e55787110789b7" translate="yes" xml:space="preserve">
          <source>j (13)</source>
          <target state="translated">j (13)</target>
        </trans-unit>
        <trans-unit id="55aa7e75d4dc88fb05df74b407fdfe857b60591c" translate="yes" xml:space="preserve">
          <source>jasmine.clock with fakeAsync()</source>
          <target state="translated">fakeAsync ()가있는 jasmine.clock</target>
        </trans-unit>
        <trans-unit id="37cf566644fdf33ff696a4a5273f7f6b010f88b2" translate="yes" xml:space="preserve">
          <source>jj (13)</source>
          <target state="translated">jj (13)</target>
        </trans-unit>
        <trans-unit id="05d97e6e9834ccf063c552e404b9ecafc5e4d662" translate="yes" xml:space="preserve">
          <source>json</source>
          <target state="translated">json</target>
        </trans-unit>
        <trans-unit id="be6841ea401fc16942d089a270a6ba798a08574a" translate="yes" xml:space="preserve">
          <source>just-in-time (JIT) compilation</source>
          <target state="translated">JIT (Just-In-Time) 컴파일</target>
        </trans-unit>
        <trans-unit id="512423cb3a4857a38f472862b51e4ab1a1730f06" translate="yes" xml:space="preserve">
          <source>karma</source>
          <target state="translated">karma</target>
        </trans-unit>
        <trans-unit id="dc9bc57f7884fea8a4384cf52c768663a1f4a255" translate="yes" xml:space="preserve">
          <source>keyframes</source>
          <target state="translated">keyframes</target>
        </trans-unit>
        <trans-unit id="1481d0a0ceb16ea4672fed76a0710306eb9f3a33" translate="yes" xml:space="preserve">
          <source>latest</source>
          <target state="translated">latest</target>
        </trans-unit>
        <trans-unit id="2e5c514fa77cd29449a00c1be01213f7a66a9711" translate="yes" xml:space="preserve">
          <source>lazy loading</source>
          <target state="translated">게으른 로딩</target>
        </trans-unit>
        <trans-unit id="472bf0ea19ba086d2155b3adf7770695f76a27e1" translate="yes" xml:space="preserve">
          <source>lib.d.ts</source>
          <target state="translated">lib.d.ts</target>
        </trans-unit>
        <trans-unit id="00299a408dc3498a3cd7bae6db588f3324654d76" translate="yes" xml:space="preserve">
          <source>library</source>
          <target state="translated">library</target>
        </trans-unit>
        <trans-unit id="232afe00e08393bf6915fde8c48bc34ef468bc26" translate="yes" xml:space="preserve">
          <source>lifecycle hook</source>
          <target state="translated">수명주기 후크</target>
        </trans-unit>
        <trans-unit id="8aa3b179b01033866334b54a2bb9e2cd0134ea9c" translate="yes" xml:space="preserve">
          <source>limitTo</source>
          <target state="translated">limitTo</target>
        </trans-unit>
        <trans-unit id="90c50973671d2dc6a4c95cd768a7777cf4ac6e3b" translate="yes" xml:space="preserve">
          <source>link parameters array</source>
          <target state="translated">링크 매개 변수 배열</target>
        </trans-unit>
        <trans-unit id="38b62be4bddaa5661c7d6b8e36e28159314df5c7" translate="yes" xml:space="preserve">
          <source>list</source>
          <target state="translated">list</target>
        </trans-unit>
        <trans-unit id="b00a1a3278c3c4be374f52e729b2b00f82c59d49" translate="yes" xml:space="preserve">
          <source>list (enum members become list selections)</source>
          <target state="translated">목록 (열원이 목록 선택이 됨)</target>
        </trans-unit>
        <trans-unit id="037c7bc5300e71f5de80c36bee13dd486308b1b1" translate="yes" xml:space="preserve">
          <source>live example</source>
          <target state="translated">라이브 예</target>
        </trans-unit>
        <trans-unit id="4bcb3c413062d42dec347293e55eba7593a659e4" translate="yes" xml:space="preserve">
          <source>loadChildren string syntax</source>
          <target state="translated">loadChildren 문자열 구문</target>
        </trans-unit>
        <trans-unit id="302a3f4a0d32fb9b5375f00bb44bf1d12042a0b2" translate="yes" xml:space="preserve">
          <source>local variable name used in the template</source>
          <target state="translated">템플릿에 사용 된 로컬 변수 이름</target>
        </trans-unit>
        <trans-unit id="171f730d39aff083a2f20ae00ac7ff1f0a03179d" translate="yes" xml:space="preserve">
          <source>logger.service.spec.ts</source>
          <target state="translated">logger.service.spec.ts</target>
        </trans-unit>
        <trans-unit id="6bf6cda2b1fcd5eedb77187bc258e56e470956cb" translate="yes" xml:space="preserve">
          <source>logger.service.ts</source>
          <target state="translated">logger.service.ts</target>
        </trans-unit>
        <trans-unit id="171c1e65f95a4d4992c129151e673f844920649a" translate="yes" xml:space="preserve">
          <source>lowercase</source>
          <target state="translated">lowercase</target>
        </trans-unit>
        <trans-unit id="6b0d31c0d563223024da45691584643ac78c96e8" translate="yes" xml:space="preserve">
          <source>m</source>
          <target state="translated">m</target>
        </trans-unit>
        <trans-unit id="398214a1349fb94eb419acb7e061a0208f4cc50f" translate="yes" xml:space="preserve">
          <source>m (5)</source>
          <target state="translated">m (5)</target>
        </trans-unit>
        <trans-unit id="98e364a97dc27da7b9f2f598f7310a8b58462632" translate="yes" xml:space="preserve">
          <source>makeStateKey</source>
          <target state="translated">makeStateKey</target>
        </trans-unit>
        <trans-unit id="f25470201a131e127feab62862c4c9a8b033b071" translate="yes" xml:space="preserve">
          <source>many</source>
          <target state="translated">many</target>
        </trans-unit>
        <trans-unit id="25b300ee83165d300cec2ef12decb11c8214dbe4" translate="yes" xml:space="preserve">
          <source>maximumError</source>
          <target state="translated">maximumError</target>
        </trans-unit>
        <trans-unit id="94a3fa57b8f7b717c36feaeb77dcbfbe5b54ec49" translate="yes" xml:space="preserve">
          <source>maximumWarning</source>
          <target state="translated">maximumWarning</target>
        </trans-unit>
        <trans-unit id="240c4df7250227efd16ebedf6de99c5ab3b51698" translate="yes" xml:space="preserve">
          <source>md</source>
          <target state="translated">md</target>
        </trans-unit>
        <trans-unit id="6f9b9af3cd6e8b8a73c2cdced37fe9f59226e27d" translate="yes" xml:space="preserve">
          <source>message</source>
          <target state="translated">message</target>
        </trans-unit>
        <trans-unit id="3ed3512f1493bfab391d6b868fb4f424b6cdc083" translate="yes" xml:space="preserve">
          <source>microtasks are manually executed by calling &lt;code&gt;&lt;a href=&quot;flushmicrotasks&quot;&gt;flushMicrotasks&lt;/a&gt;()&lt;/code&gt;,</source>
          <target state="translated">microtasks 수동으로 호출하여 실행 &lt;code&gt;&lt;a href=&quot;flushmicrotasks&quot;&gt;flushMicrotasks&lt;/a&gt;()&lt;/code&gt; ,</target>
        </trans-unit>
        <trans-unit id="989e6280ac6115a3f50e827742357505234536e3" translate="yes" xml:space="preserve">
          <source>microtasks are manually executed by calling &lt;code&gt;&lt;a href=&quot;testing/flushmicrotasks&quot;&gt;flushMicrotasks&lt;/a&gt;()&lt;/code&gt;,</source>
          <target state="translated">microtasks 수동으로 호출하여 실행 &lt;code&gt;&lt;a href=&quot;testing/flushmicrotasks&quot;&gt;flushMicrotasks&lt;/a&gt;()&lt;/code&gt; ,</target>
        </trans-unit>
        <trans-unit id="064bc0b8dc8089ef01442be8795ce75b7af11ce6" translate="yes" xml:space="preserve">
          <source>mid.</source>
          <target state="translated">mid.</target>
        </trans-unit>
        <trans-unit id="83ed71b0af2be4dfa5a72e4ec70e66157554a57a" translate="yes" xml:space="preserve">
          <source>minimumError</source>
          <target state="translated">minimumError</target>
        </trans-unit>
        <trans-unit id="1605fb43728ac7aa61cafc9fe6c99943249aac0e" translate="yes" xml:space="preserve">
          <source>minimumWarning</source>
          <target state="translated">minimumWarning</target>
        </trans-unit>
        <trans-unit id="04987fcab72ade3a87a64267b02a2ad9f8f22484" translate="yes" xml:space="preserve">
          <source>minute</source>
          <target state="translated">minute</target>
        </trans-unit>
        <trans-unit id="b8d09b4d8580aacbd9efc4540a9b88d2feb9d7e5" translate="yes" xml:space="preserve">
          <source>mm</source>
          <target state="translated">mm</target>
        </trans-unit>
        <trans-unit id="c822a513ba9ec892da03a22f2e29cbd5577d0270" translate="yes" xml:space="preserve">
          <source>mm (05)</source>
          <target state="translated">mm (05)</target>
        </trans-unit>
        <trans-unit id="6adbae8c894eee14931a69b021d6fca6a64932db" translate="yes" xml:space="preserve">
          <source>mo</source>
          <target state="translated">mo</target>
        </trans-unit>
        <trans-unit id="fbd34a2b6e6a9fe8161f97dc435642609ac0bc29" translate="yes" xml:space="preserve">
          <source>module</source>
          <target state="translated">module</target>
        </trans-unit>
        <trans-unit id="021710fa7866431c1dacaa6cd31eeeb47dce64b6" translate="yes" xml:space="preserve">
          <source>month</source>
          <target state="translated">month</target>
        </trans-unit>
        <trans-unit id="5c9bf79865e311955a2af85845f07d12509291de" translate="yes" xml:space="preserve">
          <source>mozRequestAnimationFrame</source>
          <target state="translated">mozRequestAnimationFrame</target>
        </trans-unit>
        <trans-unit id="50f013532a9770a2c2cfdc38b7581dd01df69b70" translate="yes" xml:space="preserve">
          <source>n/a</source>
          <target state="translated">n/a</target>
        </trans-unit>
        <trans-unit id="6ae999552a0d2dca14d62e2bc8b764d377b1dd6c" translate="yes" xml:space="preserve">
          <source>name</source>
          <target state="translated">name</target>
        </trans-unit>
        <trans-unit id="3b392af4fc32b983853c3c7787eefa485ec1d866" translate="yes" xml:space="preserve">
          <source>navigate to the default route when the app launches with an empty path.</source>
          <target state="translated">빈 경로로 앱이 시작되면 기본 경로로 이동합니다.</target>
        </trans-unit>
        <trans-unit id="ecbfa235adde27cf8f809e409786f61a01018f00" translate="yes" xml:space="preserve">
          <source>nb</source>
          <target state="translated">nb</target>
        </trans-unit>
        <trans-unit id="8bd0d1dca27f6c3dbfe084b83b7504de75e7efd2" translate="yes" xml:space="preserve">
          <source>ng add</source>
          <target state="translated">ng 추가</target>
        </trans-unit>
        <trans-unit id="86f39bbaea8c610d0f49d63b1c334313507b083d" translate="yes" xml:space="preserve">
          <source>ng analytics</source>
          <target state="translated">분석</target>
        </trans-unit>
        <trans-unit id="de55b65c1d82aade511d55c6301e0674a8d9cd08" translate="yes" xml:space="preserve">
          <source>ng build</source>
          <target state="translated">ng 빌드</target>
        </trans-unit>
        <trans-unit id="5d52a275fe949fbf8038817b3ca93530273b129d" translate="yes" xml:space="preserve">
          <source>ng config</source>
          <target state="translated">ng 구성</target>
        </trans-unit>
        <trans-unit id="058547253a6d45d5184e4bb076b44e4740351fa1" translate="yes" xml:space="preserve">
          <source>ng deploy</source>
          <target state="translated">배포</target>
        </trans-unit>
        <trans-unit id="ad73bf3b52f194989c1c41c308d2b3b7805e9b79" translate="yes" xml:space="preserve">
          <source>ng doc</source>
          <target state="translated">ng doc</target>
        </trans-unit>
        <trans-unit id="cea2e7d01887f1822d065de7f8ecd0bae42c9593" translate="yes" xml:space="preserve">
          <source>ng e2e</source>
          <target state="translated">ng e2e</target>
        </trans-unit>
        <trans-unit id="e4218f83ef9b2a4de7b00dd8ba6240b536aa01f6" translate="yes" xml:space="preserve">
          <source>ng generate</source>
          <target state="translated">ng 생성</target>
        </trans-unit>
        <trans-unit id="9ba0db7be2478130895770840562c4066a67af45" translate="yes" xml:space="preserve">
          <source>ng help</source>
          <target state="translated">도움</target>
        </trans-unit>
        <trans-unit id="0602cfd10efccd7d2ca1875841598aa80ca533f9" translate="yes" xml:space="preserve">
          <source>ng lint</source>
          <target state="translated">보풀</target>
        </trans-unit>
        <trans-unit id="f3fbc6b8fb67a225d93d706ff4a6ca10be33a9d6" translate="yes" xml:space="preserve">
          <source>ng new</source>
          <target state="translated">새로운</target>
        </trans-unit>
        <trans-unit id="0849cb1a3be8858bc7ce6a1467a7855c572a7533" translate="yes" xml:space="preserve">
          <source>ng run</source>
          <target state="translated">ng run</target>
        </trans-unit>
        <trans-unit id="b46fdaece8cfd29ac9ab3891faa94f3e9e00180d" translate="yes" xml:space="preserve">
          <source>ng serve</source>
          <target state="translated">ng 봉사</target>
        </trans-unit>
        <trans-unit id="a02924bc97d299029e240edddae57446e56a40bb" translate="yes" xml:space="preserve">
          <source>ng test</source>
          <target state="translated">ng 테스트</target>
        </trans-unit>
        <trans-unit id="c330cb8927dce5f5f917f347c20d2929856675f3" translate="yes" xml:space="preserve">
          <source>ng update</source>
          <target state="translated">ng 업데이트</target>
        </trans-unit>
        <trans-unit id="32dc6bb7b3460f6b8033f42c5c5d5cbfadefb43b" translate="yes" xml:space="preserve">
          <source>ng version</source>
          <target state="translated">ng 버전</target>
        </trans-unit>
        <trans-unit id="1a0beb5318cab44a07478c65fd3e626cac49f585" translate="yes" xml:space="preserve">
          <source>ng xi18n</source>
          <target state="translated">xi xi18n</target>
        </trans-unit>
        <trans-unit id="81282304dc8b9cbbe8b8d44f14352e39af05df01" translate="yes" xml:space="preserve">
          <source>ng-app</source>
          <target state="translated">ng-app</target>
        </trans-unit>
        <trans-unit id="d76b1e92a173d46230c94fee38fb1a9aa60c7679" translate="yes" xml:space="preserve">
          <source>ng-class</source>
          <target state="translated">ng-class</target>
        </trans-unit>
        <trans-unit id="f3f1ddcc4e5668816c2df1ba95e81884362a51ec" translate="yes" xml:space="preserve">
          <source>ng-click</source>
          <target state="translated">ng-click</target>
        </trans-unit>
        <trans-unit id="c942ad93a5be36ba73a8752c3c44b6797b79ac69" translate="yes" xml:space="preserve">
          <source>ng-controller</source>
          <target state="translated">ng-controller</target>
        </trans-unit>
        <trans-unit id="6b64becf872cae57331692d35ed41771670618e7" translate="yes" xml:space="preserve">
          <source>ng-dirty</source>
          <target state="translated">ng-dirty</target>
        </trans-unit>
        <trans-unit id="daa58cdbcadcfb8fe01c01562e17c56d640d7661" translate="yes" xml:space="preserve">
          <source>ng-hide</source>
          <target state="translated">ng-hide</target>
        </trans-unit>
        <trans-unit id="6f75b47dfcdd89a3ddc84af529aeadf3dbd92d69" translate="yes" xml:space="preserve">
          <source>ng-href</source>
          <target state="translated">ng-href</target>
        </trans-unit>
        <trans-unit id="1892d84493a0ff19451a82eb9551290da7ab7611" translate="yes" xml:space="preserve">
          <source>ng-if</source>
          <target state="translated">ng-if</target>
        </trans-unit>
        <trans-unit id="156c3da33c0d3efbde62e22cb9f7ba542346a22c" translate="yes" xml:space="preserve">
          <source>ng-invalid</source>
          <target state="translated">ng-invalid</target>
        </trans-unit>
        <trans-unit id="34bf0ba1f7bec483b0a70a83891971bb6a20f7ea" translate="yes" xml:space="preserve">
          <source>ng-model</source>
          <target state="translated">ng-model</target>
        </trans-unit>
        <trans-unit id="6d6be9fd809a77f208c140c18cac7ff1c400efe1" translate="yes" xml:space="preserve">
          <source>ng-model: &lt;code&gt;&amp;lt;comp ng-model=&quot;name&quot;&amp;gt;&lt;/code&gt;</source>
          <target state="translated">ng-model : &lt;code&gt;&amp;lt;comp ng-model=&quot;name&quot;&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a178026e224b9d009e5dd456a4513eab1e43a23e" translate="yes" xml:space="preserve">
          <source>ng-pending</source>
          <target state="translated">ng-pending</target>
        </trans-unit>
        <trans-unit id="b4a4f27313f9c5fea278005aecc1ae28a423fc15" translate="yes" xml:space="preserve">
          <source>ng-pristine</source>
          <target state="translated">ng-pristine</target>
        </trans-unit>
        <trans-unit id="0e45397994cf73af09c27e90f79ceb5606ed2a7d" translate="yes" xml:space="preserve">
          <source>ng-repeat</source>
          <target state="translated">ng-repeat</target>
        </trans-unit>
        <trans-unit id="5cbc98ee515f0846fb04e98e91fe75611a65eca4" translate="yes" xml:space="preserve">
          <source>ng-show</source>
          <target state="translated">ng-show</target>
        </trans-unit>
        <trans-unit id="8625b29eb0056167a2e338c5c5fa7fd77bab37f0" translate="yes" xml:space="preserve">
          <source>ng-src</source>
          <target state="translated">ng-src</target>
        </trans-unit>
        <trans-unit id="6dd140502df0f66ab43fd47517ad6335d1edebd0" translate="yes" xml:space="preserve">
          <source>ng-style</source>
          <target state="translated">ng-style</target>
        </trans-unit>
        <trans-unit id="18b8f4fb887d618b0516df6042f780fb3da97f38" translate="yes" xml:space="preserve">
          <source>ng-switch</source>
          <target state="translated">ng-switch</target>
        </trans-unit>
        <trans-unit id="dd7edecec2bf52c2d3b1625440d4037ebabb5382" translate="yes" xml:space="preserve">
          <source>ng-touched</source>
          <target state="translated">ng-touched</target>
        </trans-unit>
        <trans-unit id="5b54cc7c354d5e792043242afbf3ffffe2768fa8" translate="yes" xml:space="preserve">
          <source>ng-untouched</source>
          <target state="translated">ng-untouched</target>
        </trans-unit>
        <trans-unit id="9acedc727a6e04b05408657c280e7965d8a4f2c1" translate="yes" xml:space="preserve">
          <source>ng-valid</source>
          <target state="translated">ng-valid</target>
        </trans-unit>
        <trans-unit id="8861202a0f94ad9fd0299a4d8194bcf16c83d0b3" translate="yes" xml:space="preserve">
          <source>ngClass</source>
          <target state="translated">ngClass</target>
        </trans-unit>
        <trans-unit id="52a6aeb1ef525c23d89e87c75c6cd3dc682a6fea" translate="yes" xml:space="preserve">
          <source>ngForm element selector</source>
          <target state="translated">ngForm 요소 선택기</target>
        </trans-unit>
        <trans-unit id="c3055e3809c071cb345664f84c256543d74c7e2d" translate="yes" xml:space="preserve">
          <source>ngModel</source>
          <target state="translated">ngModel</target>
        </trans-unit>
        <trans-unit id="e9f1f0fc37d9a66a0fa0e0c8074652a1c02edb0a" translate="yes" xml:space="preserve">
          <source>ngModel with reactive forms</source>
          <target state="translated">반응성 형식의 ngModel</target>
        </trans-unit>
        <trans-unit id="e05d431b0c5aef9216c72255ca728a46e98bb5cd" translate="yes" xml:space="preserve">
          <source>ngStyle</source>
          <target state="translated">ngStyle</target>
        </trans-unit>
        <trans-unit id="521026fda875329ff340abc8942848fc1567aa3e" translate="yes" xml:space="preserve">
          <source>ngSwitch</source>
          <target state="translated">ngSwitch</target>
        </trans-unit>
        <trans-unit id="fd1286353570c5703799ba76999323b7c7447b06" translate="yes" xml:space="preserve">
          <source>no</source>
          <target state="translated">no</target>
        </trans-unit>
        <trans-unit id="63ea2a451971682c071b966fe2138afd3cdf3dc7" translate="yes" xml:space="preserve">
          <source>no, no-NO</source>
          <target state="translated">아니, 아니</target>
        </trans-unit>
        <trans-unit id="f8e966d1e207d02c44511a58dccff2f5429e9a3b" translate="yes" xml:space="preserve">
          <source>node</source>
          <target state="translated">node</target>
        </trans-unit>
        <trans-unit id="c7934f8ebede86d52627692875815e5059a64a3e" translate="yes" xml:space="preserve">
          <source>non-null assertion operator</source>
          <target state="translated">널이 아닌 어설 션 연산자</target>
        </trans-unit>
        <trans-unit id="71f8e7976e4cbc4561c9d62fb283e7f788202acb" translate="yes" xml:space="preserve">
          <source>none</source>
          <target state="translated">none</target>
        </trans-unit>
        <trans-unit id="6be1302122d39e36a5e7ecae0d6dc4c2fd48f2ce" translate="yes" xml:space="preserve">
          <source>npm package</source>
          <target state="translated">npm 패키지</target>
        </trans-unit>
        <trans-unit id="603f8d38ecdab356c16dee61ed8e64f0ade10160" translate="yes" xml:space="preserve">
          <source>npm package manager</source>
          <target state="translated">npm 패키지 관리자</target>
        </trans-unit>
        <trans-unit id="53b0a1b2fadf4e040cdc2155a7340de24aca93cb" translate="yes" xml:space="preserve">
          <source>number</source>
          <target state="translated">number</target>
        </trans-unit>
        <trans-unit id="51e3d9c9d88791cb75ded83396e0b72ad723ded9" translate="yes" xml:space="preserve">
          <source>observable</source>
          <target state="translated">observable</target>
        </trans-unit>
        <trans-unit id="307527c227ac648bb119bcb457ebb8466e79827c" translate="yes" xml:space="preserve">
          <source>observer</source>
          <target state="translated">observer</target>
        </trans-unit>
        <trans-unit id="fe05bcdcdc4928012781a5f1a2a77cbb5398e106" translate="yes" xml:space="preserve">
          <source>one</source>
          <target state="translated">one</target>
        </trans-unit>
        <trans-unit id="acc93dc6f936e375b3707cadea87356519979fdb" translate="yes" xml:space="preserve">
          <source>operator assignment, such as &lt;code&gt;+=&lt;/code&gt; and &lt;code&gt;-=&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;+=&lt;/code&gt; 및 &lt;code&gt;-=&lt;/code&gt; 와 같은 연산자 할당</target>
        </trans-unit>
        <trans-unit id="7e1c69263359e00548868e1df47f174a14437020" translate="yes" xml:space="preserve">
          <source>optional extra AngularJS bootstrap configuration</source>
          <target state="translated">선택적 추가 AngularJS 부트 스트랩 구성</target>
        </trans-unit>
        <trans-unit id="513f8de9259fe7658fe14d1352c54ccf070e911f" translate="yes" xml:space="preserve">
          <source>options</source>
          <target state="translated">options</target>
        </trans-unit>
        <trans-unit id="1758356db21759f7c5a0da9b4dd1db8fd6feab3f" translate="yes" xml:space="preserve">
          <source>or</source>
          <target state="translated">or</target>
        </trans-unit>
        <trans-unit id="d3857e357ca601a79593d079d3c1177588bfc35f" translate="yes" xml:space="preserve">
          <source>or InjectionToken</source>
          <target state="translated">또는 InjectionToken</target>
        </trans-unit>
        <trans-unit id="3927572c45dc7a8d20da56759afcb9b30937e4d2" translate="yes" xml:space="preserve">
          <source>or a</source>
          <target state="translated">또는</target>
        </trans-unit>
        <trans-unit id="a6cd987b30730c326be9adfbe96ee9dc5c3af9e4" translate="yes" xml:space="preserve">
          <source>orderBy</source>
          <target state="translated">orderBy</target>
        </trans-unit>
        <trans-unit id="d0941e68da8f38151ff86a61fc59f7c5cf9fcaa2" translate="yes" xml:space="preserve">
          <source>other</source>
          <target state="translated">other</target>
        </trans-unit>
        <trans-unit id="762ba2a6fbe3cab4409ac5205a7546bb27662246" translate="yes" xml:space="preserve">
          <source>otherwise, the view will be treated as a &quot;category match&quot;, and will only display if exact value matches aren't found and the value maps to its category for the defined locale.</source>
          <target state="translated">그렇지 않으면 뷰는 &quot;카테고리 일치&quot;로 취급되며 정확한 값 일치를 찾을 수없고 값이 정의 된 로캘의 범주에 매핑 된 경우에만 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="1029d67644815d428f554e390aa966d57a0b29b8" translate="yes" xml:space="preserve">
          <source>output</source>
          <target state="translated">output</target>
        </trans-unit>
        <trans-unit id="7030d0b2f71b999ff89a343de08c414af32fc93a" translate="yes" xml:space="preserve">
          <source>package.json</source>
          <target state="translated">package.json</target>
        </trans-unit>
        <trans-unit id="46b6245b6d9771961b892ce09bcce77e256e6343" translate="yes" xml:space="preserve">
          <source>parallellize the build for scale and incrementality</source>
          <target state="translated">규모와 증분을 위해 빌드를 병렬화</target>
        </trans-unit>
        <trans-unit id="e9edcf94e987d0cc7c3d8ae1a876749c47f3b081" translate="yes" xml:space="preserve">
          <source>paramMap</source>
          <target state="translated">paramMap</target>
        </trans-unit>
        <trans-unit id="aaa83eac6890a9a6e2273ea51d6f2f2915b1a019" translate="yes" xml:space="preserve">
          <source>pipe</source>
          <target state="translated">pipe</target>
        </trans-unit>
        <trans-unit id="3c72abbe626f27d174d80fc434b851cce7bde6d3" translate="yes" xml:space="preserve">
          <source>platform</source>
          <target state="translated">platform</target>
        </trans-unit>
        <trans-unit id="3ce2bf529faab6c5d53dc92d96e84cd2e33eff7a" translate="yes" xml:space="preserve">
          <source>platform-browser</source>
          <target state="translated">platform-browser</target>
        </trans-unit>
        <trans-unit id="a2d9da6fb231f4f09f419221e5890d80970c0406" translate="yes" xml:space="preserve">
          <source>platform-browser-dynamic</source>
          <target state="translated">platform-browser-dynamic</target>
        </trans-unit>
        <trans-unit id="5cc94fefe9532ead6c639330a5fd075d2c22c913" translate="yes" xml:space="preserve">
          <source>platform-server</source>
          <target state="translated">platform-server</target>
        </trans-unit>
        <trans-unit id="dc882946c334fc3add3425d798d8ae58be88f640" translate="yes" xml:space="preserve">
          <source>platform-webworker</source>
          <target state="translated">platform-webworker</target>
        </trans-unit>
        <trans-unit id="83c055de9e3a94288d7a9e229103b9416fcac29a" translate="yes" xml:space="preserve">
          <source>platform-webworker-dynamic</source>
          <target state="translated">platform-webworker-dynamic</target>
        </trans-unit>
        <trans-unit id="c07ecd5012f0429ae2ab16126f6f457dd572b6d1" translate="yes" xml:space="preserve">
          <source>platformBrowser</source>
          <target state="translated">platformBrowser</target>
        </trans-unit>
        <trans-unit id="1b08cf53e47591bbe27630465d903aeb9067a14a" translate="yes" xml:space="preserve">
          <source>platformBrowserDynamic</source>
          <target state="translated">platformBrowserDynamic</target>
        </trans-unit>
        <trans-unit id="19d5633e7c2f4f2ce086fbadc3926459be34f969" translate="yes" xml:space="preserve">
          <source>platformBrowserDynamicTesting</source>
          <target state="translated">platformBrowserDynamicTesting</target>
        </trans-unit>
        <trans-unit id="f888447eda369191ef768ff6326c283fe82e57c0" translate="yes" xml:space="preserve">
          <source>platformBrowserTesting</source>
          <target state="translated">platformBrowserTesting</target>
        </trans-unit>
        <trans-unit id="b8504dcc0ae1744520c08d038daa84d6d87fc4b1" translate="yes" xml:space="preserve">
          <source>platformCore</source>
          <target state="translated">platformCore</target>
        </trans-unit>
        <trans-unit id="170c257d32ba4482eaa3424bb9dbc06e8e3a48e3" translate="yes" xml:space="preserve">
          <source>platformDynamicServer</source>
          <target state="translated">platformDynamicServer</target>
        </trans-unit>
        <trans-unit id="493f927b1586753e8e8da849549d9af29a88cdab" translate="yes" xml:space="preserve">
          <source>platformServer</source>
          <target state="translated">platformServer</target>
        </trans-unit>
        <trans-unit id="b655b441724e494c318f150c543b4cb166785495" translate="yes" xml:space="preserve">
          <source>platformServerTesting</source>
          <target state="translated">platformServerTesting</target>
        </trans-unit>
        <trans-unit id="dfa0d4c48a5c22edce1d2e27c93ce287ffdcd7b5" translate="yes" xml:space="preserve">
          <source>platformWorkerApp</source>
          <target state="translated">platformWorkerApp</target>
        </trans-unit>
        <trans-unit id="675701181d0cf013ecfba6d9900326e70f8b5f1b" translate="yes" xml:space="preserve">
          <source>platformWorkerAppDynamic</source>
          <target state="translated">platformWorkerAppDynamic</target>
        </trans-unit>
        <trans-unit id="4b1369e31c2f91dbd4c389cee5f0182defc86855" translate="yes" xml:space="preserve">
          <source>platformWorkerUi</source>
          <target state="translated">platformWorkerUi</target>
        </trans-unit>
        <trans-unit id="cf2cdcee31a68f5ab840009d2a05fc819ebe9181" translate="yes" xml:space="preserve">
          <source>polyfill</source>
          <target state="translated">polyfill</target>
        </trans-unit>
        <trans-unit id="07970fbf36ad7a146914dbba73b7de9d21d2c34f" translate="yes" xml:space="preserve">
          <source>polyfills</source>
          <target state="translated">polyfills</target>
        </trans-unit>
        <trans-unit id="e90ff3a4c4c33eebd2119d25e564b12d102597db" translate="yes" xml:space="preserve">
          <source>produces the following:</source>
          <target state="translated">다음을 생성합니다.</target>
        </trans-unit>
        <trans-unit id="98f54143ab4e86b28c3afee0f50f2f51cfb2ed38" translate="yes" xml:space="preserve">
          <source>project</source>
          <target state="translated">project</target>
        </trans-unit>
        <trans-unit id="4f4f48587df24fb34ceb889681e10cccbcc276b0" translate="yes" xml:space="preserve">
          <source>protractor</source>
          <target state="translated">protractor</target>
        </trans-unit>
        <trans-unit id="8ee8c79c182422ff4630973ac5b6432de873e080" translate="yes" xml:space="preserve">
          <source>provideRoutes</source>
          <target state="translated">provideRoutes</target>
        </trans-unit>
        <trans-unit id="90c5d1358d128117989fc21f2897a25c99205e50" translate="yes" xml:space="preserve">
          <source>provider</source>
          <target state="translated">provider</target>
        </trans-unit>
        <trans-unit id="bc811258ae9f9fcb0494bb2785a876a59993024e" translate="yes" xml:space="preserve">
          <source>pt</source>
          <target state="translated">pt</target>
        </trans-unit>
        <trans-unit id="a786a2c15e0960665766c54383eae01bde449200" translate="yes" xml:space="preserve">
          <source>pt-BR</source>
          <target state="translated">pt-BR</target>
        </trans-unit>
        <trans-unit id="7cd9148ec5a552dbf68de5a6debcf8e4d974db72" translate="yes" xml:space="preserve">
          <source>query</source>
          <target state="translated">query</target>
        </trans-unit>
        <trans-unit id="9535cb7c9ce783c6ca8da37166d5250df6ec0398" translate="yes" xml:space="preserve">
          <source>rather than the raw string format</source>
          <target state="translated">원시 문자열 형식이 아닌</target>
        </trans-unit>
        <trans-unit id="a6f6b764c72c3a26d3f09bd51ce394c8bc0c3307" translate="yes" xml:space="preserve">
          <source>reactive forms</source>
          <target state="translated">반응성 형태</target>
        </trans-unit>
        <trans-unit id="5935bb7c7d71d085ed6c1f5edfafe5ac757fa627" translate="yes" xml:space="preserve">
          <source>references to the two buttons so they can click them.</source>
          <target state="translated">클릭 할 수 있도록 두 버튼에 대한 참조입니다.</target>
        </trans-unit>
        <trans-unit id="cbcd74bd450f968cc58292688626a73674d571c9" translate="yes" xml:space="preserve">
          <source>reflect-metadata</source>
          <target state="translated">reflect-metadata</target>
        </trans-unit>
        <trans-unit id="d879b702d3342c4bcdf38c3c5fae40e33770d7d1" translate="yes" xml:space="preserve">
          <source>registerLocaleData</source>
          <target state="translated">registerLocaleData</target>
        </trans-unit>
        <trans-unit id="2db6cf457955edb5bbe416341c4c1bad5ef2e776" translate="yes" xml:space="preserve">
          <source>renderModule</source>
          <target state="translated">renderModule</target>
        </trans-unit>
        <trans-unit id="b306e76bbae523360dea187dce259792b205a611" translate="yes" xml:space="preserve">
          <source>renderModuleFactory</source>
          <target state="translated">renderModuleFactory</target>
        </trans-unit>
        <trans-unit id="d73fd7553e41429de67252dc32008ee31e7dc96a" translate="yes" xml:space="preserve">
          <source>requestAnimationFrame</source>
          <target state="translated">requestAnimationFrame</target>
        </trans-unit>
        <trans-unit id="98afec10f493fb343a57fefa63ebfdb24add0a89" translate="yes" xml:space="preserve">
          <source>resetFakeAsyncZone</source>
          <target state="translated">resetFakeAsyncZone</target>
        </trans-unit>
        <trans-unit id="c512eda1d5ac0e1d41f5351cf9361f628d5f5a8f" translate="yes" xml:space="preserve">
          <source>resolveForwardRef</source>
          <target state="translated">resolveForwardRef</target>
        </trans-unit>
        <trans-unit id="18f4f681864c6ff9431db5d5e53d1c05818891b0" translate="yes" xml:space="preserve">
          <source>resolves to 'false' when navigation fails,</source>
          <target state="translated">탐색이 실패하면 'false'로 확인</target>
        </trans-unit>
        <trans-unit id="c118886c3773bfc6dda30e29bf578190f0d4310f" translate="yes" xml:space="preserve">
          <source>resolves to 'true' when navigation succeeds,</source>
          <target state="translated">탐색이 성공하면 'true'로 확인</target>
        </trans-unit>
        <trans-unit id="9d66dda1c30f221d661048a1351ac0264c5bd4b6" translate="yes" xml:space="preserve">
          <source>ro-MD</source>
          <target state="translated">ro-MD</target>
        </trans-unit>
        <trans-unit id="f44da489971957a4d1af98c2f99ad5736a869ee1" translate="yes" xml:space="preserve">
          <source>root element</source>
          <target state="translated">루트 요소</target>
        </trans-unit>
        <trans-unit id="77eb1db6cb81b3cb088d36ab7aae8f230dcfaa28" translate="yes" xml:space="preserve">
          <source>router</source>
          <target state="translated">router</target>
        </trans-unit>
        <trans-unit id="932ea7ae1c95c68c2edea8874fb2ed258290f021" translate="yes" xml:space="preserve">
          <source>router outlet</source>
          <target state="translated">라우터 콘센트</target>
        </trans-unit>
        <trans-unit id="ce75b06327fe25658c2ce2ed86a812aa3d539aab" translate="yes" xml:space="preserve">
          <source>routing component</source>
          <target state="translated">라우팅 구성 요소</target>
        </trans-unit>
        <trans-unit id="0f400122e37da3a462df347caac2be31d74be730" translate="yes" xml:space="preserve">
          <source>rule</source>
          <target state="translated">rule</target>
        </trans-unit>
        <trans-unit id="a0f1490a20d0211c997b44bc357e1972deab8ae3" translate="yes" xml:space="preserve">
          <source>s</source>
          <target state="translated">s</target>
        </trans-unit>
        <trans-unit id="15d34bd6c51ae4c0fdfab9f46213dd11192b5fde" translate="yes" xml:space="preserve">
          <source>s (9)</source>
          <target state="translated">s (9)</target>
        </trans-unit>
        <trans-unit id="636ac33aea89bd9ef2fc51e0fa5ada3c8492a61c" translate="yes" xml:space="preserve">
          <source>safe navigation operator</source>
          <target state="translated">안전한 네비게이션 운영자</target>
        </trans-unit>
        <trans-unit id="2b86b09e6504617c4541a8a2f53a65ea784d5722" translate="yes" xml:space="preserve">
          <source>schematic</source>
          <target state="translated">schematic</target>
        </trans-unit>
        <trans-unit id="bfcb229a9816e7f04a9e357bb34b72344676415f" translate="yes" xml:space="preserve">
          <source>scoped package</source>
          <target state="translated">범위가 지정된 패키지</target>
        </trans-unit>
        <trans-unit id="352f7829a2384b001cc12b0c2613c756454a1f6a" translate="yes" xml:space="preserve">
          <source>second</source>
          <target state="translated">second</target>
        </trans-unit>
        <trans-unit id="92504616ed595e2ebebfc30b60415ae110ad83b7" translate="yes" xml:space="preserve">
          <source>sequence</source>
          <target state="translated">sequence</target>
        </trans-unit>
        <trans-unit id="3de4f901fffb30ac720b0e7eb654b4faa2dd03fa" translate="yes" xml:space="preserve">
          <source>server</source>
          <target state="translated">server</target>
        </trans-unit>
        <trans-unit id="353a40a121cede9d2f25716bab942a76f1d9de07" translate="yes" xml:space="preserve">
          <source>server-side rendering</source>
          <target state="translated">서버 측 렌더링</target>
        </trans-unit>
        <trans-unit id="4cf5bc59bee9e1c44c6254b5f84e7f066bd8e5fe" translate="yes" xml:space="preserve">
          <source>service</source>
          <target state="translated">service</target>
        </trans-unit>
        <trans-unit id="8047e16a51d871c6f5b650103a738bd30c329ff6" translate="yes" xml:space="preserve">
          <source>service worker</source>
          <target state="translated">서비스 노동자</target>
        </trans-unit>
        <trans-unit id="cb4c702692adb3ccd4576a346e92880d07100a89" translate="yes" xml:space="preserve">
          <source>service-worker</source>
          <target state="translated">service-worker</target>
        </trans-unit>
        <trans-unit id="109d4cee2f82ffbc934525f614ccf85179956807" translate="yes" xml:space="preserve">
          <source>setAngularJSGlobal</source>
          <target state="translated">setAngularJSGlobal</target>
        </trans-unit>
        <trans-unit id="d1a71659565573298fc81d9f2236a35916b68945" translate="yes" xml:space="preserve">
          <source>setAngularLib</source>
          <target state="translated">setAngularLib</target>
        </trans-unit>
        <trans-unit id="56741967bf8c0eb107c57464152bb101782f6bf3" translate="yes" xml:space="preserve">
          <source>setInterval</source>
          <target state="translated">setInterval</target>
        </trans-unit>
        <trans-unit id="f3288d2100f0363fe92b68b2570ab9eb7100684a" translate="yes" xml:space="preserve">
          <source>setTestabilityGetter</source>
          <target state="translated">setTestabilityGetter</target>
        </trans-unit>
        <trans-unit id="d861cdbbf87d9a3930adce4c39a8e44c74c884ff" translate="yes" xml:space="preserve">
          <source>setTimeout</source>
          <target state="translated">setTimeout</target>
        </trans-unit>
        <trans-unit id="11bd42076d1d273582f6403afd07eee342d1be95" translate="yes" xml:space="preserve">
          <source>setUpLocationSync</source>
          <target state="translated">setUpLocationSync</target>
        </trans-unit>
        <trans-unit id="effd3589790b3aad08a83f6da54d7cece04231f3" translate="yes" xml:space="preserve">
          <source>setupTestingRouter</source>
          <target state="translated">setupTestingRouter</target>
        </trans-unit>
        <trans-unit id="16795633e2c1543064a3ad70ac3ba71d3d589b3b" translate="yes" xml:space="preserve">
          <source>sh</source>
          <target state="translated">sh</target>
        </trans-unit>
        <trans-unit id="d167d026a5ec818199209ba1646ae35f02540e05" translate="yes" xml:space="preserve">
          <source>show a descriptive error message after the user interacted with the form and the validation failed.</source>
          <target state="translated">사용자가 양식과 상호 작용하고 유효성 검사에 실패한 후 설명 오류 메시지를 표시합니다.</target>
        </trans-unit>
        <trans-unit id="0a5228e66df38e2f27ca61b901edf86f7ef97fb8" translate="yes" xml:space="preserve">
          <source>slice</source>
          <target state="translated">slice</target>
        </trans-unit>
        <trans-unit id="438fa5632beb1a1e777595bdb637d98622298a10" translate="yes" xml:space="preserve">
          <source>someMethod() { var s = myScope('Foo'); // 'Foo' gets stored in tracing UI // DO SOME WORK HERE return wtfLeave(s, 123); // Return value 123 }</source>
          <target state="translated">someMethod () {var s = myScope ( 'Foo'); // 'Foo'는 추적 UI에 저장됩니다. // 여기서 일부 작업을 수행하십시오. return wtfLeave (s, 123); // 반환 값 123}</target>
        </trans-unit>
        <trans-unit id="b298a31859b16cabf86c75abd9c72ce32c3d8d2c" translate="yes" xml:space="preserve">
          <source>someMethod() { var s = wtfStartTimeRange('HTTP:GET', 'some.url'); var future = new Future.delay(5).then((_) { wtfEndTimeRange(s); }); }</source>
          <target state="translated">someMethod () {var s = wtfStartTimeRange ( 'HTTP : GET', 'some.url'); var future = new Future.delay (5) .then ((_) {wtfEndTimeRange (s);}); }</target>
        </trans-unit>
        <trans-unit id="0596a8ce0473694fffea90433b78577aa8d56ea1" translate="yes" xml:space="preserve">
          <source>specify all inputs and outputs that the AngularJS component expects</source>
          <target state="translated">AngularJS 컴포넌트가 기대하는 모든 입력과 출력을 지정</target>
        </trans-unit>
        <trans-unit id="421527d69c976c1bd19a5b52d201f5ed810647cb" translate="yes" xml:space="preserve">
          <source>specify the directive's selector (&lt;code&gt;ng1-hero&lt;/code&gt;)</source>
          <target state="translated">지시자의 선택자를 지정하십시오 ( &lt;code&gt;ng1-hero&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="eeb32937b54b8cb7898472b6000700dc98c08908" translate="yes" xml:space="preserve">
          <source>spies for some of the component and router methods.</source>
          <target state="translated">구성 요소 및 라우터 방법 중 일부를 감시합니다.</target>
        </trans-unit>
        <trans-unit id="70c7ed317290ef3100a28099abdf7e54f80757a6" translate="yes" xml:space="preserve">
          <source>sr-Latn</source>
          <target state="translated">sr-Latn</target>
        </trans-unit>
        <trans-unit id="185c2489f95cc154046572c9111d388976d336c1" translate="yes" xml:space="preserve">
          <source>src/app folder (answer &lt;em&gt;No&lt;/em&gt; if asked to search for TypeScript Typings)</source>
          <target state="translated">src / app 폴더 ( TypeScript Typings를 검색하도록 요청하면 &lt;em&gt;No&lt;/em&gt; )</target>
        </trans-unit>
        <trans-unit id="5c975582791da6f060261188096d6aad85db6e09" translate="yes" xml:space="preserve">
          <source>src/index.html</source>
          <target state="translated">src/index.html</target>
        </trans-unit>
        <trans-unit id="6f9d98ca6b2005fc0cd4b0f000b670b16bf3c496" translate="yes" xml:space="preserve">
          <source>src/styles.css</source>
          <target state="translated">src/styles.css</target>
        </trans-unit>
        <trans-unit id="f48486f491a6cc1de5c7d3cb2474784ae98e4dcf" translate="yes" xml:space="preserve">
          <source>src/tsconfig.json</source>
          <target state="translated">src/tsconfig.json</target>
        </trans-unit>
        <trans-unit id="c1c93f88d273660be5358cd4ee2df2c2f3f0e8e7" translate="yes" xml:space="preserve">
          <source>ss</source>
          <target state="translated">ss</target>
        </trans-unit>
        <trans-unit id="1b9095d1ee9f7cff8428e17f1bdfed524227332f" translate="yes" xml:space="preserve">
          <source>ss (09)</source>
          <target state="translated">ss (09)</target>
        </trans-unit>
        <trans-unit id="1b08290b57bb5f33b80ba3c43319d112144b69ac" translate="yes" xml:space="preserve">
          <source>stagger</source>
          <target state="translated">stagger</target>
        </trans-unit>
        <trans-unit id="cc749ac3ee420fc48c29b2ef639d54c7e5acbbf7" translate="yes" xml:space="preserve">
          <source>standard Angular expression</source>
          <target state="translated">표준 각도 표현</target>
        </trans-unit>
        <trans-unit id="aa4a5f8125f234182e2dea92805afdfb747a86be" translate="yes" xml:space="preserve">
          <source>state</source>
          <target state="translated">state</target>
        </trans-unit>
        <trans-unit id="ecb252044b5ea0f679ee78ec1a12904739e2904d" translate="yes" xml:space="preserve">
          <source>string</source>
          <target state="translated">string</target>
        </trans-unit>
        <trans-unit id="9381b5c8d412579951d08ab8b286cd2e2bf124f0" translate="yes" xml:space="preserve">
          <source>string (required)</source>
          <target state="translated">문자열 (필수)</target>
        </trans-unit>
        <trans-unit id="e8534e71afd70affb61e1e05699a8022b0e56ce9" translate="yes" xml:space="preserve">
          <source>string and/or label/value object pair (only valid with type &lt;code&gt;list&lt;/code&gt;)</source>
          <target state="translated">문자열 및 / 또는 레이블 / 값 객체 쌍 (type &lt;code&gt;list&lt;/code&gt; 에만 유효 )</target>
        </trans-unit>
        <trans-unit id="e4ab426bc2432ee5a5cd6b83e47e027efb9b8965" translate="yes" xml:space="preserve">
          <source>structural directives</source>
          <target state="translated">구조적 지시문</target>
        </trans-unit>
        <trans-unit id="26ec8d00fb6b55466b3a115f1d559422a7fa7aac" translate="yes" xml:space="preserve">
          <source>style</source>
          <target state="translated">style</target>
        </trans-unit>
        <trans-unit id="32086137294a3fe716c8e6d0c0d1042dd745dca5" translate="yes" xml:space="preserve">
          <source>subscriber</source>
          <target state="translated">subscriber</target>
        </trans-unit>
        <trans-unit id="5e9b60f69165f32f8930843ca718e10fdee30c52" translate="yes" xml:space="preserve">
          <source>tag</source>
          <target state="translated">tag</target>
        </trans-unit>
        <trans-unit id="0e8a3ad980ec179856012b7eecf4327e99cd44cd" translate="yes" xml:space="preserve">
          <source>target</source>
          <target state="translated">target</target>
        </trans-unit>
        <trans-unit id="3226ecbe650213a49cd03ae67140750e4f340083" translate="yes" xml:space="preserve">
          <source>template</source>
          <target state="translated">template</target>
        </trans-unit>
        <trans-unit id="404f9246544662e6670b6550a90a0bc6dc91b87e" translate="yes" xml:space="preserve">
          <source>template expression</source>
          <target state="translated">템플릿 표현</target>
        </trans-unit>
        <trans-unit id="097171505d6027027796927cf29c43bebb495622" translate="yes" xml:space="preserve">
          <source>template reference variable</source>
          <target state="translated">템플릿 참조 변수</target>
        </trans-unit>
        <trans-unit id="b52167a62a193752099382ad8b3fb5967405562a" translate="yes" xml:space="preserve">
          <source>template syntax</source>
          <target state="translated">템플릿 구문</target>
        </trans-unit>
        <trans-unit id="46fec4704f6e251e0e3e7a0b0fb32c476cf075ed" translate="yes" xml:space="preserve">
          <source>template-driven forms</source>
          <target state="translated">템플릿 기반 양식</target>
        </trans-unit>
        <trans-unit id="139470481646a69360eb130d30cf47f6c65770b1" translate="yes" xml:space="preserve">
          <source>that structural directives manipulate HTML layout.</source>
          <target state="translated">그 구조적 지시문은 HTML 레이아웃을 조작합니다.</target>
        </trans-unit>
        <trans-unit id="03be457e8f4aa9c78c4fdb06835a474c23421e81" translate="yes" xml:space="preserve">
          <source>that the Angular desugars &lt;a href=&quot;structural-directives#asterisk&quot;&gt;asterisk (*) syntax&lt;/a&gt; into a &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">Angular는 &lt;a href=&quot;structural-directives#asterisk&quot;&gt;별표 (*) 구문&lt;/a&gt; 을 &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; 으로 만듭니다.</target>
        </trans-unit>
        <trans-unit id="41adc023ac53208f3fe396baf3aec25c219861fb" translate="yes" xml:space="preserve">
          <source>the &lt;a href=&quot;template-syntax#expression-operators&quot;&gt;template expression operators&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;template-syntax#expression-operators&quot;&gt;템플릿 표현식 연산자&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="722ed1e18ea7306a5a63b6912b996f4ad7b12aa2" translate="yes" xml:space="preserve">
          <source>the &lt;code&gt;&lt;a href=&quot;../../core/elementref&quot;&gt;ElementRef&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../../core/injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; for the component wrapper</source>
          <target state="translated">컴포넌트 랩퍼 의 &lt;code&gt;&lt;a href=&quot;../../core/elementref&quot;&gt;ElementRef&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;../../core/injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ef7f7f2a5eb54fd0b30eb3a4facde878070a8cd9" translate="yes" xml:space="preserve">
          <source>the &lt;code&gt;&lt;a href=&quot;../api/forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; has the cross validation error returned by the &lt;code&gt;identityRevealed&lt;/code&gt; validator,</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 은 에 의해 반환 된 교차 유효성 검사 오류가 &lt;code&gt;identityRevealed&lt;/code&gt; 의 , 유효성 검사기를</target>
        </trans-unit>
        <trans-unit id="642ecdda9ca3fb3e138cabeea6da0b099aee9751" translate="yes" xml:space="preserve">
          <source>the &lt;code&gt;isStable&lt;/code&gt; Observable runs outside of the Angular zone.</source>
          <target state="translated">&lt;code&gt;isStable&lt;/code&gt; 관찰 가능한이 각 영역의 외부를 실행합니다.</target>
        </trans-unit>
        <trans-unit id="19eb6e9364409749b08590f19d6f0b109211ed2c" translate="yes" xml:space="preserve">
          <source>the AngularJS modules to bootstrap for this application</source>
          <target state="translated">이 어플리케이션을 부트 스트랩하는 AngularJS 모듈</target>
        </trans-unit>
        <trans-unit id="ada1cda9ec51e82d5a247f75b4bb38fdfd4f6f51" translate="yes" xml:space="preserve">
          <source>the AngularJS name of the component (&lt;code&gt;ng1Hero&lt;/code&gt;)</source>
          <target state="translated">컴포넌트의 AngularJS 이름 ( &lt;code&gt;ng1Hero&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="9e1e55ecc6860a7d2f861796482d40afa37820ef" translate="yes" xml:space="preserve">
          <source>the URL</source>
          <target state="translated">URL</target>
        </trans-unit>
        <trans-unit id="d46235b7a27accc33353c04827c93ecb2e3098b9" translate="yes" xml:space="preserve">
          <source>the application will never be stable if you start any kind of recurrent asynchronous task when the application starts (for example for a polling process, started with a &lt;code&gt;setInterval&lt;/code&gt;, a &lt;code&gt;setTimeout&lt;/code&gt; or using RxJS operators like &lt;code&gt;interval&lt;/code&gt;);</source>
          <target state="translated">애플리케이션이 시작될 때 (예 : 폴링 프로세스, &lt;code&gt;setInterval&lt;/code&gt; , &lt;code&gt;setTimeout&lt;/code&gt; 또는 &lt;code&gt;interval&lt;/code&gt; 과 같은 RxJS 연산자를 사용하여) 반복적 인 비동기 작업을 시작하면 애플리케이션이 안정적이지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="655e43a8678467816ccf3290c0a114f784efa6c3" translate="yes" xml:space="preserve">
          <source>the bitwise operators &lt;code&gt;|&lt;/code&gt; and &lt;code&gt;&amp;amp;&lt;/code&gt;</source>
          <target state="translated">비트 연산자 &lt;code&gt;|&lt;/code&gt; 그리고 &lt;code&gt;&amp;amp;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8662bc9223152775dbd379947dddc8fa8a61d1c1" translate="yes" xml:space="preserve">
          <source>the callout body can be written in markdown</source>
          <target state="translated">설명 선 본문을 마크 다운으로 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ec631780a2b7a17fa0c23e7abd5da9d26cde7c83" translate="yes" xml:space="preserve">
          <source>the callout header text is forced to all upper case</source>
          <target state="translated">설명 선 헤더 텍스트는 모두 대문자로 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="d9b0017a9a8dc169aead25992d270eff9adbbef7" translate="yes" xml:space="preserve">
          <source>the data to update (the modified hero in this case)</source>
          <target state="translated">업데이트 할 데이터 (이 경우 수정 된 영웅)</target>
        </trans-unit>
        <trans-unit id="5a4fcd2b3e56067577f53356484dbccbf2836691" translate="yes" xml:space="preserve">
          <source>the drop down is empty.</source>
          <target state="translated">드롭 다운이 비어 있습니다.</target>
        </trans-unit>
        <trans-unit id="8f64a56d6658d7e56ef8117f9f842a190cbfba08" translate="yes" xml:space="preserve">
          <source>the element on which to bootstrap the AngularJS application</source>
          <target state="translated">AngularJS 애플리케이션을 부트 스트랩 할 요소</target>
        </trans-unit>
        <trans-unit id="d9cb701e538732f785fd3791cf6c2196eb7cc814" translate="yes" xml:space="preserve">
          <source>the form has the cross validation error returned by the &lt;code&gt;identityRevealed&lt;/code&gt; validator,</source>
          <target state="translated">양식에 &lt;code&gt;identityRevealed&lt;/code&gt; 유효성 검사기에서 반환 한 교차 유효성 검사 오류가 있습니다 .</target>
        </trans-unit>
        <trans-unit id="2af5971dd9fcf8d3f3863e2e7d84984ab89f53ea" translate="yes" xml:space="preserve">
          <source>the name of the downgraded module (if any) that the injectable &quot;belongs to&quot;, as returned by a call to &lt;code&gt;&lt;a href=&quot;downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt;. It is the module, whose injector will be used for instantiating the injectable. (This option is only necessary when using &lt;code&gt;&lt;a href=&quot;downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; to downgrade more than one Angular module.)</source>
          <target state="translated">다운 그레이드 된 모듈의 이름 (있는 경우)의 호출에 의해 반환되는 주사는, &quot;에 속한다&quot;고 &lt;code&gt;&lt;a href=&quot;downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; . 인젝터를 인스턴스화하는 데 사용되는 인젝터 모듈입니다. 이 옵션은 &lt;code&gt;&lt;a href=&quot;downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; 을 사용하여 둘 이상의 Angular 모듈을 다운 그레이드 할 때만 필요 합니다.</target>
        </trans-unit>
        <trans-unit id="fdf8a67e66b4e8ee3ddab395ba4ba2b64ddf3b4c" translate="yes" xml:space="preserve">
          <source>the number to be formatted</source>
          <target state="translated">형식화 할 번호</target>
        </trans-unit>
        <trans-unit id="bc88412811443cf69e4f76807a748d36bfae0f6d" translate="yes" xml:space="preserve">
          <source>the product alert component to emit an event when the user clicks &quot;Notify Me&quot;</source>
          <target state="translated">사용자가 &quot;알림&quot;을 클릭 할 때 이벤트를 발생시키는 제품 경고 구성 요소</target>
        </trans-unit>
        <trans-unit id="48203779b3f800ade267e4838db1f1c73ee6d057" translate="yes" xml:space="preserve">
          <source>the product list component to act on that event</source>
          <target state="translated">해당 이벤트에 작용할 제품 목록 구성 요소</target>
        </trans-unit>
        <trans-unit id="49a390af98a72fc402af4e361789c2671c6d7de9" translate="yes" xml:space="preserve">
          <source>the user is yet to &lt;a href=&quot;form-validation#why-check-dirty-and-touched&quot;&gt;interact&lt;/a&gt; with the form.</source>
          <target state="translated">사용자는 아직 양식과 &lt;a href=&quot;form-validation#why-check-dirty-and-touched&quot;&gt;상호 작용&lt;/a&gt; 하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="a270f4dce96ce0cd4bbb35eac3490252ec12348f" translate="yes" xml:space="preserve">
          <source>then create the new application with</source>
          <target state="translated">그런 다음 새로운 응용 프로그램을 만듭니다</target>
        </trans-unit>
        <trans-unit id="0e02af4fed14283187a3eafb9745554ad9b51d86" translate="yes" xml:space="preserve">
          <source>this pipe is marked as pure hence it will not be re-evaluated when the input is mutated. Instead users should treat the date as an immutable object and change the reference when the pipe needs to re-run (this is to avoid reformatting the date on every change detection run which would be an expensive operation).</source>
          <target state="translated">이 파이프는 순수한 것으로 표시되어 있으므로 입력이 변경 될 때 다시 평가되지 않습니다. 대신 사용자는 날짜를 변경 불가능한 개체로 취급하고 파이프를 다시 실행해야 할 때 참조를 변경해야합니다 (이는 변경 작업이 실행될 때마다 비용이 많이 드는 변경 감지 실행마다 날짜를 다시 형식화하지 않도록하기위한 것임).</target>
        </trans-unit>
        <trans-unit id="3746b617db806401325727311d452f6c75a0781c" translate="yes" xml:space="preserve">
          <source>this pipe uses the Internationalization API. Therefore it is only reliable in Chrome and Opera browsers.</source>
          <target state="translated">이 파이프는 국제화 API를 사용합니다. 따라서 Chrome 및 Opera 브라우저에서만 신뢰할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="383216819013117c744030a6a4663a3af9c4bcb8" translate="yes" xml:space="preserve">
          <source>tick</source>
          <target state="translated">tick</target>
        </trans-unit>
        <trans-unit id="27dd7e89c051f49a6b1c3fbadc9bc9bfbb220e2e" translate="yes" xml:space="preserve">
          <source>timers are synchronous, &lt;code&gt;&lt;a href=&quot;../applicationref#tick&quot;&gt;tick()&lt;/a&gt;&lt;/code&gt; simulates the asynchronous passage of time.</source>
          <target state="translated">타이머는 동기식이며, &lt;code&gt;&lt;a href=&quot;../applicationref#tick&quot;&gt;tick()&lt;/a&gt;&lt;/code&gt; 은 비동기식 시간 경과를 시뮬레이션합니다.</target>
        </trans-unit>
        <trans-unit id="17951d9ab77e40d1789681f887f79658b348e7f1" translate="yes" xml:space="preserve">
          <source>timers are synchronous, &lt;code&gt;&lt;a href=&quot;applicationref#tick&quot;&gt;tick()&lt;/a&gt;&lt;/code&gt; simulates the asynchronous passage of time.</source>
          <target state="translated">타이머는 동기식이며, &lt;code&gt;&lt;a href=&quot;applicationref#tick&quot;&gt;tick()&lt;/a&gt;&lt;/code&gt; 은 비동기식 시간 경과를 시뮬레이션합니다.</target>
        </trans-unit>
        <trans-unit id="15c899639c738a04f9c4ed62a2259a4edc87f81d" translate="yes" xml:space="preserve">
          <source>timezone</source>
          <target state="translated">timezone</target>
        </trans-unit>
        <trans-unit id="5e2cbfa6f18dc7d34b5734cc3d30cf5beb5d7d40" translate="yes" xml:space="preserve">
          <source>tl</source>
          <target state="translated">tl</target>
        </trans-unit>
        <trans-unit id="4c83acb6d4d370b81265fbbf4b55b4827cd35aeb" translate="yes" xml:space="preserve">
          <source>to use &lt;a href=&quot;structural-directives#ngcontainer&quot;&gt;&lt;code&gt;&amp;lt;ng-container&amp;gt;&lt;/code&gt;&lt;/a&gt; as a grouping element when there is no suitable host element.</source>
          <target state="translated">사용 &lt;a href=&quot;structural-directives#ngcontainer&quot;&gt; &lt;code&gt;&amp;lt;ng-container&amp;gt;&lt;/code&gt; &lt;/a&gt; 더 적합한 숙주 요소가 없을 때 그룹화 요소로.</target>
        </trans-unit>
        <trans-unit id="62afaf61467f30f00ef514fd59b23ef5096a3bac" translate="yes" xml:space="preserve">
          <source>to wait until a hero arrives before elements appear in the DOM.</source>
          <target state="translated">요소가 DOM에 나타나기 전에 영웅이 도착할 때까지 기다립니다.</target>
        </trans-unit>
        <trans-unit id="37cd83a7dc07299e725114435b72292383951cd1" translate="yes" xml:space="preserve">
          <source>to write a &lt;a href=&quot;structural-directives#unless&quot;&gt;custom structural directive&lt;/a&gt;, &lt;code&gt;UnlessDirective&lt;/code&gt;.</source>
          <target state="translated">작성하는 &lt;a href=&quot;structural-directives#unless&quot;&gt;사용자 정의 구조 지시자&lt;/a&gt; , &lt;code&gt;UnlessDirective&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="ee977806d7286510da8b9a7492ba58e2484c0ecc" translate="yes" xml:space="preserve">
          <source>token</source>
          <target state="translated">token</target>
        </trans-unit>
        <trans-unit id="7d462d44d1a1eab7467c48929b730af8075dc0f7" translate="yes" xml:space="preserve">
          <source>token of application, root element</source>
          <target state="translated">응용 프로그램 토큰, 루트 요소</target>
        </trans-unit>
        <trans-unit id="56bf8ae82a107d348a5ad5b650394e3f79340670" translate="yes" xml:space="preserve">
          <source>transition</source>
          <target state="translated">transition</target>
        </trans-unit>
        <trans-unit id="2132df1c030ea995aca6e4989594731beabce404" translate="yes" xml:space="preserve">
          <source>transpile</source>
          <target state="translated">transpile</target>
        </trans-unit>
        <trans-unit id="80655da8d80aaaf92ce5357e7828dc09adb00993" translate="yes" xml:space="preserve">
          <source>tree</source>
          <target state="translated">tree</target>
        </trans-unit>
        <trans-unit id="63d62d4aee9a5d4fe8539e53a9e3d05ffc210c9b" translate="yes" xml:space="preserve">
          <source>trigger</source>
          <target state="translated">trigger</target>
        </trans-unit>
        <trans-unit id="6ce3b78682d907aacf9a73ea3878bf702f8c7edc" translate="yes" xml:space="preserve">
          <source>triggers a navigation.</source>
          <target state="translated">탐색을 트리거합니다.</target>
        </trans-unit>
        <trans-unit id="0904ae8bda7e4f824022edd0e7b8e5f25d315ae5" translate="yes" xml:space="preserve">
          <source>tslint</source>
          <target state="translated">tslint</target>
        </trans-unit>
        <trans-unit id="ad782ecdac770fc6eb9a62e44f90873fb97fb26b" translate="yes" xml:space="preserve">
          <source>two</source>
          <target state="translated">two</target>
        </trans-unit>
        <trans-unit id="d0a3e7f81a9885e99049d1cae0336d269d5e47a9" translate="yes" xml:space="preserve">
          <source>type</source>
          <target state="translated">type</target>
        </trans-unit>
        <trans-unit id="28c3ba9eba7bfa1b0cb1ce5542120923b42fffaa" translate="yes" xml:space="preserve">
          <source>underscore_case (or &quot;snake_case&quot;): Not typically used in Angular. Snake case uses words connected with underscores. For example, &quot;convert_link_mode&quot;.</source>
          <target state="translated">underscore_case (또는 &quot;snake_case&quot;) : 일반적으로 Angular에서 사용되지 않습니다. 뱀 사례는 밑줄로 연결된 단어를 사용합니다. 예를 들어 &quot;convert_link_mode&quot;입니다.</target>
        </trans-unit>
        <trans-unit id="7c537e5966c8bd26c48225c20935756c63af5a3f" translate="yes" xml:space="preserve">
          <source>unspecified</source>
          <target state="translated">unspecified</target>
        </trans-unit>
        <trans-unit id="7c5e83d7e7060a49636e0d40f38f1a7e6460c61d" translate="yes" xml:space="preserve">
          <source>upgrade</source>
          <target state="translated">upgrade</target>
        </trans-unit>
        <trans-unit id="24621bd2ec287590861e9dd2c0aa85a83f61d89c" translate="yes" xml:space="preserve">
          <source>useAnimation</source>
          <target state="translated">useAnimation</target>
        </trans-unit>
        <trans-unit id="5ace6bcab26e942b38a7965ab25444bc4f7c1d96" translate="yes" xml:space="preserve">
          <source>user-profile.service.ts</source>
          <target state="translated">user-profile.service.ts</target>
        </trans-unit>
        <trans-unit id="83fb38534351479ff37a24e7cbf9352899c14afa" translate="yes" xml:space="preserve">
          <source>v11</source>
          <target state="translated">v11</target>
        </trans-unit>
        <trans-unit id="8090fd368c8382fd4b216c5baa04c99769dfcc49" translate="yes" xml:space="preserve">
          <source>v4</source>
          <target state="translated">v4</target>
        </trans-unit>
        <trans-unit id="59e859397b1ab522aaf698d9d42d5f064fd11381" translate="yes" xml:space="preserve">
          <source>v5</source>
          <target state="translated">v5</target>
        </trans-unit>
        <trans-unit id="39bcc1930b969051426f5864f24b478ceafba7d8" translate="yes" xml:space="preserve">
          <source>v6</source>
          <target state="translated">v6</target>
        </trans-unit>
        <trans-unit id="f2cbea7e89a45f46819777bb78a1f5bd0241f64c" translate="yes" xml:space="preserve">
          <source>v8</source>
          <target state="translated">v8</target>
        </trans-unit>
        <trans-unit id="a8c661e992ccbe35af1b9e500734de7eb1b7e633" translate="yes" xml:space="preserve">
          <source>v9</source>
          <target state="translated">v9</target>
        </trans-unit>
        <trans-unit id="b9d86bb739a80e1d17c673b2217158a7ac893aa0" translate="yes" xml:space="preserve">
          <source>validate the form based on the values of two sibling controls,</source>
          <target state="translated">두 형제 제어의 값을 기반으로 양식의 유효성을 검사하고</target>
        </trans-unit>
        <trans-unit id="b070942386c61a4fa89e10f735209ca5fbe0cb8b" translate="yes" xml:space="preserve">
          <source>validation.directive.ts</source>
          <target state="translated">validation.directive.ts</target>
        </trans-unit>
        <trans-unit id="d09f83943f5f8f55980bff3927e0692132542c9d" translate="yes" xml:space="preserve">
          <source>value exported by the directive under a given name</source>
          <target state="translated">지정된 이름으로 지시문에 의해 내 보낸 값</target>
        </trans-unit>
        <trans-unit id="72fc0353e68de713b47154e58d701cce34124f36" translate="yes" xml:space="preserve">
          <source>var myScope = wtfCreateScope('MyClass#myMethod(ascii someVal)');</source>
          <target state="translated">var myScope = wtfCreateScope ( 'MyClass # myMethod (ascii someVal)');</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
