<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="angular">
    <body>
      <group id="angular">
        <trans-unit id="a2bb4e5bcae5441af519dafa4dbfbb031b95886b" translate="yes" xml:space="preserve">
          <source>The following example initializes the control with a sync validator.</source>
          <target state="translated">다음 예제에서는 동기화 유효성 검사기를 사용하여 컨트롤을 초기화합니다.</target>
        </trans-unit>
        <trans-unit id="3b75e86861a97b045bc93ed007c41a8143776dfe" translate="yes" xml:space="preserve">
          <source>The following example of non-tree-shakable providers in Angular configures a service provider for the injector of an NgModule.</source>
          <target state="translated">Angular의 다음 트리 비소 거 가능 공급자 예는 NgModule 인젝터에 대한 서비스 공급자를 구성합니다.</target>
        </trans-unit>
        <trans-unit id="ec9e15e6d86e0c21d5745d7731be95a7ec60e570" translate="yes" xml:space="preserve">
          <source>The following example of the long form is from the JSON schema for the schematic that the CLI uses to &lt;a href=&quot;https://github.com/angular/angular-cli/blob/ba8a6ea59983bb52a6f1e66d105c5a77517f062e/packages/schematics/angular/application/schema.json#L56&quot;&gt;generate applications&lt;/a&gt;. It defines the prompt that allows users to choose which style preprocessor they want to use for the application being created. By using the long form, the schematic can provide more explicit formatting of the menu choices.</source>
          <target state="translated">다음 긴 양식의 예는 CLI가 &lt;a href=&quot;https://github.com/angular/angular-cli/blob/ba8a6ea59983bb52a6f1e66d105c5a77517f062e/packages/schematics/angular/application/schema.json#L56&quot;&gt;애플리케이션&lt;/a&gt; 을 생성하는 데 사용하는 회로도에 대한 JSON 스키마의 것입니다 . 사용자가 작성중인 애플리케이션에 사용할 스타일 프리 프로세서를 선택할 수있는 프롬프트를 정의합니다. 긴 형식을 사용함으로써 회로도는 메뉴 선택의보다 명확한 형식을 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4f37dc68477f1bcc7af7bb9d791a86fea3c7c903" translate="yes" xml:space="preserve">
          <source>The following example puts &lt;code&gt;MinimalLogger&lt;/code&gt; to use in a simplified version of &lt;code&gt;HeroOfTheMonthComponent&lt;/code&gt;.</source>
          <target state="translated">다음 예제에서는 &lt;code&gt;MinimalLogger&lt;/code&gt; 를 단순화 된 버전의 &lt;code&gt;HeroOfTheMonthComponent&lt;/code&gt; 에서 사용하도록합니다 .</target>
        </trans-unit>
        <trans-unit id="6e9fea711c729f49958474fdb5f92f9b366656d5" translate="yes" xml:space="preserve">
          <source>The following example queries for inner elements and animates them individually using &lt;code&gt;&lt;a href=&quot;animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt;.</source>
          <target state="translated">다음 예제에서는 내부 요소를 쿼리하고 &lt;code&gt;&lt;a href=&quot;animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; 사용하여 내부 요소를 개별적으로 애니메이션합니다 .</target>
        </trans-unit>
        <trans-unit id="f694530f5219eedcd4de38cb0d70bea2e6819f53" translate="yes" xml:space="preserve">
          <source>The following example re-implements the previous test with &lt;code&gt;DebugElement.query()&lt;/code&gt; and the browser's &lt;code&gt;By.css&lt;/code&gt; method.</source>
          <target state="translated">다음 예제는 &lt;code&gt;DebugElement.query()&lt;/code&gt; 및 브라우저의 &lt;code&gt;By.css&lt;/code&gt; 메서드를 사용 하여 이전 테스트를 다시 구현합니다 .</target>
        </trans-unit>
        <trans-unit id="3382236c8e2f90c0af65e6c8d53fd60d3630e149" translate="yes" xml:space="preserve">
          <source>The following example registers a &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; with first name and last name controls, and listens for the &lt;em&gt;ngSubmit&lt;/em&gt; event when the button is clicked.</source>
          <target state="translated">다음의 예는 등록 &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 이름과 성을 제어하고,을 수신하는과 &lt;em&gt;ngSubmit의&lt;/em&gt; 버튼을 클릭하면 이벤트.</target>
        </trans-unit>
        <trans-unit id="7d806233c265cf7577c4168fb2ec4e2bbcf34c20" translate="yes" xml:space="preserve">
          <source>The following example registers a custom validator directive. Adding the validator to the existing collection of validators requires the &lt;code&gt;multi: true&lt;/code&gt; option.</source>
          <target state="translated">다음 예제는 사용자 정의 유효성 검증기 지시문을 등록합니다. 기존 유효성 검사기 모음에 유효성 검사기를 추가하려면 &lt;code&gt;multi: true&lt;/code&gt; 옵션이 필요합니다 .</target>
        </trans-unit>
        <trans-unit id="01ae3fed79d829eaaae19c04e6f33068fa10cc52" translate="yes" xml:space="preserve">
          <source>The following example registers a nested &lt;em&gt;name&lt;/em&gt;&lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; within an existing &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt;, and provides methods to retrieve the nested &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; and individual controls.</source>
          <target state="translated">다음 예는 중첩 레지스터 &lt;em&gt;이름 &lt;/em&gt; &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 기존 내의 &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 을 , 상기 중첩 된 검색 방법 제공 &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 개별 제어.</target>
        </trans-unit>
        <trans-unit id="322a6b3ef3f219a7bbd14499563b3ea72dcbac17" translate="yes" xml:space="preserve">
          <source>The following example returns a control with an initial value in a disabled state.</source>
          <target state="translated">다음 예제는 비활성화 된 상태에서 초기 값을 가진 컨트롤을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="bd9a13546ebb781b29fe8fced2d785a6e6d63b38" translate="yes" xml:space="preserve">
          <source>The following example rewrites the method with types:</source>
          <target state="translated">다음 예제는 유형으로 메소드를 재 작성합니다.</target>
        </trans-unit>
        <trans-unit id="c6ec9dd1508ebf2608cf1ab6c08758e8aba93be1" translate="yes" xml:space="preserve">
          <source>The following example sets the &lt;code&gt;OnPush&lt;/code&gt; change-detection strategy for a component (&lt;code&gt;&lt;a href=&quot;changedetectorref&quot;&gt;CheckOnce&lt;/a&gt;&lt;/code&gt;, rather than the default &lt;code&gt;&lt;a href=&quot;changedetectorref&quot;&gt;CheckAlways&lt;/a&gt;&lt;/code&gt;), then forces a second check after an interval. See &lt;a href=&quot;http://plnkr.co/edit/GC512b?p=preview&quot;&gt;live demo&lt;/a&gt;.</source>
          <target state="translated">다음 예는 설정 &lt;code&gt;OnPush&lt;/code&gt; 성분 (변하지 검출 전략 &lt;code&gt;&lt;a href=&quot;changedetectorref&quot;&gt;CheckOnce&lt;/a&gt;&lt;/code&gt; 보다는 기본 &lt;code&gt;&lt;a href=&quot;changedetectorref&quot;&gt;CheckAlways&lt;/a&gt;&lt;/code&gt; 다음 간격 후에 제 2 체크 강제). 참조 &lt;a href=&quot;http://plnkr.co/edit/GC512b?p=preview&quot;&gt;라이브 데모를&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="2b7471662574d24b0b47321a72e97d944e3b5e0c" translate="yes" xml:space="preserve">
          <source>The following example shows &lt;code&gt;NgFor&lt;/code&gt; applied to a simple &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;. (Don't forget the asterisk (&lt;code&gt;*&lt;/code&gt;) in front of &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt;.)</source>
          <target state="translated">다음 예제는 &lt;code&gt;NgFor&lt;/code&gt; 가 간단한 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 에 적용되는 것을 보여줍니다 . ( &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 앞의 별표 ( &lt;code&gt;*&lt;/code&gt; )를 잊지 마십시오 .)</target>
        </trans-unit>
        <trans-unit id="c562dfbb69c1a98a82e37e0a6c0f37cf9ac5b1f6" translate="yes" xml:space="preserve">
          <source>The following example shows an event binding that implements a click handler:</source>
          <target state="translated">다음 예제는 클릭 핸들러를 구현하는 이벤트 바인딩을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="38acb08759fa7468886194d08506e9a0ce5417d4" translate="yes" xml:space="preserve">
          <source>The following example shows controls using &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; within a form:</source>
          <target state="translated">다음 예제는 양식 내에서 &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; 을 사용 하는 컨트롤을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="e1e7f20571895e868a1c8bbfb2febc742c23aa30" translate="yes" xml:space="preserve">
          <source>The following example shows how a service class is properly marked so that a supporting service can be injected upon creation.</source>
          <target state="translated">다음 예제는 작성시 지원 서비스를 삽입 할 수 있도록 서비스 클래스가 올바르게 표시되는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="be72fc12fe5cf4dad5083e92e226c1dd40573ed3" translate="yes" xml:space="preserve">
          <source>The following example shows how cases can be nested:</source>
          <target state="translated">다음 예제는 사례를 중첩하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="2b046373177ebf89ea2deca1d2f5103060b13b2b" translate="yes" xml:space="preserve">
          <source>The following example shows how queries are defined and when their results are available in lifecycle hooks:</source>
          <target state="translated">다음 예제는 쿼리가 정의되는 방식과 수명주기 후크에서 결과를 사용할 수있는시기를 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="c077632398f31fdc18f53e137b5295be8371c9e1" translate="yes" xml:space="preserve">
          <source>The following example shows how the router can populate the &lt;code&gt;entryComponents&lt;/code&gt; field of an NgModule based on a router configuration that refers to components.</source>
          <target state="translated">다음 예는 라우터가 구성 요소를 참조하는 라우터 구성을 기반으로 NgModule 의 &lt;code&gt;entryComponents&lt;/code&gt; 필드를 채우는 방법을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="66e1fdebf35092f3863e2ae7d931c94e7887b327" translate="yes" xml:space="preserve">
          <source>The following example shows how to add a checkbox required validator to an input attached to an ngModel binding.</source>
          <target state="translated">다음 예제는 ngModel 바인딩에 연결된 입력에 확인란 필수 유효성 검증기를 추가하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="368867db6cc44008c62a0af9b4d9460201a18a2f" translate="yes" xml:space="preserve">
          <source>The following example shows how to add a maximum length validator to an input attached to an ngModel binding.</source>
          <target state="translated">다음 예제는 ngModel 바인딩에 연결된 입력에 최대 길이 유효성 검증기를 추가하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="d7fbccbb32b0f48876d290f593a4fb03cdd589f5" translate="yes" xml:space="preserve">
          <source>The following example shows how to add a minimum length validator to an input attached to an ngModel binding.</source>
          <target state="translated">다음 예제는 ngModel 바인딩에 연결된 입력에 최소 길이 유효성 검증기를 추가하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="4f808c8af5c2d51dc9eb174377afd8b05d67af5d" translate="yes" xml:space="preserve">
          <source>The following example shows how to add a pattern validator to an input attached to an ngModel binding.</source>
          <target state="translated">다음 예제는 ngModel 바인딩에 연결된 입력에 패턴 유효성 검증기를 추가하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="fff28e8f05131a85b2053d418fcdb7c05fec28f8" translate="yes" xml:space="preserve">
          <source>The following example shows how to add an email validator to an input attached to an ngModel binding.</source>
          <target state="translated">다음 예제는 ngModel 바인딩에 첨부 된 입력에 이메일 유효성 검증기를 추가하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="1c6423f6e2b9133747ffa3e301b8f9cca3c1a40b" translate="yes" xml:space="preserve">
          <source>The following example shows how to build a dynamic ad banner.</source>
          <target state="translated">다음 예는 동적 광고 배너를 작성하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="ee45e1a32fc4fd748ecba48456000a2fcf666eb2" translate="yes" xml:space="preserve">
          <source>The following example shows how to capture the form values from the &quot;ngSubmit&quot; event.</source>
          <target state="translated">다음 예제는 &quot;ngSubmit&quot;이벤트에서 양식 값을 캡처하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="6daf8cd22d12b0f67faa1ae29e1763c675f0abe5" translate="yes" xml:space="preserve">
          <source>The following example shows how to extend an existing list of factories, which will only be applied to the injector for this component and its children. This step is all that's required to make a new &lt;a href=&quot;iterablediffer&quot;&gt;&lt;code&gt;IterableDiffer&lt;/code&gt;&lt;/a&gt; available.</source>
          <target state="translated">다음 예제는 기존 팩토리 목록을 확장하는 방법을 보여줍니다.이 목록은이 구성 요소 및 해당 하위의 인젝터에만 적용됩니다. 이 단계는 새로운 &lt;a href=&quot;iterablediffer&quot;&gt; &lt;code&gt;IterableDiffer&lt;/code&gt; 를&lt;/a&gt; 사용 가능 하게하는 데 필요한 모든 것입니다 .</target>
        </trans-unit>
        <trans-unit id="83d90a3054ebd2d5ef9a349704d34a8e5393cb26" translate="yes" xml:space="preserve">
          <source>The following example shows how to extend an existing list of factories, which will only be applied to the injector for this component and its children. This step is all that's required to make a new &lt;a href=&quot;keyvaluediffer&quot;&gt;&lt;code&gt;KeyValueDiffer&lt;/code&gt;&lt;/a&gt; available.</source>
          <target state="translated">다음 예제는 기존 팩토리 목록을 확장하는 방법을 보여줍니다.이 목록은이 구성 요소 및 해당 하위의 인젝터에만 적용됩니다. 이 단계는 새로운 &lt;a href=&quot;keyvaluediffer&quot;&gt; &lt;code&gt;KeyValueDiffer&lt;/code&gt; 를&lt;/a&gt; 사용 가능 하게하는 데 필요한 모든 것입니다 .</target>
        </trans-unit>
        <trans-unit id="6b4c2655698aa0d2203e75b1289d0487cadd44e2" translate="yes" xml:space="preserve">
          <source>The following example shows how to find and focus the main content header in the DOM after navigation.</source>
          <target state="translated">다음 예제는 탐색 후 DOM에서 기본 컨텐츠 헤더를 찾아 초점을 맞추는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="51b27d39b057cf93861bc4cc7466e579ed4f5751" translate="yes" xml:space="preserve">
          <source>The following example shows how to make a simple progress bar accessible by using host binding to control accessibility-related attributes.</source>
          <target state="translated">다음 예는 호스트 바인딩을 사용하여 내게 필요한 옵션 관련 속성을 제어하여 간단한 진행률 표시 줄에 액세스하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="7a085757bc3f13deb2551df0f93cb8afa2b12e6b" translate="yes" xml:space="preserve">
          <source>The following example shows how to register multiple form controls within a form group and set their value.</source>
          <target state="translated">다음 예는 양식 그룹 내에 여러 양식 컨트롤을 등록하고 해당 값을 설정하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="a4a8014d1e2c1017305a9a1388855d8f4840149a" translate="yes" xml:space="preserve">
          <source>The following example shows how to set up an &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; in a child component that pushes data you enter in an HTML &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; to an array in the parent component.</source>
          <target state="translated">다음 예제는 HTML &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 에 입력 한 데이터를 부모 구성 요소의 배열로 푸시하는 자식 구성 요소에서 &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; 을 설정하는 방법을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="59c573eec5946e813c45e18762fdeb1633ef0ed4" translate="yes" xml:space="preserve">
          <source>The following example shows how to use a checkbox with a reactive form.</source>
          <target state="translated">다음 예제는 반응 형 양식에 확인란을 사용하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="cc2f6dbf31261ec056919eb80f43040dc8866c26" translate="yes" xml:space="preserve">
          <source>The following example shows how to use a number input with a reactive form.</source>
          <target state="translated">다음 예는 반응 형식으로 숫자 입력을 사용하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="cbeaaa1764396b191a1fa427696ca459afa3e019" translate="yes" xml:space="preserve">
          <source>The following example shows how to use a range input with a reactive form.</source>
          <target state="translated">다음 예제는 반응 형과 함께 범위 입력을 사용하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="2958492ec328342f9b159f183a274c8962939e29" translate="yes" xml:space="preserve">
          <source>The following example shows how to use an input element that activates the default value accessor (in this case, a text field).</source>
          <target state="translated">다음 예제에서는 기본 접근자를 활성화하는 입력 요소 (이 경우 텍스트 필드)를 사용하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="1373b177c05a62a912a3ee24e9df3148944e063e" translate="yes" xml:space="preserve">
          <source>The following example shows how to use more than one case to display the same view:</source>
          <target state="translated">다음 예제는 둘 이상의 케이스를 사용하여 동일한보기를 표시하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="57f6f5878666eda756817f7b7efb36774821b332" translate="yes" xml:space="preserve">
          <source>The following example shows how to use this feature:</source>
          <target state="translated">다음 예제는이 기능을 사용하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="6afcdea92b2f9be1919de79ba7cbfe3d0ac7d219" translate="yes" xml:space="preserve">
          <source>The following example shows how to use this token to configure the root app injector with a base href value, so that the DI framework can supply the dependency anywhere in the app.</source>
          <target state="translated">다음 예제는이 토큰을 사용하여 DI href 프레임 워크가 앱의 어느 곳에서나 종속성을 제공 할 수 있도록 루트 href 인젝터를 base href 값으로 구성하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="5d099819839fc1d380d48e3ae14ffad753838d5c" translate="yes" xml:space="preserve">
          <source>The following example shows that &lt;code&gt;AppComponent&lt;/code&gt; declares its dependence on &lt;code&gt;LoggerService&lt;/code&gt; and &lt;code&gt;UserContext&lt;/code&gt;.</source>
          <target state="translated">다음 예제는 &lt;code&gt;AppComponent&lt;/code&gt; 가 &lt;code&gt;LoggerService&lt;/code&gt; 및 &lt;code&gt;UserContext&lt;/code&gt; 에 대한 종속성을 선언 함을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="9eab0e12b63f05899de75dd09db3f2df2fc6187d" translate="yes" xml:space="preserve">
          <source>The following example shows the result of transforming various strings into title case.</source>
          <target state="translated">다음 예는 다양한 문자열을 제목으로 변환 한 결과를 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="997f1dc43f8aed6fbbf9fd368a2a5dd9ea934b79" translate="yes" xml:space="preserve">
          <source>The following example shows the shorthand syntax with some options, contained in an &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; element.</source>
          <target state="translated">다음 예는 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 요소에 포함 된 몇 가지 옵션이있는 간단한 구문을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="a09b23068c66780f14d250956e96be5e43143ec4" translate="yes" xml:space="preserve">
          <source>The following example shows the tree-shakable equivalent to the &lt;code&gt;ServiceModule&lt;/code&gt; example above.</source>
          <target state="translated">다음 예제는 위 의 &lt;code&gt;ServiceModule&lt;/code&gt; 예제 와 동등한 트리 스태킹 가능을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="1d184cef72e57c09334c7d9ea86b425dc3afa8c4" translate="yes" xml:space="preserve">
          <source>The following example shows two event emitters that emit on an interval. One emits an output every second, while the other emits every five seconds.</source>
          <target state="translated">다음 예제는 일정한 간격으로 방출되는 두 개의 이벤트 이미 터를 보여줍니다. 하나는 1 초마다 출력을 내보내고 다른 하나는 5 초마다 출력합니다.</target>
        </trans-unit>
        <trans-unit id="1dffb0edfdea8768fda5ebffcf29790b5b84c38b" translate="yes" xml:space="preserve">
          <source>The following example shows you an alternate way to set the name attribute. The name attribute is used within a custom form component, and the name &lt;code&gt;@&lt;a href=&quot;../core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; property serves a different purpose.</source>
          <target state="translated">다음 예제는 name 속성을 설정하는 다른 방법을 보여줍니다. name 속성은 사용자 지정 양식 구성 요소 내에서 사용되며 name &lt;code&gt;@&lt;a href=&quot;../core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; 속성은 다른 용도로 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="988b27a653275f3bff65878a5b895d72cd36c77e" translate="yes" xml:space="preserve">
          <source>The following example shows you how to change the &quot;updateOn&quot; option from its default using ngFormOptions.</source>
          <target state="translated">다음 예제는 ngFormOptions를 사용하여 &quot;updateOn&quot;옵션을 기본값에서 변경하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="1e3b26c117fe86b059fd6e1a2232c67d9b63c33b" translate="yes" xml:space="preserve">
          <source>The following example shows you how to combine controls together in a sub-group of the form.</source>
          <target state="translated">다음 예제는 컨트롤을 폼의 하위 그룹으로 결합하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="7d204404893de6271980acee275f77cae148739b" translate="yes" xml:space="preserve">
          <source>The following example shows you how to display the current value using interpolation in the template.</source>
          <target state="translated">다음 예제는 템플릿에서 보간을 사용하여 현재 값을 표시하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="9dc1f820ec5c4e31a3ed11dfe150c2b8b75987f2" translate="yes" xml:space="preserve">
          <source>The following example shows you how to use a standalone ngModel control within a form. This controls the display of the form, but doesn't contain form data.</source>
          <target state="translated">다음 예제는 폼 내에서 독립형 ngModel 컨트롤을 사용하는 방법을 보여줍니다. 양식 표시를 제어하지만 양식 데이터는 포함하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="0a96a492f032a547b6f9125b434d8ea060fd4733" translate="yes" xml:space="preserve">
          <source>The following example stores the provided function as an internal method.</source>
          <target state="translated">다음 예제는 제공된 함수를 내부 메소드로 저장합니다.</target>
        </trans-unit>
        <trans-unit id="dff5d128062231c449f19fedce3237c98b922507" translate="yes" xml:space="preserve">
          <source>The following example targets all &lt;code&gt;&amp;lt;h3&amp;gt;&lt;/code&gt; elements, from the host element down through this component to all of its child elements in the DOM.</source>
          <target state="translated">다음 예제 는 호스트 구성 요소 &lt;code&gt;&amp;lt;h3&amp;gt;&lt;/code&gt; 구성 요소까지 DOM의 모든 하위 요소에 이르기까지 모든 &amp;lt;h3&amp;gt; 요소 를 대상으로합니다 .</target>
        </trans-unit>
        <trans-unit id="fa3b01423ddb68412ec695cd4482c822e7a7e696" translate="yes" xml:space="preserve">
          <source>The following example tries to set the component's &lt;code&gt;template&lt;/code&gt; property to the value of the exported &lt;code&gt;someTemplate&lt;/code&gt; variable which is declared but &lt;em&gt;unassigned&lt;/em&gt;.</source>
          <target state="translated">다음 예제에서는 구성 요소의 &lt;code&gt;template&lt;/code&gt; 속성을 선언되었지만 &lt;em&gt;할당되지 않은&lt;/em&gt; 내 보낸 &lt;code&gt;someTemplate&lt;/code&gt; 변수 의 값 으로 설정하려고합니다 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="251fedbc0f6af371679f4fa156ce7e3909346a2e" translate="yes" xml:space="preserve">
          <source>The following example uses a template reference variable to implement a keystroke loopback in a simple template.</source>
          <target state="translated">다음 예제는 템플릿 참조 변수를 사용하여 간단한 템플릿으로 키 스트로크 루프백을 구현합니다.</target>
        </trans-unit>
        <trans-unit id="44de5ab363b46660288190c053d7a6213ed61eaa" translate="yes" xml:space="preserve">
          <source>The following example uses auto-styling to allow a component to animate from a height of 0 up to the height of the parent element:</source>
          <target state="translated">다음 예제에서는 자동 스타일링을 사용하여 구성 요소를 높이 0에서 부모 요소 높이까지 애니메이션 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="069cb9c50eee1cb12d158d3323cefcaab458ccbe" translate="yes" xml:space="preserve">
          <source>The following example uses the &lt;a href=&quot;abstractcontrol#get&quot;&gt;get&lt;/a&gt; method to access individual controls within the group using dot syntax.</source>
          <target state="translated">다음 예제는 &lt;a href=&quot;abstractcontrol#get&quot;&gt;get&lt;/a&gt; 메소드를 사용하여 도트 구문을 사용하여 그룹 내의 개별 컨트롤에 액세스합니다.</target>
        </trans-unit>
        <trans-unit id="d4b4122ac3506b5e300f9fe1f7412e28b945f0eb" translate="yes" xml:space="preserve">
          <source>The following example uses the &lt;a href=&quot;abstractcontrol#get&quot;&gt;get&lt;/a&gt; method to access the associated &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">다음 예제는 &lt;a href=&quot;abstractcontrol#get&quot;&gt;get&lt;/a&gt; 메소드를 사용하여 연관된 &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 에 액세스합니다.</target>
        </trans-unit>
        <trans-unit id="0ec44a3326cea8016f405a38962d167a49282ce9" translate="yes" xml:space="preserve">
          <source>The following example uses the &lt;code&gt;ignore&lt;/code&gt; field to exclude certain files in the assets folder from being copied into the build:</source>
          <target state="translated">다음 예제는 &lt;code&gt;ignore&lt;/code&gt; 필드를 사용하여 자산 폴더의 특정 파일이 빌드로 복사되지 않도록 제외합니다.</target>
        </trans-unit>
        <trans-unit id="ca768a6447856248e05d7cc58b53fac8ddd37f3d" translate="yes" xml:space="preserve">
          <source>The following example uses the decorator to inject the string literal &lt;code&gt;text&lt;/code&gt;.</source>
          <target state="translated">다음 예제에서는 데코레이터를 사용하여 문자열 리터럴 &lt;code&gt;text&lt;/code&gt; 를 삽입합니다 .</target>
        </trans-unit>
        <trans-unit id="eb5ef26847f4c6bb4576ebd5051a24fffc69f9b8" translate="yes" xml:space="preserve">
          <source>The following example writes a value to the native DOM element.</source>
          <target state="translated">다음 예제는 고유 DOM 요소에 값을 씁니다.</target>
        </trans-unit>
        <trans-unit id="72f05bc4e050c0a036b7ee9e401d609482e4015f" translate="yes" xml:space="preserve">
          <source>The following examples create animation styles that collect a set of CSS property values:</source>
          <target state="translated">다음 예제는 CSS 속성 값 집합을 수집하는 애니메이션 스타일을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="459e7a5210520be2ebdc86dc38684f6553aa04d7" translate="yes" xml:space="preserve">
          <source>The following examples define transitions between the two defined states (and default states), using various options:</source>
          <target state="translated">다음 예제는 다양한 옵션을 사용하여 정의 된 두 상태 (및 기본 상태) 사이의 전환을 정의합니다.</target>
        </trans-unit>
        <trans-unit id="6c7c13798e2458b819d456bfdd01d7da3d7c6730" translate="yes" xml:space="preserve">
          <source>The following examples demonstrate how to modify default change-detection behavior to perform explicit detection when needed.</source>
          <target state="translated">다음 예는 기본 변경 감지 동작을 수정하여 필요한 경우 명시 적 감지를 수행하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="a2dba34eb7491a58432ad4932be25b6ceb269f40" translate="yes" xml:space="preserve">
          <source>The following examples revisit two of the &lt;code&gt;TwainComponent&lt;/code&gt; tests with marble testing.</source>
          <target state="translated">다음 예제 는 대리석 테스트 를 통해 &lt;code&gt;TwainComponent&lt;/code&gt; 테스트 중 두 가지를 다시 살펴 봅니다 .</target>
        </trans-unit>
        <trans-unit id="fe4d1dc55bed59fbfefe7303b68660eabb2d82d0" translate="yes" xml:space="preserve">
          <source>The following examples show a simple standalone control using &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">다음 예제는 &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; 을 사용한 간단한 독립형 컨트롤을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="4fc88102b63983b94153026634db490e12748eb6" translate="yes" xml:space="preserve">
          <source>The following examples show how to use a select control in a reactive form.</source>
          <target state="translated">다음 예제는 선택 컨트롤을 반응 형으로 사용하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="237f9f6e9900e6f0dc1fc654e095fe6275c71b7a" translate="yes" xml:space="preserve">
          <source>The following examples show various &lt;code&gt;timings&lt;/code&gt; specifications.</source>
          <target state="translated">다음 예는 다양한 &lt;code&gt;timings&lt;/code&gt; 사양을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="5f4d2b0076660bb96fee07f703fa6b241bb56e96" translate="yes" xml:space="preserve">
          <source>The following examples shows how to register a standalone control and set its value.</source>
          <target state="translated">다음 예제는 독립형 제어를 등록하고 해당 값을 설정하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="8514f98ee54c6d7f9e2628e3962d79053cdd4d14" translate="yes" xml:space="preserve">
          <source>The following exported values can be aliased to local variables:</source>
          <target state="translated">다음과 같이 내 보낸 값은 로컬 변수에 별명을 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="62e616b6d0095e3bb10360974145d786228761d7" translate="yes" xml:space="preserve">
          <source>The following format message in the component template binds to the component's &lt;code&gt;gender&lt;/code&gt; property, which outputs one of the following string values: &quot;male&quot;, &quot;female&quot; or &quot;other&quot;. The message maps those values to the appropriate translations:</source>
          <target state="translated">구성 요소 템플리트의 다음 형식 메시지는 구성 요소의 &lt;code&gt;gender&lt;/code&gt; 특성에 바인드되어 &quot;male&quot;, &quot;female&quot;또는 &quot;other&quot;문자열 값 중 하나를 출력합니다. 메시지는 해당 값을 적절한 번역으로 매핑합니다.</target>
        </trans-unit>
        <trans-unit id="257cd6c433a723247e55e6b1ea41d9b5ac15489c" translate="yes" xml:space="preserve">
          <source>The following hooks take action based on changing values &lt;em&gt;within the child view&lt;/em&gt;, which can only be reached by querying for the child view via the property decorated with &lt;a href=&quot;../api/core/viewchild&quot;&gt;@ViewChild&lt;/a&gt;.</source>
          <target state="translated">다음 후크 &lt;em&gt;는 하위 뷰 내에서&lt;/em&gt; 값을 변경하는 것에 따라 조치를 취하는데 , 이는 &lt;a href=&quot;../api/core/viewchild&quot;&gt;@ViewChild로&lt;/a&gt; 장식 된 특성을 통해 하위 뷰를 조회해야만 도달 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e81974601b5eeac5fe055890e3562d697f17cbf9" translate="yes" xml:space="preserve">
          <source>The following image shows the effect of mousing over the &lt;code&gt;&amp;lt;hero-bios-and-contacts&amp;gt;&lt;/code&gt; tag.</source>
          <target state="translated">다음 이미지는 &lt;code&gt;&amp;lt;hero-bios-and-contacts&amp;gt;&lt;/code&gt; 태그 위에 마우스를 놓은 효과를 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="0be1b281c327a57359a32dbec200dbb405ead34f" translate="yes" xml:space="preserve">
          <source>The following invokes the defined animation with a call to &lt;code&gt;&lt;a href=&quot;useanimation&quot;&gt;useAnimation&lt;/a&gt;()&lt;/code&gt;, passing in override parameter values.</source>
          <target state="translated">다음은 재정의 매개 변수 값을 전달 하여 &lt;code&gt;&lt;a href=&quot;useanimation&quot;&gt;useAnimation&lt;/a&gt;()&lt;/code&gt; 을 호출하여 정의 된 애니메이션을 호출 합니다.</target>
        </trans-unit>
        <trans-unit id="27db2b5bc00e4f188ea46c5deb7fb5587ac85224" translate="yes" xml:space="preserve">
          <source>The following is a &lt;code&gt;setCurrentStyles()&lt;/code&gt; method that sets a component property, &lt;code&gt;currentStyles&lt;/code&gt;, with an object that defines three styles, based on the state of three other component properties:</source>
          <target state="translated">다음은 세 가지 다른 구성 요소 속성의 상태에 따라 세 가지 스타일을 정의하는 객체 로 구성 요소 속성 &lt;code&gt;currentStyles&lt;/code&gt; 를 설정 하는 &lt;code&gt;setCurrentStyles()&lt;/code&gt; 메서드입니다 .</target>
        </trans-unit>
        <trans-unit id="610692584293dfd2fb6fcb4af8bd9c779e7a454d" translate="yes" xml:space="preserve">
          <source>The following is a child &lt;code&gt;CountdownTimerComponent&lt;/code&gt; that repeatedly counts down to zero and launches a rocket. It has &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;stop&lt;/code&gt; methods that control the clock and it displays a countdown status message in its own template.</source>
          <target state="translated">다음은 반복적으로 0으로 카운트 다운하고 로켓을 시작하는 자식 &lt;code&gt;CountdownTimerComponent&lt;/code&gt; 입니다. 그것은했다 &lt;code&gt;start&lt;/code&gt; 과 &lt;code&gt;stop&lt;/code&gt; 시계를 제어하는 방법을 그리고 자신의 템플릿 카운트 다운 상태 메시지를 표시합니다.</target>
        </trans-unit>
        <trans-unit id="7326f4531184dc8d93c37051d97ac9e13cd1c12e" translate="yes" xml:space="preserve">
          <source>The following is a typical example.</source>
          <target state="translated">다음은 일반적인 예입니다.</target>
        </trans-unit>
        <trans-unit id="55843c76bb937b5c99ade8fb44814616949b7628" translate="yes" xml:space="preserve">
          <source>The following is an example of how the &lt;code&gt;&amp;lt;app-root&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; view trees are combined into a single logical tree:</source>
          <target state="translated">다음은 &lt;code&gt;&amp;lt;app-root&amp;gt;&lt;/code&gt; 및 &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; 보기 트리가 단일 논리 트리로 결합되는 방법의 예입니다.</target>
        </trans-unit>
        <trans-unit id="664fbc064070f409303fb12c41e2bb73522bd8a0" translate="yes" xml:space="preserve">
          <source>The following is an example of how you can use &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; to link the two modules.</source>
          <target state="translated">다음은 &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; 을 사용 하여 두 모듈을 연결하는 방법의 예입니다 .</target>
        </trans-unit>
        <trans-unit id="8607bb858867baa84b109da9d0c1ff3859efd04b" translate="yes" xml:space="preserve">
          <source>The following is an example of specifying a bootstrapped component, &lt;code&gt;AppComponent&lt;/code&gt;, in a basic &lt;code&gt;app.module.ts&lt;/code&gt;:</source>
          <target state="translated">다음은 기본 &lt;code&gt;app.module.ts&lt;/code&gt; 에서 부트 스트랩 된 구성 요소 &lt;code&gt;AppComponent&lt;/code&gt; 를 지정하는 예입니다 .</target>
        </trans-unit>
        <trans-unit id="453ca73d33c283d35d71394c3a21baf84fabbce3" translate="yes" xml:space="preserve">
          <source>The following is an example of writing the disabled property to a native DOM element:</source>
          <target state="translated">다음은 disabled 특성을 기본 DOM 요소에 쓰는 예제입니다.</target>
        </trans-unit>
        <trans-unit id="8fb7a4128454c301515b108ffaddee95b06eee50" translate="yes" xml:space="preserve">
          <source>The following line adds the &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt; to the &lt;code&gt;AppRoutingModule&lt;/code&gt;&lt;code&gt;imports&lt;/code&gt; array and configures it with the &lt;code&gt;routes&lt;/code&gt; in one step by calling &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">다음 행은 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt; 을 &lt;code&gt;AppRoutingModule&lt;/code&gt; &lt;code&gt;imports&lt;/code&gt; 배열에 추가하고 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt; 를 호출하여 한 단계로 &lt;code&gt;routes&lt;/code&gt; 를 사용하여 배열을 구성합니다 .</target>
        </trans-unit>
        <trans-unit id="301a3f6c250317996f1a7e73563e3c1f2daa213c" translate="yes" xml:space="preserve">
          <source>The following matcher matches HTML files.</source>
          <target state="translated">다음 매처는 HTML 파일과 일치합니다.</target>
        </trans-unit>
        <trans-unit id="085ddba18b2c5265e10006f356e68568d4824afc" translate="yes" xml:space="preserve">
          <source>The following options are available for configuring the AoT template compiler.</source>
          <target state="translated">AoT 템플릿 컴파일러를 구성하는 데 다음 옵션을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bc78819d810ff269dc610903ab67d72f0566f184" translate="yes" xml:space="preserve">
          <source>The following pattern is deprecated:</source>
          <target state="translated">다음 패턴은 더 이상 사용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="dfcc5dab05630152017f437c01aea4388857e4f2" translate="yes" xml:space="preserve">
          <source>The following polyfills are used to test the framework itself. They are a good starting point for an application.</source>
          <target state="translated">다음 폴리 필은 프레임 워크 자체를 테스트하는 데 사용됩니다. 그것들은 어플리케이션을위한 좋은 출발점입니다.</target>
        </trans-unit>
        <trans-unit id="e3d0650581e15a43999d42a2416501047b4f3a7b" translate="yes" xml:space="preserve">
          <source>The following properties, at the top level of the file, configure the workspace.</source>
          <target state="translated">파일의 최상위 레벨에서 다음 특성은 작업 공간을 구성합니다.</target>
        </trans-unit>
        <trans-unit id="7e985ef8314fd51479546a4ad9e18907e6515ed5" translate="yes" xml:space="preserve">
          <source>The following provider object uses the &lt;code&gt;&lt;a href=&quot;../api/core/valuesansprovider#useValue&quot;&gt;useValue&lt;/a&gt;&lt;/code&gt; key to associate the variable with the &lt;code&gt;Logger&lt;/code&gt; token.</source>
          <target state="translated">다음 제공자 오브젝트는 &lt;code&gt;&lt;a href=&quot;../api/core/valuesansprovider#useValue&quot;&gt;useValue&lt;/a&gt;&lt;/code&gt; 키를 사용 하여 변수를 &lt;code&gt;Logger&lt;/code&gt; 토큰 과 연관시킵니다 .</target>
        </trans-unit>
        <trans-unit id="99189183b4cb84682cca267b2e990eeba8a565d5" translate="yes" xml:space="preserve">
          <source>The following route creates sibling components with multiple outlets. When navigating to &lt;code&gt;/team/11(aux:chat/jim)&lt;/code&gt;, the router creates the 'Team' component next to the 'Chat' component. The 'Chat' component is placed into the 'aux' outlet.</source>
          <target state="translated">다음 경로는 여러 콘센트가있는 형제 구성 요소를 만듭니다. 를 탐색 할 때 &lt;code&gt;/team/11(aux:chat/jim)&lt;/code&gt; , 라우터가 생성하는 '팀' '채팅'구성 요소에 대한 구성 요소 옆에. '채팅'구성 요소는 'aux'콘센트에 배치됩니다.</target>
        </trans-unit>
        <trans-unit id="9dd6c9b80bc0194ec4f3aac76cae7d2d01f577d8" translate="yes" xml:space="preserve">
          <source>The following route specifies that when navigating to, for example, &lt;code&gt;/team/11/user/bob&lt;/code&gt;, the router creates the 'Team' component with the 'User' child component in it.</source>
          <target state="translated">다음 경로는 예를 들어 &lt;code&gt;/team/11/user/bob&lt;/code&gt; 을 탐색 할 때 라우터가 'User'하위 구성 요소로 'Team'구성 요소를 작성하도록 지정합니다.</target>
        </trans-unit>
        <trans-unit id="98cd7483f8aba2a02696564fcb82530e8aa235b9" translate="yes" xml:space="preserve">
          <source>The following route uses the &lt;code&gt;&lt;a href=&quot;route#redirectTo&quot;&gt;redirectTo&lt;/a&gt;&lt;/code&gt; property to ignore a segment of a given URL when looking for a child path.</source>
          <target state="translated">다음 경로는 &lt;code&gt;&lt;a href=&quot;route#redirectTo&quot;&gt;redirectTo&lt;/a&gt;&lt;/code&gt; 속성을 사용하여 자식 경로를 찾을 때 지정된 URL의 세그먼트를 무시합니다.</target>
        </trans-unit>
        <trans-unit id="2b01e0c8059fc0401e8549e70d7dcf5bc5f7ee96" translate="yes" xml:space="preserve">
          <source>The following route uses wild-card notation to specify a component that is always instantiated regardless of where you navigate to.</source>
          <target state="translated">다음 경로는 와일드 카드 표기법을 사용하여 어디를 탐색하든 항상 인스턴스화되는 구성 요소를 지정합니다.</target>
        </trans-unit>
        <trans-unit id="a6454d98dfd985ac59580f707d0a349be9a74d91" translate="yes" xml:space="preserve">
          <source>The following section refactors the &lt;code&gt;ProfileEditor&lt;/code&gt; component to use the form builder service to create form control and form group instances.</source>
          <target state="translated">다음 섹션에서는 양식 작성기 서비스를 사용하여 양식 제어 및 양식 그룹 인스턴스를 작성하기 위해 &lt;code&gt;ProfileEditor&lt;/code&gt; 구성 요소를 리팩터링합니다 .</target>
        </trans-unit>
        <trans-unit id="5465ea2f359e32bfe1a37ff57e84812529ef826d" translate="yes" xml:space="preserve">
          <source>The following sections excerpt methods of the sample's &lt;code&gt;HeroesService&lt;/code&gt;.</source>
          <target state="translated">다음 섹션에서는 샘플 &lt;code&gt;HeroesService&lt;/code&gt; 의 메소드를 발췌합니다 .</target>
        </trans-unit>
        <trans-unit id="a76c578936ab27254fb8d939de7a81db9437d38c" translate="yes" xml:space="preserve">
          <source>The following sections, comprising most of this guide, explore common component testing scenarios</source>
          <target state="translated">이 가이드의 대부분으로 구성된 다음 섹션에서는 일반적인 구성 요소 테스트 시나리오를 살펴 봅니다.</target>
        </trans-unit>
        <trans-unit id="7fdb271994a4a327f199629fee13b3b5218174bf" translate="yes" xml:space="preserve">
          <source>The following selectors are supported.</source>
          <target state="translated">다음과 같은 선택기가 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="5b0248f72441058a2d81893bf871c0a2c0bb3d1c" translate="yes" xml:space="preserve">
          <source>The following shows &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; guarding two &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;s. The &lt;code&gt;currentCustomer&lt;/code&gt; name appears only when there is a &lt;code&gt;currentCustomer&lt;/code&gt;. The &lt;code&gt;nullCustomer&lt;/code&gt; will not be displayed as long as it is &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">다음은 &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; 가 두 개의 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 를 지키고 있음을 보여줍니다 . &lt;code&gt;currentCustomer&lt;/code&gt; 의 이있는 경우에만 이름이 나타납니다 &lt;code&gt;currentCustomer&lt;/code&gt; . &lt;code&gt;nullCustomer&lt;/code&gt; 는 한 그대로 표시되지 않습니다 &lt;code&gt;null&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d137ad25db2cc877ca5df59f56e9a6b890ee5500" translate="yes" xml:space="preserve">
          <source>The following shows the new and the old implementations side-by-side.</source>
          <target state="translated">다음은 새로운 구현과 이전 구현을 나란히 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="e1bd79b4d2db06b7589c87d8dbd16316e269179c" translate="yes" xml:space="preserve">
          <source>The following shows use with the &lt;code&gt;@&lt;a href=&quot;optional&quot;&gt;Optional&lt;/a&gt;&lt;/code&gt; decorator, and allows for a null result.</source>
          <target state="translated">다음은 &lt;code&gt;@&lt;a href=&quot;optional&quot;&gt;Optional&lt;/a&gt;&lt;/code&gt; 데코레이터 와 함께 사용 하는 것으로 null 결과를 허용합니다.</target>
        </trans-unit>
        <trans-unit id="f6128302a128007a3c40e5752360cf21b438bb75" translate="yes" xml:space="preserve">
          <source>The following simple example injects a class into a component using the view provider specified in component metadata:</source>
          <target state="translated">다음 간단한 예제는 컴포넌트 메타 데이터에 지정된 뷰 제공자를 사용하여 클래스를 컴포넌트에 삽입합니다.</target>
        </trans-unit>
        <trans-unit id="01444f8aa1fd63fbea66ed3fbc4d76b3181f9147" translate="yes" xml:space="preserve">
          <source>The following snippet shows how a component can implement this interface to define an on-changes handler for an input property.</source>
          <target state="translated">다음 스 니펫은 구성 요소가 입력 인터페이스에 대한 변경시 핸들러를 정의하기 위해이 인터페이스를 구현하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="a2cf27e61d910f2a3062d16cd2b48905ec197f2c" translate="yes" xml:space="preserve">
          <source>The following snippet shows how a component can implement this interface to define its own after-check functionality.</source>
          <target state="translated">다음 스 니펫은 구성 요소가이 인터페이스를 구현하여 고유 한 사후 점검 기능을 정의하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="02c938106305027d23ab75882704caf8994a7b24" translate="yes" xml:space="preserve">
          <source>The following snippet shows how a component can implement this interface to define its own content initialization method.</source>
          <target state="translated">다음 스 니펫은 구성 요소가 고유 한 컨텐츠 초기화 방법을 정의하기 위해이 인터페이스를 구현하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="0e8fbeff69628590a0b295ba498767902ead9d66" translate="yes" xml:space="preserve">
          <source>The following snippet shows how a component can implement this interface to define its own custom clean-up method.</source>
          <target state="translated">다음 스 니펫은 구성 요소가이 인터페이스를 구현하여 고유 한 사용자 정의 정리 방법을 정의하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="411e84ca8d7c03f76c1b14b61d983ec8bab6408f" translate="yes" xml:space="preserve">
          <source>The following snippet shows how a component can implement this interface to define its own initialization method.</source>
          <target state="translated">다음 스 니펫은 구성 요소가이 인터페이스를 구현하여 자체 초기화 방법을 정의하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="94805b48a3f8993b901ee028c3968016d01e3964" translate="yes" xml:space="preserve">
          <source>The following snippet shows how a component can implement this interface to define its own view initialization method.</source>
          <target state="translated">다음 스 니펫은 구성 요소가이 인터페이스를 구현하여 고유 한보기 초기화 방법을 정의하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="1aff607a58501ecf10894e98220ffe4cf493e1de" translate="yes" xml:space="preserve">
          <source>The following snippet shows how a component can implement this interface to invoke it own change-detection cycle.</source>
          <target state="translated">다음 스 니펫은 구성 요소가이 인터페이스를 구현하여 자체 변경 감지주기를 호출하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="385410d96fd0d1ada306ab805640a6a9fe3ab05f" translate="yes" xml:space="preserve">
          <source>The following support packages are included as dependencies in the default &lt;code&gt;package.json&lt;/code&gt; file for a new Angular workspace.</source>
          <target state="translated">다음 지원 패키지는 새 Angular 작업 공간 의 기본 &lt;code&gt;package.json&lt;/code&gt; 파일에 종속성으로 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="79640a37e7e2636b4e4ea578ebf213b6e60d68d0" translate="yes" xml:space="preserve">
          <source>The following table contains our current target release dates for the next two major versions of Angular:</source>
          <target state="translated">다음 표에는 다음 두 주요 버전의 Angular에 대한 현재 대상 릴리스 날짜가 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="4ca2b1e7ed53f03929a56107550cff032e43e862" translate="yes" xml:space="preserve">
          <source>The following table demonstrates how Angular desugars microsyntax.</source>
          <target state="translated">다음 표는 Angular desugars가 어떻게 microsyntax를 사용하는지 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="7733978f307b95f03a15335e16eb927c523fa06b" translate="yes" xml:space="preserve">
          <source>The following table describes which expressions the collector can and cannot fold:</source>
          <target state="translated">다음 표는 콜렉터가 접을 수있는 표현식과 접을 수없는 표현식을 설명합니다.</target>
        </trans-unit>
        <trans-unit id="4e03431838c501d28cce8ddc5c46d3be138f46e9" translate="yes" xml:space="preserve">
          <source>The following table provides the status for Angular versions under support.</source>
          <target state="translated">다음 표는 지원되는 Angular 버전의 상태를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="d96b5c739c1826895418b2145bbddbdded331ea4" translate="yes" xml:space="preserve">
          <source>The following table summarizes the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; metadata properties.</source>
          <target state="translated">다음 표는 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 메타 데이터 속성을 요약 한 것 입니다.</target>
        </trans-unit>
        <trans-unit id="94f36be6c96bfbef3f8339094d4d44cbc04cfe6a" translate="yes" xml:space="preserve">
          <source>The following table summarizes the key characteristics of each feature module group.</source>
          <target state="translated">다음 표는 각 기능 모듈 그룹의 주요 특징을 요약 한 것입니다.</target>
        </trans-unit>
        <trans-unit id="fec16611f597670fac267bce5d690f6c5abe4600" translate="yes" xml:space="preserve">
          <source>The following tables describe each portion of the microsyntax grammar.</source>
          <target state="translated">다음 표는 마이크로 구문 문법의 각 부분을 설명합니다.</target>
        </trans-unit>
        <trans-unit id="4ce840172e7aa3dbc7025dbe2e8ba9084075ce24" translate="yes" xml:space="preserve">
          <source>The following template binds the value of &lt;code&gt;htmlSnippet&lt;/code&gt;, once by interpolating it into an element's content, and once by binding it to the &lt;code&gt;innerHTML&lt;/code&gt; property of an element:</source>
          <target state="translated">다음 템플릿은 &lt;code&gt;htmlSnippet&lt;/code&gt; 값을 요소의 내용에 보간하여 한 번, 요소의 &lt;code&gt;innerHTML&lt;/code&gt; 속성 에 바인딩하여 한 번 바인딩합니다 .</target>
        </trans-unit>
        <trans-unit id="95542803d1818e7b9ddf8543ea3d2f5e00675e56" translate="yes" xml:space="preserve">
          <source>The following template breaks down into two separate &lt;code&gt;&lt;a href=&quot;templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt; instances, an outer one and an inner one.</source>
          <target state="translated">다음 템플릿은 두 개의 개별 &lt;code&gt;&lt;a href=&quot;templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt; 인스턴스 (외부 인스턴스와 내부 인스턴스) 로 분류됩니다 .</target>
        </trans-unit>
        <trans-unit id="0cd0ff39268d1599e7449c7cc25bc25785f4bad2" translate="yes" xml:space="preserve">
          <source>The following test alternative calls the native element's own &lt;code&gt;click()&lt;/code&gt; method, which is perfectly fine for &lt;em&gt;this component&lt;/em&gt;.</source>
          <target state="translated">다음 테스트 대안은 고유 요소의 자체 &lt;code&gt;click()&lt;/code&gt; 메소드를 호출 하며이 &lt;em&gt;컴포넌트&lt;/em&gt; 에는 완벽하게 적합 &lt;em&gt;합니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="3e38312f70780e3491f68ec661365696be0e3289" translate="yes" xml:space="preserve">
          <source>The following test clicks the displayed hero and confirms that &lt;code&gt;Router.navigateByUrl&lt;/code&gt; is called with the expected url.</source>
          <target state="translated">다음 테스트는 표시된 히어로를 클릭하고 &lt;code&gt;Router.navigateByUrl&lt;/code&gt; 이 예상 URL과 함께 호출 되는지 확인합니다 .</target>
        </trans-unit>
        <trans-unit id="a6dfa1bb416d8e0295cb8c255d10104e0c62ad38" translate="yes" xml:space="preserve">
          <source>The following test confirms the expected behavior when the service returns an &lt;code&gt;ErrorObservable&lt;/code&gt;.</source>
          <target state="translated">다음 테스트는 서비스가 &lt;code&gt;ErrorObservable&lt;/code&gt; 을 반환 할 때 예상되는 동작을 확인합니다 .</target>
        </trans-unit>
        <trans-unit id="eeefd0a90ed65af64e72aa2c46c4435e2cb08978" translate="yes" xml:space="preserve">
          <source>The following test verifies that the hero name is propagated to the template via a binding.</source>
          <target state="translated">다음 테스트에서는 영웅 이름이 바인딩을 통해 템플릿으로 전파되는지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="669b416d81d58828e3baeba2592b6d7bdb997a78" translate="yes" xml:space="preserve">
          <source>The following test verifies the data flow from model to view.</source>
          <target state="translated">다음 테스트는 모델 간 데이터 흐름을 확인합니다.</target>
        </trans-unit>
        <trans-unit id="9493bee7e41e07ddded061eefd4c86697f978133" translate="yes" xml:space="preserve">
          <source>The following test verifies the data flow from view to model.</source>
          <target state="translated">다음 테스트는 뷰에서 모델로의 데이터 흐름을 확인합니다.</target>
        </trans-unit>
        <trans-unit id="f74f9a34c41218f6c8d1f966bf27413f11fe65fe" translate="yes" xml:space="preserve">
          <source>The following tests use the favorite color components mentioned earlier to verify the data flows from view to model and model to view for a reactive form.</source>
          <target state="translated">다음 테스트에서는 앞에서 언급 한 즐겨 사용하는 색상 구성 요소를 사용하여 반응 형의 뷰에서 모델 및 모델로의 데이터 흐름을 확인합니다.</target>
        </trans-unit>
        <trans-unit id="43b51a454408bcc622da34659c907ba79ec26345" translate="yes" xml:space="preserve">
          <source>The following tests use the favorite color components mentioned earlier to verify the data flows from view to model and model to view for a template-driven form.</source>
          <target state="translated">다음 테스트는 앞에서 언급 한 즐겨 사용하는 색상 구성 요소를 사용하여 템플릿 기반 양식의보기에서 모델 및 모델로의 데이터 흐름을 확인합니다.</target>
        </trans-unit>
        <trans-unit id="7fd03907907ea2e83f365fb45a4c105b4acdfd13" translate="yes" xml:space="preserve">
          <source>The following top-level configuration properties are available for each project, under &lt;code&gt;projects:&amp;lt;project_name&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;projects:&amp;lt;project_name&amp;gt;&lt;/code&gt; 프로젝트에서 각 프로젝트에 대해 다음과 같은 최상위 구성 특성을 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="75147566e331317e0ebd38d4c23e1fe75b6e9f20" translate="yes" xml:space="preserve">
          <source>The form control assigned to &lt;code&gt;name&lt;/code&gt; is displayed when the component is added to a template.</source>
          <target state="translated">컴포넌트가 템플릿에 추가되면 &lt;code&gt;name&lt;/code&gt; 지정된 폼 컨트롤 이 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="2230bb7f6f181d5dab7f244d6c86fa35f9398e04" translate="yes" xml:space="preserve">
          <source>The form has the following structure:</source>
          <target state="translated">양식의 구조는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="b34e294f68df7549c748b9444818ff001b758168" translate="yes" xml:space="preserve">
          <source>The form input element emits an &quot;input&quot; event with the latest value.</source>
          <target state="translated">양식 입력 요소는 최신 값을 가진 &quot;입력&quot;이벤트를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="a8655729b1ee08ecff05e7625d507f952f92fcd0" translate="yes" xml:space="preserve">
          <source>The form model is defined in the component class. To reflect the model in the view, you'll need a checkout form.</source>
          <target state="translated">폼 모델은 컴포넌트 클래스에서 정의됩니다. 뷰에 모델을 반영하려면 체크 아웃 양식이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="0ee382bec575b1f6da6bbb9cd31af78bff011d9e" translate="yes" xml:space="preserve">
          <source>The form model is the source of truth for the control, so when you click the button, the value of the input is changed within the component class, overriding its current value.</source>
          <target state="translated">폼 모델은 컨트롤의 진실 소스이므로 버튼을 클릭하면 입력 값이 구성 요소 클래스 내에서 변경되어 현재 값을 재정의합니다.</target>
        </trans-unit>
        <trans-unit id="2b5a84ea0eb09a364844c5d9b46df413273dce48" translate="yes" xml:space="preserve">
          <source>The form no longer exports any directives, and instead uses the &lt;code&gt;name&lt;/code&gt; getter defined in the component class.</source>
          <target state="translated">이 양식은 더 이상 지시문을 내 보내지 않으며 대신 컴포넌트 클래스에 정의 된 &lt;code&gt;name&lt;/code&gt; getter 를 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="c4afd0129b7e117b92146615638d0e4e2006fecc" translate="yes" xml:space="preserve">
          <source>The format for the currency indicator. One of the following:</source>
          <target state="translated">통화 표시기의 형식입니다. 다음 중 하나 :</target>
        </trans-unit>
        <trans-unit id="eee651f151097d3f793f7dd68113adcb34cf7213" translate="yes" xml:space="preserve">
          <source>The format type.</source>
          <target state="translated">형식 유형</target>
        </trans-unit>
        <trans-unit id="cd068df6dcd825ce5052a96a9a61c9e6c6f8bd76" translate="yes" xml:space="preserve">
          <source>The format, &lt;code&gt;wide&lt;/code&gt; or &lt;code&gt;narrow&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;wide&lt;/code&gt; 거나 &lt;code&gt;narrow&lt;/code&gt; 형식 입니다.</target>
        </trans-unit>
        <trans-unit id="526712cace2051a3820458eac477a227870a4798" translate="yes" xml:space="preserve">
          <source>The fragment of the URL</source>
          <target state="translated">URL의 조각</target>
        </trans-unit>
        <trans-unit id="0d182f34bb720d02d0ff9daf3877acfc53926309" translate="yes" xml:space="preserve">
          <source>The framework passes the event argument&amp;mdash;represented by &lt;code&gt;$event&lt;/code&gt;&amp;mdash;to the handler method, and the method processes it:</source>
          <target state="translated">프레임 워크는 &lt;code&gt;$event&lt;/code&gt; 로 표시되는 이벤트 인수를 핸들러 메소드에 전달하고 메소드는이를 처리합니다.</target>
        </trans-unit>
        <trans-unit id="cb343064f13dd87a34e507dfccab96b02bd2aebe" translate="yes" xml:space="preserve">
          <source>The full URL string</source>
          <target state="translated">전체 URL 문자열</target>
        </trans-unit>
        <trans-unit id="88085ca27e5b06d61296a4f74c271a308a999e84" translate="yes" xml:space="preserve">
          <source>The full URL string.</source>
          <target state="translated">전체 URL 문자열</target>
        </trans-unit>
        <trans-unit id="7f0cbd8363677df2b3ea5c867b26387e1ee8078d" translate="yes" xml:space="preserve">
          <source>The full path for the TypeScript configuration file, relative to the current workspace.</source>
          <target state="translated">현재 작업 공간을 기준으로 TypeScript 구성 파일의 전체 경로입니다.</target>
        </trans-unit>
        <trans-unit id="8023b8cae23a8f17607eebcdfccedf1316888f2a" translate="yes" xml:space="preserve">
          <source>The full path for the main entry point to the app, relative to the current workspace.</source>
          <target state="translated">현재 작업 공간을 기준으로 앱에 대한 기본 진입 점의 전체 경로입니다.</target>
        </trans-unit>
        <trans-unit id="9fcf0e0bdd67b2fc8e34d78b3c0248617ad77ccf" translate="yes" xml:space="preserve">
          <source>The full path for the new output directory, relative to the current workspace.</source>
          <target state="translated">현재 작업 공간을 기준으로 새 출력 디렉토리의 전체 경로입니다.</target>
        </trans-unit>
        <trans-unit id="eed94568aa1a8e2503cf46beaf9ea9475b325fba" translate="yes" xml:space="preserve">
          <source>The full path for the polyfills file, relative to the current workspace.</source>
          <target state="translated">현재 작업 공간을 기준으로 폴리 필 파일의 전체 경로입니다.</target>
        </trans-unit>
        <trans-unit id="72ca397dc507125a0d20ad46ccbf197c1c42a7a1" translate="yes" xml:space="preserve">
          <source>The full response including the body was received.</source>
          <target state="translated">본문을 포함한 전체 응답이 접수되었습니다.</target>
        </trans-unit>
        <trans-unit id="e6503b9b0cc09112e25c5a60b6304d09a44f4ed9" translate="yes" xml:space="preserve">
          <source>The full source for the final version of the app can be seen and downloaded from the live example.</source>
          <target state="translated">실제 예제에서 앱의 최종 버전에 대한 전체 소스를보고 다운로드 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ae6e08f7e449effe9eff51219d47a00a65d9c956" translate="yes" xml:space="preserve">
          <source>The function is actually a factory that takes a regular expression to detect a &lt;em&gt;specific&lt;/em&gt; forbidden name and returns a validator function.</source>
          <target state="translated">이 함수는 실제로 &lt;em&gt;특정&lt;/em&gt; 금지 된 이름 을 감지하기 위해 정규식을 사용 하고 유효성 검사기 함수를 반환하는 팩토리입니다 .</target>
        </trans-unit>
        <trans-unit id="48c80eeebb68498080f87297bd6cc25ebeabb884" translate="yes" xml:space="preserve">
          <source>The function receives two inputs, the iteration index and the node object ID.</source>
          <target state="translated">이 함수는 반복 색인과 노드 오브젝트 ID의 두 가지 입력을 수신합니다.</target>
        </trans-unit>
        <trans-unit id="be32b3ac1b2eb072a21ff75621b7e08425ea08f2" translate="yes" xml:space="preserve">
          <source>The function retrieves candidate heroes from the &lt;code&gt;HeroService&lt;/code&gt;, takes &lt;code&gt;2&lt;/code&gt; of them to be the runners-up, and returns their concatenated names. Look at the  for the full source code.</source>
          <target state="translated">로부터 함수를 검색 후보 영웅 &lt;code&gt;HeroService&lt;/code&gt; 는 , 소요 &lt;code&gt;2&lt;/code&gt; 준우승으로 그들을, 그들의 연결된 이름을 반환합니다. 전체 소스 코드를 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="a09d2a5d397e66aa18cf75d4bb9e37f09ac8bfb3" translate="yes" xml:space="preserve">
          <source>The function returns the string of names, which Angular than injects into the &lt;code&gt;runnersUp&lt;/code&gt; parameter of &lt;code&gt;HeroOfTheMonthComponent&lt;/code&gt;.</source>
          <target state="translated">함수가 반환 이름의 문자열의에 주입한다 이상의 각도있는 &lt;code&gt;runnersUp&lt;/code&gt; 의 의 매개 변수 &lt;code&gt;HeroOfTheMonthComponent&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="fc8a8d17b8274bbc32ca0cfca58f30d95ef0f38d" translate="yes" xml:space="preserve">
          <source>The function takes a winning &lt;code&gt;Hero&lt;/code&gt; and a &lt;code&gt;HeroService&lt;/code&gt; as arguments. Angular supplies these arguments from injected values identified by the two &lt;em&gt;tokens&lt;/em&gt; in the &lt;code&gt;deps&lt;/code&gt; array.</source>
          <target state="translated">이 함수는 승리 한 &lt;code&gt;Hero&lt;/code&gt; 및 &lt;code&gt;HeroService&lt;/code&gt; 를 인수로 사용합니다. Angular 는 &lt;code&gt;deps&lt;/code&gt; 배열 의 두 &lt;em&gt;토큰&lt;/em&gt; 으로 식별되는 주입 된 값에서 이러한 인수를 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="7fd4d00a7d9c89b4d22e796a799455efec2aec0f" translate="yes" xml:space="preserve">
          <source>The function that determines the asynchronous validity of this control.</source>
          <target state="translated">이 컨트롤의 비동기 유효성을 결정하는 함수입니다.</target>
        </trans-unit>
        <trans-unit id="75f21eecd9b997cf943218446152125dac02ddc1" translate="yes" xml:space="preserve">
          <source>The function that determines the synchronous validity of this control.</source>
          <target state="translated">이 컨트롤의 동기 유효성을 결정하는 함수입니다.</target>
        </trans-unit>
        <trans-unit id="65f7a04d29635cdb37413f0c3e472d4e275bd987" translate="yes" xml:space="preserve">
          <source>The functional API provided by the &lt;code&gt;@angular/animations&lt;/code&gt; module provides a domain-specific language (DSL) for creating and controlling animations in Angular applications. See the &lt;a href=&quot;../api/animations&quot;&gt;API reference&lt;/a&gt; for a complete listing and syntax details of the core functions and related data structures.</source>
          <target state="translated">&lt;code&gt;@angular/animations&lt;/code&gt; 모듈에서 제공하는 기능 API 는 Angular 응용 프로그램에서 애니메이션을 만들고 제어하기위한 DSL (Domain-Specific Language)을 제공합니다. 핵심 기능 및 관련 데이터 구조의 전체 목록 및 구문 세부 사항은 &lt;a href=&quot;../api/animations&quot;&gt;API 참조&lt;/a&gt; 를 참조 하십시오 .</target>
        </trans-unit>
        <trans-unit id="39cc10df89d390f57860b9af6c0adb017e7434d2" translate="yes" xml:space="preserve">
          <source>The gathering of CLI analytics data is disabled by default, and must be enabled at the project level by individual users. It cannot be enabled at the project level for all users.</source>
          <target state="translated">CLI 분석 데이터 수집은 기본적으로 비활성화되어 있으며 개별 사용자가 프로젝트 수준에서 활성화해야합니다. 모든 사용자에 대해 프로젝트 레벨에서 사용하도록 설정할 수는 없습니다.</target>
        </trans-unit>
        <trans-unit id="fdd0a7a0c40007f4996ec51aa08759927de0515e" translate="yes" xml:space="preserve">
          <source>The generated &lt;code&gt;ngsw-config.json&lt;/code&gt; includes a limited list of cachable fonts and images extentions. In some cases, you might want to modify the glob pattern to suit your needs.</source>
          <target state="translated">생성 된 &lt;code&gt;ngsw-config.json&lt;/code&gt; 은 제한 가능한 캐치 가능한 글꼴 및 이미지 확장 목록을 포함합니다. 경우에 따라 글로브 패턴을 필요에 맞게 수정할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="4a279bf5db87a97440dc1aee59aa3be18678bef7" translate="yes" xml:space="preserve">
          <source>The generated &lt;code&gt;src/app/highlight.directive.ts&lt;/code&gt; is as follows:</source>
          <target state="translated">생성 된 &lt;code&gt;src/app/highlight.directive.ts&lt;/code&gt; 는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="e616c4f20e747c4816f0eec1d31528b85dafd2e4" translate="yes" xml:space="preserve">
          <source>The generated file looks like this:</source>
          <target state="translated">생성 된 파일은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="04803306c35b1db59a8611c4f1c5567aec8e4351" translate="yes" xml:space="preserve">
          <source>The generated output would look something like this:</source>
          <target state="translated">생성 된 출력은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="141073788fe40a99ac2d4c89d2b31fce8314ca6b" translate="yes" xml:space="preserve">
          <source>The generator creates starter files for all three parts of the component:</source>
          <target state="translated">생성기는 구성 요소의 세 부분 모두에 대한 스타터 파일을 작성합니다.</target>
        </trans-unit>
        <trans-unit id="bf05807c104db04e8ba4b4172fe1e0d537908a8f" translate="yes" xml:space="preserve">
          <source>The generic &lt;code&gt;ng run&lt;/code&gt; CLI command takes as its first argument a target string of the form &lt;em&gt;project:target[:configuration]&lt;/em&gt;.</source>
          <target state="translated">일반 &lt;code&gt;ng run&lt;/code&gt; CLI 명령은 첫 번째 인수로 &lt;em&gt;project : target [: configuration]&lt;/em&gt; 형식의 대상 문자열을 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="7ec0f9f9bac30ff11b631988c34462992f22407b" translate="yes" xml:space="preserve">
          <source>The given URL path.</source>
          <target state="translated">주어진 URL 경로.</target>
        </trans-unit>
        <trans-unit id="ab814f412c1f1d0bae00400afb55a1234e1acc6e" translate="yes" xml:space="preserve">
          <source>The goal is to group the &lt;code&gt;Crisis Center&lt;/code&gt; management routes under the &lt;code&gt;admin&lt;/code&gt; path. You don't need a component to do it. A &lt;em&gt;component-less&lt;/em&gt; route makes it easier to &lt;a href=&quot;router#can-activate-child-guard&quot;&gt;guard child routes&lt;/a&gt;.</source>
          <target state="translated">목표는 &lt;code&gt;Crisis Center&lt;/code&gt; 관리 경로를 &lt;code&gt;admin&lt;/code&gt; 경로 아래 에 그룹화하는 것입니다 . 구성 요소가 필요하지 않습니다. &lt;em&gt;구성 요소가없는&lt;/em&gt; 경로를보다 쉽게 할 수 있습니다 &lt;a href=&quot;router#can-activate-child-guard&quot;&gt;자식 경로를 보호&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="7e3f53bd2e127f2d6cf985d6eab8a081c2e42cae" translate="yes" xml:space="preserve">
          <source>The greater danger is that &lt;strong&gt;a future rewording of the header text would break&lt;/strong&gt; a link to this section.</source>
          <target state="translated">더 큰 위험은 &lt;strong&gt;앞으로 헤더 텍스트&lt;/strong&gt; 를 다시 작성하면이 섹션에 대한 링크 &lt;strong&gt;가 끊어 질 수&lt;/strong&gt; 있다는 &lt;strong&gt;것&lt;/strong&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="1459c8d453ff8ac4153c0dff3f06d25103f5fe41" translate="yes" xml:space="preserve">
          <source>The grouping element may break the template appearance because CSS styles neither expect nor accommodate the new layout. For example, suppose you have the following paragraph layout.</source>
          <target state="translated">CSS 스타일은 새로운 레이아웃을 기대하거나 수용하지 않기 때문에 그룹화 요소가 템플릿 모양을 손상시킬 수 있습니다. 예를 들어 다음과 같은 단락 레이아웃이 있다고 가정합니다.</target>
        </trans-unit>
        <trans-unit id="186b7c1a6bbbaa6de4d2aef72af8c57b23e404a3" translate="yes" xml:space="preserve">
          <source>The guard &lt;em&gt;might&lt;/em&gt; return its boolean answer synchronously. But in many cases, the guard can't produce an answer synchronously. The guard could ask the user a question, save changes to the server, or fetch fresh data. These are all asynchronous operations.</source>
          <target state="translated">가드 는 부울 응답을 동 기적으로 반환 할 &lt;em&gt;수 있습니다&lt;/em&gt; . 그러나 많은 경우 경비원은 동기식으로 답변을 만들 수 없습니다. 보호자는 사용자에게 질문을하거나, 변경 사항을 서버에 저장하거나, 새로운 데이터를 가져올 수 있습니다. 이것들은 모두 비동기 작업입니다.</target>
        </trans-unit>
        <trans-unit id="0fb3fdf4c451ff27c87e95fb3c718c6ebc299464" translate="yes" xml:space="preserve">
          <source>The guide assumes that you're familiar with building basic Angular apps, as described in the following sections:</source>
          <target state="translated">이 가이드에서는 다음 섹션에 설명 된대로 기본 Angular 앱을 작성하는 데 익숙하다고 가정합니다.</target>
        </trans-unit>
        <trans-unit id="1e22bed2867320095b59b4361abac2b59605d915" translate="yes" xml:space="preserve">
          <source>The guide presents tests of a sample application created with the &lt;a href=&quot;cli&quot;&gt;Angular CLI&lt;/a&gt;. This sample application is much like the one created in the &lt;a href=&quot;tutorial&quot;&gt;&lt;em&gt;Tour of Heroes&lt;/em&gt; tutorial&lt;/a&gt;. The sample application and all tests in this guide are available for inspection and experimentation:</source>
          <target state="translated">이 안내서는 &lt;a href=&quot;cli&quot;&gt;Angular CLI로&lt;/a&gt; 작성된 샘플 애플리케이션의 테스트를 제공합니다 . 이 샘플 응용 프로그램은 &lt;a href=&quot;tutorial&quot;&gt;&lt;em&gt;Tour of Heroes&lt;/em&gt; 자습서&lt;/a&gt; 에서 만든 응용 프로그램과 매우 유사합니다 . 이 안내서의 샘플 응용 프로그램 및 모든 테스트는 검사 및 실험에 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="421303822387da04a3b56e711c4f3ea0bceaf8e8" translate="yes" xml:space="preserve">
          <source>The guide proceeds as a sequence of milestones as if you were building the app step-by-step. But, it is not a tutorial and it glosses over details of Angular application construction that are more thoroughly covered elsewhere in the documentation.</source>
          <target state="translated">이 가이드는 마치 앱을 단계별로 구축하는 것처럼 일련의 이정표로 진행됩니다. 그러나 이것은 튜토리얼이 아니며 문서의 다른 부분에서 더 자세히 다루는 Angular 응용 프로그램 구성에 대한 세부 사항을 다룹니다.</target>
        </trans-unit>
        <trans-unit id="56409968972545a88fbd9eded9e76b93ccbbcd50" translate="yes" xml:space="preserve">
          <source>The guideline uses the shortcut &lt;code&gt;hero.component.ts|html|css|spec&lt;/code&gt; to represent those various files. Using this shortcut makes this guide's file structures easier to read and more terse.</source>
          <target state="translated">이 가이드 라인은 바로 가기 &lt;code&gt;hero.component.ts|html|css|spec&lt;/code&gt; 을 사용하여 다양한 파일을 나타냅니다. 이 바로 가기를 사용하면이 안내서의 파일 구조를 더 읽기 쉽고 간결하게 만들 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a864f76394ca2c5a51fde927a0643f0c50460ce3" translate="yes" xml:space="preserve">
          <source>The guidelines described here serve two purposes:</source>
          <target state="translated">여기에 설명 된 지침은 두 가지 목적으로 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="1888c94c63bc6d73016893cf4e85b80718910a2a" translate="yes" xml:space="preserve">
          <source>The handlers delegate to a helper method that sets the color on the host DOM element, &lt;code&gt;el&lt;/code&gt;.</source>
          <target state="translated">핸들러는 호스트 DOM 요소 &lt;code&gt;el&lt;/code&gt; 의 색상을 설정하는 헬퍼 메소드에 위임합니다 .</target>
        </trans-unit>
        <trans-unit id="46bf71e9a7c208fa128b6a06edf63925677b2a2e" translate="yes" xml:space="preserve">
          <source>The has string</source>
          <target state="translated">문자열이</target>
        </trans-unit>
        <trans-unit id="36d211182de9d369a5c0e06f411a8bd524c5be83" translate="yes" xml:space="preserve">
          <source>The header name for which to append the value or values.</source>
          <target state="translated">값을 추가 할 헤더 이름입니다.</target>
        </trans-unit>
        <trans-unit id="f7ae4cade9263fbb970a7b0cf00131afd1c12bb5" translate="yes" xml:space="preserve">
          <source>The header name from which to retrieve values.</source>
          <target state="translated">값을 검색 할 헤더 이름입니다.</target>
        </trans-unit>
        <trans-unit id="5c71c1c8b2b761ca699cfa043cb799e05f3e6574" translate="yes" xml:space="preserve">
          <source>The header name to check for existence.</source>
          <target state="translated">존재 여부를 확인할 헤더 이름입니다.</target>
        </trans-unit>
        <trans-unit id="1af3be1a7d51a18f36d735ad45a99c8687d62de5" translate="yes" xml:space="preserve">
          <source>The header name.</source>
          <target state="translated">헤더 이름</target>
        </trans-unit>
        <trans-unit id="1fb8a670c061e1780c533d1cfa92b7cada304777" translate="yes" xml:space="preserve">
          <source>The helper method, &lt;code&gt;highlight&lt;/code&gt;, was extracted from the constructor. The revised constructor simply declares the injected &lt;code&gt;el: &lt;a href=&quot;../api/core/elementref&quot;&gt;ElementRef&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">도우미 메소드 인 &lt;code&gt;highlight&lt;/code&gt; 는 생성자에서 추출되었습니다. 수정 된 생성자는 주입 된 &lt;code&gt;el: &lt;a href=&quot;../api/core/elementref&quot;&gt;ElementRef&lt;/a&gt;&lt;/code&gt; 를 선언합니다 .</target>
        </trans-unit>
        <trans-unit id="77deeab503fd68fae60b1683faba0eaee8d11b6b" translate="yes" xml:space="preserve">
          <source>The helper sets up global variables to hold the shared Angular and AngularJS injectors.</source>
          <target state="translated">도우미는 공유 Angular 및 AngularJS 인젝터를 보유 할 전역 변수를 설정합니다.</target>
        </trans-unit>
        <trans-unit id="4ae082078f4b7ac534ba00e2fb2f643830e768fa" translate="yes" xml:space="preserve">
          <source>The hero &lt;em&gt;Alter Ego&lt;/em&gt; is optional so you can leave that be.</source>
          <target state="translated">영웅 &lt;em&gt;Alter Ego&lt;/em&gt; 는 선택 사항이므로 그대로 둘 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="71c6566d940a46db02f0c867ecf070621fd765b9" translate="yes" xml:space="preserve">
          <source>The hero agency is planning an ad campaign with several different ads cycling through the banner. New ad components are added frequently by several different teams. This makes it impractical to use a template with a static component structure.</source>
          <target state="translated">영웅 대행사는 배너를 통해 여러 가지 광고가 순환하는 광고 캠페인을 계획하고 있습니다. 새로운 광고 구성 요소는 여러 다른 팀에 의해 자주 추가됩니다. 따라서 정적 구성 요소 구조가있는 템플릿을 사용하는 것은 실용적이지 않습니다.</target>
        </trans-unit>
        <trans-unit id="8763e74d500e6e70efa6309067129b019b2ca2e7" translate="yes" xml:space="preserve">
          <source>The hero editor.</source>
          <target state="translated">영웅 편집자.</target>
        </trans-unit>
        <trans-unit id="0728ae26bedae4b1d12eb889d15f0b5193a7c81f" translate="yes" xml:space="preserve">
          <source>The hero form uses the &lt;code&gt;.ng-valid&lt;/code&gt; and &lt;code&gt;.ng-invalid&lt;/code&gt; classes to set the color of each form control's border.</source>
          <target state="translated">영웅 양식은 &lt;code&gt;.ng-valid&lt;/code&gt; 및 &lt;code&gt;.ng-invalid&lt;/code&gt; 클래스를 사용하여 각 양식 컨트롤의 테두리 색상을 설정합니다.</target>
        </trans-unit>
        <trans-unit id="21d7974b34602306dfbd0d2ab859c721b4a0b3f4" translate="yes" xml:space="preserve">
          <source>The hero items in the &lt;code&gt;HeroesComponent&lt;/code&gt; are &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; elements whose click events are bound to the component's &lt;code&gt;onSelect()&lt;/code&gt; method.</source>
          <target state="translated">의 영웅 항목 &lt;code&gt;HeroesComponent&lt;/code&gt; 가 있습니다 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 누구의 클릭 이벤트 구성 요소의 결합되는 요소 &lt;code&gt;onSelect()&lt;/code&gt; 하는 방법.</target>
        </trans-unit>
        <trans-unit id="592678c7214943d825426d0e4505fa4a585ef418" translate="yes" xml:space="preserve">
          <source>The hero must choose one superpower from a fixed list of agency-approved powers. You maintain that list internally (in &lt;code&gt;HeroFormComponent&lt;/code&gt;).</source>
          <target state="translated">영웅은 고정 된 기관 승인 권한 목록에서 하나의 초강대국을 선택해야합니다. 해당 목록을 내부적으로 유지합니다 ( &lt;code&gt;HeroFormComponent&lt;/code&gt; 에서 ).</target>
        </trans-unit>
        <trans-unit id="473bad574572a351e437cb9cd6317f908f41d643" translate="yes" xml:space="preserve">
          <source>The hero routes are currently defined in &lt;em&gt;two&lt;/em&gt; places: in the &lt;code&gt;HeroesRoutingModule&lt;/code&gt;, by way of the &lt;code&gt;HeroesModule&lt;/code&gt;, and in the &lt;code&gt;AppRoutingModule&lt;/code&gt;.</source>
          <target state="translated">영웅 노선은 현재에 정의 된 &lt;em&gt;두 개의&lt;/em&gt; 장소 다음에 &lt;code&gt;HeroesRoutingModule&lt;/code&gt; ,의 방법으로 &lt;code&gt;HeroesModule&lt;/code&gt; , 그리고에 &lt;code&gt;AppRoutingModule&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8ea57673d1088103c595c56fde675da1370e3de5" translate="yes" xml:space="preserve">
          <source>The heroes feature has two interacting components, the hero list and the hero detail. The list view is self-sufficient; you navigate to it, it gets a list of heroes and displays them.</source>
          <target state="translated">영웅 기능에는 영웅 목록과 영웅 세부 사항의 두 가지 상호 작용 구성 요소가 있습니다. 목록보기는 자급 자족합니다. 당신은 그것으로 이동하면 영웅 목록을 가져와 표시합니다.</target>
        </trans-unit>
        <trans-unit id="f0c577a68776a18a7768c488dfda878388c07de5" translate="yes" xml:space="preserve">
          <source>The heroes feature module is almost complete, but what is a feature without some smooth transitions?</source>
          <target state="translated">영웅 기능 모듈은 거의 완벽하지만 전환이 원활하지 않은 기능은 무엇입니까?</target>
        </trans-unit>
        <trans-unit id="79f13609e0fe6dc3309e380f997fe13b9aeef97b" translate="yes" xml:space="preserve">
          <source>The heroes list should be attractive and should respond visually when users hover over and select a hero from the list.</source>
          <target state="translated">영웅 목록은 매력적이어야하며 사용자가 마우스를 올려 놓고 목록에서 영웅을 선택할 때 시각적으로 반응해야합니다.</target>
        </trans-unit>
        <trans-unit id="d763cf67760997b5781cdf955015acbbec99c511" translate="yes" xml:space="preserve">
          <source>The heroes web API expects a special header in HTTP save requests. That header is in the &lt;code&gt;httpOptions&lt;/code&gt; constant defined in the &lt;code&gt;HeroService&lt;/code&gt;. Add the following to the &lt;code&gt;HeroService&lt;/code&gt; class.</source>
          <target state="translated">영웅 웹 API는 HTTP 저장 요청의 특수 헤더를 기대합니다. 즉, 헤더가되어 &lt;code&gt;httpOptions&lt;/code&gt; 에 정의 정수 &lt;code&gt;HeroService&lt;/code&gt; . &lt;code&gt;HeroService&lt;/code&gt; 클래스에 다음을 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="608f0a4d7c94f588eb779efe72dc12c1fb0cf77f" translate="yes" xml:space="preserve">
          <source>The host &lt;code&gt;OnChangesParentComponent&lt;/code&gt; binds to them like this:</source>
          <target state="translated">호스트 &lt;code&gt;OnChangesParentComponent&lt;/code&gt; 는 다음과 같이 바인딩됩니다.</target>
        </trans-unit>
        <trans-unit id="d475d2c0839b834e5922c40096508e379732daa1" translate="yes" xml:space="preserve">
          <source>The host dependency injector. For example, the root element's component instance injector.</source>
          <target state="translated">호스트 종속성 인젝터 예를 들어 루트 요소의 구성 요소 인스턴스 인젝터입니다.</target>
        </trans-unit>
        <trans-unit id="2bd45aa129171fd60686da527ebfb1ef5a231daf" translate="yes" xml:space="preserve">
          <source>The host or anchor &lt;a href=&quot;../../guide/glossary#element&quot;&gt;element&lt;/a&gt; for this component instance.</source>
          <target state="translated">이 구성 요소 인스턴스 의 호스트 또는 앵커 &lt;a href=&quot;../../guide/glossary#element&quot;&gt;요소&lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="61778c1078d4aebe3161ba35e60e62c15c8e7eba" translate="yes" xml:space="preserve">
          <source>The i18n template translation process has four phases:</source>
          <target state="translated">i18n 템플릿 변환 프로세스는 다음 네 단계로 이루어집니다.</target>
        </trans-unit>
        <trans-unit id="3bb0192b3b6c38a7290682d21f4eba34e038374d" translate="yes" xml:space="preserve">
          <source>The identities of elements in the iterator can change while the data does not. This can happen, for example, if the iterator is produced from an RPC to the server, and that RPC is re-run. Even if the data hasn't changed, the second response produces objects with different identities, and Angular must tear down the entire DOM and rebuild it (as if all old elements were deleted and all new elements inserted).</source>
          <target state="translated">이터레이터의 요소 아이덴티티는 데이터가 변경되지 않는 동안 변경 될 수 있습니다. 예를 들어, 반복자가 RPC에서 서버로 생성되고 해당 RPC가 다시 실행되는 경우에 발생할 수 있습니다. 데이터가 변경되지 않은 경우에도 두 번째 응답은 다른 ID를 가진 객체를 생성하며 Angular는 전체 DOM을 해제하고 다시 작성해야합니다 (이전 요소가 모두 삭제되고 새 요소가 모두 삽입 된 것처럼).</target>
        </trans-unit>
        <trans-unit id="ac727768ada490816c6d8682036d5ff4e29f9e9f" translate="yes" xml:space="preserve">
          <source>The identity validator implements the &lt;code&gt;&lt;a href=&quot;../api/forms/validatorfn&quot;&gt;ValidatorFn&lt;/a&gt;&lt;/code&gt; interface. It takes an Angular control object as an argument and returns either null if the form is valid, or &lt;code&gt;&lt;a href=&quot;../api/forms/validationerrors&quot;&gt;ValidationErrors&lt;/a&gt;&lt;/code&gt; otherwise.</source>
          <target state="translated">아이덴티티 유효성 검사기는 &lt;code&gt;&lt;a href=&quot;../api/forms/validatorfn&quot;&gt;ValidatorFn&lt;/a&gt;&lt;/code&gt; 인터페이스를 구현합니다 . Angular 컨트롤 개체를 인수로 사용하고 폼이 유효한 경우 null을, 그렇지 않으면 &lt;code&gt;&lt;a href=&quot;../api/forms/validationerrors&quot;&gt;ValidationErrors&lt;/a&gt;&lt;/code&gt; 를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="1244038c275380a06d0292b3f58a8b0808bee9d4" translate="yes" xml:space="preserve">
          <source>The immediate &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; children. Walk the tree by descending through &lt;code&gt;children&lt;/code&gt;.</source>
          <target state="translated">즉각적인 &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; 자식 &lt;code&gt;children&lt;/code&gt; 통해 내려 가서 나무를 걸어보세요 .</target>
        </trans-unit>
        <trans-unit id="f77264c0b692bee3b01df77a4b0b94e2da9de660" translate="yes" xml:space="preserve">
          <source>The immediate goal is to test the &lt;code&gt;DashboardHeroComponent&lt;/code&gt;, not the &lt;code&gt;DashboardComponent&lt;/code&gt;, so, try the second and third options.</source>
          <target state="translated">즉각적인 목표는 테스트하는 것입니다 &lt;code&gt;DashboardHeroComponent&lt;/code&gt; 아닌 &lt;code&gt;DashboardComponent&lt;/code&gt; 를 , 그래서 두 번째와 세 번째 옵션을 시도합니다.</target>
        </trans-unit>
        <trans-unit id="34262de4d07947d5d97708446c0ec864a64190a5" translate="yes" xml:space="preserve">
          <source>The implementation in &lt;em&gt;this&lt;/em&gt; tutorial will continue to deliver &lt;em&gt;mock heroes&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;이&lt;/em&gt; 튜토리얼 의 구현 은 계속 &lt;em&gt;모의 영웅&lt;/em&gt; 을 제공 할 것 입니다.</target>
        </trans-unit>
        <trans-unit id="e94c2bbfc1793deccefaf24d2d6ac1efaedf0ef3" translate="yes" xml:space="preserve">
          <source>The important bit in the &lt;code&gt;server.ts&lt;/code&gt; file is the &lt;code&gt;ngExpressEngine()&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;server.ts&lt;/code&gt; 파일 에서 중요한 비트 는 &lt;code&gt;ngExpressEngine()&lt;/code&gt; 함수입니다.</target>
        </trans-unit>
        <trans-unit id="4e58b37a7644668715bd2ab968359ab5ecae4a62" translate="yes" xml:space="preserve">
          <source>The imported &lt;code&gt;&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt; symbol provides Angular the &lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt; decorator.</source>
          <target state="translated">가져온 &lt;code&gt;&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt; 심볼은 &lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt; 데코레이터 Angular를 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="5eeb64088704a52b165f30312582ba6990110783" translate="yes" xml:space="preserve">
          <source>The imports at the top of the array are JavaScript import statements while the &lt;code&gt;imports&lt;/code&gt; array within &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; is Angular specific. For more information on the difference, see &lt;a href=&quot;ngmodule-vs-jsmodule&quot;&gt;JavaScript Modules vs. NgModules&lt;/a&gt;.</source>
          <target state="translated">배열의 맨 위에있는 가져 오기는 JavaScript import 문이지만 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt; 내의 &lt;code&gt;imports&lt;/code&gt; 배열 은 Angular에만 해당됩니다. 차이점에 대한 자세한 내용은 &lt;a href=&quot;ngmodule-vs-jsmodule&quot;&gt;JavaScript 모듈과 NgModules를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="8ad0735a040b2f744ace16714d841b50eb7a90b9" translate="yes" xml:space="preserve">
          <source>The impure</source>
          <target state="translated">불순</target>
        </trans-unit>
        <trans-unit id="47a8f6ad06b99c5e37173f0330783e47b4a54b62" translate="yes" xml:space="preserve">
          <source>The increment and decrement operators &lt;code&gt;++&lt;/code&gt; and &lt;code&gt;--&lt;/code&gt;</source>
          <target state="translated">증가 및 감소 연산자 &lt;code&gt;++&lt;/code&gt; 및 &lt;code&gt;--&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="01460b62b5e6cc1d2c666542b25ca8af1ab36172" translate="yes" xml:space="preserve">
          <source>The index at which to insert the new component's host view into this container. If not specified, appends the new view as the last entry.</source>
          <target state="translated">새 구성 요소의 호스트 뷰를이 컨테이너에 삽입 할 인덱스입니다. 지정하지 않으면 새보기를 마지막 항목으로 추가합니다.</target>
        </trans-unit>
        <trans-unit id="28088325c17c4696121e5d42d44e8ba470905c1b" translate="yes" xml:space="preserve">
          <source>The individual form controls are now collected within a group. A &lt;code&gt;&lt;a href=&quot;../api/forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; instance provides its model value as an object reduced from the values of each control in the group. A form group instance has the same properties (such as &lt;code&gt;value&lt;/code&gt; and &lt;code&gt;untouched&lt;/code&gt;) and methods (such as &lt;code&gt;setValue()&lt;/code&gt;) as a form control instance.</source>
          <target state="translated">개별 양식 컨트롤은 이제 그룹 내에서 수집됩니다. &lt;code&gt;&lt;a href=&quot;../api/forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 은 객체 그룹의 각 제어 값으로부터 환산 인스턴스는 모델 값을 제공한다. 양식 그룹 인스턴스는 양식 제어 인스턴스 와 동일한 특성 (예 : &lt;code&gt;value&lt;/code&gt; 및 &lt;code&gt;untouched&lt;/code&gt; ) 및 메소드 (예 : &lt;code&gt;setValue()&lt;/code&gt; )를 갖습니다 .</target>
        </trans-unit>
        <trans-unit id="7b9f0a384d42c6657ae3c3a445c88ae80d87dd5f" translate="yes" xml:space="preserve">
          <source>The initial &lt;code&gt;size&lt;/code&gt; is an input value from a property binding. Clicking the buttons increases or decreases the &lt;code&gt;size&lt;/code&gt;, within min/max value constraints, and then raises, or emits, the &lt;code&gt;sizeChange&lt;/code&gt; event with the adjusted size.</source>
          <target state="translated">초기 &lt;code&gt;size&lt;/code&gt; 는 속성 바인딩의 입력 값입니다. 버튼을 클릭하면 최소 / 최대 값 제한 내 에서 &lt;code&gt;size&lt;/code&gt; 증가 또는 감소한 다음 조정 된 크기로 &lt;code&gt;sizeChange&lt;/code&gt; 이벤트가 발생하거나 발생 합니다.</target>
        </trans-unit>
        <trans-unit id="f4f9e997670b8acc1e6bb32a313594d221ffead4" translate="yes" xml:space="preserve">
          <source>The initial &lt;code&gt;tsconfig.json&lt;/code&gt; for an Angular app typically looks like this example:</source>
          <target state="translated">Angular 앱 의 초기 &lt;code&gt;tsconfig.json&lt;/code&gt; 은 일반적으로 다음 예제와 같습니다.</target>
        </trans-unit>
        <trans-unit id="9b0d2a1d3adcf62fd7edfaae947dfbf0fa526cbd" translate="yes" xml:space="preserve">
          <source>The initial admin routing configuration:</source>
          <target state="translated">초기 관리자 라우팅 구성 :</target>
        </trans-unit>
        <trans-unit id="5c133f6e7cbbe3a8e6d914657ad0e65a743fcb2c" translate="yes" xml:space="preserve">
          <source>The initial app created by &lt;code&gt;ng new&lt;/code&gt; is at the top level of the workspace file structure.</source>
          <target state="translated">&lt;code&gt;ng new&lt;/code&gt; 로 작성된 초기 앱 은 작업 공간 파일 구조의 최상위 레벨에 있습니다.</target>
        </trans-unit>
        <trans-unit id="7b9c95f356d9d8aaf3b5a580d30becc255eceae3" translate="yes" xml:space="preserve">
          <source>The initial app project contains a simple Welcome app, ready to run.</source>
          <target state="translated">초기 앱 프로젝트에는 실행할 준비가 된 간단한 시작 앱이 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="1c618598365a8b0089eeb0d06f473e1e7f5e9801" translate="yes" xml:space="preserve">
          <source>The initial app that you create with &lt;code&gt;ng new app_name&lt;/code&gt; is listed under &quot;projects&quot;:</source>
          <target state="translated">&lt;code&gt;ng new app_name&lt;/code&gt; 으로 생성 한 초기 앱은 &quot;프로젝트&quot;아래에 나열됩니다.</target>
        </trans-unit>
        <trans-unit id="fccb43ed5c07fe0c3365da2b045c6f6d6ee71c9c" translate="yes" xml:space="preserve">
          <source>The initial schema that you have created tells the CLI where to find the schematic that supports the &lt;code&gt;ng add&lt;/code&gt; command. Now you are ready to create that schematic.</source>
          <target state="translated">작성한 초기 스키마는 CLI에 &lt;code&gt;ng add&lt;/code&gt; 명령 을 지원하는 회로도를 찾을 수있는 위치를 알려줍니다 . 이제 회로도를 만들 준비가되었습니다.</target>
        </trans-unit>
        <trans-unit id="274d6987906a4ae7a1535a899b14ab18fe115084" translate="yes" xml:space="preserve">
          <source>The initial schematic gets the same name as the project folder, and is generated in &lt;code&gt;src/hello-world&lt;/code&gt;. You can add related schematics to this collection, and modify the generated skeleton code to define your schematic's functionality. Each schematic name must be unique within the collection.</source>
          <target state="translated">초기 회로도는 프로젝트 폴더와 이름이 같으며 &lt;code&gt;src/hello-world&lt;/code&gt; 에 생성됩니다 . 이 컬렉션에 관련 회로도를 추가하고 생성 된 골격 코드를 수정하여 회로도의 기능을 정의 할 수 있습니다. 각 회로도 이름은 컬렉션 내에서 고유해야합니다.</target>
        </trans-unit>
        <trans-unit id="fe3d0e9c54c6b1dffc213d25bb122ab550dcfc75" translate="yes" xml:space="preserve">
          <source>The injection token for the event-manager plug-in service.</source>
          <target state="translated">이벤트 관리자 플러그인 서비스의 주입 토큰.</target>
        </trans-unit>
        <trans-unit id="1383ded669e589d4e6653269a2fad194b6361cf5" translate="yes" xml:space="preserve">
          <source>The injector determines the starting location in the logical tree and an ending location of the search. The injector begins with the starting location and looks for the token at each level in the logical tree. If the token is found it is returned.</source>
          <target state="translated">인젝터는 논리 트리의 시작 위치와 검색의 끝 위치를 결정합니다. 인젝터는 시작 위치로 시작하여 논리 트리의 각 레벨에서 토큰을 찾습니다. 토큰이 발견되면 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="909976c4bf2fdb45732e4e4857727780da327ef6" translate="yes" xml:space="preserve">
          <source>The injector is responsible for creating service instances and injecting them into classes like &lt;code&gt;HeroListComponent&lt;/code&gt;. You rarely create an Angular injector yourself. Angular creates injectors for you as it executes the app, starting with the &lt;em&gt;root injector&lt;/em&gt; that it creates during the &lt;a href=&quot;bootstrapping&quot;&gt;bootstrap process&lt;/a&gt;.</source>
          <target state="translated">인젝터는 서비스 인스턴스를 생성하고이를 &lt;code&gt;HeroListComponent&lt;/code&gt; 와 같은 클래스에 주입합니다 . Angular 인젝터를 직접 만드는 경우는 거의 없습니다. Angular 는 &lt;a href=&quot;bootstrapping&quot;&gt;부트 스트랩 프로세스&lt;/a&gt; 중에 생성되는 &lt;em&gt;루트 인젝터&lt;/em&gt; 부터 시작하여 앱을 실행할 때 &lt;em&gt;인젝터&lt;/em&gt; 를 생성 합니다 .</target>
        </trans-unit>
        <trans-unit id="391362c6611913ba88dda520d9dcb87894ef5621" translate="yes" xml:space="preserve">
          <source>The injector needs providers for both this new logging service and its dependent &lt;code&gt;UserService&lt;/code&gt;. Configure this alternative logger with the &lt;code&gt;useClass&lt;/code&gt; provider-definition key, like &lt;code&gt;BetterLogger&lt;/code&gt;. The following array specifies both providers in the &lt;code&gt;providers&lt;/code&gt; metadata option of the parent module or component.</source>
          <target state="translated">인젝터는이 새로운 로깅 서비스 및 종속 &lt;code&gt;UserService&lt;/code&gt; 모두에 대한 제공자가 필요합니다 . 이 다른 로거 구성 &lt;code&gt;useClass&lt;/code&gt; 같은 프로 바이더 정의 키, &lt;code&gt;BetterLogger&lt;/code&gt; 을 . 다음 배열 은 상위 모듈 또는 구성 요소 의 &lt;code&gt;providers&lt;/code&gt; 메타 데이터 옵션 에서 두 제공자를 모두 지정합니다 .</target>
        </trans-unit>
        <trans-unit id="6dc65614e224404ed54dd6ea0d9ada092c4337fc" translate="yes" xml:space="preserve">
          <source>The injector provides the dependency value by invoking a factory function, that you provide as the value of the &lt;code&gt;&lt;a href=&quot;../api/core/factorysansprovider#useFactory&quot;&gt;useFactory&lt;/a&gt;&lt;/code&gt; key. Notice that this form of provider has a third key, &lt;code&gt;deps&lt;/code&gt;, which specifies dependencies for the &lt;code&gt;&lt;a href=&quot;../api/core/factorysansprovider#useFactory&quot;&gt;useFactory&lt;/a&gt;&lt;/code&gt; function.</source>
          <target state="translated">인젝터는 팩토리 함수를 호출하여 종속성 값을 제공합니다. 팩토리 함수는 &lt;code&gt;&lt;a href=&quot;../api/core/factorysansprovider#useFactory&quot;&gt;useFactory&lt;/a&gt;&lt;/code&gt; 키 의 값으로 제공 합니다. 이 공급자 형식 에는 &lt;code&gt;&lt;a href=&quot;../api/core/factorysansprovider#useFactory&quot;&gt;useFactory&lt;/a&gt;&lt;/code&gt; 함수의 종속성을 지정 하는 세 번째 키인 &lt;code&gt;deps&lt;/code&gt; 가 있습니다.</target>
        </trans-unit>
        <trans-unit id="c95f5722ed83490db02364ac66c92b54bf76fcb4" translate="yes" xml:space="preserve">
          <source>The injector that contains all of the providers of the NgModule.</source>
          <target state="translated">NgModule의 모든 제공자를 포함하는 인젝터.</target>
        </trans-unit>
        <trans-unit id="81535b8cfa3709335ca6968ad04963647fb0e43c" translate="yes" xml:space="preserve">
          <source>The injector to use as the parent for the new component.</source>
          <target state="translated">새 구성 요소의 상위로 사용할 인젝터.</target>
        </trans-unit>
        <trans-unit id="e753944a9f0476e23faa1642765ef1111249bf50" translate="yes" xml:space="preserve">
          <source>The injector to use for retrieving the component's factory.</source>
          <target state="translated">구성 요소 팩토리를 검색하는 데 사용할 인젝터.</target>
        </trans-unit>
        <trans-unit id="e9818ffe0b5312214e6049d23aa468b35f9eca71" translate="yes" xml:space="preserve">
          <source>The inner, &lt;code&gt;class-skeleton&lt;/code&gt; region appears twice, once to capture the code that opens the class definition and once to capture the code that closes the class definition.</source>
          <target state="translated">내부 &lt;code&gt;class-skeleton&lt;/code&gt; 영역은 클래스 정의를 여는 코드를 캡처하기 위해 한 번, 클래스 정의를 닫는 코드를 캡처하기 위해 두 번 나타납니다.</target>
        </trans-unit>
        <trans-unit id="97d15b5fd5023fac9a06d495428eae8299fd604c" translate="yes" xml:space="preserve">
          <source>The input element emits an &quot;input&quot; event with the value &lt;em&gt;Blue&lt;/em&gt;.</source>
          <target state="translated">입력 요소는 &lt;em&gt;Blue&lt;/em&gt; 값으로 &quot;입력&quot;이벤트를 생성합니다 .</target>
        </trans-unit>
        <trans-unit id="45f218bc069eb983ea0aa82f12ad5468e38fbc56" translate="yes" xml:space="preserve">
          <source>The inputs of the component.</source>
          <target state="translated">구성 요소의 입력.</target>
        </trans-unit>
        <trans-unit id="9ef9848eb3b4dd6a2af93f2352e54e04d6d6e735" translate="yes" xml:space="preserve">
          <source>The instance of the component class created by &lt;code&gt;TestBed.createComponent&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;TestBed.createComponent&lt;/code&gt; 로 작성된 컴포넌트 클래스의 인스턴스입니다 .</target>
        </trans-unit>
        <trans-unit id="c42b5877f82b6791369b1b504388d13d671ec5cd" translate="yes" xml:space="preserve">
          <source>The instance of the root component class.</source>
          <target state="translated">루트 컴포넌트 클래스의 인스턴스</target>
        </trans-unit>
        <trans-unit id="796a3b1682a165dd05dc7257a0f42400175385a8" translate="yes" xml:space="preserve">
          <source>The instance to convert.</source>
          <target state="translated">변환 할 인스턴스입니다.</target>
        </trans-unit>
        <trans-unit id="f38cf766ca85d67c16df92fd25bac9022b740c83" translate="yes" xml:space="preserve">
          <source>The interesting part of the URL follows the &lt;code&gt;...&lt;/code&gt;:</source>
          <target state="translated">URL의 흥미로운 부분은 &lt;code&gt;...&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="702e5fcb69842a35326d93ae27b71240dfadc43a" translate="yes" xml:space="preserve">
          <source>The interfaces are optional for JavaScript and Typescript developers from a purely technical perspective. The JavaScript language doesn't have interfaces. Angular can't see TypeScript interfaces at runtime because they disappear from the transpiled JavaScript.</source>
          <target state="translated">인터페이스는 순수한 기술적 관점에서 JavaScript 및 Typescript 개발자에게는 선택 사항입니다. JavaScript 언어에는 인터페이스가 없습니다. Angular는 변환 된 JavaScript에서 사라지기 때문에 런타임에 TypeScript 인터페이스를 볼 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="73fe62cb28dec38fb5ac135676c55e085cff63ba" translate="yes" xml:space="preserve">
          <source>The internal &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; instance.</source>
          <target state="translated">내부 &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 인스턴스</target>
        </trans-unit>
        <trans-unit id="64d50ef5373d507409c34fbaedaf9a35c68a6991" translate="yes" xml:space="preserve">
          <source>The internal Architect tool delegates work to handler functions called &lt;a href=&quot;glossary#builder&quot;&gt;&lt;em&gt;builders&lt;/em&gt;&lt;/a&gt;. A builder handler function receives two arguments; a set of input &lt;code&gt;options&lt;/code&gt; (a JSON object), and a &lt;code&gt;context&lt;/code&gt; (a &lt;code&gt;BuilderContext&lt;/code&gt; object).</source>
          <target state="translated">내부 Architect 도구는 작업을 &lt;a href=&quot;glossary#builder&quot;&gt;&lt;em&gt;builders&lt;/em&gt;&lt;/a&gt; 핸들러 함수에 위임합니다 . 빌더 핸들러 함수는 두 개의 인수를받습니다. 입력 &lt;code&gt;options&lt;/code&gt; 세트 (JSON 객체) 및 &lt;code&gt;context&lt;/code&gt; ( &lt;code&gt;BuilderContext&lt;/code&gt; 객체)</target>
        </trans-unit>
        <trans-unit id="1b4b0b78851e7752da5d2f642ad23a0e8de7822f" translate="yes" xml:space="preserve">
          <source>The interpolation braces in &lt;code&gt;{{1 + 1}}&lt;/code&gt; surround the template expression &lt;code&gt;1 + 1&lt;/code&gt;. In the property binding, a template expression appears in quotes to the right of the &lt;code&gt;=&lt;/code&gt; symbol as in &lt;code&gt;[property]=&quot;expression&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;{{1 + 1}}&lt;/code&gt; 의 보간 중괄호 는 템플리트 표현식 &lt;code&gt;1 + 1&lt;/code&gt; 둘러 쌉니다 . 속성 바인딩에서 템플릿 표현식 은 &lt;code&gt;[property]=&quot;expression&quot;&lt;/code&gt; 에서와 같이 &lt;code&gt;=&lt;/code&gt; 기호 오른쪽에 따옴표로 표시됩니다 .</target>
        </trans-unit>
        <trans-unit id="93f9b2c51a7af4c4eb35603e8cb48e22004d9e33" translate="yes" xml:space="preserve">
          <source>The interpolation live example demonstrates all of the syntax and code snippets described in this section.</source>
          <target state="translated">보간 라이브 예제는이 섹션에서 설명 된 모든 구문과 코드 스 니펫을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="c6187909f50cd0be17663a5d887e024df5706953" translate="yes" xml:space="preserve">
          <source>The item.</source>
          <target state="translated">물건.</target>
        </trans-unit>
        <trans-unit id="b27c5c8196dbfc8a53c04f22e7d7da67c2563040" translate="yes" xml:space="preserve">
          <source>The key is a supported event name to be configured, and the options object contains a set of properties, with override values to be applied to the named recognizer event. For example, to disable recognition of the rotate event, specify &lt;code&gt;{&quot;rotate&quot;: {&quot;enable&quot;: false}}&lt;/code&gt;.</source>
          <target state="translated">키는 구성 할 수있는 지원되는 이벤트 이름이며 옵션 객체에는 명명 된 인식기 이벤트에 적용 할 재정의 값과 함께 속성 집합이 포함되어 있습니다. 예를 들어 회전 이벤트 인식을 비활성화하려면 &lt;code&gt;{&quot;rotate&quot;: {&quot;enable&quot;: false}}&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3afe8949a36dd6edcd0b52b40e17cb1882c7d22a" translate="yes" xml:space="preserve">
          <source>The key is the DOM event that the directive listens to. To listen to global events, add the target to the event name. The target can be &lt;code&gt;window&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../platform-server/platformconfig#document&quot;&gt;document&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;body&lt;/code&gt;.</source>
          <target state="translated">핵심은 지시문이 수신하는 DOM 이벤트입니다. 글로벌 이벤트를 들으려면 대상을 이벤트 이름에 추가하십시오. 대상은 &lt;code&gt;window&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;../platform-server/platformconfig#document&quot;&gt;document&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;body&lt;/code&gt; 일 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="7889af82f4b022dadb547ae2824efe7a6bb47207" translate="yes" xml:space="preserve">
          <source>The key is to make the code more reusable, easier to read, and less mistake prone.</source>
          <target state="translated">핵심은 코드를 더 재사용 가능하고, 읽기 쉽고, 실수하기 쉬운 코드로 만드는 것입니다.</target>
        </trans-unit>
        <trans-unit id="cdbe02fa8964f612bbf73ee656e19f8d119c6afa" translate="yes" xml:space="preserve">
          <source>The key name.</source>
          <target state="translated">키 이름</target>
        </trans-unit>
        <trans-unit id="d0fa848ad3856bedad82e6c7874b70da382521e0" translate="yes" xml:space="preserve">
          <source>The key point here is that you have to export it so you can import it elsewhere. Next, import it into the NgModule, in this example &lt;code&gt;app.module.ts&lt;/code&gt;, with a JavaScript import statement:</source>
          <target state="translated">여기서 중요한 점은 다른 곳으로 가져올 수 있도록 내 보내야한다는 것입니다. 다음 으로 JavaScript import 문을 사용하여 &lt;code&gt;app.module.ts&lt;/code&gt; 이 예제에서는 app.module.ts )로 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="5da31d71b1f60f0adaeccb267bd7eb24f7673f75" translate="yes" xml:space="preserve">
          <source>The key point is that you control the hero job application questions entirely through the objects returned from &lt;code&gt;QuestionService&lt;/code&gt;. Questionnaire maintenance is a simple matter of adding, updating, and removing objects from the &lt;code&gt;questions&lt;/code&gt; array.</source>
          <target state="translated">요점은 &lt;code&gt;QuestionService&lt;/code&gt; 에서 반환 된 객체를 통해 영웅 작업 응용 프로그램 질문을 완전히 제어한다는 것 입니다. 설문지 유지 보수는 &lt;code&gt;questions&lt;/code&gt; 배열 에서 개체를 추가, 업데이트 및 제거하는 간단한 문제입니다 .</target>
        </trans-unit>
        <trans-unit id="5d0681bffbfdd03e7e32f7464f13ef4c498fb543" translate="yes" xml:space="preserve">
          <source>The key takeaway is that when binding to a child component's property in a parent component&amp;mdash;that is, what's in square brackets&amp;mdash;you must decorate the property with &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; in the child component.</source>
          <target state="translated">중요한 점은 부모 구성 요소에서 자식 구성 요소의 속성, 즉 대괄호 안에있는 바인딩에 바인딩 할 때 자식 구성 요소에서 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; 으로 속성을 장식해야한다는 것 입니다.</target>
        </trans-unit>
        <trans-unit id="6c5cd796012caba3f50ab44f1a501f9433b217c1" translate="yes" xml:space="preserve">
          <source>The key thing to understand about a hybrid application is that every element in the DOM is owned by exactly one of the two frameworks. The other framework ignores it. If an element is owned by AngularJS, Angular treats it as if it didn't exist, and vice versa.</source>
          <target state="translated">하이브리드 애플리케이션에 대해 이해해야 할 핵심은 DOM의 모든 요소가 정확히 두 프레임 워크 중 하나에 의해 소유된다는 것입니다. 다른 프레임 워크는이를 무시합니다. AngularJS가 요소를 소유하는 경우 Angular는 존재하지 않는 것처럼 처리하고 그 반대도 마찬가지입니다.</target>
        </trans-unit>
        <trans-unit id="82a5cbcd9ee629368a7dbf46b633770937978193" translate="yes" xml:space="preserve">
          <source>The keyword to search for, as provided in the search bar in angular.io.</source>
          <target state="translated">angular.io의 검색 창에 제공된 검색 할 키워드입니다.</target>
        </trans-unit>
        <trans-unit id="7139f105d9119f519815353fa125bb9a5a6a2aef" translate="yes" xml:space="preserve">
          <source>The language is simply HTML5. You're presenting two of the &lt;code&gt;Hero&lt;/code&gt; fields, &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;alterEgo&lt;/code&gt;, and opening them up for user input in input boxes.</source>
          <target state="translated">언어는 단순히 HTML5입니다. 두 개의 &lt;code&gt;Hero&lt;/code&gt; 필드 ( &lt;code&gt;name&lt;/code&gt; 및 &lt;code&gt;alterEgo&lt;/code&gt; )를 표시하고 입력 상자에 사용자 입력을 위해 열어 놓았 습니다.</target>
        </trans-unit>
        <trans-unit id="feb75538a2560e199fdfa7762dd5353f05b9f3bf" translate="yes" xml:space="preserve">
          <source>The last line of the log is the most important. It shows that Karma ran three tests that all passed.</source>
          <target state="translated">로그의 마지막 줄이 가장 중요합니다. 카르마는 세 가지 테스트를 모두 통과 한 것으로 나타났습니다.</target>
        </trans-unit>
        <trans-unit id="a7b74ae411865b1ed27412a302e7dcc77c02a30f" translate="yes" xml:space="preserve">
          <source>The last step, verifying that no requests remain outstanding, is common enough for you to move it into an &lt;code&gt;afterEach()&lt;/code&gt; step:</source>
          <target state="translated">요청이 미해결 상태인지 확인하는 마지막 단계는 &lt;code&gt;afterEach()&lt;/code&gt; 단계 로 요청을 이동하기에 충분합니다 .</target>
        </trans-unit>
        <trans-unit id="6634b9650ac8fa95d9ff2877842e12f8d187606e" translate="yes" xml:space="preserve">
          <source>The last update tick/run counters give the time since specific events happened related to the idle queue. The &quot;Last update run&quot; counter shows the last time idle tasks were actually executed. &quot;Last update tick&quot; shows the time since the last event after which the queue might be processed.</source>
          <target state="translated">마지막 업데이트 틱 / 실행 카운터는 유휴 큐와 관련된 특정 이벤트가 발생한 이후 시간을 제공합니다. &quot;마지막 업데이트 실행&quot;카운터는 마지막으로 유휴 작업이 실제로 실행 된 시간을 보여줍니다. &quot;마지막 업데이트 틱&quot;은 큐가 처리 된 마지막 이벤트 이후의 시간을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="7505ed32fffc9d3847991eef5fbba124922106c7" translate="yes" xml:space="preserve">
          <source>The lazy loaded scenario</source>
          <target state="translated">게으른로드 된 시나리오</target>
        </trans-unit>
        <trans-unit id="c3bdd32d919036a2592743a6c73032960479a538" translate="yes" xml:space="preserve">
          <source>The lazy loading and re-configuration happen just once, when the route is &lt;em&gt;first&lt;/em&gt; requested; the module and routes are available immediately for subsequent requests.</source>
          <target state="translated">지연로드 및 재구성은 경로가 &lt;em&gt;처음&lt;/em&gt; 요청 될 때 한 번만 발생합니다 . 후속 요청에 대해 모듈 및 경로를 즉시 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c57c903a85bd033e12fde20ee11764d762c10386" translate="yes" xml:space="preserve">
          <source>The library must be rebuilt on every change. When linking a library, make sure that the build step runs in watch mode, and that the library's &lt;code&gt;package.json&lt;/code&gt; configuration points at the correct entry points. For example, &lt;code&gt;main&lt;/code&gt; should point at a JavaScript file, not a TypeScript file.</source>
          <target state="translated">변경 될 때마다 라이브러리를 다시 작성해야합니다. 라이브러리를 링크 할 때 빌드 단계가 감시 모드에서 실행되고 라이브러리의 &lt;code&gt;package.json&lt;/code&gt; 구성이 올바른 진입 점을 가리키는 지 확인하십시오. 예를 들어 &lt;code&gt;main&lt;/code&gt; 은 TypeScript 파일이 아닌 JavaScript 파일을 가리켜 야합니다.</target>
        </trans-unit>
        <trans-unit id="44499b604f2c8a7fb9248b301fa86fbddbe0d759" translate="yes" xml:space="preserve">
          <source>The links are styled as colored blocks by the &lt;code&gt;dashboard.component.css&lt;/code&gt;.</source>
          <target state="translated">링크는 &lt;code&gt;dashboard.component.css&lt;/code&gt; 에 의해 컬러 블록으로 스타일이 지정됩니다 .</target>
        </trans-unit>
        <trans-unit id="70f5c6325d761fe1e544503d9e54f38c460d44c0" translate="yes" xml:space="preserve">
          <source>The links don't go anywhere yet but &lt;a href=&quot;toh-pt5#hero-details&quot;&gt;they will shortly&lt;/a&gt;.</source>
          <target state="translated">링크는 아직 어디에도 가지 않지만 &lt;a href=&quot;toh-pt5#hero-details&quot;&gt;곧&lt;/a&gt; 연결될 것 입니다.</target>
        </trans-unit>
        <trans-unit id="1a2bdb6c32f442bc5dc6ab7fffdac703a44af59c" translate="yes" xml:space="preserve">
          <source>The linting configuration to use.</source>
          <target state="translated">사용할 린트 구성입니다.</target>
        </trans-unit>
        <trans-unit id="cb5b67e650373461ed8bddbd8ff4e58af97dc7be" translate="yes" xml:space="preserve">
          <source>The list of async validators applied to control.</source>
          <target state="translated">제어에 적용된 비동기 유효성 검사기 목록입니다.</target>
        </trans-unit>
        <trans-unit id="a0b532d757d03e389d179b94a37fe57febba7478" translate="yes" xml:space="preserve">
          <source>The list of children of this group</source>
          <target state="translated">이 그룹의 자녀 목록</target>
        </trans-unit>
        <trans-unit id="795b91e111cdd26a419fb100996cd8d6c70ea1eb" translate="yes" xml:space="preserve">
          <source>The list of heroes is unchanged. No hero row is highlighted.</source>
          <target state="translated">영웅 목록은 변경되지 않습니다. 영웅 행이 강조 표시되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="49857ea47c4cab38f72361229ffb02aa45872afe" translate="yes" xml:space="preserve">
          <source>The list of heroes.</source>
          <target state="translated">영웅 목록.</target>
        </trans-unit>
        <trans-unit id="5fa24d8b936262f7c95d2d68e29587ae556a36db" translate="yes" xml:space="preserve">
          <source>The list of validators applied to a control.</source>
          <target state="translated">컨트롤에 적용된 유효성 검사기 목록입니다.</target>
        </trans-unit>
        <trans-unit id="0aadeca54e3dfecbee61ea33dcad37c9d04279da" translate="yes" xml:space="preserve">
          <source>The live example &lt;em&gt;does&lt;/em&gt; highlight the selected row because it demonstrates the final state of the application which includes the steps you're &lt;em&gt;about&lt;/em&gt; to cover. At the moment this guide is describing the state of affairs &lt;em&gt;prior&lt;/em&gt; to those steps.</source>
          <target state="translated">라이브 예는 &lt;em&gt;않습니다&lt;/em&gt; 당신이있어 단계를 포함하는 응용 프로그램의 최종 상태를 보여줍니다 때문에 선택한 행을 강조 표시 &lt;em&gt;에 대한&lt;/em&gt; 커버를. 현재이 안내서는 이러한 단계 &lt;em&gt;이전&lt;/em&gt; 의 업무 상태를 설명 합니다.</target>
        </trans-unit>
        <trans-unit id="901614f59731b265c4298a51f6591ca36d90b9ba" translate="yes" xml:space="preserve">
          <source>The live example demonstrates all of the syntax and code snippets described in this page.</source>
          <target state="translated">라이브 예제는이 페이지에 설명 된 모든 구문과 코드 스 니펫을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="7c99dbd847d2edb666ec41151e3e184ee3bbc26b" translate="yes" xml:space="preserve">
          <source>The live example demonstrates the lifecycle hooks in action through a series of exercises presented as components under the control of the root &lt;code&gt;AppComponent&lt;/code&gt;.</source>
          <target state="translated">라이브 예제는 루트 &lt;code&gt;AppComponent&lt;/code&gt; 의 제어하에 구성 요소로 제시된 일련의 연습을 통해 작동주기가 어떻게 작동하는지 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="8e604124b200d483830f1b601a11ceaa96f50692" translate="yes" xml:space="preserve">
          <source>The locale (&lt;code&gt;fr&lt;/code&gt; or &lt;code&gt;en-US&lt;/code&gt; for instance).</source>
          <target state="translated">로케일 (예 : &lt;code&gt;fr&lt;/code&gt; 또는 &lt;code&gt;en-US&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="bc0d61c0534e7b5e89350cd2ca0eac665647cb36" translate="yes" xml:space="preserve">
          <source>The locale code.</source>
          <target state="translated">로캘 코드</target>
        </trans-unit>
        <trans-unit id="dd0ba90791fe2c1551d163b9e264ade3c06599d7" translate="yes" xml:space="preserve">
          <source>The locale identifiers used by CLDR and Angular are based on &lt;a href=&quot;http://www.rfc-editor.org/rfc/bcp/bcp47.txt&quot;&gt;BCP47&lt;/a&gt;. These specifications change over time; the following table maps previous identifiers to current ones at time of writing:</source>
          <target state="translated">CLDR 및 Angular에서 사용하는 로캘 식별자는 &lt;a href=&quot;http://www.rfc-editor.org/rfc/bcp/bcp47.txt&quot;&gt;BCP47을&lt;/a&gt; 기반으로 합니다 . 이러한 사양은 시간이 지남에 따라 변경됩니다. 다음 표는 이전 식별자를 작성시 현재 식별자에 매핑합니다.</target>
        </trans-unit>
        <trans-unit id="3654c4df9d402ec66e65601b3977777d4df35e6d" translate="yes" xml:space="preserve">
          <source>The location strategy.</source>
          <target state="translated">위치 전략.</target>
        </trans-unit>
        <trans-unit id="7b62a0bd0b13a459b84264c8b7eac3dce9b81198" translate="yes" xml:space="preserve">
          <source>The log entries appear as the string value of the &lt;em&gt;power&lt;/em&gt; property changes. But the &lt;code&gt;ngOnChanges&lt;/code&gt; does not catch changes to &lt;code&gt;hero.name&lt;/code&gt; That's surprising at first.</source>
          <target state="translated">&lt;em&gt;전원&lt;/em&gt; 속성 의 문자열 값이 변경 되면 로그 항목이 나타납니다 . 그러나 &lt;code&gt;ngOnChanges&lt;/code&gt; 는 변경 사항을 잡을하지 않습니다 &lt;code&gt;hero.name&lt;/code&gt; 의 처음에 놀랄 것이다.</target>
        </trans-unit>
        <trans-unit id="5371caa0a34b7cd92da5480bcaa60ece14b870cf" translate="yes" xml:space="preserve">
          <source>The logic tree for this example of &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; is as follows:</source>
          <target state="translated">이 &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; 예제의 논리 트리는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="17661a2f13ce821c0bf724013752f42c941fc3fb" translate="yes" xml:space="preserve">
          <source>The logical tree looks like this with &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; in &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt;:</source>
          <target state="translated">논리 트리는 &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; 에서 &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; 를 사용 하여 다음과 같이 보입니다 .</target>
        </trans-unit>
        <trans-unit id="6c1735a0aa10b7541d3734c71e401644ee7a31a3" translate="yes" xml:space="preserve">
          <source>The logical tree representation shows why this is:</source>
          <target state="translated">논리 트리 표현은 다음과 같은 이유를 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="1d531fc78d2d733781719c1f451152d073ed41f9" translate="yes" xml:space="preserve">
          <source>The main Angular modules for animations are &lt;code&gt;@angular/animations&lt;/code&gt; and &lt;code&gt;@angular/platform-browser&lt;/code&gt;. When you create a new project using the CLI, these dependencies are automatically added to your project.</source>
          <target state="translated">애니메이션의 주요 Angular 모듈은 &lt;code&gt;@angular/animations&lt;/code&gt; 및 &lt;code&gt;@angular/platform-browser&lt;/code&gt; 입니다. CLI를 사용하여 새 프로젝트를 만들면 이러한 종속성이 프로젝트에 자동으로 추가됩니다.</target>
        </trans-unit>
        <trans-unit id="7263be48b2699ade73a8888b18237441585c4155" translate="yes" xml:space="preserve">
          <source>The main CLI configuration file, &lt;code&gt;angular.json&lt;/code&gt;, contains a &lt;code&gt;fileReplacements&lt;/code&gt; section in the configuration for each build target, which allows you to replace any file with a target-specific version of that file. This is useful for including target-specific code or variables in a build that targets a specific environment, such as production or staging.</source>
          <target state="translated">기본 CLI 구성 파일 인 &lt;code&gt;angular.json&lt;/code&gt; 은 각 빌드 대상의 구성에 &lt;code&gt;fileReplacements&lt;/code&gt; 섹션을 포함 하므로 파일을 해당 파일의 대상 특정 버전으로 바꿀 수 있습니다. 이는 프로덕션 또는 스테이징과 같은 특정 환경을 대상으로하는 빌드에 대상별 코드 또는 변수를 포함시키는 데 유용합니다.</target>
        </trans-unit>
        <trans-unit id="bc356e186170cb322f0a32a7caaa8cd2b339ae78" translate="yes" xml:space="preserve">
          <source>The main HTML page that is served when someone visits your site. The CLI automatically adds all JavaScript and CSS files when building your app, so you typically don't need to add any &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; or&lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; tags here manually.</source>
          <target state="translated">누군가가 귀하의 사이트를 방문 할 때 제공되는 기본 HTML 페이지입니다. CLI는 앱을 빌드 할 때 모든 JavaScript 및 CSS 파일을 자동으로 추가하므로 일반적으로 여기에 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 또는 &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; 태그 를 추가 할 필요가 없습니다 .</target>
        </trans-unit>
        <trans-unit id="17744529805032738d2ce1337233da25a724ce4c" translate="yes" xml:space="preserve">
          <source>The main entry point for your application. Compiles the application with the &lt;a href=&quot;glossary#jit&quot;&gt;JIT compiler&lt;/a&gt; and bootstraps the application's root module (AppModule) to run in the browser. You can also use the &lt;a href=&quot;aot-compiler&quot;&gt;AOT compiler&lt;/a&gt; without changing any code by appending the &lt;code&gt;--aot&lt;/code&gt; flag to the CLI &lt;code&gt;build&lt;/code&gt; and &lt;code&gt;serve&lt;/code&gt; commands.</source>
          <target state="translated">응용 프로그램의 기본 진입 점입니다. &lt;a href=&quot;glossary#jit&quot;&gt;JIT 컴파일러로&lt;/a&gt; 애플리케이션을 컴파일하고 브라우저에서 실행되도록 애플리케이션의 루트 모듈 (AppModule)을 부트 스트랩합니다. CLI &lt;code&gt;build&lt;/code&gt; 및 &lt;code&gt;serve&lt;/code&gt; 명령에 &lt;code&gt;--aot&lt;/code&gt; 플래그를 추가하여 코드를 변경하지 않고 &lt;a href=&quot;aot-compiler&quot;&gt;AOT 컴파일러&lt;/a&gt; 를 사용할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d0f2908e2176918f5ec05936850fcaeb40f2aee6" translate="yes" xml:space="preserve">
          <source>The main entry point for your unit tests, with some Angular-specific configuration. You don't typically need to edit this file.</source>
          <target state="translated">각도 별 구성으로 장치 테스트를위한 주요 진입 점입니다. 일반적으로이 파일을 편집 할 필요는 없습니다.</target>
        </trans-unit>
        <trans-unit id="5b6bdd0aa0401fe9344207ee1da20b9b5122cf9c" translate="yes" xml:space="preserve">
          <source>The main entry point for your unit tests, with some library-specific configuration. You don't typically need to edit this file.</source>
          <target state="translated">라이브러리 별 구성으로 장치 테스트를위한 주요 진입 점입니다. 일반적으로이 파일을 편집 할 필요는 없습니다.</target>
        </trans-unit>
        <trans-unit id="82234ab06c7273360d9dcd17147814d4ef5d22aa" translate="yes" xml:space="preserve">
          <source>The main form is visible from the start because the &lt;code&gt;submitted&lt;/code&gt; property is false until you submit the form, as this fragment from the &lt;code&gt;HeroFormComponent&lt;/code&gt; shows:</source>
          <target state="translated">&lt;code&gt;HeroFormComponent&lt;/code&gt; 의이 조각이 표시 하는 것처럼 양식을 제출할 때까지 &lt;code&gt;submitted&lt;/code&gt; 속성이 false 이므로 기본 양식은 처음 부터 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="89228ab70b4f42a9a833463f6fddc8df700cd69f" translate="yes" xml:space="preserve">
          <source>The main section heading should be followed by a blank line and then the content for that heading.</source>
          <target state="translated">기본 섹션 제목 다음에는 빈 줄이 있고 그 제목의 내용이 나와야합니다.</target>
        </trans-unit>
        <trans-unit id="bedc39e25a378ea1e74b444633eb2567c1be4edd" translate="yes" xml:space="preserve">
          <source>The marble library constructs the corresponding observable, which the test sets as the &lt;code&gt;getQuote&lt;/code&gt; spy's return value.</source>
          <target state="translated">대리석 라이브러리는 해당 관측 값을 구성하며, 테스트는 &lt;code&gt;getQuote&lt;/code&gt; 스파이의 반환 값 으로 설정됩니다 .</target>
        </trans-unit>
        <trans-unit id="c152d7d77841879fc15850ada302d9a7604f9a5f" translate="yes" xml:space="preserve">
          <source>The markdown is as follows:</source>
          <target state="translated">마크 다운은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="8748eb03cd3a2a31a452da21e18e8fe67fa2c88f" translate="yes" xml:space="preserve">
          <source>The markup for the above example is:</source>
          <target state="translated">위 예제의 마크 업은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="82140eb18cda68dafbe96adfecdd4de9ecc691a0" translate="yes" xml:space="preserve">
          <source>The match url, &lt;code&gt;&amp;lt;match url=&quot;.*&quot; /&amp;gt;&lt;/code&gt;, will rewrite every request. You'll have to adjust this if you want some requests to get through, such as web API requests.</source>
          <target state="translated">일치 URL &lt;code&gt;&amp;lt;match url=&quot;.*&quot; /&amp;gt;&lt;/code&gt; 은 모든 요청을 다시 작성합니다. 웹 API 요청과 같은 일부 요청을 통과 시키려면이를 조정해야합니다.</target>
        </trans-unit>
        <trans-unit id="3ad0897b9ee03f741fd1c01511860b55ea1d75e0" translate="yes" xml:space="preserve">
          <source>The matrix parameters associated with a segment</source>
          <target state="translated">세그먼트와 관련된 행렬 매개 변수</target>
        </trans-unit>
        <trans-unit id="a76d5b3e6982be276ae88de5739d5fed54638bd2" translate="yes" xml:space="preserve">
          <source>The matrix parameters scoped to this route</source>
          <target state="translated">이 경로에 범위가 지정된 행렬 매개 변수</target>
        </trans-unit>
        <trans-unit id="90e33c849863252496fc8d6d880afd0e291d9d8e" translate="yes" xml:space="preserve">
          <source>The maximum threshold for error relative to the baseline.</source>
          <target state="translated">기준과 관련된 오류의 최대 임계 값입니다.</target>
        </trans-unit>
        <trans-unit id="53883cb7c75145e23e98e86bbe3bd3c7cc0a7688" translate="yes" xml:space="preserve">
          <source>The maximum threshold for warning relative to the baseline.</source>
          <target state="translated">기준과 관련된 경고의 최대 임계 값입니다.</target>
        </trans-unit>
        <trans-unit id="87bec61d846af1bc84cef595bb56f5dd04dd2458" translate="yes" xml:space="preserve">
          <source>The messages will look better when you add the private CSS styles to &lt;code&gt;messages.component.css&lt;/code&gt; as listed in one of the &lt;a href=&quot;toh-pt4#final-code-review&quot;&gt;&quot;final code review&quot;&lt;/a&gt; tabs below.</source>
          <target state="translated">아래 의 &lt;a href=&quot;toh-pt4#final-code-review&quot;&gt;&quot;최종 코드 검토&quot;&lt;/a&gt; 탭 중 하나에 나열된 것처럼 개인 CSS 스타일을 &lt;code&gt;messages.component.css&lt;/code&gt; 에 추가하면 메시지가 더 좋아 집니다.</target>
        </trans-unit>
        <trans-unit id="f85700447fab8625b23e50aafd91dead8193e775" translate="yes" xml:space="preserve">
          <source>The metadata for a component class associates it with a &lt;em&gt;template&lt;/em&gt; that defines a view. A template combines ordinary HTML with Angular &lt;em&gt;directives&lt;/em&gt; and &lt;em&gt;binding markup&lt;/em&gt; that allow Angular to modify the HTML before rendering it for display.</source>
          <target state="translated">구성 요소 클래스의 메타 데이터 는이를 뷰를 정의하는 &lt;em&gt;템플릿&lt;/em&gt; 과 연결합니다 . 템플릿은 일반 HTML과 Angular &lt;em&gt;지시문&lt;/em&gt; 및 &lt;em&gt;바인딩 마크 업&lt;/em&gt; 을 &lt;em&gt;결합&lt;/em&gt; 하여 Angular가 HTML을 표시하기 전에 HTML을 수정하여 표시 할 수 있도록합니다.</target>
        </trans-unit>
        <trans-unit id="b6b4287af878accde817a3a3ec85445a29b32903" translate="yes" xml:space="preserve">
          <source>The metadata for a component tells Angular where to get the major building blocks that it needs to create and present the component and its view. In particular, it associates a &lt;em&gt;template&lt;/em&gt; with the component, either directly with inline code, or by reference. Together, the component and its template describe a &lt;em&gt;view&lt;/em&gt;.</source>
          <target state="translated">컴포넌트의 메타 데이터는 컴포넌트와 뷰를 생성하고 제공하는 데 필요한 주요 빌딩 블록을 어디에서 얻을 수 있는지 Angular에 알려줍니다. 특히, 인라인 코드와 직접 또는 참조 로 &lt;em&gt;템플리트&lt;/em&gt; 를 컴포넌트와 연관시킵니다 . 구성 요소와 해당 템플리트는 함께 &lt;em&gt;보기를&lt;/em&gt; 설명합니다 .</target>
        </trans-unit>
        <trans-unit id="2f487cef4aac90b4da53c7fc9e447312b42cba73" translate="yes" xml:space="preserve">
          <source>The metadata for a service class provides the information Angular needs to make it available to components through &lt;em&gt;dependency injection (DI)&lt;/em&gt;.</source>
          <target state="translated">서비스 클래스에 대한 메타 데이터는 Angular가 &lt;em&gt;의존성 주입 (DI)을&lt;/em&gt; 통해 컴포넌트에 제공하기 위해 필요한 정보를 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="da2ac4fe5a7aeb6c5ff2fac4828b395f67c727b6" translate="yes" xml:space="preserve">
          <source>The method is called &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; because you configure the router at the application's root level. The &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; method supplies the service providers and directives needed for routing, and performs the initial navigation based on the current browser URL.</source>
          <target state="translated">응용 프로그램의 루트 수준에서 라우터를 구성하기 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; 메서드를 forRoot () 라고 합니다. &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; 메소드는 서비스 제공 업체 및 지침 라우팅에 필요한, 그리고 수행 현재 브라우저 URL을 기반으로 초기 탐색을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="f94bbf603605c0e2d8cf99c4a32636376256c78c" translate="yes" xml:space="preserve">
          <source>The method returns immediately with an empty array if there is no search term. The rest of it closely resembles &lt;code&gt;getHeroes()&lt;/code&gt;, the only significant difference being the URL, which includes a query string with the search term.</source>
          <target state="translated">검색어가 없으면 빈 배열로 즉시 반환됩니다. 나머지는 &lt;code&gt;getHeroes()&lt;/code&gt; 와 매우 유사 하며 URL과 유일하게 중요한 차이점은 검색어와 함께 검색어 문자열을 포함합니다.</target>
        </trans-unit>
        <trans-unit id="b8bd6826e2d0fcb10e3e7991b3567fdd80af26cd" translate="yes" xml:space="preserve">
          <source>The method that is called when the disabled status changes.</source>
          <target state="translated">비활성화 된 상태가 변경 될 때 호출되는 메서드입니다.</target>
        </trans-unit>
        <trans-unit id="ce97f7be34496d68074082adcce30ef92c9fdc1b" translate="yes" xml:space="preserve">
          <source>The method that is called when the value changes</source>
          <target state="translated">값이 변경 될 때 호출되는 메소드</target>
        </trans-unit>
        <trans-unit id="6db6edec01a98f400bce87dd07f007a8049e3a79" translate="yes" xml:space="preserve">
          <source>The methods now return observables of type &lt;code&gt;PhoneData&lt;/code&gt; and &lt;code&gt;PhoneData[]&lt;/code&gt;. This is a type you don't have yet. Add a simple interface for it:</source>
          <target state="translated">이 메소드는 &lt;code&gt;PhoneData&lt;/code&gt; 및 &lt;code&gt;PhoneData[]&lt;/code&gt; 유형의 옵저버 블을 반환 합니다. 아직없는 유형입니다. 간단한 인터페이스를 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="1f8e626c9a26aabb72b198cad89d9bbfb757820a" translate="yes" xml:space="preserve">
          <source>The microsyntax parser title-cases all directives and prefixes them with the directive's attribute name, such as &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt;. For example, the &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; input properties, &lt;code&gt;of&lt;/code&gt; and &lt;code&gt;trackBy&lt;/code&gt;, become &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngForOf&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/common/ngforof#ngForTrackBy&quot;&gt;ngForTrackBy&lt;/a&gt;&lt;/code&gt;, respectively. That's how the directive learns that the list is &lt;code&gt;heroes&lt;/code&gt; and the track-by function is &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#trackById&quot;&gt;trackById&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">마이크로 구문 구문 분석기는 모든 지시문을 제목으로 묶고 지시문의 속성 이름 (예 : &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; ) 으로 접두어를 붙 입니다. 예를 들어, &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 의 입력 속성, &lt;code&gt;of&lt;/code&gt; 및 &lt;code&gt;trackBy&lt;/code&gt; ,되고 &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngForOf&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;../api/common/ngforof#ngForTrackBy&quot;&gt;ngForTrackBy&lt;/a&gt;&lt;/code&gt; 각각. 이것이 지시어가 목록이 &lt;code&gt;heroes&lt;/code&gt; 이고 track-by 함수가 &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#trackById&quot;&gt;trackById&lt;/a&gt;&lt;/code&gt; 라는 것을 배우는 방법 입니다.</target>
        </trans-unit>
        <trans-unit id="2f96b0734984c3136ba1534c85bf98f17087789f" translate="yes" xml:space="preserve">
          <source>The microtasks queue is drained at the very start of this function and after any timer callback has been executed.</source>
          <target state="translated">이 기능이 시작될 때와 타이머 콜백이 실행 된 후 마이크로 태스크 대기열이 비워집니다.</target>
        </trans-unit>
        <trans-unit id="e526a37fcc75b530dfc85c73dede19ed15c064c6" translate="yes" xml:space="preserve">
          <source>The minification hazard is also compelling, if less obvious. Imagine a sorting pipe applied to a list of heroes. The list might be sorted by hero &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;planet&lt;/code&gt; of origin properties in the following way:</source>
          <target state="translated">덜 분명한 경우 축소 위험도 강력합니다. 영웅 목록에 정렬 ​​파이프가 적용된다고 상상해보십시오. 목록은 다음과 같은 방식 으로 영웅 &lt;code&gt;name&lt;/code&gt; 과 &lt;code&gt;planet&lt;/code&gt; 속성 으로 정렬 될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="bd932f1b587e9efc31a4eaca3808cc0ea987cfe9" translate="yes" xml:space="preserve">
          <source>The minimum requirement for developing Angular applications with Visual Studio is Update 3. Earlier versions do not follow the best practices for developing applications with TypeScript. To view your version of Visual Studio 2015, go to &lt;code&gt;Help | About Visual Studio&lt;/code&gt;.</source>
          <target state="translated">Visual Studio를 사용하여 Angular 응용 프로그램을 개발하기위한 최소 요구 사항은 업데이트 3입니다. 이전 버전은 TypeScript를 사용하여 응용 프로그램을 개발하는 모범 사례를 따르지 않습니다. Visual Studio 2015 버전을 보려면 &lt;code&gt;Help | About Visual Studio&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="68295edfe2e8f66e1f3a2395dc30f8973b6dac7d" translate="yes" xml:space="preserve">
          <source>The minimum threshold for error relative to the baseline.</source>
          <target state="translated">기준과 관련된 오류의 최소 임계 값입니다.</target>
        </trans-unit>
        <trans-unit id="cd6ff93775e18fec4a2607b05a0e4e27b92ea554" translate="yes" xml:space="preserve">
          <source>The minimum threshold for warning relative to the baseline.</source>
          <target state="translated">기준과 관련된 경고의 최소 임계 값입니다.</target>
        </trans-unit>
        <trans-unit id="0b1963b4bbd40e94677e855aa6f7fa65aebec820" translate="yes" xml:space="preserve">
          <source>The missing &lt;code&gt;FormsModule&lt;/code&gt;</source>
          <target state="translated">빠진 &lt;code&gt;FormsModule&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9d2da31ed6256743738e7430a7ee34e71e732e9c" translate="yes" xml:space="preserve">
          <source>The model matcher relies on AngularJS &lt;code&gt;ng-model&lt;/code&gt;</source>
          <target state="translated">모델 매처는 AngularJS &lt;code&gt;ng-model&lt;/code&gt; 을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="1b612c6bfda69609e1109102317e5bc624c35366" translate="yes" xml:space="preserve">
          <source>The module ID of the module that contains the component. The component must be able to resolve relative URLs for templates and styles. SystemJS exposes the &lt;code&gt;__moduleName&lt;/code&gt; variable within each module. In CommonJS, this can be set to &lt;code&gt;module.id&lt;/code&gt;.</source>
          <target state="translated">구성 요소가 포함 된 모듈의 모듈 ID입니다. 컴포넌트는 템플리트 및 스타일의 상대 URL을 분석 할 수 있어야합니다. SystemJS는 각 모듈 내 에서 &lt;code&gt;__moduleName&lt;/code&gt; 변수를 노출합니다 . CommonJS에서 이것은 &lt;code&gt;module.id&lt;/code&gt; 로 설정 될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="7d1e56193d42e549f91f73ce49b0feaa87bbedad" translate="yes" xml:space="preserve">
          <source>The module ID to use for importing a flat module (when &lt;code&gt;flatModuleOutFile&lt;/code&gt; is true). References generated by the template compiler use this module name when importing symbols from the flat module. Ignored if &lt;code&gt;flatModuleOutFile&lt;/code&gt; is false.</source>
          <target state="translated">플랫 모듈을 가져 오는 데 사용할 모듈 ID입니다 ( &lt;code&gt;flatModuleOutFile&lt;/code&gt; 이 true 인 경우). 플랫 폼 모듈에서 심볼을 가져올 때 템플릿 컴파일러에서 생성 된 참조는이 모듈 이름을 사용합니다. &lt;code&gt;flatModuleOutFile&lt;/code&gt; 이 false 인 경우 무시됩니다 .</target>
        </trans-unit>
        <trans-unit id="5455a8d2855bb168b7bc39366f2e640359d610c2" translate="yes" xml:space="preserve">
          <source>The module definition passed to &lt;code&gt;configureTestingModule&lt;/code&gt; is a subset of the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; metadata properties.</source>
          <target state="translated">&lt;code&gt;configureTestingModule&lt;/code&gt; 에 전달 된 모듈 정의 는 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 메타 데이터 특성 의 서브 세트입니다 .</target>
        </trans-unit>
        <trans-unit id="f9ff3126a97dd2fd2099d3e56f0696f54b70dd23" translate="yes" xml:space="preserve">
          <source>The module's &lt;code&gt;declarations&lt;/code&gt; array tells Angular which components belong to that module. As you create more components, add them to &lt;code&gt;declarations&lt;/code&gt;.</source>
          <target state="translated">모듈의 &lt;code&gt;declarations&lt;/code&gt; 배열은 Angular에게 어떤 모듈이 해당 모듈에 속하는지를 알려줍니다. 더 많은 컴포넌트를 작성할 때 &lt;code&gt;declarations&lt;/code&gt; 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="77ab0288332bb3f75ca93faaa0848559f0efc9c4" translate="yes" xml:space="preserve">
          <source>The module's &lt;code&gt;imports&lt;/code&gt; array appears exclusively in the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; metadata object. It tells Angular about other NgModules that this particular module needs to function properly.</source>
          <target state="translated">모듈의 &lt;code&gt;imports&lt;/code&gt; 배열은 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 메타 데이터 개체 에만 독점적으로 나타납니다 . Angular에게이 모듈이 제대로 작동해야한다는 다른 NgModules에 대해 알려줍니다.</target>
        </trans-unit>
        <trans-unit id="37bab47b6d2fddd6ff6f0de2be55dffe5f0d68d5" translate="yes" xml:space="preserve">
          <source>The modules sets up the router to be used for testing. It provides spy implementations of &lt;code&gt;&lt;a href=&quot;../../common/location&quot;&gt;Location&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../../common/locationstrategy&quot;&gt;LocationStrategy&lt;/a&gt;&lt;/code&gt;, and &lt;a href=&quot;../../core/ngmodulefactoryloader&quot;&gt;&lt;code&gt;NgModuleFactoryLoader&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">모듈은 테스트에 사용될 라우터를 설정합니다. &lt;code&gt;&lt;a href=&quot;../../common/location&quot;&gt;Location&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;../../common/locationstrategy&quot;&gt;LocationStrategy&lt;/a&gt;&lt;/code&gt; 및 &lt;a href=&quot;../../core/ngmodulefactoryloader&quot;&gt; &lt;code&gt;NgModuleFactoryLoader&lt;/code&gt; &lt;/a&gt; 의 스파이 구현을 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="b8f968dae1b11cc243c9d8715ef10f99f4c40e38" translate="yes" xml:space="preserve">
          <source>The most common property binding sets an element property to a component property value. An example is binding the &lt;code&gt;src&lt;/code&gt; property of an image element to a component's &lt;code&gt;itemImageUrl&lt;/code&gt; property:</source>
          <target state="translated">가장 일반적인 속성 바인딩은 요소 속성을 구성 요소 속성 값으로 설정합니다. 이미지 요소 의 &lt;code&gt;src&lt;/code&gt; 속성을 구성 요소의 &lt;code&gt;itemImageUrl&lt;/code&gt; 속성에 바인딩하는 예가 있습니다.</target>
        </trans-unit>
        <trans-unit id="0e2d09ba31c42d96a1468928f0746f68810289cf" translate="yes" xml:space="preserve">
          <source>The most common use of schematics, however, is to integrate an Angular library with the Angular CLI. You can do this by creating the schematic files directly within the library project in an Angular workspace, without using the Schematics CLI. See &lt;a href=&quot;schematics-for-libraries&quot;&gt;Schematics for Libraries&lt;/a&gt;.</source>
          <target state="translated">그러나 회로도의 가장 일반적인 용도는 Angular 라이브러리를 Angular CLI와 통합하는 것입니다. Schematics CLI를 사용하지 않고 Angular 작업 공간의 라이브러리 프로젝트 내에서 회로도 파일을 직접 작성하여이를 수행 할 수 있습니다. &lt;a href=&quot;schematics-for-libraries&quot;&gt;라이브러리 회로도를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="f03ef21da8a8d1525f2de629dfd2cc725b3a1d3c" translate="yes" xml:space="preserve">
          <source>The most common use of this service is to optimize performance when starting a work consisting of one or more asynchronous tasks that don't require UI updates or error handling to be handled by Angular. Such tasks can be kicked off via &lt;a href=&quot;ngzone#runOutsideAngular&quot;&gt;runOutsideAngular&lt;/a&gt; and if needed, these tasks can reenter the Angular zone via &lt;a href=&quot;ngzone#run&quot;&gt;run&lt;/a&gt;.</source>
          <target state="translated">이 서비스의 가장 일반적인 용도는 UI 업데이트 나 오류 처리가 Angular에서 처리 할 필요가없는 하나 이상의 비동기 작업으로 구성된 작업을 시작할 때 성능을 최적화하는 것입니다. 이러한 작업은 &lt;a href=&quot;ngzone#runOutsideAngular&quot;&gt;runOutsideAngular&lt;/a&gt; 를 통해 시작될 수 있으며 필요한 경우 &lt;a href=&quot;ngzone#run&quot;&gt;run을&lt;/a&gt; 통해 Angular 영역에 다시 들어갈 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d721ef30c8c2d93ee7d6cc51782e960cbb70e267" translate="yes" xml:space="preserve">
          <source>The most common validation is making a field required. This section describes how to add a required validation to the &lt;code&gt;firstName&lt;/code&gt; control.</source>
          <target state="translated">가장 일반적인 유효성 검사는 필드를 필수로 만드는 것입니다. 이 섹션에서는 &lt;code&gt;firstName&lt;/code&gt; 컨트롤에 필요한 유효성 검사를 추가하는 방법에 대해 설명합니다 .</target>
        </trans-unit>
        <trans-unit id="5bfdb12a001db3d37570c28c95a12f339133fefb" translate="yes" xml:space="preserve">
          <source>The most common way to get a hold of shared services is through Angular &lt;a href=&quot;dependency-injection&quot;&gt;dependency injection&lt;/a&gt;, rather than through the module system (importing a module will result in a new service instance, which is not a typical usage).</source>
          <target state="translated">공유 서비스를 유지하는 가장 일반적인 방법 은 모듈 시스템을 통하지 않고 Angular &lt;a href=&quot;dependency-injection&quot;&gt;dependency injection&lt;/a&gt; 을 사용하는 것입니다 (모듈을 가져 오면 새로운 서비스 인스턴스가 생길 수 있습니다).</target>
        </trans-unit>
        <trans-unit id="a8d2e49dd96691f76f1b0107dae749dd4d4cfd1a" translate="yes" xml:space="preserve">
          <source>The most important &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; decorator annotates the top-level &lt;strong&gt;AppModule&lt;/strong&gt; class.</source>
          <target state="translated">가장 중요한 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 데코레이터는 최상위 &lt;strong&gt;AppModule&lt;/strong&gt; 클래스에 주석을 달았습니다 .</target>
        </trans-unit>
        <trans-unit id="696217913dab3bcc82d27ff3f8a194e99b19b4d3" translate="yes" xml:space="preserve">
          <source>The most recent stable released version of Angular appears in the &lt;a href=&quot;../index&quot;&gt;Angular documentation&lt;/a&gt; at the bottom of the left side navigation. For example, &lt;code&gt;stable (v5.2.9)&lt;/code&gt;.</source>
          <target state="translated">가장 안정적인 최신 버전의 Angular 는 왼쪽 탐색 맨 아래의 &lt;a href=&quot;../index&quot;&gt;Angular 설명서&lt;/a&gt; 에 나타납니다 . 예를 들어, &lt;code&gt;stable (v5.2.9)&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="7b203ac14927d287cb1b24febc038b8400723e19" translate="yes" xml:space="preserve">
          <source>The most straight forward way to get accurate typings is to cast the return value of the relevant DOM methods to the correct type. For that, you can use the &lt;code&gt;&lt;a href=&quot;../api/elements/ngelement&quot;&gt;NgElement&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/elements/withproperties&quot;&gt;WithProperties&lt;/a&gt;&lt;/code&gt; types (both exported from &lt;code&gt;@angular/elements&lt;/code&gt;):</source>
          <target state="translated">정확한 타이핑을 얻는 가장 직접적인 방법은 관련 DOM 메소드의 리턴 값을 올바른 유형으로 캐스트하는 것입니다. 이를 위해 &lt;code&gt;&lt;a href=&quot;../api/elements/ngelement&quot;&gt;NgElement&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;../api/elements/withproperties&quot;&gt;WithProperties&lt;/a&gt;&lt;/code&gt; 유형 ( &lt;code&gt;@angular/elements&lt;/code&gt; 에서 내 보낸 유형)을 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="6a00a106ce13b09ae830b89d6a9ec79692548add" translate="yes" xml:space="preserve">
          <source>The name control sets up two built-in validators&amp;mdash;&lt;code&gt;Validators.required&lt;/code&gt; and &lt;code&gt;Validators.minLength(4)&lt;/code&gt;&amp;mdash;and one custom validator, &lt;code&gt;forbiddenNameValidator&lt;/code&gt;. For more details see the &lt;a href=&quot;form-validation#custom-validators&quot;&gt;Custom validators&lt;/a&gt; section in this guide.</source>
          <target state="translated">이름 컨트롤은 내장 된 &lt;code&gt;Validators.required&lt;/code&gt; 및 &lt;code&gt;Validators.minLength(4)&lt;/code&gt; 와 두 개의 사용자 정의 유효성 검사기 인 &lt;code&gt;forbiddenNameValidator&lt;/code&gt; 를 설정 합니다. 자세한 내용은 이 가이드 의 &lt;a href=&quot;form-validation#custom-validators&quot;&gt;사용자 지정 유효성 검사기&lt;/a&gt; 섹션을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="bd303e4295a148f60c77b1b8f935a0d9785ceabf" translate="yes" xml:space="preserve">
          <source>The name for the control</source>
          <target state="translated">컨트롤의 이름</target>
        </trans-unit>
        <trans-unit id="3f5bffaecc38c665fdf4934a9248d6901b121e04" translate="yes" xml:space="preserve">
          <source>The name of binding variable</source>
          <target state="translated">바인딩 변수의 이름</target>
        </trans-unit>
        <trans-unit id="ee11a869e2d385aca970768492e28306d0c02610" translate="yes" xml:space="preserve">
          <source>The name of related Universal app.</source>
          <target state="translated">관련 범용 앱의 이름입니다.</target>
        </trans-unit>
        <trans-unit id="f31111a73d24d0ea080510639dab3203d39876c6" translate="yes" xml:space="preserve">
          <source>The name of the &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; used to render the route. For an unnamed outlet, the outlet name is &lt;em&gt;primary&lt;/em&gt;.</source>
          <target state="translated">경로를 렌더링하는 데 사용되는 &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; 의 이름입니다 . 이름이없는 콘센트의 경우 콘센트 이름이 &lt;em&gt;primary&lt;/em&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="2830e043f06ce13b7965727721f4eeda24ae55dd" translate="yes" xml:space="preserve">
          <source>The name of the DOM property to which the input property is bound.</source>
          <target state="translated">입력 특성이 바인드 된 DOM 특성의 이름입니다.</target>
        </trans-unit>
        <trans-unit id="9ea6252fe6bfcbe28e4a7dbd02f705de12a2b425" translate="yes" xml:space="preserve">
          <source>The name of the DOM property to which the output property is bound.</source>
          <target state="translated">출력 특성이 바인드 된 DOM 특성의 이름입니다.</target>
        </trans-unit>
        <trans-unit id="a34788f4dbd8d335c3d16d2725eb10d84db5f8eb" translate="yes" xml:space="preserve">
          <source>The name of the Karma configuration file.</source>
          <target state="translated">Karma 구성 파일의 이름입니다.</target>
        </trans-unit>
        <trans-unit id="7bc259cccdbc4feb53380144d564c6c9acfe48ea" translate="yes" xml:space="preserve">
          <source>The name of the NgModule.</source>
          <target state="translated">NgModule의 이름입니다.</target>
        </trans-unit>
        <trans-unit id="31c15168aefcb147a81f6d56a4fb545633af3cbb" translate="yes" xml:space="preserve">
          <source>The name of the Protractor configuration file.</source>
          <target state="translated">각도기 구성 파일의 이름입니다.</target>
        </trans-unit>
        <trans-unit id="a5161c8757038b183e435833dbc3d24f71cae7ec" translate="yes" xml:space="preserve">
          <source>The name of the TSLint configuration file.</source>
          <target state="translated">TSLint 구성 파일의 이름입니다.</target>
        </trans-unit>
        <trans-unit id="f4e2073f1c9d163ee7d923261881502e64ca10d8" translate="yes" xml:space="preserve">
          <source>The name of the TypeScript configuration file for tests.</source>
          <target state="translated">테스트 할 TypeScript 구성 파일의 이름입니다.</target>
        </trans-unit>
        <trans-unit id="ca18d6818e4f88c372ec7928897bf20767d10b87" translate="yes" xml:space="preserve">
          <source>The name of the TypeScript configuration file.</source>
          <target state="translated">TypeScript 구성 파일의 이름입니다.</target>
        </trans-unit>
        <trans-unit id="23b607725624b97d6681994d12395b88f5004fa9" translate="yes" xml:space="preserve">
          <source>The name of the application directory.</source>
          <target state="translated">응용 프로그램 디렉토리의 이름입니다.</target>
        </trans-unit>
        <trans-unit id="9bf434ae63b3e0efedb894f4541221d8148e3143" translate="yes" xml:space="preserve">
          <source>The name of the application folder.</source>
          <target state="translated">응용 프로그램 폴더의 이름입니다.</target>
        </trans-unit>
        <trans-unit id="98dd415e8f45a9d589f3ab22fe8844e6831aaeb3" translate="yes" xml:space="preserve">
          <source>The name of the attribute that has changed.</source>
          <target state="translated">변경된 속성의 이름입니다.</target>
        </trans-unit>
        <trans-unit id="51e356de047f692621f1ac826eda16393c2f1d57" translate="yes" xml:space="preserve">
          <source>The name of the attribute whose value can be injected.</source>
          <target state="translated">값을 삽입 할 수있는 속성의 이름입니다.</target>
        </trans-unit>
        <trans-unit id="0049c017534779feed3c5a4e10e97646ee097a91" translate="yes" xml:space="preserve">
          <source>The name of the bundle (for &lt;code&gt;type=bundle&lt;/code&gt;).</source>
          <target state="translated">번들 이름 ( &lt;code&gt;type=bundle&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="b095d5334d88f321e32a2bec17d4998f29183ab5" translate="yes" xml:space="preserve">
          <source>The name of the component.</source>
          <target state="translated">구성 요소의 이름입니다.</target>
        </trans-unit>
        <trans-unit id="298fb556486176a59b92ee293ee40dc19082796f" translate="yes" xml:space="preserve">
          <source>The name of the enum.</source>
          <target state="translated">열거 형의 이름입니다.</target>
        </trans-unit>
        <trans-unit id="4ac12cbaf7ddc32136d2246eea1e25012d5463a2" translate="yes" xml:space="preserve">
          <source>The name of the event to listen for.</source>
          <target state="translated">수신 할 이벤트의 이름입니다.</target>
        </trans-unit>
        <trans-unit id="3effaffa0019768d26589b5c5f6cbf735fb6f172" translate="yes" xml:space="preserve">
          <source>The name of the index file</source>
          <target state="translated">색인 파일의 이름</target>
        </trans-unit>
        <trans-unit id="d4bad0ca50233e344d10d5f4399e54a6b4d776fb" translate="yes" xml:space="preserve">
          <source>The name of the interface.</source>
          <target state="translated">인터페이스의 이름입니다.</target>
        </trans-unit>
        <trans-unit id="e0dae223e862076c307be059fb3da2195512e15e" translate="yes" xml:space="preserve">
          <source>The name of the library.</source>
          <target state="translated">라이브러리의 이름</target>
        </trans-unit>
        <trans-unit id="0e4e86dc522df63f846535a545048ecb92d2ef5a" translate="yes" xml:space="preserve">
          <source>The name of the main entry-point file.</source>
          <target state="translated">기본 진입 점 파일의 이름입니다.</target>
        </trans-unit>
        <trans-unit id="1ae438b15dd77fd8ad30e891d288ec894f9c8b5a" translate="yes" xml:space="preserve">
          <source>The name of the new app.</source>
          <target state="translated">새 앱의 이름입니다.</target>
        </trans-unit>
        <trans-unit id="c05ae963758a0b1ea71e624aa37d935aad1862cc" translate="yes" xml:space="preserve">
          <source>The name of the new class.</source>
          <target state="translated">새로운 클래스의 이름.</target>
        </trans-unit>
        <trans-unit id="1cc12f20eb95c9010460b29584ae08cc288e4233" translate="yes" xml:space="preserve">
          <source>The name of the new directive.</source>
          <target state="translated">새 지시문의 이름입니다.</target>
        </trans-unit>
        <trans-unit id="e94c910c3587ab8593febb3f805bcd0616accd65" translate="yes" xml:space="preserve">
          <source>The name of the new route guard.</source>
          <target state="translated">새로운 루트 가드의 이름입니다.</target>
        </trans-unit>
        <trans-unit id="05fef20c845e23cfb269d81a5518f8c2dc19a116" translate="yes" xml:space="preserve">
          <source>The name of the new workspace and initial project.</source>
          <target state="translated">새 작업 공간 및 초기 프로젝트의 이름</target>
        </trans-unit>
        <trans-unit id="4f3f5dc853fd89760b7214e5ccac1a838a94a12a" translate="yes" xml:space="preserve">
          <source>The name of the pipe.</source>
          <target state="translated">파이프의 이름입니다.</target>
        </trans-unit>
        <trans-unit id="84108afbf0ae3d52386033a2d683d8a1ae512bb7" translate="yes" xml:space="preserve">
          <source>The name of the polyfills file.</source>
          <target state="translated">폴리 필 파일의 이름입니다.</target>
        </trans-unit>
        <trans-unit id="60a0ead0a1aaa4e2f2b4233c956828d7b450a96e" translate="yes" xml:space="preserve">
          <source>The name of the project in which to create the enum. Default is the configured default project for the workspace.</source>
          <target state="translated">열거 형을 만들 프로젝트의 이름입니다. 기본값은 작업 공간에 대해 구성된 기본 프로젝트입니다.</target>
        </trans-unit>
        <trans-unit id="acc889a5813553b91add89b3f03c313d7a4b86e6" translate="yes" xml:space="preserve">
          <source>The name of the project to build. Can be an application or a library.</source>
          <target state="translated">빌드 할 프로젝트의 이름입니다. 응용 프로그램 또는 라이브러리 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5db5ca31c4c34286b71367170d486bbec874adc3" translate="yes" xml:space="preserve">
          <source>The name of the project to deploy.</source>
          <target state="translated">배포 할 프로젝트의 이름입니다.</target>
        </trans-unit>
        <trans-unit id="877a3cd4d86d1c683955bcdb8afd34543824fbc6" translate="yes" xml:space="preserve">
          <source>The name of the project to lint.</source>
          <target state="translated">린트 할 프로젝트의 이름입니다.</target>
        </trans-unit>
        <trans-unit id="0c0ea6bda23de88805444a87357d6fc67352074e" translate="yes" xml:space="preserve">
          <source>The name of the project.</source>
          <target state="translated">프로젝트 이름.</target>
        </trans-unit>
        <trans-unit id="5cca2fedb252b808c68e0001d796a768f14fe5b8" translate="yes" xml:space="preserve">
          <source>The name of the related client app.</source>
          <target state="translated">관련 클라이언트 앱의 이름입니다.</target>
        </trans-unit>
        <trans-unit id="0e1d1073f831d9e075296e86ca7a2b766cf84ddc" translate="yes" xml:space="preserve">
          <source>The name of the related client app. Required in place of &quot;project&quot;.</source>
          <target state="translated">관련 클라이언트 앱의 이름입니다. &quot;프로젝트&quot;대신 필요합니다.</target>
        </trans-unit>
        <trans-unit id="2b4489e5f4e2653828a596bc22eebe8452c680c4" translate="yes" xml:space="preserve">
          <source>The name of the root NgModule class.</source>
          <target state="translated">루트 NgModule 클래스의 이름입니다.</target>
        </trans-unit>
        <trans-unit id="39f772f8508b793cd949b7d95f84bb953733b091" translate="yes" xml:space="preserve">
          <source>The name of the root NgModule file.</source>
          <target state="translated">루트 NgModule 파일의 이름입니다.</target>
        </trans-unit>
        <trans-unit id="b9c1e32c2285950cd5c0ea125336cadcabee7ee5" translate="yes" xml:space="preserve">
          <source>The name of the root module class.</source>
          <target state="translated">루트 모듈 클래스의 이름</target>
        </trans-unit>
        <trans-unit id="e79f3a656af3a23c870229cdcf812e615d254ba2" translate="yes" xml:space="preserve">
          <source>The name of the root module file</source>
          <target state="translated">루트 모듈 파일의 이름</target>
        </trans-unit>
        <trans-unit id="d1af03b5050c51d9047b1136086eb139e2bfa56a" translate="yes" xml:space="preserve">
          <source>The name of the routing module should parallel the name of its companion module, using the suffix &quot;Routing&quot;. For example, &lt;code&gt;FooModule&lt;/code&gt; in &lt;code&gt;foo.module.ts&lt;/code&gt; has a routing module named &lt;code&gt;FooRoutingModule&lt;/code&gt; in &lt;code&gt;foo-routing.module.ts&lt;/code&gt;. If the companion module is the root &lt;code&gt;AppModule&lt;/code&gt;, the &lt;code&gt;AppRoutingModule&lt;/code&gt; adds router configuration to its imports with &lt;code&gt;RouterModule.forRoot(routes)&lt;/code&gt;. All other routing modules are children that import &lt;code&gt;RouterModule.forChild(routes)&lt;/code&gt;.</source>
          <target state="translated">라우팅 모듈의 이름은 접미사 &quot;Routing&quot;을 사용하여 컴패니언 모듈의 이름과 평행을 이루어야합니다. 예를 들어, &lt;code&gt;FooModule&lt;/code&gt; 에서 &lt;code&gt;foo.module.ts&lt;/code&gt; 는 이름의 라우팅 모듈이 &lt;code&gt;FooRoutingModule&lt;/code&gt; 에서 &lt;code&gt;foo-routing.module.ts&lt;/code&gt; . 컴패니언 모듈이 루트 &lt;code&gt;AppModule&lt;/code&gt; 인 경우 &lt;code&gt;AppRoutingModule&lt;/code&gt; 은 &lt;code&gt;RouterModule.forRoot(routes)&lt;/code&gt; 를 사용하여 가져 오기에 라우터 구성을 추가합니다 . 다른 모든 라우팅 모듈은 &lt;code&gt;RouterModule.forChild(routes)&lt;/code&gt; 를 가져 오는 자식입니다 .</target>
        </trans-unit>
        <trans-unit id="5cb7b85a598a028b7c4208d8cba347b086c65cad" translate="yes" xml:space="preserve">
          <source>The name of the service.</source>
          <target state="translated">서비스 이름</target>
        </trans-unit>
        <trans-unit id="eb80b5650274c357613ae29fbc7ee992a7295266" translate="yes" xml:space="preserve">
          <source>The name of the state from which the animation is triggered.</source>
          <target state="translated">애니메이션이 트리거되는 상태의 이름입니다.</target>
        </trans-unit>
        <trans-unit id="642538b3255d34b3733d341540a32bdf0783bc44" translate="yes" xml:space="preserve">
          <source>The name of the state in which the animation completes.</source>
          <target state="translated">애니메이션이 완료된 상태의 이름입니다.</target>
        </trans-unit>
        <trans-unit id="9e83f52375e1bbe1dd110ed6d2d07fc578d60fbe" translate="yes" xml:space="preserve">
          <source>The name of the style.</source>
          <target state="translated">스타일의 이름입니다.</target>
        </trans-unit>
        <trans-unit id="d5dd95f899057794c059b568058ef2fda9777be8" translate="yes" xml:space="preserve">
          <source>The name of the test entry-point file.</source>
          <target state="translated">테스트 진입 점 파일의 이름입니다.</target>
        </trans-unit>
        <trans-unit id="f00cd6c1142679bd0fe1c3ebd4ca78600af96a2c" translate="yes" xml:space="preserve">
          <source>The name of the worker.</source>
          <target state="translated">근로자의 이름입니다.</target>
        </trans-unit>
        <trans-unit id="6c69a9d664620bbeca7664bd75d1ad6ed2baaaed" translate="yes" xml:space="preserve">
          <source>The names of package(s) to update.</source>
          <target state="translated">업데이트 할 패키지 이름입니다.</target>
        </trans-unit>
        <trans-unit id="1abdc0f45b3ba1f3f4aab750a1abd18ac0401e50" translate="yes" xml:space="preserve">
          <source>The namespace for the new element.</source>
          <target state="translated">새 요소의 네임 스페이스</target>
        </trans-unit>
        <trans-unit id="9443280c899669a2c6c547ccf058f0563c8d9971" translate="yes" xml:space="preserve">
          <source>The namespace in which the attribute is defined.</source>
          <target state="translated">속성이 정의 된 네임 스페이스</target>
        </trans-unit>
        <trans-unit id="5706a1bb56e527d4bef0f37bae074bd6120e33cc" translate="yes" xml:space="preserve">
          <source>The namespace.</source>
          <target state="translated">네임 스페이스</target>
        </trans-unit>
        <trans-unit id="5de4b279d3860800c1274a15257bfb7aa3d5e166" translate="yes" xml:space="preserve">
          <source>The native &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; element doesn't have a &lt;code&gt;form&lt;/code&gt; property, but the &lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; directive does, which allows disabling the submit button if the &lt;code&gt;itemForm.form.valid&lt;/code&gt; is invalid and passing the entire form control tree to the parent component's &lt;code&gt;onSubmit()&lt;/code&gt; method.</source>
          <target state="translated">네이티브 &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; 요소에는 &lt;code&gt;form&lt;/code&gt; 속성이 없지만 &lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; 지시어는 &lt;code&gt;itemForm.form.valid&lt;/code&gt; 가 유효 하지 않고 제출 양식 버튼을 비활성화 하고 전체 양식 제어 트리를 부모 구성 요소의 &lt;code&gt;onSubmit()&lt;/code&gt; 메소드에 전달할 수 있습니다. .</target>
        </trans-unit>
        <trans-unit id="f53c7525b5762013b1501a0e4c46863466a89451" translate="yes" xml:space="preserve">
          <source>The native DOM element at the root of the component.</source>
          <target state="translated">컴포넌트의 루트에있는 기본 DOM 요소</target>
        </trans-unit>
        <trans-unit id="29761c2a932d59dd3f7b79be5a29968749831e65" translate="yes" xml:space="preserve">
          <source>The native element at the root of the component.</source>
          <target state="translated">구성 요소의 루트에있는 기본 요소입니다.</target>
        </trans-unit>
        <trans-unit id="dff590b09b3db22a6980b41fca483eda9e9a641b" translate="yes" xml:space="preserve">
          <source>The navigation links at the top, left, and bottom of the screen are generated from the JSON configuration file, &lt;code&gt;content/navigation.json&lt;/code&gt;.</source>
          <target state="translated">화면의 상단, 왼쪽 및 하단에있는 탐색 링크는 JSON 구성 파일 &lt;code&gt;content/navigation.json&lt;/code&gt; 에서 생성됩니다 .</target>
        </trans-unit>
        <trans-unit id="3403c9d3de501a04ade350bc06e6b24f8560df85" translate="yes" xml:space="preserve">
          <source>The navigation state that was previously supplied to the &lt;code&gt;pushState&lt;/code&gt; call, when the navigation is triggered by a &lt;code&gt;popstate&lt;/code&gt; event. Otherwise null.</source>
          <target state="translated">&lt;code&gt;popstate&lt;/code&gt; 이벤트 에 의해 탐색이 트리거 될 때 &lt;code&gt;pushState&lt;/code&gt; 호출 에 이전에 제공된 탐색 상태 . 그렇지 않으면 null입니다.</target>
        </trans-unit>
        <trans-unit id="4c5c2daf86d485506deecd53ed0077e779f790db" translate="yes" xml:space="preserve">
          <source>The need for this polyfill was removed in Angular version 8.0 (&lt;a href=&quot;https://github.com/angular/angular-cli/pull/14473&quot;&gt;see #14473&lt;/a&gt;), rendering the presence of the poylfill in most Angular applications unnecessary. Because the polyfill can be depended on by 3rd-party libraries, instead of removing it from all Angular projects, we are deprecating the requirement for this polyfill as of version 8.0. This should give library authors and application developers sufficient time to evaluate if they need the polyfill, and perform any refactoring necessary to remove the dependency on it.</source>
          <target state="translated">이 폴리 필의 필요성은 Angular 버전 8.0 ( &lt;a href=&quot;https://github.com/angular/angular-cli/pull/14473&quot;&gt;#&lt;/a&gt; 14473 참조)에서 제거 되었으므로 대부분의 Angular 응용 프로그램에서 poylfill의 존재가 불필요합니다. 폴리 필은 타사 라이브러리에 의존 할 수 있기 때문에 모든 Angular 프로젝트에서 폴리 필을 제거하는 대신 8.0 버전부터이 폴리 필에 대한 요구 사항이 더 이상 사용되지 않습니다. 따라서 라이브러리 작성자와 응용 프로그램 개발자는 폴리 필이 필요한지 평가할 충분한 시간을 제공하고 이에 대한 종속성을 제거하는 데 필요한 리팩토링을 수행해야합니다.</target>
        </trans-unit>
        <trans-unit id="9926b8eddb28f5b61fe9e5c8e2449b04b9fca67b" translate="yes" xml:space="preserve">
          <source>The net result is an AngularJS directive called &lt;code&gt;heroDetail&lt;/code&gt;, that you can use like any other directive in AngularJS templates.</source>
          <target state="translated">최종 결과는 &lt;code&gt;heroDetail&lt;/code&gt; 이라는 AngularJS 지시문으로 , AngularJS 템플릿의 다른 지시문과 마찬가지로 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="363efe528cca3a39d4ac1f20d51e40123493e611" translate="yes" xml:space="preserve">
          <source>The new &lt;code&gt;Phone&lt;/code&gt; service has the same features as the original, &lt;code&gt;ngResource&lt;/code&gt;-based service. Because it's an Angular service, you register it with the &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; providers:</source>
          <target state="translated">새로운 &lt;code&gt;Phone&lt;/code&gt; 서비스는 원래 &lt;code&gt;ngResource&lt;/code&gt; 기반 서비스 와 동일한 기능을 가지고 있습니다. Angular 서비스이므로 &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 제공자에 등록합니다 .</target>
        </trans-unit>
        <trans-unit id="df21a5f33d940b8fd543f9a1645f478b67bd8405" translate="yes" xml:space="preserve">
          <source>The new &lt;code&gt;PhoneListComponent&lt;/code&gt; uses the Angular &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; directive, located in the &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt;. Add the &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; to &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; imports, declare the new &lt;code&gt;PhoneListComponent&lt;/code&gt; and finally add it to &lt;code&gt;entryComponents&lt;/code&gt; since you downgraded it:</source>
          <target state="translated">새로운 &lt;code&gt;PhoneListComponent&lt;/code&gt; 는 각 사용 &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; 의 에있는 지시어, &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; 을 . &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 가져 오기에 &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; 을 추가하고 새 &lt;code&gt;PhoneListComponent&lt;/code&gt; 를 선언 한 후 다운 그레이드 한 후 &lt;code&gt;entryComponents&lt;/code&gt; 에 추가 하십시오.</target>
        </trans-unit>
        <trans-unit id="b4153d9c7e00866dc99a220129088a88c0dd7d73" translate="yes" xml:space="preserve">
          <source>The new API is a smaller, easier, and more powerful way to make HTTP requests in Angular. The new API simplifies the default ergonomics: There is no need to map by invoking the &lt;code&gt;.json()&lt;/code&gt; method. It also supports typed return values and interceptors.</source>
          <target state="translated">새로운 API는 Angular에서 HTTP 요청을 작성하는 더 작고 쉽고 강력한 방법입니다. 새로운 API는 기본 인체 공학을 단순화합니다 . &lt;code&gt;.json()&lt;/code&gt; 메서드를 호출하여 매핑 할 필요가 없습니다 . 또한 유형이 지정된 리턴 값 및 인터셉터도 지원합니다.</target>
        </trans-unit>
        <trans-unit id="4ba87e5244a7f2ae127d3527851072feaa64a3a5" translate="yes" xml:space="preserve">
          <source>The new app's configuration appears in the &lt;code&gt;projects&lt;/code&gt; section of the &lt;code&gt;angular.json&lt;/code&gt; workspace configuration file, under its project name.</source>
          <target state="translated">새 앱의 구성 은 &lt;code&gt;angular.json&lt;/code&gt; 작업 공간 구성 파일 의 &lt;code&gt;projects&lt;/code&gt; 섹션에 프로젝트 이름 아래에 나타납니다 .</target>
        </trans-unit>
        <trans-unit id="97e1064b6ccb7a71d78b43cbdff3f66b187e3101" translate="yes" xml:space="preserve">
          <source>The new application is running in Angular zone, and therefore it no longer needs calls to &lt;code&gt;$apply()&lt;/code&gt;.</source>
          <target state="translated">새 응용 프로그램이 Angular 영역에서 실행 중이므로 더 이상 &lt;code&gt;$apply()&lt;/code&gt; 호출 할 필요가 없습니다 .</target>
        </trans-unit>
        <trans-unit id="1207f1b47a2ceddd5399dbc4b8537238ef541e74" translate="yes" xml:space="preserve">
          <source>The new application is running in an Angular zone, and therefore it no longer needs calls to &lt;code&gt;$apply()&lt;/code&gt;.</source>
          <target state="translated">새 응용 프로그램이 Angular 영역에서 실행 중이므로 더 이상 &lt;code&gt;$apply()&lt;/code&gt; 호출 할 필요가 없습니다 .</target>
        </trans-unit>
        <trans-unit id="b35b343343c03348a9572e3228bb3c952b9ac234" translate="yes" xml:space="preserve">
          <source>The new child node.</source>
          <target state="translated">새로운 자식 노드.</target>
        </trans-unit>
        <trans-unit id="9840b56c4f6874ecf576985d09a05dbfa2eb89c5" translate="yes" xml:space="preserve">
          <source>The new child nodes.</source>
          <target state="translated">새로운 자식 노드.</target>
        </trans-unit>
        <trans-unit id="4b58eb8174eac708d6b4490ec1c0c1d10ce4c92f" translate="yes" xml:space="preserve">
          <source>The new product alert component takes a product as input from the product list. With that input, it shows or hides the &quot;Notify Me&quot; button, based on the price of the product. The Phone XL price is over $700, so the &quot;Notify Me&quot; button appears on that product.</source>
          <target state="translated">새 제품 경고 구성 요소는 제품을 제품 목록에서 입력으로 가져옵니다. 해당 입력을 통해 제품 가격에 따라 &quot;알림&quot;버튼을 표시하거나 숨 깁니다. Phone XL 가격이 700 달러 이상이므로 해당 제품에 &quot;알림&quot;버튼이 나타납니다.</target>
        </trans-unit>
        <trans-unit id="e6f1054918bbc968acfe9e3749cce36a53bf28d3" translate="yes" xml:space="preserve">
          <source>The new project is automatically configured for Ivy. Specifically, the enableIvy option is set to &lt;code&gt;true&lt;/code&gt; in the project's &lt;code&gt;tsconfig.app.json&lt;/code&gt; file.</source>
          <target state="translated">새 프로젝트는 아이비에 맞게 자동 구성됩니다. 특히 enableIvy 옵션은 프로젝트의 &lt;code&gt;tsconfig.app.json&lt;/code&gt; 파일 에서 &lt;code&gt;true&lt;/code&gt; 로 설정되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="d6aa8f89505f75cf8c09ee6eb7157b95f50f181b" translate="yes" xml:space="preserve">
          <source>The new shipping component isn't hooked into any other component yet, but you can see it in the preview pane by entering the URL specified by its route. The URL has the pattern: &lt;code&gt;https://getting-started.stackblitz.io/shipping&lt;/code&gt; where the &lt;code&gt;getting-started.stackblitz.io&lt;/code&gt; part may be different for your StackBlitz project.</source>
          <target state="translated">새 배송 구성 요소는 아직 다른 구성 요소에 연결되어 있지 않지만 경로로 지정된 URL을 입력하여 미리보기 창에서 볼 수 있습니다. URL의 패턴은 &lt;code&gt;https://getting-started.stackblitz.io/shipping&lt;/code&gt; 입니다. 여기서 &lt;code&gt;getting-started.stackblitz.io&lt;/code&gt; 부분은 StackBlitz 프로젝트와 다를 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3743d1eecb933641cda77a717298bd354faf0984" translate="yes" xml:space="preserve">
          <source>The new value</source>
          <target state="translated">새로운 가치</target>
        </trans-unit>
        <trans-unit id="021d55f858f59001a051bc43ae234648f75e1184" translate="yes" xml:space="preserve">
          <source>The new value emitted by &lt;code&gt;ngModelChange&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ngModelChange&lt;/code&gt; 가 생성 한 새로운 값 입니다.</target>
        </trans-unit>
        <trans-unit id="c8570bda1df02aa4830c29774e26bf3a60827bab" translate="yes" xml:space="preserve">
          <source>The new value for the control that matches the structure of the group.</source>
          <target state="translated">그룹의 구조와 일치하는 컨트롤의 새 값입니다.</target>
        </trans-unit>
        <trans-unit id="ad6dd37b94567d0ed30940d4cbe011a866a03911" translate="yes" xml:space="preserve">
          <source>The new value for the control.</source>
          <target state="translated">컨트롤의 새로운 값.</target>
        </trans-unit>
        <trans-unit id="2118e7142b9bc910be772dcc7fd3cdf8497c8881" translate="yes" xml:space="preserve">
          <source>The new value for the directive's control.</source>
          <target state="translated">지시문 제어의 새로운 값.</target>
        </trans-unit>
        <trans-unit id="bdb50e4b11bfbe575629c662f2a9a5650543a293" translate="yes" xml:space="preserve">
          <source>The new value for the element</source>
          <target state="translated">요소의 새로운 가치</target>
        </trans-unit>
        <trans-unit id="7b746bb6b747d0bb853f7c9fc94c0337260bae7e" translate="yes" xml:space="preserve">
          <source>The new value for the form.</source>
          <target state="translated">양식의 새로운 가치.</target>
        </trans-unit>
        <trans-unit id="61b8b2c4fe44f460d9964c15d7ca4f73c9a6c794" translate="yes" xml:space="preserve">
          <source>The new value for the view</source>
          <target state="translated">뷰의 새로운 가치</target>
        </trans-unit>
        <trans-unit id="021a9d13fa37792c9492e99195cbcb8204d81b7b" translate="yes" xml:space="preserve">
          <source>The new value for the view model.</source>
          <target state="translated">뷰 모델의 새로운 값.</target>
        </trans-unit>
        <trans-unit id="b9b227961e3d04545a92b5ce44cb233f0e0e2e32" translate="yes" xml:space="preserve">
          <source>The new value of the attribute.</source>
          <target state="translated">속성의 새로운 값.</target>
        </trans-unit>
        <trans-unit id="979eb5744be34e7601501a529cdae1a63ed19682" translate="yes" xml:space="preserve">
          <source>The new value or array of values.</source>
          <target state="translated">새로운 값 또는 값의 배열</target>
        </trans-unit>
        <trans-unit id="7b08063f6e4b837b85157e98f41e7848cc96e9ca" translate="yes" xml:space="preserve">
          <source>The new value to add.</source>
          <target state="translated">추가 할 새로운 값입니다.</target>
        </trans-unit>
        <trans-unit id="5846611ef08161b895e9cfae56a1ecdbe7079b9d" translate="yes" xml:space="preserve">
          <source>The new value.</source>
          <target state="translated">새로운 가치.</target>
        </trans-unit>
        <trans-unit id="f0ee706f3bb39b349be9aafea079617b78668c88" translate="yes" xml:space="preserve">
          <source>The new version waits for the &lt;code&gt;Observable&lt;/code&gt; to emit the array of heroes&amp;mdash;which could happen now or several minutes from now. The &lt;code&gt;subscribe()&lt;/code&gt; method passes the emitted array to the callback, which sets the component's &lt;code&gt;heroes&lt;/code&gt; property.</source>
          <target state="translated">새로운 버전은 &lt;code&gt;Observable&lt;/code&gt; 이 지금이나 몇 분 후에 일어날 수있는 여러 영웅들을 방출 할 때까지 기다립니다 . &lt;code&gt;subscribe()&lt;/code&gt; 메소드는 컴포넌트의 설정 콜백에 방출 어레이 통과 &lt;code&gt;heroes&lt;/code&gt; 속성.</target>
        </trans-unit>
        <trans-unit id="c61fd74c6478e58dddf9101895e08ed5f52a84e1" translate="yes" xml:space="preserve">
          <source>The new workspace folder is given the specified project name, and contains configuration files at the top level.</source>
          <target state="translated">새 작업 공간 폴더에는 지정된 프로젝트 이름이 제공되며 최상위 레벨의 구성 파일이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="ba1a5a973d20feba0e6b33242fbe750ff2e79612" translate="yes" xml:space="preserve">
          <source>The next example captures the &lt;code&gt;index&lt;/code&gt; in a variable named &lt;code&gt;i&lt;/code&gt; and displays it with the item name.</source>
          <target state="translated">다음 예제는 &lt;code&gt;i&lt;/code&gt; 라는 변수 에서 &lt;code&gt;index&lt;/code&gt; 을 캡처 하여 항목 이름과 함께 표시합니다.</target>
        </trans-unit>
        <trans-unit id="84bf25f63e5b5153b6a3a8c5328d60b284fe5dc3" translate="yes" xml:space="preserve">
          <source>The next example displays multiple code tabs, each with its own header. It demonstrates control over display of line numbers at both the &lt;code&gt;&amp;lt;code-tabs&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;code-pane&amp;gt;&lt;/code&gt; levels.</source>
          <target state="translated">다음 예는 각각 고유 한 헤더가있는 여러 코드 탭을 표시합니다. &lt;code&gt;&amp;lt;code-tabs&amp;gt;&lt;/code&gt; 및 &lt;code&gt;&amp;lt;code-pane&amp;gt;&lt;/code&gt; 수준 에서 줄 번호 표시를 제어하는 ​​방법을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="7c3416618b3de0af96c0f13e3867441de913c924" translate="yes" xml:space="preserve">
          <source>The next example targets the host element again, but only when it also has the &lt;code&gt;active&lt;/code&gt; CSS class.</source>
          <target state="translated">다음 예제는 호스트 요소를 다시 대상으로하지만 &lt;code&gt;active&lt;/code&gt; CSS 클래스 가있는 경우에만 대상을 지정합니다 .</target>
        </trans-unit>
        <trans-unit id="4a21e1e01c2158020152df86d39427a773fea8dd" translate="yes" xml:space="preserve">
          <source>The next examples focus on hook details.</source>
          <target state="translated">다음 예제는 후크 세부 사항에 중점을 둡니다.</target>
        </trans-unit>
        <trans-unit id="e227a13b6f5a7d5bee882fe1ac94c2d4c537d093" translate="yes" xml:space="preserve">
          <source>The next few sections review some of the coding choices in the app.</source>
          <target state="translated">다음 몇 섹션에서는 앱의 코딩 선택 사항 중 일부를 검토합니다.</target>
        </trans-unit>
        <trans-unit id="d607f1c8543b34b78c9b0ce11c65aed7ab530f0e" translate="yes" xml:space="preserve">
          <source>The next interceptor in the chain, or the backend if no interceptors remain in the chain.</source>
          <target state="translated">체인의 다음 인터셉터 또는 체인에 인터셉터가없는 경우 백엔드</target>
        </trans-unit>
        <trans-unit id="3e4bb896f2f48b5d9aa0754ab76dc8fdd2fa0d3b" translate="yes" xml:space="preserve">
          <source>The next parent injector in the hierarchy is the &lt;code&gt;NullInjector()&lt;/code&gt;, which is the top of the tree. If you've gone so far up the tree that you are looking for a service in the &lt;code&gt;NullInjector()&lt;/code&gt;, you'll get an error unless you've used &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;()&lt;/code&gt; because ultimately, everything ends at the &lt;code&gt;NullInjector()&lt;/code&gt; and it returns an error or, in the case of &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;()&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt;. For more information on &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;()&lt;/code&gt;, see the &lt;a href=&quot;hierarchical-dependency-injection#optional&quot;&gt;&lt;code&gt;@Optional()&lt;/code&gt; section&lt;/a&gt; of this guide.</source>
          <target state="translated">계층 구조에서 다음 상위 인젝터 는 트리의 맨 위에 있는 &lt;code&gt;NullInjector()&lt;/code&gt; 입니다. &lt;code&gt;NullInjector()&lt;/code&gt; 에서 서비스를 찾고있는 트리까지 지금까지 가면 &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;()&lt;/code&gt; 사용하지 않으면 오류가 발생합니다. 결국 모든 것이 &lt;code&gt;NullInjector()&lt;/code&gt; 에서 끝나기 때문입니다. 오류를 반환하거나 &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;()&lt;/code&gt; 경우 &lt;code&gt;null&lt;/code&gt; 을 반환합니다 . &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;()&lt;/code&gt; 에 대한 자세한 내용 은이 안내서 의 &lt;a href=&quot;hierarchical-dependency-injection#optional&quot;&gt; &lt;code&gt;@Optional()&lt;/code&gt; 섹션&lt;/a&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="2215641d1cc412c6d30b3543117da1326b1d8612" translate="yes" xml:space="preserve">
          <source>The next part of the file is where you configure your routes. &lt;em&gt;Routes&lt;/em&gt; tell the Router which view to display when a user clicks a link or pastes a URL into the browser address bar.</source>
          <target state="translated">파일의 다음 부분은 경로를 구성하는 위치입니다. &lt;em&gt;경로&lt;/em&gt; 는 사용자가 링크를 클릭하거나 URL을 브라우저 주소 표시 줄에 붙여 넣을 때 표시 할보기를 라우터에 알려줍니다.</target>
        </trans-unit>
        <trans-unit id="ffbc544c39aedf6dbed7b7a9601dc1ca2eadd500" translate="yes" xml:space="preserve">
          <source>The next section expands the app's capabilities by adding a new component&amp;mdash;a product alert&amp;mdash;as a child of the product list component.</source>
          <target state="translated">다음 섹션에서는 제품 목록 구성 요소의 자식으로 새로운 구성 요소 (제품 경고)를 추가하여 앱 기능을 확장합니다.</target>
        </trans-unit>
        <trans-unit id="e1966fcbb6a04574ff0577930e9c4f4e9d6e0dcf" translate="yes" xml:space="preserve">
          <source>The next section shows how to use template reference variables to address this problem.</source>
          <target state="translated">다음 섹션에서는 템플릿 참조 변수를 사용하여이 문제를 해결하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="b8bc4af8ca3880db42ed25822aa4664e92d79782" translate="yes" xml:space="preserve">
          <source>The next section though, where &lt;code&gt;InspectorComponent&lt;/code&gt; is a child component of &lt;code&gt;ChildComponent&lt;/code&gt;, &lt;code&gt;InspectorComponent&lt;/code&gt; is inside the &lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt;, so when it asks for the &lt;code&gt;AnimalService&lt;/code&gt;, it sees the 🐶 (puppy).</source>
          <target state="translated">비록 다음 섹션 &lt;code&gt;InspectorComponent&lt;/code&gt; 가 의 자식 구성 요소 &lt;code&gt;ChildComponent&lt;/code&gt; 는 , &lt;code&gt;InspectorComponent&lt;/code&gt; 는 내부입니다 &lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt; 가 요청할 때, 그렇게 &lt;code&gt;AnimalService&lt;/code&gt; , 그것은 🐶 (강아지)를 본다.</target>
        </trans-unit>
        <trans-unit id="d59c51bbebc61089285e2a0c88cc2af2c45f0029" translate="yes" xml:space="preserve">
          <source>The next step is to add a binding to the &lt;code&gt;ChildComponent&lt;/code&gt; template.</source>
          <target state="translated">다음 단계는 &lt;code&gt;ChildComponent&lt;/code&gt; 템플릿에 바인딩을 추가하는 것 입니다.</target>
        </trans-unit>
        <trans-unit id="1ac5a9d05f16c0b0c07e2483f2426a42fa242157" translate="yes" xml:space="preserve">
          <source>The next step is to bind the property in the parent component's template. In this example, the parent component template is &lt;code&gt;app.component.html&lt;/code&gt;.</source>
          <target state="translated">다음 단계는 부모 구성 요소의 템플릿에서 속성을 바인딩하는 것입니다. 이 예제에서 상위 컴포넌트 템플리트는 &lt;code&gt;app.component.html&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="06656dd8fd58ec3c830e42d3bef15b1d6ea80756" translate="yes" xml:space="preserve">
          <source>The next step is to create a new alert feature that takes a product as an input. The alert checks the product's price, and, if the price is greater than $700, displays a &quot;Notify Me&quot; button that lets users sign up for notifications when the product goes on sale.</source>
          <target state="translated">다음 단계는 제품을 입력으로 사용하는 새로운 경고 기능을 만드는 것입니다. 경고는 제품 가격을 확인하고 가격이 $ 700보다 큰 경우 제품 판매시 사용자가 알림에 등록 할 수있는 &quot;알림&quot;버튼을 표시합니다.</target>
        </trans-unit>
        <trans-unit id="90b831079de1c7557999e837b31d0f72e7c2ee44" translate="yes" xml:space="preserve">
          <source>The next step is to define an object model that can describe all scenarios needed by the form functionality. The hero application process involves a form with a lot of questions. The &lt;em&gt;question&lt;/em&gt; is the most fundamental object in the model.</source>
          <target state="translated">다음 단계는 양식 기능에 필요한 모든 시나리오를 설명 할 수있는 객체 모델을 정의하는 것입니다. 영웅 응용 프로그램 프로세스에는 많은 질문이있는 양식이 포함됩니다. &lt;em&gt;문제는&lt;/em&gt; 모델의 가장 기본적인 객체입니다.</target>
        </trans-unit>
        <trans-unit id="fb2e63ba1bd8fdeb7779c136f5fcfde3c35d6213" translate="yes" xml:space="preserve">
          <source>The next version of the documentation is available at &lt;a href=&quot;https://next.angular.io&quot;&gt;next.angular.io&lt;/a&gt;. This includes any documentation for Beta or Release Candidate features and APIs.</source>
          <target state="translated">다음 버전의 설명서는 &lt;a href=&quot;https://next.angular.io&quot;&gt;next.angular.io&lt;/a&gt; 에서 볼 수 있습니다 . 여기에는 베타 또는 릴리스 후보 기능 및 API에 대한 모든 문서가 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="4a180ac00e9f3dbf51f785693d56733d6c28e423" translate="yes" xml:space="preserve">
          <source>The ng module for the server.</source>
          <target state="translated">서버의 ng 모듈.</target>
        </trans-unit>
        <trans-unit id="31db521a10f7d13d6ad0164b67edb26307449751" translate="yes" xml:space="preserve">
          <source>The ng module for the worker app side.</source>
          <target state="translated">작업자 앱 쪽의 ng 모듈입니다.</target>
        </trans-unit>
        <trans-unit id="86a442380fdcdb994033a6dea7124eb5d66e6cae" translate="yes" xml:space="preserve">
          <source>The ngUpgrade library in Angular is a very useful tool for upgrading anything but the smallest of applications. With it you can mix and match AngularJS and Angular components in the same application and have them interoperate seamlessly. That means you don't have to do the upgrade work all at once, since there's a natural coexistence between the two frameworks during the transition period.</source>
          <target state="translated">Angular의 ngUpgrade 라이브러리는 가장 작은 응용 프로그램 이외의 것을 업그레이드하는 데 매우 유용한 도구입니다. 그것으로 당신은 동일한 응용 프로그램에서 AngularJS와 Angular 구성 요소를 혼합하고 일치시킬 수 있으며 완벽하게 상호 운용 할 수 있습니다. 즉, 전환 기간 동안 두 프레임 워크간에 자연스러운 공존이 있으므로 업그레이드 작업을 한 번에 수행 할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="0107243ec8cbe329d40de532f38d6e455ea3c867" translate="yes" xml:space="preserve">
          <source>The node.</source>
          <target state="translated">노드</target>
        </trans-unit>
        <trans-unit id="04ba803c94c0cf27fa47cf0f40112d507c07b504" translate="yes" xml:space="preserve">
          <source>The non-null assertion operator ( &lt;code&gt;!&lt;/code&gt; )</source>
          <target state="translated">널이 아닌 어설 션 연산자 ( &lt;code&gt;!&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="b8aa84c688682535f84bf8169abdd6d8bb08e9fc" translate="yes" xml:space="preserve">
          <source>The non-null assertion operator should be used sparingly as refactoring of the component might break this constraint.</source>
          <target state="translated">구성 요소의 리팩토링으로 인해이 제한 조건이 깨질 수 있으므로 널이 아닌 어설 션 연산자는 조금만 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="931e7b111d738b68a612433a6d150f27f4217c3a" translate="yes" xml:space="preserve">
          <source>The non-null assertion operator, &lt;code&gt;!&lt;/code&gt;, is optional with the exception that you must use it when you turn on strict null checks.</source>
          <target state="translated">널이 아닌 어설 션 연산자 &lt;code&gt;!&lt;/code&gt; 은 엄격한 null 검사를 켤 때 사용해야한다는 점을 제외하고 선택적입니다.</target>
        </trans-unit>
        <trans-unit id="064948efac2b67f533858ab0ec1a225c30e6d6d0" translate="yes" xml:space="preserve">
          <source>The npm package for the build tool used to create this target. The default builder for an application (&lt;code&gt;ng build myApp&lt;/code&gt;) is &lt;code&gt;@angular-devkit/build-angular:&lt;a href=&quot;../api/animations/browser&quot;&gt;browser&lt;/a&gt;&lt;/code&gt;, which uses the &lt;a href=&quot;https://webpack.js.org/&quot;&gt;webpack&lt;/a&gt; package bundler. Note that a different builder is used for building a library (&lt;code&gt;ng build myLib&lt;/code&gt;).</source>
          <target state="translated">이 대상을 작성하는 데 사용 된 빌드 도구의 npm 패키지. 애플리케이션의 기본 빌더 ( &lt;code&gt;ng build myApp&lt;/code&gt; )는 &lt;code&gt;@angular-devkit/build-angular:&lt;a href=&quot;../api/animations/browser&quot;&gt;browser&lt;/a&gt;&lt;/code&gt; 이며 &lt;a href=&quot;https://webpack.js.org/&quot;&gt;웹팩&lt;/a&gt; 패키지 번 들러 를 사용합니다 . 라이브러리를 빌드하는 데 다른 빌더가 사용됩니다 ( &lt;code&gt;ng build myLib&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="10d444c3a0885867d29c65fc0e0878dd94476c43" translate="yes" xml:space="preserve">
          <source>The npm packages for the &lt;a href=&quot;browser-support#polyfill-libs&quot;&gt;&lt;em&gt;mandatory&lt;/em&gt; polyfills&lt;/a&gt; (such as &lt;code&gt;zone.js&lt;/code&gt;) are installed automatically for you when you create your project with &lt;code&gt;ng new&lt;/code&gt;, and their corresponding &lt;code&gt;import&lt;/code&gt; statements are already enabled in the &lt;code&gt;src/polyfills.ts&lt;/code&gt; configuration file.</source>
          <target state="translated">&lt;code&gt;ng new&lt;/code&gt; 로 프로젝트를 만들 때 &lt;a href=&quot;browser-support#polyfill-libs&quot;&gt;&lt;em&gt;필수&lt;/em&gt; polyfill&lt;/a&gt; (예 : &lt;code&gt;zone.js&lt;/code&gt; ) 의 npm 패키지 가 자동으로 설치 되며 해당 &lt;code&gt;import&lt;/code&gt; 문이 이미 &lt;code&gt;src/polyfills.ts&lt;/code&gt; 구성 파일 에서 활성화되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="9b47812f77184b9bdc5b1bad108b3a1b65438513" translate="yes" xml:space="preserve">
          <source>The number to be formatted as a percentage.</source>
          <target state="translated">백분율로 형식화 할 숫자입니다.</target>
        </trans-unit>
        <trans-unit id="f5e154c108150e674adc32b02686eba52434ecc2" translate="yes" xml:space="preserve">
          <source>The number to be formatted as currency.</source>
          <target state="translated">통화로 형식화 할 숫자입니다.</target>
        </trans-unit>
        <trans-unit id="b8da88e922ca8c42e90b1e7116243bf395b37127" translate="yes" xml:space="preserve">
          <source>The number to be formatted.</source>
          <target state="translated">형식을 지정할 숫자입니다.</target>
        </trans-unit>
        <trans-unit id="3f218a15291c3c94b883e1d87d28d7c7a5476b0c" translate="yes" xml:space="preserve">
          <source>The number to format.</source>
          <target state="translated">서식을 지정할 숫자입니다.</target>
        </trans-unit>
        <trans-unit id="3b8a293a9d221bf54d50d885baa3a93087f6de40" translate="yes" xml:space="preserve">
          <source>The object that matches the structure of the group.</source>
          <target state="translated">그룹의 구조와 일치하는 개체입니다.</target>
        </trans-unit>
        <trans-unit id="1ed19258bb078822c2e224f36b5e607033a8910c" translate="yes" xml:space="preserve">
          <source>The observable &lt;code&gt;Subscription&lt;/code&gt; will be handled by the &lt;code&gt;&lt;a href=&quot;../api/common/asyncpipe&quot;&gt;AsyncPipe&lt;/a&gt;&lt;/code&gt; and the component's &lt;code&gt;hero&lt;/code&gt; property will be (re)set with the retrieved hero.</source>
          <target state="translated">관찰 가능한 &lt;code&gt;Subscription&lt;/code&gt; 은 &lt;code&gt;&lt;a href=&quot;../api/common/asyncpipe&quot;&gt;AsyncPipe&lt;/a&gt;&lt;/code&gt; 에 의해 처리되며 구성 요소의 &lt;code&gt;hero&lt;/code&gt; 속성은 검색된 영웅과 함께 (재) 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="9652db2fe25fc5b8589f982bd18c51dc7f8cff2d" translate="yes" xml:space="preserve">
          <source>The observable events of related services, such as &lt;code&gt;&lt;a href=&quot;../api/service-worker/swupdate#available&quot;&gt;SwUpdate.available&lt;/a&gt;&lt;/code&gt;, are not triggered.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/service-worker/swupdate#available&quot;&gt;SwUpdate.available&lt;/a&gt;&lt;/code&gt; 과 같은 관련 서비스의 관찰 가능한 이벤트는 트리거되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="9a424717c78d2ac09e12f0cde7f7e48fa3de1bd5" translate="yes" xml:space="preserve">
          <source>The observable returned must be finite, meaning it must complete at some point. To convert an infinite observable into a finite one, pipe the observable through a filtering operator such as &lt;code&gt;first&lt;/code&gt;, &lt;code&gt;last&lt;/code&gt;, &lt;code&gt;take&lt;/code&gt;, or &lt;code&gt;takeUntil&lt;/code&gt;.</source>
          <target state="translated">반환 된 관찰 가능 항목은 유한해야합니다. 즉, 어느 시점에서 완료해야합니다. 무한 관측 값을 유한 관측 값으로 변환하려면 관찰 가능 항목을 &lt;code&gt;first&lt;/code&gt; , &lt;code&gt;last&lt;/code&gt; , &lt;code&gt;take&lt;/code&gt; 또는 &lt;code&gt;takeUntil&lt;/code&gt; 과 같은 필터링 연산자를 통해 파이프하십시오 .</target>
        </trans-unit>
        <trans-unit id="3294239ebf17d384dfbf808355d9e127fde196ec" translate="yes" xml:space="preserve">
          <source>The official name of our builder is now &lt;code&gt;@example/command-runner:command&lt;/code&gt;. The first part of this is the package name (resolved using node resolution), and the second part is the builder name (resolved using the &lt;code&gt;builders.json&lt;/code&gt; file).</source>
          <target state="translated">빌더의 공식 이름은 이제 &lt;code&gt;@example/command-runner:command&lt;/code&gt; 입니다. 이 중 첫 번째 부분은 패키지 이름 (노드 분석을 사용하여 해결됨)이고 두 번째 부분은 빌더 이름 ( &lt;code&gt;builders.json&lt;/code&gt; 파일을 사용하여 해결됨 )입니다.</target>
        </trans-unit>
        <trans-unit id="6da0f2f589e2727df45996f865813ce81bafd8dc" translate="yes" xml:space="preserve">
          <source>The offline template compiler prevents a whole class of vulnerabilities called template injection, and greatly improves application performance. Use the offline template compiler in production deployments; don't dynamically generate templates. Angular trusts template code, so generating templates, in particular templates containing user data, circumvents Angular's built-in protections. For information about dynamically constructing forms in a safe way, see the &lt;a href=&quot;dynamic-form&quot;&gt;Dynamic Forms&lt;/a&gt; guide page.</source>
          <target state="translated">오프라인 템플릿 컴파일러는 템플릿 삽입이라고하는 모든 종류의 취약성을 방지하고 응용 프로그램 성능을 크게 향상시킵니다. 프로덕션 배포에서 오프라인 템플릿 컴파일러를 사용하십시오. 템플릿을 동적으로 생성하지 마십시오. Angular는 템플릿 코드를 신뢰하므로 템플릿, 특히 사용자 데이터가 포함 된 템플릿을 생성하면 Angular의 기본 제공 보호 기능을 피할 수 있습니다. 안전한 방식으로 양식을 동적으로 구성하는 방법에 대한 자세한 내용은 &lt;a href=&quot;dynamic-form&quot;&gt;동적 양식&lt;/a&gt; 안내서 페이지를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="6c7235c164fd39687b519a25c40e459410556d6a" translate="yes" xml:space="preserve">
          <source>The only resources that have hashes in the &lt;code&gt;ngsw.json&lt;/code&gt; manifest are resources that were present in the &lt;code&gt;dist&lt;/code&gt; directory at the time the manifest was built. Other resources, especially those loaded from CDNs, have content that is unknown at build time or are updated more frequently than the app is deployed.</source>
          <target state="translated">&lt;code&gt;ngsw.json&lt;/code&gt; 매니페스트에 해시가있는 유일한 리소스 는 매니페스트가 구축 될 때 &lt;code&gt;dist&lt;/code&gt; 디렉토리에있는 리소스입니다 . 다른 리소스, 특히 CDN에서로드 된 리소스에는 빌드시 알 수없는 콘텐츠가 있거나 앱이 배포 된 것보다 더 자주 업데이트됩니다.</target>
        </trans-unit>
        <trans-unit id="f4bcd43dc4907e02b316af7146976c21f6e2dfd6" translate="yes" xml:space="preserve">
          <source>The only step needed to provide initial &lt;code&gt;ng add&lt;/code&gt; support is to trigger an installation task using the &lt;code&gt;SchematicContext&lt;/code&gt;. The task uses the user's preferred package manager to add the library to the project's &lt;code&gt;package.json&lt;/code&gt; configuration file, and install it in the project&amp;rsquo;s &lt;code&gt;node_modules&lt;/code&gt; directory.</source>
          <target state="translated">초기 &lt;code&gt;ng add&lt;/code&gt; 지원 을 제공하는 데 필요한 유일한 단계 는 &lt;code&gt;SchematicContext&lt;/code&gt; 를 사용하여 설치 작업을 트리거하는 것 입니다. 이 작업은 사용자가 선호하는 패키지 관리자를 사용하여 라이브러리를 프로젝트의 &lt;code&gt;package.json&lt;/code&gt; 구성 파일에 추가하고 프로젝트의 &lt;code&gt;node_modules&lt;/code&gt; 디렉토리 에 설치합니다 .</target>
        </trans-unit>
        <trans-unit id="2912e68aa8582b70396e57e3457bf64276abecb2" translate="yes" xml:space="preserve">
          <source>The only substantive change is the pipe in the template. You can confirm in the live example that the &lt;em&gt;flying heroes&lt;/em&gt; display updates as you add heroes, even when you mutate the &lt;code&gt;heroes&lt;/code&gt; array.</source>
          <target state="translated">실질적인 변화는 템플릿의 파이프뿐입니다. 라이브 예제 에서 &lt;code&gt;heroes&lt;/code&gt; 배열 을 변경하더라도 영웅을 추가 하면 &lt;em&gt;비행 영웅이&lt;/em&gt; 업데이트 됨을 확인할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f109536b44b3294896f12b200cc7c6870edc45c6" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;aliases&lt;/code&gt; array specifies one or more strings that can be used to invoke the schematic. For example, the schematic for the Angular CLI &amp;ldquo;generate&amp;rdquo; command has an alias &amp;ldquo;g&amp;rdquo;, allowing you to use the command &lt;code&gt;ng g&lt;/code&gt;.</source>
          <target state="translated">선택적 &lt;code&gt;aliases&lt;/code&gt; 배열은 회로도를 호출하는 데 사용할 수있는 하나 이상의 문자열을 지정합니다. 예를 들어, Angular CLI &quot;generate&quot;명령의 회로도에는 별칭 &quot;g&quot;가있어 &lt;code&gt;ng g&lt;/code&gt; 명령을 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="0bf8db3667ef2b53d6cae67ff56052e554006755" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;foo&lt;/code&gt; route parameter is harmless and continues to be ignored.</source>
          <target state="translated">선택적 &lt;code&gt;foo&lt;/code&gt; 라우트 매개 변수는 무해하며 계속 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="c3e1faed39e73b09b3398a7ff71cedb3207da8d3" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;schema&lt;/code&gt; property points to a JSON schema file that defines the command-line options available to the schematic.</source>
          <target state="translated">선택적 &lt;code&gt;schema&lt;/code&gt; 속성은 회로도에 사용 가능한 명령 행 옵션을 정의하는 JSON 스키마 파일을 가리 킵니다.</target>
        </trans-unit>
        <trans-unit id="c789a1755156dab1f29d2365875888242e710fed" translate="yes" xml:space="preserve">
          <source>The optional route parameters are not separated by &quot;?&quot; and &quot;&amp;amp;&quot; as they would be in the URL query string. They are &lt;strong&gt;separated by semicolons &quot;;&quot;&lt;/strong&gt; This is &lt;em&gt;matrix URL&lt;/em&gt; notation&amp;mdash;something you may not have seen before.</source>
          <target state="translated">선택적 경로 매개 변수는 &quot;?&quot;로 구분되지 않습니다. URL 쿼리 문자열에있는 것처럼 &quot;&amp;amp;&quot; 그들은되는 &lt;strong&gt;세미콜론으로 구분 &quot;;&quot; &lt;/strong&gt;이것은 이전에는 보지 못했던 &lt;em&gt;매트릭스 URL&lt;/em&gt; 표기법입니다.</target>
        </trans-unit>
        <trans-unit id="8a35351d188a98c16c0b786429358c0c165ee4c9" translate="yes" xml:space="preserve">
          <source>The options &lt;code&gt;assets&lt;/code&gt;, &lt;code&gt;styles&lt;/code&gt;, and &lt;code&gt;scripts&lt;/code&gt; can have either simple path string values, or object values with specific fields. The &lt;code&gt;sourceMap&lt;/code&gt; and &lt;code&gt;optimization&lt;/code&gt; options can be set to a simple Boolean value with a command flag, but can also be given a complex value using the configuration file. The following sections provide more details of how these complex values are used in each case.</source>
          <target state="translated">&lt;code&gt;assets&lt;/code&gt; , &lt;code&gt;styles&lt;/code&gt; 및 &lt;code&gt;scripts&lt;/code&gt; 옵션 에는 간단한 경로 문자열 값 또는 특정 필드가있는 객체 값이있을 수 있습니다. &lt;code&gt;sourceMap&lt;/code&gt; 및 &lt;code&gt;optimization&lt;/code&gt; 옵션은 명령 플래그 간단한 부울 값으로 설정할 수 있습니다뿐만 아니라, 구성 파일을 사용하여 복잡한 값을 부여 할 수 있습니다. 다음 섹션에서는 이러한 복잡한 값이 각 경우에 사용되는 방법에 대한 자세한 정보를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="5a7271913fb719bd7b5e39dde45d44587b784fb2" translate="yes" xml:space="preserve">
          <source>The options object is used to set a default value for each child control's &lt;code&gt;updateOn&lt;/code&gt; property. If you set &lt;code&gt;updateOn&lt;/code&gt; to &lt;code&gt;'blur'&lt;/code&gt; at the array level, all child controls default to 'blur', unless the child has explicitly specified a different &lt;code&gt;updateOn&lt;/code&gt; value.</source>
          <target state="translated">options 객체는 각 자식 컨트롤의 &lt;code&gt;updateOn&lt;/code&gt; 속성에 대한 기본값을 설정하는 데 사용됩니다 . 배열 수준에서 &lt;code&gt;updateOn&lt;/code&gt; 을 &lt;code&gt;'blur'&lt;/code&gt; 로 설정 하면 자식이 다른 &lt;code&gt;updateOn&lt;/code&gt; 값을 명시 적으로 지정하지 않은 한 모든 자식 컨트롤의 기본값은 'blur' 입니다.</target>
        </trans-unit>
        <trans-unit id="6e5341d5e74eb1a6542f76853fe596992c982b9a" translate="yes" xml:space="preserve">
          <source>The options object is used to set a default value for each child control's &lt;code&gt;updateOn&lt;/code&gt; property. If you set &lt;code&gt;updateOn&lt;/code&gt; to &lt;code&gt;'blur'&lt;/code&gt; at the group level, all child controls default to 'blur', unless the child has explicitly specified a different &lt;code&gt;updateOn&lt;/code&gt; value.</source>
          <target state="translated">options 객체는 각 자식 컨트롤의 &lt;code&gt;updateOn&lt;/code&gt; 속성에 대한 기본값을 설정하는 데 사용됩니다 . 그룹 수준에서 &lt;code&gt;updateOn&lt;/code&gt; 을 &lt;code&gt;'blur'&lt;/code&gt; 로 설정 하면 자식이 다른 &lt;code&gt;updateOn&lt;/code&gt; 값을 명시 적으로 지정하지 않은 한 모든 자식 컨트롤의 기본값은 'blur' 입니다.</target>
        </trans-unit>
        <trans-unit id="746585f9d309cd4a0ba0d2fbf9b96110e934c17e" translate="yes" xml:space="preserve">
          <source>The options object provides default values for the two inputs that we defined; &lt;code&gt;command&lt;/code&gt;, which is the Unix command to execute, and &lt;code&gt;args&lt;/code&gt;, an array that contains the file to operate on.</source>
          <target state="translated">options 객체는 우리가 정의한 두 입력에 대한 기본값을 제공합니다. &lt;code&gt;command&lt;/code&gt; 실행하는 UNIX 명령이며, 그리고 &lt;code&gt;args&lt;/code&gt; 에 작동하는 파일을 포함하는 배열.</target>
        </trans-unit>
        <trans-unit id="a808828e19354aac449233df39a10e00fae8dee0" translate="yes" xml:space="preserve">
          <source>The options provide configuration metadata that determines how the directive should be processed, instantiated and used at runtime.</source>
          <target state="translated">옵션은 지시문이 런타임에 처리, 인스턴스화 및 사용되는 방법을 결정하는 구성 메타 데이터를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="05c7ae2f84882bcfa37ddd31c179aced5dca729d" translate="yes" xml:space="preserve">
          <source>The order of class declaration matters in TypeScript. You can't refer directly to a class until it's been defined.</source>
          <target state="translated">클래스 선언 순서는 TypeScript에서 중요합니다. 클래스가 정의 될 때까지 클래스를 직접 참조 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="6c7cad94283dc8992d7c11c563fd215a38191432" translate="yes" xml:space="preserve">
          <source>The order of route configuration matters. The router accepts the first route that matches a navigation request path.</source>
          <target state="translated">경로 구성 순서가 중요합니다. 라우터는 탐색 요청 경로와 일치하는 첫 번째 경로를 승인합니다.</target>
        </trans-unit>
        <trans-unit id="41216db2f85115d74834c152bfa23e599dd9f3f6" translate="yes" xml:space="preserve">
          <source>The original &lt;code&gt;open&lt;/code&gt; and &lt;code&gt;closed&lt;/code&gt; states, with the original changes in height, color, and opacity, occurring over a timeframe of 1 second</source>
          <target state="translated">높이, 색상 및 불투명도의 원래 변경 사항이 1 초 동안 발생하는 원본 &lt;code&gt;open&lt;/code&gt; 및 &lt;code&gt;closed&lt;/code&gt; 상태</target>
        </trans-unit>
        <trans-unit id="5c3fc45bc2db2f7c8beca6fdc1270fdd65714fae" translate="yes" xml:space="preserve">
          <source>The original response continues untouched back up through the chain of interceptors to the application caller.</source>
          <target state="translated">원래 응답은 인터셉터 체인을 통해 애플리케이션 호출자에게 다시 그대로 유지됩니다.</target>
        </trans-unit>
        <trans-unit id="8475e386138bc203bd52458f303f075a4b824138" translate="yes" xml:space="preserve">
          <source>The other feature module's routing module is configured similarly.</source>
          <target state="translated">다른 기능 모듈의 라우팅 모듈도 비슷하게 구성됩니다.</target>
        </trans-unit>
        <trans-unit id="ac2033a02f00fb6e865ead163931aca26717c78d" translate="yes" xml:space="preserve">
          <source>The other possible &lt;code&gt;&lt;a href=&quot;../api/router/route#pathMatch&quot;&gt;pathMatch&lt;/a&gt;&lt;/code&gt; value is &lt;code&gt;'prefix'&lt;/code&gt; which tells the router to match the redirect route when the &lt;em&gt;remaining&lt;/em&gt; URL &lt;strong&gt;&lt;em&gt;begins&lt;/em&gt;&lt;/strong&gt; with the redirect route's &lt;em&gt;prefix&lt;/em&gt; path.</source>
          <target state="translated">다른 가능한 &lt;code&gt;&lt;a href=&quot;../api/router/route#pathMatch&quot;&gt;pathMatch&lt;/a&gt;&lt;/code&gt; 값은 &lt;code&gt;'prefix'&lt;/code&gt; 이며 &lt;em&gt;나머지&lt;/em&gt; URL &lt;strong&gt;&lt;em&gt;이&lt;/em&gt;&lt;/strong&gt; 리디렉션 경로의 &lt;em&gt;접두사&lt;/em&gt; 경로로 &lt;strong&gt;&lt;em&gt;시작할&lt;/em&gt;&lt;/strong&gt; 때 라우터가 리디렉션 경로와 일치하도록 지시합니다 .</target>
        </trans-unit>
        <trans-unit id="683021b4260938edc921d666701a253150e18ddb" translate="yes" xml:space="preserve">
          <source>The outer and inner &lt;code&gt;&lt;a href=&quot;templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt; instances are assembled into views as follows:</source>
          <target state="translated">외부 및 내부 &lt;code&gt;&lt;a href=&quot;templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt; 인스턴스는 다음과 같이보기로 조립됩니다.</target>
        </trans-unit>
        <trans-unit id="db438b04615ada9c6a8e0f3ec02854c6d2f5ac5b" translate="yes" xml:space="preserve">
          <source>The outgoing HTTP request method.</source>
          <target state="translated">발신 HTTP 요청 방법.</target>
        </trans-unit>
        <trans-unit id="ab71fe70e254aa60e106538ded89aa5355abd19f" translate="yes" xml:space="preserve">
          <source>The outgoing URL with all URL parameters set.</source>
          <target state="translated">모든 URL 매개 변수가 설정된 발신 URL입니다.</target>
        </trans-unit>
        <trans-unit id="29b0a52a0f9e42ada2a44024b4ce3442efa10abc" translate="yes" xml:space="preserve">
          <source>The outgoing request object to handle.</source>
          <target state="translated">처리 할 발신 요청 객체입니다.</target>
        </trans-unit>
        <trans-unit id="4e584659815c873b9863b2023a8d1da485d88c69" translate="yes" xml:space="preserve">
          <source>The outlet name of the route</source>
          <target state="translated">경로의 출구 이름</target>
        </trans-unit>
        <trans-unit id="427ee8154382c38b7d171dfb79623a53e63a0fd6" translate="yes" xml:space="preserve">
          <source>The outlet name of the route, a constant.</source>
          <target state="translated">경로의 출구 이름으로 상수입니다.</target>
        </trans-unit>
        <trans-unit id="bcedcd9799379281170f96329a0199438fc48892" translate="yes" xml:space="preserve">
          <source>The output array will be ordered by keys. By default the comparator will be by Unicode point value. You can optionally pass a compareFn if your keys are complex types.</source>
          <target state="translated">출력 배열은 키로 정렬됩니다. 기본적으로 비교기는 유니 코드 포인트 값입니다. 키가 복잡한 유형이면 compareFn을 선택적으로 전달할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7e3805c6cd01668729e336d07b3bf6176de112bf" translate="yes" xml:space="preserve">
          <source>The output directory for build results.</source>
          <target state="translated">빌드 결과의 출력 디렉토리입니다.</target>
        </trans-unit>
        <trans-unit id="3f8aa866a39412d582722989844ba25d2bbcc37b" translate="yes" xml:space="preserve">
          <source>The output folder is &lt;code&gt;dist/project-name/&lt;/code&gt; by default. To output to a different folder, change the &lt;code&gt;outputPath&lt;/code&gt; in &lt;code&gt;angular.json&lt;/code&gt;.</source>
          <target state="translated">출력 폴더는 기본적으로 &lt;code&gt;dist/project-name/&lt;/code&gt; 입니다. 다른 폴더로 출력하려면 &lt;code&gt;angular.json&lt;/code&gt; 에서 &lt;code&gt;outputPath&lt;/code&gt; 를 변경하십시오 .</target>
        </trans-unit>
        <trans-unit id="fa555da87eea14ed125658bcb8bbbf275e304596" translate="yes" xml:space="preserve">
          <source>The output in the view would be:</source>
          <target state="translated">뷰의 출력은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="61eeb6aa93a200e68991925d7feb4a198a9bbc45" translate="yes" xml:space="preserve">
          <source>The output locations are printed in the output.</source>
          <target state="translated">출력 위치는 출력에 인쇄됩니다.</target>
        </trans-unit>
        <trans-unit id="36f38bb92f919b4487aa12bfc0fbbe03a7e4f8ef" translate="yes" xml:space="preserve">
          <source>The outputs of the component.</source>
          <target state="translated">컴포넌트의 출력.</target>
        </trans-unit>
        <trans-unit id="b8c774af30b04ee8bc9afcca4c83e98bbbdacecb" translate="yes" xml:space="preserve">
          <source>The overall structure of the &lt;code&gt;updateHero()&lt;/code&gt; method is similar to that of &lt;code&gt;getHeroes()&lt;/code&gt;, but it uses &lt;code&gt;http.put()&lt;/code&gt; to persist the changed hero on the server. Add the following to the &lt;code&gt;HeroService&lt;/code&gt;.</source>
          <target state="translated">의 전체 구조 &lt;code&gt;updateHero()&lt;/code&gt; 방법과 유사하다 &lt;code&gt;getHeroes()&lt;/code&gt; 하지만, 사용 &lt;code&gt;http.put()&lt;/code&gt; 서버에 변경된 영웅 지속. &lt;code&gt;HeroService&lt;/code&gt; 에 다음을 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="12119367c4766736842fde0c43c23fc7012b447d" translate="yes" xml:space="preserve">
          <source>The override tests</source>
          <target state="translated">재정의 테스트</target>
        </trans-unit>
        <trans-unit id="cecd7ea3164b66bdc1ebb3846e85c8cad94a7d0d" translate="yes" xml:space="preserve">
          <source>The package to be added.</source>
          <target state="translated">추가 할 패키지입니다.</target>
        </trans-unit>
        <trans-unit id="605c3739fd71bc00a4ed1ba45664e517e73bc270" translate="yes" xml:space="preserve">
          <source>The packages listed in the &lt;code&gt;&lt;a href=&quot;../api/core/resolvedreflectivefactory#dependencies&quot;&gt;dependencies&lt;/a&gt;&lt;/code&gt; section of &lt;code&gt;package.json&lt;/code&gt; are essential to &lt;em&gt;running&lt;/em&gt; applications.</source>
          <target state="translated">&lt;code&gt;package.json&lt;/code&gt; 의 &lt;code&gt;&lt;a href=&quot;../api/core/resolvedreflectivefactory#dependencies&quot;&gt;dependencies&lt;/a&gt;&lt;/code&gt; 섹션에 나열된 패키지 는 응용 프로그램 &lt;em&gt;실행에&lt;/em&gt; 필수적 입니다.</target>
        </trans-unit>
        <trans-unit id="80dcc126c1685ed6246cc6c4e4f678dbe5b7a91b" translate="yes" xml:space="preserve">
          <source>The packages listed in the &lt;code&gt;devDependencies&lt;/code&gt; section of &lt;code&gt;package.json&lt;/code&gt; help you develop the application on your local machine. You don't deploy them with the production application.</source>
          <target state="translated">&lt;code&gt;package.json&lt;/code&gt; 의 &lt;code&gt;devDependencies&lt;/code&gt; 섹션에 나열된 패키지는 로컬 컴퓨터에서 응용 프로그램을 개발하는 데 도움이됩니다. 프로덕션 응용 프로그램과 함께 배포하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="a91b89dd5ef65469422d3ef6e3e02edce3d9a4f2" translate="yes" xml:space="preserve">
          <source>The page is reloaded/refreshed.</source>
          <target state="translated">페이지가 새로 고침됩니다.</target>
        </trans-unit>
        <trans-unit id="b2b646185b55821ee60d26f71064b66b6eee386d" translate="yes" xml:space="preserve">
          <source>The page no longer displays properly because you changed the hero from a string to an object.</source>
          <target state="translated">영웅을 문자열에서 개체로 변경했기 때문에 페이지가 더 이상 제대로 표시되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="45bba286f5d6066ed3bf3bcd1c4ffd4a6469b7b6" translate="yes" xml:space="preserve">
          <source>The page requests an update be immediately activated via the &lt;code&gt;&lt;a href=&quot;../api/service-worker/swupdate&quot;&gt;SwUpdate&lt;/a&gt;&lt;/code&gt; service.</source>
          <target state="translated">이 페이지는 &lt;code&gt;&lt;a href=&quot;../api/service-worker/swupdate&quot;&gt;SwUpdate&lt;/a&gt;&lt;/code&gt; 서비스 를 통해 업데이트가 즉시 활성화되도록 요청합니다 .</target>
        </trans-unit>
        <trans-unit id="d7114b73bd8fae35327a37dbe1c3217b440f55ff" translate="yes" xml:space="preserve">
          <source>The page you see is the &lt;em&gt;application shell&lt;/em&gt;. The shell is controlled by an Angular &lt;strong&gt;component&lt;/strong&gt; named &lt;code&gt;AppComponent&lt;/code&gt;.</source>
          <target state="translated">표시되는 페이지는 &lt;em&gt;응용 프로그램 셸&lt;/em&gt; 입니다. 쉘은 &lt;code&gt;AppComponent&lt;/code&gt; 라는 Angular &lt;strong&gt;컴포넌트에&lt;/strong&gt; 의해 제어됩니다 .</target>
        </trans-unit>
        <trans-unit id="dc0d5bcdb4927dad0eb89021491daf6f6e13f7e8" translate="yes" xml:space="preserve">
          <source>The parameter name.</source>
          <target state="translated">매개 변수 이름</target>
        </trans-unit>
        <trans-unit id="f11e186d7179311f50be914a4fe6431b1ffd3f4d" translate="yes" xml:space="preserve">
          <source>The parameter simultaneously defines a private &lt;code&gt;heroService&lt;/code&gt; property and identifies it as a &lt;code&gt;HeroService&lt;/code&gt; injection site.</source>
          <target state="translated">이 매개 변수는 개인 &lt;code&gt;heroService&lt;/code&gt; 속성을 동시에 정의하고 이를 &lt;code&gt;HeroService&lt;/code&gt; 주입 사이트 로 식별합니다 .</target>
        </trans-unit>
        <trans-unit id="a471c31a25dfc4c5093392a2386d76746208b100" translate="yes" xml:space="preserve">
          <source>The parameter value can be any valid template expression, (see the &lt;a href=&quot;template-syntax#template-expressions&quot;&gt;Template expressions&lt;/a&gt; section of the &lt;a href=&quot;template-syntax&quot;&gt;Template Syntax&lt;/a&gt; page) such as a string literal or a component property. In other words, you can control the format through a binding the same way you control the birthday value through a binding.</source>
          <target state="translated">매개 변수 값은 문자열 리터럴 또는 구성 요소 속성과 같은 유효한 템플릿 표현식 ( &lt;a href=&quot;template-syntax&quot;&gt;템플릿 구문&lt;/a&gt; 페이지 의 &lt;a href=&quot;template-syntax#template-expressions&quot;&gt;템플릿 표현식&lt;/a&gt; 섹션 참조)이 될 수 있습니다. 즉, 바인딩을 통해 생일 값을 제어하는 ​​것과 같은 방법으로 바인딩을 통해 형식을 제어 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a2f2e40ff634b01ef533833632126053be3035ce" translate="yes" xml:space="preserve">
          <source>The parent &lt;code&gt;AppComponent&lt;/code&gt; doesn't need to know about the dependencies of dependencies. Declare what's needed in the constructor (in this case &lt;code&gt;LoggerService&lt;/code&gt; and &lt;code&gt;UserContextService&lt;/code&gt;) and the framework resolves the nested dependencies.</source>
          <target state="translated">부모 &lt;code&gt;AppComponent&lt;/code&gt; 는 종속성의 종속성에 대해 알 필요가 없습니다. 생성자 (이 경우 &lt;code&gt;LoggerService&lt;/code&gt; 및 &lt;code&gt;UserContextService&lt;/code&gt; ) 에 필요한 사항을 선언 하면 프레임 워크가 중첩 된 종속성을 해결합니다.</target>
        </trans-unit>
        <trans-unit id="eb7dc6ea9c849b17c83ab843ef634a845e0cc4b4" translate="yes" xml:space="preserve">
          <source>The parent &lt;code&gt;HeroBiosComponent&lt;/code&gt; binds a value to &lt;code&gt;heroId&lt;/code&gt;. &lt;code&gt;ngOnInit&lt;/code&gt; passes that ID to the service, which fetches and caches the hero. The getter for the &lt;code&gt;hero&lt;/code&gt; property pulls the cached hero from the service. The template displays this data-bound property.</source>
          <target state="translated">부모 &lt;code&gt;HeroBiosComponent&lt;/code&gt; 는 에 값 결합 &lt;code&gt;heroId&lt;/code&gt; 을 . &lt;code&gt;ngOnInit&lt;/code&gt; 는 해당 ID를 서비스에 전달하여 영웅을 가져오고 캐시합니다. &lt;code&gt;hero&lt;/code&gt; 속성 의 getter 는 서비스에서 캐시 된 영웅을 가져옵니다. 템플릿은이 데이터 바인딩 된 속성을 표시합니다.</target>
        </trans-unit>
        <trans-unit id="6cd3e3252a82b27dd42c44952cca27ac0ef0a581" translate="yes" xml:space="preserve">
          <source>The parent &lt;code&gt;VoteTakerComponent&lt;/code&gt; binds an event handler called &lt;code&gt;onVoted()&lt;/code&gt; that responds to the child event payload &lt;code&gt;$event&lt;/code&gt; and updates a counter.</source>
          <target state="translated">상위 &lt;code&gt;VoteTakerComponent&lt;/code&gt; 는 하위 이벤트 페이로드 &lt;code&gt;$event&lt;/code&gt; 응답 하고 카운터를 업데이트하는 &lt;code&gt;onVoted()&lt;/code&gt; 라는 이벤트 핸들러를 바인딩합니다 .</target>
        </trans-unit>
        <trans-unit id="a6895c8ceeed733901d1a5ee2c80a8927e951506" translate="yes" xml:space="preserve">
          <source>The parent component cannot data bind to the child's &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;stop&lt;/code&gt; methods nor to its &lt;code&gt;seconds&lt;/code&gt; property.</source>
          <target state="translated">부모 구성 요소는 자식의 &lt;code&gt;start&lt;/code&gt; 및 &lt;code&gt;stop&lt;/code&gt; 방법이나 &lt;code&gt;seconds&lt;/code&gt; 속성에 데이터 바인딩 할 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="ccf3b5f4773641faf3c55a350577e0c6cd3528dd" translate="yes" xml:space="preserve">
          <source>The parent component class and template</source>
          <target state="translated">부모 컴포넌트 클래스와 템플릿</target>
        </trans-unit>
        <trans-unit id="b69dbb3eb5bb7d6ff61f200cca2db7e39afc938d" translate="yes" xml:space="preserve">
          <source>The parent control.</source>
          <target state="translated">부모 컨트롤</target>
        </trans-unit>
        <trans-unit id="1d5682396420bbc4186bac1b479e30f0a2e910c6" translate="yes" xml:space="preserve">
          <source>The parent must cooperate by providing an &lt;em&gt;alias&lt;/em&gt; to itself in the name of a class interface token.</source>
          <target state="translated">부모는 클래스 인터페이스 토큰의 이름으로 &lt;em&gt;별명&lt;/em&gt; 을 제공하여 협력해야합니다 .</target>
        </trans-unit>
        <trans-unit id="934dc6ecfaf214b64d3b92a5c9d8431b54cdb963" translate="yes" xml:space="preserve">
          <source>The parent node in the url tree</source>
          <target state="translated">URL 트리의 부모 노드</target>
        </trans-unit>
        <trans-unit id="8fd36ababa58725780954fcf5f9d1c970d8528ab" translate="yes" xml:space="preserve">
          <source>The parent node.</source>
          <target state="translated">부모 노드.</target>
        </trans-unit>
        <trans-unit id="0a0f0dc2aaf6c1c595258b9e8784715a84b50c67" translate="yes" xml:space="preserve">
          <source>The parent of this player, if any.</source>
          <target state="translated">이 플레이어의 부모입니다 (있는 경우).</target>
        </trans-unit>
        <trans-unit id="67d15ddca6f8e438ee84b955f2b25fe3a494f70e" translate="yes" xml:space="preserve">
          <source>The parent of this route in the router state tree</source>
          <target state="translated">라우터 상태 트리에서이 경로의 부모</target>
        </trans-unit>
        <trans-unit id="2903a28e9071275ef7593599182782527f1f0ab5" translate="yes" xml:space="preserve">
          <source>The parent of this route in the router state tree.</source>
          <target state="translated">라우터 상태 트리에서이 경로의 부모</target>
        </trans-unit>
        <trans-unit id="da18e4e25f47d18df9195287587b131efcbb8846" translate="yes" xml:space="preserve">
          <source>The parentheses around &lt;code&gt;click&lt;/code&gt; tell Angular to listen for the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; element's &lt;code&gt;click&lt;/code&gt; event. When the user clicks in the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;, Angular executes the &lt;code&gt;onSelect(hero)&lt;/code&gt; expression.</source>
          <target state="translated">&lt;code&gt;click&lt;/code&gt; 주위의 괄호 는 Angular에게 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 요소의 &lt;code&gt;click&lt;/code&gt; 이벤트 를 수신하도록 지시 합니다. 사용자가 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 를 클릭하면 Angular는 &lt;code&gt;onSelect(hero)&lt;/code&gt; 표현식을 실행합니다 .</target>
        </trans-unit>
        <trans-unit id="29591102485816b32c99b4b31ce4e781fbd9a2cd" translate="yes" xml:space="preserve">
          <source>The partial response body as downloaded so far.</source>
          <target state="translated">지금까지 다운로드 한 부분 응답 본문</target>
        </trans-unit>
        <trans-unit id="a0035afe05127ba28a95a7b2b648e50cf8b95d4b" translate="yes" xml:space="preserve">
          <source>The passed-in providers can be an array of &lt;code&gt;&lt;a href=&quot;type&quot;&gt;Type&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;provider&quot;&gt;Provider&lt;/a&gt;&lt;/code&gt;, or a recursive array of more providers.</source>
          <target state="translated">전달 된 제공자는 &lt;code&gt;&lt;a href=&quot;type&quot;&gt;Type&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;provider&quot;&gt;Provider&lt;/a&gt;&lt;/code&gt; 의 배열 이거나 더 많은 제공자의 재귀 배열 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="23b9cd25cc8870c80722d2ac4c13f170a781fd85" translate="yes" xml:space="preserve">
          <source>The pasted HTML refers to a &lt;code&gt;selectedHero&lt;/code&gt;. The new &lt;code&gt;HeroDetailComponent&lt;/code&gt; can present &lt;em&gt;any&lt;/em&gt; hero, not just a selected hero. So replace &quot;selectedHero&quot; with &quot;hero&quot; everywhere in the template.</source>
          <target state="translated">붙여 넣은 HTML은 &lt;code&gt;selectedHero&lt;/code&gt; 를 나타냅니다 . 새로운 &lt;code&gt;HeroDetailComponent&lt;/code&gt; 는 선택한 영웅뿐만 아니라 &lt;em&gt;모든&lt;/em&gt; 영웅을 표시 할 수 있습니다 . 템플릿의 어느 곳에서나 &quot;selectedHero&quot;를 &quot;hero&quot;로 바꿉니다.</target>
        </trans-unit>
        <trans-unit id="2571c9d77bbaccfdb1c7e7ad5cf492440d3e60a6" translate="yes" xml:space="preserve">
          <source>The path at which to create the library's public API file, relative to the workspace root.</source>
          <target state="translated">작업 공간 루트를 기준으로 라이브러리의 공용 API 파일을 작성하는 경로입니다.</target>
        </trans-unit>
        <trans-unit id="deb5ccf2b009e5d123d0a690e376af4b80917816" translate="yes" xml:space="preserve">
          <source>The path can be absolute or relative to the current working directory where the command is executed. For example, to run the schematic we just generated (which has no required options), use the following command.</source>
          <target state="translated">경로는 명령이 실행되는 현재 작업 디렉토리에 대해 절대적이거나 상대적 일 수 있습니다. 예를 들어, 방금 생성 한 회로도 (필수 옵션이 없음)를 실행하려면 다음 명령을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="c044146e6280c52cf5a46b481e94eb7064916400" translate="yes" xml:space="preserve">
          <source>The path from the root of the router state tree to this route</source>
          <target state="translated">라우터 상태 트리의 루트에서이 경로까지의 경로</target>
        </trans-unit>
        <trans-unit id="ffce671b3d1acbfaba292b2709f2546bc87cd1c1" translate="yes" xml:space="preserve">
          <source>The path from the root of the router state tree to this route.</source>
          <target state="translated">라우터 상태 트리의 루트에서이 경로까지의 경로입니다.</target>
        </trans-unit>
        <trans-unit id="7815a518ee4716a2b1120142147e7d95775a8e78" translate="yes" xml:space="preserve">
          <source>The path of the source directory.</source>
          <target state="translated">소스 디렉토리의 경로입니다.</target>
        </trans-unit>
        <trans-unit id="5a4facd2991ea2981fac7027d7268d40140867a3" translate="yes" xml:space="preserve">
          <source>The path part of a URL segment</source>
          <target state="translated">URL 세그먼트의 경로 부분</target>
        </trans-unit>
        <trans-unit id="57501241fca71416c36ef15c3a51d7c6e44f1317" translate="yes" xml:space="preserve">
          <source>The path string</source>
          <target state="translated">경로 문자열</target>
        </trans-unit>
        <trans-unit id="1a9c4ada156081d91a1927cd0a28c70af244c81e" translate="yes" xml:space="preserve">
          <source>The path to match against. Cannot be used together with a custom &lt;code&gt;&lt;a href=&quot;route#matcher&quot;&gt;matcher&lt;/a&gt;&lt;/code&gt; function. A URL string that uses router matching notation. Can be a wild card (&lt;code&gt;**&lt;/code&gt;) that matches any URL (see Usage Notes below). Default is &quot;/&quot; (the root path).</source>
          <target state="translated">대응할 경로입니다. 사용자 정의 &lt;code&gt;&lt;a href=&quot;route#matcher&quot;&gt;matcher&lt;/a&gt;&lt;/code&gt; 기능 과 함께 사용할 수 없습니다 . 라우터 일치 표기법을 사용하는 URL 문자열입니다. 모든 URL과 일치 하는 와일드 카드 ( &lt;code&gt;**&lt;/code&gt; ) 일 수 있습니다 (아래의 사용 정보 참조). 기본값은 &quot;/&quot;(루트 경로)입니다.</target>
        </trans-unit>
        <trans-unit id="9ea7c1cb9a5d01a52764c83bce6591f48a706bc8" translate="yes" xml:space="preserve">
          <source>The path to the 'street' control from the root form would be 'address' -&amp;gt; 'street'.</source>
          <target state="translated">루트 폼에서 'street'컨트롤의 경로는 'address'-&amp;gt; 'street'입니다.</target>
        </trans-unit>
        <trans-unit id="3ef9964ab8f09b8e12ab9dd768d9f14677db6668" translate="yes" xml:space="preserve">
          <source>The path to this group from the top-level directive.</source>
          <target state="translated">최상위 지시문에서이 그룹의 경로입니다.</target>
        </trans-unit>
        <trans-unit id="81b3c5aa5a142e56a8cc65e9cb4384f3838d042c" translate="yes" xml:space="preserve">
          <source>The path to this group.</source>
          <target state="translated">이 그룹의 경로입니다.</target>
        </trans-unit>
        <trans-unit id="c5155f988648d9eafa70e267b1c2b7d6a2bb54ed" translate="yes" xml:space="preserve">
          <source>The path where new projects will be created, relative to the new workspace root.</source>
          <target state="translated">새 작업 공간 루트를 기준으로 새 프로젝트가 작성 될 경로입니다.</target>
        </trans-unit>
        <trans-unit id="6bff124c5ff1260658dbe66420f0ad585635ee2f" translate="yes" xml:space="preserve">
          <source>The path where style resources will be placed, relative to outputPath.</source>
          <target state="translated">outputPath를 기준으로 스타일 자원이 배치 될 경로입니다.</target>
        </trans-unit>
        <trans-unit id="efc330a017153f448a0111c70f94ac011295b24b" translate="yes" xml:space="preserve">
          <source>The path-match strategy 'full' matches against the entire URL. It is important to do this when redirecting empty-path routes. Otherwise, because an empty path is a prefix of any URL, the router would apply the redirect even when navigating to the redirect destination, creating an endless loop.</source>
          <target state="translated">경로 일치 전략 '전체'는 전체 URL과 일치합니다. 빈 경로 경로를 리디렉션 할 때이 작업을 수행해야합니다. 그렇지 않으면 빈 경로는 URL의 접두사이므로 라우터는 리디렉션 대상으로 탐색 할 때도 리디렉션을 적용하여 무한 루프를 만듭니다.</target>
        </trans-unit>
        <trans-unit id="7aedc08e6bf2368ad910279f0b057e807d83e9f8" translate="yes" xml:space="preserve">
          <source>The path-matching strategy, one of 'prefix' or 'full'. Default is 'prefix'.</source>
          <target state="translated">'접두사'또는 '전체'중 하나 인 경로 일치 전략. 기본값은 '접두사'입니다.</target>
        </trans-unit>
        <trans-unit id="10817689f142f9440662eeb6d05887794bb18bb9" translate="yes" xml:space="preserve">
          <source>The pathname where the app will be served.</source>
          <target state="translated">앱이 제공 될 경로 이름입니다.</target>
        </trans-unit>
        <trans-unit id="ddea77aa7e88eee7c5407247c21aa1d815f8f4fa" translate="yes" xml:space="preserve">
          <source>The pipe class implements the &lt;code&gt;&lt;a href=&quot;../api/core/pipetransform&quot;&gt;PipeTransform&lt;/a&gt;&lt;/code&gt; interface's &lt;code&gt;transform&lt;/code&gt; method that accepts an input value followed by optional parameters and returns the transformed value.</source>
          <target state="translated">파이프 클래스 는 입력 값 다음에 선택적 매개 변수를 허용하고 변환 된 값을 리턴하는 &lt;code&gt;&lt;a href=&quot;../api/core/pipetransform&quot;&gt;PipeTransform&lt;/a&gt;&lt;/code&gt; 인터페이스의 &lt;code&gt;transform&lt;/code&gt; 메소드를 구현합니다 .</target>
        </trans-unit>
        <trans-unit id="f73953d503dce99e3f2e6da39da4ce7debe6ac7d" translate="yes" xml:space="preserve">
          <source>The pipe name to use in template bindings. Typically uses &lt;a href=&quot;../../guide/glossary#case-types&quot;&gt;lowerCamelCase&lt;/a&gt; because the name cannot contain hyphens.</source>
          <target state="translated">템플릿 바인딩에 사용할 파이프 이름입니다. 이름에 하이픈을 사용할 수 없으므로 일반적으로 &lt;a href=&quot;../../guide/glossary#case-types&quot;&gt;lowerCamelCase를&lt;/a&gt; 사용 합니다.</target>
        </trans-unit>
        <trans-unit id="345412f14368a1f164257004a17666a92c69e9a0" translate="yes" xml:space="preserve">
          <source>The pipe operator (&lt;code&gt;|&lt;/code&gt;)</source>
          <target state="translated">파이프 연산자 ( &lt;code&gt;|&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="47f93ef7f7a798e2556f7e8b9c63fade54c0a39a" translate="yes" xml:space="preserve">
          <source>The pipe operator has a higher precedence than the ternary operator (&lt;code&gt;?:&lt;/code&gt;), which means &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkwithhref&quot;&gt;a&lt;/a&gt; ? b : c | x&lt;/code&gt; is parsed as &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkwithhref&quot;&gt;a&lt;/a&gt; ? b : (c | x)&lt;/code&gt;. Nevertheless, for a number of reasons, the pipe operator cannot be used without parentheses in the first and second operands of &lt;code&gt;?:&lt;/code&gt;. A good practice is to use parentheses in the third operand too.</source>
          <target state="translated">(파이프 연산자 원계 연산자보다 우선 갖는다 &lt;code&gt;?:&lt;/code&gt; ) 수단 &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkwithhref&quot;&gt;a&lt;/a&gt; ? b : c | x&lt;/code&gt; 으로 분석됩니다 &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkwithhref&quot;&gt;a&lt;/a&gt; ? b : (c | x)&lt;/code&gt; b : (c | x) . 그럼에도 불구하고 여러 가지 이유로 파이프 연산자는 &lt;code&gt;?:&lt;/code&gt; 의 첫 번째와 두 번째 피연산자에서 괄호없이 사용할 수 없습니다 . 세 번째 피연산자에도 괄호를 사용하는 것이 좋습니다.&lt;a href=&quot;../api/router/routerlinkwithhref&quot;&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ed50cd1104edcdf07f478c9622d53824cc197dcf" translate="yes" xml:space="preserve">
          <source>The pipe operator passes the result of an expression on the left to a pipe function on the right.</source>
          <target state="translated">파이프 연산자는 왼쪽의 표현식 결과를 오른쪽의 파이프 함수로 전달합니다.</target>
        </trans-unit>
        <trans-unit id="8eb7ba48d7c30018b592c2a263ffe9de1745ef67" translate="yes" xml:space="preserve">
          <source>The pipes discussed earlier in this page are implemented with pure functions. The built-in &lt;code&gt;&lt;a href=&quot;../api/common/datepipe&quot;&gt;DatePipe&lt;/a&gt;&lt;/code&gt; is a pure pipe with a pure function implementation. So are the &lt;code&gt;ExponentialStrengthPipe&lt;/code&gt; and &lt;code&gt;FlyingHeroesPipe&lt;/code&gt;. A few steps back, you reviewed the &lt;code&gt;FlyingHeroesImpurePipe&lt;/code&gt;&amp;mdash;an impure pipe with a pure function.</source>
          <target state="translated">이 페이지의 앞부분에서 설명한 파이프는 순수한 기능으로 구현됩니다. 내장 &lt;code&gt;&lt;a href=&quot;../api/common/datepipe&quot;&gt;DatePipe&lt;/a&gt;&lt;/code&gt; 는 순수한 기능 구현을 가진 순수한 파이프입니다. 그래서 있습니다 &lt;code&gt;ExponentialStrengthPipe&lt;/code&gt; 및 &lt;code&gt;FlyingHeroesPipe&lt;/code&gt; . 몇 단계 뒤로, 순수한 기능을 갖춘 불순한 파이프 인 &lt;code&gt;FlyingHeroesImpurePipe&lt;/code&gt; 를 검토했습니다 .</target>
        </trans-unit>
        <trans-unit id="120783f4944d7609420e4fa2d8de1cd7b96a2fd4" translate="yes" xml:space="preserve">
          <source>The popup should stay open, even when switching between pages in the application, until the user closes it by sending the message or canceling. Clearly you can't put the popup in the same outlet as the other pages.</source>
          <target state="translated">사용자가 메시지를 보내거나 취소하여 페이지를 닫을 때까지 응용 프로그램에서 페이지 간을 전환 할 때에도 팝업은 열려 있어야합니다. 분명히 다른 페이지와 같은 콘센트에 팝업을 넣을 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="bfe8a90e0b39cf0e03648ad7ceb8f68c1e9609e0" translate="yes" xml:space="preserve">
          <source>The port to use to serve the application.</source>
          <target state="translated">응용 프로그램을 제공하는 데 사용할 포트입니다.</target>
        </trans-unit>
        <trans-unit id="d900c6fbbdec6ccc354680413a57b4ab661e72cc" translate="yes" xml:space="preserve">
          <source>The practice of cloning a request to set new headers is so common that there's a &lt;code&gt;setHeaders&lt;/code&gt; shortcut for it:</source>
          <target state="translated">새 헤더 설정 요청 복제는 매우 일반적이므로 &lt;code&gt;setHeaders&lt;/code&gt; 바로 가기가 있습니다.</target>
        </trans-unit>
        <trans-unit id="d79f7ddd3370cdaec456ab22eea48dab91ad8972" translate="yes" xml:space="preserve">
          <source>The practices described in this document apply to Angular 2.0 and later. If you are currently using AngularJS, see &lt;a href=&quot;upgrade&quot;&gt;Upgrading from AngularJS&lt;/a&gt;. &lt;em&gt;AngularJS&lt;/em&gt; is the name for all v1.x versions of Angular.</source>
          <target state="translated">이 문서에 설명 된 방법은 Angular 2.0 이상에 적용됩니다. 현재 AngularJS를 사용중인 경우 AngularJS에서 &lt;a href=&quot;upgrade&quot;&gt;업그레이드를&lt;/a&gt; 참조하십시오 . &lt;em&gt;AngularJS&lt;/em&gt; 는 모든 v1.x 버전의 Angular의 이름입니다.</target>
        </trans-unit>
        <trans-unit id="1b61f5ed114256e63478f78b9527841ff42f1f55" translate="yes" xml:space="preserve">
          <source>The predicate is any method that takes a &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; and returns a &lt;em&gt;truthy&lt;/em&gt; value. The following example finds all &lt;code&gt;DebugElements&lt;/code&gt; with a reference to a template local variable named &quot;content&quot;:</source>
          <target state="translated">술어는 &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; 를 가져 &lt;em&gt;와서&lt;/em&gt; 값을 반환하는 모든 메소드입니다 . 다음 예제는 &quot;content&quot;라는 템플릿 로컬 변수를 참조하여 모든 &lt;code&gt;DebugElements&lt;/code&gt; 를 찾습니다 .</target>
        </trans-unit>
        <trans-unit id="ce3e8a27555504e35c1b0cf83f429a0f13cb6911" translate="yes" xml:space="preserve">
          <source>The preemptive error message tells you to compile explicitly with &lt;code&gt;compileComponents()&lt;/code&gt;.</source>
          <target state="translated">선점 오류 메시지는 &lt;code&gt;compileComponents()&lt;/code&gt; 명시 적으로 컴파일하도록 지시합니다 .</target>
        </trans-unit>
        <trans-unit id="531aa0c92c5d9b66edd1abb9d99a1c78f864e5f1" translate="yes" xml:space="preserve">
          <source>The preferred solution is to add a &lt;code&gt;redirect&lt;/code&gt; route that translates the initial relative URL (&lt;code&gt;''&lt;/code&gt;) to the desired default path (&lt;code&gt;/heroes&lt;/code&gt;). The browser address bar shows &lt;code&gt;.../heroes&lt;/code&gt; as if you'd navigated there directly.</source>
          <target state="translated">선호되는 솔루션은 초기 상대 URL ( &lt;code&gt;''&lt;/code&gt; )을 원하는 기본 경로 ( &lt;code&gt;/heroes&lt;/code&gt; )로 변환하는 경로 &lt;code&gt;redirect&lt;/code&gt; 경로 를 추가하는 것 입니다. 브라우저 주소 표시 줄에 직접 이동 한 것처럼 &lt;code&gt;.../heroes&lt;/code&gt; 이 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="323804b4601311b642368194508cfb069c1a6100" translate="yes" xml:space="preserve">
          <source>The preferred way to configure the strategy is to add a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base&quot;&gt;&amp;lt;base href&amp;gt; element&lt;/a&gt; tag in the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; of the &lt;code&gt;index.html&lt;/code&gt;.</source>
          <target state="translated">전략을 구성하는 선호되는 방법 은 &lt;code&gt;index.html&lt;/code&gt; 의 &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; 에 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base&quot;&gt;&amp;lt;base href&amp;gt; 요소&lt;/a&gt; 태그 를 추가하는 것 입니다.</target>
        </trans-unit>
        <trans-unit id="be94b295da6b6dfbe7f415ce1a95d804f5cc29c3" translate="yes" xml:space="preserve">
          <source>The preferred way to un-ignore a file is to update the &lt;code&gt;content/examples/.gitignore&lt;/code&gt; like this:</source>
          <target state="translated">파일을 무시하는 가장 좋은 방법은 다음과 같이 &lt;code&gt;content/examples/.gitignore&lt;/code&gt; 를 업데이트하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="1f0086cdbedbb14fe8c9bfa9cacc9506b54363c6" translate="yes" xml:space="preserve">
          <source>The prefix to apply to generated selectors for the initial project.</source>
          <target state="translated">초기 프로젝트의 생성 된 선택기에 적용 할 접두사입니다.</target>
        </trans-unit>
        <trans-unit id="25c273d85b73af2578dc0a29b3ba9b91dc63aba8" translate="yes" xml:space="preserve">
          <source>The prefix to apply to the generated component selector.</source>
          <target state="translated">생성 된 컴포넌트 선택기에 적용 할 접 두부입니다.</target>
        </trans-unit>
        <trans-unit id="cfd2a19c32615eb586fdc1467f3daf305549c48a" translate="yes" xml:space="preserve">
          <source>The preloader optimistically loads all router configurations to make navigations into lazily-loaded sections of the application faster.</source>
          <target state="translated">프리 로더는 모든 라우터 구성을 낙관적으로로드하여 애플리케이션의 느리게로드 된 섹션으로 빠르게 탐색합니다.</target>
        </trans-unit>
        <trans-unit id="f42acc2b5381961d93f1b9bb1b38efec3174a5c2" translate="yes" xml:space="preserve">
          <source>The preloader runs in the background. When the router bootstraps, the preloader starts listening to all navigation events. After every such event, the preloader will check if any configurations can be loaded lazily.</source>
          <target state="translated">프리 로더는 백그라운드에서 실행됩니다. 라우터가 부트 스트랩하면 프리 로더가 모든 탐색 이벤트를 청취하기 시작합니다. 이러한 모든 이벤트 후에 프리 로더는 구성을 지연로드 할 수 있는지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="5d55f652f32922a327beff0bc5b2217e949bdf3d" translate="yes" xml:space="preserve">
          <source>The presence of &lt;code&gt;&amp;lt;ng-content&amp;gt;&lt;/code&gt; tags in the component's template.</source>
          <target state="translated">구성 요소 템플릿 에 &lt;code&gt;&amp;lt;ng-content&amp;gt;&lt;/code&gt; 태그가 있습니다.</target>
        </trans-unit>
        <trans-unit id="00d3e678b5578ba56bc0d2cfcaf26815fef02171" translate="yes" xml:space="preserve">
          <source>The presence of the implicit template object has implications for the nesting of structural directives. For more on this subject, see &lt;a href=&quot;../../guide/structural-directives#one-per-element&quot;&gt;Structural Directives&lt;/a&gt;.</source>
          <target state="translated">암시 적 템플릿 개체의 존재는 구조적 지시문의 중첩과 관련이 있습니다. 이 주제에 대한 자세한 내용은 &lt;a href=&quot;../../guide/structural-directives#one-per-element&quot;&gt;구조 지시문을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="b42061155850ee530a76aac5296dde7e21feb2b3" translate="yes" xml:space="preserve">
          <source>The presence of this method is a signal to the Ivy template type-check compiler that the &lt;code&gt;&lt;a href=&quot;ngforof&quot;&gt;NgForOf&lt;/a&gt;&lt;/code&gt; structural directive renders its template with a specific context type.</source>
          <target state="translated">이 메소드의 존재는 &lt;code&gt;&lt;a href=&quot;ngforof&quot;&gt;NgForOf&lt;/a&gt;&lt;/code&gt; 구조적 지시문이 템플리트를 특정 컨텍스트 유형으로 렌더링 한다는 Ivy 템플리트 유형 검사 컴파일러에 대한 신호 입니다.</target>
        </trans-unit>
        <trans-unit id="86f41d9e1229109e3648daa0169e96c673c401bf" translate="yes" xml:space="preserve">
          <source>The presence of this static field is a signal to the Ivy template type check compiler that when the &lt;code&gt;&lt;a href=&quot;ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; structural directive renders its template, the type of the expression bound to &lt;code&gt;&lt;a href=&quot;ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; should be narrowed in some way. For &lt;code&gt;&lt;a href=&quot;ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt;, the binding expression itself is used to narrow its type, which allows the strictNullChecks feature of TypeScript to work with &lt;code&gt;&lt;a href=&quot;ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">이 정적 필드의 존재는 &lt;code&gt;&lt;a href=&quot;ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; 구조 지시문이 템플리트를 렌더링 할 때 ngIf에 바인드 된 표현식의 유형이 어떤 방식으로 좁혀 &lt;code&gt;&lt;a href=&quot;ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; 한다는 Ivy 템플리트 유형 검사 컴파일러에 대한 신호 입니다. 들면 &lt;code&gt;&lt;a href=&quot;ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; 바인딩 식 자체는 strictNullChecks가 작동하도록 허용 타이프의 기능의 종류 좁히는 데 사용되는 &lt;code&gt;&lt;a href=&quot;ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; 를 .</target>
        </trans-unit>
        <trans-unit id="d3d52fcf10501054e6ada11540d5b2872f70a568" translate="yes" xml:space="preserve">
          <source>The preview pane immediately updates to display the name of each product in the list.</source>
          <target state="translated">미리보기 창이 즉시 업데이트되어 목록에 각 제품의 이름이 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="e48d8699ea4367c454a0431ca00856d48e5fe151" translate="yes" xml:space="preserve">
          <source>The previous &lt;code&gt;TwainComponent&lt;/code&gt; tests simulated an asynchronous observable response from the &lt;code&gt;TwainService&lt;/code&gt; with the &lt;code&gt;asyncData&lt;/code&gt; and &lt;code&gt;asyncError&lt;/code&gt; utilities.</source>
          <target state="translated">이전 &lt;code&gt;TwainComponent&lt;/code&gt; 의 테스트는 관찰에서 비동기 응답 시뮬레이션 &lt;code&gt;TwainService&lt;/code&gt; 와 &lt;code&gt;asyncData&lt;/code&gt; 및 &lt;code&gt;asyncError&lt;/code&gt; 유틸리티.</target>
        </trans-unit>
        <trans-unit id="5364db2c3b6e95db6ec36a33c11635ccee48e801" translate="yes" xml:space="preserve">
          <source>The previous &lt;em&gt;Hero of the Month&lt;/em&gt; example used the &lt;code&gt;MinimalLogger&lt;/code&gt; class as the token for a provider of &lt;code&gt;LoggerService&lt;/code&gt;.</source>
          <target state="translated">이전 &lt;em&gt;달의 Hero&lt;/em&gt; 예제에서는 &lt;code&gt;MinimalLogger&lt;/code&gt; 클래스를 &lt;code&gt;LoggerService&lt;/code&gt; 제공자의 토큰으로 사용 했습니다 .</target>
        </trans-unit>
        <trans-unit id="ab5d9f1002775378705c23acd28f52fb378eb33d" translate="yes" xml:space="preserve">
          <source>The previous example presents such a name collision. The component has a &lt;code&gt;customer&lt;/code&gt; property and the &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; defines a &lt;code&gt;customer&lt;/code&gt; template variable.</source>
          <target state="translated">앞의 예는 이러한 이름 충돌을 나타냅니다. 구성 요소에는 &lt;code&gt;customer&lt;/code&gt; 특성이 있으며 &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 는 &lt;code&gt;customer&lt;/code&gt; 템플리트 변수를 정의 합니다.</target>
        </trans-unit>
        <trans-unit id="3ec517832673bf93688f5797ba759fb5bcbd4451" translate="yes" xml:space="preserve">
          <source>The previous page showed how to &lt;a href=&quot;displaying-data&quot;&gt;display data&lt;/a&gt;. This page demonstrated event binding techniques.</source>
          <target state="translated">이전 페이지는 &lt;a href=&quot;displaying-data&quot;&gt;데이터&lt;/a&gt; 를 표시 하는 방법을 보여주었습니다 . 이 페이지는 이벤트 바인딩 기술을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="40f4c684187ee76e174e3c81ad8531be7d342ffe" translate="yes" xml:space="preserve">
          <source>The previous sections of this guide referred to RxJS &lt;code&gt;Observables&lt;/code&gt; and operators such as &lt;code&gt;catchError&lt;/code&gt; and &lt;code&gt;retry&lt;/code&gt;. You will encounter more RxJS artifacts as you continue below.</source>
          <target state="translated">이 가이드의 이전 섹션에서는 RxJS &lt;code&gt;Observables&lt;/code&gt; 및 &lt;code&gt;catchError&lt;/code&gt; 및 &lt;code&gt;retry&lt;/code&gt; 와 같은 연산자를 참조했습니다 . 아래에서 계속하면 더 많은 RxJS 아티팩트가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="36939dd7e21e25efe97977bcc704881e41916a95" translate="yes" xml:space="preserve">
          <source>The previous simple example showed passing in a string. To pass in an object, the syntax and thinking are the same.</source>
          <target state="translated">앞의 간단한 예제는 문자열을 전달하는 것을 보여주었습니다. 객체를 전달하려면 구문과 생각이 동일합니다.</target>
        </trans-unit>
        <trans-unit id="56f2a62246eea5c3c9cdaa4780c32f7e493575ed" translate="yes" xml:space="preserve">
          <source>The previous tests played the role of the host &lt;code&gt;DashboardComponent&lt;/code&gt; themselves. But does the &lt;code&gt;DashboardHeroComponent&lt;/code&gt; work correctly when properly data-bound to a host component?</source>
          <target state="translated">이전 테스트는 호스트 &lt;code&gt;DashboardComponent&lt;/code&gt; 자체 의 역할을 수행 했습니다. 그러나 호스트 구성 요소에 올바르게 데이터 바인딩 된 경우 &lt;code&gt;DashboardHeroComponent&lt;/code&gt; 가 올바르게 작동합니까?</target>
        </trans-unit>
        <trans-unit id="5bf3abe312936fd7f8c715b3c6575f72f4cc1b47" translate="yes" xml:space="preserve">
          <source>The previous value of the attribute.</source>
          <target state="translated">속성의 이전 값</target>
        </trans-unit>
        <trans-unit id="1dfa467560796beba789d3214a05abeb3f64d6a8" translate="yes" xml:space="preserve">
          <source>The previous version assigns an array of heroes to the component's &lt;code&gt;heroes&lt;/code&gt; property. The assignment occurs &lt;em&gt;synchronously&lt;/em&gt;, as if the server could return heroes instantly or the browser could freeze the UI while it waited for the server's response.</source>
          <target state="translated">이전 버전에서는 여러 영웅을 구성 요소의 &lt;code&gt;heroes&lt;/code&gt; 속성에 할당합니다 . 서버가 영웅을 즉시 반환하거나 브라우저가 서버의 응답을 기다리는 동안 UI를 중지 할 수있는 것처럼 할당이 &lt;em&gt;동 기적&lt;/em&gt; 으로 수행됩니다.</target>
        </trans-unit>
        <trans-unit id="72231ecb9078c4b31429d32906f226cb03e9377c" translate="yes" xml:space="preserve">
          <source>The primary navigation part has changed; the secondary route is the same.</source>
          <target state="translated">기본 탐색 부분이 변경되었습니다. 보조 경로는 동일합니다.</target>
        </trans-unit>
        <trans-unit id="3c9d8bf0259e3eb63f943c6785b8b6a011914253" translate="yes" xml:space="preserve">
          <source>The primary routing outlet.</source>
          <target state="translated">기본 라우팅 콘센트.</target>
        </trans-unit>
        <trans-unit id="486f9745b09ef70dd0d395c0292014660ec3a6b7" translate="yes" xml:space="preserve">
          <source>The process of &lt;code&gt;HeroService&lt;/code&gt; injection looks something like this.</source>
          <target state="translated">&lt;code&gt;HeroService&lt;/code&gt; 주입 과정 은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="f2e3b6f36c0c22bc94631be9ba69dd603b5d41ff" translate="yes" xml:space="preserve">
          <source>The product details component already uses the cart service (&lt;code&gt;CartService&lt;/code&gt;) to add products to the cart.</source>
          <target state="translated">제품 세부 사항 구성 요소는 이미 장바구니 서비스 ( &lt;code&gt;CartService&lt;/code&gt; )를 사용하여 장바구니 에 제품을 추가합니다.</target>
        </trans-unit>
        <trans-unit id="8021e87038c33d08539a200b856644645d4e9ce1" translate="yes" xml:space="preserve">
          <source>The product details component handles the display of each product. The Angular Router displays components based on the browser's URL and your defined routes. You'll use the Angular Router to combine the &lt;code&gt;products&lt;/code&gt; data and route information to display the specific details for each product.</source>
          <target state="translated">제품 세부 사항 구성 요소는 각 제품의 표시를 처리합니다. Angular Router는 브라우저의 URL 및 정의 된 경로를 기반으로 구성 요소를 표시합니다. Angular Router를 사용하여 &lt;code&gt;products&lt;/code&gt; 데이터와 경로 정보를 결합하여 각 제품에 대한 특정 세부 정보를 표시합니다.</target>
        </trans-unit>
        <trans-unit id="7eb6cfe553c75eff3acf81ec96aea3ac0265c8bb" translate="yes" xml:space="preserve">
          <source>The project also contains some animations. You won't upgrade them in this version of the guide. Turn to the &lt;a href=&quot;animations&quot;&gt;Angular animations&lt;/a&gt; guide to learn about that.</source>
          <target state="translated">이 프로젝트에는 애니메이션도 포함되어 있습니다. 이 버전의 가이드에서는 업그레이드하지 않습니다. 이에 대한 자세한 내용 은 &lt;a href=&quot;animations&quot;&gt;각도 애니메이션&lt;/a&gt; 안내서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="cb22493e5247fcf1b73099aacb2b51c7edb8e5bf" translate="yes" xml:space="preserve">
          <source>The project you create with the CLI is immediately ready to test. Just run the &lt;a href=&quot;cli/test&quot;&gt;&lt;code&gt;ng test&lt;/code&gt;&lt;/a&gt; CLI command:</source>
          <target state="translated">CLI를 사용하여 생성 한 프로젝트는 즉시 테스트 할 준비가되었습니다. &lt;a href=&quot;cli/test&quot;&gt; &lt;code&gt;ng test&lt;/code&gt; &lt;/a&gt; CLI 명령을 실행하십시오 .</target>
        </trans-unit>
        <trans-unit id="a1cfa2d4e83385878d411d839ce7a7cdbd9c013f" translate="yes" xml:space="preserve">
          <source>The projected content of &lt;code&gt;&amp;lt;app-inspector&amp;gt;&lt;/code&gt; sees the 🐳 (whale), not the 🐶 (puppy), because the 🐶 (puppy) is inside the &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt;&lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt;. The &lt;code&gt;&amp;lt;app-inspector&amp;gt;&lt;/code&gt; can only see the 🐶 (puppy) if it is also within the &lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&amp;lt;app-inspector&amp;gt;&lt;/code&gt; 의 예상 컨텐츠는 🐶 (puppy)가 &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; &lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt; 안에 있기 때문에 🐶 (puppy)가 아니라 🐳 (whale)를 봅니다 . &lt;code&gt;&amp;lt;app-inspector&amp;gt;&lt;/code&gt; 그것이 내에있는 경우에만 🐶 (강아지)을 볼 수있다 &lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6e36792ea583ac976f37bafa9de7316d9520835d" translate="yes" xml:space="preserve">
          <source>The prompt runtime automatically validates the provided response against the constraints provided in the JSON schema. If the value is not acceptable, the user is prompted for a new value. This ensures that any values passed to the schematic meet the expectations of the schematic's implementation, so that you do not need to add additional checks within the schematic's code.</source>
          <target state="translated">프롬프트 런타임은 JSON 스키마에 제공된 제한 조건에 대해 제공된 응답의 유효성을 자동으로 검증합니다. 값이 허용되지 않으면 새 값을 입력하라는 메시지가 표시됩니다. 이렇게하면 회로도에 전달 된 모든 값이 회로도 구현의 기대치를 충족하므로 회로도 코드 내에 추가 검사를 추가 할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="7cf0ecec69996d92571eb4e4bd556aced4c3efe0" translate="yes" xml:space="preserve">
          <source>The properties of an &lt;code&gt;$event&lt;/code&gt; object vary depending on the type of DOM event. For example, a mouse event includes different information than an input box editing event.</source>
          <target state="translated">&lt;code&gt;$event&lt;/code&gt; 객체 의 속성은 DOM 이벤트 유형에 따라 다릅니다. 예를 들어, 마우스 이벤트에는 입력 상자 편집 이벤트와 다른 정보가 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="97a76f1a52bc3c879b21278ea18563262a1e410d" translate="yes" xml:space="preserve">
          <source>The properties of the &lt;code&gt;nativeElement&lt;/code&gt; depend upon the runtime environment. You could be running these tests on a &lt;em&gt;non-browser&lt;/em&gt; platform that doesn't have a DOM or whose DOM-emulation doesn't support the full &lt;code&gt;HTMLElement&lt;/code&gt; API.</source>
          <target state="translated">&lt;code&gt;nativeElement&lt;/code&gt; 의 속성은 런타임 환경에 따라 다릅니다. DOM이 없거나 &lt;em&gt;브라우저&lt;/em&gt; 가 아닌 &lt;code&gt;HTMLElement&lt;/code&gt; 플랫폼에서 전체 HTMLElement API를 지원하지 않는 &lt;em&gt;브라우저&lt;/em&gt; 가 &lt;em&gt;아닌&lt;/em&gt; 플랫폼 에서 이러한 테스트를 실행할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c04dcd4d9e3fdfb316a49d102b3473f76bd1e0d6" translate="yes" xml:space="preserve">
          <source>The property name.</source>
          <target state="translated">속성 이름</target>
        </trans-unit>
        <trans-unit id="7df460d20d043603559a67d7974d835f9f0eed3f" translate="yes" xml:space="preserve">
          <source>The provided classes are added to the element when the &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;&lt;/code&gt; becomes the current active route.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;&lt;/code&gt; 가 현재 활성 경로가 되면 제공된 클래스가 요소에 추가됩니다 .</target>
        </trans-unit>
        <trans-unit id="5b4910a760b25a51893dd6345e06c7f8b33600d7" translate="yes" xml:space="preserve">
          <source>The provider factory function (returned by &lt;code&gt;runnersUpFactory()&lt;/code&gt;) returns the actual dependency object, the string of names.</source>
          <target state="translated">제공자 팩토리 함수 ( &lt;code&gt;runnersUpFactory()&lt;/code&gt; 의해 리턴 됨 )는 실제 종속성 오브젝트 인 문자열을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="b4c17117d8a92a8817f56060d61fb1bd4c763cc5" translate="yes" xml:space="preserve">
          <source>The provider object can have a third option, &lt;code&gt;multi: true&lt;/code&gt;, which you can use with &lt;code&gt;&lt;a href=&quot;../api/core/app_initializer&quot;&gt;APP_INITIALIZER&lt;/a&gt;&lt;/code&gt; to register multiple handlers for the provide event.</source>
          <target state="translated">제공자 오브젝트에는 &lt;code&gt;multi: true&lt;/code&gt; 의 세 번째 옵션이있을 수 있습니다.이 옵션 은 &lt;code&gt;&lt;a href=&quot;../api/core/app_initializer&quot;&gt;APP_INITIALIZER&lt;/a&gt;&lt;/code&gt; 와 함께 제공 이벤트에 대한 여러 핸들러를 등록 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="02b3d62f3fe1096d970290346afe693026ae8245" translate="yes" xml:space="preserve">
          <source>The providers array is where you list the services the app needs. When you list services here, they are available app-wide. You can scope them when using feature modules and lazy loading. For more information, see &lt;a href=&quot;providers&quot;&gt;Providers&lt;/a&gt;.</source>
          <target state="translated">공급자 배열은 앱에 필요한 서비스를 나열하는 곳입니다. 여기에 서비스를 나열하면 앱 전체에서 사용할 수 있습니다. 기능 모듈 및 지연로드를 사용할 때 범위를 지정할 수 있습니다. 자세한 정보는 &lt;a href=&quot;providers&quot;&gt;제공자를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="dbfe5beb656c4962d3cf4b97d176386634f50d45" translate="yes" xml:space="preserve">
          <source>The public API for schematics defines classes that represent the basic concepts.</source>
          <target state="translated">회로도에 대한 공개 API는 기본 개념을 나타내는 클래스를 정의합니다.</target>
        </trans-unit>
        <trans-unit id="de6f6ac52bec399fd6660c2b4b054e9a39440b12" translate="yes" xml:space="preserve">
          <source>The public API for your library is maintained in the &lt;code&gt;public-api.ts&lt;/code&gt; file in your library folder. Anything exported from this file is made public when your library is imported into an application. Use an NgModule to expose services and components.</source>
          <target state="translated">라이브러리의 공용 API는 라이브러리 폴더 의 &lt;code&gt;public-api.ts&lt;/code&gt; 파일에 유지됩니다 . 이 파일에서 내 보낸 모든 것은 라이브러리를 응용 프로그램으로 가져올 때 공개됩니다. NgModule을 사용하여 서비스 및 구성 요소를 노출하십시오.</target>
        </trans-unit>
        <trans-unit id="d054d0b6719a9e60f44011ba13eb8f4c3e083451" translate="yes" xml:space="preserve">
          <source>The query parameters shared by all the routes</source>
          <target state="translated">모든 경로가 공유하는 쿼리 매개 변수</target>
        </trans-unit>
        <trans-unit id="4231089991bd8ff6dd16d350b35cc226cbd300f3" translate="yes" xml:space="preserve">
          <source>The query params of the URL</source>
          <target state="translated">URL의 쿼리 매개 변수</target>
        </trans-unit>
        <trans-unit id="2e3c5b3a02d06abe266f2cfa14e56837b6f3527d" translate="yes" xml:space="preserve">
          <source>The query results to store</source>
          <target state="translated">저장할 쿼리 결과</target>
        </trans-unit>
        <trans-unit id="ad7aeea31c0c6f526df9d9af5712f3c533c2d889" translate="yes" xml:space="preserve">
          <source>The query returns &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; wrappers around the matching elements.</source>
          <target state="translated">쿼리는 일치하는 요소 주위에 &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; 래퍼를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="420962f6ff64d28c5e044d0cc2355bfc2ea5030a" translate="yes" xml:space="preserve">
          <source>The query returns a &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; for the paragraph.</source>
          <target state="translated">쿼리는 단락에 대한 &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; 를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="d9af7bb5d4e8ad84a327ab8455d86b884cbad452" translate="yes" xml:space="preserve">
          <source>The quick-info feature allows you to hover to see where components, directives, modules, and so on come from. You can then click &quot;Go to definition&quot; or press F12 to go directly to the definition.</source>
          <target state="translated">빠른 정보 기능을 사용하면 구성 요소, 지시문, 모듈 등이 어디에서 왔는지 확인할 수 있습니다. 그런 다음 &quot;정의로 이동&quot;을 클릭하거나 F12를 눌러 정의로 직접 이동하십시오.</target>
        </trans-unit>
        <trans-unit id="50926fb8f24e0f7a0c8fd99de16fa0fdad121aad" translate="yes" xml:space="preserve">
          <source>The reader requests a page by its Page URL. The doc viewer fetches the corresponding JSON file, interprets it, and renders it as fully-formed HTML page.</source>
          <target state="translated">독자는 페이지 URL로 페이지를 요청합니다. 문서 뷰어는 해당 JSON 파일을 가져 와서 해석하여 완전한 형식의 HTML 페이지로 렌더링합니다.</target>
        </trans-unit>
        <trans-unit id="161d1b9d874c147636f786db6462e2b921a846dc" translate="yes" xml:space="preserve">
          <source>The real &lt;code&gt;RouterLinkDirective&lt;/code&gt; is quite complicated and entangled with other components and directives of the &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt;. It requires challenging setup to mock and use in tests.</source>
          <target state="translated">진짜 &lt;code&gt;RouterLinkDirective&lt;/code&gt; 은 매우 복잡하고 다른 구성 요소와의 지시로 얽혀있다 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt; . 테스트에서 조롱하고 사용하려면 까다로운 설정이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="7ceba990815347e65fc419a07143830d7018fac5" translate="yes" xml:space="preserve">
          <source>The reason is &lt;em&gt;tree shaking&lt;/em&gt;. For production apps you want to load the smallest, fastest code possible. The code should contain only the classes that you actually need. It should exclude a component that's never used, whether or not that component is declared.</source>
          <target state="translated">그 이유는 &lt;em&gt;나무가 흔들리는 것&lt;/em&gt; 입니다. 프로덕션 앱의 경우 가능한 가장 작고 빠른 코드를로드하려고합니다. 코드에는 실제로 필요한 클래스 만 포함되어야합니다. 해당 구성 요소의 선언 여부에 관계없이 절대 사용하지 않는 구성 요소를 제외해야합니다.</target>
        </trans-unit>
        <trans-unit id="6a078f105d135e610ac0d0702bdd6e7a40c0fae9" translate="yes" xml:space="preserve">
          <source>The reason is simplicity. Structural directives can do complex things with the host element and its descendents. When two directives lay claim to the same host element, which one takes precedence? Which should go first, the &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; or the &lt;code&gt;NgFor&lt;/code&gt;? Can the &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; cancel the effect of the &lt;code&gt;NgFor&lt;/code&gt;? If so (and it seems like it should be so), how should Angular generalize the ability to cancel for other structural directives?</source>
          <target state="translated">그 이유는 단순성입니다. 구조적 지시어는 호스트 요소와 그 하위 요소로 복잡한 작업을 수행 할 수 있습니다. 두 개의 지시문이 동일한 호스트 요소에 대한 소유권을 주장 할 때 어느 지시어가 우선합니까? 먼저 이동해야하는 &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;NgFor&lt;/code&gt; 를 ? 캔 &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; 는 의 효과 취소 &lt;code&gt;NgFor&lt;/code&gt; 를 ? 그렇다면 Angular는 다른 구조적 지시문에 대한 취소 기능을 어떻게 일반화해야합니까?</target>
        </trans-unit>
        <trans-unit id="fafb040a487d878e72e67cd8a770eb670b009039" translate="yes" xml:space="preserve">
          <source>The recently-developed &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements&quot;&gt;custom elements&lt;/a&gt; Web Platform feature is currently supported natively in a number of browsers. Support is pending or planned in other browsers.</source>
          <target state="translated">최근에 개발 된 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements&quot;&gt;사용자 지정 요소&lt;/a&gt; 웹 플랫폼 기능은 현재 여러 브라우저에서 기본적으로 지원됩니다. 다른 브라우저에서 지원이 보류 중이거나 계획 중입니다.</target>
        </trans-unit>
        <trans-unit id="fa75dd5d0bada1f47ade184135ab747fbf80a41c" translate="yes" xml:space="preserve">
          <source>The redirect path can be relative, as shown in this example, or absolute. If we change the &lt;code&gt;&lt;a href=&quot;route#redirectTo&quot;&gt;redirectTo&lt;/a&gt;&lt;/code&gt; value in the example to the absolute URL segment '/user/:name', the result URL is also absolute, '/user/jim'.</source>
          <target state="translated">경로 재 지정 경로는이 예에 표시된 것처럼 상대적이거나 절대적 일 수 있습니다. 우리는 변경하면 &lt;code&gt;&lt;a href=&quot;route#redirectTo&quot;&gt;redirectTo&lt;/a&gt;&lt;/code&gt; 의 절대 URL 세그먼트 예에서 값 '/ 사용자 / 이름', 결과 URL은 절대 '/ 사용자 / 짐이다.</target>
        </trans-unit>
        <trans-unit id="ce8f45225aa19c5dcf369c6d23b7264529fa54d7" translate="yes" xml:space="preserve">
          <source>The reference value of itemForm, without the ngForm attribute value, would be the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement&quot;&gt;HTMLFormElement&lt;/a&gt;. There is, however, a difference between a Component and a Directive in that a &lt;code&gt;&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; will be referenced without specifying the attribute value, and a &lt;code&gt;&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt; will not change the implicit reference (that is, the element).</source>
          <target state="translated">ngForm 속성 값이없는 itemForm의 참조 값은 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement&quot;&gt;HTMLFormElement&lt;/a&gt; 입니다. 그러나 속성 값을 지정하지 않고 &lt;code&gt;&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; 를 참조 한다는 점에서 구성 요소와 지시문 사이에는 차이 가 있으며, &lt;code&gt;&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt; 은 내재적 참조 (요소)를 변경하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="3e74d5a063ed6ad113dcb0dc04276262826975d9" translate="yes" xml:space="preserve">
          <source>The reference variable&amp;rsquo;s &lt;code&gt;valid&lt;/code&gt; property on input controls to check if a control is valid and show/hide error messages.</source>
          <target state="translated">입력 컨트롤에서 참조 변수의 &lt;code&gt;valid&lt;/code&gt; 속성은 컨트롤이 유효한지 확인하고 오류 메시지를 표시하거나 숨 깁니다.</target>
        </trans-unit>
        <trans-unit id="8e1c54c7687dd1cbc34b9457b4da8f1141636f2c" translate="yes" xml:space="preserve">
          <source>The registered async validator function for the control</source>
          <target state="translated">컨트롤에 등록 된 비동기 유효성 검사기 기능</target>
        </trans-unit>
        <trans-unit id="14569c3edda6f10cb9b8ea1799a88a50904561f7" translate="yes" xml:space="preserve">
          <source>The registered callback function called when a blur event occurs on the input element.</source>
          <target state="translated">입력 요소에서 흐림 이벤트가 발생할 때 호출 된 등록 된 콜백 함수입니다.</target>
        </trans-unit>
        <trans-unit id="83a100bf5139d939736b31435c736c0e17e4ef73" translate="yes" xml:space="preserve">
          <source>The registered callback function called when a change event occurs on the input element.</source>
          <target state="translated">입력 요소에서 변경 이벤트가 발생할 때 호출 된 등록 된 콜백 함수입니다.</target>
        </trans-unit>
        <trans-unit id="8325421c1589c4b1cafcd0c9b1b460010fe4dabd" translate="yes" xml:space="preserve">
          <source>The registered callback function called when a change or input event occurs on the input element.</source>
          <target state="translated">입력 요소에서 변경 또는 입력 이벤트가 발생할 때 호출 된 등록 된 콜백 함수입니다.</target>
        </trans-unit>
        <trans-unit id="60864d0a7b033aeeb5697aea8e9fe00704ce69b5" translate="yes" xml:space="preserve">
          <source>The registered callback function called when an input event occurs on the input element.</source>
          <target state="translated">입력 요소에서 입력 이벤트가 발생할 때 호출 된 등록 된 콜백 함수입니다.</target>
        </trans-unit>
        <trans-unit id="3f720157232b77c5ba1d4c879a427fa93efc8bc0" translate="yes" xml:space="preserve">
          <source>The registered synchronous validator function for the control</source>
          <target state="translated">컨트롤에 등록 된 동기 검증기 기능</target>
        </trans-unit>
        <trans-unit id="611af0e0b9e0bf773539c9b919be8a53d47c0b03" translate="yes" xml:space="preserve">
          <source>The related &lt;code&gt;HeroDetailComponent&lt;/code&gt; tests will assert that methods of the &lt;code&gt;HeroDetailService&lt;/code&gt; were called by spying on the service methods. Accordingly, the stub implements its methods as spies:</source>
          <target state="translated">관련된 &lt;code&gt;HeroDetailComponent&lt;/code&gt; 테스트는 서비스 메소드를 감시 하여 &lt;code&gt;HeroDetailService&lt;/code&gt; 의 메소드 가 호출 되었음을 확인 합니다. 따라서 스텁은 그 방법을 스파이로 구현합니다.</target>
        </trans-unit>
        <trans-unit id="0eb0173de0887207bb65b45ebe9f9fe125988a13" translate="yes" xml:space="preserve">
          <source>The relative path or absolute URL of a template file for an Angular component. If provided, do not supply an inline template using &lt;code&gt;template&lt;/code&gt;.</source>
          <target state="translated">각도 구성 요소에 대한 템플리트 파일의 상대 경로 또는 절대 URL입니다. 제공 한 경우, 사용 인라인 템플릿을 제공하지 &lt;code&gt;template&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b2a5f769df13524fc33173a60f95e5ebec2a8cc9" translate="yes" xml:space="preserve">
          <source>The relevant &lt;em&gt;Crisis Center&lt;/em&gt; code for this milestone follows.</source>
          <target state="translated">이 이정표에 대한 관련 &lt;em&gt;위기 센터&lt;/em&gt; 코드는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="fde1ac3dfd43433ca4e661ed9e84a40407308eaf" translate="yes" xml:space="preserve">
          <source>The remainder of this page discusses selected exercises in further detail.</source>
          <target state="translated">이 페이지의 나머지 부분에서는 선택한 운동에 대해 자세히 설명합니다.</target>
        </trans-unit>
        <trans-unit id="c8e8b3d7ca0d64b17a2fb3f293951af67e52afb0" translate="yes" xml:space="preserve">
          <source>The remaining tests confirm the logic of the component when the service returns different values. The second test validates the effect of changing the user name. The third test checks that the component displays the proper message when there is no logged-in user.</source>
          <target state="translated">나머지 테스트는 서비스가 다른 값을 반환 할 때 구성 요소의 논리를 확인합니다. 두 번째 테스트는 사용자 이름 변경 효과를 검증합니다. 세 번째 테스트는 로그인 한 사용자가 없을 때 구성 요소에 올바른 메시지가 표시되는지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="d7142c777489862d6522489ad8690b6cad01d02e" translate="yes" xml:space="preserve">
          <source>The repeater matcher relies on AngularJS &lt;code&gt;ng-repeat&lt;/code&gt;</source>
          <target state="translated">리피터 매처는 AngularJS &lt;code&gt;ng-repeat&lt;/code&gt; 에 의존합니다.</target>
        </trans-unit>
        <trans-unit id="91ad245b7614259a383728070796f36b7c6a8e1a" translate="yes" xml:space="preserve">
          <source>The request body</source>
          <target state="translated">요청 본문</target>
        </trans-unit>
        <trans-unit id="8baeab2869311562a541f4781282737e0d643863" translate="yes" xml:space="preserve">
          <source>The request body, or &lt;code&gt;null&lt;/code&gt; if one isn't set.</source>
          <target state="translated">요청 본문이거나 설정되지 않은 경우 &lt;code&gt;null&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="a6f77845fbe311e08dbeaef52a6fd2daf4e328ed" translate="yes" xml:space="preserve">
          <source>The request object.</source>
          <target state="translated">요청 객체.</target>
        </trans-unit>
        <trans-unit id="295297cd89c4bbc0045b1baf52143c439e6a5d78" translate="yes" xml:space="preserve">
          <source>The request was sent out over the wire.</source>
          <target state="translated">요청이 유선으로 발송되었습니다.</target>
        </trans-unit>
        <trans-unit id="cc47fc94ef80a1928c330c84f157fee95dfbc73f" translate="yes" xml:space="preserve">
          <source>The requests keep forwarding up until Angular finds an injector that can handle the request or runs out of ancestor &lt;code&gt;ElementInjector&lt;/code&gt;s.</source>
          <target state="translated">Angular가 요청을 처리하거나 조상 &lt;code&gt;ElementInjector&lt;/code&gt; 가 부족한 인젝터를 찾을 때까지 요청은 계속 전달됩니다 .</target>
        </trans-unit>
        <trans-unit id="4bca2438c6c78d7f3598583261e82a87e4585f19" translate="yes" xml:space="preserve">
          <source>The required character width.</source>
          <target state="translated">필요한 문자 너비입니다.</target>
        </trans-unit>
        <trans-unit id="e78685155e9f5bf3ed47c8190c17fafaf81b4db7" translate="yes" xml:space="preserve">
          <source>The required grammatical form.</source>
          <target state="translated">필요한 문법.</target>
        </trans-unit>
        <trans-unit id="6a56567a9d466e6d132c390ae6771774b8bf936d" translate="yes" xml:space="preserve">
          <source>The resource URL.</source>
          <target state="translated">리소스 URL.</target>
        </trans-unit>
        <trans-unit id="2806bdfe81615de27dd71c7273cdcf5fec886325" translate="yes" xml:space="preserve">
          <source>The resources to add/update.</source>
          <target state="translated">추가 / 업데이트 할 리소스.</target>
        </trans-unit>
        <trans-unit id="722bde3a779c6b7c44b072db8c9bef73a7dcee92" translate="yes" xml:space="preserve">
          <source>The resources to edit.</source>
          <target state="translated">편집 할 리소스</target>
        </trans-unit>
        <trans-unit id="b3b51cad36d2295674a88b5feb5f325a8dd9c5d1" translate="yes" xml:space="preserve">
          <source>The response body doesn't return all the data you may need. Sometimes servers return special headers or status codes to indicate certain conditions that are important to the application workflow.</source>
          <target state="translated">응답 본문은 필요한 모든 데이터를 반환하지 않습니다. 때때로 서버는 응용 프로그램 워크 플로에 중요한 특정 조건을 나타 내기 위해 특수 헤더 또는 상태 코드를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="9b93e53ea5820a1f628a4de1e5b36ddaf81f432c" translate="yes" xml:space="preserve">
          <source>The response body, or &lt;code&gt;null&lt;/code&gt; if one was not returned.</source>
          <target state="translated">응답 본문 . 반환되지 않은 경우 &lt;code&gt;null&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="99668b05017e2aa5e864a17012f39fce4777e24e" translate="yes" xml:space="preserve">
          <source>The response status code and headers were received.</source>
          <target state="translated">응답 상태 코드 및 헤더가 수신되었습니다.</target>
        </trans-unit>
        <trans-unit id="31138b87e6e07d760fa91a8f35bc7d6cef938655" translate="yes" xml:space="preserve">
          <source>The rest are stubs.</source>
          <target state="translated">나머지는 스텁입니다.</target>
        </trans-unit>
        <trans-unit id="527a427539693b3f88205ed83bab6a41153d480e" translate="yes" xml:space="preserve">
          <source>The rest of the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;, including its class attribute, moved inside the &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; element.</source>
          <target state="translated">클래스 속성을 포함하여 나머지 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 는 &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; 요소 내로 이동했습니다 .</target>
        </trans-unit>
        <trans-unit id="c743d737d76a8c6fba14ac64a1884a8a176429a0" translate="yes" xml:space="preserve">
          <source>The rest of the articles in this section specifically address the Angular implementation of service workers.</source>
          <target state="translated">이 섹션의 나머지 기사에서는 특히 서비스 근로자의 Angular 구현에 대해 설명합니다.</target>
        </trans-unit>
        <trans-unit id="62158bbbf1c618865ea1d81d423f963b4dce87ef" translate="yes" xml:space="preserve">
          <source>The rest of the file is boilerplate setup code anticipating more advanced tests that &lt;em&gt;might&lt;/em&gt; become necessary if the component evolves into something substantial.</source>
          <target state="translated">파일의 나머지 부분은 구성 요소가 실질적으로 발전 할 경우 필요할 &lt;em&gt;수있는&lt;/em&gt; 고급 테스트를 예상하는 상용구 설정 코드 입니다.</target>
        </trans-unit>
        <trans-unit id="72f013f648fdb7d77ec051dfbd8e0aae42973747" translate="yes" xml:space="preserve">
          <source>The rest of the scenario code relies on other Angular features and techniques that you can learn about elsewhere in the documentation. You can review it and download it from the live example.</source>
          <target state="translated">나머지 시나리오 코드는 설명서의 다른 곳에서 배울 수있는 다른 Angular 기능과 기술에 의존합니다. 당신은 그것을 검토하고 라이브 예제에서 다운로드 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9db844629762b7e377da3fb6860ee3d92e73f3e4" translate="yes" xml:space="preserve">
          <source>The result is shown below, with the hero's telephone number from &lt;code&gt;HeroContactComponent&lt;/code&gt; projected above the hero description.</source>
          <target state="translated">결과는 아래에 표시되며 &lt;code&gt;HeroContactComponent&lt;/code&gt; 의 영웅 전화 번호 는 영웅 설명 위에 투영됩니다.</target>
        </trans-unit>
        <trans-unit id="cf49885d2cf1bce6d0595e7a953482bda25b0935" translate="yes" xml:space="preserve">
          <source>The result of an expression might require some transformation before you're ready to use it in a binding. For example, you might display a number as a currency, change text to uppercase, or filter a list and sort it.</source>
          <target state="translated">식의 결과는 바인딩에서 사용할 준비가되기 전에 약간의 변환이 필요할 수 있습니다. 예를 들어, 숫자를 통화로 표시하거나 텍스트를 대문자로 변경하거나 목록을 필터링하여 정렬 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="70660d474935bb5c58cc521f6669d3b23f3ad648" translate="yes" xml:space="preserve">
          <source>The result of the expression is passed to the pipe's &lt;code&gt;transform()&lt;/code&gt; method.</source>
          <target state="translated">표현식의 결과는 파이프의 &lt;code&gt;transform()&lt;/code&gt; 메소드로 전달됩니다 .</target>
        </trans-unit>
        <trans-unit id="bf135bfcdaf4cfe03aad3aa70f5998ea60da6489" translate="yes" xml:space="preserve">
          <source>The result of this pipe is not reevaluated when the input is mutated. To avoid the need to reformat the date on every change-detection cycle, treat the date as an immutable object and change the reference when the pipe needs to run again.</source>
          <target state="translated">이 파이프의 결과는 입력이 변경 될 때 재평가되지 않습니다. 변경 감지주기마다 날짜를 다시 포맷 할 필요가 없도록 날짜를 변경 불가능한 오브젝트로 취급하고 파이프를 다시 실행해야하는 경우 참조를 변경하십시오.</target>
        </trans-unit>
        <trans-unit id="826ce97508a4661aa985a17e8919e5c33ad0cebf" translate="yes" xml:space="preserve">
          <source>The resulting &lt;code&gt;CartComponent&lt;/code&gt; class should look like this:</source>
          <target state="translated">결과 &lt;code&gt;CartComponent&lt;/code&gt; 클래스는 다음과 같아야합니다.</target>
        </trans-unit>
        <trans-unit id="a571031ddb791d5885d8b255dffe7c11b80344d0" translate="yes" xml:space="preserve">
          <source>The resulting &lt;code&gt;CartComponent&lt;/code&gt; template should look like this:</source>
          <target state="translated">결과 &lt;code&gt;CartComponent&lt;/code&gt; 템플릿은 다음과 같아야합니다.</target>
        </trans-unit>
        <trans-unit id="abe704b8eceeacf1b67a89d121ecca1aade1a14f" translate="yes" xml:space="preserve">
          <source>The resulting configuration does not wire up AngularJS digests to Zone hooks. It is the responsibility of the test writer to call &lt;code&gt;$rootScope.$apply&lt;/code&gt;, as necessary, to trigger AngularJS handlers of async events from Angular.</source>
          <target state="translated">결과 구성은 AngularJS 다이제스트를 영역 후크에 연결하지 않습니다. 테스트 작성자 는 Angular에서 비동기 이벤트의 AngularJS 핸들러를 트리거하기 위해 필요한 경우 &lt;code&gt;$rootScope.$apply&lt;/code&gt; 를 호출 해야합니다.</target>
        </trans-unit>
        <trans-unit id="bcbab465692903fa7cd8359d43327dd68fd697f4" translate="yes" xml:space="preserve">
          <source>The resulting crisis center is a foundation for introducing a new concept&amp;mdash;&lt;strong&gt;child routing&lt;/strong&gt;. You can leave &lt;em&gt;Heroes&lt;/em&gt; in its current state as a contrast with the &lt;em&gt;Crisis Center&lt;/em&gt; and decide later if the differences are worthwhile.</source>
          <target state="translated">그 결과로 생기는 위기 센터는 새로운 개념 인 &lt;strong&gt;아동 라우팅&lt;/strong&gt; 을 도입하기위한 토대입니다 . &lt;em&gt;위기 센터&lt;/em&gt; 와 대조적으로 &lt;em&gt;영웅&lt;/em&gt; 을 현재 상태로 두고 나중에 그 차이가 가치가 있는지 결정할 수 있습니다.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="de4d48c6b6c99ee6545e5af2a4c9556b34785c31" translate="yes" xml:space="preserve">
          <source>The resulting path is &lt;code&gt;/crisis-center/1&lt;/code&gt;.</source>
          <target state="translated">결과 경로는 &lt;code&gt;/crisis-center/1&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="3119670930697faa92fa40415fd5310703990877" translate="yes" xml:space="preserve">
          <source>The reusable animation to start.</source>
          <target state="translated">재사용 할 수있는 애니메이션을 시작합니다.</target>
        </trans-unit>
        <trans-unit id="c31f00e06ff51792a57ab30c7e7548ddc8902084" translate="yes" xml:space="preserve">
          <source>The revised &lt;code&gt;CachingInterceptor&lt;/code&gt; sets up a server request whether there's a cached value or not, using the same &lt;code&gt;sendRequest()&lt;/code&gt; method described &lt;a href=&quot;http#send-request&quot;&gt;above&lt;/a&gt;. The &lt;code&gt;results$&lt;/code&gt; observable will make the request when subscribed.</source>
          <target state="translated">수정 된 &lt;code&gt;CachingInterceptor&lt;/code&gt; 는 &lt;a href=&quot;http#send-request&quot;&gt;위에서&lt;/a&gt; 설명한 동일한 &lt;code&gt;sendRequest()&lt;/code&gt; 메소드를 사용하여 캐시 된 값이 있는지 없는지 서버 요청을 설정합니다 . &lt;code&gt;results$&lt;/code&gt; 때 구독 요청을 할 것입니다 관찰.</target>
        </trans-unit>
        <trans-unit id="be95ae4bd6dde666442aa0c4fe5f5b09117ba06c" translate="yes" xml:space="preserve">
          <source>The revised &lt;code&gt;HeroesComponent&lt;/code&gt; class file should look like this:</source>
          <target state="translated">수정 된 &lt;code&gt;HeroesComponent&lt;/code&gt; 클래스 파일은 다음과 같아야합니다.</target>
        </trans-unit>
        <trans-unit id="8f5283cba25861d79d0e19a7a740a98060be3788" translate="yes" xml:space="preserve">
          <source>The revised &lt;code&gt;HeroesComponent&lt;/code&gt; template should look like this:</source>
          <target state="translated">수정 된 &lt;code&gt;HeroesComponent&lt;/code&gt; 템플릿은 다음과 같아야합니다.</target>
        </trans-unit>
        <trans-unit id="63cda66359a819e7cbb619142c9b706aff15c48f" translate="yes" xml:space="preserve">
          <source>The root &lt;code&gt;AppComponent&lt;/code&gt; is the application shell. It has a title, a navigation bar with two links, and a router outlet where the router swaps components on and off the page. Here's what you get:</source>
          <target state="translated">루트 &lt;code&gt;AppComponent&lt;/code&gt; 는 응용 프로그램 셸입니다. 제목, 두 개의 링크가있는 탐색 모음 및 라우터가 페이지의 구성 요소를 교체하는 라우터 콘센트가 있습니다. 당신이 얻는 것은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="0f0329ffe5ecceeb131961f70f4acb552bdcbfe8" translate="yes" xml:space="preserve">
          <source>The root &lt;code&gt;AppModule&lt;/code&gt; is the only module that should import service modules.</source>
          <target state="translated">루트 &lt;code&gt;AppModule&lt;/code&gt; 은 서비스 모듈을 가져와야하는 유일한 모듈입니다.</target>
        </trans-unit>
        <trans-unit id="92c90ae30fd5c691212cf46563dac3961bb08cdc" translate="yes" xml:space="preserve">
          <source>The root application module, &lt;code&gt;AppModule&lt;/code&gt;, of almost every browser application should import &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; from &lt;code&gt;@angular/platform-browser&lt;/code&gt;.</source>
          <target state="translated">거의 모든 브라우저 응용 프로그램의 루트 응용 프로그램 모듈 인 &lt;code&gt;AppModule&lt;/code&gt; 은 &lt;code&gt;@angular/platform-browser&lt;/code&gt; 에서 &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; 을 가져와야 합니다 .</target>
        </trans-unit>
        <trans-unit id="bbda7caf7baa01267a84d3e9deab3bbca8a3fdbd" translate="yes" xml:space="preserve">
          <source>The root directory of the app.</source>
          <target state="translated">앱의 루트 디렉토리입니다.</target>
        </trans-unit>
        <trans-unit id="6a64de3e02b9fca633213b81541751cd41ab0a11" translate="yes" xml:space="preserve">
          <source>The root element to search from</source>
          <target state="translated">검색 할 루트 요소</target>
        </trans-unit>
        <trans-unit id="671d824111bab81ec8318377b2e219bfaa96820d" translate="yes" xml:space="preserve">
          <source>The root folder for this project's files, relative to the workspace folder. Empty for the initial app, which resides at the top level of the workspace.</source>
          <target state="translated">작업 공간 폴더를 기준으로이 프로젝트 파일의 루트 폴더입니다. 작업 공간의 최상위 레벨에있는 초기 앱의 경우 비어 있습니다.</target>
        </trans-unit>
        <trans-unit id="54dbf3939551d85e7abddf427d6a6ad0d92df9b4" translate="yes" xml:space="preserve">
          <source>The root folder for this project's source files.</source>
          <target state="translated">이 프로젝트 소스 파일의 루트 폴더</target>
        </trans-unit>
        <trans-unit id="b1ec0372f1cddf50e90c0a7dde345a963fecb42f" translate="yes" xml:space="preserve">
          <source>The root module is all you need in a simple application with a few components. As the app grows, you refactor the root module into &lt;a href=&quot;feature-modules&quot;&gt;feature modules&lt;/a&gt; that represent collections of related functionality. You then import these modules into the root module.</source>
          <target state="translated">루트 모듈은 몇 가지 구성 요소가있는 간단한 응용 프로그램에 필요한 모든 것입니다. 앱이 커지면 루트 모듈을 관련 기능 모음을 나타내는 &lt;a href=&quot;feature-modules&quot;&gt;기능 모듈&lt;/a&gt; 로 리팩터링합니다 . 그런 다음이 모듈을 루트 모듈로 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="da27980955945e04ad4a054ed93c8229a2cdc100" translate="yes" xml:space="preserve">
          <source>The root nodes for this embedded view.</source>
          <target state="translated">이 임베디드 뷰의 루트 노드입니다.</target>
        </trans-unit>
        <trans-unit id="3397f990a2e5dcb255a1ff4ae7da260d1d6f2244" translate="yes" xml:space="preserve">
          <source>The root of the problem is at least one of the components involved in the test specifies an external template or CSS file as the following version of the &lt;code&gt;BannerComponent&lt;/code&gt; does.</source>
          <target state="translated">문제의 근본 원인은 테스트에 포함 된 구성 요소 중 하나 이상이 다음 버전의 &lt;code&gt;BannerComponent&lt;/code&gt; 와 같이 외부 템플릿 또는 CSS 파일을 지정한다는 것 입니다.</target>
        </trans-unit>
        <trans-unit id="43d23a95dcd95d02fff170aa27124ad27dadf776" translate="yes" xml:space="preserve">
          <source>The root of the router state</source>
          <target state="translated">라우터 상태의 루트</target>
        </trans-unit>
        <trans-unit id="4972cd8af27405ae6af97b76c474d6f24b212689" translate="yes" xml:space="preserve">
          <source>The root of the router state.</source>
          <target state="translated">라우터 상태의 루트</target>
        </trans-unit>
        <trans-unit id="2877c97510f1f533a0813b5a4c64f21f27b1ea42" translate="yes" xml:space="preserve">
          <source>The root segment group of the URL tree</source>
          <target state="translated">URL 트리의 루트 세그먼트 그룹</target>
        </trans-unit>
        <trans-unit id="3c8a01ed9794c16c0a0e02ced63c7a78d14e47e4" translate="yes" xml:space="preserve">
          <source>The route array for the new configuration.</source>
          <target state="translated">새로운 구성을위한 경로 배열.</target>
        </trans-unit>
        <trans-unit id="bef3a96e68be9a7e3e4e120593f324d30c516bbd" translate="yes" xml:space="preserve">
          <source>The route configuration to provide.</source>
          <target state="translated">제공 할 경로 구성입니다.</target>
        </trans-unit>
        <trans-unit id="c73d7a5fdb6e04fbea56a19afdcaf95a1328d979" translate="yes" xml:space="preserve">
          <source>The route configuration used for the route that contains the origin path.</source>
          <target state="translated">출발지 경로가 포함 된 경로에 사용되는 경로 구성입니다.</target>
        </trans-unit>
        <trans-unit id="4e196abefd449c7a38cdaa9e24641456ced4d25e" translate="yes" xml:space="preserve">
          <source>The route parameters correspond to the path variables defined in the route. The &lt;code&gt;productId&lt;/code&gt; is provided from the URL that was matched to the route. You use the &lt;code&gt;productId&lt;/code&gt; to display the details for each unique product.</source>
          <target state="translated">경로 매개 변수는 경로에 정의 된 경로 변수에 해당합니다. &lt;code&gt;productId&lt;/code&gt; 에이 경로에 일치 된 URL에서 제공됩니다. &lt;code&gt;productId&lt;/code&gt; 를 사용하여 각 고유 제품에 대한 세부 사항을 표시합니다.</target>
        </trans-unit>
        <trans-unit id="66d3701516f8bcdfaf06a82d17fcdba4c47e9b5a" translate="yes" xml:space="preserve">
          <source>The route path and parameters are available through an injected router service called the &lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;. It has a great deal of useful information including:</source>
          <target state="translated">경로 경로 및 매개 변수는 &lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt; 라는 주입 된 라우터 서비스를 통해 사용할 수 있습니다 . 다음과 같은 유용한 정보가 많이 있습니다.</target>
        </trans-unit>
        <trans-unit id="d1f012c5745d0ca7adf488982b001bebc88d2038" translate="yes" xml:space="preserve">
          <source>The route path for a lazy-loaded module. When supplied, creates a component in the new module, and adds the route to that component in the &lt;code&gt;&lt;a href=&quot;../api/router/routes&quot;&gt;Routes&lt;/a&gt;&lt;/code&gt; array declared in the module provided in the &lt;code&gt;--module&lt;/code&gt; option.</source>
          <target state="translated">지연로드 된 모듈의 경로입니다. 제공되면 새 모듈에 구성 요소를 만들고 &lt;code&gt;--module&lt;/code&gt; 옵션에 제공된 모듈에 선언 된 &lt;code&gt;&lt;a href=&quot;../api/router/routes&quot;&gt;Routes&lt;/a&gt;&lt;/code&gt; 배열의 해당 구성 요소에 경로를 추가합니다 .</target>
        </trans-unit>
        <trans-unit id="f851c13eed7f013f3276fc1f09b0556e9f7b748d" translate="yes" xml:space="preserve">
          <source>The route to consider.</source>
          <target state="translated">고려해야 할 경로.</target>
        </trans-unit>
        <trans-unit id="e5fc4b54a42e423066458d8e19e63d73e48616e9" translate="yes" xml:space="preserve">
          <source>The route's parent &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; when this route is a &lt;a href=&quot;router#child-routing-component&quot;&gt;child route&lt;/a&gt;.</source>
          <target state="translated">이 경로가 &lt;a href=&quot;router#child-routing-component&quot;&gt;자식 경로 인&lt;/a&gt; 경우 경로의 부모 &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="ff45d5a87a74679f399b1959935f568d12a35bbf" translate="yes" xml:space="preserve">
          <source>The router &lt;code&gt;navigate&lt;/code&gt; method takes the same one-item &lt;em&gt;link parameters array&lt;/em&gt; that you can bind to a &lt;code&gt;[&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;]&lt;/code&gt; directive. It holds the &lt;em&gt;path to the &lt;code&gt;HeroListComponent&lt;/code&gt;&lt;/em&gt;:</source>
          <target state="translated">router &lt;code&gt;navigate&lt;/code&gt; 메소드는 &lt;code&gt;[&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;]&lt;/code&gt; &lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt; ] 지시문에 바인드 할 수 있는 것과 동일한 단일 항목 &lt;em&gt;링크 매개 변수 배열&lt;/em&gt; 을 사용합니다 . &lt;em&gt; &lt;code&gt;HeroListComponent&lt;/code&gt; 에&lt;/em&gt; 대한 &lt;em&gt;경로를&lt;/em&gt; 유지합니다 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e6adcc63174d5c2a81f7c61ec96d14f7c1aa0c0c" translate="yes" xml:space="preserve">
          <source>The router adds the lazy module's providers and the providers of its imported NgModules to this child injector.</source>
          <target state="translated">라우터는 게으른 모듈의 공급자와 가져온 NgModules의 공급자를이 하위 인젝터에 추가합니다.</target>
        </trans-unit>
        <trans-unit id="464e7a2dded2eb7cef76bc15857f7a52ef5cb36b" translate="yes" xml:space="preserve">
          <source>The router assumed that your route specification targeted the &lt;em&gt;unnamed&lt;/em&gt; primary outlet and created these objects for you.</source>
          <target state="translated">라우터는 경로 지정이 &lt;em&gt;이름&lt;/em&gt; 이 &lt;em&gt;지정되지 않은&lt;/em&gt; 기본 콘센트를 대상으로하고 이러한 개체를 생성 했다고 가정했습니다 .</target>
        </trans-unit>
        <trans-unit id="86314416e2f5eb8bbfe8d314a88dba892d7a1414" translate="yes" xml:space="preserve">
          <source>The router calls the &lt;code&gt;preload&lt;/code&gt; method with two arguments:</source>
          <target state="translated">라우터는 두 가지 인수로 프리 &lt;code&gt;preload&lt;/code&gt; 메소드를 호출합니다 .</target>
        </trans-unit>
        <trans-unit id="0b7b212269847557351f8b5a3f629304f4a10730" translate="yes" xml:space="preserve">
          <source>The router composes the destination URL from the array like this: &lt;code&gt;localhost:4200/hero/15&lt;/code&gt;.</source>
          <target state="translated">라우터는이 같은 배열에서 대상 URL을 구성 : &lt;code&gt;localhost:4200/hero/15&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3e64c73914c5847d2de53b2cd6e0ad0774bfb328" translate="yes" xml:space="preserve">
          <source>The router defines navigation among views on a single page, as opposed to navigation among pages. It interprets URL-like links to determine which views to create or destroy, and which components to load or unload. It allows you to take advantage of &lt;a href=&quot;glossary#lazy-load&quot;&gt;lazy loading&lt;/a&gt; in your Angular apps.</source>
          <target state="translated">라우터는 페이지 간 탐색과 달리 단일 페이지에서보기 간 탐색을 정의합니다. URL과 유사한 링크를 해석하여 작성 또는 제거 할보기와로드 또는 언로드 할 구성 요소를 판별합니다. Angular 앱에서 &lt;a href=&quot;glossary#lazy-load&quot;&gt;지연 로딩&lt;/a&gt; 을 활용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c17670c71f8c023ad90633a12d89c42440504772" translate="yes" xml:space="preserve">
          <source>The router displays the components of these routes in the &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; of the &lt;code&gt;CrisisCenterComponent&lt;/code&gt;, not in the &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; of the &lt;code&gt;AppComponent&lt;/code&gt; shell.</source>
          <target state="translated">라우터 표시에이 노선의 구성 요소 &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; 의 &lt;code&gt;CrisisCenterComponent&lt;/code&gt; 아니라에서, &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; 의 &lt;code&gt;AppComponent&lt;/code&gt; 쉘.</target>
        </trans-unit>
        <trans-unit id="5c928e0d20717c8c5f4b3a4efd2288875d0f9b06" translate="yes" xml:space="preserve">
          <source>The router draws upon its registry of definitions when the browser URL changes or when application code tells the router to navigate along a route path.</source>
          <target state="translated">라우터는 브라우저 URL이 변경되거나 애플리케이션 코드가 라우터에게 경로 경로를 탐색하도록 지시 할 때 정의 레지스트리를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="a093fc77d863ec9bd9a835484c18df4bd2839243" translate="yes" xml:space="preserve">
          <source>The router embedded the &lt;code&gt;id&lt;/code&gt; value in the navigation URL because you had defined it as a route parameter with an &lt;code&gt;:id&lt;/code&gt; placeholder token in the route &lt;code&gt;path&lt;/code&gt;:</source>
          <target state="translated">라우터 는 경로 &lt;code&gt;path&lt;/code&gt; 에 &lt;code&gt;:id&lt;/code&gt; 자리 표시 자 토큰을 사용하여 경로 매개 변수로 정의했기 때문에 탐색 URL에 &lt;code&gt;id&lt;/code&gt; 값을 포함했습니다 .</target>
        </trans-unit>
        <trans-unit id="0703ea253b9b207877f837c0ebf348dabd5b539b" translate="yes" xml:space="preserve">
          <source>The router extracts the route parameter (&lt;code&gt;id:15&lt;/code&gt;) from the URL and supplies it to the &lt;code&gt;HeroDetailComponent&lt;/code&gt; via the &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; service.</source>
          <target state="translated">라우터는 URL에서 경로 매개 변수 ( &lt;code&gt;id:15&lt;/code&gt; )를 추출 하여 &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; 서비스 를 통해 이를 &lt;code&gt;HeroDetailComponent&lt;/code&gt; 에 제공합니다.</target>
        </trans-unit>
        <trans-unit id="36f288f65a85dc5f52b243320808ca5d7d00fb50" translate="yes" xml:space="preserve">
          <source>The router interprets a link URL according to your app's view navigation rules and data state. You can navigate to new views when the user clicks a button or selects from a drop box, or in response to some other stimulus from any source. The router logs activity in the browser's history, so the back and forward buttons work as well.</source>
          <target state="translated">라우터는 앱의보기 탐색 규칙 및 데이터 상태에 따라 링크 URL을 해석합니다. 사용자가 버튼을 클릭하거나 드롭 상자에서 선택하거나 소스의 다른 자극에 대한 응답으로 새보기로 이동할 수 있습니다. 라우터는 브라우저 기록에 활동을 기록하므로 뒤로 및 앞으로 단추도 작동합니다.</target>
        </trans-unit>
        <trans-unit id="40f94c674310a595511f95be3e481296d4f01b3b" translate="yes" xml:space="preserve">
          <source>The router is keeping track of two separate branches in a navigation tree and generating a representation of that tree in the URL.</source>
          <target state="translated">라우터는 탐색 트리에서 두 개의 개별 분기를 추적하고 URL에서 해당 트리의 표현을 생성합니다.</target>
        </trans-unit>
        <trans-unit id="6f1fff5319d8f72c72ec0476e40e8b1da2d77ed9" translate="yes" xml:space="preserve">
          <source>The router link directive always treats the provided input as a delta to the current url.</source>
          <target state="translated">라우터 링크 지시문은 항상 제공된 입력을 현재 URL의 델타로 취급합니다.</target>
        </trans-unit>
        <trans-unit id="170614389397ec9d97f973262e58d5663453a227" translate="yes" xml:space="preserve">
          <source>The router maps URL-like paths to views instead of pages. When a user performs an action, such as clicking a link, that would load a new page in the browser, the router intercepts the browser's behavior, and shows or hides view hierarchies.</source>
          <target state="translated">라우터는 URL이 아닌 경로를 페이지 대신보기에 매핑합니다. 사용자가 링크 클릭과 같은 작업을 수행하여 브라우저에 새 페이지를로드하면 라우터는 브라우저의 동작을 가로 채서보기 계층을 표시하거나 숨 깁니다.</target>
        </trans-unit>
        <trans-unit id="45c7188ec7a83f5f718d2d88747d152f1b97733f" translate="yes" xml:space="preserve">
          <source>The router matches such &lt;em&gt;absolute&lt;/em&gt; paths to routes starting from the top of the route configuration.</source>
          <target state="translated">라우터는 이러한 &lt;em&gt;절대&lt;/em&gt; 경로를 경로 구성의 맨 위에서 시작하여 경로 와 일치 시킵니다.</target>
        </trans-unit>
        <trans-unit id="05d009d175fdb7f12138aac1b07043d6aa4d44ba" translate="yes" xml:space="preserve">
          <source>The router merges the parameters, data, and resolve of the componentless parent into the parameters, data, and resolve of the children.</source>
          <target state="translated">라우터는 구성 요소가없는 부모의 매개 변수, 데이터 및 확인을 하위의 매개 변수, 데이터 및 확인으로 병합합니다.</target>
        </trans-unit>
        <trans-unit id="67b6bd438f9d975bb93513d155cfcc4f597fa576" translate="yes" xml:space="preserve">
          <source>The router module navigates among your app pages when the browser URL changes. For more information, see &lt;a href=&quot;router&quot;&gt;Routing and Navigation&lt;/a&gt;.</source>
          <target state="translated">브라우저 URL이 변경되면 라우터 모듈이 앱 페이지를 탐색합니다. 자세한 내용은 &lt;a href=&quot;router&quot;&gt;라우팅 및 탐색을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="be14d8494a5c5cba61dae579b492b85dc78e0eca" translate="yes" xml:space="preserve">
          <source>The router outlet serves as a placeholder when the routed components will be rendered below it.</source>
          <target state="translated">라우터 콘센트는 라우팅 된 구성 요소가 그 아래에 렌더링 될 때 자리 표시 자 역할을합니다.</target>
        </trans-unit>
        <trans-unit id="736e289b0385ec3ddda27eea926de4105245493a" translate="yes" xml:space="preserve">
          <source>The router selects the route with a &lt;a href=&quot;router#example-config&quot;&gt;&lt;em&gt;first match wins&lt;/em&gt;&lt;/a&gt; strategy. Wildcard routes are the least specific routes in the route configuration. Be sure it is the &lt;em&gt;last&lt;/em&gt; route in the configuration.</source>
          <target state="translated">라우터는 &lt;a href=&quot;router#example-config&quot;&gt;&lt;em&gt;첫 경기 승리&lt;/em&gt;&lt;/a&gt; 전략으로 경로를 선택합니다 . 와일드 카드 경로는 경로 구성에서 가장 구체적인 경로입니다. 구성 의 &lt;em&gt;마지막&lt;/em&gt; 경로 인지 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="e483aae32dfdd13e3ceb796d853bc5f1c51b3ffb" translate="yes" xml:space="preserve">
          <source>The router sets the &lt;code&gt;&lt;a href=&quot;../api/router/route#canLoad&quot;&gt;canLoad&lt;/a&gt;()&lt;/code&gt; method's &lt;code&gt;route&lt;/code&gt; parameter to the intended destination URL. The &lt;code&gt;checkLogin()&lt;/code&gt; method redirects to that URL once the user has logged in.</source>
          <target state="translated">라우터는 &lt;code&gt;&lt;a href=&quot;../api/router/route#canLoad&quot;&gt;canLoad&lt;/a&gt;()&lt;/code&gt; 메소드의 &lt;code&gt;route&lt;/code&gt; 매개 변수를 원하는 도착 URL로 설정합니다. &lt;code&gt;checkLogin()&lt;/code&gt; 사용자가 한 번 그 URL에 대한 방법 리디렉션은 로그인 한.</target>
        </trans-unit>
        <trans-unit id="ed56f7656ac08b3e0ee8155fb0a3581dada87c03" translate="yes" xml:space="preserve">
          <source>The router supports both styles with two &lt;code&gt;&lt;a href=&quot;../api/common/locationstrategy&quot;&gt;LocationStrategy&lt;/a&gt;&lt;/code&gt; providers:</source>
          <target state="translated">라우터는 두 가지 &lt;code&gt;&lt;a href=&quot;../api/common/locationstrategy&quot;&gt;LocationStrategy&lt;/a&gt;&lt;/code&gt; 공급자를 사용 하여 두 가지 스타일을 모두 지원합니다 .</target>
        </trans-unit>
        <trans-unit id="a62638a6e21e4759de70853b67830c5266f6a0ab" translate="yes" xml:space="preserve">
          <source>The router supports directory-like syntax in a &lt;em&gt;link parameters list&lt;/em&gt; to help guide route name lookup:</source>
          <target state="translated">라우터는 경로 이름 조회를 안내하기 위해 &lt;em&gt;링크 매개 변수 목록&lt;/em&gt; 에서 디렉토리와 같은 구문 을 지원합니다.</target>
        </trans-unit>
        <trans-unit id="8bf5781b34bee9259b2e2f8cf4416f1697ff1181" translate="yes" xml:space="preserve">
          <source>The router supports multiple guard interfaces:</source>
          <target state="translated">라우터는 여러 가드 인터페이스를 지원합니다.</target>
        </trans-unit>
        <trans-unit id="c0bca771ad18c103f1c47fc1e5a1d2836da9bf81" translate="yes" xml:space="preserve">
          <source>The router supports navigation with optional parameters as well as required route parameters. Define &lt;em&gt;optional&lt;/em&gt; parameters in a separate object &lt;em&gt;after&lt;/em&gt; you define the required route parameters.</source>
          <target state="translated">라우터는 필수 경로 매개 변수뿐만 아니라 선택적 매개 변수가있는 탐색을 지원합니다. 정의 &lt;em&gt;옵션&lt;/em&gt; 별도의 개체에 매개 변수를 &lt;em&gt;한 후&lt;/em&gt; 당신이 필요한 경로 매개 변수를 정의합니다.</target>
        </trans-unit>
        <trans-unit id="b44e894ea1b945e0628e82828fbe796cf336ea56" translate="yes" xml:space="preserve">
          <source>The router uses the browser's &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/History_API#Adding_and_modifying_history_entries&quot;&gt;history.pushState&lt;/a&gt; for navigation. Thanks to &lt;code&gt;pushState&lt;/code&gt;, you can make in-app URL paths look the way you want them to look, e.g. &lt;code&gt;localhost:4200/crisis-center&lt;/code&gt;. The in-app URLs can be indistinguishable from server URLs.</source>
          <target state="translated">라우터는 탐색을 위해 브라우저의 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/History_API#Adding_and_modifying_history_entries&quot;&gt;history.pushState&lt;/a&gt; 를 사용합니다 . &lt;code&gt;pushState&lt;/code&gt; 덕분에 인앱 URL 경로가 원하는 방식으로 보이도록 할 수 있습니다 (예 : &lt;code&gt;localhost:4200/crisis-center&lt;/code&gt; ) . 인앱 URL은 서버 URL과 구별 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="53d9befd3cd261f060f5decb29960135724d8489" translate="yes" xml:space="preserve">
          <source>The router works at the root level so if you put providers in a component, even &lt;code&gt;AppComponent&lt;/code&gt;, lazy loaded modules, which rely on the router, can&amp;rsquo;t see them.</source>
          <target state="translated">라우터는 루트 수준에서 작동하므로 공급자를 구성 요소에 &lt;code&gt;AppComponent&lt;/code&gt; 라우터에 의존하는 게으른로드 된 모듈 인 AppComponent 조차도 볼 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="0ba9dade3e3b9ffdda20ce10c97f537f8ff12442" translate="yes" xml:space="preserve">
          <source>The router's &lt;code&gt;&lt;a href=&quot;../api/router/resolve&quot;&gt;Resolve&lt;/a&gt;&lt;/code&gt; interface is optional. The &lt;code&gt;CrisisDetailResolverService&lt;/code&gt; doesn't inherit from a base class. The router looks for that method and calls it if found.</source>
          <target state="translated">라우터의 &lt;code&gt;&lt;a href=&quot;../api/router/resolve&quot;&gt;Resolve&lt;/a&gt;&lt;/code&gt; 인터페이스는 선택 사항입니다. &lt;code&gt;CrisisDetailResolverService&lt;/code&gt; 는 기본 클래스에서 상속하지 않습니다. 라우터는 해당 메소드를 찾고 발견되면이를 호출합니다.</target>
        </trans-unit>
        <trans-unit id="40bd61970480593d5a81861e4cee600f3fafc0bf" translate="yes" xml:space="preserve">
          <source>The routes are no longer in one file. They are distributed across two modules, &lt;code&gt;AppRoutingModule&lt;/code&gt; and &lt;code&gt;HeroesRoutingModule&lt;/code&gt;.</source>
          <target state="translated">경로가 더 이상 하나의 파일에 없습니다. &lt;code&gt;AppRoutingModule&lt;/code&gt; 및 &lt;code&gt;HeroesRoutingModule&lt;/code&gt; 의 두 모듈에 분산되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="c8bfeafd59576a5466c5d56c7ed9d1a4b51bcaed" translate="yes" xml:space="preserve">
          <source>The running application displays three heroes:</source>
          <target state="translated">실행중인 응용 프로그램에는 세 가지 영웅이 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="d2037d2f70edf3081cd81efee594d118f23f5b88" translate="yes" xml:space="preserve">
          <source>The safe navigation operator ( &lt;code&gt;?&lt;/code&gt; ) and null property paths</source>
          <target state="translated">안전한 탐색 연산자 ( &lt;code&gt;?&lt;/code&gt; ) 및 null 속성 경로</target>
        </trans-unit>
        <trans-unit id="e085db54661fcc65281a95cf0450e05e179ee59e" translate="yes" xml:space="preserve">
          <source>The safe navigation operator (&lt;code&gt;?&lt;/code&gt;) means that the &lt;code&gt;employer&lt;/code&gt; field is optional and if &lt;code&gt;undefined&lt;/code&gt;, the rest of the expression should be ignored.</source>
          <target state="translated">안전 탐색 연산자 ( &lt;code&gt;?&lt;/code&gt; )는 &lt;code&gt;employer&lt;/code&gt; 필드가 선택 사항이며 &lt;code&gt;undefined&lt;/code&gt; 경우 나머지 표현식은 무시해야 함을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="59c72d8464ed8d8df3745406023437ff7ed29782" translate="yes" xml:space="preserve">
          <source>The safest way to get the injected service, the way that &lt;strong&gt;&lt;em&gt;always works&lt;/em&gt;&lt;/strong&gt;, is to &lt;strong&gt;get it from the injector of the &lt;em&gt;component-under-test&lt;/em&gt;&lt;/strong&gt;. The component injector is a property of the fixture's &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;항상 작동&lt;/em&gt;&lt;/strong&gt; 하는 방식으로 주입 된 서비스를 얻는 가장 안전한 방법 은 &lt;strong&gt;&lt;em&gt;테스트 대상 구성 요소&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt; 의 인젝터에서 얻는 것입니다&lt;em&gt;&lt;/em&gt;&lt;/strong&gt; . 컴포넌트 인젝터는 조명기의 &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; 속성입니다 .</target>
        </trans-unit>
        <trans-unit id="939660064b29633f3b868d36327576ca89ac09ec" translate="yes" xml:space="preserve">
          <source>The same built-in validators that are available as attributes in template-driven forms, such as &lt;code&gt;required&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/forms/minlengthvalidator&quot;&gt;minlength&lt;/a&gt;&lt;/code&gt;, are all available to use as functions from the &lt;code&gt;&lt;a href=&quot;../api/forms/validators&quot;&gt;Validators&lt;/a&gt;&lt;/code&gt; class. For a full list of built-in validators, see the &lt;a href=&quot;../api/forms/validators&quot;&gt;Validators&lt;/a&gt; API reference.</source>
          <target state="translated">&lt;code&gt;required&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;../api/forms/minlengthvalidator&quot;&gt;minlength&lt;/a&gt;&lt;/code&gt; 와 같은 템플리트 기반 양식의 속성으로 사용 가능한 동일한 내장 유효성 검증 기가 &lt;code&gt;&lt;a href=&quot;../api/forms/validators&quot;&gt;Validators&lt;/a&gt;&lt;/code&gt; 클래스의 함수로 사용 가능합니다 . 의 전체 목록은 내장 유효성 검사기는 참조 &lt;a href=&quot;../api/forms/validators&quot;&gt;검사기의&lt;/a&gt; API 참조.</target>
        </trans-unit>
        <trans-unit id="067302b47e77195f2f26c14e3937a22efcc89d72" translate="yes" xml:space="preserve">
          <source>The same configuration options can also be provided through the CLI with your existing &lt;code&gt;production&lt;/code&gt; configuration.</source>
          <target state="translated">기존 &lt;code&gt;production&lt;/code&gt; 구성 과 함께 CLI를 통해 동일한 구성 옵션을 제공 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="16cde22da225d9a04d00eca0b15817fbe6af3692" translate="yes" xml:space="preserve">
          <source>The sample app and its translation file are now as follows:</source>
          <target state="translated">샘플 앱과 번역 파일은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="2018f14311878602d2320f5e56ba6ac75859ef04" translate="yes" xml:space="preserve">
          <source>The sample app does not require a data server. It relies on the &lt;a href=&quot;https://github.com/angular/in-memory-web-api/blob/master/README.md&quot;&gt;Angular &lt;em&gt;in-memory-web-api&lt;/em&gt;&lt;/a&gt;, which replaces the &lt;em&gt;HttpClient&lt;/em&gt; module's &lt;code&gt;&lt;a href=&quot;../api/common/http/httpbackend&quot;&gt;HttpBackend&lt;/a&gt;&lt;/code&gt;. The replacement service simulates the behavior of a REST-like backend.</source>
          <target state="translated">샘플 앱에는 데이터 서버가 필요하지 않습니다. &lt;em&gt;HttpClient&lt;/em&gt; 모듈의 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpbackend&quot;&gt;HttpBackend&lt;/a&gt;&lt;/code&gt; 를 대체 하는 &lt;a href=&quot;https://github.com/angular/in-memory-web-api/blob/master/README.md&quot;&gt;Angular &lt;em&gt;in-memory-web-api&lt;/em&gt;&lt;/a&gt; 에 의존 합니다. 교체 서비스는 REST 유사 백엔드의 동작을 시뮬레이션합니다.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="d9639d7d5642ac0cfa45c5189886107eb05e6058" translate="yes" xml:space="preserve">
          <source>The sample app for this guide doesn't have a server that accepts uploaded files. The &lt;code&gt;UploadInterceptor&lt;/code&gt; in &lt;code&gt;app/http-interceptors/upload-interceptor.ts&lt;/code&gt; intercepts and short-circuits upload requests by returning an observable of simulated events.</source>
          <target state="translated">이 가이드의 샘플 앱에는 업로드 된 파일을 허용하는 서버가 없습니다. &lt;code&gt;UploadInterceptor&lt;/code&gt; 에서 &lt;code&gt;app/http-interceptors/upload-interceptor.ts&lt;/code&gt; 차단 및 시뮬레이션 이벤트의 관찰을 반환하여 단락 업로드 요청.</target>
        </trans-unit>
        <trans-unit id="18a8f2d6b2521db5c000b09605bd6653cdd054b3" translate="yes" xml:space="preserve">
          <source>The sample app for this guide includes a simplified version of the &quot;Tour of Heroes&quot; example that fetches heroes and enables users to add, delete, and update them.</source>
          <target state="translated">이 안내서의 샘플 앱에는 영웅을 가져오고 사용자가 추가, 삭제 및 업데이트 할 수있는 &quot;Tour of Heroes&quot;예제의 단순화 된 버전이 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="006cff79a45782fa6207fcb043d6c24706576a90" translate="yes" xml:space="preserve">
          <source>The sample app has an &lt;code&gt;AuthService&lt;/code&gt; that produces an authorization token. Here is its &lt;code&gt;AuthInterceptor&lt;/code&gt; that injects that service to get the token and adds an authorization header with that token to every outgoing request:</source>
          <target state="translated">샘플 앱에는 인증 토큰을 생성하는 &lt;code&gt;AuthService&lt;/code&gt; 가 있습니다. 다음은 해당 서비스에 토큰을 가져 오기 위해 해당 &lt;code&gt;AuthInterceptor&lt;/code&gt; 를 작성하고 해당 토큰이있는 인증 헤더를 모든 발신 요청에 추가합니다.</target>
        </trans-unit>
        <trans-unit id="4b25f5e76871ab40b71bff3adfc28a5e339486c0" translate="yes" xml:space="preserve">
          <source>The sample app imports &lt;code&gt;GreetingModule&lt;/code&gt; and uses its &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; method one time, in &lt;code&gt;AppModule&lt;/code&gt;. Registering it once like this prevents multiple instances.</source>
          <target state="translated">샘플 앱 은 &lt;code&gt;GreetingModule&lt;/code&gt; 을 가져오고 &lt;code&gt;AppModule&lt;/code&gt; 에서 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; 메서드를 한 번 사용합니다 . 이와 같이 한 번 등록하면 여러 인스턴스가 방지됩니다.</target>
        </trans-unit>
        <trans-unit id="bbdc02b77eadf3cafece29a3b6adb0bfb784c563" translate="yes" xml:space="preserve">
          <source>The sample application</source>
          <target state="translated">샘플 애플리케이션</target>
        </trans-unit>
        <trans-unit id="3bad0c6f1f3a97ac6c5ed1daf3fec0440d87ec3a" translate="yes" xml:space="preserve">
          <source>The sample application doesn't talk to a server. Fortunately, you have another way to demonstrate an asynchronous router hook.</source>
          <target state="translated">샘플 응용 프로그램이 서버와 통신하지 않습니다. 다행히 비동기 라우터 후크를 시연하는 또 다른 방법이 있습니다.</target>
        </trans-unit>
        <trans-unit id="2103219c7d79a26e0ff1f6660f7abac30fdaafba" translate="yes" xml:space="preserve">
          <source>The sample application in action</source>
          <target state="translated">작동중인 샘플 애플리케이션</target>
        </trans-unit>
        <trans-unit id="1127033a52632203fbf3f5f1079ad39c14f5ea44" translate="yes" xml:space="preserve">
          <source>The sample application's &lt;code&gt;HighlightDirective&lt;/code&gt; sets the background color of an element based on either a data bound color or a default color (lightgray). It also sets a custom property of the element (&lt;code&gt;customProperty&lt;/code&gt;) to &lt;code&gt;true&lt;/code&gt; for no reason other than to show that it can.</source>
          <target state="translated">샘플 응용 프로그램의 &lt;code&gt;HighlightDirective&lt;/code&gt; 는 데이터 바인딩 색상 또는 기본 색상 (밝은 회색)을 기준으로 요소의 배경 색상을 설정합니다. 또한 요소 ( &lt;code&gt;customProperty&lt;/code&gt; ) 의 사용자 정의 특성 을 표시 할 수있는 것 이외의 다른 이유없이 &lt;code&gt;true&lt;/code&gt; 로 설정 합니다 .</target>
        </trans-unit>
        <trans-unit id="dc8fd67bc712a242a84db80063d64dc1c8dbd84a" translate="yes" xml:space="preserve">
          <source>The sample code applies the directive's &lt;code&gt;myHighlight&lt;/code&gt; attribute to two &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; tags, first without a value (yielding the default color) and then with an assigned color value.</source>
          <target state="translated">샘플 코드는 지시문의 &lt;code&gt;myHighlight&lt;/code&gt; 속성을 두 개의 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 태그에 적용합니다 (먼저 값이없는 (기본 색상 수)) 그리고 지정된 색상 값이 있습니다.</target>
        </trans-unit>
        <trans-unit id="6231d5bf243f4874525430c1c1584ebea7435e57" translate="yes" xml:space="preserve">
          <source>The sample in this guide uses the default XLIFF 1.2 format.</source>
          <target state="translated">이 안내서의 샘플은 기본 XLIFF 1.2 형식을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="180848306acfa9ca7d56cebe3f38672d87a67bb8" translate="yes" xml:space="preserve">
          <source>The sample includes an &lt;em&gt;npm package search&lt;/em&gt; feature.</source>
          <target state="translated">이 샘플에는 &lt;em&gt;npm 패키지 검색&lt;/em&gt; 기능이 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="845d81bff91c35f9ca3a0e8902c70651cdbae3e9" translate="yes" xml:space="preserve">
          <source>The sample routing application does not include routing by default. When you use the &lt;a href=&quot;cli&quot;&gt;Angular CLI&lt;/a&gt; to create a project that will use routing, set the &lt;code&gt;--routing&lt;/code&gt; option for the project or app, and for each NgModule. When you create or initialize a new project (using the CLI &lt;a href=&quot;cli/new&quot;&gt;&lt;code&gt;ng new&lt;/code&gt;&lt;/a&gt; command) or a new app (using the &lt;a href=&quot;cli/generate&quot;&gt;&lt;code&gt;ng generate app&lt;/code&gt;&lt;/a&gt; command), specify the &lt;code&gt;--routing&lt;/code&gt; option. This tells the CLI to include the &lt;code&gt;@angular/router&lt;/code&gt; npm package and create a file named &lt;code&gt;app-routing.module.ts&lt;/code&gt;. You can then use routing in any NgModule that you add to the project or app.</source>
          <target state="translated">샘플 라우팅 응용 프로그램에는 기본적으로 라우팅이 포함되어 있지 않습니다. 당신이 사용하는 경우 &lt;a href=&quot;cli&quot;&gt;각도 CLI를&lt;/a&gt; 라우팅 사용하는 프로젝트를 만들려면 설정 &lt;code&gt;--routing&lt;/code&gt; 프로젝트 또는 앱에 대한 옵션을 각 NgModule합니다. CLI &lt;a href=&quot;cli/new&quot;&gt; &lt;code&gt;ng new&lt;/code&gt; &lt;/a&gt; 명령을 사용하여 새 프로젝트 또는 &lt;a href=&quot;cli/generate&quot;&gt; &lt;code&gt;ng generate app&lt;/code&gt; &lt;/a&gt; 명령을 사용하여 새 프로젝트를 작성하거나 초기화 할 때 &lt;code&gt;--routing&lt;/code&gt; 옵션을 지정하십시오 . CLI에 &lt;code&gt;@angular/router&lt;/code&gt; npm 패키지 를 포함하고 &lt;code&gt;app-routing.module.ts&lt;/code&gt; 라는 파일을 만들 도록 CLI에 지시합니다 . 그런 다음 프로젝트 또는 앱에 추가 한 모든 NgModule에서 라우팅을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="48715b36d405c3c723bb6e1a83d110dfa8e48522" translate="yes" xml:space="preserve">
          <source>The sample source code for this page, located in &lt;code&gt;context/examples/docs-style-guide&lt;/code&gt;, contains examples of every code snippet markup described in this section.</source>
          <target state="translated">&lt;code&gt;context/examples/docs-style-guide&lt;/code&gt; 에있는이 페이지의 샘플 소스 코드 에는이 섹션에서 설명하는 모든 코드 스 니펫 마크 업의 예가 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="f97b4d7dd36c622166d42d22b9b96141f0cd7661" translate="yes" xml:space="preserve">
          <source>The sample web server for this guide is based on the popular &lt;a href=&quot;https://expressjs.com/&quot;&gt;Express&lt;/a&gt; framework.</source>
          <target state="translated">이 가이드의 샘플 웹 서버는 널리 사용되는 &lt;a href=&quot;https://expressjs.com/&quot;&gt;Express&lt;/a&gt; 프레임 워크를 기반으로합니다 .</target>
        </trans-unit>
        <trans-unit id="f1d88c2387cd1e3449b58fad506e327b13a8cf48" translate="yes" xml:space="preserve">
          <source>The sample's &lt;code&gt;CraigComponent&lt;/code&gt; explores this question. &lt;a href=&quot;dependency-injection-navtree#alex&quot;&gt;Looking back&lt;/a&gt;, you see that the &lt;code&gt;Alex&lt;/code&gt; component &lt;em&gt;extends&lt;/em&gt; (&lt;em&gt;inherits&lt;/em&gt;) from a class named &lt;code&gt;Base&lt;/code&gt;.</source>
          <target state="translated">샘플의 &lt;code&gt;CraigComponent&lt;/code&gt; 가이 질문을 탐구합니다. &lt;a href=&quot;dependency-injection-navtree#alex&quot;&gt;다시 찾고&lt;/a&gt; , 당신은 볼 &lt;code&gt;Alex&lt;/code&gt; 구성 요소를 &lt;em&gt;확장&lt;/em&gt; ( &lt;em&gt;상속을&lt;/em&gt; 라는 클래스에서) &lt;code&gt;Base&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b7f1caebac3561b1bd11adb25a659f920576c1e5" translate="yes" xml:space="preserve">
          <source>The schema defines the types and default values of variables used in the schematic. For example, the hypothetical &quot;Hello World&quot; schematic might have the following schema.</source>
          <target state="translated">스키마는 회로도에 사용 된 변수의 유형과 기본값을 정의합니다. 예를 들어, 가상 &quot;Hello World&quot;회로도에는 다음과 같은 스키마가있을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="28cbf3d458ff001f8ea8f2ca87d3187c8823c817" translate="yes" xml:space="preserve">
          <source>The schema for a &lt;code&gt;stackblitz.json&lt;/code&gt; hasn't been documented yet but looking at the &lt;code&gt;stackblitz.json&lt;/code&gt; files in the example folders should tell you most of what you need to know.</source>
          <target state="translated">&lt;code&gt;stackblitz.json&lt;/code&gt; 의 스키마는 아직 문서화되지 않았지만 예제 폴더에서 &lt;code&gt;stackblitz.json&lt;/code&gt; 파일을 보면 알아야 할 대부분의 정보가 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="4ddb5588b2b1fc36ef16d673582bc1ea813181ee" translate="yes" xml:space="preserve">
          <source>The schematic collection can be a powerful tool for creating, modifying, and maintaining any software project, but is particularly useful for customizing Angular projects to suit the particular needs of your own organization. You might use schematics, for example, to generate commonly-used UI patterns or specific components, using predefined templates or layouts. You can use schematics to enforce architectural rules and conventions, making your projects consistent and inter-operative.</source>
          <target state="translated">회로도 모음은 소프트웨어 프로젝트를 생성, 수정 및 유지 관리하는 강력한 도구 일 수 있지만 조직의 특정 요구에 맞게 Angular 프로젝트를 사용자 지정하는 데 특히 유용합니다. 예를 들어 회로도를 사용하여 사전 정의 된 템플릿 또는 레이아웃을 사용하여 일반적으로 사용되는 UI 패턴 또는 특정 구성 요소를 생성 할 수 있습니다. 회로도를 사용하여 건축 규칙 및 규칙을 적용하여 프로젝트를 일관되고 상호 운용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="93cfe4e4adbbfded84c6c8f071cc59a7887190fb" translate="yes" xml:space="preserve">
          <source>The schematic or collection:schematic to generate.</source>
          <target state="translated">생성 할 회로도 또는 컬렉션 : 회로도.</target>
        </trans-unit>
        <trans-unit id="644126d257f84f676df9b8c93031e7697e56a4cb" translate="yes" xml:space="preserve">
          <source>The scope for the new routing module.</source>
          <target state="translated">새로운 라우팅 모듈의 범위.</target>
        </trans-unit>
        <trans-unit id="5d45510eb393444a2c062d97a89bb09d19beb1e7" translate="yes" xml:space="preserve">
          <source>The scope of a reference variable is the entire template. So, don't define the same variable name more than once in the same template as the runtime value will be unpredictable.</source>
          <target state="translated">참조 변수의 범위는 전체 템플릿입니다. 따라서 런타임 값을 예측할 수 없으므로 동일한 템플릿에서 동일한 변수 이름을 두 번 이상 정의하지 마십시오.</target>
        </trans-unit>
        <trans-unit id="5760dd13dc5237be2a7e34da16871a6fc9a53718" translate="yes" xml:space="preserve">
          <source>The scope of the service instance is the parent component and its children. Components outside this component subtree have no access to the service or their communications.</source>
          <target state="translated">서비스 인스턴스의 범위는 부모 구성 요소와 그 자식입니다. 이 구성 요소 서브 트리 외부의 구성 요소는 서비스 또는 해당 통신에 액세스 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="ed54e7c3473aae483d10d6a344247055bd214d68" translate="yes" xml:space="preserve">
          <source>The scoping rules outlined earlier apply to each of these loading patterns.</source>
          <target state="translated">앞에서 설명한 범위 지정 규칙은 이러한 각로드 패턴에 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="6ca21198000899209ea533a19e8cd0f64d9427fc" translate="yes" xml:space="preserve">
          <source>The search box on the Dashboard page is ignored.</source>
          <target state="translated">대시 보드 페이지의 검색 상자는 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="42ac7068ce0b0eff086a7cd61efd10c482ea26ac" translate="yes" xml:space="preserve">
          <source>The search object</source>
          <target state="translated">검색 객체</target>
        </trans-unit>
        <trans-unit id="986d1babf2cbea214b8a121acd469431369cde38" translate="yes" xml:space="preserve">
          <source>The second &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; aliases the child component property name &lt;code&gt;masterName&lt;/code&gt; as &lt;code&gt;'master'&lt;/code&gt;.</source>
          <target state="translated">두 번째 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; 은 하위 구성 요소 특성 이름 &lt;code&gt;masterName&lt;/code&gt; 의 별명 을 &lt;code&gt;'master'&lt;/code&gt; 로 지정 합니다.</target>
        </trans-unit>
        <trans-unit id="890b72d0bae3cb1fcd8858dc63a35a3adb6d2b0e" translate="yes" xml:space="preserve">
          <source>The second and third test reveal an important limitation. The Angular testing environment does &lt;em&gt;not&lt;/em&gt; know that the test changed the component's &lt;code&gt;title&lt;/code&gt;. The &lt;code&gt;&lt;a href=&quot;../api/core/testing/componentfixtureautodetect&quot;&gt;ComponentFixtureAutoDetect&lt;/a&gt;&lt;/code&gt; service responds to &lt;em&gt;asynchronous activities&lt;/em&gt; such as promise resolution, timers, and DOM events. But a direct, synchronous update of the component property is invisible. The test must call &lt;code&gt;fixture.detectChanges()&lt;/code&gt; manually to trigger another cycle of change detection.</source>
          <target state="translated">두 번째 및 세 번째 테스트는 중요한 제한 사항을 나타냅니다. Angular 테스트 환경에서는 테스트 결과 구성 요소의 &lt;code&gt;title&lt;/code&gt; 변경되었음을 알 수 &lt;em&gt;없습니다&lt;/em&gt; . &lt;code&gt;&lt;a href=&quot;../api/core/testing/componentfixtureautodetect&quot;&gt;ComponentFixtureAutoDetect&lt;/a&gt;&lt;/code&gt; 에 대한 서비스 응답 &lt;em&gt;비동기 활동&lt;/em&gt; 등의 약속 해상도, 타이머 및 DOM 이벤트와 같은. 그러나 구성 요소 속성을 직접 동기식으로 업데이트하는 것은 보이지 않습니다. 테스트는 다른 변경 감지주기를 트리거하기 위해 &lt;code&gt;fixture.detectChanges()&lt;/code&gt; 수동으로 호출해야합니다 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="834aabaa20612a9062cae3e29b9e961cdcdb7ef5" translate="yes" xml:space="preserve">
          <source>The second argument in the &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt; method takes an object for additional configuration options. The &lt;code&gt;&lt;a href=&quot;../api/router/extraoptions#preloadingStrategy&quot;&gt;preloadingStrategy&lt;/a&gt;&lt;/code&gt; is one of those options. Add the &lt;code&gt;&lt;a href=&quot;../api/router/preloadallmodules&quot;&gt;PreloadAllModules&lt;/a&gt;&lt;/code&gt; token to the &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; call:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt; 메서드 의 두 번째 인수는 추가 구성 옵션에 대한 개체를 사용합니다. &lt;code&gt;&lt;a href=&quot;../api/router/extraoptions#preloadingStrategy&quot;&gt;preloadingStrategy&lt;/a&gt;&lt;/code&gt; 는 이러한 옵션 중 하나입니다. &lt;code&gt;&lt;a href=&quot;../api/router/preloadallmodules&quot;&gt;PreloadAllModules&lt;/a&gt;&lt;/code&gt; 토큰을 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; 호출에 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="67420eba778c81bceda710b2f41019a12b62d5ce" translate="yes" xml:space="preserve">
          <source>The second argument, &lt;code&gt;delay&lt;/code&gt;, has the same syntax as &lt;code&gt;duration&lt;/code&gt;. For example:</source>
          <target state="translated">두 번째 인수 인 &lt;code&gt;delay&lt;/code&gt; 는 &lt;code&gt;duration&lt;/code&gt; 과 구문이 동일합니다 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="e4728132b472fdaf23f6157a81e7c259035ede28" translate="yes" xml:space="preserve">
          <source>The second bundle contains code in the old ES5 syntax, along with all necessary polyfills. This results in a larger bundle size, but supports older browsers.</source>
          <target state="translated">두 번째 번들에는 모든 필수 폴리 필과 함께 이전 ES5 구문의 코드가 포함되어 있습니다. 결과적으로 번들 크기가 커지지 만 이전 브라우저는 지원합니다.</target>
        </trans-unit>
        <trans-unit id="acd35964f6f0d51879b94ba5f5c61077dd99875c" translate="yes" xml:space="preserve">
          <source>The second element is a &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; with an &lt;a href=&quot;template-syntax#event-binding&quot;&gt;event binding&lt;/a&gt;. You know it's an event binding because the part to the left of the equal sign is in parentheses, &lt;code&gt;(click)&lt;/code&gt;.</source>
          <target state="translated">두 번째 요소는 &lt;a href=&quot;template-syntax#event-binding&quot;&gt;이벤트 바인딩&lt;/a&gt; 이있는 &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; 입니다 . 등호 왼쪽에있는 부분이 괄호 안에 있기 때문에 이벤트 바인딩이라는 것을 알고 있습니다 &lt;code&gt;(click)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="fc449d513e1cc929356564804a02d3b22062ddbc" translate="yes" xml:space="preserve">
          <source>The second example demonstrates passing in the &lt;code&gt;$event&lt;/code&gt; object, which provides details about the event to the component.</source>
          <target state="translated">두 번째 예는 &lt;code&gt;$event&lt;/code&gt; 대한 세부 정보를 구성 요소에 제공 하는 $ event 객체 전달을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="ad0d312637a21eae4b82436cf870b90d8c9345ee" translate="yes" xml:space="preserve">
          <source>The second example demonstrates passing in the &lt;code&gt;$event&lt;/code&gt; object, which provides details about the event to the controller.</source>
          <target state="translated">두 번째 예는 &lt;code&gt;$event&lt;/code&gt; 대한 세부 사항을 컨트롤러에 제공 하는 $ event 오브젝트 전달을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="3b637601413f91f94772399c112fac361b60d0c5" translate="yes" xml:space="preserve">
          <source>The second item identifies the child route details about a particular crisis (&lt;code&gt;/:id&lt;/code&gt;).</source>
          <target state="translated">두 번째 항목은 특정 위기 ( &lt;code&gt;/:id&lt;/code&gt; )에 대한 하위 경로 세부 사항을 식별합니다 .</target>
        </trans-unit>
        <trans-unit id="31c7c11b46015d9e7e37751c373ace9c44818123" translate="yes" xml:space="preserve">
          <source>The second kind of entry component occurs in a route definition like this:</source>
          <target state="translated">두 번째 항목 구성 요소는 다음과 같은 경로 정의에서 발생합니다.</target>
        </trans-unit>
        <trans-unit id="80d2b152141df0551d01e052076dd9a2bf659174" translate="yes" xml:space="preserve">
          <source>The second parameter identifies this as a &lt;code&gt;plural&lt;/code&gt; translation type.</source>
          <target state="translated">두 번째 매개 변수는이를 &lt;code&gt;plural&lt;/code&gt; 변환 유형 으로 식별 합니다.</target>
        </trans-unit>
        <trans-unit id="2ad7a68528bfceb60940f6593bc4a5c0d6da5983" translate="yes" xml:space="preserve">
          <source>The second parameter to the Jasmine matcher (e.g., &lt;code&gt;'expected name'&lt;/code&gt;) is an optional failure label. If the expectation fails, Jasmine appends this label to the expectation failure message. In a spec with multiple expectations, it can help clarify what went wrong and which expectation failed.</source>
          <target state="translated">Jasmine 매처에 대한 두 번째 매개 변수 (예 : &lt;code&gt;'expected name'&lt;/code&gt; )는 선택적 실패 레이블입니다. 예상이 실패하면 Jasmine은이 레이블을 예상 실패 메시지에 추가합니다. 여러 기대치가있는 스펙에서는 무엇이 잘못되었고 어떤 기대가 실패했는지 명확하게 설명 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="75e29b682d0d5764eb407c6ced980c4bbb5fe3df" translate="yes" xml:space="preserve">
          <source>The second parameter, &lt;code&gt;extraProviders&lt;/code&gt;, is optional. It lets you specify dependency providers that apply only when running on this server. You can do this when your app needs information that can only be determined by the currently running server instance. One example could be the running server's &lt;em&gt;origin&lt;/em&gt;, which could be used to &lt;a href=&quot;universal#http-urls&quot;&gt;calculate absolute HTTP URLs&lt;/a&gt; if not using the &lt;code&gt;Request&lt;/code&gt; token as shown above.</source>
          <target state="translated">두 번째 매개 변수 인 &lt;code&gt;extraProviders&lt;/code&gt; 는 선택 사항입니다. 이 서버에서 실행될 때만 적용되는 종속성 제공자를 지정할 수 있습니다. 앱에 현재 실행중인 서버 인스턴스에서만 확인할 수있는 정보가 필요한 경우이 작업을 수행 할 수 있습니다. 하나의 예는 실행중인 서버의 &lt;em&gt;origin&lt;/em&gt; 이 될 수 있으며, 이는 위에 표시된대로 &lt;code&gt;Request&lt;/code&gt; 토큰을 사용하지 않는 경우 &lt;a href=&quot;universal#http-urls&quot;&gt;절대 HTTP URL&lt;/a&gt; 을 계산 하는 데 사용될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="022dba050c6e8639ff2efe745f9496f6a07db6c0" translate="yes" xml:space="preserve">
          <source>The second property is a provider definition object, which tells the injector how to create the dependency value. The provider-definition key can be &lt;code&gt;useClass&lt;/code&gt;, as in the example. It can also be &lt;code&gt;&lt;a href=&quot;../api/core/existingsansprovider#useExisting&quot;&gt;useExisting&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/core/valuesansprovider#useValue&quot;&gt;useValue&lt;/a&gt;&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;../api/core/factorysansprovider#useFactory&quot;&gt;useFactory&lt;/a&gt;&lt;/code&gt;. Each of these keys provides a different type of dependency, as discussed below.</source>
          <target state="translated">두 번째 속성은 인젝터에게 종속성 값을 만드는 방법을 알려주는 공급자 정의 개체입니다. 공급자 정의 키는 예제와 같이 &lt;code&gt;useClass&lt;/code&gt; 일 수 있습니다 . &lt;code&gt;&lt;a href=&quot;../api/core/existingsansprovider#useExisting&quot;&gt;useExisting&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;../api/core/valuesansprovider#useValue&quot;&gt;useValue&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;../api/core/factorysansprovider#useFactory&quot;&gt;useFactory&lt;/a&gt;&lt;/code&gt; 일 수도 있습니다 . 이러한 각 키는 아래에 설명 된대로 다른 유형의 종속성을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="fe60b9d875a80248b494fbc59dbdf2537b6de57a" translate="yes" xml:space="preserve">
          <source>The second provider substitutes &lt;code&gt;DateLoggerService&lt;/code&gt; for &lt;code&gt;LoggerService&lt;/code&gt;. &lt;code&gt;LoggerService&lt;/code&gt; is already registered at the &lt;code&gt;AppComponent&lt;/code&gt; level. When this child component requests &lt;code&gt;LoggerService&lt;/code&gt;, it receives a &lt;code&gt;DateLoggerService&lt;/code&gt; instance instead.</source>
          <target state="translated">두 번째 공급자는 &lt;code&gt;DateLoggerService&lt;/code&gt; 를 &lt;code&gt;LoggerService&lt;/code&gt; 로 대체 합니다. &lt;code&gt;LoggerService&lt;/code&gt; 는 이미 &lt;code&gt;AppComponent&lt;/code&gt; 레벨에 등록되어 있습니다. 이 자식 구성 요소가 &lt;code&gt;LoggerService&lt;/code&gt; 를 요청하면 대신 &lt;code&gt;DateLoggerService&lt;/code&gt; 인스턴스를 받습니다 .</target>
        </trans-unit>
        <trans-unit id="0e6434f6538db6265436fe3ae1f9a0d66262b187" translate="yes" xml:space="preserve">
          <source>The second specifies a literal string resource to use for the &lt;code&gt;TITLE&lt;/code&gt; token. The &lt;code&gt;TITLE&lt;/code&gt; provider token is &lt;em&gt;not&lt;/em&gt; a class, but is instead a special kind of provider lookup key called an &lt;a href=&quot;dependency-injection-in-action#injection-token&quot;&gt;injection token&lt;/a&gt;, represented by an &lt;code&gt;&lt;a href=&quot;../api/core/injectiontoken&quot;&gt;InjectionToken&lt;/a&gt;&lt;/code&gt; instance.</source>
          <target state="translated">두 번째는 &lt;code&gt;TITLE&lt;/code&gt; 토큰 에 사용할 리터럴 문자열 자원을 지정합니다 . &lt;code&gt;TITLE&lt;/code&gt; 이다 토큰을 제공 &lt;em&gt;하지&lt;/em&gt; 클래스,하지만 대신라는 업체 조회 키의 특별한 종류 &lt;a href=&quot;dependency-injection-in-action#injection-token&quot;&gt;주입 토큰&lt;/a&gt; 로 표현, &lt;code&gt;&lt;a href=&quot;../api/core/injectiontoken&quot;&gt;InjectionToken&lt;/a&gt;&lt;/code&gt; 의 인스턴스입니다.</target>
        </trans-unit>
        <trans-unit id="cc2fae3d6572ac8d718bd250497aa8031b7f47a3" translate="yes" xml:space="preserve">
          <source>The second translation unit, immediately below the first one, contains the &lt;code&gt;select&lt;/code&gt; message. Translate that as well.</source>
          <target state="translated">첫 번째 번역 바로 아래의 두 번째 번역 단위에는 &lt;code&gt;select&lt;/code&gt; 메시지가 포함됩니다. 또한 번역하십시오.</target>
        </trans-unit>
        <trans-unit id="322bf6fe354feb0ed8eefdb996e96edbf6d504a6" translate="yes" xml:space="preserve">
          <source>The second unit contains the complete nested expression:</source>
          <target state="translated">두 번째 단위에는 전체 중첩식이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="fd3336ba8ecc74fbec8d08991026da2b43cbb769" translate="yes" xml:space="preserve">
          <source>The second, synchronous &lt;code&gt;beforeEach()&lt;/code&gt; contains the remaining setup steps, which include creating the component and querying for elements to inspect.</source>
          <target state="translated">두 번째 인 동기 &lt;code&gt;beforeEach()&lt;/code&gt; 에는 나머지 구성 단계가 포함되는데, 여기에는 구성 요소 작성 및 검사 할 요소에 대한 조회가 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="ccbbf197c57bcf4dcf2acbe9b02811d4fb7292ef" translate="yes" xml:space="preserve">
          <source>The secondary heading should be followed by a blank line and then the content for that heading.</source>
          <target state="translated">보조 제목 다음에 빈 줄과 그 제목의 내용이 와야합니다.</target>
        </trans-unit>
        <trans-unit id="9bbf6669b097783c6f5e9731d8bd819d03e19f1c" translate="yes" xml:space="preserve">
          <source>The secondary route consists of an outlet name (&lt;code&gt;popup&lt;/code&gt;), a &lt;code&gt;colon&lt;/code&gt; separator, and the secondary route path (&lt;code&gt;compose&lt;/code&gt;).</source>
          <target state="translated">보조 경로는 콘센트 이름 ( &lt;code&gt;popup&lt;/code&gt; ), &lt;code&gt;colon&lt;/code&gt; 구분 기호 및 보조 경로 경로 ( &lt;code&gt;compose&lt;/code&gt; )로 구성 됩니다.</target>
        </trans-unit>
        <trans-unit id="5974edf352069a00dd09a93b85b1e1cf03f0a232" translate="yes" xml:space="preserve">
          <source>The selector tells Angular to plug this root component into the &lt;code&gt;&amp;lt;phonecat-app&amp;gt;&lt;/code&gt; element on the host web page when the application launches.</source>
          <target state="translated">선택기는 Angular에게 &lt;code&gt;&amp;lt;phonecat-app&amp;gt;&lt;/code&gt; 루트 구성 요소를 호스트 웹 페이지 의 &amp;lt;phonecat-app&amp;gt; 요소에 연결하도록 지시 합니다.</target>
        </trans-unit>
        <trans-unit id="e950633873ec03732fd9736996584fa6ed62259d" translate="yes" xml:space="preserve">
          <source>The separation of concerns here is the same as with &lt;a href=&quot;glossary#schematic&quot;&gt;schematics&lt;/a&gt;, which are used for other CLI commands that touch your code (such as &lt;code&gt;ng generate&lt;/code&gt;).</source>
          <target state="translated">여기서 관심사를 구분 하는 것은 &lt;a href=&quot;glossary#schematic&quot;&gt;회로도&lt;/a&gt; 와 동일하며 코드를 터치하는 다른 CLI 명령 (예 : &lt;code&gt;ng generate&lt;/code&gt; )에 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="81aeb61d2e22f8b8d9459e05b501bced326adf60" translate="yes" xml:space="preserve">
          <source>The sequence of log messages follows the prescribed hook calling order: &lt;code&gt;&lt;a href=&quot;../api/core/onchanges&quot;&gt;OnChanges&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/core/oninit&quot;&gt;OnInit&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/core/docheck&quot;&gt;DoCheck&lt;/a&gt;&lt;/code&gt; (3x), &lt;code&gt;&lt;a href=&quot;../api/core/aftercontentinit&quot;&gt;AfterContentInit&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/core/aftercontentchecked&quot;&gt;AfterContentChecked&lt;/a&gt;&lt;/code&gt; (3x), &lt;code&gt;&lt;a href=&quot;../api/core/afterviewinit&quot;&gt;AfterViewInit&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/core/afterviewchecked&quot;&gt;AfterViewChecked&lt;/a&gt;&lt;/code&gt; (3x), and &lt;code&gt;&lt;a href=&quot;../api/core/ondestroy&quot;&gt;OnDestroy&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">로그 메시지 순서는 규정 된 후크 호출 순서 ( &lt;code&gt;&lt;a href=&quot;../api/core/onchanges&quot;&gt;OnChanges&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;../api/core/oninit&quot;&gt;OnInit&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;../api/core/docheck&quot;&gt;DoCheck&lt;/a&gt;&lt;/code&gt; (3x), &lt;code&gt;&lt;a href=&quot;../api/core/aftercontentinit&quot;&gt;AfterContentInit&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;../api/core/aftercontentchecked&quot;&gt;AfterContentChecked&lt;/a&gt;&lt;/code&gt; (3x), &lt;code&gt;&lt;a href=&quot;../api/core/afterviewinit&quot;&gt;AfterViewInit&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;../api/core/afterviewchecked&quot;&gt;AfterViewChecked&lt;/a&gt;&lt;/code&gt; (3x) 및 &lt;code&gt;&lt;a href=&quot;../api/core/ondestroy&quot;&gt;OnDestroy&lt;/a&gt;&lt;/code&gt; )를 따릅니다 .</target>
        </trans-unit>
        <trans-unit id="18ae83b605e538232ca7b3bc82c832eb67e352a0" translate="yes" xml:space="preserve">
          <source>The sequence of router events is as follows:</source>
          <target state="translated">라우터 이벤트 순서는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="1737d4ed6f800daea7476c0c70a1734eb7ce1928" translate="yes" xml:space="preserve">
          <source>The server (&lt;a href=&quot;https://expressjs.com/&quot;&gt;Node Express&lt;/a&gt; in this guide's example) passes client requests for application pages to the NgUniversal &lt;code&gt;ngExpressEngine&lt;/code&gt;. Under the hood, this calls Universal's &lt;code&gt;&lt;a href=&quot;../api/platform-server/rendermodulefactory&quot;&gt;renderModuleFactory&lt;/a&gt;()&lt;/code&gt; function, while providing caching and other helpful utilities.</source>
          <target state="translated">서버 ( 이 안내서의 예제에서 &lt;a href=&quot;https://expressjs.com/&quot;&gt;Node Express&lt;/a&gt; )는 애플리케이션 페이지에 대한 클라이언트 요청을 NgUniversal &lt;code&gt;ngExpressEngine&lt;/code&gt; 에 전달 합니다. 후드 아래에서 이것은 캐싱 및 기타 유용한 유틸리티를 제공하면서 Universal의 &lt;code&gt;&lt;a href=&quot;../api/platform-server/rendermodulefactory&quot;&gt;renderModuleFactory&lt;/a&gt;()&lt;/code&gt; 함수를 호출합니다 .</target>
        </trans-unit>
        <trans-unit id="b91c33e79c6d8ce1f35c11a0064ccf17c1206386" translate="yes" xml:space="preserve">
          <source>The server platform that supports the runtime compiler.</source>
          <target state="translated">런타임 컴파일러를 지원하는 서버 플랫폼.</target>
        </trans-unit>
        <trans-unit id="fdc7974bddc4251d37c899dec154f7616873a7f7" translate="yes" xml:space="preserve">
          <source>The server should respond with a single hero rather than an array of heroes.</source>
          <target state="translated">서버는 여러 영웅이 아닌 단일 영웅으로 응답해야합니다.</target>
        </trans-unit>
        <trans-unit id="eca5a8837e9ee160489059a172e9ebc977dd83cd" translate="yes" xml:space="preserve">
          <source>The server will automatically reload your browser when new files are output.</source>
          <target state="translated">새 파일이 출력되면 서버가 자동으로 브라우저를 다시로드합니다.</target>
        </trans-unit>
        <trans-unit id="0d9613e884c4d7057875fd99d39be99f233ae206" translate="yes" xml:space="preserve">
          <source>The server's data API determines the shape of the JSON data. The &lt;em&gt;Tour of Heroes&lt;/em&gt; data API returns the hero data as an array.</source>
          <target state="translated">서버의 데이터 API가 JSON 데이터의 형태를 결정합니다. &lt;em&gt;영웅의 투어&lt;/em&gt; 데이터 API는 배열로 영웅의 데이터를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="d608ede8654d1838eb5137faa0d8ed16a87869ad" translate="yes" xml:space="preserve">
          <source>The server-rendered app still launches quickly but the full client app may take seconds to load.</source>
          <target state="translated">서버 렌더링 앱은 여전히 ​​빠르게 시작되지만 전체 클라이언트 앱을로드하는 데 몇 초가 걸릴 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e791eab073e4d3b4cd8bc1aca0e02dd44233a6e7" translate="yes" xml:space="preserve">
          <source>The service can be instantiated by configuring a factory function, as in the following example.</source>
          <target state="translated">다음 예와 같이 팩토리 기능을 구성하여 서비스를 인스턴스화 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b01cb6b08662ccfbcebed41545cd05a24d2577c4" translate="yes" xml:space="preserve">
          <source>The service exposes its cache of &lt;code&gt;&lt;a href=&quot;../api/service-worker/swpush#messages&quot;&gt;messages&lt;/a&gt;&lt;/code&gt; and two methods: one to &lt;code&gt;add()&lt;/code&gt; a message to the cache and another to &lt;code&gt;&lt;a href=&quot;../api/forms/formarray#clear&quot;&gt;clear()&lt;/a&gt;&lt;/code&gt; the cache.</source>
          <target state="translated">서비스는 &lt;code&gt;&lt;a href=&quot;../api/service-worker/swpush#messages&quot;&gt;messages&lt;/a&gt;&lt;/code&gt; 캐시와 메시지를 캐시에 &lt;code&gt;add()&lt;/code&gt; 하는 방법 과 캐시를 &lt;code&gt;&lt;a href=&quot;../api/forms/formarray#clear&quot;&gt;clear()&lt;/a&gt;&lt;/code&gt; 방법의 두 가지 방법을 제공 합니다.</target>
        </trans-unit>
        <trans-unit id="8fbb599e20de587b80201a2202b3533ea4c17924" translate="yes" xml:space="preserve">
          <source>The service itself is a class that the CLI generated and that's decorated with &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt;. By default, this decorator has a &lt;code&gt;&lt;a href=&quot;../api/core/injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;&lt;/code&gt; property, which creates a provider for the service. In this case, &lt;code&gt;&lt;a href=&quot;../api/core/injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;: 'root'&lt;/code&gt; specifies that Angular should provide the service in the root injector.</source>
          <target state="translated">서비스 자체는 CLI가 생성하고 &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; 장식 된 클래스입니다 . 이 데코레이터에는 기본적으로 서비스 제공 업체를 &lt;code&gt;&lt;a href=&quot;../api/core/injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;&lt;/code&gt; 하는 providedIn 속성이 있습니다. 이 경우 &lt;code&gt;&lt;a href=&quot;../api/core/injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;: 'root'&lt;/code&gt; 는 Angular가 루트 인젝터에서 서비스를 제공하도록 지정합니다.</target>
        </trans-unit>
        <trans-unit id="a8d86534f286c4014047b48e39157c9ac642d3f4" translate="yes" xml:space="preserve">
          <source>The service provided by the root &lt;code&gt;AppModule&lt;/code&gt; takes precedence over services provided by imported NgModules. The &lt;code&gt;AppModule&lt;/code&gt; always wins.</source>
          <target state="translated">루트 &lt;code&gt;AppModule&lt;/code&gt; 에서 제공하는 서비스는 가져온 NgModules에서 제공하는 서비스보다 우선합니다. &lt;code&gt;AppModule&lt;/code&gt; 은 항상 이긴다.</target>
        </trans-unit>
        <trans-unit id="e4c344300d7fd4d9f966ba1a8642b3e11076118a" translate="yes" xml:space="preserve">
          <source>The service uses the &lt;code&gt;import()&lt;/code&gt; method to load your bundled AngularJS application lazily. This decreases the initial bundle size of your application as you're not loading code your user doesn't need yet. You also need to provide a way to &lt;em&gt;bootstrap&lt;/em&gt; the application manually after it has been loaded. AngularJS provides a way to manually bootstrap an application using the &lt;a href=&quot;https://docs.angularjs.org/api/ng/function/angular.bootstrap&quot;&gt;angular.bootstrap()&lt;/a&gt; method with a provided HTML element. Your AngularJS app should also expose a &lt;code&gt;bootstrap&lt;/code&gt; method that bootstraps the AngularJS app.</source>
          <target state="translated">이 서비스는 &lt;code&gt;import()&lt;/code&gt; 메소드를 사용하여 번들로 제공되는 AngularJS 애플리케이션을 느리게로드합니다. 사용자가 아직 필요로하지 않는 코드를로드하지 않기 때문에 애플리케이션의 초기 번들 크기가 줄어 듭니다. 또한 응용 프로그램을로드 한 후 수동으로 &lt;em&gt;부트 스트랩&lt;/em&gt; 하는 방법을 제공해야합니다 . AngularJS는 제공된 HTML 요소와 함께 &lt;a href=&quot;https://docs.angularjs.org/api/ng/function/angular.bootstrap&quot;&gt;angular.bootstrap ()&lt;/a&gt; 메소드를 사용하여 애플리케이션을 수동으로 부트 스트랩하는 방법을 제공합니다. AngularJS 앱은 AngularJS 앱 을 부트 스트랩 하는 &lt;code&gt;bootstrap&lt;/code&gt; 메소드 도 제공해야 합니다.</target>
        </trans-unit>
        <trans-unit id="dc4b5f46b09780ea494a593541c8cc9fef7174dd" translate="yes" xml:space="preserve">
          <source>The service worker conserves bandwidth when possible. Resources are only downloaded if they've changed.</source>
          <target state="translated">서비스 담당자는 가능한 경우 대역폭을 절약합니다. 리소스는 변경된 경우에만 다운로드됩니다.</target>
        </trans-unit>
        <trans-unit id="73a76971f818809f629500d6b5210621468c33c3" translate="yes" xml:space="preserve">
          <source>The service worker installed the updated version of your app &lt;em&gt;in the background&lt;/em&gt;, and the next time the page is loaded or reloaded, the service worker switches to the latest version.</source>
          <target state="translated">서비스 워커 &lt;em&gt;는 백그라운드에서&lt;/em&gt; 업데이트 된 앱 버전을 설치했으며 다음에 페이지를로드하거나 다시로드하면 서비스 워커가 최신 버전으로 전환됩니다.</target>
        </trans-unit>
        <trans-unit id="cc0df69a7bfbd6545911d095948cf97558edba0d" translate="yes" xml:space="preserve">
          <source>The set of NgModules whose exported &lt;a href=&quot;../../guide/glossary#declarable&quot;&gt;declarables&lt;/a&gt; are available to templates in this module.</source>
          <target state="translated">수출 NgModules 세트 &lt;a href=&quot;../../guide/glossary#declarable&quot;&gt;승인 된 기술&lt;/a&gt; 이 모듈에서 템플릿을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="abd06758e4687a7c44919fabc0c064aac2354cc2" translate="yes" xml:space="preserve">
          <source>The set of components that are bootstrapped when this module is bootstrapped. The components listed here are automatically added to &lt;code&gt;entryComponents&lt;/code&gt;.</source>
          <target state="translated">이 모듈이 부트 스트랩 될 때 부트 스트랩되는 구성 요소 세트. 여기에 나열된 컴포넌트는 &lt;code&gt;entryComponents&lt;/code&gt; 에 자동으로 추가됩니다 .</target>
        </trans-unit>
        <trans-unit id="32d438c2e575af5904ec9ce7fda3a5333ad0ee04" translate="yes" xml:space="preserve">
          <source>The set of components to compile when this NgModule is defined, so that they can be dynamically loaded into the view.</source>
          <target state="translated">이 NgModule이 정의 될 때 컴파일 할 컴포넌트 세트로, 뷰에 동적으로로드 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5fb26e057f395ff1c2bbe69c4c8605bab3259d00" translate="yes" xml:space="preserve">
          <source>The set of components, directives, and pipes (&lt;a href=&quot;../../guide/glossary#declarable&quot;&gt;declarables&lt;/a&gt;) that belong to this module.</source>
          <target state="translated">이 모듈에 속하는 구성 요소, 지시문 및 파이프 ( &lt;a href=&quot;../../guide/glossary#declarable&quot;&gt;선언 가능&lt;/a&gt; ) 세트 .</target>
        </trans-unit>
        <trans-unit id="7b2caf88051dc93e4146531fb1b86232037cd52e" translate="yes" xml:space="preserve">
          <source>The set of components, directives, and pipes declared in this NgModule that can be used in the template of any component that is part of an NgModule that imports this NgModule. Exported declarations are the module's public API.</source>
          <target state="translated">이 NgModule을 가져 오는 NgModule의 일부인 구성 요소의 템플리트에서 사용할 수있는이 NgModule에 선언 된 구성 요소, 지시문 및 파이프 세트. 내 보낸 선언은 모듈의 공용 API입니다.</target>
        </trans-unit>
        <trans-unit id="0c259b27e27fec00cdb957688cd4f00e39150e77" translate="yes" xml:space="preserve">
          <source>The set of injectable objects that are available in the injector of this module.</source>
          <target state="translated">이 모듈의 인젝터에서 사용 가능한 인젝터 블 오브젝트 세트입니다.</target>
        </trans-unit>
        <trans-unit id="d5765ec9ddf94071c5020c93344913452a009948" translate="yes" xml:space="preserve">
          <source>The set of questions you've defined for the job application is returned from the &lt;code&gt;QuestionService&lt;/code&gt;. In a real app you'd retrieve these questions from storage.</source>
          <target state="translated">작업 애플리케이션에 대해 정의한 질문 세트가 &lt;code&gt;QuestionService&lt;/code&gt; 에서 리턴됩니다 . 실제 앱에서는 저장소에서 이러한 질문을 검색합니다.</target>
        </trans-unit>
        <trans-unit id="21e915a97b647841a3c77d6bb5bc493db4e59530" translate="yes" xml:space="preserve">
          <source>The set of schemas that declare elements to be allowed in the NgModule. Elements and properties that are neither Angular components nor directives must be declared in a schema.</source>
          <target state="translated">NgModule에서 허용 될 요소를 선언하는 스키마 세트. 각도 컴포넌트 나 지시어가 아닌 요소와 속성은 스키마에 선언해야합니다.</target>
        </trans-unit>
        <trans-unit id="f833bd6b1e79171a431acd5cc244779fb79402e4" translate="yes" xml:space="preserve">
          <source>The set of selectors that are available to a template include those declared here, and those that are exported from imported NgModules.</source>
          <target state="translated">템플릿에 사용 가능한 선택기 집합에는 여기에 선언 된 항목과 가져온 NgModules에서 내 보낸 선택기가 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="b6a30893f8633b1e28a52635e18ed8118090a942" translate="yes" xml:space="preserve">
          <source>The setter of the &lt;code&gt;name&lt;/code&gt; input property in the child &lt;code&gt;NameChildComponent&lt;/code&gt; trims the whitespace from a name and replaces an empty value with default text.</source>
          <target state="translated">자식 &lt;code&gt;NameChildComponent&lt;/code&gt; 의 &lt;code&gt;name&lt;/code&gt; 입력 속성 설정자는 이름 에서 공백을 제거하고 빈 값을 기본 텍스트로 바꿉니다.</target>
        </trans-unit>
        <trans-unit id="882e77e815d86faba535964e8ae6e6a1f26ffa49" translate="yes" xml:space="preserve">
          <source>The setup for the &lt;em&gt;test-host&lt;/em&gt; tests is similar to the setup for the stand-alone tests:</source>
          <target state="translated">에 대한 설정 &lt;em&gt;테스트 호스트&lt;/em&gt; 테스트는 독립 실행 형 테스트에 대한 설정과 유사합니다 :</target>
        </trans-unit>
        <trans-unit id="52f4e19d49b1e5a67a00d5af99c62cbc1c7875a5" translate="yes" xml:space="preserve">
          <source>The shadow-dom-piercing descendant combinator is deprecated and support is being &lt;a href=&quot;https://developers.google.com/web/updates/2017/10/remove-shadow-piercing&quot;&gt;removed from major browsers and tools&lt;/a&gt;. As such, in v4 we deprecated support in Angular for all 3 of &lt;code&gt;/deep/&lt;/code&gt;, &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; and &lt;code&gt;::ng-deep&lt;/code&gt;. Until removal, &lt;code&gt;::ng-deep&lt;/code&gt; is preferred for broader compatibility with the tools.</source>
          <target state="translated">shadow-dom-piercing 하위 항목 콤비 네이터는 더 이상 사용되지 않으며 &lt;a href=&quot;https://developers.google.com/web/updates/2017/10/remove-shadow-piercing&quot;&gt;주요 브라우저 및 도구에서&lt;/a&gt; 지원이 제거됩니다 . 따라서 v4에서는 &lt;code&gt;/deep/&lt;/code&gt; , &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; 및 &lt;code&gt;::ng-deep&lt;/code&gt; 모두에 대해 Angular에서 지원이 중단되었습니다 . 제거 할 때까지 &lt;code&gt;::ng-deep&lt;/code&gt; 이 도구와의 광범위한 호환성을 위해 선호됩니다.</target>
        </trans-unit>
        <trans-unit id="e2b9108143779ec04ceb04bcde0783f4eb419bdf" translate="yes" xml:space="preserve">
          <source>The shadow-piercing descendant combinator is deprecated and &lt;a href=&quot;https://www.chromestatus.com/features/6750456638341120&quot;&gt;support is being removed from major browsers&lt;/a&gt; and tools. As such we plan to drop support in Angular (for all 3 of &lt;code&gt;/deep/&lt;/code&gt;, &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; and &lt;code&gt;::ng-deep&lt;/code&gt;). Until then &lt;code&gt;::ng-deep&lt;/code&gt; should be preferred for a broader compatibility with the tools.</source>
          <target state="translated">섀도 피어싱 하위 항목 콤비 네이터는 더 이상 사용되지 않으며 &lt;a href=&quot;https://www.chromestatus.com/features/6750456638341120&quot;&gt;주요 브라우저&lt;/a&gt; 및 도구 에서 지원이 제거됩니다 . 따라서 Angular에서 지원을 중단 할 계획입니다 ( &lt;code&gt;/deep/&lt;/code&gt; , &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; 및 &lt;code&gt;::ng-deep&lt;/code&gt; ). 그때까지는 도구와의 광범위한 호환성을 위해 &lt;code&gt;::ng-deep&lt;/code&gt; 이 선호되어야합니다.</target>
        </trans-unit>
        <trans-unit id="d1572bbd4b2543d39de382abeaa39b959a062225" translate="yes" xml:space="preserve">
          <source>The shim first loads the SystemJS configuration, then Angular's test support libraries, and then the application's spec files themselves.</source>
          <target state="translated">shim은 먼저 SystemJS 구성을로드 한 다음 Angular의 테스트 지원 라이브러리, 애플리케이션 사양 파일을로드합니다.</target>
        </trans-unit>
        <trans-unit id="d9c0ff4882b7ddca991893d98816e7055727d7c4" translate="yes" xml:space="preserve">
          <source>The shorthand form expands into a long form that uses the &lt;code&gt;&lt;a href=&quot;ngforof&quot;&gt;ngForOf&lt;/a&gt;&lt;/code&gt; selector on an &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; element. The content of the &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; element is the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; element that held the short-form directive.</source>
          <target state="translated">속기 양식 은 &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; 요소 에서 &lt;code&gt;&lt;a href=&quot;ngforof&quot;&gt;ngForOf&lt;/a&gt;&lt;/code&gt; 선택기 를 사용하는 긴 양식으로 확장됩니다 . &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; 요소 의 내용은 짧은 형식 지시문을 보유한 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 요소입니다.</target>
        </trans-unit>
        <trans-unit id="553922474ce1ca6a6f30eca0ff378d2e094bbbe1" translate="yes" xml:space="preserve">
          <source>The shorthand syntax &lt;code&gt;*&lt;a href=&quot;ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; expands into two separate template specifications for the &quot;then&quot; and &quot;else&quot; clauses. For example, consider the following shorthand statement, that is meant to show a loading page while waiting for data to be loaded.</source>
          <target state="translated">약식 구문 &lt;code&gt;*&lt;a href=&quot;ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; 는 &quot;then&quot;및 &quot;else&quot;절에 대해 두 개의 개별 템플리트 스펙으로 확장됩니다. 예를 들어 데이터가로드되기를 기다리는 동안로드 페이지를 표시하기위한 다음 속기 설명을 고려하십시오.</target>
        </trans-unit>
        <trans-unit id="153a8913765ac20b181614adc3911db7022d20a6" translate="yes" xml:space="preserve">
          <source>The single parameter accepted is an initialization hash. Any properties of the response passed there will override the default values.</source>
          <target state="translated">허용되는 단일 매개 변수는 초기화 해시입니다. 전달 된 응답의 모든 속성은 기본값을 무시합니다.</target>
        </trans-unit>
        <trans-unit id="7ae02ec48c2aa6b29e8bf62369aed78347f97d35" translate="yes" xml:space="preserve">
          <source>The smallest grouping of display elements that can be created and destroyed together. Angular renders a view under the control of one or more &lt;a href=&quot;glossary#directive&quot;&gt;directives&lt;/a&gt;, especially &lt;a href=&quot;glossary#component&quot;&gt;component&lt;/a&gt; directives and their companion &lt;a href=&quot;glossary#template&quot;&gt;templates&lt;/a&gt;.</source>
          <target state="translated">함께 만들고 파괴 할 수있는 최소 디스플레이 요소 그룹입니다. Angular는 하나 이상의 &lt;a href=&quot;glossary#directive&quot;&gt;지시문&lt;/a&gt; , 특히 &lt;a href=&quot;glossary#component&quot;&gt;구성 요소&lt;/a&gt; 지시문 및 해당 동반자 &lt;a href=&quot;glossary#template&quot;&gt;템플릿&lt;/a&gt; 의 제어하에 뷰를 렌더링합니다 .</target>
        </trans-unit>
        <trans-unit id="fd28324682f0c17450b3cf5ed2f78e84c835aa30" translate="yes" xml:space="preserve">
          <source>The sneaky spy directive is simple, consisting almost entirely of &lt;code&gt;ngOnInit()&lt;/code&gt; and &lt;code&gt;ngOnDestroy()&lt;/code&gt; hooks that log messages to the parent via an injected &lt;code&gt;LoggerService&lt;/code&gt;.</source>
          <target state="translated">몰래 스파이 지시어는 단순 하며 주입 된 &lt;code&gt;LoggerService&lt;/code&gt; 를 통해 부모에게 메시지를 기록하는 &lt;code&gt;ngOnInit()&lt;/code&gt; 및 &lt;code&gt;ngOnDestroy()&lt;/code&gt; 후크 로 거의 전적으로 구성 됩니다.</target>
        </trans-unit>
        <trans-unit id="a51977b23bb7ecc232209e8d1327212e8a3ebfb7" translate="yes" xml:space="preserve">
          <source>The source code for this tutorial and the complete &lt;em&gt;Tour of Heroes&lt;/em&gt; global styles are available in the live example.</source>
          <target state="translated">이 튜토리얼의 소스 코드와 전체 &lt;em&gt;Tour of Heroes&lt;/em&gt; 글로벌 스타일은 라이브 예제에서 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="197396630d371033ea63576d710b5005e3bd9ab9" translate="yes" xml:space="preserve">
          <source>The source component's injector.</source>
          <target state="translated">소스 컴포넌트의 인젝터</target>
        </trans-unit>
        <trans-unit id="26d4b7c388a1bdb518c645561859bb64e0fbf361" translate="yes" xml:space="preserve">
          <source>The source of truth provides the value and status of the form element at a given point in time. In reactive forms, the form model is the source of truth. In the example above, the form model is the &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; instance.</source>
          <target state="translated">진실의 근원은 주어진 시점에서 양식 요소의 가치와 상태를 제공합니다. 반응 형에서 양식 모델은 진실의 원천입니다. 위의 예에서 양식 모델은 &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 인스턴스입니다.</target>
        </trans-unit>
        <trans-unit id="711481c7ae759061bd5e4428a64fc27d4832dd02" translate="yes" xml:space="preserve">
          <source>The spy is designed such that any call to &lt;code&gt;getQuote&lt;/code&gt; receives an observable with a test quote. Unlike the real &lt;code&gt;getQuote()&lt;/code&gt; method, this spy bypasses the server and returns a synchronous observable whose value is available immediately.</source>
          <target state="translated">스파이는 &lt;code&gt;getQuote&lt;/code&gt; 에 대한 모든 호출 이 테스트 견적과 함께 관찰 가능 항목을 받도록 설계되었습니다 . 실제 &lt;code&gt;getQuote()&lt;/code&gt; 메서드 와 달리이 스파이는 서버를 무시하고 값을 즉시 사용할 수있는 동기식 관찰 가능 객체를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="90b43b9097739862d0cb30d76b768225cec8d2a5" translate="yes" xml:space="preserve">
          <source>The starter app's structure looks like this:</source>
          <target state="translated">스타터 앱의 구조는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="8fa84009f343b37f2c309935ebef67d3cf1bb17d" translate="yes" xml:space="preserve">
          <source>The state name, unique within the component.</source>
          <target state="translated">구성 요소 내에서 고유 한 상태 이름입니다.</target>
        </trans-unit>
        <trans-unit id="8ba0f66a562868f6f0949ad17ceaa5aa9040735a" translate="yes" xml:space="preserve">
          <source>The state object is defined by &lt;code&gt;&lt;a href=&quot;navigationextras&quot;&gt;NavigationExtras&lt;/a&gt;&lt;/code&gt;, and contains any developer-defined state value, as well as a unique ID that the router assigns to every router transition/navigation.</source>
          <target state="translated">상태 객체는 &lt;code&gt;&lt;a href=&quot;navigationextras&quot;&gt;NavigationExtras&lt;/a&gt;&lt;/code&gt; 에 의해 정의되며 개발자가 정의한 상태 값과 라우터가 모든 라우터 전환 / 탐색에 할당하는 고유 ID를 포함합니다.</target>
        </trans-unit>
        <trans-unit id="29682628931d961e1dc643e174f6cb46d55f3a40" translate="yes" xml:space="preserve">
          <source>The statement context may also refer to properties of the template's own context. In the following examples, the template &lt;code&gt;$event&lt;/code&gt; object, a &lt;a href=&quot;template-syntax#template-input-variable&quot;&gt;template input variable&lt;/a&gt; (&lt;code&gt;let hero&lt;/code&gt;), and a &lt;a href=&quot;template-syntax#ref-vars&quot;&gt;template reference variable&lt;/a&gt; (&lt;code&gt;#heroForm&lt;/code&gt;) are passed to an event handling method of the component.</source>
          <target state="translated">명령문 컨텍스트는 템플리트 자체 컨텍스트의 특성을 나타낼 수도 있습니다. 다음 예제에서 템플릿 &lt;code&gt;$event&lt;/code&gt; 객체, &lt;a href=&quot;template-syntax#template-input-variable&quot;&gt;템플릿 입력 변수&lt;/a&gt; ( &lt;code&gt;let hero&lt;/code&gt; ) 및 &lt;a href=&quot;template-syntax#ref-vars&quot;&gt;템플릿 참조 변수&lt;/a&gt; ( &lt;code&gt;#heroForm&lt;/code&gt; )는 구성 요소의 이벤트 처리 방법으로 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="ee7031536fc9f3201d33e673cc50dc352588d037" translate="yes" xml:space="preserve">
          <source>The static and resolved data of this route</source>
          <target state="translated">이 경로의 정적 및 해결 된 데이터</target>
        </trans-unit>
        <trans-unit id="6079268a1495ab3832f3c122c48c8debcb04466b" translate="yes" xml:space="preserve">
          <source>The steps are the same as using the &lt;code&gt;providers&lt;/code&gt; array, with the exception of using the &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; array instead.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; 배열을 대신 사용하는 것을 제외하고는 단계는 &lt;code&gt;providers&lt;/code&gt; 배열 을 사용하는 것과 같습니다 .</target>
        </trans-unit>
        <trans-unit id="7019f7ed50fbce076b2ffcd0fd378bb53f9230fa" translate="yes" xml:space="preserve">
          <source>The steps below outline the data flow from model to view when the &lt;code&gt;favoriteColor&lt;/code&gt; changes from &lt;em&gt;Blue&lt;/em&gt; to &lt;em&gt;Red&lt;/em&gt;.</source>
          <target state="translated">아래 단계는 &lt;code&gt;favoriteColor&lt;/code&gt; 가 &lt;em&gt;파란색&lt;/em&gt; 에서 &lt;em&gt;빨간색으로&lt;/em&gt; 변경 될 때 모델에서 데이터 흐름을 보여 줍니다.</target>
        </trans-unit>
        <trans-unit id="8f083b699a0e24cfb31552a7c5515dedc3bffa68" translate="yes" xml:space="preserve">
          <source>The steps below outline the data flow from model to view.</source>
          <target state="translated">아래 단계에서는 모델 간 데이터 흐름을 간략하게 설명합니다.</target>
        </trans-unit>
        <trans-unit id="d6d931d512cd5180e215ff2bd54df9514cdbd37a" translate="yes" xml:space="preserve">
          <source>The steps below outline the data flow from view to model when the input value changes from &lt;em&gt;Red&lt;/em&gt; to &lt;em&gt;Blue&lt;/em&gt;.</source>
          <target state="translated">아래 단계에서는 입력 값이 &lt;em&gt;빨간색&lt;/em&gt; 에서 &lt;em&gt;파란색으로&lt;/em&gt; 변경 될 때 뷰에서 모델로의 데이터 흐름을 간략하게 설명합니다 .</target>
        </trans-unit>
        <trans-unit id="cf66d9ec419458eca31557b6784e06c3d74c7302" translate="yes" xml:space="preserve">
          <source>The steps below outline the data flow from view to model.</source>
          <target state="translated">아래 단계는 뷰에서 모델로의 데이터 흐름을 간략하게 설명합니다.</target>
        </trans-unit>
        <trans-unit id="93bcd38a5f62ce5f433e4b3619e142ff10dbf2d5" translate="yes" xml:space="preserve">
          <source>The steps below show you how to do the following:</source>
          <target state="translated">아래 단계는 다음을 수행하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="b62b2ca3bd1da7bcd7ed67d55220aa0c687e3b42" translate="yes" xml:space="preserve">
          <source>The strategy that controls how a component is transformed in a custom element.</source>
          <target state="translated">사용자 정의 요소에서 구성 요소를 변환하는 방법을 제어하는 ​​전략입니다.</target>
        </trans-unit>
        <trans-unit id="930fe4769070145b5d1902f6b39df80e384668cc" translate="yes" xml:space="preserve">
          <source>The strategy that the default change detector uses to detect changes. When set, takes effect the next time change detection is triggered.</source>
          <target state="translated">기본 변경 감지기가 변경을 감지하는 데 사용하는 전략입니다. 설정하면 다음에 변경 감지가 트리거 될 때 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="bf8be7fcf53ea5a196bf46985745bd43109fefe5" translate="yes" xml:space="preserve">
          <source>The strict checks of the &lt;code&gt;setValue()&lt;/code&gt; method help catch nesting errors in complex forms, while &lt;code&gt;patchValue()&lt;/code&gt; fails silently on those errors.</source>
          <target state="translated">&lt;code&gt;setValue()&lt;/code&gt; 메소드 의 엄격한 검사는 복잡한 형식의 중첩 오류를 포착하는 데 도움이되는 반면 &lt;code&gt;patchValue()&lt;/code&gt; 는 해당 오류에서 자동으로 실패합니다.</target>
        </trans-unit>
        <trans-unit id="372bafa1bce494ea990979dd34c53dd96c7cc2ca" translate="yes" xml:space="preserve">
          <source>The string assigned to &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; is not a &lt;a href=&quot;template-syntax#template-expressions&quot;&gt;template expression&lt;/a&gt;. Rather, it's a &lt;em&gt;microsyntax&lt;/em&gt;&amp;mdash;a little language of its own that Angular interprets. The string &lt;code&gt;&quot;let &lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt; of items&quot;&lt;/code&gt; means:</source>
          <target state="translated">&lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 에 지정된 문자열 은 &lt;a href=&quot;template-syntax#template-expressions&quot;&gt;템플릿 표현식&lt;/a&gt; 이 아닙니다 . 오히려, 그것은 Angular가 해석하는 자체 언어 인 작은 &lt;em&gt;구문&lt;/em&gt; 입니다. 문자열 &lt;code&gt;&quot;let &lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt; of items&quot;&lt;/code&gt; 은 다음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="e44daa65c98054f261ccfa5f7cf11e49ee653d27" translate="yes" xml:space="preserve">
          <source>The string form of &lt;code&gt;&lt;a href=&quot;loadchildren&quot;&gt;LoadChildren&lt;/a&gt;&lt;/code&gt; is deprecated (see &lt;code&gt;&lt;a href=&quot;deprecatedloadchildren&quot;&gt;DeprecatedLoadChildren&lt;/a&gt;&lt;/code&gt;). The function form (&lt;code&gt;&lt;a href=&quot;loadchildrencallback&quot;&gt;LoadChildrenCallback&lt;/a&gt;&lt;/code&gt;) should be used instead.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;loadchildren&quot;&gt;LoadChildren&lt;/a&gt;&lt;/code&gt; 의 문자열 형식 은 더 이상 사용되지 않습니다 ( &lt;code&gt;&lt;a href=&quot;deprecatedloadchildren&quot;&gt;DeprecatedLoadChildren&lt;/a&gt;&lt;/code&gt; 참조 ). 대신 함수 양식 ( &lt;code&gt;&lt;a href=&quot;loadchildrencallback&quot;&gt;LoadChildrenCallback&lt;/a&gt;&lt;/code&gt; )을 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="c5e2186518aafc34e0de597f98ce5a35b638ef12" translate="yes" xml:space="preserve">
          <source>The string is a fixed value that you can put directly into the template.</source>
          <target state="translated">문자열은 템플릿에 직접 넣을 수있는 고정 된 값입니다.</target>
        </trans-unit>
        <trans-unit id="ee37f1eaca83dd9bb097b5466bff65a943fac485" translate="yes" xml:space="preserve">
          <source>The string to transform to lower case.</source>
          <target state="translated">소문자로 변환 할 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="cb45bf71782ca8d0a97a51a6af91cbb4a490dedc" translate="yes" xml:space="preserve">
          <source>The string to transform to title case.</source>
          <target state="translated">제목 대소 문자로 변환 할 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="417a5ce2ca98d102c22ce8871b11edab28c7f8e7" translate="yes" xml:space="preserve">
          <source>The string to transform to upper case.</source>
          <target state="translated">대문자로 변환 할 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="79bdda991ab152b790e3070b35eb8fda7e4c2b45" translate="yes" xml:space="preserve">
          <source>The structure of an NgModule is the same whether it is a root module or a feature module. In the CLI generated feature module, there are two JavaScript import statements at the top of the file: the first imports &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt;, which, like the root module, lets you use the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; decorator; the second imports &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt;, which contributes many common directives such as &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt;. Feature modules import &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; instead of &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt;, which is only imported once in the root module. &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; only contains information for common directives such as &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; which are needed in most templates, whereas &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; configures the Angular app for the browser which needs to be done only once.</source>
          <target state="translated">NgModule의 구조는 루트 모듈이든 피처 모듈이든 동일합니다. CLI 생성 기능 모듈에는 파일 맨 위에 두 개의 JavaScript 가져 오기 명령문이 있습니다. 첫 번째 가져 오기 &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 은 루트 모듈과 같이 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 데코레이터 를 사용할 수 있습니다 . 두 번째는 &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; 을 가져 오며 &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 와 같은 많은 공통 지시문 을 제공 합니다. 피처 모듈 은 &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; 대신 &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; 을 가져옵니다 . 루트 모듈에서는 한 번만 가져옵니다 . &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; 에는 &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 와 같은 공통 지시문에 대한 정보 만 포함됩니다. &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; 은 한 번만 수행해야하는 브라우저의 Angular 앱을 구성하는 반면 대부분의 템플릿에 필요합니다.</target>
        </trans-unit>
        <trans-unit id="de78df528fc5f787d89545140bece8187c6b8538" translate="yes" xml:space="preserve">
          <source>The stub selectors match the selectors for the corresponding real components. But their templates and classes are empty.</source>
          <target state="translated">스터브 선택기는 해당 실제 구성 요소의 선택기와 일치합니다. 그러나 템플릿과 클래스는 비어 있습니다.</target>
        </trans-unit>
        <trans-unit id="a2d59788c70b71518e84d399dc1f8c1b1995a79e" translate="yes" xml:space="preserve">
          <source>The styles specified in &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; metadata &lt;em&gt;apply only within the template of that component&lt;/em&gt;.</source>
          <target state="translated">에 지정된 스타일 &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; 메타 데이터 &lt;em&gt;에만 해당 구성 요소의 템플릿 내에서 적용됩니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="f48dea481324aa0b7a7a250484ea3649910069fd" translate="yes" xml:space="preserve">
          <source>The suggested polyfills are the ones that run full Angular applications. You may need additional polyfills to support features not covered by this list. Note that polyfills cannot magically transform an old, slow browser into a modern, fast one.</source>
          <target state="translated">제안 된 폴리 필은 전체 각도 응용 프로그램을 실행하는 폴리 필입니다. 이 목록에서 다루지 않는 기능을 지원하려면 추가 폴리 필이 필요할 수 있습니다. 폴리 필은 오래되고 느린 브라우저를 현대적이고 빠른 브라우저로 마술처럼 변형시킬 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="629cf41ae2bb443d131c775aab136684c9761d9b" translate="yes" xml:space="preserve">
          <source>The switch directives are particularly useful for adding and removing &lt;em&gt;component elements&lt;/em&gt;. This example switches among four &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; components defined in the &lt;code&gt;item-switch.components.ts&lt;/code&gt; file. Each component has an &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt;&lt;a href=&quot;template-syntax#inputs-outputs&quot;&gt;input property&lt;/a&gt; which is bound to the &lt;code&gt;currentItem&lt;/code&gt; of the parent component.</source>
          <target state="translated">스위치 지시문은 특히 &lt;em&gt;구성 요소&lt;/em&gt; 를 추가하고 제거하는 데 유용합니다 . 이 예 에서는 &lt;code&gt;item-switch.components.ts&lt;/code&gt; 파일에 정의 된 4 개의 &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; 구성 요소 간에 전환 합니다. 각 컴포넌트에는 상위 컴포넌트 의 &lt;code&gt;currentItem&lt;/code&gt; 에 바인딩 된 &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;template-syntax#inputs-outputs&quot;&gt; 입력 특성&lt;/a&gt; 이 있습니다.</target>
        </trans-unit>
        <trans-unit id="cb1898cd24b327b717bb4aef090ad4e9542fafed" translate="yes" xml:space="preserve">
          <source>The switch from the &lt;em&gt;local variable&lt;/em&gt; to the &lt;em&gt;ViewChild&lt;/em&gt; technique is solely for the purpose of demonstration.</source>
          <target state="translated">&lt;em&gt;로컬 변수&lt;/em&gt; 에서 &lt;em&gt;ViewChild&lt;/em&gt; 기술로 의 전환 은 데모 목적으로 만 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="40988748687c9ee6daa755f997551a5b4a1441e8" translate="yes" xml:space="preserve">
          <source>The switch value assigned to &lt;code&gt;&lt;a href=&quot;../api/common/ngswitch&quot;&gt;NgSwitch&lt;/a&gt;&lt;/code&gt; (&lt;code&gt;hero.emotion&lt;/code&gt;) determines which (if any) of the switch cases are displayed.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/ngswitch&quot;&gt;NgSwitch&lt;/a&gt;&lt;/code&gt; ( &lt;code&gt;hero.emotion&lt;/code&gt; )에 지정된 스위치 값 은 표시되는 스위치 케이스 (있는 경우)를 결정합니다.</target>
        </trans-unit>
        <trans-unit id="9a62c528f0a931f89b2287d8a503aed1f8009829" translate="yes" xml:space="preserve">
          <source>The symbol to localize.</source>
          <target state="translated">현지화 할 기호입니다.</target>
        </trans-unit>
        <trans-unit id="4ed679bf2daa47968c73d3b3701e2547464b78f8" translate="yes" xml:space="preserve">
          <source>The synchronous &lt;em&gt;beforeEach&lt;/em&gt;</source>
          <target state="translated">동기적인 &lt;em&gt;beforeEach&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="abbd548fb3da1a05f8609c8a3757af73c0e7704c" translate="yes" xml:space="preserve">
          <source>The synchronous validators registered with this group.</source>
          <target state="translated">이 그룹에 등록 된 동기 유효성 검증기</target>
        </trans-unit>
        <trans-unit id="d372dcb466775574685c3fae862c265b2b17aef2" translate="yes" xml:space="preserve">
          <source>The syntax in this example is as follows:</source>
          <target state="translated">이 예제의 구문은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="7e8b4d98df92da09eb34184a7a9efa8bfa65588d" translate="yes" xml:space="preserve">
          <source>The syntax may seem strange to you but users are unlikely to notice or care as long as the URL can be emailed and pasted into a browser address bar as this one can.</source>
          <target state="translated">구문이 이상하게 보일지 모르지만 URL을 이메일로 보내서 브라우저 주소 표시 줄에 붙여 넣을 수있는 한 사용자는주의를 기울이거나주의를 기울이지 않을 것입니다.</target>
        </trans-unit>
        <trans-unit id="5f242d259e92ca5a53c10705d273887b830471cd" translate="yes" xml:space="preserve">
          <source>The table below summarizes the key differences between reactive and template-driven forms.</source>
          <target state="translated">아래 표에는 반응 형과 템플릿 기반 양식의 주요 차이점이 요약되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="08365a3c201aa0c652bb798a6188518150b14a2a" translate="yes" xml:space="preserve">
          <source>The target event determines the shape of the &lt;code&gt;$event&lt;/code&gt; object. If the target event is a native DOM element event, then &lt;code&gt;$event&lt;/code&gt; is a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events&quot;&gt;DOM event object&lt;/a&gt;, with properties such as &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkwithhref#target&quot;&gt;target&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;target.value&lt;/code&gt;.</source>
          <target state="translated">대상 이벤트는 &lt;code&gt;$event&lt;/code&gt; 객체 의 모양을 결정 합니다. 대상 이벤트가 기본 DOM 요소 이벤트 인 경우 &lt;code&gt;$event&lt;/code&gt; 는 &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkwithhref#target&quot;&gt;target&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;target.value&lt;/code&gt; 와 같은 특성을 가진 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events&quot;&gt;DOM 이벤트 오브젝트&lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="088749979b09bfd46d68e94f37fbfac7f9f02497" translate="yes" xml:space="preserve">
          <source>The target in the square brackets, &lt;code&gt;[]&lt;/code&gt;, is the property you decorate with &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; in the child component. The binding source, the part to the right of the equal sign, is the data that the parent component passes to the nested component.</source>
          <target state="translated">대괄호 &lt;code&gt;[]&lt;/code&gt; 의 대상 은 자식 구성 요소에서 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; 으로 장식하는 속성 입니다. 등호 오른쪽에있는 바인딩 소스는 부모 구성 요소가 중첩 구성 요소에 전달하는 데이터입니다.</target>
        </trans-unit>
        <trans-unit id="ea8a5033f54ae9c4081d5ab74a38829cd1975b5f" translate="yes" xml:space="preserve">
          <source>The target named &quot;touch&quot; uses our builder, which we published to &lt;code&gt;@example/command-runner&lt;/code&gt;. (See &lt;a href=&quot;creating-libraries#publishing-your-library&quot;&gt;Publishing your Library&lt;/a&gt;)</source>
          <target state="translated">&quot;touch&quot;라는 대상은 빌더를 사용하며 &lt;code&gt;@example/command-runner&lt;/code&gt; 게시했습니다 . ( &lt;a href=&quot;creating-libraries#publishing-your-library&quot;&gt;도서관 공개&lt;/a&gt; 참조 )</target>
        </trans-unit>
        <trans-unit id="83189c190de1ae321a2890e3cde83b83c7039a71" translate="yes" xml:space="preserve">
          <source>The target property accepts a string value.</source>
          <target state="translated">대상 속성은 문자열 값을 허용합니다.</target>
        </trans-unit>
        <trans-unit id="9803929ad21484881b4d3f6acabd34faf9ef3af2" translate="yes" xml:space="preserve">
          <source>The target to apply service worker to.</source>
          <target state="translated">서비스 워커를 적용 할 대상입니다.</target>
        </trans-unit>
        <trans-unit id="758b33e79798a18b4b5d7ce28a40f40423430f66" translate="yes" xml:space="preserve">
          <source>The target to apply web worker to.</source>
          <target state="translated">웹 워커를 적용 할 대상입니다.</target>
        </trans-unit>
        <trans-unit id="4832cdf5716df7acd57fe0ac87672a04e59ff3aa" translate="yes" xml:space="preserve">
          <source>The target, &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt;, which is an &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; property in the child component class, receives its value from the parent's property, &lt;code&gt;currentItem&lt;/code&gt;. When you click delete, the child component raises an event, &lt;code&gt;deleteRequest&lt;/code&gt;, which is the argument for the parent's &lt;code&gt;crossOffItem()&lt;/code&gt; method.</source>
          <target state="translated">자식 구성 요소 클래스 의 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; &lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt; () 속성 인 대상 &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; 은 부모 속성 인 &lt;code&gt;currentItem&lt;/code&gt; 으로부터 값을받습니다 . delete를 클릭하면 자식 구성 요소 는 부모의 &lt;code&gt;crossOffItem()&lt;/code&gt; 메서드에 대한 인수 인 &lt;code&gt;deleteRequest&lt;/code&gt; 이벤트 를 발생시킵니다 .</target>
        </trans-unit>
        <trans-unit id="cd2fa7e7402ff15d8269c74078e6ca3033630d4e" translate="yes" xml:space="preserve">
          <source>The telltale signs of &lt;em&gt;content projection&lt;/em&gt; are twofold:</source>
          <target state="translated">&lt;em&gt;콘텐츠 프로젝션의 주요&lt;/em&gt; 징후 는 두 가지입니다.</target>
        </trans-unit>
        <trans-unit id="e2a40647498302ae30e3c37d356dbc6aee8a2f1c" translate="yes" xml:space="preserve">
          <source>The template and style filenames reference the HTML and CSS files that StackBlitz generates.</source>
          <target state="translated">템플릿 및 스타일 파일 이름은 StackBlitz가 생성하는 HTML 및 CSS 파일을 참조합니다.</target>
        </trans-unit>
        <trans-unit id="c4786e4078a2207abe9c4cfa9d1d9cf3ab9a3992" translate="yes" xml:space="preserve">
          <source>The template associated with a component binds an animation trigger to an element.</source>
          <target state="translated">구성 요소와 연결된 템플릿은 애니메이션 트리거를 요소에 바인딩합니다.</target>
        </trans-unit>
        <trans-unit id="7456b59897a0fe9f7fab60b1fd5714f118ee168e" translate="yes" xml:space="preserve">
          <source>The template associated with this component makes use of the defined trigger by binding to an element within its template code.</source>
          <target state="translated">이 컴포넌트와 연관된 템플리트는 템플리트 코드 내의 요소에 바인딩하여 정의 된 트리거를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="ad2640340c3b2204b3e2187d3156835ccc870fd9" translate="yes" xml:space="preserve">
          <source>The template displays the two component properties using double curly brace interpolation:</source>
          <target state="translated">템플릿은 이중 중괄호 보간을 사용하여 두 가지 구성 요소 속성을 표시합니다.</target>
        </trans-unit>
        <trans-unit id="576bb8173300bc75c8165cf5e1686bbdae4c4807" translate="yes" xml:space="preserve">
          <source>The template expression inside the double quotes, &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;=&quot;heroes.length &amp;gt; 3&quot;&lt;/code&gt;, looks and behaves much like TypeScript. When the component's list of heroes has more than three items, Angular adds the paragraph to the DOM and the message appears. If there are three or fewer items, Angular omits the paragraph, so no message appears. For more information, see the &lt;a href=&quot;template-syntax#template-expressions&quot;&gt;template expressions&lt;/a&gt; section of the &lt;a href=&quot;template-syntax&quot;&gt;Template Syntax&lt;/a&gt; page.</source>
          <target state="translated">큰 따옴표 안의 템플릿 표현식 &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;=&quot;heroes.length &amp;gt; 3&quot;&lt;/code&gt; 은 TypeScript와 매우 유사하게 보이고 동작합니다. 구성 요소의 영웅 목록에 3 개 이상의 항목이 있으면 Angular는 단락을 DOM에 추가하고 메시지가 나타납니다. 항목이 3 개 이하인 경우 Angular는 단락을 생략하므로 메시지가 나타나지 않습니다. 자세한 내용 은 &lt;a href=&quot;template-syntax&quot;&gt;템플릿 구문&lt;/a&gt; 페이지 의 &lt;a href=&quot;template-syntax#template-expressions&quot;&gt;템플릿 표현식&lt;/a&gt; 섹션을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="06a26eec315b228b84cdf45c3df4a6172bf6d5de" translate="yes" xml:space="preserve">
          <source>The template expression should evaluate to the type of value that the target property expects. Return a string if the target property expects a string, a number if it expects a number, an object if it expects an object, and so on.</source>
          <target state="translated">템플릿 표현식은 대상 속성에 필요한 값 유형으로 평가해야합니다. 대상 속성에 문자열이 필요한 경우 문자열, 숫자가 필요한 경우 숫자, 개체가 필요한 경우 개체 등을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="c2d8c395975bbaf307f8b6ad3d0e90daae25b98a" translate="yes" xml:space="preserve">
          <source>The template expression to the right of the equals (=) contains a space-delimited string of CSS classes that the Router will add when this link is active (and remove when the link is inactive). You set the &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkactive&quot;&gt;RouterLinkActive&lt;/a&gt;&lt;/code&gt; directive to a string of classes such as &lt;code&gt;[&lt;a href=&quot;../api/router/routerlinkactive&quot;&gt;routerLinkActive&lt;/a&gt;]=&quot;'active fluffy'&quot;&lt;/code&gt; or bind it to a component property that returns such a string.</source>
          <target state="translated">등호 (=)의 오른쪽에있는 템플리트 표현식에는 공백으로 구분 된 CSS 클래스 문자열이 포함되어 있습니다. CSS 링크는이 링크가 활성화 될 때 추가되고 링크가 비활성화되면 제거됩니다. &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkactive&quot;&gt;RouterLinkActive&lt;/a&gt;&lt;/code&gt; 지시문을 &lt;code&gt;[&lt;a href=&quot;../api/router/routerlinkactive&quot;&gt;routerLinkActive&lt;/a&gt;]=&quot;'active fluffy'&quot;&lt;/code&gt; 와 같은 클래스 문자열로 설정 하거나 이러한 문자열을 리턴하는 컴포넌트 특성에 바인드하십시오.</target>
        </trans-unit>
        <trans-unit id="c4a5ffd1d833be7be8234c4da4123676ff8d6c69" translate="yes" xml:space="preserve">
          <source>The template input elements do &lt;em&gt;not&lt;/em&gt; use &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">템플릿 입력 요소는 &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; 을 사용 하지 &lt;em&gt;않습니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="e42a3efc7ee16d8ee04f26132d4fe495e4010874" translate="yes" xml:space="preserve">
          <source>The template is a multi-line string within ECMAScript 2015 backticks (&lt;code&gt;`&lt;/code&gt;). The backtick (&lt;code&gt;`&lt;/code&gt;)&amp;mdash;which is &lt;em&gt;not&lt;/em&gt; the same character as a single quote (&lt;code&gt;'&lt;/code&gt;)&amp;mdash;allows you to compose a string over several lines, which makes the HTML more readable.</source>
          <target state="translated">템플릿은 ECMAScript 2015 백틱 ( &lt;code&gt;`&lt;/code&gt; ) 내의 여러 줄 문자열 입니다. 작은 따옴표 ( &lt;code&gt;'&lt;/code&gt; ) 와 같은 문자 가 &lt;em&gt;아닌&lt;/em&gt; 역 따옴표 ( &lt;code&gt;`&lt;/code&gt; ) 를 사용하면 여러 줄에 걸쳐 문자열을 작성할 수있어 HTML을 더 읽기 쉽게 만들 수 있습니다.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="3bfaca46091594f4d1d50328af755b641a1f6fb4" translate="yes" xml:space="preserve">
          <source>The template is compiled within the context of an NgModule&amp;mdash;the NgModule within which the template's component is declared&amp;mdash;which determines the set of selectors using the following rules:</source>
          <target state="translated">템플릿은 NgModule (템플릿의 구성 요소가 선언 된 NgModule)의 컨텍스트 내에서 컴파일되어 다음 규칙을 사용하여 선택기 세트를 결정합니다.</target>
        </trans-unit>
        <trans-unit id="08d9755e408a260636b09bfef92316faea44cef4" translate="yes" xml:space="preserve">
          <source>The template is completely self contained. It doesn't bind to the component, and the component does nothing.</source>
          <target state="translated">템플릿은 완전히 자체 포함되어 있습니다. 구성 요소에 바인딩되지 않으며 구성 요소가 아무 것도 수행하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="70313244a4cd1e80d96df911743747c5b1d0a1c0" translate="yes" xml:space="preserve">
          <source>The template options object, &lt;code&gt;angularCompilerOptions&lt;/code&gt;, is a sibling to the &lt;code&gt;compilerOptions&lt;/code&gt; object that supplies standard options to the TypeScript compiler.</source>
          <target state="translated">템플릿 옵션 객체 인 &lt;code&gt;angularCompilerOptions&lt;/code&gt; 는 TypeScript 컴파일러에 표준 옵션을 제공 하는 &lt;code&gt;compilerOptions&lt;/code&gt; 객체 의 형제 입니다.</target>
        </trans-unit>
        <trans-unit id="51b07ca66a0c80d8a3f63013141583e49737c085" translate="yes" xml:space="preserve">
          <source>The template reference variable named &lt;code&gt;box&lt;/code&gt;, declared on the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; element, refers to the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; element itself. The code uses the &lt;code&gt;box&lt;/code&gt; variable to get the input element's &lt;code&gt;value&lt;/code&gt; and display it with interpolation between &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; tags.</source>
          <target state="translated">&lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 요소 에 선언 된 &lt;code&gt;box&lt;/code&gt; 라는 템플리트 참조 변수 는 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 요소 자체를 참조합니다. 이 코드는 &lt;code&gt;box&lt;/code&gt; 변수를 사용하여 입력 요소의 &lt;code&gt;value&lt;/code&gt; 을 가져 와서 &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; 태그 사이의 보간으로 표시합니다 .</target>
        </trans-unit>
        <trans-unit id="de2262f6eff650096d5ec2a922c11474976de6e1" translate="yes" xml:space="preserve">
          <source>The template syntax provides specialized one-way bindings for scenarios less well-suited to property binding.</source>
          <target state="translated">템플릿 구문은 속성 바인딩에 적합하지 않은 시나리오를위한 특수한 단방향 바인딩을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="083a3f1dd8ef9b722e60e2598176af5110f9dbf5" translate="yes" xml:space="preserve">
          <source>The test assumes (correctly in this case) that the runtime event handler&amp;mdash;the component's &lt;code&gt;click()&lt;/code&gt; method&amp;mdash;doesn't care about the event object.</source>
          <target state="translated">테스트에서는 런타임 이벤트 핸들러 &lt;code&gt;click()&lt;/code&gt; 구성 요소의 click () 메소드 ) 가 이벤트 객체를 신경 쓰지 않는다고 가정합니다 (이 경우에는 올바르게 ) .</target>
        </trans-unit>
        <trans-unit id="3fee678255a89c608b1621887a0565d3703b71c4" translate="yes" xml:space="preserve">
          <source>The test configuration can use the &lt;code&gt;SharedModule&lt;/code&gt; too as seen in this alternative setup:</source>
          <target state="translated">테스트 &lt;code&gt;SharedModule&lt;/code&gt; 이 대체 설정에서 볼 수있는 것처럼 SharedModule을 사용할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="9b3f7b35cc6454035e62b2373f127b23cbdae65d" translate="yes" xml:space="preserve">
          <source>The test consumes that spy in the same way it did earlier.</source>
          <target state="translated">테스트는 이전과 같은 방식으로 스파이를 소비합니다.</target>
        </trans-unit>
        <trans-unit id="64d8dd78adadc9a255e228a4c2bdbf4eb2d5cae3" translate="yes" xml:space="preserve">
          <source>The test detects that event through its subscription to &lt;code&gt;selected&lt;/code&gt;.</source>
          <target state="translated">테스트는 &lt;code&gt;selected&lt;/code&gt; 에 대한 구독을 통해 해당 이벤트를 감지합니다 .</target>
        </trans-unit>
        <trans-unit id="8a9ff9ce0ff2aea3ea5d9b5e4c05171faa52806f" translate="yes" xml:space="preserve">
          <source>The test fails when the &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; tries to create the component.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; 가 구성 요소를 작성하려고 시도 하면 테스트에 실패합니다 .</target>
        </trans-unit>
        <trans-unit id="dc61697c7a24dc30137c8a1be726e1064a8ae44b" translate="yes" xml:space="preserve">
          <source>The test file extension &lt;strong&gt;must be &lt;code&gt;.spec.ts&lt;/code&gt;&lt;/strong&gt; so that tooling can identify it as a file with tests (AKA, a &lt;em&gt;spec&lt;/em&gt; file).</source>
          <target state="translated">툴링 이 테스트 파일 (AKA, &lt;em&gt;스펙&lt;/em&gt; 파일) 로 식별 할 수 있도록 테스트 파일 확장자 &lt;strong&gt;는 &lt;code&gt;.spec.ts&lt;/code&gt; &lt;/strong&gt;&lt;strong&gt; 여야합니다&lt;/strong&gt; .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e1c2770aafe4156298be6944b33c74e2f41bc2b8" translate="yes" xml:space="preserve">
          <source>The test host sets the component's &lt;code&gt;hero&lt;/code&gt; input property with its test hero. It binds the component's &lt;code&gt;selected&lt;/code&gt; event with its &lt;code&gt;onSelected&lt;/code&gt; handler, which records the emitted hero in its &lt;code&gt;selectedHero&lt;/code&gt; property.</source>
          <target state="translated">테스트 호스트는 구성 요소의 &lt;code&gt;hero&lt;/code&gt; 입력 속성을 테스트 히어로로 설정합니다. 구성 요소의 &lt;code&gt;selected&lt;/code&gt; 이벤트를 &lt;code&gt;onSelected&lt;/code&gt; 핸들러 와 바인딩합니다.이 핸들러는 &lt;code&gt;selectedHero&lt;/code&gt; 속성 에 방출 된 영웅을 기록합니다 .</target>
        </trans-unit>
        <trans-unit id="3f2fe2155132bb0d67244809298ea98ce16fe29e" translate="yes" xml:space="preserve">
          <source>The test must wait for the &lt;code&gt;getQuote()&lt;/code&gt; observable to emit the next quote. Instead of calling &lt;code&gt;&lt;a href=&quot;../api/core/applicationref#tick&quot;&gt;tick()&lt;/a&gt;&lt;/code&gt;, it calls &lt;code&gt;fixture.whenStable()&lt;/code&gt;.</source>
          <target state="translated">테스트는 &lt;code&gt;getQuote()&lt;/code&gt; 이 다음 인용문을 방출 할 때까지 기다려야합니다 . &lt;code&gt;&lt;a href=&quot;../api/core/applicationref#tick&quot;&gt;tick()&lt;/a&gt;&lt;/code&gt; 을 호출하는 대신 &lt;code&gt;fixture.whenStable()&lt;/code&gt; 호출합니다 .</target>
        </trans-unit>
        <trans-unit id="eae43c82340aebd9536a260fd2377f5061a497ef" translate="yes" xml:space="preserve">
          <source>The test resumes within the promise callback, which calls &lt;code&gt;&lt;a href=&quot;../api/core/testing/componentfixture#detectChanges&quot;&gt;detectChanges()&lt;/a&gt;&lt;/code&gt; to update the quote element with the expected text.</source>
          <target state="translated">promise 콜백 내에서 테스트가 다시 시작됩니다.이 콜백에서는 &lt;code&gt;&lt;a href=&quot;../api/core/testing/componentfixture#detectChanges&quot;&gt;detectChanges()&lt;/a&gt;&lt;/code&gt; 를 호출 하여 quote 요소를 예상 텍스트로 업데이트합니다.</target>
        </trans-unit>
        <trans-unit id="9991de36b4ebc0ec198e7d693844d908feef9de2" translate="yes" xml:space="preserve">
          <source>The test suite setup provided the same router spy &lt;a href=&quot;testing#routing-component&quot;&gt;described above&lt;/a&gt; which spies on the router without actually navigating.</source>
          <target state="translated">테스트 스위트 설정은 실제로 탐색하지 않고 라우터를 감시 &lt;a href=&quot;testing#routing-component&quot;&gt;하는 위에서 설명한&lt;/a&gt; 동일한 라우터 스파이를 제공했습니다 .</target>
        </trans-unit>
        <trans-unit id="6e4274a8f1842c774f28cff1fab41deb042b588a" translate="yes" xml:space="preserve">
          <source>The test triggered a &quot;click&quot; event with a &lt;code&gt;null&lt;/code&gt; event object.</source>
          <target state="translated">테스트에서 &lt;code&gt;null&lt;/code&gt; 이벤트 오브젝트 가있는 &quot;click&quot;이벤트가 트리거되었습니다 .</target>
        </trans-unit>
        <trans-unit id="64322dc55f479cb397712aa1ca434f09788d33d9" translate="yes" xml:space="preserve">
          <source>The testing goal is to verify that such bindings work as expected. The tests should set input values and listen for output events.</source>
          <target state="translated">테스트 목표는 이러한 바인딩이 예상대로 작동하는지 확인하는 것입니다. 테스트는 입력 값을 설정하고 출력 이벤트를 수신해야합니다.</target>
        </trans-unit>
        <trans-unit id="6e2010246d07d1175ff55b50a4ac15be59351555" translate="yes" xml:space="preserve">
          <source>The testing shims (&lt;code&gt;karma-test-shim&lt;/code&gt;, &lt;code&gt;browser-test-shim&lt;/code&gt;) call it for you so there is rarely a reason for you to call it yourself.</source>
          <target state="translated">테스트 심 ( &lt;code&gt;karma-test-shim&lt;/code&gt; , &lt;code&gt;browser-test-shim&lt;/code&gt; ) 이이 를 호출하므로 직접 호출 할 이유가 거의 없습니다.</target>
        </trans-unit>
        <trans-unit id="148b2781f0537830461040ebc4675f60de170e4e" translate="yes" xml:space="preserve">
          <source>The testing shims (&lt;code&gt;karma-test-shim&lt;/code&gt;, &lt;code&gt;browser-test-shim&lt;/code&gt;) establish the &lt;a href=&quot;testing&quot;&gt;initial test environment&lt;/a&gt; and a default testing module. The default testing module is configured with basic declaratives and some Angular service substitutes that every tester needs.</source>
          <target state="translated">테스트 심 ( &lt;code&gt;karma-test-shim&lt;/code&gt; , &lt;code&gt;browser-test-shim&lt;/code&gt; )은 &lt;a href=&quot;testing&quot;&gt;초기 테스트 환경&lt;/a&gt; 과 기본 테스트 모듈을 설정합니다. 기본 테스트 모듈은 기본 선언과 모든 테스터가 필요로하는 일부 Angular 서비스 대체물로 구성됩니다.</target>
        </trans-unit>
        <trans-unit id="32d01fc5844e040dbbc5a7fa7fc314aed7f8af26" translate="yes" xml:space="preserve">
          <source>The tests described in this guide are in &lt;code&gt;src/testing/http-client.spec.ts&lt;/code&gt;. There are also tests of an application data service that call &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; in &lt;code&gt;src/app/heroes/heroes.service.spec.ts&lt;/code&gt;.</source>
          <target state="translated">이 안내서에 설명 된 테스트는 &lt;code&gt;src/testing/http-client.spec.ts&lt;/code&gt; 에 있습니다. &lt;code&gt;src/app/heroes/heroes.service.spec.ts&lt;/code&gt; 에서 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; 를 호출하는 응용 프로그램 데이터 서비스에 대한 테스트도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c46d6deffac15f691e67af3e7802efbd62c6f4b5" translate="yes" xml:space="preserve">
          <source>The tests in this guide are designed to run in a browser so a &lt;code&gt;nativeElement&lt;/code&gt; value will always be an &lt;code&gt;HTMLElement&lt;/code&gt; or one of its derived classes.</source>
          <target state="translated">이 안내서의 테스트는 브라우저에서 실행되도록 설계되었으므로 &lt;code&gt;nativeElement&lt;/code&gt; 값은 항상 &lt;code&gt;HTMLElement&lt;/code&gt; 또는 파생 클래스 중 하나입니다.</target>
        </trans-unit>
        <trans-unit id="97411629b7777fd387f17c68fd54b77f893a322d" translate="yes" xml:space="preserve">
          <source>The tests in this guide only call &lt;code&gt;compileComponents&lt;/code&gt; when necessary.</source>
          <target state="translated">이 가이드의 테스트는 필요할 때만 &lt;code&gt;compileComponents&lt;/code&gt; 를 호출 합니다.</target>
        </trans-unit>
        <trans-unit id="b9b3c07155cb24bc62c23428c9b9b89113dffe1f" translate="yes" xml:space="preserve">
          <source>The tests need access to the (stub) &lt;code&gt;UserService&lt;/code&gt; injected into the &lt;code&gt;WelcomeComponent&lt;/code&gt;.</source>
          <target state="translated">테스트 는 &lt;code&gt;WelcomeComponent&lt;/code&gt; 에 삽입 된 (스텁) &lt;code&gt;UserService&lt;/code&gt; 에 액세스해야합니다 .</target>
        </trans-unit>
        <trans-unit id="552798847cfd969bee03bd536ec0eaa7b9abccb0" translate="yes" xml:space="preserve">
          <source>The tests themselves are almost identical to the stand-alone version:</source>
          <target state="translated">테스트 자체는 독립형 버전과 거의 동일합니다.</target>
        </trans-unit>
        <trans-unit id="f24377c82eb7c604520a6472b6cdeda1e15d8e75" translate="yes" xml:space="preserve">
          <source>The text between the braces is often the name of a component property. Angular replaces that name with the string value of the corresponding component property.</source>
          <target state="translated">중괄호 사이의 텍스트는 종종 구성 요소 특성의 이름입니다. Angular는 해당 이름을 해당 구성 요소 속성의 문자열 값으로 바꿉니다.</target>
        </trans-unit>
        <trans-unit id="7001ead9ab548d59ed3b0b0d47f9fc2feadd5c3b" translate="yes" xml:space="preserve">
          <source>The text string.</source>
          <target state="translated">텍스트 문자열</target>
        </trans-unit>
        <trans-unit id="019a0c6e6325000b9ec468afe8f97d5dd0f39c5b" translate="yes" xml:space="preserve">
          <source>The textbox should both &lt;em&gt;display&lt;/em&gt; the hero's &lt;code&gt;name&lt;/code&gt; property and &lt;em&gt;update&lt;/em&gt; that property as the user types. That means data flows from the component class &lt;em&gt;out to the screen&lt;/em&gt; and from the screen &lt;em&gt;back to the class&lt;/em&gt;.</source>
          <target state="translated">텍스트 상자 에는 영웅의 &lt;code&gt;name&lt;/code&gt; 속성이 &lt;em&gt;표시&lt;/em&gt; 되고 사용자 유형에 따라 해당 속성이 &lt;em&gt;업데이트&lt;/em&gt; 되어야합니다. 이는 데이터가 컴포넌트 클래스 &lt;em&gt;에서 화면으로&lt;/em&gt; 그리고 화면에서 &lt;em&gt;다시&lt;/em&gt; 클래스로 흘러가는 것을 의미합니다 .&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="9c58df2e0d216969a6b8f76eb1c801e78a85b760" translate="yes" xml:space="preserve">
          <source>The third argument, &lt;code&gt;easing&lt;/code&gt;, controls how the animation &lt;a href=&quot;http://easings.net/&quot;&gt;accelerates and decelerates&lt;/a&gt; during its runtime. For example, &lt;code&gt;ease-in&lt;/code&gt; causes the animation to begin slowly, and to pick up speed as it progresses.</source>
          <target state="translated">세 번째 인수 인 &lt;code&gt;easing&lt;/code&gt; 은 런타임 동안 애니메이션의 &lt;a href=&quot;http://easings.net/&quot;&gt;가속 및 감속&lt;/a&gt; 방법을 제어합니다 . 예를 들어 &lt;code&gt;ease-in&lt;/code&gt; 을 사용 하면 애니메이션이 느리게 시작되고 진행 속도가 빨라집니다.</target>
        </trans-unit>
        <trans-unit id="02b20036ccb6a097e5d6133a873e25f13d920be9" translate="yes" xml:space="preserve">
          <source>The third parameter defines a pluralization pattern consisting of pluralization categories and their matching values.</source>
          <target state="translated">세 번째 매개 변수는 복수화 범주 및 해당 값으로 구성된 복수화 패턴을 정의합니다.</target>
        </trans-unit>
        <trans-unit id="e1fbe17ffff22abb0345952cf457c1a79e7059ef" translate="yes" xml:space="preserve">
          <source>The threshold for error relative to the baseline (min &amp;amp; max).</source>
          <target state="translated">기준과 관련된 오류의 임계 값입니다 (최소 및 최대).</target>
        </trans-unit>
        <trans-unit id="60c47ee6ec4aee3d2f301fc3d304a4955e681b57" translate="yes" xml:space="preserve">
          <source>The threshold for warning relative to the baseline (min &amp;amp; max).</source>
          <target state="translated">기준과 관련된 경고의 임계 값입니다 (최소 및 최대).</target>
        </trans-unit>
        <trans-unit id="c4b55d03441bffab6eec1d8c5b1ac161eb54aa13" translate="yes" xml:space="preserve">
          <source>The time it takes the animation to complete, in milliseconds.</source>
          <target state="translated">애니메이션을 완료하는 데 걸리는 시간 (밀리 초)입니다.</target>
        </trans-unit>
        <trans-unit id="39672ec6c077499845ec25181d8fdddc36ce80f6" translate="yes" xml:space="preserve">
          <source>The time zone. A time zone offset from GMT (such as &lt;code&gt;'+0430'&lt;/code&gt;), or a standard UTC/GMT or continental US time zone abbreviation. If not specified, uses host system settings.</source>
          <target state="translated">시간대 GMT에서 표준 시간대 오프셋 (예 : &lt;code&gt;'+0430'&lt;/code&gt; ) 또는 표준 UTC / GMT 또는 미국 대륙 표준 시간대 약어입니다. 지정하지 않으면 호스트 시스템 설정을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="20e4e50a13a151170196f0e0befe4c1c2ba96789" translate="yes" xml:space="preserve">
          <source>The timing data for the step.</source>
          <target state="translated">단계의 타이밍 데이터.</target>
        </trans-unit>
        <trans-unit id="3a5862865c9788bb436ccfadcc4ca1e2e0ed4f85" translate="yes" xml:space="preserve">
          <source>The timing data for the steps.</source>
          <target state="translated">단계의 타이밍 데이터.</target>
        </trans-unit>
        <trans-unit id="9bb53d35a2e2718224cdb5414e304756bc3d18c6" translate="yes" xml:space="preserve">
          <source>The title should appear at the top of the physical page. Begin the title with the markdown &lt;code&gt;#&lt;/code&gt; character. Alternatively, you can write the equivalent &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">제목은 실제 페이지 상단에 나타납니다. 마크 다운 &lt;code&gt;#&lt;/code&gt; 문자로 제목을 시작하십시오 . 또는 동등한 &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; 을 쓸 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="7392074d5488bfada1cba2db29c9e3aaea938dec" translate="yes" xml:space="preserve">
          <source>The tool that the CLI uses to perform complex tasks such as compilation and test running, according to a provided configuration. Architect is a shell that runs a &lt;a href=&quot;glossary#builder&quot;&gt;builder&lt;/a&gt; (defined in an &lt;a href=&quot;glossary#npm-package&quot;&gt;npm package&lt;/a&gt;) with a given &lt;a href=&quot;glossary#target&quot;&gt;target configuration&lt;/a&gt;.</source>
          <target state="translated">제공된 구성에 따라 CLI가 컴파일 및 테스트 실행과 같은 복잡한 작업을 수행하는 데 사용하는 도구입니다. Architect는 주어진 &lt;a href=&quot;glossary#target&quot;&gt;대상 구성&lt;/a&gt; 으로 &lt;a href=&quot;glossary#builder&quot;&gt;빌더&lt;/a&gt; ( &lt;a href=&quot;glossary#npm-package&quot;&gt;npm 패키지에&lt;/a&gt; 정의 됨) 를 실행하는 쉘입니다 .</target>
        </trans-unit>
        <trans-unit id="a41ed1a3c20f3b032ce6bf341b07b3ff788f0e6c" translate="yes" xml:space="preserve">
          <source>The top level of the root project folder for a collection contains configuration files, a &lt;code&gt;node_modules&lt;/code&gt; folder, and a &lt;code&gt;src/&lt;/code&gt; folder. The &lt;code&gt;src/&lt;/code&gt; folder contains subfolders for named schematics in the collection, and a schema, &lt;code&gt;collection.json&lt;/code&gt;, which describes the collected schematics. Each schematic is created with a name, description, and factory function.</source>
          <target state="translated">컬렉션에 대한 루트 프로젝트 폴더의 최상위 수준에는 구성 파일, &lt;code&gt;node_modules&lt;/code&gt; 폴더 및 &lt;code&gt;src/&lt;/code&gt; 폴더가 있습니다. &lt;code&gt;src/&lt;/code&gt; 라는 이름의 컬렉션의 회로도 및 스키마에 대한 하위 폴더가 들어있는 폴더를 &lt;code&gt;collection.json&lt;/code&gt; 수집 된 회로도를 설명합니다. 각 회로도는 이름, 설명 및 팩토리 기능으로 작성됩니다.</target>
        </trans-unit>
        <trans-unit id="3f8c3bac42ac19a6aeec66ddbb65426c9445956b" translate="yes" xml:space="preserve">
          <source>The top paragraph is in the DOM. The bottom, disused paragraph is not; in its place is a comment about &quot;bindings&quot; (more about that &lt;a href=&quot;structural-directives#asterisk&quot;&gt;later&lt;/a&gt;).</source>
          <target state="translated">상단 단락은 DOM에 있습니다. 사용하지 않는 마지막 단락은 아닙니다. 그 자리에는 &quot;바인딩&quot;에 대한 주석이 있습니다 ( &lt;a href=&quot;structural-directives#asterisk&quot;&gt;나중에&lt;/a&gt; 더 자세히 설명 ).</target>
        </trans-unit>
        <trans-unit id="00501897b059678bdf07befdac7616fe6a03505a" translate="yes" xml:space="preserve">
          <source>The top-level directive for this control if present, otherwise null.</source>
          <target state="translated">이 컨트롤의 최상위 지시어가있는 경우는 그렇지 않은 경우는 null</target>
        </trans-unit>
        <trans-unit id="aa4c65514687fcb647bd478319e8cd7a18baae19" translate="yes" xml:space="preserve">
          <source>The top-level directive for this group if present, otherwise null.</source>
          <target state="translated">존재하는 경우,이 그룹의 최상위 지시문. 그렇지 않은 경우는 null</target>
        </trans-unit>
        <trans-unit id="7f59f229151882c691c9c4dbd40db2c8cf35cf79" translate="yes" xml:space="preserve">
          <source>The top-level form directive for the control.</source>
          <target state="translated">컨트롤의 최상위 폼 지시어입니다.</target>
        </trans-unit>
        <trans-unit id="aa96b6dd3b9c83ecd894feff632ccdcd8ce5055e" translate="yes" xml:space="preserve">
          <source>The total run time of the animation, in milliseconds.</source>
          <target state="translated">애니메이션의 총 실행 시간 (밀리 초)입니다.</target>
        </trans-unit>
        <trans-unit id="14aee0513a51a8b6574f4395af2536721cbd0b69" translate="yes" xml:space="preserve">
          <source>The transition from the server-rendered app to the client app happens quickly on a development machine, but you should always test your apps in real-world scenarios.</source>
          <target state="translated">서버 렌더링 앱에서 클라이언트 앱으로의 전환은 개발 시스템에서 빠르게 이루어 지지만 항상 실제 시나리오에서 앱을 테스트해야합니다.</target>
        </trans-unit>
        <trans-unit id="2b2c02e508d78290b606f3c251693a83d5dd77d7" translate="yes" xml:space="preserve">
          <source>The translation file format.</source>
          <target state="translated">번역 파일 형식입니다.</target>
        </trans-unit>
        <trans-unit id="a01d8be6610dc7e8ff92abc660e7a063be84ddba" translate="yes" xml:space="preserve">
          <source>The translation file.</source>
          <target state="translated">번역 파일.</target>
        </trans-unit>
        <trans-unit id="566718f0b46f66443c966e183abd9ebc1557a5c4" translate="yes" xml:space="preserve">
          <source>The translation process that transforms one version of JavaScript to another version; for example, down-leveling ES2015 to the older ES5 version.</source>
          <target state="translated">한 버전의 JavaScript를 다른 버전으로 변환하는 번역 프로세스. 예를 들어 ES2015를 이전 ES5 버전으로 다운 레벨링합니다.</target>
        </trans-unit>
        <trans-unit id="2fd93ca59b690739d63aaf50fa1d89967d7ba17a" translate="yes" xml:space="preserve">
          <source>The translator may also need to know the meaning or intent of the text message within this particular app context.</source>
          <target state="translated">번역 사는이 특정 앱 컨텍스트 내에서 문자 메시지의 의미 나 의도를 알아야 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="6cbae59239e49c4968e3b2022136d5ac4b8dd7eb" translate="yes" xml:space="preserve">
          <source>The trigger name, used to associate it with an element. Unique within the component.</source>
          <target state="translated">요소와 연관시키는 데 사용되는 트리거 이름. 구성 요소 내에서 고유합니다.</target>
        </trans-unit>
        <trans-unit id="599b7384324d0565d53e3693b7036e321e474501" translate="yes" xml:space="preserve">
          <source>The tutorial's &quot;in-memory web API&quot; module, a demo and development tool, intercepts all HTTP calls and simulates the behavior of a remote data server. In practice, you would remove that module and register your web API middleware on the server here.</source>
          <target state="translated">데모 및 개발 도구 인 학습서의 &quot;메모리 내 웹 API&quot;모듈은 모든 HTTP 호출을 가로 채 원격 데이터 서버의 동작을 시뮬레이션합니다. 실제로 해당 모듈을 제거하고 여기에서 서버에 웹 API 미들웨어를 등록합니다.</target>
        </trans-unit>
        <trans-unit id="29c54a0ff6d263b78d0ad5a2dc608fb24dc18c92" translate="yes" xml:space="preserve">
          <source>The tutorial's &lt;code&gt;HeroService&lt;/code&gt; and &lt;code&gt;HeroSearchService&lt;/code&gt; delegate to the Angular &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; module to fetch application data. These services send requests to &lt;em&gt;relative&lt;/em&gt; URLs such as &lt;code&gt;api/heroes&lt;/code&gt;. In a Universal app, HTTP URLs must be &lt;em&gt;absolute&lt;/em&gt; (for example, &lt;code&gt;https://my-server.com/api/heroes&lt;/code&gt;). This means you need to change your services to make requests with absolute URLs when running on the server and with relative URLs when running in the browser.</source>
          <target state="translated">학습서의 &lt;code&gt;HeroService&lt;/code&gt; 및 &lt;code&gt;HeroSearchService&lt;/code&gt; 는 Angular &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; 모듈에 위임하여 애플리케이션 데이터를 가져옵니다. 이러한 서비스 는 &lt;code&gt;api/heroes&lt;/code&gt; 와 같은 &lt;em&gt;상대&lt;/em&gt; URL 로 요청을 보냅니다 . 범용 앱에서 HTTP URL은 &lt;em&gt;절대적&lt;/em&gt; 이어야합니다 (예 : &lt;code&gt;https://my-server.com/api/heroes&lt;/code&gt; ). 이는 서버에서 실행될 때 절대 URL과 브라우저에서 실행될 때 상대 URL로 요청을 수행하도록 서비스를 변경해야 함을 의미합니다.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="afc05ea2dd3769a2464a65395b0f8fc1046a9410" translate="yes" xml:space="preserve">
          <source>The two build systems support different things, and even where they support the same things, they do those things differently. This means that the TypeScript source can result in different JavaScript code in a built library than it would in a built application.</source>
          <target state="translated">두 빌드 시스템은 서로 다른 것을 지원하며 심지어 동일한 것을 지원하는 경우에도 서로 다르게 수행합니다. 이는 TypeScript 소스가 빌드 된 응용 프로그램과 다른 라이브러리에서 다른 JavaScript 코드를 생성 할 수 있음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="3d6bab88072a051c166e9e7471ac45c3b0a3264e" translate="yes" xml:space="preserve">
          <source>The two components will have a parent/child relationship. The parent &lt;code&gt;HeroesComponent&lt;/code&gt; will control the child &lt;code&gt;HeroDetailComponent&lt;/code&gt; by sending it a new hero to display whenever the user selects a hero from the list.</source>
          <target state="translated">두 구성 요소는 상위 / 하위 관계를 갖습니다. 부모 &lt;code&gt;HeroesComponent&lt;/code&gt; 는 사용자가 목록에서 영웅을 선택할 때마다 표시 할 새로운 hero를 보내서 자식 &lt;code&gt;HeroDetailComponent&lt;/code&gt; 를 제어 합니다.</target>
        </trans-unit>
        <trans-unit id="5afe858ace0f507f6e00dcce82eccd00126d0833" translate="yes" xml:space="preserve">
          <source>The two types of validators are passed in separately as the second and third arg respectively, or together as part of an options object.</source>
          <target state="translated">두 가지 유형의 유효성 검사기는 각각 두 번째 및 세 번째 인수로 별도로 또는 옵션 개체의 일부로 함께 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="b4abd53c0253243e985b7e065cc9f874147ab4e8" translate="yes" xml:space="preserve">
          <source>The two update events, &lt;code&gt;available&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/service-worker/swupdate#activated&quot;&gt;activated&lt;/a&gt;&lt;/code&gt;, are &lt;code&gt;Observable&lt;/code&gt; properties of &lt;code&gt;&lt;a href=&quot;../api/service-worker/swupdate&quot;&gt;SwUpdate&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">두 개의 업데이트 이벤트, &lt;code&gt;available&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;../api/service-worker/swupdate#activated&quot;&gt;activated&lt;/a&gt;&lt;/code&gt; ,이다 &lt;code&gt;Observable&lt;/code&gt; 속성 &lt;code&gt;&lt;a href=&quot;../api/service-worker/swupdate&quot;&gt;SwUpdate&lt;/a&gt;&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="1dbdba75ae5eb9e9bc50a6b2bc270a30ddeeee80" translate="yes" xml:space="preserve">
          <source>The two-way binding syntax is a great convenience compared to separate property and event bindings. It would be convenient to use two-way binding with HTML form elements like &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt;. However, no native HTML element follows the &lt;code&gt;x&lt;/code&gt; value and &lt;code&gt;xChange&lt;/code&gt; event pattern.</source>
          <target state="translated">양방향 바인딩 구문은 별도의 속성 및 이벤트 바인딩과 비교할 때 매우 편리합니다. &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 및 &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; 와 같은 HTML 양식 요소에 양방향 바인딩을 사용하는 것이 편리합니다 . 그러나 &lt;code&gt;x&lt;/code&gt; 값과 &lt;code&gt;xChange&lt;/code&gt; 이벤트 패턴 뒤에는 기본 HTML 요소가 없습니다 .</target>
        </trans-unit>
        <trans-unit id="552f44eabf3bee5b16dbbe6d805c5e4727da9fe7" translate="yes" xml:space="preserve">
          <source>The two-way binding syntax is really just syntactic sugar for a &lt;em&gt;property&lt;/em&gt; binding and an &lt;em&gt;event&lt;/em&gt; binding. Angular desugars the &lt;code&gt;SizerComponent&lt;/code&gt; binding into this:</source>
          <target state="translated">양방향 바인딩 구문은 실제로 &lt;em&gt;속성&lt;/em&gt; 바인딩 및 &lt;em&gt;이벤트&lt;/em&gt; 바인딩에 대한 구문 설탕입니다 . Angular는 &lt;code&gt;SizerComponent&lt;/code&gt; 바인딩을 다음과 같이 탈당 합니다.</target>
        </trans-unit>
        <trans-unit id="6513ae7688b62a5255ebc4d625abc9be33526ee7" translate="yes" xml:space="preserve">
          <source>The type checker also throws an error if it can't determine whether a variable will be &lt;code&gt;null&lt;/code&gt; or undefined at runtime. You tell the type checker not to throw an error by applying the postfix &lt;a href=&quot;http://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html#non-null-assertion-operator&quot;&gt;non-null assertion operator, !&lt;/a&gt;.</source>
          <target state="translated">런타임에 변수가 &lt;code&gt;null&lt;/code&gt; 인지 또는 정의되지 않았 는지 확인할 수없는 경우 형식 검사기에서 오류가 발생 합니다. &lt;a href=&quot;http://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html#non-null-assertion-operator&quot;&gt;널이 아닌 어설 션 연산자!&lt;/a&gt; 를 적용하여 형식 검사기에 오류가 발생하지 않도록 지시합니다 .! .</target>
        </trans-unit>
        <trans-unit id="81dce0b481d7ac34dd874fc96a0c29f5d10a16ae" translate="yes" xml:space="preserve">
          <source>The type of budget. One of:</source>
          <target state="translated">예산 유형 다음 중 하나 :</target>
        </trans-unit>
        <trans-unit id="c15292902555eb7a2059d3f203806ac34a995f12" translate="yes" xml:space="preserve">
          <source>The type of component the factory will create.</source>
          <target state="translated">팩토리가 생성 할 구성 요소 유형입니다.</target>
        </trans-unit>
        <trans-unit id="7c0884d61dcbf36812f4f429d57a3fd536285ae5" translate="yes" xml:space="preserve">
          <source>The type of numeric value to be formatted (such as &lt;code&gt;Decimal&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;numberformatstyle#Currency&quot;&gt;Currency&lt;/a&gt;&lt;/code&gt;.)</source>
          <target state="translated">형식화 할 숫자 값의 유형 (예 : &lt;code&gt;Decimal&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;numberformatstyle#Currency&quot;&gt;Currency&lt;/a&gt;&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="1914de4f10fd251ed62f048b8948f40fc99532fb" translate="yes" xml:space="preserve">
          <source>The type of object that &lt;a href=&quot;viewchildren&quot;&gt;&lt;code&gt;ViewChildren&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;contentchildren&quot;&gt;&lt;code&gt;ContentChildren&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;querylist&quot;&gt;&lt;code&gt;QueryList&lt;/code&gt;&lt;/a&gt; provide.</source>
          <target state="translated">&lt;a href=&quot;viewchildren&quot;&gt; &lt;code&gt;ViewChildren&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;contentchildren&quot;&gt; &lt;code&gt;ContentChildren&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;querylist&quot;&gt; &lt;code&gt;QueryList&lt;/code&gt; 가&lt;/a&gt; 제공하는 객체의 유형입니다 .</target>
        </trans-unit>
        <trans-unit id="2cee06caf5b085e8040bc4dd74a44cf2669ac0d4" translate="yes" xml:space="preserve">
          <source>The type of this component (as created by a &lt;code&gt;&lt;a href=&quot;componentfactory&quot;&gt;ComponentFactory&lt;/a&gt;&lt;/code&gt; class).</source>
          <target state="translated">이 컴퍼넌트의 형태 ( &lt;code&gt;&lt;a href=&quot;componentfactory&quot;&gt;ComponentFactory&lt;/a&gt;&lt;/code&gt; 클래스에 의해 작성 )</target>
        </trans-unit>
        <trans-unit id="351e662a9168935a10d637a721b52c3db93d0b18" translate="yes" xml:space="preserve">
          <source>The type parameter, &lt;code&gt;T&lt;/code&gt;, is the kind of metadata you'd pass to the &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; decorator:</source>
          <target state="translated">type 매개 변수 &lt;code&gt;T&lt;/code&gt; 는 &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; 데코레이터에 전달할 메타 데이터 종류입니다 .</target>
        </trans-unit>
        <trans-unit id="92e0731044a01c861010ac8dd3364de0bab42484" translate="yes" xml:space="preserve">
          <source>The type parameter, while optional, conveys the dependency's type to developers and tooling. The token description is another developer aid.</source>
          <target state="translated">type 매개 변수는 선택 사항이지만 종속성 유형을 개발자와 툴링에 전달합니다. 토큰 설명은 또 다른 개발자 지원입니다.</target>
        </trans-unit>
        <trans-unit id="fdab28b804a5bc2df8ed953cd182dcd879bebcd0" translate="yes" xml:space="preserve">
          <source>The underlying native element or &lt;code&gt;null&lt;/code&gt; if direct access to native elements is not supported (e.g. when the application runs in a web worker).</source>
          <target state="translated">기본 고유 요소 또는 기본 요소에 대한 직접 액세스가 지원되지 않는 경우 (예 : 응용 프로그램이 웹 작업자에서 실행될 때) &lt;code&gt;null&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f9fb3d4a522a7d59fc653358ee450cd39cd54d77" translate="yes" xml:space="preserve">
          <source>The unit test files themselves also need to be switched to Angular when their production counterparts are switched. The specs for the checkmark pipe are probably the most straightforward, as the pipe has no dependencies:</source>
          <target state="translated">생산 테스트 파일을 전환 할 때 단위 테스트 파일 자체도 Angular로 전환해야합니다. 파이프에 종속성이 없으므로 확인 표시 파이프의 사양이 가장 간단합니다.</target>
        </trans-unit>
        <trans-unit id="7b843cdeff59d7337d09dffec8474c659f368f17" translate="yes" xml:space="preserve">
          <source>The unit test for the phone service is a bit more involved. You need to switch from the mocked-out AngularJS &lt;code&gt;$httpBackend&lt;/code&gt; to a mocked-out Angular Http backend.</source>
          <target state="translated">전화 서비스의 단위 테스트는 조금 더 복잡합니다. &lt;code&gt;$httpBackend&lt;/code&gt; 아웃 AngularJS $ httpBackend 에서 모의 아웃 Angular Http 백엔드 로 전환해야합니다 .</target>
        </trans-unit>
        <trans-unit id="789acab94f4da6bd1b31fd8d53475bbe9758d87a" translate="yes" xml:space="preserve">
          <source>The updated &lt;code&gt;HeroesRoutingModule&lt;/code&gt; looks like this:</source>
          <target state="translated">업데이트 된 &lt;code&gt;HeroesRoutingModule&lt;/code&gt; 은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="987de19a86a67d115685949783bff6fddad8b8ee" translate="yes" xml:space="preserve">
          <source>The upgrade NgModule.</source>
          <target state="translated">NgModule 업그레이드.</target>
        </trans-unit>
        <trans-unit id="d44b088804cbf01923d7400df118887612abd201" translate="yes" xml:space="preserve">
          <source>The url from which this snapshot was created</source>
          <target state="translated">이 스냅 샷이 작성된 URL</target>
        </trans-unit>
        <trans-unit id="0ee83b79b718d1a4ec36d1b3d58ebe726ac3e494" translate="yes" xml:space="preserve">
          <source>The url serialization strategy is customizable. You can make all URLs case insensitive by providing a custom UrlSerializer.</source>
          <target state="translated">URL 직렬화 전략은 사용자 정의 할 수 있습니다. 사용자 정의 UrlSerializer를 제공하여 모든 URL을 대소 문자를 구분하지 않게 만들 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ad97874a0022a010e0155677ec6967027c4314b9" translate="yes" xml:space="preserve">
          <source>The use of &lt;code&gt;name&lt;/code&gt; attributes for validation and form-element change tracking.</source>
          <target state="translated">유효성 검사 및 양식 요소 변경 내용 추적 에 &lt;code&gt;name&lt;/code&gt; 특성 사용</target>
        </trans-unit>
        <trans-unit id="9154043e44b5d932b8c61e6a2f25ebf4ef5aea92" translate="yes" xml:space="preserve">
          <source>The user calls the &lt;code&gt;favoriteColorControl.setValue()&lt;/code&gt; method, which updates the &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; value.</source>
          <target state="translated">사용자는 &lt;code&gt;favoriteColorControl.setValue()&lt;/code&gt; 메소드를 호출 하여 &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 값 을 업데이트합니다 .</target>
        </trans-unit>
        <trans-unit id="0a5976d96dbc10bd55988a4a489b75fc9937bde4" translate="yes" xml:space="preserve">
          <source>The user can select a hero and see that hero's details.</source>
          <target state="translated">사용자는 영웅을 선택하고 해당 영웅의 세부 정보를 볼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="aa661a59e3356526e5cd2452506236a954f28c3e" translate="yes" xml:space="preserve">
          <source>The user needs a way to open the popup. Open the &lt;code&gt;AppComponent&lt;/code&gt; and add a &quot;Contact&quot; link.</source>
          <target state="translated">사용자는 팝업을 여는 방법이 필요합니다. &lt;code&gt;AppComponent&lt;/code&gt; 를 열고 &quot;Contact&quot;링크를 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="369264e6d1f498d1106a6d3877d3ee5e43560ae5" translate="yes" xml:space="preserve">
          <source>The user should be able to get to these details in three ways.</source>
          <target state="translated">사용자는 세 가지 방법으로 이러한 세부 정보를 얻을 수 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="bbafb9f9e9d3caf33087f60e1818944be5dd3d9b" translate="yes" xml:space="preserve">
          <source>The user should be able to navigate back and forth between the &lt;code&gt;DashboardComponent&lt;/code&gt; and the &lt;code&gt;HeroesComponent&lt;/code&gt; by clicking links in the navigation area near the top of the page.</source>
          <target state="translated">사용자는 페이지 상단 근처의 탐색 영역에서 링크를 클릭하여 &lt;code&gt;DashboardComponent&lt;/code&gt; 와 &lt;code&gt;HeroesComponent&lt;/code&gt; 간에 앞뒤로 이동할 수 있어야 합니다.</target>
        </trans-unit>
        <trans-unit id="e9cc50a2572132b6fe866bbf0976206cd31bec89" translate="yes" xml:space="preserve">
          <source>The user should be able to submit this form after filling it in. The &lt;em&gt;Submit&lt;/em&gt; button at the bottom of the form does nothing on its own, but it will trigger a form submit because of its type (&lt;code&gt;type=&quot;submit&quot;&lt;/code&gt;).</source>
          <target state="translated">사용자는이 양식을 작성한 후 제출할 수 있어야합니다. 양식 맨 아래에있는 &lt;em&gt;제출&lt;/em&gt; 단추는 자체적으로 아무 것도 수행하지 않지만 유형 ( &lt;code&gt;type=&quot;submit&quot;&lt;/code&gt; )으로 인해 양식 제출이 트리거됩니다 .</target>
        </trans-unit>
        <trans-unit id="01ba075c2899372b1eb9a9b167514bce8549789e" translate="yes" xml:space="preserve">
          <source>The user types &lt;em&gt;Blue&lt;/em&gt; into the input element.</source>
          <target state="translated">사용자 는 입력 요소에 &lt;em&gt;Blue&lt;/em&gt; 를 입력합니다.</target>
        </trans-unit>
        <trans-unit id="746db581b79b8e44db4102f1f4a9027db5fb21fd" translate="yes" xml:space="preserve">
          <source>The user types a value into the input element, in this case the favorite color &lt;em&gt;Blue&lt;/em&gt;.</source>
          <target state="translated">사용자는 입력 요소에 값을 입력합니다 (이 경우 선호하는 색상 &lt;em&gt;Blue)&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="0f5eade11b7a8a4872382f56342ccc7dae30caf1" translate="yes" xml:space="preserve">
          <source>The validation status of the control. There are four possible validation status values:</source>
          <target state="translated">컨트롤의 유효성 검사 상태입니다. 네 가지 가능한 유효성 검사 상태 값이 있습니다.</target>
        </trans-unit>
        <trans-unit id="98b77f9877456963068b672348f174d66942c7cb" translate="yes" xml:space="preserve">
          <source>The validation uses the TypeScript type checker and the options supplied to the TypeScript compiler to control how detailed the type validation is. For example, if the &lt;code&gt;strictTypeChecks&lt;/code&gt; is specified, the error &lt;code&gt;my.component.ts.MyComponent.html(1,1): : Object is possibly 'undefined'&lt;/code&gt; is reported as well as the above error message.</source>
          <target state="translated">유효성 검사는 TypeScript 형식 검사기와 TypeScript 컴파일러에 제공된 옵션을 사용하여 형식 유효성 검사의 세부 수준을 제어합니다. 예를 들어, &lt;code&gt;strictTypeChecks&lt;/code&gt; 가 지정된 경우, 오류 &lt;code&gt;my.component.ts.MyComponent.html(1,1): : Object is possibly 'undefined'&lt;/code&gt; 과 위의 오류 메시지가보고됩니다.</target>
        </trans-unit>
        <trans-unit id="0d21ce6b8675f7d9e43afcf309b4fddb296bc7b1" translate="yes" xml:space="preserve">
          <source>The validator code is as follows:</source>
          <target state="translated">유효성 검사기 코드는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="e446494ebae458b5aea2681dfd535005a9fb5001" translate="yes" xml:space="preserve">
          <source>The value</source>
          <target state="translated">가치</target>
        </trans-unit>
        <trans-unit id="b3ab44397f0e829c1263e8d41c48f13f570826c7" translate="yes" xml:space="preserve">
          <source>The value accessor for the control</source>
          <target state="translated">컨트롤의 값 접근 자</target>
        </trans-unit>
        <trans-unit id="516bd69561122628d42ad25e8281d2c0a9abe779" translate="yes" xml:space="preserve">
          <source>The value for each day of the week, based on the &lt;code&gt;en-US&lt;/code&gt; locale</source>
          <target state="translated">&lt;code&gt;en-US&lt;/code&gt; 로캘을 기반으로 한 요일의 값</target>
        </trans-unit>
        <trans-unit id="c2748ca458055ddfd5db76827b1b28c8b741c19c" translate="yes" xml:space="preserve">
          <source>The value is the statement to execute when the event occurs. If the statement evaluates to &lt;code&gt;false&lt;/code&gt;, then &lt;code&gt;preventDefault&lt;/code&gt; is applied on the DOM event. A handler method can refer to the &lt;code&gt;$event&lt;/code&gt; local variable.</source>
          <target state="translated">값은 이벤트가 발생할 때 실행할 명령문입니다. 에 문 평가되면 &lt;code&gt;false&lt;/code&gt; , 다음 &lt;code&gt;preventDefault&lt;/code&gt; DOM 이벤트에 적용됩니다. 핸들러 메소드는 &lt;code&gt;$event&lt;/code&gt; 로컬 변수를 참조 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a8273c4bd416c41f6f045c126981755bb55c2fa6" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;&lt;a href=&quot;../api/core/testing/componentfixture#nativeElement&quot;&gt;ComponentFixture.nativeElement&lt;/a&gt;&lt;/code&gt; has the &lt;code&gt;any&lt;/code&gt; type. Later you'll encounter the &lt;code&gt;&lt;a href=&quot;../api/core/debugelement#nativeElement&quot;&gt;DebugElement.nativeElement&lt;/a&gt;&lt;/code&gt; and it too has the &lt;code&gt;any&lt;/code&gt; type.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/testing/componentfixture#nativeElement&quot;&gt;ComponentFixture.nativeElement&lt;/a&gt;&lt;/code&gt; 의 값은 &lt;code&gt;any&lt;/code&gt; 유형을 갖습니다 . 나중에 &lt;code&gt;&lt;a href=&quot;../api/core/debugelement#nativeElement&quot;&gt;DebugElement.nativeElement&lt;/a&gt;&lt;/code&gt; 가 발생 하고 &lt;code&gt;any&lt;/code&gt; 유형이 있습니다.</target>
        </trans-unit>
        <trans-unit id="0ad903e2fa7af996e920297f63f7b7748e6d5872" translate="yes" xml:space="preserve">
          <source>The value of &lt;em&gt;settingOrProject&lt;/em&gt; is one of the following.</source>
          <target state="translated">&lt;em&gt;settingOrProject&lt;/em&gt; 의 값은 다음 중 하나입니다.</target>
        </trans-unit>
        <trans-unit id="74c4007c0c9568fe1d9f263c845a7b9cdffe9674" translate="yes" xml:space="preserve">
          <source>The value of a &lt;em&gt;value provider&lt;/em&gt; must be defined before you specify it here. The title string literal is immediately available. The &lt;code&gt;someHero&lt;/code&gt; variable in this example was set earlier in the file as shown below. You can't use a variable whose value will be defined later.</source>
          <target state="translated">여기에 &lt;em&gt;값 제공자&lt;/em&gt; 를 지정하기 전에 &lt;em&gt;값 제공자&lt;/em&gt; 의 값을 정의해야합니다. 제목 문자열 리터럴을 즉시 사용할 수 있습니다. 이 예제 의 &lt;code&gt;someHero&lt;/code&gt; 변수는 파일에서 이전에 아래와 같이 설정되었습니다. 나중에 값을 정의 할 변수는 사용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="9e40077c9021d6667f8d32f6871c8f00bc068d9d" translate="yes" xml:space="preserve">
          <source>The value of the iterable expression, which can be used as a &lt;a href=&quot;../../guide/structural-directives#template-input-variable&quot;&gt;template input variable&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../guide/structural-directives#template-input-variable&quot;&gt;템플리트 입력 변수&lt;/a&gt; 로 사용할 수있는 반복 가능한 표현식의 값입니다 .</target>
        </trans-unit>
        <trans-unit id="e5b7782babd6cd47ebb1077395fdc52934d8acaf" translate="yes" xml:space="preserve">
          <source>The value or values to delete for the given header.</source>
          <target state="translated">주어진 헤더에 대해 삭제할 값입니다.</target>
        </trans-unit>
        <trans-unit id="c3a47c38e67f33789b5fcdb66f3ebef0b8ae5f17" translate="yes" xml:space="preserve">
          <source>The value or values to set or overide for the given header.</source>
          <target state="translated">주어진 헤더에 대해 설정하거나 재정의 할 값입니다.</target>
        </trans-unit>
        <trans-unit id="2b048ad41afe70b72be36c6e88e6bdc321667a94" translate="yes" xml:space="preserve">
          <source>The value to emit.</source>
          <target state="translated">방출 할 값입니다.</target>
        </trans-unit>
        <trans-unit id="1d37da7064bd8c9a2adb3a8365e6b179578a33bb" translate="yes" xml:space="preserve">
          <source>The value to inject.</source>
          <target state="translated">주입 할 값입니다.</target>
        </trans-unit>
        <trans-unit id="965b65af75152cd8483b194aca89f3d4a3563d3b" translate="yes" xml:space="preserve">
          <source>The value to remove, if provided.</source>
          <target state="translated">제공된 경우 제거 할 값입니다.</target>
        </trans-unit>
        <trans-unit id="36090b23e6b19abea403f7cf11708f739d6ebe0a" translate="yes" xml:space="preserve">
          <source>The value.</source>
          <target state="translated">가치.</target>
        </trans-unit>
        <trans-unit id="752b8837b88dbea5e1b07283811801b832bbf900" translate="yes" xml:space="preserve">
          <source>The values in the store are serialized/deserialized using JSON.stringify/JSON.parse. So only boolean, number, string, null and non-class objects will be serialized and deserialzied in a non-lossy manner.</source>
          <target state="translated">상점의 값은 JSON.stringify / JSON.parse를 사용하여 직렬화 / 역 직렬화됩니다. 따라서 부울, 숫자, 문자열, null 및 비 클래스 객체 만 비 손실 방식으로 직렬화 및 역 직렬화됩니다.</target>
        </trans-unit>
        <trans-unit id="52ff44818e20f7220d3cd6a6457d439574feaba5" translate="yes" xml:space="preserve">
          <source>The variable &lt;code&gt;heroForm&lt;/code&gt; is now a reference to the &lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; directive that governs the form as a whole.</source>
          <target state="translated">변수 &lt;code&gt;heroForm&lt;/code&gt; 은 이제 폼을 전체적으로 제어하는 &lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; 지시문에 대한 참조 입니다.</target>
        </trans-unit>
        <trans-unit id="3f524c06d92d1f81ab05583d4d275b72aa86fd3a" translate="yes" xml:space="preserve">
          <source>The version identifier of the app is determined by the contents of all resources, and it changes if any of them change. In practice, the version is determined by the contents of the &lt;code&gt;ngsw.json&lt;/code&gt; file, which includes hashes for all known content. If any of the cached files change, the file's hash will change in &lt;code&gt;ngsw.json&lt;/code&gt;, causing the Angular service worker to treat the active set of files as a new version.</source>
          <target state="translated">앱의 버전 식별자는 모든 리소스의 내용에 따라 결정되며 변경되면 변경됩니다. 실제로 버전은 모든 알려진 컨텐츠에 대한 해시를 포함 하는 &lt;code&gt;ngsw.json&lt;/code&gt; 파일 의 컨텐츠에 의해 결정됩니다 . 캐시 된 파일이 변경되면 파일의 해시가 &lt;code&gt;ngsw.json&lt;/code&gt; 에서 변경되어 Angular 서비스 워커가 활성 파일 세트를 새 버전으로 취급합니다.</target>
        </trans-unit>
        <trans-unit id="61010f814fd314444171513bbb7090fb2e7c56e3" translate="yes" xml:space="preserve">
          <source>The version number is incremented based on the level of change included in the release.</source>
          <target state="translated">버전 번호는 릴리스에 포함 된 변경 레벨에 따라 증가합니다.</target>
        </trans-unit>
        <trans-unit id="a40aa756483f3a5f523498855f5257b57156b5a8" translate="yes" xml:space="preserve">
          <source>The view encapsulation strategy to use in the initial project.</source>
          <target state="translated">초기 프로젝트에서 사용할 뷰 캡슐화 전략.</target>
        </trans-unit>
        <trans-unit id="fa51a23f655a6d3d42ddb64f7327a8e642728256" translate="yes" xml:space="preserve">
          <source>The view encapsulation strategy to use in the new app.</source>
          <target state="translated">새 앱에서 사용할 뷰 캡슐화 전략</target>
        </trans-unit>
        <trans-unit id="fcf377037a7d42bc71c7f002d89b4f46b0d68cfa" translate="yes" xml:space="preserve">
          <source>The view encapsulation strategy to use in the new component.</source>
          <target state="translated">새 구성 요소에서 사용할 뷰 캡슐화 전략</target>
        </trans-unit>
        <trans-unit id="3f5b538e2927dd6de153329e296a74a421bc0c36" translate="yes" xml:space="preserve">
          <source>The view encapsulation type, which determines how styles are applied to DOM elements. One of</source>
          <target state="translated">스타일이 DOM 요소에 적용되는 방식을 결정하는 뷰 캡슐화 유형입니다. 중 하나</target>
        </trans-unit>
        <trans-unit id="52604a8e00ae2362f799cae913f8150372948692" translate="yes" xml:space="preserve">
          <source>The view hierarchy doesn't imply a component hierarchy. Views that are embedded in the context of a particular hierarchy can be host views of other components. Those components can be in the same NgModule as the hosting component, or belong to other NgModules.</source>
          <target state="translated">뷰 계층 구조는 구성 요소 계층 구조를 의미하지 않습니다. 특정 계층의 컨텍스트에 포함 된 뷰는 다른 구성 요소의 호스트 뷰일 수 있습니다. 이러한 구성 요소는 호스팅 구성 요소와 동일한 NgModule에 있거나 다른 NgModules에 속할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c7838a7b8c734a7282cb30df6d8616064238194b" translate="yes" xml:space="preserve">
          <source>The view to insert.</source>
          <target state="translated">삽입 할 뷰입니다.</target>
        </trans-unit>
        <trans-unit id="4ea024c3fe94500d702337f77198fe17d570e08e" translate="yes" xml:space="preserve">
          <source>The view to move.</source>
          <target state="translated">이동할보기입니다.</target>
        </trans-unit>
        <trans-unit id="64ae54575a804f27c02ce687200e683460668cdb" translate="yes" xml:space="preserve">
          <source>The view to query.</source>
          <target state="translated">조회 할보기입니다.</target>
        </trans-unit>
        <trans-unit id="f7eca5f51435a85c65dffa7d0a3287d518cfc6d9" translate="yes" xml:space="preserve">
          <source>The virtual file system is represented by a &lt;code&gt;Tree&lt;/code&gt;. The &lt;code&gt;Tree&lt;/code&gt; data structure contains a &lt;em&gt;base&lt;/em&gt; (a set of files that already exists) and a &lt;em&gt;staging area&lt;/em&gt; (a list of changes to be applied to the base). When making modifications, you don't actually change the base, but add those modifications to the staging area.</source>
          <target state="translated">가상 파일 시스템은 &lt;code&gt;Tree&lt;/code&gt; 로 표시됩니다 . &lt;code&gt;Tree&lt;/code&gt; 데이터 구조가 포함 된 &lt;em&gt;기지국&lt;/em&gt; (이미 존재하는 파일의 집합)와 &lt;em&gt;스테이징 영역&lt;/em&gt; (변화 목록 기재에 적용되는 참조). 수정을 할 때는 실제로베이스를 변경하지 않고 스테이징 영역에 수정 사항을 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="2cefd7f9cff91ac8ee2cb82756abed3d99ad82ad" translate="yes" xml:space="preserve">
          <source>The web is used by a wide variety of people, including those who have visual or motor impairments. A variety of assistive technologies are available that make it much easier for these groups to interact with web-based software applications. In addition, designing an application to be more accessible generally improves the user experience for all users.</source>
          <target state="translated">웹은 시각 또는 운동 장애가있는 사람들을 포함하여 다양한 사람들이 사용합니다. 이러한 그룹이 웹 기반 소프트웨어 응용 프로그램과보다 쉽게 ​​상호 작용할 수 있도록 다양한 보조 기술을 사용할 수 있습니다. 또한보다 쉽게 ​​액세스 할 수 있도록 응용 프로그램을 디자인하면 일반적으로 모든 사용자의 사용자 경험이 향상됩니다.</target>
        </trans-unit>
        <trans-unit id="0870b1ddd7a401e28edca7748851260cf0d812b1" translate="yes" xml:space="preserve">
          <source>The web server must distinguish &lt;em&gt;app page requests&lt;/em&gt; from other kinds of requests.</source>
          <target state="translated">웹 서버는 &lt;em&gt;앱 페이지 요청&lt;/em&gt; 을 다른 종류의 요청 과 구분해야 합니다.</target>
        </trans-unit>
        <trans-unit id="3bcd56955050ccb3584a4da36608073e9ca82456" translate="yes" xml:space="preserve">
          <source>The wildcard state &lt;code&gt;*&lt;/code&gt; matches to &lt;em&gt;any&lt;/em&gt; state, including &lt;code&gt;void&lt;/code&gt;.</source>
          <target state="translated">와일드 카드 상태 &lt;code&gt;*&lt;/code&gt; 는 &lt;code&gt;void&lt;/code&gt; 를 포함한 &lt;em&gt;모든&lt;/em&gt; 상태 와 일치합니다 .</target>
        </trans-unit>
        <trans-unit id="cdfa623802e57793c0a1db6ff9d61453c796514c" translate="yes" xml:space="preserve">
          <source>The word &lt;code&gt;&lt;a href=&quot;../api/common/uppercasepipe&quot;&gt;uppercase&lt;/a&gt;&lt;/code&gt; in the interpolation binding, right after the pipe operator ( | ), activates the built-in &lt;code&gt;UppercasePipe&lt;/code&gt;.</source>
          <target state="translated">파이프 연산자 (|) 바로 다음에 보간 바인딩에서 &lt;code&gt;&lt;a href=&quot;../api/common/uppercasepipe&quot;&gt;uppercase&lt;/a&gt;&lt;/code&gt; 라는 단어 가 내장 된 &lt;code&gt;UppercasePipe&lt;/code&gt; 를 활성화합니다 .</target>
        </trans-unit>
        <trans-unit id="b02e653c1a608596d35a7fd022b60a7182b55381" translate="yes" xml:space="preserve">
          <source>The wording of each guideline indicates how strong the recommendation is.</source>
          <target state="translated">각 지침의 문구는 권장 사항이 얼마나 강력한지를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="7c860c7e7f5c46dabbf52c5dc7a52a91bc246694" translate="yes" xml:space="preserve">
          <source>Their details are quite different in architecture and implementation. In AngularJS, you add Angular assets to the &lt;code&gt;angular.module&lt;/code&gt; property. In Angular, you create one or more classes adorned with an &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; decorator that describes Angular assets in metadata. The differences blossom from there.</source>
          <target state="translated">그들의 세부 사항은 아키텍처와 구현에서 상당히 다릅니다. AngularJS에서는 &lt;code&gt;angular.module&lt;/code&gt; 속성에 Angular 자산을 추가 합니다. Angular에서는 메타 데이터의 Angular 자산을 설명 하는 &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 데코레이터 로 장식 된 하나 이상의 클래스를 만듭니다 . 거기에서 차이점이 생깁니다.</target>
        </trans-unit>
        <trans-unit id="1c9f03dfa8dacad02e2c3ca38cbf5ee7fdadd4d0" translate="yes" xml:space="preserve">
          <source>Their details are quite different in architecture and implementation. In AngularJS, you create a module by specifying its name and dependencies with &lt;a href=&quot;https://docs.angularjs.org/api/ng/function/angular.module&quot;&gt;angular.module()&lt;/a&gt;. Then you can add assets using its various methods. In Angular, you create a class adorned with an &lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt; decorator that describes assets in metadata.</source>
          <target state="translated">그들의 세부 사항은 아키텍처와 구현에서 상당히 다릅니다. AngularJS에서는 &lt;a href=&quot;https://docs.angularjs.org/api/ng/function/angular.module&quot;&gt;angular.module ()으로&lt;/a&gt; 이름과 종속성을 지정하여 모듈을 만듭니다 . 그런 다음 다양한 방법을 사용하여 자산을 추가 할 수 있습니다. Angular에서는 메타 데이터의 자산을 설명 하는 &lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt; 데코레이터 로 장식 된 클래스를 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="4a746b75626a8bf1b8d141962d550672ee26a9a0" translate="yes" xml:space="preserve">
          <source>Then Angular calls the &lt;code&gt;ngAfterViewInit&lt;/code&gt; lifecycle hook at which time it is &lt;em&gt;too late&lt;/em&gt; to update the parent view's display of the countdown seconds. Angular's unidirectional data flow rule prevents updating the parent view's in the same cycle. The app has to &lt;em&gt;wait one turn&lt;/em&gt; before it can display the seconds.</source>
          <target state="translated">그런 다음 Angular는 &lt;code&gt;ngAfterViewInit&lt;/code&gt; 수명주기 후크를 호출하여 &lt;em&gt;너무 늦어&lt;/em&gt; 부모 뷰의 카운트 다운 초 표시를 업데이트하지 않습니다. Angular의 단방향 데이터 흐름 규칙은 동일한주기에서 상위 뷰를 업데이트하지 못하게합니다. 앱은 초를 표시하기 전에 &lt;em&gt;한 번 기다려야&lt;/em&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="dbecf897d73ac2b6641e82fba7920890079f1124" translate="yes" xml:space="preserve">
          <source>Then add &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; to the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; metadata's &lt;code&gt;imports&lt;/code&gt; array, which contains a list of external modules that the app needs.</source>
          <target state="translated">그런 다음 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt; 메타 데이터의 &lt;code&gt;imports&lt;/code&gt; 배열 에 &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; 을 추가 합니다. 여기에는 앱에 필요한 외부 모듈 목록이 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="302c6ab52d600acc4553bea66d084dd5f7f37330" translate="yes" xml:space="preserve">
          <source>Then add a &lt;em&gt;parameterized&lt;/em&gt; route to the &lt;code&gt;AppRoutingModule.routes&lt;/code&gt; array that matches the path pattern to the &lt;em&gt;hero detail&lt;/em&gt; view.</source>
          <target state="translated">그런 다음 경로 패턴과 &lt;em&gt;히어로 상세&lt;/em&gt; 보기 와 일치하는 &lt;code&gt;AppRoutingModule.routes&lt;/code&gt; 배열에 &lt;em&gt;매개 변수화 된&lt;/em&gt; 경로를 추가하십시오 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="7087a31795c1cc6622e1648ea10337e6e7796752" translate="yes" xml:space="preserve">
          <source>Then add it to the &lt;code&gt;providers&lt;/code&gt; array of the testing module configuration:</source>
          <target state="translated">그런 다음 테스트 모듈 구성 의 &lt;code&gt;providers&lt;/code&gt; 배열에 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="476c63ff60da4bb61e86cb5f4efd206fa03aa9dc" translate="yes" xml:space="preserve">
          <source>Then add the &lt;code&gt;&lt;a href=&quot;../api/common/http/testing/httpclienttestingmodule&quot;&gt;HttpClientTestingModule&lt;/a&gt;&lt;/code&gt; to the &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; and continue with the setup of the &lt;em&gt;service-under-test&lt;/em&gt;.</source>
          <target state="translated">그런 다음 &lt;code&gt;&lt;a href=&quot;../api/common/http/testing/httpclienttestingmodule&quot;&gt;HttpClientTestingModule&lt;/a&gt;&lt;/code&gt; 을 &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; 에 추가하고 &lt;em&gt;테스트중인 서비스&lt;/em&gt; 설정을 계속하십시오 .</target>
        </trans-unit>
        <trans-unit id="1bfa821c841240ffbf8adf699d29a6b8346ac678" translate="yes" xml:space="preserve">
          <source>Then add two event handlers that respond when the mouse enters or leaves, each adorned by the &lt;code&gt;&lt;a href=&quot;../api/core/hostlistener&quot;&gt;HostListener&lt;/a&gt;&lt;/code&gt; decorator.</source>
          <target state="translated">그런 다음 마우스가 들어 오거나 나올 때 응답하는 두 개의 이벤트 핸들러를 각각 &lt;code&gt;&lt;a href=&quot;../api/core/hostlistener&quot;&gt;HostListener&lt;/a&gt;&lt;/code&gt; 데코레이터가 장식합니다.</target>
        </trans-unit>
        <trans-unit id="2077cb3e1b43eb4d0aa0bdfb4e87ddd6fe05d012" translate="yes" xml:space="preserve">
          <source>Then change &lt;code&gt;main-aot.ts&lt;/code&gt; to bootstrap the &lt;code&gt;AppComponentFactory&lt;/code&gt; that was generated by the AOT compiler:</source>
          <target state="translated">다음 변경 &lt;code&gt;main-aot.ts&lt;/code&gt; 부트 스트랩하는 &lt;code&gt;AppComponentFactory&lt;/code&gt; AOT 컴파일러에 의해 생성 하였다 :</target>
        </trans-unit>
        <trans-unit id="8f98a3b01b00f3cdc0645e1bb016df36002ccc41" translate="yes" xml:space="preserve">
          <source>Then create some HTML to try it.</source>
          <target state="translated">그런 다음 HTML을 만들어보십시오.</target>
        </trans-unit>
        <trans-unit id="ed0c20efaf787e9c5968245911ff8d07f8f0da7a" translate="yes" xml:space="preserve">
          <source>Then declare them in the &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; configuration next to the components, directives, and pipes that need to be real.</source>
          <target state="translated">그런 다음 실제 필요한 구성 요소, 지시문 및 파이프 옆 의 &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; 구성 에서이를 선언하십시오 .</target>
        </trans-unit>
        <trans-unit id="e412dc563abd459ce251cf7cfccd9f863136e63b" translate="yes" xml:space="preserve">
          <source>Then each test invokes &lt;code&gt;setup()&lt;/code&gt; in its first line, before continuing with steps that manipulate the test subject and assert expectations.</source>
          <target state="translated">그런 다음 각 테스트는 첫 번째 행에서 &lt;code&gt;setup()&lt;/code&gt; 을 호출 하여 테스트 주제를 조작하고 기대를 확인하는 단계를 계속합니다.</target>
        </trans-unit>
        <trans-unit id="150a9555cd5004b3999517db04d6f79faab05564" translate="yes" xml:space="preserve">
          <source>Then exercise the component class, remembering to call the &lt;a href=&quot;lifecycle-hooks&quot;&gt;lifecycle hook methods&lt;/a&gt; as Angular does when running the app.</source>
          <target state="translated">그런 다음 앱을 실행할 때 Angular에서와 같이 &lt;a href=&quot;lifecycle-hooks&quot;&gt;수명주기 후크 메서드&lt;/a&gt; 를 호출하는 것을 기억하면서 구성 요소 클래스를 연습하십시오 .</target>
        </trans-unit>
        <trans-unit id="fb4a68d7b2f52dce99079de606d30ebaa5bb531f" translate="yes" xml:space="preserve">
          <source>Then go to &lt;code&gt;localhost:4200&lt;/code&gt; where you should see &amp;ldquo;app works!&amp;rdquo; and three buttons.</source>
          <target state="translated">그런 다음 &lt;code&gt;localhost:4200&lt;/code&gt; 으로 이동하여 &amp;ldquo;app works!&amp;rdquo;가 표시되어야합니다. 그리고 세 개의 버튼.</target>
        </trans-unit>
        <trans-unit id="38933987a79b6e0405d4682b79b28629cbf06cda" translate="yes" xml:space="preserve">
          <source>Then import and add it to the &lt;code&gt;AppModule&lt;/code&gt;&lt;em&gt;providers array&lt;/em&gt; like this:</source>
          <target state="translated">그런 다음 &lt;code&gt;AppModule&lt;/code&gt; &lt;em&gt;provider 배열에 &lt;/em&gt;가져와 다음과 같이 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="ba51c703735b0a9ca10a1f38c791fa66ebf4dc99" translate="yes" xml:space="preserve">
          <source>Then inject &lt;code&gt;&lt;a href=&quot;upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; into your Angular &lt;code&gt;&lt;a href=&quot;../../core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; and use it to bootstrap the top level &lt;a href=&quot;https://docs.angularjs.org/api/ng/type/angular.Module&quot;&gt;AngularJS module&lt;/a&gt; in the &lt;code&gt;ngDoBootstrap()&lt;/code&gt; method.</source>
          <target state="translated">그런 다음 &lt;code&gt;&lt;a href=&quot;upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; 을 Angular &lt;code&gt;&lt;a href=&quot;../../core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 에 주입 하고이를 사용 하여 &lt;code&gt;ngDoBootstrap()&lt;/code&gt; 메소드 에서 최상위 &lt;a href=&quot;https://docs.angularjs.org/api/ng/type/angular.Module&quot;&gt;AngularJS 모듈&lt;/a&gt; 을 부트 스트랩하십시오 .</target>
        </trans-unit>
        <trans-unit id="ea80e24f31be172808e0a76630ab02df1fbba4cf" translate="yes" xml:space="preserve">
          <source>Then inject it inside a test by calling &lt;code&gt;TestBed.get()&lt;/code&gt; with the service class as the argument.</source>
          <target state="translated">그런 다음 서비스 클래스를 인수로하여 &lt;code&gt;TestBed.get()&lt;/code&gt; 을 호출하여 테스트에 삽입하십시오 .</target>
        </trans-unit>
        <trans-unit id="ed47e3226a89095f74e2f4a490e662cccb0ebbc0" translate="yes" xml:space="preserve">
          <source>Then modify the &lt;code&gt;app.component.ts&lt;/code&gt; file by changing the template and the body of the component.</source>
          <target state="translated">그런 다음 템플리트 및 컴포넌트 본문을 변경 하여 &lt;code&gt;app.component.ts&lt;/code&gt; 파일을 수정하십시오 .</target>
        </trans-unit>
        <trans-unit id="8f2ea7f19a02db5f1bb037406ad378d2b4d2753b" translate="yes" xml:space="preserve">
          <source>Then provide and inject &lt;em&gt;both the&lt;/em&gt;&lt;strong&gt;component&lt;/strong&gt;&lt;em&gt;and the service&lt;/em&gt; in the &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; configuration.</source>
          <target state="translated">그런 다음 &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; 구성 에서 &lt;strong&gt;구성 요소 &lt;/strong&gt;&lt;em&gt;와 서비스&lt;/em&gt; 를 제공하고 주입 &lt;em&gt;하십시오&lt;/em&gt; .&lt;strong&gt;&lt;/strong&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="6575d9ffd1443fafb383b5f99065fc07d42c1e8a" translate="yes" xml:space="preserve">
          <source>Then provide the &lt;code&gt;&lt;a href=&quot;../api/core/locale_id&quot;&gt;LOCALE_ID&lt;/a&gt;&lt;/code&gt; in the main module:</source>
          <target state="translated">그런 다음 기본 모듈에서 &lt;code&gt;&lt;a href=&quot;../api/core/locale_id&quot;&gt;LOCALE_ID&lt;/a&gt;&lt;/code&gt; 를 제공하십시오 .</target>
        </trans-unit>
        <trans-unit id="5cd36815d6513b0d19bf87503dfe0afab93f9fa9" translate="yes" xml:space="preserve">
          <source>Then reload with &lt;code&gt;Cmd+r&lt;/code&gt; or &lt;code&gt;Ctrl+r&lt;/code&gt;, depending on your platform.</source>
          <target state="translated">그런 다음 플랫폼에 따라 &lt;code&gt;Cmd+r&lt;/code&gt; 또는 &lt;code&gt;Ctrl+r&lt;/code&gt; 로 다시로드 하십시오.</target>
        </trans-unit>
        <trans-unit id="62acde2949df74c80c6b969effb470f5543854f7" translate="yes" xml:space="preserve">
          <source>Then the following link &lt;code&gt;&amp;lt;&lt;a href=&quot;routerlinkwithhref&quot;&gt;a&lt;/a&gt; [&lt;a href=&quot;routerlink&quot;&gt;routerLink&lt;/a&gt;]=&quot;['/user/jim']&quot;&amp;gt;Jim&amp;lt;/&lt;a href=&quot;routerlinkwithhref&quot;&gt;a&lt;/a&gt;&amp;gt;&lt;/code&gt; will generate the link &lt;code&gt;/user/(jim//aux:team)&lt;/code&gt;.</source>
          <target state="translated">그런 다음, 다음 링크 &lt;code&gt;&amp;lt;&lt;a href=&quot;routerlinkwithhref&quot;&gt;a&lt;/a&gt; [&lt;a href=&quot;routerlink&quot;&gt;routerLink&lt;/a&gt;]=&quot;['/user/jim']&quot;&amp;gt;Jim&amp;lt;/&lt;a href=&quot;routerlinkwithhref&quot;&gt;a&lt;/a&gt;&amp;gt;&lt;/code&gt; 링크 생성 &lt;code&gt;/user/(jim//aux:team)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="31a24e38017cc0ca331b2c164af11448fb71f88f" translate="yes" xml:space="preserve">
          <source>Then use the service inside your component by injecting it in the component constructor using its class as a type annotation:</source>
          <target state="translated">그런 다음 클래스를 유형 주석으로 사용하여 컴포넌트 생성자에 컴포넌트를 삽입하여 컴포넌트 내부의 서비스를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="3d28664e3228d12b67d0ad4e11b39b8bfa234399" translate="yes" xml:space="preserve">
          <source>Then you can assert that the quote element displays the expected text.</source>
          <target state="translated">그런 다음 quote 요소가 예상 텍스트를 표시하도록 주장 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fb5aa1a656847347c6ad33e809979b893a2a0af1" translate="yes" xml:space="preserve">
          <source>Then you can use the &quot;upgraded&quot; AngularJS service by injecting it into an Angular component or service.</source>
          <target state="translated">그런 다음 &quot;업그레이드 된&quot;AngularJS 서비스를 Angular 컴포넌트 또는 서비스에 삽입하여 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7235d5f78eb3fc75c9de23a894249dff7395ce21" translate="yes" xml:space="preserve">
          <source>Then you create a child component (B) that defines its own, &lt;em&gt;specialized&lt;/em&gt; providers for &lt;code&gt;CarService&lt;/code&gt; and &lt;code&gt;EngineService&lt;/code&gt; that have special capabilities suitable for whatever is going on in component (B).</source>
          <target state="translated">그런 다음 컴포넌트 (B)에서 발생하는 모든 작업에 적합한 특수 기능이있는 &lt;code&gt;CarService&lt;/code&gt; 및 &lt;code&gt;EngineService&lt;/code&gt; 에 대한 고유 한 &lt;em&gt;특수&lt;/em&gt; 제공자를 정의하는 하위 컴포넌트 (B)를 작성합니다 .</target>
        </trans-unit>
        <trans-unit id="13b7250037e2791c30d8b2b60220889c166804a2" translate="yes" xml:space="preserve">
          <source>Then you inject the &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; in the &lt;code&gt;HeroListComponent&lt;/code&gt; constructor.</source>
          <target state="translated">그런 다음 주입 &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; 을 에 &lt;code&gt;HeroListComponent&lt;/code&gt; 의 생성자입니다.</target>
        </trans-unit>
        <trans-unit id="06b87cc1eeb739adae3341e69733b9a6c335c899" translate="yes" xml:space="preserve">
          <source>Then you should define an Angular provider to be included in your &lt;code&gt;&lt;a href=&quot;../../core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt;&lt;code&gt;providers&lt;/code&gt; property.</source>
          <target state="translated">그런 다음 &lt;code&gt;&lt;a href=&quot;../../core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; &lt;code&gt;providers&lt;/code&gt; 속성에 포함 할 Angular 제공자를 정의해야 합니다.</target>
        </trans-unit>
        <trans-unit id="3996f4d02c86b0214c6856fbd020c552536ef23e" translate="yes" xml:space="preserve">
          <source>Then you tell the &lt;code&gt;HeroService&lt;/code&gt; to fetch the hero with that &lt;code&gt;id&lt;/code&gt; and return the result of the &lt;code&gt;HeroService&lt;/code&gt; request.</source>
          <target state="translated">그런 다음 &lt;code&gt;HeroService&lt;/code&gt; 에 해당 &lt;code&gt;id&lt;/code&gt; 가진 영웅을 가져오고 &lt;code&gt;HeroService&lt;/code&gt; 요청 의 결과를 리턴하도록 지시하십시오 .</target>
        </trans-unit>
        <trans-unit id="ed06e960c3c34ee183cdb9c0a6a2a5d5f20a03f6" translate="yes" xml:space="preserve">
          <source>Then, another animation can be called when the current animation finishes. For example, the button goes from the &lt;code&gt;inProgress&lt;/code&gt; state to the &lt;code&gt;closed&lt;/code&gt; state when the API call is completed.</source>
          <target state="translated">그런 다음 현재 애니메이션이 끝나면 다른 애니메이션을 호출 할 수 있습니다. 예를 들어, 버튼에서가는 &lt;code&gt;inProgress&lt;/code&gt; 받는 상태 &lt;code&gt;closed&lt;/code&gt; API 호출이 완료 될 때 상태입니다.</target>
        </trans-unit>
        <trans-unit id="edf82d0382f477967edce3fb6b12681334c96dc8" translate="yes" xml:space="preserve">
          <source>Then, when some component injects &lt;code&gt;UserService&lt;/code&gt;, Angular finds it in the app root injector, and delivers the app-wide singleton service. No problem.</source>
          <target state="translated">그런 다음 일부 구성 요소가 &lt;code&gt;UserService&lt;/code&gt; 를 주입 하면 Angular는이를 응용 프로그램 루트 인젝터에서 찾아서 응용 프로그램 전체의 싱글 톤 서비스를 제공합니다. 문제 없어요.</target>
        </trans-unit>
        <trans-unit id="c3a0ceb7d76985503f10a062c39d4ecc9f73b6e5" translate="yes" xml:space="preserve">
          <source>Then, when you need that file&amp;rsquo;s code in another file, you import it like this:</source>
          <target state="translated">그런 다음 다른 파일에 해당 파일의 코드가 필요할 때 다음과 같이 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="7f94783b2fdbdd4b5788239abe980a7f9c2a0feb" translate="yes" xml:space="preserve">
          <source>Then, you change into your library directory to build the schematic</source>
          <target state="translated">그런 다음 라이브러리 디렉토리로 변경하여 회로도를 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="b558f2a5f6c20368ac31efe8ab04dc45d807c8b6" translate="yes" xml:space="preserve">
          <source>There are &lt;em&gt;important differences&lt;/em&gt; in the way the router treats these &lt;em&gt;child routes&lt;/em&gt;.</source>
          <target state="translated">라우터가 이러한 &lt;em&gt;하위 경로를&lt;/em&gt; 처리하는 방식 에는 &lt;em&gt;중요한 차이점&lt;/em&gt; 이 있습니다 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="566ab24996dda55d07b696f9fcb91995338b7d7a" translate="yes" xml:space="preserve">
          <source>There are a few cases where you give a component an attribute, such as when you want to augment a built-in element. For example, &lt;a href=&quot;https://material.angular.io/components/button/overview&quot;&gt;Material Design&lt;/a&gt; uses this technique with &lt;code&gt;&amp;lt;button mat-button&amp;gt;&lt;/code&gt;. However, you wouldn't use this technique on a custom element.</source>
          <target state="translated">내장 요소를 기능 보강하려는 경우와 같이 구성 요소에 속성을 제공하는 경우가 있습니다. 예를 들어 &lt;a href=&quot;https://material.angular.io/components/button/overview&quot;&gt;머티리얼 디자인&lt;/a&gt; 은이 기술을 &lt;code&gt;&amp;lt;button mat-button&amp;gt;&lt;/code&gt; 과 함께 사용합니다 . 그러나 사용자 지정 요소에는이 기술을 사용하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="4a44db3593849baa6fd286f1a9dad3ee4be9f41f" translate="yes" xml:space="preserve">
          <source>There are a few exceptional observables where this is not necessary. The &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; observables are among the exceptions.</source>
          <target state="translated">이것이 필요하지 않은 예외적 인 관측 물이 몇 가지 있습니다. &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; 의 관찰 가능한이 예외 중입니다.</target>
        </trans-unit>
        <trans-unit id="1e9c60f04e3a15c6ff01e79a5018c059fb20d209" translate="yes" xml:space="preserve">
          <source>There are a few limited reasons why the Angular service worker might change the version of a running app. Some of them are error conditions:</source>
          <target state="translated">Angular 서비스 워커가 실행중인 앱의 버전을 변경하는 데는 몇 가지 제한적인 이유가 있습니다. 그들 중 일부는 오류 조건입니다.</target>
        </trans-unit>
        <trans-unit id="a6013a4fe41dc5c7411d2f89c39f1e20616a17ba" translate="yes" xml:space="preserve">
          <source>There are a few options if you want to get correct types for your custom elements. Let's assume you create a &lt;code&gt;my-dialog&lt;/code&gt; custom element based on the following component:</source>
          <target state="translated">사용자 정의 요소에 올바른 유형을 얻으려면 몇 가지 옵션이 있습니다. 다음 컴포넌트를 기반으로 &lt;code&gt;my-dialog&lt;/code&gt; 사용자 정의 요소 를 작성한다고 가정하십시오 .</target>
        </trans-unit>
        <trans-unit id="3191a1618b8faa99c49daa031fba849003a13bd3" translate="yes" xml:space="preserve">
          <source>There are a few rules in particular that will make it much easier to do &lt;em&gt;an incremental upgrade&lt;/em&gt; using the Angular &lt;code&gt;&lt;a href=&quot;../api/upgrade/static&quot;&gt;upgrade/static&lt;/a&gt;&lt;/code&gt; module:</source>
          <target state="translated">특히 Angular &lt;code&gt;&lt;a href=&quot;../api/upgrade/static&quot;&gt;upgrade/static&lt;/a&gt;&lt;/code&gt; 모듈을 사용하여 &lt;em&gt;증분 업그레이드&lt;/em&gt; 를 훨씬 쉽게 수행 할 수있는 몇 가지 규칙이 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a01d9115f3a3ad52c673da81193da8c683b0a1c6" translate="yes" xml:space="preserve">
          <source>There are a few things to note, though:</source>
          <target state="translated">그러나 몇 가지주의 할 사항이 있습니다.</target>
        </trans-unit>
        <trans-unit id="cdc057156f4a0afc834e3e15f4b4be9942560eb6" translate="yes" xml:space="preserve">
          <source>There are a number of options for modifying the default search behavior, using &lt;em&gt;parameter decorators&lt;/em&gt; on the service-valued parameters of a class constructor.</source>
          <target state="translated">클래스 생성자의 서비스 값 매개 변수에 &lt;em&gt;매개 변수 데코레이터&lt;/em&gt; 를 사용하여 기본 검색 동작을 수정하는 여러 가지 옵션이 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c676ec6b692f6df001e20a544ca9a4ac7cc35255" translate="yes" xml:space="preserve">
          <source>There are also completions within elements. Any elements you have as a component selector will show up in the completion list.</source>
          <target state="translated">요소 내에 완성도 있습니다. 컴포넌트 선택기로 보유한 모든 요소가 완료 목록에 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="2b0041e80379dba90a5c135457752493c4e52ac4" translate="yes" xml:space="preserve">
          <source>There are configuration files for both the &lt;a href=&quot;https://karma-runner.github.io/latest/config/configuration-file.html&quot;&gt;Karma JavaScript test runner&lt;/a&gt; and &lt;a href=&quot;https://www.protractortest.org/#/api-overview&quot;&gt;Protractor&lt;/a&gt; end-to-end testing tool, which you must adjust to start Chrome without sandboxing.</source>
          <target state="translated">&lt;a href=&quot;https://karma-runner.github.io/latest/config/configuration-file.html&quot;&gt;Karma JavaScript 테스트 러너&lt;/a&gt; 및 &lt;a href=&quot;https://www.protractortest.org/#/api-overview&quot;&gt;각도기&lt;/a&gt; 엔드 투 엔드 테스트 도구에 대한 구성 파일이 있으며 샌드 박싱없이 Chrome을 시작하도록 조정해야합니다.</target>
        </trans-unit>
        <trans-unit id="8f70e6e9da25ad1b098bbc6719f6c5877729d762" translate="yes" xml:space="preserve">
          <source>There are five general categories of feature modules which tend to fall into the following groups:</source>
          <target state="translated">다음과 같은 그룹으로 분류되는 5 가지 일반적인 기능 모듈 범주가 있습니다.</target>
        </trans-unit>
        <trans-unit id="9d24499582f9d74be4e55dfd292e78d548d73a51" translate="yes" xml:space="preserve">
          <source>There are many more interceptors in the complete sample code.</source>
          <target state="translated">완전한 샘플 코드에는 더 많은 인터셉터가 있습니다.</target>
        </trans-unit>
        <trans-unit id="a08951de0f1de6bd2f6e60bba79ba111ed7ae1d7" translate="yes" xml:space="preserve">
          <source>There are many resources to complement the Angular docs. Mozilla's MDN docs include both &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn/HTML&quot;&gt;HTML&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript&quot;&gt;JavaScript&lt;/a&gt; introductions. &lt;a href=&quot;https://www.typescriptlang.org/docs/home.html&quot;&gt;TypeScript's docs&lt;/a&gt; include a 5-minute tutorial. Various online course platforms, such as &lt;a href=&quot;http://www.udemy.com&quot;&gt;Udemy&lt;/a&gt; and &lt;a href=&quot;https://www.codecademy.com/&quot;&gt;Codecademy&lt;/a&gt;, also cover web development basics.</source>
          <target state="translated">Angular 문서를 보완하는 많은 리소스가 있습니다. Mozilla의 MDN 문서에는 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn/HTML&quot;&gt;HTML&lt;/a&gt; 및 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript&quot;&gt;JavaScript&lt;/a&gt; 소개가 모두 포함되어 있습니다 . &lt;a href=&quot;https://www.typescriptlang.org/docs/home.html&quot;&gt;TypeScript의 문서&lt;/a&gt; 에는 5 분 자습서가 포함되어 있습니다. &lt;a href=&quot;http://www.udemy.com&quot;&gt;Udemy&lt;/a&gt; 및 &lt;a href=&quot;https://www.codecademy.com/&quot;&gt;Codecademy&lt;/a&gt; 와 같은 다양한 온라인 코스 플랫폼 도 웹 개발 기본 사항을 다룹니다.</target>
        </trans-unit>
        <trans-unit id="66ad0af28f7ac3d95ccbf0739cccfa8af77155a9" translate="yes" xml:space="preserve">
          <source>There are many ways to structure AngularJS applications. When you begin to upgrade these applications to Angular, some will turn out to be much more easy to work with than others. There are a few key techniques and patterns that you can apply to future proof apps even before you begin the migration.</source>
          <target state="translated">AngularJS 애플리케이션을 구성하는 방법에는 여러 가지가 있습니다. 이러한 응용 프로그램을 Angular로 업그레이드하기 시작하면 일부 응용 프로그램이 다른 응용 프로그램보다 작업하기가 훨씬 쉽습니다. 마이그레이션을 시작하기 전에도 미래의 증거 앱에 적용 할 수있는 몇 가지 주요 기술과 패턴이 있습니다.</target>
        </trans-unit>
        <trans-unit id="00d98f0576741a1e108297fca91f90e751881e55" translate="yes" xml:space="preserve">
          <source>There are multiple ways to prevent this:</source>
          <target state="translated">이를 방지하는 여러 가지 방법이 있습니다.</target>
        </trans-unit>
        <trans-unit id="ff870a40c32b15241e0dc290ffe99e696ec7e316" translate="yes" xml:space="preserve">
          <source>There are new requirements for the Tour of Heroes app:</source>
          <target state="translated">Tour of Heroes 앱에 대한 새로운 요구 사항이 있습니다.</target>
        </trans-unit>
        <trans-unit id="b7c35a18e43689374a55ffc6988124f5f7c095f9" translate="yes" xml:space="preserve">
          <source>There are no easy answers to these questions. Prohibiting multiple structural directives makes them moot. There's an easy solution for this use case: put the &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; on a container element that wraps the &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; element. One or both elements can be an &lt;a href=&quot;structural-directives#ngcontainer&quot;&gt;&lt;code&gt;ng-container&lt;/code&gt;&lt;/a&gt; so you don't have to introduce extra levels of HTML.</source>
          <target state="translated">이 질문들에 대한 쉬운 대답은 없습니다. 여러 구조적 지시문을 금지하면 문제가 발생합니다. 이 사용 사례에 대한 쉬운 해결책이있다 : 풋 &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; 을 감쌈 컨테이너 요소에 &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 요소를. 요소 중 하나 또는 둘 다 &lt;a href=&quot;structural-directives#ngcontainer&quot;&gt; &lt;code&gt;ng-container&lt;/code&gt; &lt;/a&gt; 있으므로 추가 수준의 HTML을 도입 할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="93b4d15b36f576847810650de967eae2da32c1f5" translate="yes" xml:space="preserve">
          <source>There are no parameters for this parent route so you're done with it.</source>
          <target state="translated">이 상위 경로에 대한 매개 변수가 없으므로 완료되었습니다.</target>
        </trans-unit>
        <trans-unit id="fcf8d135851b80ffbe87dcd35d86d4ad22ed02e6" translate="yes" xml:space="preserve">
          <source>There are no parameters.</source>
          <target state="translated">매개 변수가 없습니다.</target>
        </trans-unit>
        <trans-unit id="347acdbd61105fadd07872f8156b46696cb3b692" translate="yes" xml:space="preserve">
          <source>There are only two changes. The &lt;code&gt;template&lt;/code&gt; is simply the new element tag identified by the component's &lt;code&gt;selector&lt;/code&gt; property. This displays the hero form when the application component is loaded. Don't forget to remove the &lt;code&gt;name&lt;/code&gt; field from the class body as well.</source>
          <target state="translated">두 가지 변경 사항 만 있습니다. &lt;code&gt;template&lt;/code&gt; 단순히 구성 요소의 식별 새로운 요소 태그입니다 &lt;code&gt;selector&lt;/code&gt; 속성입니다. 애플리케이션 컴포넌트가로드 될 때 영웅 양식이 표시됩니다. 클래스 본문에서 &lt;code&gt;name&lt;/code&gt; 필드 를 제거하는 것을 잊지 마십시오 .</target>
        </trans-unit>
        <trans-unit id="159f34be61579ceb6ae8d16ef7ee7eeb786eef01" translate="yes" xml:space="preserve">
          <source>There are paid CI services like Circle CI and Travis CI, and you can also host your own for free using Jenkins and others. Although Circle CI and Travis CI are paid services, they are provided free for open source projects. You can create a public project on GitHub and add these services without paying. Contributions to the Angular repo are automatically run through a whole suite of Circle CI tests.</source>
          <target state="translated">Circle CI 및 Travis CI와 같은 유료 CI 서비스가 있으며 Jenkins 및 기타를 사용하여 무료로 호스트 할 수도 있습니다. Circle CI 및 Travis CI는 유료 서비스이지만 오픈 소스 프로젝트를 위해 무료로 제공됩니다. GitHub에서 공개 프로젝트를 생성하고 비용을 지불하지 않고 이러한 서비스를 추가 할 수 있습니다. Angular 리포지토리에 대한 기여는 전체 Circle CI 테스트 스위트를 통해 자동으로 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="879cd324a70c4c96acf893c99d3b9dc84ee024ff" translate="yes" xml:space="preserve">
          <source>There are several examples over the next few sections.</source>
          <target state="translated">다음 몇 섹션에 몇 가지 예가 있습니다.</target>
        </trans-unit>
        <trans-unit id="2cf39c6658c13b371aa454d5575113ab2b716d55" translate="yes" xml:space="preserve">
          <source>There are several notable changes here:</source>
          <target state="translated">여기에 몇 가지 주목할만한 변경 사항이 있습니다.</target>
        </trans-unit>
        <trans-unit id="b3ecb535a2ce87ce6aa9dd8adc9feb06a8b4ddfd" translate="yes" xml:space="preserve">
          <source>There are several ways to add styles to a component:</source>
          <target state="translated">컴포넌트에 스타일을 추가하는 방법에는 여러 가지가 있습니다.</target>
        </trans-unit>
        <trans-unit id="1b266b00929430b0621b4b49767764faeeeeab85" translate="yes" xml:space="preserve">
          <source>There are three categories of directive:</source>
          <target state="translated">지시문에는 세 가지 범주가 있습니다.</target>
        </trans-unit>
        <trans-unit id="38597e951fad51067690768d9f762544a13ddd71" translate="yes" xml:space="preserve">
          <source>There are three different &lt;em&gt;urgency levels&lt;/em&gt; used to style the alerts based on the severity or importance of the content.</source>
          <target state="translated">콘텐츠의 심각도 또는 중요도에 따라 경고의 스타일을 지정하는 데 사용되는 세 가지 &lt;em&gt;긴급 수준&lt;/em&gt; 이 있습니다.</target>
        </trans-unit>
        <trans-unit id="e76077d148cfb3df1507661f67b5067f5ff2d5a6" translate="yes" xml:space="preserve">
          <source>There are three kinds of directives in Angular:</source>
          <target state="translated">Angular에는 세 가지 종류의 지시문이 있습니다.</target>
        </trans-unit>
        <trans-unit id="25e737b2092b55d9eb5f239e56b9516518d5f446" translate="yes" xml:space="preserve">
          <source>There are three main reasons to create a Universal version of your app.</source>
          <target state="translated">유니버설 버전의 앱을 만들어야하는 세 가지 주요 이유가 있습니다.</target>
        </trans-unit>
        <trans-unit id="a4f700c6eaa2262317c0d957e29675f3621c94d0" translate="yes" xml:space="preserve">
          <source>There are three main steps to setting up a lazy-loaded feature module:</source>
          <target state="translated">지연로드 기능 모듈을 설정하는 주요 단계는 세 가지입니다.</target>
        </trans-unit>
        <trans-unit id="165573f1548a8f99cacaaa3440578c4519f99108" translate="yes" xml:space="preserve">
          <source>There are three phases of AOT compilation.</source>
          <target state="translated">AOT 컴파일에는 세 단계가 있습니다.</target>
        </trans-unit>
        <trans-unit id="ab9b96e090b917419a7b4b07d60725578c370783" translate="yes" xml:space="preserve">
          <source>There are three significant differences from &lt;code&gt;getHeroes()&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;getHeroes()&lt;/code&gt; 와는 세 가지 중요한 차이점이 있습니다 .</target>
        </trans-unit>
        <trans-unit id="9dd01b7be4e57b57b1627f79224ce07af7d2d99e" translate="yes" xml:space="preserve">
          <source>There are three supported input types.</source>
          <target state="translated">지원되는 입력 유형은 세 가지입니다.</target>
        </trans-unit>
        <trans-unit id="f5034306f8346e549a24ab826839194a108f3818" translate="yes" xml:space="preserve">
          <source>There are two categories of pipes: &lt;em&gt;pure&lt;/em&gt; and &lt;em&gt;impure&lt;/em&gt;. Pipes are pure by default. Every pipe you've seen so far has been pure. You make a pipe impure by setting its pure flag to false. You could make the &lt;code&gt;FlyingHeroesPipe&lt;/code&gt; impure like this:</source>
          <target state="translated">파이프에는 &lt;em&gt;순수&lt;/em&gt; 와 &lt;em&gt;불순&lt;/em&gt; 의 두 가지 범주가 있습니다 . 파이프는 기본적으로 순수합니다. 지금까지 본 모든 파이프는 순수했습니다. 순수한 플래그를 false로 설정하여 파이프를 불순하게 만듭니다. &lt;code&gt;FlyingHeroesPipe&lt;/code&gt; 를 다음 과 같이 불순 하게 만들 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c0d0261683ac70f77d2cb64caaaa6be2e633442f" translate="yes" xml:space="preserve">
          <source>There are two changes:</source>
          <target state="translated">두 가지 변경 사항이 있습니다.</target>
        </trans-unit>
        <trans-unit id="0757ae2710d35ffd65d63c8e4408b8f8b222e032" translate="yes" xml:space="preserve">
          <source>There are two important things to keep in mind when using Web Workers in Angular projects:</source>
          <target state="translated">Angular 프로젝트에서 웹 워커를 사용할 때 명심해야 할 두 가지 사항이 있습니다.</target>
        </trans-unit>
        <trans-unit id="ed5307db9a7ed9a50bdf282cc464f6252ca2c8b1" translate="yes" xml:space="preserve">
          <source>There are two independent frameworks running in a single application, each framework treats the other as a black box.</source>
          <target state="translated">단일 애플리케이션에서 실행되는 두 개의 독립적 인 프레임 워크가 있으며 각 프레임 워크는 다른 프레임 워크를 블랙 박스로 취급합니다.</target>
        </trans-unit>
        <trans-unit id="ad6b0f208e637f748bf275b29c341ba579e95709" translate="yes" xml:space="preserve">
          <source>There are two injector hierarchies in Angular:</source>
          <target state="translated">Angular에는 두 가지 인젝터 계층이 있습니다.</target>
        </trans-unit>
        <trans-unit id="43178632845a92d22afa35ca0676f6eb7a1f7062" translate="yes" xml:space="preserve">
          <source>There are two kinds of generated attributes:</source>
          <target state="translated">생성 된 속성에는 두 가지 종류가 있습니다.</target>
        </trans-unit>
        <trans-unit id="ae6efc4f0655823ca7f29eb7bf3eefe1625ce1e5" translate="yes" xml:space="preserve">
          <source>There are two main kinds of entry components:</source>
          <target state="translated">엔트리 구성 요소에는 두 가지 주요 유형이 있습니다.</target>
        </trans-unit>
        <trans-unit id="550828cc689d902dc2704d305cf15fafb615c2b6" translate="yes" xml:space="preserve">
          <source>There are two more injectors above &lt;code&gt;root&lt;/code&gt;, an additional &lt;code&gt;ModuleInjector&lt;/code&gt; and &lt;code&gt;NullInjector()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;root&lt;/code&gt; 위에 추가 &lt;code&gt;ModuleInjector&lt;/code&gt; 및 &lt;code&gt;NullInjector()&lt;/code&gt; 두 개의 인젝터가 더 있습니다 .</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
