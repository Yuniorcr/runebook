<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="angular">
    <body>
      <group id="angular">
        <trans-unit id="ec82505f597f4541fee947d1b90b7670a8bfe1fc" translate="yes" xml:space="preserve">
          <source>There are two other kinds of Angular directives, described extensively elsewhere: (1) components and (2) attribute directives.</source>
          <target state="translated">(1) 구성 요소 및 (2) 속성 지시문 등 다른 곳에 광범위하게 설명 된 다른 종류의 Angular 지시문이 있습니다.</target>
        </trans-unit>
        <trans-unit id="eee5ab865a86fd0b73b19b491d8642111214cd0d" translate="yes" xml:space="preserve">
          <source>There are two possible degraded states:</source>
          <target state="translated">가능한 두 가지 저하 상태가 있습니다.</target>
        </trans-unit>
        <trans-unit id="25650f34b85cc033bcf18133335c7c20ab26b348" translate="yes" xml:space="preserve">
          <source>There are two types of validator functions: sync validators and async validators.</source>
          <target state="translated">유효성 검사기 기능에는 동기화 유효성 검사기와 비동기 유효성 검사기의 두 가지 유형이 있습니다.</target>
        </trans-unit>
        <trans-unit id="3f8e7458d2bd37a51a02a94b62cdecdc59f8af4c" translate="yes" xml:space="preserve">
          <source>There are two ways to make a service a singleton in Angular:</source>
          <target state="translated">Angular에서 서비스를 싱글 톤으로 만드는 두 가지 방법이 있습니다.</target>
        </trans-unit>
        <trans-unit id="faa6ad5446f7861f6ecf46da71ea515c5fb5f071" translate="yes" xml:space="preserve">
          <source>There are two ways to update the model value:</source>
          <target state="translated">모델 값을 업데이트하는 두 가지 방법이 있습니다.</target>
        </trans-unit>
        <trans-unit id="f26b5471a1dd6edb128afdf26847e8bb73608215" translate="yes" xml:space="preserve">
          <source>There are usually one or more main sections that may be further divided into secondary sections.</source>
          <target state="translated">보조 섹션으로 더 나눌 수있는 하나 이상의 기본 섹션이 있습니다.</target>
        </trans-unit>
        <trans-unit id="ca00ae37aaf723dcf8b96d9e5fe70f20f93c9cc4" translate="yes" xml:space="preserve">
          <source>There is a &lt;a href=&quot;hierarchical-dependency-injection&quot;&gt;tree hierarchy of injectors&lt;/a&gt;, with a root injector and an additional injector for each component.</source>
          <target state="translated">가 &lt;a href=&quot;hierarchical-dependency-injection&quot;&gt;인젝터의 트리 계층&lt;/a&gt; 루트 인젝터 및 각 구성 요소에 대한 추가 인젝터와 함께.</target>
        </trans-unit>
        <trans-unit id="027fb989b8678c3235e885de0c12df209840f1d8" translate="yes" xml:space="preserve">
          <source>There is a rule for each defined day period. The first rule is applied to the first day period and so on. Fall back to AM/PM when no rules are available.</source>
          <target state="translated">정의 된 각 기간에 대한 규칙이 있습니다. 첫 번째 규칙은 첫 번째 기간 등에 적용됩니다. 사용 가능한 규칙이 없으면 AM / PM으로 폴백합니다.</target>
        </trans-unit>
        <trans-unit id="7654c24d9c7b87cc2fb7d574ad4e33ff2eb6cd63" translate="yes" xml:space="preserve">
          <source>There is a small but critical difference. In the &lt;code&gt;AppRoutingModule&lt;/code&gt;, you used the static &lt;strong&gt;&lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt;&lt;/strong&gt; method to register the routes and application level service providers. In a feature module you use the static &lt;strong&gt;&lt;code&gt;forChild&lt;/code&gt;&lt;/strong&gt; method.</source>
          <target state="translated">작지만 중요한 차이점이 있습니다. 에서 &lt;code&gt;AppRoutingModule&lt;/code&gt; , 당신은 정적 사용 &lt;strong&gt; &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt; &lt;/strong&gt; 경로 및 응용 프로그램 수준의 서비스 제공을 등록하는 방법. 기능 모듈에서는 정적 &lt;strong&gt; &lt;code&gt;forChild&lt;/code&gt; &lt;/strong&gt; 메소드 를 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="1089bb549e548f1eece3447abc86312a541125a5" translate="yes" xml:space="preserve">
          <source>There is an API for navigating &lt;em&gt;down&lt;/em&gt; the view hierarchy. Check out &lt;code&gt;&lt;a href=&quot;../api/core/query&quot;&gt;Query&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/core/querylist&quot;&gt;QueryList&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/core/viewchildren&quot;&gt;ViewChildren&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;../api/core/contentchildren&quot;&gt;ContentChildren&lt;/a&gt;&lt;/code&gt; in the &lt;a href=&quot;../api/index&quot;&gt;API Reference&lt;/a&gt;.</source>
          <target state="translated">탐색을위한 API가 &lt;em&gt;아래로&lt;/em&gt; 보기 계층 구조. 확인 &lt;code&gt;&lt;a href=&quot;../api/core/query&quot;&gt;Query&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;../api/core/querylist&quot;&gt;QueryList&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;../api/core/viewchildren&quot;&gt;ViewChildren&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;../api/core/contentchildren&quot;&gt;ContentChildren&lt;/a&gt;&lt;/code&gt; 을 에 &lt;a href=&quot;../api/index&quot;&gt;API 참조&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="bf10db6389feae71b1aa42ec8c45a030a861e2e0" translate="yes" xml:space="preserve">
          <source>There is an important distinction between using another module's component and using a service from another module. Import modules when you want to use directives, pipes, and components. Importing a module with services means that you will have a new instance of that service, which typically is not what you need (typically one wants to reuse an existing service). Use module imports to control service instantiation.</source>
          <target state="translated">다른 모듈의 구성 요소를 사용하는 것과 다른 모듈의 서비스를 사용하는 것에는 중요한 차이점이 있습니다. 지시문, 파이프 및 구성 요소를 사용하려는 경우 모듈을 가져옵니다. 서비스가 포함 된 모듈을 가져 오면 해당 서비스의 새 인스턴스가 생길 것입니다. 이는 일반적으로 필요하지 않습니다 (일반적으로 기존 서비스를 재사용하려고 함). 서비스 가져 오기를 제어하려면 모듈 가져 오기를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="cceabdb690dfa8a94f69d03b06952860cf555cc4" translate="yes" xml:space="preserve">
          <source>There is exactly one injector. Even in multi-module applications, everything is poured into one big namespace.</source>
          <target state="translated">정확히 하나의 인젝터가 있습니다. 다중 모듈 응용 프로그램에서도 모든 것이 하나의 큰 네임 스페이스에 부어집니다.</target>
        </trans-unit>
        <trans-unit id="8b6ca3d80875d293406dd0f142004f9fede44d55" translate="yes" xml:space="preserve">
          <source>There is no &lt;em&gt;live example&lt;/em&gt; for this cookbook because it describes Visual Studio, not the Angular application itself. It uses the starter Angular application created by the CLI command &lt;a href=&quot;cli/new&quot;&gt;&lt;code&gt;ng new&lt;/code&gt;&lt;/a&gt; as an example.</source>
          <target state="translated">이 요리 책에는 Angular 응용 프로그램 자체가 아닌 Visual Studio를 설명하기 때문에 &lt;em&gt;실제 예제&lt;/em&gt; 가 없습니다 . CLI 명령 &lt;a href=&quot;cli/new&quot;&gt; &lt;code&gt;ng new&lt;/code&gt; &lt;/a&gt; 로 작성된 starter Angular 응용 프로그램을 예로 사용합니다.</target>
        </trans-unit>
        <trans-unit id="133a9567390a248ff96c3ddfeb770bd616eadd71" translate="yes" xml:space="preserve">
          <source>There is no default for the child route so you need to pick one.</source>
          <target state="translated">하위 경로에는 기본값이 없으므로 하나를 선택해야합니다.</target>
        </trans-unit>
        <trans-unit id="c9bb67cef244a52a5902839951c12ad9006e5375" translate="yes" xml:space="preserve">
          <source>There is no issue when the user navigates to that URL from within a running client. The Angular router interprets the URL and routes to that page and hero.</source>
          <target state="translated">사용자가 실행중인 클라이언트 내에서 해당 URL로 이동할 때 문제가 없습니다. Angular 라우터는 URL을 해석하고 해당 페이지와 히어로로 라우트합니다.</target>
        </trans-unit>
        <trans-unit id="565fc140f826820d99228d067e03328fac73f380" translate="yes" xml:space="preserve">
          <source>There is no longer a reference to &lt;code&gt;template&lt;/code&gt; and, therefore, nothing to trouble the compiler when it later interprets the &lt;em&gt;collector's&lt;/em&gt; output in &lt;code&gt;.metadata.json&lt;/code&gt;.</source>
          <target state="translated">더 이상 &lt;code&gt;template&lt;/code&gt; 대한 참조가 없으므로 나중에 &lt;code&gt;.metadata.json&lt;/code&gt; 의 &lt;em&gt;콜렉터&lt;/em&gt; 출력을 해석 할 때 컴파일러에 문제 가되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="4e748fc4f70bcf252a46a3d8e24d8e97b2bd9b8c" translate="yes" xml:space="preserve">
          <source>There is no public API for acquiring a parent reference. However, because every component instance is added to an injector's container, you can use Angular dependency injection to reach a parent component.</source>
          <target state="translated">부모 참조를 얻기위한 공개 API는 없습니다. 그러나 모든 구성 요소 인스턴스가 인젝터 컨테이너에 추가되므로 각도 의존성 주입을 사용하여 상위 구성 요소에 도달 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9e1f226d0769c2006bed4876b7fe7a774057642d" translate="yes" xml:space="preserve">
          <source>There is no single configuration that works for every server. The following sections describe configurations for some of the most popular servers. The list is by no means exhaustive, but should provide you with a good starting point.</source>
          <target state="translated">모든 서버에서 작동하는 단일 구성은 없습니다. 다음 섹션에서는 가장 많이 사용되는 일부 서버의 구성에 대해 설명합니다. 이 목록이 완전한 것은 아니지만 좋은 출발점을 제공해야합니다.</target>
        </trans-unit>
        <trans-unit id="259bb0afbd8fefe05bdc556bd5eef64a565fd518" translate="yes" xml:space="preserve">
          <source>There is no specific API for upgrading an AngularJS service. Instead you should just follow the following recipe:</source>
          <target state="translated">AngularJS 서비스를 업그레이드하기위한 특정 API는 없습니다. 대신 다음 레시피를 따라야합니다.</target>
        </trans-unit>
        <trans-unit id="550621addec4fd2e0708772894f55350f2a0f79c" translate="yes" xml:space="preserve">
          <source>There is no upgrade method to convert filters into pipes. You won't miss it. It's easy to turn the filter function into an equivalent Pipe class. The implementation is the same as before, repackaged in the &lt;code&gt;transform&lt;/code&gt; method. Rename the file to &lt;code&gt;checkmark.pipe.ts&lt;/code&gt; to conform with Angular conventions:</source>
          <target state="translated">필터를 파이프로 변환하는 업그레이드 방법은 없습니다. 당신은 그것을 놓치지 않을 것입니다. 필터 기능을 동등한 Pipe 클래스로 쉽게 전환 할 수 있습니다. 구현은 이전과 동일하며 &lt;code&gt;transform&lt;/code&gt; 메소드 에서 다시 패키지됩니다 . 각도 규칙에 따라 파일 이름을 &lt;code&gt;checkmark.pipe.ts&lt;/code&gt; 로 바꾸십시오 .</target>
        </trans-unit>
        <trans-unit id="4367e8254fa20fae31dcd949ca18914ce55ee3c5" translate="yes" xml:space="preserve">
          <source>There is one exception to this behavior that applies to &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt;. &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; has &lt;code&gt;trackBy&lt;/code&gt; functionality that can deal with referential inequality of objects when iterating over them. See &lt;a href=&quot;template-syntax#ngfor-with-trackby&quot;&gt;*ngFor with &lt;code&gt;trackBy&lt;/code&gt;&lt;/a&gt; for details.</source>
          <target state="translated">이 동작에는 &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 에 적용되는 예외가 있습니다 . &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 는 이 &lt;code&gt;trackBy&lt;/code&gt; 의 반복하는 그들에 객체 참조 불평등을 해결할 수있는 기능. 자세한 내용은 &lt;a href=&quot;template-syntax#ngfor-with-trackby&quot;&gt;* ngForFor &lt;code&gt;trackBy&lt;/code&gt; &lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="7dd62d5ae3789ef38b487eab0e8d1f7f87b82b99" translate="yes" xml:space="preserve">
          <source>There is one exception to this rule. Attributes can be changed by &lt;code&gt;&lt;a href=&quot;template-syntax&quot;&gt;setAttribute()&lt;/a&gt;&lt;/code&gt;, which re-initializes corresponding DOM properties.</source>
          <target state="translated">이 규칙에는 한 가지 예외가 있습니다. 속성은 해당 DOM 특성을 다시 초기화하는 &lt;code&gt;&lt;a href=&quot;template-syntax&quot;&gt;setAttribute()&lt;/a&gt;&lt;/code&gt; 로 변경할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d33886b39df983b142ac0e4c678d0df8e24d2439" translate="yes" xml:space="preserve">
          <source>There is one exception to this rule: to make local development easier, browsers do &lt;em&gt;not&lt;/em&gt; require a secure connection when accessing an app on &lt;code&gt;localhost&lt;/code&gt;.</source>
          <target state="translated">이 규칙에는 한 가지 예외가 있습니다. 로컬 개발을 쉽게하기 위해 &lt;code&gt;localhost&lt;/code&gt; 의 앱에 액세스 할 때 브라우저는 보안 연결이 필요 하지 &lt;em&gt;않습니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="56ed5ae7d3569c2686c1ede9ce1a1546720090e8" translate="yes" xml:space="preserve">
          <source>There is only one root injector for an app. Providing &lt;code&gt;UserService&lt;/code&gt; at the &lt;code&gt;root&lt;/code&gt; or &lt;code&gt;AppModule&lt;/code&gt; level means it is registered with the root injector. There is just one &lt;code&gt;UserService&lt;/code&gt; instance in the entire app and every class that injects &lt;code&gt;UserService&lt;/code&gt; gets this service instance &lt;em&gt;unless&lt;/em&gt; you configure another provider with a &lt;em&gt;child injector&lt;/em&gt;.</source>
          <target state="translated">앱에는 하나의 루트 인젝터 만 있습니다. &lt;code&gt;root&lt;/code&gt; 또는 &lt;code&gt;AppModule&lt;/code&gt; 수준 에서 &lt;code&gt;UserService&lt;/code&gt; 를 제공 한다는 것은 루트 인젝터에 등록 된 것을 의미합니다. 전체 앱에는 &lt;code&gt;UserService&lt;/code&gt; 인스턴스가 하나만 있으며 &lt;em&gt;하위 인젝터로&lt;/em&gt; 다른 공급자를 구성 &lt;em&gt;하지 않으면 &lt;/em&gt; &lt;code&gt;UserService&lt;/code&gt; 를 주입하는 모든 클래스 가이 서비스 인스턴스를 가져 옵니다 .&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="aa0f46f07be6d7bd145a95e639f76d57f093602d" translate="yes" xml:space="preserve">
          <source>There isn't anything the client application can do about these errors. The server must be configured to accept the application's requests. Read about how to enable CORS for specific servers at &lt;a href=&quot;http://enable-cors.org/server.html&quot;&gt;enable-cors.org&lt;/a&gt;.</source>
          <target state="translated">클라이언트 응용 프로그램이 이러한 오류에 대해 수행 할 수있는 작업이 없습니다. 서버는 응용 프로그램의 요청을 승인하도록 구성되어야합니다. &lt;a href=&quot;http://enable-cors.org/server.html&quot;&gt;enable-cors.org&lt;/a&gt; 에서 특정 서버에 CORS를 사용하는 방법에 대해 읽으십시오 .</target>
        </trans-unit>
        <trans-unit id="bd29a80577a16149f809aa709e10802120f26a64" translate="yes" xml:space="preserve">
          <source>There will be one additional argument to the &lt;code&gt;transform&lt;/code&gt; method for each parameter passed to the pipe. Your pipe has one such parameter: the &lt;code&gt;exponent&lt;/code&gt;.</source>
          <target state="translated">파이프에 전달 된 각 매개 변수에 대해 &lt;code&gt;transform&lt;/code&gt; 메소드에 대한 추가 인수가 있습니다 . 파이프에는 &lt;code&gt;exponent&lt;/code&gt; 라는 매개 변수가 있습니다.</target>
        </trans-unit>
        <trans-unit id="7cc5eb405460e77c124b415c5ccacffdb138ea7a" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s nothing special about this component, nothing form-specific, nothing to distinguish it from any component you've written before.</source>
          <target state="translated">이 구성 요소에는 특별한 것이 없으며 양식별로 다르며 이전에 작성한 구성 요소와 구별 할 것도 없습니다.</target>
        </trans-unit>
        <trans-unit id="542467bb8ed2c1b3891b718134b4968a6fc9a566" translate="yes" xml:space="preserve">
          <source>There's a good reason for this circuitous path to the element.</source>
          <target state="translated">요소에 대한 이러한 회로적인 경로에는 충분한 이유가 있습니다.</target>
        </trans-unit>
        <trans-unit id="508e59adf4df546f2bbce6e533bf9e238970539b" translate="yes" xml:space="preserve">
          <source>There's a similar helper for producing an async error.</source>
          <target state="translated">비동기 오류를 생성하는 비슷한 도우미가 있습니다.</target>
        </trans-unit>
        <trans-unit id="84cc470613727d84aabbfa2c1862c5ad36fcaf45" translate="yes" xml:space="preserve">
          <source>There's also the &lt;code&gt;bind-&lt;/code&gt; prefix alternative:</source>
          <target state="translated">도있다 &lt;code&gt;bind-&lt;/code&gt; 접두사 대안 :</target>
        </trans-unit>
        <trans-unit id="0909bf3d1ff44badd0511d8a77fa43424485ad25" translate="yes" xml:space="preserve">
          <source>There's an easier way: bind to Angular's &lt;code&gt;keyup.enter&lt;/code&gt; pseudo-event. Then Angular calls the event handler only when the user presses &lt;em&gt;Enter&lt;/em&gt;.</source>
          <target state="translated">더 쉬운 방법이 있습니다 : Angular의 &lt;code&gt;keyup.enter&lt;/code&gt; pseudo-event에 바인딩하십시오 . 그런 다음 Angular는 사용자가 &lt;em&gt;Enter 키를&lt;/em&gt; 누를 때만 이벤트 핸들러를 호출합니다 .</target>
        </trans-unit>
        <trans-unit id="ab30027be9f11ddbb2b70f4586d177e63c2b9249" translate="yes" xml:space="preserve">
          <source>There's another school of testing that never calls &lt;code&gt;beforeEach()&lt;/code&gt; and prefers to create classes explicitly rather than use the &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;beforeEach()&lt;/code&gt; 호출하지 않고 &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; 를 사용하는 대신 명시 적으로 클래스를 작성하는 것을 선호하는 또 다른 테스트 학교 가 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ea61c19309ff72246ea3a2984fbfffe7d47f7033" translate="yes" xml:space="preserve">
          <source>There's another way to get the user data: use Angular &lt;a href=&quot;template-syntax#ref-vars&quot;&gt;&lt;strong&gt;template reference variables&lt;/strong&gt;&lt;/a&gt;. These variables provide direct access to an element from within the template. To declare a template reference variable, precede an identifier with a hash (or pound) character (#).</source>
          <target state="translated">사용자 데이터를 얻는 또 다른 방법이 있습니다 : Angular &lt;a href=&quot;template-syntax#ref-vars&quot;&gt;&lt;strong&gt;template reference variables를&lt;/strong&gt;&lt;/a&gt; 사용 &lt;strong&gt;하십시오&lt;/strong&gt; . 이러한 변수는 템플릿 내에서 요소에 직접 액세스 할 수 있도록합니다. 템플릿 참조 변수를 선언하려면 식별자 앞에 해시 (또는 파운드) 문자 (#)를 붙입니다.</target>
        </trans-unit>
        <trans-unit id="649efc388a11470109bc9e7158e40958a6267aea" translate="yes" xml:space="preserve">
          <source>There's no harm in calling &lt;code&gt;compileComponents()&lt;/code&gt; when it's not required.</source>
          <target state="translated">필요하지 않은 &lt;code&gt;compileComponents()&lt;/code&gt; 를 호출해도 아무런 해 가 없습니다.</target>
        </trans-unit>
        <trans-unit id="d18f6add8e2e8495aacfbde5fe0813a6561d85a2" translate="yes" xml:space="preserve">
          <source>There's no need to declare or import anything else. The default test module is pre-configured with something like the &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; from &lt;code&gt;@angular/platform-browser&lt;/code&gt;.</source>
          <target state="translated">다른 것을 선언하거나 가져올 필요가 없습니다. 기본 테스트 모듈은 같은 사전 구성되어 &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; 에서 &lt;code&gt;@angular/platform-browser&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9485387892c4a4b5f9d2bd3163e6e9e7f2a2b699" translate="yes" xml:space="preserve">
          <source>There's no need to list a component in both the &lt;code&gt;bootstrap&lt;/code&gt; and &lt;code&gt;entryComponents&lt;/code&gt; lists, although doing so is harmless.</source>
          <target state="translated">&lt;code&gt;bootstrap&lt;/code&gt; 과 &lt;code&gt;entryComponents&lt;/code&gt; 목록 모두에 구성 요소를 나열 할 필요 는 없지만 해롭지는 않습니다.</target>
        </trans-unit>
        <trans-unit id="c90aada73387116e19e933942a34d908ca737c3b" translate="yes" xml:space="preserve">
          <source>There's often a &lt;em&gt;root&lt;/em&gt; element that can and should host the structural directive. The list element (&lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;) is a typical host element of an &lt;code&gt;NgFor&lt;/code&gt; repeater.</source>
          <target state="translated">구조적 지시어를 호스팅 할 수 있고 호스팅해야하는 &lt;em&gt;루트&lt;/em&gt; 요소가 종종 있습니다. list 요소 ( &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; )는 &lt;code&gt;NgFor&lt;/code&gt; repeater 의 일반적인 호스트 요소입니다 .</target>
        </trans-unit>
        <trans-unit id="ca6a4c5f2988457896869f467e895a0eeb19531f" translate="yes" xml:space="preserve">
          <source>There's one notable exception to the rule of using Angular attribute syntax for downgraded components. It has to do with input or output names that consist of multiple words. In Angular, you would bind these attributes using camelCase:</source>
          <target state="translated">다운 그레이드 된 구성 요소에 각도 속성 구문을 사용하는 규칙에는 주목할만한 예외가 있습니다. 여러 단어로 구성된 입력 또는 출력 이름과 관련이 있습니다. Angular에서는 camelCase를 사용하여 이러한 속성을 바인딩합니다.</target>
        </trans-unit>
        <trans-unit id="6cf332e6a1ddffd2a30959312ecbc288187e50d8" translate="yes" xml:space="preserve">
          <source>There's really nothing for the component to do with the &lt;code&gt;Observable&lt;/code&gt; returned by &lt;code&gt;heroService.delete()&lt;/code&gt;&lt;strong&gt;but it must subscribe anyway&lt;/strong&gt;.</source>
          <target state="translated">&lt;code&gt;heroService.delete()&lt;/code&gt; 의해 리턴 된 &lt;code&gt;Observable&lt;/code&gt; 과 컴포넌트는 아무런 관련이 &lt;strong&gt;없지만 어쨌든 구독해야합니다&lt;/strong&gt; .&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2e367708179b8c6b769aeb5784a73ff30d8bb02d" translate="yes" xml:space="preserve">
          <source>There's the hero again, displayed read-only with interpolation bindings. This &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; appears only while the component is in the submitted state.</source>
          <target state="translated">보간 바인딩과 함께 읽기 전용으로 표시되는 영웅이 다시 있습니다. 이 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 는 구성 요소가 제출 된 상태 인 동안에 만 나타납니다.</target>
        </trans-unit>
        <trans-unit id="a7f47f5fef07e1400c8770e346e27dd983d3210c" translate="yes" xml:space="preserve">
          <source>These Angular docs help you learn and use the Angular platform and framework, from your first app to optimizing complex enterprise apps. Tutorials and guides include downloadable example to accelerate your projects.</source>
          <target state="translated">이 Angular 문서는 첫 번째 앱에서 복잡한 엔터프라이즈 앱 최적화에 이르기까지 Angular 플랫폼 및 프레임 워크를 배우고 사용하는 데 도움이됩니다. 학습서 및 안내서에는 프로젝트 가속화를위한 다운로드 가능한 예제가 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="9c8f4170de94e38e103661daa9cd09d22d382f76" translate="yes" xml:space="preserve">
          <source>These are all features you'll want to test.</source>
          <target state="translated">이것들은 모두 테스트하고 싶은 기능입니다.</target>
        </trans-unit>
        <trans-unit id="19fa4dd3c3af8618e37296f1894ca8c3663deadc" translate="yes" xml:space="preserve">
          <source>These are short, simple functions that you can write yourself. Unfortunately, they're too simple for many common scenarios. An observable often emits multiple times, perhaps after a significant delay. A component may coordinate multiple observables with overlapping sequences of values and errors.</source>
          <target state="translated">이것들은 스스로 쓸 수있는 짧고 간단한 기능입니다. 불행히도 많은 일반적인 시나리오에서는 너무 간단합니다. 관찰 가능 항목은 종종 상당한 지연 후에 여러 번 방출됩니다. 구성 요소는 중복되는 값과 오류 시퀀스로 여러 관측 값을 조정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="15a8bdbc2d27676173c0870bb9d476a44f9c0ec8" translate="yes" xml:space="preserve">
          <source>These are techniques for &lt;em&gt;Shallow Component Testing&lt;/em&gt; , so-named because they reduce the visual surface of the component to just those elements in the component's template that matter for tests.</source>
          <target state="translated">&lt;em&gt;Shallow Component Testing&lt;/em&gt; 기술은 &lt;em&gt;구성 요소&lt;/em&gt; 의 시각적 표면을 구성 요소 템플릿에서 테스트에 중요한 요소로 축소하기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="874d82075cf5a1fb8e894c6a1831e2a99c4f9cf5" translate="yes" xml:space="preserve">
          <source>These are tests of the pipe &lt;em&gt;in isolation&lt;/em&gt;. They can't tell if the &lt;code&gt;&lt;a href=&quot;../api/common/titlecasepipe&quot;&gt;TitleCasePipe&lt;/a&gt;&lt;/code&gt; is working properly as applied in the application components.</source>
          <target state="translated">이것은 파이프 &lt;em&gt;의 절연&lt;/em&gt; 테스트입니다 . &lt;code&gt;&lt;a href=&quot;../api/common/titlecasepipe&quot;&gt;TitleCasePipe&lt;/a&gt;&lt;/code&gt; 가 응용 프로그램 구성 요소에 적용된대로 제대로 작동하는지 알 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="7aa6e184a2127bbab023de5210efd3d94de5eaf2" translate="yes" xml:space="preserve">
          <source>These are the polyfills required to run an Angular application on each supported browser:</source>
          <target state="translated">다음은 지원되는 각 브라우저에서 Angular 응용 프로그램을 실행하는 데 필요한 폴리 필입니다.</target>
        </trans-unit>
        <trans-unit id="d6422d60e6eed75caf6b039379d70a9d2b91599f" translate="yes" xml:space="preserve">
          <source>These buttons work, because the CLI automatically added the routes to the feature modules to the &lt;code&gt;routes&lt;/code&gt; array in &lt;code&gt;app.module.ts&lt;/code&gt;.</source>
          <target state="translated">CLI 는 &lt;code&gt;app.module.ts&lt;/code&gt; 의 &lt;code&gt;routes&lt;/code&gt; 배열에 기능 모듈의 경로를 자동으로 추가했기 때문에 작동 합니다.</target>
        </trans-unit>
        <trans-unit id="4fadb046a4f69a8a29a6dfda895733f7808fc510" translate="yes" xml:space="preserve">
          <source>These complications argue for &lt;em&gt;avoiding component inheritance&lt;/em&gt;.</source>
          <target state="translated">이러한 합병증은 &lt;em&gt;구성 요소 상속&lt;/em&gt; 을 &lt;em&gt;피&lt;/em&gt; 한다고 주장합니다 .</target>
        </trans-unit>
        <trans-unit id="3cd97d4aaaa391802aacd2112d378fb5a981f75d" translate="yes" xml:space="preserve">
          <source>These declared classes are visible within the module but invisible to components in a different module unless they are exported from this module and the other module imports this one.</source>
          <target state="translated">이 선언 된 클래스는 모듈 내에서 볼 수 있지만이 모듈에서 내보내고 다른 모듈에서이 클래스를 가져 오지 않는 한 다른 모듈의 구성 요소에는 보이지 않습니다.</target>
        </trans-unit>
        <trans-unit id="e0813bed7ed16b4e0b736f3f56fccf8998f10650" translate="yes" xml:space="preserve">
          <source>These decorators can be used individually or together, as shown in the example. This &lt;code&gt;HeroBiosAndContactsComponent&lt;/code&gt; is a revision of &lt;code&gt;HeroBiosComponent&lt;/code&gt; which you looked at &lt;a href=&quot;dependency-injection-in-action#hero-bios-component&quot;&gt;above&lt;/a&gt;.</source>
          <target state="translated">이 데코레이터는 예제와 같이 개별적으로 또는 함께 사용할 수 있습니다. 이 &lt;code&gt;HeroBiosAndContactsComponent&lt;/code&gt; 은 개정이다 &lt;code&gt;HeroBiosComponent&lt;/code&gt; 당신이 바라 보았다 &lt;a href=&quot;dependency-injection-in-action#hero-bios-component&quot;&gt;위&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="e87f8d2277a30ddb602eb3ef7903e879dae9750f" translate="yes" xml:space="preserve">
          <source>These differences argue for a re-usable stub class.</source>
          <target state="translated">이러한 차이는 재사용 가능한 스터브 클래스를 주장합니다.</target>
        </trans-unit>
        <trans-unit id="332167a123f1d6b741515c29ca0f4c696c2a51c9" translate="yes" xml:space="preserve">
          <source>These docs assume that you are already familiar with HTML, CSS, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript&quot;&gt;JavaScript&lt;/a&gt;, and some of the tools from the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Language_Resources&quot;&gt;latest standards&lt;/a&gt;, such as &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes&quot;&gt;classes&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import&quot;&gt;modules&lt;/a&gt;. The code samples are written using &lt;a href=&quot;https://www.typescriptlang.org/&quot;&gt;TypeScript&lt;/a&gt;. Most Angular code can be written with just the latest JavaScript, using &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/classes.html&quot;&gt;types&lt;/a&gt; for dependency injection, and using &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/decorators.html&quot;&gt;decorators&lt;/a&gt; for metadata.</source>
          <target state="translated">이 문서에서는 HTML, CSS, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript&quot;&gt;JavaScript&lt;/a&gt; 및 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes&quot;&gt;클래스&lt;/a&gt; 및 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import&quot;&gt;모듈&lt;/a&gt; 과 같은 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Language_Resources&quot;&gt;최신 표준&lt;/a&gt; 의 일부 도구에 이미 익숙하다고 가정 합니다 . 코드 샘플은 &lt;a href=&quot;https://www.typescriptlang.org/&quot;&gt;TypeScript를&lt;/a&gt; 사용하여 작성됩니다 . 대부분의 Angular 코드는 의존성 주입 &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/classes.html&quot;&gt;유형&lt;/a&gt; 과 메타 데이터에 &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/decorators.html&quot;&gt;데코레이터&lt;/a&gt; 를 사용 하여 최신 JavaScript만으로 작성할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c0248cf761a672df747afacece78839e13096947" translate="yes" xml:space="preserve">
          <source>These events are logged to the console when the &lt;code&gt;&lt;a href=&quot;../api/router/extraoptions#enableTracing&quot;&gt;enableTracing&lt;/a&gt;&lt;/code&gt; option is enabled also. For an example of filtering router navigation events, visit the &lt;a href=&quot;observables-in-angular#router&quot;&gt;router section&lt;/a&gt; of the &lt;a href=&quot;observables-in-angular&quot;&gt;Observables in Angular&lt;/a&gt; guide.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/extraoptions#enableTracing&quot;&gt;enableTracing&lt;/a&gt;&lt;/code&gt; 옵션도 활성화 하면 이러한 이벤트가 콘솔에 기록됩니다 . 라우터 탐색 이벤트를 필터링하는 예 는 &lt;a href=&quot;observables-in-angular&quot;&gt;Observables in Angular&lt;/a&gt; 안내서 의 &lt;a href=&quot;observables-in-angular#router&quot;&gt;라우터 섹션&lt;/a&gt; 을 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="2680c5c9b2a75fe66adbcbcf8321b6c19da88cdf" translate="yes" xml:space="preserve">
          <source>These examples transform a date into various formats, assuming that &lt;code&gt;dateObj&lt;/code&gt; is a JavaScript &lt;code&gt;Date&lt;/code&gt; object for year: 2015, month: 6, day: 15, hour: 21, minute: 43, second: 11, given in the local time for the &lt;code&gt;en-US&lt;/code&gt; locale.</source>
          <target state="translated">이러한 예는 가정, 다양한 형식으로 날짜를 변환 &lt;code&gt;dateObj&lt;/code&gt; 는 자바 스크립트입니다 &lt;code&gt;Date&lt;/code&gt; 2015 년 월 : 6 일 : 15시 : 21 분 : 43 초 : 11에 대한 현지 시간으로 특정 연도에 대한 객체 &lt;code&gt;en-US&lt;/code&gt; 로케일.</target>
        </trans-unit>
        <trans-unit id="2c3bf4e06192c72785cca976fd12148948a7cb90" translate="yes" xml:space="preserve">
          <source>These examples use a shorthand form of the prompt syntax, supplying only the text of the question. In most cases, this is all that is required. Notice however, that the two prompts expect different types of input. When using the shorthand form, the most appropriate type is automatically selected based on the property's schema. In the example, the &lt;code&gt;name&lt;/code&gt; prompt uses the &lt;code&gt;input&lt;/code&gt; type because it it is a string property. The &lt;code&gt;useColor&lt;/code&gt; prompt uses a &lt;code&gt;confirmation&lt;/code&gt; type because it is a Boolean property. In this case, &quot;yes&quot; corresponds to &lt;code&gt;true&lt;/code&gt; and &quot;no&quot; corresponds to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">이 예제는 간단한 형식의 프롬프트 구문을 사용하여 질문의 텍스트 만 제공합니다. 대부분의 경우 이것이 필요한 전부입니다. 그러나 두 프롬프트는 다른 유형의 입력을 예상합니다. 속기 양식을 사용하는 경우 특성의 스키마에 따라 가장 적합한 유형이 자동으로 선택됩니다. 이 예에서 &lt;code&gt;name&lt;/code&gt; 프롬프트는 &lt;code&gt;input&lt;/code&gt; 유형이 문자열 특성이므로 입력 유형을 사용합니다 . &lt;code&gt;useColor&lt;/code&gt; 는 프롬프트 사용하는 &lt;code&gt;confirmation&lt;/code&gt; 유형은 부울 특성이기 때문이다. 이 경우 &quot;yes&quot;는 &lt;code&gt;true&lt;/code&gt; 에 해당 하고 &quot;no&quot;는 &lt;code&gt;false&lt;/code&gt; 에 해당합니다 .</target>
        </trans-unit>
        <trans-unit id="d24eb680a33027e2617530dc12e6676b87a2c5ca" translate="yes" xml:space="preserve">
          <source>These files need to be copied together with the polyfills. The files the application needs at runtime, like the &lt;code&gt;.json&lt;/code&gt; phone lists and images, also need to be copied.</source>
          <target state="translated">이러한 파일은 폴리 필과 함께 복사해야합니다. &lt;code&gt;.json&lt;/code&gt; 전화 번호부 및 이미지와 같이 런타임에 응용 프로그램에 필요한 파일 도 복사해야합니다.</target>
        </trans-unit>
        <trans-unit id="02b3a7df8a6c77dd99266ab2b91a34b6a3d23a77" translate="yes" xml:space="preserve">
          <source>These four bindings demonstrate the difference between &lt;code&gt;providers&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt;. Since the 🐶 (puppy) is declared inside the &amp;lt;#VIEW&amp;gt;, it isn't visible to the projected content. Instead, the projected content sees the 🐳 (whale).</source>
          <target state="translated">이 네 가지 바인딩은 &lt;code&gt;providers&lt;/code&gt; 와 &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; 의 차이점을 보여줍니다 . 🐶 (강아지)는 &amp;lt;#VIEW&amp;gt; 내부에 선언되어 있기 때문에 투사 된 콘텐츠에는 보이지 않습니다. 대신, 투사 된 콘텐츠는 🐳 (고래)를 봅니다.</target>
        </trans-unit>
        <trans-unit id="8eb673fe0a5db30500d447cd8ed9df2e9892d31d" translate="yes" xml:space="preserve">
          <source>These inputs and outputs can be supplied from the AngularJS template, and the &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgradecomponent&quot;&gt;downgradeComponent&lt;/a&gt;()&lt;/code&gt; method takes care of wiring them up:</source>
          <target state="translated">이러한 입력 및 출력은 AngularJS 템플릿에서 제공 할 수 있으며 &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgradecomponent&quot;&gt;downgradeComponent&lt;/a&gt;()&lt;/code&gt; 메소드는이를 연결합니다.</target>
        </trans-unit>
        <trans-unit id="aca1e5487bdae512316a9552870710cde2c7edc4" translate="yes" xml:space="preserve">
          <source>These kinds of parameters don't fit easily in a URL &lt;em&gt;path&lt;/em&gt;. Even if you could define a suitable URL token scheme, doing so greatly complicates the pattern matching required to translate an incoming URL to a named route.</source>
          <target state="translated">이러한 종류의 매개 변수는 URL &lt;em&gt;경로&lt;/em&gt; 에 쉽게 맞지 않습니다 . 적절한 URL 토큰 체계를 정의 할 수 있더라도 들어오는 URL을 명명 된 경로로 변환하는 데 필요한 패턴 일치가 크게 복잡해집니다.</target>
        </trans-unit>
        <trans-unit id="29425b5274cb55ea0877f8425586bc76b4a9c960" translate="yes" xml:space="preserve">
          <source>These may not be troubling questions for the simple components illustrated above. But many components have complex interactions with the DOM elements described in their templates, causing HTML to appear and disappear as the component state changes.</source>
          <target state="translated">위에서 설명한 간단한 구성 요소에 대해서는 문제가되지 않을 수 있습니다. 그러나 많은 구성 요소는 템플릿에 설명 된 DOM 요소와 복잡한 상호 작용을하여 구성 요소 상태가 변경되면 HTML이 나타나거나 사라집니다.</target>
        </trans-unit>
        <trans-unit id="9280883bdf2743a9d36490d0dc135e8e9a512cc2" translate="yes" xml:space="preserve">
          <source>These methods access the injected timer component directly.</source>
          <target state="translated">이 메소드는 주입 된 타이머 구성 요소에 직접 액세스합니다.</target>
        </trans-unit>
        <trans-unit id="c22429bdeba56aae46b0da88ebbd1eba5c9f7eb4" translate="yes" xml:space="preserve">
          <source>These microsyntax mechanisms are also available to you when you write your own structural directives. For example, microsyntax in Angular allows you to write &lt;code&gt;&amp;lt;div *&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;=&quot;let &lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt; of items&quot;&amp;gt;{{&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;}}&amp;lt;/div&amp;gt;&lt;/code&gt; instead of &lt;code&gt;&amp;lt;ng-template &lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt; [&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngForOf&lt;/a&gt;]=&quot;items&quot;&amp;gt;&amp;lt;div&amp;gt;{{&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;}}&amp;lt;/div&amp;gt;&amp;lt;/ng-template&amp;gt;&lt;/code&gt;. The following sections provide detailed information on constraints, grammar, and translation of microsyntax.</source>
          <target state="translated">이러한 마이크로 구문 메커니즘은 자체 구조적 지시문을 작성할 때도 사용할 수 있습니다. 예를 들어 Angular의 마이크로 구문을 사용하면 &lt;code&gt;&amp;lt;ng-template &lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt; [&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngForOf&lt;/a&gt;]=&quot;items&quot;&amp;gt;&amp;lt;div&amp;gt;{{&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;}}&amp;lt;/div&amp;gt;&amp;lt;/ng-template&amp;gt;&lt;/code&gt; &lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt; [ &lt;a href=&quot;../api/common/ngforof&quot;&gt;ngForOf&lt;/a&gt; ] = &quot;items&quot;&amp;gt; &amp;lt;div&amp;gt; { 대신 &lt;code&gt;&amp;lt;div *&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;=&quot;let &lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt; of items&quot;&amp;gt;{{&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;}}&amp;lt;/div&amp;gt;&lt;/code&gt; 을 쓸 수 있습니다 . { &lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt; }} &amp;lt;/ div&amp;gt; &amp;lt;/ ng-template&amp;gt; 입니다. 다음 섹션에서는 제약 조건, 문법 및 마이크로 구문 번역에 대한 자세한 정보를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="f75727d0e53686975b5f9fe934821fc5ef2a010f" translate="yes" xml:space="preserve">
          <source>These providers are insulated from changes to application providers with the same lookup token. When the router creates a component within the lazy-loaded context, Angular prefers service instances created from these providers to the service instances of the application root injector.</source>
          <target state="translated">이러한 공급자는 동일한 조회 토큰을 가진 응용 프로그램 공급자의 변경으로부터 격리됩니다. 라우터가 느리게로드 된 컨텍스트 내에서 컴포넌트를 작성할 때 Angular는 이러한 제공자에서 작성된 서비스 인스턴스를 애플리케이션 루트 인젝터의 서비스 인스턴스보다 선호합니다.</target>
        </trans-unit>
        <trans-unit id="24dcfb3b1d815ddbfc80be55b49ecf74b9b01fec" translate="yes" xml:space="preserve">
          <source>These services become available for injection into any component, directive, pipe or service which is a child of this injector.</source>
          <target state="translated">이러한 서비스는이 인젝터의 자식 인 모든 구성 요소, 지침, 파이프 또는 서비스에 주입 할 수있게됩니다.</target>
        </trans-unit>
        <trans-unit id="f9b0721484302592e733b6e272928008f313a2ba" translate="yes" xml:space="preserve">
          <source>These situations should be very rare, and extraordinary care must be taken to avoid creating a Cross Site Scripting (XSS) security bug!</source>
          <target state="translated">이러한 상황은 매우 드 물어야하며 XSS (Cross Site Scripting) 보안 버그가 발생하지 않도록 특별한주의를 기울여야합니다!</target>
        </trans-unit>
        <trans-unit id="a17e78995649c771b926fa480048cee49ac14e32" translate="yes" xml:space="preserve">
          <source>These standard testing techniques are great for unit testing services in isolation.</source>
          <target state="translated">이러한 표준 테스트 기술은 단위 테스트 서비스를 격리하는 데 유용합니다.</target>
        </trans-unit>
        <trans-unit id="471f11bedf623af5e51a7550b62738fa78f523b0" translate="yes" xml:space="preserve">
          <source>These status values are mutually exclusive, so a control cannot be both valid AND invalid or invalid AND disabled.</source>
          <target state="translated">이 상태 값은 상호 배타적이므로 제어가 유효하거나 유효하지 않거나 유효하지 않으며 무효가 될 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="05f39205bd9c10860f4038f8cb6f1f80b35432f1" translate="yes" xml:space="preserve">
          <source>These styles are post-processed so that each selector is augmented with &lt;code&gt;_nghost&lt;/code&gt; or &lt;code&gt;_ngcontent&lt;/code&gt; attribute selectors. These extra selectors enable the scoping rules described in this page.</source>
          <target state="translated">이러한 스타일은 사후 처리되므로 각 선택기가 &lt;code&gt;_nghost&lt;/code&gt; 또는 &lt;code&gt;_ngcontent&lt;/code&gt; 속성 선택기로 기능을 보강 합니다. 이러한 추가 선택기는이 페이지에 설명 된 범위 지정 규칙을 활성화합니다.</target>
        </trans-unit>
        <trans-unit id="59ed30c14d44ecaa6cf045e5333024f1a3034ced" translate="yes" xml:space="preserve">
          <source>These techniques are useful for small-scale demonstrations, but they quickly become verbose and clumsy when handling large amounts of user input. Two-way data binding is a more elegant and compact way to move values between data entry fields and model properties. The next page, &lt;code&gt;Forms&lt;/code&gt;, explains how to write two-way bindings with &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">이러한 기술은 소규모 데모에 유용하지만 많은 양의 사용자 입력을 처리 할 때 빠르게 장황하고 어색해집니다. 양방향 데이터 바인딩은 데이터 입력 필드와 모델 속성간에 값을 이동하는보다 우아하고 간결한 방법입니다. 다음 페이지 인 &lt;code&gt;Forms&lt;/code&gt; 에서는 &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; 을 사용 하여 양방향 바인딩을 작성하는 방법에 대해 설명합니다 .</target>
        </trans-unit>
        <trans-unit id="53c3322dcb945c3c38eca1315cb0acd70af9667e" translate="yes" xml:space="preserve">
          <source>These tests could fail or timeout if the &lt;code&gt;HeroDetailService&lt;/code&gt; made its own XHR calls to a remote server. There might not be a remote server to call.</source>
          <target state="translated">&lt;code&gt;HeroDetailService&lt;/code&gt; 가 원격 서버에 대한 자체 XHR 호출을 수행 한 경우 이러한 테스트가 실패하거나 시간 초과 될 수 있습니다. 호출 할 원격 서버가 없을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ce3f767e6032b95a5a603034551bf8233c93f3f2" translate="yes" xml:space="preserve">
          <source>These three examples cover the need for an app with one level routing. The moment you add a child router, such as the crisis center, you create new link array possibilities.</source>
          <target state="translated">이 세 가지 예는 하나의 레벨 라우팅으로 앱의 필요성을 다룹니다. 위기 센터와 같은 하위 라우터를 추가하는 순간 새로운 링크 배열 가능성이 만들어집니다.</target>
        </trans-unit>
        <trans-unit id="a858b580e5d1dabed41a7075d6de4bc56502ab07" translate="yes" xml:space="preserve">
          <source>These two properties have subtle differences, so switching to &lt;code&gt;textContent&lt;/code&gt; under the hood can be surprising to users. For this reason, we are deprecating this behavior. Going forward, users should explicitly bind to &lt;code&gt;textContent&lt;/code&gt; when using Domino.</source>
          <target state="translated">이 두 속성에는 미묘한 차이가 있으므로 사용자가 후드 에서 &lt;code&gt;textContent&lt;/code&gt; 로 전환하는 것은 놀라운 일입니다. 이러한 이유로이 동작은 더 이상 사용되지 않습니다. 앞으로 사용자는 Domino를 사용할 때 명시 적으로 &lt;code&gt;textContent&lt;/code&gt; 에 바인딩해야합니다 .</target>
        </trans-unit>
        <trans-unit id="db3d1e9b8dc7f1d6ba6781b5d1aeadad60243cbb" translate="yes" xml:space="preserve">
          <source>These two routes navigate to the crisis center child components, &lt;code&gt;CrisisCenterHomeComponent&lt;/code&gt; and &lt;code&gt;CrisisDetailComponent&lt;/code&gt;, respectively.</source>
          <target state="translated">이 두 경로는 위기 센터 하위 구성 요소 인 &lt;code&gt;CrisisCenterHomeComponent&lt;/code&gt; 및 &lt;code&gt;CrisisDetailComponent&lt;/code&gt; 로 각각 이동합니다.</target>
        </trans-unit>
        <trans-unit id="ce122e04c4a0e2a0a5f7ad63d194e4fea023293d" translate="yes" xml:space="preserve">
          <source>They are &lt;em&gt;not inherited&lt;/em&gt; by any components nested within the template nor by any content projected into the component.</source>
          <target state="translated">그들은되는 &lt;em&gt;상속되지&lt;/em&gt; 템플릿 내도 구성 요소에 투영 된 어떤 내용으로 중첩 된 구성 요소에 의해.</target>
        </trans-unit>
        <trans-unit id="16ada202f0f526edb509f857ec3037ca6a0f4115" translate="yes" xml:space="preserve">
          <source>They are displayed in named outlets.</source>
          <target state="translated">이름이 지정된 콘센트에 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="1b990f73ae62c0da4608dce9f08db78466a71820" translate="yes" xml:space="preserve">
          <source>They are immutable for a good reason: the app may retry a request several times before it succeeds, which means that the interceptor chain may re-process the same request multiple times. If an interceptor could modify the original request object, the re-tried operation would start from the modified request rather than the original. Immutability ensures that interceptors see the same request for each try.</source>
          <target state="translated">앱은 요청이 성공하기 전에 여러 번 요청을 다시 시도 할 수 있으므로 인터셉터 체인에서 동일한 요청을 여러 번 다시 처리 할 수 ​​있습니다. 인터셉터가 원래 요청 오브젝트를 수정할 수있는 경우 재 시도 된 조작은 원래 요청이 아닌 수정 된 요청에서 시작됩니다. 불변성은 인터셉터가 각 시도에 대해 동일한 요청을 보도록합니다.</target>
        </trans-unit>
        <trans-unit id="0a5e8503c85509faa05b6e855e4edcff069456e9" translate="yes" xml:space="preserve">
          <source>They are independent of each other.</source>
          <target state="translated">그들은 서로 독립적입니다.</target>
        </trans-unit>
        <trans-unit id="6afb78efe8cab856821000146ea4a61b8a334fa8" translate="yes" xml:space="preserve">
          <source>They are very similar with the only difference being:</source>
          <target state="translated">유일한 차이점은 매우 유사합니다.</target>
        </trans-unit>
        <trans-unit id="cfd5fb1fb1b07124fb1aace027accf1df4c99e03" translate="yes" xml:space="preserve">
          <source>They follow a common pattern: a &lt;em&gt;parent&lt;/em&gt; component serves as a test rig for a &lt;em&gt;child&lt;/em&gt; component that illustrates one or more of the lifecycle hook methods.</source>
          <target state="translated">이들은 공통 패턴을 따릅니다. &lt;em&gt;상위&lt;/em&gt; 컴포넌트는 하나 이상의 라이프 사이클 후크 메소드를 보여주는 &lt;em&gt;하위&lt;/em&gt; 컴포넌트 의 테스트 리그 역할을 합니다.</target>
        </trans-unit>
        <trans-unit id="73b47ba16ec3ed20f7c0f09044645d6af1239f79" translate="yes" xml:space="preserve">
          <source>They might be imported by the root &lt;code&gt;AppModule&lt;/code&gt; of a small application that lacks routing.</source>
          <target state="translated">라우팅이없는 작은 응용 프로그램 의 루트 &lt;code&gt;AppModule&lt;/code&gt; 에서 가져올 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="0bd9de91dc582fbf7daa5013098dfee5a9baa9df" translate="yes" xml:space="preserve">
          <source>They might. By default, the router re-uses a component instance when it re-navigates to the same component type without visiting a different component first. The route parameters could change each time.</source>
          <target state="translated">그들은 그렇습니다. 기본적으로 라우터는 다른 구성 요소를 먼저 방문하지 않고 동일한 구성 요소 유형으로 다시 탐색 할 때 구성 요소 인스턴스를 재사용합니다. 경로 매개 변수는 매번 변경 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bcebc66109bd0b943ba34a0b34f724475faa7a20" translate="yes" xml:space="preserve">
          <source>They must return a Promise or an Observable,</source>
          <target state="translated">약속 또는 관찰 가능한 물건을 반환해야합니다.</target>
        </trans-unit>
        <trans-unit id="6a1d3b6796b2728eca30d7dc142c330459e6d1b9" translate="yes" xml:space="preserve">
          <source>They typically have a top component that acts as the feature root and private, supporting sub-components descend from it.</source>
          <target state="translated">일반적으로 루트 및 개인 기능의 역할을하는 최상위 구성 요소가 있으며 하위 구성 요소를 지원합니다.</target>
        </trans-unit>
        <trans-unit id="f8026517cd2a6484e993db7a3cd1d56c8845b6ed" translate="yes" xml:space="preserve">
          <source>They work in combination with other routes.</source>
          <target state="translated">그들은 다른 경로와 함께 작동합니다.</target>
        </trans-unit>
        <trans-unit id="3d3f6d4959980160a0fdb422743d1ab226d66d6a" translate="yes" xml:space="preserve">
          <source>They'll do that with the RxJS &lt;code&gt;tap()&lt;/code&gt; operator, which looks at the observable values, does something with those values, and passes them along. The &lt;code&gt;tap()&lt;/code&gt; call back doesn't touch the values themselves.</source>
          <target state="translated">관찰 가능한 값을보고 해당 값으로 무언가를 수행하는 RxJS &lt;code&gt;tap()&lt;/code&gt; 연산자를 사용하여이를 수행합니다. &lt;code&gt;tap()&lt;/code&gt; 호출 다시는 값 자체를 만지지 않습니다.</target>
        </trans-unit>
        <trans-unit id="6764cd39877eeca69ad10d4286668ee2c1b61792" translate="yes" xml:space="preserve">
          <source>Things go wrong, especially when you're getting data from a remote server. The &lt;code&gt;HeroService.getHeroes()&lt;/code&gt; method should catch errors and do something appropriate.</source>
          <target state="translated">특히 원격 서버에서 데이터를 가져올 때 문제가 발생합니다. &lt;code&gt;HeroService.getHeroes()&lt;/code&gt; 메서드는 오류를 잡아 뭔가 적절한을해야한다.</target>
        </trans-unit>
        <trans-unit id="bba021091f297904597c2bb05d6e5e449bd86e0a" translate="yes" xml:space="preserve">
          <source>Things to keep in mind, when downgrading multiple modules:</source>
          <target state="translated">여러 모듈을 다운 그레이드 할 때 명심해야 할 사항 :</target>
        </trans-unit>
        <trans-unit id="c7b69adf603ad8f6d0e880b3effde6a1bd75ec06" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;&lt;a href=&quot;ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; example:</source>
          <target state="translated">이 &lt;code&gt;&lt;a href=&quot;ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 의 예 :</target>
        </trans-unit>
        <trans-unit id="258e5fd8f98e77a1547ddec9b070f084c89034c4" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;MissionService&lt;/code&gt; connects the &lt;code&gt;MissionControlComponent&lt;/code&gt; to multiple &lt;code&gt;AstronautComponent&lt;/code&gt; children.</source>
          <target state="translated">이 &lt;code&gt;MissionService&lt;/code&gt; 는 연결 대상 &lt;code&gt;MissionControlComponent&lt;/code&gt; 배수 &lt;code&gt;AstronautComponent&lt;/code&gt; 의 아이들.</target>
        </trans-unit>
        <trans-unit id="59e007abb53ac82deffb3014ce0885f777370e0d" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;VersionChildComponent&lt;/code&gt; detects changes to the &lt;code&gt;&lt;a href=&quot;../api/core/version#major&quot;&gt;major&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/core/version#minor&quot;&gt;minor&lt;/a&gt;&lt;/code&gt; input properties and composes a log message reporting these changes:</source>
          <target state="translated">이 &lt;code&gt;VersionChildComponent&lt;/code&gt; 는 &lt;code&gt;&lt;a href=&quot;../api/core/version#major&quot;&gt;major&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;../api/core/version#minor&quot;&gt;minor&lt;/a&gt;&lt;/code&gt; 입력 속성 의 변경을 감지 하고 다음 변경을보고하는 로그 메시지를 작성합니다.</target>
        </trans-unit>
        <trans-unit id="fbe66defed731afe2b351869493bed1b439539c0" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;[(&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;)]&lt;/code&gt; syntax can only &lt;em&gt;set&lt;/em&gt; a data-bound property. If you need to do something more, you can write the expanded form; for example, the following changes the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; value to uppercase:</source>
          <target state="translated">이 &lt;code&gt;[(&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;)]&lt;/code&gt; 구문은 데이터 바인딩 된 속성 만 &lt;em&gt;설정할&lt;/em&gt; 수 있습니다 . 더 많은 것을해야한다면 확장 된 형태를 쓸 수 있습니다. 예를 들어, 다음은 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 값을 대문자로 변경합니다 .</target>
        </trans-unit>
        <trans-unit id="d891bfbbc30a830ed00d349d04e68d42b5ea2457" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;bootstrap&lt;/code&gt; method is a direct replacement (takes same arguments) for AngularJS &lt;a href=&quot;https://docs.angularjs.org/api/ng/function/angular.bootstrap&quot;&gt;&lt;code&gt;bootstrap&lt;/code&gt;&lt;/a&gt; method. Unlike AngularJS, this bootstrap is asynchronous.</source>
          <target state="translated">이 &lt;code&gt;bootstrap&lt;/code&gt; 메소드는 AngularJS &lt;a href=&quot;https://docs.angularjs.org/api/ng/function/angular.bootstrap&quot;&gt; &lt;code&gt;bootstrap&lt;/code&gt; &lt;/a&gt; 메소드 를 직접 대체합니다 (동일한 인수를 취함) . AngularJS와 달리이 부트 스트랩은 비동기식입니다.</target>
        </trans-unit>
        <trans-unit id="a81bbff7f4c2b4f66516ab105c5f2da6f8908842" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;getHeroes()&lt;/code&gt; returns the sliced list of heroes at positions 1 and 5, returning only four of the Top Heroes (2nd, 3rd, 4th, and 5th).</source>
          <target state="translated">이 &lt;code&gt;getHeroes()&lt;/code&gt; 는 위치 1과 5에있는 슬라이스 된 영웅 목록을 리턴하고 상위 영웅 중 4 명 (2, 3, 4, 5) 만 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="9b89a86d9e9910b9545a4d39e96b18d0d3af5a5b" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;outlets&lt;/code&gt; object within an outer object was completely unnecessary when there was only one route and one &lt;em&gt;unnamed&lt;/em&gt; outlet to think about.</source>
          <target state="translated">이 &lt;code&gt;outlets&lt;/code&gt; 하나 개의 경로와 하나 개있을 때 외부 객체 내 목적은 완전히 불필요 &lt;em&gt;이름이&lt;/em&gt; 생각하는 콘센트.</target>
        </trans-unit>
        <trans-unit id="7f20e0dbf005f61cffb8c3dd9af39a375a30b434" translate="yes" xml:space="preserve">
          <source>This &lt;em&gt;Tour of Heroes&lt;/em&gt; tutorial provides an introduction to the fundamentals of Angular. It shows you how to set up your local development environment and develop an app using the &lt;a href=&quot;https://angular.io/cli&quot;&gt;Angular CLI tool&lt;/a&gt;.</source>
          <target state="translated">이 &lt;em&gt;Tour of Heroes&lt;/em&gt; 튜토리얼은 Angular의 기본 사항을 소개합니다. &lt;a href=&quot;https://angular.io/cli&quot;&gt;Angular CLI 도구를&lt;/a&gt; 사용하여 로컬 개발 환경을 설정하고 앱을 개발하는 방법을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="f09b226e4f2c4eb0d926e572d4a75f6880da5490" translate="yes" xml:space="preserve">
          <source>This &lt;em&gt;no-op&lt;/em&gt; interceptor simply calls &lt;code&gt;next.handle()&lt;/code&gt; with the original request and returns the observable without doing a thing.</source>
          <target state="translated">이 &lt;em&gt;no-op&lt;/em&gt; 인터셉터는 단순히 원래 요청으로 &lt;code&gt;next.handle()&lt;/code&gt; 을 호출 하고 수행하지 않고 관찰 가능 항목을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="50210317fa118bab69579c2022e5d9a816190d39" translate="yes" xml:space="preserve">
          <source>This API is the recommended way to construct injectors in performance-sensitive parts.</source>
          <target state="translated">이 API는 성능에 민감한 부분에 인젝터를 구성하는 데 권장되는 방법입니다.</target>
        </trans-unit>
        <trans-unit id="469f1d1eec641289327d7f725b8bc80d83c5b953" translate="yes" xml:space="preserve">
          <source>This Style Guide is for anyone who contributes to the Angular documentation (this site). These guidelines should be followed by all authors. Deviations must be approved by a documentation editor.</source>
          <target state="translated">이 스타일 가이드는 Angular 설명서 (이 사이트)에 기고 한 사람을위한 것입니다. 이 지침은 모든 저자가 따라야합니다. 편차는 문서 편집기에서 승인해야합니다.</target>
        </trans-unit>
        <trans-unit id="3415857a9e6030331c79e1e76604015a5df5e041" translate="yes" xml:space="preserve">
          <source>This UI uses the HTML unordered list with &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; tags. The &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; in the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; element is the Angular &quot;repeater&quot; directive. It marks that &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; element (and its children) as the &quot;repeater template&quot;:</source>
          <target state="translated">이 UI는 &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; 및 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 태그 와 함께 HTML 비 순차 목록을 사용합니다 . &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 는 에서 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 요소는 각도 &quot;중계기&quot;지시자이다. 이 마크가 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 은 &quot;리피터 템플릿&quot;등의 요소 (및 자녀) :</target>
        </trans-unit>
        <trans-unit id="2b4ebc81415f90795ab79ed8a5b2cd8f2bb7595a" translate="yes" xml:space="preserve">
          <source>This XML element represents the translation of the &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; greeting tag that you marked with the &lt;code&gt;i18n&lt;/code&gt; attribute earlier in this guide.</source>
          <target state="translated">이 XML 요소는 이 안내서 앞부분에서 &lt;code&gt;i18n&lt;/code&gt; 속성으로 표시 한 &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; 인사말 태그 의 번역을 나타냅니다 .</target>
        </trans-unit>
        <trans-unit id="48298b5a19ab51f248711bfb5fa88cc617b0670f" translate="yes" xml:space="preserve">
          <source>This allows the Angular Language Service to provide diagnostics and completions in &lt;code&gt;.ts&lt;/code&gt; files.</source>
          <target state="translated">이를 통해 Angular Language Service는 &lt;code&gt;.ts&lt;/code&gt; 파일의 진단 및 완료를 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="98f7af4e84f120f59a1303fcf4a9447a45a5d38a" translate="yes" xml:space="preserve">
          <source>This allows the compiler to generate a reference to &lt;code&gt;ɵ0&lt;/code&gt; in the factory without having to know what the value of &lt;code&gt;ɵ0&lt;/code&gt; contains.</source>
          <target state="translated">이를 통해 컴파일러 는 &lt;code&gt;ɵ0&lt;/code&gt; 값에 포함 된 값을 몰라도 팩토리에서 &lt;code&gt;ɵ0&lt;/code&gt; 에 대한 참조를 생성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="24015a5bb2d8b1f8210c5acd6f640d4dc6d483b2" translate="yes" xml:space="preserve">
          <source>This allows us to add new states without having to include separate transitions for each one.</source>
          <target state="translated">이를 통해 각 상태에 대해 별도의 전환을 포함하지 않고도 새로운 상태를 추가 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="cbe0ef929bc0631d02b1205466d152dddaeabe4f" translate="yes" xml:space="preserve">
          <source>This allows you to set appropriate styles for individual components that won&amp;rsquo;t leak into other parts of the application.</source>
          <target state="translated">이를 통해 응용 프로그램의 다른 부분으로 누출되지 않는 개별 구성 요소에 적합한 스타일을 설정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fa04bc183c4a35ffd59532acaddb459c40802b8c" translate="yes" xml:space="preserve">
          <source>This always means importing &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; from &lt;code&gt;@angular/common&lt;/code&gt; for access to the Angular directives such as &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;NgFor&lt;/code&gt;. You can import it directly or from another NgModule that &lt;a href=&quot;ngmodule-faq#q-reexport&quot;&gt;re-exports&lt;/a&gt; it.</source>
          <target state="translated">이것은 항상 &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;NgFor&lt;/code&gt; 같은 Angular 지시문에 액세스하기 위해 &lt;code&gt;@angular/common&lt;/code&gt; 에서 &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; 을 가져 오는 것을 의미 합니다. 직접 가져 오거나 &lt;a href=&quot;ngmodule-faq#q-reexport&quot;&gt;다시 내보내는&lt;/a&gt; 다른 NgModule에서 가져올 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e4af21eecd43fe210746ff3a4c62a38f49ffe7f9" translate="yes" xml:space="preserve">
          <source>This app has many of the features you'd expect to find in a data-driven application. It acquires and displays a list of heroes, edits a selected hero's detail, and navigates among different views of heroic data.</source>
          <target state="translated">이 응용 프로그램에는 데이터 기반 응용 프로그램에서 기대할 수있는 많은 기능이 있습니다. 영웅 목록을 가져 와서 표시하고 선택한 영웅의 세부 정보를 편집하며 다양한 영웅 데이터보기를 탐색합니다.</target>
        </trans-unit>
        <trans-unit id="f17ea08bfc5149a70f6152907b2632dc2a63714a" translate="yes" xml:space="preserve">
          <source>This app provides &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; in the app's root injector, as a side-effect of importing the &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; in &lt;code&gt;AppModule&lt;/code&gt;. You should provide interceptors in &lt;code&gt;AppModule&lt;/code&gt; as well.</source>
          <target state="translated">이 응용 프로그램은 제공 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; 를을 수입의 부작용으로, 응용 프로그램의 루트 인젝터에 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; 을 에 &lt;code&gt;AppModule&lt;/code&gt; . &lt;code&gt;AppModule&lt;/code&gt; 에서도 인터셉터를 제공해야합니다 .</target>
        </trans-unit>
        <trans-unit id="9010af53dce21e99cd1b98b6918ed08a568edceb" translate="yes" xml:space="preserve">
          <source>This app uses more terse &quot;variable assignment&quot; style simply for brevity.</source>
          <target state="translated">이 응용 프로그램은 간결성을 위해 더 간결한 &quot;변수 할당&quot;스타일을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="e2dd29b7095751503adbe18ae104950880b8fed2" translate="yes" xml:space="preserve">
          <source>This application deletes a hero with the &lt;code&gt;HttpClient.delete&lt;/code&gt; method by passing the hero's id in the request URL.</source>
          <target state="translated">이 애플리케이션 은 요청 URL에 히어로의 ID를 전달하여 &lt;code&gt;HttpClient.delete&lt;/code&gt; 메소드로 히어로를 삭제합니다 .</target>
        </trans-unit>
        <trans-unit id="448875963d3ea5d9faf62ce4ea4e238a24bd4684" translate="yes" xml:space="preserve">
          <source>This approach makes it easier to re-use the component somewhere else and deliver the component's intended appearance even if the global styles are different.</source>
          <target state="translated">이 방법을 사용하면 전역 스타일이 다르더라도 구성 요소를 다른 곳에서 쉽게 재사용하고 구성 요소의 의도 된 모양을 전달할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="736cdde48162e97e7bae316bb32e7680eb170f89" translate="yes" xml:space="preserve">
          <source>This approach works for prototyping, but is not robust or maintainable. As soon as you try to test this component or get heroes from a remote server, you have to change the implementation of &lt;code&gt;HeroesListComponent&lt;/code&gt; and replace every use of the &lt;code&gt;HEROES&lt;/code&gt; mock data.</source>
          <target state="translated">이 방법은 프로토 타이핑에 적용되지만 강력하거나 유지 관리 할 수는 없습니다. 이 구성 요소를 테스트하거나 원격 서버에서 영웅을 가져 &lt;code&gt;HeroesListComponent&lt;/code&gt; 하면 HeroesListComponent 의 구현을 변경하고 모든 &lt;code&gt;HEROES&lt;/code&gt; 모의 데이터 사용을 바꿔야 합니다.</target>
        </trans-unit>
        <trans-unit id="d2207c94db1f3c39ac92627d2d416a732485be1c" translate="yes" xml:space="preserve">
          <source>This array lacks a route parameter because you had no reason to send information to the &lt;code&gt;HeroListComponent&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;HeroListComponent&lt;/code&gt; 에 정보를 보낼 이유가 없기 때문에이 배열에는 경로 매개 변수가 없습니다 .</target>
        </trans-unit>
        <trans-unit id="e9b9947c5ef101e16618174c23e01f209fae9d4e" translate="yes" xml:space="preserve">
          <source>This article explains how to configure your project to run Circle CI and Travis CI, and also update your test configuration to be able to run tests in the Chrome browser in either environment.</source>
          <target state="translated">이 도움말에서는 Circle CI 및 Travis CI를 실행하도록 프로젝트를 구성하는 방법과 두 환경의 Chrome 브라우저에서 테스트를 실행할 수 있도록 테스트 구성을 업데이트하는 방법에 대해 설명합니다.</target>
        </trans-unit>
        <trans-unit id="4e02ae1fdc78e80303d48713d37550a281676bcb" translate="yes" xml:space="preserve">
          <source>This asynchronous approach &lt;em&gt;will work&lt;/em&gt; when the &lt;code&gt;HeroService&lt;/code&gt; requests heroes from the server.</source>
          <target state="translated">이 비동기 방식 &lt;em&gt;은 &lt;/em&gt; &lt;code&gt;HeroService&lt;/code&gt; 가 서버에서 영웅을 요청할 때 &lt;em&gt;작동&lt;/em&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="9e58e666a6e882960d6b1daf78543b6547ba94f0" translate="yes" xml:space="preserve">
          <source>This attack is only successful if the returned JSON is executable as JavaScript. Servers can prevent an attack by prefixing all JSON responses to make them non-executable, by convention, using the well-known string &lt;code&gt;&quot;)]}',\n&quot;&lt;/code&gt;.</source>
          <target state="translated">이 공격은 반환 된 JSON이 JavaScript로 실행 가능한 경우에만 성공합니다. 서버는 잘 알려진 문자열 &lt;code&gt;&quot;)]}',\n&quot;&lt;/code&gt; 사용하여 규칙에 따라 모든 JSON 응답을 접두어로 실행하여 실행 불가능하게함으로써 공격을 방지 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="651be0a8100915d5529b17ae73b92bbe7b153f12" translate="yes" xml:space="preserve">
          <source>This bare minimum &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; imports &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt;, the module every Angular browser-based app must have. It also defines an empty &lt;code&gt;ngDoBootstrap()&lt;/code&gt; method, to prevent the &lt;a href=&quot;../api/core/compiler&quot;&gt;Compiler&lt;/a&gt; from returning errors. This is necessary because the module will not have a &lt;code&gt;bootstrap&lt;/code&gt; declaration on its &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; decorator.</source>
          <target state="translated">이 최소한의 &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 은 모든 Angular 브라우저 기반 앱이 가지고 있어야하는 모듈 인 &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; 을 가져옵니다 . 또한 &lt;a href=&quot;../api/core/compiler&quot;&gt;컴파일러&lt;/a&gt; 가 오류를 반환 하지 않도록 빈 &lt;code&gt;ngDoBootstrap()&lt;/code&gt; 메서드를 정의 합니다. 이는 모듈이 &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 데코레이터 에 &lt;code&gt;bootstrap&lt;/code&gt; 선언을 가지지 않기 때문에 필요합니다 .</target>
        </trans-unit>
        <trans-unit id="f56abc002d8d199ab12c7a00e8eceb4cb5324712" translate="yes" xml:space="preserve">
          <source>This bare minimum &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; imports &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt;, the module every Angular browser-based app must have. It also imports &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; from &lt;code&gt;@angular/upgrade/&lt;a href=&quot;../api/upgrade/static&quot;&gt;static&lt;/a&gt;&lt;/code&gt;, which exports providers that will be used for upgrading and downgrading services and components.</source>
          <target state="translated">이 최소한의 &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 은 모든 Angular 브라우저 기반 앱이 가지고 있어야하는 모듈 인 &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; 을 가져옵니다 . 또한 &lt;code&gt;@angular/upgrade/&lt;a href=&quot;../api/upgrade/static&quot;&gt;static&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;../api/upgrade/static&quot;&gt;static&lt;/a&gt; 에서 &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; 을 가져와 서비스 및 구성 요소를 업그레이드 및 다운 그레이드하는 데 사용할 공급자를 내 보냅니다.</target>
        </trans-unit>
        <trans-unit id="4182fbf9bcd985eb43d694af8b1af19720683102" translate="yes" xml:space="preserve">
          <source>This behavior necessarily changes when you use lazy loading. Lazy loading is when you load modules only when you need them; for example, when routing. They aren&amp;rsquo;t loaded right away like with eagerly loaded modules. This means that any services listed in their provider arrays aren&amp;rsquo;t available because the root injector doesn&amp;rsquo;t know about these modules.</source>
          <target state="translated">이 동작은 지연 로딩을 사용할 때 반드시 변경됩니다. 지연로드는 필요할 때만 모듈을로드 할 때입니다. 예를 들어 라우팅 할 때. 모듈은 열성적으로로드 된 것처럼 즉시로드되지 않습니다. 이는 루트 인젝터가 이러한 모듈에 대해 알지 못하기 때문에 제공자 배열에 나열된 서비스를 사용할 수 없음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="35a35e5d7d8bb3b5d8a866028a9f757d0c2abbb7" translate="yes" xml:space="preserve">
          <source>This cadence of releases gives you access to new features as soon as they are ready, while maintaining the stability and reliability of the platform for production users.</source>
          <target state="translated">이 릴리스의 릴리스는 프로덕션 사용자를위한 플랫폼의 안정성과 안정성을 유지하면서 새로운 기능이 준비되는 즉시 액세스 할 수 있도록합니다.</target>
        </trans-unit>
        <trans-unit id="de8dbaffe2662ccb066fdee3c1966e668ead9335" translate="yes" xml:space="preserve">
          <source>This can be a problem if you have to change your app's location. If you setup a redirect from the old location (for example &lt;code&gt;example.com&lt;/code&gt;) to the new location (for example &lt;code&gt;www.example.com&lt;/code&gt;) the worker will stop working. Also, the redirect won't even trigger for users who are loading the site entirely from Service Worker. The old worker (registered at &lt;code&gt;example.com&lt;/code&gt;) tries to update and sends requests to the old location &lt;code&gt;example.com&lt;/code&gt; which get redirected to the new location &lt;code&gt;www.example.com&lt;/code&gt; and create the error &lt;code&gt;The script resource is behind &lt;a href=&quot;../api/router/routerlinkwithhref&quot;&gt;a&lt;/a&gt; redirect, which is disallowed&lt;/code&gt;.</source>
          <target state="translated">앱의 위치를 ​​변경해야하는 경우 문제가 될 수 있습니다. 이전 위치 (예 : &lt;code&gt;example.com&lt;/code&gt; )에서 새 위치 (예 : &lt;code&gt;www.example.com&lt;/code&gt; ) 로 리디렉션을 설정 하면 작업자가 작업을 중지합니다. 또한 사이트 전체를 Service Worker에서로드하는 사용자에게는 리디렉션이 트리거되지 않습니다. (에 등록 된 오래된 노동자 &lt;code&gt;example.com&lt;/code&gt; 은 ) 업데이트하려고하고 이전 위치로 요청을 보내는 &lt;code&gt;example.com&lt;/code&gt; 새 위치로 리디렉션 &lt;code&gt;www.example.com&lt;/code&gt; 과 오류 생성 &lt;code&gt;The script resource is behind &lt;a href=&quot;../api/router/routerlinkwithhref&quot;&gt;a&lt;/a&gt; redirect, which is disallowed&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3a25a7112462a90a222ddd01185604490e952693" translate="yes" xml:space="preserve">
          <source>This can be used to resume testing after events have triggered asynchronous activity or asynchronous change detection.</source>
          <target state="translated">이벤트가 비동기 활동 또는 비동기 변경 감지를 트리거 한 후 테스트를 재개하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="934112ccd1aa2b6915e125429be40b8b0e576f0a" translate="yes" xml:space="preserve">
          <source>This can be useful when scanning through code and looking for observable values. Also, if you want a property to store the most recent value from an observable, it can be convenient to simply use the same name with or without the &amp;ldquo;$&amp;rdquo;.</source>
          <target state="translated">이것은 코드를 통해 스캔하고 관찰 가능한 값을 찾을 때 유용 할 수 있습니다. 또한 속성에서 관찰 가능 항목의 최신 값을 저장하려면 &quot;$&quot;가 있거나없는 동일한 이름을 사용하는 것이 편리 할 수 ​​있습니다.</target>
        </trans-unit>
        <trans-unit id="2b2a566810683bdb154f2660dc33dfd48367534d" translate="yes" xml:space="preserve">
          <source>This can happen if you refer to an ambient type. For example, the &lt;code&gt;Window&lt;/code&gt; type is an ambient type declared in the global &lt;code&gt;.d.ts&lt;/code&gt; file.</source>
          <target state="translated">주변 유형을 참조하면 이런 일이 발생할 수 있습니다. 예를 들어, &lt;code&gt;Window&lt;/code&gt; 유형은 전역 &lt;code&gt;.d.ts&lt;/code&gt; 파일에 선언 된 주변 유형 입니다.</target>
        </trans-unit>
        <trans-unit id="6476281277699a0797217af1c8c95aadca9fed5f" translate="yes" xml:space="preserve">
          <source>This can happen if you use a number as a property name as in the following example.</source>
          <target state="translated">다음 예와 같이 숫자를 속성 이름으로 사용하면 이런 일이 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3b41585be32bdaba39097b77ac3bb57808c72252" translate="yes" xml:space="preserve">
          <source>This can happen when a &lt;a href=&quot;../../guide/router#milestone-5-route-guards&quot;&gt;route guard&lt;/a&gt; returns &lt;code&gt;false&lt;/code&gt; or initiates a redirect by returning a &lt;code&gt;&lt;a href=&quot;urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">이것은 &lt;a href=&quot;../../guide/router#milestone-5-route-guards&quot;&gt;라우트 가드&lt;/a&gt; 가 &lt;code&gt;false&lt;/code&gt; 를 반환하거나 &lt;code&gt;&lt;a href=&quot;urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt; 를 반환하여 리디렉션을 시작할 때 발생할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="161acaf31fb43a0787ee8fbb9353bde452188f86" translate="yes" xml:space="preserve">
          <source>This causes the CLI to create a folder called &lt;code&gt;customer-dashboard&lt;/code&gt; with a file inside called &lt;code&gt;customer-dashboard.module.ts&lt;/code&gt; with the following contents:</source>
          <target state="translated">이로 인해 CLI는 &lt;code&gt;customer-dashboard&lt;/code&gt; .module.ts 내부 에 다음 내용을 포함하는 &lt;code&gt;customer-dashboard.module.ts&lt;/code&gt; 라는 폴더를 작성합니다 .</target>
        </trans-unit>
        <trans-unit id="5019a44a75c49b88537ac9e8329f1c2eab2831e5" translate="yes" xml:space="preserve">
          <source>This class is an &lt;code&gt;&lt;a href=&quot;../../core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt;, which you import to provide AngularJS core services, and has an instance method used to bootstrap the hybrid upgrade application.</source>
          <target state="translated">이 클래스는 &lt;code&gt;&lt;a href=&quot;../../core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 이며 AngularJS 핵심 서비스를 제공하기 위해 가져 오며 하이브리드 업그레이드 애플리케이션을 부트 스트랩하는 데 사용되는 인스턴스 메소드가 있습니다.</target>
        </trans-unit>
        <trans-unit id="025bc612549c84721126511ec42b2a6d0ff1d56c" translate="yes" xml:space="preserve">
          <source>This class is immutable; all mutation operations return a new instance.</source>
          <target state="translated">이 클래스는 불변입니다. 모든 돌연변이 작업은 새로운 인스턴스를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="d3d60295749b3a3a0404d6398d78e18e444489d5" translate="yes" xml:space="preserve">
          <source>This class is only used internally in the &lt;code&gt;&lt;a href=&quot;reactiveformsmodule&quot;&gt;ReactiveFormsModule&lt;/a&gt;&lt;/code&gt; and the &lt;code&gt;&lt;a href=&quot;formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">이 클래스는 &lt;code&gt;&lt;a href=&quot;reactiveformsmodule&quot;&gt;ReactiveFormsModule&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; 내부에서만 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="801d9cace214c9cf01792d4f29b30f5848a25da1" translate="yes" xml:space="preserve">
          <source>This class should not be used directly by an application developer. Instead, use &lt;a href=&quot;common/location&quot;&gt;&lt;code&gt;Location&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 클래스는 응용 프로그램 개발자가 직접 사용해서는 안됩니다. 대신 &lt;a href=&quot;common/location&quot;&gt; &lt;code&gt;Location&lt;/code&gt; 을&lt;/a&gt; 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="d1d6a70007738552506319e31c6ae61765926844" translate="yes" xml:space="preserve">
          <source>This class should not be used directly by an application developer. Instead, use &lt;a href=&quot;location&quot;&gt;&lt;code&gt;Location&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 클래스는 응용 프로그램 개발자가 직접 사용해서는 안됩니다. 대신 &lt;a href=&quot;location&quot;&gt; &lt;code&gt;Location&lt;/code&gt; 을&lt;/a&gt; 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="d5c998372f08c1a101f67cf6fc6453dc480a13a2" translate="yes" xml:space="preserve">
          <source>This code inspects certain &lt;em&gt;values of interest&lt;/em&gt;, capturing and comparing their current state against previous values. It writes a special message to the log when there are no substantive changes to the &lt;code&gt;hero&lt;/code&gt; or the &lt;code&gt;power&lt;/code&gt; so you can see how often &lt;code&gt;&lt;a href=&quot;../api/core/docheck&quot;&gt;DoCheck&lt;/a&gt;&lt;/code&gt; is called. The results are illuminating:</source>
          <target state="translated">이 코드 &lt;em&gt;는 관심있는&lt;/em&gt; 특정 &lt;em&gt;값을&lt;/em&gt; 검사 하여 현재 상태를 캡처하고 이전 값과 비교합니다. &lt;code&gt;hero&lt;/code&gt; 이나 &lt;code&gt;power&lt;/code&gt; 실질적인 변화가 없을 때 로그에 특별한 메시지를 작성하여 &lt;code&gt;&lt;a href=&quot;../api/core/docheck&quot;&gt;DoCheck&lt;/a&gt;&lt;/code&gt; 가 얼마나 자주 호출 되는지 확인할 수 있습니다 . 결과는 밝습니다.</target>
        </trans-unit>
        <trans-unit id="db010d4e9e3ffb1514bc2b0d8a75b9801342ba2f" translate="yes" xml:space="preserve">
          <source>This code repeats the &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; tag for each power in the list of powers. The &lt;code&gt;pow&lt;/code&gt; template input variable is a different power in each iteration; you display its name using the interpolation syntax.</source>
          <target state="translated">이 코드는 전원 목록의 각 전원에 대해 &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; 태그를 반복합니다 . &lt;code&gt;pow&lt;/code&gt; 템플릿의 입력 변수는 각각의 반복에서 상이한 전력이고; 보간 구문을 사용하여 이름을 표시합니다.</target>
        </trans-unit>
        <trans-unit id="75b5c5fa1c91023ea749d4aa233f6b4929e1dfb1" translate="yes" xml:space="preserve">
          <source>This code sets the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;&lt;code&gt;value&lt;/code&gt; property by binding to the &lt;code&gt;name&lt;/code&gt; property. To listen for changes to the value, the code binds to the &lt;code&gt;input&lt;/code&gt; event of the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; element. When the user makes changes, the &lt;code&gt;input&lt;/code&gt; event is raised, and the binding executes the statement within a context that includes the DOM event object, &lt;code&gt;$event&lt;/code&gt;.</source>
          <target state="translated">이 코드는 &lt;code&gt;name&lt;/code&gt; 속성 에 바인딩 하여 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; &lt;code&gt;value&lt;/code&gt; 속성을 설정합니다 . 값의 변경 사항을 수신하기 위해 코드 는 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 요소 의 &lt;code&gt;input&lt;/code&gt; 이벤트에 바인딩합니다 . 사용자가 변경하면 &lt;code&gt;input&lt;/code&gt; 이벤트가 발생하고 바인딩은 DOM 이벤트 객체 &lt;code&gt;$event&lt;/code&gt; 를 포함하는 컨텍스트 내에서 명령문을 실행합니다 .</target>
        </trans-unit>
        <trans-unit id="077f99384ba94951a54310fe9d28e905bc2e0a9b" translate="yes" xml:space="preserve">
          <source>This code uses only one &lt;code&gt;&lt;a href=&quot;asyncpipe&quot;&gt;AsyncPipe&lt;/a&gt;&lt;/code&gt;, so only one subscription is created. The conditional statement stores the result of &lt;code&gt;userStream|async&lt;/code&gt; in the local variable &lt;code&gt;user&lt;/code&gt;. You can then bind the local &lt;code&gt;user&lt;/code&gt; repeatedly.</source>
          <target state="translated">이 코드는 하나의 &lt;code&gt;&lt;a href=&quot;asyncpipe&quot;&gt;AsyncPipe&lt;/a&gt;&lt;/code&gt; 만 사용 하므로 하나의 구독 만 작성됩니다. 조건문은 &lt;code&gt;userStream|async&lt;/code&gt; 의 결과를 로컬 변수 &lt;code&gt;user&lt;/code&gt; 에 저장 합니다. 그런 다음 로컬 &lt;code&gt;user&lt;/code&gt; 반복해서 바인딩 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="13648ab24db66abd7c6828bea92fd0f6dff2d7ba" translate="yes" xml:space="preserve">
          <source>This command creates the following &lt;code&gt;UserService&lt;/code&gt; skeleton:</source>
          <target state="translated">이 명령은 다음 &lt;code&gt;UserService&lt;/code&gt; 스켈레톤을 작성합니다 .</target>
        </trans-unit>
        <trans-unit id="53ca835c29b278849f8cc8fdbc5ec1ec43128a05" translate="yes" xml:space="preserve">
          <source>This command updates both &lt;code&gt;@angular/material&lt;/code&gt; and its dependency &lt;code&gt;@angular/cdk&lt;/code&gt; in your workspace's &lt;code&gt;package.json&lt;/code&gt;. If either package contains an update schematic that covers migration from the existing version to a new version, the command runs that schematic on your workspace.</source>
          <target state="translated">이 명령 은 작업 공간의 &lt;code&gt;package.json&lt;/code&gt; 에서 &lt;code&gt;@angular/material&lt;/code&gt; 및 해당 종속성 &lt;code&gt;@angular/cdk&lt;/code&gt; 를 모두 업데이트합니다 . 패키지 중 하나에 기존 버전에서 새 버전으로의 마이그레이션을 다루는 업데이트 회로도가 포함되어 있으면 명령이 작업 공간에서 해당 회로도를 실행합니다.</target>
        </trans-unit>
        <trans-unit id="5f08f688b42cedaf1c2687380db97e840fa25cee" translate="yes" xml:space="preserve">
          <source>This completes the cross validation example. We managed to:</source>
          <target state="translated">이것으로 교차 검증 예를 완성합니다. 우리는 다음을 관리했습니다.</target>
        </trans-unit>
        <trans-unit id="5c82d5954347561c2d21641e18971743651dd806" translate="yes" xml:space="preserve">
          <source>This component and its tree of child components receive &lt;code&gt;DateLoggerService&lt;/code&gt; instance. Components outside the tree continue to receive the original &lt;code&gt;LoggerService&lt;/code&gt; instance.</source>
          <target state="translated">이 구성 요소와 해당 하위 구성 요소 &lt;code&gt;DateLoggerService&lt;/code&gt; 인스턴스를 받습니다 . 트리 외부의 구성 요소는 계속 원래 &lt;code&gt;LoggerService&lt;/code&gt; 인스턴스 를받습니다 .</target>
        </trans-unit>
        <trans-unit id="597e9233caedd83ac990f5386a4ce276f54df4c0" translate="yes" xml:space="preserve">
          <source>This component class has no dependencies. To test a service with no dependencies, you create it with &lt;code&gt;new&lt;/code&gt;, poke at its API, and assert expectations on its public state. Do the same with the component class.</source>
          <target state="translated">이 컴포넌트 클래스는 종속성이 없습니다. 종속성이없는 서비스를 테스트하려면 &lt;code&gt;new&lt;/code&gt; 로 서비스를 작성 하고 API를 찌르고 공개 상태에 대한 기대를 주장하십시오. 컴포넌트 클래스와 동일하게 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="065a8c2a12fca59785e66b9536ad7a4d7503a70d" translate="yes" xml:space="preserve">
          <source>This component instance.</source>
          <target state="translated">이 구성 요소 인스턴스</target>
        </trans-unit>
        <trans-unit id="a07464de42a69a73871d1c32b4cddf78f4a39cff" translate="yes" xml:space="preserve">
          <source>This component's &lt;code&gt;doSomething()&lt;/code&gt; method update's the component's data-bound &lt;code&gt;comment&lt;/code&gt; property immediately. There's no &lt;a href=&quot;lifecycle-hooks#wait-a-tick&quot;&gt;need to wait&lt;/a&gt;.</source>
          <target state="translated">이 컴포넌트의 &lt;code&gt;doSomething()&lt;/code&gt; 메소드 업데이트는 컴포넌트의 데이터 바인딩 된 &lt;code&gt;comment&lt;/code&gt; 특성을 즉시 업데이트 합니다. &lt;a href=&quot;lifecycle-hooks#wait-a-tick&quot;&gt;기다릴 필요가&lt;/a&gt; 없습니다 .</target>
        </trans-unit>
        <trans-unit id="8831291497a6d0587b26b1c8ca5ca8dbd14f9441" translate="yes" xml:space="preserve">
          <source>This component's injector lookup tokens. Includes the component itself plus the tokens that the component lists in its &lt;code&gt;providers&lt;/code&gt; metadata.</source>
          <target state="translated">이 컴포넌트의 인젝터 조회 토큰. 구성 요소 자체와 구성 요소가 &lt;code&gt;providers&lt;/code&gt; 메타 데이터에 나열하는 토큰을 포함합니다 .</target>
        </trans-unit>
        <trans-unit id="7b0506327a430462426c6e68b6e09fd639e04c8d" translate="yes" xml:space="preserve">
          <source>This concludes the &quot;Tour of Heroes&quot; tutorial. You're ready to learn more about Angular development in the fundamentals section, starting with the &lt;a href=&quot;../guide/architecture&quot;&gt;Architecture&lt;/a&gt; guide.</source>
          <target state="translated">이것으로 &quot;Tour of Heroes&quot;튜토리얼을 마칩니다. &lt;a href=&quot;../guide/architecture&quot;&gt;아키텍처&lt;/a&gt; 가이드 부터 시작하여 기본 사항 섹션에서 각도 개발에 대해 자세히 배울 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e37d0d91df8ad47c0dbbb5e123254e61fce1c600" translate="yes" xml:space="preserve">
          <source>This configuration caches &lt;code&gt;node_modules/&lt;/code&gt; and uses &lt;a href=&quot;https://docs.npmjs.com/cli/run-script&quot;&gt;&lt;code&gt;npm run&lt;/code&gt;&lt;/a&gt; to run CLI commands, because &lt;code&gt;@angular/cli&lt;/code&gt; is not installed globally. The double dash (&lt;code&gt;--&lt;/code&gt;) is needed to pass arguments into the &lt;code&gt;npm&lt;/code&gt; script.</source>
          <target state="translated">&lt;code&gt;@angular/cli&lt;/code&gt; 가 전체적으로 설치되지 않기 때문에이 구성은 &lt;code&gt;node_modules/&lt;/code&gt; 캐시 하고 &lt;a href=&quot;https://docs.npmjs.com/cli/run-script&quot;&gt; &lt;code&gt;npm run&lt;/code&gt; &lt;/a&gt; 을 사용 하여 CLI 명령을 실행합니다 . 인수를 &lt;code&gt;npm&lt;/code&gt; 스크립트 에 전달하려면 이중 대시 ( &lt;code&gt;--&lt;/code&gt; )가 필요합니다 .</target>
        </trans-unit>
        <trans-unit id="40d0adebce1666f54fd687822290b1370ce51244" translate="yes" xml:space="preserve">
          <source>This cookbook contains recipes for common component communication scenarios in which two or more components share information.</source>
          <target state="translated">이 쿡북에는 둘 이상의 구성 요소가 정보를 공유하는 일반적인 구성 요소 통신 시나리오를위한 레시피가 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="a322972c7d99a3ec23cfc786253fdee6e876e02e" translate="yes" xml:space="preserve">
          <source>This cookbook describes the steps required to set up and use Angular app files in Visual Studio 2015 within an ASP.NET 4.x project.</source>
          <target state="translated">이 쿡북은 ASP.NET 4.x 프로젝트 내에서 Visual Studio 2015에서 Angular 앱 파일을 설정하고 사용하는 데 필요한 단계를 설명합니다.</target>
        </trans-unit>
        <trans-unit id="81fab89603358b3015fbab03f643f5619e9e7e16" translate="yes" xml:space="preserve">
          <source>This cookbook shows you how to use &lt;code&gt;&lt;a href=&quot;../api/core/componentfactoryresolver&quot;&gt;ComponentFactoryResolver&lt;/a&gt;&lt;/code&gt; to add components dynamically.</source>
          <target state="translated">이 요리 책은 &lt;code&gt;&lt;a href=&quot;../api/core/componentfactoryresolver&quot;&gt;ComponentFactoryResolver&lt;/a&gt;&lt;/code&gt; 를 사용하여 컴포넌트 를 동적으로 추가 하는 방법을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="e813c2193e41174a6e571245c4cd3c17e5e9558e" translate="yes" xml:space="preserve">
          <source>This cookbook shows you how to use &lt;code&gt;formGroup&lt;/code&gt; to dynamically render a simple form with different control types and validation. It's a primitive start. It might evolve to support a much richer variety of questions, more graceful rendering, and superior user experience. All such greatness has humble beginnings.</source>
          <target state="translated">이 요리 책은 &lt;code&gt;formGroup&lt;/code&gt; 을 사용 하여 다른 제어 유형 및 유효성 검증 을 사용 하여 간단한 양식을 동적으로 렌더링하는 방법을 보여줍니다 . 기본 시작입니다. 훨씬 더 다양한 질문,보다 우아한 렌더링 및 우수한 사용자 경험을 지원하도록 발전 할 수 있습니다. 그러한 위대함은 겸손하게 시작되었습니다.</target>
        </trans-unit>
        <trans-unit id="d822107036c9c9bdc81f05621421ed35206b48fe" translate="yes" xml:space="preserve">
          <source>This cookbook uses &lt;a href=&quot;reactive-forms&quot;&gt;reactive forms&lt;/a&gt;.</source>
          <target state="translated">이 요리 책은 &lt;a href=&quot;reactive-forms&quot;&gt;반응 형을&lt;/a&gt; 사용 합니다 .</target>
        </trans-unit>
        <trans-unit id="d23601ec63a90736809116d022f4fadccabb0fbd" translate="yes" xml:space="preserve">
          <source>This cookbook uses the &lt;code&gt;Empty&lt;/code&gt; template with no added folders, no authentication, and no hosting. Pick the template and options appropriate for your project.</source>
          <target state="translated">이 요리 책은 폴더 추가, 인증 및 호스팅이없는 &lt;code&gt;Empty&lt;/code&gt; 템플릿을 사용합니다 . 프로젝트에 적합한 템플릿과 옵션을 선택하십시오.</target>
        </trans-unit>
        <trans-unit id="a651647f94c034ce66b15f4ab627c4ac2e28535c" translate="yes" xml:space="preserve">
          <source>This creates a &lt;code&gt;customers&lt;/code&gt; folder with the new lazy-loadable module &lt;code&gt;CustomersModule&lt;/code&gt; defined in the file &lt;code&gt;customers.module.ts&lt;/code&gt;. The command automatically adds the &lt;code&gt;CustomerComponent&lt;/code&gt; to the new feature module.</source>
          <target state="translated">이것은 만들어 &lt;code&gt;customers&lt;/code&gt; 새로운 게으른로드 가능한 모듈과 폴더 &lt;code&gt;CustomersModule&lt;/code&gt; 파일에 정의 &lt;code&gt;customers.module.ts&lt;/code&gt; . 이 명령은 &lt;code&gt;CustomerComponent&lt;/code&gt; 를 새 기능 모듈에 자동으로 추가합니다 .</target>
        </trans-unit>
        <trans-unit id="14b67ee4f93cd53fc641ba3366b0aa1e81714ab4" translate="yes" xml:space="preserve">
          <source>This creates a new folder called &lt;code&gt;orders&lt;/code&gt; containing an &lt;code&gt;OrdersModule&lt;/code&gt; and &lt;code&gt;OrdersRoutingModule&lt;/code&gt;, along with the new &lt;code&gt;OrderComponent&lt;/code&gt; source files. The &lt;code&gt;order-list&lt;/code&gt; route is added to the &lt;code&gt;&lt;a href=&quot;../api/router/routes&quot;&gt;Routes&lt;/a&gt;&lt;/code&gt; array in &lt;code&gt;app-routing.module.ts&lt;/code&gt;, using the lazy-loading syntax.</source>
          <target state="translated">그러면 새 &lt;code&gt;OrderComponent&lt;/code&gt; 소스 파일 과 함께 &lt;code&gt;OrdersModule&lt;/code&gt; 및 &lt;code&gt;OrdersRoutingModule&lt;/code&gt; 을 포함하는 &lt;code&gt;orders&lt;/code&gt; 라는 새 폴더가 생성 됩니다. &lt;code&gt;order-list&lt;/code&gt; 경로가 추가된다 &lt;code&gt;&lt;a href=&quot;../api/router/routes&quot;&gt;Routes&lt;/a&gt;&lt;/code&gt; 에 배열 &lt;code&gt;app-routing.module.ts&lt;/code&gt; 게으른 로딩 구문을 사용.</target>
        </trans-unit>
        <trans-unit id="a0adbda48788d27b45342d5c21c7e2786033726c" translate="yes" xml:space="preserve">
          <source>This creates a separate file named &lt;code&gt;my-module-routing.module.ts&lt;/code&gt; to store the NgModule's routes. The file includes an empty &lt;code&gt;&lt;a href=&quot;../api/router/routes&quot;&gt;Routes&lt;/a&gt;&lt;/code&gt; object that you can fill with routes to different components and NgModules.</source>
          <target state="translated">이것은 NgModule의 경로를 저장하기 위해 &lt;code&gt;my-module-routing.module.ts&lt;/code&gt; 라는 별도의 파일을 만듭니다 . 파일에는 다른 구성 요소 및 NgModules에 대한 경로를 채울 수 있는 빈 &lt;code&gt;&lt;a href=&quot;../api/router/routes&quot;&gt;Routes&lt;/a&gt;&lt;/code&gt; 객체가 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="1e0fcef7f7df8d4e453466c52facdaf940fe0d0a" translate="yes" xml:space="preserve">
          <source>This creates an app called &lt;code&gt;customer-app&lt;/code&gt; and the &lt;code&gt;--routing&lt;/code&gt; flag generates a file called &lt;code&gt;app-routing.module.ts&lt;/code&gt;, which is one of the files you need for setting up lazy loading for your feature module. Navigate into the project by issuing the command &lt;code&gt;cd customer-app&lt;/code&gt;.</source>
          <target state="translated">이 응용 프로그램이라고 만들어 &lt;code&gt;customer-app&lt;/code&gt; 하고 &lt;code&gt;--routing&lt;/code&gt; 플래그라는 파일이 생성 &lt;code&gt;app-routing.module.ts&lt;/code&gt; 당신이 당신의 기능 모듈에 대한 지연로드를 설정에 필요한 파일 중 하나입니다. &lt;code&gt;cd customer-app&lt;/code&gt; 명령을 실행하여 프로젝트를 탐색하십시오 .</target>
        </trans-unit>
        <trans-unit id="0198faa84961169c4d04809b0185acf9e3ac22b4" translate="yes" xml:space="preserve">
          <source>This creates the &lt;code&gt;projects/my-lib&lt;/code&gt; folder in your workspace, which contains a component and a service inside an NgModule. The workspace configuration file, &lt;code&gt;angular.json&lt;/code&gt;, is updated with a project of type 'library'.</source>
          <target state="translated">그러면 NgModule 내부에 컴포넌트와 서비스가 포함 된 &lt;code&gt;projects/my-lib&lt;/code&gt; 폴더가 작업 공간에 작성됩니다. 작업 공간 구성 파일 &lt;code&gt;angular.json&lt;/code&gt; 은 'library'유형의 프로젝트로 업데이트됩니다.</target>
        </trans-unit>
        <trans-unit id="742c3e2e58b8f0be6640dfb54f738b9a9e7625e7" translate="yes" xml:space="preserve">
          <source>This declares that the input property &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; of the &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; directive should be treated as a guard to the use of its template, implying that the template will only be instantiated if the &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; input property is true.</source>
          <target state="translated">이는 &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; 지시문 의 입력 속성 &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; 가 템플릿 사용에 대한 보호로 취급되어야한다고 선언하며, &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; 입력 속성이 true 인 경우에만 템플릿이 인스턴스화됨을 암시 합니다.</target>
        </trans-unit>
        <trans-unit id="048e83daee9abd14678f6339d9376992f4af52ee" translate="yes" xml:space="preserve">
          <source>This default behavior is suitable for a typical &quot;multi-repo&quot; development style where each application resides in its own workspace. Beginners and intermediate users are encouraged to use &lt;code&gt;ng new&lt;/code&gt; to create a separate workspace for each application.</source>
          <target state="translated">이 기본 동작은 각 응용 프로그램이 자체 작업 영역에있는 일반적인 &quot;다중 리포지토리&quot;개발 스타일에 적합합니다. 초보자와 중급 사용자는 &lt;code&gt;ng new&lt;/code&gt; 를 사용하여 각 응용 프로그램에 대해 별도의 작업 영역을 만드는 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="6587344c6ac0fb7a73ec81835299d2d7ce729572" translate="yes" xml:space="preserve">
          <source>This demo does neither. Instead, it asks the user to make that choice explicitly in a confirmation dialog box that &lt;em&gt;waits asynchronously for the user's answer&lt;/em&gt;.</source>
          <target state="translated">이 데모도 마찬가지입니다. 대신, &lt;em&gt;사용자의 답변을 비동기 적으로 기다리는&lt;/em&gt; 확인 대화 상자에서 명시 적으로 선택하도록 요청합니다 .</target>
        </trans-unit>
        <trans-unit id="6b5876f473d01141acbb800a8ab479df9db1837f" translate="yes" xml:space="preserve">
          <source>This directive accepts an existing &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; instance. It will then use this &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; instance to match any child &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; instances to child &lt;code&gt;&lt;a href=&quot;formcontrolname&quot;&gt;FormControlName&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;formgroupname&quot;&gt;FormGroupName&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;formarrayname&quot;&gt;FormArrayName&lt;/a&gt;&lt;/code&gt; directives.</source>
          <target state="translated">이 지시문은 기존 &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 인스턴스를 허용 합니다. 그런 다음이 &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 인스턴스를 사용 하여 하위 &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; 인스턴스를 하위 &lt;code&gt;&lt;a href=&quot;formcontrolname&quot;&gt;FormControlName&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;formgroupname&quot;&gt;FormGroupName&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;formarrayname&quot;&gt;FormArrayName&lt;/a&gt;&lt;/code&gt; 지시문 과 일치시킵니다 .</target>
        </trans-unit>
        <trans-unit id="a7989fce38212429c7062b9c5da6235e1e43e7a8" translate="yes" xml:space="preserve">
          <source>This directive can only be used as a child of &lt;code&gt;&lt;a href=&quot;ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; (within &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; tags).</source>
          <target state="translated">이 지시문은 &lt;code&gt;&lt;a href=&quot;ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; 의 하위 항목으로 만 사용할 수 있습니다 ( &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; 태그 내).</target>
        </trans-unit>
        <trans-unit id="251b666c976f4261c91fe4beed08cf42cce8548f" translate="yes" xml:space="preserve">
          <source>This directive can only be used with a parent &lt;code&gt;&lt;a href=&quot;formgroupdirective&quot;&gt;FormGroupDirective&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">이 지시문은 부모 &lt;code&gt;&lt;a href=&quot;formgroupdirective&quot;&gt;FormGroupDirective&lt;/a&gt;&lt;/code&gt; 와 함께 만 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e18d93c8deadcb10dbc3f3516c1984ce080db614" translate="yes" xml:space="preserve">
          <source>This directive is designed to be used with a parent &lt;code&gt;&lt;a href=&quot;formgroupdirective&quot;&gt;FormGroupDirective&lt;/a&gt;&lt;/code&gt; (selector: &lt;code&gt;[formGroup]&lt;/code&gt;).</source>
          <target state="translated">이 지시문은 부모 &lt;code&gt;&lt;a href=&quot;formgroupdirective&quot;&gt;FormGroupDirective&lt;/a&gt;&lt;/code&gt; (선택기 : &lt;code&gt;[formGroup]&lt;/code&gt; ) 와 함께 사용하도록 설계되었습니다 .</target>
        </trans-unit>
        <trans-unit id="8ac905b9010d53abe6967453b6081cf348d35f38" translate="yes" xml:space="preserve">
          <source>This directive is solely used to display warnings when the deprecated &lt;code&gt;&lt;a href=&quot;forms/ngform&quot;&gt;ngForm&lt;/a&gt;&lt;/code&gt; selector is used.</source>
          <target state="translated">이 지시문은 더 이상 사용되지 않는 &lt;code&gt;&lt;a href=&quot;forms/ngform&quot;&gt;ngForm&lt;/a&gt;&lt;/code&gt; 선택기를 사용할 때 경고를 표시하는 데만 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="b316720613e231db957c48b5c531a72244e235ef" translate="yes" xml:space="preserve">
          <source>This directive is solely used to display warnings when the deprecated &lt;code&gt;&lt;a href=&quot;ngform&quot;&gt;ngForm&lt;/a&gt;&lt;/code&gt; selector is used.</source>
          <target state="translated">이 지시문은 더 이상 사용되지 않는 &lt;code&gt;&lt;a href=&quot;ngform&quot;&gt;ngForm&lt;/a&gt;&lt;/code&gt; 선택기를 사용할 때 경고를 표시하는 데만 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="cf3a222ca96206b5b9edc9d51a79dbc263b73654" translate="yes" xml:space="preserve">
          <source>This directive is used by itself or as part of a larger form. Use the &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; selector to activate it.</source>
          <target state="translated">이 지시문은 단독으로 또는 더 큰 양식의 일부로 사용됩니다. &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; 선택기를 사용하여 활성화하십시오.</target>
        </trans-unit>
        <trans-unit id="079bfc81b016d5fdb9440e147c8f59ceacfd53ed" translate="yes" xml:space="preserve">
          <source>This directive lets you add a CSS class to an element when the link's route becomes active.</source>
          <target state="translated">이 지시문을 사용하면 링크의 경로가 활성화 될 때 CSS 클래스를 요소에 추가 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="75bdf4a08a98952e88ab0d9d8d3f69ffb18f7db5" translate="yes" xml:space="preserve">
          <source>This document contains information and resources to help you keep your Angular apps and libraries up-to-date.</source>
          <target state="translated">이 문서에는 Angular 앱과 라이브러리를 최신 상태로 유지하는 데 도움이되는 정보와 리소스가 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="5c3c465a1a031a3ba31db55cb2026597de7378a1" translate="yes" xml:space="preserve">
          <source>This document contains the practices that we follow to provide you with a leading-edge app development platform, balanced with stability. We strive to ensure that future changes are always introduced in a predictable way. We want everyone who depends on Angular to know when and how new features are added, and to be well-prepared when obsolete ones are removed.</source>
          <target state="translated">이 문서에는 안정성과 균형 잡힌 최첨단 앱 개발 플랫폼을 제공하기 위해 따르는 관행이 포함되어 있습니다. 우리는 미래의 변화가 항상 예측 가능한 방식으로 도입되도록 노력합니다. 우리는 Angular에 의존하는 모든 사람들이 언제 그리고 어떻게 새로운 기능이 추가되는지 알고, 더 이상 사용되지 않는 기능이 제거되면 잘 준비되기를 원합니다.</target>
        </trans-unit>
        <trans-unit id="5bc557b45ba44abe0921a0e64654f12154157a7c" translate="yes" xml:space="preserve">
          <source>This document explains how CLI builders integrate with the workspace configuration file, and shows how you can create your own builder.</source>
          <target state="translated">이 문서는 CLI 빌더가 작업 공간 구성 파일과 통합하는 방법을 설명하고 고유 한 빌더를 작성하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="a18d52460187370aee9da7ba825b392cfeb2488a" translate="yes" xml:space="preserve">
          <source>This document explains how to enable Angular service worker support in projects that you created with the &lt;a href=&quot;cli&quot;&gt;Angular CLI&lt;/a&gt;. It then uses a simple example to show you a service worker in action, demonstrating loading and basic caching.</source>
          <target state="translated">이 문서는 &lt;a href=&quot;cli&quot;&gt;Angular CLI로&lt;/a&gt; 생성 한 프로젝트에서 Angular 서비스 워커 지원을 활성화하는 방법을 설명합니다 . 그런 다음 간단한 예제를 사용하여로드 및 기본 캐싱을 ​​시연하는 서비스 작업자를 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="91cf023004b2aaf04380d0ea7e79d9a637aeaec2" translate="yes" xml:space="preserve">
          <source>This document refers to a unit of translatable text as &quot;text,&quot; a &quot;message&quot;, or a &quot;text message.&quot;</source>
          <target state="translated">이 문서는 번역 가능한 텍스트 단위를 &quot;텍스트&quot;, &quot;메시지&quot;또는 &quot;텍스트 메시지&quot;라고합니다.</target>
        </trans-unit>
        <trans-unit id="f12cdb59b126570dec1c8c00fc1543f0b13ae7d0" translate="yes" xml:space="preserve">
          <source>This does not use the deprecated jsdoc tag on purpose because it renders all overloads as deprecated in TSLint due to &lt;a href=&quot;https://github.com/palantir/tslint/issues/4522&quot;&gt;https://github.com/palantir/tslint/issues/4522&lt;/a&gt;.</source>
          <target state="translated">사용되지 않는 jsdoc 태그는 &lt;a href=&quot;https://github.com/palantir/tslint/issues/4522&quot;&gt;https://github.com/palantir/tslint/issues/4522&lt;/a&gt; 로 인해 TSLint에서 사용되지 않는 모든 과부하를 렌더링하기 때문에 의도적으로 사용되지 않는 jsdoc 태그를 사용하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="49942dcd9689b7ed449bd1f739e91d6c6991a659" translate="yes" xml:space="preserve">
          <source>This does the same things as the Circle CI configuration, except that Travis doesn't come with Chrome, so we use Chromium instead.</source>
          <target state="translated">Travis에 Chrome이 포함되어 있지 않다는 점을 제외하면 Circle CI 구성과 동일한 기능을 수행하므로 Chromium을 대신 사용합니다.</target>
        </trans-unit>
        <trans-unit id="7a173481108f8e08ee23eccdc0ba37f48670a382" translate="yes" xml:space="preserve">
          <source>This duration string specifies the network timeout. The network timeout is how long the Angular service worker will wait for the network to respond before using a cached response, if configured to do so. &lt;code&gt;timeout&lt;/code&gt; is a duration string, using the following unit suffixes:</source>
          <target state="translated">이 기간 문자열은 네트워크 시간 초과를 지정합니다. 네트워크 시간 초과는 캐시 된 응답을 사용하도록 구성된 경우 Angular 서비스 워커가 네트워크가 응답하기를 기다리는 시간입니다. &lt;code&gt;timeout&lt;/code&gt; 는 다음 단위 접미사를 사용하는 기간 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="148a52c96fd5321b2e9f47b1c411e3997ad1ee54" translate="yes" xml:space="preserve">
          <source>This ensures that the build and serve commands can find the configurations for specific build targets.</source>
          <target state="translated">이를 통해 build 및 serve 명령이 특정 빌드 대상의 구성을 찾을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="dd6ef74d3212dfa09ccacfec3ba04d981a0ae6bd" translate="yes" xml:space="preserve">
          <source>This error can occur if you use an expression in the &lt;code&gt;extends&lt;/code&gt; clause of a class.</source>
          <target state="translated">클래스 의 &lt;code&gt;extends&lt;/code&gt; 절 에서 표현식을 사용하는 경우이 오류가 발생할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f96ad016e893a674d5f49749d37377695df58a8c" translate="yes" xml:space="preserve">
          <source>This error often means that you haven't declared the directive &quot;x&quot; or haven't imported the NgModule to which &quot;x&quot; belongs.</source>
          <target state="translated">이 오류는 종종 지시문 &quot;x&quot;를 선언하지 않았거나 &quot;x&quot;가 속한 NgModule을 가져 오지 않았 음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="ef4ec03d4ed605a8e9e66585cd5c2453ff07a4af" translate="yes" xml:space="preserve">
          <source>This example adds a few getter methods. In a reactive form, you can always access any form control through the &lt;code&gt;get&lt;/code&gt; method on its parent group, but sometimes it's useful to define getters as shorthands for the template.</source>
          <target state="translated">이 예제는 몇 가지 getter 메소드를 추가합니다. 반응 형 양식에서는 항상 부모 그룹 의 &lt;code&gt;get&lt;/code&gt; 메소드를 통해 모든 양식 컨트롤에 액세스 할 수 있지만 때로는 getter를 템플릿의 속기로 정의하는 것이 유용합니다.</target>
        </trans-unit>
        <trans-unit id="835a254bafaad8e2e761a6f3738065e79183f666" translate="yes" xml:space="preserve">
          <source>This example adds a state transition from the &lt;code&gt;closed&lt;/code&gt; state to the &lt;code&gt;open&lt;/code&gt; state with a 0.5 second transition animation arc.</source>
          <target state="translated">이 예에서는 0.5 초 전환 애니메이션 호 를 사용하여 &lt;code&gt;closed&lt;/code&gt; 상태에서 &lt;code&gt;open&lt;/code&gt; 상태로 상태 전환을 추가합니다 .</target>
        </trans-unit>
        <trans-unit id="91b20a46620fed8511ccd3504ac47cc1854c74e2" translate="yes" xml:space="preserve">
          <source>This example applies the &lt;code&gt;SpyDirective&lt;/code&gt; to a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; in an &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt;&lt;em&gt;hero&lt;/em&gt; repeater managed by the parent &lt;code&gt;SpyComponent&lt;/code&gt;.</source>
          <target state="translated">이 예제는 &lt;code&gt;SpyDirective&lt;/code&gt; 를 상위 &lt;code&gt;SpyComponent&lt;/code&gt; 가 관리 하는 &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; &lt;em&gt; hero&lt;/em&gt; repeater 의 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 에 적용합니다 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="3dfd88d242d31d74d24a1d273231ff4e8624d83a" translate="yes" xml:space="preserve">
          <source>This example binds a &lt;code&gt;Promise&lt;/code&gt; to the view. Clicking the &lt;code&gt;&lt;a href=&quot;../router/resolve&quot;&gt;Resolve&lt;/a&gt;&lt;/code&gt; button resolves the promise.</source>
          <target state="translated">이 예제는 &lt;code&gt;Promise&lt;/code&gt; 을 뷰에 바인딩합니다 . &lt;code&gt;&lt;a href=&quot;../router/resolve&quot;&gt;Resolve&lt;/a&gt;&lt;/code&gt; 버튼을 클릭하면 약속이 해결됩니다.</target>
        </trans-unit>
        <trans-unit id="76fea2ff263dbc0e5640bda0886d27fd33ac4eb8" translate="yes" xml:space="preserve">
          <source>This example completely replaces the component's &lt;code&gt;providers&lt;/code&gt; array with a new array containing a &lt;code&gt;HeroDetailServiceSpy&lt;/code&gt;.</source>
          <target state="translated">이 예제는 구성 요소의 &lt;code&gt;providers&lt;/code&gt; 배열을 &lt;code&gt;HeroDetailServiceSpy&lt;/code&gt; 가 포함 된 새 배열로 완전히 바꿉니다 .</target>
        </trans-unit>
        <trans-unit id="b38e94209799b7cb2ad45b15b4c0f49aebeeaf6c" translate="yes" xml:space="preserve">
          <source>This example features an &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; where a user can enter a value and click a &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; that raises an event. The &lt;code&gt;&lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;&lt;/code&gt; then relays the data to the parent component.</source>
          <target state="translated">이 예에는 사용자가 값을 입력 하고 이벤트를 발생 시키는 &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; 을 클릭 할 수 있는 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 이 있습니다 . &lt;code&gt;&lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;&lt;/code&gt; 는 그 부모 구성 요소로 데이터를 중계한다.</target>
        </trans-unit>
        <trans-unit id="e3900b3c5f734c8b42b0423653ffc07e9a8c5717" translate="yes" xml:space="preserve">
          <source>This example filters the &lt;code&gt;title&lt;/code&gt; property to uppercase.</source>
          <target state="translated">이 예에서는 &lt;code&gt;title&lt;/code&gt; 속성을 대문자로 필터링합니다 .</target>
        </trans-unit>
        <trans-unit id="175ec0e7ef7252b24060674256a084243d66f30a" translate="yes" xml:space="preserve">
          <source>This example from the &lt;code&gt;HeroListComponent&lt;/code&gt; template uses three of these forms.</source>
          <target state="translated">&lt;code&gt;HeroListComponent&lt;/code&gt; 템플릿 의이 예제 는이 형식 중 세 가지를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="48f92247fb3553c5917ea007bd2c3e17c2e4d8ad" translate="yes" xml:space="preserve">
          <source>This example is so simple that it is tempting to write the &lt;code&gt;Http.get()&lt;/code&gt; inside the component itself and skip the service. In practice, however, data access rarely stays this simple. You typically need to post-process the data, add error handling, and maybe some retry logic to cope with intermittent connectivity.</source>
          <target state="translated">이 예제는 너무 단순 해서 컴포넌트 자체 내에 &lt;code&gt;Http.get()&lt;/code&gt; 을 작성 하고 서비스를 건너 뛰고 싶어 합니다. 그러나 실제로는 데이터 액세스가 이러한 단순성을 유지하는 경우는 거의 없습니다. 일반적으로 데이터를 사후 처리하고, 오류 처리를 추가하고, 간헐적 연결에 대처하기 위해 일부 재시도 로직을 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="7738f3bfb08d1f44b77915ef508354d761db0235" translate="yes" xml:space="preserve">
          <source>This example provides a state transition from &lt;code&gt;open&lt;/code&gt; to &lt;code&gt;closed&lt;/code&gt; with a one second transition between states.</source>
          <target state="translated">이 예에서 상태 천이 제공 &lt;code&gt;open&lt;/code&gt; 에 &lt;code&gt;closed&lt;/code&gt; 상태 사이의 일초와 천이한다.</target>
        </trans-unit>
        <trans-unit id="9e2fbcbc42a2d75d74a3222a5d342beb0a9c1ce0" translate="yes" xml:space="preserve">
          <source>This example recreates the heroes feature in the &quot;Services&quot; episode of the &lt;a href=&quot;../tutorial/toh-pt4&quot;&gt;Tour of Heroes tutorial&lt;/a&gt;, and you'll be copying much of the code from the .</source>
          <target state="translated">이 예제는 &lt;a href=&quot;../tutorial/toh-pt4&quot;&gt;Tour of Heroes 튜토리얼&lt;/a&gt; 의 &quot;Services&quot;에피소드에서 heroes 기능을 다시 작성하며 의 코드를 대부분 복사합니다.</target>
        </trans-unit>
        <trans-unit id="373455b46f233c304aab2070dd6730bb07e917cc" translate="yes" xml:space="preserve">
          <source>This example shows some of the most useful &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; configuration options:</source>
          <target state="translated">이 예는 가장 유용한 &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; 구성 옵션 중 일부를 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="9700001752d1ddad2bef57a54fdbab31b4d92d72" translate="yes" xml:space="preserve">
          <source>This example wires parent buttons to the child's &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;stop&lt;/code&gt; and uses interpolation to display the child's &lt;code&gt;seconds&lt;/code&gt; property.</source>
          <target state="translated">이 예제에서는 부모 버튼을 자식의 &lt;code&gt;start&lt;/code&gt; 및 &lt;code&gt;stop&lt;/code&gt; 하고 보간을 사용하여 자식의 &lt;code&gt;seconds&lt;/code&gt; 속성 을 표시합니다 .</target>
        </trans-unit>
        <trans-unit id="7de281f2ca63df5ae46cabdcc5a3f0a47f5d8df0" translate="yes" xml:space="preserve">
          <source>This example&amp;mdash;which displays &lt;strong&gt;&lt;samp&gt;FRIDAY, APRIL 15, 1988&lt;/samp&gt;&lt;/strong&gt;&amp;mdash;chains the same pipes as above, but passes in a parameter to &lt;code&gt;date&lt;/code&gt; as well.</source>
          <target state="translated">이 예 &amp;mdash; 표시 &lt;strong&gt;&lt;samp&gt;1988 년 4 월 15 일 금요일&lt;/samp&gt;&lt;/strong&gt;&amp;mdash; 위와 동일한 파이프를 연결하지만 &lt;code&gt;date&lt;/code&gt; 매개 변수를 전달 합니다.</target>
        </trans-unit>
        <trans-unit id="4820eaf9e83b02c2a47b5745671a9d1f9f915362" translate="yes" xml:space="preserve">
          <source>This examples show how an Object or a Map can be iterated by ngFor with the use of this keyvalue pipe.</source>
          <target state="translated">이 예제는이 키값 파이프를 사용하여 ngFor에서 오브젝트 또는 맵을 반복하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="d13f81c361ce43971a48c424f3851c8dbc4f0ebf" translate="yes" xml:space="preserve">
          <source>This exists to support future Ivy work and has no effect currently.</source>
          <target state="translated">이것은 미래의 아이비 작업을 지원하기 위해 존재하며 현재 효과가 없습니다.</target>
        </trans-unit>
        <trans-unit id="29df732f2a0c84758770605719258bd4b737a4b9" translate="yes" xml:space="preserve">
          <source>This field contains an array of URLs and &lt;a href=&quot;service-worker-config#glob-patterns&quot;&gt;glob-like&lt;/a&gt; URL patterns that will be matched at runtime. It can contain both negative patterns (i.e. patterns starting with &lt;code&gt;!&lt;/code&gt;) and non-negative patterns and URLs.</source>
          <target state="translated">이 필드에는 런타임에 일치하는 URL 및 &lt;a href=&quot;service-worker-config#glob-patterns&quot;&gt;glob-like&lt;/a&gt; URL 패턴 배열이 포함 됩니다. 음수 패턴 ( &lt;code&gt;!&lt;/code&gt; 로 시작하는 패턴 )과 음이 아닌 패턴 및 URL을 모두 포함 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="8a65db321c5e9974fc66318e4ba5bcd4b192ba5d" translate="yes" xml:space="preserve">
          <source>This field contains an array of asset groups, each of which defines a set of asset resources and the policy by which they are cached.</source>
          <target state="translated">이 필드에는 자산 그룹 배열이 포함되어 있으며, 각 자산 그룹은 자산 자원 세트와 이들이 캐시하는 정책을 정의합니다.</target>
        </trans-unit>
        <trans-unit id="39dca8bdfadccce3aa32a1f0f34acf9df4dfd38c" translate="yes" xml:space="preserve">
          <source>This file contains imports and functionality that is available to the entire app.</source>
          <target state="translated">이 파일에는 전체 앱에서 사용할 수있는 가져 오기 및 기능이 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="c09c8b1c3afe0b2f3e211e35dda11d6b49d046a2" translate="yes" xml:space="preserve">
          <source>This file contains options and flags that are essential for Angular applications.</source>
          <target state="translated">이 파일에는 Angular 응용 프로그램에 필수적인 옵션과 플래그가 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="7774dea1cbb9ba9a9affbe79a52ad87b124f3078" translate="yes" xml:space="preserve">
          <source>This file does the following:</source>
          <target state="translated">이 파일은 다음을 수행합니다.</target>
        </trans-unit>
        <trans-unit id="8e6fad8835e771be15a7e60de8d9f839976d92ca" translate="yes" xml:space="preserve">
          <source>This file integrity is especially important when lazy loading modules. A JS bundle may reference many lazy chunks, and the filenames of the lazy chunks are unique to the particular build of the app. If a running app at version &lt;code&gt;X&lt;/code&gt; attempts to load a lazy chunk, but the server has updated to version &lt;code&gt;X + 1&lt;/code&gt; already, the lazy loading operation will fail.</source>
          <target state="translated">이 파일 무결성은 모듈을 느리게로드 할 때 특히 중요합니다. JS 번들은 많은 지연 청크를 참조 할 수 있으며 지연 청크의 파일 이름은 앱의 특정 빌드에 고유합니다. 버전 &lt;code&gt;X&lt;/code&gt; 에서 실행중인 앱 이 지연 청크를로드하려고 시도하지만 서버가 이미 버전 &lt;code&gt;X + 1&lt;/code&gt; 업데이트 된 경우 지연로드 작업이 실패합니다.</target>
        </trans-unit>
        <trans-unit id="18dc9ff9208e9157f8adfe6cb8c2bceab30b16aa" translate="yes" xml:space="preserve">
          <source>This first implementation sets the background color of the host element to yellow.</source>
          <target state="translated">이 첫 번째 구현은 호스트 요소의 배경색을 노란색으로 설정합니다.</target>
        </trans-unit>
        <trans-unit id="fc36f6372162820e0033b4e4ebdc541bbbe324f4" translate="yes" xml:space="preserve">
          <source>This function &lt;em&gt;must&lt;/em&gt; match the form above: an arrow function of the form &lt;code&gt;() =&amp;gt; import('...').then(mod =&amp;gt; mod.MODULE)&lt;/code&gt;.</source>
          <target state="translated">이 기능 &lt;em&gt;해야&lt;/em&gt; 상술 형태 결과 : 폼의 화살표 기능 &lt;code&gt;() =&amp;gt; import('...').then(mod =&amp;gt; mod.MODULE)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4878fd2cfdcaf11685e5e72d2354cd83ec8f9724" translate="yes" xml:space="preserve">
          <source>This function is functionally the same as &lt;a href=&quot;formcontrol#setValue&quot;&gt;setValue&lt;/a&gt; at this level. It exists for symmetry with &lt;a href=&quot;formgroup#patchValue&quot;&gt;patchValue&lt;/a&gt; on &lt;code&gt;FormGroups&lt;/code&gt; and &lt;code&gt;FormArrays&lt;/code&gt;, where it does behave differently.</source>
          <target state="translated">이 기능은 이 수준에서 기능적으로 &lt;a href=&quot;formcontrol#setValue&quot;&gt;setValue&lt;/a&gt; 와 동일 합니다. 그것은과 대칭을 위해 존재 &lt;a href=&quot;formgroup#patchValue&quot;&gt;patchValue&lt;/a&gt; 에 &lt;code&gt;FormGroups&lt;/code&gt; 및 &lt;code&gt;FormArrays&lt;/code&gt; 는 다르게 행동 않습니다.</target>
        </trans-unit>
        <trans-unit id="56d3f264d77db65b5e665e640dd42a9db6e677ef" translate="yes" xml:space="preserve">
          <source>This function returns an &lt;code&gt;&lt;a href=&quot;../../../core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; decorated class that is configured to wire up the Angular and AngularJS injectors without the need to actually bootstrap a hybrid application. This makes it simpler and faster to unit test services.</source>
          <target state="translated">이 함수는 실제로 하이브리드 애플리케이션을 부트 스트랩 할 필요없이 Angular 및 AngularJS 인젝터를 연결하도록 구성된 &lt;code&gt;&lt;a href=&quot;../../../core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 장식 클래스를 리턴합니다 . 따라서 단위 테스트 서비스를보다 간단하고 빠르게 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e6acc9bce8fe23418fda41554da4f4e2de103857" translate="yes" xml:space="preserve">
          <source>This function returns an AngularJS module that is configured to wire up the AngularJS and Angular injectors without the need to actually bootstrap a hybrid application. This makes it simpler and faster to unit test services.</source>
          <target state="translated">이 함수는 실제로 하이브리드 애플리케이션을 부트 스트랩 할 필요없이 AngularJS 및 Angular 인젝터를 연결하도록 구성된 AngularJS 모듈을 리턴합니다. 따라서 단위 테스트 서비스를보다 간단하고 빠르게 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ec2de2fde95bef298a51f31a0130f6587e05afec" translate="yes" xml:space="preserve">
          <source>This functionality is only available when you have loaded the full locale data. See the &lt;a href=&quot;../../guide/i18n#i18n-pipes&quot;&gt;&quot;I18n guide&quot;&lt;/a&gt;.</source>
          <target state="translated">이 기능은 전체 로캘 데이터를로드 한 경우에만 사용할 수 있습니다. &lt;a href=&quot;../../guide/i18n#i18n-pipes&quot;&gt;&quot;I18n 안내서&quot;를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="71d1005561ab53d8d9b93d80838e0492d40b9143" translate="yes" xml:space="preserve">
          <source>This general rule can help you build a mental model of attributes and DOM properties: &lt;strong&gt;Attributes initialize DOM properties and then they are done. Property values can change; attribute values can't.&lt;/strong&gt;</source>
          <target state="translated">이 일반 규칙은 속성 및 DOM 속성의 정신 모델을 작성하는 데 도움이됩니다. &lt;strong&gt;속성은 DOM 속성을 초기화 한 다음 완료됩니다. 속성 값은 변경 될 수 있습니다. 속성 값은 할 수 없습니다.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ed51a3d987c448eabd0caaad7d11446c5f4ee98e" translate="yes" xml:space="preserve">
          <source>This generates a folder for the new component within the customer-dashboard folder and updates the feature module with the &lt;code&gt;CustomerDashboardComponent&lt;/code&gt; info:</source>
          <target state="translated">그러면 customer-dashboard 폴더 내에 새 구성 요소의 폴더가 생성되고 &lt;code&gt;CustomerDashboardComponent&lt;/code&gt; 정보로 기능 모듈이 업데이트됩니다 .</target>
        </trans-unit>
        <trans-unit id="a8ca933ae9ed34a8a06321e5395d5386f3467055" translate="yes" xml:space="preserve">
          <source>This gives users a meaningful first paint of your application that appears quickly because the browser can simply render the HTML and CSS without the need to initialize any JavaScript.</source>
          <target state="translated">브라우저는 JavaScript를 초기화 할 필요없이 HTML과 CSS를 간단히 렌더링 할 수 있기 때문에 사용자에게 애플리케이션의 의미있는 첫 번째 페인트를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="7491170871e6c27e83f7232d07de91c8f51b4dc0" translate="yes" xml:space="preserve">
          <source>This glossary lists the most prominent terms and a few less familiar ones with unusual or unexpected definitions.</source>
          <target state="translated">이 용어집에는 가장 두드러진 용어와 특이하거나 예기치 않은 정의가있는 몇 가지 덜 익숙한 용어가 나열되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="fdd0dd4255112079ec8cd2cac891a62c3bc630af" translate="yes" xml:space="preserve">
          <source>This guard returns a synchronous boolean result. If the user is logged in, it returns true and the navigation continues.</source>
          <target state="translated">이 가드는 동기식 부울 결과를 반환합니다. 사용자가 로그인 한 경우 true를 반환하고 탐색이 계속됩니다.</target>
        </trans-unit>
        <trans-unit id="71b0a76f127063119253692ead9f31153f3cf61f" translate="yes" xml:space="preserve">
          <source>This guide assumes you are already familiar with developing and building Angular applications using the &lt;a href=&quot;cli&quot;&gt;CLI&lt;/a&gt;.</source>
          <target state="translated">이 안내서는 &lt;a href=&quot;cli&quot;&gt;CLI를&lt;/a&gt; 사용하여 Angular 응용 프로그램을 개발하고 작성하는 데 이미 익숙하다고 가정합니다 .</target>
        </trans-unit>
        <trans-unit id="f91f9ca40378a30abae72457a623c7d9b92e26f1" translate="yes" xml:space="preserve">
          <source>This guide contains a summary of all Angular APIs and features that are currently deprecated.</source>
          <target state="translated">이 안내서에는 현재 사용되지 않는 모든 Angular API 및 기능이 요약되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="a03008f3c8f9dc5daf041fcc08d5096f9ec3c5aa" translate="yes" xml:space="preserve">
          <source>This guide covers the basic Angular animation features to get you started on adding Angular animations to your project.</source>
          <target state="translated">이 안내서는 프로젝트에 Angular 애니메이션을 추가하기 시작하는 기본 Angular 애니메이션 기능을 다룹니다.</target>
        </trans-unit>
        <trans-unit id="72e2d1efd7dc0408171b8a02495eccd2a194f9ee" translate="yes" xml:space="preserve">
          <source>This guide covers the router's primary features, illustrating them through the evolution of a small application that you can run live in the browser.</source>
          <target state="translated">이 안내서는 라우터의 주요 기능을 다루며 브라우저에서 실시간으로 실행할 수있는 작은 응용 프로그램의 진화를 통해이를 설명합니다.</target>
        </trans-unit>
        <trans-unit id="16b4b3c7d27b05a7a93d7585fd80da6f87695735" translate="yes" xml:space="preserve">
          <source>This guide demonstrates that scenario with an example in the Tour of Heroes theme. Imagine an outer &lt;code&gt;HeroListComponent&lt;/code&gt; that displays a list of super heroes.</source>
          <target state="translated">이 안내서는 Tour of Heroes 테마의 예제와 함께 해당 시나리오를 보여줍니다. 수퍼 영웅 목록을 표시 하는 외부 &lt;code&gt;HeroListComponent&lt;/code&gt; 를 상상해보십시오 .</target>
        </trans-unit>
        <trans-unit id="94795f12569496bcae1ed95d5adfb2856a55c12a" translate="yes" xml:space="preserve">
          <source>This guide describes &lt;strong&gt;Angular Universal&lt;/strong&gt;, a technology that renders Angular applications on the server.</source>
          <target state="translated">이 안내서는 &lt;strong&gt;Angular&lt;/strong&gt; 응용 프로그램을 서버에서 렌더링하는 기술인 &lt;strong&gt;Angular Universal에&lt;/strong&gt; 대해 설명 합니다.</target>
        </trans-unit>
        <trans-unit id="7c79df812f600818480fccaad006560ab578d116" translate="yes" xml:space="preserve">
          <source>This guide describes development of a multi-page routed sample application. Along the way, it highlights design decisions and describes key features of the router such as:</source>
          <target state="translated">이 안내서는 다중 페이지 라우트 샘플 응용 프로그램 개발에 대해 설명합니다. 그 과정에서 설계 결정을 강조하고 다음과 같은 라우터의 주요 기능을 설명합니다.</target>
        </trans-unit>
        <trans-unit id="5eaa5268ab448450e02df4dcd7d854a3b74ebfd4" translate="yes" xml:space="preserve">
          <source>This guide describes how to develop locally on your own machine. Setting up a new project on your machine is quick and easy with the &lt;a href=&quot;https://github.com/angular/quickstart&quot;&gt;QuickStart seed on github&lt;/a&gt;.</source>
          <target state="translated">이 안내서는 자신의 컴퓨터에서 로컬로 개발하는 방법을 설명합니다. &lt;a href=&quot;https://github.com/angular/quickstart&quot;&gt;github&lt;/a&gt; 의 QuickStart 시드를 사용하면 머신에서 새 프로젝트를 쉽고 빠르게 설정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a071d6040e5b884251f92cb51a3a612a4400f9c1" translate="yes" xml:space="preserve">
          <source>This guide describes some of the built-in tools for efficiently migrating AngularJS projects over to the Angular platform, one piece at a time. It is very similar to &lt;a href=&quot;upgrade&quot;&gt;Upgrading from AngularJS&lt;/a&gt; with the exception that this one uses the &lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule()&lt;/a&gt; helper function instead of the &lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt; class. This affects how the app is bootstrapped and how change detection is propagated between the two frameworks. It allows you to upgrade incrementally while improving the speed of your hybrid apps and leveraging the latest of Angular in AngularJS apps early in the process of upgrading.</source>
          <target state="translated">이 안내서는 AngularJS 프로젝트를 한 번에 하나씩 Angular 플랫폼으로 효율적으로 마이그레이션하기위한 몇 가지 기본 제공 도구를 설명합니다. &lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt; 대신 &lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule ()&lt;/a&gt; 도우미 함수를 사용한다는 점을 제외하면 &lt;a href=&quot;upgrade&quot;&gt;AngularJS&lt;/a&gt; 에서 업그레이드 와 매우 유사 합니다. 클래스 . 이는 앱이 부트 스트랩되는 방식과 두 프레임 워크간에 변경 감지가 전파되는 방식에 영향을줍니다. 하이브리드 앱의 속도를 향상시키고 업그레이드 프로세스 초기에 Angular의 최신 AngularJS 앱을 활용하면서 점진적으로 업그레이드 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="52f91de3b44e77776bb5d72dda1262736b0f2d6c" translate="yes" xml:space="preserve">
          <source>This guide explains how to build and test Angular apps with Bazel.</source>
          <target state="translated">이 가이드는 Bazel을 사용하여 Angular 앱을 빌드하고 테스트하는 방법을 설명합니다.</target>
        </trans-unit>
        <trans-unit id="a7f2364975bf639296fbad2e6ccfbf1dc9b2ff63" translate="yes" xml:space="preserve">
          <source>This guide explains how to set up your environment for Angular development using the &lt;a href=&quot;cli&quot;&gt;Angular CLI tool&lt;/a&gt;. It includes information about prerequisites, installing the CLI, creating an initial workspace and starter app, and running that app locally to verify your setup.</source>
          <target state="translated">이 안내서는 &lt;a href=&quot;cli&quot;&gt;Angular CLI 도구를&lt;/a&gt; 사용하여 Angular 개발을위한 환경을 설정하는 방법을 설명합니다 . 사전 설치 소프트웨어, CLI 설치, 초기 작업 공간 및 스타터 앱 작성 및 해당 앱을 로컬로 실행하여 설정을 확인하는 데 대한 정보가 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="e4e5dc8be1da9c2744ee3e6ff19277fa157b7049" translate="yes" xml:space="preserve">
          <source>This guide explains how to specify metadata and apply available compiler options to compile your applications efficiently using the AOT compiler.</source>
          <target state="translated">이 안내서는 메타 데이터를 지정하고 사용 가능한 컴파일러 옵션을 적용하여 AOT 컴파일러를 사용하여 애플리케이션을 효율적으로 컴파일하는 방법을 설명합니다.</target>
        </trans-unit>
        <trans-unit id="e8e0ddc6e4a1bac092793252db146528b491a1a7" translate="yes" xml:space="preserve">
          <source>This guide follows that approach. It has a &lt;code&gt;&lt;a href=&quot;../api/common/nglocalelocalization#locale&quot;&gt;locale&lt;/a&gt;&lt;/code&gt; folder under &lt;code&gt;src/&lt;/code&gt;. Assets within that folder have a filename extension that matches their associated locale.</source>
          <target state="translated">이 가이드는 이러한 접근 방식을 따릅니다. 그것은이 &lt;code&gt;&lt;a href=&quot;../api/common/nglocalelocalization#locale&quot;&gt;locale&lt;/a&gt;&lt;/code&gt; 에서 폴더 &lt;code&gt;src/&lt;/code&gt; . 해당 폴더 내의 자산은 파일 이름 확장자가 관련 로케일과 일치합니다.</target>
        </trans-unit>
        <trans-unit id="a4fe0eebc6c53dfd8ba7ae172b29d6085d11576f" translate="yes" xml:space="preserve">
          <source>This guide helps you transition from AngularJS to Angular by mapping AngularJS syntax to the equivalent Angular syntax.</source>
          <target state="translated">이 안내서는 AngularJS 구문을 해당 Angular 구문에 매핑하여 AngularJS에서 Angular로 전환하는 데 도움이됩니다.</target>
        </trans-unit>
        <trans-unit id="8b1d6ce9f824c1b57c26e8b4535de072da1382f6" translate="yes" xml:space="preserve">
          <source>This guide is a &lt;em&gt;living document&lt;/em&gt;; it changes over time. We strive for consistency to the extent feasible, but you may find parts of our documentation that don't match this style guide. When in doubt, &lt;strong&gt;follow this guide rather than imitating existing documents.&lt;/strong&gt;</source>
          <target state="translated">이 안내서는 &lt;em&gt;살아있는 문서입니다&lt;/em&gt; . 시간이 지남에 따라 변경됩니다. 가능한 범위 내에서 일관성을 유지하려고 노력하지만이 스타일 가이드와 일치하지 않는 설명서의 일부를 찾을 수 있습니다. 의심 &lt;strong&gt;스러운 경우 기존 문서를 모방하지 말고이 안내서를 따르십시오.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7b86a88184ea70d17effff794189dd4cb85c357f" translate="yes" xml:space="preserve">
          <source>This guide looks at how Angular manipulates the DOM with &lt;strong&gt;structural directives&lt;/strong&gt; and how you can write your own structural directives to do the same thing.</source>
          <target state="translated">이 안내서에서는 Angular가 &lt;strong&gt;구조적 지시문으로&lt;/strong&gt; DOM을 조작하는 방법과 동일한 작업을 수행하기 위해 고유 한 구조적 지시문을 작성할 수있는 방법을 살펴 봅니다.</target>
        </trans-unit>
        <trans-unit id="593d82739fc5c50f931f13f1ea5af12b64068cec" translate="yes" xml:space="preserve">
          <source>This guide offers tips and techniques for unit and integration testing Angular applications.</source>
          <target state="translated">이 안내서는 각도 응용 프로그램의 단위 및 통합 테스트를위한 팁과 기술을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="c0d6e75bcf91e32b2e66ca76df8b63da387d1f38" translate="yes" xml:space="preserve">
          <source>This guide proceeds in phases, marked by milestones, starting from a simple two-pager and building toward a modular, multi-view design with child routes.</source>
          <target state="translated">이 가이드는 간단한 2 페이지에서 시작하여 하위 경로가 포함 된 모듈 식 멀티 뷰 디자인을 구축하는 단계로 마일스톤으로 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="d3c69f9ce0aa91fc4ff28ea4156ea22eb64b216f" translate="yes" xml:space="preserve">
          <source>This guide provides information to help you decide which type of form works best for your situation. It introduces the common building blocks used by both approaches. It also summarizes the key differences between the two approaches, and demonstrates those differences in the context of setup, data flow, and testing.</source>
          <target state="translated">이 안내서는 상황에 가장 적합한 양식 유형을 결정하는 데 도움이되는 정보를 제공합니다. 두 가지 방법으로 사용되는 공통 빌딩 블록을 소개합니다. 또한 두 가지 접근 방식의 주요 차이점을 요약하고 설정, 데이터 흐름 및 테스트와 관련된 차이점을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="5d34585a93f67fec9f496e464bff52a80a3a9cbe" translate="yes" xml:space="preserve">
          <source>This guide uses the StackBlitz Generator to show you a ready-made, simple application that you can examine and play with interactively. In actual development you will typically use the &lt;a href=&quot;guide/glossary#command-line-interface-cli&quot;&gt;Angular CLI&lt;/a&gt;, a powerful command-line tool that lets you generate and modify applications. For more information, see the &lt;a href=&quot;https://angular.io/cli&quot;&gt;CLI Overview&lt;/a&gt;.</source>
          <target state="translated">이 안내서는 StackBlitz Generator를 사용하여 대화식으로 검토하고 사용할 수있는 기성품, 간단한 응용 프로그램을 보여줍니다. 실제 개발에서는 일반적으로 응용 프로그램을 생성하고 수정할 수있는 강력한 명령 줄 도구 인 &lt;a href=&quot;guide/glossary#command-line-interface-cli&quot;&gt;Angular CLI&lt;/a&gt; 를 사용합니다. 자세한 정보는 &lt;a href=&quot;https://angular.io/cli&quot;&gt;CLI 개요를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="e586281684b3e248038b701f36893a54ff5a55bc" translate="yes" xml:space="preserve">
          <source>This guide won't repeat how to &lt;em&gt;use&lt;/em&gt; them. But it does explain &lt;em&gt;how they work&lt;/em&gt; and how to &lt;a href=&quot;structural-directives#unless&quot;&gt;write your own&lt;/a&gt; structural directive.</source>
          <target state="translated">이 가이드는 방법을 반복하지 않을 것이다 &lt;em&gt;사용&lt;/em&gt; 을. 그러나 그것은 &lt;em&gt;그들이 어떻게 작동&lt;/em&gt; 하고 어떻게 &lt;a href=&quot;structural-directives#unless&quot;&gt;자신&lt;/a&gt; 을 작성 하는지 설명 &lt;em&gt;합니다&lt;/em&gt; 구조적 지시문 .</target>
        </trans-unit>
        <trans-unit id="051838d2f6789f70fb2f89d0d3b7b55f2fd66a1e" translate="yes" xml:space="preserve">
          <source>This has been deprecated for a few reasons. First, developers have found this pattern confusing. It seems like the actual &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; directive is being used, but in fact it's an input/output property named &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; on the reactive form directive that simply approximates (some of) its behavior. Specifically, it allows getting/setting the value and intercepting value events. However, some of &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt;'s other features - like delaying updates with&lt;code&gt;ngModelOptions&lt;/code&gt; or exporting the directive - simply don't work, which has understandably caused some confusion.</source>
          <target state="translated">몇 가지 이유로 더 이상 사용되지 않습니다. 먼저, 개발자들은이 패턴이 혼란 스러웠습니다. 실제 &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; 지시문이 사용되는 것처럼 보이지만 실제로 는 반응 양식 지시문에서 동작의 근사치에 가까운 &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; 이라는 입력 / 출력 속성 입니다. 특히 값을 가져 오거나 설정하고 값 이벤트를 가로 챌 수 있습니다. 그러나 &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; Options로 업데이트 지연 또는 지시문 내보내기 와 같은 ngModel 의 다른 기능 중 일부는 작동하지 않으므로 이해하기 &lt;code&gt;ngModelOptions&lt;/code&gt; 있습니다.</target>
        </trans-unit>
        <trans-unit id="bb14c528bca95d7e4e8b5c0e75434cfae54a895b" translate="yes" xml:space="preserve">
          <source>This has been deprecated to keep selectors consistent with other core Angular selectors, as element selectors are typically written in kebab-case.</source>
          <target state="translated">요소 선택기는 일반적으로 케밥 케이스로 작성되므로 선택기는 다른 핵심 각도 선택기와 일치하도록 선택되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="1095f7e1edc68ff18dd9e80137271b101bd86c29" translate="yes" xml:space="preserve">
          <source>This helper class should be used as a base class for creating Angular directives that wrap AngularJS components that need to be &quot;upgraded&quot;.</source>
          <target state="translated">이 헬퍼 클래스는 &quot;업그레이드&quot;되어야하는 AngularJS 구성 요소를 랩핑하는 Angular 지시문을 작성하기위한 기본 클래스로 사용되어야합니다.</target>
        </trans-unit>
        <trans-unit id="4a9910a470680f461d5e2a2614c8675ebcbbb9c4" translate="yes" xml:space="preserve">
          <source>This helper function returns a factory function that provides access to the Angular service identified by the &lt;code&gt;token&lt;/code&gt; parameter.</source>
          <target state="translated">이 도우미 함수는 &lt;code&gt;token&lt;/code&gt; 매개 변수로 식별되는 Angular 서비스에 대한 액세스를 제공하는 팩토리 함수를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="3feef579a17c24eb18bbf65e912c0af25f671bc1" translate="yes" xml:space="preserve">
          <source>This helper function returns a factory function to be used for registering an AngularJS wrapper directive for &quot;downgrading&quot; an Angular component.</source>
          <target state="translated">이 도우미 함수는 Angular 구성 요소를 &quot;다운 그레이드&quot;하기 위해 AngularJS 래퍼 지시문을 등록하는 데 사용되는 팩토리 함수를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="47aa8d05f2d4f3b4a736e0ea1dd586657dd4775e" translate="yes" xml:space="preserve">
          <source>This helper is for testing services not Components. For Component testing you must still bootstrap a hybrid app. See &lt;code&gt;&lt;a href=&quot;../upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;&lt;/code&gt; for more information.</source>
          <target state="translated">이 도우미는 구성 요소가 아닌 서비스 테스트에 사용됩니다. 구성 요소 테스트의 경우 여전히 하이브리드 앱을 부트 스트랩해야합니다. 자세한 내용은 &lt;code&gt;&lt;a href=&quot;../upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;../downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;&lt;/code&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="4eef553362f7318dd361d3d0f6a5760f3585a142" translate="yes" xml:space="preserve">
          <source>This helper is for testing services not components. For Component testing you must still bootstrap a hybrid app. See &lt;code&gt;&lt;a href=&quot;../upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;&lt;/code&gt; for more information.</source>
          <target state="translated">이 도우미는 구성 요소가 아닌 서비스를 테스트하기위한 것입니다. 컴포넌트 테스트의 경우 여전히 하이브리드 앱을 부트 스트랩해야합니다. 자세한 내용은 &lt;code&gt;&lt;a href=&quot;../upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;../downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;&lt;/code&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="9b9ba1412b83f44b56ecd7943b94f7e6d7ad49fa" translate="yes" xml:space="preserve">
          <source>This helper's observable emits the &lt;code&gt;data&lt;/code&gt; value in the next turn of the JavaScript engine.</source>
          <target state="translated">이 헬퍼의 Observable은 JavaScript 엔진의 다음 차례에 &lt;code&gt;data&lt;/code&gt; 값을 내 보냅니다.</target>
        </trans-unit>
        <trans-unit id="326ed6100992d8304a4c4512b4ef1b97e697f367" translate="yes" xml:space="preserve">
          <source>This highlight directive has a single customizable property. In a real app, it may need more.</source>
          <target state="translated">이 강조 지시문에는 단일 사용자 정의 가능 특성이 있습니다. 실제 앱에서는 더 필요할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a8424043c89606ac692d26ae91eabcf058b3b255" translate="yes" xml:space="preserve">
          <source>This implies that the component bindings will always follow the semantics of the instantiation framework.</source>
          <target state="translated">이는 컴포넌트 바인딩이 항상 인스턴스화 프레임 워크의 시맨틱을 따릅니다.</target>
        </trans-unit>
        <trans-unit id="13526051beab5c2cb1409738f1705df68acfffb7" translate="yes" xml:space="preserve">
          <source>This indicates the last time the service worker checked for a new version, or update, of the app. &lt;code&gt;never&lt;/code&gt; indicates that the service worker has never checked for an update.</source>
          <target state="translated">이는 서비스 워커가 마지막으로 앱의 새 버전 또는 업데이트를 확인한 시간을 나타냅니다. 서비스 직원이 업데이트를 확인한 &lt;code&gt;never&lt;/code&gt; 없음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="c6866fb4d3be58dfa31c9fcb707a31824d7cdb10" translate="yes" xml:space="preserve">
          <source>This initial value never changes.</source>
          <target state="translated">이 초기 값은 변하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="8fdbd80f7713591b405acb108f078354e86bdf7e" translate="yes" xml:space="preserve">
          <source>This installs the &lt;code&gt;schematics&lt;/code&gt; executable, which you can use to create a new schematics &lt;a href=&quot;glossary#collection&quot;&gt;collection&lt;/a&gt; with an initial named schematic. The collection folder is a workspace for schematics. You can also use the &lt;code&gt;schematics&lt;/code&gt; command to add a new schematic to an existing collection, or extend an existing schematic.</source>
          <target state="translated">그러면 &lt;code&gt;schematics&lt;/code&gt; 실행 파일 이 설치 되며, 초기 회로도를 사용하여 새 회로도 &lt;a href=&quot;glossary#collection&quot;&gt;컬렉션&lt;/a&gt; 을 만드는 데 사용할 수 있습니다 . 컬렉션 폴더는 회로도를위한 작업 공간입니다. 또한 &lt;code&gt;schematics&lt;/code&gt; 명령을 사용하여 기존 컬렉션에 새 회로도를 추가하거나 기존 회로도를 확장 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f4f376c92f4d721a1cb60edfb651e536ba4f5e3e" translate="yes" xml:space="preserve">
          <source>This installs the &lt;code&gt;schematics&lt;/code&gt; executable, which you can use to create a new schematics collection in its own project folder, add a new schematic to an existing collection, or extend an existing schematic.</source>
          <target state="translated">그러면 자체 프로젝트 폴더에 새 회로도 컬렉션을 생성하거나 기존 컬렉션에 새 회로도를 추가하거나 기존 회로도를 확장하는 데 사용할 수 있는 &lt;code&gt;schematics&lt;/code&gt; 실행 파일 이 설치됩니다 .</target>
        </trans-unit>
        <trans-unit id="b28a949d24ede3e30d4f2425cea4c004accffb6c" translate="yes" xml:space="preserve">
          <source>This interface allows access to the underlying &lt;code&gt;&lt;a href=&quot;../httprequest&quot;&gt;HttpRequest&lt;/a&gt;&lt;/code&gt;, and allows responding with &lt;code&gt;&lt;a href=&quot;../httpevent&quot;&gt;HttpEvent&lt;/a&gt;&lt;/code&gt;s or &lt;code&gt;&lt;a href=&quot;../httperrorresponse&quot;&gt;HttpErrorResponse&lt;/a&gt;&lt;/code&gt;s.</source>
          <target state="translated">이 인터페이스는 기본 &lt;code&gt;&lt;a href=&quot;../httprequest&quot;&gt;HttpRequest&lt;/a&gt;&lt;/code&gt; 에 대한 액세스를 허용하고 &lt;code&gt;&lt;a href=&quot;../httpevent&quot;&gt;HttpEvent&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;../httperrorresponse&quot;&gt;HttpErrorResponse&lt;/a&gt;&lt;/code&gt; 로 응답 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f14b1937cf79a6a85c55fe443bf06ded14c39fe9" translate="yes" xml:space="preserve">
          <source>This is a &lt;em&gt;cold&lt;/em&gt; observable that waits three frames and then emits an error, The hash (&lt;code&gt;#&lt;/code&gt;) indicates the timing of the error that is specified in the third argument. The second argument is null because the observable never emits a value.</source>
          <target state="translated">이것은 3 개의 프레임을 기다린 다음 오류를 발생시키는 &lt;em&gt;콜드&lt;/em&gt; 옵저버 블입니다. 해시 ( &lt;code&gt;#&lt;/code&gt; )는 세 번째 인수에 지정된 오류의 타이밍을 나타냅니다. observable이 값을 생성하지 않으므로 두 번째 인수는 null입니다.</target>
        </trans-unit>
        <trans-unit id="325c383689dc505c167a4efdf3ff1bfffcda2dac" translate="yes" xml:space="preserve">
          <source>This is a common middleware pattern found in frameworks such as Express.js.</source>
          <target state="translated">이것은 Express.js와 같은 프레임 워크에서 발견되는 일반적인 미들웨어 패턴입니다.</target>
        </trans-unit>
        <trans-unit id="8a0404a183044b9e9c6ffe40bc631a912f26a05f" translate="yes" xml:space="preserve">
          <source>This is a considerable effort and it often isn't worth it, especially since you are in the process of moving your code to Angular. Instead, declare &lt;code&gt;angular&lt;/code&gt; as &lt;code&gt;angular.IAngularStatic&lt;/code&gt; to indicate it is a global variable and still have full typing support.</source>
          <target state="translated">이것은 상당한 노력이며 특히 코드를 Angular로 옮기는 과정에 있기 때문에 종종 가치가 없습니다. 대신 &lt;code&gt;angular&lt;/code&gt; 를 &lt;code&gt;angular.IAngularStatic&lt;/code&gt; 으로 선언 하여 전역 변수이고 여전히 완전한 타이핑 지원을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="ebfc1fc3ae76182d341bfaf13595ca3c04aee718" translate="yes" xml:space="preserve">
          <source>This is a general purpose guard&amp;mdash;you can imagine other features that require authenticated users&amp;mdash;so you generate an &lt;code&gt;AuthGuard&lt;/code&gt; in the &lt;code&gt;auth&lt;/code&gt; folder.</source>
          <target state="translated">당신은 생성이 범용 가드 - 당신이 인증을 필요로하는 다른 기능 상상할 수있는 것입니다 사용자를-있도록 &lt;code&gt;AuthGuard&lt;/code&gt; 에서 &lt;code&gt;auth&lt;/code&gt; 폴더에 있습니다.</target>
        </trans-unit>
        <trans-unit id="745624b6290490997a074676dc013e0ad3433575" translate="yes" xml:space="preserve">
          <source>This is a good candidate for an impure pipe because the &lt;code&gt;transform&lt;/code&gt; function is trivial and fast.</source>
          <target state="translated">&lt;code&gt;transform&lt;/code&gt; 기능이 사소하고 빠르기 때문에 불순한 파이프에 적합합니다 .</target>
        </trans-unit>
        <trans-unit id="5b9b9bda285209856e8b9f18df0fc5414bc4d50e" translate="yes" xml:space="preserve">
          <source>This is a good way to quickly get TypeScript features, such as type checking and autocomplete support, for you custom element. But it can get cumbersome if you need it in several places, because you have to cast the return type on every occurrence.</source>
          <target state="translated">이것은 사용자 정의 요소에 대한 유형 검사 및 자동 완성 지원과 같은 TypeScript 기능을 신속하게 얻는 좋은 방법입니다. 그러나 여러 곳에서 필요한 경우 반환 유형을 캐스팅해야하기 때문에 번거로울 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6520fb09eb7f64f65fec620f22a827ad129c5147" translate="yes" xml:space="preserve">
          <source>This is a nonissue in Angular because ES 2015 modules handle the namespacing for you.</source>
          <target state="translated">ES 2015 모듈이 네임 스페이스를 처리하므로 Angular에서는 문제가되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="b1360d42910235d11c8da57171809f03949b89f4" translate="yes" xml:space="preserve">
          <source>This is a tree of activated route snapshots. Every node in this tree knows about the &quot;consumed&quot; URL segments, the extracted parameters, and the resolved data.</source>
          <target state="translated">이것은 활성화 된 라우트 스냅 샷의 트리입니다. 이 트리의 모든 노드는 &quot;소비 된&quot;URL 세그먼트, 추출 된 매개 변수 및 분석 된 데이터에 대해 알고 있습니다.</target>
        </trans-unit>
        <trans-unit id="308f6f1ffa549dea73f1268332bb7efda867f32b" translate="yes" xml:space="preserve">
          <source>This is a typical &quot;&lt;em&gt;service-in-service&lt;/em&gt;&quot; scenario: you inject the &lt;code&gt;MessageService&lt;/code&gt; into the &lt;code&gt;HeroService&lt;/code&gt; which is injected into the &lt;code&gt;HeroesComponent&lt;/code&gt;.</source>
          <target state="translated">이것은 전형적인 &quot;입니다 &lt;em&gt;서비스의 서비스&lt;/em&gt; &quot;시나리오 : 당신을 주입 &lt;code&gt;MessageService&lt;/code&gt; 에 &lt;code&gt;HeroService&lt;/code&gt; 에 주입 &lt;code&gt;HeroesComponent&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="cd1783005dfb776d1af2f04f6577b41eaa1ff956" translate="yes" xml:space="preserve">
          <source>This is a very simple example, but the use of a schema for validation can be very powerful. For more information, see the &lt;a href=&quot;http://json-schema.org/&quot;&gt;JSON schemas website&lt;/a&gt;.</source>
          <target state="translated">이것은 매우 간단한 예이지만 유효성 검사를 위해 스키마를 사용하는 것은 매우 강력 할 수 있습니다. 자세한 정보는 &lt;a href=&quot;http://json-schema.org/&quot;&gt;JSON 스키마 웹 사이트를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="98e22f6dda8c73c831d901b714a07d0b7689f227" translate="yes" xml:space="preserve">
          <source>This is actually a convenience method, implemented as &lt;code&gt;fixture.debugElement.nativeElement&lt;/code&gt;.</source>
          <target state="translated">실제로는 &lt;code&gt;fixture.debugElement.nativeElement&lt;/code&gt; 로 구현 된 편리한 메소드 입니다.</target>
        </trans-unit>
        <trans-unit id="dd436a739a02b80b45abdb0c1ad5a566028baa06" translate="yes" xml:space="preserve">
          <source>This is actually a pretty good starting point. The code uses the AngularJS 1.5 component API and the organization follows the &lt;a href=&quot;https://github.com/johnpapa/angular-styleguide/blob/master/a1/README.md&quot;&gt;AngularJS Style Guide&lt;/a&gt;, which is an important &lt;a href=&quot;upgrade#follow-the-angular-styleguide&quot;&gt;preparation step&lt;/a&gt; before a successful upgrade.</source>
          <target state="translated">이것은 실제로 꽤 좋은 출발점입니다. 이 코드는 AngularJS 1.5 구성 요소 API를 사용하며 조직은 &lt;a href=&quot;https://github.com/johnpapa/angular-styleguide/blob/master/a1/README.md&quot;&gt;AngularJS 스타일 가이드를&lt;/a&gt; 따르며 , 이는 성공적인 업그레이드 전에 중요한 &lt;a href=&quot;upgrade#follow-the-angular-styleguide&quot;&gt;준비 단계&lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="28fd6969c6d6369ceb7285ab5a770ea3315ffab8" translate="yes" xml:space="preserve">
          <source>This is an example of Angular's &lt;a href=&quot;../guide/template-syntax#event-binding&quot;&gt;event binding&lt;/a&gt; syntax.</source>
          <target state="translated">이것은 Angular의 &lt;a href=&quot;../guide/template-syntax#event-binding&quot;&gt;이벤트 바인딩&lt;/a&gt; 구문 의 예입니다 .</target>
        </trans-unit>
        <trans-unit id="edb830bd9f42a141071913f2de5f0ee10c46edce" translate="yes" xml:space="preserve">
          <source>This is an interim code sample that will allow you to provide and use the &lt;code&gt;HeroService&lt;/code&gt;. At this point, the code will differ from the &lt;code&gt;HeroService&lt;/code&gt; in the &lt;a href=&quot;toh-pt4#final-code-review&quot;&gt;&quot;final code review&quot;&lt;/a&gt;.</source>
          <target state="translated">이것은 &lt;code&gt;HeroService&lt;/code&gt; 를 제공하고 사용할 수있는 임시 코드 샘플입니다 . 이 시점에서 코드는 &lt;a href=&quot;toh-pt4#final-code-review&quot;&gt;&quot;최종 코드 검토&quot;&lt;/a&gt; 에서 &lt;code&gt;HeroService&lt;/code&gt; 와 다릅니다 .</target>
        </trans-unit>
        <trans-unit id="b2b55aa5e71e846d741afa9a4891157e8f09cdfb" translate="yes" xml:space="preserve">
          <source>This is an opaque value the router will give to a custom route reuse strategy to store and retrieve later on.</source>
          <target state="translated">이는 라우터가 나중에 사용자 지정 경로 재사용 전략에 저장하고 검색 할 수있는 불투명 한 값입니다.</target>
        </trans-unit>
        <trans-unit id="47187f9c60a312936c257bcbf674f7a846c9c3b7" translate="yes" xml:space="preserve">
          <source>This is disagreeable. The word, &lt;code&gt;appHighlight&lt;/code&gt;, is a terrible property name and it doesn't convey the property's intent.</source>
          <target state="translated">이것은 동의 할 수 없습니다. &lt;code&gt;appHighlight&lt;/code&gt; 라는 단어 는 끔찍한 속성 이름이며 속성의 의도를 전달하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="402dd3cc505c92b3ebc8041d5e0f5ce4dca64317" translate="yes" xml:space="preserve">
          <source>This is especially useful when child components are defined with an empty path string, as in the following example. With this configuration, navigating to '/parent/10' creates the main child and aux components.</source>
          <target state="translated">다음 예제와 같이 하위 구성 요소가 빈 경로 문자열로 정의 된 경우 특히 유용합니다. 이 구성에서 '/ parent / 10'으로 이동하면 기본 하위 및 보조 구성 요소가 작성됩니다.</target>
        </trans-unit>
        <trans-unit id="f0a8eee1520084e40ddb251d4ee70816b2810239" translate="yes" xml:space="preserve">
          <source>This is how you associate a template with logic, which is defined in the component class.</source>
          <target state="translated">이것이 컴포넌트 클래스에 정의 된 로직과 템플리트를 연관시키는 방법입니다.</target>
        </trans-unit>
        <trans-unit id="3a2de92bdd97f6fbeeca5fdc9ee29a195958c537" translate="yes" xml:space="preserve">
          <source>This is illustrated in the following image, which displays the logging date.</source>
          <target state="translated">로깅 날짜를 표시하는 다음 이미지에 설명되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="4461ea0ba25396c618a6f8a0d7132ba6f60a3420" translate="yes" xml:space="preserve">
          <source>This is manifestly more complicated than &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; and rightly so. The &lt;code&gt;NgFor&lt;/code&gt; directive has more features, both required and optional, than the &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; shown in this guide. At minimum &lt;code&gt;NgFor&lt;/code&gt; needs a looping variable (&lt;code&gt;let hero&lt;/code&gt;) and a list (&lt;code&gt;heroes&lt;/code&gt;).</source>
          <target state="translated">이것은 &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; 보다 분명히 복잡 합니다. &lt;code&gt;NgFor&lt;/code&gt; 의 지시어는 더 많은 기능을 가지고, 모두보다, 필수 및 선택 &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; 는 이 안내서에 나와있는. &lt;code&gt;NgFor&lt;/code&gt; 는 최소한 루핑 변수 ( &lt;code&gt;let hero&lt;/code&gt; )와 목록 ( &lt;code&gt;heroes&lt;/code&gt; )이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="7efe4c9363e221388c4cd38d8c3a512cea782501" translate="yes" xml:space="preserve">
          <source>This is often the case with &lt;em&gt;routing components&lt;/em&gt;. As a rule you test the component, not the router, and care only if the component navigates with the right address under the given conditions.</source>
          <target state="translated">&lt;em&gt;라우팅 구성 요소&lt;/em&gt; 의 경우가 종종 있습니다. 일반적으로 라우터가 아닌 구성 요소를 테스트하고 지정된 조건에서 구성 요소가 올바른 주소로 탐색하는 경우에만주의하십시오.</target>
        </trans-unit>
        <trans-unit id="60412eee3362861bf6dd3a41df31f62ad91b66a4" translate="yes" xml:space="preserve">
          <source>This is one of the three fundamental building blocks of Angular forms, along with &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt;. It extends the &lt;code&gt;&lt;a href=&quot;abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;&lt;/code&gt; class that implements most of the base functionality for accessing the value, validation status, user interactions and events.</source>
          <target state="translated">이것은 &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; 와 함께 Angular 양식의 세 가지 기본 구성 요소 중 하나입니다 . 값, 유효성 검사 상태, 사용자 상호 작용 및 이벤트에 액세스하기위한 대부분의 기본 기능을 구현 하는 &lt;code&gt;&lt;a href=&quot;abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;&lt;/code&gt; 클래스를 확장 합니다.</target>
        </trans-unit>
        <trans-unit id="51b5158af868b9258e387116060b9c47ff8fb973" translate="yes" xml:space="preserve">
          <source>This is similar to the phone list component. The new wrinkle is the &lt;code&gt;RouteParams&lt;/code&gt; type annotation that identifies the &lt;code&gt;routeParams&lt;/code&gt; dependency.</source>
          <target state="translated">이것은 전화 목록 구성 요소와 유사합니다. 새로운 주름은이다 &lt;code&gt;RouteParams&lt;/code&gt; 유형 약어가 식별합니다 &lt;code&gt;routeParams&lt;/code&gt; 의 의존성.</target>
        </trans-unit>
        <trans-unit id="804a4031c3f14f499869d2204177c75dee70978b" translate="yes" xml:space="preserve">
          <source>This is the SHA1 hash of the most up-to-date version of the app that the service worker knows about.</source>
          <target state="translated">이것은 서비스 워커가 알고있는 최신 버전의 앱 SHA1 해시입니다.</target>
        </trans-unit>
        <trans-unit id="16525e697531723027c408ae314d617a3cee22fa" translate="yes" xml:space="preserve">
          <source>This is the base class for &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; 의 기본 클래스입니다 .</target>
        </trans-unit>
        <trans-unit id="32e4434471515868a1b3925d1547dbdde41ab113" translate="yes" xml:space="preserve">
          <source>This is the base class for &lt;code&gt;&lt;a href=&quot;forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;forms/formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;forms/formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; 의 기본 클래스입니다 .</target>
        </trans-unit>
        <trans-unit id="09772e314d49341cf87eb2642be70a9dc5fc7d9f" translate="yes" xml:space="preserve">
          <source>This is the default option.</source>
          <target state="translated">이것이 기본 옵션입니다.</target>
        </trans-unit>
        <trans-unit id="2f800de1b08868e8b8e49cce1d56cd86eef0162b" translate="yes" xml:space="preserve">
          <source>This is the inner &lt;code&gt;&lt;a href=&quot;templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">이것은 내부 &lt;code&gt;&lt;a href=&quot;templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt; 입니다 .</target>
        </trans-unit>
        <trans-unit id="cff98b359039fbd0f2a88788c0ca5a17c544f06f" translate="yes" xml:space="preserve">
          <source>This is the outer &lt;code&gt;&lt;a href=&quot;templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">이것은 외부 &lt;code&gt;&lt;a href=&quot;templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt; 입니다 .</target>
        </trans-unit>
        <trans-unit id="6fbcbb942159ed1a22b254df114719bad20d47a4" translate="yes" xml:space="preserve">
          <source>This is the perfect infiltration job for a directive. The heroes will never know they're being watched.</source>
          <target state="translated">이것은 지침에 대한 완벽한 침투 작업입니다. 영웅들은 그들이보고 있다는 것을 결코 알지 못할 것입니다.</target>
        </trans-unit>
        <trans-unit id="4ccba53d17df213bee27c394101fd3424e3c0b6f" translate="yes" xml:space="preserve">
          <source>This is the place to free resources that won't be garbage collected automatically. Unsubscribe from Observables and DOM events. Stop interval timers. Unregister all callbacks that this directive registered with global or application services. You risk memory leaks if you neglect to do so.</source>
          <target state="translated">가비지 수집되지 않는 리소스를 자동으로 확보 할 수있는 곳입니다. Observables 및 DOM 이벤트를 구독 취소하십시오. 인터벌 타이머를 중지하십시오. 이 지시문이 글로벌 또는 애플리케이션 서비스에 등록한 모든 콜백을 등록 취소하십시오. 그렇게하지 않으면 메모리 누수 위험이 있습니다.</target>
        </trans-unit>
        <trans-unit id="87a555dd35ff17530be3a1fe3b938e47130474eb" translate="yes" xml:space="preserve">
          <source>This is the simplest production-ready deployment of your application.</source>
          <target state="translated">이것은 가장 간단한 프로덕션 용 배포 응용 프로그램입니다.</target>
        </trans-unit>
        <trans-unit id="c58e06956699ce3b5d0d19719918b6ae26cfc2f3" translate="yes" xml:space="preserve">
          <source>This is the time to notify another part of the application that the component is going away.</source>
          <target state="translated">지금은 애플리케이션의 다른 부분에 구성 요소가 사라지고 있음을 알리는 시간입니다.</target>
        </trans-unit>
        <trans-unit id="5d3cebde8a1c748058ff6feaf6d6fd7fffbd33c4" translate="yes" xml:space="preserve">
          <source>This is used to parse the response appropriately before returning it to the requestee.</source>
          <target state="translated">요청자에게 응답을 보내기 전에 응답을 적절하게 구문 분석하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="4575447306482a712f678b2a9d395b8a07e7fe6d" translate="yes" xml:space="preserve">
          <source>This is usually created automatically by &lt;code&gt;Injector.resolveAndCreate&lt;/code&gt;.</source>
          <target state="translated">이것은 보통 &lt;code&gt;Injector.resolveAndCreate&lt;/code&gt; 에 의해 자동으로 생성됩니다 .</target>
        </trans-unit>
        <trans-unit id="8d4f6bc5f09e6fd5355e7d9f2a9258c893547afc" translate="yes" xml:space="preserve">
          <source>This is very important since it allows you to repurpose the components for any type of survey as long as it's compatible with the &lt;em&gt;question&lt;/em&gt; object model. The key is the dynamic data binding of metadata used to render the form without making any hardcoded assumptions about specific questions. In addition to control metadata, you are also adding validation dynamically.</source>
          <target state="translated">&lt;em&gt;질문&lt;/em&gt; 개체 모델 과 호환되는 한 모든 유형의 설문에 대한 구성 요소를 재사용 할 수 있기 때문에 이것은 매우 중요 합니다. 핵심은 특정 질문에 대한 하드 코딩 된 가정없이 양식을 렌더링하는 데 사용되는 메타 데이터의 동적 데이터 바인딩입니다. 메타 데이터를 제어하는 ​​것 외에도 유효성 검사를 동적으로 추가합니다.</target>
        </trans-unit>
        <trans-unit id="30cc4dc7a4b6f15bc6646908fab43b52eb183eb7" translate="yes" xml:space="preserve">
          <source>This isn't an oversight. Angular doesn't offer such pipes because they perform poorly and prevent aggressive minification. Both &lt;code&gt;filter&lt;/code&gt; and &lt;code&gt;orderBy&lt;/code&gt; require parameters that reference object properties. Earlier in this page, you learned that such pipes must be &lt;a href=&quot;pipes#pure-and-impure-pipes&quot;&gt;impure&lt;/a&gt; and that Angular calls impure pipes in almost every change-detection cycle.</source>
          <target state="translated">이것은 감독이 아닙니다. Angular는 성능이 떨어지고 공격적인 축소를 방지하기 때문에 이러한 파이프를 제공하지 않습니다. &lt;code&gt;filter&lt;/code&gt; 및 &lt;code&gt;orderBy&lt;/code&gt; 모두 오브젝트 특성을 참조하는 매개 변수가 필요합니다. 이 페이지의 앞부분에서 이러한 파이프가 &lt;a href=&quot;pipes#pure-and-impure-pipes&quot;&gt;불완전&lt;/a&gt; 해야 하고 Angular 호출은 거의 모든 변경 감지주기에서 파이프를 불완전하게한다는 것을 배웠습니다 .</target>
        </trans-unit>
        <trans-unit id="bf87feeb4d56bb09ecc40ffedbf5b9b09eea90de" translate="yes" xml:space="preserve">
          <source>This isn't necessarily good design. This example is examining &lt;em&gt;whether a component can inject its parent via the parent's base class&lt;/em&gt;.</source>
          <target state="translated">반드시 좋은 디자인은 아닙니다. 이 예제는 &lt;em&gt;컴포넌트가 부모의 기본 클래스를 통해 부모를 주입 할 수 있는지 여부를&lt;/em&gt; 검사 &lt;em&gt;합니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="6eaca4844068379a7e60176fbbfc6443308fe713" translate="yes" xml:space="preserve">
          <source>This isn't usually a problem, especially if you adhere to the recommended &lt;em&gt;one class per file&lt;/em&gt; rule. But sometimes circular references are unavoidable. You're in a bind when class 'A' refers to class 'B' and 'B' refers to 'A'. One of them has to be defined first.</source>
          <target state="translated">&lt;em&gt;파일&lt;/em&gt; 규칙 &lt;em&gt;당&lt;/em&gt; 권장되는 &lt;em&gt;하나의 클래스&lt;/em&gt; 를 준수하는 경우 일반적으로 문제가되지 않습니다 . 그러나 때때로 순환 참조는 피할 수 없습니다. 클래스 'A'가 클래스 'B'를 참조하고 'B'가 'A'를 참조하면 바인드 상태입니다. 그중 하나가 먼저 정의되어야합니다.</target>
        </trans-unit>
        <trans-unit id="ee0b3ac2c6c7f7ea1c3093b1d935ac0ccfed0cd9" translate="yes" xml:space="preserve">
          <source>This list of modules are those that export components, directives, or pipes that the component templates in this module reference. In this case, the component is &lt;code&gt;AppComponent&lt;/code&gt;, which references components, directives, or pipes in &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt;. A component template can reference another component, directive, or pipe when the referenced class is declared in this module or the class was imported from another module.</source>
          <target state="translated">이 모듈 목록은이 모듈의 구성 요소 템플리트가 참조하는 구성 요소, 지시문 또는 파이프를 내보내는 것입니다. 이 경우 구성 요소는 &lt;code&gt;AppComponent&lt;/code&gt; 이며 &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; 의 구성 요소, 지시문 또는 파이프를 참조합니다 . 참조 된 클래스가이 모듈에서 선언되었거나 클래스를 다른 모듈에서 가져올 때 컴포넌트 템플리트는 다른 컴포넌트, 지시문 또는 파이프를 참조 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4a9afe5b810e772d3eb663f9b40c1dd4d79aaccb" translate="yes" xml:space="preserve">
          <source>This makes the controller code look a lot more like Angular already. You're all set to actually introduce Angular into the project.</source>
          <target state="translated">이렇게하면 컨트롤러 코드가 이미 Angular와 훨씬 비슷해 보입니다. 실제로 Angular를 프로젝트에 도입하도록 설정되었습니다.</target>
        </trans-unit>
        <trans-unit id="cf52b88eeaa1d49f9b18045164c3a40eae3476c3" translate="yes" xml:space="preserve">
          <source>This makes the provider visible to every class in the application that knows the provider's lookup token, or name.</source>
          <target state="translated">그러면 공급자의 조회 토큰 또는 이름을 알고있는 응용 프로그램의 모든 클래스에 공급자가 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="e402b132534c7c9be62f7464642b0941cc482405" translate="yes" xml:space="preserve">
          <source>This mapping ensures that your library always loads the local copies of the modules it needs.</source>
          <target state="translated">이 맵핑은 라이브러리가 항상 필요한 모듈의 로컬 사본을로드하도록합니다.</target>
        </trans-unit>
        <trans-unit id="31460d71bf9e1b081028cbc8de1171f82e87335e" translate="yes" xml:space="preserve">
          <source>This may only be called once, to set up the common providers for the current test suite on the current platform. If you absolutely need to change the providers, first use &lt;code&gt;resetTestEnvironment&lt;/code&gt;.</source>
          <target state="translated">현재 플랫폼에서 현재 테스트 스위트에 대한 공통 제공자를 설정하기 위해 한 번만 호출 할 수 있습니다. 제공자를 절대 변경해야하는 경우 먼저 &lt;code&gt;resetTestEnvironment&lt;/code&gt; 를 사용 하십시오 .</target>
        </trans-unit>
        <trans-unit id="61958d29a3c8058968147c18b0f01bb5c73d67d0" translate="yes" xml:space="preserve">
          <source>This may seem like what the app has been doing all along. Not quite. The &lt;code&gt;AppModule&lt;/code&gt; is loaded when the application starts; that's &lt;em&gt;eager&lt;/em&gt; loading. Now the &lt;code&gt;AdminModule&lt;/code&gt; loads only when the user clicks on a link; that's &lt;em&gt;lazy&lt;/em&gt; loading.</source>
          <target state="translated">이것은 앱이 모든 것을 수행 한 것처럼 보일 수 있습니다. 좀 빠지는. &lt;code&gt;AppModule&lt;/code&gt; 은 응용 프로그램이 시작될 때로드됩니다; 그것은 &lt;em&gt;열망&lt;/em&gt; 입니다. 이제 &lt;code&gt;AdminModule&lt;/code&gt; 은 사용자가 링크를 클릭 할 때만로드됩니다. 그건 &lt;em&gt;게으른&lt;/em&gt; 로드.</target>
        </trans-unit>
        <trans-unit id="12bc8c3aa7a62420ea2cb6d2e429c4880c25f7b6" translate="yes" xml:space="preserve">
          <source>This may seem restrictive but it's also fast. An object reference check is fast&amp;mdash;much faster than a deep check for differences&amp;mdash;so Angular can quickly determine if it can skip both the pipe execution and a view update.</source>
          <target state="translated">이것은 제한적으로 보일 수 있지만 빠릅니다. 객체 참조 확인은 빠르고 (차이점을 확인하는 것보다 훨씬 빠름) Angular는 파이프 실행과 뷰 업데이트를 모두 건너 뛸 수 있는지 신속하게 확인할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5ad5340f87862c854151cf06f5fd6043a1b00b74" translate="yes" xml:space="preserve">
          <source>This means that an NgModule behaves differently depending on whether it's loaded during application start or lazy-loaded later. Neglecting that difference can lead to &lt;a href=&quot;ngmodule-faq#q-why-bad&quot;&gt;adverse consequences&lt;/a&gt;.</source>
          <target state="translated">이는 NgModule이 애플리케이션 시작 중로드되었는지 또는 나중에 지연로드되는지에 따라 다르게 작동 함을 의미합니다. 그 차이를 무시하면 &lt;a href=&quot;ngmodule-faq#q-why-bad&quot;&gt;부정적인 결과&lt;/a&gt; 를 초래할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="8e6e948c64201b9f8912c19889c92106c85c33fc" translate="yes" xml:space="preserve">
          <source>This means that when you build your production configuration (using &lt;code&gt;ng build --prod&lt;/code&gt; or &lt;code&gt;ng build --configuration=production&lt;/code&gt;), the &lt;code&gt;src/environments/environment.ts&lt;/code&gt; file is replaced with the target-specific version of the file, &lt;code&gt;src/environments/environment.prod.ts&lt;/code&gt;.</source>
          <target state="translated">즉, &lt;code&gt;ng build --prod&lt;/code&gt; 또는 &lt;code&gt;ng build --configuration=production&lt;/code&gt; 을 사용하여 프로덕션 구성을 빌드 하면 &lt;code&gt;src/environments/environment.ts&lt;/code&gt; 파일이 대상별 버전의 파일 인 &lt;code&gt;src/environments/environment.prod.ts&lt;/code&gt; 로 대체됩니다. /environment.prod.ts .</target>
        </trans-unit>
        <trans-unit id="7b42c601f1b0de6ca86d93b51f7a4f0d84c91d6c" translate="yes" xml:space="preserve">
          <source>This means you're responsible for putting &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; on your service classes.</source>
          <target state="translated">즉 , 서비스 클래스에 &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; 을 배치해야합니다.</target>
        </trans-unit>
        <trans-unit id="b37292a0b3e74c75b71eca67292a0c0b9392a296" translate="yes" xml:space="preserve">
          <source>This method also updates the value and validity of the control.</source>
          <target state="translated">이 방법은 또한 컨트롤의 값과 유효성을 업데이트합니다.</target>
        </trans-unit>
        <trans-unit id="e754eab77abab498cd7f7a0b1268613ab289c6ed" translate="yes" xml:space="preserve">
          <source>This method does not update the value or validity of the control. Use &lt;a href=&quot;formgroup#addControl&quot;&gt;addControl&lt;/a&gt; instead.</source>
          <target state="translated">이 방법은 컨트롤의 값이나 유효성을 업데이트하지 않습니다. 대신 &lt;a href=&quot;formgroup#addControl&quot;&gt;addControl&lt;/a&gt; 을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="100a8e77d4f74abe1033d79495767430a1882094" translate="yes" xml:space="preserve">
          <source>This method is called by the forms API on initialization to update the form model when values propagate from the view to the model.</source>
          <target state="translated">이 메소드는 값이보기에서 모델로 전파 될 때 양식 모델을 업데이트하기 위해 초기화시 양식 API에 의해 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="957d45ae3b8977944714e03589b7ce213ef76cbd" translate="yes" xml:space="preserve">
          <source>This method is called by the forms API to write to the view when programmatic changes from model to view are requested.</source>
          <target state="translated">이 메소드는 모델에서 보기로의 프로그래밍 변경이 요청 될 때보기에 쓰기 위해 양식 API에 의해 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="d4c0ca924e5a897aa17682cd4a412c4b9b49e4bc" translate="yes" xml:space="preserve">
          <source>This method is for development and testing only, and is not a supported or secure way of deploying an application.</source>
          <target state="translated">이 방법은 개발 및 테스트 용도로만 사용되며 지원되는 안전한 배포 방법이 아닙니다.</target>
        </trans-unit>
        <trans-unit id="07d75e6c897ca8fced62ff854dd31dff479c1ea8" translate="yes" xml:space="preserve">
          <source>This method is supported only in HTML5 mode and only in browsers supporting the HTML5 History API methods such as &lt;code&gt;pushState&lt;/code&gt; and &lt;code&gt;replaceState&lt;/code&gt;. If you need to support older browsers (like IE9 or Android &amp;lt; 4.0), don't use this method.</source>
          <target state="translated">이 메소드는 HTML5 모드에서만 지원되며 &lt;code&gt;pushState&lt;/code&gt; 및 &lt;code&gt;replaceState&lt;/code&gt; 와 같은 HTML5 히스토리 API 메소드를 지원하는 브라우저에서만 지원됩니다. . IE9 또는 Android &amp;lt;4.0과 같은 이전 브라우저를 지원해야하는 경우이 방법을 사용하지 마십시오.</target>
        </trans-unit>
        <trans-unit id="582cc9eb2f1253026d9fec705c1a27f27a1e5797" translate="yes" xml:space="preserve">
          <source>This method performs strict checks, and throws an error if you try to set the value of a control that doesn't exist or if you exclude the value of a control.</source>
          <target state="translated">이 방법은 엄격한 검사를 수행하고 존재하지 않는 컨트롤 값을 설정하려고하거나 컨트롤 값을 제외하면 오류를 발생시킵니다.</target>
        </trans-unit>
        <trans-unit id="38f2789fcaf15e04940002919821b82465849aa8" translate="yes" xml:space="preserve">
          <source>This method returns a &lt;code&gt;Promise&lt;/code&gt; which indicates that the update check has completed successfully, though it does not indicate whether an update was discovered as a result of the check. Even if one is found, the service worker must still successfully download the changed files, which can fail. If successful, the &lt;code&gt;available&lt;/code&gt; event will indicate availability of a new version of the app.</source>
          <target state="translated">이 메서드는 업데이트 확인이 성공적으로 완료되었음을 나타내는 &lt;code&gt;Promise&lt;/code&gt; 을 반환 하지만 확인 결과 업데이트가 검색되었는지 여부는 나타내지 않습니다. 발견 된 경우라도 서비스 워커는 여전히 변경된 파일을 성공적으로 다운로드해야하는데 실패 할 수 있습니다. 성공하면 &lt;code&gt;available&lt;/code&gt; 이벤트는 새 버전의 앱 사용 가능함 을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="7240a76f2e460d49075a05cb693f1cf044c80345" translate="yes" xml:space="preserve">
          <source>This might seem strange if you're used to dependency injection in strongly typed languages where an interface is the preferred dependency lookup key. However, JavaScript, doesn't have interfaces, so when TypeScript is transpiled to JavaScript, the interface disappears. There is no interface type information left for Angular to find at runtime.</source>
          <target state="translated">인터페이스가 선호되는 종속성 조회 키인 강력한 형식의 언어에서 종속성 주입에 익숙한 경우 이상하게 보일 수 있습니다. 그러나 JavaScript에는 인터페이스가 없으므로 TypeScript가 JavaScript로 변환되면 인터페이스가 사라집니다. 런타임에 Angular가 찾을 수있는 인터페이스 유형 정보가 없습니다.</target>
        </trans-unit>
        <trans-unit id="01a6160cc6927cc87e97af3ca12f5d7c3e578c05" translate="yes" xml:space="preserve">
          <source>This module defines a &lt;code&gt;routes&lt;/code&gt; object with two routes to the two phone components and a default route for the empty path. It passes the &lt;code&gt;routes&lt;/code&gt; to the &lt;code&gt;RouterModule.forRoot&lt;/code&gt; method which does the rest.</source>
          <target state="translated">이 모듈은 두 개의 전화 구성 요소에 대한 두 개의 경로와 빈 경로의 기본 경로를 가진 &lt;code&gt;routes&lt;/code&gt; 개체를 정의 합니다. 나머지를 수행하는 &lt;code&gt;RouterModule.forRoot&lt;/code&gt; 메소드로 &lt;code&gt;routes&lt;/code&gt; 를 전달합니다 .</target>
        </trans-unit>
        <trans-unit id="81b384ca39cda92728b7bd10a1501aede53ebbbb" translate="yes" xml:space="preserve">
          <source>This next example binds an &lt;code&gt;Observable&lt;/code&gt; of message strings (&lt;code&gt;&lt;a href=&quot;../api/common/http/httperrorresponse#message&quot;&gt;message&lt;/a&gt;$&lt;/code&gt;) to a view with the &lt;code&gt;&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;&lt;/code&gt; pipe.</source>
          <target state="translated">다음 예제는 &lt;code&gt;Observable&lt;/code&gt; 메시지 문자열 ( &lt;code&gt;&lt;a href=&quot;../api/common/http/httperrorresponse#message&quot;&gt;message&lt;/a&gt;$&lt;/code&gt; )을 &lt;code&gt;&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;&lt;/code&gt; 파이프 가있는 뷰에 바인딩합니다 .</target>
        </trans-unit>
        <trans-unit id="1f28fed5c95e4e5fc2cf216bb7edd12cd2cdd95f" translate="yes" xml:space="preserve">
          <source>This one root component is usually called &lt;code&gt;AppComponent&lt;/code&gt; and is in the root module's &lt;code&gt;bootstrap&lt;/code&gt; array.</source>
          <target state="translated">이 루트 구성 요소는 일반적으로 &lt;code&gt;AppComponent&lt;/code&gt; 라고 하며 루트 모듈의 &lt;code&gt;bootstrap&lt;/code&gt; 배열에 있습니다.</target>
        </trans-unit>
        <trans-unit id="553c357233905d7a357b67f87ff6741c54ba7d0c" translate="yes" xml:space="preserve">
          <source>This option can take one of the following &lt;a href=&quot;https://angular.io/cli/cli/generate#schematic-commands&quot;&gt;sub-commands&lt;/a&gt;:</source>
          <target state="translated">이 옵션은 다음 &lt;a href=&quot;https://angular.io/cli/cli/generate#schematic-commands&quot;&gt;하위 명령&lt;/a&gt; 중 하나를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="7e2bdd9bc4821ec6e25c48f5020fa352d5d592c1" translate="yes" xml:space="preserve">
          <source>This option is intended to validate the &lt;code&gt;.metadata.json&lt;/code&gt; files emitted for bundling with an &lt;code&gt;npm&lt;/code&gt; package. The validation is strict and can emit errors for metadata that would never produce an error when used by the template compiler. You can choose to suppress the error emitted by this option for an exported symbol by including &lt;code&gt;@dynamic&lt;/code&gt; in the comment documenting the symbol.</source>
          <target state="translated">이 옵션은 &lt;code&gt;npm&lt;/code&gt; 패키지 와 함께 번들로 생성 된 &lt;code&gt;.metadata.json&lt;/code&gt; 파일의 유효성을 검사하기위한 것 입니다. 유효성 검사는 엄격하며 템플릿 컴파일러에서 사용할 때 오류가 발생하지 않는 메타 데이터에 대해 오류를 생성 할 수 있습니다. 심볼을 설명하는 주석에 &lt;code&gt;@dynamic&lt;/code&gt; 을 포함시켜 내 보낸 심볼에 대해이 옵션에서 발생하는 오류를 억제하도록 선택할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d6eab3c2994a6a17d4115d07f1dae680ac2ec26d" translate="yes" xml:space="preserve">
          <source>This option is only available if application URLs look like normal web URLs without hashes (#) in the middle.</source>
          <target state="translated">이 옵션은 애플리케이션 URL이 중간에 해시 (#)가없는 일반 웹 URL처럼 보이는 경우에만 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b706956040eab679c0d00e95b8bd1fb93cd1e1bf" translate="yes" xml:space="preserve">
          <source>This optional section enables you to specify a custom list of URLs that will be redirected to the index file.</source>
          <target state="translated">이 선택적 섹션을 사용하면 색인 파일로 리디렉션 될 사용자 정의 URL 목록을 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d49647d5cde74d419f8b7a1440d72e1fa1cdb7e9" translate="yes" xml:space="preserve">
          <source>This page answers the questions many developers ask about NgModule design and implementation.</source>
          <target state="translated">이 페이지는 NgModule 설계 및 구현에 관해 많은 개발자들이 묻는 질문에 대한 답변입니다.</target>
        </trans-unit>
        <trans-unit id="e470076e6470a706c5e7519008e46a929c297415" translate="yes" xml:space="preserve">
          <source>This page covered how to use the &lt;a href=&quot;../api/upgrade/static&quot;&gt;upgrade/static&lt;/a&gt; package to incrementally upgrade existing AngularJS apps at your own pace and without impeding further development of the app for the duration of the upgrade process.</source>
          <target state="translated">이 페이지는 &lt;a href=&quot;../api/upgrade/static&quot;&gt;업그레이드 / 정적&lt;/a&gt; 사용법을 다루었습니다. 패키지 하여 업그레이드 프로세스 동안 앱의 추가 개발을 방해하지 않으면 서 기존 AngularJS 앱을 원하는 속도로 점진적으로 업그레이드하는 방법에 대해 설명했습니다.</target>
        </trans-unit>
        <trans-unit id="81be0c6f770103c818ad9a59d216fef97dd57b87" translate="yes" xml:space="preserve">
          <source>This page covered how to:</source>
          <target state="translated">이 페이지는 다음을 수행하는 방법을 다루었습니다.</target>
        </trans-unit>
        <trans-unit id="c3d2f38bcda77f3d0e583e4cbd59a23c93e26dd3" translate="yes" xml:space="preserve">
          <source>This page covers some aspects of TypeScript configuration and the TypeScript environment that are important to Angular developers, including details about the following files:</source>
          <target state="translated">이 페이지는 다음 파일에 대한 세부 사항을 포함하여 Angular 개발자에게 중요한 TypeScript 구성 및 TypeScript 환경의 일부 측면을 다룹니다.</target>
        </trans-unit>
        <trans-unit id="dc6463bb109d0d9d7a3485b00e656aa5ad4447d1" translate="yes" xml:space="preserve">
          <source>This page demonstrates building a simple &lt;em&gt;appHighlight&lt;/em&gt; attribute directive to set an element's background color when the user hovers over that element. You can apply it like this:</source>
          <target state="translated">이 페이지 는 사용자가 해당 요소 위로 마우스를 가져갈 때 요소의 배경색을 설정하는 간단한 &lt;em&gt;appHighlight&lt;/em&gt; 속성 지시문을 &lt;em&gt;작성&lt;/em&gt; 하는 방법을 보여줍니다 . 다음과 같이 적용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f41f995aa12a74f7c35870947d8b3dfcd851015a" translate="yes" xml:space="preserve">
          <source>This page describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication (&lt;em&gt;Who is this user?&lt;/em&gt;) and authorization (&lt;em&gt;What can this user do?&lt;/em&gt;).</source>
          <target state="translated">이 페이지에서는 일반적인 웹 응용 프로그램 취약점 및 사이트 간 스크립팅 공격과 같은 공격에 대한 Angular의 기본 제공 보호 기능에 대해 설명합니다. 인증 ( &lt;em&gt;이 사용자는 누구입니까?&lt;/em&gt; ) 및 권한 부여 ( &lt;em&gt;이 사용자는 무엇을 할 수 &lt;/em&gt;&lt;em&gt;있습니까?&lt;/em&gt; )와 같은 응용 프로그램 수준 보안은 다루지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="b0a26a5d944df815f572ce97ca9af1ebb2bdb5a7" translate="yes" xml:space="preserve">
          <source>This page describes how to load and apply these component styles.</source>
          <target state="translated">이 페이지에서는 이러한 구성 요소 스타일을로드하고 적용하는 방법에 대해 설명합니다.</target>
        </trans-unit>
        <trans-unit id="09ae81e8cd8b8d7fc27be03d544055e093469b55" translate="yes" xml:space="preserve">
          <source>This page discusses best practices for designing Angular applications that work well for all users, including those who rely on assistive technologies.</source>
          <target state="translated">이 페이지에서는 보조 기술에 의존하는 사용자를 포함하여 모든 사용자에게 잘 작동하는 Angular 응용 프로그램을 설계하는 모범 사례에 대해 설명합니다.</target>
        </trans-unit>
        <trans-unit id="670a5a082b047a72ce1a558bd250325e58e09d59" translate="yes" xml:space="preserve">
          <source>This page discusses build-specific configuration options for Angular projects.</source>
          <target state="translated">이 페이지에서는 Angular 프로젝트의 빌드 별 구성 옵션에 대해 설명합니다.</target>
        </trans-unit>
        <trans-unit id="cbfa8125c3023f0e5a452262dd4b80eb0950ad8c" translate="yes" xml:space="preserve">
          <source>This page is a comprehensive technical reference to the Angular template language. It explains basic principles of the template language and describes most of the syntax that you'll encounter elsewhere in the documentation.</source>
          <target state="translated">이 페이지는 Angular 템플릿 언어에 대한 포괄적 인 기술 참조입니다. 템플릿 언어의 기본 원칙을 설명하고 설명서의 다른 곳에서 발생하는 대부분의 구문에 대해 설명합니다.</target>
        </trans-unit>
        <trans-unit id="7fad648d853b5ed4d555cb38fbfbacd9ba7992b6" translate="yes" xml:space="preserve">
          <source>This page is a reference for deploying and supporting production apps that use the Angular service worker. It explains how the Angular service worker fits into the larger production environment, the service worker's behavior under various conditions, and available resources and fail-safes.</source>
          <target state="translated">이 페이지는 Angular 서비스 워커를 사용하는 프로덕션 앱을 배포하고 지원하기위한 참조입니다. Angular 서비스 워커가 더 큰 프로덕션 환경, 다양한 조건에서 서비스 워커의 동작, 가용 리소스 및 페일 세이프에 어떻게 적용되는지 설명합니다.</target>
        </trans-unit>
        <trans-unit id="97c20e865f128e08c87e8b02ca1209e92134e457" translate="yes" xml:space="preserve">
          <source>This page shows how to validate user input in the UI and display useful validation messages using both reactive and template-driven forms. It assumes some basic knowledge of the two forms modules.</source>
          <target state="translated">이 페이지는 UI에서 사용자 입력의 유효성을 검사하고 반응 형 및 템플릿 기반 양식을 사용하여 유용한 유효성 검사 메시지를 표시하는 방법을 보여줍니다. 두 양식 모듈에 대한 기본 지식이 있다고 가정합니다.</target>
        </trans-unit>
        <trans-unit id="5d4c0327323a7a67f27b56ff84bda976d2f25fa4" translate="yes" xml:space="preserve">
          <source>This page shows you how to build a simple form from scratch. Along the way you'll learn how to:</source>
          <target state="translated">이 페이지는 간단한 양식을 처음부터 작성하는 방법을 보여줍니다. 다음과 같은 방법을 배우게됩니다.</target>
        </trans-unit>
        <trans-unit id="809f471c9fda21049d71c0885d6f8ee1429911d6" translate="yes" xml:space="preserve">
          <source>This particular &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient#get&quot;&gt;HttpClient.get()&lt;/a&gt;&lt;/code&gt; call returns an &lt;code&gt;Observable&amp;lt;Hero[]&amp;gt;&lt;/code&gt;; that is, &quot;&lt;em&gt;an observable of hero arrays&lt;/em&gt;&quot;. In practice, it will only return a single hero array.</source>
          <target state="translated">이 특정 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient#get&quot;&gt;HttpClient.get()&lt;/a&gt;&lt;/code&gt; 호출은 &lt;code&gt;Observable&amp;lt;Hero[]&amp;gt;&lt;/code&gt; 반환합니다 . 즉, &quot; &lt;em&gt;영웅 배열의 관찰 가능&lt;/em&gt; &quot;입니다. 실제로는 단일 영웅 배열 만 반환합니다.</target>
        </trans-unit>
        <trans-unit id="d836ca04f6cff950392c8ae7f7d0cf1a60a94c96" translate="yes" xml:space="preserve">
          <source>This particular test suite supplies a minimal mock of the &lt;code&gt;UserService&lt;/code&gt; that satisfies the needs of the &lt;code&gt;WelcomeComponent&lt;/code&gt; and its tests:</source>
          <target state="translated">이 특정 테스트 스위트 는 &lt;code&gt;WelcomeComponent&lt;/code&gt; 의 요구 와 테스트 를 충족시키는 최소한의 &lt;code&gt;UserService&lt;/code&gt; 모의를 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="ff6ecdb8628c90cfa56e0ff26fbdce1243318d07" translate="yes" xml:space="preserve">
          <source>This pipe definition reveals the following key points:</source>
          <target state="translated">이 파이프 정의는 다음과 같은 핵심 사항을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="9c06cdda191efa55a95c5ebbcd3348ce80c0d189" translate="yes" xml:space="preserve">
          <source>This platform has to be included in any other platform</source>
          <target state="translated">이 플랫폼은 다른 플랫폼에 포함되어야합니다</target>
        </trans-unit>
        <trans-unit id="1a66dd83805fb99c52388b0a549137c596348fd3" translate="yes" xml:space="preserve">
          <source>This produces the following error:</source>
          <target state="translated">다음과 같은 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="cc28ea5e9b1a6b51e4c29ff84265e5f10b52e574" translate="yes" xml:space="preserve">
          <source>This registers Angular's &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; providers globally.</source>
          <target state="translated">이것은 Angular의 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; 공급자를 전 세계적으로 등록 합니다.</target>
        </trans-unit>
        <trans-unit id="40b2f3a8cf72659eb5e60961a2342494b2510413" translate="yes" xml:space="preserve">
          <source>This registers a drop-in replacement for the &lt;code&gt;$location&lt;/code&gt; provider in AngularJS. Once registered, all navigation, routing broadcast messages, and any necessary digest cycles in AngularJS triggered during navigation are handled by Angular. This gives you a single way to navigate within both sides of your hybrid application consistently.</source>
          <target state="translated">이것은 AngularJS에서 &lt;code&gt;$location&lt;/code&gt; 공급자 의 드롭 인 대체를 등록합니다 . 일단 등록되면 탐색 중에 트리거 된 모든 탐색, 라우팅 브로드 캐스트 메시지 및 AngularJS의 필요한 다이제스트주기가 Angular에 의해 처리됩니다. 이를 통해 하이브리드 애플리케이션의 양쪽에서 일관되게 탐색 할 수있는 단일 방법을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="06f56de558de0a575487e683fea999edf392ee43" translate="yes" xml:space="preserve">
          <source>This request passes the &lt;code&gt;heroesURL&lt;/code&gt; as the first parameter and the callback function name as the second parameter. The response is wrapped in the callback function, which takes the observables returned by the JSONP method and pipes them through to the error handler.</source>
          <target state="translated">이 요청은 &lt;code&gt;heroesURL&lt;/code&gt; 을 첫 번째 매개 변수로, 콜백 함수 이름을 두 번째 매개 변수로 전달합니다. 응답은 콜백 함수에 래핑됩니다. 콜백 함수는 JSONP 메서드에서 반환 된 관찰 가능 항목을 가져 와서 오류 처리기로 파이프합니다.</target>
        </trans-unit>
        <trans-unit id="d9fd7c2c4a20b1de98c590fa48930235dc6aba0d" translate="yes" xml:space="preserve">
          <source>This route redirects a URL that fully matches the empty path to the route whose path is &lt;code&gt;'/dashboard'&lt;/code&gt;.</source>
          <target state="translated">이 경로는 빈 경로와 완전히 일치하는 URL을 경로가 &lt;code&gt;'/dashboard'&lt;/code&gt; 인 경로로 리디렉션합니다 .</target>
        </trans-unit>
        <trans-unit id="6c41f8a018f7563801e156030ed8a8f8ca194ad0" translate="yes" xml:space="preserve">
          <source>This rule is essential to Angular's &quot;unidirectional data flow&quot; policy. You should never worry that reading a component value might change some other displayed value. The view should be stable throughout a single rendering pass.</source>
          <target state="translated">이 규칙은 Angular의 &quot;단방향 데이터 흐름&quot;정책에 필수적입니다. 구성 요소 값을 읽으면 표시되는 다른 값이 변경 될 수 있습니다. 단일 렌더링 패스에서 뷰가 안정적이어야합니다.</target>
        </trans-unit>
        <trans-unit id="0d1e4a2f1c53200691565434ab456d518f0bf3a4" translate="yes" xml:space="preserve">
          <source>This sample file is easy to translate without a special editor or knowledge of French.</source>
          <target state="translated">이 샘플 파일은 특별한 편집자 나 프랑스어에 대한 지식없이 쉽게 번역 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="480408f47c676f8c57b3cde5a055d6686d241608" translate="yes" xml:space="preserve">
          <source>This scenario causes your app to create a new instance every time, instead of using the singleton.</source>
          <target state="translated">이 시나리오에서는 앱이 싱글 톤을 사용하지 않고 매번 새 인스턴스를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="99aa2e43a5383e16a847762330ebaee6bfd37ca5" translate="yes" xml:space="preserve">
          <source>This scoping restriction is a &lt;strong&gt;&lt;em&gt;styling modularity feature&lt;/em&gt;&lt;/strong&gt;.</source>
          <target state="translated">이 범위 제한은 &lt;strong&gt;&lt;em&gt;스타일링 모듈화 기능&lt;/em&gt;&lt;/strong&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="31d68c7991b2366acf1e70e15d44815dc09ecff1" translate="yes" xml:space="preserve">
          <source>This script can be used both to deactivate &lt;code&gt;@angular/service-worker&lt;/code&gt; as well as any other Service Workers which might have been served in the past on your site.</source>
          <target state="translated">이 스크립트는 &lt;code&gt;@angular/service-worker&lt;/code&gt; 및 사이트에서 과거에 서비스를 받았던 다른 서비스 워커를 모두 비활성화하는 데 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c18fae7524b94c2e1854507242de01f07367e013" translate="yes" xml:space="preserve">
          <source>This section about &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; has its own . The following subsections highlight key points in the sample app.</source>
          <target state="translated">약이 섹션 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; 와 &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; 자신이있다. 다음 하위 섹션에서는 샘플 앱의 요점을 강조합니다.</target>
        </trans-unit>
        <trans-unit id="b64223a794713879607f46b9296695b6693dcfef" translate="yes" xml:space="preserve">
          <source>This section assumes you are familiar with &lt;a href=&quot;https://docs.bazel.build&quot;&gt;Bazel&lt;/a&gt;.</source>
          <target state="translated">이 섹션에서는 사용자가 &lt;a href=&quot;https://docs.bazel.build&quot;&gt;Bazel에&lt;/a&gt; 익숙하다고 가정합니다 .</target>
        </trans-unit>
        <trans-unit id="11a0d4f001f44cf92c4d038ced8939573bb0e86d" translate="yes" xml:space="preserve">
          <source>This section contains a complete list all of the currently-deprecated APIs, with details to help you plan your migration to a replacement.</source>
          <target state="translated">이 섹션에는 현재 사용되지 않는 모든 API의 전체 목록과 교체로의 마이그레이션 계획을 세우는 데 도움이되는 세부 정보가 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="f5235be074b4aa0d4b2e76c1864190fa474d6ead" translate="yes" xml:space="preserve">
          <source>This section contains default build target options, used when no named alternative configuration is specified. See &lt;a href=&quot;workspace-config#default-build-targets&quot;&gt;Default build targets&lt;/a&gt; below.</source>
          <target state="translated">이 섹션에는 명명 된 대체 구성이 지정되지 않은 경우 사용되는 기본 빌드 대상 옵션이 포함되어 있습니다. 아래의 &lt;a href=&quot;workspace-config#default-build-targets&quot;&gt;기본 빌드 대상을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="a6f4ac6b1d629df1dd4126322ebc082c11c00de6" translate="yes" xml:space="preserve">
          <source>This section covers changes you may have make to the server or to files deployed to the server.</source>
          <target state="translated">이 섹션에서는 서버 또는 서버에 배포 된 파일에 대한 변경 사항에 대해 설명합니다.</target>
        </trans-unit>
        <trans-unit id="1b184253cc42d7415bb50e2b1f1ae4bfa4d58e73" translate="yes" xml:space="preserve">
          <source>This section defines and names alternative configurations for different intended destinations. It contains a section for each named configuration, which sets the default options for that intended environment. See &lt;a href=&quot;workspace-config#build-configs&quot;&gt;Alternate build configurations&lt;/a&gt; below.</source>
          <target state="translated">이 섹션에서는 다른 대상에 대한 대체 구성을 정의하고 이름을 지정합니다. 여기에는 해당 환경에 대한 기본 옵션을 설정하는 각 명명 된 구성에 대한 섹션이 포함되어 있습니다. 아래의 &lt;a href=&quot;workspace-config#build-configs&quot;&gt;대체 빌드 구성을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="e7378faaab25e8cea0f89eb0420acd35173d6d0c" translate="yes" xml:space="preserve">
          <source>This section defines the policy by which matching requests will be cached.</source>
          <target state="translated">이 섹션에서는 일치하는 요청을 캐시하는 정책을 정의합니다.</target>
        </trans-unit>
        <trans-unit id="085d9b2381ce33b95badee4ece65c04252ae8b07" translate="yes" xml:space="preserve">
          <source>This section demonstrates a service worker in action, using an example application.</source>
          <target state="translated">이 섹션에서는 예제 응용 프로그램을 사용하여 서비스 워커의 실제 작업을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="b0beb9d185cb05154e1dd17453c7c97560febcea" translate="yes" xml:space="preserve">
          <source>This section demonstrates how to write providers that deliver dependent services.</source>
          <target state="translated">이 섹션에서는 종속 서비스를 제공하는 제공자를 작성하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="eb2c533b5e2645aa61c4b0e279f37acd6ba4506b" translate="yes" xml:space="preserve">
          <source>This section describes how to add a single form control. In the example, the user enters their name into an input field, captures that input value, and displays the current value of the form control element.</source>
          <target state="translated">이 섹션에서는 단일 폼 컨트롤을 추가하는 방법에 대해 설명합니다. 이 예에서 사용자는 입력 필드에 이름을 입력하고 해당 입력 값을 캡처하여 양식 제어 요소의 현재 값을 표시합니다.</target>
        </trans-unit>
        <trans-unit id="8df9a0125bfce0a631c00cf027d6c0c9e9c21223" translate="yes" xml:space="preserve">
          <source>This section describes how to limit the scope of the beginning and ending &lt;code&gt;ElementInjector&lt;/code&gt; using the visibility decorators &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt;, &lt;code&gt;@&lt;a href=&quot;../api/core/self&quot;&gt;Self&lt;/a&gt;()&lt;/code&gt;, and &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt;.</source>
          <target state="translated">이 섹션에서는 가시성 데코레이터 &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt; &lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt; () , &lt;code&gt;@&lt;a href=&quot;../api/core/self&quot;&gt;Self&lt;/a&gt;()&lt;/code&gt; &lt;a href=&quot;../api/core/self&quot;&gt;Self&lt;/a&gt; () 및 &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; &lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt; ()를 사용하여 시작 및 끝 &lt;code&gt;ElementInjector&lt;/code&gt; 의 범위를 제한하는 방법에 대해 설명합니다 .</target>
        </trans-unit>
        <trans-unit id="93a1f837d6690ccc5052bae1311690c80cb118fa" translate="yes" xml:space="preserve">
          <source>This section describes some techniques for doing that.</source>
          <target state="translated">이 섹션에서는이를 수행하는 몇 가지 기술에 대해 설명합니다.</target>
        </trans-unit>
        <trans-unit id="69a1ff0385a87975f95ae5a798ec38b6e1fa9506" translate="yes" xml:space="preserve">
          <source>This section describes the resources to cache, broken up into three groups.</source>
          <target state="translated">이 섹션에서는 캐시 할 리소스를 세 그룹으로 분류하여 설명합니다.</target>
        </trans-unit>
        <trans-unit id="25d342d94221065f56ba9567318ef23b976b78cb" translate="yes" xml:space="preserve">
          <source>This section describes two techniques for minimizing the setup. Use them, alone or in combination, to stay focused on the testing the primary component.</source>
          <target state="translated">이 섹션에서는 설정을 최소화하기위한 두 가지 기술에 대해 설명합니다. 기본 구성 요소 테스트에 중점을 두려면 단독으로 또는 조합하여 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="4b6eb3ab67768fa1db1718443a20d6bef34cf012" translate="yes" xml:space="preserve">
          <source>This section enables you to pass any data you want that describes this particular version of the app. The &lt;code&gt;&lt;a href=&quot;../api/service-worker/swupdate&quot;&gt;SwUpdate&lt;/a&gt;&lt;/code&gt; service includes that data in the update notifications. Many apps use this section to provide additional information for the display of UI popups, notifying users of the available update.</source>
          <target state="translated">이 섹션에서는이 특정 버전의 앱을 설명하는 원하는 데이터를 전달할 수 있습니다. &lt;code&gt;&lt;a href=&quot;../api/service-worker/swupdate&quot;&gt;SwUpdate&lt;/a&gt;&lt;/code&gt; 의 서비스는 업데이트 알림에 데이터가 포함되어 있습니다. 많은 앱이이 섹션을 사용하여 사용자에게 사용 가능한 업데이트를 알리는 UI 팝업 표시에 대한 추가 정보를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="47fc123a3ed1f0d231e027d8288971ed0c72aa21" translate="yes" xml:space="preserve">
          <source>This section explores many of the features of dependency injection (DI) in Angular.</source>
          <target state="translated">이 섹션에서는 Angular의 많은 DI (dependency injection) 기능을 살펴 봅니다.</target>
        </trans-unit>
        <trans-unit id="3fbce57e38fce3ed83994d74968cf78f64dac167" translate="yes" xml:space="preserve">
          <source>This section guides you through the following:</source>
          <target state="translated">이 섹션에서는 다음을 안내합니다.</target>
        </trans-unit>
        <trans-unit id="3a63d68a98a00a26a92cce922c9931db461a38cf" translate="yes" xml:space="preserve">
          <source>This section is an introduction to the common built-in structural directives:</source>
          <target state="translated">이 섹션은 일반적인 내장 구조 지시문에 대한 소개입니다.</target>
        </trans-unit>
        <trans-unit id="c4d630efe539af7ec5dfcdfbcacacc0d6a4f3dbc" translate="yes" xml:space="preserve">
          <source>This section lists all of the currently-deprecated features, which includes template syntax, configuration options, and any other deprecations not listed in the &lt;a href=&quot;deprecations#deprecated-apis&quot;&gt;Deprecated APIs&lt;/a&gt; section above. It also includes deprecated API usage scenarios or API combinations, to augment the information above.</source>
          <target state="translated">이 섹션에는 템플릿 구문, 구성 옵션 및 위 의 더 이상 사용되지 &lt;a href=&quot;deprecations#deprecated-apis&quot;&gt;않는 API&lt;/a&gt; 섹션에 나열되지 않은 다른 더 이상 사용되지 않는 기능을 포함하여 현재 사용되지 않는 모든 기능이 나열됩니다 . 또한 위의 정보를 보강하기 위해 더 이상 사용되지 않는 API 사용 시나리오 또는 API 조합을 포함합니다.</target>
        </trans-unit>
        <trans-unit id="306aadf682fc11264f3cfeb1c732892c12664c75" translate="yes" xml:space="preserve">
          <source>This section shows how to animate elements entering or leaving a page.</source>
          <target state="translated">이 섹션에서는 페이지에 들어가거나 나가는 요소에 애니메이션을 적용하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="3b6e09c67f8a39342ff4c0257fcd5cc67bae2f2c" translate="yes" xml:space="preserve">
          <source>This section shows how to create asynchronous validators. It assumes some basic knowledge of creating &lt;a href=&quot;form-validation#custom-validators&quot;&gt;custom validators&lt;/a&gt;.</source>
          <target state="translated">이 섹션에서는 비동기 유효성 검사기를 만드는 방법을 보여줍니다. &lt;a href=&quot;form-validation#custom-validators&quot;&gt;사용자 정의 유효성 검사기&lt;/a&gt; 를 만드는 데 대한 기본 지식이 있다고 가정합니다 .</target>
        </trans-unit>
        <trans-unit id="c1876bae15f4c669767ab3331f67eef88c5960e8" translate="yes" xml:space="preserve">
          <source>This section shows how to perform cross field validation. It assumes some basic knowledge of creating custom validators.</source>
          <target state="translated">이 섹션에서는 교차 필드 유효성 검사를 수행하는 방법을 보여줍니다. 사용자 지정 유효성 검사기를 만드는 데 대한 기본 지식이 있다고 가정합니다.</target>
        </trans-unit>
        <trans-unit id="40c08e782b8b4dce59c05abd346b382ec356f9f6" translate="yes" xml:space="preserve">
          <source>This section shows you how to add some &lt;a href=&quot;animations&quot;&gt;animations&lt;/a&gt; to the &lt;code&gt;HeroDetailComponent&lt;/code&gt;.</source>
          <target state="translated">이 섹션에서는 &lt;code&gt;HeroDetailComponent&lt;/code&gt; 에&lt;a href=&quot;animations&quot;&gt;애니메이션&lt;/a&gt; 을 추가하는 방법을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="28698d05d33f5b1671f713ab414eca9161933dd5" translate="yes" xml:space="preserve">
          <source>This section shows you how to organize the crisis center to conform to the following recommended pattern for Angular applications:</source>
          <target state="translated">이 섹션에서는 Angular 애플리케이션에 대해 다음 권장 패턴을 준수하도록 위기 센터를 구성하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="8555832b3f593de35864e26800451467378353f6" translate="yes" xml:space="preserve">
          <source>This section takes inventory of the most useful Angular testing features and summarizes what they do.</source>
          <target state="translated">이 섹션에서는 가장 유용한 Angular 테스트 기능의 인벤토리를 살펴보고 그 기능을 요약합니다.</target>
        </trans-unit>
        <trans-unit id="15bf3c33e1424399ab26287ac6065fe7557dd98a" translate="yes" xml:space="preserve">
          <source>This setup also calls &lt;code&gt;TestBed.get()&lt;/code&gt; to inject the &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; service and the mocking controller so they can be referenced during the tests.</source>
          <target state="translated">이 설정은 또한 &lt;code&gt;TestBed.get()&lt;/code&gt; 을 호출 하여 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; 서비스와 조롱 컨트롤러 를 주입 하여 테스트 중에 참조 할 수 있도록합니다.</target>
        </trans-unit>
        <trans-unit id="456f1cff8a28d651f522a6a70eb2cb94a641a08f" translate="yes" xml:space="preserve">
          <source>This setup guide uses the &lt;a href=&quot;https://docs.npmjs.com/cli/install&quot;&gt;npm client&lt;/a&gt; command line interface, which is installed with &lt;code&gt;Node.js&lt;/code&gt; by default.</source>
          <target state="translated">이 설정 안내서는 기본적 으로 &lt;code&gt;Node.js&lt;/code&gt; 와 함께 설치되는 &lt;a href=&quot;https://docs.npmjs.com/cli/install&quot;&gt;npm 클라이언트&lt;/a&gt; 명령 행 인터페이스를 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="92609043e3a5049fe9cf167aad090f47caad57aa" translate="yes" xml:space="preserve">
          <source>This simple rule factory returns the tree without modification. The options are the option values passed through from the &lt;code&gt;ng generate&lt;/code&gt; command.</source>
          <target state="translated">이 간단한 규칙 팩토리는 수정없이 트리를 반환합니다. 옵션은 &lt;code&gt;ng generate&lt;/code&gt; 명령 에서 전달 된 옵션 값 입니다.</target>
        </trans-unit>
        <trans-unit id="3d73db06502687b0e565f94857691c977b98bee9" translate="yes" xml:space="preserve">
          <source>This small test demonstrates how Angular tests can verify a component's visual representation&amp;mdash;something not possible with &lt;a href=&quot;testing#component-class-testing&quot;&gt;component class tests&lt;/a&gt;&amp;mdash;at low cost and without resorting to much slower and more complicated end-to-end tests.</source>
          <target state="translated">이 작은 테스트는 Angular 테스트가 &lt;a href=&quot;testing#component-class-testing&quot;&gt;구성 요소 클래스 테스트로는&lt;/a&gt; 불가능한 구성 요소의 시각적 표현을 저렴하고 더 느리고 복잡한 엔드 투 엔드 테스트에 의존하지 않고 어떻게 확인할 수 있는지 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="cb009288ce29b0288afe49f6ee2aab850b60725f" translate="yes" xml:space="preserve">
          <source>This snapshot reflects the state of the log after the user clicked the &lt;em&gt;Create...&lt;/em&gt; button and then the &lt;em&gt;Destroy...&lt;/em&gt; button.</source>
          <target state="translated">이 스냅 샷은 사용자가 &lt;em&gt;Create ...&lt;/em&gt; 버튼을 클릭 한 다음 &lt;em&gt;Destroy ...&lt;/em&gt; 버튼 을 클릭 한 후의 로그 상태를 반영 합니다.</target>
        </trans-unit>
        <trans-unit id="079dfe1488f95b55bfe4eaaff729c5ed46abb14d" translate="yes" xml:space="preserve">
          <source>This step serves a purpose analogous to &lt;code&gt;&lt;a href=&quot;../api/core/applicationref#tick&quot;&gt;tick()&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;whenStable()&lt;/code&gt; in the earlier &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;()&lt;/code&gt; examples. The balance of the test is the same as those examples.</source>
          <target state="translated">이 단계는 이전 &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; () 및 &lt;code&gt;&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;()&lt;/code&gt; () 예제의 &lt;code&gt;&lt;a href=&quot;../api/core/applicationref#tick&quot;&gt;tick()&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;whenStable()&lt;/code&gt; 과 유사한 목적을 제공합니다 . 테스트의 균형은 해당 예제와 동일합니다.</target>
        </trans-unit>
        <trans-unit id="dd15d4d4538f8653d2b222f1a75f8aaa65446a2d" translate="yes" xml:space="preserve">
          <source>This strategy allows you to continue to build your web application to support multiple browsers, but only load the necessary code that the browser needs.</source>
          <target state="translated">이 전략을 통해 여러 브라우저를 지원하도록 웹 응용 프로그램을 계속 구축 할 수 있지만 브라우저에 필요한 코드 만로드하십시오.</target>
        </trans-unit>
        <trans-unit id="a6549f07c80220a17e94351180403481dcd649c2" translate="yes" xml:space="preserve">
          <source>This strategy allows you to continue to build your web application to support multiple browsers, but only load the necessary code that the browser needs. For more information about how this works, see &lt;a href=&quot;deployment#differential-loading&quot;&gt;Differential Loading&lt;/a&gt; in the &lt;a href=&quot;deployment&quot;&gt;Deployment guide&lt;/a&gt;.</source>
          <target state="translated">이 전략을 통해 여러 브라우저를 지원하도록 웹 응용 프로그램을 계속 구축 할 수 있지만 브라우저에 필요한 코드 만로드하십시오. 작동 방식에 대한 자세한 내용은 &lt;a href=&quot;deployment&quot;&gt;배포 안내서의 &lt;/a&gt;&lt;a href=&quot;deployment#differential-loading&quot;&gt;차등로드&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="d7f27f72ef1db3f4b8e0b64ac49c35d1b3d860d4" translate="yes" xml:space="preserve">
          <source>This strategy is enabled by default.</source>
          <target state="translated">이 전략은 기본적으로 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="b4dc934e925dfc611be024d59208b2dd13b6d211" translate="yes" xml:space="preserve">
          <source>This syntax conforms to the &lt;a href=&quot;http://userguide.icu-project.org/formatparse/messages&quot;&gt;ICU Message Format&lt;/a&gt; as specified in the &lt;a href=&quot;http://cldr.unicode.org/index/cldr-spec/plural-rules&quot;&gt;CLDR pluralization rules&lt;/a&gt;.</source>
          <target state="translated">이 구문 은 &lt;a href=&quot;http://cldr.unicode.org/index/cldr-spec/plural-rules&quot;&gt;CLDR 복수 규칙에&lt;/a&gt; 지정된 &lt;a href=&quot;http://userguide.icu-project.org/formatparse/messages&quot;&gt;ICU 메시지 형식&lt;/a&gt; 을 따릅니다 .</target>
        </trans-unit>
        <trans-unit id="a921404409acb321a0300d0ef76d994ae2a236f1" translate="yes" xml:space="preserve">
          <source>This syntax tells the Angular compiler to read the external files during component compilation.</source>
          <target state="translated">이 구문은 Angular 컴파일러에게 구성 요소 컴파일 중에 외부 파일을 읽도록 지시합니다.</target>
        </trans-unit>
        <trans-unit id="f054420c1ce338910d0afb64bdc92e93d64d0562" translate="yes" xml:space="preserve">
          <source>This technique can improve performance on mobile and low-powered devices and improve the user experience by showing a static first page quickly while the client-side app is loading. The static version can also make your app more visible to web crawlers.</source>
          <target state="translated">이 기술은 클라이언트 측 앱이로드되는 동안 정적 첫 페이지를 빠르게 표시하여 모바일 및 저전력 장치의 성능을 향상시키고 사용자 경험을 향상시킬 수 있습니다. 정적 버전을 사용하면 웹 크롤러가 앱을 더 잘 볼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ac27da6a3425110fb4858d56fa56042a9d64c44f" translate="yes" xml:space="preserve">
          <source>This technique is effective because all browsers implement the &lt;em&gt;same origin policy&lt;/em&gt;. Only code from the website on which cookies are set can read the cookies from that site and set custom headers on requests to that site. That means only your application can read this cookie token and set the custom header. The malicious code on &lt;code&gt;evil.com&lt;/code&gt; can't.</source>
          <target state="translated">이 기술은 모든 브라우저가 &lt;em&gt;동일한 원본 정책을&lt;/em&gt; 구현하기 때문에 효과적 입니다. 쿠키가 설정된 웹 사이트의 코드 만 해당 사이트에서 쿠키를 읽고 해당 사이트에 대한 요청에 사용자 지정 헤더를 설정할 수 있습니다. 즉, 애플리케이션 만이 쿠키 토큰을 읽고 사용자 정의 헤더를 설정할 수 있습니다. &lt;code&gt;evil.com&lt;/code&gt; 의 악성 코드는 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="edaf5e02d43ccc1019d65ebdfbccee03f175b8c8" translate="yes" xml:space="preserve">
          <source>This technique is suitable for setting a single style, but consider the &lt;a href=&quot;template-syntax#ngStyle&quot;&gt;&lt;code&gt;NgStyle&lt;/code&gt;&lt;/a&gt; directive when setting several inline styles at the same time.</source>
          <target state="translated">이 기술은 단일 스타일을 설정하는 데 적합하지만 여러 인라인 스타일을 동시에 설정할 때는 &lt;a href=&quot;template-syntax#ngStyle&quot;&gt; &lt;code&gt;NgStyle&lt;/code&gt; &lt;/a&gt; 지시문을 고려하십시오 .</target>
        </trans-unit>
        <trans-unit id="f819a7b1e0aafa1d2068ac4808d42099765b1fd4" translate="yes" xml:space="preserve">
          <source>This technique works for any attribute of any element.</source>
          <target state="translated">이 기술은 모든 요소의 모든 속성에 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="c1e03a2b5a2ead7f58623d3d33ead88c0cbed81a" translate="yes" xml:space="preserve">
          <source>This tells the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; preloader to immediately load &lt;em&gt;all&lt;/em&gt; lazy loaded routes (routes with a &lt;code&gt;&lt;a href=&quot;../api/router/route#loadChildren&quot;&gt;loadChildren&lt;/a&gt;&lt;/code&gt; property).</source>
          <target state="translated">이렇게하면 &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; 프리 로더가 지연로드 된 &lt;em&gt;모든&lt;/em&gt; 라우트 ( &lt;code&gt;&lt;a href=&quot;../api/router/route#loadChildren&quot;&gt;loadChildren&lt;/a&gt;&lt;/code&gt; 특성 이있는 라우트) 를 즉시로드하도록 지시합니다 .</target>
        </trans-unit>
        <trans-unit id="02a67f3677df899c9872b4c722cacd0ea9415c83" translate="yes" xml:space="preserve">
          <source>This tells the router to match that URL to &lt;code&gt;path: 'heroes'&lt;/code&gt; and display the &lt;code&gt;HeroesComponent&lt;/code&gt; when the URL is something like &lt;code&gt;localhost:4200/heroes&lt;/code&gt;.</source>
          <target state="translated">이것은 라우터에게 해당 URL을 &lt;code&gt;path: 'heroes'&lt;/code&gt; 와 일치 시키고 URL이 &lt;code&gt;localhost:4200/heroes&lt;/code&gt; 와 같은 경우 &lt;code&gt;HeroesComponent&lt;/code&gt; 를 표시하도록 지시 합니다 .</target>
        </trans-unit>
        <trans-unit id="b56327c98c0651adf92a3962b35326d9411155a9" translate="yes" xml:space="preserve">
          <source>This template binds directly to the component's &lt;code&gt;messageService&lt;/code&gt;.</source>
          <target state="translated">이 템플릿은 구성 요소의 &lt;code&gt;messageService&lt;/code&gt; 에 직접 바인딩됩니다 .</target>
        </trans-unit>
        <trans-unit id="9e9c43c15900050160dc8be35d6067a63318aec5" translate="yes" xml:space="preserve">
          <source>This template looks a lot like the &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; repeater in the &lt;code&gt;HeroesComponent&lt;/code&gt; template.</source>
          <target state="translated">이 템플릿은 &lt;code&gt;HeroesComponent&lt;/code&gt; 템플릿 의 &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 리피터 와 매우 비슷합니다 .</target>
        </trans-unit>
        <trans-unit id="d637ab123347ac13fe17a004c73c98b4dddb234f" translate="yes" xml:space="preserve">
          <source>This template uses typical HTML elements like &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt;, and also includes Angular template-syntax elements, &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;{{hero.name}}&lt;/code&gt;, &lt;code&gt;(click)&lt;/code&gt;, &lt;code&gt;[hero]&lt;/code&gt;, and &lt;code&gt;&amp;lt;app-hero-detail&amp;gt;&lt;/code&gt;. The template-syntax elements tell Angular how to render the HTML to the screen, using program logic and data.</source>
          <target state="translated">이 템플릿은 &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; 및 &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; &amp;gt; 와 같은 일반적인 HTML 요소를 사용 하며 Angular 템플릿 구문 요소, &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;{{hero.name}}&lt;/code&gt; , &lt;code&gt;(click)&lt;/code&gt; , &lt;code&gt;[hero]&lt;/code&gt; 및 &lt;code&gt;&amp;lt;app-hero-detail&amp;gt;&lt;/code&gt; . 템플릿 구문 요소는 프로그램 로직과 데이터를 사용하여 HTML을 화면에 렌더링하는 방법을 Angular에 알려줍니다.</target>
        </trans-unit>
        <trans-unit id="33f50f397f4ca96e33bfb10d036f4db70c1735c8" translate="yes" xml:space="preserve">
          <source>This test expects the component to try to navigate to the &lt;code&gt;HeroListComponent&lt;/code&gt;.</source>
          <target state="translated">이 테스트에서는 구성 요소가 &lt;code&gt;HeroListComponent&lt;/code&gt; 로 이동하려고합니다 .</target>
        </trans-unit>
        <trans-unit id="501a5e4c0d88821fa944fe51ad014be796c1b208" translate="yes" xml:space="preserve">
          <source>This test host binds to &lt;code&gt;DashboardHeroComponent&lt;/code&gt; as the &lt;code&gt;DashboardComponent&lt;/code&gt; would but without the noise of the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt;, the &lt;code&gt;HeroService&lt;/code&gt;, or the &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; repeater.</source>
          <target state="translated">이 테스트 호스트는 &lt;code&gt;DashboardHeroComponent&lt;/code&gt; 처럼 &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;HeroService&lt;/code&gt; 또는 &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt; 리피터 의 노이즈없이 &lt;code&gt;DashboardComponent&lt;/code&gt; 바인딩합니다 .</target>
        </trans-unit>
        <trans-unit id="6f65de663612898c193d6874b17e0426d7e59e43" translate="yes" xml:space="preserve">
          <source>This testing module configuration shows three important differences:</source>
          <target state="translated">이 테스트 모듈 구성은 세 가지 중요한 차이점을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="750aba5f80080e328a3f7b0b79fa476b6891b62b" translate="yes" xml:space="preserve">
          <source>This text wraps around to the right of the floating &quot;flying hero&quot; image.</source>
          <target state="translated">이 텍스트는 떠 다니는 &quot;비행 영웅&quot;이미지의 오른쪽으로 둘러 쌉니다.</target>
        </trans-unit>
        <trans-unit id="113e418e350b558b02724dea8b12bbcc059f4851" translate="yes" xml:space="preserve">
          <source>This time you'll be navigating in the opposite direction, from the &lt;code&gt;HeroDetailComponent&lt;/code&gt; to the &lt;code&gt;HeroListComponent&lt;/code&gt;.</source>
          <target state="translated">이번에는 당신은에서 반대 방향으로 이동 수 있습니다 &lt;code&gt;HeroDetailComponent&lt;/code&gt; 받는 &lt;code&gt;HeroListComponent&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="cefc645993bf706c88455dca56b4abc1e03879d3" translate="yes" xml:space="preserve">
          <source>This time, in addition to declaring the &lt;em&gt;component-under-test&lt;/em&gt;, the configuration adds a &lt;code&gt;UserService&lt;/code&gt; provider to the &lt;code&gt;providers&lt;/code&gt; list. But not the real &lt;code&gt;UserService&lt;/code&gt;.</source>
          <target state="translated">이번에는 &lt;em&gt;테스트 대상 구성 요소&lt;/em&gt; 를 선언하는 것 외에도 구성에서 &lt;code&gt;UserService&lt;/code&gt; 공급자를 &lt;code&gt;providers&lt;/code&gt; 목록에 추가 합니다. 그러나 실제 &lt;code&gt;UserService&lt;/code&gt; 는 아닙니다 .</target>
        </trans-unit>
        <trans-unit id="af2165b1138d7807abb0f9b20b74189222b793e4" translate="yes" xml:space="preserve">
          <source>This time, the value of &lt;code&gt;'popup'&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;. That's not a route, but it is a legitimate value. Setting the popup &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; to &lt;code&gt;null&lt;/code&gt; clears the outlet and removes the secondary popup route from the current URL.</source>
          <target state="translated">이번에는 &lt;code&gt;'popup'&lt;/code&gt; 값 이 &lt;code&gt;null&lt;/code&gt; 입니다. 그것은 경로가 아니지만 합법적 인 가치입니다. 팝업 &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; 을 &lt;code&gt;null&lt;/code&gt; 로 설정하면 콘센트가 지워지고 현재 URL에서 보조 팝업 경로가 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="4d58a98a6b42341e9f6814cfed96b99344da3020" translate="yes" xml:space="preserve">
          <source>This tutorial introduces you to the essentials of Angular by walking you through building a simple e-commerce site with a catalog, shopping cart, and check-out form. It uses the &lt;a href=&quot;https://stackblitz.com/&quot;&gt;StackBlitz&lt;/a&gt; online development environment so you can get started right away.</source>
          <target state="translated">이 튜토리얼은 카탈로그, 쇼핑 카트 및 체크 아웃 양식으로 간단한 전자 상거래 사이트를 구축하는 과정을 안내하여 Angular의 필수 사항을 소개합니다. 그것은 사용 &lt;a href=&quot;https://stackblitz.com/&quot;&gt;StackBlitz&lt;/a&gt; 당신이 바로 시작할 수 있도록 온라인 개발 환경을.</target>
        </trans-unit>
        <trans-unit id="4be47255fc4c07ae300b4da88c16205f91d089d6" translate="yes" xml:space="preserve">
          <source>This tutorial sample mimics communication with a remote data server by using the &lt;a href=&quot;https://github.com/angular/in-memory-web-api&quot;&gt;In-memory Web API&lt;/a&gt; module.</source>
          <target state="translated">이 학습서 샘플은 &lt;a href=&quot;https://github.com/angular/in-memory-web-api&quot;&gt;인 메모리 웹 API&lt;/a&gt; 모듈 을 사용하여 원격 데이터 서버와의 통신을 모방 합니다.</target>
        </trans-unit>
        <trans-unit id="d9d67a376ed76f9dd9f3998880f05555c2f237ea" translate="yes" xml:space="preserve">
          <source>This user experience is the developer's choice. Some developers want the message to display at all times. If you ignore the &lt;code&gt;pristine&lt;/code&gt; state, you would hide the message only when the value is valid. If you arrive in this component with a new (blank) hero or an invalid hero, you'll see the error message immediately, before you've done anything.</source>
          <target state="translated">이 사용자 경험은 개발자의 선택입니다. 일부 개발자는 메시지가 항상 표시되기를 원합니다. &lt;code&gt;pristine&lt;/code&gt; 상태 를 무시 하면 값이 유효한 경우에만 메시지를 숨길 수 있습니다. 새로운 (공백) 영웅이나 유효하지 않은 영웅과 함께이 구성 요소에 도착하면 아무 작업도 수행하기 전에 즉시 오류 메시지가 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="7fe52a203b046ba6736edeae46dcac27488617b9" translate="yes" xml:space="preserve">
          <source>This version of the &lt;code&gt;HeroListComponent&lt;/code&gt; gets heroes from the &lt;code&gt;HEROES&lt;/code&gt; array, an in-memory collection defined in a separate &lt;code&gt;mock-heroes&lt;/code&gt; file.</source>
          <target state="translated">이 버전의 &lt;code&gt;HeroListComponent&lt;/code&gt; 는 별도의 &lt;code&gt;mock-heroes&lt;/code&gt; 파일에 정의 된 메모리 내 컬렉션 인 &lt;code&gt;HEROES&lt;/code&gt; 배열 에서 영웅을 가져 옵니다 .</target>
        </trans-unit>
        <trans-unit id="5ac5c50e4fc7fc8f690f46a387d86d6cd4e8a480" translate="yes" xml:space="preserve">
          <source>This will call the &lt;code&gt;ls&lt;/code&gt; command instead of the &lt;code&gt;touch&lt;/code&gt; command. Because we did not override the &lt;em&gt;args&lt;/em&gt; option, it will list information about the &lt;code&gt;src/main.ts&lt;/code&gt; file (the default value provided for the target).</source>
          <target state="translated">&lt;code&gt;touch&lt;/code&gt; 명령 대신 &lt;code&gt;ls&lt;/code&gt; 명령 을 호출합니다 . &lt;em&gt;args&lt;/em&gt; 옵션을 재정의하지 않았으므로 &lt;code&gt;src/main.ts&lt;/code&gt; 파일 (대상에 제공된 기본값) 에 대한 정보가 나열됩니다 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="9312003f28c3729ef201319a34848ad897938e4a" translate="yes" xml:space="preserve">
          <source>This will install the command &lt;code&gt;ng&lt;/code&gt; into your system, which is the command you use to create new workspaces, new projects, serve your application during development, or produce builds that can be shared or distributed.</source>
          <target state="translated">그러면 &lt;code&gt;ng&lt;/code&gt; 명령이 시스템에 설치됩니다.이 명령 은 새 작업 공간, 새 프로젝트를 작성하거나 개발 중에 응용 프로그램을 제공하거나 공유 또는 분배 할 수있는 빌드를 작성하는 데 사용하는 명령입니다.</target>
        </trans-unit>
        <trans-unit id="9bb5987cb75dc888fb534638627a4e1a3c031126" translate="yes" xml:space="preserve">
          <source>This will not work in a real app. You're getting away with it now because the service currently returns &lt;em&gt;mock heroes&lt;/em&gt;. But soon the app will fetch heroes from a remote server, which is an inherently &lt;em&gt;asynchronous&lt;/em&gt; operation.</source>
          <target state="translated">실제 앱에서는 작동하지 않습니다. 이 서비스는 현재 &lt;em&gt;모의 영웅을&lt;/em&gt; 반환하기 때문에 지금 당장 벗어나고 있습니다 . 그러나 곧 앱은 원격 서버에서 영웅을 가져옵니다 . 이는 본질적으로 &lt;em&gt;비동기&lt;/em&gt; 작업입니다.</target>
        </trans-unit>
        <trans-unit id="c8a4d0a01462100bf09cd9c7a8827ae3dcb63eb8" translate="yes" xml:space="preserve">
          <source>This will produce the files that you need to deploy.</source>
          <target state="translated">배포해야하는 파일이 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="9b630be3829ca4b43f0c0f13ae624094630240e5" translate="yes" xml:space="preserve">
          <source>This will run the &lt;code&gt;touch&lt;/code&gt; command on the &lt;code&gt;src/main.ts&lt;/code&gt; file.</source>
          <target state="translated">&lt;code&gt;src/main.ts&lt;/code&gt; 파일 에서 &lt;code&gt;touch&lt;/code&gt; 명령 이 실행 됩니다.</target>
        </trans-unit>
        <trans-unit id="4fb5514b164bef25ddca759f879da4b392519146" translate="yes" xml:space="preserve">
          <source>This will set the active-link class on the div tag if the url is either '/user/jim' or '/user/bob'.</source>
          <target state="translated">URL이 '/ user / jim'또는 '/ user / bob'인 경우 div 태그에서 활성 링크 클래스를 설정합니다.</target>
        </trans-unit>
        <trans-unit id="d430f7cac5ea324357497bb1e85a43cc3ac98f1a" translate="yes" xml:space="preserve">
          <source>This won't work if the service is an application-wide singleton. Every component would share the same service instance, and each component would overwrite the tax return that belonged to another hero.</source>
          <target state="translated">서비스가 응용 프로그램 전체의 싱글 톤 인 경우 작동하지 않습니다. 모든 구성 요소는 동일한 서비스 인스턴스를 공유하며 각 구성 요소는 다른 영웅에 속한 세금 보고서를 덮어 씁니다.</target>
        </trans-unit>
        <trans-unit id="66ee2090966d8e328167f9dd11bd703bc89361b7" translate="yes" xml:space="preserve">
          <source>This worked well, but there's a better way. If you were using a real world API, there might be some delay before the data to display is returned from the server. You don't want to display a blank component while waiting for the data.</source>
          <target state="translated">이것은 잘 작동했지만 더 좋은 방법이 있습니다. 실제 API를 사용하는 경우 표시 할 데이터가 서버에서 리턴되기 전에 약간의 지연이있을 수 있습니다. 데이터를 기다리는 동안 빈 구성 요소를 표시하고 싶지 않습니다.</target>
        </trans-unit>
        <trans-unit id="3030da2c36d0ffb5bb1a38f3d3ab06bd0ba9aebe" translate="yes" xml:space="preserve">
          <source>Those developers may still use HTML5 URLs by taking two remedial steps:</source>
          <target state="translated">이러한 개발자는 두 가지 수정 단계를 수행하여 HTML5 URL을 계속 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a4c3697ed1231b34be5a06d277ed21d7aec6aac6" translate="yes" xml:space="preserve">
          <source>Those three steps look like the following. In the file where you create your directive, export it. The following example, named &lt;code&gt;ItemDirective&lt;/code&gt; is the default directive structure that the CLI generates in its own file, &lt;code&gt;item.directive.ts&lt;/code&gt;:</source>
          <target state="translated">이 세 단계는 다음과 같습니다. 지시문을 작성하는 파일에서 내보내십시오. &lt;code&gt;ItemDirective&lt;/code&gt; 라는 다음 예제 는 CLI가 자체 파일 &lt;code&gt;item.directive.ts&lt;/code&gt; 에서 생성하는 기본 지시문 구조입니다 .</target>
        </trans-unit>
        <trans-unit id="7282182d46ba8591a3fb80eb88450d7e6e0fb75f" translate="yes" xml:space="preserve">
          <source>Though &lt;a href=&quot;template-syntax#template-expressions&quot;&gt;template expressions&lt;/a&gt; shouldn't have &lt;a href=&quot;template-syntax#avoid-side-effects&quot;&gt;side effects&lt;/a&gt;, template statements usually do. The &lt;code&gt;deleteItem()&lt;/code&gt; method does have a side effect: it deletes an item.</source>
          <target state="translated">&lt;a href=&quot;template-syntax#template-expressions&quot;&gt;템플릿 표현식&lt;/a&gt; 에는 &lt;a href=&quot;template-syntax#avoid-side-effects&quot;&gt;부작용이&lt;/a&gt; 없어야 하지만 일반적으로 템플릿 문 에는 부작용 이 없습니다 . &lt;code&gt;deleteItem()&lt;/code&gt; 메소드는 부작용을 가지고 :이 항목을 삭제합니다.</target>
        </trans-unit>
        <trans-unit id="8b45283f651e66eedd857eedb3d79dccba5ecff8" translate="yes" xml:space="preserve">
          <source>Though &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; provides the 🌻 (sunflower), the app renders the 🌺 (red hibiscus) because &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; causes the current injector to skip itself and look to its parent.</source>
          <target state="translated">&lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; 는 🌻 (해바라기)을 제공 하지만 &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; 인해 현재 인젝터가 자체적으로 건너 뛰고 부모를 찾게 되므로 앱은 🌺 (빨간색 히비스커스)을 렌더링합니다 .</target>
        </trans-unit>
        <trans-unit id="1075a1e80e7f93a1f8a46fd5766714abf59a2e2d" translate="yes" xml:space="preserve">
          <source>Though &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; often appear together in apps, you can use them separately. If the nested component is such that it only needs to send data to its parent, you wouldn't need an &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt;, only an &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt;. The reverse is also true in that if the child only needs to receive data from the parent, you'd only need &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt;.</source>
          <target state="translated">하지만 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; 와 &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; 자주 개별적으로 사용할 수있는 앱에 함께 나타납니다. 중첩 된 구성 요소가 단지 부모에 데이터를 보낼 필요가 같은 경우, 당신은 필요가 없을 것입니다 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; , 단지 &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; . 자식이 부모로부터 데이터를 수신 해야하는 경우 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; 만 필요하다는 점에서도 반대입니다 .</target>
        </trans-unit>
        <trans-unit id="76c63fbb51bf2e00185f379ad812f423247e2cf5" translate="yes" xml:space="preserve">
          <source>Though &lt;em&gt;highlight&lt;/em&gt; would be a more concise selector than &lt;em&gt;appHighlight&lt;/em&gt; and it would work, the best practice is to prefix selector names to ensure they don't conflict with standard HTML attributes. This also reduces the risk of colliding with third-party directive names. The CLI added the &lt;code&gt;app&lt;/code&gt; prefix for you.</source>
          <target state="translated">하지만 &lt;em&gt;하이라이트는&lt;/em&gt; 보다 더 간결 선택이 될 것입니다 &lt;em&gt;appHighlight&lt;/em&gt; 하고 일하는 것이, 가장 좋은 방법은 표준 HTML 속성과 충돌하지 않도록하는 접두사 선택기 이름이다. 또한 타사 지시문 이름과 충돌 할 위험이 줄어 듭니다. CLI가 &lt;code&gt;app&lt;/code&gt; 접두사를 추가했습니다 .</target>
        </trans-unit>
        <trans-unit id="e7794513d8ab6b404efc84e17a85b45fb430b7cb" translate="yes" xml:space="preserve">
          <source>Though the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; decorator has an &lt;code&gt;entryComponents&lt;/code&gt; array, most of the time you won't have to explicitly set any entry components because Angular adds components listed in &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule#bootstrap&quot;&gt;NgModule.bootstrap&lt;/a&gt;&lt;/code&gt; and those in route definitions to entry components automatically. Though these two mechanisms account for most entry components, if your app happens to bootstrap or dynamically load a component by type imperatively, you must add it to &lt;code&gt;entryComponents&lt;/code&gt; explicitly.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 데코레이터에 &lt;code&gt;entryComponents&lt;/code&gt; 배열 이 있지만 Angular는 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule#bootstrap&quot;&gt;NgModule.bootstrap&lt;/a&gt;&lt;/code&gt; 나열된 구성 요소 와 경로 정의에있는 구성 요소를 자동으로 입력 구성 요소에 추가하므로 대부분 입력 구성 요소를 명시 적으로 설정할 필요가 없습니다 . 이 두 가지 메커니즘이 대부분의 입력 구성 요소를 설명하지만 앱이 유형별로 구성 요소를 부트 스트랩하거나 동적으로로드하는 경우 항목을 명시 적으로 &lt;code&gt;entryComponents&lt;/code&gt; 에 추가해야합니다 .</target>
        </trans-unit>
        <trans-unit id="c0c89634e88d4f46eb100cf74294ba38817d4923" translate="yes" xml:space="preserve">
          <source>Though the target name is usually the name of a property, there is an automatic attribute-to-property mapping in Angular for several common attributes. These include &lt;code&gt;class&lt;/code&gt;/&lt;code&gt;className&lt;/code&gt;, &lt;code&gt;innerHtml&lt;/code&gt;/&lt;code&gt;innerHTML&lt;/code&gt;, and &lt;code&gt;tabindex&lt;/code&gt;/&lt;code&gt;tabIndex&lt;/code&gt;.</source>
          <target state="translated">대상 이름은 일반적으로 속성 이름이지만 Angular에는 몇 가지 일반적인 속성에 대한 자동 속성 대 속성 매핑이 있습니다. 여기에는 &lt;code&gt;class&lt;/code&gt; / &lt;code&gt;className&lt;/code&gt; , &lt;code&gt;innerHtml&lt;/code&gt; / &lt;code&gt;innerHTML&lt;/code&gt; 및 &lt;code&gt;tabindex&lt;/code&gt; / &lt;code&gt;tabIndex&lt;/code&gt; 가 포함됩니다 .</target>
        </trans-unit>
        <trans-unit id="6bdc5ca158e9ca814a1efdfbdd56e2547c9decdf" translate="yes" xml:space="preserve">
          <source>Though you can limit access to a service by providing it in a lazy loaded module or providing it in a component, providing services in a component can lead to multiple instances of those services. Thus, the lazy loading is preferable.</source>
          <target state="translated">지연로드 된 모듈로 제공하거나 구성 요소에서 제공하여 서비스에 대한 액세스를 제한 할 수 있지만 구성 요소에 서비스를 제공하면 해당 서비스의 여러 인스턴스가 발생할 수 있습니다. 따라서, 지연 로딩이 바람직하다.</target>
        </trans-unit>
        <trans-unit id="90e178c89e79710297fa1f0d8ae614004845fcca" translate="yes" xml:space="preserve">
          <source>Though you can provide services by lazy loading modules, not all services can be lazy loaded. For instance, some modules only work in the root module, such as the Router. The Router works with the global location object in the browser.</source>
          <target state="translated">지연로드 모듈로 서비스를 제공 할 수 있지만 모든 서비스가 지연로드 될 수있는 것은 아닙니다. 예를 들어 일부 모듈은 라우터와 같은 루트 모듈에서만 작동합니다. 라우터는 브라우저에서 전역 위치 개체와 함께 작동합니다.</target>
        </trans-unit>
        <trans-unit id="4ac43ae059a7abe0952abd693cdca4e55b219478" translate="yes" xml:space="preserve">
          <source>Though you can type the URL into the address bar, a navigation UI is easier for the user and more common. Replace the default placeholder markup in &lt;code&gt;app.component.html&lt;/code&gt; with a custom nav so you can easily navigate to your modules in the browser:</source>
          <target state="translated">주소 표시 줄에 URL을 입력 할 수 있지만 탐색 UI가 사용자에게 더 쉽고 일반적입니다. &lt;code&gt;app.component.html&lt;/code&gt; 의 기본 자리 표시 자 마크 업을 맞춤 탐색 메뉴 로 바꾸면 브라우저에서 모듈로 쉽게 이동할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="528e1795eb218a5f3792808cc39b7bcce25ad8db" translate="yes" xml:space="preserve">
          <source>Though you could technically set the &lt;code&gt;[attr.disabled]&lt;/code&gt; attribute binding, the values are different in that the property binding requires to a boolean value, while its corresponding attribute binding relies on whether the value is &lt;code&gt;null&lt;/code&gt; or not. Consider the following:</source>
          <target state="translated">기술적으로 &lt;code&gt;[attr.disabled]&lt;/code&gt; 속성 바인딩을 설정할 수는 있지만 속성 바인딩에 필요한 값은 부울 값으로 다르지만 해당 속성 바인딩은 값이 &lt;code&gt;null&lt;/code&gt; 인지 여부에 따라 달라집니다 . 다음을 고려하세요:</target>
        </trans-unit>
        <trans-unit id="171a82320fbdf7d2e2689bc12c98963504c6696d" translate="yes" xml:space="preserve">
          <source>Three instances of &lt;code&gt;HeroBioComponent&lt;/code&gt; can't share the same instance of &lt;code&gt;HeroCacheService&lt;/code&gt;, as they'd be competing with each other to determine which hero to cache.</source>
          <target state="translated">3 개의 &lt;code&gt;HeroBioComponent&lt;/code&gt; 인스턴스는 서로 경쟁하여 캐시 할 영웅을 결정 하므로 동일한 &lt;code&gt;HeroCacheService&lt;/code&gt; 인스턴스를 공유 할 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="5d80c7ef855b73b71c4ca5c1c8a2d8119c7fa21b" translate="yes" xml:space="preserve">
          <source>Three of the common, built-in structural directives&amp;mdash;&lt;a href=&quot;template-syntax#ngIf&quot;&gt;NgIf&lt;/a&gt;, &lt;a href=&quot;template-syntax#ngFor&quot;&gt;NgFor&lt;/a&gt;, and &lt;a href=&quot;template-syntax#ngSwitch&quot;&gt;NgSwitch...&lt;/a&gt;&amp;mdash;are described in the &lt;a href=&quot;template-syntax&quot;&gt;&lt;em&gt;Template Syntax&lt;/em&gt;&lt;/a&gt; guide and seen in samples throughout the Angular documentation. Here's an example of them in a template:</source>
          <target state="translated">세 가지 일반적인 내장 구조 지시문 인 &lt;a href=&quot;template-syntax#ngIf&quot;&gt;NgIf&lt;/a&gt; , &lt;a href=&quot;template-syntax#ngFor&quot;&gt;NgFor&lt;/a&gt; 및 &lt;a href=&quot;template-syntax#ngSwitch&quot;&gt;NgSwitch ...&lt;/a&gt; 는 &lt;a href=&quot;template-syntax&quot;&gt;&lt;em&gt;템플릿 구문&lt;/em&gt;&lt;/a&gt; 안내서에 설명되어 있으며 Angular 설명서 전체의 샘플에서 볼 수 있습니다. 템플릿에 포함 된 예는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="8703c0daee7a3560153b94bc34a950b511daab36" translate="yes" xml:space="preserve">
          <source>Three points of special interest:</source>
          <target state="translated">세 가지 특별한 관심 사항 :</target>
        </trans-unit>
        <trans-unit id="6b164df9c4f94a91727830fddbf131671bff71ec" translate="yes" xml:space="preserve">
          <source>Three providers tell the JIT compiler how to translate the template texts for a particular language while compiling the app:</source>
          <target state="translated">세 명의 공급자가 JIT 컴파일러에게 앱을 컴파일하는 동안 특정 언어의 템플릿 텍스트를 번역하는 방법을 알려줍니다.</target>
        </trans-unit>
        <trans-unit id="ed12cc77bbd83748afc157b996ead876c3c5517c" translate="yes" xml:space="preserve">
          <source>Through the &lt;code&gt;valueChanges&lt;/code&gt; observable where you can listen for changes in the form's value in the template using &lt;code&gt;&lt;a href=&quot;../api/common/asyncpipe&quot;&gt;AsyncPipe&lt;/a&gt;&lt;/code&gt; or in the component class using the &lt;code&gt;subscribe()&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/asyncpipe&quot;&gt;AsyncPipe&lt;/a&gt;&lt;/code&gt; 를 사용하는 템플릿 또는 &lt;code&gt;subscribe()&lt;/code&gt; 메서드를 사용하는 구성 요소 클래스에서 폼 값의 변경 내용을들을 수 있는 &lt;code&gt;valueChanges&lt;/code&gt; 관찰 가능을 통해</target>
        </trans-unit>
        <trans-unit id="5a4cab0ebea476f32aa1e1c5fba91f40707b2ad6" translate="yes" xml:space="preserve">
          <source>Throughout this guide, you'll see a directive spelled in both &lt;em&gt;UpperCamelCase&lt;/em&gt; and &lt;em&gt;lowerCamelCase&lt;/em&gt;. Already you've seen &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt;. There's a reason. &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; refers to the directive &lt;em&gt;class&lt;/em&gt;; &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; refers to the directive's &lt;em&gt;attribute name&lt;/em&gt;.</source>
          <target state="translated">이 안내서 전체에서 &lt;em&gt;UpperCamelCase&lt;/em&gt; 와 &lt;em&gt;lowerCamelCase&lt;/em&gt; 에 지시문이 있습니다. 이미 &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; 를 보았습니다 . 이유가 있습니다. &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; 는 지시어 &lt;em&gt;클래스를&lt;/em&gt; 참조한다 ; &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; 는 지시문의 &lt;em&gt;속성 이름을&lt;/em&gt; 나타냅니다 .</target>
        </trans-unit>
        <trans-unit id="f9f4b0f30b3f06e61b21febef173645d29891305" translate="yes" xml:space="preserve">
          <source>Throws</source>
          <target state="translated">Throws</target>
        </trans-unit>
        <trans-unit id="6c82e6dd86807ee3db07e3c82bec1ae1ce00b08b" translate="yes" xml:space="preserve">
          <source>Time</source>
          <target state="translated">Time</target>
        </trans-unit>
        <trans-unit id="f7ea2d8763887c41cd7da975aaf8c487045171ac" translate="yes" xml:space="preserve">
          <source>Time passes and application logic triggers lazy loading of an NgModule. Angular must add the lazy-loaded module's providers to an injector somewhere. It can't add them to the app root injector because that injector is closed to new providers. So Angular creates a new child injector for the lazy-loaded module context.</source>
          <target state="translated">시간이 지나고 애플리케이션 로직이 NgModule의 지연로드를 트리거합니다. Angular는 지연로드 모듈의 공급자를 인젝터에 어딘가에 추가해야합니다. 인젝터가 새 공급자에게 닫혀 있기 때문에 앱 루트 인젝터에 추가 할 수 없습니다. 따라서 Angular는 지연로드 모듈 컨텍스트에 대한 새로운 하위 인젝터를 만듭니다.</target>
        </trans-unit>
        <trans-unit id="8f86764c71eb5f28fd785ba95ea223af744160bb" translate="yes" xml:space="preserve">
          <source>Timezone of the formatted text will be the local system timezone of the end-user's machine.</source>
          <target state="translated">형식이 지정된 텍스트의 시간대는 최종 사용자 컴퓨터의 로컬 시스템 시간대입니다.</target>
        </trans-unit>
        <trans-unit id="ff73d9b2c838aef0837103246944b6eeaac4e811" translate="yes" xml:space="preserve">
          <source>Tip: In the &lt;a href=&quot;api&quot;&gt;API reference section&lt;/a&gt; of this doc site, deprecated APIs are indicated by &lt;del&gt;strikethrough.&lt;/del&gt; You can filter the API list by &lt;a href=&quot;api?status=deprecated&quot;&gt;&lt;strong&gt;Status: deprecated&lt;/strong&gt;&lt;/a&gt;.</source>
          <target state="translated">팁 : 이 문서 사이트 의 &lt;a href=&quot;api&quot;&gt;API 참조 섹션&lt;/a&gt; 에서 더 이상 사용되지 않는 API는&lt;del&gt;취소 선.&lt;/del&gt;&lt;a href=&quot;api?status=deprecated&quot;&gt;&lt;strong&gt;Status : deprecated로&lt;/strong&gt;&lt;/a&gt; API 목록을 필터링 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="768e0c1c69573fb588f61f1308a015c11468e05f" translate="yes" xml:space="preserve">
          <source>Title</source>
          <target state="translated">Title</target>
        </trans-unit>
        <trans-unit id="1ef4826ff87f22d637cb47eb360c1525fcf04ada" translate="yes" xml:space="preserve">
          <source>Title text should be in &quot;Title Case&quot;, which means that you use capital letters to start the first words and all &lt;em&gt;principal&lt;/em&gt; words. Use lower case letters for &lt;em&gt;secondary&lt;/em&gt; words such as &quot;in&quot;, &quot;of&quot;, and &quot;the&quot;.</source>
          <target state="translated">제목 텍스트는 &quot;제목 대소 문자&quot;로되어 있어야합니다 . 즉, 대문자를 사용하여 첫 단어와 모든 &lt;em&gt;기본&lt;/em&gt; 단어 를 시작해야합니다 . &quot;in&quot;, &quot;of&quot;및 &quot;the&quot;와 같은 &lt;em&gt;보조&lt;/em&gt; 단어 에는 소문자를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="0443511f0f0d69e0669b6cc477969ba0177c046d" translate="yes" xml:space="preserve">
          <source>TitleCasePipe</source>
          <target state="translated">TitleCasePipe</target>
        </trans-unit>
        <trans-unit id="ed1a0b0c87e134832acc7d87c80e1e27c802b764" translate="yes" xml:space="preserve">
          <source>To access properties that are defined in an interface, you must explicitly convert the Object you get from the JSON to the required response type. For example, the following &lt;code&gt;subscribe&lt;/code&gt; callback receives &lt;code&gt;data&lt;/code&gt; as an Object, and then type-casts it in order to access the properties.</source>
          <target state="translated">인터페이스에 정의 된 특성에 액세스하려면 JSON에서 가져온 오브젝트를 필요한 응답 유형으로 명시 적으로 변환해야합니다. 예를 들어, 다음 &lt;code&gt;subscribe&lt;/code&gt; 콜백은 &lt;code&gt;data&lt;/code&gt; 를 Object로 수신 한 다음 속성에 액세스하기 위해 데이터 를 타입 캐스팅합니다.</target>
        </trans-unit>
        <trans-unit id="612822e1f2a2307aaa6e2b3ed143cfc5b79f8e35" translate="yes" xml:space="preserve">
          <source>To achieve this effect, extend the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; tag with the following:</source>
          <target state="translated">이 효과를 얻으려면 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 태그를 다음과 같이 확장하십시오 .</target>
        </trans-unit>
        <trans-unit id="4de9b850b6bc48b2b817512c2db67f3f4f4de00a" translate="yes" xml:space="preserve">
          <source>To add a hero, this app only needs the hero's name. You can use an &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; element paired with an add button.</source>
          <target state="translated">영웅을 추가하려면이 앱에 영웅 이름 만 있으면됩니다. 추가 버튼과 함께 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 요소를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="da8e56238639cdc891b1d4ed923efdcffe46b6f3" translate="yes" xml:space="preserve">
          <source>To add a new &lt;code&gt;devDependency&lt;/code&gt;, use either one of the following commands:</source>
          <target state="translated">새로운 &lt;code&gt;devDependency&lt;/code&gt; 를 추가하려면 다음 명령 중 하나를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="27d7686824adeea94d6f50645d6b9afbe94609dd" translate="yes" xml:space="preserve">
          <source>To add a new dependency, use the &lt;a href=&quot;cli/add&quot;&gt;&lt;code&gt;ng add&lt;/code&gt;&lt;/a&gt; command.</source>
          <target state="translated">새로운 종속성을 추가하려면 &lt;a href=&quot;cli/add&quot;&gt; &lt;code&gt;ng add&lt;/code&gt; &lt;/a&gt; 명령을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="f457092233f40d2f34e89cbae624605c9b59951d" translate="yes" xml:space="preserve">
          <source>To add a schematic to an existing collection, use the same command you use to start a new schematics project, but run the command inside the project folder.</source>
          <target state="translated">기존 컬렉션에 회로도를 추가하려면 새 회로도 프로젝트를 시작하는 데 사용하는 것과 동일한 명령을 사용하지만 프로젝트 폴더 내에서 명령을 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="e0dff7476603a4365ce04e28daa6e5ae648874f0" translate="yes" xml:space="preserve">
          <source>To add a validator to the &lt;code&gt;&lt;a href=&quot;../api/forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt;, pass the new validator in as the second argument on creation.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 에 유효성 검증기를 추가하려면 작성시 두 번째 인수로 새 유효성 검증기를 전달하십시오.</target>
        </trans-unit>
        <trans-unit id="b7c21a740943c10dfa15804fca8321cd2e41101e" translate="yes" xml:space="preserve">
          <source>To add another product, click &quot;My Store&quot; to return to the product list. Repeat the steps above.</source>
          <target state="translated">다른 제품을 추가하려면 &quot;내 상점&quot;을 클릭하여 제품 목록으로 돌아가십시오. 위 단계를 반복하십시오.</target>
        </trans-unit>
        <trans-unit id="af30217cecee494619d1758d399f71f84dae729e" translate="yes" xml:space="preserve">
          <source>To add artifacts to a project, your schematic needs its own template files. Schematic templates support special syntax to execute code and variable substitution.</source>
          <target state="translated">프로젝트에 아티팩트를 추가하려면 회로도에 자체 템플릿 파일이 필요합니다. 회로도 템플릿은 코드 및 변수 대체를 실행하기위한 특수 구문을 지원합니다.</target>
        </trans-unit>
        <trans-unit id="c3d2051452de0323eb6efd5aedc607498069cdae" translate="yes" xml:space="preserve">
          <source>To add or remove a &lt;em&gt;single&lt;/em&gt; class, use &lt;a href=&quot;template-syntax#class-binding&quot;&gt;class binding&lt;/a&gt; rather than &lt;code&gt;&lt;a href=&quot;../api/common/ngclass&quot;&gt;NgClass&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;단일&lt;/em&gt; 클래스 를 추가하거나 제거하려면 &lt;code&gt;&lt;a href=&quot;../api/common/ngclass&quot;&gt;NgClass&lt;/a&gt;&lt;/code&gt; 대신 &lt;a href=&quot;template-syntax#class-binding&quot;&gt;클래스 바인딩을&lt;/a&gt; 사용 하십시오 .</target>
        </trans-unit>
        <trans-unit id="e9da25919d51d1a85e0005bea2eb758313daa6fe" translate="yes" xml:space="preserve">
          <source>To add paths, use the &lt;code&gt;stylePreprocessorOptions&lt;/code&gt; option:</source>
          <target state="translated">경로를 추가하려면 &lt;code&gt;stylePreprocessorOptions&lt;/code&gt; 옵션을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="496b7ad1d0a0eed5827dc1a97fd622e7f8d94e93" translate="yes" xml:space="preserve">
          <source>To add the component to the template, you call &lt;code&gt;createComponent()&lt;/code&gt; on &lt;code&gt;&lt;a href=&quot;../api/core/viewcontainerref&quot;&gt;ViewContainerRef&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">컴포넌트를 템플릿에 추가하려면 &lt;code&gt;&lt;a href=&quot;../api/core/viewcontainerref&quot;&gt;ViewContainerRef&lt;/a&gt;&lt;/code&gt; 에서 &lt;code&gt;createComponent()&lt;/code&gt; 를 호출하십시오 .</target>
        </trans-unit>
        <trans-unit id="987b409e8bf18353ecffd982c4a6027176175f26" translate="yes" xml:space="preserve">
          <source>To add the schematics to the library bundle, add scripts to the library's &lt;code&gt;package.json&lt;/code&gt; file.</source>
          <target state="translated">라이브러리 번들에 회로도를 추가하려면 라이브러리의 &lt;code&gt;package.json&lt;/code&gt; 파일에 스크립트를 추가 하십시오.</target>
        </trans-unit>
        <trans-unit id="1a7a24ab6c517387fe4fb759c2cbbe67fd7e654f" translate="yes" xml:space="preserve">
          <source>To add the stylesheet, open &lt;code&gt;styles.css&lt;/code&gt; and add the following import line at the top:</source>
          <target state="translated">스타일 시트를 추가하려면 &lt;code&gt;styles.css&lt;/code&gt; 를 열고 맨 위에 다음 가져 오기 행을 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="d7a97119528a1219e01d41b64f89cfc156ab2111" translate="yes" xml:space="preserve">
          <source>To add validation to a template-driven form, you add the same validation attributes as you would with &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5/Constraint_validation&quot;&gt;native HTML form validation&lt;/a&gt;. Angular uses directives to match these attributes with validator functions in the framework.</source>
          <target state="translated">템플릿 기반 양식에 유효성 검사를 추가하려면 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5/Constraint_validation&quot;&gt;기본 HTML 양식 유효성 검사&lt;/a&gt; 와 동일한 유효성 검사 속성을 추가합니다 . Angular는 지시문을 사용하여 이러한 속성을 프레임 워크의 유효성 검사기 함수와 일치시킵니다.</target>
        </trans-unit>
        <trans-unit id="ce70784e6a2d0e1e0652eb7bae45da63bd42c69d" translate="yes" xml:space="preserve">
          <source>To alter the request, clone it first and modify the clone before passing it to &lt;code&gt;next.handle()&lt;/code&gt;. You can clone and modify the request in a single step as in this example.</source>
          <target state="translated">요청을 변경하려면 먼저 요청을 복제하고 &lt;code&gt;next.handle()&lt;/code&gt; 전달하기 전에 복제본을 수정하십시오 . 이 예제와 같이 단일 단계에서 요청을 복제하고 수정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="be9073f11e0afa56717eb05e0a7001960b7a1b99" translate="yes" xml:space="preserve">
          <source>To alter where the injector starts looking for &lt;code&gt;FlowerService&lt;/code&gt;, add &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; to the &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt;&lt;code&gt;@&lt;a href=&quot;../api/core/inject&quot;&gt;Inject&lt;/a&gt;&lt;/code&gt; declaration for the &lt;code&gt;FlowerService&lt;/code&gt;. This declaration is in the &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; constructor as shown in &lt;code&gt;child.component.ts&lt;/code&gt;:</source>
          <target state="translated">찾고 인젝터의 시작 위치를 변경하려면 &lt;code&gt;FlowerService&lt;/code&gt; 가 추가 &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; 받는 &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; &lt;code&gt;@&lt;a href=&quot;../api/core/inject&quot;&gt;Inject&lt;/a&gt;&lt;/code&gt; 에 대한 선언 &lt;code&gt;FlowerService&lt;/code&gt; . 이 선언은 &lt;code&gt;child.component.ts&lt;/code&gt; 와 같이 &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; 생성자에 있습니다 .</target>
        </trans-unit>
        <trans-unit id="22c3b2cba8f53e2ffe5dab01bc5b91f88e756346" translate="yes" xml:space="preserve">
          <source>To answer these kinds of questions, you have to create the DOM elements associated with the components, you must examine the DOM to confirm that component state displays properly at the appropriate times, and you must simulate user interaction with the screen to determine whether those interactions cause the component to behave as expected.</source>
          <target state="translated">이러한 종류의 질문에 대답하려면 구성 요소와 연관된 DOM 요소를 작성하고, DOM을 검사하여 구성 요소 상태가 적절한 시간에 올바르게 표시되는지 확인한 후 화면과의 사용자 상호 작용을 시뮬레이션하여 해당 상호 작용이 있는지 판별해야합니다. 구성 요소가 예상대로 작동하도록합니다.</target>
        </trans-unit>
        <trans-unit id="36d091e0c047395da2a56a9e24df2133c4a12994" translate="yes" xml:space="preserve">
          <source>To attach the aliases from your form model, you must add it to the template. Similar to the &lt;code&gt;&lt;a href=&quot;../api/forms/formgroupname&quot;&gt;formGroupName&lt;/a&gt;&lt;/code&gt; input provided by &lt;code&gt;FormGroupNameDirective&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/forms/formarrayname&quot;&gt;formArrayName&lt;/a&gt;&lt;/code&gt; binds communication from the form array instance to the template with &lt;code&gt;FormArrayNameDirective&lt;/code&gt;.</source>
          <target state="translated">양식 모델에서 별명을 첨부하려면 템플리트에 별명을 추가해야합니다. 받는 유사 &lt;code&gt;&lt;a href=&quot;../api/forms/formgroupname&quot;&gt;formGroupName&lt;/a&gt;&lt;/code&gt; 에 의해 제공되는 입력 &lt;code&gt;FormGroupNameDirective&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;../api/forms/formarrayname&quot;&gt;formArrayName&lt;/a&gt;&lt;/code&gt; 을 가진 템플릿 형태로 배열 인스턴스에서 통신 결합 &lt;code&gt;FormArrayNameDirective&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b439955a79dbd833d42d99f6fa91279d6ef67f27" translate="yes" xml:space="preserve">
          <source>To automate that data flow, setup a two-way data binding between the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; form element and the &lt;code&gt;hero.name&lt;/code&gt; property.</source>
          <target state="translated">해당 데이터 흐름을 자동화하려면 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 양식 요소와 &lt;code&gt;hero.name&lt;/code&gt; 속성 사이에 양방향 데이터 바인딩을 설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="c97596f545bc3c4cf4d6e36b38363f8b20cb690b" translate="yes" xml:space="preserve">
          <source>To avoid relying solely on visual cues, you need to make sure your routing code updates focus after page navigation. Use the &lt;code&gt;&lt;a href=&quot;../api/router/navigationend&quot;&gt;NavigationEnd&lt;/a&gt;&lt;/code&gt; event from the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; service to know when to update focus.</source>
          <target state="translated">시각적 단서에만 의존하지 않으려면 페이지 탐색 후 라우팅 코드 업데이트에 초점이 맞춰져야합니다. &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; 서비스 의 &lt;code&gt;&lt;a href=&quot;../api/router/navigationend&quot;&gt;NavigationEnd&lt;/a&gt;&lt;/code&gt; 이벤트를 사용하여 포커스를 업데이트 할시기를 알 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="441327a3b62f31f08d7ebf067ab65b6221abce4c" translate="yes" xml:space="preserve">
          <source>To avoid this expensive operation, you can customize the default tracking algorithm. by supplying the &lt;code&gt;trackBy&lt;/code&gt; option to &lt;code&gt;&lt;a href=&quot;ngforof&quot;&gt;NgForOf&lt;/a&gt;&lt;/code&gt;. &lt;code&gt;trackBy&lt;/code&gt; takes a function that has two arguments: &lt;code&gt;index&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt;. If &lt;code&gt;trackBy&lt;/code&gt; is given, Angular tracks changes by the return value of the function.</source>
          <target state="translated">이 비싼 작업을 피하기 위해 기본 추적 알고리즘을 사용자 정의 할 수 있습니다. 공급에 의해 &lt;code&gt;trackBy&lt;/code&gt; 의 에 옵션 &lt;code&gt;&lt;a href=&quot;ngforof&quot;&gt;NgForOf&lt;/a&gt;&lt;/code&gt; 을 . &lt;code&gt;trackBy&lt;/code&gt; 는 &lt;code&gt;index&lt;/code&gt; 와 &lt;code&gt;&lt;a href=&quot;../core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; 이라는 두 개의 인수가있는 함수를 사용합니다 . 경우 &lt;code&gt;trackBy&lt;/code&gt; 가 주어진 각도 궤도 함수의 리턴 값으로 변경한다.</target>
        </trans-unit>
        <trans-unit id="e8cfc2c0e9fadb81aa5e73b8bb58085461fa57a5" translate="yes" xml:space="preserve">
          <source>To avoid this problem, import the &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; only in the &lt;code&gt;AppModule&lt;/code&gt;, the application &lt;em&gt;root module&lt;/em&gt;.</source>
          <target state="translated">이 문제를 피하려면 응용 프로그램 &lt;em&gt;루트 모듈 인 &lt;/em&gt; &lt;code&gt;AppModule&lt;/code&gt; 에서만 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; 을 가져 오십시오 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="598b94eaf0a9207b1b2f7e14b6bb329e39eadeca" translate="yes" xml:space="preserve">
          <source>To be Angular compatible, an AngularJS component directive should configure these attributes:</source>
          <target state="translated">Angular와 호환 되려면 AngularJS 구성 요소 지시문이 다음 속성을 구성해야합니다.</target>
        </trans-unit>
        <trans-unit id="123c3019791e3c52ebbcbe83a892f8e6e401c499" translate="yes" xml:space="preserve">
          <source>To be notified when new releases are available, follow &lt;a href=&quot;https://twitter.com/angular&quot;&gt;@angular&lt;/a&gt; on Twitter or subscribe to the &lt;a href=&quot;https://blog.angular.io&quot;&gt;Angular blog&lt;/a&gt;.</source>
          <target state="translated">새 릴리스가 출시 될 때 알림을 &lt;a href=&quot;https://twitter.com/angular&quot;&gt;받으려면&lt;/a&gt; Twitter에서 @angular 를 따르 거나 &lt;a href=&quot;https://blog.angular.io&quot;&gt;Angular 블로그를&lt;/a&gt; 구독하십시오 .</target>
        </trans-unit>
        <trans-unit id="dd4700612dcf5dc9d98d073d3fec1a9bda0633ef" translate="yes" xml:space="preserve">
          <source>To be used with watch mode, a builder handler function should return an Observable. Architect subscribes to the Observable until it completes and might reuse it if the builder is scheduled again with the same arguments.</source>
          <target state="translated">감시 모드와 함께 사용하려면 빌더 핸들러 함수가 Observable을 리턴해야합니다. Architect는 Observable을 완료 할 때까지 구독하고 빌더가 동일한 인수로 다시 스케줄 된 경우이를 다시 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c6264ce2f8d176973d84cc88a177c1b8d2ae8301" translate="yes" xml:space="preserve">
          <source>To begin converting your AngularJS application to a hybrid, you need to load the Angular framework. You can see how this can be done with SystemJS by following the instructions in &lt;a href=&quot;upgrade-setup&quot;&gt;Setup for Upgrading to AngularJS&lt;/a&gt; for selectively copying code from the &lt;a href=&quot;https://github.com/angular/quickstart&quot;&gt;QuickStart github repository&lt;/a&gt;.</source>
          <target state="translated">AngularJS 애플리케이션을 하이브리드로 변환하려면 Angular 프레임 워크를로드해야합니다. &lt;a href=&quot;https://github.com/angular/quickstart&quot;&gt;QuickStart github 저장소&lt;/a&gt; 에서 코드를 선택적으로 복사 &lt;a href=&quot;upgrade-setup&quot;&gt;하기 위해 AngularJS&lt;/a&gt; 로 업그레이드하기위한 설정 의 지시 사항에 따라 SystemJS로이를 수행하는 방법을 확인할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ff25a3d91e518e6022fbcb82db9614eb3a86d036" translate="yes" xml:space="preserve">
          <source>To begin testing calls to &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt;, import the &lt;code&gt;&lt;a href=&quot;../api/common/http/testing/httpclienttestingmodule&quot;&gt;HttpClientTestingModule&lt;/a&gt;&lt;/code&gt; and the mocking controller, &lt;code&gt;&lt;a href=&quot;../api/common/http/testing/httptestingcontroller&quot;&gt;HttpTestingController&lt;/a&gt;&lt;/code&gt;, along with the other symbols your tests require.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; 에 대한 호출 테스트를 시작하려면 테스트에 필요한 다른 기호와 함께 &lt;code&gt;&lt;a href=&quot;../api/common/http/testing/httpclienttestingmodule&quot;&gt;HttpClientTestingModule&lt;/a&gt;&lt;/code&gt; 및 조롱 컨트롤러 &lt;code&gt;&lt;a href=&quot;../api/common/http/testing/httptestingcontroller&quot;&gt;HttpTestingController&lt;/a&gt;&lt;/code&gt; 를 가져 오십시오 .</target>
        </trans-unit>
        <trans-unit id="970d997b1f905a43219b5008925290bb634cfd6b" translate="yes" xml:space="preserve">
          <source>To begin using Angular service workers, see &lt;a href=&quot;service-worker-getting-started&quot;&gt;Getting Started with service workers&lt;/a&gt;.</source>
          <target state="translated">Angular 서비스 워커 사용을 시작하려면 서비스 워커 &lt;a href=&quot;service-worker-getting-started&quot;&gt;시작하기를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="de460edf05dca2d464a1be91407ed6ffea7d7a8e" translate="yes" xml:space="preserve">
          <source>To begin using the CLI for a new project, see &lt;a href=&quot;setup-local&quot;&gt;Local Environment Setup&lt;/a&gt;.</source>
          <target state="translated">새 프로젝트에 CLI를 사용하려면 &lt;a href=&quot;setup-local&quot;&gt;로컬 환경 설정을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="6b18b6e1679f6b673ab980d8c28e59713ff54dfa" translate="yes" xml:space="preserve">
          <source>To begin, configure a set of routes using methods available in the &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt; class. This route configuration tells the router how to navigate.</source>
          <target state="translated">시작하려면 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt; 클래스 에서 사용 가능한 메소드를 사용하여 라우트 세트를 구성하십시오 . 이 경로 구성은 라우터에게 탐색 방법을 알려줍니다.</target>
        </trans-unit>
        <trans-unit id="008987cccbf2a31fda96aa5a830cd40924b91032" translate="yes" xml:space="preserve">
          <source>To begin, create a new subfolder, &lt;code&gt;my-service&lt;/code&gt;, in the &lt;code&gt;schematics&lt;/code&gt; folder.</source>
          <target state="translated">시작하려면 &lt;code&gt;schematics&lt;/code&gt; 폴더 에 새 하위 폴더 &lt;code&gt;my-service&lt;/code&gt; 를 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="6dd9e1c57cc321e0fe725c8e45cb7fc4f6d13c75" translate="yes" xml:space="preserve">
          <source>To benefit from the Angular service worker, your app must run in a web browser that supports service workers in general. Currently, service workers are supported in the latest versions of Chrome, Firefox, Edge, Safari, Opera, UC Browser (Android version) and Samsung Internet. Browsers like IE and Opera Mini do not support service workers.</source>
          <target state="translated">Angular 서비스 워커의 혜택을 받으려면 앱이 일반적으로 서비스 워커를 지원하는 웹 브라우저에서 실행되어야합니다. 현재 서비스 근로자는 최신 버전의 Chrome, Firefox, Edge, Safari, Opera, UC Browser (Android 버전) 및 Samsung Internet에서 지원됩니다. IE 및 Opera Mini와 같은 브라우저는 서비스 워커를 지원하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="aceceb9344b852a619d58c97b4a87fbc9c2dc9ab" translate="yes" xml:space="preserve">
          <source>To bind to a DOM event, surround the DOM event name in parentheses and assign a quoted &lt;a href=&quot;template-syntax#template-statements&quot;&gt;template statement&lt;/a&gt; to it.</source>
          <target state="translated">DOM 이벤트에 바인드하려면 DOM 이벤트 이름을 괄호로 묶고 인용 된 &lt;a href=&quot;template-syntax#template-statements&quot;&gt;템플리트 명령문&lt;/a&gt; 을 지정하십시오.</target>
        </trans-unit>
        <trans-unit id="2a2b43d8d4759c302041d5555e84a74b033db308" translate="yes" xml:space="preserve">
          <source>To block XSS attacks, you must prevent malicious code from entering the DOM (Document Object Model). For example, if attackers can trick you into inserting a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag in the DOM, they can run arbitrary code on your website. The attack isn't limited to &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags&amp;mdash;many elements and properties in the DOM allow code execution, for example, &lt;code&gt;&amp;lt;img onerror=&quot;...&quot;&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routerlinkwithhref&quot;&gt;a&lt;/a&gt; href=&quot;javascript:...&quot;&amp;gt;&lt;/code&gt;. If attacker-controlled data enters the DOM, expect security vulnerabilities.</source>
          <target state="translated">XSS 공격을 차단하려면 악성 코드가 DOM (Document Object Model)에 들어 가지 않도록해야합니다. 예를 들어 공격자가 DOM에 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 태그 를 삽입하도록 속일 수 있으면 웹 사이트에서 임의의 코드를 실행할 수 있습니다. 공격이에 한정되지 않고, &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 예를 들어, 코드 실행 DOM을 태그-많은 요소와 속성 수 있도록, &lt;code&gt;&amp;lt;img onerror=&quot;...&quot;&amp;gt;&lt;/code&gt; 와 &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routerlinkwithhref&quot;&gt;a&lt;/a&gt; href=&quot;javascript:...&quot;&amp;gt;&lt;/code&gt; . 공격자 제어 데이터가 DOM에 침입하면 보안 취약점이 예상됩니다.</target>
        </trans-unit>
        <trans-unit id="82e29a55d59b6b2bd0a517982412ccec5411a4a1" translate="yes" xml:space="preserve">
          <source>To bootstrap a hybrid application, you must bootstrap each of the Angular and AngularJS parts of the application. You must bootstrap the Angular bits first and then ask the &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; to bootstrap the AngularJS bits next.</source>
          <target state="translated">하이브리드 애플리케이션을 부트 스트랩하려면 애플리케이션의 각 Angular 및 AngularJS 파트를 부트 스트랩해야합니다. Angular 비트를 먼저 부트 스트랩 한 다음 &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; 에 다음 AngularJS 비트를 부트 스트랩 하도록 요청해야 합니다 .</target>
        </trans-unit>
        <trans-unit id="e4ec3081d8abfef81b9c7b98512682fe817069de" translate="yes" xml:space="preserve">
          <source>To build up the generation schematic, start with an empty rule factory.</source>
          <target state="translated">생성 회로도를 작성하려면 빈 규칙 팩토리로 시작하십시오.</target>
        </trans-unit>
        <trans-unit id="8901fe39170514d01f50341a27e20f9604a9825a" translate="yes" xml:space="preserve">
          <source>To build using the staging configuration, run the following command:</source>
          <target state="translated">스테이징 구성을 사용하여 빌드하려면 다음 명령을 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="e28bdfee0dc7a60965eea042b0b40687dbd667f9" translate="yes" xml:space="preserve">
          <source>To build your application locally or for production, you will need to download the source code from your StackBlitz project. Click the &lt;code&gt;Download Project&lt;/code&gt; icon in the left menu across from &lt;code&gt;Project&lt;/code&gt; to download your files.</source>
          <target state="translated">응용 프로그램을 로컬로 또는 프로덕션 용으로 빌드하려면 StackBlitz 프로젝트에서 소스 코드를 다운로드해야합니다. &lt;code&gt;Download Project&lt;/code&gt; 의 왼쪽 메뉴에서 &lt;code&gt;Project&lt;/code&gt; 다운로드 아이콘을 클릭 하여 파일을 다운로드하십시오.</target>
        </trans-unit>
        <trans-unit id="0466ae768a4d93cf77c8e4981171d89f8a7ca6ff" translate="yes" xml:space="preserve">
          <source>To bundle your schematics together with your library, you must configure the library to build the schematics separately, then add them to the bundle. You must build your schematics &lt;em&gt;after&lt;/em&gt; you build your library, so they are placed in the correct directory.</source>
          <target state="translated">회로도와 라이브러리를 번들로 묶으려면 회로도를 개별적으로 빌드하도록 라이브러리를 구성한 다음 번들에 추가해야합니다. 라이브러리를 빌드 &lt;em&gt;한 후&lt;/em&gt; 회로도를 작성해야 올바른 디렉토리에 배치됩니다.</target>
        </trans-unit>
        <trans-unit id="885d50f557834570c68a2e5e1be6b220c9216f5a" translate="yes" xml:space="preserve">
          <source>To bypass the service worker you can set &lt;code&gt;ngsw-bypass&lt;/code&gt; as a request header, or as a query parameter. (The value of the header or query parameter is ignored and can be empty or omitted.)</source>
          <target state="translated">서비스 워커를 우회하기 위해 &lt;code&gt;ngsw-bypass&lt;/code&gt; 를 요청 헤더 또는 쿼리 매개 변수로 설정할 수 있습니다 . (헤더 또는 쿼리 매개 변수의 값은 무시되며 비어 있거나 생략 할 수 있습니다.)</target>
        </trans-unit>
        <trans-unit id="12534712788ba78416f7f95870eaa280458520d6" translate="yes" xml:space="preserve">
          <source>To catch errors, you &lt;strong&gt;&quot;pipe&quot; the observable&lt;/strong&gt; result from &lt;code&gt;http.get()&lt;/code&gt; through an RxJS &lt;code&gt;catchError()&lt;/code&gt; operator.</source>
          <target state="translated">오류를 포착하기 위해 RxJS &lt;code&gt;catchError()&lt;/code&gt; 연산자를 통해 &lt;code&gt;http.get()&lt;/code&gt; 에서 &lt;strong&gt;관찰 가능한&lt;/strong&gt; 결과 를 &lt;strong&gt;&quot;파이프&quot;합니다&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="1e0fe49f14510b713680172388a0dd717d0f6c10" translate="yes" xml:space="preserve">
          <source>To change the controls in the array, use the &lt;code&gt;push&lt;/code&gt;, &lt;code&gt;insert&lt;/code&gt;, &lt;code&gt;removeAt&lt;/code&gt; or &lt;code&gt;clear&lt;/code&gt; methods in &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; itself. These methods ensure the controls are properly tracked in the form's hierarchy. Do not modify the array of &lt;code&gt;&lt;a href=&quot;abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;&lt;/code&gt;s used to instantiate the &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; directly, as that result in strange and unexpected behavior such as broken change detection.</source>
          <target state="translated">배열의 컨트롤을 변경하려면 &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; 자체 에서 &lt;code&gt;push&lt;/code&gt; , &lt;code&gt;insert&lt;/code&gt; , &lt;code&gt;removeAt&lt;/code&gt; 또는 &lt;code&gt;clear&lt;/code&gt; 메서드를 사용 하십시오 . 이러한 방법을 사용하면 컨트롤이 폼의 계층 구조에서 올바르게 추적됩니다. &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; 를 직접 인스턴스화하는 데 사용되는 &lt;code&gt;&lt;a href=&quot;abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;&lt;/code&gt; 의 배열을 수정하지 마십시오 . 변경 감지 오류와 같은 이상하고 예기치 않은 동작이 발생합니다.</target>
        </trans-unit>
        <trans-unit id="63029d22a7a0498f402e2ef9e4441e473404955c" translate="yes" xml:space="preserve">
          <source>To check that you have the npm client installed, run &lt;code&gt;npm -v&lt;/code&gt; in a terminal/console window.</source>
          <target state="translated">npm 클라이언트가 설치되어 있는지 확인하려면 터미널 / 콘솔 창에서 &lt;code&gt;npm -v&lt;/code&gt; 를 실행하십시오 .</target>
        </trans-unit>
        <trans-unit id="6e948743b462eea7115d418352e1dbfa4b4b10ff" translate="yes" xml:space="preserve">
          <source>To check your app's version of Angular: From within your project directory, use the &lt;code&gt;ng version&lt;/code&gt; command.</source>
          <target state="translated">앱의 Angular 버전을 확인하려면 : 프로젝트 디렉토리에서 &lt;code&gt;ng version&lt;/code&gt; 명령을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="13078c07edb73de738fd267221caa6c4bad9f0a1" translate="yes" xml:space="preserve">
          <source>To check your version, run &lt;code&gt;node -v&lt;/code&gt; in a terminal/console window.</source>
          <target state="translated">버전을 확인하려면 터미널 / 콘솔 창에서 &lt;code&gt;node -v&lt;/code&gt; 를 실행 하십시오 .</target>
        </trans-unit>
        <trans-unit id="07cec4d840c8d65fc9e2b7b36b758a8ade445776" translate="yes" xml:space="preserve">
          <source>To combine property and event bindings using the banana-in-a-box syntax, &lt;code&gt;[()]&lt;/code&gt;, see &lt;a href=&quot;template-syntax#two-way&quot;&gt;Two-way Binding&lt;/a&gt;.</source>
          <target state="translated">box-in-a-box 구문 &lt;code&gt;[()]&lt;/code&gt; 을 사용하여 속성 및 이벤트 바인딩을 결합하려면 &lt;a href=&quot;template-syntax#two-way&quot;&gt;양방향 바인딩을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="b3236306fb71061a53e3712837b9be971697d08d" translate="yes" xml:space="preserve">
          <source>To conditionally display an element, place the element's &lt;code&gt;hidden&lt;/code&gt; property in square brackets and set it to a quoted template expression that evaluates to the &lt;em&gt;opposite&lt;/em&gt; of &lt;em&gt;show&lt;/em&gt;.</source>
          <target state="translated">조건 적 요소를 표시하려면 요소의 배치 &lt;code&gt;hidden&lt;/code&gt; 대괄호 속성을하고 인용 템플릿 표현으로 설정 그 평가 &lt;em&gt;반대&lt;/em&gt; 의 &lt;em&gt;쇼&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="53182894e9c6995045a12635221f90b2e4299c08" translate="yes" xml:space="preserve">
          <source>To configure access to your own users' CLI usage data, use the &lt;code&gt;ng &lt;a href=&quot;../api/router/router#config&quot;&gt;config&lt;/a&gt;&lt;/code&gt; command to add a key to your global &lt;a href=&quot;../guide/workspace-config&quot;&gt;&lt;code&gt;angular.json&lt;/code&gt; workspace configuration file&lt;/a&gt;. The key goes under &lt;code&gt;cli.analyticsSharing&lt;/code&gt; at the top level of the file, outside the &lt;code&gt;projects&lt;/code&gt; sections. The value of the key is your organization's tracking ID, as assigned by Google Analytics. This ID is a string that looks like &lt;code&gt;UA-123456-12&lt;/code&gt;.</source>
          <target state="translated">사용자의 CLI 사용 데이터에 대한 액세스를 구성하려면 &lt;code&gt;ng &lt;a href=&quot;../api/router/router#config&quot;&gt;config&lt;/a&gt;&lt;/code&gt; 명령을 사용 하여 글로벌 &lt;a href=&quot;../guide/workspace-config&quot;&gt; &lt;code&gt;angular.json&lt;/code&gt; 작업 공간 구성 파일에&lt;/a&gt; 키를 추가 하십시오 . 키는 &lt;code&gt;projects&lt;/code&gt; 섹션 외부의 파일 최상위 레벨 에서 &lt;code&gt;cli.analyticsSharing&lt;/code&gt; 아래에 있습니다. 키의 가치는 Google 애널리틱스에서 할당 한 조직의 추적 ID입니다. 이 ID는 &lt;code&gt;UA-123456-12&lt;/code&gt; 와 같은 문자열입니다 .</target>
        </trans-unit>
        <trans-unit id="081b1f073ba92cd82743621b3f2f2eb2c90049a3" translate="yes" xml:space="preserve">
          <source>To configure the Angular Router, you must define a route for AngularJS URLs. To match those URLs, you add a route configuration that uses the &lt;code&gt;&lt;a href=&quot;../api/router/route#matcher&quot;&gt;matcher&lt;/a&gt;&lt;/code&gt; property. The &lt;code&gt;&lt;a href=&quot;../api/router/route#matcher&quot;&gt;matcher&lt;/a&gt;&lt;/code&gt; allows you to use custom pattern matching for URL paths. The Angular Router tries to match on more specific routes such as static and variable routes first. When it doesn't find a match, it then looks at custom matchers defined in your route configuration. If the custom matchers don't match a route, it then goes to catch-all routes, such as a 404 page.</source>
          <target state="translated">Angular Router를 구성하려면 AngularJS URL에 대한 경로를 정의해야합니다. 해당 URL을 일치 시키려면 &lt;code&gt;&lt;a href=&quot;../api/router/route#matcher&quot;&gt;matcher&lt;/a&gt;&lt;/code&gt; 특성 을 사용하는 경로 구성을 추가하십시오 . &lt;code&gt;&lt;a href=&quot;../api/router/route#matcher&quot;&gt;matcher&lt;/a&gt;&lt;/code&gt; 당신이 URL 경로에 대한 사용자 정의 패턴 매칭을 사용할 수 있습니다. Angular Router는 정적 및 가변 경로와 같은보다 구체적인 경로를 먼저 일치시킵니다. 일치하는 항목을 찾지 못하면 경로 구성에 정의 된 사용자 지정 매처를 찾습니다. 사용자 정의 매 처가 라우트와 일치하지 않으면 404 페이지와 같은 포괄 루트로 이동합니다.</target>
        </trans-unit>
        <trans-unit id="99be46bd11d0de83ad9e296968ef2c5a7118146b" translate="yes" xml:space="preserve">
          <source>To continue exploring Angular, choose either of the following options:</source>
          <target state="translated">Angular를 계속 탐색하려면 다음 옵션 중 하나를 선택하십시오.</target>
        </trans-unit>
        <trans-unit id="a3014c43a2313b977c6aed25419c31a95265fa08" translate="yes" xml:space="preserve">
          <source>To contrast the two types of components, there are components which are included in the template, which are declarative. Additionally, there are components which you load imperatively; that is, entry components.</source>
          <target state="translated">두 가지 유형의 구성 요소를 대조하기 위해 템플릿에 포함 된 구성 요소가 있습니다. 또한 반드시로드해야하는 구성 요소가 있습니다. 즉, 입력 구성 요소입니다.</target>
        </trans-unit>
        <trans-unit id="959d46928d85d110fdade5f2293bf97890445838" translate="yes" xml:space="preserve">
          <source>To control how this encapsulation happens on a &lt;em&gt;per component&lt;/em&gt; basis, you can set the &lt;em&gt;view encapsulation mode&lt;/em&gt; in the component metadata. Choose from the following modes:</source>
          <target state="translated">이 캡슐화가 &lt;em&gt;구성 요소&lt;/em&gt; 별로 수행 되는 방식을 제어하기 위해 구성 요소 메타 데이터에서 &lt;em&gt;보기 캡슐화 모드&lt;/em&gt; 를 설정할 수 있습니다 . 다음 모드 중에서 선택하십시오.</target>
        </trans-unit>
        <trans-unit id="c93024cc33ad0ddbba14e6bbd25bf12722637c4a" translate="yes" xml:space="preserve">
          <source>To control the state of the button, set the &lt;code&gt;disabled&lt;/code&gt;&lt;em&gt;property&lt;/em&gt;,</source>
          <target state="translated">버튼의 상태를 제어하려면 &lt;code&gt;disabled&lt;/code&gt; &lt;em&gt;속성을&lt;/em&gt; 설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="fbe3fde2fb0a60e4ec9cfcd947c47d4e664ce7a7" translate="yes" xml:space="preserve">
          <source>To convert this binding to use specialized objects, turn the array of hero names into an array of &lt;code&gt;Hero&lt;/code&gt; objects. For that you'll need a &lt;code&gt;Hero&lt;/code&gt; class:</source>
          <target state="translated">특수한 개체를 사용하도록이 바인딩을 변환하려면 영웅 이름 배열을 &lt;code&gt;Hero&lt;/code&gt; 개체 배열로 바꿉니다 . 이를 위해서는 &lt;code&gt;Hero&lt;/code&gt; 클래스 가 필요합니다 .</target>
        </trans-unit>
        <trans-unit id="3e235ca1b49cbf515a53d4eb460cb0a499395651" translate="yes" xml:space="preserve">
          <source>To copy a code example from this tutorial, click the icon at the top right of the code example box, and then paste the code snippet from the clipboard into StackBlitz.</source>
          <target state="translated">이 학습서에서 코드 예제를 복사하려면 코드 예제 상자의 오른쪽 상단에있는 아이콘을 클릭 한 후 클립 보드의 코드 스 니펫을 StackBlitz에 붙여 넣으십시오.</target>
        </trans-unit>
        <trans-unit id="b27e4d885fe2defbb235fa198172a39e1ab9f6e4" translate="yes" xml:space="preserve">
          <source>To correct the problem, call &lt;code&gt;compileComponents()&lt;/code&gt; as explained &lt;a href=&quot;testing#compile-components&quot;&gt;below&lt;/a&gt;.</source>
          <target state="translated">문제를 해결하려면 &lt;a href=&quot;testing#compile-components&quot;&gt;아래&lt;/a&gt; 설명 된 대로 &lt;code&gt;compileComponents()&lt;/code&gt; 를 호출하십시오 .</target>
        </trans-unit>
        <trans-unit id="979325cb37deb2c50164b83f04e810b1ac2b55a5" translate="yes" xml:space="preserve">
          <source>To correct this error, export a function from the module and refer to the function in a &lt;code&gt;&lt;a href=&quot;../api/core/factorysansprovider#useFactory&quot;&gt;useFactory&lt;/a&gt;&lt;/code&gt; provider instead.</source>
          <target state="translated">이 오류를 정정하려면 모듈에서 함수를 &lt;code&gt;&lt;a href=&quot;../api/core/factorysansprovider#useFactory&quot;&gt;useFactory&lt;/a&gt;&lt;/code&gt; 대신 useFactory 제공자 의 함수를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="1ecaf5471a0ced58416233b3602e2e5a39d32a9d" translate="yes" xml:space="preserve">
          <source>To correct this error, provide the initial value of the variable in an initializer clause &lt;em&gt;on the same line&lt;/em&gt;.</source>
          <target state="translated">이 오류를 정정하려면 &lt;em&gt;동일한 행&lt;/em&gt; 의 이니셜 라이저 절 &lt;em&gt;에서&lt;/em&gt; 변수의 초기 값을 제공하십시오 .</target>
        </trans-unit>
        <trans-unit id="4dee6cdbff0c50b18b7cf0744c39d9afb9e81794" translate="yes" xml:space="preserve">
          <source>To correct this error, refer to non-destructured values.</source>
          <target state="translated">이 오류를 해결하려면 비 구조화 값을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="d2bf7fb2d3e94211afcd57a10f20c4c45cfe0d7d" translate="yes" xml:space="preserve">
          <source>To create a new workspace and an initial app project:</source>
          <target state="translated">새 작업 공간 및 초기 앱 프로젝트를 작성하려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="f144d38768edd99f2d27499d71edd950a08584a3" translate="yes" xml:space="preserve">
          <source>To create a new workspace and initial starter app:</source>
          <target state="translated">새 작업 공간 및 초기 스타터 앱을 작성하려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="1aa719950868f1d4fa3ac83a344dcfa8c80b6018" translate="yes" xml:space="preserve">
          <source>To create a reusable animation, use the &lt;a href=&quot;../api/animations/animation&quot;&gt;&lt;code&gt;animation()&lt;/code&gt;&lt;/a&gt; method to define an animation in a separate &lt;code&gt;.ts&lt;/code&gt; file and declare this animation definition as a &lt;code&gt;const&lt;/code&gt; export variable. You can then import and reuse this animation in any of your app components using the &lt;a href=&quot;../api/animations/useanimation&quot;&gt;&lt;code&gt;useAnimation()&lt;/code&gt;&lt;/a&gt; API.</source>
          <target state="translated">재사용 가능한 애니메이션을 만들려면 &lt;a href=&quot;../api/animations/animation&quot;&gt; &lt;code&gt;animation()&lt;/code&gt; &lt;/a&gt; 메서드를 사용하여 별도의 &lt;code&gt;.ts&lt;/code&gt; 파일에 애니메이션을 정의하고이 애니메이션 정의를 &lt;code&gt;const&lt;/code&gt; 내보내기 변수 로 선언하십시오 . 그런 다음 &lt;a href=&quot;../api/animations/useanimation&quot;&gt; &lt;code&gt;useAnimation()&lt;/code&gt; &lt;/a&gt; API를 사용하여 앱 구성 요소에서이 애니메이션을 가져 와서 재사용 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="29ae33325b206d2fd3cdedfd24a2c41e5f192288" translate="yes" xml:space="preserve">
          <source>To create the cart page, you begin by following the same steps you did to create the product details component and to set up routing for the new component.</source>
          <target state="translated">장바구니 페이지를 작성하려면 제품 세부 사항 구성 요소를 작성하고 새 구성 요소에 대한 라우팅을 설정하는 단계와 동일한 단계를 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="594ec3ddcc19c25f73ea897495b521aecaf86016" translate="yes" xml:space="preserve">
          <source>To create the server-side app module, &lt;code&gt;app.server.module.ts&lt;/code&gt;, run the following CLI command.</source>
          <target state="translated">서버 측 앱 모듈 &lt;code&gt;app.server.module.ts&lt;/code&gt; 를 작성하려면 다음 CLI 명령을 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="a1d7d554f2d72ca28c730058079d294822be35c1" translate="yes" xml:space="preserve">
          <source>To create, build, and serve a new, basic Angular project on a development server, go to the parent directory of your new workspace use the following commands:</source>
          <target state="translated">개발 서버에서 새 기본 Angular 프로젝트를 작성, 빌드 및 제공하려면 다음 명령을 사용하여 새 작업 공간의 상위 디렉토리로 이동하십시오.</target>
        </trans-unit>
        <trans-unit id="65acbd001432e22b30e796e7e61e3dfe440088a8" translate="yes" xml:space="preserve">
          <source>To customize the default option comparison algorithm, &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; supports &lt;code&gt;compareWith&lt;/code&gt; input. &lt;code&gt;compareWith&lt;/code&gt; takes a &lt;strong&gt;function&lt;/strong&gt; which has two arguments: &lt;code&gt;option1&lt;/code&gt; and &lt;code&gt;option2&lt;/code&gt;. If &lt;code&gt;compareWith&lt;/code&gt; is given, Angular selects option by the return value of the function.</source>
          <target state="translated">기본 옵션 비교 알고리즘을 사용자 정의하기 위해 &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; 는 &lt;code&gt;compareWith&lt;/code&gt; 입력을 지원합니다 . &lt;code&gt;compareWith&lt;/code&gt; 는 &lt;code&gt;option1&lt;/code&gt; 과 &lt;code&gt;option2&lt;/code&gt; 의 두 가지 인수가 있는 &lt;strong&gt;함수&lt;/strong&gt; 를 사용 합니다. 경우 &lt;code&gt;compareWith&lt;/code&gt; 이 주어진 함수의 반환 값에 의해 각도 선택 옵션을 선택합니다.</target>
        </trans-unit>
        <trans-unit id="c9057dec56a92572abc6bcb328cdc254209b6283" translate="yes" xml:space="preserve">
          <source>To customize the default option comparison algorithm, &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; supports &lt;code&gt;compareWith&lt;/code&gt; input. See the &lt;code&gt;&lt;a href=&quot;selectcontrolvalueaccessor&quot;&gt;SelectControlValueAccessor&lt;/a&gt;&lt;/code&gt; for usage.</source>
          <target state="translated">기본 옵션 비교 알고리즘을 사용자 정의하기 위해 &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; 는 &lt;code&gt;compareWith&lt;/code&gt; 입력을 지원합니다 . 사용법 은 &lt;code&gt;&lt;a href=&quot;selectcontrolvalueaccessor&quot;&gt;SelectControlValueAccessor&lt;/a&gt;&lt;/code&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="12614d5a0a4f9980916f0bd6829fb9e94aeee5ca" translate="yes" xml:space="preserve">
          <source>To deactivate the service worker, remove or rename the &lt;code&gt;ngsw.json&lt;/code&gt; file. When the service worker's request for &lt;code&gt;ngsw.json&lt;/code&gt; returns a &lt;code&gt;404&lt;/code&gt;, then the service worker removes all of its caches and de-registers itself, essentially self-destructing.</source>
          <target state="translated">서비스 워커를 비활성화하려면 &lt;code&gt;ngsw.json&lt;/code&gt; 파일을 제거하거나 이름을 바꾸십시오 . &lt;code&gt;ngsw.json&lt;/code&gt; 에 대한 서비스 워커의 요청 이 &lt;code&gt;404&lt;/code&gt; 를 리턴하면 , 서비스 워커는 모든 캐시를 제거하고 본질적으로 자체 파괴적인 자체를 등록 취소합니다.</target>
        </trans-unit>
        <trans-unit id="95e38d849c5796bd6398c2761b41e463c7976d04" translate="yes" xml:space="preserve">
          <source>To define a class as a service in Angular, use the &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; decorator to provide the metadata that allows Angular to inject it into a component as a &lt;em&gt;dependency&lt;/em&gt;. Similarly, use the &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; decorator to indicate that a component or other class (such as another service, a pipe, or an NgModule) &lt;em&gt;has&lt;/em&gt; a dependency.</source>
          <target state="translated">Angular에서 클래스를 서비스로 정의하려면 &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; 데코레이터를 사용하여 Angular가 클래스를 구성 요소에 &lt;em&gt;종속성&lt;/em&gt; 으로 주입 할 수있는 메타 데이터를 제공하십시오 . 마찬가지로 &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; 데코레이터를 사용하여 구성 요소 나 다른 클래스 (예 : 다른 서비스, 파이프 또는 NgModule) 에 종속성 &lt;em&gt;이&lt;/em&gt; 있음을 나타냅니다 .</target>
        </trans-unit>
        <trans-unit id="ad6c984d27957b7c6989d1d288e104c9c138aa30" translate="yes" xml:space="preserve">
          <source>To define a directive, mark the class with the decorator and provide metadata.</source>
          <target state="translated">지시문을 정의하려면 데코레이터로 클래스를 표시하고 메타 데이터를 제공하십시오.</target>
        </trans-unit>
        <trans-unit id="1cd846925adda37616140e026544f1e443869411" translate="yes" xml:space="preserve">
          <source>To define navigation rules, you associate &lt;em&gt;navigation paths&lt;/em&gt; with your components. A path uses a URL-like syntax that integrates your program data, in much the same way that template syntax integrates your views with your program data. You can then apply program logic to choose which views to show or to hide, in response to user input and your own access rules.</source>
          <target state="translated">탐색 규칙을 정의하려면 &lt;em&gt;탐색 경로&lt;/em&gt; 를 구성 요소와 연결하십시오. 경로는 템플릿 구문이 뷰를 프로그램 데이터와 통합하는 것과 거의 같은 방식으로 프로그램 데이터를 통합하는 URL과 같은 구문을 사용합니다. 그런 다음 프로그램 논리를 적용하여 사용자 입력 및 사용자 고유의 액세스 규칙에 따라 표시하거나 숨길보기를 선택할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2e9f5fcdd9d08eaae4f6f27d8f15141de7ee4a5f" translate="yes" xml:space="preserve">
          <source>To deploy your application, you have to compile it, and then host the JavaScript, CSS, and HTML on a web server. Built Angular applications are very portable and can live in any environment or served by any technology, such as Node, Java, .NET, PHP, and many others.</source>
          <target state="translated">응용 프로그램을 배포하려면 응용 프로그램을 컴파일 한 다음 웹 서버에서 JavaScript, CSS 및 HTML을 호스팅해야합니다. 내장 Angular 응용 프로그램은 이식성이 뛰어나 모든 환경에서 사용할 수 있으며 Node, Java, .NET, PHP 등의 모든 기술로 제공 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="458c0ad6c07671bce624449b3ec9d294dc2007ad" translate="yes" xml:space="preserve">
          <source>To determine the destination project, use the &lt;code&gt;Tree.read()&lt;/code&gt; method to read the contents of the workspace configuration file, &lt;code&gt;angular.json&lt;/code&gt;, at the root of the workspace. Add the following code to your factory function.</source>
          <target state="translated">대상 프로젝트를 판별하려면 &lt;code&gt;Tree.read()&lt;/code&gt; 메소드를 사용하여 작업 공간 의 루트에서 작업 공간 구성 파일 &lt;code&gt;angular.json&lt;/code&gt; 의 컨텐츠를 읽으십시오 . 팩토리 함수에 다음 코드를 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="b38921f33869fd230c21c0400a6e54f928af5829" translate="yes" xml:space="preserve">
          <source>To disable all animations for an Angular app, place the &lt;code&gt;@.disabled&lt;/code&gt; host binding on the topmost Angular component.</source>
          <target state="translated">Angular 앱에서 모든 애니메이션을 비활성화하려면 &lt;code&gt;@.disabled&lt;/code&gt; 호스트 바인딩을 최상위 Angular 구성 요소에 배치하십시오.</target>
        </trans-unit>
        <trans-unit id="8d2b1d0f9febd720f6513d3ea282a6265dbf4671" translate="yes" xml:space="preserve">
          <source>To display a list of heroes, begin by adding an array of hero names to the component and redefine &lt;code&gt;myHero&lt;/code&gt; to be the first name in the array.</source>
          <target state="translated">영웅 목록을 표시하려면 먼저 구성 요소에 영웅 이름 배열을 추가하고 배열 에서 첫 번째 이름으로 &lt;code&gt;myHero&lt;/code&gt; 를 다시 정의 하십시오.</target>
        </trans-unit>
        <trans-unit id="c5c321525611939ce03b07b9d1cd2adb53d24843" translate="yes" xml:space="preserve">
          <source>To display a template when &lt;code&gt;expression&lt;/code&gt; evaluates to false, use an &lt;code&gt;else&lt;/code&gt; template binding as shown in the following example. The &lt;code&gt;else&lt;/code&gt; binding points to an &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; element labeled &lt;code&gt;#elseBlock&lt;/code&gt;. The template can be defined anywhere in the component view, but is typically placed right after &lt;code&gt;&lt;a href=&quot;ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; for readability.</source>
          <target state="translated">&lt;code&gt;expression&lt;/code&gt; 이 false로 평가 될 때 템플리트를 표시하려면 다음 예제와 같이 &lt;code&gt;else&lt;/code&gt; 템플리트 바인딩을 사용하십시오 . &lt;code&gt;else&lt;/code&gt; 결합 점 &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; 원소 표지 &lt;code&gt;#elseBlock&lt;/code&gt; . 템플릿은 컴포넌트보기의 어느 곳에서나 정의 할 수 있지만 일반적으로 가독성을 위해 &lt;code&gt;&lt;a href=&quot;ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; 바로 뒤에 배치 됩니다.</target>
        </trans-unit>
        <trans-unit id="f578c5cb78b9f7bd8066f62098c29394c6101150" translate="yes" xml:space="preserve">
          <source>To display the &lt;code&gt;HeroesComponent&lt;/code&gt;, you must add it to the template of the shell &lt;code&gt;AppComponent&lt;/code&gt;.</source>
          <target state="translated">디스플레이에 &lt;code&gt;HeroesComponent&lt;/code&gt; 을 , 당신은 쉘의 템플릿에 추가해야합니다 &lt;code&gt;AppComponent&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6f6cadc05a799ae38b432205731731047b90305a" translate="yes" xml:space="preserve">
          <source>To display the &lt;code&gt;ProfileEditor&lt;/code&gt; component that contains the form, add it to a component template.</source>
          <target state="translated">양식이 포함 된 &lt;code&gt;ProfileEditor&lt;/code&gt; 구성 요소 를 표시하려면 구성 요소 템플릿에 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="903cc390eb408d1ea55af3983eda315a6832f5dc" translate="yes" xml:space="preserve">
          <source>To display the names of the products, use the interpolation syntax &lt;code&gt;{{ }}&lt;/code&gt;. Interpolation renders a property's value as text. Inside the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;, add an &lt;code&gt;&amp;lt;h3&amp;gt;&lt;/code&gt; to display the interpolation of the product's name property:</source>
          <target state="translated">제품 이름을 표시하려면 보간 구문 &lt;code&gt;{{ }}&lt;/code&gt; . 보간은 속성 값을 텍스트로 렌더링합니다. &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 안에 &lt;code&gt;&amp;lt;h3&amp;gt;&lt;/code&gt; 을 추가 하여 제품 이름 속성의 보간을 표시하십시오.</target>
        </trans-unit>
        <trans-unit id="af6b8e70bc867df920c57a14286a9aca559c2d1f" translate="yes" xml:space="preserve">
          <source>To do this for &lt;code&gt;ng serve&lt;/code&gt;, create a new file, &lt;code&gt;tsconfig-es5.app.json&lt;/code&gt; next to &lt;code&gt;tsconfig.app.json&lt;/code&gt; with the following content.</source>
          <target state="translated">&lt;code&gt;ng serve&lt;/code&gt; 에 대해이를 수행하려면 다음 컨텐츠 가 포함 된 &lt;code&gt;tsconfig.app.json&lt;/code&gt; 옆에 새 파일 &lt;code&gt;tsconfig-es5.app.json&lt;/code&gt; 을 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="2d79d0bb78f9158b8f6b014230ea7d15c1b601c1" translate="yes" xml:space="preserve">
          <source>To do this, list the more specific transitions &lt;em&gt;before&lt;/em&gt;&lt;code&gt;* =&amp;gt; *&lt;/code&gt;.</source>
          <target state="translated">목록보다 구체적인 전환을,이 작업을 수행하기 &lt;em&gt;전에 &lt;/em&gt; &lt;code&gt;* =&amp;gt; *&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4af7f031db75e121d1590f04ee2af53757ce04c5" translate="yes" xml:space="preserve">
          <source>To do this, you'll use the Angular &lt;em&gt;router&lt;/em&gt;. The Angular &lt;a href=&quot;../guide/glossary#router&quot;&gt;router&lt;/a&gt; enables you to show different components and data to the user based on where the user is in the application. The router enables navigation from one view to the next as users perform application tasks:</source>
          <target state="translated">이렇게하려면 Angular &lt;em&gt;라우터를&lt;/em&gt; 사용 &lt;em&gt;합니다&lt;/em&gt; . Angular &lt;a href=&quot;../guide/glossary#router&quot;&gt;라우터를&lt;/a&gt; 사용하면 사용자가 응용 프로그램의 위치에 따라 다른 구성 요소와 데이터를 사용자에게 표시 할 수 있습니다. 라우터는 사용자가 응용 프로그램 작업을 수행 할 때 한보기에서 다음보기로 탐색 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="94dcbf1537099a8d72c6a9756d09210df8ae8156" translate="yes" xml:space="preserve">
          <source>To enable preloading of all lazy loaded modules, import the &lt;code&gt;&lt;a href=&quot;../api/router/preloadallmodules&quot;&gt;PreloadAllModules&lt;/a&gt;&lt;/code&gt; token from the Angular router package.</source>
          <target state="translated">게으른로드 된 모듈을 모두 미리로드하려면 Angular 라우터 패키지에서 &lt;code&gt;&lt;a href=&quot;../api/router/preloadallmodules&quot;&gt;PreloadAllModules&lt;/a&gt;&lt;/code&gt; 토큰을 가져옵니다 .</target>
        </trans-unit>
        <trans-unit id="7fc710364e3b588a30c9d0c74118b2c885102b0a" translate="yes" xml:space="preserve">
          <source>To enable routing transition animation, do the following:</source>
          <target state="translated">라우팅 전환 애니메이션을 활성화하려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="25d5eb1605457fea82578b3d288b0d9a7ae3a8f5" translate="yes" xml:space="preserve">
          <source>To ensure a high-quality, consistent experience for Angular documentation users.</source>
          <target state="translated">Angular 설명서 사용자에게 고품질의 일관된 환경을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="b0bf35c98e00c5fabe6d7d695facb2ff6dcd71c2" translate="yes" xml:space="preserve">
          <source>To ensure any necessary teardown is triggered in the AngularJS app, such as removal of global listeners, you also implement a method to call the &lt;code&gt;$rootScope.destroy()&lt;/code&gt; method.</source>
          <target state="translated">글로벌 리스너 제거와 같이 AngularJS 앱에서 필요한 분류가 트리거되도록하려면 &lt;code&gt;$rootScope.destroy()&lt;/code&gt; 메소드 를 호출하는 메소드도 구현하십시오 .</target>
        </trans-unit>
        <trans-unit id="ebde52584fea72d72602dc3407e717b85e61cb56" translate="yes" xml:space="preserve">
          <source>To ensure resource integrity, the Angular service worker validates the hashes of all resources for which it has a hash. Typically for an app created with the &lt;a href=&quot;cli&quot;&gt;Angular CLI&lt;/a&gt;, this is everything in the &lt;code&gt;dist&lt;/code&gt; directory covered by the user's &lt;code&gt;src/ngsw-config.json&lt;/code&gt; configuration.</source>
          <target state="translated">리소스 무결성을 보장하기 위해 Angular 서비스 워커는 해시가있는 모든 리소스의 해시를 확인합니다. 일반적으로 &lt;a href=&quot;cli&quot;&gt;Angular CLI로&lt;/a&gt; 생성 된 앱의 경우 이는 사용자의 &lt;code&gt;src/ngsw-config.json&lt;/code&gt; 구성 에서 다루는 &lt;code&gt;dist&lt;/code&gt; 디렉토리의 모든 것입니다 .</target>
        </trans-unit>
        <trans-unit id="36a2f26d071a65a5067d8e3435ef41b66818020c" translate="yes" xml:space="preserve">
          <source>To ensure that clients can only download the files that they are permitted to see, put all client-facing asset files in the &lt;code&gt;/dist&lt;/code&gt; folder and only honor requests for files from the &lt;code&gt;/dist&lt;/code&gt; folder.</source>
          <target state="translated">그들 만이 볼 수있는 모든 고객을 상대 자산 파일을 넣어 허용하는 파일을 다운로드 할 수 클라이언트를 보장하기 위해 &lt;code&gt;/dist&lt;/code&gt; 폴더와의 파일 만 영광 요청 &lt;code&gt;/dist&lt;/code&gt; 폴더에 있습니다.</target>
        </trans-unit>
        <trans-unit id="d8598c2022602203d9603274200d342e1eb538fb" translate="yes" xml:space="preserve">
          <source>To ensure that the compiler still generates a factory, add dynamically loaded components to the &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt;'s &lt;code&gt;entryComponents&lt;/code&gt; array:</source>
          <target state="translated">컴파일러가 여전히 팩토리를 생성하도록하려면 동적으로로드 된 컴포넌트를 &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 의 &lt;code&gt;entryComponents&lt;/code&gt; 배열에 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="e1812e3ae723bb35d7649d2ff5479140c8c70d2c" translate="yes" xml:space="preserve">
          <source>To exclude a heading from the TOC, create the heading as an &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;h3&amp;gt;&lt;/code&gt; element with a class called 'no-toc'. You can't do this with markdown.</source>
          <target state="translated">목차에서 제목을 제외하려면 'no-toc'라는 클래스를 사용하여 제목을 &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; 또는 &lt;code&gt;&amp;lt;h3&amp;gt;&lt;/code&gt; 요소로 만듭니다. 마크 다운으로는이 작업을 수행 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="ec903eae4634b565ecbfd272a77568b1f130ca3e" translate="yes" xml:space="preserve">
          <source>To exclude an asset, you can remove it from the assets configuration.</source>
          <target state="translated">자산을 제외하기 위해 자산 구성에서 자산을 제거 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f9e07f2c5513c75b8f79d6963b277e9fbd52a303" translate="yes" xml:space="preserve">
          <source>To execute the observable you have created and begin receiving notifications, you call its &lt;code&gt;subscribe()&lt;/code&gt; method, passing an &lt;em&gt;observer&lt;/em&gt;. This is a JavaScript object that defines the handlers for the notifications you receive. The &lt;code&gt;subscribe()&lt;/code&gt; call returns a &lt;code&gt;Subscription&lt;/code&gt; object that has an &lt;code&gt;&lt;a href=&quot;../api/service-worker/swpush#unsubscribe&quot;&gt;unsubscribe()&lt;/a&gt;&lt;/code&gt; method, which you call to stop receiving notifications.</source>
          <target state="translated">생성 한 &lt;em&gt;옵저버&lt;/em&gt; 블을 실행하고 알림을 수신하려면 &lt;code&gt;subscribe()&lt;/code&gt; 메서드 를 호출 하여 &lt;em&gt;observer를&lt;/em&gt; 전달합니다 . 이것은 알림의 핸들러를 정의하는 JavaScript 객체입니다. &lt;code&gt;subscribe()&lt;/code&gt; 호출 리턴 &lt;code&gt;Subscription&lt;/code&gt; 이 객체 &lt;code&gt;&lt;a href=&quot;../api/service-worker/swpush#unsubscribe&quot;&gt;unsubscribe()&lt;/a&gt;&lt;/code&gt; 알림을 수신을 중지하기 위해 호출 방법을.</target>
        </trans-unit>
        <trans-unit id="4a6f3f5c4289042742ca02c090211b9822454c2a" translate="yes" xml:space="preserve">
          <source>To explicitly disable differential loading:</source>
          <target state="translated">차등 로딩을 명시 적으로 비활성화하려면 :</target>
        </trans-unit>
        <trans-unit id="dc86ffb91970ba4ea3d784fdcfa4a20106112fb8" translate="yes" xml:space="preserve">
          <source>To filter output in AngularJS templates, use the pipe character (|) and one or more filters.</source>
          <target state="translated">AngularJS 템플릿에서 출력을 필터링하려면 파이프 문자 (|)와 하나 이상의 필터를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="154ce8f40b436ba677325298e54443b2e23530f6" translate="yes" xml:space="preserve">
          <source>To fix that, create an array with the new hero appended and assign that to &lt;code&gt;heroes&lt;/code&gt;. This time Angular detects that the array reference has changed. It executes the pipe and updates the display with the new array, which includes the new flying hero.</source>
          <target state="translated">이 문제를 해결하려면 추가 및 해당 할당 새로운 영웅으로 배열 생성 &lt;code&gt;heroes&lt;/code&gt; . 이번에는 Angular가 배열 참조가 변경되었음을 감지합니다. 파이프를 실행하고 새로운 비행 영웅을 포함한 새로운 배열로 디스플레이를 업데이트합니다.</target>
        </trans-unit>
        <trans-unit id="56cf754ee3e7dca1fe9c44b4816cf790a119fb8c" translate="yes" xml:space="preserve">
          <source>To fix this issue, listen to both the &lt;em&gt;Enter&lt;/em&gt; key and the &lt;em&gt;blur&lt;/em&gt; event.</source>
          <target state="translated">이 문제를 해결하려면 &lt;em&gt;Enter&lt;/em&gt; 키와 &lt;em&gt;블러&lt;/em&gt; 이벤트 를 모두 들어보십시오 .</target>
        </trans-unit>
        <trans-unit id="ba34c5be9ff1d603c4140d7b3f5b608439a0b39b" translate="yes" xml:space="preserve">
          <source>To flush the first quote from the observable, you call &lt;code&gt;&lt;a href=&quot;../api/core/applicationref#tick&quot;&gt;tick()&lt;/a&gt;&lt;/code&gt;. Then call &lt;code&gt;&lt;a href=&quot;../api/core/testing/componentfixture#detectChanges&quot;&gt;detectChanges()&lt;/a&gt;&lt;/code&gt; to tell Angular to update the screen.</source>
          <target state="translated">Observable에서 첫 번째 따옴표를 플러시하려면 &lt;code&gt;&lt;a href=&quot;../api/core/applicationref#tick&quot;&gt;tick()&lt;/a&gt;&lt;/code&gt; 을 호출하십시오 . 그런 다음 &lt;code&gt;&lt;a href=&quot;../api/core/testing/componentfixture#detectChanges&quot;&gt;detectChanges()&lt;/a&gt;&lt;/code&gt; 를 호출 하여 Angular에 화면을 업데이트하도록 지시하십시오.</target>
        </trans-unit>
        <trans-unit id="fc7ba23765221be6372d0b33a6a7c1abada5cdf3" translate="yes" xml:space="preserve">
          <source>To follow along with the tutorial, clone the &lt;a href=&quot;https://github.com/angular/angular-phonecat&quot;&gt;angular-phonecat&lt;/a&gt; repository and apply the steps as you go.</source>
          <target state="translated">학습서와 함께 수행하려면 &lt;a href=&quot;https://github.com/angular/angular-phonecat&quot;&gt;angular-phonecat&lt;/a&gt; 저장소를 복제 하고 단계를 적용하십시오.</target>
        </trans-unit>
        <trans-unit id="50c790d75defb0a4ec3aa8c5265b6f9346b5307e" translate="yes" xml:space="preserve">
          <source>To follow this pattern, import the &lt;code&gt;&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;()&lt;/code&gt; helper with the other testing symbols.</source>
          <target state="translated">이 패턴을 따르려면 다른 테스트 기호와 함께 &lt;code&gt;&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;()&lt;/code&gt; 도우미를 가져옵니다 .</target>
        </trans-unit>
        <trans-unit id="0e9bedad15ebc538d9e68cbdd28af270587693f3" translate="yes" xml:space="preserve">
          <source>To generate a coverage report run the following command in the root of your project.</source>
          <target state="translated">적용 범위 보고서를 생성하려면 프로젝트 루트에서 다음 명령을 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="abf26b47cd0c5e68c8c79d0daf2df1036fa78b7a" translate="yes" xml:space="preserve">
          <source>To generate a new random user ID, run the following command:</source>
          <target state="translated">새로운 임의의 사용자 ID를 생성하려면 다음 명령을 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="8acafccdcb332ce70715cbf29a3839a0c89102b8" translate="yes" xml:space="preserve">
          <source>To get &lt;code&gt;Node.js&lt;/code&gt;, go to &lt;a href=&quot;https://nodejs.org&quot;&gt;nodejs.org&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Node.js&lt;/code&gt; 를 얻으려면 &lt;a href=&quot;https://nodejs.org&quot;&gt;nodejs.org&lt;/a&gt; 로 이동 하십시오 .</target>
        </trans-unit>
        <trans-unit id="0e9f4a06c6902eaaa4816e3c94cc563103857fe3" translate="yes" xml:space="preserve">
          <source>To get around this problem you can use TypeScript path mapping to tell TypeScript that it should load some modules from a specific location. List all the peer dependencies that your library uses in the workspace TypeScript configuration file &lt;code&gt;./tsconfig.json&lt;/code&gt;, and point them at the local copy in the app's &lt;code&gt;node_modules&lt;/code&gt; folder.</source>
          <target state="translated">이 문제를 해결하려면 TypeScript 경로 매핑을 사용하여 특정 위치에서 일부 모듈을로드해야한다고 TypeScript에 알릴 수 있습니다. 라이브러리가 작업 영역 TypeScript 구성 파일 &lt;code&gt;./tsconfig.json&lt;/code&gt; 에서 사용하는 모든 피어 종속성을 나열 하고 앱의 &lt;code&gt;node_modules&lt;/code&gt; 폴더 에있는 로컬 사본을 가리 킵니다 .</target>
        </trans-unit>
        <trans-unit id="c620c03d023234ed2391242307f1d8712d8a8439" translate="yes" xml:space="preserve">
          <source>To get started with adding Angular animations to your project, import the animation-specific modules along with standard Angular functionality.</source>
          <target state="translated">프로젝트에 Angular 애니메이션 추가를 시작하려면 표준 Angular 기능과 함께 애니메이션 관련 모듈을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="22605a20b1a22f239c1e3107167d2597f5c39ded" translate="yes" xml:space="preserve">
          <source>To guard against a lazy loaded module re-importing &lt;code&gt;GreetingModule&lt;/code&gt;, add the following &lt;code&gt;GreetingModule&lt;/code&gt; constructor.</source>
          <target state="translated">&lt;code&gt;GreetingModule&lt;/code&gt; 을 다시 가져 오는 지연로드 모듈을 방지하려면 다음 &lt;code&gt;GreetingModule&lt;/code&gt; 생성자를 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="77ca585f495413c83c85661daa403686e9bd57f1" translate="yes" xml:space="preserve">
          <source>To guard against minification problems, tell Angular explicitly that it should inject an instance of the &lt;code&gt;MovieService&lt;/code&gt; in the first parameter.</source>
          <target state="translated">축소 문제를 방지하려면 Angular에게 첫 번째 매개 변수에 &lt;code&gt;MovieService&lt;/code&gt; 인스턴스를 주입해야한다고 명시 적으로 알리십시오 .</target>
        </trans-unit>
        <trans-unit id="0483a13b68a98141b413a5592409e590323ff6ac" translate="yes" xml:space="preserve">
          <source>To help determine whether your proxy is working as intended, set the &lt;code&gt;logLevel&lt;/code&gt; option. For example:</source>
          <target state="translated">프록시가 의도 한대로 작동하는지 판별하려면 &lt;code&gt;logLevel&lt;/code&gt; 옵션을 설정하십시오 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="ef7a832a2ae76c1a243ec1b9f05e550953889fdf" translate="yes" xml:space="preserve">
          <source>To help ensure that you have sufficient time and a clear path to update, this is our deprecation policy:</source>
          <target state="translated">충분한 시간과 명확한 업데이트 경로를 보장하기 위해 이것이 사용 중단 정책입니다.</target>
        </trans-unit>
        <trans-unit id="b18eb17f8c80dcf33ac422b8959463f27ab98a1d" translate="yes" xml:space="preserve">
          <source>To help you future-proof your apps, the following table lists all deprecated APIs and features, organized by the release in which they are candidates for removal. Each item is linked to the section later in this guide that describes the deprecation reason and replacement options.</source>
          <target state="translated">앱을 미래에 대비할 수 있도록 다음 표에는 더 이상 사용되지 않는 모든 API 및 기능이 제거 대상인 릴리스별로 구성되어 있습니다. 각 항목은이 안내서의 뒷부분에 나오는 지원 중단 사유 및 교체 옵션에 대해 설명합니다.</target>
        </trans-unit>
        <trans-unit id="d5b3bbad8bfc4eb6cea8091361ccfc84c96c7368" translate="yes" xml:space="preserve">
          <source>To help you get going, the following steps use predefined product data and methods from the &lt;code&gt;product-list.component.ts&lt;/code&gt; file.</source>
          <target state="translated">다음 단계에서는 &lt;code&gt;product-list.component.ts&lt;/code&gt; 파일 의 사전 정의 된 제품 데이터 및 메소드를 사용 합니다.</target>
        </trans-unit>
        <trans-unit id="e3fe5b2a2bd58ed1b8655045a4030a46a226b4e3" translate="yes" xml:space="preserve">
          <source>To host an Angular app on another web host, you'll need to upload or send the files to the host. Because you are building a Single Page Application, you'll also need to make sure you redirect any invalid URLs to your &lt;code&gt;index.html&lt;/code&gt; file. Learn more about development and distribution of your application in the &lt;a href=&quot;../guide/build&quot;&gt;Building &amp;amp; Serving&lt;/a&gt; and &lt;a href=&quot;../guide/deployment&quot;&gt;Deployment&lt;/a&gt; guides.</source>
          <target state="translated">다른 웹 호스트에서 Angular 앱을 호스팅하려면 파일을 호스트로 업로드하거나 보내야합니다. 단일 페이지 응용 프로그램을 작성 중이므로 잘못된 URL을 &lt;code&gt;index.html&lt;/code&gt; 파일 로 리디렉션해야 합니다. &lt;a href=&quot;../guide/build&quot;&gt;구축 및 서비스&lt;/a&gt; 및 &lt;a href=&quot;../guide/deployment&quot;&gt;배포&lt;/a&gt; 가이드 에서 응용 프로그램 개발 및 배포에 대해 자세히 알아보십시오 .</target>
        </trans-unit>
        <trans-unit id="5f77fdab586f868e4093851acfc1533b76f62e25" translate="yes" xml:space="preserve">
          <source>To illustrate the use of &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt;, edit these parts of your app:</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; 사용법을 설명하려면 앱의 다음 부분을 편집하십시오.</target>
        </trans-unit>
        <trans-unit id="1fbb1f454bb7d2e047050e16a5b5adac1e15336c" translate="yes" xml:space="preserve">
          <source>To illustrate, here's a simplified version of &lt;code&gt;HighlightDirective&lt;/code&gt; from the &lt;a href=&quot;attribute-directives&quot;&gt;Attribute Directives&lt;/a&gt; page.</source>
          <target state="translated">다음 은 &lt;a href=&quot;attribute-directives&quot;&gt;속성 지시문&lt;/a&gt; 페이지 의 간단한 버전의 &lt;code&gt;HighlightDirective&lt;/code&gt; 입니다 .</target>
        </trans-unit>
        <trans-unit id="d9242c7bce3b2639f0867ea3c0827c2fa3fcc014" translate="yes" xml:space="preserve">
          <source>To implement an interceptor, declare a class that implements the &lt;code&gt;&lt;a href=&quot;../api/common/http/jsonpinterceptor#intercept&quot;&gt;intercept()&lt;/a&gt;&lt;/code&gt; method of the &lt;code&gt;&lt;a href=&quot;../api/common/http/httpinterceptor&quot;&gt;HttpInterceptor&lt;/a&gt;&lt;/code&gt; interface.</source>
          <target state="translated">인터셉터를 구현하려면 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpinterceptor&quot;&gt;HttpInterceptor&lt;/a&gt;&lt;/code&gt; 인터페이스 의 &lt;code&gt;&lt;a href=&quot;../api/common/http/jsonpinterceptor#intercept&quot;&gt;intercept()&lt;/a&gt;&lt;/code&gt; 메소드 를 구현하는 클래스를 선언하십시오 .</target>
        </trans-unit>
        <trans-unit id="69b60d346fb92f51499356b42a9f5d8d37258d56" translate="yes" xml:space="preserve">
          <source>To include the new component, use its selector, &lt;code&gt;app-product-alert&lt;/code&gt;, as you would an HTML element.</source>
          <target state="translated">새 구성 요소를 포함 시키려면 HTML 요소와 마찬가지로 선택기 &lt;code&gt;app-product-alert&lt;/code&gt; 를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="835dfd12477d853747c300147b3c559302e5eeff" translate="yes" xml:space="preserve">
          <source>To incorporate the feature module into your app, you have to let the root module, &lt;code&gt;app.module.ts&lt;/code&gt;, know about it. Notice the &lt;code&gt;CustomerDashboardModule&lt;/code&gt; export at the bottom of &lt;code&gt;customer-dashboard.module.ts&lt;/code&gt;. This exposes it so that other modules can get to it. To import it into the &lt;code&gt;AppModule&lt;/code&gt;, add it to the imports in &lt;code&gt;app.module.ts&lt;/code&gt; and to the &lt;code&gt;imports&lt;/code&gt; array:</source>
          <target state="translated">기능 모듈을 앱에 통합하려면 루트 모듈 인 &lt;code&gt;app.module.ts&lt;/code&gt; 에 알려야 합니다. 통지 &lt;code&gt;CustomerDashboardModule&lt;/code&gt; 의 하단에 수출 &lt;code&gt;customer-dashboard.module.ts&lt;/code&gt; . 이것은 다른 모듈이 접근 할 수 있도록 노출시킵니다. 로 가져 &lt;code&gt;AppModule&lt;/code&gt; 에서 수입에 추가 &lt;code&gt;app.module.ts&lt;/code&gt; 과에 &lt;code&gt;imports&lt;/code&gt; 배열 :</target>
        </trans-unit>
        <trans-unit id="7d1f76b24bcf5a077b04779a10d2acb122df684c" translate="yes" xml:space="preserve">
          <source>To inspect the properties of the associated &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; (like validity state), export the directive into a local template variable using &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; as the key (ex: &lt;code&gt;#myVar=&quot;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&quot;&lt;/code&gt;). You then access the control using the directive's &lt;code&gt;control&lt;/code&gt; property, but most properties used (like &lt;code&gt;valid&lt;/code&gt; and &lt;code&gt;dirty&lt;/code&gt;) fall through to the control anyway for direct access. See a full list of properties directly available in &lt;code&gt;&lt;a href=&quot;abstractcontroldirective&quot;&gt;AbstractControlDirective&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">연관된 &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 의 속성 (예 : 유효성 상태) 을 검사하려면 &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; 을 키로 사용하여 지시문을 로컬 템플릿 변수로 내보내십시오 (예 : &lt;code&gt;#myVar=&quot;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&quot;&lt;/code&gt; ). 그런 다음 지시문의 &lt;code&gt;control&lt;/code&gt; 속성을 사용하여 컨트롤에 액세스 하지만 ( &lt;code&gt;valid&lt;/code&gt; 및 &lt;code&gt;dirty&lt;/code&gt; 같은) 사용되는 대부분의 속성 은 어쨌든 직접 액세스하기 위해 컨트롤에 적용됩니다. &lt;code&gt;&lt;a href=&quot;abstractcontroldirective&quot;&gt;AbstractControlDirective&lt;/a&gt;&lt;/code&gt; 에서 직접 사용할 수있는 전체 속성 목록을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="3be4cd44a75c82f831a7fb264bb28d71c6d67aa0" translate="yes" xml:space="preserve">
          <source>To install the CLI using &lt;code&gt;npm&lt;/code&gt;, open a terminal/console window and enter the following command:</source>
          <target state="translated">&lt;code&gt;npm&lt;/code&gt; 을 사용하여 CLI를 설치하려면 터미널 / 콘솔 창을 열고 다음 명령을 입력하십시오.</target>
        </trans-unit>
        <trans-unit id="978f127332b309b9081001f9ef289a772808bdd2" translate="yes" xml:space="preserve">
          <source>To install the latest version of TypeScript:</source>
          <target state="translated">최신 버전의 TypeScript를 설치하려면</target>
        </trans-unit>
        <trans-unit id="79ca5dd762f8884fdb128fbf222685ff3aa6cc9b" translate="yes" xml:space="preserve">
          <source>To instruct the AOT compiler to use your translation configuration, set the three &quot;i18n&quot; build configuration options in your CLI configuration file, &lt;code&gt;angular.json&lt;/code&gt;.</source>
          <target state="translated">변환 구성을 사용하도록 AOT 컴파일러에 지시하려면 CLI 구성 파일 &lt;code&gt;angular.json&lt;/code&gt; 에서 세 개의 &quot;i18n&quot;빌드 구성 옵션을 설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="1677d547af7492d218688d8fc496408b0a0b031e" translate="yes" xml:space="preserve">
          <source>To learn more about other browsers that are service worker ready, see the &lt;a href=&quot;https://caniuse.com/#feat=serviceworkers&quot;&gt;Can I Use&lt;/a&gt; page and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API&quot;&gt;MDN docs&lt;/a&gt;.</source>
          <target state="translated">서비스 작업자가 준비한 다른 브라우저에 대한 자세한 내용은 &lt;a href=&quot;https://caniuse.com/#feat=serviceworkers&quot;&gt;사용 가능&lt;/a&gt; 페이지 및 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API&quot;&gt;MDN 문서를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="c84c9b491abea1ff59708036d037ad515cf9fdbd" translate="yes" xml:space="preserve">
          <source>To learn more about providers, see the &lt;a href=&quot;../guide/providers&quot;&gt;Providers section&lt;/a&gt;. To learn more about injectors, see the &lt;a href=&quot;../guide/dependency-injection&quot;&gt;Dependency Injection guide&lt;/a&gt;.</source>
          <target state="translated">제공자에 대한 자세한 내용은 &lt;a href=&quot;../guide/providers&quot;&gt;제공자 섹션을&lt;/a&gt; 참조하십시오 . 인젝터에 대한 자세한 내용은 &lt;a href=&quot;../guide/dependency-injection&quot;&gt;Dependency Injection 안내서를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="f76858a7e260841160caa41bedc9711829079ce9" translate="yes" xml:space="preserve">
          <source>To learn more about reactive forms, see the following guides:</source>
          <target state="translated">반응 형에 대한 자세한 내용은 다음 안내서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="59a572cbe7b9a3e97969793c2bc9cfdeb16ab418" translate="yes" xml:space="preserve">
          <source>To learn more about template-driven forms, see the following guides:</source>
          <target state="translated">템플릿 기반 양식에 대한 자세한 내용은 다음 안내서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="738b9eb031dded491e17886663caa1ff29e71ce4" translate="yes" xml:space="preserve">
          <source>To learn more about the full capabilities of the CLI, see the &lt;a href=&quot;cli&quot;&gt;CLI command reference&lt;/a&gt;.</source>
          <target state="translated">CLI의 모든 기능에 대한 자세한 내용은 &lt;a href=&quot;cli&quot;&gt;CLI 명령 참조를 참조하십시오&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="c3f50de3d99d51fc3307e8adf60a7d37ef18510f" translate="yes" xml:space="preserve">
          <source>To learn more about using the Angular CLI, see the &lt;a href=&quot;cli&quot;&gt;CLI Overview&lt;/a&gt;. In addition to creating the initial workspace and app scaffolding, you can use the CLI to generate Angular code such as components and services. The CLI supports the full development cycle, including building, testing, bundling, and deployment.</source>
          <target state="translated">Angular CLI 사용에 대한 자세한 내용은 &lt;a href=&quot;cli&quot;&gt;CLI 개요를&lt;/a&gt; 참조하십시오 . 초기 작업 영역 및 앱 스캐 폴딩을 만드는 것 외에도 CLI를 사용하여 구성 요소 및 서비스와 같은 각도 코드를 생성 할 수 있습니다. CLI는 빌드, 테스트, 번들링 및 배포를 포함한 전체 개발주기를 지원합니다.</target>
        </trans-unit>
        <trans-unit id="416a58e3ce60c40d39bdf10d063589c334e40ab1" translate="yes" xml:space="preserve">
          <source>To learn more, see &lt;a href=&quot;architecture-services&quot;&gt;Introduction to Services and Dependency Injection&lt;/a&gt;.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;architecture-services&quot;&gt;서비스 및 종속성 주입 소개를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="e694d6c1d32b6b56ce020c646c48af952c618210" translate="yes" xml:space="preserve">
          <source>To learn more, see &lt;a href=&quot;browser-support&quot;&gt;Browser Support&lt;/a&gt;.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;browser-support&quot;&gt;브라우저 지원을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="b5d547564ae49438c7f5583123e361486b37cdfb" translate="yes" xml:space="preserve">
          <source>To learn more, see &lt;a href=&quot;form-validation&quot;&gt;Form Validation&lt;/a&gt;.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;form-validation&quot;&gt;양식 유효성 검사를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="3b51947679f07f8322ce7f3740f084897727afa5" translate="yes" xml:space="preserve">
          <source>To learn more, see &lt;a href=&quot;lifecycle-hooks&quot;&gt;Lifecycle Hooks&lt;/a&gt;.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;lifecycle-hooks&quot;&gt;수명주기 후크를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="5dac4e123cca0d4a59d5f6f873a05e1a76d9583b" translate="yes" xml:space="preserve">
          <source>To learn more, see &lt;a href=&quot;ngmodules&quot;&gt;NgModules&lt;/a&gt;.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;ngmodules&quot;&gt;NgModules를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="c2218a8556fffcfa1f6d34419d68f2922869161d" translate="yes" xml:space="preserve">
          <source>To learn more, see &lt;a href=&quot;observables&quot;&gt;Observables&lt;/a&gt;.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;observables&quot;&gt;Observables를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="b1076876ca0b526aa98a8f286bda2dbf9a2d471f" translate="yes" xml:space="preserve">
          <source>To learn more, see &lt;a href=&quot;pipes&quot;&gt;Pipes&lt;/a&gt;.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;pipes&quot;&gt;파이프를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="7a1bfb784682ebe266242fbdb242bb6f408ed07f" translate="yes" xml:space="preserve">
          <source>To learn more, see &lt;a href=&quot;router&quot;&gt;Routing and Navigation&lt;/a&gt;.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;router&quot;&gt;라우팅 및 탐색을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="3b914fb9f887c33faf04a08f5c6bcad4ae48f1d7" translate="yes" xml:space="preserve">
          <source>To learn more, see &lt;a href=&quot;schematics&quot;&gt;Schematics Overview&lt;/a&gt; and &lt;a href=&quot;schematics-for-libraries&quot;&gt;Schematics for Libraries&lt;/a&gt;.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;schematics&quot;&gt;회로도 개요&lt;/a&gt; 및 &lt;a href=&quot;schematics-for-libraries&quot;&gt;라이브러리 회로도를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="d010cfde7bc2c506df423549e631c7008431f001" translate="yes" xml:space="preserve">
          <source>To learn more, see &lt;a href=&quot;structural-directives&quot;&gt;Structural Directives&lt;/a&gt;.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;structural-directives&quot;&gt;구조 지시문을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="e4570551808faa6eea6e2ab0181ccbcaaa5c2263" translate="yes" xml:space="preserve">
          <source>To learn more, see &lt;a href=&quot;template-syntax#inputs-outputs&quot;&gt;Input and Output Properties&lt;/a&gt;.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;template-syntax#inputs-outputs&quot;&gt;입력 및 출력 속성을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="ecceabc50e42b7eefd96c26c6bf1f43187e84d1f" translate="yes" xml:space="preserve">
          <source>To learn more, see &lt;a href=&quot;template-syntax#inputs-outputs&quot;&gt;input and output properties&lt;/a&gt;.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;template-syntax#inputs-outputs&quot;&gt;입력 및 출력 속성을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="49bdcdc84e41d471767e7d1270cab230b0e8a7f1" translate="yes" xml:space="preserve">
          <source>To learn more, see &lt;a href=&quot;universal&quot;&gt;Angular Universal: server-side rendering&lt;/a&gt;.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;universal&quot;&gt;Angular Universal : 서버 측 렌더링을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="eb003e20f49d50feecb8fdc386ebe9f76301de6f" translate="yes" xml:space="preserve">
          <source>To limit access to a service, consider lazy loading the NgModule that provides that service. See &lt;a href=&quot;ngmodule-faq#service-scope&quot;&gt;How do I restrict service scope to a module?&lt;/a&gt; for more information.</source>
          <target state="translated">서비스에 대한 액세스를 제한하려면 해당 서비스를 제공하는 NgModule의 지연 로딩을 고려하십시오. &lt;a href=&quot;ngmodule-faq#service-scope&quot;&gt;서비스 범위를 모듈로 제한하는 방법을&lt;/a&gt; 참조하십시오 . 자세한 내용은.</target>
        </trans-unit>
        <trans-unit id="176131b1c166c15dd52ca2270019e00646222f93" translate="yes" xml:space="preserve">
          <source>To link our builder implementation with its schema and name, we need to create a &lt;em&gt;builder definition&lt;/em&gt; file, which we can point to in &lt;code&gt;package.json&lt;/code&gt;.</source>
          <target state="translated">빌더 구현을 스키마 및 이름과 연결하려면 &lt;code&gt;package.json&lt;/code&gt; 에서 지정할 수 있는 &lt;em&gt;빌더 정의&lt;/em&gt; 파일 을 작성해야합니다 .</target>
        </trans-unit>
        <trans-unit id="8ef171fef0328a2cd5ad545be79413b8427d3d1b" translate="yes" xml:space="preserve">
          <source>To link to a Stackblitz defined by a named &lt;code&gt;stackblitz.json&lt;/code&gt; file, set the &lt;code&gt;stackblitz&lt;/code&gt; attribute. The following example links to the Stackblitz defined by &lt;code&gt;second.stackblitz.json&lt;/code&gt; in the current guide's directory.</source>
          <target state="translated">명명 된 &lt;code&gt;stackblitz.json&lt;/code&gt; 파일로 정의 된 Stackblitz에 연결하려면 &lt;code&gt;stackblitz&lt;/code&gt; 속성을 설정하십시오 . 다음 예제 는 현재 안내서의 디렉토리에서 &lt;code&gt;second.stackblitz.json&lt;/code&gt; 에 의해 정의 된 Stackblitz 에 연결됩니다 .</target>
        </trans-unit>
        <trans-unit id="d0dfc4d2bbeb415d911b77bd57e23158017465af" translate="yes" xml:space="preserve">
          <source>To link to a Stackblitz in a folder whose name is not the same as the current guide page, set the &lt;code&gt;name&lt;/code&gt; attribute to the name of that folder.</source>
          <target state="translated">현재 안내서 페이지와 이름이 다른 폴더의 Stackblitz에 연결하려면 &lt;code&gt;name&lt;/code&gt; 속성을 해당 폴더의 이름으로 설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="9e806bc9cf5ce821c72637bad288f0c8a385e3b7" translate="yes" xml:space="preserve">
          <source>To make a request with progress events enabled, you can create an instance of &lt;code&gt;&lt;a href=&quot;../api/common/http/httprequest&quot;&gt;HttpRequest&lt;/a&gt;&lt;/code&gt; with the &lt;code&gt;&lt;a href=&quot;../api/common/http/httprequest#reportProgress&quot;&gt;reportProgress&lt;/a&gt;&lt;/code&gt; option set true to enable tracking of progress events.</source>
          <target state="translated">진행 이벤트를 사용하여 요청을 작성하려면 진행 이벤트 추적을 사용 하도록 &lt;code&gt;&lt;a href=&quot;../api/common/http/httprequest#reportProgress&quot;&gt;reportProgress&lt;/a&gt;&lt;/code&gt; 옵션을 true로 설정 하여 &lt;code&gt;&lt;a href=&quot;../api/common/http/httprequest&quot;&gt;HttpRequest&lt;/a&gt;&lt;/code&gt; 인스턴스를 작성할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="2d1f94a35fe29cf68215d8ce11be523428a2104c" translate="yes" xml:space="preserve">
          <source>To make changes to the documentation pages and sample code, clone the &lt;a href=&quot;https://github.com/angular/angular&quot;&gt;Angular github repository&lt;/a&gt; and go to the &lt;code&gt;aio/&lt;/code&gt; folder.</source>
          <target state="translated">설명서 페이지와 샘플 코드를 변경하려면 &lt;a href=&quot;https://github.com/angular/angular&quot;&gt;Angular github 리포지토리를&lt;/a&gt; 복제 하고 &lt;code&gt;aio/&lt;/code&gt; 폴더 로 이동하십시오 .</target>
        </trans-unit>
        <trans-unit id="ad1bed88cabd87c7ef61bbd728ce927c47d305ed" translate="yes" xml:space="preserve">
          <source>To make each product name a link to product details, add the &lt;code&gt;&amp;lt;&lt;a href=&quot;api/router/routerlinkwithhref&quot;&gt;a&lt;/a&gt;&amp;gt;&lt;/code&gt; element and set its title to be the product's name by using the property binding &lt;code&gt;[ ]&lt;/code&gt; syntax, as follows:</source>
          <target state="translated">추가 각 제품명 제품 상세 링크를 만들려면 &lt;code&gt;&amp;lt;&lt;a href=&quot;api/router/routerlinkwithhref&quot;&gt;a&lt;/a&gt;&amp;gt;&lt;/code&gt; 요소와 결합 속성을 사용하여 제품의 이름으로 제목을 설정 &lt;code&gt;[ ]&lt;/code&gt; 구 등을 다음 :</target>
        </trans-unit>
        <trans-unit id="0133990127a445b9c4636bf47add6269aff05d0f" translate="yes" xml:space="preserve">
          <source>To make library code reusable you must define a public API for it. This &quot;user layer&quot; defines what is available to consumers of your library. A user of your library should be able to access public functionality (such as NgModules, service providers and general utility functions) through a single import path.</source>
          <target state="translated">라이브러리 코드를 재사용 가능하게하려면 공개 API를 정의해야합니다. 이 &quot;사용자 계층&quot;은 라이브러리 소비자가 사용할 수있는 항목을 정의합니다. 라이브러리 사용자는 단일 가져 오기 경로를 통해 공용 기능 (예 : NgModules, 서비스 제공 업체 및 일반 유틸리티 기능)에 액세스 할 수 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="f4c06ba3e64fe70ec544df6b51f17ee32a730f00" translate="yes" xml:space="preserve">
          <source>To make sure that the &lt;code&gt;HeroService&lt;/code&gt; can provide this service, register it with the &lt;em&gt;injector&lt;/em&gt;, which is the object that is responsible for choosing and injecting the provider where the app requires it.</source>
          <target state="translated">있는지 확인하십시오 &lt;code&gt;HeroService&lt;/code&gt; 는 이 서비스를 제공에 등록 할 수 &lt;em&gt;인젝터&lt;/em&gt; 응용 프로그램이 그것을 필요로하는 업체를 선택하고 주입을 담당하는 객체입니다.</target>
        </trans-unit>
        <trans-unit id="abe2d5f3112ac6f160f5eaad338cd564e7929599" translate="yes" xml:space="preserve">
          <source>To make sure there is only one instance of &lt;code&gt;NewLogger&lt;/code&gt;, alias &lt;code&gt;OldLogger&lt;/code&gt; with the &lt;code&gt;&lt;a href=&quot;../api/core/existingsansprovider#useExisting&quot;&gt;useExisting&lt;/a&gt;&lt;/code&gt; option.</source>
          <target state="translated">&lt;code&gt;NewLogger&lt;/code&gt; 인스턴스가 하나만 있는지 확인하려면 &lt;code&gt;&lt;a href=&quot;../api/core/existingsansprovider#useExisting&quot;&gt;useExisting&lt;/a&gt;&lt;/code&gt; 옵션을 사용하여 OldLogger의 별명을 &lt;code&gt;OldLogger&lt;/code&gt; 하십시오 .</target>
        </trans-unit>
        <trans-unit id="e85568359a0fbe5ee087b7635e1885b559b60aea" translate="yes" xml:space="preserve">
          <source>To make sure your schematics source files get compiled into the library bundle, add the following scripts to the &lt;code&gt;package.json&lt;/code&gt; file in your library project's root folder (&lt;code&gt;projects/my-lib&lt;/code&gt;).</source>
          <target state="translated">회로도 소스 파일을 라이브러리 번들로 컴파일하려면 라이브러리 프로젝트의 루트 폴더 ( &lt;code&gt;projects/my-lib&lt;/code&gt; ) 에있는 &lt;code&gt;package.json&lt;/code&gt; 파일에 다음 스크립트를 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="b618bd0150119d92c15de99c07c66b9d5d5df18d" translate="yes" xml:space="preserve">
          <source>To make the &quot;Notify Me&quot; button work, you need to configure two things:</source>
          <target state="translated">&quot;알림&quot;버튼이 작동하게하려면 다음 두 가지를 구성해야합니다.</target>
        </trans-unit>
        <trans-unit id="c63bfd6ff80b0594b74ebefc3198e01f8f521a91" translate="yes" xml:space="preserve">
          <source>To make the app navigate to the dashboard automatically, add the following route to the &lt;code&gt;AppRoutingModule.Routes&lt;/code&gt; array.</source>
          <target state="translated">앱이 자동으로 대시 보드로 이동하도록하려면 다음 경로를 &lt;code&gt;AppRoutingModule.Routes&lt;/code&gt; 배열에 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="f13fc1c29e96e1dfdbe3eed259eadf83ed2de57e" translate="yes" xml:space="preserve">
          <source>To make the change less abrupt, we need to define an animation &lt;em&gt;transition&lt;/em&gt; to specify the changes that occur between one state and another over a period of time. The &lt;code&gt;&lt;a href=&quot;../api/animations/transition&quot;&gt;transition&lt;/a&gt;()&lt;/code&gt; function accepts two arguments: the first argument accepts an expression that defines the direction between two transition states, and the second argument accepts one or a series of &lt;code&gt;&lt;a href=&quot;../api/animations/animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; steps.</source>
          <target state="translated">갑작스런 변화를 줄이려면 애니메이션 &lt;em&gt;전환&lt;/em&gt; 을 정의하여 일정 기간 동안 한 상태와 다른 상태간에 발생하는 변화를 지정해야합니다. &lt;code&gt;&lt;a href=&quot;../api/animations/transition&quot;&gt;transition&lt;/a&gt;()&lt;/code&gt; 첫 번째 인수는 두 개의 전이 상태 사이의 방향을 정의하는 표현을 허용하고, 두 번째 인수는 하나 또는 일련의 허용 : 함수는 두 개의 인수를 받아 &lt;code&gt;&lt;a href=&quot;../api/animations/animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; 단계.</target>
        </trans-unit>
        <trans-unit id="8bcf14d372529e2a67e2f9aa251e900cf6621e7d" translate="yes" xml:space="preserve">
          <source>To make these transitions as easy as possible, we deprecate APIs and features for a period of time before removing them. This gives you time to update your apps to the latest APIs and best practices.</source>
          <target state="translated">이러한 전환을 최대한 쉽게하기 위해 API와 기능을 제거하기 전에 일정 기간 동안 API 및 기능을 더 이상 사용하지 않습니다. 이를 통해 앱을 최신 API 및 모범 사례로 업데이트 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c7d74082b91da794e2772b1b64caafcf244578ba" translate="yes" xml:space="preserve">
          <source>To make these transitions as easy as possible, we make these commitments to you:</source>
          <target state="translated">이러한 전환을 가능한 한 쉽게하기 위해 다음과 같은 약속을합니다.</target>
        </trans-unit>
        <trans-unit id="e4342ac072084a99b08c67145d8f7f9d46ebc4bf" translate="yes" xml:space="preserve">
          <source>To make updating easy, we provide complete instructions in the interactive &lt;a href=&quot;https://update.angular.io/&quot;&gt;Angular Update Guide&lt;/a&gt;.</source>
          <target state="translated">업데이트를 쉽게하기 위해 대화식 &lt;a href=&quot;https://update.angular.io/&quot;&gt;Angular Update Guide&lt;/a&gt; 에 완전한 지침을 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="f346dda78884da2f316927c754a446df557d7e97" translate="yes" xml:space="preserve">
          <source>To make use of all the features of Angular service worker, use the latest versions of Angular and the Angular CLI.</source>
          <target state="translated">Angular 서비스 워커의 모든 기능을 사용하려면 최신 버전의 Angular 및 Angular CLI를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="d3a75dfb8b6d5e0a84151719b6bac15ccc94edf4" translate="yes" xml:space="preserve">
          <source>To make your solution reusable, you need to adjust it so that it does not depend on app-specific code. Here are some things to consider in migrating application functionality to a library.</source>
          <target state="translated">솔루션을 재사용 할 수있게하려면 앱 특정 코드에 의존하지 않도록 솔루션을 조정해야합니다. 다음은 응용 프로그램 기능을 라이브러리로 마이그레이션 할 때 고려해야 할 사항입니다.</target>
        </trans-unit>
        <trans-unit id="ebb28b48869f066439d945bc03e317d919b03091" translate="yes" xml:space="preserve">
          <source>To mark a value as trusted, inject &lt;code&gt;&lt;a href=&quot;../api/platform-browser/domsanitizer&quot;&gt;DomSanitizer&lt;/a&gt;&lt;/code&gt; and call one of the following methods:</source>
          <target state="translated">값을 신뢰할 수있는 것으로 표시하려면 &lt;code&gt;&lt;a href=&quot;../api/platform-browser/domsanitizer&quot;&gt;DomSanitizer&lt;/a&gt;&lt;/code&gt; 를 주입 하고 다음 방법 중 하나를 호출하십시오.</target>
        </trans-unit>
        <trans-unit id="826ff064aa36b11928c6420ce581e8abd48d94ef" translate="yes" xml:space="preserve">
          <source>To mark an attribute for translation, add an attribute in the form of &lt;code&gt;i18n-x&lt;/code&gt;, where &lt;code&gt;x&lt;/code&gt; is the name of the attribute to translate. The following example shows how to mark the &lt;code&gt;title&lt;/code&gt; attribute for translation by adding the &lt;code&gt;i18n-title&lt;/code&gt; attribute on the &lt;code&gt;img&lt;/code&gt; tag:</source>
          <target state="translated">번역 할 속성을 표시하려면 &lt;code&gt;i18n-x&lt;/code&gt; 형식으로 속성을 추가하십시오. 여기서 &lt;code&gt;x&lt;/code&gt; 는 번역 할 속성의 이름입니다. 다음 예는 &lt;code&gt;img&lt;/code&gt; 태그 에 &lt;code&gt;i18n-title&lt;/code&gt; 속성을 추가하여 번역 할 &lt;code&gt;title&lt;/code&gt; 속성 을 표시하는 방법을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="d8d57de94256bf3111f375a6f4f8c16a2bbdcc50" translate="yes" xml:space="preserve">
          <source>To mark the greeting for translation, add the &lt;code&gt;i18n&lt;/code&gt; attribute to the &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; tag.</source>
          <target state="translated">인사말을 번역 표시하려면 &lt;code&gt;i18n&lt;/code&gt; 속성을 &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; 태그에 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="204d695937e174c030d578e79a70b8cfdaa9fdde" translate="yes" xml:space="preserve">
          <source>To maximize compatibility, you could ship a single bundle that includes all your compiled code, plus any polyfills that may be needed. Users with modern browsers, however, shouldn't have to pay the price of increased bundle size that comes with polyfills they don't need. Differential loading, which is supported by default in Angular CLI version 8 and higher, solves this problem.</source>
          <target state="translated">호환성을 최대화하기 위해 컴파일 된 모든 코드와 필요한 폴리 필이 포함 된 단일 번들을 제공 할 수 있습니다. 그러나 최신 브라우저를 사용하는 사용자는 필요하지 않은 폴리 필과 함께 제공되는 번들 크기를 늘릴 필요가 없습니다. Angular CLI 버전 8 이상에서 기본적으로 지원되는 차등 로딩은이 문제를 해결합니다.</target>
        </trans-unit>
        <trans-unit id="6c9f63931f1a9876ee6144f0f6f85bb6ad52a4a3" translate="yes" xml:space="preserve">
          <source>To merge the translated text into component templates, compile the app with the completed translation file.</source>
          <target state="translated">번역 된 텍스트를 구성 요소 템플릿으로 병합하려면 완성 된 번역 파일로 앱을 컴파일하십시오.</target>
        </trans-unit>
        <trans-unit id="50177e0937d0c24e4d779ea321fe99f130aa12ab" translate="yes" xml:space="preserve">
          <source>To navigate a relative path with the &lt;code&gt;Router.navigate&lt;/code&gt; method, you must supply the &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; to give the router knowledge of where you are in the current route tree.</source>
          <target state="translated">&lt;code&gt;Router.navigate&lt;/code&gt; 메서드 를 사용하여 상대 경로를 탐색하려면 &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; 를 제공하여 현재 경로 트리의 현재 위치를 라우터에 알려야 합니다.</target>
        </trans-unit>
        <trans-unit id="e3d48bf82f388d44ca8269b4f3bfd203e20968b6" translate="yes" xml:space="preserve">
          <source>To navigate to the &lt;code&gt;CrisisCenterHomeComponent&lt;/code&gt;, the full URL is &lt;code&gt;/crisis-center&lt;/code&gt; (&lt;code&gt;/crisis-center&lt;/code&gt; + &lt;code&gt;''&lt;/code&gt; + &lt;code&gt;''&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;CrisisCenterHomeComponent&lt;/code&gt; 로 이동하려면 전체 URL은 &lt;code&gt;/crisis-center&lt;/code&gt; ( &lt;code&gt;/crisis-center&lt;/code&gt; + &lt;code&gt;''&lt;/code&gt; + &lt;code&gt;''&lt;/code&gt; )입니다.</target>
        </trans-unit>
        <trans-unit id="c30458218377d115bbf5391fba4f7de471157644" translate="yes" xml:space="preserve">
          <source>To navigate to the &lt;code&gt;CrisisDetailComponent&lt;/code&gt; for a crisis with &lt;code&gt;id=2&lt;/code&gt;, the full URL is &lt;code&gt;/crisis-center/2&lt;/code&gt; (&lt;code&gt;/crisis-center&lt;/code&gt; + &lt;code&gt;''&lt;/code&gt; + &lt;code&gt;'/2'&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;id=2&lt;/code&gt; 인 위기 에 대한 &lt;code&gt;CrisisDetailComponent&lt;/code&gt; 로 이동하려면 전체 URL은 &lt;code&gt;/crisis-center/2&lt;/code&gt; ( &lt;code&gt;/crisis-center&lt;/code&gt; + &lt;code&gt;''&lt;/code&gt; + &lt;code&gt;'/2'&lt;/code&gt; )입니다.</target>
        </trans-unit>
        <trans-unit id="97e5b5a0b343f2f0aacae676cafbfb230385ea8b" translate="yes" xml:space="preserve">
          <source>To navigate to the dashboard, the router needs an appropriate route.</source>
          <target state="translated">대시 보드로 이동하려면 라우터에 적절한 경로가 필요합니다.</target>
        </trans-unit>
        <trans-unit id="97d195db608d7c728fef4d499c5aaf0c6b4979af" translate="yes" xml:space="preserve">
          <source>To open a hero's tax return, the preparer clicks on a hero name, which opens a component for editing that return. Each selected hero tax return opens in its own component and multiple returns can be open at the same time.</source>
          <target state="translated">영웅의 세금 보고서를 열려면 준비자가 영웅 이름을 클릭하면 해당 수익을 편집하기위한 구성 요소가 열립니다. 선택한 각 영웅 세금 환급은 자체 구성 요소에서 열리고 동시에 여러 개의 환급을 열 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b5a0babdbd087078fc6808357b85a5f76fc7e195" translate="yes" xml:space="preserve">
          <source>To opt-in an existing application, run</source>
          <target state="translated">기존 애플리케이션을 옵트 인하려면 다음을 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="e1e1e2d56f853cd55abdf55cf1f45f3fbc917764" translate="yes" xml:space="preserve">
          <source>To override a tree-shakable provider, configure the injector of a specific NgModule or component with another provider, using the &lt;code&gt;providers: []&lt;/code&gt; array syntax of the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;()&lt;/code&gt; or &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; decorator.</source>
          <target state="translated">트리 쉐이킹 가능한 공급자를 재정의하려면 &lt;code&gt;providers: []&lt;/code&gt; &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;()&lt;/code&gt; 또는 &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; 데코레이터의 [] 배열 구문을 사용하여 특정 NgModule 또는 구성 요소의 인젝터를 다른 공급자와 함께 구성하십시오 .</target>
        </trans-unit>
        <trans-unit id="36a953799b95a8f6656497edaeebfe8ea9110972" translate="yes" xml:space="preserve">
          <source>To perform complex initializations shortly after construction.</source>
          <target state="translated">생성 직후 복잡한 초기화를 수행합니다.</target>
        </trans-unit>
        <trans-unit id="f0bb0d88a7390f7a95031586a8beb53ff5091b52" translate="yes" xml:space="preserve">
          <source>To position the delete button at the far right of the hero entry, add some CSS to the &lt;code&gt;heroes.component.css&lt;/code&gt;. You'll find that CSS in the &lt;a href=&quot;toh-pt6#heroescomponent&quot;&gt;final review code&lt;/a&gt; below.</source>
          <target state="translated">영웅 항목의 맨 오른쪽에 삭제 버튼을 배치하려면 &lt;code&gt;heroes.component.css&lt;/code&gt; 에 CSS를 추가하십시오 . 아래 의 &lt;a href=&quot;toh-pt6#heroescomponent&quot;&gt;최종 검토 코드&lt;/a&gt; 에서 CSS를 찾을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2c961571be0bc2d29a55550db6735d63db701501" translate="yes" xml:space="preserve">
          <source>To preserve app integrity, the Angular service worker groups all files into a version together. The files grouped into a version usually include HTML, JS, and CSS files. Grouping of these files is essential for integrity because HTML, JS, and CSS files frequently refer to each other and depend on specific content. For example, an &lt;code&gt;index.html&lt;/code&gt; file might have a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag that references &lt;code&gt;bundle.js&lt;/code&gt; and it might attempt to call a function &lt;code&gt;startApp()&lt;/code&gt; from within that script. Any time this version of &lt;code&gt;index.html&lt;/code&gt; is served, the corresponding &lt;code&gt;bundle.js&lt;/code&gt; must be served with it. For example, assume that the &lt;code&gt;startApp()&lt;/code&gt; function is renamed to &lt;code&gt;runApp()&lt;/code&gt; in both files. In this scenario, it is not valid to serve the old &lt;code&gt;index.html&lt;/code&gt;, which calls &lt;code&gt;startApp()&lt;/code&gt;, along with the new bundle, which defines &lt;code&gt;runApp()&lt;/code&gt;.</source>
          <target state="translated">앱 무결성을 유지하기 위해 Angular 서비스 워커는 모든 파일을 한 버전으로 그룹화합니다. 버전으로 그룹화 된 파일에는 일반적으로 HTML, JS 및 CSS 파일이 포함됩니다. HTML, JS 및 CSS 파일은 종종 서로를 참조하고 특정 내용에 의존하기 때문에 이러한 파일의 그룹화는 무결성을 위해 필수적입니다. 예를 들어 &lt;code&gt;index.html&lt;/code&gt; 파일에 &lt;code&gt;bundle.js&lt;/code&gt; 를 참조 하는 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 태그가 있을 수 있으며 해당 스크립트 내에서 &lt;code&gt;startApp()&lt;/code&gt; 함수를 호출하려고 시도 할 수 있습니다 . 이 버전의 &lt;code&gt;index.html&lt;/code&gt; 이 제공 될 때마다 해당 &lt;code&gt;bundle.js&lt;/code&gt; 가 제공되어야합니다. 예를 들어 &lt;code&gt;startApp()&lt;/code&gt; 함수의 이름이 &lt;code&gt;runApp()&lt;/code&gt; 로 바뀌 었다고 가정합니다.두 파일 모두에서. 이 시나리오 에서는 &lt;code&gt;runApp()&lt;/code&gt; 을 정의하는 새 번들과 함께 &lt;code&gt;startApp()&lt;/code&gt; 를 호출 하는 이전 &lt;code&gt;index.html&lt;/code&gt; 을 제공하는 것은 유효하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="fe943f52fad6ef05058867916f3c62d1438605f6" translate="yes" xml:space="preserve">
          <source>To preserve sequences of whitespace characters, use the &lt;code&gt;ngPreserveWhitespaces&lt;/code&gt; attribute.</source>
          <target state="translated">일련의 공백 문자를 유지하려면 &lt;code&gt;ngPreserveWhitespaces&lt;/code&gt; 속성을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="8f13d961bf1f2a2e0a6771cacc0e0734c478d793" translate="yes" xml:space="preserve">
          <source>To prevent this issue, write a constructor that attempts to inject the module or service from the root app injector. If the injection succeeds, the class has been loaded a second time. You can throw an error or take other remedial action.</source>
          <target state="translated">이 문제를 방지하려면 루트 앱 인젝터에서 모듈 또는 서비스를 삽입하려고 시도하는 생성자를 작성하십시오. 주입이 성공하면 클래스가 두 번로드 된 것입니다. 오류를 발생 시키거나 다른 조치를 취할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="82edb1afa8eeaf7f78aa665cfb01fbaf7b31f687" translate="yes" xml:space="preserve">
          <source>To prevent this, configure the component-level injector of &lt;code&gt;HeroTaxReturnComponent&lt;/code&gt; to provide the service, using the &lt;code&gt;providers&lt;/code&gt; property in the component metadata.</source>
          <target state="translated">이를 방지하려면 컴포넌트 메타 데이터 의 &lt;code&gt;providers&lt;/code&gt; 속성을 사용하여 서비스를 제공하도록 &lt;code&gt;HeroTaxReturnComponent&lt;/code&gt; 의 컴포넌트 레벨 인젝터를 구성하십시오 .</target>
        </trans-unit>
        <trans-unit id="764953f88d6db345381e8274359af32c10d6b814" translate="yes" xml:space="preserve">
          <source>To prevent this, the application must ensure that a user request originates from the real application, not from a different site. The server and client must cooperate to thwart this attack.</source>
          <target state="translated">이를 방지하려면 응용 프로그램은 사용자 요청이 다른 사이트가 아닌 실제 응용 프로그램에서 시작되도록해야합니다. 서버와 클라이언트는이 공격을 막기 위해 협력해야합니다.</target>
        </trans-unit>
        <trans-unit id="23e6bd66df0322fbae0f2b4af0850695d73a6068" translate="yes" xml:space="preserve">
          <source>To preview Ivy, use &lt;code&gt;@angular/core@next&lt;/code&gt; version of Angular (8.1.x), rather than &lt;code&gt;@angular/core@latest&lt;/code&gt; (8.0.x), as it contains all the latest bug fixes and improvements.</source>
          <target state="translated">아이비를 미리 보려면 모든 최신 버그 수정 및 개선 사항이 포함되어 있으므로 &lt;code&gt;@angular/core@latest&lt;/code&gt; (8.0.x) 대신 &lt;code&gt;@angular/core@next&lt;/code&gt; 버전의 Angular (8.1.x) 를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="8d1a7d82c50d476f8fd8a4601ce28f42ef661a13" translate="yes" xml:space="preserve">
          <source>To probe the behavior in the live example, change the value and optional exponent in the template.</source>
          <target state="translated">라이브 예제에서 동작을 조사하려면 템플리트에서 값과 선택적 지수를 변경하십시오.</target>
        </trans-unit>
        <trans-unit id="e498d45c2b48e2a16db2e6e00575c839c83f030b" translate="yes" xml:space="preserve">
          <source>To provide better user experience, we show an appropriate error message when the form is invalid.</source>
          <target state="translated">더 나은 사용자 경험을 제공하기 위해 양식이 유효하지 않은 경우 적절한 오류 메시지를 표시합니다.</target>
        </trans-unit>
        <trans-unit id="fe1b5ee91e15d081682393046ee0422bacf79816" translate="yes" xml:space="preserve">
          <source>To read about sharing services, see &lt;a href=&quot;providers&quot;&gt;Providers&lt;/a&gt;.</source>
          <target state="translated">서비스 공유에 대한 정보는 &lt;a href=&quot;providers&quot;&gt;제공자를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="16b4681d1fd2b68022b40ab92b874d4b37fbb9de" translate="yes" xml:space="preserve">
          <source>To register child controls with the form, use &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; with a &lt;code&gt;name&lt;/code&gt; attribute. You may use &lt;code&gt;&lt;a href=&quot;ngmodelgroup&quot;&gt;NgModelGroup&lt;/a&gt;&lt;/code&gt; to create sub-groups within the form.</source>
          <target state="translated">자식 컨트롤을 폼에 등록하려면 &lt;code&gt;name&lt;/code&gt; 속성 과 함께 &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; 을 사용 하십시오 . &lt;code&gt;&lt;a href=&quot;ngmodelgroup&quot;&gt;NgModelGroup&lt;/a&gt;&lt;/code&gt; 을 사용하여 양식 내에 하위 그룹을 작성할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="8bd6725fea1d02e33394eb5471a409672ea30a70" translate="yes" xml:space="preserve">
          <source>To remedy this, you may need to kill the old worker using one of the above techniques (&lt;a href=&quot;service-worker-devops#fail-safe&quot;&gt;Fail-safe&lt;/a&gt; or &lt;a href=&quot;service-worker-devops#safety-worker&quot;&gt;Safety Worker&lt;/a&gt;).</source>
          <target state="translated">이를 해결하려면 위의 기술 중 하나 ( &lt;a href=&quot;service-worker-devops#fail-safe&quot;&gt;페일 세이프&lt;/a&gt; 또는 &lt;a href=&quot;service-worker-devops#safety-worker&quot;&gt;안전 작업자&lt;/a&gt; )를 사용하여 이전 작업자를 죽여야 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="aaeefee9f550b0ec463699d0b839236aef8f3ef3" translate="yes" xml:space="preserve">
          <source>To render the new values, add &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; to the bottom of the &lt;code&gt;AppComponent&lt;/code&gt; template so the view also displays the sunflower:</source>
          <target state="translated">새 값을 렌더링하려면 &lt;code&gt;AppComponent&lt;/code&gt; 템플리트 의 맨 아래에 &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; 를 추가 하여보기에도 해바라기가 표시되도록하십시오.</target>
        </trans-unit>
        <trans-unit id="2d4a7cb38a8f7318c5a2000f39faa271b3df5c87" translate="yes" xml:space="preserve">
          <source>To repeat the command any time the inputs change (watch mode), replace &lt;code&gt;bazel&lt;/code&gt; with &lt;code&gt;ibazel&lt;/code&gt; in these commands.</source>
          <target state="translated">입력이 변경 될 때마다 (명령 모드) 명령을 반복하려면 이 명령에서 &lt;code&gt;bazel&lt;/code&gt; 을 &lt;code&gt;ibazel&lt;/code&gt; 로 바꾸 십시오 .</target>
        </trans-unit>
        <trans-unit id="752e6482dbad0b90cac7b0b18d6fb3ccea0c4a13" translate="yes" xml:space="preserve">
          <source>To report progress, use the &lt;code&gt;BuilderContext.reportProgress()&lt;/code&gt; method, which takes a current value, (optional) total, and status string as arguments. The total can be any number; for example, if you know how many files you have to process, the total could be the number of files, and current should be the number processed so far. The status string is unmodified unless you pass in a new string value.</source>
          <target state="translated">진행률을보고하려면 현재 값, (선택적) 총계 및 상태 문자열을 인수로 사용하는 &lt;code&gt;BuilderContext.reportProgress()&lt;/code&gt; 메소드를 사용하십시오 . 총계는 임의의 숫자 일 수 있습니다. 예를 들어, 처리해야하는 파일 수를 알고 있으면 총계가 파일 수일 수 있으며 현재는 현재 처리 된 수 여야합니다. 새 문자열 값을 전달하지 않으면 상태 문자열이 수정되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="da733e7d828e2271d74de53fcaeb21139907c7a1" translate="yes" xml:space="preserve">
          <source>To report vulnerabilities in Angular itself, email us at &lt;a href=&quot;mailto:security@angular.io&quot;&gt;security@angular.io&lt;/a&gt;.</source>
          <target state="translated">Angular 자체의 취약점을보고하려면 &lt;a href=&quot;mailto:security@angular.io&quot;&gt;security@angular.io로&lt;/a&gt; 이메일을 보내주십시오 .</target>
        </trans-unit>
        <trans-unit id="abae6466bed4070d96bb8c402709fe5af1d1f3dd" translate="yes" xml:space="preserve">
          <source>To resolve this, we give the &lt;code&gt;HeroService&lt;/code&gt; constructor a boolean flag to control display of secret heroes.</source>
          <target state="translated">이를 해결하기 위해 &lt;code&gt;HeroService&lt;/code&gt; 생성자에게 부울 플래그를 지정하여 비밀 영웅의 표시를 제어합니다.</target>
        </trans-unit>
        <trans-unit id="ac34d2783858abc37d4c5360d16d00324ca882e2" translate="yes" xml:space="preserve">
          <source>To resume testing after completion of asynchronous activity or asynchronous change detection, hook that promise. See &lt;a href=&quot;testing#when-stable&quot;&gt;above&lt;/a&gt;.</source>
          <target state="translated">비동기 활동 또는 비동기 변경 감지 완료 후 테스트를 재개하려면 해당 약속을 연결하십시오. &lt;a href=&quot;testing#when-stable&quot;&gt;위를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="c9f7479c96fe5dbd95ef07ceac53b3c6f29bcbc0" translate="yes" xml:space="preserve">
          <source>To review a complete list of changes, organized by version, see the &lt;a href=&quot;https://github.com/angular/angular/blob/master/CHANGELOG.md&quot;&gt;Angular change log&lt;/a&gt;.</source>
          <target state="translated">버전별로 구성된 전체 변경 목록을 검토하려면 &lt;a href=&quot;https://github.com/angular/angular/blob/master/CHANGELOG.md&quot;&gt;각도 변경 로그를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="9431c2209f7aafa5c97b655421d8f332f66b82cb" translate="yes" xml:space="preserve">
          <source>To run in VS with F5</source>
          <target state="translated">F5를 사용하여 VS에서 실행하려면</target>
        </trans-unit>
        <trans-unit id="c7b8b861dfdc4cde711a32872c93fbcde33dd655" translate="yes" xml:space="preserve">
          <source>To run our builder with the new target's default configuration, use the following CLI command in a Linux shell.</source>
          <target state="translated">새 대상의 기본 구성으로 빌더를 실행하려면 Linux 쉘에서 다음 CLI 명령을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="0fde64751caa86a1be2593adb8f8b511a7f690bd" translate="yes" xml:space="preserve">
          <source>To run the dev server with this proxy configuration, call &lt;code&gt;ng serve&lt;/code&gt;.</source>
          <target state="translated">이 프록시 구성으로 dev 서버를 실행하려면 &lt;code&gt;ng serve&lt;/code&gt; 를 호출하십시오 .</target>
        </trans-unit>
        <trans-unit id="a927d68bbfb0db6ef570d00d34818dc1e9fa2fda" translate="yes" xml:space="preserve">
          <source>To see &lt;code&gt;&lt;a href=&quot;formcontrolname&quot;&gt;formControlName&lt;/a&gt;&lt;/code&gt; examples with different form control types, see:</source>
          <target state="translated">확인하려면 &lt;code&gt;&lt;a href=&quot;formcontrolname&quot;&gt;formControlName&lt;/a&gt;&lt;/code&gt; 의 다른 폼 컨트롤의 종류와 예를 참조하십시오 :</target>
        </trans-unit>
        <trans-unit id="8dc5a6c3881a1c518a3093382f57be5a945c82be" translate="yes" xml:space="preserve">
          <source>To see attribute, class, and style bindings in a functioning app, see the  especially for this section.</source>
          <target state="translated">작동하는 앱에서 속성, 클래스 및 스타일 바인딩을 보려면이 섹션의 특히를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="2066c3f9e99ddeda033de3aa56599325b3da329c" translate="yes" xml:space="preserve">
          <source>To see attributes versus DOM properties in a functioning app, see the  especially for binding syntax.</source>
          <target state="translated">작동하는 앱에서 속성과 DOM 속성을 보려면 특히 바인딩 구문에 대해 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="cd33799f99a3c33eec695a0b9c438c5302870973" translate="yes" xml:space="preserve">
          <source>To see it again, or to test after working in the project, clear everything out by clicking the circle with a line through it in the upper left of the Network Tab:</source>
          <target state="translated">다시 보거나 프로젝트에서 작업 한 후 테스트하려면 네트워크 탭의 왼쪽 상단에있는 선이있는 원을 클릭하여 모든 항목을 지우십시오.</target>
        </trans-unit>
        <trans-unit id="ee06c99b240c3cdf0c41541163f7f2fc33c71e72" translate="yes" xml:space="preserve">
          <source>To see the &lt;code&gt;disabled&lt;/code&gt; button example in a functioning app, see the  especially for binding syntax. This example shows you how to toggle the disabled property from the component.</source>
          <target state="translated">보려면 &lt;code&gt;disabled&lt;/code&gt; 작동하는 응용 프로그램에서 버튼 예를 들어, 특히 구문을 바인딩을 참조하십시오. 이 예는 구성 요소에서 disabled 속성을 토글하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="3c298523d5d662629912091f2a811ab71db25f4f" translate="yes" xml:space="preserve">
          <source>To see the difference between using &lt;code&gt;providers&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt;, add another component to the example and call it &lt;code&gt;InspectorComponent&lt;/code&gt;. &lt;code&gt;InspectorComponent&lt;/code&gt; will be a child of the &lt;code&gt;ChildComponent&lt;/code&gt;. In &lt;code&gt;inspector.component.ts&lt;/code&gt;, inject the &lt;code&gt;FlowerService&lt;/code&gt; and &lt;code&gt;AnimalService&lt;/code&gt; in the constructor:</source>
          <target state="translated">&lt;code&gt;providers&lt;/code&gt; 와 &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; 의 차이점을 보려면 예제에 다른 구성 요소를 추가하고 &lt;code&gt;InspectorComponent&lt;/code&gt; 라고합니다 . &lt;code&gt;InspectorComponent&lt;/code&gt; 는 &lt;code&gt;ChildComponent&lt;/code&gt; 의 자식입니다 . 에서 &lt;code&gt;inspector.component.ts&lt;/code&gt; 의 주입 &lt;code&gt;FlowerService&lt;/code&gt; 및 &lt;code&gt;AnimalService&lt;/code&gt; 을 생성자에서 :</target>
        </trans-unit>
        <trans-unit id="7426a6c423585d610bffc9572304cb82a2152a88" translate="yes" xml:space="preserve">
          <source>To see the error, open the browser development tools and look in the console for a message like</source>
          <target state="translated">오류를 보려면 브라우저 개발 도구를 열고 콘솔에서 다음과 같은 메시지를 찾으십시오.</target>
        </trans-unit>
        <trans-unit id="f73daa4c6554c2966552e22cb0bf684bb0109fbc" translate="yes" xml:space="preserve">
          <source>To see the new &quot;Buy&quot; button, refresh the application and click on a product's name to display its details.</source>
          <target state="translated">새로운 &quot;구매&quot;버튼을 보려면 응용 프로그램을 새로 고치고 제품 이름을 클릭하여 세부 정보를 표시하십시오.</target>
        </trans-unit>
        <trans-unit id="5f23726a83ac2bd2efd5087ef3b709a56d3f0856" translate="yes" xml:space="preserve">
          <source>To see the new cart component, click the &quot;Checkout&quot; button. You can see the &quot;cart works!&quot; default text, and the URL has the pattern &lt;code&gt;https://getting-started.stackblitz.io/cart&lt;/code&gt;, where &lt;code&gt;getting-started.stackblitz.io&lt;/code&gt; may be different for your StackBlitz project.</source>
          <target state="translated">새 장바구니 구성 요소를 보려면 &quot;Checkout&quot;버튼을 클릭하십시오. &quot;장바구니 작동&quot;을 볼 수 있습니다. 기본 텍스트이며 URL의 패턴은 &lt;code&gt;https://getting-started.stackblitz.io/cart&lt;/code&gt; 입니다 . 여기서 &lt;code&gt;getting-started.stackblitz.io&lt;/code&gt; 는 StackBlitz 프로젝트와 다를 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c61ac58ea53a8acce49524c72714aac95d91562d" translate="yes" xml:space="preserve">
          <source>To see the progress bar in a working example app, refer to the live example.</source>
          <target state="translated">실제 예제 앱에서 진행률 표시 줄을 보려면 라이브 예제를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="51762df269fa74951660bcc92b3a1d8f604aa3bc" translate="yes" xml:space="preserve">
          <source>To see this HTML in the &lt;code&gt;AppComponent&lt;/code&gt;, you first have to export the &lt;code&gt;CustomerDashboardComponent&lt;/code&gt; in the &lt;code&gt;CustomerDashboardModule&lt;/code&gt;. In &lt;code&gt;customer-dashboard.module.ts&lt;/code&gt;, just beneath the &lt;code&gt;declarations&lt;/code&gt; array, add an &lt;code&gt;exports&lt;/code&gt; array containing &lt;code&gt;CustomerDashboardComponent&lt;/code&gt;:</source>
          <target state="translated">에서이 HTML 확인하려면 &lt;code&gt;AppComponent&lt;/code&gt; 을 먼저 내 보내야 할 &lt;code&gt;CustomerDashboardComponent&lt;/code&gt; 을 에 &lt;code&gt;CustomerDashboardModule&lt;/code&gt; . 에서 &lt;code&gt;customer-dashboard.module.ts&lt;/code&gt; , 바로 아래에 &lt;code&gt;declarations&lt;/code&gt; 배열, 추가 &lt;code&gt;exports&lt;/code&gt; 포함하는 배열 &lt;code&gt;CustomerDashboardComponent&lt;/code&gt; 를 :</target>
        </trans-unit>
        <trans-unit id="a7f192efea8de2bd06b45b2f3bf2d52e4f1a15ca" translate="yes" xml:space="preserve">
          <source>To see this in action, make a small change to &lt;code&gt;app.component.ts&lt;/code&gt; and save. The tests run again, the browser refreshes, and the new test results appear.</source>
          <target state="translated">이를 실제로 보려면 &lt;code&gt;app.component.ts&lt;/code&gt; 를 약간 변경 하고 저장하십시오. 테스트가 다시 실행되고 브라우저가 새로 고쳐지고 새 테스트 결과가 나타납니다.</target>
        </trans-unit>
        <trans-unit id="259f775be5923c9da2e22cf62bebce4455141afc" translate="yes" xml:space="preserve">
          <source>To see this in code, assume that the following value for &lt;code&gt;emoji&lt;/code&gt; is what the parent component were using, as in this service:</source>
          <target state="translated">코드에서이를 확인하려면 이 서비스에서와 같이 &lt;code&gt;emoji&lt;/code&gt; 대한 다음 값 이 상위 구성 요소가 사용하고 있다고 가정하십시오 .</target>
        </trans-unit>
        <trans-unit id="a0b5f297034732e98b08f028549d29a0bc5b1e6b" translate="yes" xml:space="preserve">
          <source>To see which browsers are supported with the above configuration, see which settings meet to your browser support requirements, see the &lt;a href=&quot;https://browserl.ist/?q=%3E+0.5%25%2C+last+2+versions%2C+Firefox+ESR%2C+not+dead%2C+not+IE+9-11&quot;&gt;Browserslist compatibility page&lt;/a&gt;.</source>
          <target state="translated">위 구성에서 지원되는 브라우저를 확인하려면 브라우저 지원 요구 사항에 맞는 설정을 확인하십시오. &lt;a href=&quot;https://browserl.ist/?q=%3E+0.5%25%2C+last+2+versions%2C+Firefox+ESR%2C+not+dead%2C+not+IE+9-11&quot;&gt;브라우저 목록 호환성 페이지를 참조하십시오&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="2aecb05bd9c819562cf2d14d979e8185016e3fb1" translate="yes" xml:space="preserve">
          <source>To see your app in the browser so far, enter the following command in the terminal window:</source>
          <target state="translated">지금까지 브라우저에서 앱을 보려면 터미널 창에 다음 명령을 입력하십시오.</target>
        </trans-unit>
        <trans-unit id="885269644ec508e0ea2156adee77813993bb242f" translate="yes" xml:space="preserve">
          <source>To serve the directory containing your web files with &lt;code&gt;http-server&lt;/code&gt;, run the following command:</source>
          <target state="translated">&lt;code&gt;http-server&lt;/code&gt; 로 웹 파일이 포함 된 디렉토리를 제공하려면 다음 명령을 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="0c073e0977df21697005c90ce800e73a2b92cb98" translate="yes" xml:space="preserve">
          <source>To set the components encapsulation mode, use the &lt;code&gt;encapsulation&lt;/code&gt; property in the component metadata:</source>
          <target state="translated">구성 요소 캡슐화 모드를 설정하려면 구성 요소 메타 데이터에서 &lt;code&gt;encapsulation&lt;/code&gt; 속성을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="3758c4ecb4f9914c32c58041e427ee3538c11cd2" translate="yes" xml:space="preserve">
          <source>To set up a monorepo workspace, you should skip the creating the root application. See &lt;a href=&quot;file-structure#multiple-projects&quot;&gt;Setting up for a multi-project workspace&lt;/a&gt; below.</source>
          <target state="translated">monorepo 작업 공간을 설정하려면 루트 애플리케이션 작성을 건너 뛰어야합니다. 아래 &lt;a href=&quot;file-structure#multiple-projects&quot;&gt;의 다중 프로젝트 작업 공간 설정을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="d47642c5fa808e4e1650b0efd2f81da7bfc8bfcf" translate="yes" xml:space="preserve">
          <source>To set up the Angular service worker in your project, use the CLI &lt;code&gt;add&lt;/code&gt; command.</source>
          <target state="translated">프로젝트에서 Angular 서비스 워커를 설정하려면 CLI &lt;code&gt;add&lt;/code&gt; 명령을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="7d4bc7469b3a5e6cf5c595d20bd4518bf745d39d" translate="yes" xml:space="preserve">
          <source>To set up the Angular service worker in your project, use the CLI command &lt;code&gt;ng add @angular/pwa&lt;/code&gt;. It takes care of configuring your app to use service workers by adding the &lt;code&gt;service-worker&lt;/code&gt; package along with setting up the necessary support files.</source>
          <target state="translated">프로젝트에서 Angular 서비스 워커를 설정하려면 CLI 명령 &lt;code&gt;ng add @angular/pwa&lt;/code&gt; . 필요한 지원 파일을 설정 하고 &lt;code&gt;service-worker&lt;/code&gt; 패키지를 추가하여 서비스 워커를 사용하도록 앱을 구성합니다 .</target>
        </trans-unit>
        <trans-unit id="8dc80e025131d2a69acf3fb7e053f667fec10a2e" translate="yes" xml:space="preserve">
          <source>To set up the Getting Started files with an &lt;strong&gt;ASP.NET 4.x project&lt;/strong&gt; in Visual Studio 2015, follow these steps:</source>
          <target state="translated">Visual Studio 2015에서 &lt;strong&gt;ASP.NET 4.x 프로젝트&lt;/strong&gt; 로 시작 파일을 설정 하려면 다음 단계를 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="de142fa8fc921e821213670b35614aa8b3250c8c" translate="yes" xml:space="preserve">
          <source>To set up the component after Angular sets the input properties.</source>
          <target state="translated">Angular 이후 구성 요소를 설정하려면 입력 특성을 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="e1f243210a5ae29b5fc9889478313e44836e9435" translate="yes" xml:space="preserve">
          <source>To set up your development environment, follow the instructions in &lt;a href=&quot;../guide/setup-local&quot;&gt;Local Environment Setup&lt;/a&gt;.</source>
          <target state="translated">개발 환경을 설정하려면 &lt;a href=&quot;../guide/setup-local&quot;&gt;로컬 환경 설정&lt;/a&gt; 의 지시 사항을 따르십시오 .</target>
        </trans-unit>
        <trans-unit id="e19731bed4fa9ad865f132552125887ef1add447" translate="yes" xml:space="preserve">
          <source>To simplify the writing process for contributing authors. This guide helps you make decisions about tone, voice, and style. It also helps you find the right markup quickly.</source>
          <target state="translated">기고가를위한 글쓰기 과정을 단순화합니다. 이 안내서는 톤, 음성 및 스타일을 결정하는 데 도움이됩니다. 또한 올바른 마크 업을 신속하게 찾을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="367649fb6abb3b384169647dba62b78e8155b4e1" translate="yes" xml:space="preserve">
          <source>To simulate a network issue, disable network interaction for your application. In Chrome:</source>
          <target state="translated">네트워크 문제를 시뮬레이션하려면 응용 프로그램에 대한 네트워크 상호 작용을 비활성화하십시오. Chrome에서 :</target>
        </trans-unit>
        <trans-unit id="f88ded5fc1c640f4a2bd9755a49fe8b90817554c" translate="yes" xml:space="preserve">
          <source>To simulate user input, you can find the input element and set its &lt;code&gt;value&lt;/code&gt; property.</source>
          <target state="translated">사용자 입력을 시뮬레이트하기 위해 입력 요소를 찾고 해당 &lt;code&gt;value&lt;/code&gt; 특성을 설정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="740da28ed7f431cf8963e67cef151e88bd5e2bbf" translate="yes" xml:space="preserve">
          <source>To skip the download link, add the &lt;code&gt;noDownload&lt;/code&gt; attribute.</source>
          <target state="translated">다운로드 링크를 건너 뛰려면 &lt;code&gt;noDownload&lt;/code&gt; 속성을 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="966fbbefbe372b65e80303ab34559f1ffc260f0b" translate="yes" xml:space="preserve">
          <source>To skip the live Stackblitz link and only link to the download, add the &lt;code&gt;downloadOnly&lt;/code&gt; attribute.</source>
          <target state="translated">라이브 Stackblitz 링크를 건너 뛰고 다운로드로만 링크하려면 &lt;code&gt;downloadOnly&lt;/code&gt; 속성을 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="ab87060eaf2297eb5463559b81f0a81cc8881cda" translate="yes" xml:space="preserve">
          <source>To specify a value transformation in an HTML template, use the &lt;a href=&quot;template-syntax#pipe&quot;&gt;pipe operator (|)&lt;/a&gt;.</source>
          <target state="translated">HTML 템플리트에서 값 변환을 지정하려면 &lt;a href=&quot;template-syntax#pipe&quot;&gt;파이프 연산자 (|)를&lt;/a&gt; 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="8c26bd8dbf7d5d26bb6a0711698f315370497669" translate="yes" xml:space="preserve">
          <source>To specify offset styles to be applied at a later time, define steps with &lt;code&gt;&lt;a href=&quot;keyframes&quot;&gt;keyframes&lt;/a&gt;()&lt;/code&gt;, or use &lt;code&gt;&lt;a href=&quot;animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; calls with a delay value. For example:</source>
          <target state="translated">나중에 적용 할 오프셋 스타일을 지정하려면 &lt;code&gt;&lt;a href=&quot;keyframes&quot;&gt;keyframes&lt;/a&gt;()&lt;/code&gt; 단계를 정의 하거나 지연 값으로 &lt;code&gt;&lt;a href=&quot;animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; 호출을 사용하십시오. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="098c0b9849214a70fc7726b8c68b61855e17df7b" translate="yes" xml:space="preserve">
          <source>To specify the response object type, first define an interface with the required properties. (Use an interface rather than a class; a response cannot be automatically converted to an instance of a class.)</source>
          <target state="translated">응답 오브젝트 유형을 지정하려면 먼저 필수 특성으로 인터페이스를 정의하십시오. (클래스가 아닌 인터페이스를 사용하십시오. 응답은 클래스의 인스턴스로 자동 변환 될 수 없습니다.)</target>
        </trans-unit>
        <trans-unit id="dde8a2ef8d669c63a62cff50f1d6396d1cb88adf" translate="yes" xml:space="preserve">
          <source>To start a collection, you need to create the schematic files. The following steps show you how to add initial support without modifying any project files.</source>
          <target state="translated">컬렉션을 시작하려면 회로도 파일을 만들어야합니다. 다음 단계는 프로젝트 파일을 수정하지 않고 초기 지원을 추가하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="675df4470cdabe4f5cbe7c6f1ee4baa2a9761571" translate="yes" xml:space="preserve">
          <source>To start a new project with Ivy enabled, use the &lt;code&gt;--enable-ivy&lt;/code&gt; flag with the &lt;a href=&quot;cli/new&quot;&gt;&lt;code&gt;ng new&lt;/code&gt;&lt;/a&gt; command:</source>
          <target state="translated">Ivy를 사용하여 새 프로젝트를 시작하려면 &lt;a href=&quot;cli/new&quot;&gt; &lt;code&gt;ng new&lt;/code&gt; &lt;/a&gt; 명령 과 함께 &lt;code&gt;--enable-ivy&lt;/code&gt; 플래그를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="cc42865ce59ef8db7b918c51096cb7b9d9d767ba" translate="yes" xml:space="preserve">
          <source>To start rendering your app with Universal on your local system, use the following command.</source>
          <target state="translated">로컬 시스템에서 Universal으로 앱 렌더링을 시작하려면 다음 명령을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="e1c7b5759322bd72b7a70ff587712b48f2342170" translate="yes" xml:space="preserve">
          <source>To stop using the Ivy compiler, set &lt;code&gt;enableIvy&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; in &lt;code&gt;tsconfig.app.json&lt;/code&gt;, or remove it completely. Also remove &lt;code&gt;&quot;aot&quot;: true&lt;/code&gt; from your default build options if you didn't have it there before.</source>
          <target state="translated">Ivy 컴파일러 사용을 중지하려면 &lt;code&gt;tsconfig.app.json&lt;/code&gt; 에서 &lt;code&gt;enableIvy&lt;/code&gt; 를 &lt;code&gt;false&lt;/code&gt; 로 설정 하거나 완전히 제거하십시오. &lt;code&gt;&quot;aot&quot;: true&lt;/code&gt; 제거하십시오 . 이전 빌드 옵션이 없으면 기본 빌드 옵션에서 true 입니다.</target>
        </trans-unit>
        <trans-unit id="d3c09441693602ca793b2b01b4f9af8a0248fabc" translate="yes" xml:space="preserve">
          <source>To streamline the syntax, the &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; directive hides the details behind its own &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; input and &lt;code&gt;ngModelChange&lt;/code&gt; output properties:</source>
          <target state="translated">구문을 간소화하기 위해 &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; 지시문은 자체 &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; 입력 및 &lt;code&gt;ngModelChange&lt;/code&gt; 출력 속성 뒤에 세부 정보를 숨 깁니다 .</target>
        </trans-unit>
        <trans-unit id="39b4d5704426ff8a7639bccde11ece39d8b3aeb6" translate="yes" xml:space="preserve">
          <source>To subscribe, call &lt;code&gt;&lt;a href=&quot;swpush#requestSubscription&quot;&gt;SwPush.requestSubscription()&lt;/a&gt;&lt;/code&gt;, which asks the user for permission. The call returns a &lt;code&gt;Promise&lt;/code&gt; with a new &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/PushSubscription&quot;&gt;&lt;code&gt;PushSubscription&lt;/code&gt;&lt;/a&gt; instance.</source>
          <target state="translated">구독하려면 &lt;code&gt;&lt;a href=&quot;swpush#requestSubscription&quot;&gt;SwPush.requestSubscription()&lt;/a&gt;&lt;/code&gt; 호출 하여 사용자에게 권한을 요청하십시오. 이 호출은 새로운 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/PushSubscription&quot;&gt; &lt;code&gt;PushSubscription&lt;/code&gt; &lt;/a&gt; 인스턴스 와 함께 &lt;code&gt;Promise&lt;/code&gt; 을 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="091932076ef13bad443c5e0beaa6885505ec5895" translate="yes" xml:space="preserve">
          <source>To summarize, Angular found the &lt;code&gt;appHighlight&lt;/code&gt; attribute on the &lt;strong&gt;host&lt;/strong&gt;&lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; element. It created an instance of the &lt;code&gt;HighlightDirective&lt;/code&gt; class and injected a reference to the &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; element into the directive's constructor which sets the &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; element's background style to yellow.</source>
          <target state="translated">요약하면 Angular 는 &lt;strong&gt;호스트 &lt;/strong&gt; &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; 요소 에서 &lt;code&gt;appHighlight&lt;/code&gt; 속성을 찾았습니다 . &lt;code&gt;HighlightDirective&lt;/code&gt; 클래스 의 인스턴스를 만들고 &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; 요소의 배경 스타일을 노란색으로 설정하는 지시자의 생성자에 &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; 요소에 대한 참조를 삽입했습니다 .&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fe4b6b798619064feab05be7c141408b9ecfad03" translate="yes" xml:space="preserve">
          <source>To summarize, the key differentiating factors of &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; are:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; 의 주요 차별화 요소 는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="b52ca2d96bdaaa3cfb5379f6156241ff261b361a" translate="yes" xml:space="preserve">
          <source>To support these behaviors, the Angular service worker loads a &lt;em&gt;manifest&lt;/em&gt; file from the server. The manifest describes the resources to cache and includes hashes of every file's contents. When an update to the application is deployed, the contents of the manifest change, informing the service worker that a new version of the application should be downloaded and cached. This manifest is generated from a CLI-generated configuration file called &lt;code&gt;ngsw-config.json&lt;/code&gt;.</source>
          <target state="translated">이러한 동작을 지원하기 위해 Angular 서비스 워커 는 서버에서 &lt;em&gt;매니페스트&lt;/em&gt; 파일을 로드 합니다. 매니페스트는 캐시 할 리소스를 설명하고 모든 파일 내용의 해시를 포함합니다. 응용 프로그램에 대한 업데이트가 배포되면 매니페스트의 내용이 변경되어 서비스 작업자에게 새 버전의 응용 프로그램을 다운로드하여 캐시해야 함을 알립니다. 이 매니페스트는 &lt;code&gt;ngsw-config.json&lt;/code&gt; 이라는 CLI 생성 구성 파일에서 생성됩니다 .</target>
        </trans-unit>
        <trans-unit id="c4ca653d202193362f15dba2ff3cfc4b0025739a" translate="yes" xml:space="preserve">
          <source>To systematically block XSS bugs, Angular treats all values as untrusted by default. When a value is inserted into the DOM from a template, via property, attribute, style, class binding, or interpolation, Angular sanitizes and escapes untrusted values.</source>
          <target state="translated">XSS 버그를 체계적으로 차단하기 위해 Angular는 기본적으로 모든 값을 신뢰할 수없는 것으로 처리합니다. 속성, 속성, 스타일, 클래스 바인딩 또는 보간을 통해 템플릿에서 값이 DOM에 삽입되면 Angular는 신뢰할 수없는 값을 삭제하고 이스케이프합니다.</target>
        </trans-unit>
        <trans-unit id="5c2d8661b5b005891a1e25d985a1673afb599e07" translate="yes" xml:space="preserve">
          <source>To take advantage of this, your server needs to set a token in a JavaScript readable session cookie called &lt;code&gt;XSRF-TOKEN&lt;/code&gt; on either the page load or the first GET request. On subsequent requests the server can verify that the cookie matches the &lt;code&gt;X-XSRF-TOKEN&lt;/code&gt; HTTP header, and therefore be sure that only code running on your domain could have sent the request. The token must be unique for each user and must be verifiable by the server; this prevents the client from making up its own tokens. Set the token to a digest of your site's authentication cookie with a salt for added security.</source>
          <target state="translated">이를 활용하려면 서버가 페이지로드 또는 첫 번째 GET 요청에서 &lt;code&gt;XSRF-TOKEN&lt;/code&gt; 이라는 JavaScript 읽기 가능 세션 쿠키에 토큰을 설정해야합니다 . 후속 요청에서 서버는 쿠키가 &lt;code&gt;X-XSRF-TOKEN&lt;/code&gt; HTTP 헤더 와 일치하는지 확인할 수 있으므로 도메인에서 실행중인 코드 만 요청을 보낼 수 있는지 확인하십시오. 토큰은 각 사용자마다 고유해야하며 서버에서 확인할 수 있어야합니다. 이렇게하면 클라이언트가 자체 토큰을 만들지 못하게됩니다. 추가 보안을 위해 소금을 사용하여 사이트의 인증 쿠키를 다이제스트하도록 토큰을 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="a2c3396ff07cb76eb004b09abd2396aa4cfc57b5" translate="yes" xml:space="preserve">
          <source>To take this example a little further, we can create an observable that publishes events. In this example, the subscriber function is defined inline.</source>
          <target state="translated">이 예제를 조금 더 진행하기 위해 이벤트를 게시하는 Observable을 만들 수 있습니다. 이 예에서 가입자 기능은 인라인으로 정의됩니다.</target>
        </trans-unit>
        <trans-unit id="33b81c4efe4680114d1f1e1f01d20fc61854d427" translate="yes" xml:space="preserve">
          <source>To tell Angular that this is a pipe, you apply the &lt;code&gt;@&lt;a href=&quot;../api/core/pipe&quot;&gt;Pipe&lt;/a&gt;&lt;/code&gt; decorator, which you import from the core Angular library.</source>
          <target state="translated">이것이 Angular에 파이프임을 알리기 위해 핵심 Angular 라이브러리에서 가져온 &lt;code&gt;@&lt;a href=&quot;../api/core/pipe&quot;&gt;Pipe&lt;/a&gt;&lt;/code&gt; 데코레이터 를 적용합니다 .</target>
        </trans-unit>
        <trans-unit id="d69f6b79976daa71b140336b6e0fc275fb2a4a15" translate="yes" xml:space="preserve">
          <source>To tell that story in code, you'll often need to create partial files or intermediate versions of the final source code file with fragments of code that don't appear in the final app.</source>
          <target state="translated">이 스토리를 코드로 표현하려면 최종 앱에 표시되지 않는 코드 조각으로 최종 소스 코드 파일의 부분 파일 또는 중간 버전을 만들어야하는 경우가 종종 있습니다.</target>
        </trans-unit>
        <trans-unit id="41ed9ac99a1093b2313ac001a60efb09be984be6" translate="yes" xml:space="preserve">
          <source>To test a service, you set the &lt;code&gt;providers&lt;/code&gt; metadata property with an array of the services that you'll test or mock.</source>
          <target state="translated">서비스를 테스트하려면 &lt;code&gt;providers&lt;/code&gt; 메타 데이터 속성을 테스트하거나 조롱 할 서비스 배열로 설정합니다 .</target>
        </trans-unit>
        <trans-unit id="0689818deab6829bbe840e4c6eba2a40a2aa0140" translate="yes" xml:space="preserve">
          <source>To test this feature, add a button with a &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; to the &lt;code&gt;HeroListComponent&lt;/code&gt; template and set the link to &lt;code&gt;&quot;/sidekicks&quot;&lt;/code&gt;.</source>
          <target state="translated">이 기능을 테스트하려면 &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; 가 있는 버튼을 &lt;code&gt;HeroListComponent&lt;/code&gt; 템플릿에 추가하고 링크를 &lt;code&gt;&quot;/sidekicks&quot;&lt;/code&gt; sidekicks &quot;로 설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="ecc66d276b3225d15e06e1f1cf36defdf74d825a" translate="yes" xml:space="preserve">
          <source>To translate a &lt;code&gt;plural&lt;/code&gt;, translate its ICU format match values:</source>
          <target state="translated">&lt;code&gt;plural&lt;/code&gt; 을 번역하려면 ICU 형식 일치 값을 번역하십시오.</target>
        </trans-unit>
        <trans-unit id="885e91781ad354087c34588828548ccdfecdb432" translate="yes" xml:space="preserve">
          <source>To translate a text message accurately, the translator may need additional information or context.</source>
          <target state="translated">문자 메시지를 정확하게 번역하려면 번역기에 추가 정보 나 컨텍스트가 필요할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="cef6e619ff20a5d2471097479db5a249a2c82f81" translate="yes" xml:space="preserve">
          <source>To turn off this feature, run the following command:</source>
          <target state="translated">이 기능을 끄려면 다음 명령을 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="ed33505f49ae41506ab117a8b63c6d0f85e67b26" translate="yes" xml:space="preserve">
          <source>To understand how the &lt;code&gt;providers&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; influence service visibility differently, the following sections build a  step-by-step and compare the use of &lt;code&gt;providers&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; in code and a logical tree.</source>
          <target state="translated">&lt;code&gt;providers&lt;/code&gt; 와 &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; 서비스 가시성에 다른 방식으로 영향을 미치는 방식을 이해하기 위해 다음 섹션에서는 단계별로 빌드하고 코드와 논리 트리에서 &lt;code&gt;providers&lt;/code&gt; 와 &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; 의 사용을 비교합니다 .</target>
        </trans-unit>
        <trans-unit id="3eebe2ea66d8dfa62e18d044bc45eab39aaad7bf" translate="yes" xml:space="preserve">
          <source>To update an existing project to use Ivy, set the &lt;code&gt;enableIvy&lt;/code&gt; option in the &lt;code&gt;angularCompilerOptions&lt;/code&gt; in your project's &lt;code&gt;tsconfig.app.json&lt;/code&gt;.</source>
          <target state="translated">Ivy를 사용하도록 기존 프로젝트를 업데이트하려면 프로젝트 &lt;code&gt;tsconfig.app.json&lt;/code&gt; 의 &lt;code&gt;angularCompilerOptions&lt;/code&gt; 에서 &lt;code&gt;enableIvy&lt;/code&gt; 옵션을 설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="b4726caf12aeeed22903d708d6fd9dcb3ab84cef" translate="yes" xml:space="preserve">
          <source>To update from one major version to another, use the format &lt;code&gt;ng &lt;a href=&quot;../api/forms/ngmodel#update&quot;&gt;update&lt;/a&gt; @angular/cli@^&amp;lt;major_version&amp;gt; @angular/core@^&amp;lt;major_version&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">하나의 메이저 버전에서 다른 메이저 버전으로 업데이트하려면 &lt;code&gt;ng &lt;a href=&quot;../api/forms/ngmodel#update&quot;&gt;update&lt;/a&gt; @angular/cli@^&amp;lt;major_version&amp;gt; @angular/core@^&amp;lt;major_version&amp;gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3b123945947d8bf63fcbe7c6d93a368853a6bef1" translate="yes" xml:space="preserve">
          <source>To update the &lt;code&gt;name&lt;/code&gt; property, the changed text is retrieved by following the path &lt;code&gt;$event.target.value&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; 특성 을 업데이트하려면 &lt;code&gt;$event.target.value&lt;/code&gt; 경로를 따라 변경된 텍스트를 검색하십시오 .</target>
        </trans-unit>
        <trans-unit id="e3daec1d373f17dce64b4434537727da04314427" translate="yes" xml:space="preserve">
          <source>To update the hero form to be a reactive form, you can use some of the same built-in validators&amp;mdash;this time, in function form. See below:</source>
          <target state="translated">히어로 형식을 반응 형 형식으로 업데이트하기 위해 동일한 내장 유효성 검사기 중 일부를 함수 형식으로 사용할 수 있습니다. 아래를보십시오 :</target>
        </trans-unit>
        <trans-unit id="ec580f157cda9cf0f0589f7bbc29f74d7bf8bf09" translate="yes" xml:space="preserve">
          <source>To update to the next beta or pre-release version, use the &lt;code&gt;--next=true&lt;/code&gt; option.</source>
          <target state="translated">다음 베타 또는 시험판 버전으로 업데이트하려면 &lt;code&gt;--next=true&lt;/code&gt; 옵션을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="bbc501407156722afda3e86f40157fb7f056ade2" translate="yes" xml:space="preserve">
          <source>To update your apps:</source>
          <target state="translated">앱을 업데이트하려면 :</target>
        </trans-unit>
        <trans-unit id="8a839cde0f94f54c1db2fbd03e39cc0d94409768" translate="yes" xml:space="preserve">
          <source>To update your code before v7, you'll want to decide whether to stick with reactive form directives (and get/set values using reactive forms patterns) or switch over to template-driven directives.</source>
          <target state="translated">v7 이전의 코드를 업데이트하려면 반응 형 양식 지시문을 고수하고 (반응 형 양식 패턴을 사용하여 값을 가져 오거나 설정) 템플릿 기반 지시문으로 전환할지 여부를 결정해야합니다.</target>
        </trans-unit>
        <trans-unit id="f18488d2ffa521dc9c72e40ed167cd48cf4b0efb" translate="yes" xml:space="preserve">
          <source>To use &lt;code&gt;&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;()&lt;/code&gt; functionality, you must import &lt;code&gt;zone.js/dist/zone-testing&lt;/code&gt; in your test setup file. If you created your project with the Angular CLI, &lt;code&gt;zone-testing&lt;/code&gt; is already imported in &lt;code&gt;src/test.ts&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;()&lt;/code&gt; 기능 을 사용하려면 테스트 설정 파일에서 &lt;code&gt;zone.js/dist/zone-testing&lt;/code&gt; 을 가져와야 합니다. Angular CLI를 사용하여 프로젝트를 생성 한 경우 &lt;code&gt;zone-testing&lt;/code&gt; 는 이미 &lt;code&gt;src/test.ts&lt;/code&gt; 에서 가져 옵니다 .</target>
        </trans-unit>
        <trans-unit id="a2482c9fc60deb6dca0d28b779cb8b73a4467b41" translate="yes" xml:space="preserve">
          <source>To use &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; functionality, you must import &lt;code&gt;zone.js/dist/zone-testing&lt;/code&gt; in your test setup file. If you created your project with the Angular CLI, &lt;code&gt;zone-testing&lt;/code&gt; is already imported in &lt;code&gt;src/test.ts&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; 기능 을 사용하려면 테스트 설정 파일에서 &lt;code&gt;zone.js/dist/zone-testing&lt;/code&gt; 을 가져와야 합니다. Angular CLI를 사용하여 프로젝트를 생성 한 경우 &lt;code&gt;zone-testing&lt;/code&gt; 는 이미 &lt;code&gt;src/test.ts&lt;/code&gt; 에서 가져 옵니다 .</target>
        </trans-unit>
        <trans-unit id="4c5cd4c387b425279202e14518a4f13f588d38ae" translate="yes" xml:space="preserve">
          <source>To use AOT with a hybrid app, you have to first set it up like any other Angular application, as shown in &lt;a href=&quot;aot-compiler&quot;&gt;the Ahead-of-time Compilation chapter&lt;/a&gt;.</source>
          <target state="translated">하이브리드 앱과 함께 AOT를 사용하려면 &lt;a href=&quot;aot-compiler&quot;&gt;Ahead-of-time Compilation 장에&lt;/a&gt; 표시된대로 먼저 다른 Angular 애플리케이션과 마찬가지로 AOT를 설정해야합니다 .</target>
        </trans-unit>
        <trans-unit id="dc05bdf242df5c5e52a5f7713254718034ee591f" translate="yes" xml:space="preserve">
          <source>To use Bazel in a new application, first install &lt;code&gt;@angular/bazel&lt;/code&gt; globally</source>
          <target state="translated">새 응용 프로그램에서 Bazel을 사용하려면 먼저 &lt;code&gt;@angular/bazel&lt;/code&gt; 전역으로 설치하십시오.</target>
        </trans-unit>
        <trans-unit id="c3f4f3cb1895e041269196b22d5a205a95c00cb5" translate="yes" xml:space="preserve">
          <source>To use CSS grid with IE10/11, you must explicitly enable it using the &lt;code&gt;autoplace&lt;/code&gt; option. To do this, add the following to the top of the global styles file (or within a specific css selector scope):</source>
          <target state="translated">IE10 / 11에서 CSS 그리드를 사용하려면 &lt;code&gt;autoplace&lt;/code&gt; 옵션 을 사용하여 CSS 그리드를 명시 적으로 활성화해야합니다 . 이렇게하려면 전역 스타일 파일의 맨 위에 (또는 특정 CSS 선택기 범위 내에서) 다음을 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="adbc1c0149aa2c996df7fd94085915ea70c1dfcf" translate="yes" xml:space="preserve">
          <source>To use a select in a template-driven form, simply add an &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; and a &lt;code&gt;name&lt;/code&gt; attribute to the main &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; tag.</source>
          <target state="translated">템플릿 기반 양식에서 선택을 사용하려면 &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; 과 &lt;code&gt;name&lt;/code&gt; 속성을 기본 &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; 태그에 추가하면됩니다.</target>
        </trans-unit>
        <trans-unit id="d9a033cbec8595c7b94a782a7c20d201108cbb14" translate="yes" xml:space="preserve">
          <source>To use reactive forms, import &lt;code&gt;&lt;a href=&quot;../api/forms/reactiveformsmodule&quot;&gt;ReactiveFormsModule&lt;/a&gt;&lt;/code&gt; from the &lt;code&gt;@angular/forms&lt;/code&gt; package and add it to your NgModule's &lt;code&gt;imports&lt;/code&gt; array.</source>
          <target state="translated">반응 형을 사용하려면 &lt;code&gt;@angular/forms&lt;/code&gt; 패키지 에서 &lt;code&gt;&lt;a href=&quot;../api/forms/reactiveformsmodule&quot;&gt;ReactiveFormsModule&lt;/a&gt;&lt;/code&gt; 을 가져 와서 NgModule의 &lt;code&gt;imports&lt;/code&gt; 배열에 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="99b05aeea7ad8c9ff74a29d0c307334f8ae5a9cc" translate="yes" xml:space="preserve">
          <source>To use the &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/locationupgrademodule&quot;&gt;LocationUpgradeModule&lt;/a&gt;&lt;/code&gt;, import the symbol from &lt;code&gt;@angular/common/upgrade&lt;/code&gt; and add it to your &lt;code&gt;AppModule&lt;/code&gt; imports using the static &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/locationupgrademodule#config&quot;&gt;LocationUpgradeModule.config()&lt;/a&gt;&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/upgrade/locationupgrademodule&quot;&gt;LocationUpgradeModule&lt;/a&gt;&lt;/code&gt; 을 사용하려면 &lt;code&gt;@angular/common/upgrade&lt;/code&gt; 에서 기호를 가져 와서 정적 &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/locationupgrademodule#config&quot;&gt;LocationUpgradeModule.config()&lt;/a&gt;&lt;/code&gt; 메서드를 사용 하여 &lt;code&gt;AppModule&lt;/code&gt; 가져 오기에 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="df43dc8c1dde95936358a838f639abe20aaeb53b" translate="yes" xml:space="preserve">
          <source>To use the &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; decorator in a child component class, first import &lt;code&gt;&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; and then decorate the property with &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt;:</source>
          <target state="translated">자식 구성 요소 클래스에서 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; 데코레이터 를 사용하려면 먼저 &lt;code&gt;&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; 을 가져온 다음 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; 속성을 장식하십시오 .</target>
        </trans-unit>
        <trans-unit id="d4922d09d3f66928b67e63af20c190e526abbeb7" translate="yes" xml:space="preserve">
          <source>To use the &lt;code&gt;ng deploy&lt;/code&gt; command, use &lt;code&gt;ng add&lt;/code&gt; to add a package that implements deployment capabilities to your favorite platform. Adding the package automatically updates your workspace configuration, adding a deployment &lt;a href=&quot;../guide/cli-builder&quot;&gt;CLI builder&lt;/a&gt;. For example:</source>
          <target state="translated">용도에 &lt;code&gt;ng deploy&lt;/code&gt; 명령을 사용 &lt;code&gt;ng add&lt;/code&gt; 패키지를 추가하는 것을 좋아하는 플랫폼 구현 배포 기능을. 패키지를 추가하면 배치 &lt;a href=&quot;../guide/cli-builder&quot;&gt;CLI 빌더를&lt;/a&gt; 추가하여 작업 공간 구성이 자동으로 업데이트됩니다 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="4e5078f362fa8e75b589c64aa05c23c8c2894e2d" translate="yes" xml:space="preserve">
          <source>To use the Language Service for in-line templates, you must first add an extension to allow TypeScript, then install the Angular Language Service plug-in. Starting with TypeScript 2.3, TypeScript has a plug-in model that the language service can use.</source>
          <target state="translated">인라인 템플릿에 언어 서비스를 사용하려면 먼저 TypeScript를 허용하는 확장을 추가 한 다음 Angular Language Service 플러그인을 설치해야합니다. TypeScript 2.3부터 TypeScript에는 언어 서비스가 사용할 수있는 플러그인 모델이 있습니다.</target>
        </trans-unit>
        <trans-unit id="d456e2ebd07067eb97a027965223c7abb3f733d7" translate="yes" xml:space="preserve">
          <source>To use the environment configurations you have defined, your components must import the original environments file:</source>
          <target state="translated">정의한 환경 구성을 사용하려면 구성 요소가 원래 환경 파일을 가져와야합니다.</target>
        </trans-unit>
        <trans-unit id="f5d7e74575342444e96fc87e2007c4383a5ce53c" translate="yes" xml:space="preserve">
          <source>To use the new &lt;code&gt;HighlightDirective&lt;/code&gt;, add a paragraph (&lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt;) element to the template of the root &lt;code&gt;AppComponent&lt;/code&gt; and apply the directive as an attribute.</source>
          <target state="translated">새로운 &lt;code&gt;HighlightDirective&lt;/code&gt; 를 사용하려면 루트 &lt;code&gt;AppComponent&lt;/code&gt; 의 템플리트에 단락 ( &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; ) 요소를 추가 하고 지시문을 속성으로 적용하십시오.</target>
        </trans-unit>
        <trans-unit id="6ef78e3fbfe7e791fb6b54a58fe45a757bce01ad" translate="yes" xml:space="preserve">
          <source>To use the same instance of &lt;code&gt;HttpInterceptors&lt;/code&gt; for the entire app, import the &lt;code&gt;&lt;a href=&quot;httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; only in your &lt;code&gt;AppModule&lt;/code&gt;, and add the interceptors to the root application injector . If you import &lt;code&gt;&lt;a href=&quot;httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; multiple times across different modules (for example, in lazy loading modules), each import creates a new copy of the &lt;code&gt;&lt;a href=&quot;httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt;, which overwrites the interceptors provided in the root module.</source>
          <target state="translated">전체 앱에 동일한 &lt;code&gt;HttpInterceptors&lt;/code&gt; 인스턴스를 사용하려면 &lt;code&gt;AppModule&lt;/code&gt; 에서만 &lt;code&gt;&lt;a href=&quot;httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; 을 가져오고 루트 애플리케이션 인젝터에 인터셉터를 추가하십시오. 다른 모듈 (예 : 지연 로딩 모듈)에서 &lt;code&gt;&lt;a href=&quot;httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; 을 여러 번 가져 오는 경우 각 가져 오기에서 &lt;code&gt;&lt;a href=&quot;httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; 의 새 사본을 작성 하여 루트 모듈에 제공된 인터셉터를 겹쳐 씁니다.</target>
        </trans-unit>
        <trans-unit id="8a1652d0cb403164496c7c6e9915242c358c810d" translate="yes" xml:space="preserve">
          <source>To use this directive you must provide a container element that sets the &lt;code&gt;[&lt;a href=&quot;ngplural&quot;&gt;ngPlural&lt;/a&gt;]&lt;/code&gt; attribute to a switch expression. Inner elements with a &lt;code&gt;[&lt;a href=&quot;ngpluralcase&quot;&gt;ngPluralCase&lt;/a&gt;]&lt;/code&gt; will display based on their expression:</source>
          <target state="translated">이 지시문을 사용하려면 &lt;code&gt;[&lt;a href=&quot;ngplural&quot;&gt;ngPlural&lt;/a&gt;]&lt;/code&gt; 속성을 스위치 표현식으로 설정하는 컨테이너 요소를 제공해야합니다 . &lt;code&gt;[&lt;a href=&quot;ngpluralcase&quot;&gt;ngPluralCase&lt;/a&gt;]&lt;/code&gt; 가 있는 내부 요소는 해당 표현식을 기반으로 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="bec1df521164ef700b40c0abfb52f86f1e693028" translate="yes" xml:space="preserve">
          <source>To use this service, add it to your component or directive as a dependency. The service is instantiated along with your component.</source>
          <target state="translated">이 서비스를 사용하려면 구성 요소 또는 지시문에 종속성으로 추가하십시오. 서비스는 구성 요소와 함께 인스턴스화됩니다.</target>
        </trans-unit>
        <trans-unit id="ec400ea96c2fce5839cbfdc718a80a3377af0601" translate="yes" xml:space="preserve">
          <source>To use your own library in an app:</source>
          <target state="translated">앱에서 자신의 라이브러리를 사용하려면</target>
        </trans-unit>
        <trans-unit id="3c973408d2448836192162ca55537f91af2a75f7" translate="yes" xml:space="preserve">
          <source>To validate the links, you don't need the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; to navigate and you don't need the &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&amp;gt;&lt;/code&gt; to mark where the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; inserts &lt;em&gt;routed components&lt;/em&gt;.</source>
          <target state="translated">링크를 확인하려면, 당신은 필요가 없습니다 &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; 탐색 할 당신은 필요하지 않습니다 &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&amp;gt;&lt;/code&gt; 를 Where 표시하기 위해 &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; 삽입이 &lt;em&gt;구성 요소를 전달&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="0df4d562aaab9bff2662b3ac4f6d1a92f4728ee1" translate="yes" xml:space="preserve">
          <source>To validate the potential alter ego, we need to consult a central database of all currently enlisted heroes. The process is asynchronous, so we need a special validator for that.</source>
          <target state="translated">잠재적 인 자아의 가능성을 확인하기 위해 현재 참여한 모든 영웅의 중앙 데이터베이스를 참조해야합니다. 프로세스는 비동기 적이므로 특별한 유효성 검사기가 필요합니다.</target>
        </trans-unit>
        <trans-unit id="32c127e56d91889f1c7cad6d0e80c60907253fef" translate="yes" xml:space="preserve">
          <source>To verify the build output, open &lt;code&gt;dist/my-app/index.html&lt;/code&gt;. Look for default text &lt;code&gt;app-shell works!&lt;/code&gt; to show that the app shell route was rendered as part of the output.</source>
          <target state="translated">빌드 출력을 확인하려면 &lt;code&gt;dist/my-app/index.html&lt;/code&gt; 을여십시오 . 기본 텍스트 &lt;code&gt;app-shell works!&lt;/code&gt; 찾으십시오 ! 앱 셸 경로가 출력의 일부로 렌더링되었음을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="64189167d7c6f7924c3403091e78e99cd1953102" translate="yes" xml:space="preserve">
          <source>To watch for changes on an &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; property, use &lt;code&gt;&lt;a href=&quot;../api/core/onchanges&quot;&gt;OnChanges&lt;/a&gt;&lt;/code&gt;, one of Angular's &lt;a href=&quot;lifecycle-hooks#onchanges&quot;&gt;lifecycle hooks&lt;/a&gt;. &lt;code&gt;&lt;a href=&quot;../api/core/onchanges&quot;&gt;OnChanges&lt;/a&gt;&lt;/code&gt; is specifically designed to work with properties that have the &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; decorator. See the &lt;a href=&quot;lifecycle-hooks#onchanges&quot;&gt;&lt;code&gt;OnChanges&lt;/code&gt;&lt;/a&gt; section of the &lt;a href=&quot;lifecycle-hooks&quot;&gt;Lifecycle Hooks&lt;/a&gt; guide for more details and examples.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; 속성의 변경 사항을 보려면 Angular의 &lt;a href=&quot;lifecycle-hooks#onchanges&quot;&gt;수명주기 후크&lt;/a&gt; 중 하나 인 &lt;code&gt;&lt;a href=&quot;../api/core/onchanges&quot;&gt;OnChanges&lt;/a&gt;&lt;/code&gt; 를 사용하십시오 . &lt;code&gt;&lt;a href=&quot;../api/core/onchanges&quot;&gt;OnChanges&lt;/a&gt;&lt;/code&gt; 는 특별히 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; &lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt; () 데코레이터 가있는 속성에서 작동하도록 설계되었습니다 . 자세한 내용과 예 는 &lt;a href=&quot;lifecycle-hooks&quot;&gt;Lifecycle Hooks&lt;/a&gt; 안내서 의 &lt;a href=&quot;lifecycle-hooks#onchanges&quot;&gt; &lt;code&gt;OnChanges&lt;/code&gt; &lt;/a&gt; 섹션을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="05a58fa2ca80d1b185bffa061088c51d5420c848" translate="yes" xml:space="preserve">
          <source>To write these kinds of test, you'll use additional features of the &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; as well as other testing helpers.</source>
          <target state="translated">이러한 종류의 테스트를 작성하려면 &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; 의 추가 기능 과 다른 테스트 도우미를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="1cc935e80e328e474a31d427ae2531c53add98a9" translate="yes" xml:space="preserve">
          <source>Together, a component and template define an Angular view.</source>
          <target state="translated">컴포넌트와 템플릿이 함께 각도보기를 정의합니다.</target>
        </trans-unit>
        <trans-unit id="87022fcea4706d527b367133425bf8fe125ff9af" translate="yes" xml:space="preserve">
          <source>Toggle two form regions (extra credit)</source>
          <target state="translated">두 양식 영역 전환 (추가 크레딧)</target>
        </trans-unit>
        <trans-unit id="5ba5c297a3177e98b75ef09b3c0904e236e367fe" translate="yes" xml:space="preserve">
          <source>Token that can be used to provide options for &lt;code&gt;&lt;a href=&quot;service-worker/serviceworkermodule&quot;&gt;ServiceWorkerModule&lt;/a&gt;&lt;/code&gt; outside of &lt;code&gt;&lt;a href=&quot;service-worker/serviceworkermodule#register&quot;&gt;ServiceWorkerModule.register()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">옵션 제공하는 데 사용할 수있는 토큰 &lt;code&gt;&lt;a href=&quot;service-worker/serviceworkermodule&quot;&gt;ServiceWorkerModule&lt;/a&gt;&lt;/code&gt; 의 외부 &lt;code&gt;&lt;a href=&quot;service-worker/serviceworkermodule#register&quot;&gt;ServiceWorkerModule.register()&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="31eb6ab3d3ba3ac918313692bbab97fbc9516ee1" translate="yes" xml:space="preserve">
          <source>Token that can be used to provide options for &lt;code&gt;&lt;a href=&quot;serviceworkermodule&quot;&gt;ServiceWorkerModule&lt;/a&gt;&lt;/code&gt; outside of &lt;code&gt;&lt;a href=&quot;serviceworkermodule#register&quot;&gt;ServiceWorkerModule.register()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">옵션 제공하는 데 사용할 수있는 토큰 &lt;code&gt;&lt;a href=&quot;serviceworkermodule&quot;&gt;ServiceWorkerModule&lt;/a&gt;&lt;/code&gt; 의 외부 &lt;code&gt;&lt;a href=&quot;serviceworkermodule#register&quot;&gt;ServiceWorkerModule.register()&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a829a6b9e3e265061c5310994b566e52ec5ed4d0" translate="yes" xml:space="preserve">
          <source>Token to provide CompilerOptions in the platform injector.</source>
          <target state="translated">플랫폼 인젝터에 컴파일러 옵션을 제공하기위한 토큰.</target>
        </trans-unit>
        <trans-unit id="1d10a851a2521fa1132fbcccf205872120c2acd7" translate="yes" xml:space="preserve">
          <source>Tokens &lt;a href=&quot;dependency-injection&quot;&gt;can have different types&lt;/a&gt;. They are often classes. They may also be strings.</source>
          <target state="translated">토큰 &lt;a href=&quot;dependency-injection&quot;&gt;은 다른 유형을 가질 수 있습니다&lt;/a&gt; . 그들은 종종 수업입니다. 문자열 일 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="19d57f29559f37ce632a300697209a7f397c855f" translate="yes" xml:space="preserve">
          <source>Tokens can be merged into a combined query selector string. For example:</source>
          <target state="translated">토큰은 결합 된 쿼리 선택기 문자열로 병합 될 수 있습니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="df45966d6a0d5c55c4c026a6b59b4d99477ebee0" translate="yes" xml:space="preserve">
          <source>Top component</source>
          <target state="translated">상단 구성 요소</target>
        </trans-unit>
        <trans-unit id="8dd425bec3818cb3cdcc48d42a8c69706bf636c4" translate="yes" xml:space="preserve">
          <source>Total number of bytes to upload or download. Depending on the request or response, this may not be computable and thus may not be present.</source>
          <target state="translated">업로드 또는 다운로드 할 총 바이트 수입니다. 요청 또는 응답에 따라 계산할 수 없으므로 존재하지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="253508f1cdb3b5a118c1f092109924e9f6cc5ecf" translate="yes" xml:space="preserve">
          <source>Tour of Heroes App and Tutorial</source>
          <target state="translated">영웅 투어 앱 및 튜토리얼</target>
        </trans-unit>
        <trans-unit id="940a504d78dc8eb71cdeb87d05acf21c2c8dddc2" translate="yes" xml:space="preserve">
          <source>Track and listen for changes to the form's data model.</source>
          <target state="translated">양식의 데이터 모델 변경 사항을 추적하고 청취하십시오.</target>
        </trans-unit>
        <trans-unit id="8fb0f6e53c00adefd00aea3fc755781253060a37" translate="yes" xml:space="preserve">
          <source>Track by identity as computed by the &lt;code&gt;&lt;a href=&quot;trackbyfunction&quot;&gt;TrackByFunction&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;trackbyfunction&quot;&gt;TrackByFunction&lt;/a&gt;&lt;/code&gt; 에 의해 계산 된 신원 별 추적 .</target>
        </trans-unit>
        <trans-unit id="2e20a272657096b0f12c4de4b5cd187088921815" translate="yes" xml:space="preserve">
          <source>Track control state and validity with &lt;code&gt;ngModel&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;ngModel&lt;/code&gt; 로 제어 상태 및 유효성 추적</target>
        </trans-unit>
        <trans-unit id="c1f1f73803fe36b0c16b9ccc852ad5cf4c245bed" translate="yes" xml:space="preserve">
          <source>Track state changes and the validity of form controls.</source>
          <target state="translated">상태 변경 및 양식 컨트롤의 유효성을 추적합니다.</target>
        </trans-unit>
        <trans-unit id="750eabe2d59ab51eb9806ca014b817ea6d03f06e" translate="yes" xml:space="preserve">
          <source>TrackByFunction</source>
          <target state="translated">TrackByFunction</target>
        </trans-unit>
        <trans-unit id="e8e06238766a8da29e9dc9f88eea2e8f0510ad6f" translate="yes" xml:space="preserve">
          <source>Tracking and controlling &lt;a href=&quot;https://developers.google.com/web/fundamentals/accessibility/focus/&quot;&gt;focus&lt;/a&gt; in a UI is an important consideration in designing for accessibility. When using Angular routing, you should decide where page focus goes upon navigation.</source>
          <target state="translated">UI에서 &lt;a href=&quot;https://developers.google.com/web/fundamentals/accessibility/focus/&quot;&gt;포커스&lt;/a&gt; 를 추적하고 제어 하는 것은 내게 필요한 옵션을 디자인 할 때 고려해야 할 중요한 사항입니다. 각도 라우팅을 사용하는 경우 탐색시 페이지 포커스가 이동하는 위치를 결정해야합니다.</target>
        </trans-unit>
        <trans-unit id="2bf54b9db29d88e96523bb27968cbe340de3297c" translate="yes" xml:space="preserve">
          <source>Tracks changes to the email attribute bound to this directive.</source>
          <target state="translated">이 지시문에 바인딩 된 전자 메일 속성의 변경 사항을 추적합니다.</target>
        </trans-unit>
        <trans-unit id="8fd392bb0e0e4c81e1b2544fdfe54ef3a072a778" translate="yes" xml:space="preserve">
          <source>Tracks changes to the pattern bound to this directive.</source>
          <target state="translated">이 지시문에 바인딩 된 패턴의 변경 사항을 추적합니다.</target>
        </trans-unit>
        <trans-unit id="d69d10dc65469d775e59042da88ca5d5529758ae" translate="yes" xml:space="preserve">
          <source>Tracks changes to the required attribute bound to this directive.</source>
          <target state="translated">이 지시문에 바인딩 된 필수 특성에 대한 변경 사항을 추적합니다.</target>
        </trans-unit>
        <trans-unit id="d8556ba32bce9b6e211ba689364183606036ec09" translate="yes" xml:space="preserve">
          <source>Tracks changes to the the maximum length bound to this directive.</source>
          <target state="translated">이 지시문에 바인딩 된 최대 길이에 대한 변경 사항을 추적합니다.</target>
        </trans-unit>
        <trans-unit id="94a80f0e6fddb9418827ab4bb176c0d8df0d6618" translate="yes" xml:space="preserve">
          <source>Tracks changes to the the minimum length bound to this directive.</source>
          <target state="translated">이 지시문에 바인딩 된 최소 길이에 대한 변경 사항을 추적합니다.</target>
        </trans-unit>
        <trans-unit id="196941bc4879e6f47b65e211a399eab8a6f6151b" translate="yes" xml:space="preserve">
          <source>Tracks options for the &lt;code&gt;&lt;a href=&quot;ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; instance.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; 인스턴스의 옵션을 추적 합니다.</target>
        </trans-unit>
        <trans-unit id="ab3dbc710cc5293470f8eccfb6d9f6e87414e9b0" translate="yes" xml:space="preserve">
          <source>Tracks simple string values bound to the option element. For objects, use the &lt;code&gt;ngValue&lt;/code&gt; input binding.</source>
          <target state="translated">옵션 요소에 바인딩 된 간단한 문자열 값을 추적합니다. 객체의 경우 &lt;code&gt;ngValue&lt;/code&gt; 입력 바인딩을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="8e0382103af4eac9cadd4b2247861b1d78b40172" translate="yes" xml:space="preserve">
          <source>Tracks the &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; instance bound to the directive.</source>
          <target state="translated">지시문에 바인딩 된 &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 인스턴스를 추적합니다 .</target>
        </trans-unit>
        <trans-unit id="e47245e960a6f3e488ea514c18870fe786d9b704" translate="yes" xml:space="preserve">
          <source>Tracks the &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; bound to this directive.</source>
          <target state="translated">이 지시문에 바인딩 된 &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 을 추적합니다 .</target>
        </trans-unit>
        <trans-unit id="22f15c49bdce4bf9eed08a825998088b3e2b947f" translate="yes" xml:space="preserve">
          <source>Tracks the configuration options for this &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; instance.</source>
          <target state="translated">이 &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; 인스턴스 의 구성 옵션을 추적합니다 .</target>
        </trans-unit>
        <trans-unit id="625b260ece4880729473d6e613cdc9200774f31d" translate="yes" xml:space="preserve">
          <source>Tracks the list of added &lt;code&gt;&lt;a href=&quot;formcontrolname&quot;&gt;FormControlName&lt;/a&gt;&lt;/code&gt; instances</source>
          <target state="translated">추가 된 &lt;code&gt;&lt;a href=&quot;formcontrolname&quot;&gt;FormControlName&lt;/a&gt;&lt;/code&gt; 인스턴스 목록을 추적합니다.</target>
        </trans-unit>
        <trans-unit id="89defebffe912c5087e896997a7d9b201c73c793" translate="yes" xml:space="preserve">
          <source>Tracks the name bound to the directive. The parent form uses this name as a key to retrieve this control's value.</source>
          <target state="translated">지시문에 바인딩 된 이름을 추적합니다. 부모 폼은이 이름을 키로 사용하여이 컨트롤의 값을 검색합니다.</target>
        </trans-unit>
        <trans-unit id="aee499214828a5c060da6e529f71f860679051fe" translate="yes" xml:space="preserve">
          <source>Tracks the name of the &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; bound to the directive. The name corresponds to a key in the parent &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">지시문에 바인딩 된 &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; 의 이름을 추적합니다 . 이름은 부모 &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; 의 키에 해당합니다 .</target>
        </trans-unit>
        <trans-unit id="aad0ec9ce7f409bb75dafe01a113a9f157129e45" translate="yes" xml:space="preserve">
          <source>Tracks the name of the &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; bound to the directive. The name corresponds to a key in the parent &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">지시문에 바인딩 된 &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 의 이름을 추적합니다 . 이름은 부모 &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; 의 키에 해당합니다 .</target>
        </trans-unit>
        <trans-unit id="5250e4f20d726ba69a0ff3fea3984936608f75ae" translate="yes" xml:space="preserve">
          <source>Tracks the name of the &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; bound to the directive. The name corresponds to a key in the parent &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">지시문에 바인딩 된 &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 의 이름을 추적합니다 . 이름은 부모 &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; 의 키에 해당합니다 .</target>
        </trans-unit>
        <trans-unit id="3587ba9a726a4c83a603322c3d244042c4a5440b" translate="yes" xml:space="preserve">
          <source>Tracks the name of the &lt;code&gt;&lt;a href=&quot;ngmodelgroup&quot;&gt;NgModelGroup&lt;/a&gt;&lt;/code&gt; bound to the directive. The name corresponds to a key in the parent &lt;code&gt;&lt;a href=&quot;ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">지시문에 바인딩 된 &lt;code&gt;&lt;a href=&quot;ngmodelgroup&quot;&gt;NgModelGroup&lt;/a&gt;&lt;/code&gt; 의 이름을 추적합니다 . 이름은 부모 &lt;code&gt;&lt;a href=&quot;ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; 의 키에 해당합니다 .</target>
        </trans-unit>
        <trans-unit id="94ef4bb133d8371862e04cdbe35ea80d627658aa" translate="yes" xml:space="preserve">
          <source>Tracks the name of the radio input element.</source>
          <target state="translated">라디오 입력 요소의 이름을 추적합니다.</target>
        </trans-unit>
        <trans-unit id="847fd12a5e443af80b1d628517f650d4b16809c3" translate="yes" xml:space="preserve">
          <source>Tracks the option comparison algorithm for tracking identities when checking for changes.</source>
          <target state="translated">변경 사항을 확인할 때 ID를 추적하기위한 옵션 비교 알고리즘을 추적합니다.</target>
        </trans-unit>
        <trans-unit id="4181514cf443c8d2ed062575db037633d03567f5" translate="yes" xml:space="preserve">
          <source>Tracks the value and validation status of an individual form control.</source>
          <target state="translated">개별 양식 컨트롤의 값 및 유효성 검사 상태를 추적합니다.</target>
        </trans-unit>
        <trans-unit id="e95029f5c1b54e6951ef7d1dc1f48671ee8c5122" translate="yes" xml:space="preserve">
          <source>Tracks the value and validity state of a group of &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; instances.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 인스턴스 그룹의 값 및 유효성 상태를 추적합니다 .</target>
        </trans-unit>
        <trans-unit id="6081501877b5287d24fab2c51a89d5bc830a5e25" translate="yes" xml:space="preserve">
          <source>Tracks the value and validity state of a group of &lt;code&gt;&lt;a href=&quot;forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; instances.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 인스턴스 그룹의 값 및 유효성 상태를 추적합니다 .</target>
        </trans-unit>
        <trans-unit id="145bfac45bf7e6224142dc5429a521af2cf548c9" translate="yes" xml:space="preserve">
          <source>Tracks the value and validity state of an array of &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; instances.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; 인스턴스 배열의 값 및 유효성 상태를 추적 합니다.</target>
        </trans-unit>
        <trans-unit id="571f063bb31197967a229f7c4374acb092869635" translate="yes" xml:space="preserve">
          <source>Tracks the value and validity state of an array of &lt;code&gt;&lt;a href=&quot;forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;forms/formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; instances.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;forms/formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; 인스턴스 배열의 값 및 유효성 상태를 추적 합니다.</target>
        </trans-unit>
        <trans-unit id="a2626e67aec561be0def79f87c598efe295b2e85" translate="yes" xml:space="preserve">
          <source>Tracks the value bound to the option element. Unlike the value binding, ngValue supports binding to objects.</source>
          <target state="translated">옵션 요소에 바인딩 된 값을 추적합니다. 값 바인딩과 달리 ngValue는 객체에 대한 바인딩을 지원합니다.</target>
        </trans-unit>
        <trans-unit id="3ee63c63d361eb3aa2b0a3c1f8a3353d2f4dccf1" translate="yes" xml:space="preserve">
          <source>Tracks the value bound to this directive.</source>
          <target state="translated">이 지시문에 바인딩 된 값을 추적합니다.</target>
        </trans-unit>
        <trans-unit id="283ea7e4ca07fa5714eec7b7e0bd1c17f20bc544" translate="yes" xml:space="preserve">
          <source>Tracks the value of the radio input element</source>
          <target state="translated">라디오 입력 요소의 값을 추적</target>
        </trans-unit>
        <trans-unit id="705f5065f56c892bc977873651559fe5515ab8a6" translate="yes" xml:space="preserve">
          <source>Tracks whether the control is disabled.</source>
          <target state="translated">컨트롤 비활성화 여부를 추적합니다.</target>
        </trans-unit>
        <trans-unit id="9e4fec6404eb80383e9e6d6b5b94d18a5fdece28" translate="yes" xml:space="preserve">
          <source>Transcluding Angular Content into AngularJS Component Directives</source>
          <target state="translated">Angular 컨텐츠를 AngularJS 컴포넌트 지시문으로 변환</target>
        </trans-unit>
        <trans-unit id="b8bc0089d8b086cb38dab65911aa8acd5d70fbb7" translate="yes" xml:space="preserve">
          <source>Transclusion: yes</source>
          <target state="translated">번역 : 예</target>
        </trans-unit>
        <trans-unit id="f29368cc7ff3b4ade7bfa044be1921ff64aa770b" translate="yes" xml:space="preserve">
          <source>TransferState</source>
          <target state="translated">TransferState</target>
        </trans-unit>
        <trans-unit id="dea51bb13a4467c505ee6181171375f497334d54" translate="yes" xml:space="preserve">
          <source>Transform</source>
          <target state="translated">Transform</target>
        </trans-unit>
        <trans-unit id="812518bba5c699b0027b6b3a480acfb0ebc647bd" translate="yes" xml:space="preserve">
          <source>Transform the free-form body into a serialized format suitable for transmission to the server.</source>
          <target state="translated">자유 형식 본문을 서버로 전송하기에 적합한 직렬화 된 형식으로 변환하십시오.</target>
        </trans-unit>
        <trans-unit id="dc1c231275a16e11dae243561efa84b2936b1b19" translate="yes" xml:space="preserve">
          <source>Transformation</source>
          <target state="translated">Transformation</target>
        </trans-unit>
        <trans-unit id="173612f0833f1106fbc8f8dd6cfe45177a22f0f4" translate="yes" xml:space="preserve">
          <source>Transforming a component to a custom element makes all of the required Angular infrastructure available to the browser. Creating a custom element is simple and straightforward, and automatically connects your component-defined view with change detection and data binding, mapping Angular functionality to the corresponding native HTML equivalents.</source>
          <target state="translated">컴포넌트를 사용자 정의 요소로 변환하면 필요한 모든 Angular 인프라를 브라우저에서 사용할 수 있습니다. 사용자 정의 요소를 작성하는 것은 간단하고 간단하며 변경 감지 및 데이터 바인딩을 통해 컴포넌트 정의보기를 자동으로 연결하여 Angular 기능을 해당하는 기본 HTML에 맵핑합니다.</target>
        </trans-unit>
        <trans-unit id="76dc9f83782c6293c8d8c6eca91efe25b1d4f5a7" translate="yes" xml:space="preserve">
          <source>Transforming a component to a custom element provides an easy path to creating dynamic HTML content in your Angular app. HTML content that you add directly to the DOM in an Angular app is normally displayed without Angular processing, unless you define a &lt;em&gt;dynamic component&lt;/em&gt;, adding your own code to connect the HTML tag to your app data, and participate in change detection. With a custom element, all of that wiring is taken care of automatically.</source>
          <target state="translated">구성 요소를 사용자 지정 요소로 변환하면 Angular 앱에서 동적 HTML 콘텐츠를 쉽게 만들 수 있습니다. &lt;em&gt;동적 구성 요소&lt;/em&gt; 를 정의하지 않는 한 Angular 앱에서 DOM에 직접 추가하는 HTML 컨텐츠는 일반적으로 Angular 처리없이 표시됩니다.&lt;em&gt;&lt;/em&gt; 하고 HTML 태그를 앱 데이터에 연결하기위한 고유 코드를 추가하고 변경 감지에 참여 . 사용자 정의 요소를 사용하면 모든 배선이 자동으로 처리됩니다.</target>
        </trans-unit>
        <trans-unit id="428b2ec1d548861040d138b663bdf7c61a4509ea" translate="yes" xml:space="preserve">
          <source>Transforming components to custom elements</source>
          <target state="translated">컴포넌트를 사용자 정의 요소로 변환</target>
        </trans-unit>
        <trans-unit id="52c81ceec8de22f6a2b99230305438e29dcc24a6" translate="yes" xml:space="preserve">
          <source>Transforms Object or Map into an array of key value pairs.</source>
          <target state="translated">Object 또는 Map을 키 값 쌍의 배열로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="3a83fe4e975ea243d0d4caabdbff2dd2ca6b63d4" translate="yes" xml:space="preserve">
          <source>Transforms a number into a string, formatted according to locale rules that determine group sizing and separator, decimal-point character, and other locale-specific configurations.</source>
          <target state="translated">그룹 크기 및 구분 기호, 소수점 문자 및 기타 로캘 별 구성을 결정하는 로캘 규칙에 따라 서식이 지정된 숫자를 문자열로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="afee2a38410ecd1b168f5e62c7af603ea93414fc" translate="yes" xml:space="preserve">
          <source>Transforms a number to a currency string, formatted according to locale rules that determine group sizing and separator, decimal-point character, and other locale-specific configurations.</source>
          <target state="translated">그룹 크기 및 구분 기호, 소수점 문자 및 기타 로캘 별 구성을 결정하는 로캘 규칙에 따라 서식이 지정된 숫자를 통화 문자열로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="ba444aa93f3d7c55a8743abcd65343bee076a245" translate="yes" xml:space="preserve">
          <source>Transforms a number to a percentage string, formatted according to locale rules that determine group sizing and separator, decimal-point character, and other locale-specific configurations.</source>
          <target state="translated">그룹 크기 및 구분 기호, 소수점 문자 및 기타 로캘 별 구성을 결정하는 로캘 규칙에 따라 서식이 지정된 숫자 문자열을 백분율 문자열로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="b212033572f2c487923ac10525b776d1494e7327" translate="yes" xml:space="preserve">
          <source>Transforms an &lt;code&gt;&lt;a href=&quot;http/httprequest&quot;&gt;HttpRequest&lt;/a&gt;&lt;/code&gt; into a stream of &lt;code&gt;&lt;a href=&quot;http/httpevent&quot;&gt;HttpEvent&lt;/a&gt;&lt;/code&gt;s, one of which will likely be a &lt;code&gt;&lt;a href=&quot;http/httpresponse&quot;&gt;HttpResponse&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;http/httprequest&quot;&gt;HttpRequest&lt;/a&gt;&lt;/code&gt; 를 &lt;code&gt;&lt;a href=&quot;http/httpevent&quot;&gt;HttpEvent&lt;/a&gt;&lt;/code&gt; 스트림으로 변환합니다 .이 중 하나는 &lt;code&gt;&lt;a href=&quot;http/httpresponse&quot;&gt;HttpResponse&lt;/a&gt;&lt;/code&gt; 일 것입니다. 입니다.</target>
        </trans-unit>
        <trans-unit id="abab076aca3610a4dff43371a91f5154ef3df183" translate="yes" xml:space="preserve">
          <source>Transforms an &lt;code&gt;&lt;a href=&quot;httprequest&quot;&gt;HttpRequest&lt;/a&gt;&lt;/code&gt; into a stream of &lt;code&gt;&lt;a href=&quot;httpevent&quot;&gt;HttpEvent&lt;/a&gt;&lt;/code&gt;s, one of which will likely be a &lt;code&gt;&lt;a href=&quot;httpresponse&quot;&gt;HttpResponse&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;httprequest&quot;&gt;HttpRequest&lt;/a&gt;&lt;/code&gt; 를 &lt;code&gt;&lt;a href=&quot;httpevent&quot;&gt;HttpEvent&lt;/a&gt;&lt;/code&gt; 스트림으로 변환합니다 .이 중 하나는 &lt;code&gt;&lt;a href=&quot;httpresponse&quot;&gt;HttpResponse&lt;/a&gt;&lt;/code&gt; 일 것입니다. 입니다.</target>
        </trans-unit>
        <trans-unit id="c23fe29041b0f266f33891ae1c767b0508402f9a" translate="yes" xml:space="preserve">
          <source>Transforms text to all lower case.</source>
          <target state="translated">텍스트를 모두 소문자로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="0e392a9c956f15e36c2ae33d345783ffbc7a81c9" translate="yes" xml:space="preserve">
          <source>Transforms text to all upper case.</source>
          <target state="translated">텍스트를 모두 대문자로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="40a88712d9f4b6d6903665d4b10961274eca90e4" translate="yes" xml:space="preserve">
          <source>Transforms text to title case. Capitalizes the first letter of each word, and transforms the rest of the word to lower case. Words are delimited by any whitespace character, such as a space, tab, or line-feed character.</source>
          <target state="translated">텍스트를 제목 대소 문자로 변환합니다. 각 단어의 첫 글자를 대문자로 바꾸고 나머지 단어는 소문자로 변환합니다. 단어는 공백, 탭 또는 줄 바꿈 문자와 같은 공백 문자로 구분됩니다.</target>
        </trans-unit>
        <trans-unit id="8c6c4775aedd63bf234a390e5f164114cd3a3da9" translate="yes" xml:space="preserve">
          <source>Transforms the current value of expression &lt;code&gt;cardNumber&lt;/code&gt; via the pipe called &lt;code&gt;myCardNumberFormatter&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;myCardNumberFormatter&lt;/code&gt; 라는 파이프를 통해 expression &lt;code&gt;cardNumber&lt;/code&gt; 표현식의 현재 값을 변환합니다 .</target>
        </trans-unit>
        <trans-unit id="acb4047f26fa458f6ca21611c9b86f2ba97bab12" translate="yes" xml:space="preserve">
          <source>Transition and triggers</source>
          <target state="translated">전환 및 트리거</target>
        </trans-unit>
        <trans-unit id="fd3159002733ca58d01f18f3ef225b0a35103de7" translate="yes" xml:space="preserve">
          <source>Transitions and timing</source>
          <target state="translated">전환 및 타이밍</target>
        </trans-unit>
        <trans-unit id="f89031b2b65e1a903ff7d0356c56106e1092f7d4" translate="yes" xml:space="preserve">
          <source>Transitions are matched in the order in which they are defined. Thus, you can apply other transitions on top of the &lt;code&gt;* =&amp;gt; *&lt;/code&gt; (any-to-any) transition. For example, define style changes or animations that would apply just to &lt;code&gt;open =&amp;gt; closed&lt;/code&gt;, or just to &lt;code&gt;closed =&amp;gt; open&lt;/code&gt;, and then use &lt;code&gt;* =&amp;gt; *&lt;/code&gt; as a fallback for state pairings that aren't otherwise called out.</source>
          <target state="translated">전환은 정의 된 순서대로 일치합니다. 따라서 &lt;code&gt;* =&amp;gt; *&lt;/code&gt; (any-to-any) 전환 위에 다른 전환을 적용 할 수 있습니다 . 예를 들어, &lt;code&gt;open =&amp;gt; closed&lt;/code&gt; 또는 &lt;code&gt;closed =&amp;gt; open&lt;/code&gt; 에만 적용되는 스타일 변경 또는 애니메이션을 정의한 다음 &lt;code&gt;* =&amp;gt; *&lt;/code&gt; 를 달리 호출되지 않은 상태 쌍의 대체로 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="7ff0a6e47fefa7e662116ee0dd231cdcc6a56382" translate="yes" xml:space="preserve">
          <source>Translate &lt;code&gt;plural&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;plural&lt;/code&gt; 번역</target>
        </trans-unit>
        <trans-unit id="f28407638edfdbe51d332499328f0747faddfb77" translate="yes" xml:space="preserve">
          <source>Translate &lt;code&gt;select&lt;/code&gt;</source>
          <target state="translated">번역 &lt;code&gt;select&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a9957e9ff8b20a6e29b6eb99cd6e9ed298461187" translate="yes" xml:space="preserve">
          <source>Translate a nested expression</source>
          <target state="translated">중첩 표현식 번역</target>
        </trans-unit>
        <trans-unit id="f8fd85ad8899ddbec87ff78411cd4b09cf77deb3" translate="yes" xml:space="preserve">
          <source>Translate attributes</source>
          <target state="translated">속성 번역</target>
        </trans-unit>
        <trans-unit id="5bd3d2d2e5c2b013f5f2ac3e26d961037f15cca1" translate="yes" xml:space="preserve">
          <source>Translate text nodes</source>
          <target state="translated">텍스트 노드 번역</target>
        </trans-unit>
        <trans-unit id="c13a3e77e07e4d808e0f50d46cf7d8fba6e47542" translate="yes" xml:space="preserve">
          <source>Translate text without creating an element</source>
          <target state="translated">요소를 만들지 않고 텍스트 번역</target>
        </trans-unit>
        <trans-unit id="9ca6a08c5891b63e799acee720895ad663f388d5" translate="yes" xml:space="preserve">
          <source>Translate the other text nodes the same way:</source>
          <target state="translated">다른 텍스트 노드를 같은 방식으로 번역하십시오.</target>
        </trans-unit>
        <trans-unit id="ac3f7cdd6fb7bb10f67a29857be4bed2e5e05bcb" translate="yes" xml:space="preserve">
          <source>Translate the source text</source>
          <target state="translated">소스 텍스트 번역</target>
        </trans-unit>
        <trans-unit id="624f545665467d793ca13a411258c70e6ac2ee86" translate="yes" xml:space="preserve">
          <source>Translating plural and select expressions</source>
          <target state="translated">복수 및 선택 표현식 번역</target>
        </trans-unit>
        <trans-unit id="ac26a7a94ea2e66490f932b6415a09ef6f2a913c" translate="yes" xml:space="preserve">
          <source>Translation</source>
          <target state="translated">Translation</target>
        </trans-unit>
        <trans-unit id="36e89f13f90ac0d31f2033903bc7999d29a243ad" translate="yes" xml:space="preserve">
          <source>TranslationWidth</source>
          <target state="translated">TranslationWidth</target>
        </trans-unit>
        <trans-unit id="3c93b9e5330687363111dd7a6e0ebef29ee56f02" translate="yes" xml:space="preserve">
          <source>Transmitting data between components</source>
          <target state="translated">컴포넌트 간 데이터 전송</target>
        </trans-unit>
        <trans-unit id="6e1d794deefaa6f98622f1040f05a7ea650ea223" translate="yes" xml:space="preserve">
          <source>Tree shaking refers to a compiler option that removes code from the final bundle if the app doesn't reference that code. When providers are tree-shakable, the Angular compiler removes the associated services from the final output when it determines that your application doesn't use those services. This significantly reduces the size of your bundles.</source>
          <target state="translated">트리 흔들림은 앱이 해당 코드를 참조하지 않는 경우 최종 번들에서 코드를 제거하는 컴파일러 옵션을 나타냅니다. 공급자가 트리를 검색 할 수있는 경우 Angular 컴파일러는 응용 프로그램에서 해당 서비스를 사용하지 않는 것으로 판단되면 최종 출력에서 ​​관련 서비스를 제거합니다. 이렇게하면 번들 크기가 크게 줄어 듭니다.</target>
        </trans-unit>
        <trans-unit id="158297e3d668ae1a961f319687ea97bab89382f7" translate="yes" xml:space="preserve">
          <source>Tree-shakable InjectionToken</source>
          <target state="translated">나무를 흔드는 주사 토큰</target>
        </trans-unit>
        <trans-unit id="e9fcab1031cb2e23a1fe8832649e9c5a53141e58" translate="yes" xml:space="preserve">
          <source>Tree-shakable providers</source>
          <target state="translated">나무를 흔드는 제공자</target>
        </trans-unit>
        <trans-unit id="434f076d20f1b3b8a33e9ed50bbcb217521d722b" translate="yes" xml:space="preserve">
          <source>Tree-shaking and &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt;</source>
          <target state="translated">트리 쉐이킹 및 &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f05b6a96acbdcfadc896179dc913a13d818f2f99" translate="yes" xml:space="preserve">
          <source>Tree-shaking doesn't work here because Angular can't decide to exclude one chunk of code (the provider definition for the service within the module factory) based on whether another chunk of code (the service class) is used. To make services tree-shakable, the information about how to construct an instance of the service (the provider definition) needs to be a part of the service class itself.</source>
          <target state="translated">Angular는 다른 코드 청크 (서비스 클래스)의 사용 여부에 따라 코드 청크 (모듈 팩토리 내 서비스 제공자 정의)를 제외하기로 결정할 수 없으므로 트리 쉐이킹이 작동하지 않습니다. 서비스를 트리에 저장 가능하게 만들려면 서비스 인스턴스 (제공자 정의)를 구성하는 방법에 대한 정보가 서비스 클래스 자체의 일부 여야합니다.</target>
        </trans-unit>
        <trans-unit id="b998b898aa55ff4a0b42570f2ce7f5d95a803024" translate="yes" xml:space="preserve">
          <source>Tree-shaking is especially useful for a library because the application which uses the library may not have a need to inject it. Read more about &lt;a href=&quot;dependency-injection-providers#tree-shakable-providers&quot;&gt;tree-shakable providers&lt;/a&gt; in &lt;a href=&quot;dependency-injection-providers&quot;&gt;DI Providers&lt;/a&gt;.</source>
          <target state="translated">라이브러리를 사용하는 응용 프로그램은 라이브러리를 주입 할 필요가 없으므로 트리 셰이 킹은 라이브러리에 특히 유용합니다. &lt;a href=&quot;dependency-injection-providers&quot;&gt;DI 제공자&lt;/a&gt; 에서 &lt;a href=&quot;dependency-injection-providers#tree-shakable-providers&quot;&gt;트리 교환 가능 제공자&lt;/a&gt; 에 대해 자세히 알아보십시오 .</target>
        </trans-unit>
        <trans-unit id="1e7081d736f43ad30574ac906d26acdd03c38ed9" translate="yes" xml:space="preserve">
          <source>Trees</source>
          <target state="translated">Trees</target>
        </trans-unit>
        <trans-unit id="6c9d923a2bdc1cbd32c38da5c221d86fa7a8a6ed" translate="yes" xml:space="preserve">
          <source>Trees can represent hierarchical data.</source>
          <target state="translated">트리는 계층 적 데이터를 나타낼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="de3b30d295ded9bca000cfefdd9403aa187ece06" translate="yes" xml:space="preserve">
          <source>Trigger a change detection cycle for the component.</source>
          <target state="translated">구성 요소의 변경 감지주기를 트리거하십시오.</target>
        </trans-unit>
        <trans-unit id="9407e89d96626ed5d353629e3f6d9a9d64468166" translate="yes" xml:space="preserve">
          <source>Trigger component destruction.</source>
          <target state="translated">구성 요소 삭제를 트리거합니다.</target>
        </trans-unit>
        <trans-unit id="53af3485dc7b16524b04a2e63069b00e185de29e" translate="yes" xml:space="preserve">
          <source>Triggering the animation</source>
          <target state="translated">애니메이션 트리거</target>
        </trans-unit>
        <trans-unit id="e870e5d23b1facd0b564612cfd9fdd42eb18bc87" translate="yes" xml:space="preserve">
          <source>Triggers a change event by emitting on the &lt;code&gt;&lt;a href=&quot;querylist#changes&quot;&gt;changes&lt;/a&gt;&lt;/code&gt;&lt;a href=&quot;eventemitter&quot;&gt;&lt;code&gt;EventEmitter&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;querylist#changes&quot;&gt;changes&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;eventemitter&quot;&gt; &lt;code&gt;EventEmitter&lt;/code&gt; 를 생성&lt;/a&gt; 하여 변경 이벤트를 트리거합니다 .</target>
        </trans-unit>
        <trans-unit id="0ae4d5b42be1c56e1a7225f517e99f471b359dc4" translate="yes" xml:space="preserve">
          <source>Triggers a warning that this input should not be used with reactive forms.</source>
          <target state="translated">이 입력을 반응성 양식과 함께 사용해서는 안된다는 경고를 트리거합니다.</target>
        </trans-unit>
        <trans-unit id="5083756d2f83ef32092480b31b3cecd6c6cec6c9" translate="yes" xml:space="preserve">
          <source>Triggers the event by its name if there is a corresponding listener in the element's &lt;code&gt;&lt;a href=&quot;../api/core/debugnode#listeners&quot;&gt;listeners&lt;/a&gt;&lt;/code&gt; collection. The second parameter is the &lt;em&gt;event object&lt;/em&gt; expected by the handler. See &lt;a href=&quot;testing#trigger-event-handler&quot;&gt;above&lt;/a&gt;.</source>
          <target state="translated">요소의 &lt;code&gt;&lt;a href=&quot;../api/core/debugnode#listeners&quot;&gt;listeners&lt;/a&gt;&lt;/code&gt; 콜렉션 에 해당 리스너가있는 경우 이름으로 이벤트를 트리거합니다 . 두 번째 매개 변수는 핸들러가 예상 하는 &lt;em&gt;이벤트 오브젝트&lt;/em&gt; 입니다. &lt;a href=&quot;testing#trigger-event-handler&quot;&gt;위를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="a10c269fb7def350ff63b23aa2d28b00775e9f1c" translate="yes" xml:space="preserve">
          <source>Trim the value (remove whitespace) and make sure it&amp;rsquo;s a minimum length.</source>
          <target state="translated">값을 자르고 (공백 제거) 최소 길이인지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="3cc21cf3f8e5867393f5bad054b9c40301206223" translate="yes" xml:space="preserve">
          <source>Trims all whitespaces at the beginning and the end of a template.</source>
          <target state="translated">템플릿의 시작과 끝에서 모든 공백을 자릅니다.</target>
        </trans-unit>
        <trans-unit id="f43741667aa518662d503fc2ce7e1d14354c3bec" translate="yes" xml:space="preserve">
          <source>True if at least one navigation event has occurred, false otherwise.</source>
          <target state="translated">하나 이상의 탐색 이벤트가 발생하면 true이고, 그렇지 않으면 false입니다.</target>
        </trans-unit>
        <trans-unit id="9d796fe59ff2474ea78a1c50451058993aa79f3b" translate="yes" xml:space="preserve">
          <source>True if the Service Worker is enabled (supported by the browser and enabled via &lt;code&gt;&lt;a href=&quot;serviceworkermodule&quot;&gt;ServiceWorkerModule&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">서비스 워커가 활성화되어 있으면 (브라우저에서 지원하고 &lt;code&gt;&lt;a href=&quot;serviceworkermodule&quot;&gt;ServiceWorkerModule&lt;/a&gt;&lt;/code&gt; 을 통해 활성화 된 경우) true 입니다.</target>
        </trans-unit>
        <trans-unit id="5f972cc15ad49cf4f212b677b7dc7d8b9251db55" translate="yes" xml:space="preserve">
          <source>True if the control has not been marked as touched</source>
          <target state="translated">컨트롤이 터치 된 것으로 표시되지 않은 경우 참</target>
        </trans-unit>
        <trans-unit id="dcc1b1c1aa85f2da9a269e743dc502fd0749e99e" translate="yes" xml:space="preserve">
          <source>True if the control is marked as &lt;code&gt;touched&lt;/code&gt;.</source>
          <target state="translated">컨트롤이 &lt;code&gt;touched&lt;/code&gt; 것으로 표시되면 true 입니다.</target>
        </trans-unit>
        <trans-unit id="60e52a2ca105703a08ce2fd47ddd086d17018855" translate="yes" xml:space="preserve">
          <source>True if this query is optional, false if it is required. Default is false. A required query throws an error if no elements are retrieved when the query is executed. An optional query does not.</source>
          <target state="translated">이 쿼리가 선택적인 경우 True이고, 필요한 경우 false입니다. 기본값은 false입니다. 쿼리가 실행될 때 요소가 검색되지 않으면 필요한 쿼리에서 오류가 발생합니다. 선택적 쿼리는 그렇지 않습니다.</target>
        </trans-unit>
        <trans-unit id="06b3634a6e2a35bbc0dd073c9b175791f2522293" translate="yes" xml:space="preserve">
          <source>True to include an anchor fragment in the path.</source>
          <target state="translated">경로에 앵커 조각을 포함하려면 true입니다.</target>
        </trans-unit>
        <trans-unit id="1ab65405badb72e5749b47e365af2b6aaf2cb192" translate="yes" xml:space="preserve">
          <source>True to preserve or false to remove potentially superfluous whitespace characters from the compiled template. Whitespace characters are those matching the &lt;code&gt;\s&lt;/code&gt; character class in JavaScript regular expressions. Default is false, unless overridden in compiler options.</source>
          <target state="translated">컴파일 된 템플릿에서 불필요한 공백 문자를 제거하려면 유지하거나 false로 설정하십시오. 공백 문자는 JavaScript 정규식에서 &lt;code&gt;\s&lt;/code&gt; 문자 클래스와 일치하는 문자입니다. 컴파일러 옵션에서 재정의하지 않는 한 기본값은 false입니다.</target>
        </trans-unit>
        <trans-unit id="c19e0cdc9c33c77f5adf440dc15998ff2a61e211" translate="yes" xml:space="preserve">
          <source>Trusting safe values</source>
          <target state="translated">안전한 가치 신뢰</target>
        </trans-unit>
        <trans-unit id="beb70957ec5482b78d59548c5c70483736e2c218" translate="yes" xml:space="preserve">
          <source>Try editing any of the project files. Save and refresh the browser to see the changes.</source>
          <target state="translated">프로젝트 파일을 편집하십시오. 변경 사항을 보려면 브라우저를 저장하고 새로 고치십시오.</target>
        </trans-unit>
        <trans-unit id="7ddd66b689c9370a62daee26be57fd02d84a295b" translate="yes" xml:space="preserve">
          <source>Try it</source>
          <target state="translated">시도 해봐</target>
        </trans-unit>
        <trans-unit id="62e11793c0386a1bddb0a86fda7f464e7c562e11" translate="yes" xml:space="preserve">
          <source>Try it by adding the following directive binding variations to the &lt;code&gt;AppComponent&lt;/code&gt; template:</source>
          <target state="translated">다음 지시문 바인딩 변형을 &lt;code&gt;AppComponent&lt;/code&gt; 템플리트 에 추가하여 시도하십시오 .</target>
        </trans-unit>
        <trans-unit id="da8a7f15b67a49c642972b20522557722114e5ed" translate="yes" xml:space="preserve">
          <source>Try it by clicking on this live example link.</source>
          <target state="translated">이 라이브 예제 링크를 클릭하여 사용해보십시오.</target>
        </trans-unit>
        <trans-unit id="55391745de289ddef8d65ec34b574ce002c5003d" translate="yes" xml:space="preserve">
          <source>Try it out. Because the array has four items, the message should appear. Go back into &lt;code&gt;app.component.ts&lt;/code&gt; and delete or comment out one of the elements from the heroes array. The browser should refresh automatically and the message should disappear.</source>
          <target state="translated">사용해보십시오. 배열에는 4 개의 항목이 있으므로 메시지가 나타납니다. &lt;code&gt;app.component.ts&lt;/code&gt; 로 돌아가서 heroes 배열에서 요소 중 하나를 삭제하거나 주석 처리하십시오. 브라우저가 자동으로 새로 고쳐지고 메시지가 사라집니다.</target>
        </trans-unit>
        <trans-unit id="8d0b56cf0fa53f627bd12835d235587765053dc2" translate="yes" xml:space="preserve">
          <source>Try one of the &quot;3G&quot; speeds.</source>
          <target state="translated">&quot;3G&quot;속도 중 하나를 시도하십시오.</target>
        </trans-unit>
        <trans-unit id="dc1ea3e260d075f0697ffb4ad683deb138ba7e53" translate="yes" xml:space="preserve">
          <source>Try setting it to &lt;code&gt;'prefix'&lt;/code&gt; then click the &lt;code&gt;Go to sidekicks&lt;/code&gt; button. Remember that's a bad URL and you should see the &quot;Page not found&quot; page. Instead, you're still on the &quot;Heroes&quot; page. Enter a bad URL in the browser address bar. You're instantly re-routed to &lt;code&gt;/heroes&lt;/code&gt;. &lt;em&gt;Every&lt;/em&gt; URL, good or bad, that falls through to &lt;em&gt;this&lt;/em&gt; route definition will be a match.</source>
          <target state="translated">&lt;code&gt;'prefix'&lt;/code&gt; 로 설정 한 다음 &lt;code&gt;Go to sidekicks&lt;/code&gt; 버튼 을 클릭하십시오 . URL이 잘못되어 &quot;페이지를 찾을 수 없음&quot;페이지가 표시되어야합니다. 대신, 여전히 &quot;영웅&quot;페이지에 있습니다. 브라우저 주소 표시 줄에 잘못된 URL을 입력하십시오. &lt;code&gt;/heroes&lt;/code&gt; 로 즉시 다시 라우팅됩니다. . &lt;em&gt;이&lt;/em&gt; 경로 정의에 해당하는 &lt;em&gt;모든&lt;/em&gt; URL (좋거나 나쁨) &lt;em&gt;이&lt;/em&gt; 일치합니다.</target>
        </trans-unit>
        <trans-unit id="ae0be3b047c4a387d93f02977418e5b637e0c752" translate="yes" xml:space="preserve">
          <source>Try the &quot;Notify Me&quot; button:</source>
          <target state="translated">&quot;알림&quot;버튼을 사용해보십시오.</target>
        </trans-unit>
        <trans-unit id="cd0d3f4d9f412d033eddde43a048eb8599b4eed2" translate="yes" xml:space="preserve">
          <source>Try the .</source>
          <target state="translated">을 사용해보십시오.</target>
        </trans-unit>
        <trans-unit id="3d6fc4cc6f37c4db0524ee36aee6fae03bc9b160" translate="yes" xml:space="preserve">
          <source>Try the Reactive Forms live-example.</source>
          <target state="translated">리 액티브 폼 라이브 예제를 사용해보십시오.</target>
        </trans-unit>
        <trans-unit id="1a5c2c2df13a5a08f5ec5e0c77a14b60e0a6f624" translate="yes" xml:space="preserve">
          <source>Try the change detection profiler &lt;code&gt;ng.profiler.timeChangeDetection()&lt;/code&gt; then hit Enter.</source>
          <target state="translated">변경 감지 프로파일 러 &lt;code&gt;ng.profiler.timeChangeDetection()&lt;/code&gt; 시도하십시오. 을 후 Enter를 누르십시오.</target>
        </trans-unit>
        <trans-unit id="cc82bb7378a7738346274197a65346c4cb1c2791" translate="yes" xml:space="preserve">
          <source>Try the live example.</source>
          <target state="translated">라이브 예를보십시오.</target>
        </trans-unit>
        <trans-unit id="6f3deed36905b6ad108038ee3fade698b4b61902" translate="yes" xml:space="preserve">
          <source>Try to minimize the heading depth, preferably only two. But more headings, such as this one, are permitted if they make sense.</source>
          <target state="translated">제목 깊이를 최소화하십시오 (두 개만). 그러나이 경우와 같이 더 많은 제목이 허용되는 경우 허용됩니다.</target>
        </trans-unit>
        <trans-unit id="95d44839b57ad612170554fef51a66c4c2b769e8" translate="yes" xml:space="preserve">
          <source>Try to update webdriver.</source>
          <target state="translated">웹 드라이버를 업데이트하십시오.</target>
        </trans-unit>
        <trans-unit id="b44892b7f81948b449b1fceb43f8115ba5ff108b" translate="yes" xml:space="preserve">
          <source>Tu</source>
          <target state="translated">Tu</target>
        </trans-unit>
        <trans-unit id="529541bb390c76152e313351d89de3cd30a1c4bd" translate="yes" xml:space="preserve">
          <source>Tue</source>
          <target state="translated">Tue</target>
        </trans-unit>
        <trans-unit id="42e43b612a5dfae57ddf5929f0fb945ae83cbf61" translate="yes" xml:space="preserve">
          <source>Tuesday</source>
          <target state="translated">Tuesday</target>
        </trans-unit>
        <trans-unit id="db9100479b1bab146b0529edf56cd2ecbd2b852d" translate="yes" xml:space="preserve">
          <source>Turns an array of provider definitions into an array of resolved providers.</source>
          <target state="translated">공급자 정의 배열을 확인 된 공급자 배열로 바꿉니다.</target>
        </trans-unit>
        <trans-unit id="7a8c0b3d0dcf9c1d0944ace8b26766b7619fce7b" translate="yes" xml:space="preserve">
          <source>Turns the li element and its contents into a template, and uses that to instantiate a view for each item in list.</source>
          <target state="translated">li 요소 및 해당 컨텐츠를 템플리트로 변환하고이를 사용하여 목록의 각 항목에 대한보기를 인스턴스화합니다.</target>
        </trans-unit>
        <trans-unit id="2701a94c0eb55cbd958a87dff3e959673ff1bf53" translate="yes" xml:space="preserve">
          <source>Tutorial</source>
          <target state="translated">Tutorial</target>
        </trans-unit>
        <trans-unit id="67bfe76e19af4ce403f2340d240f7abfa0a85e7e" translate="yes" xml:space="preserve">
          <source>Two injector hierarchies</source>
          <target state="translated">두 인젝터 계층</target>
        </trans-unit>
        <trans-unit id="5af8d4f5f9dae7eb59bd4d8f4f973fff3523e350" translate="yes" xml:space="preserve">
          <source>Two of the three fields on this form are required. Required fields have a green bar on the left to make them easy to spot.</source>
          <target state="translated">이 양식의 세 필드 중 두 개가 필요합니다. 필수 필드는 왼쪽에 녹색 막대가있어 쉽게 찾을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b26194f02c2a9055521cad644dadbcf22c29b12c" translate="yes" xml:space="preserve">
          <source>Two older properties are still available. They are less capable than their replacements, discouraged, and may be deprecated in a future Angular version.</source>
          <target state="translated">두 가지 이전 속성을 계속 사용할 수 있습니다. 대체 제품보다 성능이 떨어지고, 권장하지 않으며, 향후 Angular 버전에서 더 이상 사용되지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c8403b3967903a37a646651f5a30b179b5958e53" translate="yes" xml:space="preserve">
          <source>Two types of errors can occur. The server backend might reject the request, returning an HTTP response with a status code such as 404 or 500. These are error &lt;em&gt;responses&lt;/em&gt;.</source>
          <target state="translated">두 가지 유형의 오류가 발생할 수 있습니다. 서버 백엔드는 요청을 거부하고 404 또는 500과 같은 상태 코드와 함께 HTTP 응답을 리턴합니다 . 이들은 오류 &lt;em&gt;응답&lt;/em&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="ee50a3e68cf100c0537278aede679f485d09b355" translate="yes" xml:space="preserve">
          <source>Two-way</source>
          <target state="translated">Two-way</target>
        </trans-unit>
        <trans-unit id="76e6c5bfb6eaf94684d63dcc6574a58b41d951d1" translate="yes" xml:space="preserve">
          <source>Two-way binding</source>
          <target state="translated">양방향 바인딩</target>
        </trans-unit>
        <trans-unit id="a02bb0a1df250e5934cdce63455e1ad4bc4637b6" translate="yes" xml:space="preserve">
          <source>Two-way binding &lt;code&gt;[(...)]&lt;/code&gt;</source>
          <target state="translated">양방향 바인딩 &lt;code&gt;[(...)]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0ee8d72f683e98e5e49284a4dbb3c6a8dac3d915" translate="yes" xml:space="preserve">
          <source>Two-way binding does two things:</source>
          <target state="translated">양방향 바인딩은 두 가지 작업을 수행합니다.</target>
        </trans-unit>
        <trans-unit id="f559c791fe1735111c9bc3f8318c26c9efdb1820" translate="yes" xml:space="preserve">
          <source>Two-way binding gives your app a way to share data between a component class and its template.</source>
          <target state="translated">양방향 바인딩을 통해 앱은 구성 요소 클래스와 템플릿간에 데이터를 공유 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="03cb506ca909370dd733aa2c43253165731e42ab" translate="yes" xml:space="preserve">
          <source>Two-way binding in forms</source>
          <target state="translated">형태의 양방향 바인딩</target>
        </trans-unit>
        <trans-unit id="5d24cacbc734efe855956d91ed8e0797e5f736ba" translate="yes" xml:space="preserve">
          <source>Two-way data binding (used mainly in &lt;a href=&quot;forms&quot;&gt;template-driven forms&lt;/a&gt;) combines property and event binding in a single notation. Here's an example from the &lt;code&gt;HeroDetailComponent&lt;/code&gt; template that uses two-way data binding with the &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; directive.</source>
          <target state="translated">양방향 데이터 바인딩 (주로 &lt;a href=&quot;forms&quot;&gt;템플릿 기반 양식에서 사용&lt;/a&gt; )은 단일 표기법으로 속성 및 이벤트 바인딩을 결합합니다. 다음 은 &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; 지시문 과 양방향 데이터 바인딩을 사용 하는 &lt;code&gt;HeroDetailComponent&lt;/code&gt; 템플릿 의 예입니다 .</target>
        </trans-unit>
        <trans-unit id="06f67c15fc229f1a2bb0b3b0ebc852bfedb0de8e" translate="yes" xml:space="preserve">
          <source>Two-way data binding with &lt;code&gt;ngModel&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;ngModel&lt;/code&gt; 을 사용한 양방향 데이터 바인딩</target>
        </trans-unit>
        <trans-unit id="6d973b2b83b53e6c30f5b13acc68a0a0c71e118f" translate="yes" xml:space="preserve">
          <source>Two-way data binding with ngModel</source>
          <target state="translated">ngModel을 사용한 양방향 데이터 바인딩</target>
        </trans-unit>
        <trans-unit id="f52bdefafb9c2ca15e12f66ca83326ece8bda8ce" translate="yes" xml:space="preserve">
          <source>Two-way sequence: &lt;em&gt;view-to-source-to-view&lt;/em&gt;</source>
          <target state="translated">양방향 시퀀스 : &lt;em&gt;소스 간보기&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="3deb7456519697ecf4eefc455516c969a3681bae" translate="yes" xml:space="preserve">
          <source>Type</source>
          <target state="translated">Type</target>
        </trans-unit>
        <trans-unit id="abb237ba4f86298e209fd0cde19460f30c5121a4" translate="yes" xml:space="preserve">
          <source>Type &lt;code&gt;ng.&lt;/code&gt; (usually the console will show auto-complete suggestion)</source>
          <target state="translated">&lt;code&gt;ng.&lt;/code&gt; 입력하십시오 . (일반적으로 콘솔은 자동 완성 제안을 표시합니다)</target>
        </trans-unit>
        <trans-unit id="00ec381921f624d45bbd03504823d08111458d72" translate="yes" xml:space="preserve">
          <source>Type annotations can be gradually added to existing functions and variables to pin down their types and get benefits like build-time error checking, great autocompletion support and inline documentation.</source>
          <target state="translated">유형 주석을 기존 함수 및 변수에 점진적으로 추가하여 유형을 고정하고 빌드 시간 오류 검사, 자동 완성 기능 지원 및 인라인 문서와 같은 이점을 얻을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="35df57064639add6482ba283504c0b41a4d923e6" translate="yes" xml:space="preserve">
          <source>Type enumeration for the different kinds of &lt;code&gt;&lt;a href=&quot;http/httpevent&quot;&gt;HttpEvent&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">다른 종류의 &lt;code&gt;&lt;a href=&quot;http/httpevent&quot;&gt;HttpEvent&lt;/a&gt;&lt;/code&gt; 에 대한 열거 형을 입력 하십시오 .</target>
        </trans-unit>
        <trans-unit id="67608246c1a184d4c40c268ca1fdc639f618fa7c" translate="yes" xml:space="preserve">
          <source>Type enumeration for the different kinds of &lt;code&gt;&lt;a href=&quot;httpevent&quot;&gt;HttpEvent&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">다른 종류의 &lt;code&gt;&lt;a href=&quot;httpevent&quot;&gt;HttpEvent&lt;/a&gt;&lt;/code&gt; 에 대한 열거 형을 입력 하십시오 .</target>
        </trans-unit>
        <trans-unit id="57c55c58c8644f8a5cbf6770552ae7125d3582e3" translate="yes" xml:space="preserve">
          <source>Type narrowing</source>
          <target state="translated">타입 축소</target>
        </trans-unit>
        <trans-unit id="95d67b98d7690612e1e13d9a3e9a1be2da8d088a" translate="yes" xml:space="preserve">
          <source>Type of the response, narrowed to either the full response or the header.</source>
          <target state="translated">전체 응답 또는 헤더로 좁힌 응답 유형입니다.</target>
        </trans-unit>
        <trans-unit id="c05540b14b3733e314b2c94793826ae9c2b0627e" translate="yes" xml:space="preserve">
          <source>Type something in the input box, and watch the display update with each keystroke.</source>
          <target state="translated">입력 상자에 무언가를 입력하고 키를 누를 때마다 디스플레이가 업데이트되는 것을보십시오.</target>
        </trans-unit>
        <trans-unit id="33ab71a8dcc6216b348bea2620429ad622b3147d" translate="yes" xml:space="preserve">
          <source>Type the &lt;code&gt;$event&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;$event&lt;/code&gt; 입력하십시오</target>
        </trans-unit>
        <trans-unit id="01e12f16a8da430c9b64b2d92b35b38ac6541548" translate="yes" xml:space="preserve">
          <source>Type used for modifications to metadata</source>
          <target state="translated">메타 데이터 수정에 사용되는 유형</target>
        </trans-unit>
        <trans-unit id="5173fdf6f5703224da499d4346fe617ae8193603" translate="yes" xml:space="preserve">
          <source>Type-ahead suggestions</source>
          <target state="translated">자동 완성 제안</target>
        </trans-unit>
        <trans-unit id="9c733ffadf4f948ba611c69673474803d64d1601" translate="yes" xml:space="preserve">
          <source>TypeDecorator</source>
          <target state="translated">TypeDecorator</target>
        </trans-unit>
        <trans-unit id="e6711bda99893016ef166d44941fe0aeec10d722" translate="yes" xml:space="preserve">
          <source>TypeProvider</source>
          <target state="translated">TypeProvider</target>
        </trans-unit>
        <trans-unit id="d4a86cb946d4af4766f6a695502b64f3ea0cd58b" translate="yes" xml:space="preserve">
          <source>TypeScript</source>
          <target state="translated">TypeScript</target>
        </trans-unit>
        <trans-unit id="eea2f4b377967e9066abaa29b6c1756fe6ff90ed" translate="yes" xml:space="preserve">
          <source>TypeScript Configuration</source>
          <target state="translated">TypeScript 구성</target>
        </trans-unit>
        <trans-unit id="d08f0fbcc73c7306dc8d1fd2df1b684771e05b98" translate="yes" xml:space="preserve">
          <source>TypeScript Typings</source>
          <target state="translated">타입 스크립트 타이핑</target>
        </trans-unit>
        <trans-unit id="568ece999d38f89aa19bccbc22c354f6f68a64b1" translate="yes" xml:space="preserve">
          <source>TypeScript configuration In the TypeScript configuration file, &lt;code&gt;tsconfig.json&lt;/code&gt;, the &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkwithhref#target&quot;&gt;target&lt;/a&gt;&lt;/code&gt; in the &lt;code&gt;compilerOptions&lt;/code&gt; section determines the ECMAScript target version that the code is compiled to. Modern browsers support ES2015 natively, while ES5 is more commonly used to support legacy browsers.</source>
          <target state="translated">타이프 스크립트 구성 파일 타이프 구성은 &lt;code&gt;tsconfig.json&lt;/code&gt; 는 상기 &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkwithhref#target&quot;&gt;target&lt;/a&gt;&lt;/code&gt; 에 &lt;code&gt;compilerOptions&lt;/code&gt; 의 섹션은 코드로 컴파일되는 ECMAScript를 대상 버전을 결정한다. 최신 브라우저는 기본적으로 ES2015를 지원하는 반면 ES5는 레거시 브라우저를 지원하는 데 더 일반적으로 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="b1e9557f6d0130ab631bf37ddceaa7ef43c0683e" translate="yes" xml:space="preserve">
          <source>TypeScript configuration for Web Worker modules.</source>
          <target state="translated">웹 작업자 모듈의 TypeScript 구성</target>
        </trans-unit>
        <trans-unit id="ffe80e00ee1ac5833b065ce121ce10c3b973c059" translate="yes" xml:space="preserve">
          <source>TypeScript definition files for 3rd party libraries such as Jasmine and Node.js.</source>
          <target state="translated">Jasmine 및 Node.js와 같은 타사 라이브러리의 TypeScript 정의 파일</target>
        </trans-unit>
        <trans-unit id="0b3cb1f49429cb05d8a3b0bcacdfe5ff715b318e" translate="yes" xml:space="preserve">
          <source>TypeScript developers disagree about whether the &lt;code&gt;noImplicitAny&lt;/code&gt; flag should be &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;. There is no correct answer and you can change the flag later. But your choice now can make a difference in larger projects, so it merits discussion.</source>
          <target state="translated">TypeScript 개발자는 &lt;code&gt;noImplicitAny&lt;/code&gt; 플래그가 &lt;code&gt;true&lt;/code&gt; 인지 &lt;code&gt;false&lt;/code&gt; 인지에 대해 동의하지 않습니다 . 정답이 없으며 나중에 플래그를 변경할 수 있습니다. 그러나 이제 선택은 더 큰 프로젝트에서 차이를 만들 수 있으므로 토론 할 가치가 있습니다.</target>
        </trans-unit>
        <trans-unit id="2ac9ee6e703b108a7d6fb03a16a6d571742ddf64" translate="yes" xml:space="preserve">
          <source>TypeScript execution environment and REPL for Node.js.</source>
          <target state="translated">Node.js에 대한 TypeScript 실행 환경 및 REPL</target>
        </trans-unit>
        <trans-unit id="e285eb073cfe4ca1656c07087772b6ee1156351a" translate="yes" xml:space="preserve">
          <source>TypeScript includes a special declaration file called &lt;code&gt;lib.d.ts&lt;/code&gt;. This file contains the ambient declarations for various common JavaScript constructs present in JavaScript runtimes and the DOM.</source>
          <target state="translated">타이프 라이터라는 특별 선언 파일이 포함 &lt;code&gt;lib.d.ts&lt;/code&gt; 을 . 이 파일에는 JavaScript 런타임 및 DOM에있는 다양한 일반적인 JavaScript 구문에 대한 앰비언트 선언이 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="d17e05e344ecb4e3225929fb6a865b40d4814eb9" translate="yes" xml:space="preserve">
          <source>TypeScript is a primary language for Angular application development. It is a superset of JavaScript with design-time support for type safety and tooling.</source>
          <target state="translated">TypeScript는 Angular 응용 프로그램 개발을위한 기본 언어입니다. 형식 안전 및 툴링을위한 디자인 타임 지원 기능을 갖춘 JavaScript의 상위 세트입니다.</target>
        </trans-unit>
        <trans-unit id="2c8995564b3de9df5c51483595738fe4422b297b" translate="yes" xml:space="preserve">
          <source>TypeScript is the preferred language for Angular development. Read more about TypeScript at &lt;a href=&quot;http://www.typescriptlang.org/&quot;&gt;typescriptlang.org&lt;/a&gt;.</source>
          <target state="translated">TypeScript는 Angular 개발에 선호되는 언어입니다. &lt;a href=&quot;http://www.typescriptlang.org/&quot;&gt;typescriptlang.org&lt;/a&gt; 에서 TypeScript에 대해 자세히 알아보십시오 .</target>
        </trans-unit>
        <trans-unit id="13b49b13fb502567852c984e23e397ba1fe80b3a" translate="yes" xml:space="preserve">
          <source>TypeScript understands ambient types so you don't import them. The Angular compiler does not understand a type that you neglect to export or import.</source>
          <target state="translated">TypeScript는 주변 유형을 이해하므로 가져 오지 않습니다. Angular 컴파일러는 내보내거나 가져 오기를 무시하는 형식을 이해하지 못합니다.</target>
        </trans-unit>
        <trans-unit id="77e137f60887b3a3c13ebdb09dee2d2b67d890c4" translate="yes" xml:space="preserve">
          <source>TypeScript will prevent you from setting &lt;code&gt;&lt;a href=&quot;../api/common/http/httprequest&quot;&gt;HttpRequest&lt;/a&gt;&lt;/code&gt; readonly properties.</source>
          <target state="translated">TypeScript를 사용하면 &lt;code&gt;&lt;a href=&quot;../api/common/http/httprequest&quot;&gt;HttpRequest&lt;/a&gt;&lt;/code&gt; 읽기 전용 속성 을 설정할 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="717ede79628ca336772d228c8b05e09de2a3a0c2" translate="yes" xml:space="preserve">
          <source>TypeScript-aware editors leverage these same definition files to display type information about library features.</source>
          <target state="translated">TypeScript 인식 편집기는 동일한 정의 파일을 사용하여 라이브러리 기능에 대한 유형 정보를 표시합니다.</target>
        </trans-unit>
        <trans-unit id="7118d9e8c875a30ba644adcfe209053d423d1da0" translate="yes" xml:space="preserve">
          <source>Typed Array</source>
          <target state="translated">타입 배열</target>
        </trans-unit>
        <trans-unit id="7ab3c88469253783493694d6963d80d7a8308f54" translate="yes" xml:space="preserve">
          <source>Typed according to the expected type of the response.</source>
          <target state="translated">예상되는 응답 유형에 따라 입력되었습니다.</target>
        </trans-unit>
        <trans-unit id="93b9e289e2842469d001eccf7ad5d79f3c302dc9" translate="yes" xml:space="preserve">
          <source>Types</source>
          <target state="translated">Types</target>
        </trans-unit>
        <trans-unit id="c713e3cd5c50ec234c9ce6d04250d694a2a4d577" translate="yes" xml:space="preserve">
          <source>Types defined in a &lt;code&gt;@types/&lt;/code&gt; package for a library installed into the workspace are automatically added to the TypeScript configuration for the project that uses that library. TypeScript looks for types in the &lt;code&gt;node_modules/@types&lt;/code&gt; folder by default, so you don't have to add each type package individually.</source>
          <target state="translated">작업 공간에 설치된 라이브러리 의 &lt;code&gt;@types/&lt;/code&gt; 패키지에 정의 된 유형 은 해당 라이브러리를 사용하는 프로젝트의 TypeScript 구성에 자동으로 추가됩니다. TypeScript는 기본적으로 &lt;code&gt;node_modules/@types&lt;/code&gt; 폴더에서 유형을 검색 하므로 각 유형 패키지를 개별적으로 추가 할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="12392cbc3086f77e04a6c62a73c887b3f9c633d6" translate="yes" xml:space="preserve">
          <source>Types of Feature Modules</source>
          <target state="translated">기능 모듈의 유형</target>
        </trans-unit>
        <trans-unit id="118122abcc89881e0578f9aef369355356986b9f" translate="yes" xml:space="preserve">
          <source>Types of NgModules</source>
          <target state="translated">NgModules의 종류</target>
        </trans-unit>
        <trans-unit id="11fe3760894bbd3efef56cd08f43a7f909233a1d" translate="yes" xml:space="preserve">
          <source>Types of modifiers</source>
          <target state="translated">수정 자의 종류</target>
        </trans-unit>
        <trans-unit id="0ef8a95f38c50052d0013209588f9bd78801e33d" translate="yes" xml:space="preserve">
          <source>Typically new embedded views are attached to the view container of this location, but in advanced use-cases, the view can be attached to a different container while keeping the data-binding and injection context from the original location.</source>
          <target state="translated">일반적으로 새 내장 뷰는이 위치의 뷰 컨테이너에 연결되지만 고급 사용 사례에서는 데이터 바인딩 및 주입 컨텍스트를 원래 위치에서 유지하면서 뷰를 다른 컨테이너에 연결할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2c7b40120f45df1933863f5ac01d78ac42ee438a" translate="yes" xml:space="preserve">
          <source>Typically, animations involve multiple style &lt;em&gt;transformations&lt;/em&gt; over time. An HTML element can move, change color, grow or shrink, fade, or slide off the page. These changes can occur simultaneously or sequentially. You can control the timing of each transformation.</source>
          <target state="translated">일반적으로 애니메이션에는 시간이 지남에 따라 여러 스타일 &lt;em&gt;변환&lt;/em&gt; 이 포함됩니다. HTML 요소는 페이지를 이동, 색상 변경, 확대 / 축소, 페이드 또는 슬라이드 아웃 할 수 있습니다. 이러한 변경은 동시에 또는 순차적으로 발생할 수 있습니다. 각 변환의 타이밍을 제어 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b5fb32f38245ff9f2d99b2dd935857d879ebced7" translate="yes" xml:space="preserve">
          <source>Typically, the name of a generated artifact can be given as an argument to the command or specified with the --name option.</source>
          <target state="translated">일반적으로 생성 된 아티팩트 이름은 명령에 대한 인수로 제공되거나 --name 옵션으로 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b95554d848ef81d79b0b709dc7f5aaeb34a12474" translate="yes" xml:space="preserve">
          <source>Typically, you add a TypeScript configuration file called &lt;code&gt;tsconfig.json&lt;/code&gt; to your project to guide the compiler as it generates JavaScript files.</source>
          <target state="translated">일반적으로 &lt;code&gt;tsconfig.json&lt;/code&gt; 이라는 TypeScript 구성 파일 을 프로젝트에 추가하여 JavaScript 파일을 생성 할 때 컴파일러를 안내합니다.</target>
        </trans-unit>
        <trans-unit id="a0bd1a75c0172c79f7c9ff6dc164b3a599561a53" translate="yes" xml:space="preserve">
          <source>Typing the event object reveals a significant objection to passing the entire DOM event into the method: the component has too much awareness of the template details. It can't extract information without knowing more than it should about the HTML implementation. That breaks the separation of concerns between the template (&lt;em&gt;what the user sees&lt;/em&gt;) and the component (&lt;em&gt;how the application processes user data&lt;/em&gt;).</source>
          <target state="translated">이벤트 객체를 입력하면 전체 DOM 이벤트를 메서드에 전달하는 데 상당한 반대가 나타납니다. 구성 요소가 템플릿 세부 정보를 너무 많이 인식합니다. HTML 구현에 대한 것 이상을 알지 못하면 정보를 추출 할 수 없습니다. 따라서 템플릿 ( &lt;em&gt;사용자가 보는 것&lt;/em&gt; )과 구성 요소 ( &lt;em&gt;응용 프로그램이 사용자 데이터를 처리하는 방법&lt;/em&gt; ) 사이의 우려가 분리 됩니다.</target>
        </trans-unit>
        <trans-unit id="480af6c7beed3c898f5f1f02a7bf65dedf1b38cc" translate="yes" xml:space="preserve">
          <source>Typings for custom elements</source>
          <target state="translated">사용자 정의 요소의 타이핑</target>
        </trans-unit>
        <trans-unit id="20bdf90100bc0696258702c718f92a1b02cab2b8" translate="yes" xml:space="preserve">
          <source>UPPER_UNDERSCORE_CASE (or UPPER_SNAKE_CASE, or SCREAMING_SNAKE_CASE): Traditional for constants (acceptable, but prefer camelCase). Upper snake case uses words in all capital letters connected with underscores. For example, &quot;FIX_ME&quot;.</source>
          <target state="translated">UPPER_UNDERSCORE_CASE (또는 UPPER_SNAKE_CASE 또는 SCREAMING_SNAKE_CASE) : 상수의 전통적 (허용 가능하지만 카멜 케이스 선호). 대문자 뱀은 밑줄로 연결된 모든 대문자로 단어를 사용합니다. 예를 들어 &quot;FIX_ME&quot;입니다.</target>
        </trans-unit>
        <trans-unit id="a27c9c50aeeb496cbd6ae8eb92bcc77112bfe9fd" translate="yes" xml:space="preserve">
          <source>URL of the resource retrieved, or null if not available.</source>
          <target state="translated">검색된 리소스의 URL. 사용할 수없는 경우 null</target>
        </trans-unit>
        <trans-unit id="f65f44308f1ade7cb98e9a6130f17b75f1c7965f" translate="yes" xml:space="preserve">
          <source>URL path to normalize.</source>
          <target state="translated">정규화 할 URL 경로입니다.</target>
        </trans-unit>
        <trans-unit id="c774e36c8a233fe47b885d57e6f9250be88a291c" translate="yes" xml:space="preserve">
          <source>URL query strings</source>
          <target state="translated">URL 쿼리 문자열</target>
        </trans-unit>
        <trans-unit id="ab8c3d3d9bc2c2c289a7a884d43b797a116cdf17" translate="yes" xml:space="preserve">
          <source>URL string</source>
          <target state="translated">URL 문자열</target>
        </trans-unit>
        <trans-unit id="6415e7db453017765698b94a474b0ba310523c13" translate="yes" xml:space="preserve">
          <source>URL string.</source>
          <target state="translated">URL 문자열.</target>
        </trans-unit>
        <trans-unit id="6229662eaa903e67f2ed0f1353e8aa463aa6f79f" translate="yes" xml:space="preserve">
          <source>URL where files will be deployed.</source>
          <target state="translated">파일이 배포 될 URL입니다.</target>
        </trans-unit>
        <trans-unit id="b19e8d66e7f004e226c44a75766dadab7d09911a" translate="yes" xml:space="preserve">
          <source>URLSearchParams</source>
          <target state="translated">URLSearchParams</target>
        </trans-unit>
        <trans-unit id="82ec40ec287dfe6afdf2c04f8ac45df9a5b41f73" translate="yes" xml:space="preserve">
          <source>Uglification: rewrites code to use short, cryptic variable and function names.</source>
          <target state="translated">Uglification : 짧은 암호 변수 및 함수 이름을 사용하도록 코드를 다시 작성합니다.</target>
        </trans-unit>
        <trans-unit id="dec6154649e20b8a4f868f22a0c2826a4a662d9a" translate="yes" xml:space="preserve">
          <source>Ugly, long section header anchors</source>
          <target state="translated">못생긴 긴 섹션 헤더 앵커</target>
        </trans-unit>
        <trans-unit id="3698e121e629257a193cc1ee0ba5707f90dd1040" translate="yes" xml:space="preserve">
          <source>UiArguments</source>
          <target state="translated">UiArguments</target>
        </trans-unit>
        <trans-unit id="0368218af0bd6062b199bada30a6e4035b16a7cb" translate="yes" xml:space="preserve">
          <source>Unable to find a parent by its base class</source>
          <target state="translated">기본 클래스로 부모를 찾을 수 없습니다</target>
        </trans-unit>
        <trans-unit id="0585362025afaad2cb556c1470ca13de2ec4b0c6" translate="yes" xml:space="preserve">
          <source>Under the &lt;code&gt;projects/&lt;/code&gt; folder, the &lt;code&gt;my-lib&lt;/code&gt; folder contains your library code.</source>
          <target state="translated">&lt;code&gt;projects/&lt;/code&gt; 폴더 아래에 &lt;code&gt;my-lib&lt;/code&gt; 폴더에는 라이브러리 코드가 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="4b9ec3e5288ad1a146764809c08b172bb0ce4e69" translate="yes" xml:space="preserve">
          <source>Underlying strategy used by the NgElement to create/destroy the component and react to input changes.</source>
          <target state="translated">NgElement가 컴포넌트를 생성 / 파기하고 입력 변경에 대응하기 위해 사용하는 기본 전략.</target>
        </trans-unit>
        <trans-unit id="afd606b1b8fa2ecceb75d550cab8b8e4f51e46bf" translate="yes" xml:space="preserve">
          <source>Understanding the idea of the &lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt; demarcation is especially significant when you configure services in the component class.</source>
          <target state="translated">&lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt; 경계 의 개념을 이해 하면 구성 요소 클래스에서 서비스를 구성 할 때 특히 중요합니다.</target>
        </trans-unit>
        <trans-unit id="4f597440e2efa26501d9e6fdf63a407e19ac4158" translate="yes" xml:space="preserve">
          <source>Understanding the underlying logical structure of the Angular template will give you a foundation for configuring services and in turn control their visibility.</source>
          <target state="translated">Angular 템플릿의 기본 논리 구조를 이해하면 서비스를 구성하고 가시성을 제어 할 수있는 기반이됩니다.</target>
        </trans-unit>
        <trans-unit id="824952b55c3b4916ed165e11642a01333e88585f" translate="yes" xml:space="preserve">
          <source>Understanding this component requires only the Angular concepts covered in previous pages.</source>
          <target state="translated">이 구성 요소를 이해하려면 이전 페이지에서 다룬 Angular 개념 만 필요합니다.</target>
        </trans-unit>
        <trans-unit id="b0c0452cb24336e8190f9828a028e109b51bace3" translate="yes" xml:space="preserve">
          <source>Unfortunately, &lt;code&gt;ngOnInit&lt;/code&gt; is only called once per component instantiation. You need a way to detect when the route parameters change from &lt;em&gt;within the same instance&lt;/em&gt;. The observable &lt;code&gt;paramMap&lt;/code&gt; property handles that beautifully.</source>
          <target state="translated">불행히도 &lt;code&gt;ngOnInit&lt;/code&gt; 는 구성 요소 인스턴스화 당 한 번만 호출됩니다. &lt;em&gt;동일한 인스턴스 내&lt;/em&gt; 에서 경로 매개 변수가 변경되는시기를 감지하는 방법이 필요 &lt;em&gt;합니다&lt;/em&gt; . observable &lt;code&gt;paramMap&lt;/code&gt; 속성은이를 아름답게 처리합니다.</target>
        </trans-unit>
        <trans-unit id="d3ef861886f3ab5ce3796bed96c86f8269cc8b32" translate="yes" xml:space="preserve">
          <source>Unfortunately, Angular cannot inject the &lt;code&gt;HeroService&lt;/code&gt; directly into the base class. You must provide the &lt;code&gt;HeroService&lt;/code&gt; again for &lt;em&gt;this&lt;/em&gt; component, then pass it down to the base class inside the constructor.</source>
          <target state="translated">불행히도 Angular는 &lt;code&gt;HeroService&lt;/code&gt; 를 기본 클래스에 직접 주입 할 수 없습니다 . &lt;em&gt;이&lt;/em&gt; 컴포넌트에 대해 &lt;code&gt;HeroService&lt;/code&gt; 를 다시 제공 한 다음 생성자 내의 기본 클래스로 전달해야합니다.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="1139beaeaa7d4f3a71b279c04ed1135ac0675787" translate="yes" xml:space="preserve">
          <source>Unfortunately, AngularJS dependencies are not automatically available to Angular components. You must upgrade this service via a &lt;a href=&quot;upgrade#making-angularjs-dependencies-injectable-to-angular&quot;&gt;factory provider&lt;/a&gt; to make &lt;code&gt;$routeParams&lt;/code&gt; an Angular injectable. Do that in a new file called &lt;code&gt;ajs-upgraded-providers.ts&lt;/code&gt; and import it in &lt;code&gt;app.module.ts&lt;/code&gt;:</source>
          <target state="translated">불행히도 AngularJS 종속성은 Angular 구성 요소에 자동으로 제공되지 않습니다. &lt;code&gt;$routeParams&lt;/code&gt; 를 Angular 주사제 로 만들려면 &lt;a href=&quot;upgrade#making-angularjs-dependencies-injectable-to-angular&quot;&gt;공장 공급자&lt;/a&gt; 를 통해이 서비스를 업그레이드해야합니다 . &lt;code&gt;ajs-upgraded-providers.ts&lt;/code&gt; 라는 새 파일에서이를 수행하고 app.module.ts로 가져 &lt;code&gt;app.module.ts&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4e7ab2a4cdcc53a9daa1be69012bf4487cc99281" translate="yes" xml:space="preserve">
          <source>Unfortunately, it's easy to mistakenly create invalid JSON that way. The preferred way is to create a JSON partial file with the fragment you want to display.</source>
          <target state="translated">불행히도 잘못된 JSON을 실수로 쉽게 만들 수 있습니다. 선호하는 방법은 표시하려는 조각으로 JSON 부분 파일을 만드는 것입니다.</target>
        </trans-unit>
        <trans-unit id="0867a551d468c9cf54a4c9bf87311fc791c6fddc" translate="yes" xml:space="preserve">
          <source>Unfortunately, this doesn't work. The  confirms that the &lt;code&gt;alex&lt;/code&gt; parameter is null. &lt;em&gt;You cannot inject a parent by its base class.&lt;/em&gt;</source>
          <target state="translated">불행히도 이것은 작동하지 않습니다. &lt;code&gt;alex&lt;/code&gt; 매개 변수가 널 임을 확인합니다 . &lt;em&gt;기본 클래스별로 부모를 주입 할 수 없습니다.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="a68c075bb4d2b8034dd50549a21ce7d7c5111785" translate="yes" xml:space="preserve">
          <source>Unhashed content</source>
          <target state="translated">해싱되지 않은 콘텐츠</target>
        </trans-unit>
        <trans-unit id="4fab6ba13e9a4725c7f55ea2ec290c22e51d62b3" translate="yes" xml:space="preserve">
          <source>Union type for all possible events on the response stream.</source>
          <target state="translated">응답 스트림에서 가능한 모든 이벤트에 대한 결합 유형.</target>
        </trans-unit>
        <trans-unit id="55319d93decd49524c6577ad2944aab8499b8def" translate="yes" xml:space="preserve">
          <source>Unit Tests</source>
          <target state="translated">단위 테스트</target>
        </trans-unit>
        <trans-unit id="db8942af8190970c5de3a92510cbcaccdbfc8120" translate="yes" xml:space="preserve">
          <source>Unit test file names</source>
          <target state="translated">단위 테스트 파일 이름</target>
        </trans-unit>
        <trans-unit id="29d1c928f5bc2da434acc08d22662b06b1e6a793" translate="yes" xml:space="preserve">
          <source>Unit tests are located side-by-side with application code where they are easily found, as described in the rules for &lt;a href=&quot;https://github.com/johnpapa/angular-styleguide/blob/master/a1/README.md#organizing-tests&quot;&gt;Organizing Tests&lt;/a&gt;.</source>
          <target state="translated">단위 테스트는 &lt;a href=&quot;https://github.com/johnpapa/angular-styleguide/blob/master/a1/README.md#organizing-tests&quot;&gt;테스트 구성&lt;/a&gt; 규칙에 설명 된대로 쉽게 찾을 수있는 애플리케이션 코드와 나란히 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d02603176f8822a40aaa5b4270e49934a7f83824" translate="yes" xml:space="preserve">
          <source>Universal</source>
          <target state="translated">Universal</target>
        </trans-unit>
        <trans-unit id="aff10513c0d4453b031e927d20f60a376e5f4fbf" translate="yes" xml:space="preserve">
          <source>Universal applications use the Angular &lt;code&gt;platform-server&lt;/code&gt; package (as opposed to &lt;code&gt;platform-browser&lt;/code&gt;), which provides server implementations of the DOM, &lt;code&gt;XMLHttpRequest&lt;/code&gt;, and other low-level features that don't rely on a browser.</source>
          <target state="translated">범용 애플리케이션 은 &lt;code&gt;platform-browser&lt;/code&gt; 와 달리 Angular &lt;code&gt;platform-server&lt;/code&gt; 패키지를 사용합니다. 이 플랫폼 은 DOM, &lt;code&gt;XMLHttpRequest&lt;/code&gt; 및 브라우저에 의존하지 않는 기타 저수준 기능 의 서버 구현을 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="1b3d6e5815238e0752a3fe0b7b98c0c2d1361792" translate="yes" xml:space="preserve">
          <source>Universal in action</source>
          <target state="translated">보편적 인 행동</target>
        </trans-unit>
        <trans-unit id="dfa8fc69d23bd49ebc9a6555c9504f90cf88d7d1" translate="yes" xml:space="preserve">
          <source>Universal template engine</source>
          <target state="translated">범용 템플릿 엔진</target>
        </trans-unit>
        <trans-unit id="8a007210f1fae1f94e3d5f08f71db96b4634231f" translate="yes" xml:space="preserve">
          <source>Universal tutorial</source>
          <target state="translated">유니버설 튜토리얼</target>
        </trans-unit>
        <trans-unit id="7128eb1919baae98fa34b937a937468e6cef52dd" translate="yes" xml:space="preserve">
          <source>Universal web servers</source>
          <target state="translated">범용 웹 서버</target>
        </trans-unit>
        <trans-unit id="4c8eeb97df443eae9c961beeb83622d6ee4e82cc" translate="yes" xml:space="preserve">
          <source>Unless otherwise noted, all code snippets in this page are derived from sample source code located in the &lt;code&gt;content/examples/docs-style-guide&lt;/code&gt; directory.</source>
          <target state="translated">달리 언급하지 않는 한이 페이지의 모든 코드 스 니펫은 &lt;code&gt;content/examples/docs-style-guide&lt;/code&gt; 디렉토리 에있는 샘플 소스 코드에서 파생됩니다 .</target>
        </trans-unit>
        <trans-unit id="c6cf3859698e15c5299392bec7dbb52c091995b6" translate="yes" xml:space="preserve">
          <source>Unless otherwise noted, patterns use a limited glob format:</source>
          <target state="translated">달리 명시되지 않는 한 패턴은 제한된 glob 형식을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="997a0eb0ed95f2be66009dfc632a3a65cd86399d" translate="yes" xml:space="preserve">
          <source>Unlike &lt;code&gt;&lt;a href=&quot;upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; does not automatically run a &lt;a href=&quot;https://docs.angularjs.org/api/ng/type/%24rootScope.Scope#%24digest&quot;&gt;$digest()&lt;/a&gt; when changes are detected in the Angular part of the application.</source>
          <target state="translated">달리 &lt;code&gt;&lt;a href=&quot;upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; 가 자동으로 실행되지 않는 &lt;a href=&quot;https://docs.angularjs.org/api/ng/type/%24rootScope.Scope#%24digest&quot;&gt;$ 소화 ()&lt;/a&gt; 변경이 응용 프로그램의 각 부분에서 검출되는 경우.</target>
        </trans-unit>
        <trans-unit id="a2a526d27ea3191a1868165ff807c75c16ebcdfe" translate="yes" xml:space="preserve">
          <source>Unlike &lt;code&gt;&lt;a href=&quot;upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; does not bootstrap the main AngularJS module inside the &lt;a href=&quot;../../core/ngzone&quot;&gt;Angular zone&lt;/a&gt;.</source>
          <target state="translated">달리 &lt;code&gt;&lt;a href=&quot;upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; 메인 AngularJS와 안쪽 모듈 부트 스트랩 않는 &lt;a href=&quot;../../core/ngzone&quot;&gt;각도 영역&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="b662d56928e588ac496f4c10d2baf470830bd906" translate="yes" xml:space="preserve">
          <source>Unlike &lt;em&gt;Hero Detail&lt;/em&gt;, which updates as you type, &lt;em&gt;Crisis Detail&lt;/em&gt; changes are temporary until you either save or discard them by pressing the &quot;Save&quot; or &quot;Cancel&quot; buttons. Both buttons navigate back to the &lt;em&gt;Crisis Center&lt;/em&gt; and its list of crises.</source>
          <target state="translated">입력 할 때 업데이트되는 &lt;em&gt;Hero Detail&lt;/em&gt; 과 달리 &lt;em&gt;Crisis Detail&lt;/em&gt; 변경 사항은 &quot;저장&quot;또는 &quot;취소&quot;버튼을 눌러 변경 사항을 저장하거나 삭제할 때까지 일시적입니다. 두 버튼 모두 &lt;em&gt;위기 센터&lt;/em&gt; 와 위기 목록으로 돌아갑니다 .</target>
        </trans-unit>
        <trans-unit id="17cc853061da6fd12dc97c043a57e14e493a031e" translate="yes" xml:space="preserve">
          <source>Unlike JavaScript modules, an NgModule can extend the &lt;em&gt;entire&lt;/em&gt; application with services by adding providers to the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule#providers&quot;&gt;NgModule.providers&lt;/a&gt;&lt;/code&gt; list.</source>
          <target state="translated">JavaScript 모듈과 달리 NgModule은 공급자를 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule#providers&quot;&gt;NgModule.providers&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;../api/core/ngmodule#providers&quot;&gt;NgModule.providers&lt;/a&gt; 목록 에 추가하여 서비스로 &lt;em&gt;전체&lt;/em&gt; 애플리케이션을 확장 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c061fb170ebb3deb768717f260b104981728d5c0" translate="yes" xml:space="preserve">
          <source>Unlike JavaScript, which uses strict equality, Angular uses loose equality. This means that the empty string, &lt;code&gt;&quot;&quot;&lt;/code&gt; matches 0.</source>
          <target state="translated">엄격한 평등을 사용하는 JavaScript와 달리 Angular는 느슨한 평등을 사용합니다. 이것은 빈 문자열 &lt;code&gt;&quot;&quot;&lt;/code&gt; 이 0과 일치 함을 의미합니다 .</target>
        </trans-unit>
        <trans-unit id="d12281a35071e2f70968ecec4a88ccf48823d979" translate="yes" xml:space="preserve">
          <source>Unlike asset resources, data requests are not versioned along with the app. They're cached according to manually-configured policies that are more useful for situations such as API requests and other data dependencies.</source>
          <target state="translated">자산 리소스와 달리 데이터 요청은 앱과 함께 버전이 지정되지 않습니다. API 요청 및 기타 데이터 종속성과 같은 상황에 더 유용한 수동으로 구성된 정책에 따라 캐시됩니다.</target>
        </trans-unit>
        <trans-unit id="883ea145ab160985399b62f775b21393220f3076" translate="yes" xml:space="preserve">
          <source>Unlike providers of the modules loaded at launch, providers of lazy-loaded modules are &lt;em&gt;module-scoped&lt;/em&gt;.</source>
          <target state="translated">시작시로드 된 모듈 공급자와 달리 지연로드 모듈 공급자는 &lt;em&gt;모듈 범위&lt;/em&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="b6f5e363e9f262e106ea06e2709ebaf828ae9100" translate="yes" xml:space="preserve">
          <source>Unlike the &lt;a href=&quot;template-syntax#safe-navigation-operator&quot;&gt;&lt;em&gt;safe navigation operator&lt;/em&gt;&lt;/a&gt;, the non-null assertion operator does not guard against &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;. Rather, it tells the TypeScript type checker to suspend strict &lt;code&gt;null&lt;/code&gt; checks for a specific property expression.</source>
          <target state="translated">&lt;a href=&quot;template-syntax#safe-navigation-operator&quot;&gt;&lt;em&gt;안전한 탐색 연산자&lt;/em&gt;&lt;/a&gt; 와 달리 null이 아닌 어설 션 연산자는 &lt;code&gt;null&lt;/code&gt; 또는 &lt;code&gt;undefined&lt;/code&gt; 를 방지하지 않습니다 . 오히려 TypeScript 형식 검사기에 특정 속성 식에 대해 엄격한 &lt;code&gt;null&lt;/code&gt; 검사 를 일시 중단하도록 지시합니다 .</target>
        </trans-unit>
        <trans-unit id="c84f1525536690954f99a413b23d680798dcaedf" translate="yes" xml:space="preserve">
          <source>Unlike the other scripts that make up an application, such as the Angular app bundle, the service worker is preserved after the user closes the tab. The next time that browser loads the application, the service worker loads first, and can intercept every request for resources to load the application. If the service worker is designed to do so, it can &lt;em&gt;completely satisfy the loading of the application, without the need for the network&lt;/em&gt;.</source>
          <target state="translated">Angular 앱 번들과 같이 응용 프로그램을 구성하는 다른 스크립트와 달리 서비스 워커는 사용자가 탭을 닫은 후에도 유지됩니다. 다음에 브라우저가 응용 프로그램을로드하면 서비스 워커가 먼저로드되고 응용 프로그램을로드하기 위해 리소스에 대한 모든 요청을 가로 챌 수 있습니다. 서비스 워커가이를 수행하도록 설계된 &lt;em&gt;경우 네트워크가 없어도 애플리케이션로드를 완전히 만족시킬&lt;/em&gt; 수 &lt;em&gt;있습니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="5f33036664974b24cb26da8a2ab6ee9afad16fa6" translate="yes" xml:space="preserve">
          <source>Unregisters all applications</source>
          <target state="translated">모든 응용 프로그램을 등록 취소합니다</target>
        </trans-unit>
        <trans-unit id="6d32a4bafd30dfcac7a8a3c144996daff36ea02d" translate="yes" xml:space="preserve">
          <source>Unregisters an application.</source>
          <target state="translated">응용 프로그램을 등록 취소합니다.</target>
        </trans-unit>
        <trans-unit id="5ffffa9c4a22117e6f52f99f5cc3c43782a3e756" translate="yes" xml:space="preserve">
          <source>Unstructured</source>
          <target state="translated">Unstructured</target>
        </trans-unit>
        <trans-unit id="834cc0ee6089e541b395509ba562516bcafa78e2" translate="yes" xml:space="preserve">
          <source>Unsubscribe</source>
          <target state="translated">Unsubscribe</target>
        </trans-unit>
        <trans-unit id="36f376c88cfb8d16619510a291258ce8d2da42da" translate="yes" xml:space="preserve">
          <source>Unsubscribe using &lt;code&gt;&lt;a href=&quot;swpush#unsubscribe&quot;&gt;SwPush.unsubscribe()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;swpush#unsubscribe&quot;&gt;SwPush.unsubscribe()&lt;/a&gt;&lt;/code&gt; 사용하여 구독을 취소하십시오 .</target>
        </trans-unit>
        <trans-unit id="493dc8b26569cd76e59616c46a19c4d0c813beb4" translate="yes" xml:space="preserve">
          <source>Unsubscribes from Service Worker push notifications.</source>
          <target state="translated">Service Worker 푸시 알림을 수신 거부합니다.</target>
        </trans-unit>
        <trans-unit id="df1c180e11f697ae58851be0746d6030d8e54305" translate="yes" xml:space="preserve">
          <source>Unsupported enum member name</source>
          <target state="translated">지원되지 않는 열거 형 멤버 이름</target>
        </trans-unit>
        <trans-unit id="97a36dffa889515ec7097ac4311b95fa3f61bf7f" translate="yes" xml:space="preserve">
          <source>Until now, you've defined a single outlet and you've nested child routes under that outlet to group routes together. The router only supports one primary &lt;em&gt;unnamed&lt;/em&gt; outlet per template.</source>
          <target state="translated">지금까지 단일 콘센트를 정의했으며 해당 콘센트 아래에 하위 경로를 중첩하여 경로를 그룹화했습니다. 라우터 는 템플릿 당 하나의 기본 &lt;em&gt;명명되지 않은&lt;/em&gt; 콘센트 만 지원합니다 .</target>
        </trans-unit>
        <trans-unit id="2de3bb02ea926f63aeba38c756a87b0a2edaeece" translate="yes" xml:space="preserve">
          <source>Unwraps a value from an asynchronous primitive.</source>
          <target state="translated">비동기 프리미티브에서 값을 바꿉니다.</target>
        </trans-unit>
        <trans-unit id="641990fee74114293b8c76ce49cb7bf399384326" translate="yes" xml:space="preserve">
          <source>Up pops a dialog box.</source>
          <target state="translated">대화 상자가 나타납니다.</target>
        </trans-unit>
        <trans-unit id="ec67e6bd96103c22a842afec3ac1381cad313045" translate="yes" xml:space="preserve">
          <source>Up to this point, users can view product information, and simulate sharing and being notified about product changes. They cannot, however, buy products.</source>
          <target state="translated">지금까지 사용자는 제품 정보를보고 제품 변경 사항에 대한 공유 및 알림을 시뮬레이션 할 수 있습니다. 그러나 제품을 구입할 수는 없습니다.</target>
        </trans-unit>
        <trans-unit id="4ae15402fdbe9d9effa05f440fbe4ce47c9537f7" translate="yes" xml:space="preserve">
          <source>Update &lt;code&gt;HeroesComponent&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;HeroesComponent&lt;/code&gt; 업데이트</target>
        </trans-unit>
        <trans-unit id="496dd8be1173dfef1f30923f2f19597732b208d8" translate="yes" xml:space="preserve">
          <source>Update &lt;code&gt;app.component.html&lt;/code&gt; as follows:</source>
          <target state="translated">다음과 같이 &lt;code&gt;app.component.html&lt;/code&gt; 을 업데이트 하십시오 .</target>
        </trans-unit>
        <trans-unit id="e59d7b6b2ead1f0fc0b11cee3e56f5210aeccca4" translate="yes" xml:space="preserve">
          <source>Update checks</source>
          <target state="translated">업데이트 확인</target>
        </trans-unit>
        <trans-unit id="4e81a8a01dd6e963822eee8752358d7afb76a325" translate="yes" xml:space="preserve">
          <source>Update command reference: &lt;a href=&quot;cli/update&quot;&gt;Angular CLI &lt;code&gt;ng update&lt;/code&gt; command reference&lt;/a&gt;</source>
          <target state="translated">업데이트 명령 참조 : &lt;a href=&quot;cli/update&quot;&gt;Angular CLI &lt;code&gt;ng update&lt;/code&gt; 명령 참조&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="0de3f679ddfbe2c120a92aa34594bc38a0c19fc6" translate="yes" xml:space="preserve">
          <source>Update heroes</source>
          <target state="translated">영웅 업데이트</target>
        </trans-unit>
        <trans-unit id="a4cb9fff8da5beaccbad71dfaf4739db28f45a5b" translate="yes" xml:space="preserve">
          <source>Update instructions: &lt;a href=&quot;https://update.angular.io/&quot;&gt;Angular Update Guide&lt;/a&gt;</source>
          <target state="translated">업데이트 지침 : &lt;a href=&quot;https://update.angular.io/&quot;&gt;각도 업데이트 안내서&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="aee936d4df69b41b6d8369cb77cf1b581c5a9c3f" translate="yes" xml:space="preserve">
          <source>Update it with the following:</source>
          <target state="translated">다음과 같이 업데이트하십시오.</target>
        </trans-unit>
        <trans-unit id="aae9bb284e5cbcbfe30098c360fd2e5dac2b8f1d" translate="yes" xml:space="preserve">
          <source>Update schematics</source>
          <target state="translated">회로도 업데이트</target>
        </trans-unit>
        <trans-unit id="55262abadc993a08fb22cf285edc08f25cb1c76b" translate="yes" xml:space="preserve">
          <source>Update the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; of &lt;code&gt;index.html&lt;/code&gt; to include this style sheet:</source>
          <target state="translated">이 스타일 시트를 포함하도록 &lt;code&gt;index.html&lt;/code&gt; 의 &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; 를 업데이트하십시오 .</target>
        </trans-unit>
        <trans-unit id="44edb4f17ea3eb3c127f01bb6cec6f3cf223b788" translate="yes" xml:space="preserve">
          <source>Update the &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; directive to assign each index in the &lt;code&gt;products&lt;/code&gt; array to the &lt;code&gt;productId&lt;/code&gt; variable when iterating over the list.</source>
          <target state="translated">목록을 반복 할 때 &lt;code&gt;products&lt;/code&gt; 배열의 각 인덱스를 &lt;code&gt;productId&lt;/code&gt; 변수 에 지정하려면 &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 지시문을 업데이트하십시오 .</target>
        </trans-unit>
        <trans-unit id="047acd556996d14676e31a2016d5e00031fb3843" translate="yes" xml:space="preserve">
          <source>Update the &lt;code&gt;AuthGuard&lt;/code&gt; to provide a &lt;code&gt;session_id&lt;/code&gt; query that will remain after navigating to another route.</source>
          <target state="translated">다른 경로로 이동 한 후 남아 있는 &lt;code&gt;session_id&lt;/code&gt; 쿼리 를 제공 하도록 &lt;code&gt;AuthGuard&lt;/code&gt; 를 업데이트하십시오 .</target>
        </trans-unit>
        <trans-unit id="c7af99452e024679731c58a6ce980e61e0f9ce31" translate="yes" xml:space="preserve">
          <source>Update the &lt;code&gt;AuthService&lt;/code&gt; to log in the user:</source>
          <target state="translated">&lt;code&gt;AuthService&lt;/code&gt; 를 업데이트하여 사용자를 로그인하십시오.</target>
        </trans-unit>
        <trans-unit id="17df82461b1d4af3eea1a7f235dffc7a24516cb6" translate="yes" xml:space="preserve">
          <source>Update the &lt;code&gt;HeroService&lt;/code&gt;&lt;code&gt;getHero()&lt;/code&gt; method with the following to make that request:</source>
          <target state="translated">요청을 작성 하려면 &lt;code&gt;HeroService&lt;/code&gt; &lt;code&gt;getHero()&lt;/code&gt; 메소드를 다음과 같이 업데이트하십시오 .</target>
        </trans-unit>
        <trans-unit id="456c568fc10b9b5af7828b3954b0630e145d6ff2" translate="yes" xml:space="preserve">
          <source>Update the &lt;code&gt;HeroesComponent&lt;/code&gt; template</source>
          <target state="translated">&lt;code&gt;HeroesComponent&lt;/code&gt; 템플릿 업데이트</target>
        </trans-unit>
        <trans-unit id="2a0c322c3ec3335c98a6927316b6de2d83201e94" translate="yes" xml:space="preserve">
          <source>Update the &lt;code&gt;crisis-center-routing.module.ts&lt;/code&gt; you renamed after copying it from &lt;code&gt;heroes-routing.module.ts&lt;/code&gt; file. This time, you define &lt;strong&gt;child routes&lt;/strong&gt;&lt;em&gt;within&lt;/em&gt; the parent &lt;code&gt;crisis-center&lt;/code&gt; route.</source>
          <target state="translated">&lt;code&gt;heroes-routing.module.ts&lt;/code&gt; 파일 에서 복사 한 후에 이름을 입력 한 &lt;code&gt;crisis-center-routing.module.ts&lt;/code&gt; 를 업데이트 하십시오. 이번에 는 상위 &lt;code&gt;crisis-center&lt;/code&gt; &lt;strong&gt;경로 &lt;/strong&gt;&lt;em&gt;내&lt;/em&gt; 에서 &lt;strong&gt;하위 경로&lt;/strong&gt; 를 정의 합니다.&lt;strong&gt;&lt;/strong&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e584e483de80651422da868086dd08163863efd3" translate="yes" xml:space="preserve">
          <source>Update the &lt;code&gt;goToHeroes()&lt;/code&gt; method in the &lt;code&gt;hero-detail.component.ts&lt;/code&gt; to navigate back to &lt;code&gt;/superheroes&lt;/code&gt; with the optional route parameters.</source>
          <target state="translated">&lt;code&gt;hero-detail.component.ts&lt;/code&gt; 에서 &lt;code&gt;goToHeroes()&lt;/code&gt; 메소드를 업데이트하여 선택적 경로 매개 변수 를 사용하여 &lt;code&gt;/superheroes&lt;/code&gt; 로 다시 이동 하십시오.</target>
        </trans-unit>
        <trans-unit id="9ceea5cd899b3e0cb4af6ee69dfa6e2a472df15b" translate="yes" xml:space="preserve">
          <source>Update the &lt;code&gt;gotoCrises&lt;/code&gt; method of the &lt;code&gt;CrisisDetailComponent&lt;/code&gt; to navigate back to the &lt;em&gt;Crisis Center&lt;/em&gt; list using relative path navigation.</source>
          <target state="translated">상대 경로 탐색을 사용하여 &lt;code&gt;CrisisDetailComponent&lt;/code&gt; 의 &lt;code&gt;gotoCrises&lt;/code&gt; 메소드를 업데이트하여 &lt;em&gt;Crisis Center&lt;/em&gt; 목록으로 다시 이동하십시오.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="63d15e6be1057ef3573d05c93044f0abe7f5d7f0" translate="yes" xml:space="preserve">
          <source>Update the &lt;code&gt;protractor-conf.js&lt;/code&gt; to sync with hybrid apps:</source>
          <target state="translated">하이브리드 앱과 동기화되도록 &lt;code&gt;protractor-conf.js&lt;/code&gt; 를 업데이트하십시오 .</target>
        </trans-unit>
        <trans-unit id="ba1c01ce8fe91885115c745dda6dea1b1dee4654" translate="yes" xml:space="preserve">
          <source>Update the binding in the template to announce the hero's name and show both &lt;code&gt;id&lt;/code&gt; and &lt;code&gt;name&lt;/code&gt; in a details layout like this:</source>
          <target state="translated">템플릿의 바인딩을 업데이트하여 영웅의 이름을 &lt;code&gt;id&lt;/code&gt; 과 같이 세부 정보 레이아웃에 id 와 &lt;code&gt;name&lt;/code&gt; 을 모두 표시 하십시오.</target>
        </trans-unit>
        <trans-unit id="b73f126c77cbaf03da82c5d00d55430a2ec78f0a" translate="yes" xml:space="preserve">
          <source>Update the component template to look like this:</source>
          <target state="translated">다음과 같이 컴포넌트 템플리트를 업데이트하십시오.</target>
        </trans-unit>
        <trans-unit id="e8c7ee399df1289188c98c11849990a2f1ac0ced" translate="yes" xml:space="preserve">
          <source>Update the model for a particular control with a new value.</source>
          <target state="translated">특정 컨트롤의 모델을 새로운 값으로 업데이트하십시오.</target>
        </trans-unit>
        <trans-unit id="559847cfe7989a011f1f7f236cc63d7c5ef1d512" translate="yes" xml:space="preserve">
          <source>Update the product details page to include a &quot;Buy&quot; button, which adds the current product to a list of products managed by a cart service.</source>
          <target state="translated">&quot;구매&quot;단추를 포함하도록 제품 세부 사항 페이지를 업데이트하십시오.이 단추는 현재 제품을 카트 서비스에서 관리하는 제품 목록에 추가합니다.</target>
        </trans-unit>
        <trans-unit id="fc029d79ce7b99ec3a2fca2086322426387609a6" translate="yes" xml:space="preserve">
          <source>Update the product details template to have a &quot;Buy&quot; button that adds the current product to the cart.</source>
          <target state="translated">제품 세부 사항 템플리트를 업데이트하여 현재 제품을 장바구니에 추가하는 &quot;구매&quot;단추를 갖습니다.</target>
        </trans-unit>
        <trans-unit id="ce24781651687073ccf0577b48abbd217ac36903" translate="yes" xml:space="preserve">
          <source>Update the relative path import to the &lt;code&gt;message.service&lt;/code&gt; in the &lt;code&gt;hero.service.ts&lt;/code&gt; file.</source>
          <target state="translated">&lt;code&gt;hero.service.ts&lt;/code&gt; 파일 에서 &lt;code&gt;message.service&lt;/code&gt; 의 상대 경로 가져 오기를 업데이트 하십시오.</target>
        </trans-unit>
        <trans-unit id="203f53a020bfd878e423fc52de5b3578a006bfb8" translate="yes" xml:space="preserve">
          <source>Update the route configuration to lazy load the &lt;code&gt;CrisisCenterModule&lt;/code&gt;. Take the same steps you used to configure &lt;code&gt;AdminModule&lt;/code&gt; for lazy load.</source>
          <target state="translated">&lt;code&gt;CrisisCenterModule&lt;/code&gt; 을 지연로드하도록 경로 구성을 업데이트하십시오 . 지연로드에 대해 &lt;code&gt;AdminModule&lt;/code&gt; 을 구성 할 때 사용한 것과 동일한 단계를 수행하십시오 .</target>
        </trans-unit>
        <trans-unit id="cca7fe187a76a321d42e7e1ba7f157b20dbd5a77" translate="yes" xml:space="preserve">
          <source>Update the shipping component's template to display the shipping types and prices using async pipe:</source>
          <target state="translated">비동기 파이프를 사용하여 운송 유형 및 가격을 표시하도록 운송 구성 요소의 템플리트를 업데이트하십시오.</target>
        </trans-unit>
        <trans-unit id="a357da0cfc27c86f48e17bd313f4e3eece1eed72" translate="yes" xml:space="preserve">
          <source>Update the template file with the following contents:</source>
          <target state="translated">다음 내용으로 템플리트 파일을 업데이트하십시오.</target>
        </trans-unit>
        <trans-unit id="2a9f24f9facab2d3032dfc55184857c8d51349c7" translate="yes" xml:space="preserve">
          <source>Update the template to display product details information inside an &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; 안에 제품 세부 정보를 표시하도록 템플릿을 업데이트하십시오 .</target>
        </trans-unit>
        <trans-unit id="2f41d9ccaa5ca6464fe9e26dcf2fef17ab479d12" translate="yes" xml:space="preserve">
          <source>Update the template to display the strategy service's &lt;code&gt;preloadedModules&lt;/code&gt; array.</source>
          <target state="translated">전략 서비스의 &lt;code&gt;preloadedModules&lt;/code&gt; 배열 을 표시하도록 템플리트를 업데이트하십시오 .</target>
        </trans-unit>
        <trans-unit id="dfba97897cc40bb55207339966a6db50b171b279" translate="yes" xml:space="preserve">
          <source>Update the template with a &lt;a href=&quot;template-syntax#class-binding&quot;&gt;class binding&lt;/a&gt;. The binding adds the &lt;code&gt;selected&lt;/code&gt; CSS class when the comparison returns &lt;code&gt;true&lt;/code&gt; and removes it when &lt;code&gt;false&lt;/code&gt;. Look for it within the repeated &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; tag as shown here:</source>
          <target state="translated">&lt;a href=&quot;template-syntax#class-binding&quot;&gt;클래스 바인딩으로&lt;/a&gt; 템플리트를 업데이트하십시오 . 바인딩 은 비교가 &lt;code&gt;true&lt;/code&gt; 를 반환 하면 &lt;code&gt;selected&lt;/code&gt; CSS 클래스를 추가하고 &lt;code&gt;false&lt;/code&gt; 이면이 를 제거합니다 . 반복 된 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 태그에서 다음과 같이 찾으 십시오.</target>
        </trans-unit>
        <trans-unit id="d296ccbde468f094eb509d5d21a2641f2f39d02b" translate="yes" xml:space="preserve">
          <source>Update the template with a button to simulate a name update. When you click the &lt;strong&gt;Update Name&lt;/strong&gt; button, the value entered in the form control element is reflected as its current value.</source>
          <target state="translated">이름 업데이트를 시뮬레이션하는 버튼으로 템플릿을 업데이트하십시오. &lt;strong&gt;이름 업데이트&lt;/strong&gt; 버튼 을 클릭하면 양식 컨트롤 요소에 입력 된 값이 현재 값으로 반영됩니다.</target>
        </trans-unit>
        <trans-unit id="70bf9b016dd5abd476b3536c1c64aba3fbec12cf" translate="yes" xml:space="preserve">
          <source>Update the template with a header (&quot;Cart&quot;), and use a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; with an &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; to display each of the cart items with its name and price.</source>
          <target state="translated">헤더 ( &quot;Cart&quot;)로 템플리트를 업데이트하고 &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt; 와 함께 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 를 사용하여 각 장바구니 항목의 이름과 가격을 표시하십시오.</target>
        </trans-unit>
        <trans-unit id="9e70ce970e12f27c3c0169130c0f1fea106c9fc1" translate="yes" xml:space="preserve">
          <source>Update the template with a welcome message to the &lt;code&gt;Crisis Center&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Crisis Center&lt;/code&gt; 환영 메시지로 템플릿을 업데이트하십시오 .</target>
        </trans-unit>
        <trans-unit id="5ce647b93fb03bcc71424f45986c72ce1d07ff28" translate="yes" xml:space="preserve">
          <source>UpdateActivatedEvent</source>
          <target state="translated">UpdateActivatedEvent</target>
        </trans-unit>
        <trans-unit id="fd2207341d757f6ad0dc82194a9f23e501154bfa" translate="yes" xml:space="preserve">
          <source>UpdateAvailableEvent</source>
          <target state="translated">UpdateAvailableEvent</target>
        </trans-unit>
        <trans-unit id="30827e80f2dab0755e1aab3fdcd5f8e852c80f1e" translate="yes" xml:space="preserve">
          <source>Updates happen in the background, relatively quickly after changes are published. The previous version of the application is served until an update is installed and ready.</source>
          <target state="translated">변경 사항이 게시 된 후 비교적 빠르게 업데이트가 백그라운드에서 발생합니다. 이전 버전의 응용 프로그램은 업데이트가 설치되고 준비 될 때까지 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="0b4d2f63f515bde39286e6b3ccfa79609ea6eeda" translate="yes" xml:space="preserve">
          <source>Updates the &lt;code&gt;index.html&lt;/code&gt; file:</source>
          <target state="translated">&lt;code&gt;index.html&lt;/code&gt; 파일을 업데이트 합니다.</target>
        </trans-unit>
        <trans-unit id="b23869ff3d3ab319301b5274bca98483d206fab5" translate="yes" xml:space="preserve">
          <source>Updates the stored data of the query list, and resets the &lt;code&gt;dirty&lt;/code&gt; flag to &lt;code&gt;false&lt;/code&gt;, so that on change detection, it will not notify of changes to the queries, unless a new change occurs.</source>
          <target state="translated">쿼리 목록의 저장된 데이터를 업데이트하고 &lt;code&gt;dirty&lt;/code&gt; 플래그를 &lt;code&gt;false&lt;/code&gt; 로 재설정하여 변경 감지시 새 변경이 발생하지 않는 한 쿼리 변경 사항을 알리지 않습니다.</target>
        </trans-unit>
        <trans-unit id="53d4b930a68894d016ef42936f1cf3d3913d5484" translate="yes" xml:space="preserve">
          <source>Updates your application and its dependencies. See &lt;a href=&quot;https://update.angular.io/&quot;&gt;https://update.angular.io/&lt;/a&gt;</source>
          <target state="translated">응용 프로그램 및 해당 종속성을 업데이트합니다. &lt;a href=&quot;https://update.angular.io/&quot;&gt;https://update.angular.io/를&lt;/a&gt; 참조 하십시오</target>
        </trans-unit>
        <trans-unit id="4c5646c8307bd85d09df30c3b3db3a0d18ae2f19" translate="yes" xml:space="preserve">
          <source>Updating headers</source>
          <target state="translated">헤더 업데이트</target>
        </trans-unit>
        <trans-unit id="3bfbada4728f2e043b7771479883f3fc79ae26f5" translate="yes" xml:space="preserve">
          <source>Updating libraries</source>
          <target state="translated">라이브러리 업데이트</target>
        </trans-unit>
        <trans-unit id="ea82e134fbd8a260e992aef7287a5680172c618b" translate="yes" xml:space="preserve">
          <source>Updating to version 8 with &lt;a href=&quot;cli/update&quot;&gt;&lt;code&gt;ng update&lt;/code&gt;&lt;/a&gt; changes this automatically.</source>
          <target state="translated">&lt;a href=&quot;cli/update&quot;&gt; &lt;code&gt;ng update&lt;/code&gt; &lt;/a&gt; 로 버전 8로 업데이트 하면 자동으로 변경됩니다.</target>
        </trans-unit>
        <trans-unit id="2fe4aa4b0674fef349deee21474a9e07ec8e067d" translate="yes" xml:space="preserve">
          <source>Updating your application in the browser</source>
          <target state="translated">브라우저에서 응용 프로그램 업데이트</target>
        </trans-unit>
        <trans-unit id="fdcac3e04bfcd5fd48d4d42aa4876e07971bf792" translate="yes" xml:space="preserve">
          <source>Updating your environment and apps</source>
          <target state="translated">환경 및 앱 업데이트</target>
        </trans-unit>
        <trans-unit id="a4cf3923e47fcb8de57d182bf42a0b41fb5e9032" translate="yes" xml:space="preserve">
          <source>Upgrade the AngularJS components to Angular components next. Do it one component at a time while still keeping the application in hybrid mode. As you make these conversions, you'll also define your first Angular &lt;em&gt;pipes&lt;/em&gt;.</source>
          <target state="translated">다음으로 AngularJS 컴포넌트를 Angular 컴포넌트로 업그레이드하십시오. 애플리케이션을 여전히 하이브리드 모드로 유지하면서 한 번에 하나의 컴포넌트 만 수행하십시오. 이러한 변환을 수행 할 때 첫 번째 각도 &lt;em&gt;파이프&lt;/em&gt; 도 정의합니다 .</target>
        </trans-unit>
        <trans-unit id="24f30a918c96ec7f78d6de2229e4e45721a78e8d" translate="yes" xml:space="preserve">
          <source>UpgradeAdapter</source>
          <target state="translated">UpgradeAdapter</target>
        </trans-unit>
        <trans-unit id="349a24b81f2702737e72ac44c56d5eea5df09232" translate="yes" xml:space="preserve">
          <source>UpgradeAdapterRef</source>
          <target state="translated">UpgradeAdapterRef</target>
        </trans-unit>
        <trans-unit id="3472325c45449a53cfbeda85e9dc64ed999c053e" translate="yes" xml:space="preserve">
          <source>UpgradeComponent</source>
          <target state="translated">UpgradeComponent</target>
        </trans-unit>
        <trans-unit id="f957777c36883bb04b88b1a75eabd9d4e87143f7" translate="yes" xml:space="preserve">
          <source>UpgradeModule</source>
          <target state="translated">UpgradeModule</target>
        </trans-unit>
        <trans-unit id="dc294e605816722937474ceca1ecd6db86bccf84" translate="yes" xml:space="preserve">
          <source>Upgraded components are Angular &lt;strong&gt;directives&lt;/strong&gt;, instead of &lt;strong&gt;components&lt;/strong&gt;, because Angular is unaware that AngularJS will create elements under it. As far as Angular knows, the upgraded component is just a directive - a tag - and Angular doesn't have to concern itself with its children.</source>
          <target state="translated">업그레이드 된 구성 요소는 각도입니다 &lt;strong&gt;지침&lt;/strong&gt; 대신, &lt;strong&gt;구성 요소&lt;/strong&gt; 각도가 AngularJS와는 그 아래 요소를 만들 것이라는 점을 인식하지 못하기 때문에. Angular가 아는 한 업그레이드 된 구성 요소는 지시문 일 뿐이며 태그입니다. Angular는 자식과 관련이 없습니다.</target>
        </trans-unit>
        <trans-unit id="4bcf3358a1532605c1d102caf461fe6695881d98" translate="yes" xml:space="preserve">
          <source>Upgrading Components</source>
          <target state="translated">구성 요소 업그레이드</target>
        </trans-unit>
        <trans-unit id="3de37c097e347898a6c3fcca7012b78cb95fe583" translate="yes" xml:space="preserve">
          <source>Upgrading an AngularJS service</source>
          <target state="translated">AngularJS 서비스 업그레이드</target>
        </trans-unit>
        <trans-unit id="8ad98e9741d8e1a96c0b693a2a2c1e769fe850a8" translate="yes" xml:space="preserve">
          <source>Upgrading for Performance</source>
          <target state="translated">성능 업그레이드</target>
        </trans-unit>
        <trans-unit id="f49e3b37a91d97499c2632816643696c225e6f8f" translate="yes" xml:space="preserve">
          <source>Upgrading from AngularJS to Angular</source>
          <target state="translated">AngularJS에서 Angular로 업그레이드</target>
        </trans-unit>
        <trans-unit id="a5a3a352431f58bbbf100b500b3c0596ab226f27" translate="yes" xml:space="preserve">
          <source>Upgrading the Phone service</source>
          <target state="translated">전화 서비스 업그레이드</target>
        </trans-unit>
        <trans-unit id="be955d520b7fdc0e2bf8afcda324203e51725d6d" translate="yes" xml:space="preserve">
          <source>Upgrading with &lt;code&gt;ngUpgrade&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;ngUpgrade&lt;/code&gt; 로 업그레이드</target>
        </trans-unit>
        <trans-unit id="f8522315486f45748eda6e72566dff17c151bd49" translate="yes" xml:space="preserve">
          <source>Upgrading with ngUpgrade</source>
          <target state="translated">ngUpgrade로 업그레이드</target>
        </trans-unit>
        <trans-unit id="233e49b5606ac48bdee62d2e7bac7f481dc3f94b" translate="yes" xml:space="preserve">
          <source>UpperCamelCase (or PascalCase): Class names, including classes that define components, interfaces, NgModules, directives, and pipes, Upper camel case uses uppercase on the first letter of the item. For example, &quot;HeroListComponent&quot;.</source>
          <target state="translated">UpperCamelCase (또는 PascalCase) : 컴포넌트, 인터페이스, NgModules, 지시문 및 파이프를 정의하는 클래스를 포함한 클래스 이름, 대문자 낙타 케이스는 항목의 첫 문자에 대문자를 사용합니다. 예를 들어 &quot;HeroListComponent&quot;입니다.</target>
        </trans-unit>
        <trans-unit id="155c412fcd3971aa03fafff2bacb8bb9adc5883c" translate="yes" xml:space="preserve">
          <source>UpperCasePipe</source>
          <target state="translated">UpperCasePipe</target>
        </trans-unit>
        <trans-unit id="71dd69965f2486999c211c68072c41db5ae84baf" translate="yes" xml:space="preserve">
          <source>UrlCodec</source>
          <target state="translated">UrlCodec</target>
        </trans-unit>
        <trans-unit id="68948d1dadddf95bc54d96cecbf392ae48e8d326" translate="yes" xml:space="preserve">
          <source>UrlHandlingStrategy</source>
          <target state="translated">UrlHandlingStrategy</target>
        </trans-unit>
        <trans-unit id="16cc40206f5a097848430a6c434c805355e9962a" translate="yes" xml:space="preserve">
          <source>UrlMatchResult</source>
          <target state="translated">UrlMatchResult</target>
        </trans-unit>
        <trans-unit id="b4a9ef4257a8681d0b8b798a42c3019be0c1e3e7" translate="yes" xml:space="preserve">
          <source>UrlMatcher</source>
          <target state="translated">UrlMatcher</target>
        </trans-unit>
        <trans-unit id="cb582a3934e09bbb5eff19851f7f334c90041133" translate="yes" xml:space="preserve">
          <source>UrlSegment</source>
          <target state="translated">UrlSegment</target>
        </trans-unit>
        <trans-unit id="5c83abe9807fc6933e00e92449e0482f3644b9ae" translate="yes" xml:space="preserve">
          <source>UrlSegmentGroup</source>
          <target state="translated">UrlSegmentGroup</target>
        </trans-unit>
        <trans-unit id="d13f52dbbad2d8b754750f29699588763707bcf7" translate="yes" xml:space="preserve">
          <source>UrlSerializer</source>
          <target state="translated">UrlSerializer</target>
        </trans-unit>
        <trans-unit id="8f00a7f728d114764c445a5f40b5c821396502ce" translate="yes" xml:space="preserve">
          <source>UrlTree</source>
          <target state="translated">UrlTree</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
