<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="angular">
    <body>
      <group id="angular">
        <trans-unit id="9f3dc28bd501a5350cf9ed9793b9c5dd2dcfef70" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;../guide/elements&quot;&gt;Angular Elements Overview&lt;/a&gt;.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;../guide/elements&quot;&gt;각도 요소 개요를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="3da5dc400360468fb0e1202b31268e48759f8137" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;../guide/universal&quot;&gt;Server-side Rendering: An intro to Angular Universal&lt;/a&gt;.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;../guide/universal&quot;&gt;서버 측 렌더링 : Angular Universal 소개를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="42ffd5f9d2a4e70c577c23245862d32768a8e840" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;ajs-quick-reference#filters-pipes&quot;&gt;Filters/pipes&lt;/a&gt; below.</source>
          <target state="translated">자세한 내용은 아래의 &lt;a href=&quot;ajs-quick-reference#filters-pipes&quot;&gt;필터 / 파이프를&lt;/a&gt; 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="74bb82b6fb25ae18e173857402063be64c8b3ff1" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;architecture#components&quot;&gt;Architecture Overview&lt;/a&gt;.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;architecture#components&quot;&gt;아키텍처 개요를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="f3f7da9f4b2ed38024f3075baf394b62bfebf75c" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;component-styles#deprecated-deep--and-ng-deep&quot;&gt;/deep/, &amp;gt;&amp;gt;&amp;gt;, and ::ng-deep&lt;/a&gt; in the Component Styles guide.</source>
          <target state="translated">자세한 내용 은 구성 요소 스타일 안내서에서 &lt;a href=&quot;component-styles#deprecated-deep--and-ng-deep&quot;&gt;/ deep /, &amp;gt;&amp;gt;&amp;gt; 및 :: ng-deep&lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="910e6c9f9471fae61f362d6475c1608582103bfa" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;entry-components&quot;&gt;Entry Components&lt;/a&gt;.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;entry-components&quot;&gt;입력 구성 요소를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="647d992d00106f995eb13d466d01fe417cfe65cf" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;feature-modules&quot;&gt;Feature Modules&lt;/a&gt; and &lt;a href=&quot;module-types&quot;&gt;Module Types&lt;/a&gt;</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;feature-modules&quot;&gt;기능 모듈&lt;/a&gt; 및 &lt;a href=&quot;module-types&quot;&gt;모듈 유형을&lt;/a&gt; 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="e65514d22eada34ea7b89a6ac9d12c8e55cfaada" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;file-structure&quot;&gt;Project File Structure&lt;/a&gt;.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;file-structure&quot;&gt;프로젝트 파일 구조를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="1f9218549d8779c7011a94db6914ce5a34a35b02" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;file-structure&quot;&gt;Workspace and Project File Structure&lt;/a&gt;.</source>
          <target state="translated">자세한 정보는 &lt;a href=&quot;file-structure&quot;&gt;작업 공간 및 프로젝트 파일 구조를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="88a7c699d9f401cabad96d14c386c540d56f272c" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;file-structure&quot;&gt;Workspace and project file structure&lt;/a&gt;.</source>
          <target state="translated">자세한 정보는 &lt;a href=&quot;file-structure&quot;&gt;작업 공간 및 프로젝트 파일 구조를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="61925bb6327cd5e1406c0ce1f5c086e01c47cf5a" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;form-validation&quot;&gt;Form Validation&lt;/a&gt;.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;form-validation&quot;&gt;양식 유효성 검사를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="3759746ed1e1fa5e80f65859aa178d1f09e1ad1e" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;https://autoprefixer.github.io/&quot;&gt;Autoprefixer documentation&lt;/a&gt;.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;https://autoprefixer.github.io/&quot;&gt;자동 접두사 설명서를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="bd8ac232ee0667f9ad348999ea89abd8c513a96f" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;ngmodule-vs-jsmodule&quot;&gt;JavaScript Modules vs. NgModules&lt;/a&gt;.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;ngmodule-vs-jsmodule&quot;&gt;JavaScript 모듈과 NgModules를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="ffc85b5be8ec62000eb01feeeeb30858b38867de" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;ngmodules&quot;&gt;NgModules&lt;/a&gt;.</source>
          <target state="translated">자세한 정보는 &lt;a href=&quot;ngmodules&quot;&gt;NgModules를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="b3bacaa09ba02cc1ce65095dcd8b2994f774ff5a" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;router&quot;&gt;Routing and Navigation&lt;/a&gt;.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;router&quot;&gt;라우팅 및 탐색을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="28d7da8c96ca8c10b7825011250effd25ef6ac50" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;schematics&quot;&gt;Schematics&lt;/a&gt; and &lt;a href=&quot;creating-libraries#integrating-with-the-cli&quot;&gt;Integrating Libraries with the CLI&lt;/a&gt;.</source>
          <target state="translated">자세한 정보는 &lt;a href=&quot;schematics&quot;&gt;회로도&lt;/a&gt; 및 &lt;a href=&quot;creating-libraries#integrating-with-the-cli&quot;&gt;라이브러리와 CLI 통합을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="faf78994c8191e68393eb8590f1621ac1a34d996" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;service-worker-config#assetgroups&quot;&gt;Service Worker Configuration&lt;/a&gt;.</source>
          <target state="translated">자세한 정보는 &lt;a href=&quot;service-worker-config#assetgroups&quot;&gt;서비스 워커 구성을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="a3cb457dd4fe6b961a9c5d6d0ef8b39b976b5d6f" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;structural-directives&quot;&gt;Structural Directives&lt;/a&gt;.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;structural-directives&quot;&gt;구조 지시문을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="e72ee8c0272a1b8689787af6c58eaa81e5346b14" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;template-syntax#ngSwitch&quot;&gt;The NgSwitch directives&lt;/a&gt; section of the &lt;a href=&quot;template-syntax&quot;&gt;Template Syntax&lt;/a&gt; page.</source>
          <target state="translated">자세한 내용 은 &lt;a href=&quot;template-syntax&quot;&gt;템플릿 구문&lt;/a&gt; 페이지 &lt;a href=&quot;template-syntax#ngSwitch&quot;&gt;의 NgSwitch 지시문&lt;/a&gt; 섹션을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="d8f1d4de7f1fc3885fd915873481df8c0921c29a" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;workspace-config&quot;&gt;Workspace Configuration&lt;/a&gt;.</source>
          <target state="translated">자세한 정보는 &lt;a href=&quot;workspace-config&quot;&gt;작업 공간 구성을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="feacd759d802327f6bf7203cee38b5e8d2c13c24" translate="yes" xml:space="preserve">
          <source>For more information, see Web Component documentation for &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Creating_and_triggering_events#Creating_custom_events&quot;&gt;Creating custom events&lt;/a&gt;.</source>
          <target state="translated">자세한 정보는 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Creating_and_triggering_events#Creating_custom_events&quot;&gt;사용자 정의 이벤트 작성을&lt;/a&gt; 위한 웹 컴포넌트 문서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="c8d5851cb623be46e85825bee69058823d2cf024" translate="yes" xml:space="preserve">
          <source>For more information, see the &lt;a href=&quot;architecture#components&quot;&gt;Components&lt;/a&gt; section of the &lt;a href=&quot;architecture&quot;&gt;Architecture Overview&lt;/a&gt; page.</source>
          <target state="translated">자세한 내용 은 &lt;a href=&quot;architecture&quot;&gt;아키텍처 개요&lt;/a&gt; 페이지 의 &lt;a href=&quot;architecture#components&quot;&gt;구성 요소&lt;/a&gt; 섹션을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="9562f2baea93ad760f4f07698ee700193ef683f3" translate="yes" xml:space="preserve">
          <source>For more information, see the &lt;a href=&quot;architecture#dependency-injection&quot;&gt;Dependency injection&lt;/a&gt; section of the &lt;a href=&quot;architecture&quot;&gt;Architecture Overview&lt;/a&gt;.</source>
          <target state="translated">자세한 내용 은 &lt;a href=&quot;architecture&quot;&gt;아키텍처 개요&lt;/a&gt; 의 &lt;a href=&quot;architecture#dependency-injection&quot;&gt;종속성 주입&lt;/a&gt; 섹션을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="4e897a0d9749db6b4e9a381af9d22e7733f38b78" translate="yes" xml:space="preserve">
          <source>For more information, see the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API#Interfaces&quot;&gt;MDN Interfaces documentation&lt;/a&gt; which has API docs for all the standard DOM elements and their properties. Comparing the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td&quot;&gt;&lt;code&gt;&amp;lt;td&amp;gt;&lt;/code&gt; attributes&lt;/a&gt; attributes to the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCellElement&quot;&gt;&lt;code&gt;&amp;lt;td&amp;gt;&lt;/code&gt; properties&lt;/a&gt; provides a helpful example for differentiation. In particular, you can navigate from the attributes page to the properties via &quot;DOM interface&quot; link, and navigate the inheritance hierarchy up to &lt;code&gt;HTMLTableCellElement&lt;/code&gt;.</source>
          <target state="translated">자세한 내용 은 모든 표준 DOM 요소 및 해당 속성에 대한 API 문서가 있는 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API#Interfaces&quot;&gt;MDN 인터페이스 설명서&lt;/a&gt; 를 참조하십시오 . 비교 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td&quot;&gt; &lt;code&gt;&amp;lt;td&amp;gt;&lt;/code&gt; 속성을&lt;/a&gt; 받는 특성을 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCellElement&quot;&gt; &lt;code&gt;&amp;lt;td&amp;gt;&lt;/code&gt; 속성은&lt;/a&gt; 차별화를위한 유용한 예제를 제공합니다. 특히, &quot;DOM 인터페이스&quot;링크를 통해 속성 페이지에서 특성으로 탐색하고 상속 계층을 &lt;code&gt;HTMLTableCellElement&lt;/code&gt; 까지 탐색 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3cc2dd3553dd60cfafd23d0f7c3bcbdbcd65cd08" translate="yes" xml:space="preserve">
          <source>For more information, see the &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/tsconfig-json.html&quot;&gt;TypeScript Handbook&lt;/a&gt;.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/tsconfig-json.html&quot;&gt;TypeScript Handbook을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="e41e0a5e60e15529ca5490506b25bc9d5d510d6f" translate="yes" xml:space="preserve">
          <source>For more information, see the &lt;a href=&quot;template-syntax#event-binding&quot;&gt;Event binding&lt;/a&gt; section of the &lt;a href=&quot;template-syntax&quot;&gt;Template Syntax&lt;/a&gt; page.</source>
          <target state="translated">자세한 내용 은 &lt;a href=&quot;template-syntax&quot;&gt;템플릿 구문&lt;/a&gt; 페이지 의 &lt;a href=&quot;template-syntax#event-binding&quot;&gt;이벤트 바인딩&lt;/a&gt; 섹션을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="d74a1bd0b2c736fe8616be8256dd3c4c3aff5eb0" translate="yes" xml:space="preserve">
          <source>For more information, see the &lt;a href=&quot;template-syntax#interpolation&quot;&gt;Interpolation&lt;/a&gt; section of the &lt;a href=&quot;template-syntax&quot;&gt;Template Syntax&lt;/a&gt; page.</source>
          <target state="translated">자세한 내용 은 &lt;a href=&quot;template-syntax&quot;&gt;템플릿 구문&lt;/a&gt; 페이지 의 &lt;a href=&quot;template-syntax#interpolation&quot;&gt;보간&lt;/a&gt; 섹션을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="f81eb224215358882f713669daaa0a505a0494b1" translate="yes" xml:space="preserve">
          <source>For more information, see the &lt;a href=&quot;template-syntax#microsyntax&quot;&gt;ngFor micro-syntax&lt;/a&gt; section of the &lt;a href=&quot;template-syntax&quot;&gt;Template Syntax&lt;/a&gt; page.</source>
          <target state="translated">자세한 내용 은 &lt;a href=&quot;template-syntax&quot;&gt;템플릿 구문&lt;/a&gt; 페이지 의 &lt;a href=&quot;template-syntax#microsyntax&quot;&gt;ngFor 마이크로 구문&lt;/a&gt; 섹션을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="f41491a9bc619bc06a138dc6be2c2f60b631649c" translate="yes" xml:space="preserve">
          <source>For more information, see the XSSI section of this &lt;a href=&quot;https://security.googleblog.com/2011/05/website-security-for-webmasters.html&quot;&gt;Google web security blog post&lt;/a&gt;.</source>
          <target state="translated">자세한 내용은이 &lt;a href=&quot;https://security.googleblog.com/2011/05/website-security-for-webmasters.html&quot;&gt;Google 웹 보안 블로그 게시물&lt;/a&gt; 의 XSSI 섹션을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="0b3a041e7e67d85d817c91582c81d8e8a9f22482" translate="yes" xml:space="preserve">
          <source>For more information, see the usage notes for &lt;a href=&quot;../api/forms/formcontroldirective#use-with-ngmodel&quot;&gt;&lt;code&gt;FormControlDirective&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../api/forms/formcontrolname#use-with-ngmodel&quot;&gt;&lt;code&gt;FormControlName&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;../api/forms/formcontroldirective#use-with-ngmodel&quot;&gt; &lt;code&gt;FormControlDirective&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../api/forms/formcontrolname#use-with-ngmodel&quot;&gt; &lt;code&gt;FormControlName&lt;/code&gt; &lt;/a&gt; 의 사용 정보를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="fb1b9eb393e6ee99baf5d52bbb3bbc1d37842c77" translate="yes" xml:space="preserve">
          <source>For more on NgModules you're likely to see frequently in apps, see &lt;a href=&quot;frequent-ngmodules&quot;&gt;Frequently Used Modules&lt;/a&gt;.</source>
          <target state="translated">NgModules에 대한 자세한 내용은 앱에서 &lt;a href=&quot;frequent-ngmodules&quot;&gt;자주&lt;/a&gt; 볼 수 있습니다 ( 자주 사용하는 모듈)를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="c7e4611ebab16c5cdd03b3e589a81a8f80eb9350" translate="yes" xml:space="preserve">
          <source>For more on form validation, visit the &lt;a href=&quot;form-validation&quot;&gt;Form Validation&lt;/a&gt; guide.</source>
          <target state="translated">양식 검증에 대한 자세한 내용은 &lt;a href=&quot;form-validation&quot;&gt;양식 검증&lt;/a&gt; 안내서를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="666e64d5996e9b26f42c2196557076d536186936" translate="yes" xml:space="preserve">
          <source>For more on how to use two-way binding in forms, see Angular &lt;a href=&quot;template-syntax#ngModel&quot;&gt;NgModel&lt;/a&gt;.</source>
          <target state="translated">양식에서 양방향 바인딩을 사용하는 방법에 대한 자세한 내용은 Angular &lt;a href=&quot;template-syntax#ngModel&quot;&gt;NgModel을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="809ad89220646ba891d89d96783aa3e684e961d1" translate="yes" xml:space="preserve">
          <source>For more on the design considerations and intentions, see &lt;a href=&quot;https://github.com/angular/vscode-ng-language-service/wiki/Design&quot;&gt;design documentation here&lt;/a&gt;.</source>
          <target state="translated">디자인 고려 사항 및 의도에 대한 자세한 내용은 &lt;a href=&quot;https://github.com/angular/vscode-ng-language-service/wiki/Design&quot;&gt;여기에서 디자인 설명서를&lt;/a&gt; 참조 하십시오 .</target>
        </trans-unit>
        <trans-unit id="f278974e8aa6767eefc9593cf1e0b5499272b44b" translate="yes" xml:space="preserve">
          <source>For more usage information, see the &lt;a href=&quot;../guide/service-worker-intro&quot;&gt;Service Workers&lt;/a&gt; guide.</source>
          <target state="translated">자세한 사용법은 &lt;a href=&quot;../guide/service-worker-intro&quot;&gt;Service Workers&lt;/a&gt; 안내서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="ab92685c5e50a5b9a7e3884b2e99d733f6442437" translate="yes" xml:space="preserve">
          <source>For now, focus on &lt;em&gt;Barry&lt;/em&gt;'s constructor.</source>
          <target state="translated">지금은 &lt;em&gt;Barry&lt;/em&gt; 의 생성자 에 중점을 둡니다 .</target>
        </trans-unit>
        <trans-unit id="59100ae08d659db33b88f25209e8830fe8afa97e" translate="yes" xml:space="preserve">
          <source>For one thing, TypeScript is a superset of ES2015. Any app that has previously been written in ES5 - like the PhoneCat example has - can with TypeScript start incorporating all of the JavaScript features that are new to ES2015. These include things like &lt;code&gt;let&lt;/code&gt;s and &lt;code&gt;const&lt;/code&gt;s, arrow functions, default function parameters, and destructuring assignments.</source>
          <target state="translated">우선 TypeScript는 ES2015의 상위 집합입니다. PhoneCat 예제와 같이 이전에 ES5로 작성된 모든 앱은 TypeScript를 사용하여 ES2015에 새로 도입 된 모든 JavaScript 기능을 통합 할 수 있습니다. 여기에는 &lt;code&gt;let&lt;/code&gt; 및 &lt;code&gt;const&lt;/code&gt; , 화살표 기능, 기본 기능 매개 변수 및 할당 지정 취소 와 같은 항목이 포함 됩니다.</target>
        </trans-unit>
        <trans-unit id="f03c29e27c6c18bf79682cff783ba6a44d092067" translate="yes" xml:space="preserve">
          <source>For our example builder, we expect the &lt;code&gt;options&lt;/code&gt; value to be a &lt;code&gt;JsonObject&lt;/code&gt; with two keys: a &lt;code&gt;command&lt;/code&gt; that is a string, and an &lt;code&gt;args&lt;/code&gt; array of string values.</source>
          <target state="translated">예제 빌더의 경우 &lt;code&gt;options&lt;/code&gt; 값 은 두 개의 키 ( 문자열 인 &lt;code&gt;command&lt;/code&gt; 및 문자열 값 의 &lt;code&gt;args&lt;/code&gt; 배열) 가있는 &lt;code&gt;JsonObject&lt;/code&gt; 가 될 것으로 예상 합니다.</target>
        </trans-unit>
        <trans-unit id="56f7c93c7f59e5f9168a4708eb3d38dde1a88f3d" translate="yes" xml:space="preserve">
          <source>For performance reasons, no comparable pipe exists in Angular. Do all your filtering in the component. If you need the same filtering code in several templates, consider building a custom pipe.</source>
          <target state="translated">성능상의 이유로 Angular에는 유사한 파이프가 없습니다. 구성 요소에서 모든 필터링을 수행하십시오. 여러 템플릿에 동일한 필터링 코드가 필요한 경우 사용자 지정 파이프를 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="b53efe89cb24b2f51ff65079bc39c73f64f531fe" translate="yes" xml:space="preserve">
          <source>For performance reasons, no comparable pipe exists in Angular. Instead, use component code to order or sort results. If you need the same ordering or sorting code in several templates, consider building a custom pipe.</source>
          <target state="translated">성능상의 이유로 Angular에는 유사한 파이프가 없습니다. 대신 구성 요소 코드를 사용하여 결과를 정렬하거나 정렬하십시오. 여러 템플릿에서 동일한 주문 또는 정렬 코드가 필요한 경우 사용자 지정 파이프를 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="5068e7ff50c8b38b8c331c0d5f43808c17db59a9" translate="yes" xml:space="preserve">
          <source>For performance reasons, the Stackblitz does not start right away. The reader sees an image instead. Clicking the image starts the sometimes-slow process of launching the embedded Stackblitz within an iframe on the page.</source>
          <target state="translated">성능상의 이유로 Stackblitz는 바로 시작되지 않습니다. 독자는 대신 이미지를 봅니다. 이미지를 클릭하면 페이지의 iframe 내에서 임베디드 Stackblitz를 시작하는 느리게 진행되는 프로세스가 시작됩니다.</target>
        </trans-unit>
        <trans-unit id="4960e870d39261ecd536d1eac263c0f8fe1003c5" translate="yes" xml:space="preserve">
          <source>For positional properties with a numeric value, define a unit by providing the value as a string, in quotes, with the appropriate suffix:</source>
          <target state="translated">숫자 값이있는 위치 특성의 경우 적절한 접미어를 사용하여 값을 따옴표로 묶은 문자열로 제공하여 단위를 정의하십시오.</target>
        </trans-unit>
        <trans-unit id="4bcb0ca83da156d6555dbcdf2d6aae37ce332bed" translate="yes" xml:space="preserve">
          <source>For production apps you want to load the smallest code possible. The code should contain only the classes that you actually need and exclude components that are never used. For this reason, the Angular compiler only generates code for components which are reachable from the &lt;code&gt;entryComponents&lt;/code&gt;; This means that adding more references to &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule#declarations&quot;&gt;NgModule.declarations&lt;/a&gt;&lt;/code&gt; does not imply that they will necessarily be included in the final bundle.</source>
          <target state="translated">프로덕션 앱의 경우 가능한 가장 작은 코드를로드하려고합니다. 코드에는 실제로 필요한 클래스 만 포함해야하며 절대 사용되지 않은 구성 요소는 제외해야합니다. 이러한 이유로 Angular 컴파일러는 &lt;code&gt;entryComponents&lt;/code&gt; 에서 접근 할 수있는 컴포넌트에 대한 코드 만 생성합니다 . 이것은 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule#declarations&quot;&gt;NgModule.declarations&lt;/a&gt;&lt;/code&gt; 대한 참조를 더 추가 한다고해서 반드시 최종 번들에 포함된다는 것을 의미하지는 않습니다.</target>
        </trans-unit>
        <trans-unit id="e270ff1b337da62176ea2fcde372a35480e5c1ae" translate="yes" xml:space="preserve">
          <source>For production builds, you define a separate &lt;code&gt;production-fr&lt;/code&gt; build configuration in the CLI configuration file, &lt;code&gt;angular.json&lt;/code&gt;.</source>
          <target state="translated">프로덕션 빌드의 경우 CLI 구성 파일 &lt;code&gt;angular.json&lt;/code&gt; 에 별도의 &lt;code&gt;production-fr&lt;/code&gt; 빌드 구성 을 정의하십시오 .</target>
        </trans-unit>
        <trans-unit id="8c9d8157e0abf506f44806175c23d88246ace003" translate="yes" xml:space="preserve">
          <source>For resources already in the cache, the &lt;code&gt;updateMode&lt;/code&gt; determines the caching behavior when a new version of the app is discovered. Any resources in the group that have changed since the previous version are updated in accordance with &lt;code&gt;updateMode&lt;/code&gt;.</source>
          <target state="translated">캐시에 이미있는 리소스의 경우 &lt;code&gt;updateMode&lt;/code&gt; 는 새 버전의 앱이 검색 될 때 캐싱 동작을 결정합니다. 이전 버전 이후 변경된 그룹의 모든 자원은 &lt;code&gt;updateMode&lt;/code&gt; 에 따라 업데이트됩니다 .</target>
        </trans-unit>
        <trans-unit id="d3769e9ead05944db64dff6a941316a57ddc27ca" translate="yes" xml:space="preserve">
          <source>For simple updates, the CLI command &lt;a href=&quot;cli/update&quot;&gt;&lt;code&gt;ng update&lt;/code&gt;&lt;/a&gt; is all you need. Without additional arguments, &lt;a href=&quot;cli/update&quot;&gt;&lt;code&gt;ng update&lt;/code&gt;&lt;/a&gt; lists the updates that are available to you and provides recommended steps to update your application to the most current version.</source>
          <target state="translated">간단한 업데이트의 경우 CLI 명령 &lt;a href=&quot;cli/update&quot;&gt; &lt;code&gt;ng update&lt;/code&gt; &lt;/a&gt; 만 있으면됩니다. 추가 인수없이 &lt;a href=&quot;cli/update&quot;&gt; &lt;code&gt;ng update&lt;/code&gt; &lt;/a&gt; 는 사용 가능한 업데이트를 나열하고 응용 프로그램을 최신 버전으로 업데이트하기위한 권장 단계를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="898c1b8e7d6b6eb8479ce9ce66a1cae8125ad696" translate="yes" xml:space="preserve">
          <source>For step-by-step instructions on how to update to the latest Angular release, use the interactive update guide at &lt;a href=&quot;https://update.angular.io&quot;&gt;update.angular.io&lt;/a&gt;.</source>
          <target state="translated">최신 Angular 릴리스로 업데이트하는 방법에 대한 단계별 지침은 &lt;a href=&quot;https://update.angular.io&quot;&gt;update.angular.io&lt;/a&gt; 의 대화식 업데이트 안내서를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="e7e0f32120f476265451193f4e74a60c10bf9309" translate="yes" xml:space="preserve">
          <source>For step-by-step instructions, continue with this section. If you can set it up on your own, skip ahead to &lt;a href=&quot;hierarchical-dependency-injection#modify-visibility&quot;&gt;Modifying service availability&lt;/a&gt;.</source>
          <target state="translated">단계별 지침은이 섹션을 계속하십시오. 직접 설정할 수 있으면 &lt;a href=&quot;hierarchical-dependency-injection#modify-visibility&quot;&gt;서비스 가용성 수정으로&lt;/a&gt; 건너 뜁니다 .</target>
        </trans-unit>
        <trans-unit id="85bc8ff1d58fc1fdd8cbbba3a9815fc69137efd2" translate="yes" xml:space="preserve">
          <source>For submodules and lazy loaded submodules the module should be used as follows:</source>
          <target state="translated">하위 모듈 및 지연로드 된 하위 모듈의 경우 다음과 같이 모듈을 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="90f37f88122e994465e881ad8b0b5425c391046f" translate="yes" xml:space="preserve">
          <source>For terminal input and output, put the content between &lt;code&gt;&amp;lt;code-example&amp;gt;&lt;/code&gt; tags, set the CSS class to &lt;code&gt;code-shell&lt;/code&gt;, and set the language attribute to &lt;code&gt;sh&lt;/code&gt; as in this example.</source>
          <target state="translated">터미널 입력 및 출력의 경우 &lt;code&gt;&amp;lt;code-example&amp;gt;&lt;/code&gt; 태그 사이에 내용을 넣고 CSS 클래스를 &lt;code&gt;code-shell&lt;/code&gt; 로 설정하고 language 속성을 이 예에서와 같이 &lt;code&gt;sh&lt;/code&gt; 로 설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="67f3b4a3f79c70fd90d2e8b510bd8b8154ea4632" translate="yes" xml:space="preserve">
          <source>For the &lt;code&gt;@routeAnimation&lt;/code&gt; transitions to key off states, you'll need to provide it with the &lt;code&gt;data&lt;/code&gt; from the &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt;. The &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; is exposed as an &lt;code&gt;outlet&lt;/code&gt; template variable, so you bind a reference to the router outlet. A variable of &lt;code&gt;routerOutlet&lt;/code&gt; is an ideal choice.</source>
          <target state="translated">를 들어 &lt;code&gt;@routeAnimation&lt;/code&gt; 의 오프 상태 키 전환, 당신은 그것을 제공해야합니다 &lt;code&gt;data&lt;/code&gt; 로부터 &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; . &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; 은 int로서 노출되는 &lt;code&gt;outlet&lt;/code&gt; 가 출구 라우터에 대한 참조를 결합하므로, 템플릿 변수. &lt;code&gt;routerOutlet&lt;/code&gt; 의 변수 는 이상적인 선택입니다.</target>
        </trans-unit>
        <trans-unit id="d28868014417fb01c0acf4d2adc0344d6a4f70c1" translate="yes" xml:space="preserve">
          <source>For the DOM this means using modern &lt;a href=&quot;https://w3c.github.io/webcomponents/spec/shadow/&quot;&gt;Shadow DOM&lt;/a&gt; and creating a ShadowRoot for Component's Host Element.</source>
          <target state="translated">DOM의 경우 이는 최신 &lt;a href=&quot;https://w3c.github.io/webcomponents/spec/shadow/&quot;&gt;Shadow DOM을 사용&lt;/a&gt; 하고 구성 요소의 호스트 요소에 대한 ShadowRoot를 생성하는 것을 의미 합니다.</target>
        </trans-unit>
        <trans-unit id="e5ae481bd22e6b320de4e085ee12b07ea1dc6599" translate="yes" xml:space="preserve">
          <source>For the HTML to be interpreted, bind it to an HTML property such as &lt;code&gt;innerHTML&lt;/code&gt;. But binding a value that an attacker might control into &lt;code&gt;innerHTML&lt;/code&gt; normally causes an XSS vulnerability. For example, code contained in a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag is executed:</source>
          <target state="translated">HTML을 해석하려면 &lt;code&gt;innerHTML&lt;/code&gt; 과 같은 HTML 속성에 바인딩하십시오 . 그러나 침입자가 &lt;code&gt;innerHTML&lt;/code&gt; 에 제어 할 수있는 값을 바인딩하면 일반적으로 XSS 취약점이 발생합니다. 예를 들어 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 태그에 포함 된 코드 가 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="1a7d83dc6496a6d0ac88a4d647d71e5177d3d4c8" translate="yes" xml:space="preserve">
          <source>For the checkout process, users need to be able to submit the form data (their name and address). When the order is submitted, the form should reset and the cart should clear.</source>
          <target state="translated">체크 아웃 프로세스의 경우 사용자는 양식 데이터 (이름과 주소)를 제출할 수 있어야합니다. 주문이 제출되면 양식이 재설정되고 장바구니가 지워 져야합니다.</target>
        </trans-unit>
        <trans-unit id="783cec887aa0f06499c3a51fe1160be6c320bcee" translate="yes" xml:space="preserve">
          <source>For the component specs, you can mock out the &lt;code&gt;Phone&lt;/code&gt; service itself, and have it provide canned phone data. You use Angular's component unit testing APIs for both components.</source>
          <target state="translated">구성 요소 사양의 경우 &lt;code&gt;Phone&lt;/code&gt; 서비스 자체를 모방하여 통조림 전화 데이터를 제공 할 수 있습니다. 두 구성 요소 모두에 Angular의 구성 요소 단위 테스트 API를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="d78c5c7228da73d53e133d40ca1802d017f6597e" translate="yes" xml:space="preserve">
          <source>For the final sample app using the provider that this page describes, see the live example.</source>
          <target state="translated">이 페이지에서 설명하는 제공자를 사용하는 최종 샘플 앱은 라이브 예제를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="27b235dc45afd6facbd3b5c02a18555412a410e6" translate="yes" xml:space="preserve">
          <source>For the final sample app with a feature module that this page describes, see the live example.</source>
          <target state="translated">이 페이지에서 설명하는 기능 모듈이 포함 된 최종 샘플 앱은 라이브 예제를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="4246d4ee6a09e032ca56da78e4f5689248f80123" translate="yes" xml:space="preserve">
          <source>For the final sample app with two lazy-loaded modules that this page describes, see the live example.</source>
          <target state="translated">이 페이지에서 설명하는 두 개의 지연로드 모듈이있는 최종 샘플 앱은 라이브 예제를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="011abc43c1e79dde8618a68e913802e5d5ea7e13" translate="yes" xml:space="preserve">
          <source>For the following template HTML, a directive with an &lt;code&gt;input[type=text]&lt;/code&gt; selector, would be instantiated only on the &lt;code&gt;&amp;lt;input type=&quot;text&quot;&amp;gt;&lt;/code&gt; element.</source>
          <target state="translated">다음 템플릿 HTML의 경우 &lt;code&gt;input[type=text]&lt;/code&gt; 선택기가 있는 지시문 은 &lt;code&gt;&amp;lt;input type=&quot;text&quot;&amp;gt;&lt;/code&gt; 요소 에서만 인스턴스화됩니다 .</target>
        </trans-unit>
        <trans-unit id="a49847962d6b00ebefae493d9c5a99b8fc8a1214" translate="yes" xml:space="preserve">
          <source>For the most part, you specify the modules in the same way you would for a regular app. Then, you use the &lt;code&gt;&lt;a href=&quot;../api/upgrade/static&quot;&gt;upgrade/static&lt;/a&gt;&lt;/code&gt; helpers to let the two frameworks know about assets they can use from each other. This is known as &quot;upgrading&quot; and &quot;downgrading&quot;.</source>
          <target state="translated">대부분의 경우 일반 앱과 같은 방식으로 모듈을 지정합니다. 그런 다음 &lt;code&gt;&lt;a href=&quot;../api/upgrade/static&quot;&gt;upgrade/static&lt;/a&gt;&lt;/code&gt; 도우미를 사용하여 두 프레임 워크가 서로 사용할 수있는 자산에 대해 알 수 있도록합니다. 이것을 &quot;업그레이드&quot;및 &quot;다운 그레이드&quot;라고합니다.</target>
        </trans-unit>
        <trans-unit id="3621652a4036fadd7c8b6400eb8f40d09aabefb8" translate="yes" xml:space="preserve">
          <source>For the profile form, add two form control instances with the names &lt;code&gt;firstName&lt;/code&gt; and &lt;code&gt;lastName&lt;/code&gt;.</source>
          <target state="translated">프로파일 양식의 경우 이름이 &lt;code&gt;firstName&lt;/code&gt; 및 &lt;code&gt;lastName&lt;/code&gt; 인 두 개의 양식 제어 인스턴스를 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="dc5e36aeebbe0344b14712c1ecb8297b3ef39916" translate="yes" xml:space="preserve">
          <source>For the purpose of this Getting Started guide, we have provided shipping data in &lt;code&gt;assets/shipping.json&lt;/code&gt;. You'll use this data to add shipping prices for items in the cart.</source>
          <target state="translated">이 시작 안내서의 목적 상 운송 데이터를 &lt;code&gt;assets/shipping.json&lt;/code&gt; . 이 데이터를 사용하여 카트에있는 품목의 운송 가격을 추가합니다.</target>
        </trans-unit>
        <trans-unit id="8c9229b8fa26bd78232a9371294d26967a24811f" translate="yes" xml:space="preserve">
          <source>For the reasons &lt;a href=&quot;http#always-subscribe&quot;&gt;explained above&lt;/a&gt;, the caller (&lt;code&gt;HeroesComponent.update()&lt;/code&gt; in this case) must &lt;code&gt;subscribe()&lt;/code&gt; to the observable returned from the &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient#put&quot;&gt;HttpClient.put()&lt;/a&gt;&lt;/code&gt; in order to initiate the request.</source>
          <target state="translated">&lt;a href=&quot;http#always-subscribe&quot;&gt;위에서 설명한&lt;/a&gt; 이유로 , 호출자 ( 이 경우 &lt;code&gt;HeroesComponent.update()&lt;/code&gt; 는 요청을 시작하기 위해 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient#put&quot;&gt;HttpClient.put()&lt;/a&gt;&lt;/code&gt; 에서 반환 된 Observable에 &lt;code&gt;subscribe()&lt;/code&gt; 를 등록 해야합니다 .</target>
        </trans-unit>
        <trans-unit id="68d620c3a6443b6cece35aadad712c05dcf3abe3" translate="yes" xml:space="preserve">
          <source>For the simplest deployment, create a production build and copy the output directory to a web server.</source>
          <target state="translated">가장 간단한 배치를 위해 프로덕션 빌드를 작성하고 출력 디렉토리를 웹 서버에 복사하십시오.</target>
        </trans-unit>
        <trans-unit id="6178140b72e1eb2891987094c1ff5dc3ae74a205" translate="yes" xml:space="preserve">
          <source>For these reasons, it is often wise to add a custom anchor explicitly, just above the heading or text to which it applies, using the special  syntax like this.</source>
          <target state="translated">이러한 이유로 특수 구문을 적용하는 경우 제목이나 텍스트 바로 위에 커스텀 앵커를 명시 적으로 추가하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="995de1a292785f871b9317fc5c47cd53dd4acfc9" translate="yes" xml:space="preserve">
          <source>For this example:</source>
          <target state="translated">이 예의 경우 :</target>
        </trans-unit>
        <trans-unit id="a770b911a46d350f3eb2b359435ba2cfd4ac37a5" translate="yes" xml:space="preserve">
          <source>For this reason, a pure pipe is preferable when you can live with the change detection strategy. When you can't, you &lt;em&gt;can&lt;/em&gt; use the impure pipe.</source>
          <target state="translated">이러한 이유로 변경 감지 전략에 따라 살 수있는 순수한 파이프가 바람직합니다. 할 수 없으면 불순한 파이프를 사용할 &lt;em&gt;수&lt;/em&gt; 있습니다.</target>
        </trans-unit>
        <trans-unit id="ac37798a4a70e1f85210fd15db9c6dfee94ab938" translate="yes" xml:space="preserve">
          <source>For this reason, an app that depends on a library should only use TypeScript path mappings that point to the &lt;em&gt;built library&lt;/em&gt;. TypeScript path mappings should &lt;em&gt;not&lt;/em&gt; point to the library source &lt;code&gt;.ts&lt;/code&gt; files.</source>
          <target state="translated">이러한 이유로 라이브러리에 의존하는 앱은 &lt;em&gt;빌드 된 라이브러리&lt;/em&gt; 를 가리키는 TypeScript 경로 매핑 만 사용해야 &lt;em&gt;합니다&lt;/em&gt; . TypeScript 경로 매핑은 라이브러리 소스 &lt;code&gt;.ts&lt;/code&gt; 파일을 가리켜 서는 &lt;em&gt;안됩니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="dd652a08d07c569d08ac9b4f50521d84f4d549cb" translate="yes" xml:space="preserve">
          <source>For this to work, the next step is to add a component with a selector that matches &lt;code&gt;&amp;lt;app-hero-search&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">이를 위해 다음 단계는 &lt;code&gt;&amp;lt;app-hero-search&amp;gt;&lt;/code&gt; 와 일치하는 선택기를 사용하여 구성 요소를 추가하는 것 입니다.</target>
        </trans-unit>
        <trans-unit id="73fd3829ac0294e631bc961c07b7af3f5fd156f7" translate="yes" xml:space="preserve">
          <source>For unit tests, on the other hand, more conversion work is needed. Effectively they need to be &lt;em&gt;upgraded&lt;/em&gt; along with the production code.</source>
          <target state="translated">반면 단위 테스트의 경우 더 많은 변환 작업이 필요합니다. 효과적으로 프로덕션 코드와 함께 &lt;em&gt;업그레이드&lt;/em&gt; 해야합니다 .</target>
        </trans-unit>
        <trans-unit id="4db7aafcf80332b7971a6009a17f922fd8d2bbbc" translate="yes" xml:space="preserve">
          <source>For usage information, see the &lt;a href=&quot;../../guide/http&quot;&gt;HTTP Client&lt;/a&gt; guide.</source>
          <target state="translated">사용법 정보는 &lt;a href=&quot;../../guide/http&quot;&gt;HTTP 클라이언트&lt;/a&gt; 안내서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="1462977c8cabafbedbb937df9ad22fe6ed4e2d10" translate="yes" xml:space="preserve">
          <source>For usage of the &lt;code&gt;$location&lt;/code&gt; service as a provider in AngularJS, you need to downgrade the &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/%24locationshim&quot;&gt;$locationShim&lt;/a&gt;&lt;/code&gt; using a factory provider.</source>
          <target state="translated">AngularJS에서 제공자로 &lt;code&gt;$location&lt;/code&gt; 서비스 를 사용하려면 팩토리 제공자를 사용하여 &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/%24locationshim&quot;&gt;$locationShim&lt;/a&gt;&lt;/code&gt; 을 다운 그레이드해야합니다 .</target>
        </trans-unit>
        <trans-unit id="b3f008aa69c94844a642116e9f1207516b29be1f" translate="yes" xml:space="preserve">
          <source>For you, it was as simple as this:</source>
          <target state="translated">당신에게 이것은 다음과 같이 간단했습니다.</target>
        </trans-unit>
        <trans-unit id="48369007d3f7f59614d092b1c684d61ba5812bc3" translate="yes" xml:space="preserve">
          <source>For your first test you'd like to see that the screen displays the default &lt;code&gt;title&lt;/code&gt;. Your instinct is to write a test that immediately inspects the &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; like this:</source>
          <target state="translated">첫 번째 테스트의 경우 화면에 기본 &lt;code&gt;title&lt;/code&gt; 표시됩니다 . 본능은 &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; 을 다음 과 같이 즉시 검사하는 테스트를 작성하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="1458e99654a53b5bd6ae889d0452297902af0238" translate="yes" xml:space="preserve">
          <source>Forcing update activation</source>
          <target state="translated">업데이트 활성화 강제</target>
        </trans-unit>
        <trans-unit id="80446347ede53cf9ce56b3d59fda4b5c96dc25c4" translate="yes" xml:space="preserve">
          <source>Form</source>
          <target state="translated">Form</target>
        </trans-unit>
        <trans-unit id="6382cef0237d5c54061c2f361e9006517f0b7f44" translate="yes" xml:space="preserve">
          <source>Form Validation</source>
          <target state="translated">양식 검증</target>
        </trans-unit>
        <trans-unit id="146769b547ad6cb95714f43800543ead7973c7bf" translate="yes" xml:space="preserve">
          <source>Form control to be inserted</source>
          <target state="translated">삽입 할 폼 컨트롤</target>
        </trans-unit>
        <trans-unit id="9a99df86d8ac9ffe88f4613f651eda5610568463" translate="yes" xml:space="preserve">
          <source>Form model setup</source>
          <target state="translated">양식 모델 설정</target>
        </trans-unit>
        <trans-unit id="82e5fa982def989184c51505fd97bf9a2e6ad3cb" translate="yes" xml:space="preserve">
          <source>Form validation</source>
          <target state="translated">양식 검증</target>
        </trans-unit>
        <trans-unit id="e32408b710c40920e781a08aaca9b69a260d6587" translate="yes" xml:space="preserve">
          <source>Form with an &quot;else&quot; block:</source>
          <target state="translated">&quot;else&quot;블록이있는 양식 :</target>
        </trans-unit>
        <trans-unit id="b12e8bb8e45b01539bfe059fad4e261d8f0c71b1" translate="yes" xml:space="preserve">
          <source>Form with storing the value locally:</source>
          <target state="translated">값을 로컬로 저장하는 양식 :</target>
        </trans-unit>
        <trans-unit id="d6d15ac567565a89023fa6dff1a7109f5e61d59f" translate="yes" xml:space="preserve">
          <source>FormArray</source>
          <target state="translated">FormArray</target>
        </trans-unit>
        <trans-unit id="5c7489c2f9f6c861666dccb71f6ef5a318df7f09" translate="yes" xml:space="preserve">
          <source>FormArrayName</source>
          <target state="translated">FormArrayName</target>
        </trans-unit>
        <trans-unit id="a42baa6a9386bdd8611f928ea9a5d31b72dc2b2b" translate="yes" xml:space="preserve">
          <source>FormBuilder</source>
          <target state="translated">FormBuilder</target>
        </trans-unit>
        <trans-unit id="c48570d473365cf20f35118d51c691a2a973524c" translate="yes" xml:space="preserve">
          <source>FormControl</source>
          <target state="translated">FormControl</target>
        </trans-unit>
        <trans-unit id="21f077472e97a2700808ebcc8cd132c6e46e9ae1" translate="yes" xml:space="preserve">
          <source>FormControlDirective</source>
          <target state="translated">FormControlDirective</target>
        </trans-unit>
        <trans-unit id="9f00fa931846ce0c0ca95b4c76b9bfb2d80e4468" translate="yes" xml:space="preserve">
          <source>FormControlName</source>
          <target state="translated">FormControlName</target>
        </trans-unit>
        <trans-unit id="b92b85002a3fb316a5c6e08beb73b6cb9ed9d64d" translate="yes" xml:space="preserve">
          <source>FormData</source>
          <target state="translated">FormData</target>
        </trans-unit>
        <trans-unit id="d8bcf98cf60814a8c981a2d4ffd031f8ba591b71" translate="yes" xml:space="preserve">
          <source>FormGroup</source>
          <target state="translated">FormGroup</target>
        </trans-unit>
        <trans-unit id="b9deca656b02855f2962b8f66879520ace29f55e" translate="yes" xml:space="preserve">
          <source>FormGroupDirective</source>
          <target state="translated">FormGroupDirective</target>
        </trans-unit>
        <trans-unit id="f828b0b5692e832a37851b5392baa6dd53876003" translate="yes" xml:space="preserve">
          <source>FormGroupName</source>
          <target state="translated">FormGroupName</target>
        </trans-unit>
        <trans-unit id="a6a71b4c40027f93241e30982b9b8c21ccd9aee4" translate="yes" xml:space="preserve">
          <source>FormStyle</source>
          <target state="translated">FormStyle</target>
        </trans-unit>
        <trans-unit id="041a5dec481d6bf0724caeaa84bc135d7d9062d4" translate="yes" xml:space="preserve">
          <source>Format</source>
          <target state="translated">Format</target>
        </trans-unit>
        <trans-unit id="5410c6e6876a80679571d0dd431c2d3614c4e1fe" translate="yes" xml:space="preserve">
          <source>Format data with pipes.</source>
          <target state="translated">파이프로 데이터를 형식화하십시오.</target>
        </trans-unit>
        <trans-unit id="a82c3163ea3ab9e53fb2cea07cd209bfb937d3de" translate="yes" xml:space="preserve">
          <source>Format examples</source>
          <target state="translated">형식 예</target>
        </trans-unit>
        <trans-unit id="0a417e8151c3f975cb0633ce28f1737ddf6bacd5" translate="yes" xml:space="preserve">
          <source>Format of the localization file specified with --i18n-file.</source>
          <target state="translated">--i18n-file로 지정된 현지화 파일의 형식입니다.</target>
        </trans-unit>
        <trans-unit id="236ee28d7ad63387347cf6c2b65fd59bcf5b58cf" translate="yes" xml:space="preserve">
          <source>Format styles that can be used to represent numbers.</source>
          <target state="translated">숫자를 나타내는 데 사용할 수있는 형식 스타일.</target>
        </trans-unit>
        <trans-unit id="f172b365ccf025116d82b4f7a504e627b2edb8e6" translate="yes" xml:space="preserve">
          <source>Format with the &lt;code&gt;UppercasePipe&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;UppercasePipe&lt;/code&gt; 포맷</target>
        </trans-unit>
        <trans-unit id="01600078364b64c83d05a5a6206c3c8f79391107" translate="yes" xml:space="preserve">
          <source>FormatWidth</source>
          <target state="translated">FormatWidth</target>
        </trans-unit>
        <trans-unit id="bcfc7802aa17a6c06eab5b1aa2c8a01766456ca9" translate="yes" xml:space="preserve">
          <source>Formats a date according to locale rules.</source>
          <target state="translated">로케일 규칙에 따라 날짜를 형식화합니다.</target>
        </trans-unit>
        <trans-unit id="4acd0cf15f92f92f95df3f7945cd8f3113d16855" translate="yes" xml:space="preserve">
          <source>Formats a date to a string based on the requested format.</source>
          <target state="translated">요청 된 형식에 따라 날짜를 문자열로 형식화합니다.</target>
        </trans-unit>
        <trans-unit id="75b510aa38e971da727972aaa290425fde30cbce" translate="yes" xml:space="preserve">
          <source>Formats a date value according to locale rules.</source>
          <target state="translated">로캘 규칙에 따라 날짜 값의 형식을 지정합니다.</target>
        </trans-unit>
        <trans-unit id="dcc0bea5632acd34ea7e37c42c9e4c997c0b72fb" translate="yes" xml:space="preserve">
          <source>Formats a number as a percentage according to locale rules.</source>
          <target state="translated">로케일 규칙에 따라 숫자를 백분율로 형식화합니다.</target>
        </trans-unit>
        <trans-unit id="d11a0509a30735bc923587e47e0a4df22da695b3" translate="yes" xml:space="preserve">
          <source>Formats a number as currency using locale rules.</source>
          <target state="translated">로케일 규칙을 사용하여 숫자를 통화로 형식화합니다.</target>
        </trans-unit>
        <trans-unit id="edf61a61be57f17f5a7dc1ff5a46129550b4144a" translate="yes" xml:space="preserve">
          <source>Formats a number as currency.</source>
          <target state="translated">숫자를 통화 형식으로 지정합니다.</target>
        </trans-unit>
        <trans-unit id="17787cb5c737a01e87cd71d36456d99d98545c45" translate="yes" xml:space="preserve">
          <source>Formats a number as percentage according to locale rules.</source>
          <target state="translated">로케일 규칙에 따라 숫자를 백분율로 형식화합니다.</target>
        </trans-unit>
        <trans-unit id="f3736d14cc407b274fccb3b7c52e94f74937e007" translate="yes" xml:space="preserve">
          <source>Formats a number as text, with group sizing, separator, and other parameters based on the locale.</source>
          <target state="translated">로캘에 따라 그룹 크기, 구분 기호 및 기타 매개 변수를 사용하여 숫자를 텍스트로 형식화합니다.</target>
        </trans-unit>
        <trans-unit id="69675ca3093ae5e95c7f23454bbb0ec2a3e3a132" translate="yes" xml:space="preserve">
          <source>Formats a number as text.</source>
          <target state="translated">숫자를 텍스트로 형식화합니다.</target>
        </trans-unit>
        <trans-unit id="02f654c32c11b40155212923435510ae86ebdc1e" translate="yes" xml:space="preserve">
          <source>Formats a number as text. Group sizing and separator and other locale-specific configurations are based on the active locale.</source>
          <target state="translated">숫자를 텍스트로 형식화합니다. 그룹 크기 및 구분 기호 및 기타 로캘 별 구성은 활성 로캘을 기반으로합니다.</target>
        </trans-unit>
        <trans-unit id="4bec9575721b2739ed1e7c56eb6c8471084fcbcf" translate="yes" xml:space="preserve">
          <source>Forms</source>
          <target state="translated">Forms</target>
        </trans-unit>
        <trans-unit id="5beb527fad1e82e9004c53827f16339c6c9f5b43" translate="yes" xml:space="preserve">
          <source>Forms Guide</source>
          <target state="translated">양식 안내서</target>
        </trans-unit>
        <trans-unit id="a9c444f62165660b6e9a88acef821c93bb49bf48" translate="yes" xml:space="preserve">
          <source>Forms are the mainstay of business applications. You use forms to log in, submit a help request, place an order, book a flight, schedule a meeting, and perform countless other data-entry tasks.</source>
          <target state="translated">양식은 비즈니스 응용 프로그램의 기본입니다. 양식을 사용하여 로그인, 지원 요청 제출, 주문, 항공편 예약, 회의 예약 및 기타 수많은 데이터 입력 작업을 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f1c46cc3e74d7aea7e123bce2866a9a8bc8b0774" translate="yes" xml:space="preserve">
          <source>Forms in Angular</source>
          <target state="translated">각도 형태</target>
        </trans-unit>
        <trans-unit id="c2ae9db40f0327172734bd7302b687b3e865b6d2" translate="yes" xml:space="preserve">
          <source>Forms in Angular take the standard capabilities of the HTML based forms and add an orchestration layer to help with creating custom form controls, and to supply great validation experiences. There are two parts to an Angular Reactive form, the objects that live in the component to store and manage the form, and the visualization of the form that lives in the template.</source>
          <target state="translated">Angular의 양식은 HTML 기반 양식의 표준 기능을 사용하고 오케스트레이션 계층을 추가하여 사용자 지정 양식 컨트롤을 작성하고 훌륭한 검증 경험을 제공합니다. Angular Reactive 양식에는 양식을 저장하고 관리하기 위해 구성 요소에있는 오브젝트와 템플리트에있는 양식의 시각화라는 두 부분이 있습니다.</target>
        </trans-unit>
        <trans-unit id="cfc59f1b557be47a18693a789be4114527797625" translate="yes" xml:space="preserve">
          <source>FormsModule</source>
          <target state="translated">FormsModule</target>
        </trans-unit>
        <trans-unit id="c89b7d3941fc3c83eb78832d5c2130a06d3c2869" translate="yes" xml:space="preserve">
          <source>Fortunately you can name the directive property whatever you want &lt;em&gt;and&lt;/em&gt;&lt;strong&gt;&lt;em&gt;alias it&lt;/em&gt;&lt;/strong&gt; for binding purposes.</source>
          <target state="translated">다행히 당신은 지시 당신이 원하는 특성의 이름을 지정할 수 있습니다 &lt;em&gt;및 &lt;/em&gt;&lt;strong&gt;&lt;em&gt;그 별명을&lt;/em&gt;&lt;/strong&gt; 목적으로 바인딩합니다.</target>
        </trans-unit>
        <trans-unit id="fc50fc246cebf313b856e5560aea2e5c76c81e97" translate="yes" xml:space="preserve">
          <source>Fortunately, Angular data binding is on alert for dangerous HTML. In the above case, the HTML displays as is, and the Javascript does not execute. Angular &lt;strong&gt;does not&lt;/strong&gt; allow HTML with script tags to leak into the browser, neither with interpolation nor property binding.</source>
          <target state="translated">다행히 Angular 데이터 바인딩은 위험한 HTML을 경고합니다. 위의 경우 HTML은 그대로 표시되고 Javascript는 실행되지 않습니다. Angular &lt;strong&gt;에서는&lt;/strong&gt; 스크립트 태그가있는 HTML이 브라우저로 누출되지 않고 보간이나 속성 바인딩이 허용 &lt;strong&gt;되지 않습니다&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="5edd1f49279278a50cf582fe92a1aef0b8150884" translate="yes" xml:space="preserve">
          <source>Fortunately, application routes have something in common: their URLs lack file extensions. (Data requests also lack extensions but they're easy to recognize because they always begin with &lt;code&gt;/api&lt;/code&gt;.) All static asset requests have a file extension (such as &lt;code&gt;main.js&lt;/code&gt; or &lt;code&gt;/node_modules/zone.js/dist/zone.js&lt;/code&gt;).</source>
          <target state="translated">다행히 응용 프로그램 경로에는 공통점이 있습니다. URL에는 파일 확장자가 없습니다. (데이터 요청에는 확장명이 없지만 항상 &lt;code&gt;/api&lt;/code&gt; 로 시작하기 때문에 쉽게 알아볼 수 있습니다.) 모든 정적 자산 요청에는 파일 확장명이 있습니다 (예 : &lt;code&gt;main.js&lt;/code&gt; 또는 &lt;code&gt;/node_modules/zone.js/dist/zone.js&lt;/code&gt; ) .</target>
        </trans-unit>
        <trans-unit id="5f5660b64b3fe113ff7adc95059a5693c9cc2a5c" translate="yes" xml:space="preserve">
          <source>Fortunately, not in this case because the &lt;code&gt;DashboardComponent&lt;/code&gt; isn't doing much with the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">다행히 &lt;code&gt;DashboardComponent&lt;/code&gt; 가 &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; 에서 많은 작업을 수행하지 않기 때문에이 경우에는 그렇지 않습니다.</target>
        </trans-unit>
        <trans-unit id="5038837ff39c868388f0e163672ddf3b75700082" translate="yes" xml:space="preserve">
          <source>Fortunately, the &lt;code&gt;HeroDetailService&lt;/code&gt; delegates responsibility for remote data access to an injected &lt;code&gt;HeroService&lt;/code&gt;.</source>
          <target state="translated">다행히 &lt;code&gt;HeroDetailService&lt;/code&gt; 는 주입 된 &lt;code&gt;HeroService&lt;/code&gt; 에 대한 원격 데이터 액세스에 대한 책임을 위임 합니다.</target>
        </trans-unit>
        <trans-unit id="2b969def5bb6104ef4a194be02d84f98a36368da" translate="yes" xml:space="preserve">
          <source>Fortunately, the &lt;code&gt;TestBed.configureTestingModule&lt;/code&gt; parameter parallels the metadata passed to the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; decorator which means you can also specify &lt;code&gt;providers&lt;/code&gt; and &lt;code&gt;imports&lt;/code&gt;.</source>
          <target state="translated">다행스럽게도 &lt;code&gt;TestBed.configureTestingModule&lt;/code&gt; 매개 변수는 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 데코레이터에 전달 된 메타 데이터를 병렬화하여 &lt;code&gt;providers&lt;/code&gt; 및 &lt;code&gt;imports&lt;/code&gt; 지정할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c62305f0c948ffda49ef66afb9b325e802f97530" translate="yes" xml:space="preserve">
          <source>Fortunately, they aren't necessary. You don't have to add the lifecycle hook interfaces to directives and components to benefit from the hooks themselves.</source>
          <target state="translated">다행히도 필요하지 않습니다. 후크 자체의 이점을 위해 수명주기 후크 인터페이스를 지시문 및 구성 요소에 추가 할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="28be72c0280bcb5dc5b4d0778e06341a7abea5c2" translate="yes" xml:space="preserve">
          <source>ForwardRefFn</source>
          <target state="translated">ForwardRefFn</target>
        </trans-unit>
        <trans-unit id="6c9307be2052fd5a8a74b5213f3df047b9d426a0" translate="yes" xml:space="preserve">
          <source>Fractional seconds</source>
          <target state="translated">분수 초</target>
        </trans-unit>
        <trans-unit id="fb001b2c292ad2f619c8caf6e0ac8afd191aaa76" translate="yes" xml:space="preserve">
          <source>Framework</source>
          <target state="translated">Framework</target>
        </trans-unit>
        <trans-unit id="d790b402d79ac1a723c790313bcd679999474630" translate="yes" xml:space="preserve">
          <source>Frequently Asked Questions</source>
          <target state="translated">자주 묻는 질문</target>
        </trans-unit>
        <trans-unit id="bc0a142e1e515867de810b2442244936f418403f" translate="yes" xml:space="preserve">
          <source>Frequently Used Modules</source>
          <target state="translated">자주 사용되는 모듈</target>
        </trans-unit>
        <trans-unit id="6006b6792fc35ff7614e5fa895078e4f0a6dfd7c" translate="yes" xml:space="preserve">
          <source>Fri Apr 15 1988 00:00:00 GMT-0700 (Pacific Daylight Time)</source>
          <target state="translated">1988 년 4 월 15 일 00:00:00 GMT-0700 (태평양 일광 절약 시간)</target>
        </trans-unit>
        <trans-unit id="4b3774c5d182edc52477fb17e7804e9b9c9ee37e" translate="yes" xml:space="preserve">
          <source>From &lt;em&gt;view-to-source&lt;/em&gt;</source>
          <target state="translated">에서 &lt;em&gt;보기 - 소스&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="db63bccaf8113fab5205af56d973f3b49919eb47" translate="yes" xml:space="preserve">
          <source>From the &lt;code&gt;ContainerComponent&lt;/code&gt;, this will not work:</source>
          <target state="translated">로부터 &lt;code&gt;ContainerComponent&lt;/code&gt; 이 작동하지 않습니다 :</target>
        </trans-unit>
        <trans-unit id="a16913cd9f3c0db7df4d7d9f3bf7fd21aa09266a" translate="yes" xml:space="preserve">
          <source>From the &lt;em&gt;source-to-view&lt;/em&gt;</source>
          <target state="translated">로부터 &lt;em&gt;소스 -보기&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="6bb6a53b96740b32297c3c9e26cbdae1ffc3e003" translate="yes" xml:space="preserve">
          <source>From the perspective of the router, the router never &quot;goes back&quot;. When the user clicks on the back button in the browser, a new navigation ID is created.</source>
          <target state="translated">라우터의 관점에서 라우터는 &quot;돌아 오지&quot;않습니다. 사용자가 브라우저에서 뒤로 단추를 클릭하면 새 탐색 ID가 작성됩니다.</target>
        </trans-unit>
        <trans-unit id="b8fd592e76623b1bd29c81a0d0021b540794543a" translate="yes" xml:space="preserve">
          <source>From the root of your workspace, run the &lt;code&gt;ng build&lt;/code&gt; command for your library.</source>
          <target state="translated">작업 공간의 루트에서 라이브러리에 대한 &lt;code&gt;ng build&lt;/code&gt; 명령을 실행하십시오 .</target>
        </trans-unit>
        <trans-unit id="dff6fc31c15b70198c596f7b87cdb4ab4c3aa842" translate="yes" xml:space="preserve">
          <source>From the terminal, install the Angular CLI globally with:</source>
          <target state="translated">터미널에서 다음을 사용하여 Angular CLI를 전체적으로 설치하십시오.</target>
        </trans-unit>
        <trans-unit id="09b23d52d687ddf5ec82eb8d6ceac90f4cfce115" translate="yes" xml:space="preserve">
          <source>From the test root component's &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; returned by &lt;code&gt;fixture.debugElement&lt;/code&gt;, you can walk (and query) the fixture's entire element and component subtrees.</source>
          <target state="translated">&lt;code&gt;fixture.debugElement&lt;/code&gt; 가 반환 한 테스트 루트 컴포넌트의 &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; 에서 조명기의 전체 요소와 컴포넌트 서브 트리를 걸어서 쿼리 할 수 ​​있습니다.</target>
        </trans-unit>
        <trans-unit id="f4fc4957021d79edfdc1944068e27562a5e7500f" translate="yes" xml:space="preserve">
          <source>From there you replace the &lt;code&gt;/src&lt;/code&gt; folder with the one from your &lt;code&gt;StackBlitz&lt;/code&gt; download, and then perform a build.</source>
          <target state="translated">거기에서 &lt;code&gt;/src&lt;/code&gt; 폴더를 &lt;code&gt;StackBlitz&lt;/code&gt; 다운로드 폴더로 바꾸고 빌드를 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="c1b29708a9ee747e9a9d3071434b524b09310f1a" translate="yes" xml:space="preserve">
          <source>From this base you can derive two new classes in &lt;code&gt;TextboxQuestion&lt;/code&gt; and &lt;code&gt;DropdownQuestion&lt;/code&gt; that represent textbox and dropdown questions. The idea is that the form will be bound to specific question types and render the appropriate controls dynamically.</source>
          <target state="translated">이 기초에서 &lt;code&gt;TextboxQuestion&lt;/code&gt; 및 &lt;code&gt;DropdownQuestion&lt;/code&gt; 에서 텍스트 상자 및 드롭 다운 질문을 나타내는 두 개의 새로운 클래스를 파생시킬 수 있습니다 . 아이디어는 양식이 특정 질문 유형에 바인딩되고 적절한 컨트롤을 동적으로 렌더링한다는 것입니다.</target>
        </trans-unit>
        <trans-unit id="50e0c37a7210e277623484289b971d913b2730f5" translate="yes" xml:space="preserve">
          <source>From time to time you'll have to step away from markdown and write a portion of the document in HTML. Markdown allows you to mix HTML and markdown in the same document.</source>
          <target state="translated">때때로 마크 다운에서 벗어나 문서의 일부를 HTML로 작성해야합니다. 마크 다운을 사용하면 동일한 문서에서 HTML과 마크 다운을 혼합 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9f8099366c879f236d5bd3d85697f3c2e6387914" translate="yes" xml:space="preserve">
          <source>Full documentation for the Bazel CLI is at &lt;a href=&quot;https://docs.bazel.build/versions/master/command-line-reference.html&quot;&gt;https://docs.bazel.build/versions/master/command-line-reference.html&lt;/a&gt;.</source>
          <target state="translated">Bazel CLI에 대한 전체 설명서는 &lt;a href=&quot;https://docs.bazel.build/versions/master/command-line-reference.html&quot;&gt;https://docs.bazel.build/versions/master/command-line-reference.html에&lt;/a&gt; 있습니다.</target>
        </trans-unit>
        <trans-unit id="f2182c243ca64f8f4320ef356143bb890538d790" translate="yes" xml:space="preserve">
          <source>Full length for &lt;code&gt;en-US&lt;/code&gt;. For example: &quot;Sunday&quot;</source>
          <target state="translated">에 대한 전체 길이 &lt;code&gt;en-US&lt;/code&gt; . 예를 들어 &quot;일요일&quot;</target>
        </trans-unit>
        <trans-unit id="f1e410ad1472b42cb42cc98962428637290b6706" translate="yes" xml:space="preserve">
          <source>Function</source>
          <target state="translated">Function</target>
        </trans-unit>
        <trans-unit id="307d58da1cb5c708acf50f78b41a528827c81cf8" translate="yes" xml:space="preserve">
          <source>Function calls</source>
          <target state="translated">함수 호출</target>
        </trans-unit>
        <trans-unit id="f0182dfcd6d20b80a09f2cb0997dc7e70a92ccba" translate="yes" xml:space="preserve">
          <source>Function calls are not supported</source>
          <target state="translated">함수 호출은 지원되지 않습니다</target>
        </trans-unit>
        <trans-unit id="d1b389a67b88dc11d3ca8a7606a8511ef745c99b" translate="yes" xml:space="preserve">
          <source>Function name</source>
          <target state="translated">기능 이름</target>
        </trans-unit>
        <trans-unit id="6de035f278c24f6b9cbb33875bc923585ab1c8d2" translate="yes" xml:space="preserve">
          <source>Function that is called by the forms API when the control status changes to or from 'DISABLED'. Depending on the status, it enables or disables the appropriate DOM element.</source>
          <target state="translated">제어 상태가 'DISABLED'로 변경 될 때 양식 API에 의해 호출되는 함수입니다. 상태에 따라 적절한 DOM 요소를 활성화하거나 비활성화합니다.</target>
        </trans-unit>
        <trans-unit id="accace0a2c1dc76b9b0e688d8f7b2f83d65616ca" translate="yes" xml:space="preserve">
          <source>Function that loads HammerJS, returning a promise that is resolved once HammerJs is loaded.</source>
          <target state="translated">HammerJS를로드하는 기능으로 HammerJs가로드되면 해결되는 약속을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="2b961dea1dc0c60ddf9a2c8e9d090f6f7d082483" translate="yes" xml:space="preserve">
          <source>Functions</source>
          <target state="translated">Functions</target>
        </trans-unit>
        <trans-unit id="cbb7a8ad94a0350d71d5dbacb482d18f9ec80fed" translate="yes" xml:space="preserve">
          <source>Functions and static method calls</source>
          <target state="translated">함수와 정적 메소드 호출</target>
        </trans-unit>
        <trans-unit id="c5d47fe56e6eb1f3de07dc9b7e2e27df31984f6f" translate="yes" xml:space="preserve">
          <source>Functions that control complex animation sequences are as follows:</source>
          <target state="translated">복잡한 애니메이션 시퀀스를 제어하는 ​​기능은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="a36a6718f54524d846894fb04b5b885b4e43e63b" translate="yes" xml:space="preserve">
          <source>G</source>
          <target state="translated">G</target>
        </trans-unit>
        <trans-unit id="a398fa06f1c0d02f5674b15f6a6bd03d1fae4ae7" translate="yes" xml:space="preserve">
          <source>G (A)</source>
          <target state="translated">지 (A)</target>
        </trans-unit>
        <trans-unit id="eb8daa8e2d6659fa5c2723cc8e6125af24dfa1c0" translate="yes" xml:space="preserve">
          <source>G, GG &amp;amp; GGG</source>
          <target state="translated">G, GG 및 GGG</target>
        </trans-unit>
        <trans-unit id="6b290c8942cbc1d1d719ea8d88fc447035058289" translate="yes" xml:space="preserve">
          <source>GGG (AD)</source>
          <target state="translated">GGG (광고)</target>
        </trans-unit>
        <trans-unit id="00375065763ad15e0a040210fcc6a75e14be67dc" translate="yes" xml:space="preserve">
          <source>GGGG</source>
          <target state="translated">GGGG</target>
        </trans-unit>
        <trans-unit id="76b1ada62fafb3b6a1d86653f4602df6c517c120" translate="yes" xml:space="preserve">
          <source>GGGG (Anno Domini)</source>
          <target state="translated">GGGG (안노도 미니)</target>
        </trans-unit>
        <trans-unit id="8999a576f1492a90a0fe026bc4748334d685b1c7" translate="yes" xml:space="preserve">
          <source>GGGGG</source>
          <target state="translated">GGGGG</target>
        </trans-unit>
        <trans-unit id="ac601f81f1c830bbc42a98a61bc4a806380671e2" translate="yes" xml:space="preserve">
          <source>GMT-08:00</source>
          <target state="translated">GMT-08:00</target>
        </trans-unit>
        <trans-unit id="e063740277299254fba81114eab6ab1778e43431" translate="yes" xml:space="preserve">
          <source>GMT-8</source>
          <target state="translated">GMT-8</target>
        </trans-unit>
        <trans-unit id="060ee72e55c0d15ccc4085e23e54c48f8dedf4bd" translate="yes" xml:space="preserve">
          <source>GMT-8:00</source>
          <target state="translated">GMT-8:00</target>
        </trans-unit>
        <trans-unit id="c6c6e52ab77299cfa656a1111cd062dc5500ef4e" translate="yes" xml:space="preserve">
          <source>Gathering and Viewing Usage Analytics</source>
          <target state="translated">사용 현황 분석 수집 및보기</target>
        </trans-unit>
        <trans-unit id="90d988a4b5f5b91abe38d0cd410f91e09b49a39c" translate="yes" xml:space="preserve">
          <source>General Naming Guidelines</source>
          <target state="translated">일반적인 명명 지침</target>
        </trans-unit>
        <trans-unit id="cba1a6e46e4708c3c4d2980a9394604ab2a693b2" translate="yes" xml:space="preserve">
          <source>Generally, provide services the whole app needs in the root module and scope services by providing them in lazy loaded modules.</source>
          <target state="translated">일반적으로 루트 모듈에서 전체 앱에 필요한 서비스를 제공하고 지연로드 된 모듈로 제공하여 서비스를 범위 지정합니다.</target>
        </trans-unit>
        <trans-unit id="50b5959329e24939984178366e66dba05ca7ff3a" translate="yes" xml:space="preserve">
          <source>Generally, the Angular compiler generates a &lt;code&gt;&lt;a href=&quot;../api/core/componentfactory&quot;&gt;ComponentFactory&lt;/a&gt;&lt;/code&gt; for any component referenced in a template. However, there are no selector references in the templates for dynamically loaded components since they load at runtime.</source>
          <target state="translated">일반적으로 Angular 컴파일러 는 템플릿에서 참조되는 모든 구성 &lt;code&gt;&lt;a href=&quot;../api/core/componentfactory&quot;&gt;ComponentFactory&lt;/a&gt;&lt;/code&gt; 대한 ComponentFactory 를 생성합니다 . 그러나 동적으로로드 된 구성 요소의 템플릿에는 런타임시로드되므로 선택기 참조가 없습니다.</target>
        </trans-unit>
        <trans-unit id="57e078d15b6b83870a971d124ae29a7bbe383a50" translate="yes" xml:space="preserve">
          <source>Generally, the practice of setting a variable or property to a data value. Within Angular, typically refers to &lt;a href=&quot;glossary#data-binding&quot;&gt;data binding&lt;/a&gt;, which coordinates DOM object properties with data object properties.</source>
          <target state="translated">일반적으로 변수 또는 속성을 데이터 값으로 설정하는 방법. Angular 내에서 일반적으로 &lt;a href=&quot;glossary#data-binding&quot;&gt;데이터&lt;/a&gt; 객체 속성을 사용하여 DOM 객체 속성을 조정 하는 데이터 바인딩을 나타냅니다 .</target>
        </trans-unit>
        <trans-unit id="ba75bd19ec2c4ce6bebb850f18a34d24d2d66d57" translate="yes" xml:space="preserve">
          <source>Generally, use property binding over attribute binding as it is more intuitive (being a boolean value), has a shorter syntax, and is more performant.</source>
          <target state="translated">일반적으로 속성 바인딩은 속성 바인딩보다 직관적이고 (부울 값이므로) 구문이 짧고 성능이 우수하므로 속성 바인딩을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="0c6d01d451368b768446afecc65324c907fd398a" translate="yes" xml:space="preserve">
          <source>Generally, you'll only need &lt;code&gt;&lt;a href=&quot;../api/core/injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;&lt;/code&gt; for providing services and &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt;/&lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forChild&quot;&gt;forChild()&lt;/a&gt;&lt;/code&gt; for routing. However, understanding how &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; works to make sure a service is a singleton will inform your development at a deeper level.</source>
          <target state="translated">일반적으로 서비스를 &lt;code&gt;&lt;a href=&quot;../api/core/injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;&lt;/code&gt; 하기 위해 제공하고 라우팅을 위해 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; / &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forChild&quot;&gt;forChild()&lt;/a&gt;&lt;/code&gt; 만 제공 하면됩니다 . 그러나 서비스가 싱글 톤인지 확인하기 위해 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; 작동 방식을 이해 하면 개발에 더 깊은 수준을 알릴 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="90047ef8527630e7936402eb0e7f57f3c99c3982" translate="yes" xml:space="preserve">
          <source>Generate a &lt;code&gt;CrisisCenter&lt;/code&gt; component in the &lt;code&gt;crisis-center&lt;/code&gt; folder:</source>
          <target state="translated">&lt;code&gt;crisis-center&lt;/code&gt; 폴더 에 &lt;code&gt;CrisisCenter&lt;/code&gt; 구성 요소를 생성하십시오 .</target>
        </trans-unit>
        <trans-unit id="084b51a7bff1022599f0c899ade452493ff127d6" translate="yes" xml:space="preserve">
          <source>Generate a &lt;code&gt;CrisisDetailResolver&lt;/code&gt; service file within the &lt;code&gt;Crisis Center&lt;/code&gt; feature area.</source>
          <target state="translated">&lt;code&gt;Crisis Center&lt;/code&gt; 기능 영역 내에 &lt;code&gt;CrisisDetailResolver&lt;/code&gt; 서비스 파일을 생성하십시오 .</target>
        </trans-unit>
        <trans-unit id="4875f6ee183dd8ab4d4a463d44f7d6bdd971a900" translate="yes" xml:space="preserve">
          <source>Generate a &lt;code&gt;Dialog&lt;/code&gt; service to handle user confirmation.</source>
          <target state="translated">사용자 확인을 처리 하는 &lt;code&gt;Dialog&lt;/code&gt; 서비스를 생성하십시오 .</target>
        </trans-unit>
        <trans-unit id="5d7b10e4e6677ba9f77dc539ea07fd7d32f66bea" translate="yes" xml:space="preserve">
          <source>Generate a &lt;code&gt;ProfileEditor&lt;/code&gt; component and import the &lt;code&gt;&lt;a href=&quot;../api/forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; classes from the &lt;code&gt;@angular/forms&lt;/code&gt; package.</source>
          <target state="translated">&lt;code&gt;ProfileEditor&lt;/code&gt; 구성 요소를 생성 하고 &lt;code&gt;@angular/forms&lt;/code&gt; 패키지 에서 &lt;code&gt;&lt;a href=&quot;../api/forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 클래스를 가져 오십시오 .</target>
        </trans-unit>
        <trans-unit id="19a139134434badc3bfeaf46524ef6fd9d5a0b63" translate="yes" xml:space="preserve">
          <source>Generate a &lt;em&gt;guard&lt;/em&gt; that checks for the presence of a &lt;code&gt;&lt;a href=&quot;../api/router/route#canDeactivate&quot;&gt;canDeactivate&lt;/a&gt;()&lt;/code&gt; method in a component&amp;mdash;any component.</source>
          <target state="translated">구성 요소 (구성 요소 &lt;code&gt;&lt;a href=&quot;../api/router/route#canDeactivate&quot;&gt;canDeactivate&lt;/a&gt;()&lt;/code&gt; &lt;a href=&quot;../api/router/route#canDeactivate&quot;&gt;canDeactivate&lt;/a&gt; () 메서드 가 있는지 확인 하는 &lt;em&gt;가드&lt;/em&gt; 를 생성합니다 .</target>
        </trans-unit>
        <trans-unit id="48b27f5909440f72ac1abd21e856f98ec91f80dc" translate="yes" xml:space="preserve">
          <source>Generate a cart component, named &lt;code&gt;cart&lt;/code&gt;.</source>
          <target state="translated">카트 구성 요소라는 이름의 생성 &lt;code&gt;cart&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="badfdfac2001a819696c03a850d29cef9aa6422c" translate="yes" xml:space="preserve">
          <source>Generate a cart service.</source>
          <target state="translated">카트 서비스를 생성하십시오.</target>
        </trans-unit>
        <trans-unit id="c99348b58236f56c88a04caf7f5cfe478c6053d9" translate="yes" xml:space="preserve">
          <source>Generate a component for the control.</source>
          <target state="translated">컨트롤의 컴포넌트를 생성하십시오.</target>
        </trans-unit>
        <trans-unit id="8a8880c7a24fd864a1f83c3bbba3a7fab142006e" translate="yes" xml:space="preserve">
          <source>Generate a new &lt;code&gt;SelectivePreloadingStrategy&lt;/code&gt; service.</source>
          <target state="translated">새로운 &lt;code&gt;SelectivePreloadingStrategy&lt;/code&gt; 서비스를 생성하십시오 .</target>
        </trans-unit>
        <trans-unit id="10929705c56473f7c00eec3a96223277b08f04e8" translate="yes" xml:space="preserve">
          <source>Generate a new component for product details. Give the component the name &lt;code&gt;product-details&lt;/code&gt;.</source>
          <target state="translated">제품 세부 사항을위한 새 구성 요소를 생성하십시오. 구성 요소에 &lt;code&gt;product-details&lt;/code&gt; 이름을 지정 하십시오 .</target>
        </trans-unit>
        <trans-unit id="4ca63d5f33e5423d7c86025408ad0a44ef417e22" translate="yes" xml:space="preserve">
          <source>Generate a new component named &lt;code&gt;shipping&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;shipping&lt;/code&gt; 이라는 새 구성 요소를 생성하십시오 .</target>
        </trans-unit>
        <trans-unit id="6cf6a25679c333cc1e9c81a8f44d1a7e50841d1d" translate="yes" xml:space="preserve">
          <source>Generate a new component to compose the message.</source>
          <target state="translated">메시지를 작성하기 위해 새 구성 요소를 생성하십시오.</target>
        </trans-unit>
        <trans-unit id="51451a8e0a189a0e3626c7ca708b659e18662a1f" translate="yes" xml:space="preserve">
          <source>Generate a sample application to follow the walkthrough.</source>
          <target state="translated">연습을 따라 샘플 응용 프로그램을 생성하십시오.</target>
        </trans-unit>
        <trans-unit id="e568c5d158a4dd0a7bf902bc271eaba5725baedb" translate="yes" xml:space="preserve">
          <source>Generate an &lt;code&gt;admin&lt;/code&gt; folder with a feature module file and a routing configuration file.</source>
          <target state="translated">기능 모듈 파일 및 라우팅 구성 파일을 사용 하여 &lt;code&gt;admin&lt;/code&gt; 폴더를 생성 하십시오.</target>
        </trans-unit>
        <trans-unit id="0331cbf7ccde4c03c2309a29076033363b99e2de" translate="yes" xml:space="preserve">
          <source>Generate links for each phone</source>
          <target state="translated">각 전화에 대한 링크 생성</target>
        </trans-unit>
        <trans-unit id="38e92ff7133dfc97972b0278b9c37d5608b4290b" translate="yes" xml:space="preserve">
          <source>Generate the class &lt;code&gt;src/app/in-memory-data.service.ts&lt;/code&gt; with the following command:</source>
          <target state="translated">다음 명령으로 &lt;code&gt;src/app/in-memory-data.service.ts&lt;/code&gt; 클래스를 생성하십시오 .</target>
        </trans-unit>
        <trans-unit id="cd63ede340ee7d3bb4fe765dd65657bf31fab426" translate="yes" xml:space="preserve">
          <source>Generates a 'stats.json' file which can be analyzed using tools such as 'webpack-bundle-analyzer'.</source>
          <target state="translated">'webpack-bundle-analyzer'와 같은 도구를 사용하여 분석 할 수있는 'stats.json'파일을 생성합니다.</target>
        </trans-unit>
        <trans-unit id="c68d6290e060eea666b076a5aa5a84ecbf27fe7c" translate="yes" xml:space="preserve">
          <source>Generates a new basic app definition in the &quot;projects&quot; subfolder of the workspace.</source>
          <target state="translated">작업 공간의 &quot;프로젝트&quot;하위 폴더에 새로운 기본 앱 정의를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="fa8d7f6f4eed1090704feca3332459e426dd6e10" translate="yes" xml:space="preserve">
          <source>Generates a new, generic enum definition for the given or default project.</source>
          <target state="translated">주어진 또는 기본 프로젝트에 대한 새로운 일반 열거 정의를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="ab848267d716e8a4bebfc6fc3df07a5bddaf3f06" translate="yes" xml:space="preserve">
          <source>Generates a new, generic route guard definition in the given or default project.</source>
          <target state="translated">주어진 또는 기본 프로젝트에서 새로운 일반 경로 보호 정의를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="ebc4b67cc162d00ec204096d82e460473d1c79ea" translate="yes" xml:space="preserve">
          <source>Generates a service worker config for production builds.</source>
          <target state="translated">프로덕션 빌드를위한 서비스 워커 구성을 생성합니다.</target>
        </trans-unit>
        <trans-unit id="86aaceaf2adaab13af57352592c0b404b5df3b21" translate="yes" xml:space="preserve">
          <source>Generates an app shell for running a server-side version of an app.</source>
          <target state="translated">서버 측 버전의 앱을 실행하기위한 앱 셸을 생성합니다.</target>
        </trans-unit>
        <trans-unit id="56a5676209bef860c9fa9fc0c49f512bd152fcac" translate="yes" xml:space="preserve">
          <source>Generates and/or modifies files based on a schematic.</source>
          <target state="translated">회로도를 기반으로 파일을 생성 및 / 또는 수정합니다.</target>
        </trans-unit>
        <trans-unit id="b062b8f1ffe2b49d3ab2ace012273f0104d17418" translate="yes" xml:space="preserve">
          <source>Generating a library with the Angular CLI automatically adds its path to the &lt;code&gt;tsconfig&lt;/code&gt; file. The Angular CLI uses the &lt;code&gt;tsconfig&lt;/code&gt; paths to tell the build system where to find the library.</source>
          <target state="translated">Angular CLI를 사용하여 라이브러리를 생성하면 해당 경로가 &lt;code&gt;tsconfig&lt;/code&gt; 파일에 자동으로 추가 됩니다. Angular CLI는 &lt;code&gt;tsconfig&lt;/code&gt; 경로를 사용하여 빌드 시스템에 라이브러리를 찾을 위치를 알려줍니다.</target>
        </trans-unit>
        <trans-unit id="9435f311ca9bf5c895db9c0e1c87157165c85f6a" translate="yes" xml:space="preserve">
          <source>Generating form controls with FormBuilder</source>
          <target state="translated">FormBuilder를 사용하여 양식 컨트롤 생성</target>
        </trans-unit>
        <trans-unit id="cea5d53723bbebadfc8d0290ebf665734c7c2abe" translate="yes" xml:space="preserve">
          <source>Generation schematics</source>
          <target state="translated">생성 회로도</target>
        </trans-unit>
        <trans-unit id="380e0d97ca6db455288de6ea75e1bcf1d6d656e1" translate="yes" xml:space="preserve">
          <source>Generation schematics are instructions for the &lt;code&gt;ng generate&lt;/code&gt; command. The documented sub-commands use the default Angular generation schematics, but you can specify a different schematic (in place of a sub-command) to generate an artifact defined in your library.</source>
          <target state="translated">생성 회로도는 &lt;code&gt;ng generate&lt;/code&gt; 명령에 대한 지침입니다 . 문서화 된 하위 명령은 기본 각도 생성 회로도를 사용하지만 라이브러리에 정의 된 아티팩트를 생성하기 위해 하위 명령 대신 다른 회로도를 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="68af3db5ab5d29c452ca8f7fe938836faf14b003" translate="yes" xml:space="preserve">
          <source>Generic DOM APIs, such as &lt;code&gt;document.createElement()&lt;/code&gt; or &lt;code&gt;document.querySelector()&lt;/code&gt;, return an element type that is appropriate for the specified arguments. For example, calling &lt;code&gt;document.createElement('&lt;a href=&quot;../api/router/routerlinkwithhref&quot;&gt;a&lt;/a&gt;')&lt;/code&gt; will return an &lt;code&gt;HTMLAnchorElement&lt;/code&gt;, which TypeScript knows has an &lt;code&gt;href&lt;/code&gt; property. Similarly, &lt;code&gt;document.createElement('div')&lt;/code&gt; will return an &lt;code&gt;HTMLDivElement&lt;/code&gt;, which TypeScript knows has no &lt;code&gt;href&lt;/code&gt; property.</source>
          <target state="translated">&lt;code&gt;document.createElement()&lt;/code&gt; 또는 &lt;code&gt;document.querySelector()&lt;/code&gt; 와 같은 일반 DOM API 는 지정된 인수에 적합한 요소 유형을 리턴합니다. 예를 들어 &lt;code&gt;document.createElement('&lt;a href=&quot;../api/router/routerlinkwithhref&quot;&gt;a&lt;/a&gt;')&lt;/code&gt; 호출 하면 &lt;code&gt;HTMLAnchorElement&lt;/code&gt; 가 반환 되며 TypeScript는 &lt;code&gt;href&lt;/code&gt; 속성을 가지고 있습니다. 마찬가지로 &lt;code&gt;document.createElement('div')&lt;/code&gt; 는 &lt;code&gt;HTMLDivElement&lt;/code&gt; 를 반환하며 , TypeScript는 &lt;code&gt;href&lt;/code&gt; 속성 이 없다는 것을 알고 있습니다.</target>
        </trans-unit>
        <trans-unit id="2d7dc0e436d9539f483e9a75feff826163b8b3c4" translate="yes" xml:space="preserve">
          <source>Generic selector that displays the string that matches the current value.</source>
          <target state="translated">현재 값과 일치하는 문자열을 표시하는 일반 선택기</target>
        </trans-unit>
        <trans-unit id="8c7a9565584738b6d0e52ee69981c1788da06bc1" translate="yes" xml:space="preserve">
          <source>Get a list of component types registered to this application. This list is populated even before the component is created.</source>
          <target state="translated">이 응용 프로그램에 등록 된 구성 요소 유형 목록을 가져옵니다. 이 목록은 구성 요소를 작성하기 전에 채워집니다.</target>
        </trans-unit>
        <trans-unit id="ba71eb4fd90a686961b741cb833ffd4a54e02338" translate="yes" xml:space="preserve">
          <source>Get a list of components registered to this application.</source>
          <target state="translated">이 응용 프로그램에 등록 된 구성 요소 목록을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="b8ae68bbf676af7d75792ca7c88e455618f73678" translate="yes" xml:space="preserve">
          <source>Get a promise that resolves when the fixture is stable.</source>
          <target state="translated">고정 장치가 안정적 일 때 해결되는 약속을 얻으십시오.</target>
        </trans-unit>
        <trans-unit id="48f71941fbc082e5baabc9d6a22ffacc94a5e225" translate="yes" xml:space="preserve">
          <source>Get a promise that resolves when the ui state is stable following animations.</source>
          <target state="translated">애니메이션에 따라 UI 상태가 안정적 일 때 해결되는 약속을 얻으십시오.</target>
        </trans-unit>
        <trans-unit id="3ef6faa34773e978c631aa1e80c4c1df032de2f4" translate="yes" xml:space="preserve">
          <source>Get a testability hook associated with the application</source>
          <target state="translated">응용 프로그램과 관련된 테스트 가능성 후크 확보</target>
        </trans-unit>
        <trans-unit id="11b5a80e416cf90b3962bd51ff1f7224173e22c7" translate="yes" xml:space="preserve">
          <source>Get all registered applications(root elements)</source>
          <target state="translated">등록 된 모든 응용 프로그램 가져 오기 (루트 요소)</target>
        </trans-unit>
        <trans-unit id="85c4a7809e2e093fc80138814b72ed55768463ff" translate="yes" xml:space="preserve">
          <source>Get all registered testabilities</source>
          <target state="translated">등록 된 모든 증거를 얻으십시오</target>
        </trans-unit>
        <trans-unit id="1ec968837a76ff8234b189b68d3ee3766251e92a" translate="yes" xml:space="preserve">
          <source>Get hero by id</source>
          <target state="translated">ID로 영웅 얻기</target>
        </trans-unit>
        <trans-unit id="c1355577bacd5acd927b269d302c2831ae4e0915" translate="yes" xml:space="preserve">
          <source>Get hero data</source>
          <target state="translated">영웅 데이터 가져 오기</target>
        </trans-unit>
        <trans-unit id="5d5dde643594b9932dc428da3a787b7acb7f3a04" translate="yes" xml:space="preserve">
          <source>Get heroes with &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; 로 영웅을 얻으십시오</target>
        </trans-unit>
        <trans-unit id="09a7bb30075eafdbd90429b490369ebe14a764e4" translate="yes" xml:space="preserve">
          <source>Get injected services</source>
          <target state="translated">주사 서비스 받기</target>
        </trans-unit>
        <trans-unit id="131266c3e0d171880d06a0a24a19f06f7aa83966" translate="yes" xml:space="preserve">
          <source>Get the &lt;code&gt;&lt;a href=&quot;abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;&lt;/code&gt; at the given &lt;code&gt;index&lt;/code&gt; in the array.</source>
          <target state="translated">가져 오기 &lt;code&gt;&lt;a href=&quot;abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;&lt;/code&gt; 를 주어진에서 &lt;code&gt;index&lt;/code&gt; 배열한다.</target>
        </trans-unit>
        <trans-unit id="dd6bc06b4de90fcac5fde67fdc56d3e38702afe3" translate="yes" xml:space="preserve">
          <source>Get the XSRF token to use with an outgoing request.</source>
          <target state="translated">발신 요청에 사용할 XSRF 토큰을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="e3da1c5459c7f2bceef1e65095d844c3b2bc904b" translate="yes" xml:space="preserve">
          <source>Get the number of pending requests</source>
          <target state="translated">보류중인 요청 수 가져 오기</target>
        </trans-unit>
        <trans-unit id="24c85ef5faa8219f5fd24863a828f95a77b88997" translate="yes" xml:space="preserve">
          <source>Get the project configuration</source>
          <target state="translated">프로젝트 구성 가져 오기</target>
        </trans-unit>
        <trans-unit id="e9d01545a58adde7a54d98c34d7e7ab8358d1c1b" translate="yes" xml:space="preserve">
          <source>Get the route that created it</source>
          <target state="translated">그것을 만든 경로를 가져옵니다</target>
        </trans-unit>
        <trans-unit id="9fd63aabfc07cc505e1b32d93e73e02ae71e179f" translate="yes" xml:space="preserve">
          <source>Get the title of the current HTML document.</source>
          <target state="translated">현재 HTML 문서의 제목을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="853d5cf0ddb8b0b63460f74da94f03814abcef8b" translate="yes" xml:space="preserve">
          <source>Get the value corresponding to a key. Return &lt;code&gt;defaultValue&lt;/code&gt; if key is not found.</source>
          <target state="translated">키에 해당하는 값을 가져옵니다. 키를 찾지 못하면 &lt;code&gt;defaultValue&lt;/code&gt; 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="e633a889d343373bc7733d29c137bc6d6d19bbfe" translate="yes" xml:space="preserve">
          <source>Get user input from a template reference variable</source>
          <target state="translated">템플릿 참조 변수에서 사용자 입력 받기</target>
        </trans-unit>
        <trans-unit id="0eb96ff9664f97bce4773ae26b4ff46b6eeca582" translate="yes" xml:space="preserve">
          <source>Get user input from the $event object</source>
          <target state="translated">$ event 객체에서 사용자 입력 받기</target>
        </trans-unit>
        <trans-unit id="b52d196c4acb500b8a1fce9427fea4967818a0d3" translate="yes" xml:space="preserve">
          <source>GetTestability</source>
          <target state="translated">GetTestability</target>
        </trans-unit>
        <trans-unit id="f3caee9190ed9adb6e55cf7ac6826119198008b4" translate="yes" xml:space="preserve">
          <source>Gets the current instance of the &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt;. Usually unnecessary because the static class methods of the &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; class are typically sufficient. The &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; instance exposes a few rarely used members that are not available as static methods.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; 의 현재 인스턴스를 가져 옵니다 . 일반적으로 &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; 클래스 의 정적 클래스 메소드로 충분 하므로 불필요합니다 . &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; 인스턴스는 정적 메서드로 사용할 수없는 몇 거의 사용되지 않는 멤버를 노출합니다.</target>
        </trans-unit>
        <trans-unit id="0c7990050a50ffe200ff6702af0ec26fd388eaa9" translate="yes" xml:space="preserve">
          <source>Getting Started Tutorial</source>
          <target state="translated">시작하기 자습서</target>
        </trans-unit>
        <trans-unit id="8763b134008e61a206a3cc2b040b464b4e2cf711" translate="yes" xml:space="preserve">
          <source>Getting Started assumes the &lt;a href=&quot;https://stackblitz.com/&quot;&gt;StackBlitz&lt;/a&gt; online development environment. To learn how to export an app from StackBlitz to your local environment, skip ahead to the &lt;a href=&quot;start/deployment&quot;&gt;Deployment&lt;/a&gt; section.</source>
          <target state="translated">시작하기는 &lt;a href=&quot;https://stackblitz.com/&quot;&gt;StackBlitz&lt;/a&gt; 온라인 개발 환경을 가정 합니다. StackBlitz에서 로컬 환경으로 앱을 내보내는 방법을 알아 보려면 &lt;a href=&quot;start/deployment&quot;&gt;배포&lt;/a&gt; 섹션으로 건너 뜁니다 .</target>
        </trans-unit>
        <trans-unit id="42f15af89ce6b5fe82800a2db148f3aa4efa31ef" translate="yes" xml:space="preserve">
          <source>Getting Started with Angular: Your First App</source>
          <target state="translated">Angular 시작하기 : 첫 번째 앱</target>
        </trans-unit>
        <trans-unit id="0ac5f60676cb5cfe60d16c31b4d7a48edc719d03" translate="yes" xml:space="preserve">
          <source>Getting error details</source>
          <target state="translated">오류 정보 얻기</target>
        </trans-unit>
        <trans-unit id="1c8b693c2abb7caf69dbccffcf1bf34248f8757f" translate="yes" xml:space="preserve">
          <source>Getting notified of &lt;em&gt;available&lt;/em&gt; updates. These are new versions of the app to be loaded if the page is refreshed.</source>
          <target state="translated">&lt;em&gt;사용 가능한&lt;/em&gt; 업데이트 알림 받기 . 페이지를 새로 고치면로드 할 앱의 새로운 버전입니다.</target>
        </trans-unit>
        <trans-unit id="eff07e16ec59ae1e3afd8560950554feb087b28f" translate="yes" xml:space="preserve">
          <source>Getting notified of new releases</source>
          <target state="translated">새로운 릴리스에 대한 알림 받기</target>
        </trans-unit>
        <trans-unit id="1156bdd0a2f15d9cd4bf28ddf6329c03307719ae" translate="yes" xml:space="preserve">
          <source>Getting notified of update &lt;em&gt;activation&lt;/em&gt;. This is when the service worker starts serving a new version of the app immediately.</source>
          <target state="translated">업데이트 &lt;em&gt;활성화&lt;/em&gt; 알림 받기 . 서비스 담당자가 즉시 새 버전의 앱 서비스를 제공하기 시작합니다.</target>
        </trans-unit>
        <trans-unit id="76e7a3a3f9c225fe820ba7e9cff10ea2a73b79a1" translate="yes" xml:space="preserve">
          <source>Getting started</source>
          <target state="translated">시작하기</target>
        </trans-unit>
        <trans-unit id="58e950b388f2b51607668bd15dd44d766f8c8ea1" translate="yes" xml:space="preserve">
          <source>Getting started with service workers</source>
          <target state="translated">서비스 근로자 시작하기</target>
        </trans-unit>
        <trans-unit id="5c1fd8bd19e93f683c985727a839dbc24e11a6e9" translate="yes" xml:space="preserve">
          <source>GitHub pages</source>
          <target state="translated">GitHub 페이지</target>
        </trans-unit>
        <trans-unit id="879351c6d9b4176969123a28d55e3bc051885425" translate="yes" xml:space="preserve">
          <source>Give it a &lt;code&gt;&lt;a href=&quot;../api/router/route#loadChildren&quot;&gt;loadChildren&lt;/a&gt;&lt;/code&gt; property instead of a &lt;code&gt;children&lt;/code&gt; property. The &lt;code&gt;&lt;a href=&quot;../api/router/route#loadChildren&quot;&gt;loadChildren&lt;/a&gt;&lt;/code&gt; property takes a function that returns a promise using the browser's built-in syntax for lazy loading code using dynamic imports &lt;code&gt;import('...')&lt;/code&gt;. The path is the location of the &lt;code&gt;AdminModule&lt;/code&gt; (relative to the app root). After the code is requested and loaded, the &lt;code&gt;Promise&lt;/code&gt; resolves an object that contains the &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt;, in this case the &lt;code&gt;AdminModule&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;children&lt;/code&gt; 속성 대신 &lt;code&gt;&lt;a href=&quot;../api/router/route#loadChildren&quot;&gt;loadChildren&lt;/a&gt;&lt;/code&gt; 속성을 제공하십시오 . &lt;code&gt;&lt;a href=&quot;../api/router/route#loadChildren&quot;&gt;loadChildren&lt;/a&gt;&lt;/code&gt; 의 속성은 반환이 브라우저를 사용하여 약속이 내장되어 있다는 구문 게으른 로딩 코드를 동적 수입 사용하여 기능을한다 &lt;code&gt;import('...')&lt;/code&gt; . 경로는 &lt;code&gt;AdminModule&lt;/code&gt; 의 위치입니다 (앱 루트 기준). 코드가 요청되고로드 된 후 &lt;code&gt;Promise&lt;/code&gt; 는 &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 이 포함 된 개체 ( 이 경우 &lt;code&gt;AdminModule&lt;/code&gt; )를 확인 합니다.</target>
        </trans-unit>
        <trans-unit id="00800e550f2e87414dda167ff182d9d9eabf5ca1" translate="yes" xml:space="preserve">
          <source>Give the live example anchor a custom label and tooltip by setting the &lt;code&gt;title&lt;/code&gt; attribute.</source>
          <target state="translated">&lt;code&gt;title&lt;/code&gt; 속성 을 설정하여 라이브 예제 앵커에 사용자 정의 레이블 및 툴팁을 제공하십시오 .</target>
        </trans-unit>
        <trans-unit id="6839d82e03f5268d9a7cc97802db76c48c8cce6e" translate="yes" xml:space="preserve">
          <source>Given</source>
          <target state="translated">Given</target>
        </trans-unit>
        <trans-unit id="d407a28bf26b4dade30f163a570d19e4c3992b48" translate="yes" xml:space="preserve">
          <source>Given the configuration above, when the browser URL for this application becomes &lt;code&gt;/heroes&lt;/code&gt;, the router matches that URL to the route path &lt;code&gt;/heroes&lt;/code&gt; and displays the &lt;code&gt;HeroListComponent&lt;/code&gt; as a sibling element to the &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; that you've placed in the host component's template.</source>
          <target state="translated">위의 구성에서이 응용 프로그램의 브라우저 URL이 &lt;code&gt;/heroes&lt;/code&gt; 가되면 라우터는 해당 URL을 경로 경로 &lt;code&gt;/heroes&lt;/code&gt; 와 일치 시키고 호스트 구성 요소의 템플릿에 배치 한 &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; 의 형제 요소로 &lt;code&gt;HeroListComponent&lt;/code&gt; 를 표시합니다 .</target>
        </trans-unit>
        <trans-unit id="8868a65f6b530e81d17de3561e83d4a3f7803b25" translate="yes" xml:space="preserve">
          <source>Given the following example route, the router will lazy load the associated module on demand using the browser native import system.</source>
          <target state="translated">다음 예제 라우트가 주어지면, 라우터는 브라우저 고유 반입 시스템을 사용하여 요청시 연관된 모듈을 지연로드합니다.</target>
        </trans-unit>
        <trans-unit id="cd9ae9112239a7cf0db3bc111e0f8b2934f009e6" translate="yes" xml:space="preserve">
          <source>Globs of files to include, relative to workspace or project root. There are 2 special cases:</source>
          <target state="translated">작업 공간 또는 프로젝트 루트와 관련하여 포함 할 파일의 덩어리. 두 가지 특별한 경우가 있습니다.</target>
        </trans-unit>
        <trans-unit id="d916a5822a35d3011d7f0297a340fb2299250c03" translate="yes" xml:space="preserve">
          <source>Globs to exclude from code coverage.</source>
          <target state="translated">코드 적용 범위에서 제외 할 글로브.</target>
        </trans-unit>
        <trans-unit id="7427cf697be16a4ec1d916910128a59d920125e7" translate="yes" xml:space="preserve">
          <source>Glossary</source>
          <target state="translated">Glossary</target>
        </trans-unit>
        <trans-unit id="e3915ceb49c4c471e23a11783840fc00452afb0b" translate="yes" xml:space="preserve">
          <source>Go to definition</source>
          <target state="translated">정의로 이동</target>
        </trans-unit>
        <trans-unit id="044a0ddb42ed2445e5c494c3fac7abbfd02ce690" translate="yes" xml:space="preserve">
          <source>Go to the</source>
          <target state="translated">로 이동</target>
        </trans-unit>
        <trans-unit id="b516f5d1cfcbe9ea408daa0114d4bf66a92c130b" translate="yes" xml:space="preserve">
          <source>Go to the &lt;code&gt;&amp;lt;lib-root&amp;gt;/schematics/my-service/&lt;/code&gt; folder.</source>
          <target state="translated">로 이동 &lt;code&gt;&amp;lt;lib-root&amp;gt;/schematics/my-service/&lt;/code&gt; 폴더에 있습니다.</target>
        </trans-unit>
        <trans-unit id="e899859d236a817b6de8def24c888bb63a6c57f6" translate="yes" xml:space="preserve">
          <source>Go to the &lt;strong&gt;Network tab&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;네트워크 탭으로&lt;/strong&gt; 이동 &lt;strong&gt;하십시오&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="32954252eb2c7179519aa1ba797bdaa709312ce5" translate="yes" xml:space="preserve">
          <source>Go to the collection folder, install your npm dependencies, and open your new collection in your favorite editor to see the generated files. For example, if you are using VSCode:</source>
          <target state="translated">콜렉션 폴더로 이동하여 npm 종속성을 설치 한 후 선호하는 편집기에서 새 콜렉션을 열어 생성 된 파일을보십시오. 예를 들어 VSCode를 사용하는 경우 :</target>
        </trans-unit>
        <trans-unit id="3b81592b501bfa044e9f6a43275001ed154c5f39" translate="yes" xml:space="preserve">
          <source>Go to the workspace directory and launch the application.</source>
          <target state="translated">작업 공간 디렉토리로 이동하여 애플리케이션을 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="664d0bc25c3d434ffaffbb6c6e437f0e9b1594b0" translate="yes" xml:space="preserve">
          <source>Go to the workspace folder (&lt;code&gt;my-app&lt;/code&gt;).</source>
          <target state="translated">작업 공간 폴더 ( &lt;code&gt;my-app&lt;/code&gt; )로 이동하십시오.</target>
        </trans-unit>
        <trans-unit id="6db6e2bfc84d579abc739b3d030ca7f64fb44ae9" translate="yes" xml:space="preserve">
          <source>Go undercover with these two spy hooks to discover when an element is initialized or destroyed.</source>
          <target state="translated">이 두 스파이 훅으로 잠복 해 요소가 초기화되거나 파괴되는시기를 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="22e5dcc47a0ac764dc09b2d910699120c526df7a" translate="yes" xml:space="preserve">
          <source>Going forward, we will focus our efforts related to web workers around their primary use case of offloading CPU-intensive, non-critical work needed for initial rendering (such as in-memory search and image processing). Learn more in the &lt;a href=&quot;web-worker&quot;&gt;guide to Using Web Workers with the Angular CLI&lt;/a&gt;.</source>
          <target state="translated">앞으로는 메모리 렌더링 및 이미지 처리와 같은 초기 렌더링에 필요한 CPU 집약적이고 중요하지 않은 작업을 오프로드하는 주요 사용 사례를 중심으로 웹 작업자와 관련된 노력을 집중할 것입니다. &lt;a href=&quot;web-worker&quot;&gt;Angular CLI와 함께 웹 워커 사용 안내서&lt;/a&gt; 에서 자세히 알아보십시오 .</target>
        </trans-unit>
        <trans-unit id="11a15ba018ceec88b818afcf38c41b171d4ab615" translate="yes" xml:space="preserve">
          <source>Good animations intuitively call the user's attention to where it is needed.</source>
          <target state="translated">좋은 애니메이션은 직관적으로 필요한 곳에 사용자의주의를 환기시킵니다.</target>
        </trans-unit>
        <trans-unit id="c8d03faec6d275f412f7e3b57f8c17879e0da4b5" translate="yes" xml:space="preserve">
          <source>Google, Bing, Facebook, Twitter, and other social media sites rely on web crawlers to index your application content and make that content searchable on the web. These web crawlers may be unable to navigate and index your highly interactive Angular application as a human user could do.</source>
          <target state="translated">Google, Bing, Facebook, Twitter 및 기타 소셜 미디어 사이트는 웹 크롤러를 사용하여 응용 프로그램 컨텐츠를 색인화하고 해당 컨텐츠를 웹에서 검색 할 수 있도록합니다. 이러한 웹 크롤러는 사용자가 할 수있는 것처럼 대화 형 Angular 응용 프로그램을 탐색하고 색인을 생성하지 못할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="dd17342cb47b948d64f169d73cfeec3f8b3e3f31" translate="yes" xml:space="preserve">
          <source>Grammar</source>
          <target state="translated">Grammar</target>
        </trans-unit>
        <trans-unit id="c12060bafa9ab7b15b6ca3832d6af3230ce42f70" translate="yes" xml:space="preserve">
          <source>Group separator for currency values (fallback to &lt;code&gt;Group&lt;/code&gt;). Example: $2,345.67</source>
          <target state="translated">통화 값에 대한 그룹 구분 기호 ( &lt;code&gt;Group&lt;/code&gt; 으로 대체 ) 예 : $ 2,345.67</target>
        </trans-unit>
        <trans-unit id="2770f72df0af3038ef1a0343ee52b5941837423e" translate="yes" xml:space="preserve">
          <source>Group sibling elements with &amp;lt;ng-container&amp;gt;</source>
          <target state="translated">&amp;lt;ng-container&amp;gt;를 사용하여 형제 요소 그룹화</target>
        </trans-unit>
        <trans-unit id="74434544ea4ad6607f75706c9a1d9d5850e5f00b" translate="yes" xml:space="preserve">
          <source>Grouped animations are useful when a series of styles must be animated at different starting times and closed off at different ending times.</source>
          <target state="translated">그룹화 된 애니메이션은 일련의 스타일을 다른 시작 시간에 애니메이션화하고 다른 종료 시간에 닫아야하는 경우에 유용합니다.</target>
        </trans-unit>
        <trans-unit id="5a4358aa8c9827657281c95ebc1a61485d3b94c0" translate="yes" xml:space="preserve">
          <source>Grouping all custom events under this type ensures they will be handled and forwarded by all implementations of interceptors.</source>
          <target state="translated">이 유형으로 모든 사용자 정의 이벤트를 그룹화하면 인터셉터의 모든 구현에서 이벤트를 처리하고 전달할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="022f8ed1b5baa1c6c383d3cd42ee431d41e6c665" translate="yes" xml:space="preserve">
          <source>Grouping form controls</source>
          <target state="translated">양식 컨트롤 그룹화</target>
        </trans-unit>
        <trans-unit id="9ae241754a154ca19caabd604845bbd97a55ee45" translate="yes" xml:space="preserve">
          <source>Grouping separator, typically for thousands. For &lt;code&gt;en-US&lt;/code&gt;, the comma character. Example: 2&lt;code&gt;,&lt;/code&gt;345.67</source>
          <target state="translated">일반적으로 수천의 그룹화 구분 기호입니다. 들어 &lt;code&gt;en-US&lt;/code&gt; , 쉼표 문자. 예 : 2 &lt;code&gt;,&lt;/code&gt; 345.67</target>
        </trans-unit>
        <trans-unit id="6326b449098dfdd85370d4e7f92d36b7b17a3cdc" translate="yes" xml:space="preserve">
          <source>Guard against null</source>
          <target state="translated">null로부터 보호</target>
        </trans-unit>
        <trans-unit id="ab5327438e6b149abb6275cce81dbe7458e8eca1" translate="yes" xml:space="preserve">
          <source>Guard the admin feature</source>
          <target state="translated">관리자 기능 보호</target>
        </trans-unit>
        <trans-unit id="67de3c63a9bd94b74bfc86944368ab7bcdf6d849" translate="yes" xml:space="preserve">
          <source>Guards</source>
          <target state="translated">Guards</target>
        </trans-unit>
        <trans-unit id="d37b7da1c8eb7bd5978035fc4081065ea96046b6" translate="yes" xml:space="preserve">
          <source>GuardsCheckEnd</source>
          <target state="translated">GuardsCheckEnd</target>
        </trans-unit>
        <trans-unit id="965b3bfde4f2655376c67aa3734795d0e8a8cc08" translate="yes" xml:space="preserve">
          <source>GuardsCheckStart</source>
          <target state="translated">GuardsCheckStart</target>
        </trans-unit>
        <trans-unit id="bf073fae640ded81eeb7a4cee70faff4a623c16c" translate="yes" xml:space="preserve">
          <source>Guide</source>
          <target state="translated">Guide</target>
        </trans-unit>
        <trans-unit id="4ac7a3e3bac944a26bbaf448ea2cfcf2565e9e00" translate="yes" xml:space="preserve">
          <source>Guide pages</source>
          <target state="translated">가이드 페이지</target>
        </trans-unit>
        <trans-unit id="141d1d74d8a6b3e7a7f1418ef539a53ce746ef34" translate="yes" xml:space="preserve">
          <source>Guidelines</source>
          <target state="translated">Guidelines</target>
        </trans-unit>
        <trans-unit id="6f2413a65c9297cdd43260f7f29f49c1d190ee16" translate="yes" xml:space="preserve">
          <source>Guides are rich in examples of working Angular code. Example code can be commands entered in a terminal window, a fragment of TypeScript or HTML, or an entire code file.</source>
          <target state="translated">가이드는 작동하는 Angular 코드의 예가 풍부합니다. 예제 코드는 터미널 창, TypeScript 또는 HTML 조각 또는 전체 코드 파일에 입력 된 명령 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7cf184f4c67ad58283ecb19349720b0cae756829" translate="yes" xml:space="preserve">
          <source>H</source>
          <target state="translated">H</target>
        </trans-unit>
        <trans-unit id="36ba7465769b4ff0ab60fcd125dcc264416fb8e1" translate="yes" xml:space="preserve">
          <source>H (13)</source>
          <target state="translated">H (13)</target>
        </trans-unit>
        <trans-unit id="f411883d06b3723fb25fc201defabd4ea8ec9ca9" translate="yes" xml:space="preserve">
          <source>HAMMER_GESTURE_CONFIG</source>
          <target state="translated">HAMMER_GESTURE_CONFIG</target>
        </trans-unit>
        <trans-unit id="8a892694247fc243c4878ab48986c7e386dc9bbf" translate="yes" xml:space="preserve">
          <source>HAMMER_LOADER</source>
          <target state="translated">HAMMER_LOADER</target>
        </trans-unit>
        <trans-unit id="fc5d4b9117ba9e87388174aee4f4970bdfe8d066" translate="yes" xml:space="preserve">
          <source>HH</source>
          <target state="translated">HH</target>
        </trans-unit>
        <trans-unit id="f2a5ccfc6d4dc3ce20c15a7f6d6508a6af92aee9" translate="yes" xml:space="preserve">
          <source>HH (13)</source>
          <target state="translated">HH (13)</target>
        </trans-unit>
        <trans-unit id="1bb1809c1d200915be81fd60b4b960599011f45e" translate="yes" xml:space="preserve">
          <source>HTML attribute key</source>
          <target state="translated">HTML 속성 키</target>
        </trans-unit>
        <trans-unit id="07e975607a7803b33cacfc4d5f82151d2712eef5" translate="yes" xml:space="preserve">
          <source>HTML attribute vs. DOM property</source>
          <target state="translated">HTML 속성과 DOM 속성</target>
        </trans-unit>
        <trans-unit id="492f8eb8a6d365059df263e1a0ea62251a5d2784" translate="yes" xml:space="preserve">
          <source>HTML between component element tags.</source>
          <target state="translated">컴포넌트 요소 태그 사이의 HTML</target>
        </trans-unit>
        <trans-unit id="a28f9683020cbd43849f3983827dd44d9e423a2f" translate="yes" xml:space="preserve">
          <source>HTML constructed on the server is vulnerable to injection attacks. Injecting template code into an Angular application is the same as injecting executable code into the application: it gives the attacker full control over the application. To prevent this, use a templating language that automatically escapes values to prevent XSS vulnerabilities on the server. Don't generate Angular templates on the server side using a templating language; doing this carries a high risk of introducing template-injection vulnerabilities.</source>
          <target state="translated">서버에 구축 된 HTML은 주입 공격에 취약합니다. Angular 응용 프로그램에 템플릿 코드를 삽입하는 것은 응용 프로그램에 실행 코드를 삽입하는 것과 동일합니다. 공격자는 응용 프로그램을 완전히 제어 할 수 있습니다. 이를 방지하려면 서버의 XSS 취약성을 방지하기 위해 자동으로 값을 이스케이프하는 템플릿 언어를 사용하십시오. 템플릿 언어를 사용하여 서버 측에서 Angular 템플릿을 생성하지 마십시오. 이렇게하면 템플릿 주입 취약점이 발생할 위험이 높습니다.</target>
        </trans-unit>
        <trans-unit id="f3604a53d257e638a4136c7cb9f81c3eac396475" translate="yes" xml:space="preserve">
          <source>HTML in templates</source>
          <target state="translated">템플릿의 HTML</target>
        </trans-unit>
        <trans-unit id="e4e38933cb42317719499012ef3485fb636d8592" translate="yes" xml:space="preserve">
          <source>HTML is the language of the Angular template. Almost all HTML syntax is valid template syntax. The &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; element is a notable exception; it is forbidden, eliminating the risk of script injection attacks. In practice, &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; is ignored and a warning appears in the browser console. See the &lt;a href=&quot;security&quot;&gt;Security&lt;/a&gt; page for details.</source>
          <target state="translated">HTML은 Angular 템플릿의 언어입니다. 거의 모든 HTML 구문은 유효한 템플릿 구문입니다. &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 요소는 주목할만한 예외이고; 스크립트 삽입 공격의 위험을 제거하여 금지됩니다. 실제로 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 는 무시되고 브라우저 콘솔에 경고가 나타납니다. 자세한 내용은 &lt;a href=&quot;security&quot;&gt;보안&lt;/a&gt; 페이지를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="340a173a8095d43878d65264cab1c80c8a688b97" translate="yes" xml:space="preserve">
          <source>HTML5 URLs and the &lt;em&gt;&amp;lt;base href&amp;gt;&lt;/em&gt;</source>
          <target state="translated">HTML5 URL 및 &lt;em&gt;&amp;lt;base href&amp;gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="b12cfc00134093ccb48a5b7872f416c834e69064" translate="yes" xml:space="preserve">
          <source>HTML5 has a set of built-in attributes that you can use for native validation, including &lt;code&gt;required&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/forms/minlengthvalidator&quot;&gt;minlength&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;../api/forms/maxlengthvalidator&quot;&gt;maxlength&lt;/a&gt;&lt;/code&gt;. You can take advantage of these optional attributes on your form input elements. Add the &lt;code&gt;required&lt;/code&gt; attribute to the &lt;code&gt;firstName&lt;/code&gt; input element.</source>
          <target state="translated">HTML5에는 &lt;code&gt;required&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;../api/forms/minlengthvalidator&quot;&gt;minlength&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;../api/forms/maxlengthvalidator&quot;&gt;maxlength&lt;/a&gt;&lt;/code&gt; 를 포함하여 기본 유효성 검증에 사용할 수있는 내장 속성 세트가 있습니다 . 양식 입력 요소에서 이러한 선택적 속성을 활용할 수 있습니다. &lt;code&gt;firstName&lt;/code&gt; 입력 요소에 &lt;code&gt;required&lt;/code&gt; 속성을 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="4b064c74e2d95ac6bbf994c38b1978dcda8c19b8" translate="yes" xml:space="preserve">
          <source>HTML5 style navigation is the router default. In the &lt;a href=&quot;router#browser-url-styles&quot;&gt;LocationStrategy and browser URL styles&lt;/a&gt; Appendix, learn why HTML5 style is preferred, how to adjust its behavior, and how to switch to the older hash (#) style, if necessary.</source>
          <target state="translated">HTML5 스타일 탐색이 라우터 기본값입니다. 에서 &lt;a href=&quot;router#browser-url-styles&quot;&gt;LocationStrategy 및 브라우저 URL 스타일&lt;/a&gt; 어떻게 이전 해시 (#) 스타일로 전환하려면, 필요한 경우 HTML5 스타일이 동작을 조정하는 방법, 바람직하고, 왜 부록, 배운다.</target>
        </trans-unit>
        <trans-unit id="f40b27d6b8b9a4fc3827264c1da16a04ecf4d094" translate="yes" xml:space="preserve">
          <source>HTTP</source>
          <target state="translated">HTTP</target>
        </trans-unit>
        <trans-unit id="26c5442778a84663ac39f3f58df571733d2d4e4e" translate="yes" xml:space="preserve">
          <source>HTTP Guide</source>
          <target state="translated">HTTP 안내서</target>
        </trans-unit>
        <trans-unit id="fd91615c44820cfc2fae82595a3bc14b2eb0eaeb" translate="yes" xml:space="preserve">
          <source>HTTP Request Example</source>
          <target state="translated">HTTP 요청 예</target>
        </trans-unit>
        <trans-unit id="2ee53c95b1d46b2119a03c49e611077033b4d0b3" translate="yes" xml:space="preserve">
          <source>HTTP headers</source>
          <target state="translated">HTTP 헤더</target>
        </trans-unit>
        <trans-unit id="99a12a06813b55128f34a3ffcf4599fc8b574d15" translate="yes" xml:space="preserve">
          <source>HTTP interceptors</source>
          <target state="translated">HTTP 인터셉터</target>
        </trans-unit>
        <trans-unit id="377c79e5335f24017fbabcfef2f280c264cb9026" translate="yes" xml:space="preserve">
          <source>HTTP is a request/response protocol. You make a request, it returns a single response.</source>
          <target state="translated">HTTP는 요청 / 응답 프로토콜입니다. 요청하면 단일 응답을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="23c536246155df78480fbf53c197cd35d8be71a6" translate="yes" xml:space="preserve">
          <source>HTTP options</source>
          <target state="translated">HTTP 옵션</target>
        </trans-unit>
        <trans-unit id="23854c0ee148c64157750f67dff9661df6ecf531" translate="yes" xml:space="preserve">
          <source>HTTP options.</source>
          <target state="translated">HTTP 옵션.</target>
        </trans-unit>
        <trans-unit id="22c6da5fbbe1f2761b83f89519aa28322b6e37b1" translate="yes" xml:space="preserve">
          <source>HTTP requests are cancellable through the &lt;code&gt;&lt;a href=&quot;../api/service-worker/swpush#unsubscribe&quot;&gt;unsubscribe()&lt;/a&gt;&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/service-worker/swpush#unsubscribe&quot;&gt;unsubscribe()&lt;/a&gt;&lt;/code&gt; 메소드를 통해 HTTP 요청을 취소 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8c21340afccc68e99a03b607490230cf7a0a69b9" translate="yes" xml:space="preserve">
          <source>HTTP-level vulnerabilities</source>
          <target state="translated">HTTP 수준의 취약점</target>
        </trans-unit>
        <trans-unit id="491d5ca30c6cdaec0c9db018ec25d915b8026c94" translate="yes" xml:space="preserve">
          <source>HTTP_INTERCEPTORS</source>
          <target state="translated">HTTP_INTERCEPTORS</target>
        </trans-unit>
        <trans-unit id="23a1a53228fc2ea6cc40c7cd90fef4dabbd8264b" translate="yes" xml:space="preserve">
          <source>Had the navigation path been more dynamic, you could have bound to a template expression that returned an array of route link parameters (the &lt;em&gt;link parameters array&lt;/em&gt;). The router resolves that array into a complete URL.</source>
          <target state="translated">탐색 경로가보다 동적 인 경우 경로 링크 매개 &lt;em&gt;변수 배열&lt;/em&gt; ( &lt;em&gt;링크 매개 변수 배열&lt;/em&gt; ) 을 리턴하는 템플리트 표현식에 바인드 할 수 있습니다 . 라우터는 해당 배열을 완전한 URL로 분석합니다.</target>
        </trans-unit>
        <trans-unit id="e1776f9791d5bf9ef9c8da34a7ea4a43d8c3e3d6" translate="yes" xml:space="preserve">
          <source>Had the user clicked the &lt;em&gt;Update Hero&lt;/em&gt; button, the log would show another &lt;code&gt;&lt;a href=&quot;../api/core/onchanges&quot;&gt;OnChanges&lt;/a&gt;&lt;/code&gt; and two more triplets of &lt;code&gt;&lt;a href=&quot;../api/core/docheck&quot;&gt;DoCheck&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/core/aftercontentchecked&quot;&gt;AfterContentChecked&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/core/afterviewchecked&quot;&gt;AfterViewChecked&lt;/a&gt;&lt;/code&gt;. Clearly these three hooks fire &lt;em&gt;often&lt;/em&gt;. Keep the logic in these hooks as lean as possible!</source>
          <target state="translated">사용자가 &lt;em&gt;영웅 업데이트&lt;/em&gt; 버튼을 클릭하면 로그에 다른 &lt;code&gt;&lt;a href=&quot;../api/core/onchanges&quot;&gt;OnChanges&lt;/a&gt;&lt;/code&gt; 와 &lt;code&gt;&lt;a href=&quot;../api/core/docheck&quot;&gt;DoCheck&lt;/a&gt;&lt;/code&gt; 의 두 개의 트리플렛 , &lt;code&gt;&lt;a href=&quot;../api/core/aftercontentchecked&quot;&gt;AfterContentChecked&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;../api/core/afterviewchecked&quot;&gt;AfterViewChecked&lt;/a&gt;&lt;/code&gt; 가 표시 됩니다. 분명히이 세 갈고리는 &lt;em&gt;자주&lt;/em&gt; 발사 &lt;em&gt;됩니다&lt;/em&gt; . 이 고리의 논리를 최대한 간결하게 유지하십시오!</target>
        </trans-unit>
        <trans-unit id="2606db96e8f2465348fb29fccf7dd69fadcf053a" translate="yes" xml:space="preserve">
          <source>Had you clicked the browser's back button instead of the &quot;Back&quot; button, the app would have returned you to the heroes list as well. Angular app navigation updates the browser history as normal web navigation does.</source>
          <target state="translated">&quot;뒤로&quot;버튼 대신 브라우저의 뒤로 버튼을 클릭했다면 앱이 영웅 목록으로 돌아 왔을 것입니다. Angular 앱 탐색은 일반적인 웹 탐색과 마찬가지로 브라우저 기록을 업데이트합니다.</target>
        </trans-unit>
        <trans-unit id="348fc37258d545bf3a421d6de72e333a89447b6c" translate="yes" xml:space="preserve">
          <source>HammerGestureConfig</source>
          <target state="translated">HammerGestureConfig</target>
        </trans-unit>
        <trans-unit id="278772c1f5196a39c58fdaf97264e3b06704d03e" translate="yes" xml:space="preserve">
          <source>HammerLoader</source>
          <target state="translated">HammerLoader</target>
        </trans-unit>
        <trans-unit id="2bf0de63fe2ec09c6656158b9fbf37134a390043" translate="yes" xml:space="preserve">
          <source>Handle form submission with &lt;em&gt;ngSubmit&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;ngSubmit으로&lt;/em&gt; 양식 제출을 &lt;em&gt;처리하십시오&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="e3dc0c0c8644d4d571f10481d8b5c586e03e90d6" translate="yes" xml:space="preserve">
          <source>Handling alternative text.</source>
          <target state="translated">대체 텍스트 처리.</target>
        </trans-unit>
        <trans-unit id="3b15f51080af6b0c1e1c13c38041ed942ea71ff5" translate="yes" xml:space="preserve">
          <source>Handling form submission by binding to the &lt;code&gt;&lt;a href=&quot;../api/forms/ngform#ngSubmit&quot;&gt;NgForm.ngSubmit&lt;/a&gt;&lt;/code&gt; event property.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/forms/ngform#ngSubmit&quot;&gt;NgForm.ngSubmit&lt;/a&gt;&lt;/code&gt; 이벤트 속성 에 바인딩하여 양식 제출 처리</target>
        </trans-unit>
        <trans-unit id="831407a4d211313e01d26114b4d98077aa2e5a6b" translate="yes" xml:space="preserve">
          <source>Handling more than one request</source>
          <target state="translated">둘 이상의 요청 처리</target>
        </trans-unit>
        <trans-unit id="a86c39000e691d43e8402a56e57f52add8830778" translate="yes" xml:space="preserve">
          <source>Handling navigation requests</source>
          <target state="translated">탐색 요청 처리</target>
        </trans-unit>
        <trans-unit id="4e04a3a7c66471317dae04093656e3ff5fdc3eb2" translate="yes" xml:space="preserve">
          <source>Handling output</source>
          <target state="translated">출력 처리</target>
        </trans-unit>
        <trans-unit id="f95f34fa70b69b36e45d9632d6643c7bdb17e313" translate="yes" xml:space="preserve">
          <source>Handling plural forms of words.</source>
          <target state="translated">복수 형태의 단어 다루기.</target>
        </trans-unit>
        <trans-unit id="e3a6579f666e7f37fbbafc8bc27eea0a4b297937" translate="yes" xml:space="preserve">
          <source>Handling user input with forms is the cornerstone of many common applications. Applications use forms to enable users to log in, to update a profile, to enter sensitive information, and to perform many other data-entry tasks.</source>
          <target state="translated">양식으로 사용자 입력을 처리하는 것은 많은 일반적인 응용 프로그램의 초석입니다. 응용 프로그램은 양식을 사용하여 사용자가 로그인하고 프로필을 업데이트하고 중요한 정보를 입력하고 다른 많은 데이터 입력 작업을 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0b4dd43911d5b1213a8c24413fee5583e9c69543" translate="yes" xml:space="preserve">
          <source>Has the ability to save the changes to its tax return or cancel them.</source>
          <target state="translated">세금 보고서 변경 사항을 저장하거나 취소 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e929e6ea9e6a11c1a8dd7547fc802c6500c5c38b" translate="yes" xml:space="preserve">
          <source>Hash mismatches can occur for a variety of reasons:</source>
          <target state="translated">해시 불일치는 여러 가지 이유로 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="446f6822c34424ae30675660ab1fef1603785ee9" translate="yes" xml:space="preserve">
          <source>HashLocationStrategy</source>
          <target state="translated">HashLocationStrategy</target>
        </trans-unit>
        <trans-unit id="f0155931738ae14ba71a27c7bbf7845159b64ae6" translate="yes" xml:space="preserve">
          <source>Have a near-term view of implementation and a long-term vision. Start small but keep in mind where the app is heading down the road.</source>
          <target state="translated">구현에 대한 단기적인 관점과 장기적인 비전을 갖습니다. 작게 시작하지만 앱이 어디로 향하고 있는지 기억하십시오.</target>
        </trans-unit>
        <trans-unit id="c08d23a9cf638cea321f4d84c68bd9d2002ab064" translate="yes" xml:space="preserve">
          <source>Having completed the preparation work, get going with the Angular upgrade of PhoneCat. You'll do this incrementally with the help of &lt;a href=&quot;upgrade#upgrading-with-ngupgrade&quot;&gt;ngUpgrade&lt;/a&gt; that comes with Angular. By the time you're done, you'll be able to remove AngularJS from the project completely, but the key is to do this piece by piece without breaking the application.</source>
          <target state="translated">준비 작업을 완료 한 후 PhoneCat의 Angular 업그레이드를 진행하십시오. Angular와 함께 제공되는 &lt;a href=&quot;upgrade#upgrading-with-ngupgrade&quot;&gt;ngUpgrade&lt;/a&gt; 의 도움으로 점진적으로이 작업을 수행합니다 . 완료되면 프로젝트에서 AngularJS를 완전히 제거 할 수 있지만 핵심은 응용 프로그램을 중단하지 않고이 조각을 하나씩 수행하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="e44a18c3a57a64b5f43da0c3c418a093078ff2b3" translate="yes" xml:space="preserve">
          <source>Having imported &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; into the &lt;code&gt;AppModule&lt;/code&gt;, you can inject the &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; into an application class as shown in the following &lt;code&gt;ConfigService&lt;/code&gt; example.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; 을 &lt;code&gt;AppModule&lt;/code&gt; 로 가져 오면 다음 &lt;code&gt;ConfigService&lt;/code&gt; 예제에 표시된대로 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; 를 애플리케이션 클래스에 삽입 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="63c6f00e7126a7006e9f3913b9db289b6ecefa3a" translate="yes" xml:space="preserve">
          <source>Having multiple classes in the same file can be confusing. We generally recommend that you define components and services in separate files.</source>
          <target state="translated">동일한 파일에 여러 클래스가 있으면 혼동 될 수 있습니다. 일반적으로 구성 요소와 서비스를 별도의 파일로 정의하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="43b7decb237c08167fd7e5e024b70ed1cde16483" translate="yes" xml:space="preserve">
          <source>Header name default is &lt;code&gt;X-XSRF-TOKEN&lt;/code&gt;.</source>
          <target state="translated">헤더 이름 기본값은 &lt;code&gt;X-XSRF-TOKEN&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="fd17ac56d40e61932509fd748034fd6e03beedce" translate="yes" xml:space="preserve">
          <source>Headings and code-examples automatically clear a floating image. If you need to force a piece of text to clear a floating image, add &lt;code&gt;&amp;lt;br class=&quot;clear&quot;&amp;gt;&lt;/code&gt; where the text should break.</source>
          <target state="translated">제목과 코드 예제는 부동 이미지를 자동으로 지 웁니다. 떠 다니는 이미지를 지우려면 텍스트를 강제로 작성해야하는 경우 텍스트가 깨질 위치 에 &lt;code&gt;&amp;lt;br class=&quot;clear&quot;&amp;gt;&lt;/code&gt; 를 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="348d00693e12bc983bd092677b90434b5a4d869e" translate="yes" xml:space="preserve">
          <source>Hebrew</source>
          <target state="translated">Hebrew</target>
        </trans-unit>
        <trans-unit id="e209d6314e51dd5ccf1a29898d725458ace1ea29" translate="yes" xml:space="preserve">
          <source>Help the translator with a description and meaning</source>
          <target state="translated">설명과 의미로 번역가를 도와주세요</target>
        </trans-unit>
        <trans-unit id="23b10c4e3e30b50de4cf9d8713db9896609dac18" translate="yes" xml:space="preserve">
          <source>Helper class for UIComponents that allows components to register methods. If a registered method message is received from the broker on the worker, the UIMessageBroker deserializes its arguments and calls the registered method. If that method returns a promise, the UIMessageBroker returns the result to the worker.</source>
          <target state="translated">컴포넌트가 메소드를 등록 할 수있게하는 UIComponents의 헬퍼 클래스입니다. 작업자의 브로커에서 등록 된 메소드 메시지가 수신되면 UIMessageBroker는 인수를 직렬화 해제하고 등록 된 메소드를 호출합니다. 해당 메소드가 약속을 리턴하면 UIMessageBroker는 결과를 작업자에게 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="4b749245153a679bfe782c9f0d64160b91308e72" translate="yes" xml:space="preserve">
          <source>Here are a few essential commands for guide page authors.</source>
          <target state="translated">다음은 가이드 페이지 작성자를위한 몇 가지 필수 명령입니다.</target>
        </trans-unit>
        <trans-unit id="73545db4944e39660ef5a87396a0b7aba69af71b" translate="yes" xml:space="preserve">
          <source>Here are a few more &lt;code&gt;HeroDetailComponent&lt;/code&gt; tests to reinforce the point.</source>
          <target state="translated">요점을 강화하기위한 &lt;code&gt;HeroDetailComponent&lt;/code&gt; 테스트가 몇 가지 더 있습니다.</target>
        </trans-unit>
        <trans-unit id="5bfee4d35a4ddf4a150031955212105951b628cd" translate="yes" xml:space="preserve">
          <source>Here are all variations in action, including the uppercase version:</source>
          <target state="translated">대문자 버전을 포함하여 모든 변형 된 동작은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="4fb3542fad3fab2d215a2d5fc7e79d985d7d6068" translate="yes" xml:space="preserve">
          <source>Here are several ways to test it.</source>
          <target state="translated">테스트하는 몇 가지 방법이 있습니다.</target>
        </trans-unit>
        <trans-unit id="abc262ee616cd6d61de48d067488e18aa5ef326a" translate="yes" xml:space="preserve">
          <source>Here are some code samples that illustrate how the same kind of operation is defined using observables and the events API.</source>
          <target state="translated">다음은 옵저버 블 및 이벤트 API를 사용하여 동일한 종류의 작업을 정의하는 방법을 보여주는 코드 샘플입니다.</target>
        </trans-unit>
        <trans-unit id="203fd9e1b4e1afa2c6feeebed47510738cfabc5c" translate="yes" xml:space="preserve">
          <source>Here are some examples of domains in which observables are particularly useful.</source>
          <target state="translated">다음은 관찰 가능 항목이 특히 유용한 도메인의 예입니다.</target>
        </trans-unit>
        <trans-unit id="131d0134570ecdcb02d33fba4f7d38b95dc40e6f" translate="yes" xml:space="preserve">
          <source>Here are some reasons you might want to use AOT.</source>
          <target state="translated">AOT를 사용하고 싶은 몇 가지 이유는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="26011f288b9004d25201027171dcc3188b4c814f" translate="yes" xml:space="preserve">
          <source>Here are some tests of this component:</source>
          <target state="translated">이 구성 요소에 대한 테스트는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="1da109a79f1e8c33f73c9f071459627e6862b1f1" translate="yes" xml:space="preserve">
          <source>Here are some tests that confirm those links are wired to the &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;&lt;/code&gt; directives as expected:</source>
          <target state="translated">이러한 링크가 예상대로 &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;&lt;/code&gt; 지시문에 연결되어 있는지 확인하는 테스트는 다음과 같습니다 .</target>
        </trans-unit>
        <trans-unit id="036a997255f75ed81e294ddfe5be22eefa087ade" translate="yes" xml:space="preserve">
          <source>Here are the code files discussed in the transition example.</source>
          <target state="translated">다음은 전환 예제에서 설명한 코드 파일입니다.</target>
        </trans-unit>
        <trans-unit id="f4fad47e3b7e72ffe6f641a7a34317759a3aecb3" translate="yes" xml:space="preserve">
          <source>Here are the code files discussed on this page (all in the &lt;code&gt;src/app/&lt;/code&gt; folder).</source>
          <target state="translated">이 페이지에서 설명한 코드 파일은 모두 &lt;code&gt;src/app/&lt;/code&gt; 폴더에 있습니다.</target>
        </trans-unit>
        <trans-unit id="74657a80cc45b0684fb1fecc8e212b1ed029cf06" translate="yes" xml:space="preserve">
          <source>Here are the code files discussed on this page and your app should look like this live example.</source>
          <target state="translated">이 페이지에서 설명한 코드 파일은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="66c3e84d041afa18e7991e820a67cb0cf06a9f66" translate="yes" xml:space="preserve">
          <source>Here are the code files discussed on this page, including the &lt;code&gt;HeroesComponent&lt;/code&gt; styles.</source>
          <target state="translated">다음은 &lt;code&gt;HeroesComponent&lt;/code&gt; 스타일을 포함하여이 페이지에서 설명 된 코드 파일 입니다.</target>
        </trans-unit>
        <trans-unit id="6d57ee3abb38cd8a9899ae29d2550ce3d653bb31" translate="yes" xml:space="preserve">
          <source>Here are the code files discussed on this page.</source>
          <target state="translated">이 페이지에서 설명한 코드 파일은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="203d61b3820a79aebb69d382a71e07a169924fb4" translate="yes" xml:space="preserve">
          <source>Here are the files discussed in this milestone.</source>
          <target state="translated">이 이정표에서 논의 된 파일은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="86abfa66f0b60872f95de83204f6eda0cb85e98b" translate="yes" xml:space="preserve">
          <source>Here are the harness and directive in action.</source>
          <target state="translated">작동하는 하네스와 지시문은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="adb765c3e2e6d081287a43313fe06b6366a0d292" translate="yes" xml:space="preserve">
          <source>Here are the key &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; terms and their meanings:</source>
          <target state="translated">주요 &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; 용어 및 의미는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="39f688160764967f49497f345da36e4e3e168300" translate="yes" xml:space="preserve">
          <source>Here are the most important properties for testers, in order of likely utility.</source>
          <target state="translated">다음은 유용성이 높은 순서대로 테스터에게 가장 중요한 속성입니다.</target>
        </trans-unit>
        <trans-unit id="df6a324455059eb2e9437c79b60728c721d55c96" translate="yes" xml:space="preserve">
          <source>Here are the most important static methods, in order of likely utility.</source>
          <target state="translated">다음은 유용성이 높은 순서대로 가장 중요한 정적 메소드입니다.</target>
        </trans-unit>
        <trans-unit id="b0fcf40781dd81faf1b7b2c864bfff4e045dab29" translate="yes" xml:space="preserve">
          <source>Here are the most useful &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; members for testers, in approximate order of utility:</source>
          <target state="translated">테스터를위한 가장 유용한 &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; 멤버는 대략적인 유틸리티 순서입니다.</target>
        </trans-unit>
        <trans-unit id="32ce460bbc4e3a59815d17ba202313950f72d9f6" translate="yes" xml:space="preserve">
          <source>Here are the most useful methods for testers.</source>
          <target state="translated">테스터에게 가장 유용한 방법은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="6a60e979959576c6f47a130ae26f2fc0cb5317a3" translate="yes" xml:space="preserve">
          <source>Here are the pertinent excerpts from that &lt;code&gt;ItemDetailComponent&lt;/code&gt;:</source>
          <target state="translated">여기에 그에서 관련 발췌 &lt;code&gt;ItemDetailComponent&lt;/code&gt; 는 :</target>
        </trans-unit>
        <trans-unit id="1a520668d060926a9146d4f12a9958d113becba8" translate="yes" xml:space="preserve">
          <source>Here are the relevant files for this version of the sample application.</source>
          <target state="translated">다음은이 버전의 샘플 응용 프로그램과 관련된 파일입니다.</target>
        </trans-unit>
        <trans-unit id="971ae2e0b756cc6f10ae1a53bdb804772e791d81" translate="yes" xml:space="preserve">
          <source>Here are the special characters used in number patterns:</source>
          <target state="translated">숫자 패턴에 사용되는 특수 문자는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="9dc7abb813d891b43406656a067ebe5efbb41d40" translate="yes" xml:space="preserve">
          <source>Here are the steps performed in the model to view test.</source>
          <target state="translated">테스트를보기 위해 모델에서 수행되는 단계는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="f907cd5c3b0f7e717c2f855029aafe9b0514260f" translate="yes" xml:space="preserve">
          <source>Here are the steps performed in the view to model test.</source>
          <target state="translated">다음은 모델 테스트보기에서 수행되는 단계입니다.</target>
        </trans-unit>
        <trans-unit id="8d85ddc8011bbc63fdd9aec9179cf474504e39e7" translate="yes" xml:space="preserve">
          <source>Here are the two files in their entirety for reference:</source>
          <target state="translated">다음은 참조 용으로 두 파일을 완전히 나타낸 것입니다.</target>
        </trans-unit>
        <trans-unit id="f835472a7ce81800f581a799c5de83f42771a680" translate="yes" xml:space="preserve">
          <source>Here are the updated modules &lt;em&gt;before enabling preload&lt;/em&gt;:</source>
          <target state="translated">&lt;em&gt;사전로드를 활성화하기 전에&lt;/em&gt; 업데이트 된 모듈은 다음과 같습니다 .</target>
        </trans-unit>
        <trans-unit id="63dad6d461822e6aad5b70847aaca52f44875f2f" translate="yes" xml:space="preserve">
          <source>Here are three tests that illustrate how automatic change detection works.</source>
          <target state="translated">다음은 자동 변경 감지 작동 방식을 보여주는 세 가지 테스트입니다.</target>
        </trans-unit>
        <trans-unit id="37f9819724bc0daa70265500abced7a21ff78a8d" translate="yes" xml:space="preserve">
          <source>Here are two more versions of the previous test, written with &lt;code&gt;&lt;a href=&quot;../api/core/applicationinitstatus#done&quot;&gt;done&lt;/a&gt;()&lt;/code&gt;. The first one subscribes to the &lt;code&gt;Observable&lt;/code&gt; exposed to the template by the component's &lt;code&gt;quote&lt;/code&gt; property.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/applicationinitstatus#done&quot;&gt;done&lt;/a&gt;()&lt;/code&gt; 작성된 이전 테스트의 두 가지 버전이 더 있습니다 . 첫 번째 는 컴포넌트의 &lt;code&gt;quote&lt;/code&gt; 속성에 의해 템플릿에 노출 된 &lt;code&gt;Observable&lt;/code&gt; 을 구독 합니다.</target>
        </trans-unit>
        <trans-unit id="d47821c3b31c5392bebc3b1326890d7c2f695edc" translate="yes" xml:space="preserve">
          <source>Here are two sample components and the &lt;code&gt;AdComponent&lt;/code&gt; interface for reference:</source>
          <target state="translated">다음은 참조를위한 두 가지 샘플 구성 요소와 &lt;code&gt;AdComponent&lt;/code&gt; 인터페이스입니다.</target>
        </trans-unit>
        <trans-unit id="e0b787c218a0fd5b377e6264e620f571eb531aac" translate="yes" xml:space="preserve">
          <source>Here is &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; displaying the hero's name if &lt;code&gt;hero&lt;/code&gt; exists.</source>
          <target state="translated">다음은 &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; 경우 영웅의 이름을 표시하는 &lt;code&gt;hero&lt;/code&gt; 존재한다.</target>
        </trans-unit>
        <trans-unit id="a3fe3b425db56855651f417606038f5fe5ce6604" translate="yes" xml:space="preserve">
          <source>Here is a compliant folder and file structure:</source>
          <target state="translated">다음은 호환되는 폴더 및 파일 구조입니다.</target>
        </trans-unit>
        <trans-unit id="62e6d461e292af41877b8fc098a18bf5f12699ce" translate="yes" xml:space="preserve">
          <source>Here is a do-nothing &lt;em&gt;noop&lt;/em&gt; interceptor that simply passes the request through without touching it:</source>
          <target state="translated">다음은 요청을 건드리지 않고 간단히 통과시키는 &lt;em&gt;멍청한&lt;/em&gt; 인터셉터입니다.</target>
        </trans-unit>
        <trans-unit id="b553906d1b80b4ed0946ba38a8092bc3576b764e" translate="yes" xml:space="preserve">
          <source>Here is a simple demonstration of how the &lt;code&gt;&lt;a href=&quot;contentchildren&quot;&gt;ContentChildren&lt;/a&gt;&lt;/code&gt; decorator can be used.</source>
          <target state="translated">다음은 &lt;code&gt;&lt;a href=&quot;contentchildren&quot;&gt;ContentChildren&lt;/a&gt;&lt;/code&gt; 데코레이터 사용 방법에 대한 간단한 데모입니다 .</target>
        </trans-unit>
        <trans-unit id="8bd50bf2cb0cef064313fd64747ca38c8871ec23" translate="yes" xml:space="preserve">
          <source>Here is a slightly more realistic example that shows how &lt;code&gt;&lt;a href=&quot;contentchildren&quot;&gt;ContentChildren&lt;/a&gt;&lt;/code&gt; decorators can be used to implement a tab pane component.</source>
          <target state="translated">다음은 &lt;code&gt;&lt;a href=&quot;contentchildren&quot;&gt;ContentChildren&lt;/a&gt;&lt;/code&gt; 데코레이터를 사용하여 탭 창 구성 요소를 구현하는 방법을 보여주는 약간 더 현실적인 예입니다 .</target>
        </trans-unit>
        <trans-unit id="2d30b7cdd1bf5a3b2b24f4673563c67ae4a7d16a" translate="yes" xml:space="preserve">
          <source>Here is an example of a &lt;code&gt;&lt;a href=&quot;animationevent#fromState&quot;&gt;fromState&lt;/a&gt;&lt;/code&gt; specified as a state-change function that invokes an animation when true:</source>
          <target state="translated">다음은 true 일 때 애니메이션을 호출하는 상태 변경 함수로 지정된 &lt;code&gt;&lt;a href=&quot;animationevent#fromState&quot;&gt;fromState&lt;/a&gt;&lt;/code&gt; 의 예입니다 .</target>
        </trans-unit>
        <trans-unit id="3a7a73e5c81430a86007b3a7779f14a9661e2342" translate="yes" xml:space="preserve">
          <source>Here is an example of the case where the component router configuration includes a non-default &lt;a href=&quot;router#location-strategy&quot;&gt;location strategy&lt;/a&gt; by listing its provider in the &lt;code&gt;providers&lt;/code&gt; list of the &lt;code&gt;AppModule&lt;/code&gt;.</source>
          <target state="translated">다음은 컴포넌트 라우터 구성 에 &lt;code&gt;AppModule&lt;/code&gt; 의 &lt;code&gt;providers&lt;/code&gt; 목록에 제공자를 나열하여 기본이 아닌 &lt;a href=&quot;router#location-strategy&quot;&gt;위치 전략&lt;/a&gt; 을 포함하는 경우의 예입니다 .</target>
        </trans-unit>
        <trans-unit id="88d4ddf3e1fd42c49a911a9c5f50961b303bafab" translate="yes" xml:space="preserve">
          <source>Here is an illustration of the &lt;code&gt;trackBy&lt;/code&gt; effect. &quot;Reset items&quot; creates new items with the same &lt;code&gt;item.id&lt;/code&gt;s. &quot;Change ids&quot; creates new items with new &lt;code&gt;item.id&lt;/code&gt;s.</source>
          <target state="translated">다음은 &lt;code&gt;trackBy&lt;/code&gt; 효과 의 그림입니다 . &quot;항목 재설정&quot;은 &lt;code&gt;item.id&lt;/code&gt; 가 동일한 새 항목을 만듭니다 . &quot;ID 변경&quot;은 새로운 &lt;code&gt;item.id&lt;/code&gt; 로 새로운 아이템을 생성 합니다.</target>
        </trans-unit>
        <trans-unit id="69d071f83219cc67343782da4cd85435abb0fdcf" translate="yes" xml:space="preserve">
          <source>Here is such a &lt;code&gt;Page&lt;/code&gt; class for the &lt;code&gt;hero-detail.component.spec.ts&lt;/code&gt;</source>
          <target state="translated">다음은 &lt;code&gt;hero-detail.component.spec.ts&lt;/code&gt; 에 대한 &lt;code&gt;Page&lt;/code&gt; 클래스입니다.</target>
        </trans-unit>
        <trans-unit id="d980344b844e420fad53b6c16d75017541abc570" translate="yes" xml:space="preserve">
          <source>Here is the &lt;code&gt;DashboardHeroComponent&lt;/code&gt; from the &lt;em&gt;Tour of Heroes&lt;/em&gt; tutorial.</source>
          <target state="translated">다음은 &lt;em&gt;Tour of Heroes&lt;/em&gt; 튜토리얼 의 &lt;code&gt;DashboardHeroComponent&lt;/code&gt; 입니다 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e86488b1cb32b49feef4f4470dedca4a5fcf1967" translate="yes" xml:space="preserve">
          <source>Here is the &lt;code&gt;HeroTaxReturnComponent&lt;/code&gt; that makes use of &lt;code&gt;HeroTaxReturnService&lt;/code&gt;.</source>
          <target state="translated">다음은 &lt;code&gt;HeroTaxReturnComponent&lt;/code&gt; 를 사용하는 &lt;code&gt;HeroTaxReturnService&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="4ccb3bee45c3f5e8a10c7949fcd716f5fbd128cd" translate="yes" xml:space="preserve">
          <source>Here is the animation trigger code:</source>
          <target state="translated">다음은 애니메이션 트리거 코드입니다.</target>
        </trans-unit>
        <trans-unit id="ae4efcc82a067c04926b13069d143263eacc0318" translate="yes" xml:space="preserve">
          <source>Here is the component code:</source>
          <target state="translated">구성 요소 코드는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="1f67d21ef057f2279432085d35aecdb714a0fb88" translate="yes" xml:space="preserve">
          <source>Here is the component definition:</source>
          <target state="translated">컴포넌트 정의는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="29f639c1a4ee278d0bd27ad171d2b15e9b89431d" translate="yes" xml:space="preserve">
          <source>Here is the example application and its unit tests that use &lt;code&gt;&lt;a href=&quot;createangulartestingmodule&quot;&gt;createAngularTestingModule&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;createangularjstestingmodule&quot;&gt;createAngularJSTestingModule&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">다음은 &lt;code&gt;&lt;a href=&quot;createangulartestingmodule&quot;&gt;createAngularTestingModule&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;createangularjstestingmodule&quot;&gt;createAngularJSTestingModule&lt;/a&gt;&lt;/code&gt; 을 사용하는 예제 애플리케이션 및 해당 단위 테스트입니다 .</target>
        </trans-unit>
        <trans-unit id="7289c34d08b5da9d83fd489bac339bb78646999e" translate="yes" xml:space="preserve">
          <source>Here is the expanded version of the short-form example.</source>
          <target state="translated">다음은 짧은 형식의 확장 버전입니다.</target>
        </trans-unit>
        <trans-unit id="0070a1aed2d25a8700de4fcbefa0dce4ca73945f" translate="yes" xml:space="preserve">
          <source>Here is the final version of &lt;code&gt;getHeroes()&lt;/code&gt; with the &lt;code&gt;tap()&lt;/code&gt; that logs the operation.</source>
          <target state="translated">다음은 작업을 기록하는 &lt;code&gt;tap()&lt;/code&gt; 이 있는 &lt;code&gt;getHeroes()&lt;/code&gt; 의 최종 버전입니다 .</target>
        </trans-unit>
        <trans-unit id="507213e3087048a335abbd087b122b29d7274391" translate="yes" xml:space="preserve">
          <source>Here is the markup for the first of these callouts.</source>
          <target state="translated">다음은 이러한 문구 중 첫 번째에 대한 마크 업입니다.</target>
        </trans-unit>
        <trans-unit id="9b90d7defb29486440935655cf61803f05d03963" translate="yes" xml:space="preserve">
          <source>Here is the markup for these alerts.</source>
          <target state="translated">다음은 이러한 경고에 대한 마크 업입니다.</target>
        </trans-unit>
        <trans-unit id="7ae5b951b35f869a8a6b02613f7eda4975f89343" translate="yes" xml:space="preserve">
          <source>Here is the markup for this file tree.</source>
          <target state="translated">이 파일 트리의 마크 업은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="a2fe150369bad5a348a282aa3a05ad8386dd51fe" translate="yes" xml:space="preserve">
          <source>Here is the markup for this table.</source>
          <target state="translated">다음은이 테이블의 마크 업입니다.</target>
        </trans-unit>
        <trans-unit id="ffbf137688538ebb74fc8824377d23da85c0e7ed" translate="yes" xml:space="preserve">
          <source>Here is the parent, &lt;code&gt;CountdownViewChildParentComponent&lt;/code&gt;:</source>
          <target state="translated">다음은 부모 &lt;code&gt;CountdownViewChildParentComponent&lt;/code&gt; 입니다 .</target>
        </trans-unit>
        <trans-unit id="305818b1af808bc21c8b481f7c4cdc0dcded567c" translate="yes" xml:space="preserve">
          <source>Here is the revised &lt;code&gt;HeroService&lt;/code&gt; that injects &lt;code&gt;Logger&lt;/code&gt;, side by side with the previous service for comparison.</source>
          <target state="translated">다음은 비교를 위해 이전 서비스와 나란히 &lt;code&gt;Logger&lt;/code&gt; 를 주입 하는 수정 된 &lt;code&gt;HeroService&lt;/code&gt; 입니다 .</target>
        </trans-unit>
        <trans-unit id="1b66536e9ef97cef4faab2e6486b3e3341657864" translate="yes" xml:space="preserve">
          <source>Here is the source from the &lt;code&gt;src/app/&lt;/code&gt; folder.</source>
          <target state="translated">다음은 &lt;code&gt;src/app/&lt;/code&gt; 폴더 의 소스입니다 .</target>
        </trans-unit>
        <trans-unit id="defdb414b6ad2449a9c07d869f058f5e58f4b417" translate="yes" xml:space="preserve">
          <source>Here it binds the &lt;code&gt;hero.name&lt;/code&gt; property to the HTML textbox so that data can flow &lt;em&gt;in both directions:&lt;/em&gt; from the &lt;code&gt;hero.name&lt;/code&gt; property to the textbox, and from the textbox back to the &lt;code&gt;hero.name&lt;/code&gt;.</source>
          <target state="translated">여기가 결합 &lt;code&gt;hero.name&lt;/code&gt; 의 데이터가 흐를 수 있도록 HTML 텍스트 상자에 속성을 &lt;em&gt;: 양 방향&lt;/em&gt; 으로부터 &lt;code&gt;hero.name&lt;/code&gt; 의 텍스트 상자에 속성과에 텍스트 상자의 뒷면에서 &lt;code&gt;hero.name&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="08272db39313455a9af93a6df856a1e60bf114b3" translate="yes" xml:space="preserve">
          <source>Here they are together, after translation:</source>
          <target state="translated">번역 후 여기에 함께 있습니다.</target>
        </trans-unit>
        <trans-unit id="cdcad7df3e4cfd3543f37881241493108acfc809" translate="yes" xml:space="preserve">
          <source>Here we decided that &lt;code&gt;isAlterEgoTaken()&lt;/code&gt; error is treated as a successful validation, because failure to make a validation request does not necessarily mean that the alter ego is invalid. You could handle the error differently and return the &lt;code&gt;ValidationError&lt;/code&gt; object instead.</source>
          <target state="translated">여기서 우리는 &lt;code&gt;isAlterEgoTaken()&lt;/code&gt; 오류가 성공적인 유효성 검사로 처리 된다고 결정했습니다 . 유효성 검사 요청에 실패한다고해서 alter ego가 유효하지 않은 것은 아닙니다. 오류를 다르게 처리하고 대신 &lt;code&gt;ValidationError&lt;/code&gt; 객체를 반환 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="79f90147ab759834dc4640b93285fd5ae43cb71a" translate="yes" xml:space="preserve">
          <source>Here we see the parent and child working together.</source>
          <target state="translated">여기서 우리는 부모와 자식이 함께 일하는 것을 봅니다.</target>
        </trans-unit>
        <trans-unit id="8771b8deaa3683dcf7a75cf6959eaf7df50ecaa9" translate="yes" xml:space="preserve">
          <source>Here you can see the use of a &lt;code&gt;click()&lt;/code&gt; event binding and the property binding syntax (&lt;code&gt;[attr.fill]=&quot;fillColor&quot;&lt;/code&gt;).</source>
          <target state="translated">여기서 &lt;code&gt;click()&lt;/code&gt; 이벤트 바인딩과 속성 바인딩 구문 ( &lt;code&gt;[attr.fill]=&quot;fillColor&quot;&lt;/code&gt; )을 사용하는 것을 볼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="511a4f717c3a359e7f572279ad68d540c4bb458e" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example of a test that runs the command builder. The test uses the builder to run the &lt;code&gt;ls&lt;/code&gt; command, then validates that it ran successfully and listed the proper files.</source>
          <target state="translated">다음은 명령 빌더를 실행하는 테스트의 예입니다. 테스트는 빌더를 사용하여 &lt;code&gt;ls&lt;/code&gt; 명령 을 실행 한 후 성공적으로 실행되었으며 올바른 파일을 나열했는지 검증합니다.</target>
        </trans-unit>
        <trans-unit id="79a379c34c53ce83d07e71356345ea69136a74d1" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example:</source>
          <target state="translated">예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="d2ea21d3443d959148c1cadad9c432d2da8241bc" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s the code for the final version of the application:</source>
          <target state="translated">애플리케이션의 최종 버전에 대한 코드는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="29d75374abffd4bb69efcb9d1c150b3130b488ef" translate="yes" xml:space="preserve">
          <source>Here's &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; that takes a &lt;code&gt;UserServiceConfig&lt;/code&gt; object:</source>
          <target state="translated">&lt;code&gt;UserServiceConfig&lt;/code&gt; 객체 를 취하는 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; 는 다음과 같습니다 .</target>
        </trans-unit>
        <trans-unit id="8ce266b9f7140d8aadcec223f123a37e1acef56f" translate="yes" xml:space="preserve">
          <source>Here's &lt;code&gt;HeroBiosAndContactsComponent&lt;/code&gt; in action.</source>
          <target state="translated">여기에 &lt;code&gt;HeroBiosAndContactsComponent&lt;/code&gt; 가 작동합니다.</target>
        </trans-unit>
        <trans-unit id="210602b8fc8ab2d5642913c9982cbff1a4f4b065" translate="yes" xml:space="preserve">
          <source>Here's &lt;code&gt;HeroContactComponent&lt;/code&gt;, which demonstrates the qualifying decorators.</source>
          <target state="translated">여기 &lt;code&gt;HeroContactComponent&lt;/code&gt; 자격 검증이 장식을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="267c0db0ea651fe8d15656fadfdbd9b520beca00" translate="yes" xml:space="preserve">
          <source>Here's &lt;em&gt;AfterView&lt;/em&gt; in action:</source>
          <target state="translated">&lt;em&gt;AfterView 작동 방법&lt;/em&gt; 은 다음과 같습니다 .</target>
        </trans-unit>
        <trans-unit id="a1651a820337a1810f83cfeaae7fc899365266c2" translate="yes" xml:space="preserve">
          <source>Here's &lt;em&gt;Alex&lt;/em&gt; and family in action.</source>
          <target state="translated">여기 &lt;em&gt;알렉스&lt;/em&gt; 와 행동의 가족.</target>
        </trans-unit>
        <trans-unit id="abf25e2fea0f9e2ba609a88d3e7f6d6c72dae972" translate="yes" xml:space="preserve">
          <source>Here's &lt;em&gt;Alice&lt;/em&gt;, &lt;em&gt;Barry&lt;/em&gt;, and family in action.</source>
          <target state="translated">여기 &lt;em&gt;앨리스&lt;/em&gt; , &lt;em&gt;배리&lt;/em&gt; , 행동의 가족.</target>
        </trans-unit>
        <trans-unit id="2373344a9550daa83bd9efe5a057e0eb47e2963c" translate="yes" xml:space="preserve">
          <source>Here's &lt;em&gt;Barry&lt;/em&gt;.</source>
          <target state="translated">여기 &lt;em&gt;배리&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="58dfcfb5bd2344e21c4f9234e1a0a787c9ad52c8" translate="yes" xml:space="preserve">
          <source>Here's a &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; test that demonstrates the data flow you'd expect in the real world.</source>
          <target state="translated">다음 은 실제 환경에서 예상되는 데이터 흐름을 보여주는 &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; 테스트입니다.</target>
        </trans-unit>
        <trans-unit id="3b04099851b53646b03c500d744979f7ed478b27" translate="yes" xml:space="preserve">
          <source>Here's a &lt;code&gt;provider&lt;/code&gt; example of the problem.</source>
          <target state="translated">다음 은 문제 의 &lt;code&gt;provider&lt;/code&gt; 예입니다.</target>
        </trans-unit>
        <trans-unit id="332ad9d1d1c0ec3216151d16383d075136fa7637" translate="yes" xml:space="preserve">
          <source>Here's a brief description of each exercise:</source>
          <target state="translated">각 운동에 대한 간단한 설명은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="342d9dca61b9e4422f88fa45aa82e665fc20fb7d" translate="yes" xml:space="preserve">
          <source>Here's a child view that displays a hero's name in an &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 에 영웅의 이름을 표시하는 자식 뷰가 있습니다 .</target>
        </trans-unit>
        <trans-unit id="2dc49e2bfd96abcc48b54d3c3672ed317de547d8" translate="yes" xml:space="preserve">
          <source>Here's a closer look at the code.</source>
          <target state="translated">코드를 자세히 살펴 보겠습니다.</target>
        </trans-unit>
        <trans-unit id="c8cfdd2d432c327dabf4c942f49ee2de0e323ab4" translate="yes" xml:space="preserve">
          <source>Here's a component with an input field for a single control implemented using reactive forms.</source>
          <target state="translated">다음은 반응 형을 사용하여 구현 된 단일 컨트롤에 대한 입력 필드가있는 구성 요소입니다.</target>
        </trans-unit>
        <trans-unit id="771c4365239b6adac9b51419ce8e2170cdf8bc02" translate="yes" xml:space="preserve">
          <source>Here's a conforming example</source>
          <target state="translated">다음은 적합한 예입니다.</target>
        </trans-unit>
        <trans-unit id="67c50f15b5597454aa71b847527a69b00db4940f" translate="yes" xml:space="preserve">
          <source>Here's a full-featured application of &lt;code&gt;NgFor&lt;/code&gt;, written both ways:</source>
          <target state="translated">다음은 두 가지 방법으로 작성된 &lt;code&gt;NgFor&lt;/code&gt; 의 모든 기능을 갖춘 응용 프로그램입니다 .</target>
        </trans-unit>
        <trans-unit id="9d07ea3700c1b14d35ec087c49afa25711851988" translate="yes" xml:space="preserve">
          <source>Here's a pertinent excerpt from the template:</source>
          <target state="translated">템플릿에서 발췌 한 내용은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="2d7220461d3f8c562324ad099c90d86389d03dea" translate="yes" xml:space="preserve">
          <source>Here's a revised version that defaults to &lt;code&gt;parent&lt;/code&gt; but also accepts an optional second parameter for a different parent class interface.</source>
          <target state="translated">다음은 기본적으로 &lt;code&gt;parent&lt;/code&gt; 버전 이지만 다른 부모 클래스 인터페이스에 대한 선택적 두 번째 매개 변수를 허용하는 수정 된 버전입니다 .</target>
        </trans-unit>
        <trans-unit id="e1e1e0ffc9b6aee2fef781d2718e2fd868a214ee" translate="yes" xml:space="preserve">
          <source>Here's a simple root NgModule definition.</source>
          <target state="translated">다음은 간단한 루트 NgModule 정의입니다.</target>
        </trans-unit>
        <trans-unit id="13b657074051b1dd3d3aaa6052c01e4cd48c1ba0" translate="yes" xml:space="preserve">
          <source>Here's a summary of the stand-alone functions, in order of likely utility:</source>
          <target state="translated">다음은 유틸리티 가능성이 높은 독립형 함수에 대한 요약입니다.</target>
        </trans-unit>
        <trans-unit id="d52092227c7976ce49b8aa2a6d6cca685babff11" translate="yes" xml:space="preserve">
          <source>Here's a test demonstrating the component's behavior when the observed &lt;code&gt;id&lt;/code&gt; refers to an existing hero:</source>
          <target state="translated">다음은 관찰 된 &lt;code&gt;id&lt;/code&gt; 가 기존의 영웅을 나타낼 때 구성 요소의 동작을 보여주는 테스트입니다 .</target>
        </trans-unit>
        <trans-unit id="ffd0ce6376a8b892a0a4dd44632d7f49de3e0e31" translate="yes" xml:space="preserve">
          <source>Here's a visual idea of where this tutorial leads, beginning with the &quot;Dashboard&quot; view and the most heroic heroes:</source>
          <target state="translated">다음은 &quot;대시 보드&quot;보기와 가장 영웅적인 영웅으로 시작하여이 학습서의 위치에 대한 시각적 아이디어입니다.</target>
        </trans-unit>
        <trans-unit id="a58b171fff7fdf9107296da5f6e8439cb68ac2fa" translate="yes" xml:space="preserve">
          <source>Here's an embedded live example for this guide.</source>
          <target state="translated">다음은이 안내서에 대한 내장 된 라이브 예입니다.</target>
        </trans-unit>
        <trans-unit id="f8987e6cd96e95c2cfb4f4fd4c1bed76aaee7fc7" translate="yes" xml:space="preserve">
          <source>Here's an example in which the &lt;code&gt;AppComponent.fontSizePx&lt;/code&gt; is two-way bound to the &lt;code&gt;SizerComponent&lt;/code&gt;:</source>
          <target state="translated">다음은 &lt;code&gt;AppComponent.fontSizePx&lt;/code&gt; 가 SizerComponent 에 양방향으로 바인딩 된 &lt;code&gt;SizerComponent&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2bdfacca7ab5d0824f43836325291190197ca019" translate="yes" xml:space="preserve">
          <source>Here's an example of a service class that logs to the browser console.</source>
          <target state="translated">다음은 브라우저 콘솔에 로그인하는 서비스 클래스의 예입니다.</target>
        </trans-unit>
        <trans-unit id="99e679bc16af7a1f9d179d8466452325faeeffb8" translate="yes" xml:space="preserve">
          <source>Here's an example of an error message added to the &lt;em&gt;name&lt;/em&gt; input box:</source>
          <target state="translated">&lt;em&gt;이름&lt;/em&gt; 입력 상자에 추가 된 오류 메시지의 예는 다음과 같습니다 .</target>
        </trans-unit>
        <trans-unit id="a801f1de6030e88253033ddfef1b99db9927d97d" translate="yes" xml:space="preserve">
          <source>Here's an example of basic metadata for &lt;code&gt;HeroListComponent&lt;/code&gt;.</source>
          <target state="translated">다음은 &lt;code&gt;HeroListComponent&lt;/code&gt; 의 기본 메타 데이터 예입니다 .</target>
        </trans-unit>
        <trans-unit id="45774d5d345882a71ea0fc59337a3b86d4253823" translate="yes" xml:space="preserve">
          <source>Here's an example of binding to the &lt;code&gt;colSpan&lt;/code&gt; property. Notice that it's not &lt;code&gt;colspan&lt;/code&gt;, which is the attribute, spelled with a lowercase &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="translated">다음은 &lt;code&gt;colSpan&lt;/code&gt; 속성 에 바인딩하는 예입니다 . 속성은 &lt;code&gt;colspan&lt;/code&gt; 이 아니며 소문자 &lt;code&gt;s&lt;/code&gt; 로 표시 됩니다.</target>
        </trans-unit>
        <trans-unit id="4dbc92e76d1afd27809635974b4f4a7190dd2709" translate="yes" xml:space="preserve">
          <source>Here's an example of creating and subscribing to a simple observable, with an observer that logs the received message to the console:</source>
          <target state="translated">수신 된 메시지를 콘솔에 기록하는 옵저버를 사용하여 간단한 옵저버 블을 만들고 구독하는 예는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="044030613cb78d7ccdd179ec6255d8b66b6c4172" translate="yes" xml:space="preserve">
          <source>Here's an example of using keyframes to create a pulse effect:</source>
          <target state="translated">다음은 키 프레임을 사용하여 펄스 효과를 만드는 예입니다.</target>
        </trans-unit>
        <trans-unit id="fff667011fdbcb48393c9cb30c030e165456b690" translate="yes" xml:space="preserve">
          <source>Here's an example of using the &lt;code&gt;catchError&lt;/code&gt; operator to do this:</source>
          <target state="translated">&lt;code&gt;catchError&lt;/code&gt; 연산자를 사용하여 이를 수행 하는 예는 다음과 같습니다 .</target>
        </trans-unit>
        <trans-unit id="541970f9030afc36a95c731be207ea924fb5f0f4" translate="yes" xml:space="preserve">
          <source>Here's an example that demonstrates the basic usage model by showing how an observable could be used to provide geolocation updates.</source>
          <target state="translated">다음은 옵저버 블을 사용하여 지리적 위치 업데이트를 제공하는 방법을 보여줌으로써 기본 사용 모델을 보여주는 예입니다.</target>
        </trans-unit>
        <trans-unit id="2639f3ab4611df11a6c31d7f75243294cbb8cbd4" translate="yes" xml:space="preserve">
          <source>Here's an example that excerpts certain scripts from &lt;code&gt;package.json&lt;/code&gt; into a partial file named &lt;code&gt;package.1.json&lt;/code&gt;.</source>
          <target state="translated">여기에 예제가 그 발췌에서 특정 스크립트 &lt;code&gt;package.json&lt;/code&gt; 을 일부라는 이름의 파일로 &lt;code&gt;package.1.json&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="61f04271f847d0c8988094c50219a148be404036" translate="yes" xml:space="preserve">
          <source>Here's an example.</source>
          <target state="translated">다음은 예입니다.</target>
        </trans-unit>
        <trans-unit id="51e85e4e8113fb3e1f07e1727e78d73f5f0043e6" translate="yes" xml:space="preserve">
          <source>Here's an example:</source>
          <target state="translated">예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="9e0c943ae02f8fdb73167474d07a54374b16f800" translate="yes" xml:space="preserve">
          <source>Here's an illustrative example.</source>
          <target state="translated">여기 예가 있습니다.</target>
        </trans-unit>
        <trans-unit id="e88db74062a516f02d9d37bb5e8b39b0a74ea59d" translate="yes" xml:space="preserve">
          <source>Here's another code sample using the wildcard state together with our previous example using the &lt;code&gt;open&lt;/code&gt; and &lt;code&gt;closed&lt;/code&gt; states. Instead of defining each state-to-state transition pair, we're now saying that any transition to &lt;code&gt;closed&lt;/code&gt; takes 1 second, and any transition to &lt;code&gt;open&lt;/code&gt; takes 0.5 seconds.</source>
          <target state="translated">다음은 &lt;code&gt;open&lt;/code&gt; 상태 와 &lt;code&gt;closed&lt;/code&gt; 상태 를 사용하는 이전 예제와 함께 와일드 카드 상태를 사용하는 또 다른 코드 샘플 입니다. 각 상태 간 전환 쌍을 정의하는 대신 이제 &lt;code&gt;closed&lt;/code&gt; 전환하는 데 1 초가 걸리고 &lt;code&gt;open&lt;/code&gt; 전환하는 데 0.5 초가 걸린다고합니다.</target>
        </trans-unit>
        <trans-unit id="70eda6d168054a0865515e0443b33d2b23af65a0" translate="yes" xml:space="preserve">
          <source>Here's another test that calls &lt;code&gt;HTMLElement.querySelector&lt;/code&gt; to get the paragraph element and look for the banner text:</source>
          <target state="translated">다음은 &lt;code&gt;HTMLElement.querySelector&lt;/code&gt; 를 호출 하여 단락 요소를 가져 와서 배너 텍스트를 찾는 다른 테스트입니다 .</target>
        </trans-unit>
        <trans-unit id="3dc08816743a52195484363d2e3c24a2b3c9d87d" translate="yes" xml:space="preserve">
          <source>Here's another test that changes the component's &lt;code&gt;title&lt;/code&gt; property &lt;em&gt;before&lt;/em&gt; calling &lt;code&gt;fixture.detectChanges()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;fixture.detectChanges()&lt;/code&gt; &lt;em&gt;를&lt;/em&gt; 호출 &lt;em&gt;하기 전에&lt;/em&gt; 구성 요소의 &lt;code&gt;title&lt;/code&gt; 속성 을 변경하는 또 다른 테스트가 있습니다.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="3627df60550e33b9632085fa920812ce9f528a36" translate="yes" xml:space="preserve">
          <source>Here's are the two corresponding code snippets displayed side-by-side.</source>
          <target state="translated">다음은 두 개의 해당 코드 스 니펫이 나란히 표시되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="3f7ca5ab98fbaecc24dee9341e08f0fa1f44c1a9" translate="yes" xml:space="preserve">
          <source>Here's how it works.</source>
          <target state="translated">작동 방식은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="c9765338cf911741bd6fdd71fe0e9d288e68f815" translate="yes" xml:space="preserve">
          <source>Here's how the harness should work when you're done coding.</source>
          <target state="translated">코딩이 완료되면 하네스의 작동 방식은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="f8b16882caea78c4ae20585288bb3408690cd2a3" translate="yes" xml:space="preserve">
          <source>Here's how the user will experience this version of the app:</source>
          <target state="translated">사용자가이 버전의 앱을 경험하는 방법은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="4288a1aa86a0ff0cdf195279ed93bc028ad830c8" translate="yes" xml:space="preserve">
          <source>Here's how to set the attribute without binding in plain HTML:</source>
          <target state="translated">일반 HTML에서 바인딩하지 않고 속성을 설정하는 방법은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="ad7f50209fddbb04ba01574e4233f2906ad1ab57" translate="yes" xml:space="preserve">
          <source>Here's how you might begin:</source>
          <target state="translated">시작하는 방법은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="7e296845164394524708679f8487b23c5b3b8bb1" translate="yes" xml:space="preserve">
          <source>Here's how you might rewrite one of the &lt;code&gt;MasterService&lt;/code&gt; tests in that style.</source>
          <target state="translated">해당 스타일로 &lt;code&gt;MasterService&lt;/code&gt; 테스트 중 하나를 다시 작성하는 방법은 다음과 같습니다 .</target>
        </trans-unit>
        <trans-unit id="3016acc8c67f96365b961ff1184679e2556919c4" translate="yes" xml:space="preserve">
          <source>Here's how you might update the authorization header (after the old token expired) before making the next request.</source>
          <target state="translated">다음 요청을하기 전에 (이전 토큰이 만료 된 후) 인증 헤더를 업데이트하는 방법은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="9117f64adc27738efa3e0c09ed2e0b5bf8192560" translate="yes" xml:space="preserve">
          <source>Here's the &quot;flying hero&quot; at a more reasonable scale.</source>
          <target state="translated">보다 합리적인 규모의 &quot;비행 영웅&quot;입니다.</target>
        </trans-unit>
        <trans-unit id="2022823e06097841ddac1cf7e8178ca2d42a4a76" translate="yes" xml:space="preserve">
          <source>Here's the &lt;code&gt;FlyingHeroesPipe&lt;/code&gt; implementation, which follows the pattern for custom pipes described earlier.</source>
          <target state="translated">다음 은 앞서 설명한 사용자 지정 파이프의 패턴을 따르는 &lt;code&gt;FlyingHeroesPipe&lt;/code&gt; 구현입니다.</target>
        </trans-unit>
        <trans-unit id="6a3af23f4d1dd133edc136f6262b5e7bda291ff3" translate="yes" xml:space="preserve">
          <source>Here's the &lt;code&gt;HeroDetailComponent&lt;/code&gt; constructor:</source>
          <target state="translated">&lt;code&gt;HeroDetailComponent&lt;/code&gt; 생성자 는 다음과 같습니다 .</target>
        </trans-unit>
        <trans-unit id="db5c622d4af61973b5a850f38a6b8490ea24df97" translate="yes" xml:space="preserve">
          <source>Here's the &lt;code&gt;NameParentComponent&lt;/code&gt; demonstrating name variations including a name with all spaces:</source>
          <target state="translated">공백이있는 이름을 포함한 이름 변형을 보여주는 &lt;code&gt;NameParentComponent&lt;/code&gt; 는 다음과 같습니다 .</target>
        </trans-unit>
        <trans-unit id="1356893ffa40f8e92ce29acc0e9093499ed4e4f0" translate="yes" xml:space="preserve">
          <source>Here's the &lt;code&gt;src&lt;/code&gt; attribute for the &quot;flying hero&quot; image belonging to this page.</source>
          <target state="translated">이 페이지에 속하는 &quot;flying hero&quot;이미지 의 &lt;code&gt;src&lt;/code&gt; 속성은 다음과 같습니다 .</target>
        </trans-unit>
        <trans-unit id="1934e4bbd6b06ebbe4498a926009f4a666e04fd4" translate="yes" xml:space="preserve">
          <source>Here's the &lt;em&gt;Crisis Center&lt;/em&gt; URL in this &quot;HTML5 pushState&quot; style:</source>
          <target state="translated">이 &quot;HTML5 pushState&quot;스타일 의 &lt;em&gt;위기 센터&lt;/em&gt; URL은 다음과 같습니다 .</target>
        </trans-unit>
        <trans-unit id="d6f4728904a893243df57b9fc8571044a55d17d1" translate="yes" xml:space="preserve">
          <source>Here's the app in action:</source>
          <target state="translated">작동하는 앱은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="9cf2ae56853b24b74c07fa91778a1f965ca1c2a0" translate="yes" xml:space="preserve">
          <source>Here's the brief markup that produced that lengthy snippet:</source>
          <target state="translated">긴 스 니펫을 생성 한 간단한 마크 업은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="36ec26250a6311e0f6a9d15c00b167cc53c0abd4" translate="yes" xml:space="preserve">
          <source>Here's the complete &lt;code&gt;beforeEach()&lt;/code&gt;, using &lt;code&gt;TestBed.get()&lt;/code&gt;:</source>
          <target state="translated">다음은 &lt;code&gt;beforeEach()&lt;/code&gt; 을 사용 하는 완전한 &lt;code&gt;TestBed.get()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="caecf0d5e0ff532d9b371ee05fe69b6c8e3e14b9" translate="yes" xml:space="preserve">
          <source>Here's the complete &lt;code&gt;crisis-center-routing.module.ts&lt;/code&gt; file with its imports.</source>
          <target state="translated">다음 은 가져 오기 가 포함 된 완전한 &lt;code&gt;crisis-center-routing.module.ts&lt;/code&gt; 파일입니다.</target>
        </trans-unit>
        <trans-unit id="2f2a29a3cb9bc753449f5909dcff9ed14073cee1" translate="yes" xml:space="preserve">
          <source>Here's the complete test for getting a quote:</source>
          <target state="translated">견적을받는 데 필요한 전체 테스트는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="6bdcaeaf4077794f77927b6985a2ac0d9be095d9" translate="yes" xml:space="preserve">
          <source>Here's the component's full definition:</source>
          <target state="translated">구성 요소의 전체 정의는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="62549f1989670813f8a7b7667c8ee151d97fb907" translate="yes" xml:space="preserve">
          <source>Here's the component, its template and styles:</source>
          <target state="translated">컴포넌트, 템플릿 및 스타일은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="df996b8eb08a97d6354f014409427c8d6fcd7be4" translate="yes" xml:space="preserve">
          <source>Here's the conditional paragraph again, this time using &lt;code&gt;&amp;lt;ng-container&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&amp;lt;ng-container&amp;gt;&lt;/code&gt; 사용하여 조건부 단락을 다시 나타 냅니다.</target>
        </trans-unit>
        <trans-unit id="730aeb3d5f96c7f97f79d7090b9eeccf0261bbcb" translate="yes" xml:space="preserve">
          <source>Here's the final code:</source>
          <target state="translated">최종 코드는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="7743a871c540a8d90d5f0b6b681eb8c8d191f7eb" translate="yes" xml:space="preserve">
          <source>Here's the full, final code for the service:</source>
          <target state="translated">서비스에 대한 전체 최종 코드는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="e3f4b1fdcb29f542c15eed5d6f2f98b35f3afc23" translate="yes" xml:space="preserve">
          <source>Here's the latest version of the directive class.</source>
          <target state="translated">지시문 클래스의 최신 버전은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="b5b53ab66de81e52c96d692e7bcaea312637cb34" translate="yes" xml:space="preserve">
          <source>Here's the marble testing version of the &lt;code&gt;getQuote()&lt;/code&gt; error test.</source>
          <target state="translated">다음은 &lt;code&gt;getQuote()&lt;/code&gt; 오류 테스트 의 대리석 테스트 버전입니다 .</target>
        </trans-unit>
        <trans-unit id="656487aec53e8c241399400466ff6b0fbb361893" translate="yes" xml:space="preserve">
          <source>Here's the markup for an &quot;avoid&quot; example in the &lt;a href=&quot;styleguide#style-05-03&quot;&gt;&lt;em&gt;Angular Style Guide&lt;/em&gt;&lt;/a&gt;.</source>
          <target state="translated">다음은 &lt;a href=&quot;styleguide#style-05-03&quot;&gt;&lt;em&gt;Angular Style Guide&lt;/em&gt;&lt;/a&gt; 의 &quot;avoid&quot;예제에 대한 마크 업입니다 .</target>
        </trans-unit>
        <trans-unit id="f1ce66c2b3fdb31cf1b0adc605c91b0e16e6d5e3" translate="yes" xml:space="preserve">
          <source>Here's the markup for that example.</source>
          <target state="translated">다음은 해당 예의 마크 업입니다.</target>
        </trans-unit>
        <trans-unit id="da8d856731f03ffe7562995f38730f23d3dcb96a" translate="yes" xml:space="preserve">
          <source>Here's the meat of the spec file setup.</source>
          <target state="translated">spec 파일 설정의 핵심은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="99883629747b9a103f8b3ab3da4d0b4cb0439481" translate="yes" xml:space="preserve">
          <source>Here's the output for the &lt;em&gt;main&lt;/em&gt; bundle of an example app called &lt;code&gt;cli-quickstart&lt;/code&gt;.</source>
          <target state="translated">다음 은 &lt;code&gt;cli-quickstart&lt;/code&gt; 라는 예제 앱 의 &lt;em&gt;기본&lt;/em&gt; 번들 출력입니다 .</target>
        </trans-unit>
        <trans-unit id="c32dfe48fc6e040a3debbf88b61e369677d91a75" translate="yes" xml:space="preserve">
          <source>Here's the output of a button-pushing sequence:</source>
          <target state="translated">다음은 버튼 푸시 시퀀스의 출력입니다.</target>
        </trans-unit>
        <trans-unit id="22bc28d071c5b0a1f933b3662d1adf54f39987a7" translate="yes" xml:space="preserve">
          <source>Here's the previous &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; test, re-written with the &lt;code&gt;&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;()&lt;/code&gt; utility.</source>
          <target state="translated">다음 은 &lt;code&gt;&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;()&lt;/code&gt; () 유틸리티로 다시 작성된 이전 &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; 테스트 입니다.</target>
        </trans-unit>
        <trans-unit id="65a50a9d22ad026dc17457d2ea667e0410123692" translate="yes" xml:space="preserve">
          <source>Here's the previous test, re-implemented with &lt;code&gt;fixture.debugElement.nativeElement&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;fixture.debugElement.nativeElement&lt;/code&gt; 로 다시 구현 된 이전 테스트는 다음과 같습니다 .</target>
        </trans-unit>
        <trans-unit id="f50475caf51709451a53cec5e964746fb2405109" translate="yes" xml:space="preserve">
          <source>Here's the previous test, rewritten using the click helper.</source>
          <target state="translated">클릭 도우미를 사용하여 다시 작성된 이전 테스트는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="050ad561b8eadf86d74804f473be2ddd0edda3a5" translate="yes" xml:space="preserve">
          <source>Here's the same component with an input field for a single control implemented using template-driven forms.</source>
          <target state="translated">템플릿 기반 양식을 사용하여 구현 된 단일 컨트롤에 대한 입력 필드가있는 동일한 구성 요소가 있습니다.</target>
        </trans-unit>
        <trans-unit id="d438fa0e2d2375bfdd5eb47ca1ad28ae5f460ffb" translate="yes" xml:space="preserve">
          <source>Here's the sample in action as the user makes changes.</source>
          <target state="translated">다음은 사용자가 변경하는 동안 실제로 사용하는 샘플입니다.</target>
        </trans-unit>
        <trans-unit id="53f0e5e27eee1572f4b2943467931546bb2cebe6" translate="yes" xml:space="preserve">
          <source>Here's the updated directive in full:</source>
          <target state="translated">업데이트 된 지시문은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="8292c62a5b64fea28e8eeec99f093a51f5489800" translate="yes" xml:space="preserve">
          <source>Here's what the new class for the phone list component controller looks like:</source>
          <target state="translated">전화 목록 구성 요소 컨트롤러의 새 클래스는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="07b8c34ac5381e60250f5c47082ce1167ad4448b" translate="yes" xml:space="preserve">
          <source>Here, &lt;code&gt;movie&lt;/code&gt; is a user-defined local variable.</source>
          <target state="translated">여기서 &lt;code&gt;movie&lt;/code&gt; 는 사용자 정의 로컬 변수입니다.</target>
        </trans-unit>
        <trans-unit id="0324e49eae3f4d465824bf23cdd72a64935bdeb9" translate="yes" xml:space="preserve">
          <source>Here, the &lt;code&gt;&amp;lt;child-component&amp;gt;&lt;/code&gt; selector, or child directive, is embedded within a &lt;code&gt;&amp;lt;parent-component&amp;gt;&lt;/code&gt;, which serves as the child's context.</source>
          <target state="translated">여기서 &lt;code&gt;&amp;lt;child-component&amp;gt;&lt;/code&gt; 선택기 또는 child 지시문은 &lt;code&gt;&amp;lt;parent-component&amp;gt;&lt;/code&gt; 내에 포함 되며 이는 자식의 컨텍스트 역할을합니다.</target>
        </trans-unit>
        <trans-unit id="4444abe3b6c8e06daabc19a62213ba0a77348697" translate="yes" xml:space="preserve">
          <source>Here, the &lt;code&gt;prepareRoute()&lt;/code&gt; method takes the value of the output directive (established through &lt;code&gt;#outlet=&quot;outlet&quot;&lt;/code&gt;) and returns a string value representing the state of the animation based on the custom data of the current active route. You can use this data to control which transition to execute for each route.</source>
          <target state="translated">여기에서 &lt;code&gt;prepareRoute()&lt;/code&gt; 메소드는 출력 지시문의 값 ( &lt;code&gt;#outlet=&quot;outlet&quot;&lt;/code&gt; 을 통해 설정 됨)을 가져 와서 현재 활성 경로의 사용자 정의 데이터를 기반으로 애니메이션의 상태를 나타내는 문자열 값을 리턴합니다. 이 데이터를 사용하여 각 경로에 대해 실행할 전환을 제어 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="db4f248c7a227dfd8248ff1d0b824a2832aa56db" translate="yes" xml:space="preserve">
          <source>Here, the &lt;em&gt;base URL&lt;/em&gt; is the &lt;code&gt;heroesURL&lt;/code&gt; defined in the &lt;a href=&quot;toh-pt6#heroes-and-http&quot;&gt;Heroes and HTTP&lt;/a&gt; section (&lt;code&gt;api/heroes&lt;/code&gt;) and &lt;em&gt;id&lt;/em&gt; is the number of the hero that you want to retrieve. For example, &lt;code&gt;api/heroes/11&lt;/code&gt;.</source>
          <target state="translated">여기서 &lt;em&gt;기본 URL&lt;/em&gt; 은 &lt;a href=&quot;toh-pt6#heroes-and-http&quot;&gt;Heroes 및 HTTP&lt;/a&gt; 섹션 ( &lt;code&gt;api/heroes&lt;/code&gt; )에 정의 된 &lt;code&gt;heroesURL&lt;/code&gt; 이며 &lt;em&gt;id&lt;/em&gt; 는 검색하려는 영웅의 수입니다. 예를 들어, &lt;code&gt;api/heroes/11&lt;/code&gt; 입니다.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="66b196af8dfb1088f63537fb83ba051a0f53c06f" translate="yes" xml:space="preserve">
          <source>Here, the services and their values are the same, but &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt; stops the injector from looking any further than the &lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt; for &lt;code&gt;FlowerService&lt;/code&gt;, so it doesn't find it and returns &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">여기서, 서비스와 해당 값은 동일하지만, &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt; 댄 더보고에서 인젝터를 중지 &lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt; 에 대한 &lt;code&gt;FlowerService&lt;/code&gt; 그것을 반환을 찾을 수없는, 그래서 &lt;code&gt;null&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="aca1b7a82a6d95098cb364094dad936a099e0db9" translate="yes" xml:space="preserve">
          <source>Hero &lt;em&gt;Power&lt;/em&gt; selection is required. You can add the same kind of error handling to the &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; if you want, but it's not imperative because the selection box already constrains the power to valid values.</source>
          <target state="translated">영웅의 &lt;em&gt;힘을&lt;/em&gt; 선택해야합니다. 원하는 경우 &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; 에 같은 종류의 오류 처리를 추가 할 수 있지만 선택 상자가 이미 유효 값으로 전력을 제한하기 때문에 반드시 필요한 것은 아닙니다.</target>
        </trans-unit>
        <trans-unit id="8d272839c4c67f0a7feb7b568fa8e3446ba7617c" translate="yes" xml:space="preserve">
          <source>Hero data access services (also stubbed).</source>
          <target state="translated">영웅 데이터 액세스 서비스 (또한 스텁 됨).</target>
        </trans-unit>
        <trans-unit id="b4fc9a6cb0d706d6d18b352e7c32ae4c311e5f0c" translate="yes" xml:space="preserve">
          <source>Heroes and HTTP</source>
          <target state="translated">영웅과 HTTP</target>
        </trans-unit>
        <trans-unit id="49b093aef09840217c66c59f78c8bd0a260179f8" translate="yes" xml:space="preserve">
          <source>Heroes list: optionally selecting a hero</source>
          <target state="translated">영웅 목록 : 선택적으로 영웅 선택</target>
        </trans-unit>
        <trans-unit id="526386faf0ef30d00c69495be0b464de4aa1decd" translate="yes" xml:space="preserve">
          <source>Hides the element by making it completely transparent and infinitely narrow, by setting its opacity and width to 0.</source>
          <target state="translated">불투명도와 너비를 0으로 설정하여 요소를 완전히 투명하고 좁게하여 요소를 숨 깁니다.</target>
        </trans-unit>
        <trans-unit id="89da5a8471af66d6f336800d1e48f784de69b323" translate="yes" xml:space="preserve">
          <source>Hiding an element is different from removing it with &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt;. For comparison, the following example shows how to control the visibility of an element with a &lt;a href=&quot;template-syntax#class-binding&quot;&gt;class&lt;/a&gt; or &lt;a href=&quot;template-syntax#style-binding&quot;&gt;style&lt;/a&gt; binding.</source>
          <target state="translated">요소를 숨기는 것은 &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; 로 요소를 제거하는 것과 다릅니다 . 비교를 위해 다음 예제는 &lt;a href=&quot;template-syntax#class-binding&quot;&gt;클래스&lt;/a&gt; 또는 &lt;a href=&quot;template-syntax#style-binding&quot;&gt;스타일&lt;/a&gt; 바인딩으로 요소의 가시성을 제어하는 ​​방법을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="8a3b1b147046025a15fb8a7690182f292845ab57" translate="yes" xml:space="preserve">
          <source>Hierarchical injectors</source>
          <target state="translated">계층 적 인젝터</target>
        </trans-unit>
        <trans-unit id="b544fd8897e805cb5efd919039294bee77b58063" translate="yes" xml:space="preserve">
          <source>High level view</source>
          <target state="translated">높은 수준의 시야</target>
        </trans-unit>
        <trans-unit id="b3e0a103daa9ae3f375b2654f0a482c7c0d36297" translate="yes" xml:space="preserve">
          <source>Hook</source>
          <target state="translated">Hook</target>
        </trans-unit>
        <trans-unit id="1f938b440e9146fcac04f1ceca1a771e15ff6a3b" translate="yes" xml:space="preserve">
          <source>Hook for manual bootstrapping of the application instead of using bootstrap array in @NgModule annotation.</source>
          <target state="translated">@NgModule 주석에서 부트 스트랩 배열을 사용하는 대신 애플리케이션의 수동 부트 스트랩을위한 후크.</target>
        </trans-unit>
        <trans-unit id="3960ec4ca5fb5e5d8cdb2cc1c5121c003e426517" translate="yes" xml:space="preserve">
          <source>Host</source>
          <target state="translated">Host</target>
        </trans-unit>
        <trans-unit id="900e91ae8e4d410ba8ad214c662d46c413ba8c8a" translate="yes" xml:space="preserve">
          <source>Host to listen on.</source>
          <target state="translated">들을 호스트입니다.</target>
        </trans-unit>
        <trans-unit id="854842ca941102874ac3fd35d9a644fe6a4e58d2" translate="yes" xml:space="preserve">
          <source>HostBinding</source>
          <target state="translated">HostBinding</target>
        </trans-unit>
        <trans-unit id="04423f0c0fb006f39c47ae77e76519ec61dae9e9" translate="yes" xml:space="preserve">
          <source>HostListener</source>
          <target state="translated">HostListener</target>
        </trans-unit>
        <trans-unit id="16d6f89a6d102237e8b5809f2f6a83253c134541" translate="yes" xml:space="preserve">
          <source>Hosting an Angular app anywhere else</source>
          <target state="translated">다른 곳에서 Angular 앱 호스팅</target>
        </trans-unit>
        <trans-unit id="b2661e7c9fe866cee0abd12edc765c9ea4167169" translate="yes" xml:space="preserve">
          <source>Hosting an Angular app on Firebase</source>
          <target state="translated">Firebase에서 Angular 앱 호스팅</target>
        </trans-unit>
        <trans-unit id="c9e203bd41e585a498a9ea3bfa7c58968ec8d5be" translate="yes" xml:space="preserve">
          <source>Hosting the built project</source>
          <target state="translated">빌드 된 프로젝트 호스팅</target>
        </trans-unit>
        <trans-unit id="b2e4d2264a6740b74155a1ebd270d51ac74c7499" translate="yes" xml:space="preserve">
          <source>Hour 0-23</source>
          <target state="translated">시간 0-23</target>
        </trans-unit>
        <trans-unit id="e2e437b5f33c50fbf282a8b8ce3d5a4d0deeb077" translate="yes" xml:space="preserve">
          <source>Hour 1-12</source>
          <target state="translated">1-12 시간</target>
        </trans-unit>
        <trans-unit id="cd7d764988e4f76f3f7fbbaaa971d2513fb11bb0" translate="yes" xml:space="preserve">
          <source>How &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; works</source>
          <target state="translated">어떻게 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; 작동</target>
        </trans-unit>
        <trans-unit id="983fbf13b55a5e7fb496619c191e81853401c3d8" translate="yes" xml:space="preserve">
          <source>How &lt;code&gt;ngUpgrade&lt;/code&gt; Works</source>
          <target state="translated">어떻게 &lt;code&gt;ngUpgrade&lt;/code&gt; 작품</target>
        </trans-unit>
        <trans-unit id="d6d941bd9de7fb7dc2069cff40c89a86c6b8c2dd" translate="yes" xml:space="preserve">
          <source>How AOT works</source>
          <target state="translated">AOT 작동 방식</target>
        </trans-unit>
        <trans-unit id="ff5ca3d4267bdd4688ef2f3810892f694a4f2ec9" translate="yes" xml:space="preserve">
          <source>How a reference variable gets its value</source>
          <target state="translated">참조 변수가 값을 얻는 방법</target>
        </trans-unit>
        <trans-unit id="979c9d03c7fcc312615e96357da09f8be513691a" translate="yes" xml:space="preserve">
          <source>How can I tell if an NgModule or service was previously loaded?</source>
          <target state="translated">NgModule 또는 서비스가 이전에로드되었는지 어떻게 알 수 있습니까?</target>
        </trans-unit>
        <trans-unit id="9048d32b5da3d51d17fa1ee3d4c03154ff798961" translate="yes" xml:space="preserve">
          <source>How do I restrict service scope to a module?</source>
          <target state="translated">서비스 범위를 모듈로 제한하는 방법</target>
        </trans-unit>
        <trans-unit id="42da5511b4616e973fcfac7075b36f7d501b52f9" translate="yes" xml:space="preserve">
          <source>How do you bind to a second property when you're already binding to the &lt;code&gt;appHighlight&lt;/code&gt; attribute name?</source>
          <target state="translated">이미 &lt;code&gt;appHighlight&lt;/code&gt; 속성 이름에 바인딩 할 때 두 번째 속성에 어떻게 바인딩 합니까?</target>
        </trans-unit>
        <trans-unit id="511988e08b2a40201c02270364cefca596e7c32b" translate="yes" xml:space="preserve">
          <source>How do you combat this problem? With asynchronous routing, which loads feature modules &lt;em&gt;lazily&lt;/em&gt;, on request. Lazy loading has multiple benefits.</source>
          <target state="translated">이 문제에 어떻게 대처하십니까? 요청에 따라 기능 모듈을 &lt;em&gt;느리게&lt;/em&gt; 로드하는 비동기 라우팅을 사용합니다 . 지연 로딩에는 여러 가지 이점이 있습니다.</target>
        </trans-unit>
        <trans-unit id="a416099edf7824be4ef297d434f0d54367f5e352" translate="yes" xml:space="preserve">
          <source>How does Angular find components, directives, and pipes in a template?What is a</source>
          <target state="translated">Angular는 템플릿에서 구성 요소, 지시문 및 파이프를 어떻게 찾습니까?</target>
        </trans-unit>
        <trans-unit id="3191620388b1773dd5d13b4c654d9f88a6f22136" translate="yes" xml:space="preserve">
          <source>How does the target &lt;code&gt;HeroDetailComponent&lt;/code&gt; learn about that &lt;code&gt;id&lt;/code&gt;? Don't analyze the URL. Let the router do it.</source>
          <target state="translated">대상 &lt;code&gt;HeroDetailComponent&lt;/code&gt; 는 해당 &lt;code&gt;id&lt;/code&gt; 대해 어떻게 학습 합니까? URL을 분석하지 마십시오. 라우터가 그렇게하도록하십시오.</target>
        </trans-unit>
        <trans-unit id="1dd6a17cb4033f4f74df1bb6912b8a28a8074084" translate="yes" xml:space="preserve">
          <source>How it works</source>
          <target state="translated">작동 원리</target>
        </trans-unit>
        <trans-unit id="a1269b34a684f55e0b793348bbcd441f6ac9f34a" translate="yes" xml:space="preserve">
          <source>How ngUpgrade Works</source>
          <target state="translated">ngUpgrade 작동 방식</target>
        </trans-unit>
        <trans-unit id="b9f4e37b7f4ec8a20702b18e475d1c919dc443c6" translate="yes" xml:space="preserve">
          <source>How preloading works</source>
          <target state="translated">사전로드 작동 방식</target>
        </trans-unit>
        <trans-unit id="223c761d3efb8aa4fcdd8c630361b5e28186b485" translate="yes" xml:space="preserve">
          <source>How the Language Service works</source>
          <target state="translated">언어 서비스 작동 방식</target>
        </trans-unit>
        <trans-unit id="1b8475727e660463a6a5ca3ce7a6ab63829de5ff" translate="yes" xml:space="preserve">
          <source>How to handle a navigation request to the current URL. One of:</source>
          <target state="translated">현재 URL에 대한 탐색 요청을 처리하는 방법 다음 중 하나 :</target>
        </trans-unit>
        <trans-unit id="3acd7184a15f7cd60ff8b0cb2f254e98af8fe7db" translate="yes" xml:space="preserve">
          <source>How to handle missing translations for i18n.</source>
          <target state="translated">i18n에 대한 누락 된 번역을 처리하는 방법</target>
        </trans-unit>
        <trans-unit id="a4312d2c2305c9665e2aa88c16af0276c80bbfb1" translate="yes" xml:space="preserve">
          <source>How to handle query parameters in a router link. One of:</source>
          <target state="translated">라우터 링크에서 쿼리 매개 변수를 처리하는 방법 다음 중 하나 :</target>
        </trans-unit>
        <trans-unit id="133736070cd8def498e352ae2671acf3d2603a1b" translate="yes" xml:space="preserve">
          <source>How to handle query parameters in the router link for the next navigation. One of:</source>
          <target state="translated">다음 탐색을 위해 라우터 링크에서 쿼리 매개 변수를 처리하는 방법 다음 중 하나 :</target>
        </trans-unit>
        <trans-unit id="a516bf86adc981bbb12eae05bdf591c9d762031d" translate="yes" xml:space="preserve">
          <source>How to make a feature module</source>
          <target state="translated">기능 모듈을 만드는 방법</target>
        </trans-unit>
        <trans-unit id="42d423686e07004d3ccb86759ad8206a78194665" translate="yes" xml:space="preserve">
          <source>How to merge parameters, data, and resolved data from parent to child routes. One of:</source>
          <target state="translated">부모에서 자식 경로로 매개 변수, 데이터 및 확인 된 데이터를 병합하는 방법 다음 중 하나 :</target>
        </trans-unit>
        <trans-unit id="ab680df21ca4ccde1eb27c6ee6427aabbfd91cc4" translate="yes" xml:space="preserve">
          <source>How to use &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; &lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt; () 을 사용하는 방법</target>
        </trans-unit>
        <trans-unit id="271d720e4f07fc899b89ada24293400628fb4402" translate="yes" xml:space="preserve">
          <source>How to use &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; &lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt; () 을 사용하는 방법</target>
        </trans-unit>
        <trans-unit id="2452bce6c068e1419f34d2c7498e5898f5e3f4a3" translate="yes" xml:space="preserve">
          <source>How to write your own structural directive.</source>
          <target state="translated">자신의 구조적 지시문을 작성하는 방법.</target>
        </trans-unit>
        <trans-unit id="abfc475c30ad52628f2cdc20da996ccdb18abcc8" translate="yes" xml:space="preserve">
          <source>How you provide services via an &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; (or &lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;()&lt;/code&gt;) decorator determines their visibility. The following sections demonstrate &lt;code&gt;providers&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; along with ways to modify service visibility with &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; (또는 &lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;()&lt;/code&gt; ) 데코레이터 를 통해 서비스를 제공하는 방법에 따라 가시성이 결정됩니다. 다음 섹션에서는 &lt;code&gt;providers&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; 와 &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; 및 &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt; 하여 서비스 가시성을 수정하는 방법을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="3c06ea1a10cb3f7599812cd4dd0520ada6ed15d2" translate="yes" xml:space="preserve">
          <source>How you provide this information depends upon whether you compile with the JIT compiler or the AOT compiler.</source>
          <target state="translated">이 정보를 제공하는 방법은 JIT 컴파일러 또는 AOT 컴파일러로 컴파일하는지에 따라 다릅니다.</target>
        </trans-unit>
        <trans-unit id="42af694ff0648a4162e6e3bb0c6873e411523ff3" translate="yes" xml:space="preserve">
          <source>However the template binding syntax will always use the Angular style, e.g. square brackets (&lt;code&gt;[...]&lt;/code&gt;) for property binding.</source>
          <target state="translated">그러나 템플릿 바인딩 구문은 속성 바인딩에 항상 Angular 스타일 (예 : 대괄호 ( &lt;code&gt;[...]&lt;/code&gt; ))을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="78384c3742fdf68b1246d1ffbeeb9846d7e95bf3" translate="yes" xml:space="preserve">
          <source>However, a token doesn't have to be a class and even when it is a class, it doesn't have to be the same type as the returned object. That's the subject of the next section.</source>
          <target state="translated">그러나 토큰은 클래스 일 필요는 없으며 클래스 일 때도 반환 된 객체와 동일한 유형일 필요는 없습니다. 이것이 다음 섹션의 주제입니다.</target>
        </trans-unit>
        <trans-unit id="b3116f3e696e3745d93dc36e6d542835460c30c1" translate="yes" xml:space="preserve">
          <source>However, behind the scenes, Angular uses a logical view representation as follows when resolving injection requests:</source>
          <target state="translated">그러나 뒤에서 Angular는 주입 요청을 해결할 때 다음과 같이 논리적 뷰 표현을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="693f46cb5ca176639aee0593be73408376b61903" translate="yes" xml:space="preserve">
          <source>However, certain JavaScript syntax is not allowed:</source>
          <target state="translated">그러나 특정 JavaScript 구문은 허용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="98c48d0fa6289215af7e49a79607c8e0ccd6333d" translate="yes" xml:space="preserve">
          <source>However, if you run the tests in a &lt;strong&gt;non-CLI environment&lt;/strong&gt;, tests of this component may fail. For example, if you run the &lt;code&gt;BannerComponent&lt;/code&gt; tests in a web coding environment such as &lt;a href=&quot;https://plnkr.co/&quot;&gt;plunker&lt;/a&gt;, you'll see a message like this one:</source>
          <target state="translated">그러나 &lt;strong&gt;비 CLI 환경&lt;/strong&gt; 에서 테스트를 실행하면이 구성 요소 테스트에 실패 할 수 있습니다. 당신이 실행하는 경우 예를 들어, &lt;code&gt;BannerComponent&lt;/code&gt; 의 같은 환경을 코딩 웹에서 테스트 &lt;a href=&quot;https://plnkr.co/&quot;&gt;plunker를&lt;/a&gt; ,이 같은 메시지를 볼 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="34e226b688a864f31651d20b9d5626cdbd2a322e" translate="yes" xml:space="preserve">
          <source>However, in practice, Angular simply ignores two-way bindings to template variables. Starting in version 8, attempting to write to template variables is deprecated. In a future version, we will throw to indicate that the write is not supported.</source>
          <target state="translated">그러나 실제로 Angular는 템플릿 변수에 대한 양방향 바인딩을 무시합니다. 버전 8부터는 템플릿 변수에 쓰려고 시도하지 않습니다. 이후 버전에서는 쓰기가 지원되지 않음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="5f46d3bcb10089005d7612c3f9cc519539d288fe" translate="yes" xml:space="preserve">
          <source>However, injecting the real service rarely works well as most dependent services are difficult to create and control.</source>
          <target state="translated">그러나 실제 서비스를 주입하는 것은 거의 효과가 없으며 대부분의 종속 서비스는 작성 및 제어하기가 어렵습니다.</target>
        </trans-unit>
        <trans-unit id="9233cd0b325f45f872324e3cd65f528e0634c2ca" translate="yes" xml:space="preserve">
          <source>However, selective child animations can still be run on a disabled parent in one of the following ways:</source>
          <target state="translated">그러나 다음 중 하나의 방법으로 비활성화 된 부모에서 선택적 자식 애니메이션을 계속 실행할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="29af858dd493651d68cc842edbeb89ea3c49cdf1" translate="yes" xml:space="preserve">
          <source>However, testing a single use case is unlikely to explore the full range of a directive's capabilities. Finding and testing all components that use the directive is tedious, brittle, and almost as unlikely to afford full coverage.</source>
          <target state="translated">그러나 단일 사용 사례를 테스트한다고해서 모든 지시어 기능을 탐색 할 수는 없습니다. 이 지침을 사용하는 모든 구성 요소를 찾고 테스트하는 작업은 지루하고 취하기 쉬우 며 전체 적용 범위를 제공 할 가능성은 거의 없습니다.</target>
        </trans-unit>
        <trans-unit id="63c4f7ceb30a9aea5c8f145005bfe8df2bd99995" translate="yes" xml:space="preserve">
          <source>However, the &lt;code&gt;AnimalService&lt;/code&gt;, which is provided in the &lt;code&gt;AppComponent&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; array, is visible.</source>
          <target state="translated">그러나 &lt;code&gt;AnimalService&lt;/code&gt; 제공된다 &lt;code&gt;AppComponent&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; 의 배열이 표시된다.</target>
        </trans-unit>
        <trans-unit id="409b0b30eacfefc2c2ac82f07ea268d1b0b9bb37" translate="yes" xml:space="preserve">
          <source>However, this might feel like an unwelcome surprise if you expect the module's services to be visible only to the components declared by that feature module. If the &lt;code&gt;HeroModule&lt;/code&gt; provides the &lt;code&gt;HeroService&lt;/code&gt; and the root &lt;code&gt;AppModule&lt;/code&gt; imports &lt;code&gt;HeroModule&lt;/code&gt;, any class that knows the &lt;code&gt;HeroService&lt;/code&gt;&lt;em&gt;type&lt;/em&gt; can inject that service, not just the classes declared in the &lt;code&gt;HeroModule&lt;/code&gt;.</source>
          <target state="translated">그러나 모듈의 서비스가 해당 기능 모듈에 의해 선언 된 구성 요소에만 표시 될 것으로 예상되는 경우 이는 예상치 못한 일입니다. 는 IF &lt;code&gt;HeroModule&lt;/code&gt; 이 제공 &lt;code&gt;HeroService&lt;/code&gt; 루트 &lt;code&gt;AppModule&lt;/code&gt; 의 수입 &lt;code&gt;HeroModule&lt;/code&gt; 는 알고있는 모든 클래스 &lt;code&gt;HeroService&lt;/code&gt; 의&lt;em&gt;유형은&lt;/em&gt; 해당 서비스를 주입 할 수 있습니다,뿐만 아니라 클래스는 선언 &lt;code&gt;HeroModule&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="30edf6e204f52b61f2571aecc7c209f88b84ea1f" translate="yes" xml:space="preserve">
          <source>However, this will work:</source>
          <target state="translated">그러나 이것은 작동합니다 :</target>
        </trans-unit>
        <trans-unit id="d6af0af1a9e9d11d2d6ee59278094f54f71c5e1d" translate="yes" xml:space="preserve">
          <source>However, to set &lt;em&gt;many&lt;/em&gt; inline styles at the same time, use the &lt;code&gt;&lt;a href=&quot;../api/common/ngstyle&quot;&gt;NgStyle&lt;/a&gt;&lt;/code&gt; directive.</source>
          <target state="translated">그러나 동시에 &lt;em&gt;많은&lt;/em&gt; 인라인 스타일 을 설정 하려면 &lt;code&gt;&lt;a href=&quot;../api/common/ngstyle&quot;&gt;NgStyle&lt;/a&gt;&lt;/code&gt; 지시문을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="d76129a2020266d4c676249304bb9a0e0d5fd584" translate="yes" xml:space="preserve">
          <source>However, when Angular expands the shorthand syntax, it creates another &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; tag, with &lt;code&gt;&lt;a href=&quot;ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;ngif#ngIfElse&quot;&gt;ngIfElse&lt;/a&gt;&lt;/code&gt; directives. The anchor element containing the template for the &quot;then&quot; clause becomes the content of this unlabeled &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; tag.</source>
          <target state="translated">그러나 Angular가 속기 구문을 확장하면 &lt;code&gt;&lt;a href=&quot;ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;ngif#ngIfElse&quot;&gt;ngIfElse&lt;/a&gt;&lt;/code&gt; 지시문 과 함께 다른 &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; 태그가 작성 됩니다. &quot;then&quot;절의 템플리트를 포함하는 앵커 요소는 레이블이없는이 &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; 태그 의 컨텐츠가됩니다 .</target>
        </trans-unit>
        <trans-unit id="88d996735fae87b45148458d37047b283d694373" translate="yes" xml:space="preserve">
          <source>However, with &lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;itemForm&lt;/code&gt; is a reference to the &lt;a href=&quot;../api/forms/ngform&quot;&gt;NgForm&lt;/a&gt; directive with the ability to track the value and validity of every control in the form.</source>
          <target state="translated">그러나 &lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; 의 경우 &lt;code&gt;itemForm&lt;/code&gt; 은 폼에있는 모든 컨트롤의 값과 유효성을 추적 할 수 있는 &lt;a href=&quot;../api/forms/ngform&quot;&gt;NgForm&lt;/a&gt; 지시문에 대한 참조 입니다.</target>
        </trans-unit>
        <trans-unit id="4f61b26fdb00998634e95b429fc277a6dcf31568" translate="yes" xml:space="preserve">
          <source>However, you almost always inject services into application classes using Angular dependency injection and you should have tests that reflect that usage pattern. Angular testing utilities make it easy to investigate how injected services behave.</source>
          <target state="translated">그러나 Angular 종속성 주입을 사용하여 거의 항상 서비스를 응용 프로그램 클래스에 주입하므로 해당 사용 패턴을 반영하는 테스트가 있어야합니다. 각도 테스트 유틸리티를 사용하면 주입 된 서비스의 작동 방식을 쉽게 조사 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8e1a2e9c4edb38cc5f33c8a92e731a540c8a4e2e" translate="yes" xml:space="preserve">
          <source>However, you might be troubled by the fact that the real service doesn't quite behave this way. The real service sends requests to a remote server. A server takes time to respond and the response certainly won't be available immediately as in the previous two tests.</source>
          <target state="translated">그러나 실제 서비스가 이러한 방식으로 작동하지 않는다는 사실 때문에 문제가 발생할 수 있습니다. 실제 서비스는 요청을 원격 서버로 보냅니다. 서버가 응답하는 데 시간이 걸리고 이전 두 테스트에서와 같이 즉시 응답을 사용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="07028f666590e3943a2a7158467fb00b0a46d178" translate="yes" xml:space="preserve">
          <source>HttpBackend</source>
          <target state="translated">HttpBackend</target>
        </trans-unit>
        <trans-unit id="74f0d45346780c9a2f7d9ba9c77d099f9ae02d4f" translate="yes" xml:space="preserve">
          <source>HttpClient</source>
          <target state="translated">HttpClient</target>
        </trans-unit>
        <trans-unit id="3dfdf9e078469afa983319e9dbcfec4b07dc38ed" translate="yes" xml:space="preserve">
          <source>HttpClientJsonpModule</source>
          <target state="translated">HttpClientJsonpModule</target>
        </trans-unit>
        <trans-unit id="601f075dcbf43fc07aee8d1626b1bb0090dc3e86" translate="yes" xml:space="preserve">
          <source>HttpClientModule</source>
          <target state="translated">HttpClientModule</target>
        </trans-unit>
        <trans-unit id="ca61ddc922f1c4bb126860b1fcceb0121f1e72b7" translate="yes" xml:space="preserve">
          <source>HttpClientTestingModule</source>
          <target state="translated">HttpClientTestingModule</target>
        </trans-unit>
        <trans-unit id="b0e4475f7bcbcf9e3bfc2d2b8cb35a87cd9da63f" translate="yes" xml:space="preserve">
          <source>HttpClientXsrfModule</source>
          <target state="translated">HttpClientXsrfModule</target>
        </trans-unit>
        <trans-unit id="31b51a48c6488640e3d7d12f81484cc7692bc954" translate="yes" xml:space="preserve">
          <source>HttpDownloadProgressEvent</source>
          <target state="translated">HttpDownloadProgressEvent</target>
        </trans-unit>
        <trans-unit id="631eed221a0a5e1227ee747dedc56a6e5cd04856" translate="yes" xml:space="preserve">
          <source>HttpErrorResponse</source>
          <target state="translated">HttpErrorResponse</target>
        </trans-unit>
        <trans-unit id="b601dad14c6ceb3e36baf63c5302eab72656db35" translate="yes" xml:space="preserve">
          <source>HttpEvent</source>
          <target state="translated">HttpEvent</target>
        </trans-unit>
        <trans-unit id="a25e2886e345f200e99c43296e545f2ec17e87d9" translate="yes" xml:space="preserve">
          <source>HttpEventType</source>
          <target state="translated">HttpEventType</target>
        </trans-unit>
        <trans-unit id="34a6f13d629874a5d2af931439592d54346c6458" translate="yes" xml:space="preserve">
          <source>HttpHandler</source>
          <target state="translated">HttpHandler</target>
        </trans-unit>
        <trans-unit id="13819588a41868e3eb12c563e1b5ce196d242ce8" translate="yes" xml:space="preserve">
          <source>HttpHeaderResponse</source>
          <target state="translated">HttpHeaderResponse</target>
        </trans-unit>
        <trans-unit id="47652085284b8b02e10d108308cf4fafe0936706" translate="yes" xml:space="preserve">
          <source>HttpHeaders</source>
          <target state="translated">HttpHeaders</target>
        </trans-unit>
        <trans-unit id="8184f8a7796e7947f825158c72ba880534cdf906" translate="yes" xml:space="preserve">
          <source>HttpInterceptor</source>
          <target state="translated">HttpInterceptor</target>
        </trans-unit>
        <trans-unit id="306e8873cd28a3d318c8259a4ca9675c917ea59c" translate="yes" xml:space="preserve">
          <source>HttpParameterCodec</source>
          <target state="translated">HttpParameterCodec</target>
        </trans-unit>
        <trans-unit id="f0370ec95bcf0338af85d0d9ee233cbf9b147f0e" translate="yes" xml:space="preserve">
          <source>HttpParams</source>
          <target state="translated">HttpParams</target>
        </trans-unit>
        <trans-unit id="49286b34daf58a4360367b78695303f96afd888f" translate="yes" xml:space="preserve">
          <source>HttpProgressEvent</source>
          <target state="translated">HttpProgressEvent</target>
        </trans-unit>
        <trans-unit id="876884817603f1994832b258f47c862ce8f79db8" translate="yes" xml:space="preserve">
          <source>HttpRequest</source>
          <target state="translated">HttpRequest</target>
        </trans-unit>
        <trans-unit id="98a81a35f1584d5f5070065dbea832e61fb0bf0f" translate="yes" xml:space="preserve">
          <source>HttpResponse</source>
          <target state="translated">HttpResponse</target>
        </trans-unit>
        <trans-unit id="41598c5b775fa5c84b8eee569b34c38dcacdd477" translate="yes" xml:space="preserve">
          <source>HttpResponseBase</source>
          <target state="translated">HttpResponseBase</target>
        </trans-unit>
        <trans-unit id="91259ca5dbf5ee0c7be0ec1ecec66070797276f8" translate="yes" xml:space="preserve">
          <source>HttpSentEvent</source>
          <target state="translated">HttpSentEvent</target>
        </trans-unit>
        <trans-unit id="0ec2efbe19ba7e3ef035c35046c8d7e07d7af284" translate="yes" xml:space="preserve">
          <source>HttpTestingController</source>
          <target state="translated">HttpTestingController</target>
        </trans-unit>
        <trans-unit id="2594ee986b764be8ea778008c933b096d5b6bf37" translate="yes" xml:space="preserve">
          <source>HttpUploadProgressEvent</source>
          <target state="translated">HttpUploadProgressEvent</target>
        </trans-unit>
        <trans-unit id="97816692d8c249075784ff4511d32cb3200d0fae" translate="yes" xml:space="preserve">
          <source>HttpUrlEncodingCodec</source>
          <target state="translated">HttpUrlEncodingCodec</target>
        </trans-unit>
        <trans-unit id="0aa97445f8cf4a27064f48a9964e2e2e5accb9b5" translate="yes" xml:space="preserve">
          <source>HttpUserEvent</source>
          <target state="translated">HttpUserEvent</target>
        </trans-unit>
        <trans-unit id="d81289e5fca4f39bab401bd23f2b00141a74346a" translate="yes" xml:space="preserve">
          <source>HttpXhrBackend</source>
          <target state="translated">HttpXhrBackend</target>
        </trans-unit>
        <trans-unit id="7869711a68093e11cb599a1fe14c17baa6ba3dd6" translate="yes" xml:space="preserve">
          <source>HttpXsrfTokenExtractor</source>
          <target state="translated">HttpXsrfTokenExtractor</target>
        </trans-unit>
        <trans-unit id="801f2493757c72ca45a5c235d90ad1ca581f7755" translate="yes" xml:space="preserve">
          <source>Human-readable format of exponential. Example: 1.2x103</source>
          <target state="translated">사람이 읽을 수있는 지수 형식. 예 : 1.2x103</target>
        </trans-unit>
        <trans-unit id="6ed0186e952f0fc2ad82383289a170a0c73f97bd" translate="yes" xml:space="preserve">
          <source>I18nPluralPipe</source>
          <target state="translated">I18nPluralPipe</target>
        </trans-unit>
        <trans-unit id="abc1f616112daf4b387de1e6658364fdc11d58ba" translate="yes" xml:space="preserve">
          <source>I18nSelectPipe</source>
          <target state="translated">I18nSelectPipe</target>
        </trans-unit>
        <trans-unit id="843165076cf3bd0349681e4beeed1c6874126cc4" translate="yes" xml:space="preserve">
          <source>ID of the option element</source>
          <target state="translated">옵션 요소의 ID</target>
        </trans-unit>
        <trans-unit id="9ff31bb53dfc2bff233e882d367714fba682d7dc" translate="yes" xml:space="preserve">
          <source>IE</source>
          <target state="translated">IE</target>
        </trans-unit>
        <trans-unit id="e99eab8a5ebe9abaa8723fd9f1ddbf2c7d1a25dc" translate="yes" xml:space="preserve">
          <source>IE 10, IE 11</source>
          <target state="translated">IE 10, IE 11</target>
        </trans-unit>
        <trans-unit id="09500d66bc1c080dec280867c70d89f272b9554c" translate="yes" xml:space="preserve">
          <source>IE 11</source>
          <target state="translated">IE 11</target>
        </trans-unit>
        <trans-unit id="8e9963ae494f00fdfda1290439172d2aa12514d1" translate="yes" xml:space="preserve">
          <source>IE 9</source>
          <target state="translated">IE 9</target>
        </trans-unit>
        <trans-unit id="8c7d126d16997b97355174dcda4c6bb9cf8e2b48" translate="yes" xml:space="preserve">
          <source>IE Mobile</source>
          <target state="translated">IE 모바일</target>
        </trans-unit>
        <trans-unit id="60b82a5cb94fb01631398c058b59f037ae77f375" translate="yes" xml:space="preserve">
          <source>IIFE</source>
          <target state="translated">IIFE</target>
        </trans-unit>
        <trans-unit id="3449c1aa01ef7a63b3d78a29f229155083bed4a6" translate="yes" xml:space="preserve">
          <source>INITIAL_CONFIG</source>
          <target state="translated">INITIAL_CONFIG</target>
        </trans-unit>
        <trans-unit id="5157ac1ff7f65b428bec7bef08cc132329b63c6d" translate="yes" xml:space="preserve">
          <source>ISO8601 basic format</source>
          <target state="translated">ISO8601 기본 형식</target>
        </trans-unit>
        <trans-unit id="39097fa6a5275ab54197cd03bbe174e778b7eb1c" translate="yes" xml:space="preserve">
          <source>ISO8601 extended format + Z indicator for offset 0 (= XXXXX)</source>
          <target state="translated">오프셋 0에 대한 ISO8601 확장 형식 + Z 표시기 (= XXXXX)</target>
        </trans-unit>
        <trans-unit id="63c464b08623002f37661266e75b01e33a159ea0" translate="yes" xml:space="preserve">
          <source>Ideally, a component's job is to enable the user experience and nothing more. A component should present properties and methods for data binding, in order to mediate between the view (rendered by the template) and the application logic (which often includes some notion of a &lt;em&gt;model&lt;/em&gt;).</source>
          <target state="translated">이상적으로 구성 요소의 역할은 사용자 경험을 가능하게하는 것입니다. 컴포넌트는 뷰 (템플릿에 의해 렌더링 됨)와 애플리케이션 로직 (종종 &lt;em&gt;모델&lt;/em&gt; 개념 포함) 사이를 중개하기 위해 데이터 바인딩을위한 특성 및 메소드를 제공해야합니다 .</target>
        </trans-unit>
        <trans-unit id="273acb31b215d9e49019afd7c3e7cf8d4a83de16" translate="yes" xml:space="preserve">
          <source>Ideally, if an application isn't injecting a service, Angular shouldn't include it in the final output. However, Angular has to be able to identify at build time whether the app will require the service or not. Because it's always possible to inject a service directly using &lt;code&gt;injector.get(Service)&lt;/code&gt;, Angular can't identify all of the places in your code where this injection could happen, so it has no choice but to include the service in the injector. Thus, services in the NgModule &lt;code&gt;providers&lt;/code&gt; array or at component level are not tree-shakable.</source>
          <target state="translated">이상적으로 응용 프로그램이 서비스를 주입하지 않으면 Angular는 최종 출력에 서비스를 포함시키지 않아야합니다. 그러나 Angular는 빌드시 앱에 서비스가 필요한지 여부를 식별 할 수 있어야합니다. &lt;code&gt;injector.get(Service)&lt;/code&gt; 사용하여 직접 서비스를 직접 주입 할 수 있기 때문에 Angular는 코드에서이 삽입이 발생할 수있는 모든 위치를 식별 할 수 없으므로 인젝터에 서비스를 포함시킬 수밖에 없습니다. 따라서 NgModule &lt;code&gt;providers&lt;/code&gt; 배열 또는 구성 요소 수준의 서비스는 트리를 사용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="c0c74f9c69e219a901e496db780fa7e03049a871" translate="yes" xml:space="preserve">
          <source>Ideally, users should be able to click a link to navigate rather than pasting a route URL into the address bar.</source>
          <target state="translated">이상적으로, 사용자는 주소 표시 줄에 경로 URL을 붙여 넣지 않고 링크를 클릭하여 탐색 할 수 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="06b6ace8ca3f18249e8ba4ea9090c0f34564ce1c" translate="yes" xml:space="preserve">
          <source>Identifier</source>
          <target state="translated">Identifier</target>
        </trans-unit>
        <trans-unit id="f58ce3d35d93d2140b71abc0fa1b54986940d04d" translate="yes" xml:space="preserve">
          <source>Identifies and handles a given HTTP request.</source>
          <target state="translated">주어진 HTTP 요청을 식별하고 처리합니다.</target>
        </trans-unit>
        <trans-unit id="faa69bd85cc69080cb6a8a871ae2448b19bdf3da" translate="yes" xml:space="preserve">
          <source>Identifies and handles a given JSONP request.</source>
          <target state="translated">주어진 JSONP 요청을 식별하고 처리합니다.</target>
        </trans-unit>
        <trans-unit id="dee8349d1c84482e40f15df8442baac4ca99ef95" translate="yes" xml:space="preserve">
          <source>Identifies requests with the method JSONP and shifts them to the &lt;code&gt;&lt;a href=&quot;http/jsonpclientbackend&quot;&gt;JsonpClientBackend&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">JSONP 메소드로 요청을 식별하고 &lt;code&gt;&lt;a href=&quot;http/jsonpclientbackend&quot;&gt;JsonpClientBackend&lt;/a&gt;&lt;/code&gt; 로 이동시킵니다 .</target>
        </trans-unit>
        <trans-unit id="f8df9c229b309d13b4e14007cc922a7bc063af20" translate="yes" xml:space="preserve">
          <source>Identifies requests with the method JSONP and shifts them to the &lt;code&gt;&lt;a href=&quot;jsonpclientbackend&quot;&gt;JsonpClientBackend&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">JSONP 메소드로 요청을 식별하고 &lt;code&gt;&lt;a href=&quot;jsonpclientbackend&quot;&gt;JsonpClientBackend&lt;/a&gt;&lt;/code&gt; 로 이동시킵니다 .</target>
        </trans-unit>
        <trans-unit id="839e3114e3b9d3a3fa48867a14c4e9afe0357710" translate="yes" xml:space="preserve">
          <source>Identifies the call or event that triggered the navigation. An &lt;code&gt;imperative&lt;/code&gt; trigger is a call to &lt;code&gt;router.navigateByUrl()&lt;/code&gt; or &lt;code&gt;router.navigate()&lt;/code&gt;.</source>
          <target state="translated">탐색을 트리거 한 통화 또는 이벤트를 식별합니다. &lt;code&gt;imperative&lt;/code&gt; 트리거가에 호출입니다 &lt;code&gt;router.navigateByUrl()&lt;/code&gt; 또는 &lt;code&gt;router.navigate()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="38af51b71aa8062ad05f52bc1d4222fe545ab1aa" translate="yes" xml:space="preserve">
          <source>Identify</source>
          <target state="translated">Identify</target>
        </trans-unit>
        <trans-unit id="e4f148f2d6935d4ae76200aaec633ed31b1033b2" translate="yes" xml:space="preserve">
          <source>Identity reference</source>
          <target state="translated">신원 참조</target>
        </trans-unit>
        <trans-unit id="f24e9c9588c68667b970bc698f5d8988ec03b9be" translate="yes" xml:space="preserve">
          <source>Idle task queue</source>
          <target state="translated">유휴 작업 대기열</target>
        </trans-unit>
        <trans-unit id="6bb4d315363a95a4fbf146f2054fbe340f1c9487" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, the view still renders but the displayed value is blank; you see only &quot;The item name is:&quot; with nothing after it.</source>
          <target state="translated">경우 &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; 이다 &lt;code&gt;null&lt;/code&gt; 뷰는 여전히 렌더링하지만, 표시된 값이 비어 있습니다; &quot;항목 이름은 다음과 같습니다.&quot;만 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="6da6a54b219d1bf81b2cc66cad7dd0e7ddd6117a" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;a href=&quot;httprequest#responseType&quot;&gt;responseType&lt;/a&gt;&lt;/code&gt; is the default &lt;code&gt;&lt;a href=&quot;../jsonpipe&quot;&gt;json&lt;/a&gt;&lt;/code&gt;, you can pass a type interface for the resulting object as a type parameter to the call.</source>
          <target state="translated">경우 &lt;code&gt;&lt;a href=&quot;httprequest#responseType&quot;&gt;responseType&lt;/a&gt;&lt;/code&gt; 은 기본입니다 &lt;code&gt;&lt;a href=&quot;../jsonpipe&quot;&gt;json&lt;/a&gt;&lt;/code&gt; , 당신은 전화에 입력 매개 변수로 생성 된 객체의 유형 인터페이스를 전달할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="20046da8dd9cbe89cc7285da01207f6baa79e09b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;enabled&lt;/code&gt; is set to &lt;code&gt;false&lt;/code&gt; in the given options, the module will behave as if service workers are not supported by the browser, and the service worker will not be registered.</source>
          <target state="translated">경우 &lt;code&gt;enabled&lt;/code&gt; 으로 설정되어 &lt;code&gt;false&lt;/code&gt; 주어진 옵션에서, 모듈은 서비스 작업자가 브라우저에서 지원되지 않으며, 서비스 노동자가 등록하지 않을 경우로 동작합니다.</target>
        </trans-unit>
        <trans-unit id="e98a50040a0048fe1d6d721d215eaf87a57c6337" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;ignoreCancelled&lt;/code&gt; is not set (the default), &lt;code&gt;verify()&lt;/code&gt; will also fail if cancelled requests were not explicitly matched.</source>
          <target state="translated">경우 &lt;code&gt;ignoreCancelled&lt;/code&gt; 이 (기본값) 설정되지 않은, &lt;code&gt;verify()&lt;/code&gt; 취소 요청이 명시 적으로 일치되지 않은 경우에도 실패합니다.</target>
        </trans-unit>
        <trans-unit id="88c7c960113eaa483cbd792b988036fe861c77b1" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;resourcesOutputPath&lt;/code&gt; or &lt;code&gt;assets&lt;/code&gt; paths are modified after the generation of configuration file, you need to change the paths manually in &lt;code&gt;ngsw-config.json&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;resourcesOutputPath&lt;/code&gt; 또는 &lt;code&gt;assets&lt;/code&gt; 경로가 구성 파일의 생성 후 수정, 당신은 수동으로 경로를 변경해야 &lt;code&gt;ngsw-config.json&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2c26dcf1ae594af2316d44c7bd3b0f361e602408" translate="yes" xml:space="preserve">
          <source>If Angular doesn't find the provider in any &lt;code&gt;ElementInjector&lt;/code&gt;s, it goes back to the element where the request originated and looks in the &lt;code&gt;ModuleInjector&lt;/code&gt; hierarchy. If Angular still doesn't find the provider, it throws an error.</source>
          <target state="translated">Angular가 &lt;code&gt;ElementInjector&lt;/code&gt; 에서 제공자를 찾지 못하면 요청이 시작된 요소로 돌아가 &lt;code&gt;ModuleInjector&lt;/code&gt; 계층 구조 에서 찾습니다 . Angular가 여전히 공급자를 찾지 못하면 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="7e29b3f5e2dff7dd76052d8ccd8eddda8abe0ae1" translate="yes" xml:space="preserve">
          <source>If AnimationBuilder is used, enables scrubbing support for IE/Edge and Safari. (Chrome and Firefox support this natively).</source>
          <target state="translated">AnimationBuilder를 사용하는 경우 IE / Edge 및 Safari에 대한 스크러빙 지원을 활성화합니다. (Chrome 및 Firefox는이를 기본적으로 지원합니다).</target>
        </trans-unit>
        <trans-unit id="41891637b47b87d8458f07c4a6cafe2c7fdb3d2b" translate="yes" xml:space="preserve">
          <source>If NgModule A provides a service for token 'X' and imports an NgModule B that also provides a service for token 'X', then NgModule A's service definition &quot;wins&quot;.</source>
          <target state="translated">NgModule A가 토큰 'X'에 대한 서비스를 제공하고 토큰 'X'에 대한 서비스를 제공하는 NgModule B를 가져 오면 NgModule A의 서비스 정의가 &quot;승리&quot;됩니다.</target>
        </trans-unit>
        <trans-unit id="c1eecfae70b492bc24007ffa2294728a9dfa495c" translate="yes" xml:space="preserve">
          <source>If a cachable request is found in the cache, the interceptor returns an &lt;code&gt;of()&lt;/code&gt;&lt;em&gt;observable&lt;/em&gt; with the cached response, by-passing the &lt;code&gt;next&lt;/code&gt; handler (and all other interceptors downstream).</source>
          <target state="translated">캐시에서 캐시 가능한 요청이 발견되면 인터셉터는 &lt;code&gt;next&lt;/code&gt; 핸들러 (및 다른 모든 인터셉터 다운 스트림)를 우회하여 캐시 된 응답으로 &lt;em&gt;관찰 가능한 &lt;/em&gt; &lt;code&gt;of()&lt;/code&gt; 리턴합니다 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="a557a16e0123df7fbc078703591e93ef301867af" translate="yes" xml:space="preserve">
          <source>If a cachable request is not in cache, the code calls &lt;code&gt;sendRequest&lt;/code&gt;.</source>
          <target state="translated">캐시 가능한 요청이 캐시에 없으면 코드는 &lt;code&gt;sendRequest&lt;/code&gt; 를 호출합니다 .</target>
        </trans-unit>
        <trans-unit id="25a21150a7b49171680b296303c8c3068307fd81" translate="yes" xml:space="preserve">
          <source>If a component isn't an &lt;em&gt;entry component&lt;/em&gt; and isn't found in a template, the tree shaker will throw it away. So, it's best to add only the components that are truly entry components to help keep your app as trim as possible.</source>
          <target state="translated">구성 요소가 &lt;em&gt;입력 구성 요소&lt;/em&gt; 가 아니고 템플릿에없는 경우 트리 셰이커는 해당 &lt;em&gt;구성 요소를&lt;/em&gt; 버립니다. 따라서 앱을 가능한 한 깔끔하게 유지하는 데 도움이되도록 실제로 입력 구성 요소 인 구성 요소 만 추가하는 것이 가장 좋습니다.</target>
        </trans-unit>
        <trans-unit id="82977af04a1be023e2632c7ce2dc1d6a584c85e0" translate="yes" xml:space="preserve">
          <source>If a component isn't an &lt;em&gt;entry component&lt;/em&gt; or wasn't found in a template, the compiler omits it.</source>
          <target state="translated">구성 요소가 &lt;em&gt;입력 구성&lt;/em&gt; 요소가 아니 거나 템플리트에서 발견되지 않은 경우 컴파일러는 해당 &lt;em&gt;구성 요소를&lt;/em&gt; 생략합니다.</target>
        </trans-unit>
        <trans-unit id="928fd4fa526ed6eda7f59b8933282d6e07b0b85b" translate="yes" xml:space="preserve">
          <source>If a component, directive, or pipe belongs to a module in the &lt;code&gt;imports&lt;/code&gt; array, ​&lt;em&gt;don't&lt;/em&gt;​ re-declare it in the &lt;code&gt;declarations&lt;/code&gt; array. If you wrote it and it should belong to this module, ​&lt;em&gt;do&lt;/em&gt;​ declare it in the &lt;code&gt;declarations&lt;/code&gt; array.</source>
          <target state="translated">컴포넌트, 지시, 또는 파이프에서의 모듈에 속하는 경우 &lt;code&gt;imports&lt;/code&gt; 배열 &lt;em&gt;하지&lt;/em&gt; 그것을 재 - 선언 &lt;code&gt;declarations&lt;/code&gt; 어레이. 당신이 그것을 작성하고이 모듈에 속해야 경우 &lt;em&gt;않는&lt;/em&gt; 에 선언 &lt;code&gt;declarations&lt;/code&gt; 배열입니다.</target>
        </trans-unit>
        <trans-unit id="5412001a6342f943d1164b11e4f80c199052baef" translate="yes" xml:space="preserve">
          <source>If a library doesn't have typings available at &lt;code&gt;@types/&lt;/code&gt;, you can still use it by manually adding typings for it. To do this:</source>
          <target state="translated">라이브러리에 &lt;code&gt;@types/&lt;/code&gt; 에서 입력 할 수없는 경우 수동으로 입력을 추가하여 사용할 수 있습니다. 이것을하기 위해:</target>
        </trans-unit>
        <trans-unit id="5b23cd84551a7f7a976d6aeb6c17b5809a2ed511" translate="yes" xml:space="preserve">
          <source>If a matching request has been made, fail with an error message including the given request description, if any.</source>
          <target state="translated">일치하는 요청이 이루어진 경우 주어진 요청 설명 (있는 경우)을 포함하는 오류 메시지와 함께 실패합니다.</target>
        </trans-unit>
        <trans-unit id="37dfd42ae1c031038225c47cb260140e0566ea26" translate="yes" xml:space="preserve">
          <source>If a module defines both providers and declarations (components, directives, pipes), then loading the module in multiple feature modules would duplicate the registration of the service. This could result in multiple service instances and the service would no longer behave as a singleton.</source>
          <target state="translated">모듈이 공급자와 선언 (구성 요소, 지시문, 파이프)을 모두 정의하는 경우 여러 기능 모듈에 모듈을로드하면 서비스 등록이 복제됩니다. 이로 인해 여러 서비스 인스턴스가 발생할 수 있으며 서비스는 더 이상 싱글 톤으로 작동하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="153c1d112fedc7715f021056fb6893af4681c150" translate="yes" xml:space="preserve">
          <source>If a particular file fails validation, the Angular service worker attempts to re-fetch the content using a &quot;cache-busting&quot; URL parameter to eliminate the effects of browser or intermediate caching. If that content also fails validation, the service worker considers the entire version of the app to be invalid and it stops serving the app. If necessary, the service worker enters a safe mode where requests fall back on the network, opting not to use its cache if the risk of serving invalid, broken, or outdated content is high.</source>
          <target state="translated">특정 파일의 유효성 검사에 실패하면 Angular 서비스 워커는 &quot;캐시 버스 팅&quot;URL 매개 변수를 사용하여 콘텐츠를 다시 가져 오려고 시도하여 브라우저 또는 중간 캐싱의 영향을 제거합니다. 해당 콘텐츠도 유효성 검사에 실패하면 서비스 워커는 전체 버전의 앱이 유효하지 않은 것으로 간주하고 앱 제공을 중지합니다. 필요한 경우, 서비스 워커는 요청이 네트워크에서 폴백되는 안전 모드로 들어갑니다. 유효하지 않거나 손상되었거나 오래된 컨텐츠를 제공 할 위험이 높은 경우 캐시를 사용하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="772ddfa5b7d68e2c32169f0370cc73c59e176504" translate="yes" xml:space="preserve">
          <source>If a previous search request is still &lt;em&gt;in-flight&lt;/em&gt; (as when the network connection is poor), it cancels that request and sends a new one.</source>
          <target state="translated">이전 검색 요청이 여전히 &lt;em&gt;진행 중이면&lt;/em&gt; (네트워크 연결 상태가 좋지 않은 경우) 해당 요청을 취소하고 새 요청을 보냅니다.</target>
        </trans-unit>
        <trans-unit id="b53118bae5db34ffb1b4cf25da459ef342963d97" translate="yes" xml:space="preserve">
          <source>If a provider cannot be configured in this way (perhaps because it has no sensible default value), then register application-wide providers in the root &lt;code&gt;AppModule&lt;/code&gt;, not in the &lt;code&gt;AppComponent&lt;/code&gt;.</source>
          <target state="translated">공급자를 이러한 방식으로 구성 할 수없는 경우 (아마도 합리적인 기본값이 없기 때문에) 응용 프로그램 전체 공급자를 &lt;code&gt;AppComponent&lt;/code&gt; 가 아닌 루트 &lt;code&gt;AppModule&lt;/code&gt; 에 등록 하십시오 .</target>
        </trans-unit>
        <trans-unit id="7eb25f225ddf9c958a4a310cf508da2c8b8d3cae" translate="yes" xml:space="preserve">
          <source>If a region of the DOM (or the entire application) has its animations disabled, the animation trigger callbacks still fire, but for zero seconds. When the callback fires, it provides an instance of an &lt;code&gt;&lt;a href=&quot;animationevent&quot;&gt;AnimationEvent&lt;/a&gt;&lt;/code&gt;. If animations are disabled, the &lt;code&gt;.disabled&lt;/code&gt; flag on the event is true.</source>
          <target state="translated">DOM 영역 (또는 전체 응용 프로그램)에서 해당 애니메이션이 비활성화 된 경우 애니메이션 트리거 콜백은 여전히 ​​실행되지만 0 초 동안 실행됩니다. 콜백이 발생하면 &lt;code&gt;&lt;a href=&quot;animationevent&quot;&gt;AnimationEvent&lt;/a&gt;&lt;/code&gt; 의 인스턴스를 제공합니다 . 애니메이션이 비활성화 된 경우 이벤트 에서 &lt;code&gt;.disabled&lt;/code&gt; 플래그가 true입니다.</target>
        </trans-unit>
        <trans-unit id="ed6f22701aa659882520ee8999e4722594b619bd" translate="yes" xml:space="preserve">
          <source>If a route is protected by &lt;code&gt;&lt;a href=&quot;route#canLoad&quot;&gt;canLoad&lt;/a&gt;&lt;/code&gt; guards, the preloaded will not load it.</source>
          <target state="translated">경로가 &lt;code&gt;&lt;a href=&quot;route#canLoad&quot;&gt;canLoad&lt;/a&gt;&lt;/code&gt; 가드 로 보호되는 경우 사전로드 된 경로는 로드되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="a9439dbdfd08109c95a98837df7b16acd71a7577" translate="yes" xml:space="preserve">
          <source>If a synchronous error happens it will be rethrown and not reported via &lt;code&gt;onError&lt;/code&gt;.</source>
          <target state="translated">동기 오류가 발생하면 다시 발생하여 &lt;code&gt;onError&lt;/code&gt; 를 통해보고되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="00daec30c96e47a317ac6daa4260ebf84859c21c" translate="yes" xml:space="preserve">
          <source>If a trigger binding value is a Boolean, it can be matched using a transition expression that compares true and false or 1 and 0. For example:</source>
          <target state="translated">트리거 바인딩 값이 부울 인 경우 true와 false 또는 1과 0을 비교하는 전이 표현식을 사용하여 일치시킬 수 있습니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="126cac6a6045858048bd7e923d7b34e4f134314c" translate="yes" xml:space="preserve">
          <source>If a trigger contains a boolean value as a binding value, then this value can be matched using a &lt;code&gt;&lt;a href=&quot;../api/animations/transition&quot;&gt;transition&lt;/a&gt;()&lt;/code&gt; expression that compares &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt;, or &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">트리거에 바인딩 값으로 부울 값이 포함 된 경우 &lt;code&gt;true&lt;/code&gt; 및 &lt;code&gt;false&lt;/code&gt; 또는 &lt;code&gt;1&lt;/code&gt; 과 &lt;code&gt;0&lt;/code&gt; 을 비교 하는 &lt;code&gt;&lt;a href=&quot;../api/animations/transition&quot;&gt;transition&lt;/a&gt;()&lt;/code&gt; 표현식을 사용하여이 값을 일치시킬 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e50e34462749ac65c8cf4317ed5676213f6e2090" translate="yes" xml:space="preserve">
          <source>If a user enters that URL into the browser address bar, the router should recognize the pattern and go to the same &quot;Magneta&quot; detail view.</source>
          <target state="translated">사용자가 브라우저 주소 표시 줄에 해당 URL을 입력하면 라우터는 패턴을 인식하고 동일한 &quot;Magneta&quot;상세보기로 이동해야합니다.</target>
        </trans-unit>
        <trans-unit id="f6919a849126284f296a0ff57039a9cf7b8e4a82" translate="yes" xml:space="preserve">
          <source>If an expression is not foldable, the collector writes it to &lt;code&gt;.metadata.json&lt;/code&gt; as an &lt;a href=&quot;https://en.wikipedia.org/wiki/Abstract_syntax_tree&quot;&gt;AST&lt;/a&gt; for the compiler to resolve.</source>
          <target state="translated">식이 접을 수없는 경우, 콜렉터에 기록 &lt;code&gt;.metadata.json&lt;/code&gt; int로서 &lt;a href=&quot;https://en.wikipedia.org/wiki/Abstract_syntax_tree&quot;&gt;AST&lt;/a&gt; 해결하기 위해 컴파일러.</target>
        </trans-unit>
        <trans-unit id="3776c3775f99b8ca1455c46376b27adc6b1e4aab" translate="yes" xml:space="preserve">
          <source>If an expression uses unsupported syntax, the collector writes an error node to the &lt;code&gt;.metadata.json&lt;/code&gt; file. The compiler later reports the error if it needs that piece of metadata to generate the application code.</source>
          <target state="translated">표현식이 지원되지 않는 구문을 사용하는 경우 콜렉터는 오류 노드를 &lt;code&gt;.metadata.json&lt;/code&gt; 파일에 씁니다 . 나중에 응용 프로그램 코드를 생성하기 위해 메타 데이터가 필요한 경우 컴파일러에서 오류를보고합니다.</target>
        </trans-unit>
        <trans-unit id="2c1ea63fe3e751750d668900003cfb0b2fc2138e" translate="yes" xml:space="preserve">
          <source>If any of the passed-in parameter values are missing from this call, the default values are used. If one or more parameter values are missing before a step is animated, &lt;code&gt;&lt;a href=&quot;useanimation&quot;&gt;useAnimation&lt;/a&gt;()&lt;/code&gt; throws an error.</source>
          <target state="translated">전달 된 매개 변수 값이이 호출에서 누락 된 경우 기본값이 사용됩니다. 단계가 애니메이션되기 전에 하나 이상의 매개 변수 값이 누락되면 &lt;code&gt;&lt;a href=&quot;useanimation&quot;&gt;useAnimation&lt;/a&gt;()&lt;/code&gt; 에서 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="8297839eeda1d6ac628fdcf349ff15b398e9f7ec" translate="yes" xml:space="preserve">
          <source>If any requests are outstanding, fail with an error message indicating which requests were not handled.</source>
          <target state="translated">요청이 해결되지 않은 경우 처리되지 않은 요청을 나타내는 오류 메시지와 함께 실패합니다.</target>
        </trans-unit>
        <trans-unit id="1fe08f5539ac4bc33409018c8e77a3cf182d48db" translate="yes" xml:space="preserve">
          <source>If desired, open the Output window (&lt;code&gt;View&lt;/code&gt; | &lt;code&gt;&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;&lt;/code&gt;) to watch the npm commands execute.</source>
          <target state="translated">원하는 경우 출력 창 ( &lt;code&gt;View&lt;/code&gt; | &lt;code&gt;&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;&lt;/code&gt; )을 열어 npm 명령이 실행되는 것을보십시오.</target>
        </trans-unit>
        <trans-unit id="a7351ddc6a7cd3e167d6abe4319ab53c493d68c8" translate="yes" xml:space="preserve">
          <source>If don't add the interface for the script-defined extension, your IDE shows an error:</source>
          <target state="translated">스크립트 정의 확장에 대한 인터페이스를 추가하지 않으면 IDE에 오류가 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="ac260a05c0b8dad2568206edbc95161f250ef807" translate="yes" xml:space="preserve">
          <source>If false, will error out if installed packages are incompatible with the update.</source>
          <target state="translated">false 인 경우 설치된 패키지가 업데이트와 호환되지 않으면 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="f032cf6d2b03e78a246739a8908cb417e0108e0e" translate="yes" xml:space="preserve">
          <source>If forms are a central part of your application, scalability is very important. Being able to reuse form models across components is critical.</source>
          <target state="translated">양식이 응용 프로그램의 핵심 부분 인 경우 확장 성이 매우 중요합니다. 구성 요소에서 양식 모델을 재사용 할 수 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="534d625f4fac3eff1e93003d98e3e44e789a243b" translate="yes" xml:space="preserve">
          <source>If it doesn't return a valid &lt;code&gt;Crisis&lt;/code&gt;, return an empty &lt;code&gt;Observable&lt;/code&gt;, canceling the previous in-flight navigation to the &lt;code&gt;CrisisDetailComponent&lt;/code&gt; and navigate the user back to the &lt;code&gt;CrisisListComponent&lt;/code&gt;. The update resolver service looks like this:</source>
          <target state="translated">유효한 &lt;code&gt;Crisis&lt;/code&gt; 를 반환 하지 않으면 비어있는 &lt;code&gt;Observable&lt;/code&gt; 을 반환 하여 이전 비행 중 &lt;code&gt;CrisisDetailComponent&lt;/code&gt; 로의 탐색을 취소 하고 사용자를 &lt;code&gt;CrisisListComponent&lt;/code&gt; 로 다시 탐색합니다 . 업데이트 확인자 서비스는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="94cc9640df1c6d475f62695048e0d376c2bec854" translate="yes" xml:space="preserve">
          <source>If it returns &lt;code&gt;false&lt;/code&gt;, the navigation process stops and the user stays put.</source>
          <target state="translated">&lt;code&gt;false&lt;/code&gt; 를 반환 하면 탐색 프로세스가 중지되고 사용자는 그대로 유지됩니다.</target>
        </trans-unit>
        <trans-unit id="934263a7e8d3127facc33238735344f25d2875f1" translate="yes" xml:space="preserve">
          <source>If it returns &lt;code&gt;true&lt;/code&gt;, the navigation process continues.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 를 반환 하면 탐색 프로세스가 계속됩니다.</target>
        </trans-unit>
        <trans-unit id="c061c62da9990fa021cd80362e45d9d595bd3cad" translate="yes" xml:space="preserve">
          <source>If it returns a &lt;code&gt;&lt;a href=&quot;../api/router/urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt;, the current navigation cancels and a new navigation is initiated to the &lt;code&gt;&lt;a href=&quot;../api/router/urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt; returned.</source>
          <target state="translated">그것이 반환하는 경우 &lt;code&gt;&lt;a href=&quot;../api/router/urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt; 을 , 현재 탐색 취소하고에 새로운 탐색이 시작됩니다 &lt;code&gt;&lt;a href=&quot;../api/router/urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt; 이 돌아왔다.</target>
        </trans-unit>
        <trans-unit id="ccea769affa3066668cea7a19a1c6abd478fefbc" translate="yes" xml:space="preserve">
          <source>If it's the consumer's decision whether a provider is available application-wide or not, then register providers in modules (&lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule#providers&quot;&gt;NgModule.providers&lt;/a&gt;&lt;/code&gt;) instead of registering in components (&lt;code&gt;@Component.providers&lt;/code&gt;).</source>
          <target state="translated">공급자가 응용 프로그램 전체에서 사용할 수 있는지 여부가 소비자의 결정 인 경우 구성 요소 ( &lt;code&gt;@Component.providers&lt;/code&gt; ) 에 등록하지 않고 모듈 ( &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule#providers&quot;&gt;NgModule.providers&lt;/a&gt;&lt;/code&gt; )에 공급자를 등록하십시오 .</target>
        </trans-unit>
        <trans-unit id="3de1670255b8a935f81404283d68b60a57924133" translate="yes" xml:space="preserve">
          <source>If matching by URL isn't sufficient, it's possible to implement your own matching function. For example, you could look for an outgoing request that has an authorization header:</source>
          <target state="translated">URL로 일치하는 것으로 충분하지 않은 경우 고유 한 일치 기능을 구현할 수 있습니다. 예를 들어 인증 헤더가있는 발신 요청을 찾을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="056b912650db2b88322b88ec9db23fdbd1b15e9c" translate="yes" xml:space="preserve">
          <source>If necessary, listen to the directive's &lt;code&gt;ngSubmit&lt;/code&gt; event to be notified when the user has triggered a form submission. The &lt;code&gt;ngSubmit&lt;/code&gt; event emits the original form submission event.</source>
          <target state="translated">필요한 경우 사용자가 양식 제출을 트리거했을 때 알림을 &lt;code&gt;ngSubmit&lt;/code&gt; 지시문의 ngSubmit 이벤트를 수신하십시오 . &lt;code&gt;ngSubmit&lt;/code&gt; 의 이벤트는 원래의 양식 제출 이벤트를 방출한다.</target>
        </trans-unit>
        <trans-unit id="1d1b279b18b25539f878e1f938bbd94f7b8453bd" translate="yes" xml:space="preserve">
          <source>If no names are supplied, the default cookie name is &lt;code&gt;XSRF-TOKEN&lt;/code&gt; and the default header name is &lt;code&gt;X-XSRF-TOKEN&lt;/code&gt;.</source>
          <target state="translated">이름이 제공되지 않으면 기본 쿠키 이름은 &lt;code&gt;XSRF-TOKEN&lt;/code&gt; 이고 기본 헤더 이름은 &lt;code&gt;X-XSRF-TOKEN&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="d46fc13fcfb33c04d67d471d163a937c0bfbc809" translate="yes" xml:space="preserve">
          <source>If no parameters are specified, the function rounds off to the nearest value using this &lt;a href=&quot;https://en.wikibooks.org/wiki/Arithmetic/Rounding&quot;&gt;rounding method&lt;/a&gt;. The behavior differs from that of the JavaScript &lt;code&gt;Math.round()&lt;/code&gt; function. In the following case for example, the pipe rounds down where &lt;code&gt;Math.round()&lt;/code&gt; rounds up:</source>
          <target state="translated">매개 변수를 지정하지 않으면이 &lt;a href=&quot;https://en.wikibooks.org/wiki/Arithmetic/Rounding&quot;&gt;반올림 방법을&lt;/a&gt; 사용하여 함수가 가장 가까운 값으로 반올림합니다 . 동작은 JavaScript &lt;code&gt;Math.round()&lt;/code&gt; 함수 와 다릅니다 . 예를 들어 다음과 같은 경우 파이프는 &lt;code&gt;Math.round()&lt;/code&gt; 반올림 되는 곳에서 내림합니다.</target>
        </trans-unit>
        <trans-unit id="4697ce1b28fc4ca20feccfb80e7cc0346431c557" translate="yes" xml:space="preserve">
          <source>If no path is given, this method checks for the error on the current control.</source>
          <target state="translated">경로를 지정하지 않으면이 방법은 현재 컨트롤의 오류를 확인합니다.</target>
        </trans-unit>
        <trans-unit id="18e3524ed61782df3f426fecd17d77f48f0bf410" translate="yes" xml:space="preserve">
          <source>If no provider is found in the root injector, the DI framework throws an error.</source>
          <target state="translated">루트 인젝터에 공급자가 없으면 DI 프레임 워크에서 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="df3e28bc99646e24bb4e26e24b47cf0ecf85e067" translate="yes" xml:space="preserve">
          <source>If no such request has been made, or more than one such request has been made, fail with an error message including the given request description, if any.</source>
          <target state="translated">그러한 요청이 이루어지지 않았거나 그러한 요청이 둘 이상 이루어진 경우, 주어진 요청 설명 (있는 경우)을 포함하는 오류 메시지와 함께 실패합니다.</target>
        </trans-unit>
        <trans-unit id="30d7bba1ab11ca5cea6604c658835a3fa2b9e7f3" translate="yes" xml:space="preserve">
          <source>If no such type can be inferred, this method will return &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">이러한 유형을 유추 할 수없는 경우이 메소드는 &lt;code&gt;null&lt;/code&gt; 을 리턴 합니다.</target>
        </trans-unit>
        <trans-unit id="9f484cd2e0ac3fa9d4d2037af3783405320d1ccb" translate="yes" xml:space="preserve">
          <source>If none of the keys of the &lt;code&gt;mapping&lt;/code&gt; match the &lt;code&gt;value&lt;/code&gt;, then the content of the &lt;code&gt;other&lt;/code&gt; key is returned when present, otherwise an empty string is returned.</source>
          <target state="translated">&lt;code&gt;mapping&lt;/code&gt; 의 키 중 &lt;code&gt;value&lt;/code&gt; 과 일치하는 키가 없으면 &lt;code&gt;other&lt;/code&gt; 키 의 내용이 있을 때 반환되고, 그렇지 않으면 빈 문자열이 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="5289261bc01c41048f4a824110cc30dce1f1853c" translate="yes" xml:space="preserve">
          <source>If not supplied, the value is taken from &lt;code&gt;&lt;a href=&quot;compileroptions&quot;&gt;CompilerOptions&lt;/a&gt;&lt;/code&gt;. The default compiler option is &lt;code&gt;&lt;a href=&quot;viewencapsulation#Emulated&quot;&gt;ViewEncapsulation.Emulated&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">제공되지 않으면 값은 &lt;code&gt;&lt;a href=&quot;compileroptions&quot;&gt;CompilerOptions&lt;/a&gt;&lt;/code&gt; 에서 가져옵니다 . 기본 컴파일러 옵션은 &lt;code&gt;&lt;a href=&quot;viewencapsulation#Emulated&quot;&gt;ViewEncapsulation.Emulated&lt;/a&gt;&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="a785f84f703473ade0c0ff1fe9607c482a6c9fd7" translate="yes" xml:space="preserve">
          <source>If null or undefined, the view engine won't call it. This is used as a performance optimization for production mode.</source>
          <target state="translated">null이거나 정의되지 않은 경우 뷰 엔진은이를 호출하지 않습니다. 프로덕션 모드의 성능 최적화로 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="b27c861d54587f90dcd31f70995af48c38707d2e" translate="yes" xml:space="preserve">
          <source>If part of the Angular upgrade plan is to also take TypeScript into use, it makes sense to bring in the TypeScript compiler even before the upgrade itself begins. This means there's one less thing to learn and think about during the actual upgrade. It also means you can start using TypeScript features in your AngularJS code.</source>
          <target state="translated">Angular 업그레이드 계획의 일부로 TypeScript도 사용하려면 업그레이드 자체가 시작되기 전에 TypeScript 컴파일러를 가져 오는 것이 좋습니다. 즉, 실제 업그레이드 중에 배우고 생각해야 할 것이 하나 더 적습니다. 또한 AngularJS 코드에서 TypeScript 기능을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e616c57ff16a9892f31e3e14cf215a3a317fefba" translate="yes" xml:space="preserve">
          <source>If provided, a new value for the given configuration key.</source>
          <target state="translated">제공된 경우 지정된 구성 키에 대한 새로운 값.</target>
        </trans-unit>
        <trans-unit id="a11ccb963889053d0a672c70d6f2544753338193" translate="yes" xml:space="preserve">
          <source>If set, the &lt;code&gt;templateUrl&lt;/code&gt; and &lt;code&gt;styleUrl&lt;/code&gt; are resolved relative to the component.</source>
          <target state="translated">설정된 경우 &lt;code&gt;templateUrl&lt;/code&gt; 및 &lt;code&gt;styleUrl&lt;/code&gt; 은 구성 요소를 기준으로 분석됩니다.</target>
        </trans-unit>
        <trans-unit id="368133d05f6469fb1d0a68d64ec9d0ec08d47a2d" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;ngmodule-faq#q-angular-compiler&quot;&gt;Angular compiler&lt;/a&gt; generated code for every declared component, it would defeat the purpose of the tree shaker.</source>
          <target state="translated">는 IF &lt;a href=&quot;ngmodule-faq#q-angular-compiler&quot;&gt;각도 컴파일러&lt;/a&gt; 모든 코드를 생성 구성 요소 선언, 그것은 나무 뿌리의 목적을 물리 칠 것이다.</target>
        </trans-unit>
        <trans-unit id="65f23ab622908a00b35e36a91d40431ece26a111" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; were allowed to continue, the tests would run and fail mysteriously before the compiler could finished.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; 를 계속할 수 있으면 컴파일러가 완료되기 전에 테스트가 실행되어 신비하게 실패합니다.</target>
        </trans-unit>
        <trans-unit id="560f12bb9fc58e2ddbb891d578b749239f1e6db9" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt; didn&amp;rsquo;t have &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; then each feature module would instantiate a new &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; instance, which would break the application as there can only be one &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt;. By using the &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; method, the root application module imports &lt;code&gt;RouterModule.forRoot(...)&lt;/code&gt; and gets a &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt;, and all feature modules import &lt;code&gt;RouterModule.forChild(...)&lt;/code&gt; which does not instantiate another &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">는 IF &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt; 가 없었 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; 각 기능 모듈은 새로운 인스턴스를 것 &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; 하나가 될 수있는 응용 프로그램을 중단 할 경우, &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; . 루트 애플리케이션 모듈 은 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; 메소드 를 사용하여 RouterModule.forRoot ( &lt;code&gt;RouterModule.forRoot(...)&lt;/code&gt; 를 가져오고 &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; 를 가져오고, 모든 기능 모듈 은 다른 모듈을 인스턴스화하지 않는 &lt;code&gt;RouterModule.forChild(...)&lt;/code&gt; 를 가져옵니다. &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; 를.</target>
        </trans-unit>
        <trans-unit id="479d4c87591e468174bfa0a3f8dc2135cb777c4e" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;app&lt;/code&gt; folder is the application root, as it is for the sample application, set the &lt;code&gt;href&lt;/code&gt; value &lt;em&gt;exactly&lt;/em&gt; as shown here.</source>
          <target state="translated">경우 &lt;code&gt;app&lt;/code&gt; 이 샘플 응용 프로그램처럼 폴더가 응용 프로그램 루트가있다, 설정된 &lt;code&gt;href&lt;/code&gt; 값을&lt;em&gt; 정확히&lt;/em&gt; 다음과 같이.</target>
        </trans-unit>
        <trans-unit id="302f79ea1b195ceb97811e3dba2bfd0daa9bce81" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;example-bank.com&lt;/code&gt; server lacks XSRF protection, it can't tell the difference between a legitimate request from the application and the forged request from &lt;code&gt;evil.com&lt;/code&gt;.</source>
          <target state="translated">는 IF &lt;code&gt;example-bank.com&lt;/code&gt; 의 서버가 XSRF 보호 부족, 어플리케이션에서 합법적 인 요청에서 위조 요청 사이의 차이 말할 수 &lt;code&gt;evil.com&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="94b7a597e02911683f0b073db5c9c1edeec80b49" translate="yes" xml:space="preserve">
          <source>If the Angular service worker does not have a hash to validate a given resource, it still caches its contents but it honors the HTTP caching headers by using a policy of &quot;stale while revalidate.&quot; That is, when HTTP caching headers for a cached resource indicate that the resource has expired, the Angular service worker continues to serve the content and it attempts to refresh the resource in the background. This way, broken unhashed resources do not remain in the cache beyond their configured lifetimes.</source>
          <target state="translated">Angular 서비스 워커에 지정된 리소스의 유효성을 검사하는 해시가없는 경우 여전히 해당 콘텐츠를 캐시하지만 &quot;stale while revaldate&quot;정책을 사용하여 HTTP 캐싱 헤더를 사용합니다. 즉, 캐시 된 리소스의 HTTP 캐싱 헤더가 리소스가 만료되었음을 나타내면 Angular 서비스 워커는 계속 콘텐츠를 제공하고 백그라운드에서 리소스를 새로 고치려고 시도합니다. 이렇게하면 해싱되지 않은 손상된 리소스가 구성된 수명을 초과하여 캐시에 남아 있지 않습니다.</target>
        </trans-unit>
        <trans-unit id="c75c80c65f60ead7cd10749d4edad5c9af502525" translate="yes" xml:space="preserve">
          <source>If the JSON file is too big, you could copy the nodes-of-interest into markdown backticks.</source>
          <target state="translated">JSON 파일이 너무 큰 경우 관심 노드를 마크 다운 백틱으로 복사 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="be0a39c89a60cb3ed7e054bd374ca82555b74b91" translate="yes" xml:space="preserve">
          <source>If the StackBlitz preview pane isn't showing what you expect, save and then click the refresh button.</source>
          <target state="translated">StackBlitz 미리보기 창에 예상 한 내용이 표시되지 않으면 저장 후 새로 고침 단추를 클릭하십시오.</target>
        </trans-unit>
        <trans-unit id="a2bff59b5e87ba98607bcbcc161c9e072991847d" translate="yes" xml:space="preserve">
          <source>If the above &lt;code&gt;ng build&lt;/code&gt; command throws an error about missing packages, append the missing dependencies in your local project's &lt;code&gt;package.json&lt;/code&gt; file to match the one in the downloaded StackBlitz project.</source>
          <target state="translated">위의 &lt;code&gt;ng build&lt;/code&gt; 명령으로 패키지 누락에 대한 오류가 발생 하면 다운로드 한 StackBlitz 프로젝트 의 &lt;code&gt;package.json&lt;/code&gt; 와 일치하도록 로컬 프로젝트의 package.json 파일 에서 누락 된 종속성을 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="8e4c8672ca49b8f0e25eeaa8741e82bde770f9e1" translate="yes" xml:space="preserve">
          <source>If the app uses the Angular router, you must configure the server to return the application's host page (&lt;code&gt;index.html&lt;/code&gt;) when asked for a file that it does not have.</source>
          <target state="translated">앱이 Angular 라우터를 사용하는 경우 서버 에없는 파일을 요청할 때 서버가 애플리케이션의 호스트 페이지 ( &lt;code&gt;index.html&lt;/code&gt; ) 를 반환하도록 구성해야합니다 .</target>
        </trans-unit>
        <trans-unit id="d1da36d7cd60fadceb7bc9ecf82d1339e902cc81" translate="yes" xml:space="preserve">
          <source>If the client of a library intends to use a symbol in an annotation, the template compiler does not normally report this until the client uses the symbol. This option allows detection of these errors during the build phase of the library and is used, for example, in producing Angular libraries themselves.</source>
          <target state="translated">라이브러리의 클라이언트가 주석에 심볼을 사용하려는 경우 템플릿 컴파일러는 클라이언트가 심볼을 사용할 때까지이를 일반적으로보고하지 않습니다. 이 옵션을 사용하면 라이브러리의 빌드 단계에서 이러한 오류를 감지 할 수 있으며 예를 들어 Angular 라이브러리 자체를 생성하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="1d578310a8295a0eae72f65936eb8dd58a18fbd2" translate="yes" xml:space="preserve">
          <source>If the component behaves as expected, clicking the hero's element should tell the component's &lt;code&gt;selected&lt;/code&gt; property to emit the &lt;code&gt;hero&lt;/code&gt; object.</source>
          <target state="translated">구성 요소가 예상대로 작동하는 경우 영웅 요소를 클릭하면 구성 요소의 &lt;code&gt;selected&lt;/code&gt; 속성이 &lt;code&gt;hero&lt;/code&gt; 개체 를 방출하도록 지시 해야 합니다.</target>
        </trans-unit>
        <trans-unit id="8788c70542a02c168cea8e8d4e5e044281bdef0f" translate="yes" xml:space="preserve">
          <source>If the condition is falsy and the view hasn't been created previously, tell the &lt;em&gt;view container&lt;/em&gt; to create the &lt;em&gt;embedded view&lt;/em&gt; from the template.</source>
          <target state="translated">조건이 거짓이고 뷰가 이전에 생성되지 않은 경우 템플릿에서 &lt;em&gt;내장 된 뷰&lt;/em&gt; 를 생성하도록 &lt;em&gt;뷰 컨테이너에&lt;/em&gt; 지시 하십시오.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="0a064b2a59ee6bd35d516ff89dac85e3c0a88034" translate="yes" xml:space="preserve">
          <source>If the condition is truthy and the view is currently displayed, clear the container which also destroys the view.</source>
          <target state="translated">조건이 진실이고보기가 현재 표시되는 경우보기를 파괴하는 컨테이너를 지우십시오.</target>
        </trans-unit>
        <trans-unit id="5c3cec2a13320fb2f220fb170d31aec1e1a03ce0" translate="yes" xml:space="preserve">
          <source>If the control has any children, also marks all children as &lt;code&gt;untouched&lt;/code&gt; and recalculates the &lt;code&gt;touched&lt;/code&gt; status of all parent controls.</source>
          <target state="translated">컨트롤에 자식이있는 경우 모든 자식을 &lt;code&gt;touched&lt;/code&gt; &lt;code&gt;untouched&lt;/code&gt; 것으로 표시 하고 터치 된 항목을 다시 계산합니다. 모든 부모 컨트롤 상태를 합니다.</target>
        </trans-unit>
        <trans-unit id="d1a83898ee5cd6fc850d88e2ec839126c806da54" translate="yes" xml:space="preserve">
          <source>If the control has any children, marks all children as &lt;code&gt;pristine&lt;/code&gt;, and recalculates the &lt;code&gt;pristine&lt;/code&gt; status of all parent controls.</source>
          <target state="translated">컨트롤에 자식이 있으면 모든 자식을 &lt;code&gt;pristine&lt;/code&gt; 으로 표시하고 모든 부모 컨트롤 의 &lt;code&gt;pristine&lt;/code&gt; 상태를 다시 계산 합니다.</target>
        </trans-unit>
        <trans-unit id="8453b196ce8fbdb1fe41ff331de4cbcbc668e2ae" translate="yes" xml:space="preserve">
          <source>If the control has children, all children are also disabled.</source>
          <target state="translated">컨트롤에 자식이 있으면 모든 자식도 비활성화됩니다.</target>
        </trans-unit>
        <trans-unit id="6da51976abd22faef9516a71a664e1ede6e2d1c6" translate="yes" xml:space="preserve">
          <source>If the control is not present, false is returned.</source>
          <target state="translated">컨트롤이 없으면 false가 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="20413c6d38ae984baf834f94a3ed5662a7f00e9c" translate="yes" xml:space="preserve">
          <source>If the current tab needs to be updated to the latest app version immediately, it can ask to do so with the &lt;code&gt;&lt;a href=&quot;../api/service-worker/swupdate#activateUpdate&quot;&gt;activateUpdate()&lt;/a&gt;&lt;/code&gt; method:</source>
          <target state="translated">현재 탭을 최신 앱 버전으로 즉시 업데이트해야하는 경우 &lt;code&gt;&lt;a href=&quot;../api/service-worker/swupdate#activateUpdate&quot;&gt;activateUpdate()&lt;/a&gt;&lt;/code&gt; 메소드 를 사용하여 업데이트하도록 요청할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="9104853be208753a61ab17ecc634fd45d2546fb7" translate="yes" xml:space="preserve">
          <source>If the current working directory is not the right place for your project, you can change to a more appropriate directory by running &lt;code&gt;cd &amp;lt;path-to-other-directory&amp;gt;&lt;/code&gt; first.</source>
          <target state="translated">현재 작업 디렉토리가 프로젝트에 적합한 위치가 아닌 경우 먼저 &lt;code&gt;cd &amp;lt;path-to-other-directory&amp;gt;&lt;/code&gt; 를 실행하여 더 적합한 디렉토리로 변경할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f6f468153c2449365e7f2867ef5d5f456b77cbd7" translate="yes" xml:space="preserve">
          <source>If the event belongs to a directive&amp;mdash;recall that components are directives&amp;mdash;&lt;code&gt;$event&lt;/code&gt; has whatever shape the directive produces.</source>
          <target state="translated">이벤트가 지시문에 속하는 경우 (구성 요소는 지시문임을 기억하십시오) &lt;code&gt;$event&lt;/code&gt; 는 지시문이 생성하는 모든 모양을 갖습니다.</target>
        </trans-unit>
        <trans-unit id="73152167c48aecc5313121b22afebd7bc3185f3b" translate="yes" xml:space="preserve">
          <source>If the event lacks a listener or there's some other problem, consider calling &lt;code&gt;nativeElement.dispatchEvent(eventObject)&lt;/code&gt;.</source>
          <target state="translated">이벤트에 리스너가 없거나 다른 문제가 &lt;code&gt;nativeElement.dispatchEvent(eventObject)&lt;/code&gt; 호출을 고려하십시오 .</target>
        </trans-unit>
        <trans-unit id="13a1756e7082ebba2ca9b175bf1d707be6dc83b3" translate="yes" xml:space="preserve">
          <source>If the field is omitted, it defaults to:</source>
          <target state="translated">필드가 생략되면 기본값은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="4d62e6f61d2836ab8838dd3181e91ea4e13db082" translate="yes" xml:space="preserve">
          <source>If the final step in a transition is a call to &lt;code&gt;&lt;a href=&quot;animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; that uses a timing value with no style data, that step is automatically considered the final animation arc, for the element to reach the final state. Angular automatically adds or removes CSS styles to ensure that the element is in the correct final state.</source>
          <target state="translated">전환의 마지막 단계가 스타일 데이터가없는 타이밍 값을 사용하는 &lt;code&gt;&lt;a href=&quot;animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; 호출 () 인 경우 해당 단계는 요소가 최종 상태에 도달하기 위해 자동으로 최종 애니메이션 아크로 간주됩니다. Angular는 CSS 스타일을 자동으로 추가하거나 제거하여 요소가 올바른 최종 상태가되도록합니다.</target>
        </trans-unit>
        <trans-unit id="e4a660dbc7897b28c034041b6f65be22015a8b7e" translate="yes" xml:space="preserve">
          <source>If the first segment begins with &lt;code&gt;./&lt;/code&gt;, or doesn't begin with a slash, the router will instead look in the children of the current activated route.</source>
          <target state="translated">첫 번째 세그먼트가 &lt;code&gt;./&lt;/code&gt; 로 시작 하거나 슬래시로 시작하지 않으면 라우터는 대신 현재 활성화 된 경로의 자식을 찾습니다.</target>
        </trans-unit>
        <trans-unit id="cea0080cb58c9233caaaea94f5f228089d34ea6f" translate="yes" xml:space="preserve">
          <source>If the first segment begins with &lt;code&gt;/&lt;/code&gt;, the router will look up the route from the root of the app.</source>
          <target state="translated">첫 번째 세그먼트가 &lt;code&gt;/&lt;/code&gt; 로 시작 하면 라우터는 앱의 루트에서 경로를 찾습니다.</target>
        </trans-unit>
        <trans-unit id="0078130fe6400ab8b49e0bc6c85e056609de7e16" translate="yes" xml:space="preserve">
          <source>If the fixture is currently &lt;em&gt;stable&lt;/em&gt;, returns &lt;code&gt;true&lt;/code&gt;. If there are async tasks that have not completed, returns &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">조명기가 현재 &lt;em&gt;안정적 &lt;/em&gt; &lt;code&gt;true&lt;/code&gt; 반환 합니다 . 완료되지 않은 비동기 작업이 있으면 &lt;code&gt;false&lt;/code&gt; 를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="0b70a09df109c3ad19c3522771be006c2c3948dd" translate="yes" xml:space="preserve">
          <source>If the generated &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; decorator does not include the &lt;code&gt;{ &lt;a href=&quot;../api/core/injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;: 'root' }&lt;/code&gt; statement, then insert it as shown above.</source>
          <target state="translated">생성 된 &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; 데코레이터에 &lt;code&gt;{ &lt;a href=&quot;../api/core/injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;: 'root' }&lt;/code&gt; 문이 포함되어 있지 않으면 위에 표시된대로 삽입하십시오.</target>
        </trans-unit>
        <trans-unit id="15068daa68072149e6fa5ce056eb1f52cac90044" translate="yes" xml:space="preserve">
          <source>If the global library you need to use does not have global typings, you can declare them manually as &lt;code&gt;any&lt;/code&gt; in &lt;code&gt;src/typings.d.ts&lt;/code&gt;. For example:</source>
          <target state="translated">당신이 사용하는 데 필요한 글로벌 라이브러리 글로벌 typings이없는 경우, 당신은 수동으로 선언 할 수 &lt;code&gt;any&lt;/code&gt; 의 &lt;code&gt;src/typings.d.ts&lt;/code&gt; . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="6cb1ed9802e9478d929162c54da4c8d6fd30657e" translate="yes" xml:space="preserve">
          <source>If the injector doesn't have a provider for a requested token, it delegates the request to its parent injector, where the process repeats until there are no more injectors. If the search fails, the injector throws an error&amp;mdash;unless the request was &lt;a href=&quot;dependency-injection-in-action#optional&quot;&gt;optional&lt;/a&gt;.</source>
          <target state="translated">인젝터에 요청 된 토큰에 대한 제공자가 없으면 요청을 상위 인젝터에 위임합니다. 여기서 인젝터가 더 이상 없을 때까지 프로세스가 반복됩니다. 검색이 실패하면 요청이 &lt;a href=&quot;dependency-injection-in-action#optional&quot;&gt;선택 사항&lt;/a&gt; 이 아닌 한 인젝터에서 오류가 발생 합니다.</target>
        </trans-unit>
        <trans-unit id="4a0b3bfb715b52caecc873a2889e0c4f7e9a1de0" translate="yes" xml:space="preserve">
          <source>If the injector has already cached an instance of the service associated with the token, it provides that instance. If it doesn't, it needs to make one using the provider associated with the token.</source>
          <target state="translated">인젝터가 이미 토큰과 연관된 서비스 인스턴스를 캐시 한 경우 해당 인스턴스를 제공합니다. 그렇지 않은 경우 토큰과 연결된 공급자를 사용하여 만들어야합니다.</target>
        </trans-unit>
        <trans-unit id="3b4f4ffe72bd420b5f6a4c66dbf5e65cc68e96f5" translate="yes" xml:space="preserve">
          <source>If the link is static, you can use the directive as follows: &lt;code&gt;&amp;lt;&lt;a href=&quot;routerlinkwithhref&quot;&gt;a&lt;/a&gt; &lt;a href=&quot;routerlink&quot;&gt;routerLink&lt;/a&gt;=&quot;/user/bob&quot;&amp;gt;link to user component&amp;lt;/&lt;a href=&quot;routerlinkwithhref&quot;&gt;a&lt;/a&gt;&amp;gt;&lt;/code&gt;</source>
          <target state="translated">: 링크가 정적 인 경우 다음과 같이 지시어를 사용할 수 있습니다 &lt;code&gt;&amp;lt;&lt;a href=&quot;routerlinkwithhref&quot;&gt;a&lt;/a&gt; &lt;a href=&quot;routerlink&quot;&gt;routerLink&lt;/a&gt;=&quot;/user/bob&quot;&amp;gt;link to user component&amp;lt;/&lt;a href=&quot;routerlinkwithhref&quot;&gt;a&lt;/a&gt;&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c85a5f245c5fa8e89c1c6d997ca02517847957ee" translate="yes" xml:space="preserve">
          <source>If the name fails to match a property of a known directive or element, Angular reports an &amp;ldquo;unknown directive&amp;rdquo; error.</source>
          <target state="translated">이름이 알려진 지시문 또는 요소의 속성과 일치하지 않으면 Angular는 &quot;알 수없는 지시문&quot;오류를보고합니다.</target>
        </trans-unit>
        <trans-unit id="4f09d2765c657029543ee7a53587171de5cd4ed6" translate="yes" xml:space="preserve">
          <source>If the name fails to match an element event or an output property of a known directive, Angular reports an &amp;ldquo;unknown directive&amp;rdquo; error.</source>
          <target state="translated">이름이 알려진 지시문의 요소 이벤트 또는 출력 특성과 일치하지 않으면 Angular는 &quot;알 수없는 지시문&quot;오류를보고합니다.</target>
        </trans-unit>
        <trans-unit id="1b3d0f7fd76ea32112a2485de9c0071e3eac7cd6" translate="yes" xml:space="preserve">
          <source>If the pipe has internal state (that is, the result depends on state other than its arguments), set &lt;code&gt;pure&lt;/code&gt; to false. In this case, the pipe is invoked on each change-detection cycle, even if the arguments have not changed.</source>
          <target state="translated">파이프에 내부 상태가있는 경우 (즉, 결과는 인수 이외의 상태에 따라 다름) &lt;code&gt;pure&lt;/code&gt; 을 false로 설정하십시오 . 이 경우 인수가 변경되지 않은 경우에도 각 변경 감지주기마다 파이프가 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="4763dcf43d2d8abf4591a273eb238b96e963dfb9" translate="yes" xml:space="preserve">
          <source>If the policy is set to &lt;code&gt;&lt;a href=&quot;viewencapsulation#Emulated&quot;&gt;ViewEncapsulation.Emulated&lt;/a&gt;&lt;/code&gt; and the component has no &lt;code&gt;styles&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;component#styleUrls&quot;&gt;styleUrls&lt;/a&gt;&lt;/code&gt; specified, the policy is automatically switched to &lt;code&gt;&lt;a href=&quot;viewencapsulation#None&quot;&gt;ViewEncapsulation.None&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">정책이 &lt;code&gt;&lt;a href=&quot;viewencapsulation#Emulated&quot;&gt;ViewEncapsulation.Emulated&lt;/a&gt;&lt;/code&gt; 로 설정되고 구성 요소에 지정된 &lt;code&gt;styles&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;component#styleUrls&quot;&gt;styleUrls&lt;/a&gt;&lt;/code&gt; 가없는 경우 정책은 자동으로 &lt;code&gt;&lt;a href=&quot;viewencapsulation#None&quot;&gt;ViewEncapsulation.None&lt;/a&gt;&lt;/code&gt; 으로 전환됩니다 .</target>
        </trans-unit>
        <trans-unit id="2d810ad667c3b20ef3b51707d2be9b432b64b1cf" translate="yes" xml:space="preserve">
          <source>If the polyfill you want is not already in &lt;code&gt;polyfills.ts&lt;/code&gt; file, add the &lt;code&gt;import&lt;/code&gt; statement by hand.</source>
          <target state="translated">원하는 polyfill이 아직 &lt;code&gt;polyfills.ts&lt;/code&gt; 파일 에 없으면 &lt;code&gt;import&lt;/code&gt; 문을 직접 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="59935f40339f370a775c93f8ebfe64fdb8501b4a" translate="yes" xml:space="preserve">
          <source>If the request is not cachable, the interceptor simply forwards the request to the next handler in the chain.</source>
          <target state="translated">요청을 캐시 할 수없는 경우 인터셉터는 요청을 체인의 다음 핸들러로 전달합니다.</target>
        </trans-unit>
        <trans-unit id="7ac51969f4d26381b937d7506df3c5ca028390e8" translate="yes" xml:space="preserve">
          <source>If the router determines that the current application state requires particular functionality, and the module that defines it hasn't been loaded, the router can &lt;em&gt;lazy-load&lt;/em&gt; the module on demand.</source>
          <target state="translated">라우터가 현재 애플리케이션 상태에 특정 기능이 필요하다고 결정하고이를 정의하는 모듈이로드되지 않은 경우 라우터는 요청시 모듈을 &lt;em&gt;지연로드&lt;/em&gt; 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="8394b2e767bb12ed5ce19f8e2789f404b7484f75" translate="yes" xml:space="preserve">
          <source>If the token is not found, the injector looks for the closest parent &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;()&lt;/code&gt; to delegate the request to.</source>
          <target state="translated">토큰을 찾을 수 없으면 인젝터는 요청을 위임 할 가장 가까운 상위 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;()&lt;/code&gt; 을 찾습니다 .</target>
        </trans-unit>
        <trans-unit id="ecf78ef653c4d34586962407b03b480fcd055de0" translate="yes" xml:space="preserve">
          <source>If the user clicks &quot;Magneta&quot;, that hero should render with a distinctive but subtle background color like this:</source>
          <target state="translated">사용자가 &quot;Magneta&quot;를 클릭하면 해당 영웅은 다음과 같이 독특하지만 미묘한 배경색으로 렌더링해야합니다.</target>
        </trans-unit>
        <trans-unit id="c189f0f17a7b1f805b9f00a96ea0807e51814fa1" translate="yes" xml:space="preserve">
          <source>If the user is accessing your app via a browser that does not support service workers, the service worker is not registered and related behavior such as offline cache management and push notifications does not happen. More specifically:</source>
          <target state="translated">사용자가 서비스 워커를 지원하지 않는 브라우저를 통해 앱에 액세스하는 경우 서비스 워커가 등록되지 않으며 오프라인 캐시 관리 및 푸시 알림과 같은 관련 동작이 발생하지 않습니다. 더 구체적으로:</target>
        </trans-unit>
        <trans-unit id="c7bb75e93c7ef1a5eb66e798e8f358b5eede9fc4" translate="yes" xml:space="preserve">
          <source>If the user is not logged in, you store the attempted URL the user came from using the &lt;code&gt;&lt;a href=&quot;../api/router/routerstatesnapshot#url&quot;&gt;RouterStateSnapshot.url&lt;/a&gt;&lt;/code&gt; and tell the router to navigate to a login page&amp;mdash;a page you haven't created yet. This secondary navigation automatically cancels the current navigation; &lt;code&gt;checkLogin()&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt; just to be clear about that.</source>
          <target state="translated">사용자가 로그인하지 않은 경우 사용자가 &lt;code&gt;&lt;a href=&quot;../api/router/routerstatesnapshot#url&quot;&gt;RouterStateSnapshot.url&lt;/a&gt;&lt;/code&gt; 을 사용하여 시도한 URL을 저장 하고 라우터가 로그인 페이지 (아직 만들지 않은 페이지)로 이동하도록 지시합니다. 이 보조 탐색은 현재 탐색을 자동으로 취소합니다. &lt;code&gt;checkLogin()&lt;/code&gt; 은 그것을 명확하게하기 위해 &lt;code&gt;false&lt;/code&gt; 를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="de7fbb24093105b8d981322fd4ad3921dd415377" translate="yes" xml:space="preserve">
          <source>If the values do not match, the hero's identity remains secret, and we can safely return null. Otherwise, the hero's identity is revealed and we must mark the form as invalid by returning an error object.</source>
          <target state="translated">값이 일치하지 않으면 영웅의 신원은 비밀로 유지되며 안전하게 null을 반환 할 수 있습니다. 그렇지 않으면 영웅의 신원이 공개되고 오류 객체를 반환하여 양식을 유효하지 않은 것으로 표시해야합니다.</target>
        </trans-unit>
        <trans-unit id="96ad008e2ef13ed8ed5f5c2ec956a424d99e7a41" translate="yes" xml:space="preserve">
          <source>If there are any pending timers at the end of the function, an exception will be thrown.</source>
          <target state="translated">함수의 끝에 보류중인 타이머가 있으면 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="f9a670037bd4af4276da780403250f1a42128b74" translate="yes" xml:space="preserve">
          <source>If there are inconsistencies (for example, if peer dependencies cannot be matched by a simple &lt;a href=&quot;https://semver.io/&quot;&gt;semver&lt;/a&gt; range), the command generates an error and does not change anything in the workspace.</source>
          <target state="translated">불일치가있는 경우 (예를 들어, 피어 종속성이 단순 &lt;a href=&quot;https://semver.io/&quot;&gt;semver&lt;/a&gt; 범위 와 일치 할 수없는 경우 ) 명령은 오류를 생성하고 작업 공간에서 아무것도 변경하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="6bce86d8e3129408ac34398b75eca72346010c23" translate="yes" xml:space="preserve">
          <source>If there are multiple matching elements, staggers in each element starting at the top of the page, with a 50-millisecond delay between each element.</source>
          <target state="translated">일치하는 요소가 여러 개인 경우 페이지 맨 위에서 시작하여 각 요소 사이에서 50 밀리 초의 지연으로 각 요소가 엇갈리게 배치됩니다.</target>
        </trans-unit>
        <trans-unit id="5d0e50c9ab16f52d7179be4c30d0ae22030f6696" translate="yes" xml:space="preserve">
          <source>If there are no &lt;code&gt;&lt;a href=&quot;animationstylemetadata#offset&quot;&gt;offset&lt;/a&gt;&lt;/code&gt; values specified in the style entries, the offsets are calculated automatically.</source>
          <target state="translated">스타일 항목에 지정된 &lt;code&gt;&lt;a href=&quot;animationstylemetadata#offset&quot;&gt;offset&lt;/a&gt;&lt;/code&gt; 값 이 없으면 오프셋 이 자동으로 계산됩니다.</target>
        </trans-unit>
        <trans-unit id="bdfacb45406d5e8b6f34dd5b25ce44a85e6145b1" translate="yes" xml:space="preserve">
          <source>If there are no matches, a view with the &lt;code&gt;&lt;a href=&quot;ngswitchdefault&quot;&gt;ngSwitchDefault&lt;/a&gt;&lt;/code&gt; directive is rendered.</source>
          <target state="translated">일치하는 것이 없으면 &lt;code&gt;&lt;a href=&quot;ngswitchdefault&quot;&gt;ngSwitchDefault&lt;/a&gt;&lt;/code&gt; 지시문이 있는 뷰 가 렌더링됩니다.</target>
        </trans-unit>
        <trans-unit id="469567e644a4eb10f45ac06d4145cbb3283b05ab" translate="yes" xml:space="preserve">
          <source>If there is a cached value, the code &lt;em&gt;pipes&lt;/em&gt; the cached response onto &lt;code&gt;results$&lt;/code&gt;, producing a recomposed observable that emits twice, the cached response first (and immediately), followed later by the response from the server. Subscribers see a sequence of &lt;em&gt;two&lt;/em&gt; responses.</source>
          <target state="translated">캐시 된 값이있는 경우 코드 는 캐시 된 응답을 &lt;code&gt;results$&lt;/code&gt; 에 &lt;em&gt;파이프&lt;/em&gt; 하여 캐시 된 응답을 두 번 방출 한 재구성 된 관찰 가능 항목을 먼저 생성 한 다음 나중에 서버의 응답을 생성합니다. 가입자는 &lt;em&gt;두 개의&lt;/em&gt; 응답 시퀀스를 봅니다 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="99c30904c74feea9735c68b368b80ff51127fb2d" translate="yes" xml:space="preserve">
          <source>If there is a search term, the code constructs an options object with an HTML URL-encoded search parameter. If the term were &quot;foo&quot;, the GET request URL would be &lt;code&gt;api/heroes?name=foo&lt;/code&gt;.</source>
          <target state="translated">검색어가 있으면 코드는 HTML URL로 인코딩 된 검색 매개 변수를 사용하여 옵션 객체를 구성합니다. 용어가 &quot;foo&quot;인 경우 GET 요청 URL은 &lt;code&gt;api/heroes?name=foo&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="d8a482ba206dfd36e3f36762fb13f8b6559b18b8" translate="yes" xml:space="preserve">
          <source>If there is a section of text that you would like to translate, you can wrap it in a &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; tag. However, if you don't want to create a new DOM element merely to facilitate translation, you can wrap the text in an &lt;code&gt;&amp;lt;ng-container&amp;gt;&lt;/code&gt; element. The &lt;code&gt;&amp;lt;ng-container&amp;gt;&lt;/code&gt; is transformed into an html comment:</source>
          <target state="translated">번역하려는 텍스트 섹션이 있으면 &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; 태그로 묶을 수 있습니다. 그러나 번역을 용이하게하기 위해 새 DOM 요소를 만들지 않으려면 &lt;code&gt;&amp;lt;ng-container&amp;gt;&lt;/code&gt; 요소로 텍스트를 줄 바꿈하면됩니다 . &lt;code&gt;&amp;lt;ng-container&amp;gt;&lt;/code&gt; HTML 주석로 변환된다 :</target>
        </trans-unit>
        <trans-unit id="789a03391ec493accfaf2648ace4780e8da1f3e8" translate="yes" xml:space="preserve">
          <source>If there is no structural directive and you merely wrap some elements in a &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt;, those elements disappear. That's the fate of the middle &quot;Hip!&quot; in the phrase &quot;Hip! Hip! Hooray!&quot;.</source>
          <target state="translated">구조적 지시어가없고 &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; 의 일부 요소 만 래핑하면 해당 요소가 사라집니다. 그것이 중간 &quot;Hip!&quot;의 운명입니다. &quot;Hip! Hip! Hooray!&quot;라는 문구에</target>
        </trans-unit>
        <trans-unit id="c0a56b8fffce47376883198a8d9baa521d322597" translate="yes" xml:space="preserve">
          <source>If there's no cached value, the interceptor returns &lt;code&gt;results$&lt;/code&gt;.</source>
          <target state="translated">캐시 된 값이 없으면 인터셉터는 &lt;code&gt;results$&lt;/code&gt; 리턴 합니다 .</target>
        </trans-unit>
        <trans-unit id="2c9573a993697b7205978825080a3f70b90ace3b" translate="yes" xml:space="preserve">
          <source>If these performance and minification considerations don't apply to you, you can always create your own such pipes (similar to the &lt;a href=&quot;pipes#impure-flying-heroes&quot;&gt;FlyingHeroesPipe&lt;/a&gt;) or find them in the community.</source>
          <target state="translated">이러한 성능 및 최소화 고려 사항이 적용되지 않는 경우 언제든지 자신의 파이프를 만들거나 ( &lt;a href=&quot;pipes#impure-flying-heroes&quot;&gt;FlyingHeroesPipe&lt;/a&gt; 와 유사 ) 커뮤니티에서 찾을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="128c120be1c661795cc994725f81beabd4448f98" translate="yes" xml:space="preserve">
          <source>If this NgModule were the root &lt;code&gt;AppModule&lt;/code&gt;, the &lt;code&gt;UserService&lt;/code&gt; would be a singleton and available throughout the app. Though you may see it coded this way, using the &lt;code&gt;&lt;a href=&quot;../api/core/injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;&lt;/code&gt; property of the &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; decorator on the service itself is preferable as of Angular 6.0 as it makes your services tree-shakable.</source>
          <target state="translated">이 NgModule이 루트 &lt;code&gt;AppModule&lt;/code&gt; 인 경우 &lt;code&gt;UserService&lt;/code&gt; 는 싱글 톤이며 앱 전체에서 사용할 수 있습니다. 이 방법으로 코딩 된 것을 볼 수 있지만 서비스 자체 에서 &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; &lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt; () 데코레이터 의 &lt;code&gt;&lt;a href=&quot;../api/core/injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;&lt;/code&gt; 속성을 사용하는 것이 서비스를 트리 스태킹 할 수 있기 때문에 Angular 6.0보다 바람직합니다.</target>
        </trans-unit>
        <trans-unit id="a961d773c3ebb64dd1d2a5bb5b8857c41c94da34" translate="yes" xml:space="preserve">
          <source>If this is something you wanted to do, it would be a good idea to enable the &lt;code&gt;noImplicitAny&lt;/code&gt; configuration option in &lt;code&gt;tsconfig.json&lt;/code&gt;. This would cause the TypeScript compiler to display a warning when there's any code that does not yet have type annotations. You could use it as a guide to inform us about how close you are to having a fully annotated project.</source>
          <target state="translated">이것이 원하는 경우 &lt;code&gt;tsconfig.json&lt;/code&gt; 에서 &lt;code&gt;noImplicitAny&lt;/code&gt; 구성 옵션 을 활성화하는 것이 좋습니다 . 이렇게하면 아직 형식 주석이없는 코드가있을 때 TypeScript 컴파일러에 경고가 표시됩니다. 완전히 주석이 달린 프로젝트가 얼마나 가까운 지 알려주는 안내서로 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d8b697c68c21ca2b9972cd7df3c8b2c2521e942f" translate="yes" xml:space="preserve">
          <source>If this pattern does not satisfy your business needs, you can use &lt;code&gt;&lt;a href=&quot;validators#pattern&quot;&gt;Validators.pattern()&lt;/a&gt;&lt;/code&gt; to validate the value against a different pattern.</source>
          <target state="translated">이 패턴이 비즈니스 요구를 충족시키지 않으면 &lt;code&gt;&lt;a href=&quot;validators#pattern&quot;&gt;Validators.pattern()&lt;/a&gt;&lt;/code&gt; 을 사용 하여 다른 패턴에 대해 값을 검증 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="12a97be36f3f8b698fee41e85a55b88f80921851" translate="yes" xml:space="preserve">
          <source>If true, this directive/component will be skipped by the AOT compiler and so will always be compiled using JIT.</source>
          <target state="translated">true 인 경우이 지시문 / 구성 요소는 AOT 컴파일러에서 건너 뛰므로 항상 JIT를 사용하여 컴파일됩니다.</target>
        </trans-unit>
        <trans-unit id="dee5d11f125e7906a2306bcec4c66b607231b73c" translate="yes" xml:space="preserve">
          <source>If true, this module will be skipped by the AOT compiler and so will always be compiled using JIT.</source>
          <target state="translated">true 인 경우이 모듈은 AOT 컴파일러에서 건너 뛰므로 항상 JIT를 사용하여 컴파일됩니다.</target>
        </trans-unit>
        <trans-unit id="ba78200d25bae586b98c7c392474b61cabfe4a71" translate="yes" xml:space="preserve">
          <source>If value is trusted for the context, this method will unwrap the contained safe value and use it directly. Otherwise, value will be sanitized to be safe in the given context, for example by replacing URLs that have an unsafe protocol part (such as &lt;code&gt;javascript:&lt;/code&gt;). The implementation is responsible to make sure that the value can definitely be safely used in the given context.</source>
          <target state="translated">컨텍스트에 대해 값을 신뢰할 수있는 경우이 메소드는 포함 된 안전 값을 풀고 직접 사용합니다. 그렇지 않으면, 안전하지 않은 프로토콜 부분 (예 : &lt;code&gt;javascript:&lt;/code&gt; :)이있는 URL을 바꾸는 등 주어진 컨텍스트에서 안전하도록 값이 삭제됩니다 . 구현시 주어진 컨텍스트에서 값을 안전하게 사용할 수 있도록해야합니다.</target>
        </trans-unit>
        <trans-unit id="3bb452304863c61a02b99678f43105cff45695b0" translate="yes" xml:space="preserve">
          <source>If we create a new project with &lt;code&gt;ng new builder-test&lt;/code&gt;, the generated &lt;code&gt;angular.json&lt;/code&gt; file looks something like this, with only default builder configurations.</source>
          <target state="translated">&lt;code&gt;ng new builder-test&lt;/code&gt; 로 새 프로젝트를 작성 하면 생성 된 &lt;code&gt;angular.json&lt;/code&gt; 파일은 기본 빌더 구성 만있는 이와 유사합니다.</target>
        </trans-unit>
        <trans-unit id="410d7d19eeff8be9f91595a2a6c28a3630cc8b2e" translate="yes" xml:space="preserve">
          <source>If we neglected to add, &lt;code&gt;#docplaster&lt;/code&gt;, the processor would insert the &lt;em&gt;default&lt;/em&gt; plaster - an ellipsis comment - between the fragments. Try removing the &lt;code&gt;#docplaster&lt;/code&gt; comment yourself to see the effect.</source>
          <target state="translated">&lt;code&gt;#docplaster&lt;/code&gt; 를 추가하지 않으면 프로세서는 조각 사이에 &lt;em&gt;기본&lt;/em&gt; 석고 (줄임표 주석)를 삽입합니다 . &lt;code&gt;#docplaster&lt;/code&gt; 주석을 직접 제거하여 효과를 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="539d94c8fe072123800e0f9db24c1874e3e30bba" translate="yes" xml:space="preserve">
          <source>If you &lt;em&gt;mutate&lt;/em&gt; the array, no pipe is invoked and the display isn't updated; if you &lt;em&gt;replace&lt;/em&gt; the array, the pipe executes and the display is updated. The Flying Heroes application extends the code with checkbox switches and additional displays to help you experience these effects.</source>
          <target state="translated">배열 을 &lt;em&gt;변경&lt;/em&gt; 하면 파이프가 호출되지 않고 디스플레이가 업데이트되지 않습니다. 배열 을 &lt;em&gt;교체&lt;/em&gt; 하면 파이프가 실행되고 화면이 업데이트됩니다. Flying Heroes 응용 프로그램은 이러한 효과를 경험할 수 있도록 확인란 스위치와 추가 디스플레이로 코드를 확장합니다.</target>
        </trans-unit>
        <trans-unit id="0fabf2886d8095e393384ce3f692c1d6440c63c9" translate="yes" xml:space="preserve">
          <source>If you add &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt; to the constructor for &lt;code&gt;AnimalService&lt;/code&gt;, the result is 🐶 (puppy) because the injector finds the &lt;code&gt;AnimalService&lt;/code&gt; in the &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt;&lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt;. Here is the &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; array in the &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; class and &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt; in the constructor:</source>
          <target state="translated">&lt;code&gt;AnimalService&lt;/code&gt; 의 생성자에 &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt; 를 추가 하면 인젝터가 &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; &lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt; 에서 &lt;code&gt;AnimalService&lt;/code&gt; 를 찾기 때문에 결과는 🐶 (puppy) 입니다. &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; 클래스 의 &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; 배열 과 생성자의 &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt; &lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt; () 는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="057296fa1750840f11cd0280d602d1818f95536d" translate="yes" xml:space="preserve">
          <source>If you already have an app that was created with the &lt;a href=&quot;cli&quot;&gt;Angular CLI&lt;/a&gt;, you can create a service using the &lt;a href=&quot;cli/generate&quot;&gt;&lt;code&gt;ng generate&lt;/code&gt;&lt;/a&gt; CLI command in the root project directory. Replace &lt;em&gt;User&lt;/em&gt; with the name of your service.</source>
          <target state="translated">&lt;a href=&quot;cli&quot;&gt;Angular CLI&lt;/a&gt; 로 작성된 앱이 이미있는 경우 루트 프로젝트 디렉토리에서 &lt;a href=&quot;cli/generate&quot;&gt; &lt;code&gt;ng generate&lt;/code&gt; &lt;/a&gt; CLI 명령을 사용하여 서비스를 작성할 수 있습니다 . 교체 &lt;em&gt;사용자&lt;/em&gt; 서비스의 이름으로.</target>
        </trans-unit>
        <trans-unit id="2ff6e048cc33df5338739033fa8346eb0d4a951f" translate="yes" xml:space="preserve">
          <source>If you already have projects running on your machine that use other versions of Node.js and npm, consider using &lt;a href=&quot;https://github.com/creationix/nvm&quot;&gt;nvm&lt;/a&gt; to manage the multiple versions of Node.js and npm.</source>
          <target state="translated">다른 버전의 Node.js 및 npm을 사용하는 시스템에서 이미 프로젝트를 실행중인 경우 &lt;a href=&quot;https://github.com/creationix/nvm&quot;&gt;nvm&lt;/a&gt; 을 사용하여 여러 버전의 Node.js 및 npm을 관리하는 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="20b03c67a88235e36acc0fc42c3d9208b7a04ffe" translate="yes" xml:space="preserve">
          <source>If you are currently using AngularJS, see &lt;a href=&quot;upgrade&quot;&gt;Upgrading from AngularJS&lt;/a&gt;. &lt;em&gt;AngularJS&lt;/em&gt; is the name for all v1.x versions of Angular.</source>
          <target state="translated">현재 AngularJS를 사용중인 경우 AngularJS에서 &lt;a href=&quot;upgrade&quot;&gt;업그레이드를&lt;/a&gt; 참조하십시오 . &lt;em&gt;AngularJS&lt;/em&gt; 는 모든 v1.x 버전의 Angular의 이름입니다.</target>
        </trans-unit>
        <trans-unit id="2a8730eb4263adf9633421f884873db3bc272d64" translate="yes" xml:space="preserve">
          <source>If you are hiding large component trees, consider &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; as a more efficient alternative to showing/hiding.</source>
          <target state="translated">큰 구성 요소 트리를 숨기 &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; 를 표시 / 숨기기의보다 효율적인 대안으로 고려 하십시오 .</target>
        </trans-unit>
        <trans-unit id="dd74353d5cb9e62ae95981a79ed374fcaa9e6433" translate="yes" xml:space="preserve">
          <source>If you are implementing a custom renderer, you must implement this interface.</source>
          <target state="translated">사용자 정의 렌더러를 구현하는 경우이 인터페이스를 구현해야합니다.</target>
        </trans-unit>
        <trans-unit id="abfbbb4531d989e45009d6d362b78e141a014fd3" translate="yes" xml:space="preserve">
          <source>If you are new to Angular, see &lt;a href=&quot;start&quot;&gt;Getting Started&lt;/a&gt;. Getting Started helps you quickly learn the essentials of Angular, in the context of building a basic online store app. It leverages the &lt;a href=&quot;https://stackblitz.com/&quot;&gt;StackBlitz&lt;/a&gt; online development environment, so you don't need to set up your local environment until you're ready.</source>
          <target state="translated">Angular를 &lt;a href=&quot;start&quot;&gt;처음 사용하는 경우 시작하기를&lt;/a&gt; 참조하십시오 . 시작하면 기본적인 온라인 상점 앱을 구축 할 때 Angular의 필수 요소를 빠르게 배울 수 있습니다. &lt;a href=&quot;https://stackblitz.com/&quot;&gt;StackBlitz&lt;/a&gt; 온라인 개발 환경을 활용 하므로 준비가 될 때까지 로컬 환경을 설정할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="3a2afbd5d04b514e212ac51be4531329265f23e7" translate="yes" xml:space="preserve">
          <source>If you are new to Angular, see the &lt;a href=&quot;start&quot;&gt;Getting Started&lt;/a&gt; tutorial. Getting Started helps you quickly learn the essentials of Angular, in the context of building a basic online store app.</source>
          <target state="translated">Angular를 &lt;a href=&quot;start&quot;&gt;처음 사용하는 경우 시작하기&lt;/a&gt; 자습서를 참조하십시오 . 시작하면 기본적인 온라인 상점 앱을 구축 할 때 Angular의 필수 요소를 빠르게 배울 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="429a085eabc08ae949cb917701bc53d58671e9e8" translate="yes" xml:space="preserve">
          <source>If you are not using the CLI, add your polyfill scripts directly to the host web page (&lt;code&gt;index.html&lt;/code&gt;).</source>
          <target state="translated">CLI를 사용하지 않는 경우 polyfill 스크립트를 호스트 웹 페이지 ( &lt;code&gt;index.html&lt;/code&gt; )에 직접 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="c294d47814c324598c601f2919036c6333fbcffe" translate="yes" xml:space="preserve">
          <source>If you are updating from &lt;strong&gt;one major version to another,&lt;/strong&gt; then we recommend that you &lt;strong&gt;don't skip major versions.&lt;/strong&gt; Follow the instructions to incrementally update to the next major version, testing and validating at each step. For example, if you want to update from version 6.x.x to version 8.x.x, we recommend that you update to the latest 7.x.x release first. After successfully updating to 7.x.x, you can then update to 8.x.x.</source>
          <target state="translated">&lt;strong&gt;하나의 메이저 버전에서 다른 메이저 버전으로&lt;/strong&gt; 업데이트하는 경우 &lt;strong&gt;메이저 버전을 &lt;/strong&gt;&lt;strong&gt;건너 뛰지 않는&lt;/strong&gt; 것이 좋습니다 &lt;strong&gt;. &lt;/strong&gt;지침에 따라 다음 주요 버전으로 점진적으로 업데이트하고 각 단계에서 테스트하고 유효성을 검사하십시오. 예를 들어 버전 6.xx에서 버전 8.xx로 업데이트하려면 먼저 최신 7.xx 릴리스로 업데이트하는 것이 좋습니다. 7.xx로 성공적으로 업데이트 한 후 8.xx로 업데이트 할 수 있습니다</target>
        </trans-unit>
        <trans-unit id="5f232055071ca555fe05e8263d44377d3060b3a6" translate="yes" xml:space="preserve">
          <source>If you are updating within the &lt;strong&gt;same major version,&lt;/strong&gt; then you can skip any intermediate versions and update directly to the targeted version. For example, you can update directly from 7.0.0 to 7.2.11.</source>
          <target state="translated">&lt;strong&gt;동일한 주 버전&lt;/strong&gt; 내에서 업데이트하는 경우 중간 버전을 건너 뛰고 대상 버전으로 직접 업데이트 할 수 있습니다. 예를 들어 7.0.0에서 7.2.11로 직접 업데이트 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="aa30f67180396da593aeadb4e26b8ee85e38af3d" translate="yes" xml:space="preserve">
          <source>If you choose to inject your pipe into a class, you must provide it in the &lt;code&gt;providers&lt;/code&gt; array of your &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">파이프를 클래스에 주입하기로 선택한 경우 &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 의 &lt;code&gt;providers&lt;/code&gt; 배열에 파이프를 제공해야합니다 .</target>
        </trans-unit>
        <trans-unit id="f9a5cf2285ce2f7f1005a024b906069e5899271e" translate="yes" xml:space="preserve">
          <source>If you click the dashboard hero &quot;Magneta,&quot; the router opens a &quot;Hero Details&quot; view where you can change the hero's name.</source>
          <target state="translated">대시 보드 영웅 &quot;Magneta&quot;를 클릭하면 라우터에서 영웅 이름을 변경할 수있는 &quot;영웅 정보&quot;보기가 열립니다.</target>
        </trans-unit>
        <trans-unit id="8f68cc79c216b6b956bc04df5f4512033049017d" translate="yes" xml:space="preserve">
          <source>If you comment out the &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt; decorator, Angular walks up the injector ancestor tree until it finds the logger at the &lt;code&gt;AppComponent&lt;/code&gt; level. The logger logic kicks in and the hero display updates with the &quot;!!!&quot; marker to indicate that the logger was found.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt; 데코레이터 를 주석 처리하면 Angular는 &lt;code&gt;AppComponent&lt;/code&gt; 레벨 에서 로거를 찾을 때까지 인젝터 조상 트리를 위로 올라 갑니다 . 로거 로직이 시작되고 영웅 디스플레이가 &quot;!!!&quot;로 업데이트됩니다. 로거가 발견되었음을 나타내는 마커.</target>
        </trans-unit>
        <trans-unit id="655f88a25378a8e0bba92c48a89431e31a18d04a" translate="yes" xml:space="preserve">
          <source>If you configure an app-wide provider in the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;()&lt;/code&gt; of &lt;code&gt;AppModule&lt;/code&gt;, it overrides one configured for &lt;code&gt;root&lt;/code&gt; in the &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; metadata. You can do this to configure a non-default provider of a service that is shared with multiple apps.</source>
          <target state="translated">당신이에서 애플리케이션 전체의 공급자를 구성하는 경우 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;()&lt;/code&gt; 의 &lt;code&gt;AppModule&lt;/code&gt; , 그것은 하나가 구성 무시 &lt;code&gt;root&lt;/code&gt; 에 &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; 메타 데이터. 이렇게하면 여러 앱과 공유되는 기본이 아닌 서비스 공급자를 구성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="53b5c56d5542295c8b28d30b021bb969efead9f2" translate="yes" xml:space="preserve">
          <source>If you create a new version of your library that introduces potential breaking changes, you can provide an &lt;em&gt;update schematic&lt;/em&gt; to enable the &lt;code&gt;ng &lt;a href=&quot;../api/forms/ngmodel#update&quot;&gt;update&lt;/a&gt;&lt;/code&gt; command to automatically resolve any such changes in the project being updated.</source>
          <target state="translated">잠재적 인 주요 변경 사항을 소개하는 새 버전의 라이브러리를 작성하는 경우 &lt;code&gt;ng &lt;a href=&quot;../api/forms/ngmodel#update&quot;&gt;update&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;../api/forms/ngmodel#update&quot;&gt;update&lt;/a&gt; 명령이 업데이트중인 프로젝트에서 이러한 변경 사항을 자동으로 해결할 수 있도록 &lt;em&gt;업데이트 회로도&lt;/em&gt; 를 제공 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d6a642206c4a5d0b4ac72237fc880c34a1dcc940" translate="yes" xml:space="preserve">
          <source>If you create project with `Angular/CLI`, it is already imported in `src/test.ts`.</source>
          <target state="translated">`Angular / CLI`로 프로젝트를 만들면 이미`src / test.ts`로 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="00d9ca9f25be57d4c4bdc4c5699c96a4ab982c59" translate="yes" xml:space="preserve">
          <source>If you declare the real components, you'll also have to declare &lt;em&gt;their&lt;/em&gt; nested components and provide for &lt;em&gt;all&lt;/em&gt; services injected in &lt;em&gt;any&lt;/em&gt; component in the tree.</source>
          <target state="translated">당신이 실제 구성 요소를 선언하면, 당신은 또한 선언해야합니다 &lt;em&gt;자신의&lt;/em&gt; 중첩 된 구성 요소 및 제공 &lt;em&gt;하는 모든&lt;/em&gt; 주입 서비스 &lt;em&gt;어떤&lt;/em&gt; 트리의 구성 요소입니다.</target>
        </trans-unit>
        <trans-unit id="27f3473cbc8bd4910ed874d931585deebed2a0eb" translate="yes" xml:space="preserve">
          <source>If you delete the hero name, the form displays a validation error in an attention-grabbing style:</source>
          <target state="translated">영웅 이름을 삭제하면 양식에주의를 끄는 스타일로 유효성 검사 오류가 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="be89fadd89408e928a800bd50abe498bb92298a3" translate="yes" xml:space="preserve">
          <source>If you develop angular locally with &lt;code&gt;ng serve&lt;/code&gt;, a &lt;code&gt;websocket&lt;/code&gt; connection is set up automatically between browser and local dev server, so when your code changes, the browser can automatically refresh.</source>
          <target state="translated">&lt;code&gt;ng serve&lt;/code&gt; 를 사용하여 로컬에서 각도를 개발하면 브라우저와 로컬 개발자 서버간에 웹 &lt;code&gt;websocket&lt;/code&gt; 연결이 자동으로 설정되므로 코드가 변경되면 브라우저가 자동으로 새로 고쳐질 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1b7663d2e6e6cb92add7a2eeb86377cd1a6f1568" translate="yes" xml:space="preserve">
          <source>If you do combine a component and service in the same file, it is important to define the service first, and then the component. If you define the component before the service, you get a run-time null reference error.</source>
          <target state="translated">동일한 파일에서 컴포넌트와 서비스를 결합하는 경우 먼저 서비스를 정의한 다음 컴포넌트를 정의해야합니다. 서비스 전에 구성 요소를 정의하면 런타임 널 참조 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="70b72ee7901f1dbf6fe44eed029ec0919535d96c" translate="yes" xml:space="preserve">
          <source>If you do import &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; into a lazy loaded feature module, Angular returns an error telling you to use &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; instead.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; 을 &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; 로드 된 기능 모듈로 가져 오면 Angular는 대신 CommonModule 을 사용 하라는 오류를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="d0a50f188d24b28b62b5d94fe7caa482234cb014" translate="yes" xml:space="preserve">
          <source>If you do need to populate initial values into your form, using a one-way binding for &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; tends to be sufficient as long as you use the exported form's value rather than the domain model's value on submit.</source>
          <target state="translated">초기 값을 양식에 &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; 하는 경우 제출시 도메인 모델의 값 대신 내 보낸 양식의 값을 사용하는 한 ngModel에 단방향 바인딩을 사용하면 충분합니다.</target>
        </trans-unit>
        <trans-unit id="8172efb07c1070141d767274a73b38bf7814dfc1" translate="yes" xml:space="preserve">
          <source>If you do, be sure to set the &lt;code&gt;id&lt;/code&gt; attribute - not the &lt;code&gt;name&lt;/code&gt; attribute! The docs generator will not convert the &lt;code&gt;name&lt;/code&gt; to the proper link URL.</source>
          <target state="translated">그렇다면 , &lt;code&gt;name&lt;/code&gt; 속성이 아닌 &lt;code&gt;id&lt;/code&gt; 속성 을 설정하십시오 ! 문서 생성기는 &lt;code&gt;name&lt;/code&gt; 을 적절한 링크 URL 로 변환하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="0690d6c4fb6fbd319b60dd809c871d4c4ae2c535" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t already have an app, you can follow the steps below to create one with the CLI. If you do already have an app, skip to &lt;a href=&quot;lazy-loading-ngmodules#config-routes&quot;&gt;Configure the routes&lt;/a&gt;. Enter the following command where &lt;code&gt;customer-app&lt;/code&gt; is the name of your app:</source>
          <target state="translated">아직 앱이없는 경우 아래 단계에 따라 CLI로 앱을 만들 수 있습니다. 이미 앱이있는 &lt;a href=&quot;lazy-loading-ngmodules#config-routes&quot;&gt;경우 경로 구성으로&lt;/a&gt; 건너 뜁니다 . &lt;code&gt;customer-app&lt;/code&gt; 가 앱 이름 인 다음 명령을 입력하십시오 .</target>
        </trans-unit>
        <trans-unit id="459d0b6f0027ff890051041d8277b8b47d8f99dc" translate="yes" xml:space="preserve">
          <source>If you don't have it, install &lt;strong&gt;&lt;a href=&quot;https://www.visualstudio.com/en-us/news/releasenotes/vs2015-update3-vs&quot;&gt;Visual Studio 2015 Update 3&lt;/a&gt;&lt;/strong&gt;. Or use &lt;code&gt;Tools | Extensions and Updates&lt;/code&gt; to update to Update 3 directly from Visual Studio 2015.</source>
          <target state="translated">없는 경우 &lt;strong&gt;&lt;a href=&quot;https://www.visualstudio.com/en-us/news/releasenotes/vs2015-update3-vs&quot;&gt;Visual Studio 2015 업데이트 3을&lt;/a&gt;&lt;/strong&gt; 설치하십시오 . 또는 &lt;code&gt;Tools | Extensions and Updates&lt;/code&gt; Visual Studio 2015에서 직접 업데이트 3으로 업데이트 할 수있는 확장 및 업데이트</target>
        </trans-unit>
        <trans-unit id="48ed7036b0a82e03171cab5edf597919553bb1d3" translate="yes" xml:space="preserve">
          <source>If you don't provide a unit when specifying dimension, Angular assumes a default unit of pixels, or px. Expressing 50 pixels as &lt;code&gt;50&lt;/code&gt; is the same as saying &lt;code&gt;'50px'&lt;/code&gt;.</source>
          <target state="translated">치수를 지정할 때 단위를 제공하지 않으면 Angular는 기본 단위 인 픽셀 또는 px를 가정합니다. 50 픽셀을 &lt;code&gt;50&lt;/code&gt; 으로 표현하는 것은 &lt;code&gt;'50px'&lt;/code&gt; 를 말하는 것과 같습니다 .</target>
        </trans-unit>
        <trans-unit id="d1b561dc3312390e8ea84f90f931f5ed36b0f473" translate="yes" xml:space="preserve">
          <source>If you don't use the CLI, you have two options:</source>
          <target state="translated">CLI를 사용하지 않으면 두 가지 옵션이 있습니다.</target>
        </trans-unit>
        <trans-unit id="5bc2f915897fc1447035a5647974d463c55c174d" translate="yes" xml:space="preserve">
          <source>If you find that changes to your library are not reflected in your app, your app is probably using an old build of the library.</source>
          <target state="translated">라이브러리의 변경 사항이 앱에 반영되지 않는 경우 앱에서 오래된 라이브러리 빌드를 사용하고있을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3a8aa489382d8d4aec77f8acd02f621cf2ccce35" translate="yes" xml:space="preserve">
          <source>If you find your application becomes unresponsive while processing data, using Web Workers can help.</source>
          <target state="translated">데이터를 처리하는 동안 응용 프로그램이 응답하지 않는 경우 웹 작업자를 사용하면 도움이 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0433bd29313c70f90dc0cba136f09aa567988ee1" translate="yes" xml:space="preserve">
          <source>If you get a template parse error when trying to use inputs or outputs, but you know that the properties do indeed exist, double check that your properties are annotated with &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; / &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; or that you've declared them in an &lt;code&gt;inputs&lt;/code&gt;/&lt;code&gt;outputs&lt;/code&gt; array:</source>
          <target state="translated">입력 또는 출력을 사용하려고 할 때 템플릿 구문 분석 오류가 발생하지만 속성이 실제로 존재한다는 것을 알고 있다면 속성에 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; / &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; 으로 주석이 달렸 는지 또는 선언했는지 확인하십시오. &lt;code&gt;inputs&lt;/code&gt; / &lt;code&gt;outputs&lt;/code&gt; 배열 :</target>
        </trans-unit>
        <trans-unit id="574c59f8b77bf5e82b23eb72c796ed67b3d2fb05" translate="yes" xml:space="preserve">
          <source>If you had any AngularJS services in the project, those would also be a good candidate for converting to classes, since like controllers, they're also constructor functions. But you only have the &lt;code&gt;Phone&lt;/code&gt; factory in this project, and that's a bit special since it's an &lt;code&gt;ngResource&lt;/code&gt; factory. So you won't be doing anything to it in the preparation stage. You'll instead turn it directly into an Angular service.</source>
          <target state="translated">프로젝트에 AngularJS 서비스가 있다면 컨트롤러와 마찬가지로 클래스로 변환하기에 좋은 후보가 될 것입니다. 컨트롤러와 마찬가지로 생성자 함수이기도합니다. 그러나이 프로젝트 에는 &lt;code&gt;Phone&lt;/code&gt; 팩토리 만 있으며 &lt;code&gt;ngResource&lt;/code&gt; 팩토리 이므로 약간 특별합니다 . 따라서 준비 단계에서는 아무것도하지 않습니다. 대신 Angular 서비스로 직접 전환합니다.</target>
        </trans-unit>
        <trans-unit id="1fed1253af78f190067c1aae4775c40631199cc8" translate="yes" xml:space="preserve">
          <source>If you have a content-rich app, such as the Angular app that presents this documentation, custom elements let you give your content providers sophisticated Angular functionality without requiring knowledge of Angular. For example, an Angular guide like this one is added directly to the DOM by the Angular navigation tools, but can include special elements like &lt;code&gt;&amp;lt;code-snippet&amp;gt;&lt;/code&gt; that perform complex operations. All you need to tell your content provider is the syntax of your custom element. They don't need to know anything about Angular, or anything about your component's data structures or implementation.</source>
          <target state="translated">이 설명서를 제공하는 Angular 앱과 같이 컨텐츠가 풍부한 앱이있는 경우 사용자 정의 요소를 사용하면 컨텐츠 제공자에게 Angular에 대한 지식 없이도 정교한 Angular 기능을 제공 할 수 있습니다. 예를 들어 이와 같은 Angular 안내서는 Angular 탐색 도구를 통해 DOM에 직접 추가되지만 복잡한 작업을 수행하는 &lt;code&gt;&amp;lt;code-snippet&amp;gt;&lt;/code&gt; 과 같은 특수 요소를 포함 할 수 있습니다 . 콘텐츠 제공 업체에 알리기 위해 필요한 것은 사용자 지정 요소의 구문입니다. Angular 또는 구성 요소의 데이터 구조 또는 구현에 대해 알 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="f19944a29f8b906f6f0c8e4343ee837260ae1269" translate="yes" xml:space="preserve">
          <source>If you have a floating image inside an alert, callout, or a subsection, it is a good idea to apply the &lt;code&gt;clear-fix&lt;/code&gt; class to the &lt;code&gt;div&lt;/code&gt; to ensure that the image doesn't overflow its container. For example:</source>
          <target state="translated">경고, 설명 선 또는 하위 섹션 내에 떠 다니는 이미지가있는 경우 이미지가 컨테이너에 넘치지 않도록 &lt;code&gt;clear-fix&lt;/code&gt; 클래스를 &lt;code&gt;div&lt;/code&gt; 에 적용하는 것이 좋습니다 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="6397857065b35ce89a9f398af1b26fb9b1516f71" translate="yes" xml:space="preserve">
          <source>If you have developed functionality that is suitable for reuse, you can create your own libraries. These libraries can be used locally in your workspace, or you can publish them as &lt;a href=&quot;npm-packages&quot;&gt;npm packages&lt;/a&gt; to share with other projects or other Angular developers. These packages can be published to the npm registry, a private npm Enterprise registry, or a private package management system that supports npm packages. See &lt;a href=&quot;creating-libraries&quot;&gt;Creating Libraries&lt;/a&gt;.</source>
          <target state="translated">재사용에 적합한 기능을 개발 한 경우 자체 라이브러리를 작성할 수 있습니다. 이 라이브러리는 작업 공간에서 로컬로 사용하거나 &lt;a href=&quot;npm-packages&quot;&gt;npm 패키지&lt;/a&gt; 로 게시 하여 다른 프로젝트 또는 다른 Angular 개발자와 공유 할 수 있습니다 . 이러한 패키지는 npm 레지스트리, 개인 npm Enterprise 레지스트리 또는 npm 패키지를 지원하는 개인 패키지 관리 시스템에 게시 할 수 있습니다. &lt;a href=&quot;creating-libraries&quot;&gt;라이브러리 작성을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="b1d5fced1eafeb19e09e69c636133d8617598ad9" translate="yes" xml:space="preserve">
          <source>If you have more than two paragraphs, consider creating a new page or making it part of the main content.</source>
          <target state="translated">단락이 두 개 이상인 경우 새 페이지를 만들거나 주 내용의 일부로 만드는 것을 고려하십시오.</target>
        </trans-unit>
        <trans-unit id="ce43e9168848245cd1d0950e4a6be2522d8f2b68" translate="yes" xml:space="preserve">
          <source>If you have registered a provider for the same DI token at different levels, the first one Angular encounters is the one it uses to resolve the dependency. If, for example, a provider is registered locally in the component that needs a service, Angular doesn't look for another provider of the same service.</source>
          <target state="translated">다른 레벨에서 동일한 DI 토큰에 대해 제공자를 등록한 경우 Angular에서 가장 먼저 발생하는 것은 종속성을 해결하는 데 사용됩니다. 예를 들어 서비스가 필요한 구성 요소에 공급자가 로컬로 등록되어 있으면 Angular는 동일한 서비스의 다른 공급자를 찾지 않습니다.</target>
        </trans-unit>
        <trans-unit id="244fbbf115dfe5706448ffdb4e279457395f14e1" translate="yes" xml:space="preserve">
          <source>If you haven't already, remove all references to the &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; from &lt;code&gt;app.module.ts&lt;/code&gt;, as well as any &lt;a href=&quot;upgrade#making-angularjs-dependencies-injectable-to-angular&quot;&gt;factory provider&lt;/a&gt; for AngularJS services, and the &lt;code&gt;app/ajs-upgraded-providers.ts&lt;/code&gt; file.</source>
          <target state="translated">당신이 이미하지 않은 경우에 대한 모든 참조 제거 &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; 을 에서 &lt;code&gt;app.module.ts&lt;/code&gt; ,뿐만 아니라 &lt;a href=&quot;upgrade#making-angularjs-dependencies-injectable-to-angular&quot;&gt;공장 제공&lt;/a&gt; AngularJS와 서비스 및 &lt;code&gt;app/ajs-upgraded-providers.ts&lt;/code&gt; 파일입니다.</target>
        </trans-unit>
        <trans-unit id="4963feaec493218114281088952fb43b33cce3a9" translate="yes" xml:space="preserve">
          <source>If you haven't created custom validators before, start by reviewing the &lt;a href=&quot;form-validation#custom-validators&quot;&gt;custom validators section&lt;/a&gt;.</source>
          <target state="translated">전에 맞춤 검사기를 만들지 않았다면 먼저 &lt;a href=&quot;form-validation#custom-validators&quot;&gt;맞춤 검사기 섹션&lt;/a&gt; 을 검토 하십시오 .</target>
        </trans-unit>
        <trans-unit id="7c789fcd7125f7745fca41c10481fb3d352702dd" translate="yes" xml:space="preserve">
          <source>If you intend to have multiple projects in a workspace, you can skip the initial application generation when you create the workspace, and give the workspace a unique name. The following command creates a workspace with all of the workspace-wide configuration files, but no root-level application.</source>
          <target state="translated">작업 공간에 여러 프로젝트가있는 경우 작업 공간을 작성할 때 초기 애플리케이션 생성을 건너 뛰고 작업 공간에 고유 한 이름을 지정할 수 있습니다. 다음 명령은 모든 작업 공간 전체 구성 파일을 사용하지만 루트 레벨 응용 프로그램은없는 작업 공간을 작성합니다.</target>
        </trans-unit>
        <trans-unit id="6ed99352b2d6234cc28fecffcc038922fe7627c2" translate="yes" xml:space="preserve">
          <source>If you look at the &lt;code&gt;http-server&lt;/code&gt; logs, you can see the service worker requesting &lt;code&gt;/ngsw.json&lt;/code&gt;. This is how the service worker checks for updates.</source>
          <target state="translated">&lt;code&gt;http-server&lt;/code&gt; logs 를 보면 서비스 작업자가 &lt;code&gt;/ngsw.json&lt;/code&gt; 을 요청하는 것을 볼 수 있습니다 . 서비스 직원이 업데이트를 확인하는 방법입니다.</target>
        </trans-unit>
        <trans-unit id="09c234e78616a8f1ab6267a5b6637fade99d397d" translate="yes" xml:space="preserve">
          <source>If you look at the Network tab, you can verify that the service worker is active.</source>
          <target state="translated">네트워크 탭을 보면 서비스 워커가 활성화되어 있는지 확인할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="73a79269220380ef80051827e018d68abab94031" translate="yes" xml:space="preserve">
          <source>If you look at the template for the name input again, it is fairly similar to the template-driven example.</source>
          <target state="translated">이름 입력을위한 템플릿을 다시 보면 템플릿 기반 예제와 매우 유사합니다.</target>
        </trans-unit>
        <trans-unit id="be1adaa34051feae1f602d2f495e70b203a2addd" translate="yes" xml:space="preserve">
          <source>If you look in the Cache Storage viewer, the cache is frequently out of date. Right click the Cache Storage title and refresh the caches.</source>
          <target state="translated">캐시 스토리지 뷰어를 보면 캐시가 종종 오래된 것입니다. 캐시 스토리지 제목을 마우스 오른쪽 단추로 클릭하고 캐시를 새로 고치십시오.</target>
        </trans-unit>
        <trans-unit id="e240ddeb830d887bc58d8e84732b2ed378e0c98b" translate="yes" xml:space="preserve">
          <source>If you mean to lazy-load a module, be careful not import it in a file that's eagerly loaded when the app starts (such as the root &lt;code&gt;AppModule&lt;/code&gt;). If you do that, the module will be loaded immediately.</source>
          <target state="translated">모듈을 느리게로드하려는 경우 앱이 시작될 때 열심히로드 된 파일 (예 : 루트 &lt;code&gt;AppModule&lt;/code&gt; ) 로 모듈을 가져 오지 않도록주의하십시오 . 그렇게하면 모듈이 즉시로드됩니다.</target>
        </trans-unit>
        <trans-unit id="dd2ad358ff3a296ca464afc454eed23c1c38e476" translate="yes" xml:space="preserve">
          <source>If you must guard against this kind of &quot;provider corruption&quot;, &lt;em&gt;don't rely on a launch-time module's &lt;code&gt;providers&lt;/code&gt;.&lt;/em&gt;</source>
          <target state="translated">이런 종류의 &quot;제공자 손상&quot;으로부터 보호해야하는 경우 &lt;em&gt;시작 시간 모듈의 &lt;code&gt;providers&lt;/code&gt; 에 의존하지 마십시오 .&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="3304f68a08d3080d984d8dc5da4dcc423149911b" translate="yes" xml:space="preserve">
          <source>If you must inject an instance of an ambient type, you can finesse the problem in four steps:</source>
          <target state="translated">앰비언트 유형의 인스턴스를 주입해야하는 경우 다음 네 단계로 문제를 해결할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d7e18b086d212d4c106b0c8fad4ba48df8021509" translate="yes" xml:space="preserve">
          <source>If you must load the module eagerly, when the application starts, &lt;em&gt;provide the service in a component instead.&lt;/em&gt;</source>
          <target state="translated">모듈을 열성적으로로드해야하는 경우 응용 프로그램이 시작될 때 &lt;em&gt;구성 요소로 서비스를 제공하십시오.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e8ac82fe8517410b1d40420bd85029d758cdda8a" translate="yes" xml:space="preserve">
          <source>If you must mutate the request body, copy it first, change the copy, &lt;code&gt;clone()&lt;/code&gt; the request, and set the clone's body with the new body, as in the following example.</source>
          <target state="translated">요청 본문을 변경해야하는 경우 다음 예제와 같이 먼저 요청 본문을 복사하고 사본을 변경 하고 요청을 &lt;code&gt;clone()&lt;/code&gt; 한 다음 복제본을 새 본문으로 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="5deab0538bd8714b4af9c382cd8cc938823e841f" translate="yes" xml:space="preserve">
          <source>If you must read a target element property or call one of its methods, see the API reference for &lt;a href=&quot;../api/core/viewchild&quot;&gt;ViewChild&lt;/a&gt; and &lt;a href=&quot;../api/core/contentchild&quot;&gt;ContentChild&lt;/a&gt;.</source>
          <target state="translated">대상 요소 특성을 읽거나 해당 메소드 중 하나를 호출 &lt;a href=&quot;../api/core/viewchild&quot;&gt;해야하는&lt;/a&gt; 경우 ViewChild 및 &lt;a href=&quot;../api/core/contentchild&quot;&gt;ContentChild&lt;/a&gt; 의 API 참조를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="4c8d2326e60e33ffa20c7c4182475e5223e4a351" translate="yes" xml:space="preserve">
          <source>If you need an &lt;em&gt;optional&lt;/em&gt; polyfill, you must install its npm package, then uncomment or create the corresponding import statement in the &lt;code&gt;src/polyfills.ts&lt;/code&gt; configuration file.</source>
          <target state="translated">&lt;em&gt;선택적&lt;/em&gt; polyfill 이 필요한 경우 npm 패키지를 설치 한 다음 &lt;code&gt;src/polyfills.ts&lt;/code&gt; 구성 파일 에서 해당 가져 오기 명령문의 주석 처리를 제거하거나 작성해야 합니다.</target>
        </trans-unit>
        <trans-unit id="2e3109a970d92c304a276ac634765200cb2660a8" translate="yes" xml:space="preserve">
          <source>If you need to access a backend that is not on &lt;code&gt;localhost&lt;/code&gt;, set the &lt;code&gt;changeOrigin&lt;/code&gt; option as well. For example:</source>
          <target state="translated">&lt;code&gt;localhost&lt;/code&gt; 에 없는 백엔드에 액세스해야하는 경우 &lt;code&gt;changeOrigin&lt;/code&gt; 옵션도 설정하십시오 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="7385333e0134701bca8a7465de13704c98317745" translate="yes" xml:space="preserve">
          <source>If you need to avoid randomly generated value to be used as an application id, you can provide a custom value via a DI provider  configuring the root &lt;a href=&quot;injector&quot;&gt;&lt;code&gt;Injector&lt;/code&gt;&lt;/a&gt; using this token.</source>
          <target state="translated">임의로 생성 된 값을 애플리케이션 ID로 사용하지 않으려면 이 토큰을 사용하여 루트 &lt;a href=&quot;injector&quot;&gt; &lt;code&gt;Injector&lt;/code&gt; &lt;/a&gt; 를 구성하는 DI 제공자를 통해 사용자 정의 값을 제공 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="9f78d5b2a7cf462a861acdc7e39dc21266ddf374" translate="yes" xml:space="preserve">
          <source>If you need to convert user input into a trusted value, use a controller method. The following template allows users to enter a YouTube video ID and load the corresponding video in an &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt;. The &lt;code&gt;&amp;lt;iframe src&amp;gt;&lt;/code&gt; attribute is a resource URL security context, because an untrusted source can, for example, smuggle in file downloads that unsuspecting users could execute. So call a method on the controller to construct a trusted video URL, which causes Angular to allow binding into &lt;code&gt;&amp;lt;iframe src&amp;gt;&lt;/code&gt;:</source>
          <target state="translated">사용자 입력을 신뢰할 수있는 값으로 변환해야하는 경우 컨트롤러 방법을 사용하십시오. 다음 템플릿을 사용하면 사용자가 YouTube 비디오 ID를 입력하고 해당 비디오를 &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; 에로드 할 수 있습니다. &lt;code&gt;&amp;lt;iframe src&amp;gt;&lt;/code&gt; 신뢰할 수없는 소스, 예를 들어, 순진한 사용자가 실행할 수 있습니다 파일 다운로드에 몰래 수 있기 때문에 속성은 리소스 URL의 보안 컨텍스트입니다. 따라서 컨트롤러에서 메소드를 호출하여 신뢰할 수있는 비디오 URL을 구성하면 Angular가 &lt;code&gt;&amp;lt;iframe src&amp;gt;&lt;/code&gt; 에 바인딩 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a3250f2b9a593c69bfc2b1d2c08f0d20870d9f6a" translate="yes" xml:space="preserve">
          <source>If you need to opt-out from using Bazel, you can restore the backup files:</source>
          <target state="translated">Bazel을 사용하지 않으려면 백업 파일을 복원 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6bb9cbf31fbab37e1847d62faf286db820a17f95" translate="yes" xml:space="preserve">
          <source>If you need to optionally bypass the proxy, or dynamically change the request before it's sent, add the bypass option, as shown in this JavaScript example.</source>
          <target state="translated">선택적으로 프록시를 우회하거나 요청을 보내기 전에 동적으로 변경해야하는 경우이 JavaScript 예제에 표시된대로 우회 옵션을 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="9ebc63e4b9f1212654ea17d217d2e04a30598b57" translate="yes" xml:space="preserve">
          <source>If you need to respond to duplicate requests in your test, use the &lt;code&gt;match()&lt;/code&gt; API instead of &lt;code&gt;expectOne()&lt;/code&gt;. It takes the same arguments but returns an array of matching requests. Once returned, these requests are removed from future matching and you are responsible for flushing and verifying them.</source>
          <target state="translated">테스트에서 중복 요청에 응답해야하는 경우 &lt;code&gt;expectOne()&lt;/code&gt; 대신 &lt;code&gt;match()&lt;/code&gt; API를 사용하십시오 . 동일한 인수를 사용하지만 일치하는 요청의 배열을 반환합니다. 반환 된 요청은 이후의 일치 항목에서 제거되며 귀하는 요청을 플러시하고 확인해야합니다.</target>
        </trans-unit>
        <trans-unit id="04c73ded6e0a3395b3dfd9ed41d7828a67bbbf93" translate="yes" xml:space="preserve">
          <source>If you need to see what events are happening during the navigation lifecycle, there is the &lt;strong&gt;enableTracing&lt;/strong&gt; option as part of the router's default configuration. This outputs each router event that took place during each navigation lifecycle to the browser console. This should only be used for &lt;em&gt;debugging&lt;/em&gt; purposes. You set the &lt;code&gt;&lt;a href=&quot;../api/router/extraoptions#enableTracing&quot;&gt;enableTracing&lt;/a&gt;: true&lt;/code&gt; option in the object passed as the second argument to the &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt; method.</source>
          <target state="translated">탐색 수명주기 동안 어떤 이벤트가 발생하는지 확인해야하는 경우 라우터 기본 구성의 일부로 &lt;strong&gt;enableTracing&lt;/strong&gt; 옵션이 있습니다. 이는 탐색주기마다 발생한 각 라우터 이벤트를 브라우저 콘솔에 출력합니다. 이것은 &lt;em&gt;디버깅&lt;/em&gt; 목적으로 만 사용해야 합니다. &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt; 메소드에 두 번째 인수로 전달 된 오브젝트에서 &lt;code&gt;&lt;a href=&quot;../api/router/extraoptions#enableTracing&quot;&gt;enableTracing&lt;/a&gt;: true&lt;/code&gt; 옵션을 설정했습니다 .</target>
        </trans-unit>
        <trans-unit id="05239027809e9357cdeac1b33f2e9f9ad3528fa3" translate="yes" xml:space="preserve">
          <source>If you neglect to &lt;code&gt;subscribe()&lt;/code&gt;, the service will not send the delete request to the server. As a rule, an &lt;code&gt;Observable&lt;/code&gt;&lt;em&gt;does nothing&lt;/em&gt; until something subscribes.</source>
          <target state="translated">&lt;code&gt;subscribe()&lt;/code&gt; 를 무시 하면 서비스가 서버로 삭제 요청을 보내지 않습니다. 일반적으로 &lt;code&gt;Observable&lt;/code&gt; &lt;em&gt;은&lt;/em&gt; 무언가를 구독 할 때까지 &lt;em&gt;아무것도하지 않습니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="2bb56c6624ae91a5bea7e0fafc4658c9a36bf145" translate="yes" xml:space="preserve">
          <source>If you neglect to declare them, the Angular compiler won't recognize the &lt;code&gt;&amp;lt;app-banner&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;app-welcome&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&amp;gt;&lt;/code&gt; tags in the &lt;code&gt;AppComponent&lt;/code&gt; template and will throw an error.</source>
          <target state="translated">선언하지 않으면 Angular 컴파일러는 &lt;code&gt;AppComponent&lt;/code&gt; 템플릿 에서 &lt;code&gt;&amp;lt;app-banner&amp;gt;&lt;/code&gt; , &lt;code&gt;&amp;lt;app-welcome&amp;gt;&lt;/code&gt; 및 &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&amp;gt;&lt;/code&gt; 태그를 인식하지 못하고 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="71dab46c6a678dfa01d392650ea86b654326f74b" translate="yes" xml:space="preserve">
          <source>If you neglect to make the test function async (e.g., forget to use &lt;code&gt;&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;()&lt;/code&gt; as described below), you'll see this error message</source>
          <target state="translated">테스트 기능을 비동기로 만들지 않으면 (예 : 아래 설명에 따라 &lt;code&gt;&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;()&lt;/code&gt; 를 사용하는 것을 잊지 마십시오 ) 이 오류 메시지가 표시됩니다</target>
        </trans-unit>
        <trans-unit id="a16062c9a5d0f73bb6c757b4c2accd4e8ddb5ef7" translate="yes" xml:space="preserve">
          <source>If you now add &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt; (in addition to the &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt;) to the &lt;code&gt;@&lt;a href=&quot;../api/core/inject&quot;&gt;Inject&lt;/a&gt;&lt;/code&gt; of the &lt;code&gt;FlowerService&lt;/code&gt;, the result will be &lt;code&gt;null&lt;/code&gt;. This is because &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt; limits the upper bound of the search to the &lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt;. Here's the idea in the logical tree:</source>
          <target state="translated">지금 추가 할 경우 &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt; 합니다 (이외에 &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; 받는 사람) &lt;code&gt;@&lt;a href=&quot;../api/core/inject&quot;&gt;Inject&lt;/a&gt;&lt;/code&gt; 의 &lt;code&gt;FlowerService&lt;/code&gt; , 결과가 될 것입니다 &lt;code&gt;null&lt;/code&gt; . &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt; 는 검색의 상한을 &lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt; 로 제한 하기 때문 입니다. 논리 트리의 아이디어는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="81d30c47f20d917822d2488c8b61db4df77908bc" translate="yes" xml:space="preserve">
          <source>If you pass the command a set of libraries to update (or the &lt;code&gt;--all&lt;/code&gt; flag), it updates those libraries, their peer dependencies, and the peer dependencies that depend on them.</source>
          <target state="translated">명령에 업데이트 할 라이브러리 세트 (또는 &lt;code&gt;--all&lt;/code&gt; 플래그)를 전달하면 해당 라이브러리, 해당 피어 종속성 및 해당 라이브러리에 종속 된 피어 종속성이 업데이트됩니다.</target>
        </trans-unit>
        <trans-unit id="1bea4d710733901849b05721b28d48be60b80605" translate="yes" xml:space="preserve">
          <source>If you paste &lt;code&gt;localhost:4200/detail/11&lt;/code&gt; in the browser address bar, the router navigates to the detail view for the hero with &lt;code&gt;id: 11&lt;/code&gt;, &quot;Dr Nice&quot;.</source>
          <target state="translated">브라우저 주소 표시 줄에 &lt;code&gt;localhost:4200/detail/11&lt;/code&gt; 을 붙여 넣으면 라우터는 &lt;code&gt;id: 11&lt;/code&gt; 인 &quot;Dr Nice&quot;인 영웅의 상세보기로 이동합니다 .</target>
        </trans-unit>
        <trans-unit id="a7f498a38745493c47fdb50885cc56ca61f9d272" translate="yes" xml:space="preserve">
          <source>If you plan to have multiple apps in the workspace, you can create an empty workspace by setting the &lt;code&gt;--createApplication&lt;/code&gt; option to false. You can then use &lt;code&gt;ng generate application&lt;/code&gt; to create an initial app. This allows a workspace name different from the initial app name, and ensures that all apps reside in the &lt;code&gt;/projects&lt;/code&gt; subfolder, matching the structure of the configuration file.</source>
          <target state="translated">작업 공간에 여러 개의 앱을 보유하려는 경우 &lt;code&gt;--createApplication&lt;/code&gt; 옵션을 false 로 설정하여 빈 작업 공간을 작성할 수 있습니다 . 그런 다음 &lt;code&gt;ng generate application&lt;/code&gt; 을 사용하여 초기 앱을 만들 수 있습니다. 이를 통해 초기 앱 이름과 다른 작업 영역 이름을 허용하고 모든 앱이 &lt;code&gt;/projects&lt;/code&gt; 하위 폴더에 있으며 구성 파일의 구조와 일치합니다.</target>
        </trans-unit>
        <trans-unit id="2c9da46a1c1c85d39407dcd30d927647ba079020" translate="yes" xml:space="preserve">
          <source>If you plan to use specific animation functions in component files, import those functions from &lt;code&gt;@angular/animations&lt;/code&gt;.</source>
          <target state="translated">컴포넌트 파일에서 특정 애니메이션 함수를 사용하려면 &lt;code&gt;@angular/animations&lt;/code&gt; 에서 해당 함수를 가져 오십시오 .</target>
        </trans-unit>
        <trans-unit id="058a384d58caba78f973912e1c7261709321db73" translate="yes" xml:space="preserve">
          <source>If you prefer a &lt;code&gt;File | New Project&lt;/code&gt; experience and are using &lt;strong&gt;ASP.NET Core&lt;/strong&gt;, then consider the &lt;em&gt;experimental&lt;/em&gt;&lt;a href=&quot;http://blog.stevensanderson.com/2016/10/04/angular2-template-for-visual-studio/&quot;&gt;ASP.NET Core + Angular template for Visual Studio 2015&lt;/a&gt;. Note that the resulting code does not map to the docs. Adjust accordingly.</source>
          <target state="translated">&lt;code&gt;File | New Project&lt;/code&gt; 을 선호하는 경우 | 새로운 프로젝트 경험으로 &lt;strong&gt;ASP.NET Core를&lt;/strong&gt; 사용하고 있다면 &lt;a href=&quot;http://blog.stevensanderson.com/2016/10/04/angular2-template-for-visual-studio/&quot;&gt;Visual Studio 2015 용 &lt;/a&gt;&lt;em&gt;실험 &lt;/em&gt;ASP.NET Core + Angular 템플릿을 고려하십시오 . 결과 코드는 문서에 매핑되지 않습니다. 그에 따라 조정하십시오.</target>
        </trans-unit>
        <trans-unit id="40537ceb386711b8d7aebae59078f6588b332d47" translate="yes" xml:space="preserve">
          <source>If you provided &lt;code&gt;VillainsService&lt;/code&gt; in the root &lt;code&gt;AppModule&lt;/code&gt; (where you registered the &lt;code&gt;HeroesService&lt;/code&gt;), that would make the &lt;code&gt;VillainsService&lt;/code&gt; visible everywhere in the application, including the &lt;em&gt;Hero&lt;/em&gt; workflows. If you later modified the &lt;code&gt;VillainsService&lt;/code&gt;, you could break something in a hero component somewhere.</source>
          <target state="translated">당신이 제공 한 경우 &lt;code&gt;VillainsService&lt;/code&gt; 를 루트에 &lt;code&gt;AppModule&lt;/code&gt; (당신이 등록 된 곳 &lt;code&gt;HeroesService&lt;/code&gt; 을 ), 그것은 만들 것 &lt;code&gt;VillainsService&lt;/code&gt; 이 을 포함하여 응용 프로그램에서 모든 곳에서 볼 &lt;em&gt;영웅&lt;/em&gt; 워크 플로우. 나중에 &lt;code&gt;VillainsService&lt;/code&gt; 를 수정하면 영웅 구성 요소에서 무언가가 깨질 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="34e894d4b2433bfdb374e1411f1d2796623ea1fa" translate="yes" xml:space="preserve">
          <source>If you ran the app now and started typing in the &lt;em&gt;Name&lt;/em&gt; input box, adding and deleting characters, you'd see them appear and disappear from the interpolated text. At some point it might look like this:</source>
          <target state="translated">앱을 지금 실행하고 &lt;em&gt;이름&lt;/em&gt; 입력 상자에 문자를 추가하고 삭제 하기 시작 하면 보간 된 텍스트에서 해당 문자가 나타나고 사라지는 것을 볼 수 있습니다. 어느 시점에서 다음과 같이 보일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="eef190ef5d0b1e7b6837c2e3d11da6d23edc990e" translate="yes" xml:space="preserve">
          <source>If you register global service providers or share providers across multiple NgModules, use the &lt;a href=&quot;singleton-services&quot;&gt;&lt;code&gt;forRoot()&lt;/code&gt; and &lt;code&gt;forChild()&lt;/code&gt; patterns&lt;/a&gt; provided by the &lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;.</source>
          <target state="translated">여러 NgModules를 통해 글로벌 서비스 제공 또는 공유 업체를 등록하면 사용 &lt;a href=&quot;singleton-services&quot;&gt; &lt;code&gt;forRoot()&lt;/code&gt; 및 &lt;code&gt;forChild()&lt;/code&gt; 패턴&lt;/a&gt; 에 의해 제공 &lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule을&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="ddd4700cea7271c0c90205b90dda623d6197e16f" translate="yes" xml:space="preserve">
          <source>If you restore the &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt; decorator and comment out &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;&lt;/code&gt;, the app throws an exception when it cannot find the required logger at the host component level.</source>
          <target state="translated">당신이 복원하면 &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt; 장식 및 주석 &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;&lt;/code&gt; , 응용 프로그램은 호스트 구성 요소 수준에서 필요한 로거를 찾을 수없는 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="33bb5c55ad4aa9d09fe4482cd02e6d0fd59b9479" translate="yes" xml:space="preserve">
          <source>If you run other &lt;code&gt;macroTask&lt;/code&gt; such as &lt;code&gt;HTMLCanvasElement.toBlob()&lt;/code&gt;, &lt;code&gt;Unknown macroTask scheduled in fake &lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt; test&lt;/code&gt; error will be thrown.</source>
          <target state="translated">다른 실행하면 &lt;code&gt;macroTask&lt;/code&gt; 같은 &lt;code&gt;HTMLCanvasElement.toBlob()&lt;/code&gt; , &lt;code&gt;Unknown macroTask scheduled in fake &lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt; test&lt;/code&gt; 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="3f9f75108fc42c095c35521bcb513aee44b2b9d0" translate="yes" xml:space="preserve">
          <source>If you run tests in a &lt;strong&gt;non-CLI environment&lt;/strong&gt;, the tests may fail with a message like this one:</source>
          <target state="translated">&lt;strong&gt;CLI 환경&lt;/strong&gt; 이 &lt;strong&gt;아닌 환경&lt;/strong&gt; 에서 테스트를 실행하면 다음 과 같은 메시지와 함께 테스트가 실패 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d43bbf23fa3e23d5c174913c8419dd08b9a38280" translate="yes" xml:space="preserve">
          <source>If you run the app now and change every hero model property, the form might display like this:</source>
          <target state="translated">지금 앱을 실행하고 모든 영웅 모델 속성을 변경하면 양식이 다음과 같이 표시 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="65b31d00b7e322159d3096cefef0ef38c3b1e7fc" translate="yes" xml:space="preserve">
          <source>If you run the application now, you find that the button is enabled&amp;mdash;although it doesn't do anything useful yet.</source>
          <target state="translated">지금 응용 프로그램을 실행하면 단추가 활성화되어 있지만 아직 유용한 것은 없습니다.</target>
        </trans-unit>
        <trans-unit id="1afbfd71a7b0f3746a5b9d786267c74b5e8c9f70" translate="yes" xml:space="preserve">
          <source>If you tell the router to navigate to the detail component and display &quot;Magneta&quot;, you expect a hero id to appear in the browser URL like this:</source>
          <target state="translated">라우터가 세부 구성 요소를 탐색하고 &quot;Magneta&quot;를 표시하도록 지시하면 다음과 같이 브라우저 ID에 영웅 ID가 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="8dddbeadfd16ceb49ed31d2988e2ee1b9782e74c" translate="yes" xml:space="preserve">
          <source>If you think you'll reuse this debouncing logic, consider moving it to a utility function or into the &lt;code&gt;PackageSearchService&lt;/code&gt; itself.</source>
          <target state="translated">이 탈퇴 논리를 재사용 할 것이라고 생각되면이를 유틸리티 함수 또는 &lt;code&gt;PackageSearchService&lt;/code&gt; 자체 로 이동하십시오 .</target>
        </trans-unit>
        <trans-unit id="d7a151abe2fd8d0a7aaa7a6bd6a8df4082f73f7c" translate="yes" xml:space="preserve">
          <source>If you throttle your network speed so that the client-side scripts take longer to download (instructions below), you'll notice:</source>
          <target state="translated">클라이언트 쪽 스크립트를 다운로드하는 데 시간이 오래 걸리도록 네트워크 속도를 조절하면 (아래 지침 참조) 다음을 알 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="92b0949b67e72c8422501e07cc4ce8c75521a33c" translate="yes" xml:space="preserve">
          <source>If you try to alias &lt;code&gt;OldLogger&lt;/code&gt; to &lt;code&gt;NewLogger&lt;/code&gt; with &lt;code&gt;useClass&lt;/code&gt;, you end up with two different &lt;code&gt;NewLogger&lt;/code&gt; instances in your app.</source>
          <target state="translated">가상 본을하려고하면 &lt;code&gt;OldLogger&lt;/code&gt; 에 &lt;code&gt;NewLogger&lt;/code&gt; 와 &lt;code&gt;useClass&lt;/code&gt; , 당신은 두 가지로 끝날 &lt;code&gt;NewLogger&lt;/code&gt; 의 앱에 인스턴스.</target>
        </trans-unit>
        <trans-unit id="b1333d31e83b576427ff734b7c88ade3261f5d51" translate="yes" xml:space="preserve">
          <source>If you upgrade this component and use it from Angular, you can populate the component tag with contents that will then get transcluded:</source>
          <target state="translated">이 구성 요소를 업그레이드하고 Angular에서 사용하는 경우 구성 요소 태그를 내용으로 채운 다음 변환 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5229aaba988a521b48efab8fecc2aefe3f2fe23e" translate="yes" xml:space="preserve">
          <source>If you use &lt;code&gt;NgFor&lt;/code&gt; with large lists, a small change to one item, such as removing or adding an item, can trigger a cascade of DOM manipulations. For example, re-querying the server could reset a list with all new item objects, even when those items were previously displayed. In this case, Angular sees only a fresh list of new object references and has no choice but to replace the old DOM elements with all new DOM elements.</source>
          <target state="translated">큰 목록으로 &lt;code&gt;NgFor&lt;/code&gt; 를 사용 하는 경우 항목 제거 또는 추가와 같이 하나의 항목을 조금만 변경하면 일련의 DOM 조작이 트리거 될 수 있습니다. 예를 들어, 서버를 다시 쿼리하면 해당 항목이 이전에 표시된 경우에도 모든 새 항목 개체로 목록을 재설정 할 수 있습니다. 이 경우 Angular는 새로운 객체 참조의 새로운 목록 만보고 이전 DOM 요소를 모든 새 DOM 요소로 대체 ​​할 수밖에 없습니다.</target>
        </trans-unit>
        <trans-unit id="a75130a39257f6837aa70edb1e7ee3064bb9921f" translate="yes" xml:space="preserve">
          <source>If you use dynamic values to generate the link, you can pass an array of path segments, followed by the params for each segment.</source>
          <target state="translated">동적 값을 사용하여 링크를 생성하는 경우 경로 세그먼트 배열을 전달한 다음 각 세그먼트에 대한 매개 변수를 전달할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="95db25e1e7afc248a2cd0fe9b287c943fda5d02b" translate="yes" xml:space="preserve">
          <source>If you use the &lt;a href=&quot;cli&quot;&gt;Angular CLI&lt;/a&gt; to generate an app, the default &lt;code&gt;AppModule&lt;/code&gt; is as follows:</source>
          <target state="translated">당신이 사용하는 경우 &lt;a href=&quot;cli&quot;&gt;각도 CLI를&lt;/a&gt; 응용 프로그램을 생성하는 기본 &lt;code&gt;AppModule&lt;/code&gt; 은 같은 다음입니다 :</target>
        </trans-unit>
        <trans-unit id="a6967c4ab3b314fa46aff194dc20ed6a9dd2b60b" translate="yes" xml:space="preserve">
          <source>If you use the &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()/&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;()&lt;/code&gt; helper function to run unit tests (for details, read the &lt;a href=&quot;testing#async-test-with-fakeasync&quot;&gt;Testing guide&lt;/a&gt;), you need to import &lt;code&gt;zone.js/dist/zone-testing&lt;/code&gt; in your test setup file.</source>
          <target state="translated">당신이 사용하는 경우 &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()/&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;()&lt;/code&gt; (자세한 내용은 읽기 단위 테스트를 실행하는 도우미 함수를 &lt;a href=&quot;testing#async-test-with-fakeasync&quot;&gt;테스트 가이드&lt;/a&gt; ), 당신은 수입에 필요 &lt;code&gt;zone.js/dist/zone-testing&lt;/code&gt; 테스트 설치 파일에.</target>
        </trans-unit>
        <trans-unit id="b72f1ab9aecc24257c6414e938470c94360b2550" translate="yes" xml:space="preserve">
          <source>If you use the Angular CLI, configure this flag in &lt;code&gt;src/test.ts&lt;/code&gt;.</source>
          <target state="translated">Angular CLI를 사용하는 경우 &lt;code&gt;src/test.ts&lt;/code&gt; 에서이 플래그를 구성하십시오 .</target>
        </trans-unit>
        <trans-unit id="6d271b502194e43198b4eb10238cbab362121ae6" translate="yes" xml:space="preserve">
          <source>If you use the JIT compiler, specify the warning level in the compiler config at bootstrap by adding the 'MissingTranslationStrategy' property. The example below shows how to set the warning level to error.</source>
          <target state="translated">JIT 컴파일러를 사용하는 경우 부트 스트랩에서 'MissingTranslationStrategy'특성을 추가하여 컴파일러 구성에서 경고 레벨을 지정하십시오. 아래 예는 경고 수준을 오류로 설정하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="ce978a5f13cee676ff853adc3785a5db0dc00166" translate="yes" xml:space="preserve">
          <source>If you use the following deprecated i18n pipes: &lt;a href=&quot;../api/common/deprecateddatepipe&quot;&gt;date&lt;/a&gt;, &lt;a href=&quot;../api/common/deprecatedcurrencypipe&quot;&gt;currency&lt;/a&gt;, &lt;a href=&quot;../api/common/deprecateddecimalpipe&quot;&gt;decimal&lt;/a&gt;, &lt;a href=&quot;../api/common/deprecatedpercentpipe&quot;&gt;percent&lt;/a&gt;</source>
          <target state="translated">더 이상 사용되지 않는 i18n 파이프를 사용하는 경우 : &lt;a href=&quot;../api/common/deprecateddatepipe&quot;&gt;date&lt;/a&gt; , &lt;a href=&quot;../api/common/deprecatedcurrencypipe&quot;&gt;currency&lt;/a&gt; , &lt;a href=&quot;../api/common/deprecateddecimalpipe&quot;&gt;decimal&lt;/a&gt; , &lt;a href=&quot;../api/common/deprecatedpercentpipe&quot;&gt;percent&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c4bd37b0cb03c780077913bd95b8118fa17a9f1d" translate="yes" xml:space="preserve">
          <source>If you want &lt;code&gt;ngc&lt;/code&gt; to report syntax errors immediately rather than produce a &lt;code&gt;.metadata.json&lt;/code&gt; file with errors, set the &lt;code&gt;strictMetadataEmit&lt;/code&gt; option in the TypeScript configuration file, &lt;code&gt;tsconfig.json&lt;/code&gt;.</source>
          <target state="translated">당신이 원하는 경우 &lt;code&gt;ngc&lt;/code&gt; 보고서 구문 오류가 바로이 아니라 생산보다에 &lt;code&gt;.metadata.json&lt;/code&gt; 에 설정된 오류가있는 파일, &lt;code&gt;strictMetadataEmit&lt;/code&gt; 의 타이프 스크립트 구성 파일 옵션, &lt;code&gt;tsconfig.json&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="9181cff9d2f0ac3faceb9204a24748172c73f1ab" translate="yes" xml:space="preserve">
          <source>If you want a particular piece of code to trigger change detection in the AngularJS part of the app, you need to wrap it in &lt;a href=&quot;https://docs.angularjs.org/api/ng/type/%24rootScope.Scope#%24apply&quot;&gt;scope.$apply()&lt;/a&gt;. Similarly, for triggering change detection in Angular you would use &lt;a href=&quot;../api/core/ngzone#run&quot;&gt;ngZone.run()&lt;/a&gt;.</source>
          <target state="translated">앱의 AngularJS 부분에서 특정 코드 조각이 변경 감지를 트리거하도록하려면 &lt;a href=&quot;https://docs.angularjs.org/api/ng/type/%24rootScope.Scope#%24apply&quot;&gt;scope. $ apply ()&lt;/a&gt; 로 랩핑해야합니다 . 마찬가지로 Angular에서 변경 감지를 트리거하려면 &lt;a href=&quot;../api/core/ngzone#run&quot;&gt;ngZone.run ()을&lt;/a&gt; 사용 하십시오 .</target>
        </trans-unit>
        <trans-unit id="2c3fae0cd6000e2662a9b617f542c44356a243f5" translate="yes" xml:space="preserve">
          <source>If you want changes to persist, you must write them back to the server.</source>
          <target state="translated">변경 사항을 유지하려면 서버에 다시 써야합니다.</target>
        </trans-unit>
        <trans-unit id="52bcde3eec9eaea3236dc449439b8e942dbe703e" translate="yes" xml:space="preserve">
          <source>If you want some injectables to be shared among all downgraded modules, you can provide them as &lt;code&gt;&lt;a href=&quot;../../core/staticprovider&quot;&gt;StaticProvider&lt;/a&gt;&lt;/code&gt;s, when creating the &lt;code&gt;&lt;a href=&quot;../../core/platformref&quot;&gt;PlatformRef&lt;/a&gt;&lt;/code&gt; (e.g. via &lt;code&gt;&lt;a href=&quot;../../platform-browser/platformbrowser&quot;&gt;platformBrowser&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../../platform-browser-dynamic/platformbrowserdynamic&quot;&gt;platformBrowserDynamic&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">다운 그레이드 된 모든 모듈간에 일부 &lt;code&gt;&lt;a href=&quot;../../core/staticprovider&quot;&gt;StaticProvider&lt;/a&gt;&lt;/code&gt; 공유 하려면 &lt;code&gt;&lt;a href=&quot;../../core/platformref&quot;&gt;PlatformRef&lt;/a&gt;&lt;/code&gt; 를 작성할 때 (예 : &lt;code&gt;&lt;a href=&quot;../../platform-browser/platformbrowser&quot;&gt;platformBrowser&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;../../platform-browser-dynamic/platformbrowserdynamic&quot;&gt;platformBrowserDynamic&lt;/a&gt;&lt;/code&gt; 을 통해) 정적 제공자 로 제공 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="05f65a50533a43590941f359728f24c16a80ebbd" translate="yes" xml:space="preserve">
          <source>If you want to create code-coverage reports every time you test, you can set the following option in the CLI configuration file, &lt;code&gt;angular.json&lt;/code&gt;:</source>
          <target state="translated">테스트 할 때마다 코드 적용 보고서를 작성하려는 경우 CLI 구성 파일 &lt;code&gt;angular.json&lt;/code&gt; 에서 다음 옵션을 설정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="7751b871f96409ec0fd06919c70ee1e168709cf2" translate="yes" xml:space="preserve">
          <source>If you want to execute something when the app is stable, you have to wait for the application to be stable before starting your polling process.</source>
          <target state="translated">앱이 안정적 일 때 무언가를 실행하려면 폴링 프로세스를 시작하기 전에 애플리케이션이 안정적 일 때까지 기다려야합니다.</target>
        </trans-unit>
        <trans-unit id="72f364ed3fa3f7c00f99fac9b35717046eda7479" translate="yes" xml:space="preserve">
          <source>If you want to import locale data for other languages, you can do it manually:</source>
          <target state="translated">다른 언어의 로캘 데이터를 가져 오려면 수동으로 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b1c4888fd74929044c99840ccfb42fc5c433838a" translate="yes" xml:space="preserve">
          <source>If you want to preload a module &lt;em&gt;and&lt;/em&gt; guard against unauthorized access, drop the &lt;code&gt;&lt;a href=&quot;../api/router/route#canLoad&quot;&gt;canLoad&lt;/a&gt;()&lt;/code&gt; guard method and rely on the &lt;a href=&quot;router#can-activate-guard&quot;&gt;canActivate()&lt;/a&gt; guard alone.</source>
          <target state="translated">당신은 모듈 미리로드하려는 경우 &lt;em&gt;와&lt;/em&gt; 1, 인증되지 않은 액세스로부터 보호 드롭 &lt;code&gt;&lt;a href=&quot;../api/router/route#canLoad&quot;&gt;canLoad&lt;/a&gt;()&lt;/code&gt; 보호 방법과 의지 &lt;a href=&quot;router#can-activate-guard&quot;&gt;canActivate ()&lt;/a&gt; 혼자 가드.</target>
        </trans-unit>
        <trans-unit id="e574770511b728920629db82475c655722befaa3" translate="yes" xml:space="preserve">
          <source>If you want to produce a progressive web app and are using &lt;a href=&quot;https://developers.google.com/web/tools/lighthouse/&quot;&gt;Lighthouse&lt;/a&gt; to grade the project, add the following &lt;code&gt;browserslist&lt;/code&gt; entry to your &lt;code&gt;package.json&lt;/code&gt; file, in order to eliminate the &lt;a href=&quot;https://developers.google.com/web/tools/lighthouse/audits/old-flexbox&quot;&gt;old flexbox&lt;/a&gt; prefixes:</source>
          <target state="translated">프로그레시브 웹 앱을 생성하고 &lt;a href=&quot;https://developers.google.com/web/tools/lighthouse/&quot;&gt;Lighthouse&lt;/a&gt; 를 사용 하여 프로젝트를 등급 화하려는 경우 &lt;a href=&quot;https://developers.google.com/web/tools/lighthouse/audits/old-flexbox&quot;&gt;이전 flexbox 접&lt;/a&gt; 두부 를 제거하기 위해 &lt;code&gt;package.json&lt;/code&gt; 파일에 다음 &lt;code&gt;browserslist&lt;/code&gt; 항목을 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="9654c2a4c45b0218af8cbaae154038e0b00ad445" translate="yes" xml:space="preserve">
          <source>If you want to run ES5 code during development, you could disable differential loading completely. To maintain the benefits of differential loading, however, a better option is to define multiple configurations for &lt;code&gt;ng serve&lt;/code&gt;, &lt;code&gt;ng e2e&lt;/code&gt;, and &lt;code&gt;ng test&lt;/code&gt;.</source>
          <target state="translated">개발 중에 ES5 코드를 실행하려면 차등로드를 완전히 비활성화 할 수 있습니다. 그러나 차등 로딩의 이점을 유지하기 위해 더 나은 옵션은 &lt;code&gt;ng serve&lt;/code&gt; , &lt;code&gt;ng e2e&lt;/code&gt; 및 &lt;code&gt;ng test&lt;/code&gt; 에 대한 여러 구성을 정의하는 것 입니다.</target>
        </trans-unit>
        <trans-unit id="5d7009f42e7627d060101333c56524a2c640bb2d" translate="yes" xml:space="preserve">
          <source>If you want to support such a case, you need to define the &lt;code&gt;macroTask&lt;/code&gt; you want to support in &lt;code&gt;beforeEach()&lt;/code&gt;. For example:</source>
          <target state="translated">이러한 경우 를 지원하려면 &lt;code&gt;beforeEach()&lt;/code&gt; 에서 지원하려는 &lt;code&gt;macroTask&lt;/code&gt; 를 정의해야합니다 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="6c98ab8bb06c1699ee5d9fd496aa7660ad732c8b" translate="yes" xml:space="preserve">
          <source>If you want to use this component from AngularJS, you need to &lt;em&gt;downgrade&lt;/em&gt; it using the &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgradecomponent&quot;&gt;downgradeComponent&lt;/a&gt;()&lt;/code&gt; method. The result is an AngularJS &lt;em&gt;directive&lt;/em&gt;, which you can then register in the AngularJS module:</source>
          <target state="translated">AngularJS에서이 컴포넌트를 사용하려면 &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgradecomponent&quot;&gt;downgradeComponent&lt;/a&gt;()&lt;/code&gt; () 메소드를 사용하여 다운&lt;em&gt; 그레이드&lt;/em&gt; 해야합니다 . 결과는 AngularJS &lt;em&gt;지시문&lt;/em&gt; 이며, AngularJS 모듈에 등록 할 수 있습니다.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="4fb183e6a6ca4b3daf2ebb1dcb39b4bdc36e09a2" translate="yes" xml:space="preserve">
          <source>If you wanted to, you could redefine the &lt;code&gt;AppComponent&lt;/code&gt; template with &lt;em&gt;Crisis Center&lt;/em&gt; routes exclusively:</source>
          <target state="translated">원하는 경우 &lt;em&gt;Crisis Center&lt;/em&gt; 경로를 사용 하여 &lt;code&gt;AppComponent&lt;/code&gt; 템플릿을 독점적으로 재정의 할 수 있습니다 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="1a47d1cb386ad250a0bc5d99819cbf7f3ff10e68" translate="yes" xml:space="preserve">
          <source>If you were translating to other languages, you would repeat these steps for each target language.</source>
          <target state="translated">다른 언어로 번역하는 경우 각 대상 언어에 대해이 단계를 반복하십시오.</target>
        </trans-unit>
        <trans-unit id="9374a8c08fe1c474c361e4aaa7e0f9b479d03bd7" translate="yes" xml:space="preserve">
          <source>If you work behind a corporate proxy, the backend cannot directly proxy calls to any URL outside your local network. In this case, you can configure the backend proxy to redirect calls through your corporate proxy using an agent:</source>
          <target state="translated">회사 프록시 뒤에서 작업하는 경우 백엔드는 로컬 네트워크 외부의 URL에 대한 호출을 직접 프록시 할 수 없습니다. 이 경우 에이전트를 사용하여 회사 프록시를 통해 통화를 리디렉션하도록 백엔드 프록시를 구성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="12d0a113abd4c3fccdbb49cb154c353de7ca8ffc" translate="yes" xml:space="preserve">
          <source>If you wrote something like this:</source>
          <target state="translated">다음과 같이 썼다면 :</target>
        </trans-unit>
        <trans-unit id="21014f48c5ba788700f412d0e8fe50ad6d65a568" translate="yes" xml:space="preserve">
          <source>If you'd like to use something other than &lt;code&gt;{{&lt;/code&gt; and &lt;code&gt;}}&lt;/code&gt;, you can configure the interpolation delimiter via the &lt;a href=&quot;../api/core/component#interpolation&quot;&gt;interpolation&lt;/a&gt; option in the &lt;code&gt;&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; metadata.</source>
          <target state="translated">&lt;code&gt;{{&lt;/code&gt; and &lt;code&gt;}}&lt;/code&gt; 이외의 다른 것을 사용 하려면 &lt;code&gt;&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; 메타 데이터 의 &lt;a href=&quot;../api/core/component#interpolation&quot;&gt;보간&lt;/a&gt; 옵션을 통해 보간 분리 문자를 구성 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="bf74ecdbbfc67de6df0331823b22e879c6590cb2" translate="yes" xml:space="preserve">
          <source>If you're building with the CLI, you can write style files in &lt;a href=&quot;http://sass-lang.com/&quot;&gt;sass&lt;/a&gt;, &lt;a href=&quot;http://lesscss.org/&quot;&gt;less&lt;/a&gt;, or &lt;a href=&quot;http://stylus-lang.com/&quot;&gt;stylus&lt;/a&gt; and specify those files in the &lt;code&gt;@&lt;a href=&quot;../api/core/component#styleUrls&quot;&gt;Component.styleUrls&lt;/a&gt;&lt;/code&gt; metadata with the appropriate extensions (&lt;code&gt;.scss&lt;/code&gt;, &lt;code&gt;.less&lt;/code&gt;, &lt;code&gt;.styl&lt;/code&gt;) as in the following example:</source>
          <target state="translated">CLI로 빌드하는 경우 스타일 파일을 &lt;a href=&quot;http://sass-lang.com/&quot;&gt;sass&lt;/a&gt; , &lt;a href=&quot;http://lesscss.org/&quot;&gt;less&lt;/a&gt; 또는 &lt;a href=&quot;http://stylus-lang.com/&quot;&gt;스타일러스로 작성&lt;/a&gt; 하고 다음 과 같이 적절한 확장자 ( &lt;code&gt;.scss&lt;/code&gt; , &lt;code&gt;.less&lt;/code&gt; , &lt;code&gt;.styl&lt;/code&gt; )를 사용 하여 &lt;code&gt;@&lt;a href=&quot;../api/core/component#styleUrls&quot;&gt;Component.styleUrls&lt;/a&gt;&lt;/code&gt; 메타 데이터 에 해당 파일을 지정할 수 있습니다. 예:</target>
        </trans-unit>
        <trans-unit id="c72a02ff92e827a8fbee6caf4e7a5b90fac5a766" translate="yes" xml:space="preserve">
          <source>If you're deploying to a self-managed server or there's no builder for your favorite cloud platform, you can either create a builder that allows you to use the &lt;code&gt;ng deploy&lt;/code&gt; command, or read through this guide to learn how to manually deploy your app.</source>
          <target state="translated">자체 관리 서버에 배포하거나 즐겨 사용하는 클라우드 플랫폼 용 빌더가없는 경우 &lt;code&gt;ng deploy&lt;/code&gt; 명령 을 사용할 수있는 빌더를 작성 하거나이 안내서를 읽고 수동으로 앱을 배치하는 방법을 배울 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="6ef5fa39f7f818bc7d60070f619114bc8c792d6e" translate="yes" xml:space="preserve">
          <source>If you're following along with these code snippets, note that you must import the RxJS observable and operator symbols that appear in those snippets. These &lt;code&gt;ConfigService&lt;/code&gt; imports are typical.</source>
          <target state="translated">이러한 코드 스 니펫을 따르는 경우 해당 스 니펫에 나타나는 RxJS 관찰 가능 및 연산자 기호를 가져와야합니다. 이러한 &lt;code&gt;ConfigService&lt;/code&gt; 가져 오기는 일반적입니다.</target>
        </trans-unit>
        <trans-unit id="5621695378eed2b9f2b258f1815ee171408f7b7e" translate="yes" xml:space="preserve">
          <source>If you're just reading this tutorial to learn about &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt;, you can &lt;a href=&quot;toh-pt6#import-heroes&quot;&gt;skip over&lt;/a&gt; this step. If you're coding along with this tutorial, stay here and add the In-memory Web API now.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; 에 대해 배우기 위해이 학습서를 읽고 있다면 이 단계를 &lt;a href=&quot;toh-pt6#import-heroes&quot;&gt;건너 뛸&lt;/a&gt; 수 있습니다 . 이 튜토리얼과 함께 코딩하는 경우 여기에 머무르고 인 메모리 웹 API를 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="8c2b83a475d5fdd415759000ce764903884f7b3b" translate="yes" xml:space="preserve">
          <source>If you're new to Angular, see the &lt;a href=&quot;https://angular.io/start&quot;&gt;&lt;strong&gt;Getting Started tutorial.&lt;/strong&gt;&lt;/a&gt; The Getting Started tutorial covers the same major topics as this Tour of Heroes&amp;mdash;components, template syntax, routing, services, and accessing data via HTTP&amp;mdash;in a condensed format, following the most current best practices.</source>
          <target state="translated">Angular를 &lt;a href=&quot;https://angular.io/start&quot;&gt;&lt;strong&gt;처음 사용하는 경우 시작하기 자습서를&lt;/strong&gt;&lt;/a&gt; 참조하십시오 &lt;strong&gt;. &lt;/strong&gt;시작하기 자습서는 최신 모범 사례에 따라 압축 된 형식으로 구성 요소, 템플릿 구문, 라우팅, 서비스 및 HTTP를 통한 데이터 액세스와 같은이 Tour of Heroes와 동일한 주요 주제를 다룹니다.</target>
        </trans-unit>
        <trans-unit id="67ea25a303d22f5bebe608e745f2d7c92d9c27bb" translate="yes" xml:space="preserve">
          <source>If you're new to forms, start by reviewing the &lt;a href=&quot;forms&quot;&gt;Forms&lt;/a&gt; and &lt;a href=&quot;reactive-forms&quot;&gt;Reactive Forms&lt;/a&gt; guides.</source>
          <target state="translated">양식을 처음 사용하는 경우 먼저 &lt;a href=&quot;forms&quot;&gt;양식&lt;/a&gt; 및 &lt;a href=&quot;reactive-forms&quot;&gt;반응성 양식&lt;/a&gt; 안내서를 검토하십시오 .</target>
        </trans-unit>
        <trans-unit id="0fc7d26ca33d3f9ccba91fcbfc3ae3f0632834a5" translate="yes" xml:space="preserve">
          <source>If you're testing in an incognito window, open a second blank tab. This will keep the incognito and the cache state alive during your test.</source>
          <target state="translated">시크릿 창에서 테스트하는 경우 두 번째 빈 탭을 엽니 다. 테스트 중에 시크릿과 캐시 상태가 유지됩니다.</target>
        </trans-unit>
        <trans-unit id="e626c7acd05b782e31724065bc7d5d37adec57da" translate="yes" xml:space="preserve">
          <source>If you're using &lt;code&gt;&lt;a href=&quot;pathlocationstrategy&quot;&gt;PathLocationStrategy&lt;/a&gt;&lt;/code&gt;, you must provide a &lt;a href=&quot;app_base_href&quot;&gt;&lt;code&gt;APP_BASE_HREF&lt;/code&gt;&lt;/a&gt; or add a base element to the document. This URL prefix that will be preserved when generating and recognizing URLs.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;pathlocationstrategy&quot;&gt;PathLocationStrategy&lt;/a&gt;&lt;/code&gt; 를 사용 하는 경우 &lt;a href=&quot;app_base_href&quot;&gt; &lt;code&gt;APP_BASE_HREF&lt;/code&gt; &lt;/a&gt; 를 제공 하거나 문서에 기본 요소를 추가 해야합니다 . 이 URL 접두사는 URL을 생성하고 인식 할 때 유지됩니다.</target>
        </trans-unit>
        <trans-unit id="fa080613189cdefb468866b8c597532b9871a918" translate="yes" xml:space="preserve">
          <source>If you've never published a package in npm before, you must create a user account. Read more in &lt;a href=&quot;https://docs.npmjs.com/getting-started/publishing-npm-packages&quot;&gt;Publishing npm Packages&lt;/a&gt;.</source>
          <target state="translated">npm에 패키지를 게시 한 적이 없다면 사용자 계정을 만들어야합니다. &lt;a href=&quot;https://docs.npmjs.com/getting-started/publishing-npm-packages&quot;&gt;npm 패키지 게시&lt;/a&gt; 에서 자세히 알아보십시오 .</target>
        </trans-unit>
        <trans-unit id="7b10a12a2f9c3567ac4e099dd03881046723129f" translate="yes" xml:space="preserve">
          <source>If your app had many feature areas, the app component trees might look like this:</source>
          <target state="translated">앱에 많은 기능 영역이있는 경우 앱 구성 요소 트리는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="c4813331be931a7f2a2b0d56270ac5204b124311" translate="yes" xml:space="preserve">
          <source>If your app happens to bootstrap or dynamically load a component &lt;em&gt;by type&lt;/em&gt; in some other manner, you must add it to &lt;code&gt;entryComponents&lt;/code&gt; explicitly.</source>
          <target state="translated">앱이 다른 방식으로 &lt;em&gt;유형별&lt;/em&gt; 로 구성 요소를 부트 스트랩하거나 동적으로로드하는 경우 명시 적으로 &lt;code&gt;entryComponents&lt;/code&gt; 에 추가해야합니다 .</target>
        </trans-unit>
        <trans-unit id="9aae5606fbeadd60c35706fd07fdcf7e6df68610" translate="yes" xml:space="preserve">
          <source>If your app uses routing, you need to teach the server to always return &lt;code&gt;index.html&lt;/code&gt; when the user asks for an HTML page for reasons explained in the &lt;a href=&quot;deployment#fallback&quot;&gt;Deployment&lt;/a&gt; guide.</source>
          <target state="translated">앱에서 라우팅을 사용하는 경우 사용자가 &lt;a href=&quot;deployment#fallback&quot;&gt;배포&lt;/a&gt; 가이드에 설명 된 이유로 HTML 페이지를 요청할 때 서버가 항상 &lt;code&gt;index.html&lt;/code&gt; 을 반환하도록 지시해야합니다 .</target>
        </trans-unit>
        <trans-unit id="5042fa1f08d3dcd4e1ea2367cfbbc1aaa6404362" translate="yes" xml:space="preserve">
          <source>If your backend service uses different names for the XSRF token cookie or header, use &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientxsrfmodule#withOptions&quot;&gt;HttpClientXsrfModule.withOptions()&lt;/a&gt;&lt;/code&gt; to override the defaults.</source>
          <target state="translated">백엔드 서비스가 XSRF 토큰 쿠키 또는 헤더에 다른 이름을 사용하는 경우 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientxsrfmodule#withOptions&quot;&gt;HttpClientXsrfModule.withOptions()&lt;/a&gt;&lt;/code&gt; 를 사용 하여 기본값을 대체하십시오.</target>
        </trans-unit>
        <trans-unit id="95cc76e94f96c5568597c8ef92eb23b8f2b51d0e" translate="yes" xml:space="preserve">
          <source>If your builder calls another builder, it may need to read a passed target string. You can parse this string into an object by using the &lt;code&gt;targetFromTargetString()&lt;/code&gt; utility function from &lt;code&gt;@angular-devkit/architect&lt;/code&gt;.</source>
          <target state="translated">빌더가 다른 빌더를 호출하는 경우 전달 된 대상 문자열을 읽어야합니다. &lt;code&gt;@angular-devkit/architect&lt;/code&gt; 의 &lt;code&gt;targetFromTargetString()&lt;/code&gt; 유틸리티 함수를 사용하여이 문자열을 객체로 구문 분석 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="875f3a37dffcb0d70c53bfe9801cfac977a1c2c0" translate="yes" xml:space="preserve">
          <source>If your builder returns an Observable, it should clean up in the teardown logic of that Observable.</source>
          <target state="translated">빌더가 Observable을 리턴하면 해당 Observable의 분류 로직에서 정리해야합니다.</target>
        </trans-unit>
        <trans-unit id="333ae1afb3d296c7877eaffccff73532b882ea8a" translate="yes" xml:space="preserve">
          <source>If your library code or its templates depend on other libraries (such a Angular Material, for instance), you must configure your library with those dependencies.</source>
          <target state="translated">라이브러리 코드 또는 템플릿이 다른 라이브러리 (예 : Angular Material)에 의존하는 경우 해당 종속성으로 라이브러리를 구성해야합니다.</target>
        </trans-unit>
        <trans-unit id="bc86b4b32c1ba7ddb5fb732813d619704067dcce" translate="yes" xml:space="preserve">
          <source>If your template needs to display different text messages depending on the value of a variable, you need to translate all of those alternative text messages.</source>
          <target state="translated">변수 값에 따라 템플릿에 다른 문자 메시지가 표시되어야하는 경우 대체 문자 메시지를 모두 번역해야합니다.</target>
        </trans-unit>
        <trans-unit id="64ff3add03a839c971e70ed84614968956996987" translate="yes" xml:space="preserve">
          <source>Ignore the warnings.</source>
          <target state="translated">경고를 무시하십시오.</target>
        </trans-unit>
        <trans-unit id="b2a8f807164b329c0df9d6e96e08d4ec7fe93e8e" translate="yes" xml:space="preserve">
          <source>Ignore: do nothing.</source>
          <target state="translated">무시하십시오 : 아무것도하지 마십시오.</target>
        </trans-unit>
        <trans-unit id="852440e173c82baa5ce49593ea14c314bd9d03ea" translate="yes" xml:space="preserve">
          <source>Ignores any animations that are performed when the user first opens or navigates to this page. The filter narrows what is already there, so it assumes that any HTML elements to be animated already exist in the DOM.</source>
          <target state="translated">사용자가이 페이지를 처음 열거 나 탐색 할 때 수행되는 애니메이션을 무시합니다. 이 필터는 이미 존재하는 것을 좁히기 때문에 애니메이션을 생성 할 HTML 요소가 DOM에 이미 존재한다고 가정합니다.</target>
        </trans-unit>
        <trans-unit id="e535f7686926290a845fe4d42be0c97df203fcb9" translate="yes" xml:space="preserve">
          <source>Image compression</source>
          <target state="translated">이미지 압축</target>
        </trans-unit>
        <trans-unit id="cd2057f0131f9a4e6f1956e4114499c55873edf5" translate="yes" xml:space="preserve">
          <source>Image dimensions</source>
          <target state="translated">이미지 치수</target>
        </trans-unit>
        <trans-unit id="132d44a4489514731c7a32cfff5792dd08c9e636" translate="yes" xml:space="preserve">
          <source>Image location</source>
          <target state="translated">이미지 위치</target>
        </trans-unit>
        <trans-unit id="09e871c98fef3b901a775def173e4126aaf73b42" translate="yes" xml:space="preserve">
          <source>Images</source>
          <target state="translated">Images</target>
        </trans-unit>
        <trans-unit id="9ae8f90b310c8e0aba39397a83acf0bf54cb8fae" translate="yes" xml:space="preserve">
          <source>Images and fonts directly under the configured &lt;code&gt;outputPath&lt;/code&gt; (by default &lt;code&gt;./dist/&amp;lt;project-name&amp;gt;/&lt;/code&gt;) or &lt;code&gt;resourcesOutputPath&lt;/code&gt;. See &lt;a href=&quot;cli/build&quot;&gt;&lt;code&gt;ng build&lt;/code&gt;&lt;/a&gt; for more information about these options.</source>
          <target state="translated">직접 구성에 따라 이미지와 글꼴 &lt;code&gt;outputPath&lt;/code&gt; (기본적으로 &lt;code&gt;./dist/&amp;lt;project-name&amp;gt;/&lt;/code&gt; 또는) &lt;code&gt;resourcesOutputPath&lt;/code&gt; . 이러한 옵션에 대한 자세한 내용은 &lt;a href=&quot;cli/build&quot;&gt; &lt;code&gt;ng build&lt;/code&gt; &lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="b68d291250edab27a9181298df02309fd2e3984d" translate="yes" xml:space="preserve">
          <source>Images should be specified in an &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tag.</source>
          <target state="translated">이미지는 &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; 태그 로 지정해야합니다 .</target>
        </trans-unit>
        <trans-unit id="f197407a881860639854b84140d3e15ce892c317" translate="yes" xml:space="preserve">
          <source>Imagine an application that helps the &lt;em&gt;Hero Employment Agency&lt;/em&gt; run its business. Heroes need work and the agency finds crises for them to solve.</source>
          <target state="translated">&lt;em&gt;Hero Employment Agency&lt;/em&gt; 가 사업을 운영 하는 데 도움이되는 응용 프로그램을 상상해보십시오 . 영웅은 일이 필요하고 대행사는 해결해야 할 위기를 찾습니다.</target>
        </trans-unit>
        <trans-unit id="480c3b6df4de5ea5f608379d1979bb198fa722ac" translate="yes" xml:space="preserve">
          <source>Imagine one branch of a component hierarchy: &lt;em&gt;Alice&lt;/em&gt; -&amp;gt; &lt;em&gt;Barry&lt;/em&gt; -&amp;gt; &lt;em&gt;Carol&lt;/em&gt;. Both &lt;em&gt;Alice&lt;/em&gt; and &lt;em&gt;Barry&lt;/em&gt; implement the `Parent' class interface.</source>
          <target state="translated">컴포넌트 계층의 한 가지 분기를 상상해보십시오. &lt;em&gt;Alice-&lt;/em&gt; &amp;gt; &lt;em&gt;Barry-&lt;/em&gt; &amp;gt; &lt;em&gt;Carol&lt;/em&gt; . &lt;em&gt;Alice&lt;/em&gt; 와 &lt;em&gt;Barry&lt;/em&gt; 는 모두 부모 클래스 인터페이스를 구현합니다.</target>
        </trans-unit>
        <trans-unit id="926d786c1286080b30759a09b32fbae972285d95" translate="yes" xml:space="preserve">
          <source>Imagine that &lt;code&gt;LoggerService&lt;/code&gt; had a large API, much larger than the actual three methods and a property. You might want to shrink that API surface to just the members you actually need. In this example, the &lt;code&gt;MinimalLogger&lt;/code&gt;&lt;a href=&quot;dependency-injection-in-action#class-interface&quot;&gt;class-interface&lt;/a&gt; reduces the API to two members:</source>
          <target state="translated">&lt;code&gt;LoggerService&lt;/code&gt; 에 실제 세 가지 메소드 및 특성보다 훨씬 큰 대형 API가 있다고 가정하십시오 . 해당 API 표면을 실제로 필요한 멤버로 축소 할 수 있습니다. 이 예제에서 &lt;code&gt;MinimalLogger&lt;/code&gt; &lt;a href=&quot;dependency-injection-in-action#class-interface&quot;&gt;클래스 인터페이스&lt;/a&gt; 는 API를 두 멤버로 줄입니다.</target>
        </trans-unit>
        <trans-unit id="4a368b18b59eaf096cd5d55aaf4c6822025e3a9d" translate="yes" xml:space="preserve">
          <source>Imagine that in the child component, you had a different value, &lt;code&gt;🍁&lt;/code&gt; (maple leaf) but you wanted to use the parent's value instead. This is when you'd use &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt;:</source>
          <target state="translated">자식 구성 요소에서 다른 값인 &lt;code&gt;🍁&lt;/code&gt; (매플 리프)을 가졌지 만 대신 부모의 값을 사용하려고 한다고 상상해보십시오 . &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; 사용할 때입니다 .</target>
        </trans-unit>
        <trans-unit id="d9912f3cc2a458038df837cf86a4c8e01af50ffb" translate="yes" xml:space="preserve">
          <source>Imagine the effort to disable these distractions, just to prove a point that can be made satisfactorily with a &lt;em&gt;test host&lt;/em&gt; like this one:</source>
          <target state="translated">다음과 같은 &lt;em&gt;테스트 호스트&lt;/em&gt; 로 만족스럽게 만들 수있는 포인트를 증명하기 위해 이러한 방해 요소를 비활성화하려는 노력을 상상해보십시오 .</target>
        </trans-unit>
        <trans-unit id="0dcb05aedf3662e3047235d20c9b3a53209ea247" translate="yes" xml:space="preserve">
          <source>Imagine the following malicious content.</source>
          <target state="translated">다음과 같은 악성 콘텐츠를 상상해보십시오.</target>
        </trans-unit>
        <trans-unit id="70af22099196223b8485c95684bbf8824a9afa2b" translate="yes" xml:space="preserve">
          <source>Immutability</source>
          <target state="translated">Immutability</target>
        </trans-unit>
        <trans-unit id="6e5a32a1bd41d5b21404f176ae361427aff05142" translate="yes" xml:space="preserve">
          <source>Immutable</source>
          <target state="translated">Immutable</target>
        </trans-unit>
        <trans-unit id="569ee13fa32b96c143a875b5c890f64353650f46" translate="yes" xml:space="preserve">
          <source>Implement lifecycle hook interfaces</source>
          <target state="translated">수명주기 후크 인터페이스 구현</target>
        </trans-unit>
        <trans-unit id="e3166f82b7179b9d5e343a6c1eee18f1c699887d" translate="yes" xml:space="preserve">
          <source>Implement this callback to add a class to an element in the DOM.</source>
          <target state="translated">이 콜백을 구현하여 DOM의 요소에 클래스를 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="577c7009c5183eabdac20b5ae98cf2ede05d4833" translate="yes" xml:space="preserve">
          <source>Implement this callback to add a comment to the DOM of the host element.</source>
          <target state="translated">이 콜백을 구현하여 호스트 요소의 DOM에 주석을 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="03cf7ca65ecc8c31118b1e6114f8595bc1760a21" translate="yes" xml:space="preserve">
          <source>Implement this callback to add text to the DOM of the host element.</source>
          <target state="translated">이 콜백을 구현하여 호스트 요소의 DOM에 텍스트를 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="f5bc42dfa7008f7e03d763d440ce48675c0a4f5b" translate="yes" xml:space="preserve">
          <source>Implement this callback to create an instance of the host element.</source>
          <target state="translated">이 콜백을 구현하여 호스트 요소의 인스턴스를 만듭니다.</target>
        </trans-unit>
        <trans-unit id="a0d9d7c045b4660c412fe767ad1945d44a190961" translate="yes" xml:space="preserve">
          <source>Implement this callback to destroy the renderer or the host element.</source>
          <target state="translated">이 콜백을 구현하여 렌더러 또는 호스트 요소를 제거하십시오.</target>
        </trans-unit>
        <trans-unit id="1c9baa60b18459f8baab069c307bd286cedb293c" translate="yes" xml:space="preserve">
          <source>Implement this callback to get the next sibling node of a given node in the host element's DOM.</source>
          <target state="translated">이 콜백을 구현하여 호스트 요소의 DOM에서 지정된 노드의 다음 형제 노드를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="fdeb7236f29bdbcca4a28a7f60641e8db151e4d5" translate="yes" xml:space="preserve">
          <source>Implement this callback to get the parent of a given node in the host element's DOM.</source>
          <target state="translated">호스트 요소의 DOM에서 주어진 노드의 부모를 얻기 위해이 콜백을 구현하십시오.</target>
        </trans-unit>
        <trans-unit id="134030fd845fadd1044c12a523dec32ffc73a9fc" translate="yes" xml:space="preserve">
          <source>Implement this callback to insert a child node at a given position in a parent node in the host element DOM.</source>
          <target state="translated">호스트 요소 DOM의 상위 노드에서 지정된 위치에 하위 노드를 삽입하려면이 콜백을 구현하십시오.</target>
        </trans-unit>
        <trans-unit id="bba6d890df9d055ea2386440926e0760d35d6b14" translate="yes" xml:space="preserve">
          <source>Implement this callback to prepare an element to be bootstrapped as a root element, and return the element instance.</source>
          <target state="translated">이 콜백을 구현하여 루트 요소로 부트 스트랩 할 요소를 준비하고 요소 인스턴스를 리턴하십시오.</target>
        </trans-unit>
        <trans-unit id="ca1ed2bafa9cae106f863767732584ec8416ebed" translate="yes" xml:space="preserve">
          <source>Implement this callback to remove a child node from the host element's DOM.</source>
          <target state="translated">호스트 요소의 DOM에서 자식 노드를 제거하려면이 콜백을 구현하십시오.</target>
        </trans-unit>
        <trans-unit id="d323d4a580fdb4dc8916989b8e38d19f0831ebb4" translate="yes" xml:space="preserve">
          <source>Implement this callback to remove a class from an element in the DOM.</source>
          <target state="translated">이 콜백을 구현하여 DOM의 요소에서 클래스를 제거하십시오.</target>
        </trans-unit>
        <trans-unit id="50a573388aabcf7019870235d46465e72add8981" translate="yes" xml:space="preserve">
          <source>Implement this callback to remove an attribute from an element in the DOM.</source>
          <target state="translated">이 콜백을 구현하여 DOM의 요소에서 속성을 제거하십시오.</target>
        </trans-unit>
        <trans-unit id="36eb90bfa5ed19d7a1a9ae6ff464b8e1d00e7822" translate="yes" xml:space="preserve">
          <source>Implement this callback to remove the value from a CSS style for an element in the DOM.</source>
          <target state="translated">이 콜백을 구현하여 DOM의 요소에 대한 CSS 스타일에서 값을 제거하십시오.</target>
        </trans-unit>
        <trans-unit id="555fb860b7a59c008619fb082a93ee194e1886c7" translate="yes" xml:space="preserve">
          <source>Implement this callback to set a CSS style for an element in the DOM.</source>
          <target state="translated">이 콜백을 구현하여 DOM의 요소에 CSS 스타일을 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="7b1aa6bced0b52983533c898e87d4ea15fb2264a" translate="yes" xml:space="preserve">
          <source>Implement this callback to set an attribute value for an element in the DOM.</source>
          <target state="translated">이 콜백을 구현하여 DOM의 요소에 대한 속성 값을 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="e0fc11b0c038ee4ed0794e274a3324cb43d219c5" translate="yes" xml:space="preserve">
          <source>Implement this callback to set the value of a node in the host element.</source>
          <target state="translated">이 콜백을 구현하여 호스트 요소의 노드 값을 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="bb15ad08125f75b3cf386d55995af65d420d6eee" translate="yes" xml:space="preserve">
          <source>Implement this callback to set the value of a property of an element in the DOM.</source>
          <target state="translated">이 콜백을 구현하여 DOM에서 요소의 속성 값을 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="59c3759a3daa56cba4ea89b70baf1e4097d64636" translate="yes" xml:space="preserve">
          <source>Implement this callback to start an event listener.</source>
          <target state="translated">이 콜백을 구현하여 이벤트 리스너를 시작하십시오.</target>
        </trans-unit>
        <trans-unit id="4a6751f61ff0fba38731f86b6104c29d3704780e" translate="yes" xml:space="preserve">
          <source>Implement this interface to create a custom form control directive that integrates with Angular forms.</source>
          <target state="translated">Angular 양식과 통합되는 사용자 정의 양식 제어 지시문을 작성하려면이 인터페이스를 구현하십시오.</target>
        </trans-unit>
        <trans-unit id="21c4d35ad75af1e5854d9c5288b3b50d18350a45" translate="yes" xml:space="preserve">
          <source>Implementing Custom Async Validator</source>
          <target state="translated">사용자 정의 비동기 검사기 구현</target>
        </trans-unit>
        <trans-unit id="28243ccf2d1e04cdb0f4eea07160bd6fba54a67c" translate="yes" xml:space="preserve">
          <source>Implements Angular's core functionality, low-level services, and utilities.</source>
          <target state="translated">Angular의 핵심 기능, 저수준 서비스 및 유틸리티를 구현합니다.</target>
        </trans-unit>
        <trans-unit id="1740cef38e5186da8de62ac9e31ab0bf9006ec4e" translate="yes" xml:space="preserve">
          <source>Implements Angular's custom-element API, which enables you to package components as &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements&quot;&gt;custom elements&lt;/a&gt;.</source>
          <target state="translated">Angular의 커스텀 엘리먼트 API를 구현하여 컴포넌트를 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements&quot;&gt;커스텀 엘리먼트&lt;/a&gt; 로 패키징 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="18cc1a97ca823e213e9814192dbdd3119bf93a10" translate="yes" xml:space="preserve">
          <source>Implements a domain-specific language (DSL) for defining web animation sequences for HTML elements as multiple transformations over time.</source>
          <target state="translated">HTML 요소에 대한 웹 애니메이션 시퀀스를 시간에 따른 다중 변환으로 정의하기위한 DSL (Domain-Specific Language)을 구현합니다.</target>
        </trans-unit>
        <trans-unit id="975968eede10c072691f7af0d54dd2799c41ab94" translate="yes" xml:space="preserve">
          <source>Implements a service worker for Angular apps. Adding a service worker to an Angular app is one of the steps for turning it into a Progressive Web App (also known as a PWA).</source>
          <target state="translated">Angular 앱의 서비스 워커를 구현합니다. 서비스 워커를 Angular 앱에 추가하는 것은이를 프로그레시브 웹 앱 (PWA라고도 함)으로 전환하는 단계 중 하나입니다.</target>
        </trans-unit>
        <trans-unit id="f7bebe0232fe9f34fb464a7863f9d6804c6723a6" translate="yes" xml:space="preserve">
          <source>Implements a set of directives and providers to communicate with native DOM elements when building forms to capture user input.</source>
          <target state="translated">사용자 입력을 캡처하기 위해 양식을 작성할 때 기본 DOM 요소와 통신하도록 지시문 및 제공자 세트를 구현합니다.</target>
        </trans-unit>
        <trans-unit id="4b32fab568e6f74138e5d102955133034be90ff5" translate="yes" xml:space="preserve">
          <source>Implements an &lt;code&gt;ngDoCheck()&lt;/code&gt; method with custom change detection. See how often Angular calls this hook and watch it post changes to a log.</source>
          <target state="translated">사용자 지정 변경 감지를 사용 하여 &lt;code&gt;ngDoCheck()&lt;/code&gt; 메소드를 구현합니다 . Angular가이 후크를 호출하는 빈도를 확인하고 로그 변경 사항을 게시하는지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="5bd7689d46e5b12bf1f904331f09df5b9e867cb3" translate="yes" xml:space="preserve">
          <source>Implements an HTTP client API for Angular apps that relies on the &lt;code&gt;XMLHttpRequest&lt;/code&gt; interface exposed by browsers.</source>
          <target state="translated">브라우저가 공개 하는 &lt;code&gt;XMLHttpRequest&lt;/code&gt; 인터페이스 를 사용하는 Angular 앱용 HTTP 클라이언트 API를 구현 합니다.</target>
        </trans-unit>
        <trans-unit id="0f6cbc91e3625eeea332217fda3f6cdf01f146c8" translate="yes" xml:space="preserve">
          <source>Implements an iterable interface, therefore it can be used in both ES6 javascript &lt;code&gt;for (var i of items)&lt;/code&gt; loops as well as in Angular templates with &lt;code&gt;*&lt;a href=&quot;../common/ngforof&quot;&gt;ngFor&lt;/a&gt;=&quot;let i of myList&quot;&lt;/code&gt;.</source>
          <target state="translated">반복 가능한 인터페이스를 구현하므로 ES6 javascript &lt;code&gt;for (var i of items)&lt;/code&gt; 루프와 &lt;code&gt;*&lt;a href=&quot;../common/ngforof&quot;&gt;ngFor&lt;/a&gt;=&quot;let i of myList&quot;&lt;/code&gt; 가 있는 Angular 템플릿 모두에서 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ce097c59bce28c3d2b175a67db71e336843e0494" translate="yes" xml:space="preserve">
          <source>Implements basic Angular directives and pipes, such as NgIf, NgForOf, DecimalPipe, and so on.</source>
          <target state="translated">NgIf, NgForOf, DecimalPipe 등과 같은 기본 각도 지시문 및 파이프를 구현합니다.</target>
        </trans-unit>
        <trans-unit id="d9bdfd53eb804076b673eff6ed90636bddf4f862" translate="yes" xml:space="preserve">
          <source>Implements the Angular Router service , which enables navigation from one view to the next as users perform application tasks.</source>
          <target state="translated">사용자가 응용 프로그램 작업을 수행 할 때 한보기에서 다음보기로 탐색 할 수있는 Angular Router 서비스를 구현합니다.</target>
        </trans-unit>
        <trans-unit id="a92aec084fd1d304417af86c26c892bf2549ddb2" translate="yes" xml:space="preserve">
          <source>Implements the functionality needed for a custom element.</source>
          <target state="translated">사용자 정의 요소에 필요한 기능을 구현합니다.</target>
        </trans-unit>
        <trans-unit id="26fb786f09465d1d0559a46e5842f496183733aa" translate="yes" xml:space="preserve">
          <source>Implied by promise resolution.</source>
          <target state="translated">약속 해결에 의해 암시됩니다.</target>
        </trans-unit>
        <trans-unit id="568d13bdb851bce85938a6391267ed336fc53a69" translate="yes" xml:space="preserve">
          <source>Import &lt;a href=&quot;ngmodule-faq#q-browser-vs-common-module&quot;&gt;BrowserModule&lt;/a&gt; only in the root &lt;code&gt;AppModule&lt;/code&gt;.</source>
          <target state="translated">루트 &lt;code&gt;AppModule&lt;/code&gt; 에서만 &lt;a href=&quot;ngmodule-faq#q-browser-vs-common-module&quot;&gt;BrowserModule을&lt;/a&gt; 가져 옵니다 .</target>
        </trans-unit>
        <trans-unit id="0f742f1b5efa266c3528e372a7535ae4f8d7abfb" translate="yes" xml:space="preserve">
          <source>Import &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; from the &lt;code&gt;@angular/common/&lt;a href=&quot;../api/common/http&quot;&gt;http&lt;/a&gt;&lt;/code&gt; package.</source>
          <target state="translated">&lt;code&gt;@angular/common/&lt;a href=&quot;../api/common/http&quot;&gt;http&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;../api/common/http&quot;&gt;http&lt;/a&gt; 패키지 에서 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; 를 가져 옵니다 .</target>
        </trans-unit>
        <trans-unit id="b4a640252aff8611ffd100e6d553596024dc2232" translate="yes" xml:space="preserve">
          <source>Import &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; from the &lt;code&gt;@angular/common/&lt;a href=&quot;../api/common/http&quot;&gt;http&lt;/a&gt;&lt;/code&gt; package.</source>
          <target state="translated">&lt;code&gt;@angular/common/&lt;a href=&quot;../api/common/http&quot;&gt;http&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;../api/common/http&quot;&gt;http&lt;/a&gt; 패키지 에서 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; 을 가져 옵니다 .</target>
        </trans-unit>
        <trans-unit id="15c4f41e277258769c0a0df5aa685cd02c57d1f7" translate="yes" xml:space="preserve">
          <source>Import &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; from &lt;code&gt;@angular/forms&lt;/code&gt; if your components have &lt;code&gt;[(&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;)]&lt;/code&gt; two-way binding expressions.</source>
          <target state="translated">컴포넌트에 &lt;code&gt;[(&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;)]&lt;/code&gt; &lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt; )] 양방향 바인딩 표현식 이있는 경우 &lt;code&gt;@angular/forms&lt;/code&gt; 에서 &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; 을 가져 오십시오 .</target>
        </trans-unit>
        <trans-unit id="8d73845fe8377c59bacd2d1ab426a96ffca230bf" translate="yes" xml:space="preserve">
          <source>Import &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; to use &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; 을 사용하기 위해 &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; 가져 오기</target>
        </trans-unit>
        <trans-unit id="78a45ea4a26ee0f0dd7af27e0a27299f67d70efd" translate="yes" xml:space="preserve">
          <source>Import &lt;code&gt;&lt;a href=&quot;../api/platform-browser/animations/browseranimationsmodule&quot;&gt;BrowserAnimationsModule&lt;/a&gt;&lt;/code&gt;, which introduces the animation capabilities into your Angular root application module.</source>
          <target state="translated">애니메이션 기능을 Angular 루트 응용 프로그램 모듈에 도입하는 &lt;code&gt;&lt;a href=&quot;../api/platform-browser/animations/browseranimationsmodule&quot;&gt;BrowserAnimationsModule&lt;/a&gt;&lt;/code&gt; 을 가져 옵니다.</target>
        </trans-unit>
        <trans-unit id="9bbd5188871ef20fa807f263a6fcc71ea078f98d" translate="yes" xml:space="preserve">
          <source>Import &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; from the &lt;code&gt;@angular/router&lt;/code&gt; package, and the &lt;code&gt;products&lt;/code&gt; array from &lt;code&gt;../products&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;@angular/router&lt;/code&gt; 패키지 에서 &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; 를 가져 &lt;code&gt;../products&lt;/code&gt; 에서 &lt;code&gt;products&lt;/code&gt; 배열을 가져 옵니다 .</target>
        </trans-unit>
        <trans-unit id="438e3ddee4912def34ac11f57a93ce076783f46e" translate="yes" xml:space="preserve">
          <source>Import &lt;code&gt;&lt;a href=&quot;api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; from &lt;code&gt;@angular/core&lt;/code&gt;.</source>
          <target state="translated">가져 오기 &lt;code&gt;&lt;a href=&quot;api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; 에서 &lt;code&gt;@angular/core&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ba4323afb2767c261fa10794db535d2c4b34bb19" translate="yes" xml:space="preserve">
          <source>Import &lt;code&gt;&lt;a href=&quot;api/core/output&quot;&gt;Output&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;&lt;/code&gt; from &lt;code&gt;@angular/core&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;@angular/core&lt;/code&gt; 에서 &lt;code&gt;&lt;a href=&quot;api/core/output&quot;&gt;Output&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;&lt;/code&gt; 가져 오기 :</target>
        </trans-unit>
        <trans-unit id="29ea81b3ca52ff6ccaed6e2c7a98e218c8668bbe" translate="yes" xml:space="preserve">
          <source>Import &lt;code&gt;&lt;a href=&quot;router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt; to use the Router service in your app. For more usage information, see the &lt;a href=&quot;../guide/router&quot;&gt;Routing and Navigation&lt;/a&gt; guide.</source>
          <target state="translated">앱에서 라우터 서비스를 사용하려면 &lt;code&gt;&lt;a href=&quot;router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt; 을 가져 옵니다 . 자세한 사용법은 &lt;a href=&quot;../guide/router&quot;&gt;Routing and Navigation&lt;/a&gt; 안내서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="fea0622df7e35e3d25926c1db11132831d661da2" translate="yes" xml:space="preserve">
          <source>Import &lt;code&gt;FormsModule&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;FormsModule&lt;/code&gt; 가져 오기</target>
        </trans-unit>
        <trans-unit id="b2f696d4d9afce8de6cbc91e4145a3e2c8ec8ee4" translate="yes" xml:space="preserve">
          <source>Import &lt;code&gt;SelectivePreloadingStrategyService&lt;/code&gt; into &lt;code&gt;AppRoutingModule&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;SelectivePreloadingStrategyService&lt;/code&gt; 를 &lt;code&gt;AppRoutingModule&lt;/code&gt; 로 가져 옵니다 .</target>
        </trans-unit>
        <trans-unit id="ffeed5ccfb791ceee55f7360554286bcadd6091b" translate="yes" xml:space="preserve">
          <source>Import &lt;em&gt;shared&lt;/em&gt; and &lt;em&gt;feature&lt;/em&gt; modules when this module's components incorporate their components, directives, and pipes.</source>
          <target state="translated">이 모듈의 구성 요소가 해당 구성 요소, 지시문 및 파이프를 통합 할 때 &lt;em&gt;공유&lt;/em&gt; 및 &lt;em&gt;기능&lt;/em&gt; 모듈을 가져 옵니다.</target>
        </trans-unit>
        <trans-unit id="fcb63212ad3831fc17aec3ffcf8d331ecd00b985" translate="yes" xml:space="preserve">
          <source>Import NgModules whose public (exported) &lt;a href=&quot;bootstrapping#the-declarations-array&quot;&gt;declarable classes&lt;/a&gt; you need to reference in this module's component templates.</source>
          <target state="translated">이 모듈의 컴포넌트 템플릿에서 공개 (내 보낸) 선언 가능 &lt;a href=&quot;bootstrapping#the-declarations-array&quot;&gt;클래스&lt;/a&gt; 를 참조해야하는 NgModules를 가져옵니다 .</target>
        </trans-unit>
        <trans-unit id="f1f2839eab72da958afeb3a4698c2ccac390a557" translate="yes" xml:space="preserve">
          <source>Import a feature module</source>
          <target state="translated">기능 모듈 가져 오기</target>
        </trans-unit>
        <trans-unit id="2547f241c308c031518bf3f1c55b103af9729c3c" translate="yes" xml:space="preserve">
          <source>Import a scoped package in the same way that you import a normal package.</source>
          <target state="translated">일반 패키지를 가져 오는 것과 같은 방법으로 범위가 지정된 패키지를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="98c0c896fabb3fc1a98419d0cde75db05d6430f1" translate="yes" xml:space="preserve">
          <source>Import a shared module</source>
          <target state="translated">공유 모듈 가져 오기</target>
        </trans-unit>
        <trans-unit id="301c1658c4350b2d60d09948ca85c6196aed28d1" translate="yes" xml:space="preserve">
          <source>Import and add the &lt;code&gt;HeroDetailComponent&lt;/code&gt; and &lt;code&gt;HeroListComponent&lt;/code&gt; to the &lt;code&gt;declarations&lt;/code&gt; array in the &lt;code&gt;HeroesModule&lt;/code&gt;.</source>
          <target state="translated">가져 오기 및 추가 &lt;code&gt;HeroDetailComponent&lt;/code&gt; 및 &lt;code&gt;HeroListComponent&lt;/code&gt; 을 받는 &lt;code&gt;declarations&lt;/code&gt; 의 배열 &lt;code&gt;HeroesModule&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d8ca796a8e658eeeab1bd1e834d4a664c92619c7" translate="yes" xml:space="preserve">
          <source>Import crisis center module into the &lt;code&gt;AppModule&lt;/code&gt; routes</source>
          <target state="translated">위기 센터 모듈을 &lt;code&gt;AppModule&lt;/code&gt; 경로 로 가져 오기</target>
        </trans-unit>
        <trans-unit id="a526dbed5b0f6c824f5d7a0643b8d713cf803b67" translate="yes" xml:space="preserve">
          <source>Import it from</source>
          <target state="translated">에서 가져 오기</target>
        </trans-unit>
        <trans-unit id="d8154fd791df3beb7ab66f72f5ba6f3d510c808c" translate="yes" xml:space="preserve">
          <source>Import it into the appropriate module.</source>
          <target state="translated">적절한 모듈로 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="a6810958c8daa7a96c72da65b232b80dd64c7181" translate="yes" xml:space="preserve">
          <source>Import the &lt;code&gt;&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt; decorator (instead of the &lt;code&gt;&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; decorator).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; 데코레이터 대신 &lt;code&gt;&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt; 데코레이터를 가져옵니다 .</target>
        </trans-unit>
        <trans-unit id="050ba3274203d622f3595bab0a8e5dd2c4cc5deb" translate="yes" xml:space="preserve">
          <source>Import the &lt;code&gt;&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/core/templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;../api/core/viewcontainerref&quot;&gt;ViewContainerRef&lt;/a&gt;&lt;/code&gt; symbols; you'll need them for &lt;em&gt;any&lt;/em&gt; structural directive.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;../api/core/templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;../api/core/viewcontainerref&quot;&gt;ViewContainerRef&lt;/a&gt;&lt;/code&gt; 기호를 가져옵니다 . &lt;em&gt;모든&lt;/em&gt; 구조적 지시문에 필요합니다 .</target>
        </trans-unit>
        <trans-unit id="e9c23b8c549ecba1a1c10a72bc128051038d670e" translate="yes" xml:space="preserve">
          <source>Import the &lt;code&gt;&lt;a href=&quot;../api/forms/formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; class from &lt;code&gt;@angular/forms&lt;/code&gt; to use for type information. The &lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder&quot;&gt;FormBuilder&lt;/a&gt;&lt;/code&gt; service is ready to create a &lt;code&gt;&lt;a href=&quot;../api/forms/formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; instance.</source>
          <target state="translated">형식 정보에 사용할 &lt;code&gt;@angular/forms&lt;/code&gt; 에서 &lt;code&gt;&lt;a href=&quot;../api/forms/formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; 클래스를 가져옵니다 . &lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder&quot;&gt;FormBuilder&lt;/a&gt;&lt;/code&gt; 의 서비스는 만들 준비가 &lt;code&gt;&lt;a href=&quot;../api/forms/formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; 의 인스턴스를.</target>
        </trans-unit>
        <trans-unit id="e331c6fc4a9ff134af60b891774820b42da2edbc" translate="yes" xml:space="preserve">
          <source>Import the &lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder&quot;&gt;FormBuilder&lt;/a&gt;&lt;/code&gt; class from the &lt;code&gt;@angular/forms&lt;/code&gt; package.</source>
          <target state="translated">&lt;code&gt;@angular/forms&lt;/code&gt; 패키지 에서 &lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder&quot;&gt;FormBuilder&lt;/a&gt;&lt;/code&gt; 클래스를 가져 오십시오 .</target>
        </trans-unit>
        <trans-unit id="6cc9c61e025989b9b55d14be9d8b9c70af1b9fc4" translate="yes" xml:space="preserve">
          <source>Import the &lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder&quot;&gt;FormBuilder&lt;/a&gt;&lt;/code&gt; service from the &lt;code&gt;@angular/forms&lt;/code&gt; package.</source>
          <target state="translated">&lt;code&gt;@angular/forms&lt;/code&gt; 패키지 에서 &lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder&quot;&gt;FormBuilder&lt;/a&gt;&lt;/code&gt; 서비스를 가져 오십시오 .</target>
        </trans-unit>
        <trans-unit id="cdcf4dcbdeddf625623188d87e4fefc41dd00403" translate="yes" xml:space="preserve">
          <source>Import the &lt;code&gt;&lt;a href=&quot;../api/forms/validators&quot;&gt;Validators&lt;/a&gt;&lt;/code&gt; class from the &lt;code&gt;@angular/forms&lt;/code&gt; package.</source>
          <target state="translated">&lt;code&gt;@angular/forms&lt;/code&gt; 패키지 에서 &lt;code&gt;&lt;a href=&quot;../api/forms/validators&quot;&gt;Validators&lt;/a&gt;&lt;/code&gt; 클래스를 가져옵니다 .</target>
        </trans-unit>
        <trans-unit id="9ee21c30a536f294238a29e1d4bea732f6f4ae02" translate="yes" xml:space="preserve">
          <source>Import the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;../api/router/parammap&quot;&gt;ParamMap&lt;/a&gt;&lt;/code&gt; tokens from the router package.</source>
          <target state="translated">라우터 패키지에서 &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;../api/router/parammap&quot;&gt;ParamMap&lt;/a&gt;&lt;/code&gt; 토큰을 가져옵니다 .</target>
        </trans-unit>
        <trans-unit id="686b0adef0de155a88d75b0bde6fbed3829d7341" translate="yes" xml:space="preserve">
          <source>Import the &lt;code&gt;&lt;a href=&quot;upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; into your top level &lt;a href=&quot;../../core/ngmodule&quot;&gt;Angular `NgModule`&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; 을 최상위 &lt;a href=&quot;../../core/ngmodule&quot;&gt;Angular`NgModule`&lt;/a&gt; 로 가져 옵니다 .</target>
        </trans-unit>
        <trans-unit id="0e1cedd5069238c18718cd52f3d74737564819a6" translate="yes" xml:space="preserve">
          <source>Import the &lt;code&gt;CartService&lt;/code&gt; from the &lt;code&gt;cart.service.ts&lt;/code&gt; file.</source>
          <target state="translated">&lt;code&gt;cart.service.ts&lt;/code&gt; 파일 에서 &lt;code&gt;CartService&lt;/code&gt; 를 가져 오십시오 .</target>
        </trans-unit>
        <trans-unit id="9d8c5fb1b2237d87ff7cd78a6f3f8b61baca81de" translate="yes" xml:space="preserve">
          <source>Import the &lt;code&gt;CrisisListComponent&lt;/code&gt;, &lt;code&gt;HeroListComponent&lt;/code&gt;, and &lt;code&gt;PageNotFoundComponent&lt;/code&gt; symbols just like you did in the &lt;code&gt;app.module.ts&lt;/code&gt;. Then move the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; imports and routing configuration, including &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt;, into this routing module.</source>
          <target state="translated">&lt;code&gt;HeroListComponent&lt;/code&gt; 에서와 &lt;code&gt;PageNotFoundComponent&lt;/code&gt; &lt;code&gt;CrisisListComponent&lt;/code&gt; , HeroListComponent 및 PageNotFoundComponent 기호를 가져 &lt;code&gt;app.module.ts&lt;/code&gt; . 그런 다음 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt; 포함한 &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; 가져 오기 및 라우팅 구성 을이 라우팅 모듈로 이동하십시오.</target>
        </trans-unit>
        <trans-unit id="817cc00c391e59b9be4fb99905645f2cf9d9b070" translate="yes" xml:space="preserve">
          <source>Import the &lt;code&gt;DashboardComponent&lt;/code&gt; in the &lt;code&gt;AppRoutingModule&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;AppRoutingModule&lt;/code&gt; 에서 &lt;code&gt;DashboardComponent&lt;/code&gt; 를 가져 옵니다 .</target>
        </trans-unit>
        <trans-unit id="d891b2d94c07cfdb42e46213e234080c12a97992" translate="yes" xml:space="preserve">
          <source>Import the &lt;code&gt;Hero&lt;/code&gt; and &lt;code&gt;HEROES&lt;/code&gt;.</source>
          <target state="translated">가져 오기 &lt;code&gt;Hero&lt;/code&gt; 과 &lt;code&gt;HEROES&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="df33ccfbc6cae37532f2258ca69433e9f6f71ae9" translate="yes" xml:space="preserve">
          <source>Import the &lt;code&gt;SelectivePreloadingStrategyService&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;SelectivePreloadingStrategyService&lt;/code&gt; 를 가져 오십시오 .</target>
        </trans-unit>
        <trans-unit id="dfb4992a4374e8dc70168e213e70e9f20129c7fe" translate="yes" xml:space="preserve">
          <source>Import the &lt;code&gt;SharedModule&lt;/code&gt; in your &lt;em&gt;feature&lt;/em&gt; modules, both those loaded when the app starts and those you lazy load later.</source>
          <target state="translated">앱을 시작할 때로드 된 모듈과 나중에로드가 지연되는 &lt;em&gt;기능&lt;/em&gt; 모듈 모두 에서 &lt;em&gt;기능&lt;/em&gt; 모듈 에서 &lt;code&gt;SharedModule&lt;/code&gt; 을 가져옵니다 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e3f7d1044aa8460beba08aa7ce9ae927fdb4849c" translate="yes" xml:space="preserve">
          <source>Import the &lt;code&gt;catchError&lt;/code&gt; symbol from &lt;code&gt;rxjs/operators&lt;/code&gt;, along with some other operators you'll need later.</source>
          <target state="translated">나중에 필요한 다른 연산자와 함께 &lt;code&gt;rxjs/operators&lt;/code&gt; 에서 &lt;code&gt;catchError&lt;/code&gt; 기호를 가져옵니다 .</target>
        </trans-unit>
        <trans-unit id="d41e2af4e0f9d40ee19656d61d24f3e6c1da5575" translate="yes" xml:space="preserve">
          <source>Import the &lt;code&gt;switchMap&lt;/code&gt; operator because you need it later to process the &lt;code&gt;Observable&lt;/code&gt; route parameters.</source>
          <target state="translated">나중에 &lt;code&gt;Observable&lt;/code&gt; 경로 매개 변수 를 처리하는 데 필요하므로 &lt;code&gt;switchMap&lt;/code&gt; 연산자를 가져 오십시오 .</target>
        </trans-unit>
        <trans-unit id="3a18d1695f508fdb02f8c454df1c248c094d7b2f" translate="yes" xml:space="preserve">
          <source>Import the &lt;code&gt;switchMap&lt;/code&gt; operator to perform an operation on the &lt;code&gt;Observable&lt;/code&gt; of route parameter map.</source>
          <target state="translated">임포트 &lt;code&gt;switchMap&lt;/code&gt; 의 온 동작을 수행하는 연산자 &lt;code&gt;Observable&lt;/code&gt; 경로 파라미터 맵.</target>
        </trans-unit>
        <trans-unit id="d43444878db13fcb283c40d8be13224eada6b8e0" translate="yes" xml:space="preserve">
          <source>Import the appropriate language translation file as a string constant.</source>
          <target state="translated">적절한 언어 변환 파일을 문자열 상수로 가져 오십시오.</target>
        </trans-unit>
        <trans-unit id="89a6ca85268363383daef55ec399cdadb37634d3" translate="yes" xml:space="preserve">
          <source>Import the cart service.</source>
          <target state="translated">카트 서비스를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="070bfc8700bcdc05ea975d46b92b9598f201fffa" translate="yes" xml:space="preserve">
          <source>Import the defined schema interface that provides the type information for your schematic's options.</source>
          <target state="translated">회로도 옵션에 대한 유형 정보를 제공하는 정의 된 스키마 인터페이스를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="c4871a12d8b10b0a07d1e0cdc5dfb8d463cfc5f3" translate="yes" xml:space="preserve">
          <source>Import the feature area NgModule into the &lt;code&gt;AppModule&lt;/code&gt;.</source>
          <target state="translated">기능 영역 NgModule을 &lt;code&gt;AppModule&lt;/code&gt; 로 가져옵니다 .</target>
        </trans-unit>
        <trans-unit id="33f2a24119b9f7ce0e76c5987bc26dfad28027be" translate="yes" xml:space="preserve">
          <source>Import the hero components from their new locations in the &lt;code&gt;src/app/heroes/&lt;/code&gt; folder, define the two hero routes.</source>
          <target state="translated">&lt;code&gt;src/app/heroes/&lt;/code&gt; 폴더 의 새로운 위치에서 영웅 구성 요소를 가져 와서 두 개의 영웅 경로를 정의하십시오.</target>
        </trans-unit>
        <trans-unit id="5bc40a5fef2a78698029cd1054594de418f9b5e0" translate="yes" xml:space="preserve">
          <source>Import the routing module into the application and create a routing configuration that defines the possible routes.</source>
          <target state="translated">라우팅 모듈을 애플리케이션으로 가져오고 가능한 경로를 정의하는 라우팅 구성을 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="f9d1848dcd28345f99c78b328167a595cb31adbb" translate="yes" xml:space="preserve">
          <source>Import this resolver in the &lt;code&gt;crisis-center-routing.module.ts&lt;/code&gt; and add a &lt;code&gt;&lt;a href=&quot;../api/router/route#resolve&quot;&gt;resolve&lt;/a&gt;&lt;/code&gt; object to the &lt;code&gt;CrisisDetailComponent&lt;/code&gt; route configuration.</source>
          <target state="translated">이 해결 가져 오기 &lt;code&gt;crisis-center-routing.module.ts&lt;/code&gt; 하고 추가 &lt;code&gt;&lt;a href=&quot;../api/router/route#resolve&quot;&gt;resolve&lt;/a&gt;&lt;/code&gt; 받는 객체를 &lt;code&gt;CrisisDetailComponent&lt;/code&gt; 의 경로 구성.</target>
        </trans-unit>
        <trans-unit id="f1ec2e5b75cafd71f4d2cf17bbe28874aadd8762" translate="yes" xml:space="preserve">
          <source>Import widget modules in any module whose component templates need the widgets.</source>
          <target state="translated">구성 요소 템플리트에 위젯이 필요한 모든 모듈에서 위젯 모듈을 가져 오십시오.</target>
        </trans-unit>
        <trans-unit id="4ebe828e74096e229b55fc62674259b224c8b59f" translate="yes" xml:space="preserve">
          <source>Imported by</source>
          <target state="translated">에 의해 수입</target>
        </trans-unit>
        <trans-unit id="ca029c525e020e030b5763e634cdfa9684f0ec75" translate="yes" xml:space="preserve">
          <source>Imported providers are easily replaced by providers from another imported NgModule. Such replacement might be by design. It could be unintentional and have adverse consequences.</source>
          <target state="translated">가져온 공급자는 다른 가져온 NgModule의 공급자로 쉽게 교체 할 수 있습니다. 이러한 교체는 의도 된 것일 수 있습니다. 의도하지 않았으며 불리한 결과를 초래할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4c410a4e7ce454cc0a669f85789fcc7292be2656" translate="yes" xml:space="preserve">
          <source>Importing &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; also frees feature modules for use on &lt;em&gt;any&lt;/em&gt; target platform, not just browsers.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; 을 가져 오면 브라우저뿐만 아니라 &lt;em&gt;모든&lt;/em&gt; 대상 플랫폼에서 사용할 기능 모듈이 해제 됩니다.</target>
        </trans-unit>
        <trans-unit id="0926c5352a1ed8fd6d4008f3a9505f53d26d0c72" translate="yes" xml:space="preserve">
          <source>Importing &lt;code&gt;&lt;a href=&quot;../api/service-worker/serviceworkermodule&quot;&gt;ServiceWorkerModule&lt;/a&gt;&lt;/code&gt; into your &lt;code&gt;AppModule&lt;/code&gt; doesn't just register the service worker, it also provides a few services you can use to interact with the service worker and control the caching of your app.</source>
          <target state="translated">가져 오기 &lt;code&gt;&lt;a href=&quot;../api/service-worker/serviceworkermodule&quot;&gt;ServiceWorkerModule&lt;/a&gt;&lt;/code&gt; 을 당신에 &lt;code&gt;AppModule&lt;/code&gt; 바로 서비스 노동자를 등록하지 않습니다, 그것은 또한 당신이 서비스 작업자와 상호 작용하여 응용 프로그램의 캐싱을 제어하는 데 사용할 수있는 몇 가지 서비스를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="bf8398dc7932850ef3407d2abc867f5242eaa718" translate="yes" xml:space="preserve">
          <source>Importing a feature module</source>
          <target state="translated">기능 모듈 가져 오기</target>
        </trans-unit>
        <trans-unit id="b15db4d28a6b8ab83dd5b14c0f07467630615c89" translate="yes" xml:space="preserve">
          <source>Importing a module does &lt;em&gt;not&lt;/em&gt; automatically re-export the imported module's imports. Module 'B' can't use &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; just because it imported module 'A' which imported &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt;. Module 'B' must import &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; itself.</source>
          <target state="translated">모듈을 가져 오더라도 가져온 모듈의 가져 오기가 자동으로 다시 내보내지는 &lt;em&gt;않습니다&lt;/em&gt; . 모듈 'B'는 &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; 을 가져온 모듈 'A'를 가져 &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; 때문에 ngIf를 사용할 수 없습니다 . 모듈 'B'는 &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; 자체를 가져와야 합니다.</target>
        </trans-unit>
        <trans-unit id="50f4da678c72bbf5ccb3812d54bcbc40fe9377ba" translate="yes" xml:space="preserve">
          <source>Importing modules</source>
          <target state="translated">모듈 가져 오기</target>
        </trans-unit>
        <trans-unit id="6c6759a5009501ce940b68c3c6c4d0a88982af01" translate="yes" xml:space="preserve">
          <source>Importing the component's feature module can be the easiest way to configure tests when there are many mutual dependencies within the module and the module is small, as feature modules tend to be.</source>
          <target state="translated">구성 요소의 기능 모듈을 가져 오는 것은 모듈 내에 상호 의존성이 많고 기능 모듈이 작기 때문에 모듈이 작은 경우 테스트를 구성하는 가장 쉬운 방법 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2dc45a2a577a313a667ab95b3f67c568aecf86f0" translate="yes" xml:space="preserve">
          <source>Imports and registers the service worker in the app module.</source>
          <target state="translated">앱 워커에서 서비스 워커를 가져 와서 등록합니다.</target>
        </trans-unit>
        <trans-unit id="a83a0fc0cd6287cabf3642ac5ae77c9a4a861c22" translate="yes" xml:space="preserve">
          <source>Imports and route configuration</source>
          <target state="translated">가져 오기 및 라우트 구성</target>
        </trans-unit>
        <trans-unit id="3814cab387da7b9062d6ab2735ba73f5e9829045" translate="yes" xml:space="preserve">
          <source>Imports other modules with the components, directives, and pipes that components in the current module need.</source>
          <target state="translated">현재 모듈의 구성 요소에 필요한 구성 요소, 지시문 및 파이프가있는 다른 모듈을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="d61c28aebf6d9a308688684bd0963349f916d660" translate="yes" xml:space="preserve">
          <source>Imports the animation symbols that build the animation triggers, control state, and manage transitions between states.</source>
          <target state="translated">애니메이션 트리거를 만들고 애니메이션 상태를 제어하며 상태 간 전환을 관리하는 애니메이션 심볼을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="fea98dc51784321beb1402d5791647e70f12893b" translate="yes" xml:space="preserve">
          <source>Improve overall data quality by validating user input for accuracy and completeness.</source>
          <target state="translated">정확성과 완전성을 위해 사용자 입력의 유효성을 검사하여 전반적인 데이터 품질을 향상시킵니다.</target>
        </trans-unit>
        <trans-unit id="d44c2ca2637e46280e6e09bd5b6ff5f7c525f378" translate="yes" xml:space="preserve">
          <source>Improve performance on mobile and low-powered devices</source>
          <target state="translated">모바일 및 저전력 장치의 성능 향상</target>
        </trans-unit>
        <trans-unit id="c0414193d62ac6c0f1bf1c02847690c0c2c4c6f1" translate="yes" xml:space="preserve">
          <source>Impure pipes</source>
          <target state="translated">불순한 파이프</target>
        </trans-unit>
        <trans-unit id="88c8cdf511a1c885e6f77a48066eec8b1854da94" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;glossary#schematic&quot;&gt;schematics&lt;/a&gt;, a function that operates on a &lt;a href=&quot;glossary#file-tree&quot;&gt;file tree&lt;/a&gt; to create, delete, or modify files in a specific manner.</source>
          <target state="translated">에서 &lt;a href=&quot;glossary#schematic&quot;&gt;회로도&lt;/a&gt; 하는에서 작동하는 기능 &lt;a href=&quot;glossary#file-tree&quot;&gt;파일 트리&lt;/a&gt; 생성, 삭제, 또는 특정 방식으로 파일을 수정합니다.</target>
        </trans-unit>
        <trans-unit id="b691bd4b8205b08475f3b410f51f0a0d3db24979" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;glossary#schematic&quot;&gt;schematics&lt;/a&gt;, a virtual file system represented by the &lt;code&gt;Tree&lt;/code&gt; class. Schematic &lt;a href=&quot;glossary#rule&quot;&gt;rules&lt;/a&gt; take a tree object as input, operate on them, and return a new tree object.</source>
          <target state="translated">에서 &lt;a href=&quot;glossary#schematic&quot;&gt;회로도&lt;/a&gt; , 가상 파일 시스템은로 표현 &lt;code&gt;Tree&lt;/code&gt; 클래스입니다. 회로도 &lt;a href=&quot;glossary#rule&quot;&gt;규칙&lt;/a&gt; 은 트리 객체를 입력으로 사용하여 조작 한 후 새 트리 객체를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="24e713671eb935b94463bbfce75319fb7e81b738" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;http#adding-headers&quot;&gt;Adding headers&lt;/a&gt;, the &lt;code&gt;HeroesService&lt;/code&gt; set the default headers by passing an options object (&lt;code&gt;httpOptions&lt;/code&gt;) to its save methods. You can do more.</source>
          <target state="translated">에서 &lt;a href=&quot;http#adding-headers&quot;&gt;추가 헤더&lt;/a&gt; 의 &lt;code&gt;HeroesService&lt;/code&gt; 은 : 옵션 객체 (전달하여 기본 헤더를 설정 &lt;code&gt;httpOptions&lt;/code&gt; 을 그 방법에 저장하기). 더 많은 것을 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="419fc7b32aa230897c77ab6ce882d85080a20dfc" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;Visual Studio Code&lt;/a&gt;, install the extension from the &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=Angular.ng-template&quot;&gt;Extensions: Marketplace&lt;/a&gt;. You can open the marketplace from the editor using the Extensions icon on the left menu pane, or use VS Quick Open (⌘+P on Mac, CTRL+P on Windows) and type &quot;? ext&quot;.</source>
          <target state="translated">에서 &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;Visual Studio를 코드&lt;/a&gt; 의에서 확장 설치 &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=Angular.ng-template&quot;&gt;마켓 플레이스 : 확장&lt;/a&gt; . 왼쪽 메뉴 창의 확장 아이콘을 사용하여 편집기에서 마켓 플레이스를 열거 나 VS 빠른 열기 (Mac의 경우 ⌘ + P, Windows의 경우 CTRL + P)를 사용하고 &quot;? ext&quot;를 입력 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0de07a30f188c92d5f5c9abf71459a306a224cdb" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;https://www.jetbrains.com/webstorm/&quot;&gt;WebStorm&lt;/a&gt;, you must install the language service package as a project dependency.</source>
          <target state="translated">에서 &lt;a href=&quot;https://www.jetbrains.com/webstorm/&quot;&gt;WebStorm&lt;/a&gt; , 당신은 프로젝트 종속성과 같은 언어 서비스 패키지를 설치해야합니다.</target>
        </trans-unit>
        <trans-unit id="189f9093d7a12a56913779caf0448dafddac81fa" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;https://www.sublimetext.com/&quot;&gt;Sublime Text&lt;/a&gt;, the Language Service supports only in-line templates when installed as a plug-in. You need a custom Sublime plug-in (or modifications to the current plug-in) for completions in HTML files.</source>
          <target state="translated">에서 &lt;a href=&quot;https://www.sublimetext.com/&quot;&gt;숭고한 텍스트&lt;/a&gt; 플러그인으로 설치했을 때, 언어 서비스는 인라인 템플릿을 지원합니다. HTML 파일을 완성하려면 사용자 정의 Sublime 플러그인 (또는 현재 플러그인 수정)이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="6adea1758de937c6940c286e654edf1f70a7341d" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;HeroService&lt;/code&gt;, import the &lt;code&gt;MessageService&lt;/code&gt;.</source>
          <target state="translated">에서 &lt;code&gt;HeroService&lt;/code&gt; 가져 오기 &lt;code&gt;MessageService&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="941837469f8f7292381b4b5d7fb8f52141c4b5b9" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;ProfileEditorComponent&lt;/code&gt;, use the &lt;code&gt;updateProfile&lt;/code&gt; method with the example below to update the first name and street address for the user.</source>
          <target state="translated">에서 &lt;code&gt;ProfileEditorComponent&lt;/code&gt; , 사용 &lt;code&gt;updateProfile&lt;/code&gt; 에 사용자의 이름과 거리 주소를 업데이트 아래의 예와 방법을.</target>
        </trans-unit>
        <trans-unit id="c4552c52e0555afb5d7c5f59701433a331470a05" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;angular.json&lt;/code&gt; add two new configuration sections under the &lt;code&gt;build&lt;/code&gt; and &lt;code&gt;serve&lt;/code&gt; targets to point to the new TypeScript configuration.</source>
          <target state="translated">에서 &lt;code&gt;angular.json&lt;/code&gt; 세 이하 두 개의 새로운 구성 섹션을 추가 &lt;code&gt;build&lt;/code&gt; 및 &lt;code&gt;serve&lt;/code&gt; 새로운 타이프 라이터 구성에 지점에 목표를.</target>
        </trans-unit>
        <trans-unit id="88a62840642f50411d045256c59444f30c7be873" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;app.module.ts&lt;/code&gt;, add a route for product details, with a &lt;code&gt;path&lt;/code&gt; of &lt;code&gt;products/:productId&lt;/code&gt; and &lt;code&gt;ProductDetailsComponent&lt;/code&gt; for the &lt;code&gt;component&lt;/code&gt;.</source>
          <target state="translated">에서 &lt;code&gt;app.module.ts&lt;/code&gt; 하는로, 제품 정보에 대한 경로를 추가 &lt;code&gt;path&lt;/code&gt; 의 &lt;code&gt;products/:productId&lt;/code&gt; 와 &lt;code&gt;ProductDetailsComponent&lt;/code&gt; 에 대한 &lt;code&gt;component&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c81e966129850cf415f6248bea69d0b9ed06ad7c" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;app.module.ts&lt;/code&gt;, add a route for shipping. Specify a &lt;code&gt;path&lt;/code&gt; of &lt;code&gt;shipping&lt;/code&gt; and a component of &lt;code&gt;ShippingComponent&lt;/code&gt;.</source>
          <target state="translated">에서 &lt;code&gt;app.module.ts&lt;/code&gt; , 운송에 대한 경로를 추가합니다. 지정 &lt;code&gt;path&lt;/code&gt; 의 &lt;code&gt;shipping&lt;/code&gt; 과의 구성 요소 &lt;code&gt;ShippingComponent&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="6d895fdb94f9534c8a2f82b3d299e8227073cbd3" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;app.module.ts&lt;/code&gt;, remove the &lt;code&gt;AdminModule&lt;/code&gt; import statement from the top of the file and remove the &lt;code&gt;AdminModule&lt;/code&gt; from the NgModule's &lt;code&gt;imports&lt;/code&gt; array.</source>
          <target state="translated">에서 &lt;code&gt;app.module.ts&lt;/code&gt; , 제거 &lt;code&gt;AdminModule&lt;/code&gt; 파일의 상단에서 import 문을과 제거 &lt;code&gt;AdminModule&lt;/code&gt; 을 NgModule의에서 &lt;code&gt;imports&lt;/code&gt; 배열입니다.</target>
        </trans-unit>
        <trans-unit id="66c95ce78c49c2b818a248ba1ca84d28c18823cf" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;cart.component.ts&lt;/code&gt;, define an &lt;code&gt;onSubmit()&lt;/code&gt; method to process the form. Use the &lt;code&gt;CartService#clearCart()&lt;/code&gt; method to empty the cart items and reset the form after it is submitted. (In a real-world app, this method also would submit the data to an external server.)</source>
          <target state="translated">에서는 &lt;code&gt;cart.component.ts&lt;/code&gt; , 정의 &lt;code&gt;onSubmit()&lt;/code&gt; 형태로 처리하는 방법. 사용 &lt;code&gt;CartService#clearCart()&lt;/code&gt; 카트 항목을 비우고이 제출 된 후 양식을 재설정하는 방법을. 실제 앱에서이 방법은 데이터를 외부 서버에 제출할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="0b5334d2075d36a21eeb7a9fdb6756d0e3353959" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;index.html&lt;/code&gt;, change base href from &lt;code&gt;&amp;lt;base href=&quot;/&quot;&amp;gt;&lt;/code&gt; to &lt;code&gt;&amp;lt;base href=&quot;/src/&quot;&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">에서는 &lt;code&gt;index.html&lt;/code&gt; 을 행 변경 기본 href &lt;code&gt;&amp;lt;base href=&quot;/&quot;&amp;gt;&lt;/code&gt; 에 &lt;code&gt;&amp;lt;base href=&quot;/src/&quot;&amp;gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5d4c2508f6f46eaa4133ffeeaac2bf21600b45b7" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;product-list.component.html&lt;/code&gt;, bind the &lt;code&gt;app-product-alerts&lt;/code&gt; component (which is what displays the &quot;Notify Me&quot; button) to the &lt;code&gt;onNotify()&lt;/code&gt; method of the product list component.</source>
          <target state="translated">에서 &lt;code&gt;product-list.component.html&lt;/code&gt; , 바인드 &lt;code&gt;app-product-alerts&lt;/code&gt; 받는 사람 (이하 &quot;알림&quot;버튼을 표시 것입니다) 구성 요소 &lt;code&gt;onNotify()&lt;/code&gt; 제품 목록 구성 요소의 방법.</target>
        </trans-unit>
        <trans-unit id="c03f59b331ed7156718b1228952832ea7836769c" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;src/systemjs.config.js&lt;/code&gt;, near the top of the file, change the npm &lt;code&gt;path&lt;/code&gt; to &lt;code&gt;/node_modules/&lt;/code&gt; with a slash.</source>
          <target state="translated">에서 &lt;code&gt;src/systemjs.config.js&lt;/code&gt; , 파일의 상단에, 고궁 박물원의 변화 &lt;code&gt;path&lt;/code&gt; 에 &lt;code&gt;/node_modules/&lt;/code&gt; 슬래시로.</target>
        </trans-unit>
        <trans-unit id="3bc1fafefe77f9932ae7d735645c4d33c9cc2eeb" translate="yes" xml:space="preserve">
          <source>In Angular CLI version 8 and higher, applications are built using &lt;em&gt;differential loading&lt;/em&gt;, a strategy where the CLI builds two separate bundles as part of your deployed application.</source>
          <target state="translated">Angular CLI 버전 8 이상 에서 CLI는 배포 된 애플리케이션의 일부로 두 개의 개별 번들을 빌드하는 전략 인 &lt;em&gt;차등 로딩을&lt;/em&gt; 사용하여 빌드됩니다.</target>
        </trans-unit>
        <trans-unit id="e1431faabdc821757fa86b84a541dce584ba7634" translate="yes" xml:space="preserve">
          <source>In Angular CLI version 8 and higher, differential loading is enabled by default for the &lt;code&gt;ng build&lt;/code&gt; command. The &lt;code&gt;ng serve&lt;/code&gt;, &lt;code&gt;ng test&lt;/code&gt;, and &lt;code&gt;ng e2e&lt;/code&gt; commands, however, generate a single ES2015 build which cannot run in older browsers that don't support the modules, such as IE 11.</source>
          <target state="translated">Angular CLI 버전 8 이상에서는 &lt;code&gt;ng build&lt;/code&gt; 명령 에 기본적으로 차등 로딩이 활성화되어 있습니다. 그러나 &lt;code&gt;ng serve&lt;/code&gt; , &lt;code&gt;ng test&lt;/code&gt; 및 &lt;code&gt;ng e2e&lt;/code&gt; 명령은 IE 11과 같은 모듈을 지원하지 않는 이전 브라우저에서는 실행할 수없는 단일 ES2015 빌드를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="7b1d3994bf24bcb2d7b3fdd86f51dccd601e9753" translate="yes" xml:space="preserve">
          <source>In Angular terminology, a platform is the context in which an Angular application runs. The most common platform for Angular applications is a web browser, but it can also be an operating system for a mobile device, or a web server.</source>
          <target state="translated">Angular 용어에서 플랫폼은 Angular 응용 프로그램이 실행되는 컨텍스트입니다. Angular 응용 프로그램의 가장 일반적인 플랫폼은 웹 브라우저이지만 모바일 장치 또는 웹 서버의 운영 체제 일 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="46dd64bbc88ed581429aca94fdd9f3452d9971db" translate="yes" xml:space="preserve">
          <source>In Angular things are different. While change detection still occurs after every event, no one needs to call &lt;code&gt;scope.$apply()&lt;/code&gt; for that to happen. This is because all Angular code runs inside something called the &lt;a href=&quot;../api/core/ngzone&quot;&gt;Angular zone&lt;/a&gt;. Angular always knows when the code finishes, so it also knows when it should kick off change detection. The code itself doesn't have to call &lt;code&gt;scope.$apply()&lt;/code&gt; or anything like it.</source>
          <target state="translated">각도에서는 상황이 다릅니다. 모든 이벤트 후에도 변경 감지가 여전히 발생하지만 &lt;code&gt;scope.$apply()&lt;/code&gt; 를 호출 할 필요는 없습니다 . 모든 Angular 코드가 &lt;a href=&quot;../api/core/ngzone&quot;&gt;Angular zone&lt;/a&gt; 이라는 내부에서 실행되기 때문 입니다. Angular는 코드가 완료되는시기를 항상 알고 있으므로 변경 감지를 시작해야하는시기도 알고 있습니다. 코드 자체는 &lt;code&gt;scope.$apply()&lt;/code&gt; 또는 이와 유사한 것을 호출 할 필요가 없습니다 .</target>
        </trans-unit>
        <trans-unit id="4c74df3bafb8f0880b2718e644a5bb702ff44a77" translate="yes" xml:space="preserve">
          <source>In Angular you use similar syntax with the pipe (|) character to filter output, but now you call them &lt;strong&gt;pipes&lt;/strong&gt;. Many (but not all) of the built-in filters from AngularJS are built-in pipes in Angular.</source>
          <target state="translated">Angular에서는 파이프 (|) 문자와 유사한 구문을 사용하여 출력을 필터링하지만 이제 &lt;strong&gt;파이프&lt;/strong&gt; 라고합니다 . AngularJS의 많은 내장 필터는 Angular의 내장 파이프입니다.</target>
        </trans-unit>
        <trans-unit id="95111c94dbd226bf1c1dbcb0a6c5aa4131254f48" translate="yes" xml:space="preserve">
          <source>In Angular, &lt;code&gt;href&lt;/code&gt; is no longer used for routing. Routing uses &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;&lt;/code&gt;, as shown in the following example.</source>
          <target state="translated">Angular에서 &lt;code&gt;href&lt;/code&gt; 는 더 이상 라우팅에 사용되지 않습니다. 라우팅은 다음 예와 같이 &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;&lt;/code&gt; 를 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="5776268b8d76370b45f02f052a40cf650053642c" translate="yes" xml:space="preserve">
          <source>In Angular, &lt;strong&gt;two-way binding&lt;/strong&gt; is denoted by &lt;code&gt;[()]&lt;/code&gt;, descriptively referred to as a &quot;banana in a box&quot;. This syntax is a shortcut for defining both property binding (from the component to the view) and event binding (from the view to the component), thereby providing two-way binding.</source>
          <target state="translated">Angular에서 &lt;strong&gt;양방향 바인딩&lt;/strong&gt; 은 설명 적으로 &quot;상자에 바나나&quot;라고 하는 &lt;code&gt;[()]&lt;/code&gt; 로 표시됩니다 . 이 구문은 속성 바인딩 (구성 요소에서보기로)과 이벤트 바인딩 (보기에서 구성 요소로)을 모두 정의하여 양방향 바인딩을 제공하는 바로 가기입니다.</target>
        </trans-unit>
        <trans-unit id="f933bc6fc4b7b3378ae37914c32604c21b7bac57" translate="yes" xml:space="preserve">
          <source>In Angular, a &lt;a href=&quot;glossary#project&quot;&gt;project&lt;/a&gt; that provides functionality that can be included in other Angular apps. A library isn't a complete Angular app and can't run independently. (To add re-usable Angular functionality to non-Angular web apps, you can use Angular &lt;a href=&quot;glossary#angular-element&quot;&gt;custom elements&lt;/a&gt;.)</source>
          <target state="translated">Angular에서는 다른 Angular 앱에 포함될 수있는 기능을 제공 하는 &lt;a href=&quot;glossary#project&quot;&gt;프로젝트&lt;/a&gt; 입니다. 라이브러리는 완전한 Angular 앱이 아니며 독립적으로 실행할 수 없습니다. (Angular 이외의 웹 앱에 재사용 가능한 Angular 기능을 추가하기 위해 Angular &lt;a href=&quot;glossary#angular-element&quot;&gt;사용자 정의 요소를&lt;/a&gt; 사용할 수 있습니다 .)</target>
        </trans-unit>
        <trans-unit id="4d102678eee21e14e16ac6c77664ce7f07fe617f" translate="yes" xml:space="preserve">
          <source>In Angular, a class with the &lt;a href=&quot;glossary#injectable&quot;&gt;@Injectable()&lt;/a&gt; decorator that encapsulates non-UI logic and code that can be reused across an application. Angular distinguishes components from services to increase modularity and reusability.</source>
          <target state="translated">Angular에서는 응용 프로그램에서 재사용 할 수있는 비 UI 논리 및 코드를 캡슐화 하는 &lt;a href=&quot;glossary#injectable&quot;&gt;@Injectable ()&lt;/a&gt; 데코레이터가 있는 클래스입니다 . Angular는 컴포넌트와 서비스를 구별하여 모듈 성과 재사용 성을 높입니다.</target>
        </trans-unit>
        <trans-unit id="42472280db2836f2049c258a790c8995069f17d9" translate="yes" xml:space="preserve">
          <source>In Angular, a set of related &lt;a href=&quot;glossary#schematic&quot;&gt;schematics&lt;/a&gt; collected in an &lt;a href=&quot;glossary#npm-package&quot;&gt;npm package&lt;/a&gt;.</source>
          <target state="translated">Angular 에서 &lt;a href=&quot;glossary#npm-package&quot;&gt;npm 패키지로&lt;/a&gt; 수집 된 관련 &lt;a href=&quot;glossary#schematic&quot;&gt;회로도&lt;/a&gt; 세트입니다 .</target>
        </trans-unit>
        <trans-unit id="e67a287fde6cc9945eb3f6d9f0c4d95950a65f6b" translate="yes" xml:space="preserve">
          <source>In Angular, a template expression in curly braces still denotes one-way binding. This binds the value of the element to a property of the component. The context of the binding is implied and is always the associated component, so it needs no reference variable.</source>
          <target state="translated">Angular에서 중괄호 안의 템플릿 표현식은 여전히 ​​단방향 바인딩을 나타냅니다. 이것은 요소의 값을 컴포넌트의 속성에 바인딩합니다. 바인딩 컨텍스트는 내재되어 있으며 항상 연관된 컴포넌트이므로 참조 변수가 필요하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="43af6c84f806d548cba3d9e875a82ca2c2ac11d1" translate="yes" xml:space="preserve">
          <source>In Angular, an app's root NgModule (&lt;code&gt;AppModule&lt;/code&gt;) has a &lt;code&gt;bootstrap&lt;/code&gt; property that identifies the app's top-level &lt;a href=&quot;glossary#component&quot;&gt;components&lt;/a&gt;. During the bootstrap process, Angular creates and inserts these components into the &lt;code&gt;index.html&lt;/code&gt; host web page. You can bootstrap multiple apps in the same &lt;code&gt;index.html&lt;/code&gt;. Each app contains its own components.</source>
          <target state="translated">Angular에서 앱의 루트 NgModule ( &lt;code&gt;AppModule&lt;/code&gt; )에는 앱의 최상위 &lt;a href=&quot;glossary#component&quot;&gt;구성 요소&lt;/a&gt; 를 식별 하는 &lt;code&gt;bootstrap&lt;/code&gt; 속성이 있습니다. 부트 스트랩 프로세스 동안 Angular는 이러한 구성 요소를 만들어 &lt;code&gt;index.html&lt;/code&gt; 호스트 웹 페이지에 삽입 합니다. 동일한 &lt;code&gt;index.html&lt;/code&gt; 에서 여러 앱을 부트 스트랩 할 수 있습니다 . 각 앱에는 자체 구성 요소가 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="bbb7472c46802d488a515304f6fc524e7754d847" translate="yes" xml:space="preserve">
          <source>In Angular, components are the main primitive from which user interfaces are built. You define the different portions of the UI as components and compose them into a full user experience.</source>
          <target state="translated">Angular에서 컴포넌트는 사용자 인터페이스가 구축되는 주요 기본 요소입니다. UI의 다른 부분을 구성 요소로 정의하고 완전한 사용자 환경으로 구성합니다.</target>
        </trans-unit>
        <trans-unit id="d57111c7e00014610f562bb31fefc30b6f3895c6" translate="yes" xml:space="preserve">
          <source>In Angular, dependencies are typically services, but they also can be values, such as strings or functions. An &lt;a href=&quot;glossary#injector&quot;&gt;injector&lt;/a&gt; for an app (created automatically during bootstrap) instantiates dependencies when needed, using a configured &lt;a href=&quot;glossary#provider&quot;&gt;provider&lt;/a&gt; of the service or value.</source>
          <target state="translated">Angular에서 종속성은 일반적으로 서비스이지만 문자열이나 함수와 같은 값일 수도 있습니다. 앱 의 &lt;a href=&quot;glossary#injector&quot;&gt;인젝터&lt;/a&gt; (부트 스트랩 중에 자동으로 생성됨)는 필요할 때 구성된 서비스 또는 값 &lt;a href=&quot;glossary#provider&quot;&gt;공급자&lt;/a&gt; 를 사용하여 종속성을 인스턴스화 합니다.</target>
        </trans-unit>
        <trans-unit id="49a00199a43ff42e00e1d7703a54a94326ede49c" translate="yes" xml:space="preserve">
          <source>In Angular, the &lt;code&gt;&lt;a href=&quot;../api/common/ngclass&quot;&gt;ngClass&lt;/a&gt;&lt;/code&gt; directive works similarly. It includes/excludes CSS classes based on an expression.</source>
          <target state="translated">Angular에서 &lt;code&gt;&lt;a href=&quot;../api/common/ngclass&quot;&gt;ngClass&lt;/a&gt;&lt;/code&gt; 지시문은 비슷하게 작동합니다. 표현식을 기반으로 CSS 클래스를 포함 / 제외합니다.</target>
        </trans-unit>
        <trans-unit id="3bf0e4f69a8ebfd62b6c1ef86d6048033054f53f" translate="yes" xml:space="preserve">
          <source>In Angular, the &lt;code&gt;&lt;a href=&quot;../api/common/ngstyle&quot;&gt;ngStyle&lt;/a&gt;&lt;/code&gt; directive works similarly. It sets a CSS style on an HTML element based on an expression.</source>
          <target state="translated">Angular에서 &lt;code&gt;&lt;a href=&quot;../api/common/ngstyle&quot;&gt;ngStyle&lt;/a&gt;&lt;/code&gt; 지시문은 비슷하게 작동합니다. 표현식을 기반으로 HTML 요소에 CSS 스타일을 설정합니다.</target>
        </trans-unit>
        <trans-unit id="d14c88becd3c4b7ad223e1c52839e5fb106a2219" translate="yes" xml:space="preserve">
          <source>In Angular, the &lt;code&gt;&lt;a href=&quot;../api/common/ngswitch&quot;&gt;ngSwitch&lt;/a&gt;&lt;/code&gt; directive works similarly. It displays an element whose &lt;code&gt;*&lt;a href=&quot;../api/common/ngswitchcase&quot;&gt;ngSwitchCase&lt;/a&gt;&lt;/code&gt; matches the current &lt;code&gt;&lt;a href=&quot;../api/common/ngswitch&quot;&gt;ngSwitch&lt;/a&gt;&lt;/code&gt; expression value.</source>
          <target state="translated">Angular에서 &lt;code&gt;&lt;a href=&quot;../api/common/ngswitch&quot;&gt;ngSwitch&lt;/a&gt;&lt;/code&gt; 지시문은 비슷하게 작동합니다. &lt;code&gt;*&lt;a href=&quot;../api/common/ngswitchcase&quot;&gt;ngSwitchCase&lt;/a&gt;&lt;/code&gt; 가 현재 &lt;code&gt;&lt;a href=&quot;../api/common/ngswitch&quot;&gt;ngSwitch&lt;/a&gt;&lt;/code&gt; 표현식 값 과 일치 하는 요소를 표시합니다 .</target>
        </trans-unit>
        <trans-unit id="7fa35db99b5e7128d37e25c36e032619af14914f" translate="yes" xml:space="preserve">
          <source>In Angular, the DI framework provides declared dependencies to a class when that class is instantiated. This guide explains how DI works in Angular, and how you use it to make your apps flexible, efficient, and robust, as well as testable and maintainable.</source>
          <target state="translated">Angular에서 DI 프레임 워크는 클래스가 인스턴스화 될 때 클래스에 선언 된 종속성을 제공합니다. 이 가이드에서는 DI가 Angular에서 어떻게 작동하는지, 그리고이를 사용하여 앱을 유연하고 효율적이며 견고하며 테스트 가능하고 유지 관리 가능하게 만드는 방법에 대해 설명합니다.</target>
        </trans-unit>
        <trans-unit id="56cf5a3785dda1a9e94cccd5c7f98706c65752e1" translate="yes" xml:space="preserve">
          <source>In Angular, the best practice is to load and configure the router in a separate, top-level module that is dedicated to routing and imported by the root &lt;code&gt;AppModule&lt;/code&gt;.</source>
          <target state="translated">Angular에서 모범 사례는 루트 &lt;code&gt;AppModule&lt;/code&gt; 에 의해 라우팅 및 가져 오기 전용 인 별도의 최상위 모듈에 라우터를로드하고 구성하는 것입니다 .</target>
        </trans-unit>
        <trans-unit id="59cb913403e7197319cc31442b4a8397dc93031f" translate="yes" xml:space="preserve">
          <source>In Angular, the template no longer specifies its associated controller. Rather, the component specifies its associated template as part of the component class decorator.</source>
          <target state="translated">Angular에서 템플릿은 더 이상 관련 컨트롤러를 지정하지 않습니다. 대신, 컴포넌트는 컴포넌트 클래스 데코레이터의 일부로 연관된 템플리트를 지정합니다.</target>
        </trans-unit>
        <trans-unit id="25736a6eef4ea1a73caec95ccf80b14819cbeacf" translate="yes" xml:space="preserve">
          <source>In Angular, transition states can be defined explicitly through the &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/%24locationshim#state&quot;&gt;state()&lt;/a&gt;&lt;/code&gt; function, or using the predefined &lt;code&gt;*&lt;/code&gt; (wildcard) and &lt;code&gt;void&lt;/code&gt; states.</source>
          <target state="translated">Angular에서 전이 상태는 &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/%24locationshim#state&quot;&gt;state()&lt;/a&gt;&lt;/code&gt; 함수를 통해 또는 사전 정의 된 &lt;code&gt;*&lt;/code&gt; (와일드 카드) 및 &lt;code&gt;void&lt;/code&gt; 상태를 사용하여 명시 적으로 정의 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="4e131d233620271698d30ea65871deadb93e35a0" translate="yes" xml:space="preserve">
          <source>In Angular, use JSONP by including &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientjsonpmodule&quot;&gt;HttpClientJsonpModule&lt;/a&gt;&lt;/code&gt; in the &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; imports. In the following example, the &lt;code&gt;searchHeroes()&lt;/code&gt; method uses a JSONP request to query for heroes whose names contain the search term.</source>
          <target state="translated">Angular 에서 &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 가져 오기에 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientjsonpmodule&quot;&gt;HttpClientJsonpModule&lt;/a&gt;&lt;/code&gt; 을 포함시켜 JSONP를 사용 하십시오 . 다음 예에서 &lt;code&gt;searchHeroes()&lt;/code&gt; 메서드는 JSONP 요청을 사용하여 이름에 검색어가 포함 된 영웅을 쿼리합니다.</target>
        </trans-unit>
        <trans-unit id="95bc62450c4a6ad00b962b6c8b2526a974d4070b" translate="yes" xml:space="preserve">
          <source>In Angular, you can set multiple styles without any animation. However, without further refinement, the button instantly transforms with no fade, no shrinkage, or other visible indicator that a change is occurring.</source>
          <target state="translated">Angular에서는 애니메이션없이 여러 스타일을 설정할 수 있습니다. 그러나 더 세밀하게 조정하지 않으면 버튼이 페이드, 축소 또는 변경이 발생하고 있음을 나타내는 다른 표시없이 즉시 변형됩니다.</target>
        </trans-unit>
        <trans-unit id="db7fc84f2aa2ba81061de8add0ab492452e7b00b" translate="yes" xml:space="preserve">
          <source>In Angular, you can use the &lt;code&gt;styles&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../api/core/component#styleUrls&quot;&gt;styleUrls&lt;/a&gt;&lt;/code&gt; property of the &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; metadata to define a style sheet for a particular component.</source>
          <target state="translated">Angular에서는 &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt; 메타 데이터 의 &lt;code&gt;styles&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;../api/core/component#styleUrls&quot;&gt;styleUrls&lt;/a&gt;&lt;/code&gt; 속성 을 사용하여 특정 구성 요소의 스타일 시트를 정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="917fd81c1d70d9d7fbe4bfbac7c25842ecbe5775" translate="yes" xml:space="preserve">
          <source>In Angular, you create a component class to contain the data model and control methods. Use the TypeScript &lt;code&gt;export&lt;/code&gt; keyword to export the class so that the functionality can be imported into NgModules.</source>
          <target state="translated">Angular에서는 데이터 모델 및 컨트롤 메서드를 포함 할 구성 요소 클래스를 만듭니다. 기능을 NgModules로 가져올 수 있도록 TypeScript &lt;code&gt;export&lt;/code&gt; 키워드를 사용하여 클래스를 내 보냅니다.</target>
        </trans-unit>
        <trans-unit id="9d13198215c21edc80169cd08c0e85464770e5e5" translate="yes" xml:space="preserve">
          <source>In Angular, you pass in dependencies as arguments to the component class constructor. This example injects a &lt;code&gt;MovieService&lt;/code&gt;. The first parameter's TypeScript type tells Angular what to inject, even after minification.</source>
          <target state="translated">Angular에서는 종속성을 구성 요소 클래스 생성자에 인수로 전달합니다. 이 예제는 &lt;code&gt;MovieService&lt;/code&gt; 를 삽입합니다 . 첫 번째 매개 변수의 TypeScript 유형은 축소 후에도 Angular에 주입 대상을 알려줍니다.</target>
        </trans-unit>
        <trans-unit id="2befa90df23e1fd4a51bf9026307335169223d9a" translate="yes" xml:space="preserve">
          <source>In Angular, you use property binding; there is no built-in &lt;em&gt;hide&lt;/em&gt; directive. For more information, see &lt;a href=&quot;ajs-quick-reference#ng-show&quot;&gt;ng-show&lt;/a&gt;.</source>
          <target state="translated">Angular에서는 속성 바인딩을 사용합니다. 내장 된 &lt;em&gt;hide&lt;/em&gt; 지시문 이 없습니다 . 자세한 내용은 &lt;a href=&quot;ajs-quick-reference#ng-show&quot;&gt;ng-show를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="7cabd7a1d2e9dfa73456a5cfdfed14d83c3ff687" translate="yes" xml:space="preserve">
          <source>In AngularJS, an Angular module keeps track of controllers, services, and other code. The second argument defines the list of other modules that this module depends upon.</source>
          <target state="translated">AngularJS에서 Angular 모듈은 컨트롤러, 서비스 및 기타 코드를 추적합니다. 두 번째 인수는이 모듈이 의존하는 다른 모듈의 목록을 정의합니다.</target>
        </trans-unit>
        <trans-unit id="59f6e03fe28a109551d993bba2ab50942b6034e7" translate="yes" xml:space="preserve">
          <source>In AngularJS, an expression in curly braces denotes one-way binding. This binds the value of the element to a property in the controller associated with this template.</source>
          <target state="translated">AngularJS에서 중괄호 안의 표현식은 단방향 바인딩을 나타냅니다. 이것은 요소의 값을이 템플릿과 연결된 컨트롤러의 속성에 바인딩합니다.</target>
        </trans-unit>
        <trans-unit id="c6449941b0d5bd79435ee303f5b25fb1a3a1c3df" translate="yes" xml:space="preserve">
          <source>In AngularJS, an immediately invoked function expression (or IIFE) around controller code keeps it out of the global namespace.</source>
          <target state="translated">AngularJS에서 컨트롤러 코드 주위에 즉시 호출 된 함수 표현식 (또는 IIFE)은 전역 네임 스페이스에서 제외시킵니다.</target>
        </trans-unit>
        <trans-unit id="3402c056b50a9d166afa19ff142bd9f2d0f52a15" translate="yes" xml:space="preserve">
          <source>In AngularJS, the &lt;a href=&quot;https://docs.angularjs.org/api/ng/service/%24location&quot;&gt;$location service&lt;/a&gt; handles all routing configuration and navigation, encoding and decoding of URLS, redirects, and interactions with browser APIs. Angular uses its own underlying &lt;code&gt;&lt;a href=&quot;../api/common/location&quot;&gt;Location&lt;/a&gt;&lt;/code&gt; service for all of these tasks.</source>
          <target state="translated">AngularJS에서 &lt;a href=&quot;https://docs.angularjs.org/api/ng/service/%24location&quot;&gt;$ location 서비스&lt;/a&gt; 는 모든 라우팅 구성 및 탐색, URL 인코딩, 디코딩, 리디렉션 및 브라우저 API와의 상호 작용을 처리합니다. Angular는 이러한 모든 작업에 자체 기본 &lt;code&gt;&lt;a href=&quot;../api/common/location&quot;&gt;Location&lt;/a&gt;&lt;/code&gt; 서비스를 사용 합니다.</target>
        </trans-unit>
        <trans-unit id="eb398e0b3db43606304c259cfff7981355eca61f" translate="yes" xml:space="preserve">
          <source>In AngularJS, the &lt;code&gt;ng-class&lt;/code&gt; directive includes/excludes CSS classes based on an expression. That expression is often a key-value control object with each key of the object defined as a CSS class name, and each value defined as a template expression that evaluates to a Boolean value.</source>
          <target state="translated">AngularJS에서 &lt;code&gt;ng-class&lt;/code&gt; 지시문은 표현식을 기반으로 CSS 클래스를 포함 / 제외합니다. 이 표현식은 종종 오브젝트의 각 키가 CSS 클래스 이름으로 정의되고 각 값이 부울 값으로 평가되는 템플리트 표현식으로 정의 된 키-값 제어 오브젝트입니다.</target>
        </trans-unit>
        <trans-unit id="818af6bd07f74440493d9b442a5bd574408dafb9" translate="yes" xml:space="preserve">
          <source>In AngularJS, the &lt;code&gt;ng-click&lt;/code&gt; directive allows you to specify custom behavior when an element is clicked.</source>
          <target state="translated">AngularJS에서 &lt;code&gt;ng-click&lt;/code&gt; 지시문을 사용하면 요소를 클릭 할 때 사용자 정의 동작을 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2fbad8407ae81e7c90d5bd49b9e78709b7734b35" translate="yes" xml:space="preserve">
          <source>In AngularJS, the &lt;code&gt;ng-controller&lt;/code&gt; directive attaches a controller to the view. Using the &lt;code&gt;ng-controller&lt;/code&gt; (or defining the controller as part of the routing) ties the view to the controller code associated with that view.</source>
          <target state="translated">AngularJS에서 &lt;code&gt;ng-controller&lt;/code&gt; 지시문은 컨트롤러를 뷰에 연결합니다. &lt;code&gt;ng-controller&lt;/code&gt; 를 사용 하거나 라우팅의 일부로 컨트롤러를 정의하면 해당 뷰와 관련된 컨트롤러 코드에 뷰가 연결됩니다.</target>
        </trans-unit>
        <trans-unit id="014cadcee952b130a89b2cacda8d8fb19ba39ecf" translate="yes" xml:space="preserve">
          <source>In AngularJS, the &lt;code&gt;ng-hide&lt;/code&gt; directive shows or hides the associated HTML element based on an expression. For more information, see &lt;a href=&quot;ajs-quick-reference#ng-show&quot;&gt;ng-show&lt;/a&gt;.</source>
          <target state="translated">AngularJS에서 &lt;code&gt;ng-hide&lt;/code&gt; 지시문은 표현식을 기반으로 연관된 HTML 요소를 표시하거나 숨 깁니다. 자세한 내용은 &lt;a href=&quot;ajs-quick-reference#ng-show&quot;&gt;ng-show를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="55692422426a5f190e228d159889d4e818c0c281" translate="yes" xml:space="preserve">
          <source>In AngularJS, the &lt;code&gt;ng-href&lt;/code&gt; is often used to activate a route as part of navigation.</source>
          <target state="translated">AngularJS에서 &lt;code&gt;ng-href&lt;/code&gt; 는 종종 탐색의 일부로 경로를 활성화하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="98ac54bfebe79300df81d93eb3d99942dfa78df6" translate="yes" xml:space="preserve">
          <source>In AngularJS, the &lt;code&gt;ng-if&lt;/code&gt; directive removes or recreates a portion of the DOM, based on an expression. If the expression is false, the element is removed from the DOM.</source>
          <target state="translated">AngularJS에서 &lt;code&gt;ng-if&lt;/code&gt; 지시문은 표현식을 기반으로 DOM의 일부를 제거하거나 다시 작성합니다. 표현식이 false이면 요소가 DOM에서 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="bae5a3f3040e93734d778be2fb6b9823f2178635" translate="yes" xml:space="preserve">
          <source>In AngularJS, the &lt;code&gt;ng-model&lt;/code&gt; directive binds a form control to a property in the controller associated with the template. This provides &lt;strong&gt;two-way binding&lt;/strong&gt;, whereby any change made to the value in the view is synchronized with the model, and any change to the model is synchronized with the value in the view.</source>
          <target state="translated">AngularJS에서 &lt;code&gt;ng-model&lt;/code&gt; 지시문은 양식 컨트롤을 템플릿과 연결된 컨트롤러의 속성에 바인딩합니다. 이는 &lt;strong&gt;양방향 바인딩을&lt;/strong&gt; 제공 하여 뷰의 값을 변경하면 모델과 동기화되고 모델을 변경하면 뷰의 값과 동기화됩니다.</target>
        </trans-unit>
        <trans-unit id="903b10b4d3b7257fdd75c38b26fddc8e2292ab92" translate="yes" xml:space="preserve">
          <source>In AngularJS, the &lt;code&gt;ng-repeat&lt;/code&gt; directive repeats the associated DOM element for each item in the specified collection.</source>
          <target state="translated">AngularJS에서 &lt;code&gt;ng-repeat&lt;/code&gt; 지시문은 지정된 컬렉션의 각 항목에 대해 연관된 DOM 요소를 반복합니다.</target>
        </trans-unit>
        <trans-unit id="2ed583230e835e013e2faaccadd4c5987e0b6dcf" translate="yes" xml:space="preserve">
          <source>In AngularJS, the &lt;code&gt;ng-show&lt;/code&gt; directive shows or hides the associated DOM element, based on an expression.</source>
          <target state="translated">AngularJS에서 &lt;code&gt;ng-show&lt;/code&gt; 지시문은 표현식을 기반으로 연관된 DOM 요소를 표시하거나 숨 깁니다.</target>
        </trans-unit>
        <trans-unit id="71b37da7b6fe1a95ea082ca481f794b3337c391f" translate="yes" xml:space="preserve">
          <source>In AngularJS, the &lt;code&gt;ng-style&lt;/code&gt; directive sets a CSS style on an HTML element based on an expression. That expression is often a key-value control object with each key of the object defined as a CSS property, and each value defined as an expression that evaluates to a value appropriate for the style.</source>
          <target state="translated">AngularJS에서 &lt;code&gt;ng-style&lt;/code&gt; 지시문은 표현식을 기반으로 HTML 요소에 CSS 스타일을 설정합니다. 이 표현식은 종종 객체의 각 키가 CSS 속성으로 정의되고 각 값이 스타일에 적합한 값으로 평가되는 표현식으로 정의되는 키-값 제어 객체입니다.</target>
        </trans-unit>
        <trans-unit id="e0656ba1ea23edbe16f8089baec62aca2d5b8917" translate="yes" xml:space="preserve">
          <source>In AngularJS, the &lt;code&gt;ng-switch&lt;/code&gt; directive swaps the contents of an element by selecting one of the templates based on the current value of an expression.</source>
          <target state="translated">AngularJS에서 &lt;code&gt;ng-switch&lt;/code&gt; 지시문은 표현식의 현재 값을 기반으로 템플리트 중 하나를 선택하여 요소의 컨텐츠를 교환합니다.</target>
        </trans-unit>
        <trans-unit id="1d52894dd4f10a8182acd7f3bd00849e805e2e2e" translate="yes" xml:space="preserve">
          <source>In AngularJS, you pass in any dependencies as controller function arguments. This example injects a &lt;code&gt;MovieService&lt;/code&gt;.</source>
          <target state="translated">AngularJS에서는 모든 종속성을 컨트롤러 함수 인수로 전달합니다. 이 예제는 &lt;code&gt;MovieService&lt;/code&gt; 를 삽입합니다 .</target>
        </trans-unit>
        <trans-unit id="9ac4f51e9351e87b9cfd8dd2361b98292c81adc4" translate="yes" xml:space="preserve">
          <source>In AngularJS, you write the code for the model and methods in a controller function.</source>
          <target state="translated">AngularJS에서는 컨트롤러 함수에서 모델 및 메소드의 코드를 작성합니다.</target>
        </trans-unit>
        <trans-unit id="4f4f7dccd62d663335cfb71ca12781b89ca1acf4" translate="yes" xml:space="preserve">
          <source>In AngularJS, you write the code that provides the model and the methods for the view in a &lt;strong&gt;controller&lt;/strong&gt;. In Angular, you build a &lt;strong&gt;component&lt;/strong&gt;.</source>
          <target state="translated">AngularJS에서는 &lt;strong&gt;컨트롤러&lt;/strong&gt; 에서 뷰의 모델과 메소드를 제공하는 코드를 작성합니다 . Angular에서는 &lt;strong&gt;component&lt;/strong&gt; 를 빌드합니다 .</target>
        </trans-unit>
        <trans-unit id="17aa02fbd3f7b1d58bafeb9efaf4a3d0381fa09f" translate="yes" xml:space="preserve">
          <source>In HTML, these attributes are set using ordinary CSS styles such as color and opacity. In Angular, use the &lt;code&gt;&lt;a href=&quot;../api/animations/style&quot;&gt;style&lt;/a&gt;()&lt;/code&gt; function to specify a set of CSS styles for use with animations. You can collect a set of styles in an animation state, and give the state a name, such as &lt;code&gt;open&lt;/code&gt; or &lt;code&gt;closed&lt;/code&gt;.</source>
          <target state="translated">HTML에서 이러한 속성은 색상 및 불투명도와 같은 일반적인 CSS 스타일을 사용하여 설정됩니다. Angular에서 &lt;code&gt;&lt;a href=&quot;../api/animations/style&quot;&gt;style&lt;/a&gt;()&lt;/code&gt; 함수를 사용하여 애니메이션에 사용할 CSS 스타일 세트를 지정하십시오. 애니메이션 상태에서 스타일 세트를 수집하고 상태에 &lt;code&gt;open&lt;/code&gt; 또는 &lt;code&gt;closed&lt;/code&gt; 같은 이름을 지정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="2e23c70ae53e4e39b6efe1c2cca3a6e135570227" translate="yes" xml:space="preserve">
          <source>In JavaScript (ECMAScript), each file is a module and all objects defined in the file belong to that module. Objects can exported, making them public, and public objects can be imported for use by other modules.</source>
          <target state="translated">JavaScript (ECMAScript)에서 각 파일은 모듈이며 파일에 정의 된 모든 객체는 해당 모듈에 속합니다. 객체를 내 보내서 공용으로 만들 수 있으며 다른 모듈에서 사용하기 위해 공용 객체를 가져올 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="00113ac64c73beea3e7d378ff1f842ddd2316ba2" translate="yes" xml:space="preserve">
          <source>In JavaScript each &lt;em&gt;file&lt;/em&gt; is a module and all objects defined in the file belong to that module. The module declares some objects to be public by marking them with the &lt;code&gt;export&lt;/code&gt; key word. Other JavaScript modules use &lt;em&gt;import statements&lt;/em&gt; to access public objects from other modules.</source>
          <target state="translated">JavaScript에서 각 &lt;em&gt;파일&lt;/em&gt; 은 모듈이며 파일에 정의 된 모든 객체는 해당 모듈에 속합니다. 모듈은 일부 키워드를 &lt;code&gt;export&lt;/code&gt; 키워드 로 표시하여 공용으로 선언합니다 . 다른 JavaScript 모듈은 &lt;em&gt;import 문&lt;/em&gt; 을 사용 하여 다른 모듈에서 공용 객체에 액세스합니다.</target>
        </trans-unit>
        <trans-unit id="fb85040b15049e982959bb2339113e3e8a73a679" translate="yes" xml:space="preserve">
          <source>In JavaScript, modules are individual files with JavaScript code in them. To make what&amp;rsquo;s in them available, you write an export statement, usually after the relevant code, like this:</source>
          <target state="translated">JavaScript에서 모듈은 JavaScript 코드가 포함 된 개별 파일입니다. 그 안에 들어있는 것을 만들기 위해, 보통 다음과 같이 관련 코드 뒤에 내보내기 명령문을 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="9bdc952c572e3628d4fe93bd50574b4a309ba81b" translate="yes" xml:space="preserve">
          <source>In Sass and Stylus you can make use of the &lt;code&gt;includePaths&lt;/code&gt; functionality for both component and global styles, which allows you to add extra base paths that will be checked for imports.</source>
          <target state="translated">Sass 및 Stylus에서는 구성 요소 및 전역 스타일 모두 에 대해 &lt;code&gt;includePaths&lt;/code&gt; 기능을 사용할 수 있으므로 가져 오기를 검사 할 추가 기본 경로를 추가 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="92a7b3a74d45330ef286338b8bdb3743222ebf0d" translate="yes" xml:space="preserve">
          <source>In Visual Studio, select &lt;code&gt;File&lt;/code&gt; | &lt;code&gt;New&lt;/code&gt; | &lt;code&gt;Project&lt;/code&gt; from the menu.</source>
          <target state="translated">Visual Studio에서 &lt;code&gt;File&lt;/code&gt; | &lt;code&gt;New&lt;/code&gt; | 메뉴에서 &lt;code&gt;Project&lt;/code&gt; 하십시오.</target>
        </trans-unit>
        <trans-unit id="7a46a63cb5e6dd220a5995dd3ad65a3d4cfd3913" translate="yes" xml:space="preserve">
          <source>In Windows, by default, one application can only have 6 websocket connections, &lt;a href=&quot;https://msdn.microsoft.com/library/ee330736%28v=vs.85%29.aspx?f=255&amp;amp;MSPPError=-2147217396#websocket_maxconn&quot;&gt;MSDN WebSocket Settings&lt;/a&gt;. So when IE is refreshed (manually or automatically by &lt;code&gt;ng serve&lt;/code&gt;), sometimes the websocket does not close properly. When websocket connections exceed the limitations, a &lt;code&gt;SecurityError&lt;/code&gt; will be thrown. This error will not affect the angular application, you can just restart IE to clear this error, or modify the windows registry to update the limitations.</source>
          <target state="translated">Windows에서 기본적으로 하나의 응용 프로그램은 6 개의 &lt;a href=&quot;https://msdn.microsoft.com/library/ee330736%28v=vs.85%29.aspx?f=255&amp;amp;MSPPError=-2147217396#websocket_maxconn&quot;&gt;웹 소켓&lt;/a&gt; 연결 ( MSDN WebSocket 설정) 만 가질 수 있습니다 . 따라서 IE를 새로 고치면 ( &lt;code&gt;ng serve&lt;/code&gt; 가 수동 또는 자동으로 ) 웹 소켓이 제대로 닫히지 않는 경우가 있습니다. 웹 소켓 연결이 제한을 초과하면 &lt;code&gt;SecurityError&lt;/code&gt; 가 발생합니다. 이 오류는 각도 응용 프로그램에 영향을 미치지 않습니다. IE를 다시 시작하여이 오류를 지우거나 Windows 레지스트리를 수정하여 제한을 업데이트 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0e58c3e6bb3aef781aa7181c15464f286c38606f" translate="yes" xml:space="preserve">
          <source>In a &lt;a href=&quot;toh-pt6&quot;&gt;later tutorial on HTTP&lt;/a&gt;, you'll learn that Angular's &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; methods return RxJS &lt;code&gt;Observable&lt;/code&gt;s. In this tutorial, you'll simulate getting data from the server with the RxJS &lt;code&gt;of()&lt;/code&gt; function.</source>
          <target state="translated">&lt;a href=&quot;toh-pt6&quot;&gt;HTTP에&lt;/a&gt; 대한 나중의 튜토리얼 에서는 Angular의 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; 메소드가 RxJS &lt;code&gt;Observable&lt;/code&gt; 을 반환 한다는 것을 알게 될 것입니다 . 이 자습서에서는 RxJS &lt;code&gt;of()&lt;/code&gt; 함수 를 사용하여 서버에서 데이터를 가져 오는 것을 시뮬레이트 합니다.</target>
        </trans-unit>
        <trans-unit id="3cf5e053e84e39697369f0ce6c53d2386e757b8d" translate="yes" xml:space="preserve">
          <source>In a common anti-XSRF technique, the application server sends a randomly generated authentication token in a cookie. The client code reads the cookie and adds a custom request header with the token in all subsequent requests. The server compares the received cookie value to the request header value and rejects the request if the values are missing or don't match.</source>
          <target state="translated">일반적인 안티 -XSRF 기술에서 응용 프로그램 서버는 임의로 생성 된 인증 토큰을 쿠키로 보냅니다. 클라이언트 코드는 쿠키를 읽고 이후의 모든 요청에서 토큰과 함께 사용자 지정 요청 헤더를 추가합니다. 서버는 수신 된 쿠키 값을 요청 헤더 값과 비교하고 값이 누락되거나 일치하지 않으면 요청을 거부합니다.</target>
        </trans-unit>
        <trans-unit id="1d8d7cbdfb73e6a03899934d4c9da16af41b336d" translate="yes" xml:space="preserve">
          <source>In a cross-site request forgery (CSRF or XSRF), an attacker tricks the user into visiting a different web page (such as &lt;code&gt;evil.com&lt;/code&gt;) with malignant code that secretly sends a malicious request to the application's web server (such as &lt;code&gt;example-bank.com&lt;/code&gt;).</source>
          <target state="translated">크로스 사이트 요청 위조 (CSRF 또는 XSRF)에서, 공격자 트릭 (예 : 다른 웹 페이지를 방문에 사용자 &lt;code&gt;evil.com&lt;/code&gt; 비밀리에 응용 프로그램의 웹 서버에 악의적 인 요청을 전송하는 악성 코드) (예 : &lt;code&gt;example-bank.com&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="c294d986a3a0791f76abb2659d73016c21090bb6" translate="yes" xml:space="preserve">
          <source>In a hybrid app you run both frameworks at the same time. This means that you need at least one module each from both AngularJS and Angular.</source>
          <target state="translated">하이브리드 앱에서는 두 프레임 워크를 동시에 실행합니다. 이것은 AngularJS와 Angular에서 각각 하나 이상의 모듈이 필요하다는 것을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="dd49097c4af31e8ff37d4dffaf61ab60999b9c63" translate="yes" xml:space="preserve">
          <source>In a hybrid application you run both versions of Angular at the same time. That means that you need at least one module each from both AngularJS and Angular. You will import &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; inside the NgModule, and then use it for bootstrapping the AngularJS module.</source>
          <target state="translated">하이브리드 애플리케이션에서는 두 버전의 Angular를 동시에 실행합니다. 즉, AngularJS와 Angular에서 각각 하나 이상의 모듈이 필요합니다. NgModule 내부에서 &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; 을 가져온 다음 AngularJS 모듈을 부트 스트랩하는 데 사용합니다.</target>
        </trans-unit>
        <trans-unit id="eecc29f766a5b275d626b33d41f80a280c20298d" translate="yes" xml:space="preserve">
          <source>In a large translation project, you would send the &lt;code&gt;messages.fr.xlf&lt;/code&gt; file to a French translator who would enter the translations using an XLIFF file editor.</source>
          <target state="translated">대규모 번역 프로젝트에서는 &lt;code&gt;messages.fr.xlf&lt;/code&gt; 파일을 프랑스어 번역가에게 보내면 XLIFF 파일 편집기를 사용하여 번역을 입력하게됩니다.</target>
        </trans-unit>
        <trans-unit id="65d7af41d00fdcbff992b94c404b92c9d9626cd2" translate="yes" xml:space="preserve">
          <source>In a logical tree, this same idea might look like this:</source>
          <target state="translated">논리 트리에서 이와 동일한 아이디어는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="622221c893367be5aa97d75408ed81b53a6c93b4" translate="yes" xml:space="preserve">
          <source>In a reactive form, the source of truth is the component class. Instead of adding validators through attributes in the template, you add validator functions directly to the form control model in the component class. Angular then calls these functions whenever the value of the control changes.</source>
          <target state="translated">반응적인 형태에서 진실의 근원은 구성 요소 클래스입니다. 템플리트의 속성을 통해 유효성 검증기를 추가하는 대신 컴포넌트 클래스의 양식 제어 모델에 유효성 검증기 함수를 직접 추가합니다. 그러면 Angular는 컨트롤 값이 변경 될 때마다이 함수를 호출합니다.</target>
        </trans-unit>
        <trans-unit id="48d79754006d33a97227a0a4118efa5286db6a19" translate="yes" xml:space="preserve">
          <source>In a real application, the element that receives focus will depend on your specific application structure and layout. The focused element should put users in a position to immediately move into the main content that has just been routed into view. You should avoid situations where focus returns to the &lt;code&gt;body&lt;/code&gt; element after a route change.</source>
          <target state="translated">실제 응용 프로그램에서 포커스를받는 요소는 특정 응용 프로그램 구조 및 레이아웃에 따라 다릅니다. 집중된 요소는 사용자가 방금 라우팅 된 기본 컨텐츠로 즉시 이동할 수있는 위치에 있어야합니다. 경로 변경 후 초점이 &lt;code&gt;body&lt;/code&gt; 요소 로 돌아가는 상황을 피해야 합니다.</target>
        </trans-unit>
        <trans-unit id="39db9cdd4eed1089be0ce0d095908e3625bd0e28" translate="yes" xml:space="preserve">
          <source>In a real world application, the &lt;code&gt;HeroesService&lt;/code&gt; is responsible for making an HTTP request to the hero database to check if the alter ego is available. From the validator's point of view, the actual implementation of the service is not important, so we can just code against the &lt;code&gt;HeroesService&lt;/code&gt; interface.</source>
          <target state="translated">실제 응용 프로그램에서 &lt;code&gt;HeroesService&lt;/code&gt; 는 변경 자아를 사용할 수 있는지 확인하기 위해 영웅 데이터베이스에 HTTP 요청을 작성합니다. 검증 자의 관점에서 서비스의 실제 구현은 중요하지 않으므로 &lt;code&gt;HeroesService&lt;/code&gt; 인터페이스 에 대해서만 코딩 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d4f059d661f6b60ab2d7cea20ac87eea7d864f29" translate="yes" xml:space="preserve">
          <source>In a string, as milliseconds: &lt;code&gt;'100ms'&lt;/code&gt;</source>
          <target state="translated">문자열에서 밀리 초 : &lt;code&gt;'100ms'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2f2235358d12c7b39b876e3be62943c44b49d011" translate="yes" xml:space="preserve">
          <source>In a string, as seconds: &lt;code&gt;'0.1s'&lt;/code&gt;</source>
          <target state="translated">문자열에서 초 단위 : &lt;code&gt;'0.1s'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="94ab58ff64569d109e86670107a427804d9c8361" translate="yes" xml:space="preserve">
          <source>In a typical Angular project, the polyfill is not used in production builds, so removing it should not impact production applications. The goal behind this removal is overall simplification of the build setup and decrease in the number of external dependencies.</source>
          <target state="translated">일반적인 Angular 프로젝트에서 폴리 필은 프로덕션 빌드에 사용되지 않으므로 제거하면 프로덕션 애플리케이션에 영향을 미치지 않습니다. 이 제거의 목표는 빌드 설정을 전반적으로 단순화하고 외부 종속성 수를 줄이는 것입니다.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
