<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="angular">
    <body>
      <group id="angular">
        <trans-unit id="213e711f52a371405007d940340a810da2cec071" translate="yes" xml:space="preserve">
          <source>Service worker configuration</source>
          <target state="translated">서비스 워커 구성</target>
        </trans-unit>
        <trans-unit id="1a95e38073e2323975c4e77f63c0aa4646408c33" translate="yes" xml:space="preserve">
          <source>Service worker in action: a tour</source>
          <target state="translated">행동하는 서비스 기사 : 둘러보기</target>
        </trans-unit>
        <trans-unit id="47c66d180e31b1cc93e9ad75212e0e3e19f310ee" translate="yes" xml:space="preserve">
          <source>Service worker in production</source>
          <target state="translated">생산 서비스 노동자</target>
        </trans-unit>
        <trans-unit id="ade1379af8a87a9d51d05ff28dafbe574ceb984f" translate="yes" xml:space="preserve">
          <source>Service worker updates</source>
          <target state="translated">서비스 워커 업데이트</target>
        </trans-unit>
        <trans-unit id="f1a171133ce6596d2e430d1bd9ae7f5bb45aa66f" translate="yes" xml:space="preserve">
          <source>Service worker versionedFiles</source>
          <target state="translated">서비스 워커 버전 파일</target>
        </trans-unit>
        <trans-unit id="5e6526c00f376a58521de24f68551dd520efff44" translate="yes" xml:space="preserve">
          <source>Service workers augment the traditional web deployment model and empower applications to deliver a user experience with the reliability and performance on par with natively-installed code. Adding a service worker to an Angular application is one of the steps for turning an application into a &lt;a href=&quot;https://developers.google.com/web/progressive-web-apps/&quot;&gt;Progressive Web App&lt;/a&gt; (also known as a PWA).</source>
          <target state="translated">서비스 작업자는 기존 웹 배포 모델을 보강하고 응용 프로그램에 권한을 부여하여 기본적으로 설치된 코드와 비교하여 안정성과 성능으로 사용자 경험을 제공합니다. 서비스 워커를 Angular 애플리케이션에 추가하는 것은 애플리케이션을 &lt;a href=&quot;https://developers.google.com/web/progressive-web-apps/&quot;&gt;Progressive Web App&lt;/a&gt; (PWA라고도 함)로 전환하는 단계 중 하나입니다 .</target>
        </trans-unit>
        <trans-unit id="05d9d31cda49f702ca155a823fabe52cfd7b0d78" translate="yes" xml:space="preserve">
          <source>Service workers function as a network proxy. They intercept all outgoing HTTP requests made by the application and can choose how to respond to them. For example, they can query a local cache and deliver a cached response if one is available. Proxying isn't limited to requests made through programmatic APIs, such as &lt;code&gt;fetch&lt;/code&gt;; it also includes resources referenced in HTML and even the initial request to &lt;code&gt;index.html&lt;/code&gt;. Service worker-based caching is thus completely programmable and doesn't rely on server-specified caching headers.</source>
          <target state="translated">서비스 워커는 네트워크 프록시로 작동합니다. 그들은 응용 프로그램에서 보낸 모든 나가는 HTTP 요청을 가로 채고 응답 방법을 선택할 수 있습니다. 예를 들어, 로컬 캐시를 쿼리하고 캐시 된 응답이있는 경우이를 전달할 수 있습니다. 프록 싱은 &lt;code&gt;fetch&lt;/code&gt; 와 같은 프로그래밍 방식 API를 통한 요청에만 국한되지 않습니다 . 또한 HTML에서 참조되는 리소스 및 &lt;code&gt;index.html&lt;/code&gt; 에 대한 초기 요청도 포함합니다 . 따라서 서비스 워커 기반 캐싱은 완전히 프로그래밍 가능하며 서버 지정 캐싱 헤더에 의존하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="a84dec1de2b44f33c58b7e0f7e1b6a3aa3370a9c" translate="yes" xml:space="preserve">
          <source>Service workers in Angular</source>
          <target state="translated">Angular의 서비스 근로자</target>
        </trans-unit>
        <trans-unit id="fbe47937f29ddbaa88baab42e70ae59b890c12cb" translate="yes" xml:space="preserve">
          <source>ServiceMessageBroker</source>
          <target state="translated">ServiceMessageBroker</target>
        </trans-unit>
        <trans-unit id="cf408ba8f4f4e39affef2df94bc39449009cdbfe" translate="yes" xml:space="preserve">
          <source>ServiceMessageBrokerFactory</source>
          <target state="translated">ServiceMessageBrokerFactory</target>
        </trans-unit>
        <trans-unit id="22547292247ba751d19d43d00fed2e196c575dc7" translate="yes" xml:space="preserve">
          <source>ServiceWorkerModule</source>
          <target state="translated">ServiceWorkerModule</target>
        </trans-unit>
        <trans-unit id="5cbd584046863bc7b753e57e8681a98a87f36f0f" translate="yes" xml:space="preserve">
          <source>Services</source>
          <target state="translated">Services</target>
        </trans-unit>
        <trans-unit id="dc81df13273d226b0e1cb8e0b9492326f4cc0a8f" translate="yes" xml:space="preserve">
          <source>Services and controllers can be turned into &lt;em&gt;classes&lt;/em&gt;. That way they'll be a step closer to becoming Angular service and component classes, which will make life easier after the upgrade.</source>
          <target state="translated">서비스와 컨트롤러는 &lt;em&gt;클래스&lt;/em&gt; 로 전환 될 수 있습니다 . 그렇게하면 Angular 서비스 및 구성 요소 클래스가되는 데 한 걸음 더 다 가서 업그레이드 후 더 쉽게 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d6f38e4a46ab4366026c2b9fabca761864ce2181" translate="yes" xml:space="preserve">
          <source>Services and dependency injection</source>
          <target state="translated">서비스 및 의존성 주입</target>
        </trans-unit>
        <trans-unit id="04795178e6ef84113f6ba4f86e592ec8793c6edb" translate="yes" xml:space="preserve">
          <source>Services are a great way to share information among classes that &lt;em&gt;don't know each other&lt;/em&gt;. You'll create a &lt;code&gt;MessageService&lt;/code&gt; and inject it in two places:</source>
          <target state="translated">서비스는 &lt;em&gt;서로를 모르는&lt;/em&gt; 클래스간에 정보를 공유 할 수있는 좋은 방법 입니다. &lt;code&gt;MessageService&lt;/code&gt; 를 작성하여 다음 두 곳에 삽입하십시오.</target>
        </trans-unit>
        <trans-unit id="03d8aac425a91514530a541229c6232f51e72c37" translate="yes" xml:space="preserve">
          <source>Services are an integral part of Angular applications. In Angular, a service is an instance of a class that can be made available to any part of your application using Angular's &lt;a href=&quot;../guide/glossary#dependency-injection-di&quot;&gt;dependency injection system&lt;/a&gt;.</source>
          <target state="translated">서비스는 Angular 응용 프로그램의 필수 부분입니다. Angular에서 서비스는 Angular의 &lt;a href=&quot;../guide/glossary#dependency-injection-di&quot;&gt;의존성 주입 시스템을&lt;/a&gt; 사용하여 애플리케이션의 모든 부분에서 사용할 수있는 클래스의 인스턴스입니다 .</target>
        </trans-unit>
        <trans-unit id="287e789611aae413d7c2761283ceeec6b7ea8297" translate="yes" xml:space="preserve">
          <source>Services are often the easiest files to unit test. Here are some synchronous and asynchronous unit tests of the &lt;code&gt;ValueService&lt;/code&gt; written without assistance from Angular testing utilities.</source>
          <target state="translated">서비스는 종종 단위 테스트에 가장 쉬운 파일입니다. 다음은 Angular 테스트 유틸리티의 도움없이 작성된 &lt;code&gt;ValueService&lt;/code&gt; 의 동기 및 비동기 단위 테스트입니다 .</target>
        </trans-unit>
        <trans-unit id="9305c2ae51bc6317f3b7e0f08420dbb9a45604bc" translate="yes" xml:space="preserve">
          <source>Services are singletons</source>
          <target state="translated">서비스는 싱글 톤입니다</target>
        </trans-unit>
        <trans-unit id="839cb93496558a535f12b31d66bf5a34f34d95c6" translate="yes" xml:space="preserve">
          <source>Services are singletons &lt;em&gt;within the scope of an injector&lt;/em&gt;. That is, there is at most one instance of a service in a given injector.</source>
          <target state="translated">서비스는 &lt;em&gt;인젝터 범위 내의&lt;/em&gt; 싱글 톤 입니다. 즉, 주어진 인젝터에 서비스의 인스턴스가 최대 하나 있습니다.</target>
        </trans-unit>
        <trans-unit id="a288e60c8f7e7e905223f6ac8c505dcde6c5c899" translate="yes" xml:space="preserve">
          <source>Services are the place where you share data between parts of your application. For the online store, the cart service is where you store your cart data and methods.</source>
          <target state="translated">서비스는 응용 프로그램의 일부간에 데이터를 공유하는 장소입니다. 온라인 상점의 경우 카트 서비스는 카트 데이터 및 방법을 저장하는 곳입니다.</target>
        </trans-unit>
        <trans-unit id="1a2effe45976526a6c2870605e8ffd3001bd45af" translate="yes" xml:space="preserve">
          <source>Services can be used to share data across components:</source>
          <target state="translated">서비스를 사용하여 구성 요소간에 데이터를 공유 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="762de451edb00a9b20f3307ccbb3c3d98d62cdf8" translate="yes" xml:space="preserve">
          <source>Services can depend on other services. For example, here's a &lt;code&gt;HeroService&lt;/code&gt; that depends on the &lt;code&gt;Logger&lt;/code&gt; service, and also uses &lt;code&gt;BackendService&lt;/code&gt; to get heroes. That service in turn might depend on the &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; service to fetch heroes asynchronously from a server.</source>
          <target state="translated">서비스는 다른 서비스에 의존 할 수 있습니다. 예를 들어 다음 은 &lt;code&gt;Logger&lt;/code&gt; 서비스 에 의존 하는 &lt;code&gt;HeroService&lt;/code&gt; 입니다. 또한 &lt;code&gt;BackendService&lt;/code&gt; 를 사용 하여 영웅을 가져옵니다. 이 서비스 는 서버에서 비동기 적으로 영웅을 가져 오기 위해 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; 서비스 에 의존 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="401c0f41762eda8ff2cea4cff5e794d5e393d21b" translate="yes" xml:space="preserve">
          <source>Services can have their own dependencies. &lt;code&gt;HeroService&lt;/code&gt; is very simple and doesn't have any dependencies of its own. Suppose, however, that you want it to report its activities through a logging service. You can apply the same &lt;em&gt;constructor injection&lt;/em&gt; pattern, adding a constructor that takes a &lt;code&gt;Logger&lt;/code&gt; parameter.</source>
          <target state="translated">서비스에는 자체 종속성이있을 수 있습니다. &lt;code&gt;HeroService&lt;/code&gt; 는 매우 간단하며 자체 종속성이 없습니다. 그러나 로깅 서비스를 통해 활동을보고하려고한다고 가정하십시오. &lt;code&gt;Logger&lt;/code&gt; 매개 변수를 사용 하는 생성자를 추가 하여 동일한 &lt;em&gt;생성자 주입&lt;/em&gt; 패턴을 적용 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="827e3e37481ca564382603de24f2e8a86efa9fd1" translate="yes" xml:space="preserve">
          <source>Services often depend on other services that Angular injects into the constructor. In many cases, it's easy to create and &lt;em&gt;inject&lt;/em&gt; these dependencies by hand while calling the service's constructor.</source>
          <target state="translated">서비스는 종종 Angular가 생성자에 주입하는 다른 서비스에 의존합니다. 대부분의 경우 서비스 생성자를 호출하는 동안 이러한 종속성을 손 으로 만들고 &lt;em&gt;주입하는&lt;/em&gt; 것이 쉽습니다 .</target>
        </trans-unit>
        <trans-unit id="3aee7269d5419be2872cc98e6def16b7c3d10a8f" translate="yes" xml:space="preserve">
          <source>Services should declare their own providers (rather than declaring providers in the NgModule or a component), so that they are &lt;em&gt;tree-shakable&lt;/em&gt;. This allows the compiler to leave the service out of the bundle if it never gets injected into the application that imports the library. For more about this, see &lt;a href=&quot;dependency-injection-providers#tree-shakable-providers&quot;&gt;Tree-shakable providers&lt;/a&gt;.</source>
          <target state="translated">서비스는 그들이 그래서, (오히려 NgModule 또는 구성 요소의 제공을 선언보다) 자신의 공급자를 선언해야 &lt;em&gt;나무 shakable&lt;/em&gt; . 이를 통해 라이브러리를 가져 오는 응용 프로그램에 서비스가 주입되지 않으면 컴파일러가 서비스를 번들에서 벗어날 수 있습니다. 이에 대한 자세한 내용은 &lt;a href=&quot;dependency-injection-providers#tree-shakable-providers&quot;&gt;Tree-shakable provider를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="e82dfcf33341cfc227b80e32c5ea22e95b6eb8ea" translate="yes" xml:space="preserve">
          <source>Services that need other services</source>
          <target state="translated">다른 서비스가 필요한 서비스</target>
        </trans-unit>
        <trans-unit id="f848b0572f2356254f8426cf9aadf6c21acafad6" translate="yes" xml:space="preserve">
          <source>Services with dependencies</source>
          <target state="translated">종속성이있는 서비스</target>
        </trans-unit>
        <trans-unit id="875fd6861e3347ad594641b3f4346b9a8c43fa36" translate="yes" xml:space="preserve">
          <source>Serving static files safely</source>
          <target state="translated">정적 파일을 안전하게 제공</target>
        </trans-unit>
        <trans-unit id="01d38b48a65d5fbee3c3b1c260d84db7448d9f37" translate="yes" xml:space="preserve">
          <source>Serving with &lt;code&gt;http-server&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;http-server&lt;/code&gt; 와 함께 제공</target>
        </trans-unit>
        <trans-unit id="f17c419e71b4e98023c7e72ce693f22d6afc01e1" translate="yes" xml:space="preserve">
          <source>Set a breakpoint in the test.</source>
          <target state="translated">테스트에서 중단 점을 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="738cb3afa0421966b35119f3c60bb9e54dc062c6" translate="yes" xml:space="preserve">
          <source>Set a collection of style values using an expression that returns key-value pairs.</source>
          <target state="translated">키-값 쌍을 반환하는 표현식을 사용하여 스타일 값 모음을 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="69b4a6a1b9b3546b5c8cee5617c41058437ce5e3" translate="yes" xml:space="preserve">
          <source>Set a custom id for persistence and maintenance</source>
          <target state="translated">지속성 및 유지 관리를위한 사용자 지정 ID 설정</target>
        </trans-unit>
        <trans-unit id="86c2a8c055de05a1bd2f84270398f0dbff8d26c6" translate="yes" xml:space="preserve">
          <source>Set animation timings, styles, keyframes, and transitions.</source>
          <target state="translated">애니메이션 타이밍, 스타일, 키 프레임 및 전환을 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="471487a1a43d8d54584532e4c1207f67ffaa2bdf" translate="yes" xml:space="preserve">
          <source>Set default headers</source>
          <target state="translated">기본 헤더 설정</target>
        </trans-unit>
        <trans-unit id="56d8bce48f1e5ed84bb4cf4b7454b851a30fa5d8" translate="yes" xml:space="preserve">
          <source>Set the &lt;a href=&quot;core/gettestability&quot;&gt;&lt;code&gt;GetTestability&lt;/code&gt;&lt;/a&gt; implementation used by the Angular testing framework.</source>
          <target state="translated">Angular 테스트 프레임 워크에서 사용 하는 &lt;a href=&quot;core/gettestability&quot;&gt; &lt;code&gt;GetTestability&lt;/code&gt; &lt;/a&gt; 구현을 설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="552e9310253e5b69ac0c8293430d68334ec09c09" translate="yes" xml:space="preserve">
          <source>Set the &lt;a href=&quot;gettestability&quot;&gt;&lt;code&gt;GetTestability&lt;/code&gt;&lt;/a&gt; implementation used by the Angular testing framework.</source>
          <target state="translated">Angular 테스트 프레임 워크에서 사용 하는 &lt;a href=&quot;gettestability&quot;&gt; &lt;code&gt;GetTestability&lt;/code&gt; &lt;/a&gt; 구현을 설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="054a7c89e7547798aa16254c5f250a3a4ad3110c" translate="yes" xml:space="preserve">
          <source>Set the &lt;code&gt;&lt;a href=&quot;../api/router/route#loadChildren&quot;&gt;loadChildren&lt;/a&gt;&lt;/code&gt; string to load the &lt;code&gt;CrisisCenterModule&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;CrisisCenterModule&lt;/code&gt; 을로드 하도록 &lt;code&gt;&lt;a href=&quot;../api/router/route#loadChildren&quot;&gt;loadChildren&lt;/a&gt;&lt;/code&gt; 문자열을 설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="3f573bd4f8c31617c5a64f08af3a4efaa8e4eb7d" translate="yes" xml:space="preserve">
          <source>Set the &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkwithhref#target&quot;&gt;target&lt;/a&gt;&lt;/code&gt; in the &lt;code&gt;compilerOptions&lt;/code&gt; to &lt;code&gt;es5&lt;/code&gt;.</source>
          <target state="translated">설정 &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkwithhref#target&quot;&gt;target&lt;/a&gt;&lt;/code&gt; 에 &lt;code&gt;compilerOptions&lt;/code&gt; 에 &lt;code&gt;es5&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="750f6c8de781b0a9bfdf9aecda1c404e9719facb" translate="yes" xml:space="preserve">
          <source>Set the &lt;code&gt;data.preload&lt;/code&gt; flag in the &lt;code&gt;crisis-center&lt;/code&gt; route in the &lt;code&gt;AppRoutingModule&lt;/code&gt;.</source>
          <target state="translated">설정 &lt;code&gt;data.preload&lt;/code&gt; 의 에 플래그를 &lt;code&gt;crisis-center&lt;/code&gt; 의 경로 &lt;code&gt;AppRoutingModule&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="55875d634ce533933ff366c19098dc27280143e9" translate="yes" xml:space="preserve">
          <source>Set the &lt;code&gt;shippingCosts&lt;/code&gt; property using the &lt;code&gt;getShippingPrices()&lt;/code&gt; method from cart service.</source>
          <target state="translated">카트 서비스 의 &lt;code&gt;getShippingPrices()&lt;/code&gt; 메소드를 사용하여 &lt;code&gt;shippingCosts&lt;/code&gt; 특성을 설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="b16b24857617917dc691c200f30eae236f5825e1" translate="yes" xml:space="preserve">
          <source>Set the &lt;code&gt;updateOn&lt;/code&gt; option to &lt;code&gt;'blur'&lt;/code&gt; to update on the blur &lt;code&gt;event&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;updateOn&lt;/code&gt; &lt;code&gt;event&lt;/code&gt; 를 업데이트 하려면 updateOn 옵션을 &lt;code&gt;'blur'&lt;/code&gt; 로 설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="64745b07552e13c9c61a550ec430816d59d4545f" translate="yes" xml:space="preserve">
          <source>Set the &lt;code&gt;updateOn&lt;/code&gt; option to &lt;code&gt;'submit'&lt;/code&gt; to update on a submit &lt;code&gt;event&lt;/code&gt;.</source>
          <target state="translated">제출 &lt;code&gt;event&lt;/code&gt; 에서 업데이트 하려면 &lt;code&gt;updateOn&lt;/code&gt; 옵션을 &lt;code&gt;'submit'&lt;/code&gt; 으로 설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="643460427f8dc3513c9eff9596a85daae5e1255a" translate="yes" xml:space="preserve">
          <source>Set the CSS &lt;em&gt;attribute selector&lt;/em&gt; that identifies the directive when applied to an element in a template.</source>
          <target state="translated">템플리트의 요소에 적용될 때 지시문을 식별 하는 CSS &lt;em&gt;속성 선택기&lt;/em&gt; 를 설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="7e4c0854883b7166fb5c76f18fdd788456cb90b6" translate="yes" xml:space="preserve">
          <source>Set the complete value for the form group</source>
          <target state="translated">양식 그룹의 전체 값을 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="3d106312dcdcec010586e075d6c26577e1d33160" translate="yes" xml:space="preserve">
          <source>Set the font of the containing element to the result of an expression.</source>
          <target state="translated">포함하는 요소의 글꼴을 표현식의 결과로 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="08a6bf6ca8a531b700e00d9483de23606b228acf" translate="yes" xml:space="preserve">
          <source>Set the items using the cart service's &lt;code&gt;getItems()&lt;/code&gt; method. (You defined this method &lt;a href=&quot;https://angular.io/start/start/data#generate-cart-service&quot;&gt;when you generated &lt;code&gt;cart.service.ts&lt;/code&gt;&lt;/a&gt;.)</source>
          <target state="translated">카트 서비스의 &lt;code&gt;getItems()&lt;/code&gt; 메소드를 사용하여 항목을 설정하십시오 . ( &lt;a href=&quot;https://angular.io/start/start/data#generate-cart-service&quot;&gt; &lt;code&gt;cart.service.ts&lt;/code&gt; &lt;/a&gt; 를 생성 할 때이 방법을 정의했습니다 .)</target>
        </trans-unit>
        <trans-unit id="50ad64b7d37e4ccb6b540e90cd0c3f10f634201c" translate="yes" xml:space="preserve">
          <source>Set the new value for the input to &lt;em&gt;Red&lt;/em&gt;, and dispatch the &quot;input&quot; event on the form input element.</source>
          <target state="translated">입력의 새 값을 &lt;em&gt;Red로&lt;/em&gt; 설정하고 양식 입력 요소에서 &quot;input&quot;이벤트를 전달하십시오.</target>
        </trans-unit>
        <trans-unit id="bae9fdb83bd247d251685df2b94426ce39765a6b" translate="yes" xml:space="preserve">
          <source>Set the proxy configuration file to &lt;code&gt;proxy.conf.js&lt;/code&gt; (instead of &lt;code&gt;proxy.conf.json&lt;/code&gt;), and specify configuration files as in the following example.</source>
          <target state="translated">프록시 구성 파일을 &lt;code&gt;proxy.conf.js&lt;/code&gt; on 대신 &lt;code&gt;proxy.conf.json&lt;/code&gt; 설정하고 다음 예제와 같이 구성 파일을 지정하십시오.</target>
        </trans-unit>
        <trans-unit id="2520a4a20a770223794dbe482bd062cd28c97b3f" translate="yes" xml:space="preserve">
          <source>Set the router to compose HTML5 browser URLs.</source>
          <target state="translated">라우터가 HTML5 브라우저 URL을 작성하도록 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="dece8573c3fa34cb3d93f7729f8d90e971614b31" translate="yes" xml:space="preserve">
          <source>Set the title of the current HTML document.</source>
          <target state="translated">현재 HTML 문서의 제목을 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="cb1f4eb94fb2add08c2048ba41248f137bd52b32" translate="yes" xml:space="preserve">
          <source>Set the updateOn property for all controls in a form array</source>
          <target state="translated">양식 배열의 모든 컨트롤에 대해 updateOn 속성을 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="3926d1813cf37caf94ee3a8384a5fde2db026aa4" translate="yes" xml:space="preserve">
          <source>Set the updateOn property for all controls in a form group</source>
          <target state="translated">양식 그룹의 모든 컨트롤에 대해 updateOn 속성을 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="27f14c9a108c4c2368f8e2a7f390858f90f8e047" translate="yes" xml:space="preserve">
          <source>Set the value corresponding to a key.</source>
          <target state="translated">키에 해당하는 값을 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="a798734ef7e53b4ea12d96417cb4571dae5b053c" translate="yes" xml:space="preserve">
          <source>Set the value of an attribute directly with an &lt;strong&gt;attribute binding&lt;/strong&gt;. This is the only exception to the rule that a binding sets a target property and the only binding that creates and sets an attribute.</source>
          <target state="translated">&lt;strong&gt;속성 바인딩을&lt;/strong&gt; 사용하여 &lt;strong&gt;속성&lt;/strong&gt; 값을 직접 설정하십시오 . 바인딩이 대상 속성을 설정하는 규칙과 속성을 만들고 설정하는 유일한 바인딩은 예외입니다.</target>
        </trans-unit>
        <trans-unit id="254ca05987dfc9294af58db7ae1faf489fcf3c04" translate="yes" xml:space="preserve">
          <source>Set the values for the controls in the form array</source>
          <target state="translated">양식 배열에서 컨트롤 값을 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="ad7256a72229358f8f1fff2d736e08ee67e29e4b" translate="yes" xml:space="preserve">
          <source>Set the width of the containing element to a pixel value returned by an expression.</source>
          <target state="translated">포함하는 요소의 너비를 표현식에서 리턴 한 픽셀 값으로 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="a9b9fa97a9536da22e35167aab455d8ba3bdcf67" translate="yes" xml:space="preserve">
          <source>Set this to &lt;code&gt;true&lt;/code&gt; when you want the fixture to detect changes automatically.</source>
          <target state="translated">조명기가 자동으로 변경을 감지하도록하려면 이것을 &lt;code&gt;true&lt;/code&gt; 로 설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="a90835fe79ccd2570de94f05d1889c0923d56316" translate="yes" xml:space="preserve">
          <source>Set to &lt;code&gt;true&lt;/code&gt; if you are using TypeScript's &lt;code&gt;--outFile&lt;/code&gt; option, because the metadata files are not valid for this style of TypeScript output. However, we do not recommend using &lt;code&gt;--outFile&lt;/code&gt; with Angular. Use a bundler, such as &lt;a href=&quot;https://webpack.js.org/&quot;&gt;webpack&lt;/a&gt;, instead.</source>
          <target state="translated">메타 데이터 파일이이 유형의 TypeScript 출력에 유효하지 않으므로 TypeScript의 &lt;code&gt;--outFile&lt;/code&gt; 옵션을 사용하는 경우 &lt;code&gt;true&lt;/code&gt; 로 설정하십시오 . 그러나 Angular에는 &lt;code&gt;--outFile&lt;/code&gt; 을 사용하지 않는 것이 좋습니다 . 대신 &lt;a href=&quot;https://webpack.js.org/&quot;&gt;webpack&lt;/a&gt; 과 같은 번 들러 를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="e380ce578de81eeac21b4cb893328ae5bc78b83a" translate="yes" xml:space="preserve">
          <source>Set up an app</source>
          <target state="translated">앱 설정</target>
        </trans-unit>
        <trans-unit id="bda7e96787a89877d8fdebbf6da139aeb613ff36" translate="yes" xml:space="preserve">
          <source>Set up continuous integration</source>
          <target state="translated">지속적인 통합 설정</target>
        </trans-unit>
        <trans-unit id="3c3bbc8e614a21bc15426359627dde34be082adf" translate="yes" xml:space="preserve">
          <source>Set up redirects</source>
          <target state="translated">리디렉션 설정</target>
        </trans-unit>
        <trans-unit id="cb42dd6a3cc3c8004aae58d885663b83df29f707" translate="yes" xml:space="preserve">
          <source>Set up the UI</source>
          <target state="translated">UI 설정</target>
        </trans-unit>
        <trans-unit id="89d6ff37f332c1500fe38f269eb3664b72e48057" translate="yes" xml:space="preserve">
          <source>Set up the component</source>
          <target state="translated">구성 요소 설정</target>
        </trans-unit>
        <trans-unit id="d2e162d9db64b0698e4b22345a7f83bb0a91200d" translate="yes" xml:space="preserve">
          <source>Set up the component to be able to use the cart service.</source>
          <target state="translated">카트 서비스를 사용할 수 있도록 구성 요소를 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="6e7e0cbb51939113b1621b21fba7c90fa7c6e0f6" translate="yes" xml:space="preserve">
          <source>Set up the component to be able to use the cart service. (This is the same way you set up the product details component to use the cart service, above.)</source>
          <target state="translated">카트 서비스를 사용할 수 있도록 구성 요소를 설정하십시오. (위의 카트 서비스를 사용하도록 제품 세부 사항 구성 요소를 설정하는 것과 동일한 방법입니다.)</target>
        </trans-unit>
        <trans-unit id="df44c5c40fedfcfaa9b61252fc1e75b7e4f01ca6" translate="yes" xml:space="preserve">
          <source>Set up the new product alerts component to receive a product as input:</source>
          <target state="translated">제품을 입력으로 수신하도록 새 제품 경보 구성 요소를 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="ede5f7c82c5d89346f5d1512d578f9ce634f5795" translate="yes" xml:space="preserve">
          <source>Set up your environment</source>
          <target state="translated">환경 설정</target>
        </trans-unit>
        <trans-unit id="b549d363bd3fe30c03af25da4c9fffb7bd845170" translate="yes" xml:space="preserve">
          <source>Set up your environment.</source>
          <target state="translated">환경을 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="8ffd5ac8c69b341adc77658d1521202e6a7a3af4" translate="yes" xml:space="preserve">
          <source>Set whether the fixture should autodetect changes.</source>
          <target state="translated">조명기가 변경 사항을 자동 감지해야하는지 여부를 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="b227d5a952b1c47332083790ad263bc1da265b17" translate="yes" xml:space="preserve">
          <source>Sets &lt;code&gt;&lt;a href=&quot;animatetimings&quot;&gt;AnimateTimings&lt;/a&gt;&lt;/code&gt; for the parent animation. A string in the format &quot;duration [delay][easing]&quot;.</source>
          <target state="translated">부모 애니메이션에 대한 &lt;code&gt;&lt;a href=&quot;animatetimings&quot;&gt;AnimateTimings&lt;/a&gt;&lt;/code&gt; 를 설정 합니다. &quot;duration [delay] [easing]&quot;형식의 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="4e44e02e61a4d878b167f4125c5c23c79a43f22c" translate="yes" xml:space="preserve">
          <source>Sets AnimationStyles for the parent animation. A function call to either &lt;code&gt;&lt;a href=&quot;style&quot;&gt;style&lt;/a&gt;()&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;keyframes&quot;&gt;keyframes&lt;/a&gt;()&lt;/code&gt; that returns a collection of CSS style entries to be applied to the parent animation. When null, uses the styles from the destination state. This is useful when describing an animation step that will complete an animation; see &quot;Animating to the final state&quot; in &lt;code&gt;transitions()&lt;/code&gt;.</source>
          <target state="translated">부모 애니메이션의 AnimationStyles를 설정합니다. 부모 애니메이션에 적용 할 CSS 스타일 항목 모음을 반환하는 &lt;code&gt;&lt;a href=&quot;style&quot;&gt;style&lt;/a&gt;()&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;keyframes&quot;&gt;keyframes&lt;/a&gt;()&lt;/code&gt; 대한 함수 호출 입니다. null의 경우, 목적지 상태의 스타일을 사용합니다. 이것은 애니메이션을 완성 할 애니메이션 단계를 설명 할 때 유용합니다. &lt;code&gt;transitions()&lt;/code&gt; &quot;최종 상태로 애니메이션&quot;을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="eee73d6992a2fe8ba0db9c96625781e26477dfad" translate="yes" xml:space="preserve">
          <source>Sets a new value for the form control.</source>
          <target state="translated">폼 컨트롤의 새 값을 설정합니다.</target>
        </trans-unit>
        <trans-unit id="a20d959f0b210975fdf07b42d7c4fd5e4620519a" translate="yes" xml:space="preserve">
          <source>Sets a specific element property.</source>
          <target state="translated">특정 요소 속성을 설정합니다.</target>
        </trans-unit>
        <trans-unit id="a121f641721bb9e0761bf738a12aa240427f80a2" translate="yes" xml:space="preserve">
          <source>Sets a time-delay for initiating an animation action. A number and optional time unit, such as &quot;1s&quot; or &quot;10ms&quot; for one second and 10 milliseconds, respectively.The default unit is milliseconds. Default value is 0, meaning no delay.</source>
          <target state="translated">애니메이션 작업을 시작하기위한 시간 지연을 설정합니다. 1 초 및 10 밀리 초 동안 각각 &quot;1s&quot;또는 &quot;10ms&quot;와 같은 숫자 및 선택적 시간 단위입니다. 기본 단위는 밀리 초입니다. 기본값은 0이며 지연이 없음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="a932f4c7dd055e4cb8d562239ee85515c3dbb28b" translate="yes" xml:space="preserve">
          <source>Sets errors on a form control when running validations manually, rather than automatically.</source>
          <target state="translated">유효성 검사를 자동이 아닌 수동으로 실행할 때 양식 컨트롤에 오류를 설정합니다.</target>
        </trans-unit>
        <trans-unit id="0b6dd7ecdc8f413643674f0078a939de32e67a6c" translate="yes" xml:space="preserve">
          <source>Sets or modifies a value for a given header in a clone of the original instance. If the header already exists, its value is replaced with the given value in the returned object.</source>
          <target state="translated">원본 인스턴스의 복제본에서 지정된 헤더의 값을 설정하거나 수정합니다. 헤더가 이미 존재하면 그 값은 반환 된 객체에서 주어진 값으로 대체됩니다.</target>
        </trans-unit>
        <trans-unit id="2397a9be73764c91657ed2e8e9331d801f9f1ac9" translate="yes" xml:space="preserve">
          <source>Sets or overrides the provider for &lt;code&gt;MyService&lt;/code&gt; to the &lt;code&gt;MyMockService&lt;/code&gt; class.</source>
          <target state="translated">설정하거나 재 지정을위한 공급자 &lt;code&gt;MyService&lt;/code&gt; 받는 &lt;code&gt;MyMockService&lt;/code&gt; 의 클래스를.</target>
        </trans-unit>
        <trans-unit id="8017647d64f5622a2a2e980cc3fd8b7b73b0a18b" translate="yes" xml:space="preserve">
          <source>Sets or overrides the provider for &lt;code&gt;MyService&lt;/code&gt; to the &lt;code&gt;myFactory&lt;/code&gt; factory function.</source>
          <target state="translated">설정하거나 재 지정을위한 공급자 &lt;code&gt;MyService&lt;/code&gt; 받는 &lt;code&gt;myFactory&lt;/code&gt; 공장 기능.</target>
        </trans-unit>
        <trans-unit id="5359678b08dbb9c8698f03c822c55282927884df" translate="yes" xml:space="preserve">
          <source>Sets or overrides the provider for &lt;code&gt;MyValue&lt;/code&gt; to the value &lt;code&gt;41&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;MyValue&lt;/code&gt; 의 제공자를 값 &lt;code&gt;41&lt;/code&gt; 로 설정하거나 대체합니다 .</target>
        </trans-unit>
        <trans-unit id="de7ff004dc80e320200e1a7704be95ad1bbacd64" translate="yes" xml:space="preserve">
          <source>Sets query parameters to the URL.</source>
          <target state="translated">쿼리 매개 변수를 URL로 설정합니다.</target>
        </trans-unit>
        <trans-unit id="e6a02cc1912fbe5b1eaee5d99857f16a7dc50a8c" translate="yes" xml:space="preserve">
          <source>Sets the &quot;checked&quot; property on the input element.</source>
          <target state="translated">입력 요소에서 &quot;checked&quot;속성을 설정합니다.</target>
        </trans-unit>
        <trans-unit id="da002d54c6d3246f2cdc1e6a3aa0c856a808fe84" translate="yes" xml:space="preserve">
          <source>Sets the &quot;checked&quot; property value on the radio input element.</source>
          <target state="translated">라디오 입력 요소의 &quot;checked&quot;속성 값을 설정합니다.</target>
        </trans-unit>
        <trans-unit id="3135786e97ae04b89cdca47774eb2c8edccf52d1" translate="yes" xml:space="preserve">
          <source>Sets the &quot;disabled&quot; property on the input element.</source>
          <target state="translated">입력 요소에서 &quot;disabled&quot;속성을 설정합니다.</target>
        </trans-unit>
        <trans-unit id="21de3dd20a3bc2401e77a6b61d51fc64c7090752" translate="yes" xml:space="preserve">
          <source>Sets the &quot;disabled&quot; property on the range input element.</source>
          <target state="translated">범위 입력 요소에서 &quot;disabled&quot;속성을 설정합니다.</target>
        </trans-unit>
        <trans-unit id="4591735c1a7f3a834fcd4ccb9df9dabaae88da9d" translate="yes" xml:space="preserve">
          <source>Sets the &quot;disabled&quot; property on the select input element.</source>
          <target state="translated">선택 입력 요소에서 &quot;disabled&quot;속성을 설정합니다.</target>
        </trans-unit>
        <trans-unit id="e141bb2dc2ee921e5386bed1af4e8e3ceecc01ac" translate="yes" xml:space="preserve">
          <source>Sets the &quot;value&quot; on the radio input element and unchecks it.</source>
          <target state="translated">라디오 입력 요소에 &quot;값&quot;을 설정하고 선택을 해제합니다.</target>
        </trans-unit>
        <trans-unit id="9ce200a8d28d8ee1a9c60de06da13e10e7074909" translate="yes" xml:space="preserve">
          <source>Sets the &quot;value&quot; property on one or of more of the select's options.</source>
          <target state="translated">선택 옵션 중 하나 이상에 &quot;value&quot;속성을 설정합니다.</target>
        </trans-unit>
        <trans-unit id="83772bc6068280e41ba7718047fa8cc1aa198140" translate="yes" xml:space="preserve">
          <source>Sets the &quot;value&quot; property on the input element.</source>
          <target state="translated">입력 요소에서 &quot;value&quot;속성을 설정합니다.</target>
        </trans-unit>
        <trans-unit id="edf6aa35e9c21401ffafce113e4d71886ad823b7" translate="yes" xml:space="preserve">
          <source>Sets the &quot;value&quot; property on the input element. The &quot;selectedIndex&quot; property is also set if an ID is provided on the option element.</source>
          <target state="translated">입력 요소에서 &quot;value&quot;속성을 설정합니다. 옵션 요소에 ID가 제공된 경우 &quot;selectedIndex&quot;특성도 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="eba26ff48c5ca9a72408acad91118c751f9fb4bf" translate="yes" xml:space="preserve">
          <source>Sets the async validators that are active on this control. Calling this overwrites any existing async validators.</source>
          <target state="translated">이 컨트롤에서 활성화 된 비동기 유효성 검사기를 설정합니다. 이것을 호출하면 기존의 비동기 유효성 검사기를 덮어 씁니다.</target>
        </trans-unit>
        <trans-unit id="90149f8a604649d36656caedeaa2fa7f404a5cbc" translate="yes" xml:space="preserve">
          <source>Sets the default analytics enablement status for the project.</source>
          <target state="translated">프로젝트의 기본 분석 사용 상태를 설정합니다.</target>
        </trans-unit>
        <trans-unit id="4f39aa7fa5866f335458aa91128888edd8ab9b33" translate="yes" xml:space="preserve">
          <source>Sets the hash fragment for the URL.</source>
          <target state="translated">URL의 해시 조각을 설정합니다.</target>
        </trans-unit>
        <trans-unit id="747797a1e092ad0fdf7555d5c08c92feda60fbfe" translate="yes" xml:space="preserve">
          <source>Sets the new value for the provided &lt;code&gt;&lt;a href=&quot;formcontrolname&quot;&gt;FormControlName&lt;/a&gt;&lt;/code&gt; directive.</source>
          <target state="translated">제공된 &lt;code&gt;&lt;a href=&quot;formcontrolname&quot;&gt;FormControlName&lt;/a&gt;&lt;/code&gt; 지시문 의 새 값을 설정합니다 .</target>
        </trans-unit>
        <trans-unit id="662f5566c96ab5084f833c91a0950acff27445a7" translate="yes" xml:space="preserve">
          <source>Sets the new value for the provided &lt;code&gt;&lt;a href=&quot;ngcontrol&quot;&gt;NgControl&lt;/a&gt;&lt;/code&gt; directive.</source>
          <target state="translated">제공된 &lt;code&gt;&lt;a href=&quot;ngcontrol&quot;&gt;NgControl&lt;/a&gt;&lt;/code&gt; 지시문 의 새 값을 설정합니다 .</target>
        </trans-unit>
        <trans-unit id="102090bbaec19cd5f3966d9344b4a79b6858332d" translate="yes" xml:space="preserve">
          <source>Sets the new value for the view model and emits an &lt;code&gt;ngModelChange&lt;/code&gt; event.</source>
          <target state="translated">뷰 모델의 새 값을 설정하고 &lt;code&gt;ngModelChange&lt;/code&gt; 이벤트를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="b8e4c683062158b6619cbd07649de6532a660474" translate="yes" xml:space="preserve">
          <source>Sets the parent of the control</source>
          <target state="translated">컨트롤의 부모를 설정합니다</target>
        </trans-unit>
        <trans-unit id="14122933f8102c879cfceea80628ab8dd8faba10" translate="yes" xml:space="preserve">
          <source>Sets the position of the animation.</source>
          <target state="translated">애니메이션의 위치를 ​​설정합니다.</target>
        </trans-unit>
        <trans-unit id="412ed66fceed305048c738bcb94b3d3f6db83ad5" translate="yes" xml:space="preserve">
          <source>Sets the synchronous validators that are active on this control. Calling this overwrites any existing sync validators.</source>
          <target state="translated">이 컨트롤에서 활성화 된 동기 유효성 검사기를 설정합니다. 이것을 호출하면 기존 동기화 유효성 검사기를 덮어 씁니다.</target>
        </trans-unit>
        <trans-unit id="a39e5878ffe7a1538d240efe308693b6c7032fa8" translate="yes" xml:space="preserve">
          <source>Sets the value for this &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">이 &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 의 값을 설정합니다 .</target>
        </trans-unit>
        <trans-unit id="bae1f83b15a4a110189a04bd1602ff39e37141b1" translate="yes" xml:space="preserve">
          <source>Sets the value of the &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt;. It accepts an array that matches the structure of the control.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; 의 값을 설정합니다 . 컨트롤의 구조와 일치하는 배열을받습니다.</target>
        </trans-unit>
        <trans-unit id="3afcf3e790c4814a63e533925614fde272d17fbb" translate="yes" xml:space="preserve">
          <source>Sets the value of the &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt;. It accepts an object that matches the structure of the group, with control names as keys.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 의 값을 설정합니다 . 제어 이름을 키로 사용하여 그룹 구조와 일치하는 오브젝트를 승인합니다.</target>
        </trans-unit>
        <trans-unit id="d877d338ad8214880ec5d5a6a2e8b72b9e12d07d" translate="yes" xml:space="preserve">
          <source>Sets the value of the control. Abstract method (implemented in sub-classes).</source>
          <target state="translated">컨트롤 값을 설정합니다. 추상 메소드 (서브 클래스에서 구현 됨).</target>
        </trans-unit>
        <trans-unit id="3c9ce752c38de71c889aa96e373a758daa13e1cc" translate="yes" xml:space="preserve">
          <source>Sets up a location change listener to trigger &lt;code&gt;history.pushState&lt;/code&gt;. Works around the problem that &lt;code&gt;onPopState&lt;/code&gt; does not trigger &lt;code&gt;history.pushState&lt;/code&gt;. Must be called &lt;em&gt;after&lt;/em&gt; calling &lt;code&gt;UpgradeModule.bootstrap&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;history.pushState&lt;/code&gt; 를 트리거하도록 위치 변경 리스너를 설정합니다 . &lt;code&gt;onPopState&lt;/code&gt; 가 &lt;code&gt;history.pushState&lt;/code&gt; 를 트리거하지 않는 문제를 해결합니다 . &lt;code&gt;UpgradeModule.bootstrap&lt;/code&gt; 을 호출 &lt;em&gt;한 후&lt;/em&gt; 호출 해야합니다 .</target>
        </trans-unit>
        <trans-unit id="daf2524202488a197baa7074fe2881fdd0894d6c" translate="yes" xml:space="preserve">
          <source>Sets up a new channel on the MessageBus. MUST be called before calling from or to on the channel. If runInZone is true then the source will emit events inside the angular zone and the sink will buffer messages and send only once the zone exits. if runInZone is false then the source will emit events inside the global zone and the sink will send messages immediately.</source>
          <target state="translated">MessageBus에서 새 채널을 설정합니다. 채널에서 또는 채널로 전화하기 전에 호출해야합니다. runInZone이 true이면 소스는 각도 영역 내에서 이벤트를 생성하고 싱크는 메시지를 버퍼링하고 영역이 종료 된 후에 만 ​​전송합니다. runInZone이 false이면 소스는 전역 영역 내에서 이벤트를 생성하고 싱크는 즉시 메시지를 보냅니다.</target>
        </trans-unit>
        <trans-unit id="28c37f243460c3ab848efad572037128c4095293" translate="yes" xml:space="preserve">
          <source>Sets up a new channel on the MessageBusSink. MUST be called before calling to on the channel. If runInZone is true the sink will buffer messages and send only once the zone exits. if runInZone is false the sink will send messages immediately.</source>
          <target state="translated">MessageBusSink에서 새 채널을 설정합니다. 채널을 호출하기 전에 호출해야합니다. runInZone이 true이면 싱크는 메시지를 버퍼링하고 영역이 종료 된 후에 만 ​​보냅니다. runInZone이 false이면 싱크가 즉시 메시지를 보냅니다.</target>
        </trans-unit>
        <trans-unit id="b713eca28144e3fd698b33f57e28971b26441d0c" translate="yes" xml:space="preserve">
          <source>Sets up a new channel on the MessageBusSource. MUST be called before calling from on the channel. If runInZone is true then the source will emit events inside the angular zone. if runInZone is false then the source will emit events inside the global zone.</source>
          <target state="translated">MessageBusSource에서 새 채널을 설정합니다. 채널에서 전화하기 전에 호출해야합니다. runInZone이 true이면 소스는 각도 영역 내에서 이벤트를 생성합니다. runInZone이 false이면 소스는 전역 영역 내에서 이벤트를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="989aad70fad315523dddb686f431b61c4e1b979e" translate="yes" xml:space="preserve">
          <source>Sets up the location change listener and performs the initial navigation.</source>
          <target state="translated">위치 변경 리스너를 설정하고 초기 탐색을 수행합니다.</target>
        </trans-unit>
        <trans-unit id="e10ece235de8b79fbe9c667a5131988df7fc209c" translate="yes" xml:space="preserve">
          <source>Sets up the location change listener.</source>
          <target state="translated">위치 변경 리스너를 설정합니다.</target>
        </trans-unit>
        <trans-unit id="eedef89effaf95d3c7936187c744860cfa4d0c66" translate="yes" xml:space="preserve">
          <source>Sets up the router to be used for testing.</source>
          <target state="translated">테스트에 사용될 라우터를 설정합니다.</target>
        </trans-unit>
        <trans-unit id="11e0bea59e56f79670c39861d395c39c9a59d397" translate="yes" xml:space="preserve">
          <source>Sets up two-way data binding. Equivalent to: &lt;code&gt;&amp;lt;my-cmp [title]=&quot;name&quot; (titleChange)=&quot;name=$event&quot;&amp;gt;&lt;/code&gt;</source>
          <target state="translated">양방향 데이터 바인딩을 설정합니다. 당량 : &lt;code&gt;&amp;lt;my-cmp [title]=&quot;name&quot; (titleChange)=&quot;name=$event&quot;&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6eb4c2d4d3750170085044ec1482b24d0a60b397" translate="yes" xml:space="preserve">
          <source>Setting component inputs</source>
          <target state="translated">컴포넌트 입력 설정</target>
        </trans-unit>
        <trans-unit id="9b61d85a28211ede363fbf6ab2d3304348a6ae46" translate="yes" xml:space="preserve">
          <source>Setting component outputs</source>
          <target state="translated">컴포넌트 출력 설정</target>
        </trans-unit>
        <trans-unit id="df5671cc8514926f1d118740d49af3cc59b3c235" translate="yes" xml:space="preserve">
          <source>Setting the ngModel name attribute through options</source>
          <target state="translated">옵션을 통한 ngModel 이름 속성 설정</target>
        </trans-unit>
        <trans-unit id="9ad7e9cc45b2ce82143e70a6114cab19d4c5156f" translate="yes" xml:space="preserve">
          <source>Setting the route parameters in the list view</source>
          <target state="translated">목록보기에서 경로 매개 변수 설정</target>
        </trans-unit>
        <trans-unit id="7f58893d60ced0e9cf83b19c13175a67bcd2a2bd" translate="yes" xml:space="preserve">
          <source>Setting the update options</source>
          <target state="translated">업데이트 옵션 설정</target>
        </trans-unit>
        <trans-unit id="52af24b7e1b67d0d1c334ca5f76c85ff390ef098" translate="yes" xml:space="preserve">
          <source>Setting up for a multi-project workspace</source>
          <target state="translated">다중 프로젝트 작업 공간 설정</target>
        </trans-unit>
        <trans-unit id="dbfb79dca5a3fa6f5492dcb0dbd760074c0a616b" translate="yes" xml:space="preserve">
          <source>Setting up the Local Environment and Workspace</source>
          <target state="translated">로컬 환경 및 작업 공간 설정</target>
        </trans-unit>
        <trans-unit id="2f9b39324341c8d17a913e140595007f008b9a69" translate="yes" xml:space="preserve">
          <source>Setting up the locale of your app</source>
          <target state="translated">앱의 로캘 설정</target>
        </trans-unit>
        <trans-unit id="cdd7bb2816b7a8f88bce0e47be39943bc369516b" translate="yes" xml:space="preserve">
          <source>Setup</source>
          <target state="translated">Setup</target>
        </trans-unit>
        <trans-unit id="3069b76decca4de1953abdd5da5d348417b5f47f" translate="yes" xml:space="preserve">
          <source>Setup (form model)</source>
          <target state="translated">설치 (양식 모델)</target>
        </trans-unit>
        <trans-unit id="317611c1fcbb4bcd2392365bc7cfce35166d7f65" translate="yes" xml:space="preserve">
          <source>Setup a callback function for your AngularJS bundle.</source>
          <target state="translated">AngularJS 번들에 대한 콜백 기능을 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="6569f8ceb2ac4c362c3c6ed73c3ed4ed88e2ae63" translate="yes" xml:space="preserve">
          <source>Setup for Upgrading from AngularJS</source>
          <target state="translated">AngularJS에서 업그레이드하기위한 설정</target>
        </trans-unit>
        <trans-unit id="4d358b8c957d01b496bfc95e71038f36f44873ed" translate="yes" xml:space="preserve">
          <source>Setup in reactive forms</source>
          <target state="translated">반응 형 설정</target>
        </trans-unit>
        <trans-unit id="e012efc5a4a9b0e21f2a00936b3667bbd9f54242" translate="yes" xml:space="preserve">
          <source>Setup in template-driven forms</source>
          <target state="translated">템플릿 기반 양식으로 설정</target>
        </trans-unit>
        <trans-unit id="db2e8af4bcf86370e056007702c205f71c33ef32" translate="yes" xml:space="preserve">
          <source>Setup with module imports</source>
          <target state="translated">모듈 가져 오기로 설정</target>
        </trans-unit>
        <trans-unit id="18272a259bf7d280b0ab91fe4bc2e08ba6fb586c" translate="yes" xml:space="preserve">
          <source>Setup, build, and deployment configuration</source>
          <target state="translated">설정, 빌드 및 배포 구성</target>
        </trans-unit>
        <trans-unit id="5346a85c4699994813d2e863322e902611969b97" translate="yes" xml:space="preserve">
          <source>Share information across HTML elements using template reference variables.</source>
          <target state="translated">템플릿 참조 변수를 사용하여 HTML 요소에서 정보를 공유합니다.</target>
        </trans-unit>
        <trans-unit id="ab04c254355ee15b0d61dd39f23e2d299fb5f9df" translate="yes" xml:space="preserve">
          <source>Share this URL with a friend or colleague.</source>
          <target state="translated">이 URL을 친구 나 동료와 공유하십시오.</target>
        </trans-unit>
        <trans-unit id="7af3838e8ea6ac8d686935f882e1db1eaa0a1b28" translate="yes" xml:space="preserve">
          <source>Share your application</source>
          <target state="translated">응용 프로그램 공유</target>
        </trans-unit>
        <trans-unit id="6f17cb939aa9fc37636c921723119fbcfd9f5ca7" translate="yes" xml:space="preserve">
          <source>Shared feature module</source>
          <target state="translated">공유 기능 모듈</target>
        </trans-unit>
        <trans-unit id="e387c96cf6c24ae5e9b8d657798469f0a1d4311e" translate="yes" xml:space="preserve">
          <source>Sharing Modules</source>
          <target state="translated">공유 모듈</target>
        </trans-unit>
        <trans-unit id="0fe7d82f25a3015040a206e54f9c1d3a9717c4c4" translate="yes" xml:space="preserve">
          <source>Short</source>
          <target state="translated">Short</target>
        </trans-unit>
        <trans-unit id="10d6a094ec382ffc7598dae6966c496f706027f4" translate="yes" xml:space="preserve">
          <source>Short Form</source>
          <target state="translated">짧은 형식</target>
        </trans-unit>
        <trans-unit id="7fd3c0e136d11edf17bca2d957fe2ddaeba002c5" translate="yes" xml:space="preserve">
          <source>Short localized GMT format</source>
          <target state="translated">현지화 된 짧은 GMT 형식</target>
        </trans-unit>
        <trans-unit id="879d7ba413f699e986e20c3d3d898c08a3a9caf7" translate="yes" xml:space="preserve">
          <source>Short specific non location format (fallback to O)</source>
          <target state="translated">짧은 특정 비 위치 형식 (O로 폴백)</target>
        </trans-unit>
        <trans-unit id="5137dbab0b2003506a287bb55dc82e8e48713edb" translate="yes" xml:space="preserve">
          <source>Shorthand for &quot;--configuration=production&quot;. When true, sets the build configuration to the production target. By default, the production target is set up in the workspace configuration such that all builds make use of bundling, limited tree-shaking, and also limited dead code elimination.</source>
          <target state="translated">&quot;--configuration = production&quot;의 줄임말입니다. true 인 경우 빌드 구성을 프로덕션 대상으로 설정합니다. 기본적으로 프로덕션 대상은 모든 빌드가 번들링, 제한된 트리 쉐이킹 및 제한된 데드 코드 제거를 사용하도록 작업 공간 구성에 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="60047bb09af867b84694f1ab1edd98f509d3f2ea" translate="yes" xml:space="preserve">
          <source>Shorthand form with &quot;then&quot; and &quot;else&quot; blocks:</source>
          <target state="translated">&quot;then&quot;및 &quot;else&quot;블록이있는 속기 양식 :</target>
        </trans-unit>
        <trans-unit id="48b3b304ee8a75837d7e1a2198272bba7db1b706" translate="yes" xml:space="preserve">
          <source>Shorthand syntax</source>
          <target state="translated">속기 구문</target>
        </trans-unit>
        <trans-unit id="ad6e919a37c2bb15acd1a3c92bceed37af0032e9" translate="yes" xml:space="preserve">
          <source>Shortly, you'll extend the &lt;code&gt;AdminDashboardComponent&lt;/code&gt; to inject this service and display its &lt;code&gt;preloadedModules&lt;/code&gt; array.</source>
          <target state="translated">곧 &lt;code&gt;AdminDashboardComponent&lt;/code&gt; 를 확장 하여이 서비스를 주입하고 &lt;code&gt;preloadedModules&lt;/code&gt; 배열을 표시합니다 .</target>
        </trans-unit>
        <trans-unit id="41078447ba168b4151c1f22c7d612b9d43abb567" translate="yes" xml:space="preserve">
          <source>Should I add application-wide providers to the root &lt;code&gt;AppModule&lt;/code&gt; or the root &lt;code&gt;AppComponent&lt;/code&gt;?</source>
          <target state="translated">루트 &lt;code&gt;AppModule&lt;/code&gt; 또는 루트 &lt;code&gt;AppComponent&lt;/code&gt; 에 응용 프로그램 전체 공급자를 추가해야합니까 ?</target>
        </trans-unit>
        <trans-unit id="c55683c58f4cac80dad4e0811c2a2aedcd1ec133" translate="yes" xml:space="preserve">
          <source>Should I add other providers to a module or a component?</source>
          <target state="translated">모듈이나 구성 요소에 다른 공급자를 추가해야합니까?</target>
        </trans-unit>
        <trans-unit id="2eca7c86d3882f8da12c2dee981a83d967d0bef1" translate="yes" xml:space="preserve">
          <source>Should I import &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt;?</source>
          <target state="translated">나는 가져와야합니다 &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; ?</target>
        </trans-unit>
        <trans-unit id="ba5ab6cd6ad45ecc5b3b9258f0733e39ba06685a" translate="yes" xml:space="preserve">
          <source>Show All Hide All</source>
          <target state="translated">모두 표시 모두 숨기기</target>
        </trans-unit>
        <trans-unit id="98ed9e62ac83f8affb24bdfb771d4c78acfc46cc" translate="yes" xml:space="preserve">
          <source>Show a warning when deploy-url/base-href use unsupported serve path values.</source>
          <target state="translated">deploy-url / base-href가 지원되지 않는 서브 경로 값을 사용할 때 경고를 표시하십시오.</target>
        </trans-unit>
        <trans-unit id="fee47023d6c1d39db9bc276ae03a1833249f3ca3" translate="yes" xml:space="preserve">
          <source>Show a warning when the --hmr option is enabled.</source>
          <target state="translated">--hmr 옵션이 활성화되면 경고를 표시합니다.</target>
        </trans-unit>
        <trans-unit id="595aa38adc2f8b9fed110d5bfa2f70ca86323d2f" translate="yes" xml:space="preserve">
          <source>Show and hide validation error messages</source>
          <target state="translated">유효성 검사 오류 메시지 표시 및 숨기기</target>
        </trans-unit>
        <trans-unit id="d1d3bf017782ea688647aff234d3d9891460821f" translate="yes" xml:space="preserve">
          <source>Show and hide validation-error messages.</source>
          <target state="translated">유효성 검사 오류 메시지를 표시하고 숨 깁니다.</target>
        </trans-unit>
        <trans-unit id="d525989db2de63003e9d7ac134ab8213bd3059a2" translate="yes" xml:space="preserve">
          <source>Show circular dependency warnings on builds.</source>
          <target state="translated">빌드시 순환 종속성 경고를 표시합니다.</target>
        </trans-unit>
        <trans-unit id="2a04fec163fa9ffa3e3c2220918566a6b06b6544" translate="yes" xml:space="preserve">
          <source>Show messages</source>
          <target state="translated">메시지 표시</target>
        </trans-unit>
        <trans-unit id="116bdf02eaa47b1dc3191504a363e4dec2a90998" translate="yes" xml:space="preserve">
          <source>Show output text.</source>
          <target state="translated">출력 텍스트를 표시합니다.</target>
        </trans-unit>
        <trans-unit id="1d1c6ac7f305d28e5a2c67c497211de8cbcd51aa" translate="yes" xml:space="preserve">
          <source>Show the &lt;code&gt;HeroDetailComponent&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;HeroDetailComponent&lt;/code&gt; 표시</target>
        </trans-unit>
        <trans-unit id="937c9e3d88b032267b4ce7212d8f4a304d4bd484" translate="yes" xml:space="preserve">
          <source>Show the &lt;code&gt;HeroesComponent&lt;/code&gt; view</source>
          <target state="translated">&lt;code&gt;HeroesComponent&lt;/code&gt; 보기 표시</target>
        </trans-unit>
        <trans-unit id="fbe16ce7506b8430e45fd2d6aa176fdb23bdf664" translate="yes" xml:space="preserve">
          <source>Show the first page quickly</source>
          <target state="translated">첫 페이지를 빠르게 표시</target>
        </trans-unit>
        <trans-unit id="d46fb55d5ef3f5ca69002f78750e89cc11f12836" translate="yes" xml:space="preserve">
          <source>Show the first page quickly with a &lt;a href=&quot;https://developers.google.com/web/tools/lighthouse/audits/first-contentful-paint&quot;&gt;first-contentful paint (FCP)&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://developers.google.com/web/tools/lighthouse/audits/first-contentful-paint&quot;&gt;FCP (First Contentful Paint)로&lt;/a&gt; 첫 페이지를 빠르게 표시</target>
        </trans-unit>
        <trans-unit id="3ac4c102351575a38b297d787d9721977a54ee21" translate="yes" xml:space="preserve">
          <source>Show the hero</source>
          <target state="translated">영웅을 보여</target>
        </trans-unit>
        <trans-unit id="0b09aa05d4dbcc3294f3d100b839df79351491b8" translate="yes" xml:space="preserve">
          <source>Show the hero object</source>
          <target state="translated">영웅 개체 표시</target>
        </trans-unit>
        <trans-unit id="c75dd76780712202bd0adeba943f333c0a6b3e23" translate="yes" xml:space="preserve">
          <source>Show/hide vs. &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; 대 표시 / 숨기기</target>
        </trans-unit>
        <trans-unit id="cef936621fc4177f5bc8e6ee413ffd5eaf576c1d" translate="yes" xml:space="preserve">
          <source>Showing an alternative template using &lt;code&gt;else&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;else&lt;/code&gt; 를 사용하여 대체 템플릿 표시</target>
        </trans-unit>
        <trans-unit id="45143a2ebe5a96d7ce5da2ddfd0ac908f7561a03" translate="yes" xml:space="preserve">
          <source>Showing an array property with &lt;strong&gt;*ngFor&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;* ngFor를 사용&lt;/strong&gt; 하여 배열 속성 표시&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="44957916405bf69ccfa14f773068cbb0880a98b4" translate="yes" xml:space="preserve">
          <source>Showing component properties with interpolation</source>
          <target state="translated">보간으로 구성 요소 특성 표시</target>
        </trans-unit>
        <trans-unit id="2a15b53f83d98c4a71991f1f90c66bebe097321d" translate="yes" xml:space="preserve">
          <source>Shows a help message for this command in the console.</source>
          <target state="translated">콘솔에서이 명령에 대한 도움말 메시지를 표시합니다.</target>
        </trans-unit>
        <trans-unit id="479f16fa7274887e86eb0096b93900ffb1452759" translate="yes" xml:space="preserve">
          <source>Shows how to project external content into a component and how to distinguish projected content from a component's view children. Demonstrates the &lt;code&gt;ngAfterContentInit&lt;/code&gt; and &lt;code&gt;ngAfterContentChecked&lt;/code&gt; hooks.</source>
          <target state="translated">외부 컨텐츠를 구성 요소로 투영하는 방법 및 투영 된 컨텐츠를 구성 요소의 뷰 하위와 구별하는 방법을 보여줍니다. &lt;code&gt;ngAfterContentInit&lt;/code&gt; 및 &lt;code&gt;ngAfterContentChecked&lt;/code&gt; 후크를 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="b76af8097f5f260b3980092d825c8c219994a49b" translate="yes" xml:space="preserve">
          <source>Shows what Angular means by a &lt;em&gt;view&lt;/em&gt;. Demonstrates the &lt;code&gt;ngAfterViewInit&lt;/code&gt; and &lt;code&gt;ngAfterViewChecked&lt;/code&gt; hooks.</source>
          <target state="translated">&lt;em&gt;뷰가&lt;/em&gt; Angular의 의미를 보여줍니다 . &lt;code&gt;ngAfterViewInit&lt;/code&gt; 및 &lt;code&gt;ngAfterViewChecked&lt;/code&gt; 후크를 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="197f7cb6804fc98916b8c143af535692e5856899" translate="yes" xml:space="preserve">
          <source>Shut down &lt;code&gt;http-server&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;http-server&lt;/code&gt; 를 종료 하십시오 .</target>
        </trans-unit>
        <trans-unit id="80c188a60dfe5e25b9e86ad3e1121715c6fefc2a" translate="yes" xml:space="preserve">
          <source>Sign for negative numbers. Example: -23</source>
          <target state="translated">음수에 서명하십시오. 예 : -23</target>
        </trans-unit>
        <trans-unit id="8f61988069ac7f7f4c5d04d0c6276c643329b712" translate="yes" xml:space="preserve">
          <source>Sign for percentage (out of 100). Example: 23.4%</source>
          <target state="translated">백분율에 대한 부호 (100 개 중). 예 : 23.4 %</target>
        </trans-unit>
        <trans-unit id="e35928f49dad3847e8aa9453d2820a74b253e2a9" translate="yes" xml:space="preserve">
          <source>Sign for permille (out of 1000). Example: 23.4&amp;permil;</source>
          <target state="translated">permille에 서명하십시오 (1000 개 중). 예 : 23.4 &amp;permil;</target>
        </trans-unit>
        <trans-unit id="9a1a477292686ab46d2883534ba2c37ca337a194" translate="yes" xml:space="preserve">
          <source>Sign for positive numbers. Example: +23</source>
          <target state="translated">양수 부호. 예 : +23</target>
        </trans-unit>
        <trans-unit id="2c4b77279f9c3a8d8d6ce565db42f31dc1ebcaaa" translate="yes" xml:space="preserve">
          <source>Sign up for a firebase account on &lt;a href=&quot;https://firebase.google.com/&quot;&gt;Firebase&lt;/a&gt;.</source>
          <target state="translated">에 중포 기지 계정에 가입 &lt;a href=&quot;https://firebase.google.com/&quot;&gt;중포 기지&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="597aee51bf1323c5684a20b90d36ad9cbffd87c2" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;assetGroups&lt;/code&gt;, every data group has a &lt;code&gt;name&lt;/code&gt; which uniquely identifies it.</source>
          <target state="translated">&lt;code&gt;assetGroups&lt;/code&gt; 와 유사하게 모든 데이터 그룹에는 고유하게 식별 하는 &lt;code&gt;name&lt;/code&gt; 이 있습니다.</target>
        </trans-unit>
        <trans-unit id="0fd958e5fcafb24cbe43b49f4da58ce49f0d6f36" translate="yes" xml:space="preserve">
          <source>Similarly, if you add &lt;code&gt;&amp;lt;base href='/my/app'/&amp;gt;&lt;/code&gt; to the document and call &lt;code&gt;location.go('/foo')&lt;/code&gt;, the browser's URL will become &lt;code&gt;example.com/my/app/foo&lt;/code&gt;.</source>
          <target state="translated">마찬가지로 &lt;code&gt;&amp;lt;base href='/my/app'/&amp;gt;&lt;/code&gt; 를 문서에 추가하고 &lt;code&gt;location.go('/foo')&lt;/code&gt; 를 호출 하면 브라우저의 URL이 &lt;code&gt;example.com/my/app/foo&lt;/code&gt; 가 됩니다.</target>
        </trans-unit>
        <trans-unit id="3ce6436140defa30b543c86237b650bfff348619" translate="yes" xml:space="preserve">
          <source>Similarly, if your library code depends on a service, that service needs to be migrated.</source>
          <target state="translated">마찬가지로 라이브러리 코드가 서비스에 의존하는 경우 해당 서비스를 마이그레이션해야합니다.</target>
        </trans-unit>
        <trans-unit id="fab82cd8c27f1b8cc74de2679b3ed8ed4b241092" translate="yes" xml:space="preserve">
          <source>Similarly, without mouse or keyboard events, a server-side app can't rely on a user clicking a button to show a component. The app must determine what to render based solely on the incoming client request. This is a good argument for making the app &lt;a href=&quot;router&quot;&gt;routable&lt;/a&gt;.</source>
          <target state="translated">마찬가지로, 마우스 또는 키보드 이벤트가 없으면 서버 측 앱은 사용자가 버튼을 클릭하여 구성 요소를 표시 할 수 없습니다. 앱은 들어오는 클라이언트 요청만을 기반으로 렌더링 할 대상을 결정해야합니다. 이것은 앱을 &lt;a href=&quot;router&quot;&gt;라우팅 가능&lt;/a&gt; 하게 만드는 좋은 주장입니다 .</target>
        </trans-unit>
        <trans-unit id="2cae9cec2b6c68d96f8336a324d888f726582b3e" translate="yes" xml:space="preserve">
          <source>Similarly, you can add a prompt to allow the user to decide whether the schematic will use color when executing its hello action. The schema with both prompts would be as follows.</source>
          <target state="translated">마찬가지로, hello 동작을 실행할 때 회로도에서 색상을 사용할지 여부를 결정할 수있는 프롬프트를 추가 할 수 있습니다. 두 프롬프트가 모두있는 스키마는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="de72ea9e60d3b0389fb7873c1d21268b088fa6d4" translate="yes" xml:space="preserve">
          <source>Simple</source>
          <target state="translated">Simple</target>
        </trans-unit>
        <trans-unit id="7efef6f32b9aee814f5e770483cd5c591105998c" translate="yes" xml:space="preserve">
          <source>Simple Configuration</source>
          <target state="translated">간단한 구성</target>
        </trans-unit>
        <trans-unit id="c15fa4b758d35cc97d9959bcc45edd294156d605" translate="yes" xml:space="preserve">
          <source>Simple Example</source>
          <target state="translated">간단한 예</target>
        </trans-unit>
        <trans-unit id="60607597b489cd2185394b7c6a6087b71ccc8b61" translate="yes" xml:space="preserve">
          <source>Simple as this is, you decide to add a test to confirm that component actually displays the right content where you think it should.</source>
          <target state="translated">이 방법은 간단하기 때문에 테스트를 추가하여 구성 요소가 실제로 원하는 위치에 올바른 내용을 표시하는지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="494dd9e99d48bafc3b98a35ff05944ed91b634e5" translate="yes" xml:space="preserve">
          <source>Simple deployment options</source>
          <target state="translated">간단한 배포 옵션</target>
        </trans-unit>
        <trans-unit id="19e643b42346b00691c93efb8f021c573d8605fe" translate="yes" xml:space="preserve">
          <source>Simple form validation</source>
          <target state="translated">간단한 양식 검증</target>
        </trans-unit>
        <trans-unit id="e5c3ae4da7e11d3fa7d67487f95d2ce84a38ba79" translate="yes" xml:space="preserve">
          <source>Simple form with expanded syntax:</source>
          <target state="translated">확장 된 구문의 간단한 양식 :</target>
        </trans-unit>
        <trans-unit id="d5334c5e164751baa720ada75302e4392b7ad9d7" translate="yes" xml:space="preserve">
          <source>Simple form with shorthand syntax:</source>
          <target state="translated">속기 구문이있는 간단한 양식 :</target>
        </trans-unit>
        <trans-unit id="4b80d81a8d2b3bc5c4a4d9cc396c5845bbf61518" translate="yes" xml:space="preserve">
          <source>SimpleChange</source>
          <target state="translated">SimpleChange</target>
        </trans-unit>
        <trans-unit id="e1500412a75fd0228298e32cacbe1fdf64be2796" translate="yes" xml:space="preserve">
          <source>SimpleChanges</source>
          <target state="translated">SimpleChanges</target>
        </trans-unit>
        <trans-unit id="7e746b9782ec7ce9bb91bd6b5f03eb84bb7be5a7" translate="yes" xml:space="preserve">
          <source>Simplicity</source>
          <target state="translated">Simplicity</target>
        </trans-unit>
        <trans-unit id="83ce935d34fce63b53340c34a2dd9b66f03f6976" translate="yes" xml:space="preserve">
          <source>Simulate a data server</source>
          <target state="translated">데이터 서버 시뮬레이션</target>
        </trans-unit>
        <trans-unit id="b1c23ba04df4a3b9f6db352b18230ce0d349d205" translate="yes" xml:space="preserve">
          <source>Simulate an update by adding a button to the template to update the user profile on demand.</source>
          <target state="translated">요청시 사용자 프로필을 업데이트하기 위해 버튼을 템플릿에 추가하여 업데이트를 시뮬레이션하십시오.</target>
        </trans-unit>
        <trans-unit id="6e969b818a3d3ee8b114032d6d34b6219a27cb74" translate="yes" xml:space="preserve">
          <source>Simulates the asynchronous passage of time for the timers in the fakeAsync zone by draining the macrotask queue until it is empty. The returned value is the milliseconds of time that would have been elapsed.</source>
          <target state="translated">매크로 작업 대기열이 비워 질 때까지 매크로 작업 대기열을 비워서 fakeAsync 영역의 타이머에 대한 비동기 시간 통과를 시뮬레이션합니다. 리턴 된 값은 경과 된 시간 (밀리 초)입니다.</target>
        </trans-unit>
        <trans-unit id="84da2c8a5ac23d25052a8266f6eced994831d26b" translate="yes" xml:space="preserve">
          <source>Simulates the asynchronous passage of time for the timers in the fakeAsync zone.</source>
          <target state="translated">fakeAsync 영역에서 타이머의 비동기 시간 통과를 시뮬레이션합니다.</target>
        </trans-unit>
        <trans-unit id="f067c24deb3c684333a746de5b20658653805d4b" translate="yes" xml:space="preserve">
          <source>Simulates the passage of time and the completion of pending asynchronous activities by flushing both &lt;em&gt;timer&lt;/em&gt; and &lt;em&gt;micro-task&lt;/em&gt; queues within the &lt;em&gt;fakeAsync test zone&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;fakeAsync 테스트 영역&lt;/em&gt; 내에서 &lt;em&gt;타이머&lt;/em&gt; 및 &lt;em&gt;마이크로 태스크&lt;/em&gt; 대기열을 모두 &lt;em&gt;비워&lt;/em&gt; 시간 경과 및 보류중인 비동기 활동의 완료를 시뮬레이션합니다 .</target>
        </trans-unit>
        <trans-unit id="728eba54e4626c0dc386906cba6f1dec9f58eda8" translate="yes" xml:space="preserve">
          <source>Simulating a network issue</source>
          <target state="translated">네트워크 문제 시뮬레이션</target>
        </trans-unit>
        <trans-unit id="5b7b5254fc84b183cac494e5bc843bf74e5ef462" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; can't do anything with an &lt;code&gt;Observable&lt;/code&gt;, use the pipe character (&lt;code&gt;|&lt;/code&gt;) followed by &lt;code&gt;&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;&lt;/code&gt;. This identifies Angular's &lt;code&gt;&lt;a href=&quot;../api/common/asyncpipe&quot;&gt;AsyncPipe&lt;/a&gt;&lt;/code&gt; and subscribes to an &lt;code&gt;Observable&lt;/code&gt; automatically so you won't have to do so in the component class.</source>
          <target state="translated">이후 &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 가 으로 아무것도 할 수 없습니다 &lt;code&gt;Observable&lt;/code&gt; , 파이프 문자를 사용하여 ( &lt;code&gt;|&lt;/code&gt; ) 다음에 &lt;code&gt;&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;&lt;/code&gt; . 이것은 Angular의 &lt;code&gt;&lt;a href=&quot;../api/common/asyncpipe&quot;&gt;AsyncPipe&lt;/a&gt;&lt;/code&gt; 를 식별 하고 &lt;code&gt;Observable&lt;/code&gt; 을 자동으로 구독 하므로 구성 요소 클래스에서 그렇게 할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="ccc511f20164ec8b3ea1363b14ef6d787beae9b6" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;AppRoutingModule&lt;/code&gt; already imports &lt;code&gt;HeroesComponent&lt;/code&gt;, you can use it in the &lt;code&gt;routes&lt;/code&gt; array:</source>
          <target state="translated">이후 &lt;code&gt;AppRoutingModule&lt;/code&gt; 은 이미 수입 &lt;code&gt;HeroesComponent&lt;/code&gt; 을 , 당신은 그것을 사용할 수있는 &lt;code&gt;routes&lt;/code&gt; 배열 :</target>
        </trans-unit>
        <trans-unit id="962544e4463cecaa2a5eccd0846f17ac5676aa3d" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;HostComponent&lt;/code&gt; has &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt; in its constructor, no matter what the parent of &lt;code&gt;HostComponent&lt;/code&gt; might have as a &lt;code&gt;flower.emoji&lt;/code&gt; value, the &lt;code&gt;HostComponent&lt;/code&gt; will use &lt;code&gt;🌼&lt;/code&gt; (yellow flower).</source>
          <target state="translated">이후 &lt;code&gt;HostComponent&lt;/code&gt; 이 있다 &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt; 생성자에서, 더의 부모는 중요하지 &lt;code&gt;HostComponent&lt;/code&gt; 는 A와있을 수 있습니다 &lt;code&gt;flower.emoji&lt;/code&gt; , 값 &lt;code&gt;HostComponent&lt;/code&gt; 이 사용 &lt;code&gt;🌼&lt;/code&gt; (노란 꽃).</target>
        </trans-unit>
        <trans-unit id="1c1acbcf4a03f4f6cb03e96d8e61627a3240b9ef" translate="yes" xml:space="preserve">
          <source>Since TypeScript is a superset of ECMAScript 2015, which in turn is a superset of ECMAScript 5, &quot;switching&quot; to TypeScript doesn't necessarily require anything more than installing the TypeScript compiler and renaming files from &lt;code&gt;*.js&lt;/code&gt; to &lt;code&gt;*.ts&lt;/code&gt;. But just doing that is not hugely useful or exciting, of course. Additional steps like the following can give us much more bang for the buck:</source>
          <target state="translated">TypeScript는 ECMAScript 2015의 수퍼 세트이며, ECMAScript 5의 수퍼 세트이므로 TypeScript 로의 &quot;전환&quot;에는 반드시 TypeScript 컴파일러를 설치하고 파일 이름을 &lt;code&gt;*.js&lt;/code&gt; 에서 &lt;code&gt;*.ts&lt;/code&gt; 로 바꾸는 것 외에 다른 것이 필요하지 않습니다 . 그러나 그렇게하는 것은 물론 매우 유용하거나 흥미롭지는 않습니다. 다음과 같은 추가 단계를 통해 비용을 크게 절감 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="46c4eb1abae75523ff8d7c6616050a503945e28d" translate="yes" xml:space="preserve">
          <source>Since a router state is a tree, and the URL is nothing but a serialized state, the URL is a serialized tree. UrlTree is a data structure that provides a lot of affordances in dealing with URLs</source>
          <target state="translated">라우터 상태는 트리이고 URL은 직렬화 된 상태 일 뿐이므로 URL은 직렬화 된 트리입니다. UrlTree는 URL을 처리 할 때 많은 여유를 제공하는 데이터 구조입니다</target>
        </trans-unit>
        <trans-unit id="bba2044862c3385a2d83d2b95012ec936c86053a" translate="yes" xml:space="preserve">
          <source>Since an Angular application can't be bootstrapped on the entire HTML document (&lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; tag) it is not possible to bind to the &lt;code&gt;text&lt;/code&gt; property of the &lt;code&gt;HTMLTitleElement&lt;/code&gt; elements (representing the &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt; tag). Instead, this service can be used to set and get the current title value.</source>
          <target state="translated">Angular 응용 프로그램은 전체 HTML 문서 ( &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; 태그) 에서 부트 스트랩 할 수 없으므로 &lt;code&gt;HTMLTitleElement&lt;/code&gt; 요소 ( &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt; 태그를 나타냄)의 &lt;code&gt;text&lt;/code&gt; 속성에 바인딩 할 수 없습니다 . 대신이 서비스를 사용하여 현재 제목 값을 설정하고 가져올 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5b4015d56f483550026621efe502a07ebdf32347" translate="yes" xml:space="preserve">
          <source>Since the HTML templates of Angular components will be loaded as well, you must help Karma out a bit so that it can route them to the right paths:</source>
          <target state="translated">Angular 컴포넌트의 HTML 템플릿도로드되기 때문에 올바른 경로로 라우팅 할 수 있도록 Karma를 약간 도와야합니다.</target>
        </trans-unit>
        <trans-unit id="3beea211f1804990fa205b0b8d4b2454da8609e2" translate="yes" xml:space="preserve">
          <source>Since the built-in validators won't always match the exact use case of your application, sometimes you'll want to create a custom validator.</source>
          <target state="translated">내장 된 유효성 검사기는 항상 응용 프로그램의 정확한 사용 사례와 일치하지는 않으므로 사용자 지정 유효성 검사기를 만드는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="06f43cc29ccce4b6c6c49a26d957d26e51ac324b" translate="yes" xml:space="preserve">
          <source>Since there is no safe navigation operator and &lt;code&gt;nullItem&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, JavaScript and Angular would throw a &lt;code&gt;null&lt;/code&gt; reference error and break the rendering process of Angular:</source>
          <target state="translated">안전한 탐색 연산자가없고 &lt;code&gt;nullItem&lt;/code&gt; 이 &lt;code&gt;null&lt;/code&gt; 이므로 JavaScript 및 Angular는 &lt;code&gt;null&lt;/code&gt; 참조 오류를 발생시키고 Angular의 렌더링 프로세스를 중단합니다.</target>
        </trans-unit>
        <trans-unit id="d4292af90c079ddd0bad097dd58e04a53ac8506a" translate="yes" xml:space="preserve">
          <source>Since this is an AngularJS template, you can still use other AngularJS directives on the element, even though it has Angular binding attributes on it. For example, you can easily make multiple copies of the component using &lt;code&gt;ng-repeat&lt;/code&gt;:</source>
          <target state="translated">이것은 AngularJS 템플릿이므로 Angular 바인딩 속성이 있어도 요소에 다른 AngularJS 지시문을 계속 사용할 수 있습니다. 예를 들어, &lt;code&gt;ng-repeat&lt;/code&gt; 를 사용하여 구성 요소를 여러 개 쉽게 만들 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a4f54ab1d843d6f199cc22382be08aad91e7faa7" translate="yes" xml:space="preserve">
          <source>Since you're going to be writing Angular code in TypeScript, it makes sense to bring in the TypeScript compiler even before you begin upgrading.</source>
          <target state="translated">TypeScript에서 Angular 코드를 작성하므로 업그레이드를 시작하기 전에 TypeScript 컴파일러를 가져 오는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="b349521f8a5d735f2d1484bb3f738b4e8884f662" translate="yes" xml:space="preserve">
          <source>Single build</source>
          <target state="translated">단일 빌드</target>
        </trans-unit>
        <trans-unit id="a5b8565636523cbc8d6b4fc97a65c9df60070482" translate="yes" xml:space="preserve">
          <source>Single build w/Conditional Polyfills</source>
          <target state="translated">조건부 폴리 필이 포함 된 단일 빌드</target>
        </trans-unit>
        <trans-unit id="1fb523a0b4b744c4edc13339d42faf4f9861e15c" translate="yes" xml:space="preserve">
          <source>Single responsibility</source>
          <target state="translated">단일 책임</target>
        </trans-unit>
        <trans-unit id="c4e0470b624e71a21eece402feb2b959eb1a8809" translate="yes" xml:space="preserve">
          <source>Singleton services</source>
          <target state="translated">싱글 톤 서비스</target>
        </trans-unit>
        <trans-unit id="5087b8ce7b49664f4457f35e41654c6d9ce03a21" translate="yes" xml:space="preserve">
          <source>Size*</source>
          <target state="translated">Size*</target>
        </trans-unit>
        <trans-unit id="589b1dba4f995e2f0cb716ee31ddaf7065df280e" translate="yes" xml:space="preserve">
          <source>Skip installing dependency packages.</source>
          <target state="translated">종속성 패키지 설치를 건너 뜁니다.</target>
        </trans-unit>
        <trans-unit id="60e0af83d452bdfc8e29942e8af2bc2cddc128ee" translate="yes" xml:space="preserve">
          <source>Skip the node that is requesting injection.</source>
          <target state="translated">주입을 요청하는 노드를 건너 뜁니다.</target>
        </trans-unit>
        <trans-unit id="275ea403ef1e8d6f4d8ca0f67913d7977992fb07" translate="yes" xml:space="preserve">
          <source>SkipSelf</source>
          <target state="translated">SkipSelf</target>
        </trans-unit>
        <trans-unit id="d146630209145a11dfca372720f62ac79a0f4f04" translate="yes" xml:space="preserve">
          <source>SlicePipe</source>
          <target state="translated">SlicePipe</target>
        </trans-unit>
        <trans-unit id="bfb9fc3d9e97f6ca55abf4fa8493e4cc86726842" translate="yes" xml:space="preserve">
          <source>Slides in the new view by animating the view with an easing function and duration.  This animation results in the &lt;code&gt;about&lt;/code&gt; view sliding from the left to right.</source>
          <target state="translated">여유 기능과 지속 시간으로 뷰에 애니메이션을 적용하여 새 뷰에서 슬라이드합니다. 이 애니메이션은 &lt;code&gt;about&lt;/code&gt; 뷰가 왼쪽에서 오른쪽으로 미끄러지는 결과를 낳 습니다.</target>
        </trans-unit>
        <trans-unit id="b35160803242937e8123896c690c7d5ab471c973" translate="yes" xml:space="preserve">
          <source>Small functions</source>
          <target state="translated">작은 기능</target>
        </trans-unit>
        <trans-unit id="b37108b4eaa6fc62538c54def3b8931af9e3c84a" translate="yes" xml:space="preserve">
          <source>Smashing Magazine</source>
          <target state="translated">스매싱 매거진</target>
        </trans-unit>
        <trans-unit id="7a6aa5d0640936328c9339939e57443885436a50" translate="yes" xml:space="preserve">
          <source>So far, we've learned simple animations of single HTML elements. Angular also lets you animate coordinated sequences, such as an entire grid or list of elements as they enter and leave a page. You can choose to run multiple animations in parallel, or run discrete animations sequentially, one following another.</source>
          <target state="translated">지금까지 단일 HTML 요소의 간단한 애니메이션을 배웠습니다. Angular를 사용하면 전체 격자 선 또는 요소가 페이지에 들어오고 나가는 요소 목록과 같은 조정 된 시퀀스에 애니메이션을 적용 할 수 있습니다. 여러 애니메이션을 병렬로 실행하거나 개별 애니메이션을 순차적으로 실행하도록 선택할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5b6d23d1781fe83c088bfda2556066367800b3d8" translate="yes" xml:space="preserve">
          <source>So instead, you'll update the empty path route in &lt;code&gt;app-routing.module.ts&lt;/code&gt; to redirect to &lt;code&gt;/superheroes&lt;/code&gt;.</source>
          <target state="translated">대신 &lt;code&gt;app-routing.module.ts&lt;/code&gt; 에서 빈 경로 경로를 업데이트하여 &lt;code&gt;/superheroes&lt;/code&gt; 로 리디렉션합니다 .</target>
        </trans-unit>
        <trans-unit id="bb0fb574accf6c56d426a9e2dd7ba1d2736f6193" translate="yes" xml:space="preserve">
          <source>So normally a hybrid application begins life as an AngularJS application, and it is AngularJS that processes the root template, e.g. the index.html. Angular then steps into the picture when an Angular component is used somewhere in an AngularJS template. That component's template will then be managed by Angular, and it may contain any number of Angular components and directives.</source>
          <target state="translated">따라서 일반적으로 하이브리드 애플리케이션은 AngularJS 애플리케이션으로 시작되며 index.html과 같은 루트 템플리트를 처리하는 것은 AngularJS입니다. 그런 다음 Angular는 AngularJS 템플릿의 어딘가에 Angular 구성 요소가 사용될 때 그림으로 들어갑니다. 그런 다음 해당 구성 요소의 템플릿은 Angular에서 관리하며 원하는 수의 Angular 구성 요소와 지시문을 포함 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9aa54b0dbadeeee6325c29cf3df6a0f16f99ee9b" translate="yes" xml:space="preserve">
          <source>So, you can write an Angular component and then use it from AngularJS code. This is useful when you start to migrate from lower-level components and work your way up. But in some cases it is more convenient to do things in the opposite order: To start with higher-level components and work your way down. This too can be done using the &lt;code&gt;&lt;a href=&quot;../api/upgrade/static&quot;&gt;upgrade/static&lt;/a&gt;&lt;/code&gt;. You can &lt;em&gt;upgrade&lt;/em&gt; AngularJS component directives and then use them from Angular.</source>
          <target state="translated">따라서 Angular 구성 요소를 작성한 다음 AngularJS 코드에서 사용할 수 있습니다. 이는 하위 수준의 구성 요소에서 마이그레이션을 시작하고 작업을 진행할 때 유용합니다. 그러나 어떤 경우에는 반대 순서로 작업을 수행하는 것이 더 편리합니다. 더 높은 수준의 구성 요소로 시작하여 작업을 중단하십시오. 이것도 &lt;code&gt;&lt;a href=&quot;../api/upgrade/static&quot;&gt;upgrade/static&lt;/a&gt;&lt;/code&gt; 을 사용하여 수행 할 수 있습니다 . 당신은 할 수 있습니다 &lt;em&gt;업그레이드&lt;/em&gt; AngularJS와 구성 요소 지시를 한 후 각도에서 그들을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="b4f91bdb0e1b0e40fff4debcd0fea22f1999f491" translate="yes" xml:space="preserve">
          <source>Solution</source>
          <target state="translated">Solution</target>
        </trans-unit>
        <trans-unit id="2633258ffd3e68e79b7b1908dfbf24b90bb423a4" translate="yes" xml:space="preserve">
          <source>Some DOM properties don't have corresponding attributes; for example, &lt;code&gt;textContent&lt;/code&gt;.</source>
          <target state="translated">일부 DOM 속성에는 해당 속성이 없습니다. 예를 들어, &lt;code&gt;textContent&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="6ae4edc8a260d4601ea726f435b0a2e18cdf39f4" translate="yes" xml:space="preserve">
          <source>Some HTML attributes don't have corresponding properties; for example, &lt;code&gt;aria-*&lt;/code&gt;.</source>
          <target state="translated">일부 HTML 속성에는 해당 속성이 없습니다. 예를 들어, &lt;code&gt;aria-*&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="0c991dbf4394dac4f496aa181829243968713642" translate="yes" xml:space="preserve">
          <source>Some NgModules and their services should be loaded only once by the root &lt;code&gt;AppModule&lt;/code&gt;. Importing the module a second time by lazy loading a module could &lt;a href=&quot;ngmodule-faq#q-why-bad&quot;&gt;produce errant behavior&lt;/a&gt; that may be difficult to detect and diagnose.</source>
          <target state="translated">일부 NgModules 및 해당 서비스는 루트 &lt;code&gt;AppModule&lt;/code&gt; 에 의해 한 번만로드되어야합니다 . 모듈을 느리게로드하여 두 번째로 모듈을 가져 오면 감지 및 진단이 어려운 &lt;a href=&quot;ngmodule-faq#q-why-bad&quot;&gt;잘못된 동작&lt;/a&gt; 이 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a5ada9a0db0dd28905ee48dc3d4fd05c604c6200" translate="yes" xml:space="preserve">
          <source>Some additional options can only be set through the configuration file, either by direct editing or with the &lt;a href=&quot;cli/config&quot;&gt;&lt;code&gt;ng config&lt;/code&gt;&lt;/a&gt; command.</source>
          <target state="translated">일부 추가 옵션은 직접 편집하거나 &lt;a href=&quot;cli/config&quot;&gt; &lt;code&gt;ng config&lt;/code&gt; &lt;/a&gt; 명령 을 사용하여 구성 파일을 통해서만 설정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="05f75196c5ccd5dff003febc77598f3649dbab45" translate="yes" xml:space="preserve">
          <source>Some additional options can only be set through the configuration file, either by direct editing or with the &lt;code&gt;ng &lt;a href=&quot;../api/router/router#config&quot;&gt;config&lt;/a&gt;&lt;/code&gt; command. These include &lt;code&gt;assets&lt;/code&gt;, &lt;code&gt;styles&lt;/code&gt;, and &lt;code&gt;scripts&lt;/code&gt; objects that provide runtime-global resources to include in the project. Resources in CSS, such as images and fonts, are automatically written and fingerprinted at the root of the output folder.</source>
          <target state="translated">일부 추가 옵션은 직접 편집하거나 &lt;code&gt;ng &lt;a href=&quot;../api/router/router#config&quot;&gt;config&lt;/a&gt;&lt;/code&gt; 명령 을 사용하여 구성 파일을 통해서만 설정할 수 있습니다 . 여기에는 프로젝트에 포함 할 런타임 글로벌 자원을 제공하는 &lt;code&gt;assets&lt;/code&gt; , &lt;code&gt;styles&lt;/code&gt; 및 &lt;code&gt;scripts&lt;/code&gt; 오브젝트가 포함됩니다. 이미지 및 글꼴과 같은 CSS의 리소스는 출력 폴더의 루트에 자동으로 쓰여지고 지문이 찍 힙니다.</target>
        </trans-unit>
        <trans-unit id="a5b94075e4789af051517d68dc6a061a026bd244" translate="yes" xml:space="preserve">
          <source>Some applications will be easier to upgrade than others, and there are many ways to make it easier for yourself. It is possible to prepare and align AngularJS applications with Angular even before beginning the upgrade process. These preparation steps are all about making the code more decoupled, more maintainable, and better aligned with modern development tools. That means in addition to making the upgrade easier, you will also improve the existing AngularJS applications.</source>
          <target state="translated">일부 응용 프로그램은 다른 응용 프로그램보다 업그레이드하기가 쉬울뿐만 아니라 더 쉽게 만들 수있는 방법이 많이 있습니다. 업그레이드 프로세스를 시작하기 전에도 AngularJS 애플리케이션을 Angular에 준비하고 정렬 할 수 있습니다. 이러한 준비 단계는 모두 코드를 분리하고 유지 관리가 용이하며 최신 개발 도구와 잘 맞도록 만드는 것입니다. 즉, 업그레이드가 쉬워 질뿐만 아니라 기존 AngularJS 응용 프로그램도 향상됩니다.</target>
        </trans-unit>
        <trans-unit id="d4c4b530fecc515d6dcb4d6c84aa1cccde0771d7" translate="yes" xml:space="preserve">
          <source>Some code examples display a file that has one or more similarly named companion files. For example, &lt;code&gt;hero.component.ts&lt;/code&gt; and &lt;code&gt;hero.component.html&lt;/code&gt;.</source>
          <target state="translated">일부 코드 예는 하나 이상의 유사한 이름의 컴패니언 파일이있는 파일을 표시합니다. 예를 들어 &lt;code&gt;hero.component.ts&lt;/code&gt; 및 &lt;code&gt;hero.component.html&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="c175426c0f368bc13a5e0cb52347003a8ea23739" translate="yes" xml:space="preserve">
          <source>Some developers may not be able to add the &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; element, perhaps because they don't have access to &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; or the &lt;code&gt;index.html&lt;/code&gt;.</source>
          <target state="translated">일부 개발자는 &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; 또는 &lt;code&gt;index.html&lt;/code&gt; 에 액세스 할 수 없으므로 &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; 요소 를 추가 하지 못할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="893e585286fde4fa67e702c66e778c6f757b99b4" translate="yes" xml:space="preserve">
          <source>Some developers prefer Visual Studio as their Integrated Development Environment (IDE).</source>
          <target state="translated">일부 개발자는 Visual Studio를 IDE (Integrated Development Environment)로 선호합니다.</target>
        </trans-unit>
        <trans-unit id="d13fc2a3eeb5b4b864ff86abf2468a36d19d3307" translate="yes" xml:space="preserve">
          <source>Some developers skip the Routing Module (for example, &lt;code&gt;AppRoutingModule&lt;/code&gt;) when the configuration is simple and merge the routing configuration directly into the companion module (for example, &lt;code&gt;AppModule&lt;/code&gt;).</source>
          <target state="translated">일부 개발자 는 구성이 단순 할 때 라우팅 모듈 (예 : &lt;code&gt;AppRoutingModule&lt;/code&gt; ) 을 건너 뛰고 라우팅 구성을 컴패니언 모듈 (예 : &lt;code&gt;AppModule&lt;/code&gt; )에 직접 병합합니다 .</target>
        </trans-unit>
        <trans-unit id="68c82fc9e96cd5bf4503daf934cdae5d3ee2859c" translate="yes" xml:space="preserve">
          <source>Some developers want the message to display only when the user makes an invalid change. Hiding the message while the control is &quot;pristine&quot; achieves that goal. You'll see the significance of this choice when you add a new hero to the form.</source>
          <target state="translated">일부 개발자는 사용자가 잘못 변경 한 경우에만 메시지가 표시되기를 원합니다. 제어가 &quot;원시&quot;상태 인 동안 메시지를 숨기면 해당 목표를 달성 할 수 있습니다. 폼에 새로운 영웅을 추가 할 때이 선택의 중요성을 알 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6e98114d74a4f635cc3af1651be1c7c12e084f73" translate="yes" xml:space="preserve">
          <source>Some devices don't support JavaScript or execute JavaScript so poorly that the user experience is unacceptable. For these cases, you may require a server-rendered, no-JavaScript version of the app. This version, however limited, may be the only practical alternative for people who otherwise couldn't use the app at all.</source>
          <target state="translated">일부 장치는 JavaScript를 지원하지 않거나 JavaScript를 제대로 실행하지 않아 사용자 경험이 허용되지 않습니다. 이 경우 서버에서 렌더링 한 자바 스크립트가없는 앱 버전이 필요할 수 있습니다. 그러나이 버전은 제한적이지만 앱을 전혀 사용할 수없는 사람들을위한 실질적인 대안 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="67aaf2c208d248384694dacec3e3cb24b1e785ed" translate="yes" xml:space="preserve">
          <source>Some environments or platforms, like &lt;code&gt;@angular/platform-server&lt;/code&gt; used in &lt;a href=&quot;universal&quot;&gt;Server-side Rendering&lt;/a&gt;, don't support Web Workers. You have to provide a fallback mechanism to perform the computations that the worker would perform to ensure your application will work in these environments.</source>
          <target state="translated">&lt;code&gt;@angular/platform-server&lt;/code&gt; &lt;a href=&quot;universal&quot;&gt;측 렌더링에&lt;/a&gt; 사용되는 @ angular / platform-server 와 같은 일부 환경 또는 플랫폼 은 웹 워커를 지원하지 않습니다. 작업자가 응용 프로그램이 이러한 환경에서 작동하는지 확인하기 위해 수행 할 계산을 수행하려면 대체 메커니즘을 제공해야합니다.</target>
        </trans-unit>
        <trans-unit id="f459a965438f121077b36b8f5d98ed13ae2fa699" translate="yes" xml:space="preserve">
          <source>Some features of Angular may require additional polyfills.</source>
          <target state="translated">Angular의 일부 기능에는 추가 폴리 필이 필요할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="652cb417856953b2c85d53c33fd537306ae11936" translate="yes" xml:space="preserve">
          <source>Some legacy browsers still download both bundles, but only execute the appropriate scripts based on the attributes mentioned above. You can read more on the issue &lt;a href=&quot;https://github.com/philipwalton/webpack-esnext-boilerplate/issues/1&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">일부 레거시 브라우저는 여전히 두 번들을 모두 다운로드하지만 위에서 언급 한 속성을 기반으로 적절한 스크립트 만 실행합니다. 이 문제에 대한 자세한 내용은 &lt;a href=&quot;https://github.com/philipwalton/webpack-esnext-boilerplate/issues/1&quot;&gt;여기를 참조하십시오&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="d5e683afd923f066295eb3ba18175aa6261d14ea" translate="yes" xml:space="preserve">
          <source>Some legal HTML doesn't make much sense in a template. The &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; elements have no useful role. Pretty much everything else is fair game.</source>
          <target state="translated">일부 합법적 인 HTML은 템플릿에서 의미가 없습니다. &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; , &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; 및 &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; 요소는 유용한 역할이 없다. 그 밖의 모든 것은 공정한 게임입니다.</target>
        </trans-unit>
        <trans-unit id="70841f86386fe39f91e58b3488f2560c0f72b3dc" translate="yes" xml:space="preserve">
          <source>Some modules, like &lt;code&gt;AppModule&lt;/code&gt;, must be loaded from the start. But others can and should be lazy loaded. The &lt;code&gt;AdminModule&lt;/code&gt;, for example, is needed by a few authorized users, so you should only load it when requested by the right people.</source>
          <target state="translated">&lt;code&gt;AppModule&lt;/code&gt; 과 같은 일부 모듈 은 처음부터로드해야합니다. 그러나 다른 사람들은 게으른 짐을 싣고 갈 수 있어야합니다. &lt;code&gt;AdminModule&lt;/code&gt; 은 올바른 사람의 요청이있을 때, 예를 들어, 몇 권한이있는 사용자가 필요로한다, 그래서 당신은 단지 그것을로드해야합니다.</target>
        </trans-unit>
        <trans-unit id="a75dabef18d29e986ef8c7578bdf7c0413bbe653" translate="yes" xml:space="preserve">
          <source>Some noteworthy observations:</source>
          <target state="translated">몇 가지 주목할만한 관찰 :</target>
        </trans-unit>
        <trans-unit id="9b39c71b1e1a2ca83607b09ace431ca3689d5eab" translate="yes" xml:space="preserve">
          <source>Some observations:</source>
          <target state="translated">일부 관찰 :</target>
        </trans-unit>
        <trans-unit id="1b0a04594ac4a3d21846af15796e99cea045e104" translate="yes" xml:space="preserve">
          <source>Some of the ES2015+ operators</source>
          <target state="translated">ES2015 + 운영자 중 일부</target>
        </trans-unit>
        <trans-unit id="b203713cf339db71c76ab99e8f1e0222e72c6fd8" translate="yes" xml:space="preserve">
          <source>Some of the metadata is in the &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; decorators that you added to your component classes. Other critical metadata is in &lt;a href=&quot;../guide/ngmodules&quot;&gt;&lt;code&gt;@NgModule&lt;/code&gt;&lt;/a&gt; decorators.</source>
          <target state="translated">일부 메타 데이터는 구성 요소 클래스에 추가 한 &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; 데코레이터에 있습니다. 다른 중요한 메타 데이터는 &lt;a href=&quot;../guide/ngmodules&quot;&gt; &lt;code&gt;@NgModule&lt;/code&gt; &lt;/a&gt; 데코레이터에 있습니다.</target>
        </trans-unit>
        <trans-unit id="3ef85858173e182deb1f6adc35fffb5ed7ebfcb3" translate="yes" xml:space="preserve">
          <source>Some scripts extend other libraries; for instance with JQuery plugins:</source>
          <target state="translated">일부 스크립트는 다른 라이브러리를 확장합니다. 예를 들어 JQuery 플러그인의 경우 :</target>
        </trans-unit>
        <trans-unit id="b9f04f496af857d2db0e0d672068b333364f9fdf" translate="yes" xml:space="preserve">
          <source>Some style binding styles have a unit extension. The following example conditionally sets the font size in &amp;ldquo;em&amp;rdquo; and &amp;ldquo;%&amp;rdquo; units.</source>
          <target state="translated">일부 스타일 바인딩 스타일에는 단위 확장이 있습니다. 다음 예는 조건부로 글꼴 크기를 &quot;em&quot;및 &quot;%&quot;단위로 설정합니다.</target>
        </trans-unit>
        <trans-unit id="87ee9cc01ce8a12a1e228d485f58807d2d64a01c" translate="yes" xml:space="preserve">
          <source>Someday you'll want to repeat a block of HTML but only when a particular condition is true. You'll &lt;em&gt;try&lt;/em&gt; to put both an &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; and an &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; on the same host element. Angular won't let you. You may apply only one &lt;em&gt;structural&lt;/em&gt; directive to an element.</source>
          <target state="translated">언젠가는 특정 조건이 참일 때만 HTML 블록을 반복하고 싶을 것입니다. 당신은거야 &lt;em&gt;시도&lt;/em&gt; 모두 넣어 &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 와 &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; 을 동일한 호스트 요소. 각도는 당신을 못하게합니다. 하나의 &lt;em&gt;구조&lt;/em&gt; 지시문 만 요소에 적용 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="dfbcabd470eab905a90fa0ceb3a9288d47b1c007" translate="yes" xml:space="preserve">
          <source>Sometimes &quot;breaking changes&quot;, such as the removal of support for select APIs and features, are necessary to innovate and stay current with new best practices, changing dependencies, or changes in the (web) platform itself.</source>
          <target state="translated">새로운 모범 사례, 종속성 변경 또는 (웹) 플랫폼 자체의 변경 사항으로 혁신하고 최신 상태를 유지하려면 선택 API 및 기능에 대한 지원 제거와 같은 &quot;속성 변경&quot;이 필요한 경우가 있습니다.</target>
        </trans-unit>
        <trans-unit id="49de1568c1ef3cb993b95f0727727351d8338828" translate="yes" xml:space="preserve">
          <source>Sometimes a binding expression triggers a type error during &lt;a href=&quot;aot-compiler&quot;&gt;AOT compilation&lt;/a&gt; and it is not possible or difficult to fully specify the type. To silence the error, you can use the &lt;code&gt;$any()&lt;/code&gt; cast function to cast the expression to the &lt;a href=&quot;http://www.typescriptlang.org/docs/handbook/basic-types.html#any&quot;&gt;&lt;code&gt;any&lt;/code&gt; type&lt;/a&gt; as in the following example:</source>
          <target state="translated">때로는 바인딩 표현식이 &lt;a href=&quot;aot-compiler&quot;&gt;AOT 컴파일&lt;/a&gt; 중 유형 오류를 트리거하고 유형 을 완전히 지정하는 것이 불가능하거나 어렵습니다. 오류를 침묵시키기 위해 다음 예제와 같이 &lt;code&gt;$any()&lt;/code&gt; 캐스트 함수를 사용하여 표현식을 &lt;a href=&quot;http://www.typescriptlang.org/docs/handbook/basic-types.html#any&quot;&gt; &lt;code&gt;any&lt;/code&gt; 유형&lt;/a&gt; 으로 캐스트 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="22c0dd5f849dcef145063af39357c83c47ffec85" translate="yes" xml:space="preserve">
          <source>Sometimes a service depends on other services, which may depend on yet other services. The dependency injection framework resolves these nested dependencies in the correct order. At each step, the consumer of dependencies declares what it requires in its constructor, and lets the framework provide them.</source>
          <target state="translated">때로는 서비스가 다른 서비스에 의존하고 다른 서비스에 의존 할 수도 있습니다. 종속성 주입 프레임 워크는 이러한 중첩 된 종속성을 올바른 순서로 해결합니다. 각 단계에서 종속성 소비자는 생성자에 필요한 것을 선언하고 프레임 워크에서이를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="d6ab589ef42dcecb24ea98bba5d742b803712e16" translate="yes" xml:space="preserve">
          <source>Sometimes an app needs to display a view or a portion of a view only under specific circumstances.</source>
          <target state="translated">경우에 따라 앱은 특정 상황에서만보기 또는보기의 일부를 표시해야합니다.</target>
        </trans-unit>
        <trans-unit id="6c3f8101fc2112170a72478fb7f231c9aa240796" translate="yes" xml:space="preserve">
          <source>Sometimes applications genuinely need to include executable code, display an &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; from some URL, or construct potentially dangerous URLs. To prevent automatic sanitization in any of these situations, you can tell Angular that you inspected a value, checked how it was generated, and made sure it will always be secure. But &lt;em&gt;be careful&lt;/em&gt;. If you trust a value that might be malicious, you are introducing a security vulnerability into your application. If in doubt, find a professional security reviewer.</source>
          <target state="translated">때로는 응용 프로그램에서 실행 코드를 포함 하거나 일부 URL에서 &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; 을 표시 하거나 잠재적으로 위험한 URL을 구성 해야하는 경우가 있습니다 . 이러한 상황에서 자동 살균을 방지하기 위해 Angular에 값을 검사하고 생성 방법을 확인한 후 항상 안전한지 확인할 수 있습니다. 그러나 &lt;em&gt;조심하십시오&lt;/em&gt; . 악의적 일 수있는 값을 신뢰하면 응용 프로그램에 보안 취약점이 발생하는 것입니다. 의심스러운 경우 전문 보안 검토자를 찾으십시오.</target>
        </trans-unit>
        <trans-unit id="e0cab9b66ded5e80fee20b0576feaa22af6aee16" translate="yes" xml:space="preserve">
          <source>Sometimes applications transfer large amounts of data and those transfers can take a long time. File uploads are a typical example. Give the users a better experience by providing feedback on the progress of such transfers.</source>
          <target state="translated">응용 프로그램이 많은 양의 데이터를 전송하는 데 시간이 오래 걸릴 수 있습니다. 파일 업로드가 일반적인 예입니다. 이러한 전송 진행 상황에 대한 피드백을 제공하여 사용자에게 더 나은 경험을 제공하십시오.</target>
        </trans-unit>
        <trans-unit id="cf2e10c43e5e90800b73756ce07244bbcedd633f" translate="yes" xml:space="preserve">
          <source>Sometimes however, &lt;code&gt;null&lt;/code&gt; values in the property path may be OK under certain circumstances, especially when the value starts out null but the data arrives eventually.</source>
          <target state="translated">그러나 특정 상황에서, 특히 값이 null로 시작하지만 데이터가 결국 도착하는 경우 속성 경로의 &lt;code&gt;null&lt;/code&gt; 값이 정상일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="afbfcf85cb461260370ada65947a3ffc928e7abf" translate="yes" xml:space="preserve">
          <source>Sometimes it's easier to provide a ready-made object rather than ask the injector to create it from a class. To inject an object you have already created, configure the injector with the &lt;code&gt;&lt;a href=&quot;../api/core/valuesansprovider#useValue&quot;&gt;useValue&lt;/a&gt;&lt;/code&gt; option</source>
          <target state="translated">때로는 인젝터에게 클래스에서 객체를 만들도록 요청하는 것보다 기성품을 제공하는 것이 더 쉽습니다. 이미 생성 한 객체를 주입하려면 &lt;code&gt;&lt;a href=&quot;../api/core/valuesansprovider#useValue&quot;&gt;useValue&lt;/a&gt;&lt;/code&gt; 옵션을 사용하여 주입기를 구성하십시오.</target>
        </trans-unit>
        <trans-unit id="916f97cf23387473c8f6e5644aca380547c981d1" translate="yes" xml:space="preserve">
          <source>Sometimes it's useful to apply styles based on some condition &lt;em&gt;outside&lt;/em&gt; of a component's view. For example, a CSS theme class could be applied to the document &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; element, and you want to change how your component looks based on that.</source>
          <target state="translated">때로는 구성 요소의 관점 &lt;em&gt;밖에서&lt;/em&gt; 어떤 조건에 따라 스타일을 적용하는 것이 유용합니다 . 예를 들어 CSS 테마 클래스를 document &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; 요소에 적용 할 수 있으며이를 기반으로 구성 요소의 모양을 변경하려고합니다.</target>
        </trans-unit>
        <trans-unit id="5c406639534428eae74420bbaf69bc64d5bb3873" translate="yes" xml:space="preserve">
          <source>Sometimes refers to a &lt;a href=&quot;glossary#dependency-injection&quot;&gt;dependency-injection&lt;/a&gt; binding between a &lt;a href=&quot;glossary#token&quot;&gt;token&lt;/a&gt; and a dependency &lt;a href=&quot;glossary#provider&quot;&gt;provider&lt;/a&gt;.</source>
          <target state="translated">때때로 &lt;a href=&quot;glossary#token&quot;&gt;토큰&lt;/a&gt; 과 종속성 &lt;a href=&quot;glossary#provider&quot;&gt;공급자&lt;/a&gt; 간의 &lt;a href=&quot;glossary#dependency-injection&quot;&gt;종속성 주입&lt;/a&gt; 바인딩을 나타냅니다 .</target>
        </trans-unit>
        <trans-unit id="38e29bbe034f4e55ccadca72413de5d634c48c4e" translate="yes" xml:space="preserve">
          <source>Sometimes the error is transient and will go away automatically if you try again. For example, network interruptions are common in mobile scenarios, and trying again may produce a successful result.</source>
          <target state="translated">때때로 오류는 일시적이며 다시 시도하면 자동으로 사라집니다. 예를 들어, 모바일 시나리오에서 네트워크 중단이 일반적이며 다시 시도하면 성공적인 결과를 얻을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ad442d3fdd67eb4c192c8f3016404b07efc76dfc" translate="yes" xml:space="preserve">
          <source>Sometimes the public name of an input/output property should be different from the internal name. While it is a best practice to avoid this situation, Angular does offer a solution.</source>
          <target state="translated">때때로 입 / 출력 특성의 공개 이름이 내부 이름과 달라야합니다. 이러한 상황을 피하는 것이 가장 좋은 방법이지만 Angular는 솔루션을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="c9af7e5c88e4113c8c33d69789e6b44b2076d8a8" translate="yes" xml:space="preserve">
          <source>Sometimes the section header text makes for an unattractive anchor. &lt;a href=&quot;docs-style-guide#ugly-long-section-header-anchors&quot;&gt;This one&lt;/a&gt; is pretty bad.</source>
          <target state="translated">때로는 섹션 헤더 텍스트가 매력없는 앵커를 만듭니다. &lt;a href=&quot;docs-style-guide#ugly-long-section-header-anchors&quot;&gt;이것은&lt;/a&gt; 꽤 나쁘다.</target>
        </trans-unit>
        <trans-unit id="25dbb2d1d64aace8914c9a8f3da6a2dc60d4e5c5" translate="yes" xml:space="preserve">
          <source>Sometimes using the appropriate native element requires a container element. For example, the native &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; element cannot have children, so any custom text entry components need to wrap an &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; with additional elements. While you might just include the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; in your custom component's template, this makes it impossible for users of the component to set arbitrary properties and attributes to the input element. Instead, you can create a container component that uses content projection to include the native control in the component's API.</source>
          <target state="translated">때때로 적절한 기본 요소를 사용하려면 컨테이너 요소가 필요합니다. 예를 들어, 기본 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 요소는 하위를 가질 수 없으므로 모든 사용자 정의 텍스트 입력 구성 요소는 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 을 추가 요소 로 랩핑해야합니다 . 사용자 정의 구성 요소의 템플릿에 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 을 포함시킬 수도 있지만 이로 인해 구성 요소 사용자는 입력 요소에 임의의 속성 및 특성을 설정할 수 없습니다. 대신 컨텐츠 프로젝션을 사용하여 컴포넌트의 API에 기본 제어를 포함하는 컨테이너 컴포넌트를 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3ac07b67807f6a8d2a6a6fd612490e48e4e04483" translate="yes" xml:space="preserve">
          <source>Sometimes you don't know the value of a dimensional style property until runtime. For example, elements often have widths and heights that depend on their content and the screen size. These properties are often challenging to animate using CSS.</source>
          <target state="translated">때로는 런타임까지 차원 스타일 속성의 값을 모릅니다. 예를 들어 요소에는 종종 내용과 화면 크기에 따라 너비와 높이가 있습니다. 이러한 속성은 종종 CSS를 사용하여 애니메이션을 적용하기가 어렵습니다.</target>
        </trans-unit>
        <trans-unit id="4ed6a463490243dcb2def9121489505c9fc9f592" translate="yes" xml:space="preserve">
          <source>Sometimes you need to clear the request body rather than replace it. If you set the cloned request body to &lt;code&gt;undefined&lt;/code&gt;, Angular assumes you intend to leave the body as is. That is not what you want. If you set the cloned request body to &lt;code&gt;null&lt;/code&gt;, Angular knows you intend to clear the request body.</source>
          <target state="translated">때로는 요청 본문을 바꾸지 않고 지워야 할 때가 있습니다. 복제 된 요청 본문을 &lt;code&gt;undefined&lt;/code&gt; 로 설정하면 Angular는 본문을 그대로 둡니다. 그것은 당신이 원하는 것이 아닙니다. 복제 된 요청 본문을 &lt;code&gt;null&lt;/code&gt; 로 설정하면 Angular는 요청 본문을 지우려고합니다.</target>
        </trans-unit>
        <trans-unit id="e989b7f389257a85d64fa80446bff97e952260a5" translate="yes" xml:space="preserve">
          <source>Sometimes you need to create a dependent value dynamically, based on information you won't have until run time. For example, you might need information that changes repeatedly in the course of the browser session. Also, your injectable service might not have independent access to the source of the information.</source>
          <target state="translated">때로는 런타임까지 보유하지 않은 정보를 기반으로 종속 값을 동적으로 작성해야합니다. 예를 들어, 브라우저 세션 중에 반복적으로 변경되는 정보가 필요할 수 있습니다. 또한, 귀하의 주사 서비스는 정보 출처에 대한 독립적 인 액세스 권한이 없을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7259258829117230ab23109501a352812f52835c" translate="yes" xml:space="preserve">
          <source>Sometimes you want multiple instances of a service at &lt;em&gt;the same level&lt;/em&gt; of the component hierarchy.</source>
          <target state="translated">때로는 &lt;em&gt;동일한 수준&lt;/em&gt; 의 구성 요소 계층 에서 서비스의 여러 인스턴스를 원할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="06c4fd63af0dc746f3373b72a6f8a9279dddac9e" translate="yes" xml:space="preserve">
          <source>Sometimes you want to display an example of bad code or bad design.</source>
          <target state="translated">잘못된 코드 나 잘못된 디자인의 예를 표시하려는 경우가 있습니다.</target>
        </trans-unit>
        <trans-unit id="e5d4f7b24f7f6d8872f71da1476619f69e40c15a" translate="yes" xml:space="preserve">
          <source>Sometimes, instead of starting an independent execution for each subscriber, you want each subscription to get the same values&amp;mdash;even if values have already started emitting. This might be the case with something like an observable of clicks on the document object.</source>
          <target state="translated">때로는 각 가입자에 대해 독립적 인 실행을 시작하는 대신 값이 이미 방출되기 시작한 경우에도 각 가입이 동일한 값을 갖기를 원할 수 있습니다. 이것은 문서 객체를 클릭하는 것과 같은 경우 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="38c10fcb09c207c1bb5c55d3634b3b93a859ff8a" translate="yes" xml:space="preserve">
          <source>Soon you can load Angular dependencies into the application via &lt;code&gt;index.html&lt;/code&gt;, but first you need to do some directory path adjustments. You'll need to load files from &lt;code&gt;node_modules&lt;/code&gt; and the project root instead of from the &lt;code&gt;/app&lt;/code&gt; directory as you've been doing to this point.</source>
          <target state="translated">곧 &lt;code&gt;index.html&lt;/code&gt; 을 통해 Angular 의존성을 응용 프로그램에로드 할 수 있지만 먼저 디렉토리 경로 조정을 수행해야합니다. 이 시점에서했던 것처럼 &lt;code&gt;/app&lt;/code&gt; 디렉토리 대신 &lt;code&gt;node_modules&lt;/code&gt; 및 프로젝트 루트 에서 파일을로드해야합니다 .</target>
        </trans-unit>
        <trans-unit id="22a35fbebff47762d94faae1d7babdf97b0736bf" translate="yes" xml:space="preserve">
          <source>Source code</source>
          <target state="translated">소스 코드</target>
        </trans-unit>
        <trans-unit id="dccd6b0b6b5b1186e6e30c2ae5229fdc4632e9fd" translate="yes" xml:space="preserve">
          <source>Source code markup</source>
          <target state="translated">소스 코드 마크 업</target>
        </trans-unit>
        <trans-unit id="51944448d51ed63f8b71259f667d572991b13a0b" translate="yes" xml:space="preserve">
          <source>Source file for tests.</source>
          <target state="translated">테스트를위한 소스 파일.</target>
        </trans-unit>
        <trans-unit id="2dfaa0d2d97365cc092010384e37e8702618042b" translate="yes" xml:space="preserve">
          <source>Source files for the root-level application project.</source>
          <target state="translated">루트 수준 응용 프로그램 프로젝트의 소스 파일</target>
        </trans-unit>
        <trans-unit id="8f07d985745ff117e05b2075b0685a36ecb5d3ea" translate="yes" xml:space="preserve">
          <source>Special characters used as literal characters are quoted with ASCII single quotes.</source>
          <target state="translated">리터럴 문자로 사용되는 특수 문자는 ASCII 작은 따옴표로 묶습니다.</target>
        </trans-unit>
        <trans-unit id="8c0463acdb13c9f21299a5b72807ab9eac6c7981" translate="yes" xml:space="preserve">
          <source>Special selectors</source>
          <target state="translated">스페셜 셀렉터</target>
        </trans-unit>
        <trans-unit id="91c85cdd186d333f7a6d24ee61f9dcffbee3f1f5" translate="yes" xml:space="preserve">
          <source>Special values &lt;code&gt;:enter&lt;/code&gt; and &lt;code&gt;:leave&lt;/code&gt; initiate a transition on the entry and exit states, equivalent to &quot;void =&amp;gt; &lt;em&gt;&quot; and &quot;&lt;/em&gt; =&amp;gt; void&quot;.</source>
          <target state="translated">특수 값 &lt;code&gt;:enter&lt;/code&gt; 및 &lt;code&gt;:leave&lt;/code&gt; 는 &quot;void =&amp;gt; &lt;em&gt;&quot;및 &quot;&lt;/em&gt; =&amp;gt; void&quot; 에 해당하는 진입 및 종료 상태에서 전환을 시작합니다 .</target>
        </trans-unit>
        <trans-unit id="715adef1813fe743fd692801c9c30a164332f285" translate="yes" xml:space="preserve">
          <source>Special values &lt;code&gt;:increment&lt;/code&gt; and &lt;code&gt;:decrement&lt;/code&gt; initiate a transition when a numeric value has increased or decreased in value.</source>
          <target state="translated">특수 값 &lt;code&gt;:increment&lt;/code&gt; 및 &lt;code&gt;:decrement&lt;/code&gt; 는 숫자 값이 증가하거나 감소 할 때 전환을 시작합니다.</target>
        </trans-unit>
        <trans-unit id="9f76f08c178d6051f1685c03b043bda781f3484e" translate="yes" xml:space="preserve">
          <source>Special values for state-change expressions</source>
          <target state="translated">상태 변경 표현식의 특수 값</target>
        </trans-unit>
        <trans-unit id="7cd288dd75d4289419a0f8f2f0190edc346f7e75" translate="yes" xml:space="preserve">
          <source>Specifically, it is as if the list of modules whose exported components, directives, or pipes are referenced by the component templates were declared in this module.</source>
          <target state="translated">특히, 내 보낸 구성 요소, 지시문 또는 파이프가 구성 요소 템플리트에 의해 참조되는 모듈 목록이이 모듈에서 선언 된 것과 같습니다.</target>
        </trans-unit>
        <trans-unit id="d85c52f52591e014091971f46f808ca788e841cc" translate="yes" xml:space="preserve">
          <source>Specifically, the classes and functions in the &lt;code&gt;&lt;a href=&quot;../static&quot;&gt;upgrade/static&lt;/a&gt;&lt;/code&gt; module allow the following:</source>
          <target state="translated">특히 &lt;code&gt;&lt;a href=&quot;../static&quot;&gt;upgrade/static&lt;/a&gt;&lt;/code&gt; 모듈 의 클래스와 함수 는 다음을 허용합니다.</target>
        </trans-unit>
        <trans-unit id="89c41b5f000ca9eae0da038c4c2562fc146ec362" translate="yes" xml:space="preserve">
          <source>Specifically, this guide showed how you can achieve better performance and greater flexibility in your hybrid apps by using &lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule()&lt;/a&gt; instead of &lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;.</source>
          <target state="translated">특히이 가이드는 &lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt; 대신 &lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule ()&lt;/a&gt; 을 사용하여 하이브리드 앱에서 더 나은 성능과 유연성을 얻는 방법을 보여주었습니다 .</target>
        </trans-unit>
        <trans-unit id="f206880225dd3a28e161e67b013fb9818d73a109" translate="yes" xml:space="preserve">
          <source>Specifies a CSS selector that identifies this directive within a template. Supported selectors include &lt;code&gt;element&lt;/code&gt;, &lt;code&gt;[attribute]&lt;/code&gt;, &lt;code&gt;.class&lt;/code&gt;, and &lt;code&gt;:not()&lt;/code&gt;.</source>
          <target state="translated">템플릿 내에서이 지시문을 식별하는 CSS 선택기를 지정합니다. 지원되는 선택기에는 &lt;code&gt;element&lt;/code&gt; , &lt;code&gt;[attribute]&lt;/code&gt; , &lt;code&gt;.class&lt;/code&gt; 및 &lt;code&gt;:not()&lt;/code&gt; 있습니다.</target>
        </trans-unit>
        <trans-unit id="69f74f0128ed8b3251b4e7dbf826710d5ebfa149" translate="yes" xml:space="preserve">
          <source>Specifies a group of animation steps (&lt;em&gt;inner animations&lt;/em&gt;) to be run in parallel. Animation continues only after all inner animation steps have completed. Used within &lt;code&gt;&lt;a href=&quot;../api/animations/sequence&quot;&gt;sequence&lt;/a&gt;()&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../api/animations/transition&quot;&gt;transition&lt;/a&gt;().&lt;/code&gt;</source>
          <target state="translated">병렬로 실행할 애니메이션 단계 그룹 ( &lt;em&gt;내부 애니메이션&lt;/em&gt; )을 지정합니다 . 모든 내부 애니메이션 단계가 완료된 후에 만 ​​애니메이션이 계속됩니다. &lt;code&gt;&lt;a href=&quot;../api/animations/sequence&quot;&gt;sequence&lt;/a&gt;()&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;../api/animations/transition&quot;&gt;transition&lt;/a&gt;().&lt;/code&gt; () 내에서 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="37d60de96062cbae9258cdcb3c7d3e4639f09f03" translate="yes" xml:space="preserve">
          <source>Specifies a list of animation steps that are run sequentially, one by one.</source>
          <target state="translated">순차적으로 실행되는 애니메이션 단계 목록을 하나씩 지정합니다.</target>
        </trans-unit>
        <trans-unit id="0a61ad296416ad71ea36b7350e3ccd9473acb817" translate="yes" xml:space="preserve">
          <source>Specifies a root URI to use for relative navigation.</source>
          <target state="translated">상대 탐색에 사용할 루트 URI를 지정합니다.</target>
        </trans-unit>
        <trans-unit id="3ea0d046f01ef562b736f121145dd2adf0bff4e1" translate="yes" xml:space="preserve">
          <source>Specifies all files that are exported from your library.</source>
          <target state="translated">라이브러리에서 내 보낸 모든 파일을 지정합니다.</target>
        </trans-unit>
        <trans-unit id="1f2d828d5052d8a7df9d1b71c02c8ee6706c1716" translate="yes" xml:space="preserve">
          <source>Specifies automatic styling.</source>
          <target state="translated">자동 스타일을 지정합니다.</target>
        </trans-unit>
        <trans-unit id="925486f914ee11e233011df33c896811ae05e9a4" translate="yes" xml:space="preserve">
          <source>Specifies if the component should have a selector or not.</source>
          <target state="translated">구성 요소에 선택기가 있어야하는지 여부를 지정합니다.</target>
        </trans-unit>
        <trans-unit id="2b4d15d3b0fa85381e492f8e06134b83d9633ed1" translate="yes" xml:space="preserve">
          <source>Specifies intentionally untracked files that &lt;a href=&quot;https://git-scm.com/&quot;&gt;Git&lt;/a&gt; should ignore.</source>
          <target state="translated">&lt;a href=&quot;https://git-scm.com/&quot;&gt;Git&lt;/a&gt; 이 무시해야 할 의도적으로 추적되지 않은 파일을 지정 합니다.</target>
        </trans-unit>
        <trans-unit id="1c4579f6d96179d8d72c82764857237e1344ee2a" translate="yes" xml:space="preserve">
          <source>Specifies that an injector should retrieve a dependency from any injector until reaching the host element of the current component. (Only used with Element Injector)</source>
          <target state="translated">인젝터가 현재 구성 요소의 호스트 요소에 도달 할 때까지 인젝터에서 종속성을 검색하도록 지정합니다. (요소 인젝터에만 사용)</target>
        </trans-unit>
        <trans-unit id="70628f74250e312617f8dd39119a36898f311c4f" translate="yes" xml:space="preserve">
          <source>Specifies the file that serves as the index page to satisfy navigation requests. Usually this is &lt;code&gt;/index.html&lt;/code&gt;.</source>
          <target state="translated">탐색 요청을 충족시키기 위해 색인 페이지 역할을하는 파일을 지정합니다. 일반적으로 이것은 &lt;code&gt;/index.html&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="c169d352e8435a1a1b43ccb67e78bb0b7f197345" translate="yes" xml:space="preserve">
          <source>Specifies the source language of the application.</source>
          <target state="translated">응용 프로그램의 소스 언어를 지정합니다.</target>
        </trans-unit>
        <trans-unit id="cb5267a9c8320157ef37cd6e0c2ee7a7697a32bb" translate="yes" xml:space="preserve">
          <source>Specifies the timing information for a transition. Optional values for &lt;code&gt;delay&lt;/code&gt; and &lt;code&gt;easing&lt;/code&gt;. Can contain &lt;code&gt;&lt;a href=&quot;../api/animations/style&quot;&gt;style&lt;/a&gt;()&lt;/code&gt; calls within.</source>
          <target state="translated">전환의 타이밍 정보를 지정합니다. &lt;code&gt;delay&lt;/code&gt; 및 &lt;code&gt;easing&lt;/code&gt; 대한 선택적 값 . 안에 &lt;code&gt;&lt;a href=&quot;../api/animations/style&quot;&gt;style&lt;/a&gt;()&lt;/code&gt; 호출을 포함 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="814f5ed3722cd882c0f058a454546be0a851ad7d" translate="yes" xml:space="preserve">
          <source>Specifies which interfaces to implement.</source>
          <target state="translated">구현할 인터페이스를 지정합니다.</target>
        </trans-unit>
        <trans-unit id="94b04a35d9f8198258d4e5b072123fc9fa3773c4" translate="yes" xml:space="preserve">
          <source>Specify the Angular compiler factory, a &lt;code&gt;&lt;a href=&quot;../api/core/platformref&quot;&gt;PlatformRef&lt;/a&gt;&lt;/code&gt;, and a default Angular testing module. Alternatives for non-browser platforms are available in the general form &lt;code&gt;@angular/platform-&amp;lt;platform_name&amp;gt;/testing/&amp;lt;platform_name&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">Angular 컴파일러 팩토리, &lt;code&gt;&lt;a href=&quot;../api/core/platformref&quot;&gt;PlatformRef&lt;/a&gt;&lt;/code&gt; 및 기본 Angular 테스트 모듈을 지정하십시오. 브라우저 이외의 플랫폼에 대한 대안은 일반 형식 &lt;code&gt;@angular/platform-&amp;lt;platform_name&amp;gt;/testing/&amp;lt;platform_name&amp;gt;&lt;/code&gt; 됩니다.</target>
        </trans-unit>
        <trans-unit id="45db01e54fd08808e99ccb82fd3a69995f8c5c9d" translate="yes" xml:space="preserve">
          <source>Specifying a factory for the Angular module</source>
          <target state="translated">각도 모듈의 팩토리 지정</target>
        </trans-unit>
        <trans-unit id="ac30704104b1ce04b760d62c7dbe8a11f568ece5" translate="yes" xml:space="preserve">
          <source>Specifying the response type is a declaration to TypeScript that it should expect your response to be of the given type. This is a build-time check and doesn't guarantee that the server will actually respond with an object of this type. It is up to the server to ensure that the type specified by the server API is returned.</source>
          <target state="translated">응답 유형을 지정하면 응답이 주어진 유형이 될 것으로 예상하는 TypeScript에 대한 선언입니다. 이것은 빌드 타임 검사이며 서버가 실제로이 유형의 객체로 응답한다고 보장하지 않습니다. 서버 API에 의해 지정된 유형이 리턴되는지 확인하는 것은 서버에 달려 있습니다.</target>
        </trans-unit>
        <trans-unit id="2d2cb022bc3d26bd1407c4aa787d5e46e1ad4c3b" translate="yes" xml:space="preserve">
          <source>Speed</source>
          <target state="translated">Speed</target>
        </trans-unit>
        <trans-unit id="9fce3fbfe49053a5128e436f7b26e30fb85d8bbb" translate="yes" xml:space="preserve">
          <source>Spread in literal array</source>
          <target state="translated">리터럴 배열로 확산</target>
        </trans-unit>
        <trans-unit id="e08660b7e6bd062c7b3c878071df21183ee9e7e3" translate="yes" xml:space="preserve">
          <source>Sprinkle some CSS classes for styling (you'll add the CSS styles shortly).</source>
          <target state="translated">스타일링을 위해 일부 CSS 클래스를 뿌린다 (CSS 스타일을 곧 추가 할 것이다).</target>
        </trans-unit>
        <trans-unit id="c4aff31a83bb2341093ada54047bcaf1e353b0b5" translate="yes" xml:space="preserve">
          <source>Spy</source>
          <target state="translated">Spy</target>
        </trans-unit>
        <trans-unit id="17f316034349b8045f94526199f11b875c7892e2" translate="yes" xml:space="preserve">
          <source>SpyLocation</source>
          <target state="translated">SpyLocation</target>
        </trans-unit>
        <trans-unit id="926ee2fe71735cd2fb34b65100e0f2541ec8d6a8" translate="yes" xml:space="preserve">
          <source>SpyNgModuleFactoryLoader</source>
          <target state="translated">SpyNgModuleFactoryLoader</target>
        </trans-unit>
        <trans-unit id="ad594f8eb8b706a77d5b72fcb52f7c4176a2498f" translate="yes" xml:space="preserve">
          <source>Spying &lt;code&gt;OnInit&lt;/code&gt; and &lt;code&gt;OnDestroy&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;OnInit&lt;/code&gt; 및 &lt;code&gt;OnDestroy&lt;/code&gt; 감시</target>
        </trans-unit>
        <trans-unit id="01a86ab8d916a588cd67adfcc533b8392050f4aa" translate="yes" xml:space="preserve">
          <source>Stable Release</source>
          <target state="translated">안정적인 출시</target>
        </trans-unit>
        <trans-unit id="c54e8d606d901ea1d2b7420bc669f85bda9ba570" translate="yes" xml:space="preserve">
          <source>StackBlitz creates a starter Angular app with a top bar&amp;mdash;containing the store name and checkout icon&amp;mdash;and the title for a product list.</source>
          <target state="translated">StackBlitz는 상점 이름 및 체크 아웃 아이콘이 포함 된 상단 표시 줄과 제품 목록의 제목이있는 스타터 Angular 앱을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="75c3592ee5216b4760722432c72530052e7228ee" translate="yes" xml:space="preserve">
          <source>StackBlitz is continually improving, so there may be slight differences in generated code, but the app's behavior will be the same.</source>
          <target state="translated">StackBlitz는 지속적으로 개선되므로 생성 된 코드에 약간의 차이가있을 수 있지만 앱의 동작은 동일합니다.</target>
        </trans-unit>
        <trans-unit id="9f3d51394bf6c911f7cc1bdd2d89cdbffa0e1a62" translate="yes" xml:space="preserve">
          <source>StackBlitz projects are public by default, allowing you to share your Angular app via the project URL. Keep in mind that this is a great way to share ideas and prototypes, but it is not intended for production hosting.</source>
          <target state="translated">StackBlitz 프로젝트는 기본적으로 공개되어 있으므로 프로젝트 URL을 통해 Angular 앱을 공유 할 수 있습니다. 아이디어와 프로토 타입을 공유 할 수있는 좋은 방법이지만 프로덕션 호스팅을위한 것은 아닙니다.</target>
        </trans-unit>
        <trans-unit id="dc38ad881be5858e30b64c3c2517a2a445c83d47" translate="yes" xml:space="preserve">
          <source>StackBlitz tip: Any time the preview refreshes, the cart is cleared. If you make changes to the app, the page refreshes, and you'll need to buy products again to populate the cart.</source>
          <target state="translated">StackBlitz 팁 : 미리보기를 새로 고칠 때마다 카트가 지워집니다. 앱을 변경하면 페이지가 새로 고쳐지고 장바구니를 채우려면 제품을 다시 구매해야합니다.</target>
        </trans-unit>
        <trans-unit id="3bdc77830eb317ca046038051340028ce397d5b1" translate="yes" xml:space="preserve">
          <source>StackBlitz tips</source>
          <target state="translated">StackBlitz 팁</target>
        </trans-unit>
        <trans-unit id="2839c407622223dee69071a7cb7a3304fbcac575" translate="yes" xml:space="preserve">
          <source>Staggers the starting time for animations for multiple elements.</source>
          <target state="translated">여러 요소의 애니메이션 시작 시간을 비틀어 놓습니다.</target>
        </trans-unit>
        <trans-unit id="10306aeb9ffa26e1ac21d26c6556b58df4d0c0a1" translate="yes" xml:space="preserve">
          <source>Standard markdown processors don't allow you to put markdown &lt;em&gt;within&lt;/em&gt; HTML tags. But the Angular documentation markdown processor &lt;strong&gt;supports markdown within HTML&lt;/strong&gt;, as long as you follow one rule:</source>
          <target state="translated">표준 마크 다운 프로세서에서는 HTML 태그 &lt;em&gt;내에&lt;/em&gt; 마크 다운을 넣을 수 없습니다 . 그러나 Angular documentation markdown processor &lt;strong&gt;는&lt;/strong&gt; 하나의 규칙을 따르는 한 &lt;strong&gt;HTML 내에서&lt;/strong&gt; markdown을 &lt;strong&gt;지원합니다&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="effd4c04f415988a30d340e6b2349d536c76c08c" translate="yes" xml:space="preserve">
          <source>Start Protractor's Element Explorer for debugging.</source>
          <target state="translated">디버깅을 위해 각도기의 요소 탐색기를 시작하십시오.</target>
        </trans-unit>
        <trans-unit id="71b5afd2ee1799bf22dd9a125e16126cf1502a02" translate="yes" xml:space="preserve">
          <source>Start by adding a &lt;code&gt;searchHeroes()&lt;/code&gt; method to the &lt;code&gt;HeroService&lt;/code&gt;.</source>
          <target state="translated">추가하는 것으로 써 시작 &lt;code&gt;searchHeroes()&lt;/code&gt; 받는 방법을 &lt;code&gt;HeroService&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9055f4745fc865882af1cd7ec2d306b457f907a1" translate="yes" xml:space="preserve">
          <source>Start by creating an &lt;a href=&quot;../api/common/http/httpinterceptor&quot;&gt;HttpInterceptor&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../api/common/http/httpinterceptor&quot;&gt;HttpInterceptor&lt;/a&gt; 를 작성하여 시작하십시오 .</target>
        </trans-unit>
        <trans-unit id="d1925f507e24371ecd98f89acdb423a02aae9e34" translate="yes" xml:space="preserve">
          <source>Start by creating an &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; called &lt;code&gt;AppModule&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;AppModule&lt;/code&gt; 이라는 &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 을 작성하여 시작하십시오 .</target>
        </trans-unit>
        <trans-unit id="6637113a3228737f2c681bb3420d290f5b963e05" translate="yes" xml:space="preserve">
          <source>Start by installing the &lt;code&gt;jasmine-marbles&lt;/code&gt; npm package. Then import the symbols you need.</source>
          <target state="translated">&lt;code&gt;jasmine-marbles&lt;/code&gt; npm 패키지 를 설치하여 시작하십시오 . 그런 다음 필요한 기호를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="a8b0ce20d4e8ff37c74c89fa788e16baef48db23" translate="yes" xml:space="preserve">
          <source>Start by reviewing this simplified version of the &lt;em&gt;heroes&lt;/em&gt; feature from the &lt;a href=&quot;../tutorial/index&quot;&gt;The Tour of Heroes&lt;/a&gt;. This simple version doesn't use DI; we'll walk through converting it to do so.</source>
          <target state="translated">&lt;a href=&quot;../tutorial/index&quot;&gt;The Tour of Heroes&lt;/a&gt; 에서이 단순화 된 &lt;em&gt;영웅&lt;/em&gt; 기능 버전을 검토하여 시작하십시오 . 이 간단한 버전은 DI를 사용하지 않습니다. 이를 변환하기 위해 살펴 보겠습니다.</target>
        </trans-unit>
        <trans-unit id="5a1a87886971a124aeae2d6c54174da5e34c0c86" translate="yes" xml:space="preserve">
          <source>Start immediately, run for 200ms. Use an acceleration curve to start slow and end at full velocity: &lt;code&gt;'0.2s ease-in'&lt;/code&gt;</source>
          <target state="translated">즉시 시작하고 200ms 동안 실행하십시오. 가속 곡선을 사용하여 느리게 시작하고 최고 속도로 끝냅니다 : &lt;code&gt;'0.2s ease-in'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ce250aa26d33d7c5c114a7c6c755abad38181cf7" translate="yes" xml:space="preserve">
          <source>Start with &lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt; belonging to &lt;code&gt;&amp;lt;app-root&amp;gt;&lt;/code&gt; and end with &lt;code&gt;&amp;lt;app-root&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">로 시작하는 &lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt; 에 속하는 &lt;code&gt;&amp;lt;app-root&amp;gt;&lt;/code&gt; 와 끝 &lt;code&gt;&amp;lt;app-root&amp;gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3d59ad7f5c13a049bdc4c7c7f8907c7aa1f3bc02" translate="yes" xml:space="preserve">
          <source>Start with the production build:</source>
          <target state="translated">프로덕션 빌드로 시작하십시오.</target>
        </trans-unit>
        <trans-unit id="d1fb982ed171075bc061a33df44eef72f2d297ee" translate="yes" xml:space="preserve">
          <source>Starts a reusable animation that is created using the &lt;code&gt;&lt;a href=&quot;animation&quot;&gt;animation&lt;/a&gt;()&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;animation&quot;&gt;animation&lt;/a&gt;()&lt;/code&gt; 함수를 사용하여 만든 재사용 가능한 애니메이션을 시작합니다 .</target>
        </trans-unit>
        <trans-unit id="b05ed52a184ffa9eda578912108330e7d07be5d4" translate="yes" xml:space="preserve">
          <source>Starts a reusable animation that is created using the &lt;code&gt;&lt;a href=&quot;animations/animation&quot;&gt;animation&lt;/a&gt;()&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;animations/animation&quot;&gt;animation&lt;/a&gt;()&lt;/code&gt; 함수를 사용하여 만든 재사용 가능한 애니메이션을 시작합니다 .</target>
        </trans-unit>
        <trans-unit id="a72502067518684f9deeec70cf119fd26326cd33" translate="yes" xml:space="preserve">
          <source>State</source>
          <target state="translated">State</target>
        </trans-unit>
        <trans-unit id="6369528d29c83929c81fac4e7cf94669d79c139a" translate="yes" xml:space="preserve">
          <source>State-change functions</source>
          <target state="translated">상태 변경 기능</target>
        </trans-unit>
        <trans-unit id="8ff5a026360d2098037ad7db2df57536e397aac4" translate="yes" xml:space="preserve">
          <source>StateKey</source>
          <target state="translated">StateKey</target>
        </trans-unit>
        <trans-unit id="41c67fd6a75ac70825dab8295a0f3c1da04d6958" translate="yes" xml:space="preserve">
          <source>Statement context</source>
          <target state="translated">진술 문맥</target>
        </trans-unit>
        <trans-unit id="32da3f61c0c194f415c6c857f58dd76daedf1e04" translate="yes" xml:space="preserve">
          <source>Statement guidelines</source>
          <target state="translated">명세서 지침</target>
        </trans-unit>
        <trans-unit id="749a016bf10749d6bbdfc0717392432e9f0401f6" translate="yes" xml:space="preserve">
          <source>Static methods</source>
          <target state="translated">정적 메소드</target>
        </trans-unit>
        <trans-unit id="9fd2157337067beb4c27d4c77db4f118810de715" translate="yes" xml:space="preserve">
          <source>Static methods implemented by the &lt;code&gt;TestBedViewEngine&lt;/code&gt; and &lt;code&gt;TestBedRender3&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;TestBedViewEngine&lt;/code&gt; 및 &lt;code&gt;TestBedRender3&lt;/code&gt; 에 의해 구현 된 정적 메소드</target>
        </trans-unit>
        <trans-unit id="f693c8e57f56be518aade11355181f9181d63004" translate="yes" xml:space="preserve">
          <source>Static properties</source>
          <target state="translated">정적 속성</target>
        </trans-unit>
        <trans-unit id="4d1fa18513355c13c4b84cba89268f806425402e" translate="yes" xml:space="preserve">
          <source>StaticClassProvider</source>
          <target state="translated">StaticClassProvider</target>
        </trans-unit>
        <trans-unit id="419c921fa3db1c4990ca792260ce2f73c78c574d" translate="yes" xml:space="preserve">
          <source>StaticClassSansProvider</source>
          <target state="translated">StaticClassSansProvider</target>
        </trans-unit>
        <trans-unit id="f9ae247c7028a2e77634367f12d2edb442752ade" translate="yes" xml:space="preserve">
          <source>StaticProvider</source>
          <target state="translated">StaticProvider</target>
        </trans-unit>
        <trans-unit id="bae7d5be70820ed56467bd9a63744e23b47bd711" translate="yes" xml:space="preserve">
          <source>Status</source>
          <target state="translated">Status</target>
        </trans-unit>
        <trans-unit id="a70c7f004f51dd841c8bf72d79a2b332be6588fc" translate="yes" xml:space="preserve">
          <source>Step 1: Create a file called &lt;code&gt;.travis.yml&lt;/code&gt; at the project root, with the following content:</source>
          <target state="translated">1 단계 : 프로젝트 루트에 다음 내용으로 &lt;code&gt;.travis.yml&lt;/code&gt; 이라는 파일을 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="28218bb7cf960a24022b3fdfb128243da5874ea1" translate="yes" xml:space="preserve">
          <source>Step 1: Create a folder called &lt;code&gt;.circleci&lt;/code&gt; at the project root.</source>
          <target state="translated">1 단계 : 프로젝트 루트에 &lt;code&gt;.circleci&lt;/code&gt; 라는 폴더를 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="607bca37e5b2e80d7fe948b246b3b04ecfa2ae17" translate="yes" xml:space="preserve">
          <source>Step 1: Create a starter Angular app</source>
          <target state="translated">1 단계 : 초보자 용 Angular 앱 만들기</target>
        </trans-unit>
        <trans-unit id="13681cb262ad63d4559db4e51d2f4c77bcaa24be" translate="yes" xml:space="preserve">
          <source>Step 1: Creating a FormGroup instance</source>
          <target state="translated">1 단계 : FormGroup 인스턴스 작성</target>
        </trans-unit>
        <trans-unit id="6fdd00950f17cb0ed7de408cf20e796e85a488ab" translate="yes" xml:space="preserve">
          <source>Step 1: Creating a nested group</source>
          <target state="translated">1 단계 : 중첩 그룹 생성</target>
        </trans-unit>
        <trans-unit id="7a0bca33f0a6ae8c165fae2cc46a6e0486437bb5" translate="yes" xml:space="preserve">
          <source>Step 1: Enabling the animations module</source>
          <target state="translated">1 단계 : 애니메이션 모듈 활성화</target>
        </trans-unit>
        <trans-unit id="b1776a8b513151c65c791351046e9888d1c75f55" translate="yes" xml:space="preserve">
          <source>Step 1: Importing a validator function</source>
          <target state="translated">1 단계 : 유효성 검사기 함수 가져 오기</target>
        </trans-unit>
        <trans-unit id="280e917b7d2bc01916d99bab335193daaa951e5b" translate="yes" xml:space="preserve">
          <source>Step 1: Importing the FormArray class</source>
          <target state="translated">1 단계 : FormArray 클래스 가져 오기</target>
        </trans-unit>
        <trans-unit id="bf5a7e4c14cf243029e716ef4fbad27b7819cdc8" translate="yes" xml:space="preserve">
          <source>Step 1: Importing the FormBuilder class</source>
          <target state="translated">1 단계 : FormBuilder 클래스 가져 오기</target>
        </trans-unit>
        <trans-unit id="2aa14c5aa27be1102a9b8bc70464bc965f368f69" translate="yes" xml:space="preserve">
          <source>Step 1: Install the Angular CLI</source>
          <target state="translated">1 단계 : Angular CLI 설치</target>
        </trans-unit>
        <trans-unit id="e01f336fe0627c02c0bec9db097c78b1796632b1" translate="yes" xml:space="preserve">
          <source>Step 1: Prepare the application</source>
          <target state="translated">1 단계 : 응용 프로그램 준비</target>
        </trans-unit>
        <trans-unit id="f3712867d0750b16c35a60c9943f15cbb206f4c2" translate="yes" xml:space="preserve">
          <source>Step 1: Registering the reactive forms module</source>
          <target state="translated">1 단계 : 반응 양식 모듈 등록</target>
        </trans-unit>
        <trans-unit id="26f68e120685eff00e9e9b3c4ac9a460cd24573c" translate="yes" xml:space="preserve">
          <source>Step 2: Associating the FormGroup model and view</source>
          <target state="translated">2 단계 : FormGroup 모델 및보기 연관</target>
        </trans-unit>
        <trans-unit id="69846982085855e40a5e5389efe1ac7e0b7db5dc" translate="yes" xml:space="preserve">
          <source>Step 2: Commit your changes and push them to your repository.</source>
          <target state="translated">2 단계 : 변경 사항을 커밋하고 리포지토리로 푸시합니다.</target>
        </trans-unit>
        <trans-unit id="05867c5dba6d0ee12376ba9f91cb939b01d85f6d" translate="yes" xml:space="preserve">
          <source>Step 2: Create a workspace and initial application</source>
          <target state="translated">2 단계 : 작업 공간 및 초기 애플리케이션 작성</target>
        </trans-unit>
        <trans-unit id="1193eb17c80f8ca42ec7cac03cc199c653d6a6d8" translate="yes" xml:space="preserve">
          <source>Step 2: Create the Visual Studio ASP.NET project</source>
          <target state="translated">2 단계 : Visual Studio ASP.NET 프로젝트 만들기</target>
        </trans-unit>
        <trans-unit id="cb371239493b6f1db9dc27c1572e74d840acdaae" translate="yes" xml:space="preserve">
          <source>Step 2: Create the app shell</source>
          <target state="translated">2 단계 : 앱 셸 만들기</target>
        </trans-unit>
        <trans-unit id="9fa6645896c085d5f6025b9fa18f4e9d656aa4e6" translate="yes" xml:space="preserve">
          <source>Step 2: Defining a FormArray control</source>
          <target state="translated">2 단계 : FormArray 컨트롤 정의</target>
        </trans-unit>
        <trans-unit id="32569184480d39b17301ace10107e123dda23ab3" translate="yes" xml:space="preserve">
          <source>Step 2: Generating and importing a new form control</source>
          <target state="translated">2 단계 : 새 양식 컨트롤 생성 및 가져 오기</target>
        </trans-unit>
        <trans-unit id="9dd62b0172ed397c2fd2c17c30ab3f575d0170b3" translate="yes" xml:space="preserve">
          <source>Step 2: Grouping the nested form in the template</source>
          <target state="translated">2 단계 : 템플릿에서 중첩 양식 그룹화</target>
        </trans-unit>
        <trans-unit id="29c047c17af8a6b93bcb74992827a0ddce8c5ec9" translate="yes" xml:space="preserve">
          <source>Step 2: Importing animation functions into component files</source>
          <target state="translated">2 단계 : 구성 요소 파일로 애니메이션 함수 가져 오기</target>
        </trans-unit>
        <trans-unit id="751f70297e2b3dba20b8015eab9ec68afe2e4b35" translate="yes" xml:space="preserve">
          <source>Step 2: In the new folder, create a file called &lt;code&gt;config.yml&lt;/code&gt; with the following content:</source>
          <target state="translated">2 단계 : 새 폴더 에서 다음 내용으로 &lt;code&gt;config.yml&lt;/code&gt; 이라는 파일을 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="5899c120f8c2a07d534d98589d289c508970e13e" translate="yes" xml:space="preserve">
          <source>Step 2: Injecting the FormBuilder service</source>
          <target state="translated">2 단계 : FormBuilder 서비스 주입</target>
        </trans-unit>
        <trans-unit id="d731444ae922a421682d474d2d547450f28ce971" translate="yes" xml:space="preserve">
          <source>Step 2: Making a field required</source>
          <target state="translated">2 단계 : 필요한 필드 만들기</target>
        </trans-unit>
        <trans-unit id="4500a32a41554fc237ce07f1730a865651be1182" translate="yes" xml:space="preserve">
          <source>Step 3: &lt;a href=&quot;https://travis-ci.org/auth&quot;&gt;Sign up for Travis CI&lt;/a&gt; and &lt;a href=&quot;https://travis-ci.org/profile&quot;&gt;add your project&lt;/a&gt;. You'll need to push a new commit to trigger a build.</source>
          <target state="translated">3 단계 : &lt;a href=&quot;https://travis-ci.org/auth&quot;&gt;트래비스 CI 가입&lt;/a&gt; 및 &lt;a href=&quot;https://travis-ci.org/profile&quot;&gt;프로젝트를 추가합니다&lt;/a&gt; . 빌드를 시작하려면 새로운 커밋을 푸시해야합니다.</target>
        </trans-unit>
        <trans-unit id="9b8fbf088289d7f0285fec5ef9b410ebbb640fd4" translate="yes" xml:space="preserve">
          <source>Step 3: Accessing the FormArray control</source>
          <target state="translated">3 단계 : FormArray 컨트롤에 액세스</target>
        </trans-unit>
        <trans-unit id="c85eca67ded9bdcbcf6feec3674112f877a8cb9e" translate="yes" xml:space="preserve">
          <source>Step 3: Adding the animation metadata property</source>
          <target state="translated">3 단계 : 애니메이션 메타 데이터 속성 추가</target>
        </trans-unit>
        <trans-unit id="20d19721ef33709f163e149ee0ea8a5a03024a69" translate="yes" xml:space="preserve">
          <source>Step 3: Commit your changes and push them to your repository.</source>
          <target state="translated">3 단계 : 변경 사항을 커밋하고 리포지토리로 푸시합니다.</target>
        </trans-unit>
        <trans-unit id="48d4deda6a29de0da753e4aeef856b6305e8d550" translate="yes" xml:space="preserve">
          <source>Step 3: Copy the Angular project files into the ASP.NET project folder</source>
          <target state="translated">3 단계 : Angular 프로젝트 파일을 ASP.NET 프로젝트 폴더로 복사</target>
        </trans-unit>
        <trans-unit id="005849058dc80d62a7f2d8a7ab2ae9ab9b745d64" translate="yes" xml:space="preserve">
          <source>Step 3: Generating form controls</source>
          <target state="translated">3 단계 : 양식 컨트롤 생성</target>
        </trans-unit>
        <trans-unit id="017f470b7d7749895b56fc4419f11fbb6bf10f98" translate="yes" xml:space="preserve">
          <source>Step 3: Registering the control in the template</source>
          <target state="translated">3 단계 : 템플릿에 컨트롤 등록</target>
        </trans-unit>
        <trans-unit id="d70d1c45f5e3789dec8e23bd525c942db5b8fc7b" translate="yes" xml:space="preserve">
          <source>Step 3: Run the application</source>
          <target state="translated">3 단계 : 응용 프로그램 실행</target>
        </trans-unit>
        <trans-unit id="91ff2efe0d7b26ad2720b21c1dfcf98862e43810" translate="yes" xml:space="preserve">
          <source>Step 3: Verify the app is built with the shell content</source>
          <target state="translated">3 단계 : 앱이 셸 컨텐츠로 빌드되었는지 확인</target>
        </trans-unit>
        <trans-unit id="4b250d9e8fb17555e0e9336a36a06d98e847fa45" translate="yes" xml:space="preserve">
          <source>Step 4: &lt;a href=&quot;https://circleci.com/docs/2.0/first-steps/&quot;&gt;Sign up for Circle CI&lt;/a&gt; and &lt;a href=&quot;https://circleci.com/add-projects&quot;&gt;add your project&lt;/a&gt;. Your project should start building.</source>
          <target state="translated">4 단계 : &lt;a href=&quot;https://circleci.com/docs/2.0/first-steps/&quot;&gt;서클 CI 가입&lt;/a&gt; 및 &lt;a href=&quot;https://circleci.com/add-projects&quot;&gt;프로젝트를 추가합니다&lt;/a&gt; . 프로젝트가 시작됩니다.</target>
        </trans-unit>
        <trans-unit id="f76a02a29a9e5d7c472da0a39e2f0a3e742c7f77" translate="yes" xml:space="preserve">
          <source>Step 4: Displaying the form array in the template</source>
          <target state="translated">4 단계 : 템플릿에 양식 배열 표시</target>
        </trans-unit>
        <trans-unit id="184db950bcad4c5561140a2400f15e24a5c78842" translate="yes" xml:space="preserve">
          <source>Step 4: Restore the required packages</source>
          <target state="translated">4 단계 : 필요한 패키지 복원</target>
        </trans-unit>
        <trans-unit id="0ef1c21f79bdbe367b7d560790f576815ac4209d" translate="yes" xml:space="preserve">
          <source>Step 5: Build and run the app</source>
          <target state="translated">5 단계 : 앱 빌드 및 실행</target>
        </trans-unit>
        <trans-unit id="cff6e99a14676bb106644324be04b5717cc9e1cf" translate="yes" xml:space="preserve">
          <source>Steps defined by &lt;code&gt;&lt;a href=&quot;animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; calls apply the styling data over time as specified by the timing data.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; 호출로 정의 된 단계 는 타이밍 데이터에 지정된 시간에 따라 스타일 데이터를 적용합니다.</target>
        </trans-unit>
        <trans-unit id="c8ed69821ec203d6829dbcc9d9d6fec704a81de6" translate="yes" xml:space="preserve">
          <source>Steps defined by &lt;code&gt;&lt;a href=&quot;style&quot;&gt;style&lt;/a&gt;()&lt;/code&gt; calls apply the styling data immediately.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;style&quot;&gt;style&lt;/a&gt;()&lt;/code&gt; 호출로 정의 된 단계 는 스타일 데이터를 즉시 적용합니다.</target>
        </trans-unit>
        <trans-unit id="3a07d30bad8c94218ad0f704b43802b2da976357" translate="yes" xml:space="preserve">
          <source>Stick with the default unless you have a compelling reason to resort to hash routes.</source>
          <target state="translated">해시 경로를 사용해야하는 강력한 이유가없는 한 기본값을 유지하십시오.</target>
        </trans-unit>
        <trans-unit id="2598500f4189f4c7d4d04fd55e20d7832c56f7b1" translate="yes" xml:space="preserve">
          <source>Still in the &lt;code&gt;HeroService&lt;/code&gt;, inject &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; into the constructor in a private property called &lt;code&gt;&lt;a href=&quot;../api/common/http&quot;&gt;http&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">여전히 &lt;code&gt;HeroService&lt;/code&gt; 에서 &lt;code&gt;&lt;a href=&quot;../api/common/http&quot;&gt;http&lt;/a&gt;&lt;/code&gt; 라는 개인 속성의 생성자에 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; 를 삽입 하십시오 .</target>
        </trans-unit>
        <trans-unit id="86f183e2c301ae15282a1180211492bbcc7a6bac" translate="yes" xml:space="preserve">
          <source>Still, there might be cases where you want more control over when the ServiceWorker is registered (e.g. there might be a long-running timeout or polling interval, preventing the app to stabilize). The available option are:</source>
          <target state="translated">여전히 ServiceWorker가 등록 될 때 더 많은 제어를 원하는 경우가있을 수 있습니다 (예 : 시간 초과 또는 폴링 간격이 길어 앱이 안정화되지 않을 수 있음). 사용 가능한 옵션은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="b73dbe34e4ed8ad93ef32a3f7c640e997f88205c" translate="yes" xml:space="preserve">
          <source>Stopping and starting the service worker in the Service Worker pane triggers a check for updates.</source>
          <target state="translated">서비스 워커 (Service Worker) 창에서 서비스 워커를 중지하고 시작하면 업데이트 확인이 트리거됩니다.</target>
        </trans-unit>
        <trans-unit id="04eff34316cb47c772b1bddbf1fbb113d1857149" translate="yes" xml:space="preserve">
          <source>Store contextual information about a &lt;code&gt;&lt;a href=&quot;router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; 에 대한 상황 정보 저장</target>
        </trans-unit>
        <trans-unit id="77e71f586ded49562f9a0b742cf70a777d3efe78" translate="yes" xml:space="preserve">
          <source>Store contextual information about a &lt;code&gt;&lt;a href=&quot;routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; 에 대한 상황 정보 저장</target>
        </trans-unit>
        <trans-unit id="e48cfb3d3d03ba559addfbec1ad5e1a3182727e4" translate="yes" xml:space="preserve">
          <source>Store contextual information about the children (= nested) &lt;code&gt;&lt;a href=&quot;router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">하위 (= 중첩) &lt;code&gt;&lt;a href=&quot;router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; 에 대한 컨텍스트 정보 저장</target>
        </trans-unit>
        <trans-unit id="b1514487ea7bd392f7937b087b3478f147520b52" translate="yes" xml:space="preserve">
          <source>Store contextual information about the children (= nested) &lt;code&gt;&lt;a href=&quot;routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">하위 (= 중첩) &lt;code&gt;&lt;a href=&quot;routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; 에 대한 컨텍스트 정보 저장</target>
        </trans-unit>
        <trans-unit id="cfdd9b3462a479338e13a25805a7dc27b79d9eda" translate="yes" xml:space="preserve">
          <source>Store images in the &lt;code&gt;content/images&lt;/code&gt; directory in a folder with the same URL as the guide page. Images for this &quot;Authors Style Guide&quot; page belong in the &lt;code&gt;content/images/guide/docs-style-guide&lt;/code&gt; folder.</source>
          <target state="translated">가이드 페이지와 동일한 URL을 가진 폴더 의 &lt;code&gt;content/images&lt;/code&gt; 디렉토리에 이미지를 저장 하십시오. 이 &quot;Authors Style Guide&quot;페이지의 &lt;code&gt;content/images/guide/docs-style-guide&lt;/code&gt; 는 content / images / guide / docs-style-guide 폴더에 있습니다.</target>
        </trans-unit>
        <trans-unit id="9ad7aff1545b9d1f97374f1368ea7cf2c5640b72" translate="yes" xml:space="preserve">
          <source>Store the callback function</source>
          <target state="translated">콜백 함수 저장</target>
        </trans-unit>
        <trans-unit id="d09993861d6f0e8bb21791faac138e64e72017dd" translate="yes" xml:space="preserve">
          <source>Store the change function</source>
          <target state="translated">변경 기능 저장</target>
        </trans-unit>
        <trans-unit id="2917c752ee7cda1d6fe8f953f785c8563d7af0ab" translate="yes" xml:space="preserve">
          <source>Stores the HTML template to be selected on match.</source>
          <target state="translated">일치시킬 HTML 템플릿을 저장합니다.</target>
        </trans-unit>
        <trans-unit id="eee15be5321e455c5d3901a0e21c2d141f3a40fe" translate="yes" xml:space="preserve">
          <source>Stores the detached route.</source>
          <target state="translated">분리 된 경로를 저장합니다.</target>
        </trans-unit>
        <trans-unit id="4d3522cdb0ae0a90b17fbc4ff367b18c0f4cdc60" translate="yes" xml:space="preserve">
          <source>Storing a &lt;code&gt;null&lt;/code&gt; value should erase the previously stored value.</source>
          <target state="translated">하는 기억 &lt;code&gt;null&lt;/code&gt; 값은 이전에 저장된 값을 삭제합니다.</target>
        </trans-unit>
        <trans-unit id="0b616462c661d3e538d4d24f804c11817a37c5cb" translate="yes" xml:space="preserve">
          <source>Storing a conditional result in a variable</source>
          <target state="translated">조건부 결과를 변수에 저장</target>
        </trans-unit>
        <trans-unit id="9644d5734f03b7439ba40387bc3ec6021a0f2301" translate="yes" xml:space="preserve">
          <source>String Examples</source>
          <target state="translated">문자열 예</target>
        </trans-unit>
        <trans-unit id="7c9eda6cd62c61583722eabd843198abec4b7263" translate="yes" xml:space="preserve">
          <source>String of URL parameters.</source>
          <target state="translated">URL 매개 변수의 문자열</target>
        </trans-unit>
        <trans-unit id="ded6fb5d3578e6f25e85fa375454f30a56c30e74" translate="yes" xml:space="preserve">
          <source>String representing a URL.</source>
          <target state="translated">URL을 나타내는 문자열</target>
        </trans-unit>
        <trans-unit id="0f280dc35cba0f462991f583348033840f71c044" translate="yes" xml:space="preserve">
          <source>String widths available for date-time formats. The specific character widths are locale-specific. Examples are given for &lt;code&gt;en-US&lt;/code&gt;.</source>
          <target state="translated">날짜-시간 형식에 사용 가능한 문자열 너비. 특정 문자 너비는 로케일마다 다릅니다. &lt;code&gt;en-US&lt;/code&gt; 에 대한 예가 제공됩니다 .</target>
        </trans-unit>
        <trans-unit id="e6a8a3351cfd4833a09546bdefd4e5bfc730b525" translate="yes" xml:space="preserve">
          <source>String widths available for translations. The specific character widths are locale-specific. Examples are given for the word &quot;Sunday&quot; in English.</source>
          <target state="translated">번역에 사용 가능한 문자열 너비. 특정 문자 너비는 로케일마다 다릅니다. 영어로 &quot;Sunday&quot;라는 단어가 예로 들어 있습니다.</target>
        </trans-unit>
        <trans-unit id="3c396638f94f562746728eb2c2021c54bc0758da" translate="yes" xml:space="preserve">
          <source>String: Use the given string value instead of a code or a symbol. For example, an empty string will suppress the currency &amp;amp; symbol.</source>
          <target state="translated">문자열 : 코드 나 기호 대신 지정된 문자열 값을 사용하십시오. 예를 들어, 빈 문자열은 통화 및 기호를 억제합니다.</target>
        </trans-unit>
        <trans-unit id="fa4c723eb81b8491af1570970a5d321d9aba6709" translate="yes" xml:space="preserve">
          <source>Strip the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; back to just its &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt;, wrap the badge and name in an anchor element (&lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routerlinkwithhref&quot;&gt;a&lt;/a&gt;&amp;gt;&lt;/code&gt;), and add a &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;&lt;/code&gt; attribute to the anchor that is the same as in the dashboard template</source>
          <target state="translated">스트립 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 다시 바로 그 행 &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; , 앵커 요소에 배지 명 (랩 &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routerlinkwithhref&quot;&gt;a&lt;/a&gt;&amp;gt;&lt;/code&gt; ) 및 추가 &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;&lt;/code&gt; 의 대시 템플릿과 동일하다는 앵커 특성</target>
        </trans-unit>
        <trans-unit id="4ca86e4e4c4b88a4fd401574ce599d752ec15587" translate="yes" xml:space="preserve">
          <source>Structural Directives</source>
          <target state="translated">구조적 지시어</target>
        </trans-unit>
        <trans-unit id="44645931c6cf45d2d828f7b54fea901da303dcfa" translate="yes" xml:space="preserve">
          <source>Structural directives</source>
          <target state="translated">구조적 지시어</target>
        </trans-unit>
        <trans-unit id="8066b62e94107ae1169351af999664549945a21b" translate="yes" xml:space="preserve">
          <source>Structural directives are easy to recognize. An asterisk (*) precedes the directive attribute name as in this example.</source>
          <target state="translated">구조적 지시문은 쉽게 알아볼 수 있습니다. 이 예에서와 같이 지시문 속성 이름 앞에 별표 (*)가 있습니다.</target>
        </trans-unit>
        <trans-unit id="4ce0c591c6652f0c5882633624358c718ae028aa" translate="yes" xml:space="preserve">
          <source>Structural directives are responsible for HTML layout. They shape or reshape the DOM's &lt;em&gt;structure&lt;/em&gt;, typically by adding, removing, or manipulating elements.</source>
          <target state="translated">구조 지시문은 HTML 레이아웃을 담당합니다. 이들은 일반적으로 요소를 추가, 제거 또는 조작 하여 DOM의 &lt;em&gt;구조를&lt;/em&gt; 형성하거나 재구성합니다 .</target>
        </trans-unit>
        <trans-unit id="2f3e2ce91332d9933f8575349e3da3f714f37a09" translate="yes" xml:space="preserve">
          <source>Structural directives are responsible for HTML layout. They shape or reshape the DOM's structure, typically by adding, removing, and manipulating the host elements to which they are attached.</source>
          <target state="translated">구조 지시문은 HTML 레이아웃을 담당합니다. 이들은 일반적으로 연결된 호스트 요소를 추가, 제거 및 조작하여 DOM 구조를 형성하거나 재구성합니다.</target>
        </trans-unit>
        <trans-unit id="b01e264edb042adcbae3dc53ffa04a218c33e198" translate="yes" xml:space="preserve">
          <source>Structural directives&amp;mdash;change the DOM layout by adding and removing DOM elements.</source>
          <target state="translated">구조적 지시문 &amp;mdash;DOM 요소를 추가하고 제거하여 DOM 레이아웃을 변경합니다.</target>
        </trans-unit>
        <trans-unit id="14dde958744df7dbcb9c6e51cc208f4a18f03626" translate="yes" xml:space="preserve">
          <source>Structured</source>
          <target state="translated">Structured</target>
        </trans-unit>
        <trans-unit id="c64b6d8ab6a3167af6b211df05198e555a8951eb" translate="yes" xml:space="preserve">
          <source>Structures</source>
          <target state="translated">Structures</target>
        </trans-unit>
        <trans-unit id="c2ec7c3c78b23223f50b7bca6c140f83d82ecf3b" translate="yes" xml:space="preserve">
          <source>Stub method used to keep API compatible with AngularJS. This setting is configured through the LocationUpgradeModule's &lt;code&gt;&lt;a href=&quot;../../router/router#config&quot;&gt;config&lt;/a&gt;&lt;/code&gt; method in your Angular app.</source>
          <target state="translated">API를 AngularJS와 호환 가능하게 유지하는 데 사용되는 스텁 메소드. 이 설정은 Angular 앱에서 LocationUpgradeModule의 &lt;code&gt;&lt;a href=&quot;../../router/router#config&quot;&gt;config&lt;/a&gt;&lt;/code&gt; 방법을 통해 구성됩니다 .</target>
        </trans-unit>
        <trans-unit id="bcd07fedfd95e5214f741089e1d0a39e31c7b9e0" translate="yes" xml:space="preserve">
          <source>Stubbed &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; tests can confirm that a component with links and an outlet is setup properly, that the component has the links it should have, and that they are all pointing in the expected direction. These tests do not concern whether the app will succeed in navigating to the target component when the user clicks a link.</source>
          <target state="translated">Stubbed &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; 테스트를 통해 링크 및 콘센트가있는 구성 요소가 올바르게 설정되었는지, 구성 요소에 필요한 링크가 있으며 모두 예상 방향을 가리키는 지 확인할 수 있습니다. 이 테스트는 사용자가 링크를 클릭 할 때 앱이 대상 구성 요소를 탐색하는 데 성공하는지 여부에 관계가 없습니다.</target>
        </trans-unit>
        <trans-unit id="354563d6d28e8670ae6ca88c776b6b1e603ace84" translate="yes" xml:space="preserve">
          <source>Stubbing the RouterLink and RouterOutlet is the best option for such limited testing goals. Relying on the real router would make them brittle. They could fail for reasons unrelated to the component. For example, a navigation guard could prevent an unauthorized user from visiting the &lt;code&gt;HeroListComponent&lt;/code&gt;. That's not the fault of the &lt;code&gt;AppComponent&lt;/code&gt; and no change to that component could cure the failed test.</source>
          <target state="translated">이러한 제한된 테스트 목표를 위해서는 RouterLink 및 RouterOutlet 스터 빙이 가장 좋습니다. 실제 라우터에 의존하면 부서지기 쉽습니다. 구성 요소와 관련이없는 이유로 실패 할 수 있습니다. 예를 들어, 네비게이션 가드는 권한이없는 사용자가 &lt;code&gt;HeroListComponent&lt;/code&gt; 를 방문하지 못하게 할 수 있습니다. 이는 &lt;code&gt;AppComponent&lt;/code&gt; 의 결함이 아니며 해당 구성 요소를 변경하지 않으면 실패한 테스트를 치료할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bdbd617c17e607896ba72fd053141808cddc6b7f" translate="yes" xml:space="preserve">
          <source>Stubbing unneeded components</source>
          <target state="translated">불필요한 구성 요소 스터 빙</target>
        </trans-unit>
        <trans-unit id="a86acaeeac75377170e5ebeec6d810b33b428d4e" translate="yes" xml:space="preserve">
          <source>Studying the &lt;a href=&quot;https://github.com/angular/angular/blob/master/packages/common/src/directives/ng_if.ts&quot;&gt;source code for &lt;code&gt;NgIf&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://github.com/angular/angular/blob/master/packages/common/src/directives/ng_for_of.ts&quot;&gt;&lt;code&gt;NgForOf&lt;/code&gt;&lt;/a&gt; is a great way to learn more.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/angular/angular/blob/master/packages/common/src/directives/ng_if.ts&quot;&gt; &lt;code&gt;NgIf&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;https://github.com/angular/angular/blob/master/packages/common/src/directives/ng_for_of.ts&quot;&gt; &lt;code&gt;NgForOf&lt;/code&gt; &lt;/a&gt; 의 소스 코드를 연구하면 더 많은 것을 배울 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="99a0efc6cfd85d8ff2732a6718140f822cb90472" translate="yes" xml:space="preserve">
          <source>Style</source>
          <target state="translated">Style</target>
        </trans-unit>
        <trans-unit id="8655d27a8c958b7c48581306ee9683f025d0cd25" translate="yes" xml:space="preserve">
          <source>Style 01-01</source>
          <target state="translated">스타일 01-01</target>
        </trans-unit>
        <trans-unit id="4aea90a1ae5f7e9d4c6650d3266329a8cecc8b43" translate="yes" xml:space="preserve">
          <source>Style 01-02</source>
          <target state="translated">스타일 01-02</target>
        </trans-unit>
        <trans-unit id="f55a6e154fc6932171773407a6c17fdcd900b901" translate="yes" xml:space="preserve">
          <source>Style 02-01</source>
          <target state="translated">스타일 02-01</target>
        </trans-unit>
        <trans-unit id="6fddbd8edac99f78150e7c1d42725d5789785492" translate="yes" xml:space="preserve">
          <source>Style 02-02</source>
          <target state="translated">스타일 02-02</target>
        </trans-unit>
        <trans-unit id="e83e665367400b616d297ea377dbc6119ba6cbdb" translate="yes" xml:space="preserve">
          <source>Style 02-03</source>
          <target state="translated">스타일 02-03</target>
        </trans-unit>
        <trans-unit id="6144b91d5b883e749f4a6dadb98b308696451257" translate="yes" xml:space="preserve">
          <source>Style 02-04</source>
          <target state="translated">스타일 02-04</target>
        </trans-unit>
        <trans-unit id="706d717fa1cd34d44b82ec886fa969af7dd448eb" translate="yes" xml:space="preserve">
          <source>Style 02-05</source>
          <target state="translated">스타일 02-05</target>
        </trans-unit>
        <trans-unit id="e5e296afaae2339d2d10b1d0d70d5ea42a6e134e" translate="yes" xml:space="preserve">
          <source>Style 02-06</source>
          <target state="translated">스타일 02-06</target>
        </trans-unit>
        <trans-unit id="700efbe18a84b4498ff0a5ebd5c962481af97e6c" translate="yes" xml:space="preserve">
          <source>Style 02-07</source>
          <target state="translated">스타일 02-07</target>
        </trans-unit>
        <trans-unit id="fa617f1fef663a84190b425a3e364b28ce517f96" translate="yes" xml:space="preserve">
          <source>Style 02-08</source>
          <target state="translated">스타일 02-08</target>
        </trans-unit>
        <trans-unit id="493dae10b66d2babf905fe61eeb564d21b557225" translate="yes" xml:space="preserve">
          <source>Style 02-09</source>
          <target state="translated">스타일 02-09</target>
        </trans-unit>
        <trans-unit id="b929d7404011b3f0cfc152ad9382a9949a1cda71" translate="yes" xml:space="preserve">
          <source>Style 02-10</source>
          <target state="translated">스타일 02-10</target>
        </trans-unit>
        <trans-unit id="a3ef104ae9961a0a29543ccff47fb734c689f6bc" translate="yes" xml:space="preserve">
          <source>Style 02-11</source>
          <target state="translated">스타일 02-11</target>
        </trans-unit>
        <trans-unit id="cf0a59581276c0fb0ac17b920d8ab64e28df0f46" translate="yes" xml:space="preserve">
          <source>Style 02-12</source>
          <target state="translated">스타일 02-12</target>
        </trans-unit>
        <trans-unit id="0b80a1901d32e9db876171df5848b9de86c71304" translate="yes" xml:space="preserve">
          <source>Style 04-01</source>
          <target state="translated">스타일 04-01</target>
        </trans-unit>
        <trans-unit id="77218883e03332c65a62466d16ddcc85105e9150" translate="yes" xml:space="preserve">
          <source>Style 04-02</source>
          <target state="translated">스타일 04-02</target>
        </trans-unit>
        <trans-unit id="ce385b3d475a45592807dd22eefd3c6861e19cdf" translate="yes" xml:space="preserve">
          <source>Style 04-03</source>
          <target state="translated">스타일 04-03</target>
        </trans-unit>
        <trans-unit id="c6882556fc4e054c2e09668d6fe2262be15b2173" translate="yes" xml:space="preserve">
          <source>Style 04-04</source>
          <target state="translated">스타일 04-04</target>
        </trans-unit>
        <trans-unit id="f25601cdb2f6d47d54397476b43ec628290c8813" translate="yes" xml:space="preserve">
          <source>Style 04-05</source>
          <target state="translated">스타일 04-05</target>
        </trans-unit>
        <trans-unit id="cd207c5b27af4094bc7fcece72048e9fe4b0b2c3" translate="yes" xml:space="preserve">
          <source>Style 04-06</source>
          <target state="translated">스타일 04-06</target>
        </trans-unit>
        <trans-unit id="29b1fb989c6d105f3c801e3564c0418a230b7adb" translate="yes" xml:space="preserve">
          <source>Style 04-07</source>
          <target state="translated">스타일 04-07</target>
        </trans-unit>
        <trans-unit id="d63bbc77247f81425c9c05859638f65b164462ef" translate="yes" xml:space="preserve">
          <source>Style 04-08</source>
          <target state="translated">스타일 04-08</target>
        </trans-unit>
        <trans-unit id="dca1a11207bd921006f3ac8d762e893d2d645267" translate="yes" xml:space="preserve">
          <source>Style 04-09</source>
          <target state="translated">스타일 04-09</target>
        </trans-unit>
        <trans-unit id="6b7381fb1b2ee37a66fe9ef9dd56806aa709ad75" translate="yes" xml:space="preserve">
          <source>Style 04-10</source>
          <target state="translated">스타일 04-10</target>
        </trans-unit>
        <trans-unit id="8a233863a4b876d1c19bd360a9eec6d03c089985" translate="yes" xml:space="preserve">
          <source>Style 04-11</source>
          <target state="translated">스타일 04-11</target>
        </trans-unit>
        <trans-unit id="a060c3d3b207a8225c19405bbbce8cbf4f36a32c" translate="yes" xml:space="preserve">
          <source>Style 04-12</source>
          <target state="translated">스타일 04-12</target>
        </trans-unit>
        <trans-unit id="0c7621709de22e7cba3f9615798b8f5f3a64e76b" translate="yes" xml:space="preserve">
          <source>Style 05-02</source>
          <target state="translated">스타일 05-02</target>
        </trans-unit>
        <trans-unit id="738649793a0b0ae075f2abf3b085c00b61e2cdf7" translate="yes" xml:space="preserve">
          <source>Style 05-03</source>
          <target state="translated">스타일 05-03</target>
        </trans-unit>
        <trans-unit id="6cb17f91cfef9aa5b36b073b5e5ee75f36f7144c" translate="yes" xml:space="preserve">
          <source>Style 05-04</source>
          <target state="translated">스타일 05-04</target>
        </trans-unit>
        <trans-unit id="c5353267445517bfdb843d1f18e524b3c9f1d89e" translate="yes" xml:space="preserve">
          <source>Style 05-12</source>
          <target state="translated">스타일 05-12</target>
        </trans-unit>
        <trans-unit id="81e51acb9e3b52aaf70ff5492fe23a9bdb2a285a" translate="yes" xml:space="preserve">
          <source>Style 05-13</source>
          <target state="translated">스타일 05-13</target>
        </trans-unit>
        <trans-unit id="72bf5c89871cf10f99b40d49149e1bdaf9e6590c" translate="yes" xml:space="preserve">
          <source>Style 05-14</source>
          <target state="translated">스타일 05-14</target>
        </trans-unit>
        <trans-unit id="3ea64ee61c97d914db39262c73f88bff714ab595" translate="yes" xml:space="preserve">
          <source>Style 05-15</source>
          <target state="translated">스타일 05-15</target>
        </trans-unit>
        <trans-unit id="238870d3a3bd622e67bfb4ac9f6ba99e117997c3" translate="yes" xml:space="preserve">
          <source>Style 05-16</source>
          <target state="translated">스타일 05-16</target>
        </trans-unit>
        <trans-unit id="fa326bcb9a5dc57a51e1acfae6a4dea8cbd7f445" translate="yes" xml:space="preserve">
          <source>Style 05-17</source>
          <target state="translated">스타일 05-17</target>
        </trans-unit>
        <trans-unit id="4ab096f0a78a037c3de35e63e70d27ce12ee3e43" translate="yes" xml:space="preserve">
          <source>Style 06-01</source>
          <target state="translated">스타일 06-01</target>
        </trans-unit>
        <trans-unit id="5c9da24e465d26d22cc53eb4c417f9c22c4720f5" translate="yes" xml:space="preserve">
          <source>Style 06-03</source>
          <target state="translated">스타일 06-03</target>
        </trans-unit>
        <trans-unit id="0f0d6f618ebd672575ae4573cea04bd000b11309" translate="yes" xml:space="preserve">
          <source>Style 07-01</source>
          <target state="translated">스타일 07-01</target>
        </trans-unit>
        <trans-unit id="41700c9627c1716b093148da4f4ebbefad9e7201" translate="yes" xml:space="preserve">
          <source>Style 07-02</source>
          <target state="translated">스타일 07-02</target>
        </trans-unit>
        <trans-unit id="2816de62afb72075811187fe54cfff1f66291ca1" translate="yes" xml:space="preserve">
          <source>Style 07-03</source>
          <target state="translated">스타일 07-03</target>
        </trans-unit>
        <trans-unit id="7806af9da1ab012ff76791452da2609316bfa9af" translate="yes" xml:space="preserve">
          <source>Style 07-04</source>
          <target state="translated">스타일 07-04</target>
        </trans-unit>
        <trans-unit id="44b3e7183c08194ef947158714922a67e94ddb8f" translate="yes" xml:space="preserve">
          <source>Style 08-01</source>
          <target state="translated">스타일 08-01</target>
        </trans-unit>
        <trans-unit id="0ee5f0d1efe5d21182c59dc81789adf1c4a9e43b" translate="yes" xml:space="preserve">
          <source>Style 09-01</source>
          <target state="translated">스타일 09-01</target>
        </trans-unit>
        <trans-unit id="0810e6e1806946bed3058d5e8a4c6ea1abae7725" translate="yes" xml:space="preserve">
          <source>Style A-01</source>
          <target state="translated">스타일 A-01</target>
        </trans-unit>
        <trans-unit id="1efe377d1d77ee17e1305157c4de46739044c399" translate="yes" xml:space="preserve">
          <source>Style A-02</source>
          <target state="translated">스타일 A-02</target>
        </trans-unit>
        <trans-unit id="74b4f2ed89813f9a73f7270d61c097ff9c059dd6" translate="yes" xml:space="preserve">
          <source>Style Guide</source>
          <target state="translated">스타일 가이드</target>
        </trans-unit>
        <trans-unit id="8a24de837c2eb6cdf18450f40f67b38197599a83" translate="yes" xml:space="preserve">
          <source>Style Guide: Pipe Names</source>
          <target state="translated">스타일 안내서 : 파이프 이름</target>
        </trans-unit>
        <trans-unit id="9307b7282569a9e06cf9f4b80692549de59cb8e8" translate="yes" xml:space="preserve">
          <source>Style binding</source>
          <target state="translated">스타일 바인딩</target>
        </trans-unit>
        <trans-unit id="d17d4ed499d56ddab01a94243ac75d53250a9e49" translate="yes" xml:space="preserve">
          <source>Style binding syntax resembles property binding. Instead of an element property between brackets, start with the prefix &lt;code&gt;&lt;a href=&quot;../api/animations/style&quot;&gt;style&lt;/a&gt;&lt;/code&gt;, followed by a dot (&lt;code&gt;.&lt;/code&gt;) and the name of a CSS style property: &lt;code&gt;[style.style-property]&lt;/code&gt;.</source>
          <target state="translated">스타일 바인딩 구문은 속성 바인딩과 유사합니다. 대괄호 사이의 요소 속성 대신 접두사 &lt;code&gt;&lt;a href=&quot;../api/animations/style&quot;&gt;style&lt;/a&gt;&lt;/code&gt; 으로 시작하고 그 뒤에 점 ( &lt;code&gt;.&lt;/code&gt; )과 CSS 스타일 속성의 이름은 &lt;code&gt;[style.style-property]&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="798cb2eb99018bc816f3076a0a8bf26c5814e7f6" translate="yes" xml:space="preserve">
          <source>Style files in component metadata</source>
          <target state="translated">컴포넌트 메타 데이터의 스타일 파일</target>
        </trans-unit>
        <trans-unit id="13b3e042bcc6d7cd5e0d140224554ba252a41539" translate="yes" xml:space="preserve">
          <source>Style preprocessor options</source>
          <target state="translated">스타일 프리 프로세서 옵션</target>
        </trans-unit>
        <trans-unit id="1aa693154d6248496022ececdb1dada7746d639d" translate="yes" xml:space="preserve">
          <source>Style scope</source>
          <target state="translated">스타일 범위</target>
        </trans-unit>
        <trans-unit id="db43570498a47b502419948a69d84fb9e317cd4f" translate="yes" xml:space="preserve">
          <source>Style sheets</source>
          <target state="translated">스타일 시트</target>
        </trans-unit>
        <trans-unit id="17a92ec390194ca839debbe0378b1e9f90a4c3f5" translate="yes" xml:space="preserve">
          <source>Style sheets give your application a nice look. In AngularJS, you specify the style sheets for your entire application. As the application grows over time, the styles for the many parts of the application merge, which can cause unexpected results. In Angular, you can still define style sheets for your entire application. But now you can also encapsulate a style sheet within a specific component.</source>
          <target state="translated">스타일 시트는 응용 프로그램을 멋지게 보여줍니다. AngularJS에서는 전체 애플리케이션의 스타일 시트를 지정합니다. 시간이 지남에 따라 응용 프로그램이 커지면 응용 프로그램의 여러 부분에 대한 스타일이 병합되어 예기치 않은 결과가 발생할 수 있습니다. Angular에서는 전체 응용 프로그램의 스타일 시트를 계속 정의 할 수 있습니다. 그러나 이제 특정 구성 요소 내에 스타일 시트를 캡슐화 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="b7a277e6e718762252d1cac6bb0b6ea9b68bdf9c" translate="yes" xml:space="preserve">
          <source>Style strings added to the &lt;code&gt;@&lt;a href=&quot;../api/core/component#styles&quot;&gt;Component.styles&lt;/a&gt;&lt;/code&gt; array &lt;em&gt;must be written in CSS&lt;/em&gt; because the CLI cannot apply a preprocessor to inline styles.</source>
          <target state="translated">CLI에서 인라인 스타일에 프리 프로세서를 적용 할 수 없으므로 &lt;code&gt;@&lt;a href=&quot;../api/core/component#styles&quot;&gt;Component.styles&lt;/a&gt;&lt;/code&gt; 배열에 추가 된 스타일 문자열 &lt;em&gt;은 CSS로 작성해야합니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="e113e16bbf082f9490cbf2b44611438e1391e832" translate="yes" xml:space="preserve">
          <source>Style the heroes</source>
          <target state="translated">영웅 스타일</target>
        </trans-unit>
        <trans-unit id="5eab5630440ccf019fc5dc1802d69037b944404f" translate="yes" xml:space="preserve">
          <source>Style the selected hero</source>
          <target state="translated">선택한 영웅 스타일</target>
        </trans-unit>
        <trans-unit id="82a3d10493dce218efe0f7977bfae55ae3c0ccfb" translate="yes" xml:space="preserve">
          <source>Style vocabulary</source>
          <target state="translated">스타일 어휘</target>
        </trans-unit>
        <trans-unit id="47f613f4bbd7675d5feb1ce896b4d6efd80377bc" translate="yes" xml:space="preserve">
          <source>StyleUrls</source>
          <target state="translated">StyleUrls</target>
        </trans-unit>
        <trans-unit id="5c2529a7512b8456ecfa00f92d655877dd8b90b6" translate="yes" xml:space="preserve">
          <source>Styles and scripts configuration</source>
          <target state="translated">스타일 및 스크립트 구성</target>
        </trans-unit>
        <trans-unit id="0edc5b2d63da3d85ebd67bd3beba07075c522b86" translate="yes" xml:space="preserve">
          <source>Styles and stylesheets identified in &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; metadata are scoped to that specific component. The &lt;code&gt;heroes.component.css&lt;/code&gt; styles apply only to the &lt;code&gt;HeroesComponent&lt;/code&gt; and don't affect the outer HTML or the HTML in any other component.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; 메타 데이터 에서 식별 된 스타일 및 스타일 시트 는 해당 특정 컴포넌트로 범위가 지정됩니다. &lt;code&gt;heroes.component.css&lt;/code&gt; 의 스타일은에만 적용 &lt;code&gt;HeroesComponent&lt;/code&gt; 와 외부 HTML 또는 기타 구성 요소의 HTML에 영향을 미치지 않습니다.</target>
        </trans-unit>
        <trans-unit id="fd5b0bce26d4818e609d1581d3654fa0753fd8fd" translate="yes" xml:space="preserve">
          <source>Styles configuration</source>
          <target state="translated">스타일 구성</target>
        </trans-unit>
        <trans-unit id="1378d81e695cef4d64e37c64b8e8eff7fff2d2c2" translate="yes" xml:space="preserve">
          <source>Styles in component metadata</source>
          <target state="translated">컴포넌트 메타 데이터의 스타일</target>
        </trans-unit>
        <trans-unit id="23aae4ba9cb7cd71cc0f2c7b6470f5ac5c21722b" translate="yes" xml:space="preserve">
          <source>Styling the host and child components</source>
          <target state="translated">호스트 및 하위 구성 요소 스타일링</target>
        </trans-unit>
        <trans-unit id="6e1cd724f97ed48d626d171bc1b8f9491fcd67e0" translate="yes" xml:space="preserve">
          <source>Subclasses</source>
          <target state="translated">Subclasses</target>
        </trans-unit>
        <trans-unit id="9ce6ba148fe8d9ab4a1efa44f043d11727e7f6ee" translate="yes" xml:space="preserve">
          <source>Sublime Text</source>
          <target state="translated">숭고한 텍스트</target>
        </trans-unit>
        <trans-unit id="f5d46536917e62bd1be2d18f9d2c7d548fb75de6" translate="yes" xml:space="preserve">
          <source>Submit the form with &lt;code&gt;ngSubmit&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;ngSubmit&lt;/code&gt; 로 양식을 제출하십시오.</target>
        </trans-unit>
        <trans-unit id="f52f8c0e6a97223779d22bf66c8e2fada6102bec" translate="yes" xml:space="preserve">
          <source>Submitting the form isn't terribly dramatic at the moment.</source>
          <target state="translated">현재 양식을 제출하는 것은 그리 극적인 일이 아닙니다.</target>
        </trans-unit>
        <trans-unit id="d6981f74767d6c63d6062ad21b3bdfcd0d0d6602" translate="yes" xml:space="preserve">
          <source>Subscribe</source>
          <target state="translated">Subscribe</target>
        </trans-unit>
        <trans-unit id="ad97311e7c2fb91310858358719a941b418273d5" translate="yes" xml:space="preserve">
          <source>Subscribe and listen to &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Push_API/Best_Practices&quot;&gt;Web Push Notifications&lt;/a&gt; through Angular Service Worker.</source>
          <target state="translated">Angular Service Worker를 통해 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Push_API/Best_Practices&quot;&gt;웹 푸시 알림&lt;/a&gt; 을 구독하고 청취하십시오 .</target>
        </trans-unit>
        <trans-unit id="55ffbbfe98a9e67c323baa04596ff3f3634355e1" translate="yes" xml:space="preserve">
          <source>Subscribe in &lt;code&gt;HeroesComponent&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;HeroesComponent&lt;/code&gt; 에서 구독 하십시오</target>
        </trans-unit>
        <trans-unit id="4147506e4124de00f100ef91b8a3f1c59c78221c" translate="yes" xml:space="preserve">
          <source>Subscribe to update notifications from the Service Worker, trigger update checks, and forcibly activate updates.</source>
          <target state="translated">서비스 워커의 업데이트 알림을 구독하고 업데이트 확인을 트리거하며 업데이트를 강제로 활성화합니다.</target>
        </trans-unit>
        <trans-unit id="a87fcf31451c4a5845a5c94b268b44533e029a5f" translate="yes" xml:space="preserve">
          <source>Subscribes to Web Push Notifications, after requesting and receiving user permission.</source>
          <target state="translated">사용자 권한을 요청하고받은 후 웹 푸시 알림을 구독합니다.</target>
        </trans-unit>
        <trans-unit id="1e24453f7659eb1b1111775a54afd763fe517caf" translate="yes" xml:space="preserve">
          <source>Subscribes to a host element event (&lt;code&gt;click&lt;/code&gt;) with a directive/component method (&lt;code&gt;onClick&lt;/code&gt;), optionally passing an argument (&lt;code&gt;$event&lt;/code&gt;).</source>
          <target state="translated">지시문 / 구성 요소 메소드 ( &lt;code&gt;onClick&lt;/code&gt; ) 를 사용하여 호스트 요소 이벤트 ( &lt;code&gt;click&lt;/code&gt; )를 구독하고 선택적으로 인수 ( &lt;code&gt;$event&lt;/code&gt; )를 전달합니다 .</target>
        </trans-unit>
        <trans-unit id="d095583b0ad0de9ed206550de2ce051cda4763bd" translate="yes" xml:space="preserve">
          <source>Subscribes to the platform's &lt;code&gt;popState&lt;/code&gt; events.</source>
          <target state="translated">플랫폼의 &lt;code&gt;popState&lt;/code&gt; 이벤트를 구독 합니다.</target>
        </trans-unit>
        <trans-unit id="bc85e879262a5f99c43a2b322c9fb5b8fbe5a21d" translate="yes" xml:space="preserve">
          <source>Subscribing</source>
          <target state="translated">Subscribing</target>
        </trans-unit>
        <trans-unit id="8fde48f31aff21f9652066ed6732f7e7dbae712e" translate="yes" xml:space="preserve">
          <source>Subscription</source>
          <target state="translated">Subscription</target>
        </trans-unit>
        <trans-unit id="473fb3dae53fd356007426bcc001827eca1f4ff9" translate="yes" xml:space="preserve">
          <source>Subsequent apps that you generate in the workspace reside in the &lt;code&gt;projects/&lt;/code&gt; subfolder.</source>
          <target state="translated">작업 공간에서 생성 된 후속 앱은 &lt;code&gt;projects/&lt;/code&gt; 하위 폴더에 있습니다.</target>
        </trans-unit>
        <trans-unit id="bc7af4ebabce4f8a546ee140a3846cf69bfa6c68" translate="yes" xml:space="preserve">
          <source>Succeeds even if there was linting errors.</source>
          <target state="translated">보푸라기 오류가 있어도 성공합니다.</target>
        </trans-unit>
        <trans-unit id="c87c69d42dd464b89184cb9c765feccaddfed9cc" translate="yes" xml:space="preserve">
          <source>Such objects don't have application interfaces and therefore aren't well represented by a class. They're better represented by a token that is both unique and symbolic, a JavaScript object that has a friendly name but won't conflict with another token that happens to have the same name.</source>
          <target state="translated">이러한 객체에는 응용 프로그램 인터페이스가 없으므로 클래스로 잘 표현되지 않습니다. 고유하고 상징적 인 토큰, 친숙한 이름은 있지만 동일한 이름을 가진 다른 토큰과 충돌하지 않는 JavaScript 객체로 더 잘 표현됩니다.</target>
        </trans-unit>
        <trans-unit id="55c29209f134a45a30d7eba7a07fc67d5c7d8a6b" translate="yes" xml:space="preserve">
          <source>Such partial and intermediate files need their own names. Follow the doc sample naming convention. Add a number before the file extension as illustrated here:</source>
          <target state="translated">이러한 부분 및 중간 파일에는 자체 이름이 필요합니다. 문서 샘플 명명 규칙을 따릅니다. 여기에 설명 된대로 파일 확장자 앞에 숫자를 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="26a490bcaf4c8b593e38570b5b856dec6204c072" translate="yes" xml:space="preserve">
          <source>Such tests are easy to find.</source>
          <target state="translated">이러한 테스트는 찾기 쉽습니다.</target>
        </trans-unit>
        <trans-unit id="06aee9edd367cbab035bb100ff86698218a24a6c" translate="yes" xml:space="preserve">
          <source>Such tests require creating the component's host element in the browser DOM, as Angular does, and investigating the component class's interaction with the DOM as described by its template.</source>
          <target state="translated">이러한 테스트에는 Angular와 마찬가지로 브라우저 DOM에서 컴포넌트의 호스트 요소를 작성하고 템플리트에 설명 된대로 컴포넌트 클래스와 DOM과의 상호 작용을 조사해야합니다.</target>
        </trans-unit>
        <trans-unit id="5057182ef8774088bdb5234ca8a8f6c39dfa86d5" translate="yes" xml:space="preserve">
          <source>Suffix to add when computing the name of the factory module for a given module name.</source>
          <target state="translated">주어진 모듈 이름에 대한 팩토리 모듈 이름을 계산할 때 추가 할 접미사.</target>
        </trans-unit>
        <trans-unit id="c694c6baead0b9fec8b7d19e3c3b3e94e68c5559" translate="yes" xml:space="preserve">
          <source>Suggested polyfills</source>
          <target state="translated">제안 된 폴리 필</target>
        </trans-unit>
        <trans-unit id="12b71c3e0fe5f7c0b8d17cc03186e281412da4a8" translate="yes" xml:space="preserve">
          <source>Summary</source>
          <target state="translated">Summary</target>
        </trans-unit>
        <trans-unit id="36a34ea7dcfc6ffbb22285c0e1b244755a431fe7" translate="yes" xml:space="preserve">
          <source>Super-constructor for all responses.</source>
          <target state="translated">모든 응답에 대한 수퍼 스트럭처.</target>
        </trans-unit>
        <trans-unit id="4d9b4eacf1004ed910ee4ed98ce82a901369c93e" translate="yes" xml:space="preserve">
          <source>Supplies a testing module for the Angular &lt;code&gt;&lt;a href=&quot;router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; subsystem.</source>
          <target state="translated">Angular &lt;code&gt;&lt;a href=&quot;router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; 서브 시스템에 대한 테스트 모듈을 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="d841e33650f585cec77c125afc74e973ec895855" translate="yes" xml:space="preserve">
          <source>Supplies a testing module for the Angular &lt;code&gt;&lt;a href=&quot;router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; subsystem.</source>
          <target state="translated">Angular &lt;code&gt;&lt;a href=&quot;router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; 서브 시스템에 대한 테스트 모듈을 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="ed92fa9e8a12ebddb7e4fe08847d953cf04e775b" translate="yes" xml:space="preserve">
          <source>Supply a custom provider with &lt;code&gt;@&lt;a href=&quot;../api/core/inject&quot;&gt;Inject&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/inject&quot;&gt;Inject&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;../api/core/inject&quot;&gt;Inject를 사용&lt;/a&gt; 하여 사용자 지정 공급자 제공</target>
        </trans-unit>
        <trans-unit id="fb6bfb683b08f86999ae88758ea765b871ea0886" translate="yes" xml:space="preserve">
          <source>Support for both &lt;a href=&quot;forms&quot;&gt;template-driven&lt;/a&gt; and &lt;a href=&quot;reactive-forms&quot;&gt;reactive forms&lt;/a&gt;. For information about choosing the best forms approach for your app, see &lt;a href=&quot;forms-overview&quot;&gt;Introduction to forms&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;forms&quot;&gt;템플릿 기반 &lt;/a&gt;&lt;a href=&quot;reactive-forms&quot;&gt;양식&lt;/a&gt; 과 반응 형 양식 을 모두 지원 합니다 . 앱에 가장 적합한 양식 접근 방식을 선택하는 방법에 대한 자세한 내용은 양식 &lt;a href=&quot;forms-overview&quot;&gt;소개를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="6015aea6d6a423f3219184739c58237f25d45fcf" translate="yes" xml:space="preserve">
          <source>Support for the development cycle</source>
          <target state="translated">개발주기 지원</target>
        </trans-unit>
        <trans-unit id="372ca4c2c8a38a4b2b242eed719cb1a8e9d99f89" translate="yes" xml:space="preserve">
          <source>Support for the various Angular run-time platforms is provided by the &lt;code&gt;@angular/platform-*&lt;/code&gt; packages. These packages allow applications that make use of &lt;code&gt;@angular/core&lt;/code&gt; and &lt;code&gt;@angular/common&lt;/code&gt; to execute in different environments by providing implementation for gathering user input and rendering UIs for the given platform. Isolating platform-specific functionality allows the developer to make platform-independent use of the rest of the framework.</source>
          <target state="translated">&lt;code&gt;@angular/platform-*&lt;/code&gt; 패키지 는 다양한 Angular 런타임 플랫폼을 지원 합니다. 이 패키지는 &lt;code&gt;@angular/core&lt;/code&gt; 및 &lt;code&gt;@angular/common&lt;/code&gt; 을 사용하는 응용 프로그램이 주어진 플랫폼에 대한 사용자 입력을 수집하고 UI를 렌더링하기위한 구현을 제공함으로써 다른 환경에서 실행되도록합니다. 플랫폼 별 기능을 분리하면 개발자가 나머지 프레임 워크를 플랫폼 독립적으로 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c0412188bcfb5b8097ddeac6298bca4025080b18" translate="yes" xml:space="preserve">
          <source>Support for using &lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;ngForm&lt;/a&gt;&lt;/code&gt; element selector was deprecated in v6. It has been deprecated to be consistent with other core Angular selectors, which are typically written in kebab-case.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;ngForm&lt;/a&gt;&lt;/code&gt; 요소 선택기 사용에 대한 지원은 v6에서 더 이상 사용되지 않습니다. 일반적으로 케밥 케이스로 작성된 다른 핵심 각도 선택기와 일치하도록 사용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="830687a29f3f8ae36893b51a852df8d7e3509f45" translate="yes" xml:space="preserve">
          <source>Support for using &lt;code&gt;&lt;a href=&quot;ngform&quot;&gt;ngForm&lt;/a&gt;&lt;/code&gt; element selector has been deprecated in Angular v6 and will be removed in Angular v9.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ngform&quot;&gt;ngForm&lt;/a&gt;&lt;/code&gt; 요소 선택기 사용에 대한 지원은 Angular v6에서 더 이상 사용되지 않으며 Angular v9에서 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="a564022cdf9de9547b8c4914ac55334ba4f6035c" translate="yes" xml:space="preserve">
          <source>Support for using the &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; input property and &lt;code&gt;ngModelChange&lt;/code&gt; event with reactive form directives was deprecated in version 6.</source>
          <target state="translated">사용에 대한 지원 &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; 의 입력 속성과 &lt;code&gt;ngModelChange&lt;/code&gt; 의 반응 양식의 지침을 이벤트는 버전 6을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="c0ab9213c409bdce1f6766b7561afbb3df924eb0" translate="yes" xml:space="preserve">
          <source>Support for using the &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; input property and &lt;code&gt;ngModelChange&lt;/code&gt; event with reactive form directives has been deprecated in Angular v6 and will be removed in Angular v7.</source>
          <target state="translated">사용에 대한 지원 &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; 의 입력 속성과 &lt;code&gt;ngModelChange&lt;/code&gt; 의 반응 양식의 지침에 이벤트 코너 V6에서 사용되지 않으며 각도 V7에서 제거 될 예정입니다.</target>
        </trans-unit>
        <trans-unit id="34ea22dd63bbc9c4be88fea09a83dfacdd1533b4" translate="yes" xml:space="preserve">
          <source>Support more macroTasks</source>
          <target state="translated">더 많은 매크로 작업 지원</target>
        </trans-unit>
        <trans-unit id="a09e60728ec31e51301e3117166fddf94a8baea0" translate="yes" xml:space="preserve">
          <source>Support multiple validators by passing the functions in as an array.</source>
          <target state="translated">함수를 배열로 전달하여 여러 유효성 검사기를 지원하십시오.</target>
        </trans-unit>
        <trans-unit id="42d644d79b7c3f0b258e0ff900434475b7495f55" translate="yes" xml:space="preserve">
          <source>Support packages</source>
          <target state="translated">지원 패키지</target>
        </trans-unit>
        <trans-unit id="55b111d8249f52e207f12ff5fe56fb3473ed81b2" translate="yes" xml:space="preserve">
          <source>Support policy and schedule</source>
          <target state="translated">지원 정책 및 일정</target>
        </trans-unit>
        <trans-unit id="48012bbbd369e7cf9dbf01a37cf616f579aef634" translate="yes" xml:space="preserve">
          <source>Supported Features</source>
          <target state="translated">지원되는 기능</target>
        </trans-unit>
        <trans-unit id="9c185d3e1b7aa6c33b8cde226ee45b7e6534974e" translate="yes" xml:space="preserve">
          <source>Supported binary operator</source>
          <target state="translated">지원되는 이진 연산자</target>
        </trans-unit>
        <trans-unit id="6dc1054caa7ede6eabeaab20afa9b88a18116373" translate="yes" xml:space="preserve">
          <source>Supported classes and functions</source>
          <target state="translated">지원되는 클래스 및 함수</target>
        </trans-unit>
        <trans-unit id="452c87fb69e1c927c2dffbf878f867c26c6a461b" translate="yes" xml:space="preserve">
          <source>Supported decorators</source>
          <target state="translated">지원되는 데코레이터</target>
        </trans-unit>
        <trans-unit id="a9637b3c337e189d588ceb71a8c3e0c61c7b3d62" translate="yes" xml:space="preserve">
          <source>Supported natively as of version 63. In older versions: Set the &lt;code&gt;dom.webcomponents.enabled&lt;/code&gt; and &lt;code&gt;dom.webcomponents.customelements.enabled&lt;/code&gt; preferences to true.</source>
          <target state="translated">버전 63부터 기본적으로 지원됩니다. 이전 버전 : &lt;code&gt;dom.webcomponents.enabled&lt;/code&gt; 및 &lt;code&gt;dom.webcomponents.customelements.enabled&lt;/code&gt; 환경 설정을 true로 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="149e59e854d1a930b197517343595cab9c83d3d5" translate="yes" xml:space="preserve">
          <source>Supported natively.</source>
          <target state="translated">기본적으로 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="bb6cc835f2a9162101b9f580bc00f613a031b252" translate="yes" xml:space="preserve">
          <source>Supported prefix operator</source>
          <target state="translated">지원되는 접두사 연산자</target>
        </trans-unit>
        <trans-unit id="6a66aec706ed285ace0836213a36cd2b9a69b52d" translate="yes" xml:space="preserve">
          <source>Supported update paths</source>
          <target state="translated">지원되는 업데이트 경로</target>
        </trans-unit>
        <trans-unit id="7092a8531c4f0a36c977743d2fb6d4828df0fc89" translate="yes" xml:space="preserve">
          <source>Supported versions</source>
          <target state="translated">지원되는 버전</target>
        </trans-unit>
        <trans-unit id="68abb1b6a421b6a057714c502175fb1e4d0785a4" translate="yes" xml:space="preserve">
          <source>Supports delivery of Angular apps on a server, for use with &lt;a href=&quot;../guide/glossary#server-side-rendering&quot;&gt;server-side rendering&lt;/a&gt; (SSR).</source>
          <target state="translated">&lt;a href=&quot;../guide/glossary#server-side-rendering&quot;&gt;서버 측 렌더링&lt;/a&gt; (SSR) 과 함께 사용하기 위해 서버에서 Angular 앱 제공을 지원합니다 .</target>
        </trans-unit>
        <trans-unit id="fb1ffb2f1d5a195313b3cdd770d1f6b7bf9c7009" translate="yes" xml:space="preserve">
          <source>Supports execution of Angular apps on different supported browsers.</source>
          <target state="translated">지원되는 다른 브라우저에서 Angular 앱의 실행을 지원합니다.</target>
        </trans-unit>
        <trans-unit id="72657c85f5b110b8ad4f655973c381d6d88dd9c3" translate="yes" xml:space="preserve">
          <source>Supports static, parameterized, redirect, and wildcard routes, as well as custom route data and resolve methods.</source>
          <target state="translated">정적, 매개 변수화, 경로 재 지정 및 와일드 카드 경로는 물론 사용자 정의 경로 데이터 및 분석 방법을 지원합니다.</target>
        </trans-unit>
        <trans-unit id="7011c39e6768e7218d6f19fe24834274bd8e3880" translate="yes" xml:space="preserve">
          <source>Supports the upgrade path from AngularJS to Angular, allowing components from both systems to be used in the same application.</source>
          <target state="translated">AngularJS에서 Angular 로의 업그레이드 경로를 지원하여 두 시스템의 구성 요소를 동일한 응용 프로그램에서 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ffa38c192edac80816d007088a189ee1553fd813" translate="yes" xml:space="preserve">
          <source>Suppose a module requires a customized &lt;code&gt;&lt;a href=&quot;../api/common/http/httpbackend&quot;&gt;HttpBackend&lt;/a&gt;&lt;/code&gt; that adds a special header for all Http requests. If another module elsewhere in the application also customizes &lt;code&gt;&lt;a href=&quot;../api/common/http/httpbackend&quot;&gt;HttpBackend&lt;/a&gt;&lt;/code&gt; or merely imports the &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt;, it could override this module's &lt;code&gt;&lt;a href=&quot;../api/common/http/httpbackend&quot;&gt;HttpBackend&lt;/a&gt;&lt;/code&gt; provider, losing the special header. The server will reject http requests from this module.</source>
          <target state="translated">모듈 에 모든 Http 요청에 대한 특수 헤더를 추가 하는 사용자 정의 된 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpbackend&quot;&gt;HttpBackend&lt;/a&gt;&lt;/code&gt; 가 필요하다고 가정하십시오 . 응용 프로그램의 다른 모듈에서 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpbackend&quot;&gt;HttpBackend&lt;/a&gt;&lt;/code&gt; 를 사용자 정의 하거나 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; 을 가져 오는 경우이 모듈의 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpbackend&quot;&gt;HttpBackend&lt;/a&gt;&lt;/code&gt; 공급자를 재정 의하여 특수 헤더를 잃을 수 있습니다 . 서버는이 모듈의 http 요청을 거부합니다.</target>
        </trans-unit>
        <trans-unit id="02d18e71b14a468fe5b6fe81d6582fa4ff952551" translate="yes" xml:space="preserve">
          <source>Suppose a parent component navigation bar had &quot;forward&quot; and &quot;back&quot; buttons that scrolled through the list of heroes. Each click navigated imperatively to the &lt;code&gt;HeroDetailComponent&lt;/code&gt; with the next or previous &lt;code&gt;id&lt;/code&gt;.</source>
          <target state="translated">부모 구성 요소 탐색 모음에 영웅 목록을 스크롤하는 &quot;앞으로&quot;및 &quot;뒤로&quot;단추가 있다고 가정합니다. 클릭 할 때마다 다음 또는 이전 &lt;code&gt;id&lt;/code&gt; 로 &lt;code&gt;HeroDetailComponent&lt;/code&gt; 로 이동했습니다 .</target>
        </trans-unit>
        <trans-unit id="73875b081ad6712e3cca37634ad81e0aabf43018" translate="yes" xml:space="preserve">
          <source>Suppose an old component depends upon the &lt;code&gt;OldLogger&lt;/code&gt; class. &lt;code&gt;OldLogger&lt;/code&gt; has the same interface as &lt;code&gt;NewLogger&lt;/code&gt;, but for some reason you can't update the old component to use it.</source>
          <target state="translated">이전 구성 요소가 &lt;code&gt;OldLogger&lt;/code&gt; 클래스에 의존한다고 가정합니다 . &lt;code&gt;OldLogger&lt;/code&gt; 는 NewLogger 와 동일한 인터페이스를 &lt;code&gt;NewLogger&lt;/code&gt; 어떤 이유로 든 이전 컴포넌트를 업데이트하여 사용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="393692d189825d9307fd6c7fe80a2cd354ed6034" translate="yes" xml:space="preserve">
          <source>Suppose that the &lt;code&gt;HeroTaxReturnComponent&lt;/code&gt; had logic to manage and restore changes. That would be a pretty easy task for a simple hero tax return. In the real world, with a rich tax return data model, the change management would be tricky. You could delegate that management to a helper service, as this example does.</source>
          <target state="translated">&lt;code&gt;HeroTaxReturnComponent&lt;/code&gt; 에 변경 사항을 관리하고 복원하는 논리가 있다고 가정합니다 . 그것은 간단한 영웅 세금 환급을위한 아주 쉬운 일입니다. 현실에서는 세금 환급 데이터 모델이 풍부하기 때문에 변경 관리가 까다로울 수 있습니다. 이 예와 같이 해당 관리를 도우미 서비스에 위임 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="25aea682ecf4709d352723de7edbd90f7beb9d93" translate="yes" xml:space="preserve">
          <source>Suppose that you want to say that something was &quot;updated x minutes ago&quot;. In English, depending upon the number of minutes, you could display &quot;just now&quot;, &quot;one minute ago&quot;, or &quot;x minutes ago&quot; (with x being the actual number). Other languages might express the cardinality differently.</source>
          <target state="translated">무언가가 &quot;x 분 전에 업데이트되었다&quot;고 말하고 싶다고 가정하자. 영어에서는 분 수에 따라 &quot;지금&quot;, &quot;1 분 전&quot;또는 &quot;x 분 전&quot;을 표시 할 수 있습니다 (x는 실제 숫자 임). 다른 언어는 카디널리티를 다르게 표현할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="52f33491eb18bba650ee1a092238a98b0b605102" translate="yes" xml:space="preserve">
          <source>Suppose the user enters the letters &quot;abc&quot;, and then backspaces to remove them one by one. Here's what the UI displays:</source>
          <target state="translated">사용자가 &quot;abc&quot;문자를 입력 한 다음 백 스페이스를 사용하여 하나씩 제거한다고 가정합니다. UI가 표시하는 내용은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="d7069d4f08e8837edb06ea21d283e4edd2d1b1de" translate="yes" xml:space="preserve">
          <source>Suppose we have an &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; element and want to know its &lt;code&gt;type&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 요소가 있고 해당 &lt;code&gt;type&lt;/code&gt; 을 알고 싶다고 가정하십시오 .</target>
        </trans-unit>
        <trans-unit id="3c56e3107218078534c09e6533e96893d6ef445a" translate="yes" xml:space="preserve">
          <source>Suppose you want to read a configuration file and then generate a form based on that configuration. If that form will need additional customization by the user, it might work best as a schematic. However, if the forms will always be the same and not need much customization by developers, then you could create a dynamic component that takes the configuration and generates the form. In general, the more complex the customization, the more useful the schematic approach.</source>
          <target state="translated">구성 파일을 읽고 해당 구성을 기반으로 양식을 생성한다고 가정하십시오. 해당 양식에 사용자가 추가로 사용자 정의해야하는 경우 회로도로 가장 적합 할 수 있습니다. 그러나 양식이 항상 동일하고 개발자가 많은 사용자 정의를 필요로하지 않으면 구성을 가져 와서 양식을 생성하는 동적 구성 요소를 작성할 수 있습니다. 일반적으로 사용자 정의가 복잡할수록 회로도 접근 방식이 더 유용합니다.</target>
        </trans-unit>
        <trans-unit id="59237b414b792a395067be846fe0e7beefa8df0b" translate="yes" xml:space="preserve">
          <source>Surely you noticed the asterisk (*) prefix to the directive name and wondered why it is necessary and what it does.</source>
          <target state="translated">지시문 이름 앞에 별표 (*) 접두어가 붙은 이유와 그것이 왜 필요한지 궁금했습니다.</target>
        </trans-unit>
        <trans-unit id="b214d7f5503a587eb43c1ce5ab34f417045155cc" translate="yes" xml:space="preserve">
          <source>Surprisingly, the &lt;code&gt;AdminModule&lt;/code&gt; does &lt;em&gt;not&lt;/em&gt; preload. Something is blocking it.</source>
          <target state="translated">놀랍게도 &lt;code&gt;AdminModule&lt;/code&gt; 은 사전로드 되지 &lt;em&gt;않습니다&lt;/em&gt; . 무언가를 차단하고 있습니다.</target>
        </trans-unit>
        <trans-unit id="8a925dc523db7e7f6a2babc32186c1a961796ab3" translate="yes" xml:space="preserve">
          <source>SwPush</source>
          <target state="translated">SwPush</target>
        </trans-unit>
        <trans-unit id="9f27068dde7716de3ec4b61fb1f7fbb0fa22a06e" translate="yes" xml:space="preserve">
          <source>SwRegistrationOptions</source>
          <target state="translated">SwRegistrationOptions</target>
        </trans-unit>
        <trans-unit id="79b152292931b9029acf6214e3a35f2f497eb2ba" translate="yes" xml:space="preserve">
          <source>SwUpdate</source>
          <target state="translated">SwUpdate</target>
        </trans-unit>
        <trans-unit id="12ff3885d54d4fd6b48e48b47e4fa9d91086d058" translate="yes" xml:space="preserve">
          <source>Switch directives work as well with native elements and web components too. For example, you could replace the &lt;code&gt;&amp;lt;app-best-item&amp;gt;&lt;/code&gt; switch case with the following.</source>
          <target state="translated">스위치 지시문은 기본 요소 및 웹 구성 요소와도 잘 작동합니다. 예를 들어 &lt;code&gt;&amp;lt;app-best-item&amp;gt;&lt;/code&gt; 스위치 케이스를 다음과 같이 바꿀 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="33234fb80d85cf56feb93d467d387491c1b2475b" translate="yes" xml:space="preserve">
          <source>Switch the bootstrap method of the application from the &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; to the Angular way.</source>
          <target state="translated">응용 프로그램의 부트 스트랩 방법을 &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; 에서 Angular 방식으로 전환하십시오.</target>
        </trans-unit>
        <trans-unit id="f6b6874ca57485e6385c6bf8186046e4a67f2559" translate="yes" xml:space="preserve">
          <source>Switching to &lt;em&gt;production mode&lt;/em&gt; makes it run faster by disabling development specific checks such as the dual change detection cycles.</source>
          <target state="translated">&lt;em&gt;생산 모드로&lt;/em&gt; 전환 하면 이중 변경 감지주기와 같은 개발 별 검사를 비활성화하여 더 빠르게 실행할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7f052c63532052c45dde829915673716b21669b2" translate="yes" xml:space="preserve">
          <source>Switching to TypeScript</source>
          <target state="translated">TypeScript로 전환</target>
        </trans-unit>
        <trans-unit id="3f84ef531f9db996694ad09a8fdddbca1440577e" translate="yes" xml:space="preserve">
          <source>Symbol</source>
          <target state="translated">Symbol</target>
        </trans-unit>
        <trans-unit id="bf651e969e01eb1f873351e5967dd48f8903f1bb" translate="yes" xml:space="preserve">
          <source>Symbol Name</source>
          <target state="translated">심볼 이름</target>
        </trans-unit>
        <trans-unit id="0ffab2f658ffa680e2c69e9b420273e89027867e" translate="yes" xml:space="preserve">
          <source>Symbol reference expected</source>
          <target state="translated">기호 참조 예상</target>
        </trans-unit>
        <trans-unit id="f3494e771ca3509c91264f0e82dd38b796ebd086" translate="yes" xml:space="preserve">
          <source>Symbol used between time units. Example: 10:52</source>
          <target state="translated">시간 단위 사이에 사용되는 기호. 예 : 10:52</target>
        </trans-unit>
        <trans-unit id="e40de653307a889667fd3b8b60322928538d73e9" translate="yes" xml:space="preserve">
          <source>Symbols and file names</source>
          <target state="translated">기호 및 파일 이름</target>
        </trans-unit>
        <trans-unit id="6eb4870d40315c26b4100eb0b4abc30c88c7e0eb" translate="yes" xml:space="preserve">
          <source>Symbols that can be used to replace placeholders in number patterns. Examples are based on &lt;code&gt;en-US&lt;/code&gt; values.</source>
          <target state="translated">숫자 패턴에서 자리 표시자를 대체하는 데 사용할 수있는 기호입니다. 예는 &lt;code&gt;en-US&lt;/code&gt; 값을 기반으로 합니다.</target>
        </trans-unit>
        <trans-unit id="77c61919f7c0335c38d9155372ee85055a736cc1" translate="yes" xml:space="preserve">
          <source>Synchronous</source>
          <target state="translated">Synchronous</target>
        </trans-unit>
        <trans-unit id="81fcba9c890b5b9df0951a561afa635cb63d6429" translate="yes" xml:space="preserve">
          <source>Synchronous tests</source>
          <target state="translated">동기 테스트</target>
        </trans-unit>
        <trans-unit id="efa1ae6c647ae04a352ce83e8b956e4548c0a09f" translate="yes" xml:space="preserve">
          <source>Synchronous validator function composed of all the synchronous validators registered with this directive.</source>
          <target state="translated">이 지시어에 등록 된 모든 동기식 유효성 검사기로 구성된 동기식 유효성 검사기 기능.</target>
        </trans-unit>
        <trans-unit id="51c06766f034703a307b97a685afb1562f8e64c2" translate="yes" xml:space="preserve">
          <source>Syncs &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; in an existing &lt;code&gt;&lt;a href=&quot;../api/forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; instance to a form control element by name.</source>
          <target state="translated">기존 &lt;code&gt;&lt;a href=&quot;../api/forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 인스턴스의 &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 을 이름별로 양식 컨트롤 요소에 동기화 합니다.</target>
        </trans-unit>
        <trans-unit id="f961f76d72f8572cbf883b0eda6d37d9322f25ac" translate="yes" xml:space="preserve">
          <source>Syncs a &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; in an existing &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; to a form control element by name.</source>
          <target state="translated">기존 &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 의 &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 을 이름별로 양식 제어 요소에 동기화합니다 .</target>
        </trans-unit>
        <trans-unit id="8cd38404d1df6db7a6fae66425bda9b4e3309919" translate="yes" xml:space="preserve">
          <source>Syncs a &lt;code&gt;&lt;a href=&quot;forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; in an existing &lt;code&gt;&lt;a href=&quot;forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; to a form control element by name.</source>
          <target state="translated">기존 &lt;code&gt;&lt;a href=&quot;forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 의 &lt;code&gt;&lt;a href=&quot;forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 을 이름별로 양식 제어 요소에 동기화합니다 .</target>
        </trans-unit>
        <trans-unit id="086c4672a7169938b2a6514a98e7ed9e01527448" translate="yes" xml:space="preserve">
          <source>Syncs a nested &lt;code&gt;&lt;a href=&quot;../api/forms/formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; instance to a DOM element.</source>
          <target state="translated">중첩 된 &lt;code&gt;&lt;a href=&quot;../api/forms/formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; 인스턴스를 DOM 요소와 동기화합니다 .</target>
        </trans-unit>
        <trans-unit id="fc865b5e1817fe14c0c7ea54ca007f535109e025" translate="yes" xml:space="preserve">
          <source>Syncs a nested &lt;code&gt;&lt;a href=&quot;../api/forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; instance to a DOM element.</source>
          <target state="translated">중첩 된 &lt;code&gt;&lt;a href=&quot;../api/forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 인스턴스를 DOM 요소와 동기화합니다 .</target>
        </trans-unit>
        <trans-unit id="ba2e022b2265fa63e13b98eafe19811e46520332" translate="yes" xml:space="preserve">
          <source>Syncs a nested &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; to a DOM element.</source>
          <target state="translated">중첩 된 &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; 를 DOM 요소와 동기화합니다 .</target>
        </trans-unit>
        <trans-unit id="70738eb6d2e19d76da3cfc549c9c13b9312021b2" translate="yes" xml:space="preserve">
          <source>Syncs a nested &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; to a DOM element.</source>
          <target state="translated">중첩 된 &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 을 DOM 요소와 동기화합니다 .</target>
        </trans-unit>
        <trans-unit id="61af0c00422dee458259702f4176eec58c0c8042" translate="yes" xml:space="preserve">
          <source>Syncs a nested &lt;code&gt;&lt;a href=&quot;forms/formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; to a DOM element.</source>
          <target state="translated">중첩 된 &lt;code&gt;&lt;a href=&quot;forms/formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; 를 DOM 요소와 동기화합니다 .</target>
        </trans-unit>
        <trans-unit id="e43e097926a53a2908c4af6cd3bbae1f671e4adb" translate="yes" xml:space="preserve">
          <source>Syncs a nested &lt;code&gt;&lt;a href=&quot;forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; to a DOM element.</source>
          <target state="translated">중첩 된 &lt;code&gt;&lt;a href=&quot;forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 을 DOM 요소와 동기화합니다 .</target>
        </trans-unit>
        <trans-unit id="ad27b48f5dbc27604bca1812e101c55e46e2eee1" translate="yes" xml:space="preserve">
          <source>Syncs a standalone &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; instance to a form control element.</source>
          <target state="translated">독립형 &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 인스턴스를 양식 제어 요소에 동기화합니다 .</target>
        </trans-unit>
        <trans-unit id="fc68ea9b2876f7990354e54d126dd4bfe6d18749" translate="yes" xml:space="preserve">
          <source>Syncs a standalone &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; instance to a form control element.</source>
          <target state="translated">독립형 &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 인스턴스를 양식 제어 요소에 동기화합니다 .</target>
        </trans-unit>
        <trans-unit id="7e74270b6f12da6ecbf8b3bf65beff6d58cc992b" translate="yes" xml:space="preserve">
          <source>Syncs a standalone &lt;code&gt;&lt;a href=&quot;forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; instance to a form control element.</source>
          <target state="translated">독립형 &lt;code&gt;&lt;a href=&quot;forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 인스턴스를 양식 제어 요소에 동기화합니다 .</target>
        </trans-unit>
        <trans-unit id="1172a5b10335976e2b7c9c3fdc13f55d23facb32" translate="yes" xml:space="preserve">
          <source>Syncs an existing &lt;code&gt;&lt;a href=&quot;../api/forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; instance to a DOM element.</source>
          <target state="translated">기존 &lt;code&gt;&lt;a href=&quot;../api/forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 인스턴스를 DOM 요소와 동기화합니다 .</target>
        </trans-unit>
        <trans-unit id="17c7ba7676ad1ad6dd1c4e6b997adcae910262c9" translate="yes" xml:space="preserve">
          <source>Syntax</source>
          <target state="translated">Syntax</target>
        </trans-unit>
        <trans-unit id="3e2ad7607ba4c7d34af5aba42d88e71b8d7b2d5d" translate="yes" xml:space="preserve">
          <source>Syntax Examples</source>
          <target state="translated">구문 예</target>
        </trans-unit>
        <trans-unit id="81b08f26e2d68214bb4f1a772ea8cdfa473815a1" translate="yes" xml:space="preserve">
          <source>Syntax examples</source>
          <target state="translated">구문 예</target>
        </trans-unit>
        <trans-unit id="6691b44362a007fed00597742195f79ce997ae58" translate="yes" xml:space="preserve">
          <source>SystemJsNgModuleLoader</source>
          <target state="translated">SystemJsNgModuleLoader</target>
        </trans-unit>
        <trans-unit id="1ed04efd0b8e3b6249919e01cdc720a8e8ecf639" translate="yes" xml:space="preserve">
          <source>SystemJsNgModuleLoaderConfig</source>
          <target state="translated">SystemJsNgModuleLoaderConfig</target>
        </trans-unit>
        <trans-unit id="c2c53d66948214258a26ca9ca845d7ac0c17f8e7" translate="yes" xml:space="preserve">
          <source>T</source>
          <target state="translated">T</target>
        </trans-unit>
        <trans-unit id="08e80e877114a02316e2a85c727dc2ec2e8d050b" translate="yes" xml:space="preserve">
          <source>TRANSLATIONS</source>
          <target state="translated">TRANSLATIONS</target>
        </trans-unit>
        <trans-unit id="fb3e2ec398b2e2de9887ef22a66c4a02e397504f" translate="yes" xml:space="preserve">
          <source>TRANSLATIONS_FORMAT</source>
          <target state="translated">TRANSLATIONS_FORMAT</target>
        </trans-unit>
        <trans-unit id="bd652fbce1c3cb7239b3c2d66f09ef88cef2bb2f" translate="yes" xml:space="preserve">
          <source>Tab-pane example</source>
          <target state="translated">탭 창 예제</target>
        </trans-unit>
        <trans-unit id="1a428989bd13dceabd89b698d9fa38eb8a0d175c" translate="yes" xml:space="preserve">
          <source>Table of contents</source>
          <target state="translated">목차</target>
        </trans-unit>
        <trans-unit id="193daf137ed8b89de36d47c3df5fd8f66c0e1d14" translate="yes" xml:space="preserve">
          <source>Tables</source>
          <target state="translated">Tables</target>
        </trans-unit>
        <trans-unit id="4bddf5a71780ecc0e28e12eabc19502b8eec1d47" translate="yes" xml:space="preserve">
          <source>Tagged template expressions are not supported</source>
          <target state="translated">태그가 지정된 템플릿 표현식은 지원되지 않습니다</target>
        </trans-unit>
        <trans-unit id="b934954a57aa53ca1df92279825e0d4c54b36857" translate="yes" xml:space="preserve">
          <source>Take a closer look at the methods in &lt;code&gt;ad-banner.component.ts&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ad-banner.component.ts&lt;/code&gt; 의 메소드를 자세히 살펴 보십시오 .</target>
        </trans-unit>
        <trans-unit id="eac79b3b60173923dd4dec55995d0549258112a1" translate="yes" xml:space="preserve">
          <source>Take care when writing a component that inherits from another component. If the base component has injected dependencies, you must re-provide and re-inject them in the derived class and then pass them down to the base class through the constructor.</source>
          <target state="translated">다른 구성 요소에서 상속되는 구성 요소를 작성할 때는주의하십시오. 기본 구성 요소가 종속성을 주입 한 경우 파생 클래스에서 해당 구성 요소를 다시 제공하고 다시 주입 한 다음 생성자를 통해 기본 클래스로 전달해야합니다.</target>
        </trans-unit>
        <trans-unit id="959d7ee2d7b3d044cad9c2f02a2ffab28937e75a" translate="yes" xml:space="preserve">
          <source>Take it a step further. Consider the following router link that navigates from the root of the application down to the &lt;em&gt;Dragon Crisis&lt;/em&gt;:</source>
          <target state="translated">한 걸음 더 나아가십시오. 응용 프로그램의 루트에서 &lt;em&gt;Dragon Crisis&lt;/em&gt; 로 이동하는 다음 라우터 링크를 고려하십시오 .</target>
        </trans-unit>
        <trans-unit id="5e1997f28885ce15e075eba3fa736d8419f8699e" translate="yes" xml:space="preserve">
          <source>Take the final step and detach the admin feature set from the main application. The root &lt;code&gt;AppModule&lt;/code&gt; must neither load nor reference the &lt;code&gt;AdminModule&lt;/code&gt; or its files.</source>
          <target state="translated">마지막 단계를 수행하고 기본 애플리케이션에서 관리 기능 세트를 분리하십시오. 루트 &lt;code&gt;AppModule&lt;/code&gt; 은 &lt;code&gt;AdminModule&lt;/code&gt; 또는 해당 파일을 로드하거나 참조하지 않아야 합니다.</target>
        </trans-unit>
        <trans-unit id="e561ddf5a7dab6002aff68f7f2cbac99e4ca5385" translate="yes" xml:space="preserve">
          <source>Take the relevant parts of the crisis retrieval logic in &lt;code&gt;CrisisDetailComponent.ngOnInit&lt;/code&gt; and move them into the &lt;code&gt;CrisisDetailResolverService&lt;/code&gt;. Import the &lt;code&gt;Crisis&lt;/code&gt; model, &lt;code&gt;CrisisService&lt;/code&gt;, and the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; so you can navigate elsewhere if you can't fetch the crisis.</source>
          <target state="translated">의 위기 검색 로직의 관련 부분 가지고 &lt;code&gt;CrisisDetailComponent.ngOnInit&lt;/code&gt; 를 하고로 이동 &lt;code&gt;CrisisDetailResolverService&lt;/code&gt; . &lt;code&gt;Crisis&lt;/code&gt; 모델을 가져 &lt;code&gt;CrisisService&lt;/code&gt; 위기 모델, CrisisService 및 &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; 가져 와서 다른 곳을 탐색 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b5ea73c38525ab2fdecbff1c0aa0160e994a362d" translate="yes" xml:space="preserve">
          <source>Takes an array of &lt;a href=&quot;iterabledifferfactory&quot;&gt;&lt;code&gt;IterableDifferFactory&lt;/code&gt;&lt;/a&gt; and returns a provider used to extend the inherited &lt;a href=&quot;iterablediffers&quot;&gt;&lt;code&gt;IterableDiffers&lt;/code&gt;&lt;/a&gt; instance with the provided factories and return a new &lt;a href=&quot;iterablediffers&quot;&gt;&lt;code&gt;IterableDiffers&lt;/code&gt;&lt;/a&gt; instance.</source>
          <target state="translated">&lt;a href=&quot;iterabledifferfactory&quot;&gt; &lt;code&gt;IterableDifferFactory&lt;/code&gt; &lt;/a&gt; 의 배열을 가져와 제공된 팩토리로 상속 된 &lt;a href=&quot;iterablediffers&quot;&gt; &lt;code&gt;IterableDiffers&lt;/code&gt; &lt;/a&gt; 인스턴스 를 확장하고 새 &lt;a href=&quot;iterablediffers&quot;&gt; &lt;code&gt;IterableDiffers&lt;/code&gt; &lt;/a&gt; 인스턴스를 리턴하는 데 사용되는 제공자를 리턴 합니다.</target>
        </trans-unit>
        <trans-unit id="1783048e5410fe461b1992e43a0627a2db079105" translate="yes" xml:space="preserve">
          <source>Takes an array of &lt;a href=&quot;keyvaluedifferfactory&quot;&gt;&lt;code&gt;KeyValueDifferFactory&lt;/code&gt;&lt;/a&gt; and returns a provider used to extend the inherited &lt;a href=&quot;keyvaluediffers&quot;&gt;&lt;code&gt;KeyValueDiffers&lt;/code&gt;&lt;/a&gt; instance with the provided factories and return a new &lt;a href=&quot;keyvaluediffers&quot;&gt;&lt;code&gt;KeyValueDiffers&lt;/code&gt;&lt;/a&gt; instance.</source>
          <target state="translated">&lt;a href=&quot;keyvaluedifferfactory&quot;&gt; &lt;code&gt;KeyValueDifferFactory&lt;/code&gt; &lt;/a&gt; 의 배열을 가져와 제공된 팩토리로 상속 된 &lt;a href=&quot;keyvaluediffers&quot;&gt; &lt;code&gt;KeyValueDiffers&lt;/code&gt; &lt;/a&gt; 인스턴스 를 확장하고 새 &lt;a href=&quot;keyvaluediffers&quot;&gt; &lt;code&gt;KeyValueDiffers&lt;/code&gt; &lt;/a&gt; 인스턴스를 리턴하는 데 사용되는 제공자를 리턴 합니다.</target>
        </trans-unit>
        <trans-unit id="5a019a610b764a5ac0661621fc04397adf8ab98b" translate="yes" xml:space="preserve">
          <source>Takes the name of the project, as specified in the &lt;code&gt;projects&lt;/code&gt; section of the &lt;code&gt;angular.json&lt;/code&gt; workspace configuration file. When a project name is not supplied, it will execute for all projects.</source>
          <target state="translated">&lt;code&gt;angular.json&lt;/code&gt; 작업 공간 구성 파일 의 &lt;code&gt;projects&lt;/code&gt; 섹션에 지정된대로 프로젝트 이름을 가져옵니다 . 프로젝트 이름이 제공되지 않으면 모든 프로젝트에서 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="20daeff082d03a0b38c83ac26093ddda49f24ad0" translate="yes" xml:space="preserve">
          <source>Talk to the server through a service</source>
          <target state="translated">서비스를 통해 서버와 대화</target>
        </trans-unit>
        <trans-unit id="9d79ab61a4348e4625bb78bbbf19b6ed3b9efae8" translate="yes" xml:space="preserve">
          <source>Talking to DOM API directly isn't a best practice.</source>
          <target state="translated">DOM API와 직접 대화하는 것이 가장 좋은 방법은 아닙니다.</target>
        </trans-unit>
        <trans-unit id="31cc6a243c52473560fc05d841db5aeaed55aeb4" translate="yes" xml:space="preserve">
          <source>Tame the complexity with a &lt;code&gt;Page&lt;/code&gt; class that handles access to component properties and encapsulates the logic that sets them.</source>
          <target state="translated">구성 요소 속성에 대한 액세스를 처리하고 해당 속성을 설정하는 논리를 캡슐화 하는 &lt;code&gt;Page&lt;/code&gt; 클래스를 사용하여 복잡성을 줄입니다.</target>
        </trans-unit>
        <trans-unit id="98d70538f3b6756483784e61cbff4af80626f263" translate="yes" xml:space="preserve">
          <source>Tap into the Observable</source>
          <target state="translated">Observable에 활용</target>
        </trans-unit>
        <trans-unit id="61ad50a9b9189cc3cf1874568e35e7901ff4c982" translate="yes" xml:space="preserve">
          <source>Target</source>
          <target state="translated">Target</target>
        </trans-unit>
        <trans-unit id="ae9b707e7a77c61b2721b8988c5d55a82eceb725" translate="yes" xml:space="preserve">
          <source>Target configuration</source>
          <target state="translated">대상 구성</target>
        </trans-unit>
        <trans-unit id="a14b9e2d8db8b39d7783f3b50bdd3cd885de75a2" translate="yes" xml:space="preserve">
          <source>Target event</source>
          <target state="translated">대상 이벤트</target>
        </trans-unit>
        <trans-unit id="e30cbaa2faccc704914fd3fc89ef1c63d8bda97b" translate="yes" xml:space="preserve">
          <source>Target strings</source>
          <target state="translated">대상 문자열</target>
        </trans-unit>
        <trans-unit id="2e46f5c0d09cedf26b72fc0ef1be54d1d8560002" translate="yes" xml:space="preserve">
          <source>Target to extract from.</source>
          <target state="translated">추출 할 대상.</target>
        </trans-unit>
        <trans-unit id="faf4691c6436e38baa1090283557c861280888fc" translate="yes" xml:space="preserve">
          <source>Target to serve.</source>
          <target state="translated">봉사 할 대상.</target>
        </trans-unit>
        <trans-unit id="00830f9fc21a74f272379fb547328f3109f36ad9" translate="yes" xml:space="preserve">
          <source>Targets are defined in the &lt;code&gt;angular.json&lt;/code&gt;&lt;a href=&quot;workspace-config&quot;&gt;CLI configuration file&lt;/a&gt;. A target specifies the builder to use, its default options configuration, and named alternative configurations. The Architect tool uses the target definition to resolve input options for a given run.</source>
          <target state="translated">대상은 &lt;code&gt;angular.json&lt;/code&gt; &lt;a href=&quot;workspace-config&quot;&gt;CLI 구성 파일에&lt;/a&gt; 정의되어 있습니다 . 대상은 사용할 빌더, 기본 옵션 구성 및 명명 된 대체 구성을 지정합니다. Architect 도구는 대상 정의를 사용하여 지정된 실행에 대한 입력 옵션을 분석합니다.</target>
        </trans-unit>
        <trans-unit id="7bb0ddf9221c03b806b03c209e8366000124aa15" translate="yes" xml:space="preserve">
          <source>Task</source>
          <target state="translated">Task</target>
        </trans-unit>
        <trans-unit id="73418a3fdba46d16932dc2fc9afcd9d8987e56c9" translate="yes" xml:space="preserve">
          <source>Teach &lt;em&gt;AuthGuard&lt;/em&gt; to authenticate</source>
          <target state="translated">&lt;em&gt;AuthGuard&lt;/em&gt; 가 인증하도록 가르치십시오</target>
        </trans-unit>
        <trans-unit id="25507d522fc8f4937e463f4125763af49129dda6" translate="yes" xml:space="preserve">
          <source>Technically, &lt;code&gt;&lt;a href=&quot;../api/router/route#pathMatch&quot;&gt;pathMatch&lt;/a&gt; = '&lt;a href=&quot;../api/core/version#full&quot;&gt;full&lt;/a&gt;'&lt;/code&gt; results in a route hit when the &lt;em&gt;remaining&lt;/em&gt;, unmatched segments of the URL match &lt;code&gt;''&lt;/code&gt;. In this example, the redirect is in a top level route so the &lt;em&gt;remaining&lt;/em&gt; URL and the &lt;em&gt;entire&lt;/em&gt; URL are the same thing.</source>
          <target state="translated">기술적으로 &lt;code&gt;&lt;a href=&quot;../api/router/route#pathMatch&quot;&gt;pathMatch&lt;/a&gt; = '&lt;a href=&quot;../api/core/version#full&quot;&gt;full&lt;/a&gt;'&lt;/code&gt; 은 URL 의 &lt;em&gt;나머지&lt;/em&gt; 일치하지 않는 세그먼트가 &lt;code&gt;''&lt;/code&gt; 일치 할 때 경로 적중을 초래합니다 . 이 예에서 리디렉션은 최상위 경로에 있으므로 &lt;em&gt;나머지&lt;/em&gt; URL과 &lt;em&gt;전체&lt;/em&gt; URL은 동일합니다.</target>
        </trans-unit>
        <trans-unit id="00a93838e750a0730a8d6f5c1fedce685237d2d9" translate="yes" xml:space="preserve">
          <source>Technically, Angular is matching the name to a directive &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt;, one of the property names listed in the directive's &lt;code&gt;inputs&lt;/code&gt; array or a property decorated with &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt;. Such inputs map to the directive's own properties.</source>
          <target state="translated">기술적으로 Angular는 이름을 지시문 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; , 지시문의 &lt;code&gt;inputs&lt;/code&gt; 배열에 나열된 속성 이름 중 하나 또는 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; 장식 된 속성과 일치 시킵니다. 이러한 입력은 지시문의 자체 속성에 매핑됩니다.</target>
        </trans-unit>
        <trans-unit id="b63c149f79d0f3eff56cd6ac95c7fc7cf404954e" translate="yes" xml:space="preserve">
          <source>Tell &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; that you want the full response with the &lt;code&gt;observe&lt;/code&gt; option:</source>
          <target state="translated">&lt;code&gt;observe&lt;/code&gt; 옵션을 사용하여 전체 응답을 원한다고 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; 에 알리십시오 .</target>
        </trans-unit>
        <trans-unit id="e72e5c26ac0705579a0a676c6f42c12b1eaa9288" translate="yes" xml:space="preserve">
          <source>Tell Visual Studio how to handle requests for route app pages by adding these rewrite rules near the bottom of the &lt;code&gt;web.config&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;web.config&lt;/code&gt; 의 맨 아래 근처에 이러한 다시 쓰기 규칙을 추가하여 경로 앱 페이지 요청을 처리하는 방법을 Visual Studio에 알려주십시오 .</target>
        </trans-unit>
        <trans-unit id="fd2a05c99f33c07757e85e16590f2a556e55c4be" translate="yes" xml:space="preserve">
          <source>Tells the router if this URL should be processed.</source>
          <target state="translated">이 URL을 처리해야하는지 라우터에 알려줍니다.</target>
        </trans-unit>
        <trans-unit id="a732bd01a721431b70704355d2b67249c978ef6b" translate="yes" xml:space="preserve">
          <source>Template &lt;em&gt;input&lt;/em&gt; and &lt;em&gt;reference&lt;/em&gt; variable names have their own namespaces. The &lt;code&gt;hero&lt;/code&gt; in &lt;code&gt;let hero&lt;/code&gt; is never the same variable as the &lt;code&gt;hero&lt;/code&gt; declared as &lt;code&gt;#hero&lt;/code&gt;.</source>
          <target state="translated">템플릿 &lt;em&gt;입력&lt;/em&gt; 및 &lt;em&gt;참조&lt;/em&gt; 변수 이름에는 고유 한 네임 스페이스가 있습니다. &lt;code&gt;hero&lt;/code&gt; 의 &lt;code&gt;let hero&lt;/code&gt; 은 AS 같은 변수 결코 &lt;code&gt;hero&lt;/code&gt; 으로 선언 &lt;code&gt;#hero&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="efb3147068725b40c3436e7283942bba6c112bbf" translate="yes" xml:space="preserve">
          <source>Template Syntax</source>
          <target state="translated">템플릿 구문</target>
        </trans-unit>
        <trans-unit id="fa0b782eed89b03079da5213bda92d328c3427f9" translate="yes" xml:space="preserve">
          <source>Template basics</source>
          <target state="translated">템플릿 기본</target>
        </trans-unit>
        <trans-unit id="a1af2aeaf6c6487cc178cd2993fe7b1850971a31" translate="yes" xml:space="preserve">
          <source>Template context names take precedence over component context names. In &lt;code&gt;deleteHero(hero)&lt;/code&gt; above, the &lt;code&gt;hero&lt;/code&gt; is the template input variable, not the component's &lt;code&gt;hero&lt;/code&gt; property.</source>
          <target state="translated">템플릿 컨텍스트 이름이 구성 요소 컨텍스트 이름보다 우선합니다. 위의 &lt;code&gt;deleteHero(hero)&lt;/code&gt; 에서 &lt;code&gt;hero&lt;/code&gt; 는 구성 요소의 &lt;code&gt;hero&lt;/code&gt; 속성 이 아니라 템플릿 입력 변수 입니다.</target>
        </trans-unit>
        <trans-unit id="966e03574060cf4a9841a3250497825600ba22a4" translate="yes" xml:space="preserve">
          <source>Template directives</source>
          <target state="translated">템플릿 지시어</target>
        </trans-unit>
        <trans-unit id="22f6072957722cb25d4ed1dbd7d78214be5c501f" translate="yes" xml:space="preserve">
          <source>Template expression operators</source>
          <target state="translated">템플릿 표현식 연산자</target>
        </trans-unit>
        <trans-unit id="2f36556182fc7cb18248ad8e7e7c234fbd3994a2" translate="yes" xml:space="preserve">
          <source>Template expressions</source>
          <target state="translated">템플릿 표현</target>
        </trans-unit>
        <trans-unit id="b04a51d2287d24d74cc9ae7ed21f0d60df535ade" translate="yes" xml:space="preserve">
          <source>Template expressions cannot refer to anything in the global namespace, except &lt;code&gt;undefined&lt;/code&gt;. They can't refer to &lt;code&gt;window&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../api/platform-server/platformconfig#document&quot;&gt;document&lt;/a&gt;&lt;/code&gt;. Additionally, they can't call &lt;code&gt;console.log()&lt;/code&gt; or &lt;code&gt;Math.max()&lt;/code&gt; and they are restricted to referencing members of the expression context.</source>
          <target state="translated">템플릿 표현식은 &lt;code&gt;undefined&lt;/code&gt; 를 제외하고 전역 네임 스페이스의 어떤 것도 참조 할 수 없습니다 . &lt;code&gt;window&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;../api/platform-server/platformconfig#document&quot;&gt;document&lt;/a&gt;&lt;/code&gt; 참조 할 수 없습니다 . 또한 &lt;code&gt;console.log()&lt;/code&gt; 또는 &lt;code&gt;Math.max()&lt;/code&gt; 호출 할 수 없으며 표현식 컨텍스트의 멤버를 참조하도록 제한됩니다.</target>
        </trans-unit>
        <trans-unit id="f2d8f3b4a1d8af00d592cfd96bb7560d9f5866ed" translate="yes" xml:space="preserve">
          <source>Template inline or template file?</source>
          <target state="translated">템플릿 인라인 또는 템플릿 파일?</target>
        </trans-unit>
        <trans-unit id="793aeab565d46f4d09daa487f15eafb8d01c9f1b" translate="yes" xml:space="preserve">
          <source>Template inline styles</source>
          <target state="translated">템플릿 인라인 스타일</target>
        </trans-unit>
        <trans-unit id="d62c70e2c1bef2a7459f5c8ca8f10edf6b1dfe3a" translate="yes" xml:space="preserve">
          <source>Template input variable</source>
          <target state="translated">템플릿 입력 변수</target>
        </trans-unit>
        <trans-unit id="f17cb990d8b43df9e431abefc871bb8bdc3335a8" translate="yes" xml:space="preserve">
          <source>Template input variables</source>
          <target state="translated">템플릿 입력 변수</target>
        </trans-unit>
        <trans-unit id="276d9c745b9dcc1832f7aa2ab10c8b5f8828a8c0" translate="yes" xml:space="preserve">
          <source>Template link tags</source>
          <target state="translated">템플릿 링크 태그</target>
        </trans-unit>
        <trans-unit id="71806c9bd79ddb04621f77d670bf1aba53662c4e" translate="yes" xml:space="preserve">
          <source>Template options</source>
          <target state="translated">템플릿 옵션</target>
        </trans-unit>
        <trans-unit id="110185098cd1b2e55b879ad1f4d0ed2e6537d738" translate="yes" xml:space="preserve">
          <source>Template reference variable considerations</source>
          <target state="translated">템플릿 참조 변수 고려 사항</target>
        </trans-unit>
        <trans-unit id="a8e4799378055749eb9da93d9510e6a7d58a3f24" translate="yes" xml:space="preserve">
          <source>Template reference variables (&lt;code&gt;#var&lt;/code&gt;)</source>
          <target state="translated">템플릿 참조 변수 ( &lt;code&gt;#var&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="2af0573e0dd90a3ab5f9e206a130e358bd371c6e" translate="yes" xml:space="preserve">
          <source>Template statements</source>
          <target state="translated">템플릿 설명</target>
        </trans-unit>
        <trans-unit id="5d2b93ac612841845d0661b85c29eb2b1cd1cd29" translate="yes" xml:space="preserve">
          <source>Template statements cannot refer to anything in the global namespace. They can't refer to &lt;code&gt;window&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../api/platform-server/platformconfig#document&quot;&gt;document&lt;/a&gt;&lt;/code&gt;. They can't call &lt;code&gt;console.log&lt;/code&gt; or &lt;code&gt;Math.max&lt;/code&gt;.</source>
          <target state="translated">템플리트 명령문은 글로벌 네임 스페이스의 어떤 것도 참조 할 수 없습니다. &lt;code&gt;window&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;../api/platform-server/platformconfig#document&quot;&gt;document&lt;/a&gt;&lt;/code&gt; 참조 할 수 없습니다 . &lt;code&gt;console.log&lt;/code&gt; 또는 &lt;code&gt;Math.max&lt;/code&gt; 를 호출 할 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="a2e4c3e156daaa11223357c6c7fee079f5ca4d6c" translate="yes" xml:space="preserve">
          <source>Template statements have side effects</source>
          <target state="translated">템플릿 설명에는 부작용이 있습니다</target>
        </trans-unit>
        <trans-unit id="dd88988e24117f6f25330c54600c109c783b9beb" translate="yes" xml:space="preserve">
          <source>Template syntax</source>
          <target state="translated">템플릿 구문</target>
        </trans-unit>
        <trans-unit id="89aee637286de733fbf004914edfe700df91d5ca" translate="yes" xml:space="preserve">
          <source>Template translations</source>
          <target state="translated">템플릿 번역</target>
        </trans-unit>
        <trans-unit id="2199cac1a49cc0b5bc0238a44ca609a8fdc777e0" translate="yes" xml:space="preserve">
          <source>Template validation produces error messages when a type error is detected in a template binding expression, similar to how type errors are reported by the TypeScript compiler against code in a &lt;code&gt;.ts&lt;/code&gt; file.</source>
          <target state="translated">템플릿 유효성 검사는 형식 오류가 &lt;code&gt;.ts&lt;/code&gt; 파일의 코드에 대해 TypeScript 컴파일러에 의해보고되는 방식과 유사하게 템플릿 바인딩 식에서 형식 오류가 감지되면 오류 메시지를 생성 합니다.</target>
        </trans-unit>
        <trans-unit id="a05afb3e2a0b85002981023973fd725884721e1f" translate="yes" xml:space="preserve">
          <source>Template variable references</source>
          <target state="translated">템플릿 변수 참조</target>
        </trans-unit>
        <trans-unit id="58ff34d9a94fa1bca16ea2429b64af9ee09f9766" translate="yes" xml:space="preserve">
          <source>Template-driven</source>
          <target state="translated">Template-driven</target>
        </trans-unit>
        <trans-unit id="947ab7967c8b9de424b7b48fb2e8825139f85613" translate="yes" xml:space="preserve">
          <source>Template-driven Forms</source>
          <target state="translated">템플릿 기반 양식</target>
        </trans-unit>
        <trans-unit id="8e7766bb17d998e7bcccf98bd89bf899b82f86be" translate="yes" xml:space="preserve">
          <source>Template-driven forms</source>
          <target state="translated">템플릿 기반 양식</target>
        </trans-unit>
        <trans-unit id="eacc6fdad7fae7150f374795874d76dda2db76be" translate="yes" xml:space="preserve">
          <source>Template-driven validation</source>
          <target state="translated">템플릿 기반 검증</target>
        </trans-unit>
        <trans-unit id="49f5a0c2c82d30a031cbdf85339bb35e8de1b886" translate="yes" xml:space="preserve">
          <source>Template-reference variables such as &lt;code&gt;#heroForm&lt;/code&gt; and &lt;code&gt;#name&lt;/code&gt;.</source>
          <target state="translated">같은 템플릿 참조 변수 &lt;code&gt;#heroForm&lt;/code&gt; 및 &lt;code&gt;#name&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="871350ea04e981df978b9ee88f97415601759ccc" translate="yes" xml:space="preserve">
          <source>TemplateRef</source>
          <target state="translated">TemplateRef</target>
        </trans-unit>
        <trans-unit id="ac46ec20b12e03a347c43dafd18b8503a6feac19" translate="yes" xml:space="preserve">
          <source>Templates and views</source>
          <target state="translated">템플릿 및 뷰</target>
        </trans-unit>
        <trans-unit id="404ac9359f458c08768cf6531e667d2854940fba" translate="yes" xml:space="preserve">
          <source>Templates are the user-facing part of an Angular application and are written in HTML. The following table lists some of the key AngularJS template features with their equivalent Angular template syntax.</source>
          <target state="translated">템플릿은 Angular 응용 프로그램의 사용자 쪽 부분이며 HTML로 작성됩니다. 다음 표에는 Angular 템플릿 구문과 동등한 주요 AngularJS 템플릿 기능이 나열되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="7d179b96d34c29e0196caf2baca8ede8163168d8" translate="yes" xml:space="preserve">
          <source>Templates, directives, and data binding</source>
          <target state="translated">템플릿, 지시문 및 데이터 바인딩</target>
        </trans-unit>
        <trans-unit id="33a55a545f80619e2e19f636478745467cc32004" translate="yes" xml:space="preserve">
          <source>Temporarily add a &lt;a href=&quot;template-syntax#ref-vars&quot;&gt;template reference variable&lt;/a&gt; named &lt;code&gt;spy&lt;/code&gt; to the &lt;em&gt;Name&lt;/em&gt;&lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; tag and use it to display the input's CSS classes.</source>
          <target state="translated">&lt;code&gt;spy&lt;/code&gt; 라는 &lt;a href=&quot;template-syntax#ref-vars&quot;&gt;템플리트 참조 변수&lt;/a&gt; 를 &lt;em&gt;Name &lt;/em&gt; &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 태그에 임시로 추가하고 이를 사용하여 입력의 CSS 클래스를 표시하십시오.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="7f931515810af2d942cb1d62e9908a51d3886a8a" translate="yes" xml:space="preserve">
          <source>Test &lt;em&gt;DashboardHeroComponent&lt;/em&gt; stand-alone</source>
          <target state="translated">&lt;em&gt;DashboardHeroComponent&lt;/em&gt; 독립형 테스트</target>
        </trans-unit>
        <trans-unit id="fa5885e1b1f33914443039f015df6b87c1a577a9" translate="yes" xml:space="preserve">
          <source>Test Type</source>
          <target state="translated">시험 종류</target>
        </trans-unit>
        <trans-unit id="6896d81b81e460b5ab300516bb7a77d7c1527681" translate="yes" xml:space="preserve">
          <source>Test a component class on its own as you would test a service class.</source>
          <target state="translated">서비스 클래스를 테스트 할 때 컴포넌트 클래스를 자체적으로 테스트하십시오.</target>
        </trans-unit>
        <trans-unit id="2448fa765af5ce19934b50addc880031820bc7a1" translate="yes" xml:space="preserve">
          <source>Test debugging</source>
          <target state="translated">테스트 디버깅</target>
        </trans-unit>
        <trans-unit id="c1fecee23c2fad624d9f5999f217bf731328967f" translate="yes" xml:space="preserve">
          <source>Test file name and location</source>
          <target state="translated">테스트 파일 이름 및 위치</target>
        </trans-unit>
        <trans-unit id="0b4483791cb553bd9da8d0099a6a90f9bcbbbf63" translate="yes" xml:space="preserve">
          <source>Test it</source>
          <target state="translated">그것을 테스트</target>
        </trans-unit>
        <trans-unit id="a8407b2c9b9349ac41ecd56aec5c890c53b0b024" translate="yes" xml:space="preserve">
          <source>Test it as a stand-alone component.</source>
          <target state="translated">독립형 구성 요소로 테스트하십시오.</target>
        </trans-unit>
        <trans-unit id="24d3085b21a512d75865d8bceffdd551bcf73352" translate="yes" xml:space="preserve">
          <source>Test it as used by &lt;code&gt;DashboardComponent&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;DashboardComponent&lt;/code&gt; 에서 사용 된대로 테스트하십시오 .</target>
        </trans-unit>
        <trans-unit id="cc31d0d30b6280bc2d5300ca22178dcce3ff5d97" translate="yes" xml:space="preserve">
          <source>Test it as used by a substitute for &lt;code&gt;DashboardComponent&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;DashboardComponent&lt;/code&gt; 대신 사용하여 테스트하십시오 .</target>
        </trans-unit>
        <trans-unit id="8aa4d961b3eeea3f063253c0ba4dfe97056a0596" translate="yes" xml:space="preserve">
          <source>Test modules and platforms for individual platforms are available from '@angular/&amp;lt;platform_name&amp;gt;/testing'.</source>
          <target state="translated">개별 플랫폼에 대한 테스트 모듈 및 플랫폼은 '@ angular / &amp;lt;platform_name&amp;gt; / testing'에서 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="f6332a2e843d893064dd38a7519d7af9fee2c152" translate="yes" xml:space="preserve">
          <source>Test that &lt;strong&gt;&lt;em&gt;both&lt;/em&gt;&lt;/strong&gt; input properties are set initially and that button clicks trigger the expected &lt;code&gt;ngOnChanges&lt;/code&gt; calls and values:</source>
          <target state="translated">시험은 &lt;strong&gt;&lt;em&gt;모두&lt;/em&gt;&lt;/strong&gt; 입력 속성은 처음에 설정하고 버튼 클릭이 예상되는 트리거 &lt;code&gt;ngOnChanges&lt;/code&gt; 의 호출과 값을 :</target>
        </trans-unit>
        <trans-unit id="b830fb4922eb986456c661bb752dde86c342564f" translate="yes" xml:space="preserve">
          <source>Test that clicking the &lt;em&gt;Agree&lt;/em&gt; and &lt;em&gt;Disagree&lt;/em&gt; buttons update the appropriate counters:</source>
          <target state="translated">&lt;em&gt;동의&lt;/em&gt; 및 &lt;em&gt;반대&lt;/em&gt; 버튼 을 클릭하면 해당 카운터가 업데이트 &lt;em&gt;되는지&lt;/em&gt; 테스트 하십시오.</target>
        </trans-unit>
        <trans-unit id="2ea1ba39844fea58edcd1af16ad25d6919716e86" translate="yes" xml:space="preserve">
          <source>Test that the seconds displayed in the parent template match the seconds displayed in the child's status message. Test also that clicking the &lt;em&gt;Stop&lt;/em&gt; button pauses the countdown timer:</source>
          <target state="translated">부모 템플릿에 표시된 시간 (초)이 자녀의 상태 메시지에 표시된 시간 (초)과 일치하는지 테스트하십시오. &lt;em&gt;중지&lt;/em&gt; 버튼 을 클릭하면 카운트 다운 타이머가 일시 중지됩니다.</target>
        </trans-unit>
        <trans-unit id="45f1bff59c9d9d842f747fd8277989f00b5d93fc" translate="yes" xml:space="preserve">
          <source>Test the &quot;Share&quot; button:</source>
          <target state="translated">&quot;공유&quot;버튼을 테스트하십시오 :</target>
        </trans-unit>
        <trans-unit id="d81f957521355323aeca520db19f5edf8e370479" translate="yes" xml:space="preserve">
          <source>Test the router by clicking a product name. The app displays the product details component, which currently always says &quot;product-details works!&quot; (We'll fix this in the next section.)</source>
          <target state="translated">제품 이름을 클릭하여 라우터를 테스트하십시오. 응용 프로그램은 현재 &quot;제품 세부 정보가 작동합니다!&quot;라는 제품 세부 정보 구성 요소를 표시합니다. (다음 섹션에서이 문제를 해결하겠습니다.)</target>
        </trans-unit>
        <trans-unit id="1b3ebf0a33fd2cdd1645c2654b9fc72083bf1031" translate="yes" xml:space="preserve">
          <source>Test to see if the differ knows how to diff this kind of object.</source>
          <target state="translated">차이가 이러한 종류의 물체를 어떻게 다른지 알고 있는지 테스트하십시오.</target>
        </trans-unit>
        <trans-unit id="989e322a6f1139d1353ac93e44e55e319afbc019" translate="yes" xml:space="preserve">
          <source>Test whether a key exists in the store.</source>
          <target state="translated">상점에 키가 있는지 테스트하십시오.</target>
        </trans-unit>
        <trans-unit id="e619874937772363a1c2da2331f3ba776b465a2a" translate="yes" xml:space="preserve">
          <source>Test your cart component.</source>
          <target state="translated">장바구니 구성 요소를 테스트하십시오.</target>
        </trans-unit>
        <trans-unit id="99f07ad05e41dcec36a36e807face510d90d322b" translate="yes" xml:space="preserve">
          <source>Test your shipping prices feature:</source>
          <target state="translated">배송비 기능 테스트 :</target>
        </trans-unit>
        <trans-unit id="be104cc054c0fcb9b37c08765773727a64cec717" translate="yes" xml:space="preserve">
          <source>TestBed</source>
          <target state="translated">TestBed</target>
        </trans-unit>
        <trans-unit id="9088ec50aaa13740a9d6dbb00c51142edc2e8808" translate="yes" xml:space="preserve">
          <source>TestBedStatic</source>
          <target state="translated">TestBedStatic</target>
        </trans-unit>
        <trans-unit id="7514db3c9bb60b98c0cfca5106beca4b49ed97ce" translate="yes" xml:space="preserve">
          <source>TestComponentRenderer</source>
          <target state="translated">TestComponentRenderer</target>
        </trans-unit>
        <trans-unit id="4b705f1f1aacbc87dfafe7ad9846c3e675f6db17" translate="yes" xml:space="preserve">
          <source>TestModuleMetadata</source>
          <target state="translated">TestModuleMetadata</target>
        </trans-unit>
        <trans-unit id="7b5b8bd0f077ed931708cc0d311b207cedc70ab6" translate="yes" xml:space="preserve">
          <source>TestRequest</source>
          <target state="translated">TestRequest</target>
        </trans-unit>
        <trans-unit id="c9e78f83c634dce62c7e36294672609e7678c20c" translate="yes" xml:space="preserve">
          <source>Testability</source>
          <target state="translated">Testability</target>
        </trans-unit>
        <trans-unit id="5cdf6feb6534f6bc92bba0edf1ff9781944b5a79" translate="yes" xml:space="preserve">
          <source>Testability hook</source>
          <target state="translated">테스트 가능성 훅</target>
        </trans-unit>
        <trans-unit id="da504355c0338312be93a22ec235340a0cd93b24" translate="yes" xml:space="preserve">
          <source>TestabilityRegistry</source>
          <target state="translated">TestabilityRegistry</target>
        </trans-unit>
        <trans-unit id="0820b32b206b7352858e8903a838ed14319acdfd" translate="yes" xml:space="preserve">
          <source>Testing</source>
          <target state="translated">Testing</target>
        </trans-unit>
        <trans-unit id="f186e27eb7e517b4b8211f5e3987e28713883285" translate="yes" xml:space="preserve">
          <source>Testing HTTP requests</source>
          <target state="translated">HTTP 요청 테스트</target>
        </trans-unit>
        <trans-unit id="57ba27a4c362253fca0f0eaa9ec92fa28974c2d1" translate="yes" xml:space="preserve">
          <source>Testing HTTP services</source>
          <target state="translated">HTTP 서비스 테스트</target>
        </trans-unit>
        <trans-unit id="76004ae163e3baecfc0ef2edf0092063c811094c" translate="yes" xml:space="preserve">
          <source>Testing Utility APIs</source>
          <target state="translated">유틸리티 API 테스트</target>
        </trans-unit>
        <trans-unit id="3591b1f3793535608545f3b06aaac5398962d724" translate="yes" xml:space="preserve">
          <source>Testing a builder</source>
          <target state="translated">빌더 테스트</target>
        </trans-unit>
        <trans-unit id="118ae999614ef20321dc13d67908393c582ec10a" translate="yes" xml:space="preserve">
          <source>Testing components with dependencies</source>
          <target state="translated">종속성이있는 구성 요소 테스트</target>
        </trans-unit>
        <trans-unit id="0c1a0b297a16cb16b5427fe7c2629cc52c7885ef" translate="yes" xml:space="preserve">
          <source>Testing configuration.</source>
          <target state="translated">테스트 구성.</target>
        </trans-unit>
        <trans-unit id="ce31601d12cfb46e7ca9204dea5a6c8548b4090c" translate="yes" xml:space="preserve">
          <source>Testing for errors</source>
          <target state="translated">오류 테스트</target>
        </trans-unit>
        <trans-unit id="6d6a52e29c3585e98a136bdd3c004782df3376aa" translate="yes" xml:space="preserve">
          <source>Testing plays a large part in complex applications and a simpler testing strategy is useful when validating that your forms function correctly. Reactive forms and template-driven forms have different levels of reliance on rendering the UI to perform assertions based on form control and form field changes. The following examples demonstrate the process of testing forms with reactive and template-driven forms.</source>
          <target state="translated">테스트는 복잡한 응용 프로그램에서 큰 역할을하며 폼이 올바르게 작동하는지 검증 할 때 간단한 테스트 전략이 유용합니다. 반응성 양식과 템플릿 기반 양식은 양식 컨트롤 및 양식 필드 변경을 기반으로 어설 션을 수행하도록 UI를 렌더링하는 데 서로 다른 수준의 의존성을 갖습니다. 다음 예제는 반응 형 및 템플릿 기반 양식으로 양식을 테스트하는 과정을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="b05c22b69bf75d2207c5b9b5ed499a08af28e732" translate="yes" xml:space="preserve">
          <source>Testing reactive forms</source>
          <target state="translated">반응 형 테스트</target>
        </trans-unit>
        <trans-unit id="4468a085563566bac21b54d700de2a4f27490d54" translate="yes" xml:space="preserve">
          <source>Testing services with the &lt;em&gt;TestBed&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;TestBed를&lt;/em&gt; 사용한 테스트 서비스&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ecea04e4730b110b857580106d9bbe5105ac269a" translate="yes" xml:space="preserve">
          <source>Testing template-driven forms</source>
          <target state="translated">템플릿 기반 양식 테스트</target>
        </trans-unit>
        <trans-unit id="697051d918a08244ddad35b32bd220aad30731f8" translate="yes" xml:space="preserve">
          <source>Testing the component &lt;em&gt;class&lt;/em&gt; is as easy as testing a service.</source>
          <target state="translated">컴포넌트 &lt;em&gt;클래스&lt;/em&gt; 테스트는 서비스 테스트만큼 쉽습니다.</target>
        </trans-unit>
        <trans-unit id="039c2cc87c7b0778c57ccee1c7470749c1926dca" translate="yes" xml:space="preserve">
          <source>Testing the specific use of the &lt;code&gt;HighlightDirective&lt;/code&gt; within the &lt;code&gt;AboutComponent&lt;/code&gt; requires only the techniques explored above (in particular the &lt;a href=&quot;testing#nested-component-tests&quot;&gt;&quot;Shallow test&quot;&lt;/a&gt; approach).</source>
          <target state="translated">&lt;code&gt;AboutComponent&lt;/code&gt; 내 에서 &lt;code&gt;HighlightDirective&lt;/code&gt; 의 특정 사용을 테스트하려면 위에서 살펴본 기술 (특히 &lt;a href=&quot;testing#nested-component-tests&quot;&gt;&quot;Shallow test&quot;&lt;/a&gt; 접근 방식) 만 필요합니다.</target>
        </trans-unit>
        <trans-unit id="3d4f5b3e2a6878f7cf4f7973ba68c545ec004c46" translate="yes" xml:space="preserve">
          <source>Testing with &lt;em&gt;ActivatedRouteStub&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;ActivatedRouteStub을&lt;/em&gt; 사용한 테스트&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="7758900c8180a1d000869ec3a8a1ccd3ecff2333" translate="yes" xml:space="preserve">
          <source>Testing with a spy</source>
          <target state="translated">스파이로 테스트</target>
        </trans-unit>
        <trans-unit id="d02a000b264944782c696348f9263db99fe9a4a0" translate="yes" xml:space="preserve">
          <source>Testing without &lt;em&gt;beforeEach()&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;beforeEach ()&lt;/em&gt; 없이 테스트&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="39fdec1194d94212b871a28b2aa04a73cd40fce1" translate="yes" xml:space="preserve">
          <source>Tests</source>
          <target state="translated">Tests</target>
        </trans-unit>
        <trans-unit id="888d9d0f4ee5e8f0c157b91c6eb659ea756add43" translate="yes" xml:space="preserve">
          <source>Tests can explore how the &lt;code&gt;HeroDetailComponent&lt;/code&gt; responds to different &lt;code&gt;id&lt;/code&gt; parameter values by manipulating the &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; injected into the component's constructor.</source>
          <target state="translated">테스트는 컴포넌트의 생성자에 주입 된 &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; 를 조작 하여 &lt;code&gt;HeroDetailComponent&lt;/code&gt; 가 다른 &lt;code&gt;id&lt;/code&gt; 매개 변수 값에 응답 하는 방법을 탐색 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a149f72eba01c87f9d7e2acc8e6ccead108bd378" translate="yes" xml:space="preserve">
          <source>Tests can not only be retained through an upgrade process, but they can also be used as a valuable safety measure when ensuring that the application does not break during the upgrade. E2E tests are especially useful for this purpose.</source>
          <target state="translated">테스트는 업그레이드 프로세스를 통해 유지 될 수있을뿐만 아니라 업그레이드 중에 응용 프로그램이 중단되지 않도록하는 데 유용한 안전 조치로 사용될 수도 있습니다. E2E 테스트는이 목적에 특히 유용합니다.</target>
        </trans-unit>
        <trans-unit id="ef9720ff67e3a0f70d038c1f235e9be14b1f91b7" translate="yes" xml:space="preserve">
          <source>Tests click buttons of both the parent &lt;code&gt;MissionControlComponent&lt;/code&gt; and the &lt;code&gt;AstronautComponent&lt;/code&gt; children and verify that the history meets expectations:</source>
          <target state="translated">부모 &lt;code&gt;MissionControlComponent&lt;/code&gt; 및 &lt;code&gt;AstronautComponent&lt;/code&gt; 자식 의 클릭 버튼을 테스트 하고 기록이 기대치를 충족하는지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="9a1fb83f4107a4334b4d83ca00fd46b35664a0df" translate="yes" xml:space="preserve">
          <source>Tests that exercise the component need ...</source>
          <target state="translated">구성 요소를 시험하는 테스트는 ...</target>
        </trans-unit>
        <trans-unit id="5e8952a23ac8b494d5a4aa2dfda252105e5ee80b" translate="yes" xml:space="preserve">
          <source>Tests the value using a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions&quot;&gt;regular expression&lt;/a&gt; pattern suitable for common usecases. The pattern is based on the definition of a valid email address in the &lt;a href=&quot;https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address&quot;&gt;WHATWG HTML specification&lt;/a&gt; with some enhancements to incorporate more RFC rules (such as rules related to domain names and the lengths of different parts of the address).</source>
          <target state="translated">일반적인 사용 사례에 적합한 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions&quot;&gt;정규식&lt;/a&gt; 패턴을 사용하여 값을 테스트합니다 . 이 패턴은 &lt;a href=&quot;https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address&quot;&gt;WHATWG HTML 사양&lt;/a&gt; 에서 유효한 전자 메일 주소의 정의를 기반으로 더 많은 RFC 규칙 (예 : 도메인 이름 관련 규칙 및 주소의 다른 부분의 길이)을 통합하기 위해 일부 개선되었습니다.</target>
        </trans-unit>
        <trans-unit id="40db585145f66e7c1d97246b405cda4f5c923267" translate="yes" xml:space="preserve">
          <source>Textual description of response status code.</source>
          <target state="translated">응답 상태 코드의 텍스트 설명</target>
        </trans-unit>
        <trans-unit id="6eee3bad7a4f570555e555491652b44c30be408f" translate="yes" xml:space="preserve">
          <source>Textual input; ideal for string or number options.</source>
          <target state="translated">텍스트 입력; 문자열 또는 숫자 옵션에 이상적입니다.</target>
        </trans-unit>
        <trans-unit id="45b58f88e69ae6780e1f2abce5d12c9d0d78969a" translate="yes" xml:space="preserve">
          <source>Thanks to &lt;a href=&quot;hierarchical-dependency-injection&quot;&gt;injector inheritance&lt;/a&gt;, you can still inject application-wide services into these components. A component's injector is a child of its parent component's injector, and inherits from all ancestor injectors all the way back to the application's &lt;em&gt;root&lt;/em&gt; injector. Angular can inject a service provided by any injector in that lineage.</source>
          <target state="translated">&lt;a href=&quot;hierarchical-dependency-injection&quot;&gt;인젝터 상속&lt;/a&gt; 덕분에 애플리케이션 전체 서비스를 이러한 컴포넌트에 여전히 주입 할 수 있습니다. 구성 요소 인젝터는 부모 구성 요소 인젝터의 자식이며 모든 조상 인젝터에서 응용 프로그램의 &lt;em&gt;루트&lt;/em&gt; 인젝터로 상속됩니다 . Angular는 해당 계보의 인젝터가 제공하는 서비스를 주입 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b7988d61e2d1ccc1aba091cbcda9c3833787e86a" translate="yes" xml:space="preserve">
          <source>That &lt;em&gt;selected hero&lt;/em&gt; coloring is the work of the &lt;code&gt;.selected&lt;/code&gt; CSS class in the &lt;a href=&quot;toh-pt2#styles&quot;&gt;styles you added earlier&lt;/a&gt;. You just have to apply the &lt;code&gt;.selected&lt;/code&gt; class to the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; when the user clicks it.</source>
          <target state="translated">그 &lt;em&gt;선택된 영웅의&lt;/em&gt; 색상은의 작품입니다 &lt;code&gt;.selected&lt;/code&gt; 에서 CSS 클래스 &lt;a href=&quot;toh-pt2#styles&quot;&gt;이전에 추가 한 스타일&lt;/a&gt; . 사용자가 클릭 하면 &lt;code&gt;.selected&lt;/code&gt; 클래스를 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 에 적용 하면됩니다.</target>
        </trans-unit>
        <trans-unit id="997d534a801fe52469433556fdfc70812d5791b0" translate="yes" xml:space="preserve">
          <source>That &lt;em&gt;won't work&lt;/em&gt; when the &lt;code&gt;HeroService&lt;/code&gt; is actually making requests of a remote server.</source>
          <target state="translated">그것은 &lt;em&gt;작동하지 않습니다&lt;/em&gt; 때 &lt;code&gt;HeroService&lt;/code&gt; 가 실제로 원격 서버의 요청을하고있다.</target>
        </trans-unit>
        <trans-unit id="855bfc37db8fbfcd6a69c185c541bcee572c7752" translate="yes" xml:space="preserve">
          <source>That brief syntax does a lot:</source>
          <target state="translated">이 간단한 구문은 많은 기능을 수행합니다.</target>
        </trans-unit>
        <trans-unit id="baeabedfa4d2b67801841521af7799623a88f4c2" translate="yes" xml:space="preserve">
          <source>That doesn't match any of the concrete configured routes which means the router falls through to the wildcard route and displays the &lt;code&gt;PageNotFoundComponent&lt;/code&gt;.</source>
          <target state="translated">라우터가 와일드 카드 경로로 이동하여 &lt;code&gt;PageNotFoundComponent&lt;/code&gt; 를 표시한다는 구체적인 구성 경로와 일치하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="53890b190e7522b42925863c087bdb3871d6fd9d" translate="yes" xml:space="preserve">
          <source>That is the last you'll see of AngularJS! It has served us well but now it's time to say goodbye.</source>
          <target state="translated">이것이 AngularJS에서 마지막으로 보게 될 것입니다! 그것은 우리를 잘 섬겼지만 이제는 작별 인사를 할 때입니다.</target>
        </trans-unit>
        <trans-unit id="546cbdd2883bb656047b37ff93de8aac7a7774d3" translate="yes" xml:space="preserve">
          <source>That is why there are two ways to create the module: &lt;code&gt;RouterModule.forRoot&lt;/code&gt; and &lt;code&gt;RouterModule.forChild&lt;/code&gt;.</source>
          <target state="translated">모듈을 만드는 두 가지 방법이 있습니다 : &lt;code&gt;RouterModule.forRoot&lt;/code&gt; 및 &lt;code&gt;RouterModule.forChild&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="78cd18b8b1563fee45858ef3948be6ae3918ea9b" translate="yes" xml:space="preserve">
          <source>That leaves only components bootstrapped using one of the imperative techniques, such as &lt;a href=&quot;../api/core/viewcontainerref#createComponent&quot;&gt;&lt;code&gt;ViewComponentRef.createComponent()&lt;/code&gt;&lt;/a&gt; as undiscoverable.</source>
          <target state="translated">따라서 &lt;a href=&quot;../api/core/viewcontainerref#createComponent&quot;&gt; &lt;code&gt;ViewComponentRef.createComponent()&lt;/code&gt; &lt;/a&gt; 와 같은 명령 기술 중 하나를 사용하여 발견 할 수없는 구성 요소 만 부트 스트랩 됩니다.</target>
        </trans-unit>
        <trans-unit id="5d9c064530f05f389c5fbe1c71c58fb65ce76d57" translate="yes" xml:space="preserve">
          <source>That shows one hero. To list them all, add an &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; to the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; to iterate through the list of heroes:</source>
          <target state="translated">그것은 한 영웅을 보여줍니다. 모두 나열하려면 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 에 &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 를 추가하여 영웅 목록을 반복하십시오.</target>
        </trans-unit>
        <trans-unit id="60723467a2927bc85f77b7d415dfc59363db1a8f" translate="yes" xml:space="preserve">
          <source>That you can only apply &lt;a href=&quot;structural-directives#one-per-element&quot;&gt;one structural directive&lt;/a&gt; to an element.</source>
          <target state="translated">요소에는 &lt;a href=&quot;structural-directives#one-per-element&quot;&gt;하나의 구조적 지시문&lt;/a&gt; 만 적용 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="6e04a0a9c73bb1fbb17f9d8723aa29ee17f93b6c" translate="yes" xml:space="preserve">
          <source>That's &lt;em&gt;preloading&lt;/em&gt;.</source>
          <target state="translated">그건 &lt;em&gt;사전로드&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="e43e04a9dd6b720de1e5ae14bfbe69af946d80c7" translate="yes" xml:space="preserve">
          <source>That's &lt;em&gt;really&lt;/em&gt; crisp. Only the &lt;em&gt;test doubles&lt;/em&gt; in the &lt;code&gt;providers&lt;/code&gt; remain. Even the &lt;code&gt;HeroDetailComponent&lt;/code&gt; declaration is gone.</source>
          <target state="translated">의는 &lt;em&gt;정말&lt;/em&gt; 선명. 만 &lt;em&gt;테스트 복식&lt;/em&gt; 의 &lt;code&gt;providers&lt;/code&gt; 남아있다. 심지어 &lt;code&gt;HeroDetailComponent&lt;/code&gt; 의 선언은 사라졌다.</target>
        </trans-unit>
        <trans-unit id="c76bb94cbc84152062cf4a329790720f178cb281" translate="yes" xml:space="preserve">
          <source>That's &lt;em&gt;two-way data binding&lt;/em&gt;. For more information, see &lt;a href=&quot;template-syntax#ngModel&quot;&gt;Two-way binding with NgModel&lt;/a&gt; on the the &lt;a href=&quot;template-syntax&quot;&gt;Template Syntax&lt;/a&gt; page.</source>
          <target state="translated">그것은 &lt;em&gt;양방향 데이터 바인딩&lt;/em&gt; 입니다. 자세한 내용 은 &lt;a href=&quot;template-syntax&quot;&gt;템플릿 구문&lt;/a&gt; 페이지 에서 &lt;a href=&quot;template-syntax#ngModel&quot;&gt;NgModel&lt;/a&gt; 을 사용한 양방향 바인딩을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="3921dcb6884a1953a2a80655d084b46ece04b5af" translate="yes" xml:space="preserve">
          <source>That's because interceptors work at a lower level than those &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; methods. A single HTTP request can generate multiple &lt;em&gt;events&lt;/em&gt;, including upload and download progress events. The &lt;code&gt;&lt;a href=&quot;../api/common/http/httpresponse&quot;&gt;HttpResponse&lt;/a&gt;&lt;/code&gt; class itself is actually an event, whose type is &lt;code&gt;&lt;a href=&quot;../api/common/http/httpeventtype#Response&quot;&gt;HttpEventType.Response&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">인터셉터가 해당 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; 메소드 보다 낮은 레벨에서 작동하기 때문 입니다. 단일 HTTP 요청은 업로드 및 다운로드 진행 이벤트를 포함하여 여러 &lt;em&gt;이벤트를&lt;/em&gt; 생성 할 수 있습니다. &lt;code&gt;&lt;a href=&quot;../api/common/http/httpresponse&quot;&gt;HttpResponse&lt;/a&gt;&lt;/code&gt; 클래스 자체는 실제로 유형이있는 이벤트입니다 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpeventtype#Response&quot;&gt;HttpEventType.Response&lt;/a&gt;&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="73090ab1ac428708459347276bf105c30a54c714" translate="yes" xml:space="preserve">
          <source>That's good, but it would be nice to &lt;em&gt;simultaneously&lt;/em&gt; apply the directive and set the color &lt;em&gt;in the same attribute&lt;/em&gt; like this.</source>
          <target state="translated">좋습니다. 그러나 지시문 을 &lt;em&gt;동시에&lt;/em&gt; 적용하고 색상 &lt;em&gt;을 이와 같은 속성으로&lt;/em&gt; 설정하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="fdd51638c77368aee34229eb5d7f4a31418fff47" translate="yes" xml:space="preserve">
          <source>That's not a problem when the source code is in memory. But the &lt;code&gt;BannerComponent&lt;/code&gt; requires external files that the compiler must read from the file system, an inherently &lt;em&gt;asynchronous&lt;/em&gt; operation.</source>
          <target state="translated">소스 코드가 메모리에있을 때는 문제가되지 않습니다. 그러나 &lt;code&gt;BannerComponent&lt;/code&gt; 에는 기본적 으로 &lt;em&gt;비동기&lt;/em&gt; 작업 인 컴파일러가 파일 시스템에서 읽어야하는 외부 파일이 필요 합니다.</target>
        </trans-unit>
        <trans-unit id="6568d13ab9ecb29b6bc0a1b257bc515ba6d56377" translate="yes" xml:space="preserve">
          <source>That's not a problem when you run the CLI &lt;code&gt;ng test&lt;/code&gt; command because it &lt;em&gt;compiles the app before running the tests&lt;/em&gt;.</source>
          <target state="translated">CLI &lt;code&gt;ng test&lt;/code&gt; 명령 &lt;em&gt;을 실행하면 tests를 실행하기 전에 앱을 컴파일&lt;/em&gt; 하기 때문에 문제가되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="75533f536e09008a2f4370b9a66ce6baff36ade1" translate="yes" xml:space="preserve">
          <source>That's not a problem. When three modules all import Module 'A', Angular evaluates Module 'A' once, the first time it encounters it, and doesn't do so again.</source>
          <target state="translated">그건 문제가되지 않습니다. 세 개의 모듈이 모두 모듈 'A'를 가져 오면 Angular는 모듈 'A'를 처음 발견 할 때 모듈을 한 번 평가 한 후 다시 수행하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="151a2e953c5878c8b2f49ccc710715719dae8e6b" translate="yes" xml:space="preserve">
          <source>That's possible by configuring the &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; with the &lt;code&gt;&lt;a href=&quot;../api/core/testing/componentfixtureautodetect&quot;&gt;ComponentFixtureAutoDetect&lt;/a&gt;&lt;/code&gt; provider. First import it from the testing utility library:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/testing/componentfixtureautodetect&quot;&gt;ComponentFixtureAutoDetect&lt;/a&gt;&lt;/code&gt; 공급자로 &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; 를 구성하면 가능합니다 . 먼저 테스트 유틸리티 라이브러리에서 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="139fd9b014e0c67851c103338e6f1bb39431603f" translate="yes" xml:space="preserve">
          <source>That's the only change you should make to the &lt;code&gt;HeroDetailComponent&lt;/code&gt; class. There are no more properties. There's no presentation logic. This component simply receives a hero object through its &lt;code&gt;hero&lt;/code&gt; property and displays it.</source>
          <target state="translated">이것이 &lt;code&gt;HeroDetailComponent&lt;/code&gt; 클래스 를 변경해야하는 유일한 것 입니다. 더 이상 속성이 없습니다. 프리젠 테이션 로직이 없습니다. 이 컴포넌트는 단순히 &lt;code&gt;hero&lt;/code&gt; 속성을 통해 hero 객체를 받아서 표시합니다.</target>
        </trans-unit>
        <trans-unit id="9c6da24822230ab8738da89d9e6d04f423c6f361" translate="yes" xml:space="preserve">
          <source>That's too much effort just to answer a few simple questions about links.</source>
          <target state="translated">링크에 대한 몇 가지 간단한 질문에 대답하기에는 너무 많은 노력이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="c1bcf5a4b4646f6c696415537ab243683a1e6ff1" translate="yes" xml:space="preserve">
          <source>That's true at whatever level &lt;code&gt;A&lt;/code&gt; appears in a hierarchy of imported NgModules. When Module 'B' imports Module 'A', Module 'C' imports 'B', and Module 'D' imports &lt;code&gt;[C, B, A]&lt;/code&gt;, then 'D' triggers the evaluation of 'C', which triggers the evaluation of 'B', which evaluates 'A'. When Angular gets to the 'B' and 'A' in 'D', they're already cached and ready to go.</source>
          <target state="translated">가져온 NgModules의 계층 구조에 &lt;code&gt;A&lt;/code&gt; 레벨 이 표시되는 모든 경우에 해당됩니다 . 모듈 'B'가 모듈 'A'를 가져오고 모듈 'C'가 'B'를 가져오고 모듈 'D'가 &lt;code&gt;[C, B, A]&lt;/code&gt; 가져 오면 'D'는 'C'의 평가를 트리거하여 평가를 트리거합니다. 'A'를 평가하는 'B'의 Angular가 'D'의 'B'와 'A'에 도달하면 이미 캐시되어 준비가 된 것입니다.</target>
        </trans-unit>
        <trans-unit id="eab482f8d705259ee9ad3c1b5e7791e025cccad6" translate="yes" xml:space="preserve">
          <source>That's where a popup will go, once you learn how to route a popup component to it.</source>
          <target state="translated">팝업 구성 요소를 라우팅하는 방법을 배우면 팝업이 표시되는 곳입니다.</target>
        </trans-unit>
        <trans-unit id="bd89378d819f44a785e6fb9e2f462ab1c7095c1d" translate="yes" xml:space="preserve">
          <source>That's why it's a best practice to separate presentation of data from data access by encapsulating data access in a separate service and delegating to that service in the component, even in simple cases like this one.</source>
          <target state="translated">그렇기 때문에 별도의 서비스에서 데이터 액세스를 캡슐화하고 구성 요소에서 해당 서비스에 위임함으로써 이와 같은 간단한 경우에도 데이터 표시와 데이터 액세스를 분리하는 것이 가장 좋습니다.</target>
        </trans-unit>
        <trans-unit id="5d4537305ed4c11fbd605714ec89b0aa7ead00b2" translate="yes" xml:space="preserve">
          <source>The &quot;&lt;em&gt;is required&lt;/em&gt;&quot; message in a nearby &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;, which you'll display only if the control is invalid.</source>
          <target state="translated">근처에있는 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 의 &quot; &lt;em&gt;필수&lt;/em&gt; &quot;메시지 는 컨트롤이 유효하지 않은 경우에만 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="cb6da98142a6e890c992fc42a49312215d3df539" translate="yes" xml:space="preserve">
          <source>The &quot;Hello World&quot; schematic might, for example, ask the user for their name, and display that name in place of the default name &quot;world&quot;. To define such a prompt, add an &lt;code&gt;x-prompt&lt;/code&gt; property to the schema for the &lt;code&gt;name&lt;/code&gt; variable.</source>
          <target state="translated">예를 들어 &quot;Hello World&quot;회로도는 사용자에게 이름을 요청하고 기본 이름 &quot;world&quot;대신 해당 이름을 표시 할 수 있습니다. 이러한 프롬프트를 정의하려면 &lt;code&gt;name&lt;/code&gt; 변수 의 스키마에 &lt;code&gt;x-prompt&lt;/code&gt; 특성을 추가 하십시오.</target>
        </trans-unit>
        <trans-unit id="d2bbaa39f4a35729b9133f4121bdad46ac1e7bd6" translate="yes" xml:space="preserve">
          <source>The &quot;click&quot; test &lt;em&gt;in this example&lt;/em&gt; is misleading. It tests the &lt;code&gt;RouterLinkDirectiveStub&lt;/code&gt; rather than the &lt;em&gt;component&lt;/em&gt;. This is a common failing of directive stubs.</source>
          <target state="translated">&lt;em&gt;이 예에서&lt;/em&gt; &quot;클릭&quot;테스트 는 잘못된 것입니다. &lt;em&gt;구성 요소&lt;/em&gt; 대신 &lt;code&gt;RouterLinkDirectiveStub&lt;/code&gt; 을 테스트합니다 . 이것은 지시문 스텁의 일반적인 실패입니다.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="faea2451a7960e46bcbe2d68d4b393ce90a1ad33" translate="yes" xml:space="preserve">
          <source>The &quot;source of truth&quot; for the value and validation status of a form input element at a given point in time. When using &lt;a href=&quot;glossary#reactive-forms&quot;&gt;reactive forms&lt;/a&gt;, the form model is created explicitly in the component class. When using &lt;a href=&quot;glossary#template-driven-forms&quot;&gt;template-driven forms&lt;/a&gt;, the form model is implicitly created by directives.</source>
          <target state="translated">특정 시점에서 양식 입력 요소의 값 및 유효성 검증 상태에 대한 &quot;진실 소스&quot;. &lt;a href=&quot;glossary#reactive-forms&quot;&gt;반응 형 양식을&lt;/a&gt; 사용 하면 구성 요소 클래스에서 양식 모델이 명시 적으로 작성됩니다. 사용하는 경우 &lt;a href=&quot;glossary#template-driven-forms&quot;&gt;템플릿 기반의 형태&lt;/a&gt; , 양식 모델은 암시 적 지시에 의해 생성된다.</target>
        </trans-unit>
        <trans-unit id="5f16bf1662cd8257f3371d70ecfe3dffbbd1ef48" translate="yes" xml:space="preserve">
          <source>The &quot;source of truth&quot; is the template. The validation is defined using attributes on the individual input elements.</source>
          <target state="translated">&quot;진리의 근원&quot;이 템플릿입니다. 유효성 검증은 개별 입력 요소의 속성을 사용하여 정의됩니다.</target>
        </trans-unit>
        <trans-unit id="2b7f919d94c58fca886b43402bcc81835c791109" translate="yes" xml:space="preserve">
          <source>The &quot;source of truth&quot;, the form model, is defined in the component class.</source>
          <target state="translated">폼 모델 인 &quot;진리 소스&quot;는 컴포넌트 클래스에 정의되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="6dd684e5040381ad0ce17b5ddf5b549b7b739b86" translate="yes" xml:space="preserve">
          <source>The &quot;submit&quot; event object</source>
          <target state="translated">&quot;submit&quot;이벤트 객체</target>
        </trans-unit>
        <trans-unit id="359847ddb8d62a2bd8e853ea6598a7205ec1c46d" translate="yes" xml:space="preserve">
          <source>The &amp;lt;ng-template&amp;gt; is an Angular element for rendering HTML. It is never displayed directly. In fact, before rendering the view, Angular &lt;em&gt;replaces&lt;/em&gt; the &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; and its contents with a comment.</source>
          <target state="translated">&amp;lt;ng-template&amp;gt;은 HTML 렌더링을위한 Angular 요소입니다. 직접 표시되지 않습니다. 사실,보기를 렌더링하기 전에, 각도는 &lt;em&gt;대체 &lt;/em&gt; &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; 과 코멘트와 그 내용.</target>
        </trans-unit>
        <trans-unit id="f2bc11b9bff8891b1b4b95777be8093827f90cd6" translate="yes" xml:space="preserve">
          <source>The 'legacy_enabled' and 'legacy_disabled' should not be used for new applications.</source>
          <target state="translated">새로운 애플리케이션에는 'legacy_enabled'및 'legacy_disabled'를 사용해서는 안됩니다.</target>
        </trans-unit>
        <trans-unit id="5a0607fc5a71f75025003113fba9d409eef3025c" translate="yes" xml:space="preserve">
          <source>The (*) before &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; is required in this example. For more information, see &lt;a href=&quot;structural-directives&quot;&gt;Structural Directives&lt;/a&gt;.</source>
          <target state="translated">이 예에서는 &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; 앞의 (*) 가 필요합니다. 자세한 내용은 &lt;a href=&quot;structural-directives&quot;&gt;구조 지시문을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="2eeefeb9f39958efc7cb49ff902890458efed5d3" translate="yes" xml:space="preserve">
          <source>The (*) before &lt;code&gt;&lt;a href=&quot;../api/common/ngswitchcase&quot;&gt;ngSwitchCase&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/common/ngswitchdefault&quot;&gt;ngSwitchDefault&lt;/a&gt;&lt;/code&gt; is required in this example.</source>
          <target state="translated">이 예에서는 &lt;code&gt;&lt;a href=&quot;../api/common/ngswitchcase&quot;&gt;ngSwitchCase&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;../api/common/ngswitchdefault&quot;&gt;ngSwitchDefault&lt;/a&gt;&lt;/code&gt; 앞의 (*) 가 필요합니다.</target>
        </trans-unit>
        <trans-unit id="79cf9ba3340b50f113c7f5c522857c8402ee3e8d" translate="yes" xml:space="preserve">
          <source>The 0-based index at which to insert the new view into this container. If not specified, appends the new view as the last entry.</source>
          <target state="translated">이 컨테이너에 새 뷰를 삽입 할 인덱스 (0부터 시작)입니다. 지정하지 않으면 새보기를 마지막 항목으로 추가합니다.</target>
        </trans-unit>
        <trans-unit id="64cb3c9ce2941cca665837b8c920ab81c42ebce7" translate="yes" xml:space="preserve">
          <source>The 0-based index at which to insert the view. If not specified, appends the new view as the last entry.</source>
          <target state="translated">뷰를 삽입 할 인덱스 (0부터 시작)입니다. 지정하지 않으면 새보기를 마지막 항목으로 추가합니다.</target>
        </trans-unit>
        <trans-unit id="9616203d2c83fbac5cabbb36c7f2845d852155d7" translate="yes" xml:space="preserve">
          <source>The 0-based index of the view to destroy. If not specified, the last view in the container is removed.</source>
          <target state="translated">삭제할 뷰의 인덱스 (0 기반)입니다. 지정하지 않으면 컨테이너의 마지막보기가 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="b9fbb1d1b433e68cf1c7c1b6321eecebf8ac3993" translate="yes" xml:space="preserve">
          <source>The 0-based index of the view to detach. If not specified, the last view in the container is detached.</source>
          <target state="translated">분리 할 뷰의 0 기반 인덱스입니다. 지정하지 않으면 컨테이너의 마지막보기가 분리됩니다.</target>
        </trans-unit>
        <trans-unit id="c5fb1f0cba49a032643a41c63159622cd0d6fc49" translate="yes" xml:space="preserve">
          <source>The 0-based index of the view to retrieve.</source>
          <target state="translated">검색 할보기의 0 기반 색인입니다.</target>
        </trans-unit>
        <trans-unit id="5e66a0e6fb18ae6b407f336df6eccb9c647f8d95" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../guide/glossary#injector&quot;&gt;dependency injector&lt;/a&gt; for this component instance.</source>
          <target state="translated">이 컴포넌트 인스턴스 의 &lt;a href=&quot;../../guide/glossary#injector&quot;&gt;종속성 인젝터&lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="cca3012370d419e31b6d75cf098ab8e4d8294696" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../guide/glossary#injector&quot;&gt;dependency injector&lt;/a&gt; for this view container.</source>
          <target state="translated">이 뷰 컨테이너 의 &lt;a href=&quot;../../guide/glossary#injector&quot;&gt;의존성 인젝터&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="3a9d663e80b981cfdfa0a3ab710f96c7ea6bc4a5" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../guide/glossary#view-tree&quot;&gt;host view&lt;/a&gt; defined by the template for this component instance.</source>
          <target state="translated">&lt;a href=&quot;../../guide/glossary#view-tree&quot;&gt;호스트 뷰&lt;/a&gt; 이 구성 요소 인스턴스의 템플릿에 의해 정의.</target>
        </trans-unit>
        <trans-unit id="c1fca9b2eeb7fcdb4b750c3d77842055cb90ffb3" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/animations/animationoptions&quot;&gt;AnimationOptions&lt;/a&gt; interface in Angular animations enables you to create animations that you can reuse across different components.</source>
          <target state="translated">각도 애니메이션 의 &lt;a href=&quot;../api/animations/animationoptions&quot;&gt;AnimationOptions&lt;/a&gt; 인터페이스를 사용하면 여러 구성 요소에서 재사용 할 수있는 애니메이션을 만들 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4619e6447ab97a35a308e3e9c3efbfde9436b6a8" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/common/asyncpipe&quot;&gt;&lt;code&gt;AsyncPipe&lt;/code&gt;&lt;/a&gt; subscribes (and unsubscribes) for you automatically.</source>
          <target state="translated">&lt;a href=&quot;../api/common/asyncpipe&quot;&gt; &lt;code&gt;AsyncPipe&lt;/code&gt; 에&lt;/a&gt; 자동으로 당신을 위해 구독 (및 구독 취소).</target>
        </trans-unit>
        <trans-unit id="25ca1534cac8f8f9928b1c6bab67be9f0b8e9968" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/common/asyncpipe&quot;&gt;AsyncPipe&lt;/a&gt; subscribes to an observable or promise and returns the latest value it has emitted. When a new value is emitted, the pipe marks the component to be checked for changes.</source>
          <target state="translated">&lt;a href=&quot;../api/common/asyncpipe&quot;&gt;AsyncPipe의&lt;/a&gt; 이 방출 한 최신 값 관찰 또는 약속 반환에 등록합니다. 새 값이 방출되면 파이프는 변경 사항을 점검 할 구성 요소를 표시합니다.</target>
        </trans-unit>
        <trans-unit id="434328f2381c94483bc520c3c7a3f880f61ac182" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/common/jsonpipe&quot;&gt;JsonPipe&lt;/a&gt; provides an easy way to diagnose a mysteriously failing data binding or inspect an object for future binding.</source>
          <target state="translated">&lt;a href=&quot;../api/common/jsonpipe&quot;&gt;JsonPipe는&lt;/a&gt; 바인딩 신비 실패 데이터를 진단하고 미래 바인딩 개체를 검사 할 수있는 쉬운 방법을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="13e16a47435e26b6e827703b1b62df1ed890aeda" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/common/location&quot;&gt;&lt;code&gt;location&lt;/code&gt;&lt;/a&gt; is an Angular service for interacting with the browser. You'll use it &lt;a href=&quot;toh-pt5#goback&quot;&gt;later&lt;/a&gt; to navigate back to the view that navigated here.</source>
          <target state="translated">&lt;a href=&quot;../api/common/location&quot;&gt; &lt;code&gt;location&lt;/code&gt; &lt;/a&gt; 브라우저와 상호 작용하기위한 각도 서비스입니다. 당신은 그것을 사용합니다 &lt;a href=&quot;toh-pt5#goback&quot;&gt;나중에&lt;/a&gt; 여기 탐색하는보기로 이동 뒤로.</target>
        </trans-unit>
        <trans-unit id="63249ca017815dd12486b06a18f3fea91eecd138" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/common/ngforof&quot;&gt;&lt;code&gt;NgFor&lt;/code&gt; API guide&lt;/a&gt; describes additional &lt;code&gt;NgFor&lt;/code&gt; directive properties and context properties.</source>
          <target state="translated">&lt;a href=&quot;../api/common/ngforof&quot;&gt; &lt;code&gt;NgFor&lt;/code&gt; 의 API 가이드는&lt;/a&gt; 추가 설명 &lt;code&gt;NgFor&lt;/code&gt; 의 지시 속성과 컨텍스트 속성을.</target>
        </trans-unit>
        <trans-unit id="5061a2f16c724493f890befa083acedce10d0a0d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/core/testing/componentfixture&quot;&gt;ComponentFixture&lt;/a&gt; is a test harness for interacting with the created component and its corresponding element.</source>
          <target state="translated">&lt;a href=&quot;../api/core/testing/componentfixture&quot;&gt;ComponentFixture는&lt;/a&gt; 생성 요소와 대응하는 요소와 상호 작용하기위한 테스트 장치이다.</target>
        </trans-unit>
        <trans-unit id="01125ede2a72c7a023c0c79cf22dbdcb8a08e761" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/forms/ngformselectorwarning&quot;&gt;&lt;code&gt;NgFormSelectorWarning&lt;/code&gt;&lt;/a&gt; directive is solely used to display warnings when the deprecated &lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;ngForm&lt;/a&gt;&lt;/code&gt; selector is used.</source>
          <target state="translated">&lt;a href=&quot;../api/forms/ngformselectorwarning&quot;&gt; &lt;code&gt;NgFormSelectorWarning&lt;/code&gt; &lt;/a&gt; 되지 않는 경우 지시어는 오직 경고를 표시하는 데 사용됩니다 &lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;ngForm&lt;/a&gt;&lt;/code&gt; 의 선택이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="fc13089d19feff72cbef3b960dd6ca15d44a7b22" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/router/activatedroute&quot;&gt;&lt;code&gt;ActivatedRoute&lt;/code&gt;&lt;/a&gt; holds information about the route to this instance of the &lt;code&gt;HeroDetailComponent&lt;/code&gt;. This component is interested in the route's parameters extracted from the URL. The &quot;id&quot; parameter is the &lt;code&gt;id&lt;/code&gt; of the hero to display.</source>
          <target state="translated">&lt;a href=&quot;../api/router/activatedroute&quot;&gt; &lt;code&gt;ActivatedRoute&lt;/code&gt; 은&lt;/a&gt; 의이 인스턴스에 대한 경로에 대한 정보 보유 &lt;code&gt;HeroDetailComponent&lt;/code&gt; 를 . 이 구성 요소는 URL에서 추출 된 경로의 매개 변수에 관심이 있습니다. &quot;id&quot;매개 변수는 표시 할 영웅 의 &lt;code&gt;id&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="94a856463bc03963a039b172b04033375f6ce5d7" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt; is an injected router service that makes use of observables to get information about a route path and parameters. For example, &lt;code&gt;ActivateRoute.url&lt;/code&gt; contains an observable that reports the route path or paths. Here's an example:</source>
          <target state="translated">&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute는&lt;/a&gt; 차종이 라우팅 경로 및 매개 변수에 대한 정보를 얻기 위해 사용하는 관찰 가능한의 주입 된 라우터 서비스이다. 예를 들어 &lt;code&gt;ActivateRoute.url&lt;/code&gt; 에는 경로 경로를보고하는 관찰 가능 개체가 포함되어 있습니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="62420df0957330734448927a844114ed73ad730f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../common/platformlocation&quot;&gt;&lt;code&gt;PlatformLocation&lt;/code&gt;&lt;/a&gt; providers that should be added when the &lt;a href=&quot;../common/location&quot;&gt;&lt;code&gt;Location&lt;/code&gt;&lt;/a&gt; is used in a worker context.</source>
          <target state="translated">&lt;a href=&quot;../common/location&quot;&gt; &lt;code&gt;Location&lt;/code&gt; &lt;/a&gt; 가 작업자 컨텍스트에서 사용될 때 추가되어야 하는 &lt;a href=&quot;../common/platformlocation&quot;&gt; &lt;code&gt;PlatformLocation&lt;/code&gt; &lt;/a&gt; 제공자입니다 .</target>
        </trans-unit>
        <trans-unit id="692c832c00b68e76def217cb437b093b42460681" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../guide/glossary/index#di-token&quot;&gt;DI token&lt;/a&gt; for a router configuration.</source>
          <target state="translated">&lt;a href=&quot;../guide/glossary/index#di-token&quot;&gt;토큰 DI&lt;/a&gt; 라우터 구성.</target>
        </trans-unit>
        <trans-unit id="a5b5f0bd73969076e99683691442f0e883b4d411" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../guide/template-syntax#ngFor&quot;&gt;&lt;code&gt;*ngFor&lt;/code&gt;&lt;/a&gt; is Angular's &lt;em&gt;repeater&lt;/em&gt; directive. It repeats the host element for each element in a list.</source>
          <target state="translated">&lt;a href=&quot;../guide/template-syntax#ngFor&quot;&gt; &lt;code&gt;*ngFor&lt;/code&gt; 는&lt;/a&gt; 각도의입니다 &lt;em&gt;중계기&lt;/em&gt; 지시어. 목록의 각 요소에 대해 호스트 요소를 반복합니다.</target>
        </trans-unit>
        <trans-unit id="44d0769a18e136933991f4231b7cee526e0c337d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;cli&quot;&gt;Angular CLI&lt;/a&gt; can generate a new &lt;code&gt;HeroService&lt;/code&gt; class in the &lt;code&gt;src/app/heroes&lt;/code&gt; folder with this command.</source>
          <target state="translated">&lt;a href=&quot;cli&quot;&gt;각도 CLI는&lt;/a&gt; 새로 생성 할 수 있습니다 &lt;code&gt;HeroService&lt;/code&gt; 의 의 클래스 &lt;code&gt;src/app/heroes&lt;/code&gt; 이 명령을 사용하여 폴더.</target>
        </trans-unit>
        <trans-unit id="85c2a8f734f521cd885970594379f4f530c76b78" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;cli&quot;&gt;Angular CLI&lt;/a&gt; generates the following basic &lt;code&gt;AppModule&lt;/code&gt; when creating a new app.</source>
          <target state="translated">&lt;a href=&quot;cli&quot;&gt;각도 CLI는&lt;/a&gt; 다음과 같은 기본 생성 &lt;code&gt;AppModule&lt;/code&gt; 을 새로운 응용 프로그램을 만들 때.</target>
        </trans-unit>
        <trans-unit id="bc67777d512b5dac31422e8bb3c4a7dc2b7d55df" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;cli&quot;&gt;Angular CLI&lt;/a&gt; is a command-line tool for managing the Angular development cycle. Use it to create the initial filesystem scaffolding for a &lt;a href=&quot;glossary#workspace&quot;&gt;workspace&lt;/a&gt; or &lt;a href=&quot;glossary#project&quot;&gt;project&lt;/a&gt;, and to run &lt;a href=&quot;glossary#schematic&quot;&gt;schematics&lt;/a&gt; that add and modify code for initial generic versions of various elements. The CLI supports all stages of the development cycle, including building, testing, bundling, and deployment.</source>
          <target state="translated">&lt;a href=&quot;cli&quot;&gt;각도 CLI는&lt;/a&gt; 각 개발주기를 관리하기위한 명령 줄 도구입니다. 이를 사용하여 &lt;a href=&quot;glossary#workspace&quot;&gt;작업 공간&lt;/a&gt; 또는 &lt;a href=&quot;glossary#project&quot;&gt;프로젝트에&lt;/a&gt; 대한 초기 파일 시스템 스캐 폴딩을 작성하고 다양한 요소의 초기 일반 버전에 대한 코드를 추가하고 수정 하는 &lt;a href=&quot;glossary#schematic&quot;&gt;회로도&lt;/a&gt; 를 실행 하십시오. CLI는 빌드, 테스트, 번들링 및 배포를 포함하여 개발주기의 모든 단계를 지원합니다.</target>
        </trans-unit>
        <trans-unit id="53c454c6660fa02027dfe2117f75d263dd75f716" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;cli&quot;&gt;Angular CLI&lt;/a&gt; provides support for polyfills. If you are not using the CLI to create your projects, see &lt;a href=&quot;browser-support#non-cli&quot;&gt;Polyfill instructions for non-CLI users&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;cli&quot;&gt;각도 CLI는&lt;/a&gt; polyfills에 대한 지원을 제공합니다. CLI를 사용하여 프로젝트를 작성하지 않는 경우 CLI가 &lt;a href=&quot;browser-support#non-cli&quot;&gt;아닌 사용자를위한 Polyfill 지침을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="b8bc93b8439f0639488ee5e20edda32b14cbf6ad" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;cli/run&quot;&gt;CLI command &lt;code&gt;ng run&lt;/code&gt;&lt;/a&gt; invokes a builder with a specific &lt;a href=&quot;glossary#target&quot;&gt;target configuration&lt;/a&gt;. The &lt;a href=&quot;workspace-config&quot;&gt;workspace configuration&lt;/a&gt; file, &lt;code&gt;angular.json&lt;/code&gt;, contains default configurations for built-in builders.</source>
          <target state="translated">&lt;a href=&quot;cli/run&quot;&gt;CLI 명령 &lt;code&gt;ng run&lt;/code&gt; &lt;/a&gt; 특정의 작성기 호출 &lt;a href=&quot;glossary#target&quot;&gt;대상 구성&lt;/a&gt; . &lt;a href=&quot;workspace-config&quot;&gt;작업 공간 구성&lt;/a&gt; 파일 &lt;code&gt;angular.json&lt;/code&gt; , 내장에있는 빌더에 대한 기본 설정이 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="05d9831a7b65afdb6e46ec21735bf7261c84bb9d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;common/platformlocation&quot;&gt;&lt;code&gt;PlatformLocation&lt;/code&gt;&lt;/a&gt; providers that should be added when the &lt;a href=&quot;common/location&quot;&gt;&lt;code&gt;Location&lt;/code&gt;&lt;/a&gt; is used in a worker context.</source>
          <target state="translated">&lt;a href=&quot;common/location&quot;&gt; &lt;code&gt;Location&lt;/code&gt; &lt;/a&gt; 가 작업자 컨텍스트에서 사용될 때 추가되어야 하는 &lt;a href=&quot;common/platformlocation&quot;&gt; &lt;code&gt;PlatformLocation&lt;/code&gt; &lt;/a&gt; 제공자입니다 .</target>
        </trans-unit>
        <trans-unit id="98107507289185f8873753970de1dfd7b6bad5b9" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;glossary#aot&quot;&gt;AOT compiler&lt;/a&gt; is part of a build process that produces a small, fast, ready-to-run application package, typically for production.</source>
          <target state="translated">&lt;a href=&quot;glossary#aot&quot;&gt;AOT 컴파일러는&lt;/a&gt; 일반적으로 생산, 소형, 고속, 바로이 운영하는 응용 프로그램 패키지를 생산하는 빌드 프로세스의 일부입니다.</target>
        </trans-unit>
        <trans-unit id="9c919d8f163d548522d373c5c6512d9de4f837b6" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;glossary#cli&quot;&gt;Angular CLI&lt;/a&gt; uses schematics to generate and modify &lt;a href=&quot;glossary#project&quot;&gt;Angular projects&lt;/a&gt; and parts of projects.</source>
          <target state="translated">&lt;a href=&quot;glossary#cli&quot;&gt;각도 CLI는&lt;/a&gt; 생성하고 수정하는 회로도를 사용하여 &lt;a href=&quot;glossary#project&quot;&gt;각도 프로젝트&lt;/a&gt; 및 프로젝트의 일부를.</target>
        </trans-unit>
        <trans-unit id="5e080e6d0c2bf1f3b9d47f8c9e27b3be01bc9faa" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;glossary#cli&quot;&gt;CLI&lt;/a&gt;&lt;a href=&quot;cli/new&quot;&gt;&lt;code&gt;ng new&lt;/code&gt; command&lt;/a&gt; creates a file system directory (the &quot;workspace root&quot;). In the workspace root, it also creates the workspace &lt;a href=&quot;glossary#configuration&quot;&gt;configuration file&lt;/a&gt; (&lt;code&gt;angular.json&lt;/code&gt;) and, by default, an initial application project with the same name.</source>
          <target state="translated">&lt;a href=&quot;glossary#cli&quot;&gt;CLI &lt;/a&gt;&lt;a href=&quot;cli/new&quot;&gt; &lt;code&gt;ng new&lt;/code&gt; 명령은&lt;/a&gt; 파일 시스템 디렉토리 ( &quot;작업 공간 루트&quot;)를 생성한다. 작업 공간 루트에서 작업 공간 &lt;a href=&quot;glossary#configuration&quot;&gt;구성 파일&lt;/a&gt; ( &lt;code&gt;angular.json&lt;/code&gt; )과 기본적으로 동일한 이름의 초기 애플리케이션 프로젝트를 작성합니다.</target>
        </trans-unit>
        <trans-unit id="3e06550cbd83b66c246b5afad89f993ba760a306" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;glossary#jit&quot;&gt;JITcompiler&lt;/a&gt; compiles your app in the browser as the app loads. To support translation with the JIT compiler, you must do the following:</source>
          <target state="translated">&lt;a href=&quot;glossary#jit&quot;&gt;JITcompiler는&lt;/a&gt; 응용 프로그램로드와 같은 브라우저에서 응용 프로그램을 컴파일합니다. JIT 컴파일러로 변환을 지원하려면 다음을 수행해야합니다.</target>
        </trans-unit>
        <trans-unit id="4380b18e380108bb934a12302c8ada614bb694c6" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;glossary#router&quot;&gt;router&lt;/a&gt; makes use of lazy loading to load child views only when the parent view is activated. Similarly, you can build custom elements that can be loaded into an Angular app when needed.</source>
          <target state="translated">&lt;a href=&quot;glossary#router&quot;&gt;라우터&lt;/a&gt; 차종은 부모 뷰가 활성화되어있는 경우에만 부하 아이 뷰에 지연로드의 사용합니다. 마찬가지로 필요할 때 Angular 앱에로드 할 수있는 사용자 지정 요소를 만들 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0b1fe491d63ab7232b2eb74a097869b0b4d9d4d4" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http#rxjs&quot;&gt;RxJS library&lt;/a&gt; offers several &lt;em&gt;retry&lt;/em&gt; operators that are worth exploring. The simplest is called &lt;code&gt;retry()&lt;/code&gt; and it automatically re-subscribes to a failed &lt;code&gt;Observable&lt;/code&gt; a specified number of times. &lt;em&gt;Re-subscribing&lt;/em&gt; to the result of an &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; method call has the effect of reissuing the HTTP request.</source>
          <target state="translated">&lt;a href=&quot;http#rxjs&quot;&gt;RxJS 라이브러리&lt;/a&gt; 이벤트를 여러 &lt;em&gt;재시도&lt;/em&gt; 가치 모색하고 있습니다 사업자. 가장 간단한 방법은 &lt;code&gt;retry()&lt;/code&gt; 이며 실패한 &lt;code&gt;Observable&lt;/code&gt; 에 지정된 횟수만큼 자동으로 다시 구독합니다 . &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; 메소드 호출 결과를 &lt;em&gt;다시 구독&lt;/em&gt; 하면 HTTP 요청을 다시 발행하는 효과가 있습니다.</target>
        </trans-unit>
        <trans-unit id="9137609ba3ac5720c2b2e7ec5b9d022983893e76" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://reactivex.io/documentation/operators/defer.html&quot;&gt;RxJS &lt;code&gt;defer()&lt;/code&gt; operator&lt;/a&gt; returns an observable. It takes a factory function that returns either a promise or an observable. When something subscribes to &lt;em&gt;defer&lt;/em&gt;'s observable, it adds the subscriber to a new observable created with that factory.</source>
          <target state="translated">&lt;a href=&quot;http://reactivex.io/documentation/operators/defer.html&quot;&gt;RxJS는 &lt;code&gt;defer()&lt;/code&gt; 운영자&lt;/a&gt; 반환 관찰합니다. 약속 또는 관찰 가능 항목을 반환하는 팩토리 함수가 필요합니다. 뭔가 구독을 할 때 &lt;em&gt;연기&lt;/em&gt; 의 관찰, 그 공장에서 만든 새 관찰에 가입자를 추가합니다.</target>
        </trans-unit>
        <trans-unit id="2142d5fddf90916e933e41b73188b155d3c2310d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://angular.io/cli/config&quot;&gt;ng config&lt;/a&gt; command lets you set and retrieve configuration values from the command line, or you can edit the &lt;code&gt;angular.json&lt;/code&gt; file directly. Note that option names in the configuration file must use &lt;a href=&quot;guide/glossary#case-types&quot;&gt;camelCase&lt;/a&gt;, while option names supplied to commands can use either camelCase or dash-case.</source>
          <target state="translated">&lt;a href=&quot;https://angular.io/cli/config&quot;&gt;ng를 구성&lt;/a&gt; 명령을 설정하고 명령 줄에서 구성 값을 검색하거나, 사용자가 편집 할 수 있습니다 &lt;code&gt;angular.json&lt;/code&gt; 의 직접 파일을. 구성 파일의 옵션 이름은 &lt;a href=&quot;guide/glossary#case-types&quot;&gt;camelCase&lt;/a&gt; 를 사용해야 하지만 명령에 제공된 옵션 이름은 camelCase 또는 대소 문자를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9cc4f900dedfc14aac5069c4089743ff6b85cb0f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://angular.io/cli/generate&quot;&gt;ng generate&lt;/a&gt; and &lt;a href=&quot;https://angular.io/cli/add&quot;&gt;ng add&lt;/a&gt; commands take as an argument the artifact or library to be generated or added to the current project. In addition to any general options, each artifact or library defines its own options in a &lt;em&gt;schematic&lt;/em&gt;. Schematic options are supplied to the command in the same format as immediate command options.</source>
          <target state="translated">는 &lt;a href=&quot;https://angular.io/cli/generate&quot;&gt;생성 NG&lt;/a&gt; 와 &lt;a href=&quot;https://angular.io/cli/add&quot;&gt;겨 추가&lt;/a&gt; 명령은 이슈 또는 라이브러리를 생성하거나 현재 프로젝트에 추가 할 인수로 가라. 일반적인 옵션 외에도 각 아티팩트 또는 라이브러리는 &lt;em&gt;회로도&lt;/em&gt; 에서 자체 옵션을 정의합니다 . 회로도 옵션은 즉시 명령 옵션과 같은 형식으로 명령에 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="c4ec4eb8426875bd373f4cb3f235396c3c74c24b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://angular.io/cli/new&quot;&gt;ng new&lt;/a&gt; command creates an &lt;em&gt;Angular workspace&lt;/em&gt; folder and generates a new app skeleton. A workspace can contain multiple apps and libraries. The initial app created by the &lt;a href=&quot;https://angular.io/cli/new&quot;&gt;ng new&lt;/a&gt; command is at the top level of the workspace. When you generate an additional app or library in a workspace, it goes into a &lt;code&gt;projects/&lt;/code&gt; subfolder.</source>
          <target state="translated">&lt;a href=&quot;https://angular.io/cli/new&quot;&gt;겨 새로운&lt;/a&gt; 명령이 생성 &lt;em&gt;각도 작업 공간&lt;/em&gt; 폴더를 새로운 응용 프로그램의 골격을 생성합니다. 작업 공간에는 여러 앱 및 라이브러리가 포함될 수 있습니다. &lt;a href=&quot;https://angular.io/cli/new&quot;&gt;ng new&lt;/a&gt; 명령으로 작성된 초기 앱 은 작업 공간의 최상위 레벨에 있습니다. 작업 공간에서 추가 앱 또는 라이브러리를 생성하면 &lt;code&gt;projects/&lt;/code&gt; 하위 폴더로 이동합니다.</target>
        </trans-unit>
        <trans-unit id="eef7029863bcbf19c4ab8578f83e597970534753" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/:not&quot;&gt;&lt;code&gt;:not&lt;/code&gt; pseudo-class&lt;/a&gt; in &lt;code&gt;By.css('h2:not([highlight])')&lt;/code&gt; helps find &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; elements that &lt;em&gt;do not&lt;/em&gt; have the directive. &lt;code&gt;By.css('*:not([highlight])')&lt;/code&gt; finds &lt;em&gt;any&lt;/em&gt; element that does not have the directive.</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/:not&quot;&gt; &lt;code&gt;:not&lt;/code&gt; 의사 클래스&lt;/a&gt; 에서 &lt;code&gt;By.css('h2:not([highlight])')&lt;/code&gt; 찾을 수 있도록 도와줍니다 &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; 요소 &lt;em&gt;하지 않는&lt;/em&gt; 지시어를 가지고 있습니다. &lt;code&gt;By.css('*:not([highlight])')&lt;/code&gt; 발견 &lt;em&gt;어떤&lt;/em&gt; 지시어가없는 요소.</target>
        </trans-unit>
        <trans-unit id="67db0ba49bc8041f182dbf0749b95273e0b85a5b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/Type_selectors&quot;&gt;CSS element selector&lt;/a&gt;, &lt;code&gt;'app-heroes'&lt;/code&gt;, matches the name of the HTML element that identifies this component within a parent component's template.</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/Type_selectors&quot;&gt;CSS 요소 선택&lt;/a&gt; , &lt;code&gt;'app-heroes'&lt;/code&gt; , HTML 요소의 이름과 일치하는 부모 구성 요소의 템플릿 내에서 식별이 구성 요소가.</target>
        </trans-unit>
        <trans-unit id="3f5616648fe04a251f0e70271a427c668c007e56" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://developers.google.com/web/tools/chrome-devtools/network-performance/understanding-resource-timing&quot;&gt; Chrome DevTools Network Performance page&lt;/a&gt; is a good place to start learning about measuring performance.</source>
          <target state="translated">&lt;a href=&quot;https://developers.google.com/web/tools/chrome-devtools/network-performance/understanding-resource-timing&quot;&gt;크롬 DevTools로 네트워크 성능 페이지&lt;/a&gt; 성능을 측정에 대한 학습을 시작하기에 좋은 장소입니다.</target>
        </trans-unit>
        <trans-unit id="43ba57fe4131496568fba480d9c4deb2e30cf2b9" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://docs.npmjs.com/getting-started/what-is-npm&quot;&gt;npm package manager&lt;/a&gt; is used to distribute and load Angular modules and libraries.</source>
          <target state="translated">&lt;a href=&quot;https://docs.npmjs.com/getting-started/what-is-npm&quot;&gt;NPM 패키지 관리자는&lt;/a&gt; 배포 및 각도 모듈과 라이브러리를로드하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="ac72c33ceb0a0c850781b84bc6144a1744f50498" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://en.wikipedia.org/wiki/ECMAScript&quot;&gt;official JavaScript language specification&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://en.wikipedia.org/wiki/ECMAScript&quot;&gt;공식 자바 스크립트 언어 사양&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="ac53f3cd4e4f6d59ebf10978a8ce8de90ae0e6a6" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://en.wikipedia.org/wiki/ISO_4217&quot;&gt;ISO 4217&lt;/a&gt; currency code, such as &lt;code&gt;USD&lt;/code&gt; for the US dollar and &lt;code&gt;EUR&lt;/code&gt; for the euro.</source>
          <target state="translated">&lt;a href=&quot;https://en.wikipedia.org/wiki/ISO_4217&quot;&gt;ISO 4217&lt;/a&gt; 과 같은 통화 코드, &lt;code&gt;USD&lt;/code&gt; 미국 달러에 대한 &lt;code&gt;EUR&lt;/code&gt; 유로합니다.</target>
        </trans-unit>
        <trans-unit id="385f6cc4dec76396876f06188f4cfe7a64f563f4" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://en.wikipedia.org/wiki/ISO_4217&quot;&gt;ISO 4217&lt;/a&gt; currency code, such as &lt;code&gt;USD&lt;/code&gt; for the US dollar and &lt;code&gt;EUR&lt;/code&gt; for the euro. Used to determine the number of digits in the decimal part.</source>
          <target state="translated">&lt;a href=&quot;https://en.wikipedia.org/wiki/ISO_4217&quot;&gt;ISO 4217&lt;/a&gt; 과 같은 통화 코드, &lt;code&gt;USD&lt;/code&gt; 미국 달러에 대한 &lt;code&gt;EUR&lt;/code&gt; 유로합니다. 소수점 이하 자릿수를 결정하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="c7822350707f34166034f9e5cf47f46ca41913fb" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/angular/angular/blob/master/aio/README.md&quot;&gt;aio/README.md&lt;/a&gt; explains how to install and use the tools to edit and test your changes.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/angular/angular/blob/master/aio/README.md&quot;&gt;AIO는 / README.md을&lt;/a&gt; 설치하고 편집 할 수있는 도구를 사용하여 변경 사항을 테스트하는 방법에 대해 설명합니다.</target>
        </trans-unit>
        <trans-unit id="cc21ed5107cd6c26d897a6320dc42ef7186143fb" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/danvk/source-map-explorer/blob/master/README.md&quot;&gt;source-map-explorer&lt;/a&gt; tool is a great way to inspect the generated JavaScript bundles after a production build.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/danvk/source-map-explorer/blob/master/README.md&quot;&gt;소스 -지도 - 탐색기&lt;/a&gt; 도구는 생산 빌드 후 생성 된 자바 스크립트 번들을 검사 할 수있는 좋은 방법입니다.</target>
        </trans-unit>
        <trans-unit id="64a5e24960a46bfcb09f65cc4c7ba6207874f001" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/johnpapa/angular-styleguide/blob/master/a1/README.md&quot;&gt;AngularJS Style Guide&lt;/a&gt; collects patterns and practices that have been proven to result in cleaner and more maintainable AngularJS applications. It contains a wealth of information about how to write and organize AngularJS code - and equally importantly - how &lt;strong&gt;not&lt;/strong&gt; to write and organize AngularJS code.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/johnpapa/angular-styleguide/blob/master/a1/README.md&quot;&gt;AngularJS와 스타일 가이드는&lt;/a&gt; 패턴과 깨끗하고 유지 보수 AngularJS와 응용 프로그램에서 결과에 입증 된 사례를 수집합니다. 여기에는 AngularJS 코드 를 작성 및 구성 하는 방법과 마찬가지로 AngularJS 코드 를 작성 및 구성 &lt;strong&gt;하지 않는&lt;/strong&gt; 방법에 대한 풍부한 정보가 포함되어 있습니다 .</target>
        </trans-unit>
        <trans-unit id="698e33b75bcc5c76bbf260a0e698ed7db2e2c779" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/johnpapa/angular-styleguide/blob/master/a1/README.md#folders-by-feature-structure&quot;&gt;Folders-by-Feature Structure&lt;/a&gt; and &lt;a href=&quot;https://github.com/johnpapa/angular-styleguide/blob/master/a1/README.md#modularity&quot;&gt;Modularity&lt;/a&gt; rules define similar principles on a higher level of abstraction: Different parts of the application should reside in different directories and NgModules.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/johnpapa/angular-styleguide/blob/master/a1/README.md#folders-by-feature-structure&quot;&gt;폴더 별 기능 구조&lt;/a&gt; 및 &lt;a href=&quot;https://github.com/johnpapa/angular-styleguide/blob/master/a1/README.md#modularity&quot;&gt;모듈화&lt;/a&gt; 다른 디렉토리 및 NgModules에 상주해야하는 응용 프로그램의 다른 부분 : 규칙은 높은 수준의 추상화에 유사한 원칙을 정의합니다.</target>
        </trans-unit>
        <trans-unit id="1eaf3159835bb387f70ff080a284feaacf450754" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/johnpapa/angular-styleguide/blob/master/a1/README.md#single-responsibility&quot;&gt;Rule of 1&lt;/a&gt; states that there should be one component per file. This not only makes components easy to navigate and find, but will also allow us to migrate them between languages and frameworks one at a time. In this example application, each controller, component, service, and filter is in its own source file.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/johnpapa/angular-styleguide/blob/master/a1/README.md#single-responsibility&quot;&gt;1&lt;/a&gt; 의 규칙은 파일 당 하나의 구성 요소가 있어야 함을 나타냅니다. 이를 통해 구성 요소를 쉽게 탐색하고 찾을 수있을뿐만 아니라 언어와 프레임 워크간에 한 번에 하나씩 마이그레이션 할 수 있습니다. 이 예제 응용 프로그램에서 각 컨트롤러, 구성 요소, 서비스 및 필터는 자체 소스 파일에 있습니다.</target>
        </trans-unit>
        <trans-unit id="50920f3757c6270704876b419b74fac4803e437f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://material.angular.io/&quot;&gt;Angular Material&lt;/a&gt; library, which is maintained by the Angular team, is a suite of reusable UI components that aims to be fully accessible. The &lt;a href=&quot;https://material.angular.io/cdk/categories&quot;&gt;Component Development Kit (CDK)&lt;/a&gt; includes the &lt;code&gt;a11y&lt;/code&gt; package that provides tools to support various areas of accessibility. For example:</source>
          <target state="translated">&lt;a href=&quot;https://material.angular.io/&quot;&gt;각도 재질&lt;/a&gt; 각 팀에 의해 유지되는 라이브러리는, 목적이 완전히 접근 할 수 있음을 재사용 가능한 UI 구성 요소의 모음입니다. &lt;a href=&quot;https://material.angular.io/cdk/categories&quot;&gt;구성 요소 개발 키트 (CDK)는&lt;/a&gt; 포함 &lt;code&gt;a11y&lt;/code&gt; 의 접근성의 다양한 분야를 지원하는 도구를 제공합니다 패키지. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="2368773fec7fbf22cc5ca45d72df2fac8cec9aea" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://www.npmjs.com/package/@types/angular&quot;&gt;AngularJS 1.x type definitions&lt;/a&gt; you installed are not officially maintained by the Angular team, but are quite comprehensive. It is possible to make an AngularJS 1.x application fully type-annotated with the help of these definitions.</source>
          <target state="translated">설치 한 &lt;a href=&quot;https://www.npmjs.com/package/@types/angular&quot;&gt;AngularJS 1.x 유형 정의&lt;/a&gt; 는 Angular 팀이 공식적으로 관리하지 않지만 매우 포괄적입니다. 이러한 정의를 통해 AngularJS 1.x 애플리케이션을 완전히 주석을 달 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="df8b0b589273f8464eedbabbe41632c3bb97724d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://www.webpagetest.org/&quot;&gt;WebPageTest&lt;/a&gt; tool is another good choice that can also help verify that your deployment was successful.</source>
          <target state="translated">&lt;a href=&quot;https://www.webpagetest.org/&quot;&gt;WebPageTest&lt;/a&gt; 도구는 배포가 성공적으로 완료되었는지 확인하는 데 도움 또 다른 좋은 선택입니다.</target>
        </trans-unit>
        <trans-unit id="dd5702047983a31430a247a80e4531d5efed5bf6" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;language-service&quot;&gt;Angular language service&lt;/a&gt; analyzes component templates and provides type and error information that TypeScript-aware editors can use to improve the developer's experience. For example, see the &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=Angular.ng-template&quot;&gt;Angular language service extension for VS Code&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;language-service&quot;&gt;각도 언어 서비스&lt;/a&gt; 구성 요소 템플릿을 분석하고 타이프 라이터 인식 편집자는 개발자의 경험을 개선하는 데 사용할 수있는 유형 및 오류 정보를 제공합니다. 예를 들어, &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=Angular.ng-template&quot;&gt;VS Code 용 Angular language service extension을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="c536f9cf54af98d090a383c28c9f1b8859ffc4c0" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;ngmodule-faq#q-angular-compiler&quot;&gt;Angular compiler&lt;/a&gt; looks inside component templates for other components, directives, and pipes. When it finds one, that's a template reference.</source>
          <target state="translated">&lt;a href=&quot;ngmodule-faq#q-angular-compiler&quot;&gt;각도 컴파일러는&lt;/a&gt; 다른 구성 요소, 지침 및 파이프 구성 요소 템플릿 내부 보인다. 하나를 찾으면 템플릿 참조입니다.</target>
        </trans-unit>
        <trans-unit id="cb28f6b5f83114401b60f2c14cb2d1105c66e707" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;router#route-parameters&quot;&gt;Router&lt;/a&gt; guide covers &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute#paramMap&quot;&gt;ActivatedRoute.paramMap&lt;/a&gt;&lt;/code&gt; in more detail.</source>
          <target state="translated">&lt;a href=&quot;router#route-parameters&quot;&gt;라우터&lt;/a&gt; 가이드 커버 &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute#paramMap&quot;&gt;ActivatedRoute.paramMap&lt;/a&gt;&lt;/code&gt; 더 자세히.</target>
        </trans-unit>
        <trans-unit id="b3312268095b08aee685e29f5fcc7dcf523b79e0" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;structural-directives#ngFor&quot;&gt;&lt;code&gt;NgFor&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;structural-directives#ngSwitch&quot;&gt;&lt;code&gt;NgSwitch...&lt;/code&gt;&lt;/a&gt; directives follow the same pattern.</source>
          <target state="translated">&lt;a href=&quot;structural-directives#ngFor&quot;&gt; &lt;code&gt;NgFor&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;structural-directives#ngSwitch&quot;&gt; &lt;code&gt;NgSwitch...&lt;/code&gt; &lt;/a&gt; 지시어는 같은 패턴을 따른다.</target>
        </trans-unit>
        <trans-unit id="b6a97ff29bdea97643b100fb7e52172c9fc39e23" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;testing#feature-module-import&quot;&gt;previous test configuration&lt;/a&gt; replaces the real &lt;code&gt;HeroService&lt;/code&gt; with a &lt;code&gt;TestHeroService&lt;/code&gt; that intercepts server requests and fakes their responses.</source>
          <target state="translated">&lt;a href=&quot;testing#feature-module-import&quot;&gt;이전 테스트 구성은&lt;/a&gt; 실제 대체 &lt;code&gt;HeroService&lt;/code&gt; 를 로모그래퍼 &lt;code&gt;TestHeroService&lt;/code&gt; 차단 서버 할 것을 요청과 응답을 가짜.</target>
        </trans-unit>
        <trans-unit id="03ec5cd730c49c54a94a2e4b7faaf1ebb0e7e823" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;testing#routing-component&quot;&gt;discussion below&lt;/a&gt; covers testing components that require the router.</source>
          <target state="translated">&lt;a href=&quot;testing#routing-component&quot;&gt;아래 논의&lt;/a&gt; 라우터를 필요로 구성 요소를 테스트 커버.</target>
        </trans-unit>
        <trans-unit id="adf4fe467b8f5c7727686265229a15c837edbaa2" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;testing#tests-w-test-double&quot;&gt;&lt;em&gt;HeroDetailComponent&lt;/em&gt; tests&lt;/a&gt; in an earlier section demonstrate how &lt;code&gt;createComponent&lt;/code&gt; and &lt;code&gt;page&lt;/code&gt; keep the tests short and &lt;em&gt;on message&lt;/em&gt;. There are no distractions: no waiting for promises to resolve and no searching the DOM for element values to compare.</source>
          <target state="translated">이전 섹션 의 &lt;a href=&quot;testing#tests-w-test-double&quot;&gt;&lt;em&gt;HeroDetailComponent&lt;/em&gt; 테스트&lt;/a&gt; 는 &lt;code&gt;createComponent&lt;/code&gt; 및 &lt;code&gt;page&lt;/code&gt; 가 테스트를 짧고 &lt;em&gt;메시지로&lt;/em&gt; 유지하는 방법을 보여줍니다 . 방해 요소가 없습니다. 약속이 해결되기를 기다리지 않고 비교할 요소 값을 DOM에서 검색하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="5990c9bc12604596a4545a9863216ed43b448b8b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;toh-pt4&quot;&gt;&lt;code&gt;HeroService&lt;/code&gt;&lt;/a&gt; gets hero data from the remote server and this component will use it to get the hero-to-display.</source>
          <target state="translated">&lt;a href=&quot;toh-pt4&quot;&gt; &lt;code&gt;HeroService&lt;/code&gt; 은&lt;/a&gt; 원격 서버에서 영웅 데이터를 가져,이 구성 요소는 영웅에 디스플레이를 얻기 위해 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="5350e6643395322b14e7706197ffdb8056e64e58" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;tutorial&quot;&gt;Tour of Heroes tutorial&lt;/a&gt; is the foundation for this walkthrough.</source>
          <target state="translated">&lt;a href=&quot;tutorial&quot;&gt;영웅 튜토리얼의 투어는&lt;/a&gt; 이 연습의 기초입니다.</target>
        </trans-unit>
        <trans-unit id="316fba5018bee07b56bf00591644765f20e7866a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;upgrade#change-detection&quot;&gt;Change Detection&lt;/a&gt; section of &lt;a href=&quot;upgrade&quot;&gt;Upgrading from AngularJS&lt;/a&gt; only applies to apps that use &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt;. Though you handle change detection differently with &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt;, which is the focus of this guide, reading the &lt;a href=&quot;upgrade#change-detection&quot;&gt;Change Detection&lt;/a&gt; section provides helpful context for what follows.</source>
          <target state="translated">&lt;a href=&quot;upgrade&quot;&gt;AngularJS에서 업그레이드&lt;/a&gt; 의 &lt;a href=&quot;upgrade#change-detection&quot;&gt;변경 감지&lt;/a&gt; 섹션은 &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; 을 사용하는 앱에만 적용됩니다 . 이 안내서의 초점이되는 &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; ()을 사용 하여 변경 감지를 다르게 처리하지만 , &lt;a href=&quot;upgrade#change-detection&quot;&gt;변경 감지&lt;/a&gt; 섹션을 읽으면 다음에 대한 유용한 컨텍스트가 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="ef97b3d65e2c4444165b198673fd089f9dda953a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;workspace-config&quot;&gt;&lt;code&gt;angular.json&lt;/code&gt;&lt;/a&gt; file configures all projects in a &lt;a href=&quot;glossary#workspace&quot;&gt;workspace&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;workspace-config&quot;&gt; &lt;code&gt;angular.json&lt;/code&gt; 의&lt;/a&gt; 파일은 모든 프로젝트를 구성하는 &lt;a href=&quot;glossary#workspace&quot;&gt;작업 공간&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="c7ea24427c05bad52d78a47c4199fcf3ce050def" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;!&lt;/code&gt; prefix marks the pattern as being negative, meaning that only files that don't match the pattern will be included.</source>
          <target state="translated">&lt;code&gt;!&lt;/code&gt; 접두사는 패턴을 음수로 표시합니다. 이는 패턴과 일치하지 않는 파일 만 포함됨을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="61301904b5174ce43d2617b3dc5fe99400fa5df9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;#docplaster&lt;/code&gt; at the top is another bit of code snippet markup. It tells the processor how to join the fragments into a single snippet.</source>
          <target state="translated">상단 의 &lt;code&gt;#docplaster&lt;/code&gt; 는 또 다른 코드 스 니펫 마크 업입니다. 프로세서에 프래그먼트를 단일 스 니펫으로 결합하는 방법을 알려줍니다.</target>
        </trans-unit>
        <trans-unit id="fbad649456e004310378e45c2eabd90470f600a6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;#timer&lt;/code&gt; local variable is gone from the component metadata. Instead, bind the buttons to the parent component's own &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;stop&lt;/code&gt; methods and present the ticking seconds in an interpolation around the parent component's &lt;code&gt;seconds&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;#timer&lt;/code&gt; 로컬 변수는 구성 요소 메타 데이터에서 사라지고있다. 대신, 버튼을 부모 구성 요소의 고유 한 &lt;code&gt;start&lt;/code&gt; 및 &lt;code&gt;stop&lt;/code&gt; 방법에 바인딩하고 부모 구성 요소의 &lt;code&gt;seconds&lt;/code&gt; 방법을 중심으로 보간에 눈금을 표시합니다 .</target>
        </trans-unit>
        <trans-unit id="6f19dd2af8f997aeeaa2940384f71556312a3db5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$any()&lt;/code&gt; cast function also works with &lt;code&gt;this&lt;/code&gt; to allow access to undeclared members of the component.</source>
          <target state="translated">&lt;code&gt;$any()&lt;/code&gt; 캐스트 기능도 작동 &lt;code&gt;this&lt;/code&gt; 구성 요소의 선언되지 않은 멤버에 대한 액세스를 허용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bee6c20e056eff2c3bd8d36a0225478bb77d96a0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$any()&lt;/code&gt; cast function works anywhere in a binding expression where a method call is valid.</source>
          <target state="translated">&lt;code&gt;$any()&lt;/code&gt; 캐스트 기능은 메서드 호출이 유효한 바인딩 식 어디서나 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e59f595616973095579aee71daee6655f4b357cb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$any()&lt;/code&gt; type cast function</source>
          <target state="translated">&lt;code&gt;$any()&lt;/code&gt; 타입 캐스트 기능</target>
        </trans-unit>
        <trans-unit id="6e6759020b810407949d5836009ada40b0a64c38" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$event&lt;/code&gt; is now a specific &lt;code&gt;KeyboardEvent&lt;/code&gt;. Not all elements have a &lt;code&gt;value&lt;/code&gt; property so it casts &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkwithhref#target&quot;&gt;target&lt;/a&gt;&lt;/code&gt; to an input element. The &lt;code&gt;OnKey&lt;/code&gt; method more clearly expresses what it expects from the template and how it interprets the event.</source>
          <target state="translated">&lt;code&gt;$event&lt;/code&gt; 이제 특정의이다 &lt;code&gt;KeyboardEvent&lt;/code&gt; 입니다 . 모든 요소에 &lt;code&gt;value&lt;/code&gt; 속성이있는 것은 아니므로 &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkwithhref#target&quot;&gt;target&lt;/a&gt;&lt;/code&gt; 을 입력 요소로 캐스트 합니다. &lt;code&gt;OnKey&lt;/code&gt; 방법은 더 명확하게 템플릿에서 무엇을 기대하고 이벤트를 해석하는 방법을 표현한다.</target>
        </trans-unit>
        <trans-unit id="5af64ddd170cb432546c0bf2252c448f993a883b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$event&lt;/code&gt; variable can be used in outputs to gain access to the object that was emitted. In this case it will be the &lt;code&gt;Hero&lt;/code&gt; object, because that is what was passed to &lt;code&gt;this.deleted.emit()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$event&lt;/code&gt; 변수는 방출 된 객체에 액세스하기 위해 출력에 사용될 수있다. 이 경우 &lt;code&gt;Hero&lt;/code&gt; 객체가됩니다. &lt;code&gt;this.deleted.emit()&lt;/code&gt; 로 전달 되었기 때문입니다 .</target>
        </trans-unit>
        <trans-unit id="c908b77e7e21c8de968461c845115562a2330563" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$event&lt;/code&gt; variable contains the payload of the &lt;code&gt;SizerComponent.sizeChange&lt;/code&gt; event. Angular assigns the &lt;code&gt;$event&lt;/code&gt; value to the &lt;code&gt;AppComponent.fontSizePx&lt;/code&gt; when the user clicks the buttons.</source>
          <target state="translated">&lt;code&gt;$event&lt;/code&gt; 변수의 페이로드 포함 &lt;code&gt;SizerComponent.sizeChange&lt;/code&gt; 의 이벤트를. Angular 는 사용자가 버튼을 클릭 할 때 &lt;code&gt;$event&lt;/code&gt; 값을 &lt;code&gt;AppComponent.fontSizePx&lt;/code&gt; 에 할당 합니다.</target>
        </trans-unit>
        <trans-unit id="e927e8d8b89416fbc605ae8612e17fa394a698fc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$schema&lt;/code&gt; path is relative to the Angular Devkit collection schema.</source>
          <target state="translated">&lt;code&gt;$schema&lt;/code&gt; 경로는 각도 Devkit 수집 스키마를 기준으로합니다.</target>
        </trans-unit>
        <trans-unit id="9ee805ece33742d4de7f87a3da7383414135c5e6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$schema&lt;/code&gt; property specifies the schema that the CLI uses for validation.</source>
          <target state="translated">&lt;code&gt;$schema&lt;/code&gt; 속성은 검증을 위해 CLI를 사용하는 스키마를 지정합니다.</target>
        </trans-unit>
        <trans-unit id="f59b81aa69f3638da4cee040a2bbe32b8dae6d8c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt; here represents an instance of a template. Notice that each component has its own &lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">여기서 &lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt; 는 템플릿의 인스턴스를 나타냅니다. 각 구성 요소에는 자체 &lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt; 가 있습니다.</target>
        </trans-unit>
        <trans-unit id="41ef35abf6bdecb3d0d2f8c0b5756abff98e77f3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&amp;gt;&lt;/code&gt; container has an attribute directive that contains data about active routes and their states, based on the &lt;code&gt;data&lt;/code&gt; property that we set in the route configuration.</source>
          <target state="translated">&lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&amp;gt;&lt;/code&gt; 용기에 기초하여 활성 경로 및 그 상태에 대한 데이터를 포함하는 속성을 지정 갖는 &lt;code&gt;data&lt;/code&gt; 우리는 행 형상으로 설정하는 것이 속성.</target>
        </trans-unit>
        <trans-unit id="79e422d60ab9df0e430e6c9d9a891769e0dfc46a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&amp;gt;&lt;/code&gt; tells the router where to display routed views.</source>
          <target state="translated">&lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&amp;gt;&lt;/code&gt; 여기서 뷰 라우팅을 표시하는 라우터를 말한다.</target>
        </trans-unit>
        <trans-unit id="2e9c175f01fedfce94b31b57ef2e44a941e53e82" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; currently provides the &lt;code&gt;AnimalService&lt;/code&gt; in the &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; array with the value of 🐶 (puppy). Because the injector has only to look at the &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt;'s &lt;code&gt;ElementInjector&lt;/code&gt; for the &lt;code&gt;AnimalService&lt;/code&gt;, it never sees the 🐳 (whale).</source>
          <target state="translated">&lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; 현재 제공 &lt;code&gt;AnimalService&lt;/code&gt; 에 &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; 의 🐶 (강아지)의 값을 배열. 인젝터 만보고 있기 때문에 &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; 의 &lt;code&gt;ElementInjector&lt;/code&gt; 에 대한 &lt;code&gt;AnimalService&lt;/code&gt; 는 , 그것은 🐳 (고래)을 볼 수 없다.</target>
        </trans-unit>
        <trans-unit id="238522607dbec39c2b10c2b4a047546ae6e03124" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;app-hero-detail&amp;gt;&lt;/code&gt; tag in the example is an element that represents a new component, &lt;code&gt;HeroDetailComponent&lt;/code&gt;. &lt;code&gt;HeroDetailComponent&lt;/code&gt; (code not shown) defines the hero-detail child view of &lt;code&gt;HeroListComponent&lt;/code&gt;. Notice how custom components like this mix seamlessly with native HTML in the same layouts.</source>
          <target state="translated">예제 의 &lt;code&gt;&amp;lt;app-hero-detail&amp;gt;&lt;/code&gt; 태그는 새 구성 요소 &lt;code&gt;HeroDetailComponent&lt;/code&gt; 를 나타내는 요소입니다 . &lt;code&gt;HeroDetailComponent&lt;/code&gt; 은 (코드 도시하지 않음)의 영웅 상세 아이 뷰 정의 &lt;code&gt;HeroListComponent&lt;/code&gt; 을 . 이와 같은 사용자 지정 구성 요소가 동일한 레이아웃에서 기본 HTML과 완벽하게 혼합되는 방식에 주목하십시오.</target>
        </trans-unit>
        <trans-unit id="34fe98653d5a2333f28a36d168f80667c0dd14c2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;code-example&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;code-tabs&amp;gt;&lt;/code&gt; components won't display a source code file unless it has a &lt;em&gt;#docregion&lt;/em&gt;.</source>
          <target state="translated">&lt;code&gt;&amp;lt;code-example&amp;gt;&lt;/code&gt; 및 &lt;code&gt;&amp;lt;code-tabs&amp;gt;&lt;/code&gt; 그것이 가지고 있지 않는 구성 요소는 소스 코드 파일이 표시되지 &lt;em&gt;#docregion를&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="c67d48b1a68a7babea3a9a1684d08bd5c84499c7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; case binds the &lt;code&gt;HighlightDirective&lt;/code&gt; to the name of a color value in the input box. The initial value is the word &quot;cyan&quot; which should be the background color of the input box.</source>
          <target state="translated">&lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 의 경우는 결합 &lt;code&gt;HighlightDirective&lt;/code&gt; 를 입력 상자에서 색상 값의 이름. 초기 값은 단어 &quot;청록색&quot;이며 입력 상자의 배경색이어야합니다.</target>
        </trans-unit>
        <trans-unit id="e30b382cd0b284d5678988780f68af3033805fbb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; element carries the HTML validation attributes: &lt;code&gt;required&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/forms/minlengthvalidator&quot;&gt;minlength&lt;/a&gt;&lt;/code&gt;. It also carries a custom validator directive, &lt;code&gt;forbiddenName&lt;/code&gt;. For more information, see &lt;a href=&quot;form-validation#custom-validators&quot;&gt;Custom validators&lt;/a&gt; section.</source>
          <target state="translated">&lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 요소는 HTML 유효성 검사 속성을 운반 : &lt;code&gt;required&lt;/code&gt; 와 &lt;code&gt;&lt;a href=&quot;../api/forms/minlengthvalidator&quot;&gt;minlength&lt;/a&gt;&lt;/code&gt; . 또한 사용자 정의 유효성 검사기 지시문 인 &lt;code&gt;forbiddenName&lt;/code&gt; 을 전달합니다 . 자세한 내용은 &lt;a href=&quot;form-validation#custom-validators&quot;&gt;사용자 정의 유효성 검사기&lt;/a&gt; 섹션을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="326834fbb7c5e0943d924c7415e94c4b70ac7a46" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;ng-container&amp;gt;&lt;/code&gt; is a syntax element recognized by the Angular parser. It's not a directive, component, class, or interface. It's more like the curly braces in a JavaScript &lt;code&gt;if&lt;/code&gt;-block:</source>
          <target state="translated">&lt;code&gt;&amp;lt;ng-container&amp;gt;&lt;/code&gt; 각도 파서 인식 신택스 요소이다. 지시어, 구성 요소, 클래스 또는 인터페이스가 아닙니다. -block 인 &lt;code&gt;if&lt;/code&gt; JavaScript의 중괄호와 비슷합니다 .</target>
        </trans-unit>
        <trans-unit id="fd20c7620fef7c45d4edd4193dfc39179d70431b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;ng-content&amp;gt;&lt;/code&gt; tag is a &lt;em&gt;placeholder&lt;/em&gt; for the external content. It tells Angular where to insert that content. In this case, the projected content is the &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; from the parent.</source>
          <target state="translated">&lt;code&gt;&amp;lt;ng-content&amp;gt;&lt;/code&gt; 태그는 인 &lt;em&gt;틀&lt;/em&gt; 외부 콘텐츠. 해당 내용을 삽입 할 위치를 Angular에 알려줍니다. 이 경우, 투사 된 컨텐츠는 부모 의 &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="f4e027c2e3b4edb293e0cad4bbba2e70ee66810e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="efdfb17d702bc8bbe65f04dda2cbc25b2231caa6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; element is a good choice for dynamic components because it doesn't render any additional output.</source>
          <target state="translated">&lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; 은 추가 출력을 렌더링하지 않기 때문에 요소는 동적 구성 요소에 대한 좋은 선택입니다.</target>
        </trans-unit>
        <trans-unit id="2a8bb2dcac92b489d02149d2c7fd4d8b3a43c3a0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; element is where you apply the directive you just made. To apply the &lt;code&gt;AdDirective&lt;/code&gt;, recall the selector from &lt;code&gt;ad.directive.ts&lt;/code&gt;, &lt;code&gt;ad-host&lt;/code&gt;. Apply that to &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; without the square brackets. Now Angular knows where to dynamically load components.</source>
          <target state="translated">&lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; 방금 만든 지침을 적용 할 경우 요소이다. &lt;code&gt;AdDirective&lt;/code&gt; 를 적용하려면 &lt;code&gt;ad.directive.ts&lt;/code&gt; , &lt;code&gt;ad-host&lt;/code&gt; 에서 선택기를 호출하십시오 . 대괄호없이 &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; 에 적용하십시오 . 이제 Angular는 구성 요소를 동적으로로드 할 위치를 알고 있습니다.</target>
        </trans-unit>
        <trans-unit id="7ab5050deed14a9d8aec4d32da381b874daf44ed" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; tag was deprecated in v4 to avoid colliding with the DOM's element of the same name (such as when using web components). Use &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; instead. For more information, see the &lt;a href=&quot;angular-compiler-options#enablelegacytemplate&quot;&gt;Ahead-of-Time Compilation&lt;/a&gt; guide.</source>
          <target state="translated">&lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; 태그 (예를 들면 웹 컴포넌트를 사용하는 경우와 같이) 동일한 이름의 DOM 요소의 충돌 방지 할 V4에서 중단 하였다. 사용은 &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; 대신. 자세한 내용은 &lt;a href=&quot;angular-compiler-options#enablelegacytemplate&quot;&gt;Ahead-of-Time Compilation&lt;/a&gt; 안내서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="b72d4c5c6466d06641152ad78396729ffd2474ad" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;(click)&lt;/code&gt; event is bound to the &lt;code&gt;addNewItem()&lt;/code&gt; method in the child component class which takes as its argument whatever the value of &lt;code&gt;#newItem&lt;/code&gt; is.</source>
          <target state="translated">&lt;code&gt;(click)&lt;/code&gt; 이벤트가 결합되어 &lt;code&gt;addNewItem()&lt;/code&gt; 의 값이 무엇이든, 인수로서 취 아이 컴포넌트의 메소드 &lt;code&gt;#newItem&lt;/code&gt; 가 있다.</target>
        </trans-unit>
        <trans-unit id="6b8080b0d96315c1fea91fa690a42e383df27175" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;(click)&lt;/code&gt; to the left of the equals sign identifies the button's click event as the &lt;strong&gt;target of the binding&lt;/strong&gt;. The text in quotes to the right of the equals sign is the &lt;strong&gt;template statement&lt;/strong&gt;, which responds to the click event by calling the component's &lt;code&gt;onClickMe&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;(click)&lt;/code&gt; 의 왼쪽에있는 기호 식별은 AS 버튼의 클릭 이벤트에 해당 &lt;strong&gt;바인딩의 대상을&lt;/strong&gt; . 등호 오른쪽에 따옴표로 &lt;code&gt;onClickMe&lt;/code&gt; 텍스트는 &lt;strong&gt;template statement&lt;/strong&gt; 이며, 구성 요소의 onClickMe 메서드를 호출하여 click 이벤트에 응답합니다 .</target>
        </trans-unit>
        <trans-unit id="5972469341e9c4bb2e9183bf2c05dde6fc8440b2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;(click)&lt;/code&gt;&lt;a href=&quot;user-input#binding-to-user-input-events&quot;&gt;&lt;em&gt;event binding&lt;/em&gt;&lt;/a&gt; calls the component's &lt;code&gt;selectHero&lt;/code&gt; method when the user clicks a hero's name.</source>
          <target state="translated">&lt;code&gt;(click)&lt;/code&gt; &lt;a href=&quot;user-input#binding-to-user-input-events&quot;&gt;&lt;em&gt;바인딩 이벤트&lt;/em&gt;&lt;/a&gt; 호출 구성 요소의 &lt;code&gt;selectHero&lt;/code&gt; 의 사용자가 영웅의 이름을 클릭 할 방법을.</target>
        </trans-unit>
        <trans-unit id="3f9a45c02a8db70de99ace5e845ded0b9bab287b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;(keyup)&lt;/code&gt; event handler hears &lt;em&gt;every keystroke&lt;/em&gt;. Sometimes only the &lt;em&gt;Enter&lt;/em&gt; key matters, because it signals that the user has finished typing. One way to reduce the noise would be to examine every &lt;code&gt;$event.keyCode&lt;/code&gt; and take action only when the key is &lt;em&gt;Enter&lt;/em&gt;.</source>
          <target state="translated">&lt;code&gt;(keyup)&lt;/code&gt; 이벤트 핸들러는 듣는 &lt;em&gt;모든 키 입력을&lt;/em&gt; . 때때로 사용자가 입력을 완료했음을 나타 내기 때문에 &lt;em&gt;Enter&lt;/em&gt; 키만 중요합니다. 노이즈를 줄이는 한 가지 방법은 모든 &lt;code&gt;$event.keyCode&lt;/code&gt; 를 검사 하고 키가 &lt;em&gt;Enter 인&lt;/em&gt; 경우에만 조치를 취하는 것 입니다.</target>
        </trans-unit>
        <trans-unit id="10abfce959f609271607b301af52de8fbf29d196" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;* =&amp;gt; *&lt;/code&gt; transition applies when any change between two states takes place.</source>
          <target state="translated">&lt;code&gt;* =&amp;gt; *&lt;/code&gt; 두 상태 사이의 변화가 일어날 때의 전환을 적용한다.</target>
        </trans-unit>
        <trans-unit id="2120f338343729dc380dc6b0089baa51ac809b62" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;**&lt;/code&gt; path in the last route is a &lt;strong&gt;wildcard&lt;/strong&gt;. The router will select this route if the requested URL doesn't match any paths for routes defined earlier in the configuration. This is useful for displaying a &quot;404 - Not Found&quot; page or redirecting to another route.</source>
          <target state="translated">마지막 경로 의 &lt;code&gt;**&lt;/code&gt; 경로는 &lt;strong&gt;와일드 카드&lt;/strong&gt; 입니다. 요청한 URL이 구성에서 앞에서 정의한 경로의 경로와 일치하지 않으면 라우터는이 경로를 선택합니다. &quot;404-찾을 수 없음&quot;페이지를 표시하거나 다른 경로로 리디렉션하는 데 유용합니다.</target>
        </trans-unit>
        <trans-unit id="96ab982ceb0f51ab7dc6e0259cf6586cf95248da" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;*&lt;/code&gt; symbol turns the current element into an embedded template. Equivalent to: &lt;code&gt;&amp;lt;ng-template [myUnless]=&quot;myExpression&quot;&amp;gt;&amp;lt;p&amp;gt;...&amp;lt;/p&amp;gt;&amp;lt;/ng-template&amp;gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;*&lt;/code&gt; 기호가 포함 된 템플릿에 현재 요소를 온. : 동등 &lt;code&gt;&amp;lt;ng-template [myUnless]=&quot;myExpression&quot;&amp;gt;&amp;lt;p&amp;gt;...&amp;lt;/p&amp;gt;&amp;lt;/ng-template&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7c2d5580b2ef8003829258ec68b0138943d8a940" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; directive in Angular is similar to the &lt;code&gt;ng-repeat&lt;/code&gt; directive in AngularJS. It repeats the associated DOM element for each item in the specified collection. More accurately, it turns the defined element (&lt;code&gt;&amp;lt;tr&amp;gt;&lt;/code&gt; in this example) and its contents into a template and uses that template to instantiate a view for each item in the list.</source>
          <target state="translated">Angular 의 &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 지시문은 AngularJS 의 &lt;code&gt;ng-repeat&lt;/code&gt; 지시문 과 유사합니다 . 지정된 콜렉션의 각 항목에 대해 연관된 DOM 요소를 반복합니다. 보다 정확하게는 정의 된 요소 ( 이 예에서는 &lt;code&gt;&amp;lt;tr&amp;gt;&lt;/code&gt; )와 해당 컨텐츠를 템플리트로 바꾸고 해당 템플리트를 사용하여 목록의 각 항목에 대한보기를 인스턴스화합니다.</target>
        </trans-unit>
        <trans-unit id="8e1d922dd350f306cee6d2827b89d6c59d7018cc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; directive iterates over each form control instance provided by the aliases form array instance. Because form array elements are unnamed, you assign the index to the &lt;code&gt;i&lt;/code&gt; variable and pass it to each control to bind it to the &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrolname&quot;&gt;formControlName&lt;/a&gt;&lt;/code&gt; input.</source>
          <target state="translated">&lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 별칭 의해 제공된 각각의 형태 제어 인스턴스로 지정 반복 배열 인스턴스를 형성한다. 양식 배열 요소의 이름이 지정되지 &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrolname&quot;&gt;formControlName&lt;/a&gt;&lt;/code&gt; 색인을 &lt;code&gt;i&lt;/code&gt; 변수에 지정하고 각 제어에 전달하여 formControlName 입력에 바인드하십시오 .</target>
        </trans-unit>
        <trans-unit id="52969138b5130b927875be6b78501fd4d2cc3965" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; directive tells Angular to iterate over a list.</source>
          <target state="translated">&lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 지시어는 목록을 반복 각도를 알려줍니다.</target>
        </trans-unit>
        <trans-unit id="c40c69127cacc3294ec3f3ca68aa65396d4921ed" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; iterates over the items in the &lt;code&gt;items&lt;/code&gt; array. When you enter a value in the child's &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; and click the button, the child emits the event and the parent's &lt;code&gt;addItem()&lt;/code&gt; method pushes the value to the &lt;code&gt;items&lt;/code&gt; array and it renders in the list.</source>
          <target state="translated">&lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 는 의 항목 반복 할 &lt;code&gt;items&lt;/code&gt; 배열. 자식 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 에 값을 입력 하고 버튼을 클릭하면 자식은 이벤트를 생성하고 부모의 &lt;code&gt;addItem()&lt;/code&gt; 메서드는 값을 &lt;code&gt;items&lt;/code&gt; 배열 로 푸시 하고 목록에 렌더링합니다.</target>
        </trans-unit>
        <trans-unit id="1b34fcebb6c80852949768c3729417a298981452" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; repeater creates as many links as are in the component's &lt;code&gt;heroes&lt;/code&gt; array.</source>
          <target state="translated">&lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 의 많은 링크와 같은 구성 요소의에로 리피터가 생성 &lt;code&gt;heroes&lt;/code&gt; 배열입니다.</target>
        </trans-unit>
        <trans-unit id="974cf1dc9316505b9a97fbea008c22a30e3f284a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; repeats hero objects. Notice that the &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; iterates over a list called &lt;code&gt;heroes$&lt;/code&gt;, not &lt;code&gt;heroes&lt;/code&gt;. The &lt;code&gt;$&lt;/code&gt; is a convention that indicates &lt;code&gt;heroes$&lt;/code&gt; is an &lt;code&gt;Observable&lt;/code&gt;, not an array.</source>
          <target state="translated">&lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 는 영웅 객체를 반복합니다. 주목하라 것을 &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 이 목록을 통해이라고 반복 할 &lt;code&gt;heroes$&lt;/code&gt; ,하지 &lt;code&gt;heroes&lt;/code&gt; . &lt;code&gt;$&lt;/code&gt; 를 표시하는 관례 &lt;code&gt;heroes$&lt;/code&gt; 이고 &lt;code&gt;Observable&lt;/code&gt; 아닌 배열입니다.</target>
        </trans-unit>
        <trans-unit id="ef9135def9fd84348381da68de4edf112bd5c56b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; directive in Angular works the same as the &lt;code&gt;ng-if&lt;/code&gt; directive in AngularJS. It removes or recreates a portion of the DOM based on an expression.</source>
          <target state="translated">Angular 의 &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; 지시문은 AngularJS 의 &lt;code&gt;ng-if&lt;/code&gt; 지시문 과 동일하게 작동합니다 . 표현식을 기반으로 DOM의 일부를 제거하거나 다시 작성합니다.</target>
        </trans-unit>
        <trans-unit id="fd7047a22a6c3235fbbd9f2a4355662750316bdb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; directive moved to the &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; element where it became a property binding,&lt;code&gt;[&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;]&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; 의 지시자는 이동 &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; 은 속성이 결합 된 곳에 소자 &lt;code&gt;[&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;]&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a0093388df5eaa9c4c71a08425e65597f7ff6f7d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; on the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; element reveals a set of nested message &lt;code&gt;divs&lt;/code&gt; but only if the &lt;code&gt;name&lt;/code&gt; is invalid and the control is either &lt;code&gt;dirty&lt;/code&gt; or &lt;code&gt;touched&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; 온 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 요소는 중첩 된 메시지의 일련의 계시 &lt;code&gt;divs&lt;/code&gt; 하지만 경우에만 &lt;code&gt;name&lt;/code&gt; 무효가되어, 제어 중 하나입니다 &lt;code&gt;dirty&lt;/code&gt; 또는 &lt;code&gt;touched&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="434fcab1e3a8d321be3bd94ab9489622041eb31c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; only displays the messages area if there are messages to show.</source>
          <target state="translated">&lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; 가 보여주는 메시지가있는 경우에만 메시지 영역을 표시합니다.</target>
        </trans-unit>
        <trans-unit id="d59381edc8880b72df3dd7c44b31b8ca52e6092d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;*&lt;a href=&quot;ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; directive is most commonly used to conditionally show an inline template, as seen in the following example. The default &lt;code&gt;else&lt;/code&gt; template is blank.</source>
          <target state="translated">&lt;code&gt;*&lt;a href=&quot;ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; 의 다음 예에서와 같이 지시어는 가장 일반적으로 조건부 인라인 템플릿을 표시하는 데 사용됩니다. 기본 &lt;code&gt;else&lt;/code&gt; 템플릿은 비어 있습니다.</target>
        </trans-unit>
        <trans-unit id="519a225df0d1b1586a1fbe4ebece19660d118076" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--open&lt;/code&gt; (or just &lt;code&gt;-o&lt;/code&gt;) option automatically opens your browser to &lt;code&gt;http://localhost:4200/&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;--open&lt;/code&gt; (또는 &lt;code&gt;-o&lt;/code&gt; ) 옵션이 자동으로 브라우저를 열고 &lt;code&gt;http://localhost:4200/&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="21886eb0c6a56536748cb67bd6410d088c51786c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--open&lt;/code&gt; flag opens a browser to &lt;code&gt;http://localhost:4200/&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;--open&lt;/code&gt; 플래그에 브라우저를 열고 &lt;code&gt;http://localhost:4200/&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="42efef1f124237247d38b603c4bad7661e6bda6a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--prod&lt;/code&gt;&lt;em&gt;meta-flag&lt;/em&gt; engages the following build optimization features.</source>
          <target state="translated">&lt;code&gt;--prod&lt;/code&gt; &lt;em&gt;메타 플래그는&lt;/em&gt; 다음과 같은 빌드 최적화 기능을 종사.</target>
        </trans-unit>
        <trans-unit id="0e88d20c25b9a1cb33ec394f79fb11ace1c95d63" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.metadata.json&lt;/code&gt; files contain information needed by the template compiler from a &lt;code&gt;.ts&lt;/code&gt; file that is not included in the &lt;code&gt;.d.ts&lt;/code&gt; file produced by the TypeScript compiler. This information includes, for example, the content of annotations (such as a component's template), which TypeScript emits to the &lt;code&gt;.js&lt;/code&gt; file but not to the &lt;code&gt;.d.ts&lt;/code&gt; file.</source>
          <target state="translated">&lt;code&gt;.metadata.json&lt;/code&gt; 의 파일은에서 템플릿 컴파일러에 의해 필요한 정보가 포함 &lt;code&gt;.ts&lt;/code&gt; 에 포함되지 않은 파일 &lt;code&gt;.d.ts&lt;/code&gt; 의 타이프 스크립트 컴파일러에 의해 생성되는 파일을. 이 정보에는 예를 들어 TypeScript 가 &lt;code&gt;.d.ts&lt;/code&gt; 파일이 아닌 &lt;code&gt;.js&lt;/code&gt; 파일로 내보내는 주석 내용 (예 : 구성 요소의 템플릿) 이 포함 됩니다.</target>
        </trans-unit>
        <trans-unit id="da433db456ebe4159bdc0c31a9dc8f8bb5a729ce" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;/deep/&lt;/code&gt; combinator also has the aliases &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;, and &lt;code&gt;::ng-deep&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;/deep/&lt;/code&gt; 콤비는 별칭이 &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; 및 &lt;code&gt;::ng-deep&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="cb8dddba1a3a8f516cc04db526b4971f6100af63" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:&lt;a href=&quot;../api/core/directive#host&quot;&gt;host&lt;/a&gt;&lt;/code&gt; selector is the only way to target the host element. You can't reach the host element from inside the component with other selectors because it's not part of the component's own template. The host element is in a parent component's template.</source>
          <target state="translated">&lt;code&gt;:&lt;a href=&quot;../api/core/directive#host&quot;&gt;host&lt;/a&gt;&lt;/code&gt; 선택은 호스트 요소를 대상으로하는 유일한 방법입니다. 구성 요소 자체 템플릿의 일부가 아니기 때문에 다른 선택기를 사용하여 구성 요소 내부에서 호스트 요소에 접근 할 수 없습니다. 호스트 요소는 부모 구성 요소의 템플릿에 있습니다.</target>
        </trans-unit>
        <trans-unit id="96dc3a416c0a1b81fdad59a50d7802b56e3490fa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:enter&lt;/code&gt; transition runs when any &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; views are placed on the page, and &lt;code&gt;:leave&lt;/code&gt; runs when those views are removed from the page.</source>
          <target state="translated">는 &lt;code&gt;:enter&lt;/code&gt; 어떤 경우 전환 실행을 &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 뷰 페이지에 배치하고, &lt;code&gt;:leave&lt;/code&gt; 실행을하는 뷰 페이지에서 제거 할 때.</target>
        </trans-unit>
        <trans-unit id="8dfbe701918754e8626af9582beed98ca14504a0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:id&lt;/code&gt; in the second route is a token for a route parameter. In a URL such as &lt;code&gt;/hero/42&lt;/code&gt;, &quot;42&quot; is the value of the &lt;code&gt;id&lt;/code&gt; parameter. The corresponding &lt;code&gt;HeroDetailComponent&lt;/code&gt; will use that value to find and present the hero whose &lt;code&gt;id&lt;/code&gt; is 42. You'll learn more about route parameters later in this guide.</source>
          <target state="translated">두 번째 경로 의 &lt;code&gt;:id&lt;/code&gt; 는 경로 매개 변수의 토큰입니다. &lt;code&gt;/hero/42&lt;/code&gt; 와 같은 URL 에서 &quot;42&quot;는 &lt;code&gt;id&lt;/code&gt; 매개 변수 의 값입니다 . 해당 &lt;code&gt;HeroDetailComponent&lt;/code&gt; 는 해당 값을 사용하여 &lt;code&gt;id&lt;/code&gt; 가 42 인 영웅을 찾아 표시 합니다.이 안내서의 뒷부분에서 경로 매개 변수에 대해 자세히 학습합니다.</target>
        </trans-unit>
        <trans-unit id="90b7bbb98338684f39be744dca5eee1e473bb6c8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/animations/animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; function (second argument of the transition function) accepts the &lt;code&gt;timings&lt;/code&gt; and &lt;code&gt;styles&lt;/code&gt; input parameters.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/animations/animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; 함수 (전이 함수의 두번째 인자)를 받아 &lt;code&gt;timings&lt;/code&gt; 및 &lt;code&gt;styles&lt;/code&gt; 입력 파라미터.</target>
        </trans-unit>
        <trans-unit id="6aa8ce6afb763d79c390fee072a2367942e65792" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/animations/keyframes&quot;&gt;keyframes&lt;/a&gt;()&lt;/code&gt; function in Angular allows you to specify multiple interim styles within a single transition, with an optional offset to define the point in the animation where each style change occurs.</source>
          <target state="translated">Angular 의 &lt;code&gt;&lt;a href=&quot;../api/animations/keyframes&quot;&gt;keyframes&lt;/a&gt;()&lt;/code&gt; 함수를 사용하면 단일 전환 내에서 여러 중간 스타일을 지정할 수 있으며 각 스타일 변경이 발생하는 애니메이션의 점을 정의하는 오프셋 (선택 사항)이 있습니다.</target>
        </trans-unit>
        <trans-unit id="ad35da3f65c892375ddd871696a7bd3b66478d66" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/animations/query&quot;&gt;query&lt;/a&gt; params&lt;/code&gt; and &lt;code&gt;fragment&lt;/code&gt; can also be preserved using a &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; with the &lt;code&gt;queryParamsHandling&lt;/code&gt; and &lt;code&gt;preserveFragment&lt;/code&gt; bindings respectively.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/animations/query&quot;&gt;query&lt;/a&gt; params&lt;/code&gt; 및 &lt;code&gt;fragment&lt;/code&gt; 또한하여 보존 할 수 &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; 와 &lt;code&gt;queryParamsHandling&lt;/code&gt; 및 &lt;code&gt;preserveFragment&lt;/code&gt; 각각 바인딩.</target>
        </trans-unit>
        <trans-unit id="a45f970b4aa67853e344825fb7ac64aa16a23ca7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/animations/query&quot;&gt;query&lt;/a&gt;()&lt;/code&gt; function allows you to find inner elements within the element that is being animated. This function targets specific HTML elements within a parent component and applies animations to each element individually. Angular intelligently handles setup, teardown, and cleanup as it coordinates the elements across the page.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/animations/query&quot;&gt;query&lt;/a&gt;()&lt;/code&gt; 함수를 사용하면 애니메이션 중의 요소 내에서 내부 요소를 찾을 수 있습니다. 이 함수는 부모 구성 요소 내의 특정 HTML 요소를 대상으로하며 각 요소에 개별적으로 애니메이션을 적용합니다. Angular는 페이지 전체의 요소를 조정하여 설정, 해제 및 정리를 지능적으로 처리합니다.</target>
        </trans-unit>
        <trans-unit id="377b4c3b33ed4e6d023f9c5ffd3c7e62bb723020" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/animations/stagger&quot;&gt;stagger&lt;/a&gt;()&lt;/code&gt; function allows you to define a timing gap between each queried item that is animated and thus animates elements with a delay between them.</source>
          <target state="translated">스 &lt;code&gt;&lt;a href=&quot;../api/animations/stagger&quot;&gt;stagger&lt;/a&gt;()&lt;/code&gt; 함수를 사용하면 애니메이션이있는 각 쿼리 된 항목 사이의 타이밍 간격을 정의 할 수 있으므로 요소간에 지연이 발생하여 요소에 애니메이션을 적용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ca0e77d333988840b26a6477d5cfa93de0fd21eb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/animations/transition&quot;&gt;transition&lt;/a&gt;()&lt;/code&gt; function takes additional selector values, &lt;code&gt;:increment&lt;/code&gt; and &lt;code&gt;:decrement&lt;/code&gt;. Use these to kick off a transition when a numeric value has increased or decreased in value.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/animations/transition&quot;&gt;transition&lt;/a&gt;()&lt;/code&gt; 함수는 추가적인 선택기 값 얻어 &lt;code&gt;:increment&lt;/code&gt; 및 &lt;code&gt;:decrement&lt;/code&gt; . 숫자 값이 증가하거나 감소 할 때 전환을 시작하려면이를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="1175f7e12c287c6766b1bf4935d68fa0a9aacf16" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/animations/trigger&quot;&gt;trigger&lt;/a&gt;()&lt;/code&gt; function describes the property name to watch for changes. When a change occurs, the trigger initiates the actions included in its definition. These actions can be transitions or other functions, as we'll see later on.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/animations/trigger&quot;&gt;trigger&lt;/a&gt;()&lt;/code&gt; 함수는 변화를 볼 수있는 속성 이름을 설명합니다. 변경이 발생하면 트리거는 정의에 포함 된 작업을 시작합니다. 나중에 볼 수 있듯이 이러한 동작은 전환 또는 다른 기능 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8a4b3621e7c4f33ab29f4114473d11c070892306" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/common/asyncpipe&quot;&gt;AsyncPipe&lt;/a&gt;&lt;/code&gt; is also stateful. The pipe maintains a subscription to the input &lt;code&gt;Observable&lt;/code&gt; and keeps delivering values from that &lt;code&gt;Observable&lt;/code&gt; as they arrive.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/asyncpipe&quot;&gt;AsyncPipe&lt;/a&gt;&lt;/code&gt; 는 또한 상태입니다. 파이프는 입력 &lt;code&gt;Observable&lt;/code&gt; 에 대한 구독을 유지하고 도착할 때 해당 &lt;code&gt;Observable&lt;/code&gt; 에서 값을 계속 전달합니다 .</target>
        </trans-unit>
        <trans-unit id="e9f2e4b7fce125080de1aad2e4783db64cc0aea6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; captures both kinds of errors in its &lt;code&gt;&lt;a href=&quot;../api/common/http/httperrorresponse&quot;&gt;HttpErrorResponse&lt;/a&gt;&lt;/code&gt; and you can inspect that response to figure out what really happened.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; 를 캡처 모두 그 오류의 종류 &lt;code&gt;&lt;a href=&quot;../api/common/http/httperrorresponse&quot;&gt;HttpErrorResponse&lt;/a&gt;&lt;/code&gt; 그리고 당신이 정말로 무슨 일이 있었는지 알아 내기 위해 그 응답을 검사 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5384cbacf5ba9fcb68ffa4d9a9d16a5e1c862a9c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; in &lt;code&gt;@angular/common/&lt;a href=&quot;../api/common/http&quot;&gt;http&lt;/a&gt;&lt;/code&gt; offers a simplified client HTTP API for Angular applications that rests on the &lt;code&gt;XMLHttpRequest&lt;/code&gt; interface exposed by browsers. Additional benefits of &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; include testability features, typed request and response objects, request and response interception, &lt;code&gt;Observable&lt;/code&gt; apis, and streamlined error handling.</source>
          <target state="translated">&lt;code&gt;@angular/common/&lt;a href=&quot;../api/common/http&quot;&gt;http&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;../api/common/http&quot;&gt;http&lt;/a&gt; 의 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; 는 브라우저에서 노출되는 &lt;code&gt;XMLHttpRequest&lt;/code&gt; 인터페이스 에있는 Angular 응용 프로그램을위한 단순화 된 클라이언트 HTTP API를 제공 합니다. &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; 의 추가 이점 에는 테스트 기능, 형식화 된 요청 및 응답 객체, 요청 및 응답 차단, &lt;code&gt;Observable&lt;/code&gt; API 및 간소화 된 오류 처리가 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="deeb8ba499b1b180bde00f2b9551724010997688" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient#get&quot;&gt;HttpClient.get()&lt;/a&gt;&lt;/code&gt; method normally returns an &lt;em&gt;observable&lt;/em&gt; that either emits the data or an error. Some folks describe it as a &quot;&lt;em&gt;one and done&lt;/em&gt;&quot; observable.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient#get&quot;&gt;HttpClient.get()&lt;/a&gt;&lt;/code&gt; 메소드는 일반적으로 리턴 &lt;em&gt;관찰&lt;/em&gt; 하거나 또는 데이터 오류를 방출있다. 어떤 사람들은 이것을 &quot; &lt;em&gt;하나의 것으로&lt;/em&gt; &quot;관찰 가능한 것으로 묘사합니다 .</target>
        </trans-unit>
        <trans-unit id="df333c509fac8ddb188bad0cfbdd394bda4c50f1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient#post&quot;&gt;HttpClient.post()&lt;/a&gt;&lt;/code&gt; method is similar to &lt;code&gt;get()&lt;/code&gt; in that it has a type parameter (you're expecting the server to return the new hero) and it takes a resource URL.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient#post&quot;&gt;HttpClient.post()&lt;/a&gt;&lt;/code&gt; 메소드와 유사 &lt;code&gt;get()&lt;/code&gt; 그것은 형식 매개 변수를 (새 영웅을 반환하는 서버를 기다리고있어) 인 것을 그리고 자원의 URL을합니다.</target>
        </trans-unit>
        <trans-unit id="55770db94e082c9f5e561030f40e47b4f1674770" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient#put&quot;&gt;HttpClient.put()&lt;/a&gt;&lt;/code&gt; method takes three parameters:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient#put&quot;&gt;HttpClient.put()&lt;/a&gt;&lt;/code&gt; 메소드는 세 개의 매개 변수를 취</target>
        </trans-unit>
        <trans-unit id="7a4ce4d193b0811a6f8f7ad610feeb8dec143461" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/common/http/httpparams&quot;&gt;HttpParams&lt;/a&gt;&lt;/code&gt; are immutable so you'll have to save the returned value of the &lt;code&gt;.set()&lt;/code&gt; method in order to update the options.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/http/httpparams&quot;&gt;HttpParams&lt;/a&gt;&lt;/code&gt; 은 당신의 반환 값 저장해야하므로 불변 &lt;code&gt;.set()&lt;/code&gt; 옵션을 업데이트하기 위해 방법을.</target>
        </trans-unit>
        <trans-unit id="011c7e92ac38205e83ad5e89713470259fc0289a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/common/http/testing/httpclienttestingmodule&quot;&gt;HttpClientTestingModule&lt;/a&gt;&lt;/code&gt; can make these testing scenarios more manageable.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/http/testing/httpclienttestingmodule&quot;&gt;HttpClientTestingModule&lt;/a&gt;&lt;/code&gt; 는 이러한 테스트 시나리오가 더 관리 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6e57d0d3a73437e120975f03c6e520b3623c7eae" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/common/jsonpipe&quot;&gt;json&lt;/a&gt;&lt;/code&gt; pipe is particularly helpful for debugging bindings:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/jsonpipe&quot;&gt;json&lt;/a&gt;&lt;/code&gt; 파이프 바인딩을 디버깅하기에 특히 유용하다 :</target>
        </trans-unit>
        <trans-unit id="7687f629bb10a3782e5e6e031f54803a9613c67a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;NgForOf&lt;/a&gt;&lt;/code&gt; directive implements &lt;code&gt;NgFor&lt;/code&gt;. Read more about additional &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;NgForOf&lt;/a&gt;&lt;/code&gt; directive properties and context properties in the &lt;a href=&quot;../api/common/ngforof&quot;&gt;NgForOf API reference&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;NgForOf&lt;/a&gt;&lt;/code&gt; 지침 구현 &lt;code&gt;NgFor&lt;/code&gt; . &lt;a href=&quot;../api/common/ngforof&quot;&gt;NgForOf API 참조&lt;/a&gt; 에서 추가 &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;NgForOf&lt;/a&gt;&lt;/code&gt; 지시문 속성 및 컨텍스트 속성에 대해 자세히 알아보십시오 .</target>
        </trans-unit>
        <trans-unit id="828f8cc9e1b68dc8578c2870bfc113f92e5b8081" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; directive doesn't hide elements with CSS. It adds and removes them physically from the DOM. Confirm that fact using browser developer tools to inspect the DOM.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; 의 지시어는 CSS와 요소를 숨기지 않습니다. DOM에서 물리적으로 추가하고 제거합니다. 브라우저 개발자 도구를 사용하여 DOM을 검사한다는 사실을 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="d561348f9e9b5e8716d8be79b6e49e3f2cc2dc8d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/common/ngswitch&quot;&gt;NgSwitch&lt;/a&gt;&lt;/code&gt; directives</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/ngswitch&quot;&gt;NgSwitch&lt;/a&gt;&lt;/code&gt; 의 지침</target>
        </trans-unit>
        <trans-unit id="13016879e5b136aba9f37a06656c49328e2ea0ed" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/common/slicepipe&quot;&gt;SlicePipe&lt;/a&gt;&lt;/code&gt; does the same thing but the &lt;em&gt;order of the parameters is reversed&lt;/em&gt;, in keeping with the JavaScript &lt;code&gt;Slice&lt;/code&gt; method. The first parameter is the starting index; the second is the limit. As in AngularJS, coding this operation within the component instead could improve performance.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/slicepipe&quot;&gt;SlicePipe&lt;/a&gt;&lt;/code&gt; 는 같은 일을하지만, &lt;em&gt;매개 변수의 순서는 반대로&lt;/em&gt; 자바 스크립트와 유지, &lt;code&gt;Slice&lt;/code&gt; 방법. 첫 번째 매개 변수는 시작 색인입니다. 두 번째는 한계입니다. AngularJS에서와 같이 구성 요소 내에서이 작업을 코딩하면 성능이 향상 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d817909915566340878143825ee398005068d212" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/common/titlecasepipe&quot;&gt;TitleCasePipe&lt;/a&gt;&lt;/code&gt; from the &lt;code&gt;shared&lt;/code&gt; folder.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/titlecasepipe&quot;&gt;TitleCasePipe&lt;/a&gt;&lt;/code&gt; 로부터 &lt;code&gt;shared&lt;/code&gt; 폴더.</target>
        </trans-unit>
        <trans-unit id="aae71b7520bfd4b36d6c153e1ebfe169315f1074" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/%24locationshim#url&quot;&gt;url()&lt;/a&gt;&lt;/code&gt; method reads source files from your filesystem, relative to the schematic.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/upgrade/%24locationshim#url&quot;&gt;url()&lt;/a&gt;&lt;/code&gt; 메소드는 회로도를 기준으로 사용자의 파일 시스템에서 소스 파일을 읽습니다.</target>
        </trans-unit>
        <trans-unit id="851fc6e1fd0eaba4690e642ebc501aa32059ab01" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/locationupgrademodule#config&quot;&gt;LocationUpgradeModule.config()&lt;/a&gt;&lt;/code&gt; method accepts a configuration object that allows you to configure options including the &lt;code&gt;&lt;a href=&quot;../api/common/locationstrategy&quot;&gt;LocationStrategy&lt;/a&gt;&lt;/code&gt; with the &lt;code&gt;useHash&lt;/code&gt; property, and the URL prefix with the &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/locationupgradeconfig#hashPrefix&quot;&gt;hashPrefix&lt;/a&gt;&lt;/code&gt; property.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/upgrade/locationupgrademodule#config&quot;&gt;LocationUpgradeModule.config()&lt;/a&gt;&lt;/code&gt; 메소드를 포함하여 구성 옵션을 허용하는 구성 개체 받아 &lt;code&gt;&lt;a href=&quot;../api/common/locationstrategy&quot;&gt;LocationStrategy&lt;/a&gt;&lt;/code&gt; 와 &lt;code&gt;useHash&lt;/code&gt; 의 특성과 함께 URL 접두사 &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/locationupgradeconfig#hashPrefix&quot;&gt;hashPrefix&lt;/a&gt;&lt;/code&gt; 의 속성을.</target>
        </trans-unit>
        <trans-unit id="756d0ba3695e20402dac04dc80348f3a5ce7bc04" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/core/applicationref#tick&quot;&gt;tick()&lt;/a&gt;&lt;/code&gt; function accepts milliseconds as a parameter (defaults to 0 if not provided). The parameter represents how much the virtual clock advances. For example, if you have a &lt;code&gt;setTimeout(fn, 100)&lt;/code&gt; in a &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; test, you need to use tick(100) to trigger the fn callback.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/applicationref#tick&quot;&gt;tick()&lt;/a&gt;&lt;/code&gt; 함수는 파라미터 (지정하지 않으면 기본값은 0)으로 밀리을 받아 들인다. 이 매개 변수는 가상 시계가 얼마나 진행되는지 나타냅니다. 예를 들어, &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; () 테스트 에 &lt;code&gt;setTimeout(fn, 100)&lt;/code&gt; 이있는 경우 fn 콜백을 트리거하려면 tick (100)을 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="897827b5730f7b24462bc905181ae4197863fb98" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/core/applicationref#tick&quot;&gt;tick()&lt;/a&gt;&lt;/code&gt; function is one of the Angular testing utilities that you import with &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt;. It's a companion to &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; and you can only call it within a &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; body.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/applicationref#tick&quot;&gt;tick()&lt;/a&gt;&lt;/code&gt; 함수는 당신이 가져올 각 테스트 유틸리티 중 하나입니다 &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; . &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; 의 동반자 이며 &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; 본문 내에서만 호출 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="69ee243bd8cdc74b2d9890a9225015af3b1be718" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/core/changedetectorref&quot;&gt;ChangeDetectorRef&lt;/a&gt;&lt;/code&gt; for the component.</source>
          <target state="translated">구성 요소 의 &lt;code&gt;&lt;a href=&quot;../api/core/changedetectorref&quot;&gt;ChangeDetectorRef&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e5809ea7370f47ded53130555d7d9d221cc5c877" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/core/changedetectorref&quot;&gt;ChangeDetectorRef&lt;/a&gt;&lt;/code&gt; is most valuable when testing a component that has the &lt;code&gt;&lt;a href=&quot;../api/core/changedetectionstrategy#OnPush&quot;&gt;ChangeDetectionStrategy.OnPush&lt;/a&gt;&lt;/code&gt; method or the component's change detection is under your programmatic control.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/changedetectorref&quot;&gt;ChangeDetectorRef&lt;/a&gt;&lt;/code&gt; 는 가있는 구성 요소 테스트 할 때 가장 가치가 &lt;code&gt;&lt;a href=&quot;../api/core/changedetectionstrategy#OnPush&quot;&gt;ChangeDetectionStrategy.OnPush&lt;/a&gt;&lt;/code&gt; 의 프로그래밍 방식 제어하에있는 방법 또는 구성 요소의 변화를 감지합니다.</target>
        </trans-unit>
        <trans-unit id="51794b2d7fab6f05d86b195b0e1aca2ec6b1d7fe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; associated with the root element of the component.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; 구성 요소의 루트 요소와 연관된.</target>
        </trans-unit>
        <trans-unit id="961daa0538457c955d90426ae42027fad7dff895" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; has other methods and properties that are useful in tests, as you'll see elsewhere in this guide.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; 는 다른 곳에서이 가이드에서 살펴 보 겠지만, 테스트에 유용한 다른 방법과 속성이 있습니다.</target>
        </trans-unit>
        <trans-unit id="f1de24ec1f5099c1ccbba6b2ab07fecb22f71cab" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; offers query methods that work for all supported platforms. These query methods take a &lt;em&gt;predicate&lt;/em&gt; function that returns &lt;code&gt;true&lt;/code&gt; when a node in the &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; tree matches the selection criteria.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; 의 이벤트 쿼리 방법 지원되는 모든 플랫폼에서 작동하는지. 이 쿼리 메소드 는 &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; 트리 의 노드 가 선택 기준과 일치 할 때 &lt;code&gt;true&lt;/code&gt; 를 리턴 하는 &lt;em&gt;술어&lt;/em&gt; 함수를 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="862186ee287f0a3973ebace73350df1dc36f0373" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; parent. Null if this is the root element.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; 의 부모입니다. 이것이 루트 요소 인 경우 널입니다.</target>
        </trans-unit>
        <trans-unit id="e19b18ad54693eb69b8495b3c5389751ca092427" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; provides crucial insights into the component's DOM representation.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; 는 구성 요소의 DOM 표현에 중요한 통찰력을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="8862a64115ba59a883af135381735a2e8bb22ad8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/core/existingsansprovider#useExisting&quot;&gt;useExisting&lt;/a&gt;&lt;/code&gt; provider key lets you map one token to another. In effect, the first token is an &lt;em&gt;alias&lt;/em&gt; for the service associated with the second token, creating two ways to access the same service object.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/existingsansprovider#useExisting&quot;&gt;useExisting&lt;/a&gt;&lt;/code&gt; 의 공급자 키는 다른 하나의 토큰을 매핑 할 수 있습니다. 사실상, 첫 번째 토큰은 두 번째 토큰과 연관된 서비스 의 &lt;em&gt;별명&lt;/em&gt; 이며 동일한 서비스 오브젝트에 액세스하는 두 가지 방법을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="02289d427dfadce775076f28b6b4b604ca0aa6ce" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/core/factorysansprovider#useFactory&quot;&gt;useFactory&lt;/a&gt;&lt;/code&gt; field tells Angular that the provider is a factory function whose implementation is &lt;code&gt;heroServiceFactory&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/factorysansprovider#useFactory&quot;&gt;useFactory&lt;/a&gt;&lt;/code&gt; 필드는 공급자가 그 구현 공장 기능이다 각도 알려줍니다 &lt;code&gt;heroServiceFactory&lt;/code&gt; 가 .</target>
        </trans-unit>
        <trans-unit id="40f86f8f21fce527e353b556c2ec4994b4b501e4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/core/factorysansprovider#useFactory&quot;&gt;useFactory&lt;/a&gt;&lt;/code&gt; provider key lets you create a dependency object by calling a factory function, as in the following example.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/factorysansprovider#useFactory&quot;&gt;useFactory&lt;/a&gt;&lt;/code&gt; 제공 키는 다음 예에서와 같이 공장 함수를 호출하여 종속성 개체를 만들 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0b974d1037f4bd4bb8020582a79e0ce5c8b0b3c5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/core/hostlistener&quot;&gt;HostListener&lt;/a&gt;&lt;/code&gt; wires the click event of the host element (the &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routerlinkwithhref&quot;&gt;a&lt;/a&gt;&amp;gt;&lt;/code&gt; anchor elements in &lt;code&gt;AppComponent&lt;/code&gt;) to the stub directive's &lt;code&gt;onClick&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/hostlistener&quot;&gt;HostListener&lt;/a&gt;&lt;/code&gt; 의 와이어 호스트 소자의 클릭 이벤트합니다 ( &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routerlinkwithhref&quot;&gt;a&lt;/a&gt;&amp;gt;&lt;/code&gt; 앵커 요소 &lt;code&gt;AppComponent&lt;/code&gt; ) 스터브의 지시문에 &lt;code&gt;onClick&lt;/code&gt; 방법.</target>
        </trans-unit>
        <trans-unit id="1ec3f4f7beb143e72b2f66889972507a21903aa5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; property is declared in the &lt;code&gt;ListItemComponent&lt;/code&gt; with a type of &lt;code&gt;Item&lt;/code&gt; and decorated with &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; 속성은에서 선언 &lt;code&gt;ListItemComponent&lt;/code&gt; 의 유형 &lt;code&gt;Item&lt;/code&gt; 과 장식 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="62296206d0f1bcad4784d2e6379d92928e2d5a0c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/core/no_errors_schema&quot;&gt;NO_ERRORS_SCHEMA&lt;/a&gt;&lt;/code&gt; also prevents the compiler from telling you about the missing components and attributes that you omitted inadvertently or misspelled. You could waste hours chasing phantom bugs that the compiler would have caught in an instant.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/no_errors_schema&quot;&gt;NO_ERRORS_SCHEMA&lt;/a&gt;&lt;/code&gt; 는 또한 누락 된 구성 요소에 대해 이야기에서 컴파일러를 방지하고 실수로 생략되거나 맞춤법이 틀린 것을 속성. 컴파일러가 순간적으로 포착 한 팬텀 버그를 쫓는 데 시간을 낭비 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f9832c0d12b70799263520e96d78a0a11b71abae" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/core/no_errors_schema&quot;&gt;NO_ERRORS_SCHEMA&lt;/a&gt;&lt;/code&gt; approach is the easier of the two but don't overuse it.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/no_errors_schema&quot;&gt;NO_ERRORS_SCHEMA&lt;/a&gt;&lt;/code&gt; 의 접근 방식은 두 가지의 용이하지만 과도하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="736f7b384e5c3d37d116e2a6a5c084d671e75bed" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/core/no_errors_schema&quot;&gt;NO_ERRORS_SCHEMA&lt;/a&gt;&lt;/code&gt; tells the Angular compiler to ignore unrecognized elements and attributes.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/no_errors_schema&quot;&gt;NO_ERRORS_SCHEMA&lt;/a&gt;&lt;/code&gt; 는 인식 할 수없는 요소와 속성을 무시하도록 각도 컴파일러를 알려줍니다.</target>
        </trans-unit>
        <trans-unit id="46ae0e9050482d384516ed17b7168e0b7f8f4de4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/core/platformref#bootstrapModule&quot;&gt;bootstrapModule()&lt;/a&gt;&lt;/code&gt; method creates a child injector of the platform injector which is configured by the &lt;code&gt;AppModule&lt;/code&gt;. This is the &lt;code&gt;root&lt;/code&gt;&lt;code&gt;ModuleInjector&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/platformref#bootstrapModule&quot;&gt;bootstrapModule()&lt;/a&gt;&lt;/code&gt; 메소드에 의해 구성되는 플랫폼 인젝터의 자식 인젝터 생성 &lt;code&gt;AppModule&lt;/code&gt; 를 . 이것은 &lt;code&gt;root&lt;/code&gt; &lt;code&gt;ModuleInjector&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="dfd9564eb30349a9789dc480442eca5944f3969c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/core/provider&quot;&gt;Provider&lt;/a&gt;&lt;/code&gt; object literal</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/provider&quot;&gt;Provider&lt;/a&gt;&lt;/code&gt; 객체 리터럴</target>
        </trans-unit>
        <trans-unit id="544be4e74b7a5646610d6d8b844c6bf76f8cc96d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/core/resolvedreflectivefactory#dependencies&quot;&gt;dependencies&lt;/a&gt;&lt;/code&gt; section of &lt;code&gt;package.json&lt;/code&gt; contains:</source>
          <target state="translated">&lt;code&gt;package.json&lt;/code&gt; 의 &lt;code&gt;&lt;a href=&quot;../api/core/resolvedreflectivefactory#dependencies&quot;&gt;dependencies&lt;/a&gt;&lt;/code&gt; 섹션은 다음을 포함합니다 :</target>
        </trans-unit>
        <trans-unit id="c6f3e8e57f07ac59c00b10a08504252a4823865f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;()&lt;/code&gt; helper function takes a parameterless function with the body of the setup.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;()&lt;/code&gt; 헬퍼 기능 설정의 본체와 함수 매개 변수가 걸린다.</target>
        </trans-unit>
        <trans-unit id="14f024be8696cacdaf6f765e664b4a9642519924" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;()&lt;/code&gt; utility hides some asynchronous boilerplate by arranging for the tester's code to run in a special &lt;em&gt;async test zone&lt;/em&gt;. You don't need to pass Jasmine's &lt;code&gt;&lt;a href=&quot;../api/core/applicationinitstatus#done&quot;&gt;done&lt;/a&gt;()&lt;/code&gt; into the test and call &lt;code&gt;&lt;a href=&quot;../api/core/applicationinitstatus#done&quot;&gt;done&lt;/a&gt;()&lt;/code&gt; because it is &lt;code&gt;undefined&lt;/code&gt; in promise or observable callbacks.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;()&lt;/code&gt; 유틸리티는 특별한에서 실행하는 테스터의 코드를 배치하여 일부 비동기 상용구를 숨 깁니다 &lt;em&gt;비동기 테스트 존&lt;/em&gt; . 약속 또는 관찰 가능한 콜백에서 &lt;code&gt;undefined&lt;/code&gt; 않으므로 Jasmine의 &lt;code&gt;&lt;a href=&quot;../api/core/applicationinitstatus#done&quot;&gt;done&lt;/a&gt;()&lt;/code&gt; 을 테스트에 전달하고 &lt;code&gt;&lt;a href=&quot;../api/core/applicationinitstatus#done&quot;&gt;done&lt;/a&gt;()&lt;/code&gt; 호출 할 필요가 없습니다 .</target>
        </trans-unit>
        <trans-unit id="b6bdb963f4671f0ae12506889584d39b686a4803" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/core/testing/componentfixture&quot;&gt;ComponentFixture&lt;/a&gt;&lt;/code&gt; properties and methods provide access to the component, its DOM representation, and aspects of its Angular environment.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/testing/componentfixture&quot;&gt;ComponentFixture&lt;/a&gt;&lt;/code&gt; 의 속성 및 메소드는 컴포넌트의 DOM 표현에 대한 액세스를 제공하고, 그 각도 환경의 양상.</target>
        </trans-unit>
        <trans-unit id="93ac15fbb5d8a83db3c78e9d66f9a5a179823b1c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/core/testing/componentfixture#debugElement&quot;&gt;debugElement&lt;/a&gt;&lt;/code&gt; provides insight into the component and its DOM element during test and debugging. It's a critical property for testers. The most interesting members are covered &lt;a href=&quot;testing#debug-element-details&quot;&gt;below&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/testing/componentfixture#debugElement&quot;&gt;debugElement&lt;/a&gt;&lt;/code&gt; 은 테스트 및 디버깅 동안 컴포넌트와 DOM 요소에 대한 통찰력을 제공한다. 테스터에게는 중요한 속성입니다. 가장 흥미로운 회원은 &lt;a href=&quot;testing#debug-element-details&quot;&gt;아래에서&lt;/a&gt; 다룹 니다 .</target>
        </trans-unit>
        <trans-unit id="d60cbcd5a51066898ce1cfaef907a6ff5eeb1913" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; function enables a linear coding style by running the test body in a special &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt; test zone&lt;/code&gt;. The test body appears to be synchronous. There is no nested syntax (like a &lt;code&gt;Promise.then()&lt;/code&gt;) to disrupt the flow of control.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; 함수는 특별한에서 테스트 몸을 실행하여 코딩 스타일 선형 수 &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt; test zone&lt;/code&gt; . 테스트 본문이 동기적인 것으로 보입니다. 제어 흐름을 방해하는 중첩 구문 (예 : &lt;code&gt;Promise.then()&lt;/code&gt; ) 이 없습니다 .</target>
        </trans-unit>
        <trans-unit id="4d2f01c3eec63e6c9292ec719b3298411291b445" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; utility function has a few limitations. In particular, it won't work if the test body makes an &lt;code&gt;XMLHttpRequest&lt;/code&gt; (XHR) call. XHR calls within a test are rare so you can generally stick with &lt;a href=&quot;testing#fake-async&quot;&gt;&lt;code&gt;fakeAsync()&lt;/code&gt;&lt;/a&gt;. But if you ever do need to call &lt;code&gt;XMLHttpRequest&lt;/code&gt;, you'll want to know about &lt;code&gt;&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; 유틸리티 함수는 몇 가지 한계가있다. 특히 테스트 본문이 XHR ( &lt;code&gt;XMLHttpRequest&lt;/code&gt; )을 호출 하면 작동하지 않습니다 . 테스트 내의 XHR 호출은 드물기 때문에 일반적으로 &lt;a href=&quot;testing#fake-async&quot;&gt; &lt;code&gt;fakeAsync()&lt;/code&gt; &lt;/a&gt; 를 사용할 수 있습니다 . 그러나 &lt;code&gt;XMLHttpRequest&lt;/code&gt; 를 호출 해야하는 경우 &lt;code&gt;&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;()&lt;/code&gt; 에 대해 알고 싶을 것 입니다.</target>
        </trans-unit>
        <trans-unit id="c184a77512c3c8c73e87e4c09c8907531fc12dff" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; API consists of static class methods that either update or reference a &lt;em&gt;global&lt;/em&gt; instance of the &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; API 중 하나를 업데이트 나이 참조하는 정적 클래스 메소드로 구성 &lt;em&gt;글로벌&lt;/em&gt; 의 경우 &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5dcb0270444e1aa603b2dcc620f2b6164bc70ff0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; class is one of the principal Angular testing utilities. Its API is quite large and can be overwhelming until you've explored it, a little at a time. Read the early part of this guide first to get the basics before trying to absorb the full API.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; 클래스는 주요 각도 테스트 유틸리티 중 하나입니다. API는 상당히 커서 한 번에 조금씩 살펴볼 때까지 압도적 일 수 있습니다. 전체 API를 흡수하기 전에이 안내서의 초기 부분을 먼저 읽고 기본 사항을 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="cc8e345965763ddfe3e7812d90185a3cc8df7c1e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; is the most important of the Angular testing utilities. The &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; creates a dynamically-constructed Angular &lt;em&gt;test&lt;/em&gt; module that emulates an Angular &lt;a href=&quot;ngmodules&quot;&gt;@NgModule&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; 각 테스트 유틸리티의 가장 중요하다. &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; 동적으로 구성된 각도 작성 &lt;em&gt;시험&lt;/em&gt; 각도 에뮬레이션 모듈 &lt;a href=&quot;ngmodules&quot;&gt;@NgModule를&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="d4324c4f646e7ef5fabe04fb65098a0bff82f02d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/core/valuesansprovider#useValue&quot;&gt;useValue&lt;/a&gt;&lt;/code&gt; key lets you associate a fixed value with a DI token. Use this technique to provide &lt;em&gt;runtime configuration constants&lt;/em&gt; such as website base addresses and feature flags. You can also use a value provider in a unit test to provide mock data in place of a production data service.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/valuesansprovider#useValue&quot;&gt;useValue&lt;/a&gt;&lt;/code&gt; 의 열쇠는 당신이 DI 토큰을 고정 된 값을 연결할 수 있습니다. 이 기술을 사용 하여 웹 사이트 기본 주소 및 기능 플래그와 같은 &lt;em&gt;런타임 구성 상수&lt;/em&gt; 를 제공하십시오 . 단위 테스트에서 값 공급자를 사용하여 프로덕션 데이터 서비스 대신 모의 데이터를 제공 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="c4a4de4cdb30e4981a232b9d5743ace000b43da2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder&quot;&gt;FormBuilder&lt;/a&gt;&lt;/code&gt; service has three methods: &lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder#control&quot;&gt;control()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder#group&quot;&gt;group()&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder#array&quot;&gt;array()&lt;/a&gt;&lt;/code&gt;. These are factory methods for generating instances in your component classes including form controls, form groups, and form arrays.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder&quot;&gt;FormBuilder&lt;/a&gt;&lt;/code&gt; 의 서비스는 세 가지 방법을 갖는다 : &lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder#control&quot;&gt;control()&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder#group&quot;&gt;group()&lt;/a&gt;&lt;/code&gt; , 및 &lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder#array&quot;&gt;array()&lt;/a&gt;&lt;/code&gt; . 이들은 폼 컨트롤, 폼 그룹 및 폼 배열을 포함하여 컴포넌트 클래스에서 인스턴스를 생성하는 팩토리 메소드입니다.</target>
        </trans-unit>
        <trans-unit id="a1aec13426a1cba49098c3f423a02468ea7f19b9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder&quot;&gt;FormBuilder&lt;/a&gt;&lt;/code&gt; service is an injectable provider that is provided with the reactive forms module. Inject this dependency by adding it to the component constructor.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder&quot;&gt;FormBuilder&lt;/a&gt;&lt;/code&gt; 의 서비스 반응성 형태의 모듈을 구비하는 주사 제공한다. 이 의존성을 컴포넌트 생성자에 추가하여 주입하십시오.</target>
        </trans-unit>
        <trans-unit id="66dd4a989eed4a636dae82c8167c5fb3f64ae0ed" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder&quot;&gt;FormBuilder&lt;/a&gt;&lt;/code&gt; service is provided by the &lt;code&gt;&lt;a href=&quot;../api/forms/reactiveformsmodule&quot;&gt;ReactiveFormsModule&lt;/a&gt;&lt;/code&gt;, which is already defined in the &lt;code&gt;AppModule&lt;/code&gt; you modified previously (in &lt;code&gt;app.module.ts&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder&quot;&gt;FormBuilder&lt;/a&gt;&lt;/code&gt; 의 서비스는에 의해 제공됩니다 &lt;code&gt;&lt;a href=&quot;../api/forms/reactiveformsmodule&quot;&gt;ReactiveFormsModule&lt;/a&gt;&lt;/code&gt; 이미 정의되어, &lt;code&gt;AppModule&lt;/code&gt; 당신은 (이전에 수정 &lt;code&gt;app.module.ts&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="b0d904487da6019bae00f65e8b4f4d62577ec312" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; class is the basic building block when using reactive forms. To register a single form control, import the &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; class into your component and create a new instance of the form control to save as a class property.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 의 반응 형태를 사용하는 경우 클래스는 기본 빌딩 블록입니다. 단일 폼 컨트롤을 등록하려면 &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 클래스를 구성 요소로 가져 와서 폼 속성의 새 인스턴스를 만들어 클래스 속성으로 저장하십시오.</target>
        </trans-unit>
        <trans-unit id="925fc2f850492caec6ce67dbf8116c7a303b111c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; instance emits the latest value through the &lt;code&gt;valueChanges&lt;/code&gt; observable.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 의 인스턴스를 통해 최신 값 방출 &lt;code&gt;valueChanges&lt;/code&gt; 관찰합니다.</target>
        </trans-unit>
        <trans-unit id="e08dfd1b765eeae5dddab9afb63ae6fbe7aaae9b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; instance emits the new value through the &lt;code&gt;valueChanges&lt;/code&gt; observable.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 의 인스턴스를 통해 새로운 가치 방출 &lt;code&gt;valueChanges&lt;/code&gt; 관찰합니다.</target>
        </trans-unit>
        <trans-unit id="4abd98b620b228f713556cb990a2f0f873bcf994" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; directive can change that behavior and set the value to something else. In the following example, the template reference variable, &lt;code&gt;itemForm&lt;/code&gt;, appears three times separated by HTML.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; 의 지시어는 그 동작을 변경하고 뭔가 다른 값을 설정할 수 있습니다. 다음 예제에서 템플릿 참조 변수 &lt;code&gt;itemForm&lt;/code&gt; 은 HTML로 세 번 구분되어 나타납니다.</target>
        </trans-unit>
        <trans-unit id="5879087109abd4866dfeed31d274c238360f5733" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; directive supplements the &lt;code&gt;form&lt;/code&gt; element with additional features. It holds the controls you created for the elements with an &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; directive and &lt;code&gt;name&lt;/code&gt; attribute, and monitors their properties, including their validity. It also has its own &lt;code&gt;valid&lt;/code&gt; property which is true only &lt;em&gt;if every contained control&lt;/em&gt; is valid.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; 지침을 보충 &lt;code&gt;form&lt;/code&gt; 추가 기능 요소입니다. &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; 지시문 및 &lt;code&gt;name&lt;/code&gt; 속성 을 사용하여 요소에 대해 만든 컨트롤을 보유 하고 유효성을 포함하여 속성을 모니터링합니다. 또한 자신이 &lt;code&gt;valid&lt;/code&gt; 경우에만 사실이다 재산 &lt;em&gt;모든 포함 된 컨트롤이 경우&lt;/em&gt; 유효합니다.</target>
        </trans-unit>
        <trans-unit id="bae2aaf5e364b7e1956a92af5673f84f9adeda8f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/forms/ngform#ngAfterViewInit&quot;&gt;ngAfterViewInit()&lt;/a&gt;&lt;/code&gt; lifecycle hook is an important wrinkle. The timer component isn't available until &lt;em&gt;after&lt;/em&gt; Angular displays the parent view. So it displays &lt;code&gt;0&lt;/code&gt; seconds initially.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/forms/ngform#ngAfterViewInit&quot;&gt;ngAfterViewInit()&lt;/a&gt;&lt;/code&gt; 주기 후크 중요한 주름이다. 타이머 구성 요소가 될 때까지 사용할 수 없습니다 &lt;em&gt;후&lt;/em&gt; 각도를 표시 부모보기. 따라서 처음 에는 &lt;code&gt;0&lt;/code&gt; 초를 표시합니다 .</target>
        </trans-unit>
        <trans-unit id="760596de2100ea9dc08bdebeed02a3519c7d1c8b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; directive allows you to display a data property and update that property when the user makes changes. Here's an example:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; 의 지시자는 데이터 속성을 표시하고 사용자가 변경을 할 때 해당 속성을 업데이트 할 수 있습니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="cf3af9a9fa73985dedfddeaec340442f862dd265" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; data property sets the element's value property and the &lt;code&gt;ngModelChange&lt;/code&gt; event property listens for changes to the element's value.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; 의 데이터 속성은 요소의 값과 속성 세트 &lt;code&gt;ngModelChange&lt;/code&gt; 요소의 값의 변화에 대한 이벤트 속성을 듣는다.</target>
        </trans-unit>
        <trans-unit id="fde09ec8f3662293d249077b17992ef49fc2032c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; directive, which implements two-way data binding, is an example of an attribute directive. &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; modifies the behavior of an existing element (typically &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;) by setting its display value property and responding to change events.</source>
          <target state="translated">양방향 데이터 바인딩을 구현 하는 &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; 지시문은 속성 지시문의 예입니다. &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; 은 표시 값 속성을 설정하고 변경 이벤트에 응답하여 기존 요소 (일반적으로 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; ) 의 동작을 수정 합니다.</target>
        </trans-unit>
        <trans-unit id="5d9b5b4fe9ab2fb60c6159e2c66f9b1c15feefcb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/platform-browser-dynamic/platformbrowserdynamic&quot;&gt;platformBrowserDynamic&lt;/a&gt;()&lt;/code&gt; method creates an injector configured by a &lt;code&gt;PlatformModule&lt;/code&gt;, which contains platform-specific dependencies. This allows multiple apps to share a platform configuration. For example, a browser has only one URL bar, no matter how many apps you have running. You can configure additional platform-specific providers at the platform level by supplying &lt;code&gt;extraProviders&lt;/code&gt; using the &lt;code&gt;&lt;a href=&quot;../api/platform-browser/platformbrowser&quot;&gt;platformBrowser&lt;/a&gt;()&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/platform-browser-dynamic/platformbrowserdynamic&quot;&gt;platformBrowserDynamic&lt;/a&gt;()&lt;/code&gt; 메소드는로 구성된 인젝터 생성 &lt;code&gt;PlatformModule&lt;/code&gt; 플랫폼 별 종속성을 포함. 이를 통해 여러 앱이 플랫폼 구성을 공유 할 수 있습니다. 예를 들어 브라우저에는 실행중인 앱 수에 관계없이 하나의 URL 표시 줄 만 있습니다. &lt;code&gt;&lt;a href=&quot;../api/platform-browser/platformbrowser&quot;&gt;platformBrowser&lt;/a&gt;()&lt;/code&gt; () 함수를 사용하여 &lt;code&gt;extraProviders&lt;/code&gt; 를 제공하여 플랫폼 수준에서 추가 플랫폼 별 공급자를 구성 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f37d8e3d33ca8ebc56e260052933af141475551f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/platform-browser/by#css&quot;&gt;By.css()&lt;/a&gt;&lt;/code&gt; static method selects &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; nodes with a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Getting_started/Selectors&quot;&gt;standard CSS selector&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/platform-browser/by#css&quot;&gt;By.css()&lt;/a&gt;&lt;/code&gt; 정적 방법 선택 &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; 의 A를 노드 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Getting_started/Selectors&quot;&gt;표준 CSS 선택기&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="f31ffdeeac5f4aa667f7c349fd0fa92694671220" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/platform-server/rendermodulefactory&quot;&gt;renderModuleFactory&lt;/a&gt;()&lt;/code&gt; function takes as inputs a &lt;em&gt;template&lt;/em&gt; HTML page (usually &lt;code&gt;index.html&lt;/code&gt;), an Angular &lt;em&gt;module&lt;/em&gt; containing components, and a &lt;em&gt;route&lt;/em&gt; that determines which components to display. The route comes from the client's request to the server.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/platform-server/rendermodulefactory&quot;&gt;renderModuleFactory&lt;/a&gt;()&lt;/code&gt; 함수를 입력으로서 취 &lt;em&gt;템플릿&lt;/em&gt; HTML 페이지 (일반적 &lt;code&gt;index.html&lt;/code&gt; ) 각도 &lt;em&gt;모듈&lt;/em&gt; 성분을 포함, 및 &lt;em&gt;경로를&lt;/em&gt; 표시하는 것을 결정하는 요소. 경로는 클라이언트의 요청에서 서버로옵니다.</target>
        </trans-unit>
        <trans-unit id="17d0dc10d2712c04c9ddf4132743725ecd2ca468" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; and its observables are insulated from the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; itself. The &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; destroys a routed component when it is no longer needed and the injected &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; dies with it.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; 및 관찰 가능한이 절연되어 &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; 자체. &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; 가 더 이상 필요하지 않으며이 주입 될 때 라우팅 구성 요소를 파괴 &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; 의 그것과 다이.</target>
        </trans-unit>
        <trans-unit id="ee5d82b8904589c98b1aff4a8285582c106117cc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; is specific to each routed component loaded by the Angular Router. It contains information about the route, its parameters, and additional data associated with the route.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; 는 각 라우터에 의해로드 된 각 라우팅 구성 요소에 따라 다릅니다. 여기에는 경로, 해당 매개 변수 및 경로와 관련된 추가 데이터에 대한 정보가 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="62d4b299a442f9b6c2574a227699c880a07b173f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute#paramMap&quot;&gt;ActivatedRoute.paramMap&lt;/a&gt;&lt;/code&gt; property is an &lt;code&gt;Observable&lt;/code&gt; map of route parameters. The &lt;code&gt;paramMap&lt;/code&gt; emits a new map of values that includes &lt;code&gt;id&lt;/code&gt; when the user navigates to the component. In &lt;code&gt;ngOnInit&lt;/code&gt; you subscribe to those values, set the &lt;code&gt;selectedId&lt;/code&gt;, and get the heroes.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/activatedroute#paramMap&quot;&gt;ActivatedRoute.paramMap&lt;/a&gt;&lt;/code&gt; 의 속성은입니다 &lt;code&gt;Observable&lt;/code&gt; 루트 매개 변수의지도. &lt;code&gt;paramMap&lt;/code&gt; 가 포함 값의 새지도 출사 &lt;code&gt;id&lt;/code&gt; 성분 때 사용자를 탐색한다. 에서 &lt;code&gt;ngOnInit&lt;/code&gt; 당신은 설정된 값에 가입 &lt;code&gt;selectedId&lt;/code&gt; , 그리고 영웅을 얻을.</target>
        </trans-unit>
        <trans-unit id="27d7deeeac83ea9a20c6f580c5c055c452a6dc3a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/router/activatedroutesnapshot&quot;&gt;ActivatedRouteSnapshot&lt;/a&gt;&lt;/code&gt; contains the &lt;em&gt;future&lt;/em&gt; route that will be activated and the &lt;code&gt;&lt;a href=&quot;../api/router/routerstatesnapshot&quot;&gt;RouterStateSnapshot&lt;/a&gt;&lt;/code&gt; contains the &lt;em&gt;future&lt;/em&gt;&lt;code&gt;&lt;a href=&quot;../api/router/routerstate&quot;&gt;RouterState&lt;/a&gt;&lt;/code&gt; of the application, should you pass through the guard check.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/activatedroutesnapshot&quot;&gt;ActivatedRouteSnapshot&lt;/a&gt;&lt;/code&gt; 는 포함 &lt;em&gt;미래&lt;/em&gt; 활성화됩니다 경로를하고 &lt;code&gt;&lt;a href=&quot;../api/router/routerstatesnapshot&quot;&gt;RouterStateSnapshot&lt;/a&gt;&lt;/code&gt; 는 포함 &lt;em&gt;미래 &lt;/em&gt; &lt;code&gt;&lt;a href=&quot;../api/router/routerstate&quot;&gt;RouterState&lt;/a&gt;&lt;/code&gt; 당신은 가드 검사를 통과해야, 응용 프로그램을.</target>
        </trans-unit>
        <trans-unit id="8280edbadaeff4ac7aa0d1cdde3cf47b0531bddc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/router/canactivate&quot;&gt;CanActivate&lt;/a&gt;&lt;/code&gt; guard (checking route access).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/canactivate&quot;&gt;CanActivate&lt;/a&gt;&lt;/code&gt; 의 가드 (루트 액세스를 확인).</target>
        </trans-unit>
        <trans-unit id="a99606469d1a4cc7742bcfbd4bf5ec1a040063c8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/router/canactivate&quot;&gt;CanActivate&lt;/a&gt;&lt;/code&gt; guard is the tool to manage these navigation business rules.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/canactivate&quot;&gt;CanActivate&lt;/a&gt;&lt;/code&gt; 의 가드는 이러한 탐색 비즈니스 규칙을 관리 할 수있는 도구입니다.</target>
        </trans-unit>
        <trans-unit id="afb0b82efd7f4359cd956f034c1e2538d351b8a6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/router/canactivatechild&quot;&gt;CanActivateChild&lt;/a&gt;&lt;/code&gt; guard (checking child route access).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/canactivatechild&quot;&gt;CanActivateChild&lt;/a&gt;&lt;/code&gt; 의 가드 (하위 경로 액세스를 확인).</target>
        </trans-unit>
        <trans-unit id="34dffab7359c14331079d08669b2d615efde3d13" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/router/candeactivate&quot;&gt;CanDeactivate&lt;/a&gt;&lt;/code&gt; guard (ask permission to discard unsaved changes).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/candeactivate&quot;&gt;CanDeactivate&lt;/a&gt;&lt;/code&gt; 의 가드 (저장되지 않은 변경 사항을 취소 할 수있는 권한을 요청).</target>
        </trans-unit>
        <trans-unit id="14db661cec9c3568b5135b43665bfcbfcd4b9253" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/router/canload&quot;&gt;CanLoad&lt;/a&gt;&lt;/code&gt; guard (check before loading feature module assets).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/canload&quot;&gt;CanLoad&lt;/a&gt;&lt;/code&gt; 의 가드 (로딩 기능 모듈 자산 체크인 전).</target>
        </trans-unit>
        <trans-unit id="8c0d90c801c00fb60055fc74e159942da215c885" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/router/parammap&quot;&gt;ParamMap&lt;/a&gt;&lt;/code&gt; API is inspired by the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams&quot;&gt;URLSearchParams interface&lt;/a&gt;. It provides methods to handle parameter access for both route parameters (&lt;code&gt;paramMap&lt;/code&gt;) and query parameters (&lt;code&gt;queryParamMap&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/parammap&quot;&gt;ParamMap&lt;/a&gt;&lt;/code&gt; 의 API는 영감 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams&quot;&gt;URLSearchParams 인터페이스&lt;/a&gt; . 라우트 매개 변수 ( &lt;code&gt;paramMap&lt;/code&gt; ) 및 쿼리 매개 변수 ( &lt;code&gt;queryParamMap&lt;/code&gt; ) 모두에 대한 매개 변수 액세스를 처리하는 메소드를 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="87e23084f4ca0468a6304206815831e8e9c49089" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/router/preloadallmodules&quot;&gt;PreloadAllModules&lt;/a&gt;&lt;/code&gt; strategy does not load feature areas protected by a &lt;a href=&quot;router#can-load-guard&quot;&gt;CanLoad&lt;/a&gt; guard. This is by design.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/preloadallmodules&quot;&gt;PreloadAllModules&lt;/a&gt;&lt;/code&gt; 의 전략은 보호 기능 영역로드되지 않는 &lt;a href=&quot;router#can-load-guard&quot;&gt;CanLoad의&lt;/a&gt; 가드. 이것은 의도적으로 설계된 동작입니다.</target>
        </trans-unit>
        <trans-unit id="c61a6fdcf13e9c86ff5a44bd92f179ae4c17aa7f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/router/resolve&quot;&gt;Resolve&lt;/a&gt;&lt;/code&gt; guard (pre-fetching route data).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/resolve&quot;&gt;Resolve&lt;/a&gt;&lt;/code&gt; 가드 (경로 데이터를-가져 오는 사전).</target>
        </trans-unit>
        <trans-unit id="f2eb75bb4ecb58de1eaa6fa343d6391a23d96005" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; also supports &lt;a href=&quot;router#query-parameters&quot;&gt;query parameters&lt;/a&gt; and the &lt;a href=&quot;router#fragment&quot;&gt;fragment&lt;/a&gt; when using redirects.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; 도 지원 &lt;a href=&quot;router#query-parameters&quot;&gt;쿼리 매개 변수&lt;/a&gt; 와 &lt;a href=&quot;router#fragment&quot;&gt;조각&lt;/a&gt; 리디렉션을 사용.</target>
        </trans-unit>
        <trans-unit id="47609ad3349203dba5c6265eb5fab99ea5f3e365" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; matches that URL to a route to the &lt;code&gt;HeroDetailComponent&lt;/code&gt;. It creates an &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; object with the routing information and injects it into a new instance of the &lt;code&gt;HeroDetailComponent&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; 받는 경로에 해당 URL과 일치 &lt;code&gt;HeroDetailComponent&lt;/code&gt; . 라우팅 정보와 함께 &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; 객체를 생성하고 이를 &lt;code&gt;HeroDetailComponent&lt;/code&gt; 의 새 인스턴스에 주입합니다 .</target>
        </trans-unit>
        <trans-unit id="21fe55f6896e40418d589006b8cbc60c2be0bf3a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; module is an &lt;a href=&quot;glossary#ngmodule&quot;&gt;NgModule&lt;/a&gt; that provides the necessary service providers and directives for navigating through application views. A &lt;a href=&quot;glossary#routing-component&quot;&gt;routing component&lt;/a&gt; is one that imports the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; module and whose template contains a &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; element where it can display views produced by the router.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; 모듈은입니다 &lt;a href=&quot;glossary#ngmodule&quot;&gt;NgModule&lt;/a&gt; 응용 프로그램보기 탐색에 대한 서비스 제공 및 지침 필요한을 제공합니다. &lt;a href=&quot;glossary#routing-component&quot;&gt;라우팅 성분&lt;/a&gt; 하나임을 반입 &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; 그 템플릿 포함 모듈 &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; 의 이 라우터에 의해 생성 된 뷰를 표시 할 수있는 소자.</target>
        </trans-unit>
        <trans-unit id="1647cd0123077158e4b17948253f8bbd17f93811" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; offers two preloading strategies out of the box:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; 는 기본적으로 두 가지 사전로드 전략을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="59c3b172b152b721b1e9a71592d0d755b58d2153" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; supports &lt;em&gt;empty path&lt;/em&gt; routes; use them to group routes together without adding any additional path segments to the URL. Users will still visit &lt;code&gt;/admin&lt;/code&gt; and the &lt;code&gt;AdminComponent&lt;/code&gt; still serves as the &lt;em&gt;Routing Component&lt;/em&gt; containing child routes.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; 지원 &lt;em&gt;빈 경로&lt;/em&gt; 경로를; URL에 경로 세그먼트를 추가하지 않고 경로를 그룹화하는 데 사용합니다. 사용자는 여전히 &lt;code&gt;/admin&lt;/code&gt; 을 방문 하고 &lt;code&gt;AdminComponent&lt;/code&gt; 는 여전히 자식 경로를 포함 하는 &lt;em&gt;라우팅 구성 요소&lt;/em&gt; 로 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="0959a563cb3265074d00520e70abc0842cae2d5d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; directives on the anchor tags give the router control over those elements. The navigation paths are fixed, so you can assign a string to the &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;&lt;/code&gt; (a &quot;one-time&quot; binding).</source>
          <target state="translated">앵커 태그 의 &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; 지시문은 라우터가 해당 요소를 제어하도록합니다. 탐색 경로는 고정되어 있으므로 &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;&lt;/code&gt; 에 문자열을 할당 할 수 있습니다 ( &quot;일회성&quot;바인딩).</target>
        </trans-unit>
        <trans-unit id="f8657a5f3d772af4293fc4eba88a13d37bf61236" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkactive&quot;&gt;RouterLinkActive&lt;/a&gt;&lt;/code&gt; directive toggles css classes for active &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; bindings based on the current &lt;code&gt;&lt;a href=&quot;../api/router/routerstate&quot;&gt;RouterState&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/routerlinkactive&quot;&gt;RouterLinkActive&lt;/a&gt;&lt;/code&gt; 지시어는 활성에 대한 CSS 클래스 전환 &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; 의 현재를 기반으로 바인딩 &lt;code&gt;&lt;a href=&quot;../api/router/routerstate&quot;&gt;RouterState&lt;/a&gt;&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="0c7995bb70f0ae0cf3627366c5543ac5c032ac8b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt; function sets the &lt;code&gt;&lt;a href=&quot;../api/common/locationstrategy&quot;&gt;LocationStrategy&lt;/a&gt;&lt;/code&gt; to the &lt;code&gt;&lt;a href=&quot;../api/common/pathlocationstrategy&quot;&gt;PathLocationStrategy&lt;/a&gt;&lt;/code&gt;, making it the default strategy. You can switch to the &lt;code&gt;&lt;a href=&quot;../api/common/hashlocationstrategy&quot;&gt;HashLocationStrategy&lt;/a&gt;&lt;/code&gt; with an override during the bootstrapping process if you prefer it.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt; 함수는 설정 &lt;code&gt;&lt;a href=&quot;../api/common/locationstrategy&quot;&gt;LocationStrategy&lt;/a&gt;&lt;/code&gt; 을 받는 &lt;code&gt;&lt;a href=&quot;../api/common/pathlocationstrategy&quot;&gt;PathLocationStrategy&lt;/a&gt;&lt;/code&gt; 그 기본 전략 만들기. 원하는 경우 부트 스트랩 프로세스 중에 재정의 를 사용하여 &lt;code&gt;&lt;a href=&quot;../api/common/hashlocationstrategy&quot;&gt;HashLocationStrategy&lt;/a&gt;&lt;/code&gt; 로 전환 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="9bf9938fff728d1cd8889ad751fddb80b83e9050" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; configuration method takes an &lt;code&gt;InMemoryDataService&lt;/code&gt; class that primes the in-memory database.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; 의 구성 방법은 소요 &lt;code&gt;InMemoryDataService&lt;/code&gt; 의 인 - 메모리 데이터베이스를 소수가 클래스.</target>
        </trans-unit>
        <trans-unit id="2684614a1ecc2d98495d86f9bbe58a84c69aafc1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; method takes care of the &lt;em&gt;global&lt;/em&gt; injector configuration for the Router. The &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forChild&quot;&gt;forChild()&lt;/a&gt;&lt;/code&gt; method has no injector configuration. It uses directives such as &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt;. For more information, see the &lt;a href=&quot;singleton-services#forRoot&quot;&gt;&lt;code&gt;forRoot()&lt;/code&gt; pattern&lt;/a&gt; section of the &lt;a href=&quot;singleton-services&quot;&gt;Singleton Services&lt;/a&gt; guide.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; 메소드는을 담당 &lt;em&gt;글로벌&lt;/em&gt; 라우터에 대한 인젝터 구성. &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forChild&quot;&gt;forChild()&lt;/a&gt;&lt;/code&gt; 메소드는 인젝터 구성이 없다. &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; 와 같은 지시문을 사용합니다 . 자세한 내용 은 &lt;a href=&quot;singleton-services&quot;&gt;Singleton Services&lt;/a&gt; Guide 의 &lt;a href=&quot;singleton-services#forRoot&quot;&gt; &lt;code&gt;forRoot()&lt;/code&gt; 패턴&lt;/a&gt; 섹션을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="ac02a174bb651f87b3bb3995379d09ef25a0ff1e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; pattern</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; 패턴</target>
        </trans-unit>
        <trans-unit id="678d09ad88def2247372c3a4a6393c3c2434c878" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; static method is a convention that makes it easy for developers to configure services and providers that are intended to be singletons. A good example of &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; is the &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; 정적 방법은 싱글이 될하기위한 것입니다 구성 서비스 및 제공에 대한 개발자를위한 쉬운을 만드는 규칙이다. &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; 의 좋은 예 는 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt; 메소드입니다.</target>
        </trans-unit>
        <trans-unit id="3828bf90aca6ba2f62f1c10e3b2552f116a1db1a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; is a directive from the router library that is used like a component. It acts as a placeholder that marks the spot in the template where the router should display the components for that outlet.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; 는 컴포넌트처럼 사용되는 라우터 라이브러리에서 지정된다. 라우터가 해당 콘센트의 구성 요소를 표시해야하는 템플릿의 지점을 표시하는 자리 표시 자 역할을합니다.</target>
        </trans-unit>
        <trans-unit id="d74a774153ea254ddecf646ba8eaac93785e276f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; is one of the router directives that became available to the &lt;code&gt;AppComponent&lt;/code&gt; because &lt;code&gt;AppModule&lt;/code&gt; imports &lt;code&gt;AppRoutingModule&lt;/code&gt; which exported &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; 는 받는 가능하게되었다 라우터 지침 중 하나입니다 &lt;code&gt;AppComponent&lt;/code&gt; 때문에 &lt;code&gt;AppModule&lt;/code&gt; 의 수입 &lt;code&gt;AppRoutingModule&lt;/code&gt; 가 내 보낸 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="98421694d6873683d8adc6a2570f7e017b62f4ed" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/service-worker/swupdate&quot;&gt;SwUpdate&lt;/a&gt;&lt;/code&gt; service gives you access to events that indicate when the service worker has discovered an available update for your app or when it has activated such an update&amp;mdash;meaning it is now serving content from that update to your app.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/service-worker/swupdate&quot;&gt;SwUpdate&lt;/a&gt;&lt;/code&gt; 의 서비스는 당신에게 서비스 작업자 앱 또는이 활성화 될 때 이러한 지금 앱에 업데이트되는 콘텐츠를 제공하고있다 갱신 의미에 대해 사용 가능한 업데이트를 발견했을 때 나타 이벤트에 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f8f699f83b8111047f49e6cbc19f04ff13424e11" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/service-worker/swupdate&quot;&gt;SwUpdate&lt;/a&gt;&lt;/code&gt; service supports four separate operations:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/service-worker/swupdate&quot;&gt;SwUpdate&lt;/a&gt;&lt;/code&gt; 의 서비스는 네 개의 개별 작업을 지원합니다 :</target>
        </trans-unit>
        <trans-unit id="bc582fd99dd06940465b5d3c501d9db0b81efaf6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; will invoke the AngularJS &lt;code&gt;$rootScope.$apply()&lt;/code&gt; after every turn of the Angular zone. This also triggers AngularJS change detection after every event.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; 는 AngularJS와 호출합니다 &lt;code&gt;$rootScope.$apply()&lt;/code&gt; 각 영역의 모든 회전 후. 또한 모든 이벤트 후에 AngularJS 변경 감지를 트리거합니다.</target>
        </trans-unit>
        <trans-unit id="e84a1329251cd9c2fbb8229ea5249e31361e93bb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../core/testing/async&quot;&gt;async&lt;/a&gt;&lt;/code&gt; pipe subscribes to an &lt;code&gt;Observable&lt;/code&gt; or &lt;code&gt;Promise&lt;/code&gt; and returns the latest value it has emitted. When a new value is emitted, the &lt;code&gt;&lt;a href=&quot;../core/testing/async&quot;&gt;async&lt;/a&gt;&lt;/code&gt; pipe marks the component to be checked for changes. When the component gets destroyed, the &lt;code&gt;&lt;a href=&quot;../core/testing/async&quot;&gt;async&lt;/a&gt;&lt;/code&gt; pipe unsubscribes automatically to avoid potential memory leaks.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../core/testing/async&quot;&gt;async&lt;/a&gt;&lt;/code&gt; 파이프는 구독 &lt;code&gt;Observable&lt;/code&gt; 또는 &lt;code&gt;Promise&lt;/code&gt; 이 방출 한 최신 값으로 돌아갑니다. 새로운 값이 나오면, &lt;code&gt;&lt;a href=&quot;../core/testing/async&quot;&gt;async&lt;/a&gt;&lt;/code&gt; 파이프는 변경 사항을 확인할 구성 요소를 표시합니다. 구성 요소가 손상 되면 &lt;code&gt;&lt;a href=&quot;../core/testing/async&quot;&gt;async&lt;/a&gt;&lt;/code&gt; 파이프가 자동으로 구독을 취소하여 잠재적 인 메모리 누수를 방지합니다.</target>
        </trans-unit>
        <trans-unit id="c3132cfc546b1bdf952329e52271f45aff98383a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../static&quot;&gt;upgrade/static&lt;/a&gt;&lt;/code&gt; package contains helpers that allow AngularJS and Angular components to be used together inside a hybrid upgrade application, which supports AoT compilation.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../static&quot;&gt;upgrade/static&lt;/a&gt;&lt;/code&gt; 패키지는 AngularJS와 및 각도 구성 요소가 AOT 컴파일을 지원하는 하이브리드 업그레이드 응용 프로그램 내에서 함께 사용할 수 있도록 도우미가 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="752b1abdffae69bdf4168440e2e9cb777c33b581" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;&lt;/code&gt; control to replace the existing control</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;&lt;/code&gt; 의 컨트롤은 기존의 제어를 대체하는</target>
        </trans-unit>
        <trans-unit id="60977a7c3bb769794d3c2f89211320ea518117b8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; exports are re-exported by &lt;code&gt;&lt;a href=&quot;platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt;, which is included automatically in the root &lt;code&gt;AppModule&lt;/code&gt; when you create a new app with the CLI &lt;code&gt;new&lt;/code&gt; command.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; 의 수출은 재수출가 있습니다 &lt;code&gt;&lt;a href=&quot;platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; 자동으로 루트에 포함되어 &lt;code&gt;AppModule&lt;/code&gt; 당신이 CLI와 새로운 응용 프로그램 만들 때 &lt;code&gt;new&lt;/code&gt; 명령을.</target>
        </trans-unit>
        <trans-unit id="f016d8816fcfa69165aee6fbb999c091f83bf43a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;&lt;/code&gt; for writing a number value and listening to number input changes. The value accessor is used by the &lt;code&gt;&lt;a href=&quot;formcontroldirective&quot;&gt;FormControlDirective&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;formcontrolname&quot;&gt;FormControlName&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; directives.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;&lt;/code&gt; 숫자 값 작성 및 번호 입력 변화 청취. 값 접근자는 &lt;code&gt;&lt;a href=&quot;formcontroldirective&quot;&gt;FormControlDirective&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;formcontrolname&quot;&gt;FormControlName&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; 지시문에서 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="48f6ec592cff0cf9d0aff197b282590da64cb58e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;&lt;/code&gt; for writing a range value and listening to range input changes. The value accessor is used by the &lt;code&gt;&lt;a href=&quot;formcontroldirective&quot;&gt;FormControlDirective&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;formcontrolname&quot;&gt;FormControlName&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; directives.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;&lt;/code&gt; 범위의 값을 기록하고, 입력 범위의 변화를 청취. 값 접근자는 &lt;code&gt;&lt;a href=&quot;formcontroldirective&quot;&gt;FormControlDirective&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;formcontrolname&quot;&gt;FormControlName&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; 지시문에서 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="27bb0eddd953d2a41d5154c0bba7e4f6f544cc06" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;&lt;/code&gt; for writing multi-select control values and listening to multi-select control changes. The value accessor is used by the &lt;code&gt;&lt;a href=&quot;formcontroldirective&quot;&gt;FormControlDirective&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;formcontrolname&quot;&gt;FormControlName&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; directives.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;&lt;/code&gt; 다중 선택 제어 값을 작성하고 다중 선택 컨트롤 변경을 듣고합니다. 값 접근자는 &lt;code&gt;&lt;a href=&quot;formcontroldirective&quot;&gt;FormControlDirective&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;formcontrolname&quot;&gt;FormControlName&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; 지시문에서 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="8a6f7acc93e4d52ce15e418ed2762c1637e0216e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;&lt;/code&gt; for writing radio control values and listening to radio control changes. The value accessor is used by the &lt;code&gt;&lt;a href=&quot;formcontroldirective&quot;&gt;FormControlDirective&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;formcontrolname&quot;&gt;FormControlName&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; directives.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;&lt;/code&gt; 라디오 컨트롤 값을 쓰고 라디오 컨트롤 변경을 듣고합니다. 값 접근자는 &lt;code&gt;&lt;a href=&quot;formcontroldirective&quot;&gt;FormControlDirective&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;formcontrolname&quot;&gt;FormControlName&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; 지시문에서 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="f1148900a1718d2df24d36a4cbd007c9c92b9a79" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;&lt;/code&gt; for writing select control values and listening to select control changes. The value accessor is used by the &lt;code&gt;&lt;a href=&quot;formcontroldirective&quot;&gt;FormControlDirective&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;formcontrolname&quot;&gt;FormControlName&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; directives.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;&lt;/code&gt; 선택 제어 값을 작성하고 컨트롤 변경을 선택 청취. 값 접근자는 &lt;code&gt;&lt;a href=&quot;formcontroldirective&quot;&gt;FormControlDirective&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;formcontrolname&quot;&gt;FormControlName&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; 지시문에서 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="16103ac1afe681300c7a23cc043ef06beb4a7047" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;elements/createcustomelement&quot;&gt;createCustomElement&lt;/a&gt;()&lt;/code&gt; function provides a bridge from Angular's component interface and change detection functionality to the built-in DOM API.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;elements/createcustomelement&quot;&gt;createCustomElement&lt;/a&gt;()&lt;/code&gt; 기능이 내장 된 DOM API에 각도의 컴포넌트 인터페이스 변경 감지 기능에서 다리를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="ee8ac75a2b9c5aee4a1cebe857ca226adf40cf76" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; bound to this directive.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; 는 이 지침에 바인딩.</target>
        </trans-unit>
        <trans-unit id="7270e358ccf5aaada34c49677df7b3e14375ded5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;formarrayname&quot;&gt;FormArrayName&lt;/a&gt;&lt;/code&gt; directive instance.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;formarrayname&quot;&gt;FormArrayName&lt;/a&gt;&lt;/code&gt; 의 지침 인스턴스입니다.</target>
        </trans-unit>
        <trans-unit id="cc714487b764ae3e9d84f7190d1dfb0cc3b0870c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;formbuilder&quot;&gt;FormBuilder&lt;/a&gt;&lt;/code&gt; provides syntactic sugar that shortens creating instances of a &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt;. It reduces the amount of boilerplate needed to build complex forms.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;formbuilder&quot;&gt;FormBuilder&lt;/a&gt;&lt;/code&gt; 은 짧아은 인스턴스 생성하는 것이 문법적 제공 &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; , 또는 &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; 을 . 복잡한 형태를 만드는 데 필요한 상용구의 양을 줄입니다.</target>
        </trans-unit>
        <trans-unit id="850b4ce7a3a59e14b92b60a445f357fdbf2fe0f8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; bound to this directive.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 은 이 지침에 바인딩.</target>
        </trans-unit>
        <trans-unit id="8d22d6266b6398a65b4e3e7fe6142ffe7a2c64b2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; instance tracks the value, user interaction, and validation status of the control and keeps the view synced with the model. If used within a parent form, the directive also registers itself with the form as a child control.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 의 인스턴스는 컨트롤의 값, 사용자 상호 작용 및 검증의 상태를 추적하고 모델과 동기화 뷰를 유지합니다. 부모 폼 내에서 사용될 경우, 지시문은 폼에 자식 컨트롤로 등록됩니다.</target>
        </trans-unit>
        <trans-unit id="93fad32c1a184c4d364a5daa7659977bd1a3cfff" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;formcontrolname&quot;&gt;FormControlName&lt;/a&gt;&lt;/code&gt; directive instance.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;formcontrolname&quot;&gt;FormControlName&lt;/a&gt;&lt;/code&gt; 의 지침 인스턴스입니다.</target>
        </trans-unit>
        <trans-unit id="801ce0c4ea960713beae25efb9571c6b96674579" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; associated with a particular &lt;code&gt;&lt;a href=&quot;abstractformgroupdirective&quot;&gt;AbstractFormGroupDirective&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 특정과 관련된 &lt;code&gt;&lt;a href=&quot;abstractformgroupdirective&quot;&gt;AbstractFormGroupDirective&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="612e978f37e7706fc06192d6e7c9d3657175c9c6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; bound to this directive.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 는 이 지침에 바인딩.</target>
        </trans-unit>
        <trans-unit id="ef29ac55227f5beca2e703c6f3ce56a2c65b38c6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; instance created for this form.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 의 양식을 위해 생성 된 인스턴스.</target>
        </trans-unit>
        <trans-unit id="ad8e8d6f83cfec04008d3c28ea120b7fb0022efd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;formgroupname&quot;&gt;FormGroupName&lt;/a&gt;&lt;/code&gt; directive instance.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;formgroupname&quot;&gt;FormGroupName&lt;/a&gt;&lt;/code&gt; 의 지침 인스턴스입니다.</target>
        </trans-unit>
        <trans-unit id="9f8bac942c174f8f843f6218a20ac2bc1584df80" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;forms/controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;&lt;/code&gt; for writing a number value and listening to number input changes. The value accessor is used by the &lt;code&gt;&lt;a href=&quot;forms/formcontroldirective&quot;&gt;FormControlDirective&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;forms/formcontrolname&quot;&gt;FormControlName&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;forms/ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; directives.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;forms/controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;&lt;/code&gt; 숫자 값 작성 및 번호 입력 변화 청취. 값 접근자는 &lt;code&gt;&lt;a href=&quot;forms/formcontroldirective&quot;&gt;FormControlDirective&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;forms/formcontrolname&quot;&gt;FormControlName&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;forms/ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; 지시문에서 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="aace7891efa5898083cb4a8b6c06104aec931f83" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;forms/controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;&lt;/code&gt; for writing a range value and listening to range input changes. The value accessor is used by the &lt;code&gt;&lt;a href=&quot;forms/formcontroldirective&quot;&gt;FormControlDirective&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;forms/formcontrolname&quot;&gt;FormControlName&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;forms/ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; directives.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;forms/controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;&lt;/code&gt; 범위의 값을 기록하고, 입력 범위의 변화를 청취. 값 접근자는 &lt;code&gt;&lt;a href=&quot;forms/formcontroldirective&quot;&gt;FormControlDirective&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;forms/formcontrolname&quot;&gt;FormControlName&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;forms/ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; 지시문에서 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="6bbe745964444088faf3ae89051254babe77ae2a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;forms/controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;&lt;/code&gt; for writing multi-select control values and listening to multi-select control changes. The value accessor is used by the &lt;code&gt;&lt;a href=&quot;forms/formcontroldirective&quot;&gt;FormControlDirective&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;forms/formcontrolname&quot;&gt;FormControlName&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;forms/ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; directives.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;forms/controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;&lt;/code&gt; 다중 선택 제어 값을 작성하고 다중 선택 컨트롤 변경을 듣고합니다. 값 접근자는 &lt;code&gt;&lt;a href=&quot;forms/formcontroldirective&quot;&gt;FormControlDirective&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;forms/formcontrolname&quot;&gt;FormControlName&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;forms/ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; 지시문에서 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="4d1e7c68b482004d56ddf05c6d90fff65212326f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;forms/controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;&lt;/code&gt; for writing radio control values and listening to radio control changes. The value accessor is used by the &lt;code&gt;&lt;a href=&quot;forms/formcontroldirective&quot;&gt;FormControlDirective&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;forms/formcontrolname&quot;&gt;FormControlName&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;forms/ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; directives.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;forms/controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;&lt;/code&gt; 라디오 컨트롤 값을 쓰고 라디오 컨트롤 변경을 듣고합니다. 값 접근자는 &lt;code&gt;&lt;a href=&quot;forms/formcontroldirective&quot;&gt;FormControlDirective&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;forms/formcontrolname&quot;&gt;FormControlName&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;forms/ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; 지시문에서 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="b783ac6bf4e725f603e628f0ee838444f2369886" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;forms/controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;&lt;/code&gt; for writing select control values and listening to select control changes. The value accessor is used by the &lt;code&gt;&lt;a href=&quot;forms/formcontroldirective&quot;&gt;FormControlDirective&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;forms/formcontrolname&quot;&gt;FormControlName&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;forms/ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; directives.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;forms/controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;&lt;/code&gt; 선택 제어 값을 작성하고 컨트롤 변경을 선택 청취. 값 접근자는 &lt;code&gt;&lt;a href=&quot;forms/formcontroldirective&quot;&gt;FormControlDirective&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;forms/formcontrolname&quot;&gt;FormControlName&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;forms/ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; 지시문에서 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="3855ab70e68f971860bf678533a96d1491488cb0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;httprequest#responseType&quot;&gt;responseType&lt;/a&gt;&lt;/code&gt; value determines how a successful response body is parsed.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;httprequest#responseType&quot;&gt;responseType&lt;/a&gt;&lt;/code&gt; 의 값은 성공적으로 응답 본문은 구문 분석 방법을 결정합니다.</target>
        </trans-unit>
        <trans-unit id="c81bb386aab2ceb16fe7911f0dc2f4d144946406" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ngcontrol&quot;&gt;NgControl&lt;/a&gt;&lt;/code&gt; directive instance.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ngcontrol&quot;&gt;NgControl&lt;/a&gt;&lt;/code&gt; 의 지침 인스턴스입니다.</target>
        </trans-unit>
        <trans-unit id="d63e7454a683dccf5ba2f06aaad94bd636915124" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ngforof&quot;&gt;ngForOf&lt;/a&gt;&lt;/code&gt; directive is generally used in the &lt;a href=&quot;../../guide/structural-directives#the-asterisk--prefix&quot;&gt;shorthand form&lt;/a&gt;&lt;code&gt;*&lt;a href=&quot;ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt;. In this form, the template to be rendered for each iteration is the content of an anchor element containing the directive.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ngforof&quot;&gt;ngForOf&lt;/a&gt;&lt;/code&gt; 의 지침은 일반적으로 사용되는 &lt;a href=&quot;../../guide/structural-directives#the-asterisk--prefix&quot;&gt;속기 양식 &lt;/a&gt; &lt;code&gt;*&lt;a href=&quot;ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; . 이 형식에서 각 반복에 대해 렌더링 될 템플리트는 지시문을 포함하는 앵커 요소의 컨텐츠입니다.</target>
        </trans-unit>
        <trans-unit id="ce10e6bc2f600bbe290d97323968acbf78a1a9dd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; directive instance.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; 의 지침 인스턴스입니다.</target>
        </trans-unit>
        <trans-unit id="08aeb1d8b8421374a5c2ea9c2371614dc9182b9c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ngmodelgroup&quot;&gt;NgModelGroup&lt;/a&gt;&lt;/code&gt; directive instance.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ngmodelgroup&quot;&gt;NgModelGroup&lt;/a&gt;&lt;/code&gt; 의 지침 인스턴스입니다.</target>
        </trans-unit>
        <trans-unit id="496ed3f692f3ec8115c36370a54ff9294c2d8673" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; is included by default in any app created through the CLI, and it re-exports the &lt;code&gt;&lt;a href=&quot;common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;core/applicationmodule&quot;&gt;ApplicationModule&lt;/a&gt;&lt;/code&gt; exports, making basic Angular functionality available to the app.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; 은 CLI를 통해 생성 된 모든 응용 프로그램에 기본적으로 포함하고 다시 보냅니다되어 &lt;code&gt;&lt;a href=&quot;common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;core/applicationmodule&quot;&gt;ApplicationModule&lt;/a&gt;&lt;/code&gt; 의 수출, 응용 프로그램에 기본 각도 기능을 사용할 수 있도록.</target>
        </trans-unit>
        <trans-unit id="6a6ae8a3c165d3ac08575bb713450a7d5f9b67e9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;platformlocation&quot;&gt;PlatformLocation&lt;/a&gt;&lt;/code&gt; class is used directly by all implementations of &lt;a href=&quot;locationstrategy&quot;&gt;&lt;code&gt;LocationStrategy&lt;/code&gt;&lt;/a&gt; when they need to interact with the DOM apis like pushState, popState, etc...</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;platformlocation&quot;&gt;PlatformLocation&lt;/a&gt;&lt;/code&gt; 의 클래스의 모든 구현이 직접 사용 &lt;a href=&quot;locationstrategy&quot;&gt; &lt;code&gt;LocationStrategy&lt;/code&gt; &lt;/a&gt; 가 등 pushState, popState, 같은 DOM API와 상호 작용해야 할 때 ...</target>
        </trans-unit>
        <trans-unit id="0661053b470abb698b0e1169e845f6b47e88d3d9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;query&quot;&gt;query&lt;/a&gt;()&lt;/code&gt; function collects multiple elements and works internally by using &lt;code&gt;element.querySelectorAll&lt;/code&gt;. Use the &lt;code&gt;&lt;a href=&quot;animationqueryoptions#limit&quot;&gt;limit&lt;/a&gt;&lt;/code&gt; field of an options object to limit the total number of items to be collected. For example:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;query&quot;&gt;query&lt;/a&gt;()&lt;/code&gt; 함수는 여러 요소를 수집하고 사용하여 내부적으로 작동 &lt;code&gt;element.querySelectorAll&lt;/code&gt; 을 . 옵션 오브젝트 의 &lt;code&gt;&lt;a href=&quot;animationqueryoptions#limit&quot;&gt;limit&lt;/a&gt;&lt;/code&gt; 필드를 사용하여 수집 할 총 항목 수를 제한하십시오. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="3b913a55abde72ca81d7024ca445739808aa7665" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;transition&quot;&gt;transition&lt;/a&gt;&lt;/code&gt; animation method also supports reading an inline function which can decide if its associated animation should be run.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;transition&quot;&gt;transition&lt;/a&gt;&lt;/code&gt; 애니메이션 방법은 관련 애니메이션이 실행되어야하는지 결정할 수 있습니다 인라인 함수를 읽는 지원합니다.</target>
        </trans-unit>
        <trans-unit id="4712f621c4a5e2ef20b6c645ee3fa558074a5fe9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;upgradeadapter&quot;&gt;UpgradeAdapter&lt;/a&gt;&lt;/code&gt; allows: 1. creation of Angular component from AngularJS component directive (See [UpgradeAdapter#upgradeNg1Component()]) 2. creation of AngularJS directive from Angular component. (See [UpgradeAdapter#downgradeNg2Component()]) 3. Bootstrapping of a hybrid Angular application which contains both of the frameworks coexisting in a single application.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;upgradeadapter&quot;&gt;UpgradeAdapter&lt;/a&gt;&lt;/code&gt; 는 허용 : AngularJS와의 각도 성분의 생성 성분 1 지시자 (참고 [UpgradeAdapter # upgradeNg1Component ()]) AngularJS와 2. 작성 각도 성분으로부터 지시어. ([UpgradeAdapter # downgradeNg2Component ()] 참조) 3. 단일 응용 프로그램에 공존하는 두 프레임 워크를 모두 포함하는 하이브리드 Angular 응용 프로그램의 부트 스트랩.</target>
        </trans-unit>
        <trans-unit id="a1eb2dcb7af0dcf4a695c59ebfeddacb6c402e95" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; class</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; 클래스</target>
        </trans-unit>
        <trans-unit id="66b690e47d0f38b1cd5809389bb990c762cb3b2d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; decorator identifies the class immediately below it as a component, and provides the template and related component-specific metadata.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; 장식 식별 성분으로 바로 아래에있는 클래스 및 템플릿 및 관련 부품 특정 메타 데이터를 제공한다.</target>
        </trans-unit>
        <trans-unit id="57179aa07943c084fd24a0cf2ed81afe8bc53b96" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; decorator identifies the class immediately below it as a component class, and specifies its metadata. In the example code below, you can see that &lt;code&gt;HeroListComponent&lt;/code&gt; is just a class, with no special Angular notation or syntax at all. It's not a component until you mark it as one with the &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; decorator.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; 장식 식별 ㄱ 컴포넌트 클래스와 바로 아래 클래스, 및 메타 데이터를 지정한다. 아래 예제 코드에서 &lt;code&gt;HeroListComponent&lt;/code&gt; 는 특별한 Angular 표기법이나 구문이 전혀없는 클래스 일뿐 입니다. &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; 데코레이터 로 표시 할 때까지는 구성 요소가 아닙니다 .</target>
        </trans-unit>
        <trans-unit id="27ed6a775ed7809f9909d1cfea44203256e88024" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; selector value of &quot;app-hero-form&quot; means you can drop this form in a parent template with a &lt;code&gt;&amp;lt;app-hero-form&amp;gt;&lt;/code&gt; tag.</source>
          <target state="translated">&quot;app-hero-form&quot; 의 &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; 선택기 값은이 양식을 &lt;code&gt;&amp;lt;app-hero-form&amp;gt;&lt;/code&gt; 태그 가있는 상위 템플릿에 놓을 수 있음을 의미합니다 .</target>
        </trans-unit>
        <trans-unit id="abb5105661ab098fdef91d360f2cbe023d27af04" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt; decorator's lone configuration property specifies the directive's &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors&quot;&gt;CSS attribute selector&lt;/a&gt;, &lt;code&gt;[appHighlight]&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt; 장식의 고독한 구성 속성은 지침의 지정 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors&quot;&gt;CSS 속성 선택&lt;/a&gt; , &lt;code&gt;[appHighlight]&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f79cdd82b4c60315fdd4cc2098a2174561bcca45" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt; function decorating the &lt;code&gt;heroCache&lt;/code&gt; constructor property ensures that you get a reference to the cache service from the parent &lt;code&gt;HeroBioComponent&lt;/code&gt;. Angular throws an error if the parent lacks that service, even if a component higher in the component tree includes it.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt; 꾸미는 기능 &lt;code&gt;heroCache&lt;/code&gt; 상위에서 캐시 서비스에 대한 참조를 얻을 생성자 속성 보장하지만를 &lt;code&gt;HeroBioComponent&lt;/code&gt; 을 . 구성 요소 트리의 상위 구성 요소에 해당 서비스가 포함되어 있어도 부모에 해당 서비스가 없으면 Angular에서 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="5fd526663380f3592df2037fdc9b44234695f288" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;&lt;/code&gt; property decorator stops the upward search at the &lt;em&gt;host component&lt;/em&gt;. The host component is typically the component requesting the dependency. However, when this component is projected into a &lt;em&gt;parent&lt;/em&gt; component, that parent component becomes the host. The following example covers this second case.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;&lt;/code&gt; 속성 장식은 상기 상향 됨 정지 &lt;em&gt;호스트 구성 요소&lt;/em&gt; . 호스트 구성 요소는 일반적으로 종속성을 요청하는 구성 요소입니다. 그러나이 구성 요소가 &lt;em&gt;상위&lt;/em&gt; 구성 요소로 투영 되면 해당 상위 구성 요소가 호스트가됩니다. 다음 예제는이 두 번째 경우를 다룹니다.</target>
        </trans-unit>
        <trans-unit id="60ba97a300b77d23af86d8fe748cc10fc64eeb09" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@&lt;a href=&quot;../api/core/hostlistener&quot;&gt;HostListener&lt;/a&gt;&lt;/code&gt; decorator lets you subscribe to events of the DOM element that hosts an attribute directive, the &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; in this case.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/hostlistener&quot;&gt;HostListener&lt;/a&gt;&lt;/code&gt; 장식은 DOM 요소의 이벤트를 구독 할 수 있습니다 호스트 그 속성 지시자는 &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; 이 경우이다.</target>
        </trans-unit>
        <trans-unit id="82b280761ccb94a90a3866c3b2590b2d7168cfa5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; decorator accepts a metadata object for the service, the same way the &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; decorator did for your component classes.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; 장식이 서비스는 같은 방법에 대한 메타 데이터 개체를 받아 &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; 장식이 구성 요소 클래스를했다.</target>
        </trans-unit>
        <trans-unit id="33b3224e88a7414e23c7b4a233a665f3a8818e30" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; decorator has the &lt;code&gt;&lt;a href=&quot;../api/core/injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;&lt;/code&gt; metadata option, where you can specify the provider of the decorated service class with the &lt;code&gt;root&lt;/code&gt; injector, or with the injector for a specific NgModule.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; 장식이있다 &lt;code&gt;&lt;a href=&quot;../api/core/injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;&lt;/code&gt; 의 당신이로 장식 된 서비스 클래스의 프로 바이더를 지정할 수 있습니다 메타 데이터 옵션, &lt;code&gt;root&lt;/code&gt; 인젝터, 또는 특정의 NgModule의 인젝터를.</target>
        </trans-unit>
        <trans-unit id="e00b5d1cd3cbe5d3000e056fc39a0951f372ba27" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; decorator identifies a service class. The &lt;code&gt;&lt;a href=&quot;../api/core/injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;&lt;/code&gt; property configures a specific &lt;code&gt;ModuleInjector&lt;/code&gt;, here &lt;code&gt;root&lt;/code&gt;, which makes the service available in the &lt;code&gt;root&lt;/code&gt;&lt;code&gt;ModuleInjector&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; 데코레이터 식별하는 서비스 클래스. &lt;code&gt;&lt;a href=&quot;../api/core/injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;&lt;/code&gt; 의 속성은 특정 구성 &lt;code&gt;ModuleInjector&lt;/code&gt; , 여기 &lt;code&gt;root&lt;/code&gt; 에서 사용할 수있는 서비스를 만들고, &lt;code&gt;root&lt;/code&gt; &lt;code&gt;ModuleInjector&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="8e68e554c1029e63664d57c18622c712d0a2c5fd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; is an essential ingredient in every Angular service definition. The rest of the class has been written to expose a &lt;code&gt;getHeroes&lt;/code&gt; method that returns the same mock data as before. (A real app would probably get its data asynchronously from a remote server, but we'll ignore that to focus on the mechanics of injecting the service.)</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; 모든 각도 서비스 정의에 필수적인 성분이다. 클래스의 나머지 부분은 이전과 동일한 모의 데이터를 리턴 하는 &lt;code&gt;getHeroes&lt;/code&gt; 메소드 를 노출하도록 작성되었습니다 . (실제 앱은 아마도 원격 서버에서 데이터를 비동기식으로 가져올 것이지만 서비스 주입 메커니즘에 초점을 맞추기 위해 무시할 것입니다.)</target>
        </trans-unit>
        <trans-unit id="885d9f9809780d5bc310e3e424d03c4b141f4967" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; metadata allows the service class to be used with the &lt;a href=&quot;glossary#di&quot;&gt;dependency injection&lt;/a&gt; mechanism. The injectable class is instantiated by a &lt;a href=&quot;glossary#provider&quot;&gt;provider&lt;/a&gt;. &lt;a href=&quot;glossary#injector&quot;&gt;Injectors&lt;/a&gt; maintain lists of providers and use them to provide service instances when they are required by components or other services.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; 서비스 클래스가 사용할 수 있도록 메타 데이터 &lt;a href=&quot;glossary#di&quot;&gt;의존성 삽입&lt;/a&gt; 기구. 주사 가능한 클래스는 &lt;a href=&quot;glossary#provider&quot;&gt;공급자에&lt;/a&gt; 의해 인스턴스화됩니다 . &lt;a href=&quot;glossary#injector&quot;&gt;인젝터&lt;/a&gt; 는 제공자 목록을 유지 보수하고이를 사용하여 컴포넌트 또는 기타 서비스에 필요할 때 서비스 인스턴스를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="38ce962cd0076ede1d204b85c3815cacd68aa9f6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;&lt;/code&gt; decorator will attach some dependency injection metadata to the class, letting Angular know about its dependencies. As described by the &lt;a href=&quot;dependency-injection&quot;&gt;Dependency Injection Guide&lt;/a&gt;, this is a marker decorator you need to use for classes that have no other Angular decorators but still need to have their dependencies injected.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;&lt;/code&gt; 장식은 종속성에 대한 각도 알고셔서, 클래스에 몇 가지 의존성 주입 메타 데이터를 첨부합니다. &lt;a href=&quot;dependency-injection&quot;&gt;의존성 주입 안내서에&lt;/a&gt; 설명 된 것처럼 , 이것은 다른 Angular 데코레이터는 없지만 여전히 의존성을 주입해야하는 클래스에 사용해야하는 마커 데코레이터입니다.</target>
        </trans-unit>
        <trans-unit id="f82d4b4dc5240c874db316d0eb21e8c9fa399274" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; decorators have the &lt;code&gt;providers&lt;/code&gt; metadata option, where you can configure providers for NgModule-level or component-level injectors.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;()&lt;/code&gt; 와 &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; 장식이있는 &lt;code&gt;providers&lt;/code&gt; 는 NgModule 수준 또는 구성 요소 수준 인젝터에 대한 공급자를 구성 할 수있는 메타 데이터 옵션을.</target>
        </trans-unit>
        <trans-unit id="d2f532ec5724d6b05eba458d043ebf03fb0000ab" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; decorator identifies &lt;code&gt;AppModule&lt;/code&gt; as an &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; class. &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; takes a metadata object that tells Angular how to compile and launch the application.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 장식 식별 &lt;code&gt;AppModule&lt;/code&gt; AS를 &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 의 클래스입니다. &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 은 Angular에게 어플리케이션을 컴파일하고 시작하는 방법을 알려주는 메타 데이터 객체를 취합니다.</target>
        </trans-unit>
        <trans-unit id="793708455a547f501ce441e6a27457efeb8d5cad" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; metadata initializes the router and starts it listening for browser location changes.</source>
          <target state="translated">는 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 메타 데이터는 라우터를 초기화하고 브라우저 위치의 변경을 대기를 시작합니다.</target>
        </trans-unit>
        <trans-unit id="551e7f123e55c8302870ff8d05f968f8ce0fe58b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule#bootstrap&quot;&gt;NgModule.bootstrap&lt;/a&gt;&lt;/code&gt; property tells the compiler that this is an entry component &lt;em&gt;and&lt;/em&gt; it should generate code to bootstrap the application with this component.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule#bootstrap&quot;&gt;NgModule.bootstrap&lt;/a&gt;&lt;/code&gt; 이 항목 구성 요소임을 속성은 컴파일러를 지시 &lt;em&gt;하고&lt;/em&gt; 는이 구성 요소를 사용하여 응용 프로그램을 부트 스트랩 코드를 생성한다.</target>
        </trans-unit>
        <trans-unit id="4b851db63609eef9aefac9a444ed5cbac0f0319b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;&lt;/code&gt; property decorator tells Angular to return null when it can't find the dependency.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;&lt;/code&gt; 이 종속성을 찾을 수 없을 때 속성 데코레이터는 null에 각도 알려줍니다.</target>
        </trans-unit>
        <trans-unit id="a9d2b202019a40c34df385a62aa3700bbf14c211" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@&lt;a href=&quot;../api/core/pipe&quot;&gt;Pipe&lt;/a&gt;&lt;/code&gt; decorator allows you to define the pipe name that you'll use within template expressions. It must be a valid JavaScript identifier. Your pipe's name is &lt;code&gt;exponentialStrength&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/pipe&quot;&gt;Pipe&lt;/a&gt;&lt;/code&gt; 장식은 당신이 템플릿 표현식 내에서 사용할 수 있습니다하는 파이프 이름을 정의 할 수 있습니다. 유효한 JavaScript 식별자 여야합니다. 파이프 이름은 &lt;code&gt;exponentialStrength&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="6eb463094d9552ad72076a24ff98a2f18c5be9b4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@angular/bazel&lt;/code&gt; package provides a builder that allows Angular CLI to use Bazel as the build tool.</source>
          <target state="translated">&lt;code&gt;@angular/bazel&lt;/code&gt; 패키지는 각도 CLI 빌드 도구로 Bazel를 사용할 수있는 빌더를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="2b12259d8e67605d37f369e41dddfc69f10b15d3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@angular/elements&lt;/code&gt; package exports a &lt;code&gt;&lt;a href=&quot;../api/elements/createcustomelement&quot;&gt;createCustomElement&lt;/a&gt;()&lt;/code&gt; API that provides a bridge from Angular's component interface and change detection functionality to the built-in DOM API.</source>
          <target state="translated">&lt;code&gt;@angular/elements&lt;/code&gt; 패키지 내 보냅니다 &lt;code&gt;&lt;a href=&quot;../api/elements/createcustomelement&quot;&gt;createCustomElement&lt;/a&gt;()&lt;/code&gt; 에 각도의 컴포넌트 인터페이스 변경 감지 기능에서 다리를 제공하는 API 내장 된 DOM의 API.</target>
        </trans-unit>
        <trans-unit id="4488a294179b4aa7eb55572640dfae952a5db44c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@angular/platform-*&lt;/code&gt; packages enable Angular to be run in different contexts. For examples, &lt;code&gt;@angular/platform-server&lt;/code&gt; enables Angular to be run on the server, and &lt;code&gt;@angular/platform-browser&lt;/code&gt; enables Angular to be run in a web browser.</source>
          <target state="translated">&lt;code&gt;@angular/platform-*&lt;/code&gt; 패키지는 다른 문맥에서 실행하는 각도 수 있습니다. 예를 들어 &lt;code&gt;@angular/platform-server&lt;/code&gt; 사용하면 서버에서 Angular를 실행할 수 있고 &lt;code&gt;@angular/platform-browser&lt;/code&gt; 사용하면 웹 브라우저에서 Angular를 실행할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="884f6aebfdc7aeba7bf75a1835534b9815612496" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@routeAnimation&lt;/code&gt; property is bound to the &lt;code&gt;getAnimationData&lt;/code&gt; with the provided &lt;code&gt;routerOutlet&lt;/code&gt; reference, so you'll need to define that function in the &lt;code&gt;AppComponent&lt;/code&gt;. The &lt;code&gt;getAnimationData&lt;/code&gt; function returns the animation property from the &lt;code&gt;data&lt;/code&gt; provided through the &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt;. The &lt;code&gt;&lt;a href=&quot;../api/animations/animation&quot;&gt;animation&lt;/a&gt;&lt;/code&gt; property matches the &lt;code&gt;&lt;a href=&quot;../api/animations/transition&quot;&gt;transition&lt;/a&gt;&lt;/code&gt; names you used in the &lt;code&gt;slideInAnimation&lt;/code&gt; defined in &lt;code&gt;animations.ts&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;@routeAnimation&lt;/code&gt; 의 속성은 바인딩 된 &lt;code&gt;getAnimationData&lt;/code&gt; 제공된로 &lt;code&gt;routerOutlet&lt;/code&gt; 당신이에서 그 함수를 정의해야합니다, 그래서 참조 &lt;code&gt;AppComponent&lt;/code&gt; 을 . &lt;code&gt;getAnimationData&lt;/code&gt; 의 함수의 리턴 애니메이션 속성 &lt;code&gt;data&lt;/code&gt; 관통 구비 &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; 를 . &lt;code&gt;&lt;a href=&quot;../api/animations/animation&quot;&gt;animation&lt;/a&gt;&lt;/code&gt; 속성은 일치 &lt;code&gt;&lt;a href=&quot;../api/animations/transition&quot;&gt;transition&lt;/a&gt;&lt;/code&gt; 당신이에 사용되는 이름 &lt;code&gt;slideInAnimation&lt;/code&gt; 에 정의 &lt;code&gt;animations.ts&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="65905cf210914a41fcac7f549f19b60569db7000" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;AdComponent&lt;/code&gt; interface</source>
          <target state="translated">&lt;code&gt;AdComponent&lt;/code&gt; 의 인터페이스</target>
        </trans-unit>
        <trans-unit id="933674f343bff2cd0dd207810101a6b8c86a86b9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Admin&lt;/code&gt; and &lt;code&gt;Login&lt;/code&gt; buttons illustrate other router capabilities to be covered later in the guide. This short introduction will do for now.</source>
          <target state="translated">&lt;code&gt;Admin&lt;/code&gt; 및 &lt;code&gt;Login&lt;/code&gt; 버튼은 다른 라우터 기능이 가이드의 뒷부분에 적용 할 보여줍니다. 이 짧은 소개는 지금 할 것입니다.</target>
        </trans-unit>
        <trans-unit id="5be07b6d0ce69825736f39e33271e0f4a837efd5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;AfterViewComponent&lt;/code&gt; displays this child view &lt;em&gt;within its template&lt;/em&gt;:</source>
          <target state="translated">&lt;code&gt;AfterViewComponent&lt;/code&gt; 는 이 아이보기 표시 &lt;em&gt;의 템플릿 내를&lt;/em&gt; :</target>
        </trans-unit>
        <trans-unit id="5da2c3c2bd8ffcb1dc1282cef2a487959ea1abd4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;AnimalService&lt;/code&gt; in the logical tree would look like this:</source>
          <target state="translated">논리 트리 의 &lt;code&gt;AnimalService&lt;/code&gt; 는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="792f131f2d93317416f5bc123a877a96098076ab" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;AppComponent.fontSizePx&lt;/code&gt; establishes the initial &lt;code&gt;SizerComponent.size&lt;/code&gt; value.</source>
          <target state="translated">&lt;code&gt;AppComponent.fontSizePx&lt;/code&gt; 는 초기 설정 &lt;code&gt;SizerComponent.size&lt;/code&gt; 의 값입니다.</target>
        </trans-unit>
        <trans-unit id="1141745577d0d6fe3c0de70005105affb0508d78" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;AppComponent&lt;/code&gt; in this example features a list of &lt;code&gt;items&lt;/code&gt; in an array and a method for adding more items to the array.</source>
          <target state="translated">이 예제 의 &lt;code&gt;AppComponent&lt;/code&gt; 에는 배열 의 &lt;code&gt;items&lt;/code&gt; 목록과 배열에 더 많은 항목을 추가하는 방법이 있습니다.</target>
        </trans-unit>
        <trans-unit id="f5ce2d14bdf3c9317b532acaf7b8ff5f030b4ac1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;AppComponent&lt;/code&gt; is the test subject, so of course you declare the real version.</source>
          <target state="translated">&lt;code&gt;AppComponent&lt;/code&gt; 은 물론 실제 버전을 선언 할 정도의 테스트 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="da1ffde96872e3d62908574983f6c5d1159496b3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;AppComponent&lt;/code&gt; links to validate are as follows:</source>
          <target state="translated">유효성 검증을 위한 &lt;code&gt;AppComponent&lt;/code&gt; 링크는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="c05cfe4289978b66eaf6425a835a8bb31c03dd84" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;AppComponent&lt;/code&gt; template no longer needs &lt;code&gt;&amp;lt;app-heroes&amp;gt;&lt;/code&gt; because the app will only display the &lt;code&gt;HeroesComponent&lt;/code&gt; when the user navigates to it.</source>
          <target state="translated">&lt;code&gt;AppComponent&lt;/code&gt; 의 템플릿을 더 이상 요구 &lt;code&gt;&amp;lt;app-heroes&amp;gt;&lt;/code&gt; 응용 프로그램 만 표시하기 때문에 &lt;code&gt;HeroesComponent&lt;/code&gt; 을 할 때 사용자를 탐색 그것.</target>
        </trans-unit>
        <trans-unit id="6545b6507f23c86c81f7454e3bc1c87dc46d4fef" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;AppComponent&lt;/code&gt;'s injector is a child of the root injector, one down in the injector hierarchy. For applications that don't use the router, that's almost the entire application. But in routed applications, routing operates at the root level where &lt;code&gt;AppComponent&lt;/code&gt; services don't exist. This means that lazy-loaded modules can't reach them.</source>
          <target state="translated">&lt;code&gt;AppComponent&lt;/code&gt; 의 인젝터는 루트 인젝터의 자식, 인젝터 계층 구조의 한 다운. 라우터를 사용하지 않는 응용 프로그램의 경우 거의 전체 응용 프로그램입니다. 그러나 라우팅 된 응용 프로그램에서 라우팅은 &lt;code&gt;AppComponent&lt;/code&gt; 서비스가없는 루트 수준에서 작동 합니다. 이는 지연로드 모듈이 도달 할 수 없음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="e99418b308f9a848c50d9554d2c8fdb6f5482a76" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;AppComponent&lt;/code&gt;, for example, displays a navigation bar with anchors and their &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; directives.</source>
          <target state="translated">&lt;code&gt;AppComponent&lt;/code&gt; , 예를 들어, 디스플레이 앵커와 그와 탐색 모음 &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; 의 지시.</target>
        </trans-unit>
        <trans-unit id="5280fec7072da76d90f8bcd931c21a6bc6cb2961" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;AppModule&lt;/code&gt; acts as the fallback injector when the injection token can't be found in the &lt;code&gt;ElementInjector&lt;/code&gt;s.</source>
          <target state="translated">&lt;code&gt;AppModule&lt;/code&gt; 는 사출 토큰이 발견 될 수없는 경우 대체 인젝터 역할 &lt;code&gt;ElementInjector&lt;/code&gt; S.</target>
        </trans-unit>
        <trans-unit id="f95bd053e64f37ddc5bc7a5c80ce68e35d5bdd23" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;AppModule&lt;/code&gt; generated from the &lt;a href=&quot;cli&quot;&gt;Angular CLI&lt;/a&gt; demonstrates both kinds of modules in action:</source>
          <target state="translated">&lt;a href=&quot;cli&quot;&gt;Angular CLI&lt;/a&gt; 에서 생성 된 &lt;code&gt;AppModule&lt;/code&gt; 은 두 가지 종류의 모듈이 실제로 작동하는 것을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="5ff85c340c70e9c69d3c5eb66d2650053ea2c555" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;AstronautComponent&lt;/code&gt; also injects the service in its constructor. Each &lt;code&gt;AstronautComponent&lt;/code&gt; is a child of the &lt;code&gt;MissionControlComponent&lt;/code&gt; and therefore receives its parent's service instance:</source>
          <target state="translated">&lt;code&gt;AstronautComponent&lt;/code&gt; 은 또한 생성자에서 서비스를 주입한다. 각 &lt;code&gt;AstronautComponent&lt;/code&gt; 는 &lt;code&gt;MissionControlComponent&lt;/code&gt; 의 자식 이므로 부모의 서비스 인스턴스를받습니다.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
