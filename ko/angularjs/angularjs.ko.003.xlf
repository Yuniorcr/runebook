<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="angularjs">
    <body>
      <group id="angularjs">
        <trans-unit id="78347206801a061c0decedac37c91767431b4537" translate="yes" xml:space="preserve">
          <source>Complex Models (objects or collections)</source>
          <target state="translated">복잡한 모델 (객체 또는 컬렉션)</target>
        </trans-unit>
        <trans-unit id="c92c529e0731c57efd7550480196484040b33c3e" translate="yes" xml:space="preserve">
          <source>Component</source>
          <target state="translated">Component</target>
        </trans-unit>
        <trans-unit id="a85196f04b4052b5f8e757116e9ed52d626cea29" translate="yes" xml:space="preserve">
          <source>Component definition object (a simplified &lt;a href=&quot;../service/%24compile#directive-definition-object.html&quot;&gt;directive definition object&lt;/a&gt;)</source>
          <target state="translated">구성 요소 정의 오브젝트 (간이 &lt;a href=&quot;../service/%24compile#directive-definition-object.html&quot;&gt;지시문 정의 오브젝트&lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="52b1bdba92bb54788ab2cdeee061c0e16d336346" translate="yes" xml:space="preserve">
          <source>Component definition object (a simplified &lt;a href=&quot;../service/%24compile#directive-definition-object.html&quot;&gt;directive definition object&lt;/a&gt;), with the following properties (all optional):</source>
          <target state="translated">다음 특성을 가진 컴포넌트 정의 오브젝트 (간이 &lt;a href=&quot;../service/%24compile#directive-definition-object.html&quot;&gt;지시문 정의 오브젝트&lt;/a&gt; ) (모두 선택 사항) :</target>
        </trans-unit>
        <trans-unit id="77dc9cfc7cb3b52a950028db1a5820bbb36a0ff5" translate="yes" xml:space="preserve">
          <source>Component definitions are very simple and do not require as much configuration as defining general directives. Component definitions usually consist only of a template and a controller backing it.</source>
          <target state="translated">구성 요소 정의는 매우 간단하며 일반 지시문을 정의하는 것만 큼 많은 구성이 필요하지 않습니다. 컴포넌트 정의는 일반적으로 템플리트와이를 지원하는 컨트롤러로만 구성됩니다.</target>
        </trans-unit>
        <trans-unit id="4fe71f615894962f769e3b09ee4b063dd3104c07" translate="yes" xml:space="preserve">
          <source>Component-based application architecture</source>
          <target state="translated">컴포넌트 기반 애플리케이션 아키텍처</target>
        </trans-unit>
        <trans-unit id="412108d00dc3d78512b7f514b082a1dc5a2a25c0" translate="yes" xml:space="preserve">
          <source>ComponentInstruction</source>
          <target state="translated">ComponentInstruction</target>
        </trans-unit>
        <trans-unit id="9289473eeedaee09d76c8cf1b6994d8550debf46" translate="yes" xml:space="preserve">
          <source>Components</source>
          <target state="translated">Components</target>
        </trans-unit>
        <trans-unit id="052de9b4663f1da6b0dad6763f0e84f04970f1d5" translate="yes" xml:space="preserve">
          <source>Components are also useful as route templates (e.g. when using &lt;a href=&quot;../api/ngroute&quot;&gt;ngRoute&lt;/a&gt;). In a component-based application, every view is a component:</source>
          <target state="translated">구성 요소는 경로 템플릿으로도 유용합니다 (예 : &lt;a href=&quot;../api/ngroute&quot;&gt;ngRoute 사용시)&lt;/a&gt; ). 컴포넌트 기반 애플리케이션에서 모든보기는 컴포넌트입니다.</target>
        </trans-unit>
        <trans-unit id="8baa065a5cba8d6c52c78a61ff9c9163ba5e3d7e" translate="yes" xml:space="preserve">
          <source>Components as route templates</source>
          <target state="translated">배관 템플릿으로서의 구성 요소</target>
        </trans-unit>
        <trans-unit id="bf44683e2124b402afd1667eddfc51003f631e51" translate="yes" xml:space="preserve">
          <source>Components can be registered using the &lt;a href=&quot;../api/ng/provider/%24compileprovider#component.html&quot;&gt;&lt;code&gt;.component()&lt;/code&gt;&lt;/a&gt; method of an AngularJS module (returned by &lt;a href=&quot;module&quot;&gt;&lt;code&gt;angular.module()&lt;/code&gt;&lt;/a&gt;). The method takes two arguments:</source>
          <target state="translated">AngularJS 모듈 의 &lt;a href=&quot;../api/ng/provider/%24compileprovider#component.html&quot;&gt; &lt;code&gt;.component()&lt;/code&gt; &lt;/a&gt; 메소드를 사용하여 컴포넌트를 등록 할 수 있습니다 (angular.module () 로 리턴 &lt;a href=&quot;module&quot;&gt; &lt;code&gt;angular.module()&lt;/code&gt; &lt;/a&gt; ). 이 방법에는 두 가지 인수가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="1ede4134b45566bbb53a326a5ba30ed2337d4b16" translate="yes" xml:space="preserve">
          <source>Components that have their dependencies injected allow them to be easily mocked on a test by test basis, without having to mess with any global variables that could inadvertently affect another test.</source>
          <target state="translated">종속성이 주입 된 구성 요소를 사용하면 실수로 다른 테스트에 영향을 줄 수있는 전역 변수를 망칠 필요없이 테스트 기준으로 테스트를 쉽게 조롱 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="db2bb3f2d36cc8fea7cbf33806f6b7360ab29060" translate="yes" xml:space="preserve">
          <source>Comprehensive Directive API</source>
          <target state="translated">포괄적 인 지시문 API</target>
        </trans-unit>
        <trans-unit id="c05bafdb56031bb64da1f1d1861f60118932c605" translate="yes" xml:space="preserve">
          <source>Concept</source>
          <target state="translated">Concept</target>
        </trans-unit>
        <trans-unit id="cc8d5c03c91b4ff4e34ca056bb24f3fb67fdffdd" translate="yes" xml:space="preserve">
          <source>Conceptual Overview</source>
          <target state="translated">개념적 개요</target>
        </trans-unit>
        <trans-unit id="e39262defe80a83fac1b793497417432c8b1a879" translate="yes" xml:space="preserve">
          <source>Conclusion</source>
          <target state="translated">Conclusion</target>
        </trans-unit>
        <trans-unit id="71c2b150a06049925dc940ff0b7ba9b28de4537b" translate="yes" xml:space="preserve">
          <source>Configure $http service to combine processing of multiple http responses received at around the same time via &lt;a href=&quot;../type/%24rootscope.scope#%24applyAsync.html&quot;&gt;$rootScope.$applyAsync&lt;/a&gt;. This can result in significant performance improvement for bigger applications that make many HTTP requests concurrently (common during application bootstrap).</source>
          <target state="translated">&lt;a href=&quot;../type/%24rootscope.scope#%24applyAsync.html&quot;&gt;$ rootScope. $ applyAsync&lt;/a&gt; 를 통해 거의 동시에 수신 된 여러 http 응답 처리를 결합하도록 $ http 서비스를 구성하십시오 . 이로 인해 많은 HTTP 요청을 동시에 수행하는 (애플리케이션 부트 스트랩 동안 일반적으로) 더 큰 애플리케이션의 성능이 크게 향상 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7896d76d615866e43aa8573a41f4d68ecbe909a3" translate="yes" xml:space="preserve">
          <source>Configure $parse service to add literal values that will be present as literal at expressions.</source>
          <target state="translated">표현식에서 리터럴로 표시 될 리터럴 값을 추가하도록 $ parse 서비스를 구성하십시오.</target>
        </trans-unit>
        <trans-unit id="401014f049aff69ca01aa4c69560adc72e65a93d" translate="yes" xml:space="preserve">
          <source>Configure several aspects of error handling in AngularJS if used as a setter or return the current configuration if used as a getter. The following options are supported:</source>
          <target state="translated">setter로 사용되는 경우 AngularJS에서 오류 처리의 여러 측면을 구성하거나 getter로 사용되는 경우 현재 구성을 리턴하십시오. 다음과 같은 옵션이 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="7ed62ca7d00be1bd9be3f6f28effdd940c0a125d" translate="yes" xml:space="preserve">
          <source>Configures the mock implementation of &lt;a href=&quot;../../ng/service/%24exceptionhandler&quot;&gt;&lt;code&gt;$exceptionHandler&lt;/code&gt;&lt;/a&gt; to rethrow or to log errors passed to the &lt;code&gt;$exceptionHandler&lt;/code&gt;.</source>
          <target state="translated">구성합니다은의 모의 구현 &lt;a href=&quot;../../ng/service/%24exceptionhandler&quot;&gt; &lt;code&gt;$exceptionHandler&lt;/code&gt; &lt;/a&gt; 다시 발생하거나 전달 오류가 로그인 할 때 &lt;code&gt;$exceptionHandler&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="fa7b44a578c9b66e6eac734e95b3a649678bb56b" translate="yes" xml:space="preserve">
          <source>Configures the mock implementation of &lt;a href=&quot;../ng/service/%24exceptionhandler&quot;&gt;&lt;code&gt;$exceptionHandler&lt;/code&gt;&lt;/a&gt; to rethrow or to log errors passed to the &lt;code&gt;$exceptionHandler&lt;/code&gt;.</source>
          <target state="translated">구성합니다은의 모의 구현 &lt;a href=&quot;../ng/service/%24exceptionhandler&quot;&gt; &lt;code&gt;$exceptionHandler&lt;/code&gt; &lt;/a&gt; 다시 발생하거나 전달 오류가 로그인 할 때 &lt;code&gt;$exceptionHandler&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ab33277d4bc70753dadfe4b4b47939a3bafacc65" translate="yes" xml:space="preserve">
          <source>Configures the mock implementation of &lt;a href=&quot;ng/service/%24exceptionhandler&quot;&gt;&lt;code&gt;$exceptionHandler&lt;/code&gt;&lt;/a&gt; to rethrow or to log errors passed to the &lt;code&gt;$exceptionHandler&lt;/code&gt;.</source>
          <target state="translated">구성합니다은의 모의 구현 &lt;a href=&quot;ng/service/%24exceptionhandler&quot;&gt; &lt;code&gt;$exceptionHandler&lt;/code&gt; &lt;/a&gt; 다시 발생하거나 전달 오류가 로그인 할 때 &lt;code&gt;$exceptionHandler&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ef688c3bf06b49c7583d5229b5b135310e872abe" translate="yes" xml:space="preserve">
          <source>Configuring ngPluralize</source>
          <target state="translated">ngPluralize 구성</target>
        </trans-unit>
        <trans-unit id="25493fa5f58d0b23af0328cbcc8d72f1b7096ef8" translate="yes" xml:space="preserve">
          <source>Configuring ngPluralize with offset</source>
          <target state="translated">오프셋을 사용하여 ngPluralize 구성</target>
        </trans-unit>
        <trans-unit id="614cb97d5550e6a973dc4d4e5e71bacf0e254a0a" translate="yes" xml:space="preserve">
          <source>Connecting to the scope</source>
          <target state="translated">스코프에 연결</target>
        </trans-unit>
        <trans-unit id="bd1ca2146ad14cf9d26b89eef58c53c8846544f1" translate="yes" xml:space="preserve">
          <source>Consider a base href set as follows: &lt;code&gt;&amp;lt;base href=&quot;/base/&quot;&amp;gt;&lt;/code&gt; (i.e. the application exists in the &quot;folder&quot; called &lt;code&gt;/base&lt;/code&gt;). The URL &lt;code&gt;/base&lt;/code&gt; is actually outside the application (it refers to the &lt;code&gt;base&lt;/code&gt; file found in the root &lt;code&gt;/&lt;/code&gt; folder).</source>
          <target state="translated">&lt;code&gt;&amp;lt;base href=&quot;/base/&quot;&amp;gt;&lt;/code&gt; 와 같이 기본 href 세트를 고려하십시오 (즉, 응용 프로그램은 &lt;code&gt;/base&lt;/code&gt; 라는 &quot;폴더&quot;에 있습니다 ). URL &lt;code&gt;/base&lt;/code&gt; 는 실제로 응용 프로그램 외부에 있습니다 ( 루트 &lt;code&gt;/&lt;/code&gt; 폴더 에있는 &lt;code&gt;base&lt;/code&gt; 파일을 나타냄 ).</target>
        </trans-unit>
        <trans-unit id="b75dc57f6ba4e3ce850116dfdcb6fffec204312d" translate="yes" xml:space="preserve">
          <source>Consider a text input with an autocomplete list (for fruit), where the items are objects with a name and an id. A user enters &lt;code&gt;ap&lt;/code&gt; and then selects &lt;code&gt;Apricot&lt;/code&gt; from the list. Based on this, the autocomplete widget will call &lt;code&gt;$setViewValue({name: 'Apricot', id: 443})&lt;/code&gt;, but the rendered value will still be &lt;code&gt;ap&lt;/code&gt;. The widget can then call &lt;code&gt;ctrl.$processModelValue()&lt;/code&gt; to run the model -&amp;gt; view pipeline again, which formats the object to the string &lt;code&gt;Apricot&lt;/code&gt;, then updates the &lt;code&gt;$viewValue&lt;/code&gt;, and finally renders it in the DOM.</source>
          <target state="translated">항목이 이름과 ID를 가진 객체 인 자동 완성 목록 (과일의 경우)이있는 텍스트 입력을 고려하십시오. 사용자가 &lt;code&gt;ap&lt;/code&gt; 를 입력 한 다음 목록에서 &lt;code&gt;Apricot&lt;/code&gt; 를 선택 합니다. 이를 바탕으로 자동 완성 위젯은 &lt;code&gt;$setViewValue({name: 'Apricot', id: 443})&lt;/code&gt; 을 호출 하지만 렌더링 된 값은 여전히 &lt;code&gt;ap&lt;/code&gt; 입니다. 그런 다음 위젯은 &lt;code&gt;ctrl.$processModelValue()&lt;/code&gt; 를 호출 하여 모델-&amp;gt; 뷰 파이프 라인을 다시 실행하여 오브젝트를 &lt;code&gt;Apricot&lt;/code&gt; 문자열로 형식화 한 다음 &lt;code&gt;$viewValue&lt;/code&gt; 를 업데이트 한 후 DOM에서 렌더링합니다.</target>
        </trans-unit>
        <trans-unit id="a18df99124cdd530d7ee713a96afbde420b4e68f" translate="yes" xml:space="preserve">
          <source>Consider the following example, which illustrates a typical use case of &lt;code&gt;ngMessages&lt;/code&gt;. Within the form &lt;code&gt;myForm&lt;/code&gt; we have a text input named &lt;code&gt;myField&lt;/code&gt; which is bound to the scope variable &lt;code&gt;field&lt;/code&gt; using the &lt;a href=&quot;ng/directive/ngmodel&quot;&gt;ngModel&lt;/a&gt; directive.</source>
          <target state="translated">&lt;code&gt;ngMessages&lt;/code&gt; 의 일반적인 사용 사례를 보여주는 다음 예제를 고려하십시오 . &lt;code&gt;myForm&lt;/code&gt; 양식 내에 &lt;a href=&quot;ng/directive/ngmodel&quot;&gt;ngModel&lt;/a&gt; 지시문을 사용하여 범위 변수 &lt;code&gt;field&lt;/code&gt; 바인딩 된 &lt;code&gt;myField&lt;/code&gt; 라는 텍스트 입력 이 있습니다.</target>
        </trans-unit>
        <trans-unit id="067758acc9cf591a779af4e3d644186dd0af02ba" translate="yes" xml:space="preserve">
          <source>Consider this module, which includes a &lt;code&gt;willBreak&lt;/code&gt; service that uses implicit DI:</source>
          <target state="translated">암시 적 DI를 사용 하는 &lt;code&gt;willBreak&lt;/code&gt; 서비스를 포함하는이 모듈을 고려하십시오 .</target>
        </trans-unit>
        <trans-unit id="8067f2d7407363afa44d0fb08f79e6b26296396e" translate="yes" xml:space="preserve">
          <source>Consider using &lt;a href=&quot;../api/ng/directive/ngcsp&quot;&gt;CSP&lt;/a&gt; (but don't rely only on CSP)</source>
          <target state="translated">&lt;a href=&quot;../api/ng/directive/ngcsp&quot;&gt;CSP&lt;/a&gt; 사용을 고려하십시오 (그러나 CSP에만 의존하지는 마십시오)</target>
        </trans-unit>
        <trans-unit id="733fd2b4c4e1bca4c7d0e3c2e1c341bcd1d34269" translate="yes" xml:space="preserve">
          <source>Constant</source>
          <target state="translated">Constant</target>
        </trans-unit>
        <trans-unit id="d694aced80a769dd56d5ff19d56f4662c3bdd367" translate="yes" xml:space="preserve">
          <source>Constant Recipe</source>
          <target state="translated">일정한 레시피</target>
        </trans-unit>
        <trans-unit id="baf6a951c27a9234a81559df8b9c866456740fa7" translate="yes" xml:space="preserve">
          <source>Constant value.</source>
          <target state="translated">상수 값.</target>
        </trans-unit>
        <trans-unit id="b99e72117469b9970f18ba5d75fe3d0de1866186" translate="yes" xml:space="preserve">
          <source>Constant, message, exception or an object representing the rejection reason.</source>
          <target state="translated">거부 이유를 나타내는 상수, 메시지, 예외 또는 객체.</target>
        </trans-unit>
        <trans-unit id="64d5e2c2aff5afc784db4e0bcb2cdc6862d0f0f0" translate="yes" xml:space="preserve">
          <source>Construction function for creating new instance of the service.</source>
          <target state="translated">서비스의 새로운 인스턴스를 생성하기위한 구성 기능.</target>
        </trans-unit>
        <trans-unit id="e4b290eee7ee9eca877a7e01bf49e3ec181e017e" translate="yes" xml:space="preserve">
          <source>Content Security Policy</source>
          <target state="translated">콘텐츠 보안 정책</target>
        </trans-unit>
        <trans-unit id="cc11b3a28fa30ae6d3d3ad1438824cbd5224ba5c" translate="yes" xml:space="preserve">
          <source>Context</source>
          <target state="translated">Context</target>
        </trans-unit>
        <trans-unit id="802338f12e55179b2d6cd860935bf05175261d07" translate="yes" xml:space="preserve">
          <source>Context which &lt;code&gt;fn&lt;/code&gt; should be evaluated in.</source>
          <target state="translated">&lt;code&gt;fn&lt;/code&gt; 을 평가해야하는 컨텍스트</target>
        </trans-unit>
        <trans-unit id="18b017e5b4b89d6ff684844a26fb098545f160cf" translate="yes" xml:space="preserve">
          <source>Contribute</source>
          <target state="translated">Contribute</target>
        </trans-unit>
        <trans-unit id="4e9871e0a8defabedbf3524a3226fa9d74385b59" translate="yes" xml:space="preserve">
          <source>Contributing to AngularJS</source>
          <target state="translated">AngularJS에 기여</target>
        </trans-unit>
        <trans-unit id="86cf9b9a051872b3598a096da04f48dd25d0af73" translate="yes" xml:space="preserve">
          <source>Control of the AngularJS templates makes applications vulnerable even if there was a completely secure sandbox:</source>
          <target state="translated">AngularJS 템플릿을 제어하면 완전히 안전한 샌드 박스가 있어도 응용 프로그램이 취약 해집니다.</target>
        </trans-unit>
        <trans-unit id="a36a5ffa6e0dcfb64fac1b2b3d6fb176de9689de" translate="yes" xml:space="preserve">
          <source>Controller</source>
          <target state="translated">Controller</target>
        </trans-unit>
        <trans-unit id="99ffd59ebbf0e37afa0e0d929b94eba513e392bc" translate="yes" xml:space="preserve">
          <source>Controller &amp;mdash; The &lt;code&gt;ngController&lt;/code&gt; directive specifies a Controller class; the class contains business logic behind the application to decorate the scope with functions and values</source>
          <target state="translated">Controller &amp;mdash; &lt;code&gt;ngController&lt;/code&gt; 지시문은 Controller 클래스를 지정합니다. 클래스는 함수와 값으로 범위를 장식하기 위해 응용 프로그램 뒤에 비즈니스 논리를 포함합니다.</target>
        </trans-unit>
        <trans-unit id="ccb3847c75d985adc6744eb79ac9c9cee18abe79" translate="yes" xml:space="preserve">
          <source>Controller constructor fn (optionally decorated with DI annotations in the array notation).</source>
          <target state="translated">컨트롤러 생성자 fn (선택적으로 배열 표기법의 DI 주석으로 장식 됨).</target>
        </trans-unit>
        <trans-unit id="c27dec249f237841f7387d65d26a7c0ce88c6c18" translate="yes" xml:space="preserve">
          <source>Controller constructor function.</source>
          <target state="translated">컨트롤러 생성자 함수.</target>
        </trans-unit>
        <trans-unit id="9d19a84c7ff095475b0ae33d1170893261391e4f" translate="yes" xml:space="preserve">
          <source>Controller constructor function. The controller is instantiated before the pre-linking phase and can be accessed by other directives (see &lt;code&gt;require&lt;/code&gt; attribute). This allows the directives to communicate with each other and augment each other's behavior. The controller is injectable (and supports bracket notation) with the following locals:</source>
          <target state="translated">컨트롤러 생성자 함수. 컨트롤러는 사전 연결 단계 전에 인스턴스화되며 다른 지시문으로 액세스 할 수 있습니다 ( &lt;code&gt;require&lt;/code&gt; 특성 참조 ). 이를 통해 지시문이 서로 통신하고 서로의 행동을 향상시킬 수 있습니다. 컨트롤러는 다음 지역에 주입 가능하며 브래킷 표기법을 지원합니다.</target>
        </trans-unit>
        <trans-unit id="a9aaeb41d0885b4404238f900eeab9f49522f6e5" translate="yes" xml:space="preserve">
          <source>Controller methods can also take arguments, as demonstrated in the following variation of the previous example.</source>
          <target state="translated">이전 예제의 다음 변형에서 설명 된대로 컨트롤러 메소드도 인수를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e71925aefd89c1562fed9afbd32f746da1e7c9c5" translate="yes" xml:space="preserve">
          <source>Controller methods can be created through direct assignment to scope (see the &lt;code&gt;chiliSpicy&lt;/code&gt; method)</source>
          <target state="translated">범위에 직접 할당하여 컨트롤러 방법을 생성 할 수 있습니다 ( &lt;code&gt;chiliSpicy&lt;/code&gt; 방법 참조 )</target>
        </trans-unit>
        <trans-unit id="abab164d91275a7c27f69b9901af5a808932f134" translate="yes" xml:space="preserve">
          <source>Controller name to check.</source>
          <target state="translated">확인할 컨트롤러 이름입니다.</target>
        </trans-unit>
        <trans-unit id="d164658172a7f4d47214d163beff14e7b08173e9" translate="yes" xml:space="preserve">
          <source>Controller name, or an object map of controllers where the keys are the names and the values are the constructors.</source>
          <target state="translated">컨트롤러 이름 또는 키가 이름이고 값이 생성자 인 컨트롤러의 객체 맵.</target>
        </trans-unit>
        <trans-unit id="fd28161568c4e8e181bf8b34d2eb64190067fd07" translate="yes" xml:space="preserve">
          <source>Controllers</source>
          <target state="translated">Controllers</target>
        </trans-unit>
        <trans-unit id="fbc681066b21fc1c3641cf2f3c220b9b2bb08d7e" translate="yes" xml:space="preserve">
          <source>Controllers and Scopes</source>
          <target state="translated">컨트롤러 및 범위</target>
        </trans-unit>
        <trans-unit id="911140cd3f21770764dea61bf3752956262c1067" translate="yes" xml:space="preserve">
          <source>Controllers are &quot;classes&quot; or &quot;constructor functions&quot; that are responsible for providing the application behavior that supports the declarative markup in the template. The recommended way of declaring Controllers is using the array notation:</source>
          <target state="translated">컨트롤러는 템플릿에서 선언적 마크 업을 지원하는 응용 프로그램 동작을 제공하는 &quot;클래스&quot;또는 &quot;생성자 함수&quot;입니다. 컨트롤러를 선언하는 권장 방법은 배열 표기법을 사용하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="5b5d98f528a42620b2cc0825785014474de8791d" translate="yes" xml:space="preserve">
          <source>Controllers can be attached to the DOM in different ways. For each of them, AngularJS will instantiate a new Controller object, using the specified Controller's &lt;strong&gt;constructor function&lt;/strong&gt;:</source>
          <target state="translated">컨트롤러는 다른 방식으로 DOM에 연결될 수 있습니다. 각각에 대해 AngularJS는 지정된 Controller의 &lt;strong&gt;생성자 함수를&lt;/strong&gt; 사용하여 새 Controller 객체를 인스턴스화 &lt;strong&gt;합니다&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="1c6d830a012a42e0e3e98e8d7391642d69b5f9c0" translate="yes" xml:space="preserve">
          <source>Controllers define methods (behavior) that can mutate the model (properties on the scope).</source>
          <target state="translated">컨트롤러는 모델 (범위의 속성)을 변경할 수있는 메서드 (동작)를 정의합니다.</target>
        </trans-unit>
        <trans-unit id="70c782bc574579d2517b6cec8967686212a0d454" translate="yes" xml:space="preserve">
          <source>Controllers may register &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24watch.html&quot;&gt;watches&lt;/a&gt; on the model. These watches execute immediately after the controller behavior executes.</source>
          <target state="translated">컨트롤러는 모델에 &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24watch.html&quot;&gt;시계&lt;/a&gt; 를 등록 할 수 있습니다 . 이 시계는 컨트롤러 동작이 실행 된 직후에 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="058997bd1ff2c8ff837142c06062cc669ac555e1" translate="yes" xml:space="preserve">
          <source>Controllers use scopes to expose controller methods to templates (see &lt;a href=&quot;../api/ng/directive/ngcontroller&quot;&gt;ng-controller&lt;/a&gt;).</source>
          <target state="translated">컨트롤러는 범위를 사용하여 컨트롤러 방법을 템플릿에 노출합니다 ( &lt;a href=&quot;../api/ng/directive/ngcontroller&quot;&gt;ng-controller&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="7dd94c9d2ce116f0c4c53ed1b007067b7b712d4c" translate="yes" xml:space="preserve">
          <source>Controls (&lt;code&gt;input&lt;/code&gt;, &lt;code&gt;select&lt;/code&gt;, &lt;code&gt;textarea&lt;/code&gt;) are ways for a user to enter data. A Form is a collection of controls for the purpose of grouping related controls together.</source>
          <target state="translated">컨트롤 ( &lt;code&gt;input&lt;/code&gt; , &lt;code&gt;select&lt;/code&gt; , &lt;code&gt;textarea&lt;/code&gt; )은 사용자가 데이터를 입력하는 방법입니다. 양식은 관련 컨트롤을 그룹화하기위한 컨트롤 모음입니다.</target>
        </trans-unit>
        <trans-unit id="e170fcf2efd35c14b97e47909e1264edfdda6632" translate="yes" xml:space="preserve">
          <source>Convert the &lt;code&gt;:&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, or &lt;code&gt;_&lt;/code&gt;-delimited name to &lt;code&gt;camelCase&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;:&lt;/code&gt; , &lt;code&gt;-&lt;/code&gt; 또는 &lt;code&gt;_&lt;/code&gt; 로 구분 된 이름을 &lt;code&gt;camelCase&lt;/code&gt; 로 변환하십시오 .</target>
        </trans-unit>
        <trans-unit id="933184608bdac4f3c6c004f83098137beaa3d86f" translate="yes" xml:space="preserve">
          <source>Converts AngularJS &lt;a href=&quot;../../../guide/expression&quot;&gt;expression&lt;/a&gt; into a function.</source>
          <target state="translated">AngularJS &lt;a href=&quot;../../../guide/expression&quot;&gt;표현식&lt;/a&gt; 을 함수로 변환 합니다.</target>
        </trans-unit>
        <trans-unit id="2eea8ad796d2916c4ebaeca90af5bde7b4d8a77a" translate="yes" xml:space="preserve">
          <source>Converts AngularJS &lt;a href=&quot;../../../guide/expression&quot;&gt;expression&lt;/a&gt; into a function. This is like &lt;a href=&quot;%24parse&quot;&gt;$parse&lt;/a&gt; and is identical when the expression is a literal constant. Otherwise, it wraps the expression in a call to &lt;a href=&quot;%24sce#getTrusted.html&quot;&gt;$sce.getTrusted(&lt;em&gt;type&lt;/em&gt;, &lt;em&gt;result&lt;/em&gt;)&lt;/a&gt;</source>
          <target state="translated">AngularJS &lt;a href=&quot;../../../guide/expression&quot;&gt;표현식&lt;/a&gt; 을 함수로 변환 합니다. 이것은 &lt;a href=&quot;%24parse&quot;&gt;$ parse&lt;/a&gt; 와 유사하며 표현식이 리터럴 상수 인 경우 동일합니다. 그렇지 않으면 &lt;a href=&quot;%24sce#getTrusted.html&quot;&gt;$ sce.getTrusted ( &lt;/a&gt;&lt;em&gt;type&lt;/em&gt; , &lt;em&gt;result&lt;/em&gt; )를 호출하여 표현식을 래핑합니다.&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="f52436d3294322d69775a94b63db34d958c64e34" translate="yes" xml:space="preserve">
          <source>Converts AngularJS &lt;a href=&quot;../../guide/expression&quot;&gt;expression&lt;/a&gt; into a function.</source>
          <target state="translated">AngularJS &lt;a href=&quot;../../guide/expression&quot;&gt;표현식&lt;/a&gt; 을 함수로 변환 합니다.</target>
        </trans-unit>
        <trans-unit id="241b70e1e8de1ff6cda970c4d284ff5a349664ae" translate="yes" xml:space="preserve">
          <source>Converts an attribute name (e.g. dash/colon/underscore-delimited string, optionally prefixed with &lt;code&gt;x-&lt;/code&gt; or &lt;code&gt;data-&lt;/code&gt;) to its normalized, camelCase form.</source>
          <target state="translated">속성 이름 (예 : 대시 / 콜론 / 밑줄로 구분 된 문자열, 선택적으로 &lt;code&gt;x-&lt;/code&gt; 또는 &lt;code&gt;data-&lt;/code&gt; 접두사가 붙은 문자열 )을 정규화 된 camelCase 형식으로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="0849392d519f4aa3fac0a65873ae6d050016e1fe" translate="yes" xml:space="preserve">
          <source>Converts string to lowercase.</source>
          <target state="translated">문자열을 소문자로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="b79ed60a960e0da09dfacee4601fd97afa217eb9" translate="yes" xml:space="preserve">
          <source>Converts string to uppercase.</source>
          <target state="translated">문자열을 대문자로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="c872753511d558c4ce512746cf585786dd025a3c" translate="yes" xml:space="preserve">
          <source>Core Concepts</source>
          <target state="translated">핵심 개념</target>
        </trans-unit>
        <trans-unit id="2e84aab6976a7309d079e90c2b70df72a431d11c" translate="yes" xml:space="preserve">
          <source>Counts all the direct and indirect child scopes of the current scope.</source>
          <target state="translated">현재 범위의 모든 직접 및 간접 자식 범위를 계산합니다.</target>
        </trans-unit>
        <trans-unit id="443961121af9afe27d68ec052ba843a27eaf31a0" translate="yes" xml:space="preserve">
          <source>Counts all the watchers of direct and indirect child scopes of the current scope.</source>
          <target state="translated">현재 범위의 직접 및 간접 자식 범위의 모든 감시자를 계산합니다.</target>
        </trans-unit>
        <trans-unit id="a16536d78dc34897436003938234d72482a1d526" translate="yes" xml:space="preserve">
          <source>Courses</source>
          <target state="translated">Courses</target>
        </trans-unit>
        <trans-unit id="389e36945902ac4da978f24ea80f3d5bbd64c891" translate="yes" xml:space="preserve">
          <source>Crawling your app</source>
          <target state="translated">앱 크롤링</target>
        </trans-unit>
        <trans-unit id="45608ebdcb44d27d42f32d60acd39e85de71b39c" translate="yes" xml:space="preserve">
          <source>Create a new injector that can provide components defined in our &lt;code&gt;myModule&lt;/code&gt; module and request our &lt;code&gt;greeter&lt;/code&gt; service from the injector. (This is usually done automatically by AngularJS bootstrap).</source>
          <target state="translated">우리에 정의 된 구성 요소를 제공 할 수있는 새로운 인젝터 만들기 &lt;code&gt;myModule&lt;/code&gt; 모듈을 우리의 요청 &lt;code&gt;greeter&lt;/code&gt; 인젝터에서 서비스를. (이는 일반적으로 AngularJS 부트 스트랩에 의해 자동으로 수행됩니다).</target>
        </trans-unit>
        <trans-unit id="971013bc0a9711b010a8dd9b707cb3697b7f4d5f" translate="yes" xml:space="preserve">
          <source>Create a new instance of JS type. The method takes a constructor function, invokes the new operator, and supplies all of the arguments to the constructor function as specified by the constructor annotation.</source>
          <target state="translated">JS 유형의 새 인스턴스를 작성하십시오. 이 메소드는 생성자 함수를 가져 와서 새 연산자를 호출하고 생성자 주석에 지정된대로 모든 인수를 생성자 함수에 제공합니다.</target>
        </trans-unit>
        <trans-unit id="9cc6657b1652167630bc2a55c743f36c28dcc171" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;Deferred&lt;/code&gt; object which represents a task which will finish in the future.</source>
          <target state="translated">나중에 완료 될 작업을 나타내는 &lt;code&gt;Deferred&lt;/code&gt; 객체를 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="d11bba0687af96cbd2d8bb53eeba0343f2e22377" translate="yes" xml:space="preserve">
          <source>Creates a deep copy of &lt;code&gt;source&lt;/code&gt;, which should be an object or an array. This functions is used internally, mostly in the change-detection code. It is not intended as an all-purpose copy function, and has several limitations (see below).</source>
          <target state="translated">&lt;code&gt;source&lt;/code&gt; 또는 객체 의 깊은 사본을 작성 합니다 . 이 기능은 주로 변경 감지 코드에서 내부적으로 사용됩니다. 이 기능은 범용 복사 기능을위한 것이 아니며 몇 가지 제한 사항이 있습니다 (아래 참조).</target>
        </trans-unit>
        <trans-unit id="afa1484b840a9ffabd1ceb69c929659784229740" translate="yes" xml:space="preserve">
          <source>Creates a new array or string containing only a specified number of elements. The elements are taken from either the beginning or the end of the source array, string or number, as specified by the value and sign (positive or negative) of &lt;code&gt;limit&lt;/code&gt;. Other array-like objects are also supported (e.g. array subclasses, NodeLists, jqLite/jQuery collections etc). If a number is used as input, it is converted to a string.</source>
          <target state="translated">지정된 수의 요소 만 포함하는 새 배열 또는 문자열을 만듭니다. &lt;code&gt;limit&lt;/code&gt; 의 값 및 부호 (양수 또는 음수)로 지정된대로 소스 배열, 문자열 또는 숫자의 시작 또는 끝에서 요소를 가져옵니다 . 다른 배열과 유사한 객체 (예 : 배열 서브 클래스, NodeList, jqLite / jQuery 컬렉션 등)도 지원됩니다. 숫자가 입력으로 사용되면 문자열로 변환됩니다.</target>
        </trans-unit>
        <trans-unit id="be3c2e6c2da6bbf270113921436fdebc0aadccf9" translate="yes" xml:space="preserve">
          <source>Creates a new backend definition for DELETE requests. For more info see &lt;code&gt;when()&lt;/code&gt;.</source>
          <target state="translated">DELETE 요청에 대한 새 백엔드 정의를 작성합니다. 자세한 내용은 &lt;code&gt;when()&lt;/code&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="e535501af031225c35fb51be3e57cd8b30dbbd81" translate="yes" xml:space="preserve">
          <source>Creates a new backend definition for GET requests. For more info see &lt;code&gt;when()&lt;/code&gt;.</source>
          <target state="translated">GET 요청에 대한 새 백엔드 정의를 작성합니다. 자세한 내용은 &lt;code&gt;when()&lt;/code&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="356cc2f1fc79ace6115ff3114750774f5192302f" translate="yes" xml:space="preserve">
          <source>Creates a new backend definition for HEAD requests. For more info see &lt;code&gt;when()&lt;/code&gt;.</source>
          <target state="translated">HEAD 요청에 대한 새 백엔드 정의를 작성합니다. 자세한 내용은 &lt;code&gt;when()&lt;/code&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="049cbbc849e59668c71cc30e7a114207708c87cf" translate="yes" xml:space="preserve">
          <source>Creates a new backend definition for JSONP requests. For more info see &lt;code&gt;when()&lt;/code&gt;.</source>
          <target state="translated">JSONP 요청에 대한 새 백엔드 정의를 작성합니다. 자세한 내용은 &lt;code&gt;when()&lt;/code&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="6a1e3e71e874615b87146e6893453eeadfaf6659" translate="yes" xml:space="preserve">
          <source>Creates a new backend definition for PATCH requests. For more info see &lt;code&gt;when()&lt;/code&gt;.</source>
          <target state="translated">PATCH 요청에 대한 새 백엔드 정의를 작성합니다. 자세한 내용은 &lt;code&gt;when()&lt;/code&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="eda4d8b9cd6e902637dd9ad1e48fec7c8bb7cd5c" translate="yes" xml:space="preserve">
          <source>Creates a new backend definition for POST requests. For more info see &lt;code&gt;when()&lt;/code&gt;.</source>
          <target state="translated">POST 요청에 대한 새 백엔드 정의를 작성합니다. 자세한 내용은 &lt;code&gt;when()&lt;/code&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="25a82e38306940d53cc0431c2027b19ad9784508" translate="yes" xml:space="preserve">
          <source>Creates a new backend definition for PUT requests. For more info see &lt;code&gt;when()&lt;/code&gt;.</source>
          <target state="translated">PUT 요청에 대한 새 백엔드 정의를 작성합니다. 자세한 내용은 &lt;code&gt;when()&lt;/code&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="15f03f22d3c9680dc729ef2ccf8e1606ba4e48fa" translate="yes" xml:space="preserve">
          <source>Creates a new backend definition that compares only with the requested route.</source>
          <target state="translated">요청 된 경로와 만 비교하는 새로운 백엔드 정의를 작성합니다.</target>
        </trans-unit>
        <trans-unit id="f48cdf8dae7db1d48c0c6ef4dea9caf8360e67d3" translate="yes" xml:space="preserve">
          <source>Creates a new backend definition.</source>
          <target state="translated">새로운 백엔드 정의를 작성합니다.</target>
        </trans-unit>
        <trans-unit id="e4122c824ad9684d95a45783de97719b5e6982d9" translate="yes" xml:space="preserve">
          <source>Creates a new child &lt;a href=&quot;%24rootscope.scope&quot;&gt;scope&lt;/a&gt;.</source>
          <target state="translated">새로운 자식 &lt;a href=&quot;%24rootscope.scope&quot;&gt;범위를&lt;/a&gt; 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="de053e738e592f1089fb9a006cc3b78b9a9bb916" translate="yes" xml:space="preserve">
          <source>Creates a new request expectation for DELETE requests. For more info see &lt;code&gt;expect()&lt;/code&gt;.</source>
          <target state="translated">DELETE 요청에 대한 새 요청 예상을 작성합니다. 자세한 내용은 &lt;code&gt;expect()&lt;/code&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="e36dcfb22e2a05490dc118fb61c929695cfc0cd2" translate="yes" xml:space="preserve">
          <source>Creates a new request expectation for GET requests. For more info see &lt;code&gt;expect()&lt;/code&gt;.</source>
          <target state="translated">GET 요청에 대한 새 요청 예상을 작성합니다. 자세한 내용은 &lt;code&gt;expect()&lt;/code&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="caa7758c7686ac3d104ccfccb9c7de838c640b7d" translate="yes" xml:space="preserve">
          <source>Creates a new request expectation for HEAD requests. For more info see &lt;code&gt;expect()&lt;/code&gt;.</source>
          <target state="translated">HEAD 요청에 대한 새 요청 예상을 작성합니다. 자세한 내용은 &lt;code&gt;expect()&lt;/code&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="dbdab2ed8f022128732b490b699f2be275275bdd" translate="yes" xml:space="preserve">
          <source>Creates a new request expectation for JSONP requests. For more info see &lt;code&gt;expect()&lt;/code&gt;.</source>
          <target state="translated">JSONP 요청에 대한 새 요청 예상을 작성합니다. 자세한 내용은 &lt;code&gt;expect()&lt;/code&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="9a3d06136b6563a9d9eca8d2c71cc5612b1d724c" translate="yes" xml:space="preserve">
          <source>Creates a new request expectation for PATCH requests. For more info see &lt;code&gt;expect()&lt;/code&gt;.</source>
          <target state="translated">PATCH 요청에 대한 새 요청 예상을 작성합니다. 자세한 내용은 &lt;code&gt;expect()&lt;/code&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="ee017574d4a1cc6b2b83a364ba45ecf9253c34cd" translate="yes" xml:space="preserve">
          <source>Creates a new request expectation for POST requests. For more info see &lt;code&gt;expect()&lt;/code&gt;.</source>
          <target state="translated">POST 요청에 대한 새 요청 예상을 작성합니다. 자세한 내용은 &lt;code&gt;expect()&lt;/code&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="5406609dce34fb161e5e19a023b5cd524a033c97" translate="yes" xml:space="preserve">
          <source>Creates a new request expectation for PUT requests. For more info see &lt;code&gt;expect()&lt;/code&gt;.</source>
          <target state="translated">PUT 요청에 대한 새 요청 예상을 작성합니다. 자세한 내용은 &lt;code&gt;expect()&lt;/code&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="0be9180abbbad424813f1fc95de7b10c2c836e34" translate="yes" xml:space="preserve">
          <source>Creates a new request expectation that compares only with the requested route.</source>
          <target state="translated">요청 된 경로와 만 비교되는 새로운 요청 예상을 작성합니다.</target>
        </trans-unit>
        <trans-unit id="a30b5b3ceb57067554cf2b1480796fa683e821bd" translate="yes" xml:space="preserve">
          <source>Creates a new request expectation.</source>
          <target state="translated">새로운 요청 기대를 만듭니다.</target>
        </trans-unit>
        <trans-unit id="b87ac50e12a922afd057ef55f3f8b4babfd88906" translate="yes" xml:space="preserve">
          <source>Creates a promise that is resolved as rejected with the specified &lt;code&gt;reason&lt;/code&gt;. This api should be used to forward rejection in a chain of promises. If you are dealing with the last promise in a promise chain, you don't need to worry about it.</source>
          <target state="translated">지정된 &lt;code&gt;reason&lt;/code&gt; 거부 된 것으로 확인 된 약속을 만듭니다 . 이 API는 일련의 약속에서 거부를 전달하는 데 사용해야합니다. 약속 체인의 마지막 약속을 다루는 경우 걱정할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="2d3b67b5019f3d6a71328d9460125c9c206f73df" translate="yes" xml:space="preserve">
          <source>Creates an injector object that can be used for retrieving services as well as for dependency injection (see &lt;a href=&quot;../../../guide/di&quot;&gt;dependency injection&lt;/a&gt;).</source>
          <target state="translated">의존성 주입뿐만 아니라 서비스 검색에도 사용할 수있는 인젝터 오브젝트를 작성합니다 ( &lt;a href=&quot;../../../guide/di&quot;&gt;종속성 주입&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="7356a349c1f5567bb5bd540f22f1fb39ae0a858c" translate="yes" xml:space="preserve">
          <source>Creates an injector object that can be used for retrieving services as well as for dependency injection (see &lt;a href=&quot;../../guide/di&quot;&gt;dependency injection&lt;/a&gt;).</source>
          <target state="translated">의존성 주입뿐만 아니라 서비스 검색에도 사용할 수있는 인젝터 오브젝트를 작성합니다 ( &lt;a href=&quot;../../guide/di&quot;&gt;종속성 주입&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="8695fdeaecdde9d69786b268e43f9db9c6275ac8" translate="yes" xml:space="preserve">
          <source>Creates and configures &lt;a href=&quot;../service/%24sanitize&quot;&gt;&lt;code&gt;$sanitize&lt;/code&gt;&lt;/a&gt; instance.</source>
          <target state="translated">&lt;a href=&quot;../service/%24sanitize&quot;&gt; &lt;code&gt;$sanitize&lt;/code&gt; &lt;/a&gt; 인스턴스를 만들고 구성 합니다.</target>
        </trans-unit>
        <trans-unit id="02881b14df84f6433db6e90021eea6be086eb518" translate="yes" xml:space="preserve">
          <source>Creates and configures &lt;a href=&quot;ngsanitize/service/%24sanitize&quot;&gt;&lt;code&gt;$sanitize&lt;/code&gt;&lt;/a&gt; instance.</source>
          <target state="translated">&lt;a href=&quot;ngsanitize/service/%24sanitize&quot;&gt; &lt;code&gt;$sanitize&lt;/code&gt; &lt;/a&gt; 인스턴스를 만들고 구성 합니다.</target>
        </trans-unit>
        <trans-unit id="7b5cfadde58f93508e998389a777198ca3f108c0" translate="yes" xml:space="preserve">
          <source>Creates and configures &lt;a href=&quot;service/%24sanitize&quot;&gt;&lt;code&gt;$sanitize&lt;/code&gt;&lt;/a&gt; instance.</source>
          <target state="translated">&lt;a href=&quot;service/%24sanitize&quot;&gt; &lt;code&gt;$sanitize&lt;/code&gt; &lt;/a&gt; 인스턴스를 만들고 구성 합니다.</target>
        </trans-unit>
        <trans-unit id="edbda21e00ea49fe435ceaf70927ac4e177701c4" translate="yes" xml:space="preserve">
          <source>Creates and wires objects and functions</source>
          <target state="translated">객체와 함수를 생성하고 연결합니다</target>
        </trans-unit>
        <trans-unit id="ffcaf8830fe68d1b1f68ba57b8709c9d5b6199de" translate="yes" xml:space="preserve">
          <source>Creating Directives</source>
          <target state="translated">지시문 작성</target>
        </trans-unit>
        <trans-unit id="a700dae1bd51c2c95667196a1753a5f50b43b0b7" translate="yes" xml:space="preserve">
          <source>Creating Directives that Communicate</source>
          <target state="translated">의사 소통하는 지시문 작성</target>
        </trans-unit>
        <trans-unit id="8fbe66dd12a5b3a3552d7672f77f9a38a3123301" translate="yes" xml:space="preserve">
          <source>Creating Services</source>
          <target state="translated">서비스 만들기</target>
        </trans-unit>
        <trans-unit id="c10c8a9d5669bca0e2013728d5dfd0cb881a0713" translate="yes" xml:space="preserve">
          <source>Creating a Directive that Adds Event Listeners</source>
          <target state="translated">이벤트 리스너를 추가하는 지시문 작성</target>
        </trans-unit>
        <trans-unit id="f13dcfd72af44ef370551b4c95c6f4d5f8e82c46" translate="yes" xml:space="preserve">
          <source>Creating a Directive that Manipulates the DOM</source>
          <target state="translated">DOM을 조작하는 지시문 작성</target>
        </trans-unit>
        <trans-unit id="4908e625ec5c3fbe3253cd44e110565c0a03e356" translate="yes" xml:space="preserve">
          <source>Creating a Directive that Wraps Other Elements</source>
          <target state="translated">다른 요소를 감싸는 지시문 만들기</target>
        </trans-unit>
        <trans-unit id="00480fa3f76205fbcff45fe1d9ab6fe1895c433a" translate="yes" xml:space="preserve">
          <source>Creating aliases for these properties is possible with &lt;a href=&quot;nginit&quot;&gt;&lt;code&gt;ngInit&lt;/code&gt;&lt;/a&gt;. This may be useful when, for instance, nesting ngRepeats.</source>
          <target state="translated">&lt;a href=&quot;nginit&quot;&gt; &lt;code&gt;ngInit&lt;/code&gt; 를 사용&lt;/a&gt; 하여 이러한 속성에 대한 별칭을 만들 수 있습니다. 예를 들어 ngRepeats를 중첩 할 때 유용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4273e44c3ccf98604f4bbe4a2ea0575d5e6e7b94" translate="yes" xml:space="preserve">
          <source>Creating and configuring a Component</source>
          <target state="translated">구성 요소 작성 및 구성</target>
        </trans-unit>
        <trans-unit id="d2c811c7456325eb8da1fc874215e55532d587bd" translate="yes" xml:space="preserve">
          <source>Creating custom actions</source>
          <target state="translated">맞춤 액션 만들기</target>
        </trans-unit>
        <trans-unit id="b9844587b0d135a1f842558883719b722f871819" translate="yes" xml:space="preserve">
          <source>Creating custom filters</source>
          <target state="translated">맞춤 필터 만들기</target>
        </trans-unit>
        <trans-unit id="b5746d62259c2e464d484d43c4e1554d32d064d9" translate="yes" xml:space="preserve">
          <source>Creating local properties on widget scope creates two problems:</source>
          <target state="translated">위젯 범위에서 로컬 특성을 작성하면 두 가지 문제점이 발생합니다.</target>
        </trans-unit>
        <trans-unit id="e2a4b56bb483692f538a3505e58481eb966e8ce9" translate="yes" xml:space="preserve">
          <source>Creation versus Retrieval</source>
          <target state="translated">창조 대 검색</target>
        </trans-unit>
        <trans-unit id="5af074006d430540128f3bf6a44cb8c6f303320b" translate="yes" xml:space="preserve">
          <source>Cross Site Request Forgery (XSRF) Protection</source>
          <target state="translated">XSRF (Cross Site Request Forgery) 보호</target>
        </trans-unit>
        <trans-unit id="c8673739ea7c8a0f8b25ce9b61f288f6a98b1451" translate="yes" xml:space="preserve">
          <source>Cross Site Request Forgery (XSRF/CSRF)</source>
          <target state="translated">사이트 간 요청 위조 (XSRF / CSRF)</target>
        </trans-unit>
        <trans-unit id="7fef8120d67245c18d2d3c23d1ec55c168fe972d" translate="yes" xml:space="preserve">
          <source>Currency symbol</source>
          <target state="translated">통화 기호</target>
        </trans-unit>
        <trans-unit id="3dd4bbd8be3d3584f64ec9d144ad17acc82acc08" translate="yes" xml:space="preserve">
          <source>Currency symbol or identifier to be displayed.</source>
          <target state="translated">표시 할 통화 기호 또는 식별자입니다.</target>
        </trans-unit>
        <trans-unit id="8fc66fe26d9d8793cd1000496300cf9f2f548b32" translate="yes" xml:space="preserve">
          <source>Current RegExp if called without value or self for chaining otherwise.</source>
          <target state="translated">값을 지정하지 않고 호출하거나 그렇지 않으면 연결을 위해 자체 RegExp</target>
        </trans-unit>
        <trans-unit id="f226ae8b1558106c8adc6746637c3dbe2b31d834" translate="yes" xml:space="preserve">
          <source>Current route information.</source>
          <target state="translated">현재 경로 정보.</target>
        </trans-unit>
        <trans-unit id="1c94bf3985b8bccc15be49b6d0743db478a47075" translate="yes" xml:space="preserve">
          <source>Current value when called without a new value or self for chaining otherwise.</source>
          <target state="translated">새로운 값없이 호출 될 때의 현재 값 또는 다른 방식으로 연결하기 위해 자체 값.</target>
        </trans-unit>
        <trans-unit id="6334d13a652b9fde3f48f69b6ce9c655418ee599" translate="yes" xml:space="preserve">
          <source>Current/previous route information.</source>
          <target state="translated">현재 / 이전 경로 정보.</target>
        </trans-unit>
        <trans-unit id="0c6c0c1904e8345998b07d175a1de44245761ead" translate="yes" xml:space="preserve">
          <source>Currently, ngAria interfaces with the following directives:</source>
          <target state="translated">현재 ngAria는 다음 지시문과 인터페이스합니다.</target>
        </trans-unit>
        <trans-unit id="4edef8165e277d94077897e6b7f0af7494905313" translate="yes" xml:space="preserve">
          <source>Currently, the &lt;strong&gt;Component Router&lt;/strong&gt; module must be installed via &lt;code&gt;npm&lt;/code&gt;/&lt;code&gt;yarn&lt;/code&gt;, it is not available on Bower or the Google CDN.</source>
          <target state="translated">현재 &lt;strong&gt;구성 요소 라우터&lt;/strong&gt; 모듈은 &lt;code&gt;npm&lt;/code&gt; 을 통해 설치해야합니다. / &lt;code&gt;yarn&lt;/code&gt; 을 Bower 또는 Google CDN에서는 사용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="11e09346e5e227c0f25baf70a4c23438004527d4" translate="yes" xml:space="preserve">
          <source>Currently, the ngMessages module only contains the code for the &lt;code&gt;ngMessages&lt;/code&gt;, &lt;code&gt;ngMessagesInclude&lt;/code&gt;&lt;code&gt;ngMessage&lt;/code&gt;, &lt;code&gt;ngMessageExp&lt;/code&gt; and &lt;code&gt;ngMessageDefault&lt;/code&gt; directives.</source>
          <target state="translated">현재 ngMessages 모듈에는 &lt;code&gt;ngMessages&lt;/code&gt; , &lt;code&gt;ngMessagesInclude&lt;/code&gt; &lt;code&gt;ngMessage&lt;/code&gt; , &lt;code&gt;ngMessageExp&lt;/code&gt; 에 대한 코드 만 포함되어 있습니다. 및 &lt;code&gt;ngMessageDefault&lt;/code&gt; 지시문에 .</target>
        </trans-unit>
        <trans-unit id="74d5d1b5bbf2644cec8eb6da6dea035b822c7813" translate="yes" xml:space="preserve">
          <source>Custom Validation</source>
          <target state="translated">맞춤 검증</target>
        </trans-unit>
        <trans-unit id="9b15bde65e9d230027d2d89ae778a8a3108d5df6" translate="yes" xml:space="preserve">
          <source>Custom error message displayed after the user interacted with a control (i.e. when &lt;code&gt;$touched&lt;/code&gt; is set)</source>
          <target state="translated">사용자가 컨트롤과 상호 작용 한 후 (예 : &lt;code&gt;$touched&lt;/code&gt; 가 설정된 경우)</target>
        </trans-unit>
        <trans-unit id="b78660829b757d40d1cf02c5a67f5153479dc66e" translate="yes" xml:space="preserve">
          <source>Custom error message displayed upon submitting the form (&lt;code&gt;$submitted&lt;/code&gt; is set), even if the user didn't interact with a control</source>
          <target state="translated">양식을 제출할 때 표시되는 맞춤 오류 메시지 ( &lt;code&gt;$submitted&lt;/code&gt; 컨트롤과 상호 작용하지 않더라도 $ submitted 가 설정 됨)</target>
        </trans-unit>
        <trans-unit id="d33be98b55db6c87b9f4e29aaa56cfc52eb74725" translate="yes" xml:space="preserve">
          <source>Custom model update triggers</source>
          <target state="translated">맞춤형 모델 업데이트 트리거</target>
        </trans-unit>
        <trans-unit id="7a16736ffe7d57250d06a87b758621a6d4a77ba3" translate="yes" xml:space="preserve">
          <source>DOM control structures for repeating, showing and hiding DOM fragments.</source>
          <target state="translated">DOM 조각 반복, 표시 및 숨기기를위한 DOM 제어 구조.</target>
        </trans-unit>
        <trans-unit id="9a03bb780a978fe1bf04b76b90365ca5e1cd807d" translate="yes" xml:space="preserve">
          <source>DOM element which is the root of AngularJS application.</source>
          <target state="translated">AngularJS 애플리케이션의 루트 인 DOM 요소</target>
        </trans-unit>
        <trans-unit id="854d235e232e068ef083bf90af82bc89c9fe562d" translate="yes" xml:space="preserve">
          <source>Dart</source>
          <target state="translated">Dart</target>
        </trans-unit>
        <trans-unit id="f20dcbd9b08fb9703f8879bef939587ab26fc293" translate="yes" xml:space="preserve">
          <source>Data Binding</source>
          <target state="translated">데이터 바인딩</target>
        </trans-unit>
        <trans-unit id="7865e224a6bf57800137c76704b7833654f7c47d" translate="yes" xml:space="preserve">
          <source>Data Binding in AngularJS Templates</source>
          <target state="translated">AngularJS 템플릿의 데이터 바인딩</target>
        </trans-unit>
        <trans-unit id="1ab20277bfa22894e79f0856de3b27a40d577c50" translate="yes" xml:space="preserve">
          <source>Data Binding in Classical Template Systems</source>
          <target state="translated">클래식 템플릿 시스템의 데이터 바인딩</target>
        </trans-unit>
        <trans-unit id="ac99f5c112abda52d4e6d7eedc74c9f89d12480b" translate="yes" xml:space="preserve">
          <source>Data Modeling &lt;a href=&quot;https://github.com/js-data/js-data-angular&quot;&gt;JS-Data-Angular&lt;/a&gt;</source>
          <target state="translated">데이터 모델링 &lt;a href=&quot;https://github.com/js-data/js-data-angular&quot;&gt;JS- 데이터-앵귤러&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d38cca5da9c7df446a12182ab09218cd420e4017" translate="yes" xml:space="preserve">
          <source>Data binding</source>
          <target state="translated">데이터 바인딩</target>
        </trans-unit>
        <trans-unit id="156ab9c87cd161d279876149b77acd0b58d8fe2b" translate="yes" xml:space="preserve">
          <source>Data binding, as in &lt;code&gt;{{}}&lt;/code&gt;.</source>
          <target state="translated">데이터로 바인딩 &lt;code&gt;{{}}&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e6ebec9e3c5afe4e96b7b5d0a2b400ca889458eb" translate="yes" xml:space="preserve">
          <source>Data properties used by the &lt;a href=&quot;../function/angular.element#methods.html&quot;&gt;&lt;code&gt;scope()&lt;/code&gt;/&lt;code&gt;isolateScope()&lt;/code&gt; methods&lt;/a&gt; to return the element's scope.</source>
          <target state="translated">&lt;a href=&quot;../function/angular.element#methods.html&quot;&gt; &lt;code&gt;scope()&lt;/code&gt; / &lt;code&gt;isolateScope()&lt;/code&gt; 메서드&lt;/a&gt; 가 요소의 범위를 반환하는 데 사용하는 데이터 속성 .</target>
        </trans-unit>
        <trans-unit id="f722ccac00c1317dd3e7eb7f3ac23bac8fb4eb14" translate="yes" xml:space="preserve">
          <source>Data-binding in AngularJS apps is the automatic synchronization of data between the model and view components. The way that AngularJS implements data-binding lets you treat the model as the single-source-of-truth in your application. The view is a projection of the model at all times. When the model changes, the view reflects the change, and vice versa.</source>
          <target state="translated">AngularJS 앱의 데이터 바인딩은 모델과 뷰 구성 요소 간의 데이터 자동 동기화입니다. AngularJS가 데이터 바인딩을 구현하는 방식으로 모델을 애플리케이션의 단일 소스로 취급 할 수 있습니다. 뷰는 항상 모델의 투영입니다. 모델이 변경되면 뷰에 변경 사항이 반영되고 그 반대도 마찬가지입니다.</target>
        </trans-unit>
        <trans-unit id="77a57d575cbd23f1439b67b6fdff07165e77bcc2" translate="yes" xml:space="preserve">
          <source>Date to format either as Date object, milliseconds (string or number) or various ISO 8601 datetime string formats (e.g. yyyy-MM-ddTHH:mm:ss.sssZ and its shorter versions like yyyy-MM-ddTHH:mmZ, yyyy-MM-dd or yyyyMMddTHHmmssZ). If no timezone is specified in the string input, the time is considered to be in the local timezone.</source>
          <target state="translated">Date 객체, 밀리 초 (문자열 또는 숫자) 또는 다양한 ISO 8601 날짜 / 시간 문자열 형식 (예 : yyyy-MM-ddTHH : mm : ss.sssZ) 및 yyyy-MM-ddTHH : mmZ, yyyy-MM과 같은 짧은 버전으로 형식화 할 날짜 -dd 또는 yyyyMMddTHHmmssZ). 문자열 입력에 시간대를 지정하지 않으면 시간이 현지 시간대로 간주됩니다.</target>
        </trans-unit>
        <trans-unit id="1ebe58a75d08e8dfda58bd2413fc709aa1379c08" translate="yes" xml:space="preserve">
          <source>Debouncing updates</source>
          <target state="translated">업데이트 취소</target>
        </trans-unit>
        <trans-unit id="a2e23b650a15e5c693ca1445133d5ee60d9d20b4" translate="yes" xml:space="preserve">
          <source>Decorators</source>
          <target state="translated">Decorators</target>
        </trans-unit>
        <trans-unit id="5e42ebfd421aa36ad532cb84814016fb095d849b" translate="yes" xml:space="preserve">
          <source>Decorators are a design pattern that is used to separate modification or &lt;em&gt;decoration&lt;/em&gt; of a class without modifying the original source code. In AngularJS, decorators are functions that allow a service, directive or filter to be modified prior to its usage.</source>
          <target state="translated">데코레이터는 원본 소스 코드를 수정하지 않고 클래스의 수정 또는 &lt;em&gt;장식&lt;/em&gt; 을 분리하는 데 사용되는 디자인 패턴입니다 . AngularJS에서 데코레이터는 서비스, 지시문 또는 필터를 사용하기 전에 수정할 수있는 기능입니다.</target>
        </trans-unit>
        <trans-unit id="a7868dadf07f1c7850edc7089cb77140b698014a" translate="yes" xml:space="preserve">
          <source>Decorators have different rules for different services. This is because services are registered in different ways. Services are selected by name, however filters and directives are selected by appending &lt;code&gt;&quot;Filter&quot;&lt;/code&gt; or &lt;code&gt;&quot;Directive&quot;&lt;/code&gt; to the end of the name. The &lt;code&gt;$delegate&lt;/code&gt; provided is dictated by the type of service.</source>
          <target state="translated">데코레이터마다 서비스마다 다른 규칙이 있습니다. 서비스가 다른 방식으로 등록 되었기 때문입니다. 서비스는 이름으로 선택되지만 필터 및 지시문은 이름 끝에 &lt;code&gt;&quot;Filter&quot;&lt;/code&gt; 또는 &lt;code&gt;&quot;Directive&quot;&lt;/code&gt; 를 추가하여 선택됩니다 . &lt;code&gt;$delegate&lt;/code&gt; 제공은 서비스의 종류에 의해 결정됩니다.</target>
        </trans-unit>
        <trans-unit id="09211fe2da464fdb5a53e646de8838c5aaa9ef4f" translate="yes" xml:space="preserve">
          <source>Deeply extends the destination object &lt;code&gt;dst&lt;/code&gt; by copying own enumerable properties from the &lt;code&gt;src&lt;/code&gt; object(s) to &lt;code&gt;dst&lt;/code&gt;. You can specify multiple &lt;code&gt;src&lt;/code&gt; objects. If you want to preserve original objects, you can do so by passing an empty object as the target: &lt;code&gt;var object = angular.merge({}, object1, object2)&lt;/code&gt;.</source>
          <target state="translated">깊이 대상 객체의 확장 &lt;code&gt;dst&lt;/code&gt; 로부터 자신의 열거 속성을 복사하여 &lt;code&gt;src&lt;/code&gt; 에 객체 (들) &lt;code&gt;dst&lt;/code&gt; . 여러 &lt;code&gt;src&lt;/code&gt; 객체를 지정할 수 있습니다 . 원본 객체를 유지하려면 빈 객체를 대상으로 전달하면됩니다. &lt;code&gt;var object = angular.merge({}, object1, object2)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="48d349eb48cca72baf0fba3472796293caf10dff" translate="yes" xml:space="preserve">
          <source>Default &lt;a href=&quot;%24http&quot;&gt;&lt;code&gt;$http&lt;/code&gt;&lt;/a&gt; params serializer that converts objects to strings according to the following rules:</source>
          <target state="translated">다음 규칙에 따라 객체를 문자열로 변환하는 기본 &lt;a href=&quot;%24http&quot;&gt; &lt;code&gt;$http&lt;/code&gt; &lt;/a&gt; params serializer :</target>
        </trans-unit>
        <trans-unit id="e18582a087571d146a0e46c24129165fcade2bbe" translate="yes" xml:space="preserve">
          <source>Default &lt;a href=&quot;service/%24http&quot;&gt;&lt;code&gt;$http&lt;/code&gt;&lt;/a&gt; params serializer that converts objects to strings according to the following rules:</source>
          <target state="translated">다음 규칙에 따라 객체를 문자열로 변환하는 기본 &lt;a href=&quot;service/%24http&quot;&gt; &lt;code&gt;$http&lt;/code&gt; &lt;/a&gt; params serializer :</target>
        </trans-unit>
        <trans-unit id="272d05ca374dc5c4d632482aeb433788c4ec30ec" translate="yes" xml:space="preserve">
          <source>Default Transformations</source>
          <target state="translated">기본 변환</target>
        </trans-unit>
        <trans-unit id="e5f063eb61d4592c613ead4c13dd985673caf4ef" translate="yes" xml:space="preserve">
          <source>Default events, extra triggers, and catch-all debounce values</source>
          <target state="translated">기본 이벤트, 추가 트리거 및 포괄 모든 디 바운스 값</target>
        </trans-unit>
        <trans-unit id="31d4d566cb937a1de4b2420380b5397c1828e7ea" translate="yes" xml:space="preserve">
          <source>Default implementation of $animate that doesn't perform any animations, instead just synchronously performs DOM updates and resolves the returned runner promise.</source>
          <target state="translated">애니메이션을 수행하지 않는 $ animate의 기본 구현은 DOM 업데이트를 동기식으로 수행하고 반환 된 러너 약속을 해결합니다.</target>
        </trans-unit>
        <trans-unit id="2c5bb4ffb680656f0530a451ee96703523ca759b" translate="yes" xml:space="preserve">
          <source>Default values for &lt;code&gt;url&lt;/code&gt; parameters. These can be overridden in &lt;code&gt;actions&lt;/code&gt; methods. If a parameter value is a function, it will be called every time a param value needs to be obtained for a request (unless the param was overridden). The function will be passed the current data value as an argument.</source>
          <target state="translated">&lt;code&gt;url&lt;/code&gt; 매개 변수의 기본값 입니다. 이것들은 &lt;code&gt;actions&lt;/code&gt; 메소드 에서 재정의 될 수 있습니다 . 매개 변수 값이 함수 인 경우 요청에 대해 매개 변수 값을 확보해야 할 때마다 (매개 변수가 대체되지 않는 한) 호출됩니다. 함수는 현재 데이터 값을 인수로 전달합니다.</target>
        </trans-unit>
        <trans-unit id="317bbd656753a9dd8ea52dce97e89a2822b25653" translate="yes" xml:space="preserve">
          <source>Default:</source>
          <target state="translated">Default:</target>
        </trans-unit>
        <trans-unit id="1edc1c012a2ea4113df21912c28c7ea3c9ec3a61" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;'!'&lt;/code&gt;</source>
          <target state="translated">기본값 : &lt;code&gt;'!'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5f38409cbc5f1ef34d4d1682cfb27697f30ae623" translate="yes" xml:space="preserve">
          <source>Default: true. When used without argument, it returns the current value.</source>
          <target state="translated">기본값 : true 인수없이 사용하면 현재 값을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="f8652ebd1a1875dc842cac2cb6d36ca46a049174" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">기본값은 &lt;code&gt;false&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="797eed95d0237127f8eda8c263a529ceb7fafcb9" translate="yes" xml:space="preserve">
          <source>Defaults to false. If no value is specified, returns the current configured value.</source>
          <target state="translated">기본값은 false입니다. 값을 지정하지 않으면 현재 구성된 값을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="fcabacc99098c666fe2451c159c66618bff14d10" translate="yes" xml:space="preserve">
          <source>Deferred Bootstrap</source>
          <target state="translated">지연된 부트 스트랩</target>
        </trans-unit>
        <trans-unit id="74c52f18a0d6437fe8a1f390cd629d4d1f6fb607" translate="yes" xml:space="preserve">
          <source>Define an animation on the affected elements.</source>
          <target state="translated">영향을받는 요소에 애니메이션을 정의하십시오.</target>
        </trans-unit>
        <trans-unit id="0d1872060c4b7a4227a5bb96f09173f2a080f3cf" translate="yes" xml:space="preserve">
          <source>Defines an animation hook that can be later used with &lt;a href=&quot;../service/%24animate&quot;&gt;$animate&lt;/a&gt; service and directives that use this service.</source>
          <target state="translated">나중에 &lt;a href=&quot;../service/%24animate&quot;&gt;$ animate&lt;/a&gt; 서비스 및이 서비스를 사용하는 지시문과 함께 사용할 수있는 애니메이션 후크를 정의합니다 .</target>
        </trans-unit>
        <trans-unit id="6cbc7c52232bf21d30296e7e147625b5fda618ff" translate="yes" xml:space="preserve">
          <source>Defines the security context for DOM properties bound by ng-prop-*.</source>
          <target state="translated">ng-prop- *에 의해 바인딩 된 DOM 속성에 대한 보안 컨텍스트를 정의합니다.</target>
        </trans-unit>
        <trans-unit id="32989cdf0067cee754e3070b85d64e05afb480b3" translate="yes" xml:space="preserve">
          <source>Delay in milliseconds.</source>
          <target state="translated">밀리 초 단위로 지연됩니다.</target>
        </trans-unit>
        <trans-unit id="3302581e2ec4f0f6eeb35f27969f476b33fc5b38" translate="yes" xml:space="preserve">
          <source>Delegates to &lt;a href=&quot;%24scedelegate#getTrusted.html&quot;&gt;&lt;code&gt;$sceDelegate.getTrusted&lt;/code&gt;&lt;/a&gt;. As such, takes any input, and either returns a value that's safe to use in the specified context, or throws an exception. This function is aware of trusted values created by the &lt;code&gt;trustAs&lt;/code&gt; function and its shorthands, and when contexts are appropriate, returns the unwrapped value as-is. Finally, this function can also throw when there is no way to turn &lt;code&gt;maybeTrusted&lt;/code&gt; in a safe value (e.g., no sanitization is available or possible.)</source>
          <target state="translated">&lt;a href=&quot;%24scedelegate#getTrusted.html&quot;&gt; &lt;code&gt;$sceDelegate.getTrusted&lt;/code&gt; &lt;/a&gt; 위임합니다 . 따라서 입력을 받고 지정된 컨텍스트에서 사용하기에 안전한 값을 반환하거나 예외를 throw합니다. 이 함수는 &lt;code&gt;trustAs&lt;/code&gt; 함수에 의해 생성 된 신뢰할 수있는 값 과 그 속기를 알고 있으며 , 컨텍스트가 적절하면 래핑되지 않은 값을 그대로 반환합니다. 마지막으로,이 기능은 안전한 값으로 (예를 들어, 살균을 사용할 수 없거나 가능하지 않은) &lt;code&gt;maybeTrusted&lt;/code&gt; 돌릴 방법이 없을 때 던질 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f25baa776bc468f235f2d35f9972a7ad7ed42aa2" translate="yes" xml:space="preserve">
          <source>Delegates to &lt;a href=&quot;%24scedelegate#trustAs.html&quot;&gt;&lt;code&gt;$sceDelegate.trustAs&lt;/code&gt;&lt;/a&gt;. As such, returns a wrapped object that represents your value, and the trust you have in its safety for the given context. AngularJS can then use that value as-is in bindings of the specified secure context. This is used in bindings for &lt;code&gt;ng-bind-html&lt;/code&gt;, &lt;code&gt;ng-include&lt;/code&gt;, and most &lt;code&gt;src&lt;/code&gt; attribute interpolations. See &lt;a href=&quot;%24sce&quot;&gt;$sce&lt;/a&gt; for strict contextual escaping.</source>
          <target state="translated">&lt;a href=&quot;%24scedelegate#trustAs.html&quot;&gt; &lt;code&gt;$sceDelegate.trustAs&lt;/code&gt; &lt;/a&gt; 위임합니다 . 이와 같이, 값과 주어진 컨텍스트에 대한 안전성에 대한 신뢰를 나타내는 랩핑 된 오브젝트를 리턴합니다. 그러면 AngularJS는 지정된 보안 컨텍스트의 바인딩에있는 그대로 해당 값을 사용할 수 있습니다. 이것은 &lt;code&gt;ng-bind-html&lt;/code&gt; , &lt;code&gt;ng-include&lt;/code&gt; 및 대부분의 &lt;code&gt;src&lt;/code&gt; 속성 보간에 대한 바인딩에 사용됩니다 . 엄격한 문맥 이탈에 대해서는 &lt;a href=&quot;%24sce&quot;&gt;$ sce&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="37499fbdb55b6f4f8b4ca5691cd7ea820e28edff" translate="yes" xml:space="preserve">
          <source>Demonstration of nesting</source>
          <target state="translated">중첩 시연</target>
        </trans-unit>
        <trans-unit id="0562f32dc56f5c702810cbe010068ddd38dbd69a" translate="yes" xml:space="preserve">
          <source>Dependencies</source>
          <target state="translated">Dependencies</target>
        </trans-unit>
        <trans-unit id="6e0ef472d186db187fa4eb4f242e7f5f04004e20" translate="yes" xml:space="preserve">
          <source>Dependencies and Order of execution</source>
          <target state="translated">의존성과 실행 순서</target>
        </trans-unit>
        <trans-unit id="83a3432efddfe802976a8d09a38d176492fb9172" translate="yes" xml:space="preserve">
          <source>Dependency Annotation</source>
          <target state="translated">의존성 주석</target>
        </trans-unit>
        <trans-unit id="3aefbe2f210572802298b2ad0347dc9e423d2690" translate="yes" xml:space="preserve">
          <source>Dependency Injection</source>
          <target state="translated">의존성 주입</target>
        </trans-unit>
        <trans-unit id="bac2d51482e3737a082e50bda9cc403b422810db" translate="yes" xml:space="preserve">
          <source>Dependency Injection (DI) is a software design pattern that deals with how components get hold of their dependencies.</source>
          <target state="translated">종속성 주입 (DI)은 구성 요소가 종속성을 유지하는 방법을 처리하는 소프트웨어 디자인 패턴입니다.</target>
        </trans-unit>
        <trans-unit id="6a2482ebf1a4a0d728e1de1670f37f634d9570f4" translate="yes" xml:space="preserve">
          <source>Dependency Injection in AngularJS</source>
          <target state="translated">AngularJS의 의존성 주입</target>
        </trans-unit>
        <trans-unit id="4047c105d9cf170d730f33a2033d59df30b22746" translate="yes" xml:space="preserve">
          <source>Dependency Injection is pervasive throughout AngularJS. You can use it when defining components or when providing &lt;code&gt;run&lt;/code&gt; and &lt;code&gt;config&lt;/code&gt; blocks for a module.</source>
          <target state="translated">의존성 주입은 AngularJS 전체에 널리 퍼져 있습니다. 구성 요소를 정의 할 때 또는 모듈에 &lt;code&gt;run&lt;/code&gt; 및 &lt;code&gt;config&lt;/code&gt; 블록을 제공 할 때 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="327a55f82dc6818877a68e37b722bb7f2360b633" translate="yes" xml:space="preserve">
          <source>Deployment</source>
          <target state="translated">Deployment</target>
        </trans-unit>
        <trans-unit id="8201f6ff0e5004a4bfccdbd8144af27f2013f8eb" translate="yes" xml:space="preserve">
          <source>Deregister a control from the form.</source>
          <target state="translated">폼에서 컨트롤을 등록 해제하십시오.</target>
        </trans-unit>
        <trans-unit id="2af89a89cef15b822c0d0acc729909c302781d81" translate="yes" xml:space="preserve">
          <source>Deregisters an event listener based on the event which has been associated with the provided element. This method can be used in three different ways depending on the arguments:</source>
          <target state="translated">제공된 요소와 연관된 이벤트를 기반으로 이벤트 리스너를 등록 취소합니다. 이 방법은 인수에 따라 세 가지 방법으로 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="55f8ebc805e65b5b71ddafdae390e3be2bcd69af" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">Description</target>
        </trans-unit>
        <trans-unit id="e3f132e020453df1a9acbebf0586c70543cd8c33" translate="yes" xml:space="preserve">
          <source>Deserialized JSON string.</source>
          <target state="translated">역 직렬화 된 JSON 문자열</target>
        </trans-unit>
        <trans-unit id="4cd052d554151d1dc02fd9731f9a485e9108a179" translate="yes" xml:space="preserve">
          <source>Deserialized cookie value.</source>
          <target state="translated">역 직렬화 된 쿠키 값.</target>
        </trans-unit>
        <trans-unit id="1a80bbcd8ea1a814fe2e5d77c9178e1038921990" translate="yes" xml:space="preserve">
          <source>Deserializes a JSON string.</source>
          <target state="translated">JSON 문자열을 deserialize합니다.</target>
        </trans-unit>
        <trans-unit id="c27667616e652be84cc2c1b6b99515c219d63d79" translate="yes" xml:space="preserve">
          <source>Design Principles of AngularJS (video)</source>
          <target state="translated">AngularJS의 설계 원리 (비디오)</target>
        </trans-unit>
        <trans-unit id="dfc06cd40e8bbe5fdfe5911a99ffee939388a01e" translate="yes" xml:space="preserve">
          <source>Destination into which the source is copied. If provided, must be of the same type as &lt;code&gt;source&lt;/code&gt;.</source>
          <target state="translated">소스가 복사되는 대상 제공되는 경우 &lt;code&gt;source&lt;/code&gt; 와 동일한 유형이어야합니다 .</target>
        </trans-unit>
        <trans-unit id="888c51c1c5c27c5b36b8738901ae380a900d1853" translate="yes" xml:space="preserve">
          <source>Destination object.</source>
          <target state="translated">대상 객체.</target>
        </trans-unit>
        <trans-unit id="a1e2c0b92bdd88f0fcb0c37a3c357ef7f0dfaccb" translate="yes" xml:space="preserve">
          <source>Destroys the &lt;a href=&quot;%24cachefactory.cache&quot;&gt;Cache&lt;/a&gt; object entirely, removing it from the &lt;a href=&quot;../service/%24cachefactory&quot;&gt;$cacheFactory&lt;/a&gt; set.</source>
          <target state="translated">&lt;a href=&quot;../service/%24cachefactory&quot;&gt;$ cacheFactory&lt;/a&gt; 세트 에서 제거 하여 &lt;a href=&quot;%24cachefactory.cache&quot;&gt;Cache&lt;/a&gt; 객체를 완전히 파기합니다 .</target>
        </trans-unit>
        <trans-unit id="dc3decbb93847518f1a049dcf49d0d7c6560bcc6" translate="yes" xml:space="preserve">
          <source>Details</source>
          <target state="translated">Details</target>
        </trans-unit>
        <trans-unit id="3d2a0d7f87ba443d5d9d80e16047385ccffb8fd6" translate="yes" xml:space="preserve">
          <source>Determines if a reference is a &lt;code&gt;Function&lt;/code&gt;.</source>
          <target state="translated">참조가 &lt;code&gt;Function&lt;/code&gt; 인지 판별합니다 .</target>
        </trans-unit>
        <trans-unit id="4113c903a447369d1069839fa1070f046a4c3170" translate="yes" xml:space="preserve">
          <source>Determines if a reference is a &lt;code&gt;Number&lt;/code&gt;.</source>
          <target state="translated">참조가 &lt;code&gt;Number&lt;/code&gt; 인지 확인합니다 .</target>
        </trans-unit>
        <trans-unit id="e163b7686cbd75d6ac0afa43f59a2a1afdecef9a" translate="yes" xml:space="preserve">
          <source>Determines if a reference is a &lt;code&gt;String&lt;/code&gt;.</source>
          <target state="translated">참조가 &lt;code&gt;String&lt;/code&gt; 인지를 판정합니다 .</target>
        </trans-unit>
        <trans-unit id="1cf350f5a8069497935175567e278f51b713aa42" translate="yes" xml:space="preserve">
          <source>Determines if a reference is a DOM element (or wrapped jQuery element).</source>
          <target state="translated">참조가 DOM 요소 (또는 랩핑 된 jQuery 요소)인지 판별합니다.</target>
        </trans-unit>
        <trans-unit id="d525fdf8b5a9d0d2c0f715b9068dd493ccd6f25b" translate="yes" xml:space="preserve">
          <source>Determines if a reference is an &lt;code&gt;Array&lt;/code&gt;.</source>
          <target state="translated">참조가 &lt;code&gt;Array&lt;/code&gt; 인지 확인합니다 .</target>
        </trans-unit>
        <trans-unit id="b2be2458af6292b2bcac1469ec435b958dd083b5" translate="yes" xml:space="preserve">
          <source>Determines if a reference is an &lt;code&gt;Object&lt;/code&gt;. Unlike &lt;code&gt;typeof&lt;/code&gt; in JavaScript, &lt;code&gt;null&lt;/code&gt;s are not considered to be objects. Note that JavaScript arrays are objects.</source>
          <target state="translated">참조가 &lt;code&gt;Object&lt;/code&gt; 인지 확인합니다 . JavaScript의 &lt;code&gt;typeof&lt;/code&gt; 와 달리 &lt;code&gt;null&lt;/code&gt; 은 객체로 간주되지 않습니다. JavaScript 배열은 객체입니다.</target>
        </trans-unit>
        <trans-unit id="f1973ee38e2820392df6987b25ac623a3df111fa" translate="yes" xml:space="preserve">
          <source>Determines if a reference is defined.</source>
          <target state="translated">참조가 정의되어 있는지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="5acbddde98e2e5498cdcbbd393b69655ebfab3fd" translate="yes" xml:space="preserve">
          <source>Determines if a reference is undefined.</source>
          <target state="translated">참조가 정의되지 않았는지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="f3d374285cfc5534564499c4ffd11134b73c0553" translate="yes" xml:space="preserve">
          <source>Determines if a value is a date.</source>
          <target state="translated">값이 날짜인지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="03fe2f186b89e2d26eec4a0369aec723c0e6b2e2" translate="yes" xml:space="preserve">
          <source>Determines if two objects or two values are equivalent. Supports value types, regular expressions, arrays and objects.</source>
          <target state="translated">두 개체 또는 두 값이 같은지 확인합니다. 값 유형, 정규식, 배열 및 객체를 지원합니다.</target>
        </trans-unit>
        <trans-unit id="9e4bd027f55486bc01eb5c3e7f889479826c89f5" translate="yes" xml:space="preserve">
          <source>Develop</source>
          <target state="translated">Develop</target>
        </trans-unit>
        <trans-unit id="45e199c34f2e47d26bd6cf3b0bc418229f9353d7" translate="yes" xml:space="preserve">
          <source>Developer Guide</source>
          <target state="translated">개발자 안내서</target>
        </trans-unit>
        <trans-unit id="8b51dbd8f299bc7c073294b641b3f766d5ad2466" translate="yes" xml:space="preserve">
          <source>Didn't find what you're looking for here? Check out the &lt;a href=&quot;guide/external-resources&quot;&gt;External AngularJS resources guide&lt;/a&gt;.</source>
          <target state="translated">찾고있는 것을 찾지 못했습니까? &lt;a href=&quot;guide/external-resources&quot;&gt;External AngularJS 자원 안내서를&lt;/a&gt; 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="2886baaf05b749277028afeb9b687e96ffae3fa3" translate="yes" xml:space="preserve">
          <source>Differences between Kris Kowal's Q and $q</source>
          <target state="translated">Kris Kowal의 Q와 $ q의 차이점</target>
        </trans-unit>
        <trans-unit id="0a4e32e999a601265a21ab8df0f84e0f0c01e628" translate="yes" xml:space="preserve">
          <source>Differences from the ICU MessageFormat syntax</source>
          <target state="translated">ICU MessageFormat 구문과의 차이점</target>
        </trans-unit>
        <trans-unit id="82ee6eee6c53c6516212864425aaba8fdf0037c2" translate="yes" xml:space="preserve">
          <source>Different DOM between &lt;code&gt;template&lt;/code&gt; and &lt;code&gt;templateUrl&lt;/code&gt;: &lt;a href=&quot;https://github.com/angular/angular.js/issues/14326&quot;&gt;#10612&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;template&lt;/code&gt; 와 &lt;code&gt;templateUrl&lt;/code&gt; 사이의 다른 DOM : &lt;a href=&quot;https://github.com/angular/angular.js/issues/14326&quot;&gt;# 10612&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="164e0b79063f11a2936cf830fb48b8c7054cc118" translate="yes" xml:space="preserve">
          <source>Directive</source>
          <target state="translated">Directive</target>
        </trans-unit>
        <trans-unit id="fda754562558210f994489b54b2697a96dc73fa2" translate="yes" xml:space="preserve">
          <source>Directive Definition Object</source>
          <target state="translated">지시어 정의 객체</target>
        </trans-unit>
        <trans-unit id="e9cd5ca17a7c95f80bd097f0322c1ccdcc4c3d5b" translate="yes" xml:space="preserve">
          <source>Directive Info</source>
          <target state="translated">지시 정보</target>
        </trans-unit>
        <trans-unit id="67e1beffb6df3ce747606244ee286332d2ea20a6" translate="yes" xml:space="preserve">
          <source>Directive Support</source>
          <target state="translated">지시 지원</target>
        </trans-unit>
        <trans-unit id="1f833a7af0a6aaa31ef34696128cfbeafe3eed41" translate="yes" xml:space="preserve">
          <source>Directive components in ng</source>
          <target state="translated">ng의 지시문 구성 요소</target>
        </trans-unit>
        <trans-unit id="4cc0bdd0eee78ccef5ca412ee771d3f81c05f4a4" translate="yes" xml:space="preserve">
          <source>Directive components in ngAnimate</source>
          <target state="translated">ngAnimate의 지시문 구성 요소</target>
        </trans-unit>
        <trans-unit id="844df4f4bdaa7d4d1ccd12b056cbe1adfcc021cb" translate="yes" xml:space="preserve">
          <source>Directive components in ngComponentRouter</source>
          <target state="translated">ngComponentRouter의 지시문 구성 요소</target>
        </trans-unit>
        <trans-unit id="de98d7620ad6306ead111be196ed86e3671c7290" translate="yes" xml:space="preserve">
          <source>Directive components in ngMessages</source>
          <target state="translated">ngMessages의 지시문 구성 요소</target>
        </trans-unit>
        <trans-unit id="3e59659ae9dccbcaae81c53c6bc245083968f924" translate="yes" xml:space="preserve">
          <source>Directive components in ngRoute</source>
          <target state="translated">ngRoute의 지시문 구성 요소</target>
        </trans-unit>
        <trans-unit id="91447be933b3e2599ebeeeffc119c8212eeed0af" translate="yes" xml:space="preserve">
          <source>Directive components in ngTouch</source>
          <target state="translated">ngTouch의 지시문 구성 요소</target>
        </trans-unit>
        <trans-unit id="d6115f4adc06b0e052bc4ff5724424c7b78aeddd" translate="yes" xml:space="preserve">
          <source>Directive controllers can provide the following methods that are called by AngularJS at points in the life-cycle of the directive:</source>
          <target state="translated">지시문 제어기는 지시문의 수명주기 지점에서 AngularJS가 호출하는 다음 메소드를 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="302daa750770cb865e5e869c5d3fb8ea941e26e5" translate="yes" xml:space="preserve">
          <source>Directive name, or an object map of directives where the keys are the names and the values are the factories.</source>
          <target state="translated">지시문 이름 또는 키가 이름이고 값이 팩토리 인 지시문의 오브젝트 맵.</target>
        </trans-unit>
        <trans-unit id="7490be6dee2947f333e03a7200032b150a8f8592" translate="yes" xml:space="preserve">
          <source>Directive that instantiates &lt;a href=&quot;../type/form.formcontroller&quot;&gt;FormController&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../type/form.formcontroller&quot;&gt;FormController&lt;/a&gt; 를 인스턴스화하는 지시어 .</target>
        </trans-unit>
        <trans-unit id="d24b0ceb64605261d7559cd1d1e867e4d882600f" translate="yes" xml:space="preserve">
          <source>Directive that instantiates &lt;a href=&quot;type/form.formcontroller&quot;&gt;FormController&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;type/form.formcontroller&quot;&gt;FormController&lt;/a&gt; 를 인스턴스화하는 지시어 .</target>
        </trans-unit>
        <trans-unit id="8735ba9d320dcda668a0816d217511ecea07ecf0" translate="yes" xml:space="preserve">
          <source>Directive that marks the insertion point for the transcluded DOM of the nearest parent directive that uses transclusion.</source>
          <target state="translated">transclusion을 사용하는 가장 가까운 상위 지시문의 삽입 된 DOM에 대한 삽입 점을 표시하는 지시문입니다.</target>
        </trans-unit>
        <trans-unit id="746cc62cda06834c2b42e5ffe56a1badbb306cd7" translate="yes" xml:space="preserve">
          <source>Directive types</source>
          <target state="translated">지시어 타입</target>
        </trans-unit>
        <trans-unit id="28c82071e940360118b0611d5c912a71c32a0100" translate="yes" xml:space="preserve">
          <source>Directives</source>
          <target state="translated">Directives</target>
        </trans-unit>
        <trans-unit id="336c7042caff79e8e52e079db85c30958078de48" translate="yes" xml:space="preserve">
          <source>Directives are not deduplicated before compilation</source>
          <target state="translated">컴파일 전에 지시문은 중복 제거되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="0050d5ca31968a90a87b0b2b5fe12a4a6f033632" translate="yes" xml:space="preserve">
          <source>Directives are not re-compiled</source>
          <target state="translated">지시문은 다시 컴파일되지 않습니다</target>
        </trans-unit>
        <trans-unit id="8d67d16379fb0c5fb472d4b6392bed6f0a88bbfa" translate="yes" xml:space="preserve">
          <source>Directives can require the controllers of other directives to enable communication between each other. This can be achieved in a component by providing an object mapping for the &lt;code&gt;require&lt;/code&gt; property. The object keys specify the property names under which the required controllers (object values) will be bound to the requiring component's controller.</source>
          <target state="translated">지시문은 다른 지시문의 컨트롤러가 서로 통신 할 수 있도록 요구할 수 있습니다. 이는 &lt;code&gt;require&lt;/code&gt; 속성에 대한 객체 매핑을 제공하여 구성 요소에서 달성 할 수 있습니다 . 객체 키는 필요한 컨트롤러 (객체 값)가 필요한 구성 요소의 컨트롤러에 바인딩 될 속성 이름을 지정합니다.</target>
        </trans-unit>
        <trans-unit id="b5ec19ceda57dbf701f9e59456ca25e9c7b1a674" translate="yes" xml:space="preserve">
          <source>Directives in AngularJS are responsible for encapsulating complex functionality within custom HTML tags, attributes, classes or comments. Unit tests are very important for directives because the components you create with directives may be used throughout your application and in many different contexts.</source>
          <target state="translated">AngularJS의 지시문은 사용자 정의 HTML 태그, 속성, 클래스 또는 주석 내에 복잡한 기능을 캡슐화합니다. 지시문을 사용하여 만드는 구성 요소는 응용 프로그램 전체와 다양한 상황에서 사용될 수 있으므로 지시문에는 단위 테스트가 매우 중요합니다.</target>
        </trans-unit>
        <trans-unit id="bdc211594d3e011463f460b1b6ff16a3553721bd" translate="yes" xml:space="preserve">
          <source>Directives like &lt;a href=&quot;../api/ng/directive/ngclick&quot;&gt;&lt;code&gt;ngClick&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../api/ng/directive/ngfocus&quot;&gt;&lt;code&gt;ngFocus&lt;/code&gt;&lt;/a&gt; expose a &lt;code&gt;$event&lt;/code&gt; object within the scope of that expression. The object is an instance of a &lt;a href=&quot;http://api.jquery.com/category/events/event-object/&quot;&gt;jQuery Event Object&lt;/a&gt; when jQuery is present or a similar jqLite object.</source>
          <target state="translated">같은 지침 &lt;a href=&quot;../api/ng/directive/ngclick&quot;&gt; &lt;code&gt;ngClick&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../api/ng/directive/ngfocus&quot;&gt; &lt;code&gt;ngFocus&lt;/code&gt; 는&lt;/a&gt; 노출 &lt;code&gt;$event&lt;/code&gt; 그 표현의 범위 내에서 개체를. 객체는 jQuery가 있거나 jqLite 객체와 유사한 &lt;a href=&quot;http://api.jquery.com/category/events/event-object/&quot;&gt;jQuery 이벤트 객체&lt;/a&gt; 의 인스턴스입니다 .</target>
        </trans-unit>
        <trans-unit id="6434913d2a02f2df51c8dfef0163eab8e24c7df1" translate="yes" xml:space="preserve">
          <source>Directives often have a &lt;strong&gt;link function&lt;/strong&gt;. A link function allows the directive to register listeners to the specific cloned DOM element instance as well as to copy content into the DOM from the scope.</source>
          <target state="translated">지시어에는 종종 &lt;strong&gt;링크 기능이&lt;/strong&gt; 있습니다. 링크 함수를 사용하면 지시문이 리스너를 특정 복제 된 DOM 요소 인스턴스에 등록하고 컨텐츠를 범위에서 DOM으로 복사 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="033d63aa44ddfb57d03dea3272e0203cf62b3238" translate="yes" xml:space="preserve">
          <source>Directives that Create Scopes</source>
          <target state="translated">범위를 생성하는 지시문</target>
        </trans-unit>
        <trans-unit id="a74321a33161090e50af4b36d898258f47549ad8" translate="yes" xml:space="preserve">
          <source>Directives that use transclusion are treated specially by the compiler. Before their compile function is called, the contents of the directive's element are removed from the element and provided via a transclusion function. The directive's template is then appended to the directive's element, to which it can then insert the transcluded content into its template.</source>
          <target state="translated">변환을 사용하는 지시문은 컴파일러에서 특별히 처리합니다. 컴파일 함수가 호출되기 전에 지시문 요소의 내용이 요소에서 제거되고 변환 함수를 통해 제공됩니다. 지시문의 템플릿은 지시문의 요소에 추가되며, 변환 된 내용을 템플릿에 삽입 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4bdab4ccc71e22e8ec90abeea9ccfd1df46ff179" translate="yes" xml:space="preserve">
          <source>Directives that want to modify the DOM typically use the &lt;code&gt;link&lt;/code&gt; option to register DOM listeners as well as update the DOM. It is executed after the template has been cloned and is where directive logic will be put.</source>
          <target state="translated">DOM을 수정하려는 지시문은 일반적으로 &lt;code&gt;link&lt;/code&gt; 옵션을 사용하여 DOM 리스너를 등록하고 DOM을 업데이트합니다. 템플릿이 복제 된 후 실행되며 지시문 로직이 배치됩니다.</target>
        </trans-unit>
        <trans-unit id="e5140a8ef3a9bc2683f73052c7fd79865733a8ce" translate="yes" xml:space="preserve">
          <source>Dirty checking can be done with three strategies: By reference, by collection contents, and by value. The strategies differ in the kinds of changes they detect, and in their performance characteristics.</source>
          <target state="translated">더티 검사는 세 가지 전략으로 수행 할 수 있습니다 : 참조, 수집 내용 및 가치. 전략은 감지하는 변경의 종류와 성능 특성이 다릅니다.</target>
        </trans-unit>
        <trans-unit id="f7eed9ee6c74c9630f8e771d832431d6115feaf3" translate="yes" xml:space="preserve">
          <source>Dirty checking the scope for property changes is a common operation in AngularJS and for this reason the dirty checking function must be efficient. Care should be taken that the dirty checking function does not do any DOM access, as DOM access is orders of magnitude slower than property access on JavaScript object.</source>
          <target state="translated">속성 변경 범위의 더티 검사는 AngularJS에서 일반적인 작업이므로 더티 검사 기능이 효율적이어야합니다. DOM 액세스는 JavaScript 객체의 속성 액세스보다 훨씬 느리므로 더티 검사 기능은 DOM 액세스를 수행하지 않도록주의해야합니다.</target>
        </trans-unit>
        <trans-unit id="14f2ccf9e7d630a13a9a51eb1a154be01aba9e61" translate="yes" xml:space="preserve">
          <source>Disable comment and css class directives</source>
          <target state="translated">주석 및 CSS 클래스 지시문 비활성화</target>
        </trans-unit>
        <trans-unit id="17f67c438b25665408ced77a0f973ff152910ec2" translate="yes" xml:space="preserve">
          <source>Disabling Debug Data</source>
          <target state="translated">디버그 데이터 비활성화</target>
        </trans-unit>
        <trans-unit id="4c52842f01d8ff2a00e9728305157459d5a938ec" translate="yes" xml:space="preserve">
          <source>Disabling Specific Attributes</source>
          <target state="translated">특정 속성 비활성화</target>
        </trans-unit>
        <trans-unit id="de84716cee60c5cb4c6d2f6f25d3ac55ddcd7e00" translate="yes" xml:space="preserve">
          <source>Disabling attributes</source>
          <target state="translated">속성 비활성화</target>
        </trans-unit>
        <trans-unit id="20ef6ef888eb023c4461090d2f38a7acea56c9fa" translate="yes" xml:space="preserve">
          <source>Disabling auto-escaping is extremely dangerous, it usually creates a Cross Site Scripting (XSS) vulnerability in your application.</source>
          <target state="translated">자동 이스케이프를 비활성화하면 매우 위험하므로 일반적으로 응용 프로그램에 XSS (Cross Site Scripting) 취약점이 발생합니다.</target>
        </trans-unit>
        <trans-unit id="1f51a2a3fb5aa9f0b2bf05d11e6cc36721611e66" translate="yes" xml:space="preserve">
          <source>Disabling ngAria on Specific Elements</source>
          <target state="translated">특정 요소에서 ngAria 비활성화</target>
        </trans-unit>
        <trans-unit id="e408de586a7e2622fd333d5e79f8788540adc05a" translate="yes" xml:space="preserve">
          <source>Disallow argument name annotation inference.</source>
          <target state="translated">인수 이름 주석 유추를 허용하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="85016ac7fabd0f269f3323d663fd847b3d8b64a4" translate="yes" xml:space="preserve">
          <source>Discuss</source>
          <target state="translated">Discuss</target>
        </trans-unit>
        <trans-unit id="22d9c848e577ae1fec59456eee03bc9ea644ba34" translate="yes" xml:space="preserve">
          <source>Dispatches an event &lt;code&gt;name&lt;/code&gt; downwards to all child scopes (and their children) notifying the registered &lt;a href=&quot;%24rootscope.scope#%24on.html&quot;&gt;&lt;code&gt;$rootScope.Scope&lt;/code&gt;&lt;/a&gt; listeners.</source>
          <target state="translated">등록 된 &lt;a href=&quot;%24rootscope.scope#%24on.html&quot;&gt; &lt;code&gt;$rootScope.Scope&lt;/code&gt; &lt;/a&gt; 리스너 에게 알리는 모든 하위 범위 (및 해당 하위)에 이벤트 &lt;code&gt;name&lt;/code&gt; 아래쪽으로 전달합니다.</target>
        </trans-unit>
        <trans-unit id="522ab92da5006452539dc8ace74860c58110db39" translate="yes" xml:space="preserve">
          <source>Dispatches an event &lt;code&gt;name&lt;/code&gt; upwards through the scope hierarchy notifying the registered &lt;a href=&quot;%24rootscope.scope#%24on.html&quot;&gt;&lt;code&gt;$rootScope.Scope&lt;/code&gt;&lt;/a&gt; listeners.</source>
          <target state="translated">등록 된 &lt;a href=&quot;%24rootscope.scope#%24on.html&quot;&gt; &lt;code&gt;$rootScope.Scope&lt;/code&gt; &lt;/a&gt; 리스너 에게 알리는 범위 계층 구조를 통해 위쪽으로 이벤트 &lt;code&gt;name&lt;/code&gt; 전달합니다.</target>
        </trans-unit>
        <trans-unit id="d77fffba57484870bc54fe43094d3c654c48c5c8" translate="yes" xml:space="preserve">
          <source>Displaying a default message</source>
          <target state="translated">기본 메시지 표시</target>
        </trans-unit>
        <trans-unit id="6a1d6df1044462482aefb148d802e6a902833016" translate="yes" xml:space="preserve">
          <source>Displaying multiple messages at the same time</source>
          <target state="translated">여러 메시지를 동시에 표시</target>
        </trans-unit>
        <trans-unit id="8fcd11662cedbe647c35df6e222817acbf87bac8" translate="yes" xml:space="preserve">
          <source>Do not bootstrap your app on an element with a directive that uses &lt;a href=&quot;../api/ng/service/%24compile#transclusion.html&quot;&gt;transclusion&lt;/a&gt;, such as &lt;a href=&quot;../api/ng/directive/ngif&quot;&gt;&lt;code&gt;ngIf&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../api/ng/directive/nginclude&quot;&gt;&lt;code&gt;ngInclude&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../api/ngroute/directive/ngview&quot;&gt;&lt;code&gt;ngView&lt;/code&gt;&lt;/a&gt;. Doing this misplaces the app &lt;a href=&quot;../api/ng/service/%24rootelement&quot;&gt;&lt;code&gt;$rootElement&lt;/code&gt;&lt;/a&gt; and the app's &lt;a href=&quot;../api/auto/service/%24injector&quot;&gt;injector&lt;/a&gt;, causing animations to stop working and making the injector inaccessible from outside the app.</source>
          <target state="translated">사용하는 지시문 요소에서 응용 프로그램을 부트 스트랩하지 마십시오 &lt;a href=&quot;../api/ng/service/%24compile#transclusion.html&quot;&gt;트랜스 클루 전을&lt;/a&gt; 같은, &lt;a href=&quot;../api/ng/directive/ngif&quot;&gt; &lt;code&gt;ngIf&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../api/ng/directive/nginclude&quot;&gt; &lt;code&gt;ngInclude&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../api/ngroute/directive/ngview&quot;&gt; &lt;code&gt;ngView&lt;/code&gt; &lt;/a&gt; . 이렇게하면 앱 &lt;a href=&quot;../api/ng/service/%24rootelement&quot;&gt; &lt;code&gt;$rootElement&lt;/code&gt; &lt;/a&gt; 와 앱의 &lt;a href=&quot;../api/auto/service/%24injector&quot;&gt;인젝터가&lt;/a&gt; 잘못 배치되어 애니메이션이 작동을 멈추고 인젝터가 앱 외부에서 액세스 할 수 없게됩니다.</target>
        </trans-unit>
        <trans-unit id="734e169c6f35eeaf3a86656e7f1c0d72ba2de6cc" translate="yes" xml:space="preserve">
          <source>Do not mix client and server templates</source>
          <target state="translated">클라이언트 및 서버 템플릿을 혼합하지 마십시오</target>
        </trans-unit>
        <trans-unit id="19e892e136c9dc029952e0d0040cde8bbcc0893d" translate="yes" xml:space="preserve">
          <source>Do not run user input through &lt;code&gt;$scope.$eval&lt;/code&gt; (or any of the other expression parsing functions listed above)</source>
          <target state="translated">&lt;code&gt;$scope.$eval&lt;/code&gt; (또는 위에 나열된 다른 표현식 구문 분석 함수)을 통해 사용자 입력을 실행하지 마십시오 .</target>
        </trans-unit>
        <trans-unit id="a1222a753c501c7c58fabe9476767ef0ea0a4fda" translate="yes" xml:space="preserve">
          <source>Do not use a directive that uses &lt;a href=&quot;../service/%24compile#transclusion.html&quot;&gt;transclusion&lt;/a&gt; on the same element as &lt;code&gt;ngApp&lt;/code&gt;. This includes directives such as &lt;a href=&quot;ngif&quot;&gt;&lt;code&gt;ngIf&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;nginclude&quot;&gt;&lt;code&gt;ngInclude&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../ngroute/directive/ngview&quot;&gt;&lt;code&gt;ngView&lt;/code&gt;&lt;/a&gt;. Doing this misplaces the app &lt;a href=&quot;../service/%24rootelement&quot;&gt;&lt;code&gt;$rootElement&lt;/code&gt;&lt;/a&gt; and the app's &lt;a href=&quot;../../auto/service/%24injector&quot;&gt;injector&lt;/a&gt;, causing animations to stop working and making the injector inaccessible from outside the app.</source>
          <target state="translated">&lt;code&gt;ngApp&lt;/code&gt; 와 동일한 요소에서 &lt;a href=&quot;../service/%24compile#transclusion.html&quot;&gt;변환&lt;/a&gt; 을 사용하는 지시문을 사용하지 마십시오 . 여기에는 &lt;a href=&quot;ngif&quot;&gt; &lt;code&gt;ngIf&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;nginclude&quot;&gt; &lt;code&gt;ngInclude&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../../ngroute/directive/ngview&quot;&gt; &lt;code&gt;ngView&lt;/code&gt; &lt;/a&gt; 와 같은 지시문이 포함됩니다 . 이렇게하면 앱 &lt;a href=&quot;../service/%24rootelement&quot;&gt; &lt;code&gt;$rootElement&lt;/code&gt; &lt;/a&gt; 와 앱의 &lt;a href=&quot;../../auto/service/%24injector&quot;&gt;인젝터가&lt;/a&gt; 잘못 배치되어 애니메이션이 작동을 멈추고 인젝터가 앱 외부에서 액세스 할 수 없게됩니다.</target>
        </trans-unit>
        <trans-unit id="a6b92442e50d6cf9ef2638015c4dcbb08c6765ea" translate="yes" xml:space="preserve">
          <source>Do not use controllers to:</source>
          <target state="translated">컨트롤러를 사용하여 다음을 수행하지 마십시오.</target>
        </trans-unit>
        <trans-unit id="c4e0abe2eab7806b524f5f539063aa767372787f" translate="yes" xml:space="preserve">
          <source>Do not use user input to generate templates dynamically</source>
          <target state="translated">사용자 입력을 사용하여 템플릿을 동적으로 생성하지 마십시오</target>
        </trans-unit>
        <trans-unit id="cd9568f76d3ffc3f4943b3b399abc721db51ae70" translate="yes" xml:space="preserve">
          <source>Does this mean that CSS and JS animations cannot be used together? Do JS-based animations always have higher priority? We can make up for the lack of CSS animations by using the &lt;code&gt;$animateCss&lt;/code&gt; service to trigger our own tweaked-out, CSS-based animations directly from our own JS-based animation code:</source>
          <target state="translated">이것은 CSS와 JS 애니메이션을 함께 사용할 수 없다는 것을 의미합니까? JS 기반 애니메이션의 우선 순위가 항상 높은가요? &lt;code&gt;$animateCss&lt;/code&gt; 서비스를 사용하여 CSS 기반 애니메이션 코드에서 직접 조정 된 CSS 기반 애니메이션을 트리거 하여 CSS 애니메이션 부족을 보완 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="13dee9f67e174a94349cf987cddd8a72fc3af4b8" translate="yes" xml:space="preserve">
          <source>Double Compilation</source>
          <target state="translated">이중 컴파일</target>
        </trans-unit>
        <trans-unit id="46cf9c3355e52010c4d12ff1852420f2537d0b53" translate="yes" xml:space="preserve">
          <source>Double Compilation, and how to avoid it</source>
          <target state="translated">이중 컴파일 및이를 피하는 방법</target>
        </trans-unit>
        <trans-unit id="c28ddab1c668724f14783f5d982dad57dfddbb6f" translate="yes" xml:space="preserve">
          <source>Double compilation occurs when an already compiled part of the DOM gets compiled again. This is an undesired effect and can lead to misbehaving directives, performance issues, and memory leaks. A common scenario where this happens is a directive that calls &lt;code&gt;$compile&lt;/code&gt; in a directive link function on the directive element. In the following &lt;strong&gt;faulty example&lt;/strong&gt;, a directive adds a mouseover behavior to a button with &lt;code&gt;ngClick&lt;/code&gt; on it:</source>
          <target state="translated">DOM의 이미 컴파일 된 부분이 다시 컴파일 될 때 이중 컴파일이 발생합니다. 이것은 바람직하지 않은 효과이며 지시문, 성능 문제 및 메모리 누수의 오작동을 유발할 수 있습니다. 이러한 상황이 발생하는 일반적인 시나리오 는 지시문 요소의 지시문 링크 함수에서 &lt;code&gt;$compile&lt;/code&gt; 을 호출하는 지시문입니다 . 다음 &lt;strong&gt;잘못된 예제&lt;/strong&gt; 에서 지시문은 &lt;code&gt;ngClick&lt;/code&gt; 이있는 버튼에 마우스 오버 동작을 추가 합니다.</target>
        </trans-unit>
        <trans-unit id="2fe3ba6f7aec148d2830c036bfffa7e3396f913f" translate="yes" xml:space="preserve">
          <source>Double compilation occurs when an already compiled part of the DOM gets compiled again. This is an undesired effect and can lead to misbehaving directives, performance issues, and memory leaks. Refer to the Compiler Guide &lt;a href=&quot;../../../guide/compiler#double-compilation-and-how-to-avoid-it.html&quot;&gt;section on double compilation&lt;/a&gt; for an in-depth explanation and ways to avoid it.</source>
          <target state="translated">DOM의 이미 컴파일 된 부분이 다시 컴파일 될 때 이중 컴파일이 발생합니다. 이것은 바람직하지 않은 효과이며 지시문, 성능 문제 및 메모리 누수의 오작동을 유발할 수 있습니다. 자세한 설명과이를 피하는 방법 &lt;a href=&quot;../../../guide/compiler#double-compilation-and-how-to-avoid-it.html&quot;&gt;은 이중 컴파일에&lt;/a&gt; 대한 컴파일러 안내서 섹션을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="b56ef3a0351d8185f34ae1615da191674f9fba40" translate="yes" xml:space="preserve">
          <source>Double compilation should therefore be avoided. In the above example, only the new element should be compiled:</source>
          <target state="translated">따라서 이중 컴파일은 피해야합니다. 위의 예에서는 새 요소 만 컴파일해야합니다.</target>
        </trans-unit>
        <trans-unit id="a479c9c34e878d07b4d67a73a48f432ad7dc53c8" translate="yes" xml:space="preserve">
          <source>Download</source>
          <target state="translated">Download</target>
        </trans-unit>
        <trans-unit id="6591272ff03229f7f47a34cd608993dac9711a87" translate="yes" xml:space="preserve">
          <source>Due to the differences in change-detection, you may get many more calls to &lt;code&gt;$doCheck&lt;/code&gt; in AngularJS than you would to &lt;code&gt;ngDoCheck&lt;/code&gt; in Angular.</source>
          <target state="translated">변경 감지의 차이로 인해 Angular 에서 &lt;code&gt;ngDoCheck&lt;/code&gt; 하는 것보다 AngularJS에서 &lt;code&gt;$doCheck&lt;/code&gt; 에 대한 더 많은 호출을 얻을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="690ee2fd00601f8dae9435fe866cd934f63d5b6f" translate="yes" xml:space="preserve">
          <source>During a property comparison, properties of &lt;code&gt;function&lt;/code&gt; type and properties with names that begin with &lt;code&gt;$&lt;/code&gt; are ignored.</source>
          <target state="translated">속성 비교 중에 &lt;code&gt;function&lt;/code&gt; 유형의 속성과 이름이 &lt;code&gt;$&lt;/code&gt; 로 시작하는 속성 은 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="d17774f2703ffb3b3466892ed055619a54364b52" translate="yes" xml:space="preserve">
          <source>During application bootstrap, before AngularJS goes off creating all services, it configures and instantiates all providers. We call this the configuration phase of the application life-cycle. During this phase, services aren't accessible because they haven't been created yet.</source>
          <target state="translated">응용 프로그램 부트 스트랩 동안 AngularJS가 모든 서비스를 만들기 전에 모든 공급자를 구성하고 인스턴스화합니다. 이것을 응용 프로그램 수명주기의 구성 단계라고합니다. 이 단계에서는 아직 생성되지 않았기 때문에 서비스에 액세스 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="291ab189948f99ffa87d61aff0be223080b9841a" translate="yes" xml:space="preserve">
          <source>During template linking, directives register &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24watch.html&quot;&gt;watches&lt;/a&gt; on the scope. These watches will be used to propagate model values to the DOM.</source>
          <target state="translated">템플릿 연결 중에 지시어 는 범위에 &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24watch.html&quot;&gt;시계&lt;/a&gt; 를 등록 합니다. 이 시계는 모델 값을 DOM에 전파하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="45531da9cbed4e6e4ee65fe4cf35c23297ce9dea" translate="yes" xml:space="preserve">
          <source>During testing this implementation is swapped with &lt;a href=&quot;../../ngmock/service/%24httpbackend&quot;&gt;mock $httpBackend&lt;/a&gt; which can be trained with responses.</source>
          <target state="translated">테스트하는 동안이 구현은 응답으로 훈련 될 수있는 &lt;a href=&quot;../../ngmock/service/%24httpbackend&quot;&gt;모의 $ httpBackend로&lt;/a&gt; 교체됩니다 .</target>
        </trans-unit>
        <trans-unit id="84cba5a8d27805fd2532e7744606781e2d24ef87" translate="yes" xml:space="preserve">
          <source>During the compilation phase, the &lt;a href=&quot;compiler&quot;&gt;compiler&lt;/a&gt; matches &lt;a href=&quot;../api/ng/provider/%24compileprovider#directive.html&quot;&gt;directives&lt;/a&gt; against the DOM template. The directives usually fall into one of two categories:</source>
          <target state="translated">컴파일 단계에서 &lt;a href=&quot;compiler&quot;&gt;컴파일러&lt;/a&gt; 는 &lt;a href=&quot;../api/ng/provider/%24compileprovider#directive.html&quot;&gt;지시문&lt;/a&gt; 을 DOM 템플리트 와 일치 시킵니다. 지시문은 일반적으로 두 가지 범주 중 하나에 속합니다.</target>
        </trans-unit>
        <trans-unit id="552c6c3ebea05d341417ee364fae8ea2af019067" translate="yes" xml:space="preserve">
          <source>During the compilation phase:</source>
          <target state="translated">컴파일 단계에서 :</target>
        </trans-unit>
        <trans-unit id="a493125bd9c880c4ca97eb29a7017d3a9e3e64ce" translate="yes" xml:space="preserve">
          <source>During the compilation process the &lt;a href=&quot;../api/ng/service/%24compile&quot;&gt;compiler&lt;/a&gt; uses the &lt;a href=&quot;../api/ng/service/%24interpolate&quot;&gt;$interpolate&lt;/a&gt; service to see if text nodes and element attributes contain interpolation markup with embedded expressions.</source>
          <target state="translated">컴파일 과정에서 &lt;a href=&quot;../api/ng/service/%24compile&quot;&gt;컴파일러&lt;/a&gt; 는 &lt;a href=&quot;../api/ng/service/%24interpolate&quot;&gt;$ interpolate&lt;/a&gt; 서비스를 사용하여 텍스트 노드 및 요소 속성에 포함 된 표현식이 포함 된 보간 마크 업이 있는지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="6439c34c3206ba861da0f9bf5fc84e0b928b58c7" translate="yes" xml:space="preserve">
          <source>During the config: &lt;a href=&quot;../api/ng/provider/%24animateprovider#classNameFilter.html&quot;&gt;$animateProvider.classNameFilter()&lt;/a&gt;</source>
          <target state="translated">구성하는 동안 : &lt;a href=&quot;../api/ng/provider/%24animateprovider#classNameFilter.html&quot;&gt;$ animateProvider.classNameFilter ()&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="60166faf8b960cb144a5a5dfe16f5efce800297f" translate="yes" xml:space="preserve">
          <source>During the config: &lt;a href=&quot;../api/ng/provider/%24animateprovider#customFilter.html&quot;&gt;$animateProvider.customFilter()&lt;/a&gt;</source>
          <target state="translated">구성하는 동안 : &lt;a href=&quot;../api/ng/provider/%24animateprovider#customFilter.html&quot;&gt;$ animateProvider.customFilter ()&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="88d16957e61a3abc0b2789679717c815f5765897" translate="yes" xml:space="preserve">
          <source>During the runtime phase:</source>
          <target state="translated">런타임 단계에서 :</target>
        </trans-unit>
        <trans-unit id="ac637ea8f1b2151f1dfdc40a4954ea8a48a7d7d3" translate="yes" xml:space="preserve">
          <source>During unit testing, we want our unit tests to run quickly and have no external dependencies so we don&amp;rsquo;t want to send &lt;a href=&quot;https://developer.mozilla.org/en/xmlhttprequest&quot;&gt;XHR&lt;/a&gt; or &lt;a href=&quot;http://en.wikipedia.org/wiki/JSONP&quot;&gt;JSONP&lt;/a&gt; requests to a real server. All we really need is to verify whether a certain request has been sent or not, or alternatively just let the application make requests, respond with pre-trained responses and assert that the end result is what we expect it to be.</source>
          <target state="translated">단위 테스트 중에는 단위 테스트가 빠르게 실행되고 외부 종속성이 없으므로 &lt;a href=&quot;https://developer.mozilla.org/en/xmlhttprequest&quot;&gt;XHR&lt;/a&gt; 또는 &lt;a href=&quot;http://en.wikipedia.org/wiki/JSONP&quot;&gt;JSONP&lt;/a&gt; 요청을 실제 서버 로 보내지 않습니다 . 실제로 필요한 것은 특정 요청이 전송되었는지 여부를 확인하거나 응용 프로그램이 요청을하고 미리 훈련 된 응답으로 응답하고 최종 결과가 예상 한 것이라고 주장하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="871ea4da49e00d79d13d56d3eec2853372598b41" translate="yes" xml:space="preserve">
          <source>Dynamic Messaging</source>
          <target state="translated">동적 메시징</target>
        </trans-unit>
        <trans-unit id="bac036281464cca8457fab7f160594b9b956bffb" translate="yes" xml:space="preserve">
          <source>Dynamic responses</source>
          <target state="translated">동적 반응</target>
        </trans-unit>
        <trans-unit id="ddfdb597e007e1dc4eda14345e693ee956382336" translate="yes" xml:space="preserve">
          <source>Dynamically changing an interpolated value</source>
          <target state="translated">보간 된 값을 동적으로 변경</target>
        </trans-unit>
        <trans-unit id="7ffa068184121937557c12ca97fdaa8b198c8c8e" translate="yes" xml:space="preserve">
          <source>E.g. the markup &lt;code&gt;{{ 12 | currency }}&lt;/code&gt; formats the number 12 as a currency using the &lt;a href=&quot;../api/ng/filter/currency&quot;&gt;&lt;code&gt;currency&lt;/code&gt;&lt;/a&gt; filter. The resulting value is &lt;code&gt;$12.00&lt;/code&gt;.</source>
          <target state="translated">예 : 마크 업 &lt;code&gt;{{ 12 | currency }}&lt;/code&gt; 는 &lt;a href=&quot;../api/ng/filter/currency&quot;&gt; &lt;code&gt;currency&lt;/code&gt; &lt;/a&gt; 필터를 사용하여 숫자 12를 통화 형식으로 지정합니다 . 결과 값은 &lt;code&gt;$12.00&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="706f3f2c466550baf6f8cff74045985c0b276d2f" translate="yes" xml:space="preserve">
          <source>E.g. the markup &lt;code&gt;{{ 1234 | number:2 }}&lt;/code&gt; formats the number 1234 with 2 decimal points using the &lt;a href=&quot;../api/ng/filter/number&quot;&gt;&lt;code&gt;number&lt;/code&gt;&lt;/a&gt; filter. The resulting value is &lt;code&gt;1,234.00&lt;/code&gt;.</source>
          <target state="translated">예 : 마크 업 &lt;code&gt;{{ 1234 | number:2 }}&lt;/code&gt; 는 &lt;a href=&quot;../api/ng/filter/number&quot;&gt; &lt;code&gt;number&lt;/code&gt; &lt;/a&gt; 필터를 사용하여 숫자 1234를 소수점 2 개로 형식화합니다 . 결과 값은 &lt;code&gt;1,234.00&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="a2a94632ee79f879ff70c670fc140a79667aac46" translate="yes" xml:space="preserve">
          <source>E2E Testing</source>
          <target state="translated">E2E 테스트</target>
        </trans-unit>
        <trans-unit id="46cb077541331f9a16fef73d47f33279ef781780" translate="yes" xml:space="preserve">
          <source>ES6, Webpack, and JSPM Starter Project</source>
          <target state="translated">ES6, 웹팩 및 JSPM 스타터 프로젝트</target>
        </trans-unit>
        <trans-unit id="ba63fe9fd9974e102c02ef7d910d4b8dddc1fa17" translate="yes" xml:space="preserve">
          <source>ES6/Typescript Best Practices</source>
          <target state="translated">ES6 / Typescript 모범 사례</target>
        </trans-unit>
        <trans-unit id="648a21d0cd9f5c2567ffd87e39c8a17cf279fb77" translate="yes" xml:space="preserve">
          <source>Each &lt;a href=&quot;../directive/form&quot;&gt;form&lt;/a&gt; directive creates an instance of &lt;code&gt;FormController&lt;/code&gt;.</source>
          <target state="translated">각 &lt;a href=&quot;../directive/form&quot;&gt;양식&lt;/a&gt; 지시문은 &lt;code&gt;FormController&lt;/code&gt; 의 인스턴스를 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="d1c0d67675138588c0dc00ee3cda517b7f653e50" translate="yes" xml:space="preserve">
          <source>Each AngularJS application has exactly one &lt;a href=&quot;../api/ng/service/%24rootscope&quot;&gt;root scope&lt;/a&gt;, but may have any number of child scopes.</source>
          <target state="translated">각 AngularJS 애플리케이션에는 정확히 하나의 &lt;a href=&quot;../api/ng/service/%24rootscope&quot;&gt;루트 범위&lt;/a&gt; 가 있지만 여러 하위 범위가있을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="829715aa8f2829bcf5c7f7ab2b1d5e696bd672e1" translate="yes" xml:space="preserve">
          <source>Each directive's &lt;code&gt;compile&lt;/code&gt; functions are executed. Each &lt;code&gt;compile&lt;/code&gt; function has a chance to modify the DOM. Each &lt;code&gt;compile&lt;/code&gt; function returns a &lt;code&gt;link&lt;/code&gt; function. These functions are composed into a &quot;combined&quot; link function, which invokes each directive's returned &lt;code&gt;link&lt;/code&gt; function.</source>
          <target state="translated">각 지시문의 &lt;code&gt;compile&lt;/code&gt; 기능이 실행됩니다. 각 &lt;code&gt;compile&lt;/code&gt; 함수는 DOM을 수정할 수있는 기회가 있습니다. 각 &lt;code&gt;compile&lt;/code&gt; 함수는 &lt;code&gt;link&lt;/code&gt; 함수를 반환 합니다. 이러한 함수는 &quot;결합 된&quot;링크 함수로 구성되어 각 지시문의 반환 된 &lt;code&gt;link&lt;/code&gt; 함수 를 호출 합니다.</target>
        </trans-unit>
        <trans-unit id="03ce87fe012858dd28022ce0344110a91c5c56e7" translate="yes" xml:space="preserve">
          <source>Each element in these arrays must be one of the following:</source>
          <target state="translated">이 배열의 각 요소는 다음 중 하나 여야합니다.</target>
        </trans-unit>
        <trans-unit id="0788a57602c88bc63b92f1ea44577c3c1372677f" translate="yes" xml:space="preserve">
          <source>Each function in the &lt;code&gt;$validators&lt;/code&gt; object receives the &lt;code&gt;modelValue&lt;/code&gt; and the &lt;code&gt;viewValue&lt;/code&gt; as parameters. AngularJS will then call &lt;code&gt;$setValidity&lt;/code&gt; internally with the function's return value (&lt;code&gt;true&lt;/code&gt;: valid, &lt;code&gt;false&lt;/code&gt;: invalid). The validation functions are executed every time an input is changed (&lt;code&gt;$setViewValue&lt;/code&gt; is called) or whenever the bound &lt;code&gt;model&lt;/code&gt; changes. Validation happens after successfully running &lt;code&gt;$parsers&lt;/code&gt; and &lt;code&gt;$formatters&lt;/code&gt;, respectively. Failed validators are stored by key in &lt;a href=&quot;../api/ng/type/ngmodel.ngmodelcontroller#%24error&quot;&gt;&lt;code&gt;ngModelController.$error&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;$validators&lt;/code&gt; 객체 의 각 함수 는 &lt;code&gt;modelValue&lt;/code&gt; 및 &lt;code&gt;viewValue&lt;/code&gt; 를 매개 변수로받습니다. 그런 다음 AngularJS는 함수의 반환 값으로 내부적으로 &lt;code&gt;$setValidity&lt;/code&gt; 를 호출 합니다 ( &lt;code&gt;true&lt;/code&gt; : valid, &lt;code&gt;false&lt;/code&gt; : invalid). 유효성 검사 함수는 입력이 변경 될 때마다 ( &lt;code&gt;$setViewValue&lt;/code&gt; 가 호출 될 때마다) 또는 바인딩 된 &lt;code&gt;model&lt;/code&gt; 변경 될 때마다 실행 됩니다. 유효성 검사 는 각각 &lt;code&gt;$parsers&lt;/code&gt; 및 &lt;code&gt;$formatters&lt;/code&gt; 성공적으로 실행 한 후에 발생합니다 . 실패한 유효성 검사기는 &lt;a href=&quot;../api/ng/type/ngmodel.ngmodelcontroller#%24error&quot;&gt; &lt;code&gt;ngModelController.$error&lt;/code&gt; &lt;/a&gt; 키로 저장됩니다 .</target>
        </trans-unit>
        <trans-unit id="1a059e84dcbee7d4310b371af5bf3f354749be0d" translate="yes" xml:space="preserve">
          <source>Each item in the &lt;strong&gt;RouteConfig&lt;/strong&gt; for a &lt;strong&gt;Routing Component&lt;/strong&gt; is an instance of this type. It can have the following properties:</source>
          <target state="translated">의 각 항목 &lt;strong&gt;RouteConfig&lt;/strong&gt; A의 &lt;strong&gt;라우팅 구성 요소는&lt;/strong&gt; 이러한 유형의 인스턴스입니다. 다음과 같은 속성을 가질 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="72b188f1d17688bd4f986f5bc1d938df3660b4a5" translate="yes" xml:space="preserve">
          <source>Each key value in the parameter object is first bound to url template if present and then any excess keys are appended to the url search query after the &lt;code&gt;?&lt;/code&gt;.</source>
          <target state="translated">매개 변수 객체의 각 키 값은 존재하는 경우 먼저 URL 템플리트에 바인딩 된 다음 &lt;code&gt;?&lt;/code&gt; 키 다음에 초과 키가 URL 검색 쿼리에 추가됩니다 . .</target>
        </trans-unit>
        <trans-unit id="c4db4dc45436f4f1a0c0c82c0e2621975a9bac1c" translate="yes" xml:space="preserve">
          <source>Each module can only be loaded once per injector. Usually an AngularJS app has only one injector and modules are only loaded once. Each test has its own injector and modules are loaded multiple times.</source>
          <target state="translated">각 모듈은 인젝터 당 한 번만로드 할 수 있습니다. 일반적으로 AngularJS 앱에는 인젝터가 하나만 있으며 모듈은 한 번만로드됩니다. 각 테스트에는 자체 인젝터가 있으며 모듈은 여러 번로드됩니다.</target>
        </trans-unit>
        <trans-unit id="b8c6e4ddcbc08750f981caaf013164d265bbf24d" translate="yes" xml:space="preserve">
          <source>Each provide access to a &lt;code&gt;$delegate&lt;/code&gt;, which is the instantiated service/directive/filter, prior to being passed to the service that required it.</source>
          <target state="translated">각각은 필요한 서비스로 전달되기 전에 인스턴스화 된 서비스 / 지시 / 필터 인 &lt;code&gt;$delegate&lt;/code&gt; 대한 액세스를 제공 합니다.</target>
        </trans-unit>
        <trans-unit id="dda93b9c00ecb491f2d026174b8fa5dbb60e68ea" translate="yes" xml:space="preserve">
          <source>Each recipe belongs to an &lt;a href=&quot;../api/ng/type/angular.module&quot;&gt;AngularJS module&lt;/a&gt;. An AngularJS module is a bag that holds one or more recipes. And since manually keeping track of module dependencies is no fun, a module can contain information about dependencies on other modules as well.</source>
          <target state="translated">각 레시피는 &lt;a href=&quot;../api/ng/type/angular.module&quot;&gt;AngularJS 모듈에&lt;/a&gt; 속합니다 . AngularJS 모듈은 하나 이상의 레시피를 보유하는 백입니다. 또한 모듈 종속성을 수동으로 추적하는 것은 재미 있지 않으므로 모듈에는 다른 모듈에 대한 종속성에 대한 정보도 포함될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9f3ae98a5b0c131a547a93b487b4c98012168788" translate="yes" xml:space="preserve">
          <source>Each version of AngularJS 1 up to, but not including 1.6, contained an expression sandbox, which reduced the surface area of the vulnerability but never removed it. &lt;strong&gt;In AngularJS 1.6 we removed this sandbox as developers kept relying upon it as a security feature even though it was always possible to access arbitrary JavaScript code if one could control the AngularJS templates or expressions of applications.&lt;/strong&gt;</source>
          <target state="translated">1.6 이하의 AngularJS 1의 각 버전에는 표현 샌드 박스가 포함되어 취약점의 표면적을 줄 였지만 결코 제거하지는 않았습니다. &lt;strong&gt;AngularJS 1.6에서는 개발자가 AngularJS 템플릿 또는 응용 프로그램 표현을 제어 할 수있는 경우 임의의 JavaScript 코드에 항상 액세스 할 수 있었음에도 불구하고 개발자가 보안 기능으로 계속 의존하면서이 샌드 박스를 제거했습니다.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b51b7017f03b60f98505f01afc9017f64fb597b6" translate="yes" xml:space="preserve">
          <source>Each web application you build is composed of objects that collaborate to get stuff done. These objects need to be instantiated and wired together for the app to work. In AngularJS apps most of these objects are instantiated and wired together automatically by the &lt;a href=&quot;../api/auto/service/%24injector&quot;&gt;injector service&lt;/a&gt;.</source>
          <target state="translated">빌드하는 각 웹 응용 프로그램은 작업을 수행하기 위해 협업하는 객체로 구성됩니다. 앱이 작동하려면 이러한 객체를 인스턴스화하고 연결해야합니다. AngularJS 앱에서 이러한 객체의 대부분은 &lt;a href=&quot;../api/auto/service/%24injector&quot;&gt;인젝터 서비스에&lt;/a&gt; 의해 자동으로 인스턴스화되고 연결됩니다 .</target>
        </trans-unit>
        <trans-unit id="e08245380fe45ed1dc1a39461e8430df197a0e09" translate="yes" xml:space="preserve">
          <source>Earlier we mentioned that we also have special purpose objects that are different from services. These objects extend the framework as plugins and therefore must implement interfaces specified by AngularJS. These interfaces are Controller, Directive, Filter and Animation.</source>
          <target state="translated">앞에서 우리는 또한 서비스와 다른 특별한 목적의 객체를 가지고 있다고 언급했습니다. 이러한 객체는 프레임 워크를 플러그인으로 확장하므로 AngularJS에서 지정한 인터페이스를 구현해야합니다. 이러한 인터페이스는 컨트롤러, 지시문, 필터 및 애니메이션입니다.</target>
        </trans-unit>
        <trans-unit id="dca48544769c52bf3b58c672f5cd3b5c747bc2f2" translate="yes" xml:space="preserve">
          <source>Effects of DOM Element re-use</source>
          <target state="translated">DOM 요소 재사용의 효과</target>
        </trans-unit>
        <trans-unit id="c199d835c658f8ab6c23a79e307ea446a630dc73" translate="yes" xml:space="preserve">
          <source>Either a wrapped jQuery/jqLite node or a DOMElement</source>
          <target state="translated">랩핑 된 jQuery / jqLite 노드 또는 DOMElement</target>
        </trans-unit>
        <trans-unit id="c5dbec72523ae614966440682a91c6aefb466e1e" translate="yes" xml:space="preserve">
          <source>Element or HTML string to compile into a template function.</source>
          <target state="translated">템플릿 함수로 컴파일 할 요소 또는 HTML 문자열</target>
        </trans-unit>
        <trans-unit id="9cbfd00aa5e38787a6022e42110687cd2450a209" translate="yes" xml:space="preserve">
          <source>Else compare the types themselves alphabetically.</source>
          <target state="translated">그렇지 않으면 유형 자체를 알파벳순으로 비교하십시오.</target>
        </trans-unit>
        <trans-unit id="92f004dc1ae3f95af43091d25f176aad7eb1a397" translate="yes" xml:space="preserve">
          <source>Else if one of the values is null, consider it &quot;greater than&quot; the other.</source>
          <target state="translated">그렇지 않으면 값 중 하나가 널인 경우 다른 값보다 &quot;큰&quot;것으로 간주하십시오.</target>
        </trans-unit>
        <trans-unit id="55716b221770b19d94c322e504ec2f031d1a376c" translate="yes" xml:space="preserve">
          <source>Email us at &lt;a href=&quot;mailto:security@angularjs.org&quot;&gt;security@angularjs.org&lt;/a&gt; to report any potential security issues in AngularJS.</source>
          <target state="translated">AngularJS의 잠재적 보안 문제를보고하려면 &lt;a href=&quot;mailto:security@angularjs.org&quot;&gt;security@angularjs.org&lt;/a&gt; 로 이메일을 보내주십시오 .</target>
        </trans-unit>
        <trans-unit id="099bc2374fc25e458767acd089b2e0b4bbe06521" translate="yes" xml:space="preserve">
          <source>Embedding interpolation markup inside expressions</source>
          <target state="translated">표현식 내에 보간 마크 업 삽입</target>
        </trans-unit>
        <trans-unit id="b2d9626fab94fe46dbc23e11d5145543e8c891df" translate="yes" xml:space="preserve">
          <source>Emitted every time the ngInclude content is reloaded.</source>
          <target state="translated">ngInclude 컨텐츠를 다시로드 할 때마다 발생합니다.</target>
        </trans-unit>
        <trans-unit id="d69747c18e6a7823e2827479f46edbc548e716c8" translate="yes" xml:space="preserve">
          <source>Emitted every time the ngInclude content is requested.</source>
          <target state="translated">ngInclude 컨텐츠가 요청 될 때마다 발생합니다.</target>
        </trans-unit>
        <trans-unit id="ccb5524240b958659fec098886cb27f13b421044" translate="yes" xml:space="preserve">
          <source>Emitted every time the ngView content is reloaded.</source>
          <target state="translated">ngView 컨텐츠를 다시로드 할 때마다 발생합니다.</target>
        </trans-unit>
        <trans-unit id="5352199744d0f4dd2b1904c169630303a8240bd4" translate="yes" xml:space="preserve">
          <source>Emitted when a template HTTP request yields an erroneous response (status &amp;lt; 200 || status &amp;gt; 299)</source>
          <target state="translated">템플리트 HTTP 요청이 잘못된 응답을 생성 할 때 발생합니다 (상태 &amp;lt;200 || status&amp;gt; 299).</target>
        </trans-unit>
        <trans-unit id="faf2ad99147d30fa634f5fda5836e1dedfa19477" translate="yes" xml:space="preserve">
          <source>Enable animations outside of the application DOM tree: &lt;a href=&quot;../api/ng/service/%24animate#pin.html&quot;&gt;$animate.pin()&lt;/a&gt;</source>
          <target state="translated">응용 프로그램 DOM 트리 외부에서 애니메이션을 활성화합니다 : &lt;a href=&quot;../api/ng/service/%24animate#pin.html&quot;&gt;$ animate.pin ()&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a2ab88d7ccb6db7d12a00ccd002d5025b4173f0a" translate="yes" xml:space="preserve">
          <source>Enable or disable SVG support in the sanitizer.</source>
          <target state="translated">살균기에서 SVG 지원을 활성화 또는 비활성화합니다.</target>
        </trans-unit>
        <trans-unit id="f1d9379845b51d7e57e166ae34919d84964f1127" translate="yes" xml:space="preserve">
          <source>Enables a subset of svg to be supported by the sanitizer.</source>
          <target state="translated">소독제에서 svg의 하위 집합을 지원할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="143c725b84ea6f36aaaba38361a8a7f2268adbf9" translate="yes" xml:space="preserve">
          <source>Enables binding AngularJS expressions to onsubmit events.</source>
          <target state="translated">이벤트를 제출할 때 AngularJS 표현식을 바인딩 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c80853334b84e1e011526ce6f6d2efcbb632d3b2" translate="yes" xml:space="preserve">
          <source>Enables/disables SCE and returns the current value.</source>
          <target state="translated">SCE를 활성화 / 비활성화하고 현재 값을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="1bfefb111e5dac345b0aa3b3c4a4f406e1870b9d" translate="yes" xml:space="preserve">
          <source>Enables/disables various ARIA attributes</source>
          <target state="translated">다양한 ARIA 속성을 활성화 / 비활성화합니다</target>
        </trans-unit>
        <trans-unit id="7abd6ccf643ae77e58fc651912d7d14afe3ed6be" translate="yes" xml:space="preserve">
          <source>End-to-end tests can use modules to override configuration.</source>
          <target state="translated">엔드 투 엔드 테스트는 모듈을 사용하여 구성을 대체 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fe10676ae39073acdfb80a439f4190fce12dba21" translate="yes" xml:space="preserve">
          <source>Enter a name in the Live Preview text box; the greeting below the text box changes instantly.</source>
          <target state="translated">라이브 미리보기 텍스트 상자에 이름을 입력하십시오. 텍스트 상자 아래의 인사말이 즉시 변경됩니다.</target>
        </trans-unit>
        <trans-unit id="205fcd69afe3a8ebda34fa883e6cd9e9b086948b" translate="yes" xml:space="preserve">
          <source>Enter the AngularJS execution context by calling &lt;a href=&quot;scope&quot;&gt;scope&lt;/a&gt;&lt;code&gt;.&lt;/code&gt;&lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24apply.html&quot;&gt;$apply&lt;/a&gt;&lt;code&gt;(stimulusFn)&lt;/code&gt;, where &lt;code&gt;stimulusFn&lt;/code&gt; is the work you wish to do in the AngularJS execution context.</source>
          <target state="translated">&lt;a href=&quot;scope&quot;&gt;scope&lt;/a&gt; 를 호출하여 AngularJS 실행 컨텍스트를 입력하십시오 &lt;code&gt;.&lt;/code&gt; &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24apply.html&quot;&gt;$ apply &lt;/a&gt; &lt;code&gt;(stimulusFn)&lt;/code&gt; , 여기서 &lt;code&gt;stimulusFn&lt;/code&gt; 은 AngularJS 실행 컨텍스트에서 수행하려는 작업입니다.</target>
        </trans-unit>
        <trans-unit id="a5a37a82bd01c55087378b21c459ede66319d8f7" translate="yes" xml:space="preserve">
          <source>Error Reference</source>
          <target state="translated">오류 참조</target>
        </trans-unit>
        <trans-unit id="a25c35bd8f4f9cad8579a43221ea776b2a563e82" translate="yes" xml:space="preserve">
          <source>Escaped Interpolation</source>
          <target state="translated">탈출 보간</target>
        </trans-unit>
        <trans-unit id="218d2e528de2ed5dec55ef5059999f6d6c7e1a86" translate="yes" xml:space="preserve">
          <source>Escaped interpolation markers are only replaced with the actual interpolation markers in rendered output when the $interpolate service processes the text. So, for HTML elements interpolated by &lt;a href=&quot;%24compile&quot;&gt;$compile&lt;/a&gt;, or otherwise interpolated with the &lt;code&gt;mustHaveExpression&lt;/code&gt; parameter set to &lt;code&gt;true&lt;/code&gt;, the interpolated text must contain an unescaped interpolation expression. As such, this is typically useful only when user-data is used in rendering a template from the server, or when otherwise untrusted data is used by a directive.</source>
          <target state="translated">이스케이프 된 보간 마커는 $ interpolate 서비스가 텍스트를 처리 할 때 렌더링 된 출력에서 ​​실제 보간 마커로만 대체됩니다. 따라서 &lt;a href=&quot;%24compile&quot;&gt;$ compile로&lt;/a&gt; 보간되거나 &lt;code&gt;mustHaveExpression&lt;/code&gt; 매개 변수를 &lt;code&gt;true&lt;/code&gt; 로 설정하여 보간 된 HTML 요소의 경우 보간 된 텍스트에는 이스케이프되지 않은 보간 표현식이 포함되어야합니다. 따라서 이는 일반적으로 서버에서 템플릿을 렌더링 할 때 사용자 데이터를 사용하거나 지시문에서 신뢰할 수없는 데이터를 사용하는 경우에만 유용합니다.</target>
        </trans-unit>
        <trans-unit id="4d57d4ba2f3a7f358a90f37c48fff5bd229f3431" translate="yes" xml:space="preserve">
          <source>Escaping / Quoting</source>
          <target state="translated">탈출 / 인용</target>
        </trans-unit>
        <trans-unit id="fea6dd1103565fa6cc8bae9d51b299f77b6e645c" translate="yes" xml:space="preserve">
          <source>Evaluate the &lt;code&gt;greeting&lt;/code&gt;&lt;a href=&quot;expression&quot;&gt;expression&lt;/a&gt; against the scope retrieved above, and assign the result to the text of the enclosing DOM element.</source>
          <target state="translated">위에서 검색된 범위에 대해 &lt;code&gt;greeting&lt;/code&gt; &lt;a href=&quot;expression&quot;&gt;표현식&lt;/a&gt; 을 평가하고 결과를 둘러싸는 DOM 요소의 텍스트에 지정하십시오.</target>
        </trans-unit>
        <trans-unit id="cda22f8a7b7689be1d88d76ef009399f12f6bf88" translate="yes" xml:space="preserve">
          <source>Evaluate the given expression when the user changes the input. The expression is evaluated immediately, unlike the JavaScript onchange event which only triggers at the end of a change (usually, when the user leaves the form element or presses the return key).</source>
          <target state="translated">사용자가 입력을 변경할 때 주어진 표현식을 평가하십시오. 변경이 끝날 때만 트리거되는 JavaScript onchange 이벤트와 달리 표현식은 즉시 평가됩니다 (일반적으로 사용자가 양식 요소를 떠나거나 리턴 키를 누를 때).</target>
        </trans-unit>
        <trans-unit id="f056dd1c6d8bd104d6ba75bafcd760d12a08ca72" translate="yes" xml:space="preserve">
          <source>Evaluated as &lt;a href=&quot;../../../guide/expression&quot;&gt;expression&lt;/a&gt;. The expression value should evaluate to an object or an array which is observed on each &lt;a href=&quot;%24rootscope.scope#%24digest.html&quot;&gt;$digest&lt;/a&gt; cycle. Any shallow change within the collection will trigger a call to the &lt;code&gt;listener&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../../guide/expression&quot;&gt;expression으로&lt;/a&gt; 평가되었습니다 . 표현식 값은 각 &lt;a href=&quot;%24rootscope.scope#%24digest.html&quot;&gt;$ 다이제스트&lt;/a&gt; 주기 에서 관찰되는 객체 또는 배열로 평가되어야 합니다. 컬렉션 내의 얕은 변경은 &lt;code&gt;listener&lt;/code&gt; 대한 호출을 트리거합니다 .</target>
        </trans-unit>
        <trans-unit id="a86c33fdabaa7b7c9f6110edee9f0ffd2acc28e1" translate="yes" xml:space="preserve">
          <source>Evaluates the expression and inserts the resulting HTML into the element in a secure way. By default, the resulting HTML content will be sanitized using the &lt;a href=&quot;../../ngsanitize/service/%24sanitize&quot;&gt;$sanitize&lt;/a&gt; service. To utilize this functionality, ensure that &lt;code&gt;$sanitize&lt;/code&gt; is available, for example, by including &lt;a href=&quot;../../ngsanitize&quot;&gt;&lt;code&gt;ngSanitize&lt;/code&gt;&lt;/a&gt; in your module's dependencies (not in core AngularJS). In order to use &lt;a href=&quot;../../ngsanitize&quot;&gt;&lt;code&gt;ngSanitize&lt;/code&gt;&lt;/a&gt; in your module's dependencies, you need to include &quot;angular-sanitize.js&quot; in your application.</source>
          <target state="translated">표현식을 평가하고 결과 HTML을 요소에 안전하게 삽입합니다. 기본적으로 결과 HTML 콘텐츠는 &lt;a href=&quot;../../ngsanitize/service/%24sanitize&quot;&gt;$ sanitize&lt;/a&gt; 서비스를 사용하여 삭제 됩니다. 이 기능을 활용하려면 예를 들어 모듈의 종속성 (핵심 AngularJS가 아님)에 &lt;a href=&quot;../../ngsanitize&quot;&gt; &lt;code&gt;ngSanitize&lt;/code&gt; &lt;/a&gt; 를 포함 시켜 &lt;code&gt;$sanitize&lt;/code&gt; 를 사용할 수 있는지 확인 하십시오. 모듈의 종속성에서 &lt;a href=&quot;../../ngsanitize&quot;&gt; &lt;code&gt;ngSanitize&lt;/code&gt; &lt;/a&gt; 를 사용하려면 애플리케이션 에 &quot;angular-sanitize.js&quot;를 포함해야합니다.</target>
        </trans-unit>
        <trans-unit id="9076a3c6b5f726943b0322ab3cf79864f11e9902" translate="yes" xml:space="preserve">
          <source>Evaluates the expression and inserts the resulting HTML into the element in a secure way. By default, the resulting HTML content will be sanitized using the &lt;a href=&quot;../ngsanitize/service/%24sanitize&quot;&gt;$sanitize&lt;/a&gt; service. To utilize this functionality, ensure that &lt;code&gt;$sanitize&lt;/code&gt; is available, for example, by including &lt;a href=&quot;../ngsanitize&quot;&gt;&lt;code&gt;ngSanitize&lt;/code&gt;&lt;/a&gt; in your module's dependencies (not in core AngularJS). In order to use &lt;a href=&quot;../ngsanitize&quot;&gt;&lt;code&gt;ngSanitize&lt;/code&gt;&lt;/a&gt; in your module's dependencies, you need to include &quot;angular-sanitize.js&quot; in your application.</source>
          <target state="translated">표현식을 평가하고 결과 HTML을 요소에 안전하게 삽입합니다. 기본적으로 결과 HTML 콘텐츠는 &lt;a href=&quot;../ngsanitize/service/%24sanitize&quot;&gt;$ sanitize&lt;/a&gt; 서비스를 사용하여 삭제 됩니다. 이 기능을 활용하려면 예를 들어 모듈의 종속성 (핵심 AngularJS가 아님)에 &lt;a href=&quot;../ngsanitize&quot;&gt; &lt;code&gt;ngSanitize&lt;/code&gt; &lt;/a&gt; 를 포함 시켜 &lt;code&gt;$sanitize&lt;/code&gt; 를 사용할 수 있는지 확인 하십시오. 모듈의 종속성에서 &lt;a href=&quot;../ngsanitize&quot;&gt; &lt;code&gt;ngSanitize&lt;/code&gt; &lt;/a&gt; 를 사용하려면 애플리케이션 에 &quot;angular-sanitize.js&quot;를 포함해야합니다.</target>
        </trans-unit>
        <trans-unit id="4fae0324b81717cfd0179935deb08738f4958c28" translate="yes" xml:space="preserve">
          <source>Event name to broadcast.</source>
          <target state="translated">브로드 캐스트 할 이벤트 이름입니다.</target>
        </trans-unit>
        <trans-unit id="9ae944309054d536d760fa0eef00f071c6363b43" translate="yes" xml:space="preserve">
          <source>Event name to emit.</source>
          <target state="translated">내보낼 이벤트 이름.</target>
        </trans-unit>
        <trans-unit id="9a3b19e98675ab2f955bd6ef73c0dffd2dc79c70" translate="yes" xml:space="preserve">
          <source>Event name to listen on.</source>
          <target state="translated">청취 할 이벤트 이름.</target>
        </trans-unit>
        <trans-unit id="efd8912106134f28159a082b13ebc510cdb36ce0" translate="yes" xml:space="preserve">
          <source>Event object (see &lt;a href=&quot;%24rootscope.scope#%24on.html&quot;&gt;&lt;code&gt;$rootScope.Scope&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">이벤트 객체 ( &lt;a href=&quot;%24rootscope.scope#%24on.html&quot;&gt; &lt;code&gt;$rootScope.Scope&lt;/code&gt; &lt;/a&gt; 참조 )</target>
        </trans-unit>
        <trans-unit id="5256cf2d05f2a2afff96813dfafbe9056fe17f54" translate="yes" xml:space="preserve">
          <source>Event object, see &lt;a href=&quot;%24rootscope.scope#%24on.html&quot;&gt;&lt;code&gt;$rootScope.Scope&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">이벤트 객체, &lt;a href=&quot;%24rootscope.scope#%24on.html&quot;&gt; &lt;code&gt;$rootScope.Scope&lt;/code&gt; &lt;/a&gt; 참조</target>
        </trans-unit>
        <trans-unit id="89991e609ea2e58df8701321c81f1c2b67ca16f0" translate="yes" xml:space="preserve">
          <source>Event that triggered the update.</source>
          <target state="translated">업데이트를 트리거 한 이벤트입니다.</target>
        </trans-unit>
        <trans-unit id="c5497bca58468ae64aed6c0fd921109217988db3" translate="yes" xml:space="preserve">
          <source>Events</source>
          <target state="translated">Events</target>
        </trans-unit>
        <trans-unit id="dc6ee5b710b84a06b1994d13c09750db60be49d9" translate="yes" xml:space="preserve">
          <source>Every application has a single root &lt;a href=&quot;../type/%24rootscope.scope&quot;&gt;scope&lt;/a&gt;. All other scopes are descendant scopes of the root scope. Scopes provide separation between the model and the view, via a mechanism for watching the model for changes. They also provide event emission/broadcast and subscription facility. See the &lt;a href=&quot;../../../guide/scope&quot;&gt;developer guide on scopes&lt;/a&gt;.</source>
          <target state="translated">모든 응용 프로그램에는 단일 루트 &lt;a href=&quot;../type/%24rootscope.scope&quot;&gt;범위가&lt;/a&gt; 있습니다. 다른 모든 범위는 루트 범위의 하위 범위입니다. 범위는 모델의 변경 사항을 관찰하는 메커니즘을 통해 모델과 뷰를 분리합니다. 또한 이벤트 배출 / 방송 및 가입 시설을 제공합니다. &lt;a href=&quot;../../../guide/scope&quot;&gt;범위에&lt;/a&gt; 대한 개발자 안내서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="c6fed10186b9a7e4a176e17c80c83b6d2a93e97a" translate="yes" xml:space="preserve">
          <source>Every application has a single root &lt;a href=&quot;type/%24rootscope.scope&quot;&gt;scope&lt;/a&gt;. All other scopes are descendant scopes of the root scope. Scopes provide separation between the model and the view, via a mechanism for watching the model for changes. They also provide event emission/broadcast and subscription facility. See the &lt;a href=&quot;../../guide/scope&quot;&gt;developer guide on scopes&lt;/a&gt;.</source>
          <target state="translated">모든 응용 프로그램에는 단일 루트 &lt;a href=&quot;type/%24rootscope.scope&quot;&gt;범위가&lt;/a&gt; 있습니다. 다른 모든 범위는 루트 범위의 하위 범위입니다. 범위는 모델의 변경 사항을 관찰하는 메커니즘을 통해 모델과 뷰를 분리합니다. 또한 이벤트 배출 / 방송 및 가입 시설을 제공합니다. &lt;a href=&quot;../../guide/scope&quot;&gt;범위에&lt;/a&gt; 대한 개발자 안내서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="8932161648474502d4579225b7a5010ba4feeb3a" translate="yes" xml:space="preserve">
          <source>Everything you need to build a CRUD app in a cohesive set: Data-binding, basic templating directives, form validation, routing, deep-linking, reusable components and dependency injection.</source>
          <target state="translated">데이터 바인딩, 기본 템플릿 지시문, 양식 유효성 검사, 라우팅, 딥 링크, 재사용 가능한 구성 요소 및 종속성 주입과 같은 응집력있는 세트로 CRUD 앱을 빌드하는 데 필요한 모든 것.</target>
        </trans-unit>
        <trans-unit id="9eed938865a4ca53d208e8ce6cf848543e153677" translate="yes" xml:space="preserve">
          <source>Exact matches always win over keyword matches. Therefore, if you define both &lt;code&gt;=0&lt;/code&gt; and &lt;code&gt;zero&lt;/code&gt;, when the value of the expression is zero, the &lt;code&gt;=0&lt;/code&gt; message is the one that will be selected. (The duplicate keyword categories are helpful when used with the optional &lt;code&gt;offset&lt;/code&gt; syntax described later.)</source>
          <target state="translated">완전 검색은 항상 키워드 검색보다 우선합니다. 따라서 &lt;code&gt;=0&lt;/code&gt; 과 &lt;code&gt;zero&lt;/code&gt; 모두 정의 하면 표현식 값이 0 일 때 &lt;code&gt;=0&lt;/code&gt; 메시지가 선택됩니다. 중복 키워드 카테고리는 나중에 설명 할 선택적 &lt;code&gt;offset&lt;/code&gt; 구문 과 함께 사용할 때 유용 합니다.</target>
        </trans-unit>
        <trans-unit id="1b2e441413acb202181b009a7cb2e30e8082e0bf" translate="yes" xml:space="preserve">
          <source>Exact matches are written as the equal sign followed by the exact value. &lt;code&gt;=0&lt;/code&gt;, &lt;code&gt;=1&lt;/code&gt;, &lt;code&gt;=2&lt;/code&gt; and &lt;code&gt;=123&lt;/code&gt; are all examples of exact matches. Note that there should be no space between the equal sign and the numeric value.</source>
          <target state="translated">정확한 일치는 등호로 표시되고 정확한 값이 뒤에옵니다. &lt;code&gt;=0&lt;/code&gt; , &lt;code&gt;=1&lt;/code&gt; , &lt;code&gt;=2&lt;/code&gt; 및 &lt;code&gt;=123&lt;/code&gt; 은 모두 정확히 일치하는 예입니다. 등호와 숫자 값 사이에는 공백이 없어야합니다.</target>
        </trans-unit>
        <trans-unit id="0f01ed56a1e32a05e5ef96e4d779f34784af9a96" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Example</target>
        </trans-unit>
        <trans-unit id="17aeb04f751fae1ae3f4ad0b2a7c8e59cbb96c5e" translate="yes" xml:space="preserve">
          <source>Example Applications</source>
          <target state="translated">응용 프로그램 예</target>
        </trans-unit>
        <trans-unit id="7c784376e50e16848980dbe227261dcf8fd3cd3c" translate="yes" xml:space="preserve">
          <source>Example configuration</source>
          <target state="translated">구성 예</target>
        </trans-unit>
        <trans-unit id="916ba94adedad329829de9e3198135460b08ea09" translate="yes" xml:space="preserve">
          <source>Example of a component tree</source>
          <target state="translated">컴포넌트 트리의 예</target>
        </trans-unit>
        <trans-unit id="1ee0a88badf0098cd9392d2a3a772e37baa2fda5" translate="yes" xml:space="preserve">
          <source>Example of what a typical jasmine tests looks like with the inject method.</source>
          <target state="translated">일반적인 재스민 테스트의 예는 주입 방법입니다.</target>
        </trans-unit>
        <trans-unit id="07f064f0c6b85d5dffb3101177b89f9992c1c9c7" translate="yes" xml:space="preserve">
          <source>Example test:</source>
          <target state="translated">테스트 예 :</target>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">Example:</target>
        </trans-unit>
        <trans-unit id="62dfa7f10882e77a87092f507d379f2402d87987" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;&amp;lt;a href=&quot;/ext/link?a=b&quot; target=&quot;_self&quot;&amp;gt;link&amp;lt;/a&amp;gt;&lt;/code&gt;</source>
          <target state="translated">예 : &lt;code&gt;&amp;lt;a href=&quot;/ext/link?a=b&quot; target=&quot;_self&quot;&amp;gt;link&amp;lt;/a&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c32374b44f69dd61e35af260b06e3345095cb0e9" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;&amp;lt;a href=&quot;/not-my-base/link&quot;&amp;gt;link&amp;lt;/a&amp;gt;&lt;/code&gt;</source>
          <target state="translated">예 : &lt;code&gt;&amp;lt;a href=&quot;/not-my-base/link&quot;&amp;gt;link&amp;lt;/a&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5706b247d2f0a121689f2b656388525706d03e11" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;&amp;lt;a href=&quot;http://angularjs.org/&quot;&amp;gt;link&amp;lt;/a&amp;gt;&lt;/code&gt;</source>
          <target state="translated">예 : &lt;code&gt;&amp;lt;a href=&quot;http://angularjs.org/&quot;&amp;gt;link&amp;lt;/a&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="eb01bf04c9a0e8a71c45816513df424f1c7ffedb" translate="yes" xml:space="preserve">
          <source>Examples</source>
          <target state="translated">Examples</target>
        </trans-unit>
        <trans-unit id="7bb6af775c57b33034454a0b76f9d211912e7f56" translate="yes" xml:space="preserve">
          <source>Exception associated with the error.</source>
          <target state="translated">오류와 관련된 예외입니다.</target>
        </trans-unit>
        <trans-unit id="3c931b480d9d9bfc8842e1d02f1f24126be988bc" translate="yes" xml:space="preserve">
          <source>Execute this function after injector creation. Useful for application initialization.</source>
          <target state="translated">인젝터 생성 후이 기능을 실행하십시오. 응용 프로그램 초기화에 유용합니다.</target>
        </trans-unit>
        <trans-unit id="086045d75cb70d0de25ecacb2e252ee609998080" translate="yes" xml:space="preserve">
          <source>Execute this function on module load. Useful for service configuration.</source>
          <target state="translated">모듈로드시이 기능을 실행하십시오. 서비스 구성에 유용합니다.</target>
        </trans-unit>
        <trans-unit id="60db8af3d71e63425912639e5639bd857a345c69" translate="yes" xml:space="preserve">
          <source>Executed after the child elements are linked.</source>
          <target state="translated">자식 요소가 연결된 후에 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="2f8e9afcb55d879e3172b4ff3edb0f541f0a203d" translate="yes" xml:space="preserve">
          <source>Executed before the child elements are linked. Not safe to do DOM transformation since the compiler linking function will fail to locate the correct elements for linking.</source>
          <target state="translated">자식 요소가 연결되기 전에 실행됩니다. 컴파일러 링크 함수가 링크를위한 올바른 요소를 찾지 못하므로 DOM 변환을 수행하는 것이 안전하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="a474756a35892f6f1337f53303e90f0d73ff2f19" translate="yes" xml:space="preserve">
          <source>Executes the &lt;code&gt;expression&lt;/code&gt; on the current scope and returns the result. Any exceptions in the expression are propagated (uncaught). This is useful when evaluating AngularJS expressions.</source>
          <target state="translated">현재 범위 에서 &lt;code&gt;expression&lt;/code&gt; 을 실행하고 결과를 반환합니다. 식의 모든 예외가 전파됩니다 (포착되지 않음). AngularJS 표현식을 평가할 때 유용합니다.</target>
        </trans-unit>
        <trans-unit id="4d7dabbbb9314a685e95e955e06bc8dd0125cef5" translate="yes" xml:space="preserve">
          <source>Executes the expression on the current scope at a later point in time.</source>
          <target state="translated">나중에 현재 범위에서 식을 실행합니다.</target>
        </trans-unit>
        <trans-unit id="9df4399b6f3ff9926ed5500724ef427c968e367d" translate="yes" xml:space="preserve">
          <source>Exposes the current URL in the browser address bar, so you can</source>
          <target state="translated">브라우저 주소 표시 줄에 현재 URL을 노출하므로</target>
        </trans-unit>
        <trans-unit id="628cde53fd14624d568dab4d3637fdef86c20b64" translate="yes" xml:space="preserve">
          <source>Expression evaluation is forgiving to undefined and null. In JavaScript, evaluating &lt;code&gt;a.b.c&lt;/code&gt; throws an exception if &lt;code&gt;a&lt;/code&gt; is not an object. While this makes sense for a general purpose language, the expression evaluations are primarily used for data binding, which often look like this:</source>
          <target state="translated">식 평가는 정의되지 않은 null을 허용합니다. JavaScript에서 &lt;code&gt;a&lt;/code&gt; 가 객체가 아닌 경우 &lt;code&gt;a.b.c&lt;/code&gt; 평가 하면 예외가 발생 합니다. 이는 범용 언어에는 적합하지만 식 평가는 주로 다음과 같은 데이터 바인딩에 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="0accf77dcec253c18fdfdc78fc6ec09ea004edfb" translate="yes" xml:space="preserve">
          <source>Expression that is evaluated on each &lt;a href=&quot;%24rootscope.scope#%24digest.html&quot;&gt;$digest&lt;/a&gt; cycle. A change in the return value triggers a call to the &lt;code&gt;listener&lt;/code&gt;.</source>
          <target state="translated">각 &lt;a href=&quot;%24rootscope.scope#%24digest.html&quot;&gt;$ 다이제스트&lt;/a&gt; 주기 에서 평가되는 식입니다 . 반환 값이 변경되면 &lt;code&gt;listener&lt;/code&gt; 대한 호출이 트리거됩니다 .</target>
        </trans-unit>
        <trans-unit id="85ae6863e6e6040f384b4b6dc569f9eb4a64e58c" translate="yes" xml:space="preserve">
          <source>Expression to evaluate when a new partial is loaded.</source>
          <target state="translated">새 부분이로드 될 때 평가할 표현식입니다.</target>
        </trans-unit>
        <trans-unit id="77456688d291ad4f5b4e8d91f041eeb7a5e2de52" translate="yes" xml:space="preserve">
          <source>Expression to evaluate whenever the view updates.</source>
          <target state="translated">뷰가 업데이트 될 때마다 평가할 표현식입니다.</target>
        </trans-unit>
        <trans-unit id="ae5fccd8dcd8fc317f8edfc8259af86cd2967a29" translate="yes" xml:space="preserve">
          <source>Expressions</source>
          <target state="translated">Expressions</target>
        </trans-unit>
        <trans-unit id="cf78f62fb7990fb89d458935ffb1846f90b586a1" translate="yes" xml:space="preserve">
          <source>Expressions, like the one defined for the &lt;code&gt;ngClick&lt;/code&gt; directive in the example below, are evaluated with respect to the current scope. Therefore, there is no risk of inadvertently coding in a dependency on a global value in such an expression.</source>
          <target state="translated">아래 예에서 &lt;code&gt;ngClick&lt;/code&gt; 지시문에 대해 정의 된 것과 같은 표현식 은 현재 범위와 관련하여 평가됩니다. 따라서 이러한 식에서 전역 값에 대한 종속성으로 실수로 코딩 할 위험이 없습니다.</target>
        </trans-unit>
        <trans-unit id="7baf9e4023c205c51428907b8b5f7094a18f4b9f" translate="yes" xml:space="preserve">
          <source>Extends the built-in list of valid attributes, i.e. attributes that are considered safe and are not stripped off during sanitization.</source>
          <target state="translated">내장 된 유효한 속성 목록 (예 : 안전하다고 간주되고 위생 처리 중에 제거되지 않은 속성)을 확장합니다.</target>
        </trans-unit>
        <trans-unit id="c966928e5c88a4a9f1ab15febec0c95a059f8e2a" translate="yes" xml:space="preserve">
          <source>Extends the built-in lists of valid HTML/SVG elements, i.e. elements that are considered safe and are not stripped off during sanitization. You can extend the following lists of elements:</source>
          <target state="translated">유효한 HTML / SVG 요소 (예 : 안전하다고 간주되고 위생 처리 중에 제거되지 않은 요소)의 기본 제공 목록을 확장합니다. 다음과 같은 요소 목록을 확장 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2b14b339ebedbd999c77e9b9f5c7d22127b40d2f" translate="yes" xml:space="preserve">
          <source>Extends the destination object &lt;code&gt;dst&lt;/code&gt; by copying own enumerable properties from the &lt;code&gt;src&lt;/code&gt; object(s) to &lt;code&gt;dst&lt;/code&gt;. You can specify multiple &lt;code&gt;src&lt;/code&gt; objects. If you want to preserve original objects, you can do so by passing an empty object as the target: &lt;code&gt;var object = angular.extend({}, object1, object2)&lt;/code&gt;.</source>
          <target state="translated">대상 객체의 확장 &lt;code&gt;dst&lt;/code&gt; 로부터 자신의 열거 속성을 복사하여 &lt;code&gt;src&lt;/code&gt; 에 객체 (들) &lt;code&gt;dst&lt;/code&gt; . 여러 &lt;code&gt;src&lt;/code&gt; 객체를 지정할 수 있습니다 . 원본 객체를 유지하려면 빈 객체를 대상으로 전달하면됩니다. &lt;code&gt;var object = angular.extend({}, object1, object2)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ed06ca00010de70fa6e3ffdb999c3f9e5c99bcb6" translate="yes" xml:space="preserve">
          <source>External AngularJS resources</source>
          <target state="translated">외부 AngularJS 리소스</target>
        </trans-unit>
        <trans-unit id="be313f8149a2d30f8327ee70864cf3d4946285a6" translate="yes" xml:space="preserve">
          <source>External Resources</source>
          <target state="translated">외부 자료</target>
        </trans-unit>
        <trans-unit id="39ad1c4756a089e469b5ec792fe50629bec8336f" translate="yes" xml:space="preserve">
          <source>Extract the contents of the element where the directive appears and make it available to the directive. The contents are compiled and provided to the directive as a &lt;strong&gt;transclusion function&lt;/strong&gt;. See the &lt;a href=&quot;%24compile#transclusion.html&quot;&gt;Transclusion&lt;/a&gt; section below.</source>
          <target state="translated">지시문이 나타나는 요소의 내용을 추출하여 지시문에 사용할 수있게하십시오. 내용은 컴파일하고 지시문에 &lt;strong&gt;transclusion 함수&lt;/strong&gt; 로 제공됩니다 . 아래의 &lt;a href=&quot;%24compile#transclusion.html&quot;&gt;Transclusion&lt;/a&gt; 섹션을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="03688ba6aa340b87549088aa5739944cb6b1dc73" translate="yes" xml:space="preserve">
          <source>FAQ</source>
          <target state="translated">FAQ</target>
        </trans-unit>
        <trans-unit id="e47b9b1021034a56b7d5f70d92d0481524e78f69" translate="yes" xml:space="preserve">
          <source>Factory</source>
          <target state="translated">Factory</target>
        </trans-unit>
        <trans-unit id="3156b346a064c1db3b4dfdc8e539af534a00f477" translate="yes" xml:space="preserve">
          <source>Factory Methods</source>
          <target state="translated">공장 방법</target>
        </trans-unit>
        <trans-unit id="ef4319d2d02cf8972a8e4e597c5b497d7352cc3d" translate="yes" xml:space="preserve">
          <source>Factory Recipe</source>
          <target state="translated">공장 레시피</target>
        </trans-unit>
        <trans-unit id="c8e6696140d2e75575a027e3db926b81e7fa86b8" translate="yes" xml:space="preserve">
          <source>Factory and Service are the most commonly used recipes. The only difference between them is that the Service recipe works better for objects of a custom type, while the Factory can produce JavaScript primitives and functions.</source>
          <target state="translated">공장과 서비스는 가장 일반적으로 사용되는 레시피입니다. 이들 간의 유일한 차이점은 서비스 레시피가 사용자 정의 유형의 객체에 더 효과적이며 팩토리는 JavaScript 기본 요소 및 함수를 생성 할 수 있다는 것입니다.</target>
        </trans-unit>
        <trans-unit id="028dd1450ba58561838de3f298fd05498d14e273" translate="yes" xml:space="preserve">
          <source>Factory function for creating new instance of an animation.</source>
          <target state="translated">애니메이션의 새 인스턴스를 만들기위한 팩토리 함수입니다.</target>
        </trans-unit>
        <trans-unit id="3ee6fd00a202d032c40a78907b76870f53db49dc" translate="yes" xml:space="preserve">
          <source>Factory function for creating new instance of directives.</source>
          <target state="translated">지시문의 새 인스턴스를 작성하기위한 팩토리 기능.</target>
        </trans-unit>
        <trans-unit id="00b5e72ae89de1590849f21e6c25c0567db4d3f8" translate="yes" xml:space="preserve">
          <source>Factory function for creating new instance of filter.</source>
          <target state="translated">필터의 새 인스턴스를 작성하기위한 팩토리 기능.</target>
        </trans-unit>
        <trans-unit id="cc3812a493330e545d9923589baae8e606e23d7f" translate="yes" xml:space="preserve">
          <source>Factory function used to create XMLHttpRequest objects.</source>
          <target state="translated">XMLHttpRequest 객체를 만드는 데 사용되는 팩토리 함수입니다.</target>
        </trans-unit>
        <trans-unit id="66507c8df90678391bccbb22d7912a1e54a7b768" translate="yes" xml:space="preserve">
          <source>Factory that constructs &lt;a href=&quot;../type/%24cachefactory.cache&quot;&gt;Cache&lt;/a&gt; objects and gives access to them.</source>
          <target state="translated">&lt;a href=&quot;../type/%24cachefactory.cache&quot;&gt;Cache&lt;/a&gt; 객체 를 생성 하고 액세스 할 수있는 팩토리 .</target>
        </trans-unit>
        <trans-unit id="6a2e0291c6da34749a8ac6df7b544977c583fc48" translate="yes" xml:space="preserve">
          <source>Factory that constructs &lt;a href=&quot;type/%24cachefactory.cache&quot;&gt;Cache&lt;/a&gt; objects and gives access to them.</source>
          <target state="translated">&lt;a href=&quot;type/%24cachefactory.cache&quot;&gt;Cache&lt;/a&gt; 객체 를 생성 하고 액세스 할 수있는 팩토리 .</target>
        </trans-unit>
        <trans-unit id="33ad5a927dac4ab275ae4ea2e1b605163a18a5a6" translate="yes" xml:space="preserve">
          <source>Failed interpolated expressions in &lt;code&gt;ng-href&lt;/code&gt; attributes can easily go unnoticed. We can decorate &lt;code&gt;ngHref&lt;/code&gt; to warn us of those conditions.</source>
          <target state="translated">&lt;code&gt;ng-href&lt;/code&gt; 속성 에서 실패한 보간 된 표현식 은 쉽게 눈에 띄지 않을 수 있습니다. 우리는 이러한 조건을 경고하기 위해 &lt;code&gt;ngHref&lt;/code&gt; 를 꾸밀 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="022a478813680131790030507e1c1390d5280b3b" translate="yes" xml:space="preserve">
          <source>Fake HTTP backend implementation suitable for end-to-end testing or backend-less development of applications that use the &lt;a href=&quot;../../ng/service/%24http&quot;&gt;$http service&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../ng/service/%24http&quot;&gt;$ http 서비스&lt;/a&gt; 를 사용하는 엔드 투 엔드 테스트 또는 백엔드리스 애플리케이션 개발에 적합한 가짜 HTTP 백엔드 구현 .</target>
        </trans-unit>
        <trans-unit id="576115681ace0f2ae10133aafeaa28843f3bceae" translate="yes" xml:space="preserve">
          <source>Fake HTTP backend implementation suitable for end-to-end testing or backend-less development of applications that use the &lt;a href=&quot;../ng/service/%24http&quot;&gt;$http service&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../ng/service/%24http&quot;&gt;$ http 서비스&lt;/a&gt; 를 사용하는 엔드 투 엔드 테스트 또는 백엔드리스 애플리케이션 개발에 적합한 가짜 HTTP 백엔드 구현 .</target>
        </trans-unit>
        <trans-unit id="b961aa07954a84612068135eb6d91115ca7b9b12" translate="yes" xml:space="preserve">
          <source>Fake HTTP backend implementation suitable for end-to-end testing or backend-less development of applications that use the &lt;a href=&quot;ng/service/%24http&quot;&gt;$http service&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;ng/service/%24http&quot;&gt;$ http 서비스&lt;/a&gt; 를 사용하는 엔드 투 엔드 테스트 또는 백엔드리스 애플리케이션 개발에 적합한 가짜 HTTP 백엔드 구현 .</target>
        </trans-unit>
        <trans-unit id="2bea11d5d7c3b57fb31b4af107d8e23ff5f192ac" translate="yes" xml:space="preserve">
          <source>Fake HTTP backend implementation suitable for unit testing applications that use the &lt;a href=&quot;../../ng/service/%24http&quot;&gt;$http service&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../ng/service/%24http&quot;&gt;$ http 서비스&lt;/a&gt; 를 사용하는 단위 테스트 애플리케이션에 적합한 가짜 HTTP 백엔드 구현 .</target>
        </trans-unit>
        <trans-unit id="dc58c413dd761b834fc17ee464cbf2c2b1de608e" translate="yes" xml:space="preserve">
          <source>Fake HTTP backend implementation suitable for unit testing applications that use the &lt;a href=&quot;../ng/service/%24http&quot;&gt;$http service&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../ng/service/%24http&quot;&gt;$ http 서비스&lt;/a&gt; 를 사용하는 단위 테스트 애플리케이션에 적합한 가짜 HTTP 백엔드 구현 .</target>
        </trans-unit>
        <trans-unit id="0f28b305a959cfe601c149a9dfacea0ea1a23943" translate="yes" xml:space="preserve">
          <source>Fake HTTP backend implementation suitable for unit testing applications that use the &lt;a href=&quot;ng/service/%24http&quot;&gt;$http service&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;ng/service/%24http&quot;&gt;$ http 서비스&lt;/a&gt; 를 사용하는 단위 테스트 애플리케이션에 적합한 가짜 HTTP 백엔드 구현 .</target>
        </trans-unit>
        <trans-unit id="2b6546af28f173c1cc2dec94a741c3e78cbdbce9" translate="yes" xml:space="preserve">
          <source>Fallback for legacy browsers</source>
          <target state="translated">레거시 브라우저의 대체</target>
        </trans-unit>
        <trans-unit id="28db5b5a50621fb409af99bca4f8b752427e4a5c" translate="yes" xml:space="preserve">
          <source>Feature &amp;amp; Bug Tracker</source>
          <target state="translated">기능 및 버그 추적기</target>
        </trans-unit>
        <trans-unit id="37565aacce4ed29b047384a80a69fe751d32457a" translate="yes" xml:space="preserve">
          <source>Features / Recipe type</source>
          <target state="translated">특징 / 레시피 유형</target>
        </trans-unit>
        <trans-unit id="04e7c6a718bae0ab2d3f26efc985083798ff0736" translate="yes" xml:space="preserve">
          <source>Feel free also mix transitions and keyframes together as well as any other CSS classes on the same element.</source>
          <target state="translated">또한 같은 요소에 다른 CSS 클래스뿐만 아니라 전환과 키 프레임을 자유롭게 혼합하십시오.</target>
        </trans-unit>
        <trans-unit id="5c17b605508aeec026cd4b0eba633087d6e85345" translate="yes" xml:space="preserve">
          <source>Feel free to use other structural directives such as ng-if and ng-switch to further control what messages are active and when. Be careful, if you place ng-message on the same element as these structural directives, AngularJS may not be able to determine if a message is active or not. Therefore it is best to place the ng-message on a child element of the structural directive.</source>
          <target state="translated">ng-if 및 ng-switch와 같은 다른 구조적 지시문을 사용하여 활성 메시지와시기를 추가로 제어하십시오. ng-message를 이러한 구조적 지시문과 동일한 요소에 배치하면 AngularJS가 메시지의 활성 여부를 판별하지 못할 수 있습니다. 따라서 구조 지시문의 하위 요소에 ng-message를 배치하는 것이 가장 좋습니다.</target>
        </trans-unit>
        <trans-unit id="b5c660cb22aa8077dd6a3d7e39e98d1eba6cd24e" translate="yes" xml:space="preserve">
          <source>Fetches, compiles and includes an external HTML fragment.</source>
          <target state="translated">외부 HTML 조각을 가져오고 컴파일하며 포함합니다.</target>
        </trans-unit>
        <trans-unit id="d7decf1aa22b02ae8abf9a96849ee423eee838e4" translate="yes" xml:space="preserve">
          <source>Filter</source>
          <target state="translated">Filter</target>
        </trans-unit>
        <trans-unit id="958cb2148933330b690b4c6657039b40197736c4" translate="yes" xml:space="preserve">
          <source>Filter components in ng</source>
          <target state="translated">ng의 필터 구성 요소</target>
        </trans-unit>
        <trans-unit id="313a96c8d6aa3fcf071911deb5c09c4a10f87451" translate="yes" xml:space="preserve">
          <source>Filter components in ngSanitize</source>
          <target state="translated">ngSanitize에서 필터 구성 요소</target>
        </trans-unit>
        <trans-unit id="0fa8c3951ddd4bf377d1a463b75966dd0eab1fcd" translate="yes" xml:space="preserve">
          <source>Filter name - this must be a valid AngularJS expression identifier</source>
          <target state="translated">필터 이름-유효한 AngularJS 표현식 식별자 여야합니다.</target>
        </trans-unit>
        <trans-unit id="590dca26d3697ff206c7510b4a1ea098ac9d1127" translate="yes" xml:space="preserve">
          <source>Filter output &amp;mdash; Use &lt;a href=&quot;filter&quot;&gt;AngularJS filters&lt;/a&gt; instead.</source>
          <target state="translated">필터 출력 &amp;mdash; 대신 &lt;a href=&quot;filter&quot;&gt;AngularJS 필터&lt;/a&gt; 를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="96e578211aa295317cf257310712fa28ccd8f6c6" translate="yes" xml:space="preserve">
          <source>Filters</source>
          <target state="translated">Filters</target>
        </trans-unit>
        <trans-unit id="699dd39da1d524706c0ac40e80676a65a7ee3d75" translate="yes" xml:space="preserve">
          <source>Filters are just functions which transform input to an output. However filters need to be Dependency Injected. To achieve this a filter definition consists of a factory function which is annotated with dependencies and is responsible for creating a filter function.</source>
          <target state="translated">필터는 입력을 출력으로 변환하는 기능 일뿐입니다. 그러나 필터는 종속성 주입이어야합니다. 이를 달성하기 위해 필터 정의는 종속성으로 주석이 달린 필터 기능을 구성하는 팩토리 기능으로 구성됩니다.</target>
        </trans-unit>
        <trans-unit id="4f123f5fc885990f073d8e875ec587859f544592" translate="yes" xml:space="preserve">
          <source>Filters are used for formatting data displayed to the user.</source>
          <target state="translated">필터는 사용자에게 표시되는 데이터를 형식화하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="529dad0d0ff38bfbf459af3aac0d7bf3af26d043" translate="yes" xml:space="preserve">
          <source>Filters can be applied to expressions in view templates using the following syntax:</source>
          <target state="translated">다음 구문을 사용하여 뷰 템플릿의 표현식에 필터를 적용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b0c6a437ea6f5579b59312d1da2316b3e28c48c6" translate="yes" xml:space="preserve">
          <source>Filters can be applied to the result of another filter. This is called &quot;chaining&quot; and uses the following syntax:</source>
          <target state="translated">다른 필터의 결과에 필터를 적용 할 수 있습니다. 이것을 &quot;체인&quot;이라고하며 다음 구문을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="55335aa85bcb3866e73d19fd2d724a8e66a43b7f" translate="yes" xml:space="preserve">
          <source>Filters format the value of an expression for display to the user. They can be used in view templates, controllers or services. AngularJS comes with a collection of &lt;a href=&quot;../api/ng/filter&quot;&gt;built-in filters&lt;/a&gt;, but it is easy to define your own as well.</source>
          <target state="translated">필터는 사용자에게 표시 할 표현식 값의 형식을 지정합니다. 뷰 템플릿, 컨트롤러 또는 서비스에서 사용할 수 있습니다. AngularJS에는 &lt;a href=&quot;../api/ng/filter&quot;&gt;내장 필터&lt;/a&gt; 모음이 포함되어 있지만 자신 만의 필터를 쉽게 정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="682562f1b49ae6b0a648c1ac925de5d406869964" translate="yes" xml:space="preserve">
          <source>Filters may have arguments. The syntax for this is</source>
          <target state="translated">필터에는 인수가있을 수 있습니다. 이것에 대한 문법은</target>
        </trans-unit>
        <trans-unit id="30c736d62b49c588e1fe0f61717e96ddba143772" translate="yes" xml:space="preserve">
          <source>Filters that are marked as &lt;code&gt;$stateful&lt;/code&gt; are also executed on each $digest. See &lt;a href=&quot;filter#stateful-filters.html&quot;&gt;Stateful filters&lt;/a&gt; for more information. Note that no AngularJS core filters are $stateful.</source>
          <target state="translated">&lt;code&gt;$stateful&lt;/code&gt; 로 표시된 필터 도 각 $ digest에서 실행됩니다. 자세한 내용은 &lt;a href=&quot;filter#stateful-filters.html&quot;&gt;상태 저장 필터&lt;/a&gt; 를 참조하십시오. AngularJS 코어 필터는 $ stateful이 아닙니다.</target>
        </trans-unit>
        <trans-unit id="66c30abd8d699d84caba4d7a205c80691b2213c7" translate="yes" xml:space="preserve">
          <source>Finally, &lt;strong&gt;the blacklist overrides the whitelist&lt;/strong&gt; and has the final say.</source>
          <target state="translated">마지막으로, &lt;strong&gt;블랙리스트는 화이트리스트를 무시&lt;/strong&gt; 하고 마지막으로 말합니다.</target>
        </trans-unit>
        <trans-unit id="3b6d818fbadda9b37e12f8c2201c1880d5bffeaf" translate="yes" xml:space="preserve">
          <source>Finally, Jasmine provides matchers which let you make assertions:</source>
          <target state="translated">마지막으로 Jasmine은 어설 션을 만들 수있는 매처를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="b20b914a19775c7d6d718aa11a19eb2c2aea25c1" translate="yes" xml:space="preserve">
          <source>Finally, in an attempt to simplify things, if a predicate returns an object as the extracted value for an item, &lt;code&gt;orderBy&lt;/code&gt; will try to convert that object to a primitive value, before passing it to the comparator. The following rules govern the conversion:</source>
          <target state="translated">마지막으로, 항목을 단순화하기 위해 술어가 오브젝트를 항목의 추출 된 값으로 리턴하는 경우 &lt;code&gt;orderBy&lt;/code&gt; 는 해당 오브젝트를 비교기에 전달하기 전에 해당 오브젝트를 기본 값으로 변환하려고 시도합니다. 다음 규칙이 변환에 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="07f4fb01f5ca9fb0f54a74c5ff4ac147e27960d5" translate="yes" xml:space="preserve">
          <source>Finally, load the module in your application by adding it as a dependent module:</source>
          <target state="translated">마지막으로, 모듈을 종속 모듈로 추가하여 애플리케이션에 모듈을로드하십시오.</target>
        </trans-unit>
        <trans-unit id="fdccbab2920c960c12560765b2c4dd6408e9e441" translate="yes" xml:space="preserve">
          <source>Find out more information about each directive by reading the &lt;a href=&quot;../guide/accessibility&quot;&gt;ngAria Developer Guide&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../guide/accessibility&quot;&gt;ngAria 개발자 안내서를&lt;/a&gt; 읽고 각 지시문에 대한 자세한 정보를 찾으십시오 .</target>
        </trans-unit>
        <trans-unit id="ffa9aa79cbd2923d9b3db7b608c702e52b23423e" translate="yes" xml:space="preserve">
          <source>Finds links in text input and turns them into html links. Supports &lt;code&gt;http/https/ftp/sftp/mailto&lt;/code&gt; and plain email address links.</source>
          <target state="translated">텍스트 입력에서 링크를 찾아 HTML 링크로 바꿉니다. 지원 &lt;code&gt;http/https/ftp/sftp/mailto&lt;/code&gt; 및 일반 전자 메일 주소 링크.</target>
        </trans-unit>
        <trans-unit id="b477acda5b9a9fa11e6ec90588718df5fca3ceb9" translate="yes" xml:space="preserve">
          <source>Fire up a screen reader such as VoiceOver or NVDA to check for ARIA support. &lt;a href=&quot;http://webaim.org/articles/screenreader_testing/&quot;&gt;Helpful screen reader tips.&lt;/a&gt;</source>
          <target state="translated">ARIA 지원을 확인하려면 VoiceOver 또는 NVDA와 같은 스크린 리더를 실행하십시오. &lt;a href=&quot;http://webaim.org/articles/screenreader_testing/&quot;&gt;유용한 스크린 리더 팁.&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="255e96fff7006defdcfa0768091004d2cadf02d1" translate="yes" xml:space="preserve">
          <source>First create an AngularJS module that will hold the service definition. (The empty array passed as the second parameter means that this module does not depend on any other modules.)</source>
          <target state="translated">먼저 서비스 정의를 보유 할 AngularJS 모듈을 작성하십시오. (두 번째 매개 변수로 전달 된 빈 배열은이 모듈이 다른 모듈에 의존하지 않음을 의미합니다.)</target>
        </trans-unit>
        <trans-unit id="d323989dc2db49f0060887626146a6c49dae68b2" translate="yes" xml:space="preserve">
          <source>First let's talk about the &lt;a href=&quot;../api/ng/provider/%24compileprovider#directive.html&quot;&gt;API for registering directives&lt;/a&gt;. Much like controllers, directives are registered on modules. To register a directive, you use the &lt;code&gt;module.directive&lt;/code&gt; API. &lt;code&gt;module.directive&lt;/code&gt; takes the &lt;a href=&quot;directive#matching-directives.html&quot;&gt;normalized&lt;/a&gt; directive name followed by a &lt;strong&gt;factory function.&lt;/strong&gt; This factory function should return an object with the different options to tell &lt;code&gt;$compile&lt;/code&gt; how the directive should behave when matched.</source>
          <target state="translated">먼저 &lt;a href=&quot;../api/ng/provider/%24compileprovider#directive.html&quot;&gt;지시문을 등록하기위한 API에&lt;/a&gt; 대해 이야기 해 보자 . 컨트롤러와 마찬가지로 지시문은 모듈에 등록됩니다. 지시문을 등록하려면 &lt;code&gt;module.directive&lt;/code&gt; API 를 사용하십시오 . &lt;code&gt;module.directive&lt;/code&gt; 는 &lt;a href=&quot;directive#matching-directives.html&quot;&gt;표준화 된&lt;/a&gt; 지시문 이름과 &lt;strong&gt;팩토리 함수를 사용합니다. &lt;/strong&gt;이 팩토리 함수는 다른 옵션을 가진 객체를 반환하여 &lt;code&gt;$compile&lt;/code&gt; 에게 지시어가 일치 할 때 어떻게 동작해야하는지 알려줍니다 .</target>
        </trans-unit>
        <trans-unit id="ae0317278d634cdf9897fb0dfd8c37d7e85a15db" translate="yes" xml:space="preserve">
          <source>First, download the file:</source>
          <target state="translated">먼저 파일을 다운로드하십시오.</target>
        </trans-unit>
        <trans-unit id="4eed0a516dc6dad6334d232395f61bdc71c7a4f5" translate="yes" xml:space="preserve">
          <source>First, get the file:</source>
          <target state="translated">먼저 파일을 얻으십시오.</target>
        </trans-unit>
        <trans-unit id="9c40c3b47461dae52bbb2ce1715c3e7c4122872e" translate="yes" xml:space="preserve">
          <source>First, there is a new JavaScript file that contains a &lt;a href=&quot;controller&quot;&gt;controller&lt;/a&gt;. More accurately, the file specifies a constructor function that will be used to create the actual controller instance. The purpose of controllers is to expose variables and functionality to expressions and directives.</source>
          <target state="translated">먼저, &lt;a href=&quot;controller&quot;&gt;controller&lt;/a&gt; 를 포함하는 새로운 JavaScript 파일이 있습니다 . 보다 정확하게는 파일이 실제 컨트롤러 인스턴스를 생성하는 데 사용될 생성자 함수를 지정합니다. 컨트롤러의 목적은 변수와 기능을 표현식과 지시문에 노출시키는 것입니다.</target>
        </trans-unit>
        <trans-unit id="77d9204eade0f099f5e0ab2bbd55d4646d3a83bf" translate="yes" xml:space="preserve">
          <source>Flickering when using ngHide to toggle between elements</source>
          <target state="translated">ngHide를 사용하여 요소 간 전환시 깜박임</target>
        </trans-unit>
        <trans-unit id="b5ab32c1bf51cc481c9ab3c08fe93a1b77113b2e" translate="yes" xml:space="preserve">
          <source>Flickering when using ngShow to toggle between elements</source>
          <target state="translated">ngShow를 사용하여 요소 간 전환시 깜박임</target>
        </trans-unit>
        <trans-unit id="dd43887b63ddf9f9facc6f00c39c0b0cb59061d5" translate="yes" xml:space="preserve">
          <source>Flushes all currently pending tasks and executes the corresponding callbacks.</source>
          <target state="translated">현재 보류중인 모든 작업을 플러시하고 해당 콜백을 실행합니다.</target>
        </trans-unit>
        <trans-unit id="a90504300f4ff98f08eb7ca5fb07f8b7ddb64a04" translate="yes" xml:space="preserve">
          <source>Flushes pending requests using the trained responses. Requests are flushed in the order they were made, but it is also possible to skip one or more requests (for example to have them flushed later). This is useful for simulating scenarios where responses arrive from the server in any order.</source>
          <target state="translated">훈련 된 응답을 사용하여 보류중인 요청을 플러시합니다. 요청은 작성된 순서대로 플러시되지만 하나 이상의 요청을 건너 뛸 수도 있습니다 (예 : 나중에 플러시하도록). 응답이 서버에서 임의 순서로 도착하는 시나리오를 시뮬레이션하는 데 유용합니다.</target>
        </trans-unit>
        <trans-unit id="638b971934a555c5935d2b23812b0728737ef511" translate="yes" xml:space="preserve">
          <source>Flushes the queue of pending tasks.</source>
          <target state="translated">보류중인 작업 대기열을 플러시합니다.</target>
        </trans-unit>
        <trans-unit id="8fccbd9b557140b0032b7f8e325d55f44d855fc4" translate="yes" xml:space="preserve">
          <source>Flushing HTTP requests</source>
          <target state="translated">플러시 HTTP 요청</target>
        </trans-unit>
        <trans-unit id="a9fc15bcc3e40c2b04001a849fdf3aa1b08d270c" translate="yes" xml:space="preserve">
          <source>Follow &lt;a href=&quot;../service/%24sce#resourceUrlPatternItem.html&quot;&gt;this link&lt;/a&gt; for a description of the items allowed in this array.</source>
          <target state="translated">이 배열에서 허용되는 항목에 대한 설명을 보려면 &lt;a href=&quot;../service/%24sce#resourceUrlPatternItem.html&quot;&gt;이 링크&lt;/a&gt; 를 따르십시오 .</target>
        </trans-unit>
        <trans-unit id="094d6476ce6c9b2413458a029d80353731b269a4" translate="yes" xml:space="preserve">
          <source>Following the AngularJS expression, you would denote the plural extension syntax by the &lt;code&gt;, plural,&lt;/code&gt; syntax element. The spaces there are optional.</source>
          <target state="translated">AngularJS 표현식 다음에 &lt;code&gt;, plural,&lt;/code&gt; 구문 요소로 복수 확장 구문을 표시합니다 . 공백은 선택 사항입니다.</target>
        </trans-unit>
        <trans-unit id="77b5d91136a3bc63a58e377a55c5cfbbe4b179c4" translate="yes" xml:space="preserve">
          <source>For CSS that's safe to source into the application. Currently unused. Feel free to use it in your own directives.</source>
          <target state="translated">응용 프로그램으로 안전하게 소스 할 수있는 CSS의 경우 현재 미사용. 자신의 지시에 자유롭게 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="93453f79c27232e1015010a01e85d73371266175" translate="yes" xml:space="preserve">
          <source>For HTML that's safe to source into the application. The &lt;a href=&quot;../directive/ngbindhtml&quot;&gt;ngBindHtml&lt;/a&gt; directive uses this context for bindings. If an unsafe value is encountered and the &lt;a href=&quot;../../ngsanitize&quot;&gt;$sanitize&lt;/a&gt; module is present this will sanitize the value instead of throwing an error.</source>
          <target state="translated">응용 프로그램으로 안전하게 소스 할 수있는 HTML의 경우. &lt;a href=&quot;../directive/ngbindhtml&quot;&gt;ngBindHtml의&lt;/a&gt; 지시어는 바인딩이 컨텍스트를 사용합니다. 안전하지 않은 값이 발생하고 &lt;a href=&quot;../../ngsanitize&quot;&gt;$ sanitize&lt;/a&gt; 모듈이 있으면 오류를 발생시키는 대신 값을 삭제합니다.</target>
        </trans-unit>
        <trans-unit id="26c9ca3b2c358ad13d5820190c1ba8d9939ab41e" translate="yes" xml:space="preserve">
          <source>For JavaScript that is safe to execute in your application's context. Currently unused. Feel free to use it in your own directives.</source>
          <target state="translated">애플리케이션 컨텍스트에서 실행하기에 안전한 JavaScript 현재 미사용. 자신의 지시에 자유롭게 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="c53dc4f36928109e16191d24a777b2f91435bd6c" translate="yes" xml:space="preserve">
          <source>For URLs that are not only safe to follow as links, but whose contents are also safe to include in your application. Examples include &lt;code&gt;ng-include&lt;/code&gt;, &lt;code&gt;src&lt;/code&gt; / &lt;code&gt;ngSrc&lt;/code&gt; bindings for tags other than &lt;code&gt;IMG&lt;/code&gt; (e.g. &lt;code&gt;IFRAME&lt;/code&gt;, &lt;code&gt;OBJECT&lt;/code&gt;, etc.)</source>
          <target state="translated">링크로 따라 가기에 안전하지만 응용 프로그램에 포함하기에 안전한 URL의 경우. 예를 들어 &lt;code&gt;IMG&lt;/code&gt; 이외의 태그에 대한 &lt;code&gt;ng-include&lt;/code&gt; , &lt;code&gt;src&lt;/code&gt; / &lt;code&gt;ngSrc&lt;/code&gt; 바인딩 (예 : &lt;code&gt;IFRAME&lt;/code&gt; , &lt;code&gt;OBJECT&lt;/code&gt; 등)이 있습니다.</target>
        </trans-unit>
        <trans-unit id="679d8901367dd69ff1b551c6d19359134975c76f" translate="yes" xml:space="preserve">
          <source>For URLs that are safe to follow as links. Is automatically converted from string by sanitizing when needed. Note that &lt;code&gt;$sce.URL&lt;/code&gt; makes a stronger statement about the URL than &lt;code&gt;$sce.MEDIA_URL&lt;/code&gt; does and therefore contexts requiring values trusted for &lt;code&gt;$sce.URL&lt;/code&gt; can be used anywhere that values trusted for &lt;code&gt;$sce.MEDIA_URL&lt;/code&gt; are required.</source>
          <target state="translated">링크로 따라 가기 쉬운 URL의 경우. 필요할 때 살균하여 문자열에서 자동으로 변환됩니다. 하는 것으로 &lt;code&gt;$sce.URL&lt;/code&gt; 보다 URL에 대한 강한 진술하게 &lt;code&gt;$sce.MEDIA_URL&lt;/code&gt; 값을 필요로하므로 컨텍스트가 신뢰할 수행하고 &lt;code&gt;$sce.URL&lt;/code&gt; 값을 신뢰할 것을 어디에서나 사용할 수있는 &lt;code&gt;$sce.MEDIA_URL&lt;/code&gt; 요구된다.</target>
        </trans-unit>
        <trans-unit id="460be5bd6859be623406a9b95efc4d427c933c3d" translate="yes" xml:space="preserve">
          <source>For URLs that are safe to render as media. Is automatically converted from string by sanitizing when needed.</source>
          <target state="translated">미디어로 렌더링하기에 안전한 URL의 경우. 필요할 때 살균하여 문자열에서 자동으로 변환됩니다.</target>
        </trans-unit>
        <trans-unit id="56a3631774eba60c1d32538706994f443230d184" translate="yes" xml:space="preserve">
          <source>For a full breakdown of each method available on &lt;code&gt;$animate&lt;/code&gt;, see the &lt;a href=&quot;../api/ng/service/%24animate&quot;&gt;API documentation&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;$animate&lt;/code&gt; 에서 사용할 수있는 각 방법에 대한 자세한 내용은 &lt;a href=&quot;../api/ng/service/%24animate&quot;&gt;API 설명서를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="ee537291a987f36791c6713c21d3132becf867bb" translate="yes" xml:space="preserve">
          <source>For a full breakdown of the steps involved during each animation event, refer to the &lt;a href=&quot;../api/ng/service/%24animate&quot;&gt;&lt;code&gt;$animate&lt;/code&gt; API docs&lt;/a&gt;.</source>
          <target state="translated">각 애니메이션 이벤트 중에 포함 된 단계에 대한 자세한 내용은 &lt;a href=&quot;../api/ng/service/%24animate&quot;&gt; &lt;code&gt;$animate&lt;/code&gt; API docs를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="0c2ee5a6e688447faa7359cb736c719caeff0771" translate="yes" xml:space="preserve">
          <source>For a full breakdown of the steps involved during each animation event, refer to the &lt;a href=&quot;ng/service/%24animate&quot;&gt;&lt;code&gt;$animate&lt;/code&gt; API docs&lt;/a&gt;.</source>
          <target state="translated">각 애니메이션 이벤트 중에 포함 된 단계에 대한 자세한 내용은 &lt;a href=&quot;ng/service/%24animate&quot;&gt; &lt;code&gt;$animate&lt;/code&gt; API docs를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="9eb4e7bb485c4f2c498bc194e7c524491dc3a750" translate="yes" xml:space="preserve">
          <source>For a higher level of abstraction, please check out the &lt;a href=&quot;../../ngresource/service/%24resource&quot;&gt;$resource&lt;/a&gt; service.</source>
          <target state="translated">더 높은 수준의 추상화는 &lt;a href=&quot;../../ngresource/service/%24resource&quot;&gt;$ resource&lt;/a&gt; 서비스 를 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="d076559b1af0412b2156be6fe715805d27e234d9" translate="yes" xml:space="preserve">
          <source>For an overview of this service and the functionnality it provides in AngularJS, see the main page for &lt;a href=&quot;%24sce&quot;&gt;SCE&lt;/a&gt;. The current page is targeted for developers who need to alter how SCE works in their application, which shouldn't be needed in most cases.</source>
          <target state="translated">이 서비스 및 AngularJS에서 제공하는 기능에 대한 개요는 &lt;a href=&quot;%24sce&quot;&gt;SCE&lt;/a&gt; 기본 페이지를 참조하십시오 . 현재 페이지는 대부분의 경우 필요하지 않은 응용 프로그램에서 SCE 작동 방식을 변경해야하는 개발자를 대상으로합니다.</target>
        </trans-unit>
        <trans-unit id="b35f9509f0816b491b39c105cf33a4c232d76568" translate="yes" xml:space="preserve">
          <source>For basic examples, how to use &lt;code&gt;ngModel&lt;/code&gt;, see:</source>
          <target state="translated">&lt;code&gt;ngModel&lt;/code&gt; 사용 방법에 대한 기본 예제는 다음 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="18cb02d5b2d6faa6bcd2abc7c6cf94b02170c3a3" translate="yes" xml:space="preserve">
          <source>For best practices on using &lt;code&gt;ngModel&lt;/code&gt;, see:</source>
          <target state="translated">&lt;code&gt;ngModel&lt;/code&gt; 사용에 대한 모범 사례는 다음을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="77d34f60b8e72f532f193ec3320fc033253270d4" translate="yes" xml:space="preserve">
          <source>For browsers that support the HTML5 history API, &lt;code&gt;$location&lt;/code&gt; uses the HTML5 history API to write path and search. If the history API is not supported by a browser, &lt;code&gt;$location&lt;/code&gt; supplies a Hashbang URL. This frees you from having to worry about whether the browser viewing your app supports the history API or not; the &lt;code&gt;$location&lt;/code&gt; service makes this transparent to you.</source>
          <target state="translated">HTML5 히스토리 API를 지원하는 브라우저의 경우 &lt;code&gt;$location&lt;/code&gt; 은 HTML5 히스토리 API를 사용하여 경로 및 검색을 작성합니다. 히스토리 API가 브라우저에서 지원되지 않는 경우 &lt;code&gt;$location&lt;/code&gt; 은 Hashbang URL을 제공합니다. 따라서 앱을 보는 브라우저가 히스토리 API를 지원하는지 여부를 걱정할 필요가 없습니다. &lt;code&gt;$location&lt;/code&gt; 서비스를 사용하면이 투명하게.</target>
        </trans-unit>
        <trans-unit id="667b86f65118c83e9387d50ae6fab23e51925cb5" translate="yes" xml:space="preserve">
          <source>For cases where the attribute name is the same as the value you want to bind to inside the directive's scope, you can use this shorthand syntax:</source>
          <target state="translated">속성 이름이 지시문 범위 내에서 바인딩하려는 값과 동일한 경우이 속기 구문을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="214f9ccc5f52486bf94285f84eb26c0f1f87ae2a" translate="yes" xml:space="preserve">
          <source>For dynamically creating &lt;code&gt;href&lt;/code&gt; attributes for a tags, see the &lt;a href=&quot;nghref&quot;&gt;&lt;code&gt;ngHref&lt;/code&gt;&lt;/a&gt; directive.</source>
          <target state="translated">태그에 대한 &lt;code&gt;href&lt;/code&gt; 속성을 동적으로 생성 하려면 &lt;a href=&quot;nghref&quot;&gt; &lt;code&gt;ngHref&lt;/code&gt; &lt;/a&gt; 지시문을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="d2cb21c62c7124bee8beb4118b76b5e301e11b61" translate="yes" xml:space="preserve">
          <source>For example consider a directive that uses transclusion and isolated scope. The DOM hierarchy might look like this:</source>
          <target state="translated">예를 들어, 변환 및 격리 범위를 사용하는 지시문을 고려하십시오. DOM 계층은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="37c999fd77efd0888b9cb38aaca6a3de81ed8a47" translate="yes" xml:space="preserve">
          <source>For example given the following fragment of HTML</source>
          <target state="translated">예를 들어 다음과 같은 HTML 조각이 주어진 경우</target>
        </trans-unit>
        <trans-unit id="7928c96ad76339cd8a1a495f2757512494975f25" translate="yes" xml:space="preserve">
          <source>For example if we wanted to do a CSS animation for &lt;code&gt;ngHide&lt;/code&gt; then we place an animation on the &lt;code&gt;.ng-hide&lt;/code&gt; CSS class:</source>
          <target state="translated">예를 들어 &lt;code&gt;ngHide&lt;/code&gt; 에 대한 CSS 애니메이션을 수행 하려면 &lt;code&gt;.ng-hide&lt;/code&gt; CSS 클래스 에 애니메이션을 배치합니다 .</target>
        </trans-unit>
        <trans-unit id="68db25a901df945b32772fe453b1fa47d47a8252" translate="yes" xml:space="preserve">
          <source>For example if your server needs to return:</source>
          <target state="translated">예를 들어 서버를 반환해야하는 경우 :</target>
        </trans-unit>
        <trans-unit id="da9cd80863fc9d60fc99be6bca25f3975ab8cf3f" translate="yes" xml:space="preserve">
          <source>For example on *nix, to create an angular.js file that contains localization rules for german locale, you can do the following:</source>
          <target state="translated">예를 들어 * nix에서 독일어 로캘에 대한 현지화 규칙이 포함 된 angular.js 파일을 만들려면 다음을 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e64d608c66f058026befe85feab000c0e8eb56f7" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;[{id: 'foo'}, {id: 'bar'}] | orderBy:'id'&lt;/code&gt; would result in &lt;code&gt;[{id: 'bar'}, {id: 'foo'}]&lt;/code&gt;.</source>
          <target state="translated">예를 들어, &lt;code&gt;[{id: 'foo'}, {id: 'bar'}] | orderBy:'id'&lt;/code&gt; 는 &lt;code&gt;[{id: 'bar'}, {id: 'foo'}]&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="8dd342ed97c8f1fdb9f8a8fbf2799eee0ccdcc8c" translate="yes" xml:space="preserve">
          <source>For example, an element acts as a loading spinner. It has an infinite css animation on it, and also an &lt;a href=&quot;../api/ng/directive/ngif&quot;&gt;&lt;code&gt;ngIf&lt;/code&gt;&lt;/a&gt; directive, for which no animations are defined:</source>
          <target state="translated">예를 들어, 요소는 로딩 스피너 역할을합니다. 여기에는 무한 CSS 애니메이션과 애니메이션이 정의되지 않은 &lt;a href=&quot;../api/ng/directive/ngif&quot;&gt; &lt;code&gt;ngIf&lt;/code&gt; &lt;/a&gt; 지시문이 있습니다.</target>
        </trans-unit>
        <trans-unit id="7cf18d17856b16f1490eddc7ee8f166885da6706" translate="yes" xml:space="preserve">
          <source>For example, considering this template:</source>
          <target state="translated">예를 들어이 템플릿을 고려하면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="5c917b642410469c8ea7e90f8a294d625b0e2286" translate="yes" xml:space="preserve">
          <source>For example, given &lt;code&gt;&amp;lt;my-component my-attr=&quot;parentModel&quot;&amp;gt;&lt;/code&gt; and directive definition of &lt;code&gt;scope: { localModel:'&amp;lt;myAttr' }&lt;/code&gt;, then the isolated scope property &lt;code&gt;localModel&lt;/code&gt; will reflect the value of &lt;code&gt;parentModel&lt;/code&gt; on the parent scope. Any changes to &lt;code&gt;parentModel&lt;/code&gt; will be reflected in &lt;code&gt;localModel&lt;/code&gt;, but changes in &lt;code&gt;localModel&lt;/code&gt; will not reflect in &lt;code&gt;parentModel&lt;/code&gt;. There are however two caveats:</source>
          <target state="translated">예를 들어, &lt;code&gt;&amp;lt;my-component my-attr=&quot;parentModel&quot;&amp;gt;&lt;/code&gt; 및 &lt;code&gt;scope: { localModel:'&amp;lt;myAttr' }&lt;/code&gt; 지시어 정의 {localModel : '&amp;lt;myAttr'}가 주어 지면 고립 된 범위 속성 &lt;code&gt;localModel&lt;/code&gt; 은 부모 범위 의 &lt;code&gt;parentModel&lt;/code&gt; 값을 반영합니다 . 모든 변경 &lt;code&gt;parentModel&lt;/code&gt; 가 반영됩니다 &lt;code&gt;localModel&lt;/code&gt; 하지만, 변화 &lt;code&gt;localModel&lt;/code&gt; 은 반영되지 않습니다 &lt;code&gt;parentModel&lt;/code&gt; . 그러나 두 가지 경고가 있습니다.</target>
        </trans-unit>
        <trans-unit id="f49496495571ad1faf93be95dab230558d27e175" translate="yes" xml:space="preserve">
          <source>For example, if &lt;code&gt;mode.rewriteLinks&lt;/code&gt; is set to &lt;code&gt;'internal-link'&lt;/code&gt;:</source>
          <target state="translated">예를 들어 &lt;code&gt;mode.rewriteLinks&lt;/code&gt; 가 &lt;code&gt;'internal-link'&lt;/code&gt; 로 설정된 경우 :</target>
        </trans-unit>
        <trans-unit id="c8160364ec09deefcb004bae9314f54d4f6ba323" translate="yes" xml:space="preserve">
          <source>For example, if an input control is added that is already &lt;code&gt;$dirty&lt;/code&gt; and has &lt;code&gt;$error&lt;/code&gt; properties, calling &lt;code&gt;$setDirty()&lt;/code&gt; and &lt;code&gt;$validate()&lt;/code&gt; afterwards will propagate the state to the parent form.</source>
          <target state="translated">예를 들어, 이미 &lt;code&gt;$dirty&lt;/code&gt; 이고 &lt;code&gt;$error&lt;/code&gt; 속성 이있는 입력 컨트롤이 추가 된 경우 &lt;code&gt;$setDirty()&lt;/code&gt; 및 &lt;code&gt;$validate()&lt;/code&gt; 호출 하면 상태가 부모 폼으로 전파됩니다.</target>
        </trans-unit>
        <trans-unit id="4100a3af8d122712b1181599580e9e97e167970c" translate="yes" xml:space="preserve">
          <source>For example, it can be used for specifying the &quot;Accept&quot; header that is sent to the server, when requesting a template.</source>
          <target state="translated">예를 들어, 템플릿을 요청할 때 서버로 전송되는 &quot;Accept&quot;헤더를 지정하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b6c81880bfa28e2a7d53ec485327343074412001" translate="yes" xml:space="preserve">
          <source>For example, routes like &lt;code&gt;/color/:color/largecode/:largecode*\/edit&lt;/code&gt; will match &lt;code&gt;/color/brown/largecode/code/with/slashes/edit&lt;/code&gt; and extract:</source>
          <target state="translated">예를 들어 &lt;code&gt;/color/:color/largecode/:largecode*\/edit&lt;/code&gt; 와 같은 경로 는 &lt;code&gt;/color/brown/largecode/code/with/slashes/edit&lt;/code&gt; 와 일치 하고 추출합니다.</target>
        </trans-unit>
        <trans-unit id="1b54425e1ee99911055acc84ab0ce4f407e3493d" translate="yes" xml:space="preserve">
          <source>For example, the following forms are all equivalent and match the &lt;a href=&quot;../api/ng/directive/ngbind&quot;&gt;&lt;code&gt;ngBind&lt;/code&gt;&lt;/a&gt; directive:</source>
          <target state="translated">예를 들어, 다음 형식은 모두 동일하며 &lt;a href=&quot;../api/ng/directive/ngbind&quot;&gt; &lt;code&gt;ngBind&lt;/code&gt; &lt;/a&gt; 지시문 과 일치합니다 .</target>
        </trans-unit>
        <trans-unit id="8a1d556c82b4cdccf6ac8ff718e0e8e16f73d570" translate="yes" xml:space="preserve">
          <source>For example, the parameter &lt;code&gt;_myService_&lt;/code&gt; would be resolved as the reference &lt;code&gt;myService&lt;/code&gt;. Since it is available in the function body as &lt;code&gt;_myService_&lt;/code&gt;, we can then assign it to a variable defined in an outer scope.</source>
          <target state="translated">예를 들어, 매개 변수 &lt;code&gt;_myService_&lt;/code&gt; 는 참조 &lt;code&gt;myService&lt;/code&gt; 로 해석됩니다 . 함수 본문에서 &lt;code&gt;_myService_&lt;/code&gt; 로 사용할 수 있으므로 외부 범위에 정의 된 변수에 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0c9ab0c654c0f4dd1405a9253a4855d8cd4a37ec" translate="yes" xml:space="preserve">
          <source>For example, the transclude object &lt;code&gt;{ slotA: '?myCustomElement' }&lt;/code&gt; maps &lt;code&gt;&amp;lt;my-custom-element&amp;gt;&lt;/code&gt; elements to the &lt;code&gt;slotA&lt;/code&gt; slot, which can be accessed via the &lt;code&gt;$transclude&lt;/code&gt; function or via the &lt;a href=&quot;../directive/ngtransclude&quot;&gt;&lt;code&gt;ngTransclude&lt;/code&gt;&lt;/a&gt; directive.</source>
          <target state="translated">예를 들어, transclude 객체 &lt;code&gt;{ slotA: '?myCustomElement' }&lt;/code&gt; 는 &lt;code&gt;&amp;lt;my-custom-element&amp;gt;&lt;/code&gt; 요소를 &lt;code&gt;slotA&lt;/code&gt; 슬롯에 매핑 하며 &lt;code&gt;$transclude&lt;/code&gt; &lt;a href=&quot;../directive/ngtransclude&quot;&gt; &lt;code&gt;ngTransclude&lt;/code&gt; &lt;/a&gt; 함수 또는 ngTransclude 지시문을 통해 액세스 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="63e8ba7e3633e731a37f59a5f71a0246863d5260" translate="yes" xml:space="preserve">
          <source>For example, these are valid expressions in AngularJS:</source>
          <target state="translated">예를 들어, AngularJS에서 유효한 표현식입니다.</target>
        </trans-unit>
        <trans-unit id="96705da955a8375dd1945d20693b46a51ee66c61" translate="yes" xml:space="preserve">
          <source>For example, to bind to &lt;code&gt;viewBox&lt;/code&gt;, we can write:</source>
          <target state="translated">예를 들어 &lt;code&gt;viewBox&lt;/code&gt; 에 바인딩하려면 다음 과 같이 쓸 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0ccfc76b489a9482967cab3c080c55bf14ba5ead" translate="yes" xml:space="preserve">
          <source>For example, we could fix the example above by instead writing:</source>
          <target state="translated">예를 들어, 대신 다음과 같이 작성하여 위 예제를 수정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e7d01ec6314e26035b376c51a5d51073e752c597" translate="yes" xml:space="preserve">
          <source>For example, you can specify a new &lt;code&gt;update&lt;/code&gt; action that uses the &lt;code&gt;PUT&lt;/code&gt; HTTP verb:</source>
          <target state="translated">예를 들어 &lt;code&gt;PUT&lt;/code&gt; HTTP 동사 를 사용 하는 새 &lt;code&gt;update&lt;/code&gt; 작업을 지정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="24b9b4933809e915effa8985612fb6a246c52bde" translate="yes" xml:space="preserve">
          <source>For example, you should not use interpolation in the value of the &lt;code&gt;style&lt;/code&gt; attribute (e.g. &lt;code&gt;style=&quot;color: {{ 'orange' }}; font-weight: {{ 'bold' }};&quot;&lt;/code&gt;) &lt;strong&gt;and&lt;/strong&gt; at the same time use a directive that changes the content of that attribute, such as &lt;code&gt;ngStyle&lt;/code&gt;.</source>
          <target state="translated">예를 들어, 값에 보간을 사용해서는 안 &lt;code&gt;style&lt;/code&gt; (예를 들어, 속성 &lt;code&gt;style=&quot;color: {{ 'orange' }}; font-weight: {{ 'bold' }};&quot;&lt;/code&gt; ) &lt;strong&gt;과&lt;/strong&gt; 에서 동시에 사용 같은 그 속성의 내용을 변경하는 지침 &lt;code&gt;ngStyle&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="3d34c040e0936e358901f3aa689af5cf27ff974b" translate="yes" xml:space="preserve">
          <source>For example: &lt;code&gt;(name, age) in {'adam':10, 'amalie':12}&lt;/code&gt;.</source>
          <target state="translated">예를 들어 &lt;code&gt;(name, age) in {'adam':10, 'amalie':12}&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ed802f940e232dd5f65c3ca8779aee1a29358982" translate="yes" xml:space="preserve">
          <source>For example: &lt;code&gt;album in artist.albums&lt;/code&gt;.</source>
          <target state="translated">예를 들어 &lt;code&gt;album in artist.albums&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="681d399129810dbe00c67bb783ff5c6fc3cb9abd" translate="yes" xml:space="preserve">
          <source>For example: &lt;code&gt;item in items | filter : x | orderBy : order | limitTo : limit as results track by item.id&lt;/code&gt; .</source>
          <target state="translated">예를 들면 다음과 같습니다. &lt;code&gt;item in items | filter : x | orderBy : order | limitTo : limit as results track by item.id&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3361e3ce4a7b68bb7099adb908017c58b77d7659" translate="yes" xml:space="preserve">
          <source>For example: &lt;code&gt;item in items | filter:x as results&lt;/code&gt; will store the fragment of the repeated items as &lt;code&gt;results&lt;/code&gt;, but only after the items have been processed through the filter.</source>
          <target state="translated">예를 들면 다음과 같습니다. &lt;code&gt;item in items | filter:x as results&lt;/code&gt; 로 반복되는 항목의 단편 저장할 &lt;code&gt;results&lt;/code&gt; 하지만 항목은 필터를 통해 처리 된 후에 만.</target>
        </trans-unit>
        <trans-unit id="94485d1a8b6086205e13bc75af843d115c8cdeb9" translate="yes" xml:space="preserve">
          <source>For extra convenience, &lt;code&gt;whenRoute&lt;/code&gt; and &lt;code&gt;expectRoute&lt;/code&gt; shortcuts are available. These methods offer colon delimited matching of the url path, ignoring the query string and trailing slashes. This allows declarations similar to how application routes are configured with &lt;code&gt;$routeProvider&lt;/code&gt;. Because these methods convert the definition url to regex, declaration order is important. Combined with query parameter parsing, the following is possible:</source>
          <target state="translated">편의성을 &lt;code&gt;whenRoute&lt;/code&gt; 위해 whenRoute 및 &lt;code&gt;expectRoute&lt;/code&gt; 바로 가기를 사용할 수 있습니다. 이러한 메소드는 URL 경로의 콜론으로 구분 된 일치를 제공하여 쿼리 문자열과 후행 슬래시를 무시합니다. 이를 통해 &lt;code&gt;$routeProvider&lt;/code&gt; 응용 프로그램 경로를 구성하는 방법과 유사한 선언이 가능 합니다. 이러한 메소드는 정의 URL을 정규식으로 변환하기 때문에 선언 순서가 중요합니다. 쿼리 매개 변수 구문 분석과 함께 다음이 가능합니다.</target>
        </trans-unit>
        <trans-unit id="072be915c36eea0008ba664485e0bec787e012a1" translate="yes" xml:space="preserve">
          <source>For folks with a jQuery background</source>
          <target state="translated">jQuery 배경을 가진 사람들을 위해</target>
        </trans-unit>
        <trans-unit id="d4be5a755dc40ef55c3ed316c05fba77165d707c" translate="yes" xml:space="preserve">
          <source>For further information check out the guide on &lt;a href=&quot;../../../guide/directive#matching-directives.html&quot;&gt;Matching Directives&lt;/a&gt;</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;../../../guide/directive#matching-directives.html&quot;&gt;일치하는 지침&lt;/a&gt; 에 대한 안내서를 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="4b43ddc504c929290eacba4d8a365ed1210996ec" translate="yes" xml:space="preserve">
          <source>For historical reasons, this method will also flush non-&lt;code&gt;$timeout&lt;/code&gt; pending tasks, such as &lt;a href=&quot;../../ng/service/%24q&quot;&gt;&lt;code&gt;$q&lt;/code&gt;&lt;/a&gt; promises and tasks scheduled via &lt;a href=&quot;../../ng/type/%24rootscope.scope#%24applyAsync.html&quot;&gt;$applyAsync&lt;/a&gt; and &lt;a href=&quot;../../ng/type/%24rootscope.scope#%24evalAsync.html&quot;&gt;$evalAsync&lt;/a&gt;.</source>
          <target state="translated">역사적 이유로이 방법은 &lt;a href=&quot;../../ng/service/%24q&quot;&gt; &lt;code&gt;$q&lt;/code&gt; &lt;/a&gt; 약속 및 &lt;a href=&quot;../../ng/type/%24rootscope.scope#%24applyAsync.html&quot;&gt;$ applyAsync&lt;/a&gt; 및 &lt;a href=&quot;../../ng/type/%24rootscope.scope#%24evalAsync.html&quot;&gt;$ evalAsync&lt;/a&gt; 를 통해 예약 된 작업 과 같이 $ &lt;code&gt;$timeout&lt;/code&gt; 아닌 보류중인 작업 도 삭제 합니다 .</target>
        </trans-unit>
        <trans-unit id="96d5709584b09a9673009d4b874368aa832eb8de" translate="yes" xml:space="preserve">
          <source>For historical reasons, this method will also verify non-&lt;code&gt;$timeout&lt;/code&gt; pending tasks, such as pending &lt;a href=&quot;../../ng/service/%24http&quot;&gt;&lt;code&gt;$http&lt;/code&gt;&lt;/a&gt; requests, in-progress &lt;a href=&quot;../../ngroute/service/%24route&quot;&gt;&lt;code&gt;$route&lt;/code&gt;&lt;/a&gt; transitions, unresolved &lt;a href=&quot;../../ng/service/%24q&quot;&gt;&lt;code&gt;$q&lt;/code&gt;&lt;/a&gt; promises and tasks scheduled via &lt;a href=&quot;../../ng/type/%24rootscope.scope#%24applyAsync.html&quot;&gt;$applyAsync&lt;/a&gt; and &lt;a href=&quot;../../ng/type/%24rootscope.scope#%24evalAsync.html&quot;&gt;$evalAsync&lt;/a&gt;.</source>
          <target state="translated">역사적인 이유로,이 방법은 비 확인합니다 &lt;code&gt;$timeout&lt;/code&gt; 민사와 같은 대기중인 작업, &lt;a href=&quot;../../ng/service/%24http&quot;&gt; &lt;code&gt;$http&lt;/code&gt; &lt;/a&gt; 요청 진행 &lt;a href=&quot;../../ngroute/service/%24route&quot;&gt; &lt;code&gt;$route&lt;/code&gt; &lt;/a&gt; 전환, 해결되지 않은 &lt;a href=&quot;../../ng/service/%24q&quot;&gt; &lt;code&gt;$q&lt;/code&gt; &lt;/a&gt; 통해 일정 약속과 작업 &lt;a href=&quot;../../ng/type/%24rootscope.scope#%24applyAsync.html&quot;&gt;$ applyAsync&lt;/a&gt; 및 &lt;a href=&quot;../../ng/type/%24rootscope.scope#%24evalAsync.html&quot;&gt;$ evalAsync을&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="e79547ae737496ef4b830c418e98203529ffd5b3" translate="yes" xml:space="preserve">
          <source>For in-depth discussion about DI, see &lt;a href=&quot;http://en.wikipedia.org/wiki/Dependency_injection&quot;&gt;Dependency Injection&lt;/a&gt; at Wikipedia, &lt;a href=&quot;http://martinfowler.com/articles/injection.html&quot;&gt;Inversion of Control&lt;/a&gt; by Martin Fowler, or read about DI in your favorite software design pattern book.</source>
          <target state="translated">DI에 대한 자세한 내용 은 Wikipedia의 &lt;a href=&quot;http://en.wikipedia.org/wiki/Dependency_injection&quot;&gt;Dependency Injection&lt;/a&gt; , Martin Fowler의 &lt;a href=&quot;http://martinfowler.com/articles/injection.html&quot;&gt;Inversion of Control&lt;/a&gt; 을 참조하거나 자주 사용하는 소프트웨어 디자인 패턴 북에서 DI에 대해 읽어보십시오.</target>
        </trans-unit>
        <trans-unit id="4c4430f0a9c683776764888172731ad0be5f3a21" translate="yes" xml:space="preserve">
          <source>For information on how the compiler works, see the &lt;a href=&quot;../../../guide/compiler&quot;&gt;AngularJS HTML Compiler&lt;/a&gt; section of the Developer Guide.</source>
          <target state="translated">컴파일러의 작동 방식에 대한 정보 는 개발자 안내서 의 &lt;a href=&quot;../../../guide/compiler&quot;&gt;AngularJS HTML 컴파일러&lt;/a&gt; 섹션을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="fcbd9cf327acae20f4980fb68635ba5be10e8a9e" translate="yes" xml:space="preserve">
          <source>For instance in a long running Single Page Application (SPA), one user may &quot;log out&quot;, but then another user may access the application without refreshing, in which case all the cached data is still available.</source>
          <target state="translated">예를 들어 장기간 실행되는 단일 페이지 응용 프로그램 (SPA)에서 한 사용자는 &quot;로그 아웃&quot;할 수 있지만 다른 사용자는 새로 고치지 않고 응용 프로그램에 액세스 할 수 있습니다.이 경우 모든 캐시 된 데이터를 계속 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9c5ae6d931fb112afe199ee277a04174d9d1b69e" translate="yes" xml:space="preserve">
          <source>For instance, the required directive does this to work out if the input has data or not.</source>
          <target state="translated">예를 들어, 필수 지시문은 입력에 데이터가 있는지 여부를 확인하기 위해이를 수행합니다.</target>
        </trans-unit>
        <trans-unit id="1ed68e337042bafa1e8676ab786bd6c545ca56f2" translate="yes" xml:space="preserve">
          <source>For instance, what if we wanted to create a directive that lets a user drag an element?</source>
          <target state="translated">예를 들어, 사용자가 요소를 끌 수있는 지시문을 만들려면 어떻게해야합니까?</target>
        </trans-unit>
        <trans-unit id="83e081f1429ea35f9cc98daf2caa2c7900084512" translate="yes" xml:space="preserve">
          <source>For more about how to configure services, see &lt;a href=&quot;../../../guide/providers#provider-recipe.html&quot;&gt;Provider Recipe&lt;/a&gt;.</source>
          <target state="translated">서비스 구성 방법에 대한 자세한 정보는 &lt;a href=&quot;../../../guide/providers#provider-recipe.html&quot;&gt;제공자 레시피를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="3c9f8258461de9d031c72dc478ab759f9f3d6a71" translate="yes" xml:space="preserve">
          <source>For more details on the &lt;code&gt;link&lt;/code&gt; option refer to the &lt;a href=&quot;../api/ng/service/%24compile#-link-.html&quot;&gt;&lt;code&gt;$compile&lt;/code&gt; API&lt;/a&gt; page.</source>
          <target state="translated">&lt;code&gt;link&lt;/code&gt; 옵션 에 대한 자세한 내용 은 &lt;a href=&quot;../api/ng/service/%24compile#-link-.html&quot;&gt; &lt;code&gt;$compile&lt;/code&gt; API&lt;/a&gt; 페이지를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="03fb612774d8f4c26b5bffdddde2f8da0d09c268" translate="yes" xml:space="preserve">
          <source>For more details, please refer to our &lt;a href=&quot;https://docs.google.com/a/google.com/document/d/1pbtW2yvtmFBikfRrJd8VAsabiFkKezmYZ_PbgdjQOVU/edit&quot;&gt;design doc&lt;/a&gt;. You can read more about the ICU MessageFormat syntax at &lt;a href=&quot;http://userguide.icu-project.org/formatparse/messages#TOC-MessageFormat&quot;&gt;Formatting Messages | ICU User Guide&lt;/a&gt;.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;https://docs.google.com/a/google.com/document/d/1pbtW2yvtmFBikfRrJd8VAsabiFkKezmYZ_PbgdjQOVU/edit&quot;&gt;디자인 문서&lt;/a&gt; 를 참조하십시오 . ICU MessageFormat 구문에 대한 자세한 내용은 &lt;a href=&quot;http://userguide.icu-project.org/formatparse/messages#TOC-MessageFormat&quot;&gt;메시지 포맷 | ICU 사용자 안내서&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="f6b5d56555aab13e3ab69162ff339401d9009f51" translate="yes" xml:space="preserve">
          <source>For more examples, and an in-depth guide, see the &lt;a href=&quot;../../../guide/component&quot;&gt;component guide&lt;/a&gt;.</source>
          <target state="translated">자세한 예와 자세한 안내서는 &lt;a href=&quot;../../../guide/component&quot;&gt;구성 요소 안내서를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="e45ef233283f4eb561fb40a1c85a858803109abf" translate="yes" xml:space="preserve">
          <source>For more information about how AngularJS filters work, and how to create your own filters, see &lt;a href=&quot;../../../guide/filter&quot;&gt;Filters&lt;/a&gt; in the AngularJS Developer Guide.</source>
          <target state="translated">AngularJS와 작업을 필터링하고, 자신 만의 필터를 생성하는 방법에 대한 자세한 내용은 &lt;a href=&quot;../../../guide/filter&quot;&gt;필터&lt;/a&gt; AngularJS와 개발자 가이드를.</target>
        </trans-unit>
        <trans-unit id="b5c7cb088f3bf1b4252226980a33761384c56cfe" translate="yes" xml:space="preserve">
          <source>For more information on Protractor, view &lt;a href=&quot;http://angular.github.io/protractor/#/getting-started&quot;&gt;getting started&lt;/a&gt; or the &lt;a href=&quot;http://angular.github.io/protractor/#/api&quot;&gt;api docs&lt;/a&gt;.</source>
          <target state="translated">각도기에 대한 자세한 내용은 &lt;a href=&quot;http://angular.github.io/protractor/#/getting-started&quot;&gt;시작하기&lt;/a&gt; 또는 &lt;a href=&quot;http://angular.github.io/protractor/#/api&quot;&gt;api docs를 참조하십시오&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="f7d9777dd9e23921be5e65fe03cbf4547e45948c" translate="yes" xml:space="preserve">
          <source>For more information please visit &lt;a href=&quot;../api/ng/service/%24sce&quot;&gt;&lt;code&gt;$sce&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../api/ngsanitize/service/%24sanitize&quot;&gt;&lt;code&gt;$sanitize&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;../api/ng/service/%24sce&quot;&gt; &lt;code&gt;$sce&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../api/ngsanitize/service/%24sanitize&quot;&gt; &lt;code&gt;$sanitize&lt;/code&gt; &lt;/a&gt; 를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="5007e5f43b46ae511f7cfe86c43883e38fb85306" translate="yes" xml:space="preserve">
          <source>For more information please visit &lt;a href=&quot;https://www.whitehatsec.com/blog/web-storage-security/&quot;&gt;Web Storage Security&lt;/a&gt;.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;https://www.whitehatsec.com/blog/web-storage-security/&quot;&gt;웹 스토리지 보안을&lt;/a&gt; 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="17050d011e437da353406dbb3de303d540a80ce8" translate="yes" xml:space="preserve">
          <source>For more information see &lt;a href=&quot;../../../guide/%24location&quot;&gt;Developer Guide: Using $location&lt;/a&gt;</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;../../../guide/%24location&quot;&gt;개발자 안내서 : $ location 사용을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="d42a33c1c8d9f173d6a9033c03f236de6cab9c91" translate="yes" xml:space="preserve">
          <source>For more information, see the &lt;a href=&quot;../../../guide/bootstrap&quot;&gt;Bootstrap guide&lt;/a&gt;.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;../../../guide/bootstrap&quot;&gt;Bootstrap 안내서를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="84f28113af9b7c7d485ded6f76a10650aebf1bfa" translate="yes" xml:space="preserve">
          <source>For more information, see the &lt;a href=&quot;di#using-strict-dependency-injection.html&quot;&gt;DI Guide&lt;/a&gt;.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;di#using-strict-dependency-injection.html&quot;&gt;DI 가이드를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="9ec0f18a27efe3a5bbaaa7c9a76fdead7442a493" translate="yes" xml:space="preserve">
          <source>For more on dependencies, see the &lt;a href=&quot;di&quot;&gt;dependency injection&lt;/a&gt; docs.</source>
          <target state="translated">종속성에 대한 자세한 내용은 &lt;a href=&quot;di&quot;&gt;종속성 주입&lt;/a&gt; 문서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="ae1dd7c814f6a02ea749e951d697e01de287e16d" translate="yes" xml:space="preserve">
          <source>For more on the &lt;code&gt;restrict&lt;/code&gt; property, see the &lt;a href=&quot;../api/ng/service/%24compile#directive-definition-object.html&quot;&gt;API docs&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;restrict&lt;/code&gt; 속성 에 대한 자세한 내용은 &lt;a href=&quot;../api/ng/service/%24compile#directive-definition-object.html&quot;&gt;API docs를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="08deef231a5f13117b873e36e123085e74358098" translate="yes" xml:space="preserve">
          <source>For more see the docs pages on &lt;a href=&quot;../api/ng/provider/%24compileprovider#commentDirectivesEnabled.html&quot;&gt;&lt;code&gt;$compileProvider.commentDirectivesEnabled&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../api/ng/provider/%24compileprovider#cssClassDirectivesEnabled.html&quot;&gt;&lt;code&gt;$compileProvider.cssClassDirectivesEnabled&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;../api/ng/provider/%24compileprovider#commentDirectivesEnabled.html&quot;&gt; &lt;code&gt;$compileProvider.commentDirectivesEnabled&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../api/ng/provider/%24compileprovider#cssClassDirectivesEnabled.html&quot;&gt; &lt;code&gt;$compileProvider.cssClassDirectivesEnabled&lt;/code&gt; &lt;/a&gt; 의 문서 페이지를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="1b9e3aa3cc39fa5b8b3356d069b3b85b223b9d68" translate="yes" xml:space="preserve">
          <source>For more see the docs pages on &lt;a href=&quot;../api/ng/provider/%24compileprovider#debugInfoEnabled.html&quot;&gt;&lt;code&gt;$compileProvider&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../api/ng/function/angular.reloadwithdebuginfo&quot;&gt;&lt;code&gt;angular.reloadWithDebugInfo&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;../api/ng/provider/%24compileprovider#debugInfoEnabled.html&quot;&gt; &lt;code&gt;$compileProvider&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../api/ng/function/angular.reloadwithdebuginfo&quot;&gt; &lt;code&gt;angular.reloadWithDebugInfo&lt;/code&gt; &lt;/a&gt; 의 문서 페이지를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="fb0970fb80040dd5e4119122a4b3d870ad0ab13b" translate="yes" xml:space="preserve">
          <source>For mutations to be properly observed, you should make them only within the &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24apply.html&quot;&gt;scope.$apply()&lt;/a&gt;. AngularJS APIs do this implicitly, so no extra &lt;code&gt;$apply&lt;/code&gt; call is needed when doing synchronous work in controllers, or asynchronous work with &lt;a href=&quot;../api/ng/service/%24http&quot;&gt;$http&lt;/a&gt;, &lt;a href=&quot;../api/ng/service/%24timeout&quot;&gt;$timeout&lt;/a&gt; or &lt;a href=&quot;../api/ng/service/%24interval&quot;&gt;$interval&lt;/a&gt; services.</source>
          <target state="translated">돌연변이가 제대로 관찰 되려면 &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24apply.html&quot;&gt;scope. $ apply ()&lt;/a&gt; 내에서만 돌연변이를 만들어야합니다 . AngularJS API는이를 암시 적으로 수행하므로 컨트롤러에서 동기 작업을 수행하거나 &lt;a href=&quot;../api/ng/service/%24http&quot;&gt;$ http&lt;/a&gt; , &lt;a href=&quot;../api/ng/service/%24timeout&quot;&gt;$ timeout&lt;/a&gt; 또는 &lt;a href=&quot;../api/ng/service/%24interval&quot;&gt;$ interval&lt;/a&gt; 서비스를 사용한 비동기 작업을 수행 할 때 추가 &lt;code&gt;$apply&lt;/code&gt; 호출이 필요 하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="70cabd8c2e94395b437f880992a54a0646b1ec62" translate="yes" xml:space="preserve">
          <source>For ngAria to do its magic, simply include the module &lt;code&gt;ngAria&lt;/code&gt; as a dependency. The following directives are supported: &lt;code&gt;ngModel&lt;/code&gt;, &lt;code&gt;ngChecked&lt;/code&gt;, &lt;code&gt;ngReadonly&lt;/code&gt;, &lt;code&gt;ngRequired&lt;/code&gt;, &lt;code&gt;ngValue&lt;/code&gt;, &lt;code&gt;ngDisabled&lt;/code&gt;, &lt;code&gt;ngShow&lt;/code&gt;, &lt;code&gt;ngHide&lt;/code&gt;, &lt;code&gt;ngClick&lt;/code&gt;, &lt;code&gt;ngDblClick&lt;/code&gt;, and &lt;code&gt;ngMessages&lt;/code&gt;.</source>
          <target state="translated">ngAria가 마법을 수행하려면 모듈 &lt;code&gt;ngAria&lt;/code&gt; 를 종속성으로 포함하기 만하면됩니다 . &lt;code&gt;ngModel&lt;/code&gt; , &lt;code&gt;ngChecked&lt;/code&gt; , &lt;code&gt;ngReadonly&lt;/code&gt; , &lt;code&gt;ngRequired&lt;/code&gt; , &lt;code&gt;ngValue&lt;/code&gt; , &lt;code&gt;ngDisabled&lt;/code&gt; , &lt;code&gt;ngShow&lt;/code&gt; , &lt;code&gt;ngHide&lt;/code&gt; , &lt;code&gt;ngClick&lt;/code&gt; , &lt;code&gt;ngDblClick&lt;/code&gt; 및 &lt;code&gt;ngMessages&lt;/code&gt; 지시문이 지원됩니다 .</target>
        </trans-unit>
        <trans-unit id="7935b6948cbce976a835b91d5bd505582812c0c4" translate="yes" xml:space="preserve">
          <source>For purposes of global error handling, authentication, or any kind of synchronous or asynchronous pre-processing of request or postprocessing of responses, it is desirable to be able to intercept requests before they are handed to the server and responses before they are handed over to the application code that initiated these requests. The interceptors leverage the &lt;a href=&quot;%24q&quot;&gt;promise APIs&lt;/a&gt; to fulfill this need for both synchronous and asynchronous pre-processing.</source>
          <target state="translated">전역 오류 처리, 인증 또는 요청에 대한 동기식 또는 비동기식 전처리 또는 응답 후 처리의 목적으로, 요청이 서버로 전달되기 전에 요청을 가로 챌 수 있고 요청이 전달되기 전에 응답하는 것이 바람직합니다. 이러한 요청을 시작한 응용 프로그램 코드 인터셉터는 &lt;a href=&quot;%24q&quot;&gt;약속 API&lt;/a&gt; 를 활용하여 동기 및 비동기 사전 처리에 대한 이러한 요구를 충족시킵니다.</target>
        </trans-unit>
        <trans-unit id="b64ebc99af83053596191ba8428a4a73a05f9e05" translate="yes" xml:space="preserve">
          <source>For testing AngularJS applications there are certain tools that you should use that will make testing much easier to set up and run.</source>
          <target state="translated">AngularJS 애플리케이션 테스트에는 테스트를 훨씬 쉽게 설정하고 실행할 수 있도록 사용해야하는 특정 도구가 있습니다.</target>
        </trans-unit>
        <trans-unit id="a0981365eff2fc36be0abaf1d7aab40944bee960" translate="yes" xml:space="preserve">
          <source>For the best result, the &lt;code&gt;angular.js&lt;/code&gt; script must be loaded in the head section of the html document; alternatively, the css rule above must be included in the external stylesheet of the application.</source>
          <target state="translated">최상의 결과를 &lt;code&gt;angular.js&lt;/code&gt; 려면 angular.js 스크립트를 html 문서의 헤드 섹션에로드해야합니다. 또는 위의 CSS 규칙을 응용 프로그램의 외부 스타일 시트에 포함시켜야합니다.</target>
        </trans-unit>
        <trans-unit id="1cbfa677b41097f6715ec9bae88d486586566c4e" translate="yes" xml:space="preserve">
          <source>For the case of HTML, you might use a library, either on the client side, or on the server side, to sanitize unsafe HTML before binding to the value and rendering it in the document.</source>
          <target state="translated">HTML의 경우, 클라이언트 측 또는 서버 측에서 라이브러리를 사용하여 값에 바인딩하고 문서에서 렌더링하기 전에 안전하지 않은 HTML을 위생 처리 할 수 ​​있습니다.</target>
        </trans-unit>
        <trans-unit id="807df2e76c7472af78eccb593edb0cfe6ff5aaf1" translate="yes" xml:space="preserve">
          <source>For the following examples, we'll use the prefix &lt;code&gt;my&lt;/code&gt; (e.g. &lt;code&gt;myCustomer&lt;/code&gt;).</source>
          <target state="translated">다음 예에서는 접두사 &lt;code&gt;my&lt;/code&gt; (예 : &lt;code&gt;myCustomer&lt;/code&gt; )를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="960d746344ec6d94fdf45b4493cec7cf2ec6fcad" translate="yes" xml:space="preserve">
          <source>For the general details about this service in AngularJS, read the main page for &lt;a href=&quot;../service/%24sce&quot;&gt;Strict Contextual Escaping (SCE)&lt;/a&gt;.</source>
          <target state="translated">AngularJS에서이 서비스에 대한 일반적인 세부 사항은 &lt;a href=&quot;../service/%24sce&quot;&gt;SCE (Strict Contextual Escaping)&lt;/a&gt; 의 기본 페이지를 읽으십시오 .</target>
        </trans-unit>
        <trans-unit id="18276b32129c935a3f68b3699c65cc3ed663b628" translate="yes" xml:space="preserve">
          <source>For this reason, AngularJS prevents the default action (form submission to the server) unless the &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; element has an &lt;code&gt;action&lt;/code&gt; attribute specified.</source>
          <target state="translated">이러한 이유로 AngularJS는 &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; 요소에 &lt;code&gt;action&lt;/code&gt; 속성이 지정 되어 있지 않으면 기본 조치 (서버에 양식 제출)를 방지 합니다.</target>
        </trans-unit>
        <trans-unit id="59a0dc0f6babb8c929909c5324c52ffba8f70e1b" translate="yes" xml:space="preserve">
          <source>For this reason, AngularJS provides special &lt;code&gt;ng&lt;/code&gt;-prefixed directives for the following boolean attributes: &lt;a href=&quot;../api/ng/directive/ngdisabled&quot;&gt;&lt;code&gt;disabled&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../api/ng/directive/ngrequired&quot;&gt;&lt;code&gt;required&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../api/ng/directive/ngselected&quot;&gt;&lt;code&gt;selected&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../api/ng/directive/ngchecked&quot;&gt;&lt;code&gt;checked&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../api/ng/directive/ngreadonly&quot;&gt;&lt;code&gt;readOnly&lt;/code&gt;&lt;/a&gt; , and &lt;a href=&quot;../api/ng/directive/ngopen&quot;&gt;&lt;code&gt;open&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이러한 이유로 AngularJS는 다음 부울 속성에 대해 특수한 &lt;code&gt;ng&lt;/code&gt; - prefixed 지시문을 제공 합니다 : &lt;a href=&quot;../api/ng/directive/ngdisabled&quot;&gt; &lt;code&gt;disabled&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../api/ng/directive/ngrequired&quot;&gt; &lt;code&gt;required&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../api/ng/directive/ngselected&quot;&gt; &lt;code&gt;selected&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../api/ng/directive/ngchecked&quot;&gt; &lt;code&gt;checked&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../api/ng/directive/ngreadonly&quot;&gt; &lt;code&gt;readOnly&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../api/ng/directive/ngopen&quot;&gt; &lt;code&gt;open&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="3230a2f947a8018219006b3929f539fd927003d2" translate="yes" xml:space="preserve">
          <source>For this, inject a dependency with the name &lt;code&gt;&amp;lt;filterName&amp;gt;Filter&lt;/code&gt; into your controller/service/directive. E.g. a filter called &lt;code&gt;number&lt;/code&gt; is injected by using the dependency &lt;code&gt;numberFilter&lt;/code&gt;. The injected argument is a function that takes the value to format as first argument, and filter parameters starting with the second argument.</source>
          <target state="translated">이를 위해 이름이 &lt;code&gt;&amp;lt;filterName&amp;gt;Filter&lt;/code&gt; 인 컨트롤러 / 서비스 / 지시문에 종속성을 삽입 하십시오. 예를 들어, &lt;code&gt;number&lt;/code&gt; 라는 필터 는 의존성 &lt;code&gt;numberFilter&lt;/code&gt; 를 사용하여 주입됩니다 . 주입 된 인수는 값을 첫 번째 인수로 형식화하고 두 번째 인수로 시작하는 매개 변수를 필터링하는 함수입니다.</target>
        </trans-unit>
        <trans-unit id="79c0422145c2571f4818e372784001318ee45548" translate="yes" xml:space="preserve">
          <source>For those elements using ngModel, ngAria will dynamically bind and update the following ARIA attributes (if they have not been explicitly specified by the developer):</source>
          <target state="translated">ngModel을 사용하는 요소의 경우 ngAria는 다음 ARIA 속성을 동적으로 바인딩하고 업데이트합니다 (개발자가 명시 적으로 지정하지 않은 경우).</target>
        </trans-unit>
        <trans-unit id="5364d19c24f92cd90b7c73685bff662a0a4cfa1a" translate="yes" xml:space="preserve">
          <source>For unit testing applications that use &lt;code&gt;$http&lt;/code&gt; service, see &lt;a href=&quot;../../ngmock/service/%24httpbackend&quot;&gt;$httpBackend mock&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;$http&lt;/code&gt; 서비스 를 사용하는 단위 테스트 애플리케이션 은 &lt;a href=&quot;../../ngmock/service/%24httpbackend&quot;&gt;$ httpBackend mock을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="052fb3b37ae2bbf010c88dd3bc6c08df91652edd" translate="yes" xml:space="preserve">
          <source>Forgiving</source>
          <target state="translated">Forgiving</target>
        </trans-unit>
        <trans-unit id="abc67155e14921e60c9bacfaf13e79f8e7ecfc81" translate="yes" xml:space="preserve">
          <source>Form and controls provide validation services, so that the user can be notified of invalid input before submitting a form. This provides a better user experience than server-side validation alone because the user gets instant feedback on how to correct the error. Keep in mind that while client-side validation plays an important role in providing good user experience, it can easily be circumvented and thus can not be trusted. Server-side validation is still necessary for a secure application.</source>
          <target state="translated">양식 및 컨트롤은 유효성 검사 서비스를 제공하므로 양식을 제출하기 전에 사용자에게 잘못된 입력을 알릴 수 있습니다. 이는 사용자가 오류를 수정하는 방법에 대한 즉각적인 피드백을 받기 때문에 서버 측 유효성 검사보다 나은 사용자 환경을 제공합니다. 클라이언트 측 유효성 검사는 우수한 사용자 환경을 제공하는 데 중요한 역할을하지만 쉽게 우회 할 수 있으므로 신뢰할 수 없습니다. 안전한 응용 프로그램을 위해서는 서버 측 유효성 검사가 여전히 필요합니다.</target>
        </trans-unit>
        <trans-unit id="1eedca47903886a532d39ee2257b013bc5c557cd" translate="yes" xml:space="preserve">
          <source>Format input &amp;mdash; Use &lt;a href=&quot;forms&quot;&gt;AngularJS form controls&lt;/a&gt; instead.</source>
          <target state="translated">형식 입력 &amp;mdash; 대신 &lt;a href=&quot;forms&quot;&gt;AngularJS 양식 컨트롤을&lt;/a&gt; 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="b9fd294ed8b67f7239254353f7b9ddfee62002f1" translate="yes" xml:space="preserve">
          <source>Format of items in &lt;a href=&quot;../provider/%24scedelegateprovider#resourceUrlWhitelist.html&quot;&gt;resourceUrlWhitelist&lt;/a&gt;/&lt;a href=&quot;../provider/%24scedelegateprovider#resourceUrlBlacklist.html&quot;&gt;Blacklist&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;../provider/%24scedelegateprovider#resourceUrlWhitelist.html&quot;&gt;resourceUrlWhitelist&lt;/a&gt; / &lt;a href=&quot;../provider/%24scedelegateprovider#resourceUrlBlacklist.html&quot;&gt;Blacklist&lt;/a&gt; 의 항목 형식</target>
        </trans-unit>
        <trans-unit id="8e17b9df66528716e814be197136b7a326516c1c" translate="yes" xml:space="preserve">
          <source>Formats &lt;code&gt;date&lt;/code&gt; to a string based on the requested &lt;code&gt;format&lt;/code&gt;.</source>
          <target state="translated">형식은 &lt;code&gt;date&lt;/code&gt; 요청에 따라 문자열로 &lt;code&gt;format&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="eb856525f448d550db676ecb20ddcdce2f9183a5" translate="yes" xml:space="preserve">
          <source>Formats a number as a currency (ie $1,234.56). When no currency symbol is provided, default symbol for current locale is used.</source>
          <target state="translated">숫자를 통화로 형식화합니다 (예 : $ 1,234.56). 통화 기호가 제공되지 않으면 현재 로캘의 기본 기호가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="69675ca3093ae5e95c7f23454bbb0ec2a3e3a132" translate="yes" xml:space="preserve">
          <source>Formats a number as text.</source>
          <target state="translated">숫자를 텍스트로 형식화합니다.</target>
        </trans-unit>
        <trans-unit id="43567c9dea743d47cb7123053dbe369243a548e8" translate="yes" xml:space="preserve">
          <source>Formatted number.</source>
          <target state="translated">서식이 지정된 숫자.</target>
        </trans-unit>
        <trans-unit id="a511d54043ebc3e9c36c28add78796a0f3f9f424" translate="yes" xml:space="preserve">
          <source>Formatted string or the input if input is not recognized as date/millis.</source>
          <target state="translated">입력이 날짜 / 밀리로 인식되지 않으면 형식화 된 문자열 또는 입력입니다.</target>
        </trans-unit>
        <trans-unit id="feaca5c695540ca4a17380a6775827911844a0ef" translate="yes" xml:space="preserve">
          <source>Formatters are used to format / convert the &lt;a href=&quot;ngmodel.ngmodelcontroller#%24modelValue.html&quot;&gt;&lt;code&gt;$modelValue&lt;/code&gt;&lt;/a&gt; for display in the control.</source>
          <target state="translated">포맷터는 컨트롤에 표시 할 &lt;a href=&quot;ngmodel.ngmodelcontroller#%24modelValue.html&quot;&gt; &lt;code&gt;$modelValue&lt;/code&gt; &lt;/a&gt; 를 포맷 / 변환하는 데 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="e6e18ee88ca6b32cea05d0e3080d8f655d9521b6" translate="yes" xml:space="preserve">
          <source>Formatting rules (see Description). If not specified, &lt;code&gt;mediumDate&lt;/code&gt; is used.</source>
          <target state="translated">서식 규칙 (설명 참조). 지정하지 않으면 &lt;code&gt;mediumDate&lt;/code&gt; 가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="3f0b06a027f8381260596b559c5a0e8d57007109" translate="yes" xml:space="preserve">
          <source>Formatting the value of time and datetime-local</source>
          <target state="translated">시간 및 날짜 / 시간의 값 형식</target>
        </trans-unit>
        <trans-unit id="4bec9575721b2739ed1e7c56eb6c8471084fcbcf" translate="yes" xml:space="preserve">
          <source>Forms</source>
          <target state="translated">Forms</target>
        </trans-unit>
        <trans-unit id="34e426cd3274227d580489998337e732030d7d3c" translate="yes" xml:space="preserve">
          <source>Free Course</source>
          <target state="translated">무료 코스</target>
        </trans-unit>
        <trans-unit id="b1cc7a14b45bb59084312de228fdaae722b439c3" translate="yes" xml:space="preserve">
          <source>From a testability point of view, the separation of the controller and the view is desirable, because it allows us to test the behavior without being distracted by the rendering details.</source>
          <target state="translated">테스트 가능성 관점에서 볼 때 컨트롤러와 뷰를 분리하는 것이 바람직합니다. 렌더링 세부 사항에 방해받지 않고 동작을 테스트 할 수 있기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="ff161838502e7c8b317b65fb969c906dab1f4586" translate="yes" xml:space="preserve">
          <source>From the perspective of dealing with error handling, deferred and promise APIs are to asynchronous programming what &lt;code&gt;try&lt;/code&gt;, &lt;code&gt;catch&lt;/code&gt; and &lt;code&gt;throw&lt;/code&gt; keywords are to synchronous programming.</source>
          <target state="translated">오류 처리를 다루는 관점에서, 지연 및 약속 API는 키워드를 &lt;code&gt;try&lt;/code&gt; , &lt;code&gt;catch&lt;/code&gt; 및 &lt;code&gt;throw&lt;/code&gt; 것이 동기식 프로그래밍에 의한 비동기식 프로그래밍입니다.</target>
        </trans-unit>
        <trans-unit id="d73e691376909588e8dda5cc25ad70145db6e2ea" translate="yes" xml:space="preserve">
          <source>Fulfills multiple requests</source>
          <target state="translated">여러 요청 이행</target>
        </trans-unit>
        <trans-unit id="f1e410ad1472b42cb42cc98962428637290b6706" translate="yes" xml:space="preserve">
          <source>Function</source>
          <target state="translated">Function</target>
        </trans-unit>
        <trans-unit id="7e9e8ac7651cc9a1d61043f76ffdf8a16490138a" translate="yes" xml:space="preserve">
          <source>Function components in ng</source>
          <target state="translated">ng의 기능 구성 요소</target>
        </trans-unit>
        <trans-unit id="299be8740244752c39ca3ccf8a970cee133c25c2" translate="yes" xml:space="preserve">
          <source>Function components in ngMock</source>
          <target state="translated">ngMock의 기능 구성 요소</target>
        </trans-unit>
        <trans-unit id="c76a84b175d34bf214149af2c9e8f9e13e2e4fcc" translate="yes" xml:space="preserve">
          <source>Function for creating new instance of the service.</source>
          <target state="translated">서비스의 새로운 인스턴스를 생성하는 기능.</target>
        </trans-unit>
        <trans-unit id="7090d50b6c70bb19d3d516b59283dff809cdae61" translate="yes" xml:space="preserve">
          <source>Function for which dependent service names need to be retrieved as described above.</source>
          <target state="translated">위에서 설명한대로 종속 서비스 이름을 검색해야하는 기능.</target>
        </trans-unit>
        <trans-unit id="c4ac49e1d1511eed6fbb89bab7baa0e4b33a477d" translate="yes" xml:space="preserve">
          <source>Function that will be called whenever the interpolated value of the attribute changes. See the &lt;a href=&quot;../../../guide/interpolation#how-text-and-attribute-bindings-work.html&quot;&gt;Interpolation guide&lt;/a&gt; for more info.</source>
          <target state="translated">보간 된 속성 값이 변경 될 때마다 호출되는 함수입니다. 자세한 내용은 &lt;a href=&quot;../../../guide/interpolation#how-text-and-attribute-bindings-work.html&quot;&gt;보간 안내서&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="b463c12a5f308c5c4aafc3e574eff48f177aef97" translate="yes" xml:space="preserve">
          <source>Function that wraps the &lt;code&gt;fn&lt;/code&gt; with all the specified bindings.</source>
          <target state="translated">지정된 모든 바인딩으로 &lt;code&gt;fn&lt;/code&gt; 을 래핑하는 함수입니다 .</target>
        </trans-unit>
        <trans-unit id="fca9f3655fbd49d7d73e9fc899dae1611e2d1e66" translate="yes" xml:space="preserve">
          <source>Function to be bound.</source>
          <target state="translated">바인딩 할 함수입니다.</target>
        </trans-unit>
        <trans-unit id="719583f650cbb51ca93d209fd7733efacca091e6" translate="yes" xml:space="preserve">
          <source>Function to call when the event is emitted.</source>
          <target state="translated">이벤트가 발생할 때 호출하는 함수입니다.</target>
        </trans-unit>
        <trans-unit id="195099197fbc90af0bf8f3534cf2c2ffbe52076f" translate="yes" xml:space="preserve">
          <source>Function which is responsible for resolving or rejecting the newly created promise. The first parameter is a function which resolves the promise, the second parameter is a function which rejects the promise.</source>
          <target state="translated">새로 작성된 약속을 해결하거나 거부하는 기능. 첫 번째 매개 변수는 약속을 해결하는 함수이고 두 번째 매개 변수는 약속을 거부하는 함수입니다.</target>
        </trans-unit>
        <trans-unit id="dbcc17581b648df6a6e5ecca84fd052cd7f998ad" translate="yes" xml:space="preserve">
          <source>Fundamentals in 60 Minutes (video)</source>
          <target state="translated">60 분 후 기본 사항 (비디오)</target>
        </trans-unit>
        <trans-unit id="bafd4b54282745a2bed1442852b73f4b3189a77a" translate="yes" xml:space="preserve">
          <source>Further Reading</source>
          <target state="translated">추가 자료</target>
        </trans-unit>
        <trans-unit id="03be4828bd04065e742a929df12bd3febf535195" translate="yes" xml:space="preserve">
          <source>Future route information.</source>
          <target state="translated">향후 노선 정보.</target>
        </trans-unit>
        <trans-unit id="4f00f495f1b31beea48aec4250e15a8cb8f378e0" translate="yes" xml:space="preserve">
          <source>Games and GUI editors are examples of applications with intensive and tricky DOM manipulation. These kinds of apps are different from CRUD apps, and as a result are probably not a good fit for AngularJS. In these cases it may be better to use a library with a lower level of abstraction, such as &lt;code&gt;jQuery&lt;/code&gt;.</source>
          <target state="translated">게임 및 GUI 편집기는 집중적이고 까다로운 DOM 조작이있는 응용 프로그램의 예입니다. 이러한 종류의 앱은 CRUD 앱과 다르므로 AngularJS에는 적합하지 않을 수 있습니다. 이 경우 &lt;code&gt;jQuery&lt;/code&gt; 와 같이 추상화 수준이 낮은 라이브러리를 사용하는 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="8a754c61c2ced0c5ff79a1827e02c9d643d6d926" translate="yes" xml:space="preserve">
          <source>Gender</source>
          <target state="translated">Gender</target>
        </trans-unit>
        <trans-unit id="022ad2aec8e03d3aeffcc6353469c736894859fc" translate="yes" xml:space="preserve">
          <source>Gender (aka select) Syntax</source>
          <target state="translated">성별 (일명 선택) 구문</target>
        </trans-unit>
        <trans-unit id="9239ee2cda84eca4c3440e2a7b50148af67da3d4" translate="yes" xml:space="preserve">
          <source>General</source>
          <target state="translated">General</target>
        </trans-unit>
        <trans-unit id="37a13a917db9fd6aaad1b1420d262dd85b0845b4" translate="yes" xml:space="preserve">
          <source>General Learning Resources</source>
          <target state="translated">일반 학습 자료</target>
        </trans-unit>
        <trans-unit id="fbfff011ffdaef489b35073be8fbf243896fd8d0" translate="yes" xml:space="preserve">
          <source>General Use</source>
          <target state="translated">일반적인 사용</target>
        </trans-unit>
        <trans-unit id="ed7feb5b4fe5b0b70af5a852a8c4193e523ae7ea" translate="yes" xml:space="preserve">
          <source>General overview of the API</source>
          <target state="translated">API의 일반 개요</target>
        </trans-unit>
        <trans-unit id="098a776c18aed363a9dd217893658630e8cd72e8" translate="yes" xml:space="preserve">
          <source>General usage</source>
          <target state="translated">일반적인 사용법</target>
        </trans-unit>
        <trans-unit id="8245f1469399dc21184c708cfafeb02fe22720e6" translate="yes" xml:space="preserve">
          <source>Get access to a cache object by the &lt;code&gt;cacheId&lt;/code&gt; used when it was created.</source>
          <target state="translated">캐시 오브젝트 가 작성 될 때 사용 된 캐시 &lt;code&gt;cacheId&lt;/code&gt; 로 캐시 오브젝트에 액세스하십시오 .</target>
        </trans-unit>
        <trans-unit id="e2634d2ab675dfb52782612c8c407712d90ab4ae" translate="yes" xml:space="preserve">
          <source>Get information about all the caches that have been created</source>
          <target state="translated">생성 된 모든 캐시에 대한 정보를 얻습니다.</target>
        </trans-unit>
        <trans-unit id="b7660cf3196f07e0a3ec7d200a945203c052a995" translate="yes" xml:space="preserve">
          <source>Getter and setter methods</source>
          <target state="translated">게터와 세터 메소드</target>
        </trans-unit>
        <trans-unit id="9633645141a566c014c4723a2e74a10b5b9548d9" translate="yes" xml:space="preserve">
          <source>Getters (calls to methods without parameters) return decoded values for the following methods &lt;code&gt;path()&lt;/code&gt;, &lt;code&gt;search()&lt;/code&gt;, &lt;code&gt;hash()&lt;/code&gt;.</source>
          <target state="translated">Getter (매개 변수가없는 메서드를 호출)는 다음 메서드 &lt;code&gt;path()&lt;/code&gt; , &lt;code&gt;search()&lt;/code&gt; , &lt;code&gt;hash()&lt;/code&gt; 대한 디코딩 된 값을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="9a0f73ca6aa746ede1e77153dd3bf5bb16e841ab" translate="yes" xml:space="preserve">
          <source>Getting Help</source>
          <target state="translated">도움을 받다</target>
        </trans-unit>
        <trans-unit id="5442e2b64fa09764b9f593867e59a97292c84059" translate="yes" xml:space="preserve">
          <source>GitHub</source>
          <target state="translated">GitHub</target>
        </trans-unit>
        <trans-unit id="125fce7f6e4e46718b4324a9e531f51dac5b5239" translate="yes" xml:space="preserve">
          <source>Gitter</source>
          <target state="translated">Gitter</target>
        </trans-unit>
        <trans-unit id="8f89c3a7b049617c085d0669638c1304642c269d" translate="yes" xml:space="preserve">
          <source>Give your directive the &lt;code&gt;terminal&lt;/code&gt; property and a higher priority than directives that should not be compiled twice. In the example, the compiler will only compile directives which have a priority of 100 or higher.</source>
          <target state="translated">지시문에 &lt;code&gt;terminal&lt;/code&gt; 속성을 지정하고 두 번 컴파일해서는 안되는 지시문보다 우선 순위가 높습니다. 이 예제에서 컴파일러는 우선 순위가 100 이상인 지시문 만 컴파일합니다.</target>
        </trans-unit>
        <trans-unit id="a4944830e9ab64a911c6a61e799488b1d408b662" translate="yes" xml:space="preserve">
          <source>Given a function, the injector can infer the names of the services to inject by examining the function declaration and extracting the parameter names. In the above example, &lt;code&gt;$scope&lt;/code&gt; and &lt;code&gt;greeter&lt;/code&gt; are two services which need to be injected into the function.</source>
          <target state="translated">함수가 주어지면 인젝터는 함수 선언을 검사하고 매개 변수 이름을 추출하여 주입 할 서비스 이름을 유추 할 수 있습니다. 위의 예에서 &lt;code&gt;$scope&lt;/code&gt; 와 &lt;code&gt;greeter&lt;/code&gt; 는 함수에 주입해야하는 두 가지 서비스입니다.</target>
        </trans-unit>
        <trans-unit id="8e22639ca85295c0d8a371689da6f4b5266c177d" translate="yes" xml:space="preserve">
          <source>Given a template &lt;code&gt;/path/:verb&lt;/code&gt; and parameter &lt;code&gt;{verb: 'greet', salutation: 'Hello'}&lt;/code&gt; results in URL &lt;code&gt;/path/greet?salutation=Hello&lt;/code&gt;.</source>
          <target state="translated">템플릿 &lt;code&gt;/path/:verb&lt;/code&gt; 및 매개 변수 &lt;code&gt;{verb: 'greet', salutation: 'Hello'}&lt;/code&gt; 가 URL &lt;code&gt;/path/greet?salutation=Hello&lt;/code&gt; 됩니다.</target>
        </trans-unit>
        <trans-unit id="da53969ab67a277a2236b7677eabc9291e416b28" translate="yes" xml:space="preserve">
          <source>Given an expression that starts with &lt;code&gt;::&lt;/code&gt;, when a digest loop is entered and expression is dirty-checked, store the value as V</source>
          <target state="translated">&lt;code&gt;::&lt;/code&gt; 로 시작하는 표현식이 있으면 다이제스트 루프를 입력하고 표현식을 더티 검사 할 때 값을 V로 저장하십시오.</target>
        </trans-unit>
        <trans-unit id="fd29881d160148e4919339fe869d1ba4998c6ef7" translate="yes" xml:space="preserve">
          <source>Given an object and a security context in which to assign it, returns a value that's safe to use in this context, which was represented by the parameter. To do so, this function either unwraps the safe type it has been given (for instance, a &lt;a href=&quot;%24scedelegate#trustAs.html&quot;&gt;&lt;code&gt;$sceDelegate.trustAs&lt;/code&gt;&lt;/a&gt; result), or it might try to sanitize the value given, depending on the context and sanitizer availablility.</source>
          <target state="translated">오브젝트와 오브젝트를 지정할 보안 컨텍스트가 제공되면이 컨텍스트에서 사용하기에 안전한 값을 리턴합니다.이 값은 매개 변수로 표시됩니다. 이를 위해이 함수는 제공된 안전 유형 (예 : &lt;a href=&quot;%24scedelegate#trustAs.html&quot;&gt; &lt;code&gt;$sceDelegate.trustAs&lt;/code&gt; &lt;/a&gt; 결과)을 풀 거나 컨텍스트 및 소독제 가용성에 따라 주어진 값을 소독하려고 시도 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9a257da8c321c097fe8fe5cc955c19057fa2bffc" translate="yes" xml:space="preserve">
          <source>Given the following error object for our example (which informs us that the field &lt;code&gt;myField&lt;/code&gt; currently has both the &lt;code&gt;required&lt;/code&gt; and &lt;code&gt;email&lt;/code&gt; errors):</source>
          <target state="translated">예제에 다음과 같은 오류 객체가 있습니다 ( &lt;code&gt;myField&lt;/code&gt; 필드에 현재 &lt;code&gt;required&lt;/code&gt; 및 &lt;code&gt;email&lt;/code&gt; 오류 가 있음을 알려줍니다 ).</target>
        </trans-unit>
        <trans-unit id="f9f18e9100167b3cbe391107f9b9896237d584ce" translate="yes" xml:space="preserve">
          <source>Given the nature of &lt;code&gt;ngModelOptions&lt;/code&gt;, the value displayed inside input fields in the view might be different from the value in the actual model. This means that if you update the model you should also invoke &lt;a href=&quot;../type/ngmodel.ngmodelcontroller#%24rollbackViewValue.html&quot;&gt;&lt;code&gt;ngModel.NgModelController&lt;/code&gt;&lt;/a&gt; on the relevant input field in order to make sure it is synchronized with the model and that any debounced action is canceled.</source>
          <target state="translated">&lt;code&gt;ngModelOptions&lt;/code&gt; 의 특성상 보기의 입력 필드에 표시되는 값은 실제 모델의 값과 다를 수 있습니다. 즉, 모델을 업데이트하면 관련 입력 필드에서 &lt;a href=&quot;../type/ngmodel.ngmodelcontroller#%24rollbackViewValue.html&quot;&gt; &lt;code&gt;ngModel.NgModelController&lt;/code&gt; &lt;/a&gt; 를 호출 하여 모델과 동기화되고 디 바운스 된 작업이 취소되었는지 확인해야합니다.</target>
        </trans-unit>
        <trans-unit id="120a32f853f560c1d2bd012c26941580cd618e1e" translate="yes" xml:space="preserve">
          <source>Given this array of items on the $scope:</source>
          <target state="translated">$ scope에 다음과 같은 항목 배열이 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="660a89b0fbdf53826bcc57234ddbd04675201f3d" translate="yes" xml:space="preserve">
          <source>Given this complex combination of CSS classes, styles and options, &lt;code&gt;$animateCss&lt;/code&gt; will figure everything out and make the animation happen.</source>
          <target state="translated">CSS 클래스, 스타일 및 옵션의 복잡한 조합을 고려할 때 &lt;code&gt;$animateCss&lt;/code&gt; 는 모든 것을 파악하고 애니메이션을 발생시킵니다.</target>
        </trans-unit>
        <trans-unit id="f77562ae0f3df5f61f357418891b85a82b5f1b10" translate="yes" xml:space="preserve">
          <source>Google+</source>
          <target state="translated">Google+</target>
        </trans-unit>
        <trans-unit id="99e8c59f379e7741fc044ae1510082583a27eb98" translate="yes" xml:space="preserve">
          <source>Grouping of HTML into reusable components.</source>
          <target state="translated">재사용 가능한 컴포넌트로 HTML 그룹화.</target>
        </trans-unit>
        <trans-unit id="3ba448f1c251a3f30a4894252c910f2f06e1790f" translate="yes" xml:space="preserve">
          <source>Grouping related tests within &lt;code&gt;describe&lt;/code&gt; blocks and describing each individual test within an &lt;code&gt;it&lt;/code&gt; call keeps your tests self documenting.</source>
          <target state="translated">&lt;code&gt;describe&lt;/code&gt; 블록 내에서 관련 테스트를 그룹화 &lt;code&gt;it&lt;/code&gt; 호출 내에서 각 개별 테스트를 설명하면 테스트 자체 문서화가 유지됩니다.</target>
        </trans-unit>
        <trans-unit id="bf073fae640ded81eeb7a4cee70faff4a623c16c" translate="yes" xml:space="preserve">
          <source>Guide</source>
          <target state="translated">Guide</target>
        </trans-unit>
        <trans-unit id="4857fab7166afc1434fd0e5b087340d9d836a21f" translate="yes" xml:space="preserve">
          <source>Guide: Forms</source>
          <target state="translated">안내서 : 양식</target>
        </trans-unit>
        <trans-unit id="082638bfa9b018580d30a942ed8e17ec72bfee8f" translate="yes" xml:space="preserve">
          <source>HTML &lt;code&gt;select&lt;/code&gt; element with AngularJS data-binding.</source>
          <target state="translated">AngularJS 데이터 바인딩이있는 HTML &lt;code&gt;select&lt;/code&gt; 요소</target>
        </trans-unit>
        <trans-unit id="1ed7cdfdbf49bfaa13fce98fe7cec3a1c300e160" translate="yes" xml:space="preserve">
          <source>HTML Compiler</source>
          <target state="translated">HTML 컴파일러</target>
        </trans-unit>
        <trans-unit id="8103e94886ef5d4fe535735e02a17a98d0a0dda5" translate="yes" xml:space="preserve">
          <source>HTML Sanitization</source>
          <target state="translated">HTML 위생</target>
        </trans-unit>
        <trans-unit id="956dfc4aa08de7e5a58a5878e750adab8be1a7a5" translate="yes" xml:space="preserve">
          <source>HTML compilation happens in three phases:</source>
          <target state="translated">HTML 컴파일은 세 단계로 이루어집니다.</target>
        </trans-unit>
        <trans-unit id="365711f3aa530a2399266a71af0d94bbd34fb790" translate="yes" xml:space="preserve">
          <source>HTML compiler</source>
          <target state="translated">HTML 컴파일러</target>
        </trans-unit>
        <trans-unit id="9eb40b7d07d13c87ed32d2291d04e9ac3fc3ab1c" translate="yes" xml:space="preserve">
          <source>HTML has a lot of constructs for formatting the HTML for static documents in a declarative fashion. For example if something needs to be centered, there is no need to provide instructions to the browser how the window size needs to be divided in half so that the center is found, and that this center needs to be aligned with the text's center. Simply add an &lt;code&gt;align=&quot;center&quot;&lt;/code&gt; attribute to any element to achieve the desired behavior. Such is the power of declarative language.</source>
          <target state="translated">HTML에는 정적 문서의 HTML을 선언적인 형식으로 형식화하기위한 많은 구성이 있습니다. 예를 들어, 무언가를 중심에 배치해야하는 경우, 중심을 찾을 수 있도록이 창 크기를 절반으로 나누고이 중심을 텍스트 중심에 정렬해야하는 방법을 브라우저에 지시 할 필요가 없습니다. 원하는 동작을 달성하려면 요소에 &lt;code&gt;align=&quot;center&quot;&lt;/code&gt; 속성을 추가하기 만하면 됩니다. 이것이 선언적 언어의 힘입니다.</target>
        </trans-unit>
        <trans-unit id="bd11a5d2ff3115a84c7177fab98a96885225b6f0" translate="yes" xml:space="preserve">
          <source>HTML input element control. When used together with &lt;a href=&quot;directive/ngmodel&quot;&gt;&lt;code&gt;ngModel&lt;/code&gt;&lt;/a&gt;, it provides data-binding, input state control, and validation. Input control follows HTML5 input types and polyfills the HTML5 validation behavior for older browsers.</source>
          <target state="translated">HTML 입력 요소 컨트롤. &lt;a href=&quot;directive/ngmodel&quot;&gt; &lt;code&gt;ngModel&lt;/code&gt; &lt;/a&gt; 과 함께 사용하면 데이터 바인딩, 입력 상태 제어 및 유효성 검사를 제공합니다. 입력 제어는 HTML5 입력 유형을 따르며 이전 브라우저의 HTML5 유효성 검사 동작을 폴리 필합니다.</target>
        </trans-unit>
        <trans-unit id="75cd325edf2be9c413b3f9e3b95e9fce9dfbe8ca" translate="yes" xml:space="preserve">
          <source>HTML input element control. When used together with &lt;a href=&quot;ngmodel&quot;&gt;&lt;code&gt;ngModel&lt;/code&gt;&lt;/a&gt;, it provides data-binding, input state control, and validation. Input control follows HTML5 input types and polyfills the HTML5 validation behavior for older browsers.</source>
          <target state="translated">HTML 입력 요소 컨트롤. &lt;a href=&quot;ngmodel&quot;&gt; &lt;code&gt;ngModel&lt;/code&gt; &lt;/a&gt; 과 함께 사용하면 데이터 바인딩, 입력 상태 제어 및 유효성 검사를 제공합니다. 입력 제어는 HTML5 입력 유형을 따르며 이전 브라우저의 HTML5 유효성 검사 동작을 폴리 필합니다.</target>
        </trans-unit>
        <trans-unit id="b52ce58ede873fa3ffe8c4f4b95938da98b79e53" translate="yes" xml:space="preserve">
          <source>HTML input.</source>
          <target state="translated">HTML 입력.</target>
        </trans-unit>
        <trans-unit id="3002c557c6e602f4fc52a7ef3b7fe2ffd052cecd" translate="yes" xml:space="preserve">
          <source>HTML link rewriting</source>
          <target state="translated">HTML 링크 재 작성</target>
        </trans-unit>
        <trans-unit id="0e0f1476dcc9c91e2471380aac237c3c16762a4f" translate="yes" xml:space="preserve">
          <source>HTML markup that may:</source>
          <target state="translated">다음과 같은 HTML 마크 업 :</target>
        </trans-unit>
        <trans-unit id="673e4be38003649fd68400ae693d19b8570e48ea" translate="yes" xml:space="preserve">
          <source>HTML string or DOMElement to be wrapped into jQuery.</source>
          <target state="translated">jQuery에 래핑 할 HTML 문자열 또는 DOMElement</target>
        </trans-unit>
        <trans-unit id="28dfba92f8df7dc9094d96723e46d403afe9cf5f" translate="yes" xml:space="preserve">
          <source>HTML textarea element control with AngularJS data-binding. The data-binding and validation properties of this element are exactly the same as those of the &lt;a href=&quot;directive/input&quot;&gt;input element&lt;/a&gt;.</source>
          <target state="translated">AngularJS 데이터 바인딩을 사용한 HTML 텍스트 영역 요소 컨트롤. 이 요소의 데이터 바인딩 및 유효성 검사 속성은 &lt;a href=&quot;directive/input&quot;&gt;입력 요소&lt;/a&gt; 의 속성과 정확히 동일 합니다.</target>
        </trans-unit>
        <trans-unit id="90fae27fbf7cecfb835c5ded77341c01b96b78d4" translate="yes" xml:space="preserve">
          <source>HTML textarea element control with AngularJS data-binding. The data-binding and validation properties of this element are exactly the same as those of the &lt;a href=&quot;input&quot;&gt;input element&lt;/a&gt;.</source>
          <target state="translated">AngularJS 데이터 바인딩을 사용한 HTML 텍스트 영역 요소 컨트롤. 이 요소의 데이터 바인딩 및 유효성 검사 속성은 &lt;a href=&quot;input&quot;&gt;입력 요소&lt;/a&gt; 의 속성과 정확히 동일 합니다.</target>
        </trans-unit>
        <trans-unit id="380dca5d29ff8bcbe21b89ea209d96e274ac2a42" translate="yes" xml:space="preserve">
          <source>HTML with additional markup</source>
          <target state="translated">추가 마크 업이있는 HTML</target>
        </trans-unit>
        <trans-unit id="919928d7bcf7b5802913b51423e1f3fc331681f0" translate="yes" xml:space="preserve">
          <source>HTML5 mode</source>
          <target state="translated">HTML5 모드</target>
        </trans-unit>
        <trans-unit id="147cce8975179e5500fc1bb079891e026beac7f0" translate="yes" xml:space="preserve">
          <source>HTTP Requests</source>
          <target state="translated">HTTP 요청</target>
        </trans-unit>
        <trans-unit id="6e5a031619e754e2aaded2be7edff5361ccb3202" translate="yes" xml:space="preserve">
          <source>HTTP backend used by the &lt;a href=&quot;%24http&quot;&gt;service&lt;/a&gt; that delegates to XMLHttpRequest object or JSONP and deals with browser incompatibilities.</source>
          <target state="translated">XMLHttpRequest 객체 또는 JSONP에 위임하고 브라우저 비 호환성을 처리 하는 &lt;a href=&quot;%24http&quot;&gt;서비스에서&lt;/a&gt; 사용하는 HTTP 백엔드 .</target>
        </trans-unit>
        <trans-unit id="0843ce217fdeb5d4a43dd425f0f9a5e92422e97d" translate="yes" xml:space="preserve">
          <source>HTTP backend used by the &lt;a href=&quot;service/%24http&quot;&gt;service&lt;/a&gt; that delegates to XMLHttpRequest object or JSONP and deals with browser incompatibilities.</source>
          <target state="translated">XMLHttpRequest 객체 또는 JSONP에 위임하고 브라우저 비 호환성을 처리 하는 &lt;a href=&quot;service/%24http&quot;&gt;서비스에서&lt;/a&gt; 사용하는 HTTP 백엔드 .</target>
        </trans-unit>
        <trans-unit id="11ed26cd0ecb017842889c5368f7817eb65b4c04" translate="yes" xml:space="preserve">
          <source>HTTP headers or function that receives http header object and returns true if the headers match the current definition.</source>
          <target state="translated">HTTP 헤더 오브젝트를 수신하고 헤더가 현재 정의와 일치하면 true를 리턴하는 HTTP 헤더 또는 함수입니다.</target>
        </trans-unit>
        <trans-unit id="e9f0ada937e7482930d25244a71bfc57dc18e31b" translate="yes" xml:space="preserve">
          <source>HTTP headers or function that receives http header object and returns true if the headers match the current expectation.</source>
          <target state="translated">HTTP 헤더 오브젝트를 수신하고 헤더가 현재 예상과 일치하면 true를 리턴하는 HTTP 헤더 또는 함수입니다.</target>
        </trans-unit>
        <trans-unit id="4da8efbb95087f4efaddd53fa5a5d02998d8073e" translate="yes" xml:space="preserve">
          <source>HTTP headers.</source>
          <target state="translated">HTTP 헤더</target>
        </trans-unit>
        <trans-unit id="69dcbdcaea66e534100430f491b74862af6545a6" translate="yes" xml:space="preserve">
          <source>HTTP method of the request (GET, POST, PUT, ..)</source>
          <target state="translated">요청의 HTTP 메소드 (GET, POST, PUT, ..)</target>
        </trans-unit>
        <trans-unit id="e7f701abbb4892632f63163af61f703f4d792e54" translate="yes" xml:space="preserve">
          <source>HTTP method.</source>
          <target state="translated">HTTP 메소드.</target>
        </trans-unit>
        <trans-unit id="739b34082ae180864afd2da55be339a290e09a21" translate="yes" xml:space="preserve">
          <source>HTTP request body or function that receives data string and returns true if the data is as expected, or Object if request body is in JSON format.</source>
          <target state="translated">데이터 문자열을 수신하고 데이터가 예상 한 경우 true를 리턴하는 HTTP 요청 본문 또는 함수, 요청 본문이 JSON 형식 인 경우 Object를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="d86c6c3cef60e8657176cf9663c203f4df35ae7e" translate="yes" xml:space="preserve">
          <source>HTTP request body or function that receives data string and returns true if the data is as expected.</source>
          <target state="translated">데이터 문자열을 수신하고 데이터가 예상 한 경우 true를 리턴하는 HTTP 요청 본문 또는 함수입니다.</target>
        </trans-unit>
        <trans-unit id="b3becea06d0acfa7255eb772d6dcbbb225cf0343" translate="yes" xml:space="preserve">
          <source>HTTP url or function that receives a url and returns true if the url matches the current definition.</source>
          <target state="translated">URL을 수신하고 URL이 현재 정의와 일치하면 true를 리턴하는 HTTP URL 또는 함수입니다.</target>
        </trans-unit>
        <trans-unit id="f52106e31df4471f850e4bc7609166aea45564e9" translate="yes" xml:space="preserve">
          <source>HTTP url or function that receives a url and returns true if the url matches the current expectation.</source>
          <target state="translated">URL을 수신하고 URL이 현재 예상과 일치하면 true를 반환하는 HTTP URL 또는 함수입니다.</target>
        </trans-unit>
        <trans-unit id="99507adf96330288819643c1bf1b9641131bf84a" translate="yes" xml:space="preserve">
          <source>HTTP url or function that receives an url and returns true if the url matches the current expectation.</source>
          <target state="translated">URL을 수신하고 URL이 현재 예상과 일치하면 true를 반환하는 HTTP URL 또는 함수입니다.</target>
        </trans-unit>
        <trans-unit id="ce3a987c846205d185fc2edc4fe91e7d5c5a336c" translate="yes" xml:space="preserve">
          <source>HTTP url string that supports colon param matching.</source>
          <target state="translated">콜론 매개 변수 일치를 지원하는 HTTP URL 문자열.</target>
        </trans-unit>
        <trans-unit id="f9d5d6116a9799462a571a9c71dd9f844beb5ac1" translate="yes" xml:space="preserve">
          <source>Hash with custom settings that should extend the default &lt;code&gt;$resourceProvider&lt;/code&gt; behavior. The supported options are:</source>
          <target state="translated">기본 &lt;code&gt;$resourceProvider&lt;/code&gt; 동작을 확장해야하는 사용자 지정 설정으로 해시합니다 . 지원되는 옵션은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="23feba264c938cd5a816b433a94ce03d183ea1f6" translate="yes" xml:space="preserve">
          <source>Hash with declaration of custom actions that will be available in addition to the default set of resource actions (see below). If a custom action has the same key as a default action (e.g. &lt;code&gt;save&lt;/code&gt;), then the default action will be &lt;em&gt;overwritten&lt;/em&gt;, and not extended.</source>
          <target state="translated">기본 자원 조치 세트 (아래 참조) 외에 사용 가능한 사용자 정의 조치 선언이있는 해시. 사용자 정의 조치가 기본 조치와 동일한 키를 가진 경우 (예 : &lt;code&gt;save&lt;/code&gt; ) 기본 조치는 &lt;em&gt;겹쳐 쓰여지고&lt;/em&gt; 확장되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="cfaff8179045261bcc9e2cdcac0ab24460c6b352" translate="yes" xml:space="preserve">
          <source>Hashbang and HTML5 Modes</source>
          <target state="translated">해시 방 및 HTML5 모드</target>
        </trans-unit>
        <trans-unit id="1b0dd8a962c1421c7d52d29272d65b7f22a06a41" translate="yes" xml:space="preserve">
          <source>Hashbang mode</source>
          <target state="translated">해시 방 모드</target>
        </trans-unit>
        <trans-unit id="152790ca6a4f5a814b879804ca53c1db52354436" translate="yes" xml:space="preserve">
          <source>Hashbang mode (default mode)</source>
          <target state="translated">해시 방 모드 (기본 모드)</target>
        </trans-unit>
        <trans-unit id="dc65de69cf1204a0d8f6a65f23b5cbdc59c7f6f2" translate="yes" xml:space="preserve">
          <source>Helper directive that makes it possible to create control groups inside a &lt;a href=&quot;directive/form&quot;&gt;&lt;code&gt;form&lt;/code&gt;&lt;/a&gt; directive. These &quot;child forms&quot; can be used, for example, to determine the validity of a sub-group of controls.</source>
          <target state="translated">&lt;a href=&quot;directive/form&quot;&gt; &lt;code&gt;form&lt;/code&gt; &lt;/a&gt; 지시문 내에 제어 그룹을 작성할 수있게하는 헬퍼 지시문 . 이러한 &quot;자식&quot;은 예를 들어 하위 그룹의 컨트롤의 유효성을 결정하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="15d728397a26dc6b863f20082f5868fb493c86c9" translate="yes" xml:space="preserve">
          <source>Helper directive that makes it possible to create control groups inside a &lt;a href=&quot;form&quot;&gt;&lt;code&gt;form&lt;/code&gt;&lt;/a&gt; directive. These &quot;child forms&quot; can be used, for example, to determine the validity of a sub-group of controls.</source>
          <target state="translated">&lt;a href=&quot;form&quot;&gt; &lt;code&gt;form&lt;/code&gt; &lt;/a&gt; 지시문 내에 제어 그룹을 작성할 수있게하는 헬퍼 지시문 . 이러한 &quot;자식&quot;은 예를 들어 하위 그룹의 컨트롤의 유효성을 결정하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="eace3f9f2323bbf0fc546742d11cd0621ca25ee4" translate="yes" xml:space="preserve">
          <source>Here a some examples of creating constants:</source>
          <target state="translated">다음은 상수를 만드는 몇 가지 예입니다.</target>
        </trans-unit>
        <trans-unit id="5e4c893051b4707f0e5b1249e7e81bc432fd4fb1" translate="yes" xml:space="preserve">
          <source>Here are a few examples of how you would usually define components:</source>
          <target state="translated">다음은 일반적으로 컴포넌트를 정의하는 방법에 대한 몇 가지 예입니다.</target>
        </trans-unit>
        <trans-unit id="22cfeeec8cbcab5dc8c92c408c3caa8cfedfcb3d" translate="yes" xml:space="preserve">
          <source>Here are some examples of creating value services.</source>
          <target state="translated">다음은 가치 서비스를 만드는 몇 가지 예입니다.</target>
        </trans-unit>
        <trans-unit id="2572f0dbd83dbe653e314f42e4e17d11e1e31488" translate="yes" xml:space="preserve">
          <source>Here is a directive which makes any element draggable. Notice the &lt;code&gt;draggable&lt;/code&gt; attribute on the &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; element.</source>
          <target state="translated">다음은 요소를 드래그 할 수있게하는 지시문입니다. &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; 요소 에서 &lt;code&gt;draggable&lt;/code&gt; 속성을 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="62a4417e4f911e91ec77edfd2357c79ffed4f432" translate="yes" xml:space="preserve">
          <source>Here is a simple form for editing user contact information. Adding, removing, clearing, and greeting are methods declared on the controller (see source tab). These methods can easily be called from the AngularJS markup. Any changes to the data are automatically reflected in the View without the need for a manual update.</source>
          <target state="translated">다음은 사용자 연락처 정보를 편집하기위한 간단한 양식입니다. 추가, 제거, 지우기 및 인사말은 컨트롤러에서 선언 된 방법입니다 (소스 탭 참조). 이러한 메소드는 AngularJS 마크 업에서 쉽게 호출 할 수 있습니다. 데이터를 변경하면 수동 업데이트없이 View에 자동으로 반영됩니다.</target>
        </trans-unit>
        <trans-unit id="34352a17a8a9151e3590aa194b3aa02094f7b560" translate="yes" xml:space="preserve">
          <source>Here is a tab pane example built from components:</source>
          <target state="translated">다음은 컴포넌트로 작성된 탭 분할 창 예제입니다.</target>
        </trans-unit>
        <trans-unit id="1d069503fae353633f357af5e3a2b89070c3ed31" translate="yes" xml:space="preserve">
          <source>Here is an example of a simple test:</source>
          <target state="translated">다음은 간단한 테스트의 예입니다.</target>
        </trans-unit>
        <trans-unit id="50474d9c5b7e0f79dfee63bb5d1c04123879a0cc" translate="yes" xml:space="preserve">
          <source>Here is an example of loading a bundle of modules, with a utility method called &lt;code&gt;getScript&lt;/code&gt;:</source>
          <target state="translated">다음은 &lt;code&gt;getScript&lt;/code&gt; 라는 유틸리티 메소드를 사용하여 모듈 번들을로드하는 예입니다 .</target>
        </trans-unit>
        <trans-unit id="5880ff63c8f632463ae878d297d5b56bfbfbdc24" translate="yes" xml:space="preserve">
          <source>Here is an example of manually initializing AngularJS:</source>
          <target state="translated">다음은 AngularJS를 수동으로 초기화하는 예입니다.</target>
        </trans-unit>
        <trans-unit id="8c04abad1ef15232b7d33e41e2d2c33485dde663" translate="yes" xml:space="preserve">
          <source>Here is an example of registering a service</source>
          <target state="translated">다음은 서비스 등록 예입니다</target>
        </trans-unit>
        <trans-unit id="5e759d842c3481da215b710834ed2ca1a95f87df" translate="yes" xml:space="preserve">
          <source>Here is an example of registering a service using &lt;a href=&quot;%24provide#service.html&quot;&gt;$provide.service(class)&lt;/a&gt;.</source>
          <target state="translated">다음은 &lt;a href=&quot;%24provide#service.html&quot;&gt;$ provide.service (class)를&lt;/a&gt; 사용하여 서비스를 등록하는 예입니다 .</target>
        </trans-unit>
        <trans-unit id="1a29f24b6a2342f727b445e40478dc68dee15260" translate="yes" xml:space="preserve">
          <source>Here is an example of using the injector service:</source>
          <target state="translated">인젝터 서비스를 사용하는 예는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="c6658c30a573eda1a06af398c5b3162bb3669f48" translate="yes" xml:space="preserve">
          <source>Here is an example of what the template definition for the &lt;code&gt;dialog&lt;/code&gt; widget may look like.</source>
          <target state="translated">다음은 &lt;code&gt;dialog&lt;/code&gt; 위젯에 대한 템플리트 정의의 모양 예입니다.</target>
        </trans-unit>
        <trans-unit id="efb89522d8e99553f459d6f83b6cca9501f43b08" translate="yes" xml:space="preserve">
          <source>Here is the explanation of how the &lt;code&gt;Hello world&lt;/code&gt; example achieves the data-binding effect when the user enters text into the text field.</source>
          <target state="translated">다음은 사용자가 텍스트 필드에 텍스트를 입력 할 때 &lt;code&gt;Hello world&lt;/code&gt; 예제가 데이터 바인딩 효과를 얻는 방법에 대한 설명입니다 .</target>
        </trans-unit>
        <trans-unit id="dddbe54fb40a9da471f8ece2fdb9b87dab4acbf1" translate="yes" xml:space="preserve">
          <source>Here is what a secure configuration for this scenario might look like:</source>
          <target state="translated">이 시나리오의 보안 구성은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="e3c1dfdb750e0373bfa4303b6efe8294d9bfd88d" translate="yes" xml:space="preserve">
          <source>Here we decorate the &lt;a href=&quot;../../ng/service/%24log&quot;&gt;$log&lt;/a&gt; service to convert warnings to errors by intercepting calls to &lt;a href=&quot;../../ng/service/%24log#error.html&quot;&gt;$log.warn()&lt;/a&gt;.</source>
          <target state="translated">여기서는 &lt;a href=&quot;../../ng/service/%24log&quot;&gt;$ log&lt;/a&gt; 서비스를 장식하여 &lt;a href=&quot;../../ng/service/%24log#error.html&quot;&gt;$ log.warn ()을&lt;/a&gt; 호출하여 경고를 오류로 변환 합니다.</target>
        </trans-unit>
        <trans-unit id="e815a124520499322845f10059e60c7b540cfceb" translate="yes" xml:space="preserve">
          <source>Here we pass an array whose elements consist of a list of strings (the names of the dependencies) followed by the function itself.</source>
          <target state="translated">여기서 우리는 요소 자체가 문자열 목록 (종속성 이름)과 그 자체로 구성된 배열을 전달합니다.</target>
        </trans-unit>
        <trans-unit id="68c7479252208403902f6aa1ed6ea1da9bebafb9" translate="yes" xml:space="preserve">
          <source>Here we've seen the main use cases for directives. Each of these samples acts as a good starting point for creating your own directives.</source>
          <target state="translated">다음은 지시문의 주요 사용 사례를 보았습니다. 이러한 각 샘플은 고유 한 지시문을 작성하기위한 좋은 출발점 역할을합니다.</target>
        </trans-unit>
        <trans-unit id="60e05935ab8bb78195f78bcb2800807eccda1fc0" translate="yes" xml:space="preserve">
          <source>Here you can see two &lt;code&gt;$location&lt;/code&gt; instances that show the difference between &lt;strong&gt;Html5 mode&lt;/strong&gt; and &lt;strong&gt;Html5 Fallback mode&lt;/strong&gt;. Note that to simulate different levels of browser support, the &lt;code&gt;$location&lt;/code&gt; instances are connected to a fakeBrowser service, which you don't have to set up in actual projects.</source>
          <target state="translated">여기 에서 &lt;strong&gt;Html5 모드&lt;/strong&gt; 와 &lt;strong&gt;Html5 폴백 모드&lt;/strong&gt; 의 차이점을 보여주는 두 개의 &lt;code&gt;$location&lt;/code&gt; 인스턴스를 볼 수 있습니다 . 서로 다른 수준의 브라우저 지원을 시뮬레이션하기 위해 &lt;code&gt;$location&lt;/code&gt; 인스턴스는 실제 프로젝트에서 설정할 필요가없는 fakeBrowser 서비스에 연결되어 있습니다.&lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="85689592e66dcddab07a025f0a7c7fa876676daf" translate="yes" xml:space="preserve">
          <source>Here's an example directive declared with a Directive Definition Object:</source>
          <target state="translated">Directive Definition Object로 선언 된 예제 지시문은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="98ab52376054b0ae6a09ea8fc36acb184a3cb5d2" translate="yes" xml:space="preserve">
          <source>Here's an example of a binding in a privileged context:</source>
          <target state="translated">권한있는 컨텍스트에서의 바인딩 예는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="bc027285afdb7e2491e24d412648e4821006ff8a" translate="yes" xml:space="preserve">
          <source>Here's an example where you might see flickering:</source>
          <target state="translated">깜박임이 나타날 수있는 예는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="7c311fcba1d54c9fe55032b814cda6cb881db5cd" translate="yes" xml:space="preserve">
          <source>Here, &lt;code&gt;EXPRESSION&lt;/code&gt; is an AngularJS expression that evaluates to the gender of the person that is used to select the message that should be displayed.</source>
          <target state="translated">여기에서 &lt;code&gt;EXPRESSION&lt;/code&gt; 은 표시 할 메시지를 선택하는 데 사용되는 사람의 성별을 평가하는 AngularJS 표현식입니다.</target>
        </trans-unit>
        <trans-unit id="e23108d1c2e1059fd8d1e90bb0a080a1d96f5b9d" translate="yes" xml:space="preserve">
          <source>Here, &lt;code&gt;NUMERIC_EXPRESSION&lt;/code&gt; is an expression that evaluates to a numeric value based on which the displayed message should change based on pluralization rules.</source>
          <target state="translated">여기서 &lt;code&gt;NUMERIC_EXPRESSION&lt;/code&gt; 은 표시된 메시지가 복수 규칙에 따라 변경되어야하는 기준으로 숫자 값으로 평가되는 표현식입니다.</target>
        </trans-unit>
        <trans-unit id="73eb7dfae55511c85ac87046d8ad655d3b07d514" translate="yes" xml:space="preserve">
          <source>History state object that was before it was changed.</source>
          <target state="translated">변경되기 이전의 히스토리 상태 오브젝트.</target>
        </trans-unit>
        <trans-unit id="b5c1c159a3e483ad357e69c27c87a0816f3f5eba" translate="yes" xml:space="preserve">
          <source>Holds the list of modules which the injector will load before the current module is loaded.</source>
          <target state="translated">현재 모듈이로드되기 전에 인젝터가로드 할 모듈 목록을 보유합니다.</target>
        </trans-unit>
        <trans-unit id="c20a5f818418ae5d1d96d68d2a880b61a688edbd" translate="yes" xml:space="preserve">
          <source>How directives are compiled</source>
          <target state="translated">지시어 컴파일 방법</target>
        </trans-unit>
        <trans-unit id="b4be41c74e5a460177988dde73728bedd08a211a" translate="yes" xml:space="preserve">
          <source>How do I use animations in my own directives?</source>
          <target state="translated">내 지시문에서 애니메이션을 어떻게 사용합니까?</target>
        </trans-unit>
        <trans-unit id="683b2a3eb2b6d989ff0fc60d2e062d97e39208a2" translate="yes" xml:space="preserve">
          <source>How does AngularJS support i18n/l10n?</source>
          <target state="translated">AngularJS는 i18n / l10n을 어떻게 지원합니까?</target>
        </trans-unit>
        <trans-unit id="e21860bf37328b97ebb0ddd904694c78e4a7b382" translate="yes" xml:space="preserve">
          <source>How does it work?</source>
          <target state="translated">어떻게 작동합니까?</target>
        </trans-unit>
        <trans-unit id="88ed97b08c81463ee06f53f3b6c1779c600aa1c6" translate="yes" xml:space="preserve">
          <source>How is the element transported?</source>
          <target state="translated">요소는 어떻게 운송됩니까?</target>
        </trans-unit>
        <trans-unit id="8faafbf047891a8907eb94c858a2397c59b48b6b" translate="yes" xml:space="preserve">
          <source>How is the morphing handled?</source>
          <target state="translated">모핑은 어떻게 처리됩니까?</target>
        </trans-unit>
        <trans-unit id="f0b1fc1ac088c2160c01191d7d56a0bae6f8e3aa" translate="yes" xml:space="preserve">
          <source>How text and attribute bindings work</source>
          <target state="translated">텍스트 및 속성 바인딩 작동 방식</target>
        </trans-unit>
        <trans-unit id="6348c07b83ad0bb6dae1ec6cd1b77c21662b9a62" translate="yes" xml:space="preserve">
          <source>How the Options are handled</source>
          <target state="translated">옵션 처리 방법</target>
        </trans-unit>
        <trans-unit id="2a6cb3a378b1a04b05ce40f114a5850c30af8933" translate="yes" xml:space="preserve">
          <source>How the string representation is computed</source>
          <target state="translated">문자열 표현이 계산되는 방법</target>
        </trans-unit>
        <trans-unit id="4aa425ac030122afe10e7f53638d920844d71819" translate="yes" xml:space="preserve">
          <source>How they work</source>
          <target state="translated">작동 방식</target>
        </trans-unit>
        <trans-unit id="6e13b2dba241833a9f148d24533b2b4f0e74bb53" translate="yes" xml:space="preserve">
          <source>How to (selectively) enable, disable and skip animations</source>
          <target state="translated">애니메이션을 (선택적으로) 활성화, 비활성화 및 건너 뛰는 방법</target>
        </trans-unit>
        <trans-unit id="a25fb8be7987e971198c72036edd9325e925e49a" translate="yes" xml:space="preserve">
          <source>How to benefit from one-time binding</source>
          <target state="translated">일회성 바인딩의 이점</target>
        </trans-unit>
        <trans-unit id="cd8d1af145e22f4071b3803ea34db2257342448d" translate="yes" xml:space="preserve">
          <source>How to use decorators</source>
          <target state="translated">데코레이터 사용법</target>
        </trans-unit>
        <trans-unit id="c2a2f74412612724a85fc7c3904fcb3d54c23855" translate="yes" xml:space="preserve">
          <source>How would you ensure that every place that used these types of bindings was bound to a value that was sanitized by your library (or returned as safe for rendering by your server?) How can you ensure that you didn't accidentally delete the line that sanitized the value, or renamed some properties/fields and forgot to update the binding to the sanitized value?</source>
          <target state="translated">이러한 유형의 바인딩을 사용하는 모든 장소가 라이브러리에 의해 위생 처리 된 값 (또는 서버에서 렌더링하기에 안전한 것으로 리턴 된 값)에 바인드되도록하려면 어떻게해야합니까? 값을 삭제했거나 일부 속성 / 필드의 이름을 바꾸고 삭제 된 값으로 바인딩을 업데이트하는 것을 잊었습니까?</target>
        </trans-unit>
        <trans-unit id="69e8e5e39cfe987166eee61d96837365193ccc8b" translate="yes" xml:space="preserve">
          <source>However &lt;code&gt;isolated&lt;/code&gt; scope creates a new problem: if a transcluded DOM is a child of the widget isolated scope then it will not be able to bind to anything. For this reason the transcluded scope is a child of the original scope, before the widget created an isolated scope for its local variables. This makes the transcluded and widget isolated scope siblings.</source>
          <target state="translated">그러나 &lt;code&gt;isolated&lt;/code&gt; 범위는 새로운 문제를 만듭니다. 만약 포함 된 DOM이 위젯 격리 된 범위의 자식이라면 어떤 것도 바인딩 할 수 없습니다. 이러한 이유로 위젯이 로컬 변수에 대해 분리 된 범위를 작성하기 전에 변환 된 범위는 원래 범위의 하위입니다. 이것은 transcluded 및 widget isolated scope 형제를 만듭니다.</target>
        </trans-unit>
        <trans-unit id="60975c6582a2823450029e613dcd8a25e14ebad5" translate="yes" xml:space="preserve">
          <source>However it's more likely that you'll just use &lt;a href=&quot;../directive/ngapp&quot;&gt;ngApp&lt;/a&gt; or &lt;a href=&quot;angular.bootstrap&quot;&gt;&lt;code&gt;angular.bootstrap&lt;/code&gt;&lt;/a&gt; to simplify this process for you.</source>
          <target state="translated">그러나 &lt;a href=&quot;../directive/ngapp&quot;&gt;ngApp&lt;/a&gt; 또는 &lt;a href=&quot;angular.bootstrap&quot;&gt; &lt;code&gt;angular.bootstrap&lt;/code&gt; &lt;/a&gt; 을 사용하여이 프로세스를 단순화 할 가능성이 높습니다 .</target>
        </trans-unit>
        <trans-unit id="999f598a92635af8c6759e6c95a25535ddb1aa15" translate="yes" xml:space="preserve">
          <source>However this method will not work with JavaScript minifiers/obfuscators because of how they rename parameters.</source>
          <target state="translated">그러나이 방법은 매개 변수의 이름을 바꾸는 방식 때문에 JavaScript 축소 기 / 난독 처리기와 함께 작동하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="74b78a2717429ba3b6055f58ec7371c056ceb4fc" translate="yes" xml:space="preserve">
          <source>However, &lt;a href=&quot;https://developer.mozilla.org/docs/Web/Web_Components/Using_custom_elements&quot;&gt;custom elements&lt;/a&gt; often use custom properties to hold data, and &lt;code&gt;ngProp&lt;/code&gt; can be used to provide input to these custom elements.</source>
          <target state="translated">그러나 &lt;a href=&quot;https://developer.mozilla.org/docs/Web/Web_Components/Using_custom_elements&quot;&gt;사용자 정의 요소는&lt;/a&gt; 종종 사용자 정의 특성을 사용하여 데이터를 보유하며 &lt;code&gt;ngProp&lt;/code&gt; 을 사용하여 이러한 사용자 정의 요소에 입력을 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9ef1218d8c362088f0bcdd7920f20b4f50be4419" translate="yes" xml:space="preserve">
          <source>However, if the method is used programmatically, for example by adding dynamically created controls, or controls that have been previously removed without destroying their corresponding DOM element, it's the developers responsibility to make sure the current state propagates to the parent form.</source>
          <target state="translated">그러나 동적으로 생성 된 컨트롤 또는 해당 DOM 요소를 손상시키지 않고 이전에 제거 된 컨트롤을 추가하는 등의 방법으로 프로그래밍 방식으로 사용되는 경우 현재 상태가 부모 폼으로 전파되도록하는 것은 개발자의 책임입니다.</target>
        </trans-unit>
        <trans-unit id="7833f0d3d950db315e3b6d2099d681792715c7c0" translate="yes" xml:space="preserve">
          <source>However, including generic messages may not be useful enough to match all input fields, therefore, &lt;code&gt;ngMessages&lt;/code&gt; provides the ability to override messages defined in the remote template by redefining them within the directive container.</source>
          <target state="translated">그러나 일반 메시지를 포함하면 모든 입력 필드를 일치시키기에 충분히 유용하지 않을 수 있으므로 &lt;code&gt;ngMessages&lt;/code&gt; 는 지시문 컨테이너 내에서 메시지를 재정 의하여 원격 템플릿에 정의 된 메시지를 재정의하는 기능을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="877ce4a445ea5e831a4f4c27b0f0efa155233b3c" translate="yes" xml:space="preserve">
          <source>However, the declarative language is also limited, as it does not allow you to teach the browser new syntax. For example, there is no easy way to get the browser to align the text at 1/3 the position instead of 1/2. What is needed is a way to teach the browser new HTML syntax.</source>
          <target state="translated">그러나, 선언 언어는 브라우저에 새로운 구문을 가르 칠 수 없기 때문에 제한적입니다. 예를 들어, 브라우저가 텍스트를 1/2 대신 1/3 위치에 맞추도록하는 쉬운 방법은 없습니다. 브라우저에 새로운 HTML 구문을 가르치는 방법이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="3c9c0adee926699e18a27b00b88771ce6b3e9fc7" translate="yes" xml:space="preserve">
          <source>However, the more traditional CommonJS-style usage is still available, and documented below.</source>
          <target state="translated">그러나보다 일반적인 CommonJS 스타일 사용법은 여전히 ​​사용 가능하며 아래에 문서화되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="00996f9232afaff711c6ebfe08928b5cfb6f6845" translate="yes" xml:space="preserve">
          <source>However, there are a few limitations compared to array iteration:</source>
          <target state="translated">그러나 배열 반복과 비교하여 몇 가지 제한 사항이 있습니다.</target>
        </trans-unit>
        <trans-unit id="9641eba78bfe582ed3a2749197725f94c33dd851" translate="yes" xml:space="preserve">
          <source>Html-linkified and &lt;a href=&quot;../service/%24sanitize&quot;&gt;sanitized&lt;/a&gt; text.</source>
          <target state="translated">HTML 연결 및 &lt;a href=&quot;../service/%24sanitize&quot;&gt;위생 처리 된&lt;/a&gt; 텍스트</target>
        </trans-unit>
        <trans-unit id="c65236654eb6a81fbfab2170b0857f54bfc87642" translate="yes" xml:space="preserve">
          <source>I'm in a hurry. How do I get a Hello World module working?</source>
          <target state="translated">나는 서둘러 해요. Hello World 모듈을 작동 시키려면 어떻게합니까?</target>
        </trans-unit>
        <trans-unit id="28163d85350de7d518abda78cb07443850692d4d" translate="yes" xml:space="preserve">
          <source>I.e. &lt;code&gt;ng-model-options=&quot;{ debounce: 500 }&quot;&lt;/code&gt; will wait for half a second since the last content change before triggering the model update and form validation.</source>
          <target state="translated">즉, &lt;code&gt;ng-model-options=&quot;{ debounce: 500 }&quot;&lt;/code&gt; 은 마지막 업데이트 이후 0.5 초 동안 기다렸다가 모델 업데이트 및 양식 유효성 검사를 시작합니다.</target>
        </trans-unit>
        <trans-unit id="9ede6c3f478034a42df63b47c4dc0ad321990f8a" translate="yes" xml:space="preserve">
          <source>I.e. &lt;code&gt;ng-model-options=&quot;{ updateOn: 'default blur' }&quot;&lt;/code&gt;</source>
          <target state="translated">즉 &lt;code&gt;ng-model-options=&quot;{ updateOn: 'default blur' }&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4129e8cbc1ebb2a2fb072b2b3daaef96575a5cc8" translate="yes" xml:space="preserve">
          <source>I.e. &lt;code&gt;ng-model-options=&quot;{ updateOn: 'default blur', debounce: { default: 500, blur: 0 } }&quot;&lt;/code&gt;</source>
          <target state="translated">즉 &lt;code&gt;ng-model-options=&quot;{ updateOn: 'default blur', debounce: { default: 500, blur: 0 } }&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a68fa8efe4a09d8c0c63ae60426d9366434bccb2" translate="yes" xml:space="preserve">
          <source>IRC</source>
          <target state="translated">IRC</target>
        </trans-unit>
        <trans-unit id="d7b1a1f2be81b4fe52f63eaaeeb40a859c845e0f" translate="yes" xml:space="preserve">
          <source>Id for the &lt;code&gt;value&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; ID입니다 .</target>
        </trans-unit>
        <trans-unit id="ec130e4d2cb91fe9bf063ea20a216bdcc71a84d6" translate="yes" xml:space="preserve">
          <source>Id of the key-value pair to delete.</source>
          <target state="translated">삭제할 키-값 쌍의 ID입니다.</target>
        </trans-unit>
        <trans-unit id="7db857bacad045bd1f61b8fda21770e9d10e3b24" translate="yes" xml:space="preserve">
          <source>Id to use for lookup.</source>
          <target state="translated">조회에 사용할 ID입니다.</target>
        </trans-unit>
        <trans-unit id="4f2fb5d7f9da16cbc1d14fa704825b095fc9c79b" translate="yes" xml:space="preserve">
          <source>Identifier name for a reference to the controller in the directive's scope. This allows the controller to be referenced from the directive template. This is especially useful when a directive is used as component, i.e. with an &lt;code&gt;isolate&lt;/code&gt; scope. It's also possible to use it in a directive without an &lt;code&gt;isolate&lt;/code&gt; / &lt;code&gt;new&lt;/code&gt; scope, but you need to be aware that the &lt;code&gt;controllerAs&lt;/code&gt; reference might overwrite a property that already exists on the parent scope.</source>
          <target state="translated">지시문 범위에서 컨트롤러에 대한 참조의 식별자 이름입니다. 이를 통해 지시문 템플릿에서 컨트롤러를 참조 할 수 있습니다. 이것은 지시어가 구성 요소로 사용될 때, 즉 &lt;code&gt;isolate&lt;/code&gt; 범위 와 함께 특히 유용합니다 . &lt;code&gt;isolate&lt;/code&gt; / &lt;code&gt;new&lt;/code&gt; 범위 없이 지시문에서 사용할 수도 있지만 &lt;code&gt;controllerAs&lt;/code&gt; 참조가 부모 범위에 이미 존재하는 속성을 덮어 쓸 수 있음을 알고 있어야합니다 .</target>
        </trans-unit>
        <trans-unit id="79983926c885cfae871f9f76c7c14c825447c715" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;mode.rewriteLinks&lt;/code&gt; is set to &lt;code&gt;false&lt;/code&gt; in the &lt;code&gt;mode&lt;/code&gt; configuration object passed to &lt;code&gt;$locationProvider.html5Mode()&lt;/code&gt;, the browser will perform a full page reload for every link. &lt;code&gt;mode.rewriteLinks&lt;/code&gt; can also be set to a string, which will enable link rewriting only on anchor elements that have the given attribute.</source>
          <target state="translated">경우 &lt;code&gt;mode.rewriteLinks&lt;/code&gt; 가 설정되어 &lt;code&gt;false&lt;/code&gt; 의 &lt;code&gt;mode&lt;/code&gt; 에 전달 구성 개체 &lt;code&gt;$locationProvider.html5Mode()&lt;/code&gt; , 브라우저는 모든 링크에 대한 전체 페이지를 다시로드를 수행합니다. &lt;code&gt;mode.rewriteLinks&lt;/code&gt; 는 문자열로 설정 될 수 있으며, 주어진 속성을 가진 앵커 요소에서만 링크 재 작성이 가능합니다.</target>
        </trans-unit>
        <trans-unit id="613bfcabdb198dcf4290d1a13f26a43dcfef57c7" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;ng-click&lt;/code&gt; or &lt;code&gt;ng-dblclick&lt;/code&gt; is encountered, ngAria will add &lt;code&gt;tabindex=&quot;0&quot;&lt;/code&gt; to any element not in a node blacklist: &lt;em&gt; Button &lt;/em&gt; Anchor &lt;em&gt; Input &lt;/em&gt; Textarea &lt;em&gt; Select &lt;/em&gt; Details/Summary To fix widespread accessibility problems with &lt;code&gt;ng-click&lt;/code&gt; on &lt;code&gt;div&lt;/code&gt; elements, ngAria will dynamically bind a keypress event by default as long as the element isn't in the node blacklist. You can turn this functionality on or off with the &lt;code&gt;bindKeypress&lt;/code&gt; configuration option. ngAria will also add the &lt;code&gt;button&lt;/code&gt; role to communicate to users of assistive technologies. This can be disabled with the &lt;code&gt;bindRoleForClick&lt;/code&gt; configuration option. For &lt;code&gt;ng-dblclick&lt;/code&gt;, you must still manually add &lt;code&gt;ng-keypress&lt;/code&gt; and a role to non-interactive elements such as &lt;code&gt;div&lt;/code&gt; or &lt;code&gt;taco-button&lt;/code&gt; to enable keyboard access.</source>
          <target state="translated">경우 &lt;code&gt;ng-click&lt;/code&gt; 또는 &lt;code&gt;ng-dblclick&lt;/code&gt; 발생, ngAria 추가됩니다 &lt;code&gt;tabindex=&quot;0&quot;&lt;/code&gt; 이 아닌 노드 블랙리스트의 모든 요소 : &lt;em&gt;버튼&lt;/em&gt; 앵커 &lt;em&gt;입력&lt;/em&gt; 텍스트 영역 &lt;em&gt;을 선택&lt;/em&gt; 세부 사항 / 요약과 광범위한 접근성 문제를 해결하려면 &lt;code&gt;ng-click&lt;/code&gt; 에 &lt;code&gt;div&lt;/code&gt; 요소 ngAria을 요소가 노드 블랙리스트에없는 한 기본적으로 키 누르기 이벤트를 동적으로 바인딩합니다. &lt;code&gt;bindKeypress&lt;/code&gt; 구성 옵션을 사용하여이 기능을 켜거나 끌 수 있습니다 . 또한 ngAria는 보조 기술 사용자에게 알리는 &lt;code&gt;button&lt;/code&gt; 역할 도 추가 할 것 입니다. 이 기능은 &lt;code&gt;bindRoleForClick&lt;/code&gt; 구성 옵션. 들어 &lt;code&gt;ng-dblclick&lt;/code&gt; , 당신은 수동으로 추가해야합니다 &lt;code&gt;ng-keypress&lt;/code&gt; 와 같은 비 대화 형 요소에 역할 &lt;code&gt;div&lt;/code&gt; 또는 &lt;code&gt;taco-button&lt;/code&gt; 키보드 액세스를 가능하게합니다.</target>
        </trans-unit>
        <trans-unit id="c95cf37a17f0d52871a2a1d59d4540b01148df2b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;ngTrim&lt;/code&gt; is set to &lt;code&gt;&quot;false&quot;&lt;/code&gt; then whitespace around both the separator and each list item is respected. This implies that the user of the directive is responsible for dealing with whitespace but also allows you to use whitespace as a delimiter, such as a tab or newline character.</source>
          <target state="translated">경우 &lt;code&gt;ngTrim&lt;/code&gt; 가 설정되는 &lt;code&gt;&quot;false&quot;&lt;/code&gt; 후 세퍼레이터와 각 목록 항목 존중 모두 주위의 공백. 이는 지시문의 사용자가 공백을 처리 할 책임이 있지만 탭이나 줄 바꿈 문자와 같은 구분 기호로 공백을 사용할 수도 있음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="0829e8f931b8f25cd2b158be8e0b6def23ee7c6e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;paramValue&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, the property specified via the first argument will be deleted.</source>
          <target state="translated">&lt;code&gt;paramValue&lt;/code&gt; 가 &lt;code&gt;null&lt;/code&gt; 인 경우 첫 번째 인수를 통해 지정된 속성이 삭제됩니다.</target>
        </trans-unit>
        <trans-unit id="5e5b3c116b7e282c2308f6ef1608442867791f58" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;paramValue&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, the property specified via the first argument will be added with no value nor trailing equal sign.</source>
          <target state="translated">&lt;code&gt;paramValue&lt;/code&gt; 가 &lt;code&gt;true&lt;/code&gt; 인 경우 첫 번째 인수를 통해 지정된 속성은 값이나 후행 등호없이 추가됩니다.</target>
        </trans-unit>
        <trans-unit id="5f8a14370aff7380ce331b7293fef1918515ff58" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;paramValue&lt;/code&gt; is an array, it will override the property of the &lt;code&gt;search&lt;/code&gt; component of &lt;code&gt;$location&lt;/code&gt; specified via the first argument.</source>
          <target state="translated">경우 &lt;code&gt;paramValue&lt;/code&gt; 이 배열은, 그것의 재산보다 우선합니다 &lt;code&gt;search&lt;/code&gt; 의 구성 요소 &lt;code&gt;$location&lt;/code&gt; 첫 번째 인수를 통해 지정합니다.</target>
        </trans-unit>
        <trans-unit id="743650dbdbf5002c9eecb5f7379f1f0d2090bf89" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;redirectTo&lt;/code&gt; is a function, it will be called with the following parameters:</source>
          <target state="translated">경우 &lt;code&gt;redirectTo&lt;/code&gt; 이 기능은, 그것은 다음과 같은 매개 변수로 호출됩니다 :</target>
        </trans-unit>
        <trans-unit id="777d9335c56dfe211081978a0fbb3906b4202502" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;search&lt;/code&gt; is a string or number, then &lt;code&gt;paramValue&lt;/code&gt; will override only a single search property.</source>
          <target state="translated">경우 &lt;code&gt;search&lt;/code&gt; 문자열이나 숫자가, 다음 &lt;code&gt;paramValue&lt;/code&gt; 는 단 하나의 검색 속성을 재정의합니다.</target>
        </trans-unit>
        <trans-unit id="8201c46ffa0db4f644f5e56359950eb7fb2a8045" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;source&lt;/code&gt; is identical to &lt;code&gt;destination&lt;/code&gt; an exception will be thrown.</source>
          <target state="translated">경우 &lt;code&gt;source&lt;/code&gt; 동일 &lt;code&gt;destination&lt;/code&gt; 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="8ed2725402e420ab1c414cd2715251710a33f8e1" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;source&lt;/code&gt; is not an object or array (inc. &lt;code&gt;null&lt;/code&gt; and &lt;code&gt;undefined&lt;/code&gt;), &lt;code&gt;source&lt;/code&gt; is returned.</source>
          <target state="translated">&lt;code&gt;source&lt;/code&gt; 가 객체 또는 배열이 아닌 경우 ( &lt;code&gt;null&lt;/code&gt; 및 &lt;code&gt;undefined&lt;/code&gt; 포함 ) &lt;code&gt;source&lt;/code&gt; 가 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="a624c93008a0a64091b974be67c1370e20df5fd0" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;template&lt;/code&gt; is a function, it will be called with the following parameters:</source>
          <target state="translated">경우 &lt;code&gt;template&lt;/code&gt; 기능은, 그것은 다음과 같은 매개 변수로 호출됩니다 :</target>
        </trans-unit>
        <trans-unit id="9f1b3360d3b66afd04318f5feac73437fb4929da" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;template&lt;/code&gt; is a function, then it is &lt;a href=&quot;../../auto/service/%24injector#invoke.html&quot;&gt;injected&lt;/a&gt; with the following locals:</source>
          <target state="translated">경우 &lt;code&gt;template&lt;/code&gt; 함수이며, 다음이되어 &lt;a href=&quot;../../auto/service/%24injector#invoke.html&quot;&gt;주입&lt;/a&gt; 다음의 주민들과 :</target>
        </trans-unit>
        <trans-unit id="b743c62930c10b8e90047d6d33a622a656d9a6ba" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;templateUrl&lt;/code&gt; is a function, it will be called with the following parameters:</source>
          <target state="translated">경우 &lt;code&gt;templateUrl&lt;/code&gt; 이 기능은, 그것은 다음과 같은 매개 변수로 호출됩니다 :</target>
        </trans-unit>
        <trans-unit id="33c8b5674d0af42566982cc240093a252e34747e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;templateUrl&lt;/code&gt; is a function, then it is &lt;a href=&quot;../../auto/service/%24injector#invoke.html&quot;&gt;injected&lt;/a&gt; with the following locals:</source>
          <target state="translated">경우 &lt;code&gt;templateUrl&lt;/code&gt; 이 함수이며, 다음이되어 &lt;a href=&quot;../../auto/service/%24injector#invoke.html&quot;&gt;주입&lt;/a&gt; 다음의 주민들과 :</target>
        </trans-unit>
        <trans-unit id="72f42dc0c99690482b2dac1ed67fcce01c622d32" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;true&lt;/code&gt;, reverse the sorting order.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 인 경우 정렬 순서를 반대로 바꿉니다.</target>
        </trans-unit>
        <trans-unit id="e5e1755ef85cb15eebe562cc36b63807bafca0ca" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;window.name&lt;/code&gt; contains prefix &lt;code&gt;NG_DEFER_BOOTSTRAP!&lt;/code&gt; when &lt;a href=&quot;../api/ng/function/angular.bootstrap&quot;&gt;&lt;code&gt;angular.bootstrap&lt;/code&gt;&lt;/a&gt; is called, the bootstrap process will be paused until &lt;code&gt;angular.resumeBootstrap()&lt;/code&gt; is called.</source>
          <target state="translated">&lt;code&gt;window.name&lt;/code&gt; 에 접두사 &lt;code&gt;NG_DEFER_BOOTSTRAP!&lt;/code&gt; 가 포함 된 경우 ! 경우 &lt;a href=&quot;../api/ng/function/angular.bootstrap&quot;&gt; &lt;code&gt;angular.bootstrap&lt;/code&gt; 가&lt;/a&gt; 호출되면, 부트 스트랩 프로세스가 일시 중지 될 때까지 &lt;code&gt;angular.resumeBootstrap()&lt;/code&gt; 불린다.</target>
        </trans-unit>
        <trans-unit id="a7fff279b5c9622029c122de3c8da07fa6ebeda1" translate="yes" xml:space="preserve">
          <source>If V is not undefined, mark the result of the expression as stable and schedule a task to deregister the watch for this expression when we exit the digest loop</source>
          <target state="translated">V가 정의되지 않은 경우 표현식 결과를 안정적으로 표시하고 다이제스트 루프를 종료 할 때이 표현식에 대한 시계의 등록을 취소하는 작업을 예약하십시오.</target>
        </trans-unit>
        <trans-unit id="345464413875ecc47aaed72ea3eeb05292b2706f" translate="yes" xml:space="preserve">
          <source>If XSRF prefix is detected, strip it (see &lt;a href=&quot;../service/%24http#security-considerations.html&quot;&gt;Security Considerations in the $http docs&lt;/a&gt;).</source>
          <target state="translated">XSRF 접두사가 감지되면 제거하십시오 ( &lt;a href=&quot;../service/%24http#security-considerations.html&quot;&gt;$ http 문서의 보안 고려 사항&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="99e0d1f20619d41f43e4adbe88a0fc055defdf60" translate="yes" xml:space="preserve">
          <source>If XSRF prefix is detected, strip it (see Security Considerations section below).</source>
          <target state="translated">XSRF 접두사가 감지되면 제거하십시오 (아래 보안 고려 사항 섹션 참조).</target>
        </trans-unit>
        <trans-unit id="52b7eeb7ca086390168cbaa4c3ea07248c32233b" translate="yes" xml:space="preserve">
          <source>If a custom comparator still can't distinguish between two items, then they will be sorted based on their index using the built-in comparator.</source>
          <target state="translated">사용자 지정 비교기가 여전히 두 항목을 구별 할 수없는 경우 내장 비교기를 사용하여 색인을 기준으로 정렬됩니다.</target>
        </trans-unit>
        <trans-unit id="022ac35ee6ebafd19f7c4c717fbf1ccf2712e7bc" translate="yes" xml:space="preserve">
          <source>If a destination is provided, all of its elements (for arrays) or properties (for objects) are deleted and then all elements/properties from the source are copied to it.</source>
          <target state="translated">대상이 제공되면 모든 해당 요소 (배열 용) 또는 속성 (객체 용)이 삭제되고 소스의 모든 요소 / 속성이 복사됩니다.</target>
        </trans-unit>
        <trans-unit id="502bbbf8d84c6abdf7c8fd468936fe84d3df6d5a" translate="yes" xml:space="preserve">
          <source>If a form has only one input field then hitting enter in this field triggers form submit (&lt;code&gt;ngSubmit&lt;/code&gt;)</source>
          <target state="translated">양식에 입력 필드가 하나만 있으면이 필드에서 Enter 키를 누르면 양식 제출 ( &lt;code&gt;ngSubmit&lt;/code&gt; )을 트리거합니다.</target>
        </trans-unit>
        <trans-unit id="adb660bb29eb456fd541995beb9da63bcee77be2" translate="yes" xml:space="preserve">
          <source>If a function has an &lt;code&gt;$inject&lt;/code&gt; property and its value is an array of strings, then the strings represent names of services to be injected into the function.</source>
          <target state="translated">함수에 &lt;code&gt;$inject&lt;/code&gt; 속성이 있고 해당 값이 문자열 배열 인 경우 문자열은 함수에 주입 할 서비스 이름을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="cd412985992305562d7e70ff27e4c810956645c3" translate="yes" xml:space="preserve">
          <source>If a module has already been loaded into the injector then it will not be loaded again.</source>
          <target state="translated">모듈이 인젝터에 이미 장착 된 경우 다시로드되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="26dc0654df6e7e0d396bfd5ad28c4b667f98d931" translate="yes" xml:space="preserve">
          <source>If a parent scope is suspended then all its descendants will be also excluded from future digests whether or not they have been suspended themselves. Note that this also applies to isolate child scopes.</source>
          <target state="translated">부모 범위가 일시 중단되면 모든 하위 항목도 자체가 일시 중단되었는지 여부에 따라 향후 다이제스트에서 제외됩니다. 이는 하위 범위를 분리하는데도 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="f325902be8527e0c6ea4b6c889b0905040354cc2" translate="yes" xml:space="preserve">
          <source>If a request didn't match any expectation or if the expectation doesn't have the response defined, the backend definitions are evaluated in sequential order to see if any of them match the request. The response from the first matched definition is returned.</source>
          <target state="translated">요청이 예상과 일치하지 않거나 기대에 응답이 정의되어 있지 않으면 백엔드 정의가 순차적으로 평가되어 요청과 일치하는지 확인합니다. 일치하는 첫 번째 정의의 응답이 리턴됩니다.</target>
        </trans-unit>
        <trans-unit id="0fd04e9e5b96e85cca8613d8294a4a6de3b25a55" translate="yes" xml:space="preserve">
          <source>If a request expectation has no response specified, the algorithm will search your backend definitions for an appropriate response.</source>
          <target state="translated">요청 예상에 응답이 지정되지 않은 경우 알고리즘은 백엔드 정의에서 적절한 응답을 검색합니다.</target>
        </trans-unit>
        <trans-unit id="3c34b3f9a2baeaea1921d5fa87951146f390ffe3" translate="yes" xml:space="preserve">
          <source>If a required controller cannot be found, and it is optional, the instance is &lt;code&gt;null&lt;/code&gt;, otherwise the &lt;a href=&quot;https://code.angularjs.org/1.7.8/docs/api/ng/service/error/%24compile/ctreq&quot;&gt;Missing Required Controller&lt;/a&gt; error is thrown.</source>
          <target state="translated">필요한 컨트롤러를 찾을 수없고 선택적인 경우 인스턴스는 &lt;code&gt;null&lt;/code&gt; 이고, 그렇지 않으면 &lt;a href=&quot;https://code.angularjs.org/1.7.8/docs/api/ng/service/error/%24compile/ctreq&quot;&gt;누락 된 필수 컨트롤러&lt;/a&gt; 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="3062c2d3fcf43cdcf6dc09ea8da967844fcf796b" translate="yes" xml:space="preserve">
          <source>If a service is decorated by both &lt;code&gt;$provide.decorator&lt;/code&gt; and &lt;code&gt;module.decorator&lt;/code&gt;, the decorators are applied in order:</source>
          <target state="translated">서비스가 &lt;code&gt;$provide.decorator&lt;/code&gt; 및 &lt;code&gt;module.decorator&lt;/code&gt; 에 의해 장식 된 경우, 데코레이터는 순서대로 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="8065da6f118dbd267964e5dadd97dd3d9850fb06" translate="yes" xml:space="preserve">
          <source>If a value is specified, returns the $httpProvider for chaining. otherwise, returns the current configured value.</source>
          <target state="translated">값이 지정되면 체인에 대한 $ httpProvider를 반환합니다. 그렇지 않으면 현재 구성된 값을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="1f41bc8f62e166a66fdd0b00ba6f38f10a023aad" translate="yes" xml:space="preserve">
          <source>If an action's configuration specifies that it is cancellable, you can cancel the request related to an instance or collection (as long as it is a result of a &quot;non-instance&quot; call):</source>
          <target state="translated">조치 구성이 취소 가능하도록 지정하면 &quot;인스턴스가 아닌&quot;호출의 결과 인 한 인스턴스 또는 콜렉션과 관련된 요청을 취소 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="cc7cda513ad242dc0410921f7e4d7987e45e3c2b" translate="yes" xml:space="preserve">
          <source>If an attribute with a binding is prefixed with the &lt;code&gt;ngAttr&lt;/code&gt; prefix (denormalized as &lt;code&gt;ng-attr-&lt;/code&gt;) then during the binding it will be applied to the corresponding unprefixed attribute. This allows you to bind to attributes that would otherwise be eagerly processed by browsers (e.g. an SVG element's &lt;code&gt;circle[cx]&lt;/code&gt; attributes). When using &lt;code&gt;ngAttr&lt;/code&gt;, the &lt;code&gt;allOrNothing&lt;/code&gt; flag of &lt;a href=&quot;../api/ng/service/%24interpolate&quot;&gt;$interpolate&lt;/a&gt; is used, so if any expression in the interpolated string results in &lt;code&gt;undefined&lt;/code&gt;, the attribute is removed and not added to the element.</source>
          <target state="translated">바인딩이있는 속성 앞에 &lt;code&gt;ngAttr&lt;/code&gt; 접두사 가 붙으면 ( &lt;code&gt;ng-attr-&lt;/code&gt; 로 비정규 화됨 ) 바인딩 중에 해당 접두사가없는 속성에 적용됩니다. 이를 통해 브라우저에서 열성적으로 처리 할 속성 (예 : SVG 요소의 &lt;code&gt;circle[cx]&lt;/code&gt; 속성) 에 바인딩 할 수 있습니다 . &lt;code&gt;ngAttr&lt;/code&gt; 을 사용할 때 &lt;a href=&quot;../api/ng/service/%24interpolate&quot;&gt;$ interpolate&lt;/a&gt; 의 &lt;code&gt;allOrNothing&lt;/code&gt; 플래그 가 사용되므로 보간 된 문자열의 표현식으로 인해 &lt;code&gt;undefined&lt;/code&gt; 가 발생하면 속성이 제거되고 요소에 추가되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="3c897c9ef737c27fdd08857ed2716fb1b8f4d9a5" translate="yes" xml:space="preserve">
          <source>If an expectation or definition uses a &lt;strong&gt;regex&lt;/strong&gt; to match the URL, you can provide an array of &lt;strong&gt;keys&lt;/strong&gt; via a &lt;code&gt;params&lt;/code&gt; argument. The index of each &lt;strong&gt;key&lt;/strong&gt; in the array will match the index of a &lt;strong&gt;group&lt;/strong&gt; in the &lt;strong&gt;regex&lt;/strong&gt;.</source>
          <target state="translated">기대 또는 정의가 &lt;strong&gt;정규식&lt;/strong&gt; 을 사용 하여 URL과 일치하는 경우 &lt;code&gt;params&lt;/code&gt; 인수 를 통해 &lt;strong&gt;키&lt;/strong&gt; 배열을 제공 할 수 있습니다 . 각각의 인덱스 &lt;strong&gt;키&lt;/strong&gt; 배열은 인덱스 일치 &lt;strong&gt;기를&lt;/strong&gt; 에 &lt;strong&gt;정규식&lt;/strong&gt; .&lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e464595e0a743e0020b60c55e500247b0faf2671" translate="yes" xml:space="preserve">
          <source>If an interceptor object was provided, the promise will instead be resolved with the value returned by the response interceptor (on success) or responceError interceptor (on failure).</source>
          <target state="translated">인터셉터 오브젝트가 제공된 경우, 대신 약속이 응답 인터셉터 (성공) 또는 responceError 인터셉터 (실패)에 의해 리턴 된 값으로 해결됩니다.</target>
        </trans-unit>
        <trans-unit id="7550c3d4cbd675d41d3da8b71e0e2ec2f8a2fd48" translate="yes" xml:space="preserve">
          <source>If any expectation within an &lt;code&gt;it&lt;/code&gt; block fails, the runner marks the &lt;code&gt;it&lt;/code&gt; as &quot;failed&quot; and continues on to the next block.</source>
          <target state="translated">&lt;code&gt;it&lt;/code&gt; 블록 내 예상 이 실패하면 러너는 &lt;code&gt;it&lt;/code&gt; 를 &quot;실패&quot;로 표시 하고 다음 블록으로 계속 진행합니다.</target>
        </trans-unit>
        <trans-unit id="1352dc692bed1cbf1f5076fcaeba257174fe28f2" translate="yes" xml:space="preserve">
          <source>If automatic scrolling is disabled, one must explicitly call &lt;a href=&quot;../service/%24anchorscroll&quot;&gt;$anchorScroll()&lt;/a&gt; in order to scroll to the element related to the current hash.</source>
          <target state="translated">자동 스크롤이 비활성화 된 경우 현재 해시와 관련된 요소로 스크롤하려면 &lt;a href=&quot;../service/%24anchorscroll&quot;&gt;$ anchorScroll ()&lt;/a&gt; 을 명시 적으로 호출해야합니다 .</target>
        </trans-unit>
        <trans-unit id="3b4e24e7eaa2ca32436552a01221de60832d916b" translate="yes" xml:space="preserve">
          <source>If boolean, sets &lt;code&gt;html5Mode.enabled&lt;/code&gt; to value. If object, sets &lt;code&gt;enabled&lt;/code&gt;, &lt;code&gt;requireBase&lt;/code&gt; and &lt;code&gt;rewriteLinks&lt;/code&gt; to respective values. Supported properties:</source>
          <target state="translated">부울 인 경우 &lt;code&gt;html5Mode.enabled&lt;/code&gt; 를 value로 설정 합니다. object 인 경우 &lt;code&gt;enabled&lt;/code&gt; , &lt;code&gt;requireBase&lt;/code&gt; 및 &lt;code&gt;rewriteLinks&lt;/code&gt; 를 해당 값으로 설정합니다. 지원되는 속성 :</target>
        </trans-unit>
        <trans-unit id="7148e4e9bfb3ae0f9035089b0911fcd382c40701" translate="yes" xml:space="preserve">
          <source>If both &lt;code&gt;bindToController&lt;/code&gt; and &lt;code&gt;scope&lt;/code&gt; are defined and have object hashes, &lt;code&gt;bindToController&lt;/code&gt; overrides &lt;code&gt;scope&lt;/code&gt;.</source>
          <target state="translated">두 경우 &lt;code&gt;bindToController&lt;/code&gt; 및 &lt;code&gt;scope&lt;/code&gt; 정의 및 객체의 해시를 가지고 있으며, &lt;code&gt;bindToController&lt;/code&gt; 은 우선 &lt;code&gt;scope&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1cabef013ace4e4c9c00e6712ac1e83f19c28fc9" translate="yes" xml:space="preserve">
          <source>If both values are objects, compare their indices instead.</source>
          <target state="translated">두 값이 모두 객체 인 경우 인덱스를 대신 비교하십시오.</target>
        </trans-unit>
        <trans-unit id="e0f58fb3edabd2bfd4c52120891ecad3c7f08490" translate="yes" xml:space="preserve">
          <source>If both values are of type &lt;code&gt;string&lt;/code&gt;, compare them alphabetically in a case- and locale-insensitive way.</source>
          <target state="translated">두 값이 모두 &lt;code&gt;string&lt;/code&gt; 유형 인 경우 대소 문자를 구분하지 않고 대소 문자를 구분하지 않고 알파벳순으로 비교하십시오.</target>
        </trans-unit>
        <trans-unit id="a3acd0c125665e994f5cc5d87ff32bae58ae7519" translate="yes" xml:space="preserve">
          <source>If caching is enabled, but neither the default cache nor config.cache are set to a cache object, then the default &lt;code&gt;$cacheFactory(&quot;$http&quot;)&lt;/code&gt; object is used.</source>
          <target state="translated">캐싱이 사용 가능하지만 기본 캐시 또는 config.cache가 캐시 오브젝트로 설정되지 않은 경우 기본 &lt;code&gt;$cacheFactory(&quot;$http&quot;)&lt;/code&gt; 오브젝트가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="6be3243cff2b9606141e7d8a8288624cc35fdc41" translate="yes" xml:space="preserve">
          <source>If called with a function then it's considered to be the controller constructor function. Otherwise it's considered to be a string which is used to retrieve the controller constructor using the following steps:</source>
          <target state="translated">함수와 함께 호출되면 컨트롤러 생성자 함수로 간주됩니다. 그렇지 않으면 다음 단계를 사용하여 컨트롤러 생성자를 검색하는 데 사용되는 문자열로 간주됩니다.</target>
        </trans-unit>
        <trans-unit id="eca4a0606f2e890d1b99bf344fe5c04e4c526a90" translate="yes" xml:space="preserve">
          <source>If called with no arguments returns the parsed &lt;code&gt;search&lt;/code&gt; object. If called with one or more arguments returns &lt;code&gt;$location&lt;/code&gt; object itself.</source>
          <target state="translated">인수없이 호출하면 구문 분석 된 &lt;code&gt;search&lt;/code&gt; 객체가 반환 됩니다. 하나 이상의 인수로 호출하면 &lt;code&gt;$location&lt;/code&gt; 객체 자체를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="c24fb87cdf6ae1778bbb557cc0ff10b76544fa3c" translate="yes" xml:space="preserve">
          <source>If called, all changes to $location during the current &lt;code&gt;$digest&lt;/code&gt; will replace the current history record, instead of adding a new one.</source>
          <target state="translated">호출되면, 현재 &lt;code&gt;$digest&lt;/code&gt; 동안 $ location에 대한 모든 변경 사항 은 새 기록 레코드를 추가하는 대신 현재 기록 레코드를 대체합니다.</target>
        </trans-unit>
        <trans-unit id="b025c8c144cafc2941eab97705006674236a7463" translate="yes" xml:space="preserve">
          <source>If custom triggers are used, custom debouncing timeouts can be set for each event using an object in &lt;code&gt;debounce&lt;/code&gt;. This can be useful to force immediate updates on some specific circumstances (like blur events).</source>
          <target state="translated">사용자 지정 트리거가 사용되는 경우 &lt;code&gt;debounce&lt;/code&gt; 의 객체를 사용하여 각 이벤트에 대해 사용자 지정 수신 거부 시간 초과를 설정할 수 있습니다 . 이 기능은 특정 상황 (예 : 흐림 이벤트)에서 즉시 업데이트하도록하는 데 유용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="50eecbd017e410f336fd4a83ba00bd8c53ebc392" translate="yes" xml:space="preserve">
          <source>If for example we wanted to create animations for &lt;code&gt;leave&lt;/code&gt; and &lt;code&gt;move&lt;/code&gt; (ngRepeat triggers move) then we can do so using the same CSS naming conventions:</source>
          <target state="translated">예를 들어 &lt;code&gt;leave&lt;/code&gt; 및 &lt;code&gt;move&lt;/code&gt; (ngRepeat 트리거 이동)에 대한 애니메이션을 만들려 는 경우 동일한 CSS 명명 규칙을 사용하여 만들 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="107509b3211b546d6aa398c5cd00116593d484cf" translate="yes" xml:space="preserve">
          <source>If it is necessary to reference the controller or any functions bound to the controller from the template, you can use the option &lt;code&gt;controllerAs&lt;/code&gt; to specify the name of the controller as an alias. The directive needs to define a scope for this configuration to be used. This is particularly useful in the case when the directive is used as a component.</source>
          <target state="translated">제어기 또는 템플리트에서 제어기에 바인드 된 기능을 참조해야하는 경우, controllerAs 옵션을 사용하여 &lt;code&gt;controllerAs&lt;/code&gt; 이름을 별명으로 지정할 수 있습니다. 지시문은이 구성이 사용될 범위를 정의해야합니다. 이것은 지시문이 구성 요소로 사용되는 경우에 특히 유용합니다.</target>
        </trans-unit>
        <trans-unit id="9a307e66a98c3ebe2ff88b0c79288c8c10c4b570" translate="yes" xml:space="preserve">
          <source>If jQuery is available, &lt;code&gt;angular.element&lt;/code&gt; is an alias for the &lt;a href=&quot;http://api.jquery.com/jQuery/&quot;&gt;jQuery&lt;/a&gt; function. If jQuery is not available, &lt;code&gt;angular.element&lt;/code&gt; delegates to AngularJS's built-in subset of jQuery, called &quot;jQuery lite&quot; or &lt;strong&gt;jqLite&lt;/strong&gt;.</source>
          <target state="translated">jQuery를 사용할 수있는 경우 &lt;code&gt;angular.element&lt;/code&gt; 는 &lt;a href=&quot;http://api.jquery.com/jQuery/&quot;&gt;jQuery&lt;/a&gt; 함수 의 별명입니다 . jQuery를 사용할 수없는 경우 &lt;code&gt;angular.element&lt;/code&gt; 는 &quot;jQuery lite&quot;또는 &lt;strong&gt;jqLite&lt;/strong&gt; 라는 AngularJS의 내장 jQuery 서브 세트에 위임합니다 .</target>
        </trans-unit>
        <trans-unit id="c701fc2f8dc85147ea98151e5bf3322bcac3aaee" translate="yes" xml:space="preserve">
          <source>If multiple controllers are required, the &lt;code&gt;require&lt;/code&gt; option of the directive can take an array argument. The corresponding parameter being sent to the &lt;code&gt;link&lt;/code&gt; function will also be an array.</source>
          <target state="translated">여러 제어기가 필요한 경우 지시문 의 &lt;code&gt;require&lt;/code&gt; 옵션은 배열 인수를 사용할 수 있습니다. &lt;code&gt;link&lt;/code&gt; 함수 로 전송되는 해당 매개 변수 도 배열입니다.</target>
        </trans-unit>
        <trans-unit id="9131087c07a27ae54bb5cb150194e99e5b9ded60" translate="yes" xml:space="preserve">
          <source>If multiple identical requests are made using the same cache, which is not yet populated, one request will be made to the server and remaining requests will return the same response.</source>
          <target state="translated">아직 채워지지 않은 동일한 캐시를 사용하여 여러 개의 동일한 요청이 이루어진 경우 하나의 요청이 서버에 작성되고 나머지 요청은 동일한 응답을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="5099fba28286973badadf5e09f2c704804e0e9a4" translate="yes" xml:space="preserve">
          <source>If no &lt;code&gt;templateNamespace&lt;/code&gt; is specified, then the namespace is considered to be &lt;code&gt;html&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;templateNamespace&lt;/code&gt; 를 지정 하지 않으면 네임 스페이스는 &lt;code&gt;html&lt;/code&gt; 로 간주됩니다 .</target>
        </trans-unit>
        <trans-unit id="565e32b222f018c04759a0915c1eafd46c68d0e3" translate="yes" xml:space="preserve">
          <source>If no delay is specified, it uses a delay such that all currently pending tasks are flushed.</source>
          <target state="translated">지연을 지정하지 않으면 현재 보류중인 모든 작업이 플러시되도록 지연을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="a343b02429ad2a626c45c677fe2309fc8eb6e9af" translate="yes" xml:space="preserve">
          <source>If no destination is supplied, a copy of the object or array is created.</source>
          <target state="translated">대상이 제공되지 않으면 객체 또는 배열의 사본이 작성됩니다.</target>
        </trans-unit>
        <trans-unit id="613c17fb4d65c58a50bf306d9be2b19d42f72bd3" translate="yes" xml:space="preserve">
          <source>If no rule is defined for a category, then an empty string is displayed and a warning is generated. Note that some locales define more categories than &lt;code&gt;one&lt;/code&gt; and &lt;code&gt;other&lt;/code&gt;. For example, fr-fr defines &lt;code&gt;few&lt;/code&gt; and &lt;code&gt;many&lt;/code&gt;.</source>
          <target state="translated">범주에 대해 규칙이 정의되어 있지 않으면 빈 문자열이 표시되고 경고가 생성됩니다. 일부 로케일은보다 더 많은 카테고리를 정의하는 것이 주 &lt;code&gt;one&lt;/code&gt; 와 &lt;code&gt;other&lt;/code&gt; . 예를 들어 fr-fr은 &lt;code&gt;few&lt;/code&gt; 및 &lt;code&gt;many&lt;/code&gt; 정의합니다 .</target>
        </trans-unit>
        <trans-unit id="68fc3fa08dbab4451ff79de79c9fc1a49cba71b3" translate="yes" xml:space="preserve">
          <source>If one of the values is undefined, consider it &quot;greater than&quot; the other.</source>
          <target state="translated">값 중 하나가 정의되지 않은 경우 다른 값보다 &quot;더 큰&quot;것으로 간주하십시오.</target>
        </trans-unit>
        <trans-unit id="be847ed107cfee41deb9115ce6a8c35e338521f0" translate="yes" xml:space="preserve">
          <source>If one wants to modify a camelcased attribute (SVG elements have valid camelcased attributes), such as &lt;code&gt;viewBox&lt;/code&gt; on the &lt;code&gt;svg&lt;/code&gt; element, one can use underscores to denote that the attribute to bind to is naturally camelcased.</source>
          <target state="translated">하나 같은 (SVG 요소가 유효 낙타 표기법 속성이)가 낙타 표기법 특성을 수정하고자하는 경우 &lt;code&gt;viewBox&lt;/code&gt; 를 ON &lt;code&gt;svg&lt;/code&gt; 요소, 하나는 바인딩의 속성이 자연스럽게 낙타 표기법되는 것을 표시하기 위해 밑줄을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fa3a550f7e49feb35b5c38e18a628e43579977d7" translate="yes" xml:space="preserve">
          <source>If our animation code class-based (meaning that something like &lt;code&gt;ngClass&lt;/code&gt;, &lt;code&gt;ngHide&lt;/code&gt; and &lt;code&gt;ngShow&lt;/code&gt; triggers it) then we can still define our animations inside of the same registered animation, however, the function input arguments are a bit different:</source>
          <target state="translated">우리의 애니메이션 코드 클래스 기반 경우 (같은 뭔가 의미 &lt;code&gt;ngClass&lt;/code&gt; , &lt;code&gt;ngHide&lt;/code&gt; 및 &lt;code&gt;ngShow&lt;/code&gt; 우리는 여전히 같은 등록 애니메이션의 내부에 우리의 애니메이션을 정의 할 수 있습니다 트리거를) 그러나, 함수 입력 인수는 비트 다릅니다 :</target>
        </trans-unit>
        <trans-unit id="3929b62e0e7741d149c634de5223054eef38f614" translate="yes" xml:space="preserve">
          <source>If provided, then enables/disables SCE application-wide.</source>
          <target state="translated">제공된 경우 SCE 응용 프로그램 전체를 활성화 / 비활성화합니다.</target>
        </trans-unit>
        <trans-unit id="420de9532a9310bd61b98d99b3e5431883df58a7" translate="yes" xml:space="preserve">
          <source>If provided, update the internal &lt;code&gt;eagerInstantiationEnabled&lt;/code&gt; flag.</source>
          <target state="translated">제공된 경우 내부 &lt;code&gt;eagerInstantiationEnabled&lt;/code&gt; 플래그를 업데이트하십시오 .</target>
        </trans-unit>
        <trans-unit id="f6c236207f5e15b8cfb41e7366e363e30acf5b95" translate="yes" xml:space="preserve">
          <source>If set to &lt;code&gt;false&lt;/code&gt; skips model dirty checking, otherwise will invoke &lt;code&gt;fn&lt;/code&gt; within the &lt;a href=&quot;../../ng/type/%24rootscope.scope#%24apply.html&quot;&gt;$apply&lt;/a&gt; block.</source>
          <target state="translated">&lt;code&gt;false&lt;/code&gt; 로 설정하면 모델 더티 검사를 건너 뛰고, 그렇지 않으면 &lt;a href=&quot;../../ng/type/%24rootscope.scope#%24apply.html&quot;&gt;$ apply&lt;/a&gt; 블록 내에서 &lt;code&gt;fn&lt;/code&gt; 을 호출 합니다.</target>
        </trans-unit>
        <trans-unit id="35a5cf1a0eea8e136f5c4728cf9e80e86d58aa15" translate="yes" xml:space="preserve">
          <source>If set to &lt;code&gt;false&lt;/code&gt; skips model dirty checking, otherwise will invoke &lt;code&gt;fn&lt;/code&gt; within the &lt;a href=&quot;../type/%24rootscope.scope#%24apply.html&quot;&gt;$apply&lt;/a&gt; block.</source>
          <target state="translated">&lt;code&gt;false&lt;/code&gt; 로 설정하면 모델 더티 검사를 건너 뛰고, 그렇지 않으면 &lt;a href=&quot;../type/%24rootscope.scope#%24apply.html&quot;&gt;$ apply&lt;/a&gt; 블록 내에서 &lt;code&gt;fn&lt;/code&gt; 을 호출 합니다.</target>
        </trans-unit>
        <trans-unit id="6d79cbe97b0cba018fd80c72312c2caecd191843" translate="yes" xml:space="preserve">
          <source>If set to false AngularJS will not automatically trim the input.</source>
          <target state="translated">false로 설정하면 AngularJS가 입력을 자동으로 자르지 않습니다.</target>
        </trans-unit>
        <trans-unit id="99f750122c635a9c79ac25ba8a258a265ea9d70d" translate="yes" xml:space="preserve">
          <source>If set to false AngularJS will not automatically trim the input. This parameter is ignored for input[type=password] controls, which will never trim the input.</source>
          <target state="translated">false로 설정하면 AngularJS가 입력을 자동으로 자르지 않습니다. 이 매개 변수는 input [type = password] 컨트롤에 대해 무시되며 입력을 자르지 않습니다.</target>
        </trans-unit>
        <trans-unit id="d365bd222f8aac61ea4ce4cf5f583497a646e6c8" translate="yes" xml:space="preserve">
          <source>If set to true then the current &lt;code&gt;priority&lt;/code&gt; will be the last set of directives which will execute (any directives at the current priority will still execute as the order of execution on same &lt;code&gt;priority&lt;/code&gt; is undefined). Note that expressions and other directives used in the directive's template will also be excluded from execution.</source>
          <target state="translated">true로 설정하면 현재 &lt;code&gt;priority&lt;/code&gt; 는 실행될 마지막 지시문 세트입니다 (현재 우선 순위의 지시문은 동일한 &lt;code&gt;priority&lt;/code&gt; 의 실행 순서 가 정의되지 않은 상태 로 계속 실행 됨 ). 지시문 템플릿에 사용 된 표현식 및 기타 지시문도 실행에서 제외됩니다.</target>
        </trans-unit>
        <trans-unit id="8198e6aef6aaac2f45ebacc8a1aa2d4b63f0fc33" translate="yes" xml:space="preserve">
          <source>If set to true, the JSON output will contain newlines and whitespace. If set to an integer, the JSON output will contain that many spaces per indentation.</source>
          <target state="translated">true로 설정하면 JSON 출력에 줄 바꿈 및 공백이 포함됩니다. 정수로 설정하면 JSON 출력에 들여 쓰기 당 많은 공간이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="cd63bbd500f85b0aa9f3f57a50ef372022a6763d" translate="yes" xml:space="preserve">
          <source>If set, specifies a vertical scroll-offset. This is often useful when there are fixed positioned elements at the top of the page, such as navbars, headers etc.</source>
          <target state="translated">설정된 경우 세로 스크롤 오프셋을 지정합니다. 이 기능은 페이지 상단에 네비게이션 바, 헤더 등 고정 된 위치에있는 요소가있을 때 유용합니다.</target>
        </trans-unit>
        <trans-unit id="fe6333e8f42c68100e28d8d911a3367f20054d75" translate="yes" xml:space="preserve">
          <source>If specified then new module is being created. If unspecified then the module is being retrieved for further configuration.</source>
          <target state="translated">지정된 경우 새 모듈이 작성됩니다. 지정되지 않은 경우 추가 구성을 위해 모듈을 검색합니다.</target>
        </trans-unit>
        <trans-unit id="27aeb59cad0b804c6ef2d86a1dfa615624970c38" translate="yes" xml:space="preserve">
          <source>If that is the case, the compiler adds an interpolateDirective to the node and registers &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24watch.html&quot;&gt;watches&lt;/a&gt; on the computed interpolation function, which will update the corresponding text nodes or attribute values as part of the normal &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24digest.html&quot;&gt;digest&lt;/a&gt; cycle.</source>
          <target state="translated">이 경우 컴파일러는 interpolateDirective를 노드에 추가 하고 계산 된 보간 함수에 &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24watch.html&quot;&gt;시계&lt;/a&gt; 를 등록 합니다.이 함수는 해당 텍스트 노드 또는 속성 값을 일반 &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24digest.html&quot;&gt;다이제스트&lt;/a&gt; 주기의 일부로 업데이트합니다 .</target>
        </trans-unit>
        <trans-unit id="06ebcf108a89a946fe69e686a9111125f0f020a4" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;../../../guide/expression&quot;&gt;expression&lt;/a&gt; is falsy then the element is removed from the DOM tree. If it is truthy a copy of the compiled element is added to the DOM tree.</source>
          <target state="translated">는 IF &lt;a href=&quot;../../../guide/expression&quot;&gt;식&lt;/a&gt; falsy입니다 다음 요소는 DOM 트리에서 제거됩니다. 사실이라면 컴파일 된 요소의 사본이 DOM 트리에 추가됩니다.</target>
        </trans-unit>
        <trans-unit id="92018ed26fa3598f627e4578ebf49a3b9ed44b1b" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;../../../guide/expression&quot;&gt;expression&lt;/a&gt; is truthy, then special attribute &quot;open&quot; will be set on the element</source>
          <target state="translated">는 IF &lt;a href=&quot;../../../guide/expression&quot;&gt;식&lt;/a&gt; truthy이며, 다음 특별한 속성 &quot;개방&quot;이 요소에 설정됩니다</target>
        </trans-unit>
        <trans-unit id="431632c12958fee7c8e13e21d996c9067cd8b138" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;../../../guide/expression&quot;&gt;expression&lt;/a&gt; is truthy, then special attribute &quot;readonly&quot; will be set on the element</source>
          <target state="translated">는 IF &lt;a href=&quot;../../../guide/expression&quot;&gt;표현은&lt;/a&gt; 다음 특별한 속성이 &quot;읽기 전용&quot;요소에 설정됩니다 truthy입니다</target>
        </trans-unit>
        <trans-unit id="705b7850ed3cc932f2a8560a14e97c372e2c1a26" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;../../../guide/expression&quot;&gt;expression&lt;/a&gt; is truthy, then special attribute &quot;selected&quot; will be set on the element</source>
          <target state="translated">는 IF &lt;a href=&quot;../../../guide/expression&quot;&gt;식&lt;/a&gt; truthy이며, 다음 특별한 속성은 &quot;선택&quot;요소에 설정됩니다</target>
        </trans-unit>
        <trans-unit id="a2e2565ac63611a2ee4218e5debd4028869e44fa" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;../../../guide/expression&quot;&gt;expression&lt;/a&gt; is truthy, then the &lt;code&gt;checked&lt;/code&gt; attribute will be set on the element</source>
          <target state="translated">는 IF &lt;a href=&quot;../../../guide/expression&quot;&gt;식&lt;/a&gt; truthy입니다 후 &lt;code&gt;checked&lt;/code&gt; 속성은 요소에 설정됩니다</target>
        </trans-unit>
        <trans-unit id="0fa6eb7b7fd73a6c228cab8613440b5f26fe154c" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;../../../guide/expression&quot;&gt;expression&lt;/a&gt; is truthy, then the &lt;code&gt;disabled&lt;/code&gt; attribute will be set on the element</source>
          <target state="translated">는 IF &lt;a href=&quot;../../../guide/expression&quot;&gt;식&lt;/a&gt; truthy이며, 다음 &lt;code&gt;disabled&lt;/code&gt; 속성은 요소에 설정됩니다</target>
        </trans-unit>
        <trans-unit id="c8f2e6672bb03dd7bddaac75918cc6f50c5be88c" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;../../../guide/expression&quot;&gt;expression&lt;/a&gt; is truthy/falsy then the element is hidden/shown respectively.</source>
          <target state="translated">는 IF &lt;a href=&quot;../../../guide/expression&quot;&gt;표현은&lt;/a&gt; truthy / falsy 다음 요소가 숨겨져 / 각각 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="1328e9d07bc981d3a2f225632334634a909a47c7" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;../../../guide/expression&quot;&gt;expression&lt;/a&gt; is truthy/falsy then the element is shown/hidden respectively.</source>
          <target state="translated">는 IF &lt;a href=&quot;../../../guide/expression&quot;&gt;표현은&lt;/a&gt; truthy / falsy 다음 요소는 각각 숨김 / 표시이다.</target>
        </trans-unit>
        <trans-unit id="57f738c91082e8b25cb1fa3c8475f9812310ab4e" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;Content-Type&lt;/code&gt; is &lt;code&gt;application/json&lt;/code&gt; or the response looks like JSON, deserialize it using a JSON parser.</source>
          <target state="translated">는 IF &lt;code&gt;Content-Type&lt;/code&gt; 있습니다 &lt;code&gt;application/json&lt;/code&gt; 또는 JSON과 같은 응답 외모가하는 JSON 파서를 사용하여 직렬화.</target>
        </trans-unit>
        <trans-unit id="569213aa4cfaa4bcb8cb504d5cc5158f580f2ef7" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;data&lt;/code&gt; property of the request configuration object contains an object, serialize it into JSON format.</source>
          <target state="translated">요청 구성 객체 의 &lt;code&gt;data&lt;/code&gt; 속성에 객체가 포함 된 경우 JSON 형식으로 직렬화하십시오.</target>
        </trans-unit>
        <trans-unit id="a575ef21797e38c6a9636004fb3da88ae0f427fb" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;name&lt;/code&gt; attribute is specified, the form controller is published onto the current scope under this name.</source>
          <target state="translated">경우] &lt;code&gt;name&lt;/code&gt; 속성이 지정 폼 컨트롤러이 이름으로 현재 범위에 게시된다.</target>
        </trans-unit>
        <trans-unit id="26b0e12a78f6677dac08ad73f6c6c9206d29a49b" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;ngAnimate&lt;/code&gt; module is active within the application then the &lt;code&gt;ngMessages&lt;/code&gt;, &lt;code&gt;ngMessage&lt;/code&gt; and &lt;code&gt;ngMessageExp&lt;/code&gt; directives will trigger animations whenever any messages are added and removed from the DOM by the &lt;code&gt;ngMessages&lt;/code&gt; directive.</source>
          <target state="translated">경우] &lt;code&gt;ngAnimate&lt;/code&gt; 의 모듈은 상기 애플리케이션 내에서 활성화 후 &lt;code&gt;ngMessages&lt;/code&gt; 는 , &lt;code&gt;ngMessage&lt;/code&gt; 및 &lt;code&gt;ngMessageExp&lt;/code&gt; 지시자는 메시지에 추가되고하여 DOM에서 제거 될 때마다 트리거 애니메이션 &lt;code&gt;ngMessages&lt;/code&gt; 의 지시자.</target>
        </trans-unit>
        <trans-unit id="7620b6d1e4671d235ceba2b3eb50bbc8af56dbac" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;require&lt;/code&gt; property is an object and &lt;code&gt;bindToController&lt;/code&gt; is truthy, then the required controllers are bound to the controller using the keys of the &lt;code&gt;require&lt;/code&gt; property. This binding occurs after all the controllers have been constructed but before &lt;code&gt;$onInit&lt;/code&gt; is called. If the name of the required controller is the same as the local name (the key), the name can be omitted. For example, &lt;code&gt;{parentDir: '^^'}&lt;/code&gt; is equivalent to &lt;code&gt;{parentDir: '^^parentDir'}&lt;/code&gt;. See the &lt;a href=&quot;../provider/%24compileprovider#component.html&quot;&gt;&lt;code&gt;$compileProvider&lt;/code&gt;&lt;/a&gt; helper for an example of how this can be used. If no such required directive(s) can be found, or if the directive does not have a controller, then an error is raised (unless no link function is specified and the required controllers are not being bound to the directive controller, in which case error checking is skipped). The name can be prefixed with:</source>
          <target state="translated">(가) 경우 &lt;code&gt;require&lt;/code&gt; 속성이 객체이며, &lt;code&gt;bindToController&lt;/code&gt; 이 truthy이며, 다음 필요한 컨트롤러는이의 키를 사용하여 컨트롤러에 바인딩 &lt;code&gt;require&lt;/code&gt; 속성을. 이 바인딩은 모든 컨트롤러가 구성된 후 &lt;code&gt;$onInit&lt;/code&gt; 가 호출 되기 전에 발생합니다 . 필요한 컨트롤러 이름이 로컬 이름 (키)과 동일하면 이름을 생략 할 수 있습니다. 예를 들어 &lt;code&gt;{parentDir: '^^'}&lt;/code&gt; 은 &lt;code&gt;{parentDir: '^^parentDir'}&lt;/code&gt; . &lt;a href=&quot;../provider/%24compileprovider#component.html&quot;&gt; &lt;code&gt;$compileProvider&lt;/code&gt; &lt;/a&gt; 참조이것이 어떻게 사용될 수 있는지의 예를위한 도우미. 이러한 필수 지시문을 찾을 수 없거나 지시문에 제어기가없는 경우 링크 기능이 지정되지 않고 필수 제어기가 지시문 제어기에 바인드되지 않는 한 오류가 발생합니다. 오류 검사를 건너 뜁니다). 이름 앞에 접두사를 붙일 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="e9084553ff9f6768e27df6a51cf00d07607970ba" translate="yes" xml:space="preserve">
          <source>If the argument is a hash object containing an array of values, these values will be encoded as duplicate search parameters in the URL.</source>
          <target state="translated">인수가 값 배열을 포함하는 해시 객체 인 경우 이러한 값은 URL에서 중복 검색 매개 변수로 인코딩됩니다.</target>
        </trans-unit>
        <trans-unit id="bcb61a9e955126eaa26ea942a4627e94e63e44a6" translate="yes" xml:space="preserve">
          <source>If the compared values are of different types:</source>
          <target state="translated">비교 된 값이 다른 유형 인 경우 :</target>
        </trans-unit>
        <trans-unit id="a6ebb8e7acaaad05ba88ba630bbcf4bb474a27c9" translate="yes" xml:space="preserve">
          <source>If the compiler finds that an element matches a directive, then the directive is added to the list of directives that match the DOM element. A single element may match multiple directives.</source>
          <target state="translated">컴파일러가 요소가 지시문과 일치하는 것을 발견하면 지시문이 DOM 요소와 일치하는 지시문 목록에 추가됩니다. 단일 요소는 여러 지시문과 일치 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="dba304c82bd0b93a1d184175d2e32a6154fed02c" translate="yes" xml:space="preserve">
          <source>If the controller has been attached using the &lt;code&gt;controller as&lt;/code&gt; syntax then the controller instance will be assigned to a property on the scope.</source>
          <target state="translated">&lt;code&gt;controller as&lt;/code&gt; 구문 으로 사용하여 컨트롤러를 연결 한 경우 컨트롤러 인스턴스는 범위의 속성에 할당됩니다.</target>
        </trans-unit>
        <trans-unit id="6cd88d003715e1438f37dc2797bc52968605194f" translate="yes" xml:space="preserve">
          <source>If the directive is using 'element' transclusion, the compiler will actually remove the directive's entire element from the DOM and replace it with a comment node. The compiler then inserts the directive's template &quot;after&quot; this comment node, as a sibling.</source>
          <target state="translated">지시문이 'element'변환을 사용하는 경우 컴파일러는 실제로 지시문의 전체 요소를 DOM에서 제거하고 주석 노드로 대체합니다. 그런 다음 컴파일러는이 주석 노드 &quot;이후&quot;지시문의 템플릿을 형제로 삽입합니다.</target>
        </trans-unit>
        <trans-unit id="ccc0a0551436812b070e6ede527ae76f73bef649" translate="yes" xml:space="preserve">
          <source>If the element selector is prefixed with a &lt;code&gt;?&lt;/code&gt; then that slot is optional.</source>
          <target state="translated">요소 선택기 앞에 접두사가 &lt;code&gt;?&lt;/code&gt; 그 슬롯은 선택 사항입니다.</target>
        </trans-unit>
        <trans-unit id="539951d39c2b051017250ec693df08f36d0a8f58" translate="yes" xml:space="preserve">
          <source>If the element with &lt;code&gt;ngRef&lt;/code&gt; is destroyed &lt;code&gt;null&lt;/code&gt; is assigned to the property.</source>
          <target state="translated">&lt;code&gt;ngRef&lt;/code&gt; 가 있는 요소 가 삭제 되면 속성에 &lt;code&gt;null&lt;/code&gt; 이 할당됩니다.</target>
        </trans-unit>
        <trans-unit id="8c51b91039912156c6ef5160d6f7caa8d6f1e32c" translate="yes" xml:space="preserve">
          <source>If the expression evaluates to a RegExp object, then this is used directly.</source>
          <target state="translated">식이 RegExp 개체로 평가되면 직접 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="8fb5cd62dfec3bda2d681b5166adcc87bc454767" translate="yes" xml:space="preserve">
          <source>If the expression evaluates to a string, the string should be one or more space-delimited class names.</source>
          <target state="translated">표현식이 문자열로 평가되는 경우 문자열은 하나 이상의 공백으로 구분 된 클래스 이름이어야합니다.</target>
        </trans-unit>
        <trans-unit id="bb3c8751b0c61a411cfd191d56c199c86cb9d8a9" translate="yes" xml:space="preserve">
          <source>If the expression evaluates to a string, then it will be converted to a RegExp after wrapping it in &lt;code&gt;^&lt;/code&gt; and &lt;code&gt;$&lt;/code&gt; characters. For instance, &lt;code&gt;&quot;abc&quot;&lt;/code&gt; will be converted to &lt;code&gt;new RegExp('^abc$')&lt;/code&gt;.</source>
          <target state="translated">표현식이 문자열로 평가되면 &lt;code&gt;^&lt;/code&gt; 및 &lt;code&gt;$&lt;/code&gt; 문자로 래핑 한 후 RegExp로 변환됩니다 . 예를 들어 &lt;code&gt;&quot;abc&quot;&lt;/code&gt; 는 &lt;code&gt;new RegExp('^abc$')&lt;/code&gt; 로 변환됩니다 .</target>
        </trans-unit>
        <trans-unit id="0a90d5734dbd86cb9e55270bd3a9ec2a471d3da2" translate="yes" xml:space="preserve">
          <source>If the expression evaluates to an array, each element of the array should either be a string as in type 1 or an object as in type 2. This means that you can mix strings and objects together in an array to give you more control over what CSS classes appear. See the code below for an example of this.</source>
          <target state="translated">표현식이 배열로 평가되는 경우 배열의 각 요소는 유형 1과 같은 문자열이거나 유형 2와 같은 객체 여야합니다. 이는 문자열과 객체를 함께 배열로 혼합하여 무엇을 더 잘 제어 할 수 있음을 의미합니다. CSS 클래스가 나타납니다. 이에 대한 예제는 아래 코드를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="9f28d2244e2fc42662b32132ed29fd1499d1d52b" translate="yes" xml:space="preserve">
          <source>If the expression evaluates to an object, then for each key-value pair of the object with a truthy value the corresponding key is used as a class name.</source>
          <target state="translated">표현식이 객체로 평가되면 정확한 값을 가진 객체의 각 키-값 쌍에 대해 해당 키가 클래스 이름으로 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="4f8a5c1d790a45cf8480b55c2ec6d0e8c83e21ad" translate="yes" xml:space="preserve">
          <source>If the expression will not change once set, it is a candidate for one-time binding. Here are three example cases.</source>
          <target state="translated">일단 설정된식이 변경되지 않으면 일회성 바인딩의 후보입니다. 다음은 세 가지 사례입니다.</target>
        </trans-unit>
        <trans-unit id="8a619d19d7445d7e347bec6f9960436c9602b51f" translate="yes" xml:space="preserve">
          <source>If the first argument was a string, a factory function for the filter to be registered.</source>
          <target state="translated">첫 번째 인수가 문자열 인 경우 필터를 등록 할 팩토리 함수입니다.</target>
        </trans-unit>
        <trans-unit id="361c8831315e17339674f0ae2feca36f02b8ac8a" translate="yes" xml:space="preserve">
          <source>If the function throws an error or the returned promise gets rejected, no further processing will take place and the &lt;a href=&quot;../service/%24route#%24routeChangeError.html&quot;&gt;$routeChangeError&lt;/a&gt; event will be fired.</source>
          <target state="translated">함수가 오류를 발생 시키거나 리턴 된 약속이 거부되면 추가 처리가 수행되지 않고 &lt;a href=&quot;../service/%24route#%24routeChangeError.html&quot;&gt;$ routeChangeError&lt;/a&gt; 이벤트가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="801344aef470ca55925f85d5fc988659687084e2" translate="yes" xml:space="preserve">
          <source>If the horizontal distance is greater, this is a swipe and &lt;code&gt;move&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt; events follow.</source>
          <target state="translated">수평 거리가 더 크면 스 와이프하고 &lt;code&gt;move&lt;/code&gt; 및 &lt;code&gt;end&lt;/code&gt; 이벤트가 이어집니다.</target>
        </trans-unit>
        <trans-unit id="a956873d372528560c2d21f9517980780e587b81" translate="yes" xml:space="preserve">
          <source>If the input is null or undefined, it will just be returned. If the input is infinite (Infinity or -Infinity), the Infinity symbol '&amp;infin;' or '-&amp;infin;' is returned, respectively. If the input is not a number an empty string is returned.</source>
          <target state="translated">입력이 null이거나 정의되지 않은 경우 반환됩니다. 입력이 무한대 (무한대 또는-무한대)이면 무한대 기호 '&amp;infin;'또는 '-&amp;infin;'이 각각 반환됩니다. 입력이 숫자가 아닌 경우 빈 문자열이 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="3c59983d990ab2fd7484efe71b9e5bc2142d0391" translate="yes" xml:space="preserve">
          <source>If the interpolated value is not a &lt;code&gt;String&lt;/code&gt;, it is computed as follows:</source>
          <target state="translated">보간 된 값이 &lt;code&gt;String&lt;/code&gt; 이 아닌 경우 다음과 같이 계산됩니다.</target>
        </trans-unit>
        <trans-unit id="5201fb064f6147470f00f21dea4bab9f47241e2f" translate="yes" xml:space="preserve">
          <source>If the map of attributes contains a value for &lt;code&gt;target&lt;/code&gt;, it overrides the value of the target parameter.</source>
          <target state="translated">속성 맵에 &lt;code&gt;target&lt;/code&gt; 값이 포함 된 경우 대상 매개 변수 값이 대체됩니다.</target>
        </trans-unit>
        <trans-unit id="fbd620b139e2c7c9068fe0980b84af6bdfabe8c0" translate="yes" xml:space="preserve">
          <source>If the ngMessages renders no inner ngMessage directive (i.e. when none of the truthy keys are matched by a defined message), then it will render a default message using the &lt;a href=&quot;ngmessages/directive/ngmessagedefault&quot;&gt;&lt;code&gt;ngMessageDefault&lt;/code&gt;&lt;/a&gt; directive. Note that matched messages will always take precedence over unmatched messages. That means the default message will not be displayed when another message is matched. This is also true for &lt;code&gt;ng-messages-multiple&lt;/code&gt;.</source>
          <target state="translated">ngMessages가 내부 ngMessage 지시문을 렌더링하지 않으면 (즉, 정의 된 메시지와 일치하는 키가없는 경우) &lt;a href=&quot;ngmessages/directive/ngmessagedefault&quot;&gt; &lt;code&gt;ngMessageDefault&lt;/code&gt; &lt;/a&gt; 지시문을 사용하여 기본 메시지를 렌더링합니다 . 일치하는 메시지는 항상 일치하지 않는 메시지보다 우선합니다. 즉, 다른 메시지가 일치하면 기본 메시지가 표시되지 않습니다. &lt;code&gt;ng-messages-multiple&lt;/code&gt; 의 경우에도 마찬가지입니다 .</target>
        </trans-unit>
        <trans-unit id="b16925af72a4fed089f605a5771aa7712c7c7fd8" translate="yes" xml:space="preserve">
          <source>If the object has a &lt;code&gt;valueOf()&lt;/code&gt; method that returns a primitive, its return value will be used instead.</source>
          <target state="translated">객체 에 프리미티브를 리턴 하는 &lt;code&gt;valueOf()&lt;/code&gt; 메소드가있는 경우 해당 리턴 값이 대신 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="3f1a13de46e7e46a68d029c7a50e792f652a12e1" translate="yes" xml:space="preserve">
          <source>If the object has a custom &lt;code&gt;toString()&lt;/code&gt; method (i.e. not the one inherited from &lt;code&gt;Object&lt;/code&gt;) that returns a primitive, its return value will be used instead.</source>
          <target state="translated">객체 에 프리미티브를 리턴 하는 사용자 정의 &lt;code&gt;toString()&lt;/code&gt; 메소드 (예 : &lt;code&gt;Object&lt;/code&gt; 에서 상속 된 메소드가 아님)가있는 경우 해당 리턴 값이 대신 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="b4070dda3da26b7789461241d4d6a2028444a334" translate="yes" xml:space="preserve">
          <source>If the option is set to &lt;code&gt;false&lt;/code&gt; and the URL in the browser changes, but the new URL maps to the same route, then a &lt;code&gt;$routeUpdate&lt;/code&gt; event is broadcasted on the root scope (without reloading the route).</source>
          <target state="translated">옵션이 &lt;code&gt;false&lt;/code&gt; 로 설정되고 브라우저의 URL이 변경되었지만 새 URL이 동일한 경로에 매핑되면 &lt;code&gt;$routeUpdate&lt;/code&gt; 이벤트가 루트 범위에서 경로를 다시로드하지 않고 브로드 캐스트됩니다.</target>
        </trans-unit>
        <trans-unit id="4f675d1330a06aa7e73c29dee26c8f270d3431c5" translate="yes" xml:space="preserve">
          <source>If the option is set to &lt;code&gt;false&lt;/code&gt; and the URL in the browser changes, then a &lt;code&gt;$routeUpdate&lt;/code&gt; event is broadcasted on the root scope (without reloading the route).</source>
          <target state="translated">옵션이 &lt;code&gt;false&lt;/code&gt; 로 설정되고 브라우저의 URL이 변경되면 &lt;code&gt;$routeUpdate&lt;/code&gt; 이벤트가 루트 범위에서 라우트를 다시로드하지 않고 브로드 캐스트됩니다.</target>
        </trans-unit>
        <trans-unit id="667711c7d75a7f70cf4b59c7711f0e8c0ddf7c8c" translate="yes" xml:space="preserve">
          <source>If the option is set to &lt;code&gt;true&lt;/code&gt;, then the particular route can be matched without being case sensitive</source>
          <target state="translated">옵션이 &lt;code&gt;true&lt;/code&gt; 로 설정되면 대소 문자를 구분하지 않고 특정 경로를 일치시킬 수 있습니다</target>
        </trans-unit>
        <trans-unit id="2fa05f4335e8c37af4609e2cbfa503116352d3ed" translate="yes" xml:space="preserve">
          <source>If the parameter value is prefixed with &lt;code&gt;@&lt;/code&gt;, then the value for that parameter will be extracted from the corresponding property on the &lt;code&gt;data&lt;/code&gt; object (provided when calling actions with a request body). For example, if the &lt;code&gt;defaultParam&lt;/code&gt; object is &lt;code&gt;{someParam: '@someProp'}&lt;/code&gt; then the value of &lt;code&gt;someParam&lt;/code&gt; will be &lt;code&gt;data.someProp&lt;/code&gt;. Note that the parameter will be ignored, when calling a &quot;GET&quot; action method (i.e. an action method that does not accept a request body).</source>
          <target state="translated">매개 변수 값 앞에 &lt;code&gt;@&lt;/code&gt; 가 붙으면 해당 매개 변수의 값이 &lt;code&gt;data&lt;/code&gt; 오브젝트 의 해당 특성에서 추출됩니다 (요청 본문으로 조치를 호출 할 때 제공됨). 예를 들어 &lt;code&gt;defaultParam&lt;/code&gt; 의 목적은 &lt;code&gt;{someParam: '@someProp'}&lt;/code&gt; 다음의 값 &lt;code&gt;someParam&lt;/code&gt; 는 것이다 &lt;code&gt;data.someProp&lt;/code&gt; . &quot;GET&quot;조치 메소드 (예 : 요청 본문을 승인하지 않는 조치 메소드)를 호출 할 때 매개 변수가 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="748507705e8b73f2f2de5777914e00ac0057102d" translate="yes" xml:space="preserve">
          <source>If the passed parameter had been returned by a prior call to &lt;a href=&quot;%24scedelegate#trustAs.html&quot;&gt;&lt;code&gt;$sceDelegate.trustAs&lt;/code&gt;&lt;/a&gt;, returns the value that had been passed to &lt;a href=&quot;%24scedelegate#trustAs.html&quot;&gt;&lt;code&gt;$sceDelegate.trustAs&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">전달 된 매개 변수에 대한 이전 호출에 의해 반환 되었다면 &lt;a href=&quot;%24scedelegate#trustAs.html&quot;&gt; &lt;code&gt;$sceDelegate.trustAs&lt;/code&gt; &lt;/a&gt; 에 전달되었다 값 반환 &lt;a href=&quot;%24scedelegate#trustAs.html&quot;&gt; &lt;code&gt;$sceDelegate.trustAs&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="34bdf8299f97f8ef59f74107df302ae6779e17bc" translate="yes" xml:space="preserve">
          <source>If the passed parameter is not a value that had been returned by &lt;a href=&quot;%24scedelegate#trustAs.html&quot;&gt;&lt;code&gt;$sceDelegate.trustAs&lt;/code&gt;&lt;/a&gt;, it must be returned as-is.</source>
          <target state="translated">전달 된 매개 변수가 &lt;a href=&quot;%24scedelegate#trustAs.html&quot;&gt; &lt;code&gt;$sceDelegate.trustAs&lt;/code&gt; &lt;/a&gt; 가 리턴 한 값이 아닌 경우 그대로 리턴 해야합니다.</target>
        </trans-unit>
        <trans-unit id="eba391f315a45facb41d9100a63641fbf14c5c21" translate="yes" xml:space="preserve">
          <source>If the provider is:</source>
          <target state="translated">제공자가 다음과 같은 경우 :</target>
        </trans-unit>
        <trans-unit id="8fb90fddde351c69618ca1d22a26145a9faddc79" translate="yes" xml:space="preserve">
          <source>If the service has been declared multiple times, a decorator will decorate the service that has been declared last:</source>
          <target state="translated">서비스가 여러 번 선언 된 경우 데코레이터는 마지막으로 선언 된 서비스를 장식합니다.</target>
        </trans-unit>
        <trans-unit id="073e1a6fd73d36907ed730dd5649eee40ed506d0" translate="yes" xml:space="preserve">
          <source>If the transcluded content is not empty (i.e. contains one or more DOM nodes, including whitespace text nodes), any existing content of this element will be removed before the transcluded content is inserted. If the transcluded content is empty (or only whitespace), the existing content is left intact. This lets you provide fallback content in the case that no transcluded content is provided.</source>
          <target state="translated">포함 된 컨텐츠가 비어 있지 않은 경우 (즉, 공백 텍스트 노드를 포함하여 하나 이상의 DOM 노드를 포함하는 경우)이 요소의 기존 컨텐츠는 포함 된 컨텐츠를 삽입하기 전에 제거됩니다. 포함 된 내용이 비어 있거나 공백 만 있으면 기존 내용이 그대로 유지됩니다. 이를 통해 변환 된 컨텐츠가 제공되지 않는 경우 대체 컨텐츠를 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d9ff46f623d6f00d105132061348b4f635bc911c" translate="yes" xml:space="preserve">
          <source>If the value is a RegExp literal, e.g. &lt;code&gt;ngPattern=&quot;/^\d+$/&quot;&lt;/code&gt;, it is used directly.</source>
          <target state="translated">값이 RegExp 리터럴 인 경우 (예 : &lt;code&gt;ngPattern=&quot;/^\d+$/&quot;&lt;/code&gt; ) 직접 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="691fa80c49c3faa2138cb82838f938dea193adbf" translate="yes" xml:space="preserve">
          <source>If the value is empty, &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;on&lt;/code&gt;, then child animations are allowed. If the value is &lt;code&gt;false&lt;/code&gt;, child animations are not allowed.</source>
          <target state="translated">값이 비어 있거나 &lt;code&gt;true&lt;/code&gt; 이거나 &lt;code&gt;on&lt;/code&gt; 있으면 하위 애니메이션이 허용됩니다. 값이 &lt;code&gt;false&lt;/code&gt; 인 경우 하위 애니메이션이 허용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="34f1578079504e9d3dc1f5f790637a829842cb7f" translate="yes" xml:space="preserve">
          <source>If the vertical distance is greater, this is a scroll, and we let the browser take over. A &lt;code&gt;cancel&lt;/code&gt; event is sent.</source>
          <target state="translated">수직 거리가 더 크면 이것은 스크롤이며 브라우저가 대신합니다. A는 &lt;code&gt;cancel&lt;/code&gt; 이벤트가 전송됩니다.</target>
        </trans-unit>
        <trans-unit id="2d6b619ad1758255d1b68794d39d43746c76cfac" translate="yes" xml:space="preserve">
          <source>If the viewValue of &lt;code&gt;ngModel&lt;/code&gt; does not match any of the options, then the control will automatically add an &quot;unknown&quot; option, which it then removes when the mismatch is resolved.</source>
          <target state="translated">ngModel의 &lt;code&gt;ngModel&lt;/code&gt; 가 옵션과 일치하지 않으면 컨트롤은 &quot;알 수 없음&quot;옵션을 자동으로 추가하고 불일치가 해결되면 제거합니다.</target>
        </trans-unit>
        <trans-unit id="9a9455b461bd0ed851b0a2e20ee353139e41bf20" translate="yes" xml:space="preserve">
          <source>If there are no pending requests to flush when the method is called, an exception is thrown (as this is typically a sign of programming error).</source>
          <target state="translated">메소드가 호출 될 때 비 우려는 보류중인 요청이 없으면 예외가 발생합니다 (일반적으로 프로그래밍 오류의 표시이므로).</target>
        </trans-unit>
        <trans-unit id="060ea5570e9b3727e1af7089f2eeb073f6d7b905" translate="yes" xml:space="preserve">
          <source>If those attributes are added to an element, they will be applied to all the child elements and controls that inherit from it unless they are overridden.</source>
          <target state="translated">이러한 특성이 요소에 추가되면 재정의되지 않는 한 해당 특성을 상속하는 모든 자식 요소 및 컨트롤에 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="a0c1cfe0ec558e25c8faaad7729d14ba017c6c40" translate="yes" xml:space="preserve">
          <source>If true, then the scope does not prototypically inherit from the parent scope. The scope is isolated, as it can not see parent scope properties. When creating widgets, it is useful for the widget to not accidentally read parent state.</source>
          <target state="translated">true이면 해당 범위는 부모 범위에서 프로토 타입으로 상속되지 않습니다. 부모 범위 속성을 볼 수 없으므로 범위가 격리됩니다. 위젯을 작성할 때 위젯이 실수로 상위 상태를 읽지 않는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="1a1eda02417fef4dacf554c54592d8c5e31f4371" translate="yes" xml:space="preserve">
          <source>If true, when requests are loaded, they will schedule a deferred &quot;apply&quot; on the next tick, giving time for subsequent requests in a roughly ~10ms window to load and share the same digest cycle.</source>
          <target state="translated">true 인 경우 요청이로드되면 다음 틱에서 지연된 &quot;적용&quot;을 예약하여 약 10ms 창에서 후속 요청에 대해 동일한 다이제스트주기를로드하고 공유 할 시간을줍니다.</target>
        </trans-unit>
        <trans-unit id="6f15cbe99032410d5987084ecc33f306be94d6db" translate="yes" xml:space="preserve">
          <source>If two directives suspend a scope, then one of them resumes the scope, the scope will no longer be suspended. This could result in the other directive believing a scope to be suspended when it is not.</source>
          <target state="translated">두 지시문이 범위를 일시 중단하면 그 중 하나가 범위를 재개하면 해당 범위가 더 이상 일시 중단되지 않습니다. 이로 인해 다른 지시어는 스코프가 일시 중단 될 때 믿어지지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="62a2ab806aea83a4f315e6a0440d6fa1d95f6028" translate="yes" xml:space="preserve">
          <source>If we change the above to &lt;code&gt;{{ 1000 | currency:&quot;USD$&quot;}}&lt;/code&gt;, AngularJS will always show a balance of &lt;code&gt;USD$1000&lt;/code&gt; regardless of locale.</source>
          <target state="translated">위의 &lt;code&gt;{{ 1000 | currency:&quot;USD$&quot;}}&lt;/code&gt; , AngularJS는 로캘에 관계없이 항상 &lt;code&gt;USD$1000&lt;/code&gt; 의 잔액을 표시합니다 .</target>
        </trans-unit>
        <trans-unit id="8182958d3c9e9a8a4566ae6109e758f0624b87f7" translate="yes" xml:space="preserve">
          <source>If you are creating a reusable component then you should be careful when using &lt;code&gt;&quot;*&quot;: &quot;$inherit&quot;&lt;/code&gt; since you may inadvertently inherit a setting in the future that changes the behavior of your component.</source>
          <target state="translated">재사용 가능한 컴포넌트를 작성하는 경우 &lt;code&gt;&quot;*&quot;: &quot;$inherit&quot;&lt;/code&gt; 를 사용할 때 나중에 컴포넌트의 동작을 변경하는 설정을 실수로 상속 할 수 있으므로주의해야합니다 .</target>
        </trans-unit>
        <trans-unit id="6824fd64e915a35e23d50509c5e4bba8e51856fc" translate="yes" xml:space="preserve">
          <source>If you are familiar with &lt;code&gt;ngInclude&lt;/code&gt;, &lt;code&gt;templateUrl&lt;/code&gt; works just like it. Here's the same example using &lt;code&gt;templateUrl&lt;/code&gt; instead:</source>
          <target state="translated">당신이 잘 알고있는 경우 &lt;code&gt;ngInclude&lt;/code&gt; , &lt;code&gt;templateUrl&lt;/code&gt; 는 그냥처럼 작동합니다. 다음은 &lt;code&gt;templateUrl&lt;/code&gt; 을 사용하는 동일한 예입니다 .</target>
        </trans-unit>
        <trans-unit id="77b4c3f9eed7868de1adc6770793e45e91738ff2" translate="yes" xml:space="preserve">
          <source>If you are generating your JavaScript from some other templating engine (not recommended, e.g. in issue &lt;a href=&quot;https://github.com/angular/angular.js/issues/4006&quot;&gt;#4006&lt;/a&gt;), remember to escape your regular expression (and be aware that you might need more than one level of escaping depending on your templating engine and the way you interpolated the value.) Do make use of your platform's escaping mechanism as it might be good enough before coding your own. E.g. Ruby has &lt;a href=&quot;http://www.ruby-doc.org/core-2.0.0/Regexp.html#method-c-escape&quot;&gt;Regexp.escape(str)&lt;/a&gt; and Python has &lt;a href=&quot;http://docs.python.org/library/re.html#re.escape&quot;&gt;re.escape&lt;/a&gt;. Javascript lacks a similar built in function for escaping. Take a look at Google Closure library's &lt;a href=&quot;http://docs.closure-library.googlecode.com/git/closure_goog_string_string.js.source.html#line962&quot;&gt;goog.string.regExpEscape(s)&lt;/a&gt;.</source>
          <target state="translated">다른 템플릿 엔진에서 JavaScript를 생성하는 경우 (예 : 문제 &lt;a href=&quot;https://github.com/angular/angular.js/issues/4006&quot;&gt;# 4006&lt;/a&gt; 에서 권장되지 않음 ) 정규 표현식을 피해야합니다 (템플릿 엔진 및 방법에 따라 둘 이상의 이스케이프 처리가 필요할 수 있음을 기억하십시오) 값을 보간했습니다.) 자신의 코드를 작성하기 전에 플랫폼의 이스케이프 메커니즘을 충분히 활용하십시오. 예를 들어 Ruby에는 &lt;a href=&quot;http://www.ruby-doc.org/core-2.0.0/Regexp.html#method-c-escape&quot;&gt;Regexp.escape (str)가&lt;/a&gt; 있고 Python에는 &lt;a href=&quot;http://docs.python.org/library/re.html#re.escape&quot;&gt;re.escape가&lt;/a&gt; 있습니다. Javascript에는 이스케이프를위한 유사한 내장 기능이 없습니다. Google Closure 라이브러리의 &lt;a href=&quot;http://docs.closure-library.googlecode.com/git/closure_goog_string_string.js.source.html#line962&quot;&gt;goog.string.regExpEscape (s)를&lt;/a&gt; 살펴보십시오 .</target>
        </trans-unit>
        <trans-unit id="a29cc079c5381669c7a3a9da4c7b33b8f798e95e" translate="yes" xml:space="preserve">
          <source>If you are hitting any of these limitations, the recommended workaround is to convert your object into an array that is sorted into the order that you prefer before providing it to &lt;code&gt;ngRepeat&lt;/code&gt;. You could do this with a filter such as &lt;a href=&quot;http://ngmodules.org/modules/angular-toArrayFilter&quot;&gt;toArrayFilter&lt;/a&gt; or implement a &lt;code&gt;$watch&lt;/code&gt; on the object yourself.</source>
          <target state="translated">이러한 제한 사항 중 하나라도 해결하려는 경우 권장되는 해결 방법은 객체를 &lt;code&gt;ngRepeat&lt;/code&gt; 에 제공하기 전에 원하는 순서로 정렬 된 배열로 변환하는 것 입니다. &lt;a href=&quot;http://ngmodules.org/modules/angular-toArrayFilter&quot;&gt;toArrayFilter&lt;/a&gt; 와 같은 필터를 사용 하거나 객체에 &lt;code&gt;$watch&lt;/code&gt; 를 구현할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="99dd2e2dc29df4f42bc993e77fee00d09330237a" translate="yes" xml:space="preserve">
          <source>If you are just using &lt;a href=&quot;../directive/ngtransclude&quot;&gt;&lt;code&gt;ngTransclude&lt;/code&gt;&lt;/a&gt; then you don't need to worry about this function, since ngTransclude will deal with it for us.</source>
          <target state="translated">&lt;a href=&quot;../directive/ngtransclude&quot;&gt; &lt;code&gt;ngTransclude&lt;/code&gt; &lt;/a&gt; 를 사용하는 경우 ngTransclude가이를 처리하므로이 기능에 대해 걱정할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="a45454eb838a97c3b99832ac7c22cb8a9f728800" translate="yes" xml:space="preserve">
          <source>If you are not asking the linking function to clone the template, create the DOM element(s) before you send them to the compiler and keep this reference around.</source>
          <target state="translated">템플릿을 복제하기 위해 링크 기능을 요청하지 않는 경우 DOM 요소를 작성하여 컴파일러에 보내기 전에이 참조를 유지하십시오.</target>
        </trans-unit>
        <trans-unit id="05854a1d0c3c61abd34a6185ba88099223eaf1f6" translate="yes" xml:space="preserve">
          <source>If you are setting the option value with the option's &lt;code&gt;value&lt;/code&gt; attribute, or textContent, the value will always be a &lt;code&gt;string&lt;/code&gt; which means that the model value must also be a string. Otherwise the &lt;code&gt;select&lt;/code&gt; directive cannot match them correctly.</source>
          <target state="translated">옵션의 &lt;code&gt;value&lt;/code&gt; 속성 또는 textContent를 사용하여 옵션 값을 설정하는 경우 값은 항상 &lt;code&gt;string&lt;/code&gt; 이되므로 모델 값도 문자열이어야합니다. 그렇지 않으면 &lt;code&gt;select&lt;/code&gt; 지시문이 올바르게 일치하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="8616bb7e831e9c34f5ed1c22db4f4d693acd3c1c" translate="yes" xml:space="preserve">
          <source>If you are sure that your project only uses element and attribute directives, and you are not using any 3rd party library that uses directives inside element classes or html comments, you can disable the compilation of directives on element classes and comments for the whole application. This results in a compilation performance gain, as the compiler does not have to check comments and element classes looking for directives.</source>
          <target state="translated">프로젝트에서 요소 및 속성 지시문 만 사용하고 요소 클래스 또는 HTML 주석 내부에서 지시문을 사용하는 타사 라이브러리를 사용하지 않는 경우 전체 애플리케이션의 요소 클래스 및 주석에 대한 지시문 컴파일을 비활성화 할 수 있습니다. 컴파일러는 지시문을 찾기 위해 주석과 요소 클래스를 확인할 필요가 없기 때문에 컴파일 성능이 향상됩니다.</target>
        </trans-unit>
        <trans-unit id="7f18d87980792564416a9131237779e5b2ab35b5" translate="yes" xml:space="preserve">
          <source>If you are using &lt;code&gt;$element&lt;/code&gt; or &lt;code&gt;$attrs&lt;/code&gt; in the controller, make sure to provide them as &lt;code&gt;locals&lt;/code&gt;. The &lt;code&gt;$element&lt;/code&gt; must be a jqLite-wrapped DOM element, and &lt;code&gt;$attrs&lt;/code&gt; should be an object that has all properties / functions that you are using in the controller. If this is getting too complex, you should compile the component instead and access the component's controller via the &lt;a href=&quot;../../ng/function/angular.element#methods.html&quot;&gt;&lt;code&gt;controller&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">당신이 사용하는 경우 &lt;code&gt;$element&lt;/code&gt; 또는 &lt;code&gt;$attrs&lt;/code&gt; 컨트롤러에를로를 제공 할 수 있는지 확인 &lt;code&gt;locals&lt;/code&gt; . &lt;code&gt;$element&lt;/code&gt; jqLite 감싸 DOM 요소이어야하며, &lt;code&gt;$attrs&lt;/code&gt; 당신이 컨트롤러에 사용되는 모든 속성 / 기능을 가진 개체 수 있어야합니다. 이 과정이 너무 복잡해지면 구성 요소를 대신 컴파일하고 &lt;a href=&quot;../../ng/function/angular.element#methods.html&quot;&gt; &lt;code&gt;controller&lt;/code&gt; &lt;/a&gt; 기능을 통해 구성 요소의 컨트롤러에 액세스해야 합니다.</target>
        </trans-unit>
        <trans-unit id="62ca6a2bc0e076ff23829bf151f3637b4d8d77f5" translate="yes" xml:space="preserve">
          <source>If you are using a url with a suffix, just add the suffix, like this: &lt;code&gt;$resource('http://example.com/resource.json')&lt;/code&gt; or &lt;code&gt;$resource('http://example.com/:id.json')&lt;/code&gt; or even &lt;code&gt;$resource('http://example.com/resource/:resource_id.:format')&lt;/code&gt; If the parameter before the suffix is empty, :resource_id in this case, then the &lt;code&gt;/.&lt;/code&gt; will be collapsed down to a single &lt;code&gt;.&lt;/code&gt;. If you need this sequence to appear and not collapse then you can escape it with &lt;code&gt;/\.&lt;/code&gt;.</source>
          <target state="translated">접미사와 함께 URL을 사용하는 경우 &lt;code&gt;$resource('http://example.com/resource.json')&lt;/code&gt; 또는 &lt;code&gt;$resource('http://example.com/:id.json')&lt;/code&gt; 와 같이 접미사를 추가하십시오 . .json ') 또는 &lt;code&gt;$resource('http://example.com/resource/:resource_id.:format')&lt;/code&gt; 접미사 앞의 매개 변수가 비어 있으면이 경우 : resource_id이고 &lt;code&gt;/.&lt;/code&gt; 단일로 축소됩니다 &lt;code&gt;.&lt;/code&gt; . 이 시퀀스가 ​​나타나고 축소되지 않으면 &lt;code&gt;/\.&lt;/code&gt; 하여 이스케이프 처리 할 수 ​​있습니다 . .</target>
        </trans-unit>
        <trans-unit id="8175243d5dd6cd4ad446324c5b107b61705e0849" translate="yes" xml:space="preserve">
          <source>If you are writing your controllers as classes you have easier access to the properties and methods, which will appear on the scope, from inside the controller code.</source>
          <target state="translated">컨트롤러를 클래스로 작성하는 경우 컨트롤러 코드 내부에서 범위에 표시되는 속성 및 메서드에 더 쉽게 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="579b0bfd8c97d214c17252551f1e2da79f4821e2" translate="yes" xml:space="preserve">
          <source>If you choose to use the old style directive syntax &lt;code&gt;ng:&lt;/code&gt; then include xml-namespace in &lt;code&gt;html&lt;/code&gt; when running the page in the XHTML mode. (This is here for historical reasons, and we no longer recommend use of &lt;code&gt;ng:&lt;/code&gt;.)</source>
          <target state="translated">이전 스타일 지시문 구문 &lt;code&gt;ng:&lt;/code&gt; 를 사용하기로 선택한 경우 XHTML 모드에서 페이지를 실행할 때 xml-namespace를 &lt;code&gt;html&lt;/code&gt; 에 포함 하십시오. (이것은 역사적인 이유로 여기에 있으며 더 이상 &lt;code&gt;ng:&lt;/code&gt; 사용하지 않는 것이 좋습니다 .)</target>
        </trans-unit>
        <trans-unit id="95ac9993d00393a11c4032cc3f53f03837212f99" translate="yes" xml:space="preserve">
          <source>If you do have CSS transitions / animations defined for the animation events, make sure they have a higher priority than any styles that are not related to &lt;code&gt;ngAnimate&lt;/code&gt;.</source>
          <target state="translated">애니메이션 이벤트에 대해 CSS 전환 / 애니메이션이 정의 된 경우 &lt;code&gt;ngAnimate&lt;/code&gt; 와 관련이없는 스타일보다 우선 순위가 더 높은지 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="e60f87bc71cf08bbc7d9b1d676646a6c5716f48c" translate="yes" xml:space="preserve">
          <source>If you do not provide &lt;code&gt;ngCsp&lt;/code&gt; then AngularJS tries to autodetect if CSP is blocking dynamic code creation from strings (e.g., &lt;code&gt;unsafe-eval&lt;/code&gt; not specified in CSP header) and automatically deactivates this feature in the &lt;a href=&quot;../service/%24parse&quot;&gt;&lt;code&gt;$parse&lt;/code&gt;&lt;/a&gt; service. This autodetection, however, triggers a CSP error to be logged in the console:</source>
          <target state="translated">&lt;code&gt;ngCsp&lt;/code&gt; 를 제공하지 않으면 AngularJS는 CSP가 문자열 (예 : CSP 헤더에 &lt;code&gt;unsafe-eval&lt;/code&gt; 을 지정하지 않음) 에서 동적 코드 생성을 차단하는지 자동 감지하려고 시도 하고 &lt;a href=&quot;../service/%24parse&quot;&gt; &lt;code&gt;$parse&lt;/code&gt; &lt;/a&gt; 서비스 에서이 기능을 자동으로 비활성화 합니다. 그러나이 자동 감지는 콘솔에 CSP 오류가 기록되도록 트리거합니다.</target>
        </trans-unit>
        <trans-unit id="090e07725aef98ccf8c178d8354126ccc84bb075" translate="yes" xml:space="preserve">
          <source>If you do want your animations to play when the app bootstraps, you can enable animations globally in your main module's &lt;a href=&quot;../api/ng/type/angular.module#run.html&quot;&gt;run&lt;/a&gt; function:</source>
          <target state="translated">앱이 부트 스트랩 할 때 애니메이션을 재생하려는 경우 기본 모듈의 &lt;a href=&quot;../api/ng/type/angular.module#run.html&quot;&gt;실행&lt;/a&gt; 기능 에서 애니메이션을 전체적으로 활성화 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c54acd5a1055cc95784ce1576ee1d24938a564f3" translate="yes" xml:space="preserve">
          <source>If you have an input that uses &lt;code&gt;ng-model-options&lt;/code&gt; to set up debounced updates or updates that depend on special events such as &lt;code&gt;blur&lt;/code&gt;, there can be a period when the &lt;code&gt;$viewValue&lt;/code&gt; is out of sync with the ngModel's &lt;code&gt;$modelValue&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ng-model-options&lt;/code&gt; 를 사용하여 &lt;code&gt;blur&lt;/code&gt; 와 같은 특수 이벤트에 의존하는 디 바운스 된 업데이트 또는 업데이트를 설정 하는 입력이있는 경우 &lt;code&gt;$viewValue&lt;/code&gt; 가 ngModel의 &lt;code&gt;$modelValue&lt;/code&gt; 와 동기화되지 않는 기간이있을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f76a6558a7d25629fa9ecb3f235d6240ed436b29" translate="yes" xml:space="preserve">
          <source>If you have awesome AngularJS resources that belong on that page, please tell us about them on &lt;a href=&quot;https://plus.google.com/u/0/+AngularJS&quot;&gt;Google+&lt;/a&gt; or &lt;a href=&quot;https://twitter.com/angularjs&quot;&gt;Twitter&lt;/a&gt;.</source>
          <target state="translated">해당 페이지에 속하는 멋진 AngularJS 리소스가 있다면 &lt;a href=&quot;https://plus.google.com/u/0/+AngularJS&quot;&gt;Google+&lt;/a&gt; 또는 &lt;a href=&quot;https://twitter.com/angularjs&quot;&gt;Twitter&lt;/a&gt; 에서 알려주십시오 .</target>
        </trans-unit>
        <trans-unit id="cc605f97c4d62e22545f2f1d9d3a0d4805d17f68" translate="yes" xml:space="preserve">
          <source>If you have very specific requirements about the way items are sorted, you can pass your own comparator function. For example, you might need to compare some strings in a locale-sensitive way. (When specifying a custom comparator, you also need to pass a value for the &lt;code&gt;reverse&lt;/code&gt; argument - passing &lt;code&gt;false&lt;/code&gt; retains the default sorting order, i.e. ascending.)</source>
          <target state="translated">항목을 정렬하는 방법에 대한 특정 요구 사항이있는 경우 고유 한 비교기 함수를 전달할 수 있습니다. 예를 들어, 일부 문자열을 로케일 구분 방식으로 비교해야 할 수 있습니다. (커스텀 비교기를 지정할 때, &lt;code&gt;reverse&lt;/code&gt; 인수 값도 전달해야합니다. &lt;code&gt;false&lt;/code&gt; 를 전달 하면 기본 정렬 순서가 유지됩니다 (예 : 오름차순).</target>
        </trans-unit>
        <trans-unit id="83df81bb997c0451e68609a38aa5876c44d17de2" translate="yes" xml:space="preserve">
          <source>If you however do need to write a stateful filter, you have to mark the filter as &lt;code&gt;$stateful&lt;/code&gt;, which means that it will be executed one or more times during the each &lt;code&gt;$digest&lt;/code&gt; cycle.</source>
          <target state="translated">그러나 상태 저장 필터를 작성해야하는 경우 필터를 &lt;code&gt;$stateful&lt;/code&gt; 로 표시해야합니다. 즉, 각 &lt;code&gt;$digest&lt;/code&gt; 주기 동안 필터 가 한 번 이상 실행됩니다 .</target>
        </trans-unit>
        <trans-unit id="207d49b848c74ffcb21da0b752a994a1ebcb5c10" translate="yes" xml:space="preserve">
          <source>If you intend to implement CSP with these rules then you must tell AngularJS not to use these features.</source>
          <target state="translated">이러한 규칙을 사용하여 CSP를 구현하려는 경우 AngularJS에 이러한 기능을 사용하지 않도록 지시해야합니다.</target>
        </trans-unit>
        <trans-unit id="870c0ac7d5968a770c3f532b92db58783f974638" translate="yes" xml:space="preserve">
          <source>If you need access to the bound view, there are two ways to do it:</source>
          <target state="translated">바운드 뷰에 액세스해야하는 경우 두 가지 방법이 있습니다.</target>
        </trans-unit>
        <trans-unit id="2aa27655c9b71a602d902a015fc4942f9f7944c1" translate="yes" xml:space="preserve">
          <source>If you need to have more control over the initialization process, you can use a manual bootstrapping method instead. Examples of when you'd need to do this include using script loaders or the need to perform an operation before AngularJS compiles a page.</source>
          <target state="translated">초기화 프로세스를보다 세밀하게 제어해야하는 경우 수동 부트 스트랩 방법을 대신 사용할 수 있습니다. 스크립트 로더 사용 또는 AngularJS가 페이지를 컴파일하기 전에 작업을 수행해야하는 경우를 예로들 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="dbca727a7864fd896ef933ac7699c9e2ca5dac44" translate="yes" xml:space="preserve">
          <source>If you need to test a nested Controller you must create the same scope hierarchy in your test that exists in the DOM:</source>
          <target state="translated">중첩 된 컨트롤러를 테스트해야하는 경우 테스트에 DOM에 존재하는 동일한 범위 계층 구조를 작성해야합니다.</target>
        </trans-unit>
        <trans-unit id="ecb468ce29d2f458690fba5b025b3f86a8d80c22" translate="yes" xml:space="preserve">
          <source>If you only want a promise that will be resolved after some specified delay then you can call &lt;code&gt;$timeout&lt;/code&gt; without the &lt;code&gt;fn&lt;/code&gt; function.</source>
          <target state="translated">지정된 지연 후에 해결 될 약속 만 원하는 경우 &lt;code&gt;fn&lt;/code&gt; 함수 없이 &lt;code&gt;$timeout&lt;/code&gt; 을 호출 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a5b2fc07801a43a0c7f77b3da6fcfcbca33ad603" translate="yes" xml:space="preserve">
          <source>If you use a custom comparator, it will be called with pairs of objects of the form &lt;code&gt;{value: ..., type: '...', index: ...}&lt;/code&gt; and is expected to return &lt;code&gt;0&lt;/code&gt; if the objects are equal (as far as the comparator is concerned), &lt;code&gt;-1&lt;/code&gt; if the 1st one should be ranked higher than the second, or &lt;code&gt;1&lt;/code&gt; otherwise.</source>
          <target state="translated">사용자 지정 비교기를 사용하면 &lt;code&gt;{value: ..., type: '...', index: ...}&lt;/code&gt; 형식의 개체 쌍으로 호출되며 개체가 같으면 &lt;code&gt;0&lt;/code&gt; 을 반환 합니다. (비교 자와 관련하여) &lt;code&gt;-1&lt;/code&gt; 이 1보다 두 번째로 더 높은 순위를 지정해야하는 경우 -1 , 그렇지 않으면 &lt;code&gt;1&lt;/code&gt; 이 지정 됩니다.</target>
        </trans-unit>
        <trans-unit id="58f3058d3baff2b3a073006ea03f29eefad6d04e" translate="yes" xml:space="preserve">
          <source>If you want to be notified whenever &lt;a href=&quot;%24rootscope.scope#%24digest.html&quot;&gt;$digest&lt;/a&gt; is called, you can register a &lt;code&gt;watchExpression&lt;/code&gt; function with no &lt;code&gt;listener&lt;/code&gt;. (Be prepared for multiple calls to your &lt;code&gt;watchExpression&lt;/code&gt; because it will execute multiple times in a single &lt;a href=&quot;%24rootscope.scope#%24digest.html&quot;&gt;$digest&lt;/a&gt; cycle if a change is detected.)</source>
          <target state="translated">&lt;a href=&quot;%24rootscope.scope#%24digest.html&quot;&gt;$ digest&lt;/a&gt; 가 호출 될 때마다 알림을 &lt;code&gt;watchExpression&lt;/code&gt; &lt;code&gt;listener&lt;/code&gt; 없이 watchExpression 함수를 등록 할 수 있습니다 . ( 변경 사항이 감지되면 &lt;code&gt;watchExpression&lt;/code&gt; 이 단일 &lt;a href=&quot;%24rootscope.scope#%24digest.html&quot;&gt;$ 다이제스트&lt;/a&gt; 주기로 여러 번 실행되므로 watchExpression 을 여러 번 호출 할 수 있도록 준비하십시오 .)</target>
        </trans-unit>
        <trans-unit id="6f6cc8237e6dc46dbea8035f91ef1cceb56523a5" translate="yes" xml:space="preserve">
          <source>If you want to be notified whenever &lt;code&gt;$digest()&lt;/code&gt; is called, you can register a &lt;code&gt;watchExpression&lt;/code&gt; function with &lt;a href=&quot;%24rootscope.scope#%24watch.html&quot;&gt;$watch()&lt;/a&gt; with no &lt;code&gt;listener&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$digest()&lt;/code&gt; 가 호출 될 때마다 알림을 &lt;code&gt;watchExpression&lt;/code&gt; &lt;code&gt;listener&lt;/code&gt; 없이 &lt;a href=&quot;%24rootscope.scope#%24watch.html&quot;&gt;$ watch ()에 &lt;/a&gt;watchExpression 함수를 등록 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ac59abc08a6313ed9820733d9cddfe40a666fa59" translate="yes" xml:space="preserve">
          <source>If you want to keep the default behavior and just add new events that may trigger the model update and validation, add &quot;default&quot; as one of the specified events.</source>
          <target state="translated">기본 동작을 유지하고 모델 업데이트 및 유효성 검사를 트리거 할 수있는 새 이벤트 만 추가하려면 지정된 이벤트 중 하나로 &quot;기본&quot;을 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="7ffb3f226f4ffeb1e0ee64801113cc17b7d6cb85" translate="yes" xml:space="preserve">
          <source>If you want to manually control the insertion and removal of the transcluded content in your directive then you must use this transclude function. When you call a transclude function it returns a a jqLite/JQuery object that contains the compiled DOM, which is linked to the correct transclusion scope.</source>
          <target state="translated">지시문에 포함 된 컨텐츠의 삽입 및 제거를 수동으로 제어하려면이 변환 기능을 사용해야합니다. transclude 함수를 호출하면 올바른 transclusion 범위에 연결된 컴파일 된 DOM이 포함 된 jqLite / JQuery 객체가 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="350e89977f66c00f278ba622f5c870b1d11fc27e" translate="yes" xml:space="preserve">
          <source>If you want to pass custom options to the &lt;code&gt;$http&lt;/code&gt; service, such as setting the Accept header you can configure this via &lt;a href=&quot;../provider/%24templaterequestprovider#httpOptions.html&quot;&gt;&lt;code&gt;$templateRequestProvider&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">수락 헤더 설정과 같은 사용자 지정 옵션을 &lt;code&gt;$http&lt;/code&gt; 서비스 에 전달 하려면 &lt;a href=&quot;../provider/%24templaterequestprovider#httpOptions.html&quot;&gt; &lt;code&gt;$templateRequestProvider&lt;/code&gt; &lt;/a&gt; 를 통해이를 구성 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="55cac270f43d60bf68fc09da3ef0e7d2fc46b878" translate="yes" xml:space="preserve">
          <source>If you want to run more complex JavaScript code, you should make it a controller method and call the method from your view. If you want to &lt;code&gt;eval()&lt;/code&gt; an AngularJS expression yourself, use the &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24eval.html&quot;&gt;&lt;code&gt;$eval()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">보다 복잡한 JavaScript 코드를 실행하려면 해당 코드를 컨트롤러 메소드로 만들고 뷰에서 메소드를 호출해야합니다. 당신이 원하는 경우 &lt;code&gt;eval()&lt;/code&gt; AngularJS와 표현 자신의 사용 &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24eval.html&quot;&gt; &lt;code&gt;$eval()&lt;/code&gt; &lt;/a&gt; 메소드를.</target>
        </trans-unit>
        <trans-unit id="94ef57a2b10b7fb543b9ad681272e7260b865493" translate="yes" xml:space="preserve">
          <source>If you wish to be able to navigate to the application via a URL such as &lt;code&gt;/base&lt;/code&gt; then you should ensure that your server is setup to redirect such requests to &lt;code&gt;/base/&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;/base&lt;/code&gt; 와 같은 URL을 통해 응용 프로그램으로 이동하려면 해당 요청을 &lt;code&gt;/base/&lt;/code&gt; 로 리디렉션하도록 서버를 설정해야합니다 .</target>
        </trans-unit>
        <trans-unit id="4a461bd3d1f4cd564f100034e6f4c026c6547ba8" translate="yes" xml:space="preserve">
          <source>If you wish to debug an application with this information then you should open up a debug console in the browser then call this method directly in this console:</source>
          <target state="translated">이 정보를 사용하여 응용 프로그램을 디버깅하려면 브라우저에서 디버그 콘솔을 연 다음이 콘솔에서 직접이 메서드를 호출해야합니다.</target>
        </trans-unit>
        <trans-unit id="67961efc8f60d457340202b3fece6ab62a772fa8" translate="yes" xml:space="preserve">
          <source>If you wish to exclude these then you can use the native &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isFinite&quot;&gt;`isFinite'&lt;/a&gt; method.</source>
          <target state="translated">이것들을 제외하고 싶다면 네이티브 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isFinite&quot;&gt;`isFinite '&lt;/a&gt; 메소드를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="febd4482ea90c369092b50e44a77405198b68c7e" translate="yes" xml:space="preserve">
          <source>If you wish to override the request/response transformations only for a single request then provide &lt;code&gt;transformRequest&lt;/code&gt; and/or &lt;code&gt;transformResponse&lt;/code&gt; properties on the configuration object passed into &lt;code&gt;$http&lt;/code&gt;.</source>
          <target state="translated">단일 요청에 대해서만 요청 / 응답 변환을 대체하려면 &lt;code&gt;$http&lt;/code&gt; 전달 된 구성 오브젝트에 대해 &lt;code&gt;transformRequest&lt;/code&gt; 및 / 또는 &lt;code&gt;transformResponse&lt;/code&gt; 특성 을 제공 하십시오 .</target>
        </trans-unit>
        <trans-unit id="92efd56723876207dc42707b797385c44e1ed645" translate="yes" xml:space="preserve">
          <source>If you wish, you can manually delegate exceptions, e.g. &lt;code&gt;try { ... } catch(e) { $exceptionHandler(e); }&lt;/code&gt;</source>
          <target state="translated">원하는 경우 예외를 수동으로 위임 할 수 있습니다 (예 : &lt;code&gt;try { ... } catch(e) { $exceptionHandler(e); }&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5dede550c88c109a7aa713ce10867aee17cad1fe" translate="yes" xml:space="preserve">
          <source>If you would like to customise where and how the callbacks are stored then try overriding or decorating the &lt;a href=&quot;%24jsonpcallbacks&quot;&gt;&lt;code&gt;$jsonpCallbacks&lt;/code&gt;&lt;/a&gt; service.</source>
          <target state="translated">콜백 저장 위치와 방법을 사용자 정의하려면 &lt;a href=&quot;%24jsonpcallbacks&quot;&gt; &lt;code&gt;$jsonpCallbacks&lt;/code&gt; &lt;/a&gt; 서비스를 재정의하거나 꾸미십시오 .</target>
        </trans-unit>
        <trans-unit id="6de6f522958da34b1dcc259678edc0cbe2c6e606" translate="yes" xml:space="preserve">
          <source>If you're using manual bootstrapping, you can also use strict DI by providing &lt;code&gt;strictDi: true&lt;/code&gt; in the optional config argument:</source>
          <target state="translated">수동 부트 스트랩을 사용하는 경우 선택적 config 인수에 &lt;code&gt;strictDi: true&lt;/code&gt; 를 제공하여 엄격한 DI를 사용할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="27ab337d46310ca730ffb687877a71fd87b9ffd3" translate="yes" xml:space="preserve">
          <source>If your app is currently in the &lt;code&gt;en-US&lt;/code&gt; locale, the browser will show &lt;code&gt;$1000.00&lt;/code&gt;. If someone in the Japanese locale (&lt;code&gt;ja&lt;/code&gt;) views your app, their browser will show a balance of &lt;code&gt;&amp;yen;1000.00&lt;/code&gt; instead. This is problematic because $1000 is not the same as &amp;yen;1000.</source>
          <target state="translated">앱이 현재 &lt;code&gt;en-US&lt;/code&gt; 로캘 인 경우 브라우저에 &lt;code&gt;$1000.00&lt;/code&gt; 이 표시됩니다 . 일본어 로케일 ( &lt;code&gt;ja&lt;/code&gt; ) 의 누군가가 앱을 보는 경우 브라우저에 &lt;code&gt;&amp;yen;1000.00&lt;/code&gt; 의 잔액이 대신 표시 됩니다. $ 1000이 &amp;yen; 1000과 같지 않기 때문에 문제가됩니다.</target>
        </trans-unit>
        <trans-unit id="1430bac2eebac9bf88d3059ad02454360c8556c7" translate="yes" xml:space="preserve">
          <source>If your directive uses &lt;code&gt;templateUrl&lt;/code&gt;, consider using &lt;a href=&quot;https://github.com/karma-runner/karma-ng-html2js-preprocessor&quot;&gt;karma-ng-html2js-preprocessor&lt;/a&gt; to pre-compile HTML templates and thus avoid having to load them over HTTP during test execution. Otherwise you may run into issues if the test directory hierarchy differs from the application's.</source>
          <target state="translated">지시문이 &lt;code&gt;templateUrl&lt;/code&gt; 을 사용하는 경우 &lt;a href=&quot;https://github.com/karma-runner/karma-ng-html2js-preprocessor&quot;&gt;karma-ng-html2js-preprocessor&lt;/a&gt; 를 사용하여 HTML 템플리트를 사전 컴파일하여 테스트 실행 중에 HTTP를 통해로드하지 않아도됩니다. 그렇지 않으면 테스트 디렉토리 계층이 응용 프로그램과 다를 경우 문제가 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="93fe649037fb09c8d4e2db87fdce1cee0df7982c" translate="yes" xml:space="preserve">
          <source>If your expressions are constant literals, they're automatically trusted and you don't need to call &lt;code&gt;$sce.trustAs&lt;/code&gt; on them (e.g. &lt;code&gt;&amp;lt;div ng-bind-html=&quot;'&amp;lt;b&amp;gt;implicitly trusted&amp;lt;/b&amp;gt;'&quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;) just works (remember to include the &lt;code&gt;ngSanitize&lt;/code&gt; module). The &lt;code&gt;$sceDelegate&lt;/code&gt; will also use the &lt;code&gt;$sanitize&lt;/code&gt; service if it is available when binding untrusted values to &lt;code&gt;$sce.HTML&lt;/code&gt; context. AngularJS provides an implementation in &lt;code&gt;angular-sanitize.js&lt;/code&gt;, and if you wish to use it, you will also need to depend on the &lt;a href=&quot;../../ngsanitize&quot;&gt;&lt;code&gt;ngSanitize&lt;/code&gt;&lt;/a&gt; module in your application.</source>
          <target state="translated">표현식이 상수 리터럴 인 경우 자동으로 신뢰 &lt;code&gt;$sce.trustAs&lt;/code&gt; 를 호출 할 필요가 없습니다 (예 : &lt;code&gt;&amp;lt;div ng-bind-html=&quot;'&amp;lt;b&amp;gt;implicitly trusted&amp;lt;/b&amp;gt;'&quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt; )가 작동합니다 ( &lt;code&gt;ngSanitize&lt;/code&gt; 모듈 을 포함해야 함 ). &lt;code&gt;$sceDelegate&lt;/code&gt; 또한 사용 &lt;code&gt;$sanitize&lt;/code&gt; 으로 신뢰할 수없는 값을 바인딩 할 때 사용할 수있는 경우 서비스를 &lt;code&gt;$sce.HTML&lt;/code&gt; 상황. AngularJS는 &lt;code&gt;angular-sanitize.js&lt;/code&gt; 에 구현을 제공하며이를 사용하려면 애플리케이션 의 &lt;a href=&quot;../../ngsanitize&quot;&gt; &lt;code&gt;ngSanitize&lt;/code&gt; &lt;/a&gt; 모듈에 의존 해야합니다.</target>
        </trans-unit>
        <trans-unit id="ab4db8d966388aab90159f0307d07fcccc35f63f" translate="yes" xml:space="preserve">
          <source>Imagine you want to have a container with tabs in which the contents of the container correspond to which tab is active.</source>
          <target state="translated">컨테이너의 내용이 활성화 된 탭에 해당하는 탭이있는 컨테이너를 원한다고 가정하십시오.</target>
        </trans-unit>
        <trans-unit id="6b84004070116f71855a9922d8e631eb72f699dc" translate="yes" xml:space="preserve">
          <source>Impact on loading templates</source>
          <target state="translated">템플릿 로딩에 미치는 영향</target>
        </trans-unit>
        <trans-unit id="20b1bba1cb06ab8386a24bd0d8dfecea07cd7671" translate="yes" xml:space="preserve">
          <source>Implementing custom form controls (using ngModel)</source>
          <target state="translated">사용자 지정 양식 컨트롤 구현 (ngModel 사용)</target>
        </trans-unit>
        <trans-unit id="bd06cedc31ae5b22c03264197e96ab3c19ffede6" translate="yes" xml:space="preserve">
          <source>Implicit Annotation</source>
          <target state="translated">암시 적 주석</target>
        </trans-unit>
        <trans-unit id="096ba44a184249033cb9a0bb4ffebe2657bba416" translate="yes" xml:space="preserve">
          <source>Implicit module which gets automatically added to each &lt;a href=&quot;auto/service/%24injector&quot;&gt;$injector&lt;/a&gt;.</source>
          <target state="translated">각 &lt;a href=&quot;auto/service/%24injector&quot;&gt;$ injector에&lt;/a&gt; 자동으로 추가되는 암시 적 모듈 .</target>
        </trans-unit>
        <trans-unit id="4723ddf746f3809e3b1477e490d52c8337146616" translate="yes" xml:space="preserve">
          <source>Implicitly from the function parameter names (has caveats)</source>
          <target state="translated">함수 매개 변수 이름에서 암시 적으로 (주의 사항)</target>
        </trans-unit>
        <trans-unit id="8eecc4f94a1b1fe69acddb79e183178a9e26df1a" translate="yes" xml:space="preserve">
          <source>Important things to notice:</source>
          <target state="translated">유의해야 할 사항 :</target>
        </trans-unit>
        <trans-unit id="3f98eeaab6110938e71c2879641215dabb0c66ef" translate="yes" xml:space="preserve">
          <source>In AngularJS applications, you move the job of filling page templates with data from the server to the client. The result is a system better structured for dynamic page updates. Below are the core features you'll use.</source>
          <target state="translated">AngularJS 애플리케이션에서 데이터로 페이지 템플리트를 채우는 작업을 서버에서 클라이언트로 이동합니다. 결과적으로 동적 페이지 업데이트를 위해보다 체계적인 시스템이 구성됩니다. 사용할 핵심 기능은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="b597dc43f8f9e0a6d2155495f4e5474be04320ca" translate="yes" xml:space="preserve">
          <source>In AngularJS, a Component is a special kind of &lt;a href=&quot;directive&quot;&gt;directive&lt;/a&gt; that uses a simpler configuration which is suitable for a component-based application structure.</source>
          <target state="translated">AngularJS에서 구성 요소는 구성 요소 기반 응용 프로그램 구조에 적합한 간단한 구성을 사용 하는 특별한 종류의 &lt;a href=&quot;directive&quot;&gt;지시문&lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="cbbc814b28ce35865c1e769b822e5f29dc4de827" translate="yes" xml:space="preserve">
          <source>In AngularJS, a Controller is defined by a JavaScript &lt;strong&gt;constructor function&lt;/strong&gt; that is used to augment the &lt;a href=&quot;scope&quot;&gt;AngularJS Scope&lt;/a&gt;.</source>
          <target state="translated">AngularJS에서 컨트롤러는 &lt;a href=&quot;scope&quot;&gt;AngularJS Scope&lt;/a&gt; 를 확장하는 데 사용되는 JavaScript &lt;strong&gt;생성자 함수로&lt;/strong&gt; 정의됩니다 .</target>
        </trans-unit>
        <trans-unit id="1a5efbd64f006dff6c25bf138c6b220b436c7355" translate="yes" xml:space="preserve">
          <source>In AngularJS, forms can be nested. This means that the outer form is valid when all of the child forms are valid as well. However, browsers do not allow nesting of &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; elements, so AngularJS provides the &lt;a href=&quot;ngform&quot;&gt;&lt;code&gt;ngForm&lt;/code&gt;&lt;/a&gt; directive, which behaves identically to &lt;code&gt;form&lt;/code&gt; but can be nested. Nested forms can be useful, for example, if the validity of a sub-group of controls needs to be determined.</source>
          <target state="translated">AngularJS에서 폼은 중첩 될 수 있습니다. 이는 모든 하위 양식도 유효 할 때 외부 양식이 유효 함을 의미합니다. 그러나 브라우저는 &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; 요소의 중첩을 허용하지 않으므로 AngularJS는 &lt;code&gt;form&lt;/code&gt; 과 동일하게 동작 하지만 중첩 될 수있는 &lt;a href=&quot;ngform&quot;&gt; &lt;code&gt;ngForm&lt;/code&gt; &lt;/a&gt; 지시문을 제공합니다 . 예를 들어 하위 그룹 제어의 유효성을 결정해야하는 경우 중첩 양식이 유용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="03844de6e8b1d50475106d63d0d10f3d8c611949" translate="yes" xml:space="preserve">
          <source>In AngularJS, templates are written with HTML that contains AngularJS-specific elements and attributes. AngularJS combines the template with information from the model and controller to render the dynamic view that a user sees in the browser.</source>
          <target state="translated">AngularJS에서 템플릿은 AngularJS 관련 요소 및 속성이 포함 된 HTML로 작성됩니다. AngularJS는 템플릿을 모델 및 컨트롤러의 정보와 결합하여 사용자가 브라우저에서 볼 수있는 동적 뷰를 렌더링합니다.</target>
        </trans-unit>
        <trans-unit id="a1f619517bf2bbf5ed7ed5d2dc4a8bbb5b243e43" translate="yes" xml:space="preserve">
          <source>In HTML Template Binding</source>
          <target state="translated">HTML 템플릿 바인딩에서</target>
        </trans-unit>
        <trans-unit id="2e80ed003402377171ce0924403b8c90164f9832" translate="yes" xml:space="preserve">
          <source>In HTML5 mode, the &lt;code&gt;$location&lt;/code&gt; service getters and setters interact with the browser URL address through the HTML5 history API. This allows for use of regular URL path and search segments, instead of their hashbang equivalents. If the HTML5 History API is not supported by a browser, the &lt;code&gt;$location&lt;/code&gt; service will fall back to using the hashbang URLs automatically. This frees you from having to worry about whether the browser displaying your app supports the history API or not; the &lt;code&gt;$location&lt;/code&gt; service transparently uses the best available option.</source>
          <target state="translated">HTML5 모드에서 &lt;code&gt;$location&lt;/code&gt; 서비스 게터 및 세터는 HTML5 기록 API를 통해 브라우저 URL 주소와 상호 작용합니다. 이를 통해 hashbang에 해당하는 대신 일반 URL 경로 및 검색 세그먼트를 사용할 수 있습니다. HTML5 History API가 브라우저에서 지원되지 않으면 &lt;code&gt;$location&lt;/code&gt; 서비스는 hashbang URL을 자동으로 사용합니다. 이를 통해 앱을 표시하는 브라우저가 기록 API를 지원하는지 여부에 대해 걱정할 필요가 없습니다. &lt;code&gt;$location&lt;/code&gt; 서비스를 투명하게 가장 적합한 옵션을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="c291168b9231a4e5740fc0f7c7f24071d1ef1309" translate="yes" xml:space="preserve">
          <source>In Jasmine we use the &lt;code&gt;describe&lt;/code&gt; function to group our tests together:</source>
          <target state="translated">Jasmine에서는 &lt;code&gt;describe&lt;/code&gt; 함수를 사용하여 테스트를 그룹화합니다.</target>
        </trans-unit>
        <trans-unit id="a823b45ca87464c258e471b13899cdf061f7a1d1" translate="yes" xml:space="preserve">
          <source>In JavaScript</source>
          <target state="translated">자바 스크립트에서</target>
        </trans-unit>
        <trans-unit id="bbd50f6eadbfc76eda0b9ce7716de2fb5a24fcf4" translate="yes" xml:space="preserve">
          <source>In JavaScript calling &lt;code&gt;toString()&lt;/code&gt; on a function returns the function definition. The definition can then be parsed and the function arguments can be extracted. This method of discovering annotations is disallowed when the injector is in strict mode. &lt;em&gt;NOTE:&lt;/em&gt; This does not work with minification, and obfuscation tools since these tools change the argument names.</source>
          <target state="translated">JavaScript 에서 함수의 &lt;code&gt;toString()&lt;/code&gt; 호출 은 함수 정의를 리턴합니다. 그런 다음 정의를 구문 분석하고 함수 인수를 추출 할 수 있습니다. 인젝터가 엄격 모드 인 경우 주석을 발견하는이 방법이 허용되지 않습니다. &lt;em&gt;참고 :&lt;/em&gt; 이 도구는 인수 이름을 변경하므로 축소 및 난독 화 도구에서는 작동하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="1b54f06dab3f6e1ac9b946e1f4b43d7b0403e35c" translate="yes" xml:space="preserve">
          <source>In a legacy browser, the URL changes to &lt;code&gt;/index.html#!/some?foo=bar&lt;/code&gt;</source>
          <target state="translated">기존 브라우저에서 URL은 &lt;code&gt;/index.html#!/some?foo=bar&lt;/code&gt; 로 변경됩니다.</target>
        </trans-unit>
        <trans-unit id="1c5b58dd4eafa0d4a18da8ca18883a8ad953b136" translate="yes" xml:space="preserve">
          <source>In a modern browser, the URL changes to &lt;code&gt;/some?foo=bar&lt;/code&gt;</source>
          <target state="translated">최신 브라우저에서는 URL이 &lt;code&gt;/some?foo=bar&lt;/code&gt; 변경됩니다.</target>
        </trans-unit>
        <trans-unit id="a3a7a9d6c6de28fb043fa931b25966d7356a56f7" translate="yes" xml:space="preserve">
          <source>In a more complex app, you can display multiple views within one main page using &quot;partials&quot; &amp;ndash; segments of template located in separate HTML files. You can use the &lt;a href=&quot;../api/ngroute/directive/ngview&quot;&gt;ngView&lt;/a&gt; directive to load partials based on configuration passed to the &lt;a href=&quot;../api/ngroute/service/%24route&quot;&gt;$route&lt;/a&gt; service. The &lt;a href=&quot;https://code.angularjs.org/1.7.8/docs/guide/tutorial/&quot;&gt;AngularJS tutorial&lt;/a&gt; shows this technique in steps seven and eight.</source>
          <target state="translated">보다 복잡한 앱에서는 별도의 HTML 파일에있는 템플릿 세그먼트 인 &quot;부분&quot;을 사용하여 하나의 기본 페이지 내에 여러보기를 표시 할 수 있습니다. &lt;a href=&quot;../api/ngroute/directive/ngview&quot;&gt;ngView&lt;/a&gt; 지시문을 사용 하여 &lt;a href=&quot;../api/ngroute/service/%24route&quot;&gt;$ route&lt;/a&gt; 서비스에 전달 된 구성에 따라 부분을로드 할 수 있습니다 . &lt;a href=&quot;https://code.angularjs.org/1.7.8/docs/guide/tutorial/&quot;&gt;AngularJS와는 튜토리얼&lt;/a&gt; 쇼를 단계 7-8에서이 기술을.</target>
        </trans-unit>
        <trans-unit id="0c0c40a1378e0d2f42f6d4f7be33566e03db6b53" translate="yes" xml:space="preserve">
          <source>In a simple app, the template consists of HTML, CSS, and AngularJS directives contained in just one HTML file (usually &lt;code&gt;index.html&lt;/code&gt;).</source>
          <target state="translated">간단한 앱에서 템플릿은 하나의 HTML 파일 (일반적으로 &lt;code&gt;index.html&lt;/code&gt; )에 포함 된 HTML, CSS 및 AngularJS 지시문으로 구성됩니다 .</target>
        </trans-unit>
        <trans-unit id="e674faa938f37f1939ece405364297bb3d2958a2" translate="yes" xml:space="preserve">
          <source>In a single module the order of execution is as follows:</source>
          <target state="translated">단일 모듈에서 실행 순서는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="749307d1cbfaf16fe4aabba520b82ae1902a1b6a" translate="yes" xml:space="preserve">
          <source>In addition the addition and removal of the CSS class, ngAnimate also provides two helper methods that we can use to further decorate the animation with CSS styles.</source>
          <target state="translated">CSS 클래스의 추가 및 제거 외에도 ngAnimate는 CSS 스타일로 애니메이션을 더 꾸미는 데 사용할 수있는 두 가지 도우미 메서드를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="6321ce8bd6ac1756913a159906eecc022bf64796" translate="yes" xml:space="preserve">
          <source>In addition to all the regular &lt;code&gt;Scope&lt;/code&gt; methods, the following helper methods are available:</source>
          <target state="translated">모든 일반적인 &lt;code&gt;Scope&lt;/code&gt; 방법 외에도 다음과 같은 도우미 방법을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b766677551b49d250621b2a334d198d39eec2e53" translate="yes" xml:space="preserve">
          <source>In addition to prioritization, ngMessages also allows for including messages from a remote or an inline template. This allows for generic collection of messages to be reused across multiple parts of an application.</source>
          <target state="translated">우선 순위 지정 외에도 ngMessages는 원격 또는 인라인 템플릿의 메시지를 포함 할 수 있습니다. 이를 통해 응용 프로그램의 여러 부분에서 일반 메시지 콜렉션을 재사용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="716143d7f33a871721bcf40bfd2db07a6cdb72d7" translate="yes" xml:space="preserve">
          <source>In addition to the above elements, tests may also contain helper functions to avoid duplicating code in the &lt;code&gt;it&lt;/code&gt; blocks.</source>
          <target state="translated">위의 요소 외에도 테스트에는 &lt;code&gt;it&lt;/code&gt; 블록에 코드가 중복되는 것을 피하기 위해 도우미 함수가 포함될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="470ea7a4e5c2fe6de7091aa6f7ec21ee51897509" translate="yes" xml:space="preserve">
          <source>In addition to the animation promise, we can also make use of animation-related callbacks within our directives and controller code by registering an event listener using the &lt;code&gt;$animate&lt;/code&gt; service. Let's say for example that an animation was triggered on our view routing controller to hook into that:</source>
          <target state="translated">애니메이션 약속 외에도 &lt;code&gt;$animate&lt;/code&gt; 서비스를 사용하여 이벤트 리스너를 등록하여 지시문 및 컨트롤러 코드 내에서 애니메이션 관련 콜백을 사용할 수 있습니다 . 예를 들어 뷰 라우팅 컨트롤러에서 애니메이션이 트리거되어 다음과 같이 연결되었다고 가정 해 보겠습니다.</target>
        </trans-unit>
        <trans-unit id="1699cbe96c0e4716d740c691996232ad4e5fe565" translate="yes" xml:space="preserve">
          <source>In addition, the browser's &lt;a href=&quot;https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest&quot;&gt;Same Origin Policy&lt;/a&gt; and &lt;a href=&quot;http://www.w3.org/TR/cors/&quot;&gt;Cross-Origin Resource Sharing (CORS)&lt;/a&gt; policy may further restrict whether the template is successfully loaded. For example, &lt;code&gt;ngInclude&lt;/code&gt; won't work for cross-domain requests on all browsers and for &lt;code&gt;file://&lt;/code&gt; access on some browsers.</source>
          <target state="translated">또한 브라우저의 &lt;a href=&quot;https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest&quot;&gt;동일한 원본 정책&lt;/a&gt; 및 &lt;a href=&quot;http://www.w3.org/TR/cors/&quot;&gt;CORS (Cross-Origin Resource Sharing)&lt;/a&gt; 정책은 템플릿이 성공적으로로드되는지 여부를 추가로 제한 할 수 있습니다. 예를 들어, &lt;code&gt;ngInclude&lt;/code&gt; 는 모든 브라우저의 도메인 간 요청 및 일부 브라우저의 &lt;code&gt;file://&lt;/code&gt; 액세스 에는 작동하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="a57b0290a74b9eb78ccc15559fe648219b660cfc" translate="yes" xml:space="preserve">
          <source>In addition, you can supply a &lt;code&gt;headers&lt;/code&gt; property in the config object passed when calling &lt;code&gt;$http(config)&lt;/code&gt;, which overrides the defaults without changing them globally.</source>
          <target state="translated">또한 &lt;code&gt;$http(config)&lt;/code&gt; 호출 할 때 전달 된 구성 객체에 &lt;code&gt;headers&lt;/code&gt; 속성을 제공 할 수 있습니다.이 속성은 전역 적으로 변경하지 않고 기본값을 재정의합니다.</target>
        </trans-unit>
        <trans-unit id="589af7f1aae2e3ad6aab5df9c86b6c8e31638595" translate="yes" xml:space="preserve">
          <source>In all of these examples we are going to assume this module definition:</source>
          <target state="translated">이 모든 예제에서이 모듈 정의를 가정합니다.</target>
        </trans-unit>
        <trans-unit id="2ba4bd29bc7d7975c3e58c60de7ab29abd9339c6" translate="yes" xml:space="preserve">
          <source>In an effort to keep synchronized with router changes in the new Angular, this implementation of the Component Router (ngComponentRouter module) has been deprecated and will not receive further updates. We are investigating backporting the Router for the new Angular to AngularJS, but alternatively, use the &lt;a href=&quot;../../ngroute&quot;&gt;&lt;code&gt;ngRoute&lt;/code&gt;&lt;/a&gt; module or community developed projects (e.g. &lt;a href=&quot;https://github.com/angular-ui/ui-router&quot;&gt;ui-router&lt;/a&gt;).</source>
          <target state="translated">새로운 Angular에서 라우터 변경 사항과 동기화를 유지하기 위해이 구성 요소 라우터 (ngComponentRouter 모듈) 구현은 더 이상 사용되지 않으며 추가 업데이트를받지 않습니다. 새로운 Angular에서 AngularJS로 라우터를 백 포트하는 방법을 조사하고 있지만 &lt;a href=&quot;../../ngroute&quot;&gt; &lt;code&gt;ngRoute&lt;/code&gt; &lt;/a&gt; 모듈 또는 커뮤니티 개발 프로젝트 (예 : &lt;a href=&quot;https://github.com/angular-ui/ui-router&quot;&gt;ui-router&lt;/a&gt; )를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="667b1ad2855f853d06e0711549d307d56aa4fdca" translate="yes" xml:space="preserve">
          <source>In an effort to keep synchronized with router changes in the new Angular, this implementation of the Component Router (ngComponentRouter module) has been deprecated and will not receive further updates. We are investigating backporting the Router for the new Angular to AngularJS, but alternatively, use the &lt;a href=&quot;ngroute&quot;&gt;&lt;code&gt;ngRoute&lt;/code&gt;&lt;/a&gt; module or community developed projects (e.g. &lt;a href=&quot;https://github.com/angular-ui/ui-router&quot;&gt;ui-router&lt;/a&gt;).</source>
          <target state="translated">새로운 Angular에서 라우터 변경 사항과 동기화를 유지하기 위해이 구성 요소 라우터 (ngComponentRouter 모듈) 구현은 더 이상 사용되지 않으며 추가 업데이트를받지 않습니다. 새로운 Angular에서 AngularJS로 라우터를 백 포트하는 방법을 조사하고 있지만 &lt;a href=&quot;ngroute&quot;&gt; &lt;code&gt;ngRoute&lt;/code&gt; &lt;/a&gt; 모듈 또는 커뮤니티 개발 프로젝트 (예 : &lt;a href=&quot;https://github.com/angular-ui/ui-router&quot;&gt;ui-router&lt;/a&gt; )를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="9386991172b647254fafb7d351016e610e121394" translate="yes" xml:space="preserve">
          <source>In any case, the value passed to the method should always reflect the current value of the control. For example, if you are calling &lt;code&gt;$setViewValue&lt;/code&gt; for an input element, you should pass the input DOM value. Otherwise, the control and the scope model become out of sync. It's also important to note that &lt;code&gt;$setViewValue&lt;/code&gt; does not call &lt;code&gt;$render&lt;/code&gt; or change the control's DOM value in any way. If we want to change the control's DOM value programmatically, we should update the &lt;code&gt;ngModel&lt;/code&gt; scope expression. Its new value will be picked up by the model controller, which will run it through the &lt;code&gt;$formatters&lt;/code&gt;, &lt;code&gt;$render&lt;/code&gt; it to update the DOM, and finally call &lt;code&gt;$validate&lt;/code&gt; on it.</source>
          <target state="translated">어쨌든, 메소드에 전달 된 값은 항상 컨트롤의 현재 값을 반영해야합니다. 예를 들어 입력 요소에 대해 &lt;code&gt;$setViewValue&lt;/code&gt; 를 호출하는 경우 입력 DOM 값을 전달해야합니다. 그렇지 않으면 컨트롤과 스코프 모델이 동기화되지 않습니다. 또한 &lt;code&gt;$setViewValue&lt;/code&gt; 는 &lt;code&gt;$render&lt;/code&gt; 호출 하거나 어떤 식 으로든 컨트롤의 DOM 값을 변경 하지 않습니다 . 프로그래밍 방식으로 컨트롤의 DOM 값을 변경하려면 &lt;code&gt;ngModel&lt;/code&gt; 범위 표현식을 업데이트해야 합니다. 새로운 값은 모델 컨트롤러에 의해 선택되어 &lt;code&gt;$formatters&lt;/code&gt; , &lt;code&gt;$render&lt;/code&gt; 를 통해 DOM을 업데이트하고 &lt;code&gt;$validate&lt;/code&gt; 를 호출 합니다.</target>
        </trans-unit>
        <trans-unit id="68fe7d927164f0e298a884af50c62aebe47691da" translate="yes" xml:space="preserve">
          <source>In both examples, the &lt;strong&gt;&lt;code&gt;track by&lt;/code&gt;&lt;/strong&gt; expression is applied successfully to each &lt;code&gt;item&lt;/code&gt; in the &lt;code&gt;items&lt;/code&gt; array. Because the selected option has been set programmatically in the controller, the &lt;strong&gt;&lt;code&gt;track by&lt;/code&gt;&lt;/strong&gt; expression is also applied to the &lt;code&gt;ngModel&lt;/code&gt; value. In the first example, the &lt;code&gt;ngModel&lt;/code&gt; value is &lt;code&gt;items[0]&lt;/code&gt; and the &lt;strong&gt;&lt;code&gt;track by&lt;/code&gt;&lt;/strong&gt; expression evaluates to &lt;code&gt;items[0].id&lt;/code&gt; with no issue. In the second example, the &lt;code&gt;ngModel&lt;/code&gt; value is &lt;code&gt;items[0].subItem&lt;/code&gt; and the &lt;strong&gt;&lt;code&gt;track by&lt;/code&gt;&lt;/strong&gt; expression evaluates to &lt;code&gt;items[0].subItem.id&lt;/code&gt; (which is undefined). As a result, the model value is not matched against any &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; and the &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; appears as having no selected value.</source>
          <target state="translated">두 예제 모두에서 &lt;strong&gt; &lt;code&gt;track by&lt;/code&gt; &lt;/strong&gt; 표현식이 &lt;code&gt;items&lt;/code&gt; 배열의 각 &lt;code&gt;item&lt;/code&gt; 에 성공적으로 적용 됩니다. 선택한 옵션이 컨트롤러에서 프로그래밍 방식으로 설정되었으므로 &lt;strong&gt; &lt;code&gt;track by&lt;/code&gt; &lt;/strong&gt; 표현식이 &lt;code&gt;ngModel&lt;/code&gt; 값 에도 적용됩니다 . 첫 번째 예에서 &lt;code&gt;ngModel&lt;/code&gt; 값은 &lt;code&gt;items[0]&lt;/code&gt; 이고 표현 식별 &lt;strong&gt; &lt;code&gt;track by&lt;/code&gt; &lt;/strong&gt; 문제없이 &lt;code&gt;items[0].id&lt;/code&gt; 로 평가됩니다 . 두 번째 예에서, &lt;code&gt;ngModel&lt;/code&gt; 의 값은 &lt;code&gt;items[0].subItem&lt;/code&gt; 및 &lt;strong&gt; &lt;code&gt;track by&lt;/code&gt; &lt;/strong&gt; 을 표현들을 평가 &lt;code&gt;items[0].subItem.id&lt;/code&gt; &lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;(정의되지 않음). 결과적으로, 모델 값이 &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; 과 일치하지 않으며 &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; 는 선택된 값이없는 것으로 나타납니다.</target>
        </trans-unit>
        <trans-unit id="e3e1a3ce31bec47d5200ef4cf60ace5abb3ccfe7" translate="yes" xml:space="preserve">
          <source>In case of parameter name collision, &lt;code&gt;path&lt;/code&gt; params take precedence over &lt;code&gt;search&lt;/code&gt; params.</source>
          <target state="translated">매개 변수 이름 충돌의 경우 &lt;code&gt;path&lt;/code&gt; 매개 변수가 &lt;code&gt;search&lt;/code&gt; 매개 변수 보다 우선 합니다.</target>
        </trans-unit>
        <trans-unit id="c26867c8ed3c13342fd31b32bf994a5c01045f08" translate="yes" xml:space="preserve">
          <source>In case the &lt;a href=&quot;../directive/ngmodeloptions&quot;&gt;ngModelOptions&lt;/a&gt; directive is used with &lt;code&gt;updateOn&lt;/code&gt; and the &lt;code&gt;default&lt;/code&gt; trigger is not listed, all those actions will remain pending until one of the &lt;code&gt;updateOn&lt;/code&gt; events is triggered on the DOM element. All these actions will be debounced if the &lt;a href=&quot;../directive/ngmodeloptions&quot;&gt;ngModelOptions&lt;/a&gt; directive is used with a custom debounce for this particular event. Note that a &lt;code&gt;$digest&lt;/code&gt; is only triggered once the &lt;code&gt;updateOn&lt;/code&gt; events are fired, or if &lt;code&gt;debounce&lt;/code&gt; is specified, once the timer runs out.</source>
          <target state="translated">경우에 &lt;a href=&quot;../directive/ngmodeloptions&quot;&gt;ngModelOptions의&lt;/a&gt; 지시어와 함께 사용 &lt;code&gt;updateOn&lt;/code&gt; 과 &lt;code&gt;default&lt;/code&gt; 트리거가 나열되지 않은, 모든 작업은 한 때까지 보류 유지됩니다 &lt;code&gt;updateOn&lt;/code&gt; 의 이벤트가 DOM 요소에 트리거됩니다. &lt;a href=&quot;../directive/ngmodeloptions&quot;&gt;ngModelOptions&lt;/a&gt; 지시문이이 특정 이벤트에 대한 사용자 정의 디 바운스와 함께 사용 되면 이러한 모든 조치가 디 바운스됩니다 . &amp;bull; 그래도 참고 &lt;code&gt;$digest&lt;/code&gt; 단지 한 번 실행됩니다 &lt;code&gt;updateOn&lt;/code&gt; 의 이벤트는 해고, 또는 경우 &lt;code&gt;debounce&lt;/code&gt; 타이머가 다 떨어지기 일단 지정됩니다.</target>
        </trans-unit>
        <trans-unit id="dbb2128824b196014baa5c500781714a968857a4" translate="yes" xml:space="preserve">
          <source>In cases like the following, links are not rewritten; instead, the browser will perform a full page reload to the original link.</source>
          <target state="translated">다음과 같은 경우에는 링크가 다시 작성되지 않습니다. 대신 브라우저는 원본 링크로 전체 페이지를 다시로드합니다.</target>
        </trans-unit>
        <trans-unit id="eb1595edfe03ceecabe189afd4c1478336da4f55" translate="yes" xml:space="preserve">
          <source>In cases where both backend definitions and request expectations are specified during unit testing, the request expectations are evaluated first.</source>
          <target state="translated">단위 테스트 중에 백엔드 정의와 요청 예상이 모두 지정된 경우 요청 예상이 먼저 평가됩니다.</target>
        </trans-unit>
        <trans-unit id="bf55b6216c29164cc9616d092551ba62d75a0676" translate="yes" xml:space="preserve">
          <source>In complex applications it's possible that dependencies between &lt;code&gt;$onChanges&lt;/code&gt; hooks and bindings will result in several iterations of calls to these hooks. However if an application needs more than the default 10 iterations to stabilize then you should investigate what is causing the model to continuously change during the &lt;code&gt;$onChanges&lt;/code&gt; hook execution.</source>
          <target state="translated">복잡한 응용 프로그램에서 &lt;code&gt;$onChanges&lt;/code&gt; 후크와 바인딩 간의 종속성 으로 인해 이러한 후크에 대한 호출이 여러 번 반복 될 수 있습니다. 그러나 애플리케이션이 안정화하기 위해 기본 10 회 이상의 반복이 필요한 경우 &lt;code&gt;$onChanges&lt;/code&gt; 후크 실행 중에 모델이 지속적으로 변경되는 원인을 조사해야합니다 .</target>
        </trans-unit>
        <trans-unit id="572607a7218cef33ac940e82902038d02ae937e5" translate="yes" xml:space="preserve">
          <source>In complex applications it's possible that the dependencies between &lt;code&gt;$watch&lt;/code&gt;s will result in several digest iterations. However if an application needs more than the default 10 digest iterations for its model to stabilize then you should investigate what is causing the model to continuously change during the digest.</source>
          <target state="translated">복잡한 응용 프로그램에서 &lt;code&gt;$watch&lt;/code&gt; 사이의 종속성으로 인해 몇 가지 다이제스트 반복이 발생할 수 있습니다. 그러나 애플리케이션이 모델을 안정화하기 위해 기본 10 개 이상의 다이제스트 반복을 필요로하는 경우 다이제스트 중에 모델이 지속적으로 변경되는 원인을 조사해야합니다.</target>
        </trans-unit>
        <trans-unit id="a6327a6402c02d7879a52df32482acae297464b3" translate="yes" xml:space="preserve">
          <source>In general it's possible to apply more than one directive to one element, but there might be limitations depending on the type of scope required by the directives. The following points will help explain these limitations. For simplicity only two directives are taken into account, but it is also applicable for several directives:</source>
          <target state="translated">일반적으로 하나의 요소에 둘 이상의 지시문을 적용 할 수 있지만 지시문에 필요한 범위 유형에 따라 제한이있을 수 있습니다. 다음은 이러한 제한 사항을 설명하는 데 도움이됩니다. 단순화를 위해 두 개의 지시문 만 고려되지만 여러 지시문에도 적용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d65eb267b1b0354141999d7194c0a15d48c760f2" translate="yes" xml:space="preserve">
          <source>In general, a Controller shouldn't try to do too much. It should contain only the business logic needed for a single view.</source>
          <target state="translated">일반적으로 컨트롤러는 너무 많은 일을 시도해서는 안됩니다. 단일 뷰에 필요한 비즈니스 로직 만 포함해야합니다.</target>
        </trans-unit>
        <trans-unit id="12b68495b61d68a58ae4306b8d4fa6a9c7a5a8c9" translate="yes" xml:space="preserve">
          <source>In general, the match between the model and an option is evaluated by strictly comparing the model value against the value of the available options.</source>
          <target state="translated">일반적으로 모델과 옵션 간의 일치는 사용 가능한 옵션의 값과 모델 값을 엄격하게 비교하여 평가됩니다.</target>
        </trans-unit>
        <trans-unit id="c9ab8714b380fd88731ce6a010864a6dad2a5821" translate="yes" xml:space="preserve">
          <source>In general, this applies only to filters that take &lt;a href=&quot;https://developer.mozilla.org/docs/Glossary/Primitive&quot;&gt;primitive values&lt;/a&gt; as inputs. Filters that receive &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Objects&quot;&gt;Objects&lt;/a&gt; as input are executed on each &lt;code&gt;$digest&lt;/code&gt;, as it would be too costly to track if the inputs have changed.</source>
          <target state="translated">일반적으로 이는 &lt;a href=&quot;https://developer.mozilla.org/docs/Glossary/Primitive&quot;&gt;기본 값&lt;/a&gt; 을 입력 으로 사용하는 필터에만 적용됩니다 . 입력으로 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Objects&quot;&gt;오브젝트&lt;/a&gt; 를 수신하는 필터 는 입력이 변경되었는지 추적하기에는 너무 비용이 많이 들기 때문에 각 &lt;code&gt;$digest&lt;/code&gt; 에서 실행됩니다 .</target>
        </trans-unit>
        <trans-unit id="223c150544e590c3b09b2f83432104d5c677b5fc" translate="yes" xml:space="preserve">
          <source>In its current implementation, we'd need to create a different controller each time in order to re-use such a directive:</source>
          <target state="translated">현재 구현에서는 이러한 지시문을 재사용하기 위해 매번 다른 컨트롤러를 만들어야합니다.</target>
        </trans-unit>
        <trans-unit id="aaf87ac010abced2fa8d3d211eaa4cf5c460607b" translate="yes" xml:space="preserve">
          <source>In its default setup, ngAria for &lt;code&gt;ngShow&lt;/code&gt; is actually redundant. It toggles &lt;code&gt;aria-hidden&lt;/code&gt; on the directive when it is hidden or shown. However, the default CSS of &lt;code&gt;display: none !important&lt;/code&gt;, already hides child elements from a screen reader. It becomes more useful when the default CSS is overridden with properties that don&amp;rsquo;t affect assistive technologies, such as &lt;code&gt;opacity&lt;/code&gt; or &lt;code&gt;transform&lt;/code&gt;. By toggling &lt;code&gt;aria-hidden&lt;/code&gt; dynamically with ngAria, we can ensure content visually hidden with this technique will not be read aloud in a screen reader.</source>
          <target state="translated">기본 설정에서 ngShow의 &lt;code&gt;ngShow&lt;/code&gt; 는 실제로 중복됩니다. 지시문이 숨겨 지거나 표시 될 때 지시문에서 &lt;code&gt;aria-hidden&lt;/code&gt; 을 토글 합니다. 그러나 &lt;code&gt;display: none !important&lt;/code&gt; 의 기본 CSS : none! important 는 이미 스크린 리더에서 자식 요소를 숨 깁니다. &lt;code&gt;opacity&lt;/code&gt; 또는 &lt;code&gt;transform&lt;/code&gt; 과 같은 보조 기술에 영향을 미치지 않는 속성으로 기본 CSS를 재정의하는 경우 더 유용합니다 . ngAria를 사용하여 &lt;code&gt;aria-hidden&lt;/code&gt; 을 동적으로 전환 하여이 기술로 시각적으로 숨겨진 컨텐츠를 화면 판독기에서 소리내어 읽지 않도록 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9ac48986b940877fd638b3f87daf87350f3cd59a" translate="yes" xml:space="preserve">
          <source>In many cases, &lt;a href=&quot;ngrepeat&quot;&gt;ngRepeat&lt;/a&gt; can be used on &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; elements instead of &lt;code&gt;ngOptions&lt;/code&gt; to achieve a similar result. However, &lt;code&gt;ngOptions&lt;/code&gt; provides some benefits:</source>
          <target state="translated">많은 경우에, &lt;a href=&quot;ngrepeat&quot;&gt;ngRepeat을&lt;/a&gt; 사용할 수있다 &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; 대신 요소 &lt;code&gt;ngOptions&lt;/code&gt; 은 유사한 결과를 얻을 수있다. 그러나 &lt;code&gt;ngOptions&lt;/code&gt; 는 다음과 같은 이점이 있습니다.</target>
        </trans-unit>
        <trans-unit id="816f5a467069e8684ca6c8eac56b04421f4f9aac" translate="yes" xml:space="preserve">
          <source>In many cases, &lt;code&gt;ngRepeat&lt;/code&gt; can be used on &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; elements instead of &lt;a href=&quot;ngoptions&quot;&gt;ngOptions&lt;/a&gt; to achieve a similar result. However, &lt;code&gt;ngOptions&lt;/code&gt; provides some benefits:</source>
          <target state="translated">많은 경우에, &lt;code&gt;ngRepeat&lt;/code&gt; 을 사용할 수있다 &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; 대신 요소 &lt;a href=&quot;ngoptions&quot;&gt;ngOptions은&lt;/a&gt; 유사한 결과를 얻을 수있다. 그러나 &lt;code&gt;ngOptions&lt;/code&gt; 는 다음과 같은 이점이 있습니다.</target>
        </trans-unit>
        <trans-unit id="23a74c3d278c8929951ba5893b635995005f8e65" translate="yes" xml:space="preserve">
          <source>In most cases, &lt;a href=&quot;../api/ng/provider/%24compileprovider#directive.html&quot;&gt;directives&lt;/a&gt; and scopes interact but do not create new instances of scope. However, some directives, such as &lt;a href=&quot;../api/ng/directive/ngcontroller&quot;&gt;ng-controller&lt;/a&gt; and &lt;a href=&quot;../api/ng/directive/ngrepeat&quot;&gt;ng-repeat&lt;/a&gt;, create new child scopes and attach the child scope to the corresponding DOM element.</source>
          <target state="translated">대부분의 경우 &lt;a href=&quot;../api/ng/provider/%24compileprovider#directive.html&quot;&gt;지시문&lt;/a&gt; 과 범위는 상호 작용하지만 범위의 새 인스턴스를 만들지는 않습니다. 그러나 &lt;a href=&quot;../api/ng/directive/ngcontroller&quot;&gt;ng-controller&lt;/a&gt; 및 &lt;a href=&quot;../api/ng/directive/ngrepeat&quot;&gt;ng-repeat&lt;/a&gt; 와 같은 일부 지시문은 새 자식 범위를 만들고 자식 범위를 해당 DOM 요소에 연결합니다.</target>
        </trans-unit>
        <trans-unit id="a6d61eeade717370e6792f08603d2f769bf7909b" translate="yes" xml:space="preserve">
          <source>In order for &lt;code&gt;yOffset&lt;/code&gt; to work properly, scrolling should take place on the document's root and not some child element.</source>
          <target state="translated">위해에 대한 &lt;code&gt;yOffset&lt;/code&gt; 는 문서의 루트에 장소가 아닌 일부 자식 요소를 취해야한다 스크롤 제대로 작동합니다.</target>
        </trans-unit>
        <trans-unit id="43159b000f095713d7995347d0aa0418f3baf129" translate="yes" xml:space="preserve">
          <source>In order for custom control to work with &lt;code&gt;ngModel&lt;/code&gt; and to achieve two-way data-binding it needs to:</source>
          <target state="translated">&lt;code&gt;ngModel&lt;/code&gt; 에서 사용자 정의 제어를 수행하고 양방향 데이터 바인딩을 수행하려면 다음을 수행해야합니다.</target>
        </trans-unit>
        <trans-unit id="93e76425878be6a245b2b5122baa300334e1d96a" translate="yes" xml:space="preserve">
          <source>In order for the injector to know how to create and wire together all of these objects, it needs a registry of &quot;recipes&quot;. Each recipe has an identifier of the object and the description of how to create this object.</source>
          <target state="translated">인젝터가 이러한 모든 오브젝트를 작성하고 함께 연결하는 방법을 알기 위해서는 &quot;레시피&quot;레지스트리가 필요합니다. 각 레시피에는 객체의 식별자와이 객체를 생성하는 방법에 대한 설명이 있습니다.</target>
        </trans-unit>
        <trans-unit id="41ca1c0cfc3250833efe87b946e6688542d335f0" translate="yes" xml:space="preserve">
          <source>In order to answer such a question it is very important that we can isolate the unit of code under test. That is because when we are testing the sort function we don't want to be forced into creating related pieces such as the DOM elements, or making any XHR calls to fetch the data to sort.</source>
          <target state="translated">이러한 질문에 답하기 위해서는 테스트중인 코드 단위를 분리 할 수 ​​있어야합니다. 정렬 함수를 테스트 할 때 DOM 요소와 같은 관련 조각을 작성하거나 정렬 할 데이터를 페치하기 위해 XHR 호출을 수행하지 않아도되기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="83939e2bc9f9e5b599175fbfb5fec4456c3a2747" translate="yes" xml:space="preserve">
          <source>In order to enable animations the &lt;code&gt;ngAnimate&lt;/code&gt; module has to be loaded.</source>
          <target state="translated">애니메이션을 활성화하려면 &lt;code&gt;ngAnimate&lt;/code&gt; 모듈을로드해야합니다.</target>
        </trans-unit>
        <trans-unit id="d6563365aaa2bf57b65af1a6e2ab56f748edc001" translate="yes" xml:space="preserve">
          <source>In order to ensure that the sorting will be deterministic across platforms, if none of the specified predicates can distinguish between two items, &lt;code&gt;orderBy&lt;/code&gt; will automatically introduce a dummy predicate that returns the item's index as &lt;code&gt;value&lt;/code&gt;. (If you are using a custom comparator, make sure it can handle this predicate as well.)</source>
          <target state="translated">지정된 술어가 두 항목을 구별 할 수없는 경우 &lt;code&gt;orderBy&lt;/code&gt; 는 플랫폼에서 정렬이 결정론적일 수 있도록하기 위해 item의 인덱스를 &lt;code&gt;value&lt;/code&gt; 로 리턴하는 더미 술어를 자동으로 도입 합니다 . (사용자 정의 비교기를 사용하는 경우이 술어도 처리 할 수 ​​있는지 확인하십시오.)</target>
        </trans-unit>
        <trans-unit id="ba07d896b98bd38aa92e1a51979d43b5762c90ac" translate="yes" xml:space="preserve">
          <source>In order to make the definition easier, components enforce best practices like use of &lt;code&gt;controllerAs&lt;/code&gt;, &lt;code&gt;bindToController&lt;/code&gt;. They always have &lt;strong&gt;isolate scope&lt;/strong&gt; and are restricted to elements.</source>
          <target state="translated">정의를 쉽게하기 위해 구성 요소는 &lt;code&gt;controllerAs&lt;/code&gt; , &lt;code&gt;bindToController&lt;/code&gt; 사용과 같은 모범 사례를 시행 합니다. 이들은 항상 &lt;strong&gt;격리 범위를&lt;/strong&gt; 가지며 요소로 제한됩니다.</target>
        </trans-unit>
        <trans-unit id="92f3760b5ddb703592c1c344abf1808f65b67a46" translate="yes" xml:space="preserve">
          <source>In order to prevent collisions in environments where multiple AngularJS apps share the same domain or subdomain, we recommend that each application uses a unique cookie name.</source>
          <target state="translated">여러 AngularJS 앱이 동일한 도메인 또는 하위 도메인을 공유하는 환경에서 충돌을 방지하려면 각 애플리케이션이 고유 한 쿠키 이름을 사용하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="c431fcb3d2dd29f9f6877e5863d11e1c5282ac1f" translate="yes" xml:space="preserve">
          <source>In order to react to events or execute computation in the view we must provide behavior to the scope. We add behavior to the scope by attaching methods to the &lt;code&gt;$scope&lt;/code&gt; object. These methods are then available to be called from the template/view.</source>
          <target state="translated">이벤트에 반응하거나보기에서 계산을 실행하려면 범위에 동작을 제공해야합니다. 메소드를 &lt;code&gt;$scope&lt;/code&gt; 객체 에 연결하여 범위에 동작을 추가 합니다. 그런 다음 템플릿 / 뷰에서 이러한 메소드를 호출 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="64d69397877d61d2ffddceb4be6f794cc00dd86f" translate="yes" xml:space="preserve">
          <source>In order to show error messages corresponding to &lt;code&gt;myField&lt;/code&gt; we first create an element with an &lt;code&gt;ngMessages&lt;/code&gt; attribute set to the &lt;code&gt;$error&lt;/code&gt; object owned by the &lt;code&gt;myField&lt;/code&gt; input in our &lt;code&gt;myForm&lt;/code&gt; form.</source>
          <target state="translated">&lt;code&gt;myField&lt;/code&gt; 에 해당하는 오류 메시지를 표시하기 위해 먼저 &lt;code&gt;myForm&lt;/code&gt; 양식 의 &lt;code&gt;myField&lt;/code&gt; 입력이 소유 한 &lt;code&gt;$error&lt;/code&gt; 객체로 설정된 &lt;code&gt;ngMessages&lt;/code&gt; 속성을 가진 요소를 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="38ca262d53b30c1c185b66f2480b52ad395cd555" translate="yes" xml:space="preserve">
          <source>In order to:</source>
          <target state="translated">하기 위해 :</target>
        </trans-unit>
        <trans-unit id="cee56acce42439af4e48556eac71fd143eec3563" translate="yes" xml:space="preserve">
          <source>In our &lt;code&gt;link&lt;/code&gt; function, we want to update the displayed time once a second, or whenever a user changes the time formatting string that our directive binds to. We will use the &lt;code&gt;$interval&lt;/code&gt; service to call a handler on a regular basis. This is easier than using &lt;code&gt;$timeout&lt;/code&gt; but also works better with end-to-end testing, where we want to ensure that all &lt;code&gt;$timeout&lt;/code&gt;s have completed before completing the test. We also want to remove the &lt;code&gt;$interval&lt;/code&gt; if the directive is deleted so we don't introduce a memory leak.</source>
          <target state="translated">우리에 &lt;code&gt;link&lt;/code&gt; 기능, 우리는 두 번째 한 번에 표시되는 시간을 업데이트 할, 또는 사용자가 문자열을 포맷 시간을 변경할 때마다 우리의 지침 귀속에 그. &lt;code&gt;$interval&lt;/code&gt; 서비스를 사용하여 정기적으로 핸들러를 호출합니다. 이는 &lt;code&gt;$timeout&lt;/code&gt; 사용하는 것보다 쉽지만 end-to-end 테스트에서 더 효과적입니다. 여기서 테스트를 완료하기 전에 모든 &lt;code&gt;$timeout&lt;/code&gt; 이 완료 되었는지 확인하려고합니다 . 또한 지시어가 삭제되면 &lt;code&gt;$interval&lt;/code&gt; 을 제거하여 메모리 누수가 발생하지 않도록합니다.</target>
        </trans-unit>
        <trans-unit id="46cfb3934a0deeee576ac8393203dd312b39eb1f" translate="yes" xml:space="preserve">
          <source>In practice</source>
          <target state="translated">실제로</target>
        </trans-unit>
        <trans-unit id="23f474e3365b6841390e2d04f8b7b183101fc5b0" translate="yes" xml:space="preserve">
          <source>In practice, flickering can appear when nesting elements with structural animations such as &lt;code&gt;ngIf&lt;/code&gt; into elements that have class-based animations such as &lt;code&gt;ngClass&lt;/code&gt;.</source>
          <target state="translated">같은 구성 요소 애니메이션 중첩 때 실제로 플리커 게재 &lt;code&gt;ngIf&lt;/code&gt; 같은 클래스 기반 애니메이션이 요소로 &lt;code&gt;ngClass&lt;/code&gt; 를 .</target>
        </trans-unit>
        <trans-unit id="4b6b3f1479d15949f893579bddd17a5c4695b028" translate="yes" xml:space="preserve">
          <source>In privileged contexts, directives and code will bind to the result of &lt;a href=&quot;%24sce#getTrusted.html&quot;&gt;$sce.getTrusted(context, value)&lt;/a&gt; rather than to the value directly. Think of this function as a way to enforce the required security context in your data sink. Directives use &lt;a href=&quot;%24sce#parseAs.html&quot;&gt;$sce.parseAs&lt;/a&gt; rather than &lt;code&gt;$parse&lt;/code&gt; to watch attribute bindings, which performs the &lt;a href=&quot;%24sce#getTrusted.html&quot;&gt;$sce.getTrusted&lt;/a&gt; behind the scenes on non-constant literals. Also, when binding without directives, AngularJS will understand the context of your bindings automatically.</source>
          <target state="translated">특권 컨텍스트에서 지시문과 코드는 &lt;a href=&quot;%24sce#getTrusted.html&quot;&gt;값이&lt;/a&gt; 아닌 $ sce.getTrusted (context, value) 의 결과에 바인딩 됩니다. 이 기능을 데이터 싱크에 필요한 보안 컨텍스트를 적용하는 방법으로 생각하십시오. 지시문은 속성 바인딩을 감시하기 위해 &lt;code&gt;$parse&lt;/code&gt; 대신 &lt;a href=&quot;%24sce#parseAs.html&quot;&gt;$ sce.parseAs를&lt;/a&gt; 사용 합니다.이 속성은 상수가 아닌 리터럴에서 뒤에서 &lt;a href=&quot;%24sce#getTrusted.html&quot;&gt;$ sce.getTrusted&lt;/a&gt; 를 수행합니다 . 또한 지시문없이 바인딩하면 AngularJS는 바인딩 컨텍스트를 자동으로 이해합니다.</target>
        </trans-unit>
        <trans-unit id="ad0a78c7ea83ece459db4a6b9e0ec41e1d081220" translate="yes" xml:space="preserve">
          <source>In some cases you can also rely upon automatic sanitization of untrusted values - see below.</source>
          <target state="translated">경우에 따라 신뢰할 수없는 값의 자동 살균에 의존 할 수도 있습니다 (아래 참조).</target>
        </trans-unit>
        <trans-unit id="ced5561a26558d4d24bd44d63f6ee1bbb96f6f9e" translate="yes" xml:space="preserve">
          <source>In templates, filters are only executed when their inputs have changed. This is more performant than executing a filter on each &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24digest.html&quot;&gt;&lt;code&gt;$digest&lt;/code&gt;&lt;/a&gt; as is the case with &lt;a href=&quot;expression&quot;&gt;expressions&lt;/a&gt;.</source>
          <target state="translated">템플릿에서 필터는 입력이 변경된 경우에만 실행됩니다. 이것은 &lt;a href=&quot;expression&quot;&gt;expression&lt;/a&gt; 의 경우와 같이 각 &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24digest.html&quot;&gt; &lt;code&gt;$digest&lt;/code&gt; &lt;/a&gt; 에서 필터를 실행하는 것보다 성능이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="b3df173ca7c9246d6aeebf7b82e7ed92a41a33d7" translate="yes" xml:space="preserve">
          <source>In tests you can use &lt;a href=&quot;../../ngmock/service/%24interval#flush.html&quot;&gt;&lt;code&gt;$interval.flush(millis)&lt;/code&gt;&lt;/a&gt; to move forward by &lt;code&gt;millis&lt;/code&gt; milliseconds and trigger any functions scheduled to run in that time.</source>
          <target state="translated">테스트에서 &lt;a href=&quot;../../ngmock/service/%24interval#flush.html&quot;&gt; &lt;code&gt;$interval.flush(millis)&lt;/code&gt; &lt;/a&gt; 를 사용 하여 &lt;code&gt;millis&lt;/code&gt; 초 단위 로 앞으로 이동 하고 해당 시간에 실행되도록 예약 된 기능을 트리거 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e6d6b4db41ec26c414ad5cfb1ba6c62e946416d6" translate="yes" xml:space="preserve">
          <source>In tests you can use &lt;a href=&quot;../../ngmock/service/%24timeout&quot;&gt;&lt;code&gt;$timeout.flush()&lt;/code&gt;&lt;/a&gt; to synchronously flush the queue of deferred functions.</source>
          <target state="translated">테스트에서 &lt;a href=&quot;../../ngmock/service/%24timeout&quot;&gt; &lt;code&gt;$timeout.flush()&lt;/code&gt; &lt;/a&gt; 를 사용 하여 지연된 함수 큐를 동 기적으로 플러시 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="9afa5f460758c21238a4ac6be52ef14781fd6696" translate="yes" xml:space="preserve">
          <source>In that case, it is necessary to intercept the &lt;em&gt;initial&lt;/em&gt; compilation of the element:</source>
          <target state="translated">이 경우 요소 의 &lt;em&gt;초기&lt;/em&gt; 컴파일 을 가로 챌 필요가 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f664cca1d4ca20781d1fa172027d128144824737" translate="yes" xml:space="preserve">
          <source>In the above example &lt;code&gt;SomeClass&lt;/code&gt; is not concerned with creating or locating the &lt;code&gt;greeter&lt;/code&gt; dependency, it is simply handed the &lt;code&gt;greeter&lt;/code&gt; when it is instantiated.</source>
          <target state="translated">위의 예제에서 &lt;code&gt;SomeClass&lt;/code&gt; 는 &lt;code&gt;greeter&lt;/code&gt; 의존성 을 생성하거나 찾는 것과 관련이 없으며 , 인스턴스화 될 때 단순히 &lt;code&gt;greeter&lt;/code&gt; 전달합니다 .</target>
        </trans-unit>
        <trans-unit id="d6351961d5f7c7bedc28b2fb3f9404a2fa13777f" translate="yes" xml:space="preserve">
          <source>In the above example notice that the &lt;code&gt;MyController&lt;/code&gt; assigns &lt;code&gt;World&lt;/code&gt; to the &lt;code&gt;username&lt;/code&gt; property of the scope. The scope then notifies the &lt;code&gt;input&lt;/code&gt; of the assignment, which then renders the input with username pre-filled. This demonstrates how a controller can write data into the scope.</source>
          <target state="translated">위의 예제에서 &lt;code&gt;MyController&lt;/code&gt; 는 범위 의 &lt;code&gt;username&lt;/code&gt; 속성에 &lt;code&gt;World&lt;/code&gt; 를 할당합니다 . 그런 다음 범위 는 할당 의 &lt;code&gt;input&lt;/code&gt; 을 알리고 사용자 이름이 미리 입력 된 입력을 렌더링합니다. 이것은 컨트롤러가 스코프에 데이터를 쓰는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="e594bf894541dbfbfa549d5ac280e9f9712c2570" translate="yes" xml:space="preserve">
          <source>In the case of AngularJS' SCE service, one uses &lt;a href=&quot;%24sce#trustAs.html&quot;&gt;$sce.trustAs&lt;/a&gt; (and shorthand methods such as &lt;a href=&quot;%24sce#trustAsHtml.html&quot;&gt;$sce.trustAsHtml&lt;/a&gt;, etc.) to build the trusted versions of your values.</source>
          <target state="translated">AngularJS의 SCE 서비스의 경우 &lt;a href=&quot;%24sce#trustAs.html&quot;&gt;$ sce.trustAs&lt;/a&gt; (및 &lt;a href=&quot;%24sce#trustAsHtml.html&quot;&gt;$ sce.trustAsHtml&lt;/a&gt; 등과 같은 속기 방법 )를 사용하여 신뢰할 수있는 버전의 값을 작성합니다.</target>
        </trans-unit>
        <trans-unit id="959810922e73332af4b6023c346f0a5b1acbe45e" translate="yes" xml:space="preserve">
          <source>In the code above, we see how the &lt;code&gt;apiToken&lt;/code&gt; service is defined via the Factory recipe that depends on the &lt;code&gt;clientId&lt;/code&gt; service. The factory service then uses NSA-proof encryption to produce an authentication token.</source>
          <target state="translated">위의 코드에서 &lt;code&gt;apiToken&lt;/code&gt; 서비스가 &lt;code&gt;clientId&lt;/code&gt; 서비스 에 의존하는 팩토리 레시피를 통해 정의되는 방식을 봅니다 . 팩토리 서비스는 NSA 증명 암호화를 사용하여 인증 토큰을 생성합니다.</target>
        </trans-unit>
        <trans-unit id="84f8e46a5ef8dfd7b5fa4f69ef21284f0f989e10" translate="yes" xml:space="preserve">
          <source>In the example HTML code above the message that is set on required will override the corresponding required message defined within the remote template. Therefore, with particular input fields (such email addresses, date fields, autocomplete inputs, etc...), specialized error messages can be applied while more generic messages can be used to handle other, more general input errors.</source>
          <target state="translated">위의 HTML 코드 예제에서 required로 설정된 메시지는 원격 템플릿 내에 정의 된 해당 필수 메시지를 무시합니다. 따라서 특정 입력 필드 (예 : 전자 메일 주소, 날짜 필드, 자동 완성 입력 등)를 사용하면 특수한 오류 메시지를 적용 할 수 있고보다 일반적인 메시지를 사용하여보다 일반적인 다른 입력 오류를 처리 할 수 ​​있습니다.</target>
        </trans-unit>
        <trans-unit id="fd65d4b7c7659da1f46b3e642c3fddcc6b9572ba" translate="yes" xml:space="preserve">
          <source>In the example above we in-lined the value of the &lt;code&gt;template&lt;/code&gt; option, but this will become annoying as the size of your template grows.</source>
          <target state="translated">위의 예제에서 &lt;code&gt;template&lt;/code&gt; 옵션 의 값을 인라인으로 표시했지만 템플릿 크기가 커짐에 따라 이는 성 가실 것입니다.</target>
        </trans-unit>
        <trans-unit id="4ea40c9ac185962c5537c5bf56297794190e4724" translate="yes" xml:space="preserve">
          <source>In the example above: The template contains the directive &lt;code&gt;ng-app=&quot;invoice2&quot;&lt;/code&gt;. This tells AngularJS to use the &lt;code&gt;invoice2&lt;/code&gt; module as the main module for the application. The code snippet &lt;code&gt;angular.module('invoice2', ['finance2'])&lt;/code&gt; specifies that the &lt;code&gt;invoice2&lt;/code&gt; module depends on the &lt;code&gt;finance2&lt;/code&gt; module. By this, AngularJS uses the &lt;code&gt;InvoiceController&lt;/code&gt; as well as the &lt;code&gt;currencyConverter&lt;/code&gt; service.</source>
          <target state="translated">위의 예에서 : 템플릿에는 지시문 &lt;code&gt;ng-app=&quot;invoice2&quot;&lt;/code&gt; 가 포함되어 있습니다 . 이것은 AngularJS가 &lt;code&gt;invoice2&lt;/code&gt; 모듈을 애플리케이션의 기본 모듈로 사용하도록 지시 합니다. 코드 스 니펫 &lt;code&gt;angular.module('invoice2', ['finance2'])&lt;/code&gt; 는 &lt;code&gt;invoice2&lt;/code&gt; 모듈 이 finance2 모듈에 종속되도록 &lt;code&gt;finance2&lt;/code&gt; 합니다. 이를 통해 AngularJS는 &lt;code&gt;InvoiceController&lt;/code&gt; 와 &lt;code&gt;currencyConverter&lt;/code&gt; 서비스를 사용 합니다.</target>
        </trans-unit>
        <trans-unit id="06c6dacfa62f890f4ce330dacbb04a271d1a5f52" translate="yes" xml:space="preserve">
          <source>In the example below if the &lt;code&gt;ngApp&lt;/code&gt; directive were not placed on the &lt;code&gt;html&lt;/code&gt; element then the document would not be compiled, the &lt;code&gt;AppController&lt;/code&gt; would not be instantiated and the &lt;code&gt;{{ a+b }}&lt;/code&gt; would not be resolved to &lt;code&gt;3&lt;/code&gt;.</source>
          <target state="translated">아래 예제에서 &lt;code&gt;ngApp&lt;/code&gt; 지시문이 &lt;code&gt;html&lt;/code&gt; 요소에 없으면 문서가 컴파일 되지 않고 &lt;code&gt;AppController&lt;/code&gt; 가 인스턴스화되지 않고 &lt;code&gt;{{ a+b }}&lt;/code&gt; 가 &lt;code&gt;3&lt;/code&gt; 으로 해석되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="f0733690aa73762a66daf4ab130eb29e196bfdd6" translate="yes" xml:space="preserve">
          <source>In the example below we are testing a service that takes a long time to generate its answer. To avoid having all of the assertions we want to write in a single test case, &lt;a href=&quot;../api/ngmock/function/angular.mock.module.sharedinjector&quot;&gt;module.sharedInjector()&lt;/a&gt; and Jasmine's &lt;code&gt;beforeAll()&lt;/code&gt; are used to run the service only once. The test cases then all make assertions about the properties added to the service instance.</source>
          <target state="translated">아래 예에서는 응답을 생성하는 데 시간이 오래 걸리는 서비스를 테스트하고 있습니다. 단일 테스트 사례에서 작성하려는 모든 어설 션을 피하기 위해 &lt;a href=&quot;../api/ngmock/function/angular.mock.module.sharedinjector&quot;&gt;module.sharedInjector ()&lt;/a&gt; 및 Jasmine의 &lt;code&gt;beforeAll()&lt;/code&gt; 을 사용하여 서비스를 한 번만 실행합니다. 테스트 사례는 모두 서비스 인스턴스에 추가 된 속성에 대한 어설 션을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="bab3c31c5347dae0fee8eb746e2e91d85348416e" translate="yes" xml:space="preserve">
          <source>In the example, &lt;code&gt;&quot;0: Nobody is viewing.&quot;&lt;/code&gt; is an explicit number rule. If you did not specify this rule, 0 would be matched to the &quot;other&quot; category and &quot;0 people are viewing&quot; would be shown instead of &quot;Nobody is viewing&quot;. You can specify an explicit number rule for other numbers, for example 12, so that instead of showing &quot;12 people are viewing&quot;, you can show &quot;a dozen people are viewing&quot;.</source>
          <target state="translated">이 예에서는 &lt;code&gt;&quot;0: Nobody is viewing.&quot;&lt;/code&gt; 명시적인 숫자 규칙입니다. 이 규칙을 지정하지 않으면 &quot;다른 사람&quot;범주와 0이 일치하고 &quot;아무도보고 있지 않음&quot;대신 &quot;0 명이보고 있습니다&quot;가 표시됩니다. 다른 숫자 (예 : 12)에 대해 명시적인 숫자 규칙을 지정할 수 있으므로 &quot;12 명이보고 있음&quot;을 표시하는 대신 &quot;수십명이보고 있습니다&quot;를 표시 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9240f6b392f9f24d3f0cc0e6e9f1b6f87bdaa61f" translate="yes" xml:space="preserve">
          <source>In the example, note that:</source>
          <target state="translated">이 예에서는 다음 사항에 유의하십시오.</target>
        </trans-unit>
        <trans-unit id="84ff38ef3acedf57990298f438e0044989906ff2" translate="yes" xml:space="preserve">
          <source>In the following example a new block of HTML containing a &lt;code&gt;ng-controller&lt;/code&gt; directive is added to the end of the document body by JQuery. We then compile and link it into the current AngularJS scope.</source>
          <target state="translated">다음 예제에서는 &lt;code&gt;ng-controller&lt;/code&gt; 지시문이 포함 된 새로운 HTML 블록이 JQuery에 의해 문서 본문 끝에 추가됩니다. 그런 다음 컴파일하여 현재 AngularJS 범위에 연결합니다.</target>
        </trans-unit>
        <trans-unit id="e5310456ee5d9fc9becb78c6016bab204fd72bf8" translate="yes" xml:space="preserve">
          <source>In the following example we create two directives:</source>
          <target state="translated">다음 예제에서는 두 개의 지시문을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="e5133af465b2e35bb8a87b952a090800d0de494d" translate="yes" xml:space="preserve">
          <source>In the following example we will build a form to calculate the costs of an invoice in different currencies.</source>
          <target state="translated">다음 예에서는 송장 비용을 다른 통화로 계산하는 양식을 작성합니다.</target>
        </trans-unit>
        <trans-unit id="77918f42e8ba84df32a20e6ed8fa56c3f1646559" translate="yes" xml:space="preserve">
          <source>In the following example, the interpolation information would be ignored and the browser would simply interpret the attribute as present, meaning that the button would always be disabled.</source>
          <target state="translated">다음 예에서 보간 정보는 무시되고 브라우저는 단순히 속성을 존재하는 것으로 해석하므로 버튼이 항상 비활성화됩니다.</target>
        </trans-unit>
        <trans-unit id="efef16f2696255d51f1a599a09667ffbb53142df" translate="yes" xml:space="preserve">
          <source>In the following example, we say that the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; element &lt;strong&gt;matches&lt;/strong&gt; the &lt;code&gt;ngModel&lt;/code&gt; directive</source>
          <target state="translated">다음 예제에서는 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 요소 가 &lt;code&gt;ngModel&lt;/code&gt; 지시문 &lt;strong&gt;과 일치&lt;/strong&gt; 한다고 말합니다.</target>
        </trans-unit>
        <trans-unit id="79560f8749a4459cf00c1e8ac63200d2b09c35ab" translate="yes" xml:space="preserve">
          <source>In the link function, link the compiled element with the element's scope.</source>
          <target state="translated">링크 함수에서 컴파일 된 요소를 요소의 범위와 연결하십시오.</target>
        </trans-unit>
        <trans-unit id="cae02af11dc52e4c34dfd155a0e09f2c35b21656" translate="yes" xml:space="preserve">
          <source>In the new JavaScript file we are also creating a &lt;a href=&quot;concepts#module.html&quot;&gt;module&lt;/a&gt; at which we register the controller. We will talk about modules in the next section.</source>
          <target state="translated">새로운 JavaScript 파일에서 우리는 컨트롤러를 등록 할 &lt;a href=&quot;concepts#module.html&quot;&gt;모듈&lt;/a&gt; 을 만들고 있습니다. 다음 섹션에서 모듈에 대해 이야기하겠습니다.</target>
        </trans-unit>
        <trans-unit id="ddb9bac8dbb551492f9275fbd24cd7951d7d8c0c" translate="yes" xml:space="preserve">
          <source>In these examples we use &lt;code&gt;&amp;lt;base href=&quot;/base/index.html&quot; /&amp;gt;&lt;/code&gt;. The inputs represent the address bar of the browser.</source>
          <target state="translated">이 예에서는 &lt;code&gt;&amp;lt;base href=&quot;/base/index.html&quot; /&amp;gt;&lt;/code&gt; 합니다. 입력은 브라우저의 주소 표시 줄을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="b67dc576ed7fd6345e84f4eb6c7018ca4bfbcc4f" translate="yes" xml:space="preserve">
          <source>In this case, you can use &lt;code&gt;$rollbackViewValue()&lt;/code&gt; to manually cancel the debounced / future update and reset the input to the last committed view value.</source>
          <target state="translated">이 경우 &lt;code&gt;$rollbackViewValue()&lt;/code&gt; 를 사용 하여 디 바운스 / 향후 업데이트를 수동으로 취소하고 입력을 마지막 커밋 된보기 값으로 재설정 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6505ab30bfaaaac0b15030b3f3986050a80340d6" translate="yes" xml:space="preserve">
          <source>In this case, you need to override the default currency symbol by providing the &lt;a href=&quot;../api/ng/filter/currency&quot;&gt;&lt;code&gt;currency&lt;/code&gt;&lt;/a&gt; currency filter with a currency symbol as a parameter.</source>
          <target state="translated">이 경우 &lt;a href=&quot;../api/ng/filter/currency&quot;&gt; &lt;code&gt;currency&lt;/code&gt; &lt;/a&gt; 통화 필터에 통화 기호를 매개 변수로 제공하여 기본 통화 기호를 재정의해야합니다 .</target>
        </trans-unit>
        <trans-unit id="14e832106d47cd2398f7a2e9a5e870b31e8b80af" translate="yes" xml:space="preserve">
          <source>In this example there are two locations where a simple interpolation binding (&lt;code&gt;{{}}&lt;/code&gt;) is present, but the one wrapped in &lt;code&gt;ngNonBindable&lt;/code&gt; is left alone.</source>
          <target state="translated">이 예제에는 간단한 보간 바인딩 ( &lt;code&gt;{{}}&lt;/code&gt; )이 존재하지만 &lt;code&gt;ngNonBindable&lt;/code&gt; 로 랩핑 된 위치는 두 개만 있습니다 .</target>
        </trans-unit>
        <trans-unit id="4d3a54eba3caaff060cebf9bc0469b28b7141602" translate="yes" xml:space="preserve">
          <source>In this example we create a custom method on our resource to make a PUT request:</source>
          <target state="translated">이 예에서는 PUT 요청을 만들기 위해 리소스에 사용자 정의 메소드를 작성합니다.</target>
        </trans-unit>
        <trans-unit id="6899b61e7576501948474a864710fc73cabc4d8a" translate="yes" xml:space="preserve">
          <source>In this example we will build a directive that displays the current time. Once a second, it updates the DOM to reflect the current time.</source>
          <target state="translated">이 예에서는 현재 시간을 표시하는 지시문을 작성합니다. 1 초에 한 번씩 DOM을 업데이트하여 현재 시간을 반영합니다.</target>
        </trans-unit>
        <trans-unit id="4439980cd7f8e616e932b5cf07209756402b8a31" translate="yes" xml:space="preserve">
          <source>In this example, we've used the Value recipe to define the value to provide when &lt;code&gt;DemoController&lt;/code&gt; asks for the service with id &quot;clientId&quot;.</source>
          <target state="translated">이 예제에서는 Value 레시피를 사용하여 &lt;code&gt;DemoController&lt;/code&gt; 가 ID가 &quot;clientId&quot;인 서비스를 요청할 때 제공 할 값을 정의했습니다 .</target>
        </trans-unit>
        <trans-unit id="7a7d32308b0ce66221de3ff0ef1900cca2184aa8" translate="yes" xml:space="preserve">
          <source>In this mode, &lt;code&gt;$location&lt;/code&gt; uses Hashbang URLs in all browsers. AngularJS also does not intercept and rewrite links in this mode. I.e. links work as expected and also perform full page reloads when other parts of the url than the hash fragment was changed.</source>
          <target state="translated">이 모드에서 &lt;code&gt;$location&lt;/code&gt; 은 모든 브라우저에서 Hashbang URL을 사용합니다. AngularJS는이 모드에서 링크를 가로 채거나 다시 쓰지 않습니다. 즉, 링크가 예상대로 작동하고 해시 조각 이외의 URL의 다른 부분이 변경되면 전체 페이지 다시로드를 수행합니다.</target>
        </trans-unit>
        <trans-unit id="5becec1b89211dd88c512f01dd020136e19e6976" translate="yes" xml:space="preserve">
          <source>In this scenario the ordering of the values in the &lt;code&gt;$inject&lt;/code&gt; array must match the ordering of the parameters in &lt;code&gt;MyController&lt;/code&gt;.</source>
          <target state="translated">이 시나리오에서 &lt;code&gt;$inject&lt;/code&gt; 배열 의 값 순서는 &lt;code&gt;MyController&lt;/code&gt; 의 매개 변수 순서와 일치해야합니다 .</target>
        </trans-unit>
        <trans-unit id="13f2a9a690a1e6a57d2a22be202ab6f40a5e27bc" translate="yes" xml:space="preserve">
          <source>In unit tests, if &lt;code&gt;angular-mocks.js&lt;/code&gt; is loaded, this service is overridden by &lt;a href=&quot;../../ngmock/service/%24exceptionhandler&quot;&gt;mock $exceptionHandler&lt;/a&gt; which aids in testing.</source>
          <target state="translated">단위 테스트에서 &lt;code&gt;angular-mocks.js&lt;/code&gt; 가로 드되면 테스트를 지원 하는 &lt;a href=&quot;../../ngmock/service/%24exceptionhandler&quot;&gt;mock $ exceptionHandler&lt;/a&gt; 가이 서비스를 대체합니다 .</target>
        </trans-unit>
        <trans-unit id="f65268ee4fca5a690bd7ec3d41fb1bec92988ebd" translate="yes" xml:space="preserve">
          <source>In unit tests, you may need to call &lt;code&gt;$digest()&lt;/code&gt; to simulate the scope life cycle.</source>
          <target state="translated">단위 테스트에서는 &lt;code&gt;$digest()&lt;/code&gt; 를 호출 하여 범위 수명주기를 시뮬레이션 해야 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="1175103ab9a357b144d5afd8b6a34c7357be8f89" translate="yes" xml:space="preserve">
          <source>Include &lt;code&gt;angular_1_router.js&lt;/code&gt; in your HTML:</source>
          <target state="translated">HTML에 &lt;code&gt;angular_1_router.js&lt;/code&gt; 를 포함 시키십시오 :</target>
        </trans-unit>
        <trans-unit id="eee121d0108cf587e09cedc45732972ef8bcd660" translate="yes" xml:space="preserve">
          <source>Including ngAria</source>
          <target state="translated">ngAria 포함</target>
        </trans-unit>
        <trans-unit id="97ab23190c81b3035d6f0736f1e943af6dedb556" translate="yes" xml:space="preserve">
          <source>Including the &lt;code&gt;angular-mocks.js&lt;/code&gt; file automatically adds the &lt;code&gt;ngMock&lt;/code&gt; module, so your tests are ready to go!</source>
          <target state="translated">&lt;code&gt;angular-mocks.js&lt;/code&gt; 파일을 포함하면 &lt;code&gt;ngMock&lt;/code&gt; 모듈이 자동으로 추가 되므로 테스트를 시작할 수 있습니다!</target>
        </trans-unit>
        <trans-unit id="022e67bfe4c9d31f23e277e933c1ffc2d7b2553f" translate="yes" xml:space="preserve">
          <source>Incorrect scope on replaced element: &lt;a href=&quot;https://github.com/angular/angular.js/issues/9837&quot;&gt;#9837&lt;/a&gt;</source>
          <target state="translated">교체 된 요소에 잘못된 범위 : &lt;a href=&quot;https://github.com/angular/angular.js/issues/9837&quot;&gt;# 9837&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="4bc6cb47d35d34b7a2afa7d59d3ad1affaa2fd4d" translate="yes" xml:space="preserve">
          <source>Increasing the TTL could have performance implications, so you should not change it without proper justification.</source>
          <target state="translated">TTL을 늘리면 성능에 영향을 줄 수 있으므로 적절한 근거없이 변경하지 않아야합니다.</target>
        </trans-unit>
        <trans-unit id="fe65a117b989a572706242b27f193dcbfe4cccb2" translate="yes" xml:space="preserve">
          <source>Index at which to begin limitation. As a negative index, &lt;code&gt;begin&lt;/code&gt; indicates an offset from the end of &lt;code&gt;input&lt;/code&gt;. Defaults to &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">제한을 시작할 인덱스. 음의 인덱스 인 &lt;code&gt;begin&lt;/code&gt; 은 &lt;code&gt;input&lt;/code&gt; 끝에서 오프셋을 나타냅니다 . 기본값은 &lt;code&gt;0&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="be561e9cda308e941f15c8f2d92167d741116500" translate="yes" xml:space="preserve">
          <source>Inference</source>
          <target state="translated">Inference</target>
        </trans-unit>
        <trans-unit id="e3429591e14050c72d5c0051bbbbd1a28af8277c" translate="yes" xml:space="preserve">
          <source>Information about the module</source>
          <target state="translated">모듈에 대한 정보</target>
        </trans-unit>
        <trans-unit id="fdaddb9ce367c2ca746a97cc24d2e8817a51f27d" translate="yes" xml:space="preserve">
          <source>Inheritance</source>
          <target state="translated">Inheritance</target>
        </trans-unit>
        <trans-unit id="5dfb1d0123ddef5f4f1709bff3cd4b6a227f90d4" translate="yes" xml:space="preserve">
          <source>Inheritance works with methods in the same way as it does with properties. So in our previous examples, all of the properties could be replaced with methods that return string values.</source>
          <target state="translated">상속은 속성과 같은 방식으로 메서드와 함께 작동합니다. 이전 예제에서 모든 속성은 문자열 값을 반환하는 메서드로 대체 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0b0ccb7ae52acb2325f9958f72c6588fcb209c80" translate="yes" xml:space="preserve">
          <source>Inheriting Options</source>
          <target state="translated">상속 옵션</target>
        </trans-unit>
        <trans-unit id="96a10dd68557ab7a42e636872dcf0b6dfbfa7c5b" translate="yes" xml:space="preserve">
          <source>Injection Function Annotation</source>
          <target state="translated">주입 함수 주석</target>
        </trans-unit>
        <trans-unit id="a9fff665a0f0f15d16e0d15e587df45688563f62" translate="yes" xml:space="preserve">
          <source>Injection locals for Controller.</source>
          <target state="translated">컨트롤러 용 주입 로컬.</target>
        </trans-unit>
        <trans-unit id="2ca8a0d344a0e19a0d77c7ff904b9681383397eb" translate="yes" xml:space="preserve">
          <source>Injector</source>
          <target state="translated">Injector</target>
        </trans-unit>
        <trans-unit id="79f0f713c81b40636682b05fc5367727bac538b1" translate="yes" xml:space="preserve">
          <source>Injector API</source>
          <target state="translated">인젝터 API</target>
        </trans-unit>
        <trans-unit id="14473111235c870eaff95fa0c0269e33135347df" translate="yes" xml:space="preserve">
          <source>Injector object. See &lt;a href=&quot;../../auto/service/%24injector&quot;&gt;$injector&lt;/a&gt;.</source>
          <target state="translated">인젝터 객체. &lt;a href=&quot;../../auto/service/%24injector&quot;&gt;$ injector를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="2e347f4ceb23a6d8637cc8028fda9ad8c7b7c47f" translate="yes" xml:space="preserve">
          <source>Inline</source>
          <target state="translated">Inline</target>
        </trans-unit>
        <trans-unit id="925743fe777d805151236206dc7c89eab96a1877" translate="yes" xml:space="preserve">
          <source>Inline Array Annotation</source>
          <target state="translated">인라인 배열 주석</target>
        </trans-unit>
        <trans-unit id="6b04e7cb97df1376cafddfa71719f04eb50b9a6e" translate="yes" xml:space="preserve">
          <source>Input elements using ngModelController do this automatically when they are destroyed.</source>
          <target state="translated">ngModelController를 사용하는 입력 요소는 파괴 될 때이를 자동으로 수행합니다.</target>
        </trans-unit>
        <trans-unit id="746797b58353ee493a111e047d8432803b2bf4f0" translate="yes" xml:space="preserve">
          <source>Input text.</source>
          <target state="translated">텍스트를 입력하십시오.</target>
        </trans-unit>
        <trans-unit id="5e4c6a9c5fc75d66498cf6d23beea81ac1405c3b" translate="yes" xml:space="preserve">
          <source>Input to be serialized into JSON.</source>
          <target state="translated">JSON으로 직렬화 할 입력입니다.</target>
        </trans-unit>
        <trans-unit id="36c92f17e709bebc8508b025911cc23c819f2bdc" translate="yes" xml:space="preserve">
          <source>Input to filter.</source>
          <target state="translated">필터 입력.</target>
        </trans-unit>
        <trans-unit id="8623e06b7bf838dfcd7440cde11477a28bd943b1" translate="yes" xml:space="preserve">
          <source>Inputs should be using &lt;code&gt;&amp;lt;&lt;/code&gt; and &lt;code&gt;@&lt;/code&gt; bindings. The &lt;code&gt;&amp;lt;&lt;/code&gt; symbol denotes &lt;a href=&quot;../api/ng/service/%24compile#-scope-.html&quot;&gt;one-way bindings&lt;/a&gt; which are available since 1.5. The difference to &lt;code&gt;=&lt;/code&gt; is that the bound properties in the component scope are not watched, which means if you assign a new value to the property in the component scope, it will not update the parent scope. Note however, that both parent and component scope reference the same object, so if you are changing object properties or array elements in the component, the parent will still reflect that change. The general rule should therefore be to never change an object or array property in the component scope. &lt;code&gt;@&lt;/code&gt; bindings can be used when the input is a string, especially when the value of the binding doesn't change.</source>
          <target state="translated">입력은 &lt;code&gt;&amp;lt;&lt;/code&gt; 및 &lt;code&gt;@&lt;/code&gt; 바인딩을 사용해야합니다 . &lt;code&gt;&amp;lt;&lt;/code&gt; 기호는 의미 &lt;a href=&quot;../api/ng/service/%24compile#-scope-.html&quot;&gt;단방향 바인딩&lt;/a&gt; 1.5부터 사용할 수 있습니다. &lt;code&gt;=&lt;/code&gt; 와의 차이점 은 구성 요소 범위의 바운드 속성이 감시되지 않는다는 것입니다. 즉, 구성 요소 범위의 속성에 새 값을 할당하면 부모 범위가 업데이트되지 않습니다. 그러나 부모 및 구성 요소 범위는 모두 동일한 개체를 참조하므로 구성 요소에서 개체 속성 또는 배열 요소를 변경하는 경우에도 부모는 해당 변경 사항을 반영합니다. 따라서 일반적인 규칙은 구성 요소 범위에서 객체 또는 배열 속성을 절대 변경하지 않아야합니다. &lt;code&gt;@&lt;/code&gt; 입력이 문자열 인 경우, 특히 바인딩 값이 변경되지 않는 경우 바인딩을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9e52682fa7935f8560c99962baa2e9b2e2f695aa" translate="yes" xml:space="preserve">
          <source>Inserts (moves) the element into its new position in the DOM either after the &lt;code&gt;after&lt;/code&gt; element (if provided) or as the first child within the &lt;code&gt;parent&lt;/code&gt; element and then triggers an animation. A promise is returned that will be resolved during the next digest once the animation has completed.</source>
          <target state="translated">&lt;code&gt;after&lt;/code&gt; 요소 이후 (제공된 경우) 또는 &lt;code&gt;parent&lt;/code&gt; 요소 내의 첫 번째 하위 요소로 요소를 DOM의 새 위치에 삽입 (이동) 한 다음 애니메이션을 트리거합니다. 애니메이션이 완료되면 다음 다이제스트 중에 해결 될 약속이 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="9d08db8a2f848ef678473f1e8f3fc6d65efc3930" translate="yes" xml:space="preserve">
          <source>Inserts a named entry into the &lt;a href=&quot;%24cachefactory.cache&quot;&gt;Cache&lt;/a&gt; object to be retrieved later, and incrementing the size of the cache if the key was not already present in the cache. If behaving like an LRU cache, it will also remove stale entries from the set.</source>
          <target state="translated">키를 캐시에없는 경우 나중에 검색 할 이름 지정된 항목을 &lt;a href=&quot;%24cachefactory.cache&quot;&gt;Cache&lt;/a&gt; 객체에 삽입하고 캐시 크기를 증가시킵니다. LRU 캐시처럼 작동하면 세트에서 오래된 항목도 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="b56347e262d3cfcb832a5204694e59add55e7c8a" translate="yes" xml:space="preserve">
          <source>Inserts the element into the DOM either after the &lt;code&gt;after&lt;/code&gt; element (if provided) or as the first child within the &lt;code&gt;parent&lt;/code&gt; element and then triggers an animation. A promise is returned that will be resolved during the next digest once the animation has completed.</source>
          <target state="translated">&lt;code&gt;after&lt;/code&gt; 요소 뒤 (제공된 경우) 또는 &lt;code&gt;parent&lt;/code&gt; 요소 내의 첫 번째 자식으로 요소를 DOM에 삽입 한 다음 애니메이션을 트리거합니다. 애니메이션이 완료되면 다음 다이제스트 중에 해결 될 약속이 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="4a974602fd15a3bb043838c33a55716734438b42" translate="yes" xml:space="preserve">
          <source>Inside this directive's compile function, add any other directive attributes to the template.</source>
          <target state="translated">이 지시문의 컴파일 함수 내에서 다른 지시문 속성을 템플리트에 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">Installation</target>
        </trans-unit>
        <trans-unit id="8282d74914fee52414c245630944283136d0ee0c" translate="yes" xml:space="preserve">
          <source>Instance of given controller.</source>
          <target state="translated">주어진 컨트롤러의 인스턴스.</target>
        </trans-unit>
        <trans-unit id="062b9f18d0fd09a55820ed08041572545f617364" translate="yes" xml:space="preserve">
          <source>Instance of requested controller.</source>
          <target state="translated">요청 된 컨트롤러의 인스턴스입니다.</target>
        </trans-unit>
        <trans-unit id="211f21858ca1d5311a2538cd51c3ed72a3d7a141" translate="yes" xml:space="preserve">
          <source>Instantiating &lt;code&gt;$route&lt;/code&gt; early is necessary for capturing the initial &lt;a href=&quot;../../ng/service/%24location#%24locationChangeStart.html&quot;&gt;$locationChangeStart&lt;/a&gt; event and navigating to the appropriate route. Usually, &lt;code&gt;$route&lt;/code&gt; is instantiated in time by the &lt;a href=&quot;../directive/ngview&quot;&gt;ngView&lt;/a&gt; directive. Yet, in cases where &lt;code&gt;ngView&lt;/code&gt; is included in an asynchronously loaded template (e.g. in another directive's template), the directive factory might not be called soon enough for &lt;code&gt;$route&lt;/code&gt; to be instantiated &lt;em&gt;before&lt;/em&gt; the initial &lt;code&gt;$locationChangeSuccess&lt;/code&gt; event is fired. Eager instantiation ensures that &lt;code&gt;$route&lt;/code&gt; is always instantiated in time, regardless of when &lt;code&gt;ngView&lt;/code&gt; will be loaded.</source>
          <target state="translated">초기 &lt;a href=&quot;../../ng/service/%24location#%24locationChangeStart.html&quot;&gt;$ locationChangeStart&lt;/a&gt; 이벤트 를 캡처 하고 적절한 경로를 탐색하려면 &lt;code&gt;$route&lt;/code&gt; 조기에 인스턴스화 해야 합니다. 일반적으로 &lt;code&gt;$route&lt;/code&gt; 는 &lt;a href=&quot;../directive/ngview&quot;&gt;ngView&lt;/a&gt; 지시문으로 시간에 인스턴스화됩니다 . 그러나 &lt;code&gt;ngView&lt;/code&gt; 가 비동기 적으로로드 된 템플릿 (예 : 다른 지시문의 템플릿)에 포함 된 경우 초기 &lt;code&gt;$locationChangeSuccess&lt;/code&gt; 이벤트가 시작 &lt;em&gt;되기 전에 &lt;/em&gt; &lt;code&gt;$route&lt;/code&gt; 를 인스턴스화 할 수 있도록 지시문 팩토리가 곧 호출되지 않을 수 있습니다 . 빠른 인스턴스화는 &lt;code&gt;ngView&lt;/code&gt; 가 언제로드 되는지에 관계없이 &lt;code&gt;$route&lt;/code&gt; 가 항상 제 시간에 인스턴스화되도록 합니다 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="3d3a7f6588b1415794dfce3d5d197e1c86baed2d" translate="yes" xml:space="preserve">
          <source>Instead of an ngController, we now have a heroList component that holds the data of different heroes, and creates a heroDetail for each of them.</source>
          <target state="translated">ngController 대신 다른 영웅의 데이터를 보유하고 각각에 대해 heroDetail을 만드는 heroList 구성 요소가 생겼습니다.</target>
        </trans-unit>
        <trans-unit id="6f3dfbdc7d4af7c104dfa249eb6020271af2c661" translate="yes" xml:space="preserve">
          <source>Instead of manipulating Input Data, the component calls the correct Output Event with the changed data. For a deletion, that means the component doesn't delete the &lt;code&gt;hero&lt;/code&gt; itself, but sends it back to the owner component via the correct event.</source>
          <target state="translated">입력 데이터를 조작하는 대신 컴포넌트는 변경된 데이터로 올바른 출력 이벤트를 호출합니다. 삭제의 경우 구성 요소가 &lt;code&gt;hero&lt;/code&gt; 자체를 삭제하지 않고 올바른 이벤트를 통해 소유자 구성 요소로 다시 보냅니다.</target>
        </trans-unit>
        <trans-unit id="83be5bd3ffd4491816aabd2cd39c2c3b9c8878ac" translate="yes" xml:space="preserve">
          <source>Instead the &lt;a href=&quot;../api/ng/directive/ngrepeat&quot;&gt;&lt;code&gt;ngRepeat&lt;/code&gt;&lt;/a&gt; directive compiles &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; separately. The result of the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; element compilation is a linking function which contains all of the directives contained in the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; element, ready to be attached to a specific clone of the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; element.</source>
          <target state="translated">대신 &lt;a href=&quot;../api/ng/directive/ngrepeat&quot;&gt; &lt;code&gt;ngRepeat&lt;/code&gt; &lt;/a&gt; 지시문은 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 를 개별적으로 컴파일합니다 . 의 결과 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 요소는 컴파일에 포함 된 지시자를 모두 포함하는 연결기 함수 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 준비 요소의 특정 복제에 부착 될 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 요소.</target>
        </trans-unit>
        <trans-unit id="633968d37033cd055bb2eb774fd1e896dbbc403f" translate="yes" xml:space="preserve">
          <source>Instead use services like &lt;code&gt;$window&lt;/code&gt; and &lt;code&gt;$location&lt;/code&gt; in functions on controllers, which are then called from expressions. Such services provide mockable access to globals.</source>
          <target state="translated">대신 컨트롤러의 함수에서 &lt;code&gt;$window&lt;/code&gt; 및 &lt;code&gt;$location&lt;/code&gt; 과 같은 서비스를 사용하면 식에서 호출됩니다. 이러한 서비스는 전 세계에 대한 모의 액세스를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="e907f4bb49fd3c2e897bc3769f08b3d04e07eddb" translate="yes" xml:space="preserve">
          <source>Integration with the browser event loop</source>
          <target state="translated">브라우저 이벤트 루프와 통합</target>
        </trans-unit>
        <trans-unit id="f9c3ced7a72c2e86229aee91105ee78487714dbb" translate="yes" xml:space="preserve">
          <source>Interceptors</source>
          <target state="translated">Interceptors</target>
        </trans-unit>
        <trans-unit id="9db23e6c66b8f703c4c5170aac080107d2e70814" translate="yes" xml:space="preserve">
          <source>Interceptors detailed info</source>
          <target state="translated">인터셉터 상세 정보</target>
        </trans-unit>
        <trans-unit id="9ce9437cbc666edc9eb9fcee34199bb7906c0c55" translate="yes" xml:space="preserve">
          <source>Intercomponent Communication</source>
          <target state="translated">컴포넌트 간 통신</target>
        </trans-unit>
        <trans-unit id="062715707c7ec1cacc1e15b12597b7e7f10f0e06" translate="yes" xml:space="preserve">
          <source>Interface for configuring AngularJS &lt;a href=&quot;../function/angular.module&quot;&gt;modules&lt;/a&gt;.</source>
          <target state="translated">AngularJS &lt;a href=&quot;../function/angular.module&quot;&gt;모듈&lt;/a&gt; 구성을위한 인터페이스 .</target>
        </trans-unit>
        <trans-unit id="e4d32358862ac0edaba0242863407cf48322048c" translate="yes" xml:space="preserve">
          <source>Interface for configuring AngularJS &lt;a href=&quot;function/angular.module&quot;&gt;modules&lt;/a&gt;.</source>
          <target state="translated">AngularJS &lt;a href=&quot;function/angular.module&quot;&gt;모듈&lt;/a&gt; 구성을위한 인터페이스 .</target>
        </trans-unit>
        <trans-unit id="ecd5ccdaf3148a44137ddcbe0c56ca93bd059aa4" translate="yes" xml:space="preserve">
          <source>Internally it looks a bit like this:</source>
          <target state="translated">내부적으로는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="7b741cdf9b58113f65f5de5d9a4967edb5170093" translate="yes" xml:space="preserve">
          <source>Internally, &lt;code&gt;ngAnimate&lt;/code&gt; waits until all template downloads that are started right after bootstrap have finished. Then, it waits for the currently running &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24digest.html&quot;&gt;$digest&lt;/a&gt; and one more after that, to finish. This ensures that the whole app has been compiled fully before animations are attempted.</source>
          <target state="translated">내부적으로 &lt;code&gt;ngAnimate&lt;/code&gt; 는 부트 스트랩 직후에 시작된 모든 템플릿 다운로드가 완료 될 때까지 기다립니다. 그런 다음 현재 실행중인 &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24digest.html&quot;&gt;$ digest를&lt;/a&gt; 기다렸다가 그 후에 한 번 더 기다립니다 . 이렇게하면 애니메이션을 시도하기 전에 전체 앱이 완전히 컴파일됩니다.</target>
        </trans-unit>
        <trans-unit id="22c5f10ca7f996927beededd6dc71f14380c408d" translate="yes" xml:space="preserve">
          <source>Internationalization (i18n) is the process of developing products in such a way that they can be localized for languages and cultures easily. Localization (l10n), is the process of adapting applications and text to enable their usability in a particular cultural or linguistic market. For application developers, internationalizing an application means abstracting all of the strings and other locale-specific bits (such as date or currency formats) out of the application. Localizing an application means providing translations and localized formats for the abstracted bits.</source>
          <target state="translated">국제화 (i18n)는 언어 및 문화에 맞게 쉽게 현지화 할 수있는 방식으로 제품을 개발하는 프로세스입니다. 현지화 (l10n)는 특정 문화 또는 언어 시장에서 유용성을 발휘할 수 있도록 응용 프로그램 및 텍스트를 조정하는 프로세스입니다. 응용 프로그램 개발자에게 응용 프로그램을 국제화한다는 것은 응용 프로그램에서 모든 문자열 및 기타 로캘 별 비트 (예 : 날짜 또는 통화 형식)를 추상화하는 것을 의미합니다. 응용 프로그램을 지역화한다는 것은 추상화 된 비트에 대한 번역 및 지역화 된 형식을 제공하는 것을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="627598da36f0488e21c56b4623e3c3ac29134995" translate="yes" xml:space="preserve">
          <source>Internet Explorer and Edge do not support the &lt;code&gt;details&lt;/code&gt; element, it is recommended to use &lt;a href=&quot;ngshow&quot;&gt;&lt;code&gt;ngShow&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;nghide&quot;&gt;&lt;code&gt;ngHide&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">Internet Explorer 및 Edge는 &lt;code&gt;details&lt;/code&gt; 요소를 지원하지 않으므로 대신 &lt;a href=&quot;ngshow&quot;&gt; &lt;code&gt;ngShow&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;nghide&quot;&gt; &lt;code&gt;ngHide&lt;/code&gt; &lt;/a&gt; 를 사용하는 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="6a9858c9bf3149456595f98943cf88e41039822e" translate="yes" xml:space="preserve">
          <source>Interpolation</source>
          <target state="translated">Interpolation</target>
        </trans-unit>
        <trans-unit id="3da05a3ab5e77c32bfb542c759dbb3b2f9921337" translate="yes" xml:space="preserve">
          <source>Interpolation markup with embedded &lt;a href=&quot;expression&quot;&gt;expressions&lt;/a&gt; is used by AngularJS to provide data-binding to text nodes and attribute values.</source>
          <target state="translated">AngularJS는 내장 &lt;a href=&quot;expression&quot;&gt;표현식&lt;/a&gt; 이 포함 된 보간 마크 업을 사용하여 텍스트 노드 및 속성 값에 데이터 바인딩을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="2473e96bc614a911821242119918a241a41836d6" translate="yes" xml:space="preserve">
          <source>Introduction</source>
          <target state="translated">Introduction</target>
        </trans-unit>
        <trans-unit id="464d6921114c284acd9c8fb8f85d8fdc2d3aa0a2" translate="yes" xml:space="preserve">
          <source>Introductory Material</source>
          <target state="translated">입문 자료</target>
        </trans-unit>
        <trans-unit id="6ef14993cacdc6240416f3e705cd81fa9aedff49" translate="yes" xml:space="preserve">
          <source>Invoke the method and supply the method arguments from the &lt;code&gt;$injector&lt;/code&gt;.</source>
          <target state="translated">메소드를 호출하고 &lt;code&gt;$injector&lt;/code&gt; 에서 메소드 인수를 제공하십시오 .</target>
        </trans-unit>
        <trans-unit id="35b43899a3f83610ba7b4c6c1390ee4e1f1b7e31" translate="yes" xml:space="preserve">
          <source>Invokes the &lt;code&gt;iterator&lt;/code&gt; function once for each item in &lt;code&gt;obj&lt;/code&gt; collection, which can be either an object or an array. The &lt;code&gt;iterator&lt;/code&gt; function is invoked with &lt;code&gt;iterator(value, key, obj)&lt;/code&gt;, where &lt;code&gt;value&lt;/code&gt; is the value of an object property or an array element, &lt;code&gt;key&lt;/code&gt; is the object property key or array element index and obj is the &lt;code&gt;obj&lt;/code&gt; itself. Specifying a &lt;code&gt;context&lt;/code&gt; for the function is optional.</source>
          <target state="translated">&lt;code&gt;obj&lt;/code&gt; 컬렉션의 각 항목에 대해 &lt;code&gt;iterator&lt;/code&gt; 함수를 한 번 호출합니다 ( 객체 또는 배열 일 수 있음). &lt;code&gt;iterator&lt;/code&gt; 함수를 호출 &lt;code&gt;iterator(value, key, obj)&lt;/code&gt; , &lt;code&gt;value&lt;/code&gt; 객체 속성 또는 배열 요소의 값은, &lt;code&gt;key&lt;/code&gt; 객체 속성 키 또는 어레이 엘리먼트 인덱스이며 OBJ가있다 &lt;code&gt;obj&lt;/code&gt; 자체. 함수 의 &lt;code&gt;context&lt;/code&gt; 를 지정하는 것은 선택 사항입니다.</target>
        </trans-unit>
        <trans-unit id="a5ab7787ce6bc4362a9f13777edcdaf6b98998bd" translate="yes" xml:space="preserve">
          <source>Ionic Framework</source>
          <target state="translated">이온 프레임 워크</target>
        </trans-unit>
        <trans-unit id="1a782aa74f75185993195ad4bcbc102f9f427def" translate="yes" xml:space="preserve">
          <source>Isolating the Scope of a Directive</source>
          <target state="translated">지시문의 범위 분리</target>
        </trans-unit>
        <trans-unit id="d20f2f6b4e6d817ba6e89b3f9673aecdf3113258" translate="yes" xml:space="preserve">
          <source>Issues with replace: true</source>
          <target state="translated">바꾸기 문제 : true</target>
        </trans-unit>
        <trans-unit id="553315737e3b34b8f0ca05c4145e5f178bea3093" translate="yes" xml:space="preserve">
          <source>It also watches the &lt;a href=&quot;%24location#hash.html&quot;&gt;$location.hash()&lt;/a&gt; and automatically scrolls to match any anchor whenever it changes. This can be disabled by calling &lt;a href=&quot;../provider/%24anchorscrollprovider#disableAutoScrolling.html&quot;&gt;$anchorScrollProvider.disableAutoScrolling()&lt;/a&gt;.</source>
          <target state="translated">또한 &lt;a href=&quot;%24location#hash.html&quot;&gt;$ location.hash ()를&lt;/a&gt; 보고 변경 될 때마다 모든 앵커와 일치하도록 자동으로 스크롤됩니다. &lt;a href=&quot;../provider/%24anchorscrollprovider#disableAutoScrolling.html&quot;&gt;$ anchorScrollProvider.disableAutoScrolling ()&lt;/a&gt; 을 호출하여 비활성화 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c489374ee92d89df88a69e803f218fae80bb3039" translate="yes" xml:space="preserve">
          <source>It can also be used to achieve one-way binding of a given expression to an input element such as an &lt;code&gt;input[text]&lt;/code&gt; or a &lt;code&gt;textarea&lt;/code&gt;, when that element does not use ngModel.</source>
          <target state="translated">또한 해당 요소가 ngModel을 사용하지 않는 경우 주어진 표현식을 &lt;code&gt;input[text]&lt;/code&gt; 또는 &lt;code&gt;textarea&lt;/code&gt; 와 같은 입력 요소에 단방향 바인딩하는 데 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="6ead9df0c1b0575bc0d0a33bce64a5d7d3f5aebc" translate="yes" xml:space="preserve">
          <source>It can be used like so:</source>
          <target state="translated">다음과 같이 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="db03d0c1d6f65c6696ad45dd10b046e86fb2b5bc" translate="yes" xml:space="preserve">
          <source>It can be used to trigger a native browser event on an element, which is useful for unit testing.</source>
          <target state="translated">요소에서 기본 브라우저 이벤트를 트리거하는 데 사용할 수 있으며 단위 테스트에 유용합니다.</target>
        </trans-unit>
        <trans-unit id="92cd05db0fac39e05b3a78129dbc2c13bb5d210c" translate="yes" xml:space="preserve">
          <source>It does not cause a full page reload when the browser URL is changed. To reload the page after changing the URL, use the lower-level API, &lt;code&gt;$window.location.href&lt;/code&gt;.</source>
          <target state="translated">브라우저 URL이 변경 될 때 전체 페이지를 다시로드하지 않습니다. URL을 변경 한 후 페이지를 다시로드하려면 하위 레벨 &lt;code&gt;$window.location.href&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6dd0e3b492e0e9ddf8f072cf8217d885fc9dc93f" translate="yes" xml:space="preserve">
          <source>It impacts performance, as interpolation adds another watcher to the scope.</source>
          <target state="translated">보간이 다른 감시자를 범위에 추가하므로 성능에 영향을줍니다.</target>
        </trans-unit>
        <trans-unit id="4d5b67bbcac712f4a34e5aa8cfdb8f074f88c7b5" translate="yes" xml:space="preserve">
          <source>It increases the complexity of the markup</source>
          <target state="translated">마크 업의 복잡성을 증가시킵니다</target>
        </trans-unit>
        <trans-unit id="fc05bcff5f72991e69c700ce73817afcbbb8bd13" translate="yes" xml:space="preserve">
          <source>It indicates to the compiler whether or not directives on comments should be compiled. Defaults to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">주석에 대한 지시문을 컴파일해야하는지 여부를 컴파일러에 표시합니다. 기본값은 &lt;code&gt;true&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="906af1e36dfdfa37c091ab433fc206589b32aa37" translate="yes" xml:space="preserve">
          <source>It indicates to the compiler whether or not directives on element classes should be compiled. Defaults to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">요소 클래스의 지시문을 컴파일해야하는지 여부를 컴파일러에 표시합니다. 기본값은 &lt;code&gt;true&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="a5ee5553d7a8187ba379677bf68a64abd66747eb" translate="yes" xml:space="preserve">
          <source>It is a really, &lt;em&gt;really&lt;/em&gt; good idea to regard app testing as equal in importance to app writing. Testing difficulty is dramatically affected by the way the code is structured.</source>
          <target state="translated">그것은 정말입니다 &lt;em&gt;정말&lt;/em&gt; 응용 프로그램 작성에 중요성에서 동일하게 테스트 관련 응용 프로그램에 대한 좋은 아이디어. 코드의 구조에 따라 테스트 난이도가 크게 영향을받습니다.</target>
        </trans-unit>
        <trans-unit id="8855a2587ecadec73d7a3421fc455403fbc8a53a" translate="yes" xml:space="preserve">
          <source>It is a very good idea to decouple DOM manipulation from app logic. This dramatically improves the testability of the code.</source>
          <target state="translated">DOM 조작을 앱 로직에서 분리하는 것이 좋습니다. 이것은 코드의 테스트 가능성을 크게 향상시킵니다.</target>
        </trans-unit>
        <trans-unit id="727b35094155043ed303b76b370615c80c2ab5a2" translate="yes" xml:space="preserve">
          <source>It is also possible that you run into difficulties if you try to update the ngModel's &lt;code&gt;$modelValue&lt;/code&gt; programmatically before these debounced/future events have resolved/occurred, because AngularJS's dirty checking mechanism is not able to tell whether the model has actually changed or not.</source>
          <target state="translated">AngularJS의 더티 검사 메커니즘이 모델의 실제 변경 여부를 알 수 없기 때문에 이러한 디 바운스 / 미래 이벤트가 해결 / 발생하기 전에 프로그래밍 방식으로 ngModel의 &lt;code&gt;$modelValue&lt;/code&gt; 를 업데이트하려고하면 문제가 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="80c4111be6bb24188a6a2bea325a2c92f6ed5f77" translate="yes" xml:space="preserve">
          <source>It is also possible to call the &lt;code&gt;orderBy&lt;/code&gt; filter manually, by injecting &lt;code&gt;orderByFilter&lt;/code&gt;, and calling it with the desired parameters. (Alternatively, you could inject the &lt;code&gt;$filter&lt;/code&gt; factory and retrieve the &lt;code&gt;orderBy&lt;/code&gt; filter with &lt;code&gt;$filter('orderBy')&lt;/code&gt;.)</source>
          <target state="translated">&lt;code&gt;orderByFilter&lt;/code&gt; 를 주입 하고 원하는 매개 변수 로 호출하여 &lt;code&gt;orderBy&lt;/code&gt; 필터를 수동으로 호출 할 수도 있습니다 . 또는 &lt;code&gt;$filter&lt;/code&gt; 팩토리를 주입하고 &lt;code&gt;$filter('orderBy')&lt;/code&gt; 하여 &lt;code&gt;orderBy&lt;/code&gt; 필터를 검색 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ca7a590d3c2d53e278b044a014b894acece3725f" translate="yes" xml:space="preserve">
          <source>It is also possible to set &lt;code&gt;bindToController&lt;/code&gt; to an object hash with the same format as the &lt;code&gt;scope&lt;/code&gt; property. This will set up the scope bindings to the controller directly. Note that &lt;code&gt;scope&lt;/code&gt; can still be used to define which kind of scope is created. By default, no scope is created. Use &lt;code&gt;scope: {}&lt;/code&gt; to create an isolate scope (useful for component directives).</source>
          <target state="translated">&lt;code&gt;bindToController&lt;/code&gt; 를 &lt;code&gt;scope&lt;/code&gt; 속성 과 동일한 형식의 객체 해시 로 설정할 수도 있습니다 . 이것은 컨트롤러에 대한 범위 바인딩을 직접 설정합니다. 참고 &lt;code&gt;scope&lt;/code&gt; 아직 생성 범위의 종류를 정의 할 수 있습니다. 기본적으로 범위는 만들어지지 않습니다. 사용 &lt;code&gt;scope: {}&lt;/code&gt; (구성 요소 지침에 유용)을 분리 범위를 만듭니다.</target>
        </trans-unit>
        <trans-unit id="25431739b654d8cc47b28b9c43eeca226e65b9a6" translate="yes" xml:space="preserve">
          <source>It is also possible to set it as the default &lt;code&gt;paramSerializer&lt;/code&gt; in the &lt;a href=&quot;../provider/%24httpprovider#defaults.html&quot;&gt;&lt;code&gt;$httpProvider&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../provider/%24httpprovider#defaults.html&quot;&gt; &lt;code&gt;$httpProvider&lt;/code&gt; &lt;/a&gt; 에서 기본 &lt;code&gt;paramSerializer&lt;/code&gt; 로 설정할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="1d5c13dd91385416023d0e8e5aa828224c7f5217" translate="yes" xml:space="preserve">
          <source>It is always good to make common tasks trivial and difficult tasks possible.</source>
          <target state="translated">일반적인 작업을 사소하고 어려운 작업을 수행하는 것이 항상 좋습니다.</target>
        </trans-unit>
        <trans-unit id="b3e683fad2f9309dfaa4db918783ad8289246cf8" translate="yes" xml:space="preserve">
          <source>It is an excellent idea to decouple the client side of an app from the server side. This allows development work to progress in parallel, and allows for reuse of both sides.</source>
          <target state="translated">앱의 클라이언트 쪽을 서버 쪽에서 분리하는 것이 좋습니다. 이를 통해 개발 작업이 동시에 진행되고 양쪽을 재사용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0b0fa48b6950751b768005b01d414197a136d433" translate="yes" xml:space="preserve">
          <source>It is common to attach Controllers at different levels of the DOM hierarchy. Since the &lt;a href=&quot;../api/ng/directive/ngcontroller&quot;&gt;ng-controller&lt;/a&gt; directive creates a new child scope, we get a hierarchy of scopes that inherit from each other. The &lt;code&gt;$scope&lt;/code&gt; that each Controller receives will have access to properties and methods defined by Controllers higher up the hierarchy. See &lt;a href=&quot;https://github.com/angular/angular.js/wiki/Understanding-Scopes&quot;&gt;Understanding Scopes&lt;/a&gt; for more information about scope inheritance.</source>
          <target state="translated">여러 레벨의 DOM 계층에서 컨트롤러를 연결하는 것이 일반적입니다. 때문에 &lt;a href=&quot;../api/ng/directive/ngcontroller&quot;&gt;NG-컨트롤러&lt;/a&gt; 지시어는 새 자식 범위를 만들고, 우리는 서로 범위의 계층 구조가 상속을받을. &lt;code&gt;$scope&lt;/code&gt; 각 제어기는 계층까지의 상위 컨트롤러에 의해 정의 된 속성 및 메소드에 액세스 할 수신. 범위 상속에 대한 자세한 내용은 범위 &lt;a href=&quot;https://github.com/angular/angular.js/wiki/Understanding-Scopes&quot;&gt;이해를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="898e639ea78a3295cd345092429425a8851a4def" translate="yes" xml:space="preserve">
          <source>It is currently not possible for an interpolated expression to contain the interpolation end symbol. For example, &lt;code&gt;{{ '}}' }}&lt;/code&gt; will be incorrectly interpreted as &lt;code&gt;{{ ' }}&lt;/code&gt; + &lt;code&gt;' }}&lt;/code&gt;, i.e. an interpolated expression consisting of a single-quote (&lt;code&gt;'&lt;/code&gt;) and the &lt;code&gt;' }}&lt;/code&gt; string.</source>
          <target state="translated">보간 된 표현식이 보간 종료 기호를 포함 할 수 없습니다. 예를 들어, &lt;code&gt;{{ '}}' }}&lt;/code&gt; 은 &lt;code&gt;{{ ' }}&lt;/code&gt; + &lt;code&gt;' }}&lt;/code&gt; 로 잘못 해석됩니다 . 즉, 작은 따옴표 ( &lt;code&gt;'&lt;/code&gt; )와 &lt;code&gt;' }}&lt;/code&gt; 문자열 로 구성된 보간 된 표현식 입니다.</target>
        </trans-unit>
        <trans-unit id="78735c155bc5c04e168b61fd0cfb26236c9dbc1c" translate="yes" xml:space="preserve">
          <source>It is documented that &lt;code&gt;animation.start()&lt;/code&gt; will return a promise object and this is true, however, there is also an additional method available on the runner called &lt;code&gt;.done(callbackFn)&lt;/code&gt;. The done method works the same as &lt;code&gt;.finally(callbackFn)&lt;/code&gt;, however, it does &lt;strong&gt;not trigger a digest to occur&lt;/strong&gt;. Therefore, for performance reasons, it's always best to use &lt;code&gt;runner.done(callback)&lt;/code&gt; instead of &lt;code&gt;runner.then()&lt;/code&gt;, &lt;code&gt;runner.catch()&lt;/code&gt; or &lt;code&gt;runner.finally()&lt;/code&gt; unless you really need a digest to kick off afterwards.</source>
          <target state="translated">&lt;code&gt;animation.start()&lt;/code&gt; 문서화 약속 개체를 반환하고이 그러나, 또한 주자라고 볼 수 있습니다 추가 방법 사실이 있습니다 &lt;code&gt;.done(callbackFn)&lt;/code&gt; . done 메소드는 &lt;code&gt;.finally(callbackFn)&lt;/code&gt; 과 동일하게 작동 하지만 &lt;strong&gt;다이제스트가 발생&lt;/strong&gt; 하지는 &lt;strong&gt;않습니다&lt;/strong&gt; . 따라서 성능상의 이유로 나중에 나중에 시작하기 위해 다이제스트가 필요하지 않으면 &lt;code&gt;runner.then()&lt;/code&gt; , &lt;code&gt;runner.catch()&lt;/code&gt; 또는 &lt;code&gt;runner.finally()&lt;/code&gt; 대신 &lt;code&gt;runner.done(callback)&lt;/code&gt; 을 사용하는 것이 가장 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="9adf8cb48d55887fa324e58aa54a93785a13c110" translate="yes" xml:space="preserve">
          <source>It is important to be aware of this when writing tests for directives that use 'element' transclusion. If you place the directive on the root element of the DOM fragment that you pass to &lt;a href=&quot;../api/ng/service/%24compile&quot;&gt;&lt;code&gt;$compile&lt;/code&gt;&lt;/a&gt;, then the DOM node returned from the linking function will be the comment node and you will lose the ability to access the template and transcluded content.</source>
          <target state="translated">'요소'변환을 사용하는 지시문에 대한 테스트를 작성할 때이를 알고 있어야합니다. &lt;a href=&quot;../api/ng/service/%24compile&quot;&gt; &lt;code&gt;$compile&lt;/code&gt; &lt;/a&gt; 전달한 DOM 프래그먼트의 루트 요소에 지시문을 배치하면 연결 함수에서 리턴 된 DOM 노드가 주석 노드가되고 템플리트 및 변환 된 컨텐츠에 액세스 할 수 없게됩니다.</target>
        </trans-unit>
        <trans-unit id="ade37c34e6742fe81576b7d98f9b8cab2717a032" translate="yes" xml:space="preserve">
          <source>It is important to realize that invoking a &lt;code&gt;$resource&lt;/code&gt; object method immediately returns an empty reference (object or array depending on &lt;code&gt;isArray&lt;/code&gt;). Once the data is returned from the server the existing reference is populated with the actual data. This is a useful trick since usually the resource is assigned to a model which is then rendered by the view. Having an empty object results in no rendering, once the data arrives from the server then the object is populated with the data and the view automatically re-renders itself showing the new data. This means that in most cases one never has to write a callback function for the action methods.</source>
          <target state="translated">&lt;code&gt;$resource&lt;/code&gt; 객체 메서드 를 호출 하면 빈 참조 ( &lt;code&gt;isArray&lt;/code&gt; 에 따라 객체 또는 배열)가 즉시 반환 됩니다. 서버에서 데이터가 반환되면 기존 참조는 실제 데이터로 채워집니다. 일반적으로 리소스가 모델에 할당 된 다음 뷰에 의해 렌더링되므로 유용한 트릭입니다. 비어있는 객체가 있으면 렌더링되지 않습니다. 일단 데이터가 서버에서 도착하면 객체가 데이터로 채워지고 뷰가 자동으로 다시 렌더링되어 새 데이터를 표시합니다. 이것은 대부분의 경우 액션 메소드에 대한 콜백 함수를 작성할 필요가 없다는 것을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="44e11a7a5909b52ab207ef70f4ca59576a8afb49" translate="yes" xml:space="preserve">
          <source>It is mainly used on &lt;a href=&quot;../input/input%5Bradio%5D&quot;&gt;&lt;code&gt;input[radio]&lt;/code&gt;&lt;/a&gt; and option elements, so that when the element is selected, the &lt;a href=&quot;ngmodel&quot;&gt;&lt;code&gt;ngModel&lt;/code&gt;&lt;/a&gt; of that element (or its &lt;a href=&quot;select&quot;&gt;&lt;code&gt;select&lt;/code&gt;&lt;/a&gt; parent element) is set to the bound value. It is especially useful for dynamically generated lists using &lt;a href=&quot;ngrepeat&quot;&gt;&lt;code&gt;ngRepeat&lt;/code&gt;&lt;/a&gt;, as shown below.</source>
          <target state="translated">주로 &lt;a href=&quot;../input/input%5Bradio%5D&quot;&gt; &lt;code&gt;input[radio]&lt;/code&gt; &lt;/a&gt; 사용됩니다 [라디오] 및 옵션 요소 되므로 요소를 선택할 때 해당 요소 (또는 &lt;a href=&quot;select&quot;&gt; &lt;code&gt;select&lt;/code&gt; &lt;/a&gt; 상위 요소) 의 &lt;a href=&quot;ngmodel&quot;&gt; &lt;code&gt;ngModel&lt;/code&gt; &lt;/a&gt; 이 바운드 값으로 설정됩니다. 아래와 같이 &lt;a href=&quot;ngrepeat&quot;&gt; &lt;code&gt;ngRepeat&lt;/code&gt; 를&lt;/a&gt; 사용하여 동적으로 생성 된 목록에 특히 유용 합니다.</target>
        </trans-unit>
        <trans-unit id="dd54d32cbd1f2ba51acb0890230e9b3c8d1d18e0" translate="yes" xml:space="preserve">
          <source>It is normal practice to attach your transcluded content (&lt;code&gt;clone&lt;/code&gt;) to the DOM inside your &lt;strong&gt;clone attach function&lt;/strong&gt;:</source>
          <target state="translated">&lt;code&gt;clone&lt;/code&gt; 컨텐츠 ( clone )를 &lt;strong&gt;복제 첨부 기능&lt;/strong&gt; 내 DOM 에 첨부하는 것이 일반적입니다 .</target>
        </trans-unit>
        <trans-unit id="13587fb80feb5ab37440031b46d39c968c78429f" translate="yes" xml:space="preserve">
          <source>It is not possible to whitelist specific URLs/paths. The &lt;code&gt;path&lt;/code&gt;, &lt;code&gt;query&lt;/code&gt; and &lt;code&gt;fragment&lt;/code&gt; parts of a URL will be ignored. For example, &lt;code&gt;https://foo.com/path/bar?query=baz#fragment&lt;/code&gt; will be treated as &lt;code&gt;https://foo.com&lt;/code&gt;, meaning that &lt;strong&gt;all&lt;/strong&gt; requests to URLs starting with &lt;code&gt;https://foo.com/&lt;/code&gt; will include the XSRF token.</source>
          <target state="translated">특정 URL / 경로를 허용 목록에 추가 할 수 없습니다. URL 의 &lt;code&gt;path&lt;/code&gt; , &lt;code&gt;query&lt;/code&gt; 및 &lt;code&gt;fragment&lt;/code&gt; 부분은 무시됩니다. 예를 들어 &lt;code&gt;https://foo.com/path/bar?query=baz#fragment&lt;/code&gt; 은 으로 처리됩니다 &lt;code&gt;https://foo.com&lt;/code&gt; 즉, &lt;strong&gt;모든&lt;/strong&gt; URL에 대한 요청으로 시작 &lt;code&gt;https://foo.com/&lt;/code&gt; 포함됩니다 XSRF 토큰.</target>
        </trans-unit>
        <trans-unit id="f5755149536ff4c33eaf7b094db38129ae71d347" translate="yes" xml:space="preserve">
          <source>It is often desirable to inline Injected functions and that's when setting the &lt;code&gt;$inject&lt;/code&gt; property is very inconvenient. In these situations using the array notation to specify the dependencies in a way that survives minification is a better choice:</source>
          <target state="translated">Injected 함수를 인라인하는 것이 종종 바람직하며 &lt;code&gt;$inject&lt;/code&gt; 속성을 설정하는 것이 매우 불편할 때입니다. 이러한 상황에서 배열 표기법을 사용하여 축소 후에도 종속성을 지정하는 것이 더 나은 선택입니다.</target>
        </trans-unit>
        <trans-unit id="ea74d8637b90b9e1696533460b703c6c41293ed9" translate="yes" xml:space="preserve">
          <source>It is possible that during the &lt;code&gt;enter&lt;/code&gt; animation, the &lt;code&gt;.message&lt;/code&gt; div will be briefly visible before it starts animating. In that case, you can add styles to the CSS that make sure the element stays hidden before the animation starts:</source>
          <target state="translated">&lt;code&gt;enter&lt;/code&gt; 애니메이션 중에 &lt;code&gt;.message&lt;/code&gt; div가 애니메이션을 시작하기 전에 잠깐 볼 수 있습니다. 이 경우 애니메이션을 시작하기 전에 요소를 숨기도록 CSS에 스타일을 추가 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f82d2b045366df68d3ac3e59440164fdc698eb46" translate="yes" xml:space="preserve">
          <source>It is possible that during the &lt;code&gt;enter&lt;/code&gt; event, the &lt;code&gt;.message&lt;/code&gt; div will be briefly visible before it starts animating. In that case, you can add styles to the CSS that make sure the element stays hidden before the animation starts:</source>
          <target state="translated">동안 &lt;code&gt;enter&lt;/code&gt; 이벤트 &lt;code&gt;.message&lt;/code&gt; div가 애니메이션을 시작하기 전에 잠깐 볼 수 있습니다. 이 경우 애니메이션을 시작하기 전에 요소를 숨기도록 CSS에 스타일을 추가 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c69afb8c7919c982dfe15812d0593df59e687ac6" translate="yes" xml:space="preserve">
          <source>It is possible to access the context object using the identifier &lt;code&gt;this&lt;/code&gt; and the locals object using the identifier &lt;code&gt;$locals&lt;/code&gt;.</source>
          <target state="translated">식별자를 사용하여 컨텍스트 객체에 액세스 할 수 있습니다 &lt;code&gt;this&lt;/code&gt; 를 하고 식별자 &lt;code&gt;$locals&lt;/code&gt; 사용하여 locals 객체 .</target>
        </trans-unit>
        <trans-unit id="3066c08f5caeabdd7acdc8e45264d026b7139d6e" translate="yes" xml:space="preserve">
          <source>It is possible to create chains of any length and since a promise can be resolved with another promise (which will defer its resolution further), it is possible to pause/defer resolution of the promises at any point in the chain. This makes it possible to implement powerful APIs like $http's response interceptors.</source>
          <target state="translated">길이에 관계없이 체인을 만들 수 있으며 약속을 다른 약속으로 해결할 수 있으므로 (해당 해결이 더 지연 될 수 있음) 체인의 어느 시점에서나 약속의 해결을 일시 중지 / 지연 할 수 있습니다. 이를 통해 $ http의 응답 인터셉터와 같은 강력한 API를 구현할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ccda427b3a1fede3c12595f91bdd135712e54499" translate="yes" xml:space="preserve">
          <source>It is possible to disable individual attributes added by ngAria with the &lt;a href=&quot;ngaria/provider/%24ariaprovider#config.html&quot;&gt;config&lt;/a&gt; method. For more details, see the &lt;a href=&quot;../guide/accessibility&quot;&gt;Developer Guide&lt;/a&gt;.</source>
          <target state="translated">ngAria가 &lt;a href=&quot;ngaria/provider/%24ariaprovider#config.html&quot;&gt;config&lt;/a&gt; 메소드를 사용하여 추가 한 개별 속성을 비활성화 할 수 있습니다 . 자세한 내용은&lt;a href=&quot;../guide/accessibility&quot;&gt; 개발자 안내서를&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="463de9ded47806d9b1e436ee2e11963140db8b5f" translate="yes" xml:space="preserve">
          <source>It is possible to get &lt;code&gt;ngRepeat&lt;/code&gt; to iterate over the properties of an object using the following syntax:</source>
          <target state="translated">그것은 얻을 수 있습니다 &lt;code&gt;ngRepeat&lt;/code&gt; 다음 구문을 사용하여 ngRepeat 가 객체의 속성을 반복하도록 할 있습니다.</target>
        </trans-unit>
        <trans-unit id="e6efc27732c8ebe9e9e84ddd4403a59ab8aa7bee" translate="yes" xml:space="preserve">
          <source>It is possible to inject other providers into the provider function, but the injected provider must have been defined before the one that requires it.</source>
          <target state="translated">다른 제공자를 제공자 기능에 삽입 할 수 있지만, 주입 된 제공자가 필요한 제공자보다 먼저 정의되어 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="996e7a28852c7c4983233eb69326521205c8d521" translate="yes" xml:space="preserve">
          <source>It is possible to make &lt;code&gt;ngAria&lt;/code&gt; ignore a specific element, by adding the &lt;code&gt;ng-aria-disable&lt;/code&gt; attribute on it. Note that only the element itself (and not its child elements) will be ignored.</source>
          <target state="translated">&lt;code&gt;ng-aria-disable&lt;/code&gt; 을 추가하여 &lt;code&gt;ngAria&lt;/code&gt; 가 특정 요소를 무시 하도록 할 수 있습니다 그것에 속성을. 자식 요소가 아닌 요소 자체 만 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="7dcf70c9223ffd381f61a6b912e2f0febfd3f458" translate="yes" xml:space="preserve">
          <source>It is preferable to use &lt;code&gt;ngBind&lt;/code&gt; instead of &lt;code&gt;{{ expression }}&lt;/code&gt; if a template is momentarily displayed by the browser in its raw state before AngularJS compiles it. Since &lt;code&gt;ngBind&lt;/code&gt; is an element attribute, it makes the bindings invisible to the user while the page is loading.</source>
          <target state="translated">브라우저가 템플릿을 AngularJS가 컴파일하기 전에 기본적으로 원시 상태로 표시하는 경우 &lt;code&gt;{{ expression }}&lt;/code&gt; 대신 &lt;code&gt;ngBind&lt;/code&gt; 를 사용하는 것이 좋습니다 . 이후 &lt;code&gt;ngBind&lt;/code&gt; 이 요소의 속성, 그것은 페이지가 로딩되는 동안 사용자에게 바인딩이 보이지 않는 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e7fa93572d942a68934418e0f950bd76f13eabf5" translate="yes" xml:space="preserve">
          <source>It is recommended that the&lt;code&gt;$animate&lt;/code&gt; service is always used when executing DOM-related procedures within directives.</source>
          <target state="translated">&lt;code&gt;$animate&lt;/code&gt; 권장합니다지시문 내에서 DOM 관련 프로 시저를 실행할 때는 항상 서비스를 사용 .</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
