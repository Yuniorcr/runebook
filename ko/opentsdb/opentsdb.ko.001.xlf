<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="opentsdb">
    <body>
      <group id="opentsdb">
        <trans-unit id="0657f1bbe0bcee611ea6b0066cf1a085163e5d1e" translate="yes" xml:space="preserve">
          <source>&quot;Error&quot;,&quot;Suggest&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37fd26986327db609e3b9924093b68551621aeb4" translate="yes" xml:space="preserve">
          <source>&quot;Suggest&quot;,&quot;Put&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1028ce7c7c91513eeea1cdf26f49aeed6fafb88b" translate="yes" xml:space="preserve">
          <source>&quot;expressions&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ef18cd8c6a0302503077ff4e2bf4d5e4b2b4c2b" translate="yes" xml:space="preserve">
          <source>&quot;filters&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca9a4602fa9d364f338cb372be800f602a819dd3" translate="yes" xml:space="preserve">
          <source>&quot;metrics&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="092c239b3799bafb027852d2486aca5d33f695f6" translate="yes" xml:space="preserve">
          <source>&quot;outputs&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ba0991124d49ad20e8cd36784dee8a3cbc9395a" translate="yes" xml:space="preserve">
          <source>&quot;time&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f31de3b4739a31e015582762ab894c8dc27a03d4" translate="yes" xml:space="preserve">
          <source>#1, #4, #5, #6</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="258d7e8c4deed3474005dd1bc367d4f0e51f387c" translate="yes" xml:space="preserve">
          <source>#2, #7</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="558234cf5c4521dc5c9b8990450512536153fab3" translate="yes" xml:space="preserve">
          <source>&amp;copy; 2010&amp;ndash;2016 The OpenTSDB Authors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd2859cb3740cdafbfd496b36e716a2a0197bccb" translate="yes" xml:space="preserve">
          <source>&amp;lt;&lt;a href=&quot;https://github.com/aravind/tsd_proxy&quot;&gt;https://github.com/aravind/tsd_proxy&lt;/a&gt;&amp;gt;`_ - A buffering write proxy for OpenTSDB and alternate DBs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f214cf24d2c340f3ca52fd94ae3af7cdb36a09c3" translate="yes" xml:space="preserve">
          <source>&amp;lt;hostname&amp;gt;:&amp;lt;port&amp;gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd42093dc6101f9be344fd13a2121fb44c0c64ac" translate="yes" xml:space="preserve">
          <source>&amp;lt;metric&amp;gt; &amp;lt;timestamp&amp;gt; &amp;lt;value&amp;gt; &amp;lt;tagk=tagv&amp;gt; [&amp;lt;tagkN=tagvN&amp;gt;]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ddb55f253f0cd91f0ebf7ed1327c706287df93d" translate="yes" xml:space="preserve">
          <source>&amp;lt;metric&amp;gt; &amp;lt;timestamp&amp;gt; &amp;lt;value&amp;gt; {&amp;lt;tagk=tagv&amp;gt;[,..&amp;lt;tagkN=tagvN&amp;gt;]}</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e603bb1f369c4643a62f4d3ad29c881e7efcacd" translate="yes" xml:space="preserve">
          <source>(2.3) Skips group by aggregation. This aggregator is useful for fetching the &lt;em&gt;raw&lt;/em&gt; data from storage as it will return a result set for every time series matching the filters. Note that the query will throw an exception if used with a downsampler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1ba43bdc534172c1d6eea55513f9402713652f9" translate="yes" xml:space="preserve">
          <source>(2.3) These aggregators will return the first or the last data point in the downsampling interval. E.g. if a downsample bucket consists of the series &lt;code&gt;2, 6, 1, 7&lt;/code&gt; then the &lt;code&gt;first&lt;/code&gt; aggregator will return &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;last&lt;/code&gt; will return &lt;code&gt;7&lt;/code&gt;. Note that this aggregator is only useful for downsamplers. When used as a group-by aggregator, the results are indeterminate as the ordering of time series retrieved from storage and held in memory is not consistent from TSD to TSD or execution to execution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f82d33bdfcd5ba6c9f7a8f4799528c2fd76d2c52" translate="yes" xml:space="preserve">
          <source>(The terms in parentheses can be used in downsampling specifications, e.g. &lt;code&gt;1h-sum-nan&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82b8aaf5c2c849bed566bb82585db3dab45041ee" translate="yes" xml:space="preserve">
          <source>(or if you prefer Maven,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5658ca3f498b652a944c19c7dbd6484a64806722" translate="yes" xml:space="preserve">
          <source>* For percentile calculations, see the &lt;a href=&quot;http://en.wikipedia.org/wiki/Quantile&quot;&gt;Wikipedia&lt;/a&gt; article. For high cardinality calculations, using the estimated percentiles may be more performant.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d699f60b444e5fa7b8d7f4216726a66e7bc5548" translate="yes" xml:space="preserve">
          <source>+wxh=1286x836</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c10b5b2cd673a0616d529aa5234b12ee7153808" translate="yes" xml:space="preserve">
          <source>,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8278d2adba7612cf98a492d21a4ac4c78acb1202" translate="yes" xml:space="preserve">
          <source>, and</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a32fa4e54e4c7d12bd7d01704da83a1a5dfa2a17" translate="yes" xml:space="preserve">
          <source>--async-io</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3a766d51586592133aa0aecb830999a2664ce24" translate="yes" xml:space="preserve">
          <source>--auto-metric</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e19673dc2befdaee63377eba463330c9438e925" translate="yes" xml:space="preserve">
          <source>--backlog</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43293bf818954403706866e24143728fe15a2bbc" translate="yes" xml:space="preserve">
          <source>--bind</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d60697a32e20e0e56882dcec35e0f87ec3def3e2" translate="yes" xml:space="preserve">
          <source>--cachedir</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="761cb05fb38f56f902563fe3d0a3da013408bc4e" translate="yes" xml:space="preserve">
          <source>--compact</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eaf999f7e2f0cf00a10d76b58b36651224c9c9d7" translate="yes" xml:space="preserve">
          <source>--config</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7644a989c1c60e07b42650a842b7e92f57b1fc6" translate="yes" xml:space="preserve">
          <source>--config=/usr/local/tempconfig.conf</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc8c1ea729bfef2154a008e75b176b76b5e6a475" translate="yes" xml:space="preserve">
          <source>--delete</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ceedc0aa457fe6d65aa47d6da350fc155613f3d" translate="yes" xml:space="preserve">
          <source>--delete-bad-compacts</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92cf1c4858c72689902f03bc6ee81982c9b0f9ea" translate="yes" xml:space="preserve">
          <source>--delete-bad-rows</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0a6aa01f84983035de4065c45a8592da42d2a02" translate="yes" xml:space="preserve">
          <source>--delete-bad-values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c54f97b9f7e5a8bd6c1377fb79d9f2b14896ad3" translate="yes" xml:space="preserve">
          <source>--delete-orphans</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf905943151cc5addbfd0096bb071b071353ba52" translate="yes" xml:space="preserve">
          <source>--delete-unknown-columns</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c4a3bc7f0ab3f0ac08aa6d34f636ec2cb6b8058" translate="yes" xml:space="preserve">
          <source>--delete-unknown_columns</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cadb85f5459bd41e7466352f3c23da298568598" translate="yes" xml:space="preserve">
          <source>--disable-api</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7217c5c67cfd1c85b68f572547bc00c2983bfc98" translate="yes" xml:space="preserve">
          <source>--disable-ui</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fe301fb0a6565304c90d936757d1724c9618eef" translate="yes" xml:space="preserve">
          <source>--fix</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47b938eeeae012be2a1745adf702262b5a032f2c" translate="yes" xml:space="preserve">
          <source>--fix-all</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d5a502e4306994e95d3210ed9745ef5d7f49894" translate="yes" xml:space="preserve">
          <source>--flush-interval</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1397a1d27f59c5caa659c0bf34e9503f5c007dd3" translate="yes" xml:space="preserve">
          <source>--full-scan</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9831722bdc4eaef74878e79d37a052cc7abe5b14" translate="yes" xml:space="preserve">
          <source>--import</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b7ed7c85e1e57f028d1980aded2a905da095b42" translate="yes" xml:space="preserve">
          <source>--last-write-wins</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9a8d75f99757b6dda8ddb9fc3e2e5f6d6ecc6fd" translate="yes" xml:space="preserve">
          <source>--port</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="230a48d5d9ed2506becf302f80d9f010a4e4205e" translate="yes" xml:space="preserve">
          <source>--read-only</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccca3a31c347ba7443de7a0fee3d8e83af0fe279" translate="yes" xml:space="preserve">
          <source>--resolve-duplicates</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9270616d2dcc9495fd782f65ed8a403b1c2b2160" translate="yes" xml:space="preserve">
          <source>--staticroot</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf721248e296478d73ac1524c91ae469226a4939" translate="yes" xml:space="preserve">
          <source>--table</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d51885084b995186be1b02b33fe4c12f858e643" translate="yes" xml:space="preserve">
          <source>--table=prod-tsdb</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88380be5e3e2bf6fa8a76b727109584571208b7c" translate="yes" xml:space="preserve">
          <source>--threads</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2182bcee02dc5451b534aa791b36c10fd5b9cbb9" translate="yes" xml:space="preserve">
          <source>--threads=16</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6677227712f1f3878e17c901ef87952af2306322" translate="yes" xml:space="preserve">
          <source>--uidtable</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbddf30daf5db9781416dd18d7b38a79055fc76a" translate="yes" xml:space="preserve">
          <source>--uidtable=prod-tsdb-uid</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6027b1ed1e89a2f2c413f574c89b06f05c7cb27a" translate="yes" xml:space="preserve">
          <source>--use_data_table</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2860556708260c3603c4f244db1aa03e85301b6" translate="yes" xml:space="preserve">
          <source>--verbose</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05b371da828f15a27e74715aa1f2e67b53c64506" translate="yes" xml:space="preserve">
          <source>--worker-threads</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd66d3c94c88711ea87ffb9f3a03ba7001b1e1a2" translate="yes" xml:space="preserve">
          <source>--zkbasedir</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe941e1eb8025bbea3f6355dbbf4551e3bd62e0b" translate="yes" xml:space="preserve">
          <source>--zkbasedir=/prod/hbase</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cf13490fa905dde3fbb123d774c7ad1c006e55a" translate="yes" xml:space="preserve">
          <source>--zkquorum</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7044e1f1a8a8b327c5bf97d7a214e3c03f639a66" translate="yes" xml:space="preserve">
          <source>--zkquorum=zkhost1,zkhost2,zkhost3</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6a47c3824024957fb63ee6e72e40a19d660e8e6" translate="yes" xml:space="preserve">
          <source>.*\.(.*)\.mysite\.com</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8345cbd4d9e9f1484c31da19fe84e913576307f7" translate="yes" xml:space="preserve">
          <source>./opentsdb.conf</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f77c40432d08e25f1a49ed5e6ae680723956024" translate="yes" xml:space="preserve">
          <source>/aggregators (&lt;strong&gt;Deprecated&lt;/strong&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd849f8aac14cec6acba1bad972b057405c72477" translate="yes" xml:space="preserve">
          <source>/api/aggregators</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04c6597480a80bdd5700bec651fabb9e0519e851" translate="yes" xml:space="preserve">
          <source>/api/annotation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30c6d660ab2e4bcb0d2813613d127269eb0f2cec" translate="yes" xml:space="preserve">
          <source>/api/annotation/bulk</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c5fcdb0fafcc174d1f9556c1cd63005351cd3bc" translate="yes" xml:space="preserve">
          <source>/api/config</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d1167c87bdf32ede13d5fc4929a1bec73987f66" translate="yes" xml:space="preserve">
          <source>/api/config/filters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24271c3ce21133510b4f036047cbb03271af312d" translate="yes" xml:space="preserve">
          <source>/api/dropcaches</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad5112799fd54fb5e6d3560dcf3558d8b039d8de" translate="yes" xml:space="preserve">
          <source>/api/put</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39a01428fee36d938bb8d4822b1124e69d001a22" translate="yes" xml:space="preserve">
          <source>/api/put/?sync&amp;amp;sync_timeout=60000</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32e7e5d2790e27065dbd5a73117eb32335b9e900" translate="yes" xml:space="preserve">
          <source>/api/put?details</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15968da8c7509cbe3ac31efda0c5b1d70c804104" translate="yes" xml:space="preserve">
          <source>/api/put?summary</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0b6b5ed49b43b6c7f8f6ef491551f83b7e4863c" translate="yes" xml:space="preserve">
          <source>/api/put?sync</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ff2202edc7adac64a6cabcde7c53e9cf39d5172" translate="yes" xml:space="preserve">
          <source>/api/query</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a52f331f571deadd53003c60034ab0fe4e8c3d8b" translate="yes" xml:space="preserve">
          <source>/api/query/exp</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="133c09306430aaf2975ea3f6987b96ea5fc50a8e" translate="yes" xml:space="preserve">
          <source>/api/query/gexp</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="288aef7d003542e4bf15f6927d4703f6535d4950" translate="yes" xml:space="preserve">
          <source>/api/query/last</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="655558a22b2d14db935626b02efa5ba4c585fbd4" translate="yes" xml:space="preserve">
          <source>/api/rollup</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2eab0f26d8508a9e92857801a19d45a210ae626" translate="yes" xml:space="preserve">
          <source>/api/search</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ba2bd474e0d7b9e7c45a4fea013626df0209260" translate="yes" xml:space="preserve">
          <source>/api/search/annotation - &lt;a href=&quot;#annotation-endpoint&quot;&gt;Annotation Response&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bb263599996680941fdc047cba5845537d297ef" translate="yes" xml:space="preserve">
          <source>/api/search/lookup</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e76cbdca5d8d4dcb98652695ceef369fd0c6bab1" translate="yes" xml:space="preserve">
          <source>/api/search/tsmeta - &lt;a href=&quot;#tsmeta-endpoint&quot;&gt;TSMETA Response&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49612b9cb239302d0c0111293caca44249b2786b" translate="yes" xml:space="preserve">
          <source>/api/search/tsmeta_summary - &lt;a href=&quot;#tsmeta-summary-endpoint&quot;&gt;TSMETA_SUMMARY Response&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47a928088c1e0e70fb48ec3c25d47a5ae2bdcddc" translate="yes" xml:space="preserve">
          <source>/api/search/tsuids - &lt;a href=&quot;#tsuids-endpoint&quot;&gt;TSUIDS Response&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b075f020fd6761bbce9695abd8a6f9480360b459" translate="yes" xml:space="preserve">
          <source>/api/search/uidmeta - &lt;a href=&quot;#uidmeta-endpoint&quot;&gt;UIDMETA Response&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aee96859396592bab590e04beeac4b23d2ac659b" translate="yes" xml:space="preserve">
          <source>/api/serializers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c49efceb2026a54e2a340a7f84494a938651c1f" translate="yes" xml:space="preserve">
          <source>/api/stats</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58c72250d0f1c7223c65fabf07c9f9a084abb2d2" translate="yes" xml:space="preserve">
          <source>/api/stats/jvm</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65957bf0d8edc873f3fa65763707bc7eebd2e513" translate="yes" xml:space="preserve">
          <source>/api/stats/query</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="961b2baa2eb39695cccc7f71d66d21cacdfd52b8" translate="yes" xml:space="preserve">
          <source>/api/stats/region_clients</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c60cc1197590bec3e40ff9ff6aa1864783fdb2e2" translate="yes" xml:space="preserve">
          <source>/api/stats/threads</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="282eb2ae28ff1013e1aac3c4475d1b1144aac19c" translate="yes" xml:space="preserve">
          <source>/api/suggest</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6c3364e5cdf78051e9f903161b0db4ff9746a68" translate="yes" xml:space="preserve">
          <source>/api/tree</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7c687d152e7522c1ca54c2d263999b453f51fd0" translate="yes" xml:space="preserve">
          <source>/api/tree/branch</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="052078b77f75acf871f2c4c7a32efe41e168bfdf" translate="yes" xml:space="preserve">
          <source>/api/tree/collisions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ec2c463f1c44e9607262789d30d06da77765e43" translate="yes" xml:space="preserve">
          <source>/api/tree/notmatched</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1df950ae1f362104fb849a546eda075ebfa71fc" translate="yes" xml:space="preserve">
          <source>/api/tree/rule</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e7d7002fada735a73498191bb7850d9d75c70ad" translate="yes" xml:space="preserve">
          <source>/api/tree/rules</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8696dafea3a132063bbf54a332941b969b7af6e" translate="yes" xml:space="preserve">
          <source>/api/tree/test</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="414757877faa8d01f1d56c246123fd005242ed7e" translate="yes" xml:space="preserve">
          <source>/api/uid</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="926712de54a4a0a2c12b859ae16aca475ac23faa" translate="yes" xml:space="preserve">
          <source>/api/uid/assign</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f60bd7ced0588cf4d9d2c525d763364457bd2e21" translate="yes" xml:space="preserve">
          <source>/api/uid/tsmeta</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fed33fd7de9d517f17633a6dab30ebab1a1a549d" translate="yes" xml:space="preserve">
          <source>/api/uid/uidmeta</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="550c2ec4c29c432f9a6bf5d6f73f786994cf6c15" translate="yes" xml:space="preserve">
          <source>/api/version</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02b57708b30ac3e98e051967445493bbae18698d" translate="yes" xml:space="preserve">
          <source>/diediedie (&lt;strong&gt;Deprecated&lt;/strong&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0a174bfb9f88d826e33fca711995800c7e447b1" translate="yes" xml:space="preserve">
          <source>/dropcaches (&lt;strong&gt;Deprecated&lt;/strong&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d17cbd69153738c698e278117b8be2fcdaa5e89" translate="yes" xml:space="preserve">
          <source>/etc/opentsdb - Configuration files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="689f0c780e5d39bc715aa7a8c663cd5fad8974c6" translate="yes" xml:space="preserve">
          <source>/etc/opentsdb.conf</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99168f68d24f20df487aa39d6320f20095605357" translate="yes" xml:space="preserve">
          <source>/etc/opentsdb/opentsdb.conf</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05b503d849d99c422d032490f82d60a29a771f94" translate="yes" xml:space="preserve">
          <source>/hbase</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e613ff01fe6a64e4e05fcf69c49625f0b34bde24" translate="yes" xml:space="preserve">
          <source>/logs (&lt;strong&gt;Deprecated&lt;/strong&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26011d2ad5667eb97f0791c7e91af13eb9205e82" translate="yes" xml:space="preserve">
          <source>/opt/opentsdb/opentsdb.conf</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="635530728904c08a30d7d4a47d276a126644be27" translate="yes" xml:space="preserve">
          <source>/opt/temptsd/</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e383a98f30e50178dfab2ae2ba2e445ecb2a891" translate="yes" xml:space="preserve">
          <source>/q (&lt;strong&gt;Deprecated&lt;/strong&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9b05e880934c068718fc7becdc4b5a551c1314d" translate="yes" xml:space="preserve">
          <source>/s</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="596e9d80175817ae35b1b6df71e08dc7db4eb8e2" translate="yes" xml:space="preserve">
          <source>/stats (&lt;strong&gt;Deprecated&lt;/strong&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51200e924d9e296ff23b6d60756b37d9f50becbf" translate="yes" xml:space="preserve">
          <source>/suggest (&lt;strong&gt;Deprecated&lt;/strong&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e15496ec6be8e7981a8bca119a5d96cf45031ca5" translate="yes" xml:space="preserve">
          <source>/tmp/opentsdb - Temporary cache files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9348008fca47c6524b0438f2f02eec10d5fdf014" translate="yes" xml:space="preserve">
          <source>/usr/share/opentsdb - Application files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7938d6e5b118c0513054e9a7d490fab5dc9f72f6" translate="yes" xml:space="preserve">
          <source>/usr/share/opentsdb/bin - The &quot;tsdb&quot; startup script that launches a TSD or command line tools</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b98723e7ebe796fa6845abe05446f7f95bdc11eb" translate="yes" xml:space="preserve">
          <source>/usr/share/opentsdb/lib - Java JAR library files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3a79a4841ff7be6533b39447a0785c764bb63ed" translate="yes" xml:space="preserve">
          <source>/usr/share/opentsdb/plugins - Location for plugin files and dependencies</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="068127bbaf322693a6929b413cbf2eb63f4e694d" translate="yes" xml:space="preserve">
          <source>/usr/share/opentsdb/static - Static files for the GUI</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="daed76bc5c074a39349651e747d30e97939bbbe2" translate="yes" xml:space="preserve">
          <source>/usr/share/opentsdb/tools - Scripts and other tools</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e4986b8cce7b0cf78a6816d81a05b890df06313" translate="yes" xml:space="preserve">
          <source>/var/log/opentsdb - Logs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9766926143358d1059fb5b85f02d9350512d4182" translate="yes" xml:space="preserve">
          <source>/version (&lt;strong&gt;Deprecated&lt;/strong&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b3c62ded1bc67e681c433dd18eff9dbc1de9abd" translate="yes" xml:space="preserve">
          <source>000001000001000001, 000001000001000002</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11077a26c664997e877ed501448af0b6744f339c" translate="yes" xml:space="preserve">
          <source>00002A</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d91293ef41770434dd24ee8ae500cfa9bbd20c7" translate="yes" xml:space="preserve">
          <source>00002A000001000001</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2b63c2f810c46fe1889ec06903407b0c020ba64" translate="yes" xml:space="preserve">
          <source>00010001BECD</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8922d2147c6809dda637d7d35481f016d33889ef" translate="yes" xml:space="preserve">
          <source>000183A21C8F</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9c9f7bc39bb993fb7ed87ec63024c583691a6bd" translate="yes" xml:space="preserve">
          <source>1h</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26c025bd184ecd38194134296cf8c0f42f89ee8d" translate="yes" xml:space="preserve">
          <source>1h-ago</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85ed4064813eec7faa3b6a8017c34b648762cacd" translate="yes" xml:space="preserve">
          <source>1h-ago, 2015/05/05-00:00:00</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d93b03aa0312296eee3296f48eacec3a94c903c" translate="yes" xml:space="preserve">
          <source>1h-avg</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d5d8248aaf5d7cadcb57fdb35156df45a8b5bf9" translate="yes" xml:space="preserve">
          <source>1s-ago</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fe6e35c65f04926a9bfba9788599627d87f7f3c" translate="yes" xml:space="preserve">
          <source>2 x CPU Cores</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c913a54de81e8922fc63825902e84cd1c6cbe1ec" translate="yes" xml:space="preserve">
          <source>2.0 also introduced a real-time publishing plugin where incoming data points can be emitted to another destination immediately after they're queued for storage. This is disabled by default so test any plugins you are interested in before deploying in production.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d86a14831e222ed7b11f13e0a252868d38773941" translate="yes" xml:space="preserve">
          <source>2.0 introduces pluggable serializers that allow for parsing user input and returning results in different formats such as XML or JSON. Serializers only apply to the 2.0 API calls, all 1.0 behave as before. For details on Serializers and options supported, please read &lt;a href=&quot;serializers/index&quot;&gt;&lt;em&gt;HTTP Serializers&lt;/em&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd9493e57ff132d2d73e2bad8848d3d3566164ea" translate="yes" xml:space="preserve">
          <source>2.2 query with filters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b10f93eb1e4323031d305a06f797eb6f79b536de" translate="yes" xml:space="preserve">
          <source>2.4 (Planned)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c36c9b4ff7ef941e02b3eb4901ee6bb1688f497" translate="yes" xml:space="preserve">
          <source>23:07:05.323 [main] INFO net.opentsdb.tools.TextImporter - Processed file in 22 ms, 2 data points (90.9 points/s)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a297c1ba91a8313ceed66414be7dd52646e2a02" translate="yes" xml:space="preserve">
          <source>23:07:06.375 [main] ERROR net.opentsdb.tools.TextImporter - Exception caught while processing file timeseries1.gz line=sys.cpu.system 1356998400 42 host=web02 novalue=</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0c2ea47699573dab171581f2cc63e4c5968e6e0" translate="yes" xml:space="preserve">
          <source>24h-ago</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee2966cfeb5200a0d7116ac163387de0289246dc" translate="yes" xml:space="preserve">
          <source>3.X (Planned)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0e89ac73e4f1f0c78411c639da6482e466fd378" translate="yes" xml:space="preserve">
          <source>4 Byte Floats with 8 Byte Value Bad</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd0ef30a1feaadba7c7cfe28b95775a91bd0d79a" translate="yes" xml:space="preserve">
          <source>4 Byte Floats with 8 Byte Value OK</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1dac5b9b2c207ebbea1d73537276df31c1ddcda" translate="yes" xml:space="preserve">
          <source>5m-avg</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17420b310ede6bd8132883a766bccd182e2ce6d3" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://grafana.org&quot;&gt;Grafana&lt;/a&gt; - A dashboard and graph editor with OpenTSDB support.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="117bc7420f1d0f854583127171ac9dee3de7ecde" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://strataconf.com/strata2011/public/schedule/detail/16996&quot;&gt;Strata 2011&lt;/a&gt; - Presentation by Benoit Sigoure</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7025cdaf1d37b038e8433ca6edbcc19c2b652023" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://www.gnuplot.info/&quot;&gt;GnuPlot&lt;/a&gt; - Graphing library used by OpenTSDB</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66862b71495975603b7ee3cb6b4312d29a97f41b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://www.hbasecon.com/sessions/opentsdb-at-scale/&quot;&gt;HBaseCon 2013&lt;/a&gt; - Presentation from Jonathan Creasy and Geoffrey Anderson</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27d3036ea579f2907c40551da2af7e981138de97" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://www.manning.com/dimidukkhurana/&quot;&gt;HBase in Action&lt;/a&gt; (Manning Publications) - Chapter 7: HBase by Example: OpenTSDB</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e02a356ba42bb2b0aeb2eae8c080b44323d9788" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://www.r-project.org/&quot;&gt;R&lt;/a&gt; - Statistical computing framework</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46a325173ce3a1134bee7a71838bdf5e17240ddd" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://www.scipy.org/&quot;&gt;SciPy&lt;/a&gt; - Python libraries for dealing with numbers (Pandas library has time series support)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="310d3bc939744d033af2d4fef7645f6a42bdb348" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://www.slideshare.net/geoffanderson/monitoring-mysql-with-opentsdb-19982758&quot;&gt;Percona Live 2013&lt;/a&gt; Presentation from Geoffrey Anderson</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b874b75d09bc4b7e78d99370a6a4c136415443ef" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://www.wrox.com/WileyCDA/WroxTitle/Professional-NoSQL.productCd-047094224X.html&quot;&gt;Professional NoSQL&lt;/a&gt; (Wrox Publishing) - Mentioned in Chapter 17: Tools and Utilities</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a4f909f3365335d71996b504750663c17fcabbb" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://www.youtube.com/watch?v=WlsyqhrhRZA&quot;&gt;OSCon Data 2011&lt;/a&gt; - Presentation from Benoit Sigoure</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19136da16502ead371e68de7683c201c525be53a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://bosun.org/&quot;&gt;Bosun&lt;/a&gt; - A monitoring and alerting system built on OpenTSDB from the folks at &lt;a href=&quot;http://stackexchange.com/&quot;&gt;Stack Exchange&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="351000b488d8b877d613f729b1eb8e5130ad9590" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://cloud.google.com/&quot;&gt;Google Cloud Platform&lt;/a&gt; provides hosting of Google's Bigtable database, the original inspiration of HBase and many NoSQL storage systems. Because HBase is so similar to Bigtable, running OpenTSDB 2.3 and later with Google's backend is simple. Indeed, the schemas (see &lt;a href=&quot;hbase&quot;&gt;&lt;em&gt;HBase Schema&lt;/em&gt;&lt;/a&gt;) are exactly the same so all you have to do is create your Bigtable instance, create your TSDB tables using the Bigtable HBase shell, and fire up the TSDs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c9bb16390f2ad607df02de82bbd49d1e9e827b9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/99designs/vacuumetrix&quot;&gt;Vacuumetrix&lt;/a&gt; - Utility to pull data from various cloud services or APIs and store the results in backends such as Graphite, Ganglia and OpenTSDB.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ccf67e507023e03bd06cba45707ddf6701a6e80" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/OpenTSDB/tcollector/&quot;&gt;tcollector&lt;/a&gt; is a client-side process that gathers data from local collectors and pushes the data to OpenTSDB. You run it on all your hosts, and it does the work of sending each host's data to the TSD.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab2ad516f9ae0381389a255887faab8851ff3096" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/Ticketmaster/metrilyx-2.0&quot;&gt;Metrilyx&lt;/a&gt; - A Python and Django based dashboard system with dynamic graphs from Ticketmaster.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73596a4bbaf963202ed55be78d167564a2ec3510" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/acaiafa/opentsdb-cookbook&quot;&gt;OpenTSDB Cookbook&lt;/a&gt; - A Chef cookbook for CentOS or Ubuntu.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6197975c2acae61b30bff2c24a10dfe7659a0b4" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/auxesis/collectd-opentsdb&quot;&gt;Collectd-opentsdb&lt;/a&gt; - A Collectd plugin to emmit stats to a TSD.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ac3cbbd15f1b9cc69627999479f804f1f6236de" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/box/StatusWolf&quot;&gt;Status Wolf&lt;/a&gt; - A PHP and MySQL based dashboard for creating and storing dynamic custom graphs with OpenTSDB data including anonmaly detection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d87e67149a549c8d197fe0285671c1be8dfc4cb" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/bradfordw/gen_opentsdb&quot;&gt;Erlang Client&lt;/a&gt; - A simple client to publish data to a TSD from Erlang.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a19441e1b9bc2e6e0c7a9e3f2d0eb450409a4735" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/bzub/go-opentsdb&quot;&gt;Go&lt;/a&gt; - Work with OpenTSDB data in Go.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ada355dbf80277b23bcbae7f58b7deca8fcc7e4" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/charms/opentsdb&quot;&gt;JuJu Deployment Charm&lt;/a&gt; - Utility to compile OpenTSDB from GIT and deploy on a cluster.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfae233840d21a29dabf09ed29beb527077370cf" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/clover/opentsdb-dashboard&quot;&gt;Opentsdb-Dashboard&lt;/a&gt; - An HBase based dashboard system for OpenTSDB 1.x from Clover.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20da2365e9cda32954cd30bf769c697d954c50cd" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/cyngn/vertx-opentsdb&quot;&gt;vert.x OpenTsDb&lt;/a&gt; - A library to write data to OpenTSDB from Vert.x.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83e792c14e8e4b295b68936cc18d514d3fec2f9b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/danslimmon/statsd-opentsdb-backend&quot;&gt;Statsd Publisher&lt;/a&gt; - A statsd backend to publish data to a TSD.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f72f0103b2a4a3b765cc6931f6f56bbbfedf80c7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/dotcloud/collectd-opentsdb&quot;&gt;Collectd-opentsdb Java&lt;/a&gt; - A Collectd plugin to that uses the OpenTSDB Java API to push data to a TSD.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f340522feeffc17e2ad97adfcaf0bcdb05fda41b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/facebook/tsdash&quot;&gt;TSDash&lt;/a&gt; - A Java based UI and dashboard from Facebook.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3efaa81a69df885ea4f852c2ba119b846d18d42" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/frogmaster/opentsdb-snmp&quot;&gt;opentsdb-snmp&lt;/a&gt; - Fetches data from SNMP enabled devices and writes to OpenTSDB.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b6b9783c0237429868e30ea9b45e1e7faee6d72" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/gutefrage/OpenTsdbSkylinePublisher&quot;&gt;Skyline&lt;/a&gt; - A proof-of-concept plugin to publish to an Etsy Skyline processor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="107ccf177eb57716cdca23326a1cf625222b35af" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/holstius/opentsdbr&quot;&gt;R Client&lt;/a&gt; - A client to pull data from OpenTSDB into R.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b63143de6446277b01eb093f1790ce306db65b2f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/inst-tech/opentsdb-discoveryplugins/blob/master/src/main/java/io/tsdb/opentsdb/discoveryplugins/CuratorPlugin.java&quot;&gt;Apache Curator&lt;/a&gt; - A beta plugin which can be used to register OpenTSDB in Zookeeper using Apache Curator's Service Discovery mechanism</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a87e578d9e995ba1447a1f26cedf6b15f3a79b50" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/inst-tech/opentsdb-discoveryplugins/blob/master/src/main/java/io/tsdb/opentsdb/discoveryplugins/IdentityPlugin.java&quot;&gt;Identity Plugin&lt;/a&gt; - An example plugin which does nothing but can be used as a starting point for future Startup Plugins and can be used to test the registration mechanism.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee1127d2917351fe5541a4a75890376ff08b5bf9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/j05h/continuum&quot;&gt;Ruby&lt;/a&gt; - A read-only client for querying data from the 1.x API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81e1433cbf933ab0da0796552d0c195cd3816c1c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/johnewart/ruby-opentsdb&quot;&gt;Ruby&lt;/a&gt; A write-only client for pushing data to a TSD.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a0c65f67f3d5755119d2f8a1ea938074bc413f9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/looztra/opentsdb-cookbook&quot;&gt;Chef Cookbook&lt;/a&gt; - Deploy from source via Chef.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b52df2915b3831bb4887da57e1db36ddcc54f202" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/manolama/opentsdb-elasticsearch&quot;&gt;Elastic Search&lt;/a&gt; - A beta plugin that connects to an Elastic Search cluster</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38ee338ffa8ad8bb4bb3441f7101b93cca08c293" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/manolama/opentsdb-rtpub-rabbitmq&quot;&gt;RabbitMQ&lt;/a&gt; - A proof-of-concept plugin to publish to a RabbitMQ cluster by metric name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78fbf648565375fd2ba1ddf08f223121cd3fe177" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/mburger/puppet-opentsdb&quot;&gt;Puppet Module&lt;/a&gt; - A puppet deployment module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56da0b0a1b546a78b38d9a17880779e8519a0326" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/mikebryant/graphite-opentsdb-finder&quot;&gt;Graphite OpenTSDB Finder&lt;/a&gt; - A Graphite plugin to load TSDB data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba4db41f92eb9f1f23d126f6aca9bccc91350145" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/nimbusproject/opentsdbproxy&quot;&gt;OpenTSDB Proxy&lt;/a&gt; - A Django based proxy with authentication and SSL support to run in front of the TSDs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6e9036b26b4ff96dbd723a0d511ba2a52a24e61" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/noca/opentsdbjsonproxy&quot;&gt;opentsdbjsonproxy&lt;/a&gt; - An HTTP proxy to convert 1.x ASCII output from the &lt;code&gt;/q&lt;/code&gt; endpoint to JSON for use with High Charts or other libraries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41543ae3bd5ea4d3fee5a57eb22aed3e5c18b08f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/opower/time-series&quot;&gt;time-series&lt;/a&gt; - A Ruby client that supports both reading and writing to OpenTSDB 2.x - contains support for synthetic time series calculations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4457b613a56f38647e4326b1a4d31d4b04fcb7d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/santosh-d3vpl3x/opentsdb-udfs&quot;&gt;OpenTSDB Pig UDFs&lt;/a&gt; - Integrate OpenTSDB with Apache Pig for large data set processing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1c226a6f572b82ef3de035374fe7cca9626044e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/sps/metrics-opentsdb&quot;&gt;Coda Hale Metrics Reporter&lt;/a&gt; - Writes data to OpenTSDB from the Java Metrics library.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="236ca5214df534f211cf2f40d8f01fb44368c9e4" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/stuart-warren/metrics-opentsdb&quot;&gt;Alternative Coda Hale Metrics Reporter&lt;/a&gt; - Writes data to OpenTSDB from the Java Metrics library.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e962dec924e029f2e9a1c95ed2ca987a0d8284e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/turn/opentsdb-dashboard&quot;&gt;OpenTSDB Dashboard&lt;/a&gt; - A JQuery based dashboard from Turn.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f88c78ea1a164b023a8d32eb95e3ea13c32ed37" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/worldline/proxyTSDB&quot;&gt;proxTSDB&lt;/a&gt; - A metric data gateway capable of buffering data to RAM or disk if the TSD is down.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2eba61d9799ee0f30b53b099cb171d4b6c111174" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/yandex/opentsdb-flume&quot;&gt;Flume Module&lt;/a&gt; - Write data from Flume to a TSD.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ab6c8d4cfd664701442f8a242869a90b51c230c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://pypi.python.org/pypi/potsdb&quot;&gt;Potsdb&lt;/a&gt; - A Python client for writing data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c8b74bf69f7fa29782c1a3e31f6fab7bd61a16d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://registry.hub.docker.com/u/opower/opentsdb/&quot;&gt;opower/opentsdb&lt;/a&gt; - A Docker image containing OpenTSDB, HBase, and tcollector. Comes in both 2.0.1 and 2.1 versions (latest defaults to 2.1). Execute &lt;code&gt;docker run -d -p 4242:4242 opower/opentsdb&lt;/code&gt; to create an OpenTSDB instance running on port 4242.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cea5b8dfe986d85fd9a0bb0f799542d6f2fef796" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://registry.hub.docker.com/u/petergrace/opentsdb-docker/&quot;&gt;petergrace/opentsdb-docker&lt;/a&gt; - A prebuilt Docker image with HBase and OpenTSDB already configured and ready to run! If you have Docker installed, execute &lt;code&gt;docker run -d -p 4242:4242 petergrace/opentsdb-docker&lt;/code&gt; to create an opentsdb instance running on port 4242.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="873720542dc9327884938f0bbafde059a8d5a380" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://www.varnish-cache.org/&quot;&gt;Varnish&lt;/a&gt; is a powerful HTTP load balancer (reverse proxy), which is also very good at caching. When running multiple TSDs, Varnish comes in handy to distribute the HTTP traffic across the TSDs. Bear in mind that write traffic doesn't use the HTTP protocol by default, and as such you can only use Varnish for read queries. Using Varnish will help you easily scale the amount of read capacity of your TSD cluster.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="830a1992803af1b21d1a62b0ae15c9fb54b5e36f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;json&quot;&gt;&lt;em&gt;JSON Serializer&lt;/em&gt;&lt;/a&gt; - The default formatter for OpenTSDB handles parsing JSON requests and returns all data as JSON.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96efa907cb97ec1e39f331292fc65a1de09f50c8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;group_by_aggregator&amp;gt;&lt;/code&gt; for a &lt;em&gt;raw&lt;/em&gt;&lt;strong&gt;pre-aggregated&lt;/strong&gt; value that has not been rolled up over time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99b9515d24f88f2be9508a7358513af781b5da90" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;interval&amp;gt;:&amp;lt;aggregator&amp;gt;:&amp;lt;group_by_aggregator&amp;gt;&lt;/code&gt; for a &lt;em&gt;rolled up&lt;/em&gt;&lt;em&gt;pre-aggregated&lt;/em&gt; value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b356aedb65d9cfd1c2ec4a39332e44fd1452dc5a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;interval&amp;gt;:&amp;lt;aggregator&amp;gt;&lt;/code&gt; for a &lt;em&gt;raw&lt;/em&gt; or &lt;em&gt;non-pre-aggregated&lt;/em&gt;&lt;strong&gt;rollup&lt;/strong&gt; over the interval.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dbdad6311dd985b712d858e6d2e9b707bd7f85e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;--delete-bad-values&lt;/code&gt; will remove the column.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ff61e7620e3faa43ae60ed3457d8bc056209485" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dal&lt;/code&gt; = x00x01x83x8F</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05970573c9f15b940614038da3841d0929c59cc6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;id&lt;/code&gt; Column Family</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40eb1207ff16003753bd757bebc80dc6141cb9a3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;literal_or(web01|web02|web03)&lt;/code&gt;&lt;code&gt;literal_or(web01)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdeab82c467e7e6955a61db3f325b4ac4778532c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;metrics&lt;/code&gt; for mapping metric names to UIDs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdc4fab6945a6133afc89525dbb3744fcc8efbe9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;myapp&lt;/code&gt; = x06x38x7CxF5</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce707eb74e3518846d076f626630e5f5e3d4cf94" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;name&lt;/code&gt; Column Family</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38d82f8b1cf46f23a3820eaf07536fd027ee140e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tagk&lt;/code&gt; for mapping tag names to UIDs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2e30c6072eacabbb33eb5371aa27bf9a381bb46" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tagv&lt;/code&gt; for mapping tag values to UIDs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f4fa0bbb07e29eb164cf70fce7f76e82b0339fc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;time&lt;/code&gt;'s aggregator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9a0a04f2a401e75422cf354cdb92dd4a02ab8f2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tsd.core.meta.enable_realtime_ts&lt;/code&gt; - When enabled, any time a new time series arrives, a TSMeta object will be created and optionally sent to a configured search plugin. This option will also enabled the &lt;code&gt;tsd.core.meta.enable_tsuid_incrementing&lt;/code&gt; setting even if it's explicitly set to &lt;code&gt;false&lt;/code&gt; in the config. If you often push new time series to your TSDs, this option may incur a fair amount of overhead and require some garbage collection tuning. If you do not often push new time series, you should be able to enable this setting without a problem, but watch the memory usage of your TSDs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6fc971b5fa87d540c2f2443bfea1c5bf14b32ff" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tsd.core.meta.enable_realtime_uid&lt;/code&gt; - When enabled, any time a new metric, tag name or tag value is assigned a UID, a UIDMeta object is generated and optionally sent to the configured search plugin. As UIDs are assigned fairly infrequently, this setting should not impact performance very much.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05bd9c7d6012edfc1bbc91e766ffa94359f0e3ee" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tsd.core.meta.enable_tsuid_incrementing&lt;/code&gt; - When this setting is enabled, every data point written will increment a counter in the &lt;code&gt;tsdb-meta&lt;/code&gt; table corresponding to the time series the data point belongs to. As every data points spawns an increment request, this can generate a much larger load in a TSD and chew up heap space pretty quickly so only enable this if you can spread the load across multiple TSDs or your writes are fairly small. Enabling incrementing will override the &lt;code&gt;tsd.core.meta.enable_tsuid_tracking&lt;/code&gt; setting. For example a single TSD should be able to acheive 3,000 data points per second with about 6GB of heap.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18994901f2557fedf42c6124837aeb8c62206708" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tsd.core.meta.enable_tsuid_tracking&lt;/code&gt; - When enabled, every time a data point is recorded, a &lt;code&gt;1&lt;/code&gt; is written to the &lt;code&gt;tsdb-meta&lt;/code&gt; table with the timestamp of the given data point. Enabling this setting will generate twice the number of &lt;em&gt;puts&lt;/em&gt; to storage and may require a greater amount of memory heap. For example a single TSD should be able to acheive 6,000 data points per second with about 2GB of heap.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcc72e527ffe6cc8a815b08ca858a11d2c057d4c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;web01&lt;/code&gt; = x06xBCx4Cx55</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0faf07a0bec5bdc7c09ba6d7411844812d3c3aa4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;yyyy&lt;/code&gt; represents the year as a four digit value, e.g. &lt;code&gt;2013&lt;/code&gt;. &lt;code&gt;MM&lt;/code&gt; represents the month of year starting at &lt;code&gt;01&lt;/code&gt; for January to &lt;code&gt;12&lt;/code&gt; for December. &lt;code&gt;dd&lt;/code&gt; represents the day of the month starting at &lt;code&gt;01&lt;/code&gt;. &lt;code&gt;HH&lt;/code&gt; represents the hour of day in 24 hour format starting at &lt;code&gt;00&lt;/code&gt; to &lt;code&gt;23&lt;/code&gt;. &lt;code&gt;mm&lt;/code&gt; represents the minutes starting at &lt;code&gt;00&lt;/code&gt; to &lt;code&gt;59&lt;/code&gt; and &lt;code&gt;ss&lt;/code&gt; represents seconds starting at &lt;code&gt;00&lt;/code&gt; to &lt;code&gt;59&lt;/code&gt;. All months, days, hours, minutes and seconds that are single digits must be preceeded by a 0, e.g. the 5th day of the month must be given as &lt;code&gt;05&lt;/code&gt;. When supplying on the data without a time, the system will assume midnight of the given day.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a6765eb32e499ae672c16fb9836bca560e542c7" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;#CPU cores * 2&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc3a92b3e2069df7f17734b6a925bd416896b780" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;/api/search/lookup&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6c8dbd105ebad2dff31b865312125276c4e3857" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Changing JVM parameters&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e9cfef96a8161bdebca41a89392ca7574751d00" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Downsampling&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b6ee9747fe724799f360b3f5740e340e9d6e0bc" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Examples&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="741497a57df476e3f67ad3a708c34092035dc193" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Examples&lt;/em&gt;&lt;code&gt;regexp(web.*)&lt;/code&gt;&lt;code&gt;regexp(web[0-9].mysite.com)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d6867a05b3a62386b75e3353547ba434e06b6b4" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Examples&lt;/em&gt;&lt;code&gt;wildcard(*mysite.com)&lt;/code&gt;&lt;code&gt;wildcard(web*)&lt;/code&gt;&lt;code&gt;wildcard(web*mysite.com)&lt;/code&gt;&lt;code&gt;wildcard(web*mysite*)&lt;/code&gt;&lt;code&gt;wildcard(*)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5818bea9c6d9421bdbc872f9d89e1ba56a938b59" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Filter Conversions&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9546b8553f9e3b5b6c3b79ccc9676f680b09aabe" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Filters&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77f04e318955f302857ea7586c99d0f90af87bc7" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Fix:&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6ba9eb542cbf9778c52aa6d77e0b828710ea421" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;JSON Content:&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0316ed7922f021cd494faf782b0a4e69007156b3" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;NOTE: (Version 2.1)&lt;/em&gt; The bulk endpoint enables adding, updating or deleting multiple annotations in a single call. Annotation updates must be sent over PUT or POST as content data. Query string requests are not supported for &lt;code&gt;POST&lt;/code&gt; or &lt;code&gt;GET&lt;/code&gt;. Each annotation is processed individually and synchronized with the backend. If one of the annotations has an error, such as a missing field, an exception will be returned and some of the annotations may not be written to storage. In such an event, the errant annotation should be fixed and all annotations sent again.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c56aa36c35712b4e023dcfa52c91d1b0026bb571" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Overriding the timezone of the TSD&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd32c5fc29bdab400d4388d83c4ba43e55943c10" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Please try your best not to&lt;/em&gt;. We're extremely picky on the dependencies and will require a code review before we start depending on a new library. The goal isn't to re-invent the wheel either, but we are very mindful about the number and quality of dependent libraries we pull in. If you absolutely must add a new dependency, here are the steps:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="260980647e1bcf6a239994b47404753cccf063da" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Query String:&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="574d3ef61db48deae80ed1821d261b0640820986" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Rate Options&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="136908675c1d4cf9b53acdf9494363ab0f98632c" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;See Below&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c09810331cecb9d2bc075326b72e1d2c38da0bd6" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;See Examples&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54fe0f392e20313abdc57d294bd01734cad5c762" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;See Leaves Below&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67ad60ca79299febe43d84735f05ed95e41aa54d" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;See below&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e29d69f2816994c39c20b0bccba8ec1b721cbd8e" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Setting default values for common parameters&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5d2239d253b2dad2ad361b44e91ddb34e156d68" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;current time&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8263695a002f8c6865bc2fd3f6591bc1758524a" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;empty&lt;/em&gt; - This means that the field is for queries only and does not, necessarily, represent a field in the response.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f61b461adfdcd5c72ef427c5d4f945267680b47" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;(Version 2.2 and later)&lt;/strong&gt; This endpoint lists the various filters loaded by the TSD and some information about how to use them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8762c4faef9209c2cfc440969883881d834d3f1c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;*&lt;/strong&gt; - The asterisk will return a separate result for each unique tag value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34fadebef7ee973ed01561502b442cfe6f3550bc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aggregation Function&lt;/strong&gt; - What arithmetic was performed on the underlying values to arrive at the new value. E.g. &lt;code&gt;sum&lt;/code&gt; to add all of the time series or &lt;code&gt;max&lt;/code&gt; to store the largest.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b32114301b81507ce885fee9dc39693e176f2f7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aggregation Function&lt;/strong&gt; - What arithmetic was performed on the underlying values to arrive at the new value. E.g. &lt;code&gt;sum&lt;/code&gt; to add all of the values or &lt;code&gt;max&lt;/code&gt; to store the largest.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a48658aad9a5f5812390e93c863edd1f27dd10d1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Back Scan&lt;/strong&gt; - Alternatively you can specify a number of hours to scan back in time starting at the current system time of the TSD where the query is being executed. For example, if you specify a back scan time of 24 hours, the TSD will first look for data in the row with the current hour. If that row is empty, it will look for data one hour before that. It will keep doing that until it finds a data point or it exceeds the hour limit. This method is useful if you often write data points out of order in time. Also note that the larger the backscan value, the longer it may take for queries to complete as they may scan further back in time for data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85456ed3a0427e814663ce48c4b22590ec3d9283" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Batch Processing&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbb779288584f2b5b8094064929e4189555e97d3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Branch ID&lt;/strong&gt; - The ID of the branch. This is a hexadecimal value described below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f5d13e0e952ebe8dfb4e8098b45f6c22a80617a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Branch&lt;/strong&gt; - Each branch is one node of a tree. It contains a list of child branches and leaves as well as a list of parent branches.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ce0fede090ac1f420372814e117f604561b2522" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Branches&lt;/strong&gt; - Child branches one depth level below this branch.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00e37e11430329e4142b5be99bdc6104ce3ff719" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Column Qualifier&lt;/strong&gt; - Columns are different for rolled up data and consist of &lt;code&gt;&amp;lt;aggregation_function&amp;gt;:&amp;lt;time offset&amp;gt;&amp;lt;type + length&amp;gt;&lt;/code&gt; where the aggregation function is an upper-case string consisting of the function name used to generate the rollup and time offset is an offset from the row base time and the type + length describes the column value encoding.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8de7deeba105291a3bb9eb5c97537b712da27c03" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Column Qualifier&lt;/strong&gt; - The qualifier is always the object prefix &lt;code&gt;0x05&lt;/code&gt; with an offset of 0 from the base time on two bytes. E.g. &lt;code&gt;0x050000&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6de41a238c973a70beb690b4867b0bb20cdbafa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Column Qualifiers&lt;/strong&gt; - One of the standard column types above OR one of &lt;code&gt;metrics_meta&lt;/code&gt;, &lt;code&gt;tagk_meta&lt;/code&gt; or &lt;code&gt;tagv_meta&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3acc7cdd8187ce5a5b80429b0c422e5a6e7ed8f6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Column Qualifiers&lt;/strong&gt; - One of the standard column types above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="252ad1b16dfe6b8443da39ce8e6671498af21485" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Column Qualifiers&lt;/strong&gt; - The qualifier for a compacted column will always be an even number of bytes and is simply a concatenation of the qualifiers for every data point that was in the row. Since we know each data point qualifier is 2 bytes, it's simple to split this up. A qualifier in hex with 2 data points may look like &lt;code&gt;07B407D4&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="443e6cd14f83bd470cf57dbaa1ed4857433959b9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Column Qualifiers&lt;/strong&gt; - The qualifier is comprised of 2 or 4 bytes that encode an offset from the row's base time and flags to determine if the value is an integer or a decimal value. Qualifiers encode an offset from the row base time as well as the format and length of the data stored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ea79fc2dd0b3573ce166097fa9cd31948c77454" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Column Qualifiers&lt;/strong&gt; - The qualifier is on 3 or 5 bytes with the first byte an ID that denotes the column as a qualifier. The first byte will always have a hex value of &lt;code&gt;0x01&lt;/code&gt; for annotations (future object types will have a different prefix). The remaining bytes encode the timestamp delta from the row base time in a manner similar to a data point, though without the flags. If the qualifier is 3 bytes in length, the offset is in seconds. If the qualifier is 5 bytes in length, the offset is in milliseconds. Thus if we record an annotation at &lt;code&gt;1292148123&lt;/code&gt;, the delta will be &lt;code&gt;123&lt;/code&gt; and the qualifier, in hex, will be &lt;code&gt;01007B&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0acfa42c0ab4484610c27569558a083be8f90711" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Column Value&lt;/strong&gt; - An unsigned integer encoded on 3 bytes by default reflecting the UID assigned to the string for the column type. If the UID length has been changed in the source code, the width may vary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a65bef351a1b086d5e17263bc2727b145cb6583b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Column Value&lt;/strong&gt; - For the standard qualifiers above, the string assigned to the UID. For a &lt;code&gt;*_meta&lt;/code&gt; column, the value will be a UTF-8 encoded, JSON formatted UIDMeta Object as a string. Do not modify the column value outside of OpenTSDB. The order of the fields is important, affecting CAS calls.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="156bb619002f9042256e6fc251d63279e349458c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Column Value&lt;/strong&gt; - The values are the same as in the main data table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e39eab968c431805a49ff4a1ede688e20598919" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Column Values&lt;/strong&gt; - 1 to 8 bytes encoded as indicated by the qualifier flag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7af27471253b4d7a11b0702c8067b5427b0f7595" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Column Values&lt;/strong&gt; - Annotation values are UTF-8 encoded JSON objects. Do not modify this value directly. The order of the fields is important, affecting CAS calls.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b7798c3cbf1ebdd28d696442938571c967ec26c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Column Values&lt;/strong&gt; - Each column value is the concatenation of original data point qualifier offsets and values in the format &lt;code&gt;&amp;lt;offset1&amp;gt;&amp;lt;value1&amp;gt;&amp;lt;offset2&amp;gt;&amp;lt;value2&amp;gt;...&amp;lt;offsetN&amp;gt;&amp;lt;valueN&amp;gt;&lt;/code&gt;. Values can appear in any order and are sorted at query time (with the option to re-write the sorted result back to HBase.).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad5b820b34a08afd1a4fa4a98f0f5ece8bd4bdb8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Column Values&lt;/strong&gt; - The value is also a concatenation of all of the individual data points. The qualifier is split first and the flags for each data point determine if the parser consumes 4 or 8 bytes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d9322a808beb01725ca813913852cb3169570f5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Complete Example&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="382bbb8a8289a988fd9be50918504a7b11aed3ee" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Content-Type&lt;/strong&gt; - If a query string is not given, the TSD will parse the &lt;code&gt;Content-Type&lt;/code&gt; header from the HTTP request. Each serializer may supply a content type and if matched to the incoming request, the proper serializer will be used. If a serializer isn't located that maps to the content type, the default serializer will be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53e3ca54d4d5f3f592f4c7ba842deeb2439b2e1c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Counter Method&lt;/strong&gt; - If no backscan value is given and meta is enabled, the default is to lookup the data point counter in the meta data table for each time series. This counter records the time when the latest data point was written by a TSD. The endpoint looks up the timestamp and &quot;gets&quot; the proper data row, fetching the last point in the row. This will work most of the time, however please be aware that if you backfill older data (via an import or simply putting a data point with an old timestamp) the counter column timestamp may not be accurate. This method is best used for continuously updated data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9ab2600cf54f0b7fc93421d624d54475169c4e0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;DEBUG&lt;/strong&gt; - If you require further troubleshooting you can enable &lt;code&gt;DEBUG&lt;/code&gt; logging that will give much greater detail about what OpenTSDB is doing under the hood. Be careful enabling this level as it can return a vast amount of data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="671cd24f329b2b72c3368f79af9428db8f8b5f38" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Default&lt;/strong&gt; - If no query string parameter is given or the content-type is missing or not matched, the default JSON serializer will be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="605884db34820fb7a8055bc949ec94b7ffa4d4a7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Depth&lt;/strong&gt; - Each time a branch is added to another branch, the depth increases</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7eea94be086bd4f46d7c2d06a8c09ab8da62599e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Depth&lt;/strong&gt; - How deep within the hierarchy the branch resides.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cdffbd898e15c71c3e984263e11efa138df9748" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Display Name&lt;/strong&gt; - A name for the branch, parsed from a TSMeta object by the tree rule set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0577f0ed6a78ef4a5019ff8736e392b06942eda9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Downsampler&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3669e1009538f8eb2563b8e782c1cbf867653c95" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ERROR&lt;/strong&gt; - Something failed, be it invalid data, a failed connection or a bug in the code. You should pay attention to these and figure out what caused the error. Check with the user group for assistance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67e060663f6f089e7be05a5c9046dea0d03cc095" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Fill Policies&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="123cb44b28ac9427eaeafcef0e94a7cf327060ac" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Filter Fields&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c23179defb91ef1515833819c3d35bd14f5166cf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Full Table&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0c4d7630d77ba4312ee61cc1625f0183b48af4d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Global&lt;/strong&gt; - Metrics pertaining to the entire query including max and average timings of each sub query.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bad4333ded618c37004fc3eb37316e7cdda2577" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;INFO&lt;/strong&gt; - Informational messages are notifications of expected or normal behavior. They can be useful during troubleshooting. Most logging appenders should be set to &lt;code&gt;INFO&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="526781d3defaaf5f8ba6396ec23ef1a44f9c5fc3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Interval&lt;/strong&gt; - How much time is &quot;rolled&quot; up into the new value. For example, &lt;code&gt;1h&lt;/code&gt; for one hour of data or &lt;code&gt;1d&lt;/code&gt; for a day of data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a0b9c5b14670b26e3b65ae04eccbb0b8709f2ca" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JSON Content&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afb92a37a23c3206ae1b4d6f05418b94e192b064" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JSON&lt;/strong&gt; Is the decoded JSON data stored in the column</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09fb3773248419cd6006ff82bcbc4db93b4cb1fc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Joins&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f3bfdcdccd1917cd4d4003cac5a6a7ce05399d8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Leaf&lt;/strong&gt; - The end of a branch and represents a unique timeseries. The leaf will contain a TSUID value that can be used to generate a TSD query. A branch can, and likely will, have multiple leaves</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e987d9de889f30dc52e88af8b6e235abc1bc5dcf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Leaves&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2e302fc0275d21ded3ff0a34411f268b75cee5d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Leaves&lt;/strong&gt; - Leaves that belong to this branch.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a41b5d89f98bbebbe7d3bf7f24d10c4dffe9400" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Limited Unique IDs (UIDs)&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e63ed37e56d3720ad1d9b7fd6c28829fd66da0de" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Log File&lt;/strong&gt; To enable the main log file, find the following section:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4eab30ebe5ab2676680bb63a87563ce432f4ab55" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Metric Query&lt;/strong&gt; - Similar to a regular metric query, you can send a metric name and optionally a set of tag pairs. If the real-time meta has been enabled, the TSD will scan the meta data table to see if any time series match the query. For each time series that matches, it will scan for the latest data point and return it. However if meta is disabled, then the TSD will attempt a lookup for the exact set of metric and tags provided as long as a backscan value is given (as of 2.1.1).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="801a990e4e8934349a3110558bf363592ac44779" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Metric Query&lt;/strong&gt; - The full name of a metric is supplied along with an optional list of tags. This is optimized for aggregating multiple time series into one result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3e403833b12d2ee93c60157201faf9a1f4907a5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Metrics&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="433f7475906c7e8584d4e3e90414ca311de8e142" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;More Examples:&lt;/strong&gt; For the graphically inclined we have the following examples. An imaginary metric named &lt;code&gt;m&lt;/code&gt; is recorded in OpenTSDB. The &quot;sum of m&quot; is the blue line at the top resulting from a query like &lt;code&gt;start=1h-ago&amp;amp;m=sum:m&lt;/code&gt;. It's made of the sum of the red line for &lt;code&gt;host=foo&lt;/code&gt; and the green line for &lt;code&gt;host=bar&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aeec6f3eaad65c143d27d9e12b03d828e7a8bbbe" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;OFF&lt;/strong&gt; - To drop any logging messages from a class, simply set the level to &lt;code&gt;OFF&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1884cdfa60ba48980b662b025f75e0ba67f99cbb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Options&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c98ea6ff5df1c5e83d16de93547e63bd95bc97e5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Path&lt;/strong&gt; - The depth and name of each parent branch (includes the local branch).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e195c93eeb54f06b771f3a41a0e1e7c0c61d7dc9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Path&lt;/strong&gt; - The name and level of each branch above the current branch in the hierarchy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18b129428486a721372f5cd8809ade58707f899d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Per-Scanner&lt;/strong&gt; - Metrics around each individual scanner (useful when salting is enabled)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee21ad74ed5247143db70f6c3d8b63d042b991ff" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Per-Sub Query&lt;/strong&gt; - Metrics pertaining to a single sub query (if multiple are present) including max and average timings of scanner.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="510260460b1f221176435aab4504ed847195f5fc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Pre-Aggregate&lt;/strong&gt; - In the example above with &lt;code&gt;sys.cpu.user&lt;/code&gt;, you generally care about the average usage on the host, not the usage per core. While the data collector may send a separate value per core with the tagging schema above, the collector could also send one extra data point such as &lt;code&gt;sys.cpu.user.avg host=webserver01&lt;/code&gt;. Now you have a completely separate timeseries that would only have 24 rows per day and with 20K hosts, only 480K rows to sift through. Queries will be much more responsive for the per-host average and you still have per-core data to drill down to separately.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9109f2f95c86be7d188e463efa3706640d5ddb8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Query Log&lt;/strong&gt; To enable the Query log, find the following section:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="731ecb747673261a39449ed6a0ec0f698e3052c1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Query Speed&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b090cd881eca967b06a5a9eb6a20f1444235c7a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Query String&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d56b6ce3167629c74f15166998fa829ad4e56220" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Query String&lt;/strong&gt; - Supply a parameter such as &lt;code&gt;serializer=&amp;lt;serializer_name&amp;gt;&lt;/code&gt; where &lt;code&gt;&amp;lt;serializer_name&amp;gt;&lt;/code&gt; is the hard-coded name of the serializer as shown in the &lt;code&gt;/api/serializers&lt;/code&gt;&lt;code&gt;serializer&lt;/code&gt; output field.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2fd4b08531178dfccd56dfbd827a6c253bee3aa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Query&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3133bfda946bd9ddc5c604820dc9b8f31ac184bb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Queueing on TSDs&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ac3d908db56cfbd75204db7e5d62fd1d12c92b5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;RO&lt;/strong&gt; - A field that appears in the response but is read only. The value passed along with a request will not alter the output field.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9ddfee6af97013d8b9d886bebca00d18d828b54" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;RW&lt;/strong&gt; or &lt;strong&gt;W&lt;/strong&gt; - A field that &lt;strong&gt;will&lt;/strong&gt; result in an update to the data stored in the system</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="784e9d9b28c0da52f1d2ec90bfd84a3b70a45b2e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Rate ctr&lt;/strong&gt; Enables the rate options boxes below and indicate that the metric graphed is a monotonically increasing counter. If so, you can choose to supply a maximum value (&lt;strong&gt;Rate Ctr Max&lt;/strong&gt;) for the counter so that when it rolls over, the graph will show the proper value instead of a negative number. Likewise you can choose to set a reset value (&lt;strong&gt;Rate Ctr Reset&lt;/strong&gt;) to replace values with a zero if the rate is greater than the value. To avoid negative spikes it's generally save to set the rate counter with a reset value of 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59a01cff435ef24f6470eaf8cb0ee93c079889b3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Root&lt;/strong&gt; - The root branch is the start of the tree and all branches reach out from this root. It has a depth of 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26cc477b940df1ae941b4ea20cc2be16631c14db" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Row Key&lt;/strong&gt; - Row keys are byte arrays comprised of an optional salt, the metric UID, a base timestamp and the UID for tagk/v pairs: &lt;code&gt;[salt]&amp;lt;metric_uid&amp;gt;&amp;lt;timestamp&amp;gt;&amp;lt;tagk1&amp;gt;&amp;lt;tagv1&amp;gt;[...&amp;lt;tagkN&amp;gt;&amp;lt;tagvN&amp;gt;]&lt;/code&gt;. By default, UIDs are encoded on 3 bytes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d244643f28e843da6e18e4ce999d1669358755f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Row Key&lt;/strong&gt; - Same as regular values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6aa66cc4c6a7a1ba70144d43b08dd0bf5a8fd16c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Row Key&lt;/strong&gt; - The row key for rollups is in the same format as the original data table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b90fdf5787fb3b6e4ad619faa17d204fb9ff0b9a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Row Key&lt;/strong&gt; - The unsigned integer UID encoded on 3 bytes by default. If the UID length has been changed in the source code, the width may be different.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20ff108bf797cb6c12b5a937b1c3e7ef0f2330bb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Row Key&lt;/strong&gt; - This will be the string assigned to the UID. E.g. for a metric we may have a value of &lt;code&gt;sys.cpu.user&lt;/code&gt; or for a tag value it may be &lt;code&gt;42&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3446870de1f957d700aabbf99364a969269ed379" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Share&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba04f5715f815b47d3a7c6fb3462306fb66b2f4b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Shift to Metric&lt;/strong&gt; - What if you really only care about the metrics for a particular host and don't need to aggregate across hosts? In that case you can shift the hostname to the metric. Our previous example becomes &lt;code&gt;sys.cpu.user.websvr01 cpu=0&lt;/code&gt;. Queries against this schema are very fast as there would only be 192 rows per day for the metric. However to aggregate across hosts you would have to execute multiple queries and aggregate outside of OpenTSDB. (Future work will include this capability).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c83a490b66f25a79f1023a92f227bd3a7afc369" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Stream Processing&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e486b34e208f8def9bdf40973b5e756b02bd0425" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Strict Matching&lt;/strong&gt; - When enabled, a timeseries must match a rule in every level of the rule set. If one or more levels fail to match, the timeseries will not be included in the tree.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da25e623148de6bc556a27a4e180a983802fcb5c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;TODO&lt;/strong&gt; - Settle on a config. Rollup configs consist of a table name, interval span and rollup interval. Raw pre-aggs can be stored in the data table or rollup tables as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dda04301fe1b801fd5ee4af1d8bd70abab4d035d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;TODOs&lt;/strong&gt; - Some further work that's needed:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df742b0a6bcce073569a3b556070cc3d35c41dca" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;TSUID Query&lt;/strong&gt; - A list of one or more TSUIDs that share a common metric. This is optimized for fetching individual time series where aggregation is not required.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7e4cdae1ab813ffbe4e3711ac8f1eca64245a1a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;TSUID Query&lt;/strong&gt; - If you know the TSUIDs for the time series that you want to access data for, simply provide a list of TSUIDs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="512832371c783b01884979e8385cc79052b23b71" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Tagks&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9b3cee068dcfcf58af2299f80c8d15530182906" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Tagvs&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c0ac20a6dd4b876ab7c40b3546f2075410bc9e9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Time Series&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="175ad498c3cdb2be38d46de1373f1691f4f6861d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;UIDs&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a1b3d92ad35a136f6ff30c318494c377e13fa0d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;WARN&lt;/strong&gt; - These are often caused by bad user data or something else that was wrong but not a critical error. Look for warnings if you are not receiving the results you expect when using OpenTSDB.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a2466e0a71ea329e189e688310d9ed75526f53b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;check&lt;/strong&gt; - Executes unit tests and reports on the results. You can specify executing the checks in a specific file via &lt;code&gt;test_SRC=&amp;lt;path&amp;gt;&lt;/code&gt;, e.g. &lt;code&gt;./build.sh check test_SRC=test/uid/TestNoSuchUniqueId.java&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b45e8acb2509eba3567591a95a946e8f9d85ea2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;create&lt;/strong&gt; - A flag with a value of &lt;code&gt;true&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e8d8fe9916447a08a1f1ee727b68af8fec1312d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;datetime&lt;/strong&gt; Is the system default formatted human readable timestamp</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="777fe5b0717befd87ce5fb7730b8fd49d741a142" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;debian&lt;/strong&gt; - Compiles OpenTSDB and generates a Debian package</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83c54d2f9fbd8ab65886ead5f5193bee94081ab1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;dist&lt;/strong&gt; - Downloads dependencies, compiles OpenTSDB and creates a tarball for distribution</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75f1e90a653bb658ecfe32d602d5516beb25e6ff" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;distcheck&lt;/strong&gt; - Same as dist but also runs unit tests. This should be run before issuing pull requests to verify that everything performs correctly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28977e83e9e2873b7b4ce8fb0b0a3f96cf43ca07" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;l|f&lt;/strong&gt; Is either &lt;code&gt;l&lt;/code&gt; to indicate the value is an Integer (Java Long) or &lt;code&gt;f&lt;/code&gt; for a floating point value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba77dc005881b46639b46432530d9f70c7e42fde" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;m&lt;/strong&gt; - A metric and tags similar to a GET request or data point query</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="771dacf87b637691daee57f97033555fe6af06c4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;metric name&lt;/strong&gt; Is the decoded name of the metric the row represents</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02282f58b700cbcf2bc0d7ea6b95c2a8cd8b784c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;metric&lt;/strong&gt; - &lt;em&gt;(Version 2.1)&lt;/em&gt; Similar to a data point query, you can supply a metric and one or more tag pairs. Any TS meta data matching the query will be returned. The results will be an array of one or more objects. Only one metric query may be supplied per call and wild cards or grouping operators are not supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f1425426f300951da73950a8ba6416c7f83ca65" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;metric&lt;/strong&gt; - A metric such as &lt;code&gt;sys.cpu.0&lt;/code&gt; or &lt;code&gt;trades.per.second&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd9a24d58964ac4369628358cd5a82f43d97308f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;metric&lt;/strong&gt; Is the name of the metric as a string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e9910a19bff8b14c803fd731f25864a43c01c2f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;metric&lt;/strong&gt; Is the name of the metric queried</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d71b4fad9e19ccc84d1824f8e49084d6f2a00427" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;metric&lt;/strong&gt; Is the name of the metric. Note that the metric name may not include spaces.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec2ef44370815ec155ad82e6947c36198275aaa1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;number of datapoints&lt;/strong&gt; Is the number of data points in the compacted column</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b7c9373739012c4161d4c738674b9680bd7495a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;offset&lt;/strong&gt; Is the number of seconds or milliseconds (based on timestamp) of offset from the row base timestamp</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5f5579680ffc507542b3de3bffa33bae2f82a54" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pom.xml&lt;/strong&gt; - Compile a POM file to compile with Maven.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c02d1ddc0107cb039cc7eff61ffb1a0d281ded7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;qualifier&lt;/strong&gt; Is the raw byte array of the column qualifier</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="736087c41ef5039f3ae5a6167407a09697e24a03" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;row key&lt;/strong&gt; Is the raw byte array of the row key</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ab183520c3e85287b7244a9e555d0240d4cd8f9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;row timestamp&lt;/strong&gt; Is the base timestamp of the row in seconds (on 1 hour boundaries)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="490b3a5e0abdfc0bd3743750843acddbf63fc3d9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;tag/value pairs&lt;/strong&gt; Are the tags associated with the time series</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d39e1b6347caa4659df536574eb30f06bde4e29a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;tagk&lt;/strong&gt; - A tag name such as &lt;code&gt;host&lt;/code&gt; or &lt;code&gt;symbol&lt;/code&gt;. This is always the &quot;key&quot; (the first value) in a tag key/value pair.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="030a890a1188e1ca34c26391e88d9ad3e70bd2bd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;tagk=tagv&lt;/strong&gt; Are tag name/value pairs separated by spaces</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="656ab72888c5253e11be9ef0c843f5a4e243c3e2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;tagk=tagv&lt;/strong&gt; Is a list of common tag name and value pairs for all timeseries represented in the query</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdde023ce61acbaf6316e997efb5976fd1a1a4db" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;tagk=tagv&lt;/strong&gt; Is a pair of one or more space sparate tag name and value pairs. Note that the tags may not have spaces in them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="639c3b624654a8b99d89f1105f475a32a595c6ab" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;tagv&lt;/strong&gt; - A tag value such as &lt;code&gt;web01&lt;/code&gt; or &lt;code&gt;goog&lt;/code&gt;. This is always the &quot;value&quot; (the second value) in a tag key/value pair.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aadada5944e8e3b13d50c2630124360a54c6d8b7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;timestamp&lt;/strong&gt; Is the absolute timestamp of the data point in seconds or milliseconds</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d30e38b6dc01b29d9007b178cd292a9c9cd6986e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;tsd.http.cachedir&lt;/strong&gt; - Path to write temporary files to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e1d03d5909041d5ee5670abd114a6d901cdea7b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;tsd.http.staticroot&lt;/strong&gt; - Path to the static GUI files found in &lt;code&gt;./build/staticroot&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2ebf9a26f9134bef601aa6bdadf2bd3d7d13f82" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;tsd.storage.hbase.zk_quorum&lt;/strong&gt; - If HBase and Zookeeper are not running on the same machine, specify the host and port here.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="817d8b598d33653428394b20060e5947f4ecfc2c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;tsuid&lt;/strong&gt; - A single hexadecimal TSUID may be supplied and a meta data object will be returned if located. The results will include a single object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dda1f1d2c35d245ceb06cb30e0dd3b90cebcf405" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;tsuid&lt;/strong&gt; Is the hex encoded UID of the time series</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ac2412ccfe1e553c75117c2cd6403c01c66f0ae" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;value&lt;/strong&gt; Is the data point value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98665360172986af3af4f998deaf49ab64f6301a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;value&lt;/strong&gt; Is the raw byte array of the column value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1139bc80211f8f0b758803dcef2510d837cc197d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;value&lt;/strong&gt; Is the value of the data point</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebf259970cb3fa6beac54345addf8cf6ee782e1e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;value&lt;/strong&gt; Is the value to store</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91d057e4504c7b759b438d9892d994ea5743d02c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;|&lt;/strong&gt; - The pipe will return a separate result &lt;em&gt;only&lt;/em&gt; for the exact tag values specified</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dcd4ce23d88e2ee9568ba546c007c63d9131c1b" translate="yes" xml:space="preserve">
          <source>A</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a92e9e691fddf99e99df6522b66d91ee741b55d" translate="yes" xml:space="preserve">
          <source>A &quot;rollup&quot; is defined, in OpenTSDB, as a &lt;strong&gt;single&lt;/strong&gt; time series aggregated over time. It may also be called a &quot;time-based aggregation&quot;. Rollups help to solve the problem of looking at wide time spans. For example, if you write a data point every 60 seconds and query for one year of data, a time series would return more than 525k individual data points. Graphing that many points could be pretty messy. Instead you may want to look at lower resolution data, say 1 hour data where you only have around 8k values to plot. Then you can identify anomalies and drill down for finer resolution data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85357acb3eaa31a84b75a1c39f448e07e96405c8" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;GET&lt;/code&gt; request requires a specific tree ID, rule level and order. Otherwise a &lt;code&gt;400&lt;/code&gt; will be returned. To fetch all of the rules for a tree, use the &lt;code&gt;/api/tree&lt;/code&gt; endpoint with a &lt;a href=&quot;#id3&quot;&gt;&lt;span id=&quot;id4&quot;&gt;``&lt;/span&gt;&lt;/a&gt;treeId' value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9300d1edc47231c630c8e98c19889cce7ec6062" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;GET&lt;/code&gt; request to &lt;code&gt;/api/tree&lt;/code&gt; without a tree ID will return a list of all of the trees configured in the system. The results will include configured rules for each tree. If no trees have been configured yet, the list will be empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e70d43186daa813ff80495390c00430a8e0eedc" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;metric&lt;/code&gt; should be descriptive of what is being measured, but with OpenTSDB, it should not be too specific. Instead, it is better to use &lt;code&gt;tags&lt;/code&gt; to differentiate and organize different items that may share a common metric. Tags are pairs of words that provide a means of associating a metric with a specific item. Each pair consists of a &lt;code&gt;tagk&lt;/code&gt; that represents the group or category of the following &lt;code&gt;tagv&lt;/code&gt; that represents a specific item, object, location or other noun.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77988804778c5e059b0e49fb65b8908ed276f04c" translate="yes" xml:space="preserve">
          <source>A Downsampled</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f333c927c82f87f23f3692790bb58c951d42570" translate="yes" xml:space="preserve">
          <source>A GET request can lookup the TS meta objects for one or more time series if they exist in the storage system. Two types of queries are supported:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a24b9852e1be7d4234dc0e54d5426438a18a49b9" translate="yes" xml:space="preserve">
          <source>A JAVA stack trace describing the location where the error was generated. This can be disabled via the &lt;code&gt;tsd.http.show_stack_trace&lt;/code&gt; configuration option. The default for TSD is to show the stack trace.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dccf7add6d584ea652afdbceda8171e46c74882" translate="yes" xml:space="preserve">
          <source>A Linux system</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91b81d31dad86db7acdb8aaec89fd52a169b914a" translate="yes" xml:space="preserve">
          <source>A Linux system (or Windows with manual building)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0539658e1bef2942976ed41acc0aca3f8c5c3b0b" translate="yes" xml:space="preserve">
          <source>A TSUID if the annotation is associated with a timeseries. This may be null or empty if the note was for a global event</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="687d4263f861441a626d1ef5a279f8f6aa634abf" translate="yes" xml:space="preserve">
          <source>A Tree is defined as a UTF-8 encoded JSON object in the &lt;code&gt;tree&lt;/code&gt; column of a tree row (identified by the tree's ID). The object contains descriptions and configuration settings for processing time series through the tree. Do not modify this object outside of OpenTSDB as it may break CAS calls.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1265aaa10822455bc4b25da68b81822da3e6942a" translate="yes" xml:space="preserve">
          <source>A UID meta data object representing information about the UID</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f9aedd6943ec6682a6adddc5b968e8d475c1530" translate="yes" xml:space="preserve">
          <source>A Unix Epoch timestamp in seconds when the tree was originally created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ff6840466a10269e84269db865bd20fed7e0690" translate="yes" xml:space="preserve">
          <source>A Unix epoch style timestamp in seconds or milliseconds. The timestamp must not contain non-numeric characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="837418b3d2b07e436bced145313f30a465acc6d9" translate="yes" xml:space="preserve">
          <source>A Unix epoch timestamp in seconds when the UID was first created. If the meta data was not stored when the UID was assigned, this value may be 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc8859bf70373593419b73325efeea0466e6d181" translate="yes" xml:space="preserve">
          <source>A Unix epoch timestamp, in milliseconds, when the data point was written</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="537ef03bf58fc445a4e4c5d80553d008077d0557" translate="yes" xml:space="preserve">
          <source>A Unix epoch timestamp, in seconds, marking the time when the annotation event should be recorded</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b1a28d97cbddbb2d4eeaef18c9d71264b4ecc25" translate="yes" xml:space="preserve">
          <source>A Unix epoch timestamp, in seconds, when a data point was last recieved. This is only updated on TSDs where meta data is enabled and it is not updated for every data point so there may be some lag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f257a3abe3fc2bd3278415368138788b4b5c5155" translate="yes" xml:space="preserve">
          <source>A Unix epoch timestamp, in seconds, when the timeseries was first recorded in the system. Note that if the TSD was upgraded or meta data recently enabled, this value may not be accurate. Run the &lt;a href=&quot;../../user_guide/cli/uid&quot;&gt;&lt;em&gt;uid&lt;/em&gt;&lt;/a&gt; utility to synchronize meta data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b26c65efcfe2573deb596281280ff5fa5a88bdfc" translate="yes" xml:space="preserve">
          <source>A better way of dealing with rollups and pre-aggregates is to route the data into a stream processing system where it can be processed in near-real-time and written to the TSDs. It's similar to the &lt;em&gt;Queuing on TSDs&lt;/em&gt; option but using one of the myriad stream processing frameworks (Storm, Flink, Spark, etc.) to handle message routing and in-memory storage. Then you simply write some code to compute the aggregates and spit the data out after a window has passed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a60c3ac84795cdab608052be85197583de4be726" translate="yes" xml:space="preserve">
          <source>A branch ID is composed of the tree ID concatenated with the ID of each parent above the current branch, concatenated with the ID of the current branch. Thus, if our child branch &lt;code&gt;sys&lt;/code&gt; is a child of the root, we would have a branch ID of &lt;code&gt;00010001BECD&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c10cbec45d2e2521ffcb29eeb269bc814f141997" translate="yes" xml:space="preserve">
          <source>A branch is identified by a &lt;code&gt;branchId&lt;/code&gt;, a hexadecimal encoded string that represents the ID of the tree it belongs to as well as the IDs of each parent the branch stems from. All branches stem from the &lt;strong&gt;ROOT&lt;/strong&gt; branch of a tree and this is usually the starting place when browsing. To fetch the &lt;strong&gt;ROOT&lt;/strong&gt; just call this endpoingt with a valid &lt;code&gt;treeId&lt;/code&gt;. The root branch ID is also a 4 character encoding of the tree ID.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="daab7d8f0df33e7e8d02e641b2297a61871824c1" translate="yes" xml:space="preserve">
          <source>A branch represents a level in the tree heirarchy and contains information about child branches and/or leaves. Branches are immutable from an API perspective and can only be created or modified by processing a TSMeta through tree rules via a CLI command or when a new timeseries is encountered or a TSMeta object modified. Therefore the &lt;code&gt;branch&lt;/code&gt; endpoint only supports the &lt;code&gt;GET&lt;/code&gt; verb.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30d531749c0705d1a1fb9f58718c6ce43c7bb583" translate="yes" xml:space="preserve">
          <source>A brief description of the event. As this may appear on GnuPlot graphs, the description should be very short, ideally less than 25 characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fa1cdfbfb4ad500cf9ee6a3ba45c9b18efd7c93" translate="yes" xml:space="preserve">
          <source>A brief description of the rule's purpose</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cefa2531fa97148d326e3e0c486be755761e9f10" translate="yes" xml:space="preserve">
          <source>A brief description of what the UID represents</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0faf4aaf611fa88f0fc4e3cf5b409348a04ed7ce" translate="yes" xml:space="preserve">
          <source>A brief, descriptive name for the tree. &lt;a href=&quot;#id3&quot;&gt;&lt;span id=&quot;id4&quot;&gt;*&lt;/span&gt;&lt;/a&gt;Required only when creating a tree.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef31a626365e93a296f2f4b6d06bf1a1161c8d65" translate="yes" xml:space="preserve">
          <source>A business may have four employees, Sue, John, Kelly and Paul. Therefore we may configure a &lt;code&gt;tagk&lt;/code&gt; of &lt;code&gt;employee&lt;/code&gt; with their names as the &lt;code&gt;tagv&lt;/code&gt;. These would be recorded as &lt;code&gt;employee=sue&lt;/code&gt;, &lt;code&gt;employee=john&lt;/code&gt; etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa175da7e61530218f8fca287043730601265afd" translate="yes" xml:space="preserve">
          <source>A collection of two or more data points for a single metric and group of tag name/value pairs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3179ae554d78dd31ec8270a26bde639129bb460f" translate="yes" xml:space="preserve">
          <source>A comma delimited list of RPC plugins to load when starting a TSD. Must contain the entire class name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e764084f7ae284687b3eadace15e04f87b222b95" translate="yes" xml:space="preserve">
          <source>A comma separated list of domain names to allow access to OpenTSDB when the &lt;code&gt;Origin&lt;/code&gt; header is specified by the client. If empty, CORS requests are passed through without validation. The list may not contain the public wildcard &lt;code&gt;*&lt;/code&gt; and specific domains at the same time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d957486035a6242db521f4fd1eaaed3505008cf8" translate="yes" xml:space="preserve">
          <source>A comma separated list of headers sent to clients when executing a CORs request. The literal value of this option will be passed to clients.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="723f087d1f78cdc46c8bc9c756e0848481fc12ff" translate="yes" xml:space="preserve">
          <source>A comma-separated list of ZooKeeper hosts to connect to, with or without port specifiers. E.g. &lt;code&gt;192.168.1.1:2181,192.168.1.2:2181&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6d05a4b0dfb6a7e16a995ba03e5b8f87f4c0bf2" translate="yes" xml:space="preserve">
          <source>A critical aspect of any naming schema is to consider the cardinality of your time series. Cardinality is defined as the number of unique items in a set. In OpenTSDB's case, this means the number of items associated with a metric, i.e. all of the possible tag name and value combinations, as well as the number of unique metric names, tag names and tag values. Cardinality is important for two reasons outlined below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5414219664e145d912b84cfd0f6df959e50d8c7d" translate="yes" xml:space="preserve">
          <source>A dead stream worker requires bootstrapping from storage.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="518bb44dd774911a1db4745895c4391f978c37c5" translate="yes" xml:space="preserve">
          <source>A descriptive error message about what went wrong</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d03cbb11c8fdc3dad72f5bada0b67940d97df92" translate="yes" xml:space="preserve">
          <source>A display format string to alter the &lt;code&gt;display_name&lt;/code&gt; value of the resulting branch or leaf. See &lt;a href=&quot;../../user_guide/trees&quot;&gt;&lt;em&gt;Trees&lt;/em&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4cfd3a2e28c87063898607578135a2769a19e30" translate="yes" xml:space="preserve">
          <source>A downsampling interval, i.e. what time span to rollup raw values into. The format is &lt;code&gt;&amp;lt;#&amp;gt;&amp;lt;unit&amp;gt;&lt;/code&gt;, e.g. &lt;code&gt;15m&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b11891e55294edcc00619c984f74d089dfadf00" translate="yes" xml:space="preserve">
          <source>A file called &lt;code&gt;logback.xml&lt;/code&gt; is included in the &lt;code&gt;/src&lt;/code&gt; directory and copied for distributions. On startup, OpenTSDB will search the class path for this file and if found, load the configuration. The default config from GIT will log INFO level events to console and store the 1,024 latest messages in a round-robin buffer to be accessed from the GUI. However by default, it won't log to disk. Packages built from GIT have file logging enabled by default. As of 2.2, all queries can be logged to a separate file for parsing and automating. This log is disabled by default but can be enabled by setting the proper log level.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97f3ccab61caaaa21bf4419373e4c185ef7426b2" translate="yes" xml:space="preserve">
          <source>A function to use when multiple timeseries are included in the results</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fac4280dc90449cc77056988704374a4b33f6eeb" translate="yes" xml:space="preserve">
          <source>A group index for extracting a portion of a pattern from the given regular expression pattern. Must be 0 or greater.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8475d2ee290dcdd6828005ec5f24dedc7e2048d5" translate="yes" xml:space="preserve">
          <source>A hexadecimal representation of the UID</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ace36777b1107183adc61bc378bec5b03f3f1567" translate="yes" xml:space="preserve">
          <source>A hexadecimal representation of the branch ID, required for all but the root branch request</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d03bea5580e9fc81dc59298255f822520366ca9" translate="yes" xml:space="preserve">
          <source>A hexadecimal representation of the timeseries UID</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="224f44fb154156fd844c23ad54e15ab81fa18afd" translate="yes" xml:space="preserve">
          <source>A key/value map to store custom fields and values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80e939dc0d4c4a05b3b57ca10630a2605cf322e0" translate="yes" xml:space="preserve">
          <source>A list of TSUIDs with annotations that should be deleted. This may be empty or null (for JSON) in which case the &lt;code&gt;global&lt;/code&gt; flag should be set. When using the query string, separate TSUIDs with commas.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2600955e3b088106936df933c107ba3e9c9bb7de" translate="yes" xml:space="preserve">
          <source>A list of data points that failed be queued and why. Present in the &lt;code&gt;details&lt;/code&gt; response only.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c16c2057d4b1d5e44157e94e62ae8e976d19c661" translate="yes" xml:space="preserve">
          <source>A list of filters on tag values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b2b4d6f536866a0cd17464644a6bb68b13a7f13" translate="yes" xml:space="preserve">
          <source>A list of key/value tag name/tag value pairs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7924e8c8182dc95951b6c324fbc2c8f5ba00e5c3" translate="yes" xml:space="preserve">
          <source>A list of messages for each level and rule of the rule set</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a732c218c2d10170c344931a3741607312673253" translate="yes" xml:space="preserve">
          <source>A list of metric names for assignment</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14c8d2b2abae0f8e59685667a22a809e8a843411" translate="yes" xml:space="preserve">
          <source>A list of one or more TSUIDs to fetch TSMeta for. If requesting testing of more than one TSUID, they should be separted by a comma.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36062ffaa615e89ddd5abad501ca552d893daead" translate="yes" xml:space="preserve">
          <source>A list of one or more TSUIDs to search for collision entries. If requesting testing of more than one TSUID, they should be separted by a comma.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b21ecae29eb818a4ae1b936aa9d4c4c835b9950d" translate="yes" xml:space="preserve">
          <source>A list of one or more TSUIDs to search for not-matched entries. If requesting testing of more than one TSUID, they should be separted by a comma.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7036ccaae485fc1ad8d311b5f8018f91ecd18d5" translate="yes" xml:space="preserve">
          <source>A list of one or more expressions over the metrics. The variables in an expression &lt;strong&gt;MUST&lt;/strong&gt; refer to either a metric ID field or an expression ID field. Nested expressions are supported but exceptions will be thrown if a self reference or circular dependency is detected. So far only basic operations are supported such as addition, subtraction, multiplication, division, modulo</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d8c3e42ffc13a591ad3a8d83b4b9be8b78546d4" translate="yes" xml:space="preserve">
          <source>A list of one or more queries used to determine which time series to fetch the last data point for.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9272d618ba07ec8640494c2d45f0928f97416421" translate="yes" xml:space="preserve">
          <source>A list of tag name / tag value UID meta data objects associated with the timeseries. The &lt;code&gt;tagk&lt;/code&gt; UID will be first followed by it's corresponding &lt;code&gt;tagv&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="733179ecd4dd3807b795a7e8fab7d992422f4ed5" translate="yes" xml:space="preserve">
          <source>A list of tag names and values representing the timeseries</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fc9baf0f37b1c3c4478121787003d6b173df762" translate="yes" xml:space="preserve">
          <source>A list of tag names for assignment</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b65dab63e36a911843a31c272fa8c5d92b2bfa2" translate="yes" xml:space="preserve">
          <source>A list of tag values for assignment</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ed457969046a48fb3749a752f50b0c5aa57b5a6" translate="yes" xml:space="preserve">
          <source>A list of tags for the time series. Only returned if &lt;code&gt;resolve&lt;/code&gt; was set to true.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dceaa71ca83b30c7245e27bad137950b75e51b6" translate="yes" xml:space="preserve">
          <source>A list of tags only returned when the results are for a single time series. If results are aggregated, this value may be null or an empty map</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1063722a580bda2a1693175677008c7e27c5beb9" translate="yes" xml:space="preserve">
          <source>A localized timezone identification string used to override the local system timezone used when converting absolute times to UTC when executing a query. This does not affect incoming data timestamps. E.g. America/Los_Angeles</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5d68752077489837c5dade731194c35308c1d8e" translate="yes" xml:space="preserve">
          <source>A longer description of what the tree contains</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="911b2fc02bb6e56e2f72fd259697db23e48de7c4" translate="yes" xml:space="preserve">
          <source>A lookup query as defined below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9eb1c9b7eb5a3cd658ea55988f7ce57d8db65f4" translate="yes" xml:space="preserve">
          <source>A lookup query consists of at least one metric, tag name (tagk) or tag value (tagv). Each value must be a literal name in the UID table. If a given name cannot be resolved to a UID, an exception will be returned. Only one metric can be supplied per query but multiple tagk, tagv or tag pairs may be provided.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed5acf27c3252ab356eeed0448001ea328cfca41" translate="yes" xml:space="preserve">
          <source>A map of tag name/tag value pairs. At least one pair must be supplied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ef364156182f44a714ae6b80511ee41d43e2fcf" translate="yes" xml:space="preserve">
          <source>A map or dictionary with rules defined for the tree organized by &lt;code&gt;level&lt;/code&gt; and &lt;code&gt;order&lt;/code&gt;. If no rules have been defined yet, the value will be &lt;code&gt;null&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5fbd388bee4cd5433b6363cd42a2900563f8b62" translate="yes" xml:space="preserve">
          <source>A mathematical function to use in combining multiple time series</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7841b8c86f7f9fd3872660074dc141c1b52b8aab" translate="yes" xml:space="preserve">
          <source>A metric</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="426ffb38b1f0d158ea635360ba9f987083f1bca1" translate="yes" xml:space="preserve">
          <source>A metric is simply the name of a quantitative measurement. Metrics include things like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c705334e3a0a842e4a9393055299248e01d74c0" translate="yes" xml:space="preserve">
          <source>A multiplier used to determine how quickly to attempt flushing the compaction queue. E.g. a value of 2 means it will try to flush the entire queue within 30 minutes. A value of 1 would take an hour.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52076141866fe8e38b7839922f0436f5e9d5f063" translate="yes" xml:space="preserve">
          <source>A name as parsed by the rule set</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6752673375abf0f08d0275e1411c8af02dabcb4" translate="yes" xml:space="preserve">
          <source>A new tree will not have any rules. Your next call should probably be to &lt;code&gt;/tree/rule&lt;/code&gt; or &lt;code&gt;/tree/rules&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62a2046d9bb7503f5a5b9ab92ae4719ee4d6bf6e" translate="yes" xml:space="preserve">
          <source>A number of data sources return values as constantly incrementing counters. One example is a web site hit counter. When you start a web server, it may have a hit counter of 0. After five minutes the value may be 1,024. After another five minutes it may be 2,048. The graph for a counter will be a somewhat straight line angling up to the right and isn't always very useful. OpenTSDB provides the &lt;strong&gt;rate&lt;/strong&gt; key word that calculates the rate of change in values over time. This will transform counters into lines with spikes to show you when activity occurred and can be much more useful.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4df2fef7420fc34d287afef02f739da4e18b227" translate="yes" xml:space="preserve">
          <source>A number of extra fields may be shown here with their default values such as &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acb4df1002e4bbaf1c7ac1145bcfe31a08ae6c5a" translate="yes" xml:space="preserve">
          <source>A number of hours to search in the past for data. If set to 0 then the timestamp of the meta data counter for the time series is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00899e1c13219d83167ca6b8edaf27a467a61646" translate="yes" xml:space="preserve">
          <source>A number of statistics are available around each query and more will be added over time. Various levels of detail are measured including:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31b2beca31010294d03365af0a5177acf6d9c2a4" translate="yes" xml:space="preserve">
          <source>A numeric value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1da08f08ab194c758ddf4c1f4b47f16db19886a9" translate="yes" xml:space="preserve">
          <source>A path to search for plugins when the TSD starts. If the path is invalid, the TSD will fail to start. Plugins can still be enabled if they are in the class path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cdb3e6a407295aaa55c3e4845d8d948aec53ac5" translate="yes" xml:space="preserve">
          <source>A plugin JAR requires a manifest with a special &lt;em&gt;services&lt;/em&gt; folder and file to enable the &lt;a href=&quot;http://docs.oracle.com/javase/6/docs/api/java/util/ServiceLoader.html&quot;&gt;ServiceLoader&lt;/a&gt; to load it properly. Here are the steps for creating the proper files:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06e21c47695c5da1cbd9cf590d610597872b19b3" translate="yes" xml:space="preserve">
          <source>A policy to use for filling buckets that are missing data points</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1690d802d3a877dc41f1b0457b8b136a9027687" translate="yes" xml:space="preserve">
          <source>A positive integer representing the maximum value for the counter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74e3f6167c1dffac9c15d3acb7622ea90af7ce13" translate="yes" xml:space="preserve">
          <source>A positive integer representing the maximum value for the counter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dda1d2a76f42e8f449d56efc823818043a3757b7" translate="yes" xml:space="preserve">
          <source>A powerful feature of OpenTSDB is the ability to perform on-the-fly aggregations of multiple time series into a single set of data points. The original data is always available in storage but we can quickly extract the data in meaningful ways. Aggregation functions are means of merging two or more data points for a single time stamp into a single value. See &lt;a href=&quot;aggregators&quot;&gt;&lt;em&gt;Aggregators&lt;/em&gt;&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="346767a46f9a4b86c3487e0ed0ecea9404261f1e" translate="yes" xml:space="preserve">
          <source>A query can also aggregate time series with multiple tags into groups based on a tag value. Two special characters can be passed to the right of the equals symbol in a query:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e098c40a0f46beb930c794e812fe8017b767a1d" translate="yes" xml:space="preserve">
          <source>A query can include more than one sub query and any mixture of the two types. When submitting a query via content body, if a list of TSUIDs is supplied, the metric and tags for that particular sub query will be ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e7ec8f8646268f22e2f23e3b4fa438cbfc1eb69" translate="yes" xml:space="preserve">
          <source>A regular expression pattern to process the associated field or custom field value through.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2da5e3a5f26bd87fc240bc58f8bb827095a9bd2" translate="yes" xml:space="preserve">
          <source>A request to store data must be an array of objects in the content of the request. The same fields as required for the &lt;a href=&quot;rule&quot;&gt;&lt;em&gt;/api/tree/rule&lt;/em&gt;&lt;/a&gt; endpoint are supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf84fba9c915ef79fdabc9fd4f5e52a0ef87540c" translate="yes" xml:space="preserve">
          <source>A response that it's cleaning up and exiting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7eceec19be5a0f0bbd96db7f5a1bb9b16696a473" translate="yes" xml:space="preserve">
          <source>A reverse map was found without a forward map. The UID may have been deleted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3190d192d90f21272d58609cbf953e79136de57f" translate="yes" xml:space="preserve">
          <source>A row may store notes about the timeseries inline with the datapoints. Objects differ from data points by having an odd number of bytes in the qualifier.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b21de9e443197218d95aa24074da9a698b73d6d" translate="yes" xml:space="preserve">
          <source>A separate, smaller table called &lt;code&gt;tsdb-uid&lt;/code&gt; stores UID mappings, both forward and reverse. Two columns exist, one named &lt;code&gt;name&lt;/code&gt; that maps a UID to a string and another &lt;code&gt;id&lt;/code&gt; mapping strings to UIDs. Each row in the column family will have at least one of three columns with mapping values. The standard column qualifiers are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d792166b1b8d16f334444422fbe21747519996b9" translate="yes" xml:space="preserve">
          <source>A set of lines with version information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52624ac53c3b99455bc965f5a52b28bc7369ee33" translate="yes" xml:space="preserve">
          <source>A set of time series with data about the running TSD.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7f29b525d8fb1e58b0193af190600b170870997" translate="yes" xml:space="preserve">
          <source>A short name that can be displayed in GUIs instead of the default name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47396ce4a6c2f3cf8d665d797c04dc9377764e98" translate="yes" xml:space="preserve">
          <source>A single TSD can handle thousands of writes per second. But if you have many sources it's best to scale by running multiple TSDs and using a load balancer (such as Varnish or DNS round robin) to distribute the writes. Many users colocate TSDs on their HBase region servers when the cluster is dedicated to OpenTSDB.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5d5efdb85110031c3c756e354e27206f3029416" translate="yes" xml:space="preserve">
          <source>A single rule can either process a regex, a separator, or none. If a regex and a separator are defined for a rule, only the regex will be processed and the separator ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="605b773a0118bd23f0fbfc616e58fd34f99a1246" translate="yes" xml:space="preserve">
          <source>A space separated list of commands supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c6b584515df19299977e1fbc0e010f7e13d73e6" translate="yes" xml:space="preserve">
          <source>A special key to tag pre-aggregated data with when writing to storage</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8bdaa25059e54e7c32514797248eeea2f0d6d06" translate="yes" xml:space="preserve">
          <source>A special tag value to non-rolled-up and non-pre-aggregated data with when writing to storage. &lt;code&gt;tsd.rollups.tag_raw&lt;/code&gt; must be set to true.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f798497a7dea6689014a30358f2be1ca45fd60b" translate="yes" xml:space="preserve">
          <source>A stack trace showing where execution is currently located</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f3b1e950c6c3583222fa6886e0f315c65a38a0b" translate="yes" xml:space="preserve">
          <source>A status line prints information about the results of a query including whether or not the results were cached in the TSD, how many raw data points were analyzed, how many data points were actually plotted (as per the results of aggregations and down sampling) and how long the query took to execute. When the browser is waiting for the results of a query, this message will show &lt;code&gt;Loading Graph...&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34f5dcb83e31ee4c5269b81dccf09df0c6de972a" translate="yes" xml:space="preserve">
          <source>A string to match on for the given type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f4a3da2624007cf01e6534750cddabcc8012a8b" translate="yes" xml:space="preserve">
          <source>A successful request will not return a response. Only on error will the socket return a line of data. Some examples appear below:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95fdc29fdd59a10443e806c3dcf3553c6e38af05" translate="yes" xml:space="preserve">
          <source>A successful response to a &lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;POST&lt;/code&gt; or &lt;code&gt;PUT&lt;/code&gt; request will return the full TS meta data object with any given changes. Successful &lt;code&gt;DELETE&lt;/code&gt; calls will return with a &lt;code&gt;204&lt;/code&gt; status code and no body content. When modifying data, if no changes were present, i.e. the call did not provide any data to store, the resposne will be a &lt;code&gt;304&lt;/code&gt; without any body content. If the requested TSUID did not exist in the system, a &lt;code&gt;404&lt;/code&gt; will be returned with an error message. If invalid data was supplied an error will be returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="870e24f6e1bbf14d232d54c80504607b6b4511b6" translate="yes" xml:space="preserve">
          <source>A successful response to a &lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;POST&lt;/code&gt; or &lt;code&gt;PUT&lt;/code&gt; request will return the full UID meta data object with any given changes. Successful &lt;code&gt;DELETE&lt;/code&gt; calls will return with a &lt;code&gt;204&lt;/code&gt; status code and no body content. When modifying data, if no changes were present, i.e. the call did not provide any data to store, the response will be a &lt;code&gt;304&lt;/code&gt; without any body content. If the requested UID did not exist in the system, a &lt;code&gt;404&lt;/code&gt; will be returned with an error message. If invalid data was supplied an error will be returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d06f953067ce83deb660ef5d772beaad4ca548c4" translate="yes" xml:space="preserve">
          <source>A successful response to a &lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;POST&lt;/code&gt; or &lt;code&gt;PUT&lt;/code&gt; request will return the full object with the requested changes. Successful &lt;code&gt;DELETE&lt;/code&gt; calls will return with a &lt;code&gt;204&lt;/code&gt; status code and no body content. When modifying data, if no changes were present, i.e. the call did not provide any data to store, the response will be a &lt;code&gt;304&lt;/code&gt; without any body content. If the requested annotation did not exist in the system, a &lt;code&gt;404&lt;/code&gt; will be returned with an error message. If invalid data was supplied a &lt;code&gt;400&lt;/code&gt; error will be returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cab8d3101f36adaa4696357deb1f909a5e5a5bec" translate="yes" xml:space="preserve">
          <source>A successful response to a &lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;POST&lt;/code&gt; or &lt;code&gt;PUT&lt;/code&gt; request will return the full rule object with optional requested changes. Successful &lt;code&gt;DELETE&lt;/code&gt; calls will return with a &lt;code&gt;204&lt;/code&gt; status code and no body content. When modifying data, if no changes were present, i.e. the call did not provide any data to store, the resposne will be a &lt;code&gt;304&lt;/code&gt; without any body content. If the requested tree or rule did not exist in the system, a &lt;code&gt;404&lt;/code&gt; will be returned with an error message. If invalid data was supplied a &lt;code&gt;400&lt;/code&gt; error will be returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="228bd8e32f94d50e65164468f8b9bd111735fa30" translate="yes" xml:space="preserve">
          <source>A successful response to a &lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;POST&lt;/code&gt; or &lt;code&gt;PUT&lt;/code&gt; request will return tree objects with optinally requested changes. Successful &lt;code&gt;DELETE&lt;/code&gt; calls will return with a &lt;code&gt;204&lt;/code&gt; status code and no body content. When modifying data, if no changes were present, i.e. the call did not provide any data to store, the resposne will be a &lt;code&gt;304&lt;/code&gt; without any body content. If the requested tree did not exist in the system, a &lt;code&gt;404&lt;/code&gt; will be returned with an error message. If invalid data was supplied an &lt;code&gt;400&lt;/code&gt; error will be returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac6b10e121acb6191736a26dc11b569df713ed29" translate="yes" xml:space="preserve">
          <source>A successful response to a &lt;code&gt;POST&lt;/code&gt; or &lt;code&gt;PUT&lt;/code&gt; request will return a &lt;code&gt;204&lt;/code&gt; response code without body content. Successful &lt;code&gt;DELETE&lt;/code&gt; calls will return with a &lt;code&gt;204&lt;/code&gt; status code and no body content. If a tree does not have any rules, the &lt;code&gt;DELETE&lt;/code&gt; request will still return a &lt;code&gt;204&lt;/code&gt;. When modifying data, if no changes were present, i.e. the call did not provide any data to store, the response will be a &lt;code&gt;304&lt;/code&gt; without any body content. If the requested tree did not exist in the system, a &lt;code&gt;404&lt;/code&gt; will be returned with an error message. If invalid data was supplied a &lt;code&gt;400&lt;/code&gt; error will be returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a08a5423dd48ad66ecba1dc889821e91207a022" translate="yes" xml:space="preserve">
          <source>A successful response to a &lt;code&gt;POST&lt;/code&gt; or &lt;code&gt;PUT&lt;/code&gt; request will return the list of annotations after synchronization (i.e. if issuing a &lt;code&gt;POST&lt;/code&gt; call, existing objects will be merged with the new objects). Delete requests will return an object with the delete query and a &lt;code&gt;totalDeleted&lt;/code&gt; field with an integer number reflecting the total number of annotations deleted. If invalid data was supplied a &lt;code&gt;400&lt;/code&gt; error will be returned along with the specific annotation that caused the error in the &lt;code&gt;details&lt;/code&gt; field of the error object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d905b769be890a71a95d42a91013f24d2730cd56" translate="yes" xml:space="preserve">
          <source>A successful response to a request will return the branch object using the requested serializer. If the requested tree or branch did not exist in the system, a &lt;code&gt;404&lt;/code&gt; will be returned with an error message.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c41b300b92c3e00f46d80ff2fe2e982dba73423b" translate="yes" xml:space="preserve">
          <source>A successful response will return a list of JSON objects with a number of items including the TSMeta object, messages about the processing steps taken and a resulting branch. There will be one object for each TSUID requested with the TSUID as the object name. If the requested tree did not exist in the system, a &lt;code&gt;404&lt;/code&gt; will be returned with an error message. If invalid data was supplied a &lt;code&gt;400&lt;/code&gt; error will be returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7267d88d29634ca639bb53b9751848e2b45250cf" translate="yes" xml:space="preserve">
          <source>A successful response will return a map of key/value pairs where the unrecorded TSUID as the key and a message about which rule failed to match as the value. The response will only return not matched entries that were found. If one or more of the TSUIDs requested did not result in a not matched entry, it will not be returned with the result. This may mean that the TSMeta has not been processed yet. Note that if no failed matches have occurred or the tree hasn't processed any data yet, the result set will be empty. If the requested tree did not exist in the system, a &lt;code&gt;404&lt;/code&gt; will be returned with an error message. If invalid data was supplied a &lt;code&gt;400&lt;/code&gt; error will be returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="914c88edbc297860a107ea31d485cb6d10ed0b7d" translate="yes" xml:space="preserve">
          <source>A successful response will return a map of key/value pairs where the unrecorded TSUID as the key and the existing leave's TSUID as the value. The response will only return collisions that were found. If one or more of the TSUIDs requested did not result in a collision, it will not be returned with the result. This may mean that the TSMeta has not been processed yet. Note that if no collisions have occurred or the tree hasn't processed any data yet, the result set will be empty. If the requested tree did not exist in the system, a &lt;code&gt;404&lt;/code&gt; will be returned with an error message. If invalid data was supplied a &lt;code&gt;400&lt;/code&gt; error will be returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41e3a13a03f3a3b3674fbc125235a220576953e5" translate="yes" xml:space="preserve">
          <source>A temporary overload has occurred. Check with other users/applications that are interacting with OpenTSDB and determine if you need to reduce requests or scale your system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03b29f4c94f34bdedd3f705d8941ee7475a77637" translate="yes" xml:space="preserve">
          <source>A time interval reflecting what timespan the &lt;strong&gt;rollup&lt;/strong&gt; value represents. The interval consists of &lt;code&gt;&amp;lt;amount&amp;gt;&amp;lt;unit&amp;gt;&lt;/code&gt; similar to a downsampler or relative query timestamp. E.g. &lt;code&gt;6h&lt;/code&gt; for 5 hours of data, &lt;code&gt;30m&lt;/code&gt; for 30 minutes of data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb0f7b88e3be127263ca923a668ed9a5fe1ff271" translate="yes" xml:space="preserve">
          <source>A timeout, in milliseconds, to wait for the data to be flushed to storage before returning with an error. When a timeout occurs, using the &lt;code&gt;details&lt;/code&gt; flag will tell how many data points failed and how many succeeded. &lt;code&gt;sync&lt;/code&gt; must also be given for this to take effect. A value of 0 means the write will not timeout.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="540f64115e15b615e9925d67690ac23d5dcffb0c" translate="yes" xml:space="preserve">
          <source>A timestamp for the start of the request. The timestamp may be relative or absolute as per &lt;a href=&quot;../../user_guide/query/dates&quot;&gt;&lt;em&gt;Dates and Times&lt;/em&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="525f2c05fc5ae2b28f6af07677da31f7aa59dfda" translate="yes" xml:space="preserve">
          <source>A timestamp when the value was recorded</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ee5dfa67c29b8e7f7f7e18cc200fd60935db407" translate="yes" xml:space="preserve">
          <source>A tree can be built in two ways. The &lt;code&gt;tsd.core.tree.enable_processing&lt;/code&gt; configuration setting enables real-time tree creation. Whenever a new TSMeta object is created or edited by a user, the TSMeta will be passed through every configured and enabled tree. The resulting branch will be recorded to storage. If a collision occurs or the TSUID failed to match on any rules, a warning will be logged and if the tree options configured, may be recorded to storage.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c730c478d0b8c5b39457a379f298a75d4ff9f4b" translate="yes" xml:space="preserve">
          <source>A tree will usually have more than one rule in order for the resulting tree to be useful. As noted above, rules are organized into levels and orders. A TSMeta is processed through the rule set starting at level 0 and order 0. Processing proceedes through the rules on a level in increasing order. After the first rule on a level that successfully matches on the TSMeta data, processing skips to the next level. This means that rules on a level are effectively &lt;a href=&quot;#id1&quot;&gt;&lt;span id=&quot;id2&quot;&gt;``&lt;/span&gt;&lt;/a&gt;or``ed. If level 0 has rules at order 0, 1, 2 and 3, and the TSMeta matches on the rule with an order of 1, the rules with order 2 and 3 will be skipped.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a5ff042ce7d55e98d44d2d70eb73cd45e18190d" translate="yes" xml:space="preserve">
          <source>A unique ID for the expression</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33876d548cebf79de3b6003ad1b8561f829c6684" translate="yes" xml:space="preserve">
          <source>A unique ID for the filter. Cannot be the same as any metric or expression ID</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de395961199d3062f8efd221bc97fb3242459fc1" translate="yes" xml:space="preserve">
          <source>A unique ID for the metric. This MUST be a simple string, no punctuation or spaces</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b3b3f883a55a42d0285470c282a27f039c06e2c" translate="yes" xml:space="preserve">
          <source>A unique timeseries is represented as a &lt;em&gt;leaf&lt;/em&gt; on the tree. A leaf can appear on any branch in the structure, including the root. But they will usually appear at the end of a series of branches in a branch that has one or more leaves but no child branches. Each leaf contains the TSUID for the timeseries to be used in a query as well as the metric and tag name/values. It also contains a &lt;em&gt;display name&lt;/em&gt; that is parsed from the rule set but may not be identical to any of the metric, tag names or tag values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="769d7be87137142dc846f5a6470df20fdb576a7b" translate="yes" xml:space="preserve">
          <source>A value represents the actual numeric measurement of the given metric. One of our employees, Sue, worked 8 hours yesterday, thus the value would be &lt;code&gt;8&lt;/code&gt;. There were 1,024 downloads of &lt;code&gt;logo.jpg&lt;/code&gt; from our webserver in the past hour. And 12 inches of snow fell in New England today.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="278c6d2be11806f222fe8478b21f697d37c7bb36" translate="yes" xml:space="preserve">
          <source>API Endpoints</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dd9b489f5d75471b127fd951f30d925f3294448" translate="yes" xml:space="preserve">
          <source>API Versioning</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8705f5b8de52f75384e00416993e909f4c2f6f4" translate="yes" xml:space="preserve">
          <source>Absolute Formatted Time</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3b3bc92d2af15628f573d733db69eeab37fe496" translate="yes" xml:space="preserve">
          <source>Absolute Unix Time</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f18385a15a7b01cbb905f7a854feb26f98f269a" translate="yes" xml:space="preserve">
          <source>Absolute time stamps are supported in human readable format or Unix style integers. Relative times may be used for refreshing dashboards. Currently, all queries are able to cover a single time span. In the future we hope to provide an offset query parameter that would allow for aggregations or graphing of a metric over different time periods, such as comparing last week to 1 year ago. See &lt;a href=&quot;dates&quot;&gt;&lt;em&gt;Dates and Times&lt;/em&gt;&lt;/a&gt; for details on what is permissible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9a7ee239d13016719dcbe3e27c60de312a495ef" translate="yes" xml:space="preserve">
          <source>Accessing a CLI tool is performed from the location of the &lt;code&gt;tsdb&lt;/code&gt; file, built after compiling OpenTSDB. By default the tsdb file will be located in the &lt;code&gt;build&lt;/code&gt; directory so you may access it via &lt;code&gt;./build/tsdb&lt;/code&gt;. Provide the name of the CLI utility as in &lt;code&gt;./build/tsdb tsd&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f05b6dce78d94877d56560f9067ed2624edd429c" translate="yes" xml:space="preserve">
          <source>Accessing this endpoint causes the TSD to perform a graceful shutdown and exit. A graceful shutdown prevents data loss by flushing all the buffered edits to HBase before exiting. The endpoint does not return any data and does not accept any parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15ab32b248212958aaf464e978d6a2c3b35f395b" translate="yes" xml:space="preserve">
          <source>Add a &lt;code&gt;&amp;lt;DEPENDENCY&amp;gt; := third_parth/&amp;lt;DIR&amp;gt;/&amp;lt;dependency&amp;gt;$(&amp;lt;DEPENDENCY&amp;gt;_VERSION).jar&lt;/code&gt; line e.g. &lt;code&gt;JACKSON_CORE := third_party/jackson/jackson-core-lgpl-$(JACKSON_CORE_VERSION).jar&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fccbf3206c6a60b574d4354e51497eb3de576c9" translate="yes" xml:space="preserve">
          <source>Add a &lt;code&gt;&amp;lt;DEPENDENCY&amp;gt;_VERSION := &amp;lt;version&amp;gt;&lt;/code&gt; e.g. &lt;code&gt;JACKSON_VERSION := 1.9.4&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f7671b11e26fd05e274e450494bcda12f25df8f" translate="yes" xml:space="preserve">
          <source>Add a &lt;code&gt;net&lt;/code&gt; directory under &lt;code&gt;./test&lt;/code&gt; so you have &lt;code&gt;./test/net&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89ab38bab0d4d61a5c796f3d8a03ed04494f19c9" translate="yes" xml:space="preserve">
          <source>Add a line &lt;code&gt;THIRD_PARTY += $(&amp;lt;DEPENDENCY&amp;gt;)&lt;/code&gt; e.g. &lt;code&gt;THIRD_PARTY += $(JACKSON_CORE)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0adbe41b5c4f51ee2a27bc553b905f4dce5f17b" translate="yes" xml:space="preserve">
          <source>Add a sed line such as &lt;code&gt;-e 's/@&amp;lt;DEPENDENCY&amp;gt;_VERSION@/$(&amp;lt;DEPENDENCY&amp;gt;_VERSION)/' \&lt;/code&gt; e.g. &lt;code&gt;-e 's/@JACKSON_VERSION@/$(JACKSON_VERSION)/' \&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8aef8d6b66c6c8a70b11af82b6d0ead8ac3fe188" translate="yes" xml:space="preserve">
          <source>Add the canonical source URL in the format &lt;code&gt;&amp;lt;DEPENDENCY&amp;gt;_BASE_URL := &amp;lt;URL&amp;gt;&lt;/code&gt; e.g. &lt;code&gt;JACKSON_CORE_BASE_URL := http://repository.codehaus.org/org/codehaus/jackson/jackson-core-lgpl/$(JACKSON_VERSION)&lt;/code&gt; and note that the JAR name will be appended to the end of the URL</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="721b3ec82273c0c70a8f8c9369d92cfb42619802" translate="yes" xml:space="preserve">
          <source>Add the following lines</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26b31d06e7f54ff3981e0495f78c6708002d56c1" translate="yes" xml:space="preserve">
          <source>Add this literal after the ID to delete the definition of the tree as well as the data</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08a49d5b71c55a151969ad4acb67761ede01d75c" translate="yes" xml:space="preserve">
          <source>Add unit tests for any classes/methods you create and verify that your change doesn't break existing unit tests. We know UTs aren't fun, but they are useful</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7667bc513ab39baddf732d178a913a022378b71" translate="yes" xml:space="preserve">
          <source>Add your new dependency in the proper alphabetical position in the format &lt;code&gt;$(&amp;lt;DEPENDENCY&amp;gt;)&lt;/code&gt;, e.g. &lt;code&gt;$(JACKSON_CORE&amp;gt;&lt;/code&gt;. Note that if you put it the middle of the list, you must finish with the line continuation character, the backslash &lt;code&gt;\&lt;/code&gt;. If your dependency goes at the end, do not add the backslash.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a017e033901d5de3b626dd05aab7c2144e00df88" translate="yes" xml:space="preserve">
          <source>Added in 2.3.0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44d41e3aac280cc9ed4e00cae632a020ce270f2f" translate="yes" xml:space="preserve">
          <source>Adding More Metrics</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc2bcb914d41cb8621eba4a7209ffaf1dc84d6c9" translate="yes" xml:space="preserve">
          <source>Adding a Dependency</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00fa3e11eef72a1e49c7aca732aaee7f735d27c8" translate="yes" xml:space="preserve">
          <source>Adding/Removing/Moving a Class</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9da5e18635f39ceee05a1f551656903b1f53f737" translate="yes" xml:space="preserve">
          <source>Additional Data Types - Currently only numeric data points are written to the pre-agg and rollup tables. We need to support rolling up annotations and other types of data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8b82f8ac1fd93a8c5863d25cc6558cb656b7f40" translate="yes" xml:space="preserve">
          <source>Additional Resources</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="950fc1a7949f592bbb64fbd1aabf322383c6bba2" translate="yes" xml:space="preserve">
          <source>Additional Statistics - Including the number of UIDs assigned and available</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3e2e20395adb50471df47d03e3413a9ea43e4fc" translate="yes" xml:space="preserve">
          <source>Additional stats available include JVM information, storage details (e.g. per-region-client HBase stats) and executed query details. See &lt;a href=&quot;../api_http/stats/index&quot;&gt;&lt;em&gt;/api/stats&lt;/em&gt;&lt;/a&gt; for more details about the other endpoints.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53e81f565f816b5c83074aee43cca6ea5cd9b0a7" translate="yes" xml:space="preserve">
          <source>Additionally for rollups, depending on how users write data to TSDs, for &lt;code&gt;ts1&lt;/code&gt;, we may receive the &lt;code&gt;12:15&lt;/code&gt; data point on &lt;code&gt;TSD_A&lt;/code&gt; but the &lt;code&gt;12:30&lt;/code&gt; value arrives on &lt;code&gt;TSD_B&lt;/code&gt; so neither has the data required for the full hour. Time windowing constraints also apply to rollups.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d593a83d9078a4c5ca261db3579edb8f1bca806" translate="yes" xml:space="preserve">
          <source>Additionally there are two ways to find the last data point for each time series located:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="956f2038bd31940cbe61129c8715db6de68f7c17" translate="yes" xml:space="preserve">
          <source>Additionally, an annotation is defined by a TSUID. If the TSUID field is set to a valid TSUID, the annotation will be stored, and associated, along with the data points for the timeseries defined by the ID. This means that when creating a query for data points, any annotations stored within the requested timespan will be retrieved and optionally returned to the user. These annotations are considered &quot;local&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c5024592fa7e4b2215e17d5378fcba7e46d7372" translate="yes" xml:space="preserve">
          <source>Adds the data points together</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="326b5c9e361ddafb99d56befe724d81aeadc3c05" translate="yes" xml:space="preserve">
          <source>After changing a UID name you must flush the cache (see &lt;a href=&quot;../../api_http/dropcaches&quot;&gt;&lt;em&gt;/api/dropcaches&lt;/em&gt;&lt;/a&gt;) or restart all TSDs for the change to take effect. TSDs do not periodically reload UID maps.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c883e00c7d656eb09bbe93c9f5a3b90b356ecb07" translate="yes" xml:space="preserve">
          <source>After deleting a UID, it may still remain in the caches of running TSD servers. Make sure to flush their caches after deleting an entry.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1121d185379cd2b8eccd7a0096f017df854cdb82" translate="yes" xml:space="preserve">
          <source>After editing, rebuild with &lt;code&gt;./build.sh&lt;/code&gt; and verify that your class was compiled and included properly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43346dc441eed81e11ee39382bf69bfa0a32d0e8" translate="yes" xml:space="preserve">
          <source>After veryfing the branches would appear correctly, set the tree's &lt;code&gt;enable&lt;/code&gt; flag to &lt;code&gt;true&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64e46a60f8813dae18a5abccec1ab5717be4495b" translate="yes" xml:space="preserve">
          <source>Aggregated Result</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9ba037c0e4c06d192c83e08070b15787f07daaa" translate="yes" xml:space="preserve">
          <source>Aggregation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6823990322fa2205e2d24a36c6c2453f16c5f8ee" translate="yes" xml:space="preserve">
          <source>Aggregation Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52a95fabaf21e811e5f327b8e0fe7d93647d265e" translate="yes" xml:space="preserve">
          <source>Aggregation Function - This is the name of a function such as &lt;code&gt;SUM&lt;/code&gt;, &lt;code&gt;COUNT&lt;/code&gt;, &lt;code&gt;MAX&lt;/code&gt; or &lt;code&gt;MIN&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="837f18e9ed6acbadbd2d78288834640615a00631" translate="yes" xml:space="preserve">
          <source>Aggregation functions return integer or double values based on the input data points. If both source values are integers in storage, the resulting calculations will be integers. This means any fractional values resulting from the computation will be lopped off, no rounding will occur. If either data point is a floating point value, the result will be a floating point. However if downsampling or rates are enabled, the result will always be a float.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88a712aa19feedd2b5d39b7aaf43fc0ec0206cff" translate="yes" xml:space="preserve">
          <source>Aggregations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1632508206753b59f1efb7259959b72f04eecbc" translate="yes" xml:space="preserve">
          <source>Aggregator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8aff46ff0d10740582792e3ed9dd72cae75a95cf" translate="yes" xml:space="preserve">
          <source>Aggregators</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dbfef83c9a7a52b4c81594ae55a12dc0bc53794" translate="yes" xml:space="preserve">
          <source>Aggregators have two methods of operation:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecd3ab872d159162fb508790d317d1cfa500a118" translate="yes" xml:space="preserve">
          <source>Alerting with Nagios</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a72085653e4c5be8c7640c868ef787cbcf063d1" translate="yes" xml:space="preserve">
          <source>All</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c485987c4567139d76684d16e77aaa4b68860542" translate="yes" xml:space="preserve">
          <source>All &lt;strong&gt;Request&lt;/strong&gt; fields will be present in the response in addition to a couple of others:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c30b1a9b9ad9597007d39676aeeed20fae84abe1" translate="yes" xml:space="preserve">
          <source>All &lt;strong&gt;Request&lt;/strong&gt; fields will be present in the response in addition to others:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9da3ff41164ade747aa6d1e20443f04bc1025005" translate="yes" xml:space="preserve">
          <source>All API calls use the default JSON serializer unless overridden by query string or &lt;code&gt;Content-Type&lt;/code&gt; header. To override:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c811df33f225fcceed717b1b7da6f8fc8ffd35f3" translate="yes" xml:space="preserve">
          <source>All OpenTSDB data points are stored in a single, massive table, named &lt;code&gt;tsdb&lt;/code&gt; by default. This is to take advantage of HBase's ordering and region distribution. All values are stored in the &lt;code&gt;t&lt;/code&gt; column family.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbba4d1d06b326e5af7b63bbb77e1d103a97d03d" translate="yes" xml:space="preserve">
          <source>All TSMeta objects are processed through every tree. If you only want a single, monolithic tree to organize all of your OpenTSDB timeseries, this isn't a problem. But if you want to create a number of trees for specific subsets of information, you may want to exclude some timeseries entries from creating leaves. The &lt;code&gt;strictMatch&lt;/code&gt; flag on a tree helps to filter out timeseries that belong on one tree but not another. With strict matching enabled, a timeseries must match a rule on every level (that has one or more rules) in the rule set in order for it to be included in the tree. If the meta fails to match on any of the levels with rules, it will be recorded as a not matched entry and no leaf will be generated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1013bb3c85fa9d5dcc181c70d3fabe993c376b56" translate="yes" xml:space="preserve">
          <source>All annotations are identified by the &lt;code&gt;startTime&lt;/code&gt; field and optionally the &lt;code&gt;tsuid&lt;/code&gt; field. Each note can be global, meaning it is associated with all timeseries, or it can be local, meaning it's associated with a specific tsuid. If the tsuid is not supplied or has an empty value, the annotation is considered to be a global note.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b5df4cde5b8f424c25e02f87e4edc8f1a8fdf4e" translate="yes" xml:space="preserve">
          <source>All changes to a rule are validated to confirm that proper fields are filled out so that the rule can process data. The following fields must be filled out for each rule type:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7031c4fe4444daec74a7fc37d7b469de04b57e52" translate="yes" xml:space="preserve">
          <source>All command line utilities share some common command line parameters:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f55487eee23615bc828a2950e86e38482dceaa03" translate="yes" xml:space="preserve">
          <source>All errors will return with a valid HTTP status error code and a content body with error details. The default formatter returns error messages as JSON with the &lt;code&gt;application/json&lt;/code&gt; content-type. If a different formatter was requested, the output may be different. See the formatter documentation for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f48346911a534fac71c01893d520e05a36e57158" translate="yes" xml:space="preserve">
          <source>All metrics from the main stats endpoint include a &lt;code&gt;host&lt;/code&gt; tag that includes the name of the host where the TSD is running. If the &lt;code&gt;tsd.stats.canonical&lt;/code&gt; configuration flag is set, this will change to &lt;code&gt;fqdn&lt;/code&gt; and the TSD will try to resolve its host name to return the fully qualified domain name. Currently all stats are integer values. Each request for stats will fetch statistics in real time so the timestamp will reflect the current time on the TSD host.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="948f7842b2905de08b74e76cdc14709a579c6bcb" translate="yes" xml:space="preserve">
          <source>All of the rules in the request array must belong to the same &lt;code&gt;treeId&lt;/code&gt; or a &lt;code&gt;400&lt;/code&gt; exception will be returned. Likewise, all of the rules will pass validation and must include the &lt;code&gt;level&lt;/code&gt; and &lt;code&gt;order&lt;/code&gt; fields.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca2f6961cad9e552b3938d5983be20e7f125c526" translate="yes" xml:space="preserve">
          <source>All queries will return results only for time series that matched the query and for which a data point was found. The results are a list of individual data points per time series. Aggregation cannot be performed on individual data points as the timestamps may not align and the TSD will only return a single point so interpolation is impossible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3c9aaed9a4960fdd5b1ac759fe7c984dddfd60f" translate="yes" xml:space="preserve">
          <source>All timings in the table below are in milliseconds. Also note that times can be inflated by JVM GCs so make sure to enable GC logging if something seems off.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="412311d6f7c746e700180c1bb8029afed60b0294" translate="yes" xml:space="preserve">
          <source>All verbs are supported and simply ignored</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c2db130d7c9c79009a06f1e70e8d7d30a69b340" translate="yes" xml:space="preserve">
          <source>Allows for overriding the HTTP verb when necessary</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c00d8a14120bb6478dbc61c92d870f6a593490c4" translate="yes" xml:space="preserve">
          <source>Along with metadata, OpenTSDB 2.0 introduces the concept of &lt;strong&gt;trees&lt;/strong&gt;, a hierarchical method of organizing timeseries into an easily navigable structure that can be browsed similar to a file system on a computer. Users can define a number of trees with various rule sets that organize TSMeta objects into a tree structure. Then users can browse the resulting tree via an HTTP API endpoint. See &lt;a href=&quot;../api_http/tree/index&quot;&gt;&lt;em&gt;/api/tree&lt;/em&gt;&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3140e90723f7685484971b73b3a785c9c210893" translate="yes" xml:space="preserve">
          <source>Also as data grows, more data means the batch processing time takes longer and must be sharded across multiple workers which can be a pain to coordinate and troubleshoot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b1f9b282e99ed087572fed0e588f1ea3e24f1a4" translate="yes" xml:space="preserve">
          <source>Also in 2.2, writing to HBase columns via appends is now supported. This can improve both read and write performance in that TSDs will no longer maintain a queue of rows to compact at the end of each hour, thus preventing a massive read and re-write operation in HBase. However due to the way appends operate in HBase, an increase in CPU utilization, store file size and HDFS traffic will occur on the region servers. Make sure to monitor your HBase servers closely.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a7fa5087fd0c0c877db196db6b3fa638610a95e" translate="yes" xml:space="preserve">
          <source>Also note that changes to any field in this section will cause a graph reload, so be aware if you're graph takes a long time to load.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12006f4c51ad6d59d63a83f98919bf7627215f2f" translate="yes" xml:space="preserve">
          <source>Also see the &lt;a href=&quot;put&quot;&gt;&lt;em&gt;/api/put&lt;/em&gt;&lt;/a&gt; documentation for notes and common parameters that are shared with the &lt;code&gt;/api/rollup&lt;/code&gt; endpoint. This page lays out the differences between the two.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ce82d3228d8289b50b6f46f81713146e098de7f" translate="yes" xml:space="preserve">
          <source>Also, create a &lt;code&gt;tsd&lt;/code&gt; directory under &lt;code&gt;./src&lt;/code&gt; so that you have &lt;code&gt;./src/tsd&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44455ddca84e1c7e7b50748691260e52fb719f0d" translate="yes" xml:space="preserve">
          <source>Alternatively you can periodically synchronize all TSMeta objects via the CLI &lt;code&gt;uid&lt;/code&gt; tool. This will scan through the &lt;code&gt;tsdb-uid&lt;/code&gt; table and pass each discovered TSMeta object through configured and enabled trees. See &lt;a href=&quot;cli/uid&quot;&gt;&lt;em&gt;uid&lt;/em&gt;&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81180d8f5af5768786762f186c8abf1e8d34a41c" translate="yes" xml:space="preserve">
          <source>Alternatively you can spcify a CLI query to fsck over a smaller timespan and look at a specific metric or time series. These queries will almost always complete much faster than a full scan and will uncover similar issues. However orphaned metrics will not found as the query will only operate on known time series. Orphans where tag names or values have been deleted will still be found.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57415a3282f2d634625876e30507ab5462de22cb" translate="yes" xml:space="preserve">
          <source>Alternatively, if you are unable to change the system timezone, you can provide an override via the config file &lt;code&gt;tsd.core.timezone&lt;/code&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c46e21339a01e43c3b4fd8711e91ef652e7fcb31" translate="yes" xml:space="preserve">
          <source>Alternatively, there is a &lt;code&gt;build.sh&lt;/code&gt; script you can run that makes as it takes care of all the steps for you. You can give it a Make target in argument, e.g. &lt;code&gt;./build.sh distcheck&lt;/code&gt; (the default target is &lt;code&gt;all&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bbccedb7da6e367b20be9ee114cfe21f5ca2206" translate="yes" xml:space="preserve">
          <source>Alternatively, you can also use the following commands to create a temporary directory and pass in only command line flags:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5acc5892d524933ec85b194b36321f9ee5dbd424" translate="yes" xml:space="preserve">
          <source>Alternatively, you can send a plain-text patch to the &lt;a href=&quot;https://groups.google.com/forum/#!forum/opentsdb&quot;&gt;mailing list&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae84c7705d5987109c05bd13a2506b21cc71c738" translate="yes" xml:space="preserve">
          <source>Always Present</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="150d990d312f4df99c0d10c7c193bf8f94f99526" translate="yes" xml:space="preserve">
          <source>Always provide the most restrictive visibility to classes and members</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d5ec7cfc81acc12b9e7165d63997f3cf691891f" translate="yes" xml:space="preserve">
          <source>An IPv4 address to bind to for incoming requests. The default is to listen on all interfaces. E.g. 127.0.0.1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b78e8a45d2ac6c926fb4c36f235afc5c101621f9" translate="yes" xml:space="preserve">
          <source>An Internet connection</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcd57435b16e442f984749d7392c9e05a446e3f0" translate="yes" xml:space="preserve">
          <source>An OpenTSDB compaction takes multiple columns in an HBase row and merges them into a single column to reduce disk space. This is not to be confused with HBase compactions where multiple edits to a region are merged into one. OpenTSDB compactions can occur periodically for a TSD after data has been written, or during a query.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb1b6002524791f017ed872b88206f345804d239" translate="yes" xml:space="preserve">
          <source>An OpenTSDB query requires at least one sub query, a means of selecting which time series should be included in the result set. There are two types:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27c1eb75aba03e2a263ea2ee70e0e69e63876c1e" translate="yes" xml:space="preserve">
          <source>An acknowledgement after the caches have been purged.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44e81d4aeae1d9f7e3898fc9b2cd652f4d7febcc" translate="yes" xml:space="preserve">
          <source>An aggregation function used to generate the &lt;strong&gt;pre-aggregate&lt;/strong&gt; value. Must match a supplied TSDB aggregator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a525d222ad07caa905c116f52f5d66b8d83fa29" translate="yes" xml:space="preserve">
          <source>An aggregation function used to generate the &lt;strong&gt;rollup&lt;/strong&gt; value. Must match a supplied TSDB aggregator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69a70586649654ed0bacbeb29baf2d7942f55b9e" translate="yes" xml:space="preserve">
          <source>An array of child branch objects. May be &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71e22c495996ee9bf6847fd0a0026eb5075c0ef5" translate="yes" xml:space="preserve">
          <source>An array of child leaf objects. May be &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da2dbc67ee2a73f8c4aaf2abf0121d620b6c90e1" translate="yes" xml:space="preserve">
          <source>An array of methods or endpoints that the serializer implements to convert response data. These usually map to an endpoint such as &lt;code&gt;/api/suggest&lt;/code&gt; mapping to &lt;code&gt;Suggest&lt;/code&gt;. If the serializer does not implement a certain method, the default formatter will respond. Each name also ends with the API version supported, e.g. &lt;code&gt;V1&lt;/code&gt; will support version 1 API calls.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52c432c0c25f4c6b37ee9ee8d37c7d753ba3f73a" translate="yes" xml:space="preserve">
          <source>An array of methods or endpoints that the serializer implements to parse user input in the HTTP request body. These usually map to an endpoint such as &lt;code&gt;/api/suggest&lt;/code&gt; will map to &lt;code&gt;Suggest&lt;/code&gt;. If a serializer does not implement a parser, the default serializer will be used. Each name also ends with the API version supported, e.g. &lt;code&gt;V1&lt;/code&gt; will support version 1 API calls.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="746f2c7b28e8d2a268b945e007bb7179eba2468f" translate="yes" xml:space="preserve">
          <source>An end time for the query. If not supplied, the TSD will assume the local system time on the server. This may be a relative or absolute timestamp. See &lt;a href=&quot;../../user_guide/query/index&quot;&gt;&lt;em&gt;Querying or Reading Data&lt;/em&gt;&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="deee74978ef9c5fd876cc77ca9496291f403fb68" translate="yes" xml:space="preserve">
          <source>An end time for the query. If the end time is not supplied, the current time on the TSD will be used. See &lt;a href=&quot;dates&quot;&gt;&lt;em&gt;Dates and Times&lt;/em&gt;&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4522294c0b0966fe0da2bc8f135c0d16e9fa25b" translate="yes" xml:space="preserve">
          <source>An example GnuPlot graph with annotation markers appears below. Notice how only the &lt;code&gt;description&lt;/code&gt; field appears in a box with a blue line recording the &lt;code&gt;start_time&lt;/code&gt;. Only the &lt;code&gt;start_time&lt;/code&gt; appears on the graph.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="521fc53ddb92bc081e4ac5123e84e0e5c86bff26" translate="yes" xml:space="preserve">
          <source>An example column qualifier for the daily 1 hour interval table looks like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="759591e10a4def8cdd50fbc5104632d0cc8d0554" translate="yes" xml:space="preserve">
          <source>An example with the NaN fill policy and downsampling on 10 seconds:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7465f2dfa828fa4f7055e9c6a7f632f2665df8a2" translate="yes" xml:space="preserve">
          <source>An internal error occured within OpenTSDB. Make sure all of the systems OpenTSDB depends on are accessible and check the bug list for issues</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="887f8d2791f4d76546276c5a22cd9cf5aacf3c53" translate="yes" xml:space="preserve">
          <source>An optional aggregation function to overload the global function in &lt;code&gt;time&lt;/code&gt; for just this metric</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1776a2d174fc299cead2008a3fc53a1b963b6f90" translate="yes" xml:space="preserve">
          <source>An optional descriptive name for series</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c05ca77ba7c88b11a44c425083bc737e840d78cd" translate="yes" xml:space="preserve">
          <source>An optional downsampling function to reduce the amount of data returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aea1bf33eabc2f2045eeeb1b8241c81ecfd4c1ff" translate="yes" xml:space="preserve">
          <source>An optional end time for the event if it has completed or been resolved</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51c180be77dae83764d1c8dd35f013a88eaa2e72" translate="yes" xml:space="preserve">
          <source>An optional end time for the event if it has completed or been resolved. The timestamp may be relative or absolute as per &lt;a href=&quot;../../user_guide/query/dates&quot;&gt;&lt;em&gt;Dates and Times&lt;/em&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e52586afe9386772732ad381a23015dcad551137" translate="yes" xml:space="preserve">
          <source>An optional fill policy for the expression when it is used in a nested expression and doesn't have a value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d029f1d003f857b2a9562c145e21df0936883b23" translate="yes" xml:space="preserve">
          <source>An optional flag to calculate the rate of change for the result</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c787fefbe7e0a74977e6a791d7bca3bc8bcce241" translate="yes" xml:space="preserve">
          <source>An optional interval and function to reduce the number of data points returned</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcbb4fe24d51da5ba00c62330e7c6fdecc58aca2" translate="yes" xml:space="preserve">
          <source>An optional maximum value for this timeseries that may be used in calculations such as percent of maximum. If the default of &lt;code&gt;NaN&lt;/code&gt; is present, the value is ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="202508fd4a1e34e5b43d2f3cac427028bd38cc8e" translate="yes" xml:space="preserve">
          <source>An optional minimum value for this timeseries that may be used in calculations such as percent of minimum. If the default of &lt;code&gt;NaN&lt;/code&gt; is present, the value is ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e29d929720d73eb84b71e565cdfd06d3c3e85cdc" translate="yes" xml:space="preserve">
          <source>An optional port to use for all nodes if not configured in the seeds setting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97f7b80727ea46eb199bdc3fbf5003c405615fb7" translate="yes" xml:space="preserve">
          <source>An optional set of tags for filtering or grouping</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="626af91198ed2091b2270c4ed7b2777fa4f2a591" translate="yes" xml:space="preserve">
          <source>An optional value that, when exceeded, will cause the aggregator to return a 0 instead of the calculated rate. Useful when data sources are frequently reset to avoid spurious spikes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebaca6bb2f79d666a05d372fbb2cbb8ea7afa5da" translate="yes" xml:space="preserve">
          <source>An optional value that, when exceeded, will cause the aggregator to return a &lt;code&gt;0&lt;/code&gt; instead of the calculated rate. Useful when data sources are frequently reset to avoid spurious spikes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01b29582fc5679b33d94acd54ba0c6e325972ca2" translate="yes" xml:space="preserve">
          <source>Annotation API Endpoints</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d05abe32c8fdc762f3befc412fe0ddd24e3b3520" translate="yes" xml:space="preserve">
          <source>Annotation Column Format</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="583bbee059f35bac0d1052618b4bd83185c18d80" translate="yes" xml:space="preserve">
          <source>Annotation Response</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74dc68d72e7c6f05cb32f3c5f38a50a1624e1e2a" translate="yes" xml:space="preserve">
          <source>Annotations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ab40321c0224f8c1eeead859701519d338631c0" translate="yes" xml:space="preserve">
          <source>Annotations - Record meta data about specific time series or data points</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7a6f4fceae0cca02287faf23c6d52e066f2030d" translate="yes" xml:space="preserve">
          <source>Annotations - Scan for multiple annotations only via the /api/annotations endpoint</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c54a2bf0006e52bdeb2a73d12d01242987c82ed4" translate="yes" xml:space="preserve">
          <source>Annotations may also be deleted in bulk for a specified time span. If you supply a list of of one or more TSUIDs, annotations with a &lt;code&gt;start time&lt;/code&gt; that falls within the specified timespan and belong to those TSUIDs will be removed. Alternatively the &lt;code&gt;global&lt;/code&gt; flag can be set and any global annotations (those not associated with a time series) will be deleted within the range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6776ca1314ddfaa6cf8b0442ab1d738185684f04" translate="yes" xml:space="preserve">
          <source>Annotations or Other Objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99d5982ee7894e31e17c0faca2052dc0b76682d0" translate="yes" xml:space="preserve">
          <source>Annotations should have a very brief &lt;em&gt;description&lt;/em&gt;, limited to 25 characters or so since the note may appear on a graph. If the requested timespan has many annotations, the graph can become clogged with notes. User interfaces can then let the user select an annotation to retrieve greater detail. This detail may include lengthy &quot;notes&quot; and/or a custom map of key/value pairs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f327ef33a3fe69851c92872c646409446ea3589" translate="yes" xml:space="preserve">
          <source>Anomaly Processing/Forecasting - Integrate with modeling libraries (such as &lt;a href=&quot;https://github.com/yahoo/egads&quot;&gt;EGADs&lt;/a&gt;) for deeper time series analysis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b925796d1761b28afb4d1e440b3ed7be7603a32" translate="yes" xml:space="preserve">
          <source>Another form of metadata is the &lt;em&gt;annotation&lt;/em&gt;. Annotations are simple objects associated with a timestamp and, optionally, a timeseries. Annotations are meant to be a very basic means of recording an event. They are not intended as an event management or issue tracking system. Rather they can be used to link a timeseries to such an external system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0531e6218e616fab8c8ec396c7ab34c6bc3ff5fe" translate="yes" xml:space="preserve">
          <source>Another idea is to simply bump up the UIDs to 4 bytes then calculate a hash on the strings and store the hash with forward and reverse maps as we currently do. This would certainly reduce the amount of time it takes to assign a UID, but there are a few problems. First, you will encounter collisions where different names return the same hash. You could try different algorithms and even try increasing the hash to 8 bytes, but you'll always have the issue of colliding hashes. Second, you are now adding a hash calculation to every data put since it would have to determine the hash, then lookup the hash in the UID table to see if it's been mapped yet. Right now, each data point only performs the lookup. Third, you can't pre-split your HBase regions as easily. If you know you will have roughly 800 metrics in your system (the tags are irrelevant for this purpose), you can pre-split your HBase table to evenly distribute those 800 metrics and increase your initial write performance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcbb9a8ecf55433c790e3fa926d7475bfd386578" translate="yes" xml:space="preserve">
          <source>Another option is to define a scalar value (e.g. &lt;code&gt;0&lt;/code&gt; or the maximum value for a Long) to use whenever a data point is missing. OpenTSDB 2.0 provides a few aggregation methods that substitute a scalar value for missing data points. These are useful when working with distinct value time series such as the number of sales in at a given time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="392fe509e9392490b51af97db736d7e2d3e4a446" translate="yes" xml:space="preserve">
          <source>Another option that some databases use is to queue all of the data in memory in the process and write the results after a configured time window has passed. But because TSDs are stateless and generally users put a load balancer in front of their TSDs, a single TSD may not get the full picture of the rollup or pre-agg to be calculated (as we mentioned above). For this method to work, upstream collectors would have to route all of the data required for a calculation to a specific TSD. It's not a difficult task but the problems faced include:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="983c4e247e09c77f0e588c12105261ef30101c30" translate="yes" xml:space="preserve">
          <source>Another recommendation is to enable keep-alives on your HTTP client so that you can re-use your connection to the server every time you put data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0fdf1aa7874f01e248e3200c433b67bdd31d281" translate="yes" xml:space="preserve">
          <source>Any other values will result in a &lt;code&gt;False&lt;/code&gt;. Parsing is case insensitive</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b70eb846833da0fc7310732e63c8284ff4ff5aa4" translate="yes" xml:space="preserve">
          <source>Any time an error is found (and possibly fixed), the log will be updated immediately. Errors will usually include the column where the error was found in the output. Byte arrays are represented in either Java style signed bytes, e.g. &lt;code&gt;[0, 1, -42]&lt;/code&gt; or hex encoded strings, e.g. &lt;code&gt;00000000000000040000000000000005&lt;/code&gt;. Short-hand references include (k) for the row key, (q) for the qualifier and (v) for the value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9d79ce9537fe04f09843fb236b33ce1c9599be7" translate="yes" xml:space="preserve">
          <source>Append Data Points</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4ad40d52f5c3a86a30363c8dc33a0c86a279ce2" translate="yes" xml:space="preserve">
          <source>Appenders</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bb04ae52ad92fef6ea091349274040b3722f6ae" translate="yes" xml:space="preserve">
          <source>Appenders are destinations where logging information is sent. Typically logging configs send results to the console and a file. Optionally you can send logs to Syslog, email, sockets, databases and more. Each appender section defines a destination, a format and an optional trigger. Read about appenders in the &lt;a href=&quot;http://logback.qos.ch/manual/appenders.html&quot;&gt;Logback Manual&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9592e275e673d45ed44c6cf58ee2d1845341704f" translate="yes" xml:space="preserve">
          <source>Appends</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f290b605cb2c3e3e82c74be845d36f40fbaa4a77" translate="yes" xml:space="preserve">
          <source>Appends - Support writing all data points for an hour in a single column. This saves the need for TSD compactions and reduces network traffic at query time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="982c5ae2a0f544f60bcf98529231b8ba463f7d03" translate="yes" xml:space="preserve">
          <source>Appends can be enabled and disabled at any time. However versions of OpenTSDB prior to 2.2 will skip over appended values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26d1f3fe715239e3cb41f5a9c2d58169fda82eb1" translate="yes" xml:space="preserve">
          <source>Applicable Rule Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="107004472b7ba4e5e31f3082ee1fb5a1239eec61" translate="yes" xml:space="preserve">
          <source>Array</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6c3cf2123a0eddeea9cffe0a5196ee8f9bf933f" translate="yes" xml:space="preserve">
          <source>Array of Strings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9509762f6d4efd1539c8101a6771cc044b06b73" translate="yes" xml:space="preserve">
          <source>Array of UIDMeta</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd8e4ecabbe4b5bfb2f2e7130ecd9c625285311d" translate="yes" xml:space="preserve">
          <source>Array&amp;lt;String&amp;gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c309681de15a55e38681f82f1ad7078822507ea9" translate="yes" xml:space="preserve">
          <source>As data grows, queries for generating the rollups grow as well to the point where the query load impacts write and user query performance. OpenTSDB runs into this same problem when data compactions are enabled under HBase.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a54e02521592d2aba451e1347fc96ac85d35cade" translate="yes" xml:space="preserve">
          <source>As developers add plugins we will list them here.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8c04c71548289b55c312887eda1fea4df62cf7f" translate="yes" xml:space="preserve">
          <source>As of 2.1, downsampled timestamps are normalized based on the remainder of the original data point timestamp divided by the downsampling interval in milliseconds, i.e. the modulus. In Java the code is &lt;code&gt;timestamp - (timestamp % interval_ms)&lt;/code&gt;. For example, given a timestamp of &lt;code&gt;1388550980000&lt;/code&gt;, or &lt;code&gt;1/1/2014 04:36:20 UTC&lt;/code&gt; and an hourly interval that equates to 3600000 milliseconds, the resulting timestamp will be rounded to &lt;code&gt;1388548800000&lt;/code&gt;. All data points between 4 and 5 UTC will wind up in the 4 AM bucket. If you query for a day's worth of data downsampling on 1 hour, you will receive 24 data points (assuming there is data for all 24 hours).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47337a9704061764d70f064952bd8375909c9061" translate="yes" xml:space="preserve">
          <source>As of 2.3 and later, if you know all of the tag keys for a given metric query latency can be improved greatly by using the &lt;code&gt;explicitTags&lt;/code&gt; feature and making sure &lt;code&gt;tsd.query.enable_fuzzy_filter&lt;/code&gt; is enabled in the config. A special filter is given to HBase that enables skipping ahead to rows that we need for the query instead of iterating over every row key and comparing a regular expression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f1b9f436861ffac8df62d58e62c4872f285e182" translate="yes" xml:space="preserve">
          <source>As of OpenTSDB 2.4 is the concept of rollup and pre-aggregation tables. While TSDB does a great job of storing raw values as long as you want, querying for wide timespans across massive amounts of raw data can slow queries to a crawl and potentially OOM a JVM. Instead, individual time series can be rolled up (or downsampled) by time and stored as separate values that allow for scanning much wider timespans at a lower resolution. Additionally, for metrics with high cardinalities, pre-aggregate groups can be stored to improve query speed dramatically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="732667b955a08af53ac5f25f819f28e94ba1ef18" translate="yes" xml:space="preserve">
          <source>As of version 2.0, data can be sent over HTTP in formats supported by 'Serializer' plugins. Multiple, un-related data points can be sent in a single HTTP POST request to save bandwidth. See the &lt;code&gt;../api_http/put&lt;/code&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db60161b1d5adabd8254d06a195ff8da305802c1" translate="yes" xml:space="preserve">
          <source>As of yet, OpenTSDB lacks an authentication and access control system. Therefore no authentication is required when accessing the API. If you wish to limit access to OpenTSDB, use network ACLs or firewalls to block access. We do not recommend running OpenTSDB on a machine with a public IP Address.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cea97105475360ce80d5030a56cd712088c4dc02" translate="yes" xml:space="preserve">
          <source>As stated, when this command executes, the TSD will shutdown. You'll have to restart it manually, using a script, or use something like Daemontools or Runit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1c88edd7bf108a5a801d4a13e9a92a67b6df54d" translate="yes" xml:space="preserve">
          <source>As with rollups, when writing pre-aggregates, it's best to avoid functions such as &lt;strong&gt;average&lt;/strong&gt;, &lt;strong&gt;median&lt;/strong&gt; or &lt;strong&gt;deviation&lt;/strong&gt;. Just store &lt;strong&gt;sum&lt;/strong&gt; and &lt;strong&gt;count&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c502b44c93dff20d30093e242bb24e2a8ef50ce5" translate="yes" xml:space="preserve">
          <source>As you make changes via the GUI you'll see that the URL reflects your edits. You can copy the URL, save it or email it around and pull it back up to pick up where you were. Unfortunately OpenTSDB doesn't include a built in dashboard so you'll have to save the URL somewhere manually.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f08a6da1816710ed938e17460db06eb21c9c2eb" translate="yes" xml:space="preserve">
          <source>Assign one or more rules to the tree via the HTTP API</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eea30c227cce89774af75e97373ab9b1e5e924ec" translate="yes" xml:space="preserve">
          <source>Assigning a unique numeric ID for each timeseries creates issues with lock contention and/or synchronization issues where a timeseries may be missed if the UID could not be incremented.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e55df441e8955746182110c3946288f381520e83" translate="yes" xml:space="preserve">
          <source>Assignment</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c10a93dab931848b84562997967a7d34e2b6f3cc" translate="yes" xml:space="preserve">
          <source>Assume that our TSD has the following timeseries stored:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c65e9ce84bb87e99ecebbba98ab3dcdf7f458ba" translate="yes" xml:space="preserve">
          <source>At any time the connection can be closed by issuing the &lt;code&gt;exit&lt;/code&gt; command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4a356fc9c48c2c7cdff5668096ea5abf6d8043e" translate="yes" xml:space="preserve">
          <source>At least 1 gbps links between servers, 10 gbps preferable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9718440432d9a3732545efc159c795bda32d7757" translate="yes" xml:space="preserve">
          <source>At least one metric, tagk or tagv is required.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42982e3f12dc618bcabb5fe17a233fd2d4610c67" translate="yes" xml:space="preserve">
          <source>At least one tag pair must be present. Additional tag pairs can be added with spaces in between.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98bc8152cd0be16fd05b28709c8e38d69f4c7db4" translate="yes" xml:space="preserve">
          <source>At read time, only one column is returned per row similar to post-TSD-compaction rows. However note that if the &lt;code&gt;tsd.storage.repair_appends&lt;/code&gt; is enabled, then when a column has duplicates or out of order data, it will be re-written to HBase. Also columns with many duplicates or ordering issues may slow queries as they must be resolved before answering the caller.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff7ea7f45f5340566a23f620add0e505470f89be" translate="yes" xml:space="preserve">
          <source>At the moment OpenTSDB primarily supports &lt;a href=&quot;http://en.wikipedia.org/wiki/Linear_interpolation&quot;&gt;linear interpolation&lt;/a&gt; (sometimes shortened &quot;lerp&quot;) along with some aggregators that will simply substitute zeros or the max or min value. Patches are welcome for those who would like to add other interpolation methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a38e648a21fd149994fb3b8f15a7fdaa56213575" translate="yes" xml:space="preserve">
          <source>At this point you can access the TSD's web interface through &lt;a href=&quot;http://127.0.0.1:4242&quot;&gt;http://127.0.0.1:4242&lt;/a&gt; (if it's running on your local machine).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b118976a4e6a7ed38eb45a655376658cd3517044" translate="yes" xml:space="preserve">
          <source>Attempts to write a data point to storage. Note that UTF-8 characters may not be handled properly by the Telnet style API so use the &lt;a href=&quot;../api_http/put&quot;&gt;&lt;em&gt;/api/put&lt;/em&gt;&lt;/a&gt; method instead or use the Java API directly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dfb244633e476e29b3c879b956858f85750eb59" translate="yes" xml:space="preserve">
          <source>Attempts to write a rolled up and/or pre-aggregated data point to storage. Note that UTF-8 characters may not be handled properly by the Telnet style API so use the &lt;a href=&quot;../api_http/rollup&quot;&gt;&lt;em&gt;/api/rollup&lt;/em&gt;&lt;/a&gt; method instead or use the Java API directly. Also see the &lt;code&gt;../user_guide/rollup&lt;/code&gt; documentation for more information. This endpoint behaves in a similar manner to the &lt;a href=&quot;put&quot;&gt;&lt;em&gt;put&lt;/em&gt;&lt;/a&gt; API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="478bb140bb3b4747db29b43d1024dcdde2c534ef" translate="yes" xml:space="preserve">
          <source>Authentication/Permissions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1674844240c96abff044890abbf1d55a909d81c" translate="yes" xml:space="preserve">
          <source>Authorization, Content-Type, Accept, Origin, User-Agent, DNT, Cache-Control, X-Mx-ReqToken, Keep-Alive, X-Requested-With, If-Modified-Since</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46dab8c5ee4ee9055360f13700b88965a8c3bc74" translate="yes" xml:space="preserve">
          <source>Autotools</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0bf03c7be0399b33dbbff23b14d12e96dc07e4d" translate="yes" xml:space="preserve">
          <source>Available Aggregators</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="617f9e22b7a4d47565d31577338a819cdfffa7b1" translate="yes" xml:space="preserve">
          <source>Available in 2.1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dbb1c86333076293e49e7998a8dcdbbb1739ad1" translate="yes" xml:space="preserve">
          <source>Available polices include:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba06ac882ea82cfc5ff3c9877ce1befcdb605bc8" translate="yes" xml:space="preserve">
          <source>Averages the data points</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d03bf90373df5dff6b64046dc63dea9d51319d85" translate="yes" xml:space="preserve">
          <source>Averaging Rollup Example</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdc93143c600bc908604d885cdc906d44f8df53a" translate="yes" xml:space="preserve">
          <source>Avg</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3c3f8d10b8500d3a4ea597d916c22c461683531" translate="yes" xml:space="preserve">
          <source>Avoid checked exceptions as much as possible</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0821d7487cb3907797e0f456a68cf5d6f3ef5c10" translate="yes" xml:space="preserve">
          <source>Axes Tab</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae4f281df5a5d0ff3cad6371f76d5c29b6d953ec" translate="yes" xml:space="preserve">
          <source>B</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="701d234b29e4fe879c85c70639b42f4aa7547d3a" translate="yes" xml:space="preserve">
          <source>B Downsampled</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c4bd5fc0f33cd6c944991fa3aa6c74ffdd68cdb" translate="yes" xml:space="preserve">
          <source>Back in the query builder section you have the graphing style box to the right.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbc34ab89836edf7ea4cc32359125a0dba4d86e1" translate="yes" xml:space="preserve">
          <source>Bad Compacted Column Error</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="860e33c346084a083d05a58802fc4e75d39e2177" translate="yes" xml:space="preserve">
          <source>Bad Row Keys</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca70906716cc04bd28ef8ee9706283f20f6f8b58" translate="yes" xml:space="preserve">
          <source>Batch Import</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2233e46b9877c7db6514720f14d96ab3c666c8cc" translate="yes" xml:space="preserve">
          <source>Batch Imports</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5dcb7ee0ac06b7084a33162bced53170bc4b80d3" translate="yes" xml:space="preserve">
          <source>Be consistent with your naming to reduce duplication. Always use the same case for metrics, tag names and values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b50c9260a41fbc03e6818deaa6d0aecd8c62835c" translate="yes" xml:space="preserve">
          <source>Because OpenTSDB only supports floating point values, it is not suitable for storing measurements that require exact values like currency. This is why, when storing a value like &lt;code&gt;15.2&lt;/code&gt; the database may return &lt;code&gt;15.199999809265137&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86211e4bfbd7af157eb3f7e190342fe9926a0c60" translate="yes" xml:space="preserve">
          <source>Because fields are space delimited, metrics and tag values may not contain spaces.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3ff4bc8e1bbb436befc0eb2add2e12c7abcbe22" translate="yes" xml:space="preserve">
          <source>Because of the (essentially) stateless nature of the TSDs, they likely won't have the full set of data available to perform pre-aggregates. E.g., our sample &lt;code&gt;ts1&lt;/code&gt; data may be written to &lt;code&gt;TSD_A&lt;/code&gt; while &lt;code&gt;ts2&lt;/code&gt; is written to &lt;code&gt;TSD_B&lt;/code&gt;. Neither can perform a proper group-by without reading the data out of storage. We also don't know at what time we should perform the pre-aggregation. We could wait for 1 minute and pre-aggregate the data but miss anything that came in after that minute. Or we could wait an hour and queries over the pre-aggregates won't have data for the last hour. And what happens if data comes in much later?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7f105474ae879b960f52fb7414f9cb316db3c4e" translate="yes" xml:space="preserve">
          <source>Because salting modifies the storage format, you cannot enable or disable salting at whim. If you have existing data, you must start a new data table and migrate data from the old table into the new one. Salted data cannot be read from previous versions of OpenTSDB.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a502c1f3a01ef3e209d10da142be86c82f6a0dd" translate="yes" xml:space="preserve">
          <source>Because the socket is read and written to asynchronously, responses may be garbled. It's best to treat this similar to a UDP socket in that you may not always know if the data made it in. If you require truly synchronous writes with guarantees of the data making it to storage, please use the HTTP or Java APIs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c407f840023ae0d40904f0cc86b7a61d5787349a" translate="yes" xml:space="preserve">
          <source>Because we've worked hard to maintain backwards compatibility, you can turn off a 2.x TSD and restart your old 1.x TSD. The only exceptions are if you have written annotations or milliseconds as you saw in the warning above. In these cases you must downgrade to 1.2 or later. You may also delete the &lt;code&gt;tsdb-tree&lt;/code&gt; and &lt;code&gt;tsdb-meta&lt;/code&gt; tables if you so desire.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a630faf9cae7e42528fe90580abeb5cf205043ea" translate="yes" xml:space="preserve">
          <source>Before executing a &lt;code&gt;DELETE&lt;/code&gt; query, you should make sure that a manual tree syncronization is not running somehwere on your data. If it is, there may be some orphaned branches or leaves stored during the purge. Use the _____ CLi tool sometime after the delete to cleanup left over branches or leaves.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3762aea9e5b5570f65818c67b4393182d7324d9a" translate="yes" xml:space="preserve">
          <source>Before proceeding with OpenTSDB, make certain that Zookeeper is accessible. One method is to simply telnet to the proper port and execute the &lt;code&gt;stats&lt;/code&gt; command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b12bc1a8848c23607a61e28a56630b86c84ffd68" translate="yes" xml:space="preserve">
          <source>Before upgrading to 2.x, you may want to upgrade all of your TSDs to OpenTSDB 1.2. This release is fully forwards compatible in that it will ignore annotations and millisecond timestamps and operate as expected. With 1.2 running, if you accidentally record an annotation or millisecond data point, your 1.2 TSDs will operate normally.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca9eaae015fc430422df76f953963f18f2ccf05b" translate="yes" xml:space="preserve">
          <source>Before your code changes can be included, please file the &lt;a href=&quot;https://docs.google.com/spreadsheet/embeddedform?formkey=dFNiOFROLXJBbFBmMkQtb1hNMWhUUnc6MQ&quot;&gt;Contribution License Agreement&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="969c64a9636fa70d25aa138b8ddc960fb263688a" translate="yes" xml:space="preserve">
          <source>Below that are a few tabs for altering different parts of the graph.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47458f8e044d9b61e9d60898d478379c7ea24660" translate="yes" xml:space="preserve">
          <source>Below the status line will be the actual graph. The graph is simply a PNG image generated by GnuPlot so you can copy the image and save it to your local machine or send it in an email.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db5121d19ff1e150bc777b21bcbaf5f39b758e1b" translate="yes" xml:space="preserve">
          <source>Bigtable</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a9806a2260b92374df88ca810795a9072120fc1" translate="yes" xml:space="preserve">
          <source>Bigtable Support - Run TSDB in the cloud using Google's hosted Bigtable service.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b76ff4906f33c2dd97ddd929b9662ba8cac6174c" translate="yes" xml:space="preserve">
          <source>Boolean</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dd50061e30573f6ab36c375133975b7b2ccc5b4" translate="yes" xml:space="preserve">
          <source>Booleans - The following literals will parse to &lt;code&gt;True&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d40a92b0c873830e58fbc28110aa68ea2248258b" translate="yes" xml:space="preserve">
          <source>Both parameters are required or you will receive an exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ba595110c210f7c341ea0c078d9c70c201502ca" translate="yes" xml:space="preserve">
          <source>Both tag name and value boxes also auto-complete in the same way as the &lt;strong&gt;Metric&lt;/strong&gt; box. However each auto-complete will show &lt;em&gt;all&lt;/em&gt; of the results for the name or value, not just the values that would apply to a specific metric or tag name. In future versions we may be able to implement such a mapping feature but currently you'll have to sort through all of the values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1627510b242fdd96752b823f80c1c2b488d0747b" translate="yes" xml:space="preserve">
          <source>Branch</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3ab6d9f99e43b04bd73a1e83ab60d8ceb7360e5" translate="yes" xml:space="preserve">
          <source>Branch Column</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8d1f7002a71cd2b5ba987b51338b89b63850037" translate="yes" xml:space="preserve">
          <source>Branch IDs and Paths</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64a36dcf0e3cba191f6747696e76e180b3bb2837" translate="yes" xml:space="preserve">
          <source>Branch IDs are hexadecimal encoded byte arrays similar to TSUIDs but with a different format. Branch IDs always start with the ID of the tree encoded on 2 bytes. Root branches have a branch ID equal to the tree ID. Thus the root for tree &lt;code&gt;1&lt;/code&gt; would have a branch ID of &lt;code&gt;0001&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e3235b5ea2dd50cec70ec37b5e446536967a240" translate="yes" xml:space="preserve">
          <source>Branch columns have the qualifier &lt;code&gt;branch&lt;/code&gt; and contain a UTF-8 JSON encoded object describing the current branch and any child branches that may exist. A branch column may appear in any row except the collision or not matched columns. Branches in the tree definition row are the &lt;code&gt;root&lt;/code&gt; branch and link to the first level of child branches. These links are used to traverse the heirarchy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fad3089e64b54a3e911edacd869c09e7bffd0523" translate="yes" xml:space="preserve">
          <source>Bug fixes should be done in the &lt;code&gt;master&lt;/code&gt; branch</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f1ab2cb9af208e7f4ac2e0bbaeacdef61f17c98" translate="yes" xml:space="preserve">
          <source>Build System</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a23e464e799d7315a7c6eebb84b62e93206f737" translate="yes" xml:space="preserve">
          <source>Build TSDB by executing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6b306aca6da8097ab799e51b3e5652c16e75c42" translate="yes" xml:space="preserve">
          <source>Build Targets</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e505b44b5a916b0a2e1021408144616a8ee1da29" translate="yes" xml:space="preserve">
          <source>Build the repo with &lt;code&gt;./build.sh&lt;/code&gt; from the directory</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d914bfcf1c5bc9e6b83d3232349cae23d392f30" translate="yes" xml:space="preserve">
          <source>Building</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18c18285b1cdf226309921b38b1581fd897fa76a" translate="yes" xml:space="preserve">
          <source>Built-in Filters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c76797bcd150ac7deae96e785255553228d1ba6" translate="yes" xml:space="preserve">
          <source>But don't worry too much about splitting. As stated above, HBase will automatically split regions for you so over time, the data will be distributed fairly evenly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf58ffad55a43fa00e7d7cb5a1705cff4f23ba45" translate="yes" xml:space="preserve">
          <source>But what if the web server has 64 cores and you want to get the average time across all of them? Some systems allow you to specify a wild card such as &lt;code&gt;webserver01.sys.cpu.*.user&lt;/code&gt; that would read all 64 files and aggregate the results. Alternatively, you could record a new time series called &lt;code&gt;webserver01.sys.cpu.user.all&lt;/code&gt; that represents the same aggregate but you must now write '64 + 1' different time series. What if you had a thousand web servers and you wanted the average cpu time for all of your servers? You could craft a wild card query like &lt;code&gt;*.sys.cpu.*.user&lt;/code&gt; and the system would open all 64,000 files, aggregate the results and return the data. Or you setup a process to pre-aggregate the data and write it to &lt;code&gt;webservers.sys.cpu.user.all&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46255bfded1eee36557a30c07fccf3ffbb061c23" translate="yes" xml:space="preserve">
          <source>By &quot;missing&quot; we simply mean that a time series does not have a data point for the timestamp requested. Usually the data is simply time shifted before or after the requested timestamp, but it could actually be missing if the source or the TSD encountered an error and the data wasn't recorded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="069e922b9a411ac3c7bc97c3a9fd99604249db5b" translate="yes" xml:space="preserve">
          <source>By default lookups are performed against the &lt;code&gt;tsdb-meta&lt;/code&gt; table. You must enable real-time meta data creation or perform a &lt;code&gt;metasync&lt;/code&gt; using the &lt;code&gt;uid&lt;/code&gt; command in order to retreive data from a lookup. Alternatively you can lookup against the raw data table but this can take a very long time depending on how much data is in your system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f3ce813799dbcc7277eab0762f276741e4feb36" translate="yes" xml:space="preserve">
          <source>By default strict matching is disabled so that as many timeseries as possible can be captured in a tree. If you change this setting on a tree, you may want to delete the existing branches and run a re-sync.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="856c43ec65703a3cbaf83e91c4368805fd66a7f7" translate="yes" xml:space="preserve">
          <source>By default, UIDs are encoded on 3 bytes in storage, giving a maximum unique ID of 16,777,215 for each UID type. This is done to reduce the amount of space taken up in storage and to reduce the memory footprint of a TSD. For the vast majority of users, 16 million unique metrics, 16 million unique tag names and 16 million unique tag values should be enough. But if you do need more of a particular type, you can modify the OpenTSDB source code and recompile with 4 bytes or more. As of version 2.2 you can override the UID size via the config file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad3f30ae5751a9387b526023a99d6b5d68ff4b89" translate="yes" xml:space="preserve">
          <source>By default, running fsck will only report errors found by the query. No changes are made to the underlying data unless you supply the &lt;code&gt;--fix&lt;/code&gt; or &lt;code&gt;--fix-all&lt;/code&gt; flags. Generally you should run an fsck without a fix flag first and verify issues found in the log file. If you're confident in the repairs, add a fix flag. Not all errors can be repaired automatically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea4f7a50cca39c426752ae499d77d46b18ce3518" translate="yes" xml:space="preserve">
          <source>By default, static files will be returned with a header telling clients to cache them for 1 year. Any file that contains &lt;code&gt;nocache&lt;/code&gt; in the name (e.g. &lt;code&gt;queryui.nocache.js&lt;/code&gt;, the idiom used by GWT) will not include the cache header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b98d0bbb5c784ffc1936ea7a42d24a902ccbf079" translate="yes" xml:space="preserve">
          <source>By default, the &lt;code&gt;tsd.http.request.cors_domains&lt;/code&gt; list is empty and CORS is diabled. Requests are passed through without appending CORS specific headers. If an &lt;code&gt;Options&lt;/code&gt; request arrives, it will receive a 405 error message.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="527d27bebe73a2361c76956b2af8073deb5ce0dc" translate="yes" xml:space="preserve">
          <source>By default, the key lists all of the different labels vertically. The &lt;strong&gt;Horizontal Layout&lt;/strong&gt; check box will lay out the key horizontally first, then vertically if the dimensions of the graph wouldn't support it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="048f24488f257158bd4a3cd549b59657b93ea824" translate="yes" xml:space="preserve">
          <source>By default, the put endpoint will respond with a &lt;code&gt;204&lt;/code&gt; HTTP status code and no content if all data points were stored successfully. If one or more datapoints had an error, the API will return a &lt;code&gt;400&lt;/code&gt; with an error message in the content.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="288dd6e86c8cb02d37215dc0eea0bf4b8a0e892a" translate="yes" xml:space="preserve">
          <source>By default, you may only write data to a TS meta object if it already exists. TS meta data is created via the meta sync CLI command or in real-time as data points are written. If you attempt to write data to the tsmeta endpoint for a TSUID that does not exist, an error will be returned and no data will be saved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="029b70da6e2fcdaf5aa7b27ea90dca9429f1b9b4" translate="yes" xml:space="preserve">
          <source>By far the most common column are data points. These are the actual values recorded when data is sent to the TSD for storage.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="700b401ca52b1bd3071dc838bf11be9cdb19fc5f" translate="yes" xml:space="preserve">
          <source>CLI</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b2380a39d3a6c62dabb9c791b2000b500e978ba" translate="yes" xml:space="preserve">
          <source>CLI Tools</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2139aadec237bbecb581e62932f94bc3bce7a704" translate="yes" xml:space="preserve">
          <source>CORS</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2bf90245c3eae70b50309837f6647c1f83fdf58" translate="yes" xml:space="preserve">
          <source>COUNT</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ddce354c90960e6ca6993e6d231c0d2a1b1cf5a" translate="yes" xml:space="preserve">
          <source>Calculates the 50th percentile</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcc58f8821b9b95f780b24940d09e1c2b4da075b" translate="yes" xml:space="preserve">
          <source>Calculates the 75th percentile</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93f496854043e511e65aed1717cd61564e525f68" translate="yes" xml:space="preserve">
          <source>Calculates the 90th percentile</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b52815c8ef587fe873aa69da52fa3838d11862a" translate="yes" xml:space="preserve">
          <source>Calculates the 95th percentile</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9962867c1e9894eb689842af393cf572c8ac5333" translate="yes" xml:space="preserve">
          <source>Calculates the 999th percentile</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8f7f2e2d5ab05ab618713739538988d40e9dda1" translate="yes" xml:space="preserve">
          <source>Calculates the 99th percentile</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31bbef6af65f581707dad5acc6754697adcb2b00" translate="yes" xml:space="preserve">
          <source>Calculates the &lt;a href=&quot;http://en.wikipedia.org/wiki/Standard_deviation&quot;&gt;standard deviation&lt;/a&gt; across a span or time series. This function will perform linear interpolation across time series. It's useful for looking at gauge metrics. Note that even though the calculation will usually result in a float, if the data points are recorded as integers, an integer will be returned losing some precision.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="118afc2c4859cb9c311e54a7756e7b19aa1cb2d3" translate="yes" xml:space="preserve">
          <source>Calculates the average of all values across the time span or across multiple time series. This function will perform linear interpolation across time series. It's useful for looking at gauge metrics. Note that even though the calculation will usually result in a float, if the data points are recorded as integers, an integer will be returned losing some precision.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="128bb662a4037cbd22714c164be98e7db0206a47" translate="yes" xml:space="preserve">
          <source>Calculates the estimated 50th percentile with the R-3 method *</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="469a8c5ec35c918315b83b6834c4591c1c0af17a" translate="yes" xml:space="preserve">
          <source>Calculates the estimated 50th percentile with the R-7 method *</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e1efd322da430e5b5621327cf8599e149258eb9" translate="yes" xml:space="preserve">
          <source>Calculates the estimated 75th percentile with the R-3 method *</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b44f284efd4fcc0570aaab641d5e725e7ec651b" translate="yes" xml:space="preserve">
          <source>Calculates the estimated 75th percentile with the R-7 method *</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea7897efe7f2d9d6a7e2aade41a4fbdd8d0549cd" translate="yes" xml:space="preserve">
          <source>Calculates the estimated 90th percentile with the R-3 method *</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07efee310921a39b03e350062fa62e2420e07b71" translate="yes" xml:space="preserve">
          <source>Calculates the estimated 90th percentile with the R-7 method *</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d25a7c4f0d0de5c71810a3da41bed5f04eae0aeb" translate="yes" xml:space="preserve">
          <source>Calculates the estimated 95th percentile with the R-3 method *</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="145df5e4482c0fea594cc2adc2a92b4bd86bdb1b" translate="yes" xml:space="preserve">
          <source>Calculates the estimated 95th percentile with the R-7 method *</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="726169351df898936ce47ab0838d777b56a9d155" translate="yes" xml:space="preserve">
          <source>Calculates the estimated 999th percentile with the R-3 method *</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce8bc709cdd0bb10922e3d2ae93760e0456642da" translate="yes" xml:space="preserve">
          <source>Calculates the estimated 999th percentile with the R-7 method *</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f8e48656fcf39def0ca75768e033d3010a066d6" translate="yes" xml:space="preserve">
          <source>Calculates the estimated 99th percentile with the R-3 method *</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45ac83b758d3ad24e1be9928f63c038df7dfb120" translate="yes" xml:space="preserve">
          <source>Calculates the estimated 99th percentile with the R-7 method *</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dff8c96dd6da3e534f77f1c89cc48daac4376c9e" translate="yes" xml:space="preserve">
          <source>Calculates the standard deviation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4d2d10cefa25d76bfcc3ec658694f9bf9ac9fee" translate="yes" xml:space="preserve">
          <source>Calculates the sum of all data points at the specified timestamp from all of the time series or within the time span. This function does &lt;em&gt;not&lt;/em&gt; perform interpolation, instead it substitutes a &lt;code&gt;0&lt;/code&gt; for missing data points. This can be useful when working with discrete values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0edf0100f5b70d151d1aed6cbf5107b52581201" translate="yes" xml:space="preserve">
          <source>Calculates the sum of all data points from all of the time series or within the time span if down sampling. This is the default aggregation function for the GUI as it's often the most useful when combining multiple time series such as gauges or counters. It performs linear interpolation when data points fail to line up. If you have a distinct series of values that you want to sum and you do not need interpolation, look at &lt;code&gt;zimsum&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0df7ffdf914a2051419520df344b8905b53c09f0" translate="yes" xml:space="preserve">
          <source>Calculates various percentiles using a choice of algorithms. These are useful for series with many data points as some data may be kicked out of the calculation. When used to aggregate multiple series, the function will perform linear interpolation. See &lt;a href=&quot;http://en.wikipedia.org/wiki/Quantile&quot;&gt;Wikipedia&lt;/a&gt; for details. Implementation is through the &lt;a href=&quot;http://commons.apache.org/proper/commons-math/&quot;&gt;Apache Math library.&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2564114fe1379a01deb86e32c79bee3f43340271" translate="yes" xml:space="preserve">
          <source>Calculates various percentiles. When used to aggregate multiple series, the function will perform linear interpolation. Implementation is through the &lt;a href=&quot;http://commons.apache.org/proper/commons-math/&quot;&gt;Apache Math library.&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11986c5435d30453a4c88b112935353ff6c9994e" translate="yes" xml:space="preserve">
          <source>Calendar Based Downsampling - The ability to align downsampled data on Gregorian calendar boundaries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5ac3ad18b86fc619637bfeb4119fe669fd568eb" translate="yes" xml:space="preserve">
          <source>Calling this endpoint without a list of one or more TSUIDs will return all collisions in the tree. If you have a large number of timeseries in your system, the response can potentially be very large. Thus it is best to use this endpoint with specific TSUIDs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25e409d9a965254e17a8bd8078564250b4ce915c" translate="yes" xml:space="preserve">
          <source>Calling this endpoint without a list of one or more TSUIDs will return all non-matched TSUIDs in the tree. If you have a large number of timeseries in your system, the response can potentially be very large. Thus it is best to use this endpoint with specific TSUIDs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ab1baf89e4d10ff84df6022331906c1850e2ed0" translate="yes" xml:space="preserve">
          <source>Can be passed to the JSON with a POST to delete any data points that match the given query.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="404a2710214775e97f2ed142e81a592898e83301" translate="yes" xml:space="preserve">
          <source>Cardinality</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e3a12321e3405e5c0536544c34db18a0527b9c9" translate="yes" xml:space="preserve">
          <source>Cardinality also affects query speed a great deal, so consider the queries you will be performing frequently and optimize your naming schema for those. OpenTSDB creates a new row per time series per hour. If we have the time series &lt;code&gt;sys.cpu.user host=webserver01,cpu=0&lt;/code&gt; with data written every second for 1 day, that would result in 86400 rows of data. However if we have 8 possible CPU cores for that host, now we have 691200 rows of data. This looks good because we can get easily a sum or average of CPU usage across all cores by issuing a query like &lt;code&gt;start=1d-ago&amp;amp;m=avg:sys.cpu.user{host=webserver01}&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7dd3ec74a5f499751c882eacded407933d699b4" translate="yes" xml:space="preserve">
          <source>Cardinality is a mathematical term defined as the number of elements in a set. In database lingo, it's often used to refer to the number of unique items in an index. With regards to OpenTSDB it can refer to:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27a620e2126e657cdff19ed2c1268278005c6c6b" translate="yes" xml:space="preserve">
          <source>Case insensitive &lt;code&gt;not_literal_or&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d9a9c2d5e1d774695968fd6af5c025210ef5011" translate="yes" xml:space="preserve">
          <source>Case insensitive wildcard filter. An asterisk (star) with any other strings now becomes a wildcard filter shortcut</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86e0017a2388f07613e6ca24326d0acd6b91d17b" translate="yes" xml:space="preserve">
          <source>Case sensitive &lt;code&gt;literal_or&lt;/code&gt; that will return series that do &lt;strong&gt;NOT&lt;/strong&gt; match the given list of values. Efficient as it can be pre-processed by storage.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bea7fe4be278dde8ce61e8f1e46e406d34ceee6a" translate="yes" xml:space="preserve">
          <source>Case sensitive literal OR filter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="533a38eeeef68b2a6dff0543d2d23fed7b8f462e" translate="yes" xml:space="preserve">
          <source>Cassandra</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56a96c8927cd8cd6daa139bfa71222b3a6ce5d6d" translate="yes" xml:space="preserve">
          <source>Cassandra Support - Support for running OpenTSDB on legacy Cassandra clusters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f8b49b508427fb9a7ea6bc57096e67f6bacbfb4" translate="yes" xml:space="preserve">
          <source>Cassandra is an eventually consistent key value store similar to HBase and Google`s Bigtable. It implements a distributed hash map with column families originally it supported a Thrift based API very close to HBase`s. Lately Cassandra has moved towards a SQL like query language with much more flexibility around data types, joints and filters. Thankfully the Thrift interface is still there so it`s easy to convert the OpenTSDB HBase schema and calls to Cassandra at a low level through the AsyncHBase &lt;code&gt;HBaseClient&lt;/code&gt; API. &lt;a href=&quot;https://github.com/OpenTSDB/asynccassandra&quot;&gt;AsyncCassandra&lt;/a&gt; is a shim between OpenTSDB and Cassandra for trying out TSDB with an alternate backend.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="280f17223c57f92ba67f662c9ee61521c4bf10bc" translate="yes" xml:space="preserve">
          <source>Changes the name of an already assigned UID. If the UID of the given type does not exist, an error will be returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e361c7489a083524bf8c9c4d4119048da2e01605" translate="yes" xml:space="preserve">
          <source>Check for typos in the config file. Case matters for plugin names.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a79e234d748c54c067be095b6ad4d9118637246" translate="yes" xml:space="preserve">
          <source>Check that the path is readable for the user OpenTSDB is running under, i.e. check permissions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06e2fa08b3af08ee82d41603d3b1453ef8847374" translate="yes" xml:space="preserve">
          <source>Classes named &lt;code&gt;LikeThis&lt;/code&gt;, starting with upper case letters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e43aa18b679df3e48167e5a83ae68b497d556bb" translate="yes" xml:space="preserve">
          <source>Clears all internal caches such as the UID to name and name to UID maps. It should be used if you have renamed a metric, tagk or tagv.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0aa3138ab8d21ac842376245bd7f7876dfe49cd7" translate="yes" xml:space="preserve">
          <source>Click the &lt;strong&gt;Autoreload&lt;/strong&gt; check box to automatically refresh your graph periodically. This can be very useful for monitoring displays where you want to have the graph displayed for a number of people. When checked, the &lt;strong&gt;End&lt;/strong&gt; box will disappear and be replaced by an &lt;strong&gt;Every:&lt;/strong&gt; box that lets you choose the refresh rate in seconds. The default is to refresh every 15 seconds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d48ec1b783974335ea4027af2bb69c6c40a0da2" translate="yes" xml:space="preserve">
          <source>Clicking a time box will pop-up a utility to help you choose a time. Use the arrows at the top left of the box to navigate through the months, then click on a date. The relative links in the upper right are helpers to jump forward or backward 1 minute, 10 minutes, 1 hour, 1 day, 1 week or 30 days. The &lt;em&gt;now&lt;/em&gt; link will update the time to the current time on your local system. The &lt;strong&gt;HH&lt;/strong&gt; buttons let you choose an hour along with &lt;em&gt;AM&lt;/em&gt; or &lt;em&gt;PM&lt;/em&gt;. The MM buttons let you choose a normalized minute. You can also cut and paste a time into the any of the boxes or edit the times directly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28e22fe3dde53ce03b40861a4b22d205384bde66" translate="yes" xml:space="preserve">
          <source>Clients</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a499043f281fd1a7d4a75aa8a23169060ae09ecc" translate="yes" xml:space="preserve">
          <source>Clone the GIT repo to a location such as &lt;code&gt;/home/$USER/opentsdb&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adac69379a626c2436948a4ef1792c7d719ef929" translate="yes" xml:space="preserve">
          <source>Code</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7c8d7bac2d78a06cab00ee62a390374e57d9c69" translate="yes" xml:space="preserve">
          <source>Collecting lots of metrics with tcollector</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc5baf09e93352e16ba8ee714eea67c2892189ce" translate="yes" xml:space="preserve">
          <source>Collectors bundled with &lt;code&gt;tcollector&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="074d523455f5293bff66d0a482d6317f502f27e4" translate="yes" xml:space="preserve">
          <source>Collectors in tcollector can be written in any language. They just need to be executable and output the data to stdout. Tcollector will handle the rest. The collectors are placed in the &lt;code&gt;collectors&lt;/code&gt; directory. Tcollector iterates over every directory named with a number in that directory and runs all the collectors in each directory. If you name the directory &lt;code&gt;60&lt;/code&gt;, then tcollector will try to run every collector in that directory every 60 seconds. The shortest supported interval is 15 seconds, you should use a long-running collector in the 0 folder for intervals shorter than 15 seconds. TCollector will sleep for 15 seconds after each time it runs the collectors so intervals of 15 seconds are the only actually supported intervals. For example, this would allow you to run a collector every 15, 30, 45, 60, 75, or 90 seconds, but not 80 or 55 seconds. Use the directory &lt;code&gt;0&lt;/code&gt; for any collectors that are long-lived and run continuously. Tcollector will read their output and respawn them if they die. Generally you want to write long-lived collectors since that has less overhead. OpenTSDB is designed to have lots of datapoints for each metric (for most metrics we send datapoints every 15 seconds).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44c02412db4c3bf5e8a352a6e9b672cd63e3c120" translate="yes" xml:space="preserve">
          <source>Collisions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="024fb08e8c7ac06fa6f488d1cf734f7787fc45bb" translate="yes" xml:space="preserve">
          <source>Columns with 2 byte qualifiers have an offset in seconds. The first 12 bits of the qualifier represent an integer that is a delta from the timestamp in the row key. For example, if the row key is normalized to &lt;code&gt;1292148000&lt;/code&gt; and a data point comes in for &lt;code&gt;1292148123&lt;/code&gt;, the recorded delta will be &lt;code&gt;123&lt;/code&gt;. The last 4 bits are format flags</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65193db62f8d4def52968f23e948b3999c8a2481" translate="yes" xml:space="preserve">
          <source>Columns with 4 byte qualifiers have an offset in milliseconds. The first 4 &lt;em&gt;bits&lt;/em&gt; of the qualifier will always be set to &lt;code&gt;1&lt;/code&gt; or &lt;code&gt;F&lt;/code&gt; in hex. The next 22 bits encode the offset in milliseconds as an unsigned integer. The next 2 bits are reserved and the final 4 bits are format flags.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="778ecfc07e503aef3ee6f16abcf883a703278b9d" translate="yes" xml:space="preserve">
          <source>Command Format</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8be9d95a26d29acd9e204b001c4255ad646bef34" translate="yes" xml:space="preserve">
          <source>Command line parameters are loaded, overriding config file and default values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d127fcb91f3944a8274b0f8d8fdf8e472ba8107" translate="yes" xml:space="preserve">
          <source>Common CLI Parameters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac905c69754fe8b403d0f44c613d248f88995c85" translate="yes" xml:space="preserve">
          <source>Common Parameters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="499b0337286d5b9700a8e581b99cf3dad66fac9a" translate="yes" xml:space="preserve">
          <source>Common error response codes include:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f54d7a5814d32c871ff6e49b9546e00fc7ce904c" translate="yes" xml:space="preserve">
          <source>Common parameters include:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a85359623e2429c9b9d1d30b225239522126ee2" translate="yes" xml:space="preserve">
          <source>Compact Row</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23f4cc1e70a9768b3c9e64fdbeb45a1aa0f7349b" translate="yes" xml:space="preserve">
          <source>Compacted Column Format</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f57ac4dc3436bad8a524a87652a645c0fd867148" translate="yes" xml:space="preserve">
          <source>Compacted Last Byte Error</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffbb6ec1b2b484a559be58cbc0b2a76183c8e3a1" translate="yes" xml:space="preserve">
          <source>Compaction</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3cf46dedf7b6ce8e8c8817c5222bcb3c589ffe9" translate="yes" xml:space="preserve">
          <source>Compaction Tuning - New parameters allow for tuning the TSD compaction process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a02a997b7cb14d1266294a486d9c973978db299" translate="yes" xml:space="preserve">
          <source>Compactions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcd4ad6cf1e1b0e9fe8c0f7fe562461f06aebb38" translate="yes" xml:space="preserve">
          <source>Compactions/Appends - The current schema does not support compacted or append data types. These can be implemented by denoting a single column per aggregation function (e.g. &lt;code&gt;SUM&lt;/code&gt;, &lt;code&gt;COUNT&lt;/code&gt;) and storing the offsets and values in the column value similar to the main data table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86f46966070e71db1ab7fb3f0accae4139fb3e31" translate="yes" xml:space="preserve">
          <source>Compacts non-compacted rows during a repair.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="212bafcc5830284f332007c47533d74ddef72405" translate="yes" xml:space="preserve">
          <source>Compilation requirements include:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a7fb591be192fc136247e90c1a4df4b2793613c" translate="yes" xml:space="preserve">
          <source>Compiling From Source</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78211dce906f1674d449a092ae74bd9c0cffe4ec" translate="yes" xml:space="preserve">
          <source>Compressed Requests</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b73d52679f87ce5cb222bdda100c5acf27ac56dc" translate="yes" xml:space="preserve">
          <source>Conf API Endpoints</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="754164850f38c1ecdaf6b8ed894cb192bc36c5f4" translate="yes" xml:space="preserve">
          <source>Configuration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee7451289d1fa17976baf9de9126ed41171aac3a" translate="yes" xml:space="preserve">
          <source>Configuration File</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f04d0bfa6c9899dc1ce2bdb6a2a6b4d9542dd80f" translate="yes" xml:space="preserve">
          <source>Configuration File - A key/value file shared by the TSD and command line tools</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b291f5f3bb943b3c3b9da2772448abe0cd44ff2" translate="yes" xml:space="preserve">
          <source>Configuration file values are loaded, overriding default values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="225d615f60417290d13438844513fb0c5681f0f1" translate="yes" xml:space="preserve">
          <source>Connections will be closed after a period of inactivity, typically 5 minutes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edb7861f190be64ab7c7a39786a00727bb16847d" translate="yes" xml:space="preserve">
          <source>Constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="352d1d8ccf846985bffcdccbb05ae5d40033ef86" translate="yes" xml:space="preserve">
          <source>Copy and paste an existing dependency section and modify it for your variables</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb94a3fbb4ad2afe99abccd3379762ebf3284bd0" translate="yes" xml:space="preserve">
          <source>Copy the file &lt;code&gt;./build/src/BuildData.java&lt;/code&gt; from the GIT repo, post build, to your &lt;code&gt;./src/net/opentsdb/&lt;/code&gt; directory</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66e12969c225cc6d65e18210488acb826eba907e" translate="yes" xml:space="preserve">
          <source>Count</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80d8246476df98e3e4988a487220748cf919233f" translate="yes" xml:space="preserve">
          <source>Count and Percentiles - New aggregator functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4018045cfb458b2734d2b09cf762c2567878c41" translate="yes" xml:space="preserve">
          <source>Counter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74ee09321d8ae00f0d4ed124c322370ed6c35c62" translate="yes" xml:space="preserve">
          <source>Counter Column</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="deb1b513a7df5fa79b65e2a295546deabf82b458" translate="yes" xml:space="preserve">
          <source>Counters and Rates</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d01551530ba2ef063b488d9cea009931d45d466" translate="yes" xml:space="preserve">
          <source>Create Tables</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb81dc98796222e0848ddd0e1b0f65d1f6f09a49" translate="yes" xml:space="preserve">
          <source>Create Your First Metrics</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cab9c81767df43b87ba5db04987f9dfd012caccd" translate="yes" xml:space="preserve">
          <source>Create a &lt;code&gt;META-INF&lt;/code&gt; directory under your &lt;code&gt;src&lt;/code&gt; directory. Some IDEs can automatically generate this</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed977cc8db5bbe8a3a41e8553ce0a83d92fd1503" translate="yes" xml:space="preserve">
          <source>Create a &lt;code&gt;net&lt;/code&gt; directory under &lt;code&gt;./src&lt;/code&gt; so that you have &lt;code&gt;./src/net&lt;/code&gt; (some IDEs may create a &lt;code&gt;./src/java&lt;/code&gt; dir, so add &lt;code&gt;./src/java/net&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a052f2bb302d01decf3781fefd2a4246825173e" translate="yes" xml:space="preserve">
          <source>Create a &lt;code&gt;services&lt;/code&gt; directory under &lt;code&gt;META-INF&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42d4bed4475f9192b2713f0da6b5d08713e9a1da" translate="yes" xml:space="preserve">
          <source>Create a Graph</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85682f81c1d336a3d9e3d606222a8ef6ca95dd67" translate="yes" xml:space="preserve">
          <source>Create a new Java project with a name like &lt;code&gt;opentsdb_dev&lt;/code&gt; so that it winds up in &lt;code&gt;/home/$USER/opentsdb_dev&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc85ae78ad1545cad1bc792da7e4a5ea9df34da8" translate="yes" xml:space="preserve">
          <source>Create a new tree via the HTTP API</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ea3b45a59918bd8b8953f3b05c1fa69a58a0fdc" translate="yes" xml:space="preserve">
          <source>Create a symlink to the GIT repo's &lt;code&gt;./src/tsd/client&lt;/code&gt; directory from &lt;code&gt;./src/tsd/client&lt;/code&gt;. E.g. &lt;code&gt;ln -s /home/$USER/opentsdb/src/tsd/client /home/$USER/opentsdb_dev/src/tsd/client&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f300e90886509eab53cd00356d128feea1ff6a1f" translate="yes" xml:space="preserve">
          <source>Create a symlink to the GIT repo's &lt;code&gt;./src&lt;/code&gt; directory from &lt;code&gt;./src/net/opentsdb&lt;/code&gt;. E.g. &lt;code&gt;ln -s /home/$USER/opentsdb/src /home/$USER/opentsdb_dev/src/net/opentdsb&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f9280151590463eccfd8d637b56d540d28904e6" translate="yes" xml:space="preserve">
          <source>Create a symlink to the GIT repo's &lt;code&gt;./test&lt;/code&gt; directory from &lt;code&gt;./test/net/opentsdb&lt;/code&gt;. E.g. &lt;code&gt;ln -s /home/$USER/opentsdb/test /home/$USER/opentsdb_dev/test/net/opentdsb&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78c0038e1502a8c116af87e7f9072ca0ed055279" translate="yes" xml:space="preserve">
          <source>Create or edit the &lt;code&gt;include.mk&lt;/code&gt; file and copy the header info from another directory's file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bddd757c8f336668427583b88dc2d4a5ea119d5b" translate="yes" xml:space="preserve">
          <source>Create the proper keyspsaces and column families by using the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94bc051560170ed93562cba96b016a8fb26a469a" translate="yes" xml:space="preserve">
          <source>Creating a Cloud BigTable Cluster</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="036e7c2f936220c3e38889133806350afa085633" translate="yes" xml:space="preserve">
          <source>Cross Origin Resource Sharing - For the API so you can make AJAX calls easily</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cddaee12539d428b1753be2a95d391348a9fcc69" translate="yes" xml:space="preserve">
          <source>Cumulative time spent aggregating data points including downsampling, multi-series aggregation and rate calculations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fd1db2f2623c571e8fd5ad77cc55dbe74da9f95" translate="yes" xml:space="preserve">
          <source>Cumulative time spent resolving UIDs from row keys to strings for use with regex and wildcard filters. If neither filter is used this value should be zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2be1e3b4a3f2c0478cacdcbeace818884a83d2b2" translate="yes" xml:space="preserve">
          <source>Cumulative time spent resolving UIDs to strings for serialization.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a52b1cc0127736ecad5e2c682e7365f65e5e7564" translate="yes" xml:space="preserve">
          <source>Cumulative time spent running each row through the compaction code to create a single column and manage duplicate values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21bddefb0a4c18cf66b90ff3f79f5d7e55e5d953" translate="yes" xml:space="preserve">
          <source>Cumulative time spent sorting scanner results into groups for future aggregation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8060344d9b896c86f1d6bcd8fd0bbe381b11d8d" translate="yes" xml:space="preserve">
          <source>Cumulative time spent waiting on HBase to return data. (Includes AsyncHBase deserialization time).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="566cc1d13931eec3dd92d89a059f539bc0071740" translate="yes" xml:space="preserve">
          <source>Curly brace on the same line as &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, etc</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4ca94f860ab26dfa33a9f27c3ade2207aaf419b" translate="yes" xml:space="preserve">
          <source>Current timestamp</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0aecec00b347b9b347bbb0bb7935d1a405d79022" translate="yes" xml:space="preserve">
          <source>Currently OpenTSDB offers a simple built-in GUI accessible by opening your browser and navigating to the host and port where the TSD is running. For example, if you are running a TSD on your local computer on port 4242, simply navigate to &lt;code&gt;http://localhost:4242&lt;/code&gt;. While the GUI won't win awards for beauty, it provides a quick means of building a useful graph with the data in your system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df0c575bef752f42ca552a1847302160dad2cb06" translate="yes" xml:space="preserve">
          <source>Currently supported expressions include:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e4d445cd6ea28d4cfe4aadbf7202e3ca83fc805" translate="yes" xml:space="preserve">
          <source>Currently the TSDs do not generate the rollup or pre-aggregated data for you. The primary reason for this is that OpenTSDB is meant to handle huge amounts of time series data so individual TSDs are focused on getting their data into storage as quickly as possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fac80af932719a663798262653fa23f644a4a7a1" translate="yes" xml:space="preserve">
          <source>Currently this is not repaired. You can manually set the last byte to 0 or 1 to prevent the error from being thrown. The &lt;code&gt;--delete-bad-compacts&lt;/code&gt; flag will not remove these columns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8c0072bd57c36249f4ae16fe7c5c58679c43ff5" translate="yes" xml:space="preserve">
          <source>Custom fields cannot be passed via query string. You must use the &lt;code&gt;POST&lt;/code&gt; or &lt;code&gt;PUT&lt;/code&gt; verbs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6f5636098cd458ce9d22939f8e3e8deab0e9bd0" translate="yes" xml:space="preserve">
          <source>DELETE</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bb2cdc37f157cdb8e05d86eb04ce25315c03381" translate="yes" xml:space="preserve">
          <source>DELETE - Delete a rule</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e949695f0ea37cba96d10ff17caf3e2162b5649" translate="yes" xml:space="preserve">
          <source>DELETE - Delete an annotation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7174d9e37837d1012b0844d6692cf57731e5095" translate="yes" xml:space="preserve">
          <source>DELETE - Delete annotations within a time range</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57225f76b15e95edd5e36c27667c79137f2e9c07" translate="yes" xml:space="preserve">
          <source>DELETE - Delete the results of a tree and/or the tree definition</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10aa26ef70ae40a58edd8d3c04f3c96a9a2fe618" translate="yes" xml:space="preserve">
          <source>DELETE - Deletes the TS meta data</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cfb2c48a1cce17644f9a95b417bade7b9b8253e" translate="yes" xml:space="preserve">
          <source>DELETE - Deletes the UID meta data</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="832feb34cb37fb6810a4df23ffb040d637c1aead" translate="yes" xml:space="preserve">
          <source>Data Point</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aefe84d10c73c637d7727d3457c3a4972f987086" translate="yes" xml:space="preserve">
          <source>Data Point Columns</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f6ffc3c2b02541c7cd3445bd5a6a06da0c16bb3" translate="yes" xml:space="preserve">
          <source>Data Specification</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2746acd3baa99d270c763dcff32a9a4ef634f7fe" translate="yes" xml:space="preserve">
          <source>Data Table Schema</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab7f244fc5171be63484d8e40c59808ea2c3e492" translate="yes" xml:space="preserve">
          <source>Data Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1935f521a70077f6bebf2d36fdb802a8c9e96f93" translate="yes" xml:space="preserve">
          <source>Data Type - The type of data you need to supply. E.g. &lt;code&gt;String&lt;/code&gt; should be text, &lt;code&gt;Integer&lt;/code&gt; must be a whole number (positive or negative), &lt;code&gt;Float&lt;/code&gt; should be a decimal number. The data type may also be a complex object such as an array or map of values or objects. If you see &lt;code&gt;Present&lt;/code&gt; in this column then simply adding the parameter to the query string sets the value to &lt;code&gt;true&lt;/code&gt;, the actual value of the parameter is ignored. For example &lt;code&gt;/api/put?summary&lt;/code&gt; will effectively set &lt;code&gt;summary=true&lt;/code&gt;. If you request &lt;code&gt;/api/put?summary=false&lt;/code&gt;, the API will still consider the request as &lt;code&gt;summary=true&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c18842877f84be9bb3ae10673c4e60242f22c160" translate="yes" xml:space="preserve">
          <source>Data Types</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aac1e67816d26b0da9420f1b7e9e819eb057fd71" translate="yes" xml:space="preserve">
          <source>Data about each time series in the result set. The fields are below</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d54ecc818bfe978c373e1c7f85a04ff85454c4da" translate="yes" xml:space="preserve">
          <source>Data can be written to OpenTSDB with second or millisecond resolution. Timestamps must be integers and be no longer than 13 digits (See first [NOTE] below). Millisecond timestamps must be of the format &lt;code&gt;1364410924250&lt;/code&gt; where the final three digits represent the milliseconds. Applications that generate timestamps with more than 13 digits (i.e., greater than millisecond resolution) must be rounded to a maximum of 13 digits before submitting or an error will be generated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ba2278dfe2e1733c99207fa9e48e3a9c74f3504" translate="yes" xml:space="preserve">
          <source>Data is printed to stdout with one data point per line. If one or more Gnuplot options were specified, then scripts and data files for each query will be written to the configured temporary directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45a9f71072d9a1b9008aee7eb04e3672414c2732" translate="yes" xml:space="preserve">
          <source>Data points processed up to the error are written to storage. You should edit the file and clear all data points up to the line where the error occurred. If you fix the line and restart the import, conflicts may occur with the existing data. Future updates to OpenTSDB will handle this situation gracefully.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40d3d3bf1e43bfb2d250e48100836090aab9f73c" translate="yes" xml:space="preserve">
          <source>Data represents a &lt;em&gt;raw&lt;/em&gt; or &lt;em&gt;non-pre-aggregated&lt;/em&gt;&lt;strong&gt;rollup&lt;/strong&gt; over the interval.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c9e7c3c70dd21d84a45a0f1ac265417ddcaf80f" translate="yes" xml:space="preserve">
          <source>Data represents a &lt;em&gt;raw&lt;/em&gt;&lt;strong&gt;pre-aggregated&lt;/strong&gt; value that has not been rolled up over time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cb62a4cb3b42581be8ef11c6b8598242ed02bd6" translate="yes" xml:space="preserve">
          <source>Data represents a &lt;em&gt;rolled up&lt;/em&gt;&lt;em&gt;pre-aggregated&lt;/em&gt; value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc3cd317658d75b3b8eff8a7a141166ec1e782cd" translate="yes" xml:space="preserve">
          <source>Date Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bec5093fae4de651755330a0d2e85f3ba21c4d2" translate="yes" xml:space="preserve">
          <source>Dates and Times</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37119909e94e48dd96c1762d8bc7f6b757f9bed9" translate="yes" xml:space="preserve">
          <source>Debian Package</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9bb8f33e47bfeec0bb7d587dda4bc7132067699" translate="yes" xml:space="preserve">
          <source>Dedicate a pair of high memory, low disk space servers for the Name Node. Set them up for high availability using something like Heartbeat and Pacemaker.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62386e77d59458507a5c155602d11e703c4921ef" translate="yes" xml:space="preserve">
          <source>Deduplication</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="808d7dca8a74d84af27a2d6602c3d786de45fe1e" translate="yes" xml:space="preserve">
          <source>Default</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="062128af6e787f0cc317918f28e4d3fb93034ffe" translate="yes" xml:space="preserve">
          <source>Default - The default value of the &lt;code&gt;Optional&lt;/code&gt; parameter. If the data is required, this field will be blank.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed9ae514cfa2d9036350bed6e3de58b70a34226a" translate="yes" xml:space="preserve">
          <source>Default values are loaded</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15225baac48fc3d689cb2b0f74b936eff4339ff7" translate="yes" xml:space="preserve">
          <source>Definitions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe5029cb19eda705006fe8d5ea39be0ffe21bcee" translate="yes" xml:space="preserve">
          <source>Delete Data And UIDs - Allow for deleting data at query time as well as removing UIDs from the system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="571540e69fc000b91d94dfc7e36ee3a7fa31f666" translate="yes" xml:space="preserve">
          <source>Deleting UIDs can be tricky as of version 2.2. Deleting a metric is safe in that users may no longer query for the data and it won't show up in calls to the suggest API. However deleting a tag name or value can cause queries to fail. E.g. if you have time series for the metric &lt;code&gt;sys.cpu.user&lt;/code&gt; with hosts &lt;code&gt;web01&lt;/code&gt;, &lt;code&gt;web02&lt;/code&gt;, &lt;code&gt;web03&lt;/code&gt;, etc. and you delete the UID for &lt;code&gt;web02&lt;/code&gt;, any query that would scan over data that includes the series &lt;code&gt;sys.cpu.user host=web02&lt;/code&gt; will throw an exception to the user because the data remains in storage. We highly recommend you run an FSCK with a query to repair such issues.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b0f7087e96b4937a547a7fa3d0243e0ea542480" translate="yes" xml:space="preserve">
          <source>Deleting a UID will not delete the underlying data associated with the UIDs (we're working on that). For metrics this is safe, it won't affect queries. But for tag names and values, if a query scans over data containing the old UID, the query will fail with an exception because it can no longer find the name mapping.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38db16bfb02b0a8c1db7634c41f922b6253d45b3" translate="yes" xml:space="preserve">
          <source>Deleting a meta data entry will not delete the UID assignment nor will it delete any data points or associated timeseries information. Deletion only removes the specified meta data object, not the actual value. If you query for the same UID, you'll see the default meta data with empty fields.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26775109ac82a4043edd30b6f5c88991b9f0ddaa" translate="yes" xml:space="preserve">
          <source>Deleting data is permanent. Also beware that when deleting, some data outside the boundaries of the start and end times may be deleted as data is stored on an hourly basis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0106767a8c8c6fb941ba24489b7b9ef5ff70a808" translate="yes" xml:space="preserve">
          <source>Deletions will also delete any Annotations or non-TSDB related data in a row.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14e54691afcdf1664669f2bd0b159820b6de34dd" translate="yes" xml:space="preserve">
          <source>Depending on the endpoint called, the output will change slightly. However common fields include:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="152c8682a781858e41ca0c35a13ffbfc4dd7b856" translate="yes" xml:space="preserve">
          <source>Depends on the second message</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e71eb3a83f14bec2a411635a9d6d9f9c19a6037" translate="yes" xml:space="preserve">
          <source>Deprecated API</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc9922d0d2cb9bf665c52397891c381ccbffb532" translate="yes" xml:space="preserve">
          <source>Deprecated HTTP API</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ab0e361991b31b77ad1a5364285734f14866ba5" translate="yes" xml:space="preserve">
          <source>Depth of the branch within the tree, starting at &lt;em&gt;0&lt;/em&gt; for the root branch</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55f8ebc805e65b5b71ddafdae390e3be2bcd69af" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78f6481c0b917f92c806a48d4dfb8546c6bbdc5c" translate="yes" xml:space="preserve">
          <source>Description - A detailed description of the parameter including what values are allowed if applicable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bc41b9ee6bfbb8e14237e4969c1542abbe03c82" translate="yes" xml:space="preserve">
          <source>Detailed notes about the event</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eeef69507a2a39e40c75154c512a7c3c358d38ac" translate="yes" xml:space="preserve">
          <source>Detailed notes about the rule</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="115da8ffa985c6fad805f83ee789bb337fc6136a" translate="yes" xml:space="preserve">
          <source>Detailed notes about the tree</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4225a1ffa7758aff9545c0d7135a1726c5b81c3b" translate="yes" xml:space="preserve">
          <source>Detailed notes about what the UID represents</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc3decbb93847518f1a049dcf49d0d7c6560bcc6" translate="yes" xml:space="preserve">
          <source>Details</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79999444f383a5fa84d22e6ff62c6793a8450acd" translate="yes" xml:space="preserve">
          <source>Details about each of the memory pools, particularly when used with a generational collector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="caab2175d49676e8b7186050b3bb87f233e63733" translate="yes" xml:space="preserve">
          <source>Details about the JVM including version and vendor, start timestamp (in millieconds) and the uptime.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="befbe4f981910b37975e0e0dd985f2b8b44020e3" translate="yes" xml:space="preserve">
          <source>Details about the error, often a stack trace</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="245d4d734115c8ff3e7e147f8315b68190676d2f" translate="yes" xml:space="preserve">
          <source>Details about the scanner including the table, start and end keys as well as filters used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f67bc6dad74f08d4d8b6187fc92476b5a2aa4a2b" translate="yes" xml:space="preserve">
          <source>Dev</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c17aadf5117487aab7bc50cbf056caf3977cc31" translate="yes" xml:space="preserve">
          <source>Development</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6eb83db11b8d4a93bc6f30a89664b7db305740e5" translate="yes" xml:space="preserve">
          <source>Disable Meta Data and Real Time Publishing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="574ff9b0c49cdeb5f5508548ae0cab44fecee038" translate="yes" xml:space="preserve">
          <source>Display</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34861fcc8617b0ab5730175b91df91cc76865221" translate="yes" xml:space="preserve">
          <source>Display Formatter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a604d9ff228404b1dbbfe60e19e99c2d45806407" translate="yes" xml:space="preserve">
          <source>Distributed HBase</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9e1b13da982b8453a01cfa612ba6e3bd0da83db" translate="yes" xml:space="preserve">
          <source>Distributed Percentile - Store histograms (or sketches) for calculating proper percentiles over multiple sources.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd4cd43b7a46b1287d302480d7139b3cc0581cb6" translate="yes" xml:space="preserve">
          <source>Distributed Queries - Based on the great work of Turn on &lt;a href=&quot;https://github.com/turn/splicer&quot;&gt;Splicer&lt;/a&gt; we have a distributed query layer to split queries amongst multiple TSDs for greater throughput.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d4d216f360c31288ca75e0f97424fd33944c0a3" translate="yes" xml:space="preserve">
          <source>Do not rely on CORS for security. It is exceedingly easy to spoof a domain in an HTTP request and OpenTSDB does not perform reverse lookups or domain validation. CORS is only implemented as a means to make it easier JavaScript developers to work with the API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8d5e11c9c3ec981086abb1bd60d8747cfac6e0a" translate="yes" xml:space="preserve">
          <source>Do not write &lt;strong&gt;Annotations&lt;/strong&gt; or &lt;strong&gt;Data point with Millisecond Timestamps&lt;/strong&gt; while you run a mixture of 1.x and 2.x. Because these data are stored in the same rows as regular data points, they can affect compactions and queries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c523e1994911b935d080dd0eae8f8d0d0fa39131" translate="yes" xml:space="preserve">
          <source>Do that for each of the dependencies that were downloaded by the build script</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="faf05290781c1e0de4dc34697843de205c92b444" translate="yes" xml:space="preserve">
          <source>Docker Images</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e9cf3221a30246219863f1d2366e36cb580debc" translate="yes" xml:space="preserve">
          <source>Documentation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1144bf8ee158074ee405959a144637d0258139d" translate="yes" xml:space="preserve">
          <source>Documentation for OpenTSDB 2.3</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb7a62e3c8551feb7c6525d60b079336de86545e" translate="yes" xml:space="preserve">
          <source>Does all of the connection management work of sending data to the TSD</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de68887428e83604aa3d9a7369b1b8aa6a22adcb" translate="yes" xml:space="preserve">
          <source>Does de-duplication of repeated values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2990b6e532f726ba9113eb8c6215d6204d768e9c" translate="yes" xml:space="preserve">
          <source>Don't add dependencies to the core OpenTSDB library unless absolutely necessary</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="222812038bed335e145dd8059679119818ab9a95" translate="yes" xml:space="preserve">
          <source>Don't try to write directly to the underlying storage system, e.g. HBase. Just don't. It'll get messy quickly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="112a24a29ce5e7854a735fdba45ec92c8682ed69" translate="yes" xml:space="preserve">
          <source>Don't use too many tags, keep it to a fairly small number, usually up to 4 or 5 tags (By default, OpenTSDB supports a maximum of 8 tags).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81581597044514bf54d4f97266022fc991f3915e" translate="yes" xml:space="preserve">
          <source>Double</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc86617077d738c571c947ccc5ddad4dde2c9a4e" translate="yes" xml:space="preserve">
          <source>Down Sampling</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c873df2d34dea16b6cef0e9cdcc41d42c5701410" translate="yes" xml:space="preserve">
          <source>Down sampling can be used at query time to reduce the number of data points returned so that you can extract better information from a graph or pass less data over a connection. Down sampling requires an &lt;strong&gt;aggregation&lt;/strong&gt; function and a &lt;strong&gt;time interval&lt;/strong&gt;. The aggregation function is used to compute a new data point across all of the data points in the specified interval with the proper mathematical function. For example, if the aggregation &lt;code&gt;sum&lt;/code&gt; is used, then all of the data points within the interval will be summed together into a single value. If &lt;code&gt;avg&lt;/code&gt; is chosen, then the average of all data points within the interval will be returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fa8054281480eff58abbe016d6b224c38ba7070" translate="yes" xml:space="preserve">
          <source>Downgrades within a major version are idempotent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7b5eb5c2aeeadc23bc3df99a084331cd87179e1" translate="yes" xml:space="preserve">
          <source>Downgrading</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1554bbcdb761cacf3b772e5659a6fcd0f1a197c4" translate="yes" xml:space="preserve">
          <source>Download the latest version using &lt;code&gt;git clone&lt;/code&gt; command or download a release from the site or Github. Then just run the &lt;code&gt;build.sh&lt;/code&gt; script. This script helps run all the processes needed to compile OpenTSDB: it runs &lt;code&gt;./bootstrap&lt;/code&gt; (only once, when you first check out the code), followed by &lt;code&gt;./configure&lt;/code&gt; and &lt;code&gt;make&lt;/code&gt;. The output of the build process is put into a &lt;code&gt;build&lt;/code&gt; folder and JARs required by OpenTSDB will be downloaded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08547196fe86279e84f55cf08eb0dee836164f30" translate="yes" xml:space="preserve">
          <source>Downsample specifications const if an interval, a unit of time, an aggregator and (as of 2.2) an optional fill policy. The format of a downsample spec is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fec8882267d2f051be2bbf26a526016b0311eccc" translate="yes" xml:space="preserve">
          <source>Downsampler</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5349e603ad36b6a06486ecd1f17c0d91f41b0fe" translate="yes" xml:space="preserve">
          <source>Downsampling</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92cdb604209ef564b8339bf20bc31877daec1efd" translate="yes" xml:space="preserve">
          <source>Downsampling - Timestamps are now aligned on modulus boundaries, reducing the need to interpolation across series.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb7360add0a09a205d2be110f75ef831f76484da" translate="yes" xml:space="preserve">
          <source>Downsampling Disabled</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="892243d810337b79fa2a3f300c16236b063e53c2" translate="yes" xml:space="preserve">
          <source>Downsampling Enabled</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdb96e171dbbc599b078f7684fa91d9fe843e15d" translate="yes" xml:space="preserve">
          <source>Drop the script into your Nagios path and set up a command like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05903104949de3ef0e8b06f12874c53ac4869818" translate="yes" xml:space="preserve">
          <source>Due to the flexibility of rule sets and the wide variety of metric, tag name and value naming, it is almost inevitable that two different TSMeta entries would try to create the same leaf on a tree. Each branch can only have one leaf with a given display name. For example, if a branch has a leaf named &lt;code&gt;user&lt;/code&gt; with a tsuid of &lt;code&gt;010101&lt;/code&gt; but the tree tries to add a new leaf named &lt;code&gt;user&lt;/code&gt; with a tsuid of &lt;code&gt;020202&lt;/code&gt;, the new leaf will not be added to the tree. Instead, a &lt;em&gt;collision&lt;/em&gt; entry will be recorded for the tree to say that tsuid &lt;code&gt;0202020&lt;/code&gt; collided with an existing leaf for tsuid &lt;code&gt;010101&lt;/code&gt;. The HTTP API can then be used to query the collision list to see if a particular TSUID did not appear in the tree due to a collision.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bae8c229e813419401f73b292fe9a869b1952f66" translate="yes" xml:space="preserve">
          <source>Due to the nature of the OpenTSDB storage schema, metrics with higher cardinality may take longer return results during query execution than those with lower cardinality. E.g. we may have metric &lt;code&gt;foo&lt;/code&gt; with the tag name &lt;code&gt;datacenter&lt;/code&gt; and there are 100 possible values for datacenter. Then we have metric &lt;code&gt;bar&lt;/code&gt; with the tag &lt;code&gt;host&lt;/code&gt; and 50,000 possible values for host. Metric &lt;code&gt;bar&lt;/code&gt; has a higher cardinality than &lt;code&gt;foo&lt;/code&gt;: 50,000 possible time series for &lt;code&gt;bar&lt;/code&gt; an only 100 for &lt;code&gt;foo&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="883581f0b6ba299b8f27db1dce4aae05f5f57176" translate="yes" xml:space="preserve">
          <source>Due to the use of encoding length and type for datapoints in qualifiers, it's possible to record a data point for the same timestamp with two different qualifiers. For example if you post an integer value for time &lt;code&gt;1&lt;/code&gt; and then post a float value for time &lt;code&gt;1&lt;/code&gt;, two different columns will be created. Duplicates can also happen if a row has been compacted and the TSD writes a new stand-alone column that matches a timestamp in the compacted column. At query time, an exception will be thrown as TSD does not know which value is the correct one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0f72a6a04c33d1341fbac94bd942d525f351c1d" translate="yes" xml:space="preserve">
          <source>Duplicate Data Points</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="191407d260a5b3ba503c78765f2adca0ff772fc7" translate="yes" xml:space="preserve">
          <source>Duplicate Timestamps</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="732bd85a8de06ce68128a9462286454cd24d50c6" translate="yes" xml:space="preserve">
          <source>Duplicate forward metrics mapping bar -&amp;gt; 000002 and null -&amp;gt; foo</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d0a202704f2ad1e09a7bbb926a4fa0ebfd374b1" translate="yes" xml:space="preserve">
          <source>Duplicates - Handle duplicate data points at query time or during FSCK</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35af24a274c184a21b47c7a70a1dc0ca6bbf4929" translate="yes" xml:space="preserve">
          <source>During a lookup, the results will be printed to standard out. Note that if you have logging enabled, messages may be interspersed with the results. Set the logging level to WARN or ERROR in the &lt;code&gt;logback.xml&lt;/code&gt; configuration to supress these warnings. You may want to run the lookup in the background and capture standard out to a file, particularly when running lookups against the data table as these may take a long time to complete.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99014e4beb8d8306e84d61f1771532f8fe8f47e0" translate="yes" xml:space="preserve">
          <source>During a run, progress will be reported every 5 seconds so that you know the utility is still working. You should see lines similar to the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e7bee1a237d69e2ca679b9cce78ac1ae96f3d38" translate="yes" xml:space="preserve">
          <source>During region splits or region migrations, OpenTSDB's AsyncHBase client will buffer RPCs in memory and attempt to flush them once the regions are back online. Each region has a 10,000 RPC buffer by default and if many regions are down then the RPCs can eventually fill up the TSD heap and cause long garbage collection pauses. If this happens, you can either increase your heap to accommodate more region splits or decrease the NSRE queue size by modifying the &lt;code&gt;hbase.nsre.high_watermark&lt;/code&gt; config parameter in AsyncHBase 1.7 and OpenTSDB 2.2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41d0efa32f8d50483bd13da7ac82e0f72fe898d3" translate="yes" xml:space="preserve">
          <source>During scanning, if the UID for a metric, tag name or tag value cannot be resolved to a name, an exception will be thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa4a7a170f7075560c98a976572cae386b13a240" translate="yes" xml:space="preserve">
          <source>E.g.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85405489981f9f9d2b594c0288cdb40f94556d70" translate="yes" xml:space="preserve">
          <source>END-DATE</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb176d960ba6d48b255d8b1eb8f2d9bc6525722b" translate="yes" xml:space="preserve">
          <source>Each &lt;code&gt;put&lt;/code&gt; can only send a single data point. Don't forget the newline character, e.g. &lt;code&gt;\n&lt;/code&gt; at the end of your command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6917dbd4190433e483c27945f9afa096c9d110a0" translate="yes" xml:space="preserve">
          <source>Each HTTP query can include some of these details such as the original query and the timing information using the &lt;code&gt;showSummary&lt;/code&gt; and &lt;code&gt;showQuery&lt;/code&gt; parameters. Other details can be found in the &lt;code&gt;/api/stats/query&lt;/code&gt; output including headers, status and exceptions. And full details (minus the actual result data) can be logged to disk via the logging config. This page details the various query sections and the information found therein.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e44e2db3dbc99f728d50416c4fce58380829eee5" translate="yes" xml:space="preserve">
          <source>Each TSD exports some stats about itself through the simple stats command. You can collect those stats and feed them back to the TSD every few seconds. First, create the necessary metrics:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7138e784163c43c84b784ff1e8dd7b81f91fd6b2" translate="yes" xml:space="preserve">
          <source>Each UID may also have a metadata entry recorded in the &lt;code&gt;tsdb-uid&lt;/code&gt; table. Data available for each UID includes immutable fields such as the &lt;code&gt;uid&lt;/code&gt;, &lt;code&gt;type&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;created&lt;/code&gt; timestamp that reflects the time when the UID was first assigned. Additionally some fields may be edited such as the &lt;code&gt;description&lt;/code&gt;, &lt;code&gt;notes&lt;/code&gt;, &lt;code&gt;displayName&lt;/code&gt; and a set of &lt;code&gt;custom&lt;/code&gt; key/value pairs to record extra information. For details on the fields, see the &lt;a href=&quot;../api_http/uid/uidmeta&quot;&gt;&lt;em&gt;/api/uid/uidmeta&lt;/em&gt;&lt;/a&gt; endpoint.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e818a520f98f4cbba88deafec23674cf82cb9d3" translate="yes" xml:space="preserve">
          <source>Each branch will often have a list of child branches. However if a branch is at the end of a path, it may not have any child branches, but it should have a list of leaves.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73eda06ac919a08c37609260f4cf8c8fb239fc3e" translate="yes" xml:space="preserve">
          <source>Each child branch has a &lt;code&gt;DisplayName&lt;/code&gt; value and the hash of this value is used to generate a 32 bit integer ID for the branch. The hash function used is the Java &lt;code&gt;java.lang.String&lt;/code&gt; hash function. The 4 bytes of the integer value are then encoded to 8 hexadecimal characters. For example, if we have a display name of &lt;code&gt;sys&lt;/code&gt; for a branch, the hash returned will be 102093. The TSD will convert that value to hexadecimal &lt;code&gt;0001BECD&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e01d9ea021eac3879584ab6ba327c526a7941ef" translate="yes" xml:space="preserve">
          <source>Each command must be sent as a series of strings with a &lt;strong&gt;new line&lt;/strong&gt; character terminating the request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="faabed7c6269661907f2beef3bfeda08b3753c3a" translate="yes" xml:space="preserve">
          <source>Each data point within the compacted column follows the same format as a single column with the addition of two spaces of indentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42c55a614bd74d3bcb0f4562ec1898911baaaf19" translate="yes" xml:space="preserve">
          <source>Each node of a tree is recorded as a &lt;em&gt;branch&lt;/em&gt; object. Each branch contains information such as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed8d26ff66ae869689e2eb2c956a965b83e05eb3" translate="yes" xml:space="preserve">
          <source>Each of the metrics above can be recorded as a number at a specific time. For example, we could record that Sue worked 8 hours at the end of each day. Or that &quot;mylogo.jpg&quot; was downloaded 400 times in the past hour. Thus a datapoint consists of:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94ad8938d1647ee9797e7c7d6c6e1887ab6ab6b1" translate="yes" xml:space="preserve">
          <source>Each request must have one or more of the following fields:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4ae49184e6d16b10f6c6705a4ae20b1708a973f" translate="yes" xml:space="preserve">
          <source>Each rule acts on a single component of the timeseries data. Currently available types include:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5468579ef6a445018c33f2bf3c7942c76169147" translate="yes" xml:space="preserve">
          <source>Each rule can only process a regex, a separator, or neither. If the rule has both a &quot;regex&quot; and &quot;separator&quot; value in their respective fields, only the &quot;regex&quot; will be executed on the timeseries. The &quot;separator&quot; will be ignored. If neither &quot;regex&quot; or &quot;separator&quot; are defined, then when the rule's &quot;field&quot; is matched, the entire value for that field will be processed into a branch or leaf.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="648ef81c06b1b5a61d14357c63d77ad2c09b833c" translate="yes" xml:space="preserve">
          <source>Each rule in a tree is an individual object in storage, thus the &lt;code&gt;/api/tree/rule&lt;/code&gt; endpoint allows for easy modification of a single rule in the set. Rules are addressed by their &lt;code&gt;tree&lt;/code&gt; ID, &lt;code&gt;level&lt;/code&gt; and &lt;code&gt;order&lt;/code&gt; and all requests require these three parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b700ab63c7d5ced1601ee785b0beb35aa0707184" translate="yes" xml:space="preserve">
          <source>Each sub query can retrieve individual or groups of timeseries data, performing aggregation or grouping calculations on each set. Fields for each sub query include:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cddd53f422ce60b5507a1f12845bf7fae644ab73" translate="yes" xml:space="preserve">
          <source>Each timeseries in OpenTSDB is uniquely identified by the combination of it's metric UID and tag name/value UIDs, creating a TSUID as per &lt;a href=&quot;uids&quot;&gt;&lt;em&gt;UIDs and TSUIDs&lt;/em&gt;&lt;/a&gt;. When a new timeseries is received, a TSMeta object can be recorded in the &lt;code&gt;tsdb-uid&lt;/code&gt; table in a row identified by the TSUID. The meta object includes some immutable fields such as the &lt;code&gt;tsuid&lt;/code&gt;, &lt;code&gt;metric&lt;/code&gt;, &lt;code&gt;tags&lt;/code&gt;, &lt;code&gt;lastReceived&lt;/code&gt; and &lt;code&gt;created&lt;/code&gt; timestamp that reflects the time when the TSMeta was first received. Additionally some fields can be edited such as a &lt;code&gt;description&lt;/code&gt;, &lt;code&gt;notes&lt;/code&gt; and others. See &lt;a href=&quot;../api_http/uid/tsmeta&quot;&gt;&lt;em&gt;/api/uid/tsmeta&lt;/em&gt;&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fc482661c38f81433cfd460f1a23ecf63d4bdb8" translate="yes" xml:space="preserve">
          <source>Each tree is assigned a Unique ID consisting of an unsigned integer starting with &lt;code&gt;1&lt;/code&gt; for the first tree. All rows related to a tree are prefixed with this ID encoded as a two byte array. E.g. &lt;code&gt;\x00\x01&lt;/code&gt; for UID &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cac80c1df2f22043428d8eac1f966558f3cf0541" translate="yes" xml:space="preserve">
          <source>Each tree is dynamically built from a set of rules defined by the user. A rule set must contain at least one rule and usually will have more than one. Each set has multiple &lt;em&gt;levels&lt;/em&gt; that determine the order of rule processing. Rules located at level 0 are processed first, then rules at level 1, and so on until all of the rules have been applied to a given timeseries. Each level in the rule set may have multiple rules to handle situations where metrics and tags may not have been planned out ahead of time or some arbitrary data may have snuck in. If multiple rules are stored in a level, the first one with a successful match will be applied and the others ignored. These rules are also ordered by the &lt;em&gt;order&lt;/em&gt; field so that a rule with order 0 is processed first, then a rule with order 1 and so on. In logs and when using the test endpoint, rules are usually given IDs in the format of &quot;[&amp;lt;treeId&amp;gt;:&amp;lt;level&amp;gt;:&amp;lt;order&amp;gt;:&amp;lt;type&amp;gt;]&quot; such as &quot;[1:0:1:0]&quot; indicates the rule for tree 1, at level 0, order 1 of the type &lt;code&gt;METRIC&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdc8e935ee856cd7ec68be8303456cf35347ab61" translate="yes" xml:space="preserve">
          <source>Early OpenTSDB implementations always encoded integer values on 8 bytes. With 2.0, integers were written on the smallest number of bytes possible, either 1, 2, 4 or 8. During fsck, any 8 byte encoded integers detected will be re-written with VLE if the &lt;code&gt;--fix&lt;/code&gt; or &lt;code&gt;--fix-all&lt;/code&gt; flags are specified. This includes stand-alone and compacted values. At the end of a run, the number of bytes saved with VLE are displayed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff5ae0a5cd417b557c8be3ec64a36b3747a83840" translate="yes" xml:space="preserve">
          <source>Early OpenTSDB versions had a bug in the floating point value storage where the first 4 bytes of an 8 byte value were written with all bits set to 1. The value should be on the last four bytes as the qualifier encodes the length as four bytes. However if the invalid data was compacted, the data cannot be parsed properly and an error will be recorded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b769f21a4a3d1bd51f0f316c4bca8b3d90ad4fea" translate="yes" xml:space="preserve">
          <source>Edit &lt;code&gt;Makefile.am&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d843792976e9fd37d2013c188b05235a7150547c" translate="yes" xml:space="preserve">
          <source>Edit &lt;code&gt;pom.xml.in&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ed09afe9c8c1c51f1855f790b8db4d7e7ca40f5" translate="yes" xml:space="preserve">
          <source>Edit the &lt;code&gt;MANIFEST.MF&lt;/code&gt; file and add:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9108242af5129ef9d5f8e36e09b6187e492b8161" translate="yes" xml:space="preserve">
          <source>Edit the new file and put the canonical name of each class that implements the abstract interface on a new line of the file. E.g. if your implementation is called &lt;code&gt;net.opentsdb.search.ElasticSearch&lt;/code&gt;, put that on a line. Some quick notes about this file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="591679fdce64f062331d88a474cdc59183e5ebaf" translate="yes" xml:space="preserve">
          <source>Emits a NaN if all values in the aggregation function were NaN or &quot;missing&quot;. For aggregators, NaNs are treated as &quot;sentinel&quot; values that cause the function to skip over the values. Note that if a series emits a NaN in an expression, the NaN is infectious and will cause the output of that expression to be NaN. At serialization the NaN will be emitted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b29f2d57a9281b81e88360fb12ba38adf7a8d87" translate="yes" xml:space="preserve">
          <source>Emits a Null at serialization time. During computation the values are treated as NaNs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="206f2d6464b962171ecfb8c72b354256441204db" translate="yes" xml:space="preserve">
          <source>Emits a sliding window moving average for each data point and series in the metric. The &lt;code&gt;window&lt;/code&gt; parameter may either be a positive integer that reflects the number of data points to maintain in the window (non-timed) or a time span specified by an integer followed by time unit such as &lt;code&gt;`60s`&lt;/code&gt; or &lt;code&gt;`60m`&lt;/code&gt; or &lt;code&gt;`24h`&lt;/code&gt;. Timed windows must be in single quotes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fc808d51d96e5a74030fdd512fad4cf941408f9" translate="yes" xml:space="preserve">
          <source>Emits a user defined value when a data point is missing. Must specify the value with &lt;code&gt;value&lt;/code&gt;. The value can be an integer or floating point.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff1c7a925aa940ce4439370b71608050e8863689" translate="yes" xml:space="preserve">
          <source>Emits a zero when the value is missing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="599bad72d6419787e69dc0859789b07a0216f8d9" translate="yes" xml:space="preserve">
          <source>Emits the results as absolute values, converting negative values to positive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3159fe421b3221381b3c778dc1c3c26e4540be37" translate="yes" xml:space="preserve">
          <source>Empty</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c18874ab3885220d4619cac7c10d2ea4d17be4be" translate="yes" xml:space="preserve">
          <source>Enable keep-alives in the TSDs and make sure that any applications you are using to send time series data keep their connections open instead of opening and closing for every write. See &lt;code&gt;configuration&lt;/code&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff3490fb2f5bd7b5378419261b6df82decf0cb8d" translate="yes" xml:space="preserve">
          <source>Enable or disable the &lt;code&gt;diediedie&lt;/code&gt; HTML and ASCII commands to shutdown a TSD.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="182f6e5120df58fba71d0be4bd966a4c320fad66" translate="yes" xml:space="preserve">
          <source>Enables duplicate data point resolution by deleting all but the latest or oldest data point. Also see &lt;code&gt;--last-write-wins&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30240f4b4dbb54605ee481e7bf549995e6c4516a" translate="yes" xml:space="preserve">
          <source>Enables pre-population of the UID caches when starting a TSD.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afcb479464e53d6e747e83bbee9b006eebf52db3" translate="yes" xml:space="preserve">
          <source>Enabling Metadata</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c640e925e8b555834bc10bdde32c28f98b75ded" translate="yes" xml:space="preserve">
          <source>End Time</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2328ea919aeaad3eeb355f7a79aeac36c99364e5" translate="yes" xml:space="preserve">
          <source>Enough resources for the stream workers to do their job.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f2f6a15cf8da2b27e5a4af47b58e7ad71c0b3d9" translate="yes" xml:space="preserve">
          <source>Error</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="805e86a8cbf628e38e4c45612c005a504009e79a" translate="yes" xml:space="preserve">
          <source>Errors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66e2249dbed720da061a2171947d219b7a15201b" translate="yes" xml:space="preserve">
          <source>Estimated Percentiles</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c7e3fbcd952ec632e73daf54bc82fdbb596825a" translate="yes" xml:space="preserve">
          <source>Every 15 seconds, the script will collect 2 data points from MySQL and send them to the TSD. You can use a smaller sleep interval for greater granularity.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32f5ca9f39a3294836b2c5823592ef98c1ef83f3" translate="yes" xml:space="preserve">
          <source>Every annotation is associated with a start timestamp. This determines where the note is stored in the backend and may be the start of an event with a beginning and end, or just used to record a note at a specific point in time. Optionally an end timestamp can be set if the note represents a time span, such as an issue that was resolved some time after the start.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec9ebeca031a11b6ec52e1767204bb10b69076f8" translate="yes" xml:space="preserve">
          <source>Every data point received by a TSD can be sent to another destination for real time processing. One plugin for this type may be enabled at a time. The &lt;code&gt;tsd.rtpublisher.plugin&lt;/code&gt; property lets you select a plugin and &lt;code&gt;tsd.rtpublisher.enable&lt;/code&gt; will start sending data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b03bb7f007a665c121bb9f157a0c4b40054db18" translate="yes" xml:space="preserve">
          <source>Every data point stored in OpenTSDB has at least three UIDs associated with it. There will always be a &lt;code&gt;metric&lt;/code&gt; and one or more tag pairs consisting of a &lt;code&gt;tagk&lt;/code&gt; or tag name, and a &lt;code&gt;tagv&lt;/code&gt; or tag value. When a new name for one of these UIDs comes into the system, a Unique ID is assigned so that there is always a UID name and numeric identifier pair.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae8843e0fef6472a677c7e7ff8c01576cc29d1d5" translate="yes" xml:space="preserve">
          <source>Every log message is accompanied by a descriptive severity level. Levels employed by OpenTSDB include:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49e3eec6829d47bcad9d3932ffed5a814695fff9" translate="yes" xml:space="preserve">
          <source>Every metric, tag name and tag value is associated with a unique identifier (UID). Internally, the UID is a binary array assigned to a text value the first time it is encountered or via an explicit assignment request. This endpoint provides utilities for managing UIDs and their associated data. Please see the UID endpoint TOC below for information on what functions are implemented.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f805390128657ee4f801a33fe9839ec4e90614c" translate="yes" xml:space="preserve">
          <source>Every request will be returned with a standard HTTP response code. Most responses will include content, particularly error codes that will include details in the body about what went wrong. Successful codes returned from the API include:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="847caf7be84414b1278dbbd1cd33434ec4dd76be" translate="yes" xml:space="preserve">
          <source>Every time series data point requires the following data:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66f5ff7aa46003d0c1f1eb3ce4feb06f1b76baed" translate="yes" xml:space="preserve">
          <source>Every time series in OpenTSDB must have at least one tag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16a32cc9bdbefc99bfbc2f54d4cff558b557e3f8" translate="yes" xml:space="preserve">
          <source>Every time series is comprised of a metric and one or more tag name/value pairs. Since tags are optional in queries, if you request only the metric name, then every metric with any number or value of tags will be returned in the aggregated results. For example, if we have a stored data set:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f01ed56a1e32a05e5ef96e4d779f34784af9a96" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="448c5d315d5d73de8bfdd23cacfec469740b4a48" translate="yes" xml:space="preserve">
          <source>Example - An example of the parameter value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70cbec94a193c09b93b312a2f1c7cbbe78712cb8" translate="yes" xml:space="preserve">
          <source>Example Aggregated Array Response</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9961c686fce42ec2d5662ef829ddd0bc830b38a" translate="yes" xml:space="preserve">
          <source>Example Aggregated Default Response</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8884be2bf00c3ed338d39e5fc6014c8a0dd92b5" translate="yes" xml:space="preserve">
          <source>Example Branch GET Query</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f515421fb7d34ad6e00f8d29987b282aa1b3eab9" translate="yes" xml:space="preserve">
          <source>Example Command</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48766bd13c18f6bdf69b962bbf439e70d3b190f8" translate="yes" xml:space="preserve">
          <source>Example Content Request</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6e5ab477f52d9d48865cb4f9955e4e6fe4ea935" translate="yes" xml:space="preserve">
          <source>Example DELETE QS Request</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7105e0d5093cda6e5b44035974fc54975d9854ca" translate="yes" xml:space="preserve">
          <source>Example DELETE Request</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24ba7b451e61bad2c5cb4de4bd70d24875e22eb9" translate="yes" xml:space="preserve">
          <source>Example DELETE Response</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3eb000f2018951656c8c27c5dc2a37445d029128" translate="yes" xml:space="preserve">
          <source>Example Data</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2d43ffc7c4ff9ed2d891b36b4281b4bcba4f4ba" translate="yes" xml:space="preserve">
          <source>Example Error Response</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6419fd7ac7dbb8f5db766caed43fd2eb30ff58b5" translate="yes" xml:space="preserve">
          <source>Example Error Result</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a22d4eb4921a4f5bc740252ab77536ee50f2bc07" translate="yes" xml:space="preserve">
          <source>Example GET All Trees Query</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc9584bb682770d4769ad315ac84b0018ce224bc" translate="yes" xml:space="preserve">
          <source>Example GET Query</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0d7076b01de99badea548621f96a7fa99a531be" translate="yes" xml:space="preserve">
          <source>Example GET Request</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb0c51f554619058d0e07ea954265a17983a7253" translate="yes" xml:space="preserve">
          <source>Example GET Single Tree</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f2fbe2cca0ab66ab3dd5aabd16c5de4d908a67d" translate="yes" xml:space="preserve">
          <source>Example Java API usage classes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49abeb0da65befb5cfd45b63c268681bf5b8ee49" translate="yes" xml:space="preserve">
          <source>Example Metric GET Request</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6861145c360a7a241cf0b12a4f78000feefc9f47" translate="yes" xml:space="preserve">
          <source>Example Multi-Set Response</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
