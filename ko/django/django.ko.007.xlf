<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="django">
    <body>
      <group id="django">
        <trans-unit id="cd52e2391a1ffb005e89afe37be49919c4cc5f22" translate="yes" xml:space="preserve">
          <source>For example, the filesystem loader may receive &lt;code&gt;'index.html'&lt;/code&gt; as a &lt;code&gt;template_name&lt;/code&gt; argument. This method would yield origins for the full path of &lt;code&gt;index.html&lt;/code&gt; as it appears in each template directory the loader looks at.</source>
          <target state="translated">예를 들어, 파일 시스템 로더는 &lt;code&gt;template_name&lt;/code&gt; 인수 로 &lt;code&gt;'index.html'&lt;/code&gt; 을 수신 할 수 있습니다 . 이 메소드는 로더가 보는 각 템플리트 디렉토리에 나타나는 &lt;code&gt;index.html&lt;/code&gt; 의 전체 경로에 대한 원점을 산출 합니다.</target>
        </trans-unit>
        <trans-unit id="c18b9843bc411dfbfe818e01049b0042cdba398b" translate="yes" xml:space="preserve">
          <source>For example, the following code tests that an &lt;code&gt;EmailField&lt;/code&gt; accepts &lt;code&gt;a@a.com&lt;/code&gt; as a valid email address, but rejects &lt;code&gt;aaa&lt;/code&gt; with a reasonable error message:</source>
          <target state="translated">예를 들어 다음 코드는 &lt;code&gt;EmailField&lt;/code&gt; 가 &lt;code&gt;a@a.com&lt;/code&gt; 을 유효한 전자 메일 주소로 허용 하지만 합리적인 오류 메시지로 &lt;code&gt;aaa&lt;/code&gt; 를 거부 하는지 테스트 합니다.</target>
        </trans-unit>
        <trans-unit id="f1cda75052ecec1422a69248d4438e2fd36432d8" translate="yes" xml:space="preserve">
          <source>For example, the following code will store uploaded files under &lt;code&gt;/media/photos&lt;/code&gt; regardless of what your &lt;a href=&quot;../ref/settings#std:setting-MEDIA_ROOT&quot;&gt;&lt;code&gt;MEDIA_ROOT&lt;/code&gt;&lt;/a&gt; setting is:</source>
          <target state="translated">예를 들어 다음 코드는 &lt;a href=&quot;../ref/settings#std:setting-MEDIA_ROOT&quot;&gt; &lt;code&gt;MEDIA_ROOT&lt;/code&gt; &lt;/a&gt; 설정에 관계없이 업로드 된 파일을 &lt;code&gt;/media/photos&lt;/code&gt; 에 저장합니다 .</target>
        </trans-unit>
        <trans-unit id="1575f645e5e256b758956ea48109588be928308b" translate="yes" xml:space="preserve">
          <source>For example, the following code would send two different messages to two different sets of recipients; however, only one connection to the mail server would be opened:</source>
          <target state="translated">예를 들어 다음 코드는 서로 다른 두 명의 수신자에게 두 개의 서로 다른 메시지를 보냅니다. 그러나 메일 서버에 대한 연결은 하나만 열립니다.</target>
        </trans-unit>
        <trans-unit id="0ea55980f6c3f2fe0c5f5dd2dbe9c6bb45a52f5d" translate="yes" xml:space="preserve">
          <source>For example, the following command nearly reproduces the &lt;code&gt;WorldBorder&lt;/code&gt; model and mapping dictionary created above, automatically:</source>
          <target state="translated">예를 들어 다음 명령은 위에서 만든 &lt;code&gt;WorldBorder&lt;/code&gt; 모델과 매핑 사전을 자동으로 거의 재현합니다 .</target>
        </trans-unit>
        <trans-unit id="0a4537dba183f7d976e59f5b36b50b496ec563e0" translate="yes" xml:space="preserve">
          <source>For example, the following model has &lt;em&gt;two&lt;/em&gt;&lt;code&gt;Manager&lt;/code&gt;s &amp;ndash; one that returns all objects, and one that returns only the books by Roald Dahl:</source>
          <target state="translated">예를 들어 다음 모델에는 &lt;em&gt;두 개의 &lt;/em&gt; &lt;code&gt;Manager&lt;/code&gt; 가 있습니다. 하나는 모든 개체를 반환하고 다른 하나는 Roald Dahl의 장부 만 반환합니다.</target>
        </trans-unit>
        <trans-unit id="3f437de90816066d29eda0f176414d20e8975eda" translate="yes" xml:space="preserve">
          <source>For example, the following query would exclude blogs that contain &lt;em&gt;both&lt;/em&gt; entries with &lt;em&gt;&amp;ldquo;Lennon&amp;rdquo;&lt;/em&gt; in the headline &lt;em&gt;and&lt;/em&gt; entries published in 2008:</source>
          <target state="translated">예를 들어, 다음 쿼리는 포함 된 블로그 제외 것 &lt;em&gt;모두&lt;/em&gt; 가있는 항목 &lt;em&gt;&quot;레논&quot;을&lt;/em&gt; 제목에 &lt;em&gt;와&lt;/em&gt; 2008 년에 출판 항목 :</target>
        </trans-unit>
        <trans-unit id="b5b1287469ae2ba4c652334e4068fe83b853d8c8" translate="yes" xml:space="preserve">
          <source>For example, the following router would direct all cache read operations to &lt;code&gt;cache_replica&lt;/code&gt;, and all write operations to &lt;code&gt;cache_primary&lt;/code&gt;. The cache table will only be synchronized onto &lt;code&gt;cache_primary&lt;/code&gt;:</source>
          <target state="translated">예를 들어 다음 라우터는 모든 캐시 읽기 작업을 &lt;code&gt;cache_replica&lt;/code&gt; 로 , 모든 쓰기 작업을 &lt;code&gt;cache_primary&lt;/code&gt; 로 보냅니다 . 캐시 테이블은 &lt;code&gt;cache_primary&lt;/code&gt; 에만 동기화 됩니다 .</target>
        </trans-unit>
        <trans-unit id="79e1b1c393dd6f3b661e294aa780e92c0b3536fe" translate="yes" xml:space="preserve">
          <source>For example, the following template would load all the tags and filters registered in &lt;code&gt;somelibrary&lt;/code&gt; and &lt;code&gt;otherlibrary&lt;/code&gt; located in package &lt;code&gt;package&lt;/code&gt;:</source>
          <target state="translated">예를 들어 다음 템플릿은 패키지 &lt;code&gt;package&lt;/code&gt; 에있는 &lt;code&gt;somelibrary&lt;/code&gt; 및 &lt;code&gt;otherlibrary&lt;/code&gt; 에 등록 된 모든 태그와 필터를로드 합니다 .</target>
        </trans-unit>
        <trans-unit id="e254385271ce9642568030d0572bce1569f1c2bf" translate="yes" xml:space="preserve">
          <source>For example, the following test will not be executed if the database supports transactions (e.g., it would &lt;em&gt;not&lt;/em&gt; run under PostgreSQL, but it would under MySQL with MyISAM tables):</source>
          <target state="translated">예를 들어, 데이터베이스가 트랜잭션을 지원하면 (예 : PostgreSQL에서는 실행 &lt;em&gt;되지&lt;/em&gt; 않지만 MyISAM 테이블이있는 MySQL 에서는) 다음 테스트가 실행 &lt;em&gt;되지 않습니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="238a0a8d4bd6a5c30b094db9458da443a0c092e2" translate="yes" xml:space="preserve">
          <source>For example, the following test will only be executed if the database supports transactions (e.g., it would run under PostgreSQL, but &lt;em&gt;not&lt;/em&gt; under MySQL with MyISAM tables):</source>
          <target state="translated">예를 들어, 다음 테스트는 데이터베이스가 트랜잭션을 지원하는 경우에만 실행됩니다 (예 : MygreM 테이블이있는 MySQL 에서는 실행 &lt;em&gt;되지&lt;/em&gt; 않지만 PostgreSQL에서는 실행 됨 ).</target>
        </trans-unit>
        <trans-unit id="cf6d07ae81bf27d1e709cd3bef81b142bddcc252" translate="yes" xml:space="preserve">
          <source>For example, the following two statements are equivalent:</source>
          <target state="translated">예를 들어, 다음 두 문장은 동일합니다.</target>
        </trans-unit>
        <trans-unit id="93dca967df9ba0db777acab0729765113692924a" translate="yes" xml:space="preserve">
          <source>For example, the following view returns a &lt;a href=&quot;#django.template.response.TemplateResponse&quot;&gt;&lt;code&gt;TemplateResponse&lt;/code&gt;&lt;/a&gt; with a template and a context containing a queryset:</source>
          <target state="translated">예를 들어 다음보기는 &lt;a href=&quot;#django.template.response.TemplateResponse&quot;&gt; &lt;code&gt;TemplateResponse&lt;/code&gt; &lt;/a&gt; 과 쿼리 집합이 포함 된 컨텍스트가 포함 된 TemplateResponse 를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="c47df139280495e8df269df3e1b4e74bf5801cba" translate="yes" xml:space="preserve">
          <source>For example, the static definition for our Calendar Widget could also be defined in a dynamic fashion:</source>
          <target state="translated">예를 들어, 캘린더 위젯에 대한 정적 정의는 동적 방식으로 정의 될 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="0b0b8d26aca41acf8d85f36e90f98e284157926f" translate="yes" xml:space="preserve">
          <source>For example, the warp function can be used for aggregating a raster to the double of its original pixel scale:</source>
          <target state="translated">예를 들어, 워프 함수는 래스터를 원래 픽셀 스케일의 두 배로 집계하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0c0b7b65cb4d16a3499472ddb5c49cea05342068" translate="yes" xml:space="preserve">
          <source>For example, these two URLconf sets are functionally identical:</source>
          <target state="translated">예를 들어,이 두 URLconf 세트는 기능적으로 동일합니다.</target>
        </trans-unit>
        <trans-unit id="198ddfca24c57bcb8381f0fb15818ed1720ccca5" translate="yes" xml:space="preserve">
          <source>For example, this &lt;code&gt;Q&lt;/code&gt; object encapsulates a single &lt;code&gt;LIKE&lt;/code&gt; query:</source>
          <target state="translated">예를 &lt;code&gt;LIKE&lt;/code&gt; &lt;code&gt;Q&lt;/code&gt; 객체는 단일 LIKE 쿼리를 캡슐화 합니다.</target>
        </trans-unit>
        <trans-unit id="0057a8ee0bb64c68400ed8799f51b27a995f23f2" translate="yes" xml:space="preserve">
          <source>For example, this command:</source>
          <target state="translated">예를 들어 다음 명령은</target>
        </trans-unit>
        <trans-unit id="89ae811713dbf8bd975a1e4c77bf78d1767f40c5" translate="yes" xml:space="preserve">
          <source>For example, this custom &lt;code&gt;Manager&lt;/code&gt; offers a method &lt;code&gt;with_counts()&lt;/code&gt;, which returns a list of all &lt;code&gt;OpinionPoll&lt;/code&gt; objects, each with an extra &lt;code&gt;num_responses&lt;/code&gt; attribute that is the result of an aggregate query:</source>
          <target state="translated">예를 &lt;code&gt;with_counts()&lt;/code&gt; 사용자 정의 &lt;code&gt;Manager&lt;/code&gt; 는 with_counts () 메소드를 제공합니다.이 메소드 는 모든 &lt;code&gt;OpinionPoll&lt;/code&gt; 오브젝트 의 목록을 리턴 합니다. 각 오브젝트 에는 집계 쿼리의 결과 인 추가 &lt;code&gt;num_responses&lt;/code&gt; 속성이 있습니다.</target>
        </trans-unit>
        <trans-unit id="f22f2bd76f33b6561d7fa95bb448809cc02b2670" translate="yes" xml:space="preserve">
          <source>For example, this deletes all &lt;code&gt;Entry&lt;/code&gt; objects with a &lt;code&gt;pub_date&lt;/code&gt; year of 2005:</source>
          <target state="translated">예를 들어 &lt;code&gt;pub_date&lt;/code&gt; 연도가 2005 인 모든 &lt;code&gt;Entry&lt;/code&gt; 객체를 삭제합니다 .</target>
        </trans-unit>
        <trans-unit id="ffac3d5fcc4ac7fdba32bd4d758cba661acc1241" translate="yes" xml:space="preserve">
          <source>For example, this model has a few custom methods:</source>
          <target state="translated">예를 들어이 모델에는 몇 가지 사용자 지정 방법이 있습니다.</target>
        </trans-unit>
        <trans-unit id="b60ea9d897ff291cb7e66bcae7ca48541f5d15f3" translate="yes" xml:space="preserve">
          <source>For example, this returns the first 5 objects (&lt;code&gt;LIMIT 5&lt;/code&gt;):</source>
          <target state="translated">예를 들어, 처음 5 개의 객체 ( &lt;code&gt;LIMIT 5&lt;/code&gt; )를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="aa80cca3b9f5bf179795210ec6b98d06892e51ee" translate="yes" xml:space="preserve">
          <source>For example, this statement yields a single &lt;code&gt;Q&lt;/code&gt; object that represents the &amp;ldquo;OR&amp;rdquo; of two &lt;code&gt;&quot;question__startswith&quot;&lt;/code&gt; queries:</source>
          <target state="translated">예를 들어,이 명령문은 두 개의 &lt;code&gt;&quot;question__startswith&quot;&lt;/code&gt; 쿼리 의 &quot;OR&quot;을 나타내는 단일 &lt;code&gt;Q&lt;/code&gt; 오브젝트를 생성 합니다.</target>
        </trans-unit>
        <trans-unit id="4c1552c9853a63c8045ed1aecebca09d2f2bf272" translate="yes" xml:space="preserve">
          <source>For example, this template would render as &lt;code&gt;'hello'&lt;/code&gt;:</source>
          <target state="translated">예를 &lt;code&gt;'hello'&lt;/code&gt; 템플릿은 'hello' 로 렌더링됩니다 .</target>
        </trans-unit>
        <trans-unit id="9f1954b9d586a8adf777426824138b87bc609b37" translate="yes" xml:space="preserve">
          <source>For example, this use of &lt;code&gt;extra()&lt;/code&gt;:</source>
          <target state="translated">예를 들어, &lt;code&gt;extra()&lt;/code&gt; 사용은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="88fdaec3ea4b5e8da4ebc2790122624ba0f7e20c" translate="yes" xml:space="preserve">
          <source>For example, this would look for an app template in the given directory when creating the &lt;code&gt;myapp&lt;/code&gt; app:</source>
          <target state="translated">예를 들어, &lt;code&gt;myapp&lt;/code&gt; 앱을 만들 때 지정된 디렉토리에서 앱 템플릿을 찾습니다 .</target>
        </trans-unit>
        <trans-unit id="730023e6712c636f1e717e67432aca53f7486feb" translate="yes" xml:space="preserve">
          <source>For example, to allow all users to log in regardless of &amp;ldquo;active&amp;rdquo; status:</source>
          <target state="translated">예를 들어, &quot;활성&quot;상태에 관계없이 모든 사용자가 로그인 할 수있게하려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="812ff44f9b0e37743f53c2bda9e76d7b8d794761" translate="yes" xml:space="preserve">
          <source>For example, to annotate each movie with the average rating for the movies by the same studio in the same genre and release year:</source>
          <target state="translated">예를 들어, 동일한 장르와 출시 연도에 동일한 스튜디오에서 영화의 평균 등급으로 각 영화에 주석을 달려면 :</target>
        </trans-unit>
        <trans-unit id="23c6e960f3c8f0a5c0df18b368143eaf3d0cabb1" translate="yes" xml:space="preserve">
          <source>For example, to annotate each post with the email address of the author of the newest comment on that post:</source>
          <target state="translated">예를 들어, 각 게시물에 해당 게시물에 대한 최신 의견 작성자의 이메일 주소를 주석으로 추가하려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="279e76a8911e6175d2b1e0fca7ce722f066e2ec0" translate="yes" xml:space="preserve">
          <source>For example, to annotate each post with whether or not it has a comment from within the last day:</source>
          <target state="translated">예를 들어, 각 게시물에 마지막 날의 댓글이 있는지 여부에 주석을 달려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="d8c72125990ce7483e08fa3c125e87d8e1d668ef" translate="yes" xml:space="preserve">
          <source>For example, to attach &lt;code&gt;request.user&lt;/code&gt; to each changed formset model instance:</source>
          <target state="translated">예를 들어, 변경된 각 formset 모델 인스턴스 에 &lt;code&gt;request.user&lt;/code&gt; 를 첨부하려면 다음을 수행하십시오 .</target>
        </trans-unit>
        <trans-unit id="d48e4fdd0eb7ee0386a0d07a5b840f298a471364" translate="yes" xml:space="preserve">
          <source>For example, to create an Atom 1.0 feed and print it to standard output:</source>
          <target state="translated">예를 들어, Atom 1.0 피드를 작성하여 표준 출력으로 인쇄하려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="fcfc47c401527a89154f8bea99232797453a3cb4" translate="yes" xml:space="preserve">
          <source>For example, to delete all the entries in a particular blog:</source>
          <target state="translated">예를 들어 특정 블로그의 모든 항목을 삭제하려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="dd56ffbb096671a8ae0f457750a49dd814c8b644" translate="yes" xml:space="preserve">
          <source>For example, to find a list of all blog entries that have had more comments than pingbacks, we construct an &lt;code&gt;F()&lt;/code&gt; object to reference the pingback count, and use that &lt;code&gt;F()&lt;/code&gt; object in the query:</source>
          <target state="translated">예를 들어, 우리는 건설, 핑백보다 더 많은 코멘트를 한 모든 블로그 항목의 목록을 찾을 수 &lt;code&gt;F()&lt;/code&gt; 핑백 수 및 사용을 참조하는 객체를 그 &lt;code&gt;F()&lt;/code&gt; 쿼리에 개체 :</target>
        </trans-unit>
        <trans-unit id="8a79fb62038f478d20c970117065d25594b022ff" translate="yes" xml:space="preserve">
          <source>For example, to find restaurants that have vegetarian pizzas with &lt;code&gt;'mozzarella'&lt;/code&gt; in the name:</source>
          <target state="translated">예를 들어, 이름에 &lt;code&gt;'mozzarella'&lt;/code&gt; 가있는 채식 피자가있는 식당을 찾으 려면</target>
        </trans-unit>
        <trans-unit id="fa7ff9eaf20a9e7fd98ea20afd6e746161bd4331" translate="yes" xml:space="preserve">
          <source>For example, to find the price range of books offered in each store, you could use the annotation:</source>
          <target state="translated">예를 들어, 각 상점에서 제공되는 책의 가격 범위를 찾으려면 주석을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="767eb3d833b80709509cdaba33aea5c3576ef163" translate="yes" xml:space="preserve">
          <source>For example, to generate a list of books that have more than one author, you can issue the query:</source>
          <target state="translated">예를 들어, 저자가 둘 이상인 책 목록을 생성하려면 다음과 같이 쿼리를 발행하십시오.</target>
        </trans-unit>
        <trans-unit id="da85008b78879c5f2b184ab4252fe398f7632ac5" translate="yes" xml:space="preserve">
          <source>For example, to get a &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; of blog entries from the year 2006, use &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.filter&quot;&gt;&lt;code&gt;filter()&lt;/code&gt;&lt;/a&gt; like so:</source>
          <target state="translated">예를 들어 2006 년부터 블로그 항목 의 &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; &lt;/a&gt; 을 가져 오려면 다음 과 같이 &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.filter&quot;&gt; &lt;code&gt;filter()&lt;/code&gt; &lt;/a&gt; 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="2665b2f708b263f2e02ca156cd6a0c538de8c726" translate="yes" xml:space="preserve">
          <source>For example, to get a list of all additions done through the admin:</source>
          <target state="translated">예를 들어, 관리자를 통해 수행 된 모든 추가 목록을 가져 오려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="b779ba41bdf093e3d6f0563f98ce89940d5ed6a9" translate="yes" xml:space="preserve">
          <source>For example, to order a &lt;code&gt;QuerySet&lt;/code&gt; of books by the number of authors that have contributed to the book, you could use the following query:</source>
          <target state="translated">예를 들어, 책에 기고 한 저자 수에 따라 책 의 &lt;code&gt;QuerySet&lt;/code&gt; 을 주문 하려면 다음 쿼리를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4432ed9491c6479c00d2785b98e20507109078c5" translate="yes" xml:space="preserve">
          <source>For example, to order by a &lt;code&gt;pub_date&lt;/code&gt; field ascending, use this:</source>
          <target state="translated">예를 들어, &lt;code&gt;pub_date&lt;/code&gt; 필드 오름차순으로 주문 하려면 다음을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="e6b6b30b3df788764cc7082971ff432b4a48a992" translate="yes" xml:space="preserve">
          <source>For example, to prevent one or more columns from being sortable:</source>
          <target state="translated">예를 들어, 하나 이상의 열을 정렬 할 수 없도록하려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="502100f7079ee748e529025258845a1b3a4df3cc" translate="yes" xml:space="preserve">
          <source>For example, to save an object to the &lt;code&gt;legacy_users&lt;/code&gt; database, you&amp;rsquo;d use this:</source>
          <target state="translated">예를 들어 &lt;code&gt;legacy_users&lt;/code&gt; 데이터베이스에 객체를 저장 하려면 다음을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="2acf27ec57eb17ce1701c1357eaded68de2d5ad5" translate="yes" xml:space="preserve">
          <source>For example, to search by &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;age&lt;/code&gt;, you could use:</source>
          <target state="translated">예를 들어 &lt;code&gt;name&lt;/code&gt; 과 &lt;code&gt;age&lt;/code&gt; 로 검색 하려면 다음을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ddbd8cfaa0374b8b12582f667e5c4260e74a59ba" translate="yes" xml:space="preserve">
          <source>For example, to sort companies that haven&amp;rsquo;t been contacted (&lt;code&gt;last_contacted&lt;/code&gt; is null) after companies that have been contacted:</source>
          <target state="translated">예를 들어 연락 한 회사 에 연락하지 않은 회사를 정렬하려면 ( &lt;code&gt;last_contacted&lt;/code&gt; 가 null 임) :</target>
        </trans-unit>
        <trans-unit id="e7831aac7ce3cb060fd800aebb9b85cee2d01e5e" translate="yes" xml:space="preserve">
          <source>For example, to store numbers up to &lt;code&gt;999&lt;/code&gt; with a resolution of 2 decimal places, you&amp;rsquo;d use:</source>
          <target state="translated">예를 들어, 소수점 이하 자릿수 2 자리로 숫자를 &lt;code&gt;999&lt;/code&gt; 까지 저장 하려면 다음을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="ac20e728f2f0f25bbef7107d0e2e92c0ef03c159" translate="yes" xml:space="preserve">
          <source>For example, to test that an &lt;code&gt;update()&lt;/code&gt; call resulted in the expected update, you could write a test similar to this:</source>
          <target state="translated">예를 들어, &lt;code&gt;update()&lt;/code&gt; 호출로 인해 예상되는 업데이트가 발생했는지 테스트하기 위해 다음과 유사한 테스트를 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b0197611ee48c7b267a7d6568cecc45562e3a8bb" translate="yes" xml:space="preserve">
          <source>For example, to translate the help text of the &lt;em&gt;name&lt;/em&gt; field in the following model, do the following:</source>
          <target state="translated">예를 들어, 다음 모델에서 &lt;em&gt;이름&lt;/em&gt; 필드 의 도움말 텍스트를 번역 하려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="54c4b8ee2f7b75c7d52fae5c72cbcf7c30ccfdc3" translate="yes" xml:space="preserve">
          <source>For example, to turn comments off for all blog entries published in 2010, you could do this:</source>
          <target state="translated">예를 들어 2010 년에 게시 된 모든 블로그 항목에 대한 주석을 해제하려면 다음과 같이하십시오.</target>
        </trans-unit>
        <trans-unit id="f0b380f65a8622ee9c808ca11e22ef9b611130ca" translate="yes" xml:space="preserve">
          <source>For example, using the above &lt;code&gt;Place&lt;/code&gt; class again, let&amp;rsquo;s create another subclass with a &lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField&quot;&gt;&lt;code&gt;ManyToManyField&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">예를 들어 위의 &lt;code&gt;Place&lt;/code&gt; 클래스를 다시 사용하여 &lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField&quot;&gt; &lt;code&gt;ManyToManyField&lt;/code&gt; 를&lt;/a&gt; 사용하여 다른 하위 클래스를 만들어 보겠습니다 .</target>
        </trans-unit>
        <trans-unit id="72f9b449e9e58bbd051ef1654ab12abf83f7812b" translate="yes" xml:space="preserve">
          <source>For example, we can ask for all publishers, annotated with their respective total book stock counters (note how we use &lt;code&gt;'book'&lt;/code&gt; to specify the &lt;code&gt;Publisher&lt;/code&gt; -&amp;gt; &lt;code&gt;Book&lt;/code&gt; reverse foreign key hop):</source>
          <target state="translated">예를 들어, 우리는 각각의 총 장부 재고 카운터로 주석이 달린 모든 출판사를 요청할 수 있습니다 ( &lt;code&gt;'book'&lt;/code&gt; 을 사용하여 &lt;code&gt;Publisher&lt;/code&gt; -&amp;gt; &lt;code&gt;Book&lt;/code&gt; 역 외래 키 홉 지정 방법 참고 ).</target>
        </trans-unit>
        <trans-unit id="eea4002354c2c1b943b967909d300e907d4041a2" translate="yes" xml:space="preserve">
          <source>For example, we can use &lt;code&gt;self&lt;/code&gt; to flash a message to the user informing her that the action was successful:</source>
          <target state="translated">예를 들어, &lt;code&gt;self&lt;/code&gt; 를 사용 하여 사용자에게 조치가 성공했음을 알리는 메시지를 플래시 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="1acd4d7ad1ed66dba1c0cefd87c20a2d7472d4db" translate="yes" xml:space="preserve">
          <source>For example, we could look up the &lt;a href=&quot;#django.contrib.contenttypes.models.ContentType&quot;&gt;&lt;code&gt;ContentType&lt;/code&gt;&lt;/a&gt; for the &lt;a href=&quot;auth#django.contrib.auth.models.User&quot;&gt;&lt;code&gt;User&lt;/code&gt;&lt;/a&gt; model:</source>
          <target state="translated">예를 들어 &lt;a href=&quot;auth#django.contrib.auth.models.User&quot;&gt; &lt;code&gt;User&lt;/code&gt; &lt;/a&gt; 모델 의 &lt;a href=&quot;#django.contrib.contenttypes.models.ContentType&quot;&gt; &lt;code&gt;ContentType&lt;/code&gt; &lt;/a&gt; 을 찾을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1a8b1692e49384722e8905fb2cbb4fa05d20ef09" translate="yes" xml:space="preserve">
          <source>For example, when a Django admin change-list page is being filtered by a date drilldown, the header for a given day displays the day and month. Different locales have different formats. For example, U.S. English would say &amp;ldquo;January 1,&amp;rdquo; whereas Spanish might say &amp;ldquo;1 Enero.&amp;rdquo;</source>
          <target state="translated">예를 들어 Django 관리자 변경 목록 페이지를 날짜 드릴 다운으로 필터링하면 특정 요일의 헤더에 요일과 월이 표시됩니다. 로케일마다 형식이 다릅니다. 예를 들어 미국 영어는 &quot;1 월 1 일&quot;이고 스페인어는 &quot;1 Enero&quot;라고 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f8dc18b9983c5e73e9a4d6fb5ebe694cc177e142" translate="yes" xml:space="preserve">
          <source>For example, when a Django admin change-list page is being filtered by a date drilldown, the header for a given month displays the month and the year. Different locales have different formats. For example, U.S. English would say &amp;ldquo;January 2006,&amp;rdquo; whereas another locale might say &amp;ldquo;2006/January.&amp;rdquo;</source>
          <target state="translated">예를 들어 Django 관리자 변경 목록 페이지를 날짜 드릴 다운으로 필터링하면 주어진 달의 헤더에 월과 연도가 표시됩니다. 로케일마다 형식이 다릅니다. 예를 들어 미국 영어는 &quot;2006 년 1 월&quot;이라고 말하고 다른 로케일은 &quot;2006/1 월&quot;이라고 말할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2e328d173ac5ec7f169e494ddd47a73938cf810d" translate="yes" xml:space="preserve">
          <source>For example, when configuring your application with &lt;code&gt;mod_wsgi&lt;/code&gt;, set the &lt;code&gt;WSGIDaemonProcess&lt;/code&gt; attribute &lt;code&gt;threads&lt;/code&gt; to &lt;code&gt;1&lt;/code&gt;, unless Apache may crash when running your GeoDjango application. Increase the number of &lt;code&gt;processes&lt;/code&gt; instead.</source>
          <target state="translated">예를 들어 &lt;code&gt;mod_wsgi&lt;/code&gt; 로 애플리케이션을 구성 할 때 GeoDjango 애플리케이션을 실행할 때 Apache가 충돌하지 않는 한 &lt;code&gt;WSGIDaemonProcess&lt;/code&gt; 속성 &lt;code&gt;threads&lt;/code&gt; 를 &lt;code&gt;1&lt;/code&gt; 로 설정하십시오 . 대신 &lt;code&gt;processes&lt;/code&gt; 수를 늘리십시오 .</target>
        </trans-unit>
        <trans-unit id="f39be411ce21100d9f857b6a4f43b2db6d1961b7" translate="yes" xml:space="preserve">
          <source>For example, when using PostgreSQL:</source>
          <target state="translated">예를 들어 PostgreSQL을 사용하는 경우 :</target>
        </trans-unit>
        <trans-unit id="d801ed460f9666b79fe2663b1c3338bf1f54313b" translate="yes" xml:space="preserve">
          <source>For example, when you are working with blog entries, you may want to know the number of authors that have contributed blog entries:</source>
          <target state="translated">예를 들어 블로그 항목을 작업 할 때 블로그 항목을 제공 한 작성자 수를 알고 싶을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2b79f03ac8c03a283c065d9796342d378859d632" translate="yes" xml:space="preserve">
          <source>For example, while our tests here have covered some of the internal logic of a model and the way our views publish information, you can use an &amp;ldquo;in-browser&amp;rdquo; framework such as &lt;a href=&quot;http://seleniumhq.org/&quot;&gt;Selenium&lt;/a&gt; to test the way your HTML actually renders in a browser. These tools allow you to check not just the behavior of your Django code, but also, for example, of your JavaScript. It&amp;rsquo;s quite something to see the tests launch a browser, and start interacting with your site, as if a human being were driving it! Django includes &lt;a href=&quot;../topics/testing/tools#django.test.LiveServerTestCase&quot;&gt;&lt;code&gt;LiveServerTestCase&lt;/code&gt;&lt;/a&gt; to facilitate integration with tools like Selenium.</source>
          <target state="translated">예를 들어 여기의 테스트에서는 모델의 일부 내부 논리와 뷰가 정보를 게시하는 방식을 다루었지만 &lt;a href=&quot;http://seleniumhq.org/&quot;&gt;Selenium&lt;/a&gt; 과 같은 &quot;브라우저&quot;프레임 워크를 사용 하여 HTML이 브라우저에서 실제로 렌더링되는 방식을 테스트 할 수 있습니다. 이 도구를 사용하면 Django 코드의 동작뿐만 아니라 JavaScript의 동작도 확인할 수 있습니다. 테스트를 통해 브라우저가 실행되고 마치 마치 마치 마치 마치 마치 마치 사이트를 운영하는 것처럼 사이트와 상호 작용하는 것을 볼 수 있습니다. Django에는 Selenium과 같은 도구와 쉽게 통합 할 수있는 &lt;a href=&quot;../topics/testing/tools#django.test.LiveServerTestCase&quot;&gt; &lt;code&gt;LiveServerTestCase&lt;/code&gt; &lt;/a&gt; 가 포함되어 있습니다 .</target>
        </trans-unit>
        <trans-unit id="2a8d5ade2984d816b5ba35345366f0f5cdb5aed6" translate="yes" xml:space="preserve">
          <source>For example, you can apply &lt;code&gt;escape&lt;/code&gt; to fields when &lt;a href=&quot;#std:templatetag-autoescape&quot;&gt;&lt;code&gt;autoescape&lt;/code&gt;&lt;/a&gt; is off:</source>
          <target state="translated">예를 들어, 적용 할 수있는 &lt;code&gt;escape&lt;/code&gt; 할 때 필드를 &lt;a href=&quot;#std:templatetag-autoescape&quot;&gt; &lt;code&gt;autoescape&lt;/code&gt; 이&lt;/a&gt; 꺼져 :</target>
        </trans-unit>
        <trans-unit id="8bc687cb81bdb45486d590586550de931ed0c5e2" translate="yes" xml:space="preserve">
          <source>For example, you can change the file name by setting the file&amp;rsquo;s &lt;a href=&quot;../ref/files/file#django.core.files.File.name&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/a&gt; to a path relative to the file storage&amp;rsquo;s location (&lt;a href=&quot;../ref/settings#std:setting-MEDIA_ROOT&quot;&gt;&lt;code&gt;MEDIA_ROOT&lt;/code&gt;&lt;/a&gt; if you are using the default &lt;a href=&quot;../ref/files/storage#django.core.files.storage.FileSystemStorage&quot;&gt;&lt;code&gt;FileSystemStorage&lt;/code&gt;&lt;/a&gt;):</source>
          <target state="translated">예를 들어, 파일의 설정하여 파일 이름을 변경할 수 있습니다 &lt;a href=&quot;../ref/files/file#django.core.files.File.name&quot;&gt; &lt;code&gt;name&lt;/code&gt; &lt;/a&gt; 파일 저장 위치 (상대 경로로 &lt;a href=&quot;../ref/settings#std:setting-MEDIA_ROOT&quot;&gt; &lt;code&gt;MEDIA_ROOT&lt;/code&gt; &lt;/a&gt; 기본 사용하는 경우 &lt;a href=&quot;../ref/files/storage#django.core.files.storage.FileSystemStorage&quot;&gt; &lt;code&gt;FileSystemStorage&lt;/code&gt; 을&lt;/a&gt; ) :</target>
        </trans-unit>
        <trans-unit id="a64b2eae0f2e3122826d90162479de6db7d3a972" translate="yes" xml:space="preserve">
          <source>For example, you can create &lt;code&gt;myproject/jinja2.py&lt;/code&gt; with this content:</source>
          <target state="translated">예를 들어 다음 내용으로 &lt;code&gt;myproject/jinja2.py&lt;/code&gt; 를 만들 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="653060a437deca46c9784c2247d45d68a7488a98" translate="yes" xml:space="preserve">
          <source>For example, you can use &lt;code&gt;__file__&lt;/code&gt; to determine that all test classes in the same file that inherit from &lt;code&gt;SerializeMixin&lt;/code&gt; will run sequentially:</source>
          <target state="translated">예를 들어 &lt;code&gt;__file__&lt;/code&gt; 을 사용 하여 &lt;code&gt;SerializeMixin&lt;/code&gt; 에서 상속 된 동일한 파일의 모든 테스트 클래스가 순차적으로 실행 되는지 확인할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="fce9e67559c456c24bd95eaa2912a8a62168b7d6" translate="yes" xml:space="preserve">
          <source>For example, you can use this method to remove the built-in &amp;ldquo;delete selected objects&amp;rdquo; action:</source>
          <target state="translated">예를 들어,이 방법을 사용하여 내장 된 &quot;선택한 객체 삭제&quot;작업을 제거 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="66f7438bda04c7668c447a88a582dfeaace04a30" translate="yes" xml:space="preserve">
          <source>For example, you could register a callback in an &lt;a href=&quot;applications#django.apps.AppConfig&quot;&gt;&lt;code&gt;AppConfig&lt;/code&gt;&lt;/a&gt; like this:</source>
          <target state="translated">예를 들어 다음 과 같이 &lt;a href=&quot;applications#django.apps.AppConfig&quot;&gt; &lt;code&gt;AppConfig&lt;/code&gt; 에&lt;/a&gt; 콜백을 등록 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d8c30e71ee2cc2a2bb4c4f8504db692a7e61d7cc" translate="yes" xml:space="preserve">
          <source>For example, you might start implementing an iTunes RSS feed generator like so:</source>
          <target state="translated">예를 들어 다음과 같이 iTunes RSS 피드 생성기를 시작할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="46c746d6fcc46e0acd37d896e4c4f63b43c64144" translate="yes" xml:space="preserve">
          <source>For example, your &lt;a href=&quot;../../ref/settings#std:setting-MIDDLEWARE&quot;&gt;&lt;code&gt;MIDDLEWARE&lt;/code&gt;&lt;/a&gt; might look like this:</source>
          <target state="translated">예를 들어, &lt;a href=&quot;../../ref/settings#std:setting-MIDDLEWARE&quot;&gt; &lt;code&gt;MIDDLEWARE&lt;/code&gt; &lt;/a&gt; 는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="dd639e78a671d339c67b021cf0995153fafb1e13" translate="yes" xml:space="preserve">
          <source>For example, your company may already have an LDAP setup that stores a username and password for every employee. It&amp;rsquo;d be a hassle for both the network administrator and the users themselves if users had separate accounts in LDAP and the Django-based applications.</source>
          <target state="translated">예를 들어 회사에 모든 직원의 사용자 이름과 비밀번호를 저장하는 LDAP 설정이 이미있을 수 있습니다. 사용자가 LDAP 및 Django 기반 응용 프로그램에서 별도의 계정을 가지고 있다면 네트워크 관리자와 사용자 모두에게 번거 로움이 될 것입니다.</target>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="2ae3dc38163522a8032cf18284668e2d51924570" translate="yes" xml:space="preserve">
          <source>For examples, read the &lt;a href=&quot;https://github.com/django/django/blob/master/django/template/loaders&quot;&gt;source code for Django&amp;rsquo;s built-in loaders&lt;/a&gt;.</source>
          <target state="translated">예를 들어, &lt;a href=&quot;https://github.com/django/django/blob/master/django/template/loaders&quot;&gt;장고 내장 로더의 소스 코드를&lt;/a&gt; 읽으십시오 .</target>
        </trans-unit>
        <trans-unit id="272a0b24158a86fc7beae49b7557b362b5df31da" translate="yes" xml:space="preserve">
          <source>For extra readability, you can optionally give a &lt;em&gt;name&lt;/em&gt; to your &lt;code&gt;{% endblock %}&lt;/code&gt; tag. For example:</source>
          <target state="translated">가독성을 높이기 위해 선택적으로 &lt;code&gt;{% endblock %}&lt;/code&gt; 태그에 &lt;em&gt;이름&lt;/em&gt; 을 지정할 수 있습니다 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="30a4ee71ab009210385b0f7253fc8e8296d807be" translate="yes" xml:space="preserve">
          <source>For fields like &lt;a href=&quot;#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;ForeignKey&lt;/code&gt;&lt;/a&gt; that map to model instances, defaults should be the value of the field they reference (&lt;code&gt;pk&lt;/code&gt; unless &lt;a href=&quot;#django.db.models.ForeignKey.to_field&quot;&gt;&lt;code&gt;to_field&lt;/code&gt;&lt;/a&gt; is set) instead of model instances.</source>
          <target state="translated">모델 인스턴스에 매핑되는 &lt;a href=&quot;#django.db.models.ForeignKey&quot;&gt; &lt;code&gt;ForeignKey&lt;/code&gt; &lt;/a&gt; 와 같은 필드의 경우 기본값은 모델 인스턴스 대신 참조하는 필드의 값 ( &lt;a href=&quot;#django.db.models.ForeignKey.to_field&quot;&gt; &lt;code&gt;to_field&lt;/code&gt; &lt;/a&gt; 가 설정 되지 않은 경우 &lt;code&gt;pk&lt;/code&gt; ) 이어야 합니다.</target>
        </trans-unit>
        <trans-unit id="f78db508803596606e73e0d0a98b1dfa781a1d8a" translate="yes" xml:space="preserve">
          <source>For fine-grained control over the character encoding of your test database, use the &lt;a href=&quot;../../ref/settings#std:setting-TEST_CHARSET&quot;&gt;&lt;code&gt;CHARSET&lt;/code&gt;&lt;/a&gt; TEST option. If you&amp;rsquo;re using MySQL, you can also use the &lt;a href=&quot;../../ref/settings#std:setting-TEST_COLLATION&quot;&gt;&lt;code&gt;COLLATION&lt;/code&gt;&lt;/a&gt; option to control the particular collation used by the test database. See the &lt;a href=&quot;../../ref/settings&quot;&gt;settings documentation&lt;/a&gt; for details of these and other advanced settings.</source>
          <target state="translated">테스트 데이터베이스의 문자 인코딩을 세밀하게 제어하려면 &lt;a href=&quot;../../ref/settings#std:setting-TEST_CHARSET&quot;&gt; &lt;code&gt;CHARSET&lt;/code&gt; &lt;/a&gt; TEST 옵션을 사용하십시오 . MySQL을 사용하는 경우 &lt;a href=&quot;../../ref/settings#std:setting-TEST_COLLATION&quot;&gt; &lt;code&gt;COLLATION&lt;/code&gt; &lt;/a&gt; 옵션을 사용하여 테스트 데이터베이스에서 사용되는 특정 데이터 정렬을 제어 할 수도 있습니다 . 이러한 설정 및 기타 고급 설정에 대한 자세한 내용은 &lt;a href=&quot;../../ref/settings&quot;&gt;설정 설명서&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="36474a55d2c1798e1a7007aeb9803aa08abc73bf" translate="yes" xml:space="preserve">
          <source>For flexibility, the output does &lt;em&gt;not&lt;/em&gt; include the &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;/table&amp;gt;&lt;/code&gt; tags, nor does it include the &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;/form&amp;gt;&lt;/code&gt; tags or an &lt;code&gt;&amp;lt;input type=&quot;submit&quot;&amp;gt;&lt;/code&gt; tag. It&amp;rsquo;s your job to do that.</source>
          <target state="translated">유연성 출력 하는가 &lt;em&gt;하지&lt;/em&gt; 인클루드 &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; 와 &lt;code&gt;&amp;lt;/table&amp;gt;&lt;/code&gt; 태그 않으며 인클루드 않는 &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; 및 &lt;code&gt;&amp;lt;/form&amp;gt;&lt;/code&gt; 태그 또는 &lt;code&gt;&amp;lt;input type=&quot;submit&quot;&amp;gt;&lt;/code&gt; 태그. 그렇게하는 것이 당신의 일입니다.</target>
        </trans-unit>
        <trans-unit id="307bc0d9062e63004232297eb9326c743bf8ea6d" translate="yes" xml:space="preserve">
          <source>For full details on generic views, see the &lt;a href=&quot;../topics/class-based-views/index&quot;&gt;generic views documentation&lt;/a&gt;.</source>
          <target state="translated">일반보기에 대한 자세한 내용은 &lt;a href=&quot;../topics/class-based-views/index&quot;&gt;일반보기 설명서를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="2cbdabb024a73903c71e4869d4c1a7e7454e9e0b" translate="yes" xml:space="preserve">
          <source>For full details on testing, see &lt;a href=&quot;../topics/testing/index&quot;&gt;Testing in Django&lt;/a&gt;.</source>
          <target state="translated">테스트에 대한 자세한 내용 &lt;a href=&quot;../topics/testing/index&quot;&gt;은 Django&lt;/a&gt; 에서 테스트를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="bc370485be81f4d5b9dc6275e4bf8fd187d0db71" translate="yes" xml:space="preserve">
          <source>For good measure, let&amp;rsquo;s also include the &lt;code&gt;was_published_recently()&lt;/code&gt; method from &lt;a href=&quot;tutorial02&quot;&gt;Tutorial 2&lt;/a&gt;:</source>
          <target state="translated">좋은 측정을 위해 &lt;a href=&quot;tutorial02&quot;&gt;튜토리얼 2&lt;/a&gt; 의 &lt;code&gt;was_published_recently()&lt;/code&gt; 메소드 도 포함시켜 보자 .</target>
        </trans-unit>
        <trans-unit id="45dc7c8b265d368652d0fd88b7904da9a61cc95a" translate="yes" xml:space="preserve">
          <source>For historical reasons, both the generic support for template engines and the implementation of the Django template language live in the &lt;code&gt;django.template&lt;/code&gt; namespace.</source>
          <target state="translated">역사적 이유로 템플릿 엔진에 대한 일반적인 지원과 Django 템플릿 언어의 구현은 &lt;code&gt;django.template&lt;/code&gt; 네임 스페이스에 있습니다.</target>
        </trans-unit>
        <trans-unit id="de99d7f373c7b60840c2ac2264755119e7847202" translate="yes" xml:space="preserve">
          <source>For individual variables</source>
          <target state="translated">개별 변수</target>
        </trans-unit>
        <trans-unit id="234b2463d3262fe6585942096c146c09c2ffdabb" translate="yes" xml:space="preserve">
          <source>For information about serving the static files (images, JavaScript, and CSS) associated with the admin in production, see &lt;a href=&quot;../../../howto/deployment/wsgi/modwsgi#serving-files&quot;&gt;Serving files&lt;/a&gt;.</source>
          <target state="translated">정적 파일을 제공에 대한 자세한 내용 (이미지, 자바 스크립트, CSS) 생산 관리자와 연관는 참조 &lt;a href=&quot;../../../howto/deployment/wsgi/modwsgi#serving-files&quot;&gt;파일을 서빙&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="3b99bcaecd02955383d58cab1f164fc0e3d49fe3" translate="yes" xml:space="preserve">
          <source>For information about unit-testing the sending of emails in your application, see the &lt;a href=&quot;testing/tools#topics-testing-email&quot;&gt;Email services&lt;/a&gt; section of the testing documentation.</source>
          <target state="translated">응용 프로그램에서 전자 메일 전송을 단위 테스트하는 방법에 대한 자세한 내용은 테스트 설명서 의 &lt;a href=&quot;testing/tools#topics-testing-email&quot;&gt;전자 메일 서비스&lt;/a&gt; 섹션을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="cd54b3b047434d8162788e4a6a248fdd5819fd87" translate="yes" xml:space="preserve">
          <source>For information on the &lt;code&gt;Vary&lt;/code&gt; header, see &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html#section-7.1.4&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;RFC 7231#section-7.1.4&lt;/strong&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Vary&lt;/code&gt; 헤더 에 대한 자세한 내용 은 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html#section-7.1.4&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;RFC 7231 # section-7.1.4를&lt;/strong&gt;&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="290116039acf1bacd476abe3a958e4a6fb6ea6e9" translate="yes" xml:space="preserve">
          <source>For information on writing your own custom tags and filters, see &lt;a href=&quot;../../howto/custom-template-tags&quot;&gt;Custom template tags and filters&lt;/a&gt;.</source>
          <target state="translated">고유 한 사용자 정의 태그 및 필터 작성에 대한 정보는 &lt;a href=&quot;../../howto/custom-template-tags&quot;&gt;사용자 정의 템플리트 태그 및 필터를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="6424a9f5f542b33588d1226b07acb7eead968504" translate="yes" xml:space="preserve">
          <source>For instance, if your database connection is dropped because your process was killed without a chance to shut down gracefully, your rollback hook will never run.</source>
          <target state="translated">예를 들어, 프로세스가 정상적으로 종료되지 않고 프로세스가 종료되어 데이터베이스 연결이 끊어지면 롤백 후크가 실행되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="68e3a5785f60b6a48e4ba13601647820dd287426" translate="yes" xml:space="preserve">
          <source>For instance, suppose you have the following objects in your fixture:</source>
          <target state="translated">예를 들어, 조명기에 다음과 같은 오브젝트가 있다고 가정하십시오.</target>
        </trans-unit>
        <trans-unit id="26552709d9c194254fefe31b1351503fbe45c30a" translate="yes" xml:space="preserve">
          <source>For instance, suppose you&amp;rsquo;ve written a &lt;code&gt;ProgressBarUploadHandler&lt;/code&gt; that provides feedback on upload progress to some sort of AJAX widget. You&amp;rsquo;d add this handler to your upload handlers like this:</source>
          <target state="translated">예를 들어, 일종의 AJAX 위젯에 업로드 진행률에 대한 피드백을 제공 하는 &lt;code&gt;ProgressBarUploadHandler&lt;/code&gt; 를 작성했다고 가정하십시오 . 이 핸들러를 다음과 같이 업로드 핸들러에 추가합니다.</target>
        </trans-unit>
        <trans-unit id="414de469af9e6bdec3a4931a955f107e92261403" translate="yes" xml:space="preserve">
          <source>For instance, the following &lt;code&gt;{% blocktrans %}&lt;/code&gt; tag:</source>
          <target state="translated">예를 들어, 다음 &lt;code&gt;{% blocktrans %}&lt;/code&gt; 태그 :</target>
        </trans-unit>
        <trans-unit id="6b46d91dc6ffcc21985af173f6cc4f1f0a426295" translate="yes" xml:space="preserve">
          <source>For instance, to filter out &lt;a href=&quot;../ref/exceptions#django.http.UnreadablePostError&quot;&gt;&lt;code&gt;UnreadablePostError&lt;/code&gt;&lt;/a&gt; (raised when a user cancels an upload) from the admin emails, you would create a filter function:</source>
          <target state="translated">예를 들어 관리자 전자 메일에서 &lt;a href=&quot;../ref/exceptions#django.http.UnreadablePostError&quot;&gt; &lt;code&gt;UnreadablePostError&lt;/code&gt; &lt;/a&gt; (사용자가 업로드를 취소 할 때 발생)를 필터링하려면 필터 기능을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="ba2af6015ca6f46f35561fed445489f2b6c6f7aa" translate="yes" xml:space="preserve">
          <source>For instance, you can fetch all the messages to return them in a &lt;a href=&quot;../../topics/class-based-views/mixins#jsonresponsemixin-example&quot;&gt;JSONResponseMixin&lt;/a&gt; instead of a &lt;a href=&quot;../class-based-views/mixins-simple#django.views.generic.base.TemplateResponseMixin&quot;&gt;&lt;code&gt;TemplateResponseMixin&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">예를 들어, 모든 메시지를 가져 와서 &lt;a href=&quot;../class-based-views/mixins-simple#django.views.generic.base.TemplateResponseMixin&quot;&gt; &lt;code&gt;TemplateResponseMixin&lt;/code&gt; &lt;/a&gt; 대신 &lt;a href=&quot;../../topics/class-based-views/mixins#jsonresponsemixin-example&quot;&gt;JSONResponseMixin&lt;/a&gt; 으로 반환 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="abc897209b2f98b7966665fa36a5eddbbc44f66d" translate="yes" xml:space="preserve">
          <source>For instance:</source>
          <target state="translated">예를 들어 :</target>
        </trans-unit>
        <trans-unit id="cc39ed624666c7f7da40e46bbe2e48992146ded6" translate="yes" xml:space="preserve">
          <source>For introductory material, see the &lt;a href=&quot;../topics/migrations&quot;&gt;migrations topic guide&lt;/a&gt;.</source>
          <target state="translated">소개 자료는 &lt;a href=&quot;../topics/migrations&quot;&gt;마이그레이션 주제 안내서를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="e6e8a914b4cd4754faff872acedddbbbebed6ac3" translate="yes" xml:space="preserve">
          <source>For large amounts of text, use &lt;a href=&quot;#django.db.models.TextField&quot;&gt;&lt;code&gt;TextField&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">많은 양의 텍스트에는 &lt;a href=&quot;#django.db.models.TextField&quot;&gt; &lt;code&gt;TextField&lt;/code&gt; 를&lt;/a&gt; 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="887fa8d25ac98e1581cec62efb96cab221abb0ed" translate="yes" xml:space="preserve">
          <source>For macOS users building from source, the SpatiaLite library &lt;em&gt;and&lt;/em&gt; tools need to have their &lt;code&gt;target&lt;/code&gt; configured:</source>
          <target state="translated">소스에서 빌드하는 macOS 사용자의 경우 SpatiaLite 라이브러리 &lt;em&gt;및&lt;/em&gt; 도구에 &lt;code&gt;target&lt;/code&gt; 구성 해야 합니다.</target>
        </trans-unit>
        <trans-unit id="646e8054ab0fca896879a33d04bc31e6303c296d" translate="yes" xml:space="preserve">
          <source>For macOS, follow the &lt;a href=&quot;#spatialite-macos&quot;&gt;instructions below&lt;/a&gt;.</source>
          <target state="translated">macOS의 경우 &lt;a href=&quot;#spatialite-macos&quot;&gt;아래 지침을&lt;/a&gt; 따르십시오 .</target>
        </trans-unit>
        <trans-unit id="7981bb262d83ddad7517a39735875c26f39042b6" translate="yes" xml:space="preserve">
          <source>For many uses, this type of model inheritance will be exactly what you want. It provides a way to factor out common information at the Python level, while still only creating one database table per child model at the database level.</source>
          <target state="translated">많은 용도에서이 유형의 모델 상속은 정확히 원하는 것입니다. 파이썬 수준에서 공통 정보를 제외하고 데이터베이스 수준에서 하위 모델 당 하나의 데이터베이스 테이블 만 작성하는 방법을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="90c3793798204d7ec9cd509aa73f1dad9d1ba931" translate="yes" xml:space="preserve">
          <source>For many-to-many relationships, the &lt;code&gt;bulk&lt;/code&gt; keyword argument doesn&amp;rsquo;t exist.</source>
          <target state="translated">다 대다 관계의 경우 &lt;code&gt;bulk&lt;/code&gt; 키워드 인수가 존재하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="1bdb3d660cc3d32d0750ff6b772aa62cda1fcc57" translate="yes" xml:space="preserve">
          <source>For maximum flexibility you can use a &lt;a href=&quot;../models/fields#django.db.models.TextField&quot;&gt;&lt;code&gt;TextField&lt;/code&gt;&lt;/a&gt; which doesn&amp;rsquo;t have a maximum length defined, however this may incur significant performance penalties depending on your database backend.</source>
          <target state="translated">최대 유연성을 위해 최대 길이가 정의되지 않은 &lt;a href=&quot;../models/fields#django.db.models.TextField&quot;&gt; &lt;code&gt;TextField&lt;/code&gt; &lt;/a&gt; 를 사용할 수 있지만 데이터베이스 백엔드에 따라 상당한 성능 저하가 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7df13100159bd891985f8503c5cf4765d9c91a6d" translate="yes" xml:space="preserve">
          <source>For maximum performance the chunk sizes should be divisible by &lt;code&gt;4&lt;/code&gt; and should not exceed 2 GB (2&lt;sup&gt;31&lt;/sup&gt; bytes) in size. When there are multiple chunk sizes provided by multiple handlers, Django will use the smallest chunk size defined by any handler.</source>
          <target state="translated">성능을 최대화하려면 청크 크기를 &lt;code&gt;4&lt;/code&gt; 로 나눌 수 있어야하며 크기가 2GB (2 &lt;sup&gt;31&lt;/sup&gt; 바이트)를 초과하지 않아야 합니다. 여러 핸들러에서 여러 청크 크기를 제공하면 Django는 모든 핸들러에서 정의한 가장 작은 청크 크기를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="d61a6fa699444c95bc1a164ecde97b8625d9aecb" translate="yes" xml:space="preserve">
          <source>For maximum security, make sure database servers only accept connections from your application servers.</source>
          <target state="translated">보안을 극대화하려면 데이터베이스 서버가 응용 프로그램 서버의 연결 만 허용해야합니다.</target>
        </trans-unit>
        <trans-unit id="e72d3d0d1fc526db06a844c569e485c559459803" translate="yes" xml:space="preserve">
          <source>For model methods, you can provide translations to Django and the admin site with the &lt;code&gt;short_description&lt;/code&gt; attribute:</source>
          <target state="translated">모델 메소드의 경우 &lt;code&gt;short_description&lt;/code&gt; 속성을 사용하여 Django 및 관리 사이트에 번역을 제공 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="92461d6b7569ceb9d592fdcda46397f4b4800918" translate="yes" xml:space="preserve">
          <source>For models with &lt;a href=&quot;../../ref/models/fields#django.db.models.DateTimeField&quot;&gt;&lt;code&gt;DateTimeField&lt;/code&gt;&lt;/a&gt;s, this difference makes it impossible to write a fixture that works both with and without time zone support.</source>
          <target state="translated">&lt;a href=&quot;../../ref/models/fields#django.db.models.DateTimeField&quot;&gt; &lt;code&gt;DateTimeField&lt;/code&gt; 가있는&lt;/a&gt; 모델 의 경우이 차이로 인해 시간대 지원 유무에 관계없이 작동하는 조명기를 작성할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="49b3de7edbebd211dd7ff278502ceb70044dbf4e" translate="yes" xml:space="preserve">
          <source>For more advanced usage, please read the &lt;a href=&quot;https://www.uvicorn.org/&quot;&gt;Uvicorn documentation&lt;/a&gt;.</source>
          <target state="translated">고급 사용법에 대해서는 &lt;a href=&quot;https://www.uvicorn.org/&quot;&gt;Uvicorn 설명서&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="b80fa68cea99b15fffbc89201e3c467cd1b053fb" translate="yes" xml:space="preserve">
          <source>For more background on bulk deletion, see the documentation on &lt;a href=&quot;../../../topics/db/queries#topics-db-queries-delete&quot;&gt;object deletion&lt;/a&gt;.</source>
          <target state="translated">대량 삭제에 대한 자세한 내용은 &lt;a href=&quot;../../../topics/db/queries#topics-db-queries-delete&quot;&gt;객체 삭제&lt;/a&gt; 에 대한 설명서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="0a1adcc239169ef12814a275fc30399f1c85dd83" translate="yes" xml:space="preserve">
          <source>For more complex layout needs, see the &lt;a href=&quot;#django.contrib.admin.ModelAdmin.fieldsets&quot;&gt;&lt;code&gt;fieldsets&lt;/code&gt;&lt;/a&gt; option.</source>
          <target state="translated">보다 복잡한 레이아웃 요구 사항은 &lt;a href=&quot;#django.contrib.admin.ModelAdmin.fieldsets&quot;&gt; &lt;code&gt;fieldsets&lt;/code&gt; &lt;/a&gt; 옵션을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="32b5d1ffea64854e5dc114b7011626d822147b6b" translate="yes" xml:space="preserve">
          <source>For more complex matching requirements, you can define your own path converters.</source>
          <target state="translated">보다 복잡한 일치 요구 사항을 위해 고유 한 경로 변환기를 정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="927662c7cc1246dd8074042eda95f7d27a71dae2" translate="yes" xml:space="preserve">
          <source>For more complex uses, you can specify &lt;code&gt;queryset=None&lt;/code&gt; when declaring the form field and then populate the &lt;code&gt;queryset&lt;/code&gt; in the form&amp;rsquo;s &lt;code&gt;__init__()&lt;/code&gt; method:</source>
          <target state="translated">보다 복잡한 사용을 위해 양식 필드를 선언 할 때 &lt;code&gt;queryset=None&lt;/code&gt; 을 지정한 다음 양식의 &lt;code&gt;__init__()&lt;/code&gt; 메소드 에서 &lt;code&gt;queryset&lt;/code&gt; 를 채울 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="9c7a561c755b8b99014a324afed6b156256f214f" translate="yes" xml:space="preserve">
          <source>For more detail on email services during tests, see &lt;a href=&quot;#email-services&quot;&gt;Email services&lt;/a&gt; below.</source>
          <target state="translated">테스트 중 이메일 서비스에 대한 자세한 내용은 아래 &lt;a href=&quot;#email-services&quot;&gt;이메일 서비스를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="58d93ccb14220145a2c6fca50940bafc44dcc747" translate="yes" xml:space="preserve">
          <source>For more details about &lt;a href=&quot;https://docs.python.org/3/library/unittest.html#module-unittest&quot;&gt;&lt;code&gt;unittest&lt;/code&gt;&lt;/a&gt;, see the Python documentation.</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/3/library/unittest.html#module-unittest&quot;&gt; &lt;code&gt;unittest&lt;/code&gt; 에&lt;/a&gt; 대한 자세한 내용은 Python 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="279c403bd9877b581693f60194f2a97a5ba59890" translate="yes" xml:space="preserve">
          <source>For more details about lazy translation objects, refer to the &lt;a href=&quot;../topics/i18n/index&quot;&gt;internationalization&lt;/a&gt; documentation.</source>
          <target state="translated">지연 번역 개체에 대한 자세한 내용은 &lt;a href=&quot;../topics/i18n/index&quot;&gt;국제화&lt;/a&gt; 설명서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="c91404f6c889c489cf3d003955f19ee00a527e9b" translate="yes" xml:space="preserve">
          <source>For more details check out the documentation for the &lt;a href=&quot;../../ref/models/options#django.db.models.Options.db_table&quot;&gt;&lt;code&gt;db_table&lt;/code&gt;&lt;/a&gt; option, which also lets you manually set the database table name.</source>
          <target state="translated">자세한 내용 은 데이터베이스 테이블 이름을 수동으로 설정할 수 있는 &lt;a href=&quot;../../ref/models/options#django.db.models.Options.db_table&quot;&gt; &lt;code&gt;db_table&lt;/code&gt; &lt;/a&gt; 옵션에 대한 설명서를 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="d4d38d949517b0545a046291c4a15a26813a9aef" translate="yes" xml:space="preserve">
          <source>For more details on model managers see &lt;a href=&quot;../../topics/db/managers&quot;&gt;Managers&lt;/a&gt; and &lt;a href=&quot;../../topics/db/queries#retrieving-objects&quot;&gt;Retrieving objects&lt;/a&gt;.</source>
          <target state="translated">모델 관리자에 대한 자세한 내용은 &lt;a href=&quot;../../topics/db/managers&quot;&gt;관리자&lt;/a&gt; 및 &lt;a href=&quot;../../topics/db/queries#retrieving-objects&quot;&gt;객체 검색을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="4bc77db85f86d3d6fec4931aa2ff1b8ffdf631d6" translate="yes" xml:space="preserve">
          <source>For more details see the full &lt;a href=&quot;../ref/settings#std:setting-ALLOWED_HOSTS&quot;&gt;&lt;code&gt;ALLOWED_HOSTS&lt;/code&gt;&lt;/a&gt; documentation.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;../ref/settings#std:setting-ALLOWED_HOSTS&quot;&gt; &lt;code&gt;ALLOWED_HOSTS&lt;/code&gt; &lt;/a&gt; 설명서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="06b27c392cc30c92586b791b3ec5b50aecc9db68" translate="yes" xml:space="preserve">
          <source>For more details, including how to delete objects in bulk, see &lt;a href=&quot;../../topics/db/queries#topics-db-queries-delete&quot;&gt;Deleting objects&lt;/a&gt;.</source>
          <target state="translated">대량으로 객체를 삭제하는 방법을 포함하여 자세한 내용은 &lt;a href=&quot;../../topics/db/queries#topics-db-queries-delete&quot;&gt;객체 삭제를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="58944a24a7ff7566b422852003d421341ec97e61" translate="yes" xml:space="preserve">
          <source>For more details, see &lt;a href=&quot;https://docs.python.org/3/using/windows.html&quot;&gt;Using Python on Windows&lt;/a&gt; documentation.</source>
          <target state="translated">자세한 내용 &lt;a href=&quot;https://docs.python.org/3/using/windows.html&quot;&gt;은 Windows에서 Python 사용&lt;/a&gt; 설명서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="37b106025ca0fc4e4f97a3dfdac7754b69b6a287" translate="yes" xml:space="preserve">
          <source>For more details, see the documentation on &lt;a href=&quot;../../../topics/http/urls#topics-http-reversing-url-namespaces&quot;&gt;reversing namespaced URLs&lt;/a&gt;.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;../../../topics/http/urls#topics-http-reversing-url-namespaces&quot;&gt;네임 스페이스 URL 반전에&lt;/a&gt; 대한 설명서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="1ea938600e698e46c90b0b325211f0c2d855ff0d" translate="yes" xml:space="preserve">
          <source>For more details, see the documentation on &lt;a href=&quot;expressions#django.db.models.F&quot;&gt;&lt;code&gt;F expressions&lt;/code&gt;&lt;/a&gt; and their &lt;a href=&quot;../../topics/db/queries#topics-db-queries-update&quot;&gt;use in update queries&lt;/a&gt;.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;expressions#django.db.models.F&quot;&gt; &lt;code&gt;F expressions&lt;/code&gt; &lt;/a&gt; 에 대한 설명서 및 &lt;a href=&quot;../../topics/db/queries#topics-db-queries-update&quot;&gt;업데이트 쿼리에서&lt;/a&gt; 의 사용법을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="9a621660b9ffadb4df494ab924cbcdfcef1860d1" translate="yes" xml:space="preserve">
          <source>For more direct control over message tags, you can optionally provide a string containing extra tags to any of the add methods:</source>
          <target state="translated">메시지 태그에 대한 직접적인 제어를 위해 추가 메소드에 추가 태그가 포함 된 문자열을 선택적으로 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="141974db682fbfc34db800660186aada5cbcbc3d" translate="yes" xml:space="preserve">
          <source>For more examples of complex rendering, see the source code of &lt;a href=&quot;../ref/templates/builtins#std:templatetag-for&quot;&gt;&lt;code&gt;{% for %}&lt;/code&gt;&lt;/a&gt; in &lt;code&gt;django/template/defaulttags.py&lt;/code&gt; and &lt;a href=&quot;../ref/templates/builtins#std:templatetag-if&quot;&gt;&lt;code&gt;{% if %}&lt;/code&gt;&lt;/a&gt; in &lt;code&gt;django/template/smartif.py&lt;/code&gt;.</source>
          <target state="translated">복잡한 렌더링의 더 많은 예를 들어, 소스 코드를 참조 &lt;a href=&quot;../ref/templates/builtins#std:templatetag-for&quot;&gt; &lt;code&gt;{% for %}&lt;/code&gt; &lt;/a&gt; 의 &lt;code&gt;django/template/defaulttags.py&lt;/code&gt; 및 &lt;a href=&quot;../ref/templates/builtins#std:templatetag-if&quot;&gt; &lt;code&gt;{% if %}&lt;/code&gt; &lt;/a&gt; 의 &lt;code&gt;django/template/smartif.py&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3c4063c11b1c88b2cb8977a2db5a6f85a2224915" translate="yes" xml:space="preserve">
          <source>For more granular control over the generated markup, you can loop over the radio buttons in the template. Assuming a form &lt;code&gt;myform&lt;/code&gt; with a field &lt;code&gt;beatles&lt;/code&gt; that uses a &lt;code&gt;RadioSelect&lt;/code&gt; as its widget:</source>
          <target state="translated">생성 된 마크 업을보다 세밀하게 제어하려면 템플릿의 라디오 버튼을 반복 할 수 있습니다. &lt;code&gt;RadioSelect&lt;/code&gt; 를 위젯으로 사용하는 필드 &lt;code&gt;beatles&lt;/code&gt; 가 있는 양식 &lt;code&gt;myform&lt;/code&gt; 을 가정하면 다음 과 같습니다.</target>
        </trans-unit>
        <trans-unit id="9b494e2fa30daa12b2bd73081b7a08f5f69a79a3" translate="yes" xml:space="preserve">
          <source>For more information about the differences between the &lt;a href=&quot;#django.db.models.FloatField&quot;&gt;&lt;code&gt;FloatField&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#django.db.models.DecimalField&quot;&gt;&lt;code&gt;DecimalField&lt;/code&gt;&lt;/a&gt; classes, please see &lt;a href=&quot;#floatfield-vs-decimalfield&quot;&gt;FloatField vs. DecimalField&lt;/a&gt;. You should also be aware of &lt;a href=&quot;../databases#sqlite-decimal-handling&quot;&gt;SQLite limitations&lt;/a&gt; of decimal fields.</source>
          <target state="translated">사이의 차이점에 대한 자세한 내용은 &lt;a href=&quot;#django.db.models.FloatField&quot;&gt; &lt;code&gt;FloatField&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#django.db.models.DecimalField&quot;&gt; &lt;code&gt;DecimalField&lt;/code&gt; &lt;/a&gt; 클래스를 참조하시기 바랍니다 &lt;a href=&quot;#floatfield-vs-decimalfield&quot;&gt;DecimalField 대 FloatField을&lt;/a&gt; . 10 진 필드 의 &lt;a href=&quot;../databases#sqlite-decimal-handling&quot;&gt;SQLite 제한 사항&lt;/a&gt; 도 알고 있어야 합니다.</target>
        </trans-unit>
        <trans-unit id="2a1e4b92c4b1299cae94418ff1f466ba63e1902f" translate="yes" xml:space="preserve">
          <source>For more information creating &lt;a href=&quot;geos#django.contrib.gis.geos.GEOSGeometry&quot;&gt;&lt;code&gt;GEOSGeometry&lt;/code&gt;&lt;/a&gt; objects, refer to the &lt;a href=&quot;geos#geos-tutorial&quot;&gt;GEOS tutorial&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;geos#django.contrib.gis.geos.GEOSGeometry&quot;&gt; &lt;code&gt;GEOSGeometry&lt;/code&gt; &lt;/a&gt; 객체 생성에 대한 자세한 내용 은 &lt;a href=&quot;geos#geos-tutorial&quot;&gt;GEOS 튜토리얼을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="0bee8a00911e8ae017f5711d9b8ada409c9899e9" translate="yes" xml:space="preserve">
          <source>For more information on how the &lt;code&gt;takes_context&lt;/code&gt; option works, see the section on &lt;a href=&quot;#howto-custom-template-tags-inclusion-tags&quot;&gt;inclusion tags&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;takes_context&lt;/code&gt; 옵션의 작동 방식 에 대한 자세한 내용 은 &lt;a href=&quot;#howto-custom-template-tags-inclusion-tags&quot;&gt;포함 태그&lt;/a&gt; 섹션을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="4792337d74fb41aff8fd3fe24b774ed7a7075b39" translate="yes" xml:space="preserve">
          <source>For more information on how the minimum recorded level functions, see &lt;a href=&quot;#message-levels&quot;&gt;Message levels&lt;/a&gt; above.</source>
          <target state="translated">최소 녹음 수준의 기능에 대한 자세한 내용은 위의 &lt;a href=&quot;#message-levels&quot;&gt;메시지 수준을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="64b1e8bbb3b4a7db0536ac5a57afad76d21f96bc" translate="yes" xml:space="preserve">
          <source>For more information on how to use the built in generic views, consult the next topic on &lt;a href=&quot;generic-display&quot;&gt;generic class-based views&lt;/a&gt;.</source>
          <target state="translated">기본 제공 일반보기를 사용하는 방법에 대한 자세한 정보는 &lt;a href=&quot;generic-display&quot;&gt;일반 클래스 기반보기&lt;/a&gt; 에 대한 다음 주제를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="ad2faa17c504056bb79721f41478b5cf93ee8f17" translate="yes" xml:space="preserve">
          <source>For more information on model relations, see &lt;a href=&quot;../ref/models/relations&quot;&gt;Accessing related objects&lt;/a&gt;. For more on how to use double underscores to perform field lookups via the API, see &lt;a href=&quot;../topics/db/queries#field-lookups-intro&quot;&gt;Field lookups&lt;/a&gt;. For full details on the database API, see our &lt;a href=&quot;../topics/db/queries&quot;&gt;Database API reference&lt;/a&gt;.</source>
          <target state="translated">모델 관계에 대한 자세한 정보는 &lt;a href=&quot;../ref/models/relations&quot;&gt;관련 오브젝트 액세스를&lt;/a&gt; 참조하십시오 . API를 통해 필드의 조회를 수행하는 이중 밑줄을 사용하는 방법에 대한 자세한 내용은 참조 &lt;a href=&quot;../topics/db/queries#field-lookups-intro&quot;&gt;필드 조회를&lt;/a&gt; . 데이터베이스 API에 대한 자세한 내용은 &lt;a href=&quot;../topics/db/queries&quot;&gt;데이터베이스 API 참조를 참조하십시오&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="47742209ee4799ec64202e500131a5f0d472ae00" translate="yes" xml:space="preserve">
          <source>For more information on packaging, see Python&amp;rsquo;s &lt;a href=&quot;https://packaging.python.org/tutorials/packaging-projects/&quot;&gt;Tutorial on Packaging and Distributing Projects&lt;/a&gt;.</source>
          <target state="translated">패키징에 대한 자세한 내용은 &lt;a href=&quot;https://packaging.python.org/tutorials/packaging-projects/&quot;&gt;프로젝트 패키징 및 배포에&lt;/a&gt; 대한 Python의 자습서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="b76778341e9f02ca90fe2cf2d88dfefa40bcc8d4" translate="yes" xml:space="preserve">
          <source>For more information on the &lt;a href=&quot;../ref/templates/builtins#std:templatetag-load&quot;&gt;&lt;code&gt;load&lt;/code&gt;&lt;/a&gt; tag, read its documentation.</source>
          <target state="translated">&lt;a href=&quot;../ref/templates/builtins#std:templatetag-load&quot;&gt; &lt;code&gt;load&lt;/code&gt; &lt;/a&gt; 태그 에 대한 자세한 내용은 해당 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="d49e90b5333ff6e7b10e9aa6b8723a99b2576658" translate="yes" xml:space="preserve">
          <source>For more information on these method properties, see &lt;a href=&quot;../ref/contrib/admin/index#django.contrib.admin.ModelAdmin.list_display&quot;&gt;&lt;code&gt;list_display&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이러한 메소드 특성에 대한 자세한 정보는 &lt;a href=&quot;../ref/contrib/admin/index#django.contrib.admin.ModelAdmin.list_display&quot;&gt; &lt;code&gt;list_display&lt;/code&gt; 를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="0ff6a17e4f7b67e13f5fdfcf8eaa8d0bded74b48" translate="yes" xml:space="preserve">
          <source>For more information on writing documentation, including an explanation of what the &lt;code&gt;versionadded&lt;/code&gt; bit is all about, see &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/internals/contributing/writing-documentation/&quot;&gt;Writing documentation&lt;/a&gt;. That page also includes an explanation of how to build a copy of the documentation locally, so you can preview the HTML that will be generated.</source>
          <target state="translated">&lt;code&gt;versionadded&lt;/code&gt; 비트에 대한 설명을 포함하여 문서 작성에 대한 자세한 내용은 문서 &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/internals/contributing/writing-documentation/&quot;&gt;작성을&lt;/a&gt; 참조하십시오 . 이 페이지에는 문서 사본을 로컬로 빌드하는 방법에 대한 설명도 포함되어 있으므로 생성 될 HTML을 미리 볼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="45eeaf25d42cc3ec94406a92208edd5d8c956951" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;../../topics/files&quot;&gt;Managing files&lt;/a&gt;.</source>
          <target state="translated">자세한 정보는 &lt;a href=&quot;../../topics/files&quot;&gt;파일 관리를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="507910ab48efd1e93e0e343542bffdc9600bdabb" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;../topics/i18n/translation#contextual-markers&quot;&gt;Contextual markers&lt;/a&gt;.</source>
          <target state="translated">자세한 정보는 &lt;a href=&quot;../topics/i18n/translation#contextual-markers&quot;&gt;상황 별 마커를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="2f7819aec51ef804e62612079347d58584eacfda" translate="yes" xml:space="preserve">
          <source>For more information, the PostGIS documentation contains a helpful section on determining &lt;a href=&quot;https://postgis.net/docs/using_postgis_dbmanagement.html#PostGIS_GeographyVSGeometry&quot;&gt;when to use geography data type over geometry data type&lt;/a&gt;.</source>
          <target state="translated">자세한 정보는 PostGIS 문서 &lt;a href=&quot;https://postgis.net/docs/using_postgis_dbmanagement.html#PostGIS_GeographyVSGeometry&quot;&gt;에 지오메트리 데이터 유형에 대해 지리 데이터 유형을 사용할시기를&lt;/a&gt; 결정하는 데 유용한 섹션이 포함되어 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e11836e7ccec0efc67c0aecc25c8cf7c68e9aee0" translate="yes" xml:space="preserve">
          <source>For more on Vary headers, see the &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html#section-7.1.4&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;official Vary spec&lt;/strong&gt;&lt;/a&gt;.</source>
          <target state="translated">Vary 헤더에 대한 자세한 내용은 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html#section-7.1.4&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;공식 Vary 사양을&lt;/strong&gt;&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="f98a38a01f75e7ab202c7bd8b9f2425154d8e515" translate="yes" xml:space="preserve">
          <source>For more on middleware, read the &lt;a href=&quot;../../topics/http/middleware&quot;&gt;middleware docs&lt;/a&gt;.</source>
          <target state="translated">미들웨어에 대한 자세한 내용은 &lt;a href=&quot;../../topics/http/middleware&quot;&gt;미들웨어 문서를 참조하십시오&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="b267b1a01114ee31ea6d8b05c668877f539be841" translate="yes" xml:space="preserve">
          <source>For more on pagination, read the &lt;a href=&quot;../../topics/pagination&quot;&gt;pagination documentation&lt;/a&gt;.</source>
          <target state="translated">페이지 매김에 대한 자세한 내용은 페이지 &lt;a href=&quot;../../topics/pagination&quot;&gt;매김 문서를&lt;/a&gt; 읽으십시오 .</target>
        </trans-unit>
        <trans-unit id="2c64c486c65888eb52c7539f1424def530e76016" translate="yes" xml:space="preserve">
          <source>For more on sending email from Django, see &lt;a href=&quot;../email&quot;&gt;Sending email&lt;/a&gt;.</source>
          <target state="translated">Django에서 이메일을 보내는 방법에 대한 자세한 내용은 이메일 &lt;a href=&quot;../email&quot;&gt;보내기를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="8c84dff282ea6b93fe47d293a1e314b08fecbd81" translate="yes" xml:space="preserve">
          <source>For more options like annotated HTML listings detailing missed lines, see the &lt;a href=&quot;https://coverage.readthedocs.io/&quot;&gt;coverage.py&lt;/a&gt; docs.</source>
          <target state="translated">누락 된 행을 자세히 설명하는 주석이 달린 HTML 목록과 같은 추가 옵션에 대해서는 &lt;a href=&quot;https://coverage.readthedocs.io/&quot;&gt;coverage.py&lt;/a&gt; 문서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="6192f961c1d3c6a9a50f39fae25b2121f6bd5f5e" translate="yes" xml:space="preserve">
          <source>For more, see the &lt;a href=&quot;../ref/django-admin#django-admin-diffsettings&quot;&gt;&lt;code&gt;diffsettings&lt;/code&gt;&lt;/a&gt; documentation.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;../ref/django-admin#django-admin-diffsettings&quot;&gt; &lt;code&gt;diffsettings&lt;/code&gt; &lt;/a&gt; 설명서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="3a80d5abe99712d4e4d9829a7ea208844f71d27f" translate="yes" xml:space="preserve">
          <source>For more, see the section &amp;ldquo;The database API&amp;rdquo; below.</source>
          <target state="translated">자세한 내용은 아래의&amp;ldquo;데이터베이스 API&amp;rdquo;섹션을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="1b54050c09bf8dd84ccee5cc3f84ec8431f97bae" translate="yes" xml:space="preserve">
          <source>For most Web applications, this overhead isn&amp;rsquo;t a big deal. Most Web applications aren&amp;rsquo;t &lt;code&gt;washingtonpost.com&lt;/code&gt; or &lt;code&gt;slashdot.org&lt;/code&gt;; they&amp;rsquo;re small- to medium-sized sites with so-so traffic. But for medium- to high-traffic sites, it&amp;rsquo;s essential to cut as much overhead as possible.</source>
          <target state="translated">대부분의 웹 응용 프로그램에서이 오버 헤드는 큰 문제가 아닙니다. 대부분의 웹 응용 프로그램은 &lt;code&gt;washingtonpost.com&lt;/code&gt; 또는 &lt;code&gt;slashdot.org&lt;/code&gt; 가 아닙니다 . 트래픽이 많은 중소 규모 사이트입니다. 그러나 트래픽이 많은 사이트에서 트래픽이 많은 사이트의 경우 가능한 한 많은 오버 헤드를 줄이는 것이 중요합니다.</target>
        </trans-unit>
        <trans-unit id="237201716598097e525fd6c1250b48cbeab9d611" translate="yes" xml:space="preserve">
          <source>For most aggregates, there is no way to avoid this problem, however, the &lt;a href=&quot;../../ref/models/querysets#django.db.models.Count&quot;&gt;&lt;code&gt;Count&lt;/code&gt;&lt;/a&gt; aggregate has a &lt;code&gt;distinct&lt;/code&gt; parameter that may help:</source>
          <target state="translated">대부분의 집계에는이 문제를 피할 수있는 방법이 없지만 &lt;a href=&quot;../../ref/models/querysets#django.db.models.Count&quot;&gt; &lt;code&gt;Count&lt;/code&gt; &lt;/a&gt; 집계에는 다음과 같은 &lt;code&gt;distinct&lt;/code&gt; 매개 변수가 있습니다.</target>
        </trans-unit>
        <trans-unit id="2003ca8d7dc771b03d7546f025676603513b8695" translate="yes" xml:space="preserve">
          <source>For most backends, raw queries (&lt;code&gt;Manager.raw()&lt;/code&gt; or &lt;code&gt;cursor.execute()&lt;/code&gt;) can use the &amp;ldquo;pyformat&amp;rdquo; parameter style, where placeholders in the query are given as &lt;code&gt;'%(name)s'&lt;/code&gt; and the parameters are passed as a dictionary rather than a list. SQLite does not support this.</source>
          <target state="translated">대부분의 백엔드에서 원시 쿼리 ( &lt;code&gt;Manager.raw()&lt;/code&gt; 또는 &lt;code&gt;cursor.execute()&lt;/code&gt; )는&amp;ldquo;pyformat&amp;rdquo;매개 변수 스타일을 사용할 수 있습니다. 여기서 쿼리의 자리 표시자는 &lt;code&gt;'%(name)s'&lt;/code&gt; 되고 매개 변수는 목록이 아닌 사전. SQLite는 이것을 지원하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="0c24ff4760969777f23c45dfeee5f192e54f490c" translate="yes" xml:space="preserve">
          <source>For most of these add-ons &amp;ndash; specifically, the add-ons that include either models or template tags &amp;ndash; you&amp;rsquo;ll need to add the package name (e.g., &lt;code&gt;'django.contrib.redirects'&lt;/code&gt;) to your &lt;a href=&quot;../settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; setting and re-run &lt;code&gt;manage.py migrate&lt;/code&gt;.</source>
          <target state="translated">이러한 부가 기능의 대부분, 특히 모델 또는 템플릿 태그를 포함하는 부가 기능의 경우 패키지 이름 (예 : &lt;code&gt;'django.contrib.redirects'&lt;/code&gt; )을 &lt;a href=&quot;../settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt; 설정에 추가하고 다시 실행해야합니다. &lt;code&gt;manage.py migrate&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5773200065e50b8ffe12fb94d74fc2c7ae73b54b" translate="yes" xml:space="preserve">
          <source>For much better performance on WGS84 distance queries, consider using &lt;a href=&quot;model-api#geography-type&quot;&gt;geography columns&lt;/a&gt; in your database instead because they are able to use their spatial index in distance queries. You can tell GeoDjango to use a geography column by setting &lt;code&gt;geography=True&lt;/code&gt; in your field definition.</source>
          <target state="translated">WGS84 거리 쿼리에서 훨씬 더 나은 성능을 얻으 려면 거리 쿼리에서 공간 인덱스를 사용할 수 있으므로 데이터베이스에서 &lt;a href=&quot;model-api#geography-type&quot;&gt;지리 열&lt;/a&gt; 을 대신 사용해보십시오. 필드 정의에서 &lt;code&gt;geography=True&lt;/code&gt; 를 설정하여 지리 열을 사용하도록 GeoDjango에 지시 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="b6b394a2c0488d27e61669101145e755c23a05b0" translate="yes" xml:space="preserve">
          <source>For nearly all cases, Django&amp;rsquo;s built-in template language is perfectly adequate. However, if the bottlenecks in your Django project seem to lie in the template system and you have exhausted other opportunities to remedy this, a third-party alternative may be the answer.</source>
          <target state="translated">거의 모든 경우에 Django의 내장 템플릿 언어가 완벽하게 적합합니다. 그러나 Django 프로젝트의 병목 현상이 템플릿 시스템에있는 것 같고이를 해결할 수있는 다른 기회를 소진 한 경우 타사 대안이 답이 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9e4c6979b5930dafd8445167fefb3b15671217be" translate="yes" xml:space="preserve">
          <source>For nested loops, this is the loop surrounding the current one</source>
          <target state="translated">중첩 루프의 경우 현재 루프를 둘러싼 루프입니다.</target>
        </trans-unit>
        <trans-unit id="e7fb3dd6ecf24e63b43dbe6b3f6682455af38f1f" translate="yes" xml:space="preserve">
          <source>For non-AJAX requests, the fallback will always be performed.</source>
          <target state="translated">AJAX가 아닌 요청의 경우 대체가 항상 수행됩니다.</target>
        </trans-unit>
        <trans-unit id="7e79ed355486bc2713b8435fdfa927d098abc733" translate="yes" xml:space="preserve">
          <source>For numbers 1-9, returns the number spelled out. Otherwise, returns the number. This follows Associated Press style.</source>
          <target state="translated">숫자 1-9의 경우 철자가 표시된 숫자를 반환합니다. 그렇지 않으면 숫자를 반환합니다. 이것은 AP 통신 스타일을 따릅니다.</target>
        </trans-unit>
        <trans-unit id="e7dad50022091ec1e5f0adb635e178d5aa50e5ee" translate="yes" xml:space="preserve">
          <source>For our &lt;code&gt;Hand&lt;/code&gt; example, we could convert the card data to a string of 104 characters by concatenating all the cards together in a pre-determined order &amp;ndash; say, all the &lt;em&gt;north&lt;/em&gt; cards first, then the &lt;em&gt;east&lt;/em&gt;, &lt;em&gt;south&lt;/em&gt; and &lt;em&gt;west&lt;/em&gt; cards. So &lt;code&gt;Hand&lt;/code&gt; objects can be saved to text or character columns in the database.</source>
          <target state="translated">우리의 경우 &lt;code&gt;Hand&lt;/code&gt; 말하자면 모든 - 예를 들어, 우리는 미리 정해진 순서대로 함께 모든 카드를 연결하여 104 개 문자의 문자열로 카드 데이터를 변환 할 수 있습니다 &lt;em&gt;북쪽&lt;/em&gt; 첫번째 카드, 다음, &lt;em&gt;동쪽&lt;/em&gt; , &lt;em&gt;남쪽&lt;/em&gt; 과 &lt;em&gt;서쪽에&lt;/em&gt; 카드를. 따라서 &lt;code&gt;Hand&lt;/code&gt; 객체는 데이터베이스의 텍스트 또는 문자 열에 저장할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c129b37c8b665fe90f9785807f4f5c5f296c1d9b" translate="yes" xml:space="preserve">
          <source>For performance reasons, &lt;a href=&quot;#django.test.TestCase&quot;&gt;&lt;code&gt;TestCase&lt;/code&gt;&lt;/a&gt; loads fixtures once for the entire test class, before &lt;a href=&quot;#django.test.TestCase.setUpTestData&quot;&gt;&lt;code&gt;setUpTestData()&lt;/code&gt;&lt;/a&gt;, instead of before each test, and it uses transactions to clean the database before each test. In any case, you can be certain that the outcome of a test will not be affected by another test or by the order of test execution.</source>
          <target state="translated">성능상의 이유로, &lt;a href=&quot;#django.test.TestCase&quot;&gt; &lt;code&gt;TestCase&lt;/code&gt; &lt;/a&gt; 는 각 테스트 이전이 아닌 &lt;a href=&quot;#django.test.TestCase.setUpTestData&quot;&gt; &lt;code&gt;setUpTestData()&lt;/code&gt; &lt;/a&gt; 전에 전체 테스트 클래스에 대해 픽스처를 한 번로드 하고 트랜잭션을 사용하여 각 테스트 전에 데이터베이스를 정리합니다. 어쨌든 테스트 결과는 다른 테스트 나 테스트 실행 순서에 영향을받지 않을 것입니다.</target>
        </trans-unit>
        <trans-unit id="2a4912a8f2e478cd373c6834ff23b62b982b832c" translate="yes" xml:space="preserve">
          <source>For performance reasons, &lt;code&gt;from_db_value&lt;/code&gt; is not implemented as a no-op on fields which do not require it (all Django fields). Consequently you may not call &lt;code&gt;super&lt;/code&gt; in your definition.</source>
          <target state="translated">성능상의 이유로 &lt;code&gt;from_db_value&lt;/code&gt; 는 필요하지 않은 필드 (모든 Django 필드)에서 no-op로 구현되지 않습니다. 결과적으로 당신은 당신의 정의에서 &lt;code&gt;super&lt;/code&gt; 를 호출 할 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="424ca8cab98f356a00ae4490061803f50b6ec450" translate="yes" xml:space="preserve">
          <source>For performance reasons, SQL logging is only enabled when &lt;code&gt;settings.DEBUG&lt;/code&gt; is set to &lt;code&gt;True&lt;/code&gt;, regardless of the logging level or handlers that are installed.</source>
          <target state="translated">성능상의 이유로, SQL 로깅은 &lt;code&gt;settings.DEBUG&lt;/code&gt; 가 설치된 로깅 레벨 또는 핸들러에 관계없이 &lt;code&gt;True&lt;/code&gt; 로 설정된 경우에만 사용 가능 합니다.</target>
        </trans-unit>
        <trans-unit id="42bb783ba8a3b6a8a71df6de2ff3296859069b89" translate="yes" xml:space="preserve">
          <source>For performance reasons, it&amp;rsquo;s preferable to do these redirects outside of Django, in a front-end load balancer or reverse-proxy server such as &lt;a href=&quot;https://nginx.org&quot;&gt;nginx&lt;/a&gt;. &lt;a href=&quot;settings#std:setting-SECURE_SSL_REDIRECT&quot;&gt;&lt;code&gt;SECURE_SSL_REDIRECT&lt;/code&gt;&lt;/a&gt; is intended for the deployment situations where this isn&amp;rsquo;t an option.</source>
          <target state="translated">성능상의 이유로 프론트 엔드로드 밸런서 또는 &lt;a href=&quot;https://nginx.org&quot;&gt;nginx&lt;/a&gt; 와 같은 리버스 프록시 서버에서 Django 외부에서 이러한 리디렉션을 수행하는 것이 좋습니다 . &lt;a href=&quot;settings#std:setting-SECURE_SSL_REDIRECT&quot;&gt; &lt;code&gt;SECURE_SSL_REDIRECT&lt;/code&gt; &lt;/a&gt; 는 옵션이 아닌 배포 상황을위한 것입니다.</target>
        </trans-unit>
        <trans-unit id="d9e63810971473602af5d7b1f5a81aa41157752d" translate="yes" xml:space="preserve">
          <source>For performance reasons, the &lt;a href=&quot;models/fields#django.db.models.Field&quot;&gt;&lt;code&gt;Field&lt;/code&gt;&lt;/a&gt; instances in &lt;code&gt;ModelState.fields&lt;/code&gt; are reused across migrations. You must never change the attributes on these instances. If you need to mutate a field in &lt;code&gt;state_forwards()&lt;/code&gt;, you must remove the old instance from &lt;code&gt;ModelState.fields&lt;/code&gt; and add a new instance in its place. The same is true for the &lt;a href=&quot;../topics/db/managers#django.db.models.Manager&quot;&gt;&lt;code&gt;Manager&lt;/code&gt;&lt;/a&gt; instances in &lt;code&gt;ModelState.managers&lt;/code&gt;.</source>
          <target state="translated">성능상의 이유로 &lt;code&gt;ModelState.fields&lt;/code&gt; 의 &lt;a href=&quot;models/fields#django.db.models.Field&quot;&gt; &lt;code&gt;Field&lt;/code&gt; &lt;/a&gt; 인스턴스는 마이그레이션에서 재사용됩니다. 이 인스턴스의 속성을 절대 변경해서는 안됩니다. &lt;code&gt;state_forwards()&lt;/code&gt; 에서 필드를 변경해야하는 경우 &lt;code&gt;ModelState.fields&lt;/code&gt; 에서 이전 인스턴스를 제거하고 그 자리에 새 인스턴스를 추가 해야합니다 . &lt;code&gt;ModelState.managers&lt;/code&gt; 의 &lt;a href=&quot;../topics/db/managers#django.db.models.Manager&quot;&gt; &lt;code&gt;Manager&lt;/code&gt; &lt;/a&gt; 인스턴스도 마찬가지입니다 .</target>
        </trans-unit>
        <trans-unit id="1a14665e6a70026da7b331f9bb19684d58424a07" translate="yes" xml:space="preserve">
          <source>For performance reasons, you shouldn&amp;rsquo;t perform queries in receivers of &lt;code&gt;pre_init&lt;/code&gt; or &lt;code&gt;post_init&lt;/code&gt; signals because they would be executed for each instance returned during queryset iteration.</source>
          <target state="translated">성능상의 이유로 &lt;code&gt;pre_init&lt;/code&gt; 또는 &lt;code&gt;post_init&lt;/code&gt; 신호의 수신기에서 쿼리를 수행하면 안됩니다. 쿼리 세트 반복 중에 반환 된 각 인스턴스에 대해 실행되기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="38a5583dc5a79edcb838768762f15c7d4aaba0f4" translate="yes" xml:space="preserve">
          <source>For persistent, cached data, set &lt;a href=&quot;../../ref/settings#std:setting-SESSION_ENGINE&quot;&gt;&lt;code&gt;SESSION_ENGINE&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;&quot;django.contrib.sessions.backends.cached_db&quot;&lt;/code&gt;. This uses a write-through cache &amp;ndash; every write to the cache will also be written to the database. Session reads only use the database if the data is not already in the cache.</source>
          <target state="translated">캐시 된 영구 데이터의 경우 &lt;a href=&quot;../../ref/settings#std:setting-SESSION_ENGINE&quot;&gt; &lt;code&gt;SESSION_ENGINE&lt;/code&gt; &lt;/a&gt; 을 &lt;code&gt;&quot;django.contrib.sessions.backends.cached_db&quot;&lt;/code&gt; 로 설정하십시오 . 이것은 write-through 캐시를 사용합니다. 캐시에 대한 모든 쓰기도 데이터베이스에 작성됩니다. 데이터가 캐시에없는 경우 세션 읽기는 데이터베이스 만 사용합니다.</target>
        </trans-unit>
        <trans-unit id="c7b8cf00020c5d1fb45cd748de93524d6d79b7bb" translate="yes" xml:space="preserve">
          <source>For raster data there is no difference between a raster instance and its data source. Unlike for the Geometry objects, &lt;a href=&quot;#django.contrib.gis.gdal.GDALRaster&quot;&gt;&lt;code&gt;GDALRaster&lt;/code&gt;&lt;/a&gt; objects are always a data source. Temporary rasters can be instantiated in memory using the corresponding driver, but they will be of the same class as file-based raster sources.</source>
          <target state="translated">래스터 데이터의 경우 래스터 인스턴스와 해당 데이터 소스간에 차이가 없습니다. Geometry 객체와 달리 &lt;a href=&quot;#django.contrib.gis.gdal.GDALRaster&quot;&gt; &lt;code&gt;GDALRaster&lt;/code&gt; &lt;/a&gt; 객체는 항상 데이터 소스입니다. 임시 래스터는 해당 드라이버를 사용하여 메모리에서 인스턴스화 할 수 있지만 파일 기반 래스터 소스와 동일한 클래스입니다.</target>
        </trans-unit>
        <trans-unit id="d75c22989ab8a302b73b82bc433278f518a6e000" translate="yes" xml:space="preserve">
          <source>For sample code, see the &lt;a href=&quot;examples/many_to_one&quot;&gt;Many-to-one relationship model example&lt;/a&gt;.</source>
          <target state="translated">샘플 코드는 다 &lt;a href=&quot;examples/many_to_one&quot;&gt;대일 관계 모델 예제를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="eb1ef97607904bce2dc6f3c32cc662efa95452e0" translate="yes" xml:space="preserve">
          <source>For security reasons, CSRF tokens are rotated each time a user logs in. Any page with a form generated before a login will have an old, invalid CSRF token and need to be reloaded. This might happen if a user uses the back button after a login or if they log in a different browser tab.</source>
          <target state="translated">보안상의 이유로 사용자가 로그인 할 때마다 CSRF 토큰이 순환됩니다. 로그인하기 전에 생성 된 양식이있는 페이지는 오래되고 유효하지 않은 CSRF 토큰을 가지므로 다시로드해야합니다. 사용자가 로그인 후 뒤로 버튼을 사용하거나 다른 브라우저 탭에 로그인 한 경우 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ae97a0fe5932f690f89f83cec189c6b17b10fb0f" translate="yes" xml:space="preserve">
          <source>For security reasons, the value of the secret is changed each time a user logs in.</source>
          <target state="translated">보안상의 이유로 사용자가 로그인 할 때마다 비밀 값이 변경됩니다.</target>
        </trans-unit>
        <trans-unit id="c6ff78cacaaf23691d024d9a0c7b10a2a87d6fbc" translate="yes" xml:space="preserve">
          <source>For security reasons, these permissions aren&amp;rsquo;t applied to the temporary files that are stored in &lt;a href=&quot;#std:setting-FILE_UPLOAD_TEMP_DIR&quot;&gt;&lt;code&gt;FILE_UPLOAD_TEMP_DIR&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">보안상의 이유로 이러한 권한은 &lt;a href=&quot;#std:setting-FILE_UPLOAD_TEMP_DIR&quot;&gt; &lt;code&gt;FILE_UPLOAD_TEMP_DIR&lt;/code&gt; 에&lt;/a&gt; 저장된 임시 파일에는 적용되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="d0ec9f02dce1101622a275e4df9d73b74bea9b32" translate="yes" xml:space="preserve">
          <source>For setting the &lt;code&gt;Cache-Control&lt;/code&gt; and &lt;code&gt;Vary&lt;/code&gt; header fields, it is recommended to use the &lt;a href=&quot;utils#django.utils.cache.patch_cache_control&quot;&gt;&lt;code&gt;patch_cache_control()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;utils#django.utils.cache.patch_vary_headers&quot;&gt;&lt;code&gt;patch_vary_headers()&lt;/code&gt;&lt;/a&gt; methods from &lt;a href=&quot;utils#module-django.utils.cache&quot;&gt;&lt;code&gt;django.utils.cache&lt;/code&gt;&lt;/a&gt;, since these fields can have multiple, comma-separated values. The &amp;ldquo;patch&amp;rdquo; methods ensure that other values, e.g. added by a middleware, are not removed.</source>
          <target state="translated">설정에 &lt;code&gt;Cache-Control&lt;/code&gt; 및 &lt;code&gt;Vary&lt;/code&gt; 헤더 필드, 사용을 권장 &lt;a href=&quot;utils#django.utils.cache.patch_cache_control&quot;&gt; &lt;code&gt;patch_cache_control()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;utils#django.utils.cache.patch_vary_headers&quot;&gt; &lt;code&gt;patch_vary_headers()&lt;/code&gt; &lt;/a&gt; 행 방법 &lt;a href=&quot;utils#module-django.utils.cache&quot;&gt; &lt;code&gt;django.utils.cache&lt;/code&gt; &lt;/a&gt; 이러한 필드 쉼표로 구분 된 여러 개의 값을 가질 수 있기 때문에. &quot;패치&quot;방법은 미들웨어에 의해 추가 된 다른 값이 제거되지 않도록합니다.</target>
        </trans-unit>
        <trans-unit id="db395fce05fd519b1a5fb650233cfd3a114f39b6" translate="yes" xml:space="preserve">
          <source>For settings that are sequences, Django itself uses lists, but this is only a convention.</source>
          <target state="translated">시퀀스 설정 인 경우 장고 자체는 목록을 사용하지만 이는 단지 규칙입니다.</target>
        </trans-unit>
        <trans-unit id="83441c6a3b1b803a2a49949c9de44602cd36d751" translate="yes" xml:space="preserve">
          <source>For simplifying the selection of a generator use &lt;code&gt;feedgenerator.DefaultFeed&lt;/code&gt; which is currently &lt;code&gt;Rss201rev2Feed&lt;/code&gt;</source>
          <target state="translated">발전기 선택을 단순화하려면 &lt;code&gt;feedgenerator.DefaultFeed&lt;/code&gt; 를 사용 하십시오. 이는 현재 &lt;code&gt;Rss201rev2Feed&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c8ceee4f01a0611046492d3c5b9cf5e18c66b04e" translate="yes" xml:space="preserve">
          <source>For sites running on a subpath, the &lt;a href=&quot;#django.contrib.admin.AdminSite.each_context&quot;&gt;&lt;code&gt;each_context()&lt;/code&gt;&lt;/a&gt; method checks if the current request has &lt;code&gt;request.META['SCRIPT_NAME']&lt;/code&gt; set and uses that value if &lt;code&gt;site_url&lt;/code&gt; isn&amp;rsquo;t set to something other than &lt;code&gt;/&lt;/code&gt;.</source>
          <target state="translated">하위 경로에서 실행되는 사이트의 경우 &lt;a href=&quot;#django.contrib.admin.AdminSite.each_context&quot;&gt; &lt;code&gt;each_context()&lt;/code&gt; &lt;/a&gt; 메서드는 현재 요청에 &lt;code&gt;request.META['SCRIPT_NAME']&lt;/code&gt; 이 설정되어 있는지 확인하고 &lt;code&gt;site_url&lt;/code&gt; 이 &lt;code&gt;/&lt;/code&gt; 이외의 값으로 설정되어 있지 않으면 해당 값을 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="d88e7dbe5892b15588501cbdb78f954dbe55235a" translate="yes" xml:space="preserve">
          <source>For sites that should only be accessed over HTTPS, you can instruct modern browsers to refuse to connect to your domain name via an insecure connection (for a given period of time) by setting the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security&quot;&gt;&amp;ldquo;Strict-Transport-Security&amp;rdquo; header&lt;/a&gt;. This reduces your exposure to some SSL-stripping man-in-the-middle (MITM) attacks.</source>
          <target state="translated">HTTPS를 통해서만 액세스해야하는 사이트의 경우, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security&quot;&gt;&quot;Strict-Transport-Security&quot;헤더&lt;/a&gt; 를 설정하여 최신 브라우저가 안전하지 않은 연결을 통해 (지정된 시간 동안) 도메인 이름에 대한 연결을 거부하도록 지시 할 수 있습니다 . 이렇게하면 SSL을 사용하는 MITM (man-in-the-middle) 공격에 대한 노출이 줄어 듭니다.</target>
        </trans-unit>
        <trans-unit id="060b3b6339590923baf49d02d89a5fd13364954d" translate="yes" xml:space="preserve">
          <source>For small projects, this isn&amp;rsquo;t a big deal, because you can keep the static files somewhere your web server can find it. However, in bigger projects &amp;ndash; especially those comprised of multiple apps &amp;ndash; dealing with the multiple sets of static files provided by each application starts to get tricky.</source>
          <target state="translated">소규모 프로젝트의 경우 웹 서버가 찾을 수있는 곳에 정적 파일을 보관할 수 있기 때문에 큰 문제가되지 않습니다. 그러나 더 큰 프로젝트, 특히 여러 앱으로 구성된 프로젝트에서는 각 응용 프로그램에서 제공하는 여러 정적 파일 세트를 처리하기가 까다로워지기 시작합니다.</target>
        </trans-unit>
        <trans-unit id="98244e053dd849bb49cb94789a244fc850fca33d" translate="yes" xml:space="preserve">
          <source>For subclasses of &lt;a href=&quot;customizing#django.contrib.auth.models.AbstractBaseUser&quot;&gt;&lt;code&gt;AbstractBaseUser&lt;/code&gt;&lt;/a&gt;, the password field will be marked as &amp;ldquo;dirty&amp;rdquo; when calling &lt;a href=&quot;customizing#django.contrib.auth.models.AbstractBaseUser.set_password&quot;&gt;&lt;code&gt;set_password()&lt;/code&gt;&lt;/a&gt; which triggers a call to &lt;code&gt;password_changed()&lt;/code&gt; after the user is saved.</source>
          <target state="translated">&lt;a href=&quot;customizing#django.contrib.auth.models.AbstractBaseUser&quot;&gt; &lt;code&gt;AbstractBaseUser&lt;/code&gt; 의&lt;/a&gt; 서브 클래스의 경우 , 사용자가 저장된 후 &lt;code&gt;password_changed()&lt;/code&gt; 대한 호출을 트리거하는 &lt;a href=&quot;customizing#django.contrib.auth.models.AbstractBaseUser.set_password&quot;&gt; &lt;code&gt;set_password()&lt;/code&gt; &lt;/a&gt; 를 호출하면 비밀번호 필드가 &quot;더티&quot;로 표시됩니다 .</target>
        </trans-unit>
        <trans-unit id="7d318e407a6068120e838ea61855cc437bf86be2" translate="yes" xml:space="preserve">
          <source>For template blocks</source>
          <target state="translated">템플릿 블록</target>
        </trans-unit>
        <trans-unit id="e232fed1b6bcfa5d4b03f84ef89534f5bc33dc67" translate="yes" xml:space="preserve">
          <source>For testing purposes it&amp;rsquo;s often useful to change a setting temporarily and revert to the original value after running the testing code. For this use case Django provides a standard Python context manager (see &lt;a href=&quot;https://www.python.org/dev/peps/pep-0343&quot; id=&quot;index-1&quot;&gt;&lt;strong&gt;PEP 343&lt;/strong&gt;&lt;/a&gt;) called &lt;a href=&quot;#django.test.SimpleTestCase.settings&quot;&gt;&lt;code&gt;settings()&lt;/code&gt;&lt;/a&gt;, which can be used like this:</source>
          <target state="translated">테스트 목적으로 테스트 코드를 실행 한 후 설정을 일시적으로 변경하고 원래 값으로 되 돌리는 것이 유용한 경우가 많습니다. 이 사용 사례를 위해 Django는 &lt;a href=&quot;#django.test.SimpleTestCase.settings&quot;&gt; &lt;code&gt;settings()&lt;/code&gt; &lt;/a&gt; 이라는 표준 Python 컨텍스트 관리자 ( &lt;a href=&quot;https://www.python.org/dev/peps/pep-0343&quot; id=&quot;index-1&quot;&gt;&lt;strong&gt;PEP 343&lt;/strong&gt;&lt;/a&gt; 참조 )를 제공하며 다음과 같이 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9a3f172015e88c657224148a415ba18aa223013e" translate="yes" xml:space="preserve">
          <source>For tests involving models with &lt;code&gt;managed=False&lt;/code&gt;, it&amp;rsquo;s up to you to ensure the correct tables are created as part of the test setup.</source>
          <target state="translated">&lt;code&gt;managed=False&lt;/code&gt; 인 모델과 관련된 테스트의 경우 테스트 설정의 일부로 올바른 테이블을 작성해야합니다.</target>
        </trans-unit>
        <trans-unit id="2f9c0332095ab8a71d4aec460d84e568f37e8252" translate="yes" xml:space="preserve">
          <source>For the &lt;code&gt;pre_add&lt;/code&gt; and &lt;code&gt;post_add&lt;/code&gt; actions, this is a set of primary key values that will be, or have been, added to the relation. This may be a subset of the values submitted to be added, since inserts must filter existing values in order to avoid a database &lt;code&gt;IntegrityError&lt;/code&gt;.</source>
          <target state="translated">를 들어 &lt;code&gt;pre_add&lt;/code&gt; 및 &lt;code&gt;post_add&lt;/code&gt; 행동이 관계에 추가 될 것입니다, 또는왔다 기본 키 값의 집합입니다. 삽입은 데이터베이스 &lt;code&gt;IntegrityError&lt;/code&gt; 를 피하기 위해 기존 값을 필터링해야하므로 추가 될 제출 된 값의 서브 세트 일 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="1a84d3af82f5a18d83c42438eac1f3056429345b" translate="yes" xml:space="preserve">
          <source>For the &lt;code&gt;pre_clear&lt;/code&gt; and &lt;code&gt;post_clear&lt;/code&gt; actions, this is &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">를 들어 &lt;code&gt;pre_clear&lt;/code&gt; 및 &lt;code&gt;post_clear&lt;/code&gt; 행동이 없다 &lt;code&gt;None&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="329abb7b505a558db32777a7ff6f0809b6e12296" translate="yes" xml:space="preserve">
          <source>For the &lt;code&gt;pre_remove&lt;/code&gt; and &lt;code&gt;post_remove&lt;/code&gt; actions, this is a set of primary key values that was submitted to be removed from the relation. This is not dependent on whether the values actually will be, or have been, removed. In particular, non-existent values may be submitted, and will appear in &lt;code&gt;pk_set&lt;/code&gt;, even though they have no effect on the database.</source>
          <target state="translated">를 들어 &lt;code&gt;pre_remove&lt;/code&gt; 및 &lt;code&gt;post_remove&lt;/code&gt; 행동이 관계로부터 제거 될 제출 된 기본 키 값의 집합입니다. 값이 실제로 제거되는지 또는 제거되었는지 여부에 따라 달라지지 않습니다. 특히 존재하지 않는 값이 제출 될 수 있으며 데이터베이스에 영향을 미치지 않더라도 &lt;code&gt;pk_set&lt;/code&gt; 에 나타납니다 .</target>
        </trans-unit>
        <trans-unit id="74408406b60615d45743eab1ddfc47c602695214" translate="yes" xml:space="preserve">
          <source>For the GeoJSON format, the SRID is set based on the &lt;code&gt;crs&lt;/code&gt; member. If &lt;code&gt;crs&lt;/code&gt; isn&amp;rsquo;t provided, the SRID defaults to 4326.</source>
          <target state="translated">GeoJSON 형식의 경우 SRID는 &lt;code&gt;crs&lt;/code&gt; 멤버를 기반으로 설정 됩니다. 경우 &lt;code&gt;crs&lt;/code&gt; 4326으로의 SRID 기본값으로 제공되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="9f111011b98ce2f688d0ddb4f6a33b857e6e115a" translate="yes" xml:space="preserve">
          <source>For the best performance, we&amp;rsquo;re using the queryset&amp;rsquo;s &lt;a href=&quot;../../../topics/db/queries#topics-db-queries-update&quot;&gt;update method&lt;/a&gt;. Other types of actions might need to deal with each object individually; in these cases we&amp;rsquo;d iterate over the queryset:</source>
          <target state="translated">최상의 성능을 위해 queryset의 &lt;a href=&quot;../../../topics/db/queries#topics-db-queries-update&quot;&gt;update 메소드를&lt;/a&gt; 사용하고 있습니다. 다른 유형의 작업은 각 개체를 개별적으로 처리해야 할 수도 있습니다. 이 경우 쿼리 세트를 반복합니다.</target>
        </trans-unit>
        <trans-unit id="4c23379d68f25c8a9acdf7f3ba3f8e6d99a624b7" translate="yes" xml:space="preserve">
          <source>For the case of building up small HTML fragments, this function is to be preferred over string interpolation using &lt;code&gt;%&lt;/code&gt; or &lt;code&gt;str.format()&lt;/code&gt; directly, because it applies escaping to all arguments - just like the template system applies escaping by default.</source>
          <target state="translated">작은 HTML 조각을 작성하는 경우이 함수는 템플릿 시스템이 기본적으로 이스케이프를 적용하는 것처럼 모든 인수에 이스케이프를 적용하기 때문에 &lt;code&gt;%&lt;/code&gt; 또는 &lt;code&gt;str.format()&lt;/code&gt; 직접 사용하는 문자열 보간보다 선호 됩니다.</target>
        </trans-unit>
        <trans-unit id="f78e1588dfac1ec79444a4df142e4e4efb203d49" translate="yes" xml:space="preserve">
          <source>For the contents of &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;description&amp;gt;&lt;/code&gt;, Django tries calling the methods &lt;code&gt;item_title()&lt;/code&gt; and &lt;code&gt;item_description()&lt;/code&gt; on the &lt;a href=&quot;#django.contrib.syndication.views.Feed&quot;&gt;&lt;code&gt;Feed&lt;/code&gt;&lt;/a&gt; class. They are passed a single parameter, &lt;code&gt;item&lt;/code&gt;, which is the object itself. These are optional; by default, the string representation of the object is used for both.</source>
          <target state="translated">&lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt; 및 &lt;code&gt;&amp;lt;description&amp;gt;&lt;/code&gt; 의 내용을 위해 Django는 &lt;a href=&quot;#django.contrib.syndication.views.Feed&quot;&gt; &lt;code&gt;Feed&lt;/code&gt; &lt;/a&gt; 클래스 에서 &lt;code&gt;item_title()&lt;/code&gt; 및 &lt;code&gt;item_description()&lt;/code&gt; 메소드를 호출하려고 시도합니다 . 객체 자체 인 단일 매개 변수 &lt;code&gt;item&lt;/code&gt; 이 전달 됩니다. 이들은 선택 사항입니다. 기본적으로 객체의 문자열 표현은 두 가지 모두에 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="3a100b67f88e203f9dcb6a68b5070534af27c2cc" translate="yes" xml:space="preserve">
          <source>For the examples in this document, we&amp;rsquo;ll use the models defined in &lt;a href=&quot;../../../topics/db/queries&quot;&gt;Making queries&lt;/a&gt;.</source>
          <target state="translated">이 문서의 예에서는 &lt;a href=&quot;../../../topics/db/queries&quot;&gt;쿼리 만들기에&lt;/a&gt; 정의 된 모델을 사용 합니다 .</target>
        </trans-unit>
        <trans-unit id="0de8894d683bc582fefb2e2661e012c06af647e2" translate="yes" xml:space="preserve">
          <source>For the minimalists</source>
          <target state="translated">미니멀리스트를 위해</target>
        </trans-unit>
        <trans-unit id="cef7fefd5112f5c97b053b255b193024fa56f694" translate="yes" xml:space="preserve">
          <source>For the most part though, this tutorial tries to explain as much as possible, so that it can be of use to the widest audience.</source>
          <target state="translated">그러나 대부분의 경우이 학습서는 가능한 많은 설명을 시도하여 광범위한 사용자에게 유용 할 수 있도록합니다.</target>
        </trans-unit>
        <trans-unit id="4eda37e1e901383da0e9bcd8f2f89429a892e9c5" translate="yes" xml:space="preserve">
          <source>For the related lookup you can supply a primary key value or pass the related object explicitly:</source>
          <target state="translated">관련 조회의 경우 기본 키 값을 제공하거나 관련 객체를 명시 적으로 전달할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b1c32504b6eeb2becd5604bc65d36c6e055e0d02" translate="yes" xml:space="preserve">
          <source>For the sake of clarity, this example contains only the bare minimum necessary to use the Django test runner. You may want to add command-line options for controlling verbosity, passing in specific test labels to run, etc.</source>
          <target state="translated">명확성을 기하기 위해이 예제에는 Django 테스트 러너를 사용하는 데 필요한 최소값 만 포함되어 있습니다. 자세한 제어, 실행을 위해 특정 테스트 레이블 전달 등을위한 명령 행 옵션을 추가 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5f11d49a6aae49822b402265acef00a873377414" translate="yes" xml:space="preserve">
          <source>For the sake of completeness, though, if you really want the local time in the current time zone, here&amp;rsquo;s how you can obtain it:</source>
          <target state="translated">그러나 완전성을 위해 현재 시간대의 현지 시간을 원한다면 다음과 같이 얻을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="da486ab20d9f226af43411c6fd7ef259674537fc" translate="yes" xml:space="preserve">
          <source>For the treatment of microseconds, see &lt;a href=&quot;#django.forms.DateTimeInput&quot;&gt;&lt;code&gt;DateTimeInput&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">마이크로 초 처리에 대해서는 &lt;a href=&quot;#django.forms.DateTimeInput&quot;&gt; &lt;code&gt;DateTimeInput&lt;/code&gt; 을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="5dbe5bec942d606e0b22e5c8723738bfa4f7ae50" translate="yes" xml:space="preserve">
          <source>For these reasons, time zone support is enabled by default in new projects, and you should keep it unless you have a very good reason not to.</source>
          <target state="translated">이러한 이유로 새 프로젝트에서는 표준 시간대 지원이 기본적으로 활성화되어 있으며, 적절한 이유가없는 한이를 유지해야합니다.</target>
        </trans-unit>
        <trans-unit id="6bfb383b014941483feb63040fddc8352fc62beb" translate="yes" xml:space="preserve">
          <source>For these situations, Django allows you to specify the model that will be used to govern the many-to-many relationship. You can then put extra fields on the intermediate model. The intermediate model is associated with the &lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField&quot;&gt;&lt;code&gt;ManyToManyField&lt;/code&gt;&lt;/a&gt; using the &lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField.through&quot;&gt;&lt;code&gt;through&lt;/code&gt;&lt;/a&gt; argument to point to the model that will act as an intermediary. For our musician example, the code would look something like this:</source>
          <target state="translated">이러한 상황에서 Django를 사용하면 다 대다 관계를 관리하는 데 사용될 모델을 지정할 수 있습니다. 그런 다음 중간 모델에 추가 필드를 넣을 수 있습니다. 중간 모델은 중간 인수 역할을하는 모델을 가리 키기 위해 &lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField.through&quot;&gt; &lt;code&gt;through&lt;/code&gt; &lt;/a&gt; 인수를 사용 하여 &lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField&quot;&gt; &lt;code&gt;ManyToManyField&lt;/code&gt; &lt;/a&gt; 와 연관됩니다 . 음악가 예제의 경우 코드는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="1e718289bca18a5cf08106be68227bdbbc0cff38" translate="yes" xml:space="preserve">
          <source>For this example, we&amp;rsquo;ll migrate a collection of SHA1 hashes to use PBKDF2(SHA1(password)) and add the corresponding password hasher for checking if a user entered the correct password on login. We assume we&amp;rsquo;re using the built-in &lt;code&gt;User&lt;/code&gt; model and that our project has an &lt;code&gt;accounts&lt;/code&gt; app. You can modify the pattern to work with any algorithm or with a custom user model.</source>
          <target state="translated">이 예에서는 PBKDF2 (SHA1 (password))를 사용하도록 SHA1 해시 모음을 마이그레이션하고 사용자가 로그인시 올바른 비밀번호를 입력했는지 확인하기 위해 해당 비밀번호 걸쇠를 추가합니다. 기본 제공 &lt;code&gt;User&lt;/code&gt; 모델을 사용하고 있고 프로젝트에 &lt;code&gt;accounts&lt;/code&gt; 앱 이 있다고 가정 합니다. 모든 알고리즘 또는 사용자 정의 사용자 모델에서 작동하도록 패턴을 수정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4c82d36cbfcfb825dad80c2b48699e4cff79ce4f" translate="yes" xml:space="preserve">
          <source>For this reason, Django also provides a number of mixins that provide more discrete functionality. Template rendering, for instance, is encapsulated in the &lt;a href=&quot;../../ref/class-based-views/mixins-simple#django.views.generic.base.TemplateResponseMixin&quot;&gt;&lt;code&gt;TemplateResponseMixin&lt;/code&gt;&lt;/a&gt;. The Django reference documentation contains &lt;a href=&quot;../../ref/class-based-views/mixins&quot;&gt;full documentation of all the mixins&lt;/a&gt;.</source>
          <target state="translated">이러한 이유로 Django는 더 많은 기능을 제공하는 여러 믹스 인도 제공합니다. 예를 들어 템플릿 렌더링은 &lt;a href=&quot;../../ref/class-based-views/mixins-simple#django.views.generic.base.TemplateResponseMixin&quot;&gt; &lt;code&gt;TemplateResponseMixin&lt;/code&gt; 에&lt;/a&gt; 캡슐화되어 있습니다. Django 참조 문서에는 &lt;a href=&quot;../../ref/class-based-views/mixins&quot;&gt;모든 믹스 인에 대한 전체 문서가&lt;/a&gt; 들어 있습니다 .</target>
        </trans-unit>
        <trans-unit id="0f36392b7c3c203f49f6a436c5f3171e9150a05e" translate="yes" xml:space="preserve">
          <source>For this reason, Django provides a helper class that lets you create a &lt;code&gt;Form&lt;/code&gt; class from a Django model.</source>
          <target state="translated">이러한 이유로 Django는 Django 모델에서 &lt;code&gt;Form&lt;/code&gt; 클래스 를 만들 수있는 도우미 클래스를 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="5892445e676a151c2605ebc83042a842018720fc" translate="yes" xml:space="preserve">
          <source>For this reason, it&amp;rsquo;s particularly important that all the models you&amp;rsquo;re using be defined in applications listed in &lt;a href=&quot;../../ref/settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt;. Otherwise, backwards relations may not work properly.</source>
          <target state="translated">따라서 사용중인 모든 모델을 &lt;a href=&quot;../../ref/settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; 에&lt;/a&gt; 나열된 애플리케이션에서 정의해야 합니다. 그렇지 않으면 역방향 관계가 제대로 작동하지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="03b8a2a8f9a2165b5055263ab7201d440c952bd7" translate="yes" xml:space="preserve">
          <source>For this reason, you should use named-string interpolation (e.g., &lt;code&gt;%(day)s&lt;/code&gt;) instead of positional interpolation (e.g., &lt;code&gt;%s&lt;/code&gt; or &lt;code&gt;%d&lt;/code&gt;) whenever you have more than a single parameter. If you used positional interpolation, translations wouldn&amp;rsquo;t be able to reorder placeholder text.</source>
          <target state="translated">이러한 이유로 단일 매개 변수가 여러 개있을 때마다 위치 보간 (예 : &lt;code&gt;%s&lt;/code&gt; 또는 &lt;code&gt;%d&lt;/code&gt; ) 대신 명명 된 문자열 보간 (예 : &lt;code&gt;%(day)s&lt;/code&gt; )을 사용해야합니다. 위치 보간을 사용한 경우 번역에서 자리 표시 자 텍스트의 순서를 바꿀 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="58b0059d8e2444811f86ebb88bfabb7ef1ee4a71" translate="yes" xml:space="preserve">
          <source>For this to work, the &lt;code&gt;ForeignKey&lt;/code&gt; on the referencing model must have &lt;code&gt;null=True&lt;/code&gt;.</source>
          <target state="translated">이것이 작동 하려면 참조 모델 의 &lt;code&gt;ForeignKey&lt;/code&gt; 에 &lt;code&gt;null=True&lt;/code&gt; 가 있어야합니다 .</target>
        </trans-unit>
        <trans-unit id="a8f825ebd874543d22305c1bc6781ad3c861ff54" translate="yes" xml:space="preserve">
          <source>For this tutorial and the ticket we&amp;rsquo;re working on, testing against SQLite is sufficient, however, it&amp;rsquo;s possible (and sometimes necessary) to &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/internals/contributing/writing-code/unit-tests/#running-unit-tests-settings&quot;&gt;run the tests using a different database&lt;/a&gt;.</source>
          <target state="translated">이 튜토리얼과 우리가 작업하는 티켓의 경우 SQLite에 대한 테스트는 충분하지만 &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/internals/contributing/writing-code/unit-tests/#running-unit-tests-settings&quot;&gt;다른 데이터베이스를 사용하여 테스트&lt;/a&gt; 를 실행할 수도 있습니다 (때로는 필요) .</target>
        </trans-unit>
        <trans-unit id="6bc5dc82579cf1e38bf802400f5653a407a69212" translate="yes" xml:space="preserve">
          <source>For this tutorial, we expect that you have at least a basic understanding of how Django works. This means you should be comfortable going through the existing tutorials on &lt;a href=&quot;tutorial01&quot;&gt;writing your first Django app&lt;/a&gt;. In addition, you should have a good understanding of Python itself. But if you don&amp;rsquo;t, &lt;a href=&quot;https://diveinto.org/python3/table-of-contents.html&quot;&gt;Dive Into Python&lt;/a&gt; is a fantastic (and free) online book for beginning Python programmers.</source>
          <target state="translated">이 튜토리얼에서는 최소한 장고의 작동 방식에 대한 기본적인 이해가 필요합니다. 이것은 당신이 &lt;a href=&quot;tutorial01&quot;&gt;첫 번째 장고 앱&lt;/a&gt; 을 작성 하는 것에 대한 기존의 튜토리얼을 편안하게 수행해야 함을 의미합니다 . 또한 파이썬 자체에 대해 잘 알고 있어야합니다. 그러나 그렇지 않다면 &lt;a href=&quot;https://diveinto.org/python3/table-of-contents.html&quot;&gt;Dive Into Python&lt;/a&gt; 은 Python 프로그래머를 시작하는 환상적인 온라인 책입니다.</target>
        </trans-unit>
        <trans-unit id="e3383d2cd67e4a5fda4c38dfc0426ba59217d3de" translate="yes" xml:space="preserve">
          <source>For this tutorial, we&amp;rsquo;ll work on a &amp;ldquo;fake ticket&amp;rdquo; as a case study. Here are the imaginary details:</source>
          <target state="translated">이 자습서에서는 사례 연구로 &quot;가짜 티켓&quot;에 대해 작업합니다. 상상의 세부 사항은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="003691caf4ec5210cc2d137f90809630e129ddc7" translate="yes" xml:space="preserve">
          <source>For this tutorial, you&amp;rsquo;ll need Git installed to download the current development version of Django and to generate patch files for the changes you make.</source>
          <target state="translated">이 튜토리얼에서는 Django의 현재 개발 버전을 다운로드하고 변경 사항에 대한 패치 파일을 생성하려면 Git이 설치되어 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="3ba7541a55fc9940dde992c1f6782e4722e85bb9" translate="yes" xml:space="preserve">
          <source>For this, Django provides full support for cookie- and session-based messaging, for both anonymous and authenticated users. The messages framework allows you to temporarily store messages in one request and retrieve them for display in a subsequent request (usually the next one). Every message is tagged with a specific &lt;code&gt;level&lt;/code&gt; that determines its priority (e.g., &lt;code&gt;info&lt;/code&gt;, &lt;code&gt;warning&lt;/code&gt;, or &lt;code&gt;error&lt;/code&gt;).</source>
          <target state="translated">이를 위해 Django는 익명 사용자와 인증 된 사용자 모두를 위해 쿠키 및 세션 기반 메시징을 완벽하게 지원합니다. 메시지 프레임 워크를 사용하면 한 요청에 메시지를 임시로 저장하고 후속 요청 (일반적으로 다음 요청)에 표시하기 위해 메시지를 검색 할 수 있습니다. 모든 메시지에는 우선 순위를 결정 하는 특정 &lt;code&gt;level&lt;/code&gt; (예 : &lt;code&gt;info&lt;/code&gt; , &lt;code&gt;warning&lt;/code&gt; 또는 &lt;code&gt;error&lt;/code&gt; )이 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="0f6759276797b410a8844e478a10070c4aed5dcb" translate="yes" xml:space="preserve">
          <source>For those cases, it&amp;rsquo;s a good idea to write your own &lt;a href=&quot;#django.contrib.admin.ModelAdmin.get_search_results&quot;&gt;&lt;code&gt;ModelAdmin.get_search_results()&lt;/code&gt;&lt;/a&gt; implementation using a full-text indexed search.</source>
          <target state="translated">이러한 경우 전체 텍스트 인덱싱 된 검색을 사용하여 고유 한 &lt;a href=&quot;#django.contrib.admin.ModelAdmin.get_search_results&quot;&gt; &lt;code&gt;ModelAdmin.get_search_results()&lt;/code&gt; &lt;/a&gt; 구현 을 작성하는 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="e0744e2ccd9373d4212b6ab0b38e803815456b58" translate="yes" xml:space="preserve">
          <source>For those templates that cannot be overridden in this way, you may still override them for your entire project by placing the new version in your &lt;code&gt;templates/admin&lt;/code&gt; directory. This is particularly useful to create custom 404 and 500 pages.</source>
          <target state="translated">이러한 방식으로 재정의 할 수없는 템플릿의 경우 새 버전을 &lt;code&gt;templates/admin&lt;/code&gt; 디렉토리 에 배치하여 전체 프로젝트에 대해 템플릿을 재정의 할 수 있습니다 . 이것은 사용자 정의 404 및 500 페이지를 작성하는 데 특히 유용합니다.</target>
        </trans-unit>
        <trans-unit id="b208ce4d25990e2997ea3d38b9396df0cf665967" translate="yes" xml:space="preserve">
          <source>For use in, for example, Django templates, headers can also be looked up using underscores in place of hyphens:</source>
          <target state="translated">예를 들어 Django 템플릿에서 사용하기 위해 하이픈 대신 밑줄을 사용하여 헤더를 찾을 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="ab0a4460c2bfb4fb22cd663d783472b3f97d3b37" translate="yes" xml:space="preserve">
          <source>For user projects wishing to patch the backend that they&amp;rsquo;re using, this code should live in an &lt;a href=&quot;../applications#django.apps.AppConfig.ready&quot;&gt;&lt;code&gt;AppConfig.ready()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">사용중인 백엔드를 패치하려는 사용자 프로젝트의 경우이 코드는 &lt;a href=&quot;../applications#django.apps.AppConfig.ready&quot;&gt; &lt;code&gt;AppConfig.ready()&lt;/code&gt; &lt;/a&gt; 메서드 에 있어야합니다 .</target>
        </trans-unit>
        <trans-unit id="07063566677ca47cd9924e995ca5ba3cec95b3ab" translate="yes" xml:space="preserve">
          <source>For users familiar with &lt;code&gt;GDAL&lt;/code&gt;, this function has a similar functionality to the &lt;code&gt;gdalwarp&lt;/code&gt; command-line utility.</source>
          <target state="translated">&lt;code&gt;GDAL&lt;/code&gt; 에 익숙한 사용자 에게이 기능은 &lt;code&gt;gdalwarp&lt;/code&gt; 명령 줄 유틸리티 와 유사한 기능을 갖습니다 .</target>
        </trans-unit>
        <trans-unit id="06bdcf31ea0ff04912d506e7f82bc13ec5bb5e22" translate="yes" xml:space="preserve">
          <source>For users with JavaScript-enabled browsers, an &amp;ldquo;Add another&amp;rdquo; link is provided to enable any number of additional inlines to be added in addition to those provided as a result of the &lt;code&gt;extra&lt;/code&gt; argument.</source>
          <target state="translated">JavaScript 가능 브라우저를 사용하는 사용자의 경우 &lt;code&gt;extra&lt;/code&gt; 인수 의 결과로 제공되는 인라인 외에 추가 인라인을 추가 할 수 있도록 &quot;다른 추가&quot;링크가 제공됩니다 .</target>
        </trans-unit>
        <trans-unit id="ada8b1c0c7e4762ecd02cc10e6d34c709fb7333c" translate="yes" xml:space="preserve">
          <source>For words that don&amp;rsquo;t pluralize by simple suffix, you can specify both a singular and plural suffix, separated by a comma.</source>
          <target state="translated">단순 접미사로 복수형이 아닌 단어의 경우 쉼표로 구분하여 단수형과 복수형 접미사를 모두 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9189cf15c77477aa96788ff42bdc189cfdeeae3d" translate="yes" xml:space="preserve">
          <source>For words that require a suffix other than &lt;code&gt;'s'&lt;/code&gt;, you can provide an alternate suffix as a parameter to the filter.</source>
          <target state="translated">&lt;code&gt;'s'&lt;/code&gt; 이외의 접미사가 필요한 단어의 경우 대체 접미사를 매개 변수로 필터에 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b98fa36f3c1fac6c6c9fb6936769d4049b9c86d9" translate="yes" xml:space="preserve">
          <source>Forbids access to user agents in the &lt;a href=&quot;settings#std:setting-DISALLOWED_USER_AGENTS&quot;&gt;&lt;code&gt;DISALLOWED_USER_AGENTS&lt;/code&gt;&lt;/a&gt; setting, which should be a list of compiled regular expression objects.</source>
          <target state="translated">컴파일 된 정규식 객체의 목록이어야 하는 &lt;a href=&quot;settings#std:setting-DISALLOWED_USER_AGENTS&quot;&gt; &lt;code&gt;DISALLOWED_USER_AGENTS&lt;/code&gt; &lt;/a&gt; 설정 에서 사용자 에이전트에 대한 액세스를 금지 합니다.</target>
        </trans-unit>
        <trans-unit id="e9bb65c5b1c2c41fc169fe3b9894145c1c5118d6" translate="yes" xml:space="preserve">
          <source>Forces a single value to be printed without localization.</source>
          <target state="translated">현지화없이 단일 값을 강제로 인쇄합니다.</target>
        </trans-unit>
        <trans-unit id="3f04aae7964fff0403812c7d9880f99e05da0dca" translate="yes" xml:space="preserve">
          <source>Forces colorization of the command output if it would otherwise be disabled as discussed in &lt;a href=&quot;#syntax-coloring&quot;&gt;Syntax coloring&lt;/a&gt;. For example, you may want to pipe colored output to another command.</source>
          <target state="translated">&lt;a href=&quot;#syntax-coloring&quot;&gt;구문 색상 표시&lt;/a&gt; 에서 설명한대로 명령 출력이 비활성화 된 경우 명령 출력을 강제로 색상 화합니다 . 예를 들어, 컬러 출력을 다른 명령으로 파이프 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="822e3ae3ae56ada85c883e445685735f0bbbcec4" translate="yes" xml:space="preserve">
          <source>Forces conversion of a single value to UTC.</source>
          <target state="translated">단일 값을 UTC로 강제 변환합니다.</target>
        </trans-unit>
        <trans-unit id="5caa08849dd0053ad328db7f9b3ff99f454470ea" translate="yes" xml:space="preserve">
          <source>Forces conversion of a single value to an arbitrary timezone.</source>
          <target state="translated">단일 값을 임의의 시간대로 강제 변환합니다.</target>
        </trans-unit>
        <trans-unit id="e426af8da5cef513c96ebd4f7c9bfa88a37b7b60" translate="yes" xml:space="preserve">
          <source>Forces conversion of a single value to the current time zone.</source>
          <target state="translated">단일 값을 현재 시간대로 강제 변환합니다.</target>
        </trans-unit>
        <trans-unit id="a07ffdebe3aa947ee8237843fa13c48509367e20" translate="yes" xml:space="preserve">
          <source>Forces localization of a single value.</source>
          <target state="translated">단일 값을 현지화합니다.</target>
        </trans-unit>
        <trans-unit id="9e0dd243e1a006f16098fbe2024ebd28fadc865e" translate="yes" xml:space="preserve">
          <source>Forces the result type of &lt;code&gt;expression&lt;/code&gt; to be the one from &lt;code&gt;output_field&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;expression&lt;/code&gt; 의 결과 유형이 &lt;code&gt;output_field&lt;/code&gt; 의 결과 유형이 되도록합니다 .</target>
        </trans-unit>
        <trans-unit id="f2b3c637d3f8c4c084704e12352f97315c5d4107" translate="yes" xml:space="preserve">
          <source>Forcing an INSERT or UPDATE</source>
          <target state="translated">INSERT 또는 UPDATE 강제</target>
        </trans-unit>
        <trans-unit id="530998ad30299518dd632fa0a637000def19dde4" translate="yes" xml:space="preserve">
          <source>Foreign keys and other relational fields are treated a little bit differently:</source>
          <target state="translated">외래 키 및 기타 관계 필드는 약간 다르게 처리됩니다.</target>
        </trans-unit>
        <trans-unit id="04c75ed6126142c00cbf64860dcf32223aa3747e" translate="yes" xml:space="preserve">
          <source>Foreign keys have the PK of the linked object as property value. ManyToMany-relations are serialized for the model that defines them and are represented as a list of PKs.</source>
          <target state="translated">외래 키에는 연결된 개체의 PK가 속성 값으로 있습니다. ManyToMany 관계는이를 정의하는 모델에 대해 직렬화되며 PK 목록으로 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="745daba0e4002e3d54aa9d6b189f69ba7c4cc16a" translate="yes" xml:space="preserve">
          <source>ForeignKeys which are set to &lt;a href=&quot;fields#django.db.models.ForeignKey.on_delete&quot;&gt;&lt;code&gt;on_delete&lt;/code&gt;&lt;/a&gt;&lt;code&gt;DO_NOTHING&lt;/code&gt; do not prevent taking the fast-path in deletion.</source>
          <target state="translated">&lt;a href=&quot;fields#django.db.models.ForeignKey.on_delete&quot;&gt; &lt;code&gt;on_delete&lt;/code&gt; &lt;/a&gt; &lt;code&gt;DO_NOTHING&lt;/code&gt; 으로 설정된 ForeignKey 는 빠른 경로의 삭제를 방해하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="2489b02dae69de015f9de7cb4db5c89918c8cd7d" translate="yes" xml:space="preserve">
          <source>Form Assets (the &lt;code&gt;Media&lt;/code&gt; class)</source>
          <target state="translated">양식 자산 ( &lt;code&gt;Media&lt;/code&gt; 클래스)</target>
        </trans-unit>
        <trans-unit id="01a5a80fc4c5200a64766a92d4a28630919a7770" translate="yes" xml:space="preserve">
          <source>Form Assets (the Media class)</source>
          <target state="translated">양식 자산 (미디어 클래스)</target>
        </trans-unit>
        <trans-unit id="ec53fec3838c580c1606daf2ba913c19e7f397ef" translate="yes" xml:space="preserve">
          <source>Form and field validation</source>
          <target state="translated">양식 및 필드 검증</target>
        </trans-unit>
        <trans-unit id="09f0d1b7d7b094ba60d98ec9c162680471e8fcdb" translate="yes" xml:space="preserve">
          <source>Form data sent back to a Django website is processed by a view, generally the same view which published the form. This allows us to reuse some of the same logic.</source>
          <target state="translated">Django 웹 사이트로 다시 전송 된 양식 데이터는 일반적으로 양식을 게시 한보기와 ​​같은보기로 처리됩니다. 이를 통해 동일한 논리를 재사용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="132a07dcd88034f7872ce5ce9eeba14f9347a298" translate="yes" xml:space="preserve">
          <source>Form field</source>
          <target state="translated">양식 필드</target>
        </trans-unit>
        <trans-unit id="ca3178e6c90e7443b1f4979a04f5a830118e6a98" translate="yes" xml:space="preserve">
          <source>Form field classes</source>
          <target state="translated">양식 필드 클래스</target>
        </trans-unit>
        <trans-unit id="9b22fafbf6163cf73da647f5d6f7de7e69bb5b01" translate="yes" xml:space="preserve">
          <source>Form field default cleaning</source>
          <target state="translated">양식 필드 기본 청소</target>
        </trans-unit>
        <trans-unit id="1f6db618e80ce9357df221435126e47594b4defe" translate="yes" xml:space="preserve">
          <source>Form fields</source>
          <target state="translated">양식 필드</target>
        </trans-unit>
        <trans-unit id="06186bd1d81c2e104f10dd5dc873f3af209bd827" translate="yes" xml:space="preserve">
          <source>Form handling with class-based views</source>
          <target state="translated">클래스 기반 뷰를 사용한 양식 처리</target>
        </trans-unit>
        <trans-unit id="8b7e8e44aecc63eea58ade5e9e8e168e11c4b85f" translate="yes" xml:space="preserve">
          <source>Form inheritance</source>
          <target state="translated">양식 상속</target>
        </trans-unit>
        <trans-unit id="8b5ca657a23a71cab768e9a3681b5b2d4ab7ea4e" translate="yes" xml:space="preserve">
          <source>Form processing generally has 3 paths:</source>
          <target state="translated">양식 처리에는 일반적으로 3 가지 경로가 있습니다.</target>
        </trans-unit>
        <trans-unit id="d23233f6cbe877e4c4d726618ca650d72fcebb80" translate="yes" xml:space="preserve">
          <source>Form rendering options</source>
          <target state="translated">양식 렌더링 옵션</target>
        </trans-unit>
        <trans-unit id="5f9b2b4c718c49d0b300d0a87b4e55a27a7053f3" translate="yes" xml:space="preserve">
          <source>Form submission</source>
          <target state="translated">양식 제출</target>
        </trans-unit>
        <trans-unit id="25e11f455fdefcd79d2329575ecb3c7c9746d479" translate="yes" xml:space="preserve">
          <source>Form validation happens when the data is cleaned. If you want to customize this process, there are various places to make changes, each one serving a different purpose. Three types of cleaning methods are run during form processing. These are normally executed when you call the &lt;code&gt;is_valid()&lt;/code&gt; method on a form. There are other things that can also trigger cleaning and validation (accessing the &lt;code&gt;errors&lt;/code&gt; attribute or calling &lt;code&gt;full_clean()&lt;/code&gt; directly), but normally they won&amp;rsquo;t be needed.</source>
          <target state="translated">데이터를 정리하면 양식 유효성 검사가 수행됩니다. 이 프로세스를 사용자 정의하려면 각기 다른 용도로 사용되는 다양한 변경 위치가 있습니다. 양식 처리 중에 세 가지 유형의 청소 방법이 실행됩니다. 이들은 일반적으로 폼 에서 &lt;code&gt;is_valid()&lt;/code&gt; 메서드 를 호출 할 때 실행됩니다 . 정리 및 유효성 검사 ( &lt;code&gt;errors&lt;/code&gt; 속성 액세스 또는 &lt;code&gt;full_clean()&lt;/code&gt; 직접 호출 )를 트리거 할 수있는 다른 방법도 있지만 일반적으로 필요하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="18ff0c843b5c4606dfbf89086c0062c96a51ee51" translate="yes" xml:space="preserve">
          <source>Form widgets</source>
          <target state="translated">양식 위젯</target>
        </trans-unit>
        <trans-unit id="69b17d1e5286bd4a97be2e001b1a1ed61189d9d0" translate="yes" xml:space="preserve">
          <source>FormView inherits &lt;a href=&quot;../../ref/class-based-views/mixins-simple#django.views.generic.base.TemplateResponseMixin&quot;&gt;&lt;code&gt;TemplateResponseMixin&lt;/code&gt;&lt;/a&gt; so &lt;a href=&quot;../../ref/class-based-views/mixins-simple#django.views.generic.base.TemplateResponseMixin.template_name&quot;&gt;&lt;code&gt;template_name&lt;/code&gt;&lt;/a&gt; can be used here.</source>
          <target state="translated">FormView는 &lt;a href=&quot;../../ref/class-based-views/mixins-simple#django.views.generic.base.TemplateResponseMixin&quot;&gt; &lt;code&gt;TemplateResponseMixin&lt;/code&gt; 을&lt;/a&gt; 상속 하므로 여기에서 &lt;a href=&quot;../../ref/class-based-views/mixins-simple#django.views.generic.base.TemplateResponseMixin.template_name&quot;&gt; &lt;code&gt;template_name&lt;/code&gt; 을&lt;/a&gt; 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="041a5dec481d6bf0724caeaa84bc135d7d9062d4" translate="yes" xml:space="preserve">
          <source>Format</source>
          <target state="translated">Format</target>
        </trans-unit>
        <trans-unit id="f761dac6d61c3dab28b3202e4de799514d3abe49" translate="yes" xml:space="preserve">
          <source>Format character</source>
          <target state="translated">문자 형식</target>
        </trans-unit>
        <trans-unit id="2783ae4db40a146cdb58fa9a0e4c57e3159ff9f2" translate="yes" xml:space="preserve">
          <source>Format localization</source>
          <target state="translated">현지화 형식</target>
        </trans-unit>
        <trans-unit id="db9ee596ec25be3f524ab362d52ac677a6533537" translate="yes" xml:space="preserve">
          <source>Formats a date according to the given format.</source>
          <target state="translated">주어진 형식에 따라 날짜를 형식화합니다.</target>
        </trans-unit>
        <trans-unit id="28c9a03c31eaadefb25c3d8a7eddaff4dda4cbfa" translate="yes" xml:space="preserve">
          <source>Formats a date as the time since that date (e.g., &amp;ldquo;4 days, 6 hours&amp;rdquo;).</source>
          <target state="translated">날짜를 그 날짜 이후의 시간으로 포맷합니다 (예 : &quot;4 일, 6 시간&quot;).</target>
        </trans-unit>
        <trans-unit id="6a86188cd1a56d88dcdc7bb13c27bc8b1c0b3dd0" translate="yes" xml:space="preserve">
          <source>Formats a time according to the given format.</source>
          <target state="translated">주어진 형식에 따라 시간을 형식화합니다.</target>
        </trans-unit>
        <trans-unit id="93dc7127a492726376ff651ba9b34d2497d31b92" translate="yes" xml:space="preserve">
          <source>Formats and translates &lt;a href=&quot;#django.contrib.admin.models.LogEntry.change_message&quot;&gt;&lt;code&gt;change_message&lt;/code&gt;&lt;/a&gt; into the current user language. Messages created before Django 1.10 will always be displayed in the language in which they were logged.</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.admin.models.LogEntry.change_message&quot;&gt; &lt;code&gt;change_message&lt;/code&gt; &lt;/a&gt; 를 현재 사용자 언어로 형식화 하고 변환 합니다. Django 1.10 이전에 생성 된 메시지는 항상 기록 된 언어로 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="953c2178bd89fc436574c8caeaf590cdaa172ee1" translate="yes" xml:space="preserve">
          <source>Formats the time to match the &lt;a href=&quot;https://tools.ietf.org/html/rfc1123.html#section-5.2.14&quot; id=&quot;index-4&quot;&gt;&lt;strong&gt;RFC 1123#section-5.2.14&lt;/strong&gt;&lt;/a&gt; date format as specified by HTTP &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html#section-7.1.1.1&quot; id=&quot;index-5&quot;&gt;&lt;strong&gt;RFC 7231#section-7.1.1.1&lt;/strong&gt;&lt;/a&gt;.</source>
          <target state="translated">HTTP &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html#section-7.1.1.1&quot; id=&quot;index-5&quot;&gt;&lt;strong&gt;RFC 7231 # section-7.1.1.1에&lt;/strong&gt;&lt;/a&gt; 지정된대로 &lt;a href=&quot;https://tools.ietf.org/html/rfc1123.html#section-5.2.14&quot; id=&quot;index-4&quot;&gt;&lt;strong&gt;RFC 1123 # section-5.2.14&lt;/strong&gt;&lt;/a&gt; 날짜 형식과 일치하도록 시간을 형식화합니다 .&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d6fd4bf74432ce4e2ddad669c637aa42be7e4983" translate="yes" xml:space="preserve">
          <source>Formats the value like a &amp;ldquo;human-readable&amp;rdquo; file size (i.e. &lt;code&gt;'13 KB'&lt;/code&gt;, &lt;code&gt;'4.1 MB'&lt;/code&gt;, &lt;code&gt;'102 bytes'&lt;/code&gt;, etc.). For example:</source>
          <target state="translated">값을 &quot;사람이 읽을 수있는&quot;파일 크기 (예 : &lt;code&gt;'13 KB'&lt;/code&gt; , &lt;code&gt;'4.1 MB'&lt;/code&gt; 4.1MB ' , &lt;code&gt;'102 bytes'&lt;/code&gt; 등)로 형식화합니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="5d20ce17b112270cc159f79b2633904b994c0e40" translate="yes" xml:space="preserve">
          <source>Formats the value like a &amp;lsquo;human-readable&amp;rsquo; file size (i.e. &lt;code&gt;'13 KB'&lt;/code&gt;, &lt;code&gt;'4.1 MB'&lt;/code&gt;, &lt;code&gt;'102 bytes'&lt;/code&gt;, etc.).</source>
          <target state="translated">'사람이 읽을 수있는'파일 크기 (예 : &lt;code&gt;'13 KB'&lt;/code&gt; , &lt;code&gt;'4.1 MB'&lt;/code&gt; 4.1MB ' , &lt;code&gt;'102 bytes'&lt;/code&gt; 등) 와 같은 값을 형식화 합니다.</target>
        </trans-unit>
        <trans-unit id="cc8ade43c35d4aa9d67e1a79527ff8a39de50a5f" translate="yes" xml:space="preserve">
          <source>Formats the variable according to the argument, a string formatting specifier. This specifier uses the &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#old-string-formatting&quot;&gt;printf-style String Formatting&lt;/a&gt; syntax, with the exception that the leading &amp;ldquo;%&amp;rdquo; is dropped.</source>
          <target state="translated">문자열 형식 지정자 인 인수에 따라 변수를 형식화합니다. 이 지정 자는 선행 &quot;%&quot;가 삭제되는 것을 제외 하고 &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#old-string-formatting&quot;&gt;printf 스타일 문자열 형식화&lt;/a&gt; 구문을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="e235045d3159d9680e6b2ca8af0bb926f4f21e79" translate="yes" xml:space="preserve">
          <source>Formatters</source>
          <target state="translated">Formatters</target>
        </trans-unit>
        <trans-unit id="ae08568bf3e0252178af230ef89a5c406780c364" translate="yes" xml:space="preserve">
          <source>Formatting strings: &lt;code&gt;format_lazy()&lt;/code&gt;</source>
          <target state="translated">문자열 형식화 : &lt;code&gt;format_lazy()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4bec9575721b2739ed1e7c56eb6c8471084fcbcf" translate="yes" xml:space="preserve">
          <source>Forms</source>
          <target state="translated">Forms</target>
        </trans-unit>
        <trans-unit id="d89f0c64a4949e7005972d47aa88597204d94d1b" translate="yes" xml:space="preserve">
          <source>Forms and Cross Site Request Forgery protection</source>
          <target state="translated">양식 및 사이트 간 요청 위조 방지</target>
        </trans-unit>
        <trans-unit id="1a78423c2585a7306a030f845b72b53407d6a3d9" translate="yes" xml:space="preserve">
          <source>Forms and view tools for logging in users, or restricting content</source>
          <target state="translated">사용자 로그인 또는 컨텐츠 제한을위한 양식 및보기 도구</target>
        </trans-unit>
        <trans-unit id="abebd9a2b41a12ca79e7f50192b53b0dd9e36099" translate="yes" xml:space="preserve">
          <source>Forms and widgets can specify custom renderer classes.</source>
          <target state="translated">폼과 위젯은 커스텀 렌더러 클래스를 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b3b9595e1333e8d116512ac45e4fceb8697fcd3f" translate="yes" xml:space="preserve">
          <source>Forms in Django</source>
          <target state="translated">장고 양식</target>
        </trans-unit>
        <trans-unit id="3924338526abac54edb63488cd56ed8868605157" translate="yes" xml:space="preserve">
          <source>Formset API reference. For introductory material about formsets, see the &lt;a href=&quot;../../topics/forms/formsets&quot;&gt;Formsets&lt;/a&gt; topic guide.</source>
          <target state="translated">폼셋 API 참조. formsets에 대한 소개 자료를 들어, 참조 &lt;a href=&quot;../../topics/forms/formsets&quot;&gt;Formsets&lt;/a&gt; 주제 가이드.</target>
        </trans-unit>
        <trans-unit id="5d33d2153056db97a572c779e328f56f62c0e59b" translate="yes" xml:space="preserve">
          <source>Formset Functions</source>
          <target state="translated">폼셋 함수</target>
        </trans-unit>
        <trans-unit id="70c7c64d1100244a0311cbea1b3c65a2aa139032" translate="yes" xml:space="preserve">
          <source>Formset validation</source>
          <target state="translated">폼셋 검증</target>
        </trans-unit>
        <trans-unit id="010e393a05ca880fc34de07a101163e70e23785d" translate="yes" xml:space="preserve">
          <source>Formsets</source>
          <target state="translated">Formsets</target>
        </trans-unit>
        <trans-unit id="f0a26bc3be8c85f51f36bd53b9f5be44b92cc34b" translate="yes" xml:space="preserve">
          <source>Formsets can also be indexed into, which returns the corresponding form. If you override &lt;code&gt;__iter__&lt;/code&gt;, you will need to also override &lt;code&gt;__getitem__&lt;/code&gt; to have matching behavior.</source>
          <target state="translated">양식 세트를 색인화하여 해당 양식을 리턴 할 수도 있습니다. &lt;code&gt;__iter__&lt;/code&gt; 을 재정의 하면 일치하는 동작을 갖도록 &lt;code&gt;__getitem__&lt;/code&gt; 을 재정의해야합니다 .</target>
        </trans-unit>
        <trans-unit id="c1c960670c1e56575f03efb06db7b42a1a10af69" translate="yes" xml:space="preserve">
          <source>Formtools</source>
          <target state="translated">Formtools</target>
        </trans-unit>
        <trans-unit id="36ca1cdf4b812de1cd2a6206ed54566f2f58a310" translate="yes" xml:space="preserve">
          <source>Fortunately, HTTP provides a solution to this problem. A number of HTTP headers exist to instruct downstream caches to differ their cache contents depending on designated variables, and to tell caching mechanisms not to cache particular pages. We&amp;rsquo;ll look at some of these headers in the sections that follow.</source>
          <target state="translated">다행히 HTTP는이 문제에 대한 해결책을 제공합니다. 다운 스트림 캐시에 지정된 변수에 따라 캐시 내용이 달라 지도록 지시하고 캐싱 메커니즘에 특정 페이지를 캐시하지 않도록 지시하는 많은 HTTP 헤더가 있습니다. 다음 섹션에서 이러한 헤더 중 일부를 살펴 보겠습니다.</target>
        </trans-unit>
        <trans-unit id="da0de0fd7e1486d9a80baf7eaf4087001415bfa1" translate="yes" xml:space="preserve">
          <source>Fortunately, there&amp;rsquo;s a little bug in the &lt;code&gt;polls&lt;/code&gt; application for us to fix right away: the &lt;code&gt;Question.was_published_recently()&lt;/code&gt; method returns &lt;code&gt;True&lt;/code&gt; if the &lt;code&gt;Question&lt;/code&gt; was published within the last day (which is correct) but also if the &lt;code&gt;Question&lt;/code&gt;&amp;rsquo;s &lt;code&gt;pub_date&lt;/code&gt; field is in the future (which certainly isn&amp;rsquo;t).</source>
          <target state="translated">다행스럽게도 &lt;code&gt;polls&lt;/code&gt; 애플리케이션에 바로 문제를 해결 하는 데 약간의 버그가 있습니다. &lt;code&gt;Question.was_published_recently()&lt;/code&gt; 메소드는 &lt;code&gt;Question&lt;/code&gt; 이 마지막 날 (올바른) 내에 게시되었지만 &lt;code&gt;Question&lt;/code&gt; 의 &lt;code&gt;pub_date&lt;/code&gt; 필드가 다음과 같은 경우 &lt;code&gt;True&lt;/code&gt; 를 반환합니다. 미래에 (확실히 그렇지는 않습니다).</target>
        </trans-unit>
        <trans-unit id="ba4e72261283258434788542ba397135c10f39d8" translate="yes" xml:space="preserve">
          <source>Forward</source>
          <target state="translated">Forward</target>
        </trans-unit>
        <trans-unit id="e425397879f8bd866baafbd76513bb7fcb6a1d82" translate="yes" xml:space="preserve">
          <source>Forward access to one-to-many relationships is cached the first time the related object is accessed. Subsequent accesses to the foreign key on the same object instance are cached. Example:</source>
          <target state="translated">일대 다 관계에 대한 정방향 액세스는 관련 개체에 처음 액세스 할 때 캐시됩니다. 동일한 객체 인스턴스에서 외래 키에 대한 후속 액세스가 캐시됩니다. 예:</target>
        </trans-unit>
        <trans-unit id="cfd2f8e5ac40daa45638695e2abc70d1935d60f3" translate="yes" xml:space="preserve">
          <source>Fractional seconds support for Time and DateTime fields</source>
          <target state="translated">시간 및 날짜 시간 필드에 대한 소수 초 지원</target>
        </trans-unit>
        <trans-unit id="e3e7a3833d19706ebf33b2c3baf8e05deeed7bca" translate="yes" xml:space="preserve">
          <source>Frames</source>
          <target state="translated">Frames</target>
        </trans-unit>
        <trans-unit id="2b70ec7fe162c7688570e8b7b07c45bad5b45c6a" translate="yes" xml:space="preserve">
          <source>Frames narrow the rows that are used for computing the result. They shift from some start point to some specified end point. Frames can be used with and without partitions, but it&amp;rsquo;s often a good idea to specify an ordering of the window to ensure a deterministic result. In a frame, a peer in a frame is a row with an equivalent value, or all rows if an ordering clause isn&amp;rsquo;t present.</source>
          <target state="translated">프레임은 결과 계산에 사용되는 행을 좁 힙니다. 일부 시작점에서 특정 종료점으로 이동합니다. 프레임은 파티션 유무에 관계없이 사용할 수 있지만 결정적인 결과를 보장하기 위해 창의 순서를 지정하는 것이 좋습니다. 프레임에서 프레임의 피어는 동등한 값을 가진 행이거나 ordering 절이없는 경우 모든 행입니다.</target>
        </trans-unit>
        <trans-unit id="d790b402d79ac1a723c790313bcd679999474630" translate="yes" xml:space="preserve">
          <source>Frequently Asked Questions</source>
          <target state="translated">자주 묻는 질문</target>
        </trans-unit>
        <trans-unit id="fcc787d7a7793eefb7e8d97ed3e0b42646c5a64e" translate="yes" xml:space="preserve">
          <source>From MySQL 5.7 onwards and on fresh installs of MySQL 5.6, the default value of the &lt;code&gt;sql_mode&lt;/code&gt; option contains &lt;code&gt;STRICT_TRANS_TABLES&lt;/code&gt;. That option escalates warnings into errors when data are truncated upon insertion, so Django highly recommends activating a &lt;a href=&quot;https://dev.mysql.com/doc/refman/en/sql-mode.html#sql-mode-strict&quot;&gt;strict mode&lt;/a&gt; for MySQL to prevent data loss (either &lt;code&gt;STRICT_TRANS_TABLES&lt;/code&gt; or &lt;code&gt;STRICT_ALL_TABLES&lt;/code&gt;).</source>
          <target state="translated">MySQL 5.7부터 MySQL 5.6을 새로 설치할 때 &lt;code&gt;sql_mode&lt;/code&gt; 옵션 의 기본값 에는 &lt;code&gt;STRICT_TRANS_TABLES&lt;/code&gt; 가 포함 됩니다. 이 옵션은 삽입시 데이터가 잘릴 때 경고를 오류로 에스컬레이션하므로 Django는 데이터 손실을 방지하기 위해 MySQL에 대해 &lt;a href=&quot;https://dev.mysql.com/doc/refman/en/sql-mode.html#sql-mode-strict&quot;&gt;엄격한 모드&lt;/a&gt; 를 활성화하는 것이 좋습니다 ( &lt;code&gt;STRICT_TRANS_TABLES&lt;/code&gt; 또는 &lt;code&gt;STRICT_ALL_TABLES&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="bc66434aa730a1acc6949077414a98d4f5a85ee6" translate="yes" xml:space="preserve">
          <source>From outward appearances, this looks like the query has retrieved both the first name and last name. However, this example actually issued 3 queries. Only the first names were retrieved by the raw() query &amp;ndash; the last names were both retrieved on demand when they were printed.</source>
          <target state="translated">외형 적으로 보면 쿼리에서 이름과 성을 모두 검색 한 것 같습니다. 그러나이 예제는 실제로 3 개의 쿼리를 발행했습니다. raw () 쿼리는 이름 만 검색했습니다. 성은 인쇄 할 때 요청시 검색되었습니다.</target>
        </trans-unit>
        <trans-unit id="a5490de1ed84545df48870ebcb4ef860e0011f37" translate="yes" xml:space="preserve">
          <source>From the &lt;a href=&quot;middleware#django.contrib.auth.middleware.AuthenticationMiddleware&quot;&gt;&lt;code&gt;AuthenticationMiddleware&lt;/code&gt;&lt;/a&gt;: An instance of &lt;a href=&quot;settings#std:setting-AUTH_USER_MODEL&quot;&gt;&lt;code&gt;AUTH_USER_MODEL&lt;/code&gt;&lt;/a&gt; representing the currently logged-in user. If the user isn&amp;rsquo;t currently logged in, &lt;code&gt;user&lt;/code&gt; will be set to an instance of &lt;a href=&quot;contrib/auth#django.contrib.auth.models.AnonymousUser&quot;&gt;&lt;code&gt;AnonymousUser&lt;/code&gt;&lt;/a&gt;. You can tell them apart with &lt;a href=&quot;contrib/auth#django.contrib.auth.models.User.is_authenticated&quot;&gt;&lt;code&gt;is_authenticated&lt;/code&gt;&lt;/a&gt;, like so:</source>
          <target state="translated">로부터 &lt;a href=&quot;middleware#django.contrib.auth.middleware.AuthenticationMiddleware&quot;&gt; &lt;code&gt;AuthenticationMiddleware&lt;/code&gt; &lt;/a&gt; :의 인스턴스 &lt;a href=&quot;settings#std:setting-AUTH_USER_MODEL&quot;&gt; &lt;code&gt;AUTH_USER_MODEL&lt;/code&gt; 이&lt;/a&gt; (가) 현재 로그인 한 사용자 대표. 사용자가 현재 로그인되어 있지 않은 경우, &lt;code&gt;user&lt;/code&gt; 의 인스턴스로 설정됩니다 &lt;a href=&quot;contrib/auth#django.contrib.auth.models.AnonymousUser&quot;&gt; &lt;code&gt;AnonymousUser&lt;/code&gt; &lt;/a&gt; . 다음과 같이 &lt;a href=&quot;contrib/auth#django.contrib.auth.models.User.is_authenticated&quot;&gt; &lt;code&gt;is_authenticated&lt;/code&gt; 로&lt;/a&gt; 구별 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e4390d233b552a299b710cead7d140cf5b140794" translate="yes" xml:space="preserve">
          <source>From the &lt;a href=&quot;middleware#django.contrib.sessions.middleware.SessionMiddleware&quot;&gt;&lt;code&gt;SessionMiddleware&lt;/code&gt;&lt;/a&gt;: A readable and writable, dictionary-like object that represents the current session.</source>
          <target state="translated">로부터 &lt;a href=&quot;middleware#django.contrib.sessions.middleware.SessionMiddleware&quot;&gt; &lt;code&gt;SessionMiddleware&lt;/code&gt; &lt;/a&gt; : 사전 적 같은 현재 세션을 나타내는 개체, 읽기 및 쓰기.</target>
        </trans-unit>
        <trans-unit id="01c2533dcbf8d501ec5fbb5318b65a5832021da3" translate="yes" xml:space="preserve">
          <source>From the &lt;a href=&quot;middleware#django.contrib.sites.middleware.CurrentSiteMiddleware&quot;&gt;&lt;code&gt;CurrentSiteMiddleware&lt;/code&gt;&lt;/a&gt;: An instance of &lt;a href=&quot;contrib/sites#django.contrib.sites.models.Site&quot;&gt;&lt;code&gt;Site&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;contrib/sites#django.contrib.sites.requests.RequestSite&quot;&gt;&lt;code&gt;RequestSite&lt;/code&gt;&lt;/a&gt; as returned by &lt;a href=&quot;contrib/sites#django.contrib.sites.shortcuts.get_current_site&quot;&gt;&lt;code&gt;get_current_site()&lt;/code&gt;&lt;/a&gt; representing the current site.</source>
          <target state="translated">로부터 &lt;a href=&quot;middleware#django.contrib.sites.middleware.CurrentSiteMiddleware&quot;&gt; &lt;code&gt;CurrentSiteMiddleware&lt;/code&gt; &lt;/a&gt; 의 인스턴스 : &lt;a href=&quot;contrib/sites#django.contrib.sites.models.Site&quot;&gt; &lt;code&gt;Site&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;contrib/sites#django.contrib.sites.requests.RequestSite&quot;&gt; &lt;code&gt;RequestSite&lt;/code&gt; &lt;/a&gt; 에 의해 반환 &lt;a href=&quot;contrib/sites#django.contrib.sites.shortcuts.get_current_site&quot;&gt; &lt;code&gt;get_current_site()&lt;/code&gt; &lt;/a&gt; 현재의 위치를 나타내는.</target>
        </trans-unit>
        <trans-unit id="28206f22cdc49d67262192e2ec75592be29e1e10" translate="yes" xml:space="preserve">
          <source>From the command line, &lt;code&gt;cd&lt;/code&gt; into a directory where you&amp;rsquo;d like to store your code, then run the following command:</source>
          <target state="translated">명령 행에서 코드를 저장하려는 디렉토리로 &lt;code&gt;cd&lt;/code&gt; 한 후 다음 명령을 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="e4203645cf245f13a9b5b7eef7c6236f37d97062" translate="yes" xml:space="preserve">
          <source>From then on, you can insert the current value of the cycle wherever you&amp;rsquo;d like in your template by referencing the cycle name as a context variable. If you want to move the cycle to the next value independently of the original &lt;code&gt;cycle&lt;/code&gt; tag, you can use another &lt;code&gt;cycle&lt;/code&gt; tag and specify the name of the variable. So, the following template:</source>
          <target state="translated">그런 다음 사이클 이름을 컨텍스트 변수로 참조하여 템플릿에서 원하는 사이클의 현재 값을 삽입 할 수 있습니다. 원래 &lt;code&gt;cycle&lt;/code&gt; 태그와 독립적으로주기를 다음 값으로 이동 하려면 다른 &lt;code&gt;cycle&lt;/code&gt; 태그를 사용하고 변수 이름을 지정할 수 있습니다 . 따라서 다음 템플릿은</target>
        </trans-unit>
        <trans-unit id="abd4b62bdfa157a8de63903b441ea96244832915" translate="yes" xml:space="preserve">
          <source>From within the Application Stack Builder (to run outside of the installer, Start ‣ Programs ‣ PostgreSQL 9.x), select PostgreSQL Database Server 9.x on port 5432 from the drop down menu. Next, expand the Categories ‣ Spatial Extensions menu tree and select PostGIS X.Y for PostgreSQL 9.x.</source>
          <target state="translated">Application Stack Builder 내에서 (설치 프로그램 외부에서 실행하려면 시작 ‣ 프로그램 ‣ PostgreSQL 9.x) 드롭 다운 메뉴에서 포트 5432에서 PostgreSQL 데이터베이스 서버 9.x를 선택하십시오. 그런 다음 Categories ‣ Spatial Extensions 메뉴 트리를 확장하고 PostgreSQL 9.x에 대해 PostGIS XY를 선택하십시오.</target>
        </trans-unit>
        <trans-unit id="1e91c62a82f35fb349a4fdae32a9501dc3b57fbe" translate="yes" xml:space="preserve">
          <source>Full DSN and Easy Connect</source>
          <target state="translated">완벽한 DSN 및 간편한 연결</target>
        </trans-unit>
        <trans-unit id="e86b3e585198c95bce6aef7747541d9f96bbd00d" translate="yes" xml:space="preserve">
          <source>Full Python path to the application, e.g. &lt;code&gt;'django.contrib.admin'&lt;/code&gt;.</source>
          <target state="translated">응용 프로그램에 대한 모든 파이썬 경로, 예를 들어 &lt;code&gt;'django.contrib.admin'&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="cd23939c002b10cde0a26228db88f6c8b97d3213" translate="yes" xml:space="preserve">
          <source>Full URL: send the entire URL in the &lt;code&gt;Referer&lt;/code&gt; header. For example, if the user is visiting &lt;code&gt;https://example.com/page.html&lt;/code&gt;, the &lt;code&gt;Referer&lt;/code&gt; header would contain &lt;code&gt;&quot;https://example.com/page.html&quot;&lt;/code&gt;.</source>
          <target state="translated">전체 URL : 전체 URL을 &lt;code&gt;Referer&lt;/code&gt; 헤더 에 보냅니다 . 예를 들어 사용자가 &lt;code&gt;https://example.com/page.html&lt;/code&gt; 을 방문 하는 경우 &lt;code&gt;Referer&lt;/code&gt; 헤더에는 &lt;code&gt;&quot;https://example.com/page.html&quot;&lt;/code&gt; 이 포함 됩니다.</target>
        </trans-unit>
        <trans-unit id="d57d832e96db7330b107b719df41920ebb9f9602" translate="yes" xml:space="preserve">
          <source>Full import path of a serializer class to use for serializing session data. Included serializers are:</source>
          <target state="translated">세션 데이터를 직렬화하는 데 사용할 직렬화 기 클래스의 전체 가져 오기 경로입니다. 포함 된 시리얼 라이저는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="8ec461c73e449e432c7752507d77fd5cb2f69a4c" translate="yes" xml:space="preserve">
          <source>Full name or alias(es)</source>
          <target state="translated">성명 또는 별명</target>
        </trans-unit>
        <trans-unit id="24eafd34f2c5835ead6dd64dc0e0e76590fef7aa" translate="yes" xml:space="preserve">
          <source>Full text search</source>
          <target state="translated">전문 검색</target>
        </trans-unit>
        <trans-unit id="f1e410ad1472b42cb42cc98962428637290b6706" translate="yes" xml:space="preserve">
          <source>Function</source>
          <target state="translated">Function</target>
        </trans-unit>
        <trans-unit id="ef8fc408c280b6c40a19f17f903d961ae3051464" translate="yes" xml:space="preserve">
          <source>Function&amp;rsquo;s summary:</source>
          <target state="translated">기능 요약 :</target>
        </trans-unit>
        <trans-unit id="157df04ee53dd9c987d0ba9575b50f982531a951" translate="yes" xml:space="preserve">
          <source>Functions and classes for working with &amp;ldquo;safe strings&amp;rdquo;: strings that can be displayed safely without further escaping in HTML. Marking something as a &amp;ldquo;safe string&amp;rdquo; means that the producer of the string has already turned characters that should not be interpreted by the HTML engine (e.g. &amp;lsquo;&amp;lt;&amp;rsquo;) into the appropriate entities.</source>
          <target state="translated">&quot;안전한 문자열&quot;작업을위한 함수 및 클래스 : HTML에서 더 이상 벗어나지 않고 안전하게 표시 할 수있는 문자열. 무언가를 &quot;안전한 문자열&quot;로 표시한다는 것은 문자열 생성자가 이미 HTML 엔진 (예 : '&amp;lt;')으로 해석해서는 안되는 문자를 해당 엔티티로 변환했음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="9bd77944f3068c168ecfbb2db948688c50c766c3" translate="yes" xml:space="preserve">
          <source>Functions for working with Python modules.</source>
          <target state="translated">파이썬 모듈 작업을위한 함수.</target>
        </trans-unit>
        <trans-unit id="2c588fee9a38a1178c2a3f53d498d3e8b92c5c75" translate="yes" xml:space="preserve">
          <source>Functions of particular interest are &lt;a href=&quot;../../ref/utils#django.utils.translation.get_language&quot;&gt;&lt;code&gt;django.utils.translation.get_language()&lt;/code&gt;&lt;/a&gt; which returns the language used in the current thread, &lt;a href=&quot;../../ref/utils#django.utils.translation.activate&quot;&gt;&lt;code&gt;django.utils.translation.activate()&lt;/code&gt;&lt;/a&gt; which activates a translation catalog for the current thread, and &lt;a href=&quot;../../ref/utils#django.utils.translation.check_for_language&quot;&gt;&lt;code&gt;django.utils.translation.check_for_language()&lt;/code&gt;&lt;/a&gt; which checks if the given language is supported by Django.</source>
          <target state="translated">특히 관심있는 함수는 &lt;a href=&quot;../../ref/utils#django.utils.translation.get_language&quot;&gt; &lt;code&gt;django.utils.translation.get_language()&lt;/code&gt; &lt;/a&gt; 는 현재 스레드에서 사용 된 언어를 리턴하고, &lt;a href=&quot;../../ref/utils#django.utils.translation.activate&quot;&gt; &lt;code&gt;django.utils.translation.activate()&lt;/code&gt; &lt;/a&gt; 는 현재 스레드에 대한 변환 카탈로그를 활성화하며, &lt;a href=&quot;../../ref/utils#django.utils.translation.check_for_language&quot;&gt; &lt;code&gt;django.utils.translation.check_for_language()&lt;/code&gt; &lt;/a&gt; 주어진 언어가 Django에서 지원되는지 확인하는 check_for_language () .</target>
        </trans-unit>
        <trans-unit id="fe29fa848ab0fa934dbf60165599b48d69a06c00" translate="yes" xml:space="preserve">
          <source>Functions which listen for &lt;a href=&quot;#django.db.models.signals.post_migrate&quot;&gt;&lt;code&gt;post_migrate&lt;/code&gt;&lt;/a&gt; should adjust what they output to the screen based on the value of this argument.</source>
          <target state="translated">&lt;a href=&quot;#django.db.models.signals.post_migrate&quot;&gt; &lt;code&gt;post_migrate&lt;/code&gt; &lt;/a&gt; 를 수신하는 함수 는이 인수의 값에 따라 화면에 출력되는 내용을 조정해야합니다.</target>
        </trans-unit>
        <trans-unit id="58b8fc1c1c71c5176694d664f30ad4935c95c9a6" translate="yes" xml:space="preserve">
          <source>Functions which listen for &lt;a href=&quot;#django.db.models.signals.pre_migrate&quot;&gt;&lt;code&gt;pre_migrate&lt;/code&gt;&lt;/a&gt; should adjust what they output to the screen based on the value of this argument.</source>
          <target state="translated">&lt;a href=&quot;#django.db.models.signals.pre_migrate&quot;&gt; &lt;code&gt;pre_migrate&lt;/code&gt; &lt;/a&gt; 를 수신하는 함수 는이 인수의 값에 따라 화면에 출력되는 내용을 조정해야합니다.</target>
        </trans-unit>
        <trans-unit id="347a2262f212625c348b335159dc10ebbb03ab9d" translate="yes" xml:space="preserve">
          <source>Furlong, Furrow Long</source>
          <target state="translated">펄롱</target>
        </trans-unit>
        <trans-unit id="4dc8b1c8149842f459402434eeff439ceb9a7810" translate="yes" xml:space="preserve">
          <source>Further examples are available in the &lt;a href=&quot;../../ref/models/fields#field-choices&quot;&gt;model field reference&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../ref/models/fields#field-choices&quot;&gt;모델 필드 참조&lt;/a&gt; 에서 추가 예제를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="8a30ede85430e26aa72ae0d45e1884ea49e582ee" translate="yes" xml:space="preserve">
          <source>Further filtering or ordering of a sliced queryset is prohibited due to the ambiguous nature of how that might work.</source>
          <target state="translated">슬라이스 된 쿼리 세트의 추가 필터링 또는 순서는 작동 방식의 모호한 특성으로 인해 금지됩니다.</target>
        </trans-unit>
        <trans-unit id="cd7c6cb8f1b994293e0fffa5e0469c1773e35f5c" translate="yes" xml:space="preserve">
          <source>Further testing</source>
          <target state="translated">추가 테스트</target>
        </trans-unit>
        <trans-unit id="52ee768531207c58276c00530d02f15c716ccdcd" translate="yes" xml:space="preserve">
          <source>Further topics</source>
          <target state="translated">추가 주제</target>
        </trans-unit>
        <trans-unit id="e8b4f5234311830cfdfba453e178fa09d0bfe9a3" translate="yes" xml:space="preserve">
          <source>Furthermore, Python knows how to compare aware datetimes, taking into account UTC offsets when necessary. It&amp;rsquo;s much easier (and possibly faster) to write all your model and view code in UTC. So, in most circumstances, the datetime in UTC returned by &lt;a href=&quot;../../ref/utils#django.utils.timezone.now&quot;&gt;&lt;code&gt;django.utils.timezone.now()&lt;/code&gt;&lt;/a&gt; will be sufficient.</source>
          <target state="translated">또한 Python은 필요한 경우 UTC 오프셋을 고려하여 인식 날짜 시간을 비교하는 방법을 알고 있습니다. 모든 모델을 작성하고 UTC로 코드를 보는 것이 훨씬 쉽고 빠릅니다. 따라서 대부분의 상황에서 &lt;a href=&quot;../../ref/utils#django.utils.timezone.now&quot;&gt; &lt;code&gt;django.utils.timezone.now()&lt;/code&gt; &lt;/a&gt; 에서 반환 한 날짜 시간 (UTC ) 이면 충분합니다.</target>
        </trans-unit>
        <trans-unit id="8ea6d0ffdbdb6cea2b28d73945ccdfef0ae19531" translate="yes" xml:space="preserve">
          <source>GDAL</source>
          <target state="translated">GDAL</target>
        </trans-unit>
        <trans-unit id="2a26a644d47f1906e2de640e10ff9907286d34cd" translate="yes" xml:space="preserve">
          <source>GDAL API</source>
          <target state="translated">GDAL API</target>
        </trans-unit>
        <trans-unit id="02e0585320eb827c9ffabe229b79e4b65616c704" translate="yes" xml:space="preserve">
          <source>GDAL Interface</source>
          <target state="translated">GDAL 인터페이스</target>
        </trans-unit>
        <trans-unit id="cbec0c3b910411cfed3eedecc010ca9269f20bee" translate="yes" xml:space="preserve">
          <source>GDAL Pixel Type</source>
          <target state="translated">GDAL 픽셀 유형</target>
        </trans-unit>
        <trans-unit id="d39fe0a7c9d90595546f63f3c02dec03095f3dc6" translate="yes" xml:space="preserve">
          <source>GDAL has an internal memory-based filesystem, which allows treating blocks of memory as files. It can be used to read and write &lt;a href=&quot;#django.contrib.gis.gdal.GDALRaster&quot;&gt;&lt;code&gt;GDALRaster&lt;/code&gt;&lt;/a&gt; objects to and from binary file buffers.</source>
          <target state="translated">GDAL에는 메모리 블록을 파일로 취급 할 수있는 내부 메모리 기반 파일 시스템이 있습니다. 이진 파일 버퍼에서 &lt;a href=&quot;#django.contrib.gis.gdal.GDALRaster&quot;&gt; &lt;code&gt;GDALRaster&lt;/code&gt; &lt;/a&gt; 객체 를 읽고 쓰는 데 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="1a9e794e2a979d5ba51533c108c06370dda08dde" translate="yes" xml:space="preserve">
          <source>GDT_Byte</source>
          <target state="translated">GDT_Byte</target>
        </trans-unit>
        <trans-unit id="124018333259823826d7cc111b4e0db2f7bc432f" translate="yes" xml:space="preserve">
          <source>GDT_Float32</source>
          <target state="translated">GDT_Float32</target>
        </trans-unit>
        <trans-unit id="00b98fc1bfd4aeb9ba37d5df113e3c40a369e8a9" translate="yes" xml:space="preserve">
          <source>GDT_Float64</source>
          <target state="translated">GDT_Float64</target>
        </trans-unit>
        <trans-unit id="0d00d4c137a19ecaa4f3bac851c7ea6c269fba00" translate="yes" xml:space="preserve">
          <source>GDT_Int16</source>
          <target state="translated">GDT_Int16</target>
        </trans-unit>
        <trans-unit id="bf4d610facd6e53aaadc48ed9351cca991b8266e" translate="yes" xml:space="preserve">
          <source>GDT_Int32</source>
          <target state="translated">GDT_Int32</target>
        </trans-unit>
        <trans-unit id="516d94f6f5e0777618ed61925b04c1640fd44690" translate="yes" xml:space="preserve">
          <source>GDT_UInt16</source>
          <target state="translated">GDT_UInt16</target>
        </trans-unit>
        <trans-unit id="1cc4d769f36ea1593d2e67458b1811587e6436b4" translate="yes" xml:space="preserve">
          <source>GDT_UInt32</source>
          <target state="translated">GDT_UInt32</target>
        </trans-unit>
        <trans-unit id="57549eddbbf46dfb920987eb38ac173931fba057" translate="yes" xml:space="preserve">
          <source>GEOS</source>
          <target state="translated">GEOS</target>
        </trans-unit>
        <trans-unit id="cf2921f1e8089a4fc3bf09367ef75c069782c7b8" translate="yes" xml:space="preserve">
          <source>GEOS API</source>
          <target state="translated">지오스 API</target>
        </trans-unit>
        <trans-unit id="9ba8d42dfcc9df2e351bca785d3dbcbb20d3cb86" translate="yes" xml:space="preserve">
          <source>GEOS distance calculations are linear &amp;ndash; in other words, GEOS does not perform a spherical calculation even if the SRID specifies a geographic coordinate system.</source>
          <target state="translated">GEOS 거리 계산은 선형 적입니다. 즉, SRID가 지리적 좌표 시스템을 지정하더라도 GEOS는 구형 계산을 수행하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="c104de6f391701c2366e299c7023455bf19608de" translate="yes" xml:space="preserve">
          <source>GEOS is a C++ library for performing geometric operations, and is the default internal geometry representation used by GeoDjango (it&amp;rsquo;s behind the &amp;ldquo;lazy&amp;rdquo; geometries). Specifically, the C API library is called (e.g., &lt;code&gt;libgeos_c.so&lt;/code&gt;) directly from Python using ctypes.</source>
          <target state="translated">GEOS는 지오메트리 작업을 수행하기위한 C ++ 라이브러리이며 GeoDjango에서 사용하는 기본 내부 지오메트리 표현입니다 ( &quot;지연 한&quot;지오메트리 뒤에 있습니다). 특히 C API 라이브러리는 ctypes를 사용하여 Python에서 직접 호출됩니다 (예 : &lt;code&gt;libgeos_c.so&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="f552a71a8afc751655c25583e1e0ff952365b5eb" translate="yes" xml:space="preserve">
          <source>GEOS, GDAL</source>
          <target state="translated">지오스, GDAL</target>
        </trans-unit>
        <trans-unit id="67290db3486d847e5ecd1c83416a1bde2331c192" translate="yes" xml:space="preserve">
          <source>GEOS, GDAL, PROJ.4, PostGIS</source>
          <target state="translated">GEOS, GDAL, PROJ.4, PostGIS</target>
        </trans-unit>
        <trans-unit id="d54bb8615abfeaabf733c3a517bde1df52c7ae10" translate="yes" xml:space="preserve">
          <source>GEOS, GDAL, PROJ.4, SpatiaLite</source>
          <target state="translated">GEOS, GDAL, PROJ.4, SpatiaLite</target>
        </trans-unit>
        <trans-unit id="32df026aca6e37208988e80143a9f0fdbc8a748a" translate="yes" xml:space="preserve">
          <source>GIS QuerySet API Reference</source>
          <target state="translated">GIS QuerySet API 참조</target>
        </trans-unit>
        <trans-unit id="dc4060a6fe947895e29cdab9b844c92647dcdf2c" translate="yes" xml:space="preserve">
          <source>GIS data sources, like shapefiles, may be very large. If you find that &lt;a href=&quot;#django.contrib.gis.utils.LayerMapping&quot;&gt;&lt;code&gt;LayerMapping&lt;/code&gt;&lt;/a&gt; is using too much memory, set &lt;a href=&quot;../../settings#std:setting-DEBUG&quot;&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;False&lt;/code&gt; in your settings. When &lt;a href=&quot;../../settings#std:setting-DEBUG&quot;&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;/a&gt; is set to &lt;code&gt;True&lt;/code&gt;, Django &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/faq/models/#faq-see-raw-sql-queries&quot;&gt;automatically logs&lt;/a&gt;&lt;em&gt;every&lt;/em&gt; SQL query &amp;ndash; and when SQL statements contain geometries, this may consume more memory than is typical.</source>
          <target state="translated">shapefile과 같은 GIS 데이터 소스는 매우 클 수 있습니다. 당신은 찾을 경우 &lt;a href=&quot;#django.contrib.gis.utils.LayerMapping&quot;&gt; &lt;code&gt;LayerMapping&lt;/code&gt; 가&lt;/a&gt; 너무 많은 메모리, 세트 사용 &lt;a href=&quot;../../settings#std:setting-DEBUG&quot;&gt; &lt;code&gt;DEBUG&lt;/code&gt; &lt;/a&gt; 에 &lt;code&gt;False&lt;/code&gt; 설정합니다. &lt;a href=&quot;../../settings#std:setting-DEBUG&quot;&gt; &lt;code&gt;DEBUG&lt;/code&gt; &lt;/a&gt; 가 &lt;code&gt;True&lt;/code&gt; 로 설정 되면 Django는 &lt;em&gt;모든&lt;/em&gt; SQL 쿼리를 &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/faq/models/#faq-see-raw-sql-queries&quot;&gt;자동으로 기록 &lt;/a&gt;&lt;em&gt;합니다.&lt;/em&gt; SQL 문에 형상이 포함되어 있으면 일반적인 것보다 많은 메모리를 소비 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f153081e8e18a0ac0dd3d4a18216a72f195ef4a7" translate="yes" xml:space="preserve">
          <source>GZip compression</source>
          <target state="translated">GZip 압축</target>
        </trans-unit>
        <trans-unit id="88756fa7a5403ed08666c0f7d1544a052a8a7758" translate="yes" xml:space="preserve">
          <source>GZip middleware</source>
          <target state="translated">GZip 미들웨어</target>
        </trans-unit>
        <trans-unit id="200410f62b44123ec4e7adbf21839d4447d18a4f" translate="yes" xml:space="preserve">
          <source>General approaches</source>
          <target state="translated">일반적인 접근법</target>
        </trans-unit>
        <trans-unit id="cc009d63c70477332d3b26a216df733ea65feb8d" translate="yes" xml:space="preserve">
          <source>General notes</source>
          <target state="translated">일반 사항</target>
        </trans-unit>
        <trans-unit id="9d25e59f9fe525c291ea22ff97d3ee08d153e3f5" translate="yes" xml:space="preserve">
          <source>General string handling</source>
          <target state="translated">일반적인 문자열 처리</target>
        </trans-unit>
        <trans-unit id="d5f448f0e52e9bd53410694159c4305fef042b26" translate="yes" xml:space="preserve">
          <source>General-purpose aggregation functions</source>
          <target state="translated">범용 집계 함수</target>
        </trans-unit>
        <trans-unit id="6d6f1be7da3659b77585286c84135bee6dca31ad" translate="yes" xml:space="preserve">
          <source>Generally one&amp;rsquo;s first concern is to write code that &lt;em&gt;works&lt;/em&gt;, whose logic functions as required to produce the expected output. Sometimes, however, this will not be enough to make the code work as &lt;em&gt;efficiently&lt;/em&gt; as one would like.</source>
          <target state="translated">일반적으로 하나의 첫 번째 관심은 그 코드를 작성하는 것입니다 &lt;em&gt;작품&lt;/em&gt; 누구의 논리 기능을 필요에 따라이 예상 출력을 생성 할 수 있습니다. 그러나 때로는 코드를 &lt;em&gt;효율적&lt;/em&gt; 으로 작동시키기에 충분하지 않을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="2dc5a4b1cc3b7351074b95b062373b0aba4cd150" translate="yes" xml:space="preserve">
          <source>Generally speaking, it isn&amp;rsquo;t advisable to write to the database while generating a streaming response, since there&amp;rsquo;s no sensible way to handle errors after starting to send the response.</source>
          <target state="translated">일반적으로 스트리밍 응답을 생성하는 동안 데이터베이스에 쓰지 않는 것이 좋습니다. 응답을 보낸 후 오류를 처리 할 수있는 합리적인 방법이 없기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="24f6155965c97a61b3e2ca7acf1734368fae7c53" translate="yes" xml:space="preserve">
          <source>Generally speaking, it&amp;rsquo;s easiest to refer to the user model with the &lt;a href=&quot;../../ref/settings#std:setting-AUTH_USER_MODEL&quot;&gt;&lt;code&gt;AUTH_USER_MODEL&lt;/code&gt;&lt;/a&gt; setting in code that&amp;rsquo;s executed at import time, however, it&amp;rsquo;s also possible to call &lt;code&gt;get_user_model()&lt;/code&gt; while Django is importing models, so you could use &lt;code&gt;models.ForeignKey(get_user_model(), ...)&lt;/code&gt;.</source>
          <target state="translated">일반적으로는와 사용자 모델을 참조하는 것이 가장 쉬운 방법이다, 말하기 &lt;a href=&quot;../../ref/settings#std:setting-AUTH_USER_MODEL&quot;&gt; &lt;code&gt;AUTH_USER_MODEL&lt;/code&gt; 의&lt;/a&gt; 수입시에 실행 코드에 설정하지만, 또한 전화로 가능 &lt;code&gt;get_user_model()&lt;/code&gt; 장고 모델을 가져 오는 동안 사용할 수 있도록, &lt;code&gt;models.ForeignKey(get_user_model(), ...)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="cce2ca7c7d11755b7d8fc24c859449f56b8fef65" translate="yes" xml:space="preserve">
          <source>Generally speaking, the most appropriate level for the job is the lowest-level one that it is comfortable to code for.</source>
          <target state="translated">일반적으로 작업에 가장 적합한 수준은 코딩하기에 가장 낮은 수준입니다.</target>
        </trans-unit>
        <trans-unit id="41b1e6b41a8481cab01f2d9475db7f4cc68d9fff" translate="yes" xml:space="preserve">
          <source>Generally speaking, you can&amp;rsquo;t mix dates and datetimes.</source>
          <target state="translated">일반적으로 날짜와 날짜 / 시간을 혼합 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="647ad5d5d9c98ce9c898d46505ef79c17373c595" translate="yes" xml:space="preserve">
          <source>Generally speaking, you should perform expensive tasks outside of the request-response cycle, rather than resorting to a streamed response.</source>
          <target state="translated">일반적으로 스트리밍 응답에 의존하기보다는 요청-응답주기를 벗어나는 비싼 작업을 수행해야합니다.</target>
        </trans-unit>
        <trans-unit id="9572adc989f39eaa9b2ba90d481456a7ec0a77df" translate="yes" xml:space="preserve">
          <source>Generally you can use &lt;a href=&quot;../../ref/class-based-views/mixins-simple#django.views.generic.base.TemplateResponseMixin&quot;&gt;&lt;code&gt;TemplateResponseMixin&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin&quot;&gt;&lt;code&gt;SingleObjectMixin&lt;/code&gt;&lt;/a&gt; when you need their functionality. As shown above, with a bit of care you can even combine &lt;code&gt;SingleObjectMixin&lt;/code&gt; with &lt;a href=&quot;../../ref/class-based-views/generic-display#django.views.generic.list.ListView&quot;&gt;&lt;code&gt;ListView&lt;/code&gt;&lt;/a&gt;. However things get increasingly complex as you try to do so, and a good rule of thumb is:</source>
          <target state="translated">일반적으로 기능이 필요한 경우 &lt;a href=&quot;../../ref/class-based-views/mixins-simple#django.views.generic.base.TemplateResponseMixin&quot;&gt; &lt;code&gt;TemplateResponseMixin&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin&quot;&gt; &lt;code&gt;SingleObjectMixin&lt;/code&gt; 을&lt;/a&gt; 사용할 수 있습니다 . 위에 표시된 것처럼 약간의주의를 &lt;code&gt;SingleObjectMixin&lt;/code&gt; 을 &lt;a href=&quot;../../ref/class-based-views/generic-display#django.views.generic.list.ListView&quot;&gt; &lt;code&gt;ListView&lt;/code&gt; &lt;/a&gt; 와 결합 할 수도 있습니다 . 그러나 그렇게하려고하면 상황이 점점 더 복잡해지고 좋은 경험 법은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="527756bcb892560130d98a9a313a05a11a3d384e" translate="yes" xml:space="preserve">
          <source>Generally, &lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField&quot;&gt;&lt;code&gt;ManyToManyField&lt;/code&gt;&lt;/a&gt; instances should go in the object that&amp;rsquo;s going to be edited on a form. In the above example, &lt;code&gt;toppings&lt;/code&gt; is in &lt;code&gt;Pizza&lt;/code&gt; (rather than &lt;code&gt;Topping&lt;/code&gt; having a &lt;code&gt;pizzas&lt;/code&gt;&lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField&quot;&gt;&lt;code&gt;ManyToManyField&lt;/code&gt;&lt;/a&gt; ) because it&amp;rsquo;s more natural to think about a pizza having toppings than a topping being on multiple pizzas. The way it&amp;rsquo;s set up above, the &lt;code&gt;Pizza&lt;/code&gt; form would let users select the toppings.</source>
          <target state="translated">일반적으로 &lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField&quot;&gt; &lt;code&gt;ManyToManyField&lt;/code&gt; &lt;/a&gt; 인스턴스는 양식에서 편집 할 객체로 이동해야합니다. 위의 예에서, &lt;code&gt;toppings&lt;/code&gt; 은 &lt;code&gt;Pizza&lt;/code&gt; ( &lt;code&gt;pizzas&lt;/code&gt; &lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField&quot;&gt; &lt;code&gt;ManyToManyField&lt;/code&gt; &lt;/a&gt; 가있는 &lt;code&gt;Topping&lt;/code&gt; 대신 )는 피자가 여러 피자에있는 토핑보다 토핑이있는 피자에 대해 생각하는 것이 더 자연 스럽기 때문입니다. 위에 설정된 방식으로 &lt;code&gt;Pizza&lt;/code&gt; 양식을 사용하면 토핑을 선택할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c75c67a262a34c0f2e38d35a45a89fab845848f8" translate="yes" xml:space="preserve">
          <source>Generally, &lt;code&gt;get_context_data&lt;/code&gt; will merge the context data of all parent classes with those of the current class. To preserve this behavior in your own classes where you want to alter the context, you should be sure to call &lt;code&gt;get_context_data&lt;/code&gt; on the super class. When no two classes try to define the same key, this will give the expected results. However if any class attempts to override a key after parent classes have set it (after the call to super), any children of that class will also need to explicitly set it after super if they want to be sure to override all parents. If you&amp;rsquo;re having trouble, review the method resolution order of your view.</source>
          <target state="translated">일반적으로 &lt;code&gt;get_context_data&lt;/code&gt; 는 모든 상위 클래스의 컨텍스트 데이터를 현재 클래스의 컨텍스트 데이터와 병합합니다. 컨텍스트를 변경하려는 클래스에서이 동작을 유지하려면 수퍼 클래스에서 &lt;code&gt;get_context_data&lt;/code&gt; 를 호출해야합니다 . 두 클래스가 동일한 키를 정의하려고 시도하지 않으면 예상 된 결과가 제공됩니다. 그러나 부모 클래스가 키를 설정 한 후 (super 호출 후) 클래스가 키를 재정의하려고 시도하는 경우 해당 클래스의 모든 자식은 모든 부모를 재정의하려는 경우 super를 명시 적으로 설정해야합니다. 문제가 발생하면보기의 분석법 해결 순서를 검토하십시오.</target>
        </trans-unit>
        <trans-unit id="c3d5b0cf1a6be796edc01b1a5da01e9211d76d6a" translate="yes" xml:space="preserve">
          <source>Generally, &lt;code&gt;string_if_invalid&lt;/code&gt; should only be enabled in order to debug a specific template problem, then cleared once debugging is complete.</source>
          <target state="translated">일반적으로 &lt;code&gt;string_if_invalid&lt;/code&gt; 는 특정 템플릿 문제를 디버깅하기 위해서만 활성화 한 다음 디버깅이 완료되면 지워집니다.</target>
        </trans-unit>
        <trans-unit id="443c04d1837565ab4b87d181a52fd743f9cae91a" translate="yes" xml:space="preserve">
          <source>Generally, a view retrieves data according to the parameters, loads a template and renders the template with the retrieved data. Here&amp;rsquo;s an example view for &lt;code&gt;year_archive&lt;/code&gt; from above:</source>
          <target state="translated">일반적으로보기는 매개 변수에 따라 데이터를 검색하고 템플리트를로드 한 후 검색된 데이터로 템플리트를 렌더링합니다. 위의 &lt;code&gt;year_archive&lt;/code&gt; 에 대한보기 예는 다음과 같습니다 .</target>
        </trans-unit>
        <trans-unit id="0c77575814a624548a0f1612bf97578af76953c9" translate="yes" xml:space="preserve">
          <source>Generally, if a variable doesn&amp;rsquo;t exist, the template system inserts the value of the engine&amp;rsquo;s &lt;code&gt;string_if_invalid&lt;/code&gt; configuration option, which is set to &lt;code&gt;''&lt;/code&gt; (the empty string) by default.</source>
          <target state="translated">일반적으로 변수가 존재하지 않으면 템플릿 시스템은 엔진의 &lt;code&gt;string_if_invalid&lt;/code&gt; 구성 옵션 의 값을 삽입하며 기본적 으로 &lt;code&gt;''&lt;/code&gt; (빈 문자열)로 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="92a32cd2b90c5fd5f36cf2640c5f30799c071ce2" translate="yes" xml:space="preserve">
          <source>Generally, it&amp;rsquo;s best to define choices inside a model class, and to define a suitably-named constant for each value:</source>
          <target state="translated">일반적으로 모델 클래스 내에서 선택 사항을 정의하고 각 값에 대해 적절한 이름의 상수를 정의하는 것이 가장 좋습니다.</target>
        </trans-unit>
        <trans-unit id="7e4d313447d91008ef41337c3ee0b186df1484bc" translate="yes" xml:space="preserve">
          <source>Generally, slicing a &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; returns a new &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; &amp;ndash; it doesn&amp;rsquo;t evaluate the query. An exception is if you use the &amp;ldquo;step&amp;rdquo; parameter of Python slice syntax. For example, this would actually execute the query in order to return a list of every &lt;em&gt;second&lt;/em&gt; object of the first 10:</source>
          <target state="translated">일반적으로, 슬라이스 &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; &lt;/a&gt; 새로운 반환 &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; &lt;/a&gt; 이 쿼리를 평가하지 않습니다 -. Python 슬라이스 구문의 &quot;step&quot;매개 변수를 사용하는 경우는 예외입니다. 예를 들어, 처음 10 의 모든 &lt;em&gt;두 번째&lt;/em&gt; 객체 목록을 반환하기 위해 실제로 쿼리를 실행합니다 .</target>
        </trans-unit>
        <trans-unit id="7bfc57bad218eacb80f36721cb04e3614e67e865" translate="yes" xml:space="preserve">
          <source>Generally, something like the above isn&amp;rsquo;t considered a great idea. Most of the time, the best practice will be to return an &lt;a href=&quot;../../request-response#django.http.HttpResponseRedirect&quot;&gt;&lt;code&gt;HttpResponseRedirect&lt;/code&gt;&lt;/a&gt; and redirect the user to a view you&amp;rsquo;ve written, passing the list of selected objects in the GET query string. This allows you to provide complex interaction logic on the intermediary pages. For example, if you wanted to provide a more complete export function, you&amp;rsquo;d want to let the user choose a format, and possibly a list of fields to include in the export. The best thing to do would be to write a small action that redirects to your custom export view:</source>
          <target state="translated">일반적으로 위와 같은 것은 좋은 생각으로 간주되지 않습니다. 대부분의 경우 가장 좋은 방법은 &lt;a href=&quot;../../request-response#django.http.HttpResponseRedirect&quot;&gt; &lt;code&gt;HttpResponseRedirect&lt;/code&gt; &lt;/a&gt; 를 반환 하고 사용자가 작성한 뷰로 사용자를 리디렉션하고 GET 쿼리 문자열에서 선택한 객체 목록을 전달하는 것입니다. 이를 통해 중개 페이지에서 복잡한 상호 작용 논리를 제공 할 수 있습니다. 예를 들어,보다 완전한 내보내기 기능을 제공하려는 경우 사용자가 형식 및 내보내기에 포함 할 필드 목록을 선택할 수있게하려고합니다. 가장 좋은 방법은 사용자 지정 내보내기보기로 리디렉션되는 작은 작업을 작성하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="56be6c441bd144d493f92171e1bc7712fc16427c" translate="yes" xml:space="preserve">
          <source>Generally, template authors don&amp;rsquo;t need to worry about auto-escaping very much. Developers on the Python side (people writing views and custom filters) need to think about the cases in which data shouldn&amp;rsquo;t be escaped, and mark data appropriately, so things Just Work in the template.</source>
          <target state="translated">일반적으로 템플릿 작성자는 자동 이스케이프에 대해 크게 걱정할 필요가 없습니다. 파이썬 측의 개발자 (보기 및 사용자 정의 필터를 작성하는 사람들)는 데이터를 이스케이프해서는 안되는 경우에 대해 생각하고 적절하게 데이터를 표시해야하므로 템플릿에서 작동합니다.</target>
        </trans-unit>
        <trans-unit id="27ed1f3562f09d7b3deaadb1e45e59d35ebcea77" translate="yes" xml:space="preserve">
          <source>Generally, the correct solution is to change your code to use an aware datetime instead.</source>
          <target state="translated">일반적으로 올바른 해결책은 대신 인식 날짜 시간을 사용하도록 코드를 변경하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="eb47639ff76881dfa64a9d2bdd365dbcf0e3fe65" translate="yes" xml:space="preserve">
          <source>Generally, the default value should suffice. Only set this setting if you want to restrict language selection to a subset of the Django-provided languages.</source>
          <target state="translated">일반적으로 기본값으로 충분합니다. 언어 선택을 Django 제공 언어의 하위 세트로 제한하려는 경우에만이 설정을 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="6cef6ee0893a2489e91dd154fc9e7ee5cc0e3005" translate="yes" xml:space="preserve">
          <source>Generally, the default value should suffice. Only set this setting if you want to restrict language selection to a subset of the Django-provided languages. If you define a custom &lt;a href=&quot;#std:setting-LANGUAGES&quot;&gt;&lt;code&gt;LANGUAGES&lt;/code&gt;&lt;/a&gt; setting, the list of bidirectional languages may contain language codes which are not enabled on a given site.</source>
          <target state="translated">일반적으로 기본값으로 충분합니다. 언어 선택을 Django 제공 언어의 하위 세트로 제한하려는 경우에만이 설정을 설정하십시오. 사용자 정의 &lt;a href=&quot;#std:setting-LANGUAGES&quot;&gt; &lt;code&gt;LANGUAGES&lt;/code&gt; &lt;/a&gt; 설정 을 정의하면 양방향 언어 목록에 특정 사이트에서 사용하지 않는 언어 코드가 포함될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="319c714cbc952fc158b189c40cb203831d68b6c9" translate="yes" xml:space="preserve">
          <source>Generally, when working on a single Django project, it&amp;rsquo;s easier to use &lt;code&gt;manage.py&lt;/code&gt; than &lt;code&gt;django-admin&lt;/code&gt;. If you need to switch between multiple Django settings files, use &lt;code&gt;django-admin&lt;/code&gt; with &lt;a href=&quot;../topics/settings#envvar-DJANGO_SETTINGS_MODULE&quot; id=&quot;index-1&quot;&gt;&lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt;&lt;/a&gt; or the &lt;a href=&quot;#cmdoption-settings&quot;&gt;&lt;code&gt;--settings&lt;/code&gt;&lt;/a&gt; command line option.</source>
          <target state="translated">일반적으로 단일 Django 프로젝트에서 작업 할 때는 &lt;code&gt;django-admin&lt;/code&gt; 보다 &lt;code&gt;manage.py&lt;/code&gt; 를 사용하는 것이 더 쉽습니다 . 여러 Django 설정 파일간에 전환해야하는 경우 &lt;code&gt;django-admin&lt;/code&gt; 을 &lt;a href=&quot;../topics/settings#envvar-DJANGO_SETTINGS_MODULE&quot; id=&quot;index-1&quot;&gt; &lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;#cmdoption-settings&quot;&gt; &lt;code&gt;--settings&lt;/code&gt; &lt;/a&gt; 명령 줄 옵션 과 함께 사용 하십시오 .</target>
        </trans-unit>
        <trans-unit id="f887d501c8d01a35b48d29631cb2040eeb658701" translate="yes" xml:space="preserve">
          <source>Generally, when writing a Django app, you&amp;rsquo;ll evaluate whether generic views are a good fit for your problem, and you&amp;rsquo;ll use them from the beginning, rather than refactoring your code halfway through. But this tutorial intentionally has focused on writing the views &amp;ldquo;the hard way&amp;rdquo; until now, to focus on core concepts.</source>
          <target state="translated">일반적으로 Django 앱을 작성할 때 일반 뷰가 문제에 적합한 지 평가하고 코드를 중간에 리팩토링하지 않고 처음부터 사용합니다. 그러나이 튜토리얼은 의도적으로 핵심 개념에 초점을 맞추기 위해 뷰를 &quot;어려운 방법&quot;으로 작성하는 데 중점을 두었습니다.</target>
        </trans-unit>
        <trans-unit id="d2cabdf30edfb04025f5c5d082a12b4e021f8810" translate="yes" xml:space="preserve">
          <source>Generally, you should avoid converting a &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.datetime&quot;&gt;&lt;code&gt;datetime&lt;/code&gt;&lt;/a&gt; to &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.date&quot;&gt;&lt;code&gt;date&lt;/code&gt;&lt;/a&gt;. For instance, you can use the &lt;a href=&quot;../../ref/templates/builtins#std:templatefilter-date&quot;&gt;&lt;code&gt;date&lt;/code&gt;&lt;/a&gt; template filter to only show the date part of a datetime. This filter will convert the datetime into the current time zone before formatting it, ensuring the results appear correctly.</source>
          <target state="translated">일반적으로 &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.datetime&quot;&gt; &lt;code&gt;datetime&lt;/code&gt; &lt;/a&gt; 을 &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.date&quot;&gt; &lt;code&gt;date&lt;/code&gt; &lt;/a&gt; 로 변환하지 않아야 합니다 . 예를 들어 &lt;a href=&quot;../../ref/templates/builtins#std:templatefilter-date&quot;&gt; &lt;code&gt;date&lt;/code&gt; &lt;/a&gt; 템플릿 필터를 사용하여 날짜 / 시간의 날짜 부분 만 표시 할 수 있습니다 . 이 필터는 날짜 시간을 포맷하기 전에 현재 시간대로 변환하여 결과가 올바르게 표시되도록합니다.</target>
        </trans-unit>
        <trans-unit id="0990f513d5c0effdf4a377d7f04ce84086b2d68d" translate="yes" xml:space="preserve">
          <source>Generally, you won&amp;rsquo;t need to inherit from multiple parents. The main use-case where this is useful is for &amp;ldquo;mix-in&amp;rdquo; classes: adding a particular extra field or method to every class that inherits the mix-in. Try to keep your inheritance hierarchies as simple and straightforward as possible so that you won&amp;rsquo;t have to struggle to work out where a particular piece of information is coming from.</source>
          <target state="translated">일반적으로 여러 부모로부터 상속받을 필요가 없습니다. 이것이 유용한 주요 유스 케이스는 &quot;믹스 인&quot;클래스에 해당됩니다. 믹스 인을 상속하는 모든 클래스에 특정 추가 필드 또는 메소드 추가. 상속 계층 구조를 가능한 한 단순하고 간단하게 유지하여 특정 정보가 어디에서 나오는지 고민하지 않아도됩니다.</target>
        </trans-unit>
        <trans-unit id="002ec76556b82bbbbcb60321162dcb04354ff2b8" translate="yes" xml:space="preserve">
          <source>Generally, you&amp;rsquo;ll store templates in files on your filesystem rather than using the low-level &lt;a href=&quot;#django.template.Template&quot;&gt;&lt;code&gt;Template&lt;/code&gt;&lt;/a&gt; API yourself. Save templates in a directory specified as a &lt;strong&gt;template directory&lt;/strong&gt;.</source>
          <target state="translated">일반적으로 저수준 &lt;a href=&quot;#django.template.Template&quot;&gt; &lt;code&gt;Template&lt;/code&gt; &lt;/a&gt; API를 직접 사용하지 않고 파일 시스템의 파일에 템플릿을 저장합니다 . A와 지정된 디렉토리에 저장 템플릿 &lt;strong&gt;템플릿 디렉토리&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="64c3678f265c4b6f9178283fbd7fc418e2ad8790" translate="yes" xml:space="preserve">
          <source>Generate migration files without Django version and timestamp header.</source>
          <target state="translated">Django 버전 및 타임 스탬프 헤더없이 마이그레이션 파일을 생성하십시오.</target>
        </trans-unit>
        <trans-unit id="c5825daab40bbc561a3ed313a76db995a0d8af36" translate="yes" xml:space="preserve">
          <source>Generate squashed migration file without Django version and timestamp header.</source>
          <target state="translated">Django 버전 및 타임 스탬프 헤더없이 스쿼시 된 마이그레이션 파일을 생성하십시오.</target>
        </trans-unit>
        <trans-unit id="37b0ace3843507d7ca5e2a84b3831e29036c762c" translate="yes" xml:space="preserve">
          <source>Generate two empty migration files for the same app by running &lt;code&gt;makemigrations myapp --empty&lt;/code&gt; twice. We&amp;rsquo;ve renamed the migration files to give them meaningful names in the examples below.</source>
          <target state="translated">&lt;code&gt;makemigrations myapp --empty&lt;/code&gt; 를 두 번 실행하여 동일한 앱에 대해 두 개의 빈 마이그레이션 파일을 생성하십시오 . 아래 예제에서 마이그레이션 파일의 이름을 변경하여 의미있는 이름을 지정했습니다.</target>
        </trans-unit>
        <trans-unit id="6ecdf7dadc0bc7b684b3bcd576a037fd41031280" translate="yes" xml:space="preserve">
          <source>Generates a &lt;code&gt;__str__()&lt;/code&gt; method on the model that returns the given field name.</source>
          <target state="translated">주어진 필드 이름을 리턴하는 모델 에서 &lt;code&gt;__str__()&lt;/code&gt; 메소드를 생성합니다 .</target>
        </trans-unit>
        <trans-unit id="a9a0484765197eb2305b98f6cd9fc6e71d1f3034" translate="yes" xml:space="preserve">
          <source>Generates the SQL for the database function.</source>
          <target state="translated">데이터베이스 기능에 대한 SQL을 생성합니다.</target>
        </trans-unit>
        <trans-unit id="97469305be1d987a5209d9a384da92ab8de38e60" translate="yes" xml:space="preserve">
          <source>Generates the SQL for unapplying the migration. By default, the SQL created is for running the migration in the forwards direction.</source>
          <target state="translated">마이그레이션 적용을 취소하기위한 SQL을 생성합니다. 기본적으로 작성된 SQL은 정방향으로 마이그레이션을 실행하기위한 것입니다.</target>
        </trans-unit>
        <trans-unit id="63982e5335ffb2308b26af6c005f638092b3ea09" translate="yes" xml:space="preserve">
          <source>Generating &amp;ldquo;recover my account&amp;rdquo; URLs for sending to users who have lost their password.</source>
          <target state="translated">비밀번호를 잊어 버린 사용자에게 보내기 위해 &quot;내 계정 복구&quot;URL 생성</target>
        </trans-unit>
        <trans-unit id="7479ec37b32ba74fe2dad06103dd686c2a02418a" translate="yes" xml:space="preserve">
          <source>Generating admin sites for your staff or clients to add, change, and delete content is tedious work that doesn&amp;rsquo;t require much creativity. For that reason, Django entirely automates creation of admin interfaces for models.</source>
          <target state="translated">직원이나 클라이언트가 콘텐츠를 추가, 변경 및 삭제하기위한 관리 사이트를 생성하는 것은 많은 창의성을 요구하지 않는 지루한 작업입니다. 이런 이유로 Django는 모델 용 관리 인터페이스 생성을 완전히 자동화합니다.</target>
        </trans-unit>
        <trans-unit id="c188d3cb4928f6d0b6873ba0fe2f329a09ad77a4" translate="yes" xml:space="preserve">
          <source>Generating aggregates for each item in a &lt;code&gt;QuerySet&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;QuerySet&lt;/code&gt; 에서 각 항목에 대한 집계 생성</target>
        </trans-unit>
        <trans-unit id="249a34757e80bf41675fd5092f7d9d1cafd85921" translate="yes" xml:space="preserve">
          <source>Generating aggregates over a &lt;code&gt;QuerySet&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;QuerySet&lt;/code&gt; 에서 집계 생성</target>
        </trans-unit>
        <trans-unit id="f9c0b669418b95568aebff998fd28475a3840373" translate="yes" xml:space="preserve">
          <source>Generating one-time secret URLs for allowing temporary access to a protected resource, for example a downloadable file that a user has paid for.</source>
          <target state="translated">보호 된 리소스 (예 : 사용자가 지불 한 다운로드 가능한 파일)에 임시로 액세스 할 수 있도록 일회성 비밀 URL 생성</target>
        </trans-unit>
        <trans-unit id="57a711145988aff1f4c5baf8a2a956889bb3e41c" translate="yes" xml:space="preserve">
          <source>Generic date views</source>
          <target state="translated">일반적인 날짜보기</target>
        </trans-unit>
        <trans-unit id="1a969e34061b2510afad161402a65f214f5ce9c7" translate="yes" xml:space="preserve">
          <source>Generic display views</source>
          <target state="translated">일반 디스플레이 뷰</target>
        </trans-unit>
        <trans-unit id="82e089b93305d3c5e37400a98008314ffb3a857f" translate="yes" xml:space="preserve">
          <source>Generic editing views</source>
          <target state="translated">일반 편집 뷰</target>
        </trans-unit>
        <trans-unit id="c1472da43eb9fb9463431ec699f3ea11115b8c35" translate="yes" xml:space="preserve">
          <source>Generic relation in forms</source>
          <target state="translated">형태의 일반적인 관계</target>
        </trans-unit>
        <trans-unit id="7e709568eb3d50865428def64345bd0c2f85ed41" translate="yes" xml:space="preserve">
          <source>Generic relations</source>
          <target state="translated">일반적인 관계</target>
        </trans-unit>
        <trans-unit id="8b7efda9768e9d595d8fd92272959ad354f99b4e" translate="yes" xml:space="preserve">
          <source>Generic relations and aggregation</source>
          <target state="translated">일반 관계 및 집계</target>
        </trans-unit>
        <trans-unit id="2bd47084ada78ba1518e4110743b0bafb569f442" translate="yes" xml:space="preserve">
          <source>Generic relations in admin</source>
          <target state="translated">관리자의 일반적인 관계</target>
        </trans-unit>
        <trans-unit id="5501abd5185b3c6248d23e02a1ce2bfbd96f81c6" translate="yes" xml:space="preserve">
          <source>Generic views</source>
          <target state="translated">일반 뷰</target>
        </trans-unit>
        <trans-unit id="15919fc89293c3e5202f8b37a376f8b03e8dab06" translate="yes" xml:space="preserve">
          <source>Generic views abstract common patterns to the point where you don&amp;rsquo;t even need to write Python code to write an app.</source>
          <target state="translated">일반 뷰는 일반적인 패턴을 추상화하여 앱을 작성하기 위해 Python 코드를 작성할 필요조차 없습니다.</target>
        </trans-unit>
        <trans-unit id="df3e431d9c3a0b2572058f247141a08fa73367eb" translate="yes" xml:space="preserve">
          <source>Generic views of objects</source>
          <target state="translated">객체의 일반적인 뷰</target>
        </trans-unit>
        <trans-unit id="f884a81c2e23678106660b59e835282a2b0244e7" translate="yes" xml:space="preserve">
          <source>Generic views really shine when working with models. These generic views will automatically create a &lt;a href=&quot;../forms/modelforms#django.forms.ModelForm&quot;&gt;&lt;code&gt;ModelForm&lt;/code&gt;&lt;/a&gt;, so long as they can work out which model class to use:</source>
          <target state="translated">모델로 작업 할 때 일반 뷰가 실제로 빛납니다. 이 일반 뷰는 사용할 모델 클래스를 해결할 수 있는 한 &lt;a href=&quot;../forms/modelforms#django.forms.ModelForm&quot;&gt; &lt;code&gt;ModelForm&lt;/code&gt; &lt;/a&gt; 을 자동으로 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="76b44973a843d3bcdd7b8f1a980cd4b03a025fb9" translate="yes" xml:space="preserve">
          <source>GeoDjango</source>
          <target state="translated">GeoDjango</target>
        </trans-unit>
        <trans-unit id="fb8d70b0b197a9acece10c07e4c7fdd557f1be8e" translate="yes" xml:space="preserve">
          <source>GeoDjango Database API</source>
          <target state="translated">GeoDjango 데이터베이스 API</target>
        </trans-unit>
        <trans-unit id="e8b7a06075e0a1b414b6c69d16be262829e002f4" translate="yes" xml:space="preserve">
          <source>GeoDjango Forms API</source>
          <target state="translated">GeoDjango Forms API</target>
        </trans-unit>
        <trans-unit id="bfae1f1236df0250ad2ce27a6481102c026c4cdd" translate="yes" xml:space="preserve">
          <source>GeoDjango Installation</source>
          <target state="translated">거장 고 설치</target>
        </trans-unit>
        <trans-unit id="94028033177f0a25ff8cb38b0aa2bbb9f98c96f5" translate="yes" xml:space="preserve">
          <source>GeoDjango Management Commands</source>
          <target state="translated">GeoDjango 관리 명령</target>
        </trans-unit>
        <trans-unit id="877a1bb2c6226b98095871dfb623f83abe458ba7" translate="yes" xml:space="preserve">
          <source>GeoDjango Model API</source>
          <target state="translated">GeoDjango 모델 API</target>
        </trans-unit>
        <trans-unit id="a20664c0b4bdfe6af8891c490a1ffdb9c5c615f6" translate="yes" xml:space="preserve">
          <source>GeoDjango Tutorial</source>
          <target state="translated">GeoDjango 튜토리얼</target>
        </trans-unit>
        <trans-unit id="4de4647b8b51ad2ab3a1c065a89ba222dd9856dc" translate="yes" xml:space="preserve">
          <source>GeoDjango Utilities</source>
          <target state="translated">GeoDjango 유틸리티</target>
        </trans-unit>
        <trans-unit id="71c062fc8ed04aae09d37692b07d1224332f91ae" translate="yes" xml:space="preserve">
          <source>GeoDjango adds spatial lookups to the Django ORM. For example, you can find the country in the &lt;code&gt;WorldBorder&lt;/code&gt; table that contains a particular point. First, fire up the management shell:</source>
          <target state="translated">GeoDjango는 Django ORM에 공간 검색을 추가합니다. 예를 들어 &lt;code&gt;WorldBorder&lt;/code&gt; 테이블에서 특정 지점이 포함 된 국가를 찾을 수 있습니다 . 먼저 관리 셸을 시작하십시오.</target>
        </trans-unit>
        <trans-unit id="1749a1cb1bb9c2f6ff6dd7bcf0cd20f0a7abeb48" translate="yes" xml:space="preserve">
          <source>GeoDjango also offers a set of geographic annotations to compute distances and several other operations (intersection, difference, etc.). See the &lt;a href=&quot;functions&quot;&gt;Geographic Database Functions&lt;/a&gt; documentation.</source>
          <target state="translated">GeoDjango는 거리 및 기타 여러 작업 (교차점, 차이 등)을 계산하기 위해 지리적 주석 세트를 제공합니다. &lt;a href=&quot;functions&quot;&gt;지리 데이터베이스 기능&lt;/a&gt; 설명서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="5fc82cd8e43f8819ca610e94617381d8c61b6275" translate="yes" xml:space="preserve">
          <source>GeoDjango also supplements the Django admin by allowing users to create and modify geometries on a JavaScript slippy map (powered by &lt;a href=&quot;https://openlayers.org/&quot;&gt;OpenLayers&lt;/a&gt;).</source>
          <target state="translated">GeoDjango는 또한 사용자가 JavaScript 미끄러운지도 ( &lt;a href=&quot;https://openlayers.org/&quot;&gt;OpenLayers 제공&lt;/a&gt; ) 에서 도형을 작성하고 수정할 수 있도록하여 Django 관리자를 보완합니다 .</target>
        </trans-unit>
        <trans-unit id="3e011aaadd25f116aa5b636795a71dae045f10ff" translate="yes" xml:space="preserve">
          <source>GeoDjango basic apps was written by Dane Springmeyer, Josh Livni, and Christopher Schmidt.</source>
          <target state="translated">GeoDjango 기본 앱은 Dane Springmeyer, Josh Livni 및 Christopher Schmidt가 작성했습니다.</target>
        </trans-unit>
        <trans-unit id="abd937d2340abf6ba15de6356c4aacb77d4b2142" translate="yes" xml:space="preserve">
          <source>GeoDjango currently provides the following spatial database backends:</source>
          <target state="translated">GeoDjango는 현재 다음과 같은 공간 데이터베이스 백엔드를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="193f1930c783c95f77007577bf72364906fe021a" translate="yes" xml:space="preserve">
          <source>GeoDjango does not currently leverage any &lt;a href=&quot;https://postgis.net/docs/Topology.html&quot;&gt;PostGIS topology functionality&lt;/a&gt;. If you plan to use those features at some point, you can also install the &lt;code&gt;postgis_topology&lt;/code&gt; extension by issuing &lt;code&gt;CREATE EXTENSION
postgis_topology;&lt;/code&gt;.</source>
          <target state="translated">GeoDjango는 현재 &lt;a href=&quot;https://postgis.net/docs/Topology.html&quot;&gt;PostGIS 토폴로지 기능을 사용&lt;/a&gt; 하지 않습니다 . 특정 시점에 해당 기능을 사용하려는 경우 &lt;code&gt;CREATE EXTENSION postgis_topology;&lt;/code&gt; 를 실행 하여 &lt;code&gt;postgis_topology&lt;/code&gt; 확장을 설치할 수도 있습니다 . .</target>
        </trans-unit>
        <trans-unit id="1682f728f18526e820eaadb4fadcdae630e84a84" translate="yes" xml:space="preserve">
          <source>GeoDjango extends &lt;a href=&quot;../admin/index&quot;&gt;Django&amp;rsquo;s admin application&lt;/a&gt; with support for editing geometry fields.</source>
          <target state="translated">GeoDjango는 지오메트리 필드 편집을 지원하여 &lt;a href=&quot;../admin/index&quot;&gt;Django의 관리 응용 프로그램&lt;/a&gt; 을 확장 합니다.</target>
        </trans-unit>
        <trans-unit id="e16764ce538d1743a7883a90a8a47d871b7df216" translate="yes" xml:space="preserve">
          <source>GeoDjango form widgets allow you to display and edit geographic data on a visual map. Note that none of the currently available widgets supports 3D geometries, hence geometry fields will fallback using a &lt;code&gt;Textarea&lt;/code&gt; widget for such data.</source>
          <target state="translated">GeoDjango 양식 위젯을 사용하면 시각적지도에 지리 데이터를 표시하고 편집 할 수 있습니다. 현재 사용 가능한 위젯 중 어느 것도 3D 지오메트리를 지원하지 않으므로 지오메트리 필드는 해당 데이터에 대해 &lt;code&gt;Textarea&lt;/code&gt; 위젯을 사용하여 대체 됩니다.</target>
        </trans-unit>
        <trans-unit id="891d521a99f30d373b9dbd444935c8ffc39cb360" translate="yes" xml:space="preserve">
          <source>GeoDjango has additional requirements beyond what Django requires &amp;ndash; please consult the &lt;a href=&quot;install/index&quot;&gt;installation documentation&lt;/a&gt; for more details.</source>
          <target state="translated">GeoDjango에는 Django에 필요한 것 이외의 추가 요구 사항이 있습니다. 자세한 내용 은 &lt;a href=&quot;install/index&quot;&gt;설치 설명서&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="8980cfb9c1e99c6e3e7db0a490d95a1d8c44b809" translate="yes" xml:space="preserve">
          <source>GeoDjango has its own &lt;a href=&quot;#django.contrib.gis.feeds.Feed&quot;&gt;&lt;code&gt;Feed&lt;/code&gt;&lt;/a&gt; subclass that may embed location information in RSS/Atom feeds formatted according to either the &lt;a href=&quot;http://georss.org/simple.html&quot;&gt;Simple GeoRSS&lt;/a&gt; or &lt;a href=&quot;https://www.w3.org/2003/01/geo/&quot;&gt;W3C Geo&lt;/a&gt; standards. Because GeoDjango&amp;rsquo;s syndication API is a superset of Django&amp;rsquo;s, please consult &lt;a href=&quot;../syndication&quot;&gt;Django&amp;rsquo;s syndication documentation&lt;/a&gt; for details on general usage.</source>
          <target state="translated">GeoDjango에는 &lt;a href=&quot;http://georss.org/simple.html&quot;&gt;Simple GeoRSS&lt;/a&gt; 또는 &lt;a href=&quot;https://www.w3.org/2003/01/geo/&quot;&gt;W3C Geo&lt;/a&gt; 표준 에 따라 형식화 된 RSS / Atom 피드에 위치 정보를 포함 할 수 있는 자체 &lt;a href=&quot;#django.contrib.gis.feeds.Feed&quot;&gt; &lt;code&gt;Feed&lt;/code&gt; &lt;/a&gt; 서브 클래스가 있습니다 . GeoDjango의 신디케이션 API는 Django의 상위 집합이므로 일반적인 사용법에 대한 자세한 내용은 &lt;a href=&quot;../syndication&quot;&gt;Django의 신디케이션 문서&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="ac4759afcd67a7889efe287968c488637e7e4154" translate="yes" xml:space="preserve">
          <source>GeoDjango implements a high-level Python wrapper for the GEOS library, its features include:</source>
          <target state="translated">GeoDjango는 GEOS 라이브러리를위한 고급 Python 래퍼를 구현하며 그 기능은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="8691a07ec4db590c21d008e1c7f51f869c746078" translate="yes" xml:space="preserve">
          <source>GeoDjango intends to be a world-class geographic Web framework. Its goal is to make it as easy as possible to build GIS Web applications and harness the power of spatially enabled data.</source>
          <target state="translated">GeoDjango는 세계적인 지리적 웹 프레임 워크가 되고자합니다. 목표는 가능한 한 쉽게 GIS 웹 애플리케이션을 구축하고 공간적으로 활성화 된 데이터의 힘을 활용하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="dc3067870d1f5805bbf4b0ad3a4048675cf2e61a" translate="yes" xml:space="preserve">
          <source>GeoDjango is an included contrib module for Django that turns it into a world-class geographic Web framework. GeoDjango strives to make it as simple as possible to create geographic Web applications, like location-based services. Its features include:</source>
          <target state="translated">GeoDjango는 Django에 포함 된 contrib 모듈로, 세계적 수준의 지리적 웹 프레임 워크로 변환됩니다. GeoDjango는 위치 기반 서비스와 같은 지리적 웹 응용 프로그램을 최대한 간단하게 만들기 위해 노력하고 있습니다. 기능은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="f79e051bc0b9bb1a9bb29e9666937dde2f48eaa1" translate="yes" xml:space="preserve">
          <source>GeoDjango loads geometries in a standardized textual representation. When the geometry field is first accessed, GeoDjango creates a &lt;a href=&quot;geos#django.contrib.gis.geos.GEOSGeometry&quot;&gt;&lt;code&gt;GEOSGeometry&lt;/code&gt;&lt;/a&gt; object, exposing powerful functionality, such as serialization properties for popular geospatial formats:</source>
          <target state="translated">GeoDjango는 표준화 된 텍스트 표현으로 도형을로드합니다. 지오메트리 필드에 처음 액세스하면 GeoDjango는 &lt;a href=&quot;geos#django.contrib.gis.geos.GEOSGeometry&quot;&gt; &lt;code&gt;GEOSGeometry&lt;/code&gt; &lt;/a&gt; 객체를 생성하여 널리 사용되는 지리 공간 형식의 직렬화 속성과 같은 강력한 기능을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="cddbaf21c073b2a21bf62f706b2d1a36600503f4" translate="yes" xml:space="preserve">
          <source>GeoDjango provides a high-level Python interface for some of the capabilities of OGR, including the reading and coordinate transformation of vector spatial data and minimal support for GDAL&amp;rsquo;s features with respect to raster (image) data.</source>
          <target state="translated">GeoDjango는 벡터 공간 데이터의 읽기 및 좌표 변환과 래스터 (이미지) 데이터에 대한 GDAL의 기능에 대한 최소 지원을 포함하여 OGR의 일부 기능을위한 고급 Python 인터페이스를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="8ab177579f297197692478183f417ff98d86a3b9" translate="yes" xml:space="preserve">
          <source>GeoDjango provides a specific serializer for the &lt;a href=&quot;https://geojson.org/&quot;&gt;GeoJSON&lt;/a&gt; format. See &lt;a href=&quot;../../../topics/serialization&quot;&gt;Serializing Django objects&lt;/a&gt; for more information on serialization.</source>
          <target state="translated">GeoDjango는 &lt;a href=&quot;https://geojson.org/&quot;&gt;GeoJSON&lt;/a&gt; 형식을 위한 특정 시리얼 라이저를 제공 합니다. &lt;a href=&quot;../../../topics/serialization&quot;&gt;직렬화에&lt;/a&gt; 대한 자세한 내용은 Django 객체 직렬화를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="c6f946f97cdb6a58a41890ac734eee51f28851ab" translate="yes" xml:space="preserve">
          <source>GeoDjango provides some specialized form fields and widgets in order to visually display and edit geolocalized data on a map. By default, they use &lt;a href=&quot;https://openlayers.org/&quot;&gt;OpenLayers&lt;/a&gt;-powered maps, with a base WMS layer provided by &lt;a href=&quot;https://earthdata.nasa.gov/&quot;&gt;NASA&lt;/a&gt;.</source>
          <target state="translated">GeoDjango는 지역화 된 데이터를지도에 시각적으로 표시하고 편집 할 수 있도록 특수화 된 양식 필드와 위젯을 제공합니다. 기본적 으로 &lt;a href=&quot;https://earthdata.nasa.gov/&quot;&gt;NASA에서&lt;/a&gt; 제공하는 기본 WMS 계층과 함께 &lt;a href=&quot;https://openlayers.org/&quot;&gt;OpenLayers&lt;/a&gt; 기반 맵 을 사용 합니다.</target>
        </trans-unit>
        <trans-unit id="98075c705db0a9e3c5b3b71dc6c87a9bcbadfa67" translate="yes" xml:space="preserve">
          <source>GeoDjango tests</source>
          <target state="translated">GeoDjango 테스트</target>
        </trans-unit>
        <trans-unit id="9c538087cb08785ef5d39189792a0d2ae13b7b4e" translate="yes" xml:space="preserve">
          <source>GeoDjango uses and/or provides interfaces for the following open source geospatial libraries:</source>
          <target state="translated">GeoDjango는 다음과 같은 오픈 소스 지리 공간 라이브러리를위한 인터페이스를 사용 및 / 또는 제공합니다.</target>
        </trans-unit>
        <trans-unit id="e7fc3d592fa359935e1ebdcd77cec13e8dffc4dc" translate="yes" xml:space="preserve">
          <source>GeoDjango uses the &lt;a href=&quot;https://docs.python.org/3/library/ctypes.html#ctypes.util.find_library&quot;&gt;&lt;code&gt;find_library()&lt;/code&gt;&lt;/a&gt; routine from &lt;code&gt;ctypes.util&lt;/code&gt; to locate shared libraries.</source>
          <target state="translated">GeoDjango는 사용 &lt;a href=&quot;https://docs.python.org/3/library/ctypes.html#ctypes.util.find_library&quot;&gt; &lt;code&gt;find_library()&lt;/code&gt; &lt;/a&gt; 에서 루틴을 &lt;code&gt;ctypes.util&lt;/code&gt; 공유 라이브러리를 찾습니다.</target>
        </trans-unit>
        <trans-unit id="0a0924509e0f06a4da5f90bc04f536663113ff96" translate="yes" xml:space="preserve">
          <source>GeoDjango uses the &lt;code&gt;find_library&lt;/code&gt; function (from the &lt;code&gt;ctypes.util&lt;/code&gt; Python module) to discover libraries. The &lt;code&gt;find_library&lt;/code&gt; routine uses a program called &lt;code&gt;objdump&lt;/code&gt; (part of the &lt;code&gt;binutils&lt;/code&gt; package) to verify a shared library on GNU/Linux systems. Thus, if &lt;code&gt;binutils&lt;/code&gt; is not installed on your Linux system then Python&amp;rsquo;s ctypes may not be able to find your library even if your library path is set correctly and geospatial libraries were built perfectly.</source>
          <target state="translated">GeoDjango는 &lt;code&gt;ctypes.util&lt;/code&gt; Python 모듈 의 &lt;code&gt;find_library&lt;/code&gt; 함수를 사용하여 라이브러리를 검색합니다. &lt;code&gt;find_library&lt;/code&gt; 루틴라는 프로그램 사용 &lt;code&gt;objdump&lt;/code&gt; 를 (의 일부 &lt;code&gt;binutils&lt;/code&gt; GNU / 리눅스 시스템에서 공유 라이브러리를 확인하기 위해 패키지). 따라서 &lt;code&gt;binutils&lt;/code&gt; 가 Linux 시스템에 설치되어 있지 않으면 라이브러리 경로가 올바르게 설정되어 있고 지형 공간 라이브러리가 완벽하게 빌드 된 경우에도 Python의 ctypes가 라이브러리를 찾지 못할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b01014a3c4d84619b154a68ffd6fdcb1cf93cf08" translate="yes" xml:space="preserve">
          <source>GeoDjango uses the GDAL geospatial library which is not thread safe at this time. Thus, it is &lt;em&gt;highly&lt;/em&gt; recommended to not use threading when deploying &amp;ndash; in other words, use an appropriate configuration of Apache.</source>
          <target state="translated">GeoDjango는 현재 스레드 안전하지 않은 GDAL 지리 공간 라이브러리를 사용합니다. 따라서,이되어 &lt;em&gt;매우&lt;/em&gt; 배포 할 때 스레딩 사용하지 않는 것이 좋습니다 - 즉, 아파치의 적절한 구성을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="16ae67bb3fc772005f084defbf2e6db1d92d5719" translate="yes" xml:space="preserve">
          <source>GeoDjango widgets are template-based, so their attributes are mostly different from other Django widget attributes.</source>
          <target state="translated">GeoDjango 위젯은 템플릿 기반이므로 속성이 대부분 다른 Django 위젯 속성과 다릅니다.</target>
        </trans-unit>
        <trans-unit id="9d8e7e09cdd6b3e40cc49012bdb226fb60c1266a" translate="yes" xml:space="preserve">
          <source>GeoDjango&amp;rsquo;s ORM will automatically wrap geometry values in transformation SQL, allowing the developer to work at a higher level of abstraction:</source>
          <target state="translated">GeoDjango의 ORM은 변환 SQL에서 형상 값을 자동으로 래핑하여 개발자가보다 높은 수준의 추상화에서 작업 할 수 있도록합니다.</target>
        </trans-unit>
        <trans-unit id="136545a4948e28df9a4cfd41baae8bdacfa95501" translate="yes" xml:space="preserve">
          <source>GeoDjango&amp;rsquo;s admin site</source>
          <target state="translated">GeoDjango의 관리 사이트</target>
        </trans-unit>
        <trans-unit id="1cbe465617fb128d99a40591f1695db47635c221" translate="yes" xml:space="preserve">
          <source>GeoDjango&amp;rsquo;s lookup types may be used with any manager method like &lt;code&gt;filter()&lt;/code&gt;, &lt;code&gt;exclude()&lt;/code&gt;, etc. However, the lookup types unique to GeoDjango are only available on spatial fields.</source>
          <target state="translated">GeoDjango의 조회 유형은 &lt;code&gt;filter()&lt;/code&gt; , &lt;code&gt;exclude()&lt;/code&gt; 등과 같은 모든 관리자 메소드와 함께 사용될 수 있습니다 . 그러나 GeoDjango 고유의 조회 유형은 공간 필드에서만 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e930c77fc593e1a3057029af0150f200e578a5f8" translate="yes" xml:space="preserve">
          <source>GeoDjango’s admin site</source>
          <target state="translated">GeoDjango의 관리 사이트</target>
        </trans-unit>
        <trans-unit id="98ee0730fa1ecffb4446df2cf10fd043d3f3523c" translate="yes" xml:space="preserve">
          <source>GeoIP</source>
          <target state="translated">GeoIP</target>
        </trans-unit>
        <trans-unit id="39ee39af2d2e3bf7b46140abbb7f4371a399a37f" translate="yes" xml:space="preserve">
          <source>GeoIP(R) is a registered trademark of MaxMind, Inc.</source>
          <target state="translated">GeoIP (R)는 MaxMind, Inc.의 등록 상표입니다.</target>
        </trans-unit>
        <trans-unit id="97eeda258d4d0c87a81a7741038e625eda23a2a6" translate="yes" xml:space="preserve">
          <source>GeoJSON</source>
          <target state="translated">GeoJSON</target>
        </trans-unit>
        <trans-unit id="34040826ec22e3299cf157468d8b0814d292c197" translate="yes" xml:space="preserve">
          <source>GeoJSON Serializer</source>
          <target state="translated">GeoJSON 시리얼 라이저</target>
        </trans-unit>
        <trans-unit id="4c3f8a1884337450687146c8287b49e38ea44373" translate="yes" xml:space="preserve">
          <source>Geographic Admin</source>
          <target state="translated">지리 관리자</target>
        </trans-unit>
        <trans-unit id="08a11adebd76ce7a843b8dca89cdaf9b00bb0144" translate="yes" xml:space="preserve">
          <source>Geographic Data</source>
          <target state="translated">지리 데이터</target>
        </trans-unit>
        <trans-unit id="0eda40b0a849adbdecdc0f612b3bd4d836c6e254" translate="yes" xml:space="preserve">
          <source>Geographic Database Functions</source>
          <target state="translated">지리 데이터베이스 기능</target>
        </trans-unit>
        <trans-unit id="a703edbf6881dafb5316d88af33048e916592325" translate="yes" xml:space="preserve">
          <source>Geographic Feeds</source>
          <target state="translated">지리 피드</target>
        </trans-unit>
        <trans-unit id="190944449613afbd7f9bd321a28222ea15fa1f9b" translate="yes" xml:space="preserve">
          <source>Geographic Models</source>
          <target state="translated">지리적 모델</target>
        </trans-unit>
        <trans-unit id="7a861886b376799d062ab3c6823b4d1c938a1308" translate="yes" xml:space="preserve">
          <source>Geographic Sitemaps</source>
          <target state="translated">지리적 사이트 맵</target>
        </trans-unit>
        <trans-unit id="021a323d2229cf60dd8130ccafa9464d9f895101" translate="yes" xml:space="preserve">
          <source>Geographic annotations</source>
          <target state="translated">지리적 주석</target>
        </trans-unit>
        <trans-unit id="2e8c2b4df8eeaac4252c5331e04802c9b86ab936" translate="yes" xml:space="preserve">
          <source>Geographic framework</source>
          <target state="translated">지리적 프레임 워크</target>
        </trans-unit>
        <trans-unit id="0079ff114abc2ccabd5e955bd2f167e7889a1687" translate="yes" xml:space="preserve">
          <source>Geographic queries with geometries take the following general form (assuming the &lt;code&gt;Zipcode&lt;/code&gt; model used in the &lt;a href=&quot;model-api&quot;&gt;GeoDjango Model API&lt;/a&gt;):</source>
          <target state="translated">지오메트리가있는 지리적 쿼리는 다음과 같은 일반적인 형식을 취합니다 ( &lt;a href=&quot;model-api&quot;&gt;GeoDjango Model API&lt;/a&gt; 에서 사용되는 &lt;code&gt;Zipcode&lt;/code&gt; 모델을 가정 ).</target>
        </trans-unit>
        <trans-unit id="0c0fac69cdfabd05c7df2017c1e01ab5627a45ab" translate="yes" xml:space="preserve">
          <source>Geography Type</source>
          <target state="translated">지리 유형</target>
        </trans-unit>
        <trans-unit id="fbe47565ebdb262717c7861ebf58e31b12c1414d" translate="yes" xml:space="preserve">
          <source>Geography support is limited to PostGIS and will force the SRID to be 4326.</source>
          <target state="translated">지리 지원은 PostGIS로 제한되며 SRID는 4326이됩니다.</target>
        </trans-unit>
        <trans-unit id="46250ca0dfb01ec701cd710565523f12ab685b09" translate="yes" xml:space="preserve">
          <source>Geolocation with GeoIP2</source>
          <target state="translated">GeoIP2를 사용한 지리적 위치</target>
        </trans-unit>
        <trans-unit id="35171d7fc44e44bbd149d79f68793a5f09307bb0" translate="yes" xml:space="preserve">
          <source>Geometries are Pythonic</source>
          <target state="translated">기하학은 파이썬입니다</target>
        </trans-unit>
        <trans-unit id="9a9e67d4b853d4bb48d8ab51f08cb7351bf0a8ff" translate="yes" xml:space="preserve">
          <source>Geometries support set-like operators:</source>
          <target state="translated">형상은 세트와 같은 연산자를 지원합니다.</target>
        </trans-unit>
        <trans-unit id="9d1226717c2fc305626512b0a1ae618fddfee0b9" translate="yes" xml:space="preserve">
          <source>Geometry</source>
          <target state="translated">Geometry</target>
        </trans-unit>
        <trans-unit id="6bf68521ba1b36c0e30717dcc5416290c2bd195a" translate="yes" xml:space="preserve">
          <source>Geometry Collections</source>
          <target state="translated">지오메트리 컬렉션</target>
        </trans-unit>
        <trans-unit id="634de25ba228f9fe855e233d1a73bb1e3624e2b2" translate="yes" xml:space="preserve">
          <source>Geometry Engine Open Source</source>
          <target state="translated">형상 엔진 오픈 소스</target>
        </trans-unit>
        <trans-unit id="d3262bc1ec3d4cb7ac4532f23997b4f04e17ee63" translate="yes" xml:space="preserve">
          <source>Geometry Factories</source>
          <target state="translated">지오메트리 팩토리</target>
        </trans-unit>
        <trans-unit id="7bd508896b5eca1c3e3ad0712513d474a8a12299" translate="yes" xml:space="preserve">
          <source>Geometry Field Options</source>
          <target state="translated">형상 필드 옵션</target>
        </trans-unit>
        <trans-unit id="a5d5114f7a773f987eb673d642d7f9de4967fe5d" translate="yes" xml:space="preserve">
          <source>Geometry Lookups</source>
          <target state="translated">형상 조회</target>
        </trans-unit>
        <trans-unit id="0c966cf1201e4037c0f25b2d0ce4de2ba27b4d5a" translate="yes" xml:space="preserve">
          <source>Geometry Objects</source>
          <target state="translated">형상 객체</target>
        </trans-unit>
        <trans-unit id="7c0ba0c8b987af42bc684ac9ce4f146c583a5ebc" translate="yes" xml:space="preserve">
          <source>Geometry conversion support &lt;code&gt;C&lt;/code&gt;. The lookup does not have native raster support, all raster data is automatically converted to geometries.</source>
          <target state="translated">형상 변환을 지원 &lt;code&gt;C&lt;/code&gt; . 조회에는 기본 래스터 지원이 없으며 모든 래스터 데이터가 자동으로 형상으로 변환됩니다.</target>
        </trans-unit>
        <trans-unit id="08c06c630a3754e6edc49ddc9cd070ec64b0b09d" translate="yes" xml:space="preserve">
          <source>Geometry example:</source>
          <target state="translated">형상 예 :</target>
        </trans-unit>
        <trans-unit id="7a62c2c9bf321ceff5fae325eafc6d04db4cc6ff" translate="yes" xml:space="preserve">
          <source>Geospatial Data Abstraction Library</source>
          <target state="translated">지리 공간 데이터 추상화 라이브러리</target>
        </trans-unit>
        <trans-unit id="0dc2e5954c12f037f940d57ec5c9b7afe01ce77f" translate="yes" xml:space="preserve">
          <source>Geospatial libraries</source>
          <target state="translated">지리 공간 라이브러리</target>
        </trans-unit>
        <trans-unit id="99ed2c09261dfab0ea3ab6d07aae9b6d75fa093d" translate="yes" xml:space="preserve">
          <source>German legal metre</source>
          <target state="translated">독일 법률 미터</target>
        </trans-unit>
        <trans-unit id="69e57c40eaf705eec95814bf280b26be032b7fce" translate="yes" xml:space="preserve">
          <source>Get the latest SpatiaLite library source bundle from the &lt;a href=&quot;https://www.gaia-gis.it/gaia-sins/libspatialite-sources/&quot;&gt;download page&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;https://www.gaia-gis.it/gaia-sins/libspatialite-sources/&quot;&gt;다운로드 페이지&lt;/a&gt; 에서 최신 SpatiaLite 라이브러리 소스 번들을 가져 오십시오 .</target>
        </trans-unit>
        <trans-unit id="f8219b39fc78d276a3e9eee050eeafc262ee63bc" translate="yes" xml:space="preserve">
          <source>Get the latest version of Python at &lt;a href=&quot;https://www.python.org/downloads/&quot;&gt;https://www.python.org/downloads/&lt;/a&gt; or with your operating system&amp;rsquo;s package manager.</source>
          <target state="translated">&lt;a href=&quot;https://www.python.org/downloads/&quot;&gt;https://www.python.org/downloads/&lt;/a&gt; 또는 운영 체제의 패키지 관리자와 함께 최신 버전의 Python을 받으십시오 .</target>
        </trans-unit>
        <trans-unit id="349ffb96bafdf031de5166a9a6d08020c5ebd1ec" translate="yes" xml:space="preserve">
          <source>Get the list of items for this view. This must be an iterable and may be a queryset (in which queryset-specific behavior will be enabled).</source>
          <target state="translated">이 뷰의 아이템리스트를 가져옵니다. 이것은 iterable이어야하며 queryset 일 수 있습니다 (queryset 특정 동작이 활성화 될 수 있습니다).</target>
        </trans-unit>
        <trans-unit id="c595045ec25964be60d78faa85d89371211ec4b1" translate="yes" xml:space="preserve">
          <source>Get things right from the start</source>
          <target state="translated">처음부터 바로 물건을 얻으십시오</target>
        </trans-unit>
        <trans-unit id="ddf2045ef69c7a12fcf93ada7af9c40769a94785" translate="yes" xml:space="preserve">
          <source>Get your database running</source>
          <target state="translated">데이터베이스 실행</target>
        </trans-unit>
        <trans-unit id="3cd928230f05d523f41f71e6df4e087feb93a4dd" translate="yes" xml:space="preserve">
          <source>Gettext utilities</source>
          <target state="translated">Gettext 유틸리티</target>
        </trans-unit>
        <trans-unit id="16bf3406ad6ebe10ef028b5b1dc22df2a8c7a781" translate="yes" xml:space="preserve">
          <source>Getting a copy of Django&amp;rsquo;s development version</source>
          <target state="translated">Django의 개발 버전 사본 받기</target>
        </trans-unit>
        <trans-unit id="3752376ac856de4d9f6ea65db547f68c6031974e" translate="yes" xml:space="preserve">
          <source>Getting a list of FlatPage objects in your templates</source>
          <target state="translated">템플릿에서 FlatPage 객체 목록 가져 오기</target>
        </trans-unit>
        <trans-unit id="060f712c74598ce01e86d56802d9344d8ed68bb7" translate="yes" xml:space="preserve">
          <source>Getting help</source>
          <target state="translated">도움을 받다</target>
        </trans-unit>
        <trans-unit id="095e7a3db06b22c5a52190502caa36691be8935e" translate="yes" xml:space="preserve">
          <source>Getting runtime help</source>
          <target state="translated">런타임 도움말 얻기</target>
        </trans-unit>
        <trans-unit id="76e7a3a3f9c225fe820ba7e9cff10ea2a73b79a1" translate="yes" xml:space="preserve">
          <source>Getting started</source>
          <target state="translated">시작하기</target>
        </trans-unit>
        <trans-unit id="85846ce2a297da86bf6e7a51470a230994164cad" translate="yes" xml:space="preserve">
          <source>Getting the current domain for display</source>
          <target state="translated">표시 할 현재 도메인 얻기</target>
        </trans-unit>
        <trans-unit id="d5783cf876d18d2878f81129550d5945ce0679bf" translate="yes" xml:space="preserve">
          <source>Getting the current domain for full URLs</source>
          <target state="translated">전체 URL에 대한 현재 도메인 가져 오기</target>
        </trans-unit>
        <trans-unit id="03fb97db904d87ad00dad0da6fa0440ea4978bb4" translate="yes" xml:space="preserve">
          <source>Getting the current storage class</source>
          <target state="translated">현재 스토리지 클래스 얻기</target>
        </trans-unit>
        <trans-unit id="5442e2b64fa09764b9f593867e59a97292c84059" translate="yes" xml:space="preserve">
          <source>GitHub</source>
          <target state="translated">GitHub</target>
        </trans-unit>
        <trans-unit id="a379f1c31915bf948dceb7774f0d0b06315610cf" translate="yes" xml:space="preserve">
          <source>Give &lt;a href=&quot;../ref/paginator#django.core.paginator.Paginator&quot;&gt;&lt;code&gt;Paginator&lt;/code&gt;&lt;/a&gt; a list of objects, plus the number of items you&amp;rsquo;d like to have on each page, and it gives you methods for accessing the items for each page:</source>
          <target state="translated">부여 &lt;a href=&quot;../ref/paginator#django.core.paginator.Paginator&quot;&gt; &lt;code&gt;Paginator&lt;/code&gt; &lt;/a&gt; 개체의 목록, 플러스 당신이 각 페이지에 가지고 싶은 아이템의 수를, 그리고 당신에게 각 페이지에 대한 항목을 액세스하기위한 방법을 제공합니다 :</target>
        </trans-unit>
        <trans-unit id="2d98907f33fa5c7e1fd2266881356efab899491c" translate="yes" xml:space="preserve">
          <source>Give Django your database parameters</source>
          <target state="translated">Django에 데이터베이스 매개 변수 제공</target>
        </trans-unit>
        <trans-unit id="6681947b2c88d7800dc6eec380b6e38b3d17b132" translate="yes" xml:space="preserve">
          <source>Give your model a &lt;a href=&quot;#django.contrib.contenttypes.fields.GenericForeignKey&quot;&gt;&lt;code&gt;GenericForeignKey&lt;/code&gt;&lt;/a&gt;, and pass it the names of the two fields described above. If these fields are named &amp;ldquo;content_type&amp;rdquo; and &amp;ldquo;object_id&amp;rdquo;, you can omit this &amp;ndash; those are the default field names &lt;a href=&quot;#django.contrib.contenttypes.fields.GenericForeignKey&quot;&gt;&lt;code&gt;GenericForeignKey&lt;/code&gt;&lt;/a&gt; will look for.</source>
          <target state="translated">모델에 &lt;a href=&quot;#django.contrib.contenttypes.fields.GenericForeignKey&quot;&gt; &lt;code&gt;GenericForeignKey&lt;/code&gt; 를&lt;/a&gt; 제공 하고 위에서 설명한 두 필드의 이름을 전달하십시오. 이러한 필드의 이름이 &quot;content_type&quot;및 &quot;object_id&quot;인 경우이를 생략 할 수 있습니다.이 필드 는 &lt;a href=&quot;#django.contrib.contenttypes.fields.GenericForeignKey&quot;&gt; &lt;code&gt;GenericForeignKey&lt;/code&gt; &lt;/a&gt; 가 찾는 기본 필드 이름 입니다.</target>
        </trans-unit>
        <trans-unit id="942bc2871d4842b9f270c2479b3dd36378a861ad" translate="yes" xml:space="preserve">
          <source>Give your model a &lt;a href=&quot;../models/fields#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;ForeignKey&lt;/code&gt;&lt;/a&gt; to &lt;a href=&quot;#django.contrib.contenttypes.models.ContentType&quot;&gt;&lt;code&gt;ContentType&lt;/code&gt;&lt;/a&gt;. The usual name for this field is &amp;ldquo;content_type&amp;rdquo;.</source>
          <target state="translated">모델에게 부여 &lt;a href=&quot;../models/fields#django.db.models.ForeignKey&quot;&gt; &lt;code&gt;ForeignKey&lt;/code&gt; &lt;/a&gt; 에 &lt;a href=&quot;#django.contrib.contenttypes.models.ContentType&quot;&gt; &lt;code&gt;ContentType&lt;/code&gt; &lt;/a&gt; . 이 필드의 일반적인 이름은&amp;ldquo;content_type&amp;rdquo;입니다.</target>
        </trans-unit>
        <trans-unit id="68438852373dfcf41a28180c2297d1cc31651229" translate="yes" xml:space="preserve">
          <source>Give your model a field that can store primary key values from the models you&amp;rsquo;ll be relating to. For most models, this means a &lt;a href=&quot;../models/fields#django.db.models.PositiveIntegerField&quot;&gt;&lt;code&gt;PositiveIntegerField&lt;/code&gt;&lt;/a&gt;. The usual name for this field is &amp;ldquo;object_id&amp;rdquo;.</source>
          <target state="translated">관련 모델에서 기본 키 값을 저장할 수있는 필드를 모델에 제공하십시오. 대부분의 모델에서 이는 &lt;a href=&quot;../models/fields#django.db.models.PositiveIntegerField&quot;&gt; &lt;code&gt;PositiveIntegerField&lt;/code&gt; 를&lt;/a&gt; 의미합니다 . 이 필드의 일반적인 이름은&amp;ldquo;object_id&amp;rdquo;입니다.</target>
        </trans-unit>
        <trans-unit id="d83ce53d6e4a13ff9f676afe3335baa6383a5f2e" translate="yes" xml:space="preserve">
          <source>Give your model metadata by using an inner &lt;code&gt;class Meta&lt;/code&gt;, like so:</source>
          <target state="translated">내부 &lt;code&gt;class Meta&lt;/code&gt; 를 사용하여 모델 메타 데이터를 제공하십시오 .</target>
        </trans-unit>
        <trans-unit id="ec0d34e7da73bbe49b892f918897ee31576ecbf5" translate="yes" xml:space="preserve">
          <source>Given &lt;code&gt;data&lt;/code&gt; and &lt;code&gt;files&lt;/code&gt; dictionaries and this widget&amp;rsquo;s name, returns whether or not there&amp;rsquo;s data or files for the widget.</source>
          <target state="translated">주어진 &lt;code&gt;data&lt;/code&gt; 및 &lt;code&gt;files&lt;/code&gt; 사전 및이 위젯의 ​​이름은 위젯에 대한 데이터 또는 파일이 있는지 여부를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="0c2297fdd50dfa2cb53228dc47c397f2594f114b" translate="yes" xml:space="preserve">
          <source>Given a &lt;code&gt;Blog&lt;/code&gt; instance &lt;code&gt;b5&lt;/code&gt; that has already been saved to the database, this example changes its name and updates its record in the database:</source>
          <target state="translated">데이터베이스에 이미 저장된 &lt;code&gt;Blog&lt;/code&gt; 인스턴스 &lt;code&gt;b5&lt;/code&gt; 가 주어지면 이 예제는 이름을 변경하고 데이터베이스에서 레코드를 업데이트합니다.</target>
        </trans-unit>
        <trans-unit id="7517c0cbad9c754ae327298f888dae38e0a51a05" translate="yes" xml:space="preserve">
          <source>Given a contact form:</source>
          <target state="translated">연락 양식이 주어지면 :</target>
        </trans-unit>
        <trans-unit id="8b44975103a4bb30c311396e36118463fdf07d71" translate="yes" xml:space="preserve">
          <source>Given a dictionary of data and this widget&amp;rsquo;s name, returns the value of this widget. &lt;code&gt;files&lt;/code&gt; may contain data coming from &lt;a href=&quot;../request-response#django.http.HttpRequest.FILES&quot;&gt;&lt;code&gt;request.FILES&lt;/code&gt;&lt;/a&gt;. Returns &lt;code&gt;None&lt;/code&gt; if a value wasn&amp;rsquo;t provided. Note also that &lt;code&gt;value_from_datadict&lt;/code&gt; may be called more than once during handling of form data, so if you customize it and add expensive processing, you should implement some caching mechanism yourself.</source>
          <target state="translated">데이터 사전과이 위젯 이름이 주어지면이 위젯의 ​​값을 리턴합니다. &lt;code&gt;files&lt;/code&gt; 은 &lt;a href=&quot;../request-response#django.http.HttpRequest.FILES&quot;&gt; &lt;code&gt;request.FILES&lt;/code&gt; &lt;/a&gt; 에서 오는 데이터를 포함 할 수 있습니다 . 값을 제공하지 않으면 &lt;code&gt;None&lt;/code&gt; 을 반환합니다 . 또한 주 &lt;code&gt;value_from_datadict&lt;/code&gt; 는 당신이 그것을 사용자 정의하고 비용 처리를 추가하는 경우 그래서, 당신은 몇 가지 캐싱 메커니즘을 직접 구현해야합니다, 폼 데이터를 처리하는 동안 한 번 이상 호출 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="119e6f39993a5ece4c0066d470355c216ce3f6c9" translate="yes" xml:space="preserve">
          <source>Given a distance (float), returns the point (or closest point) within the geometry (&lt;a href=&quot;#django.contrib.gis.geos.LineString&quot;&gt;&lt;code&gt;LineString&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#django.contrib.gis.geos.MultiLineString&quot;&gt;&lt;code&gt;MultiLineString&lt;/code&gt;&lt;/a&gt;) at that distance. The normalized version takes the distance as a float between 0 (origin) and 1 (endpoint).</source>
          <target state="translated">거리 (부동)가 주어진 경우 해당 거리의 형상 ( &lt;a href=&quot;#django.contrib.gis.geos.LineString&quot;&gt; &lt;code&gt;LineString&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;#django.contrib.gis.geos.MultiLineString&quot;&gt; &lt;code&gt;MultiLineString&lt;/code&gt; &lt;/a&gt; ) 내에서 점 (또는 가장 가까운 점)을 반환합니다 . 정규화 된 버전은 거리를 0 (원점)과 1 (종점) 사이의 부동 소수점으로 취합니다.</target>
        </trans-unit>
        <trans-unit id="a0116de099366db2ec64edadc7d21c2a59efd76d" translate="yes" xml:space="preserve">
          <source>Given a form field&amp;rsquo;s &lt;code&gt;initial&lt;/code&gt; value, returns whether or not the widget can be rendered with the &lt;code&gt;required&lt;/code&gt; HTML attribute. Forms use this method along with &lt;a href=&quot;fields#django.forms.Field.required&quot;&gt;&lt;code&gt;Field.required&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;api#django.forms.Form.use_required_attribute&quot;&gt;&lt;code&gt;Form.use_required_attribute&lt;/code&gt;&lt;/a&gt; to determine whether or not to display the &lt;code&gt;required&lt;/code&gt; attribute for each field.</source>
          <target state="translated">양식 필드의 &lt;code&gt;initial&lt;/code&gt; 값이 주어지면 위젯을 &lt;code&gt;required&lt;/code&gt; HTML 속성 으로 렌더링 할 수 있는지 여부를 리턴합니다 . 폼은이 메소드를 &lt;a href=&quot;fields#django.forms.Field.required&quot;&gt; &lt;code&gt;Field.required&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;api#django.forms.Form.use_required_attribute&quot;&gt; &lt;code&gt;Form.use_required_attribute&lt;/code&gt; &lt;/a&gt; 와 함께 사용 하여 각 필드에 &lt;code&gt;required&lt;/code&gt; 속성 을 표시할지 여부를 결정합니다 .</target>
        </trans-unit>
        <trans-unit id="25ce09b71e61c136d2d9c17228b7872efdce4f9e" translate="yes" xml:space="preserve">
          <source>Given a middleware class, returns a view decorator. This lets you use middleware functionality on a per-view basis. The middleware is created with no params passed.</source>
          <target state="translated">미들웨어 클래스가 주어지면 뷰 데코레이터를 리턴합니다. 이를 통해 뷰별로 미들웨어 기능을 사용할 수 있습니다. 매개 변수가 전달되지 않은 미들웨어가 작성됩니다.</target>
        </trans-unit>
        <trans-unit id="365439c148a642d6a442b1b041f1b802323a613e" translate="yes" xml:space="preserve">
          <source>Given a model instance, the display value for a field with &lt;code&gt;choices&lt;/code&gt; can be accessed using the &lt;a href=&quot;../../ref/models/instances#django.db.models.Model.get_FOO_display&quot;&gt;&lt;code&gt;get_FOO_display()&lt;/code&gt;&lt;/a&gt; method. For example:</source>
          <target state="translated">모델 인스턴스가 주어지면 &lt;a href=&quot;../../ref/models/instances#django.db.models.Model.get_FOO_display&quot;&gt; &lt;code&gt;get_FOO_display()&lt;/code&gt; &lt;/a&gt; 메소드를 사용하여 &lt;code&gt;choices&lt;/code&gt; 있는 필드의 표시 값에 액세스 할 수 있습니다 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="1b1e3dc1152220b4ff60c94af1d5193dc75aa0d2" translate="yes" xml:space="preserve">
          <source>Given a whole number, returns the requested digit, where 1 is the right-most digit, 2 is the second-right-most digit, etc. Returns the original value for invalid input (if input or argument is not an integer, or if argument is less than 1). Otherwise, output is always an integer.</source>
          <target state="translated">정수가 주어지면 요청 된 숫자를 반환합니다. 여기서 1은 가장 오른쪽 숫자이고 2는 가장 오른쪽 두 번째 숫자입니다. 잘못된 입력에 대한 원래 값을 반환합니다 (입력 또는 인수가 정수가 아닌 경우 또는 인수가 1보다 작습니다. 그렇지 않으면 출력은 항상 정수입니다.</target>
        </trans-unit>
        <trans-unit id="3a24cd0b9164167b8eb5ad888792e3a7b90dd361" translate="yes" xml:space="preserve">
          <source>Given format can be the predefined one &lt;a href=&quot;../settings#std:setting-TIME_FORMAT&quot;&gt;&lt;code&gt;TIME_FORMAT&lt;/code&gt;&lt;/a&gt;, or a custom format, same as the &lt;a href=&quot;#std:templatefilter-date&quot;&gt;&lt;code&gt;date&lt;/code&gt;&lt;/a&gt; filter. Note that the predefined format is locale-dependent.</source>
          <target state="translated">주어진 형식은 사전 정의 된 &lt;a href=&quot;../settings#std:setting-TIME_FORMAT&quot;&gt; &lt;code&gt;TIME_FORMAT&lt;/code&gt; &lt;/a&gt; 형식이거나 &lt;a href=&quot;#std:templatefilter-date&quot;&gt; &lt;code&gt;date&lt;/code&gt; &lt;/a&gt; 필터 와 동일한 사용자 정의 형식 일 수 있습니다. 사전 정의 된 형식은 로케일에 따라 다릅니다.</target>
        </trans-unit>
        <trans-unit id="5ba0b76f9d8c9781c32b85d824833b69cc244a80" translate="yes" xml:space="preserve">
          <source>Given the above &lt;code&gt;'Cheddar Talk'&lt;/code&gt; blog example, this example would override the previous record in the database:</source>
          <target state="translated">위의 &lt;code&gt;'Cheddar Talk'&lt;/code&gt; 블로그 예제에서이 예제는 데이터베이스의 이전 레코드를 대체합니다.</target>
        </trans-unit>
        <trans-unit id="d37c78d85d3a7273f3922e688e66c694ac20f4ef" translate="yes" xml:space="preserve">
          <source>Given the above template error, &lt;code&gt;template_debug&lt;/code&gt; would look like:</source>
          <target state="translated">위의 템플릿 오류가 발생하면 &lt;code&gt;template_debug&lt;/code&gt; 는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="3714bdc37d70180c2c462d1df29b61921d28b425" translate="yes" xml:space="preserve">
          <source>Given the datetime &lt;code&gt;2015-06-15 14:30:50.000321+00:00&lt;/code&gt;, the built-in &lt;code&gt;kind&lt;/code&gt;s return:</source>
          <target state="translated">날짜 시간 &lt;code&gt;2015-06-15 14:30:50.000321+00:00&lt;/code&gt; 이면 기본 제공 &lt;code&gt;kind&lt;/code&gt; 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="9a29688721ee0be91dd38356c46ff2c8ad421e5f" translate="yes" xml:space="preserve">
          <source>Given the datetime &lt;code&gt;2015-06-15 23:30:01.000321+00:00&lt;/code&gt;, the built-in &lt;code&gt;lookup_name&lt;/code&gt;s return:</source>
          <target state="translated">datetime &lt;code&gt;2015-06-15 23:30:01.000321+00:00&lt;/code&gt; 이면 내장 &lt;code&gt;lookup_name&lt;/code&gt; 은 다음을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="88b00b26884e185bb263dd1c872db086f631c7b3" translate="yes" xml:space="preserve">
          <source>Given this standard interface, an &lt;code&gt;HttpRequest&lt;/code&gt; instance can be passed directly to an XML parser such as &lt;a href=&quot;https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.ElementTree&quot;&gt;&lt;code&gt;ElementTree&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">이 표준 인터페이스가 주어지면 &lt;code&gt;HttpRequest&lt;/code&gt; 인스턴스는 &lt;a href=&quot;https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.ElementTree&quot;&gt; &lt;code&gt;ElementTree&lt;/code&gt; &lt;/a&gt; 와 같은 XML 파서로 직접 전달 될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="4975cd64a92e88880758085eef7772db2bdb4f4d" translate="yes" xml:space="preserve">
          <source>Given:</source>
          <target state="translated">Given:</target>
        </trans-unit>
        <trans-unit id="9d05ac7a7d5e5cd76d141b9fe988215dfd520a74" translate="yes" xml:space="preserve">
          <source>Globalization (&lt;code&gt;i18n&lt;/code&gt;/&lt;code&gt;l10n&lt;/code&gt;)</source>
          <target state="translated">세계화 ( &lt;code&gt;i18n&lt;/code&gt; / &lt;code&gt;l10n&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="ba172508be68719fa9795c5f2138b1035ec574a1" translate="yes" xml:space="preserve">
          <source>Go ahead and install the previously cloned copy of Django:</source>
          <target state="translated">이전에 복제 된 Django 사본을 설치하십시오.</target>
        </trans-unit>
        <trans-unit id="739cebceefdb523d7e9f5a9b6a934e37e2d1de98" translate="yes" xml:space="preserve">
          <source>Go to &lt;a href=&quot;http://localhost:8000/polls/&quot;&gt;http://localhost:8000/polls/&lt;/a&gt; in your browser, and you should see the text &amp;ldquo;&lt;em&gt;Hello, world. You&amp;rsquo;re at the polls index.&lt;/em&gt;&amp;rdquo;, which you defined in the &lt;code&gt;index&lt;/code&gt; view.</source>
          <target state="translated">이동 &lt;a href=&quot;http://localhost:8000/polls/&quot;&gt;에 http : // localhost를 : 8000 / 여론 조사 /&lt;/a&gt; 브라우저와 텍스트를 볼 수 &quot; &lt;em&gt;안녕하세요, 세계. 당신은 여론 조사 색인에 있습니다. &lt;/em&gt;&amp;rdquo;, &lt;code&gt;index&lt;/code&gt; 보기 에서 정의했습니다 .</target>
        </trans-unit>
        <trans-unit id="e865850e7567ce4f66ee6883bb54c84fff0e9193" translate="yes" xml:space="preserve">
          <source>Gold Coast foot</source>
          <target state="translated">골드 코스트 발</target>
        </trans-unit>
        <trans-unit id="f179b6f36465b5aac2f67605586252775def9c70" translate="yes" xml:space="preserve">
          <source>Good:</source>
          <target state="translated">Good:</target>
        </trans-unit>
        <trans-unit id="77903aaddab038102d4549b08d4a2e68bdafb921" translate="yes" xml:space="preserve">
          <source>Good: &lt;code&gt;'/foo/bar/'&lt;/code&gt;</source>
          <target state="translated">좋음 : &lt;code&gt;'/foo/bar/'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="84cc7d32930e72c5b9fc5a877106db98126eb15c" translate="yes" xml:space="preserve">
          <source>Google PageSpeed</source>
          <target state="translated">Google PageSpeed</target>
        </trans-unit>
        <trans-unit id="e391eebe3da38bf188122fbc620ac8276e058db8" translate="yes" xml:space="preserve">
          <source>Greater than or equal to.</source>
          <target state="translated">크거나 같습니다.</target>
        </trans-unit>
        <trans-unit id="1a0cf2334e157e041cd80ecac674aacbdace7685" translate="yes" xml:space="preserve">
          <source>Greater than or equal to. Example:</source>
          <target state="translated">크거나 같습니다. 예:</target>
        </trans-unit>
        <trans-unit id="0bb5b098cc8f14ae1d23ed0bdc731dd64c4176ef" translate="yes" xml:space="preserve">
          <source>Greater than.</source>
          <target state="translated">보다 큰.</target>
        </trans-unit>
        <trans-unit id="d65a7235faec5e7686d204089dc0b355a23e4154" translate="yes" xml:space="preserve">
          <source>Greater than. Example:</source>
          <target state="translated">보다 큰. 예:</target>
        </trans-unit>
        <trans-unit id="4858407f7012787457799245e5f0bd3b83a5adc2" translate="yes" xml:space="preserve">
          <source>Grouping on other properties</source>
          <target state="translated">다른 속성으로 그룹화</target>
        </trans-unit>
        <trans-unit id="ae9629f4ebb82c6331c0809fa9a0e54b00e578e6" translate="yes" xml:space="preserve">
          <source>Groups</source>
          <target state="translated">Groups</target>
        </trans-unit>
        <trans-unit id="7dd43e46b89810a494974c2ea0f7a7775e008522" translate="yes" xml:space="preserve">
          <source>Groups: A generic way of applying labels and permissions to more than one user.</source>
          <target state="translated">그룹 : 둘 이상의 사용자에게 레이블 및 권한을 적용하는 일반적인 방법입니다.</target>
        </trans-unit>
        <trans-unit id="929a28d261428029e61c0f81c6161fd71ba0b2fe" translate="yes" xml:space="preserve">
          <source>Guides</source>
          <target state="translated">Guides</target>
        </trans-unit>
        <trans-unit id="f88767387128fd81f27474f40a7e375537269897" translate="yes" xml:space="preserve">
          <source>Guides: How-tos</source>
          <target state="translated">가이드 : 사용법</target>
        </trans-unit>
        <trans-unit id="70cd7eb95746087d1d1f0e4c0e095606fcd9f55b" translate="yes" xml:space="preserve">
          <source>Guides: Intro</source>
          <target state="translated">가이드 : 소개</target>
        </trans-unit>
        <trans-unit id="550b6c2e449f5e1e62c195eae6c4b6fca172b664" translate="yes" xml:space="preserve">
          <source>HEX / HEXEWKB</source>
          <target state="translated">HEX / HEXEWKB</target>
        </trans-unit>
        <trans-unit id="c2f470b5eb2e1406be38abd6762532b112bbb2fd" translate="yes" xml:space="preserve">
          <source>HSTS is an HTTP header that informs a browser that all future connections to a particular site should always use HTTPS. Combined with redirecting requests over HTTP to HTTPS, this will ensure that connections always enjoy the added security of SSL provided one successful connection has occurred. HSTS may either be configured with &lt;a href=&quot;../ref/settings#std:setting-SECURE_HSTS_SECONDS&quot;&gt;&lt;code&gt;SECURE_HSTS_SECONDS&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../ref/settings#std:setting-SECURE_HSTS_INCLUDE_SUBDOMAINS&quot;&gt;&lt;code&gt;SECURE_HSTS_INCLUDE_SUBDOMAINS&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;../ref/settings#std:setting-SECURE_HSTS_PRELOAD&quot;&gt;&lt;code&gt;SECURE_HSTS_PRELOAD&lt;/code&gt;&lt;/a&gt;, or on the Web server.</source>
          <target state="translated">HSTS는 특정 사이트에 대한 모든 향후 연결에서 항상 HTTPS를 사용해야한다는 것을 브라우저에 알리는 HTTP 헤더입니다. HTTP를 통한 요청을 HTTPS로 리디렉션하는 것과 결합하면 하나의 연결이 성공한 경우 항상 SSL의 추가 보안을 누릴 수 있습니다. HSTS는 &lt;a href=&quot;../ref/settings#std:setting-SECURE_HSTS_SECONDS&quot;&gt; &lt;code&gt;SECURE_HSTS_SECONDS&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../ref/settings#std:setting-SECURE_HSTS_INCLUDE_SUBDOMAINS&quot;&gt; &lt;code&gt;SECURE_HSTS_INCLUDE_SUBDOMAINS&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../ref/settings#std:setting-SECURE_HSTS_PRELOAD&quot;&gt; &lt;code&gt;SECURE_HSTS_PRELOAD&lt;/code&gt; &lt;/a&gt; 로 구성되거나 웹 서버에서 구성 될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a307b98224835cb2929f0a670d5d37725809e298" translate="yes" xml:space="preserve">
          <source>HTML &lt;code&gt;id&lt;/code&gt; attributes on the form elements.</source>
          <target state="translated">양식 요소의 HTML &lt;code&gt;id&lt;/code&gt; 속성</target>
        </trans-unit>
        <trans-unit id="7803fb9ad97a390e5a19c56907c38525501a3225" translate="yes" xml:space="preserve">
          <source>HTML form submission is a tricky area. There&amp;rsquo;s no guarantee that the submission will include encoding information, which means the framework might have to guess at the encoding of submitted data.</source>
          <target state="translated">HTML 양식 제출은 까다로운 영역입니다. 제출에 인코딩 정보가 포함된다는 보장은 없습니다. 이는 프레임 워크가 제출 된 데이터의 인코딩을 추측해야 할 수도 있음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="b06b171ed438d64895564aa6fdbd928c4e3f83e8" translate="yes" xml:space="preserve">
          <source>HTML forms</source>
          <target state="translated">HTML 양식</target>
        </trans-unit>
        <trans-unit id="b98947084aa9e08a220c89b11ad0490ed9829cdd" translate="yes" xml:space="preserve">
          <source>HTML5 input types and browser validation</source>
          <target state="translated">HTML5 입력 유형 및 브라우저 유효성 검사</target>
        </trans-unit>
        <trans-unit id="f40b27d6b8b9a4fc3827264c1da16a04ecf4d094" translate="yes" xml:space="preserve">
          <source>HTTP</source>
          <target state="translated">HTTP</target>
        </trans-unit>
        <trans-unit id="dc5818160f0a79f1d8b7b37801c4d5d5f5e71152" translate="yes" xml:space="preserve">
          <source>HTTP Strict Transport Security</source>
          <target state="translated">HTTP 엄격한 전송 보안</target>
        </trans-unit>
        <trans-unit id="01fc6d102bf6376f0642cb6ab27bbd9ce1c99daf" translate="yes" xml:space="preserve">
          <source>HTTP clients can send a number of headers to tell the server about copies of a resource that they have already seen. This is commonly used when retrieving a Web page (using an HTTP &lt;code&gt;GET&lt;/code&gt; request) to avoid sending all the data for something the client has already retrieved. However, the same headers can be used for all HTTP methods (&lt;code&gt;POST&lt;/code&gt;, &lt;code&gt;PUT&lt;/code&gt;, &lt;code&gt;DELETE&lt;/code&gt;, etc.).</source>
          <target state="translated">HTTP 클라이언트는 많은 헤더를 전송하여 서버가 이미 본 리소스의 사본에 대해 알릴 수 있습니다. 이것은 클라이언트가 이미 검색 한 것에 대한 모든 데이터를 전송하지 않기 위해 HTTP &lt;code&gt;GET&lt;/code&gt; 요청을 사용하여 웹 페이지를 검색 할 때 일반적으로 사용됩니다 . 그러나 모든 HTTP 메소드 ( &lt;code&gt;POST&lt;/code&gt; , &lt;code&gt;PUT&lt;/code&gt; , &lt;code&gt;DELETE&lt;/code&gt; 등)에 동일한 헤더를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="766e6a6a6850f67b45994afcaa0fd166411b93fb" translate="yes" xml:space="preserve">
          <source>HTTP header fields cannot contain newlines. An attempt to set a header field containing a newline character (CR or LF) will raise &lt;code&gt;BadHeaderError&lt;/code&gt;</source>
          <target state="translated">HTTP 헤더 필드는 개행을 포함 할 수 없습니다. 개행 문자 (CR 또는 LF)를 포함하는 헤더 필드를 설정하려고하면 &lt;code&gt;BadHeaderError&lt;/code&gt; 가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="3a7d6d24789915f29d0b4286e7264bdfafeb3eb9" translate="yes" xml:space="preserve">
          <source>HTTP performance</source>
          <target state="translated">HTTP 성능</target>
        </trans-unit>
        <trans-unit id="f52698c28f0d2036450e02a85451ee4f5be02442" translate="yes" xml:space="preserve">
          <source>HTTPS</source>
          <target state="translated">HTTPS</target>
        </trans-unit>
        <trans-unit id="775bc82c4bfbe164f204d0e6798621f0a7d5acfa" translate="yes" xml:space="preserve">
          <source>Handily, the &lt;code&gt;ListView&lt;/code&gt; has a &lt;a href=&quot;../../ref/class-based-views/mixins-multiple-object#django.views.generic.list.MultipleObjectMixin.get_queryset&quot;&gt;&lt;code&gt;get_queryset()&lt;/code&gt;&lt;/a&gt; method we can override. By default, it returns the value of the &lt;code&gt;queryset&lt;/code&gt; attribute, but we can use it to add more logic.</source>
          <target state="translated">간단히, &lt;code&gt;ListView&lt;/code&gt; 에는 재정의 할 수 있는 &lt;a href=&quot;../../ref/class-based-views/mixins-multiple-object#django.views.generic.list.MultipleObjectMixin.get_queryset&quot;&gt; &lt;code&gt;get_queryset()&lt;/code&gt; &lt;/a&gt; 메서드가 있습니다. 기본적으로 &lt;code&gt;queryset&lt;/code&gt; 속성 의 값을 반환 하지만 더 많은 로직을 추가하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="362f233bfd36bbe9ffba21ece507104cececa24e" translate="yes" xml:space="preserve">
          <source>Handlers</source>
          <target state="translated">Handlers</target>
        </trans-unit>
        <trans-unit id="05ba8572a9a6792e3475e4e0412dc1a107795a7e" translate="yes" xml:space="preserve">
          <source>Handlers of this signal must not perform database schema alterations as doing so may cause the &lt;a href=&quot;django-admin#django-admin-flush&quot;&gt;&lt;code&gt;flush&lt;/code&gt;&lt;/a&gt; command to fail if it runs during the &lt;a href=&quot;django-admin#django-admin-migrate&quot;&gt;&lt;code&gt;migrate&lt;/code&gt;&lt;/a&gt; command.</source>
          <target state="translated">이 신호의 핸들러는 데이터베이스 스키마 변경을 수행해서는 안되며 , &lt;a href=&quot;django-admin#django-admin-migrate&quot;&gt; &lt;code&gt;migrate&lt;/code&gt; &lt;/a&gt; 명령 중에 &lt;a href=&quot;django-admin#django-admin-flush&quot;&gt; &lt;code&gt;flush&lt;/code&gt; &lt;/a&gt; 명령이 실행될 경우 flush 명령이 실패 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="323e84376fdf3f635c78168388a0818a6dcc35a7" translate="yes" xml:space="preserve">
          <source>Handles conditional GET operations. If the response doesn&amp;rsquo;t have an &lt;code&gt;ETag&lt;/code&gt; header, the middleware adds one if needed. If the response has an &lt;code&gt;ETag&lt;/code&gt; or &lt;code&gt;Last-Modified&lt;/code&gt; header, and the request has &lt;code&gt;If-None-Match&lt;/code&gt; or &lt;code&gt;If-Modified-Since&lt;/code&gt;, the response is replaced by an &lt;a href=&quot;request-response#django.http.HttpResponseNotModified&quot;&gt;&lt;code&gt;HttpResponseNotModified&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">조건부 GET 작업을 처리합니다. 응답에 &lt;code&gt;ETag&lt;/code&gt; 헤더가 없으면 필요한 경우 미들웨어가 추가합니다. 응답에 &lt;code&gt;ETag&lt;/code&gt; 또는 &lt;code&gt;Last-Modified&lt;/code&gt; 헤더가 있고 요청에 &lt;code&gt;If-None-Match&lt;/code&gt; 또는 &lt;code&gt;If-Modified-Since&lt;/code&gt; 가 있으면 응답은 &lt;a href=&quot;request-response#django.http.HttpResponseNotModified&quot;&gt; &lt;code&gt;HttpResponseNotModified&lt;/code&gt; &lt;/a&gt; 로 대체됩니다 .</target>
        </trans-unit>
        <trans-unit id="0b9f50ab5ace4fb669d21d51fe819de6624952c7" translate="yes" xml:space="preserve">
          <source>Handles responding to requests for the OPTIONS HTTP verb. Returns a response with the &lt;code&gt;Allow&lt;/code&gt; header containing a list of the view&amp;rsquo;s allowed HTTP method names.</source>
          <target state="translated">OPTIONS HTTP 동사 요청에 대한 응답을 처리합니다. 보기의 허용 된 HTTP 메소드 이름 목록을 포함하는 &lt;code&gt;Allow&lt;/code&gt; 헤더가 있는 응답을 리턴 합니다.</target>
        </trans-unit>
        <trans-unit id="64e2085c860648c646aefde6c507cdb08da718af" translate="yes" xml:space="preserve">
          <source>Handling HTTP requests</source>
          <target state="translated">HTTP 요청 처리</target>
        </trans-unit>
        <trans-unit id="554f39c415dd6dfb6fd370063343bb301dbfb1c2" translate="yes" xml:space="preserve">
          <source>Handling an asterisk &lt;code&gt;'*'&lt;/code&gt; according to &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html#section-7.1.4&quot; id=&quot;index-1&quot;&gt;&lt;strong&gt;RFC 7231#section-7.1.4&lt;/strong&gt;&lt;/a&gt; was added.</source>
          <target state="translated">&lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html#section-7.1.4&quot; id=&quot;index-1&quot;&gt;&lt;strong&gt;RFC 7231 # section-7.1.4&lt;/strong&gt;&lt;/a&gt; 에 따라 별표 &lt;code&gt;'*'&lt;/code&gt; 처리 가 추가되었습니다.&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="45c281fdcfaa935eff5cdec670aec151d0248a56" translate="yes" xml:space="preserve">
          <source>Handling authorization in custom backends</source>
          <target state="translated">사용자 정의 백엔드에서 권한 처리</target>
        </trans-unit>
        <trans-unit id="3f40bbcec32f150b1bf8b1b36828c6bcec2184c9" translate="yes" xml:space="preserve">
          <source>Handling errors in actions</source>
          <target state="translated">동작 오류 처리</target>
        </trans-unit>
        <trans-unit id="7549e355ea2bfbfff3483014ede4f6852fd36ec7" translate="yes" xml:space="preserve">
          <source>Handling exceptions within PostgreSQL transactions</source>
          <target state="translated">PostgreSQL 트랜잭션 내 예외 처리</target>
        </trans-unit>
        <trans-unit id="f4a45a24846f6ece0779cd7a39f0d28a6c76f7d1" translate="yes" xml:space="preserve">
          <source>Handling forms is a complex business. Consider Django&amp;rsquo;s admin, where numerous items of data of several different types may need to be prepared for display in a form, rendered as HTML, edited using a convenient interface, returned to the server, validated and cleaned up, and then saved or passed on for further processing.</source>
          <target state="translated">양식 처리는 복잡한 사업입니다. Django의 관리자를 고려하십시오. 여러 가지 유형의 여러 데이터 항목을 양식으로 표시하고 HTML로 렌더링하고 편리한 인터페이스를 사용하여 편집하고 서버로 반환하고 유효성 검사 및 정리 한 다음 저장하거나 전달해야 할 수도 있습니다 추가 처리를 위해.</target>
        </trans-unit>
        <trans-unit id="3556e4954f0ecaba30959568393e81f7c9148616" translate="yes" xml:space="preserve">
          <source>Handling forms with class-based views</source>
          <target state="translated">클래스 기반보기로 양식 처리</target>
        </trans-unit>
        <trans-unit id="c1c6055ec082f25b7c66ca247f1cdb50238e6a11" translate="yes" xml:space="preserve">
          <source>Handling object permissions</source>
          <target state="translated">객체 권한 처리</target>
        </trans-unit>
        <trans-unit id="5ecb35af693985a1c2688a53f9e642c39666465a" translate="yes" xml:space="preserve">
          <source>Handling uploaded files with a model</source>
          <target state="translated">모델로 업로드 된 파일 처리</target>
        </trans-unit>
        <trans-unit id="997e11fdb14bb8cc6b524263af1ed4c4a87a9091" translate="yes" xml:space="preserve">
          <source>Has one optional argument:</source>
          <target state="translated">하나의 선택적 인수가 있습니다.</target>
        </trans-unit>
        <trans-unit id="3459f341331aa6f9d40b4d60725d7b3624f0c602" translate="yes" xml:space="preserve">
          <source>Has three optional arguments for validation:</source>
          <target state="translated">유효성 검사를위한 세 가지 선택적 인수가 있습니다.</target>
        </trans-unit>
        <trans-unit id="9e020aad4feb9970fc6c0f84fb8135cbe7c10dc0" translate="yes" xml:space="preserve">
          <source>Has two &lt;strong&gt;required&lt;/strong&gt; arguments:</source>
          <target state="translated">두 가지 &lt;strong&gt;필수&lt;/strong&gt; 인수가 있습니다.</target>
        </trans-unit>
        <trans-unit id="484c6880d03286f63a0d66e2e46613865e425dee" translate="yes" xml:space="preserve">
          <source>Has two optional arguments for validation, &lt;code&gt;max_length&lt;/code&gt; and &lt;code&gt;allow_empty_file&lt;/code&gt;. If provided, these ensure that the file name is at most the given length, and that validation will succeed even if the file content is empty.</source>
          <target state="translated">유효성 검사를위한 &lt;code&gt;max_length&lt;/code&gt; 및 &lt;code&gt;allow_empty_file&lt;/code&gt; 의 두 가지 선택적 인수가 있습니다. 제공된 경우 파일 이름이 지정된 길이 이하인지 확인하고 파일 내용이 비어 있어도 유효성 검사에 성공합니다.</target>
        </trans-unit>
        <trans-unit id="469a8ef52e3ab3e9a6514812244c507d7ec05ea2" translate="yes" xml:space="preserve">
          <source>Has two optional arguments for validation, &lt;code&gt;max_length&lt;/code&gt; and &lt;code&gt;min_length&lt;/code&gt;. If provided, these arguments ensure that the string is at most or at least the given length.</source>
          <target state="translated">유효성 검사를위한 &lt;code&gt;max_length&lt;/code&gt; 및 &lt;code&gt;min_length&lt;/code&gt; 의 두 가지 선택적 인수가 있습니다. 제공되는 경우 이러한 인수는 문자열이 주어진 길이 이상인지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="264a3599b3ad29f1d297113f7cd4afaced3b7737" translate="yes" xml:space="preserve">
          <source>Has two optional arguments:</source>
          <target state="translated">두 가지 선택적 인수가 있습니다.</target>
        </trans-unit>
        <trans-unit id="b41e2d6f603d2a71571bd9d692b4f8d60a8366a0" translate="yes" xml:space="preserve">
          <source>Hash indexes have been available in PostgreSQL for a long time, but they suffer from a number of data integrity issues in older versions.</source>
          <target state="translated">해시 인덱스는 PostgreSQL에서 오랫동안 사용할 수 있었지만 이전 버전에서는 많은 데이터 무결성 문제가 있습니다.</target>
        </trans-unit>
        <trans-unit id="91890d73e80c785369a7ea02ab0ddba7e19304b9" translate="yes" xml:space="preserve">
          <source>Having problems? Try &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/faq/admin/&quot;&gt;FAQ: The admin&lt;/a&gt;.</source>
          <target state="translated">문제가 있습니까? &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/faq/admin/&quot;&gt;FAQ를&lt;/a&gt; 보십시오 : 관리자 .</target>
        </trans-unit>
        <trans-unit id="45a4bc095d0bc733108374317fb5064e125a7b9b" translate="yes" xml:space="preserve">
          <source>Having trouble? We&amp;rsquo;d like to help!</source>
          <target state="translated">문제가있다? 도와 드리겠습니다!</target>
        </trans-unit>
        <trans-unit id="144948321283311d1f121d6131d01f3e1df2bbe3" translate="yes" xml:space="preserve">
          <source>Height and width of the widget map (default is 400x600).</source>
          <target state="translated">위젯 맵의 높이와 너비 (기본값은 400x600)</target>
        </trans-unit>
        <trans-unit id="8a44990599fcb9b9ef1bde7d5b2e841ad8fe50c8" translate="yes" xml:space="preserve">
          <source>Height of the image in pixels.</source>
          <target state="translated">이미지의 높이 (픽셀)입니다.</target>
        </trans-unit>
        <trans-unit id="b87edbcbb5930772761d79031cd848eb2d7af371" translate="yes" xml:space="preserve">
          <source>Height of the map, in pixels. Defaults to 400.</source>
          <target state="translated">지도의 높이 (픽셀)입니다. 기본값은 400입니다.</target>
        </trans-unit>
        <trans-unit id="3ee07283650a0cb4b44aa4947760d241c8e6f3cc" translate="yes" xml:space="preserve">
          <source>Helper function to return a URL pattern for serving files in debug mode:</source>
          <target state="translated">디버그 모드에서 파일을 제공하기위한 URL 패턴을 리턴하는 헬퍼 함수 :</target>
        </trans-unit>
        <trans-unit id="934835a36e88b263f02948e4dbd8c5dd04401bc0" translate="yes" xml:space="preserve">
          <source>Helper functions</source>
          <target state="translated">도우미 기능</target>
        </trans-unit>
        <trans-unit id="e7e0ee4596bdf912596870e61bb537af15f86d4b" translate="yes" xml:space="preserve">
          <source>Here are a couple of example settings:</source>
          <target state="translated">다음은 몇 가지 예제 설정입니다.</target>
        </trans-unit>
        <trans-unit id="af2aab3ca1b544361f8802696567f67d6d16451c" translate="yes" xml:space="preserve">
          <source>Here are a few examples of downstream caches:</source>
          <target state="translated">다운 스트림 캐시의 몇 가지 예는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="d6aaec63498fe45f8cd3ab0e87af9c76badc8226" translate="yes" xml:space="preserve">
          <source>Here are some common problems that you may encounter during initialization:</source>
          <target state="translated">초기화 중에 발생할 수있는 몇 가지 일반적인 문제는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="f64ce4c75eb407df6aa68084739c0f1f18021f47" translate="yes" xml:space="preserve">
          <source>Here are some examples of other actions that will result in the entire queryset being evaluated and therefore populate the cache:</source>
          <target state="translated">다음은 전체 쿼리 세트가 평가되어 캐시를 채우는 다른 작업의 예입니다.</target>
        </trans-unit>
        <trans-unit id="491ee7352f4f9f29ec839a5598c81d428a1ed6b8" translate="yes" xml:space="preserve">
          <source>Here are some hints about the ordering of various Django middleware classes:</source>
          <target state="translated">다음은 다양한 Django 미들웨어 클래스 순서에 대한 힌트입니다.</target>
        </trans-unit>
        <trans-unit id="ba2e175dd531846eba4a04e3c9181479ab418b86" translate="yes" xml:space="preserve">
          <source>Here are some other terms that will help us to handle a common language:</source>
          <target state="translated">다음은 공통 언어를 처리하는 데 도움이되는 다른 용어입니다.</target>
        </trans-unit>
        <trans-unit id="279b401428b4665e30ae96bd57aa0062346328af" translate="yes" xml:space="preserve">
          <source>Here are some things to consider to help make your upgrade process as smooth as possible.</source>
          <target state="translated">업그레이드 프로세스를 최대한 원활하게 진행할 수 있도록 고려해야 할 사항이 있습니다.</target>
        </trans-unit>
        <trans-unit id="3082dc8a1f8a09d52854dc7df60d7f8d0596f804" translate="yes" xml:space="preserve">
          <source>Here are some tips for working with inheritance:</source>
          <target state="translated">상속 작업을위한 몇 가지 팁은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="d2e5c296dccce718bbac6d5246520ffb4ddd0e8b" translate="yes" xml:space="preserve">
          <source>Here are some useful attributes of &lt;code&gt;UploadedFile&lt;/code&gt;:</source>
          <target state="translated">다음은 &lt;code&gt;UploadedFile&lt;/code&gt; 의 유용한 속성입니다 .</target>
        </trans-unit>
        <trans-unit id="1121c2c786c30e498bed91da9475a4eb43a435a7" translate="yes" xml:space="preserve">
          <source>Here is an example of an admin-compliant custom user app. This user model uses an email address as the username, and has a required date of birth; it provides no permission checking beyond an &lt;code&gt;admin&lt;/code&gt; flag on the user account. This model would be compatible with all the built-in auth forms and views, except for the user creation forms. This example illustrates how most of the components work together, but is not intended to be copied directly into projects for production use.</source>
          <target state="translated">다음은 관리자 호환 사용자 정의 사용자 앱의 예입니다. 이 사용자 모델은 이메일 주소를 사용자 이름으로 사용하며 필요한 생년월일이 있습니다. 사용자 계정 의 &lt;code&gt;admin&lt;/code&gt; 플래그 외에는 권한 검사를 제공하지 않습니다 . 이 모델은 사용자 작성 양식을 제외하고 모든 내장 인증 양식 및보기와 호환됩니다. 이 예는 대부분의 구성 요소가 함께 작동하는 방법을 보여 주지만 프로덕션 용도로 프로젝트에 직접 복사되지는 않습니다.</target>
        </trans-unit>
        <trans-unit id="faaf1f6ee70707befd7a6e1a47bdca0f7676f029" translate="yes" xml:space="preserve">
          <source>Here is an example of how to create a geometry object (assuming the &lt;code&gt;Zipcode&lt;/code&gt; model):</source>
          <target state="translated">다음은 지오메트리 객체를 생성하는 방법의 예입니다 ( &lt;code&gt;Zipcode&lt;/code&gt; 모델을 가정 ).</target>
        </trans-unit>
        <trans-unit id="680da33b32f3a235dc2ff1bf6ad9bc64c3b92144" translate="yes" xml:space="preserve">
          <source>Here is an example of how to create a raster object from a raster file &lt;code&gt;volcano.tif&lt;/code&gt; (assuming the &lt;code&gt;Elevation&lt;/code&gt; model):</source>
          <target state="translated">다음은 &lt;code&gt;volcano.tif&lt;/code&gt; 래스터 파일에서 래스터 객체를 만드는 방법의 예입니다 ( &lt;code&gt;Elevation&lt;/code&gt; 모델을 가정 ).</target>
        </trans-unit>
        <trans-unit id="271c67b646ba7ecbbb35f338144e45dcbe4ea62a" translate="yes" xml:space="preserve">
          <source>Here is an example of its usage:</source>
          <target state="translated">사용법의 예는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="3f850bd99c6b6acb8b69bd061bcf9ba1698401b7" translate="yes" xml:space="preserve">
          <source>Here is an example of the difference between the three:</source>
          <target state="translated">다음은 세 가지 차이점의 예입니다.</target>
        </trans-unit>
        <trans-unit id="45863e4b7b474b663617efdf3777d740bb33a54d" translate="yes" xml:space="preserve">
          <source>Here is an example showing how you might go about implementing a form that works for AJAX requests as well as &amp;lsquo;normal&amp;rsquo; form POSTs:</source>
          <target state="translated">다음은 '일반'양식 POST뿐만 아니라 AJAX 요청에 적합한 양식을 구현하는 방법을 보여주는 예입니다.</target>
        </trans-unit>
        <trans-unit id="67c3eea2bb5e1e5cc88e879e133f03209c76575f" translate="yes" xml:space="preserve">
          <source>Here is an example which subclasses from &lt;a href=&quot;tools#django.test.TestCase&quot;&gt;&lt;code&gt;django.test.TestCase&lt;/code&gt;&lt;/a&gt;, which is a subclass of &lt;a href=&quot;https://docs.python.org/3/library/unittest.html#unittest.TestCase&quot;&gt;&lt;code&gt;unittest.TestCase&lt;/code&gt;&lt;/a&gt; that runs each test inside a transaction to provide isolation:</source>
          <target state="translated">다음은 &lt;a href=&quot;tools#django.test.TestCase&quot;&gt; &lt;code&gt;django.test.TestCase&lt;/code&gt; &lt;/a&gt; 의 서브 클래스 인 &lt;a href=&quot;https://docs.python.org/3/library/unittest.html#unittest.TestCase&quot;&gt; &lt;code&gt;unittest.TestCase&lt;/code&gt; &lt;/a&gt; 의 서브 클래스 인 서브 클래스로 트랜잭션 내에서 각 테스트를 실행하여 격리를 제공 하는 예제입니다 .</target>
        </trans-unit>
        <trans-unit id="be68f2f69f34764a921ed1578865dea88e621f01" translate="yes" xml:space="preserve">
          <source>Here the relation pattern is comprised of at least one of the nine relation strings: &lt;code&gt;TOUCH&lt;/code&gt;, &lt;code&gt;OVERLAPBDYDISJOINT&lt;/code&gt;, &lt;code&gt;OVERLAPBDYINTERSECT&lt;/code&gt;, &lt;code&gt;EQUAL&lt;/code&gt;, &lt;code&gt;INSIDE&lt;/code&gt;, &lt;code&gt;COVEREDBY&lt;/code&gt;, &lt;code&gt;CONTAINS&lt;/code&gt;, &lt;code&gt;COVERS&lt;/code&gt;, &lt;code&gt;ON&lt;/code&gt;, and &lt;code&gt;ANYINTERACT&lt;/code&gt;. Multiple strings may be combined with the logical Boolean operator OR, for example, &lt;code&gt;'inside+touch'&lt;/code&gt;. &lt;a href=&quot;#fnsdorelate&quot; id=&quot;id5&quot;&gt;[2]&lt;/a&gt; The relation strings are case-insensitive.</source>
          <target state="translated">다음은 관계의 패턴은 적어도 아홉 개 관계 문자열 중 하나로 구성되는 &lt;code&gt;TOUCH&lt;/code&gt; , &lt;code&gt;OVERLAPBDYDISJOINT&lt;/code&gt; , &lt;code&gt;OVERLAPBDYINTERSECT&lt;/code&gt; , &lt;code&gt;EQUAL&lt;/code&gt; , &lt;code&gt;INSIDE&lt;/code&gt; , &lt;code&gt;COVEREDBY&lt;/code&gt; , &lt;code&gt;CONTAINS&lt;/code&gt; , &lt;code&gt;COVERS&lt;/code&gt; , &lt;code&gt;ON&lt;/code&gt; 및 &lt;code&gt;ANYINTERACT&lt;/code&gt; . 여러 문자열을 논리 부울 연산자 OR (예 : &lt;code&gt;'inside+touch'&lt;/code&gt; ) 과 결합 할 수 있습니다 . &lt;a href=&quot;#fnsdorelate&quot; id=&quot;id5&quot;&gt;[2]&lt;/a&gt; 관계 문자열은 대소 문자를 구분하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="cc9581120f126cad803e3aef1f13e74d034abada" translate="yes" xml:space="preserve">
          <source>Here we have created a &lt;a href=&quot;../topics/testing/tools#django.test.TestCase&quot;&gt;&lt;code&gt;django.test.TestCase&lt;/code&gt;&lt;/a&gt; subclass with a method that creates a &lt;code&gt;Question&lt;/code&gt; instance with a &lt;code&gt;pub_date&lt;/code&gt; in the future. We then check the output of &lt;code&gt;was_published_recently()&lt;/code&gt; - which &lt;em&gt;ought&lt;/em&gt; to be False.</source>
          <target state="translated">여기서는 미래에 &lt;code&gt;pub_date&lt;/code&gt; 로 &lt;code&gt;Question&lt;/code&gt; 인스턴스 를 만드는 메소드를 사용 하여 &lt;a href=&quot;../topics/testing/tools#django.test.TestCase&quot;&gt; &lt;code&gt;django.test.TestCase&lt;/code&gt; &lt;/a&gt; 서브 클래스를 작성했습니다 . 우리는 다음의 출력을 확인 &lt;code&gt;was_published_recently()&lt;/code&gt; - 어떤이 &lt;em&gt;한다고&lt;/em&gt; 거짓으로.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5f4789b90295bd5341c33ecad3b51a92734a1532" translate="yes" xml:space="preserve">
          <source>Here you&amp;rsquo;ll find short answers to &amp;ldquo;How do I&amp;hellip;.?&amp;rdquo; types of questions. These how-to guides don&amp;rsquo;t cover topics in depth &amp;ndash; you&amp;rsquo;ll find that material in the &lt;a href=&quot;../topics/index&quot;&gt;Using Django&lt;/a&gt; and the &lt;a href=&quot;../ref/index&quot;&gt;API Reference&lt;/a&gt;. However, these guides will help you quickly accomplish common tasks.</source>
          <target state="translated">여기에&amp;ldquo;어떻게&amp;hellip;.?&amp;rdquo;에 대한 간단한 답변이 있습니다. 질문 유형. 이 사용법 안내서는 주제에 대해 자세히 다루지 않습니다. &lt;a href=&quot;../topics/index&quot;&gt;Using Django&lt;/a&gt; 및 &lt;a href=&quot;../ref/index&quot;&gt;API Reference&lt;/a&gt; 에서 해당 자료를 찾을 수 있습니다. 그러나이 안내서는 일반적인 작업을 빠르게 수행하는 데 도움이됩니다.</target>
        </trans-unit>
        <trans-unit id="57abf4f6b26bfe37ae2b52796838f9dad7f76581" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s a &amp;ldquo;Hello World&amp;rdquo; example:</source>
          <target state="translated">다음은 &quot;Hello World&quot;예입니다.</target>
        </trans-unit>
        <trans-unit id="6af217d2ecf2c889005dc55adc483fc40bea37cf" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s a basic example of a validator, with one optional setting:</source>
          <target state="translated">다음은 하나의 선택적 설정이있는 유효성 검사기의 기본 예입니다.</target>
        </trans-unit>
        <trans-unit id="a7f2fb4ff05edbaaffa6c5b64c495c91809c5df5" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s a common way you might handle an uploaded file:</source>
          <target state="translated">업로드 된 파일을 처리 할 수있는 일반적인 방법은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="6089abc2bdc4617ff68adaabb9f38bec622baa70" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s a corrected rewrite:</source>
          <target state="translated">수정 된 재 작성은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="9a31abed80562773eced4639f5fa9797392c6b50" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s a full example &lt;code&gt;Form&lt;/code&gt; that implements &lt;code&gt;help_text&lt;/code&gt; for two of its fields. We&amp;rsquo;ve specified &lt;code&gt;auto_id=False&lt;/code&gt; to simplify the output:</source>
          <target state="translated">다음 은 두 필드에 대해 &lt;code&gt;help_text&lt;/code&gt; 를 구현 하는 전체 예제 &lt;code&gt;Form&lt;/code&gt; 입니다 . 출력을 단순화하기 위해 &lt;code&gt;auto_id=False&lt;/code&gt; 를 지정 했습니다 .</target>
        </trans-unit>
        <trans-unit id="7f272870b019ad9bddc4996166ecbc9a519ba9f2" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s a full example &lt;code&gt;Form&lt;/code&gt; that implements &lt;code&gt;label&lt;/code&gt; for two of its fields. We&amp;rsquo;ve specified &lt;code&gt;auto_id=False&lt;/code&gt; to simplify the output:</source>
          <target state="translated">다음 은 두 필드에 대한 &lt;code&gt;label&lt;/code&gt; 을 구현 하는 전체 예제 &lt;code&gt;Form&lt;/code&gt; 입니다 . 출력을 단순화하기 위해 &lt;code&gt;auto_id=False&lt;/code&gt; 를 지정 했습니다 .</target>
        </trans-unit>
        <trans-unit id="f50392c6b32afa62059d8c67b2c6c9d277cae558" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s a full example model:</source>
          <target state="translated">전체 예제 모델은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="781008e5531c092c2f7f0d7b934ff37d338b4e30" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s a full example:</source>
          <target state="translated">전체 예는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="06006db081b927a18b6c979513a3d400cf03b050" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s a list of all possible &lt;code&gt;Media&lt;/code&gt; options. There are no required options.</source>
          <target state="translated">다음은 가능한 모든 &lt;code&gt;Media&lt;/code&gt; 옵션 목록입니다 . 필요한 옵션이 없습니다.</target>
        </trans-unit>
        <trans-unit id="1ca8264392471fa610baec4797392c75fff75e91" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s a list of settings available in Django core and their default values. Settings provided by contrib apps are listed below, followed by a topical index of the core settings. For introductory material, see the &lt;a href=&quot;../topics/settings&quot;&gt;settings topic guide&lt;/a&gt;.</source>
          <target state="translated">Django core에서 사용 가능한 설정 목록과 기본값은 다음과 같습니다. contrib 앱에서 제공 한 설정은 다음과 같으며 핵심 설정의 주제별 색인이 이어집니다. 소개 자료는 &lt;a href=&quot;../topics/settings&quot;&gt;설정 주제 안내서를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="86a3a0b1484511f938867feb013e0f2d51c5df2e" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s a more complete example of checking permissions in a template:</source>
          <target state="translated">템플릿에서 권한을 확인하는보다 완전한 예는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="2c698643dc874b748f012ddb3ea0313bfbfd2803" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s a sample &lt;code&gt;flatpages/default.html&lt;/code&gt; template:</source>
          <target state="translated">다음은 샘플 &lt;code&gt;flatpages/default.html&lt;/code&gt; 템플릿입니다.</target>
        </trans-unit>
        <trans-unit id="ab1a707518b8dd479d3d6838c5928f7148dd6367" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s a sample &lt;code&gt;registration/login.html&lt;/code&gt; template you can use as a starting point. It assumes you have a &lt;code&gt;base.html&lt;/code&gt; template that defines a &lt;code&gt;content&lt;/code&gt; block:</source>
          <target state="translated">다음 은 시작점으로 사용할 수 있는 샘플 &lt;code&gt;registration/login.html&lt;/code&gt; 템플릿입니다. &lt;code&gt;content&lt;/code&gt; 블록 을 정의하는 &lt;code&gt;base.html&lt;/code&gt; 템플릿 이 있다고 가정합니다 .</target>
        </trans-unit>
        <trans-unit id="0ae30bf679595ef7533cdd63b407f83f5f8f674a" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s a sample URLconf:</source>
          <target state="translated">다음은 샘플 URLconf입니다.</target>
        </trans-unit>
        <trans-unit id="fa6ae3e7aabdf62e419781fb8ac91fef7e4efcbc" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s a sample configuration which uses a MySQL option file:</source>
          <target state="translated">다음은 MySQL 옵션 파일을 사용하는 샘플 구성입니다.</target>
        </trans-unit>
        <trans-unit id="1cb8cc1f47e98bd6b8bca615e0c892d2101a324e" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s a sample migration:</source>
          <target state="translated">샘플 마이그레이션은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="ae6541653add727b9d1b714886c5cb294eb66157" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s a sample settings file:</source>
          <target state="translated">샘플 설정 파일은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="0a35ae241d211aecdcc854051ae6190c4718464a" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s a setup that tells the Django template engine to load templates from the &lt;code&gt;templates&lt;/code&gt; subdirectory inside each installed application:</source>
          <target state="translated">다음은 장고 템플릿 엔진에 설치된 각 응용 프로그램 의 &lt;code&gt;templates&lt;/code&gt; 하위 디렉토리 에서 템플릿을로드하도록 설정하는 설정입니다 .</target>
        </trans-unit>
        <trans-unit id="ef7c5cda6c9f776cf07508872a931615e59130bb" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s a typical usage example:</source>
          <target state="translated">일반적인 사용 예는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="1427d30cb4b280307f9c35fdcbbec639fc3c1999" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s a view that returns the current date and time, as an HTML document:</source>
          <target state="translated">다음은 현재 날짜와 시간을 HTML 문서로 반환하는 뷰입니다.</target>
        </trans-unit>
        <trans-unit id="d3e2bddf8c963051b7303f539a2fd185abce31a7" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example &lt;code&gt;babel.cfg&lt;/code&gt; configuration file:</source>
          <target state="translated">다음은 &lt;code&gt;babel.cfg&lt;/code&gt; 구성 파일 의 예입니다 .</target>
        </trans-unit>
        <trans-unit id="8aebe75987c46c90f1d219df0277567b236e3afb" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example backend that authenticates against a username and password variable defined in your &lt;code&gt;settings.py&lt;/code&gt; file and creates a Django &lt;code&gt;User&lt;/code&gt; object the first time a user authenticates:</source>
          <target state="translated">다음은 &lt;code&gt;settings.py&lt;/code&gt; 파일에 정의 된 username 및 password 변수에 대해 인증하고 사용자 가 처음 인증 할 때 Django &lt;code&gt;User&lt;/code&gt; 객체를 생성 하는 예제 백엔드입니다 .</target>
        </trans-unit>
        <trans-unit id="cff630704065ec7b5de978b86e7c6b74b5e56dc7" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example command to start a uWSGI server:</source>
          <target state="translated">다음은 uWSGI 서버를 시작하는 명령 예입니다.</target>
        </trans-unit>
        <trans-unit id="102ce3104838011837efe205bdd80f68de4dae95" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example configuration for a &lt;code&gt;pylibmc&lt;/code&gt; based backend that enables the binary protocol, SASL authentication, and the &lt;code&gt;ketama&lt;/code&gt; behavior mode:</source>
          <target state="translated">이진 프로토콜, SASL 인증 및 &lt;code&gt;ketama&lt;/code&gt; 동작 모드 를 활성화 하는 &lt;code&gt;pylibmc&lt;/code&gt; 기반 백엔드의 구성 예는 다음과 같습니다 .</target>
        </trans-unit>
        <trans-unit id="1b421c4f95aa496406a2e84c2f627a954ab2836f" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example configuration for a &lt;code&gt;python-memcached&lt;/code&gt; based backend with an object size limit of 2MB:</source>
          <target state="translated">다음 은 객체 크기 제한이 2MB 인 &lt;code&gt;python-memcached&lt;/code&gt; 기반 백엔드의 구성 예 입니다.</target>
        </trans-unit>
        <trans-unit id="3a2a1317feb0953774732005f170e31c4c8a4bc7" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example filter definition:</source>
          <target state="translated">필터 정의의 예는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="80f83222987a04b9ecf23f2ea890140f555d567d" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example of a &lt;a href=&quot;../../topics/http/urls&quot;&gt;URLconf&lt;/a&gt; using &lt;a href=&quot;#django.contrib.sitemaps.GenericSitemap&quot;&gt;&lt;code&gt;GenericSitemap&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">다음은 &lt;a href=&quot;#django.contrib.sitemaps.GenericSitemap&quot;&gt; &lt;code&gt;GenericSitemap&lt;/code&gt; 을&lt;/a&gt; 사용 하는 &lt;a href=&quot;../../topics/http/urls&quot;&gt;URLconf&lt;/a&gt; 의 예입니다 .</target>
        </trans-unit>
        <trans-unit id="ae6ef8ee4290c13f117dcdc7e703f627625867c0" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example of a URLconf using &lt;a href=&quot;#django.contrib.flatpages.sitemaps.FlatPageSitemap&quot;&gt;&lt;code&gt;FlatPageSitemap&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">여기에 사용 URLconf의 예 &lt;a href=&quot;#django.contrib.flatpages.sitemaps.FlatPageSitemap&quot;&gt; &lt;code&gt;FlatPageSitemap&lt;/code&gt; 는&lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="3845b1b6e90ab1ee471ab4f454dadade8a8b37f6" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example of a non-atomic data migration that updates a large table in smaller batches:</source>
          <target state="translated">다음은 작은 테이블 단위로 큰 테이블을 업데이트하는 비 원자 데이터 마이그레이션의 예입니다.</target>
        </trans-unit>
        <trans-unit id="e800a41196ea2c952c6cc78bf4125ea18f3b697e" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example of how you might use this in a template:</source>
          <target state="translated">템플릿에서 이것을 사용하는 방법의 예는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="6e261dac3e73be10b1f310f633c7e43bef1f8cbe" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example of the search algorithm. For this example the &lt;a href=&quot;../ref/settings#std:setting-TEMPLATES&quot;&gt;&lt;code&gt;TEMPLATES&lt;/code&gt;&lt;/a&gt; setting is:</source>
          <target state="translated">다음은 검색 알고리즘의 예입니다. 이 예에서 &lt;a href=&quot;../ref/settings#std:setting-TEMPLATES&quot;&gt; &lt;code&gt;TEMPLATES&lt;/code&gt; &lt;/a&gt; 설정은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="3d265334afc2a3a5deaa825a3e8d0c1dbc637509" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example of what the form-handling view looks like:</source>
          <target state="translated">다음은 양식 처리보기의 예입니다.</target>
        </trans-unit>
        <trans-unit id="cab637454e1c6c1a9aee365744daf4493bf04463" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example test that examines &lt;code&gt;django.core.mail.outbox&lt;/code&gt; for length and contents:</source>
          <target state="translated">다음은 &lt;code&gt;django.core.mail.outbox&lt;/code&gt; 에서 길이와 내용 을 검사하는 테스트 예입니다 .</target>
        </trans-unit>
        <trans-unit id="c77b97bfa6d759f92c704a63a66d8c15a6409803" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example that stores the current timezone in the session. (It skips error handling entirely for the sake of simplicity.)</source>
          <target state="translated">다음은 현재 시간대를 세션에 저장하는 예입니다. (간단 성을 위해 오류 처리를 완전히 건너 뜁니다.)</target>
        </trans-unit>
        <trans-unit id="d8255f47bfef2f67ea1dd701782d89362832ca71" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example using &lt;a href=&quot;../ref/paginator#django.core.paginator.Paginator&quot;&gt;&lt;code&gt;Paginator&lt;/code&gt;&lt;/a&gt; in a view function to paginate a queryset:</source>
          <target state="translated">다음 은 뷰 함수에서 &lt;a href=&quot;../ref/paginator#django.core.paginator.Paginator&quot;&gt; &lt;code&gt;Paginator&lt;/code&gt; &lt;/a&gt; 를 사용하여 쿼리 세트 를 페이지 매김하는 예입니다.</target>
        </trans-unit>
        <trans-unit id="864913de9e058af94181a7cf98e2330576120b66" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example view that takes a &lt;code&gt;subject&lt;/code&gt;, &lt;code&gt;message&lt;/code&gt; and &lt;code&gt;from_email&lt;/code&gt; from the request&amp;rsquo;s POST data, sends that to &lt;a href=&quot;mailto:admin%40example.com&quot;&gt;admin@example.com&lt;/a&gt; and redirects to &amp;ldquo;/contact/thanks/&amp;rdquo; when it&amp;rsquo;s done:</source>
          <target state="translated">다음 은 요청의 POST 데이터에서 &lt;code&gt;subject&lt;/code&gt; , &lt;code&gt;message&lt;/code&gt; 및 &lt;code&gt;from_email&lt;/code&gt; 을 &lt;a href=&quot;mailto:admin%40example.com&quot;&gt;가져 와서 admin@example.com으로&lt;/a&gt; 전송하고 완료되면&amp;ldquo;/ contact / thanks /&amp;rdquo;로 리디렉션되는보기의 예입니다.</target>
        </trans-unit>
        <trans-unit id="34ffdaa4404e3fe833bd23cc3839e586225ae798" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example widget which subclasses &lt;a href=&quot;#django.forms.MultiWidget&quot;&gt;&lt;code&gt;MultiWidget&lt;/code&gt;&lt;/a&gt; to display a date with the day, month, and year in different select boxes. This widget is intended to be used with a &lt;a href=&quot;fields#django.forms.DateField&quot;&gt;&lt;code&gt;DateField&lt;/code&gt;&lt;/a&gt; rather than a &lt;a href=&quot;fields#django.forms.MultiValueField&quot;&gt;&lt;code&gt;MultiValueField&lt;/code&gt;&lt;/a&gt;, thus we have implemented &lt;a href=&quot;#django.forms.Widget.value_from_datadict&quot;&gt;&lt;code&gt;value_from_datadict()&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">다음은 &lt;a href=&quot;#django.forms.MultiWidget&quot;&gt; &lt;code&gt;MultiWidget&lt;/code&gt; &lt;/a&gt; 을 서브 클래 싱 하여 날짜, 월 및 연도가 포함 된 날짜를 다른 선택 상자에 표시하는 위젯 예 입니다. 이 위젯은 &lt;a href=&quot;fields#django.forms.MultiValueField&quot;&gt; &lt;code&gt;MultiValueField&lt;/code&gt; 가&lt;/a&gt; 아닌 &lt;a href=&quot;fields#django.forms.DateField&quot;&gt; &lt;code&gt;DateField&lt;/code&gt; &lt;/a&gt; 와 함께 사용되도록 만들어 &lt;a href=&quot;#django.forms.Widget.value_from_datadict&quot;&gt; &lt;code&gt;value_from_datadict()&lt;/code&gt; &lt;/a&gt; 구현했습니다 .</target>
        </trans-unit>
        <trans-unit id="bac37e9710dc9d2c74d9c1ed00e5b17d08cd6fb3" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example with a test database configuration:</source>
          <target state="translated">테스트 데이터베이스 구성의 예는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="c288c1a6f737cba4e4dfe94d9e407d5ce00f2fe3" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example with the &lt;code&gt;Count&lt;/code&gt; aggregate:</source>
          <target state="translated">&lt;code&gt;Count&lt;/code&gt; 집계 의 예는 다음과 같습니다 .</target>
        </trans-unit>
        <trans-unit id="992e957c839d3d8d2abc225d337198ce96cd7ccb" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example, which generates the same CSV file as above:</source>
          <target state="translated">위와 동일한 CSV 파일을 생성하는 예는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="79a379c34c53ce83d07e71356345ea69136a74d1" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example:</source>
          <target state="translated">예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="cc4ac14d2e7d339c7464837b69d59c85f014a9b2" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s another example with the &lt;code&gt;Avg&lt;/code&gt; aggregate:</source>
          <target state="translated">다음은 &lt;code&gt;Avg&lt;/code&gt; 집계 의 또 다른 예입니다 .</target>
        </trans-unit>
        <trans-unit id="5621dab2b1d22484b8fe971ff0acb8dea33dd71f" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s example HTML template code:</source>
          <target state="translated">HTML 템플릿 코드의 예는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="9f9ad4a804c6ae4e272e944aaeea2d0deed1f424" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s how Django handles custom managers and &lt;a href=&quot;models#model-inheritance&quot;&gt;model inheritance&lt;/a&gt;:</source>
          <target state="translated">Django가 커스텀 매니저와 &lt;a href=&quot;models#model-inheritance&quot;&gt;모델 상속을&lt;/a&gt; 처리하는 방법은 다음과 같습니다 .</target>
        </trans-unit>
        <trans-unit id="982d8786f08335dca1f604bcf8f2fbe3797a6051" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s how Django uses the sites framework:</source>
          <target state="translated">Django가 사이트 프레임 워크를 사용하는 방법은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="1aad681f3092909b52d4dd368c95d8a6868db25b" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s how a simplified &lt;code&gt;{% comment %}&lt;/code&gt; tag might be implemented:</source>
          <target state="translated">단순화 된 &lt;code&gt;{% comment %}&lt;/code&gt; 태그를 구현 하는 방법은 다음과 같습니다 .</target>
        </trans-unit>
        <trans-unit id="d91d9e4962a8b0536d1b0745beac3f3e808bc67a" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s how the form data could be processed in the view that handles this form:</source>
          <target state="translated">이 양식을 처리하는보기에서 양식 데이터를 처리하는 방법은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="0e26c415b5e7fc6d2eaf6e0f623530bfce47a883" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s how to create a raster and return it as a file in an &lt;a href=&quot;../../request-response#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">래스터를 만들어 &lt;a href=&quot;../../request-response#django.http.HttpResponse&quot;&gt; &lt;code&gt;HttpResponse&lt;/code&gt; &lt;/a&gt; 에서 파일로 반환하는 방법은 다음과 같습니다 .</target>
        </trans-unit>
        <trans-unit id="af034e2b096c2303b99e1d44bd431bd0330becae" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s how to implement a custom template backend in order to use another template system. A template backend is a class that inherits &lt;code&gt;django.template.backends.base.BaseEngine&lt;/code&gt;. It must implement &lt;code&gt;get_template()&lt;/code&gt; and optionally &lt;code&gt;from_string()&lt;/code&gt;. Here&amp;rsquo;s an example for a fictional &lt;code&gt;foobar&lt;/code&gt; template library:</source>
          <target state="translated">다른 템플릿 시스템을 사용하기 위해 사용자 정의 템플릿 백엔드를 구현하는 방법은 다음과 같습니다. 템플릿 백엔드는 &lt;code&gt;django.template.backends.base.BaseEngine&lt;/code&gt; 을 상속하는 클래스입니다 . &lt;code&gt;get_template()&lt;/code&gt; 및 선택적으로 &lt;code&gt;from_string()&lt;/code&gt; 구현해야합니다 . 가상의 &lt;code&gt;foobar&lt;/code&gt; 템플릿 라이브러리 의 예는 다음과 같습니다 .</target>
        </trans-unit>
        <trans-unit id="8d36be0384837a6370f1ba02759b5af0d0f2c187" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s how to migrate a project that was started before Django supported time zones.</source>
          <target state="translated">Django가 표준 시간대를 지원하기 전에 시작된 프로젝트를 마이그레이션하는 방법은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="66ec10b2a136d2c823468ba95c64eaaab44cdd82" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s how you connect with the decorator:</source>
          <target state="translated">데코레이터와 연결하는 방법은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="327bfd0c7d625202f1966273d60d8493e343ab93" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s how you&amp;rsquo;d use this new version of the tag:</source>
          <target state="translated">이 새 버전의 태그를 사용하는 방법은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="1a2bfaf566979ed7aedf0f669c54fbc0f46145bf" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s some examples of some of the general-purpose aggregation functions:</source>
          <target state="translated">다음은 일부 범용 집계 함수의 예입니다.</target>
        </trans-unit>
        <trans-unit id="da0a2fbae58195202e76fcd70bf31b97096b8406" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s specifically what will happen:</source>
          <target state="translated">구체적으로 다음과 같은 일이 발생합니다.</target>
        </trans-unit>
        <trans-unit id="90cc1fba379d3079d864b75ec9a282dc9dd9df53" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s the algorithm Django uses in compiling settings:</source>
          <target state="translated">Django가 컴파일 설정에서 사용하는 알고리즘은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="4f6925d2fd7c87eb1fdea33977d87762ce059a90" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s the code for these beat-specific feeds:</source>
          <target state="translated">이 비트 별 피드에 대한 코드는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="fee44b1e3d0f774cdd2a8c542296b97438ffc668" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s the example URLconf from earlier, rewritten using regular expressions:</source>
          <target state="translated">다음은 정규 표현식을 사용하여 다시 작성된 이전 URLconf의 예입니다.</target>
        </trans-unit>
        <trans-unit id="e4c0b7baa1526900d2e4f4456095dc0e9ce72d6a" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s the formal declaration of a &lt;code&gt;QuerySet&lt;/code&gt;:</source>
          <target state="translated">다음은 &lt;code&gt;QuerySet&lt;/code&gt; 의 공식 선언입니다 .</target>
        </trans-unit>
        <trans-unit id="1165f9724f1430ed525846674f31020cff0308a8" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s the output of &lt;code&gt;{{ form.as_p }}&lt;/code&gt; for our &lt;code&gt;ContactForm&lt;/code&gt; instance:</source>
          <target state="translated">&lt;code&gt;ContactForm&lt;/code&gt; 인스턴스에 대한 &lt;code&gt;{{ form.as_p }}&lt;/code&gt; 의 출력 결과는 다음과 같습니다 .</target>
        </trans-unit>
        <trans-unit id="29c90eaa3b7ceff1a2a2ba24fcb3bda64c8c52b3" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s the same thing, with &lt;code&gt;my_view&lt;/code&gt; wrapped in &lt;code&gt;cache_page&lt;/code&gt;:</source>
          <target state="translated">다음은 &lt;code&gt;my_view&lt;/code&gt; 가 &lt;code&gt;cache_page&lt;/code&gt; 에 싸여 있는 것과 같은 것입니다 .</target>
        </trans-unit>
        <trans-unit id="abcc0e54e5809432215e2f0949566ceb948498ed" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s what &lt;code&gt;LoginView&lt;/code&gt; does:</source>
          <target state="translated">&lt;code&gt;LoginView&lt;/code&gt; 의 기능 은 다음과 같습니다 .</target>
        </trans-unit>
        <trans-unit id="7283b0cf7a571c7215c8f2bb4d8140cd4ffd2ed4" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s what a URLconf might look like for the &lt;code&gt;Reporter&lt;/code&gt;/&lt;code&gt;Article&lt;/code&gt; example above:</source>
          <target state="translated">위 의 &lt;code&gt;Reporter&lt;/code&gt; / &lt;code&gt;Article&lt;/code&gt; 예제 에서 URLconf는 다음과 같습니다 .</target>
        </trans-unit>
        <trans-unit id="bb1565e42c236a7f2831e8cfa57af03ea646f01a" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s what each of the built-in processors does:</source>
          <target state="translated">각 내장 프로세서의 기능은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="6d5f00c1bab080be00911ca379dda11db29ab82a" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s what it looks like at this point:</source>
          <target state="translated">이 시점의 모습은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="2b749a2a594c50741b94f0db598a875d6be8a1e8" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s what the &amp;ldquo;base.html&amp;rdquo; template, including the use of &lt;a href=&quot;../howto/static-files/index&quot;&gt;static files&lt;/a&gt;, might look like:</source>
          <target state="translated">&lt;a href=&quot;../howto/static-files/index&quot;&gt;정적 파일&lt;/a&gt; 사용을 포함한&amp;ldquo;base.html&amp;rdquo;템플릿 은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="c16d5101a0891c5cbab072e90a5af67e887f73ba" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s what the relevant URLconf lines would look like for the example above:</source>
          <target state="translated">위의 예에서 관련 URLconf 행은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="1539f3d44308e23c6984798d63f494196479b7da" translate="yes" xml:space="preserve">
          <source>Here, &lt;a href=&quot;#django.contrib.gis.utils.LayerMapping&quot;&gt;&lt;code&gt;LayerMapping&lt;/code&gt;&lt;/a&gt; transformed the three geometries from the shapefile in their original spatial reference system (WGS84) to the spatial reference system of the GeoDjango model (NAD83). If no spatial reference system is defined for the layer, use the &lt;code&gt;source_srs&lt;/code&gt; keyword with a &lt;a href=&quot;gdal#django.contrib.gis.gdal.SpatialReference&quot;&gt;&lt;code&gt;SpatialReference&lt;/code&gt;&lt;/a&gt; object to specify one.</source>
          <target state="translated">여기에서 &lt;a href=&quot;#django.contrib.gis.utils.LayerMapping&quot;&gt; &lt;code&gt;LayerMapping&lt;/code&gt; &lt;/a&gt; 은 원래 공간 참조 시스템 (WGS84)의 쉐이프 파일에서 GeoDjango 모델의 공간 참조 시스템 (NAD83)으로 세 가지 형상을 변환했습니다. 계층에 대해 공간 참조 시스템이 정의되어 있지 않은 경우 &lt;code&gt;source_srs&lt;/code&gt; 키워드를 &lt;a href=&quot;gdal#django.contrib.gis.gdal.SpatialReference&quot;&gt; &lt;code&gt;SpatialReference&lt;/code&gt; &lt;/a&gt; 오브젝트 와 함께 사용하여 하나를 지정하십시오.</target>
        </trans-unit>
        <trans-unit id="3e093c29faaea57896f80485222e377673d07e69" translate="yes" xml:space="preserve">
          <source>Here, &lt;code&gt;default_manager&lt;/code&gt; is the default. The &lt;code&gt;objects&lt;/code&gt; manager is still available, since it&amp;rsquo;s inherited, but isn&amp;rsquo;t used as the default.</source>
          <target state="translated">여기서 &lt;code&gt;default_manager&lt;/code&gt; 가 기본값입니다. &lt;code&gt;objects&lt;/code&gt; 관리자는 상속,하지만 기본값으로 사용되지 않기 때문에, 계속 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bec468010f20ce37ac755447a7cacf1a6965b612" translate="yes" xml:space="preserve">
          <source>Here, &lt;code&gt;friends()&lt;/code&gt; will be called twice. Since the instance &lt;code&gt;person&lt;/code&gt; in the view and the template are the same, decorating the &lt;code&gt;friends()&lt;/code&gt; method with &lt;code&gt;@cached_property&lt;/code&gt; can avoid that:</source>
          <target state="translated">여기서 &lt;code&gt;friends()&lt;/code&gt; 가 두 번 호출됩니다. 뷰 의 인스턴스 &lt;code&gt;person&lt;/code&gt; 과 템플릿이 동일하기 때문에 &lt;code&gt;friends()&lt;/code&gt; 메서드를 &lt;code&gt;@cached_property&lt;/code&gt; 로 장식하면 다음 을 피할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d0e804ebd96c0af9eec8dbdab01a73bdcc48afa7" translate="yes" xml:space="preserve">
          <source>Here, each model is represented by a class that subclasses &lt;a href=&quot;../ref/models/instances#django.db.models.Model&quot;&gt;&lt;code&gt;django.db.models.Model&lt;/code&gt;&lt;/a&gt;. Each model has a number of class variables, each of which represents a database field in the model.</source>
          <target state="translated">여기에서 각 모델은 &lt;a href=&quot;../ref/models/instances#django.db.models.Model&quot;&gt; &lt;code&gt;django.db.models.Model&lt;/code&gt; &lt;/a&gt; 서브 클래스 인 클래스로 표시됩니다 . 각 모델에는 여러 클래스 변수가 있으며 각 변수는 모델의 데이터베이스 필드를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="4d45cf61a6b273da8aee30ada7de9c9f80157840" translate="yes" xml:space="preserve">
          <source>Here, there could potentially be multiple ordering data for each &lt;code&gt;Event&lt;/code&gt;; each &lt;code&gt;Event&lt;/code&gt; with multiple &lt;code&gt;children&lt;/code&gt; will be returned multiple times into the new &lt;code&gt;QuerySet&lt;/code&gt; that &lt;code&gt;order_by()&lt;/code&gt; creates. In other words, using &lt;code&gt;order_by()&lt;/code&gt; on the &lt;code&gt;QuerySet&lt;/code&gt; could return more items than you were working on to begin with - which is probably neither expected nor useful.</source>
          <target state="translated">여기에는 각 &lt;code&gt;Event&lt;/code&gt; 마다 여러 개의 주문 데이터가있을 수 있습니다 . &lt;code&gt;children&lt;/code&gt; 이 여러 개인 각 &lt;code&gt;Event&lt;/code&gt; 는 &lt;code&gt;order_by()&lt;/code&gt; 가 생성 한 새 &lt;code&gt;QuerySet&lt;/code&gt; 에 여러 번 반환됩니다 . 다시 말해, &lt;code&gt;QuerySet&lt;/code&gt; 에서 &lt;code&gt;order_by()&lt;/code&gt; 를 사용 하면 작업을 시작하는 것보다 많은 항목을 반환 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="437ecb11cc4454ac0c7bcfeb26ef7fc4a9a9ab04" translate="yes" xml:space="preserve">
          <source>Here, we have a URLconf with a single captured group:</source>
          <target state="translated">여기에 하나의 캡처 그룹이있는 URLconf가 있습니다.</target>
        </trans-unit>
        <trans-unit id="59650799f9105f6fd46738d8d71c0649251d8fa3" translate="yes" xml:space="preserve">
          <source>Here, we have pulled the value of &lt;code&gt;reporter.stories_filed&lt;/code&gt; from the database into memory and manipulated it using familiar Python operators, and then saved the object back to the database. But instead we could also have done:</source>
          <target state="translated">여기에서 &lt;code&gt;reporter.stories_filed&lt;/code&gt; 값을 데이터베이스에서 메모리로 가져 와서 친숙한 Python 연산자를 사용하여 조작 한 다음 개체를 데이터베이스에 다시 저장했습니다. 그러나 대신 우리는 또한 할 수있었습니다 :</target>
        </trans-unit>
        <trans-unit id="82c135d3966be0eb9476ca12305ddc85cdd98f0d" translate="yes" xml:space="preserve">
          <source>Here, with concurrent requests, multiple attempts to save a &lt;code&gt;Person&lt;/code&gt; with the same parameters may be made. To avoid this race condition, the above example can be rewritten using &lt;code&gt;get_or_create()&lt;/code&gt; like so:</source>
          <target state="translated">여기서 동시 요청으로 동일한 매개 변수 를 사용하여 &lt;code&gt;Person&lt;/code&gt; 을 저장하려는 여러 번의 시도 가 이루어질 수 있습니다. 이 경쟁 조건을 피하기 위해 &lt;code&gt;get_or_create()&lt;/code&gt; 사용하여 위 예제를 다시 작성할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="6e1c1bebb97b3fac0f84e08c91f2ac346f29f05c" translate="yes" xml:space="preserve">
          <source>Here, you retrieved a &lt;code&gt;QuerySet&lt;/code&gt; with only one model: the border of the United States (exactly what you would expect).</source>
          <target state="translated">여기서는 하나의 모델, 즉 미국의 경계 (정확하게 예상되는 것) 만 있는 &lt;code&gt;QuerySet&lt;/code&gt; 을 검색했습니다 .</target>
        </trans-unit>
        <trans-unit id="26d877995327d903f9c9c849285e27201361d8cd" translate="yes" xml:space="preserve">
          <source>Hierarchy of Django unit testing classes</source>
          <target state="translated">장고 단위 테스트 클래스의 계층</target>
        </trans-unit>
        <trans-unit id="2284d040f5091f510de37a154536196310f9c02d" translate="yes" xml:space="preserve">
          <source>Hint</source>
          <target state="translated">Hint</target>
        </trans-unit>
        <trans-unit id="eef8e89aeb708a408921fec1b9e87c4d04faaced" translate="yes" xml:space="preserve">
          <source>Hints</source>
          <target state="translated">Hints</target>
        </trans-unit>
        <trans-unit id="01d2f9ecc0290276e414180f8fb91eaf80ea98c6" translate="yes" xml:space="preserve">
          <source>Historical models</source>
          <target state="translated">역사적 모델</target>
        </trans-unit>
        <trans-unit id="90ccd6497400b5576aeca1bd94af74aae1e0a250" translate="yes" xml:space="preserve">
          <source>History</source>
          <target state="translated">History</target>
        </trans-unit>
        <trans-unit id="3668d9fae13111a1cdd1c411a004c1830fac5d25" translate="yes" xml:space="preserve">
          <source>History consistency</source>
          <target state="translated">역사 일관성</target>
        </trans-unit>
        <trans-unit id="2db3c5543ab9e474cea4204fa6f705e4a5357492" translate="yes" xml:space="preserve">
          <source>Hitting the database multiple times for different parts of a single &amp;lsquo;set&amp;rsquo; of data that you will need all parts of is, in general, less efficient than retrieving it all in one query. This is particularly important if you have a query that is executed in a loop, and could therefore end up doing many database queries, when only one was needed. So:</source>
          <target state="translated">단일 데이터 집합의 서로 다른 부분에 대해 데이터베이스를 여러 번 두드리면 모든 부분이 필요하며 일반적으로 하나의 쿼리에서 모두 검색하는 것보다 효율성이 떨어집니다. 이것은 루프에서 실행되는 쿼리가있어 하나만 필요할 때 많은 데이터베이스 쿼리를 수행 할 수있는 경우에 특히 중요합니다. 그래서:</target>
        </trans-unit>
        <trans-unit id="b24cd4dd561003744f6839bba6f0b01af01e9c66" translate="yes" xml:space="preserve">
          <source>Homebrew</source>
          <target state="translated">Homebrew</target>
        </trans-unit>
        <trans-unit id="3db3ff2b4f95ac9d06bb8a36b004442519e2377c" translate="yes" xml:space="preserve">
          <source>Hooking &lt;code&gt;AdminSite&lt;/code&gt; instances into your URLconf</source>
          <target state="translated">&lt;code&gt;AdminSite&lt;/code&gt; 인스턴스를 URLconf에 연결</target>
        </trans-unit>
        <trans-unit id="377b52a12a2942982a776073a4c6fef720ab9361" translate="yes" xml:space="preserve">
          <source>Hooking into the current site from views</source>
          <target state="translated">뷰에서 현재 사이트에 연결</target>
        </trans-unit>
        <trans-unit id="a035ae36c0c60bda73442b7d15b2e8cbdae93b94" translate="yes" xml:space="preserve">
          <source>Host header validation</source>
          <target state="translated">호스트 헤더 검증</target>
        </trans-unit>
        <trans-unit id="7f9ea4fcf4a81bbcd92432dccf078570d76b403b" translate="yes" xml:space="preserve">
          <source>Hour, 12-hour format without leading zeros.</source>
          <target state="translated">앞에 0이없는 12 시간 형식</target>
        </trans-unit>
        <trans-unit id="3691f2c8d14a93defea1b98c76da99f673f7cc0b" translate="yes" xml:space="preserve">
          <source>Hour, 12-hour format.</source>
          <target state="translated">12 시간 형식</target>
        </trans-unit>
        <trans-unit id="05050dcb2cc031117aeab33205f5f0ebb56643f4" translate="yes" xml:space="preserve">
          <source>Hour, 24-hour format without leading zeros.</source>
          <target state="translated">앞에 0이없는 24 시간 형식</target>
        </trans-unit>
        <trans-unit id="45e66663fc9c49156a42c4c815d1ca9ece7337cd" translate="yes" xml:space="preserve">
          <source>Hour, 24-hour format.</source>
          <target state="translated">24 시간 형식</target>
        </trans-unit>
        <trans-unit id="834defb49795704bb66671584938734ef31149af" translate="yes" xml:space="preserve">
          <source>How Django determines the lookups and transforms which are used</source>
          <target state="translated">Django가 사용되는 조회 및 변환을 결정하는 방법</target>
        </trans-unit>
        <trans-unit id="c430bfd8ea64f441a6249a4392b781c211b8181a" translate="yes" xml:space="preserve">
          <source>How Django discovers language preference</source>
          <target state="translated">Django가 언어 기본 설정을 발견하는 방법</target>
        </trans-unit>
        <trans-unit id="332c02dc1e8a1ada0eb887a1ba1863a66b86b9f3" translate="yes" xml:space="preserve">
          <source>How Django discovers translations</source>
          <target state="translated">장고가 번역을 발견하는 방법</target>
        </trans-unit>
        <trans-unit id="e16df067ba88e72bf0641a55551a8b9e61d360f6" translate="yes" xml:space="preserve">
          <source>How Django knows to UPDATE vs. INSERT</source>
          <target state="translated">장고가 UPDATE와 INSERT를 어떻게 아는가</target>
        </trans-unit>
        <trans-unit id="342461abdfba0eb8d205c5faef1083bcee625984" translate="yes" xml:space="preserve">
          <source>How Django processes a request</source>
          <target state="translated">Django가 요청을 처리하는 방법</target>
        </trans-unit>
        <trans-unit id="a965dc33e4b23fff03edc6677ddd4a5db2a68137" translate="yes" xml:space="preserve">
          <source>How Django stores passwords</source>
          <target state="translated">Django가 비밀번호를 저장하는 방법</target>
        </trans-unit>
        <trans-unit id="84049f5f6d42de61077b821036f8551841f5c062" translate="yes" xml:space="preserve">
          <source>How Django uses the sites framework</source>
          <target state="translated">Django가 사이트 프레임 워크를 사용하는 방법</target>
        </trans-unit>
        <trans-unit id="58bcd029adac356fe636f2a688e8a3911920d656" translate="yes" xml:space="preserve">
          <source>How applications are loaded</source>
          <target state="translated">응용 프로그램이로드되는 방법</target>
        </trans-unit>
        <trans-unit id="ba680964ddbb43280ef340243ccbc0d61802f176" translate="yes" xml:space="preserve">
          <source>How are the backward relationships possible?</source>
          <target state="translated">후진 관계는 어떻게 가능합니까?</target>
        </trans-unit>
        <trans-unit id="d26502dd842d87ee4ca401cd3ff22a727c99c3bd" translate="yes" xml:space="preserve">
          <source>How did &lt;a href=&quot;#django.contrib.sites.managers.CurrentSiteManager&quot;&gt;&lt;code&gt;CurrentSiteManager&lt;/code&gt;&lt;/a&gt; know which field of &lt;code&gt;Photo&lt;/code&gt; was the &lt;a href=&quot;#django.contrib.sites.models.Site&quot;&gt;&lt;code&gt;Site&lt;/code&gt;&lt;/a&gt;? By default, &lt;a href=&quot;#django.contrib.sites.managers.CurrentSiteManager&quot;&gt;&lt;code&gt;CurrentSiteManager&lt;/code&gt;&lt;/a&gt; looks for a either a &lt;a href=&quot;../models/fields#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;ForeignKey&lt;/code&gt;&lt;/a&gt; called &lt;code&gt;site&lt;/code&gt; or a &lt;a href=&quot;../models/fields#django.db.models.ManyToManyField&quot;&gt;&lt;code&gt;ManyToManyField&lt;/code&gt;&lt;/a&gt; called &lt;code&gt;sites&lt;/code&gt; to filter on. If you use a field named something other than &lt;code&gt;site&lt;/code&gt; or &lt;code&gt;sites&lt;/code&gt; to identify which &lt;a href=&quot;#django.contrib.sites.models.Site&quot;&gt;&lt;code&gt;Site&lt;/code&gt;&lt;/a&gt; objects your object is related to, then you need to explicitly pass the custom field name as a parameter to &lt;a href=&quot;#django.contrib.sites.managers.CurrentSiteManager&quot;&gt;&lt;code&gt;CurrentSiteManager&lt;/code&gt;&lt;/a&gt; on your model. The following model, which has a field called &lt;code&gt;publish_on&lt;/code&gt;, demonstrates this:</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.sites.managers.CurrentSiteManager&quot;&gt; &lt;code&gt;CurrentSiteManager&lt;/code&gt; &lt;/a&gt; 는 &lt;a href=&quot;#django.contrib.sites.models.Site&quot;&gt; &lt;code&gt;Site&lt;/code&gt; &lt;/a&gt; 의 &lt;code&gt;Photo&lt;/code&gt; 필드를 어떻게 알았 습니까? 기본적으로 &lt;a href=&quot;#django.contrib.sites.managers.CurrentSiteManager&quot;&gt; &lt;code&gt;CurrentSiteManager&lt;/code&gt; &lt;/a&gt; 는 &lt;code&gt;site&lt;/code&gt; 라는 &lt;a href=&quot;../models/fields#django.db.models.ForeignKey&quot;&gt; &lt;code&gt;ForeignKey&lt;/code&gt; &lt;/a&gt; 또는 필터링 할 &lt;code&gt;sites&lt;/code&gt; 라는 &lt;a href=&quot;../models/fields#django.db.models.ManyToManyField&quot;&gt; &lt;code&gt;ManyToManyField&lt;/code&gt; 를&lt;/a&gt; 찾습니다 . 당신이 아닌 다른 이름의 필드를 사용하는 경우 &lt;code&gt;site&lt;/code&gt; 또는 &lt;code&gt;sites&lt;/code&gt; 를 식별하는 &lt;a href=&quot;#django.contrib.sites.models.Site&quot;&gt; &lt;code&gt;Site&lt;/code&gt; &lt;/a&gt; 개체가 관련이 객체를, 당신은 명시 적으로 매개 변수로 사용자 정의 필드 이름을 통과해야 &lt;a href=&quot;#django.contrib.sites.managers.CurrentSiteManager&quot;&gt; &lt;code&gt;CurrentSiteManager&lt;/code&gt; &lt;/a&gt; 모델에. &lt;code&gt;publish_on&lt;/code&gt; 이라는 필드가있는 다음 모델 은이를 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="418b80ab08e7d31c1d6197daae3222c122081927" translate="yes" xml:space="preserve">
          <source>How errors are displayed</source>
          <target state="translated">오류가 표시되는 방법</target>
        </trans-unit>
        <trans-unit id="4484a6c1ccb775145808167aab3a7812e6a5f96b" translate="yes" xml:space="preserve">
          <source>How invalid variables are handled</source>
          <target state="translated">유효하지 않은 변수를 처리하는 방법</target>
        </trans-unit>
        <trans-unit id="1dd6a17cb4033f4f74df1bb6912b8a28a8074084" translate="yes" xml:space="preserve">
          <source>How it works</source>
          <target state="translated">작동 원리</target>
        </trans-unit>
        <trans-unit id="ee4e87f06982bb7102fed5603132079aa0ee2fde" translate="yes" xml:space="preserve">
          <source>How templates are searched and loaded depends on each engine&amp;rsquo;s backend and configuration.</source>
          <target state="translated">템플릿 검색 및로드 방법은 각 엔진의 백엔드 및 구성에 따라 다릅니다.</target>
        </trans-unit>
        <trans-unit id="e8fc0e3bb00051cc499978898e8d78a09f57c0f8" translate="yes" xml:space="preserve">
          <source>How the documentation is organized</source>
          <target state="translated">문서 구성 방법</target>
        </trans-unit>
        <trans-unit id="2808360f60d17c835d1d64fb4002b0966b4ab333" translate="yes" xml:space="preserve">
          <source>How this is possible</source>
          <target state="translated">이것이 가능한 방법</target>
        </trans-unit>
        <trans-unit id="0618f72382628efcfa82e8777ab385d847babe02" translate="yes" xml:space="preserve">
          <source>How to add, change and delete flatpages</source>
          <target state="translated">플랫 페이지를 추가, 변경 및 삭제하는 방법</target>
        </trans-unit>
        <trans-unit id="26a3d16f713fda9a3eb2c25d96fe6ed5d051ad38" translate="yes" xml:space="preserve">
          <source>How to add, change and delete redirects</source>
          <target state="translated">리디렉션을 추가, 변경 및 삭제하는 방법</target>
        </trans-unit>
        <trans-unit id="b7425528758ba98909653aaf21600d6df07eeb8c" translate="yes" xml:space="preserve">
          <source>How to deploy with ASGI</source>
          <target state="translated">ASGI로 배포하는 방법</target>
        </trans-unit>
        <trans-unit id="105c9c1c914097c69fddc962d12692f35139f7e7" translate="yes" xml:space="preserve">
          <source>How to deploy with WSGI</source>
          <target state="translated">WSGI로 배포하는 방법</target>
        </trans-unit>
        <trans-unit id="1dc657f6557483d50a954592bea11c5f8db24590" translate="yes" xml:space="preserve">
          <source>How to install Django</source>
          <target state="translated">장고 설치 방법</target>
        </trans-unit>
        <trans-unit id="ccdbd153262df55417375bdee52f2912645d9a0e" translate="yes" xml:space="preserve">
          <source>How to install Django on Windows</source>
          <target state="translated">Windows에 Django를 설치하는 방법</target>
        </trans-unit>
        <trans-unit id="4eb1317232cb4cb37edcf659f49ccd3f48d075d1" translate="yes" xml:space="preserve">
          <source>How to log a user in</source>
          <target state="translated">사용자를 로그인하는 방법</target>
        </trans-unit>
        <trans-unit id="8e97372fd46b1a4c793b964fe51a2e05af8b5bfa" translate="yes" xml:space="preserve">
          <source>How to log a user out</source>
          <target state="translated">사용자를 로그 아웃하는 방법</target>
        </trans-unit>
        <trans-unit id="36c0f9a912898ba68eb09309256b126031c47a47" translate="yes" xml:space="preserve">
          <source>How to raise field-specific validation errors if those fields don&amp;rsquo;t appear in a &lt;code&gt;ModelForm&lt;/code&gt;</source>
          <target state="translated">해당 필드가 &lt;code&gt;ModelForm&lt;/code&gt; 에 나타나지 않는 경우 필드 별 유효성 검증 오류를 발생시키는 방법</target>
        </trans-unit>
        <trans-unit id="da4447c72cfc8dee8d3c6513aecab850e658f572" translate="yes" xml:space="preserve">
          <source>How to turn it off</source>
          <target state="translated">끄는 방법</target>
        </trans-unit>
        <trans-unit id="cdb68c618ea1c60ef6ccf6356cdc7abd1131bf29" translate="yes" xml:space="preserve">
          <source>How to use Django with Apache and &lt;code&gt;mod_wsgi&lt;/code&gt;</source>
          <target state="translated">Django를 Apache 및 &lt;code&gt;mod_wsgi&lt;/code&gt; 와 함께 사용하는 방법</target>
        </trans-unit>
        <trans-unit id="45a42a0292be71eae6fb17276c919e0ef9a60e58" translate="yes" xml:space="preserve">
          <source>How to use Django with Apache and mod_wsgi</source>
          <target state="translated">Django를 Apache 및 mod_wsgi와 함께 사용하는 방법</target>
        </trans-unit>
        <trans-unit id="1c87ea425ad7ce70954526d9a78e6316cc80cb84" translate="yes" xml:space="preserve">
          <source>How to use Django with Daphne</source>
          <target state="translated">다프네와 함께 장고를 사용하는 방법</target>
        </trans-unit>
        <trans-unit id="401f4f18ef241d7a8c42c42c8411a233ec281835" translate="yes" xml:space="preserve">
          <source>How to use Django with Gunicorn</source>
          <target state="translated">장고를 Gunicorn과 함께 사용하는 방법</target>
        </trans-unit>
        <trans-unit id="9b88c226e2c4beb580e0f1ed219560527cff4f1e" translate="yes" xml:space="preserve">
          <source>How to use Django with Uvicorn</source>
          <target state="translated">Uvicorn과 함께 Django를 사용하는 방법</target>
        </trans-unit>
        <trans-unit id="1ccc858c03c14705b686e0bc855cd2943676fefe" translate="yes" xml:space="preserve">
          <source>How to use Django with uWSGI</source>
          <target state="translated">uWSGI와 함께 Django를 사용하는 방법</target>
        </trans-unit>
        <trans-unit id="e13e18f3a4a56aeb9973b0c1bdfe43af2d3c3e20" translate="yes" xml:space="preserve">
          <source>How to use it</source>
          <target state="translated">사용 방법</target>
        </trans-unit>
        <trans-unit id="a030b8f9f596ae923525bf1136808679544d64f7" translate="yes" xml:space="preserve">
          <source>How to use sessions</source>
          <target state="translated">세션을 사용하는 방법</target>
        </trans-unit>
        <trans-unit id="38ba2a640e385eee2f46de3c7f8be0042cdb0349" translate="yes" xml:space="preserve">
          <source>How validators are run</source>
          <target state="translated">유효성 검사기 실행 방법</target>
        </trans-unit>
        <trans-unit id="eb3e14332ead8dd346a65a6a6e145c7ed3afb46a" translate="yes" xml:space="preserve">
          <source>How you use this is up to you, but Django uses it in a couple of ways automatically via a couple of conventions.</source>
          <target state="translated">이것을 사용하는 방법은 당신에게 달려 있지만 Django는 몇 가지 규칙을 통해 자동으로 몇 가지 방식으로 사용합니다.</target>
        </trans-unit>
        <trans-unit id="a7eed64119997a9da981184d1d2f258373c91e6c" translate="yes" xml:space="preserve">
          <source>However there&amp;rsquo;s a slight shortcut for the above by letting the formset itself deal with the management form:</source>
          <target state="translated">그러나 양식 자체가 관리 양식을 처리하게함으로써 위의 내용을 약간 단축 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6d0edf5671214ffb733ad2d740f03aefdd689c4e" translate="yes" xml:space="preserve">
          <source>However, &lt;code&gt;Media&lt;/code&gt; objects have some other interesting properties.</source>
          <target state="translated">그러나 &lt;code&gt;Media&lt;/code&gt; 개체에는 다른 흥미로운 속성이 있습니다.</target>
        </trans-unit>
        <trans-unit id="1b75e60d0429c5a33209819138b456eab429c1af" translate="yes" xml:space="preserve">
          <source>However, Django can only upgrade passwords that use algorithms mentioned in &lt;a href=&quot;../../ref/settings#std:setting-PASSWORD_HASHERS&quot;&gt;&lt;code&gt;PASSWORD_HASHERS&lt;/code&gt;&lt;/a&gt;, so as you upgrade to new systems you should make sure never to &lt;em&gt;remove&lt;/em&gt; entries from this list. If you do, users using unmentioned algorithms won&amp;rsquo;t be able to upgrade. Hashed passwords will be updated when increasing (or decreasing) the number of PBKDF2 iterations or bcrypt rounds.</source>
          <target state="translated">그러나 Django는 &lt;a href=&quot;../../ref/settings#std:setting-PASSWORD_HASHERS&quot;&gt; &lt;code&gt;PASSWORD_HASHERS&lt;/code&gt; 에&lt;/a&gt; 언급 된 알고리즘을 사용하는 비밀번호 만 업그레이드 할 수 있으므로 새 시스템으로 업그레이드 할 때이 목록에서 항목 을 &lt;em&gt;제거&lt;/em&gt; 하지 않아야 합니다. 그렇게하면 언급되지 않은 알고리즘을 사용하는 사용자는 업그레이드 할 수 없습니다. 해시 된 비밀번호는 PBKDF2 반복 또는 bcrypt 라운드 수를 늘리거나 줄일 때 업데이트됩니다.</target>
        </trans-unit>
        <trans-unit id="fee2b1cd4765dc45441956cd26d5a725bff1a79c" translate="yes" xml:space="preserve">
          <source>However, Django provides ways to write custom &lt;a href=&quot;#file-storage&quot;&gt;file storage systems&lt;/a&gt; that allow you to completely customize where and how Django stores files. The second half of this document describes how these storage systems work.</source>
          <target state="translated">그러나 Django는 Django가 &lt;a href=&quot;#file-storage&quot;&gt;파일을 저장&lt;/a&gt; 하는 위치와 방법을 완전히 사용자 지정할 수있는 사용자 지정 파일 스토리지 시스템 을 작성하는 방법을 제공 합니다. 이 문서의 후반부에서는 이러한 스토리지 시스템의 작동 방식에 대해 설명합니다.</target>
        </trans-unit>
        <trans-unit id="8eb7e9563d786a695961474efff12ea48136b44e" translate="yes" xml:space="preserve">
          <source>However, a big part of the time taken to run a Django &lt;code&gt;TestCase&lt;/code&gt; is consumed by the call to &lt;code&gt;flush&lt;/code&gt; that ensures that you have a clean database at the start of each test run. If you have multiple databases, multiple flushes are required (one for each database), which can be a time consuming activity &amp;ndash; especially if your tests don&amp;rsquo;t need to test multi-database activity.</source>
          <target state="translated">그러나 Django &lt;code&gt;TestCase&lt;/code&gt; 를 실행하는 데 소요되는 시간 의 대부분은 각 테스트 실행이 시작될 때 데이터베이스를 정리할 수 있도록 &lt;code&gt;flush&lt;/code&gt; 호출에 의해 소비됩니다 . 데이터베이스가 여러 개인 경우 여러 데이터베이스를 플러시해야합니다 (각 데이터베이스마다 하나씩). 특히 테스트에서 다중 데이터베이스 활동을 테스트 할 필요가없는 경우 시간이 많이 걸리는 작업 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1e4fa7259e12f87e861c3168d81edd38bb151356" translate="yes" xml:space="preserve">
          <source>However, depending on your requirements, you may choose a different algorithm, or even use a custom algorithm to match your specific security situation. Again, most users shouldn&amp;rsquo;t need to do this &amp;ndash; if you&amp;rsquo;re not sure, you probably don&amp;rsquo;t. If you do, please read on:</source>
          <target state="translated">그러나 요구 사항에 따라 다른 알고리즘을 선택하거나 특정 보안 상황에 맞게 사용자 지정 알고리즘을 사용할 수도 있습니다. 다시 말하지만, 대부분의 사용자는이 작업을 수행 할 필요가 없습니다. 확실하지 않은 경우에는 그렇지 않습니다. 그렇다면 다음을 읽으십시오.</target>
        </trans-unit>
        <trans-unit id="9fac3d9102b0dac6aef0721b096d54bbdccf3e96" translate="yes" xml:space="preserve">
          <source>However, here it gets slightly complicated. The objects returned by the &lt;code&gt;deserialize&lt;/code&gt; iterator &lt;em&gt;aren&amp;rsquo;t&lt;/em&gt; regular Django objects. Instead, they are special &lt;code&gt;DeserializedObject&lt;/code&gt; instances that wrap a created &amp;ndash; but unsaved &amp;ndash; object and any associated relationship data.</source>
          <target state="translated">그러나 여기에서는 약간 복잡해집니다. &lt;code&gt;deserialize&lt;/code&gt; 반복자 &lt;em&gt;가&lt;/em&gt; 리턴 한 오브젝트는 일반 Django 오브젝트 &lt;em&gt;가 아닙니다&lt;/em&gt; . 대신, 생성되었지만 저장되지 않은 개체와 관련 관계 데이터를 래핑하는 특수 &lt;code&gt;DeserializedObject&lt;/code&gt; 인스턴스입니다.</target>
        </trans-unit>
        <trans-unit id="c081ae39f8041417e994469fcd2bf0623ae3ac98" translate="yes" xml:space="preserve">
          <source>However, if &lt;code&gt;p&lt;/code&gt; in the above example was &lt;em&gt;not&lt;/em&gt; a &lt;code&gt;Restaurant&lt;/code&gt; (it had been created directly as a &lt;code&gt;Place&lt;/code&gt; object or was the parent of some other class), referring to &lt;code&gt;p.restaurant&lt;/code&gt; would raise a &lt;code&gt;Restaurant.DoesNotExist&lt;/code&gt; exception.</source>
          <target state="translated">그러나 위의 예에서 &lt;code&gt;p&lt;/code&gt; 가 &lt;code&gt;Restaurant&lt;/code&gt; 이 &lt;em&gt;아닌&lt;/em&gt; 경우 ( &lt;code&gt;Place&lt;/code&gt; 오브젝트 로 직접 작성 되었거나 다른 클래스의 부모 인 경우) &lt;code&gt;p.restaurant&lt;/code&gt; 를 참조 하면 &lt;code&gt;Restaurant.DoesNotExist&lt;/code&gt; 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="2344053661dea4c49a4bf5f3fa14735765590c54" translate="yes" xml:space="preserve">
          <source>However, if an element of &lt;code&gt;list_display&lt;/code&gt; represents a certain database field, you can indicate this fact by setting the &lt;code&gt;admin_order_field&lt;/code&gt; attribute of the item.</source>
          <target state="translated">그러나 &lt;code&gt;list_display&lt;/code&gt; 의 요소가 특정 데이터베이스 필드를 나타내는 경우 항목 의 &lt;code&gt;admin_order_field&lt;/code&gt; 속성을 설정하여이 사실을 나타낼 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="41eb48668d3b5ceb1113bcdd82344815a9a6c016" translate="yes" xml:space="preserve">
          <source>However, if an uploaded file is too large, Django will write the uploaded file to a temporary file stored in your system&amp;rsquo;s temporary directory. On a Unix-like platform this means you can expect Django to generate a file called something like &lt;code&gt;/tmp/tmpzfp6I6.upload&lt;/code&gt;. If an upload is large enough, you can watch this file grow in size as Django streams the data onto disk.</source>
          <target state="translated">그러나 업로드 된 파일이 너무 크면 Django는 업로드 된 파일을 시스템의 임시 디렉토리에 저장된 임시 파일에 기록합니다. 유닉스 계열 플랫폼에서 이것은 장고가 &lt;code&gt;/tmp/tmpzfp6I6.upload&lt;/code&gt; 와 같은 파일을 생성 할 것으로 예상 할 수 있음을 의미합니다 . 업로드가 충분히 크면 Django가 데이터를 디스크에 스트리밍 할 때이 파일의 크기가 커지는 것을 볼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a0fbd7284b4e1524d1854eb5de380f1d3cf243f6" translate="yes" xml:space="preserve">
          <source>However, if the &lt;code&gt;annotate()&lt;/code&gt; clause precedes the &lt;code&gt;values()&lt;/code&gt; clause, the annotations will be generated over the entire query set. In this case, the &lt;code&gt;values()&lt;/code&gt; clause only constrains the fields that are generated on output.</source>
          <target state="translated">그러나 &lt;code&gt;annotate()&lt;/code&gt; 절이 &lt;code&gt;values()&lt;/code&gt; () 절 앞에 오면 주석이 전체 쿼리 세트에 대해 생성됩니다. 이 경우 &lt;code&gt;values()&lt;/code&gt; 절은 출력시 생성되는 필드 만 제한합니다.</target>
        </trans-unit>
        <trans-unit id="6578d295eb15a87e1a1078a730cb3b542371e4d0" translate="yes" xml:space="preserve">
          <source>However, if the entire queryset has already been evaluated, the cache will be checked instead:</source>
          <target state="translated">그러나 전체 쿼리 세트가 이미 평가 된 경우 캐시가 대신 검사됩니다.</target>
        </trans-unit>
        <trans-unit id="42ab22e0bac3843886f0c1daf3e0597991c18711" translate="yes" xml:space="preserve">
          <source>However, if the feed format is a spin-off of RSS or Atom (i.e. &lt;a href=&quot;http://georss.org/&quot;&gt;GeoRSS&lt;/a&gt;, Apple&amp;rsquo;s &lt;a href=&quot;https://www.apple.com/itunes/podcasts/specs.html&quot;&gt;iTunes podcast format&lt;/a&gt;, etc.), you&amp;rsquo;ve got a better choice. These types of feeds typically add extra elements and/or attributes to the underlying format, and there are a set of methods that &lt;code&gt;SyndicationFeed&lt;/code&gt; calls to get these extra attributes. Thus, you can subclass the appropriate feed generator class (&lt;code&gt;Atom1Feed&lt;/code&gt; or &lt;code&gt;Rss201rev2Feed&lt;/code&gt;) and extend these callbacks. They are:</source>
          <target state="translated">그러나 피드 형식이 RSS 또는 Atom (예 : &lt;a href=&quot;http://georss.org/&quot;&gt;GeoRSS&lt;/a&gt; , Apple의 &lt;a href=&quot;https://www.apple.com/itunes/podcasts/specs.html&quot;&gt;iTunes podcast 형식&lt;/a&gt; 등) 인 경우 더 나은 선택이 있습니다. 이러한 유형의 피드는 일반적으로 기본 요소에 추가 요소 및 / 또는 속성을 추가 하며 &lt;code&gt;SyndicationFeed&lt;/code&gt; 가 이러한 추가 속성을 얻기 위해 호출하는 메소드 세트가 있습니다 . 따라서 적절한 피드 생성기 클래스 ( &lt;code&gt;Atom1Feed&lt;/code&gt; 또는 &lt;code&gt;Rss201rev2Feed&lt;/code&gt; )를 서브 클래 싱하고 이러한 콜백을 확장 할 수 있습니다. 그들은:</target>
        </trans-unit>
        <trans-unit id="a498b0269f9b28570de87c0de9c651cc95df7a39" translate="yes" xml:space="preserve">
          <source>However, if the primary key of &lt;code&gt;p&lt;/code&gt; is already in use on the &lt;code&gt;second&lt;/code&gt; database, the existing object in the &lt;code&gt;second&lt;/code&gt; database will be overridden when &lt;code&gt;p&lt;/code&gt; is saved.</source>
          <target state="translated">그러나 &lt;code&gt;p&lt;/code&gt; 의 기본 키가 &lt;code&gt;second&lt;/code&gt; 데이터베이스 에서 이미 사용중인 경우 &lt;code&gt;p&lt;/code&gt; 를 저장 하면 &lt;code&gt;second&lt;/code&gt; 데이터베이스 의 기존 객체 가 재정의됩니다 .</target>
        </trans-unit>
        <trans-unit id="0f8b6e26d41ac062816981cbdb05f3e271c08d87" translate="yes" xml:space="preserve">
          <source>However, if we add natural key handling to Person, the fixture becomes much more humane. To add natural key handling, you define a default Manager for Person with a &lt;code&gt;get_by_natural_key()&lt;/code&gt; method. In the case of a Person, a good natural key might be the pair of first and last name:</source>
          <target state="translated">그러나 Person에 자연스러운 키 처리를 추가하면 조명기가 훨씬 더 인간적이됩니다. 자연 키 처리를 추가하려면 &lt;code&gt;get_by_natural_key()&lt;/code&gt; 메소드 를 사용하여 기본 Manager for Person을 정의하십시오 . 개인의 경우 좋은 자연 키는 성과 이름의 쌍일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4eb21e18a9f005242b43b8b964308b3ae898644d" translate="yes" xml:space="preserve">
          <source>However, if you have a model that uses &lt;a href=&quot;db/models#multi-table-inheritance&quot;&gt;multi-table inheritance&lt;/a&gt;, you also need to serialize all of the base classes for the model. This is because only the fields that are locally defined on the model will be serialized. For example, consider the following models:</source>
          <target state="translated">그러나 &lt;a href=&quot;db/models#multi-table-inheritance&quot;&gt;다중 테이블 상속&lt;/a&gt; 을 사용하는 모델이있는 경우 모델의 모든 기본 클래스를 직렬화해야합니다. 모델에 로컬로 정의 된 필드 만 직렬화되기 때문입니다. 예를 들어 다음 모델을 고려하십시오.</target>
        </trans-unit>
        <trans-unit id="96cd9777ad909b92b73d8ba9adcf21e6feb2539e" translate="yes" xml:space="preserve">
          <source>However, if you use cache decorators on individual views, the CSRF middleware will not yet have been able to set the Vary header or the CSRF cookie, and the response will be cached without either one. In this case, on any views that will require a CSRF token to be inserted you should use the &lt;a href=&quot;#django.views.decorators.csrf.csrf_protect&quot;&gt;&lt;code&gt;django.views.decorators.csrf.csrf_protect()&lt;/code&gt;&lt;/a&gt; decorator first:</source>
          <target state="translated">그러나 개별보기에서 캐시 데코레이터를 사용하는 경우 CSRF 미들웨어는 아직 Vary 헤더 또는 CSRF 쿠키를 설정할 수 없으며 응답은 하나없이 캐시됩니다. 이 경우 CSRF 토큰을 삽입해야하는 모든 뷰에서 &lt;a href=&quot;#django.views.decorators.csrf.csrf_protect&quot;&gt; &lt;code&gt;django.views.decorators.csrf.csrf_protect()&lt;/code&gt; &lt;/a&gt; 데코레이터를 먼저 사용해야합니다 .</target>
        </trans-unit>
        <trans-unit id="2789f39b8e2c7846604c30d7ad18b293d2ccdb5b" translate="yes" xml:space="preserve">
          <source>However, if you want to use a different widget for a field, you can use the &lt;a href=&quot;fields#django.forms.Field.widget&quot;&gt;&lt;code&gt;widget&lt;/code&gt;&lt;/a&gt; argument on the field definition. For example:</source>
          <target state="translated">그러나 필드에 다른 위젯을 사용하려는 경우 필드 정의 에서 &lt;a href=&quot;fields#django.forms.Field.widget&quot;&gt; &lt;code&gt;widget&lt;/code&gt; &lt;/a&gt; 인수를 사용할 수 있습니다 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="ca0193672aea0bbf1dc1e95a90a928b931d3a8af" translate="yes" xml:space="preserve">
          <source>However, if you&amp;rsquo;re using SQLite or MySQL with MyISAM tables, there is no enforced referential integrity; as a result, you may be able to &amp;lsquo;fake&amp;rsquo; cross database foreign keys. However, this configuration is not officially supported by Django.</source>
          <target state="translated">그러나 MyISAM 테이블과 함께 SQLite 또는 MySQL을 사용하는 경우 강제적 인 참조 무결성이 없습니다. 결과적으로 데이터베이스 외부 키를 '가짜'수 있습니다. 그러나이 구성은 Django에서 공식적으로 지원하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="27aa3c10d7ffcec8e1fa56d52af589198f2988d2" translate="yes" xml:space="preserve">
          <source>However, if you&amp;rsquo;re using a decorator, the same opportunities do not exist. Any behavior defined in a decorator is handled immediately.</source>
          <target state="translated">그러나 데코레이터를 사용하는 경우 동일한 기회가 존재하지 않습니다. 데코레이터에 정의 된 모든 동작은 즉시 처리됩니다.</target>
        </trans-unit>
        <trans-unit id="2319f17aafcae6e92434d5e3bae08aafd1a79a99" translate="yes" xml:space="preserve">
          <source>However, it can sometimes be beneficial to allow decorators or middleware to modify a response &lt;em&gt;after&lt;/em&gt; it has been constructed by the view. For example, you may want to change the template that is used, or put additional data into the context.</source>
          <target state="translated">그러나 뷰에 의해 구성된 &lt;em&gt;후&lt;/em&gt; 데코레이터 또는 미들웨어가 응답을 수정하도록하는 것이 때때로 유리할 수 있습니다. 예를 들어, 사용되는 템플릿을 변경하거나 컨텍스트에 추가 데이터를 넣을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b4fe8063e2e1e12bacb424e98275f1830bf5cfe7" translate="yes" xml:space="preserve">
          <source>However, it may not always be appropriate to use localized values &amp;ndash; for example, if you&amp;rsquo;re outputting JavaScript or XML that is designed to be machine-readable, you will always want unlocalized values. You may also want to use localization in selected templates, rather than using localization everywhere.</source>
          <target state="translated">그러나 지역화 된 값을 사용하는 것이 항상 적절하지는 않습니다. 예를 들어 컴퓨터에서 읽을 수 있도록 설계된 JavaScript 또는 XML을 출력하는 경우 항상 지역화되지 않은 값을 원할 것입니다. 모든 곳에서 현지화를 사용하지 않고 선택한 템플릿에서 현지화를 사용할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="2c21caaedc7a94be4767a92a207cc019af5c1e0f" translate="yes" xml:space="preserve">
          <source>However, it will almost always be faster to do this work at lower rather than higher levels. At higher levels the system has to deal with objects through multiple levels of abstraction and layers of machinery.</source>
          <target state="translated">그러나이 작업을 높은 수준보다는 낮은 수준에서 수행하는 것이 거의 항상 더 빠릅니다. 높은 수준에서 시스템은 여러 수준의 추상화와 기계 계층을 통해 객체를 처리해야합니다.</target>
        </trans-unit>
        <trans-unit id="1b669d8e47b653ff4d42be16c51c4790d279903e" translate="yes" xml:space="preserve">
          <source>However, pluralization is not this simple in all languages. If the language does not support pluralization, an empty value is provided.</source>
          <target state="translated">그러나 모든 언어에서 복수형이 이처럼 간단한 것은 아닙니다. 언어가 복수형을 지원하지 않으면 빈 값이 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="9f3bfc1533fbc7360133c35d3f551767f73e5bf9" translate="yes" xml:space="preserve">
          <source>However, running with &lt;a href=&quot;../ref/settings#std:setting-DEBUG&quot;&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;/a&gt; set to &lt;code&gt;False&lt;/code&gt; means you&amp;rsquo;ll never see errors generated by your site &amp;ndash; everyone will instead see your public error pages. You need to keep track of errors that occur in deployed sites, so Django can be configured to create reports with details about those errors.</source>
          <target state="translated">그러나 &lt;a href=&quot;../ref/settings#std:setting-DEBUG&quot;&gt; &lt;code&gt;DEBUG&lt;/code&gt; &lt;/a&gt; 를 &lt;code&gt;False&lt;/code&gt; 로 설정하여 실행 하면 사이트에서 생성 된 오류가 표시되지 않으며 모든 사람이 공개 오류 페이지를 보게됩니다. 배포 된 사이트에서 발생하는 오류를 추적해야하므로 이러한 오류에 대한 세부 정보가 포함 된 보고서를 작성하도록 Django를 구성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a75d2a7d5098c093e2c9517e3afbe9ca4b271de9" translate="yes" xml:space="preserve">
          <source>However, some databases are more capable than others when it comes to schema migrations; some of the caveats are covered below.</source>
          <target state="translated">그러나 스키마 마이그레이션과 관련하여 일부 데이터베이스는 다른 데이터베이스보다 성능이 뛰어납니다. 주의 사항 중 일부는 아래에 설명되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="e47de287b75e3011e426c42a0e9ee087f660cd19" translate="yes" xml:space="preserve">
          <source>However, sometimes certain types of information may be too sensitive and thus may not be appropriate to be kept track of, for example a user&amp;rsquo;s password or credit card number. So in addition to filtering out settings that appear to be sensitive as described in the &lt;a href=&quot;../ref/settings#std:setting-DEBUG&quot;&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;/a&gt; documentation, Django offers a set of function decorators to help you control which information should be filtered out of error reports in a production environment (that is, where &lt;a href=&quot;../ref/settings#std:setting-DEBUG&quot;&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;/a&gt; is set to &lt;code&gt;False&lt;/code&gt;): &lt;a href=&quot;#django.views.decorators.debug.sensitive_variables&quot;&gt;&lt;code&gt;sensitive_variables()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#django.views.decorators.debug.sensitive_post_parameters&quot;&gt;&lt;code&gt;sensitive_post_parameters()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">그러나 때로는 특정 유형의 정보가 너무 민감하여 예를 들어 사용자의 비밀번호 또는 신용 카드 번호를 추적하기에 적합하지 않을 수 있습니다. 따라서 Django는 &lt;a href=&quot;../ref/settings#std:setting-DEBUG&quot;&gt; &lt;code&gt;DEBUG&lt;/code&gt; &lt;/a&gt; 문서에 설명 된 것처럼 민감한 것처럼 보이는 설정을 필터링하는 것 외에도 프로덕션 환경 (즉, &lt;a href=&quot;../ref/settings#std:setting-DEBUG&quot;&gt; &lt;code&gt;DEBUG&lt;/code&gt; &lt;/a&gt; 가 있는 곳)에서 오류 보고서에서 필터링 할 정보를 제어하는 ​​데 도움이되는 함수 데코레이터 세트를 제공합니다. 으로 설정 &lt;code&gt;False&lt;/code&gt; ) : &lt;a href=&quot;#django.views.decorators.debug.sensitive_variables&quot;&gt; &lt;code&gt;sensitive_variables()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#django.views.decorators.debug.sensitive_post_parameters&quot;&gt; &lt;code&gt;sensitive_post_parameters()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="e4b608e0433096c6cd9a3edf695ce8e00e708ffc" translate="yes" xml:space="preserve">
          <source>However, the &lt;code&gt;self.my_view&lt;/code&gt; function registered above suffers from two problems:</source>
          <target state="translated">그러나 위에서 등록한 &lt;code&gt;self.my_view&lt;/code&gt; 함수에는 두 가지 문제점이 있습니다.</target>
        </trans-unit>
        <trans-unit id="fd1a9bdffd29bc1f50c4d99a898040993ccd7d60" translate="yes" xml:space="preserve">
          <source>However, the indexing and slicing are not performed at the database level. If you have a large number of &lt;code&gt;Person&lt;/code&gt; objects in your database, it is more efficient to limit the query at the SQL level:</source>
          <target state="translated">그러나 인덱싱 및 슬라이싱은 데이터베이스 수준에서 수행되지 않습니다. 데이터베이스에 많은 &lt;code&gt;Person&lt;/code&gt; 오브젝트가있는 경우 SQL 레벨에서 조회를 제한하는 것이 더 효율적입니다.</target>
        </trans-unit>
        <trans-unit id="e7a99e7174b52626783c113021c1e91d1c0c4176" translate="yes" xml:space="preserve">
          <source>However, the result will be slightly different if you use a &lt;code&gt;values()&lt;/code&gt; clause:</source>
          <target state="translated">그러나 &lt;code&gt;values()&lt;/code&gt; 절 을 사용하면 결과가 약간 다릅니다 .</target>
        </trans-unit>
        <trans-unit id="c00b388280770d80bee839b88012bad935795d5a" translate="yes" xml:space="preserve">
          <source>However, the task of writing tests is a lot more fulfilling than spending hours testing your application manually or trying to identify the cause of a newly-introduced problem.</source>
          <target state="translated">그러나 테스트 작성 작업은 수동으로 응용 프로그램을 테스트하거나 새로 도입 된 문제의 원인을 식별하는 데 시간을 소비하는 것보다 훨씬 더 만족 스럽습니다.</target>
        </trans-unit>
        <trans-unit id="2e4d9a12485243a42b040d170ce31a6c9a19eb8a" translate="yes" xml:space="preserve">
          <source>However, these conversions may fail around DST transitions, which means you aren&amp;rsquo;t getting the full benefits of time zone support yet. Also, you&amp;rsquo;re likely to run into a few problems because it&amp;rsquo;s impossible to compare a naive datetime with an aware datetime. Since Django now gives you aware datetimes, you&amp;rsquo;ll get exceptions wherever you compare a datetime that comes from a model or a form with a naive datetime that you&amp;rsquo;ve created in your code.</source>
          <target state="translated">그러나 이러한 변환은 DST 전환으로 인해 실패 할 수 있습니다. 즉, 표준 시간대 지원의 모든 이점을 아직 얻지 못하고 있습니다. 또한 순진한 날짜 시간과 인식되는 날짜 시간을 비교하는 것이 불가능하기 때문에 몇 가지 문제가 발생할 수 있습니다. Django는 이제 날짜 시간을 인식하므로 모델 또는 양식에서 가져온 날짜 시간과 코드에서 생성 한 순진 날짜 시간을 비교할 때마다 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="954cc1f0e6626e70ed6d7f67879580da584dd1bb" translate="yes" xml:space="preserve">
          <source>However, they are not magic solutions to performance problems, and they&amp;rsquo;re unlikely to bring better than marginal gains to sites that don&amp;rsquo;t already do the more basic things the right way.</source>
          <target state="translated">그러나 성능 문제에 대한 마법의 해결책은 아니며 이미 더 기본적인 것을 제대로 수행하지 않는 사이트에 대해서는 한계 이상의 이익을 얻지 못할 것입니다.</target>
        </trans-unit>
        <trans-unit id="cd4a35aff4244b3ade1041850c6b940cdf2cb682" translate="yes" xml:space="preserve">
          <source>However, this may not always be enough. If your natural key refers to another object (by using a foreign key or natural key to another object as part of a natural key), then you need to be able to ensure that the objects on which a natural key depends occur in the serialized data before the natural key requires them.</source>
          <target state="translated">그러나 이것이 항상 충분하지는 않습니다. 자연 키가 다른 개체를 참조하는 경우 (자연 키의 일부로 외래 키 또는 다른 개체에 대한 자연 키를 사용하여) 자연 키가 종속 된 개체가 직렬화 된 데이터에서 발생하는지 확인할 수 있어야합니다. 자연적인 열쇠가 그들을 요구하기 전에.</target>
        </trans-unit>
        <trans-unit id="e20cedbaff2d50e62555f245162f273796811893" translate="yes" xml:space="preserve">
          <source>However, unlike &lt;code&gt;F()&lt;/code&gt; objects in filter and exclude clauses, you can&amp;rsquo;t introduce joins when you use &lt;code&gt;F()&lt;/code&gt; objects in an update &amp;ndash; you can only reference fields local to the model being updated. If you attempt to introduce a join with an &lt;code&gt;F()&lt;/code&gt; object, a &lt;code&gt;FieldError&lt;/code&gt; will be raised:</source>
          <target state="translated">그러나 filter 및 exclude 절의 &lt;code&gt;F()&lt;/code&gt; 객체 와 달리 업데이트에서 &lt;code&gt;F()&lt;/code&gt; 객체 를 사용할 때는 조인을 도입 할 수 없습니다 . 업데이트중인 모델의 로컬 필드 만 참조 할 수 있습니다. &lt;code&gt;F()&lt;/code&gt; 객체 와의 조인을 시도 하면 &lt;code&gt;FieldError&lt;/code&gt; 가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="57c558202ab0e7f96381e51def5567b27e8e2ed7" translate="yes" xml:space="preserve">
          <source>However, unlike the behavior when using &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.filter&quot;&gt;&lt;code&gt;filter()&lt;/code&gt;&lt;/a&gt;, this will not limit blogs based on entries that satisfy both conditions. In order to do that, i.e. to select all blogs that do not contain entries published with &lt;em&gt;&amp;ldquo;Lennon&amp;rdquo;&lt;/em&gt; that were published in 2008, you need to make two queries:</source>
          <target state="translated">그러나 &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.filter&quot;&gt; &lt;code&gt;filter()&lt;/code&gt; &lt;/a&gt; 사용할 때의 동작과 달리 두 조건을 모두 만족하는 항목을 기반으로 블로그를 제한하지는 않습니다. 이를 위해, 즉 2008 년에 &lt;em&gt;&quot;Lennon&quot;으로&lt;/em&gt; 게시 된 항목이 포함되지 않은 모든 블로그를 선택하려면 두 가지 쿼리를 작성해야합니다.</target>
        </trans-unit>
        <trans-unit id="cffd2486ef5b313d7c0ee7a40894b44641c0e923" translate="yes" xml:space="preserve">
          <source>However, we still want to be able to edit that information inline. Fortunately, we can do this with inline admin models. Suppose we have the following models:</source>
          <target state="translated">그러나 여전히 해당 정보를 인라인으로 편집 할 수 있기를 원합니다. 다행히도 인라인 관리자 모델로이 작업을 수행 할 수 있습니다. 다음 모델이 있다고 가정하십시오.</target>
        </trans-unit>
        <trans-unit id="4d2345457eacc290db828ae02019e1d391f9b0f2" translate="yes" xml:space="preserve">
          <source>However, when &lt;code&gt;response.content&lt;/code&gt; is explicitly assigned, the change is always applied. If you want to force the content to be re-rendered, you can re-evaluate the rendered content, and assign the content of the response manually:</source>
          <target state="translated">그러나 &lt;code&gt;response.content&lt;/code&gt; 가 명시 적으로 지정되면 변경 사항이 항상 적용됩니다. 컨텐츠를 다시 렌더링하려면 렌더링 된 컨텐츠를 다시 평가하고 응답 컨텐츠를 수동으로 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="563ee1f5cb30a896660eb595ed931c48292c849a" translate="yes" xml:space="preserve">
          <source>However, you are free to add formatting as desired.</source>
          <target state="translated">그러나 원하는대로 서식을 자유롭게 추가 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bb1050a497060724f2e4bb1267868c2c5ca9662d" translate="yes" xml:space="preserve">
          <source>However: most performance problems in well-written Django sites aren&amp;rsquo;t at the Python execution level, but rather in inefficient database querying, caching, and templates. If you&amp;rsquo;re relying on poorly-written Python code, your performance problems are unlikely to be solved by having it execute faster.</source>
          <target state="translated">그러나 잘 작성된 Django 사이트에서 대부분의 성능 문제는 Python 실행 수준이 아니라 비효율적 인 데이터베이스 쿼리, 캐싱 및 템플릿에서 발생합니다. 잘못 작성된 Python 코드에 의존하는 경우 성능 문제를 더 빨리 실행하여 성능 문제를 해결할 가능성은 거의 없습니다.</target>
        </trans-unit>
        <trans-unit id="fbe171dafe9c16da54051f873de0dd176076dec0" translate="yes" xml:space="preserve">
          <source>Http Exceptions</source>
          <target state="translated">HTTP 예외</target>
        </trans-unit>
        <trans-unit id="bfae5a87387f6ccc29bb86e5cf99488568c3f161" translate="yes" xml:space="preserve">
          <source>Http exceptions may be imported from &lt;code&gt;django.http&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;django.http&lt;/code&gt; 에서 HTTP 예외를 가져올 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ba3f61701a1352c8a25e806229e289b816663a55" translate="yes" xml:space="preserve">
          <source>Human-readable name for the application, e.g. &amp;ldquo;Administration&amp;rdquo;.</source>
          <target state="translated">응용 프로그램의 사람이 읽을 수있는 이름 (예 : &quot;관리&quot;)</target>
        </trans-unit>
        <trans-unit id="1670a10ac92535b3c3aa89fbe1fbd927e9f3218c" translate="yes" xml:space="preserve">
          <source>I/O Objects</source>
          <target state="translated">I / O 객체</target>
        </trans-unit>
        <trans-unit id="03f41aebc1232a365cd0a70260db5df54cdcea1b" translate="yes" xml:space="preserve">
          <source>IBM DB2</source>
          <target state="translated">IBM DB2</target>
        </trans-unit>
        <trans-unit id="89f89c02cf47e091e726a4e07b88af0966806897" translate="yes" xml:space="preserve">
          <source>ID</source>
          <target state="translated">ID</target>
        </trans-unit>
        <trans-unit id="e0909302700b3b64d7f8176c0468bec2141f5da0" translate="yes" xml:space="preserve">
          <source>INSERT &amp;hellip; RETURNING INTO</source>
          <target state="translated">INSERT&amp;hellip; (으)로 돌아 가기</target>
        </trans-unit>
        <trans-unit id="8e0e55878c270900ad89521f5554b562f91414b5" translate="yes" xml:space="preserve">
          <source>IP-based geolocation library</source>
          <target state="translated">IP 기반 지리적 위치 라이브러리</target>
        </trans-unit>
        <trans-unit id="c9d47b90bea2a79c48f8bc0c4b05f5ee7f8119e8" translate="yes" xml:space="preserve">
          <source>IPython:</source>
          <target state="translated">IPython:</target>
        </trans-unit>
        <trans-unit id="ff8948a3034b01513c9fad7bf57cab26fc2d374d" translate="yes" xml:space="preserve">
          <source>ISO 8601 format. (Note: unlike others formatters, such as &amp;ldquo;Z&amp;rdquo;, &amp;ldquo;O&amp;rdquo; or &amp;ldquo;r&amp;rdquo;, the &amp;ldquo;c&amp;rdquo; formatter will not add timezone offset if value is a naive datetime (see &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.tzinfo&quot;&gt;&lt;code&gt;datetime.tzinfo&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">ISO 8601 형식. 참고 : &quot;Z&quot;, &quot;O&quot;또는 &quot;r&quot;과 같은 다른 포맷터와 달리 값이 순진한 날짜 시간 인 경우 &quot;c&quot;포맷터는 시간대 오프셋을 추가하지 않습니다 ( &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.tzinfo&quot;&gt; &lt;code&gt;datetime.tzinfo&lt;/code&gt; &lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="ab28365811365736a9b9bbd91ab0f2453872ba5a" translate="yes" xml:space="preserve">
          <source>ISO-8601 week number of year, with weeks starting on Monday.</source>
          <target state="translated">월요일부터 시작되는 주별 ISO-8601 주 수입니다.</target>
        </trans-unit>
        <trans-unit id="046d47251e666624c71c74ab2e6343cf76c6ffbf" translate="yes" xml:space="preserve">
          <source>ISO-8601 week-numbering year, corresponding to the ISO-8601 week number (W) which uses leap weeks. See Y for the more common year format.</source>
          <target state="translated">윤초를 사용하는 ISO-8601 주 번호 (W)에 해당하는 ISO-8601 주 번호 연도. 보다 일반적인 연도 형식은 Y를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="ad3e1f0404afde783b8e43b5e5054c4f169eed2b" translate="yes" xml:space="preserve">
          <source>Ideas for more tests</source>
          <target state="translated">더 많은 테스트를위한 아이디어</target>
        </trans-unit>
        <trans-unit id="06b6ace8ca3f18249e8ba4ea9090c0f34564ce1c" translate="yes" xml:space="preserve">
          <source>Identifier</source>
          <target state="translated">Identifier</target>
        </trans-unit>
        <trans-unit id="843c1f75bd65a80cb5c2fdec7a4a54902f306b86" translate="yes" xml:space="preserve">
          <source>Identifies the configuration as being in &amp;lsquo;dictConfig version 1&amp;rsquo; format. At present, this is the only dictConfig format version.</source>
          <target state="translated">구성이 'dictConfig 버전 1'형식임을 식별합니다. 현재 이것은 유일한 dictConfig 형식 버전입니다.</target>
        </trans-unit>
        <trans-unit id="576390ace0227af3d18d31582357c5b35faa2fd7" translate="yes" xml:space="preserve">
          <source>If (and only if) value is &lt;code&gt;None&lt;/code&gt;, uses the given default. Otherwise, uses the value.</source>
          <target state="translated">value가 &lt;code&gt;None&lt;/code&gt; 인 경우 지정된 기본값을 사용합니다. 그렇지 않으면 값을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="bf8ac1c479377e8adc8f407b952b011265a5a70a" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;#django.contrib.sitemaps.Sitemap.location&quot;&gt;&lt;code&gt;location&lt;/code&gt;&lt;/a&gt; isn&amp;rsquo;t provided, the framework will call the &lt;code&gt;get_absolute_url()&lt;/code&gt; method on each object as returned by &lt;a href=&quot;#django.contrib.sitemaps.Sitemap.items&quot;&gt;&lt;code&gt;items()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">경우 &lt;a href=&quot;#django.contrib.sitemaps.Sitemap.location&quot;&gt; &lt;code&gt;location&lt;/code&gt; &lt;/a&gt; 제공되지 않고, 프레임 워크는 호출 &lt;code&gt;get_absolute_url()&lt;/code&gt; 에 의해 리턴 된 각 개체에 대한 방법을 &lt;a href=&quot;#django.contrib.sitemaps.Sitemap.items&quot;&gt; &lt;code&gt;items()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="4b556c7fec42ccdcf771962a8bd01295c1377c73" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;#django.contrib.sites.models.Site&quot;&gt;&lt;code&gt;Site&lt;/code&gt;&lt;/a&gt; plays a key role in your application, consider using the helpful &lt;a href=&quot;#django.contrib.sites.managers.CurrentSiteManager&quot;&gt;&lt;code&gt;CurrentSiteManager&lt;/code&gt;&lt;/a&gt; in your model(s). It&amp;rsquo;s a model &lt;a href=&quot;../../topics/db/managers&quot;&gt;manager&lt;/a&gt; that automatically filters its queries to include only objects associated with the current &lt;a href=&quot;#django.contrib.sites.models.Site&quot;&gt;&lt;code&gt;Site&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">응용 프로그램에서 &lt;a href=&quot;#django.contrib.sites.models.Site&quot;&gt; &lt;code&gt;Site&lt;/code&gt; &lt;/a&gt; 가 중요한 역할을하는 경우 모델에서 유용한 &lt;a href=&quot;#django.contrib.sites.managers.CurrentSiteManager&quot;&gt; &lt;code&gt;CurrentSiteManager&lt;/code&gt; &lt;/a&gt; 를 사용하는 것이 좋습니다 . 현재 &lt;a href=&quot;#django.contrib.sites.models.Site&quot;&gt; &lt;code&gt;Site&lt;/code&gt; &lt;/a&gt; 와 연결된 객체 만 포함하도록 쿼리를 자동으로 필터링 하는 모델 &lt;a href=&quot;../../topics/db/managers&quot;&gt;관리자&lt;/a&gt; 입니다 .</target>
        </trans-unit>
        <trans-unit id="b04805301e02d6cc5edc0bd4cec0b660c5b5b1f8" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;#django.views.generic.base.RedirectView.url&quot;&gt;&lt;code&gt;url&lt;/code&gt;&lt;/a&gt; is not set, &lt;code&gt;get_redirect_url()&lt;/code&gt; tries to reverse the &lt;a href=&quot;#django.views.generic.base.RedirectView.pattern_name&quot;&gt;&lt;code&gt;pattern_name&lt;/code&gt;&lt;/a&gt; using what was captured in the URL (both named and unnamed groups are used).</source>
          <target state="translated">경우 &lt;a href=&quot;#django.views.generic.base.RedirectView.url&quot;&gt; &lt;code&gt;url&lt;/code&gt; &lt;/a&gt; 설정되어 있지 않은, &lt;code&gt;get_redirect_url()&lt;/code&gt; 역방향하려고 &lt;a href=&quot;#django.views.generic.base.RedirectView.pattern_name&quot;&gt; &lt;code&gt;pattern_name&lt;/code&gt; 를&lt;/a&gt; 하는 URL (모두의 이름과 이름이 그룹이 사용된다)에 캡처 된 것을 사용.</target>
        </trans-unit>
        <trans-unit id="a441ed946a92b14760f245476b5f2337f5733bf1" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;#django.views.generic.base.TemplateResponseMixin.template_name&quot;&gt;&lt;code&gt;template_name&lt;/code&gt;&lt;/a&gt; is specified, the default implementation will return a list containing &lt;a href=&quot;#django.views.generic.base.TemplateResponseMixin.template_name&quot;&gt;&lt;code&gt;template_name&lt;/code&gt;&lt;/a&gt; (if it is specified).</source>
          <target state="translated">경우 &lt;a href=&quot;#django.views.generic.base.TemplateResponseMixin.template_name&quot;&gt; &lt;code&gt;template_name&lt;/code&gt; &lt;/a&gt; 지정, 기본 구현은 목록이 포함 된 반환합니다 &lt;a href=&quot;#django.views.generic.base.TemplateResponseMixin.template_name&quot;&gt; &lt;code&gt;template_name&lt;/code&gt; &lt;/a&gt; (가 지정된 경우).</target>
        </trans-unit>
        <trans-unit id="0dab78e3424972f994b4a41eeedb0e58507bc1ec" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;#std:setting-EMAIL_USE_SSL&quot;&gt;&lt;code&gt;EMAIL_USE_SSL&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#std:setting-EMAIL_USE_TLS&quot;&gt;&lt;code&gt;EMAIL_USE_TLS&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;True&lt;/code&gt;, you can optionally specify the path to a PEM-formatted certificate chain file to use for the SSL connection.</source>
          <target state="translated">경우 &lt;a href=&quot;#std:setting-EMAIL_USE_SSL&quot;&gt; &lt;code&gt;EMAIL_USE_SSL&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;#std:setting-EMAIL_USE_TLS&quot;&gt; &lt;code&gt;EMAIL_USE_TLS&lt;/code&gt; 이&lt;/a&gt; 있다 &lt;code&gt;True&lt;/code&gt; , 당신은 선택적으로 SSL 연결에 사용할 PEM 형식의 인증서 체인 파일의 경로를 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e41632ac93e09334dacaf028209efd8f874dffad" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;#std:setting-EMAIL_USE_SSL&quot;&gt;&lt;code&gt;EMAIL_USE_SSL&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#std:setting-EMAIL_USE_TLS&quot;&gt;&lt;code&gt;EMAIL_USE_TLS&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;True&lt;/code&gt;, you can optionally specify the path to a PEM-formatted private key file to use for the SSL connection.</source>
          <target state="translated">경우 &lt;a href=&quot;#std:setting-EMAIL_USE_SSL&quot;&gt; &lt;code&gt;EMAIL_USE_SSL&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;#std:setting-EMAIL_USE_TLS&quot;&gt; &lt;code&gt;EMAIL_USE_TLS&lt;/code&gt; 이&lt;/a&gt; 있다 &lt;code&gt;True&lt;/code&gt; , 당신은 선택적으로 SSL 연결에 사용할 PEM 형식의 개인 키 파일의 경로를 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fca761e106de55e55d1a4f9984fbd1d1dedb5812" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin.get_object&quot;&gt;&lt;code&gt;get_object()&lt;/code&gt;&lt;/a&gt; returns an object, the class of that object will be used.</source>
          <target state="translated">경우 &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin.get_object&quot;&gt; &lt;code&gt;get_object()&lt;/code&gt; &lt;/a&gt; 객체를 반환, 그 객체의 클래스가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="2bcc933a78db34c13e04edfc78d73b3aa0cfda0d" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;../../ref/models/fields#django.db.models.Field.db_tablespace&quot;&gt;&lt;code&gt;db_tablespace&lt;/code&gt;&lt;/a&gt; isn&amp;rsquo;t specified and you didn&amp;rsquo;t set &lt;a href=&quot;../../ref/settings#std:setting-DEFAULT_INDEX_TABLESPACE&quot;&gt;&lt;code&gt;DEFAULT_INDEX_TABLESPACE&lt;/code&gt;&lt;/a&gt;, the index is created in the same tablespace as the tables.</source>
          <target state="translated">경우 &lt;a href=&quot;../../ref/models/fields#django.db.models.Field.db_tablespace&quot;&gt; &lt;code&gt;db_tablespace&lt;/code&gt; 가&lt;/a&gt; 지정되지 않고 사용자가 설정하지 않은 &lt;a href=&quot;../../ref/settings#std:setting-DEFAULT_INDEX_TABLESPACE&quot;&gt; &lt;code&gt;DEFAULT_INDEX_TABLESPACE&lt;/code&gt; 를&lt;/a&gt; , 인덱스는 테이블과 동일한 테이블 스페이스에 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="b734be08a43e058aa1a95c259b8e56f1c154ceee" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;../../ref/settings#std:setting-SESSION_EXPIRE_AT_BROWSER_CLOSE&quot;&gt;&lt;code&gt;SESSION_EXPIRE_AT_BROWSER_CLOSE&lt;/code&gt;&lt;/a&gt; is set to &lt;code&gt;True&lt;/code&gt;, Django will use browser-length cookies &amp;ndash; cookies that expire as soon as the user closes their browser. Use this if you want people to have to log in every time they open a browser.</source>
          <target state="translated">경우 &lt;a href=&quot;../../ref/settings#std:setting-SESSION_EXPIRE_AT_BROWSER_CLOSE&quot;&gt; &lt;code&gt;SESSION_EXPIRE_AT_BROWSER_CLOSE&lt;/code&gt; 가&lt;/a&gt; 설정되어 &lt;code&gt;True&lt;/code&gt; 사용자가 브라우저를 닫 자마자 만료 쿠키 -, 장고 브라우저 길이 쿠키를 사용합니다. 사람들이 브라우저를 열 때마다 로그인해야하는 경우이 옵션을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="302e4e8af81e0f64710dc3d22131d1a4420080dd" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;../ref/models/fields#django.db.models.Field.get_internal_type&quot;&gt;&lt;code&gt;get_internal_type()&lt;/code&gt;&lt;/a&gt; returns a string that is not known to Django for the database backend you are using &amp;ndash; that is, it doesn&amp;rsquo;t appear in &lt;code&gt;django.db.backends.&amp;lt;db_name&amp;gt;.base.DatabaseWrapper.data_types&lt;/code&gt; &amp;ndash; the string will still be used by the serializer, but the default &lt;a href=&quot;../ref/models/fields#django.db.models.Field.db_type&quot;&gt;&lt;code&gt;db_type()&lt;/code&gt;&lt;/a&gt; method will return &lt;code&gt;None&lt;/code&gt;. See the documentation of &lt;a href=&quot;../ref/models/fields#django.db.models.Field.db_type&quot;&gt;&lt;code&gt;db_type()&lt;/code&gt;&lt;/a&gt; for reasons why this might be useful. Putting a descriptive string in as the type of the field for the serializer is a useful idea if you&amp;rsquo;re ever going to be using the serializer output in some other place, outside of Django.</source>
          <target state="translated">&lt;a href=&quot;../ref/models/fields#django.db.models.Field.get_internal_type&quot;&gt; &lt;code&gt;get_internal_type()&lt;/code&gt; &lt;/a&gt; 이 사용중인 데이터베이스 백엔드에 대해 Django에 알려지지 않은 문자열을 리턴하는 경우 , 즉 &lt;code&gt;django.db.backends.&amp;lt;db_name&amp;gt;.base.DatabaseWrapper.data_types&lt;/code&gt; 에 나타나지 않습니다 &amp;ndash; 문자열은 계속 시리얼 라이저가 사용하지만 기본 &lt;a href=&quot;../ref/models/fields#django.db.models.Field.db_type&quot;&gt; &lt;code&gt;db_type()&lt;/code&gt; &lt;/a&gt; 메소드는 &lt;code&gt;None&lt;/code&gt; 을 반환 합니다. 이것이 유용한 이유 는 &lt;a href=&quot;../ref/models/fields#django.db.models.Field.db_type&quot;&gt; &lt;code&gt;db_type()&lt;/code&gt; &lt;/a&gt; 문서를 참조하십시오 . 직렬화 기의 필드 유형으로 설명 문자열을 입력하면 Django 외부의 다른 위치에서 직렬화 기 출력을 사용하려는 경우 유용한 아이디어입니다.</target>
        </trans-unit>
        <trans-unit id="9e0fc6708169160a661ce0c5e2e5e51df935ab4d" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;../ref/settings#std:setting-USE_I18N&quot;&gt;&lt;code&gt;USE_I18N&lt;/code&gt;&lt;/a&gt; is set to &lt;code&gt;True&lt;/code&gt; the per-site middleware cache will &lt;a href=&quot;#i18n-cache-key&quot;&gt;respect the active language&lt;/a&gt;. For the &lt;code&gt;cache&lt;/code&gt; template tag you could use one of the &lt;a href=&quot;i18n/translation#template-translation-vars&quot;&gt;translation-specific variables&lt;/a&gt; available in templates to achieve the same result:</source>
          <target state="translated">&lt;a href=&quot;../ref/settings#std:setting-USE_I18N&quot;&gt; &lt;code&gt;USE_I18N&lt;/code&gt; &lt;/a&gt; 이 &lt;code&gt;True&lt;/code&gt; 로 설정 되면 사이트 별 미들웨어 캐시가 &lt;a href=&quot;#i18n-cache-key&quot;&gt;활성 언어를 존중합니다&lt;/a&gt; . 를 들어 &lt;code&gt;cache&lt;/code&gt; 템플릿 태그 당신이 중 하나를 사용할 수 있습니다 &lt;a href=&quot;i18n/translation#template-translation-vars&quot;&gt;번역 특정 변수&lt;/a&gt; 같은 결과를 달성하기 위해 템플릿을 사용할 수를 :</target>
        </trans-unit>
        <trans-unit id="1dec9c1c2d78ca0739125f223e56a616974c3604" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;../ref/settings#std:setting-USE_I18N&quot;&gt;&lt;code&gt;USE_I18N&lt;/code&gt;&lt;/a&gt; is set to &lt;code&gt;True&lt;/code&gt; then the generated cache key will include the name of the active &lt;a href=&quot;i18n/index#term-language-code&quot;&gt;language&lt;/a&gt; &amp;ndash; see also &lt;a href=&quot;i18n/translation#how-django-discovers-language-preference&quot;&gt;How Django discovers language preference&lt;/a&gt;). This allows you to easily cache multilingual sites without having to create the cache key yourself.</source>
          <target state="translated">경우 &lt;a href=&quot;../ref/settings#std:setting-USE_I18N&quot;&gt; &lt;code&gt;USE_I18N&lt;/code&gt; 가&lt;/a&gt; 설정되어 &lt;code&gt;True&lt;/code&gt; 후 생성 된 캐시 키가 활성의 이름이 포함됩니다 &lt;a href=&quot;i18n/index#term-language-code&quot;&gt;언어&lt;/a&gt; - 또한 참조 &lt;a href=&quot;i18n/translation#how-django-discovers-language-preference&quot;&gt;어떻게 장고 발견하여 언어 환경 설정&lt;/a&gt; ). 따라서 캐시 키를 직접 만들지 않고도 다국어 사이트를 쉽게 캐시 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ba088c9c367fa9bed0d2638a14b58c651b3e8138" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;../settings#std:setting-USE_TZ&quot;&gt;&lt;code&gt;USE_TZ&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;True&lt;/code&gt;, returns an aware &lt;code&gt;datetime&lt;/code&gt;, otherwise returns a naive &lt;code&gt;datetime&lt;/code&gt; in the local timezone.</source>
          <target state="translated">경우 &lt;a href=&quot;../settings#std:setting-USE_TZ&quot;&gt; &lt;code&gt;USE_TZ&lt;/code&gt; 가&lt;/a&gt; 있다 &lt;code&gt;True&lt;/code&gt; , 의식적 반환 &lt;code&gt;datetime&lt;/code&gt; 달리 순진 반환, &lt;code&gt;datetime&lt;/code&gt; 로컬 시간대에 있습니다.</target>
        </trans-unit>
        <trans-unit id="a5717ee542a44db43b337277360e76d5d90d2062" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;fields#django.db.models.Field.db_tablespace&quot;&gt;&lt;code&gt;Field.db_tablespace&lt;/code&gt;&lt;/a&gt; isn&amp;rsquo;t specified (or if the index uses multiple fields), the index is created in tablespace specified in the &lt;a href=&quot;options#django.db.models.Options.db_tablespace&quot;&gt;&lt;code&gt;db_tablespace&lt;/code&gt;&lt;/a&gt; option inside the model&amp;rsquo;s &lt;code&gt;class Meta&lt;/code&gt;. If neither of those tablespaces are set, the index is created in the same tablespace as the table.</source>
          <target state="translated">경우 &lt;a href=&quot;fields#django.db.models.Field.db_tablespace&quot;&gt; &lt;code&gt;Field.db_tablespace&lt;/code&gt; 이&lt;/a&gt; 지정되지 않은 (인덱스가 여러 필드를 사용하는 경우 나), 인덱스가에 지정된 테이블 스페이스에 생성 &lt;a href=&quot;options#django.db.models.Options.db_tablespace&quot;&gt; &lt;code&gt;db_tablespace&lt;/code&gt; 의&lt;/a&gt; 모델의 내부 옵션 &lt;code&gt;class Meta&lt;/code&gt; . 해당 테이블 스페이스 중 어느 것도 설정되지 않은 경우 인덱스는 테이블과 동일한 테이블 스페이스에 작성됩니다.</target>
        </trans-unit>
        <trans-unit id="bbd815722eda15f33dbfb7a5326a66902a84cfa1" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;settings#std:setting-APPEND_SLASH&quot;&gt;&lt;code&gt;APPEND_SLASH&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;True&lt;/code&gt; and the initial URL doesn&amp;rsquo;t end with a slash, and it is not found in the URLconf, then a new URL is formed by appending a slash at the end. If this new URL is found in the URLconf, then Django redirects the request to this new URL. Otherwise, the initial URL is processed as usual.</source>
          <target state="translated">경우 &lt;a href=&quot;settings#std:setting-APPEND_SLASH&quot;&gt; &lt;code&gt;APPEND_SLASH&lt;/code&gt; 가&lt;/a&gt; 있다 &lt;code&gt;True&lt;/code&gt; 초기 URL이 슬래시로 끝나지 않고, 그것이 URLconf에서 발견되지 않는, 새로운 URL은 끝에 슬래시를 추가하여 형성된다. URLconf에이 새 URL이 있으면 Django는 요청을이 새 URL로 리디렉션합니다. 그렇지 않으면 초기 URL이 평소와 같이 처리됩니다.</target>
        </trans-unit>
        <trans-unit id="703b7a5f7e217bd910de90ae15cc8cecb3bfbb50" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;settings#std:setting-DEBUG&quot;&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;/a&gt; is set to &lt;code&gt;True&lt;/code&gt; (in your settings module), then your 404 view will never be used, and your URLconf will be displayed instead, with some debug information.</source>
          <target state="translated">&lt;a href=&quot;settings#std:setting-DEBUG&quot;&gt; &lt;code&gt;DEBUG&lt;/code&gt; &lt;/a&gt; 가 &lt;code&gt;True&lt;/code&gt; 로 설정되어 있으면 (설정 모듈에서) 404보기가 사용되지 않으며 대신 URL 정보가 일부 디버그 정보와 함께 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="5eedf5297f17474dc2270509f5e5de780a61e4f2" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;settings#std:setting-DEBUG&quot;&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;/a&gt; is set to &lt;code&gt;True&lt;/code&gt; (in your settings module), then your 500 view will never be used, and the traceback will be displayed instead, with some debug information.</source>
          <target state="translated">&lt;a href=&quot;settings#std:setting-DEBUG&quot;&gt; &lt;code&gt;DEBUG&lt;/code&gt; &lt;/a&gt; 가 &lt;code&gt;True&lt;/code&gt; 로 설정 되면 (설정 모듈에서) 500보기가 사용되지 않고 대신 디버그 정보와 함께 트레이스 백이 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="28f55ac704b0b514f68d7f33bfed23d6d400294d" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;settings#std:setting-PREPEND_WWW&quot;&gt;&lt;code&gt;PREPEND_WWW&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;True&lt;/code&gt;, URLs that lack a leading &amp;ldquo;www.&amp;rdquo; will be redirected to the same URL with a leading &amp;ldquo;www.&amp;rdquo;</source>
          <target state="translated">&lt;a href=&quot;settings#std:setting-PREPEND_WWW&quot;&gt; &lt;code&gt;PREPEND_WWW&lt;/code&gt; &lt;/a&gt; 가 &lt;code&gt;True&lt;/code&gt; 인 경우 선행 'www'가없는 URL 'www'가있는 동일한 URL로 리디렉션됩니다.</target>
        </trans-unit>
        <trans-unit id="9268883f3a170c41786d2f41528ad09a08f1df14" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;settings#std:setting-USE_TZ&quot;&gt;&lt;code&gt;USE_TZ&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;False&lt;/code&gt;, this will be a &lt;a href=&quot;../topics/i18n/timezones#naive-vs-aware-datetimes&quot;&gt;naive&lt;/a&gt; datetime (i.e. a datetime without an associated timezone) that represents the current time in the system&amp;rsquo;s local timezone.</source>
          <target state="translated">&lt;a href=&quot;settings#std:setting-USE_TZ&quot;&gt; &lt;code&gt;USE_TZ&lt;/code&gt; &lt;/a&gt; 가 &lt;code&gt;False&lt;/code&gt; 인 경우 이는 시스템의 현지 시간대에서 현재 시간을 나타내는 &lt;a href=&quot;../topics/i18n/timezones#naive-vs-aware-datetimes&quot;&gt;순진한&lt;/a&gt; 날짜 시간 (예 : 연관된 시간대가없는 날짜 시간)입니다.</target>
        </trans-unit>
        <trans-unit id="c2de81b367dd71f5c015e5f41f8afee04e06b3cf" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;settings#std:setting-USE_TZ&quot;&gt;&lt;code&gt;USE_TZ&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;True&lt;/code&gt;, this will be an &lt;a href=&quot;../topics/i18n/timezones#naive-vs-aware-datetimes&quot;&gt;aware&lt;/a&gt; datetime representing the current time in UTC. Note that &lt;a href=&quot;#django.utils.timezone.now&quot;&gt;&lt;code&gt;now()&lt;/code&gt;&lt;/a&gt; will always return times in UTC regardless of the value of &lt;a href=&quot;settings#std:setting-TIME_ZONE&quot;&gt;&lt;code&gt;TIME_ZONE&lt;/code&gt;&lt;/a&gt;; you can use &lt;a href=&quot;#django.utils.timezone.localtime&quot;&gt;&lt;code&gt;localtime()&lt;/code&gt;&lt;/a&gt; to get the time in the current time zone.</source>
          <target state="translated">&lt;a href=&quot;settings#std:setting-USE_TZ&quot;&gt; &lt;code&gt;USE_TZ&lt;/code&gt; &lt;/a&gt; 가 &lt;code&gt;True&lt;/code&gt; 인 경우 UTC로 현재 시간을 나타내는 &lt;a href=&quot;../topics/i18n/timezones#naive-vs-aware-datetimes&quot;&gt;인식 된&lt;/a&gt; 날짜 시간입니다. 참고 &lt;a href=&quot;#django.utils.timezone.now&quot;&gt; &lt;code&gt;now()&lt;/code&gt; &lt;/a&gt; 항상의 값에 관계없이 UTC에서 시간을 반환합니다 &lt;a href=&quot;settings#std:setting-TIME_ZONE&quot;&gt; &lt;code&gt;TIME_ZONE&lt;/code&gt; &lt;/a&gt; ; &lt;a href=&quot;#django.utils.timezone.localtime&quot;&gt; &lt;code&gt;localtime()&lt;/code&gt; &lt;/a&gt; 을 사용 하여 현재 시간대의 시간을 가져올 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="57215ad4aec3fe8e542fb77429da4ec0f6b316a2" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Blog&lt;/code&gt; had &lt;code&gt;ordering = ['name']&lt;/code&gt;, then the first queryset would be identical to:</source>
          <target state="translated">경우 &lt;code&gt;Blog&lt;/code&gt; 있었다 &lt;code&gt;ordering = ['name']&lt;/code&gt; , 다음 첫 번째의 검색어는 동일 할 것이다 :</target>
        </trans-unit>
        <trans-unit id="915ff9d1a4c7c8ff8163f55e3d64c8bec0860f25" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Client.raise_request_exception&lt;/code&gt; is &lt;code&gt;False&lt;/code&gt;, the test client will return a 500 response as would be returned to a browser. The response has the attribute &lt;a href=&quot;#django.test.Response.exc_info&quot;&gt;&lt;code&gt;exc_info&lt;/code&gt;&lt;/a&gt; to provide information about the unhandled exception.</source>
          <target state="translated">경우 &lt;code&gt;Client.raise_request_exception&lt;/code&gt; 이 있다 &lt;code&gt;False&lt;/code&gt; , 테스트 클라이언트는 브라우저에 반환하는 것과 같이 500 응답을 반환합니다. 응답에는 처리되지 않은 예외에 대한 정보를 제공 하는 속성 &lt;a href=&quot;#django.test.Response.exc_info&quot;&gt; &lt;code&gt;exc_info&lt;/code&gt; &lt;/a&gt; 가 있습니다.</target>
        </trans-unit>
        <trans-unit id="abf361655e63d0be9b5f070d1dac967ddae52b37" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;EntryManager&lt;/code&gt; performed default filtering in its &lt;code&gt;get_queryset()&lt;/code&gt; method, that filtering would apply to the &lt;code&gt;all()&lt;/code&gt; call.</source>
          <target state="translated">&lt;code&gt;EntryManager&lt;/code&gt; 가 &lt;code&gt;get_queryset()&lt;/code&gt; 메소드 에서 기본 필터링을 수행 한 경우 해당 필터링은 &lt;code&gt;all()&lt;/code&gt; 호출에 적용됩니다 .</target>
        </trans-unit>
        <trans-unit id="93630d6eedd2025ff2ec8981f5e933b31e83e1d4" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;False&lt;/code&gt; (default), the upper bound is exclusive &lt;code&gt;')'&lt;/code&gt;, otherwise it&amp;rsquo;s inclusive &lt;code&gt;']'&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;False&lt;/code&gt; (기본), 상위 바운드는 독점 &lt;code&gt;')'&lt;/code&gt; , 그렇지 않으면 포함입니다, &lt;code&gt;']'&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="18778cefe298f546baad10095627a522a85d4d98" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;False&lt;/code&gt; (the default) only the direct contents of &lt;code&gt;path&lt;/code&gt; will be offered as choices. If &lt;code&gt;True&lt;/code&gt;, the directory will be descended into recursively and all descendants will be listed as choices.</source>
          <target state="translated">경우 &lt;code&gt;False&lt;/code&gt; (기본값) 단지의 직접적인 내용 &lt;code&gt;path&lt;/code&gt; 선택 사항으로 제공됩니다. 경우 &lt;code&gt;True&lt;/code&gt; ,이 디렉토리는 재귀 적으로 내려되고 모든 자손의 선택으로 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="8580bd511e1e56fc6a57ce10bc1a3957d3e92eef" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;False&lt;/code&gt;, no database table creation or deletion operations will be performed for this model. This is useful if the model represents an existing table or a database view that has been created by some other means. This is the &lt;em&gt;only&lt;/em&gt; difference when &lt;code&gt;managed=False&lt;/code&gt;. All other aspects of model handling are exactly the same as normal. This includes</source>
          <target state="translated">경우 &lt;code&gt;False&lt;/code&gt; , 어떤 데이터베이스 테이블 작성 또는 삭제 작업이 모델에 대해 수행되지 않습니다. 이는 모델이 다른 방법으로 작성된 기존 테이블 또는 데이터베이스 뷰를 나타내는 경우에 유용합니다. &lt;code&gt;managed=False&lt;/code&gt; 의 &lt;em&gt;유일한&lt;/em&gt; 차이점 입니다. 모델 처리의 다른 모든 측면은 정상과 동일합니다. 여기에는</target>
        </trans-unit>
        <trans-unit id="b5afc96ec010c7587fe847918d3f0b1cbd618c34" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;False&lt;/code&gt;, the field will be able to reference proxy models. Default is &lt;code&gt;True&lt;/code&gt;. This mirrors the &lt;code&gt;for_concrete_model&lt;/code&gt; argument to &lt;a href=&quot;#django.contrib.contenttypes.models.ContentTypeManager.get_for_model&quot;&gt;&lt;code&gt;get_for_model()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">경우 &lt;code&gt;False&lt;/code&gt; , 필드는 프록시 모델을 참조 할 수 있습니다. 기본값은 &lt;code&gt;True&lt;/code&gt; 입니다. 이것은 &lt;code&gt;for_concrete_model&lt;/code&gt; 인수를 &lt;a href=&quot;#django.contrib.contenttypes.models.ContentTypeManager.get_for_model&quot;&gt; &lt;code&gt;get_for_model()&lt;/code&gt; &lt;/a&gt; 반영합니다 .</target>
        </trans-unit>
        <trans-unit id="8ecc7857237fad6548c3573566a3dff629cc4ca4" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;False&lt;/code&gt;, the field will not be displayed in the admin or any other &lt;a href=&quot;../../topics/forms/modelforms#django.forms.ModelForm&quot;&gt;&lt;code&gt;ModelForm&lt;/code&gt;&lt;/a&gt;. They are also skipped during &lt;a href=&quot;instances#validating-objects&quot;&gt;model validation&lt;/a&gt;. Default is &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;False&lt;/code&gt; 필드는 관리자 또는 기타에 표시되지 않습니다 &lt;a href=&quot;../../topics/forms/modelforms#django.forms.ModelForm&quot;&gt; &lt;code&gt;ModelForm&lt;/code&gt; &lt;/a&gt; . 또한 &lt;a href=&quot;instances#validating-objects&quot;&gt;모델 유효성 검사&lt;/a&gt; 중에는 건너 뜁니다 . 기본값은 &lt;code&gt;True&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="9a394bcde334572fe03593b3cb90dfa9215df0e6" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;None&lt;/code&gt;, no redirect will be performed and the logout view will be rendered.</source>
          <target state="translated">경우 &lt;code&gt;None&lt;/code&gt; , 더 리디렉션이 수행되지 않으며 로그 아웃 뷰가 렌더링됩니다.</target>
        </trans-unit>
        <trans-unit id="1ea11f1dd3469689c6da4beae549200413dad0f6" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;TestMixin1&lt;/code&gt; would call &lt;code&gt;super()&lt;/code&gt; and take that result into account, &lt;code&gt;TestMixin1&lt;/code&gt; wouldn&amp;rsquo;t work standalone anymore.</source>
          <target state="translated">경우 &lt;code&gt;TestMixin1&lt;/code&gt; 가 부를 것이다 &lt;code&gt;super()&lt;/code&gt; 및 계정에 그 결과를 가지고, &lt;code&gt;TestMixin1&lt;/code&gt; 는 일 독립을 더 이상하지 않을 것이다.</target>
        </trans-unit>
        <trans-unit id="6769b5f470623bf5a1a01f00daddb8704bd14842" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;True&lt;/code&gt; (default), the lower bound is inclusive &lt;code&gt;'['&lt;/code&gt;, otherwise it&amp;rsquo;s exclusive &lt;code&gt;'('&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;True&lt;/code&gt; (기본값), 하한은 포함입니다 &lt;code&gt;'['&lt;/code&gt; , 그렇지 않으면 배타적이다 &lt;code&gt;'('&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ac0108b91dd39d35eec7c74542b910976de59f38" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;True&lt;/code&gt; (default), the value will be stripped of leading and trailing whitespace.</source>
          <target state="translated">경우 &lt;code&gt;True&lt;/code&gt; (기본) 값은 선행 및 후행 공백을 박탈됩니다.</target>
        </trans-unit>
        <trans-unit id="0889dcaa5531b627194e2e75f61b16d17c01c4c1" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;True&lt;/code&gt;, Django will store empty values as &lt;code&gt;NULL&lt;/code&gt; in the database. Default is &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;True&lt;/code&gt; , 장고으로 빈 값을 저장할 &lt;code&gt;NULL&lt;/code&gt; 데이터베이스입니다. 기본값은 &lt;code&gt;False&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="b5ac068b66f4ddfe5eb27d866c030ede7da7d0d3" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;True&lt;/code&gt;, a database index will be created for this field.</source>
          <target state="translated">경우 &lt;code&gt;True&lt;/code&gt; , 데이터베이스 인덱스는이 필드에 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="f9534fba934e74f7ef1a7dd6e9bc77488b38aafe" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;True&lt;/code&gt;, causes &lt;a href=&quot;#django.views.generic.detail.SingleObjectMixin.get_object&quot;&gt;&lt;code&gt;get_object()&lt;/code&gt;&lt;/a&gt; to perform its lookup using both the primary key and the slug. Defaults to &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;True&lt;/code&gt; , 원인은 &lt;a href=&quot;#django.views.generic.detail.SingleObjectMixin.get_object&quot;&gt; &lt;code&gt;get_object()&lt;/code&gt; &lt;/a&gt; 기본 키와 슬러그 모두를 사용하여 검색을 수행. 기본값은 &lt;code&gt;False&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="758c3834bb8ce6505681916f3fb282790c5a617b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;True&lt;/code&gt;, the &lt;a href=&quot;middleware#django.middleware.security.SecurityMiddleware&quot;&gt;&lt;code&gt;SecurityMiddleware&lt;/code&gt;&lt;/a&gt; adds the &lt;code&gt;includeSubDomains&lt;/code&gt; directive to the &lt;a href=&quot;middleware#http-strict-transport-security&quot;&gt;HTTP Strict Transport Security&lt;/a&gt; header. It has no effect unless &lt;a href=&quot;#std:setting-SECURE_HSTS_SECONDS&quot;&gt;&lt;code&gt;SECURE_HSTS_SECONDS&lt;/code&gt;&lt;/a&gt; is set to a non-zero value.</source>
          <target state="translated">경우 &lt;code&gt;True&lt;/code&gt; 의 &lt;a href=&quot;middleware#django.middleware.security.SecurityMiddleware&quot;&gt; &lt;code&gt;SecurityMiddleware&lt;/code&gt; 는&lt;/a&gt; 추가 &lt;code&gt;includeSubDomains&lt;/code&gt; 을 받는 지시어 &lt;a href=&quot;middleware#http-strict-transport-security&quot;&gt;HTTP 엄격한 전송 보안&lt;/a&gt; 헤더를. &lt;a href=&quot;#std:setting-SECURE_HSTS_SECONDS&quot;&gt; &lt;code&gt;SECURE_HSTS_SECONDS&lt;/code&gt; &lt;/a&gt; 가 0이 아닌 값으로 설정 되지 않으면 효과가 없습니다 .</target>
        </trans-unit>
        <trans-unit id="bf5376ee839b91d8f49b195845182cc96ba96ad8" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;True&lt;/code&gt;, the &lt;a href=&quot;middleware#django.middleware.security.SecurityMiddleware&quot;&gt;&lt;code&gt;SecurityMiddleware&lt;/code&gt;&lt;/a&gt; adds the &lt;code&gt;preload&lt;/code&gt; directive to the &lt;a href=&quot;middleware#http-strict-transport-security&quot;&gt;HTTP Strict Transport Security&lt;/a&gt; header. It has no effect unless &lt;a href=&quot;#std:setting-SECURE_HSTS_SECONDS&quot;&gt;&lt;code&gt;SECURE_HSTS_SECONDS&lt;/code&gt;&lt;/a&gt; is set to a non-zero value.</source>
          <target state="translated">경우 &lt;code&gt;True&lt;/code&gt; 의 &lt;a href=&quot;middleware#django.middleware.security.SecurityMiddleware&quot;&gt; &lt;code&gt;SecurityMiddleware&lt;/code&gt; 는&lt;/a&gt; 추가 &lt;code&gt;preload&lt;/code&gt; 받는 지시어 &lt;a href=&quot;middleware#http-strict-transport-security&quot;&gt;HTTP 엄격한 전송 보안&lt;/a&gt; 헤더를. &lt;a href=&quot;#std:setting-SECURE_HSTS_SECONDS&quot;&gt; &lt;code&gt;SECURE_HSTS_SECONDS&lt;/code&gt; &lt;/a&gt; 가 0이 아닌 값으로 설정 되지 않으면 효과가 없습니다 .</target>
        </trans-unit>
        <trans-unit id="7269473ae0ab0fa0cde96c635f4c57333c8000c0" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;True&lt;/code&gt;, the &lt;a href=&quot;middleware#django.middleware.security.SecurityMiddleware&quot;&gt;&lt;code&gt;SecurityMiddleware&lt;/code&gt;&lt;/a&gt; sets the &lt;a href=&quot;middleware#x-content-type-options&quot;&gt;X-Content-Type-Options: nosniff&lt;/a&gt; header on all responses that do not already have it.</source>
          <target state="translated">경우 &lt;code&gt;True&lt;/code&gt; 의 &lt;a href=&quot;middleware#django.middleware.security.SecurityMiddleware&quot;&gt; &lt;code&gt;SecurityMiddleware&lt;/code&gt; 는&lt;/a&gt; 세트 &lt;a href=&quot;middleware#x-content-type-options&quot;&gt;NOSNIFF : X-Content-Type을-옵션&lt;/a&gt; 이미이없는 모든 응답에 헤더를.</target>
        </trans-unit>
        <trans-unit id="06532e19f603440c20d409e3e0783241dddf0594" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;True&lt;/code&gt;, the &lt;a href=&quot;middleware#django.middleware.security.SecurityMiddleware&quot;&gt;&lt;code&gt;SecurityMiddleware&lt;/code&gt;&lt;/a&gt; sets the &lt;a href=&quot;middleware#x-xss-protection&quot;&gt;X-XSS-Protection: 1; mode=block&lt;/a&gt; header on all responses that do not already have it.</source>
          <target state="translated">경우 &lt;code&gt;True&lt;/code&gt; 의 &lt;a href=&quot;middleware#django.middleware.security.SecurityMiddleware&quot;&gt; &lt;code&gt;SecurityMiddleware&lt;/code&gt; 는&lt;/a&gt; 세트 &lt;a href=&quot;middleware#x-xss-protection&quot;&gt;X-XSS-보호 : 1; mode =&lt;/a&gt; 아직없는 모든 응답에서 헤더를 차단 합니다.</target>
        </trans-unit>
        <trans-unit id="3aa67e9c195274834b1514184f81665a3681157f" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;True&lt;/code&gt;, the &lt;a href=&quot;middleware#django.middleware.security.SecurityMiddleware&quot;&gt;&lt;code&gt;SecurityMiddleware&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;middleware#ssl-redirect&quot;&gt;redirects&lt;/a&gt; all non-HTTPS requests to HTTPS (except for those URLs matching a regular expression listed in &lt;a href=&quot;#std:setting-SECURE_REDIRECT_EXEMPT&quot;&gt;&lt;code&gt;SECURE_REDIRECT_EXEMPT&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">경우 &lt;code&gt;True&lt;/code&gt; 의 &lt;a href=&quot;middleware#django.middleware.security.SecurityMiddleware&quot;&gt; &lt;code&gt;SecurityMiddleware&lt;/code&gt; 는&lt;/a&gt;&lt;a href=&quot;middleware#ssl-redirect&quot;&gt; 리디렉션&lt;/a&gt; (에 나와있는 정규 표현식 일치하는 해당 URL을 제외하고 HTTPS에 대한 모든 비 HTTPS 요청 &lt;a href=&quot;#std:setting-SECURE_REDIRECT_EXEMPT&quot;&gt; &lt;code&gt;SECURE_REDIRECT_EXEMPT&lt;/code&gt; 을&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="1fe34d7fa424adbe99975f44452f0cb8c9b26460" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;True&lt;/code&gt;, the field accepts Unicode letters in addition to ASCII letters. Defaults to &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;True&lt;/code&gt; , 필드는 ASCII 문자뿐만 아니라 유니 코드 문자를 사용할 수 있습니다. 기본값은 &lt;code&gt;False&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="94ca19b3ecb3f8bbe3f1a9bff2249de7c42b4ee0" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;True&lt;/code&gt;, the field is allowed to be blank. Default is &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;True&lt;/code&gt; 필드가 비어있을 수 있습니다. 기본값은 &lt;code&gt;False&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="9e99788f392fe32220f3399732e6992bdae5fd30" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;True&lt;/code&gt;, this field is the primary key for the model.</source>
          <target state="translated">경우 &lt;code&gt;True&lt;/code&gt; ,이 필드는 모델의 기본 키입니다.</target>
        </trans-unit>
        <trans-unit id="b0a8661c8043a78d79876d7e0eed097ed9a770fd" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;True&lt;/code&gt;, this field must be unique throughout the table.</source>
          <target state="translated">경우 &lt;code&gt;True&lt;/code&gt; ,이 필드는 테이블의 고유해야합니다.</target>
        </trans-unit>
        <trans-unit id="a121385ed8cbdd359e3d02312aea0ad306878456" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;abstract = True&lt;/code&gt;, this model will be an &lt;a href=&quot;../../topics/db/models#abstract-base-classes&quot;&gt;abstract base class&lt;/a&gt;.</source>
          <target state="translated">경우 &lt;code&gt;abstract = True&lt;/code&gt; ,이 모델은 될 것입니다 &lt;a href=&quot;../../topics/db/models#abstract-base-classes&quot;&gt;추상 기본 클래스&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="c0bcccb8df0544ee276445e6621dc3c3b97509cb" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;allowed_permissions&lt;/code&gt; has more than one permission, the action will be available as long as the user passes at least one of the checks.</source>
          <target state="translated">경우 &lt;code&gt;allowed_permissions&lt;/code&gt; 이 하나 이상의 권한을 가진 사용자가 검사 중 적어도 하나를 통과 할 때, 작업이 오래로 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ac69109cdc61dd101b981bea9a5dba1484d0b872" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;app_configs&lt;/code&gt; and &lt;code&gt;tags&lt;/code&gt; are both &lt;code&gt;None&lt;/code&gt;, all system checks are performed. &lt;code&gt;tags&lt;/code&gt; can be a list of check tags, like &lt;code&gt;compatibility&lt;/code&gt; or &lt;code&gt;models&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;app_configs&lt;/code&gt; 및 &lt;code&gt;tags&lt;/code&gt; 모두없는 &lt;code&gt;None&lt;/code&gt; , 모든 시스템 검사가 수행된다. &lt;code&gt;tags&lt;/code&gt; 는 &lt;code&gt;compatibility&lt;/code&gt; 또는 &lt;code&gt;models&lt;/code&gt; 과 같은 검사 태그 목록 일 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="6615ec052ef5b32e9a7ddc0191176c4b5da7db9c" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;as_attachment=True&lt;/code&gt;, the &lt;code&gt;Content-Disposition&lt;/code&gt; header is set to &lt;code&gt;attachment&lt;/code&gt;, which asks the browser to offer the file to the user as a download. Otherwise, a &lt;code&gt;Content-Disposition&lt;/code&gt; header with a value of &lt;code&gt;inline&lt;/code&gt; (the browser default) will be set only if a filename is available.</source>
          <target state="translated">경우 &lt;code&gt;as_attachment=True&lt;/code&gt; 의 &lt;code&gt;Content-Disposition&lt;/code&gt; 헤더에 설정되어있는 &lt;code&gt;attachment&lt;/code&gt; 다운로드로 사용자에게 파일을 제공하는 브라우저를 묻는. 그렇지 않으면 파일 이름을 사용할 수있는 경우에만 &lt;code&gt;inline&lt;/code&gt; 값 (브라우저 기본값)이 있는 &lt;code&gt;Content-Disposition&lt;/code&gt; 헤더 가 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="d6efdd4d6808763901e2a4ef79dd40c79a07e12c" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;auto_id&lt;/code&gt; is &lt;code&gt;False&lt;/code&gt;, then the form output will not include &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; tags nor &lt;code&gt;id&lt;/code&gt; attributes:</source>
          <target state="translated">경우 &lt;code&gt;auto_id&lt;/code&gt; 이 있다 &lt;code&gt;False&lt;/code&gt; , 다음 폼 출력은 포함되지 않습니다 &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; 태그 나 &lt;code&gt;id&lt;/code&gt; 속성 :</target>
        </trans-unit>
        <trans-unit id="3cc984f7eb8796fb1fd928f2b24d9c6845248e58" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;auto_id&lt;/code&gt; is set to &lt;code&gt;True&lt;/code&gt;, then the form output &lt;em&gt;will&lt;/em&gt; include &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; tags and will use the field name as its &lt;code&gt;id&lt;/code&gt; for each form field:</source>
          <target state="translated">경우 &lt;code&gt;auto_id&lt;/code&gt; 가 설정되어 &lt;code&gt;True&lt;/code&gt; , 다음 양식 출력이 &lt;em&gt;됩니다&lt;/em&gt; 포함 &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; 태그와 같은 필드 이름을 사용하는 &lt;code&gt;id&lt;/code&gt; 각 양식 필드 :</target>
        </trans-unit>
        <trans-unit id="c915e73a9f6e71c73afac26838e8f2e10b0b4b57" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;auto_id&lt;/code&gt; is set to a string containing the format character &lt;code&gt;'%s'&lt;/code&gt;, then the form output will include &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; tags, and will generate &lt;code&gt;id&lt;/code&gt; attributes based on the format string. For example, for a format string &lt;code&gt;'field_%s'&lt;/code&gt;, a field named &lt;code&gt;subject&lt;/code&gt; will get the &lt;code&gt;id&lt;/code&gt; value &lt;code&gt;'field_subject'&lt;/code&gt;. Continuing our example:</source>
          <target state="translated">경우 &lt;code&gt;auto_id&lt;/code&gt; 이 형식 문자를 포함하는 문자열로 설정 &lt;code&gt;'%s'&lt;/code&gt; , 다음 폼 출력이 포함됩니다 &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; 태그를하고, 생성 &lt;code&gt;id&lt;/code&gt; 형식 문자열을 기반 속성. 예를 들어, 형식 문자열 &lt;code&gt;'field_%s'&lt;/code&gt; 경우 &lt;code&gt;subject&lt;/code&gt; 라는 필드 는 &lt;code&gt;id&lt;/code&gt; 값 &lt;code&gt;'field_subject'&lt;/code&gt; 를 얻습니다 . 우리의 예를 계속하십시오 :</target>
        </trans-unit>
        <trans-unit id="3264738ae83ae7d0a0ed8e3fb36220d1bd14caff" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;auto_id&lt;/code&gt; is set to any other true value &amp;ndash; such as a string that doesn&amp;rsquo;t include &lt;code&gt;%s&lt;/code&gt; &amp;ndash; then the library will act as if &lt;code&gt;auto_id&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;auto_id&lt;/code&gt; 는 다른 진정한 가치로 설정 - 같은 포함하지 않는 문자열로 &lt;code&gt;%s&lt;/code&gt; 것처럼 다음 라이브러리가 역할을합니다 - &lt;code&gt;auto_id&lt;/code&gt; 가 있다 &lt;code&gt;True&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3e0883ecf28d02e1a38399c6f3915b7fcc7015ae" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;autoclobber&lt;/code&gt; is &lt;code&gt;False&lt;/code&gt;, the user will be asked to approve destroying the existing database. &lt;code&gt;sys.exit&lt;/code&gt; is called if the user does not approve.</source>
          <target state="translated">경우 &lt;code&gt;autoclobber&lt;/code&gt; 이 있다 &lt;code&gt;False&lt;/code&gt; 로 , 사용자는 기존 데이터베이스를 파괴 승인하라는 메시지가 표시됩니다. 사용자가 승인하지 않으면 &lt;code&gt;sys.exit&lt;/code&gt; 가 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="98e4a76b7e84d38f335e28bca3305209202dca5b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;backend&lt;/code&gt; is passed in and it&amp;rsquo;s defined in &lt;a href=&quot;../settings#std:setting-AUTHENTICATION_BACKENDS&quot;&gt;&lt;code&gt;AUTHENTICATION_BACKENDS&lt;/code&gt;&lt;/a&gt;, then this method will use it. Otherwise, it will use the &lt;code&gt;backend&lt;/code&gt; in &lt;a href=&quot;../settings#std:setting-AUTHENTICATION_BACKENDS&quot;&gt;&lt;code&gt;AUTHENTICATION_BACKENDS&lt;/code&gt;&lt;/a&gt;, if there is only one, or raise an exception.</source>
          <target state="translated">경우 &lt;code&gt;backend&lt;/code&gt; 에 전달되고이에 정의되어 &lt;a href=&quot;../settings#std:setting-AUTHENTICATION_BACKENDS&quot;&gt; &lt;code&gt;AUTHENTICATION_BACKENDS&lt;/code&gt; &lt;/a&gt; ,이 방법을 사용합니다. 그렇지 않으면 &lt;a href=&quot;../settings#std:setting-AUTHENTICATION_BACKENDS&quot;&gt; &lt;code&gt;AUTHENTICATION_BACKENDS&lt;/code&gt; 에&lt;/a&gt; &lt;code&gt;backend&lt;/code&gt; 가 있거나 하나만 있으면 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="375cd7296bfab6553a96bb4023ab0d2f1474319f" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;books&lt;/code&gt; is:</source>
          <target state="translated">&lt;code&gt;books&lt;/code&gt; 이 다음과 같은 경우 :</target>
        </trans-unit>
        <trans-unit id="1a7c8aa34e3c2c04547138e30fa08eb1d3557164" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;check_path&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;, the function first checks the requested URL for whether its path begins with a language code listed in the &lt;a href=&quot;settings#std:setting-LANGUAGES&quot;&gt;&lt;code&gt;LANGUAGES&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">경우 &lt;code&gt;check_path&lt;/code&gt; 가 있다 &lt;code&gt;True&lt;/code&gt; , 기능 첫번째 체크는 경로에 나열된 언어 코드로 시작 여부에 대한 URL을 요청 &lt;a href=&quot;settings#std:setting-LANGUAGES&quot;&gt; &lt;code&gt;LANGUAGES&lt;/code&gt; &lt;/a&gt; 설정.</target>
        </trans-unit>
        <trans-unit id="c8ec35a2ea23587d9fe9a54f0ca32995bf582faf" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;context&lt;/code&gt; is provided, it must be a &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#dict&quot;&gt;&lt;code&gt;dict&lt;/code&gt;&lt;/a&gt;. If it isn&amp;rsquo;t provided, the engine will render the template with an empty context.</source>
          <target state="translated">경우 &lt;code&gt;context&lt;/code&gt; 제공되고, 그것은해야합니다 &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#dict&quot;&gt; &lt;code&gt;dict&lt;/code&gt; &lt;/a&gt; . 제공되지 않으면 엔진은 템플릿을 빈 컨텍스트로 렌더링합니다.</target>
        </trans-unit>
        <trans-unit id="17d141a9754d51166d4f3a44118b415f530a4910" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;debug&lt;/code&gt; is &lt;code&gt;False&lt;/code&gt;, these loaders are wrapped in &lt;a href=&quot;#django.template.loaders.cached.Loader&quot;&gt;&lt;code&gt;django.template.loaders.cached.Loader&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;debug&lt;/code&gt; 가 &lt;code&gt;False&lt;/code&gt; 인 경우 ,이 로더는 &lt;a href=&quot;#django.template.loaders.cached.Loader&quot;&gt; &lt;code&gt;django.template.loaders.cached.Loader&lt;/code&gt; &lt;/a&gt; 에 랩핑 됩니다.</target>
        </trans-unit>
        <trans-unit id="0f4c76818b3f8b7eae0f4fc29ad7ccd7c54fd6d2" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;debug&lt;/code&gt; isn&amp;rsquo;t &lt;code&gt;None&lt;/code&gt;, the &lt;a href=&quot;../../ref/settings#std:setting-DEBUG&quot;&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;/a&gt; setting is updated to its value.</source>
          <target state="translated">경우 &lt;code&gt;debug&lt;/code&gt; 하지 않습니다 &lt;code&gt;None&lt;/code&gt; 의 &lt;a href=&quot;../../ref/settings#std:setting-DEBUG&quot;&gt; &lt;code&gt;DEBUG&lt;/code&gt; &lt;/a&gt; 설정 값으로 업데이트됩니다.</target>
        </trans-unit>
        <trans-unit id="fd405748877e5e65871815a667f3253dfbbccc4b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;debug_sql&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;, failing test cases will output SQL queries logged to the &lt;a href=&quot;../logging#django-db-logger&quot;&gt;django.db.backends logger&lt;/a&gt; as well as the traceback. If &lt;code&gt;verbosity&lt;/code&gt; is &lt;code&gt;2&lt;/code&gt;, then queries in all tests are output.</source>
          <target state="translated">경우 &lt;code&gt;debug_sql&lt;/code&gt; 가 있다 &lt;code&gt;True&lt;/code&gt; 받는 사람, 테스트 케이스 실패를 출력의 SQL 쿼리가 기록 &lt;a href=&quot;../logging#django-db-logger&quot;&gt;django.db.backends 로거&lt;/a&gt; 역 추적뿐만 아니라. 경우 &lt;code&gt;verbosity&lt;/code&gt; 있다 &lt;code&gt;2&lt;/code&gt; , 모든 테스트에서 다음 쿼리가 출력됩니다.</target>
        </trans-unit>
        <trans-unit id="3b7f214abcf2191401e59d4b6763d7f1cc638a5b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;distinct=True&lt;/code&gt;, &lt;code&gt;Avg&lt;/code&gt; returns the mean value of unique values. This is the SQL equivalent of &lt;code&gt;AVG(DISTINCT &amp;lt;field&amp;gt;)&lt;/code&gt;. The default value is &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;distinct=True&lt;/code&gt; , &lt;code&gt;Avg&lt;/code&gt; 고유 한 값의 평균 값을 반환합니다. 이것은 &lt;code&gt;AVG(DISTINCT &amp;lt;field&amp;gt;)&lt;/code&gt; 와 동등한 SQL 입니다. 기본값은 &lt;code&gt;False&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="a3bcdf7ed01d6c4e579221df819cdfdb4ec55a4a" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;distinct=True&lt;/code&gt;, &lt;code&gt;Sum&lt;/code&gt; returns the sum of unique values. This is the SQL equivalent of &lt;code&gt;SUM(DISTINCT &amp;lt;field&amp;gt;)&lt;/code&gt;. The default value is &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;distinct=True&lt;/code&gt; , &lt;code&gt;Sum&lt;/code&gt; 고유 한 값의 합계를 반환합니다. 이것은 &lt;code&gt;SUM(DISTINCT &amp;lt;field&amp;gt;)&lt;/code&gt; 와 동등한 SQL 입니다. 기본값은 &lt;code&gt;False&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="e396e16bde5b9f0db7d59755293462c7fa1e84b0" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;distinct=True&lt;/code&gt;, the count will only include unique instances. This is the SQL equivalent of &lt;code&gt;COUNT(DISTINCT &amp;lt;field&amp;gt;)&lt;/code&gt;. The default value is &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;distinct=True&lt;/code&gt; , 카운트 고유 한 인스턴스 만 포함됩니다. 이는 &lt;code&gt;COUNT(DISTINCT &amp;lt;field&amp;gt;)&lt;/code&gt; 와 동일한 SQL 입니다. 기본값은 &lt;code&gt;False&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="e9f695c5cdafd569ee51fc695279eb0e6f896f6f" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;django-admin&lt;/code&gt; only displays the help text no matter what arguments it is given, there is probably a problem with the file association in Windows. Check if there is more than one environment variable set for running Python scripts in &lt;code&gt;PATH&lt;/code&gt;. This usually occurs when there is more than one Python version installed.</source>
          <target state="translated">경우 &lt;code&gt;django-admin&lt;/code&gt; 단지 상관없이 주어진 어떤 인수 도움말 텍스트를 표시하지 않습니다, 아마도 Windows에서 파일 연결에 문제가있는 것입니다. &lt;code&gt;PATH&lt;/code&gt; 에서 Python 스크립트를 실행하기 위해 둘 이상의 환경 변수가 설정되어 있는지 확인하십시오 . 일반적으로 둘 이상의 Python 버전이 설치되어있을 때 발생합니다.</target>
        </trans-unit>
        <trans-unit id="361315ebe5ec678bf8ab55ad6dc27bfd903864d3" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;failfast&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;, the test suite will stop running after the first test failure is detected.</source>
          <target state="translated">경우 &lt;code&gt;failfast&lt;/code&gt; 있다 &lt;code&gt;True&lt;/code&gt; 첫 번째 테스트 실패가 감지 된 후, 테스트 스위트 실행이 중지됩니다.</target>
        </trans-unit>
        <trans-unit id="553d84602f7d657ca01d69ac24fa1a843b57d59e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;fetch_redirect_response&lt;/code&gt; is &lt;code&gt;False&lt;/code&gt;, the final page won&amp;rsquo;t be loaded. Since the test client can&amp;rsquo;t fetch external URLs, this is particularly useful if &lt;code&gt;expected_url&lt;/code&gt; isn&amp;rsquo;t part of your Django app.</source>
          <target state="translated">경우 &lt;code&gt;fetch_redirect_response&lt;/code&gt; 이 있다 &lt;code&gt;False&lt;/code&gt; , 마지막 페이지가로드되지 않습니다. 테스트 클라이언트가 외부 URL을 가져올 수 없기 때문에 경우에 특히 유용 &lt;code&gt;expected_url&lt;/code&gt; 이 장고 응용 프로그램의 일부가 아닙니다.</target>
        </trans-unit>
        <trans-unit id="9b9986686bc1debc8466f09df6e013f28b9ad282" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;html_message&lt;/code&gt; is provided, the resulting email will be a &lt;em&gt;multipart/alternative&lt;/em&gt; email with &lt;code&gt;message&lt;/code&gt; as the &lt;em&gt;text/plain&lt;/em&gt; content type and &lt;code&gt;html_message&lt;/code&gt; as the &lt;em&gt;text/html&lt;/em&gt; content type.</source>
          <target state="translated">경우 &lt;code&gt;html_message&lt;/code&gt; 가 제공되고, 그 결과 이메일이 될 것입니다 &lt;em&gt;다중 / 대안&lt;/em&gt; 와 이메일 &lt;code&gt;message&lt;/code&gt; 는 AS &lt;em&gt;텍스트 / 일반&lt;/em&gt; 콘텐츠 형식 및 &lt;code&gt;html_message&lt;/code&gt; 는 AS &lt;em&gt;text / html과&lt;/em&gt; 콘텐츠 형식.</target>
        </trans-unit>
        <trans-unit id="941ffb3faea2e8e3929fbee655ba7559bab0a4f8" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;include_superusers&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt; (default), the result will include superusers.</source>
          <target state="translated">경우 &lt;code&gt;include_superusers&lt;/code&gt; 가 있습니다 &lt;code&gt;True&lt;/code&gt; (기본), 결과는 슈퍼 유저가 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="949941ab38e1b5f16c207535d23d3aea1d5f9972" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;inspectdb&lt;/code&gt; cannot map a column&amp;rsquo;s type to a model field type, it&amp;rsquo;ll use &lt;code&gt;TextField&lt;/code&gt; and will insert the Python comment &lt;code&gt;'This field type is a guess.'&lt;/code&gt; next to the field in the generated model. The recognized fields may depend on apps listed in &lt;a href=&quot;settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt;. For example, &lt;a href=&quot;contrib/postgres/index#module-django.contrib.postgres&quot;&gt;&lt;code&gt;django.contrib.postgres&lt;/code&gt;&lt;/a&gt; adds recognition for several PostgreSQL-specific field types.</source>
          <target state="translated">&lt;code&gt;inspectdb&lt;/code&gt; 가 열 유형을 모델 필드 유형에 매핑 할 수없는 경우 &lt;code&gt;TextField&lt;/code&gt; 를 사용 하고 Python 주석 &lt;code&gt;'This field type is a guess.'&lt;/code&gt; 삽입합니다 . 생성 된 모델의 필드 옆에 있습니다. 인식되는 필드는 &lt;a href=&quot;settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; 에&lt;/a&gt; 나열된 앱에 따라 달라질 수 있습니다 . 예를 들어 &lt;a href=&quot;contrib/postgres/index#module-django.contrib.postgres&quot;&gt; &lt;code&gt;django.contrib.postgres&lt;/code&gt; &lt;/a&gt; 는 여러 PostgreSQL 특정 필드 유형에 대한 인식을 추가합니다.</target>
        </trans-unit>
        <trans-unit id="858f3c43f659ce4cbaef07711c393bd1533ced3f" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;interactive&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;, it&amp;rsquo;s safe to prompt the user to input things on the command line. If &lt;code&gt;interactive&lt;/code&gt; is &lt;code&gt;False&lt;/code&gt;, functions which listen for this signal should not try to prompt for anything.</source>
          <target state="translated">경우 &lt;code&gt;interactive&lt;/code&gt; 있다 &lt;code&gt;True&lt;/code&gt; , 그것은 명령 줄에 입력 것들 사용자에게 메시지를 표시하는 것이 안전합니다. 경우 &lt;code&gt;interactive&lt;/code&gt; 있다 &lt;code&gt;False&lt;/code&gt; ,이 신호를 수신 기능은 아무것도에 대한 프롬프트를 시도해서는 안된다.</target>
        </trans-unit>
        <trans-unit id="626b4c25c6b37295fc6b45206394744f58a53eb8" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;interactive&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;, the test suite has permission to ask the user for instructions when the test suite is executed. An example of this behavior would be asking for permission to delete an existing test database. If &lt;code&gt;interactive&lt;/code&gt; is &lt;code&gt;False&lt;/code&gt;, the test suite must be able to run without any manual intervention.</source>
          <target state="translated">경우 &lt;code&gt;interactive&lt;/code&gt; 있다 &lt;code&gt;True&lt;/code&gt; , 테스트 스위트는 테스트 스위트를 실행할 때 지침은 사용자가 요청하는 권한이 있습니다. 이 동작의 예는 기존 테스트 데이터베이스를 삭제할 권한을 요청하는 것입니다. 경우 &lt;code&gt;interactive&lt;/code&gt; 있다 &lt;code&gt;False&lt;/code&gt; , 테스트 스위트는 수동 개입없이 실행할 수 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="1c57c8f9832ea1f2b2611e0f586e4b53e5bc935e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;is_active&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt; (default), returns only active users, or if &lt;code&gt;False&lt;/code&gt;, returns only inactive users. Use &lt;code&gt;None&lt;/code&gt; to return all users irrespective of active state.</source>
          <target state="translated">경우 &lt;code&gt;is_active&lt;/code&gt; 는 것입니다 &lt;code&gt;True&lt;/code&gt; (기본값) 만 반환 활성 사용자, 또는 경우 &lt;code&gt;False&lt;/code&gt; , 만 반환 비활성 사용자. 활성 상태에 관계없이 모든 사용자를 리턴 하려면 &lt;code&gt;None&lt;/code&gt; 을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="9d60554d1eba08cd3217b974a171c4e2851e3e70" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;is_valid()&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;, we&amp;rsquo;ll now be able to find all the validated form data in its &lt;code&gt;cleaned_data&lt;/code&gt; attribute. We can use this data to update the database or do other processing before sending an HTTP redirect to the browser telling it where to go next.</source>
          <target state="translated">경우 &lt;code&gt;is_valid()&lt;/code&gt; 있다 &lt;code&gt;True&lt;/code&gt; , 우리는 이제 모든 검증 양식 데이터를 찾을 수 있습니다 &lt;code&gt;cleaned_data&lt;/code&gt; 속성을. 이 데이터를 사용하여 다음 경로를 알려주는 HTTP 리디렉션을 브라우저로 보내기 전에 데이터베이스를 업데이트하거나 다른 처리를 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fc0ce8e242c0def881ec84e3bdcf44bc32faa981" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;keepdb&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;, the test suite will use the existing database, or create one if necessary. If &lt;code&gt;False&lt;/code&gt;, a new database will be created, prompting the user to remove the existing one, if present.</source>
          <target state="translated">경우 &lt;code&gt;keepdb&lt;/code&gt; 가 있다 &lt;code&gt;True&lt;/code&gt; , 테스트 스위트는 기존 데이터베이스를 사용하거나 필요한 경우 하나를 만들 수 있습니다. 경우 &lt;code&gt;False&lt;/code&gt; , 새 데이터베이스가 존재하는 경우, 기존 하나를 제거하는 사용자에게 메시지를 표시, 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="b705770333b7f75454b455c7c40f3bee6b13e433" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;key&lt;/code&gt; is in the context, returns its value. Otherwise inserts &lt;code&gt;key&lt;/code&gt; with a value of &lt;code&gt;default&lt;/code&gt; and returns &lt;code&gt;default&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;key&lt;/code&gt; 가 컨텍스트에 있으면 값을 리턴합니다. 그렇지 않으면 삽입 &lt;code&gt;key&lt;/code&gt; 의 값을 &lt;code&gt;default&lt;/code&gt; 반환 &lt;code&gt;default&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="06130c8d19c7ce438bfdc76c100ec76ef0f594dd" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;limit_choices_to&lt;/code&gt; is or returns a &lt;a href=&quot;querysets#django.db.models.Q&quot;&gt;&lt;code&gt;Q object&lt;/code&gt;&lt;/a&gt;, which is useful for &lt;a href=&quot;../../topics/db/queries#complex-lookups-with-q&quot;&gt;complex queries&lt;/a&gt;, then it will only have an effect on the choices available in the admin when the field is not listed in &lt;a href=&quot;../contrib/admin/index#django.contrib.admin.ModelAdmin.raw_id_fields&quot;&gt;&lt;code&gt;raw_id_fields&lt;/code&gt;&lt;/a&gt; in the &lt;code&gt;ModelAdmin&lt;/code&gt; for the model.</source>
          <target state="translated">경우 &lt;code&gt;limit_choices_to&lt;/code&gt; 가 있다 또는 반환 &lt;a href=&quot;querysets#django.db.models.Q&quot;&gt; &lt;code&gt;Q object&lt;/code&gt; &lt;/a&gt; 에 유용합니다, &lt;a href=&quot;../../topics/db/queries#complex-lookups-with-q&quot;&gt;복잡한 쿼리를&lt;/a&gt; 필드가 나열되지 않은 경우, 그것은 단지 관리자에서 사용할 수있는 선택에 영향을 미칠 것이다 &lt;a href=&quot;../contrib/admin/index#django.contrib.admin.ModelAdmin.raw_id_fields&quot;&gt; &lt;code&gt;raw_id_fields&lt;/code&gt; &lt;/a&gt; 에 &lt;code&gt;ModelAdmin&lt;/code&gt; 모델에 대한.</target>
        </trans-unit>
        <trans-unit id="a69ba9ab042b6955c7b8a5885ebdc5353d04f0cb" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;localized_fields&lt;/code&gt; is set to the special value &lt;code&gt;'__all__'&lt;/code&gt;, all fields will be localized.</source>
          <target state="translated">경우 &lt;code&gt;localized_fields&lt;/code&gt; 은 특별한 값으로 설정 &lt;code&gt;'__all__'&lt;/code&gt; , 모든 필드가 현지화됩니다.</target>
        </trans-unit>
        <trans-unit id="12496495cc140a23f1470913ca850c949acc7c56" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;num_messages&lt;/code&gt; is &lt;code&gt;1&lt;/code&gt;, the output will be &lt;code&gt;You have 1 message.&lt;/code&gt; If &lt;code&gt;num_messages&lt;/code&gt; is &lt;code&gt;2&lt;/code&gt; the output will be &lt;code&gt;You have 2 messages.&lt;/code&gt;</source>
          <target state="translated">경우 &lt;code&gt;num_messages&lt;/code&gt; 있다 &lt;code&gt;1&lt;/code&gt; , 출력이 될 것입니다 &lt;code&gt;You have 1 message.&lt;/code&gt; 경우 &lt;code&gt;num_messages&lt;/code&gt; 있다 &lt;code&gt;2&lt;/code&gt; 출력 될 것입니다 &lt;code&gt;You have 2 messages.&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="745547a13ff3b07b7f0df9814180894ed3cbd790" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;obj&lt;/code&gt; is passed in, only returns the group permissions for this specific object.</source>
          <target state="translated">&lt;code&gt;obj&lt;/code&gt; 가 전달 되면 이 특정 개체에 대한 그룹 권한 만 반환합니다.</target>
        </trans-unit>
        <trans-unit id="03ed81e92e7e7194280c4f660b2b67fb25464e6b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;obj&lt;/code&gt; is passed in, only returns the permissions for this specific object.</source>
          <target state="translated">&lt;code&gt;obj&lt;/code&gt; 가 전달 되면 이 특정 개체에 대한 권한 만 반환합니다.</target>
        </trans-unit>
        <trans-unit id="85ee7993fd53cf5084822b1e8f85e878a5981909" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;obj&lt;/code&gt; is passed in, only returns the user permissions for this specific object.</source>
          <target state="translated">&lt;code&gt;obj&lt;/code&gt; 가 전달 되면 이 특정 개체에 대한 사용자 권한 만 반환합니다.</target>
        </trans-unit>
        <trans-unit id="0bd47472a1197cd85102dd3aa290ee04f5235bcb" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;obj&lt;/code&gt; is passed in, this method won&amp;rsquo;t check for a permission for the model, but for this specific object.</source>
          <target state="translated">경우 &lt;code&gt;obj&lt;/code&gt; 전달되고,이 방법은 모델에 대한 권한을 확인하지만,이 특정 객체되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="b51a1e97f03cbd18b3eb07528ca1ad579116eda4" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;obj&lt;/code&gt; is passed in, this method won&amp;rsquo;t check for permissions for the model, but for the specific object.</source>
          <target state="translated">경우 &lt;code&gt;obj&lt;/code&gt; 전달되고,이 방법은 모델에 대한 사용 권한을 확인하지만, 특정 객체되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="2940740f5602aae91149f88fbd7e5e938152bb95" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;objs&lt;/code&gt; contains duplicates, only the first one is updated.</source>
          <target state="translated">&lt;code&gt;objs&lt;/code&gt; 에 중복 항목이 포함되어 있으면 첫 번째 항목 만 업데이트됩니다.</target>
        </trans-unit>
        <trans-unit id="cfd0587006a5ebe13f169804da937daa1dc6170e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;open_file&lt;/code&gt; doesn&amp;rsquo;t have a name or if the name of &lt;code&gt;open_file&lt;/code&gt; isn&amp;rsquo;t appropriate, provide a custom file name using the &lt;code&gt;filename&lt;/code&gt; parameter. Note that if you pass a file-like object like &lt;code&gt;io.BytesIO&lt;/code&gt;, it&amp;rsquo;s your task to &lt;code&gt;seek()&lt;/code&gt; it before passing it to &lt;code&gt;FileResponse&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;open_file&lt;/code&gt; 는 이름이 나 이름 경우하지 않습니다 &lt;code&gt;open_file&lt;/code&gt; 는 적절하지 않다는 사용하여 사용자 정의 파일 이름을 제공하는 &lt;code&gt;filename&lt;/code&gt; 매개 변수를. 당신이 파일 같은 류의 객체 전달하면 있습니다 &lt;code&gt;io.BytesIO&lt;/code&gt; 을 , 그것은 당신의 작업의 &lt;code&gt;seek()&lt;/code&gt; 에 전달하기 전에 &lt;code&gt;FileResponse&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a0a54a895818665a80021bf42884336a44240094" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;paginate_by&lt;/code&gt; is specified, Django will paginate the results returned by this. You can specify the page number in the URL in one of two ways:</source>
          <target state="translated">경우 &lt;code&gt;paginate_by&lt;/code&gt; 가 지정되어, 장고는이에 의해 반환 된 결과 페이지를 매기는 것입니다. 다음 두 가지 방법 중 하나로 URL에 페이지 번호를 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="58fb18994a7a795b3456196c38bd884554ce674e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;proxy = True&lt;/code&gt;, a model which subclasses another model will be treated as a &lt;a href=&quot;../../topics/db/models#proxy-models&quot;&gt;proxy model&lt;/a&gt;.</source>
          <target state="translated">만약 &lt;code&gt;proxy = True&lt;/code&gt; , 또 다른 모델은으로 처리됩니다 서브 클래스 모델 &lt;a href=&quot;../../topics/db/models#proxy-models&quot;&gt;프록시 모델&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="3c2ace2686aec54c72ff11eb64de5cdd2c225de9" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;query_string&lt;/code&gt; is not passed in, the resulting &lt;code&gt;QueryDict&lt;/code&gt; will be empty (it will have no keys or values).</source>
          <target state="translated">경우 &lt;code&gt;query_string&lt;/code&gt; 전달되지 않고, 그 결과 &lt;code&gt;QueryDict&lt;/code&gt; 은 (는 더 키 또는 값이 없습니다) 비어 있습니다.</target>
        </trans-unit>
        <trans-unit id="f8ceb4db235a057ec15ab959aa814110f84beb5a" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;readonly_fields&lt;/code&gt; is used without defining explicit ordering through &lt;a href=&quot;#django.contrib.admin.ModelAdmin.fields&quot;&gt;&lt;code&gt;ModelAdmin.fields&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#django.contrib.admin.ModelAdmin.fieldsets&quot;&gt;&lt;code&gt;ModelAdmin.fieldsets&lt;/code&gt;&lt;/a&gt; they will be added last after all editable fields.</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.admin.ModelAdmin.fields&quot;&gt; &lt;code&gt;ModelAdmin.fields&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;#django.contrib.admin.ModelAdmin.fieldsets&quot;&gt; &lt;code&gt;ModelAdmin.fieldsets&lt;/code&gt; &lt;/a&gt; 를 통해 명시적인 순서를 정의하지 않고 &lt;code&gt;readonly_fields&lt;/code&gt; 를 사용하는 경우 편집 가능한 모든 필드 다음에 마지막에 추가됩니다.</target>
        </trans-unit>
        <trans-unit id="fa30400306a5da4bcdce4253036865b4f3bc0524" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;request&lt;/code&gt; is provided, it must be an &lt;a href=&quot;../ref/request-response#django.http.HttpRequest&quot;&gt;&lt;code&gt;HttpRequest&lt;/code&gt;&lt;/a&gt;. Then the engine must make it, as well as the CSRF token, available in the template. How this is achieved is up to each backend.</source>
          <target state="translated">경우 &lt;code&gt;request&lt;/code&gt; 제공되며, 그것은해야합니다 &lt;a href=&quot;../ref/request-response#django.http.HttpRequest&quot;&gt; &lt;code&gt;HttpRequest&lt;/code&gt; 에를&lt;/a&gt; . 그런 다음 엔진은 템플릿에서 CSRF 토큰뿐만 아니라이를 사용할 수 있도록해야합니다. 이것이 달성되는 방법은 각 백엔드에 달려 있습니다.</target>
        </trans-unit>
        <trans-unit id="528ada93743e93ff057cf83a95ad5d5fef5392e1" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;reverse&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;, test cases will be executed in the opposite order. This could be useful to debug tests that aren&amp;rsquo;t properly isolated and have side effects. &lt;a href=&quot;overview#order-of-tests&quot;&gt;Grouping by test class&lt;/a&gt; is preserved when using this option.</source>
          <target state="translated">경우 &lt;code&gt;reverse&lt;/code&gt; 입니다 &lt;code&gt;True&lt;/code&gt; , 테스트 케이스는 반대 순서로 실행됩니다. 이것은 제대로 격리되지 않았고 부작용이있는 테스트를 디버그하는 데 유용 할 수 있습니다. 이 옵션을 사용하면 &lt;a href=&quot;overview#order-of-tests&quot;&gt;테스트 클래스 별 그룹화&lt;/a&gt; 가 유지됩니다.</target>
        </trans-unit>
        <trans-unit id="43523508781181e89cf0252c143efbdcfd606d84" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;save()&lt;/code&gt; is passed a list of field names in keyword argument &lt;code&gt;update_fields&lt;/code&gt;, only the fields named in that list will be updated. This may be desirable if you want to update just one or a few fields on an object. There will be a slight performance benefit from preventing all of the model fields from being updated in the database. For example:</source>
          <target state="translated">경우 &lt;code&gt;save()&lt;/code&gt; 키워드 인수 필드 이름 목록이 전달됩니다 &lt;code&gt;update_fields&lt;/code&gt; 을 해당 목록에 이름 필드 만 업데이트됩니다. 객체에서 하나 또는 몇 개의 필드 만 업데이트하려는 경우에 바람직 할 수 있습니다. 데이터베이스에서 모든 모델 필드가 업데이트되지 않도록하면 약간의 성능 이점이 있습니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="758b7e8b01a01d0cf6d9accbc0e30c1dde12bb08" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;search_type&lt;/code&gt; is &lt;code&gt;'plain'&lt;/code&gt;, which is the default, the terms are treated as separate keywords. If &lt;code&gt;search_type&lt;/code&gt; is &lt;code&gt;'phrase'&lt;/code&gt;, the terms are treated as a single phrase. If &lt;code&gt;search_type&lt;/code&gt; is &lt;code&gt;'raw'&lt;/code&gt;, then you can provide a formatted search query with terms and operators. Read PostgreSQL&amp;rsquo;s &lt;a href=&quot;https://www.postgresql.org/docs/current/textsearch-controls.html#TEXTSEARCH-PARSING-QUERIES&quot;&gt;Full Text Search docs&lt;/a&gt; to learn about differences and syntax. Examples:</source>
          <target state="translated">경우 &lt;code&gt;search_type&lt;/code&gt; 있다 &lt;code&gt;'plain'&lt;/code&gt; 기본이다, 조건은 별도의 키워드로 처리됩니다. 경우 &lt;code&gt;search_type&lt;/code&gt; 있다 &lt;code&gt;'phrase'&lt;/code&gt; 용어는 하나의 문구로 처리됩니다. 경우 &lt;code&gt;search_type&lt;/code&gt; 있다 &lt;code&gt;'raw'&lt;/code&gt; , 당신은 용어와 연산자로 포맷 된 검색 질의를 제공 할 수 있습니다. 차이점과 구문에 대해 알아 보려면 PostgreSQL의 &lt;a href=&quot;https://www.postgresql.org/docs/current/textsearch-controls.html#TEXTSEARCH-PARSING-QUERIES&quot;&gt;전체 텍스트 검색 문서&lt;/a&gt; 를 읽으십시오 . 예 :</target>
        </trans-unit>
        <trans-unit id="eb44119253673674de8eae9f7f13c0327406af38" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;self.name&lt;/code&gt; is &lt;code&gt;'/example.com'&lt;/code&gt; this returns &lt;code&gt;'//example.com/'&lt;/code&gt; which, in turn, is a valid schema relative URL but not the expected &lt;code&gt;'/%2Fexample.com/'&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;self.name&lt;/code&gt; 이 &lt;code&gt;'/example.com'&lt;/code&gt; 인 경우 &lt;code&gt;'//example.com/'&lt;/code&gt; 을 반환합니다. 이는 &lt;code&gt;'/%2Fexample.com/'&lt;/code&gt; 이 아닌 유효한 스키마 상대 URL 입니다.</target>
        </trans-unit>
        <trans-unit id="4149f6c59a8a8f994df534f92c186cd9332cad77" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;set_prefix&lt;/code&gt; is True, setting the URL resolver script prefix to &lt;a href=&quot;settings#std:setting-FORCE_SCRIPT_NAME&quot;&gt;&lt;code&gt;FORCE_SCRIPT_NAME&lt;/code&gt;&lt;/a&gt; if defined, or &lt;code&gt;/&lt;/code&gt; otherwise.</source>
          <target state="translated">경우 &lt;code&gt;set_prefix&lt;/code&gt; 는 에 URL 확인자 스크립트 접두사 설정, True 인 &lt;a href=&quot;settings#std:setting-FORCE_SCRIPT_NAME&quot;&gt; &lt;code&gt;FORCE_SCRIPT_NAME&lt;/code&gt; 를&lt;/a&gt; 정의 경우, 또는 &lt;code&gt;/&lt;/code&gt; 그렇지.</target>
        </trans-unit>
        <trans-unit id="ab1cb60769ca7f5a89497ce33a2ae60ab8a9d4bd" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;some_list&lt;/code&gt; is &lt;code&gt;['a', 'b', 'c']&lt;/code&gt;, the output will be &lt;code&gt;['a', 'b']&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;some_list&lt;/code&gt; 이 있다 &lt;code&gt;['a', 'b', 'c']&lt;/code&gt; , 출력 될 것이다 &lt;code&gt;['a', 'b']&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3c918e03d3cc6b09be1e254bf14b4ced98312a29" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;strict&lt;/code&gt; is &lt;code&gt;False&lt;/code&gt; (the default), a country-specific variant may be returned when neither the language code nor its generic variant is found. For example, if only &lt;code&gt;'es-co'&lt;/code&gt; is in &lt;a href=&quot;settings#std:setting-LANGUAGES&quot;&gt;&lt;code&gt;LANGUAGES&lt;/code&gt;&lt;/a&gt;, that&amp;rsquo;s returned for &lt;code&gt;lang_code&lt;/code&gt;s like &lt;code&gt;'es'&lt;/code&gt; and &lt;code&gt;'es-ar'&lt;/code&gt;. Those matches aren&amp;rsquo;t returned if &lt;code&gt;strict=True&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;strict&lt;/code&gt; 가 &lt;code&gt;False&lt;/code&gt; (기본값) 인 경우 언어 코드 나 일반 변형이 없으면 국가 별 변형이 반환 될 수 있습니다. 경우에만 예를 들어, &lt;code&gt;'es-co'&lt;/code&gt; 에 &lt;a href=&quot;settings#std:setting-LANGUAGES&quot;&gt; &lt;code&gt;LANGUAGES&lt;/code&gt; &lt;/a&gt; , 그 반환 것 &lt;code&gt;lang_code&lt;/code&gt; 처럼의 &lt;code&gt;'es'&lt;/code&gt; 와 &lt;code&gt;'es-ar'&lt;/code&gt; . &lt;code&gt;strict=True&lt;/code&gt; 인 경우 해당 일치 항목이 반환되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="2ce60c41b82f95787b4d8ede724ae3aeb165c150" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;string_if_invalid&lt;/code&gt; contains a &lt;code&gt;'%s'&lt;/code&gt;, the format marker will be replaced with the name of the invalid variable.</source>
          <target state="translated">&lt;code&gt;string_if_invalid&lt;/code&gt; 에 &lt;code&gt;'%s'&lt;/code&gt; 가 포함되어 있으면 형식 표시가 유효하지 않은 변수의 이름으로 바뀝니다.</target>
        </trans-unit>
        <trans-unit id="d4e2d7c9cc527a004f01055080d5e8c772cbe415" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;strings_only&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;, don&amp;rsquo;t convert (some) non-string-like objects.</source>
          <target state="translated">&lt;code&gt;strings_only&lt;/code&gt; 가 &lt;code&gt;True&lt;/code&gt; 인 경우 문자열이 아닌 객체를 (일부) 변환하지 마십시오.</target>
        </trans-unit>
        <trans-unit id="02948597a9796eed77f937b00717f14fc87c09e4" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;test_labels&lt;/code&gt; has a value of &lt;code&gt;None&lt;/code&gt;, the test runner will search for tests in all files below the current directory whose names match its &lt;code&gt;pattern&lt;/code&gt; (see above).</source>
          <target state="translated">경우 &lt;code&gt;test_labels&lt;/code&gt; 은 값이 &lt;code&gt;None&lt;/code&gt; , 테스트 러너는 이름의 일치 현재 디렉토리 아래의 모든 파일 검사를 검색합니다 &lt;code&gt;pattern&lt;/code&gt; (위 참조).</target>
        </trans-unit>
        <trans-unit id="ffc18a42277d2f23ae1db5f8a3d415914924bb24" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;this_value&lt;/code&gt; is 175, &lt;code&gt;max_value&lt;/code&gt; is 200, and &lt;code&gt;max_width&lt;/code&gt; is 100, the image in the above example will be 88 pixels wide (because 175/200 = .875; .875 * 100 = 87.5 which is rounded up to 88).</source>
          <target state="translated">경우 &lt;code&gt;this_value&lt;/code&gt; 가 175이고, &lt;code&gt;max_value&lt;/code&gt; 200이고 &lt;code&gt;max_width&lt;/code&gt; 상기 예에서의 이미지는 88 개 픽셀 폭 것, 100 (= .875 200분의 175 때문에, 0.875 &amp;times; 100 (88) 반올림 = 87.5).</target>
        </trans-unit>
        <trans-unit id="4137df6686025784e6f4bd6dbe64263ec732c01b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;urlize&lt;/code&gt; is applied to text that already contains HTML markup, or to email addresses that contain single quotes (&lt;code&gt;'&lt;/code&gt;), things won&amp;rsquo;t work as expected. Apply this filter only to plain text.</source>
          <target state="translated">경우 &lt;code&gt;urlize&lt;/code&gt; 이 텍스트에 적용되어 이미 HTML 마크 업을 포함, 또는 작은 따옴표 (포함 된 이메일 주소로 &lt;code&gt;'&lt;/code&gt; 예상대로) 상황이 작동하지 않습니다. 이 필터는 일반 텍스트에만 적용하십시오.</target>
        </trans-unit>
        <trans-unit id="755d325efa931044c84d8862e2bdd301da420af5" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;validate_max=True&lt;/code&gt; is passed to &lt;a href=&quot;../../ref/forms/formsets#django.forms.formsets.formset_factory&quot;&gt;&lt;code&gt;formset_factory()&lt;/code&gt;&lt;/a&gt;, validation will also check that the number of forms in the data set, minus those marked for deletion, is less than or equal to &lt;code&gt;max_num&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;validate_max=True&lt;/code&gt; 로 전달된다 &lt;a href=&quot;../../ref/forms/formsets#django.forms.formsets.formset_factory&quot;&gt; &lt;code&gt;formset_factory()&lt;/code&gt; &lt;/a&gt; 검증은 또한 데이터 세트의 형태의 수를 뺀 삭제 표시가 그 미만임을 확인하거나 동일 할 &lt;code&gt;max_num&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0c7a70e9a93e3c5c85204a071c7a02b943a478cc" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;validate_min=True&lt;/code&gt; is passed to &lt;a href=&quot;../../ref/forms/formsets#django.forms.formsets.formset_factory&quot;&gt;&lt;code&gt;formset_factory()&lt;/code&gt;&lt;/a&gt;, validation will also check that the number of forms in the data set, minus those marked for deletion, is greater than or equal to &lt;code&gt;min_num&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;validate_min=True&lt;/code&gt; 로 전달된다 &lt;a href=&quot;../../ref/forms/formsets#django.forms.formsets.formset_factory&quot;&gt; &lt;code&gt;formset_factory()&lt;/code&gt; &lt;/a&gt; 검증은 데이터 세트의 형태 뺀 삭제 표시 자들의 개수보다 큰 것을 확인하거나 동일 할 &lt;code&gt;min_num&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8c6735bdaa6045f1ec97e336418abe747d7949ed" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is 123456789, the output would be &lt;code&gt;117.7 MB&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;value&lt;/code&gt; 123456789입니다, 출력이 될 것이다 &lt;code&gt;117.7 MB&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4f3f2f373b391d75ad0829ab7341020c580a64d9" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;&quot;&quot;&lt;/code&gt; (the empty string), the output will be &lt;code&gt;nothing&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;value&lt;/code&gt; 있다 &lt;code&gt;&quot;&quot;&lt;/code&gt; (빈 문자열), 출력은 없을 것 &lt;code&gt;nothing&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="362ec1cf5c026a9ec9908c69ec686dfa7658cd06" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;&quot;&amp;lt;b&amp;gt;Joel&amp;lt;/b&amp;gt; &amp;lt;button&amp;gt;is&amp;lt;/button&amp;gt; a &amp;lt;span&amp;gt;slug&amp;lt;/span&amp;gt;&quot;&lt;/code&gt; the return value will be &lt;code&gt;&quot;Joel is a slug&quot;&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;value&lt;/code&gt; 인 &lt;code&gt;&quot;&amp;lt;b&amp;gt;Joel&amp;lt;/b&amp;gt; &amp;lt;button&amp;gt;is&amp;lt;/button&amp;gt; a &amp;lt;span&amp;gt;slug&amp;lt;/span&amp;gt;&quot;&lt;/code&gt; 반환 값은 &lt;code&gt;&quot;Joel is a slug&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e691b98f5c994a59981e42ad33e040c5b50a1e37" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;&quot;&amp;lt;b&amp;gt;Joel&amp;lt;/b&amp;gt; &amp;lt;button&amp;gt;is&amp;lt;/button&amp;gt; a &amp;lt;span&amp;gt;slug&amp;lt;/span&amp;gt;&quot;&lt;/code&gt;, the output will be &lt;code&gt;&quot;Joel is a slug&quot;&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;value&lt;/code&gt; 인 &lt;code&gt;&quot;&amp;lt;b&amp;gt;Joel&amp;lt;/b&amp;gt; &amp;lt;button&amp;gt;is&amp;lt;/button&amp;gt; a &amp;lt;span&amp;gt;slug&amp;lt;/span&amp;gt;&quot;&lt;/code&gt; , 출력 것 &lt;code&gt;&quot;Joel is a slug&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3f8e9ee502ff5012d2ebcd6a7cefdc7edffdf62b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;&quot;&amp;lt;p&amp;gt;Joel is a slug&amp;lt;/p&amp;gt;&quot;&lt;/code&gt;, the output will be &lt;code&gt;&quot;&amp;lt;p&amp;gt;Joel i&amp;hellip;&amp;lt;/p&amp;gt;&quot;&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;value&lt;/code&gt; 인 &lt;code&gt;&quot;&amp;lt;p&amp;gt;Joel is a slug&amp;lt;/p&amp;gt;&quot;&lt;/code&gt; 출력이있을 것 &lt;code&gt;&quot;&amp;lt;p&amp;gt;Joel i&amp;hellip;&amp;lt;/p&amp;gt;&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d5e14c0338556cf8d588b052d7020856a9e0d085" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;&quot;&amp;lt;p&amp;gt;Joel is a slug&amp;lt;/p&amp;gt;&quot;&lt;/code&gt;, the output will be &lt;code&gt;&quot;&amp;lt;p&amp;gt;Joel is &amp;hellip;&amp;lt;/p&amp;gt;&quot;&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;value&lt;/code&gt; 인 &lt;code&gt;&quot;&amp;lt;p&amp;gt;Joel is a slug&amp;lt;/p&amp;gt;&quot;&lt;/code&gt; 출력이있을 것 &lt;code&gt;&quot;&amp;lt;p&amp;gt;Joel is &amp;hellip;&amp;lt;/p&amp;gt;&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="09787e815cb703f7bdecda5fd0867ef3e441c8b5" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;&quot;?test=1&amp;amp;me=2&quot;&lt;/code&gt;, the output will be &lt;code&gt;&quot;?test=1&amp;amp;amp;me=2&quot;&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;value&lt;/code&gt; 인 &lt;code&gt;&quot;?test=1&amp;amp;me=2&quot;&lt;/code&gt; 출력이있을 것 &lt;code&gt;&quot;?test=1&amp;amp;amp;me=2&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="769218d7736e8cea14dbbebb7c1aca16fb56ff9e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;&quot;Check out www.djangoproject.com&quot;&lt;/code&gt;, the output will be &lt;code&gt;&quot;Check out &amp;lt;a href=&quot;http://www.djangoproject.com&quot;
rel=&quot;nofollow&quot;&amp;gt;www.djangoproject.com&amp;lt;/a&amp;gt;&quot;&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;value&lt;/code&gt; 있다 &lt;code&gt;&quot;Check out www.djangoproject.com&quot;&lt;/code&gt; 출력이 될 것 &lt;code&gt;&quot;Check out &amp;lt;a href=&quot;http://www.djangoproject.com&quot; rel=&quot;nofollow&quot;&amp;gt;www.djangoproject.com&amp;lt;/a&amp;gt;&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="740ff784b31d6ec0305563ffa7d9222904379a81" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;&quot;Check out www.djangoproject.com&quot;&lt;/code&gt;, the output would be &lt;code&gt;'Check out &amp;lt;a href=&quot;http://www.djangoproject.com&quot;
rel=&quot;nofollow&quot;&amp;gt;www.djangoproj&amp;hellip;&amp;lt;/a&amp;gt;'&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;value&lt;/code&gt; 있다 &lt;code&gt;&quot;Check out www.djangoproject.com&quot;&lt;/code&gt; 출력이 될 것이다, &lt;code&gt;'Check out &amp;lt;a href=&quot;http://www.djangoproject.com&quot; rel=&quot;nofollow&quot;&amp;gt;www.djangoproj&amp;hellip;&amp;lt;/a&amp;gt;'&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="767db1d4011700144ef49c99462e47c02a6c2278" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;&quot;Django&quot;&lt;/code&gt;, the output will be &lt;code&gt;&quot;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Django&amp;nbsp;&amp;nbsp;&amp;nbsp; &quot;&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;value&lt;/code&gt; 있다 &lt;code&gt;&quot;Django&quot;&lt;/code&gt; 출력이 될 것 &lt;code&gt;&quot;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Django&amp;nbsp;&amp;nbsp;&amp;nbsp; &quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="88d4c2db75d2d463013aff515a4e539aaecba50a" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;&quot;I'm using Django&quot;&lt;/code&gt;, the output will be &lt;code&gt;&quot;I\'m using Django&quot;&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;value&lt;/code&gt; 입니다 &lt;code&gt;&quot;I'm using Django&quot;&lt;/code&gt; , 출력이 될 것 &lt;code&gt;&quot;I\'m using Django&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3b1301998ce64c5e4b7385eb5a9c1ed65276d48e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;&quot;Joel is a slug&quot;&lt;/code&gt;, the output will be &lt;code&gt;&quot;JOEL IS A SLUG&quot;&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;value&lt;/code&gt; 인 &lt;code&gt;&quot;Joel is a slug&quot;&lt;/code&gt; 출력이있을 것 &lt;code&gt;&quot;JOEL IS A SLUG&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="dfa84605a1f0d197bce09323aca3dc32fb281b29" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;&quot;Joel is a slug&quot;&lt;/code&gt;, the output will be &lt;code&gt;&quot;Joel i&amp;hellip;&quot;&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;value&lt;/code&gt; 있다 &lt;code&gt;&quot;Joel is a slug&quot;&lt;/code&gt; 출력이 될 것 &lt;code&gt;&quot;Joel i&amp;hellip;&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="76a39aa993601030e66d46ab03d548fbf5f2434f" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;&quot;Joel is a slug&quot;&lt;/code&gt;, the output will be &lt;code&gt;&quot;Joel is &amp;hellip;&quot;&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;value&lt;/code&gt; 있다 &lt;code&gt;&quot;Joel is a slug&quot;&lt;/code&gt; , 출력이 될 것 &lt;code&gt;&quot;Joel is &amp;hellip;&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="698cbda96e629b682048b0c4d5991a17b4894cea" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;&quot;Joel is a slug&quot;&lt;/code&gt;, the output will be &lt;code&gt;&quot;joel-is-a-slug&quot;&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;value&lt;/code&gt; 된다 &lt;code&gt;&quot;Joel is a slug&quot;&lt;/code&gt; , 출력이 될 것 &lt;code&gt;&quot;joel-is-a-slug&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="fc76eaef5a37e6719179bb1b819008595736dfb2" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;&quot;Joel is a slug&quot;&lt;/code&gt;, the output will be &lt;code&gt;4&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;value&lt;/code&gt; 된다 &lt;code&gt;&quot;Joel is a slug&quot;&lt;/code&gt; 출력이됩니다 &lt;code&gt;4&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="410449c9d652bd564e1760e072d78e9e87b32302" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;&quot;String with spaces&quot;&lt;/code&gt;, the output will be &lt;code&gt;&quot;Stringwithspaces&quot;&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;value&lt;/code&gt; 인 &lt;code&gt;&quot;String with spaces&quot;&lt;/code&gt; , 출력은 것 &lt;code&gt;&quot;Stringwithspaces&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d91bcc161c250f9c6d522fa815ad28f244f63f29" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;&quot;django&quot;&lt;/code&gt;, the output will be &lt;code&gt;&quot;Django&quot;&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;value&lt;/code&gt; 있다 &lt;code&gt;&quot;django&quot;&lt;/code&gt; , 출력이 될 것 &lt;code&gt;&quot;Django&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b898df2bd8f9782ff2ac117ad19c1990ad06b75e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;&quot;https://www.example.org/&quot;&lt;/code&gt;, the output will be &lt;code&gt;&quot;https%3A%2F%2Fwww.example.org%2F&quot;&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;value&lt;/code&gt; 인 &lt;code&gt;&quot;https://www.example.org/&quot;&lt;/code&gt; 출력이있을 것 &lt;code&gt;&quot;https%3A%2F%2Fwww.example.org%2F&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="03a8dfb79e75755980218848dff7e849b6a16325" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;&quot;https://www.example.org/foo?a=b&amp;amp;c=d&quot;&lt;/code&gt;, the output will be &lt;code&gt;&quot;https%3A//www.example.org/foo%3Fa%3Db%26c%3Dd&quot;&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;value&lt;/code&gt; 인 &lt;code&gt;&quot;https://www.example.org/foo?a=b&amp;amp;c=d&quot;&lt;/code&gt; 출력이있을 것 &lt;code&gt;&quot;https%3A//www.example.org/foo%3Fa%3Db%26c%3Dd&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e8dcb3a8c75858398ed0fa2c246e7342a5a9ba89" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;&quot;my FIRST post&quot;&lt;/code&gt;, the output will be &lt;code&gt;&quot;My First Post&quot;&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;value&lt;/code&gt; 입니다 &lt;code&gt;&quot;my FIRST post&quot;&lt;/code&gt; , 출력이 될 것 &lt;code&gt;&quot;My First Post&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b41984a04577beda8d7ddaa541cd5c8bfe22183b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;&quot;testing\r\njavascript \'string&quot; &amp;lt;b&amp;gt;escaping&amp;lt;/b&amp;gt;&quot;&lt;/code&gt;, the output will be &lt;code&gt;&quot;testing\\u000D\\u000Ajavascript \\u0027string\\u0022 \\u003Cb\\u003Eescaping\\u003C/b\\u003E&quot;&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;value&lt;/code&gt; 이다 &lt;code&gt;&quot;testing\r\njavascript \'string&quot; &amp;lt;b&amp;gt;escaping&amp;lt;/b&amp;gt;&quot;&lt;/code&gt; 는 출력 될 것 &lt;code&gt;&quot;testing\\u000D\\u000Ajavascript \\u0027string\\u0022 \\u003Cb\\u003Eescaping\\u003C/b\\u003E&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7889dd48460a146383ae914001047479ef55de85" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;0&lt;/code&gt;, the user&amp;rsquo;s session cookie will expire when the user&amp;rsquo;s Web browser is closed.</source>
          <target state="translated">경우 &lt;code&gt;value&lt;/code&gt; 입니다 &lt;code&gt;0&lt;/code&gt; 사용자의 웹 브라우저를 닫을 때, 사용자의 세션 쿠키가 만료됩니다.</target>
        </trans-unit>
        <trans-unit id="3c553dfd78a3f0de982d32c7b5033452e8746ba1" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;10&lt;/code&gt;, the output will be &lt;code&gt;1.000000E+01&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;value&lt;/code&gt; 이다 &lt;code&gt;10&lt;/code&gt; , 출력 될 것이다 &lt;code&gt;1.000000E+01&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d24c684374af1d1c25ab9b268e805e2a2d4c3a21" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;123456789&lt;/code&gt;, the output will be &lt;code&gt;8&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;value&lt;/code&gt; 이다 &lt;code&gt;123456789&lt;/code&gt; , 출력 될 것이다 &lt;code&gt;8&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c286f249c65363c49d41fb5d1e8d5d182f5584b3" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;21&lt;/code&gt;, the output would be &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;value&lt;/code&gt; 이다 &lt;code&gt;21&lt;/code&gt; , 출력이 될 것 &lt;code&gt;True&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="94d30195d6ca92c8171cecacb58be30e535aa470" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;4&lt;/code&gt;, then the output will be &lt;code&gt;6&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;value&lt;/code&gt; 이다 &lt;code&gt;4&lt;/code&gt; , 출력은 것 &lt;code&gt;6&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a692698093e8de528f1a1cbd97383f7022734827" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;800-COLLECT&lt;/code&gt;, the output will be &lt;code&gt;800-2655328&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;value&lt;/code&gt; 인 &lt;code&gt;800-COLLECT&lt;/code&gt; , 출력 될 것이다 &lt;code&gt;800-2655328&lt;/code&gt; 를 .</target>
        </trans-unit>
        <trans-unit id="39b16f1b864fe3ace79d15160dae5c90ca2baf33" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;Django&lt;/code&gt;, the output will be &lt;code&gt;&quot;&amp;nbsp;&amp;nbsp;&amp;nbsp; Django&quot;&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;value&lt;/code&gt; 이다 &lt;code&gt;Django&lt;/code&gt; , 출력이 될 것 &lt;code&gt;&quot;&amp;nbsp;&amp;nbsp;&amp;nbsp; Django&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1b3e719615b2ce65d002b3a522862acf99a04139" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;Django&lt;/code&gt;, the output will be &lt;code&gt;&quot;Django&amp;nbsp;&amp;nbsp;&amp;nbsp; &quot;&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;value&lt;/code&gt; 이다 &lt;code&gt;Django&lt;/code&gt; , 출력이 될 것 &lt;code&gt;&quot;Django&amp;nbsp;&amp;nbsp;&amp;nbsp; &quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="78a703a23fba3f90c70f851ca663092d08fdd36a" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;Joel is a slug&lt;/code&gt;, the output would be:</source>
          <target state="translated">경우 &lt;code&gt;value&lt;/code&gt; 입니다 &lt;code&gt;Joel is a slug&lt;/code&gt; , 출력은 다음과 같습니다</target>
        </trans-unit>
        <trans-unit id="bbabf0348a25f576ca3e535b2d97041ed032a179" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;Joel\nis a slug&lt;/code&gt;, the output will be &lt;code&gt;&amp;lt;p&amp;gt;Joel&amp;lt;br&amp;gt;is a
slug&amp;lt;/p&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;value&lt;/code&gt; 이다 &lt;code&gt;Joel\nis a slug&lt;/code&gt; , 출력 될 것이다 &lt;code&gt;&amp;lt;p&amp;gt;Joel&amp;lt;br&amp;gt;is a slug&amp;lt;/p&amp;gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1d0e1ab9aefbde6cb30a949c02a255d7270744a8" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;Joel\nis a slug&lt;/code&gt;, the output will be &lt;code&gt;Joel&amp;lt;br&amp;gt;is a
slug&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;value&lt;/code&gt; 입니다 &lt;code&gt;Joel\nis a slug&lt;/code&gt; , 출력이됩니다 &lt;code&gt;Joel&amp;lt;br&amp;gt;is a slug&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3e38dc6e53ea0e75a764b87ee8c019666da2345e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;None&lt;/code&gt;, the output will be &lt;code&gt;nothing&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;value&lt;/code&gt; 없습니다 &lt;code&gt;None&lt;/code&gt; , 출력은 없을 것 &lt;code&gt;nothing&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="001b566bffd4b80501ba95ca798e628579b0ab7b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;None&lt;/code&gt;, the session reverts to using the global session expiry policy.</source>
          <target state="translated">경우 &lt;code&gt;value&lt;/code&gt; 없습니다 &lt;code&gt;None&lt;/code&gt; , 세션은 글로벌 세션 만료 정책을 사용으로 돌아갑니다.</target>
        </trans-unit>
        <trans-unit id="5dedd9c095b41ac7753da699bb1e880646273b4a" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;Totally LOVING this Album!&lt;/code&gt;, the output will be &lt;code&gt;totally loving this album!&lt;/code&gt;.</source>
          <target state="translated">만약 &lt;code&gt;value&lt;/code&gt; 되어 &lt;code&gt;Totally LOVING this Album!&lt;/code&gt; , 출력은 &lt;code&gt;totally loving this album!&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="61c4e59683ff8d7dd92dbe8e1b3b2066f63beab0" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;['a', 'b', 'c', 'd']&lt;/code&gt; or &lt;code&gt;&quot;abcd&quot;&lt;/code&gt;, the output will be &lt;code&gt;4&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;value&lt;/code&gt; 이다 &lt;code&gt;['a', 'b', 'c', 'd']&lt;/code&gt; 또는 &lt;code&gt;&quot;abcd&quot;&lt;/code&gt; , 출력은 것 &lt;code&gt;4&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="53bca12a161e9dd5d7b927148faebf050de63371" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;['a', 'b', 'c', 'd']&lt;/code&gt; or &lt;code&gt;&quot;abcd&quot;&lt;/code&gt;, the output will be &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;value&lt;/code&gt; 이다 &lt;code&gt;['a', 'b', 'c', 'd']&lt;/code&gt; 또는 &lt;code&gt;&quot;abcd&quot;&lt;/code&gt; , 출력은 것 &lt;code&gt;True&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d149d18212e0e86edab9f7f00ad13bcc30cd131c" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;['a', 'b', 'c', 'd']&lt;/code&gt;, the output will be &lt;code&gt;4&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;value&lt;/code&gt; 이다 &lt;code&gt;['a', 'b', 'c', 'd']&lt;/code&gt; , 출력은 것 &lt;code&gt;4&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="64fc5562b8f34bb2258acd150773d8d63506b010" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is a &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.datetime&quot;&gt;&lt;code&gt;datetime&lt;/code&gt;&lt;/a&gt; object (e.g., the result of &lt;code&gt;datetime.datetime.now()&lt;/code&gt;), the output will be the string &lt;code&gt;'Wed 09 Jan 2008'&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;value&lt;/code&gt; A는 &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.datetime&quot;&gt; &lt;code&gt;datetime&lt;/code&gt; &lt;/a&gt; 객체 (예를 들어, 결과 &lt;code&gt;datetime.datetime.now()&lt;/code&gt; ), 출력은 문자열입니다 &lt;code&gt;'Wed 09 Jan 2008'&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0395d03d9197ccb31dfcace99ff8aeebe3ca82cf" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is a &lt;code&gt;datetime&lt;/code&gt; or &lt;code&gt;timedelta&lt;/code&gt; object, the session will expire at that specific date/time. Note that &lt;code&gt;datetime&lt;/code&gt; and &lt;code&gt;timedelta&lt;/code&gt; values are only serializable if you are using the &lt;a href=&quot;#django.contrib.sessions.serializers.PickleSerializer&quot;&gt;&lt;code&gt;PickleSerializer&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">경우 &lt;code&gt;value&lt;/code&gt; A는 &lt;code&gt;datetime&lt;/code&gt; 또는 &lt;code&gt;timedelta&lt;/code&gt; 개체, 세션은 특정 날짜 / 시간에 만료됩니다. 참고 것을 &lt;code&gt;datetime&lt;/code&gt; 와 &lt;code&gt;timedelta&lt;/code&gt; 당신이 사용하는 경우 값은 직렬화 있습니다 &lt;a href=&quot;#django.contrib.sessions.serializers.PickleSerializer&quot;&gt; &lt;code&gt;PickleSerializer&lt;/code&gt; 을&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="0b5d654bfc7f582442d4ec52b97710fc6f52860f" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is an integer, the session will expire after that many seconds of inactivity. For example, calling &lt;code&gt;request.session.set_expiry(300)&lt;/code&gt; would make the session expire in 5 minutes.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; 가 정수이면 몇 초 동안 활동이 없으면 세션이 만료됩니다. 예를 들어 &lt;code&gt;request.session.set_expiry(300)&lt;/code&gt; 호출 하면 세션이 5 분 안에 만료됩니다.</target>
        </trans-unit>
        <trans-unit id="e742281c4c6418f5b4ad30c98a1be96235d497aa" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is equivalent to &lt;code&gt;datetime.datetime.now()&lt;/code&gt;, the output will be the string &lt;code&gt;&quot;01:23&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; 이 &lt;code&gt;datetime.datetime.now()&lt;/code&gt; 와 동일한 경우 출력은 문자열 &lt;code&gt;&quot;01:23&quot;&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="fcb3b78b97e6fee24b4a40ac3d2e8f3ce6ba8572" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is the dictionary &lt;code&gt;{'hello': 'world'}&lt;/code&gt;, the output will be:</source>
          <target state="translated">경우 &lt;code&gt;value&lt;/code&gt; 사전이다 &lt;code&gt;{'hello': 'world'}&lt;/code&gt; 출력은 다음과 같습니다</target>
        </trans-unit>
        <trans-unit id="11f959b07996e38ca116ea1d82c203bfc00d8e34" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is the list &lt;code&gt;['a', 'b', 'c', 'd']&lt;/code&gt;, the output could be &lt;code&gt;&quot;b&quot;&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;value&lt;/code&gt; 리스트이다 &lt;code&gt;['a', 'b', 'c', 'd']&lt;/code&gt; , 출력 될 수있는 &lt;code&gt;&quot;b&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2c3473a8e4f8140a0e16b67b255243a22fb2f528" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is the list &lt;code&gt;['a', 'b', 'c', 'd']&lt;/code&gt;, the output will be the string &lt;code&gt;&quot;d&quot;&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;value&lt;/code&gt; 리스트이다 &lt;code&gt;['a', 'b', 'c', 'd']&lt;/code&gt; , 출력 스트링 것 &lt;code&gt;&quot;d&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8d8d8a7505600a0d6f9c35b9d459454fa1379e79" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is the list &lt;code&gt;['a', 'b', 'c']&lt;/code&gt;, the output will be &lt;code&gt;'a'&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;value&lt;/code&gt; 리스트이다 &lt;code&gt;['a', 'b', 'c']&lt;/code&gt; 출력이 될 것이다 &lt;code&gt;'a'&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="29580353d7769d46a2677481abfdaba1144ef6ed" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is the list &lt;code&gt;['a', 'b', 'c']&lt;/code&gt;, the output will be the string &lt;code&gt;&quot;a // b // c&quot;&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;value&lt;/code&gt; 리스트이다 &lt;code&gt;['a', 'b', 'c']&lt;/code&gt; 출력 문자열 것이다 &lt;code&gt;&quot;a // b // c&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7fe07b5b9c67f950be5a22ac0321698d6f5f8d94" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is the string &lt;code&gt;&quot;Joel&quot;&lt;/code&gt;, the output would be the list &lt;code&gt;['J', 'o', 'e', 'l']&lt;/code&gt;. If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;123&lt;/code&gt;, the output will be the list &lt;code&gt;['1', '2', '3']&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;value&lt;/code&gt; 문자열 인 &lt;code&gt;&quot;Joel&quot;&lt;/code&gt; , 출력은 목록 것 &lt;code&gt;['J', 'o', 'e', 'l']&lt;/code&gt; . 경우 &lt;code&gt;value&lt;/code&gt; 이다 &lt;code&gt;123&lt;/code&gt; , 출력리스트를 것 &lt;code&gt;['1', '2', '3']&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="fdd0402e2118e34facbcfab001befd8ad7443b87" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; is:</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; 이 다음과 같은 경우 :</target>
        </trans-unit>
        <trans-unit id="d11b28c45cbb035e65f1544fc9f37f977239d634" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; isn&amp;rsquo;t provided or is empty, the above will display &amp;ldquo;&lt;code&gt;nothing&lt;/code&gt;&amp;rdquo;.</source>
          <target state="translated">경우 &lt;code&gt;value&lt;/code&gt; 제공되거나 비어되지 않으며, 위의 &quot;는 표시되지 않습니다 &lt;code&gt;nothing&lt;/code&gt; .&quot;</target>
        </trans-unit>
        <trans-unit id="817a7abcfb83a78664a778e654e31a8f9e0d2826" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;var&lt;/code&gt; is set to &lt;code&gt;'class1 onmouseover=javascript:func()'&lt;/code&gt;, this can result in unauthorized JavaScript execution, depending on how the browser renders imperfect HTML. (Quoting the attribute value would fix this case.)</source>
          <target state="translated">경우 &lt;code&gt;var&lt;/code&gt; 설정되어 &lt;code&gt;'class1 onmouseover=javascript:func()'&lt;/code&gt; ,이 브라우저가 불완전한 HTML 렌더링 방식에 따라, 무단 자바 스크립트 실행이 발생할 수 있습니다. (속성 값을 인용하면이 경우가 해결됩니다.)</target>
        </trans-unit>
        <trans-unit id="f933e059630c72c200d25c5fdd28a82f3d46a177" translate="yes" xml:space="preserve">
          <source>If Django created two independent test databases, this would break any tests that expected replication to occur. However, the &lt;code&gt;replica&lt;/code&gt; database has been configured as a test mirror (using the &lt;a href=&quot;../../ref/settings#std:setting-TEST_MIRROR&quot;&gt;&lt;code&gt;MIRROR&lt;/code&gt;&lt;/a&gt; test setting), indicating that under testing, &lt;code&gt;replica&lt;/code&gt; should be treated as a mirror of &lt;code&gt;default&lt;/code&gt;.</source>
          <target state="translated">Django가 독립적 인 테스트 데이터베이스를 두 개 만들면 복제가 발생할 것으로 예상되는 테스트가 중단됩니다. 그러나 &lt;code&gt;replica&lt;/code&gt; 데이터베이스는 &lt;a href=&quot;../../ref/settings#std:setting-TEST_MIRROR&quot;&gt; &lt;code&gt;MIRROR&lt;/code&gt; &lt;/a&gt; 테스트 설정을 사용하여 테스트 미러로 구성되어 테스트 중에 &lt;code&gt;replica&lt;/code&gt; 이 &lt;code&gt;default&lt;/code&gt; 미러로 처리되어야 함을 나타냅니다 .</target>
        </trans-unit>
        <trans-unit id="9036d692b9906336f90c7855a3028c2226003914" translate="yes" xml:space="preserve">
          <source>If Django is installed, you should see the version of your installation. If it isn&amp;rsquo;t, you&amp;rsquo;ll get an error telling &amp;ldquo;No module named django&amp;rdquo;.</source>
          <target state="translated">Django가 설치되어 있으면 설치 버전이 표시되어야합니다. 그렇지 않은 경우 &quot;django라는 모듈 없음&quot;이라는 오류 메시지가 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="eb49e9ea4d2a972ace1883451b923566c522dc81" translate="yes" xml:space="preserve">
          <source>If Django&amp;rsquo;s built-in validators are not sufficient, you can write your own password validators. Validators have a fairly small interface. They must implement two methods:</source>
          <target state="translated">Django의 내장 유효성 검사기가 충분하지 않으면 자신의 암호 유효성 검사기를 작성할 수 있습니다. 유효성 검사기는 인터페이스가 상당히 작습니다. 두 가지 방법을 구현해야합니다.</target>
        </trans-unit>
        <trans-unit id="5aaa5cbe96b1f59dab0cb77d8d9c394e298d33d7" translate="yes" xml:space="preserve">
          <source>If NumPy is available, the data is returned as NumPy array. For performance reasons, it is highly recommended to use NumPy.</source>
          <target state="translated">NumPy를 사용할 수 있으면 데이터가 NumPy 배열로 반환됩니다. 성능상의 이유로 NumPy를 사용하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="4f35abfa4df178cd3d5446f3665622a0713685e7" translate="yes" xml:space="preserve">
          <source>If a &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin.queryset&quot;&gt;&lt;code&gt;queryset&lt;/code&gt;&lt;/a&gt; is given, the model for that queryset will be used.</source>
          <target state="translated">경우 &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin.queryset&quot;&gt; &lt;code&gt;queryset&lt;/code&gt; &lt;/a&gt; 주어, 그의 검색어에 대한 모델이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="5a0e09204d58d9f6314a4467ac19b26072f6cdbf" translate="yes" xml:space="preserve">
          <source>If a &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;ForeignKey&lt;/code&gt;&lt;/a&gt; field has &lt;code&gt;null=True&lt;/code&gt; set (i.e., it allows &lt;code&gt;NULL&lt;/code&gt; values), you can assign &lt;code&gt;None&lt;/code&gt; to remove the relation. Example:</source>
          <target state="translated">경우 &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey&quot;&gt; &lt;code&gt;ForeignKey&lt;/code&gt; &lt;/a&gt; 필드가 &lt;code&gt;null=True&lt;/code&gt; 설정 (즉, 그것은 수 있습니다 &lt;code&gt;NULL&lt;/code&gt; 의 값을), 당신은 할당 할 수 &lt;code&gt;None&lt;/code&gt; 의 관계를 제거합니다. 예:</target>
        </trans-unit>
        <trans-unit id="dd1b92eec1467f8420d4b8fea716bef4edcfbc98" translate="yes" xml:space="preserve">
          <source>If a &lt;a href=&quot;fields#django.forms.Field&quot;&gt;&lt;code&gt;Field&lt;/code&gt;&lt;/a&gt; defines &lt;a href=&quot;fields#django.forms.Field.initial&quot;&gt;&lt;code&gt;initial&lt;/code&gt;&lt;/a&gt;&lt;em&gt;and&lt;/em&gt; you include &lt;a href=&quot;#django.forms.Form.initial&quot;&gt;&lt;code&gt;initial&lt;/code&gt;&lt;/a&gt; when instantiating the &lt;code&gt;Form&lt;/code&gt;, then the latter &lt;code&gt;initial&lt;/code&gt; will have precedence. In this example, &lt;code&gt;initial&lt;/code&gt; is provided both at the field level and at the form instance level, and the latter gets precedence:</source>
          <target state="translated">경우 &lt;a href=&quot;fields#django.forms.Field&quot;&gt; &lt;code&gt;Field&lt;/code&gt; &lt;/a&gt; 정의 &lt;a href=&quot;fields#django.forms.Field.initial&quot;&gt; &lt;code&gt;initial&lt;/code&gt; &lt;/a&gt;&lt;em&gt; 와&lt;/em&gt; 당신이 포함 &lt;a href=&quot;#django.forms.Form.initial&quot;&gt; &lt;code&gt;initial&lt;/code&gt; &lt;/a&gt; 인스턴스화 할 때 &lt;code&gt;Form&lt;/code&gt; , 다음 후자의 &lt;code&gt;initial&lt;/code&gt; 우선 순위가됩니다. 이 예 에서 필드 레벨과 양식 인스턴스 레벨 모두에서 &lt;code&gt;initial&lt;/code&gt; 이 제공되고 후자가 우선합니다.</target>
        </trans-unit>
        <trans-unit id="23297be1ec8de83f5e39f061355f1a7e31301819" translate="yes" xml:space="preserve">
          <source>If a &lt;a href=&quot;measure#django.contrib.gis.measure.Distance&quot;&gt;&lt;code&gt;Distance&lt;/code&gt;&lt;/a&gt; object is used, it may be expressed in any units (the SQL generated will use units converted to those of the field); otherwise, numeric parameters are assumed to be in the units of the field.</source>
          <target state="translated">&lt;a href=&quot;measure#django.contrib.gis.measure.Distance&quot;&gt; &lt;code&gt;Distance&lt;/code&gt; &lt;/a&gt; 객체가 사용되는 경우 임의의 단위로 표현 될 수 있습니다 (생성 된 SQL은 필드의 단위로 변환 된 단위를 사용합니다). 그렇지 않으면 숫자 매개 변수는 필드 단위로 가정됩니다.</target>
        </trans-unit>
        <trans-unit id="0953444ca96ddeaf1b7959fbef6cb9995213c823" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;&quot;using&quot;&lt;/code&gt; key is present in &lt;code&gt;kwargs&lt;/code&gt; it is used as the database alias for which to check the number of queries:</source>
          <target state="translated">경우 &lt;code&gt;&quot;using&quot;&lt;/code&gt; 키에 존재 &lt;code&gt;kwargs&lt;/code&gt; 로 그것은 쿼리 수를 확인하기위한 데이터베이스 별칭으로 사용된다 :</target>
        </trans-unit>
        <trans-unit id="ec4e6b65d87815d29d8a2d46ec2b00f298d5d66e" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;Field&lt;/code&gt; has &lt;code&gt;required=False&lt;/code&gt; and you pass &lt;code&gt;clean()&lt;/code&gt; an empty value, then &lt;code&gt;clean()&lt;/code&gt; will return a &lt;em&gt;normalized&lt;/em&gt; empty value rather than raising &lt;code&gt;ValidationError&lt;/code&gt;. For &lt;code&gt;CharField&lt;/code&gt;, this will be an empty string. For other &lt;code&gt;Field&lt;/code&gt; classes, it might be &lt;code&gt;None&lt;/code&gt;. (This varies from field to field.)</source>
          <target state="translated">경우 &lt;code&gt;Field&lt;/code&gt; 있다 &lt;code&gt;required=False&lt;/code&gt; 하고 통과 &lt;code&gt;clean()&lt;/code&gt; 빈 값을 다음 &lt;code&gt;clean()&lt;/code&gt; 반환하며 &lt;em&gt;정규화&lt;/em&gt; 인상보다는 빈 값을 &lt;code&gt;ValidationError&lt;/code&gt; 을 . 들어 &lt;code&gt;CharField&lt;/code&gt; 이 빈 문자열입니다. 다른 &lt;code&gt;Field&lt;/code&gt; 클래스의 경우 &lt;code&gt;None&lt;/code&gt; 일 수 있습니다 . (이것은 필드마다 다릅니다.)</target>
        </trans-unit>
        <trans-unit id="95ebbce5c79519d1d18da9be429b333faaaf5fc6" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;SuspiciousOperation&lt;/code&gt; exception reaches the WSGI handler level it is logged at the &lt;code&gt;Error&lt;/code&gt; level and results in a &lt;a href=&quot;request-response#django.http.HttpResponseBadRequest&quot;&gt;&lt;code&gt;HttpResponseBadRequest&lt;/code&gt;&lt;/a&gt;. See the &lt;a href=&quot;../topics/logging&quot;&gt;logging documentation&lt;/a&gt; for more information.</source>
          <target state="translated">경우 &lt;code&gt;SuspiciousOperation&lt;/code&gt; 의 예외가 WSGI 핸들러 수준에 도달 그것은 기록됩니다 &lt;code&gt;Error&lt;/code&gt; A의 수준과 결과 &lt;a href=&quot;request-response#django.http.HttpResponseBadRequest&quot;&gt; &lt;code&gt;HttpResponseBadRequest&lt;/code&gt; &lt;/a&gt; . 자세한 내용은 &lt;a href=&quot;../topics/logging&quot;&gt;로깅 설명서&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="f5bcb830a3b55a5db496eeac9f63848db38b4358" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;message&lt;/code&gt; contains headers at the start of the string, the headers will be printed as the first bit of the email message.</source>
          <target state="translated">문자열 시작 부분에 &lt;code&gt;message&lt;/code&gt; 에 헤더 가 포함 된 경우 헤더는 전자 메일 메시지의 첫 번째 비트로 인쇄됩니다.</target>
        </trans-unit>
        <trans-unit id="786de74a26ea3015865d33eda29d9247850de3ff" translate="yes" xml:space="preserve">
          <source>If a URL path matches a regular expression in this list, the request will not be redirected to HTTPS. The &lt;a href=&quot;middleware#django.middleware.security.SecurityMiddleware&quot;&gt;&lt;code&gt;SecurityMiddleware&lt;/code&gt;&lt;/a&gt; strips leading slashes from URL paths, so patterns shouldn&amp;rsquo;t include them, e.g. &lt;code&gt;SECURE_REDIRECT_EXEMPT = [r'^no-ssl/$', &amp;hellip;]&lt;/code&gt;. If &lt;a href=&quot;#std:setting-SECURE_SSL_REDIRECT&quot;&gt;&lt;code&gt;SECURE_SSL_REDIRECT&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;False&lt;/code&gt;, this setting has no effect.</source>
          <target state="translated">URL 경로가이 목록의 정규식과 일치하면 요청이 HTTPS로 리디렉션되지 않습니다. &lt;a href=&quot;middleware#django.middleware.security.SecurityMiddleware&quot;&gt; &lt;code&gt;SecurityMiddleware&lt;/code&gt; 는&lt;/a&gt; 패턴들을, 예를 들면 포함해서는 안, URL 경로에서 선도적 인 슬래시를 제거합니다 &lt;code&gt;SECURE_REDIRECT_EXEMPT = [r'^no-ssl/$', &amp;hellip;]&lt;/code&gt; . 경우 &lt;a href=&quot;#std:setting-SECURE_SSL_REDIRECT&quot;&gt; &lt;code&gt;SECURE_SSL_REDIRECT&lt;/code&gt; 이&lt;/a&gt; 있다 &lt;code&gt;False&lt;/code&gt; 이 설정이 적용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="ba03fe98598ff554e940b398aa3215f04de4ffcf" translate="yes" xml:space="preserve">
          <source>If a backend raises a &lt;a href=&quot;../../ref/exceptions#django.core.exceptions.PermissionDenied&quot;&gt;&lt;code&gt;PermissionDenied&lt;/code&gt;&lt;/a&gt; exception in &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User.has_perm&quot;&gt;&lt;code&gt;has_perm()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User.has_module_perms&quot;&gt;&lt;code&gt;has_module_perms()&lt;/code&gt;&lt;/a&gt;, the authorization will immediately fail and Django won&amp;rsquo;t check the backends that follow.</source>
          <target state="translated">백엔드 에서 &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User.has_perm&quot;&gt; &lt;code&gt;has_perm()&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User.has_module_perms&quot;&gt; &lt;code&gt;has_module_perms()&lt;/code&gt; &lt;/a&gt; 에서 &lt;a href=&quot;../../ref/exceptions#django.core.exceptions.PermissionDenied&quot;&gt; &lt;code&gt;PermissionDenied&lt;/code&gt; &lt;/a&gt; 예외가 발생 하면 권한 부여가 즉시 실패하고 Django는 다음 백엔드를 확인하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="2fa2ce59c7328dc011fd86b6fee3bba58a56ca18" translate="yes" xml:space="preserve">
          <source>If a backend raises a &lt;a href=&quot;../../ref/exceptions#django.core.exceptions.PermissionDenied&quot;&gt;&lt;code&gt;PermissionDenied&lt;/code&gt;&lt;/a&gt; exception, authentication will immediately fail. Django won&amp;rsquo;t check the backends that follow.</source>
          <target state="translated">백엔드에서 &lt;a href=&quot;../../ref/exceptions#django.core.exceptions.PermissionDenied&quot;&gt; &lt;code&gt;PermissionDenied&lt;/code&gt; &lt;/a&gt; 예외가 발생하면 인증이 즉시 실패합니다. Django는 다음 백엔드를 확인하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="9d41c8331ab7adddfc4b833cf0b2041ce7dd29ef" translate="yes" xml:space="preserve">
          <source>If a base language is available but the sublanguage specified is not, Django uses the base language. For example, if a user specifies &lt;code&gt;de-at&lt;/code&gt; (Austrian German) but Django only has &lt;code&gt;de&lt;/code&gt; available, Django uses &lt;code&gt;de&lt;/code&gt;.</source>
          <target state="translated">기본 언어를 사용할 수 있지만 지정된 하위 언어를 사용할 수없는 경우 장고는 기본 언어를 사용합니다. 사용자 지정 예를 들어, &lt;code&gt;de-at&lt;/code&gt; (오스트리아 독일어)하지만 장고 만이 &lt;code&gt;de&lt;/code&gt; 가능, 장고 사용 &lt;code&gt;de&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="376b43b9cb329d49e19ff49c7e26326c21be0070" translate="yes" xml:space="preserve">
          <source>If a browser connects initially via HTTP, which is the default for most browsers, it is possible for existing cookies to be leaked. For this reason, you should set your &lt;a href=&quot;../ref/settings#std:setting-SESSION_COOKIE_SECURE&quot;&gt;&lt;code&gt;SESSION_COOKIE_SECURE&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../ref/settings#std:setting-CSRF_COOKIE_SECURE&quot;&gt;&lt;code&gt;CSRF_COOKIE_SECURE&lt;/code&gt;&lt;/a&gt; settings to &lt;code&gt;True&lt;/code&gt;. This instructs the browser to only send these cookies over HTTPS connections. Note that this will mean that sessions will not work over HTTP, and the CSRF protection will prevent any POST data being accepted over HTTP (which will be fine if you are redirecting all HTTP traffic to HTTPS).</source>
          <target state="translated">브라우저가 대부분의 브라우저에서 기본값 인 HTTP를 통해 처음 연결하는 경우 기존 쿠키가 유출 될 수 있습니다. 이러한 이유로 &lt;a href=&quot;../ref/settings#std:setting-SESSION_COOKIE_SECURE&quot;&gt; &lt;code&gt;SESSION_COOKIE_SECURE&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../ref/settings#std:setting-CSRF_COOKIE_SECURE&quot;&gt; &lt;code&gt;CSRF_COOKIE_SECURE&lt;/code&gt; &lt;/a&gt; 설정을 &lt;code&gt;True&lt;/code&gt; 로 설정해야 합니다. 이는 브라우저가 HTTPS 연결을 통해서만 이러한 쿠키를 보내도록 지시합니다. 이는 세션이 HTTP를 통해 작동하지 않으며 CSRF 보호로 인해 HTTP를 통해 POST 데이터가 수신되는 것을 막을 수 있습니다 (모든 HTTP 트래픽을 HTTPS로 리디렉션하는 경우에는 문제가 없음).</target>
        </trans-unit>
        <trans-unit id="c740b7603394883b2b965eca28364f7c9247ff89" translate="yes" xml:space="preserve">
          <source>If a callable is used for &lt;code&gt;limit_choices_to&lt;/code&gt;, it will be invoked every time a new form is instantiated. It may also be invoked when a model is validated, for example by management commands or the admin. The admin constructs querysets to validate its form inputs in various edge cases multiple times, so there is a possibility your callable may be invoked several times.</source>
          <target state="translated">&lt;code&gt;limit_choices_to&lt;/code&gt; 에 콜 러블을 사용 하면 새 폼이 인스턴스화 될 때마다 호출됩니다. 예를 들어 관리 명령이나 관리자에 의해 모델의 유효성이 검사 될 때 호출 될 수도 있습니다. 관리자는 다양한 경우에 폼 입력을 여러 번 검증하기 위해 쿼리 세트를 구성하므로 호출 가능 항목이 여러 번 호출 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ca3b6246fdb9dbc1b936cc3e8ac2b8da1438d4d3" translate="yes" xml:space="preserve">
          <source>If a custom subclass of &lt;a href=&quot;#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt; implements a &lt;code&gt;render&lt;/code&gt; method, Django will treat it as emulating a &lt;a href=&quot;template-response#django.template.response.SimpleTemplateResponse&quot;&gt;&lt;code&gt;SimpleTemplateResponse&lt;/code&gt;&lt;/a&gt;, and the &lt;code&gt;render&lt;/code&gt; method must itself return a valid response object.</source>
          <target state="translated">&lt;a href=&quot;#django.http.HttpResponse&quot;&gt; &lt;code&gt;HttpResponse&lt;/code&gt; &lt;/a&gt; 의 커스텀 서브 클래스가 &lt;code&gt;render&lt;/code&gt; 메소드를 구현하는 경우 , 장고는이 메소드를 &lt;a href=&quot;template-response#django.template.response.SimpleTemplateResponse&quot;&gt; &lt;code&gt;SimpleTemplateResponse&lt;/code&gt; &lt;/a&gt; 에뮬레이션으로 처리 하고 &lt;code&gt;render&lt;/code&gt; 메소드 자체가 유효한 응답 객체를 반환해야합니다.</target>
        </trans-unit>
        <trans-unit id="e32b11f77650a5dfa1ba5024c565f112473c21f5" translate="yes" xml:space="preserve">
          <source>If a database operation is able to provide any additional information that might assist in selecting a database, it will be provided in the &lt;code&gt;hints&lt;/code&gt; dictionary. Details on valid hints are provided &lt;a href=&quot;#topics-db-multi-db-hints&quot;&gt;below&lt;/a&gt;.</source>
          <target state="translated">데이터베이스 조작이 데이터베이스 선택을 지원할 수있는 추가 정보를 제공 할 수있는 경우 &lt;code&gt;hints&lt;/code&gt; 사전에 제공됩니다 . 유효한 힌트에 대한 자세한 내용은 &lt;a href=&quot;#topics-db-multi-db-hints&quot;&gt;아래&lt;/a&gt; 에 제공 됩니다 .</target>
        </trans-unit>
        <trans-unit id="57e35454b09ff691f569bed0b6a01f70be68bb53" translate="yes" xml:space="preserve">
          <source>If a different timezone like &lt;code&gt;Australia/Melbourne&lt;/code&gt; is active in Django, then the datetime is converted to the new timezone before the value is truncated. The timezone offset for Melbourne in the example date above is +10:00. The values returned when this timezone is active will be:</source>
          <target state="translated">Django에서 &lt;code&gt;Australia/Melbourne&lt;/code&gt; 과 같은 다른 시간대 가 활성화되어 있으면 값이 잘 리기 전에 날짜 시간이 새 시간대로 변환됩니다. 위 예제 날짜에서 멜버른의 시간대 오프셋은 +10 : 00입니다. 이 시간대가 활성화 될 때 반환되는 값은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="40ead0c16c096714986873e5ca8d59648a2731a1" translate="yes" xml:space="preserve">
          <source>If a different timezone like &lt;code&gt;Australia/Melbourne&lt;/code&gt; is active in Django, then the datetime is converted to the timezone before the value is extracted. The timezone offset for Melbourne in the example date above is +10:00. The values returned when this timezone is active will be the same as above except for:</source>
          <target state="translated">Django에서 &lt;code&gt;Australia/Melbourne&lt;/code&gt; 과 같은 다른 시간대 가 활성화되어 있으면 값을 추출하기 전에 날짜 시간이 시간대로 변환됩니다. 위 예제 날짜에서 멜버른의 시간대 오프셋은 +10 : 00입니다. 이 시간대가 활성화 될 때 반환되는 값은 다음을 제외하고 위와 동일합니다.</target>
        </trans-unit>
        <trans-unit id="9dd612fed9477c0abbcabff974c2e3681b9057f6" translate="yes" xml:space="preserve">
          <source>If a field with the given name is not found a &lt;a href=&quot;../exceptions#django.core.exceptions.FieldDoesNotExist&quot;&gt;&lt;code&gt;FieldDoesNotExist&lt;/code&gt;&lt;/a&gt; exception will be raised.</source>
          <target state="translated">주어진 이름을 가진 필드를 찾지 &lt;a href=&quot;../exceptions#django.core.exceptions.FieldDoesNotExist&quot;&gt; &lt;code&gt;FieldDoesNotExist&lt;/code&gt; &lt;/a&gt; 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="36f5c6d42b4b693d43fb0565ac08c49881a8cc16" translate="yes" xml:space="preserve">
          <source>If a file isn&amp;rsquo;t found in the &lt;code&gt;staticfiles.json&lt;/code&gt; manifest at runtime, a &lt;code&gt;ValueError&lt;/code&gt; is raised. This behavior can be disabled by subclassing &lt;code&gt;ManifestStaticFilesStorage&lt;/code&gt; and setting the &lt;code&gt;manifest_strict&lt;/code&gt; attribute to &lt;code&gt;False&lt;/code&gt; &amp;ndash; nonexistent paths will remain unchanged.</source>
          <target state="translated">런타임에 &lt;code&gt;staticfiles.json&lt;/code&gt; 매니페스트에 파일이 없으면 &lt;code&gt;ValueError&lt;/code&gt; 가 발생합니다. &lt;code&gt;ManifestStaticFilesStorage&lt;/code&gt; 를 서브 클래 싱 하고 &lt;code&gt;manifest_strict&lt;/code&gt; 속성을 &lt;code&gt;False&lt;/code&gt; 로 설정하면 이 동작을 비활성화 할 수 있습니다 . 존재하지 않는 경로는 변경되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="d64815254ec043cc9f487e75e480e0b7d7744f44" translate="yes" xml:space="preserve">
          <source>If a file with &lt;code&gt;name&lt;/code&gt; already exists, &lt;a href=&quot;../../howto/custom-file-storage#django.core.files.storage.get_alternative_name&quot;&gt;&lt;code&gt;get_alternative_name()&lt;/code&gt;&lt;/a&gt; is called to obtain an alternative name.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; 이있는 파일이 이미 존재 하면 대체 이름을 얻기 위해 &lt;a href=&quot;../../howto/custom-file-storage#django.core.files.storage.get_alternative_name&quot;&gt; &lt;code&gt;get_alternative_name()&lt;/code&gt; &lt;/a&gt; 이 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="4878c82df117e894b2c83734529f13460689ef4f" translate="yes" xml:space="preserve">
          <source>If a file with &lt;code&gt;name&lt;/code&gt; already exists, &lt;code&gt;get_alternative_name()&lt;/code&gt; is called to obtain an alternative name.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; 이있는 파일이 이미 존재 하면 대체 이름을 얻기 위해 &lt;code&gt;get_alternative_name()&lt;/code&gt; 이 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="1db0a6d60d804a7f072aeecfe4f0e2fd449487ea" translate="yes" xml:space="preserve">
          <source>If a function (either a view or any regular callback) in your code uses local variables susceptible to contain sensitive information, you may prevent the values of those variables from being included in error reports using the &lt;code&gt;sensitive_variables&lt;/code&gt; decorator:</source>
          <target state="translated">코드의 함수 (보기 또는 일반 콜백)가 민감한 정보를 포함하기 쉬운 로컬 변수를 사용하는 경우 &lt;code&gt;sensitive_variables&lt;/code&gt; 데코레이터를 사용하여 해당 변수의 값이 오류 보고서에 포함되지 않도록 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a908979b10b7cbe092ab501a90dbcc59af970e03" translate="yes" xml:space="preserve">
          <source>If a group of CSS files are appropriate for multiple output media types, the dictionary key can be a comma separated list of output media types. In the following example, TV&amp;rsquo;s and projectors will have the same media requirements:</source>
          <target state="translated">CSS 파일 그룹이 여러 출력 미디어 유형에 적합한 경우 사전 키는 쉼표로 구분 된 출력 미디어 유형 목록 일 수 있습니다. 다음 예에서 TV와 프로젝터의 미디어 요구 사항은 동일합니다.</target>
        </trans-unit>
        <trans-unit id="0969faa22edce6893747f90fdcf0cc7c56f629be" translate="yes" xml:space="preserve">
          <source>If a management command is called from code through &lt;a href=&quot;../ref/django-admin#django.core.management.call_command&quot;&gt;&lt;code&gt;call_command()&lt;/code&gt;&lt;/a&gt;, it&amp;rsquo;s up to you to catch the exception when needed.</source>
          <target state="translated">&lt;a href=&quot;../ref/django-admin#django.core.management.call_command&quot;&gt; &lt;code&gt;call_command()&lt;/code&gt; &lt;/a&gt; 통해 코드에서 관리 명령을 호출 하면 필요할 때 예외를 잡아야합니다.</target>
        </trans-unit>
        <trans-unit id="b69c1f15f7880ce6a608e37a3d0c0885c68c3db2" translate="yes" xml:space="preserve">
          <source>If a model has a &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;ForeignKey&lt;/code&gt;&lt;/a&gt;, instances of that model will have access to the related (foreign) object via an attribute of the model.</source>
          <target state="translated">모델에 &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey&quot;&gt; &lt;code&gt;ForeignKey&lt;/code&gt; &lt;/a&gt; 가있는 경우 해당 모델의 인스턴스는 모델의 속성을 통해 관련 (외부) 객체에 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="eb15c806fa95b1c1cac44107cdbd6729a430458b" translate="yes" xml:space="preserve">
          <source>If a model has a &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;ForeignKey&lt;/code&gt;&lt;/a&gt;, instances of the foreign-key model will have access to a &lt;a href=&quot;managers#django.db.models.Manager&quot;&gt;&lt;code&gt;Manager&lt;/code&gt;&lt;/a&gt; that returns all instances of the first model. By default, this &lt;a href=&quot;managers#django.db.models.Manager&quot;&gt;&lt;code&gt;Manager&lt;/code&gt;&lt;/a&gt; is named &lt;code&gt;FOO_set&lt;/code&gt;, where &lt;code&gt;FOO&lt;/code&gt; is the source model name, lowercased. This &lt;a href=&quot;managers#django.db.models.Manager&quot;&gt;&lt;code&gt;Manager&lt;/code&gt;&lt;/a&gt; returns &lt;code&gt;QuerySets&lt;/code&gt;, which can be filtered and manipulated as described in the &amp;ldquo;Retrieving objects&amp;rdquo; section above.</source>
          <target state="translated">모델에 &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey&quot;&gt; &lt;code&gt;ForeignKey&lt;/code&gt; &lt;/a&gt; 가 있으면 외래 키 모델의 인스턴스는 첫 번째 모델의 모든 인스턴스를 반환 하는 &lt;a href=&quot;managers#django.db.models.Manager&quot;&gt; &lt;code&gt;Manager&lt;/code&gt; 에&lt;/a&gt; 액세스 할 수 있습니다 . 기본적으로이 &lt;a href=&quot;managers#django.db.models.Manager&quot;&gt; &lt;code&gt;Manager&lt;/code&gt; 의&lt;/a&gt; 이름은 &lt;code&gt;FOO_set&lt;/code&gt; 이며 여기서 &lt;code&gt;FOO&lt;/code&gt; 는 소스 모델 이름이며 소문자입니다. 이 &lt;a href=&quot;managers#django.db.models.Manager&quot;&gt; &lt;code&gt;Manager&lt;/code&gt; &lt;/a&gt; 는 &lt;code&gt;QuerySets&lt;/code&gt; 를 반환 하며 , 위의 &quot;객체 검색&quot;섹션에 설명 된대로 필터링하고 조작 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="60ba79a890d9e5b777dce6459bc7d4e3596736cc" translate="yes" xml:space="preserve">
          <source>If a model has an &lt;a href=&quot;fields#django.db.models.AutoField&quot;&gt;&lt;code&gt;AutoField&lt;/code&gt;&lt;/a&gt; &amp;mdash; an auto-incrementing primary key &amp;mdash; then that auto-incremented value will be calculated and saved as an attribute on your object the first time you call &lt;code&gt;save()&lt;/code&gt;:</source>
          <target state="translated">모델 에 자동 증분 기본 키인 자동 &lt;a href=&quot;fields#django.db.models.AutoField&quot;&gt; &lt;code&gt;AutoField&lt;/code&gt; &lt;/a&gt; 가있는 경우 자동 증분 값은 &lt;code&gt;save()&lt;/code&gt; 처음 호출 할 때 객체에 속성으로 계산되어 저장됩니다 .</target>
        </trans-unit>
        <trans-unit id="8867ea227fede80f2b653fda4e88d79e719938b1" translate="yes" xml:space="preserve">
          <source>If a model has an &lt;a href=&quot;fields#django.db.models.AutoField&quot;&gt;&lt;code&gt;AutoField&lt;/code&gt;&lt;/a&gt; but you want to define a new object&amp;rsquo;s ID explicitly when saving, define it explicitly before saving, rather than relying on the auto-assignment of the ID:</source>
          <target state="translated">모델에 &lt;a href=&quot;fields#django.db.models.AutoField&quot;&gt; &lt;code&gt;AutoField&lt;/code&gt; 가&lt;/a&gt; 있지만 저장할 때 새 객체의 ID를 명시 적으로 정의하려면 ID의 자동 할당에 의존하지 않고 저장하기 전에 명시 적으로 정의하십시오.</target>
        </trans-unit>
        <trans-unit id="836ea517ddae0d98a98be3d92fb098c1716467c1" translate="yes" xml:space="preserve">
          <source>If a model is defined outside of an application in &lt;a href=&quot;../settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt;, it must declare which app it belongs to:</source>
          <target state="translated">모델이 &lt;a href=&quot;../settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt; 에서 애플리케이션 외부에 정의 된 경우 모델이 속한 앱을 선언해야합니다.</target>
        </trans-unit>
        <trans-unit id="b1b1b8a914c46d91f06259e7e2f6393532703abd" translate="yes" xml:space="preserve">
          <source>If a model with &lt;code&gt;managed=False&lt;/code&gt; contains a &lt;a href=&quot;fields#django.db.models.ManyToManyField&quot;&gt;&lt;code&gt;ManyToManyField&lt;/code&gt;&lt;/a&gt; that points to another unmanaged model, then the intermediate table for the many-to-many join will also not be created. However, the intermediary table between one managed and one unmanaged model &lt;em&gt;will&lt;/em&gt; be created.</source>
          <target state="translated">&lt;code&gt;managed=False&lt;/code&gt; 인 모델에 관리 되지 않는 다른 모델을 가리키는 &lt;a href=&quot;fields#django.db.models.ManyToManyField&quot;&gt; &lt;code&gt;ManyToManyField&lt;/code&gt; &lt;/a&gt; 가 포함되어 있으면 다 대다 조인의 중간 테이블도 만들어지지 않습니다. 그러나 관리 하나 개는 관리되지 않는 모델 사이의 중간 테이블이 &lt;em&gt;됩니다&lt;/em&gt; 만들 수.</target>
        </trans-unit>
        <trans-unit id="412ddfb7b344d2bfd06795c612194f73c03d1d0a" translate="yes" xml:space="preserve">
          <source>If a model&amp;rsquo;s primary key isn&amp;rsquo;t called &lt;code&gt;id&lt;/code&gt;, no problem. Comparisons will always use the primary key, whatever it&amp;rsquo;s called. For example, if a model&amp;rsquo;s primary key field is called &lt;code&gt;name&lt;/code&gt;, these two statements are equivalent:</source>
          <target state="translated">모델의 기본 키를 &lt;code&gt;id&lt;/code&gt; 라고하지 않으면 아무런 문제 가 없습니다 . 비교는 항상 기본 키를 사용합니다. 예를 들어, 모델의 기본 키 필드가 &lt;code&gt;name&lt;/code&gt; 이면이 두 명령문은 동일합니다.</target>
        </trans-unit>
        <trans-unit id="fa59d497e1dda34138c57d1907906c6ac5378b51" translate="yes" xml:space="preserve">
          <source>If a movie&amp;rsquo;s &amp;ldquo;peers&amp;rdquo; are described as movies released by the same studio in the same genre in the same year, this &lt;code&gt;RowRange&lt;/code&gt; example annotates each movie with the average rating of a movie&amp;rsquo;s two prior and two following peers:</source>
          <target state="translated">영화의 &quot;피어&quot;가 같은 연도에 같은 장르에서 동일한 스튜디오에 의해 공개 된 영화로 설명되는 경우,이 &lt;code&gt;RowRange&lt;/code&gt; 예제는 각 영화에 2 명의 이전 동료와 2 명의 동료의 평균 등급을 표시합니다.</target>
        </trans-unit>
        <trans-unit id="02dc34c15c815e6e708c5523691c3b4a85610564" translate="yes" xml:space="preserve">
          <source>If a persistent cache value is found, that value is returned. For raster formats using Persistent Auxiliary Metadata (PAM) services, the statistics might be cached in an auxiliary file. In some cases this metadata might be out of sync with the pixel values or cause values from a previous call to be returned which don&amp;rsquo;t reflect the value of the &lt;code&gt;approximate&lt;/code&gt; argument. In such cases, use the &lt;code&gt;refresh&lt;/code&gt; argument to get updated values and store them in the cache.</source>
          <target state="translated">지속적 캐시 값을 찾으면 해당 값이 리턴됩니다. PAM (Persistent Auxiliary Metadata) 서비스를 사용하는 래스터 형식의 경우 통계는 보조 파일에 캐시 될 수 있습니다. 경우에 따라이 메타 데이터가 픽셀 값과 동기화되지 않았거나 &lt;code&gt;approximate&lt;/code&gt; 인수 의 값을 반영하지 않는 이전 호출의 값이 반환 될 수 있습니다 . 이러한 경우 &lt;code&gt;refresh&lt;/code&gt; 인수를 사용하여 업데이트 된 값을 가져 와서 캐시에 저장하십시오.</target>
        </trans-unit>
        <trans-unit id="8e2f7c830b30646acb1129766828116985345dda" translate="yes" xml:space="preserve">
          <source>If a query doesn&amp;rsquo;t have an ordering specified, results are returned from the database in an unspecified order. A particular ordering is guaranteed only when ordering by a set of fields that uniquely identify each object in the results. For example, if a &lt;code&gt;name&lt;/code&gt; field isn&amp;rsquo;t unique, ordering by it won&amp;rsquo;t guarantee objects with the same name always appear in the same order.</source>
          <target state="translated">쿼리에 지정된 순서가 없으면 결과가 데이터베이스에서 지정되지 않은 순서로 반환됩니다. 특정 순서는 결과에서 각 개체를 고유하게 식별하는 일련의 필드로 순서를 지정할 때만 보장됩니다. 예를 들어, &lt;code&gt;name&lt;/code&gt; 필드가 고유하지 않은 경우, 이름 필드가 같은 순서로 이름이 같은 개체가 항상 같은 순서로 나타나는 것은 아닙니다.</target>
        </trans-unit>
        <trans-unit id="419fbfe6388d6c8dcc573315271dbda24cc24890" translate="yes" xml:space="preserve">
          <source>If a response varies on whether or not it&amp;rsquo;s requested via AJAX and you are using some form of caching like Django&amp;rsquo;s &lt;a href=&quot;middleware#module-django.middleware.cache&quot;&gt;&lt;code&gt;cache middleware&lt;/code&gt;&lt;/a&gt;, you should decorate the view with &lt;a href=&quot;../topics/http/decorators#django.views.decorators.vary.vary_on_headers&quot;&gt;&lt;code&gt;vary_on_headers('X-Requested-With')&lt;/code&gt;&lt;/a&gt; so that the responses are properly cached.</source>
          <target state="translated">응답이 AJAX를 통해 요청되었는지 여부에 따라 달라지고 Django의 &lt;a href=&quot;middleware#module-django.middleware.cache&quot;&gt; &lt;code&gt;cache middleware&lt;/code&gt; &lt;/a&gt; 와 같은 일부 캐싱 형식을 사용 하는 경우 응답이 올바르게 캐시되도록 뷰를 &lt;a href=&quot;../topics/http/decorators#django.views.decorators.vary.vary_on_headers&quot;&gt; &lt;code&gt;vary_on_headers('X-Requested-With')&lt;/code&gt; 로&lt;/a&gt; 장식해야합니다 .</target>
        </trans-unit>
        <trans-unit id="7f467ff0e02bba6e43affce86c588503c3a97097" translate="yes" xml:space="preserve">
          <source>If a string (e.g. &lt;code&gt;secure.example.com&lt;/code&gt;), all SSL redirects will be directed to this host rather than the originally-requested host (e.g. &lt;code&gt;www.example.com&lt;/code&gt;). If &lt;a href=&quot;#std:setting-SECURE_SSL_REDIRECT&quot;&gt;&lt;code&gt;SECURE_SSL_REDIRECT&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;False&lt;/code&gt;, this setting has no effect.</source>
          <target state="translated">문자열 (예 : &lt;code&gt;secure.example.com&lt;/code&gt; ) 인 경우 모든 SSL 리디렉션은 원래 요청 된 호스트 (예 : &lt;code&gt;www.example.com&lt;/code&gt; )가 아닌이 호스트로 전송 됩니다. 경우 &lt;a href=&quot;#std:setting-SECURE_SSL_REDIRECT&quot;&gt; &lt;code&gt;SECURE_SSL_REDIRECT&lt;/code&gt; 이&lt;/a&gt; 있다 &lt;code&gt;False&lt;/code&gt; 이 설정이 적용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="819af35e8e5b0b423576e67f3d4a85e07e4a5780" translate="yes" xml:space="preserve">
          <source>If a variable is false or empty, use given default. Otherwise, use the value of the variable. For example:</source>
          <target state="translated">변수가 false이거나 비어있는 경우 제공된 기본값을 사용하십시오. 그렇지 않으면 변수 값을 사용하십시오. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="65519194e6da2e5393e5193ef34a21784e4c9145" translate="yes" xml:space="preserve">
          <source>If a variable resolves to a callable, the template system will call it with no arguments and use its result instead of the callable.</source>
          <target state="translated">변수가 호출 가능한 것으로 해석되면 템플릿 시스템은 인수없이 변수를 호출하고 호출 가능한 대신 결과를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="116d86f8db0d1afc35e7e30a7f2315cb0ba50f4a" translate="yes" xml:space="preserve">
          <source>If a view is using this mixin, all requests by non-authenticated users will be redirected to the login page or shown an HTTP 403 Forbidden error, depending on the &lt;a href=&quot;#django.contrib.auth.mixins.AccessMixin.raise_exception&quot;&gt;&lt;code&gt;raise_exception&lt;/code&gt;&lt;/a&gt; parameter.</source>
          <target state="translated">뷰가이 믹스 인을 사용하는 경우 인증되지 않은 사용자의 모든 요청은 &lt;a href=&quot;#django.contrib.auth.mixins.AccessMixin.raise_exception&quot;&gt; &lt;code&gt;raise_exception&lt;/code&gt; &lt;/a&gt; 매개 변수 에 따라 로그인 페이지로 리디렉션되거나 HTTP 403 Forbidden 오류가 표시 됩니다.</target>
        </trans-unit>
        <trans-unit id="2472a23c9704c8c58addf4a481db8096770e5e94" translate="yes" xml:space="preserve">
          <source>If a view sets its own cache expiry time (i.e. it has a &lt;code&gt;max-age&lt;/code&gt; section in its &lt;code&gt;Cache-Control&lt;/code&gt; header) then the page will be cached until the expiry time, rather than &lt;a href=&quot;../ref/settings#std:setting-CACHE_MIDDLEWARE_SECONDS&quot;&gt;&lt;code&gt;CACHE_MIDDLEWARE_SECONDS&lt;/code&gt;&lt;/a&gt;. Using the decorators in &lt;code&gt;django.views.decorators.cache&lt;/code&gt; you can easily set a view&amp;rsquo;s expiry time (using the &lt;a href=&quot;http/decorators#django.views.decorators.cache.cache_control&quot;&gt;&lt;code&gt;cache_control()&lt;/code&gt;&lt;/a&gt; decorator) or disable caching for a view (using the &lt;a href=&quot;http/decorators#django.views.decorators.cache.never_cache&quot;&gt;&lt;code&gt;never_cache()&lt;/code&gt;&lt;/a&gt; decorator). See the &lt;a href=&quot;#controlling-cache-using-other-headers&quot;&gt;using other headers&lt;/a&gt; section for more on these decorators.</source>
          <target state="translated">뷰가 자체 캐시 만료 시간을 설정하면 (즉 , &lt;code&gt;Cache-Control&lt;/code&gt; 헤더 에 &lt;code&gt;max-age&lt;/code&gt; 섹션이있는 경우) 페이지는 &lt;a href=&quot;../ref/settings#std:setting-CACHE_MIDDLEWARE_SECONDS&quot;&gt; &lt;code&gt;CACHE_MIDDLEWARE_SECONDS&lt;/code&gt; 가&lt;/a&gt; 아닌 만료 시간까지 캐시됩니다 . &lt;code&gt;django.views.decorators.cache&lt;/code&gt; 의 데코레이터를 사용하면 뷰의 만료 시간을 쉽게 설정 하거나 &lt;a href=&quot;http/decorators#django.views.decorators.cache.cache_control&quot;&gt; &lt;code&gt;cache_control()&lt;/code&gt; &lt;/a&gt; 데코레이터 사용) 뷰의 캐싱을 비활성화 할 수 있습니다 ( &lt;a href=&quot;http/decorators#django.views.decorators.cache.never_cache&quot;&gt; &lt;code&gt;never_cache()&lt;/code&gt; &lt;/a&gt; 데코레이터 사용). 이 데코레이터에 대한 자세한 내용은 &lt;a href=&quot;#controlling-cache-using-other-headers&quot;&gt;다른 헤더 사용하기&lt;/a&gt; 섹션을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="bd0e4e15cb1a129fa5304adb9ab881ae3476ced9" translate="yes" xml:space="preserve">
          <source>If additional escaping is not desired, you will need to use &lt;a href=&quot;../ref/utils#django.utils.safestring.mark_safe&quot;&gt;&lt;code&gt;mark_safe()&lt;/code&gt;&lt;/a&gt; if you are absolutely sure that your code does not contain XSS vulnerabilities. For building small HTML snippets, use of &lt;a href=&quot;../ref/utils#django.utils.html.format_html&quot;&gt;&lt;code&gt;format_html()&lt;/code&gt;&lt;/a&gt; instead of &lt;code&gt;mark_safe()&lt;/code&gt; is strongly recommended.</source>
          <target state="translated">추가 이스케이프가 필요 하지 않은 경우 코드에 XSS 취약성이 포함되어 있지 않다면 확실하게 &lt;a href=&quot;../ref/utils#django.utils.safestring.mark_safe&quot;&gt; &lt;code&gt;mark_safe()&lt;/code&gt; &lt;/a&gt; 를 사용해야 합니다. 작은 HTML 스 니펫을 빌드하려면 &lt;a href=&quot;../ref/utils#django.utils.html.format_html&quot;&gt; &lt;code&gt;format_html()&lt;/code&gt; &lt;/a&gt; 대신 &lt;code&gt;mark_safe()&lt;/code&gt; 을 사용하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="d018009d896660351337e8c7652155ea49ee64a9" translate="yes" xml:space="preserve">
          <source>If all items in a sitemap have a &lt;a href=&quot;#django.contrib.sitemaps.Sitemap.lastmod&quot;&gt;&lt;code&gt;lastmod&lt;/code&gt;&lt;/a&gt;, the sitemap generated by &lt;a href=&quot;#django.contrib.sitemaps.views.sitemap&quot;&gt;&lt;code&gt;views.sitemap()&lt;/code&gt;&lt;/a&gt; will have a &lt;code&gt;Last-Modified&lt;/code&gt; header equal to the latest &lt;code&gt;lastmod&lt;/code&gt;. You can activate the &lt;a href=&quot;../middleware#django.middleware.http.ConditionalGetMiddleware&quot;&gt;&lt;code&gt;ConditionalGetMiddleware&lt;/code&gt;&lt;/a&gt; to make Django respond appropriately to requests with an &lt;code&gt;If-Modified-Since&lt;/code&gt; header which will prevent sending the sitemap if it hasn&amp;rsquo;t changed.</source>
          <target state="translated">사이트 맵의 모든 항목에 &lt;a href=&quot;#django.contrib.sitemaps.Sitemap.lastmod&quot;&gt; &lt;code&gt;lastmod&lt;/code&gt; &lt;/a&gt; 가 &lt;a href=&quot;#django.contrib.sitemaps.views.sitemap&quot;&gt; &lt;code&gt;views.sitemap()&lt;/code&gt; &lt;/a&gt; 의해 생성 된 사이트 맵 의 &lt;code&gt;Last-Modified&lt;/code&gt; 헤더는 최신 &lt;code&gt;lastmod&lt;/code&gt; 와 같습니다 . &lt;a href=&quot;../middleware#django.middleware.http.ConditionalGetMiddleware&quot;&gt; &lt;code&gt;ConditionalGetMiddleware&lt;/code&gt; &lt;/a&gt; 를 활성화하면 사이트 맵이 변경되지 않은 경우 사이트 맵을 보내지 못하게 하는 &lt;code&gt;If-Modified-Since&lt;/code&gt; 헤더 를 사용하여 Django가 요청에 적절히 응답하도록 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="4efc199d481916c1801fd9d031e671d91e418ff5" translate="yes" xml:space="preserve">
          <source>If all of the tests passed, then you&amp;rsquo;ll want to make sure that you added the new test shown above to the appropriate folder and file name.</source>
          <target state="translated">모든 테스트를 통과 한 경우 위에 표시된 새 테스트를 적절한 폴더 및 파일 이름에 추가했는지 확인해야합니다.</target>
        </trans-unit>
        <trans-unit id="af2d81f3186a97fe69044083ccf1ae5c5bacc347" translate="yes" xml:space="preserve">
          <source>If all you want is to run Django with your native language all you need to do is set &lt;a href=&quot;../../ref/settings#std:setting-LANGUAGE_CODE&quot;&gt;&lt;code&gt;LANGUAGE_CODE&lt;/code&gt;&lt;/a&gt; and make sure the corresponding &lt;a href=&quot;index#term-message-file&quot;&gt;message files&lt;/a&gt; and their compiled versions (&lt;code&gt;.mo&lt;/code&gt;) exist.</source>
          <target state="translated">모국어로 Django를 실행하기 만하면 &lt;a href=&quot;../../ref/settings#std:setting-LANGUAGE_CODE&quot;&gt; &lt;code&gt;LANGUAGE_CODE&lt;/code&gt; 를&lt;/a&gt; 설정 하고 해당 &lt;a href=&quot;index#term-message-file&quot;&gt;메시지 파일&lt;/a&gt; 과 컴파일 된 버전 ( &lt;code&gt;.mo&lt;/code&gt; )이 있는지 확인하면 됩니다.</target>
        </trans-unit>
        <trans-unit id="5d55df844cd1e592f6c1063624dbce8afbbd7354" translate="yes" xml:space="preserve">
          <source>If an error happens during template parsing or rendering, Django can display the line the error happened on. For example:</source>
          <target state="translated">템플릿 파싱이나 렌더링 중 오류가 발생하면 Django는 오류가 발생한 줄을 표시 할 수 있습니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="004a42cd451fd1f1d6e009a950c33e7582c724d1" translate="yes" xml:space="preserve">
          <source>If an optional field doesn&amp;rsquo;t appear in the form&amp;rsquo;s data, the resulting model instance uses the model field &lt;a href=&quot;../../ref/models/fields#django.db.models.Field.default&quot;&gt;&lt;code&gt;default&lt;/code&gt;&lt;/a&gt;, if there is one, for that field. This behavior doesn&amp;rsquo;t apply to fields that use &lt;a href=&quot;../../ref/forms/widgets#django.forms.CheckboxInput&quot;&gt;&lt;code&gt;CheckboxInput&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../ref/forms/widgets#django.forms.CheckboxSelectMultiple&quot;&gt;&lt;code&gt;CheckboxSelectMultiple&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;../../ref/forms/widgets#django.forms.SelectMultiple&quot;&gt;&lt;code&gt;SelectMultiple&lt;/code&gt;&lt;/a&gt; (or any custom widget whose &lt;a href=&quot;../../ref/forms/widgets#django.forms.Widget.value_omitted_from_data&quot;&gt;&lt;code&gt;value_omitted_from_data()&lt;/code&gt;&lt;/a&gt; method always returns &lt;code&gt;False&lt;/code&gt;) since an unchecked checkbox and unselected &lt;code&gt;&amp;lt;select multiple&amp;gt;&lt;/code&gt; don&amp;rsquo;t appear in the data of an HTML form submission. Use a custom form field or widget if you&amp;rsquo;re designing an API and want the default fallback behavior for a field that uses one of these widgets.</source>
          <target state="translated">선택적 필드가 양식의 데이터에 나타나지 않으면 결과 모델 인스턴스는 해당 필드에 대해 모델 필드 &lt;a href=&quot;../../ref/models/fields#django.db.models.Field.default&quot;&gt; &lt;code&gt;default&lt;/code&gt; &lt;/a&gt; (있는 경우)를 사용합니다. 이 문제는 사용 분야에 적용되지 않습니다 &lt;a href=&quot;../../ref/forms/widgets#django.forms.CheckboxInput&quot;&gt; &lt;code&gt;CheckboxInput&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../../ref/forms/widgets#django.forms.CheckboxSelectMultiple&quot;&gt; &lt;code&gt;CheckboxSelectMultiple&lt;/code&gt; &lt;/a&gt; , 또는 &lt;a href=&quot;../../ref/forms/widgets#django.forms.SelectMultiple&quot;&gt; &lt;code&gt;SelectMultiple&lt;/code&gt; &lt;/a&gt; (또는 사용자 정의 위젯 &lt;a href=&quot;../../ref/forms/widgets#django.forms.Widget.value_omitted_from_data&quot;&gt; &lt;code&gt;value_omitted_from_data()&lt;/code&gt; &lt;/a&gt; 방법을 항상 반환 &lt;code&gt;False&lt;/code&gt; ) 검사되지 않은 체크 박스를 선택되지 않은 이후 &lt;code&gt;&amp;lt;select multiple&amp;gt;&lt;/code&gt; 는 HTML의 데이터에 나타나지 않습니다 양식 제출. API를 디자인하고 이러한 위젯 중 하나를 사용하는 필드에 대한 기본 폴백 동작을 원하는 경우 사용자 정의 양식 필드 또는 위젯을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="9cb04eee8e4707359752c37d935aef72b38a85f2" translate="yes" xml:space="preserve">
          <source>If any keyword arguments are provided, they will be passed to the constructor of the response class.</source>
          <target state="translated">키워드 인수가 제공되면 응답 클래스의 생성자에 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="3ca0ba8a01e4bba76fac0f283df438a0e32e99ce" translate="yes" xml:space="preserve">
          <source>If any of those are not true, you should keep this setting set to &lt;code&gt;None&lt;/code&gt; and find another way of determining HTTPS, perhaps via custom middleware.</source>
          <target state="translated">해당 사항이 아닌 경우이 설정을 &lt;code&gt;None&lt;/code&gt; 설정하고 사용자 지정 미들웨어를 통해 HTTPS를 결정하는 다른 방법을 찾아야합니다.</target>
        </trans-unit>
        <trans-unit id="b7d9b6ada1db10c808758db904b1e245c1501d93" translate="yes" xml:space="preserve">
          <source>If any of your Django views send email using &lt;a href=&quot;../email&quot;&gt;Django&amp;rsquo;s email functionality&lt;/a&gt;, you probably don&amp;rsquo;t want to send email each time you run a test using that view. For this reason, Django&amp;rsquo;s test runner automatically redirects all Django-sent email to a dummy outbox. This lets you test every aspect of sending email &amp;ndash; from the number of messages sent to the contents of each message &amp;ndash; without actually sending the messages.</source>
          <target state="translated">Django 뷰 중 하나가 &lt;a href=&quot;../email&quot;&gt;Django의 전자 메일 기능을&lt;/a&gt; 사용하여 전자 메일 을 보내는 경우 해당 뷰를 사용하여 테스트를 실행할 때마다 전자 메일을 보내지 않을 수 있습니다. 이러한 이유로 Django의 테스트 러너는 모든 Django에서 보낸 전자 메일을 더미 발신 함으로 리디렉션합니다. 이를 통해 실제로 메시지를 보내지 않고도 전자 메일을 보내는 모든 측면 (보낸 메시지 수부터 각 메시지 내용까지)을 테스트 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f7cd992185606a1b60bac1b5887d3305c1d38a0f" translate="yes" xml:space="preserve">
          <source>If any part of the variable is callable, the template system will try calling it. Example:</source>
          <target state="translated">변수의 일부가 호출 가능하면, 템플리트 시스템은 변수 호출을 시도합니다. 예:</target>
        </trans-unit>
        <trans-unit id="98c3f82d22ad3b1b1d268b1281f2a82a22a7f832" translate="yes" xml:space="preserve">
          <source>If autoclobber is &lt;code&gt;True&lt;/code&gt;, the database will be destroyed without consulting the user.</source>
          <target state="translated">autoclobber가 &lt;code&gt;True&lt;/code&gt; 인 경우 데이터베이스는 사용자와상의하지 않고 파괴됩니다.</target>
        </trans-unit>
        <trans-unit id="5b22c30791d93745f5516c055e57528793230347" translate="yes" xml:space="preserve">
          <source>If called via &lt;code&gt;GET&lt;/code&gt;, it displays a login form that POSTs to the same URL. More on this in a bit.</source>
          <target state="translated">&lt;code&gt;GET&lt;/code&gt; 을 통해 호출 되면 동일한 URL로 POST되는 로그인 양식이 표시됩니다. 이것에 조금 더 있습니다.</target>
        </trans-unit>
        <trans-unit id="46678a34b8334aafed964864dd1e40fe87ccd539" translate="yes" xml:space="preserve">
          <source>If called via &lt;code&gt;POST&lt;/code&gt; with user submitted credentials, it tries to log the user in. If login is successful, the view redirects to the URL specified in &lt;code&gt;next&lt;/code&gt;. If &lt;code&gt;next&lt;/code&gt; isn&amp;rsquo;t provided, it redirects to &lt;a href=&quot;../../ref/settings#std:setting-LOGIN_REDIRECT_URL&quot;&gt;&lt;code&gt;settings.LOGIN_REDIRECT_URL&lt;/code&gt;&lt;/a&gt; (which defaults to &lt;code&gt;/accounts/profile/&lt;/code&gt;). If login isn&amp;rsquo;t successful, it redisplays the login form.</source>
          <target state="translated">사용자가 제출 한 신임 정보로 &lt;code&gt;POST&lt;/code&gt; 를 통해 호출 된 경우 사용자 로그인을 시도합니다. 로그인에 성공하면보기가 &lt;code&gt;next&lt;/code&gt; 지정된 URL로 경로 재 지정됩니다 . 경우 &lt;code&gt;next&lt;/code&gt; 제공되지 않습니다, 그것은로 리디렉션 &lt;a href=&quot;../../ref/settings#std:setting-LOGIN_REDIRECT_URL&quot;&gt; &lt;code&gt;settings.LOGIN_REDIRECT_URL&lt;/code&gt; &lt;/a&gt; (이 기본값으로 &lt;code&gt;/accounts/profile/&lt;/code&gt; ). 로그인에 실패하면 로그인 양식이 다시 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="750d2305bb14a5c3b5333c9c7a05dbb98c87224d" translate="yes" xml:space="preserve">
          <source>If configured, the &lt;a href=&quot;middleware#django.middleware.security.SecurityMiddleware&quot;&gt;&lt;code&gt;SecurityMiddleware&lt;/code&gt;&lt;/a&gt; sets the &lt;a href=&quot;middleware#referrer-policy&quot;&gt;Referrer Policy&lt;/a&gt; header on all responses that do not already have it to the value provided.</source>
          <target state="translated">구성된 경우 &lt;a href=&quot;middleware#django.middleware.security.SecurityMiddleware&quot;&gt; &lt;code&gt;SecurityMiddleware&lt;/code&gt; &lt;/a&gt; 는 아직없는 모든 응답에 대해 &lt;a href=&quot;middleware#referrer-policy&quot;&gt;Referrer Policy&lt;/a&gt; 헤더를 제공된 값으로 설정합니다.</target>
        </trans-unit>
        <trans-unit id="3b24098ce265e59d2d9391447879b5bbc4795b4b" translate="yes" xml:space="preserve">
          <source>If desired, you may specify the numeric values for the constants directly according to the values in the above &lt;a href=&quot;contrib/messages#message-level-constants&quot;&gt;constants table&lt;/a&gt;.</source>
          <target state="translated">원하는 경우 위 &lt;a href=&quot;contrib/messages#message-level-constants&quot;&gt;상수 표의&lt;/a&gt; 값에 따라 상수의 숫자 값을 직접 지정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="60f37a761df5744dd22f17c7944ea423a1fae999" translate="yes" xml:space="preserve">
          <source>If either geometry is empty, returns &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="translated">두 형상 중 하나가 비어 있으면 &lt;code&gt;False&lt;/code&gt; 를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="2dc033f0f3207c5001559cb4fc79bafb686f8940" translate="yes" xml:space="preserve">
          <source>If either of these are used, the order the fields appear in the form will be the order the fields are defined in the model, with &lt;code&gt;ManyToManyField&lt;/code&gt; instances appearing last.</source>
          <target state="translated">이 중 하나를 사용하는 경우 양식에 필드가 나타나는 순서는 모델에 필드가 정의 된 순서이며 &lt;code&gt;ManyToManyField&lt;/code&gt; 인스턴스가 마지막에 나타납니다.</target>
        </trans-unit>
        <trans-unit id="89dd600a41a8a4a339d00aba9150edcc8a920468" translate="yes" xml:space="preserve">
          <source>If for any reason you want to force a database query, you can tell Django to clear the cache using &lt;code&gt;Site.objects.clear_cache()&lt;/code&gt;:</source>
          <target state="translated">어떤 이유로 든 데이터베이스 쿼리를 수행하려는 경우 &lt;code&gt;Site.objects.clear_cache()&lt;/code&gt; 사용하여 Django에 캐시를 지우도록 지시 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="881be6681a0240125f9df0391268603aa0a52905" translate="yes" xml:space="preserve">
          <source>If for some reason you don&amp;rsquo;t want to use client-side escaping, you can also set &lt;code&gt;escape_html=True&lt;/code&gt; and error messages will be escaped so you can use them directly in HTML.</source>
          <target state="translated">어떤 이유로 클라이언트 측 이스케이프를 사용하지 않으려면 &lt;code&gt;escape_html=True&lt;/code&gt; 를 설정하면 오류 메시지가 이스케이프되어 HTML에서 직접 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7d58ec0c689655b5bf0b89270f0419bdf232624f" translate="yes" xml:space="preserve">
          <source>If given one or more variables, check whether any variable has changed. For example, the following shows the date every time it changes, while showing the hour if either the hour or the date has changed:</source>
          <target state="translated">하나 이상의 변수가 제공되면 변수가 변경되었는지 확인하십시오. 예를 들어, 다음은 변경 될 때마다 날짜를 표시하고 시간 또는 날짜가 변경된 경우 시간을 표시합니다.</target>
        </trans-unit>
        <trans-unit id="a75480c4dd65b1596a43ef88e502e15a63301456" translate="yes" xml:space="preserve">
          <source>If in doubt, inspect the SQL query!</source>
          <target state="translated">의심스러운 경우 SQL 쿼리를 검사하십시오!</target>
        </trans-unit>
        <trans-unit id="95d8c3ff1cc126a9b4a3bff2c74afae11dd80cd5" translate="yes" xml:space="preserve">
          <source>If in doubt, it&amp;rsquo;s often better to back off and base your work on &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#View&quot;&gt;&lt;code&gt;View&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#TemplateView&quot;&gt;&lt;code&gt;TemplateView&lt;/code&gt;&lt;/a&gt;, perhaps with &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin&quot;&gt;&lt;code&gt;SingleObjectMixin&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../ref/class-based-views/mixins-multiple-object#django.views.generic.list.MultipleObjectMixin&quot;&gt;&lt;code&gt;MultipleObjectMixin&lt;/code&gt;&lt;/a&gt;. Although you will probably end up writing more code, it is more likely to be clearly understandable to someone else coming to it later, and with fewer interactions to worry about you will save yourself some thinking. (Of course, you can always dip into Django&amp;rsquo;s implementation of the generic class-based views for inspiration on how to tackle problems.)</source>
          <target state="translated">의심 &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin&quot;&gt; &lt;code&gt;SingleObjectMixin&lt;/code&gt; &lt;/a&gt; , 종종 SingleObjectMixin 및 &lt;a href=&quot;../../ref/class-based-views/mixins-multiple-object#django.views.generic.list.MultipleObjectMixin&quot;&gt; &lt;code&gt;MultipleObjectMixin&lt;/code&gt; &lt;/a&gt; 과 함께 &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#View&quot;&gt; &lt;code&gt;View&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#TemplateView&quot;&gt; &lt;code&gt;TemplateView&lt;/code&gt; 를&lt;/a&gt; 기반으로 작업을 중단하는 것이 좋습니다 . 더 많은 코드를 작성하게 될지 모르지만 나중에 다른 사람이 이해하기 쉬울 것이므로 걱정할 상호 작용이 적어지면 생각이 절약됩니다. (물론, 문제를 해결하는 방법에 대한 영감을 얻기 위해 Django의 일반 클래스 기반 뷰 구현에 항상 들어갈 수 있습니다.)</target>
        </trans-unit>
        <trans-unit id="e0befa3f1898d2d464922616bfef2029b094f045" translate="yes" xml:space="preserve">
          <source>If in doubt, leave it to its default of &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">확실하지 않은 경우 기본값 인 &lt;code&gt;True&lt;/code&gt; 로 두십시오 .</target>
        </trans-unit>
        <trans-unit id="ee64183f66a72c6ae780b05e928a3e9c5cf48b84" translate="yes" xml:space="preserve">
          <source>If installed successfully, the PostgreSQL server will run in the background each time the system as started as a Windows service. A PostgreSQL 9.x start menu group will created and contains shortcuts for the ASB as well as the &amp;lsquo;SQL Shell&amp;rsquo;, which will launch a &lt;code&gt;psql&lt;/code&gt; command window.</source>
          <target state="translated">성공적으로 설치되면 시스템이 Windows 서비스로 시작될 때마다 PostgreSQL 서버가 백그라운드에서 실행됩니다. PostgreSQL 9.x 시작 메뉴 그룹이 생성되고 ASSQL에 대한 바로 가기와 &lt;code&gt;psql&lt;/code&gt; 명령 창이 시작되는 'SQL Shell'이 포함됩니다 .</target>
        </trans-unit>
        <trans-unit id="9982be845bcf21d3518f4d7ad7b68561577502c0" translate="yes" xml:space="preserve">
          <source>If instead you&amp;rsquo;re getting a &lt;code&gt;NameError&lt;/code&gt; here, you may have missed a step in &lt;a href=&quot;tutorial02#tutorial02-import-timezone&quot;&gt;Part 2&lt;/a&gt; where we added imports of &lt;code&gt;datetime&lt;/code&gt; and &lt;code&gt;timezone&lt;/code&gt; to &lt;code&gt;polls/models.py&lt;/code&gt;. Copy the imports from that section, and try running your tests again.</source>
          <target state="translated">대신 여기 에 &lt;code&gt;NameError&lt;/code&gt; 가 발생하면 &lt;a href=&quot;tutorial02#tutorial02-import-timezone&quot;&gt;Part 2&lt;/a&gt; 에서 &lt;code&gt;datetime&lt;/code&gt; 및 &lt;code&gt;timezone&lt;/code&gt; 가져 오기 를 &lt;code&gt;polls/models.py&lt;/code&gt; 에 추가 한 단계를 놓쳤을 수 있습니다 . 해당 섹션에서 가져 오기를 복사하고 테스트를 다시 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="b0529f7dc039ac957b0f3d20411828b42bb5e1fe" translate="yes" xml:space="preserve">
          <source>If irregular shapes are required, then the underlying field should be made nullable and the values padded with &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">불규칙한 모양이 필요한 경우 기본 필드를 널 입력 가능으로 설정하고 값을 &lt;code&gt;None&lt;/code&gt; 으로 채 웁니다 .</target>
        </trans-unit>
        <trans-unit id="9c00a72ebe457e881bb58234002ab6b32b6b66b1" translate="yes" xml:space="preserve">
          <source>If it doesn&amp;rsquo;t find a match, the request continues to be processed as usual.</source>
          <target state="translated">일치하는 것이 없으면 요청은 평소와 같이 계속 처리됩니다.</target>
        </trans-unit>
        <trans-unit id="e0e735de01fd61ae5f7f9a6e0d1a273b2c4436c9" translate="yes" xml:space="preserve">
          <source>If it finds a match, and &lt;code&gt;new_path&lt;/code&gt; is empty, it sends a 410 (&amp;ldquo;Gone&amp;rdquo;) HTTP header and empty (content-less) response.</source>
          <target state="translated">일치하는 것을 발견하고 &lt;code&gt;new_path&lt;/code&gt; 가 비어 있으면 410 ( &quot;Gone&quot;) HTTP 헤더와 비어있는 (content-less) 응답을 보냅니다.</target>
        </trans-unit>
        <trans-unit id="73c4530195aba3cc21c592ffcd6b9c8e4ef6a369" translate="yes" xml:space="preserve">
          <source>If it finds a match, and &lt;code&gt;new_path&lt;/code&gt; is not empty, it redirects to &lt;code&gt;new_path&lt;/code&gt; using a 301 (&amp;ldquo;Moved Permanently&amp;rdquo;) redirect. You can subclass &lt;a href=&quot;#django.contrib.redirects.middleware.RedirectFallbackMiddleware&quot;&gt;&lt;code&gt;RedirectFallbackMiddleware&lt;/code&gt;&lt;/a&gt; and set &lt;a href=&quot;#django.contrib.redirects.middleware.RedirectFallbackMiddleware.response_redirect_class&quot;&gt;&lt;code&gt;response_redirect_class&lt;/code&gt;&lt;/a&gt; to &lt;a href=&quot;../request-response#django.http.HttpResponseRedirect&quot;&gt;&lt;code&gt;django.http.HttpResponseRedirect&lt;/code&gt;&lt;/a&gt; to use a &lt;code&gt;302 Moved Temporarily&lt;/code&gt; redirect instead.</source>
          <target state="translated">일치하는 것을 발견하고 &lt;code&gt;new_path&lt;/code&gt; 가 비어 있지 않으면 301 (&amp;ldquo;영구적으로 이동&amp;rdquo;) 리디렉션을 사용하여 &lt;code&gt;new_path&lt;/code&gt; 로 리디렉션합니다. &lt;a href=&quot;#django.contrib.redirects.middleware.RedirectFallbackMiddleware&quot;&gt; &lt;code&gt;RedirectFallbackMiddleware&lt;/code&gt; &lt;/a&gt; 를 서브 클래 싱 하고 &lt;a href=&quot;#django.contrib.redirects.middleware.RedirectFallbackMiddleware.response_redirect_class&quot;&gt; &lt;code&gt;response_redirect_class&lt;/code&gt; &lt;/a&gt; 를 &lt;a href=&quot;../request-response#django.http.HttpResponseRedirect&quot;&gt; &lt;code&gt;django.http.HttpResponseRedirect&lt;/code&gt; &lt;/a&gt; 로 설정 하여 &lt;code&gt;302 Moved Temporarily&lt;/code&gt; 리디렉션을 대신 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5b218da7489aa0db49911f5e0a7d7d9f83acf412" translate="yes" xml:space="preserve">
          <source>If it finds a match, it follows this algorithm:</source>
          <target state="translated">일치하는 것을 찾으면 다음 알고리즘을 따릅니다.</target>
        </trans-unit>
        <trans-unit id="f8555e4e9f54c1af70c38896405428aee1b63eb8" translate="yes" xml:space="preserve">
          <source>If it is set to &lt;code&gt;False&lt;/code&gt;, the test tablespaces won&amp;rsquo;t be automatically created at the beginning of the tests or dropped at the end.</source>
          <target state="translated">&lt;code&gt;False&lt;/code&gt; 로 설정 되면 테스트 시작시 테스트 테이블 스페이스가 자동으로 작성되거나 종료되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="9ff28be548c2e6e62ad9addaad106ce48d9e3524" translate="yes" xml:space="preserve">
          <source>If it is set to &lt;code&gt;False&lt;/code&gt;, the test user won&amp;rsquo;t be automatically created at the beginning of the tests and dropped at the end.</source>
          <target state="translated">&lt;code&gt;False&lt;/code&gt; 로 설정 하면 테스트 시작시 테스트 사용자가 자동으로 작성되지 않고 종료됩니다.</target>
        </trans-unit>
        <trans-unit id="086e529324c77f10019deb2293586e1f5eb037d3" translate="yes" xml:space="preserve">
          <source>If it&amp;rsquo;s &lt;strong&gt;bound&lt;/strong&gt; to a set of data, it&amp;rsquo;s capable of validating that data and rendering the form as HTML with the data displayed in the HTML.</source>
          <target state="translated">데이터 집합에 &lt;strong&gt;바인딩 된&lt;/strong&gt; 경우 해당 데이터의 유효성을 검사하고 HTML에 표시된 데이터를 사용하여 양식을 HTML로 렌더링 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="762f1bc2f06cdbc47d6d0f309454113e33598057" translate="yes" xml:space="preserve">
          <source>If it&amp;rsquo;s &lt;strong&gt;unbound&lt;/strong&gt;, it cannot do validation (because there&amp;rsquo;s no data to validate!), but it can still render the blank form as HTML.</source>
          <target state="translated">&lt;strong&gt;바인딩되지 않은&lt;/strong&gt; 경우 유효성을 검사 할 데이터가 없기 때문에 유효성 검사를 수행 할 수 없지만 빈 양식을 HTML로 렌더링 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7234acef7c65e2c9323271fc3c9d4ad9eb4b1e7c" translate="yes" xml:space="preserve">
          <source>If it&amp;rsquo;s a method, it should return the absolute path for a given object as returned by &lt;a href=&quot;#django.contrib.sitemaps.Sitemap.items&quot;&gt;&lt;code&gt;items()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">메서드 인 경우 &lt;a href=&quot;#django.contrib.sitemaps.Sitemap.items&quot;&gt; &lt;code&gt;items()&lt;/code&gt; &lt;/a&gt; 반환 한대로 지정된 객체의 절대 경로를 반환해야합니다 .</target>
        </trans-unit>
        <trans-unit id="143031e8953811a9c3a88c79798b24e0a425cc95" translate="yes" xml:space="preserve">
          <source>If it&amp;rsquo;s a method, it should take one argument &amp;ndash; an object as returned by &lt;a href=&quot;#django.contrib.sitemaps.Sitemap.items&quot;&gt;&lt;code&gt;items()&lt;/code&gt;&lt;/a&gt; &amp;ndash; and return that object&amp;rsquo;s change frequency as a string.</source>
          <target state="translated">메소드 인 경우 &lt;a href=&quot;#django.contrib.sitemaps.Sitemap.items&quot;&gt; &lt;code&gt;items()&lt;/code&gt; &lt;/a&gt; 리턴 한 오브젝트 인 하나의 인수를 사용하여 해당 오브젝트의 변경 빈도를 문자열로 리턴해야합니다.</target>
        </trans-unit>
        <trans-unit id="7bff00a78b519ed7c413fef5001b2e654dfd2b69" translate="yes" xml:space="preserve">
          <source>If it&amp;rsquo;s a method, it should take one argument &amp;ndash; an object as returned by &lt;a href=&quot;#django.contrib.sitemaps.Sitemap.items&quot;&gt;&lt;code&gt;items()&lt;/code&gt;&lt;/a&gt; &amp;ndash; and return that object&amp;rsquo;s last-modified date/time as a &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.datetime&quot;&gt;&lt;code&gt;datetime&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">메소드 인 경우 &lt;a href=&quot;#django.contrib.sitemaps.Sitemap.items&quot;&gt; &lt;code&gt;items()&lt;/code&gt; &lt;/a&gt; 리턴 한 오브젝트 인 하나의 인수를 취하여 해당 오브젝트의 마지막 수정 날짜 / 시간을 &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.datetime&quot;&gt; &lt;code&gt;datetime&lt;/code&gt; &lt;/a&gt; 으로 리턴해야합니다 .</target>
        </trans-unit>
        <trans-unit id="32fb347ef452af06b7d9684d9471b5bc24024f2b" translate="yes" xml:space="preserve">
          <source>If it&amp;rsquo;s a method, it should take one argument &amp;ndash; an object as returned by &lt;a href=&quot;#django.contrib.sitemaps.Sitemap.items&quot;&gt;&lt;code&gt;items()&lt;/code&gt;&lt;/a&gt; &amp;ndash; and return that object&amp;rsquo;s priority as either a string or float.</source>
          <target state="translated">메소드 인 경우 &lt;a href=&quot;#django.contrib.sitemaps.Sitemap.items&quot;&gt; &lt;code&gt;items()&lt;/code&gt; &lt;/a&gt; 의해 리턴 된 오브젝트 인 하나의 인수를 취하여 해당 오브젝트의 우선 순위를 문자열 또는 float로 리턴해야합니다.</target>
        </trans-unit>
        <trans-unit id="15ba45a5043f7358b844c8ea9113c7ba3ec3b8db" translate="yes" xml:space="preserve">
          <source>If it&amp;rsquo;s an application configuration class, Django imports the root package of the application, defined by its &lt;a href=&quot;#django.apps.AppConfig.name&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/a&gt; attribute. If it&amp;rsquo;s a Python package, Django creates a default application configuration.</source>
          <target state="translated">애플리케이션 구성 클래스 인 경우 Django는 &lt;a href=&quot;#django.apps.AppConfig.name&quot;&gt; &lt;code&gt;name&lt;/code&gt; &lt;/a&gt; 속성으로 정의 된 애플리케이션의 루트 패키지를 가져옵니다 . Python 패키지 인 경우 Django는 기본 응용 프로그램 구성을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="739a813bcb6932652d7c4c0f099220e51e22f92e" translate="yes" xml:space="preserve">
          <source>If it&amp;rsquo;s an attribute, its value should be a &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.datetime&quot;&gt;&lt;code&gt;datetime&lt;/code&gt;&lt;/a&gt; representing the last-modified date/time for &lt;em&gt;every&lt;/em&gt; object returned by &lt;a href=&quot;#django.contrib.sitemaps.Sitemap.items&quot;&gt;&lt;code&gt;items()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">속성 인 경우 해당 값은 &lt;a href=&quot;#django.contrib.sitemaps.Sitemap.items&quot;&gt; &lt;code&gt;items()&lt;/code&gt; &lt;/a&gt; 반환 한 &lt;em&gt;모든&lt;/em&gt; 객체 의 마지막 수정 날짜 / 시간을 나타내는 &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.datetime&quot;&gt; &lt;code&gt;datetime&lt;/code&gt; &lt;/a&gt; 이어야합니다 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="15ad29af32202e8f80e7637ce9fea9eb2c04bb2b" translate="yes" xml:space="preserve">
          <source>If it&amp;rsquo;s an attribute, its value should be a string representing an absolute path to use for &lt;em&gt;every&lt;/em&gt; object returned by &lt;a href=&quot;#django.contrib.sitemaps.Sitemap.items&quot;&gt;&lt;code&gt;items()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">속성 인 경우 해당 값은 &lt;a href=&quot;#django.contrib.sitemaps.Sitemap.items&quot;&gt; &lt;code&gt;items()&lt;/code&gt; &lt;/a&gt; 반환 한 &lt;em&gt;모든&lt;/em&gt; 객체 에 사용할 절대 경로를 나타내는 문자열이어야합니다 .</target>
        </trans-unit>
        <trans-unit id="1ddf41b0a9d07a449a358d682fe7947578779914" translate="yes" xml:space="preserve">
          <source>If it&amp;rsquo;s an attribute, its value should be a string representing the change frequency of &lt;em&gt;every&lt;/em&gt; object returned by &lt;a href=&quot;#django.contrib.sitemaps.Sitemap.items&quot;&gt;&lt;code&gt;items()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">속성 인 경우 값은 &lt;a href=&quot;#django.contrib.sitemaps.Sitemap.items&quot;&gt; &lt;code&gt;items()&lt;/code&gt; &lt;/a&gt; 반환 한 &lt;em&gt;모든&lt;/em&gt; 객체 의 변경 빈도를 나타내는 문자열이어야합니다 .</target>
        </trans-unit>
        <trans-unit id="7ee4f35fc601d54876905bd051b2469f621200e6" translate="yes" xml:space="preserve">
          <source>If it&amp;rsquo;s an attribute, its value should be either a string or float representing the priority of &lt;em&gt;every&lt;/em&gt; object returned by &lt;a href=&quot;#django.contrib.sitemaps.Sitemap.items&quot;&gt;&lt;code&gt;items()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">속성 인 경우 값은 &lt;a href=&quot;#django.contrib.sitemaps.Sitemap.items&quot;&gt; &lt;code&gt;items()&lt;/code&gt; &lt;/a&gt; 반환 한 &lt;em&gt;모든&lt;/em&gt; 객체 의 우선 순위를 나타내는 문자열 또는 float이어야합니다 .</target>
        </trans-unit>
        <trans-unit id="45346a65597fa89f0720e560f69fecf7ee17793a" translate="yes" xml:space="preserve">
          <source>If it&amp;rsquo;s defined, it&amp;rsquo;s the dotted path to the &lt;a href=&quot;#django.apps.AppConfig&quot;&gt;&lt;code&gt;AppConfig&lt;/code&gt;&lt;/a&gt; subclass for that application.</source>
          <target state="translated">정의 된 경우 해당 애플리케이션 의 &lt;a href=&quot;#django.apps.AppConfig&quot;&gt; &lt;code&gt;AppConfig&lt;/code&gt; &lt;/a&gt; 서브 클래스에 대한 점선 경로 입니다.</target>
        </trans-unit>
        <trans-unit id="586dfd2621f54a7ad40e50477dfcdfaa75815200" translate="yes" xml:space="preserve">
          <source>If it&amp;rsquo;s your first time doing an upgrade, it is useful to read the &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/internals/release-process/&quot;&gt;guide on the different release processes&lt;/a&gt;.</source>
          <target state="translated">처음으로 업그레이드를 수행하는 &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/internals/release-process/&quot;&gt;경우 다른 릴리스 프로세스에 대한 안내서&lt;/a&gt; 를 읽는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="48ee40c99146090e779f852245b5afb888e00a5e" translate="yes" xml:space="preserve">
          <source>If loading a template fails, the following two exceptions, defined in &lt;code&gt;django.template&lt;/code&gt;, may be raised:</source>
          <target state="translated">템플리트로드에 실패하면 &lt;code&gt;django.template&lt;/code&gt; 에 정의 된 다음 두 가지 예외 가 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d4d46c7886d2254cf93d3e3fcccd7a0f4bcf2dcc" translate="yes" xml:space="preserve">
          <source>If localized URLs get reversed in templates they always use the current language. To link to a URL in another language use the &lt;a href=&quot;#std:templatetag-language&quot;&gt;&lt;code&gt;language&lt;/code&gt;&lt;/a&gt; template tag. It enables the given language in the enclosed template section:</source>
          <target state="translated">현지화 된 URL이 템플릿에서 반대로 바뀌면 항상 현재 언어를 사용합니다. 다른 언어로 된 URL에 연결하려면 &lt;a href=&quot;#std:templatetag-language&quot;&gt; &lt;code&gt;language&lt;/code&gt; &lt;/a&gt; 템플릿 태그를 사용하십시오 . 동봉 된 템플릿 섹션에서 지정된 언어를 활성화합니다.</target>
        </trans-unit>
        <trans-unit id="5b07bb0f1712469af9863f3a275491ca48434fc9" translate="yes" xml:space="preserve">
          <source>If many fields need to be duplicated in the unmanaged model, it may be best to create an abstract model with the shared fields and then have the unmanaged and managed models inherit from the abstract model.</source>
          <target state="translated">관리되지 않는 모델에서 많은 필드를 복제해야하는 경우 공유 필드를 사용하여 추상 모델을 만든 다음 관리되지 않는 모델과 관리되는 모델이 추상 모델에서 상속되도록하는 것이 가장 좋습니다.</target>
        </trans-unit>
        <trans-unit id="5117892f8f0300c66daa9628a86ea40e1e0c377f" translate="yes" xml:space="preserve">
          <source>If multiple Django sites are run in a single mod_wsgi process, all of them will use the settings of whichever one happens to run first. This can be solved by changing:</source>
          <target state="translated">여러 개의 Django 사이트가 단일 mod_wsgi 프로세스에서 실행되는 경우, 모든 Django 사이트가 먼저 실행되는 설정을 사용합니다. 다음을 변경하여 해결할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fea1c8c9bb79ccbb6aa26063b6ab36dc99df0518" translate="yes" xml:space="preserve">
          <source>If multiple objects are found, &lt;code&gt;get_or_create()&lt;/code&gt; raises &lt;a href=&quot;../exceptions#django.core.exceptions.MultipleObjectsReturned&quot;&gt;&lt;code&gt;MultipleObjectsReturned&lt;/code&gt;&lt;/a&gt;. If an object is &lt;em&gt;not&lt;/em&gt; found, &lt;code&gt;get_or_create()&lt;/code&gt; will instantiate and save a new object, returning a tuple of the new object and &lt;code&gt;True&lt;/code&gt;. The new object will be created roughly according to this algorithm:</source>
          <target state="translated">여러 개체가 발견되면, &lt;code&gt;get_or_create()&lt;/code&gt; 제기 &lt;a href=&quot;../exceptions#django.core.exceptions.MultipleObjectsReturned&quot;&gt; &lt;code&gt;MultipleObjectsReturned&lt;/code&gt; 을&lt;/a&gt; . 객체가되면 &lt;em&gt;되지&lt;/em&gt; 발견 &lt;code&gt;get_or_create()&lt;/code&gt; 인스턴스화하고 새 개체와의 튜플 반환, 새로운 객체를 저장할 &lt;code&gt;True&lt;/code&gt; . 이 알고리즘에 따라 새로운 객체가 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="1e71877ad6a5d25c689b1f2de0070e7265bd4937" translate="yes" xml:space="preserve">
          <source>If necessary, set &lt;a href=&quot;../ref/settings#std:setting-SECURE_PROXY_SSL_HEADER&quot;&gt;&lt;code&gt;SECURE_PROXY_SSL_HEADER&lt;/code&gt;&lt;/a&gt;, ensuring that you have understood the warnings there thoroughly. Failure to do this can result in CSRF vulnerabilities, and failure to do it correctly can also be dangerous!</source>
          <target state="translated">필요한 경우 &lt;a href=&quot;../ref/settings#std:setting-SECURE_PROXY_SSL_HEADER&quot;&gt; &lt;code&gt;SECURE_PROXY_SSL_HEADER&lt;/code&gt; 를&lt;/a&gt; 설정 하여 경고를 철저히 이해 했는지 확인하십시오. 이를 수행하지 않으면 CSRF 취약성이 발생할 수 있으며 올바르게 수행하지 않으면 위험 할 수도 있습니다!</target>
        </trans-unit>
        <trans-unit id="03ba143e9f631d05f6ba22f0590ce7f747ce8328" translate="yes" xml:space="preserve">
          <source>If neither &lt;code&gt;fields&lt;/code&gt; nor &lt;a href=&quot;#django.contrib.admin.ModelAdmin.fieldsets&quot;&gt;&lt;code&gt;fieldsets&lt;/code&gt;&lt;/a&gt; options are present, Django will default to displaying each field that isn&amp;rsquo;t an &lt;code&gt;AutoField&lt;/code&gt; and has &lt;code&gt;editable=True&lt;/code&gt;, in a single fieldset, in the same order as the fields are defined in the model.</source>
          <target state="translated">어느 경우 &lt;code&gt;fields&lt;/code&gt; 나 &lt;a href=&quot;#django.contrib.admin.ModelAdmin.fieldsets&quot;&gt; &lt;code&gt;fieldsets&lt;/code&gt; &lt;/a&gt; 옵션이 존재, 장고가 아닌 각 필드의 표시로 설정됩니다 &lt;code&gt;AutoField&lt;/code&gt; 하고 있습니다 &lt;code&gt;editable=True&lt;/code&gt; 필드가 모델에 정의 된 것과 같은 순서로, 하나의 필드 셋에.</target>
        </trans-unit>
        <trans-unit id="d162507e2b28cb230355fa270db138b42135ea87" translate="yes" xml:space="preserve">
          <source>If neither &lt;code&gt;fieldsets&lt;/code&gt; nor &lt;a href=&quot;#django.contrib.admin.ModelAdmin.fields&quot;&gt;&lt;code&gt;fields&lt;/code&gt;&lt;/a&gt; options are present, Django will default to displaying each field that isn&amp;rsquo;t an &lt;code&gt;AutoField&lt;/code&gt; and has &lt;code&gt;editable=True&lt;/code&gt;, in a single fieldset, in the same order as the fields are defined in the model.</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.admin.ModelAdmin.fields&quot;&gt; &lt;code&gt;fields&lt;/code&gt; &lt;/a&gt; &lt;code&gt;fieldsets&lt;/code&gt; 이나 필드 옵션이 모두 없으면 Django는 기본적으로 &lt;code&gt;AutoField&lt;/code&gt; 가 아닌 필드에 모델이 정의한 순서대로 단일 필드 집합에서 &lt;code&gt;editable=True&lt;/code&gt; 가 있는 각 필드를 표시합니다 .</target>
        </trans-unit>
        <trans-unit id="e9c8ddd198190a9c557ddc6bb9c2aea2a2e1d698" translate="yes" xml:space="preserve">
          <source>If neither of these conditions is met, Django will raise &lt;a href=&quot;exceptions#django.core.exceptions.ImproperlyConfigured&quot;&gt;&lt;code&gt;ImproperlyConfigured&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이러한 조건 중 어느 것도 충족되지 않으면 Django는 &lt;a href=&quot;exceptions#django.core.exceptions.ImproperlyConfigured&quot;&gt; &lt;code&gt;ImproperlyConfigured&lt;/code&gt; &lt;/a&gt; 시킵니다.</target>
        </trans-unit>
        <trans-unit id="22236fab6abdd3c57ac49f8258f85828d58d41a1" translate="yes" xml:space="preserve">
          <source>If no &lt;code&gt;format&lt;/code&gt; argument is provided, the default format is the first format found in &lt;a href=&quot;../settings#std:setting-DATETIME_INPUT_FORMATS&quot;&gt;&lt;code&gt;DATETIME_INPUT_FORMATS&lt;/code&gt;&lt;/a&gt; and respects &lt;a href=&quot;../../topics/i18n/formatting&quot;&gt;Format localization&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;format&lt;/code&gt; 인수가 제공 되지 않으면 기본 형식은 &lt;a href=&quot;../settings#std:setting-DATETIME_INPUT_FORMATS&quot;&gt; &lt;code&gt;DATETIME_INPUT_FORMATS&lt;/code&gt; 에&lt;/a&gt; 있는 첫 번째 형식 이며 &lt;a href=&quot;../../topics/i18n/formatting&quot;&gt;형식 현지화를 따릅니다&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="69f074f3a84e1657dd8a12d9aa961a2df4985580" translate="yes" xml:space="preserve">
          <source>If no &lt;code&gt;format&lt;/code&gt; argument is provided, the default format is the first format found in &lt;a href=&quot;../settings#std:setting-DATE_INPUT_FORMATS&quot;&gt;&lt;code&gt;DATE_INPUT_FORMATS&lt;/code&gt;&lt;/a&gt; and respects &lt;a href=&quot;../../topics/i18n/formatting&quot;&gt;Format localization&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;format&lt;/code&gt; 인수가 제공 되지 않으면 기본 형식은 &lt;a href=&quot;../settings#std:setting-DATE_INPUT_FORMATS&quot;&gt; &lt;code&gt;DATE_INPUT_FORMATS&lt;/code&gt; 에&lt;/a&gt; 있는 첫 번째 형식 이며 &lt;a href=&quot;../../topics/i18n/formatting&quot;&gt;형식 현지화&lt;/a&gt; 를 따릅니다 .</target>
        </trans-unit>
        <trans-unit id="651012be4ff2b148ba9354acdae062b14fd3c0d9" translate="yes" xml:space="preserve">
          <source>If no &lt;code&gt;format&lt;/code&gt; argument is provided, the default format is the first format found in &lt;a href=&quot;../settings#std:setting-TIME_INPUT_FORMATS&quot;&gt;&lt;code&gt;TIME_INPUT_FORMATS&lt;/code&gt;&lt;/a&gt; and respects &lt;a href=&quot;../../topics/i18n/formatting&quot;&gt;Format localization&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;format&lt;/code&gt; 인수가 제공 되지 않으면 기본 형식은 &lt;a href=&quot;../settings#std:setting-TIME_INPUT_FORMATS&quot;&gt; &lt;code&gt;TIME_INPUT_FORMATS&lt;/code&gt; 에&lt;/a&gt; 있는 첫 번째 형식 이며 &lt;a href=&quot;../../topics/i18n/formatting&quot;&gt;형식 현지화&lt;/a&gt; 를 따릅니다 .</target>
        </trans-unit>
        <trans-unit id="880370f7f114c5c060d3bd42e86cd83d71f53766" translate="yes" xml:space="preserve">
          <source>If no &lt;code&gt;input_date_formats&lt;/code&gt; argument is provided, the default input formats for &lt;a href=&quot;#django.forms.DateField&quot;&gt;&lt;code&gt;DateField&lt;/code&gt;&lt;/a&gt; are used.</source>
          <target state="translated">&lt;code&gt;input_date_formats&lt;/code&gt; 인수가 제공 되지 않으면 &lt;a href=&quot;#django.forms.DateField&quot;&gt; &lt;code&gt;DateField&lt;/code&gt; &lt;/a&gt; 의 기본 입력 형식 이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="53192b0b6262194bcbc96fe1b2f7da606c0cca2b" translate="yes" xml:space="preserve">
          <source>If no &lt;code&gt;input_formats&lt;/code&gt; argument is provided, the default input formats are taken from &lt;a href=&quot;../settings#std:setting-DATETIME_INPUT_FORMATS&quot;&gt;&lt;code&gt;DATETIME_INPUT_FORMATS&lt;/code&gt;&lt;/a&gt; if &lt;a href=&quot;../settings#std:setting-USE_L10N&quot;&gt;&lt;code&gt;USE_L10N&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;False&lt;/code&gt;, or from the active locale format &lt;code&gt;DATETIME_INPUT_FORMATS&lt;/code&gt; key if localization is enabled. See also &lt;a href=&quot;../../topics/i18n/formatting&quot;&gt;format localization&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;input_formats&lt;/code&gt; 인수가 제공 되지 않으면 &lt;a href=&quot;../settings#std:setting-USE_L10N&quot;&gt; &lt;code&gt;USE_L10N&lt;/code&gt; &lt;/a&gt; 이 &lt;code&gt;False&lt;/code&gt; 이면 &lt;a href=&quot;../settings#std:setting-DATETIME_INPUT_FORMATS&quot;&gt; &lt;code&gt;DATETIME_INPUT_FORMATS&lt;/code&gt; &lt;/a&gt; 또는 현지화가 사용 가능한 경우 활성 로케일 형식 &lt;code&gt;DATETIME_INPUT_FORMATS&lt;/code&gt; 키 에서 기본 입력 형식 이 사용됩니다. &lt;a href=&quot;../../topics/i18n/formatting&quot;&gt;형식 현지화&lt;/a&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="e218ec7444929cf5f907333d683042a1a250dec0" translate="yes" xml:space="preserve">
          <source>If no &lt;code&gt;input_formats&lt;/code&gt; argument is provided, the default input formats are taken from &lt;a href=&quot;../settings#std:setting-DATE_INPUT_FORMATS&quot;&gt;&lt;code&gt;DATE_INPUT_FORMATS&lt;/code&gt;&lt;/a&gt; if &lt;a href=&quot;../settings#std:setting-USE_L10N&quot;&gt;&lt;code&gt;USE_L10N&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;False&lt;/code&gt;, or from the active locale format &lt;code&gt;DATE_INPUT_FORMATS&lt;/code&gt; key if localization is enabled. See also &lt;a href=&quot;../../topics/i18n/formatting&quot;&gt;format localization&lt;/a&gt;.</source>
          <target state="translated">어떤 경우 &lt;code&gt;input_formats&lt;/code&gt; 의 인수가 제공되지 않으며, 기본 입력 형식에서 가져옵니다 &lt;a href=&quot;../settings#std:setting-DATE_INPUT_FORMATS&quot;&gt; &lt;code&gt;DATE_INPUT_FORMATS&lt;/code&gt; &lt;/a&gt; 경우 &lt;a href=&quot;../settings#std:setting-USE_L10N&quot;&gt; &lt;code&gt;USE_L10N&lt;/code&gt; 은&lt;/a&gt; 이다 &lt;code&gt;False&lt;/code&gt; , 또는 활성 로케일 형식에서 &lt;code&gt;DATE_INPUT_FORMATS&lt;/code&gt; 의 키 현지화가 사용 가능합니다. &lt;a href=&quot;../../topics/i18n/formatting&quot;&gt;형식 현지화&lt;/a&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="00ca1bfa89502aeb4be2cb7334f19db2fd371a1f" translate="yes" xml:space="preserve">
          <source>If no &lt;code&gt;input_formats&lt;/code&gt; argument is provided, the default input formats are taken from &lt;a href=&quot;../settings#std:setting-TIME_INPUT_FORMATS&quot;&gt;&lt;code&gt;TIME_INPUT_FORMATS&lt;/code&gt;&lt;/a&gt; if &lt;a href=&quot;../settings#std:setting-USE_L10N&quot;&gt;&lt;code&gt;USE_L10N&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;False&lt;/code&gt;, or from the active locale format &lt;code&gt;TIME_INPUT_FORMATS&lt;/code&gt; key if localization is enabled. See also &lt;a href=&quot;../../topics/i18n/formatting&quot;&gt;format localization&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;input_formats&lt;/code&gt; 인수가 제공 되지 않으면 &lt;a href=&quot;../settings#std:setting-USE_L10N&quot;&gt; &lt;code&gt;USE_L10N&lt;/code&gt; &lt;/a&gt; 이 &lt;code&gt;False&lt;/code&gt; 이면 기본 입력 형식이 &lt;a href=&quot;../settings#std:setting-TIME_INPUT_FORMATS&quot;&gt; &lt;code&gt;TIME_INPUT_FORMATS&lt;/code&gt; &lt;/a&gt; 또는 현지화가 사용 가능한 경우 활성 로케일 형식 &lt;code&gt;TIME_INPUT_FORMATS&lt;/code&gt; 키 에서 가져옵니다 . &lt;a href=&quot;../../topics/i18n/formatting&quot;&gt;형식 현지화&lt;/a&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="deb75c2ac702a4b0a40f6bcf697ba548571a7947" translate="yes" xml:space="preserve">
          <source>If no &lt;code&gt;input_time_formats&lt;/code&gt; argument is provided, the default input formats for &lt;a href=&quot;#django.forms.TimeField&quot;&gt;&lt;code&gt;TimeField&lt;/code&gt;&lt;/a&gt; are used.</source>
          <target state="translated">&lt;code&gt;input_time_formats&lt;/code&gt; 인수가 제공 되지 않으면 &lt;a href=&quot;#django.forms.TimeField&quot;&gt; &lt;code&gt;TimeField&lt;/code&gt; &lt;/a&gt; 의 기본 입력 형식 이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="e2eabcd7b412af2312e2abb94cd9bbfac179ea3d" translate="yes" xml:space="preserve">
          <source>If no URL pattern matches, or if an exception is raised during any point in this process, Django invokes an appropriate error-handling view. See &lt;a href=&quot;#error-handling&quot;&gt;Error handling&lt;/a&gt; below.</source>
          <target state="translated">일치하는 URL 패턴이 없거나이 프로세스에서 특정 시점에 예외가 발생하면 Django는 적절한 오류 처리보기를 호출합니다. 아래의 &lt;a href=&quot;#error-handling&quot;&gt;오류 처리를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="b48d608444a7be435d54c631af2c36c0e71eb05b" translate="yes" xml:space="preserve">
          <source>If no application name is provided, all installed applications will be dumped.</source>
          <target state="translated">애플리케이션 이름이 제공되지 않으면 설치된 모든 애플리케이션이 덤프됩니다.</target>
        </trans-unit>
        <trans-unit id="3be3b978e15bd33854b5175c0738a463b9bbdadd" translate="yes" xml:space="preserve">
          <source>If no exception occurred, then &lt;code&gt;exc_info&lt;/code&gt; will be &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">예외가 발생하지 않으면 &lt;code&gt;exc_info&lt;/code&gt; 는 &lt;code&gt;None&lt;/code&gt; 입니다. 입니다.</target>
        </trans-unit>
        <trans-unit id="230449ebf8fd8f983b73d29fe0abb4963a58e26e" translate="yes" xml:space="preserve">
          <source>If no managers are declared on a model and/or its parents, Django automatically creates the &lt;code&gt;objects&lt;/code&gt; manager.</source>
          <target state="translated">모델 및 / 또는 해당 부모에 관리자가 선언되어 있지 않으면 Django는 자동으로 &lt;code&gt;objects&lt;/code&gt; 관리자를 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="90268d13885a180cdb68972e2680aa7e5ca9a536" translate="yes" xml:space="preserve">
          <source>If no match can be made, &lt;code&gt;reverse()&lt;/code&gt; raises a &lt;a href=&quot;exceptions#django.urls.NoReverseMatch&quot;&gt;&lt;code&gt;NoReverseMatch&lt;/code&gt;&lt;/a&gt; exception.</source>
          <target state="translated">일치하는 것이 없으면 &lt;code&gt;reverse()&lt;/code&gt; 는 &lt;a href=&quot;exceptions#django.urls.NoReverseMatch&quot;&gt; &lt;code&gt;NoReverseMatch&lt;/code&gt; &lt;/a&gt; 예외를 발생시킵니다.</target>
        </trans-unit>
        <trans-unit id="fd524aa004b3f27870b580c048596af0b132e7e1" translate="yes" xml:space="preserve">
          <source>If no object has been assigned to this relationship, Django will raise a &lt;code&gt;DoesNotExist&lt;/code&gt; exception.</source>
          <target state="translated">이 관계에 객체가 할당되어 있지 않으면 Django는 &lt;code&gt;DoesNotExist&lt;/code&gt; 예외를 발생시킵니다.</target>
        </trans-unit>
        <trans-unit id="e5e7bac3ef346bb21109fb7f48b276715fbf7e3b" translate="yes" xml:space="preserve">
          <source>If no password is provided, &lt;a href=&quot;#django.contrib.auth.models.User.set_unusable_password&quot;&gt;&lt;code&gt;set_unusable_password()&lt;/code&gt;&lt;/a&gt; will be called.</source>
          <target state="translated">암호를 제공하지 않으면 &lt;a href=&quot;#django.contrib.auth.models.User.set_unusable_password&quot;&gt; &lt;code&gt;set_unusable_password()&lt;/code&gt; &lt;/a&gt; 가 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="f2a94519d41f60e01c2bb67dfbc966d83d787abe" translate="yes" xml:space="preserve">
          <source>If no router has an opinion (i.e. all routers return &lt;code&gt;None&lt;/code&gt;), only relations within the same database are allowed.</source>
          <target state="translated">라우터에 의견이없는 경우 (즉, 모든 라우터가 &lt;code&gt;None&lt;/code&gt; 을 반환 하는 경우) 동일한 데이터베이스 내의 관계 만 허용됩니다.</target>
        </trans-unit>
        <trans-unit id="8d6ba29a42ab8732ea2bac1f574258bf97584d1c" translate="yes" xml:space="preserve">
          <source>If not &lt;code&gt;None&lt;/code&gt;, this will be used as the base path for &lt;a href=&quot;../topics/forms/media#form-asset-paths&quot;&gt;asset definitions&lt;/a&gt; (the &lt;code&gt;Media&lt;/code&gt; class) and the &lt;a href=&quot;contrib/staticfiles&quot;&gt;staticfiles app&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;None&lt;/code&gt; 이 아닌 경우 &lt;a href=&quot;../topics/forms/media#form-asset-paths&quot;&gt;자산 정의&lt;/a&gt; ( &lt;code&gt;Media&lt;/code&gt; 클래스) 및 &lt;a href=&quot;contrib/staticfiles&quot;&gt;정적 파일 앱&lt;/a&gt; 의 기본 경로로 사용됩니다. .</target>
        </trans-unit>
        <trans-unit id="61421a068661ad515ad52948781a5d81bcd78c50" translate="yes" xml:space="preserve">
          <source>If not &lt;code&gt;None&lt;/code&gt;, this will be used as the value of the &lt;code&gt;SCRIPT_NAME&lt;/code&gt; environment variable in any HTTP request. This setting can be used to override the server-provided value of &lt;code&gt;SCRIPT_NAME&lt;/code&gt;, which may be a rewritten version of the preferred value or not supplied at all. It is also used by &lt;a href=&quot;applications#django.setup&quot;&gt;&lt;code&gt;django.setup()&lt;/code&gt;&lt;/a&gt; to set the URL resolver script prefix outside of the request/response cycle (e.g. in management commands and standalone scripts) to generate correct URLs when &lt;code&gt;SCRIPT_NAME&lt;/code&gt; is not &lt;code&gt;/&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;None&lt;/code&gt; 이 아닌 경우 HTTP 요청에서 &lt;code&gt;SCRIPT_NAME&lt;/code&gt; 환경 변수 의 값으로 사용됩니다 . 이 설정은 서버에서 제공 한 &lt;code&gt;SCRIPT_NAME&lt;/code&gt; 값을 대체하는 데 사용할 수 있습니다.이 값은 선호하는 값을 다시 쓰거나 전혀 제공하지 않을 수 있습니다. 또한 &lt;a href=&quot;applications#django.setup&quot;&gt; &lt;code&gt;django.setup()&lt;/code&gt; &lt;/a&gt; 은 요청 / 응답주기 외부 (예 : 관리 명령 및 독립형 스크립트) 외부에서 URL 리졸버 스크립트 접두어를 설정하여 &lt;code&gt;SCRIPT_NAME&lt;/code&gt; 이 &lt;code&gt;/&lt;/code&gt; 가 아닌 경우 올바른 URL을 생성하도록 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="29ae695d6cfe529eb5e8578f78625de3958c1363" translate="yes" xml:space="preserve">
          <source>If not provided, the &amp;lsquo;/&amp;rsquo; character is assumed safe. An empty string can be provided when &lt;em&gt;all&lt;/em&gt; characters should be escaped. For example:</source>
          <target state="translated">제공되지 않으면 '/'문자는 안전하다고 간주됩니다. 빈 문자열을 제공 할 수있을 때 &lt;em&gt;모든&lt;/em&gt; 문자를 이스케이프해야하는 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
