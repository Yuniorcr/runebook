<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="django">
    <body>
      <group id="django">
        <trans-unit id="7e0f8dd4b809ced810b321c4ca59ad5cb144a472" translate="yes" xml:space="preserve">
          <source>There are many different ways to import data into a spatial database &amp;ndash; besides the tools included within GeoDjango, you may also use the following:</source>
          <target state="translated">공간 데이터베이스로 데이터를 가져 오는 방법은 여러 가지가 있습니다. GeoDjango에 포함 된 도구 외에도 다음을 사용할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="d46a0cb550df1d7e7e5a2af836842f4a6edfcdcb" translate="yes" xml:space="preserve">
          <source>There are many options for deploying your Django application, based on your architecture or your particular business needs, but that discussion is outside the scope of what Django can give you as guidance.</source>
          <target state="translated">아키텍처 또는 특정 비즈니스 요구에 따라 Django 애플리케이션을 배포 할 수있는 많은 옵션이 있지만, 그 논의는 Django가 지침으로 제공 할 수있는 범위를 벗어납니다.</target>
        </trans-unit>
        <trans-unit id="cb71e78e23143f9c58be0e1a4d3b0283bc9e3fb4" translate="yes" xml:space="preserve">
          <source>There are many ways to approach writing tests.</source>
          <target state="translated">필기 시험에 접근하는 방법에는 여러 가지가 있습니다.</target>
        </trans-unit>
        <trans-unit id="d82ce399e41d9ada125c24412befb44b2db38a07" translate="yes" xml:space="preserve">
          <source>There are now a total of three forms showing above. One for the initial data that was passed in and two extra forms. Also note that we are passing in a list of dictionaries as the initial data.</source>
          <target state="translated">위에 표시된 총 세 가지 형태가 있습니다. 전달 된 초기 데이터와 추가 양식 두 개. 또한 사전 데이터 목록으로 사전 목록을 전달하고 있습니다.</target>
        </trans-unit>
        <trans-unit id="0675d92987ebc85dea15e155c04c65d27ed914a0" translate="yes" xml:space="preserve">
          <source>There are other output options though for the &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt;/&lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; pairs:</source>
          <target state="translated">&lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; / &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 쌍에 대한 다른 출력 옵션이 있습니다 .</target>
        </trans-unit>
        <trans-unit id="b890167490cfa71a2c2750ecaf4bbbf4044790ed" translate="yes" xml:space="preserve">
          <source>There are other trade-offs to bear in mind. Your own time is a valuable resource, more precious than CPU time. Some improvements might be too difficult to be worth implementing, or might affect the portability or maintainability of the code. Not all performance improvements are worth the effort.</source>
          <target state="translated">명심해야 할 다른 장단점이 있습니다. 자신의 시간은 귀중한 자원이며 CPU 시간보다 더 소중합니다. 일부 개선 사항은 구현하기에 너무 어려워 지거나 코드의 이식성 또는 유지 보수성에 영향을 줄 수 있습니다. 모든 성능 향상이 그만한 가치가있는 것은 아닙니다.</target>
        </trans-unit>
        <trans-unit id="5447b8a8aa38e50b103d54b5c95d6ddb38da9743" translate="yes" xml:space="preserve">
          <source>There are security risks if you are accepting uploaded content from untrusted users! See the security guide&amp;rsquo;s topic on &lt;a href=&quot;../security#user-uploaded-content-security&quot;&gt;User-uploaded content&lt;/a&gt; for mitigation details.</source>
          <target state="translated">신뢰할 수없는 사용자로부터 업로드 된 콘텐츠를 수락하는 경우 보안 위험이 있습니다! 완화에 대한 자세한 &lt;a href=&quot;../security#user-uploaded-content-security&quot;&gt;내용&lt;/a&gt; 은 사용자 업로드 콘텐츠에 대한 보안 가이드 주제를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="bc6b23babe3f3faae698cf4967c8ca480e73246b" translate="yes" xml:space="preserve">
          <source>There are security risks if you are accepting uploaded content from untrusted users! See the security guide&amp;rsquo;s topic on &lt;a href=&quot;../topics/security#user-uploaded-content-security&quot;&gt;User-uploaded content&lt;/a&gt; for mitigation details.</source>
          <target state="translated">신뢰할 수없는 사용자로부터 업로드 된 콘텐츠를 수락하는 경우 보안 위험이 있습니다! 완화에 대한 자세한 &lt;a href=&quot;../topics/security#user-uploaded-content-security&quot;&gt;내용&lt;/a&gt; 은 사용자 업로드 콘텐츠에 대한 보안 가이드 주제를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="5440f1eeb6c5554f991bdd01619224b02c477d9c" translate="yes" xml:space="preserve">
          <source>There are several commands which you will use to interact with migrations and Django&amp;rsquo;s handling of database schema:</source>
          <target state="translated">마이그레이션 및 Django의 데이터베이스 스키마 처리와 상호 작용하는 데 사용할 몇 가지 명령이 있습니다.</target>
        </trans-unit>
        <trans-unit id="b47d4b1128fa9f63cdd5a6ffafbb68a17a586a50" translate="yes" xml:space="preserve">
          <source>There are several other ways to customize the order:</source>
          <target state="translated">주문을 사용자 정의하는 몇 가지 다른 방법이 있습니다.</target>
        </trans-unit>
        <trans-unit id="3c8daea2ca7aa9f48eae0cb4490b703d0fcb0ee3" translate="yes" xml:space="preserve">
          <source>There are several ways to include the flat pages in your URLconf. You can dedicate a particular path to flat pages:</source>
          <target state="translated">URLconf에 플랫 페이지를 포함시키는 방법에는 여러 가지가 있습니다. 플랫 페이지에 대한 특정 경로를 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="919e08d83f9bb207a0c2ffc9fb3d215e54e570da" translate="yes" xml:space="preserve">
          <source>There are several ways to recover from this sort of error.</source>
          <target state="translated">이러한 종류의 오류를 복구하는 방법에는 여러 가지가 있습니다.</target>
        </trans-unit>
        <trans-unit id="5a8e4e68fdf7d30ee2ea2be7fb1d46bbe59cabd2" translate="yes" xml:space="preserve">
          <source>There are some additional caveats to be aware of:</source>
          <target state="translated">주의해야 할 몇 가지 추가 사항이 있습니다.</target>
        </trans-unit>
        <trans-unit id="374a4fcc956d29e47334404f1ce4c53441954cad" translate="yes" xml:space="preserve">
          <source>There are special considerations described in &lt;a href=&quot;https://sqlite.org/isolation.html&quot;&gt;Isolation In SQLite&lt;/a&gt; when modifying a table while iterating over it using &lt;a href=&quot;models/querysets#django.db.models.query.QuerySet.iterator&quot;&gt;&lt;code&gt;QuerySet.iterator()&lt;/code&gt;&lt;/a&gt;. If a row is added, changed, or deleted within the loop, then that row may or may not appear, or may appear twice, in subsequent results fetched from the iterator. Your code must handle this.</source>
          <target state="translated">&lt;a href=&quot;models/querysets#django.db.models.query.QuerySet.iterator&quot;&gt; &lt;code&gt;QuerySet.iterator()&lt;/code&gt; &lt;/a&gt; 사용하여 테이블을 반복하면서 테이블을 수정할 때 &lt;a href=&quot;https://sqlite.org/isolation.html&quot;&gt;SQLite&lt;/a&gt; 에서 격리에 설명 된 특수 고려 사항이 있습니다 . 루프 내에서 행이 추가, 변경 또는 삭제되면 반복자에서 가져온 후속 결과에서 해당 행이 표시되거나 표시되지 않거나 두 번 나타날 수 있습니다. 코드가이를 처리해야합니다.</target>
        </trans-unit>
        <trans-unit id="1dbe9bb8365d832ccc308e2c7d571b7eed695798" translate="yes" xml:space="preserve">
          <source>There are subclasses to make creating messages with common levels easier. When using them you can omit the &lt;code&gt;level&lt;/code&gt; argument because it is implied by the class name.</source>
          <target state="translated">공통 레벨의 메시지를보다 쉽게 ​​작성할 수 있도록 서브 클래스가 있습니다. 그것들을 사용 하면 클래스 이름에 암시되어 있기 때문에 &lt;code&gt;level&lt;/code&gt; 인수를 생략 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="60f34bb3c48d35bba7edc3d9c1f3601021b1076b" translate="yes" xml:space="preserve">
          <source>There are three circumstances under which a &lt;code&gt;TemplateResponse&lt;/code&gt; will be rendered:</source>
          <target state="translated">&lt;code&gt;TemplateResponse&lt;/code&gt; 가 렌더링 되는 세 가지 환경 이 있습니다.</target>
        </trans-unit>
        <trans-unit id="7d8b284f3a8acce026acc7560c1b78c9badc6c46" translate="yes" xml:space="preserve">
          <source>There are three main situations where Django needs to interact with the database backend and fields:</source>
          <target state="translated">Django가 데이터베이스 백엔드 및 필드와 상호 작용해야하는 세 가지 주요 상황이 있습니다.</target>
        </trans-unit>
        <trans-unit id="a49e65b99bc0593e177ed5bddad001b68056aff0" translate="yes" xml:space="preserve">
          <source>There are three parts to setting up a &lt;a href=&quot;#django.contrib.contenttypes.fields.GenericForeignKey&quot;&gt;&lt;code&gt;GenericForeignKey&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.contenttypes.fields.GenericForeignKey&quot;&gt; &lt;code&gt;GenericForeignKey&lt;/code&gt; &lt;/a&gt; 설정에는 세 부분이 있습니다 .</target>
        </trans-unit>
        <trans-unit id="60e657cd72008e9e60db47de789dcec009e637d6" translate="yes" xml:space="preserve">
          <source>There are three steps involved in validating a model:</source>
          <target state="translated">모델 검증에는 3 가지 단계가 있습니다.</target>
        </trans-unit>
        <trans-unit id="e34f5a9960e13ab20b5e9b5798782887b379e349" translate="yes" xml:space="preserve">
          <source>There are three styles of inheritance that are possible in Django.</source>
          <target state="translated">장고에서 가능한 세 가지 상속 스타일이 있습니다.</target>
        </trans-unit>
        <trans-unit id="74e3fa28c76dc98655dad9a3ba9d091ce88206c5" translate="yes" xml:space="preserve">
          <source>There are three transforms available for use in queries. You can extract the lower or upper bound, or query based on emptiness.</source>
          <target state="translated">쿼리에 사용할 수있는 세 가지 변환이 있습니다. 공허에 따라 하한 또는 상한을 추출하거나 쿼리 할 수 ​​있습니다.</target>
        </trans-unit>
        <trans-unit id="4ca5918000b16d0393655e9890e11a345ad30bdd" translate="yes" xml:space="preserve">
          <source>There are three ways to render a formset in a Django template.</source>
          <target state="translated">Django 템플릿에서 폼셋을 렌더링하는 방법에는 세 가지가 있습니다.</target>
        </trans-unit>
        <trans-unit id="ec3e2fb67cbac287f1464d999496dbaffe570b89" translate="yes" xml:space="preserve">
          <source>There are times when a single column must be returned from a &lt;code&gt;Subquery&lt;/code&gt;, for instance, to use a &lt;code&gt;Subquery&lt;/code&gt; as the target of an &lt;code&gt;__in&lt;/code&gt; lookup. To return all comments for posts published within the last day:</source>
          <target state="translated">하나의 열이에서 반환해야 시간이있다 &lt;code&gt;Subquery&lt;/code&gt; 용도에, 예를 들어, &lt;code&gt;Subquery&lt;/code&gt; 의 대상으로 &lt;code&gt;__in&lt;/code&gt; 의 조회. 마지막 날에 게시 된 게시물에 대한 모든 의견을 반환하려면 다음 단계를 따르십시오.</target>
        </trans-unit>
        <trans-unit id="7c74bd5c5720621ba1bf68f4629091c4f84d9f63" translate="yes" xml:space="preserve">
          <source>There are times when you do not want Django to send emails at all. For example, while developing a website, you probably don&amp;rsquo;t want to send out thousands of emails &amp;ndash; but you may want to validate that emails will be sent to the right people under the right conditions, and that those emails will contain the correct content.</source>
          <target state="translated">Django가 이메일을 전혀 보내지 않으려는 경우가 있습니다. 예를 들어, 웹 사이트를 개발하는 동안 수천 개의 전자 메일을 보내지 않으려 할 수 있습니다. 그러나 올바른 조건 하에서 전자 메일이 올바른 사람에게 전송되고 해당 전자 메일에 올바른 내용이 포함되어 있는지 확인하고 싶을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c842a5a4c84746e59536e96b8c1e20999f9b6d84" translate="yes" xml:space="preserve">
          <source>There are times where you would like add a bit of CSS and/or JavaScript to the add/change views. This can be accomplished by using a &lt;code&gt;Media&lt;/code&gt; inner class on your &lt;code&gt;ModelAdmin&lt;/code&gt;:</source>
          <target state="translated">추가 / 변경보기에 약간의 CSS 및 / 또는 JavaScript를 추가하려는 경우가 있습니다. &lt;code&gt;ModelAdmin&lt;/code&gt; 에서 &lt;code&gt;Media&lt;/code&gt; 내부 클래스를 사용하면됩니다 .</target>
        </trans-unit>
        <trans-unit id="d13152d7ad0535e0d9b833f6a6f3dc2f68630529" translate="yes" xml:space="preserve">
          <source>There are two features worth noting in this example.</source>
          <target state="translated">이 예제에서는 주목할만한 두 가지 기능이 있습니다.</target>
        </trans-unit>
        <trans-unit id="e29fbf9b0eac3600d5ff5d48ee34823bcc51b162" translate="yes" xml:space="preserve">
          <source>There are two main steps involved in validating a &lt;code&gt;ModelForm&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;ModelForm&lt;/code&gt; 을 검증하는 데는 두 가지 주요 단계가 있습니다 .</target>
        </trans-unit>
        <trans-unit id="127003b06f28dbbea5c6bb95b9fcbb4a4ddbb7c1" translate="yes" xml:space="preserve">
          <source>There are two other logging calls available:</source>
          <target state="translated">사용 가능한 다른 두 가지 로깅 호출이 있습니다.</target>
        </trans-unit>
        <trans-unit id="dd91f5e0c7e80ba947990da88bea62cafe0f52b6" translate="yes" xml:space="preserve">
          <source>There are two reasons to use a column with &lt;a href=&quot;../../ref/models/fields#django.db.models.Field.unique&quot;&gt;&lt;code&gt;unique&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../../ref/models/fields#django.db.models.Field.db_index&quot;&gt;&lt;code&gt;db_index&lt;/code&gt;&lt;/a&gt; when using &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.get&quot;&gt;&lt;code&gt;get()&lt;/code&gt;&lt;/a&gt; to retrieve individual objects. First, the query will be quicker because of the underlying database index. Also, the query could run much slower if multiple objects match the lookup; having a unique constraint on the column guarantees this will never happen.</source>
          <target state="translated">&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.get&quot;&gt; &lt;code&gt;get()&lt;/code&gt; &lt;/a&gt; 을 사용하여 개별 객체를 검색 할 때 &lt;a href=&quot;../../ref/models/fields#django.db.models.Field.unique&quot;&gt; &lt;code&gt;unique&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;../../ref/models/fields#django.db.models.Field.db_index&quot;&gt; &lt;code&gt;db_index&lt;/code&gt; &lt;/a&gt; 가 있는 열을 사용해야하는 두 가지 이유가 있습니다 . 먼저 기본 데이터베이스 인덱스로 인해 쿼리가 더 빨라집니다. 또한 여러 개체가 조회와 일치하면 쿼리 속도가 훨씬 느려질 수 있습니다. 열에 고유 한 제약 조건이 있으면 이러한 일이 발생하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="6ee491b4d745bceb462b60ff16434351784a42fb" translate="yes" xml:space="preserve">
          <source>There are two reasons you might want to customize a &lt;code&gt;Manager&lt;/code&gt;: to add extra &lt;code&gt;Manager&lt;/code&gt; methods, and/or to modify the initial &lt;code&gt;QuerySet&lt;/code&gt; the &lt;code&gt;Manager&lt;/code&gt; returns.</source>
          <target state="translated">당신은 사용자 정의 할 수 두 가지 이유가 있습니다 &lt;code&gt;Manager&lt;/code&gt; 별도의 추가 : &lt;code&gt;Manager&lt;/code&gt; 방법, 및 / 또는 초기 수정 &lt;code&gt;QuerySet&lt;/code&gt; &lt;code&gt;Manager&lt;/code&gt; 반환.</target>
        </trans-unit>
        <trans-unit id="720a9aa7a33ca50cea57e0f036b334ee3370619e" translate="yes" xml:space="preserve">
          <source>There are two steps to making this work. Firstly we need to implement the lookup, then we need to tell Django about it:</source>
          <target state="translated">이 작업을 수행하는 데는 두 단계가 있습니다. 먼저 조회를 구현 한 다음 Django에 이에 대해 알려야합니다.</target>
        </trans-unit>
        <trans-unit id="7bbd044eff295a9be81cba0ec549c2bd8ede7a25" translate="yes" xml:space="preserve">
          <source>There are two types of conditions this header can tell a browser to watch out for:</source>
          <target state="translated">이 헤더는 브라우저에게주의해야 할 두 가지 유형의 조건이 있습니다.</target>
        </trans-unit>
        <trans-unit id="4494c92caa320237552a06540d133dd99233ea98" translate="yes" xml:space="preserve">
          <source>There are two ways to customize widgets: &lt;a href=&quot;#styling-widget-instances&quot;&gt;per widget instance&lt;/a&gt; and &lt;a href=&quot;#styling-widget-classes&quot;&gt;per widget class&lt;/a&gt;.</source>
          <target state="translated">위젯을 사용자 정의하는 방법에는 &lt;a href=&quot;#styling-widget-instances&quot;&gt;위젯 인스턴스&lt;/a&gt; 및 &lt;a href=&quot;#styling-widget-classes&quot;&gt;위젯 클래스 &lt;/a&gt;마다 두 가지가 있습니다 .</target>
        </trans-unit>
        <trans-unit id="15eba9bf5efe787dbfead36de258956e81386432" translate="yes" xml:space="preserve">
          <source>There are two ways to extend the default &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User&quot;&gt;&lt;code&gt;User&lt;/code&gt;&lt;/a&gt; model without substituting your own model. If the changes you need are purely behavioral, and don&amp;rsquo;t require any change to what is stored in the database, you can create a &lt;a href=&quot;../db/models#proxy-models&quot;&gt;proxy model&lt;/a&gt; based on &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User&quot;&gt;&lt;code&gt;User&lt;/code&gt;&lt;/a&gt;. This allows for any of the features offered by proxy models including default ordering, custom managers, or custom model methods.</source>
          <target state="translated">자신의 모델을 대체하지 않고 기본 &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User&quot;&gt; &lt;code&gt;User&lt;/code&gt; &lt;/a&gt; 모델 을 확장하는 두 가지 방법이 있습니다 . 필요한 변경 사항이 순전히 작동하고 데이터베이스에 저장된 내용을 변경할 필요가없는 경우 &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User&quot;&gt; &lt;code&gt;User&lt;/code&gt; &lt;/a&gt; 기반 &lt;a href=&quot;../db/models#proxy-models&quot;&gt;프록시 모델을&lt;/a&gt; 만들 수 있습니다 . 이를 통해 기본 순서, 사용자 정의 관리자 또는 사용자 정의 모델 방법을 포함하여 프록시 모델이 제공하는 모든 기능을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e5e41d79a89e7118e2f2a6f5e690c8cf9e41ed2c" translate="yes" xml:space="preserve">
          <source>There are two ways to report any errors from this step. Probably the most common method is to display the error at the top of the form. To create such an error, you can raise a &lt;code&gt;ValidationError&lt;/code&gt; from the &lt;code&gt;clean()&lt;/code&gt; method. For example:</source>
          <target state="translated">이 단계에서 오류를보고하는 방법에는 두 가지가 있습니다. 아마도 가장 일반적인 방법은 오류를 양식 맨 위에 표시하는 것입니다. 이러한 오류를 생성하기 위해 &lt;code&gt;clean()&lt;/code&gt; 메소드 에서 &lt;code&gt;ValidationError&lt;/code&gt; 를 발생시킬 수 있습니다 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="f3682bb46c7cdad94bdcb1d55e5d3aa9635668ee" translate="yes" xml:space="preserve">
          <source>There are two ways to send signals in Django.</source>
          <target state="translated">장고에서 신호를 보내는 방법은 두 가지가 있습니다.</target>
        </trans-unit>
        <trans-unit id="00d26b3386430b6fab2095c28aedd73d56054ce2" translate="yes" xml:space="preserve">
          <source>There are two ways to solve this problem. The first is to register &lt;code&gt;Choice&lt;/code&gt; with the admin just as we did with &lt;code&gt;Question&lt;/code&gt;:</source>
          <target state="translated">이 문제를 해결하는 데는 두 가지 방법이 있습니다. 첫 번째는 &lt;code&gt;Question&lt;/code&gt; 에서 와 마찬가지로 &lt;code&gt;Choice&lt;/code&gt; 를 관리자 에게 등록 하는 것입니다 .</target>
        </trans-unit>
        <trans-unit id="23a64397722408ba9883baae5658e6aa3502728b" translate="yes" xml:space="preserve">
          <source>There are two ways you can connect a receiver to a signal. You can take the manual connect route:</source>
          <target state="translated">수신기를 신호에 연결할 수있는 두 가지 방법이 있습니다. 수동 연결 경로를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="98319cb6e332dba875d578d9cd1cdf771a6ece29" translate="yes" xml:space="preserve">
          <source>There are two ways you tell an email backend to reuse a connection.</source>
          <target state="translated">이메일 백엔드에 연결을 재사용하도록 알리는 방법에는 두 가지가 있습니다.</target>
        </trans-unit>
        <trans-unit id="132d18eec8b0d66e698a36fa2909fb23c44ed2b9" translate="yes" xml:space="preserve">
          <source>There are, however, two shortcuts available for cases where you can guarantee these security concerns do not apply to you:</source>
          <target state="translated">그러나 이러한 보안 문제가 적용되지 않도록 보장 할 수있는 두 가지 바로 가기가 있습니다.</target>
        </trans-unit>
        <trans-unit id="b6de9173a10eaaf2cbefb5280cd109fc52ac2d70" translate="yes" xml:space="preserve">
          <source>There can be side effects when calling some variables, and it&amp;rsquo;d be either foolish or a security hole to allow the template system to access them.</source>
          <target state="translated">일부 변수를 호출 할 때 부작용이있을 수 있으며, 템플릿 시스템이 변수에 액세스 할 수있게하는 어리 석거나 보안상의 문제 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="40742fb672a16b4ddd7654662929485b7673a22d" translate="yes" xml:space="preserve">
          <source>There is a similarly named method called &lt;code&gt;get_transform()&lt;/code&gt;. &lt;code&gt;get_lookup()&lt;/code&gt; should always return a &lt;code&gt;Lookup&lt;/code&gt; subclass, and &lt;code&gt;get_transform()&lt;/code&gt; a &lt;code&gt;Transform&lt;/code&gt; subclass. It is important to remember that &lt;code&gt;Transform&lt;/code&gt; objects can be further filtered on, and &lt;code&gt;Lookup&lt;/code&gt; objects cannot.</source>
          <target state="translated">&lt;code&gt;get_transform()&lt;/code&gt; 이라는 비슷한 이름의 메소드가 있습니다 . &lt;code&gt;get_lookup()&lt;/code&gt; 은 항상 &lt;code&gt;Lookup&lt;/code&gt; 서브 클래스를 리턴 하고 &lt;code&gt;get_transform()&lt;/code&gt; 은 &lt;code&gt;Transform&lt;/code&gt; 서브 클래스를 리턴해야합니다 . &lt;code&gt;Transform&lt;/code&gt; 객체는 추가로 필터링 할 수 있고 &lt;code&gt;Lookup&lt;/code&gt; 객체는 필터링 할 수 없음 을 기억해야 합니다 .</target>
        </trans-unit>
        <trans-unit id="076ab0e60179747b01f6522a60cb0b32cfbad579" translate="yes" xml:space="preserve">
          <source>There is also a decorator for registering your &lt;code&gt;ModelAdmin&lt;/code&gt; classes:</source>
          <target state="translated">&lt;code&gt;ModelAdmin&lt;/code&gt; 클래스 를 등록하기위한 데코레이터도 있습니다 :</target>
        </trans-unit>
        <trans-unit id="fe73062299242ce8953e23bc8f15f8eb8e74ad5b" translate="yes" xml:space="preserve">
          <source>There is also a way to pass additional information to title and description templates, if you need to supply more than the two variables mentioned before. You can provide your implementation of &lt;code&gt;get_context_data&lt;/code&gt; method in your &lt;code&gt;Feed&lt;/code&gt; subclass. For example:</source>
          <target state="translated">앞에서 언급 한 두 가지 이상의 변수를 제공해야하는 경우 제목 및 설명 템플릿에 추가 정보를 전달하는 방법도 있습니다. &lt;code&gt;Feed&lt;/code&gt; 서브 클래스 에 &lt;code&gt;get_context_data&lt;/code&gt; 메소드 구현을 제공 할 수 있습니다 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="3d15ec31136066f7786ec1d2ac23ce5bd6b7cdf8" translate="yes" xml:space="preserve">
          <source>There is also an independent but related &lt;a href=&quot;../../ref/settings#std:setting-USE_I18N&quot;&gt;&lt;code&gt;USE_I18N&lt;/code&gt;&lt;/a&gt; setting that controls if Django should activate translation. See &lt;a href=&quot;translation&quot;&gt;Translation&lt;/a&gt; for more details.</source>
          <target state="translated">Django가 번역을 활성화해야하는지 여부를 제어 하는 독립적이지만 관련 &lt;a href=&quot;../../ref/settings#std:setting-USE_I18N&quot;&gt; &lt;code&gt;USE_I18N&lt;/code&gt; &lt;/a&gt; 설정도 있습니다. 자세한 내용은 &lt;a href=&quot;translation&quot;&gt;번역&lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="e75d5351b7f9cd7638cd926fddf6bf2712770595" translate="yes" xml:space="preserve">
          <source>There is also an independent but related &lt;a href=&quot;../../ref/settings#std:setting-USE_L10N&quot;&gt;&lt;code&gt;USE_L10N&lt;/code&gt;&lt;/a&gt; setting that controls if Django should implement format localization. See &lt;a href=&quot;formatting&quot;&gt;Format localization&lt;/a&gt; for more details.</source>
          <target state="translated">Django가 형식 현지화를 구현해야하는지 여부를 제어 하는 독립적이지만 관련 &lt;a href=&quot;../../ref/settings#std:setting-USE_L10N&quot;&gt; &lt;code&gt;USE_L10N&lt;/code&gt; &lt;/a&gt; 설정도 있습니다. 자세한 내용은 &lt;a href=&quot;formatting&quot;&gt;현지화 형식&lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="336f1a0636712f1f7df8743e5074215668a776f5" translate="yes" xml:space="preserve">
          <source>There is also an independent but related &lt;a href=&quot;../../ref/settings#std:setting-USE_L10N&quot;&gt;&lt;code&gt;USE_L10N&lt;/code&gt;&lt;/a&gt; setting that controls whether Django should activate format localization. See &lt;a href=&quot;formatting&quot;&gt;Format localization&lt;/a&gt; for more details.</source>
          <target state="translated">Django가 형식 현지화를 활성화해야하는지 여부를 제어 하는 독립적이지만 관련 &lt;a href=&quot;../../ref/settings#std:setting-USE_L10N&quot;&gt; &lt;code&gt;USE_L10N&lt;/code&gt; &lt;/a&gt; 설정도 있습니다. 자세한 내용은 &lt;a href=&quot;formatting&quot;&gt;현지화 형식&lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="4889f2745d57846bc47e3b301034b23c55567a82" translate="yes" xml:space="preserve">
          <source>There is also the matter of convenience. An integer id isn&amp;rsquo;t always the most convenient way to refer to an object; sometimes, a more natural reference would be helpful.</source>
          <target state="translated">편의성도 있습니다. 정수 ID가 항상 객체를 참조하는 가장 편리한 방법은 아닙니다. 때로는 더 자연스러운 참조가 도움이 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3fec4eeb0cb4f31609ba2b0ca27378fa71d0a5c3" translate="yes" xml:space="preserve">
          <source>There is limited support for other parts of the async ecosystem; namely, Django can natively talk &lt;a href=&quot;../howto/deployment/asgi/index&quot;&gt;ASGI&lt;/a&gt;, and some async safety support.</source>
          <target state="translated">비동기 생태계의 다른 부분에 대한 지원은 제한적입니다. 즉, Django는 기본적으로 &lt;a href=&quot;../howto/deployment/asgi/index&quot;&gt;ASGI&lt;/a&gt; 및 일부 비동기 안전 지원을 말할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ad3ed6aecf8322b5839dedda17f6f29eabf48e80" translate="yes" xml:space="preserve">
          <source>There is no &lt;a href=&quot;#django.contrib.sitemaps.Sitemap.location&quot;&gt;&lt;code&gt;location&lt;/code&gt;&lt;/a&gt; method in this example, but you can provide it in order to specify the URL for your object. By default, &lt;a href=&quot;#django.contrib.sitemaps.Sitemap.location&quot;&gt;&lt;code&gt;location()&lt;/code&gt;&lt;/a&gt; calls &lt;code&gt;get_absolute_url()&lt;/code&gt; on each object and returns the result.</source>
          <target state="translated">이 예제 에는 &lt;a href=&quot;#django.contrib.sitemaps.Sitemap.location&quot;&gt; &lt;code&gt;location&lt;/code&gt; &lt;/a&gt; 방법이 없지만 객체의 URL을 지정하기 위해 제공 할 수 있습니다. 기본적으로 &lt;a href=&quot;#django.contrib.sitemaps.Sitemap.location&quot;&gt; &lt;code&gt;location()&lt;/code&gt; &lt;/a&gt; 은 각 객체에서 &lt;code&gt;get_absolute_url()&lt;/code&gt; 을 호출 하고 결과를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="ccdcb2bd2ea7a38642c8f628d41694d630e1630a" translate="yes" xml:space="preserve">
          <source>There is no one-size-fits-all solution for which field type is best. You should evaluate the models you expect to be pointing to and determine which solution will be most effective for your use case.</source>
          <target state="translated">필드 유형이 가장 적합한 단일 크기 솔루션은 없습니다. 가리키는 모델을 평가하고 사용 사례에 가장 효과적인 솔루션을 결정해야합니다.</target>
        </trans-unit>
        <trans-unit id="11ef18d152799a740388d62ee9b944c775a0bcd9" translate="yes" xml:space="preserve">
          <source>There is no way to have Django return, say, a &lt;code&gt;MyPerson&lt;/code&gt; object whenever you query for &lt;code&gt;Person&lt;/code&gt; objects. A queryset for &lt;code&gt;Person&lt;/code&gt; objects will return those types of objects. The whole point of proxy objects is that code relying on the original &lt;code&gt;Person&lt;/code&gt; will use those and your own code can use the extensions you included (that no other code is relying on anyway). It is not a way to replace the &lt;code&gt;Person&lt;/code&gt; (or any other) model everywhere with something of your own creation.</source>
          <target state="translated">&lt;code&gt;Person&lt;/code&gt; 객체 를 쿼리 할 때마다 Django가 &lt;code&gt;MyPerson&lt;/code&gt; 객체를 반환하는 방법은 없습니다 . &lt;code&gt;Person&lt;/code&gt; 객체에 대한 쿼리 세트는 해당 유형의 객체를 반환합니다. 프록시 객체의 요점은 원래 &lt;code&gt;Person&lt;/code&gt; 에 의존하는 코드 가이를 사용하고 자신의 코드가 포함 된 확장명을 사용할 수 있다는 것입니다 (다른 코드는 의존하지 않습니다). 어디에서나 &lt;code&gt;Person&lt;/code&gt; (또는 다른) 모델을 자신이 만든 것으로 바꿀 수있는 방법이 아닙니다 .</target>
        </trans-unit>
        <trans-unit id="552f8501da1d1cf280a92b17be2fe2368642e6ad" translate="yes" xml:space="preserve">
          <source>There is one exception the above rule: When passed a &lt;code&gt;datetime&lt;/code&gt; value with attached timezone information (a &lt;a href=&quot;../../topics/i18n/timezones#naive-vs-aware-datetimes&quot;&gt;time-zone-aware&lt;/a&gt;&lt;code&gt;datetime&lt;/code&gt; instance) the &lt;code&gt;time&lt;/code&gt; filter will accept the timezone-related &lt;a href=&quot;#date-and-time-formatting-specifiers&quot;&gt;format specifiers&lt;/a&gt;&lt;code&gt;'e'&lt;/code&gt;, &lt;code&gt;'O'&lt;/code&gt; , &lt;code&gt;'T'&lt;/code&gt; and &lt;code&gt;'Z'&lt;/code&gt;.</source>
          <target state="translated">한 가지 예외가 상기 규칙이있다 : 전달 된 경우 &lt;code&gt;datetime&lt;/code&gt; 부착 시간대 정보 (a와 값 &lt;a href=&quot;../../topics/i18n/timezones#naive-vs-aware-datetimes&quot;&gt;시간대 인식 &lt;/a&gt; &lt;code&gt;datetime&lt;/code&gt; 인스턴스)이 &lt;code&gt;time&lt;/code&gt; 필터 시간대 관련 받아들이 &lt;a href=&quot;#date-and-time-formatting-specifiers&quot;&gt;포맷 지시자 &lt;/a&gt; &lt;code&gt;'e'&lt;/code&gt; , &lt;code&gt;'O'&lt;/code&gt; , &lt;code&gt;'T'&lt;/code&gt; 및 &lt;code&gt;'Z'&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="01b7655035baec0a88d69155944fc4d04fb28f67" translate="yes" xml:space="preserve">
          <source>There is only one field that you can&amp;rsquo;t leave out - the primary key field. Django uses the primary key to identify model instances, so it must always be included in a raw query. An &lt;code&gt;InvalidQuery&lt;/code&gt; exception will be raised if you forget to include the primary key.</source>
          <target state="translated">제외 할 수없는 필드는 기본 키 필드입니다. Django는 기본 키를 사용하여 모델 인스턴스를 식별하므로 항상 원시 쿼리에 포함되어야합니다. &lt;code&gt;InvalidQuery&lt;/code&gt; 의 당신은 기본 키를 포함하는 것을 잊지 경우 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="86d39b53e4827027f045ccd4097d962247d17005" translate="yes" xml:space="preserve">
          <source>There isn&amp;rsquo;t a specialized subclass for every possible HTTP response code, since many of them aren&amp;rsquo;t going to be that common. However, as documented in the &lt;a href=&quot;../../ref/request-response#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt; documentation, you can also pass the HTTP status code into the constructor for &lt;a href=&quot;../../ref/request-response#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt; to create a return class for any status code you like. For example:</source>
          <target state="translated">가능한 모든 HTTP 응답 코드에 대해 특수한 서브 클래스가 없습니다. 왜냐하면 대부분은 그렇게 공통적이지 않기 때문입니다. 그러나 &lt;a href=&quot;../../ref/request-response#django.http.HttpResponse&quot;&gt; &lt;code&gt;HttpResponse&lt;/code&gt; &lt;/a&gt; 설명서에 설명 된대로 HTTP 상태 코드를 &lt;a href=&quot;../../ref/request-response#django.http.HttpResponse&quot;&gt; &lt;code&gt;HttpResponse&lt;/code&gt; &lt;/a&gt; 생성자에 전달하여 원하는 상태 코드에 대한 반환 클래스를 만들 수도 있습니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="a9a9644e3aa5ad2978823b446ce2e81d8b0491a1" translate="yes" xml:space="preserve">
          <source>There may be files other than your project&amp;rsquo;s static assets that, for convenience, you&amp;rsquo;d like to have Django serve for you in local development. The &lt;a href=&quot;#django.views.static.serve&quot;&gt;&lt;code&gt;serve()&lt;/code&gt;&lt;/a&gt; view can be used to serve any directory you give it. (This view is &lt;strong&gt;not&lt;/strong&gt; hardened for production use and should be used only as a development aid; you should serve these files in production using a real front-end web server).</source>
          <target state="translated">편의상 Django가 로컬 개발에 제공하도록하려는 프로젝트의 정적 자산 이외의 파일이있을 수 있습니다. &lt;a href=&quot;#django.views.static.serve&quot;&gt; &lt;code&gt;serve()&lt;/code&gt; &lt;/a&gt; 보기는 당신이 그것을 줄 디렉토리 서비스를 제공 할 수 있습니다. (이보기는 프로덕션 용도로 강화 &lt;strong&gt;되지 않았&lt;/strong&gt; 으며 개발 보조 수단으로 만 사용해야합니다. 실제 프런트 엔드 웹 서버를 사용하여 프로덕션 환경에서 이러한 파일을 제공해야합니다).</target>
        </trans-unit>
        <trans-unit id="c6f0cfcc2d7cafb44b66564c6b727249cfcccd2f" translate="yes" xml:space="preserve">
          <source>There may be some situations where you wish to call &lt;code&gt;select_related()&lt;/code&gt; with a lot of related objects, or where you don&amp;rsquo;t know all of the relations. In these cases it is possible to call &lt;code&gt;select_related()&lt;/code&gt; with no arguments. This will follow all non-null foreign keys it can find - nullable foreign keys must be specified. This is not recommended in most cases as it is likely to make the underlying query more complex, and return more data, than is actually needed.</source>
          <target state="translated">많은 관련 객체와 함께 &lt;code&gt;select_related()&lt;/code&gt; 를 호출 하거나 모든 관계를 모르는 상황이있을 수 있습니다 . 이 경우 인수없이 &lt;code&gt;select_related()&lt;/code&gt; 를 호출 할 수 있습니다 . 널이 아닌 외래 키를 찾을 수 있습니다. 널 입력 가능 외래 키를 지정해야합니다. 기본 쿼리를 더 복잡하게 만들고 실제로 필요한 것보다 더 많은 데이터를 반환 할 가능성이 있으므로 대부분의 경우 권장되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="a0a66ed86bf6678e5b05d1eac2131c3bbc960c08" translate="yes" xml:space="preserve">
          <source>There may be some views that are unprotected and have been exempted by &lt;code&gt;csrf_exempt&lt;/code&gt;, but still need to include the CSRF token.</source>
          <target state="translated">보호되지 않고 &lt;code&gt;csrf_exempt&lt;/code&gt; 에 의해 면제 된 일부 뷰가있을 수 있지만 여전히 CSRF 토큰을 포함해야합니다.</target>
        </trans-unit>
        <trans-unit id="c8eaf4a5f4167f0c30126f8bb76418123b4bd64b" translate="yes" xml:space="preserve">
          <source>There may be times you have the need to hook into another authentication source &amp;ndash; that is, another source of usernames and passwords or authentication methods.</source>
          <target state="translated">다른 인증 소스, 즉 다른 사용자 이름 및 비밀번호 소스 또는 인증 방법에 연결해야 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="ab64bd5c330c251da1c7d0ae9773ffb209ceacd4" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s a command that will run the migrations for you and manage your database schema automatically - that&amp;rsquo;s called &lt;a href=&quot;../ref/django-admin#django-admin-migrate&quot;&gt;&lt;code&gt;migrate&lt;/code&gt;&lt;/a&gt;, and we&amp;rsquo;ll come to it in a moment - but first, let&amp;rsquo;s see what SQL that migration would run. The &lt;a href=&quot;../ref/django-admin#django-admin-sqlmigrate&quot;&gt;&lt;code&gt;sqlmigrate&lt;/code&gt;&lt;/a&gt; command takes migration names and returns their SQL:</source>
          <target state="translated">마이그레이션을 실행하고 데이터베이스 스키마를 자동으로 관리하는 명령이 있습니다. 즉 , &lt;a href=&quot;../ref/django-admin#django-admin-migrate&quot;&gt; &lt;code&gt;migrate&lt;/code&gt; &lt;/a&gt; 라는 명령이 곧 나옵니다. 그러나 먼저 마이그레이션 할 SQL이 무엇인지 살펴 보겠습니다. &lt;a href=&quot;../ref/django-admin#django-admin-sqlmigrate&quot;&gt; &lt;code&gt;sqlmigrate&lt;/code&gt; &lt;/a&gt; 명령은 마이그레이션 이름을 소요하고 자신의 SQL을 반환합니다 :</target>
        </trans-unit>
        <trans-unit id="da5093b938dd7840c576a513aff6ee2290f74f11" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s a couple of extra options and possibilities you can exploit for more advanced options.</source>
          <target state="translated">고급 옵션을 위해 활용할 수있는 몇 가지 추가 옵션과 가능성이 있습니다.</target>
        </trans-unit>
        <trans-unit id="529593afe16858928a0a29064611b9a44ca1fa6e" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s a difference in what &lt;code&gt;CURRENT ROW&lt;/code&gt; includes. When specified in &lt;code&gt;ROWS&lt;/code&gt; mode, the frame starts or ends with the current row. When specified in &lt;code&gt;RANGE&lt;/code&gt; mode, the frame starts or ends at the first or last peer according to the ordering clause. Thus, &lt;code&gt;RANGE CURRENT ROW&lt;/code&gt; evaluates the expression for rows which have the same value specified by the ordering. Because the template includes both the &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt; points, this may be expressed with:</source>
          <target state="translated">&lt;code&gt;CURRENT ROW&lt;/code&gt; 에 포함 된 내용에 차이가 있습니다. &lt;code&gt;ROWS&lt;/code&gt; 모드 에서 지정된 경우 프레임은 현재 행으로 시작하거나 끝납니다. &lt;code&gt;RANGE&lt;/code&gt; 모드 에서 지정된 경우 프레임은 ordering 절에 따라 첫 번째 또는 마지막 피어에서 시작하거나 끝납니다. 따라서 &lt;code&gt;RANGE CURRENT ROW&lt;/code&gt; 는 순서에 의해 지정된 동일한 값을 갖는 행에 대한 표현식을 평가합니다. 템플릿에는 &lt;code&gt;start&lt;/code&gt; 지점 과 &lt;code&gt;end&lt;/code&gt; 지점이 모두 포함되므로 다음과 같이 표현 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d75aa5ff00db8d3e848514e0b69a503b42e68c4b" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s a lot more work to be done for a complete custom feed class, but the above example should demonstrate the basic idea.</source>
          <target state="translated">완전한 맞춤 피드 클래스를 위해 더 많은 작업을 수행해야하지만 위의 예는 기본 아이디어를 보여 주어야합니다.</target>
        </trans-unit>
        <trans-unit id="874b31554853528095e34057c3f8e324e697cd1c" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s a problem here, though: the page&amp;rsquo;s design is hard-coded in the view. If you want to change the way the page looks, you&amp;rsquo;ll have to edit this Python code. So let&amp;rsquo;s use Django&amp;rsquo;s template system to separate the design from Python by creating a template that the view can use.</source>
          <target state="translated">그러나 여기에는 문제가 있습니다. 페이지 디자인이 뷰에 하드 코딩되어 있습니다. 페이지 모양을 변경하려면이 Python 코드를 편집해야합니다. Django의 템플릿 시스템을 사용하여 뷰에서 사용할 수있는 템플릿을 만들어서 파이썬과 디자인을 분리 해 봅시다.</target>
        </trans-unit>
        <trans-unit id="185044dc976a34bb0fef463a3e68c0dc9c899a83" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s also a &lt;a href=&quot;../topics/http/shortcuts#django.shortcuts.get_list_or_404&quot;&gt;&lt;code&gt;get_list_or_404()&lt;/code&gt;&lt;/a&gt; function, which works just as &lt;a href=&quot;../topics/http/shortcuts#django.shortcuts.get_object_or_404&quot;&gt;&lt;code&gt;get_object_or_404()&lt;/code&gt;&lt;/a&gt; &amp;ndash; except using &lt;a href=&quot;../ref/models/querysets#django.db.models.query.QuerySet.filter&quot;&gt;&lt;code&gt;filter()&lt;/code&gt;&lt;/a&gt; instead of &lt;a href=&quot;../ref/models/querysets#django.db.models.query.QuerySet.get&quot;&gt;&lt;code&gt;get()&lt;/code&gt;&lt;/a&gt;. It raises &lt;a href=&quot;../topics/http/views#django.http.Http404&quot;&gt;&lt;code&gt;Http404&lt;/code&gt;&lt;/a&gt; if the list is empty.</source>
          <target state="translated">&lt;a href=&quot;../topics/http/shortcuts#django.shortcuts.get_list_or_404&quot;&gt; &lt;code&gt;get_list_or_404()&lt;/code&gt; &lt;/a&gt; 함수 도 있는데 , &lt;a href=&quot;../ref/models/querysets#django.db.models.query.QuerySet.get&quot;&gt; &lt;code&gt;get()&lt;/code&gt; &lt;/a&gt; 대신 &lt;a href=&quot;../ref/models/querysets#django.db.models.query.QuerySet.filter&quot;&gt; &lt;code&gt;filter()&lt;/code&gt; &lt;/a&gt; 를 사용하는 것을 제외하고 &lt;a href=&quot;../topics/http/shortcuts#django.shortcuts.get_object_or_404&quot;&gt; &lt;code&gt;get_object_or_404()&lt;/code&gt; &lt;/a&gt; 동일하게 작동합니다 . 그것은 제기 &lt;a href=&quot;../topics/http/views#django.http.Http404&quot;&gt; &lt;code&gt;Http404&lt;/code&gt; 를&lt;/a&gt; 목록이 비어있는 경우.</target>
        </trans-unit>
        <trans-unit id="b1302bb69dd2bb26c7d9688e769480f789d6cfa7" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s also a &lt;code&gt;get_many()&lt;/code&gt; interface that only hits the cache once. &lt;code&gt;get_many()&lt;/code&gt; returns a dictionary with all the keys you asked for that actually exist in the cache (and haven&amp;rsquo;t expired):</source>
          <target state="translated">캐시에 한 번만 &lt;code&gt;get_many()&lt;/code&gt; 하는 get_many () 인터페이스 도 있습니다 . &lt;code&gt;get_many()&lt;/code&gt; 는 요청한 모든 키가 캐시에 실제로 존재하고 만료되지 않은 사전을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="cbfe42872ee508b7ab117bf15f51c03ece11d5d1" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s also a bunch of other optional keywords:</source>
          <target state="translated">다른 선택적 키워드도 있습니다.</target>
        </trans-unit>
        <trans-unit id="00a87bcfcbedb03d65bdfed396847c86cebcd64e" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s also a case-insensitive version, &lt;a href=&quot;../../ref/models/querysets#std:fieldlookup-icontains&quot;&gt;&lt;code&gt;icontains&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">대소 문자를 구분하지 않는 버전 인 &lt;a href=&quot;../../ref/models/querysets#std:fieldlookup-icontains&quot;&gt; &lt;code&gt;icontains&lt;/code&gt; 도&lt;/a&gt; 있습니다.</target>
        </trans-unit>
        <trans-unit id="8fba78129eb9d5f573fb9b9c5352d583ff508856" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s also a second form you can use to avoid extra processing if you need the value multiple times:</source>
          <target state="translated">값이 여러 번 필요한 경우 추가 처리를 피하기 위해 사용할 수있는 두 번째 양식도 있습니다.</target>
        </trans-unit>
        <trans-unit id="07b7631a6661d85faa5e0f60692cffb92e7701d5" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s also a set of common arguments available to all field types. All are optional. They&amp;rsquo;re fully explained in the &lt;a href=&quot;../../ref/models/fields#common-model-field-options&quot;&gt;reference&lt;/a&gt;, but here&amp;rsquo;s a quick summary of the most often-used ones:</source>
          <target state="translated">모든 필드 유형에 사용할 수있는 공통 인수 세트도 있습니다. 모두 선택 사항입니다. 그것들은 &lt;a href=&quot;../../ref/models/fields#common-model-field-options&quot;&gt;참조에&lt;/a&gt; 자세히 설명되어 있지만 가장 자주 사용되는 것들에 대한 요약은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="29d25aa9b5da6bd7a7ab00c1e241dfd8e13497bb" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s another set of &lt;a href=&quot;../../ref/models/instances#model-instance-methods&quot;&gt;model methods&lt;/a&gt; that encapsulate a bunch of database behavior that you&amp;rsquo;ll want to customize. In particular you&amp;rsquo;ll often want to change the way &lt;a href=&quot;../../ref/models/instances#django.db.models.Model.save&quot;&gt;&lt;code&gt;save()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../ref/models/instances#django.db.models.Model.delete&quot;&gt;&lt;code&gt;delete()&lt;/code&gt;&lt;/a&gt; work.</source>
          <target state="translated">사용자 지정하려는 데이터베이스 동작을 캡슐화하는 또 다른 &lt;a href=&quot;../../ref/models/instances#model-instance-methods&quot;&gt;모델 메소드&lt;/a&gt; 세트 가 있습니다. 특히 &lt;a href=&quot;../../ref/models/instances#django.db.models.Model.save&quot;&gt; &lt;code&gt;save()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../../ref/models/instances#django.db.models.Model.delete&quot;&gt; &lt;code&gt;delete()&lt;/code&gt; &lt;/a&gt; 작동 방식을 변경하려는 경우가 종종 있습니다.</target>
        </trans-unit>
        <trans-unit id="54f4324ddad3b858070a41b1bbc68573b7933c28" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s any number of ways you might do this, but if the provider has an API, you can use a &lt;a href=&quot;../custom-file-storage&quot;&gt;custom file storage backend&lt;/a&gt; to integrate the CDN with your Django project. If you&amp;rsquo;ve written or are using a 3rd party custom storage backend, you can tell &lt;a href=&quot;../../ref/contrib/staticfiles#django-admin-collectstatic&quot;&gt;&lt;code&gt;collectstatic&lt;/code&gt;&lt;/a&gt; to use it by setting &lt;a href=&quot;../../ref/settings#std:setting-STATICFILES_STORAGE&quot;&gt;&lt;code&gt;STATICFILES_STORAGE&lt;/code&gt;&lt;/a&gt; to the storage engine.</source>
          <target state="translated">여러 가지 방법이 있지만 공급자에 API가있는 경우 &lt;a href=&quot;../custom-file-storage&quot;&gt;사용자 지정 파일 저장소 백엔드&lt;/a&gt; 를 사용하여 CDN을 Django 프로젝트와 통합 할 수 있습니다 . 당신이 작성한 또는 타사의 사용자 정의 스토리지 백엔드를 사용하는 경우, 당신은 말할 수 &lt;a href=&quot;../../ref/contrib/staticfiles#django-admin-collectstatic&quot;&gt; &lt;code&gt;collectstatic&lt;/code&gt; &lt;/a&gt; 설정하여 사용하기 &lt;a href=&quot;../../ref/settings#std:setting-STATICFILES_STORAGE&quot;&gt; &lt;code&gt;STATICFILES_STORAGE&lt;/code&gt; 을&lt;/a&gt; 저장 엔진.</target>
        </trans-unit>
        <trans-unit id="e2ca95383c15b3b4d5f05fadedabe1b500318b82" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s no limit on how many modules you put in the &lt;code&gt;templatetags&lt;/code&gt; package. Just keep in mind that a &lt;a href=&quot;../ref/templates/builtins#std:templatetag-load&quot;&gt;&lt;code&gt;{% load %}&lt;/code&gt;&lt;/a&gt; statement will load tags/filters for the given Python module name, not the name of the app.</source>
          <target state="translated">&lt;code&gt;templatetags&lt;/code&gt; 패키지에 넣는 모듈 수에는 제한이 없습니다 . 그냥 마음에 계속 &lt;a href=&quot;../ref/templates/builtins#std:templatetag-load&quot;&gt; &lt;code&gt;{% load %}&lt;/code&gt; &lt;/a&gt; 문은 주어진 파이썬 모듈 이름에 대한 태그 / 필터, 응용 프로그램의 이름이 아닌로드합니다.</target>
        </trans-unit>
        <trans-unit id="01ff2911eb87bdf1545419b53d49db42773d814d" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s no need to add URL cruft such as &lt;code&gt;.html&lt;/code&gt; &amp;ndash; unless you want to, in which case you can do something like this:</source>
          <target state="translated">&lt;code&gt;.html&lt;/code&gt; 과 같은 URL 크래프트를 추가 할 필요가 없습니다. 원하는 경우가 아니면 다음과 같이 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="aaf6a18d05b5c017aab81e184dba0e80584fea79" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s no need to add a leading slash, because every URL has that. For example, it&amp;rsquo;s &lt;code&gt;articles&lt;/code&gt;, not &lt;code&gt;/articles&lt;/code&gt;.</source>
          <target state="translated">모든 URL에 슬래시를 추가 할 필요가 없습니다. 예를 들어, 그건 &lt;code&gt;articles&lt;/code&gt; 가 아니라 &lt;code&gt;/articles&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8941cd8857db5972d67440a358a4fe2697127a49" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s no need to worry about the &lt;code&gt;is_safe&lt;/code&gt; flag in this case (although including it wouldn&amp;rsquo;t hurt anything). Whenever you manually handle the auto-escaping issues and return a safe string, the &lt;code&gt;is_safe&lt;/code&gt; flag won&amp;rsquo;t change anything either way.</source>
          <target state="translated">이 경우 &lt;code&gt;is_safe&lt;/code&gt; 플래그에 대해 걱정할 필요가 없습니다 (물론 아무것도 아프지 않더라도). 자동 이스케이프 문제를 수동으로 처리하고 안전한 문자열을 반환 할 때마다 &lt;code&gt;is_safe&lt;/code&gt; 플래그는 어떤 방식으로도 변경되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="2d4bd22abba1df8b0d5aeeace6891916c3f2c6dc" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s no question that using generic views can speed up development substantially. In most projects, however, there comes a moment when the generic views no longer suffice. Indeed, the most common question asked by new Django developers is how to make generic views handle a wider array of situations.</source>
          <target state="translated">일반 뷰를 사용하면 개발 속도를 크게 높일 수 있다는 데는 의문의 여지가 없습니다. 그러나 대부분의 프로젝트에서 일반 뷰가 더 이상 충분하지 않은 순간이 있습니다. 실제로 새로운 Django 개발자가 가장 많이 묻는 질문은 일반적인 뷰를 다양한 상황에서 처리하는 방법입니다.</target>
        </trans-unit>
        <trans-unit id="6f61080946f1ac7b7149cc37bf09f16b3d511f6b" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s no restriction that a project package can&amp;rsquo;t also be considered an application and have models, etc. (which would require adding it to &lt;a href=&quot;settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">프로젝트 패키지를 응용 프로그램으로 간주 할 수 없으며 모델 등을 가질 수 있다는 제한은 없습니다 (이를 &lt;a href=&quot;settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; 에&lt;/a&gt; 추가해야 함 ).</target>
        </trans-unit>
        <trans-unit id="c933ded98bbf9830d3dfd06df31fa826e1ccdc74" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s no standard for describing raster data in a dictionary or JSON flavor. The definition of the dictionary input to the &lt;a href=&quot;#django.contrib.gis.gdal.GDALRaster&quot;&gt;&lt;code&gt;GDALRaster&lt;/code&gt;&lt;/a&gt; class is therefore specific to Django. It&amp;rsquo;s inspired by the &lt;a href=&quot;https://geojson.org&quot;&gt;geojson&lt;/a&gt; format, but the &lt;code&gt;geojson&lt;/code&gt; standard is currently limited to vector formats.</source>
          <target state="translated">사전 또는 JSON 플레이버에서 래스터 데이터를 설명하기위한 표준은 없습니다. 따라서 &lt;a href=&quot;#django.contrib.gis.gdal.GDALRaster&quot;&gt; &lt;code&gt;GDALRaster&lt;/code&gt; &lt;/a&gt; 클래스 에 대한 사전 입력의 정의는 Django에만 해당됩니다. &lt;a href=&quot;https://geojson.org&quot;&gt;geojson&lt;/a&gt; 형식 에서 영감을 얻었 지만 &lt;code&gt;geojson&lt;/code&gt; 표준은 현재 벡터 형식으로 제한됩니다.</target>
        </trans-unit>
        <trans-unit id="3cae82c054bd8f811e23d21dc3c000f18bcb71b2" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s no way to specify whether ordering should be case sensitive. With respect to case-sensitivity, Django will order results however your database backend normally orders them.</source>
          <target state="translated">순서가 대소 문자를 구분해야하는지 여부를 지정할 수있는 방법이 없습니다. 대소 문자 구분과 관련하여 Django는 결과를 주문하지만 데이터베이스 백엔드는 일반적으로 결과를 주문합니다.</target>
        </trans-unit>
        <trans-unit id="c9afd208007a403419ac3ab7b998cae93f88666b" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s no way to tell what the value of an ID will be before you call &lt;code&gt;save()&lt;/code&gt;, because that value is calculated by your database, not by Django.</source>
          <target state="translated">&lt;code&gt;save()&lt;/code&gt; 를 호출하기 전에 ID 값이 무엇인지 알 수있는 방법은 없습니다. 그 값은 Django가 아니라 데이터베이스에 의해 계산되기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="eaeeeb9f77945ce0a808e834c18d17251cf98dba" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s nothing Django-specific about the &lt;code&gt;Content-Disposition&lt;/code&gt; header, but it&amp;rsquo;s easy to forget the syntax, so we&amp;rsquo;ve included it here.</source>
          <target state="translated">&lt;code&gt;Content-Disposition&lt;/code&gt; 헤더 에 대해 장고 고유의 것은 없지만 구문을 잊어 버리기 쉽기 때문에 여기에 포함 시켰습니다.</target>
        </trans-unit>
        <trans-unit id="a690ec58762f108c0e2dfaaa68036b54ef91860f" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s nothing stopping you from creating your own settings, for your own Django apps, but follow these guidelines:</source>
          <target state="translated">자신의 Django 앱에 대한 자신의 설정을 만드는 것을 막을 수는 없지만 다음 지침을 따르십시오.</target>
        </trans-unit>
        <trans-unit id="e5f9abda96ed031ceb895d9ec07592e703a29176" translate="yes" xml:space="preserve">
          <source>Therefore, avoid putting reusable application logic in standalone scripts so that you have to import from the script elsewhere in your application. If you can&amp;rsquo;t avoid that, put the call to &lt;code&gt;django.setup()&lt;/code&gt; inside an &lt;code&gt;if&lt;/code&gt; block:</source>
          <target state="translated">따라서 응용 프로그램의 다른 곳에서 스크립트에서 가져와야하므로 재사용 가능한 응용 프로그램 논리를 독립형 스크립트에 넣지 마십시오. 이를 피할 수 없다면 &lt;code&gt;if&lt;/code&gt; 블록 안에 &lt;code&gt;django.setup()&lt;/code&gt; 호출하십시오 .</target>
        </trans-unit>
        <trans-unit id="d1362c485b6c35f67f55f9e1cdf429d6affcfd67" translate="yes" xml:space="preserve">
          <source>Therefore, the following steps should be taken. In this example, we&amp;rsquo;ll add a non-nullable &lt;a href=&quot;../ref/models/fields#django.db.models.UUIDField&quot;&gt;&lt;code&gt;UUIDField&lt;/code&gt;&lt;/a&gt; with a default value. Modify the respective field according to your needs.</source>
          <target state="translated">따라서 다음 단계를 수행해야합니다. 이 예에서는 &lt;a href=&quot;../ref/models/fields#django.db.models.UUIDField&quot;&gt; &lt;code&gt;UUIDField&lt;/code&gt; &lt;/a&gt; 이 아닌 UUIDField 를 기본값으로 추가합니다. 필요에 따라 해당 필드를 수정하십시오.</target>
        </trans-unit>
        <trans-unit id="a811c3212bc4444ab1ca325d9edb3a68d8a1cc21" translate="yes" xml:space="preserve">
          <source>These applications are included by default as a convenience for the common case.</source>
          <target state="translated">이러한 응용 프로그램은 기본적으로 편의를 위해 기본적으로 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="e065064559622e4d29cabe419f920940f963ca83" translate="yes" xml:space="preserve">
          <source>These are logically equivalent to &lt;code&gt;Extract('date_field', lookup_name)&lt;/code&gt;. Each class is also a &lt;code&gt;Transform&lt;/code&gt; registered on &lt;code&gt;DateField&lt;/code&gt; and &lt;code&gt;DateTimeField&lt;/code&gt; as &lt;code&gt;__(lookup_name)&lt;/code&gt;, e.g. &lt;code&gt;__year&lt;/code&gt;.</source>
          <target state="translated">이것은 논리적으로 &lt;code&gt;Extract('date_field', lookup_name)&lt;/code&gt; . 각 클래스는 또한 &lt;code&gt;DateField&lt;/code&gt; 및 &lt;code&gt;DateTimeField&lt;/code&gt; 에 &lt;code&gt;__(lookup_name)&lt;/code&gt; 으로 등록 된 &lt;code&gt;Transform&lt;/code&gt; 입니다( 예 : &lt;code&gt;__year&lt;/code&gt; ) .</target>
        </trans-unit>
        <trans-unit id="33d270e97f3c860dacbaf5326db81a7b97c2fc80" translate="yes" xml:space="preserve">
          <source>These are logically equivalent to &lt;code&gt;Extract('datetime_field', lookup_name)&lt;/code&gt;. Each class is also a &lt;code&gt;Transform&lt;/code&gt; registered on &lt;code&gt;DateTimeField&lt;/code&gt; as &lt;code&gt;__(lookup_name)&lt;/code&gt;, e.g. &lt;code&gt;__minute&lt;/code&gt;.</source>
          <target state="translated">이것은 논리적으로 &lt;code&gt;Extract('datetime_field', lookup_name)&lt;/code&gt; . 각 클래스는 또한 &lt;code&gt;DateTimeField&lt;/code&gt; 에 &lt;code&gt;__(lookup_name)&lt;/code&gt; 으로 등록 된 &lt;code&gt;Transform&lt;/code&gt; 입니다( 예 : &lt;code&gt;__minute&lt;/code&gt; ) .</target>
        </trans-unit>
        <trans-unit id="f93895ed48a7c8f2207cdc06eb69c4f5139d1a32" translate="yes" xml:space="preserve">
          <source>These are logically equivalent to &lt;code&gt;Trunc('date_field', kind)&lt;/code&gt;. They truncate all parts of the date up to &lt;code&gt;kind&lt;/code&gt; which allows grouping or filtering dates with less precision. &lt;code&gt;expression&lt;/code&gt; can have an &lt;code&gt;output_field&lt;/code&gt; of either &lt;code&gt;DateField&lt;/code&gt; or &lt;code&gt;DateTimeField&lt;/code&gt;.</source>
          <target state="translated">이것들은 논리적으로 &lt;code&gt;Trunc('date_field', kind)&lt;/code&gt; 와 동일합니다 . 그들은까지 날짜의 모든 부분을 잘라 &lt;code&gt;kind&lt;/code&gt; 그룹화 이하의 정밀도로 날짜를 필터링 할 수 있습니다. &lt;code&gt;expression&lt;/code&gt; 은 &lt;code&gt;DateField&lt;/code&gt; 또는 &lt;code&gt;DateTimeField&lt;/code&gt; 의 &lt;code&gt;output_field&lt;/code&gt; 를 가질 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="454d6e2d9e6a21406dd0153f13a9b377029b12b8" translate="yes" xml:space="preserve">
          <source>These are logically equivalent to &lt;code&gt;Trunc('datetime_field', kind)&lt;/code&gt;. They truncate all parts of the date up to &lt;code&gt;kind&lt;/code&gt; and allow grouping or filtering datetimes with less precision. &lt;code&gt;expression&lt;/code&gt; must have an &lt;code&gt;output_field&lt;/code&gt; of &lt;code&gt;DateTimeField&lt;/code&gt;.</source>
          <target state="translated">이것들은 논리적으로 &lt;code&gt;Trunc('datetime_field', kind)&lt;/code&gt; 와 동일합니다 . 그들은 날짜의 모든 부분을 &lt;code&gt;kind&lt;/code&gt; 자르고 덜 정밀하게 날짜 시간을 그룹화하거나 필터링 할 수 있습니다. &lt;code&gt;expression&lt;/code&gt; 에는 &lt;code&gt;DateTimeField&lt;/code&gt; 의 &lt;code&gt;output_field&lt;/code&gt; 가 있어야합니다 .</target>
        </trans-unit>
        <trans-unit id="5804cdc6cee9337b46c057c6247660f5a8364c2b" translate="yes" xml:space="preserve">
          <source>These are logically equivalent to &lt;code&gt;Trunc('time_field', kind)&lt;/code&gt;. They truncate all parts of the time up to &lt;code&gt;kind&lt;/code&gt; which allows grouping or filtering times with less precision. &lt;code&gt;expression&lt;/code&gt; can have an &lt;code&gt;output_field&lt;/code&gt; of either &lt;code&gt;TimeField&lt;/code&gt; or &lt;code&gt;DateTimeField&lt;/code&gt;.</source>
          <target state="translated">이것들은 논리적으로 &lt;code&gt;Trunc('time_field', kind)&lt;/code&gt; 와 동일합니다 . 그들은 시간의 모든 부분을 &lt;code&gt;kind&lt;/code&gt; 자르기 때문에 덜 정밀하게 그룹화하거나 필터링 할 수 있습니다. &lt;code&gt;expression&lt;/code&gt; 은 &lt;code&gt;TimeField&lt;/code&gt; 또는 &lt;code&gt;DateTimeField&lt;/code&gt; 의 &lt;code&gt;output_field&lt;/code&gt; 를 가질 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="50bd291265aae0c0fb9e73beecb38af09dafcff9" translate="yes" xml:space="preserve">
          <source>These are the &lt;strong&gt;basics&lt;/strong&gt;. For more details on settings and other bits included with the framework see &lt;a href=&quot;../howto/static-files/index&quot;&gt;the static files howto&lt;/a&gt; and &lt;a href=&quot;../ref/contrib/staticfiles&quot;&gt;the staticfiles reference&lt;/a&gt;. &lt;a href=&quot;../howto/static-files/deployment&quot;&gt;Deploying static files&lt;/a&gt; discusses how to use static files on a real server.</source>
          <target state="translated">이것들은 &lt;strong&gt;기본&lt;/strong&gt; 입니다. 프레임 워크에 포함 된 설정 및 기타 비트에 대한 자세한 내용 &lt;a href=&quot;../howto/static-files/index&quot;&gt;은 정적 파일 howto&lt;/a&gt; 및 정적 파일 &lt;a href=&quot;../ref/contrib/staticfiles&quot;&gt;참조를 참조하십시오&lt;/a&gt; . &lt;a href=&quot;../howto/static-files/deployment&quot;&gt;정적 파일 배포&lt;/a&gt; 에서는 실제 서버에서 정적 파일을 사용하는 방법에 대해 설명합니다.</target>
        </trans-unit>
        <trans-unit id="151eb5bf5744bf8063650cfa2ece87cc03e56770" translate="yes" xml:space="preserve">
          <source>These are the behavioral differences between using &lt;a href=&quot;../../ref/settings#std:setting-MIDDLEWARE&quot;&gt;&lt;code&gt;MIDDLEWARE&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;MIDDLEWARE_CLASSES&lt;/code&gt;:</source>
          <target state="translated">&lt;a href=&quot;../../ref/settings#std:setting-MIDDLEWARE&quot;&gt; &lt;code&gt;MIDDLEWARE&lt;/code&gt; &lt;/a&gt; 와 &lt;code&gt;MIDDLEWARE_CLASSES&lt;/code&gt; 를 사용하는 것의 동작상의 차이점은 다음 과 같습니다.</target>
        </trans-unit>
        <trans-unit id="5d1f38ee94a36c6b6b2cec4fb39d0485df0fabb4" translate="yes" xml:space="preserve">
          <source>These are the same as &lt;code&gt;CharField.max_length&lt;/code&gt; and &lt;code&gt;CharField.min_length&lt;/code&gt;.</source>
          <target state="translated">이들과 동일 &lt;code&gt;CharField.max_length&lt;/code&gt; 및 &lt;code&gt;CharField.min_length&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7d22090f912b19514c42634f07fce865ff3a270b" translate="yes" xml:space="preserve">
          <source>These attributes are used to query for the cardinality and other details of a relation. These attribute are present on all fields; however, they will only have boolean values (rather than &lt;code&gt;None&lt;/code&gt;) if the field is a relation type (&lt;a href=&quot;#django.db.models.Field.is_relation&quot;&gt;&lt;code&gt;Field.is_relation=True&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">이 속성은 카디널리티 및 관계의 다른 세부 사항을 조회하는 데 사용됩니다. 이 속성은 모든 필드에 있습니다. 그러나 필드가 관계 유형 ( &lt;a href=&quot;#django.db.models.Field.is_relation&quot;&gt; &lt;code&gt;Field.is_relation=True&lt;/code&gt; &lt;/a&gt; ) 인 경우 &lt;code&gt;None&lt;/code&gt; 이 아닌 부울 값만 갖습니다 .</target>
        </trans-unit>
        <trans-unit id="6c9ac79d4e422f2ae16dd2fd794c5f063a051c44" translate="yes" xml:space="preserve">
          <source>These can be looped over in the widget template:</source>
          <target state="translated">이들은 위젯 템플리트에서 반복 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="31b7b1455e3ab5f0a917f40a5321d723e049b397" translate="yes" xml:space="preserve">
          <source>These can be matched with a &lt;a href=&quot;../../topics/http/urls&quot;&gt;URLconf&lt;/a&gt; line such as:</source>
          <target state="translated">다음과 같은 &lt;a href=&quot;../../topics/http/urls&quot;&gt;URLconf&lt;/a&gt; 줄과 일치시킬 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="7dde7e9f5922ce83d9207aa75c5262243db571c6" translate="yes" xml:space="preserve">
          <source>These can&amp;rsquo;t report on the internals of your code, but can provide a useful insight into your site&amp;rsquo;s overall performance, including aspects that can&amp;rsquo;t be adequately measured from within Django environment. Examples include:</source>
          <target state="translated">이것들은 코드 내부에 대해서는보고 할 수 없지만 장고 환경 내에서 적절하게 측정 할 수없는 측면을 포함하여 사이트의 전반적인 성능에 대한 유용한 통찰력을 제공 할 수 있습니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="1d81b624432fa9ad29c6c90d7b4473aaba2854fb" translate="yes" xml:space="preserve">
          <source>These checks will only be run if the &lt;a href=&quot;../ref/django-admin#cmdoption-check-deploy&quot;&gt;&lt;code&gt;check --deploy&lt;/code&gt;&lt;/a&gt; option is used.</source>
          <target state="translated">이러한 검사는 &lt;a href=&quot;../ref/django-admin#cmdoption-check-deploy&quot;&gt; &lt;code&gt;check --deploy&lt;/code&gt; &lt;/a&gt; 옵션이 사용 된 경우에만 실행 됩니다.</target>
        </trans-unit>
        <trans-unit id="26c853c5f0ce231fbfad9d81d3d0f3ec08cc045c" translate="yes" xml:space="preserve">
          <source>These classes and functions enable the use of generic relations in forms and the admin. See the &lt;a href=&quot;../../topics/forms/modelforms&quot;&gt;model formset&lt;/a&gt; and &lt;a href=&quot;admin/index#using-generic-relations-as-an-inline&quot;&gt;admin&lt;/a&gt; documentation for more information.</source>
          <target state="translated">이 클래스와 함수를 사용하면 양식과 관리자에서 일반 관계를 사용할 수 있습니다. 자세한 내용은 &lt;a href=&quot;../../topics/forms/modelforms&quot;&gt;모델 양식&lt;/a&gt; 및 &lt;a href=&quot;admin/index#using-generic-relations-as-an-inline&quot;&gt;관리자&lt;/a&gt; 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="b32ba46892379b0488d917d599bb75aa07b70724" translate="yes" xml:space="preserve">
          <source>These concepts are represented by Python classes. Edit the &lt;code&gt;polls/models.py&lt;/code&gt; file so it looks like this:</source>
          <target state="translated">이러한 개념은 Python 클래스로 표현됩니다. &lt;code&gt;polls/models.py&lt;/code&gt; 파일을 다음과 같이 편집하십시오 :</target>
        </trans-unit>
        <trans-unit id="43c124fe0f792bebbb071a1d2b10db9048ab0ed3" translate="yes" xml:space="preserve">
          <source>These conditions have the same database restrictions as &lt;a href=&quot;../../models/indexes#django.db.models.Index.condition&quot;&gt;&lt;code&gt;django.db.models.Index.condition&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 조건은 &lt;a href=&quot;../../models/indexes#django.db.models.Index.condition&quot;&gt; &lt;code&gt;django.db.models.Index.condition&lt;/code&gt; &lt;/a&gt; 과 동일한 데이터베이스 제한 사항을 갖습니다 .</target>
        </trans-unit>
        <trans-unit id="d70f195ee9660ff33a236be74f31fd1c96263086" translate="yes" xml:space="preserve">
          <source>These conditions have the same database restrictions as &lt;a href=&quot;indexes#django.db.models.Index.condition&quot;&gt;&lt;code&gt;Index.condition&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 조건은 &lt;a href=&quot;indexes#django.db.models.Index.condition&quot;&gt; &lt;code&gt;Index.condition&lt;/code&gt; &lt;/a&gt; 과 동일한 데이터베이스 제한 사항이 있습니다 .</target>
        </trans-unit>
        <trans-unit id="3855f3dc40d9d7f39d8cda63c79ab18d1d68be4f" translate="yes" xml:space="preserve">
          <source>These control the range of values permitted in the field, and should be given as &lt;code&gt;decimal.Decimal&lt;/code&gt; values.</source>
          <target state="translated">이들은 필드에서 허용되는 값의 범위를 제어하며 10 &lt;code&gt;decimal.Decimal&lt;/code&gt; 로 제공되어야 합니다.</target>
        </trans-unit>
        <trans-unit id="3ac6c9cd493651714528d9531e7499105a0e1d98" translate="yes" xml:space="preserve">
          <source>These control the range of values permitted in the field.</source>
          <target state="translated">이들은 필드에서 허용되는 값의 범위를 제어합니다.</target>
        </trans-unit>
        <trans-unit id="1d31e0ea8826de848f67ccc50cc409b106513c48" translate="yes" xml:space="preserve">
          <source>These decorators can be used to generate &lt;code&gt;ETag&lt;/code&gt; and &lt;code&gt;Last-Modified&lt;/code&gt; headers; see &lt;a href=&quot;../conditional-view-processing&quot;&gt;conditional view processing&lt;/a&gt;.</source>
          <target state="translated">이 데코레이터를 사용하여 &lt;code&gt;ETag&lt;/code&gt; 및 &lt;code&gt;Last-Modified&lt;/code&gt; 헤더 를 생성 할 수 있습니다 . &lt;a href=&quot;../conditional-view-processing&quot;&gt;조건부보기 처리를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="4eba9b75824489b6751a633fb101fd9cc8f0463f" translate="yes" xml:space="preserve">
          <source>These drivers are thread-safe and provide connection pooling.</source>
          <target state="translated">이 드라이버는 스레드로부터 안전하며 연결 ​​풀링을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="f783e4a54d21c873c25728d58f8e24098cbdad3d" translate="yes" xml:space="preserve">
          <source>These error messages often don&amp;rsquo;t propagate to forms. See &lt;a href=&quot;../../topics/forms/modelforms#considerations-regarding-model-errormessages&quot;&gt;Considerations regarding model&amp;rsquo;s error_messages&lt;/a&gt;.</source>
          <target state="translated">이러한 오류 메시지는 종종 양식으로 전파되지 않습니다. &lt;a href=&quot;../../topics/forms/modelforms#considerations-regarding-model-errormessages&quot;&gt;모델의 error_messages 관련 고려 사항을&lt;/a&gt; 참조 하십시오 .</target>
        </trans-unit>
        <trans-unit id="fc37aef28cd57ff09019f44261fe870e19984e1f" translate="yes" xml:space="preserve">
          <source>These expressions are defined in &lt;code&gt;django.db.models.expressions&lt;/code&gt; and &lt;code&gt;django.db.models.aggregates&lt;/code&gt;, but for convenience they&amp;rsquo;re available and usually imported from &lt;a href=&quot;../../topics/db/models#module-django.db.models&quot;&gt;&lt;code&gt;django.db.models&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 표현식은 &lt;code&gt;django.db.models.expressions&lt;/code&gt; 및 &lt;code&gt;django.db.models.aggregates&lt;/code&gt; 에 정의되어 있지만 편의상 일반적으로 &lt;a href=&quot;../../topics/db/models#module-django.db.models&quot;&gt; &lt;code&gt;django.db.models&lt;/code&gt; &lt;/a&gt; 에서 가져올 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e118c1024f14f076a44dcc64598a3aeee1b7ab4e" translate="yes" xml:space="preserve">
          <source>These extra attributes cannot be overridden unless the field that defines it is changed or removed so that it no longer defines the extra attribute.</source>
          <target state="translated">이러한 추가 속성은 해당 속성을 정의하는 필드가 더 이상 추가 속성을 정의하지 않도록 변경하거나 제거하지 않으면 재정의 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="bd68f523b7ace0cf5729eed9d49b1b8dd9b1021a" translate="yes" xml:space="preserve">
          <source>These extra lookups may not be portable to different database engines (because you&amp;rsquo;re explicitly writing SQL code) and violate the DRY principle, so you should avoid them if possible.</source>
          <target state="translated">이러한 추가 조회는 SQL 데이터베이스를 명시 적으로 작성하기 때문에 다른 데이터베이스 엔진으로 이식 할 수없고 DRY 원칙을 위반하므로 가능하면 피해야합니다.</target>
        </trans-unit>
        <trans-unit id="a1cd01b26caf9820ccd797d86a0c27cfbd90fa00" translate="yes" xml:space="preserve">
          <source>These fields should be some kind of text field, such as &lt;code&gt;CharField&lt;/code&gt; or &lt;code&gt;TextField&lt;/code&gt;. You can also perform a related lookup on a &lt;code&gt;ForeignKey&lt;/code&gt; or &lt;code&gt;ManyToManyField&lt;/code&gt; with the lookup API &amp;ldquo;follow&amp;rdquo; notation:</source>
          <target state="translated">이 필드는 &lt;code&gt;CharField&lt;/code&gt; 또는 &lt;code&gt;TextField&lt;/code&gt; 와 같은 일종의 텍스트 필드 여야합니다 . 조회 API&amp;ldquo;follow&amp;rdquo;표기법 을 사용하여 &lt;code&gt;ForeignKey&lt;/code&gt; 또는 &lt;code&gt;ManyToManyField&lt;/code&gt; 에서 관련 조회를 수행 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="b81be3771bbb864d65a54b4e5daf5d6ac8bf6994" translate="yes" xml:space="preserve">
          <source>These fields subclass &lt;a href=&quot;../../models/fields#django.db.models.CharField&quot;&gt;&lt;code&gt;CharField&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../models/fields#django.db.models.EmailField&quot;&gt;&lt;code&gt;EmailField&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;../../models/fields#django.db.models.TextField&quot;&gt;&lt;code&gt;TextField&lt;/code&gt;&lt;/a&gt;, respectively.</source>
          <target state="translated">이 필드 는 각각 &lt;a href=&quot;../../models/fields#django.db.models.CharField&quot;&gt; &lt;code&gt;CharField&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../../models/fields#django.db.models.EmailField&quot;&gt; &lt;code&gt;EmailField&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../../models/fields#django.db.models.TextField&quot;&gt; &lt;code&gt;TextField&lt;/code&gt; 의&lt;/a&gt; 서브 클래스 입니다.</target>
        </trans-unit>
        <trans-unit id="7e7cdd0871f533426a8eb966c973d6cdcefc37d5" translate="yes" xml:space="preserve">
          <source>These files are marked to say they replace the previously-squashed migrations, so they can coexist with the old migration files, and Django will intelligently switch between them depending where you are in the history. If you&amp;rsquo;re still part-way through the set of migrations that you squashed, it will keep using them until it hits the end and then switch to the squashed history, while new installs will use the new squashed migration and skip all the old ones.</source>
          <target state="translated">이 파일들은 이전에 삭제 된 마이그레이션을 대체한다고 표시되어 이전 마이그레이션 파일과 공존 할 수 있으며 Django는 사용자가 기록의 위치에 따라 지능적으로 전환합니다. 여전히 마이그레이션 한 마이그레이션 세트를 부분적으로 수행하는 경우 끝까지 도달 할 때까지 계속 사용 된 다음, 중지 된 기록으로 전환하는 반면, 새 설치에서는 새로운 마이그레이션 된 마이그레이션을 사용하고 모든 이전 마이그레이션을 건너 뜁니다. .</target>
        </trans-unit>
        <trans-unit id="59453eba3cca73d3f4e6eca60587f3f63376bec8" translate="yes" xml:space="preserve">
          <source>These files are:</source>
          <target state="translated">이러한 파일은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="10a689a35f902db0c52a7d13669aa1560f7adfad" translate="yes" xml:space="preserve">
          <source>These filters accept both aware and naive datetimes. For conversion purposes, they assume that naive datetimes are in the default time zone. They always return aware datetimes.</source>
          <target state="translated">이 필터는 인식 및 순진 날짜 시간을 모두 허용합니다. 변환 목적으로, 순진한 날짜 시간이 기본 시간대에 있다고 가정합니다. 그들은 항상 인식 된 날짜 시간을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="09b2adf2daadd17f8991c7ad4e29a27c18bec106" translate="yes" xml:space="preserve">
          <source>These format characters are not used in Django outside of templates. They were designed to be compatible with PHP to ease transitioning for designers.</source>
          <target state="translated">이 형식 문자는 템플릿 외부의 Django에서 사용되지 않습니다. 디자이너와 쉽게 전환 할 수 있도록 PHP와 호환되도록 설계되었습니다.</target>
        </trans-unit>
        <trans-unit id="d36c44a2a16c421407efb0787f4cf7a77d871598" translate="yes" xml:space="preserve">
          <source>These functions are available from the &lt;code&gt;django.contrib.postgres.aggregates&lt;/code&gt; module. They are described in more detail in the &lt;a href=&quot;https://www.postgresql.org/docs/current/functions-aggregate.html&quot;&gt;PostgreSQL docs&lt;/a&gt;.</source>
          <target state="translated">이 기능은 &lt;code&gt;django.contrib.postgres.aggregates&lt;/code&gt; 모듈 에서 사용 가능 합니다. 그것들은 &lt;a href=&quot;https://www.postgresql.org/docs/current/functions-aggregate.html&quot;&gt;PostgreSQL 문서&lt;/a&gt; 에서 더 자세히 설명됩니다 .</target>
        </trans-unit>
        <trans-unit id="3613b66d5ec05e9b517e97a09c69770f654bb184" translate="yes" xml:space="preserve">
          <source>These functions do nothing if savepoints aren&amp;rsquo;t supported or if the database is in autocommit mode.</source>
          <target state="translated">저장 점을 지원하지 않거나 데이터베이스가 자동 커미트 모드 인 경우에는이 기능이 아무 것도 수행하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="26d2fbeed66708a6b2e3fea607b273adbc6a423b" translate="yes" xml:space="preserve">
          <source>These functions store a lazy reference to the string &amp;ndash; not the actual translation. The translation itself will be done when the string is used in a string context, such as in template rendering.</source>
          <target state="translated">이 함수들은 실제 번역이 아닌 문자열에 대한 게으른 참조를 저장합니다. 문자열은 템플릿 렌더링과 같은 문자열 컨텍스트에서 사용될 때 변환 자체가 수행됩니다.</target>
        </trans-unit>
        <trans-unit id="1481dfb24ded2fa557792db5ab783a7b722addfb" translate="yes" xml:space="preserve">
          <source>These functions take a &lt;code&gt;using&lt;/code&gt; argument which should be the name of a database. If it isn&amp;rsquo;t provided, Django uses the &lt;code&gt;&quot;default&quot;&lt;/code&gt; database.</source>
          <target state="translated">이 함수 는 데이터베이스의 이름이어야 하는 &lt;code&gt;using&lt;/code&gt; 인수를 사용 합니다. 제공되지 않으면 Django는 &lt;code&gt;&quot;default&quot;&lt;/code&gt; 데이터베이스를 사용 합니다.</target>
        </trans-unit>
        <trans-unit id="ce7737bf890658d5a693c066c1b625a2b8fa4443" translate="yes" xml:space="preserve">
          <source>These limitations can be worked around, though, because your field name doesn&amp;rsquo;t necessarily have to match your database column name. See the &lt;a href=&quot;../../ref/models/fields#django.db.models.Field.db_column&quot;&gt;&lt;code&gt;db_column&lt;/code&gt;&lt;/a&gt; option.</source>
          <target state="translated">필드 이름이 데이터베이스 열 이름과 반드시 ​​일치 할 필요는 없기 때문에 이러한 제한 사항을 해결할 수 있습니다. &lt;a href=&quot;../../ref/models/fields#django.db.models.Field.db_column&quot;&gt; &lt;code&gt;db_column&lt;/code&gt; &lt;/a&gt; 옵션을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="6153116eca0bc5ff88e6a1c9c0ed7bdd536fd2f5" translate="yes" xml:space="preserve">
          <source>These log events will reach the &lt;code&gt;django&lt;/code&gt; logger by default, which mails error events to admins when &lt;code&gt;DEBUG=False&lt;/code&gt;. Requests resulting in a 400 response due to a &lt;code&gt;SuspiciousOperation&lt;/code&gt; will not be logged to the &lt;code&gt;django.request&lt;/code&gt; logger, but only to the &lt;code&gt;django.security&lt;/code&gt; logger.</source>
          <target state="translated">이 로그 이벤트는 기본적으로 &lt;code&gt;django&lt;/code&gt; 로거에 도달하며 &lt;code&gt;DEBUG=False&lt;/code&gt; 일 때 오류 이벤트를 관리자에게 메일로 보냅니다 . 인해에 대한 400 응답의 결과로 요청 &lt;code&gt;SuspiciousOperation&lt;/code&gt; 는 에 기록되지 않습니다 &lt;code&gt;django.request&lt;/code&gt; 하지만 단지로, 로거 &lt;code&gt;django.security&lt;/code&gt; 의 로거.</target>
        </trans-unit>
        <trans-unit id="c7c3eb4dcf73f6eae594708817f6f59f743cdab5" translate="yes" xml:space="preserve">
          <source>These methods accept all the same arguments &lt;em&gt;except&lt;/em&gt; for &lt;code&gt;follow&lt;/code&gt;. Since this is just a factory for producing requests, it&amp;rsquo;s up to you to handle the response.</source>
          <target state="translated">이러한 메소드 는 &lt;code&gt;follow&lt;/code&gt; 를&lt;em&gt;제외하고&lt;/em&gt; 는 동일한 인수를 모두 허용합니다 . 요청을 생성하기위한 팩토리 일 뿐이므로 응답을 처리하는 것은 사용자의 책임입니다.</target>
        </trans-unit>
        <trans-unit id="c69fb2d164c2dba74094b46050e6d1308565c85f" translate="yes" xml:space="preserve">
          <source>These methods are run in the order given above, one field at a time. That is, for each field in the form (in the order they are declared in the form definition), the &lt;code&gt;Field.clean()&lt;/code&gt; method (or its override) is run, then &lt;code&gt;clean_&amp;lt;fieldname&amp;gt;()&lt;/code&gt;. Finally, once those two methods are run for every field, the &lt;a href=&quot;api#django.forms.Form.clean&quot;&gt;&lt;code&gt;Form.clean()&lt;/code&gt;&lt;/a&gt; method, or its override, is executed whether or not the previous methods have raised errors.</source>
          <target state="translated">이러한 메소드는 한 번에 한 필드 씩 위에 주어진 순서대로 실행됩니다. 즉, 양식의 각 필드 (양식 정의에 선언 된 순서대로)에 대해 &lt;code&gt;Field.clean()&lt;/code&gt; 메소드 (또는 대체)가 실행 된 다음 &lt;code&gt;clean_&amp;lt;fieldname&amp;gt;()&lt;/code&gt; 입니다. 마지막으로, 두 필드가 모든 필드에 대해 실행되면 &lt;a href=&quot;api#django.forms.Form.clean&quot;&gt; &lt;code&gt;Form.clean()&lt;/code&gt; &lt;/a&gt; 메서드 또는 해당 재정의가 이전 메서드의 오류 발생 여부에 관계없이 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="87068cc66a4571abc366c73b028c9e7489527d88" translate="yes" xml:space="preserve">
          <source>These methods do not use a cache (see &lt;a href=&quot;../../topics/db/queries#caching-and-querysets&quot;&gt;Caching and QuerySets&lt;/a&gt;). Rather, they query the database each time they&amp;rsquo;re called.</source>
          <target state="translated">이러한 메소드는 캐시를 사용하지 않습니다 ( &lt;a href=&quot;../../topics/db/queries#caching-and-querysets&quot;&gt;캐싱 및 QuerySet&lt;/a&gt; 참조 ). 오히려 호출 될 때마다 데이터베이스를 쿼리합니다.</target>
        </trans-unit>
        <trans-unit id="60c2db895bfe774801c88d30673bffc29d282607" translate="yes" xml:space="preserve">
          <source>These methods involve somewhat advanced Python programming and are described in detail in the &lt;a href=&quot;../../topics/forms/media&quot;&gt;Form Assets&lt;/a&gt; topic guide.</source>
          <target state="translated">이러한 메소드에는 다소 고급 Python 프로그래밍이 포함되며 &lt;a href=&quot;../../topics/forms/media&quot;&gt;양식 자산&lt;/a&gt; 주제 안내서 에 자세히 설명되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="7559beb910e4d8b1dca7b5e709c16d19e91f56ae" translate="yes" xml:space="preserve">
          <source>These might be compiled statically into Apache, or you might need to use LoadModule to load them dynamically in your &lt;code&gt;httpd.conf&lt;/code&gt;:</source>
          <target state="translated">이들은 정적으로 Apache로 컴파일되거나, &lt;code&gt;httpd.conf&lt;/code&gt; 에서 동적으로로드하기 위해 LoadModule을 사용해야 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="668670d53f79178e79d3961dfed3c09d30eb2b84" translate="yes" xml:space="preserve">
          <source>These named URLs are registered with the application namespace &lt;code&gt;admin&lt;/code&gt;, and with an instance namespace corresponding to the name of the Site instance.</source>
          <target state="translated">이러한 명명 된 URL은 응용 프로그램 네임 스페이스 &lt;code&gt;admin&lt;/code&gt; 및 사이트 인스턴스 이름에 해당하는 인스턴스 네임 스페이스로 등록됩니다 .</target>
        </trans-unit>
        <trans-unit id="f8970d45562b27d4dd7dda0de0f49bd1955231e7" translate="yes" xml:space="preserve">
          <source>These patterns are used by default: &lt;code&gt;'CVS'&lt;/code&gt;, &lt;code&gt;'.*'&lt;/code&gt;, &lt;code&gt;'*~'&lt;/code&gt;, &lt;code&gt;'*.pyc'&lt;/code&gt;.</source>
          <target state="translated">기본적으로 &lt;code&gt;'CVS'&lt;/code&gt; , &lt;code&gt;'.*'&lt;/code&gt; , &lt;code&gt;'*~'&lt;/code&gt; , &lt;code&gt;'*.pyc'&lt;/code&gt; 패턴이 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="40e6af629c1a12f9351f2a4b7bdb42560e70d097" translate="yes" xml:space="preserve">
          <source>These permissions will be created when you run &lt;a href=&quot;../../ref/django-admin#django-admin-migrate&quot;&gt;&lt;code&gt;manage.py migrate&lt;/code&gt;&lt;/a&gt;; the first time you run &lt;code&gt;migrate&lt;/code&gt; after adding &lt;code&gt;django.contrib.auth&lt;/code&gt; to &lt;a href=&quot;../../ref/settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt;, the default permissions will be created for all previously-installed models, as well as for any new models being installed at that time. Afterward, it will create default permissions for new models each time you run &lt;a href=&quot;../../ref/django-admin#django-admin-migrate&quot;&gt;&lt;code&gt;manage.py migrate&lt;/code&gt;&lt;/a&gt; (the function that creates permissions is connected to the &lt;a href=&quot;../../ref/signals#django.db.models.signals.post_migrate&quot;&gt;&lt;code&gt;post_migrate&lt;/code&gt;&lt;/a&gt; signal).</source>
          <target state="translated">이러한 권한은 &lt;a href=&quot;../../ref/django-admin#django-admin-migrate&quot;&gt; &lt;code&gt;manage.py migrate&lt;/code&gt; &lt;/a&gt; 를 실행할 때 작성됩니다 . &lt;code&gt;django.contrib.auth&lt;/code&gt; 를 &lt;a href=&quot;../../ref/settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; 에&lt;/a&gt; 추가 한 후 &lt;code&gt;migrate&lt;/code&gt; 을 처음 실행하면 이전에 설치된 모든 모델과 그 당시에 설치중인 새 모델에 대한 기본 권한이 작성됩니다. 그런 다음 &lt;a href=&quot;../../ref/django-admin#django-admin-migrate&quot;&gt; &lt;code&gt;manage.py migrate&lt;/code&gt; &lt;/a&gt; 를 실행할 때마다 새 모델에 대한 기본 권한 이 작성됩니다 (권한을 작성하는 기능은 &lt;a href=&quot;../../ref/signals#django.db.models.signals.post_migrate&quot;&gt; &lt;code&gt;post_migrate&lt;/code&gt; &lt;/a&gt; 신호 에 연결됨 ).</target>
        </trans-unit>
        <trans-unit id="b373a3d98792413ead4ac2102435da1629b6d9f8" translate="yes" xml:space="preserve">
          <source>These profile models are not special in any way - they are just Django models that happen to have a one-to-one link with a user model. As such, they aren&amp;rsquo;t auto created when a user is created, but a &lt;a href=&quot;../../ref/signals#django.db.models.signals.post_save&quot;&gt;&lt;code&gt;django.db.models.signals.post_save&lt;/code&gt;&lt;/a&gt; could be used to create or update related models as appropriate.</source>
          <target state="translated">이 프로파일 모델은 어떤 식 으로든 특별하지는 않습니다. 사용자 모델과 일대일로 연결되는 Django 모델 일뿐입니다. 따라서 사용자가 작성 될 때 자동으로 작성되지 않지만 &lt;a href=&quot;../../ref/signals#django.db.models.signals.post_save&quot;&gt; &lt;code&gt;django.db.models.signals.post_save&lt;/code&gt; 를&lt;/a&gt; 사용하여 관련 모델을 적절하게 작성하거나 업데이트 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2e81a2fd18e0fb9a802e3f49bc6fdbcd66325343" translate="yes" xml:space="preserve">
          <source>These provide a &lt;a href=&quot;../../ref/request-response#django.http.HttpRequest.user&quot;&gt;&lt;code&gt;request.user&lt;/code&gt;&lt;/a&gt; attribute on every request which represents the current user. If the current user has not logged in, this attribute will be set to an instance of &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.AnonymousUser&quot;&gt;&lt;code&gt;AnonymousUser&lt;/code&gt;&lt;/a&gt;, otherwise it will be an instance of &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User&quot;&gt;&lt;code&gt;User&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이들은 현재 사용자를 나타내는 모든 요청에 &lt;a href=&quot;../../ref/request-response#django.http.HttpRequest.user&quot;&gt; &lt;code&gt;request.user&lt;/code&gt; &lt;/a&gt; 속성을 제공합니다 . 현재 사용자가 로그인하지 않은 경우이 속성은 &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.AnonymousUser&quot;&gt; &lt;code&gt;AnonymousUser&lt;/code&gt; &lt;/a&gt; 의 인스턴스로 설정되고 그렇지 않으면 &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User&quot;&gt; &lt;code&gt;User&lt;/code&gt; &lt;/a&gt; 의 인스턴스가 됩니다.</target>
        </trans-unit>
        <trans-unit id="1a52f49716ae638af573877c07f913495b580a02" translate="yes" xml:space="preserve">
          <source>These rules apply regardless of whether &lt;a href=&quot;#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; references application configuration classes or application packages.</source>
          <target state="translated">이 규칙은 &lt;a href=&quot;#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; 가&lt;/a&gt; 애플리케이션 구성 클래스 또는 애플리케이션 패키지를 참조 하는지 여부에 관계없이 적용 됩니다.</target>
        </trans-unit>
        <trans-unit id="432c77af6e262f2a0007bc9985de2eb83c3b1c55" translate="yes" xml:space="preserve">
          <source>These rules provide the necessary flexibility if you want to install a collection of custom managers on a group of models, via an abstract base class, but still customize the default manager. For example, suppose you have this base class:</source>
          <target state="translated">이 규칙은 추상 기본 클래스를 통해 모델 그룹에 사용자 정의 관리자 콜렉션을 설치하지만 여전히 기본 관리자를 사용자 정의하려는 경우 필요한 유연성을 제공합니다. 예를 들어,이 기본 클래스가 있다고 가정하십시오.</target>
        </trans-unit>
        <trans-unit id="c690c313d5a2ca67a462ea1c271dd620a9c88b9c" translate="yes" xml:space="preserve">
          <source>These settings assume you have a &lt;code&gt;templates&lt;/code&gt; directory in the root of your project. To override the templates for the &lt;code&gt;blog&lt;/code&gt; app, create a folder in the &lt;code&gt;templates&lt;/code&gt; directory, and add the template files to that folder:</source>
          <target state="translated">이 설정은 프로젝트 루트에 &lt;code&gt;templates&lt;/code&gt; 디렉토리 가 있다고 가정합니다 . &lt;code&gt;blog&lt;/code&gt; 앱 의 템플리트를 대체하려면 &lt;code&gt;templates&lt;/code&gt; 디렉토리에 폴더를 작성하고 해당 폴더에 템플리트 파일을 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="6d0c4ae958a0ebe978561639237bb001048dc9aa" translate="yes" xml:space="preserve">
          <source>These sorts of tags are called &amp;ldquo;inclusion tags&amp;rdquo;.</source>
          <target state="translated">이러한 종류의 태그를 &quot;내포 태그&quot;라고합니다.</target>
        </trans-unit>
        <trans-unit id="14d9f7c08639f4992b98b72080df4bac0a97e254" translate="yes" xml:space="preserve">
          <source>These specifics &amp;ndash; 2.5 megabytes; &lt;code&gt;/tmp&lt;/code&gt;; etc. &amp;ndash; are &amp;ldquo;reasonable defaults&amp;rdquo; which can be customized as described in the next section.</source>
          <target state="translated">이러한 사양 &amp;ndash; 2.5MB; &lt;code&gt;/tmp&lt;/code&gt; ; &amp;ndash; 다음 섹션에 설명 된대로 사용자 정의 할 수있는 &quot;합리적인 기본값&quot;입니다.</target>
        </trans-unit>
        <trans-unit id="61a4c0c6e98a48f0ef5475c3b067eccb73a5f862" translate="yes" xml:space="preserve">
          <source>These tags also require a &lt;code&gt;{% load i18n %}&lt;/code&gt;.</source>
          <target state="translated">이 태그에는 &lt;code&gt;{% load i18n %}&lt;/code&gt; 도 필요합니다 .</target>
        </trans-unit>
        <trans-unit id="30ed96ec28b705164b775cb2cc5f0e2984387004" translate="yes" xml:space="preserve">
          <source>These techniques are targeted at more advanced users who want to push the boundaries of performance of an already well-optimized Django site.</source>
          <target state="translated">이러한 기술은 이미 최적화 된 Django 사이트의 성능 경계를 넓히고 자하는 고급 사용자를 대상으로합니다.</target>
        </trans-unit>
        <trans-unit id="8341e8fb9ee809077cb7896c6dc0a69d3221e480" translate="yes" xml:space="preserve">
          <source>These three &lt;code&gt;QuerySets&lt;/code&gt; are separate. The first is a base &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; containing all entries that contain a headline starting with &amp;ldquo;What&amp;rdquo;. The second is a subset of the first, with an additional criteria that excludes records whose &lt;code&gt;pub_date&lt;/code&gt; is today or in the future. The third is a subset of the first, with an additional criteria that selects only the records whose &lt;code&gt;pub_date&lt;/code&gt; is today or in the future. The initial &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; (&lt;code&gt;q1&lt;/code&gt;) is unaffected by the refinement process.</source>
          <target state="translated">이 세 개의 &lt;code&gt;QuerySets&lt;/code&gt; 은 분리되어 있습니다. 첫 번째는 &quot;What&quot;로 시작하는 헤드 라인을 포함하는 모든 항목을 포함 하는 기본 &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; &lt;/a&gt; 입니다. 두 번째는 첫 번째의 하위 집합으로, &lt;code&gt;pub_date&lt;/code&gt; 가 오늘 또는 미래인 레코드를 제외하는 추가 기준이 있습니다. 세 번째는 첫 번째의 하위 집합이며 &lt;code&gt;pub_date&lt;/code&gt; 가 오늘 또는 미래인 레코드 만 선택하는 추가 기준이 있습니다. 초기 &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; &lt;/a&gt; ( &lt;code&gt;q1&lt;/code&gt; )은 세분화 프로세스의 영향을받지 않습니다.</target>
        </trans-unit>
        <trans-unit id="757950666b8fbab76b5c4cb07e02bab987476329" translate="yes" xml:space="preserve">
          <source>These two functions are passed as parameters to the &lt;code&gt;django.views.decorators.http.condition&lt;/code&gt; decorator. This decorator uses the two functions (you only need to supply one, if you can&amp;rsquo;t compute both quantities easily and quickly) to work out if the headers in the HTTP request match those on the resource. If they don&amp;rsquo;t match, a new copy of the resource must be computed and your normal view is called.</source>
          <target state="translated">이 두 함수는 &lt;code&gt;django.views.decorators.http.condition&lt;/code&gt; 데코레이터에 매개 변수로 전달됩니다 . 이 데코레이터는 HTTP 요청의 헤더가 리소스의 헤더와 일치하는지 확인하기 위해 두 가지 기능 (양을 쉽고 빠르게 계산할 수없는 경우 하나만 제공하면 됨)을 사용합니다. 일치하지 않으면 새 리소스 복사본을 계산하고 일반보기를 호출해야합니다.</target>
        </trans-unit>
        <trans-unit id="207b6a51ea55d16e8d0b1a65f1407f0365b5f528" translate="yes" xml:space="preserve">
          <source>These two groups of functions have slightly different purposes, and it&amp;rsquo;s important to keep them straight. Normally, you would use &lt;code&gt;quote()&lt;/code&gt; on the individual portions of the IRI or URI path so that any reserved characters such as &amp;lsquo;&amp;amp;&amp;rsquo; or &amp;lsquo;%&amp;rsquo; are correctly encoded. Then, you apply &lt;code&gt;iri_to_uri()&lt;/code&gt; to the full IRI and it converts any non-ASCII characters to the correct encoded values.</source>
          <target state="translated">이 두 기능 그룹은 목적이 약간 다르므로 직관을 유지하는 것이 중요합니다. 일반적 으로 '&amp;amp;'또는 '%'와 같은 예약 문자가 올바르게 인코딩되도록 IRI 또는 ​​URI 경로의 개별 부분에 &lt;code&gt;quote()&lt;/code&gt; 를 사용 합니다. 그런 다음 &lt;code&gt;iri_to_uri()&lt;/code&gt; 를 전체 IRI에 적용하고 ASCII가 아닌 모든 문자를 올바른 인코딩 된 값으로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="fdef885543a3721796b5a18e4dc67e715710190f" translate="yes" xml:space="preserve">
          <source>These validators are available from the &lt;code&gt;django.contrib.postgres.validators&lt;/code&gt; module.</source>
          <target state="translated">이 유효성 검증기는 &lt;code&gt;django.contrib.postgres.validators&lt;/code&gt; 모듈 에서 사용 가능 합니다.</target>
        </trans-unit>
        <trans-unit id="2f0f4b335c9a3ff0d3d406159e4d926212beeceb" translate="yes" xml:space="preserve">
          <source>These values and lists are 1-based, not 0-based, so the first page would be represented as page &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="translated">이 값과 목록은 0이 아닌 1을 기준으로하므로 첫 번째 페이지는 &lt;code&gt;1&lt;/code&gt; 로 표시됩니다 .</target>
        </trans-unit>
        <trans-unit id="5b6b2bb2dde29fab29c2207460ac6cadaacbbc06" translate="yes" xml:space="preserve">
          <source>These values are only displayed for unbound forms, and they&amp;rsquo;re not used as fallback values if a particular value isn&amp;rsquo;t provided.</source>
          <target state="translated">이 값은 바인딩되지 않은 양식에만 표시되며 특정 값을 제공하지 않으면 대체 값으로 사용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="11268e1c18bb10eac43ab6892fcbbda794ff66e2" translate="yes" xml:space="preserve">
          <source>These views inherit &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectTemplateResponseMixin&quot;&gt;&lt;code&gt;SingleObjectTemplateResponseMixin&lt;/code&gt;&lt;/a&gt; which uses &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectTemplateResponseMixin.template_name_suffix&quot;&gt;&lt;code&gt;template_name_suffix&lt;/code&gt;&lt;/a&gt; to construct the &lt;a href=&quot;../../ref/class-based-views/mixins-simple#django.views.generic.base.TemplateResponseMixin.template_name&quot;&gt;&lt;code&gt;template_name&lt;/code&gt;&lt;/a&gt; based on the model.</source>
          <target state="translated">상속이 전망 &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectTemplateResponseMixin&quot;&gt; &lt;code&gt;SingleObjectTemplateResponseMixin&lt;/code&gt; &lt;/a&gt; 사용이 &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectTemplateResponseMixin.template_name_suffix&quot;&gt; &lt;code&gt;template_name_suffix&lt;/code&gt; 는&lt;/a&gt; 구조물하기 &lt;a href=&quot;../../ref/class-based-views/mixins-simple#django.views.generic.base.TemplateResponseMixin.template_name&quot;&gt; &lt;code&gt;template_name&lt;/code&gt; &lt;/a&gt; 모델을 기반으로합니다.</target>
        </trans-unit>
        <trans-unit id="29a3334722cfad7fd5554e0fb1aafd81da076850" translate="yes" xml:space="preserve">
          <source>These views represent a common case of basic Web development: getting data from the database according to a parameter passed in the URL, loading a template and returning the rendered template. Because this is so common, Django provides a shortcut, called the &amp;ldquo;generic views&amp;rdquo; system.</source>
          <target state="translated">이러한 뷰는 기본 웹 개발의 일반적인 경우를 나타냅니다. URL에 전달 된 매개 변수에 따라 데이터베이스에서 데이터를 가져오고 템플리트를로드하고 렌더링 된 템플리트를 리턴합니다. 이것이 매우 일반적이기 때문에 Django는&amp;ldquo;일반 뷰&amp;rdquo;시스템이라는 바로 가기를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="23bbc8d60be2c755e2f9e623e8bf42d01485c203" translate="yes" xml:space="preserve">
          <source>These views return &lt;a href=&quot;../../template-response#django.template.response.TemplateResponse&quot;&gt;&lt;code&gt;TemplateResponse&lt;/code&gt;&lt;/a&gt; instances which allow you to easily customize the response data before rendering. For more details, see the &lt;a href=&quot;../../template-response&quot;&gt;TemplateResponse documentation&lt;/a&gt;.</source>
          <target state="translated">이러한 뷰는 렌더링하기 전에 응답 데이터를 쉽게 사용자 지정할 수있는 &lt;a href=&quot;../../template-response#django.template.response.TemplateResponse&quot;&gt; &lt;code&gt;TemplateResponse&lt;/code&gt; &lt;/a&gt; 인스턴스를 반환 합니다. 자세한 내용은 &lt;a href=&quot;../../template-response&quot;&gt;TemplateResponse 설명서를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="f4a0329157f8f7f97e101113c93e1cffe78d13e0" translate="yes" xml:space="preserve">
          <source>These views return &lt;a href=&quot;../template-response#django.template.response.TemplateResponse&quot;&gt;&lt;code&gt;TemplateResponse&lt;/code&gt;&lt;/a&gt; instances which allow you to easily customize the response data before rendering. For more details, see the &lt;a href=&quot;../template-response&quot;&gt;TemplateResponse documentation&lt;/a&gt;.</source>
          <target state="translated">이러한 뷰는 렌더링하기 전에 응답 데이터를 쉽게 사용자 지정할 수있는 &lt;a href=&quot;../template-response#django.template.response.TemplateResponse&quot;&gt; &lt;code&gt;TemplateResponse&lt;/code&gt; &lt;/a&gt; 인스턴스를 반환 합니다. 자세한 내용은 &lt;a href=&quot;../template-response&quot;&gt;TemplateResponse 설명서를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="0d2c61c0654cf39fb1cadf90f403f1ffbdfb5fa4" translate="yes" xml:space="preserve">
          <source>These widgets make use of the HTML elements &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;input type=&quot;checkbox&quot;&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;lt;input type=&quot;radio&quot;&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">이 위젯은 HTML 요소 &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; , &lt;code&gt;&amp;lt;input type=&quot;checkbox&quot;&amp;gt;&lt;/code&gt; 및 &lt;code&gt;&amp;lt;input type=&quot;radio&quot;&amp;gt;&lt;/code&gt; 를 사용 합니다.</target>
        </trans-unit>
        <trans-unit id="b201cf52b101336df1d987acc576b495a5065d30" translate="yes" xml:space="preserve">
          <source>These widgets make use of the HTML elements &lt;code&gt;input&lt;/code&gt; and &lt;code&gt;textarea&lt;/code&gt;.</source>
          <target state="translated">이 위젯은 HTML 요소 &lt;code&gt;input&lt;/code&gt; 및 &lt;code&gt;textarea&lt;/code&gt; 를 사용 합니다.</target>
        </trans-unit>
        <trans-unit id="209ae4e703bfdbcbe41dd07f3bf0e163cb4d6d46" translate="yes" xml:space="preserve">
          <source>These work similar to &lt;a href=&quot;https://docs.python.org/3/library/enum.html#module-enum&quot;&gt;&lt;code&gt;enum&lt;/code&gt;&lt;/a&gt; from Python&amp;rsquo;s standard library, but with some modifications:</source>
          <target state="translated">이것들 은 파이썬 표준 라이브러리의 &lt;a href=&quot;https://docs.python.org/3/library/enum.html#module-enum&quot;&gt; &lt;code&gt;enum&lt;/code&gt; &lt;/a&gt; 과 비슷 하지만 약간의 수정이 있습니다.</target>
        </trans-unit>
        <trans-unit id="defbd4396e45ff5a6d1ec27bc9db03ec32c25ba8" translate="yes" xml:space="preserve">
          <source>They accept strings in ISO 8601 date/time formats (or some close alternatives) and return objects from the corresponding classes in Python&amp;rsquo;s &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#module-datetime&quot;&gt;&lt;code&gt;datetime&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="translated">그들은 ISO 8601 날짜 / 시간 형식 (또는 일부 가까운 대안)의 문자열을 허용하고 Python의 &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#module-datetime&quot;&gt; &lt;code&gt;datetime&lt;/code&gt; &lt;/a&gt; 모듈 의 해당 클래스에서 객체를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="0a57448ac678ab15c5024e99574887cd2d62c3cf" translate="yes" xml:space="preserve">
          <source>They accept up to picosecond resolution in input, but they truncate it to microseconds, since that&amp;rsquo;s what Python supports.</source>
          <target state="translated">그들은 입력에서 최대 피코 초 해상도를 받아들이지 만, 파이썬이 지원하는 것이므로 마이크로 초로 자릅니다.</target>
        </trans-unit>
        <trans-unit id="c0b5078a8ac15f6ab3e6719883c692dcb73c6f84" translate="yes" xml:space="preserve">
          <source>They can also be registered as transforms as described in &lt;a href=&quot;#django.db.models.functions.Length&quot;&gt;&lt;code&gt;Length&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#django.db.models.functions.Length&quot;&gt; &lt;code&gt;Length&lt;/code&gt; 에&lt;/a&gt; 설명 된대로 변환으로 등록 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="20419018a63bab14428321e30852b03b16aa819f" translate="yes" xml:space="preserve">
          <source>They look like this:</source>
          <target state="translated">그들은 다음과 같이 보입니다 :</target>
        </trans-unit>
        <trans-unit id="3e540b9dcce638be785d22acaaa3cb69d64d7f98" translate="yes" xml:space="preserve">
          <source>They raise &lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; if their input is well formatted but isn&amp;rsquo;t a valid date or time.</source>
          <target state="translated">그들은 인상 &lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#ValueError&quot;&gt; &lt;code&gt;ValueError&lt;/code&gt; &lt;/a&gt; 자신의 입력이 잘 포맷 만 유효한 날짜 또는 시간이없는 경우.</target>
        </trans-unit>
        <trans-unit id="f99b17c2983d44a488dbdfbc23bea0d6e43b4481" translate="yes" xml:space="preserve">
          <source>They return &lt;code&gt;None&lt;/code&gt; if it isn&amp;rsquo;t well formatted at all.</source>
          <target state="translated">형식이 제대로 지정되지 않으면 &lt;code&gt;None&lt;/code&gt; 을 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="812ce3fd42e848fcc884d0bd799abc17f2609188" translate="yes" xml:space="preserve">
          <source>Things get more complicated if you use inheritance. Consider a subclass of &lt;code&gt;Blog&lt;/code&gt;:</source>
          <target state="translated">상속을 사용하면 상황이 더 복잡해집니다. &lt;code&gt;Blog&lt;/code&gt; 의 하위 클래스를 고려하십시오 .</target>
        </trans-unit>
        <trans-unit id="e9e9609ac9fe3987564a8635909eb477eb1365e8" translate="yes" xml:space="preserve">
          <source>Things to note here:</source>
          <target state="translated">여기서주의 할 사항 :</target>
        </trans-unit>
        <trans-unit id="930b1d9337c15998012417e2df8566cd18d5617d" translate="yes" xml:space="preserve">
          <source>Think back to our earlier example of using &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#View&quot;&gt;&lt;code&gt;View&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin&quot;&gt;&lt;code&gt;SingleObjectMixin&lt;/code&gt;&lt;/a&gt; together. We were recording a user&amp;rsquo;s interest in a particular author; say now that we want to let them leave a message saying why they like them. Again, let&amp;rsquo;s assume we&amp;rsquo;re not going to store this in a relational database but instead in something more esoteric that we won&amp;rsquo;t worry about here.</source>
          <target state="translated">&lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#View&quot;&gt; &lt;code&gt;View&lt;/code&gt; &lt;/a&gt; 와 &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin&quot;&gt; &lt;code&gt;SingleObjectMixin&lt;/code&gt; 을&lt;/a&gt; 함께 사용하는 이전 예를 생각해보십시오 . 우리는 특정 저자에 대한 사용자의 관심을 기록하고있었습니다. 우리는 그들이 왜 그들이 마음에 드는지 알려주는 메시지를 남기고 싶다고 말합니다. 다시, 우리는 이것을 관계형 데이터베이스에 저장하지 않고 대신 우리가 걱정하지 않는 좀 더 난해한 것으로 가정합시다.</target>
        </trans-unit>
        <trans-unit id="bba49c4526ad803643cfdb6cdd00de3926c6b873" translate="yes" xml:space="preserve">
          <source>Think of &lt;em&gt;safe&lt;/em&gt; as shorthand for &lt;em&gt;safe from further escaping&lt;/em&gt; or &lt;em&gt;can be safely interpreted as HTML&lt;/em&gt;. In this example, if &lt;code&gt;data&lt;/code&gt; contains &lt;code&gt;'&amp;lt;b&amp;gt;'&lt;/code&gt;, the output will be:</source>
          <target state="translated">생각 &lt;em&gt;안전&lt;/em&gt; 을위한 속기로 &lt;em&gt;더 이스케이프에서 안전&lt;/em&gt; 또는 &lt;em&gt;안전 HTML로 해석 될 수있다&lt;/em&gt; . 이 예에서 &lt;code&gt;data&lt;/code&gt; 에 &lt;code&gt;'&amp;lt;b&amp;gt;'&lt;/code&gt; 가 포함 된 경우 출력은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="d8d91b13aeb4abe02cad0ef9d448b4827bd79ce1" translate="yes" xml:space="preserve">
          <source>Third party applications might use deprecated APIs in order to support multiple versions of Django, so deprecation warnings in packages you&amp;rsquo;ve installed don&amp;rsquo;t necessarily indicate a problem. If a package doesn&amp;rsquo;t support the latest version of Django, consider raising an issue or sending a pull request for it.</source>
          <target state="translated">타사 응용 프로그램은 여러 버전의 Django를 지원하기 위해 더 이상 사용되지 않는 API를 사용할 수 있으므로 설치 한 패키지에서 더 이상 사용되지 않는 경고가 반드시 문제를 나타내는 것은 아닙니다. 패키지가 최신 버전의 Django를 지원하지 않는 경우 문제를 제기하거나 풀 요청을 보내십시오.</target>
        </trans-unit>
        <trans-unit id="8b75a3978ba07f56f892b6dad49ca9e655751f2a" translate="yes" xml:space="preserve">
          <source>Third, you can manually render each field:</source>
          <target state="translated">셋째, 각 필드를 수동으로 렌더링 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d93da6425ac5f23d9de76af9ecc6290d48890219" translate="yes" xml:space="preserve">
          <source>Third-party apps or those developing against MyISAM will need to set this; in general, however, you should be developing your own projects against a transactional database and be using &lt;code&gt;TestCase&lt;/code&gt; for most tests, and thus not need this setting.</source>
          <target state="translated">타사 앱 또는 MyISAM에 대해 개발중인 앱은이를 설정해야합니다. 그러나 일반적으로 트랜잭션 데이터베이스에 대해 자체 프로젝트를 개발하고 대부분의 테스트에 &lt;code&gt;TestCase&lt;/code&gt; 를 사용해야 하므로이 설정이 필요하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="1dca3ce07c7428024eef7d0ba36844ac85942016" translate="yes" xml:space="preserve">
          <source>Third-party backends can register their functions in the top level &lt;code&gt;__init__.py&lt;/code&gt; file of the backend package or in a top level &lt;code&gt;expressions.py&lt;/code&gt; file (or package) that is imported from the top level &lt;code&gt;__init__.py&lt;/code&gt;.</source>
          <target state="translated">타사 백엔드는 백엔드 패키지의 최상위 &lt;code&gt;__init__.py&lt;/code&gt; 파일 또는 최상위 &lt;code&gt;__init__.py&lt;/code&gt; 에서 가져온 최상위 &lt;code&gt;expressions.py&lt;/code&gt; 파일 (또는 패키지)에 해당 기능을 등록 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="0d3aea5a656aa75d4bc142a8ef3190878893a157" translate="yes" xml:space="preserve">
          <source>Third-party panels are also available for the toolbar, that can (for example) report on cache performance and template rendering times.</source>
          <target state="translated">캐시 성능 및 템플릿 렌더링 시간을보고 할 수있는 타사 패널도 툴바에 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="871d2b6d2f4209a2045939948478b5ad9e16f6a2" translate="yes" xml:space="preserve">
          <source>Third-party services</source>
          <target state="translated">타사 서비스</target>
        </trans-unit>
        <trans-unit id="1a94a06a870c70d54a7306092125524ffc4a985d" translate="yes" xml:space="preserve">
          <source>Thirty-two bit floating point</source>
          <target state="translated">32 비트 부동 소수점</target>
        </trans-unit>
        <trans-unit id="d02dbccd28b8a4110858dadd40a75564131c151d" translate="yes" xml:space="preserve">
          <source>Thirty-two bit signed integer</source>
          <target state="translated">32 비트 부호있는 정수</target>
        </trans-unit>
        <trans-unit id="46fdc4562bad3c71149e5b74089c85fdee4e2144" translate="yes" xml:space="preserve">
          <source>Thirty-two bit unsigned integer</source>
          <target state="translated">32 비트 부호없는 정수</target>
        </trans-unit>
        <trans-unit id="8659901c6ab113559070b8efb3e88975313d14f5" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;fields&lt;/code&gt; option should not be confused with the &lt;code&gt;fields&lt;/code&gt; dictionary key that is within the &lt;a href=&quot;#django.contrib.admin.ModelAdmin.fieldsets&quot;&gt;&lt;code&gt;fieldsets&lt;/code&gt;&lt;/a&gt; option, as described in the next section.</source>
          <target state="translated">이 &lt;code&gt;fields&lt;/code&gt; 옵션과 혼동해서는 안 &lt;code&gt;fields&lt;/code&gt; 내에 사전 키 &lt;a href=&quot;#django.contrib.admin.ModelAdmin.fieldsets&quot;&gt; &lt;code&gt;fieldsets&lt;/code&gt; &lt;/a&gt; 다음 섹션에 설명 된대로 옵션을 선택합니다.</target>
        </trans-unit>
        <trans-unit id="efe668f9708459c16592061670a3ccc9192de15e" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;save()&lt;/code&gt; method accepts an optional &lt;code&gt;commit&lt;/code&gt; keyword argument, which accepts either &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt;. If you call &lt;code&gt;save()&lt;/code&gt; with &lt;code&gt;commit=False&lt;/code&gt;, then it will return an object that hasn&amp;rsquo;t yet been saved to the database. In this case, it&amp;rsquo;s up to you to call &lt;code&gt;save()&lt;/code&gt; on the resulting model instance. This is useful if you want to do custom processing on the object before saving it, or if you want to use one of the specialized &lt;a href=&quot;../../ref/models/instances#ref-models-force-insert&quot;&gt;model saving options&lt;/a&gt;. &lt;code&gt;commit&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt; by default.</source>
          <target state="translated">이 &lt;code&gt;save()&lt;/code&gt; 메소드는 선택적 &lt;code&gt;commit&lt;/code&gt; 키워드 인수를 허용하며, &lt;code&gt;True&lt;/code&gt; 또는 &lt;code&gt;False&lt;/code&gt; 를 허용합니다 . 당신이 호출하면 &lt;code&gt;save()&lt;/code&gt; 과 &lt;code&gt;commit=False&lt;/code&gt; , 그것은 아직 데이터베이스에 저장되지 않은 객체를 반환합니다. 이 경우 결과 모델 인스턴스에서 &lt;code&gt;save()&lt;/code&gt; 를 호출 해야 합니다. 객체를 저장하기 전에 사용자 정의 처리를 수행하거나 특수 &lt;a href=&quot;../../ref/models/instances#ref-models-force-insert&quot;&gt;모델 저장 옵션&lt;/a&gt; 중 하나를 사용하려는 경우에 유용합니다 . &lt;code&gt;commit&lt;/code&gt; 은 기본적으로 &lt;code&gt;True&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="9842d1e5ae6a88c77cc910626a2d1e24fafb1ee3" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;{% url ... as var %}&lt;/code&gt; syntax will &lt;em&gt;not&lt;/em&gt; cause an error if the view is missing. In practice you&amp;rsquo;ll use this to link to views that are optional:</source>
          <target state="translated">이 &lt;code&gt;{% url ... as var %}&lt;/code&gt; 구문은 뷰가없는 경우 오류를 발생 &lt;em&gt;시키지 않습니다&lt;/em&gt; . 실제로이 옵션을 사용하여 선택적인보기에 연결합니다.</target>
        </trans-unit>
        <trans-unit id="5d144afb4955208a7ac9e7e6727e05123ca3e550" translate="yes" xml:space="preserve">
          <source>This SQL is backend independent, so we don&amp;rsquo;t need to worry about different databases.</source>
          <target state="translated">이 SQL은 백엔드 독립적이므로 다른 데이터베이스에 대해 걱정할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="922c1ab6c52735016ea62da5aea0d9fb8c82e767" translate="yes" xml:space="preserve">
          <source>This abstract class cannot be rendered, but provides the basic attribute &lt;a href=&quot;#django.forms.Widget.attrs&quot;&gt;&lt;code&gt;attrs&lt;/code&gt;&lt;/a&gt;. You may also implement or override the &lt;a href=&quot;#django.forms.Widget.render&quot;&gt;&lt;code&gt;render()&lt;/code&gt;&lt;/a&gt; method on custom widgets.</source>
          <target state="translated">이 추상 클래스는 렌더링 할 수 없지만 기본 속성 &lt;a href=&quot;#django.forms.Widget.attrs&quot;&gt; &lt;code&gt;attrs&lt;/code&gt; 를&lt;/a&gt; 제공합니다 . 사용자 정의 위젯 에서 &lt;a href=&quot;#django.forms.Widget.render&quot;&gt; &lt;code&gt;render()&lt;/code&gt; &lt;/a&gt; 메소드를 구현하거나 대체 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="f98df779cf3edb8e16509ad8baf14ab0f117e89b" translate="yes" xml:space="preserve">
          <source>This accomplishes roughly the same thing as the previous example, except:</source>
          <target state="translated">이것은 다음을 제외하고 앞의 예제와 거의 같은 결과를 얻습니다.</target>
        </trans-unit>
        <trans-unit id="10ffbb81642bfce2b4f307086e6a4bafb907bede" translate="yes" xml:space="preserve">
          <source>This accomplishes several things quite nicely:</source>
          <target state="translated">이것은 몇 가지 일을 아주 훌륭하게 달성합니다.</target>
        </trans-unit>
        <trans-unit id="e9bdec834f18a99a8cb91f0165d3cd8461872b02" translate="yes" xml:space="preserve">
          <source>This address is used only for error messages. It is &lt;em&gt;not&lt;/em&gt; the address that regular email messages sent with &lt;a href=&quot;../topics/email#django.core.mail.send_mail&quot;&gt;&lt;code&gt;send_mail()&lt;/code&gt;&lt;/a&gt; come from; for that, see &lt;a href=&quot;#std:setting-DEFAULT_FROM_EMAIL&quot;&gt;&lt;code&gt;DEFAULT_FROM_EMAIL&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 주소는 오류 메시지에만 사용됩니다. &lt;a href=&quot;../topics/email#django.core.mail.send_mail&quot;&gt; &lt;code&gt;send_mail()&lt;/code&gt; &lt;/a&gt; 보낸 일반 전자 메일 메시지의 주소 가 &lt;em&gt;아닙니다&lt;/em&gt; . 이에 대해서는 &lt;a href=&quot;#std:setting-DEFAULT_FROM_EMAIL&quot;&gt; &lt;code&gt;DEFAULT_FROM_EMAIL&lt;/code&gt; 을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="9c7bcc51ac61f5d7e80fb62bd7fb7c62e0537ec0" translate="yes" xml:space="preserve">
          <source>This adds an additional field to each form. This new field is named &lt;code&gt;ORDER&lt;/code&gt; and is an &lt;code&gt;forms.IntegerField&lt;/code&gt;. For the forms that came from the initial data it automatically assigned them a numeric value. Let&amp;rsquo;s look at what will happen when the user changes these values:</source>
          <target state="translated">각 양식에 추가 필드가 추가됩니다. 이 새 필드의 이름은 &lt;code&gt;ORDER&lt;/code&gt; 이며 &lt;code&gt;forms.IntegerField&lt;/code&gt; 입니다. 초기 데이터에서 온 양식의 경우 자동으로 숫자 값이 지정되었습니다. 사용자가이 값을 변경할 때 어떤 일이 발생하는지 봅시다 :</target>
        </trans-unit>
        <trans-unit id="d3031abb1ae9e3ebcfbb4e7492ad3a9557e276f8" translate="yes" xml:space="preserve">
          <source>This adds the extra method from the &lt;code&gt;EnhancedArticleForm&lt;/code&gt; and modifies the original &lt;code&gt;ArticleForm.Meta&lt;/code&gt; to remove one field.</source>
          <target state="translated">그러면 &lt;code&gt;EnhancedArticleForm&lt;/code&gt; 에서 추가 메서드가 추가 되고 원래 &lt;code&gt;ArticleForm.Meta&lt;/code&gt; 가 필드 하나를 제거하도록 수정 됩니다.</target>
        </trans-unit>
        <trans-unit id="7da81e3de260768907f3e0d72ace994d16203d0d" translate="yes" xml:space="preserve">
          <source>This advanced tutorial begins where &lt;a href=&quot;tutorial07&quot;&gt;Tutorial 7&lt;/a&gt; left off. We&amp;rsquo;ll be turning our Web-poll into a standalone Python package you can reuse in new projects and share with other people.</source>
          <target state="translated">이 고급 튜토리얼은 &lt;a href=&quot;tutorial07&quot;&gt;Tutorial 7&lt;/a&gt; 이 중단 된 곳에서 시작 합니다. 웹 설문 조사를 새로운 프로젝트에서 재사용하고 다른 사람들과 공유 할 수있는 독립형 Python 패키지로 바꿀 것입니다.</target>
        </trans-unit>
        <trans-unit id="d13069d968d715ba29f0d3d45e284548cff5c148" translate="yes" xml:space="preserve">
          <source>This aggregate produces a query with the SQL 2003 &lt;code&gt;FILTER WHERE&lt;/code&gt; syntax on databases that support it:</source>
          <target state="translated">이 집계는이 를 지원하는 데이터베이스 에서 SQL 2003 &lt;code&gt;FILTER WHERE&lt;/code&gt; 구문을 사용하여 쿼리를 생성 합니다.</target>
        </trans-unit>
        <trans-unit id="206af2ca091b9ba2d0eaea6323f193f1d5866b4d" translate="yes" xml:space="preserve">
          <source>This allows interacting with third-party databases that store datetimes in local time rather than UTC. To avoid issues around DST changes, you shouldn&amp;rsquo;t set this option for databases managed by Django.</source>
          <target state="translated">따라서 날짜 시간을 UTC가 아닌 현지 시간으로 저장하는 타사 데이터베이스와 상호 작용할 수 있습니다. DST 변경과 관련된 문제를 피하려면 Django에서 관리하는 데이터베이스에이 옵션을 설정하지 않아야합니다.</target>
        </trans-unit>
        <trans-unit id="cf5da3cb1c1aab6b7a871362c558a51b462f6df1" translate="yes" xml:space="preserve">
          <source>This allows prefetching the same relation multiple times with a different &lt;code&gt;QuerySet&lt;/code&gt;; for instance:</source>
          <target state="translated">이를 통해 다른 &lt;code&gt;QuerySet&lt;/code&gt; 을 사용하여 동일한 관계를 여러 번 프리 페치 할 수 있습니다 . 예를 들어 :</target>
        </trans-unit>
        <trans-unit id="d52f43f4b912f7688766d81544389903b845d369" translate="yes" xml:space="preserve">
          <source>This allows you to access the final page of results without first having to determine how many pages there are.</source>
          <target state="translated">이를 통해 먼저 페이지 수를 결정하지 않고도 결과의 최종 페이지에 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3b7b3f159ed03ed9cb4b03f229125786e7044007" translate="yes" xml:space="preserve">
          <source>This allows you to check if a movie is rated better or worse than its peers.</source>
          <target state="translated">이를 통해 영화가 다른 영화보다 나은지 또는 나쁜지 확인할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1d7c9808cea39c5e99d97b770f890c92544ba75f" translate="yes" xml:space="preserve">
          <source>This also addresses a man-in-the-middle attack that&amp;rsquo;s possible under HTTPS when using a session independent secret, due to the fact that HTTP &lt;code&gt;Set-Cookie&lt;/code&gt; headers are (unfortunately) accepted by clients even when they are talking to a site under HTTPS. (Referer checking is not done for HTTP requests because the presence of the &lt;code&gt;Referer&lt;/code&gt; header isn&amp;rsquo;t reliable enough under HTTP.)</source>
          <target state="translated">또한 클라이언트가 HTTPS를 통해 사이트와 대화 할 때 HTTP &lt;code&gt;Set-Cookie&lt;/code&gt; 헤더를 (안타깝게도) 받아들이 기 때문에 세션 독립적 비밀을 사용할 때 HTTPS에서 발생할 수있는 MITM (Man-in-the-Middle) 공격을 해결합니다. . HTTP에서 &lt;code&gt;Referer&lt;/code&gt; 헤더 의 존재가 충분히 신뢰할 수 없기 때문에 HTTP 요청에 대한 참조 검사가 수행 되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="00873cef11eb7a0ee1b86c6a650fd2687c63823c" translate="yes" xml:space="preserve">
          <source>This also allows the result to be used in &lt;code&gt;ORDER BY&lt;/code&gt; and &lt;code&gt;DISTINCT ON&lt;/code&gt; clauses. For example &lt;code&gt;Experiment.objects.order_by('change__abs')&lt;/code&gt; generates:</source>
          <target state="translated">또한 &lt;code&gt;ORDER BY&lt;/code&gt; 및 &lt;code&gt;DISTINCT ON&lt;/code&gt; 절 에서 결과를 사용할 수 있습니다 . 예를 들어 &lt;code&gt;Experiment.objects.order_by('change__abs')&lt;/code&gt; 는 다음을 생성합니다.</target>
        </trans-unit>
        <trans-unit id="6aeeef97b1b4a728464e53eb13776742e51a25fd" translate="yes" xml:space="preserve">
          <source>This also applies to customized implementations of &lt;a href=&quot;../../ref/applications#django.apps.AppConfig.ready&quot;&gt;&lt;code&gt;ready()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이는 &lt;a href=&quot;../../ref/applications#django.apps.AppConfig.ready&quot;&gt; &lt;code&gt;ready()&lt;/code&gt; &lt;/a&gt; 의 사용자 정의 된 구현에도 적용됩니다 .</target>
        </trans-unit>
        <trans-unit id="7bf48f47451354e6af2ba41a76704fa04394723f" translate="yes" xml:space="preserve">
          <source>This also avoids a redirect loop when &lt;a href=&quot;#django.contrib.auth.views.LoginView&quot;&gt;&lt;code&gt;LoginView&lt;/code&gt;&lt;/a&gt;&amp;rsquo;s &lt;code&gt;redirect_authenticated_user=True&lt;/code&gt; and the logged-in user doesn&amp;rsquo;t have all of the required permissions.</source>
          <target state="translated">또한 &lt;a href=&quot;#django.contrib.auth.views.LoginView&quot;&gt; &lt;code&gt;LoginView&lt;/code&gt; &lt;/a&gt; 의 &lt;code&gt;redirect_authenticated_user=True&lt;/code&gt; 이고 로그인 한 사용자에게 필요한 권한이 없을 때 리디렉션 루프를 피합니다 .</target>
        </trans-unit>
        <trans-unit id="19589a226533ed4866b513b51865b12f1780fca3" translate="yes" xml:space="preserve">
          <source>This also works in templates. See &lt;a href=&quot;#translator-comments-in-templates&quot;&gt;Comments for translators in templates&lt;/a&gt; for more details.</source>
          <target state="translated">템플릿에서도 작동합니다. 자세한 내용 &lt;a href=&quot;#translator-comments-in-templates&quot;&gt;은 템플릿의 번역사에 대한 주석을&lt;/a&gt; 참조 하십시오.</target>
        </trans-unit>
        <trans-unit id="e1da31da942f373ac6ec4bdd2bc6cae4188e32b5" translate="yes" xml:space="preserve">
          <source>This also works with full URLs:</source>
          <target state="translated">이것은 전체 URL에서도 작동합니다.</target>
        </trans-unit>
        <trans-unit id="24e33c6072af3df1d8472934e3eccf57593568a0" translate="yes" xml:space="preserve">
          <source>This approach applies the decorator on a per-instance basis. If you want every instance of a view to be decorated, you need to take a different approach.</source>
          <target state="translated">이 방법은 데코레이터를 인스턴스별로 적용합니다. 뷰의 모든 인스턴스를 장식하려면 다른 접근 방식을 취해야합니다.</target>
        </trans-unit>
        <trans-unit id="d687e8c265fa6bf427f4459613cfe07a61b283b4" translate="yes" xml:space="preserve">
          <source>This approach can also be used with any other generic class-based views or your own class-based views inheriting directly from &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#View&quot;&gt;&lt;code&gt;View&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#TemplateView&quot;&gt;&lt;code&gt;TemplateView&lt;/code&gt;&lt;/a&gt;, as it keeps the different views as separate as possible.</source>
          <target state="translated">이 방법은 다른 일반 클래스 기반 뷰 또는 &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#View&quot;&gt; &lt;code&gt;View&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#TemplateView&quot;&gt; &lt;code&gt;TemplateView&lt;/code&gt; &lt;/a&gt; 에서 직접 상속되는 고유 한 클래스 기반 뷰 와 함께 사용할 수 있습니다. 가능한 다른 뷰를 유지하기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="f0e00c66184302704d0a20e9ec80ab1488466a5a" translate="yes" xml:space="preserve">
          <source>This approach maximizes code reuse and helps to add items to shared content areas, such as section-wide navigation.</source>
          <target state="translated">이 접근 방식은 코드 재사용을 최대화하고 섹션 전체 탐색과 같은 공유 컨텐츠 영역에 항목을 추가하는 데 도움이됩니다.</target>
        </trans-unit>
        <trans-unit id="f78d35f70778bc7b3d5b29b21ace0bf63af05935" translate="yes" xml:space="preserve">
          <source>This assumes we&amp;rsquo;ve imported a &lt;code&gt;MyFormField&lt;/code&gt; field class (which has its own default widget). This document doesn&amp;rsquo;t cover the details of writing custom form fields.</source>
          <target state="translated">이는 &lt;code&gt;MyFormField&lt;/code&gt; 필드 클래스 (자체 기본 위젯이 있음)를 가져 왔다고 가정합니다 . 이 문서는 사용자 정의 양식 필드 작성에 대한 세부 사항을 다루지 않습니다.</target>
        </trans-unit>
        <trans-unit id="133633bb73f92c1c551154f40e4eac91f1a7095f" translate="yes" xml:space="preserve">
          <source>This assumes you have a top-level project package named &lt;code&gt;mysite&lt;/code&gt;, and within it a module &lt;code&gt;mysite/wsgi.py&lt;/code&gt; that contains a WSGI &lt;code&gt;application&lt;/code&gt; object. This is the layout you&amp;rsquo;ll have if you ran &lt;code&gt;django-admin
startproject mysite&lt;/code&gt; (using your own project name in place of &lt;code&gt;mysite&lt;/code&gt;) with a recent version of Django. If this file doesn&amp;rsquo;t exist, you&amp;rsquo;ll need to create it. See the &lt;a href=&quot;index&quot;&gt;How to deploy with WSGI&lt;/a&gt; documentation for the default contents you should put in this file and what else you can add to it.</source>
          <target state="translated">여기에는 &lt;code&gt;mysite&lt;/code&gt; 라는 최상위 프로젝트 패키지가 있고 그 안에 WSGI &lt;code&gt;application&lt;/code&gt; 객체 가 포함 된 &lt;code&gt;mysite/wsgi.py&lt;/code&gt; 모듈 이 있다고 가정 합니다. &lt;code&gt;django-admin startproject mysite&lt;/code&gt; ( &lt;code&gt;mysite&lt;/code&gt; 대신 자신의 프로젝트 이름 사용 )를 최신 버전의 Django로 실행하면 레이아웃이 표시됩니다 . 이 파일이 존재하지 않으면 파일을 만들어야합니다. 이 파일에 넣을 기본 내용과 추가 할 수있는 내용 &lt;a href=&quot;index&quot;&gt;은 WSGI를 사용하여 배포&lt;/a&gt; 하는 방법 설명서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="06c21fcff424a74ca6683f7bcc828faf356d8672" translate="yes" xml:space="preserve">
          <source>This attribute allows relabeling an application when two applications have conflicting labels. It defaults to the last component of &lt;code&gt;name&lt;/code&gt;. It should be a valid Python identifier.</source>
          <target state="translated">이 속성을 사용하면 두 응용 프로그램에 레이블이 충돌 할 때 응용 프로그램의 레이블을 다시 지정할 수 있습니다. 기본값은 &lt;code&gt;name&lt;/code&gt; 의 마지막 구성 요소입니다 . 유효한 Python 식별자 여야합니다.</target>
        </trans-unit>
        <trans-unit id="75a21f66b48bf69cd4e4b6b9434e01f825a785bc" translate="yes" xml:space="preserve">
          <source>This attribute can help mitigate &lt;a href=&quot;https://www.owasp.org/index.php/Top_10_2013-A4-Insecure_Direct_Object_References&quot;&gt;insecure direct object reference&lt;/a&gt; attacks. When applications allow access to individual objects by a sequential primary key, an attacker could brute-force guess all URLs; thereby obtaining a list of all objects in the application. If users with access to individual objects should be prevented from obtaining this list, setting &lt;code&gt;query_pk_and_slug&lt;/code&gt; to &lt;code&gt;True&lt;/code&gt; will help prevent the guessing of URLs as each URL will require two correct, non-sequential arguments. Using a unique slug may serve the same purpose, but this scheme allows you to have non-unique slugs.</source>
          <target state="translated">이 속성은 &lt;a href=&quot;https://www.owasp.org/index.php/Top_10_2013-A4-Insecure_Direct_Object_References&quot;&gt;안전하지 않은 직접 개체 참조&lt;/a&gt; 공격을 완화하는 데 도움이 될 수 있습니다 . 응용 프로그램에서 순차적 인 기본 키로 개별 개체에 액세스 할 수있게되면 공격자는 모든 URL을 무차별하게 추측 할 수 있습니다. 따라서 응용 프로그램의 모든 개체 목록을 얻습니다. 개별 객체에 대한 액세스 권한이있는 사용자가이 목록을 얻지 못하게하려면 &lt;code&gt;query_pk_and_slug&lt;/code&gt; 를 &lt;code&gt;True&lt;/code&gt; 로 설정 하면 각 URL에 두 개의 올바른 비 순차 인수가 필요하므로 URL 추측을 방지 할 수 있습니다. 고유 한 슬러그를 사용하는 것도 같은 목적으로 사용될 수 있지만이 체계를 사용하면 고유하지 않은 슬러그를 가질 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="aa4f7df13325a65588eb9ae75ac9a9735167745c" translate="yes" xml:space="preserve">
          <source>This attribute defaults to &lt;code&gt;label.title()&lt;/code&gt;.</source>
          <target state="translated">이 속성의 기본값은 &lt;code&gt;label.title()&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="ee0874d0745a4ddee1e795c4745a2942590b506a" translate="yes" xml:space="preserve">
          <source>This attribute defines the maximum number of URLs included on each page of the sitemap. Its value should not exceed the default value of &lt;code&gt;50000&lt;/code&gt;, which is the upper limit allowed in the &lt;a href=&quot;https://www.sitemaps.org/protocol.html#index&quot;&gt;Sitemaps protocol&lt;/a&gt;.</source>
          <target state="translated">이 속성은 사이트 맵의 각 페이지에 포함 된 최대 URL 수를 정의합니다. &lt;a href=&quot;https://www.sitemaps.org/protocol.html#index&quot;&gt;Sitemaps 프로토콜&lt;/a&gt; 에서 허용되는 상한 인 기본값 &lt;code&gt;50000&lt;/code&gt; 을 초과하지 않아야합니다 .</target>
        </trans-unit>
        <trans-unit id="f1c3a1341b25ff9392387488411d79f758fbca39" translate="yes" xml:space="preserve">
          <source>This attribute defines the protocol (&lt;code&gt;'http'&lt;/code&gt; or &lt;code&gt;'https'&lt;/code&gt;) of the URLs in the sitemap. If it isn&amp;rsquo;t set, the protocol with which the sitemap was requested is used. If the sitemap is built outside the context of a request, the default is &lt;code&gt;'http'&lt;/code&gt;.</source>
          <target state="translated">이 속성은 사이트 맵에서 URL 의 프로토콜 ( &lt;code&gt;'http'&lt;/code&gt; 또는 &lt;code&gt;'https'&lt;/code&gt; )을 정의합니다 . 설정하지 않으면 사이트 맵이 요청 된 프로토콜이 사용됩니다. 사이트 맵이 요청 컨텍스트 외부에 구축 된 경우 기본값은 &lt;code&gt;'http'&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="c76de190da8afddcf95e27b5cceed537aaff925c" translate="yes" xml:space="preserve">
          <source>This attribute defines which application the configuration applies to. It must be set in all &lt;a href=&quot;#django.apps.AppConfig&quot;&gt;&lt;code&gt;AppConfig&lt;/code&gt;&lt;/a&gt; subclasses.</source>
          <target state="translated">이 속성은 구성이 적용되는 응용 프로그램을 정의합니다. 모든 &lt;a href=&quot;#django.apps.AppConfig&quot;&gt; &lt;code&gt;AppConfig&lt;/code&gt; &lt;/a&gt; 서브 클래스 에서 설정해야합니다 .</target>
        </trans-unit>
        <trans-unit id="55be929162f6a2e8a201eb26590ef69caca53b20" translate="yes" xml:space="preserve">
          <source>This attribute exists so middleware can treat streaming responses differently from regular responses.</source>
          <target state="translated">이 속성이 존재하므로 미들웨어가 스트리밍 응답을 일반 응답과 다르게 처리 할 수 ​​있습니다.</target>
        </trans-unit>
        <trans-unit id="5714987b0856943bcc55149403366d7e96cd4e04" translate="yes" xml:space="preserve">
          <source>This attribute is &lt;code&gt;True&lt;/code&gt; if the form field is a hidden field and &lt;code&gt;False&lt;/code&gt; otherwise. It&amp;rsquo;s not particularly useful as a template variable, but could be useful in conditional tests such as:</source>
          <target state="translated">양식 필드가 숨겨진 필드이면 이 속성은 &lt;code&gt;True&lt;/code&gt; 이고, 그렇지 않으면 &lt;code&gt;False&lt;/code&gt; 입니다. 템플릿 변수로는 특별히 유용하지는 않지만 다음과 같은 조건부 테스트에는 유용 ​​할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8172e55f20d4414ca9c1b06c97146615eed52b98" translate="yes" xml:space="preserve">
          <source>This attribute is a private API. It may be changed or removed without a deprecation period in the future, for instance to accommodate changes in application loading.</source>
          <target state="translated">이 속성은 개인용 API입니다. 추후 지원 중단 기간없이 변경되거나 제거 될 수 있습니다 (예 : 애플리케이션로드의 변경 사항을 수용하기 위해).</target>
        </trans-unit>
        <trans-unit id="a9169aa322aae2d7cfd246187c386aa06891f660" translate="yes" xml:space="preserve">
          <source>This attribute is deprecated in favor of &lt;a href=&quot;#django.test.SimpleTestCase.databases&quot;&gt;&lt;code&gt;databases&lt;/code&gt;&lt;/a&gt;. The previous behavior of &lt;code&gt;allow_database_queries = True&lt;/code&gt; can be achieved by setting &lt;code&gt;databases = '__all__'&lt;/code&gt;.</source>
          <target state="translated">이 속성은 &lt;a href=&quot;#django.test.SimpleTestCase.databases&quot;&gt; &lt;code&gt;databases&lt;/code&gt; &lt;/a&gt; 를 위해 더 이상 사용되지 않습니다 . &lt;code&gt;allow_database_queries = True&lt;/code&gt; 의 이전 동작은 &lt;code&gt;databases = '__all__'&lt;/code&gt; 을 설정하여 얻을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="619c6ed17fa7bb68653f77a5bc9d27df2912a08e" translate="yes" xml:space="preserve">
          <source>This attribute is deprecated in favor of &lt;a href=&quot;#django.test.TestCase.databases&quot;&gt;&lt;code&gt;databases&lt;/code&gt;&lt;/a&gt;. The previous behavior of &lt;code&gt;multi_db = True&lt;/code&gt; can be achieved by setting &lt;code&gt;databases = '__all__'&lt;/code&gt;.</source>
          <target state="translated">이 속성은 &lt;a href=&quot;#django.test.TestCase.databases&quot;&gt; &lt;code&gt;databases&lt;/code&gt; &lt;/a&gt; 를 위해 더 이상 사용되지 않습니다 . &lt;code&gt;multi_db = True&lt;/code&gt; 의 이전 동작은 &lt;code&gt;databases = '__all__'&lt;/code&gt; 을 설정하여 얻을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="763e75d601e33877b4ffa2fe89118b4a3c1ee9d4" translate="yes" xml:space="preserve">
          <source>This attribute is deprecated in favor of &lt;a href=&quot;#django.test.TransactionTestCase.databases&quot;&gt;&lt;code&gt;databases&lt;/code&gt;&lt;/a&gt;. The previous behavior of &lt;code&gt;multi_db = True&lt;/code&gt; can be achieved by setting &lt;code&gt;databases = '__all__'&lt;/code&gt;.</source>
          <target state="translated">이 속성은 &lt;a href=&quot;#django.test.TransactionTestCase.databases&quot;&gt; &lt;code&gt;databases&lt;/code&gt; &lt;/a&gt; 를 위해 더 이상 사용되지 않습니다 . &lt;code&gt;multi_db = True&lt;/code&gt; 의 이전 동작은 &lt;code&gt;databases = '__all__'&lt;/code&gt; 을 설정하여 얻을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a35531196a9c906e5948d5b5410422b615467c25" translate="yes" xml:space="preserve">
          <source>This attribute is only populated when using the &lt;a href=&quot;../templates#django.template.backends.django.DjangoTemplates&quot;&gt;&lt;code&gt;DjangoTemplates&lt;/code&gt;&lt;/a&gt; backend. If you&amp;rsquo;re using another template engine, &lt;a href=&quot;../../ref/template-response#django.template.response.SimpleTemplateResponse.context_data&quot;&gt;&lt;code&gt;context_data&lt;/code&gt;&lt;/a&gt; may be a suitable alternative on responses with that attribute.</source>
          <target state="translated">이 속성은 &lt;a href=&quot;../templates#django.template.backends.django.DjangoTemplates&quot;&gt; &lt;code&gt;DjangoTemplates&lt;/code&gt; &lt;/a&gt; 백엔드를 사용할 때만 채워집니다 . 다른 템플릿 엔진을 사용하는 경우 &lt;a href=&quot;../../ref/template-response#django.template.response.SimpleTemplateResponse.context_data&quot;&gt; &lt;code&gt;context_data&lt;/code&gt; &lt;/a&gt; 가 해당 속성의 응답에 적합한 대안 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="31a47c949ac10d7528a0b22337cbc721a18ee027" translate="yes" xml:space="preserve">
          <source>This attribute is only populated when using the &lt;a href=&quot;../templates#django.template.backends.django.DjangoTemplates&quot;&gt;&lt;code&gt;DjangoTemplates&lt;/code&gt;&lt;/a&gt; backend. If you&amp;rsquo;re using another template engine, &lt;a href=&quot;../../ref/template-response#django.template.response.SimpleTemplateResponse.template_name&quot;&gt;&lt;code&gt;template_name&lt;/code&gt;&lt;/a&gt; may be a suitable alternative if you only need the name of the template used for rendering.</source>
          <target state="translated">이 속성은 &lt;a href=&quot;../templates#django.template.backends.django.DjangoTemplates&quot;&gt; &lt;code&gt;DjangoTemplates&lt;/code&gt; &lt;/a&gt; 백엔드를 사용할 때만 채워집니다 . 다른 템플릿 엔진을 사용하는 경우 렌더링에 사용 된 템플릿 이름 만 필요한 경우 &lt;a href=&quot;../../ref/template-response#django.template.response.SimpleTemplateResponse.template_name&quot;&gt; &lt;code&gt;template_name&lt;/code&gt; &lt;/a&gt; 이 적합한 대안이 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="900148c9aba6296de33ca9d93c47b2c9fd36c35f" translate="yes" xml:space="preserve">
          <source>This attribute is optional when the form field does not have a &lt;code&gt;choices&lt;/code&gt; attribute. If it does, it will override anything you set here when the attribute is updated on the &lt;a href=&quot;fields#django.forms.Field&quot;&gt;&lt;code&gt;Field&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">양식 필드에 &lt;code&gt;choices&lt;/code&gt; 속성 이없는 경우이 속성은 선택 사항 입니다. 그렇다면 &lt;a href=&quot;fields#django.forms.Field&quot;&gt; &lt;code&gt;Field&lt;/code&gt; &lt;/a&gt; 에서 속성이 업데이트 될 때 여기에서 설정 한 내용보다 우선합니다 .</target>
        </trans-unit>
        <trans-unit id="e6a92d5a3cad8849cb049d0300bfe09d8eacbbec" translate="yes" xml:space="preserve">
          <source>This attribute is set to &lt;code&gt;'RANGE'&lt;/code&gt;.</source>
          <target state="translated">이 속성은 &lt;code&gt;'RANGE'&lt;/code&gt; 로 설정됩니다 .</target>
        </trans-unit>
        <trans-unit id="c96b8373ebfb00b12226b8f0961f85f767af9472" translate="yes" xml:space="preserve">
          <source>This attribute is set to &lt;code&gt;'ROWS'&lt;/code&gt;.</source>
          <target state="translated">이 속성은 &lt;code&gt;'ROWS'&lt;/code&gt; 로 설정되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="68c71e36611c7029eb9e2478676908cf67597eab" translate="yes" xml:space="preserve">
          <source>This attribute overrides the default display value for record&amp;rsquo;s fields that are empty (&lt;code&gt;None&lt;/code&gt;, empty string, etc.). The default value is &lt;code&gt;-&lt;/code&gt; (a dash). For example:</source>
          <target state="translated">이 속성은 비어있는 레코드 필드 ( &lt;code&gt;None&lt;/code&gt; , empty string 등) 의 기본 표시 값을 대체합니다 . 기본값은 &lt;code&gt;-&lt;/code&gt; (대시)입니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="05579e86ed56616eea578856de6798cce7600b0d" translate="yes" xml:space="preserve">
          <source>This attribute provides a way of setting the upload directory and file name, and can be set in two ways. In both cases, the value is passed to the &lt;a href=&quot;../files/storage#django.core.files.storage.Storage.save&quot;&gt;&lt;code&gt;Storage.save()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">이 속성은 업로드 디렉토리 및 파일 이름을 설정하는 방법을 제공하며 두 가지 방법으로 설정할 수 있습니다. 두 경우 모두 값이 &lt;a href=&quot;../files/storage#django.core.files.storage.Storage.save&quot;&gt; &lt;code&gt;Storage.save()&lt;/code&gt; &lt;/a&gt; 메서드로 전달됩니다 .</target>
        </trans-unit>
        <trans-unit id="566d7048787a5a24854cce8b4b80a894902bdd9a" translate="yes" xml:space="preserve">
          <source>This attribute, if given, should be a list of field names to exclude from the form.</source>
          <target state="translated">이 속성이 제공되는 경우 양식에서 제외 할 필드 이름 목록이어야합니다.</target>
        </trans-unit>
        <trans-unit id="3bbb2fc92806c7682b4471a24e9a4100dedbe9f1" translate="yes" xml:space="preserve">
          <source>This awkward split between &lt;code&gt;set_test_cookie()&lt;/code&gt; and &lt;code&gt;test_cookie_worked()&lt;/code&gt; is necessary due to the way cookies work. When you set a cookie, you can&amp;rsquo;t actually tell whether a browser accepted it until the browser&amp;rsquo;s next request.</source>
          <target state="translated">쿠키가 작동하는 방식으로 인해 &lt;code&gt;set_test_cookie()&lt;/code&gt; 와 &lt;code&gt;test_cookie_worked()&lt;/code&gt; 사이의 어색한 분할 이 필요합니다. 쿠키를 설정하면 브라우저의 다음 요청이있을 때까지 브라우저가 쿠키를 수락했는지 실제로 알 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="0b65dc8940436a8b84d184ec8e275a2b285d8c6e" translate="yes" xml:space="preserve">
          <source>This backend is not intended for use in production &amp;ndash; it is provided as a convenience that can be used during development and testing.</source>
          <target state="translated">이 백엔드는 프로덕션 환경에서 사용하기위한 것이 아니며 개발 및 테스트 중에 사용할 수있는 편의상 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="3fb7339fa58ae93cac9aaf3cdacf1e9bf9cb505d" translate="yes" xml:space="preserve">
          <source>This backend is not intended for use in production &amp;ndash; it is provided as a convenience that can be used during development.</source>
          <target state="translated">이 백엔드는 프로덕션에 사용하기위한 것이 아니라 개발 중에 사용할 수있는 편의상 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="addedba6b76950284da456dcba01e13b8276a85d" translate="yes" xml:space="preserve">
          <source>This behavior avoids writing to the session whenever possible. It should provide the best performance in the general case.</source>
          <target state="translated">이 동작은 가능할 때마다 세션에 쓰지 않습니다. 일반적인 경우 최상의 성능을 제공해야합니다.</target>
        </trans-unit>
        <trans-unit id="7841ab1fb0f284231f157a9b93d6b1b94188178e" translate="yes" xml:space="preserve">
          <source>This behavior is slightly different for the &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt; and &lt;code&gt;regroup&lt;/code&gt; template tags. If an invalid variable is provided to one of these template tags, the variable will be interpreted as &lt;code&gt;None&lt;/code&gt;. Filters are always applied to invalid variables within these template tags.</source>
          <target state="translated">이 동작은 &lt;code&gt;if&lt;/code&gt; , &lt;code&gt;for&lt;/code&gt; 및 &lt;code&gt;regroup&lt;/code&gt; 템플릿 태그 와 약간 다릅니다 . 이러한 템플릿 태그 중 하나에 유효하지 않은 변수가 제공되면 변수는 &lt;code&gt;None&lt;/code&gt; 으로 해석됩니다 . 필터는 항상 이러한 템플릿 태그 내의 유효하지 않은 변수에 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="347380881c1c2339c010a11f9f051ed8f317d8ba" translate="yes" xml:space="preserve">
          <source>This behavior is the same as that noted in the queryset documentation for &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.distinct&quot;&gt;&lt;code&gt;distinct()&lt;/code&gt;&lt;/a&gt; and the general rule is the same: normally you won&amp;rsquo;t want extra columns playing a part in the result, so clear out the ordering, or at least make sure it&amp;rsquo;s restricted only to those fields you also select in a &lt;code&gt;values()&lt;/code&gt; call.</source>
          <target state="translated">이 동작은 &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.distinct&quot;&gt; &lt;code&gt;distinct()&lt;/code&gt; &lt;/a&gt; 에 대한 쿼리 세트 문서에서 언급 한 것과 동일하며 일반적인 규칙은 동일합니다. 일반적으로 결과에서 일부 열을 추가로 재생하지 않으려면 순서를 지우거나 최소한 확인하십시오. &lt;code&gt;values()&lt;/code&gt; 호출 에서 선택한 필드로만 제한됩니다 .</target>
        </trans-unit>
        <trans-unit id="04a0acabf1ef45f6c1d49b8653b07e7a06729fc1" translate="yes" xml:space="preserve">
          <source>This behavior simplifies the field classes, because they don&amp;rsquo;t need to check for options that aren&amp;rsquo;t necessary. They pass all the options to the parent class and then don&amp;rsquo;t use them later on. It&amp;rsquo;s up to you whether you want your fields to be more strict about the options they select, or to use the more permissive behavior of the current fields.</source>
          <target state="translated">이 동작은 필요하지 않은 옵션을 확인할 필요가 없으므로 필드 클래스를 단순화합니다. 모든 옵션을 부모 클래스에 전달한 다음 나중에 사용하지 않습니다. 선택한 옵션에 대해 필드를보다 엄격하게하거나 현재 필드의보다 관용적 인 동작을 사용하는 것은 사용자의 몫입니다.</target>
        </trans-unit>
        <trans-unit id="bb6edd812140766857b46c243602f4d6a1cd2d9d" translate="yes" xml:space="preserve">
          <source>This can also be used to make modifications to existing forms, for example by specifying the widgets to be used for a given field:</source>
          <target state="translated">주어진 필드에 사용할 위젯을 지정하는 등 기존 양식을 수정하는 데 사용할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="c63231a8cdfb5276c52f332e27cd2946cbfcdbd9" translate="yes" xml:space="preserve">
          <source>This can also be useful if you need to access the items in a dictionary. For example, if your context contained a dictionary &lt;code&gt;data&lt;/code&gt;, the following would display the keys and values of the dictionary:</source>
          <target state="translated">사전의 항목에 액세스해야하는 경우에도 유용 할 수 있습니다. 예를 들어, 컨텍스트에 사전 &lt;code&gt;data&lt;/code&gt; 포함 된 경우 다음은 사전 의 키와 값을 표시합니다.</target>
        </trans-unit>
        <trans-unit id="7d016f636291136dfeb5abd4074eebd68fd49de0" translate="yes" xml:space="preserve">
          <source>This can be tedious if you have a lot of tables.</source>
          <target state="translated">테이블이 많으면 지루할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7ee89b1ad57f631eb321fbf3e4426015d7a334b8" translate="yes" xml:space="preserve">
          <source>This can be used to remove redundancy from URLconfs where a single pattern prefix is used repeatedly. For example, consider this URLconf:</source>
          <target state="translated">단일 패턴 접두사가 반복적으로 사용되는 URLconf에서 중복성을 제거하는 데 사용할 수 있습니다. 예를 들어 다음 URLconf를 고려하십시오.</target>
        </trans-unit>
        <trans-unit id="b02e5b309d77a7b0314c0fefa2e1d25b1143c12d" translate="yes" xml:space="preserve">
          <source>This can be useful for some test setups. It shouldn&amp;rsquo;t be used on a live site unless you want your web server (instead of Django) to generate &amp;ldquo;Internal Server Error&amp;rdquo; responses. In that case, make sure your server doesn&amp;rsquo;t show the stack trace or other sensitive information in the response.</source>
          <target state="translated">일부 테스트 설정에 유용 할 수 있습니다. Django 대신 웹 서버에서 &quot;내부 서버 오류&quot;응답을 생성하지 않으려면 라이브 사이트에서 사용해서는 안됩니다. 이 경우 서버가 응답에 스택 추적 또는 기타 민감한 정보를 표시하지 않아야합니다.</target>
        </trans-unit>
        <trans-unit id="874e969a34609686b932fd8f1a15b343012f6b80" translate="yes" xml:space="preserve">
          <source>This can be useful when you need to load serialized data into an existing database and you cannot guarantee that the serialized primary key value is not already in use, and do not need to ensure that deserialized objects retain the same primary keys.</source>
          <target state="translated">이것은 직렬화 된 데이터를 기존 데이터베이스에로드해야 할 때 유용하며 직렬화 된 기본 키 값이 아직 사용 중이 아니라는 것을 보장 할 수 없으며 역 직렬화 된 오브젝트가 동일한 기본 키를 보유 할 필요는 없습니다.</target>
        </trans-unit>
        <trans-unit id="d9151b0d19d973e0d94e9a559bd438a33ccd0a4e" translate="yes" xml:space="preserve">
          <source>This cascade behavior is customizable via the &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey.on_delete&quot;&gt;&lt;code&gt;on_delete&lt;/code&gt;&lt;/a&gt; argument to the &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;ForeignKey&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 계단식 동작은 &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey.on_delete&quot;&gt; &lt;code&gt;on_delete&lt;/code&gt; &lt;/a&gt; 인수를 통해 &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey&quot;&gt; &lt;code&gt;ForeignKey&lt;/code&gt; 로&lt;/a&gt; 사용자 정의 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="dddf7566bd95ed9d38732ed554426b5dc55e9487" translate="yes" xml:space="preserve">
          <source>This cascade behavior is customizable via the &lt;a href=&quot;fields#django.db.models.ForeignKey.on_delete&quot;&gt;&lt;code&gt;on_delete&lt;/code&gt;&lt;/a&gt; argument to the &lt;a href=&quot;fields#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;ForeignKey&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 계단식 동작은 &lt;a href=&quot;fields#django.db.models.ForeignKey.on_delete&quot;&gt; &lt;code&gt;on_delete&lt;/code&gt; &lt;/a&gt; 인수를 통해 &lt;a href=&quot;fields#django.db.models.ForeignKey&quot;&gt; &lt;code&gt;ForeignKey&lt;/code&gt; 로&lt;/a&gt; 사용자 정의 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a48788848f978bc3a57457fe320417511f8ca8ab" translate="yes" xml:space="preserve">
          <source>This change can&amp;rsquo;t be done automatically and requires manually fixing your schema, moving your data from the old user table, and possibly manually reapplying some migrations. See &lt;a href=&quot;https://code.djangoproject.com/ticket/25313&quot;&gt;#25313&lt;/a&gt; for an outline of the steps.</source>
          <target state="translated">이 변경은 자동으로 수행 할 수 없으며 스키마를 수동으로 수정하고 이전 사용자 테이블에서 데이터를 이동하고 일부 마이그레이션을 수동으로 다시 적용해야합니다. 단계의 개요는 &lt;a href=&quot;https://code.djangoproject.com/ticket/25313&quot;&gt;# 25313&lt;/a&gt; 을 참조 하십시오.</target>
        </trans-unit>
        <trans-unit id="94e22ebf245c2c79c7368490816e720a0729356b" translate="yes" xml:space="preserve">
          <source>This check is done by &lt;code&gt;CsrfViewMiddleware&lt;/code&gt;.</source>
          <target state="translated">이 검사는 &lt;code&gt;CsrfViewMiddleware&lt;/code&gt; 에 의해 수행됩니다 .</target>
        </trans-unit>
        <trans-unit id="b434322a2c0bc13a3658bbaeb5d5cc7064d646fd" translate="yes" xml:space="preserve">
          <source>This class allows for the representation of an OGR geometry type in any of several ways:</source>
          <target state="translated">이 클래스는 몇 가지 방법으로 OGR 지오메트리 유형을 표현할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b6657206ec70f04776a5d18c46e5a36a7d2845c0" translate="yes" xml:space="preserve">
          <source>This class allows outputting the WKT representation of a geometry. See the &lt;a href=&quot;#django.contrib.gis.geos.WKBWriter.outdim&quot;&gt;&lt;code&gt;WKBWriter.outdim&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#django.contrib.gis.geos.WKTWriter.trim&quot;&gt;&lt;code&gt;trim&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#django.contrib.gis.geos.WKTWriter.precision&quot;&gt;&lt;code&gt;precision&lt;/code&gt;&lt;/a&gt; attributes for details about the constructor arguments.</source>
          <target state="translated">이 클래스를 사용하면 형상의 WKT 표현을 출력 할 수 있습니다. 생성자 인수에 대한 자세한 내용은 &lt;a href=&quot;#django.contrib.gis.geos.WKBWriter.outdim&quot;&gt; &lt;code&gt;WKBWriter.outdim&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#django.contrib.gis.geos.WKTWriter.trim&quot;&gt; &lt;code&gt;trim&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#django.contrib.gis.geos.WKTWriter.precision&quot;&gt; &lt;code&gt;precision&lt;/code&gt; &lt;/a&gt; 속성을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="bb5b502d03a82bfc8a23cacf7a992259449fe1a8" translate="yes" xml:space="preserve">
          <source>This class can be used to query associated records for a given model instance like a normal model.</source>
          <target state="translated">이 클래스는 일반 모델과 같이 주어진 모델 인스턴스에 대한 관련 레코드를 쿼리하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2adbb7a0875b3b8ed230e2a68cd6f27b4fcdd4af" translate="yes" xml:space="preserve">
          <source>This class doesn&amp;rsquo;t follow the &lt;a href=&quot;#query-expression&quot;&gt;Query Expression API&lt;/a&gt; since it has &lt;code&gt;=&amp;lt;rhs&amp;gt;&lt;/code&gt; on its construction: lookups are always the end of a lookup expression.</source>
          <target state="translated">이 클래스 는 생성시 &lt;code&gt;=&amp;lt;rhs&amp;gt;&lt;/code&gt; 가 있기 때문에 &lt;a href=&quot;#query-expression&quot;&gt;Query Expression API를&lt;/a&gt; 따르지 않습니다 . 조회는 항상 조회 표현식의 끝입니다.</target>
        </trans-unit>
        <trans-unit id="f798b440b043bd3244259cc7c29c80441947c367" translate="yes" xml:space="preserve">
          <source>This class first uses &lt;code&gt;CookieStorage&lt;/code&gt;, and falls back to using &lt;code&gt;SessionStorage&lt;/code&gt; for the messages that could not fit in a single cookie. It also requires Django&amp;rsquo;s &lt;code&gt;contrib.sessions&lt;/code&gt; application.</source>
          <target state="translated">이 클래스는 먼저 &lt;code&gt;CookieStorage&lt;/code&gt; 를 사용 하고 단일 쿠키에 맞지 않는 메시지에 대해 &lt;code&gt;SessionStorage&lt;/code&gt; 를 사용 합니다. 또한 장고의 &lt;code&gt;contrib.sessions&lt;/code&gt; 응용 프로그램이 필요 합니다.</target>
        </trans-unit>
        <trans-unit id="f5ccf6511aa589356474def2a6a35b4f9e7e9553" translate="yes" xml:space="preserve">
          <source>This class follows the &lt;a href=&quot;#query-expression&quot;&gt;Query Expression API&lt;/a&gt;, which implies that you can use &lt;code&gt;&amp;lt;expression&amp;gt;__&amp;lt;transform1&amp;gt;__&amp;lt;transform2&amp;gt;&lt;/code&gt;. It&amp;rsquo;s a specialized &lt;a href=&quot;expressions#func-expressions&quot;&gt;Func() expression&lt;/a&gt; that only accepts one argument. It can also be used on the right hand side of a filter or directly as an annotation.</source>
          <target state="translated">이 클래스는 &lt;a href=&quot;#query-expression&quot;&gt;Query Expression API를&lt;/a&gt; 따르므로 &lt;code&gt;&amp;lt;expression&amp;gt;__&amp;lt;transform1&amp;gt;__&amp;lt;transform2&amp;gt;&lt;/code&gt; 를 사용할 수 있습니다 . 하나의 인수 만 허용 하는 특수한 &lt;a href=&quot;expressions#func-expressions&quot;&gt;Func () 표현식&lt;/a&gt; 입니다. 필터의 오른쪽이나 주석으로 직접 사용할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="dec0bf84ed853e6bc6d3fe5e000b2034e8412b14" translate="yes" xml:space="preserve">
          <source>This class lives at &lt;code&gt;django.template.Template&lt;/code&gt;. The constructor takes one argument &amp;mdash; the raw template code:</source>
          <target state="translated">이 수업은 &lt;code&gt;django.template.Template&lt;/code&gt; 에 있습니다. 생성자는 하나의 인수, 즉 원시 템플릿 코드를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="2ff48bb5d80db7ed334740551a7fe4d5cd696a5f" translate="yes" xml:space="preserve">
          <source>This class stores all messages inside of the request&amp;rsquo;s session. Therefore it requires Django&amp;rsquo;s &lt;code&gt;contrib.sessions&lt;/code&gt; application.</source>
          <target state="translated">이 클래스는 모든 메시지를 요청 세션 내에 저장합니다. 따라서 장고의 &lt;code&gt;contrib.sessions&lt;/code&gt; 애플리케이션 이 필요 합니다.</target>
        </trans-unit>
        <trans-unit id="b37288188058569af8da43c31e65dafbe7a4e22b" translate="yes" xml:space="preserve">
          <source>This class stores the message data in a cookie (signed with a secret hash to prevent manipulation) to persist notifications across requests. Old messages are dropped if the cookie data size would exceed 2048 bytes.</source>
          <target state="translated">이 클래스는 메시지 데이터를 쿠키 (비밀 해시로 서명하여 조작을 방지하기 위해 서명)에 저장하여 요청간에 알림을 유지합니다. 쿠키 데이터 크기가 2048 바이트를 초과하면 이전 메시지가 삭제됩니다.</target>
        </trans-unit>
        <trans-unit id="2590bcfc60140b42ba1d212051567a2d8bedd3de" translate="yes" xml:space="preserve">
          <source>This class works like &lt;a href=&quot;#django.contrib.admin.apps.AdminConfig&quot;&gt;&lt;code&gt;AdminConfig&lt;/code&gt;&lt;/a&gt;, except it doesn&amp;rsquo;t call &lt;a href=&quot;#django.contrib.admin.autodiscover&quot;&gt;&lt;code&gt;autodiscover()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 클래스는 &lt;a href=&quot;#django.contrib.admin.autodiscover&quot;&gt; &lt;code&gt;autodiscover()&lt;/code&gt; &lt;/a&gt; 호출하지 않는다는 점을 제외하고 &lt;a href=&quot;#django.contrib.admin.apps.AdminConfig&quot;&gt; &lt;code&gt;AdminConfig&lt;/code&gt; &lt;/a&gt; 와 같이 작동합니다 .</target>
        </trans-unit>
        <trans-unit id="9d57bb9abee0e0eb52e07f4cd61c2b38139513f0" translate="yes" xml:space="preserve">
          <source>This classmethod instantiates the GeoIP object from the given database path and given cache setting.</source>
          <target state="translated">이 클래스 메소드는 지정된 데이터베이스 경로 및 지정된 캐시 설정에서 GeoIP 객체를 인스턴스화합니다.</target>
        </trans-unit>
        <trans-unit id="0a79f3d86a0fda82a3c6a4f99d9a9836f9dd257f" translate="yes" xml:space="preserve">
          <source>This code defines a &lt;code&gt;CalendarWidget&lt;/code&gt;, which will be based on &lt;code&gt;TextInput&lt;/code&gt;. Every time the CalendarWidget is used on a form, that form will be directed to include the CSS file &lt;code&gt;pretty.css&lt;/code&gt;, and the JavaScript files &lt;code&gt;animations.js&lt;/code&gt; and &lt;code&gt;actions.js&lt;/code&gt;.</source>
          <target state="translated">이 코드는 &lt;code&gt;CalendarWidget&lt;/code&gt; 을 정의하며 &lt;code&gt;TextInput&lt;/code&gt; 을 기반으로 합니다. CalendarWidget이 양식에서 사용될 때마다 해당 양식은 CSS 파일 &lt;code&gt;pretty.css&lt;/code&gt; 및 JavaScript 파일 &lt;code&gt;animations.js&lt;/code&gt; 및 &lt;code&gt;actions.js&lt;/code&gt; 를 포함하도록 지시됩니다 .</target>
        </trans-unit>
        <trans-unit id="7ad938899ff955f81a1acf930956f7e85fbeed5b" translate="yes" xml:space="preserve">
          <source>This code includes a few things we haven&amp;rsquo;t covered yet in this tutorial:</source>
          <target state="translated">이 코드에는이 자습서에서 아직 다루지 않은 몇 가지 사항이 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="2cbab031f9a4c283f03dc76fe427c7b452cea702" translate="yes" xml:space="preserve">
          <source>This code lives in &lt;code&gt;django/contrib&lt;/code&gt; in the Django distribution. This document gives a rundown of the packages in &lt;code&gt;contrib&lt;/code&gt;, along with any dependencies those packages have.</source>
          <target state="translated">이 코드 는 Django 배포판의 &lt;code&gt;django/contrib&lt;/code&gt; 에 있습니다. 이 문서의 패키지 설명해 준다 &lt;code&gt;contrib&lt;/code&gt; 그 패키지가 종속성과 함께.</target>
        </trans-unit>
        <trans-unit id="a209a74619a3a02ee21ae6fc8984126b4f809c5d" translate="yes" xml:space="preserve">
          <source>This code would all live in a &lt;code&gt;models.py&lt;/code&gt; file for a custom authentication app:</source>
          <target state="translated">이 코드는 모두 사용자 지정 인증 앱 의 &lt;code&gt;models.py&lt;/code&gt; 파일에 있습니다.</target>
        </trans-unit>
        <trans-unit id="deff7c10eeb34b940ec43fed363441c36914806f" translate="yes" xml:space="preserve">
          <source>This command assumes the programs are on your &lt;code&gt;PATH&lt;/code&gt; so that a call to the program name (&lt;code&gt;psql&lt;/code&gt;, &lt;code&gt;mysql&lt;/code&gt;, &lt;code&gt;sqlite3&lt;/code&gt;, &lt;code&gt;sqlplus&lt;/code&gt;) will find the program in the right place. There&amp;rsquo;s no way to specify the location of the program manually.</source>
          <target state="translated">이 명령은 프로그램이 &lt;code&gt;PATH&lt;/code&gt; 에 있다고 가정하여 프로그램 이름 ( &lt;code&gt;psql&lt;/code&gt; , &lt;code&gt;mysql&lt;/code&gt; , &lt;code&gt;sqlite3&lt;/code&gt; , &lt;code&gt;sqlplus&lt;/code&gt; )을 호출 하면 프로그램이 올바른 위치에있게됩니다. 프로그램의 위치를 ​​수동으로 지정할 수있는 방법이 없습니다.</target>
        </trans-unit>
        <trans-unit id="282154b404446906503f35547883908f52737354" translate="yes" xml:space="preserve">
          <source>This command doesn&amp;rsquo;t require configured settings. However, when settings aren&amp;rsquo;t configured, the command can&amp;rsquo;t ignore the &lt;a href=&quot;settings#std:setting-MEDIA_ROOT&quot;&gt;&lt;code&gt;MEDIA_ROOT&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;settings#std:setting-STATIC_ROOT&quot;&gt;&lt;code&gt;STATIC_ROOT&lt;/code&gt;&lt;/a&gt; directories or include &lt;a href=&quot;settings#std:setting-LOCALE_PATHS&quot;&gt;&lt;code&gt;LOCALE_PATHS&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 명령에는 구성 설정이 필요하지 않습니다. 그러나 설정이 구성되지 않은 경우 명령은 &lt;a href=&quot;settings#std:setting-MEDIA_ROOT&quot;&gt; &lt;code&gt;MEDIA_ROOT&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;settings#std:setting-STATIC_ROOT&quot;&gt; &lt;code&gt;STATIC_ROOT&lt;/code&gt; &lt;/a&gt; 디렉토리를 무시 하거나 &lt;a href=&quot;settings#std:setting-LOCALE_PATHS&quot;&gt; &lt;code&gt;LOCALE_PATHS&lt;/code&gt; 를&lt;/a&gt; 포함 할 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="9735f3f00d1504ad505769110a576a93d286cae1" translate="yes" xml:space="preserve">
          <source>This command is only available if &lt;a href=&quot;contrib/gis/index&quot;&gt;GeoDjango&lt;/a&gt; (&lt;code&gt;django.contrib.gis&lt;/code&gt;) is installed.</source>
          <target state="translated">이 명령은 &lt;a href=&quot;contrib/gis/index&quot;&gt;GeoDjango&lt;/a&gt; ( &lt;code&gt;django.contrib.gis&lt;/code&gt; )가 설치된 경우에만 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="4111558387329a52ac8875bd1edadafcea0cccea" translate="yes" xml:space="preserve">
          <source>This command is only available if Django&amp;rsquo;s &lt;a href=&quot;../topics/auth/index&quot;&gt;authentication system&lt;/a&gt; (&lt;code&gt;django.contrib.auth&lt;/code&gt;) is installed.</source>
          <target state="translated">이 명령은 Django의 &lt;a href=&quot;../topics/auth/index&quot;&gt;인증 시스템&lt;/a&gt; ( &lt;code&gt;django.contrib.auth&lt;/code&gt; )이 설치된 경우에만 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="5cc14624d290bf11b63a5aa824e562d18be6207f" translate="yes" xml:space="preserve">
          <source>This command is only available if Django&amp;rsquo;s &lt;a href=&quot;contrib/contenttypes&quot;&gt;contenttypes app&lt;/a&gt; (&lt;a href=&quot;contrib/contenttypes#module-django.contrib.contenttypes&quot;&gt;&lt;code&gt;django.contrib.contenttypes&lt;/code&gt;&lt;/a&gt;) is installed.</source>
          <target state="translated">이 명령은 Django의 &lt;a href=&quot;contrib/contenttypes&quot;&gt;contenttypes 앱&lt;/a&gt; ( &lt;a href=&quot;contrib/contenttypes#module-django.contrib.contenttypes&quot;&gt; &lt;code&gt;django.contrib.contenttypes&lt;/code&gt; &lt;/a&gt; )이 설치된 경우에만 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="b93941679327d68c290df5e17973e2447ca49ab6" translate="yes" xml:space="preserve">
          <source>This command is only available if the &lt;a href=&quot;../howto/static-files/index&quot;&gt;static files application&lt;/a&gt; (&lt;code&gt;django.contrib.staticfiles&lt;/code&gt;) is installed.</source>
          <target state="translated">이 명령은 &lt;a href=&quot;../howto/static-files/index&quot;&gt;정적 파일 애플리케이션&lt;/a&gt; ( &lt;code&gt;django.contrib.staticfiles&lt;/code&gt; )이 설치된 경우에만 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="947d4b131f1ea6c69d277423618cddc624fcf1b3" translate="yes" xml:space="preserve">
          <source>This command is only available if the &lt;a href=&quot;contrib/sitemaps&quot;&gt;Sitemaps framework&lt;/a&gt; (&lt;code&gt;django.contrib.sitemaps&lt;/code&gt;) is installed.</source>
          <target state="translated">이 명령은 &lt;a href=&quot;contrib/sitemaps&quot;&gt;Sitemaps 프레임 워크&lt;/a&gt; ( &lt;code&gt;django.contrib.sitemaps&lt;/code&gt; )가 설치된 경우에만 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a039c93fd1dadc72718bb5deeb1fa1ef6611d324" translate="yes" xml:space="preserve">
          <source>This command should produce the following output:</source>
          <target state="translated">이 명령은 다음과 같은 출력을 생성해야합니다.</target>
        </trans-unit>
        <trans-unit id="9a44582b892bb6a5d356086079698f0d802de285" translate="yes" xml:space="preserve">
          <source>This command will start a minimal SMTP server listening on port 1025 of localhost. This server prints to standard output all email headers and the email body. You then only need to set the &lt;a href=&quot;../ref/settings#std:setting-EMAIL_HOST&quot;&gt;&lt;code&gt;EMAIL_HOST&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../ref/settings#std:setting-EMAIL_PORT&quot;&gt;&lt;code&gt;EMAIL_PORT&lt;/code&gt;&lt;/a&gt; accordingly. For a more detailed discussion of SMTP server options, see the Python documentation for the &lt;a href=&quot;https://docs.python.org/3/library/smtpd.html#module-smtpd&quot;&gt;&lt;code&gt;smtpd&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="translated">이 명령은 localhost의 포트 1025에서 수신 대기하는 최소 SMTP 서버를 시작합니다. 이 서버는 모든 이메일 헤더와 이메일 본문을 표준 출력으로 인쇄합니다. 그런 다음 &lt;a href=&quot;../ref/settings#std:setting-EMAIL_HOST&quot;&gt; &lt;code&gt;EMAIL_HOST&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../ref/settings#std:setting-EMAIL_PORT&quot;&gt; &lt;code&gt;EMAIL_PORT&lt;/code&gt; &lt;/a&gt; 만 설정하면 됩니다. SMTP 서버 옵션에 대한 자세한 내용은 &lt;a href=&quot;https://docs.python.org/3/library/smtpd.html#module-smtpd&quot;&gt; &lt;code&gt;smtpd&lt;/code&gt; &lt;/a&gt; 모듈에 대한 Python 설명서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="6403a143405e5c980c3e1ba916a8a98a8790bb6e" translate="yes" xml:space="preserve">
          <source>This complex tag is best illustrated by way of an example: say that &lt;code&gt;cities&lt;/code&gt; is a list of cities represented by dictionaries containing &lt;code&gt;&quot;name&quot;&lt;/code&gt;, &lt;code&gt;&quot;population&quot;&lt;/code&gt;, and &lt;code&gt;&quot;country&quot;&lt;/code&gt; keys:</source>
          <target state="translated">이 복잡한 태그는 예를 통해 가장 잘 설명됩니다. &lt;code&gt;cities&lt;/code&gt; 는 &lt;code&gt;&quot;name&quot;&lt;/code&gt; , &lt;code&gt;&quot;population&quot;&lt;/code&gt; 및 &lt;code&gt;&quot;country&quot;&lt;/code&gt; 키를 포함하는 사전으로 표시되는 도시 목록 이라고 가정하십시오 .</target>
        </trans-unit>
        <trans-unit id="1914a9a0cf5f327769de0194335c233c38b7518e" translate="yes" xml:space="preserve">
          <source>This consideration is not limited to the use of &lt;code&gt;Prefetch&lt;/code&gt; objects. Some advanced techniques may require that the lookups be performed in a specific order to avoid creating extra queries; therefore it&amp;rsquo;s recommended to always carefully order &lt;code&gt;prefetch_related&lt;/code&gt; arguments.</source>
          <target state="translated">이 고려 사항은 &lt;code&gt;Prefetch&lt;/code&gt; 오브젝트 사용으로 제한되지 않습니다 . 일부 고급 기술에서는 추가 쿼리 생성을 피하기 위해 특정 순서로 조회를 수행해야 할 수 있습니다. 따라서 항상 &lt;code&gt;prefetch_related&lt;/code&gt; 인수를 신중하게 주문하는 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="b34268c561163edb8a105bcac5d3b68ae9ddb9e8" translate="yes" xml:space="preserve">
          <source>This controls the maximum number of forms to show in the inline. This doesn&amp;rsquo;t directly correlate to the number of objects, but can if the value is small enough. See &lt;a href=&quot;../../../topics/forms/modelforms#model-formsets-max-num&quot;&gt;Limiting the number of editable objects&lt;/a&gt; for more information.</source>
          <target state="translated">인라인에 표시 할 최대 양식 수를 제어합니다. 이는 개체 수와 직접 관련이 없지만 값이 충분히 작은 경우 가능합니다. 자세한 내용 &lt;a href=&quot;../../../topics/forms/modelforms#model-formsets-max-num&quot;&gt;은 편집 가능한 객체 수 제한&lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="712a4ce1be34ad32cfcdf97b787042ea5cbeec26" translate="yes" xml:space="preserve">
          <source>This controls the minimum number of forms to show in the inline. See &lt;a href=&quot;../../forms/models#django.forms.models.modelformset_factory&quot;&gt;&lt;code&gt;modelformset_factory()&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">인라인에 표시 할 최소 양식 수를 제어합니다. 자세한 정보는 &lt;a href=&quot;../../forms/models#django.forms.models.modelformset_factory&quot;&gt; &lt;code&gt;modelformset_factory()&lt;/code&gt; &lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="619d069001a26076eba8520d6fb9a58bdc9b453d" translate="yes" xml:space="preserve">
          <source>This controls the number of extra forms the formset will display in addition to the initial forms. See the &lt;a href=&quot;../../../topics/forms/formsets&quot;&gt;formsets documentation&lt;/a&gt; for more information.</source>
          <target state="translated">이는 초기 양식 외에 양식 세트에 표시되는 추가 양식 수를 제어합니다. 자세한 내용은 &lt;a href=&quot;../../../topics/forms/formsets&quot;&gt;양식 세트 설명서&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="c9a694cf64c997f136b0943a8eb6406863e2acad" translate="yes" xml:space="preserve">
          <source>This conversion takes place before and after each middleware (you can think of it as the thin film in between each layer of the onion), so that every middleware can always rely on getting some kind of HTTP response back from calling its &lt;code&gt;get_response&lt;/code&gt; callable. Middleware don&amp;rsquo;t need to worry about wrapping their call to &lt;code&gt;get_response&lt;/code&gt; in a &lt;code&gt;try/except&lt;/code&gt; and handling an exception that might have been raised by a later middleware or the view. Even if the very next middleware in the chain raises an &lt;a href=&quot;views#django.http.Http404&quot;&gt;&lt;code&gt;Http404&lt;/code&gt;&lt;/a&gt; exception, for example, your middleware won&amp;rsquo;t see that exception; instead it will get an &lt;a href=&quot;../../ref/request-response#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt; object with a &lt;a href=&quot;../../ref/request-response#django.http.HttpResponse.status_code&quot;&gt;&lt;code&gt;status_code&lt;/code&gt;&lt;/a&gt; of 404.</source>
          <target state="translated">이 변환은 각 미들웨어 전후에 발생합니다 (양파의 각 계층 사이에있는 박막으로 생각할 수 있음). 따라서 모든 미들웨어는 항상 &lt;code&gt;get_response&lt;/code&gt; 호출 가능 을 호출하여 일종의 HTTP 응답을 다시받는 데 의존 할 수 있습니다 . 미들웨어는 &lt;code&gt;try/except&lt;/code&gt; 에서 &lt;code&gt;get_response&lt;/code&gt; 에 대한 호출을 랩핑하고 이후 미들웨어 또는보기에 의해 발생 된 예외를 처리하는 것에 대해 걱정할 필요가 없습니다 . 예를 들어, 체인에서 바로 다음 미들웨어가 &lt;a href=&quot;views#django.http.Http404&quot;&gt; &lt;code&gt;Http404&lt;/code&gt; &lt;/a&gt; 예외를 발생 시키는 경우에도 미들웨어는 해당 예외를 볼 수 없습니다. 대신 &lt;a href=&quot;../../ref/request-response#django.http.HttpResponse.status_code&quot;&gt; &lt;code&gt;status_code&lt;/code&gt; &lt;/a&gt; 가 404 인 &lt;a href=&quot;../../ref/request-response#django.http.HttpResponse&quot;&gt; &lt;code&gt;HttpResponse&lt;/code&gt; &lt;/a&gt; 객체를 가져옵니다 .</target>
        </trans-unit>
        <trans-unit id="46a040e1b5bbcdfa5929e5755bb6d313ea3bb589" translate="yes" xml:space="preserve">
          <source>This cookie is set by &lt;code&gt;CsrfViewMiddleware&lt;/code&gt;. It is sent with every response that has called &lt;code&gt;django.middleware.csrf.get_token()&lt;/code&gt; (the function used internally to retrieve the CSRF token), if it wasn&amp;rsquo;t already set on the request.</source>
          <target state="translated">이 쿠키는 &lt;code&gt;CsrfViewMiddleware&lt;/code&gt; 에 의해 설정됩니다 . 요청에 아직 설정되지 않은 경우 &lt;code&gt;django.middleware.csrf.get_token()&lt;/code&gt; (CSRF 토큰을 검색하기 위해 내부적으로 사용되는 함수 ) 이라는 모든 응답과 함께 전송됩니다 .</target>
        </trans-unit>
        <trans-unit id="c0bcab374c0361ab56a5338f10d8c0b90bd44191" translate="yes" xml:space="preserve">
          <source>This covers the basics, but forms can do a whole lot more:</source>
          <target state="translated">이것은 기본 사항을 다루지 만 양식은 훨씬 더 많은 것을 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f58ee9b60b7567a5281e41f8e27c9b89c6a2dedd" translate="yes" xml:space="preserve">
          <source>This creates a &lt;code&gt;to_tsvector&lt;/code&gt; in the database from the &lt;code&gt;body_text&lt;/code&gt; field and a &lt;code&gt;plainto_tsquery&lt;/code&gt; from the search term &lt;code&gt;'Cheese'&lt;/code&gt;, both using the default database search configuration. The results are obtained by matching the query and the vector.</source>
          <target state="translated">이것은 생성 &lt;code&gt;to_tsvector&lt;/code&gt; 로부터 데이터베이스에 &lt;code&gt;body_text&lt;/code&gt; 의 필드와 &lt;code&gt;plainto_tsquery&lt;/code&gt; 검색어에서 &lt;code&gt;'Cheese'&lt;/code&gt; , 모두가 기본 데이터베이스 검색 구성을 사용합니다. 쿼리와 벡터를 일치시켜 결과를 얻습니다.</target>
        </trans-unit>
        <trans-unit id="6f0e8304663e6242a2ea973e9fe8986338b415db" translate="yes" xml:space="preserve">
          <source>This creates a form that behaves identically to &lt;code&gt;ArticleForm&lt;/code&gt;, except there&amp;rsquo;s some extra validation and cleaning for the &lt;code&gt;pub_date&lt;/code&gt; field.</source>
          <target state="translated">이렇게하면 &lt;code&gt;pub_date&lt;/code&gt; 필드에 대한 추가 유효성 검사 및 정리가 있다는 것을 제외하고 &lt;code&gt;ArticleForm&lt;/code&gt; 과 동일하게 동작하는 양식이 만들어집니다 .</target>
        </trans-unit>
        <trans-unit id="f066c3383bb7cdc130908a2e1c589274d837d782" translate="yes" xml:space="preserve">
          <source>This creates a table in your database that is in the proper format that Django&amp;rsquo;s database-cache system expects. The name of the table is taken from &lt;a href=&quot;../ref/settings#std:setting-CACHES-LOCATION&quot;&gt;&lt;code&gt;LOCATION&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이렇게하면 Django의 데이터베이스 캐시 시스템이 예상하는 올바른 형식의 테이블이 데이터베이스에 생성됩니다. 테이블 이름은 &lt;a href=&quot;../ref/settings#std:setting-CACHES-LOCATION&quot;&gt; &lt;code&gt;LOCATION&lt;/code&gt; &lt;/a&gt; 에서 가져옵니다 .</target>
        </trans-unit>
        <trans-unit id="29544a87a8d82501d49cd8afa35afa75ea3f2904" translate="yes" xml:space="preserve">
          <source>This declares a &lt;code&gt;pizza_done&lt;/code&gt; signal that will provide receivers with &lt;code&gt;toppings&lt;/code&gt; and &lt;code&gt;size&lt;/code&gt; arguments.</source>
          <target state="translated">이것은 수신자에게 &lt;code&gt;toppings&lt;/code&gt; 과 &lt;code&gt;size&lt;/code&gt; 인수를 제공 할 &lt;code&gt;pizza_done&lt;/code&gt; 신호를 선언합니다 .</target>
        </trans-unit>
        <trans-unit id="a10c25b287ebc71dfb9bcf4f3e26f44f603fbea6" translate="yes" xml:space="preserve">
          <source>This decorator adds a &lt;code&gt;Cache-Control: max-age=0, no-cache, no-store,
must-revalidate, private&lt;/code&gt; header to a response to indicate that a page should never be cached.</source>
          <target state="translated">이 데코레이터는 &lt;code&gt;Cache-Control: max-age=0, no-cache, no-store, must-revalidate, private&lt;/code&gt; 헤더를 응답에 추가하여 페이지를 캐시해서는 안됨을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="e967a0456ed9876c8f232b7fa67088e0c896e983" translate="yes" xml:space="preserve">
          <source>This decorator compresses content if the browser allows gzip compression. It sets the &lt;code&gt;Vary&lt;/code&gt; header accordingly, so that caches will base their storage on the &lt;code&gt;Accept-Encoding&lt;/code&gt; header.</source>
          <target state="translated">브라우저가 gzip 압축을 허용하는 경우이 데코레이터는 내용을 압축합니다. 캐시는 그에 따라 &lt;code&gt;Vary&lt;/code&gt; 헤더를 설정하여 캐시가 &lt;code&gt;Accept-Encoding&lt;/code&gt; 헤더를 기반으로 스토리지를 기반으로합니다 .</target>
        </trans-unit>
        <trans-unit id="ed058eb50d5ef634514dbf535331db36dba04475" translate="yes" xml:space="preserve">
          <source>This decorator defines the &lt;code&gt;__html__()&lt;/code&gt; method on the decorated class by wrapping &lt;code&gt;__str__()&lt;/code&gt; in &lt;a href=&quot;#django.utils.safestring.mark_safe&quot;&gt;&lt;code&gt;mark_safe()&lt;/code&gt;&lt;/a&gt;. Ensure the &lt;code&gt;__str__()&lt;/code&gt; method does indeed return text that doesn&amp;rsquo;t require HTML escaping.</source>
          <target state="translated">이 장식은 정의 &lt;code&gt;__html__()&lt;/code&gt; 포장으로 장식 된 클래스 방법을 &lt;code&gt;__str__()&lt;/code&gt; 에서 &lt;a href=&quot;#django.utils.safestring.mark_safe&quot;&gt; &lt;code&gt;mark_safe()&lt;/code&gt; &lt;/a&gt; . &lt;code&gt;__str__()&lt;/code&gt; 메소드가 HTML 이스케이프가 필요없는 텍스트를 실제로 리턴 하는지 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="5f104663a93bed2d5ef71abc210b9e2e74a9cc68" translate="yes" xml:space="preserve">
          <source>This decorator forces a view to send the CSRF cookie.</source>
          <target state="translated">이 데코레이터는 뷰가 CSRF 쿠키를 보내도록합니다.</target>
        </trans-unit>
        <trans-unit id="1b7737cd6830405eedda087588dfd63788c780c4" translate="yes" xml:space="preserve">
          <source>This decorator is used on the admin views that require authorization. A view decorated with this function will having the following behavior:</source>
          <target state="translated">이 데코레이터는 인증이 필요한 관리자보기에서 사용됩니다. 이 기능으로 장식 된 뷰는 다음과 같은 동작을합니다.</target>
        </trans-unit>
        <trans-unit id="c4bc3427e08f718c72586d4660a2858362df707a" translate="yes" xml:space="preserve">
          <source>This decorator marks a view as being exempt from the protection ensured by the middleware. Example:</source>
          <target state="translated">이 데코레이터는보기가 미들웨어에 의해 보장 된 보호에서 면제되는 것으로 표시합니다. 예:</target>
        </trans-unit>
        <trans-unit id="25bd152233ab8d6d56636ea2a2de594c9d78eb23" translate="yes" xml:space="preserve">
          <source>This decorator patches the response&amp;rsquo;s &lt;code&gt;Cache-Control&lt;/code&gt; header by adding all of the keyword arguments to it. See &lt;a href=&quot;../../ref/utils#django.utils.cache.patch_cache_control&quot;&gt;&lt;code&gt;patch_cache_control()&lt;/code&gt;&lt;/a&gt; for the details of the transformation.</source>
          <target state="translated">이 데코레이터는 모든 키워드 인수를 추가 하여 응답의 &lt;code&gt;Cache-Control&lt;/code&gt; 헤더를 패치 합니다. 변환에 대한 자세한 내용은 &lt;a href=&quot;../../ref/utils#django.utils.cache.patch_cache_control&quot;&gt; &lt;code&gt;patch_cache_control()&lt;/code&gt; &lt;/a&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="3f48d2e55f43a65b708cccf73b25d44fc28c98e5" translate="yes" xml:space="preserve">
          <source>This decorator takes care of sending out the appropriate HTTP header behind the scenes.</source>
          <target state="translated">이 데코레이터는 씬 뒤에 적절한 HTTP 헤더를 발송합니다.</target>
        </trans-unit>
        <trans-unit id="fbbf8d3caaa8867b0f7a41f87f1825677e97df21" translate="yes" xml:space="preserve">
          <source>This decorator will negate the effect of &lt;a href=&quot;../../ref/settings#std:setting-DATABASE-ATOMIC_REQUESTS&quot;&gt;&lt;code&gt;ATOMIC_REQUESTS&lt;/code&gt;&lt;/a&gt; for a given view:</source>
          <target state="translated">이 데코레이터는 주어진 뷰 에서 &lt;a href=&quot;../../ref/settings#std:setting-DATABASE-ATOMIC_REQUESTS&quot;&gt; &lt;code&gt;ATOMIC_REQUESTS&lt;/code&gt; &lt;/a&gt; 의 효과를 무효화합니다 .</target>
        </trans-unit>
        <trans-unit id="cac3f25c0c930bfb4618528ad1a8df65a6748241" translate="yes" xml:space="preserve">
          <source>This default output is a two-column HTML table, with a &lt;code&gt;&amp;lt;tr&amp;gt;&lt;/code&gt; for each field. Notice the following:</source>
          <target state="translated">이 기본 출력은 2 열 HTML 테이블이며 각 필드에 &lt;code&gt;&amp;lt;tr&amp;gt;&lt;/code&gt; 이 있습니다. 다음을 주목하십시오 :</target>
        </trans-unit>
        <trans-unit id="20289f789fdcdd34dd2173de027af9e90d93e518" translate="yes" xml:space="preserve">
          <source>This defaults to &lt;a href=&quot;../../../topics/forms/modelforms#django.forms.models.BaseInlineFormSet&quot;&gt;&lt;code&gt;BaseInlineFormSet&lt;/code&gt;&lt;/a&gt;. Using your own formset can give you many possibilities of customization. Inlines are built around &lt;a href=&quot;../../../topics/forms/modelforms#model-formsets&quot;&gt;model formsets&lt;/a&gt;.</source>
          <target state="translated">기본값은 &lt;a href=&quot;../../../topics/forms/modelforms#django.forms.models.BaseInlineFormSet&quot;&gt; &lt;code&gt;BaseInlineFormSet&lt;/code&gt; &lt;/a&gt; 입니다. 자체 양식 세트를 사용하면 많은 사용자 정의가 가능합니다. 인라인은 &lt;a href=&quot;../../../topics/forms/modelforms#model-formsets&quot;&gt;모델 폼셋을&lt;/a&gt; 중심으로 구축됩니다 .</target>
        </trans-unit>
        <trans-unit id="fc0faa87c549dff926edc06cbb5002733a6d48db" translate="yes" xml:space="preserve">
          <source>This defines a &lt;a href=&quot;../../ref/forms/api#django.forms.Form&quot;&gt;&lt;code&gt;Form&lt;/code&gt;&lt;/a&gt; class with a single field (&lt;code&gt;your_name&lt;/code&gt;). We&amp;rsquo;ve applied a human-friendly label to the field, which will appear in the &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; when it&amp;rsquo;s rendered (although in this case, the &lt;a href=&quot;../../ref/forms/fields#django.forms.Field.label&quot;&gt;&lt;code&gt;label&lt;/code&gt;&lt;/a&gt; we specified is actually the same one that would be generated automatically if we had omitted it).</source>
          <target state="translated">단일 필드 ( &lt;code&gt;your_name&lt;/code&gt; ) 로 &lt;a href=&quot;../../ref/forms/api#django.forms.Form&quot;&gt; &lt;code&gt;Form&lt;/code&gt; &lt;/a&gt; 클래스를 정의합니다 . 인간 친화적 인 레이블을 필드에 적용 했습니다. 렌더링 할 때 &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; 에 표시 됩니다 (이 경우 지정된 &lt;a href=&quot;../../ref/forms/fields#django.forms.Field.label&quot;&gt; &lt;code&gt;label&lt;/code&gt; &lt;/a&gt; 은 실제로 생략 한 경우 자동으로 생성 되는 레이블 과 동일 함). .</target>
        </trans-unit>
        <trans-unit id="fcfb94c6ec9d795bbf4a68892297b27f2c38ae7c" translate="yes" xml:space="preserve">
          <source>This definition ensures that all &lt;code&gt;Person&lt;/code&gt; objects are serialized before any &lt;code&gt;Book&lt;/code&gt; objects. In turn, any object referencing &lt;code&gt;Book&lt;/code&gt; will be serialized after both &lt;code&gt;Person&lt;/code&gt; and &lt;code&gt;Book&lt;/code&gt; have been serialized.</source>
          <target state="translated">이 정의는 모든 &lt;code&gt;Person&lt;/code&gt; 객체가 &lt;code&gt;Book&lt;/code&gt; 객체 보다 먼저 직렬화 되도록 합니다. 차례로, &lt;code&gt;Person&lt;/code&gt; 과 &lt;code&gt;Book&lt;/code&gt; 이 모두 직렬화되면 &lt;code&gt;Book&lt;/code&gt; 을 참조하는 모든 객체 가 직렬화됩니다.</target>
        </trans-unit>
        <trans-unit id="d5b7173e8cd6e2684c8184d2c95f2279ec55ccb4" translate="yes" xml:space="preserve">
          <source>This definition is deliberately vague. For example, a tag can output content, serve as a control structure e.g. an &amp;ldquo;if&amp;rdquo; statement or a &amp;ldquo;for&amp;rdquo; loop, grab content from a database, or even enable access to other template tags.</source>
          <target state="translated">이 정의는 의도적으로 모호합니다. 예를 들어, 태그는 컨텐츠를 출력하거나 제어 구조 (예 : &quot;if&quot;문 또는 &quot;for&quot;루프)로 사용하거나 데이터베이스에서 컨텐츠를 가져 오거나 다른 템플릿 태그에 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1fc84fe0f2da4ec965cc56763ba3bd938536d6d1" translate="yes" xml:space="preserve">
          <source>This dependency behavior affects most migration operations where you restrict to a single app. Restricting to a single app (either in &lt;code&gt;makemigrations&lt;/code&gt; or &lt;code&gt;migrate&lt;/code&gt;) is a best-efforts promise, and not a guarantee; any other apps that need to be used to get dependencies correct will be.</source>
          <target state="translated">이 종속성 동작은 단일 앱으로 제한하는 대부분의 마이그레이션 작업에 영향을줍니다. 단일 응용 프로그램 ( &lt;code&gt;makemigrations&lt;/code&gt; 또는 &lt;code&gt;migrate&lt;/code&gt; )으로 제한하는 것은 최선의 약속이며 보증이 아닙니다. 종속성을 올바르게 얻기 위해 사용해야하는 다른 앱도 있습니다.</target>
        </trans-unit>
        <trans-unit id="f83dcab2164c54ffbf545594e1639ad5e5aae500" translate="yes" xml:space="preserve">
          <source>This describes the name of the application that is being deployed. Every instance of a single application will have the same application namespace. For example, Django&amp;rsquo;s admin application has the somewhat predictable application namespace of &lt;code&gt;'admin'&lt;/code&gt;.</source>
          <target state="translated">배포중인 응용 프로그램의 이름을 설명합니다. 단일 응용 프로그램의 모든 인스턴스는 동일한 응용 프로그램 네임 스페이스를 갖습니다. 예를 들어 Django의 관리 응용 프로그램에는 다소 예측 가능한 응용 프로그램 네임 스페이스 &lt;code&gt;'admin'&lt;/code&gt; 이 있습니다.</target>
        </trans-unit>
        <trans-unit id="d51ac0918158cde7cca8ac5666530e027e7836dd" translate="yes" xml:space="preserve">
          <source>This detailed summary information tells us the number of features in the layer (246), the geographic bounds of the data, the spatial reference system (&amp;ldquo;SRS WKT&amp;rdquo;), as well as type information for each attribute field. For example, &lt;code&gt;FIPS: String (2.0)&lt;/code&gt; indicates that the &lt;code&gt;FIPS&lt;/code&gt; character field has a maximum length of 2. Similarly, &lt;code&gt;LON: Real (8.3)&lt;/code&gt; is a floating-point field that holds a maximum of 8 digits up to three decimal places.</source>
          <target state="translated">이 상세한 요약 정보는 계층 (246)의 특징의 수, 데이터의 지리적 경계, 공간 참조 시스템 ( &quot;SRS WKT&quot;) 및 각 속성 필드에 대한 유형 정보를 알려준다. 예를 들어, &lt;code&gt;FIPS: String (2.0)&lt;/code&gt; 은 &lt;code&gt;FIPS&lt;/code&gt; 문자 필드의 최대 길이가 2 임을 나타냅니다 . 마찬가지로, &lt;code&gt;LON: Real (8.3)&lt;/code&gt; 은 최대 8 자리에서 소수점 이하 3 자리까지의 부동 소수점 필드입니다.</target>
        </trans-unit>
        <trans-unit id="d5775c97322cffc1f2873d9593fa15abfd4b13cb" translate="yes" xml:space="preserve">
          <source>This directory structure will house the poll application.</source>
          <target state="translated">이 디렉토리 구조는 폴링 애플리케이션을 수용합니다.</target>
        </trans-unit>
        <trans-unit id="e0e48acbb5bc75817b54f6d0a3e50ca21c4e8e2b" translate="yes" xml:space="preserve">
          <source>This document assumes you know the Django basics, as covered in the &lt;a href=&quot;../intro/tutorial01&quot;&gt;tutorial&lt;/a&gt;.</source>
          <target state="translated">이 문서는 &lt;a href=&quot;../intro/tutorial01&quot;&gt;튜토리얼&lt;/a&gt; 에서 다룬 장고 기본을 알고 있다고 가정합니다 .</target>
        </trans-unit>
        <trans-unit id="b1457ea88a1acf0856cec1d11ee41cbdd917a2f9" translate="yes" xml:space="preserve">
          <source>This document contains all the API references of &lt;a href=&quot;#django.db.models.Field&quot;&gt;&lt;code&gt;Field&lt;/code&gt;&lt;/a&gt; including the &lt;a href=&quot;#field-options&quot;&gt;field options&lt;/a&gt; and &lt;a href=&quot;#field-types&quot;&gt;field types&lt;/a&gt; Django offers.</source>
          <target state="translated">이 문서에는 Django가 제공 하는 &lt;a href=&quot;#field-options&quot;&gt;필드 옵션&lt;/a&gt; 및 &lt;a href=&quot;#field-types&quot;&gt;필드 유형을&lt;/a&gt; 포함하여 &lt;a href=&quot;#django.db.models.Field&quot;&gt; &lt;code&gt;Field&lt;/code&gt; 의&lt;/a&gt; 모든 API 참조가 포함되어 있습니다 .</target>
        </trans-unit>
        <trans-unit id="8fd26ba78c567ad9739e3812ccf7a4eaf9ca01e9" translate="yes" xml:space="preserve">
          <source>This document covers all stable modules in &lt;code&gt;django.utils&lt;/code&gt;. Most of the modules in &lt;code&gt;django.utils&lt;/code&gt; are designed for internal use and only the following parts can be considered stable and thus backwards compatible as per the &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/internals/release-process/#internal-release-deprecation-policy&quot;&gt;internal release deprecation policy&lt;/a&gt;.</source>
          <target state="translated">이 문서는 &lt;code&gt;django.utils&lt;/code&gt; 의 모든 안정적인 모듈을 다룹니다 . &lt;code&gt;django.utils&lt;/code&gt; 에있는 대부분의 모듈은 내부 용으로 설계되었으며 &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/internals/release-process/#internal-release-deprecation-policy&quot;&gt;내부 릴리스 폐기 정책에&lt;/a&gt; 따라 다음 부분 만 안정적으로 간주되므로 이전 버전과 호환됩니다 .</target>
        </trans-unit>
        <trans-unit id="8bdca3268b6229f527808f01b345f3456813ecc4" translate="yes" xml:space="preserve">
          <source>This document covers features of the &lt;a href=&quot;instances#django.db.models.Model&quot;&gt;&lt;code&gt;Model&lt;/code&gt;&lt;/a&gt; class. For more information about models, see &lt;a href=&quot;index&quot;&gt;the complete list of Model reference guides&lt;/a&gt;.</source>
          <target state="translated">이 문서는 &lt;a href=&quot;instances#django.db.models.Model&quot;&gt; &lt;code&gt;Model&lt;/code&gt; &lt;/a&gt; 클래스의 기능을 다룹니다 . 모델에 대한 자세한 정보 &lt;a href=&quot;index&quot;&gt;는 모델 참조 안내서의 전체 목록을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="902838c5b604ed2bf5f8c9077a75f9aca720449e" translate="yes" xml:space="preserve">
          <source>This document covers the gritty details of Django&amp;rsquo;s forms API. You should read the &lt;a href=&quot;../../topics/forms/index&quot;&gt;introduction to working with forms&lt;/a&gt; first.</source>
          <target state="translated">이 문서는 Django의 양식 API에 대한 구체적 내용을 다룹니다. 먼저 &lt;a href=&quot;../../topics/forms/index&quot;&gt;양식 작업에&lt;/a&gt; 대한 소개를 읽어야합니다 .</target>
        </trans-unit>
        <trans-unit id="544cbbec1b8fa3762dc6e8450bf8c8ad3e6604c9" translate="yes" xml:space="preserve">
          <source>This document describes Django&amp;rsquo;s built-in template tags and filters. It is recommended that you use the &lt;a href=&quot;../contrib/admin/admindocs&quot;&gt;automatic documentation&lt;/a&gt;, if available, as this will also include documentation for any custom tags or filters installed.</source>
          <target state="translated">이 문서는 Django의 내장 템플릿 태그 및 필터에 대해 설명합니다. 사용 가능한 경우 &lt;a href=&quot;../contrib/admin/admindocs&quot;&gt;자동 문서&lt;/a&gt; 를 사용하는 것이 좋습니다. 여기 에는 설치된 모든 사용자 정의 태그 또는 필터에 대한 문서도 포함되므로 가능합니다.</target>
        </trans-unit>
        <trans-unit id="033709290e422fd3b5ffcea670ff7f3a4203cbac" translate="yes" xml:space="preserve">
          <source>This document describes Django&amp;rsquo;s file access APIs for files such as those uploaded by a user. The lower level APIs are general enough that you could use them for other purposes. If you want to handle &amp;ldquo;static files&amp;rdquo; (JS, CSS, etc.), see &lt;a href=&quot;../howto/static-files/index&quot;&gt;Managing static files (e.g. images, JavaScript, CSS)&lt;/a&gt;.</source>
          <target state="translated">이 문서는 사용자가 업로드 한 파일과 같은 파일에 대한 Django의 파일 액세스 API를 설명합니다. 하위 레벨 API는 다른 목적으로 사용할 수있을 정도로 일반적입니다. &quot;정적 파일&quot;(JS, CSS 등)을 처리하려면 &lt;a href=&quot;../howto/static-files/index&quot;&gt;정적 파일 관리 (예 : 이미지, JavaScript, CSS)를 참조하십시오&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="bd8518c2e2577a808f5763d4a2e4dc7d5cc5c498" translate="yes" xml:space="preserve">
          <source>This document describes how to make use of external authentication sources (where the Web server sets the &lt;code&gt;REMOTE_USER&lt;/code&gt; environment variable) in your Django applications. This type of authentication solution is typically seen on intranet sites, with single sign-on solutions such as IIS and Integrated Windows Authentication or Apache and &lt;a href=&quot;https://httpd.apache.org/docs/2.2/mod/mod_authnz_ldap.html&quot;&gt;mod_authnz_ldap&lt;/a&gt;, &lt;a href=&quot;https://www.apereo.org/projects/cas&quot;&gt;CAS&lt;/a&gt;, &lt;a href=&quot;http://weblogin.org&quot;&gt;Cosign&lt;/a&gt;, &lt;a href=&quot;https://www.stanford.edu/services/webauth/&quot;&gt;WebAuth&lt;/a&gt;, &lt;a href=&quot;https://sourceforge.net/projects/mod-auth-sspi&quot;&gt;mod_auth_sspi&lt;/a&gt;, etc.</source>
          <target state="translated">이 문서는 Django 애플리케이션에서 외부 인증 소스 (웹 서버가 &lt;code&gt;REMOTE_USER&lt;/code&gt; 환경 변수를 설정하는)를 사용하는 방법을 설명합니다 . 이 유형의 인증 솔루션은 일반적으로 IIS 및 Windows 통합 인증 또는 Apache 및 &lt;a href=&quot;https://httpd.apache.org/docs/2.2/mod/mod_authnz_ldap.html&quot;&gt;mod_authnz_ldap&lt;/a&gt; , &lt;a href=&quot;https://www.apereo.org/projects/cas&quot;&gt;CAS&lt;/a&gt; , &lt;a href=&quot;http://weblogin.org&quot;&gt;Cosign&lt;/a&gt; , &lt;a href=&quot;https://www.stanford.edu/services/webauth/&quot;&gt;WebAuth&lt;/a&gt; , &lt;a href=&quot;https://sourceforge.net/projects/mod-auth-sspi&quot;&gt;mod_auth_sspi&lt;/a&gt; 등과 같은 싱글 사인온 솔루션이있는 인트라넷 사이트에서 볼 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="76d124b9e2f39ccbf1fa3ade9bdb7f3486a3fe38" translate="yes" xml:space="preserve">
          <source>This document describes the details of the &lt;code&gt;Model&lt;/code&gt; API. It builds on the material presented in the &lt;a href=&quot;../../topics/db/models&quot;&gt;model&lt;/a&gt; and &lt;a href=&quot;../../topics/db/queries&quot;&gt;database query&lt;/a&gt; guides, so you&amp;rsquo;ll probably want to read and understand those documents before reading this one.</source>
          <target state="translated">이 문서는 &lt;code&gt;Model&lt;/code&gt; API 의 세부 사항을 설명합니다 . &lt;a href=&quot;../../topics/db/models&quot;&gt;모델&lt;/a&gt; 및 &lt;a href=&quot;../../topics/db/queries&quot;&gt;데이터베이스 쿼리&lt;/a&gt; 가이드에 제시된 자료를 기반으로하므로이 문서를 읽기 전에 해당 문서를 읽고 이해하고 싶을 것입니다.</target>
        </trans-unit>
        <trans-unit id="d26a08322ac485d05d31fda51379700ed782ed08" translate="yes" xml:space="preserve">
          <source>This document describes the details of the &lt;code&gt;QuerySet&lt;/code&gt; API. It builds on the material presented in the &lt;a href=&quot;../../topics/db/models&quot;&gt;model&lt;/a&gt; and &lt;a href=&quot;../../topics/db/queries&quot;&gt;database query&lt;/a&gt; guides, so you&amp;rsquo;ll probably want to read and understand those documents before reading this one.</source>
          <target state="translated">이 문서는 &lt;code&gt;QuerySet&lt;/code&gt; API 의 세부 사항을 설명합니다 . &lt;a href=&quot;../../topics/db/models&quot;&gt;모델&lt;/a&gt; 및 &lt;a href=&quot;../../topics/db/queries&quot;&gt;데이터베이스 쿼리&lt;/a&gt; 가이드에 제시된 자료를 기반으로하므로이 문서를 읽기 전에 해당 문서를 읽고 이해하고 싶을 것입니다.</target>
        </trans-unit>
        <trans-unit id="566e7a2e0221f12c04a9ab6773a6abddd6419150" translate="yes" xml:space="preserve">
          <source>This document explains all middleware components that come with Django. For information on how to use them and how to write your own middleware, see the &lt;a href=&quot;../topics/http/middleware&quot;&gt;middleware usage guide&lt;/a&gt;.</source>
          <target state="translated">이 문서는 Django와 함께 제공되는 모든 미들웨어 구성 요소를 설명합니다. &lt;a href=&quot;../topics/http/middleware&quot;&gt;미들웨어 사용법&lt;/a&gt; 및 미들웨어 작성 방법에 대한 정보는 미들웨어 사용 안내서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="21941622da02c0227fd75dff8d70c16224be801b" translate="yes" xml:space="preserve">
          <source>This document explains all the possible &lt;a href=&quot;../../topics/db/models#meta-options&quot;&gt;metadata options&lt;/a&gt; that you can give your model in its internal &lt;code&gt;class Meta&lt;/code&gt;.</source>
          <target state="translated">이 문서는 모델에 내부 &lt;code&gt;class Meta&lt;/code&gt; 제공 할 수있는 모든 가능한 &lt;a href=&quot;../../topics/db/models#meta-options&quot;&gt;메타 데이터 옵션&lt;/a&gt; 을 설명합니다 .</target>
        </trans-unit>
        <trans-unit id="f969a5a1fecc77a168362f2d39b1747f7cf58029" translate="yes" xml:space="preserve">
          <source>This document explains how middleware works, how you activate middleware, and how to write your own middleware. Django ships with some built-in middleware you can use right out of the box. They&amp;rsquo;re documented in the &lt;a href=&quot;../../ref/middleware&quot;&gt;built-in middleware reference&lt;/a&gt;.</source>
          <target state="translated">이 문서는 미들웨어 작동 방식, 미들웨어 활성화 방법 및 자체 미들웨어 작성 방법에 대해 설명합니다. Django는 기본 제공 미들웨어와 함께 제공되며 즉시 사용할 수 있습니다. 그것들은 &lt;a href=&quot;../../ref/middleware&quot;&gt;내장 미들웨어 참조 서에&lt;/a&gt; 문서화되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="ad8c78329defa84c0884d6779275ab8867521575" translate="yes" xml:space="preserve">
          <source>This document explains how to output CSV (Comma Separated Values) dynamically using Django views. To do this, you can either use the Python CSV library or the Django template system.</source>
          <target state="translated">이 문서에서는 Django보기를 사용하여 CSV (쉼표로 구분 된 값)를 동적으로 출력하는 방법에 대해 설명합니다. 이를 위해 Python CSV 라이브러리 또는 Django 템플릿 시스템을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="894647d2e9c9f93e52b91bb6a0df0a230350fdbc" translate="yes" xml:space="preserve">
          <source>This document explains how to output PDF files dynamically using Django views. This is made possible by the excellent, open-source &lt;a href=&quot;https://www.reportlab.com/opensource/&quot;&gt;ReportLab&lt;/a&gt; Python PDF library.</source>
          <target state="translated">이 문서는 Django보기를 사용하여 PDF 파일을 동적으로 출력하는 방법을 설명합니다. 이는 우수한 오픈 소스 &lt;a href=&quot;https://www.reportlab.com/opensource/&quot;&gt;ReportLab&lt;/a&gt; Python PDF 라이브러리를 통해 가능합니다.</target>
        </trans-unit>
        <trans-unit id="0b1ee61844ea7fdf16533379755905a5f2c8e37e" translate="yes" xml:space="preserve">
          <source>This document explains how to structure and write database migrations for different scenarios you might encounter. For introductory material on migrations, see &lt;a href=&quot;../topics/migrations&quot;&gt;the topic guide&lt;/a&gt;.</source>
          <target state="translated">이 문서는 발생할 수있는 다양한 시나리오에 대해 데이터베이스 마이그레이션을 구조화하고 작성하는 방법을 설명합니다. 마이그레이션에 대한 소개 자료 &lt;a href=&quot;../topics/migrations&quot;&gt;는 주제 안내서를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="b03baac23853f40f73961af7df9f47520320cf2c" translate="yes" xml:space="preserve">
          <source>This document explains the APIs for &lt;a href=&quot;#django.http.HttpRequest&quot;&gt;&lt;code&gt;HttpRequest&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt; objects, which are defined in the &lt;a href=&quot;#module-django.http&quot;&gt;&lt;code&gt;django.http&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="translated">이 문서는 &lt;a href=&quot;#module-django.http&quot;&gt; &lt;code&gt;django.http&lt;/code&gt; &lt;/a&gt; 모듈에 정의 된 &lt;a href=&quot;#django.http.HttpRequest&quot;&gt; &lt;code&gt;HttpRequest&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#django.http.HttpResponse&quot;&gt; &lt;code&gt;HttpResponse&lt;/code&gt; &lt;/a&gt; 객체 의 API에 대해 설명합니다 .</target>
        </trans-unit>
        <trans-unit id="e0aa17e0fa56e40f748271195ff26ec854e8da93" translate="yes" xml:space="preserve">
          <source>This document explains the Django template system from a technical perspective &amp;ndash; how it works and how to extend it. If you&amp;rsquo;re looking for reference on the language syntax, see &lt;a href=&quot;language&quot;&gt;The Django template language&lt;/a&gt;.</source>
          <target state="translated">이 문서는 장고 템플릿 시스템을 기술적 인 관점에서 설명합니다. 작동 방식과 확장 방법. 언어 구문에 대한 참조를 찾으려면 &lt;a href=&quot;language&quot;&gt;Django 템플릿 언어를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="d8a8b7403c58fdb7fe9782bdf641ed06729e578c" translate="yes" xml:space="preserve">
          <source>This document explains the language syntax of the Django template system. If you&amp;rsquo;re looking for a more technical perspective on how it works and how to extend it, see &lt;a href=&quot;api&quot;&gt;The Django template language: for Python programmers&lt;/a&gt;.</source>
          <target state="translated">이 문서는 Django 템플릿 시스템의 언어 구문을 설명합니다. 작동 방식과 확장 방법에 대한 기술적 인 관점을 찾고 있다면 &lt;a href=&quot;api&quot;&gt;Django 템플릿 언어 : Python 프로그래머를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="9c7fbb4dd17fabf8602c9f527267298186717644" translate="yes" xml:space="preserve">
          <source>This document explains the usage of Django&amp;rsquo;s authentication system in its default configuration. This configuration has evolved to serve the most common project needs, handling a reasonably wide range of tasks, and has a careful implementation of passwords and permissions. For projects where authentication needs differ from the default, Django supports extensive &lt;a href=&quot;customizing&quot;&gt;extension and customization&lt;/a&gt; of authentication.</source>
          <target state="translated">이 문서는 기본 구성에서 Django의 인증 시스템 사용법을 설명합니다. 이 구성은 가장 광범위한 프로젝트 작업을 처리하고 합리적으로 광범위한 작업을 처리하며 암호와 권한을 신중하게 구현합니다. 인증이 기본값과 다른 프로젝트의 경우, Django는 광범위한 인증 &lt;a href=&quot;customizing&quot;&gt;및&lt;/a&gt; 인증 사용자 정의 를 지원 합니다.</target>
        </trans-unit>
        <trans-unit id="7efc231eae9a55af885283dbf98cd95febfd2d79" translate="yes" xml:space="preserve">
          <source>This document explores the details of the GeoDjango Model API. Throughout this section, we&amp;rsquo;ll be using the following geographic model of a &lt;a href=&quot;https://en.wikipedia.org/wiki/ZIP_code&quot;&gt;ZIP code&lt;/a&gt; and of a &lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_elevation_model&quot;&gt;Digital Elevation Model&lt;/a&gt; as our examples:</source>
          <target state="translated">이 문서는 GeoDjango Model API의 세부 사항을 살펴 봅니다. 이 섹션에 걸쳐, 우리는 다음과 같은 지리적 모델을 사용할 것 &lt;a href=&quot;https://en.wikipedia.org/wiki/ZIP_code&quot;&gt;우편 번호&lt;/a&gt; 와의 &lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_elevation_model&quot;&gt;디지털 고도 모델&lt;/a&gt; 우리의 예 등을 :</target>
        </trans-unit>
        <trans-unit id="22646d6f146419e72dc80def95513b9c3a40877d" translate="yes" xml:space="preserve">
          <source>This document has covered the basics and some common usage patterns. For complete details on all the settings, commands, template tags, and other pieces included in &lt;a href=&quot;../../ref/contrib/staticfiles#module-django.contrib.staticfiles&quot;&gt;&lt;code&gt;django.contrib.staticfiles&lt;/code&gt;&lt;/a&gt;, see &lt;a href=&quot;../../ref/contrib/staticfiles&quot;&gt;the staticfiles reference&lt;/a&gt;.</source>
          <target state="translated">이 문서는 기본 사항과 몇 가지 일반적인 사용 패턴을 다루었습니다. &lt;a href=&quot;../../ref/contrib/staticfiles#module-django.contrib.staticfiles&quot;&gt; &lt;code&gt;django.contrib.staticfiles&lt;/code&gt; 에&lt;/a&gt; 포함 된 모든 설정, 명령, 템플릿 태그 및 기타 부분 에 대한 자세한 내용 &lt;a href=&quot;../../ref/contrib/staticfiles&quot;&gt;은 정적 파일 참조를 참조하십시오&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="16711226e7ec7f990284540ed6d67c159df29ec7" translate="yes" xml:space="preserve">
          <source>This document has the API references of lookups, the Django API for building the &lt;code&gt;WHERE&lt;/code&gt; clause of a database query. To learn how to &lt;em&gt;use&lt;/em&gt; lookups, see &lt;a href=&quot;../../topics/db/queries&quot;&gt;Making queries&lt;/a&gt;; to learn how to &lt;em&gt;create&lt;/em&gt; new lookups, see &lt;a href=&quot;../../howto/custom-lookups&quot;&gt;Custom Lookups&lt;/a&gt;.</source>
          <target state="translated">이 문서에는 데이터베이스 쿼리 의 &lt;code&gt;WHERE&lt;/code&gt; 절 을 빌드하기위한 Django API 인 조회에 대한 API 참조가 있습니다. 하는 방법을 알아 보려면 &lt;em&gt;사용&lt;/em&gt; , 조회를 참조 &lt;a href=&quot;../../topics/db/queries&quot;&gt;쿼리를 만드는&lt;/a&gt; ; 새 조회 를 &lt;em&gt;작성&lt;/em&gt; 하는 방법을 알아 보려면 &lt;a href=&quot;../../howto/custom-lookups&quot;&gt;사용자 정의 조회를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="7c1a50700c6555619eec15c47a010c5f7478489a" translate="yes" xml:space="preserve">
          <source>This document is an overview of Django&amp;rsquo;s security features. It includes advice on securing a Django-powered site.</source>
          <target state="translated">이 문서는 Django의 보안 기능에 대한 개요입니다. Django 기반 사이트 보안에 대한 조언이 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="c84560b51e6624b2039b940fd12eeb92b9f69e3d" translate="yes" xml:space="preserve">
          <source>This document is split into two primary sections. First, we explain how to write tests with Django. Then, we explain how to run them.</source>
          <target state="translated">이 문서는 두 가지 기본 섹션으로 나뉩니다. 먼저 Django로 테스트를 작성하는 방법에 대해 설명합니다. 그런 다음 실행 방법을 설명합니다.</target>
        </trans-unit>
        <trans-unit id="2e8197368c11e0a3c1acb5f05bc980e83eeffe0f" translate="yes" xml:space="preserve">
          <source>This document provides API reference material for the components of Django&amp;rsquo;s authentication system. For more details on the usage of these components or how to customize authentication and authorization see the &lt;a href=&quot;../../topics/auth/index&quot;&gt;authentication topic guide&lt;/a&gt;.</source>
          <target state="translated">이 문서는 Django 인증 시스템의 구성 요소에 대한 API 참조 자료를 제공합니다. 이러한 구성 요소 사용 또는 인증 및 권한 부여를 사용자 정의하는 방법에 대한 자세한 내용은 &lt;a href=&quot;../../topics/auth/index&quot;&gt;인증 주제 안내서를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="fb0f0454f8d646679fbd38c6442f28e0bf5cc850" translate="yes" xml:space="preserve">
          <source>This document provides an introduction to the basics of web forms and how they are handled in Django. For a more detailed look at specific areas of the forms API, see &lt;a href=&quot;../../ref/forms/api&quot;&gt;The Forms API&lt;/a&gt;, &lt;a href=&quot;../../ref/forms/fields&quot;&gt;Form fields&lt;/a&gt;, and &lt;a href=&quot;../../ref/forms/validation&quot;&gt;Form and field validation&lt;/a&gt;.</source>
          <target state="translated">이 문서는 웹 양식의 기본 사항과 Django에서 웹 양식을 처리하는 방법을 소개합니다. 양식 API의 특정 영역에 대한 자세한 내용 &lt;a href=&quot;../../ref/forms/api&quot;&gt;은 양식 API&lt;/a&gt; , &lt;a href=&quot;../../ref/forms/fields&quot;&gt;양식 필드&lt;/a&gt; 및 &lt;a href=&quot;../../ref/forms/validation&quot;&gt;양식 및 필드 유효성 검사를 참조하십시오&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="967d3129cc349895cafe473321a1b303bb3b5677" translate="yes" xml:space="preserve">
          <source>This document provides an overview of techniques and tools that can help get your Django code running more efficiently - faster, and using fewer system resources.</source>
          <target state="translated">이 문서는 Django 코드를보다 효율적이고 빠르게 실행하고 적은 시스템 리소스를 사용하는 데 도움이되는 기술과 도구에 대한 개요를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="8880af57ded863c99a4c5232f1300de5b5851772" translate="yes" xml:space="preserve">
          <source>This document tells you what you need to know if you&amp;rsquo;re writing applications that use data or templates that are encoded in something other than ASCII.</source>
          <target state="translated">이 문서는 ASCII 이외의 형식으로 인코딩 된 데이터 또는 템플릿을 사용하는 응용 프로그램을 작성하는 경우 알아야 할 사항을 알려줍니다.</target>
        </trans-unit>
        <trans-unit id="a87ae2efb4790bfa1790aabdbb491fe1953bf7d2" translate="yes" xml:space="preserve">
          <source>This document will get you up and running with Django.</source>
          <target state="translated">이 문서는 Django를 시작하고 실행할 것입니다.</target>
        </trans-unit>
        <trans-unit id="290e9c0b7aa1c73d34cb337fae7a6e9a2496367f" translate="yes" xml:space="preserve">
          <source>This document will guide you through installing Python 3.7 and Django on Windows. It also provides instructions for installing &lt;a href=&quot;https://pypi.org/project/virtualenv/&quot;&gt;virtualenv&lt;/a&gt; and &lt;a href=&quot;https://pypi.org/project/virtualenvwrapper-win/&quot;&gt;virtualenvwrapper&lt;/a&gt;, which make it easier to work on Python projects. This is meant as a beginner&amp;rsquo;s guide for users working on Django projects and does not reflect how Django should be installed when developing patches for Django itself.</source>
          <target state="translated">이 문서는 Windows에 Python 3.7 및 Django를 설치하는 과정을 안내합니다. 또한 &lt;a href=&quot;https://pypi.org/project/virtualenv/&quot;&gt;virtualenv&lt;/a&gt; 및 &lt;a href=&quot;https://pypi.org/project/virtualenvwrapper-win/&quot;&gt;virtualenvwrapper&lt;/a&gt; 설치 지침을 제공 하여 Python 프로젝트에서보다 쉽게 ​​작업 할 수 있습니다. 이는 Django 프로젝트를 작업하는 사용자를위한 초보자 안내서로서 Django 자체 용 패치를 개발할 때 Django를 설치하는 방법을 반영하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="afade6c1854764a7175f32fe0cc17bfdb7af0b8f" translate="yes" xml:space="preserve">
          <source>This doesn&amp;rsquo;t affect what happens to data coming from the variable itself. The variable&amp;rsquo;s contents are still automatically escaped, if necessary, because they&amp;rsquo;re beyond the control of the template author.</source>
          <target state="translated">이것은 변수 자체에서 오는 데이터에 영향을 미치지 않습니다. 변수의 내용은 템플릿 작성자가 제어 할 수 없으므로 필요한 경우 자동으로 이스케이프됩니다.</target>
        </trans-unit>
        <trans-unit id="e4d12db88cb55b81499b029317d86ce08b6463c1" translate="yes" xml:space="preserve">
          <source>This doesn&amp;rsquo;t apply just to foreign keys. It also works with many-to-many relations. For example, we can ask for every author, annotated with the total number of pages considering all the books the author has (co-)authored (note how we use &lt;code&gt;'book'&lt;/code&gt; to specify the &lt;code&gt;Author&lt;/code&gt; -&amp;gt; &lt;code&gt;Book&lt;/code&gt; reverse many-to-many hop):</source>
          <target state="translated">외래 키에만 적용되는 것은 아닙니다. 또한 다 대다 관계에서도 작동합니다. 예를 들어, 저자가 (공동으로) 저술 한 모든 책을 고려하여 총 페이지 수로 주석이 달린 모든 저자를 요청할 수 있습니다 ( &lt;code&gt;'book'&lt;/code&gt; 을 사용하여 &lt;code&gt;Author&lt;/code&gt; 를 지정하는 방법 -&amp;gt; &lt;code&gt;Book&lt;/code&gt; 대다 로 지정하는 방법에 유의하십시오) 홉):</target>
        </trans-unit>
        <trans-unit id="d00e9cd207d5098f3d16ad75218a8ce74d1d4e97" translate="yes" xml:space="preserve">
          <source>This doesn&amp;rsquo;t necessarily control whether or not the user can log in. Authentication backends aren&amp;rsquo;t required to check for the &lt;code&gt;is_active&lt;/code&gt; flag but the default backend (&lt;a href=&quot;#django.contrib.auth.backends.ModelBackend&quot;&gt;&lt;code&gt;ModelBackend&lt;/code&gt;&lt;/a&gt;) and the &lt;a href=&quot;#django.contrib.auth.backends.RemoteUserBackend&quot;&gt;&lt;code&gt;RemoteUserBackend&lt;/code&gt;&lt;/a&gt; do. You can use &lt;a href=&quot;#django.contrib.auth.backends.AllowAllUsersModelBackend&quot;&gt;&lt;code&gt;AllowAllUsersModelBackend&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#django.contrib.auth.backends.AllowAllUsersRemoteUserBackend&quot;&gt;&lt;code&gt;AllowAllUsersRemoteUserBackend&lt;/code&gt;&lt;/a&gt; if you want to allow inactive users to login. In this case, you&amp;rsquo;ll also want to customize the &lt;a href=&quot;../../topics/auth/default#django.contrib.auth.forms.AuthenticationForm&quot;&gt;&lt;code&gt;AuthenticationForm&lt;/code&gt;&lt;/a&gt; used by the &lt;a href=&quot;../../topics/auth/default#django.contrib.auth.views.LoginView&quot;&gt;&lt;code&gt;LoginView&lt;/code&gt;&lt;/a&gt; as it rejects inactive users. Be aware that the permission-checking methods such as &lt;a href=&quot;#django.contrib.auth.models.User.has_perm&quot;&gt;&lt;code&gt;has_perm()&lt;/code&gt;&lt;/a&gt; and the authentication in the Django admin all return &lt;code&gt;False&lt;/code&gt; for inactive users.</source>
          <target state="translated">이것은 반드시 사용자가 로그인 할 수 있는지 여부를 제어하지는 않습니다. 인증 백엔드는 &lt;code&gt;is_active&lt;/code&gt; 플래그 를 검사 할 필요는 없지만 기본 백엔드 ( &lt;a href=&quot;#django.contrib.auth.backends.ModelBackend&quot;&gt; &lt;code&gt;ModelBackend&lt;/code&gt; &lt;/a&gt; ) 및 &lt;a href=&quot;#django.contrib.auth.backends.RemoteUserBackend&quot;&gt; &lt;code&gt;RemoteUserBackend&lt;/code&gt; &lt;/a&gt; 는 확인합니다. 비활성 사용자의 로그인을 허용 하려면 &lt;a href=&quot;#django.contrib.auth.backends.AllowAllUsersModelBackend&quot;&gt; &lt;code&gt;AllowAllUsersModelBackend&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;#django.contrib.auth.backends.AllowAllUsersRemoteUserBackend&quot;&gt; &lt;code&gt;AllowAllUsersRemoteUserBackend&lt;/code&gt; 를&lt;/a&gt; 사용할 수 있습니다 . 이 경우, 당신은 또한 사용자 정의 할 수 있습니다 &lt;a href=&quot;../../topics/auth/default#django.contrib.auth.forms.AuthenticationForm&quot;&gt; &lt;code&gt;AuthenticationForm&lt;/code&gt; &lt;/a&gt; 에 의해 사용 &lt;a href=&quot;../../topics/auth/default#django.contrib.auth.views.LoginView&quot;&gt; &lt;code&gt;LoginView&lt;/code&gt; 를&lt;/a&gt; 비활성 사용자를 거부한다. &lt;a href=&quot;#django.contrib.auth.models.User.has_perm&quot;&gt; &lt;code&gt;has_perm()&lt;/code&gt; &lt;/a&gt; 과 같은 권한 확인 방법과 Django admin의 인증은 모두 비활성 사용자에 대해 &lt;code&gt;False&lt;/code&gt; 를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="a8caee5635d7da4c29e177735dbd0278a714db4e" translate="yes" xml:space="preserve">
          <source>This dotted pair describes the name of the Django app (which must be in your &lt;a href=&quot;../../ref/settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt;), and the name of the Django model that you wish to use as your user model.</source>
          <target state="translated">이 점 쌍은 Django 앱의 이름 ( &lt;a href=&quot;../../ref/settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; 에&lt;/a&gt; 있어야 함 )과 사용자 모델로 사용하려는 Django 모델의 이름을 설명합니다.</target>
        </trans-unit>
        <trans-unit id="5afbcf97829b0e93392116ba9d7dd0af83075c3c" translate="yes" xml:space="preserve">
          <source>This emulates the &lt;code&gt;gettext&lt;/code&gt; function but does nothing, returning whatever is passed to it:</source>
          <target state="translated">이것은 &lt;code&gt;gettext&lt;/code&gt; 함수를 에뮬레이트 하지만 아무것도 전달하지 않고 전달 된 것을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="2029a8b0e6aca5caab4b6c4f8421514a74f117fa" translate="yes" xml:space="preserve">
          <source>This enables filtering, ordering, and other query operations on &lt;code&gt;Bookmark&lt;/code&gt; from &lt;code&gt;TaggedItem&lt;/code&gt;:</source>
          <target state="translated">이 필터링, 정렬 및 다른 쿼리 작업 할 수 있습니다 &lt;code&gt;Bookmark&lt;/code&gt; 에서 &lt;code&gt;TaggedItem&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="79841819ca2a800d1b6ea034bd42fbb84750214d" translate="yes" xml:space="preserve">
          <source>This enables you to squash and not mess up systems currently in production that aren&amp;rsquo;t fully up-to-date yet. The recommended process is to squash, keeping the old files, commit and release, wait until all systems are upgraded with the new release (or if you&amp;rsquo;re a third-party project, ensure your users upgrade releases in order without skipping any), and then remove the old files, commit and do a second release.</source>
          <target state="translated">이를 통해 현재 완전히 최신 상태가 아닌 생산중인 시스템을 스쿼시하고 엉망으로 만들 수 없습니다. 권장되는 프로세스는 스쿼시, 이전 파일 유지, 커밋 및 릴리스, 모든 시스템이 새 릴리스로 업그레이드 될 때까지 (또는 타사 프로젝트 인 경우 사용자가 건너 뛰지 않고 릴리스를 순서대로 업그레이드하도록) 대기하는 것입니다. 그런 다음 이전 파일을 제거하고 커밋하고 두 번째 릴리스를 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="a729ffd47b9fd37ed910ccfca1df88d310082424" translate="yes" xml:space="preserve">
          <source>This ensures all tables and columns will use UTF-8 by default.</source>
          <target state="translated">이렇게하면 모든 테이블과 열이 기본적으로 UTF-8을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="dd5c1fda39e6b863f198b90e5554f80a714096af" translate="yes" xml:space="preserve">
          <source>This ensures that deserializing is a non-destructive operation even if the data in your serialized representation doesn&amp;rsquo;t match what&amp;rsquo;s currently in the database. Usually, working with these &lt;code&gt;DeserializedObject&lt;/code&gt; instances looks something like:</source>
          <target state="translated">직렬화 표현의 데이터가 현재 데이터베이스에있는 데이터와 일치하지 않더라도 역 직렬화는 비파괴 작업입니다. 일반적으로 이러한 &lt;code&gt;DeserializedObject&lt;/code&gt; 인스턴스 작업은 다음 과 같습니다.</target>
        </trans-unit>
        <trans-unit id="44d4eb7ce781126408b386700b398bdba39c9b03" translate="yes" xml:space="preserve">
          <source>This ensures that further lookups like &lt;code&gt;abs__lte&lt;/code&gt; behave as they would for a &lt;code&gt;FloatField&lt;/code&gt;.</source>
          <target state="translated">이 보장하지만 더 조회를 좋아하는 &lt;code&gt;abs__lte&lt;/code&gt; 행동하라 그들이에 대해서와 같은 &lt;code&gt;FloatField&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="ed289593a2973a4ff43ed7d2895e9227f33109e4" translate="yes" xml:space="preserve">
          <source>This ensures that only forms that have originated from trusted domains can be used to POST data back.</source>
          <target state="translated">이렇게하면 트러스트 된 도메인에서 시작된 양식 만 데이터를 다시 게시하는 데 사용될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1c94877266da84c92d34a9ec0430b63e92ea4577" translate="yes" xml:space="preserve">
          <source>This example &lt;code&gt;Task&lt;/code&gt; model creates two custom permissions, i.e., actions users can or cannot do with &lt;code&gt;Task&lt;/code&gt; instances, specific to your application:</source>
          <target state="translated">이 예제 &lt;code&gt;Task&lt;/code&gt; 모델은 두 가지 사용자 지정 권한, 즉 사용자가 응용 프로그램과 관련된 &lt;code&gt;Task&lt;/code&gt; 인스턴스로 수행 할 수 있거나 수행 할 수없는 작업을 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="aa190ccfe414171bf40c299883ef107cb178c96c" translate="yes" xml:space="preserve">
          <source>This example allows translators to translate part of the URL. If &amp;ldquo;person&amp;rdquo; is translated to &amp;ldquo;persona&amp;rdquo;, the regular expression will match &lt;code&gt;persona/(?P&amp;lt;pk&amp;gt;\d+)/$&lt;/code&gt;, e.g. &lt;code&gt;persona/5/&lt;/code&gt;.</source>
          <target state="translated">이 예는 번역가가 URL의 일부를 번역 할 수 있도록합니다. &quot;person&quot;이 &quot;persona&quot;로 변환되면 정규식은 &lt;code&gt;persona/(?P&amp;lt;pk&amp;gt;\d+)/$&lt;/code&gt; 와 일치합니다 ( 예 : &lt;code&gt;persona/5/&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8d3424b9ca7467adf3d92798f97b9aa0cdff6b3e" translate="yes" xml:space="preserve">
          <source>This example allows you to call both &lt;code&gt;authors()&lt;/code&gt; and &lt;code&gt;editors()&lt;/code&gt; directly from the manager &lt;code&gt;Person.people&lt;/code&gt;.</source>
          <target state="translated">이 예제를 사용하면 &lt;code&gt;Person.people&lt;/code&gt; 관리자에서 &lt;code&gt;authors()&lt;/code&gt; 및 &lt;code&gt;editors()&lt;/code&gt; 직접 호출 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e5320d0599a0af45850960a9aa4c0205aac247c4" translate="yes" xml:space="preserve">
          <source>This example allows you to request &lt;code&gt;Person.authors.all()&lt;/code&gt;, &lt;code&gt;Person.editors.all()&lt;/code&gt;, and &lt;code&gt;Person.people.all()&lt;/code&gt;, yielding predictable results.</source>
          <target state="translated">이 예에서는 &lt;code&gt;Person.authors.all()&lt;/code&gt; , &lt;code&gt;Person.editors.all()&lt;/code&gt; 및 &lt;code&gt;Person.people.all()&lt;/code&gt; 을 요청 하여 예측 가능한 결과를 생성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="357432278c946cdd5abbf5d0c24c225f1f7b8544" translate="yes" xml:space="preserve">
          <source>This example also pointed out another interesting technique: using multiple managers on the same model. You can attach as many &lt;code&gt;Manager()&lt;/code&gt; instances to a model as you&amp;rsquo;d like. This is a non-repetitive way to define common &amp;ldquo;filters&amp;rdquo; for your models.</source>
          <target state="translated">이 예제는 또한 동일한 모델에서 여러 관리자를 사용하는 또 다른 흥미로운 기술을 지적했습니다. 원하는 수의 &lt;code&gt;Manager()&lt;/code&gt; 인스턴스를 모델에 연결할 수 있습니다 . 이는 모델에 대한 일반적인 &quot;필터&quot;를 정의하는 비 반복적 인 방법입니다.</target>
        </trans-unit>
        <trans-unit id="fa4f9d0f80ed4def5bb8bde9e478d3b93a7a10f7" translate="yes" xml:space="preserve">
          <source>This example compares the dictionaries of &lt;code&gt;values()&lt;/code&gt; with the normal model objects:</source>
          <target state="translated">이 예제는 &lt;code&gt;values()&lt;/code&gt; 사전을 일반 모델 객체와 비교 합니다.</target>
        </trans-unit>
        <trans-unit id="c3fc5de9bd539f106e851530a20cd3748f205570" translate="yes" xml:space="preserve">
          <source>This example defined a router to handle interaction with models from the &lt;code&gt;auth&lt;/code&gt; app, and other routers to handle interaction with all other apps. If you left your &lt;code&gt;default&lt;/code&gt; database empty and don&amp;rsquo;t want to define a catch-all database router to handle all apps not otherwise specified, your routers must handle the names of all apps in &lt;a href=&quot;../../ref/settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; before you migrate. See &lt;a href=&quot;#contrib-app-multiple-databases&quot;&gt;Behavior of contrib apps&lt;/a&gt; for information about contrib apps that must be together in one database.</source>
          <target state="translated">이 예에서는 &lt;code&gt;auth&lt;/code&gt; 앱의 모델과의 상호 작용을 처리하는 라우터 와 다른 모든 앱과의 상호 작용을 처리하는 다른 라우터를 정의했습니다 . &lt;code&gt;default&lt;/code&gt; 데이터베이스를 비워 두고 별도로 지정하지 않은 모든 앱을 처리하기위한 범용 데이터베이스 라우터를 정의하지 않으려는 경우, 라우터는 마이그레이션하기 전에 &lt;a href=&quot;../../ref/settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt; 의 모든 앱 이름을 처리해야합니다 . 하나의 데이터베이스에 함께 있어야하는 &lt;a href=&quot;#contrib-app-multiple-databases&quot;&gt;contrib 앱에&lt;/a&gt; 대한 정보는 contrib 앱의 동작을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="90962698e2660d328340473477806fb2659885c6" translate="yes" xml:space="preserve">
          <source>This example does not handle any errors in the hidden fields. Usually, an error in a hidden field is a sign of form tampering, since normal form interaction won&amp;rsquo;t alter them. However, you could easily insert some error displays for those form errors, as well.</source>
          <target state="translated">이 예는 숨겨진 필드의 오류를 처리하지 않습니다. 일반적으로 숨겨진 필드의 오류는 일반적인 양식 상호 작용으로 변경되지 않으므로 양식 변조의 징후입니다. 그러나 해당 양식 오류에 대한 오류 표시를 쉽게 삽입 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="2c11bc44788931b8fccd8f8fc15ebe77d882ae8d" translate="yes" xml:space="preserve">
          <source>This example enables all four included validators:</source>
          <target state="translated">이 예제는 포함 된 네 가지 유효성 검사기를 모두 활성화합니다.</target>
        </trans-unit>
        <trans-unit id="25c95a2ad4a72e5bc24dec4ea3b7bd46da57c7e8" translate="yes" xml:space="preserve">
          <source>This example excludes all entries whose &lt;code&gt;pub_date&lt;/code&gt; is later than 2005-1-3 AND whose &lt;code&gt;headline&lt;/code&gt; is &amp;ldquo;Hello&amp;rdquo;:</source>
          <target state="translated">이 예에서는 &lt;code&gt;pub_date&lt;/code&gt; 가 2005-1-3 이상이고 &lt;code&gt;headline&lt;/code&gt; 이 &quot;Hello&quot; 인 모든 항목을 제외합니다 .</target>
        </trans-unit>
        <trans-unit id="d1c0cead8fec1d01f0d3b934a1bb99a3ec67055b" translate="yes" xml:space="preserve">
          <source>This example excludes all entries whose &lt;code&gt;pub_date&lt;/code&gt; is later than 2005-1-3 OR whose headline is &amp;ldquo;Hello&amp;rdquo;:</source>
          <target state="translated">이 예에서는 &lt;code&gt;pub_date&lt;/code&gt; 가 2005-1-3 이후이거나 제목이 &quot;Hello&quot; 인 모든 항목을 제외합니다 .</target>
        </trans-unit>
        <trans-unit id="714271c185a4e223115cdefb87cd369bba440e98" translate="yes" xml:space="preserve">
          <source>This example illustrates all possible attributes and methods for a &lt;a href=&quot;#django.contrib.syndication.views.Feed&quot;&gt;&lt;code&gt;Feed&lt;/code&gt;&lt;/a&gt; class:</source>
          <target state="translated">이 예제는 &lt;a href=&quot;#django.contrib.syndication.views.Feed&quot;&gt; &lt;code&gt;Feed&lt;/code&gt; &lt;/a&gt; 클래스에 가능한 모든 속성과 메소드를 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="b44c24c7b195d50fbf95eff850fef9ac70f06a0a" translate="yes" xml:space="preserve">
          <source>This example includes the contents of the template &lt;code&gt;&quot;foo/bar.html&quot;&lt;/code&gt;:</source>
          <target state="translated">이 예제에는 &lt;code&gt;&quot;foo/bar.html&quot;&lt;/code&gt; 템플리트의 컨텐츠가 포함됩니다 .</target>
        </trans-unit>
        <trans-unit id="08f8de7214970c9b3875d023c1f12776664474de" translate="yes" xml:space="preserve">
          <source>This example includes the contents of the template whose name is contained in the variable &lt;code&gt;template_name&lt;/code&gt;:</source>
          <target state="translated">이 예제에는 이름이 &lt;code&gt;template_name&lt;/code&gt; 변수에 포함 된 템플리트의 컨텐츠가 포함됩니다 .</target>
        </trans-unit>
        <trans-unit id="f2c7dec217f9ef53d5c26237866212c544ad2348" translate="yes" xml:space="preserve">
          <source>This example is equivalent to:</source>
          <target state="translated">이 예는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="4a10597d63b89a709c98b5ae2fd131fd9847c056" translate="yes" xml:space="preserve">
          <source>This example is intended as a demonstration of how the router infrastructure can be used to alter database usage. It intentionally ignores some complex issues in order to demonstrate how routers are used.</source>
          <target state="translated">이 예는 라우터 인프라를 사용하여 데이터베이스 사용을 변경하는 방법을 보여주기위한 것입니다. 라우터 사용 방법을 보여주기 위해 일부 복잡한 문제를 의도적으로 무시합니다.</target>
        </trans-unit>
        <trans-unit id="2716d01b5ed615ba47f33630354a3757e6ea9e03" translate="yes" xml:space="preserve">
          <source>This example is somewhat contrived, but it nicely demonstrates the range of functionality which is possible in a database backend independent manner, and without duplicating functionality already in Django.</source>
          <target state="translated">이 예제는 다소 고안되었지만 데이터베이스 백엔드 독립적 인 방식으로 가능하며 Django에서 이미 기능을 복제하지 않고도 가능한 기능 범위를 잘 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="c48a6b4067dd5fc4d902f391664abb52d365a4bf" translate="yes" xml:space="preserve">
          <source>This example links the given user with the permission models with PKs 46 and 47.</source>
          <target state="translated">이 예에서는 지정된 사용자를 PK 46 및 47의 권한 모델과 연결합니다.</target>
        </trans-unit>
        <trans-unit id="fcaf4ad1de50ae30e6803e616be4a926731d3407" translate="yes" xml:space="preserve">
          <source>This example model defines a &lt;code&gt;Person&lt;/code&gt;, which has a &lt;code&gt;first_name&lt;/code&gt; and &lt;code&gt;last_name&lt;/code&gt;:</source>
          <target state="translated">이 예제 모델은 &lt;code&gt;first_name&lt;/code&gt; 과 &lt;code&gt;last_name&lt;/code&gt; 이있는 &lt;code&gt;Person&lt;/code&gt; 을 정의합니다 .</target>
        </trans-unit>
        <trans-unit id="2f39826b4d14c123649229eb69915cf6fe2dca3a" translate="yes" xml:space="preserve">
          <source>This example restricts languages that are available for automatic selection to German and English (and any sublanguage, like &lt;code&gt;de-ch&lt;/code&gt; or &lt;code&gt;en-us&lt;/code&gt;).</source>
          <target state="translated">이 예에서는 자동 선택에 사용할 수있는 언어를 독일어 및 영어 (및 &lt;code&gt;de-ch&lt;/code&gt; 또는 &lt;code&gt;en-us&lt;/code&gt; 와 같은 하위 언어 )로 제한합니다.</target>
        </trans-unit>
        <trans-unit id="d6c793666e2882e5183f72bef1c5f6a3b509b2cc" translate="yes" xml:space="preserve">
          <source>This example retrieves all &lt;code&gt;Blog&lt;/code&gt; objects which have at least one &lt;code&gt;Entry&lt;/code&gt; whose &lt;code&gt;headline&lt;/code&gt; contains &lt;code&gt;'Lennon'&lt;/code&gt;:</source>
          <target state="translated">이 예제 는 &lt;code&gt;headline&lt;/code&gt; 에 &lt;code&gt;'Lennon'&lt;/code&gt; 이 포함 된 하나 이상의 &lt;code&gt;Entry&lt;/code&gt; 가있는 모든 &lt;code&gt;Blog&lt;/code&gt; 오브젝트를 검색합니다 .</target>
        </trans-unit>
        <trans-unit id="3aff3ca332316f467d2935d5e48649e6e11044b4" translate="yes" xml:space="preserve">
          <source>This example retrieves all &lt;code&gt;Entry&lt;/code&gt; objects with a &lt;code&gt;Blog&lt;/code&gt; whose &lt;code&gt;name&lt;/code&gt; is &lt;code&gt;'Beatles Blog'&lt;/code&gt;:</source>
          <target state="translated">이 예제 는 &lt;code&gt;name&lt;/code&gt; 이 &lt;code&gt;'Beatles Blog'&lt;/code&gt; 인 &lt;code&gt;Blog&lt;/code&gt; 가진 모든 &lt;code&gt;Entry&lt;/code&gt; 오브젝트 를 검색합니다 .</target>
        </trans-unit>
        <trans-unit id="8cd57bc85866b095be81976a8860d84a9ea5e63f" translate="yes" xml:space="preserve">
          <source>This example returns the latest &lt;code&gt;Entry&lt;/code&gt; in the table, according to the &lt;code&gt;pub_date&lt;/code&gt; field:</source>
          <target state="translated">이 예는 &lt;code&gt;pub_date&lt;/code&gt; 필드 에 따라 테이블 의 최신 &lt;code&gt;Entry&lt;/code&gt; 을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="dc7dd6a3def2aa6c90249279628a60b9762ab050" translate="yes" xml:space="preserve">
          <source>This example sets up Django at the site root, but serves &lt;code&gt;robots.txt&lt;/code&gt;, &lt;code&gt;favicon.ico&lt;/code&gt;, and anything in the &lt;code&gt;/static/&lt;/code&gt; and &lt;code&gt;/media/&lt;/code&gt; URL space as a static file. All other URLs will be served using mod_wsgi:</source>
          <target state="translated">이 예제는 사이트 루트에 Django를 설정하지만 &lt;code&gt;robots.txt&lt;/code&gt; , &lt;code&gt;favicon.ico&lt;/code&gt; 및 &lt;code&gt;/static/&lt;/code&gt; 및 &lt;code&gt;/media/&lt;/code&gt; URL 공간의 모든 것을 정적 파일로 제공합니다. 다른 모든 URL은 mod_wsgi를 사용하여 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="7b866818c4aa08445025d08ae5f45366df5c6a98" translate="yes" xml:space="preserve">
          <source>This example sets up two admin sites. On the first site, the &lt;code&gt;Author&lt;/code&gt; and &lt;code&gt;Publisher&lt;/code&gt; objects are exposed; &lt;code&gt;Publisher&lt;/code&gt; objects have a tabular inline showing books published by that publisher. The second site exposes just publishers, without the inlines.</source>
          <target state="translated">이 예에서는 두 개의 관리 사이트를 설정합니다. 첫 번째 사이트에서 &lt;code&gt;Author&lt;/code&gt; 및 &lt;code&gt;Publisher&lt;/code&gt; 개체가 노출됩니다. &lt;code&gt;Publisher&lt;/code&gt; 개체에는 해당 출판사가 출판 한 책을 보여주는 표 형식의 인라인이 있습니다. 두 번째 사이트는 인라인없이 게시자 만 노출합니다.</target>
        </trans-unit>
        <trans-unit id="a5f96f474060d75b81e5ea308ccb5c0cd023867c" translate="yes" xml:space="preserve">
          <source>This example shows how you might use both &lt;a href=&quot;#django.contrib.auth.authenticate&quot;&gt;&lt;code&gt;authenticate()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#django.contrib.auth.login&quot;&gt;&lt;code&gt;login()&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">이 예제는 &lt;a href=&quot;#django.contrib.auth.authenticate&quot;&gt; &lt;code&gt;authenticate()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#django.contrib.auth.login&quot;&gt; &lt;code&gt;login()&lt;/code&gt; &lt;/a&gt; 모두 사용하는 방법을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="fdcedda9ee775aa8e46a12b23e6c70556b9ff1b5" translate="yes" xml:space="preserve">
          <source>This example uses Django&amp;rsquo;s &lt;a href=&quot;../topics/templates&quot;&gt;template system&lt;/a&gt;, which has several powerful features but strives to stay simple enough for non-programmers to use.</source>
          <target state="translated">이 예제 는 몇 가지 강력한 기능을 가지고 있지만 프로그래머가 아닌 사람이 사용할 수 있도록 단순하게 유지하기 위해 노력 하는 Django의 &lt;a href=&quot;../topics/templates&quot;&gt;템플릿 시스템&lt;/a&gt; 을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="5aeb241003b54f4ef81d79f4474cc5e13bbe5b5f" translate="yes" xml:space="preserve">
          <source>This example uses the default &lt;code&gt;InlineModelAdmin&lt;/code&gt; values for the &lt;code&gt;Membership&lt;/code&gt; model, and limits the extra add forms to one. This could be customized using any of the options available to &lt;code&gt;InlineModelAdmin&lt;/code&gt; classes.</source>
          <target state="translated">이 예에서는 &lt;code&gt;Membership&lt;/code&gt; 모델에 기본 &lt;code&gt;InlineModelAdmin&lt;/code&gt; 값을 사용하고 추가 추가 양식을 하나로 제한합니다. &lt;code&gt;InlineModelAdmin&lt;/code&gt; 클래스에 사용 가능한 옵션을 사용하여 사용자 정의 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="54581b00683b2ca5d05723bd6b2cf8c1d229fee3" translate="yes" xml:space="preserve">
          <source>This example will automatically open Firefox then go to the login page, enter the credentials and press the &amp;ldquo;Log in&amp;rdquo; button. Selenium offers other drivers in case you do not have Firefox installed or wish to use another browser. The example above is just a tiny fraction of what the Selenium client can do; check out the &lt;a href=&quot;https://selenium-python.readthedocs.io/api.html&quot;&gt;full reference&lt;/a&gt; for more details.</source>
          <target state="translated">이 예제는 Firefox를 자동으로 연 다음 로그인 페이지로 이동하여 자격 증명을 입력하고 &quot;로그인&quot;버튼을 누릅니다. Selenium은 Firefox가 설치되어 있지 않거나 다른 브라우저를 사용하려는 경우 다른 드라이버를 제공합니다. 위의 예는 Selenium 클라이언트가 할 수있는 것의 일부에 지나지 않습니다. 자세한 내용 은 &lt;a href=&quot;https://selenium-python.readthedocs.io/api.html&quot;&gt;전체 참조&lt;/a&gt; 를 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="0c7e9ff34e214ef933d765157704636376347ccf" translate="yes" xml:space="preserve">
          <source>This example will override the &lt;a href=&quot;../../ref/settings#std:setting-LOGIN_URL&quot;&gt;&lt;code&gt;LOGIN_URL&lt;/code&gt;&lt;/a&gt; setting for the code in the &lt;code&gt;with&lt;/code&gt; block and reset its value to the previous state afterwards.</source>
          <target state="translated">이 예제는 &lt;code&gt;with&lt;/code&gt; 블록 의 코드에 대한 &lt;a href=&quot;../../ref/settings#std:setting-LOGIN_URL&quot;&gt; &lt;code&gt;LOGIN_URL&lt;/code&gt; &lt;/a&gt; 설정을 무시하고 그 값을 이전 상태로 재설정합니다.</target>
        </trans-unit>
        <trans-unit id="14336c4b6536db2051dc3a449157df7f4d1a26e8" translate="yes" xml:space="preserve">
          <source>This example will raise an exception, since the inner query is trying to extract two field values, where only one is expected:</source>
          <target state="translated">내부 쿼리가 하나의 필드 만 예상되는 두 개의 필드 값을 추출하려고하기 때문에이 예제는 예외를 발생시킵니다.</target>
        </trans-unit>
        <trans-unit id="2754102110d2e5144d816f40a6629202399ed306" translate="yes" xml:space="preserve">
          <source>This example won&amp;rsquo;t work if any of the models in &lt;code&gt;myapp&lt;/code&gt; contain relationships to models outside of the &lt;code&gt;other&lt;/code&gt; database. &lt;a href=&quot;#no-cross-database-relations&quot;&gt;Cross-database relationships&lt;/a&gt; introduce referential integrity problems that Django can&amp;rsquo;t currently handle.</source>
          <target state="translated">&lt;code&gt;myapp&lt;/code&gt; 의 모델 중 하나에 &lt;code&gt;other&lt;/code&gt; 데이터베이스 외부의 모델과의 관계가 포함되어 있으면이 예제가 작동하지 않습니다 . &lt;a href=&quot;#no-cross-database-relations&quot;&gt;데이터베이스 간 관계&lt;/a&gt; 에서는 Django가 현재 처리 할 수없는 참조 무결성 문제가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="c769ea2da6f7bffb38f15a1598bbb3ad2fea7f3e" translate="yes" xml:space="preserve">
          <source>This example would return this HTML:</source>
          <target state="translated">이 예제는 다음 HTML을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="74da065ac3ea1db671b0e69072ed6f63aed07af1" translate="yes" xml:space="preserve">
          <source>This exception also happens if you forget to call &lt;a href=&quot;#django.setup&quot;&gt;&lt;code&gt;django.setup()&lt;/code&gt;&lt;/a&gt; in a standalone Python script.</source>
          <target state="translated">독립형 Python 스크립트에서 &lt;a href=&quot;#django.setup&quot;&gt; &lt;code&gt;django.setup()&lt;/code&gt; &lt;/a&gt; 호출을 잊어 버린 경우 에도이 예외가 발생합니다 .</target>
        </trans-unit>
        <trans-unit id="f3d70c58a0b6ccdae635689607d46efa05620cff" translate="yes" xml:space="preserve">
          <source>This exception is raised by the ORM in a couple places, for example by &lt;a href=&quot;querysets#django.db.models.query.QuerySet.get&quot;&gt;&lt;code&gt;QuerySet.get()&lt;/code&gt;&lt;/a&gt; when an object is not found for the given query parameters.</source>
          <target state="translated">이 예외는 ORM에 의해 두 곳에서 발생합니다 (예 : 주어진 조회 매개 변수에 대해 오브젝트를 찾을 수없는 경우 &lt;a href=&quot;querysets#django.db.models.query.QuerySet.get&quot;&gt; &lt;code&gt;QuerySet.get()&lt;/code&gt; &lt;/a&gt; 의해 발생) .</target>
        </trans-unit>
        <trans-unit id="dcc9ce72e7ac180755e01bc4ded35e7d5cd021bc" translate="yes" xml:space="preserve">
          <source>This exception is raised when a template cannot be found. It accepts the following optional arguments for populating the &lt;a href=&quot;#template-postmortem&quot;&gt;template postmortem&lt;/a&gt; on the debug page:</source>
          <target state="translated">템플릿을 찾을 수없는 경우이 예외가 발생합니다. 디버그 페이지 에서 &lt;a href=&quot;#template-postmortem&quot;&gt;템플리트 사후 데이터&lt;/a&gt; 를 채우기 위해 다음과 같은 선택적 인수를 허용합니다 .</target>
        </trans-unit>
        <trans-unit id="661018432796deca01068795bf77f26293b6184f" translate="yes" xml:space="preserve">
          <source>This exception is raised when a template was found but contains errors.</source>
          <target state="translated">이 예외는 템플릿을 찾았지만 오류가있을 때 발생합니다.</target>
        </trans-unit>
        <trans-unit id="b1c480310901b79c08c80d6852013708c9bc94d0" translate="yes" xml:space="preserve">
          <source>This exception is raised when attempting to use models before the &lt;a href=&quot;applications#app-loading-process&quot;&gt;app loading process&lt;/a&gt;, which initializes the ORM, is complete.</source>
          <target state="translated">ORM을 초기화하는 &lt;a href=&quot;applications#app-loading-process&quot;&gt;앱 로딩 프로세스&lt;/a&gt; 가 완료 되기 전에 모델을 사용하려고 할 때이 예외가 발생 합니다.</target>
        </trans-unit>
        <trans-unit id="0f12987597476c6dca21c50adac637711a3bff9b" translate="yes" xml:space="preserve">
          <source>This feature is meant as a shortcut, not as definitive model generation. After you run it, you&amp;rsquo;ll want to look over the generated models yourself to make customizations. In particular, you&amp;rsquo;ll need to rearrange models&amp;rsquo; order, so that models that refer to other models are ordered properly.</source>
          <target state="translated">이 기능은 결정적인 모델 생성이 아니라 바로 가기를 의미합니다. 실행 한 후 생성 된 모델을 직접 살펴보고 사용자 정의를 수행 할 수 있습니다. 특히 다른 모델을 참조하는 모델이 올바르게 주문되도록 모델 순서를 다시 정렬해야합니다.</target>
        </trans-unit>
        <trans-unit id="6a8310f8b6576635e06d902b61fc52d93801e346" translate="yes" xml:space="preserve">
          <source>This feature is meant as a shortcut, not as definitive model generation. See the &lt;a href=&quot;../ref/django-admin#django-admin-inspectdb&quot;&gt;&lt;code&gt;documentation of inspectdb&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">이 기능은 결정적인 모델 생성이 아니라 바로 가기를 의미합니다. 자세한 내용 &lt;a href=&quot;../ref/django-admin#django-admin-inspectdb&quot;&gt; &lt;code&gt;documentation of inspectdb&lt;/code&gt; &lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="72dc5bc1fd640f216cdede8c77bef36ca87ed638" translate="yes" xml:space="preserve">
          <source>This feature is only available for Python 3.7 and later.</source>
          <target state="translated">이 기능은 Python 3.7 이상에서만 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f8648bff2258186861e960616a9f4da5433a3015" translate="yes" xml:space="preserve">
          <source>This feature is useful in avoiding repetition in templates. You can set the timeout in a variable, in one place, and reuse that value.</source>
          <target state="translated">이 기능은 템플릿에서 반복을 피하는 데 유용합니다. 변수에서 시간 초과를 한 곳에서 설정하고 해당 값을 재사용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d4ac491bbb97ef14d6cabe64043f2a6e21a1c335" translate="yes" xml:space="preserve">
          <source>This feature isn&amp;rsquo;t available on Windows. It doesn&amp;rsquo;t work with the Oracle database backend either.</source>
          <target state="translated">이 기능은 Windows에서 사용할 수 없습니다. Oracle 데이터베이스 백엔드에서도 작동하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="71761f15b7f4ea3ba4f78167d77a0dc9dbbcf1be" translate="yes" xml:space="preserve">
          <source>This field handles arrays by reproducing the underlying field a fixed number of times.</source>
          <target state="translated">이 필드는 기본 필드를 고정 된 횟수로 재생하여 배열을 처리합니다.</target>
        </trans-unit>
        <trans-unit id="83121cfeb2b1bba555edab73e71b2df464317fa4" translate="yes" xml:space="preserve">
          <source>This field is abstract and must be subclassed. In contrast with the single-value fields, subclasses of &lt;a href=&quot;#django.forms.MultiValueField&quot;&gt;&lt;code&gt;MultiValueField&lt;/code&gt;&lt;/a&gt; must not implement &lt;a href=&quot;#django.forms.Field.clean&quot;&gt;&lt;code&gt;clean()&lt;/code&gt;&lt;/a&gt; but instead - implement &lt;a href=&quot;#django.forms.MultiValueField.compress&quot;&gt;&lt;code&gt;compress()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 필드는 추상적이며 서브 클래스 여야합니다. 단일 값 필드와 달리 &lt;a href=&quot;#django.forms.MultiValueField&quot;&gt; &lt;code&gt;MultiValueField&lt;/code&gt; 의&lt;/a&gt; 서브 클래스는 &lt;a href=&quot;#django.forms.Field.clean&quot;&gt; &lt;code&gt;clean()&lt;/code&gt; &lt;/a&gt; 구현하지 말고 &lt;a href=&quot;#django.forms.MultiValueField.compress&quot;&gt; &lt;code&gt;compress()&lt;/code&gt; &lt;/a&gt; 구현 해야합니다 .</target>
        </trans-unit>
        <trans-unit id="71e64914a7c96731f85e6842feb1379ee781f935" translate="yes" xml:space="preserve">
          <source>This field is intended for use in representing a model &lt;a href=&quot;../models/fields#django.db.models.SlugField&quot;&gt;&lt;code&gt;SlugField&lt;/code&gt;&lt;/a&gt; in forms.</source>
          <target state="translated">이 필드는 모델 &lt;a href=&quot;../models/fields#django.db.models.SlugField&quot;&gt; &lt;code&gt;SlugField&lt;/code&gt; &lt;/a&gt; 를 양식으로 나타내는 데 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="32a892c4cd7b071225f4826cb1d6ca132f314fce" translate="yes" xml:space="preserve">
          <source>This field will accept any string format accepted as the &lt;code&gt;hex&lt;/code&gt; argument to the &lt;a href=&quot;https://docs.python.org/3/library/uuid.html#uuid.UUID&quot;&gt;&lt;code&gt;UUID&lt;/code&gt;&lt;/a&gt; constructor.</source>
          <target state="translated">이 필드는 &lt;a href=&quot;https://docs.python.org/3/library/uuid.html#uuid.UUID&quot;&gt; &lt;code&gt;UUID&lt;/code&gt; &lt;/a&gt; 생성자에 대한 &lt;code&gt;hex&lt;/code&gt; 인수 로 승인 된 모든 문자열 형식을 승인합니다 .</target>
        </trans-unit>
        <trans-unit id="b101e36ba874434999c5a3298cb2883eced4bccc" translate="yes" xml:space="preserve">
          <source>This file contains the &lt;a href=&quot;../settings&quot;&gt;Django settings&lt;/a&gt; required to run your app&amp;rsquo;s tests.</source>
          <target state="translated">이 파일에는 앱 테스트를 실행하는 데 필요한 &lt;a href=&quot;../settings&quot;&gt;장고 설정&lt;/a&gt; 이 포함되어 있습니다 .</target>
        </trans-unit>
        <trans-unit id="021c43eac311b61357417b09dd2f1378217365b4" translate="yes" xml:space="preserve">
          <source>This file describes some of the features that might be relevant to Django usage. Of course, it is not intended as a replacement for server-specific documentation or reference manuals.</source>
          <target state="translated">이 파일은 Django 사용과 관련 될 수있는 일부 기능을 설명합니다. 물론 서버 별 설명서 나 참조 설명서를 대체하기위한 것이 아닙니다.</target>
        </trans-unit>
        <trans-unit id="f56b33597f26c5e8b3b9714d034eebb291ba8725" translate="yes" xml:space="preserve">
          <source>This filter accepts a callback function (which should accept a single argument, the record to be logged), and calls it for each record that passes through the filter. Handling of that record will not proceed if the callback returns False.</source>
          <target state="translated">이 필터는 콜백 함수 (단일 인수, 로그 될 레코드를 허용해야 함)를 승인하고 필터를 통과하는 각 레코드에 대해이를 호출합니다. 콜백이 False를 반환하면 해당 레코드 처리가 진행되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="9539b4302fbd68a025a40e447f5a4b97902ab61d" translate="yes" xml:space="preserve">
          <source>This filter is similar to &lt;a href=&quot;#django.utils.log.RequireDebugFalse&quot;&gt;&lt;code&gt;RequireDebugFalse&lt;/code&gt;&lt;/a&gt;, except that records are passed only when &lt;a href=&quot;../ref/settings#std:setting-DEBUG&quot;&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">이 필터는 &lt;a href=&quot;../ref/settings#std:setting-DEBUG&quot;&gt; &lt;code&gt;DEBUG&lt;/code&gt; &lt;/a&gt; 가 &lt;code&gt;True&lt;/code&gt; 인 경우에만 레코드가 전달된다는 점을 제외하고 &lt;a href=&quot;#django.utils.log.RequireDebugFalse&quot;&gt; &lt;code&gt;RequireDebugFalse&lt;/code&gt; &lt;/a&gt; 와 유사합니다 .</target>
        </trans-unit>
        <trans-unit id="f39bf23e4e3cfb944f02b79268021588d881e3d9" translate="yes" xml:space="preserve">
          <source>This filter is used as follows in the default &lt;a href=&quot;../ref/settings#std:setting-LOGGING&quot;&gt;&lt;code&gt;LOGGING&lt;/code&gt;&lt;/a&gt; configuration to ensure that the &lt;a href=&quot;#django.utils.log.AdminEmailHandler&quot;&gt;&lt;code&gt;AdminEmailHandler&lt;/code&gt;&lt;/a&gt; only sends error emails to admins when &lt;a href=&quot;../ref/settings#std:setting-DEBUG&quot;&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;False&lt;/code&gt;:</source>
          <target state="translated">이 필터는 기본 &lt;a href=&quot;../ref/settings#std:setting-LOGGING&quot;&gt; &lt;code&gt;LOGGING&lt;/code&gt; &lt;/a&gt; 구성 에서 다음과 같이 사용되어 &lt;a href=&quot;../ref/settings#std:setting-DEBUG&quot;&gt; &lt;code&gt;DEBUG&lt;/code&gt; &lt;/a&gt; 가 &lt;code&gt;False&lt;/code&gt; 인 경우 &lt;a href=&quot;#django.utils.log.AdminEmailHandler&quot;&gt; &lt;code&gt;AdminEmailHandler&lt;/code&gt; &lt;/a&gt; 가 관리자에게만 오류 이메일을 보내 도록합니다 .</target>
        </trans-unit>
        <trans-unit id="a031c20490dc714000e5b3869aced71bfcc450dd" translate="yes" xml:space="preserve">
          <source>This filter will first try to coerce both values to integers. If this fails, it&amp;rsquo;ll attempt to add the values together anyway. This will work on some data types (strings, list, etc.) and fail on others. If it fails, the result will be an empty string.</source>
          <target state="translated">이 필터는 먼저 두 값을 모두 정수로 강제합니다. 이것이 실패하면 어쨌든 값을 함께 추가하려고 시도합니다. 이것은 일부 데이터 유형 (문자열, 목록 등)에서 작동하고 다른 데이터 유형에서는 실패합니다. 실패하면 결과는 빈 문자열이됩니다.</target>
        </trans-unit>
        <trans-unit id="db483d5f5e49571c9519c578b37d11fec4861f09" translate="yes" xml:space="preserve">
          <source>This filter will only pass on records when settings.DEBUG is False.</source>
          <target state="translated">이 필터는 settings.DEBUG가 False 일 때만 레코드를 전달합니다.</target>
        </trans-unit>
        <trans-unit id="819d60f6c8334b0bf91ee5a78c0747914b3fcec0" translate="yes" xml:space="preserve">
          <source>This flag tells Django that if a &amp;ldquo;safe&amp;rdquo; string is passed into your filter, the result will still be &amp;ldquo;safe&amp;rdquo; and if a non-safe string is passed in, Django will automatically escape it, if necessary.</source>
          <target state="translated">이 플래그는 필터에 &quot;안전한&quot;문자열이 전달되면 결과는 여전히 &quot;안전&quot;하며 안전하지 않은 문자열이 전달되면 Django는 필요에 따라 자동으로 이스케이프 처리합니다.</target>
        </trans-unit>
        <trans-unit id="b0804e7b50b5f27fd233d4d71c22cac6d8d3b1f3" translate="yes" xml:space="preserve">
          <source>This form will include three default &lt;a href=&quot;#django.forms.TextInput&quot;&gt;&lt;code&gt;TextInput&lt;/code&gt;&lt;/a&gt; widgets, with default rendering &amp;ndash; no CSS class, no extra attributes. This means that the input boxes provided for each widget will be rendered exactly the same:</source>
          <target state="translated">이 형식에는 기본 렌더링 이 포함 된 3 개의 기본 &lt;a href=&quot;#django.forms.TextInput&quot;&gt; &lt;code&gt;TextInput&lt;/code&gt; &lt;/a&gt; 위젯 (CSS 클래스 없음, 추가 속성 없음)이 포함됩니다. 이는 각 위젯에 제공된 입력 상자가 정확히 동일하게 렌더링됨을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="39b44f999007390240a1fb81e0b1c5d82099e60b" translate="yes" xml:space="preserve">
          <source>This function accepts the same keyword arguments as &lt;a href=&quot;#django.contrib.sessions.backends.base.SessionBase.get_expiry_age&quot;&gt;&lt;code&gt;get_expiry_age()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 함수는 &lt;a href=&quot;#django.contrib.sessions.backends.base.SessionBase.get_expiry_age&quot;&gt; &lt;code&gt;get_expiry_age()&lt;/code&gt; &lt;/a&gt; 와 동일한 키워드 인수를 허용합니다 .</target>
        </trans-unit>
        <trans-unit id="1d5bd556a6b5c4be03a826530bbba1707486ed66" translate="yes" xml:space="preserve">
          <source>This function accepts two optional keyword arguments:</source>
          <target state="translated">이 함수는 두 개의 선택적 키워드 인수를 허용합니다.</target>
        </trans-unit>
        <trans-unit id="84f121b7c34ef237e09d21d23a19b452f333ec56" translate="yes" xml:space="preserve">
          <source>This function attempts to import an &lt;code&gt;admin&lt;/code&gt; module in each installed application. Such modules are expected to register models with the admin.</source>
          <target state="translated">이 기능은 설치된 각 응용 프로그램에서 &lt;code&gt;admin&lt;/code&gt; 모듈 을 가져 오려고 시도 합니다. 이러한 모듈은 관리자에게 모델을 등록해야합니다.</target>
        </trans-unit>
        <trans-unit id="968161f2a7415e377c8c14e9b1f34fbb4c8f731f" translate="yes" xml:space="preserve">
          <source>This function can be used in a root URLconf and Django will automatically prepend the current active language code to all URL patterns defined within &lt;a href=&quot;#django.conf.urls.i18n.i18n_patterns&quot;&gt;&lt;code&gt;i18n_patterns()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 함수는 루트 URLconf에서 사용될 수 있으며 Django는 현재 활성 언어 코드를 &lt;a href=&quot;#django.conf.urls.i18n.i18n_patterns&quot;&gt; &lt;code&gt;i18n_patterns()&lt;/code&gt; &lt;/a&gt; 내에 정의 된 모든 URL 패턴에 자동으로 추가합니다 .</target>
        </trans-unit>
        <trans-unit id="199bd2ecc7a45fcb26c8218ad0d2fa60a473ec2e" translate="yes" xml:space="preserve">
          <source>This function doesn&amp;rsquo;t work on naive datetimes.</source>
          <target state="translated">순진한 날짜 시간에는이 기능이 작동하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="b2e59e030a87391c1fb151ebc37af8dea624eb2f" translate="yes" xml:space="preserve">
          <source>This function doesn&amp;rsquo;t work on naive datetimes; use &lt;a href=&quot;#django.utils.timezone.make_aware&quot;&gt;&lt;code&gt;make_aware()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">이 기능은 순진한 날짜 시간에는 작동하지 않습니다. 사용 &lt;a href=&quot;#django.utils.timezone.make_aware&quot;&gt; &lt;code&gt;make_aware()&lt;/code&gt; &lt;/a&gt; 대신합니다.</target>
        </trans-unit>
        <trans-unit id="2307bc99d87d3409e530f690281868ebf2450230" translate="yes" xml:space="preserve">
          <source>This function generates a SQL string without any parameters. Since &lt;code&gt;substring&lt;/code&gt; is passed to &lt;code&gt;super().__init__()&lt;/code&gt; as a keyword argument, it&amp;rsquo;s interpolated into the SQL string before the query is sent to the database.</source>
          <target state="translated">이 함수는 매개 변수없이 SQL 문자열을 생성합니다. 때문에 &lt;code&gt;substring&lt;/code&gt; 전달됩니다 &lt;code&gt;super().__init__()&lt;/code&gt; 쿼리가 데이터베이스로 전송되기 전에 키워드 인수로, 그것이 SQL 문자열로 보간입니다.</target>
        </trans-unit>
        <trans-unit id="9ed1f94c5ff3f87ef4bbf761e1ff791246492108" translate="yes" xml:space="preserve">
          <source>This function is an alias to &lt;a href=&quot;#django.urls.re_path&quot;&gt;&lt;code&gt;django.urls.re_path()&lt;/code&gt;&lt;/a&gt;. It&amp;rsquo;s likely to be deprecated in a future release.</source>
          <target state="translated">이 함수는 &lt;a href=&quot;#django.urls.re_path&quot;&gt; &lt;code&gt;django.urls.re_path()&lt;/code&gt; &lt;/a&gt; 의 별칭 입니다. 향후 릴리스에서는 더 이상 사용되지 않을 것입니다.</target>
        </trans-unit>
        <trans-unit id="2d17268add0833f5adc3d518c5acde0943a1ff8a" translate="yes" xml:space="preserve">
          <source>This function is called automatically:</source>
          <target state="translated">이 함수는 자동으로 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="3becf540220c2ef5b4116080981f05342f38dfb0" translate="yes" xml:space="preserve">
          <source>This function is responsible for raising &lt;code&gt;django.template.TemplateSyntaxError&lt;/code&gt;, with helpful messages, for any syntax error.</source>
          <target state="translated">이 함수는 구문 오류에 대해 유용한 메시지와 함께 &lt;code&gt;django.template.TemplateSyntaxError&lt;/code&gt; 를 발생 시킵니다 .</target>
        </trans-unit>
        <trans-unit id="48531a02ae6fd1237e1d57a9d074e94c85e33253" translate="yes" xml:space="preserve">
          <source>This function is useful when you need your Django application to be localizable to languages where the number and complexity of &lt;a href=&quot;https://www.gnu.org/software/gettext/manual/gettext.html#Plural-forms&quot;&gt;plural forms&lt;/a&gt; is greater than the two forms used in English (&amp;lsquo;object&amp;rsquo; for the singular and &amp;lsquo;objects&amp;rsquo; for all the cases where &lt;code&gt;count&lt;/code&gt; is different from one, irrespective of its value.)</source>
          <target state="translated">이 기능은 Django 애플리케이션을 &lt;a href=&quot;https://www.gnu.org/software/gettext/manual/gettext.html#Plural-forms&quot;&gt;복수 형태&lt;/a&gt; 의 수와 복잡성이 영어로 사용되는 두 가지 형태 (단수의 경우 '개체'및 &lt;code&gt;count&lt;/code&gt; 가 모든 경우의 경우 '개체')보다 큰 언어로 현지화 할 수 있어야 할 때 유용 합니다. 그 가치에 관계없이 하나와 다릅니다.)</target>
        </trans-unit>
        <trans-unit id="ea100ce1a6d0ac474e0ea121e520e9ce317755af" translate="yes" xml:space="preserve">
          <source>This function loads the template with the given name and returns a &lt;code&gt;Template&lt;/code&gt; object.</source>
          <target state="translated">이 함수는 주어진 이름으로 템플릿을로드하고 &lt;code&gt;Template&lt;/code&gt; 객체를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="6b3a79fedc5fe2e143e75c65d8cbac9c6d856913" translate="yes" xml:space="preserve">
          <source>This function patches the &lt;code&gt;Cache-Control&lt;/code&gt; header by adding all keyword arguments to it. The transformation is as follows:</source>
          <target state="translated">이 함수는 모든 키워드 인수를 추가 하여 &lt;code&gt;Cache-Control&lt;/code&gt; 헤더를 패치합니다 . 변환은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="858eb6ea5fae48f06d0353f99e24b16f95a3eabf" translate="yes" xml:space="preserve">
          <source>This function performs time zone conversions directly in the database. As a consequence, your database must be able to interpret the value of &lt;code&gt;tzinfo.tzname(None)&lt;/code&gt;. This translates into the following requirements:</source>
          <target state="translated">이 기능은 데이터베이스에서 직접 시간대 변환을 수행합니다. 결과적으로 데이터베이스는 &lt;code&gt;tzinfo.tzname(None)&lt;/code&gt; 값을 해석 할 수 있어야합니다 . 이것은 다음 요구 사항으로 해석됩니다.</target>
        </trans-unit>
        <trans-unit id="db29337deb1eb47904350a603956a3fb443ac7a6" translate="yes" xml:space="preserve">
          <source>This function returns a correctly encoded URL even if &lt;code&gt;self.location&lt;/code&gt; is something like &amp;ldquo;Jack visited Paris &amp;amp; Orl&amp;eacute;ans&amp;rdquo;. (In fact, the &lt;code&gt;iri_to_uri()&lt;/code&gt; call isn&amp;rsquo;t strictly necessary in the above example, because all the non-ASCII characters would have been removed in quoting in the first line.)</source>
          <target state="translated">&lt;code&gt;self.location&lt;/code&gt; 이 &quot;Jack visited Paris &amp;amp; Orl&amp;eacute;ans&quot;와 같은 경우 에도이 함수는 올바르게 인코딩 된 URL을 반환합니다 . (실제로 &lt;code&gt;iri_to_uri()&lt;/code&gt; 호출은 첫 번째 행에서 인용 부호 에서 ASCII가 아닌 모든 문자가 제거되었으므로 위의 예제에서 반드시 필요한 것은 아닙니다.)</target>
        </trans-unit>
        <trans-unit id="c55365cfdaaebe10348bb84d9495963859cd4ad5" translate="yes" xml:space="preserve">
          <source>This function takes the current request and the updated user object from which the new session hash will be derived and updates the session hash appropriately. It also rotates the session key so that a stolen session cookie will be invalidated.</source>
          <target state="translated">이 함수는 현재 요청과 새 세션 해시가 파생 될 업데이트 된 사용자 개체를 가져 와서 세션 해시를 적절히 업데이트합니다. 또한 도난 세션 쿠키가 무효화되도록 세션 키를 회전시킵니다.</target>
        </trans-unit>
        <trans-unit id="e51bd19fadc7812fd2a4a8c53373d5f2c29fa3d5" translate="yes" xml:space="preserve">
          <source>This function transforms the current raster into a new spatial reference system that can be specified with an &lt;code&gt;srid&lt;/code&gt;. It calculates the bounds and scale of the current raster in the new spatial reference system and warps the raster using the &lt;a href=&quot;#django.contrib.gis.gdal.GDALRaster.warp&quot;&gt;&lt;code&gt;warp&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">이 함수는 현재 래스터를 &lt;code&gt;srid&lt;/code&gt; 로 지정할 수있는 새로운 공간 참조 시스템으로 변환합니다 . 새로운 공간 참조 시스템에서 현재 래스터의 경계와 스케일을 계산하고 &lt;a href=&quot;#django.contrib.gis.gdal.GDALRaster.warp&quot;&gt; &lt;code&gt;warp&lt;/code&gt; &lt;/a&gt; 함수를 사용하여 래스터를 뒤 틀립니다 .</target>
        </trans-unit>
        <trans-unit id="435297cd2f4b60bba8246d51ffaca7c147ddf0f5" translate="yes" xml:space="preserve">
          <source>This function will never have a null result. On backends where a null argument results in the entire expression being null, Django will ensure that each null part is converted to an empty string first.</source>
          <target state="translated">이 함수는 null 결과가 없습니다. null 인수로 인해 전체 표현식이 null 인 백엔드에서 Django는 각 null 부분이 빈 문자열로 먼저 변환되도록합니다.</target>
        </trans-unit>
        <trans-unit id="166a5d0a1c452e640171695f3b6ea4167c42d80b" translate="yes" xml:space="preserve">
          <source>This gives full permissions to the user granted access in the above example. Notice that in addition to the same arguments given to the associated &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User&quot;&gt;&lt;code&gt;django.contrib.auth.models.User&lt;/code&gt;&lt;/a&gt; functions, the backend auth functions all take the user object, which may be an anonymous user, as an argument.</source>
          <target state="translated">이것은 위의 예에서 사용자에게 액세스 권한이 부여 된 모든 권한을 부여합니다. 연관된 &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User&quot;&gt; &lt;code&gt;django.contrib.auth.models.User&lt;/code&gt; &lt;/a&gt; 함수에 제공된 동일한 인수 외에도 , 백엔드 인증 함수는 모두 익명 사용자 일 수있는 사용자 오브젝트를 인수로 사용합니다.</target>
        </trans-unit>
        <trans-unit id="8539b2dfcde60fe11dfc5f83402ad850bd5ae064" translate="yes" xml:space="preserve">
          <source>This gives you the ability to attach data to the instances before saving them to the database. If your formset contains a &lt;code&gt;ManyToManyField&lt;/code&gt;, you&amp;rsquo;ll also need to call &lt;code&gt;formset.save_m2m()&lt;/code&gt; to ensure the many-to-many relationships are saved properly.</source>
          <target state="translated">이를 통해 데이터베이스에 저장하기 전에 인스턴스에 데이터를 첨부 할 수 있습니다. 양식 세트에 &lt;code&gt;ManyToManyField&lt;/code&gt; 가 포함 된 경우 다 대 다 관계가 올바르게 저장되도록 &lt;code&gt;formset.save_m2m()&lt;/code&gt; 을 호출해야합니다 .</target>
        </trans-unit>
        <trans-unit id="1f93bfd8394c85334082a5074768829bb9139120" translate="yes" xml:space="preserve">
          <source>This group of fields all share similar functionality for accepting range data. They are based on &lt;a href=&quot;../../forms/fields#django.forms.MultiValueField&quot;&gt;&lt;code&gt;MultiValueField&lt;/code&gt;&lt;/a&gt;. They treat one omitted value as an unbounded range. They also validate that the lower bound is not greater than the upper bound. All of these fields use &lt;a href=&quot;#django.contrib.postgres.forms.RangeWidget&quot;&gt;&lt;code&gt;RangeWidget&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 필드 그룹은 모두 범위 데이터를 수용하기 위해 유사한 기능을 공유합니다. 그들은 &lt;a href=&quot;../../forms/fields#django.forms.MultiValueField&quot;&gt; &lt;code&gt;MultiValueField&lt;/code&gt; 를&lt;/a&gt; 기반으로 합니다. 그들은 하나의 생략 된 값을 무제한 범위로 취급합니다. 또한 하한이 상한보다 크지 않은지 확인합니다. 이 모든 필드는 &lt;a href=&quot;#django.contrib.postgres.forms.RangeWidget&quot;&gt; &lt;code&gt;RangeWidget&lt;/code&gt; 을&lt;/a&gt; 사용 합니다 .</target>
        </trans-unit>
        <trans-unit id="15f2812175681f97f9889ce8bfb02939d3b8d18e" translate="yes" xml:space="preserve">
          <source>This handler sends an email to the site &lt;a href=&quot;../ref/settings#std:setting-ADMINS&quot;&gt;&lt;code&gt;ADMINS&lt;/code&gt;&lt;/a&gt; for each log message it receives.</source>
          <target state="translated">이 처리기는 수신 한 각 로그 메시지에 대해 사이트 &lt;a href=&quot;../ref/settings#std:setting-ADMINS&quot;&gt; &lt;code&gt;ADMINS&lt;/code&gt; &lt;/a&gt; 로 전자 메일을 보냅니다 .</target>
        </trans-unit>
        <trans-unit id="080600104131c039dbc69d49bcd9afb5b3d326a4" translate="yes" xml:space="preserve">
          <source>This has a number of caveats though:</source>
          <target state="translated">그러나 여기에는 몇 가지주의 사항이 있습니다.</target>
        </trans-unit>
        <trans-unit id="9a73891c6d7c52b472785e5b238d9aa0537307de" translate="yes" xml:space="preserve">
          <source>This has a similar purpose to &lt;code&gt;select_related&lt;/code&gt;, in that both are designed to stop the deluge of database queries that is caused by accessing related objects, but the strategy is quite different.</source>
          <target state="translated">이것은 비슷한 목적을 가지고 있습니다 &lt;code&gt;select_related&lt;/code&gt; 있는데 , 둘 다 관련 객체에 액세스하여 발생하는 데이터베이스 쿼리의 유출 을 막기 위해 설계되었지만 전략은 매우 다릅니다.</target>
        </trans-unit>
        <trans-unit id="b8cd1013e50b1354e57e994a6db04b37bd6b7850" translate="yes" xml:space="preserve">
          <source>This has also the advantage of checking if the sites framework is installed, and return a &lt;a href=&quot;#django.contrib.sites.requests.RequestSite&quot;&gt;&lt;code&gt;RequestSite&lt;/code&gt;&lt;/a&gt; instance if it is not.</source>
          <target state="translated">또한 사이트 프레임 워크가 설치되어 있는지 확인하고 &lt;a href=&quot;#django.contrib.sites.requests.RequestSite&quot;&gt; &lt;code&gt;RequestSite&lt;/code&gt; &lt;/a&gt;않은 경우 RequestSite 인스턴스를.</target>
        </trans-unit>
        <trans-unit id="6dc73af0335533b052b0c15947b99b43e2aaaed0" translate="yes" xml:space="preserve">
          <source>This has been only a quick overview of Django&amp;rsquo;s functionality. Some more useful features:</source>
          <target state="translated">이것은 장고의 기능에 대한 간단한 개요 일뿐입니다. 더 유용한 기능들 :</target>
        </trans-unit>
        <trans-unit id="6867e69d4017b1db49972f7708f7e697dccb1fab" translate="yes" xml:space="preserve">
          <source>This has the advantage that you don&amp;rsquo;t need to apply &lt;a href=&quot;#django.utils.html.escape&quot;&gt;&lt;code&gt;escape()&lt;/code&gt;&lt;/a&gt; to each argument and risk a bug and an XSS vulnerability if you forget one.</source>
          <target state="translated">이것은 &lt;a href=&quot;#django.utils.html.escape&quot;&gt; &lt;code&gt;escape()&lt;/code&gt; &lt;/a&gt; 를 적용 할 필요가 없다는 장점이 있습니다 각 인수에 를 버그와 XSS 취약점을 잊어 버릴 위험이 있습니다.</target>
        </trans-unit>
        <trans-unit id="5990f87e5b78b8409bb2f6e72447ff6b212cfe73" translate="yes" xml:space="preserve">
          <source>This has the same benefits as described in the last section.</source>
          <target state="translated">마지막 섹션에서 설명한 것과 동일한 이점이 있습니다.</target>
        </trans-unit>
        <trans-unit id="6170da588be7839ad87c46402c905a0510c3a1f7" translate="yes" xml:space="preserve">
          <source>This helper function will only work if &lt;a href=&quot;../settings#std:setting-DEBUG&quot;&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;True&lt;/code&gt; and your &lt;a href=&quot;../settings#std:setting-STATIC_URL&quot;&gt;&lt;code&gt;STATIC_URL&lt;/code&gt;&lt;/a&gt; setting is neither empty nor a full URL such as &lt;code&gt;http://static.example.com/&lt;/code&gt;.</source>
          <target state="translated">이 도우미 기능은 &lt;a href=&quot;../settings#std:setting-DEBUG&quot;&gt; &lt;code&gt;DEBUG&lt;/code&gt; &lt;/a&gt; 가 &lt;code&gt;True&lt;/code&gt; 이고 &lt;a href=&quot;../settings#std:setting-STATIC_URL&quot;&gt; &lt;code&gt;STATIC_URL&lt;/code&gt; &lt;/a&gt; 설정이 비어 있거나 &lt;code&gt;http://static.example.com/&lt;/code&gt; 과 같은 전체 URL이 아닌 경우에만 작동합니다 . .</target>
        </trans-unit>
        <trans-unit id="a093e2c4eefaca864a94d868cc8b256efde855de" translate="yes" xml:space="preserve">
          <source>This helper function works only in debug mode and only if the given prefix is local (e.g. &lt;code&gt;/media/&lt;/code&gt;) and not a URL (e.g. &lt;code&gt;http://media.example.com/&lt;/code&gt;).</source>
          <target state="translated">이 도우미 함수는 디버그 모드에서만 작동하며 지정된 접두사가 로컬 (예 : &lt;code&gt;/media/&lt;/code&gt; )이고 URL이 아닌 경우 (예 : &lt;code&gt;http://media.example.com/&lt;/code&gt; ) 에만 해당됩니다 .</target>
        </trans-unit>
        <trans-unit id="7f96c45ce693efcc4797f7eb6376fd5a8e4bf785" translate="yes" xml:space="preserve">
          <source>This helper function works only in debug mode and only if the given prefix is local (e.g. &lt;code&gt;/static/&lt;/code&gt;) and not a URL (e.g. &lt;code&gt;http://static.example.com/&lt;/code&gt;).</source>
          <target state="translated">이 헬퍼 함수는 디버그 모드에서만 작동하며 주어진 접두어가 로컬 (예 : &lt;code&gt;/static/&lt;/code&gt; )이고 URL이 아닌 경우 (예 : &lt;code&gt;http://static.example.com/&lt;/code&gt; ) 에만 작동합니다 .</target>
        </trans-unit>
        <trans-unit id="fb86d034897aa91fba21ce67031ec860f20198ee" translate="yes" xml:space="preserve">
          <source>This helps a lot on virtualized hosts with limited network performance, for example.</source>
          <target state="translated">예를 들어 네트워크 성능이 제한된 가상화 호스트에서 많은 도움이됩니다.</target>
        </trans-unit>
        <trans-unit id="aa7d17db6ff2fa3c936a344f7b5469f086b16e1d" translate="yes" xml:space="preserve">
          <source>This helps a lot on virtualized hosts with limited network performance.</source>
          <target state="translated">이는 네트워크 성능이 제한된 가상화 호스트에서 많은 도움이됩니다.</target>
        </trans-unit>
        <trans-unit id="6294b8ffbcd66f5b177d87c5c92c8dd0f5a120dc" translate="yes" xml:space="preserve">
          <source>This hook is necessary because some widgets have multiple HTML elements and, thus, multiple IDs. In that case, this method should return an ID value that corresponds to the first ID in the widget&amp;rsquo;s tags.</source>
          <target state="translated">일부 위젯에는 여러 개의 HTML 요소가 있으므로 여러 개의 ID가 있으므로이 후크가 필요합니다. 이 경우이 메소드는 위젯 태그의 첫 번째 ID에 해당하는 ID 값을 반환해야합니다.</target>
        </trans-unit>
        <trans-unit id="6eb432eaa8f41d63c8cea3153f1e34b0f9a6fc78" translate="yes" xml:space="preserve">
          <source>This identifies a specific instance of an application. Instance namespaces should be unique across your entire project. However, an instance namespace can be the same as the application namespace. This is used to specify a default instance of an application. For example, the default Django admin instance has an instance namespace of &lt;code&gt;'admin'&lt;/code&gt;.</source>
          <target state="translated">애플리케이션의 특정 인스턴스를 식별합니다. 인스턴스 네임 스페이스는 전체 프로젝트에서 고유해야합니다. 그러나 인스턴스 네임 스페이스는 애플리케이션 네임 스페이스와 동일 할 수 있습니다. 응용 프로그램의 기본 인스턴스를 지정하는 데 사용됩니다. 예를 들어, 기본 Django 관리 인스턴스의 인스턴스 네임 스페이스는 &lt;code&gt;'admin'&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="ec3ead1206b9453869346613abf0046f15925f0d" translate="yes" xml:space="preserve">
          <source>This implementation is more efficient than &lt;code&gt;search_fields =
('name', '=age')&lt;/code&gt; which results in a string comparison for the numeric field, for example &lt;code&gt;... OR UPPER(&quot;polls_choice&quot;.&quot;votes&quot;::text) = UPPER('4')&lt;/code&gt; on PostgreSQL.</source>
          <target state="translated">이 구현은 &lt;code&gt;search_fields = ('name', '=age')&lt;/code&gt; 보다 효율적이므로 숫자 필드에 대한 문자열 비교가 발생합니다 &lt;code&gt;... OR UPPER(&quot;polls_choice&quot;.&quot;votes&quot;::text) = UPPER('4')&lt;/code&gt; 예 : ... OR UPPER ( &quot;polls_choice&quot;. &quot;votes&quot;:: text) = UPPER). ( '4') PostgreSQL의 .</target>
        </trans-unit>
        <trans-unit id="5726add6f2cd5484e9b45b2a06c6b390dcc33748" translate="yes" xml:space="preserve">
          <source>This implies a &lt;code&gt;self.toppings.all()&lt;/code&gt; for each &lt;code&gt;Pizza&lt;/code&gt;; now each time &lt;code&gt;self.toppings.all()&lt;/code&gt; is called, instead of having to go to the database for the items, it will find them in a prefetched &lt;code&gt;QuerySet&lt;/code&gt; cache that was populated in a single query.</source>
          <target state="translated">이것은 각 &lt;code&gt;Pizza&lt;/code&gt; 마다 &lt;code&gt;self.toppings.all()&lt;/code&gt; 을 의미합니다 . 이제 &lt;code&gt;self.toppings.all()&lt;/code&gt; 이 호출 될 때마다 항목의 데이터베이스로 이동하지 않고 단일 조회로 채워진 프리 페치 된 &lt;code&gt;QuerySet&lt;/code&gt; 캐시 에서 찾을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6d1ec31fcf236141389378cd2dc39797d2e71983" translate="yes" xml:space="preserve">
          <source>This includes access to all of the advanced geometric operations provided by the GEOS library:</source>
          <target state="translated">여기에는 GEOS 라이브러리가 제공하는 모든 고급 기하 연산에 대한 액세스가 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="6214a479d1ca7e724d8fef14168279baf6548309" translate="yes" xml:space="preserve">
          <source>This includes the migrations - unlike in Ruby On Rails, for example, migrations are entirely derived from your models file, and are essentially a history that Django can roll through to update your database schema to match your current models.</source>
          <target state="translated">여기에는 Ruby On Rails와 달리 마이그레이션이 포함됩니다. 예를 들어, 마이그레이션은 전체적으로 모델 파일에서 파생되며, Django가 현재 모델과 일치하도록 데이터베이스 스키마를 업데이트하기 위해 롤스 루 할 수있는 기록입니다.</target>
        </trans-unit>
        <trans-unit id="9cd7f461f2cbf6f7eb5852e576d5b21cfc0dc3eb" translate="yes" xml:space="preserve">
          <source>This is a PostgreSQL-specific setting.</source>
          <target state="translated">이것은 PostgreSQL 관련 설정입니다.</target>
        </trans-unit>
        <trans-unit id="f82bf1540637f23a03dceff084314a08677f32aa" translate="yes" xml:space="preserve">
          <source>This is a Python context manager that sets the &lt;a href=&quot;../topics/i18n/timezones#default-current-time-zone&quot;&gt;current time zone&lt;/a&gt; on entry with &lt;a href=&quot;#django.utils.timezone.activate&quot;&gt;&lt;code&gt;activate()&lt;/code&gt;&lt;/a&gt;, and restores the previously active time zone on exit. If the &lt;code&gt;timezone&lt;/code&gt; argument is &lt;code&gt;None&lt;/code&gt;, the &lt;a href=&quot;../topics/i18n/timezones#default-current-time-zone&quot;&gt;current time zone&lt;/a&gt; is unset on entry with &lt;a href=&quot;#django.utils.timezone.deactivate&quot;&gt;&lt;code&gt;deactivate()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">이것은 &lt;a href=&quot;#django.utils.timezone.activate&quot;&gt; &lt;code&gt;activate()&lt;/code&gt; &lt;/a&gt; 시작 &lt;a href=&quot;../topics/i18n/timezones#default-current-time-zone&quot;&gt;시 현재 시간대&lt;/a&gt; 를 설정 하고 종료시 이전에 활성화 된 시간대를 복원 하는 Python 컨텍스트 관리자입니다 . 는 IF &lt;code&gt;timezone&lt;/code&gt; 인수가없는 &lt;code&gt;None&lt;/code&gt; 의 &lt;a href=&quot;../topics/i18n/timezones#default-current-time-zone&quot;&gt;현재 시간대&lt;/a&gt; 와 항목에 설정되지 &lt;a href=&quot;#django.utils.timezone.deactivate&quot;&gt; &lt;code&gt;deactivate()&lt;/code&gt; &lt;/a&gt; 대신.</target>
        </trans-unit>
        <trans-unit id="a3800e5802ae4bbe81249dbee60d9690aebb7ebe" translate="yes" xml:space="preserve">
          <source>This is a debugging aid; it&amp;rsquo;ll show you exactly which static file will be collected for a given path.</source>
          <target state="translated">이것은 디버깅 보조 도구입니다. 주어진 경로에 대해 어떤 정적 파일이 수집 될지를 정확하게 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="27b95eeef68eef59dc429cc4b56e49dc7ba9da65" translate="yes" xml:space="preserve">
          <source>This is a design feature. &lt;a href=&quot;#django.core.mail.send_mail&quot;&gt;&lt;code&gt;send_mail()&lt;/code&gt;&lt;/a&gt; and related functions were originally the only interface Django provided. However, the list of parameters they accepted was slowly growing over time. It made sense to move to a more object-oriented design for email messages and retain the original functions only for backwards compatibility.</source>
          <target state="translated">이것은 디자인 기능입니다. &lt;a href=&quot;#django.core.mail.send_mail&quot;&gt; &lt;code&gt;send_mail()&lt;/code&gt; &lt;/a&gt; 및 관련 함수는 원래 장고가 제공 한 유일한 인터페이스였습니다. 그러나 시간이 지남에 따라 허용되는 매개 변수 목록이 천천히 증가했습니다. 전자 메일 메시지를위한보다 객체 지향적 인 디자인으로 이동하고 이전 버전과의 호환성을 위해서만 원래 기능을 유지하는 것이 합리적이었습니다.</target>
        </trans-unit>
        <trans-unit id="21c67dd3a96a813aa2abcc3f817540d6008871af" translate="yes" xml:space="preserve">
          <source>This is a feature for the sake of maintainability and sanity.</source>
          <target state="translated">이것은 유지 관리 및 위생을위한 기능입니다.</target>
        </trans-unit>
        <trans-unit id="4eb7875e040a5ed26e05e0b7313c2e1d6aa80fff" translate="yes" xml:space="preserve">
          <source>This is a known limitation. It arises from the need to serialize objects in order to exchange them between processes. See &lt;a href=&quot;https://docs.python.org/3/library/pickle.html#pickle-picklable&quot;&gt;What can be pickled and unpickled?&lt;/a&gt; for details.</source>
          <target state="translated">이것은 알려진 제한 사항입니다. 프로세스간에 오브젝트를 교환하기 위해 오브젝트를 직렬화해야 할 필요가 있습니다. 참조 &lt;a href=&quot;https://docs.python.org/3/library/pickle.html#pickle-picklable&quot;&gt;무엇을 절인 및 unpickled 할 수 있는가? &lt;/a&gt;자세한 내용은.</target>
        </trans-unit>
        <trans-unit id="a0c5266312b2154e9721755445434bcb185b2767" translate="yes" xml:space="preserve">
          <source>This is a list of lists that must be unique when considered together. It&amp;rsquo;s used in the Django admin and is enforced at the database level (i.e., the appropriate &lt;code&gt;UNIQUE&lt;/code&gt; statements are included in the &lt;code&gt;CREATE TABLE&lt;/code&gt; statement).</source>
          <target state="translated">이것은 함께 고려 될 때 고유해야하는 목록의 목록입니다. Django 관리자에서 사용되며 데이터베이스 수준에서 적용됩니다 (즉, 적절한 &lt;code&gt;UNIQUE&lt;/code&gt; 문이 &lt;code&gt;CREATE TABLE&lt;/code&gt; 문에 포함됨 ).</target>
        </trans-unit>
        <trans-unit id="1a42ae774d9e1d18854f72dcf3b660e0a40346e7" translate="yes" xml:space="preserve">
          <source>This is a list or tuple of 2-tuples in the format &lt;code&gt;(permission_code,
human_readable_permission_name)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;(permission_code, human_readable_permission_name)&lt;/code&gt; 형식의 2- 튜플 목록 또는 튜플입니다 .</target>
        </trans-unit>
        <trans-unit id="25af1d400d6ad72436b2fcf27510ff8576bc332c" translate="yes" xml:space="preserve">
          <source>This is a list with all the views &lt;code&gt;django.contrib.auth&lt;/code&gt; provides. For implementation details see &lt;a href=&quot;#using-the-views&quot;&gt;Using the views&lt;/a&gt;.</source>
          <target state="translated">이것은 &lt;code&gt;django.contrib.auth&lt;/code&gt; 가 제공 하는 모든 뷰가있는 목록입니다 . 구현 세부 사항은보기 &lt;a href=&quot;#using-the-views&quot;&gt;사용을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="66c26c98ecfdc50c5d0121f6bcaf8aa9a098316c" translate="yes" xml:space="preserve">
          <source>This is a low level way to authenticate a set of credentials; for example, it&amp;rsquo;s used by the &lt;a href=&quot;../../ref/middleware#django.contrib.auth.middleware.RemoteUserMiddleware&quot;&gt;&lt;code&gt;RemoteUserMiddleware&lt;/code&gt;&lt;/a&gt;. Unless you are writing your own authentication system, you probably won&amp;rsquo;t use this. Rather if you&amp;rsquo;re looking for a way to login a user, use the &lt;a href=&quot;#django.contrib.auth.views.LoginView&quot;&gt;&lt;code&gt;LoginView&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이것은 자격 증명 세트를 인증하는 저수준 방법입니다. 예를 들어 &lt;a href=&quot;../../ref/middleware#django.contrib.auth.middleware.RemoteUserMiddleware&quot;&gt; &lt;code&gt;RemoteUserMiddleware&lt;/code&gt; &lt;/a&gt; 에서 사용됩니다 . 자신의 인증 시스템을 작성하지 않으면 아마도 이것을 사용하지 않을 것입니다. 사용자를 로그인하는 방법을 찾고 있다면 &lt;a href=&quot;#django.contrib.auth.views.LoginView&quot;&gt; &lt;code&gt;LoginView&lt;/code&gt; 를&lt;/a&gt; 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="28a22470ce1800da031cbd7e99a59fac120601e8" translate="yes" xml:space="preserve">
          <source>This is a minimal case, but you can see that you would then have the option of customizing this view by overriding any of the class attributes, e.g. &lt;code&gt;form_class&lt;/code&gt;, via URLconf configuration, or subclassing and overriding one or more of the methods (or both!).</source>
          <target state="translated">이것은 최소한의 경우,하지만 당신은 당신이 다음 클래스 속성, 예를 들어, 어떤 재정 의하여이보기를 사용자 정의 할 수있는 옵션이 것이라고 볼 수 &lt;code&gt;form_class&lt;/code&gt; 를 모두 (또는 URLconf 구성을 통해, 또는 서브 클래스와 더 많은 방법 중 하나를 오버라이드 (override)를! ).</target>
        </trans-unit>
        <trans-unit id="1b5cb7f4f8c770fb70833af1d6f83b578c304ad7" translate="yes" xml:space="preserve">
          <source>This is a new feature, so it should be documented. Open the file &lt;code&gt;docs/topics/http/shortcuts.txt&lt;/code&gt; and add the following at the end of the file:</source>
          <target state="translated">이것은 새로운 기능이므로 문서화해야합니다. &lt;code&gt;docs/topics/http/shortcuts.txt&lt;/code&gt; 파일을 열고 파일 끝에 다음을 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="c1e573bee329dd4739491504e8469bfab83f9e9d" translate="yes" xml:space="preserve">
          <source>This is a required argument.</source>
          <target state="translated">이것은 필수 인수입니다.</target>
        </trans-unit>
        <trans-unit id="a36326ac1afea40a3788b92fa5f7bb49c95d15df" translate="yes" xml:space="preserve">
          <source>This is a required argument. It specifies the form field to be repeated.</source>
          <target state="translated">이것은 필수 인수입니다. 반복 할 양식 필드를 지정합니다.</target>
        </trans-unit>
        <trans-unit id="d9db86d5d0c90e36a503b011ffdbe541ba8feace" translate="yes" xml:space="preserve">
          <source>This is a required argument. The name of the extension to be installed.</source>
          <target state="translated">이것은 필수 인수입니다. 설치할 확장명입니다.</target>
        </trans-unit>
        <trans-unit id="8be669f8f411c31e9c624ceb9d4b9a5ed78caa0c" translate="yes" xml:space="preserve">
          <source>This is a required attribute if you are generating the form class automatically (e.g. using &lt;code&gt;model&lt;/code&gt;). Omitting this attribute will result in an &lt;a href=&quot;../exceptions#django.core.exceptions.ImproperlyConfigured&quot;&gt;&lt;code&gt;ImproperlyConfigured&lt;/code&gt;&lt;/a&gt; exception.</source>
          <target state="translated">양식 클래스를 자동으로 생성하는 경우 (예 : &lt;code&gt;model&lt;/code&gt; 사용 ) 필수 속성 입니다. 이 속성을 생략하면 &lt;a href=&quot;../exceptions#django.core.exceptions.ImproperlyConfigured&quot;&gt; &lt;code&gt;ImproperlyConfigured&lt;/code&gt; &lt;/a&gt; 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="6a735aefe74d311f127b18d69734cdf362fda94c" translate="yes" xml:space="preserve">
          <source>This is a tuple or list of strings and/or query expressions. Each string is a field name with an optional &amp;ldquo;-&amp;rdquo; prefix, which indicates descending order. Fields without a leading &amp;ldquo;-&amp;rdquo; will be ordered ascending. Use the string &amp;ldquo;?&amp;rdquo; to order randomly.</source>
          <target state="translated">이것은 튜플 또는 문자열 및 / 또는 쿼리 표현식 목록입니다. 각 문자열은 선택적인&amp;ldquo;-&amp;rdquo;접두어가있는 필드 이름이며 내림차순을 나타냅니다. 선행 &quot;-&quot;가없는 필드는 오름차순으로 주문됩니다. &amp;ldquo;?&amp;rdquo;문자열을 사용하십시오 무작위로 주문합니다.</target>
        </trans-unit>
        <trans-unit id="e668e33769391c22cf117f70b394da4cc8564383" translate="yes" xml:space="preserve">
          <source>This is a valuable technique for keeping business logic in one place &amp;ndash; the model.</source>
          <target state="translated">이는 비즈니스 로직을 한 곳에서 모델로 유지하는 데 유용한 기술입니다.</target>
        </trans-unit>
        <trans-unit id="b2d953f6c1d4fc0c753784c3acbd3afd8e0591c8" translate="yes" xml:space="preserve">
          <source>This is a very fragile solution as it requires the user to know an exact substring of the author&amp;rsquo;s name. A better approach could be a case-insensitive match (&lt;a href=&quot;../../ref/models/querysets#std:fieldlookup-icontains&quot;&gt;&lt;code&gt;icontains&lt;/code&gt;&lt;/a&gt;), but this is only marginally better.</source>
          <target state="translated">이것은 사용자가 저자 이름의 정확한 하위 문자열을 알아야하기 때문에 매우 취약한 솔루션입니다. 더 나은 접근 방식은 대소 문자를 구분하지 않는 일치 ( &lt;a href=&quot;../../ref/models/querysets#std:fieldlookup-icontains&quot;&gt; &lt;code&gt;icontains&lt;/code&gt; &lt;/a&gt; ) 일 수 있지만 이것은 조금 더 좋습니다.</target>
        </trans-unit>
        <trans-unit id="d5940dd221f2de827975a0266a8123bf6ab5afe9" translate="yes" xml:space="preserve">
          <source>This is a very simple form. In practice, a form might contain dozens or hundreds of fields, many of which might need to be pre-populated, and we might expect the user to work through the edit-submit cycle several times before concluding the operation.</source>
          <target state="translated">이것은 매우 간단한 형태입니다. 실제로, 양식에는 수십 또는 수백 개의 필드가 포함될 수 있으며,이 중 많은 필드가 미리 채워 져야 할 수도 있으며, 작업을 마치기 전에 사용자가 편집 제출주기를 여러 번 수행 할 것으로 예상 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ebb27d83f4ecb7d32b202d8595a7eb72d6f6ce42" translate="yes" xml:space="preserve">
          <source>This is a way to output links without violating the DRY principle by having to hard-code URLs in your templates:</source>
          <target state="translated">이는 템플릿에서 URL을 하드 코딩해야하므로 DRY 원칙을 위반하지 않고 링크를 출력하는 방법입니다.</target>
        </trans-unit>
        <trans-unit id="13f0fb7f0aae54e6409cf3634ddb518b4ca574f4" translate="yes" xml:space="preserve">
          <source>This is almost exactly the same as the &lt;code&gt;detail()&lt;/code&gt; view from &lt;a href=&quot;tutorial03&quot;&gt;Tutorial 3&lt;/a&gt;. The only difference is the template name. We&amp;rsquo;ll fix this redundancy later.</source>
          <target state="translated">이것은 &lt;a href=&quot;tutorial03&quot;&gt;Tutorial 3&lt;/a&gt; 의 &lt;code&gt;detail()&lt;/code&gt; 뷰 와 거의 동일합니다 . 유일한 차이점은 템플릿 이름입니다. 나중에이 중복성을 수정하겠습니다.</target>
        </trans-unit>
        <trans-unit id="2d5b338e72893f96626f70d6356723a49da8810d" translate="yes" xml:space="preserve">
          <source>This is always &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="translated">이것은 항상 &lt;code&gt;False&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="0055a0e221eb926d1d1f6540c91a6fefc8717ba4" translate="yes" xml:space="preserve">
          <source>This is always &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">이것은 항상 &lt;code&gt;True&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="0ae6a360c4612fb1f3facf39060130dd8a072360" translate="yes" xml:space="preserve">
          <source>This is an Oracle-specific setting.</source>
          <target state="translated">이것은 Oracle 특정 설정입니다.</target>
        </trans-unit>
        <trans-unit id="1442f707b625de9efa0894cf1c056d85c4f7964f" translate="yes" xml:space="preserve">
          <source>This is an abstract base widget containing the logic needed by subclasses. You cannot directly use this widget for a geometry field. Note that the rendering of GeoDjango widgets is based on a template, identified by the &lt;a href=&quot;#django.contrib.gis.forms.widgets.BaseGeometryWidget.template_name&quot;&gt;&lt;code&gt;template_name&lt;/code&gt;&lt;/a&gt; class attribute.</source>
          <target state="translated">서브 클래스에 필요한 로직을 포함하는 추상 기본 위젯입니다. 지오메트리 필드에이 위젯을 직접 사용할 수 없습니다. GeoDjango 위젯의 렌더링은 &lt;a href=&quot;#django.contrib.gis.forms.widgets.BaseGeometryWidget.template_name&quot;&gt; &lt;code&gt;template_name&lt;/code&gt; &lt;/a&gt; 클래스 속성으로 식별되는 템플릿을 기반으로 합니다.</target>
        </trans-unit>
        <trans-unit id="c05c77ecd32a1456537b74e9b2ba725ec05811e0" translate="yes" xml:space="preserve">
          <source>This is an advanced topic. A working knowledge of &lt;a href=&quot;index&quot;&gt;Django&amp;rsquo;s class-based views&lt;/a&gt; is advised before exploring these techniques.</source>
          <target state="translated">이것은 고급 주제입니다. 이러한 기술을 탐색하기 전에 &lt;a href=&quot;index&quot;&gt;Django의 클래스 기반 뷰에&lt;/a&gt; 대한 실무 지식 이 권장됩니다.</target>
        </trans-unit>
        <trans-unit id="4cb43d05733aef294aae652d046a8d45e6a59cac" translate="yes" xml:space="preserve">
          <source>This is an algorithm from section 3.2 of &lt;a href=&quot;https://tools.ietf.org/html/rfc3987.html#section-3.2&quot; id=&quot;index-3&quot;&gt;&lt;strong&gt;RFC 3987#section-3.2&lt;/strong&gt;&lt;/a&gt;.</source>
          <target state="translated">이것은 &lt;a href=&quot;https://tools.ietf.org/html/rfc3987.html#section-3.2&quot; id=&quot;index-3&quot;&gt;&lt;strong&gt;RFC 3987 # section-3.2&lt;/strong&gt;&lt;/a&gt; 섹션 3.2의 알고리즘입니다 .</target>
        </trans-unit>
        <trans-unit id="e180fc5960b1f977ad9c182e080a0697edbad01a" translate="yes" xml:space="preserve">
          <source>This is an auto-incrementing primary key.</source>
          <target state="translated">이것은 자동 증가 기본 키입니다.</target>
        </trans-unit>
        <trans-unit id="88db9f0469696a1eebc958cdbfee899484deb4ff" translate="yes" xml:space="preserve">
          <source>This is an old API that we aim to deprecate at some point in the future. Use it only if you cannot express your query using other queryset methods. If you do need to use it, please &lt;a href=&quot;https://code.djangoproject.com/newticket&quot;&gt;file a ticket&lt;/a&gt; using the &lt;a href=&quot;https://code.djangoproject.com/query?status=assigned&amp;amp;status=new&amp;amp;keywords=~QuerySet.extra&quot;&gt;QuerySet.extra keyword&lt;/a&gt; with your use case (please check the list of existing tickets first) so that we can enhance the QuerySet API to allow removing &lt;code&gt;extra()&lt;/code&gt;. We are no longer improving or fixing bugs for this method.</source>
          <target state="translated">이것은 향후 어느 시점에서 더 이상 사용되지 않는 오래된 API입니다. 다른 쿼리 셋 메소드를 사용하여 쿼리를 표현할 수없는 경우에만 사용하십시오. 이를 사용해야하는 경우, &lt;a href=&quot;https://code.djangoproject.com/query?status=assigned&amp;amp;status=new&amp;amp;keywords=~QuerySet.extra&quot;&gt;QuerySet.extra 키워드&lt;/a&gt; 를 사용 사례와 함께 사용하여 &lt;a href=&quot;https://code.djangoproject.com/newticket&quot;&gt;티켓&lt;/a&gt; 을 제출 하십시오 (기존 티켓 목록을 먼저 확인하십시오 &lt;code&gt;extra()&lt;/code&gt; . 더 이상이 방법의 버그를 개선하거나 수정하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="874b9ac2aeb6d98baa04538220d79b96e01d8184" translate="yes" xml:space="preserve">
          <source>This is an optional argument which defaults to a comma: &lt;code&gt;,&lt;/code&gt;. This value is used to split the submitted data. It allows you to chain &lt;code&gt;SimpleArrayField&lt;/code&gt; for multidimensional data:</source>
          <target state="translated">쉼표 ( &lt;code&gt;,&lt;/code&gt; ) 로 기본 설정되는 선택적 인수입니다 . 이 값은 제출 된 데이터를 분할하는 데 사용됩니다. 다차원 데이터를 위해 &lt;code&gt;SimpleArrayField&lt;/code&gt; 를 연결할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="1918fb796c705c4d2a45efc16bca7da620770fa1" translate="yes" xml:space="preserve">
          <source>This is an optional argument which validates that the array does not exceed the stated length.</source>
          <target state="translated">배열이 명시된 길이를 초과하지 않는지 확인하는 선택적 인수입니다.</target>
        </trans-unit>
        <trans-unit id="b9ec8e3708f2c3e0bdf9f5be81a0d5712ee9f8e4" translate="yes" xml:space="preserve">
          <source>This is an optional argument which validates that the array reaches at least the stated length.</source>
          <target state="translated">이것은 배열이 최소한 명시된 길이에 도달하는지 확인하는 선택적 인수입니다.</target>
        </trans-unit>
        <trans-unit id="5f5ab685794469a2f3712ee4ff3828dfbde6c2f7" translate="yes" xml:space="preserve">
          <source>This is an optional argument.</source>
          <target state="translated">이것은 선택적 인수입니다.</target>
        </trans-unit>
        <trans-unit id="1901e453d76175b9511fa5d9af1fa78afb4f68f7" translate="yes" xml:space="preserve">
          <source>This is an ordinary Python class, with nothing Django-specific about it. We&amp;rsquo;d like to be able to do things like this in our models (we assume the &lt;code&gt;hand&lt;/code&gt; attribute on the model is an instance of &lt;code&gt;Hand&lt;/code&gt;):</source>
          <target state="translated">이것은 장고와 관련이없는 일반적인 파이썬 클래스입니다. 모델에서 이와 같은 작업을 수행 할 수 있기를 원합니다 (모델의 &lt;code&gt;hand&lt;/code&gt; 속성이 &lt;code&gt;Hand&lt;/code&gt; 의 인스턴스 라고 가정 ).</target>
        </trans-unit>
        <trans-unit id="f4322cbaf01c85ea15a5408ee8c965bcedd5e888" translate="yes" xml:space="preserve">
          <source>This is an overview of the Django template language&amp;rsquo;s APIs. For details see the &lt;a href=&quot;../ref/templates/api&quot;&gt;API reference&lt;/a&gt;.</source>
          <target state="translated">이것은 Django 템플릿 언어의 API에 대한 개요입니다. 자세한 내용은 &lt;a href=&quot;../ref/templates/api&quot;&gt;API 참조 서를 참조하십시오&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="435c7f016b2ddadfc7aaaa144be6dd6ad72f4682" translate="yes" xml:space="preserve">
          <source>This is an overview of the Django template language&amp;rsquo;s syntax. For details see the &lt;a href=&quot;../ref/templates/language&quot;&gt;language syntax reference&lt;/a&gt;.</source>
          <target state="translated">장고 템플릿 언어의 구문에 대한 개요입니다. 자세한 내용은 &lt;a href=&quot;../ref/templates/language&quot;&gt;언어 구문 참조를 참조하십시오&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="a1c2f8fa486396257cd1d3f5ea034ac26e70cade" translate="yes" xml:space="preserve">
          <source>This is because of referential integrity. In order to maintain a relationship between two objects, Django needs to know that the primary key of the related object is valid. If the primary key is stored on a separate database, it&amp;rsquo;s not possible to easily evaluate the validity of a primary key.</source>
          <target state="translated">이것은 참조 무결성 때문입니다. Django는 두 객체 간의 관계를 유지하기 위해 관련 객체의 기본 키가 유효한지 알아야합니다. 기본 키가 별도의 데이터베이스에 저장된 경우 기본 키의 유효성을 쉽게 평가할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="5d85cd4a7a2018063c0b133570b2668e36e444ea" translate="yes" xml:space="preserve">
          <source>This is best illustrated with an example. Suppose you have the following model:</source>
          <target state="translated">이것은 예제와 함께 가장 잘 설명됩니다. 다음 모델이 있다고 가정하십시오.</target>
        </trans-unit>
        <trans-unit id="946a39730fdafb7ba570acdccfaece22d7649fa6" translate="yes" xml:space="preserve">
          <source>This is called a &lt;em&gt;race condition&lt;/em&gt;. If you are interested, you can read &lt;a href=&quot;../ref/models/expressions#avoiding-race-conditions-using-f&quot;&gt;Avoiding race conditions using F()&lt;/a&gt; to learn how you can solve this issue.</source>
          <target state="translated">이것을 &lt;em&gt;경쟁 조건&lt;/em&gt; 이라고합니다 . 관심이 있다면 &lt;a href=&quot;../ref/models/expressions#avoiding-race-conditions-using-f&quot;&gt;F ()&lt;/a&gt; 를 사용하여 경쟁 조건 피하기 를 읽고이 문제를 해결하는 방법을 배울 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="70a61e0458736b747e41261ea70878db591b1ea0" translate="yes" xml:space="preserve">
          <source>This is compatible with a strict Content Security Policy that prohibits in-page script execution. It also maintains a clean separation between passive data and executable code.</source>
          <target state="translated">이는 인 페이지 스크립트 실행을 금지하는 엄격한 콘텐츠 보안 정책과 호환됩니다. 또한 수동 데이터와 실행 코드를 완전히 분리합니다.</target>
        </trans-unit>
        <trans-unit id="d6cf586132f41abc52616ccfd3abed60ac89bb24" translate="yes" xml:space="preserve">
          <source>This is dangerous: it will make your database more susceptible to data loss or corruption in the case of a server crash or power loss. Only use this on a development machine where you can easily restore the entire contents of all databases in the cluster.</source>
          <target state="translated">이것은 위험합니다. 서버 충돌이나 전원 손실의 경우 데이터베이스가 데이터 손실 또는 손상에 더욱 취약 해집니다. 클러스터에있는 모든 데이터베이스의 전체 내용을 쉽게 복원 할 수있는 개발 시스템에서만이를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="5a0d4effd9f3306f71a42d89ae1ffcf3a3240471" translate="yes" xml:space="preserve">
          <source>This is different from adding the geometry field to &lt;a href=&quot;../admin/index#django.contrib.admin.ModelAdmin.readonly_fields&quot;&gt;&lt;code&gt;readonly_fields&lt;/code&gt;&lt;/a&gt;, which will only display the WKT of the geometry. Setting &lt;code&gt;modifiable=False&lt;/code&gt;, actually displays the geometry in a map, but disables the ability to edit its vertices.</source>
          <target state="translated">지오메트리 필드를 &lt;a href=&quot;../admin/index#django.contrib.admin.ModelAdmin.readonly_fields&quot;&gt; &lt;code&gt;readonly_fields&lt;/code&gt; 에&lt;/a&gt; 추가하는 것과 다릅니다 . 지오메트리의 WKT 만 표시합니다. &lt;code&gt;modifiable=False&lt;/code&gt; 로 설정하면 실제로 지오메트리가 맵에 표시되지만 정점 편집 기능은 비활성화됩니다.</target>
        </trans-unit>
        <trans-unit id="01c866fecd5f3e8277eae53f5b7d20b8c1b76c97" translate="yes" xml:space="preserve">
          <source>This is different from the &lt;code&gt;db_index&lt;/code&gt; field option because spatial indexes are created in a different manner than regular database indexes. Specifically, spatial indexes are typically created using a variant of the R-Tree, while regular database indexes typically use B-Trees.</source>
          <target state="translated">이것은 다른 &lt;code&gt;db_index&lt;/code&gt; 의 공간 인덱스는 일반 데이터베이스 인덱스와 다른 방식으로 만들어지기 때문에 필드 옵션을 선택합니다. 특히 공간 인덱스는 일반적으로 R-Tree의 변형을 사용하여 생성되는 반면 일반 데이터베이스 인덱스는 일반적으로 B-Tree를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="c36ba2a862a8e2820e57dcbac6cca1d4316de630" translate="yes" xml:space="preserve">
          <source>This is documented in &lt;a href=&quot;../../topics/db/queries#using-f-expressions-in-filters&quot;&gt;using F() expressions in queries&lt;/a&gt;.</source>
          <target state="translated">이것은 &lt;a href=&quot;../../topics/db/queries#using-f-expressions-in-filters&quot;&gt;query에서 F () 표현식을 사용하여&lt;/a&gt; 문서화됩니다 .</target>
        </trans-unit>
        <trans-unit id="444b94b4e45890ce5baea2c5943e554f559fc5a6" translate="yes" xml:space="preserve">
          <source>This is done by passing the names of the fields to not load to &lt;code&gt;defer()&lt;/code&gt;:</source>
          <target state="translated">로드하지 않을 필드 이름을 &lt;code&gt;defer()&lt;/code&gt; 에 전달하면됩니다 .</target>
        </trans-unit>
        <trans-unit id="73290256149b2822764ce7dd7996869397b9c406" translate="yes" xml:space="preserve">
          <source>This is enforced at the database level and by model validation. If you try to save a model with a duplicate value in a &lt;a href=&quot;#django.db.models.Field.unique&quot;&gt;&lt;code&gt;unique&lt;/code&gt;&lt;/a&gt; field, a &lt;a href=&quot;../exceptions#django.db.IntegrityError&quot;&gt;&lt;code&gt;django.db.IntegrityError&lt;/code&gt;&lt;/a&gt; will be raised by the model&amp;rsquo;s &lt;a href=&quot;instances#django.db.models.Model.save&quot;&gt;&lt;code&gt;save()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">이것은 데이터베이스 수준과 모델 유효성 검사에 의해 시행됩니다. &lt;a href=&quot;#django.db.models.Field.unique&quot;&gt; &lt;code&gt;unique&lt;/code&gt; &lt;/a&gt; 필드 에 중복 값이있는 모델을 저장하려고 하면 모델의 &lt;a href=&quot;instances#django.db.models.Model.save&quot;&gt; &lt;code&gt;save()&lt;/code&gt; &lt;/a&gt; 메소드에 의해 &lt;a href=&quot;../exceptions#django.db.IntegrityError&quot;&gt; &lt;code&gt;django.db.IntegrityError&lt;/code&gt; &lt;/a&gt; 가 발생합니다 .</target>
        </trans-unit>
        <trans-unit id="5813c4cb71a8474e2d701bf6dcc8ec651fae3e2f" translate="yes" xml:space="preserve">
          <source>This is enforced by &lt;a href=&quot;instances#django.db.models.Model.validate_unique&quot;&gt;&lt;code&gt;Model.validate_unique()&lt;/code&gt;&lt;/a&gt; during model validation but not at the database level. If any &lt;a href=&quot;#django.db.models.Field.unique_for_date&quot;&gt;&lt;code&gt;unique_for_date&lt;/code&gt;&lt;/a&gt; constraint involves fields that are not part of a &lt;a href=&quot;../../topics/forms/modelforms#django.forms.ModelForm&quot;&gt;&lt;code&gt;ModelForm&lt;/code&gt;&lt;/a&gt; (for example, if one of the fields is listed in &lt;code&gt;exclude&lt;/code&gt; or has &lt;a href=&quot;#django.db.models.Field.editable&quot;&gt;&lt;code&gt;editable=False&lt;/code&gt;&lt;/a&gt;), &lt;a href=&quot;instances#django.db.models.Model.validate_unique&quot;&gt;&lt;code&gt;Model.validate_unique()&lt;/code&gt;&lt;/a&gt; will skip validation for that particular constraint.</source>
          <target state="translated">이는 모델 유효성 검증 중에 &lt;a href=&quot;instances#django.db.models.Model.validate_unique&quot;&gt; &lt;code&gt;Model.validate_unique()&lt;/code&gt; &lt;/a&gt; 의해 시행 되지만 데이터베이스 레벨에는 없습니다. &lt;a href=&quot;#django.db.models.Field.unique_for_date&quot;&gt; &lt;code&gt;unique_for_date&lt;/code&gt; &lt;/a&gt; 제약 조건에 &lt;a href=&quot;../../topics/forms/modelforms#django.forms.ModelForm&quot;&gt; &lt;code&gt;ModelForm&lt;/code&gt; 의&lt;/a&gt; 일부가 아닌 필드가 포함 된 경우 (예 : 필드 중 하나가 &lt;code&gt;exclude&lt;/code&gt; 에 나열 되거나 &lt;a href=&quot;#django.db.models.Field.editable&quot;&gt; &lt;code&gt;editable=False&lt;/code&gt; 인 경우&lt;/a&gt; ) &lt;a href=&quot;instances#django.db.models.Model.validate_unique&quot;&gt; &lt;code&gt;Model.validate_unique()&lt;/code&gt; &lt;/a&gt; 는 해당 특정 제약 조건에 대한 유효성 검사를 건너 뜁니다.</target>
        </trans-unit>
        <trans-unit id="99f1ba7734cbcdca7cf38a228017df854ddd0843" translate="yes" xml:space="preserve">
          <source>This is equivalent to (but simpler than):</source>
          <target state="translated">이것은 다음과 동일하지만보다 간단합니다.</target>
        </trans-unit>
        <trans-unit id="aa0af7bd890e489a2ce28b5790b8066af2231c6f" translate="yes" xml:space="preserve">
          <source>This is equivalent to the following SQL &lt;code&gt;WHERE&lt;/code&gt; clause:</source>
          <target state="translated">이것은 다음 SQL &lt;code&gt;WHERE&lt;/code&gt; 절 과 동일합니다 .</target>
        </trans-unit>
        <trans-unit id="0c4a19f41f357e975c7ecf272280bda06a0a7837" translate="yes" xml:space="preserve">
          <source>This is equivalent to:</source>
          <target state="translated">이것은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="081826614ba4f9b5284489708942cd4d3b7f9360" translate="yes" xml:space="preserve">
          <source>This is especially useful with very large files since it allows them to be streamed off disk and avoids storing the whole file in memory.</source>
          <target state="translated">디스크에서 스트리밍 할 수 있고 전체 파일을 메모리에 저장하지 않기 때문에 매우 큰 파일에 특히 유용합니다.</target>
        </trans-unit>
        <trans-unit id="335cd8702253ed81c13e11543317d2309494a4b3" translate="yes" xml:space="preserve">
          <source>This is essential when calls to these functions are located in code paths that are executed at module load time.</source>
          <target state="translated">이러한 기능에 대한 호출이 모듈로드시 실행되는 코드 경로에있을 때 필수적입니다.</target>
        </trans-unit>
        <trans-unit id="5cdb997bdd44723e62e29d0c5e26a5cb5b4ed63b" translate="yes" xml:space="preserve">
          <source>This is exactly what &lt;a href=&quot;http://pytz.sourceforge.net/&quot;&gt;pytz&lt;/a&gt; is for.</source>
          <target state="translated">이것이 바로 &lt;a href=&quot;http://pytz.sourceforge.net/&quot;&gt;pytz의&lt;/a&gt; 목적입니다.</target>
        </trans-unit>
        <trans-unit id="0956048242e8c56793391f92c3a7e739470af5a3" translate="yes" xml:space="preserve">
          <source>This is for convenience, because &lt;code&gt;exact&lt;/code&gt; lookups are the common case.</source>
          <target state="translated">이는 &lt;code&gt;exact&lt;/code&gt; 조회가 일반적인 경우 이므로 편의를위한 것 입니다.</target>
        </trans-unit>
        <trans-unit id="f4dad0b93cb6535164f31b5b0559d9a3bddc7b12" translate="yes" xml:space="preserve">
          <source>This is generally the operation you would use to create &lt;a href=&quot;../topics/migrations#data-migrations&quot;&gt;data migrations&lt;/a&gt;, run custom data updates and alterations, and anything else you need access to an ORM and/or Python code for.</source>
          <target state="translated">이것은 일반적으로 &lt;a href=&quot;../topics/migrations#data-migrations&quot;&gt;데이터 마이그레이션&lt;/a&gt; 을 생성 하고 , 사용자 정의 데이터 업데이트 및 변경을 수행하고, ORM 및 / 또는 Python 코드에 액세스해야하는 모든 작업입니다.</target>
        </trans-unit>
        <trans-unit id="64b8a18842b91586121f3d57f897055ec1c28a62" translate="yes" xml:space="preserve">
          <source>This is handy if your users live in more than one time zone and you want to display datetime information according to each user&amp;rsquo;s wall clock.</source>
          <target state="translated">사용자가 둘 이상의 시간대에 거주하고 각 사용자의 벽시계에 따라 날짜 / 시간 정보를 표시하려는 경우에 유용합니다.</target>
        </trans-unit>
        <trans-unit id="593e8e2f00927704d42ff86b00399a6900503d56" translate="yes" xml:space="preserve">
          <source>This is happening because it&amp;rsquo;s trying to get or create &amp;ldquo;Chapter 1&amp;rdquo; through the book &amp;ldquo;Ulysses&amp;rdquo;, but it can&amp;rsquo;t do any of them: the relation can&amp;rsquo;t fetch that chapter because it isn&amp;rsquo;t related to that book, but it can&amp;rsquo;t create it either because &lt;code&gt;title&lt;/code&gt; field should be unique.</source>
          <target state="translated">이것은&amp;ldquo;Ulysses&amp;rdquo;책을 통해&amp;ldquo;1 장&amp;rdquo;을 얻거나 만들려고하기 때문에 발생하지만 아무 것도 할 수 없습니다. 관계는 해당 장과 관련이 없기 때문에 해당 장을 가져올 수 없지만 &lt;code&gt;title&lt;/code&gt; 필드는 고유해야 하기 때문에 만들 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="a391a548c599da87d1fd0f479c93d316fc4bd147" translate="yes" xml:space="preserve">
          <source>This is identical to &lt;a href=&quot;mixins-multiple-object#django.views.generic.list.MultipleObjectMixin.allow_empty&quot;&gt;&lt;code&gt;django.views.generic.list.MultipleObjectMixin.allow_empty&lt;/code&gt;&lt;/a&gt;, except for the default value, which is &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="translated">기본값은 &lt;code&gt;False&lt;/code&gt; 인 것을 제외하고 &lt;a href=&quot;mixins-multiple-object#django.views.generic.list.MultipleObjectMixin.allow_empty&quot;&gt; &lt;code&gt;django.views.generic.list.MultipleObjectMixin.allow_empty&lt;/code&gt; &lt;/a&gt; 와 동일합니다 .</target>
        </trans-unit>
        <trans-unit id="7e5e7ab116dddedf0aa701d91e435cc6b1c04fc6" translate="yes" xml:space="preserve">
          <source>This is incorrect:</source>
          <target state="translated">이것은 올바르지 않습니다 :</target>
        </trans-unit>
        <trans-unit id="f6d08b3ac8c6f2f7a73e60b44ad3c20c1134c300" translate="yes" xml:space="preserve">
          <source>This is intended for advanced users to manipulate the current migration state directly if they&amp;rsquo;re manually applying changes; be warned that using &lt;code&gt;--fake&lt;/code&gt; runs the risk of putting the migration state table into a state where manual recovery will be needed to make migrations run correctly.</source>
          <target state="translated">이것은 고급 사용자가 수동으로 변경 사항을 적용하는 경우 현재 마이그레이션 상태를 직접 조작하기위한 것입니다. &lt;code&gt;--fake&lt;/code&gt; 를 사용 하면 마이그레이션 상태 테이블이 마이그레이션을 올바르게 실행하기 위해 수동 복구가 필요한 상태가 될 위험이 있습니다.</target>
        </trans-unit>
        <trans-unit id="ccc3979518de97cf19d92f716a27b3f7353b8251" translate="yes" xml:space="preserve">
          <source>This is just the surface</source>
          <target state="translated">이것은 단지 표면입니다</target>
        </trans-unit>
        <trans-unit id="39dbebbb327de4a8855f76c4ac0b282c68c9afd2" translate="yes" xml:space="preserve">
          <source>This is less efficient than &lt;a href=&quot;#std:templatefilter-truncatewords&quot;&gt;&lt;code&gt;truncatewords&lt;/code&gt;&lt;/a&gt;, so should only be used when it is being passed HTML text.</source>
          <target state="translated">이것은 &lt;a href=&quot;#std:templatefilter-truncatewords&quot;&gt; &lt;code&gt;truncatewords&lt;/code&gt; &lt;/a&gt; 보다 비효율적 이므로 HTML 텍스트를 전달할 때만 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="8081312ccea4008c20b1e5cd5f61f7fc52257d73" translate="yes" xml:space="preserve">
          <source>This is meant as a shortcut to boilerplatish code. For example:</source>
          <target state="translated">이것은 상용구 코드의 지름길을 의미합니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="536822cbdee12793e85c0c64799b267bea4225e4" translate="yes" xml:space="preserve">
          <source>This is meant to prevent duplicate objects from being created when requests are made in parallel, and as a shortcut to boilerplatish code. For example:</source>
          <target state="translated">이는 요청이 병렬로 만들어 질 때 중복 된 객체가 생성되는 것을 막고, 보일러 코드에 대한 바로 가기입니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="f1244f565a58b155152143aa26727394a52b532c" translate="yes" xml:space="preserve">
          <source>This is most useful as the primary key of a model which &amp;ldquo;extends&amp;rdquo; another model in some way; &lt;a href=&quot;../../topics/db/models#multi-table-inheritance&quot;&gt;Multi-table inheritance&lt;/a&gt; is implemented by adding an implicit one-to-one relation from the child model to the parent model, for example.</source>
          <target state="translated">이것은 어떤 방식으로 다른 모델을 &quot;확장&quot;하는 모델의 기본 키로 가장 유용합니다. &lt;a href=&quot;../../topics/db/models#multi-table-inheritance&quot;&gt;다중 테이블 상속&lt;/a&gt; 은 예를 들어 자식 모델에서 부모 모델로 암시 적 일대일 관계를 추가하여 구현됩니다.</target>
        </trans-unit>
        <trans-unit id="995d099a4fad352b504e0ee0deceeeac03ecd5a0" translate="yes" xml:space="preserve">
          <source>This is most useful on the primary key of an object when that object &amp;ldquo;extends&amp;rdquo; another object in some way.</source>
          <target state="translated">이것은 객체가 어떤 방식으로 다른 객체를 &quot;확장&quot;할 때 객체의 기본 키에서 가장 유용합니다.</target>
        </trans-unit>
        <trans-unit id="212e4a29b116c26f378ceb7f419668ba0d4eacaf" translate="yes" xml:space="preserve">
          <source>This is mostly a concern for &lt;a href=&quot;../../ref/exceptions#django.db.DatabaseError&quot;&gt;&lt;code&gt;DatabaseError&lt;/code&gt;&lt;/a&gt; and its subclasses such as &lt;a href=&quot;../../ref/exceptions#django.db.IntegrityError&quot;&gt;&lt;code&gt;IntegrityError&lt;/code&gt;&lt;/a&gt;. After such an error, the transaction is broken and Django will perform a rollback at the end of the &lt;code&gt;atomic&lt;/code&gt; block. If you attempt to run database queries before the rollback happens, Django will raise a &lt;a href=&quot;../../ref/exceptions#django.db.transaction.TransactionManagementError&quot;&gt;&lt;code&gt;TransactionManagementError&lt;/code&gt;&lt;/a&gt;. You may also encounter this behavior when an ORM-related signal handler raises an exception.</source>
          <target state="translated">이것은 주로 &lt;a href=&quot;../../ref/exceptions#django.db.DatabaseError&quot;&gt; &lt;code&gt;DatabaseError&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../../ref/exceptions#django.db.IntegrityError&quot;&gt; &lt;code&gt;IntegrityError&lt;/code&gt; &lt;/a&gt; 와 같은 서브 클래스에 대한 문제입니다 . 이러한 오류가 발생하면 거래가 중단되고 Django는 &lt;code&gt;atomic&lt;/code&gt; 블록 끝에서 롤백을 수행합니다 . 롤백이 발생하기 전에 데이터베이스 쿼리를 실행하려고하면 Django가 &lt;a href=&quot;../../ref/exceptions#django.db.transaction.TransactionManagementError&quot;&gt; &lt;code&gt;TransactionManagementError&lt;/code&gt; 를 발생&lt;/a&gt; 시킵니다. ORM 관련 신호 핸들러에서 예외가 발생하면이 동작이 발생할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="44c0147b40aa6666ddd6c0716263b6e22cca0958" translate="yes" xml:space="preserve">
          <source>This is named &amp;lsquo;ProcessFormView&amp;rsquo; and inherits directly from &lt;a href=&quot;base#django.views.generic.base.View&quot;&gt;&lt;code&gt;django.views.generic.base.View&lt;/code&gt;&lt;/a&gt;, but breaks if used independently, so it is more of a mixin.</source>
          <target state="translated">이름은 'ProcessFormView'이며 &lt;a href=&quot;base#django.views.generic.base.View&quot;&gt; &lt;code&gt;django.views.generic.base.View&lt;/code&gt; &lt;/a&gt; 에서 직접 상속 받지만 독립적으로 사용하면 중단되므로 더 많은 믹스 인입니다.</target>
        </trans-unit>
        <trans-unit id="b2b615b23156d2645a3ecd03f66c3c75edc49f1b" translate="yes" xml:space="preserve">
          <source>This is not a very common situation, but it&amp;rsquo;s useful if you&amp;rsquo;re rendering a template yourself. For example:</source>
          <target state="translated">이것은 일반적인 상황은 아니지만 템플릿을 직접 렌더링하는 경우 유용합니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="e79a31b8735552aa6e1c503ecf36441dab19ed62" translate="yes" xml:space="preserve">
          <source>This is not suitable for production use! For some common deployment strategies, see &lt;a href=&quot;deployment&quot;&gt;Deploying static files&lt;/a&gt;.</source>
          <target state="translated">프로덕션 용도로는 적합하지 않습니다! 일반적인 배포 전략은 &lt;a href=&quot;deployment&quot;&gt;정적 파일 배포를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="4c0c59d3484ca87ff0b26211caf443fae0db18e7" translate="yes" xml:space="preserve">
          <source>This is one of the reasons generic views were redesigned for the 1.3 release - previously, they were view functions with a bewildering array of options; now, rather than passing in a large amount of configuration in the URLconf, the recommended way to extend generic views is to subclass them, and override their attributes or methods.</source>
          <target state="translated">이것이 1.3 뷰에서 일반 뷰가 재 설계된 이유 중 하나입니다. 이전에는 끔찍한 옵션이있는 뷰 함수였습니다. 이제 URLconf에서 많은 양의 구성을 전달하는 대신 일반 뷰를 확장하는 데 권장되는 방법은 뷰를 서브 클래 싱하고 해당 속성 또는 메서드를 재정의하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="713415f47297ef9a60423c07c822c1d3544c995c" translate="yes" xml:space="preserve">
          <source>This is only needed for people who either want to extract message IDs or compile message files (&lt;code&gt;.po&lt;/code&gt;). Translation work itself involves editing existing files of this type, but if you want to create your own message files, or want to test or compile a changed message file, download &lt;a href=&quot;https://mlocati.github.io/articles/gettext-iconv-windows.html&quot;&gt;a precompiled binary installer&lt;/a&gt;.</source>
          <target state="translated">이것은 메시지 ID를 추출하거나 메시지 파일 ( &lt;code&gt;.po&lt;/code&gt; )을 컴파일하려는 사람들에게만 필요합니다 . 번역 작업 자체에는이 유형의 기존 파일을 편집하는 것이 포함되지만 고유 한 메시지 파일을 만들거나 변경된 메시지 파일을 테스트하거나 컴파일하려면 &lt;a href=&quot;https://mlocati.github.io/articles/gettext-iconv-windows.html&quot;&gt;사전 컴파일 된 이진 설치 관리자를&lt;/a&gt; 다운로드 하십시오 .</target>
        </trans-unit>
        <trans-unit id="5c700118e883e20ee8c70d4737d84a16ed04387f" translate="yes" xml:space="preserve">
          <source>This is only used if &lt;a href=&quot;middleware#django.middleware.common.BrokenLinkEmailsMiddleware&quot;&gt;&lt;code&gt;BrokenLinkEmailsMiddleware&lt;/code&gt;&lt;/a&gt; is enabled (see &lt;a href=&quot;../topics/http/middleware&quot;&gt;Middleware&lt;/a&gt;).</source>
          <target state="translated">&lt;a href=&quot;middleware#django.middleware.common.BrokenLinkEmailsMiddleware&quot;&gt; &lt;code&gt;BrokenLinkEmailsMiddleware&lt;/code&gt; &lt;/a&gt; 가 활성화 된 경우에만 사용됩니다 ( &lt;a href=&quot;../topics/http/middleware&quot;&gt;미들웨어&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="76560b3ec1fed8fa0aa265c5086f1427140f1687" translate="yes" xml:space="preserve">
          <source>This is roughly equivalent to:</source>
          <target state="translated">이것은 대략 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="58441f3eed78ef7046684f182b270fef11d0e5a3" translate="yes" xml:space="preserve">
          <source>This is sent at the beginning of a model&amp;rsquo;s &lt;a href=&quot;models/instances#django.db.models.Model.save&quot;&gt;&lt;code&gt;save()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">모델의 &lt;a href=&quot;models/instances#django.db.models.Model.save&quot;&gt; &lt;code&gt;save()&lt;/code&gt; &lt;/a&gt; 메소드 의 시작 부분에 전송됩니다 .</target>
        </trans-unit>
        <trans-unit id="756e36ff5f7bacbe1eace78e351d3d1d5d4cc71e" translate="yes" xml:space="preserve">
          <source>This is shaping up well. Let&amp;rsquo;s add some search capability:</source>
          <target state="translated">이것은 잘 형성되고 있습니다. 검색 기능을 추가하겠습니다 :</target>
        </trans-unit>
        <trans-unit id="428fa6ac238d51709e55021212306373ec4412a6" translate="yes" xml:space="preserve">
          <source>This is similar to &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#str.format&quot;&gt;&lt;code&gt;str.format()&lt;/code&gt;&lt;/a&gt;, except that it is appropriate for building up HTML fragments. All args and kwargs are passed through &lt;a href=&quot;#django.utils.html.conditional_escape&quot;&gt;&lt;code&gt;conditional_escape()&lt;/code&gt;&lt;/a&gt; before being passed to &lt;code&gt;str.format()&lt;/code&gt;.</source>
          <target state="translated">이것은 HTML 조각을 만드는 데 적합하다는 점을 제외하고 &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#str.format&quot;&gt; &lt;code&gt;str.format()&lt;/code&gt; &lt;/a&gt; 과 유사합니다 . 모든 args 및 &lt;code&gt;str.format()&lt;/code&gt; 에 전달되기 전에 &lt;a href=&quot;#django.utils.html.conditional_escape&quot;&gt; &lt;code&gt;conditional_escape()&lt;/code&gt; &lt;/a&gt; 를 통해 전달됩니다 .</target>
        </trans-unit>
        <trans-unit id="e35cf35e743d90e08ff2f57789537e4b6d1a9bbf" translate="yes" xml:space="preserve">
          <source>This is similar to &lt;code&gt;values()&lt;/code&gt; except that instead of returning dictionaries, it returns tuples when iterated over. Each tuple contains the value from the respective field or expression passed into the &lt;code&gt;values_list()&lt;/code&gt; call &amp;mdash; so the first item is the first field, etc. For example:</source>
          <target state="translated">이것은 사전을 반환하는 대신 반복 할 때 튜플을 반환한다는 점을 제외하고는 &lt;code&gt;values()&lt;/code&gt; 와 유사합니다 . 각 튜플은 &lt;code&gt;values_list()&lt;/code&gt; 호출에 전달 된 각 필드 또는 표현식의 값을 포함 하므로 첫 번째 항목은 첫 번째 필드 등입니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="13ce16baaa59f10ef196dcd189c1cf905957abee" translate="yes" xml:space="preserve">
          <source>This is something that can easily happen when defining models, forms and model forms, because Django implements these such that their fields are actually class-level attributes. For that reason, make sure to use lazy translations in the following cases:</source>
          <target state="translated">Django는 필드가 실제로 클래스 수준의 속성이되도록 구현하기 때문에 모델, 양식 및 모델 양식을 정의 할 때 쉽게 발생할 수 있습니다. 따라서 다음과 같은 경우 지연 번역을 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="51000a5f83519b7c56e85af569bc8557b1dbe627" translate="yes" xml:space="preserve">
          <source>This is the SRID code that the field value should be transformed to. For example, if the map widget SRID is different from the SRID more generally used by your application or database, the field will automatically convert input values into that SRID.</source>
          <target state="translated">필드 값을 변환해야하는 SRID 코드입니다. 예를 들어 맵 위젯 SRID가 애플리케이션 또는 데이터베이스에서 더 일반적으로 사용하는 SRID와 다른 경우 필드는 입력 값을 해당 SRID로 자동 변환합니다.</target>
        </trans-unit>
        <trans-unit id="3c6c1c7d69d98562224102bb18830338c5a3fdd6" translate="yes" xml:space="preserve">
          <source>This is the algorithm from section 3.1 of &lt;a href=&quot;https://tools.ietf.org/html/rfc3987.html#section-3.1&quot; id=&quot;index-2&quot;&gt;&lt;strong&gt;RFC 3987#section-3.1&lt;/strong&gt;&lt;/a&gt;, slightly simplified since the input is assumed to be a string rather than an arbitrary byte stream.</source>
          <target state="translated">이것은 &lt;a href=&quot;https://tools.ietf.org/html/rfc3987.html#section-3.1&quot; id=&quot;index-2&quot;&gt;&lt;strong&gt;RFC 3987 # section-&lt;/strong&gt;&lt;/a&gt; 3.1의 ​​섹션 3.1의 알고리즘으로 , 입력이 임의의 바이트 스트림이 아닌 문자열로 가정되므로 약간 단순화되었습니다.</target>
        </trans-unit>
        <trans-unit id="64137aaf5e33ea0944df9e5189f22140bc9429d5" translate="yes" xml:space="preserve">
          <source>This is the base class for all GEOS geometry objects. It initializes on the given &lt;code&gt;geo_input&lt;/code&gt; argument, and then assumes the proper geometry subclass (e.g., &lt;code&gt;GEOSGeometry('POINT(1 1)')&lt;/code&gt; will create a &lt;a href=&quot;#django.contrib.gis.geos.Point&quot;&gt;&lt;code&gt;Point&lt;/code&gt;&lt;/a&gt; object).</source>
          <target state="translated">모든 GEOS 지오메트리 객체의 기본 클래스입니다. 지정된 &lt;code&gt;geo_input&lt;/code&gt; 인수에서 초기화 한 다음 적절한 기하학 서브 클래스 (예 : &lt;code&gt;GEOSGeometry('POINT(1 1)')&lt;/code&gt; 가 &lt;a href=&quot;#django.contrib.gis.geos.Point&quot;&gt; &lt;code&gt;Point&lt;/code&gt; &lt;/a&gt; 오브젝트를 작성 함 )를 가정합니다.</target>
        </trans-unit>
        <trans-unit id="8bc2e492390c4d569fb3752ea80192b0a46877cb" translate="yes" xml:space="preserve">
          <source>This is the base class for all session objects. It has the following standard dictionary methods:</source>
          <target state="translated">이것은 모든 세션 객체의 기본 클래스입니다. 다음과 같은 표준 사전 방법이 있습니다.</target>
        </trans-unit>
        <trans-unit id="f2519304c5f65e56291eb40940d5cf5c5bbe07b5" translate="yes" xml:space="preserve">
          <source>This is the class of the low-level test runner which is used to execute the individual tests and format the results. By default it is set to &lt;code&gt;unittest.TextTestRunner&lt;/code&gt;. Despite the unfortunate similarity in naming conventions, this is not the same type of class as &lt;code&gt;DiscoverRunner&lt;/code&gt;, which covers a broader set of responsibilities. You can override this attribute to modify the way tests are run and reported.</source>
          <target state="translated">이것은 개별 테스트를 실행하고 결과를 형식화하는 데 사용되는 저수준 테스트 러너 클래스입니다. 기본적으로 &lt;code&gt;unittest.TextTestRunner&lt;/code&gt; 로 설정되어 있습니다. 명명 규칙에서 불행한 유사성에도 불구하고, 이것은 광범위한 책임을 다루는 &lt;code&gt;DiscoverRunner&lt;/code&gt; 와 동일한 유형의 클래스가 아닙니다 . 이 속성을 재정 의하여 테스트 실행 및보고 방식을 수정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="60fa69fee7c0cd707c56a03456337fa21bcf95b5" translate="yes" xml:space="preserve">
          <source>This is the class that loads tests, whether from TestCases or modules or otherwise and bundles them into test suites for the runner to execute. By default it is set to &lt;code&gt;unittest.defaultTestLoader&lt;/code&gt;. You can override this attribute if your tests are going to be loaded in unusual ways.</source>
          <target state="translated">이 클래스는 TestCases 또는 모듈 등에서 테스트를로드하고 러너가 실행할 수 있도록 테스트 스위트에 번들하는 클래스입니다. 기본적으로 &lt;code&gt;unittest.defaultTestLoader&lt;/code&gt; 로 설정되어 있습니다. 테스트가 비정상적인 방식으로로드 될 경우이 속성을 재정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="af4bd790fca4885dfe5ad3167233178ab5532785" translate="yes" xml:space="preserve">
          <source>This is the default &lt;a href=&quot;../../applications#django.apps.AppConfig&quot;&gt;&lt;code&gt;AppConfig&lt;/code&gt;&lt;/a&gt; class for the admin. It calls &lt;a href=&quot;#django.contrib.admin.autodiscover&quot;&gt;&lt;code&gt;autodiscover()&lt;/code&gt;&lt;/a&gt; when Django starts.</source>
          <target state="translated">관리자 의 기본 &lt;a href=&quot;../../applications#django.apps.AppConfig&quot;&gt; &lt;code&gt;AppConfig&lt;/code&gt; &lt;/a&gt; 클래스입니다. Django가 시작되면 &lt;a href=&quot;#django.contrib.admin.autodiscover&quot;&gt; &lt;code&gt;autodiscover()&lt;/code&gt; &lt;/a&gt; 호출 합니다.</target>
        </trans-unit>
        <trans-unit id="0c461cb7e091e00b2e4ea9dd04e9cb4e676e6b54" translate="yes" xml:space="preserve">
          <source>This is the default authentication backend used by Django. It authenticates using credentials consisting of a user identifier and password. For Django&amp;rsquo;s default user model, the user identifier is the username, for custom user models it is the field specified by USERNAME_FIELD (see &lt;a href=&quot;../../topics/auth/customizing&quot;&gt;Customizing Users and authentication&lt;/a&gt;).</source>
          <target state="translated">Django에서 사용하는 기본 인증 백엔드입니다. 사용자 식별자와 비밀번호로 구성된 자격 증명을 사용하여 인증합니다. Django의 기본 사용자 모델의 경우 사용자 식별자는 사용자 이름이며, 사용자 정의 사용자 모델의 경우 USERNAME_FIELD에 지정된 필드입니다 ( &lt;a href=&quot;../../topics/auth/customizing&quot;&gt;사용자 및 인증 사용자 정의&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="7201d135a64b62da7e23b400d45bd9f90b9f95e4" translate="yes" xml:space="preserve">
          <source>This is the default backend. Email will be sent through a SMTP server.</source>
          <target state="translated">이것이 기본 백엔드입니다. 이메일은 SMTP 서버를 통해 전송됩니다.</target>
        </trans-unit>
        <trans-unit id="e3981158729139aae95a94e7985e19cffa9200ff" translate="yes" xml:space="preserve">
          <source>This is the default cache if another is not specified in your settings file. If you want the speed advantages of in-memory caching but don&amp;rsquo;t have the capability of running Memcached, consider the local-memory cache backend. This cache is per-process (see below) and thread-safe. To use it, set &lt;a href=&quot;../ref/settings#std:setting-CACHES-BACKEND&quot;&gt;&lt;code&gt;BACKEND&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;&quot;django.core.cache.backends.locmem.LocMemCache&quot;&lt;/code&gt;. For example:</source>
          <target state="translated">설정 파일에 다른 캐시를 지정하지 않은 경우 기본 캐시입니다. 메모리 내 캐싱의 속도 이점을 원하지만 Memcached를 실행할 수있는 기능이없는 경우 로컬 메모리 캐시 백엔드를 고려하십시오. 이 캐시는 프로세스별로 (아래 참조) 스레드로부터 안전합니다. 사용하려면 &lt;a href=&quot;../ref/settings#std:setting-CACHES-BACKEND&quot;&gt; &lt;code&gt;BACKEND&lt;/code&gt; &lt;/a&gt; 를 &lt;code&gt;&quot;django.core.cache.backends.locmem.LocMemCache&quot;&lt;/code&gt; 로 설정하십시오 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="22d758546cec10c629e4c8205aa9915494abea56" translate="yes" xml:space="preserve">
          <source>This is the default output format.</source>
          <target state="translated">이것이 기본 출력 형식입니다.</target>
        </trans-unit>
        <trans-unit id="19d8c165a0f791a031a7d8d7464b503cb9f43863" translate="yes" xml:space="preserve">
          <source>This is the default widget used by all GeoDjango form fields. &lt;code&gt;template_name&lt;/code&gt; is &lt;code&gt;gis/openlayers.html&lt;/code&gt;.</source>
          <target state="translated">모든 GeoDjango 양식 필드에서 사용하는 기본 위젯입니다. &lt;code&gt;template_name&lt;/code&gt; 은 &lt;code&gt;gis/openlayers.html&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="cb231441779d1157c766bf2350b4d562e04148cb" translate="yes" xml:space="preserve">
          <source>This is the fixed number of times the underlying field will be used.</source>
          <target state="translated">이것은 기본 필드가 사용되는 고정 횟수입니다.</target>
        </trans-unit>
        <trans-unit id="a3bed45538d5ac646a519a59a0fdc1177af38b57" translate="yes" xml:space="preserve">
          <source>This is the inverse of the &lt;a href=&quot;#std:fieldlookup-arrayfield.contains&quot;&gt;&lt;code&gt;contains&lt;/code&gt;&lt;/a&gt; lookup - the objects returned will be those where the data is a subset of the values passed. It uses the SQL operator &lt;code&gt;&amp;lt;@&lt;/code&gt;. For example:</source>
          <target state="translated">이것은 &lt;a href=&quot;#std:fieldlookup-arrayfield.contains&quot;&gt; &lt;code&gt;contains&lt;/code&gt; &lt;/a&gt; 조회 의 역수입니다. 반환 된 객체는 데이터가 전달 된 값의 하위 세트 인 객체입니다. SQL 연산자 &lt;code&gt;&amp;lt;@&lt;/code&gt; 를 사용합니다 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="ee558cfef6de6e36a273a786f7ea5ee5d23897fd" translate="yes" xml:space="preserve">
          <source>This is the inverse of the &lt;a href=&quot;#std:fieldlookup-hstorefield.contains&quot;&gt;&lt;code&gt;contains&lt;/code&gt;&lt;/a&gt; lookup - the objects returned will be those where the key-value pairs on the object are a subset of those in the value passed. It uses the SQL operator &lt;code&gt;&amp;lt;@&lt;/code&gt;. For example:</source>
          <target state="translated">이것은 &lt;a href=&quot;#std:fieldlookup-hstorefield.contains&quot;&gt; &lt;code&gt;contains&lt;/code&gt; &lt;/a&gt; 조회 의 역수입니다. 리턴 된 오브젝트는 오브젝트의 키-값 쌍이 전달 된 값의 서브 세트 인 오브젝트입니다. SQL 연산자 &lt;code&gt;&amp;lt;@&lt;/code&gt; 를 사용합니다 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="a7db72ce273e47b660f3669fac3c706e27c62f17" translate="yes" xml:space="preserve">
          <source>This is the most common class to use for writing tests in Django. It inherits from &lt;a href=&quot;#django.test.TransactionTestCase&quot;&gt;&lt;code&gt;TransactionTestCase&lt;/code&gt;&lt;/a&gt; (and by extension &lt;a href=&quot;#django.test.SimpleTestCase&quot;&gt;&lt;code&gt;SimpleTestCase&lt;/code&gt;&lt;/a&gt;). If your Django application doesn&amp;rsquo;t use a database, use &lt;a href=&quot;#django.test.SimpleTestCase&quot;&gt;&lt;code&gt;SimpleTestCase&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Django에서 테스트를 작성하는 데 사용하는 가장 일반적인 클래스입니다. &lt;a href=&quot;#django.test.TransactionTestCase&quot;&gt; &lt;code&gt;TransactionTestCase&lt;/code&gt; &lt;/a&gt; (및 &lt;a href=&quot;#django.test.SimpleTestCase&quot;&gt; &lt;code&gt;SimpleTestCase&lt;/code&gt; &lt;/a&gt; 확장 ) 에서 상속 합니다. Django 애플리케이션이 데이터베이스를 사용하지 않는 경우 &lt;a href=&quot;#django.test.SimpleTestCase&quot;&gt; &lt;code&gt;SimpleTestCase&lt;/code&gt; 를&lt;/a&gt; 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="38da4b985ab4833ecd3cdfcf1ba8cf31e36e0291" translate="yes" xml:space="preserve">
          <source>This is the only way to perform an aggregation within a &lt;code&gt;Subquery&lt;/code&gt;, as using &lt;a href=&quot;querysets#django.db.models.query.QuerySet.aggregate&quot;&gt;&lt;code&gt;aggregate()&lt;/code&gt;&lt;/a&gt; attempts to evaluate the queryset (and if there is an &lt;code&gt;OuterRef&lt;/code&gt;, this will not be possible to resolve).</source>
          <target state="translated">이것은 &lt;a href=&quot;querysets#django.db.models.query.QuerySet.aggregate&quot;&gt; &lt;code&gt;aggregate()&lt;/code&gt; &lt;/a&gt; 을 사용하여 &lt;code&gt;Subquery&lt;/code&gt; 를 평가하려고 시도하기 때문에 &lt;code&gt;OuterRef&lt;/code&gt; 내에서 집계를 수행하는 유일한 방법입니다 ( OuterRef 가있는 경우 해결할 수 없습니다).</target>
        </trans-unit>
        <trans-unit id="cfbcb6e1d56d0a38ba933a38514d8a63646d37a4" translate="yes" xml:space="preserve">
          <source>This is the recommended way to install Django.</source>
          <target state="translated">Django를 설치하기 위해 권장되는 방법입니다.</target>
        </trans-unit>
        <trans-unit id="426938002df8e712c56424e6150fe7f0d327fd43" translate="yes" xml:space="preserve">
          <source>This is the script that you invoke to run the test suite. It sets up the Django environment, creates the test database and runs the tests.</source>
          <target state="translated">테스트 스위트를 실행하기 위해 호출하는 스크립트입니다. Django 환경을 설정하고 테스트 데이터베이스를 작성하고 테스트를 실행합니다.</target>
        </trans-unit>
        <trans-unit id="3578e014760ac456df06570bc72a943bee34e7ac" translate="yes" xml:space="preserve">
          <source>This is the simplest view possible in Django. To call the view, we need to map it to a URL - and for this we need a URLconf.</source>
          <target state="translated">장고에서 가능한 가장 간단한 모습입니다. 뷰를 호출하려면 뷰를 URL에 매핑해야합니다.이를 위해서는 URLconf가 필요합니다.</target>
        </trans-unit>
        <trans-unit id="44a1c85ad7b6b3cc914c9f12db86884c9446822b" translate="yes" xml:space="preserve">
          <source>This is true of Django itself. Successive releases have offered a number of improvements across the system, but you should still check the real-world performance of your application, because in some cases you may find that changes mean it performs worse rather than better.</source>
          <target state="translated">장고 자체도 마찬가지입니다. 후속 릴리스에서는 시스템 전체에 걸쳐 많은 개선이 이루어졌지만 응용 프로그램의 실제 성능을 여전히 확인해야합니다. 경우에 따라 변경으로 인해 성능이 향상되지 않고 성능이 저하 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b68c3b6299bdb079254b1b7f4e0911f93c797407" translate="yes" xml:space="preserve">
          <source>This is useful for connecting to a database that doesn&amp;rsquo;t support time zones and that isn&amp;rsquo;t managed by Django when &lt;a href=&quot;../../ref/settings#std:setting-USE_TZ&quot;&gt;&lt;code&gt;USE_TZ&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">이는 시간대를 지원하지 않고 &lt;a href=&quot;../../ref/settings#std:setting-USE_TZ&quot;&gt; &lt;code&gt;USE_TZ&lt;/code&gt; &lt;/a&gt; 가 &lt;code&gt;True&lt;/code&gt; 일 때 Django에서 관리하지 않는 데이터베이스에 연결하는 데 유용합니다 .</target>
        </trans-unit>
        <trans-unit id="55552a3cfc48fa1aa8c00895af6fcd8b947d4ff4" translate="yes" xml:space="preserve">
          <source>This is useful for maintaining formatting consistency with the Python-rendered values.</source>
          <target state="translated">이것은 파이썬 렌더링 된 값과 형식 일관성을 유지하는 데 유용합니다.</target>
        </trans-unit>
        <trans-unit id="a0cedbb9284050c9eac621d6a9956946151ccc91" translate="yes" xml:space="preserve">
          <source>This is useful for stubbing out portions of the code that will need translation in the future.</source>
          <target state="translated">이것은 나중에 번역이 필요한 코드 부분을 제거하는 데 유용합니다.</target>
        </trans-unit>
        <trans-unit id="71f0be613c0d6f808a41d9610997fd688d64edf7" translate="yes" xml:space="preserve">
          <source>This is useful if you have a production site that uses heavy-duty caching in various places but a development/test environment where you don&amp;rsquo;t want to cache and don&amp;rsquo;t want to have to change your code to special-case the latter. To activate dummy caching, set &lt;a href=&quot;../ref/settings#std:setting-CACHES-BACKEND&quot;&gt;&lt;code&gt;BACKEND&lt;/code&gt;&lt;/a&gt; like so:</source>
          <target state="translated">이 기능은 다양한 장소에서 강력한 캐싱을 사용하는 프로덕션 사이트가 있지만 캐시를 원하지 않고 후자를 특수한 경우로 코드를 변경하고 싶지 않은 개발 / 테스트 환경에서 유용합니다. 더미 캐싱을 활성화하려면 &lt;a href=&quot;../ref/settings#std:setting-CACHES-BACKEND&quot;&gt; &lt;code&gt;BACKEND&lt;/code&gt; &lt;/a&gt; 과 같이 BACKEND를 설정 하십시오 .</target>
        </trans-unit>
        <trans-unit id="22e9f2a0810a896c4ef92eaf92c00e647181b444" translate="yes" xml:space="preserve">
          <source>This is useful if you have multiple Django instances running under the same hostname. They can use different cookie paths and each instance will only see its own language cookie.</source>
          <target state="translated">동일한 호스트 이름으로 Django 인스턴스를 여러 개 실행하는 경우에 유용합니다. 서로 다른 쿠키 경로를 사용할 수 있으며 각 인스턴스에는 자체 언어 쿠키 만 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="640f1279a5f6b45dde86121da74f4d71c1031d3a" translate="yes" xml:space="preserve">
          <source>This is useful if you have multiple Django instances running under the same hostname. They can use different cookie paths, and each instance will only see its own CSRF cookie.</source>
          <target state="translated">동일한 호스트 이름으로 Django 인스턴스를 여러 개 실행하는 경우에 유용합니다. 서로 다른 쿠키 경로를 사용할 수 있으며 각 인스턴스는 자체 CSRF 쿠키 만 볼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="43956ec5daaf74702b905698c1348aab376301c9" translate="yes" xml:space="preserve">
          <source>This is useful if you have multiple Django instances running under the same hostname. They can use different cookie paths, and each instance will only see its own session cookie.</source>
          <target state="translated">동일한 호스트 이름으로 Django 인스턴스를 여러 개 실행하는 경우에 유용합니다. 서로 다른 쿠키 경로를 사용할 수 있으며 각 인스턴스에는 자체 세션 쿠키 만 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="2c5b0cf9c0198959c0dd4d65aaa877de1e329369" translate="yes" xml:space="preserve">
          <source>This is useful if you want to &lt;a href=&quot;#multiple-formsets-in-view&quot;&gt;use more than one formset in a view&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#multiple-formsets-in-view&quot;&gt;뷰에서 하나 이상의 폼셋&lt;/a&gt; 을 사용 하려는 경우에 유용합니다 .</target>
        </trans-unit>
        <trans-unit id="40e38f4e875f32e8b9cfd56cbd477c20aea259d5" translate="yes" xml:space="preserve">
          <source>This is useful if you want to serialize data directly to a file-like object (which includes an &lt;a href=&quot;../ref/request-response#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt;):</source>
          <target state="translated">이것은 데이터를 파일과 같은 객체 ( &lt;a href=&quot;../ref/request-response#django.http.HttpResponse&quot;&gt; &lt;code&gt;HttpResponse&lt;/code&gt; &lt;/a&gt; 포함 )로 직접 직렬화하려는 경우에 유용합니다 .</target>
        </trans-unit>
        <trans-unit id="cafa7ad5a48705694431ef67ab70a62ae4df71e5" translate="yes" xml:space="preserve">
          <source>This is useful in a number of ways:</source>
          <target state="translated">이것은 여러 가지 방법으로 유용합니다 :</target>
        </trans-unit>
        <trans-unit id="e9958f94d2f8d50287e4d096ceee89c546824284" translate="yes" xml:space="preserve">
          <source>This is useful in web contexts where rasters might be obtained as a buffer from a remote storage or returned from a view without being written to disk.</source>
          <target state="translated">이는 래스터를 원격 저장소에서 버퍼로 가져 오거나 디스크에 쓰지 않고보기에서 반환 할 수있는 웹 컨텍스트에서 유용합니다.</target>
        </trans-unit>
        <trans-unit id="a5029b376e7c8240fd70cb71899c89148c333cf1" translate="yes" xml:space="preserve">
          <source>This is useful when doing data migrations for &lt;a href=&quot;../howto/writing-migrations#data-migrations-and-multiple-databases&quot;&gt;migrations with multiple databases&lt;/a&gt;.</source>
          <target state="translated">이 기능은 &lt;a href=&quot;../howto/writing-migrations#data-migrations-and-multiple-databases&quot;&gt;여러 데이터베이스로&lt;/a&gt; 마이그레이션하기 위해 데이터 마이그레이션을 수행 할 때 유용 합니다 .</target>
        </trans-unit>
        <trans-unit id="4cc5d7bc8b6310433576b4a258c936d65b5c0201" translate="yes" xml:space="preserve">
          <source>This is what proxy model inheritance is for: creating a &lt;em&gt;proxy&lt;/em&gt; for the original model. You can create, delete and update instances of the proxy model and all the data will be saved as if you were using the original (non-proxied) model. The difference is that you can change things like the default model ordering or the default manager in the proxy, without having to alter the original.</source>
          <target state="translated">이것이 프록시 모델 상속을위한 것입니다 : 원래 모델에 대한 &lt;em&gt;프록시&lt;/em&gt; 생성 . 프록시 모델의 인스턴스를 생성, 삭제 및 업데이트 할 수 있으며 모든 데이터는 프록시되지 않은 원래 모델을 사용하는 것처럼 저장됩니다. 차이점은 원본을 변경하지 않고도 프록시에서 기본 모델 순서 또는 기본 관리자와 같은 항목을 변경할 수 있다는 것입니다.</target>
        </trans-unit>
        <trans-unit id="72ca645f52a6fa74ba730942fc53f90104d982ee" translate="yes" xml:space="preserve">
          <source>This is where a filesystem loader would read contents from the filesystem, or a database loader would read from the database. If a matching template doesn&amp;rsquo;t exist, this should raise a &lt;a href=&quot;../../topics/templates#django.template.TemplateDoesNotExist&quot;&gt;&lt;code&gt;TemplateDoesNotExist&lt;/code&gt;&lt;/a&gt; error.</source>
          <target state="translated">파일 시스템 로더가 파일 시스템에서 내용을 읽거나 데이터베이스 로더가 데이터베이스에서 읽습니다. 일치하는 템플릿이 없으면 &lt;a href=&quot;../../topics/templates#django.template.TemplateDoesNotExist&quot;&gt; &lt;code&gt;TemplateDoesNotExist&lt;/code&gt; &lt;/a&gt; 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="07b2f76068d73c0c3d2f55928dcd884ed53ed931" translate="yes" xml:space="preserve">
          <source>This is where asset definitions come in. Django allows you to associate different files &amp;ndash; like stylesheets and scripts &amp;ndash; with the forms and widgets that require those assets. For example, if you want to use a calendar to render DateFields, you can define a custom Calendar widget. This widget can then be associated with the CSS and JavaScript that is required to render the calendar. When the Calendar widget is used on a form, Django is able to identify the CSS and JavaScript files that are required, and provide the list of file names in a form suitable for inclusion on your Web page.</source>
          <target state="translated">Django를 사용하면 스타일 시트 및 스크립트와 같은 다른 파일을 해당 자산이 필요한 양식 및 위젯과 연결할 수 있습니다. 예를 들어, 달력을 사용하여 DateField를 렌더링하려는 경우 사용자 정의 달력 위젯을 정의 할 수 있습니다. 그런 다음이 위젯은 달력을 렌더링하는 데 필요한 CSS 및 JavaScript와 연관 될 수 있습니다. 캘린더 위젯을 양식에 사용하면 Django는 필요한 CSS 및 JavaScript 파일을 식별하고 웹 페이지에 포함하기에 적합한 양식으로 파일 이름 목록을 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="657d1f961917b53c537622820064a43125cfb60b" translate="yes" xml:space="preserve">
          <source>This is why &lt;code&gt;initial&lt;/code&gt; values are only displayed for unbound forms. For bound forms, the HTML output will use the bound data.</source>
          <target state="translated">이것이 &lt;code&gt;initial&lt;/code&gt; 값이 바인딩되지 않은 양식에 대해서만 표시되는 이유 입니다. 바인딩 된 양식의 경우 HTML 출력은 바인딩 된 데이터를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="4b3c8027a85786c5908241449596bd0c8650e1e8" translate="yes" xml:space="preserve">
          <source>This isn&amp;rsquo;t a particularly natural way to refer to an author. It requires that you know the primary key value for the author; it also requires that this primary key value is stable and predictable.</source>
          <target state="translated">이것은 저자를 언급하는 특별한 방법이 아닙니다. 작성자의 기본 키 값을 알아야합니다. 또한이 기본 키 값이 안정적이고 예측 가능해야합니다.</target>
        </trans-unit>
        <trans-unit id="1d6baf34c47c08ca196318a8950a25a5876a55c1" translate="yes" xml:space="preserve">
          <source>This isn&amp;rsquo;t always convenient for application developers. To alleviate this problem, most databases provide an autocommit mode. When autocommit is turned on and no transaction is active, each SQL query gets wrapped in its own transaction. In other words, not only does each such query start a transaction, but the transaction also gets automatically committed or rolled back, depending on whether the query succeeded.</source>
          <target state="translated">항상 응용 프로그램 개발자에게 편리한 것은 아닙니다. 이 문제를 완화하기 위해 대부분의 데이터베이스는 자동 커밋 모드를 제공합니다. 자동 커밋이 설정되어 있고 트랜잭션이 활성화되어 있지 않으면 각 SQL 쿼리는 자체 트랜잭션으로 래핑됩니다. 다시 말해, 이러한 각 쿼리는 트랜잭션을 시작할뿐만 아니라 쿼리의 성공 여부에 따라 트랜잭션도 자동으로 커밋되거나 롤백됩니다.</target>
        </trans-unit>
        <trans-unit id="7ec1d5b6144d77ca8e7c0bf1b9a1201e35f370e0" translate="yes" xml:space="preserve">
          <source>This isn&amp;rsquo;t impressive with only two fields, but for admin forms with dozens of fields, choosing an intuitive order is an important usability detail.</source>
          <target state="translated">두 개의 필드만으로도 인상적이지는 않지만 수십 개의 필드가있는 관리 양식의 경우 직관적 인 순서를 선택하는 것이 중요한 유용성 세부 사항입니다.</target>
        </trans-unit>
        <trans-unit id="d1f6ae4666708026e4ef1c364be5f9c77fd23dc7" translate="yes" xml:space="preserve">
          <source>This keyword is for Oracle only. It is for the tolerance value used by the &lt;code&gt;SDOAGGRTYPE&lt;/code&gt; procedure; the &lt;a href=&quot;https://docs.oracle.com/en/database/oracle/oracle-database/18/spatl/spatial-concepts.html#GUID-CE10AB14-D5EA-43BA-A647-DAC9EEF41EE6&quot;&gt;Oracle documentation&lt;/a&gt; has more details.</source>
          <target state="translated">이 키워드는 Oracle 전용입니다. &lt;code&gt;SDOAGGRTYPE&lt;/code&gt; 프로 시저에서 사용되는 공차 값입니다 . &lt;a href=&quot;https://docs.oracle.com/en/database/oracle/oracle-database/18/spatl/spatial-concepts.html#GUID-CE10AB14-D5EA-43BA-A647-DAC9EEF41EE6&quot;&gt;Oracle 설명서는&lt;/a&gt; 자세한 내용이 있습니다.</target>
        </trans-unit>
        <trans-unit id="8f1340790c34c773f38c9e711de7f1d9fbd3971d" translate="yes" xml:space="preserve">
          <source>This keyword may be used to specify the number of significant digits for the coordinates in the KML representation &amp;ndash; the default value is 8.</source>
          <target state="translated">이 키워드는 KML 표현에서 좌표의 유효 자릿수를 지정하는 데 사용될 수 있습니다. 기본값은 8입니다.</target>
        </trans-unit>
        <trans-unit id="fec28c1f57e67206fee316e97b336744f4010b32" translate="yes" xml:space="preserve">
          <source>This keyword may be used to specify the number of significant digits for the coordinates in the SVG representation &amp;ndash; the default value is 8.</source>
          <target state="translated">이 키워드는 SVG 표현에서 좌표의 유효 자릿수를 지정하는 데 사용될 수 있습니다. 기본값은 8입니다.</target>
        </trans-unit>
        <trans-unit id="dbb901f8b766b225d063f15bac74735e704226f5" translate="yes" xml:space="preserve">
          <source>This library allows specifying translatable text in templates. To enable it, set &lt;a href=&quot;../settings#std:setting-USE_I18N&quot;&gt;&lt;code&gt;USE_I18N&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;True&lt;/code&gt;, then load it with &lt;code&gt;{% load i18n %}&lt;/code&gt;.</source>
          <target state="translated">이 라이브러리를 사용하면 템플릿에서 번역 가능한 텍스트를 지정할 수 있습니다. 이를 활성화하려면 &lt;a href=&quot;../settings#std:setting-USE_I18N&quot;&gt; &lt;code&gt;USE_I18N&lt;/code&gt; &lt;/a&gt; 을 &lt;code&gt;True&lt;/code&gt; 로 설정 한 다음 &lt;code&gt;{% load i18n %}&lt;/code&gt; 로로드하십시오 .</target>
        </trans-unit>
        <trans-unit id="aac3768b194bc2f93bfe1b9fefbe0aa7b31c2a96" translate="yes" xml:space="preserve">
          <source>This library provides control over the localization of values in templates. You only need to load the library using &lt;code&gt;{% load l10n %}&lt;/code&gt;, but you&amp;rsquo;ll often set &lt;a href=&quot;../settings#std:setting-USE_L10N&quot;&gt;&lt;code&gt;USE_L10N&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;True&lt;/code&gt; so that localization is active by default.</source>
          <target state="translated">이 라이브러리는 템플릿에서 값의 지역화를 제어합니다. &lt;code&gt;{% load l10n %}&lt;/code&gt; 를 사용하여 라이브러리 만로드하면 되지만 지역화가 기본적으로 활성화되도록 &lt;a href=&quot;../settings#std:setting-USE_L10N&quot;&gt; &lt;code&gt;USE_L10N&lt;/code&gt; &lt;/a&gt; 을 &lt;code&gt;True&lt;/code&gt; 로 설정하는 경우가 종종 있습니다.</target>
        </trans-unit>
        <trans-unit id="b6cef2503231970f4a3f0901b36673e3dba32b51" translate="yes" xml:space="preserve">
          <source>This library provides control over time zone conversions in templates. Like &lt;code&gt;l10n&lt;/code&gt;, you only need to load the library using &lt;code&gt;{% load tz %}&lt;/code&gt;, but you&amp;rsquo;ll usually also set &lt;a href=&quot;../settings#std:setting-USE_TZ&quot;&gt;&lt;code&gt;USE_TZ&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;True&lt;/code&gt; so that conversion to local time happens by default.</source>
          <target state="translated">이 라이브러리는 템플릿에서 시간대 변환을 제어합니다. &lt;code&gt;l10n&lt;/code&gt; 과 마찬가지로 &lt;code&gt;{% load tz %}&lt;/code&gt; 를 사용하여 라이브러리 만로드하면 되지만 일반적 으로 현지 시간으로 변환되도록 기본적으로 &lt;a href=&quot;../settings#std:setting-USE_TZ&quot;&gt; &lt;code&gt;USE_TZ&lt;/code&gt; &lt;/a&gt; 를 &lt;code&gt;True&lt;/code&gt; 로 설정합니다.</target>
        </trans-unit>
        <trans-unit id="f0e62e6e58385f5ab51336037df7d267b3da3023" translate="yes" xml:space="preserve">
          <source>This limitation does not apply to PostGIS.</source>
          <target state="translated">이 제한은 PostGIS에는 적용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="8bda6b44860874e3ef73e2c13f90b4a86c47f930" translate="yes" xml:space="preserve">
          <source>This limits the number of objects per page and adds a &lt;code&gt;paginator&lt;/code&gt; and &lt;code&gt;page_obj&lt;/code&gt; to the &lt;code&gt;context&lt;/code&gt;. To allow your users to navigate between pages, add links to the next and previous page, in your template like this:</source>
          <target state="translated">이것은 페이지 당 객체의 수를 제한하고 페이지 &lt;code&gt;paginator&lt;/code&gt; 과 &lt;code&gt;page_obj&lt;/code&gt; 를 &lt;code&gt;context&lt;/code&gt; 추가합니다 . 사용자가 페이지를 탐색 할 수있게하려면 다음과 같이 템플릿에서 다음 및 이전 페이지에 대한 링크를 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="b9523d6fdc67d93fc2e6bc504d1a0d98f316fcaa" translate="yes" xml:space="preserve">
          <source>This list of fields will be indexed together (i.e. the appropriate &lt;code&gt;CREATE INDEX&lt;/code&gt; statement will be issued.)</source>
          <target state="translated">이 필드 목록은 함께 색인됩니다 (즉, 적절한 &lt;code&gt;CREATE INDEX&lt;/code&gt; 문이 발행됩니다).</target>
        </trans-unit>
        <trans-unit id="8bc525efcb217b2b4cb667ddf6652e4acca6928d" translate="yes" xml:space="preserve">
          <source>This loader is automatically enabled if &lt;a href=&quot;../settings#std:setting-TEMPLATES-OPTIONS&quot;&gt;&lt;code&gt;OPTIONS['loaders']&lt;/code&gt;&lt;/a&gt; isn&amp;rsquo;t specified and &lt;a href=&quot;../settings#std:setting-TEMPLATES-OPTIONS&quot;&gt;&lt;code&gt;OPTIONS['debug']&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;False&lt;/code&gt; (the latter option defaults to the value of &lt;a href=&quot;../settings#std:setting-DEBUG&quot;&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">이 로더는 &lt;a href=&quot;../settings#std:setting-TEMPLATES-OPTIONS&quot;&gt; &lt;code&gt;OPTIONS['loaders']&lt;/code&gt; &lt;/a&gt; 가 지정되지 않고 &lt;a href=&quot;../settings#std:setting-TEMPLATES-OPTIONS&quot;&gt; &lt;code&gt;OPTIONS['debug']&lt;/code&gt; &lt;/a&gt; 가 &lt;code&gt;False&lt;/code&gt; 인 경우 자동으로 사용 가능합니다 (후자의 옵션은 기본값이 &lt;a href=&quot;../settings#std:setting-DEBUG&quot;&gt; &lt;code&gt;DEBUG&lt;/code&gt; 입니다&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="e572f7d9263ebd612f03aa1a08479bca706c131f" translate="yes" xml:space="preserve">
          <source>This loader is disabled by default.</source>
          <target state="translated">이 로더는 기본적으로 비활성화되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="1f7b2705827937c22f2d6d10ed47c6992486cde8" translate="yes" xml:space="preserve">
          <source>This loader is enabled by default. However it won&amp;rsquo;t find any templates until you set &lt;a href=&quot;../settings#std:setting-TEMPLATES-DIRS&quot;&gt;&lt;code&gt;DIRS&lt;/code&gt;&lt;/a&gt; to a non-empty list:</source>
          <target state="translated">이 로더는 기본적으로 활성화되어 있습니다. 그러나 &lt;a href=&quot;../settings#std:setting-TEMPLATES-DIRS&quot;&gt; &lt;code&gt;DIRS&lt;/code&gt; &lt;/a&gt; 를 비어 있지 않은 목록으로 설정 하기 전까지는 템플릿이 없습니다 .</target>
        </trans-unit>
        <trans-unit id="061bfbc78e0ba85d2fc401970c55d7ef8759efce" translate="yes" xml:space="preserve">
          <source>This loader takes a dictionary of templates as its first argument:</source>
          <target state="translated">이 로더는 템플릿의 사전을 첫 번째 인수로 사용합니다.</target>
        </trans-unit>
        <trans-unit id="dd73f8da7b162f40164577c295d76fecee927d68" translate="yes" xml:space="preserve">
          <source>This logging configuration does the following things:</source>
          <target state="translated">이 로깅 구성은 다음을 수행합니다.</target>
        </trans-unit>
        <trans-unit id="bb69846b5563f3af1cded0d741b4ca883f42ce7a" translate="yes" xml:space="preserve">
          <source>This logging does not include framework-level initialization (e.g. &lt;code&gt;SET TIMEZONE&lt;/code&gt;) or transaction management queries (e.g. &lt;code&gt;BEGIN&lt;/code&gt;, &lt;code&gt;COMMIT&lt;/code&gt;, and &lt;code&gt;ROLLBACK&lt;/code&gt;). Turn on query logging in your database if you wish to view all database queries.</source>
          <target state="translated">이 로깅에는 프레임 워크 수준 초기화 (예 : &lt;code&gt;SET TIMEZONE&lt;/code&gt; ) 또는 트랜잭션 관리 쿼리 (예 : &lt;code&gt;BEGIN&lt;/code&gt; , &lt;code&gt;COMMIT&lt;/code&gt; 및 &lt;code&gt;ROLLBACK&lt;/code&gt; ) 가 포함되지 않습니다 . 모든 데이터베이스 쿼리를 보려면 데이터베이스에서 쿼리 로깅을 켜십시오.</target>
        </trans-unit>
        <trans-unit id="9e4bcc47b6026c8b883997a1688a7bcd9063dc5c" translate="yes" xml:space="preserve">
          <source>This lookup is implemented using &lt;a href=&quot;../../models/lookups#django.db.models.Transform&quot;&gt;&lt;code&gt;Transform&lt;/code&gt;&lt;/a&gt;, so it can be chained with other lookup functions. To use it, you need to add &lt;code&gt;'django.contrib.postgres'&lt;/code&gt; in your &lt;a href=&quot;../../settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; and activate the &lt;a href=&quot;https://www.postgresql.org/docs/current/unaccent.html&quot;&gt;unaccent extension on PostgreSQL&lt;/a&gt;. The &lt;a href=&quot;operations#django.contrib.postgres.operations.UnaccentExtension&quot;&gt;&lt;code&gt;UnaccentExtension&lt;/code&gt;&lt;/a&gt; migration operation is available if you want to perform this activation using migrations).</source>
          <target state="translated">이 조회는 &lt;a href=&quot;../../models/lookups#django.db.models.Transform&quot;&gt; &lt;code&gt;Transform&lt;/code&gt; 을&lt;/a&gt; 사용하여 구현 되므로 다른 조회 기능과 연결될 수 있습니다. 사용하려면 &lt;a href=&quot;../../settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt; 에 &lt;code&gt;'django.contrib.postgres'&lt;/code&gt; 를 추가 &lt;a href=&quot;https://www.postgresql.org/docs/current/unaccent.html&quot;&gt;하고 PostgreSQL&lt;/a&gt; 에서 unaccent 확장을 활성화해야 합니다 . &lt;a href=&quot;operations#django.contrib.postgres.operations.UnaccentExtension&quot;&gt; &lt;code&gt;UnaccentExtension&lt;/code&gt; 의&lt;/a&gt; 사용자가 마이그레이션을 사용하여이 활성화)을 수행하려는 경우 마이그레이션 작업이 가능합니다.</target>
        </trans-unit>
        <trans-unit id="798bed8702ba2679b20e511af7da842cae8387f4" translate="yes" xml:space="preserve">
          <source>This lookup order can cause some unexpected behavior with objects that override dictionary lookup. For example, consider the following code snippet that attempts to loop over a &lt;code&gt;collections.defaultdict&lt;/code&gt;:</source>
          <target state="translated">이 조회 순서는 사전 조회를 재정의하는 개체에 예기치 않은 동작을 일으킬 수 있습니다. 예를 들어 &lt;code&gt;collections.defaultdict&lt;/code&gt; 을 반복하려고 시도하는 다음 코드 스 니펫을 고려하십시오 .</target>
        </trans-unit>
        <trans-unit id="fb8c229d6716119ce54124e2a889d8ed72428868" translate="yes" xml:space="preserve">
          <source>This make the action match what the admin itself does after successfully performing an action:</source>
          <target state="translated">이렇게하면 작업을 성공적으로 수행 한 후 관리자가 수행하는 작업과 작업이 일치합니다.</target>
        </trans-unit>
        <trans-unit id="70f316bf5cded1be31eeaf9f4c3cd7444e88389a" translate="yes" xml:space="preserve">
          <source>This makes it less trivial for an attacker to escalate a cross-site scripting vulnerability into full hijacking of a user&amp;rsquo;s session. There aren&amp;rsquo;t many good reasons for turning this off. Your code shouldn&amp;rsquo;t read session cookies from JavaScript.</source>
          <target state="translated">따라서 공격자가 사이트 간 스크립팅 취약점을 사용자 세션의 전체 하이재킹으로 에스컬레이션하는 것이 쉽지 않습니다. 이것을 끄는 데는 많은 이유가 없습니다. 코드는 JavaScript에서 세션 쿠키를 읽지 않아야합니다.</target>
        </trans-unit>
        <trans-unit id="27f5b5a242ed05d60c0e7c152b348b72f7ee6454" translate="yes" xml:space="preserve">
          <source>This makes the &lt;code&gt;export_selected_objects&lt;/code&gt; action globally available as an action named &amp;ldquo;export_selected_objects&amp;rdquo;. You can explicitly give the action a name &amp;ndash; good if you later want to programmatically &lt;a href=&quot;#disabling-admin-actions&quot;&gt;remove the action&lt;/a&gt; &amp;ndash; by passing a second argument to &lt;a href=&quot;#django.contrib.admin.AdminSite.add_action&quot;&gt;&lt;code&gt;AdminSite.add_action()&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">이를 통해 &lt;code&gt;export_selected_objects&lt;/code&gt; 조치를 &quot;export_selected_objects&quot;조치로 전역 적으로 사용할 수 있습니다. &lt;a href=&quot;#django.contrib.admin.AdminSite.add_action&quot;&gt; &lt;code&gt;AdminSite.add_action()&lt;/code&gt; &lt;/a&gt; 두 번째 인수를 전달 &lt;a href=&quot;#disabling-admin-actions&quot;&gt;하여 조치&lt;/a&gt; 이름을 명시 적으로 지정할 수 있습니다 (나중에 프로그램 적 으로 조치를 제거 하려는 경우에 좋습니다 ) .</target>
        </trans-unit>
        <trans-unit id="25a692358fe14aa742c8cf53cb44616d16964852" translate="yes" xml:space="preserve">
          <source>This manager is used to access objects that are related to from some other model. In those situations, Django has to be able to see all the objects for the model it is fetching, so that &lt;em&gt;anything&lt;/em&gt; which is referred to can be retrieved.</source>
          <target state="translated">이 관리자는 다른 모델과 관련된 개체에 액세스하는 데 사용됩니다. 이러한 상황에서 Django는 가져 오는 모델의 모든 객체를 볼 수 있어야하므로 참조 된 모든 &lt;em&gt;항목&lt;/em&gt; 을 검색 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="84a62b6a03ff057b389984333781dbd1f2f5a392" translate="yes" xml:space="preserve">
          <source>This mapping can be as short or as long as needed. It can reference other mappings. And, because it&amp;rsquo;s pure Python code, it can be constructed dynamically.</source>
          <target state="translated">이 매핑은 필요한만큼 짧거나 길 수 있습니다. 다른 매핑을 참조 할 수 있습니다. 또한 순수한 Python 코드이기 때문에 동적으로 구성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="88cadbb4c4d2ebd0123eca8cc756bde2334aacdc" translate="yes" xml:space="preserve">
          <source>This may be done at the time the user is created, for example:</source>
          <target state="translated">이는 사용자가 생성 될 때 수행 될 수 있습니다 (예 :</target>
        </trans-unit>
        <trans-unit id="823abfa7b93049ac5970a761fa50df36ae597242" translate="yes" xml:space="preserve">
          <source>This means that Django will use &lt;a href=&quot;https://en.wikipedia.org/wiki/PBKDF2&quot;&gt;PBKDF2&lt;/a&gt; to store all passwords but will support checking passwords stored with PBKDF2SHA1, &lt;a href=&quot;https://en.wikipedia.org/wiki/Argon2&quot;&gt;argon2&lt;/a&gt;, and &lt;a href=&quot;https://en.wikipedia.org/wiki/Bcrypt&quot;&gt;bcrypt&lt;/a&gt;.</source>
          <target state="translated">이는 Django가 &lt;a href=&quot;https://en.wikipedia.org/wiki/PBKDF2&quot;&gt;PBKDF2&lt;/a&gt; 를 사용 하여 모든 비밀번호를 저장하지만 PBKDF2SHA1, &lt;a href=&quot;https://en.wikipedia.org/wiki/Argon2&quot;&gt;argon2&lt;/a&gt; 및 &lt;a href=&quot;https://en.wikipedia.org/wiki/Bcrypt&quot;&gt;bcrypt로&lt;/a&gt; 저장된 비밀번호 확인을 지원함 을 의미 합니다.</target>
        </trans-unit>
        <trans-unit id="881aa3565e650cdafee2d8b3ad5825b32c11953a" translate="yes" xml:space="preserve">
          <source>This means that historical model problems may not be immediately obvious. If you run into this kind of failure, it&amp;rsquo;s OK to edit the migration to use the historical models rather than direct imports and commit those changes.</source>
          <target state="translated">이는 역사적 모델 문제가 즉각적으로 명확하지 않을 수 있음을 의미합니다. 이런 종류의 실패가 발생하면 직접 가져 오기 대신 히스토리 모델을 사용하도록 마이그레이션을 편집하고 변경 사항을 커밋해도됩니다.</target>
        </trans-unit>
        <trans-unit id="9d330a29c4a176f4880b94635e776d6d09dee777" translate="yes" xml:space="preserve">
          <source>This means that when you run the migrations, the &lt;code&gt;authors&lt;/code&gt; migration runs first and creates the table the &lt;code&gt;ForeignKey&lt;/code&gt; references, and then the migration that makes the &lt;code&gt;ForeignKey&lt;/code&gt; column runs afterwards and creates the constraint. If this didn&amp;rsquo;t happen, the migration would try to create the &lt;code&gt;ForeignKey&lt;/code&gt; column without the table it&amp;rsquo;s referencing existing and your database would throw an error.</source>
          <target state="translated">즉, 마이그레이션을 실행할 때 &lt;code&gt;authors&lt;/code&gt; 마이그레이션이 먼저 실행되고 &lt;code&gt;ForeignKey&lt;/code&gt; 참조 테이블 을 만든 다음 &lt;code&gt;ForeignKey&lt;/code&gt; 열 을 만드는 마이그레이션이 나중에 실행되고 제약 조건이 생성됩니다. 이 문제가 발생하지 않으면 마이그레이션 에서 기존 테이블을 참조하지 않고 &lt;code&gt;ForeignKey&lt;/code&gt; 열 을 만들려고 시도하고 데이터베이스에서 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="ce917c919073f22198247177a0f18bb569d8c066" translate="yes" xml:space="preserve">
          <source>This means that you will NOT have custom &lt;code&gt;save()&lt;/code&gt; methods called on objects when you access them in migrations, and you will NOT have any custom constructors or instance methods. Plan appropriately!</source>
          <target state="translated">즉 , 마이그레이션에서 객체에 액세스 할 때 객체에 대해 사용자 정의 &lt;code&gt;save()&lt;/code&gt; 메소드를 호출하지 않으며, 사용자 정의 생성자 또는 인스턴스 메소드가 없습니다. 적절히 계획하십시오!</target>
        </trans-unit>
        <trans-unit id="6e262b679eecd469f1389dc5492b6c7c01048ec2" translate="yes" xml:space="preserve">
          <source>This means things should work intuitively, so the abstraction doesn&amp;rsquo;t leak. For example, to retrieve all the entries that contain a percent sign, use the percent sign as any other character:</source>
          <target state="translated">즉, 일이 직관적으로 작동해야하므로 추상화가 누출되지 않습니다. 예를 들어, 백분율 기호가 포함 된 모든 항목을 검색하려면 백분율 기호를 다른 문자로 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="29c8c90e84903f305ccf0b6ec841763ce0622daa" translate="yes" xml:space="preserve">
          <source>This means you can store templates with your individual apps. This also helps to distribute Django apps with default templates.</source>
          <target state="translated">즉, 개별 앱과 함께 템플릿을 저장할 수 있습니다. 또한 기본 템플릿으로 Django 앱을 배포하는 데 도움이됩니다.</target>
        </trans-unit>
        <trans-unit id="d674da615e8dd0909b3485ca34f4c1919a711b0a" translate="yes" xml:space="preserve">
          <source>This means you would write</source>
          <target state="translated">이것은 당신이 쓸 것임을 의미합니다</target>
        </trans-unit>
        <trans-unit id="3e7206b0f18c1b7d52f5425c091e1a6517af3ae5" translate="yes" xml:space="preserve">
          <source>This means, instead of instantiating a &lt;code&gt;Client&lt;/code&gt; in each test:</source>
          <target state="translated">이는 각 테스트에서 &lt;code&gt;Client&lt;/code&gt; 를 인스턴스화하는 대신 다음을 의미합니다 .</target>
        </trans-unit>
        <trans-unit id="015dbeea32c33974e576bb465e437088c98dace7" translate="yes" xml:space="preserve">
          <source>This method &lt;strong&gt;must be implemented&lt;/strong&gt; by the subclass, and since the value may be empty, the implementation must be defensive.</source>
          <target state="translated">이 메소드 &lt;strong&gt;는&lt;/strong&gt; 서브 클래스에 의해 &lt;strong&gt;구현되어야하며&lt;/strong&gt; 값이 비어있을 수 있으므로 구현은 방어 적이어야합니다.</target>
        </trans-unit>
        <trans-unit id="080eb1d1cd70bcd376c7d2e21ee864b2cdade0bb" translate="yes" xml:space="preserve">
          <source>This method accepts a &lt;code&gt;clear&lt;/code&gt; argument to control how to perform the operation. If &lt;code&gt;False&lt;/code&gt; (the default), the elements missing from the new set are removed using &lt;code&gt;remove()&lt;/code&gt; and only the new ones are added. If &lt;code&gt;clear=True&lt;/code&gt;, the &lt;code&gt;clear()&lt;/code&gt; method is called instead and the whole set is added at once.</source>
          <target state="translated">이 메소드는 조작 수행 방법을 제어하기 위해 &lt;code&gt;clear&lt;/code&gt; 인수를 허용 합니다. 경우 &lt;code&gt;False&lt;/code&gt; (기본), 새로운 세트에서 누락 된 요소를 사용하여 제거 &lt;code&gt;remove()&lt;/code&gt; 만 새로 추가됩니다. 만약 &lt;code&gt;clear=True&lt;/code&gt; 1, &lt;code&gt;clear()&lt;/code&gt; 메서드를 대신 호출되고 전체 세트를 한 번에 추가됩니다.</target>
        </trans-unit>
        <trans-unit id="6258c4ca11bfe7eb08298a50b3a5d3fd21eb28ec" translate="yes" xml:space="preserve">
          <source>This method allows adding errors to specific fields from within the &lt;code&gt;Form.clean()&lt;/code&gt; method, or from outside the form altogether; for instance from a view.</source>
          <target state="translated">이 메소드를 사용하면 &lt;code&gt;Form.clean()&lt;/code&gt; 메소드 내에서 또는 양식 외부 에서 특정 필드에 오류를 추가 할 수 있습니다 . 예를 들어보기에서.</target>
        </trans-unit>
        <trans-unit id="f0609a9b18f0c262bbb7a77ddbdb916903c7fd49" translate="yes" xml:space="preserve">
          <source>This method calls &lt;a href=&quot;#django.db.models.Model.clean_fields&quot;&gt;&lt;code&gt;Model.clean_fields()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#django.db.models.Model.clean&quot;&gt;&lt;code&gt;Model.clean()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#django.db.models.Model.validate_unique&quot;&gt;&lt;code&gt;Model.validate_unique()&lt;/code&gt;&lt;/a&gt; (if &lt;code&gt;validate_unique&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;), in that order and raises a &lt;a href=&quot;../exceptions#django.core.exceptions.ValidationError&quot;&gt;&lt;code&gt;ValidationError&lt;/code&gt;&lt;/a&gt; that has a &lt;code&gt;message_dict&lt;/code&gt; attribute containing errors from all three stages.</source>
          <target state="translated">이 메소드는 &lt;a href=&quot;#django.db.models.Model.clean_fields&quot;&gt; &lt;code&gt;Model.clean_fields()&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#django.db.models.Model.clean&quot;&gt; &lt;code&gt;Model.clean()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#django.db.models.Model.validate_unique&quot;&gt; &lt;code&gt;Model.validate_unique()&lt;/code&gt; &lt;/a&gt; ( &lt;code&gt;validate_unique&lt;/code&gt; 가 &lt;code&gt;True&lt;/code&gt; 인 경우 )를이 순서대로 호출 하고 세 단계의 오류를 모두 포함 하는 &lt;code&gt;message_dict&lt;/code&gt; 속성 이있는 &lt;a href=&quot;../exceptions#django.core.exceptions.ValidationError&quot;&gt; &lt;code&gt;ValidationError&lt;/code&gt; &lt;/a&gt; 를 발생시킵니다.</target>
        </trans-unit>
        <trans-unit id="c013f93834c75986f57585a6ed4bf0d38ed28a4a" translate="yes" xml:space="preserve">
          <source>This method can also be used to determine the availability of a model on a given database.</source>
          <target state="translated">이 방법을 사용하여 지정된 데이터베이스에서 모델의 가용성을 확인할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="f75a886d7588dd8a1df9e434ffd0479aa5cca05b" translate="yes" xml:space="preserve">
          <source>This method efficiently updates the given fields on the provided model instances, generally with one query:</source>
          <target state="translated">이 방법은 일반적으로 하나의 쿼리로 제공된 모델 인스턴스에서 제공된 필드를 효율적으로 업데이트합니다.</target>
        </trans-unit>
        <trans-unit id="9ea59edbb3ad3481aa459a9a3983985b9590f068" translate="yes" xml:space="preserve">
          <source>This method exists for convenience and readability.</source>
          <target state="translated">이 방법은 편의성과 가독성을 위해 존재합니다.</target>
        </trans-unit>
        <trans-unit id="c8cc4cdf3a23f8c4e59f54a621a7c2dd8a1a118c" translate="yes" xml:space="preserve">
          <source>This method inserts the provided list of objects into the database in an efficient manner (generally only 1 query, no matter how many objects there are):</source>
          <target state="translated">이 메소드는 제공된 오브젝트 목록을 효율적인 방식으로 데이터베이스에 삽입합니다 (일반적으로 오브젝트 수에 관계없이 하나의 쿼리 만).</target>
        </trans-unit>
        <trans-unit id="3379c9f933913b2b5106787692685b4c9ccef7c0" translate="yes" xml:space="preserve">
          <source>This method inspects the WKT of this &lt;code&gt;SpatialReference&lt;/code&gt; and will add EPSG authority nodes where an EPSG identifier is applicable.</source>
          <target state="translated">이 방법은이 &lt;code&gt;SpatialReference&lt;/code&gt; 의 WKT를 검사하고 EPSG 식별자가 적용 가능한 EPSG 권한 노드를 추가합니다.</target>
        </trans-unit>
        <trans-unit id="ff2403a4104263a63cd1f43b21d449f59cc2b5cf" translate="yes" xml:space="preserve">
          <source>This method is &lt;strong&gt;grossly inefficient&lt;/strong&gt; and probably &lt;strong&gt;insecure&lt;/strong&gt;, so it is &lt;strong&gt;unsuitable for production&lt;/strong&gt;.</source>
          <target state="translated">이 방법은 &lt;strong&gt;매우 비효율적&lt;/strong&gt; 이고 &lt;strong&gt;안전하지&lt;/strong&gt; 않을 수 있으므로 &lt;strong&gt;생산에 적합하지 않습니다&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="e1e45c4b646180f2607e907f254c2c15286bd31d" translate="yes" xml:space="preserve">
          <source>This method is atomic assuming that the database enforces uniqueness of the keyword arguments (see &lt;a href=&quot;fields#django.db.models.Field.unique&quot;&gt;&lt;code&gt;unique&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;options#django.db.models.Options.unique_together&quot;&gt;&lt;code&gt;unique_together&lt;/code&gt;&lt;/a&gt;). If the fields used in the keyword arguments do not have a uniqueness constraint, concurrent calls to this method may result in multiple rows with the same parameters being inserted.</source>
          <target state="translated">이 메소드는 데이터베이스가 키워드 인수의 고유성을 강제한다고 가정합니다 ( &lt;a href=&quot;fields#django.db.models.Field.unique&quot;&gt; &lt;code&gt;unique&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;options#django.db.models.Options.unique_together&quot;&gt; &lt;code&gt;unique_together&lt;/code&gt; &lt;/a&gt; 참조 ). 키워드 인수에 사용 된 필드에 고유 제한 조건이없는 경우이 메소드를 동시에 호출하면 동일한 매개 변수를 가진 여러 행이 삽입 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="11936f0f0a4a4fe606ced71d22ac4a9f7bcc4a71" translate="yes" xml:space="preserve">
          <source>This method is automatically called during the response initialization and set various headers (&lt;code&gt;Content-Length&lt;/code&gt;, &lt;code&gt;Content-Type&lt;/code&gt;, and &lt;code&gt;Content-Disposition&lt;/code&gt;) depending on &lt;code&gt;open_file&lt;/code&gt;.</source>
          <target state="translated">이 메소드는 응답 초기화 중에 자동으로 호출 되며 &lt;code&gt;open_file&lt;/code&gt; 에 따라 다양한 헤더 ( &lt;code&gt;Content-Length&lt;/code&gt; , &lt;code&gt;Content-Type&lt;/code&gt; 및 &lt;code&gt;Content-Disposition&lt;/code&gt; )를 설정 합니다.</target>
        </trans-unit>
        <trans-unit id="8d48c4a7570d4b0786427804e72031d7d508e336" translate="yes" xml:space="preserve">
          <source>This method is called at the end of the request directly by the WSGI server, or when the WSGI server closes the file-like object, if &lt;a href=&quot;https://www.python.org/dev/peps/pep-3333/#optional-platform-specific-file-handling&quot;&gt;wsgi.file_wrapper&lt;/a&gt; is used for the request.</source>
          <target state="translated">이 메소드는 요청에 &lt;a href=&quot;https://www.python.org/dev/peps/pep-3333/#optional-platform-specific-file-handling&quot;&gt;wsgi.file_wrapper&lt;/a&gt; 가 사용 된 경우 WSGI 서버에 의해 요청이 끝날 때 또는 WSGI 서버가 파일과 유사한 오브젝트를 닫을 때 호출 됩니다.</target>
        </trans-unit>
        <trans-unit id="0fde432efc213a0a15aab857a3786addcbc1a373" translate="yes" xml:space="preserve">
          <source>This method is faster than &lt;code&gt;login()&lt;/code&gt; since the expensive password hashing algorithms are bypassed. Also, you can speed up &lt;code&gt;login()&lt;/code&gt; by &lt;a href=&quot;overview#speeding-up-tests-auth-hashers&quot;&gt;using a weaker hasher while testing&lt;/a&gt;.</source>
          <target state="translated">이 방법은 값 비싼 비밀번호 해싱 알고리즘이 무시되므로 &lt;code&gt;login()&lt;/code&gt; 보다 빠릅니다 . 또한, 당신은 속도를 높일 수 있습니다 &lt;code&gt;login()&lt;/code&gt; 하여 &lt;a href=&quot;overview#speeding-up-tests-auth-hashers&quot;&gt;테스트하는 동안 약한 심부름 군을 사용하여&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="be0b4eaf5762663b90c57c42fc7b364ccaa3d25b" translate="yes" xml:space="preserve">
          <source>This method is for controlling which database the &lt;code&gt;QuerySet&lt;/code&gt; will be evaluated against if you are using more than one database. The only argument this method takes is the alias of a database, as defined in &lt;a href=&quot;../settings#std:setting-DATABASES&quot;&gt;&lt;code&gt;DATABASES&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 방법은 둘 이상의 데이터베이스를 사용하는 경우 &lt;code&gt;QuerySet&lt;/code&gt; 을 평가할 데이터베이스를 제어하기위한 것입니다. 이 메소드가 취하는 유일한 인수는 &lt;a href=&quot;../settings#std:setting-DATABASES&quot;&gt; &lt;code&gt;DATABASES&lt;/code&gt; 에&lt;/a&gt; 정의 된대로 데이터베이스의 별명입니다 .</target>
        </trans-unit>
        <trans-unit id="75c0d945fab944d556bde37a8ef60cef0e7a6405" translate="yes" xml:space="preserve">
          <source>This method is not used for most built-in fields as the database backend already returns the correct Python type, or the backend itself does the conversion.</source>
          <target state="translated">데이터베이스 백엔드가 이미 올바른 Python 유형을 리턴하거나 백엔드 자체가 변환을 수행하므로이 메소드는 대부분의 내장 필드에 사용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="da8f1ec848a96ac31b6cd8594814879c77555704" translate="yes" xml:space="preserve">
          <source>This method is often used by &lt;a href=&quot;#django.db.models.Field.value_to_string&quot;&gt;&lt;code&gt;value_to_string()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 메소드는 종종 &lt;a href=&quot;#django.db.models.Field.value_to_string&quot;&gt; &lt;code&gt;value_to_string()&lt;/code&gt; &lt;/a&gt; 의해 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="c4dd30a8aeb968408efe60ccd4ac01ec4cb4d9d8" translate="yes" xml:space="preserve">
          <source>This method is primarily used internally. You should use a widget instead.</source>
          <target state="translated">이 방법은 주로 내부적으로 사용됩니다. 대신 위젯을 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="6f44224f7aae7f1054a48cf18856727d7f474fc2" translate="yes" xml:space="preserve">
          <source>This method is similar to &lt;a href=&quot;#django.db.models.Model.clean_fields&quot;&gt;&lt;code&gt;clean_fields()&lt;/code&gt;&lt;/a&gt;, but validates all uniqueness constraints on your model instead of individual field values. The optional &lt;code&gt;exclude&lt;/code&gt; argument allows you to provide a list of field names to exclude from validation. It will raise a &lt;a href=&quot;../exceptions#django.core.exceptions.ValidationError&quot;&gt;&lt;code&gt;ValidationError&lt;/code&gt;&lt;/a&gt; if any fields fail validation.</source>
          <target state="translated">이 메소드는 &lt;a href=&quot;#django.db.models.Model.clean_fields&quot;&gt; &lt;code&gt;clean_fields()&lt;/code&gt; &lt;/a&gt; 와 유사 하지만 개별 필드 값 대신 모델의 모든 고유성 제한 조건의 유효성을 검증합니다. 선택적 &lt;code&gt;exclude&lt;/code&gt; 인수를 사용하면 유효성 검증에서 제외 할 필드 이름 목록을 제공 할 수 있습니다. 필드가 유효성 검사에 실패 하면 &lt;a href=&quot;../exceptions#django.core.exceptions.ValidationError&quot;&gt; &lt;code&gt;ValidationError&lt;/code&gt; &lt;/a&gt; 가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="9f91de92127376a536fa9059205131938feed775" translate="yes" xml:space="preserve">
          <source>This method makes an &lt;a href=&quot;#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt; instance a file-like object.</source>
          <target state="translated">이 메소드는 &lt;a href=&quot;#django.http.HttpResponse&quot;&gt; &lt;code&gt;HttpResponse&lt;/code&gt; &lt;/a&gt; 인스턴스를 파일과 유사한 오브젝트로 만듭니다.</target>
        </trans-unit>
        <trans-unit id="478237cfb08554607b715f4eb1feb0cf7ef1258f" translate="yes" xml:space="preserve">
          <source>This method may be overridden with your own custom search method. For example, you might wish to search by an integer field, or use an external tool such as Solr or Haystack. You must establish if the queryset changes implemented by your search method may introduce duplicates into the results, and return &lt;code&gt;True&lt;/code&gt; in the second element of the return value.</source>
          <target state="translated">이 방법은 사용자 정의 검색 방법으로 재정의 될 수 있습니다. 예를 들어, 정수 필드로 검색하거나 Solr 또는 Haystack과 같은 외부 도구를 사용할 수 있습니다. 검색 방법으로 구현 된 쿼리 세트 변경으로 인해 결과에 중복이 발생할 수 있는지 확인 하고 반환 값의 두 번째 요소에 &lt;code&gt;True&lt;/code&gt; 를 반환해야합니다.</target>
        </trans-unit>
        <trans-unit id="7f02ad5e13a38bddd61f1ac8b9533a7a55bd0726" translate="yes" xml:space="preserve">
          <source>This method may raise a &lt;code&gt;StopFutureHandlers&lt;/code&gt; exception to prevent future handlers from handling this file.</source>
          <target state="translated">이 메소드는 향후 핸들러가이 파일을 처리하지 못하도록 &lt;code&gt;StopFutureHandlers&lt;/code&gt; 예외를 발생시킬 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="804c55a18383ec732e12c536b9a3a61fc15bd6c2" translate="yes" xml:space="preserve">
          <source>This method must be added to fields prior to 1.7 to migrate its data using &lt;a href=&quot;../../topics/migrations&quot;&gt;Migrations&lt;/a&gt;.</source>
          <target state="translated">마이그레이션을 사용하여 데이터를 &lt;a href=&quot;../../topics/migrations&quot;&gt;마이그레이션&lt;/a&gt; 하려면 1.7 이전의 필드에이 방법을 추가해야합니다 .</target>
        </trans-unit>
        <trans-unit id="a6882b83a65c5db4edb77c762d14d355e3f0cbbb" translate="yes" xml:space="preserve">
          <source>This method must be implemented in the subclasses.</source>
          <target state="translated">이 메소드는 서브 클래스에서 구현되어야합니다.</target>
        </trans-unit>
        <trans-unit id="e3fe75950ea64fc2ce50bddb833b2733bfb58617" translate="yes" xml:space="preserve">
          <source>This method must return a 4-tuple of &lt;code&gt;(deleted_objects, model_count, perms_needed, protected)&lt;/code&gt;.</source>
          <target state="translated">이 메소드는 4 개의 튜플 &lt;code&gt;(deleted_objects, model_count, perms_needed, protected)&lt;/code&gt; 리턴해야합니다 .</target>
        </trans-unit>
        <trans-unit id="c52f3dc1cca47c17d07d17b3778bf381b8ffd448" translate="yes" xml:space="preserve">
          <source>This method returns a &lt;a href=&quot;#django.contrib.gis.geos.GEOSGeometry&quot;&gt;&lt;code&gt;GEOSGeometry&lt;/code&gt;&lt;/a&gt; that is a clone of the original.</source>
          <target state="translated">이 메소드는 원본의 복제 &lt;a href=&quot;#django.contrib.gis.geos.GEOSGeometry&quot;&gt; &lt;code&gt;GEOSGeometry&lt;/code&gt; &lt;/a&gt; 를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="d9636e56a3e2c9a7c772a2d76fcb0e8d1c34388e" translate="yes" xml:space="preserve">
          <source>This method returns a &lt;a href=&quot;geos#django.contrib.gis.geos.GEOSGeometry&quot;&gt;&lt;code&gt;GEOSGeometry&lt;/code&gt;&lt;/a&gt; object comprising the union of every geometry in the queryset. Please note that use of &lt;code&gt;Union&lt;/code&gt; is processor intensive and may take a significant amount of time on large querysets.</source>
          <target state="translated">이 메소드는 &lt;a href=&quot;geos#django.contrib.gis.geos.GEOSGeometry&quot;&gt; &lt;code&gt;GEOSGeometry&lt;/code&gt; &lt;/a&gt; 에있는 모든 지오메트리의 합집합으로 구성된 GEOSGeometry 객체를 반환합니다 . &lt;code&gt;Union&lt;/code&gt; 의 사용 은 프로세서를 많이 사용하며 큰 쿼리 집합에서 상당한 시간이 걸릴 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b3e7d901a8c7b5f5ddebc53f1fae5f644abcd615" translate="yes" xml:space="preserve">
          <source>This method returns a boolean designating whether a field has an error with a specific error &lt;code&gt;code&lt;/code&gt;. If &lt;code&gt;code&lt;/code&gt; is &lt;code&gt;None&lt;/code&gt;, it will return &lt;code&gt;True&lt;/code&gt; if the field contains any errors at all.</source>
          <target state="translated">이 메소드는 필드에 특정 오류 &lt;code&gt;code&lt;/code&gt; 의 오류가 있는지 여부를 지정하는 부울을 리턴합니다 . 경우 &lt;code&gt;code&lt;/code&gt; 없는 &lt;code&gt;None&lt;/code&gt; , 그것은 반환 &lt;code&gt;True&lt;/code&gt; 필드가 전혀 오류가 포함되어있는 경우.</target>
        </trans-unit>
        <trans-unit id="abe1e08ec2eacfb8545fd663797ae0a36aee1227" translate="yes" xml:space="preserve">
          <source>This method returns the list of errors from &lt;a href=&quot;#django.forms.Form.errors&quot;&gt;&lt;code&gt;Form.errors&lt;/code&gt;&lt;/a&gt; that aren&amp;rsquo;t associated with a particular field. This includes &lt;code&gt;ValidationError&lt;/code&gt;s that are raised in &lt;a href=&quot;#django.forms.Form.clean&quot;&gt;&lt;code&gt;Form.clean()&lt;/code&gt;&lt;/a&gt; and errors added using &lt;a href=&quot;#django.forms.Form.add_error&quot;&gt;&lt;code&gt;Form.add_error(None,
&quot;...&quot;)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 메서드는 &lt;a href=&quot;#django.forms.Form.errors&quot;&gt; &lt;code&gt;Form.errors&lt;/code&gt; &lt;/a&gt; 에서 특정 필드와 관련이없는 오류 목록을 반환합니다 . 여기에는 &lt;a href=&quot;#django.forms.Form.clean&quot;&gt; &lt;code&gt;Form.clean()&lt;/code&gt; &lt;/a&gt; 에서 발생하는 &lt;code&gt;ValidationError&lt;/code&gt; 및 &lt;a href=&quot;#django.forms.Form.add_error&quot;&gt; &lt;code&gt;Form.add_error(None, &quot;...&quot;)&lt;/code&gt; &lt;/a&gt; 사용하여 추가 된 오류가 포함됩니다 .</target>
        </trans-unit>
        <trans-unit id="c390e9e6746a152b20430fa99045536dcf2d8d70" translate="yes" xml:space="preserve">
          <source>This method should be used to provide custom model validation, and to modify attributes on your model if desired. For instance, you could use it to automatically provide a value for a field, or to do validation that requires access to more than a single field:</source>
          <target state="translated">이 방법은 사용자 정의 모델 검증을 제공하고 원하는 경우 모델의 속성을 수정하는 데 사용해야합니다. 예를 들어, 필드를 사용하여 필드에 대한 값을 자동으로 제공하거나 둘 이상의 필드에 액세스해야하는 유효성 검증을 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="78dd50117abf8b09315b29e855b6e35f86842bf2" translate="yes" xml:space="preserve">
          <source>This method should return a dictionary in the form &lt;code&gt;{'fieldname': 'fieldval'}&lt;/code&gt;:</source>
          <target state="translated">이 메소드는 &lt;code&gt;{'fieldname': 'fieldval'}&lt;/code&gt; 형식으로 사전을 리턴해야합니다 .</target>
        </trans-unit>
        <trans-unit id="84245af7e748dc76ab6bdec57ff3796110793931" translate="yes" xml:space="preserve">
          <source>This method should return the number of tests that failed.</source>
          <target state="translated">이 메소드는 실패한 테스트 수를 리턴해야합니다.</target>
        </trans-unit>
        <trans-unit id="d6bb2b53277dcbaa0b45e4be49ce0692d12918ea" translate="yes" xml:space="preserve">
          <source>This method takes a filename and file contents and passes them to the storage class for the field, then associates the stored file with the model field. If you want to manually associate file data with &lt;a href=&quot;#django.db.models.FileField&quot;&gt;&lt;code&gt;FileField&lt;/code&gt;&lt;/a&gt; instances on your model, the &lt;code&gt;save()&lt;/code&gt; method is used to persist that file data.</source>
          <target state="translated">이 메소드는 파일 이름 및 파일 컨텐츠를 가져 와서 해당 필드의 스토리지 클래스로 전달한 다음 저장된 파일을 모델 필드와 연관시킵니다. 파일 데이터를 모델의 &lt;a href=&quot;#django.db.models.FileField&quot;&gt; &lt;code&gt;FileField&lt;/code&gt; &lt;/a&gt; 인스턴스 와 수동으로 연관 시키 려면 &lt;code&gt;save()&lt;/code&gt; 메소드가 해당 파일 데이터를 유지하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="80d4b02f11188457bf379af5b856c7ae95ad0e81" translate="yes" xml:space="preserve">
          <source>This method takes a raw SQL query, executes it, and returns a &lt;code&gt;django.db.models.query.RawQuerySet&lt;/code&gt; instance. This &lt;code&gt;RawQuerySet&lt;/code&gt; instance can be iterated over like a normal &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; to provide object instances.</source>
          <target state="translated">이 메소드는 원시 SQL 쿼리를 가져 와서 실행하여 &lt;code&gt;django.db.models.query.RawQuerySet&lt;/code&gt; 인스턴스를 리턴 합니다. 이 &lt;code&gt;RawQuerySet&lt;/code&gt; 인스턴스는 일반 &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; &lt;/a&gt; 처럼 반복되어 객체 인스턴스를 제공 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="841fa77ce7493857da94dca4da32c93217e76609" translate="yes" xml:space="preserve">
          <source>This method takes a single &amp;ldquo;compressed&amp;rdquo; value from the field and returns a list of &amp;ldquo;decompressed&amp;rdquo; values. The input value can be assumed valid, but not necessarily non-empty.</source>
          <target state="translated">이 방법은 필드에서 하나의 &quot;압축 된&quot;값을 가져 와서 &quot;압축 해제 된&quot;값의 목록을 반환합니다. 입력 값은 유효하다고 가정 할 수 있지만 반드시 비어 있지는 않습니다.</target>
        </trans-unit>
        <trans-unit id="12328513cf4eafe3ecede74f7b8b94c182179435" translate="yes" xml:space="preserve">
          <source>This method will be called once per each item in the list returned by &lt;code&gt;items()&lt;/code&gt; with the following keyword arguments:</source>
          <target state="translated">이 메소드는 다음 키워드 인수와 함께 &lt;code&gt;items()&lt;/code&gt; 의해 리턴 된 목록의 각 항목 당 한 번씩 호출됩니다 .</target>
        </trans-unit>
        <trans-unit id="e3ae371150e73f891a976dbf0bfb6a212c4055e7" translate="yes" xml:space="preserve">
          <source>This method will encode certain characters that would normally be recognized as special characters for URIs. Note that this method does not encode the &amp;lsquo; character, as it is a valid character within URIs. See &lt;code&gt;encodeURIComponent()&lt;/code&gt; JavaScript function for more details.</source>
          <target state="translated">이 메소드는 일반적으로 URI의 특수 문자로 인식되는 특정 문자를 인코딩합니다. 이 메소드는 URI 내의 유효한 문자이므로 '문자를 인코딩하지 않습니다. 자세한 내용은 &lt;code&gt;encodeURIComponent()&lt;/code&gt; JavaScript 함수를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="85f8cd58baf63f9278adee5046e4b13af114919d" translate="yes" xml:space="preserve">
          <source>This method will validate all fields on your model. The optional &lt;code&gt;exclude&lt;/code&gt; argument lets you provide a list of field names to exclude from validation. It will raise a &lt;a href=&quot;../exceptions#django.core.exceptions.ValidationError&quot;&gt;&lt;code&gt;ValidationError&lt;/code&gt;&lt;/a&gt; if any fields fail validation.</source>
          <target state="translated">이 방법은 모델의 모든 필드를 확인합니다. 선택적 &lt;code&gt;exclude&lt;/code&gt; 인수를 사용하면 유효성 검증에서 제외 할 필드 이름 목록을 제공 할 수 있습니다. 필드가 유효성 검사에 실패 하면 &lt;a href=&quot;../exceptions#django.core.exceptions.ValidationError&quot;&gt; &lt;code&gt;ValidationError&lt;/code&gt; &lt;/a&gt; 가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="949d1b4773e69624862522bfe362292f69c70646" translate="yes" xml:space="preserve">
          <source>This middleware is enabled in the settings file generated by &lt;a href=&quot;django-admin#django-admin-startproject&quot;&gt;&lt;code&gt;startproject&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 미들웨어는 &lt;a href=&quot;django-admin#django-admin-startproject&quot;&gt; &lt;code&gt;startproject&lt;/code&gt; 에&lt;/a&gt; 의해 생성 된 설정 파일에서 사용 가능합니다 .</target>
        </trans-unit>
        <trans-unit id="d172799496ad6ec49d1315024e3242a4607b3358" translate="yes" xml:space="preserve">
          <source>This middleware should be placed before any other middleware that need to read or write the response body so that compression happens afterward.</source>
          <target state="translated">이 미들웨어는 이후에 압축이 발생하도록 응답 본문을 읽거나 써야하는 다른 미들웨어 앞에 배치해야합니다.</target>
        </trans-unit>
        <trans-unit id="8773b5ec14f61a44b08b434a7a553c17644481d3" translate="yes" xml:space="preserve">
          <source>This middleware should be positioned before any other middleware that relies on the value of &lt;a href=&quot;#django.http.HttpRequest.get_host&quot;&gt;&lt;code&gt;get_host()&lt;/code&gt;&lt;/a&gt; &amp;ndash; for instance, &lt;a href=&quot;middleware#django.middleware.common.CommonMiddleware&quot;&gt;&lt;code&gt;CommonMiddleware&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;middleware#django.middleware.csrf.CsrfViewMiddleware&quot;&gt;&lt;code&gt;CsrfViewMiddleware&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 미들웨어는 &lt;a href=&quot;#django.http.HttpRequest.get_host&quot;&gt; &lt;code&gt;get_host()&lt;/code&gt; &lt;/a&gt; 값에 의존하는 다른 미들웨어 앞에 배치해야합니다 ( 예 : &lt;a href=&quot;middleware#django.middleware.common.CommonMiddleware&quot;&gt; &lt;code&gt;CommonMiddleware&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;middleware#django.middleware.csrf.CsrfViewMiddleware&quot;&gt; &lt;code&gt;CsrfViewMiddleware&lt;/code&gt; )&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="1a7d1fb46b0f9c8814e908855ec5699f338e94db" translate="yes" xml:space="preserve">
          <source>This might look familiar; the admin&amp;rsquo;s &lt;code&gt;list_display&lt;/code&gt; option uses the same technique to provide human-readable descriptions for callback functions registered there, too.</source>
          <target state="translated">이것은 친숙해 보일 수 있습니다. 관리자의 &lt;code&gt;list_display&lt;/code&gt; 옵션은 동일한 기술을 사용하여 여기에 등록 된 콜백 함수에 대한 사람이 읽을 수있는 설명을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="8b4d29b80a4810d9734ffdd3523cb5d7fda8b77d" translate="yes" xml:space="preserve">
          <source>This mixin provides a &lt;code&gt;render_to_json_response()&lt;/code&gt; method with the same signature as &lt;a href=&quot;../../ref/class-based-views/mixins-simple#django.views.generic.base.TemplateResponseMixin.render_to_response&quot;&gt;&lt;code&gt;render_to_response()&lt;/code&gt;&lt;/a&gt;. To use it, we need to mix it into a &lt;code&gt;TemplateView&lt;/code&gt; for example, and override &lt;code&gt;render_to_response()&lt;/code&gt; to call &lt;code&gt;render_to_json_response()&lt;/code&gt; instead:</source>
          <target state="translated">이 믹스 인은 &lt;code&gt;render_to_json_response()&lt;/code&gt; 와 동일한 서명으로 &lt;a href=&quot;../../ref/class-based-views/mixins-simple#django.views.generic.base.TemplateResponseMixin.render_to_response&quot;&gt; &lt;code&gt;render_to_response()&lt;/code&gt; &lt;/a&gt; 메소드를 제공합니다 . 이를 사용하려면 예를 들어 &lt;code&gt;TemplateView&lt;/code&gt; 에 믹싱하고 &lt;code&gt;render_to_json_response()&lt;/code&gt; 대신 호출하도록 &lt;code&gt;render_to_response()&lt;/code&gt; 를 재정의 해야 합니다.</target>
        </trans-unit>
        <trans-unit id="b6df572b97310ee0aefd077b4b5b8931289d4334" translate="yes" xml:space="preserve">
          <source>This mixin, just like the &lt;code&gt;permission_required&lt;/code&gt; decorator, checks whether the user accessing a view has all given permissions. You should specify the permission (or an iterable of permissions) using the &lt;code&gt;permission_required&lt;/code&gt; parameter:</source>
          <target state="translated">이 믹스 인은 &lt;code&gt;permission_required&lt;/code&gt; 데코레이터 와 마찬가지로 뷰에 액세스하는 사용자에게 모든 권한이 있는지 확인합니다. &lt;code&gt;permission_required&lt;/code&gt; 매개 변수를 사용하여 권한 (또는 반복 가능한 권한)을 지정해야합니다 .</target>
        </trans-unit>
        <trans-unit id="efb914f9772f81905142ad83227c0dae37863c0e" translate="yes" xml:space="preserve">
          <source>This module contains helper functions for controlling HTTP caching. It does so by managing the &lt;code&gt;Vary&lt;/code&gt; header of responses. It includes functions to patch the header of response objects directly and decorators that change functions to do that header-patching themselves.</source>
          <target state="translated">이 모듈에는 HTTP 캐싱 제어를위한 헬퍼 기능이 있습니다. &lt;code&gt;Vary&lt;/code&gt; 헤더 응답 을 관리하여이를 수행합니다 . 응답 객체의 헤더를 직접 패치하는 기능과 헤더 패치 자체를 수행하는 기능을 변경하는 데코레이터가 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="5138ecea796e65e3058c876f1f2760e62b1ae22a" translate="yes" xml:space="preserve">
          <source>This object &amp;ndash; &lt;code&gt;car.photo&lt;/code&gt; in the example &amp;ndash; is a &lt;code&gt;File&lt;/code&gt; object, which means it has all the methods and attributes described below.</source>
          <target state="translated">이 객체 ( 예에서 &lt;code&gt;car.photo&lt;/code&gt; )는 &lt;code&gt;File&lt;/code&gt; 객체이므로 아래에 설명 된 모든 메서드와 속성이 있습니다.</target>
        </trans-unit>
        <trans-unit id="721f8de90bc0f05d22e77831b4b42fa4b7b1859d" translate="yes" xml:space="preserve">
          <source>This object is a wrapper for the &lt;a href=&quot;https://gdal.org/api/ogrgeometry_cpp.html#ogrgeometry-class&quot;&gt;OGR Geometry&lt;/a&gt; class. These objects are instantiated directly from the given &lt;code&gt;geom_input&lt;/code&gt; parameter, which may be a string containing WKT, HEX, GeoJSON, a &lt;code&gt;buffer&lt;/code&gt; containing WKB data, or an &lt;a href=&quot;#django.contrib.gis.gdal.OGRGeomType&quot;&gt;&lt;code&gt;OGRGeomType&lt;/code&gt;&lt;/a&gt; object. These objects are also returned from the &lt;a href=&quot;#django.contrib.gis.gdal.Feature.geom&quot;&gt;&lt;code&gt;Feature.geom&lt;/code&gt;&lt;/a&gt; attribute, when reading vector data from &lt;a href=&quot;#django.contrib.gis.gdal.Layer&quot;&gt;&lt;code&gt;Layer&lt;/code&gt;&lt;/a&gt; (which is in turn a part of a &lt;a href=&quot;#django.contrib.gis.gdal.DataSource&quot;&gt;&lt;code&gt;DataSource&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">이 객체는 &lt;a href=&quot;https://gdal.org/api/ogrgeometry_cpp.html#ogrgeometry-class&quot;&gt;OGR Geometry&lt;/a&gt; 클래스 의 래퍼입니다 . 이러한 객체는 지정된 &lt;code&gt;geom_input&lt;/code&gt; 매개 변수 에서 직접 인스턴스화됩니다.이 매개 변수는 WKT, HEX, GeoJSON을 포함하는 문자열, WKB 데이터를 포함 하는 &lt;code&gt;buffer&lt;/code&gt; 또는 &lt;a href=&quot;#django.contrib.gis.gdal.OGRGeomType&quot;&gt; &lt;code&gt;OGRGeomType&lt;/code&gt; &lt;/a&gt; 객체 일 수 있습니다. 이러한 객체는 &lt;a href=&quot;#django.contrib.gis.gdal.Layer&quot;&gt; &lt;code&gt;Layer&lt;/code&gt; &lt;/a&gt; 에서 벡터 데이터를 읽을 때 &lt;a href=&quot;#django.contrib.gis.gdal.Feature.geom&quot;&gt; &lt;code&gt;Feature.geom&lt;/code&gt; &lt;/a&gt; 속성 에서도 반환됩니다 (이는 &lt;a href=&quot;#django.contrib.gis.gdal.DataSource&quot;&gt; &lt;code&gt;DataSource&lt;/code&gt; &lt;/a&gt; 의 일부 임 ).</target>
        </trans-unit>
        <trans-unit id="0ab92fa3ff9d4bbdddd65ca8aafc3b5592457669" translate="yes" xml:space="preserve">
          <source>This object is equivalent to &lt;code&gt;caches['default']&lt;/code&gt;.</source>
          <target state="translated">이 객체는 &lt;code&gt;caches['default']&lt;/code&gt; 와 같습니다 .</target>
        </trans-unit>
        <trans-unit id="435658b64d34dbcdb6fa11576963504e787553e9" translate="yes" xml:space="preserve">
          <source>This of course works in reverse:</source>
          <target state="translated">이것은 물론 반대로 작동합니다.</target>
        </trans-unit>
        <trans-unit id="cca0f0c0c570538b7928e2106d580988b582906f" translate="yes" xml:space="preserve">
          <source>This opens up a text editor to type the commit message. Follow the &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/internals/contributing/committing-code/#committing-guidelines&quot;&gt;commit message guidelines&lt;/a&gt; and write a message like:</source>
          <target state="translated">커밋 메시지를 입력하는 텍스트 편집기가 열립니다. 추적 &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/internals/contributing/committing-code/#committing-guidelines&quot;&gt;메시지 지침을 커밋&lt;/a&gt; 과 같은 메시지 쓰기 :</target>
        </trans-unit>
        <trans-unit id="50589f890445ab494088463d5ca78a94d0f14533" translate="yes" xml:space="preserve">
          <source>This option also sets &lt;a href=&quot;fields#django.db.models.ForeignKey.related_query_name&quot;&gt;&lt;code&gt;related_query_name&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 옵션은 &lt;a href=&quot;fields#django.db.models.ForeignKey.related_query_name&quot;&gt; &lt;code&gt;related_query_name&lt;/code&gt; &lt;/a&gt; 도 설정합니다 .</target>
        </trans-unit>
        <trans-unit id="bb50ef3ad1325b1d161c4c5ec1959ca87e40a4c8" translate="yes" xml:space="preserve">
          <source>This option is unnecessary in &lt;code&gt;manage.py&lt;/code&gt;, because it takes care of setting the Python path for you.</source>
          <target state="translated">이 옵션은 &lt;code&gt;manage.py&lt;/code&gt; 에서 필요하지 않습니다. Python 경로 설정을 담당하기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="1d110f250c9cad13bf0a435a86873671d24db85b" translate="yes" xml:space="preserve">
          <source>This option is unnecessary in &lt;code&gt;manage.py&lt;/code&gt;, because it uses &lt;code&gt;settings.py&lt;/code&gt; from the current project by default.</source>
          <target state="translated">이 옵션은 기본적으로 현재 프로젝트의 &lt;code&gt;settings.py&lt;/code&gt; 를 사용하므로 &lt;code&gt;manage.py&lt;/code&gt; 에서는 필요하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="8280c3c4ec0def33fb57a95b3324ae816d00af76" translate="yes" xml:space="preserve">
          <source>This option is valid on all field types except &lt;a href=&quot;#django.db.models.ManyToManyField&quot;&gt;&lt;code&gt;ManyToManyField&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#django.db.models.OneToOneField&quot;&gt;&lt;code&gt;OneToOneField&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 옵션은 &lt;a href=&quot;#django.db.models.ManyToManyField&quot;&gt; &lt;code&gt;ManyToManyField&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#django.db.models.OneToOneField&quot;&gt; &lt;code&gt;OneToOneField&lt;/code&gt; 를&lt;/a&gt; 제외한 모든 필드 유형에서 유효합니다 .</target>
        </trans-unit>
        <trans-unit id="214e975f8e1f62c34ab6fde52dad078879cadbc9" translate="yes" xml:space="preserve">
          <source>This option may be used for customizing the coordinate dimension of the geometry field. By default, it is set to 2, for representing two-dimensional geometries. For spatial backends that support it, it may be set to 3 for three-dimensional support.</source>
          <target state="translated">이 옵션은 형상 필드의 좌표 치수를 사용자 정의하는 데 사용할 수 있습니다. 기본적으로 2 차원 형상을 나타 내기 위해 2로 설정되어 있습니다. 이를 지원하는 공간 백엔드의 경우 3 차원 지원을 위해 3으로 설정 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="42467926bfe8621601c1e5394da33114d0feb11f" translate="yes" xml:space="preserve">
          <source>This option requires the third-party &lt;code&gt;tblib&lt;/code&gt; package to display tracebacks correctly:</source>
          <target state="translated">이 옵션을 사용하려면 타사 &lt;code&gt;tblib&lt;/code&gt; 패키지가 트레이스 백을 올바르게 표시해야합니다.</target>
        </trans-unit>
        <trans-unit id="3251a48b6c7b720e5b31951512c4d7744d1e2126" translate="yes" xml:space="preserve">
          <source>This optional argument is used to specify the field to use as the value of the choices in the field&amp;rsquo;s widget. Be sure it&amp;rsquo;s a unique field for the model, otherwise the selected value could match more than one object. By default it is set to &lt;code&gt;None&lt;/code&gt;, in which case the primary key of each object will be used. For example:</source>
          <target state="translated">이 선택적 인수는 필드 위젯에서 선택 사항의 값으로 사용할 필드를 지정하는 데 사용됩니다. 모델의 고유 필드인지 확인하십시오. 그렇지 않으면 선택한 값이 둘 이상의 객체와 일치 할 수 있습니다. 기본적으로 &lt;code&gt;None&lt;/code&gt; 으로 설정되며 ,이 경우 각 객체의 기본 키가 사용됩니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="c06a07ee3d53d2fe4d0d3f11d634bc6d2fcd2fe5" translate="yes" xml:space="preserve">
          <source>This page describes how you can serve these static files.</source>
          <target state="translated">이 페이지는 이러한 정적 파일을 제공하는 방법을 설명합니다.</target>
        </trans-unit>
        <trans-unit id="12d8ee576ee07e12c6b3aa09603dc49a39f57306" translate="yes" xml:space="preserve">
          <source>This part is done by the template tag.</source>
          <target state="translated">이 부분은 템플릿 태그에 의해 수행됩니다.</target>
        </trans-unit>
        <trans-unit id="4c289cc2789cd0c7401d02d6dd738d9ce67a394c" translate="yes" xml:space="preserve">
          <source>This particular change above makes the &amp;ldquo;Publication date&amp;rdquo; come before the &amp;ldquo;Question&amp;rdquo; field:</source>
          <target state="translated">위의 특정 변경 사항으로 인해 &quot;게시 날짜&quot;필드가 &quot;게시 날짜&quot;앞에 오게됩니다.</target>
        </trans-unit>
        <trans-unit id="4d510f7beb1ab9ef346234d69b3b849e829ad7fc" translate="yes" xml:space="preserve">
          <source>This pattern gets quite unwieldy as the number of fields in a model goes up. The above example can be rewritten using &lt;code&gt;update_or_create()&lt;/code&gt; like so:</source>
          <target state="translated">이 패턴은 모델의 필드 수가 증가함에 따라 다루기 어려워집니다. 위의 예제는 다음 과 같이 &lt;code&gt;update_or_create()&lt;/code&gt; 사용하여 다시 작성할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="cd9d76f9df8b974a4eb060a490fa1432080821bc" translate="yes" xml:space="preserve">
          <source>This performs an &lt;code&gt;INSERT&lt;/code&gt; SQL statement behind the scenes. Django doesn&amp;rsquo;t hit the database until you explicitly call &lt;a href=&quot;../../ref/models/instances#django.db.models.Model.save&quot;&gt;&lt;code&gt;save()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">씬 뒤에서 &lt;code&gt;INSERT&lt;/code&gt; SQL 문을 수행합니다 . Django는 명시 적으로 &lt;a href=&quot;../../ref/models/instances#django.db.models.Model.save&quot;&gt; &lt;code&gt;save()&lt;/code&gt; &lt;/a&gt; 호출 할 때까지 데이터베이스에 충돌하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="f573be76ba4c9f6b8b413aa33c79983e92a32a84" translate="yes" xml:space="preserve">
          <source>This performs an &lt;code&gt;UPDATE&lt;/code&gt; SQL statement behind the scenes. Django doesn&amp;rsquo;t hit the database until you explicitly call &lt;a href=&quot;../../ref/models/instances#django.db.models.Model.save&quot;&gt;&lt;code&gt;save()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이것은 이면에서 &lt;code&gt;UPDATE&lt;/code&gt; SQL 문을 수행합니다 . Django는 명시 적으로 &lt;a href=&quot;../../ref/models/instances#django.db.models.Model.save&quot;&gt; &lt;code&gt;save()&lt;/code&gt; &lt;/a&gt; 호출 할 때까지 데이터베이스에 충돌하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="4b7bcab1266b3196eabfacd3aefaea14f31b82de" translate="yes" xml:space="preserve">
          <source>This point is the &lt;a href=&quot;https://www.law.uh.edu/&quot;&gt;University of Houston Law Center&lt;/a&gt;.</source>
          <target state="translated">이 시점은 &lt;a href=&quot;https://www.law.uh.edu/&quot;&gt;휴스턴 대학교 법률 센터&lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="d74e03198f17b05e13e1020abff2648e79d79c15" translate="yes" xml:space="preserve">
          <source>This predicate is similar to &lt;a href=&quot;#django.contrib.gis.geos.GEOSGeometry.contains&quot;&gt;&lt;code&gt;GEOSGeometry.contains()&lt;/code&gt;&lt;/a&gt;, but is more inclusive (i.e. returns &lt;code&gt;True&lt;/code&gt; for more cases). In particular, unlike &lt;a href=&quot;#django.contrib.gis.geos.GEOSGeometry.contains&quot;&gt;&lt;code&gt;contains()&lt;/code&gt;&lt;/a&gt; it does not distinguish between points in the boundary and in the interior of geometries. For most situations, &lt;code&gt;covers()&lt;/code&gt; should be preferred to &lt;a href=&quot;#django.contrib.gis.geos.GEOSGeometry.contains&quot;&gt;&lt;code&gt;contains()&lt;/code&gt;&lt;/a&gt;. As an added benefit, &lt;code&gt;covers()&lt;/code&gt; is more amenable to optimization and hence should outperform &lt;a href=&quot;#django.contrib.gis.geos.GEOSGeometry.contains&quot;&gt;&lt;code&gt;contains()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 술어는 &lt;a href=&quot;#django.contrib.gis.geos.GEOSGeometry.contains&quot;&gt; &lt;code&gt;GEOSGeometry.contains()&lt;/code&gt; &lt;/a&gt; 와 유사 하지만 더 포괄적입니다 (즉 , 더 많은 경우 &lt;code&gt;True&lt;/code&gt; 를 리턴 함 ). 특히 &lt;a href=&quot;#django.contrib.gis.geos.GEOSGeometry.contains&quot;&gt; &lt;code&gt;contains()&lt;/code&gt; &lt;/a&gt; 와 달리 경계와 도형 내부의 점을 구분하지 않습니다. 대부분의 상황에서 &lt;code&gt;covers()&lt;/code&gt; 가 &lt;a href=&quot;#django.contrib.gis.geos.GEOSGeometry.contains&quot;&gt; &lt;code&gt;contains()&lt;/code&gt; &lt;/a&gt; 보다 선호되어야합니다 . 추가 혜택으로 &lt;code&gt;covers()&lt;/code&gt; 가 최적화에 더 적합하므로 &lt;a href=&quot;#django.contrib.gis.geos.GEOSGeometry.contains&quot;&gt; &lt;code&gt;contains()&lt;/code&gt; &lt;/a&gt; 보다 성능이 우수해야합니다 .</target>
        </trans-unit>
        <trans-unit id="361bed87865d33c915128ce44b1617c773a50987" translate="yes" xml:space="preserve">
          <source>This process doesn&amp;rsquo;t copy relations that aren&amp;rsquo;t part of the model&amp;rsquo;s database table. For example, &lt;code&gt;Entry&lt;/code&gt; has a &lt;code&gt;ManyToManyField&lt;/code&gt; to &lt;code&gt;Author&lt;/code&gt;. After duplicating an entry, you must set the many-to-many relations for the new entry:</source>
          <target state="translated">이 프로세스는 모델의 데이터베이스 테이블에 포함되지 않은 관계를 복사하지 않습니다. 예를 들어 &lt;code&gt;Entry&lt;/code&gt; 에는 &lt;code&gt;ManyToManyField&lt;/code&gt; &lt;code&gt;Author&lt;/code&gt; to ManyToManyField 가 있습니다. 항목을 복제 한 후에는 새 항목에 대해 다 대다 관계를 설정해야합니다.</target>
        </trans-unit>
        <trans-unit id="2a410b86c9d751b44698dcc65f1721aa9f0ff893" translate="yes" xml:space="preserve">
          <source>This process generally works well, but it can be slow and occasionally buggy. It is not recommended that you run and migrate SQLite in a production environment unless you are very aware of the risks and its limitations; the support Django ships with is designed to allow developers to use SQLite on their local machines to develop less complex Django projects without the need for a full database.</source>
          <target state="translated">이 프로세스는 일반적으로 잘 작동하지만 느리고 때로는 버그가있을 수 있습니다. 위험과 한계를 잘 알고 있지 않으면 프로덕션 환경에서 SQLite를 실행하고 마이그레이션하지 않는 것이 좋습니다. Django와 함께 제공되는 지원은 개발자가 로컬 컴퓨터에서 SQLite를 사용하여 전체 데이터베이스가 없어도 덜 복잡한 Django 프로젝트를 개발할 수 있도록 설계되었습니다.</target>
        </trans-unit>
        <trans-unit id="e229ae0ad060fa9de52faa891b07a6340155ca53" translate="yes" xml:space="preserve">
          <source>This processor adds a token that is needed by the &lt;a href=&quot;builtins#std:templatetag-csrf_token&quot;&gt;&lt;code&gt;csrf_token&lt;/code&gt;&lt;/a&gt; template tag for protection against &lt;a href=&quot;../csrf&quot;&gt;Cross Site Request Forgeries&lt;/a&gt;.</source>
          <target state="translated">이 프로세서는 &lt;a href=&quot;builtins#std:templatetag-csrf_token&quot;&gt; &lt;code&gt;csrf_token&lt;/code&gt; &lt;/a&gt; 템플릿 태그에 필요한 토큰을 추가하여 보호합니다.&lt;a href=&quot;../csrf&quot;&gt; 사이트 간 요청 위조&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="b6a5084b1e174d01c72338c44306ab9ae32e66a0" translate="yes" xml:space="preserve">
          <source>This propagation can be controlled on a per-logger basis. If you don&amp;rsquo;t want a particular logger to propagate to its parents, you can turn off this behavior.</source>
          <target state="translated">이 전파는 로거별로 제어 할 수 있습니다. 특정 로거가 해당 부모에게 전파되지 않도록하려면이 동작을 해제하십시오.</target>
        </trans-unit>
        <trans-unit id="632d260c788fdba687efba486f907110be12a253" translate="yes" xml:space="preserve">
          <source>This property controls the rounding precision of coordinates; if set to &lt;code&gt;None&lt;/code&gt; rounding is disabled.</source>
          <target state="translated">이 속성은 좌표의 반올림 정밀도를 제어합니다. &lt;code&gt;None&lt;/code&gt; 으로 설정하면 반올림이 비활성화됩니다.</target>
        </trans-unit>
        <trans-unit id="ca0bf2cc4fb1d566beeb3c3548fc04f4b05738fa" translate="yes" xml:space="preserve">
          <source>This property controls the spatial reference for this geometry, or &lt;code&gt;None&lt;/code&gt; if no spatial reference system has been assigned to it. If assigned, accessing this property returns a &lt;a href=&quot;#django.contrib.gis.gdal.SpatialReference&quot;&gt;&lt;code&gt;SpatialReference&lt;/code&gt;&lt;/a&gt; object. It may be set with another &lt;a href=&quot;#django.contrib.gis.gdal.SpatialReference&quot;&gt;&lt;code&gt;SpatialReference&lt;/code&gt;&lt;/a&gt; object, or any input that &lt;a href=&quot;#django.contrib.gis.gdal.SpatialReference&quot;&gt;&lt;code&gt;SpatialReference&lt;/code&gt;&lt;/a&gt; accepts. Example:</source>
          <target state="translated">이 속성은이 형상의 공간 참조를 제어하거나, 공간 참조 시스템이 할당되지 않은 경우 &lt;code&gt;None&lt;/code&gt; 을 제어합니다. 할당 된 경우이 속성에 액세스하면 &lt;a href=&quot;#django.contrib.gis.gdal.SpatialReference&quot;&gt; &lt;code&gt;SpatialReference&lt;/code&gt; &lt;/a&gt; 객체가 반환 됩니다. 다른 &lt;a href=&quot;#django.contrib.gis.gdal.SpatialReference&quot;&gt; &lt;code&gt;SpatialReference&lt;/code&gt; &lt;/a&gt; 객체 또는 다른 입력 으로 설정할 수 있습니다.&lt;a href=&quot;#django.contrib.gis.gdal.SpatialReference&quot;&gt; &lt;code&gt;SpatialReference&lt;/code&gt; 가&lt;/a&gt; 승인. 예:</target>
        </trans-unit>
        <trans-unit id="98d90b983b0b9c4a44068f5168a1bfadb02cfffa" translate="yes" xml:space="preserve">
          <source>This property is used to enable or disable trimming of unnecessary decimals.</source>
          <target state="translated">이 속성은 불필요한 소수 자르기를 활성화 또는 비활성화하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="fab242bb5a764896098e96b014f378bfbe7bc8be" translate="yes" xml:space="preserve">
          <source>This property may be set to change the byte-order of the geometry representation.</source>
          <target state="translated">이 속성은 형상 표현의 바이트 순서를 변경하도록 설정 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5289e31ddaef6662a60c7e644472e194dd8d1c27" translate="yes" xml:space="preserve">
          <source>This property may be set to change the output dimension of the geometry representation. In other words, if you have a 3D geometry then set to 3 so that the Z value is included in the WKB.</source>
          <target state="translated">이 속성은 형상 표현의 출력 치수를 변경하도록 설정 될 수 있습니다. 즉, 3D 형상이있는 경우 Z 값이 WKB에 포함되도록 3으로 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="5d84509578b7ccd047758ef2ab9a7c1153a71bc1" translate="yes" xml:space="preserve">
          <source>This property returns the area of the Geometry.</source>
          <target state="translated">이 속성은 형상 영역을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="463082c8500bf532a1a2a59b6665ff283e88b498" translate="yes" xml:space="preserve">
          <source>This property returns the data for this &lt;a href=&quot;#django.forms.BoundField&quot;&gt;&lt;code&gt;BoundField&lt;/code&gt;&lt;/a&gt; extracted by the widget&amp;rsquo;s &lt;a href=&quot;widgets#django.forms.Widget.value_from_datadict&quot;&gt;&lt;code&gt;value_from_datadict()&lt;/code&gt;&lt;/a&gt; method, or &lt;code&gt;None&lt;/code&gt; if it wasn&amp;rsquo;t given:</source>
          <target state="translated">이 속성은 위젯의 &lt;a href=&quot;widgets#django.forms.Widget.value_from_datadict&quot;&gt; &lt;code&gt;value_from_datadict()&lt;/code&gt; &lt;/a&gt; 메서드로 추출한 이 &lt;a href=&quot;#django.forms.BoundField&quot;&gt; &lt;code&gt;BoundField&lt;/code&gt; &lt;/a&gt; 의 데이터를 반환 하거나 &lt;code&gt;None&lt;/code&gt; 이 부여되지 않은 경우 :</target>
        </trans-unit>
        <trans-unit id="154db08cc764103fb986182b6475e92f5b09fe93" translate="yes" xml:space="preserve">
          <source>This property returns the extent of this geometry as a 4-tuple, consisting of &lt;code&gt;(xmin, ymin, xmax, ymax)&lt;/code&gt;.</source>
          <target state="translated">이 속성은 &lt;code&gt;(xmin, ymin, xmax, ymax)&lt;/code&gt; 로 구성된이 지오메트리의 범위를 4 튜플로 반환합니다. .</target>
        </trans-unit>
        <trans-unit id="46d37ab048ead714fc6618294c6a692b59216c17" translate="yes" xml:space="preserve">
          <source>This provides a quick-and-dirty way to override some of the &lt;a href=&quot;../../forms/fields#django.forms.Field&quot;&gt;&lt;code&gt;Field&lt;/code&gt;&lt;/a&gt; options for use in the admin. &lt;code&gt;formfield_overrides&lt;/code&gt; is a dictionary mapping a field class to a dict of arguments to pass to the field at construction time.</source>
          <target state="translated">이를 통해 관리자가 사용할 수있는 일부 &lt;a href=&quot;../../forms/fields#django.forms.Field&quot;&gt; &lt;code&gt;Field&lt;/code&gt; &lt;/a&gt; 옵션 을 재정의 할 수 있습니다. &lt;code&gt;formfield_overrides&lt;/code&gt; 는 생성 시간에 필드에 전달할 인수의 dict에 필드 클래스를 맵핑하는 사전입니다.</target>
        </trans-unit>
        <trans-unit id="8b5a1a25f0304afe2db0bd8e9c8a5b2e0dc32f53" translate="yes" xml:space="preserve">
          <source>This query generates an annotated result set, and then generates a filter based upon that annotation.</source>
          <target state="translated">이 쿼리는 주석이 달린 결과 집합을 생성 한 다음 해당 주석을 기반으로 필터를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="e4c95de6ba55865c03d04719c9f141ba69cdb48d" translate="yes" xml:space="preserve">
          <source>This queryset will be evaluated as subselect statement:</source>
          <target state="translated">이 쿼리 세트는 subselect 문으로 평가됩니다.</target>
        </trans-unit>
        <trans-unit id="f7645a55dbc10a1a7637c1fd526d106095848210" translate="yes" xml:space="preserve">
          <source>This read-only attribute represents the URL the response will redirect to (equivalent to the &lt;code&gt;Location&lt;/code&gt; response header).</source>
          <target state="translated">이 읽기 전용 속성은 응답이 리디렉션 될 URL을 나타냅니다 ( &lt;code&gt;Location&lt;/code&gt; 응답 헤더 와 동일 ).</target>
        </trans-unit>
        <trans-unit id="0905b50cdd99c5f4096787aa121980d1b90ff659" translate="yes" xml:space="preserve">
          <source>This registry is called &lt;a href=&quot;#django.apps.apps&quot;&gt;&lt;code&gt;apps&lt;/code&gt;&lt;/a&gt; and it&amp;rsquo;s available in &lt;a href=&quot;#module-django.apps&quot;&gt;&lt;code&gt;django.apps&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">이 레지스트리는 &lt;a href=&quot;#django.apps.apps&quot;&gt; &lt;code&gt;apps&lt;/code&gt; &lt;/a&gt; 이라고 하며 &lt;a href=&quot;#module-django.apps&quot;&gt; &lt;code&gt;django.apps&lt;/code&gt; &lt;/a&gt; 에서 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="b4a3f9542b0ca1cc4f88861748177ce67f7fbd9d" translate="yes" xml:space="preserve">
          <source>This renderer gives you complete control of how widget templates are sourced. It uses &lt;a href=&quot;../../topics/templates#django.template.loader.get_template&quot;&gt;&lt;code&gt;get_template()&lt;/code&gt;&lt;/a&gt; to find widget templates based on what&amp;rsquo;s configured in the &lt;a href=&quot;../settings#std:setting-TEMPLATES&quot;&gt;&lt;code&gt;TEMPLATES&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">이 렌더러는 위젯 템플릿의 소스 방법을 완벽하게 제어합니다. &lt;a href=&quot;../../topics/templates#django.template.loader.get_template&quot;&gt; &lt;code&gt;get_template()&lt;/code&gt; &lt;/a&gt; 을 사용 하여 &lt;a href=&quot;../settings#std:setting-TEMPLATES&quot;&gt; &lt;code&gt;TEMPLATES&lt;/code&gt; &lt;/a&gt; 설정 에서 구성된 내용을 기반으로 위젯 템플리트를 찾습니다 .</target>
        </trans-unit>
        <trans-unit id="bc1737492dac53c18be68413fbe634bdc1a43c18" translate="yes" xml:space="preserve">
          <source>This renderer is the same as the &lt;a href=&quot;#django.forms.renderers.DjangoTemplates&quot;&gt;&lt;code&gt;DjangoTemplates&lt;/code&gt;&lt;/a&gt; renderer except that it uses a &lt;a href=&quot;../../topics/templates#django.template.backends.jinja2.Jinja2&quot;&gt;&lt;code&gt;Jinja2&lt;/code&gt;&lt;/a&gt; backend. Templates for the built-in widgets are located in &lt;code&gt;django/forms/jinja2&lt;/code&gt; and installed apps can provide templates in a &lt;code&gt;jinja2&lt;/code&gt; directory.</source>
          <target state="translated">이 렌더러는 &lt;a href=&quot;../../topics/templates#django.template.backends.jinja2.Jinja2&quot;&gt; &lt;code&gt;Jinja2&lt;/code&gt; &lt;/a&gt; 백엔드를 사용한다는 점을 제외 하면 &lt;a href=&quot;#django.forms.renderers.DjangoTemplates&quot;&gt; &lt;code&gt;DjangoTemplates&lt;/code&gt; &lt;/a&gt; 렌더러와 동일합니다 . 내장 위젯의 템플리트는 &lt;code&gt;django/forms/jinja2&lt;/code&gt; 에 있으며 설치된 앱은 &lt;code&gt;jinja2&lt;/code&gt; 디렉토리에 템플리트를 제공 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="db689dc37faee124528bb16bc4f14d940146cadb" translate="yes" xml:space="preserve">
          <source>This renderer uses a standalone &lt;a href=&quot;../../topics/templates#django.template.backends.django.DjangoTemplates&quot;&gt;&lt;code&gt;DjangoTemplates&lt;/code&gt;&lt;/a&gt; engine (unconnected to what you might have configured in the &lt;a href=&quot;../settings#std:setting-TEMPLATES&quot;&gt;&lt;code&gt;TEMPLATES&lt;/code&gt;&lt;/a&gt; setting). It loads templates first from the built-in form templates directory in &lt;code&gt;django/forms/templates&lt;/code&gt; and then from the installed apps&amp;rsquo; templates directories using the &lt;a href=&quot;../templates/api#django.template.loaders.app_directories.Loader&quot;&gt;&lt;code&gt;app_directories&lt;/code&gt;&lt;/a&gt; loader.</source>
          <target state="translated">이 렌더러는 독립형 &lt;a href=&quot;../../topics/templates#django.template.backends.django.DjangoTemplates&quot;&gt; &lt;code&gt;DjangoTemplates&lt;/code&gt; &lt;/a&gt; 엔진을 사용합니다 ( &lt;a href=&quot;../settings#std:setting-TEMPLATES&quot;&gt; &lt;code&gt;TEMPLATES&lt;/code&gt; &lt;/a&gt; 설정 에서 구성한 것과 연결되지 않음 ). 먼저 &lt;code&gt;django/forms/templates&lt;/code&gt; 의 내장 양식 템플리트 디렉토리에서 템플리트 를로드 한 다음 &lt;a href=&quot;../templates/api#django.template.loaders.app_directories.Loader&quot;&gt; &lt;code&gt;app_directories&lt;/code&gt; &lt;/a&gt; 로더를 사용하여 설치된 앱의 템플리트 디렉토리에서 템플리트를 로드합니다.</target>
        </trans-unit>
        <trans-unit id="c63c860ced280ca56c3dcec664ac455421cbec81" translate="yes" xml:space="preserve">
          <source>This requires you to commit explicitly every transaction, even those started by Django or by third-party libraries. Thus, this is best used in situations where you want to run your own transaction-controlling middleware or do something really strange.</source>
          <target state="translated">이를 위해서는 Django 또는 타사 라이브러리에서 시작한 트랜잭션을 포함하여 모든 트랜잭션을 명시 적으로 커밋해야합니다. 따라서 이것은 자체 트랜잭션 제어 미들웨어를 실행하거나 실제로 이상한 것을 수행하려는 경우에 가장 적합합니다.</target>
        </trans-unit>
        <trans-unit id="0a82abb0d9b45ba4ff4a234227534338c66f72c5" translate="yes" xml:space="preserve">
          <source>This restriction doesn&amp;rsquo;t apply to model fields inherited from an abstract model. Such fields may be overridden with another field or value, or be removed by setting &lt;code&gt;field_name = None&lt;/code&gt;.</source>
          <target state="translated">이 제한은 추상 모델에서 상속 된 모델 필드에는 적용되지 않습니다. 이러한 필드는 다른 필드 또는 값으로 대체되거나 &lt;code&gt;field_name = None&lt;/code&gt; 을 설정하여 제거 될 수 있습니다. .</target>
        </trans-unit>
        <trans-unit id="8e5a4ec58c5ffb4646c6614fe64993dc046dc04e" translate="yes" xml:space="preserve">
          <source>This restriction only applies to attributes which are &lt;a href=&quot;../../ref/models/fields#django.db.models.Field&quot;&gt;&lt;code&gt;Field&lt;/code&gt;&lt;/a&gt; instances. Normal Python attributes can be overridden if you wish. It also only applies to the name of the attribute as Python sees it: if you are manually specifying the database column name, you can have the same column name appearing in both a child and an ancestor model for multi-table inheritance (they are columns in two different database tables).</source>
          <target state="translated">이 제한 사항은 &lt;a href=&quot;../../ref/models/fields#django.db.models.Field&quot;&gt; &lt;code&gt;Field&lt;/code&gt; &lt;/a&gt; 인스턴스 인 속성에만 적용됩니다 . 원하는 경우 일반 Python 속성을 무시할 수 있습니다. 또한 파이썬이 보는 것처럼 속성의 이름에만 적용됩니다. 데이터베이스 열 이름을 수동으로 지정하는 경우 다중 테이블 상속을 위해 하위 및 상위 모델 모두에 동일한 열 이름이 표시 될 수 있습니다 (열) 두 개의 다른 데이터베이스 테이블에서).</target>
        </trans-unit>
        <trans-unit id="b34fdb035dc65306c14e511d44c216c3a21b6d35" translate="yes" xml:space="preserve">
          <source>This results in an admin page that looks like:</source>
          <target state="translated">결과적으로 다음과 같은 관리 페이지가 나타납니다.</target>
        </trans-unit>
        <trans-unit id="779283760e0bd1935f36869066b2292fd9cdd1b6" translate="yes" xml:space="preserve">
          <source>This results in the error:</source>
          <target state="translated">이로 인해 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="3d61a82fe1cf91ff0c9ee594e6d2fb88324d10ed" translate="yes" xml:space="preserve">
          <source>This results in the following general form for lookups involving rasters (assuming the &lt;code&gt;Elevation&lt;/code&gt; model used in the &lt;a href=&quot;model-api&quot;&gt;GeoDjango Model API&lt;/a&gt;):</source>
          <target state="translated">결과적으로 래스터와 관련된 조회에 대해 다음과 같은 일반적인 형태가됩니다 ( &lt;a href=&quot;model-api&quot;&gt;GeoDjango Model API에&lt;/a&gt; 사용 된 &lt;code&gt;Elevation&lt;/code&gt; 모델을 가정) ).</target>
        </trans-unit>
        <trans-unit id="9d2b4a2bab090852cd1d820e140513f212d86e72" translate="yes" xml:space="preserve">
          <source>This return value is different from the &lt;code&gt;deconstruct()&lt;/code&gt; method &lt;a href=&quot;../howto/custom-model-fields#custom-field-deconstruct-method&quot;&gt;for custom fields&lt;/a&gt; which returns a tuple of four items.</source>
          <target state="translated">이 반환 값은 4 개의 항목 튜플을 반환하는 &lt;a href=&quot;../howto/custom-model-fields#custom-field-deconstruct-method&quot;&gt;사용자 정의 필드&lt;/a&gt; 의 &lt;code&gt;deconstruct()&lt;/code&gt; 메서드 와 다릅니다 .</target>
        </trans-unit>
        <trans-unit id="eddd4ab298fffe7194f1ec32e7324a526e275cad" translate="yes" xml:space="preserve">
          <source>This returns a dictionary of actions allowed. The keys are action names, and the values are &lt;code&gt;(function, name, short_description)&lt;/code&gt; tuples.</source>
          <target state="translated">허용 된 동작 사전을 반환합니다. 키는 동작 이름이고 값은 &lt;code&gt;(function, name, short_description)&lt;/code&gt; 튜플입니다.</target>
        </trans-unit>
        <trans-unit id="5d0e9398e3314c6a39f1f4592d202cf5ce20b276" translate="yes" xml:space="preserve">
          <source>This returns the sixth through tenth objects (&lt;code&gt;OFFSET 5 LIMIT 5&lt;/code&gt;):</source>
          <target state="translated">이것은 여섯 번째에서 열 번째 개체를 반환합니다 ( &lt;code&gt;OFFSET 5 LIMIT 5&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="398c6a549b509f7af3be11ce8aac2f108bbe1e18" translate="yes" xml:space="preserve">
          <source>This runs your tests and collects coverage data of the executed files in your project. You can see a report of this data by typing following command:</source>
          <target state="translated">테스트를 실행하고 프로젝트에서 실행 된 파일의 적용 범위 데이터를 수집합니다. 다음 명령을 입력하여이 데이터에 대한 보고서를 볼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d2babc5571187eb3b0bc8a3066efda194e3272df" translate="yes" xml:space="preserve">
          <source>This section also includes instructions for installing an upgraded version of &lt;a href=&quot;#macos-python&quot;&gt;Python&lt;/a&gt; from packages provided by the Python Software Foundation, however, this is not required.</source>
          <target state="translated">이 섹션에는 업그레이드 된 버전의 &lt;a href=&quot;#macos-python&quot;&gt;Python&lt;/a&gt; 설치에 대한 지침도 포함되어 있습니다. Python Software Foundation에서 제공하는 패키지에서 있지만 필수 사항은 아닙니다.</target>
        </trans-unit>
        <trans-unit id="fb5e6ce9e300331ed5b2eebde8444a3f1f158fc1" translate="yes" xml:space="preserve">
          <source>This section contains a brief introduction and tutorial to using &lt;a href=&quot;#django.contrib.gis.geos.GEOSGeometry&quot;&gt;&lt;code&gt;GEOSGeometry&lt;/code&gt;&lt;/a&gt; objects.</source>
          <target state="translated">이 섹션에는 &lt;a href=&quot;#django.contrib.gis.geos.GEOSGeometry&quot;&gt; &lt;code&gt;GEOSGeometry&lt;/code&gt; &lt;/a&gt; 객체 사용에 대한 간단한 소개 및 자습서가 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="388fdf6824f2ebd0c36c4d55e73ea06732df948d" translate="yes" xml:space="preserve">
          <source>This section describes how to create rasters from scratch using the &lt;code&gt;ds_input&lt;/code&gt; parameter.</source>
          <target state="translated">이 절에서는 &lt;code&gt;ds_input&lt;/code&gt; 매개 변수를 사용하여 처음부터 래스터를 작성하는 방법에 대해 설명합니다 .</target>
        </trans-unit>
        <trans-unit id="49cc8ced758c2f660a6a1c96d6bb1746c366b811" translate="yes" xml:space="preserve">
          <source>This section details the authentication backends that come with Django. For information on how to use them and how to write your own authentication backends, see the &lt;a href=&quot;../../topics/auth/customizing#authentication-backends&quot;&gt;Other authentication sources section&lt;/a&gt; of the &lt;a href=&quot;../../topics/auth/index&quot;&gt;User authentication guide&lt;/a&gt;.</source>
          <target state="translated">이 섹션에서는 Django와 함께 제공되는 인증 백엔드에 대해 자세히 설명합니다. 사용 방법 및 고유 한 인증 백엔드 작성 방법에 대한 정보 는 &lt;a href=&quot;../../topics/auth/index&quot;&gt;사용자 인증 안내서&lt;/a&gt; 의 &lt;a href=&quot;../../topics/auth/customizing#authentication-backends&quot;&gt;기타 인증 소스 섹션&lt;/a&gt; 을 참조하십시오. .</target>
        </trans-unit>
        <trans-unit id="7698bb9af257107be814a73a7bc8f5b7d0b3dc0e" translate="yes" xml:space="preserve">
          <source>This section is relevant only if you&amp;rsquo;re implementing your own transaction management. This problem cannot occur in Django&amp;rsquo;s default mode and &lt;a href=&quot;#django.db.transaction.atomic&quot;&gt;&lt;code&gt;atomic()&lt;/code&gt;&lt;/a&gt; handles it automatically.</source>
          <target state="translated">이 섹션은 자체 트랜잭션 관리를 구현하는 경우에만 관련이 있습니다. 이 문제는 Django의 기본 모드와 &lt;a href=&quot;#django.db.transaction.atomic&quot;&gt; &lt;code&gt;atomic()&lt;/code&gt; &lt;/a&gt; 에서 발생할 수 없습니다 이 자동으로 처리합니다.</target>
        </trans-unit>
        <trans-unit id="77ce0889945648187c9ce1b7dfbef6915209eb7d" translate="yes" xml:space="preserve">
          <source>This section provides reference material for query-related tools not documented elsewhere.</source>
          <target state="translated">이 섹션에서는 다른 곳에 문서화되지 않은 쿼리 관련 도구에 대한 참조 자료를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="31d0ee281d70dcdf1425e98e10a908631caf100d" translate="yes" xml:space="preserve">
          <source>This section will show you how to import the world borders shapefile into the database via GeoDjango models using the &lt;a href=&quot;layermapping&quot;&gt;LayerMapping data import utility&lt;/a&gt;.</source>
          <target state="translated">이 섹션에서는 &lt;a href=&quot;layermapping&quot;&gt;LayerMapping 데이터 가져 오기 유틸리티를&lt;/a&gt; 사용하여 GeoDjango 모델을 통해 월드 경계 모양 파일을 데이터베이스로 가져 오는 방법을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="4cb49d45ec46a524bfd7fa97756ee182693282d0" translate="yes" xml:space="preserve">
          <source>This sends a message to &lt;a href=&quot;mailto:john%40example.com&quot;&gt;john@example.com&lt;/a&gt; and &lt;a href=&quot;mailto:jane%40example.com&quot;&gt;jane@example.com&lt;/a&gt;, with them both receiving a separate email:</source>
          <target state="translated">이 메시지는 &lt;a href=&quot;mailto:john%40example.com&quot;&gt;john@example.com&lt;/a&gt; 및 &lt;a href=&quot;mailto:jane%40example.com&quot;&gt;jane@example.com&lt;/a&gt; 으로 메시지를 보내고 별도의 이메일을 받습니다 .</target>
        </trans-unit>
        <trans-unit id="1381ed9014daa6dcc425e865f2476f5b17dadeae" translate="yes" xml:space="preserve">
          <source>This sends a single email to &lt;a href=&quot;mailto:john%40example.com&quot;&gt;john@example.com&lt;/a&gt; and &lt;a href=&quot;mailto:jane%40example.com&quot;&gt;jane@example.com&lt;/a&gt;, with them both appearing in the &amp;ldquo;To:&amp;rdquo;:</source>
          <target state="translated">그러면 &lt;a href=&quot;mailto:john%40example.com&quot;&gt;john@example.com&lt;/a&gt; 및 &lt;a href=&quot;mailto:jane%40example.com&quot;&gt;jane@example.com&lt;/a&gt; 으로 단일 이메일이 발송되며 둘 다&amp;ldquo;To :&amp;rdquo;에 나타납니다.</target>
        </trans-unit>
        <trans-unit id="77e081ffcc26625aefd03c1cbf21ce7dfe5403e8" translate="yes" xml:space="preserve">
          <source>This server uses the WSGI application object specified by the &lt;a href=&quot;settings#std:setting-WSGI_APPLICATION&quot;&gt;&lt;code&gt;WSGI_APPLICATION&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">이 서버는 &lt;a href=&quot;settings#std:setting-WSGI_APPLICATION&quot;&gt; &lt;code&gt;WSGI_APPLICATION&lt;/code&gt; 에&lt;/a&gt; 의해 지정된 WSGI 애플리케이션 오브젝트를 사용합니다. 설정으로 .</target>
        </trans-unit>
        <trans-unit id="349b2e302397143297b0696a765b9a10d0e05763" translate="yes" xml:space="preserve">
          <source>This sets the default storage engine upon connecting to the database. After your tables have been created, you should remove this option as it adds a query that is only needed during table creation to each database connection.</source>
          <target state="translated">데이터베이스에 연결할 때 기본 스토리지 엔진을 설정합니다. 테이블을 작성한 후에는 테이블 작성 중에 만 필요한 쿼리를 각 데이터베이스 연결에 추가하므로이 옵션을 제거해야합니다.</target>
        </trans-unit>
        <trans-unit id="b4c3e976c7f62d3d10d1095b818e169f627f0256" translate="yes" xml:space="preserve">
          <source>This sets the mapping of message level to message tag, which is typically rendered as a CSS class in HTML. If you specify a value, it will extend the default. This means you only have to specify those values which you need to override. See &lt;a href=&quot;contrib/messages#message-displaying&quot;&gt;Displaying messages&lt;/a&gt; above for more details.</source>
          <target state="translated">이것은 메시지 레벨을 메시지 태그로의 맵핑을 설정하며, 일반적으로 HTML에서 CSS 클래스로 렌더링됩니다. 값을 지정하면 기본값이 확장됩니다. 즉, 재정의해야하는 값만 지정하면됩니다. 자세한 내용은 위의 &lt;a href=&quot;contrib/messages#message-displaying&quot;&gt;메시지 표시&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="c12b042a248a44fd8b0107e3b2df2971503d6030" translate="yes" xml:space="preserve">
          <source>This setting also affects cookies set by &lt;a href=&quot;contrib/messages#module-django.contrib.messages&quot;&gt;&lt;code&gt;django.contrib.messages&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 설정은 &lt;a href=&quot;contrib/messages#module-django.contrib.messages&quot;&gt; &lt;code&gt;django.contrib.messages&lt;/code&gt; 가&lt;/a&gt; 설정 한 쿠키에도 영향을줍니다. .</target>
        </trans-unit>
        <trans-unit id="d8d3fdb61bcd322120ff11cb09de3302f1195f6f" translate="yes" xml:space="preserve">
          <source>This setting also determines the default permissions for collected static directories when using the &lt;a href=&quot;contrib/staticfiles#django-admin-collectstatic&quot;&gt;&lt;code&gt;collectstatic&lt;/code&gt;&lt;/a&gt; management command. See &lt;a href=&quot;contrib/staticfiles#django-admin-collectstatic&quot;&gt;&lt;code&gt;collectstatic&lt;/code&gt;&lt;/a&gt; for details on overriding it.</source>
          <target state="translated">또한이 설정은 &lt;a href=&quot;contrib/staticfiles#django-admin-collectstatic&quot;&gt; &lt;code&gt;collectstatic&lt;/code&gt; &lt;/a&gt; management 명령을 사용할 때 수집 된 정적 디렉토리에 대한 기본 권한을 결정합니다 . &lt;a href=&quot;contrib/staticfiles#django-admin-collectstatic&quot;&gt; &lt;code&gt;collectstatic&lt;/code&gt; &lt;/a&gt; 참조재정의에 대한 자세한 을 .</target>
        </trans-unit>
        <trans-unit id="548133c0b12e142e70380ed9e6d3f829fca0060d" translate="yes" xml:space="preserve">
          <source>This setting also determines the default permissions for collected static files when using the &lt;a href=&quot;contrib/staticfiles#django-admin-collectstatic&quot;&gt;&lt;code&gt;collectstatic&lt;/code&gt;&lt;/a&gt; management command. See &lt;a href=&quot;contrib/staticfiles#django-admin-collectstatic&quot;&gt;&lt;code&gt;collectstatic&lt;/code&gt;&lt;/a&gt; for details on overriding it.</source>
          <target state="translated">또한이 설정은 &lt;a href=&quot;contrib/staticfiles#django-admin-collectstatic&quot;&gt; &lt;code&gt;collectstatic&lt;/code&gt; &lt;/a&gt; management 명령을 사용할 때 수집 된 정적 파일에 대한 기본 권한을 결정합니다 . 재정의에 대한 자세한 내용 &lt;a href=&quot;contrib/staticfiles#django-admin-collectstatic&quot;&gt; &lt;code&gt;collectstatic&lt;/code&gt; &lt;/a&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="0ab0e70beb7f05c47afa91479cbebb5eaf8db688" translate="yes" xml:space="preserve">
          <source>This setting defines the additional locations the staticfiles app will traverse if the &lt;code&gt;FileSystemFinder&lt;/code&gt; finder is enabled, e.g. if you use the &lt;a href=&quot;contrib/staticfiles#django-admin-collectstatic&quot;&gt;&lt;code&gt;collectstatic&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;contrib/staticfiles#django-admin-findstatic&quot;&gt;&lt;code&gt;findstatic&lt;/code&gt;&lt;/a&gt; management command or use the static file serving view.</source>
          <target state="translated">이 설정은 &lt;code&gt;FileSystemFinder&lt;/code&gt; 파인더가 사용 가능한 경우 (예 : &lt;a href=&quot;contrib/staticfiles#django-admin-collectstatic&quot;&gt; &lt;code&gt;collectstatic&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;contrib/staticfiles#django-admin-findstatic&quot;&gt; &lt;code&gt;findstatic&lt;/code&gt; &lt;/a&gt; 관리 명령을 사용하거나 정적 파일 제공보기를 사용하는 경우) 정적 파일 앱이 이동하는 추가 위치를 정의합니다 .</target>
        </trans-unit>
        <trans-unit id="83b80c8581f4c0dc8b87d13d06d5e657a5a150ad" translate="yes" xml:space="preserve">
          <source>This setting exists to allow for testing of primary/replica (referred to as master/slave by some databases) configurations of multiple databases. See the documentation on &lt;a href=&quot;../topics/testing/advanced#topics-testing-primaryreplica&quot;&gt;testing primary/replica configurations&lt;/a&gt; for details.</source>
          <target state="translated">이 설정은 여러 데이터베이스의 기본 / 복제본 (일부 데이터베이스에서는 마스터 / 슬레이브) 구성을 테스트 할 수 있도록합니다. &lt;a href=&quot;../topics/testing/advanced#topics-testing-primaryreplica&quot;&gt;기본 / 복제본 구성 테스트&lt;/a&gt; 에 대한 설명서를 참조하십시오. 하십시오.</target>
        </trans-unit>
        <trans-unit id="dbe6042ce12f8ce964adc8478a31f0fc9247fd0d" translate="yes" xml:space="preserve">
          <source>This setting is a global default and can be overwritten at a per-session level by explicitly calling the &lt;a href=&quot;#django.contrib.sessions.backends.base.SessionBase.set_expiry&quot;&gt;&lt;code&gt;set_expiry()&lt;/code&gt;&lt;/a&gt; method of &lt;code&gt;request.session&lt;/code&gt; as described above in &lt;a href=&quot;#using-sessions-in-views&quot;&gt;using sessions in views&lt;/a&gt;.</source>
          <target state="translated">이 설정은 전역 기본값이며 위에서 &lt;a href=&quot;#using-sessions-in-views&quot;&gt;view에서 세션을 사용할 때&lt;/a&gt; 위에서 설명한 &lt;code&gt;request.session&lt;/code&gt; 의 &lt;a href=&quot;#django.contrib.sessions.backends.base.SessionBase.set_expiry&quot;&gt; &lt;code&gt;set_expiry()&lt;/code&gt; &lt;/a&gt; 메소드를 명시 적으로 호출하여 세션 별 레벨에서 겹쳐 쓸 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="81cb264dce98fcd41c9cd8c59a257c48d3ad5c55" translate="yes" xml:space="preserve">
          <source>This setting is required to protect your site against some CSRF attacks. If you use a wildcard, you must perform your own validation of the &lt;code&gt;Host&lt;/code&gt; HTTP header, or otherwise ensure that you aren&amp;rsquo;t vulnerable to this category of attacks.</source>
          <target state="translated">이 설정은 일부 CSRF 공격으로부터 사이트를 보호하기 위해 필요합니다. 와일드 카드를 사용하는 경우 &lt;code&gt;Host&lt;/code&gt; HTTP 헤더 에 대한 자체 유효성 검사를 수행하거나이 범주의 공격에 취약하지 않은지 확인해야합니다.</target>
        </trans-unit>
        <trans-unit id="127c7582bcafd6ada9d4c033dc6d3d6c27f3f6d3" translate="yes" xml:space="preserve">
          <source>This setting takes priority over &lt;a href=&quot;#std:setting-USE_X_FORWARDED_PORT&quot;&gt;&lt;code&gt;USE_X_FORWARDED_PORT&lt;/code&gt;&lt;/a&gt;. Per &lt;a href=&quot;https://tools.ietf.org/html/rfc7239.html#section-5.3&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;RFC 7239#section-5.3&lt;/strong&gt;&lt;/a&gt;, the &lt;code&gt;X-Forwarded-Host&lt;/code&gt; header can include the port number, in which case you shouldn&amp;rsquo;t use &lt;a href=&quot;#std:setting-USE_X_FORWARDED_PORT&quot;&gt;&lt;code&gt;USE_X_FORWARDED_PORT&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 설정은 &lt;a href=&quot;#std:setting-USE_X_FORWARDED_PORT&quot;&gt; &lt;code&gt;USE_X_FORWARDED_PORT&lt;/code&gt; &lt;/a&gt; 보다 우선 합니다. 당 &lt;a href=&quot;https://tools.ietf.org/html/rfc7239.html#section-5.3&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;RFC 7239 # 섹션-5.3&lt;/strong&gt;&lt;/a&gt; 의 &lt;code&gt;X-Forwarded-Host&lt;/code&gt; 사용하지해야하는 경우 포트 번호를 포함 할 수 헤더 &lt;a href=&quot;#std:setting-USE_X_FORWARDED_PORT&quot;&gt; &lt;code&gt;USE_X_FORWARDED_PORT&lt;/code&gt; 을&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="0dc8b2704f6ff908ef3d80ed33f8e26caacff314" translate="yes" xml:space="preserve">
          <source>This shapefile is in the popular WGS84 spatial reference system &amp;ndash; in other words, the data uses longitude, latitude pairs in units of degrees.</source>
          <target state="translated">이 쉐이프 파일은 널리 사용되는 WGS84 공간 참조 시스템에 있습니다. 즉, 데이터는 경도, 위도 쌍을도 단위로 사용합니다.</target>
        </trans-unit>
        <trans-unit id="5cfa635db51f594be050295806f3e510590ec9b5" translate="yes" xml:space="preserve">
          <source>This short template iterates over the given data and displays a line of CSV for each row. It uses the &lt;a href=&quot;../ref/templates/builtins#std:templatefilter-addslashes&quot;&gt;&lt;code&gt;addslashes&lt;/code&gt;&lt;/a&gt; template filter to ensure there aren&amp;rsquo;t any problems with quotes.</source>
          <target state="translated">이 짧은 템플릿은 주어진 데이터를 반복하고 각 행에 대해 CSV 행을 표시합니다. 그것은 사용 &lt;a href=&quot;../ref/templates/builtins#std:templatefilter-addslashes&quot;&gt; &lt;code&gt;addslashes&lt;/code&gt; 의&lt;/a&gt; 따옴표에 문제가되지 않습니다 보장하기 위해 템플릿 필터를.</target>
        </trans-unit>
        <trans-unit id="ceeadb582a89287e89977c4d9ba1e9b67e229e70" translate="yes" xml:space="preserve">
          <source>This should be an initially empty destination directory for collecting your static files from their permanent locations into one directory for ease of deployment; it is &lt;strong&gt;not&lt;/strong&gt; a place to store your static files permanently. You should do that in directories that will be found by &lt;a href=&quot;contrib/staticfiles&quot;&gt;staticfiles&lt;/a&gt;&amp;rsquo;s &lt;a href=&quot;#std:setting-STATICFILES_FINDERS&quot;&gt;&lt;code&gt;finders&lt;/code&gt;&lt;/a&gt;, which by default, are &lt;code&gt;'static/'&lt;/code&gt; app sub-directories and any directories you include in &lt;a href=&quot;#std:setting-STATICFILES_DIRS&quot;&gt;&lt;code&gt;STATICFILES_DIRS&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">이는 쉽게 배포 할 수 있도록 영구 위치에서 하나의 디렉토리로 정적 파일을 수집 할 수 있도록 초기에 비어있는 대상 디렉토리 여야합니다. 정적 파일을 영구적으로 저장할 장소 가 &lt;strong&gt;아닙니다&lt;/strong&gt; . 다음과 같은 방법으로 찾을 수 디렉토리에 그렇게해야 &lt;a href=&quot;contrib/staticfiles&quot;&gt;staticfiles&lt;/a&gt; 의 &lt;a href=&quot;#std:setting-STATICFILES_FINDERS&quot;&gt; &lt;code&gt;finders&lt;/code&gt; &lt;/a&gt; 기본적으로 있으며, &lt;code&gt;'static/'&lt;/code&gt; 당신이에 포함 응용 프로그램의 하위 디렉토리 및 디렉토리 &lt;a href=&quot;#std:setting-STATICFILES_DIRS&quot;&gt; &lt;code&gt;STATICFILES_DIRS&lt;/code&gt; &lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="2b50ba4bcf77c2fdd6fbfb8372057b466008cd41" translate="yes" xml:space="preserve">
          <source>This should be set to a list of strings that contain full paths to your additional files directory(ies) e.g.:</source>
          <target state="translated">추가 파일 디렉토리에 대한 전체 경로가 포함 된 문자열 목록으로 설정해야합니다. 예 :</target>
        </trans-unit>
        <trans-unit id="1b8be1282035a588e2c42f17abf131670005500a" translate="yes" xml:space="preserve">
          <source>This should not be done for POST forms that target external URLs, since that would cause the CSRF token to be leaked, leading to a vulnerability.</source>
          <target state="translated">외부 URL을 대상으로하는 POST 양식의 경우 CSRF 토큰이 유출되어 취약점이 생길 수 있으므로 수행하면 안됩니다.</target>
        </trans-unit>
        <trans-unit id="369d54d2e433bf38cfcfaa48dfb8d2e639339dd1" translate="yes" xml:space="preserve">
          <source>This should output &amp;ldquo;UTF-8&amp;rdquo;.</source>
          <target state="translated">&amp;ldquo;UTF-8&amp;rdquo;이 출력되어야합니다.</target>
        </trans-unit>
        <trans-unit id="0d5c4a6fe8714cac0fa3cf0cd4c7ba4e9ee4ae97" translate="yes" xml:space="preserve">
          <source>This shows another issue, where we are matching against a different spelling of the name. In this case we have an asymmetry though - a search for &lt;code&gt;Helen&lt;/code&gt; will pick up &lt;code&gt;Helena&lt;/code&gt; or &lt;code&gt;H&amp;eacute;l&amp;egrave;ne&lt;/code&gt;, but not the reverse. Another option would be to use a &lt;a href=&quot;../../ref/contrib/postgres/lookups#std:fieldlookup-trigram_similar&quot;&gt;&lt;code&gt;trigram_similar&lt;/code&gt;&lt;/a&gt; comparison, which compares sequences of letters.</source>
          <target state="translated">이것은 다른 철자법과 일치하는 또 다른 문제를 보여줍니다. 이 경우 비대칭 성이 있습니다. &lt;code&gt;Helen&lt;/code&gt; 을 검색 하면 &lt;code&gt;Helena&lt;/code&gt; 또는 &lt;code&gt;H&amp;eacute;l&amp;egrave;ne&lt;/code&gt; 이 선택 되지만 그 반대는 아닙니다. 다른 옵션은 문자 순서를 비교 하는 &lt;a href=&quot;../../ref/contrib/postgres/lookups#std:fieldlookup-trigram_similar&quot;&gt; &lt;code&gt;trigram_similar&lt;/code&gt; &lt;/a&gt; 비교 를 사용하는 것 입니다.</target>
        </trans-unit>
        <trans-unit id="6ce0e1df0614ff5c48057ab9444768b0d3e21a37" translate="yes" xml:space="preserve">
          <source>This shows, by the way, that you can make multiple calls to &lt;code&gt;extra()&lt;/code&gt; and it will behave as you expect (adding new constraints each time).</source>
          <target state="translated">그런데 &lt;code&gt;extra()&lt;/code&gt; 를 여러 번 호출 할 수 있으며 예상대로 동작 할 때마다 (매번 새로운 제약 조건 추가) 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="27dd6924d07379d5eae8108d2f9477f297126c1b" translate="yes" xml:space="preserve">
          <source>This signal is sent when the value of a setting is changed through the &lt;code&gt;django.test.TestCase.settings()&lt;/code&gt; context manager or the &lt;a href=&quot;../topics/testing/tools#django.test.override_settings&quot;&gt;&lt;code&gt;django.test.override_settings()&lt;/code&gt;&lt;/a&gt; decorator/context manager.</source>
          <target state="translated">이 신호는 &lt;code&gt;django.test.TestCase.settings()&lt;/code&gt; 컨텍스트 관리자 또는 &lt;a href=&quot;../topics/testing/tools#django.test.override_settings&quot;&gt; &lt;code&gt;django.test.override_settings()&lt;/code&gt; &lt;/a&gt; 데코레이터 / 컨텍스트 관리자를 통해 설정 값이 변경 될 때 전송됩니다 .</target>
        </trans-unit>
        <trans-unit id="f82edd23b361a592a73d5f0004d3086f518ae491" translate="yes" xml:space="preserve">
          <source>This signal is sent whenever Django encounters an exception while processing an incoming HTTP request.</source>
          <target state="translated">이 신호는 들어오는 HTTP 요청을 처리하는 동안 Django에서 예외가 발생할 때마다 전송됩니다.</target>
        </trans-unit>
        <trans-unit id="914f0ce8bae73160152bceb95f5a23b917b48f86" translate="yes" xml:space="preserve">
          <source>This simple example, taken from a hypothetical police beat news site describes a feed of the latest five news items:</source>
          <target state="translated">가설적인 경찰 이길 뉴스 사이트에서 가져온이 간단한 예는 최신 다섯 가지 뉴스 항목의 피드를 설명합니다.</target>
        </trans-unit>
        <trans-unit id="9daa9b555617bab957e445a30273a3bc544da32c" translate="yes" xml:space="preserve">
          <source>This simplistic view logs in a &amp;ldquo;member&amp;rdquo; of the site:</source>
          <target state="translated">이 간단한보기는 사이트의 &quot;회원&quot;에 로그인합니다.</target>
        </trans-unit>
        <trans-unit id="208cfe552efadfbc9683059c968b5aee29eceb02" translate="yes" xml:space="preserve">
          <source>This simplistic view sets a &lt;code&gt;has_commented&lt;/code&gt; variable to &lt;code&gt;True&lt;/code&gt; after a user posts a comment. It doesn&amp;rsquo;t let a user post a comment more than once:</source>
          <target state="translated">이 간단한 뷰는 사용자가 주석을 게시 한 후 &lt;code&gt;has_commented&lt;/code&gt; 변수를 &lt;code&gt;True&lt;/code&gt; 로 설정합니다 . 사용자가 댓글을 두 번 이상 게시 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="462dbdfe1e37bbc5069fd21455c36eda51793588" translate="yes" xml:space="preserve">
          <source>This slows down the startup time of the test runner; if you have apps that you know don&amp;rsquo;t need this feature, you can add their full names in here (e.g. &lt;code&gt;'django.contrib.contenttypes'&lt;/code&gt;) to exclude them from this serialization process.</source>
          <target state="translated">테스트 러너의 시작 시간이 느려집니다. 이 기능이 필요하지 않은 앱이있는 경우 여기에 전체 이름 (예 : &lt;code&gt;'django.contrib.contenttypes'&lt;/code&gt; )을 추가하여이 직렬화 프로세스에서 제외 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fc4c28ae186c8e8f29d2f6b4cd86c3cdfb622452" translate="yes" xml:space="preserve">
          <source>This sort of reference, called a lazy relationship, can be useful when resolving circular import dependencies between two applications.</source>
          <target state="translated">게으른 관계라고하는 이러한 종류의 참조는 두 응용 프로그램 간의 순환 가져 오기 종속성을 해결할 때 유용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="db0f0497260c1bd8c3b04123a2b42534d0d6b8ad" translate="yes" xml:space="preserve">
          <source>This spanning can be as deep as you&amp;rsquo;d like.</source>
          <target state="translated">이 스패닝은 원하는만큼 깊을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8a9f68776d403b1e87f1aff95be9f8338b3a5797" translate="yes" xml:space="preserve">
          <source>This static definition is converted at runtime into a widget property named &lt;code&gt;media&lt;/code&gt;. The list of assets for a &lt;code&gt;CalendarWidget&lt;/code&gt; instance can be retrieved through this property:</source>
          <target state="translated">이 정적 정의는 런타임시 &lt;code&gt;media&lt;/code&gt; 라는 위젯 특성으로 변환됩니다 . &lt;code&gt;CalendarWidget&lt;/code&gt; 인스턴스 의 자산 목록은 이 속성을 통해 검색 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0b26947ffb150028956f2fc0245b54915b4cceab" translate="yes" xml:space="preserve">
          <source>This step is only necessary if you&amp;rsquo;d like to work with a &amp;ldquo;large&amp;rdquo; database engine like PostgreSQL, MariaDB, MySQL, or Oracle. To install such a database, consult the &lt;a href=&quot;../topics/install#database-installation&quot;&gt;database installation information&lt;/a&gt;.</source>
          <target state="translated">이 단계는 PostgreSQL, MariaDB, MySQL 또는 Oracle과 같은 &quot;대형&quot;데이터베이스 엔진으로 작업하려는 경우에만 필요합니다. 이러한 데이터베이스를 설치하려면 &lt;a href=&quot;../topics/install#database-installation&quot;&gt;데이터베이스 설치 정보를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="bd93e246c23d55e311a0b17674dcd87f793d8f08" translate="yes" xml:space="preserve">
          <source>This syntax can only be used for single-line comments (no newlines are permitted between the &lt;code&gt;{#&lt;/code&gt; and &lt;code&gt;#}&lt;/code&gt; delimiters). If you need to comment out a multiline portion of the template, see the &lt;a href=&quot;builtins#std:templatetag-comment&quot;&gt;&lt;code&gt;comment&lt;/code&gt;&lt;/a&gt; tag.</source>
          <target state="translated">이 구문은 한 줄 주석에만 사용할 수 있습니다 ( &lt;code&gt;{#&lt;/code&gt; 및 &lt;code&gt;#}&lt;/code&gt; 구분 기호 사이에는 줄 바꿈이 허용되지 않음 ). 템플릿의 여러 줄 부분을 주석 처리해야하는 경우 주석을 참조하십시오 &lt;a href=&quot;builtins#std:templatetag-comment&quot;&gt; &lt;code&gt;comment&lt;/code&gt; &lt;/a&gt; 태그를 .</target>
        </trans-unit>
        <trans-unit id="05e4c06960b0cc9b77691ab892156047c42d736b" translate="yes" xml:space="preserve">
          <source>This tag allows a more fine grained control of localization than &lt;a href=&quot;../../ref/settings#std:setting-USE_L10N&quot;&gt;&lt;code&gt;USE_L10N&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 태그는 &lt;a href=&quot;../../ref/settings#std:setting-USE_L10N&quot;&gt; &lt;code&gt;USE_L10N&lt;/code&gt; &lt;/a&gt; 보다 더 세분화 된 지역화 제어를 허용합니다 .</target>
        </trans-unit>
        <trans-unit id="48514d47322b8d3fc3468b465650133d43084bf4" translate="yes" xml:space="preserve">
          <source>This tag also provides for pluralization. To use it:</source>
          <target state="translated">이 태그는 복수형도 제공합니다. 그것을 사용하려면 :</target>
        </trans-unit>
        <trans-unit id="553b1ccb92d8209e26a01f3586bd667e12f57d4e" translate="yes" xml:space="preserve">
          <source>This tag auto-escapes variable values. You can disable auto-escaping with:</source>
          <target state="translated">이 태그는 변수 값을 자동 이스케이프합니다. 다음을 사용하여 자동 이스케이프를 비활성화 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="391d955b5bccbb5b0b196c198524f5e8bac63cec" translate="yes" xml:space="preserve">
          <source>This tag can be used in two ways:</source>
          <target state="translated">이 태그는 두 가지 방법으로 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d27093869c44859e5fbc39a11666ac3d48d84427" translate="yes" xml:space="preserve">
          <source>This tag has exactly the same effects as the &lt;a href=&quot;../../ref/settings#std:setting-USE_TZ&quot;&gt;&lt;code&gt;USE_TZ&lt;/code&gt;&lt;/a&gt; setting as far as the template engine is concerned. It allows a more fine grained control of conversion.</source>
          <target state="translated">이 태그는 &lt;a href=&quot;../../ref/settings#std:setting-USE_TZ&quot;&gt; &lt;code&gt;USE_TZ&lt;/code&gt; &lt;/a&gt; 와 동일한 효과를 갖습니다 템플릿 엔진에 관한 설정과 갖습니다. 보다 세밀한 변환 제어가 가능합니다.</target>
        </trans-unit>
        <trans-unit id="60513b3846b57a1f4d4de01d444f5c7d6bd353a9" translate="yes" xml:space="preserve">
          <source>This tag is particularly useful in a loop:</source>
          <target state="translated">이 태그는 루프에서 특히 유용합니다.</target>
        </trans-unit>
        <trans-unit id="7d799b62253d994051bf441baa35ca4618760ff3" translate="yes" xml:space="preserve">
          <source>This tag is used for CSRF protection, as described in the documentation for &lt;a href=&quot;../csrf&quot;&gt;Cross Site Request Forgeries&lt;/a&gt;.</source>
          <target state="translated">이 태그는 &lt;a href=&quot;../csrf&quot;&gt;Cross Site Request Forgeries&lt;/a&gt; 의 문서에 설명 된대로 CSRF 보호에 사용됩니다. .</target>
        </trans-unit>
        <trans-unit id="bd33eb4f7f1ea18cb3e00850bd81dcaec99dfd8d" translate="yes" xml:space="preserve">
          <source>This takes the initial &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; of all entries in the database, adds a filter, then an exclusion, then another filter. The final result is a &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; containing all entries with a headline that starts with &amp;ldquo;What&amp;rdquo;, that were published between January 30, 2005, and the current day.</source>
          <target state="translated">데이터베이스에있는 모든 항목 의 초기 &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; &lt;/a&gt; 을 가져 와서 필터를 추가 한 다음 제외, 다른 필터를 추가합니다. 최종 결과는 2005 년 1 월 30 일과 현재 날짜 사이에 &quot;What&quot;로 시작하는 헤드 라인이있는 모든 항목을 포함 하는 &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; &lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="251bc5482e0d2d2384729de0d0782385ed5239c7" translate="yes" xml:space="preserve">
          <source>This technique is used in the &lt;a href=&quot;../../ref/contrib/syndication&quot;&gt;syndication framework&lt;/a&gt; to pass metadata and options to views.</source>
          <target state="translated">이 기술은 &lt;a href=&quot;../../ref/contrib/syndication&quot;&gt;신디케이션 프레임 워크&lt;/a&gt; 에서 메타 데이터 및 옵션을보기로 전달 하는 데 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="e5c80ab2c76c9d01fd68d8e172d8679f1ecd2f61" translate="yes" xml:space="preserve">
          <source>This technique lets language-specific translations reorder the placeholder text. For example, an English translation may be &lt;code&gt;&quot;Today is November 26.&quot;&lt;/code&gt;, while a Spanish translation may be &lt;code&gt;&quot;Hoy es 26 de Noviembre.&quot;&lt;/code&gt; &amp;ndash; with the month and the day placeholders swapped.</source>
          <target state="translated">이 기술을 사용하면 언어 별 번역에서 자리 표시 자 텍스트의 순서를 바꿀 수 있습니다. 예를 들어 영어 번역은 &lt;code&gt;&quot;Today is November 26.&quot;&lt;/code&gt; 스페인어 번역은 &lt;code&gt;&quot;Hoy es 26 de Noviembre.&quot;&lt;/code&gt; 수 있습니다 .&amp;ndash; 월과 일 자리 표시자가 바뀌 었습니다.</target>
        </trans-unit>
        <trans-unit id="8ef266bf489ec0b89254f7de5d9f5916de71a526" translate="yes" xml:space="preserve">
          <source>This tells Django how to calculate the URL for an object. Django uses this in its admin interface, and any time it needs to figure out a URL for an object.</source>
          <target state="translated">이것은 장고에게 객체의 URL을 계산하는 방법을 알려줍니다. Django는 관리 인터페이스에서 객체의 URL을 알아 내야 할 때마다 이것을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="a32bdf947906604af2e0b8cf6074268998d49cf5" translate="yes" xml:space="preserve">
          <source>This tells Django to build a sitemap when a client accesses &lt;code&gt;/sitemap.xml&lt;/code&gt;.</source>
          <target state="translated">클라이언트가 &lt;code&gt;/sitemap.xml&lt;/code&gt; 에 액세스 할 때 Django가 사이트 맵을 작성하도록 지시 합니다.</target>
        </trans-unit>
        <trans-unit id="33d51a843ed0251c0ec515a36e05cf10941cb2fa" translate="yes" xml:space="preserve">
          <source>This tells Django to retrieve the &lt;code&gt;Store&lt;/code&gt; model, join (through the many-to-many relationship) with the &lt;code&gt;Book&lt;/code&gt; model, and aggregate on the price field of the book model to produce a minimum and maximum value.</source>
          <target state="translated">이렇게하면 장고가 &lt;code&gt;Store&lt;/code&gt; 모델 을 검색하고 다 대다 관계를 통해 &lt;code&gt;Book&lt;/code&gt; 모델 과 결합하고 책 모델의 가격 필드를 집계하여 최소값과 최대 값을 생성하도록 지시합니다.</target>
        </trans-unit>
        <trans-unit id="a9a96b77d1174ca6a922db32b401ab3bff52c93a" translate="yes" xml:space="preserve">
          <source>This tells Django to trust the &lt;code&gt;X-Forwarded-Proto&lt;/code&gt; header that comes from our proxy, and any time its value is &lt;code&gt;'https'&lt;/code&gt;, then the request is guaranteed to be secure (i.e., it originally came in via HTTPS).</source>
          <target state="translated">이것은 Django가 프록시에서 오는 &lt;code&gt;X-Forwarded-Proto&lt;/code&gt; 헤더 를 신뢰 하고 값이 &lt;code&gt;'https'&lt;/code&gt; 라는 것을 알려줍니다. 이면 요청이 안전하다는 것을 보장합니다 (즉, 원래 HTTPS를 통해 온 것).</target>
        </trans-unit>
        <trans-unit id="4c889c25b5058b33e81d3467b1e3d16ce0bf106e" translate="yes" xml:space="preserve">
          <source>This tells Django: &amp;ldquo;&lt;code&gt;Choice&lt;/code&gt; objects are edited on the &lt;code&gt;Question&lt;/code&gt; admin page. By default, provide enough fields for 3 choices.&amp;rdquo;</source>
          <target state="translated">&amp;ldquo; &lt;code&gt;Choice&lt;/code&gt; 개체는 &lt;code&gt;Question&lt;/code&gt; 관리 페이지 에서 편집됩니다 . 기본적으로 3 가지 선택을위한 충분한 필드를 제공하십시오.&amp;rdquo;</target>
        </trans-unit>
        <trans-unit id="566b41c91a6fc048a88b2223d44ccc9afa07b54b" translate="yes" xml:space="preserve">
          <source>This tells downstream caches to vary on &lt;em&gt;both&lt;/em&gt;, which means each combination of user-agent and cookie will get its own cache value. For example, a request with the user-agent &lt;code&gt;Mozilla&lt;/code&gt; and the cookie value &lt;code&gt;foo=bar&lt;/code&gt; will be considered different from a request with the user-agent &lt;code&gt;Mozilla&lt;/code&gt; and the cookie value &lt;code&gt;foo=ham&lt;/code&gt;.</source>
          <target state="translated">이는 다운 스트림 캐시가 &lt;em&gt;둘 다&lt;/em&gt; 에서 달라 지도록 지시합니다. &lt;em&gt;즉&lt;/em&gt; , 사용자 에이전트와 쿠키의 각 조합이 자체 캐시 값을 갖습니다. 예를 들어, 사용자 에이전트 &lt;code&gt;Mozilla&lt;/code&gt; 및 쿠키 값 &lt;code&gt;foo=bar&lt;/code&gt; 의 요청은 사용자 에이전트 &lt;code&gt;Mozilla&lt;/code&gt; 및 쿠키 값 &lt;code&gt;foo=ham&lt;/code&gt; 의 요청과 다른 것으로 간주됩니다 .</target>
        </trans-unit>
        <trans-unit id="47c915280d0cbd8cb69e6eee11f0222bba253610" translate="yes" xml:space="preserve">
          <source>This tells the &lt;a href=&quot;index#django.contrib.admin.ModelAdmin&quot;&gt;&lt;code&gt;ModelAdmin&lt;/code&gt;&lt;/a&gt; to not display or allow any actions, including any &lt;a href=&quot;#adminsite-actions&quot;&gt;site-wide actions&lt;/a&gt;.</source>
          <target state="translated">이렇게하면 &lt;a href=&quot;index#django.contrib.admin.ModelAdmin&quot;&gt; &lt;code&gt;ModelAdmin&lt;/code&gt; &lt;/a&gt; 이 &lt;a href=&quot;#adminsite-actions&quot;&gt;사이트 전체 작업을&lt;/a&gt; 포함하여 모든 작업을 표시하거나 허용하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="5076daafa8f95796bb9a3911395afa3623b3040d" translate="yes" xml:space="preserve">
          <source>This tells the browser to return the form data to the URL &lt;code&gt;/your-name/&lt;/code&gt;, using the &lt;code&gt;POST&lt;/code&gt; method. It will display a text field, labeled &amp;ldquo;Your name:&amp;rdquo;, and a button marked &amp;ldquo;OK&amp;rdquo;. If the template context contains a &lt;code&gt;current_name&lt;/code&gt; variable, that will be used to pre-fill the &lt;code&gt;your_name&lt;/code&gt; field.</source>
          <target state="translated">이것은 &lt;code&gt;POST&lt;/code&gt; 메소드를 사용하여 브라우저가 양식 데이터를 URL &lt;code&gt;/your-name/&lt;/code&gt; 에 리턴하도록 지시합니다 . &amp;ldquo;Your name :&amp;rdquo;이라는 레이블이 붙은 텍스트 필드와&amp;ldquo;OK&amp;rdquo;가 표시된 단추가 표시됩니다. 템플리트 컨텍스트에 &lt;code&gt;current_name&lt;/code&gt; 변수 가 포함되어 있으면 &lt;code&gt;your_name&lt;/code&gt; 필드 를 미리 채우는 데 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="d546c383f3fb939674b702de55222694fde96011" translate="yes" xml:space="preserve">
          <source>This tells you that the test runner is creating a test database, as described in the previous section.</source>
          <target state="translated">이것은 이전 섹션에서 설명한대로 테스트 실행기가 테스트 데이터베이스를 작성 중임을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="d2ec35763241924aff863ea4892ee66700521330" translate="yes" xml:space="preserve">
          <source>This template code is much better:</source>
          <target state="translated">이 템플릿 코드가 훨씬 좋습니다.</target>
        </trans-unit>
        <trans-unit id="a43aeef0d1d83f6759d09f263d1973c0e9bfd72d" translate="yes" xml:space="preserve">
          <source>This template context variable is not available if a &lt;code&gt;RequestContext&lt;/code&gt; is not being used.</source>
          <target state="translated">&lt;code&gt;RequestContext&lt;/code&gt; 를 사용하지 않는 경우이 템플리트 컨텍스트 변수를 사용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="b00183a644f3972f185fe30e6495f5ffc58eb3f6" translate="yes" xml:space="preserve">
          <source>This template file contains lots of text like &lt;code&gt;{% block branding %}&lt;/code&gt; and &lt;code&gt;{{ title }}&lt;/code&gt;. The &lt;code&gt;{%&lt;/code&gt; and &lt;code&gt;{{&lt;/code&gt; tags are part of Django&amp;rsquo;s template language. When Django renders &lt;code&gt;admin/base_site.html&lt;/code&gt;, this template language will be evaluated to produce the final HTML page, just like we saw in &lt;a href=&quot;tutorial03&quot;&gt;Tutorial 3&lt;/a&gt;.</source>
          <target state="translated">이 템플릿 파일에는 &lt;code&gt;{% block branding %}&lt;/code&gt; 및 &lt;code&gt;{{ title }}&lt;/code&gt; 과 같은 많은 텍스트가 포함되어 있습니다 . &lt;code&gt;{%&lt;/code&gt; 와 &lt;code&gt;{{&lt;/code&gt; 태그 장고의 템플릿 언어의 일부입니다. Django가 &lt;code&gt;admin/base_site.html&lt;/code&gt; 을 렌더링 할 때이 템플릿 언어는 &lt;a href=&quot;tutorial03&quot;&gt;자습서 3&lt;/a&gt; 에서 본 것처럼 최종 HTML 페이지를 생성하도록 평가됩니다 .</target>
        </trans-unit>
        <trans-unit id="7e58bc3d3abd11f3823a24751e1c45f1859c642f" translate="yes" xml:space="preserve">
          <source>This template tag works on links prefixed with &lt;code&gt;http://&lt;/code&gt;, &lt;code&gt;https://&lt;/code&gt;, or &lt;code&gt;www.&lt;/code&gt;. For example, &lt;code&gt;https://goo.gl/aia1t&lt;/code&gt; will get converted but &lt;code&gt;goo.gl/aia1t&lt;/code&gt; won&amp;rsquo;t.</source>
          <target state="translated">이 템플릿 태그는 &lt;code&gt;http://&lt;/code&gt; , &lt;code&gt;https://&lt;/code&gt; 또는 &lt;code&gt;www.&lt;/code&gt; 시작하는 링크에서 작동합니다 . . 예를 들어 &lt;code&gt;https://goo.gl/aia1t&lt;/code&gt; 는 변환되지만 &lt;code&gt;goo.gl/aia1t&lt;/code&gt; 는 변환 되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="7faf4ae6d1b4633ce9aebae7fcb01f9d0252391f" translate="yes" xml:space="preserve">
          <source>This template will be rendered against a context containing a variable called &lt;code&gt;object_list&lt;/code&gt; that contains all the publisher objects. A template might look like this:</source>
          <target state="translated">이 템플릿은 모든 게시자 개체를 포함하는 &lt;code&gt;object_list&lt;/code&gt; 라는 변수가 포함 된 컨텍스트에 대해 렌더링 됩니다. 템플릿은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="e03a946ab4019a96b9a4438a09c3244280241fa5" translate="yes" xml:space="preserve">
          <source>This template, which we&amp;rsquo;ll call &lt;code&gt;base.html&lt;/code&gt;, defines an HTML skeleton document that you might use for a two-column page. It&amp;rsquo;s the job of &amp;ldquo;child&amp;rdquo; templates to fill the empty blocks with content.</source>
          <target state="translated">&lt;code&gt;base.html&lt;/code&gt; 이라고하는이 템플릿 은 2 열 페이지에 사용할 HTML 스켈레톤 문서를 정의합니다. 빈 블록을 내용으로 채우는 것은&amp;ldquo;자식&amp;rdquo;템플릿의 작업입니다.</target>
        </trans-unit>
        <trans-unit id="10a7004cbd713ebf840e7fb59b18e08d70b0027b" translate="yes" xml:space="preserve">
          <source>This test case will flush the &lt;code&gt;default&lt;/code&gt; and &lt;code&gt;other&lt;/code&gt; test databases before running &lt;code&gt;test_index_page_view&lt;/code&gt;. You can also use &lt;code&gt;'__all__'&lt;/code&gt; to specify that all of the test databases must be flushed.</source>
          <target state="translated">이 테스트 사례는 &lt;code&gt;test_index_page_view&lt;/code&gt; 를 실행하기 전에 &lt;code&gt;default&lt;/code&gt; 및 &lt;code&gt;other&lt;/code&gt; 테스트 데이터베이스를 플러시합니다 . &lt;code&gt;'__all__'&lt;/code&gt; 을 사용하여 모든 테스트 데이터베이스를 플러시하도록 지정할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="57836182add09cdff8a2751fef476413d86fdf45" translate="yes" xml:space="preserve">
          <source>This test checks that the &lt;code&gt;make_toast()&lt;/code&gt; returns &lt;code&gt;'toast'&lt;/code&gt;.</source>
          <target state="translated">이 테스트는 &lt;code&gt;make_toast()&lt;/code&gt; 가 &lt;code&gt;'toast'&lt;/code&gt; 를 반환 하는지 확인합니다 .</target>
        </trans-unit>
        <trans-unit id="28584df05b5dfa9b9ec526baff2aaa227a5e76bc" translate="yes" xml:space="preserve">
          <source>This test will only allow queries against the &lt;code&gt;other&lt;/code&gt; database. Just like for &lt;a href=&quot;#django.test.SimpleTestCase.databases&quot;&gt;&lt;code&gt;SimpleTestCase.databases&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#django.test.TransactionTestCase.databases&quot;&gt;&lt;code&gt;TransactionTestCase.databases&lt;/code&gt;&lt;/a&gt;, the &lt;code&gt;'__all__'&lt;/code&gt; constant can be used to specify that the test should allow queries to all databases.</source>
          <target state="translated">이 테스트는 &lt;code&gt;other&lt;/code&gt; 데이터베이스 에 대한 쿼리 만 허용합니다 . 단지에 대한처럼 &lt;a href=&quot;#django.test.SimpleTestCase.databases&quot;&gt; &lt;code&gt;SimpleTestCase.databases&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#django.test.TransactionTestCase.databases&quot;&gt; &lt;code&gt;TransactionTestCase.databases&lt;/code&gt; &lt;/a&gt; 의 &lt;code&gt;'__all__'&lt;/code&gt; 상수는 테스트가 모든 데이터베이스에 쿼리를 허용하도록 지정하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c25bae639c0eb77257c16bd9b49e7eac65766a15" translate="yes" xml:space="preserve">
          <source>This tool runs over all available &lt;code&gt;.po&lt;/code&gt; files and creates &lt;code&gt;.mo&lt;/code&gt; files, which are binary files optimized for use by &lt;code&gt;gettext&lt;/code&gt;. In the same directory from which you ran &lt;a href=&quot;../../ref/django-admin#django-admin-makemessages&quot;&gt;&lt;code&gt;django-admin makemessages&lt;/code&gt;&lt;/a&gt;, run &lt;a href=&quot;../../ref/django-admin#django-admin-compilemessages&quot;&gt;&lt;code&gt;django-admin compilemessages&lt;/code&gt;&lt;/a&gt; like this:</source>
          <target state="translated">이 도구는 사용 가능한 모든 &lt;code&gt;.po&lt;/code&gt; 파일에서 실행 되며 &lt;code&gt;gettext&lt;/code&gt; 에서 사용하도록 최적화 된 이진 파일 인 &lt;code&gt;.mo&lt;/code&gt; 파일을 만듭니다 . 당신이 실행 된 동일한 디렉토리에서 &lt;a href=&quot;../../ref/django-admin#django-admin-makemessages&quot;&gt; &lt;code&gt;django-admin makemessages&lt;/code&gt; &lt;/a&gt; 실행 &lt;a href=&quot;../../ref/django-admin#django-admin-compilemessages&quot;&gt; &lt;code&gt;django-admin compilemessages&lt;/code&gt; &lt;/a&gt; 같은를 :</target>
        </trans-unit>
        <trans-unit id="9bd84b8ba7488013bcfe113468696acd31ef9d9a" translate="yes" xml:space="preserve">
          <source>This topic guide describes Django&amp;rsquo;s support for interacting with multiple databases. Most of the rest of Django&amp;rsquo;s documentation assumes you are interacting with a single database. If you want to interact with multiple databases, you&amp;rsquo;ll need to take some additional steps.</source>
          <target state="translated">이 주제 안내서는 여러 데이터베이스와의 상호 작용을위한 Django의 지원에 대해 설명합니다. Django의 나머지 문서 대부분은 단일 데이터베이스와 상호 작용한다고 가정합니다. 여러 데이터베이스와 상호 작용하려면 몇 가지 추가 단계를 수행해야합니다.</target>
        </trans-unit>
        <trans-unit id="02e1962e8e66df3ea8af2f6adfe80fde3a7c069f" translate="yes" xml:space="preserve">
          <source>This transforms the field on the model from the old field to the new one. This includes changing the name of the column (the &lt;a href=&quot;models/fields#django.db.models.Field.db_column&quot;&gt;&lt;code&gt;db_column&lt;/code&gt;&lt;/a&gt; attribute), changing the type of the field (if the field class changes), changing the &lt;code&gt;NULL&lt;/code&gt; status of the field, adding or removing field-only unique constraints and indexes, changing primary key, and changing the destination of &lt;code&gt;ForeignKey&lt;/code&gt; constraints.</source>
          <target state="translated">모델의 필드를 이전 필드에서 새 필드로 변환합니다. 여기에는 열 이름 변경 ( &lt;a href=&quot;models/fields#django.db.models.Field.db_column&quot;&gt; &lt;code&gt;db_column&lt;/code&gt; &lt;/a&gt; 속성), 필드 유형 변경 (필드 클래스가 변경되는 경우), 필드의 &lt;code&gt;NULL&lt;/code&gt; 상태 변경, 필드 전용 고유 제한 조건 및 색인 추가 또는 제거, 기본 키 변경이 포함됩니다. 및 &lt;code&gt;ForeignKey&lt;/code&gt; 제약 조건 의 대상 변경</target>
        </trans-unit>
        <trans-unit id="a81fc6ccf0b6aa634ef44e4b747b28b9d01812b2" translate="yes" xml:space="preserve">
          <source>This tutorial assumes familiarity with Django; thus, if you&amp;rsquo;re brand new to Django, please read through the &lt;a href=&quot;../../../intro/tutorial01&quot;&gt;regular tutorial&lt;/a&gt; to familiarize yourself with Django first.</source>
          <target state="translated">이 튜토리얼은 Django에 익숙하다고 가정합니다. 따라서 Django를 처음 사용하는 사람이라면 Django 에 익숙해지기 위해 &lt;a href=&quot;../../../intro/tutorial01&quot;&gt;일반 자습서&lt;/a&gt; 를 읽으십시오 .</target>
        </trans-unit>
        <trans-unit id="635d03962a0ce40653206de9b41e85713f838d6a" translate="yes" xml:space="preserve">
          <source>This tutorial begins where &lt;a href=&quot;tutorial01&quot;&gt;Tutorial 1&lt;/a&gt; left off. We&amp;rsquo;ll setup the database, create your first model, and get a quick introduction to Django&amp;rsquo;s automatically-generated admin site.</source>
          <target state="translated">이 학습서는 &lt;a href=&quot;tutorial01&quot;&gt;학습서 1&lt;/a&gt; 이 중단 된 위치에서 시작 합니다. 데이터베이스를 설정하고 첫 번째 모델을 생성하며 자동으로 생성 된 Django의 관리 사이트에 대해 간략하게 소개합니다.</target>
        </trans-unit>
        <trans-unit id="a725208ca4d7e29c4e0e818d95dcb41ddac42709" translate="yes" xml:space="preserve">
          <source>This tutorial begins where &lt;a href=&quot;tutorial02&quot;&gt;Tutorial 2&lt;/a&gt; left off. We&amp;rsquo;re continuing the Web-poll application and will focus on creating the public interface &amp;ndash; &amp;ldquo;views.&amp;rdquo;</source>
          <target state="translated">이 학습서는 &lt;a href=&quot;tutorial02&quot;&gt;학습서 2&lt;/a&gt; 가 중단 된 위치에서 시작 합니다. 우리는 웹 설문 조사 애플리케이션을 계속 진행하고 있으며 공개 인터페이스 (&amp;ldquo;보기&amp;rdquo;)를 만드는 데 중점을 둘 것입니다.</target>
        </trans-unit>
        <trans-unit id="c657556b72883eb8d6aad6c12a99bc972776cc6d" translate="yes" xml:space="preserve">
          <source>This tutorial begins where &lt;a href=&quot;tutorial03&quot;&gt;Tutorial 3&lt;/a&gt; left off. We&amp;rsquo;re continuing the Web-poll application and will focus on form processing and cutting down our code.</source>
          <target state="translated">이 튜토리얼은 &lt;a href=&quot;tutorial03&quot;&gt;Tutorial 3&lt;/a&gt; 이 중단 된 곳에서 시작 합니다. 우리는 웹 설문 조사 애플리케이션을 계속 진행하고 있으며 양식 처리 및 코드 축소에 중점을 둘 것입니다.</target>
        </trans-unit>
        <trans-unit id="679c525673fbf1eec8a4c9848c2d30834435dfe8" translate="yes" xml:space="preserve">
          <source>This tutorial begins where &lt;a href=&quot;tutorial04&quot;&gt;Tutorial 4&lt;/a&gt; left off. We&amp;rsquo;ve built a Web-poll application, and we&amp;rsquo;ll now create some automated tests for it.</source>
          <target state="translated">이 학습서는 &lt;a href=&quot;tutorial04&quot;&gt;학습서 4&lt;/a&gt; 가 중단 된 위치에서 시작 합니다. 우리는 웹 설문 애플리케이션을 구축했으며 이제는 자동 테스트를 작성합니다.</target>
        </trans-unit>
        <trans-unit id="4240d9a53f83d89d930aa4c992664a03725264df" translate="yes" xml:space="preserve">
          <source>This tutorial begins where &lt;a href=&quot;tutorial05&quot;&gt;Tutorial 5&lt;/a&gt; left off. We&amp;rsquo;ve built a tested Web-poll application, and we&amp;rsquo;ll now add a stylesheet and an image.</source>
          <target state="translated">이 튜토리얼은 &lt;a href=&quot;tutorial05&quot;&gt;Tutorial 5&lt;/a&gt; 가 중단 된 곳에서 시작 합니다. 테스트 된 웹 설문 조사 응용 프로그램을 작성했으며 이제 스타일 시트와 이미지를 추가합니다.</target>
        </trans-unit>
        <trans-unit id="4abf081255253fb57dd1de1687dfbb281040ca49" translate="yes" xml:space="preserve">
          <source>This tutorial begins where &lt;a href=&quot;tutorial06&quot;&gt;Tutorial 6&lt;/a&gt; left off. We&amp;rsquo;re continuing the Web-poll application and will focus on customizing Django&amp;rsquo;s automatically-generated admin site that we first explored in &lt;a href=&quot;tutorial02&quot;&gt;Tutorial 2&lt;/a&gt;.</source>
          <target state="translated">이 튜토리얼은 &lt;a href=&quot;tutorial06&quot;&gt;Tutorial 6&lt;/a&gt; 이 중단 된 곳에서 시작 합니다. 우리는 웹 설문 조사 애플리케이션을 계속 진행하고 있으며 &lt;a href=&quot;tutorial02&quot;&gt;튜토리얼 2&lt;/a&gt; 에서 처음 살펴본 Django의 자동 생성 관리 사이트 사용자 정의에 중점을 둘 것 입니다.</target>
        </trans-unit>
        <trans-unit id="eeaec0a433b8c3d10ff804b7b3b90d1ae2137985" translate="yes" xml:space="preserve">
          <source>This tutorial is written for Django 3.0, which supports Python 3.6 and later. If the Django version doesn&amp;rsquo;t match, you can refer to the tutorial for your version of Django by using the version switcher at the bottom right corner of this page, or update Django to the newest version. If you&amp;rsquo;re using an older version of Python, check &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/faq/install/#faq-python-version-support&quot;&gt;What Python version can I use with Django?&lt;/a&gt; to find a compatible version of Django.</source>
          <target state="translated">이 튜토리얼은 Python 3.6 이상을 지원하는 Django 3.0 용으로 작성되었습니다. Django 버전이 일치하지 않으면이 페이지의 오른쪽 하단 모서리에있는 버전 전환기를 사용하여 Django 버전에 대한 자습서를 참조하거나 Django를 최신 버전으로 업데이트 할 수 있습니다. 이전 버전의 Python을 &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/faq/install/#faq-python-version-support&quot;&gt;사용하는 경우 Django와 함께 사용할 수있는 Python 버전은 무엇입니까?를&lt;/a&gt; 확인하십시오 . Django의 호환 버전을 찾으십시오.</target>
        </trans-unit>
        <trans-unit id="84298b351d5fcca3a05acb3f79b17c235ef787d2" translate="yes" xml:space="preserve">
          <source>This tutorial only introduces some of the basics of testing. There&amp;rsquo;s a great deal more you can do, and a number of very useful tools at your disposal to achieve some very clever things.</source>
          <target state="translated">이 튜토리얼에서는 몇 가지 기본 테스트 방법 만 소개합니다. 훨씬 더 많은 일을 할 수 있으며, 매우 영리한 일을 달성하기 위해 많은 유용한 도구를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="18112ab4065d3c3930428aa29839b531778d9529" translate="yes" xml:space="preserve">
          <source>This tutorial provides basic instruction in the use of URLconfs, and you can refer to &lt;a href=&quot;../topics/http/urls&quot;&gt;URL dispatcher&lt;/a&gt; for more information.</source>
          <target state="translated">이 자습서는 URLconf 사용에 대한 기본 지침을 제공 하며 자세한 내용 은 &lt;a href=&quot;../topics/http/urls&quot;&gt;URL 디스패처&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="40f6d1fb458c318c3d1cb97191b62d5662936bd5" translate="yes" xml:space="preserve">
          <source>This tutorial will guide you through the creation of a geographic web application for viewing the &lt;a href=&quot;https://thematicmapping.org/downloads/world_borders.php&quot;&gt;world borders&lt;/a&gt;. &lt;a href=&quot;#id11&quot; id=&quot;id1&quot;&gt;[1]&lt;/a&gt; Some of the code used in this tutorial is taken from and/or inspired by the &lt;a href=&quot;https://code.google.com/p/geodjango-basic-apps/&quot;&gt;GeoDjango basic apps&lt;/a&gt; project. &lt;a href=&quot;#id12&quot; id=&quot;id2&quot;&gt;[2]&lt;/a&gt;</source>
          <target state="translated">이 자습서는 &lt;a href=&quot;https://thematicmapping.org/downloads/world_borders.php&quot;&gt;세계 경계&lt;/a&gt; 를보기위한 지리적 웹 응용 프로그램을 만드는 과정을 안내합니다 . &lt;a href=&quot;#id11&quot; id=&quot;id1&quot;&gt;[1]&lt;/a&gt; 이 튜토리얼에서 사용 된 일부 코드는 &lt;a href=&quot;https://code.google.com/p/geodjango-basic-apps/&quot;&gt;GeoDjango 기본 앱&lt;/a&gt; 프로젝트 에서 가져온 것 입니다. &lt;a href=&quot;#id12&quot; id=&quot;id2&quot;&gt;[2]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1e728603ca63fa37f42229adece12781b4568610" translate="yes" xml:space="preserve">
          <source>This unittest TestCase subclass extends &lt;a href=&quot;../../topics/testing/tools#django.test.LiveServerTestCase&quot;&gt;&lt;code&gt;django.test.LiveServerTestCase&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 unittest TestCase 서브 클래스는 &lt;a href=&quot;../../topics/testing/tools#django.test.LiveServerTestCase&quot;&gt; &lt;code&gt;django.test.LiveServerTestCase&lt;/code&gt; 를&lt;/a&gt; 확장 합니다 .</target>
        </trans-unit>
        <trans-unit id="7f89cbb6d7e72071eee65e8088e54a2d305497af" translate="yes" xml:space="preserve">
          <source>This usage isn&amp;rsquo;t particularly recommended as it makes it easier to accidentally introduce errors between the intended meaning of a match and the arguments of the view.</source>
          <target state="translated">이 사용법은 의도 된 일치의 의미와 뷰의 인수 사이에 실수로 오류를 쉽게 도입 할 수 있으므로 특히 권장되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="4db3af690dc1ef929db39639e9448e89bde17c7f" translate="yes" xml:space="preserve">
          <source>This uses reverse URL lookup to find the URL of the JavaScript catalog view. When the catalog is loaded, your JavaScript code can use the following methods:</source>
          <target state="translated">리버스 URL 조회를 사용하여 JavaScript 카탈로그 뷰의 URL을 찾습니다. 카탈로그가로드되면 JavaScript 코드는 다음 방법을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1b6575ff382ac55eb3efe3ab3b0f7132aac769e5" translate="yes" xml:space="preserve">
          <source>This uses the &lt;code&gt;HttpRequest&lt;/code&gt; instance to filter the &lt;code&gt;Car&lt;/code&gt; foreign key field to only display the cars owned by the &lt;code&gt;User&lt;/code&gt; instance.</source>
          <target state="translated">&lt;code&gt;HttpRequest&lt;/code&gt; 인스턴스를 사용하여 &lt;code&gt;Car&lt;/code&gt; 외부 키 필드 를 필터링 하여 &lt;code&gt;User&lt;/code&gt; 인스턴스가 소유 한 자동차 만 표시합니다 .</target>
        </trans-unit>
        <trans-unit id="2c3e155dac7311fa6b9e5cbd38a172e1008b0b30" translate="yes" xml:space="preserve">
          <source>This utility grew out of the author&amp;rsquo;s personal needs to eliminate the code repetition that went into pulling geometries and fields out of a vector layer, converting to another coordinate system (e.g. WGS84), and then inserting into a GeoDjango model.</source>
          <target state="translated">이 유틸리티는 벡터 레이어에서 지오메트리와 필드를 가져 와서 다른 좌표계 (예 : WGS84)로 변환 한 다음 GeoDjango 모델에 삽입하는 데 필요한 코드 반복을 제거하기 위해 필자의 개인적 요구에서 자랐습니다.</target>
        </trans-unit>
        <trans-unit id="223a1fff204831fb0ea255c4070f8c9c155b63b3" translate="yes" xml:space="preserve">
          <source>This validation only applies via &lt;a href=&quot;../ref/request-response#django.http.HttpRequest.get_host&quot;&gt;&lt;code&gt;get_host()&lt;/code&gt;&lt;/a&gt;; if your code accesses the &lt;code&gt;Host&lt;/code&gt; header directly from &lt;code&gt;request.META&lt;/code&gt; you are bypassing this security protection.</source>
          <target state="translated">이 검증은 &lt;a href=&quot;../ref/request-response#django.http.HttpRequest.get_host&quot;&gt; &lt;code&gt;get_host()&lt;/code&gt; &lt;/a&gt; 를 통해서만 적용됩니다 . 코드 가 &lt;code&gt;request.META&lt;/code&gt; 에서 직접 &lt;code&gt;Host&lt;/code&gt; 헤더에 액세스하는 경우이 보안 보호를 무시합니다.</target>
        </trans-unit>
        <trans-unit id="12eec4374146bd3a116fcccc0141201fa5458a5e" translate="yes" xml:space="preserve">
          <source>This validation only applies via &lt;a href=&quot;request-response#django.http.HttpRequest.get_host&quot;&gt;&lt;code&gt;get_host()&lt;/code&gt;&lt;/a&gt;; if your code accesses the &lt;code&gt;Host&lt;/code&gt; header directly from &lt;code&gt;request.META&lt;/code&gt; you are bypassing this security protection.</source>
          <target state="translated">이 검증은 &lt;a href=&quot;request-response#django.http.HttpRequest.get_host&quot;&gt; &lt;code&gt;get_host()&lt;/code&gt; &lt;/a&gt; 를 통해서만 적용됩니다 . 코드 가 &lt;code&gt;request.META&lt;/code&gt; 에서 직접 &lt;code&gt;Host&lt;/code&gt; 헤더에 액세스하는 경우이 보안 보호를 무시합니다.</target>
        </trans-unit>
        <trans-unit id="519fb4aa21b9376da28f08043300ac3929e3b00b" translate="yes" xml:space="preserve">
          <source>This value can be either a boolean flag or a callable. If &lt;code&gt;True&lt;/code&gt; (the default), the object&amp;rsquo;s &lt;a href=&quot;../../models/instances#django.db.models.Model.get_absolute_url&quot;&gt;&lt;code&gt;get_absolute_url()&lt;/code&gt;&lt;/a&gt; method will be used to generate the url.</source>
          <target state="translated">이 값은 부울 플래그 또는 호출 가능일 수 있습니다. 경우 &lt;code&gt;True&lt;/code&gt; (기본), 객체의 &lt;a href=&quot;../../models/instances#django.db.models.Model.get_absolute_url&quot;&gt; &lt;code&gt;get_absolute_url()&lt;/code&gt; &lt;/a&gt; 메소드는 URL을 생성하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="65b632e840aaa30faaa98e4d296102660ab24f88" translate="yes" xml:space="preserve">
          <source>This value mirrors the functionality and caveats of the &lt;a href=&quot;#std:setting-FILE_UPLOAD_PERMISSIONS&quot;&gt;&lt;code&gt;FILE_UPLOAD_PERMISSIONS&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">이 값은 &lt;a href=&quot;#std:setting-FILE_UPLOAD_PERMISSIONS&quot;&gt; &lt;code&gt;FILE_UPLOAD_PERMISSIONS&lt;/code&gt; &lt;/a&gt; 설정 의 기능과 경고를 반영 합니다.</target>
        </trans-unit>
        <trans-unit id="9663cd15b0f9cb1004708efb7c0550a67935e92e" translate="yes" xml:space="preserve">
          <source>This view can then be deployed in the same way as any other &lt;a href=&quot;../../ref/class-based-views/generic-display#django.views.generic.detail.DetailView&quot;&gt;&lt;code&gt;DetailView&lt;/code&gt;&lt;/a&gt;, with exactly the same behavior &amp;ndash; except for the format of the response.</source>
          <target state="translated">이 뷰는 응답 형식을 제외하고는 정확히 동일한 동작으로 다른 &lt;a href=&quot;../../ref/class-based-views/generic-display#django.views.generic.detail.DetailView&quot;&gt; &lt;code&gt;DetailView&lt;/code&gt; &lt;/a&gt; 와 동일한 방식으로 배포 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="b82b91a055a2c315d31650406c0022f66a3d37e0" translate="yes" xml:space="preserve">
          <source>This view function serves static files in development.</source>
          <target state="translated">이 뷰 함수는 개발중인 정적 파일을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="b877b900aa462fd0b4f0c239fe840fcf92cd92c4" translate="yes" xml:space="preserve">
          <source>This view inherits methods and attributes from the following view:</source>
          <target state="translated">이보기는 다음보기에서 메소드 및 속성을 상속합니다.</target>
        </trans-unit>
        <trans-unit id="143586bf42dc21aceee643ea32b145199654cc62" translate="yes" xml:space="preserve">
          <source>This view inherits methods and attributes from the following views:</source>
          <target state="translated">이보기는 다음보기에서 메소드 및 속성을 상속합니다.</target>
        </trans-unit>
        <trans-unit id="34f24476fa666fb3cf65650519e6c9399b87159f" translate="yes" xml:space="preserve">
          <source>This view is automatically enabled by &lt;a href=&quot;../django-admin#django-admin-runserver&quot;&gt;&lt;code&gt;runserver&lt;/code&gt;&lt;/a&gt; (with a &lt;a href=&quot;../settings#std:setting-DEBUG&quot;&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;/a&gt; setting set to &lt;code&gt;True&lt;/code&gt;). To use the view with a different local development server, add the following snippet to the end of your primary URL configuration:</source>
          <target state="translated">이보기는 &lt;a href=&quot;../django-admin#django-admin-runserver&quot;&gt; &lt;code&gt;runserver&lt;/code&gt; 에&lt;/a&gt; 의해 자동으로 활성화됩니다 ( &lt;a href=&quot;../settings#std:setting-DEBUG&quot;&gt; &lt;code&gt;DEBUG&lt;/code&gt; &lt;/a&gt; 설정이 &lt;code&gt;True&lt;/code&gt; 로 설정 됨 ). 다른 로컬 개발 서버에서보기를 사용하려면 기본 URL 구성 끝에 다음 스 니펫을 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="016660ffdac25e641e7e3ab1bd4ea7fe4135c0ef" translate="yes" xml:space="preserve">
          <source>This view loads and renders the template &lt;code&gt;403.html&lt;/code&gt; in your root template directory, or if this file does not exist, instead serves the text &amp;ldquo;403 Forbidden&amp;rdquo;, as per &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html#section-6.5.3&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;RFC 7231#section-6.5.3&lt;/strong&gt;&lt;/a&gt; (the HTTP 1.1 Specification). The template context contains &lt;code&gt;exception&lt;/code&gt;, which is the string representation of the exception that triggered the view.</source>
          <target state="translated">이 뷰 는 루트 템플릿 디렉토리에 템플릿 &lt;code&gt;403.html&lt;/code&gt; 을 로드하고 렌더링 하거나이 파일이 존재하지 않으면 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html#section-6.5.3&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;RFC 7231 # section-6.5.3&lt;/strong&gt;&lt;/a&gt; (HTTP 1.1 사양)에 따라&amp;ldquo;403 Forbidden&amp;rdquo;이라는 텍스트를 대신 제공합니다 . 템플릿 컨텍스트가 포함 &lt;code&gt;exception&lt;/code&gt; 보기를 트리거 한 예외의 캐릭터 라인 표현입니다.</target>
        </trans-unit>
        <trans-unit id="73d4ad5785f98701dff20c85a13b697075efe157" translate="yes" xml:space="preserve">
          <source>This view uses by default the same template as the &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#DayArchiveView&quot;&gt;&lt;code&gt;DayArchiveView&lt;/code&gt;&lt;/a&gt;, which is in the previous example. If you need a different template, set the &lt;code&gt;template_name&lt;/code&gt; attribute to be the name of the new template.</source>
          <target state="translated">이보기는 기본적으로 이전 예제에있는 &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#DayArchiveView&quot;&gt; &lt;code&gt;DayArchiveView&lt;/code&gt; &lt;/a&gt; 와 동일한 템플리트를 사용합니다 . 다른 템플리트가 필요한 경우 &lt;code&gt;template_name&lt;/code&gt; 속성을 새 템플리트의 이름으로 설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="7213c677560a9fa9a4ac052b037f6fc48838a29c" translate="yes" xml:space="preserve">
          <source>This view will only work if &lt;a href=&quot;../settings#std:setting-DEBUG&quot;&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">이 뷰는 &lt;a href=&quot;../settings#std:setting-DEBUG&quot;&gt; &lt;code&gt;DEBUG&lt;/code&gt; &lt;/a&gt; 가 &lt;code&gt;True&lt;/code&gt; 인 경우에만 작동합니다 .</target>
        </trans-unit>
        <trans-unit id="9105d1655be2ddfce1a3395d72e4093b5625a659" translate="yes" xml:space="preserve">
          <source>This warning doesn&amp;rsquo;t apply to &lt;code&gt;RemoteUserMiddleware&lt;/code&gt; in its default configuration with &lt;code&gt;header = 'REMOTE_USER'&lt;/code&gt;, since a key that doesn&amp;rsquo;t start with &lt;code&gt;HTTP_&lt;/code&gt; in &lt;code&gt;request.META&lt;/code&gt; can only be set by your WSGI server, not directly from an HTTP request header.</source>
          <target state="translated">&lt;code&gt;request.META&lt;/code&gt; 에서 &lt;code&gt;HTTP_&lt;/code&gt; 로 시작하지 않는 키 는 HTTP 요청 헤더에서 직접 설정할 수 없으며 WSGI 서버에서만 설정할 수 &lt;code&gt;RemoteUserMiddleware&lt;/code&gt; 경고는 &lt;code&gt;header = 'REMOTE_USER'&lt;/code&gt; 인 기본 구성의 RemoteUserMiddleware 에는 적용 되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="7999650e7e3761f1a4d6b5114cb3dcb2c73ab411" translate="yes" xml:space="preserve">
          <source>This way, you can write applications that include their own translations, and you can override base translations in your project. Or, you can build a big project out of several apps and put all translations into one big common message file specific to the project you are composing. The choice is yours.</source>
          <target state="translated">이렇게하면 자체 번역이 포함 된 응용 프로그램을 작성할 수 있으며 프로젝트의 기본 번역을 재정의 할 수 있습니다. 또는 여러 앱에서 큰 프로젝트를 빌드하고 작성중인 프로젝트에 특정한 하나의 큰 공통 메시지 파일로 모든 번역을 넣을 수 있습니다. 선택은 당신입니다.</target>
        </trans-unit>
        <trans-unit id="0b3739ab965f09a407edb58939c8f42e88b1f64f" translate="yes" xml:space="preserve">
          <source>This way, you&amp;rsquo;ll be able to pass, say, an integer to this filter, and it won&amp;rsquo;t cause an &lt;code&gt;AttributeError&lt;/code&gt; (because integers don&amp;rsquo;t have &lt;code&gt;lower()&lt;/code&gt; methods).</source>
          <target state="translated">이렇게하면이 필터에 정수를 전달할 수 있으며 &lt;code&gt;AttributeError&lt;/code&gt; 가 발생 하지 않습니다 (정수에는 &lt;code&gt;lower()&lt;/code&gt; 메서드 가 없기 때문에 ).</target>
        </trans-unit>
        <trans-unit id="f1e9bdcf252e759f216585170e3a7579d3a17b08" translate="yes" xml:space="preserve">
          <source>This widget uses an OpenStreetMap base layer to display geographic objects on. Attributes are:</source>
          <target state="translated">이 위젯은 OpenStreetMap 기본 레이어를 사용하여 지리적 객체를 표시합니다. 속성은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="e85f8c3200ce73681068479a6d6f370398f20f06" translate="yes" xml:space="preserve">
          <source>This will automatically generate a &lt;code&gt;sitemap.xml&lt;/code&gt; file that references both &lt;code&gt;sitemap-flatpages.xml&lt;/code&gt; and &lt;code&gt;sitemap-blog.xml&lt;/code&gt;. The &lt;a href=&quot;#django.contrib.sitemaps.Sitemap&quot;&gt;&lt;code&gt;Sitemap&lt;/code&gt;&lt;/a&gt; classes and the &lt;code&gt;sitemaps&lt;/code&gt; dict don&amp;rsquo;t change at all.</source>
          <target state="translated">&lt;code&gt;sitemap-flatpages.xml&lt;/code&gt; 및 &lt;code&gt;sitemap-blog.xml&lt;/code&gt; 을 모두 참조 하는 &lt;code&gt;sitemap.xml&lt;/code&gt; 파일 이 자동으로 생성됩니다 . &lt;a href=&quot;#django.contrib.sitemaps.Sitemap&quot;&gt; &lt;code&gt;Sitemap&lt;/code&gt; &lt;/a&gt; 클래스와 &lt;code&gt;sitemaps&lt;/code&gt; 전혀 변경되지 않습니다 DICT.</target>
        </trans-unit>
        <trans-unit id="7b9e619492f567ed0edb127d8611a4bd8b287b73" translate="yes" xml:space="preserve">
          <source>This will be used as the root URLconf for the current request, overriding the &lt;a href=&quot;settings#std:setting-ROOT_URLCONF&quot;&gt;&lt;code&gt;ROOT_URLCONF&lt;/code&gt;&lt;/a&gt; setting. See &lt;a href=&quot;../topics/http/urls#how-django-processes-a-request&quot;&gt;How Django processes a request&lt;/a&gt; for details.</source>
          <target state="translated">현재 요청에 대한 루트 URLconf로 사용되어 &lt;a href=&quot;settings#std:setting-ROOT_URLCONF&quot;&gt; &lt;code&gt;ROOT_URLCONF&lt;/code&gt; &lt;/a&gt; 설정을 재정의합니다 . 자세한 내용은 &lt;a href=&quot;../topics/http/urls#how-django-processes-a-request&quot;&gt;Django가 요청&lt;/a&gt; 을 처리하는 방법 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="3298d4536943a07b2e2ff0a080a8256216828e18" translate="yes" xml:space="preserve">
          <source>This will call it:</source>
          <target state="translated">이것을 호출합니다 :</target>
        </trans-unit>
        <trans-unit id="b994950f699945bb14a5d540ae7c274833931bf9" translate="yes" xml:space="preserve">
          <source>This will copy all files from your static folders into the &lt;a href=&quot;../../ref/settings#std:setting-STATIC_ROOT&quot;&gt;&lt;code&gt;STATIC_ROOT&lt;/code&gt;&lt;/a&gt; directory.</source>
          <target state="translated">정적 폴더의 모든 파일이 &lt;a href=&quot;../../ref/settings#std:setting-STATIC_ROOT&quot;&gt; &lt;code&gt;STATIC_ROOT&lt;/code&gt; &lt;/a&gt; 디렉토리 로 복사됩니다 .</target>
        </trans-unit>
        <trans-unit id="6d2bfdd14c9503852609f39016cbc2f4f7ed8e88" translate="yes" xml:space="preserve">
          <source>This will create a &lt;code&gt;mysite&lt;/code&gt; directory in your current directory. If it didn&amp;rsquo;t work, see &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/faq/troubleshooting/#troubleshooting-django-admin&quot;&gt;Problems running django-admin&lt;/a&gt;.</source>
          <target state="translated">현재 디렉토리에 &lt;code&gt;mysite&lt;/code&gt; 디렉토리 가 생성됩니다 . 작동하지 않으면 &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/faq/troubleshooting/#troubleshooting-django-admin&quot;&gt;django-admin 실행 문제를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="e71b79c71685cecb4708981aee7d48d144343a03" translate="yes" xml:space="preserve">
          <source>This will create a directory &lt;code&gt;django&lt;/code&gt; in your current directory.</source>
          <target state="translated">현재 디렉토리에 &lt;code&gt;django&lt;/code&gt; 디렉토리가 생성됩니다 .</target>
        </trans-unit>
        <trans-unit id="32a631f2cd61479ee712e1cd927616974bd5c495" translate="yes" xml:space="preserve">
          <source>This will create a formset that is capable of working with the data associated with the &lt;code&gt;Author&lt;/code&gt; model. It works just like a regular formset:</source>
          <target state="translated">그러면 &lt;code&gt;Author&lt;/code&gt; 모델 과 연관된 데이터로 작업 할 수있는 양식 세트가 작성됩니다 . 일반 폼셋처럼 작동합니다.</target>
        </trans-unit>
        <trans-unit id="2ee69ae908e14090bc160ca188cd447bf32b8bf2" translate="yes" xml:space="preserve">
          <source>This will download and install the latest Django release.</source>
          <target state="translated">최신 Django 릴리스가 다운로드되어 설치됩니다.</target>
        </trans-unit>
        <trans-unit id="461ff15ba8c29ef0a66607efbda8954c9c1422e6" translate="yes" xml:space="preserve">
          <source>This will enable an API similar to the one used for a normal &lt;a href=&quot;../models/fields#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;ForeignKey&lt;/code&gt;&lt;/a&gt;; each &lt;code&gt;TaggedItem&lt;/code&gt; will have a &lt;code&gt;content_object&lt;/code&gt; field that returns the object it&amp;rsquo;s related to, and you can also assign to that field or use it when creating a &lt;code&gt;TaggedItem&lt;/code&gt;:</source>
          <target state="translated">이것은 일반 &lt;a href=&quot;../models/fields#django.db.models.ForeignKey&quot;&gt; &lt;code&gt;ForeignKey&lt;/code&gt; 에&lt;/a&gt; 사용 된 것과 유사한 API를 활성화합니다 . 각 &lt;code&gt;TaggedItem&lt;/code&gt; 에는 관련 객체를 반환 하는 &lt;code&gt;content_object&lt;/code&gt; 필드 가 있으며 해당 필드에 할당하거나 &lt;code&gt;TaggedItem&lt;/code&gt; 생성시 사용할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="139faa2b6fd4c35d739e6f2ff8c1c57e8a05676a" translate="yes" xml:space="preserve">
          <source>This will ensure that the person named &lt;code&gt;Fred&lt;/code&gt; will have the same primary key on both databases. If that primary key is already in use when you try to save onto the &lt;code&gt;second&lt;/code&gt; database, an error will be raised.</source>
          <target state="translated">이렇게하면 &lt;code&gt;Fred&lt;/code&gt; 라는 사람이 두 데이터베이스에서 동일한 기본 키를 갖게됩니다. &lt;code&gt;second&lt;/code&gt; 데이터베이스 에 저장하려고 할 때 기본 키가 이미 사용 중이면 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="1006c55fbf2688f814e4003d4620176646f333b1" translate="yes" xml:space="preserve">
          <source>This will ensure that the subquery will not be added to the &lt;code&gt;SELECT&lt;/code&gt; columns, which may result in a better performance.</source>
          <target state="translated">이렇게하면 하위 쿼리가 &lt;code&gt;SELECT&lt;/code&gt; 열에 추가되지 않아 성능이 향상 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4ad711bd97176f8b12ec80a064bcdd27869425f3" translate="yes" xml:space="preserve">
          <source>This will fetch the best pizza and all the toppings for the best pizza for each restaurant. This will be done in 3 database queries - one for the restaurants, one for the &amp;lsquo;best pizzas&amp;rsquo;, and one for the toppings.</source>
          <target state="translated">이것은 각 레스토랑마다 최고의 피자와 최고의 피자를위한 모든 토핑을 가져옵니다. 이는 3 개의 데이터베이스 쿼리 (레스토랑, '최고의 피자'및 토핑)에서 수행됩니다.</target>
        </trans-unit>
        <trans-unit id="2dcfb1272c40482fab98fb5c309ad204426ae717" translate="yes" xml:space="preserve">
          <source>This will find the first registered instance of the admin application (whatever the instance name), and resolve to the view for changing &lt;code&gt;poll.Choice&lt;/code&gt; instances in that instance.</source>
          <target state="translated">그러면 관리 응용 프로그램의 첫 번째 등록 된 인스턴스 (인스턴스 이름이 무엇이든)를 &lt;code&gt;poll.Choice&lt;/code&gt; 인스턴스에서 poll.Choice 인스턴스 를 변경하기위한보기로 분석됩니다 .</target>
        </trans-unit>
        <trans-unit id="d60d03fd2f5c6b6f5704c71b56528eeae9922d14" translate="yes" xml:space="preserve">
          <source>This will follow the normal &lt;a href=&quot;../../topics/http/urls#topics-http-reversing-url-namespaces&quot;&gt;namespaced URL resolution strategy&lt;/a&gt;, including using any hints provided by the context as to the current application.</source>
          <target state="translated">이는 현재 응용 프로그램에 대해 컨텍스트에서 제공 한 힌트 사용을 포함하여 일반적인 &lt;a href=&quot;../../topics/http/urls#topics-http-reversing-url-namespaces&quot;&gt;네임 스페이스 화 된 URL 확인 전략&lt;/a&gt; 을 따릅니다 .</target>
        </trans-unit>
        <trans-unit id="6caa84eea347eae2caf1dcb400646433758f46f9" translate="yes" xml:space="preserve">
          <source>This will include the following URL patterns:</source>
          <target state="translated">여기에는 다음 URL 패턴이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="af37af300ea79f6cd31364e11dda9f0be847e5f6" translate="yes" xml:space="preserve">
          <source>This will include the nominated URL patterns into the given application namespace.</source>
          <target state="translated">여기에는 지정된 응용 프로그램 네임 스페이스에 지정된 URL 패턴이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="a78806b856c974b3e3adfc873945e356ae1911f7" translate="yes" xml:space="preserve">
          <source>This will initialize a new project. Now, create a &lt;code&gt;world&lt;/code&gt; Django application within the &lt;code&gt;geodjango&lt;/code&gt; project:</source>
          <target state="translated">새 프로젝트가 초기화됩니다. 이제 &lt;code&gt;geodjango&lt;/code&gt; 프로젝트 내에 &lt;code&gt;world&lt;/code&gt; Django 애플리케이션을 작성하십시오 .</target>
        </trans-unit>
        <trans-unit id="1db9735b1efc7186a8a636558309ff03be56f285" translate="yes" xml:space="preserve">
          <source>This will inspect your &lt;a href=&quot;../settings#std:setting-STATIC_URL&quot;&gt;&lt;code&gt;STATIC_URL&lt;/code&gt;&lt;/a&gt; setting and wire up the view to serve static files accordingly. Don&amp;rsquo;t forget to set the &lt;a href=&quot;../settings#std:setting-STATICFILES_DIRS&quot;&gt;&lt;code&gt;STATICFILES_DIRS&lt;/code&gt;&lt;/a&gt; setting appropriately to let &lt;code&gt;django.contrib.staticfiles&lt;/code&gt; know where to look for files in addition to files in app directories.</source>
          <target state="translated">&lt;a href=&quot;../settings#std:setting-STATIC_URL&quot;&gt; &lt;code&gt;STATIC_URL&lt;/code&gt; &lt;/a&gt; 설정 을 검사 하고 그에 따라 정적 파일을 제공하도록 뷰를 연결합니다. &lt;code&gt;django.contrib.staticfiles&lt;/code&gt; 가 앱 디렉토리의 파일 외에 파일을 찾을 위치를 알 수 있도록 &lt;a href=&quot;../settings#std:setting-STATICFILES_DIRS&quot;&gt; &lt;code&gt;STATICFILES_DIRS&lt;/code&gt; &lt;/a&gt; 설정을 적절하게 설정하는 것을 잊지 마십시오 .</target>
        </trans-unit>
        <trans-unit id="96311b0a767ce541004083df426ce0a0435e780e" translate="yes" xml:space="preserve">
          <source>This will intelligently populate itself based on available data, e.g. if all the dates are in one month, it&amp;rsquo;ll show the day-level drill-down only.</source>
          <target state="translated">사용 가능한 데이터를 기반으로 지능적으로 채워집니다. 예를 들어 모든 날짜가 한 달 안에 있으면 하루 수준의 드릴 다운 만 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="3ee945ea9648339b1e12f974761058073325f6f3" translate="yes" xml:space="preserve">
          <source>This will make Django&amp;rsquo;s code importable, and will also make the &lt;code&gt;django-admin&lt;/code&gt; utility command available. In other words, you&amp;rsquo;re all set!</source>
          <target state="translated">이렇게하면 Django의 코드를 가져올 수있게되고 &lt;code&gt;django-admin&lt;/code&gt; 유틸리티 명령도 사용할 수있게됩니다. 다시 말해, 모든 준비가 완료된 것입니다!</target>
        </trans-unit>
        <trans-unit id="c574c9b99cd982d5e8d424e42638aac1a86b5fad" translate="yes" xml:space="preserve">
          <source>This will make SQLite wait a bit longer before throwing &amp;ldquo;database is locked&amp;rdquo; errors; it won&amp;rsquo;t really do anything to solve them.</source>
          <target state="translated">이렇게하면 &quot;데이터베이스가 잠겨 있습니다&quot;오류가 발생하기 전에 SQLite가 약간 더 오래 기다립니다. 실제로 해결하기 위해 아무것도하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="45aed5c8cf67a332feaae929b25bca5cb1a178d4" translate="yes" xml:space="preserve">
          <source>This will make a new initial migration for your app. Now, run &lt;code&gt;python
manage.py migrate --fake-initial&lt;/code&gt;, and Django will detect that you have an initial migration &lt;em&gt;and&lt;/em&gt; that the tables it wants to create already exist, and will mark the migration as already applied. (Without the &lt;a href=&quot;../ref/django-admin#cmdoption-migrate-fake-initial&quot;&gt;&lt;code&gt;migrate
--fake-initial&lt;/code&gt;&lt;/a&gt; flag, the command would error out because the tables it wants to create already exist.)</source>
          <target state="translated">앱에 대한 새로운 초기 마이그레이션이 이루어집니다. 이제 &lt;code&gt;python manage.py migrate --fake-initial&lt;/code&gt; 실행 하면 Django는 사용자가 초기 마이그레이션이 &lt;em&gt;있고&lt;/em&gt; 생성하려는 테이블이 이미 존재 함 을 감지 하고 마이그레이션이 이미 적용된 것으로 표시합니다. &lt;a href=&quot;../ref/django-admin#cmdoption-migrate-fake-initial&quot;&gt; &lt;code&gt;migrate --fake-initial&lt;/code&gt; &lt;/a&gt; 플래그가 없으면 작성하려는 테이블이 이미 존재하므로 명령이 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="83128489576e906345d0cfbc62a16a911f531ba3" translate="yes" xml:space="preserve">
          <source>This will now yield one unique result for each author; however, only the author&amp;rsquo;s name and the &lt;code&gt;average_rating&lt;/code&gt; annotation will be returned in the output data.</source>
          <target state="translated">이제 각 저자마다 하나의 고유 한 결과가 나타납니다. 그러나 작성자 이름과 &lt;code&gt;average_rating&lt;/code&gt; 주석 만 출력 데이터에 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="8a4b4f07c609143e874b6ccba24a3916ee42b11a" translate="yes" xml:space="preserve">
          <source>This will output a list of &lt;code&gt;&amp;lt;tr&amp;gt;&lt;/code&gt; elements with &lt;code&gt;class&lt;/code&gt; alternating between &lt;code&gt;row1&lt;/code&gt; and &lt;code&gt;row2&lt;/code&gt;. The subtemplate will have access to &lt;code&gt;rowcolors&lt;/code&gt; in its context and the value will match the class of the &lt;code&gt;&amp;lt;tr&amp;gt;&lt;/code&gt; that encloses it. If the &lt;code&gt;silent&lt;/code&gt; keyword were to be omitted, &lt;code&gt;row1&lt;/code&gt; and &lt;code&gt;row2&lt;/code&gt; would be emitted as normal text, outside the &lt;code&gt;&amp;lt;tr&amp;gt;&lt;/code&gt; element.</source>
          <target state="translated">이것은 &lt;code&gt;row1&lt;/code&gt; 과 &lt;code&gt;row2&lt;/code&gt; 사이 에서 &lt;code&gt;class&lt;/code&gt; 번갈아있는 &lt;code&gt;&amp;lt;tr&amp;gt;&lt;/code&gt; 요소 목록을 출력합니다 . 서브 템플릿은 컨텍스트에서 &lt;code&gt;rowcolors&lt;/code&gt; 에 액세스 할 수 있으며 값은이 를 둘러싸 는 &lt;code&gt;&amp;lt;tr&amp;gt;&lt;/code&gt; 클래스와 일치 합니다. 경우] &lt;code&gt;silent&lt;/code&gt; 키워드를 생략되어야하고, &lt;code&gt;row1&lt;/code&gt; 및 &lt;code&gt;row2&lt;/code&gt; 외부 정상적인 텍스트로 방출 될 &lt;code&gt;&amp;lt;tr&amp;gt;&lt;/code&gt; 엘리먼트.</target>
        </trans-unit>
        <trans-unit id="0b377bfc3702d77892bc7d6caed9fe030cb81ff8" translate="yes" xml:space="preserve">
          <source>This will output all articles.</source>
          <target state="translated">모든 기사가 출력됩니다.</target>
        </trans-unit>
        <trans-unit id="bbb2e8a486cda815a375ec676a9438b740b9e150" translate="yes" xml:space="preserve">
          <source>This will prefetch all pizzas belonging to restaurants, and all toppings belonging to those pizzas. This will result in a total of 3 database queries - one for the restaurants, one for the pizzas, and one for the toppings.</source>
          <target state="translated">그러면 레스토랑에 속한 모든 피자와 해당 피자에 속한 모든 토핑이 프리 페치됩니다. 그 결과 총 3 개의 데이터베이스 쿼리가 발생합니다. 하나는 식당, 하나는 피자, 다른 하나는 토핑입니다.</target>
        </trans-unit>
        <trans-unit id="f840841b76804b33169f586f5500036251c6608f" translate="yes" xml:space="preserve">
          <source>This will raise a &lt;code&gt;ValueError&lt;/code&gt; because of the attempt to redefine the queryset of a previously seen lookup. Note that an implicit queryset was created to traverse &lt;code&gt;'pizzas'&lt;/code&gt; as part of the &lt;code&gt;'pizzas__toppings'&lt;/code&gt; lookup.</source>
          <target state="translated">이것은 올릴 것이다 &lt;code&gt;ValueError&lt;/code&gt; 를을 때문에 이전에 본 검색의 검색어 세트를 다시 정의하려는 시도의. 암시 검색어 세트가 통과 할 작성된 참고 &lt;code&gt;'pizzas'&lt;/code&gt; 의 일부로서 &lt;code&gt;'pizzas__toppings'&lt;/code&gt; 참조.</target>
        </trans-unit>
        <trans-unit id="c8c0a1be55afcefe4d0611877866c73d8841b88e" translate="yes" xml:space="preserve">
          <source>This will return one result for each author in the database, annotated with their average book rating.</source>
          <target state="translated">이렇게하면 데이터베이스의 각 저자에 대해 평균 도서 평점이 주석 처리 된 결과가 하나씩 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="c9af278885eb7c5c10380e223f8a32b279280c31" translate="yes" xml:space="preserve">
          <source>This will return the proper URL pattern for serving static files to your already defined pattern list. Use it like this:</source>
          <target state="translated">정적 파일을 제공하기위한 적절한 URL 패턴을 이미 정의 된 패턴 목록으로 반환합니다. 다음과 같이 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="9b9c09901e1b218f7ae921fe90e84b9ef04b6dea" translate="yes" xml:space="preserve">
          <source>This will start one process listening on &lt;code&gt;127.0.0.1:8000&lt;/code&gt;. It requires that your project be on the Python path; to ensure that run this command from the same directory as your &lt;code&gt;manage.py&lt;/code&gt; file.</source>
          <target state="translated">&lt;code&gt;127.0.0.1:8000&lt;/code&gt; 에서 하나의 프로세스 청취가 시작됩니다 . 프로젝트가 Python 경로에 있어야합니다. &lt;code&gt;manage.py&lt;/code&gt; 파일 과 동일한 디렉토리에서이 명령을 실행 하십시오.</target>
        </trans-unit>
        <trans-unit id="039f325dee3c9dd1b27b0d06e20052184b976795" translate="yes" xml:space="preserve">
          <source>This will start one process running one thread listening on &lt;code&gt;127.0.0.1:8000&lt;/code&gt;. It requires that your project be on the Python path; the simplest way to ensure that is to run this command from the same directory as your &lt;code&gt;manage.py&lt;/code&gt; file.</source>
          <target state="translated">이것은 &lt;code&gt;127.0.0.1:8000&lt;/code&gt; 에서 하나의 스레드 청취를 실행하는 하나의 프로세스를 시작 합니다 . 프로젝트가 Python 경로에 있어야합니다. 이를 관리하는 가장 간단한 방법은 &lt;code&gt;manage.py&lt;/code&gt; 파일 과 동일한 디렉토리에서이 명령을 실행하는 것입니다 .</target>
        </trans-unit>
        <trans-unit id="acff77f22a4208e686fddb1080968754ccb1060f" translate="yes" xml:space="preserve">
          <source>This will trigger an &lt;code&gt;AttributeError&lt;/code&gt; because &lt;code&gt;'pizza_list'&lt;/code&gt; doesn&amp;rsquo;t exist yet when &lt;code&gt;'pizza_list__toppings'&lt;/code&gt; is being processed.</source>
          <target state="translated">이것은 트리거 &lt;code&gt;AttributeError&lt;/code&gt; 이 때문에 &lt;code&gt;'pizza_list'&lt;/code&gt; 가 될 때 존재하지 않는 &lt;code&gt;'pizza_list__toppings'&lt;/code&gt; 처리 중입니다.</target>
        </trans-unit>
        <trans-unit id="2f015ca4d2d3a9bb4aa070c30f9319418080e41c" translate="yes" xml:space="preserve">
          <source>This will work, for example:</source>
          <target state="translated">예를 들어 다음과 같이 작동합니다.</target>
        </trans-unit>
        <trans-unit id="fe309c1bf1a718c9d2d8b9a788629133c6bf3300" translate="yes" xml:space="preserve">
          <source>This won&amp;rsquo;t be an issue for most custom managers. If you are just adding simple methods to your &lt;code&gt;Manager&lt;/code&gt;, it is unlikely that you will inadvertently make instances of your &lt;code&gt;Manager&lt;/code&gt; uncopyable. However, if you&amp;rsquo;re overriding &lt;code&gt;__getattr__&lt;/code&gt; or some other private method of your &lt;code&gt;Manager&lt;/code&gt; object that controls object state, you should ensure that you don&amp;rsquo;t affect the ability of your &lt;code&gt;Manager&lt;/code&gt; to be copied.</source>
          <target state="translated">대부분의 맞춤 관리자에게는 문제가되지 않습니다. &lt;code&gt;Manager&lt;/code&gt; 에 간단한 방법을 추가하는 경우 실수로 &lt;code&gt;Manager&lt;/code&gt; 인스턴스를 복사 할 수 없게 될 가능성은 거의 없습니다. 그러나 객체 상태를 제어하는 &lt;code&gt;__getattr__&lt;/code&gt; 또는 &lt;code&gt;Manager&lt;/code&gt; 객체 의 다른 개인용 메서드를 재정의하는 경우 &lt;code&gt;Manager&lt;/code&gt; 의 복사 기능에 영향을 미치지 않아야합니다 .</target>
        </trans-unit>
        <trans-unit id="37b7e139c8ce3ebc07f0a082cca7d6af3a6af8c2" translate="yes" xml:space="preserve">
          <source>This works even though it&amp;rsquo;s unordered because &lt;code&gt;'pizzas__toppings'&lt;/code&gt; already contains all the needed information, therefore the second argument &lt;code&gt;'pizzas'&lt;/code&gt; is actually redundant.</source>
          <target state="translated">&lt;code&gt;'pizzas__toppings'&lt;/code&gt; 에 필요한 모든 정보가 이미 포함되어 있기 때문에 순서가 정렬되지 않은 경우에도 작동 하므로 두 번째 인수 &lt;code&gt;'pizzas'&lt;/code&gt; pizzas ' 는 실제로 중복됩니다.</target>
        </trans-unit>
        <trans-unit id="98ae65239f735cc912a57448aa635c993c2c6b59" translate="yes" xml:space="preserve">
          <source>This would allow you to refer to the local file &lt;code&gt;'/opt/webfiles/stats/polls_20101022.tar.gz'&lt;/code&gt; with &lt;code&gt;'/static/downloads/polls_20101022.tar.gz'&lt;/code&gt; in your templates, e.g.:</source>
          <target state="translated">이것은 로컬 파일을 참조 할 수 있도록 것 &lt;code&gt;'/opt/webfiles/stats/polls_20101022.tar.gz'&lt;/code&gt; 와 &lt;code&gt;'/static/downloads/polls_20101022.tar.gz'&lt;/code&gt; 예를 들어 템플릿에서 :</target>
        </trans-unit>
        <trans-unit id="a8523884c7437b11830200d2fd09dd2b3b0311c0" translate="yes" xml:space="preserve">
          <source>This would be wrong &amp;ndash; in fact, Django will throw an error if you do so. That&amp;rsquo;s because at any point arguments could get added to the signal and your receiver must be able to handle those new arguments.</source>
          <target state="translated">이것은 틀렸을 것입니다. 실제로 장고는 그렇게하면 오류를 던질 것입니다. 어떤 시점에서든 인수가 신호에 추가 될 수 있고 수신자가 새로운 인수를 처리 할 수 ​​있어야하기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="a1909e42ac94b6f3ac7fa3fe4949bc64ab11fd46" translate="yes" xml:space="preserve">
          <source>This would create or update the message file for JavaScript for German. After updating message files, run &lt;a href=&quot;../../ref/django-admin#django-admin-compilemessages&quot;&gt;&lt;code&gt;django-admin compilemessages&lt;/code&gt;&lt;/a&gt; the same way as you do with normal Django message files.</source>
          <target state="translated">그러면 JavaScript 용 독일어 메시지 파일이 작성되거나 업데이트됩니다. 메시지 파일을 업데이트 한 후 일반 Django 메시지 파일에서와 동일한 방식으로 &lt;a href=&quot;../../ref/django-admin#django-admin-compilemessages&quot;&gt; &lt;code&gt;django-admin compilemessages&lt;/code&gt; 를&lt;/a&gt; 실행 하십시오.</target>
        </trans-unit>
        <trans-unit id="7ec3b5753676ac3838bce1fa780e48b2e0696c77" translate="yes" xml:space="preserve">
          <source>This would display as &amp;ldquo;01h 23m&amp;rdquo;.</source>
          <target state="translated">&amp;ldquo;01h 23m&amp;rdquo;으로 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="983a108f83af73b8998cc7b7c9d8414ce34c04a1" translate="yes" xml:space="preserve">
          <source>This would display as &amp;ldquo;It is the 4th of September&amp;rdquo;.</source>
          <target state="translated">&quot;9 월 4 일&quot;로 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="030b15ad872434f95189a8fda31ab6eca23957fe" translate="yes" xml:space="preserve">
          <source>This would generate the following HTML:</source>
          <target state="translated">다음과 같은 HTML이 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="f2788b9122df77143fa2938e7136916f437ebf55" translate="yes" xml:space="preserve">
          <source>This would sort all the items for which &lt;code&gt;is_recent&lt;/code&gt; is true to the front of the result set (&lt;code&gt;True&lt;/code&gt; sorts before &lt;code&gt;False&lt;/code&gt; in a descending ordering).</source>
          <target state="translated">이렇게하면 &lt;code&gt;is_recent&lt;/code&gt; 가 있는 모든 항목 이 결과 집합의 맨 앞에 정렬 됩니다 ( &lt;code&gt;True&lt;/code&gt; 은 내림차순으로 &lt;code&gt;False&lt;/code&gt; 전에 정렬합니다).</target>
        </trans-unit>
        <trans-unit id="ef52ebf93c61dd547c408a095a1074d66ed7c6e6" translate="yes" xml:space="preserve">
          <source>This would specify a form with a comment that uses a larger &lt;a href=&quot;#django.forms.Textarea&quot;&gt;&lt;code&gt;Textarea&lt;/code&gt;&lt;/a&gt; widget, rather than the default &lt;a href=&quot;#django.forms.TextInput&quot;&gt;&lt;code&gt;TextInput&lt;/code&gt;&lt;/a&gt; widget.</source>
          <target state="translated">기본 &lt;a href=&quot;#django.forms.TextInput&quot;&gt; &lt;code&gt;TextInput&lt;/code&gt; &lt;/a&gt; 위젯이 아닌 더 큰 &lt;a href=&quot;#django.forms.Textarea&quot;&gt; &lt;code&gt;Textarea&lt;/code&gt; &lt;/a&gt; 위젯 을 사용하는 주석이있는 양식을 지정합니다 .</target>
        </trans-unit>
        <trans-unit id="f6a9b0397e52fdfb6db0a2b0d4bd493c815fb59f" translate="yes" xml:space="preserve">
          <source>This wrapping will protect &lt;code&gt;self.my_view&lt;/code&gt; from unauthorized access and will apply the &lt;a href=&quot;../../../topics/http/decorators#django.views.decorators.cache.never_cache&quot;&gt;&lt;code&gt;django.views.decorators.cache.never_cache()&lt;/code&gt;&lt;/a&gt; decorator to make sure it is not cached if the cache middleware is active.</source>
          <target state="translated">이 랩핑은 &lt;code&gt;self.my_view&lt;/code&gt; 가 무단 액세스로부터 보호 하고 &lt;a href=&quot;../../../topics/http/decorators#django.views.decorators.cache.never_cache&quot;&gt; &lt;code&gt;django.views.decorators.cache.never_cache()&lt;/code&gt; &lt;/a&gt; 데코레이터를 적용 하여 캐시 미들웨어가 활성 상태 인 경우 캐시되지 않도록합니다.</target>
        </trans-unit>
        <trans-unit id="e3cc4590bcee19cd47e0b848017a4bb1fc156a7d" translate="yes" xml:space="preserve">
          <source>Those are the basic steps &amp;ndash; from here you&amp;rsquo;ll want to tweak the models Django generated until they work the way you&amp;rsquo;d like. Try accessing your data via the Django database API, and try editing objects via Django&amp;rsquo;s admin site, and edit the models file accordingly.</source>
          <target state="translated">기본 단계는 여기에서 장고가 원하는 방식으로 작동 할 때까지 생성 된 모델을 조정하는 것입니다. Django 데이터베이스 API를 통해 데이터에 액세스하고 Django의 관리 사이트를 통해 객체를 편집하고 그에 따라 모델 파일을 편집하십시오.</target>
        </trans-unit>
        <trans-unit id="fa65384159de4e3107d0109b20d8feafcb042805" translate="yes" xml:space="preserve">
          <source>Those are the components used for storing a User&amp;rsquo;s password, separated by the dollar-sign character and consist of: the hashing algorithm, the number of algorithm iterations (work factor), the random salt, and the resulting password hash. The algorithm is one of a number of one-way hashing or password storage algorithms Django can use; see below. Iterations describe the number of times the algorithm is run over the hash. Salt is the random seed used and the hash is the result of the one-way function.</source>
          <target state="translated">이것들은 달러 기호 문자로 구분되어 사용자 암호를 저장하는 데 사용되는 구성 요소이며, 해싱 알고리즘, 알고리즘 반복 횟수 (작업 요소), 임의의 소금 및 결과 암호 해시로 구성됩니다. 이 알고리즘은 Django가 사용할 수있는 여러 가지 단방향 해싱 또는 암호 저장 알고리즘 중 하나입니다. 아래를 참조하십시오. 반복은 알고리즘이 해시에서 실행되는 횟수를 나타냅니다. 솔트는 사용 된 랜덤 시드이며 해시는 일방 함수의 결과입니다.</target>
        </trans-unit>
        <trans-unit id="44dec9c7d9dcd5cbcf8559d801ae57299e6038f3" translate="yes" xml:space="preserve">
          <source>Those of you who are unfamiliar with version control systems and Trac will find that this tutorial and its links include just enough information to get started. However, you&amp;rsquo;ll probably want to read some more about these different tools if you plan on contributing to Django regularly.</source>
          <target state="translated">버전 제어 시스템과 Trac에 익숙하지 않은 사용자는이 학습서 및 해당 링크에 시작하기에 충분한 정보 만 포함되어 있음을 알게 될 것입니다. 그러나 Django에 정기적으로 기여할 계획이라면 이러한 다양한 도구에 대해 좀 더 읽어보고 싶을 것입니다.</target>
        </trans-unit>
        <trans-unit id="02cd3362bf46d8c3b4d44b9035f24630da349cc8" translate="yes" xml:space="preserve">
          <source>Though most of the time you&amp;rsquo;ll want to use a &lt;code&gt;File&lt;/code&gt; object (which delegates to the proper storage for that file), you can use file storage systems directly. You can create an instance of some custom file storage class, or &amp;ndash; often more useful &amp;ndash; you can use the global default storage system:</source>
          <target state="translated">대부분의 경우 &lt;code&gt;File&lt;/code&gt; 객체 (해당 파일의 적절한 스토리지에 위임) 를 사용하려고하지만 파일 스토리지 시스템을 직접 사용할 수 있습니다. 일부 사용자 정의 파일 스토리지 클래스의 인스턴스를 작성하거나보다 유용한 경우 글로벌 기본 스토리지 시스템을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="aa70522173261d7745e665606491ff2fb31e707a" translate="yes" xml:space="preserve">
          <source>Though this looks like three database hits, in fact it hits the database only once, at the last line (&lt;code&gt;print(q)&lt;/code&gt;). In general, the results of a &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; aren&amp;rsquo;t fetched from the database until you &amp;ldquo;ask&amp;rdquo; for them. When you do, the &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; is &lt;em&gt;evaluated&lt;/em&gt; by accessing the database. For more details on exactly when evaluation takes place, see &lt;a href=&quot;../../ref/models/querysets#when-querysets-are-evaluated&quot;&gt;When QuerySets are evaluated&lt;/a&gt;.</source>
          <target state="translated">이것은 세 개의 데이터베이스 적중처럼 보이지만 실제로는 마지막 줄 ( &lt;code&gt;print(q)&lt;/code&gt; ) 에서 한 번만 데이터베이스에 적중합니다 . 일반적으로 &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; &lt;/a&gt; 의 결과는 &quot;요청&quot;할 때까지 데이터베이스에서 가져 오지 않습니다. 그렇게 하면 데이터베이스에 액세스하여 &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; &lt;/a&gt; 이 &lt;em&gt;평가&lt;/em&gt; 됩니다. 정확한 평가시기에 대한 자세한 내용은 &lt;a href=&quot;../../ref/models/querysets#when-querysets-are-evaluated&quot;&gt;QuerySet 평가시기를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="0f06d797a2dbdfc0af13041428f8b64d6509caee" translate="yes" xml:space="preserve">
          <source>Though you can define a choices list outside of a model class and then refer to it, defining the choices and names for each choice inside the model class keeps all of that information with the class that uses it, and helps reference the choices (e.g, &lt;code&gt;Student.SOPHOMORE&lt;/code&gt; will work anywhere that the &lt;code&gt;Student&lt;/code&gt; model has been imported).</source>
          <target state="translated">모델 클래스 외부에서 선택 목록을 정의한 다음 참조 할 수 있지만 모델 클래스 내에서 각 선택의 선택 및 이름을 정의하면 해당 정보를 사용하는 클래스와 함께 해당 정보가 모두 유지되고 선택을 참조하는 데 도움이됩니다 (예 : &lt;code&gt;Student.SOPHOMORE&lt;/code&gt; 는 &lt;code&gt;Student&lt;/code&gt; 모델을 가져온 모든 위치에서 작동합니다 ).</target>
        </trans-unit>
        <trans-unit id="43d4decc3581b66f01cf428c39f6b04082eb94f2" translate="yes" xml:space="preserve">
          <source>Thread 1 performs its first loop iteration, &lt;code&gt;CycleNode.render()&lt;/code&gt; returns &amp;lsquo;row1&amp;rsquo;</source>
          <target state="translated">스레드 1은 첫 번째 루프 반복을 수행합니다. &lt;code&gt;CycleNode.render()&lt;/code&gt; 는 'row1'을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="47b6bb88069bd58cc98dc54f37f65be623d355ac" translate="yes" xml:space="preserve">
          <source>Thread 1 performs its second loop iteration, &lt;code&gt;CycleNode.render()&lt;/code&gt; returns &amp;lsquo;row1&amp;rsquo;</source>
          <target state="translated">스레드 1은 두 번째 루프 반복을 수행합니다. &lt;code&gt;CycleNode.render()&lt;/code&gt; 는 'row1'을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="d707641e7a45dfff93f2bb96ccedc888137e137c" translate="yes" xml:space="preserve">
          <source>Thread 2 performs its first loop iteration, &lt;code&gt;CycleNode.render()&lt;/code&gt; returns &amp;lsquo;row2&amp;rsquo;</source>
          <target state="translated">스레드 2는 첫 번째 루프 반복을 수행합니다. &lt;code&gt;CycleNode.render()&lt;/code&gt; 는 'row2'를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="f444e4e2bf879ab71b47f47d7180794877b915fb" translate="yes" xml:space="preserve">
          <source>Thread 2 performs its second loop iteration, &lt;code&gt;CycleNode.render()&lt;/code&gt; returns &amp;lsquo;row2&amp;rsquo;</source>
          <target state="translated">스레드 2는 두 번째 루프 반복을 수행합니다. &lt;code&gt;CycleNode.render()&lt;/code&gt; 는 'row2'를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="9dbd3a775f1273e0e69a6e35a7f62c3de359bdef" translate="yes" xml:space="preserve">
          <source>Thread safety with view arguments</source>
          <target state="translated">뷰 인수가있는 스레드 안전성</target>
        </trans-unit>
        <trans-unit id="b8835929ed91937f173b47032785ba8515e2fdcd" translate="yes" xml:space="preserve">
          <source>Thread-safety considerations</source>
          <target state="translated">스레드 안전성 고려 사항</target>
        </trans-unit>
        <trans-unit id="f9049cfae1ef31b353d9a275cdb16906e7fac582" translate="yes" xml:space="preserve">
          <source>Threaded option</source>
          <target state="translated">스레드 옵션</target>
        </trans-unit>
        <trans-unit id="79345e2741962416bbe3e544ded2776796d4ad74" translate="yes" xml:space="preserve">
          <source>Three things to note about 404 views:</source>
          <target state="translated">404 뷰에 대해 세 가지주의 할 사항 :</target>
        </trans-unit>
        <trans-unit id="3b3bfc362989ee184a0cf71f52c7b089ef051068" translate="yes" xml:space="preserve">
          <source>Throttling of login attempts</source>
          <target state="translated">로그인 시도 제한</target>
        </trans-unit>
        <trans-unit id="4eed5bec6e69811a4c090736a9314b0740244ecd" translate="yes" xml:space="preserve">
          <source>Throughout this guide (and in the reference), we&amp;rsquo;ll refer to the following models, which comprise a Weblog application:</source>
          <target state="translated">이 안내서 (및 참조 서) 전체에서 웹 로그 애플리케이션을 구성하는 다음 모델을 참조합니다.</target>
        </trans-unit>
        <trans-unit id="0c408b8ccb860ebea717b0e3d53400ec6b1cd518" translate="yes" xml:space="preserve">
          <source>Throughout this guide, we&amp;rsquo;ll refer to the following models. These models are used to track the inventory for a series of online bookstores:</source>
          <target state="translated">이 가이드 전체에서 다음 모델을 참조합니다. 이 모델은 일련의 온라인 서점에 대한 재고를 추적하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="f11366579f89fee02f46cc6d65d6be27edd2151f" translate="yes" xml:space="preserve">
          <source>Throughout this reference we&amp;rsquo;ll use the &lt;a href=&quot;../../topics/db/queries#queryset-model-example&quot;&gt;example Weblog models&lt;/a&gt; presented in the &lt;a href=&quot;../../topics/db/queries&quot;&gt;database query guide&lt;/a&gt;.</source>
          <target state="translated">이 참조 자료 전체 에서 &lt;a href=&quot;../../topics/db/queries&quot;&gt;데이터베이스 쿼리 안내서에&lt;/a&gt; 제시된 &lt;a href=&quot;../../topics/db/queries#queryset-model-example&quot;&gt;예제 Weblog 모델을&lt;/a&gt; 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="3e9f77ed8646996f9f6ba3f8da85983d0d9de65c" translate="yes" xml:space="preserve">
          <source>Throughout this tutorial, we&amp;rsquo;ll walk you through the creation of a basic poll application.</source>
          <target state="translated">이 학습서를 통해 기본 설문 조사 애플리케이션 작성을 안내합니다.</target>
        </trans-unit>
        <trans-unit id="981f7cdde027cb27aa223c1de4e938a388dc5546" translate="yes" xml:space="preserve">
          <source>Thus, geometry parameters may be passed in using the &lt;code&gt;GEOSGeometry&lt;/code&gt; object, WKT (Well Known Text &lt;a href=&quot;#fnwkt&quot; id=&quot;id4&quot;&gt;[1]&lt;/a&gt;), HEXEWKB (PostGIS specific &amp;ndash; a WKB geometry in hexadecimal &lt;a href=&quot;#fnewkb&quot; id=&quot;id5&quot;&gt;[2]&lt;/a&gt;), and GeoJSON (see &lt;a href=&quot;https://tools.ietf.org/html/rfc7946.html&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;RFC 7946&lt;/strong&gt;&lt;/a&gt;). Essentially, if the input is not a &lt;code&gt;GEOSGeometry&lt;/code&gt; object, the geometry field will attempt to create a &lt;code&gt;GEOSGeometry&lt;/code&gt; instance from the input.</source>
          <target state="translated">따라서 &lt;code&gt;GEOSGeometry&lt;/code&gt; 객체, WKT (Well Known Text &lt;a href=&quot;#fnwkt&quot; id=&quot;id4&quot;&gt;[1]&lt;/a&gt; ), HEXEWKB (PostGIS 관련 &amp;ndash; 16 진법의 WKB 형상 &lt;a href=&quot;#fnewkb&quot; id=&quot;id5&quot;&gt;[2]&lt;/a&gt; ) 및 GeoJSON ( &lt;a href=&quot;https://tools.ietf.org/html/rfc7946.html&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;RFC 7946&lt;/strong&gt;&lt;/a&gt; 참조) 을 사용하여 형상 매개 변수를 전달할 수 있습니다 . 기본적으로 입력이 &lt;code&gt;GEOSGeometry&lt;/code&gt; 객체 가 아닌 경우 지오메트리 필드는 입력에서 &lt;code&gt;GEOSGeometry&lt;/code&gt; 인스턴스 를 작성하려고 시도합니다 .</target>
        </trans-unit>
        <trans-unit id="82d52d8e0e3525b980e19ac85645a26cfb59f8a8" translate="yes" xml:space="preserve">
          <source>Thus, take care when using multi-valued field to order the results. &lt;strong&gt;If&lt;/strong&gt; you can be sure that there will only be one ordering piece of data for each of the items you&amp;rsquo;re ordering, this approach should not present problems. If not, make sure the results are what you expect.</source>
          <target state="translated">따라서 다중 값 필드를 사용하여 결과를 정렬 할 때는주의하십시오. 주문하는 각 품목에 대해 하나의 주문 데이터 만 있음을 확신 할 수 &lt;strong&gt;있으면&lt;/strong&gt; 이 방법으로 문제가 발생하지 않아야합니다. 그렇지 않은 경우 결과가 예상 한 것이어야합니다.</target>
        </trans-unit>
        <trans-unit id="8dffc407b7cd48fa1c573f262783f28deff819e9" translate="yes" xml:space="preserve">
          <source>Thus, to define a custom template tag, you specify how the raw template tag is converted into a &lt;code&gt;Node&lt;/code&gt; (the compilation function), and what the node&amp;rsquo;s &lt;code&gt;render()&lt;/code&gt; method does.</source>
          <target state="translated">따라서 사용자 정의 템플릿 태그를 정의하려면 원시 템플릿 태그를 &lt;code&gt;Node&lt;/code&gt; (컴파일 함수) 로 변환하는 방법 과 노드의 &lt;code&gt;render()&lt;/code&gt; 메소드 의 기능 을 지정합니다 .</target>
        </trans-unit>
        <trans-unit id="1a3683b4fa1b0130c82e0b51e1c2e6f8f20d1b76" translate="yes" xml:space="preserve">
          <source>Thus, when (for example) the &lt;code&gt;APP_DIRS&lt;/code&gt; option of a &lt;code&gt;DjangoTemplates&lt;/code&gt; backend is set to True in &lt;a href=&quot;../../ref/settings#std:setting-TEMPLATES&quot;&gt;&lt;code&gt;TEMPLATES&lt;/code&gt;&lt;/a&gt;, a template location could be: /path/to/project/books/templates/books/publisher_list.html</source>
          <target state="translated">따라서 (예를 들어) &lt;code&gt;DjangoTemplates&lt;/code&gt; 백엔드 의 &lt;code&gt;APP_DIRS&lt;/code&gt; 옵션이 &lt;a href=&quot;../../ref/settings#std:setting-TEMPLATES&quot;&gt; &lt;code&gt;TEMPLATES&lt;/code&gt; &lt;/a&gt; 에서 True로 설정 되면 템플리트 위치는 다음과 같습니다. /path/to/project/books/templates/books/publisher_list.html</target>
        </trans-unit>
        <trans-unit id="22303e489a09da8c7fd2fb66f48bb12dbd93f6e9" translate="yes" xml:space="preserve">
          <source>Thus, you should always modify uploading handlers as early in your view as possible.</source>
          <target state="translated">따라서 가능한 한 빨리 업로드 핸들러를 가능한 빨리 수정해야합니다.</target>
        </trans-unit>
        <trans-unit id="2c826a8259cfbb90e6a79f52dfa5cc7a89f7dad5" translate="yes" xml:space="preserve">
          <source>Ticket #99999 &amp;ndash; Allow making toast</source>
          <target state="translated">티켓 # 99999 &amp;ndash; 토스트 만들기 허용</target>
        </trans-unit>
        <trans-unit id="909e6bf5e669718b029b6996037bb6813452cf46" translate="yes" xml:space="preserve">
          <source>Time zone aware input in forms</source>
          <target state="translated">양식의 시간대 인식 입력</target>
        </trans-unit>
        <trans-unit id="e123509b3ce89b6daf1043c8949acdd78d908c59" translate="yes" xml:space="preserve">
          <source>Time zone aware output in templates</source>
          <target state="translated">템플릿의 시간대 인식 출력</target>
        </trans-unit>
        <trans-unit id="c20155fe06d09e61a748c0713bc8e4d4d3b015de" translate="yes" xml:space="preserve">
          <source>Time zone definitions</source>
          <target state="translated">시간대 정의</target>
        </trans-unit>
        <trans-unit id="2abfb166fcb1ca6a02ec74d788f7f4ed4b6ed48b" translate="yes" xml:space="preserve">
          <source>Time zone of this machine.</source>
          <target state="translated">이 기계의 시간대.</target>
        </trans-unit>
        <trans-unit id="bec68cad11ef9801f5d18dc08423b9f51b49ae14" translate="yes" xml:space="preserve">
          <source>Time zone offset in seconds. The offset for timezones west of UTC is always negative, and for those east of UTC is always positive.</source>
          <target state="translated">시간대 (초)입니다. UTC 서쪽 시간대의 오프셋은 항상 음수이고 UTC 동쪽 시간대의 오프셋은 항상 양수입니다.</target>
        </trans-unit>
        <trans-unit id="b1a3880acdab53a520cb7444e8a53ce109dc1127" translate="yes" xml:space="preserve">
          <source>Time zone support is disabled by default. To enable it, set &lt;a href=&quot;../../ref/settings#std:setting-USE_TZ&quot;&gt;&lt;code&gt;USE_TZ =
True&lt;/code&gt;&lt;/a&gt; in your settings file. Time zone support uses &lt;a href=&quot;http://pytz.sourceforge.net/&quot;&gt;pytz&lt;/a&gt;, which is installed when you install Django.</source>
          <target state="translated">시간대 지원은 기본적으로 비활성화되어 있습니다. 활성화하려면 설정 파일에서 &lt;a href=&quot;../../ref/settings#std:setting-USE_TZ&quot;&gt; &lt;code&gt;USE_TZ = True&lt;/code&gt; &lt;/a&gt; 로 설정하십시오. 표준 시간대 지원은 Django를 설치할 때 설치되는 &lt;a href=&quot;http://pytz.sourceforge.net/&quot;&gt;pytz를&lt;/a&gt; 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="fa9aac4028931969e4e43d5926f21c1c02b03737" translate="yes" xml:space="preserve">
          <source>Time zones</source>
          <target state="translated">시간대</target>
        </trans-unit>
        <trans-unit id="cdd49bd15d82b5fef1f9bcba2fe101e86c69c2a6" translate="yes" xml:space="preserve">
          <source>Time, in 12-hour hours and minutes, with minutes left off if they&amp;rsquo;re zero. Proprietary extension.</source>
          <target state="translated">12 시간 시간 및 분 단위의 시간으로, 0이면 분이 남습니다. 독점 연장.</target>
        </trans-unit>
        <trans-unit id="4d5de36c7e9fafef316efb6de8a5df80db489557" translate="yes" xml:space="preserve">
          <source>Time, in 12-hour hours, minutes and &amp;lsquo;a.m.&amp;rsquo;/&amp;rsquo;p.m.&amp;rsquo;, with minutes left off if they&amp;rsquo;re zero and the special-case strings &amp;lsquo;midnight&amp;rsquo; and &amp;lsquo;noon&amp;rsquo; if appropriate. Proprietary extension.</source>
          <target state="translated">시간은 12 시간 시간, 분 및 'am'/ 'pm'이며, 0이면 분이 사라지고 특수한 경우 문자열 '자정'과 '정오'입니다. 독점 연장.</target>
        </trans-unit>
        <trans-unit id="4fee3dc5071659def74176ccc0333ac4e69541e5" translate="yes" xml:space="preserve">
          <source>Timezone name. Could be in any format, or might return an empty string, depending on the datetime.</source>
          <target state="translated">시간대 이름. 날짜 시간에 따라 모든 형식이거나 빈 문자열을 반환 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="59969ae9efadcfdeb61497cd6b46bcd408f76d86" translate="yes" xml:space="preserve">
          <source>Timing of execution</source>
          <target state="translated">실행시기</target>
        </trans-unit>
        <trans-unit id="d19ceca501465c339e3bcf2bc0d8ff02bb697d6c" translate="yes" xml:space="preserve">
          <source>Tip</source>
          <target state="translated">Tip</target>
        </trans-unit>
        <trans-unit id="6ed8c17551e6c9c715719518b4a017bf89dfd0d9" translate="yes" xml:space="preserve">
          <source>To access the new value saved this way, the object must be reloaded:</source>
          <target state="translated">이 방법으로 저장된 새 값에 액세스하려면 객체를 다시로드해야합니다.</target>
        </trans-unit>
        <trans-unit id="3411a917129a5728d0bafff61d04a100a9b00a4a" translate="yes" xml:space="preserve">
          <source>To accomplish this, use the &lt;a href=&quot;#django.forms.Form.initial&quot;&gt;&lt;code&gt;initial&lt;/code&gt;&lt;/a&gt; argument to a &lt;a href=&quot;#django.forms.Form&quot;&gt;&lt;code&gt;Form&lt;/code&gt;&lt;/a&gt;. This argument, if given, should be a dictionary mapping field names to initial values. Only include the fields for which you&amp;rsquo;re specifying an initial value; it&amp;rsquo;s not necessary to include every field in your form. For example:</source>
          <target state="translated">이를 위해 &lt;a href=&quot;#django.forms.Form&quot;&gt; &lt;code&gt;Form&lt;/code&gt; 에&lt;/a&gt;&lt;a href=&quot;#django.forms.Form.initial&quot;&gt; &lt;code&gt;initial&lt;/code&gt; &lt;/a&gt; 인수를 사용하십시오 . 주어진 경우이 인수는 사전 이름 필드 이름을 초기 값으로 매핑해야합니다. 초기 값을 지정하는 필드 만 포함하십시오. 양식에 모든 필드를 포함시킬 필요는 없습니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="cf04696721a5ef40e7890144c1993bb99559bcd7" translate="yes" xml:space="preserve">
          <source>To achieve this, place all migrations that should depend on yours in the &lt;code&gt;run_before&lt;/code&gt; attribute on your &lt;code&gt;Migration&lt;/code&gt; class:</source>
          <target state="translated">이를 위해서는 &lt;code&gt;Migration&lt;/code&gt; 클래스 의 &lt;code&gt;run_before&lt;/code&gt; 속성에서 자신 에 의존하는 모든 마이그레이션을 배치하십시오 .</target>
        </trans-unit>
        <trans-unit id="7aa8188d046186e8db2101570732f0296f04c147" translate="yes" xml:space="preserve">
          <source>To activate a middleware component, add it to the &lt;a href=&quot;../../ref/settings#std:setting-MIDDLEWARE&quot;&gt;&lt;code&gt;MIDDLEWARE&lt;/code&gt;&lt;/a&gt; list in your Django settings.</source>
          <target state="translated">미들웨어 구성 요소를 활성화하려면 Django 설정 의 &lt;a href=&quot;../../ref/settings#std:setting-MIDDLEWARE&quot;&gt; &lt;code&gt;MIDDLEWARE&lt;/code&gt; &lt;/a&gt; 목록에 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="7e319f9fcd595b15b59dae09a2b1af74ecf1a46a" translate="yes" xml:space="preserve">
          <source>To activate or deactivate conversion for a template block, use:</source>
          <target state="translated">템플릿 블록에 대한 변환을 활성화 또는 비활성화하려면 다음을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="9ca3aa0fa210f5b1cb7c61647051dedfa6525ac1" translate="yes" xml:space="preserve">
          <source>To activate or deactivate localization for a template block, use:</source>
          <target state="translated">템플릿 블록의 현지화를 활성화 또는 비활성화하려면 다음을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="5c5bed6db13412b793ca79934a8d15f5f5b75ad0" translate="yes" xml:space="preserve">
          <source>To activate sitemap generation on your Django site, add this line to your &lt;a href=&quot;../../topics/http/urls&quot;&gt;URLconf&lt;/a&gt;:</source>
          <target state="translated">Django 사이트에서 사이트 맵 생성을 활성화하려면 다음 행을 &lt;a href=&quot;../../topics/http/urls&quot;&gt;URLconf에&lt;/a&gt; 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="570d6a92f143a6e5c3ea4524f84ff2e8bd43f9c0" translate="yes" xml:space="preserve">
          <source>To activate the &lt;a href=&quot;#module-django.contrib.admindocs&quot;&gt;&lt;code&gt;admindocs&lt;/code&gt;&lt;/a&gt;, you will need to do the following:</source>
          <target state="translated">&lt;a href=&quot;#module-django.contrib.admindocs&quot;&gt; &lt;code&gt;admindocs&lt;/code&gt; &lt;/a&gt; 를 활성화하려면 다음을 수행해야합니다.</target>
        </trans-unit>
        <trans-unit id="0f0abbe07ee6c09f34827ed989b145e540f63a10" translate="yes" xml:space="preserve">
          <source>To activate these filters, add &lt;code&gt;'django.contrib.humanize'&lt;/code&gt; to your &lt;a href=&quot;../settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; setting. Once you&amp;rsquo;ve done that, use &lt;code&gt;{% load humanize %}&lt;/code&gt; in a template, and you&amp;rsquo;ll have access to the following filters.</source>
          <target state="translated">이 필터를 활성화하려면 &lt;a href=&quot;../settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt; 설정에 &lt;code&gt;'django.contrib.humanize'&lt;/code&gt; 를 추가 하십시오 . 이 작업을 완료 하면 템플릿에서 &lt;code&gt;{% load humanize %}&lt;/code&gt; 를 사용하면 다음 필터에 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4d67291f6612a5d695f1fadb4906ebe530b6f37e" translate="yes" xml:space="preserve">
          <source>To activate this behavior, put the email addresses of the recipients in the &lt;a href=&quot;../ref/settings#std:setting-ADMINS&quot;&gt;&lt;code&gt;ADMINS&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">이 동작을 활성화하려면 수신자의 이메일 주소를 &lt;a href=&quot;../ref/settings#std:setting-ADMINS&quot;&gt; &lt;code&gt;ADMINS&lt;/code&gt; &lt;/a&gt; 설정 에 두십시오 .</target>
        </trans-unit>
        <trans-unit id="6eac47912983503a01c205979236b2b0cf232792" translate="yes" xml:space="preserve">
          <source>To activate your virtual environment on Windows, run:</source>
          <target state="translated">Windows에서 가상 환경을 활성화하려면 다음을 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="ab0ba2e35b6a39cd6b24a33102820b450efd23d9" translate="yes" xml:space="preserve">
          <source>To add a key only if it doesn&amp;rsquo;t already exist, use the &lt;code&gt;add()&lt;/code&gt; method. It takes the same parameters as &lt;code&gt;set()&lt;/code&gt;, but it will not attempt to update the cache if the key specified is already present:</source>
          <target state="translated">키가없는 경우에만 키를 추가하려면 add &lt;code&gt;add()&lt;/code&gt; 메소드를 사용하십시오 . &lt;code&gt;set()&lt;/code&gt; 과 동일한 매개 변수를 사용 하지만 지정된 키가 이미 있으면 캐시 업데이트를 시도하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="e1adf82d3c070b10933759f23b53aef9423adf07" translate="yes" xml:space="preserve">
          <source>To add a message, call:</source>
          <target state="translated">메시지를 추가하려면 다음을 호출하십시오.</target>
        </trans-unit>
        <trans-unit id="d132833ab14e3503eb3a7f9996d733b7629ffa98" translate="yes" xml:space="preserve">
          <source>To add a profile model&amp;rsquo;s fields to the user page in the admin, define an &lt;a href=&quot;../../ref/contrib/admin/index#django.contrib.admin.InlineModelAdmin&quot;&gt;&lt;code&gt;InlineModelAdmin&lt;/code&gt;&lt;/a&gt; (for this example, we&amp;rsquo;ll use a &lt;a href=&quot;../../ref/contrib/admin/index#django.contrib.admin.StackedInline&quot;&gt;&lt;code&gt;StackedInline&lt;/code&gt;&lt;/a&gt;) in your app&amp;rsquo;s &lt;code&gt;admin.py&lt;/code&gt; and add it to a &lt;code&gt;UserAdmin&lt;/code&gt; class which is registered with the &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User&quot;&gt;&lt;code&gt;User&lt;/code&gt;&lt;/a&gt; class:</source>
          <target state="translated">관리자의 사용자 페이지에 프로파일 모델의 필드를 추가하려면 앱의 &lt;code&gt;admin.py&lt;/code&gt; 에서 &lt;a href=&quot;../../ref/contrib/admin/index#django.contrib.admin.InlineModelAdmin&quot;&gt; &lt;code&gt;InlineModelAdmin&lt;/code&gt; &lt;/a&gt; (이 예제에서는 &lt;a href=&quot;../../ref/contrib/admin/index#django.contrib.admin.StackedInline&quot;&gt; &lt;code&gt;StackedInline&lt;/code&gt; &lt;/a&gt; 사용 ) 을 정의하고 &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User&quot;&gt; &lt;code&gt;User&lt;/code&gt; &lt;/a&gt; 클래스에 등록 된 &lt;code&gt;UserAdmin&lt;/code&gt; 클래스에 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="94d1c3aa867b273c057667ee0a0d3cce967b849a" translate="yes" xml:space="preserve">
          <source>To add migrations to an app that doesn&amp;rsquo;t have a &lt;code&gt;migrations&lt;/code&gt; directory, run &lt;code&gt;makemigrations&lt;/code&gt; with the app&amp;rsquo;s &lt;code&gt;app_label&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;migrations&lt;/code&gt; 디렉토리 가없는 앱에 마이그레이션을 추가하려면 app의 &lt;code&gt;app_label&lt;/code&gt; 로 &lt;code&gt;makemigrations&lt;/code&gt; 를 실행 하십시오 .</target>
        </trans-unit>
        <trans-unit id="bcedae5be9d6c799b7a653302220bc59687aea58" translate="yes" xml:space="preserve">
          <source>To add multiple records to a &lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField&quot;&gt;&lt;code&gt;ManyToManyField&lt;/code&gt;&lt;/a&gt; in one go, include multiple arguments in the call to &lt;a href=&quot;../../ref/models/relations#django.db.models.fields.related.RelatedManager.add&quot;&gt;&lt;code&gt;add()&lt;/code&gt;&lt;/a&gt;, like this:</source>
          <target state="translated">&lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField&quot;&gt; &lt;code&gt;ManyToManyField&lt;/code&gt; &lt;/a&gt; 에 여러 레코드를 한 번에 추가하려면 다음 과 같이 &lt;a href=&quot;../../ref/models/relations#django.db.models.fields.related.RelatedManager.add&quot;&gt; &lt;code&gt;add()&lt;/code&gt; &lt;/a&gt; 호출에 여러 인수를 포함 하십시오.</target>
        </trans-unit>
        <trans-unit id="2552e635996f4768c64438c5b77946a86e95b929" translate="yes" xml:space="preserve">
          <source>To address this problem, Django provides a &lt;code&gt;render_context&lt;/code&gt; that&amp;rsquo;s associated with the &lt;code&gt;context&lt;/code&gt; of the template that is currently being rendered. The &lt;code&gt;render_context&lt;/code&gt; behaves like a Python dictionary, and should be used to store &lt;code&gt;Node&lt;/code&gt; state between invocations of the &lt;code&gt;render&lt;/code&gt; method.</source>
          <target state="translated">이 문제를 해결하기 위해 Django 는 현재 렌더링중인 템플릿 의 &lt;code&gt;context&lt;/code&gt; 와 연결된 &lt;code&gt;render_context&lt;/code&gt; 를 제공합니다 . &lt;code&gt;render_context&lt;/code&gt; 의 파이썬 사전처럼 행동한다, 그리고 저장 표기 &lt;code&gt;Node&lt;/code&gt; 의 호출 사이 상태를 &lt;code&gt;render&lt;/code&gt; 하는 방법.</target>
        </trans-unit>
        <trans-unit id="2b5eddeb36d25df6b8e3eb9d3f8d3986b2664c79" translate="yes" xml:space="preserve">
          <source>To administer the database, you can either use the pgAdmin III program (Start ‣ PostgreSQL 9.x ‣ pgAdmin III) or the SQL Shell (Start ‣ PostgreSQL 9.x ‣ SQL Shell). For example, to create a &lt;code&gt;geodjango&lt;/code&gt; spatial database and user, the following may be executed from the SQL Shell as the &lt;code&gt;postgres&lt;/code&gt; user:</source>
          <target state="translated">데이터베이스를 관리하려면 pgAdmin III 프로그램 (Start ‣ PostgreSQL 9.x ‣ pgAdmin III) 또는 SQL Shell (Start ‣ PostgreSQL 9.x ‣ SQL Shell)을 사용할 수 있습니다. 예를 들어, &lt;code&gt;geodjango&lt;/code&gt; 공간 데이터베이스 및 사용자 를 작성하기 위해 &lt;code&gt;postgres&lt;/code&gt; 사용자 로 SQL Shell에서 다음을 실행할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="3c2baea20d36466ca8ed7f665428406738fb5d3e" translate="yes" xml:space="preserve">
          <source>To allow easier reversing of the admin urls in templates, Django provides an &lt;code&gt;admin_urlname&lt;/code&gt; filter which takes an action as argument:</source>
          <target state="translated">템플릿에서 관리 URL을 쉽게 되돌릴 수 있도록 Django는 인수로 조치를 취하는 &lt;code&gt;admin_urlname&lt;/code&gt; 필터를 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="6d1150464cc2b910c095c3d2141260b4849b277b" translate="yes" xml:space="preserve">
          <source>To allow for fine control over the use of localization, Django provides the &lt;code&gt;l10n&lt;/code&gt; template library that contains the following tags and filters.</source>
          <target state="translated">현지화 사용을 세부적으로 제어 할 수 있도록 Django는 다음 태그와 필터가 포함 된 &lt;code&gt;l10n&lt;/code&gt; 템플릿 라이브러리를 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="dbdca08f5ee2393b887a5fa3a94533daf5acb513" translate="yes" xml:space="preserve">
          <source>To apply &lt;a href=&quot;https://www.python.org/dev/peps/pep-3333/#middleware-components-that-play-both-sides&quot;&gt;WSGI middleware&lt;/a&gt; you can wrap the application object. For instance you could add these lines at the bottom of &lt;code&gt;wsgi.py&lt;/code&gt;:</source>
          <target state="translated">&lt;a href=&quot;https://www.python.org/dev/peps/pep-3333/#middleware-components-that-play-both-sides&quot;&gt;WSGI 미들웨어&lt;/a&gt; 를 적용하기 위해 애플리케이션 오브젝트를 랩핑 할 수 있습니다. 예를 들어 &lt;code&gt;wsgi.py&lt;/code&gt; 의 맨 아래에 다음 행을 추가 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="db671c5ae1334e478b85aa188005cd025d89d3ec" translate="yes" xml:space="preserve">
          <source>To apply ASGI middleware, or to embed Django in another ASGI application, you can wrap Django&amp;rsquo;s &lt;code&gt;application&lt;/code&gt; object in the &lt;code&gt;asgi.py&lt;/code&gt; file. For example:</source>
          <target state="translated">ASGI 미들웨어를 적용하거나 다른 ASGI 응용 프로그램에 Django를 임베드하려면 Django의 &lt;code&gt;application&lt;/code&gt; 오브젝트를 &lt;code&gt;asgi.py&lt;/code&gt; 파일 에 랩핑 할 수 있습니다 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="6137e8a1815c49e801851b988828a41b4ba1e902" translate="yes" xml:space="preserve">
          <source>To apply permission checks to &lt;a href=&quot;../../ref/class-based-views/index&quot;&gt;class-based views&lt;/a&gt;, you can use the &lt;code&gt;PermissionRequiredMixin&lt;/code&gt;:</source>
          <target state="translated">&lt;a href=&quot;../../ref/class-based-views/index&quot;&gt;클래스 기반 뷰에&lt;/a&gt; 권한 검사를 적용하려면 &lt;code&gt;PermissionRequiredMixin&lt;/code&gt; 을 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="bca93d9ef1f4c1dce4ed3b11590d8be336743e66" translate="yes" xml:space="preserve">
          <source>To assign exceptions to a specific field, instantiate the &lt;a href=&quot;../exceptions#django.core.exceptions.ValidationError&quot;&gt;&lt;code&gt;ValidationError&lt;/code&gt;&lt;/a&gt; with a dictionary, where the keys are the field names. We could update the previous example to assign the error to the &lt;code&gt;pub_date&lt;/code&gt; field:</source>
          <target state="translated">특정 필드에 예외를 지정하려면 키가 필드 이름 인 사전을 사용 하여 &lt;a href=&quot;../exceptions#django.core.exceptions.ValidationError&quot;&gt; &lt;code&gt;ValidationError&lt;/code&gt; &lt;/a&gt; 를 인스턴스화하십시오 . &lt;code&gt;pub_date&lt;/code&gt; 필드에 오류를 할당하기 위해 이전 예제를 업데이트 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ede70629b0d09c8b97dbec8d253233713d89ab6b" translate="yes" xml:space="preserve">
          <source>To assign the members of a related set, use the &lt;code&gt;set()&lt;/code&gt; method with an iterable of object instances. For example, if &lt;code&gt;e1&lt;/code&gt; and &lt;code&gt;e2&lt;/code&gt; are &lt;code&gt;Entry&lt;/code&gt; instances:</source>
          <target state="translated">관련 세트의 멤버를 지정하려면 반복 가능한 오브젝트 인스턴스와 함께 &lt;code&gt;set()&lt;/code&gt; 메소드를 사용하십시오 . 예를 들어, &lt;code&gt;e1&lt;/code&gt; 및 &lt;code&gt;e2&lt;/code&gt; 가 &lt;code&gt;Entry&lt;/code&gt; 인스턴스 인 경우 :</target>
        </trans-unit>
        <trans-unit id="f9e32117f21ca9c9f566ce0a628f67eca83212b0" translate="yes" xml:space="preserve">
          <source>To assist in the creation of your own test runner, Django provides a number of utility methods in the &lt;code&gt;django.test.utils&lt;/code&gt; module.</source>
          <target state="translated">자체 테스트 러너 생성을 돕기 위해 Django는 &lt;code&gt;django.test.utils&lt;/code&gt; 모듈 에 여러 가지 유틸리티 메소드를 제공 합니다.</target>
        </trans-unit>
        <trans-unit id="25964993506f81e0c3deb951a65ca499da4331c9" translate="yes" xml:space="preserve">
          <source>To avoid a SQL injection vulnerability, &lt;code&gt;extra_context&lt;/code&gt;&lt;a href=&quot;#avoiding-sql-injection-in-query-expressions&quot;&gt;must not contain untrusted user input&lt;/a&gt; as these values are interpolated into the SQL string rather than passed as query parameters, where the database driver would escape them.</source>
          <target state="translated">SQL 인젝션 취약점을 피하기 위해 &lt;code&gt;extra_context&lt;/code&gt; &lt;a href=&quot;#avoiding-sql-injection-in-query-expressions&quot;&gt;는 신뢰할 수없는 사용자 입력&lt;/a&gt; 을 포함하지 않아야 합니다. 이러한 값은 데이터베이스 드라이버가 이스케이프하는 쿼리 매개 변수로 전달되지 않고 SQL 문자열로 보간되기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="deef07f520bbe6d7e76e4a244e5231fbea8ae466" translate="yes" xml:space="preserve">
          <source>To avoid conflicts with user-supplied scripts or libraries, Django&amp;rsquo;s jQuery (version 3.4.1) is namespaced as &lt;code&gt;django.jQuery&lt;/code&gt;. If you want to use jQuery in your own admin JavaScript without including a second copy, you can use the &lt;code&gt;django.jQuery&lt;/code&gt; object on changelist and add/edit views.</source>
          <target state="translated">사용자 제공 스크립트 또는 라이브러리와의 충돌을 피하기 위해 Django의 jQuery (버전 3.4.1)는 이름이 &lt;code&gt;django.jQuery&lt;/code&gt; 입니다. 두 번째 사본을 포함하지 않고 자체 관리 JavaScript에서 jQuery를 사용하려는 경우 변경 목록 및 추가 / 편집보기 에서 &lt;code&gt;django.jQuery&lt;/code&gt; 객체를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="21526195c11da8ea0082583952559fba50732bad" translate="yes" xml:space="preserve">
          <source>To avoid disclosing the referrer URL to third-party sites, you might want to &lt;a href=&quot;https://www.w3.org/TR/referrer-policy/#referrer-policy-delivery&quot;&gt;disable the referer&lt;/a&gt; on your site&amp;rsquo;s &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tags. For example, you might use the &lt;code&gt;&amp;lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&amp;gt;&lt;/code&gt; tag or include the &lt;code&gt;Referrer-Policy: no-referrer&lt;/code&gt; header. Due to the CSRF protection&amp;rsquo;s strict referer checking on HTTPS requests, those techniques cause a CSRF failure on requests with &amp;lsquo;unsafe&amp;rsquo; methods. Instead, use alternatives like &lt;code&gt;&amp;lt;a rel=&quot;noreferrer&quot; ...&amp;gt;&quot;&lt;/code&gt; for links to third-party sites.</source>
          <target state="translated">리퍼러 URL을 타사 사이트에 공개 &lt;a href=&quot;https://www.w3.org/TR/referrer-policy/#referrer-policy-delivery&quot;&gt;하지 않으&lt;/a&gt; 려면 사이트의 &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; 태그 에서 리퍼러 를 비활성화하십시오 . 예를 들어 &lt;code&gt;&amp;lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&amp;gt;&lt;/code&gt; 태그를 사용하거나 &lt;code&gt;Referrer-Policy: no-referrer&lt;/code&gt; 헤더를 포함 할 수 있습니다. HTTPS 요청에 대한 CSRF 보호의 엄격한 참조 검사로 인해 이러한 기술은 '안전하지 않은'방법으로 요청에 CSRF 실패를 유발합니다. 대신 타사 사이트에 대한 링크에는 &lt;code&gt;&amp;lt;a rel=&quot;noreferrer&quot; ...&amp;gt;&quot;&lt;/code&gt; 와 같은 대안을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="ed663276d5c69eb52b887bedbd520624b501f474" translate="yes" xml:space="preserve">
          <source>To avoid performance problems, it is important to understand:</source>
          <target state="translated">성능 문제를 피하려면 다음을 이해해야합니다.</target>
        </trans-unit>
        <trans-unit id="57f657a2849144fa597e4ceaceaf9420af02ff13" translate="yes" xml:space="preserve">
          <source>To avoid repetitions, add &lt;a href=&quot;../middleware#django.contrib.sites.middleware.CurrentSiteMiddleware&quot;&gt;&lt;code&gt;django.contrib.sites.middleware.CurrentSiteMiddleware&lt;/code&gt;&lt;/a&gt; to &lt;a href=&quot;../settings#std:setting-MIDDLEWARE&quot;&gt;&lt;code&gt;MIDDLEWARE&lt;/code&gt;&lt;/a&gt;. The middleware sets the &lt;code&gt;site&lt;/code&gt; attribute on every request object, so you can use &lt;code&gt;request.site&lt;/code&gt; to get the current site.</source>
          <target state="translated">반복을 피하려면 &lt;a href=&quot;../middleware#django.contrib.sites.middleware.CurrentSiteMiddleware&quot;&gt; &lt;code&gt;django.contrib.sites.middleware.CurrentSiteMiddleware&lt;/code&gt; &lt;/a&gt; 를 &lt;a href=&quot;../settings#std:setting-MIDDLEWARE&quot;&gt; &lt;code&gt;MIDDLEWARE&lt;/code&gt; 에&lt;/a&gt; 추가하십시오 . 미들웨어는 모든 요청 오브젝트 에서 &lt;code&gt;site&lt;/code&gt; 속성을 설정 하므로 &lt;code&gt;request.site&lt;/code&gt; 를 사용 하여 현재 사이트를 얻을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1dd3ee780b9486b70d2d099c5e8d39e9acbb69e8" translate="yes" xml:space="preserve">
          <source>To avoid that restriction, you can exclude null objects if you don&amp;rsquo;t care about them:</source>
          <target state="translated">이러한 제한을 피하기 위해 신경 쓰지 않는 객체는 제외 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="35539f80128dc718e0ed6c414fd174f7abe52b5f" translate="yes" xml:space="preserve">
          <source>To avoid the messages being cleared, you can set the messages storage to &lt;code&gt;False&lt;/code&gt; after iterating:</source>
          <target state="translated">메시지가 지워지지 않도록하려면 반복 후에 메시지 스토리지를 &lt;code&gt;False&lt;/code&gt; 로 설정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="fd390d40100a634883249e1a7c438d394024d13b" translate="yes" xml:space="preserve">
          <source>To avoid this problem, save the &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; and reuse it:</source>
          <target state="translated">이 문제를 피하려면 &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; 을&lt;/a&gt; 저장 하고 재사용하십시오.</target>
        </trans-unit>
        <trans-unit id="79eb63821d6c645ec43a986a930bc4e15e92c8a6" translate="yes" xml:space="preserve">
          <source>To avoid this problem, use mod_wsgi&amp;rsquo;s daemon mode with each site in its own daemon process, or override the value from the environment by enforcing &lt;code&gt;os.environ[&quot;DJANGO_SETTINGS_MODULE&quot;] = &quot;mysite.settings&quot;&lt;/code&gt; in your &lt;code&gt;wsgi.py&lt;/code&gt;.</source>
          <target state="translated">이 문제를 자신의 데몬 프로세스의 각 사이트에 사용 mod_wsgi에의 데몬 모드를 피하거나 강화하여 환경에서 값을 재정의하려면 &lt;code&gt;os.environ[&quot;DJANGO_SETTINGS_MODULE&quot;] = &quot;mysite.settings&quot;&lt;/code&gt; 당신에 &lt;code&gt;wsgi.py&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="26d3f84f6c46a0d59965c3cc3c840c98d1a1fcab" translate="yes" xml:space="preserve">
          <source>To avoid this problem, you have two options:</source>
          <target state="translated">이 문제를 피하기 위해 두 가지 옵션이 있습니다.</target>
        </trans-unit>
        <trans-unit id="d3c6594568387210ae8d6b46569033cede27267d" translate="yes" xml:space="preserve">
          <source>To avoid this, you can &lt;a href=&quot;#deactivate-transaction-management&quot;&gt;deactivate the transaction management&lt;/a&gt;, but it isn&amp;rsquo;t recommended.</source>
          <target state="translated">이를 피하기 위해 &lt;a href=&quot;#deactivate-transaction-management&quot;&gt;트랜잭션 관리를 비활성화&lt;/a&gt; 할 수 있지만 권장하지는 않습니다.</target>
        </trans-unit>
        <trans-unit id="69910e5af02b8304bc0c28960e598e4f1be130ad" translate="yes" xml:space="preserve">
          <source>To avoid unauthorized data disclosure, users must have the &lt;code&gt;view&lt;/code&gt; or &lt;code&gt;change&lt;/code&gt; permission to the related object in order to use autocomplete.</source>
          <target state="translated">무단 데이터 공개를 피하려면 사용자는 자동 완성을 사용하기 위해 관련 개체에 대한 &lt;code&gt;view&lt;/code&gt; 또는 &lt;code&gt;change&lt;/code&gt; 권한 이 있어야합니다 .</target>
        </trans-unit>
        <trans-unit id="9a5cf27ae67639ab18ba99e89a9285c2c3a26e9f" translate="yes" xml:space="preserve">
          <source>To be a valid tag library, the module must contain a module-level variable named &lt;code&gt;register&lt;/code&gt; that is a &lt;code&gt;template.Library&lt;/code&gt; instance, in which all the tags and filters are registered. So, near the top of your module, put the following:</source>
          <target state="translated">유효한 태그 라이브러리가 되려면 모듈 에 &lt;code&gt;template.Library&lt;/code&gt; 인스턴스 인 &lt;code&gt;register&lt;/code&gt; 라는 모듈 수준 변수가 포함되어 있어야합니다. 여기서 모든 태그와 필터가 등록됩니다. 따라서 모듈 상단 근처에 다음을 입력하십시오.</target>
        </trans-unit>
        <trans-unit id="785d5727b95fdfb959f5ebc3a08cb5ea0683e2d5" translate="yes" xml:space="preserve">
          <source>To benefit from server-side cursors in transaction pooling mode, you could set up &lt;a href=&quot;../topics/db/multi-db&quot;&gt;another connection to the database&lt;/a&gt; in order to perform queries that use server-side cursors. This connection needs to either be directly to the database or to a connection pooler in session pooling mode.</source>
          <target state="translated">트랜잭션 풀링 모드에서 서버 측 커서의 이점을 얻으려면 서버 측 커서 를 사용하는 쿼리를 수행하기 위해 &lt;a href=&quot;../topics/db/multi-db&quot;&gt;데이터베이스&lt;/a&gt; 에 다른 연결을 설정할 수 있습니다. 이 연결은 데이터베이스 또는 세션 풀링 모드의 연결 풀러에 직접 연결되어야합니다.</target>
        </trans-unit>
        <trans-unit id="8a004f5cf56817eea5c1b103effb0af620f33d08" translate="yes" xml:space="preserve">
          <source>To bind data to a form, pass the data as a dictionary as the first parameter to your &lt;a href=&quot;#django.forms.Form&quot;&gt;&lt;code&gt;Form&lt;/code&gt;&lt;/a&gt; class constructor:</source>
          <target state="translated">데이터를 폼에 바인딩하려면 데이터를 사전으로서 첫 번째 매개 변수로 &lt;a href=&quot;#django.forms.Form&quot;&gt; &lt;code&gt;Form&lt;/code&gt; &lt;/a&gt; 클래스 생성자에 전달하십시오.</target>
        </trans-unit>
        <trans-unit id="429a86afcf41677aac8249b40688515a18343413" translate="yes" xml:space="preserve">
          <source>To cache something is to save the result of an expensive calculation so that you don&amp;rsquo;t have to perform the calculation next time. Here&amp;rsquo;s some pseudocode explaining how this would work for a dynamically generated Web page:</source>
          <target state="translated">무언가를 캐시하는 것은 비싼 계산 결과를 저장하여 다음에 계산을 수행 할 필요가 없도록하는 것입니다. 다음은 동적으로 생성 된 웹 페이지에서 어떻게 작동하는지 설명하는 의사 코드입니다.</target>
        </trans-unit>
        <trans-unit id="0318b973b1a7298760c18d099f44eced97d19880" translate="yes" xml:space="preserve">
          <source>To call a management command from code use &lt;code&gt;call_command&lt;/code&gt;.</source>
          <target state="translated">코드에서 관리 명령을 호출하려면 &lt;code&gt;call_command&lt;/code&gt; 를 사용 하십시오 .</target>
        </trans-unit>
        <trans-unit id="f776c74baec5af745dc2ef5f9edaf14fb9a2834a" translate="yes" xml:space="preserve">
          <source>To capture a value from the URL, use angle brackets.</source>
          <target state="translated">URL에서 값을 캡처하려면 꺾쇠 괄호를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="fadcc5c762a260ecd13e501b90df6f851eb64a7b" translate="yes" xml:space="preserve">
          <source>To change a user&amp;rsquo;s password, you have several options:</source>
          <target state="translated">사용자의 비밀번호를 변경하려면 다음과 같은 몇 가지 옵션이 있습니다.</target>
        </trans-unit>
        <trans-unit id="f3a093dc358406f4c04b67ba7447d99e196308e7" translate="yes" xml:space="preserve">
          <source>To change that, add a &lt;code&gt;feed_type&lt;/code&gt; attribute to your &lt;a href=&quot;#django.contrib.syndication.views.Feed&quot;&gt;&lt;code&gt;Feed&lt;/code&gt;&lt;/a&gt; class, like so:</source>
          <target state="translated">이를 변경하려면 다음과 같이 &lt;code&gt;feed_type&lt;/code&gt; 속성을 &lt;a href=&quot;#django.contrib.syndication.views.Feed&quot;&gt; &lt;code&gt;Feed&lt;/code&gt; &lt;/a&gt; 클래스에 추가 하십시오 .</target>
        </trans-unit>
        <trans-unit id="b84a40400028a77544ff31aeaaac96bf21eff112" translate="yes" xml:space="preserve">
          <source>To change the default tags for a message level (either built-in or custom), set the &lt;a href=&quot;../settings#std:setting-MESSAGE_TAGS&quot;&gt;&lt;code&gt;MESSAGE_TAGS&lt;/code&gt;&lt;/a&gt; setting to a dictionary containing the levels you wish to change. As this extends the default tags, you only need to provide tags for the levels you wish to override:</source>
          <target state="translated">메시지 레벨 (내장 또는 사용자 정의)의 기본 태그를 변경하려면 &lt;a href=&quot;../settings#std:setting-MESSAGE_TAGS&quot;&gt; &lt;code&gt;MESSAGE_TAGS&lt;/code&gt; &lt;/a&gt; 설정을 변경하려는 레벨이 포함 된 사전으로 설정하십시오. 기본 태그가 확장되므로 재정의하려는 수준에 대한 태그 만 제공하면됩니다.</target>
        </trans-unit>
        <trans-unit id="cca9c2ac066d17c89d62f2f413f7eed7c0dbe789" translate="yes" xml:space="preserve">
          <source>To change this default behavior, set the &lt;a href=&quot;../../ref/settings#std:setting-SESSION_SAVE_EVERY_REQUEST&quot;&gt;&lt;code&gt;SESSION_SAVE_EVERY_REQUEST&lt;/code&gt;&lt;/a&gt; setting to &lt;code&gt;True&lt;/code&gt;. When set to &lt;code&gt;True&lt;/code&gt;, Django will save the session to the database on every single request.</source>
          <target state="translated">이 기본 동작을 변경하려면 &lt;a href=&quot;../../ref/settings#std:setting-SESSION_SAVE_EVERY_REQUEST&quot;&gt; &lt;code&gt;SESSION_SAVE_EVERY_REQUEST&lt;/code&gt; &lt;/a&gt; 설정을 &lt;code&gt;True&lt;/code&gt; 로 설정하십시오 . &lt;code&gt;True&lt;/code&gt; 로 설정하면 Django는 모든 단일 요청마다 세션을 데이터베이스에 저장합니다.</target>
        </trans-unit>
        <trans-unit id="b536c24d851a8ce43c0db6fef691629f35c357e9" translate="yes" xml:space="preserve">
          <source>To check for non-field errors use &lt;a href=&quot;../exceptions#django.core.exceptions.NON_FIELD_ERRORS&quot;&gt;&lt;code&gt;NON_FIELD_ERRORS&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;field&lt;/code&gt; parameter.</source>
          <target state="translated">비 필드 오류를 확인하려면 &lt;a href=&quot;../exceptions#django.core.exceptions.NON_FIELD_ERRORS&quot;&gt; &lt;code&gt;NON_FIELD_ERRORS&lt;/code&gt; &lt;/a&gt; 를 &lt;code&gt;field&lt;/code&gt; 매개 변수로 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="ed324dd61ea2957b543e15988d4c86842f352085" translate="yes" xml:space="preserve">
          <source>To check how many errors there are in the formset, we can use the &lt;code&gt;total_error_count&lt;/code&gt; method:</source>
          <target state="translated">formset에 몇 개의 오류가 있는지 확인하기 위해 &lt;code&gt;total_error_count&lt;/code&gt; 메소드를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="df8565ffb053e73530357b489a58b45415e8a21c" translate="yes" xml:space="preserve">
          <source>To check whether or not you have Git installed, enter &lt;code&gt;git&lt;/code&gt; into the command line. If you get messages saying that this command could not be found, you&amp;rsquo;ll have to download and install it, see &lt;a href=&quot;https://git-scm.com/download&quot;&gt;Git&amp;rsquo;s download page&lt;/a&gt;.</source>
          <target state="translated">Git 설치 여부를 확인하려면 명령 행에 &lt;code&gt;git&lt;/code&gt; 을 입력하십시오 . 이 명령을 찾을 수 없다는 메시지가 표시되면 다운로드하여 설치해야 &lt;a href=&quot;https://git-scm.com/download&quot;&gt;합니다&lt;/a&gt; . Git의 다운로드 페이지를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="e54dc4ca69efd7c42ba63f8476851e7063bd5024" translate="yes" xml:space="preserve">
          <source>To comment-out part of a line in a template, use the comment syntax: &lt;code&gt;{# #}&lt;/code&gt;.</source>
          <target state="translated">템플리트에서 라인의 일부를 주석 처리하려면 주석 구문 &lt;code&gt;{# #}&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9d89c468c192d1af5dda0b0dbee6d0fe44189004" translate="yes" xml:space="preserve">
          <source>To commit the changes:</source>
          <target state="translated">변경 사항을 커밋하려면</target>
        </trans-unit>
        <trans-unit id="f8e694ac3969cbbeddcae79474e26c9dc853dbbc" translate="yes" xml:space="preserve">
          <source>To compare two model instances, use the standard Python comparison operator, the double equals sign: &lt;code&gt;==&lt;/code&gt;. Behind the scenes, that compares the primary key values of two models.</source>
          <target state="translated">두 모델 인스턴스를 비교하려면 표준 Python 비교 연산자 인 double equals sign : &lt;code&gt;==&lt;/code&gt; 을 사용하십시오 . 뒤에서 두 모델의 기본 키 값을 비교합니다.</target>
        </trans-unit>
        <trans-unit id="bcc386a2b6a3585d91017cdf0b7a1abbd1c6700c" translate="yes" xml:space="preserve">
          <source>To compensate for this (and any other analogous use cases), &lt;a href=&quot;#django.template.response.TemplateResponse&quot;&gt;&lt;code&gt;TemplateResponse&lt;/code&gt;&lt;/a&gt; allows you to register callbacks that will be invoked when rendering has completed. Using this callback, you can defer critical processing until a point where you can guarantee that rendered content will be available.</source>
          <target state="translated">이를 보상하기 위해 &lt;a href=&quot;#django.template.response.TemplateResponse&quot;&gt; &lt;code&gt;TemplateResponse&lt;/code&gt; 를&lt;/a&gt; 사용하면 렌더링이 완료 될 때 호출 될 콜백을 등록 할 수 있습니다. 이 콜백을 사용하면 렌더링 된 컨텐츠를 사용할 수있을 때까지 중요한 처리를 연기 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a541d5f4a108d5cd1be8ef3d420a0bc13d157984" translate="yes" xml:space="preserve">
          <source>To compensate for this, Django allows you to define that a database is a &lt;em&gt;test mirror&lt;/em&gt;. Consider the following (simplified) example database configuration:</source>
          <target state="translated">이를 보완하기 위해 Django에서는 데이터베이스가 &lt;em&gt;테스트 미러&lt;/em&gt; 임을 정의 할 수 있습니다 . 다음과 같은 단순화 된 데이터베이스 구성 예를 고려하십시오.</target>
        </trans-unit>
        <trans-unit id="12a04d398d239a6fb475bae25ecb9adf989111ee" translate="yes" xml:space="preserve">
          <source>To configure an application, subclass &lt;a href=&quot;#django.apps.AppConfig&quot;&gt;&lt;code&gt;AppConfig&lt;/code&gt;&lt;/a&gt; and put the dotted path to that subclass in &lt;a href=&quot;settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">응용 프로그램을 구성하려면 &lt;a href=&quot;#django.apps.AppConfig&quot;&gt; &lt;code&gt;AppConfig&lt;/code&gt; 를&lt;/a&gt; 서브 클래스로 만들고 &lt;a href=&quot;settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt; 에 해당 서브 클래스에 대한 점선 경로를 넣으십시오 .</target>
        </trans-unit>
        <trans-unit id="a3a8480c7d1ff2854070dec01b6b64346bdba89b" translate="yes" xml:space="preserve">
          <source>To connect a URL to this feed, put an instance of the Feed object in your &lt;a href=&quot;../../topics/http/urls&quot;&gt;URLconf&lt;/a&gt;. For example:</source>
          <target state="translated">이 피드에 URL을 연결하려면 &lt;a href=&quot;../../topics/http/urls&quot;&gt;Feedconf&lt;/a&gt; 인스턴스를 URLconf 에 넣으 십시오 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="e6e0547abad52ce675d4d4084c8b9fcfab4b5475" translate="yes" xml:space="preserve">
          <source>To connect using the service name of your Oracle database, your &lt;code&gt;settings.py&lt;/code&gt; file should look something like this:</source>
          <target state="translated">Oracle 데이터베이스의 서비스 이름을 사용하여 연결하려면 &lt;code&gt;settings.py&lt;/code&gt; 파일은 다음과 같아야합니다.</target>
        </trans-unit>
        <trans-unit id="26fd022c4b2c18d0df746ed6acc7f87347ce222e" translate="yes" xml:space="preserve">
          <source>To continue the example above, we want to add a new link next to the &lt;code&gt;History&lt;/code&gt; tool for the &lt;code&gt;Page&lt;/code&gt; model. After looking at &lt;code&gt;change_form.html&lt;/code&gt; we determine that we only need to override the &lt;code&gt;object-tools-items&lt;/code&gt; block. Therefore here is our new &lt;code&gt;change_form.html&lt;/code&gt; :</source>
          <target state="translated">위의 예제를 계속 진행 하기 위해 &lt;code&gt;Page&lt;/code&gt; 모델 의 &lt;code&gt;History&lt;/code&gt; 도구 옆에 새 링크를 추가하려고합니다 . &lt;code&gt;change_form.html&lt;/code&gt; 을 살펴본 후 &lt;code&gt;object-tools-items&lt;/code&gt; 블록 만 재정의해야한다고 결정합니다 . 따라서 새로운 &lt;code&gt;change_form.html&lt;/code&gt; 은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="f2c667846549e33faa9aa28fbb6b3bee12dbdccd" translate="yes" xml:space="preserve">
          <source>To control auto-escaping for a template, wrap the template (or a particular section of the template) in the &lt;a href=&quot;builtins#std:templatetag-autoescape&quot;&gt;&lt;code&gt;autoescape&lt;/code&gt;&lt;/a&gt; tag, like so:</source>
          <target state="translated">템플릿의 자동 이스케이프를 제어하려면 다음과 같이 템플릿 (또는 템플릿의 특정 섹션)을 자동 이스케이프 태그로 &lt;a href=&quot;builtins#std:templatetag-autoescape&quot;&gt; &lt;code&gt;autoescape&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="19303d4df35892252644e5a55e3516b07f30e99b" translate="yes" xml:space="preserve">
          <source>To control this ordering, you can define dependencies on your &lt;code&gt;natural_key()&lt;/code&gt; methods. You do this by setting a &lt;code&gt;dependencies&lt;/code&gt; attribute on the &lt;code&gt;natural_key()&lt;/code&gt; method itself.</source>
          <target state="translated">이 순서를 제어하기 위해 &lt;code&gt;natural_key()&lt;/code&gt; 메소드 에 대한 종속성을 정의 할 수 있습니다 . &lt;code&gt;natural_key()&lt;/code&gt; 메소드 자체 에 &lt;code&gt;dependencies&lt;/code&gt; 속성을 설정하여이를 수행 합니다.</target>
        </trans-unit>
        <trans-unit id="99fecb3285f7e068f5903a97ae700785a6498b19" translate="yes" xml:space="preserve">
          <source>To create a URLconf in the polls directory, create a file called &lt;code&gt;urls.py&lt;/code&gt;. Your app directory should now look like:</source>
          <target state="translated">polls 디렉토리에 URLconf를 작성하려면 &lt;code&gt;urls.py&lt;/code&gt; 파일을 작성하십시오 . 앱 디렉토리는 이제 다음과 같아야합니다.</target>
        </trans-unit>
        <trans-unit id="52032016d138fa5c63e561b7d618f57a08b4aef9" translate="yes" xml:space="preserve">
          <source>To create a new instance of a model, instantiate it like any other Python class:</source>
          <target state="translated">모델의 새 인스턴스를 만들려면 다른 Python 클래스와 같이 인스턴스화하십시오.</target>
        </trans-unit>
        <trans-unit id="7d2fed90d38f8b6163a3de559cfaa98152decfb8" translate="yes" xml:space="preserve">
          <source>To create a new virtual file-based raster from scratch, use the &lt;code&gt;ds_input&lt;/code&gt; dictionary representation and provide a &lt;code&gt;name&lt;/code&gt; argument that starts with &lt;code&gt;/vsimem/&lt;/code&gt; (for detail of the dictionary representation, see &lt;a href=&quot;#gdal-raster-ds-input&quot;&gt;Creating rasters from data&lt;/a&gt;). For virtual file-based rasters, the &lt;a href=&quot;#django.contrib.gis.gdal.GDALRaster.vsi_buffer&quot;&gt;&lt;code&gt;vsi_buffer&lt;/code&gt;&lt;/a&gt; attribute returns the &lt;code&gt;bytes&lt;/code&gt; representation of the raster.</source>
          <target state="translated">새로운 가상 파일 기반 래스터를 처음부터 새로 만들려면 &lt;code&gt;ds_input&lt;/code&gt; 사전 표현을 사용하고 &lt;code&gt;/vsimem/&lt;/code&gt; 시작 하는 &lt;code&gt;name&lt;/code&gt; 인수를 제공 하십시오 (사전 표현에 대한 자세한 내용 &lt;a href=&quot;#gdal-raster-ds-input&quot;&gt;은 데이터에서 래스터 만들기&lt;/a&gt; 참조 ). 가상 파일 기반 래스터의 경우 &lt;a href=&quot;#django.contrib.gis.gdal.GDALRaster.vsi_buffer&quot;&gt; &lt;code&gt;vsi_buffer&lt;/code&gt; &lt;/a&gt; 속성 은 래스터 의 &lt;code&gt;bytes&lt;/code&gt; 표현을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="947996a21e1bfb97fe8b2846f3e9c220c0789622" translate="yes" xml:space="preserve">
          <source>To create a recursive relationship &amp;ndash; an object that has a many-to-one relationship with itself &amp;ndash; use &lt;code&gt;models.ForeignKey('self',
on_delete=models.CASCADE)&lt;/code&gt;.</source>
          <target state="translated">재귀 관계 &lt;code&gt;models.ForeignKey('self', on_delete=models.CASCADE)&lt;/code&gt; 자신과 다 대일 관계를 갖는 객체)를 만들려면 models.ForeignKey ( 'self', on_delete = models.CASCADE)를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="8d536380a30619d485864568c1f8784082ab2a55" translate="yes" xml:space="preserve">
          <source>To create an object, instantiate it using keyword arguments to the model class, then call &lt;a href=&quot;../../ref/models/instances#django.db.models.Model.save&quot;&gt;&lt;code&gt;save()&lt;/code&gt;&lt;/a&gt; to save it to the database.</source>
          <target state="translated">객체를 만들려면 모델 클래스에 키워드 인수를 사용하여 객체를 인스턴스화 한 다음 &lt;a href=&quot;../../ref/models/instances#django.db.models.Model.save&quot;&gt; &lt;code&gt;save()&lt;/code&gt; &lt;/a&gt; 를 호출 하여 데이터베이스에 저장하십시오.</target>
        </trans-unit>
        <trans-unit id="9f37d4e353b8abdede99c388ab6d26e3fc2dd7aa" translate="yes" xml:space="preserve">
          <source>To create an unbound &lt;a href=&quot;#django.forms.Form&quot;&gt;&lt;code&gt;Form&lt;/code&gt;&lt;/a&gt; instance, instantiate the class:</source>
          <target state="translated">바인딩되지 않은 &lt;a href=&quot;#django.forms.Form&quot;&gt; &lt;code&gt;Form&lt;/code&gt; &lt;/a&gt; 인스턴스 를 만들려면 클래스를 인스턴스화하십시오.</target>
        </trans-unit>
        <trans-unit id="011a549a98496d577af0921044a3ee56323fc5dd" translate="yes" xml:space="preserve">
          <source>To create and save an object in a single step, use the &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.create&quot;&gt;&lt;code&gt;create()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">단일 단계에서 객체를 생성하고 저장하려면 create &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.create&quot;&gt; &lt;code&gt;create()&lt;/code&gt; &lt;/a&gt; 메소드를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="d927819d2ede0031d07a12c92088af78ad090d5c" translate="yes" xml:space="preserve">
          <source>To create any syndication feed, all you have to do is write a short Python class. You can create as many feeds as you want.</source>
          <target state="translated">신디케이션 피드를 만들려면 간단한 Python 클래스를 작성하기 만하면됩니다. 원하는만큼 피드를 만들 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="be1a1a09d943aa71ba713c6b5f7cef69ed90d42f" translate="yes" xml:space="preserve">
          <source>To create custom permissions for a given model object, use the &lt;code&gt;permissions&lt;/code&gt;&lt;a href=&quot;../db/models#meta-options&quot;&gt;model Meta attribute&lt;/a&gt;.</source>
          <target state="translated">지정된 모델 오브젝트에 대한 사용자 정의 권한을 작성하려면 &lt;code&gt;permissions&lt;/code&gt; &lt;a href=&quot;../db/models#meta-options&quot;&gt;모델 Meta 속성을&lt;/a&gt; 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="9da9cd3e68b092c84a139da9eff43b9b8001aefa" translate="yes" xml:space="preserve">
          <source>To create message files, you use the &lt;a href=&quot;../../ref/django-admin#django-admin-makemessages&quot;&gt;&lt;code&gt;django-admin makemessages&lt;/code&gt;&lt;/a&gt; tool. And you use &lt;a href=&quot;../../ref/django-admin#django-admin-compilemessages&quot;&gt;&lt;code&gt;django-admin compilemessages&lt;/code&gt;&lt;/a&gt; to produce the binary &lt;code&gt;.mo&lt;/code&gt; files that are used by &lt;code&gt;gettext&lt;/code&gt;.</source>
          <target state="translated">메시지 파일을 작성하려면 &lt;a href=&quot;../../ref/django-admin#django-admin-makemessages&quot;&gt; &lt;code&gt;django-admin makemessages&lt;/code&gt; &lt;/a&gt; 도구 를 사용하십시오 . 그리고 &lt;a href=&quot;../../ref/django-admin#django-admin-compilemessages&quot;&gt; &lt;code&gt;django-admin compilemessages&lt;/code&gt; &lt;/a&gt; 를 사용하여 &lt;code&gt;gettext&lt;/code&gt; 에서 사용 하는 이진 &lt;code&gt;.mo&lt;/code&gt; 파일 을 생성합니다 .</target>
        </trans-unit>
        <trans-unit id="d242efe6704a40ee42801f2267c7404e62949c2b" translate="yes" xml:space="preserve">
          <source>To create or update a message file, run this command:</source>
          <target state="translated">메시지 파일을 작성하거나 업데이트하려면 다음 명령을 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="7d1c6063183fbb21b7aa5b9fe85bb6661b01cdeb" translate="yes" xml:space="preserve">
          <source>To create such a subset, you refine the initial &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt;, adding filter conditions. The two most common ways to refine a &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; are:</source>
          <target state="translated">이러한 서브 세트를 작성하려면 필터 조건을 추가 하여 초기 &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; &lt;/a&gt; 을 세분화합니다 . &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; &lt;/a&gt; 을 구체화하는 가장 일반적인 두 가지 방법 은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="c3e4afbeac88a57c96d1f86eeace20ee8af9e0f4" translate="yes" xml:space="preserve">
          <source>To create your app, make sure you&amp;rsquo;re in the same directory as &lt;code&gt;manage.py&lt;/code&gt; and type this command:</source>
          <target state="translated">앱을 만들려면 &lt;code&gt;manage.py&lt;/code&gt; 와 같은 디렉토리에 있는지 확인 하고 다음 명령을 입력하십시오.</target>
        </trans-unit>
        <trans-unit id="2f8328088af4281d32c6ca199848c57e8e96e37b" translate="yes" xml:space="preserve">
          <source>To customize how the values are serialized by a serializer, you can override &lt;a href=&quot;../ref/models/fields#django.db.models.Field.value_to_string&quot;&gt;&lt;code&gt;value_to_string()&lt;/code&gt;&lt;/a&gt;. Using &lt;a href=&quot;../ref/models/fields#django.db.models.Field.value_from_object&quot;&gt;&lt;code&gt;value_from_object()&lt;/code&gt;&lt;/a&gt; is the best way to get the field&amp;rsquo;s value prior to serialization. For example, since &lt;code&gt;HandField&lt;/code&gt; uses strings for its data storage anyway, we can reuse some existing conversion code:</source>
          <target state="translated">직렬 변환기로 값을 직렬화하는 방법을 사용자 정의하기 위해 &lt;a href=&quot;../ref/models/fields#django.db.models.Field.value_to_string&quot;&gt; &lt;code&gt;value_to_string()&lt;/code&gt; &lt;/a&gt; 대체 할 수 있습니다 . 직렬화 전에 필드 값을 얻는 가장 좋은 방법은 &lt;a href=&quot;../ref/models/fields#django.db.models.Field.value_from_object&quot;&gt; &lt;code&gt;value_from_object()&lt;/code&gt; &lt;/a&gt; 사용 하는 것입니다. 예를 들어 &lt;code&gt;HandField&lt;/code&gt; 는 데이터 저장소에 문자열을 사용하므로 기존 변환 코드를 재사용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1bc4085932a3f7de1f64dadac93ace75bc8e5407" translate="yes" xml:space="preserve">
          <source>To customize the English formats, a structure like this would be needed:</source>
          <target state="translated">영어 형식을 사용자 정의하려면 다음과 같은 구조가 필요합니다.</target>
        </trans-unit>
        <trans-unit id="92d19f1050a4bae39ae41e6a3e9e309031cfbcc9" translate="yes" xml:space="preserve">
          <source>To customize the form field used by &lt;a href=&quot;../topics/forms/modelforms#django.forms.ModelForm&quot;&gt;&lt;code&gt;ModelForm&lt;/code&gt;&lt;/a&gt;, you can override &lt;a href=&quot;../ref/models/fields#django.db.models.Field.formfield&quot;&gt;&lt;code&gt;formfield()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../topics/forms/modelforms#django.forms.ModelForm&quot;&gt; &lt;code&gt;ModelForm&lt;/code&gt; &lt;/a&gt; 에서 사용하는 양식 필드를 사용자 정의하기 위해 &lt;a href=&quot;../ref/models/fields#django.db.models.Field.formfield&quot;&gt; &lt;code&gt;formfield()&lt;/code&gt; &lt;/a&gt; 대체 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="8f068c92fba4d0414222aa4b49897fe619150a22" translate="yes" xml:space="preserve">
          <source>To decorate every instance of a class-based view, you need to decorate the class definition itself. To do this you apply the decorator to the &lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.View.dispatch&quot;&gt;&lt;code&gt;dispatch()&lt;/code&gt;&lt;/a&gt; method of the class.</source>
          <target state="translated">클래스 기반 뷰의 모든 인스턴스를 장식하려면 클래스 정의 자체를 장식해야합니다. 이를 위해 데코레이터를 클래스 의 &lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.View.dispatch&quot;&gt; &lt;code&gt;dispatch()&lt;/code&gt; &lt;/a&gt; 메서드에 적용합니다 .</target>
        </trans-unit>
        <trans-unit id="2872b31e30f49d7c1aebba06c6e02ba44a3f3f4b" translate="yes" xml:space="preserve">
          <source>To define a many-to-many relationship, use &lt;a href=&quot;../../../ref/models/fields#django.db.models.ManyToManyField&quot;&gt;&lt;code&gt;ManyToManyField&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">다 대다 관계를 정의하려면 &lt;a href=&quot;../../../ref/models/fields#django.db.models.ManyToManyField&quot;&gt; &lt;code&gt;ManyToManyField&lt;/code&gt; 를&lt;/a&gt; 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="dae82fa5bc30d478dd98a696efee612329c4e5c9" translate="yes" xml:space="preserve">
          <source>To define a many-to-many relationship, use &lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField&quot;&gt;&lt;code&gt;ManyToManyField&lt;/code&gt;&lt;/a&gt;. You use it just like any other &lt;a href=&quot;../../ref/models/fields#django.db.models.Field&quot;&gt;&lt;code&gt;Field&lt;/code&gt;&lt;/a&gt; type: by including it as a class attribute of your model.</source>
          <target state="translated">다 대다 관계를 정의하려면 &lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField&quot;&gt; &lt;code&gt;ManyToManyField&lt;/code&gt; 를&lt;/a&gt; 사용하십시오 . 모델의 클래스 속성으로 포함하여 다른 &lt;a href=&quot;../../ref/models/fields#django.db.models.Field&quot;&gt; &lt;code&gt;Field&lt;/code&gt; &lt;/a&gt; 유형 과 마찬가지로 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="dade9858b932f3e6c95fe8e48bda2515ecc92498" translate="yes" xml:space="preserve">
          <source>To define a many-to-one relationship, use &lt;a href=&quot;../../../ref/models/fields#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;ForeignKey&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">다 대일 관계를 정의하려면 &lt;a href=&quot;../../../ref/models/fields#django.db.models.ForeignKey&quot;&gt; &lt;code&gt;ForeignKey&lt;/code&gt; 를&lt;/a&gt; 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="e171564fc237a08520e6641e6c437ba62eff8a00" translate="yes" xml:space="preserve">
          <source>To define a many-to-one relationship, use &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;django.db.models.ForeignKey&lt;/code&gt;&lt;/a&gt;. You use it just like any other &lt;a href=&quot;../../ref/models/fields#django.db.models.Field&quot;&gt;&lt;code&gt;Field&lt;/code&gt;&lt;/a&gt; type: by including it as a class attribute of your model.</source>
          <target state="translated">다 &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey&quot;&gt; &lt;code&gt;django.db.models.ForeignKey&lt;/code&gt; &lt;/a&gt; 관계를 정의하려면 django.db.models.ForeignKey를 사용 하십시오 . 모델의 클래스 속성으로 포함하여 다른 &lt;a href=&quot;../../ref/models/fields#django.db.models.Field&quot;&gt; &lt;code&gt;Field&lt;/code&gt; &lt;/a&gt; 유형 과 마찬가지로 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="c48bf0b88fc5bfae3aa1d666c006cbc4d487392d" translate="yes" xml:space="preserve">
          <source>To define a one-to-one relationship, use &lt;a href=&quot;../../../ref/models/fields#django.db.models.OneToOneField&quot;&gt;&lt;code&gt;OneToOneField&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">일대일 관계를 정의하려면 &lt;a href=&quot;../../../ref/models/fields#django.db.models.OneToOneField&quot;&gt; &lt;code&gt;OneToOneField&lt;/code&gt; 를&lt;/a&gt; 사용 하십시오 .</target>
        </trans-unit>
        <trans-unit id="9b44d37881b3018c0cddf1c7f3dc59ee532f02aa" translate="yes" xml:space="preserve">
          <source>To define a one-to-one relationship, use &lt;a href=&quot;../../ref/models/fields#django.db.models.OneToOneField&quot;&gt;&lt;code&gt;OneToOneField&lt;/code&gt;&lt;/a&gt;. You use it just like any other &lt;code&gt;Field&lt;/code&gt; type: by including it as a class attribute of your model.</source>
          <target state="translated">일대일 관계를 정의하려면 &lt;a href=&quot;../../ref/models/fields#django.db.models.OneToOneField&quot;&gt; &lt;code&gt;OneToOneField&lt;/code&gt; 를&lt;/a&gt; 사용 하십시오 . 모델의 클래스 속성으로 포함하여 다른 &lt;code&gt;Field&lt;/code&gt; 유형 과 마찬가지로 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="0a2ec21b4b086f15cd50c0cffe7c681feee59164" translate="yes" xml:space="preserve">
          <source>To define a post-render callback, define a function that takes a single argument &amp;ndash; response &amp;ndash; and register that function with the template response:</source>
          <target state="translated">렌더링 후 콜백을 정의하려면 단일 인수 (response)를 취하는 함수를 정의하고 해당 함수를 템플리트 응답에 등록하십시오.</target>
        </trans-unit>
        <trans-unit id="419a082f83c3934d23472274f2879d2482c1c5e5" translate="yes" xml:space="preserve">
          <source>To delete an existing &amp;ldquo;no data&amp;rdquo; value, set this property to &lt;code&gt;None&lt;/code&gt; (requires GDAL &amp;ge; 2.1).</source>
          <target state="translated">기존의 &quot;데이터 &lt;code&gt;None&lt;/code&gt; &quot;값을 삭제하려면이 속성을 없음으로 설정하십시오 (GDAL &amp;ge; 2.1 필요).</target>
        </trans-unit>
        <trans-unit id="2893f6545ffed4072381f77e2f2e3fc1fa589413" translate="yes" xml:space="preserve">
          <source>To demonstrate how to use &lt;code&gt;LiveServerTestCase&lt;/code&gt;, let&amp;rsquo;s write a Selenium test. First of all, you need to install the &lt;a href=&quot;https://pypi.org/project/selenium/&quot;&gt;selenium package&lt;/a&gt; into your Python path:</source>
          <target state="translated">&lt;code&gt;LiveServerTestCase&lt;/code&gt; 사용 방법을 보여주기 위해 Selenium 테스트를 작성해 보겠습니다. 우선, &lt;a href=&quot;https://pypi.org/project/selenium/&quot;&gt;셀레늄 패키지&lt;/a&gt; 를 Python 경로 에 설치해야 합니다.</target>
        </trans-unit>
        <trans-unit id="a8fc7be82871502e873a7f0730b6714ede84778a" translate="yes" xml:space="preserve">
          <source>To design URLs for an app, you create a Python module called a &lt;a href=&quot;../topics/http/urls&quot;&gt;URLconf&lt;/a&gt;. A table of contents for your app, it contains a mapping between URL patterns and Python callback functions. URLconfs also serve to decouple URLs from Python code.</source>
          <target state="translated">앱의 URL을 디자인하려면 &lt;a href=&quot;../topics/http/urls&quot;&gt;URLconf&lt;/a&gt; 라는 Python 모듈을 만듭니다 . 앱의 목차에는 URL 패턴과 Python 콜백 함수 간의 매핑이 포함되어 있습니다. URLconf는 또한 파이썬 코드에서 URL을 분리하는 역할을합니다.</target>
        </trans-unit>
        <trans-unit id="5820afde058839863556a37886cf7f3c35f8cc28" translate="yes" xml:space="preserve">
          <source>To design URLs for an app, you create a Python module informally called a &lt;strong&gt;URLconf&lt;/strong&gt; (URL configuration). This module is pure Python code and is a mapping between URL path expressions to Python functions (your views).</source>
          <target state="translated">앱의 URL을 디자인하기 위해 비공식적으로 &lt;strong&gt;URLconf&lt;/strong&gt; (URL 구성) 라는 Python 모듈을 만듭니다 . 이 모듈은 순수 Python 코드이며 URL 경로 표현식과 Python 함수 (보기) 간의 맵핑입니다.</target>
        </trans-unit>
        <trans-unit id="395d77799ab1f70a75973e3f87b8212fa88dd0af" translate="yes" xml:space="preserve">
          <source>To determine what the attribute abbreviation of a unit is, the &lt;code&gt;unit_attname&lt;/code&gt; class method may be used:</source>
          <target state="translated">유닛의 속성 약어가 무엇인지 확인하기 위해 &lt;code&gt;unit_attname&lt;/code&gt; 클래스 메소드를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ca464b4650bfb17c18a6beb0e7cefbe943fcdb23" translate="yes" xml:space="preserve">
          <source>To disable auto-escaping for an individual variable, use the &lt;a href=&quot;builtins#std:templatefilter-safe&quot;&gt;&lt;code&gt;safe&lt;/code&gt;&lt;/a&gt; filter:</source>
          <target state="translated">개별 변수에 대해 자동 이스케이프를 비활성화하려면 &lt;a href=&quot;builtins#std:templatefilter-safe&quot;&gt; &lt;code&gt;safe&lt;/code&gt; &lt;/a&gt; 필터를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="046b5d60aa5f70e8ed5828ef075baccf5a159313" translate="yes" xml:space="preserve">
          <source>To disable localization on a single value, use &lt;a href=&quot;#std:templatefilter-unlocalize&quot;&gt;&lt;code&gt;unlocalize&lt;/code&gt;&lt;/a&gt;. To control localization over a large section of a template, use the &lt;a href=&quot;#std:templatetag-localize&quot;&gt;&lt;code&gt;localize&lt;/code&gt;&lt;/a&gt; template tag.</source>
          <target state="translated">단일 값에서 현지화를 비활성화하려면 &lt;a href=&quot;#std:templatefilter-unlocalize&quot;&gt; &lt;code&gt;unlocalize&lt;/code&gt; 를&lt;/a&gt; 사용하십시오 . 템플릿의 큰 섹션에 대한 지역화를 제어하려면 &lt;a href=&quot;#std:templatetag-localize&quot;&gt; &lt;code&gt;localize&lt;/code&gt; &lt;/a&gt; template 태그를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="bc9c966b3fd128e2b84fd1806ec516ce23f26380" translate="yes" xml:space="preserve">
          <source>To disconnect a receiver from a signal, call &lt;a href=&quot;#django.dispatch.Signal.disconnect&quot;&gt;&lt;code&gt;Signal.disconnect()&lt;/code&gt;&lt;/a&gt;. The arguments are as described in &lt;a href=&quot;#django.dispatch.Signal.connect&quot;&gt;&lt;code&gt;Signal.connect()&lt;/code&gt;&lt;/a&gt;. The method returns &lt;code&gt;True&lt;/code&gt; if a receiver was disconnected and &lt;code&gt;False&lt;/code&gt; if not.</source>
          <target state="translated">신호에서 수신기를 분리하려면 &lt;a href=&quot;#django.dispatch.Signal.disconnect&quot;&gt; &lt;code&gt;Signal.disconnect()&lt;/code&gt; &lt;/a&gt; 호출 하십시오 . 인수는 &lt;a href=&quot;#django.dispatch.Signal.connect&quot;&gt; &lt;code&gt;Signal.connect()&lt;/code&gt; &lt;/a&gt; 설명되어 있습니다. 수신자의 연결이 끊어지면 &lt;code&gt;True&lt;/code&gt; 를 반환 하고 &lt;code&gt;False&lt;/code&gt; 않으면 False를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="94bc266a698569cdba4a9c96c03b4694681bb4d7" translate="yes" xml:space="preserve">
          <source>To display multiple fields on the same line, wrap those fields in their own tuple. In this example, the &lt;code&gt;url&lt;/code&gt; and &lt;code&gt;title&lt;/code&gt; fields will display on the same line and the &lt;code&gt;content&lt;/code&gt; field will be displayed below them on its own line:</source>
          <target state="translated">같은 줄에 여러 필드를 표시하려면 해당 필드를 자체 튜플로 묶습니다. 이 예에서 &lt;code&gt;url&lt;/code&gt; 및 &lt;code&gt;title&lt;/code&gt; 필드는 동일한 행에 표시되고 &lt;code&gt;content&lt;/code&gt; 필드는 자체 행에 그 아래에 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="8a435bc9376c8bf6f39ba05b4f455f762c6c666f" translate="yes" xml:space="preserve">
          <source>To do so, create a &lt;code&gt;models&lt;/code&gt; package. Remove &lt;code&gt;models.py&lt;/code&gt; and create a &lt;code&gt;myapp/models/&lt;/code&gt; directory with an &lt;code&gt;__init__.py&lt;/code&gt; file and the files to store your models. You must import the models in the &lt;code&gt;__init__.py&lt;/code&gt; file.</source>
          <target state="translated">이렇게하려면 &lt;code&gt;models&lt;/code&gt; 패키지를 작성하십시오 . &lt;code&gt;models.py&lt;/code&gt; 를 제거 하고 &lt;code&gt;__init__.py&lt;/code&gt; 파일과 모델을 저장할 파일을 사용하여 &lt;code&gt;myapp/models/&lt;/code&gt; 디렉토리를 작성 하십시오. &lt;code&gt;__init__.py&lt;/code&gt; 파일 에서 모델을 가져와야 합니다.</target>
        </trans-unit>
        <trans-unit id="8e48cc8577b8117545cd5c1fac6935289ee1218d" translate="yes" xml:space="preserve">
          <source>To do that, you&amp;rsquo;ll need to refactor both the compilation function and &lt;code&gt;Node&lt;/code&gt; class, like so:</source>
          <target state="translated">그렇게하려면 다음과 같이 컴파일 함수와 &lt;code&gt;Node&lt;/code&gt; 클래스를 모두 리팩터링해야합니다 .</target>
        </trans-unit>
        <trans-unit id="015c8ac3158ffb2425d248d83d1fa3cccda2d074" translate="yes" xml:space="preserve">
          <source>To do this in Django, use the convenient &lt;a href=&quot;http/decorators#django.views.decorators.vary.vary_on_headers&quot;&gt;&lt;code&gt;django.views.decorators.vary.vary_on_headers()&lt;/code&gt;&lt;/a&gt; view decorator, like so:</source>
          <target state="translated">장고에서이를 수행하려면 다음과 같이 편리한 &lt;a href=&quot;http/decorators#django.views.decorators.vary.vary_on_headers&quot;&gt; &lt;code&gt;django.views.decorators.vary.vary_on_headers()&lt;/code&gt; &lt;/a&gt; 뷰 데코레이터를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="d04028e3d3aa9fd64a2c43588657162b6d43a651" translate="yes" xml:space="preserve">
          <source>To do this, add a &lt;code&gt;management/commands&lt;/code&gt; directory to the application. Django will register a &lt;code&gt;manage.py&lt;/code&gt; command for each Python module in that directory whose name doesn&amp;rsquo;t begin with an underscore. For example:</source>
          <target state="translated">이렇게하려면 &lt;code&gt;management/commands&lt;/code&gt; 디렉토리를 응용 프로그램에 추가하십시오. Django는 이름이 밑줄로 시작하지 않는 해당 디렉토리의 각 Python 모듈에 대해 &lt;code&gt;manage.py&lt;/code&gt; 명령을 등록 합니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="a187773251757133e301e685a94e4f69696e81b6" translate="yes" xml:space="preserve">
          <source>To ease the creation of these types of tags, Django provides a helper function, &lt;code&gt;simple_tag&lt;/code&gt;. This function, which is a method of &lt;code&gt;django.template.Library&lt;/code&gt;, takes a function that accepts any number of arguments, wraps it in a &lt;code&gt;render&lt;/code&gt; function and the other necessary bits mentioned above and registers it with the template system.</source>
          <target state="translated">이러한 유형의 태그를 쉽게 만들 수 있도록 Django는 도우미 함수 &lt;code&gt;simple_tag&lt;/code&gt; 를 제공합니다 . &lt;code&gt;django.template.Library&lt;/code&gt; 의 메소드 인 이 함수는 임의의 수의 인수를 허용하고 &lt;code&gt;render&lt;/code&gt; 함수 및 위에 언급 된 기타 필요한 비트로 랩핑 하여 템플리트 시스템에 등록하는 함수를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="ac6a7de2825b659272a5cbcb6d21e49cb8b5e414" translate="yes" xml:space="preserve">
          <source>To ease the handling of access restrictions in &lt;a href=&quot;../../ref/class-based-views/index&quot;&gt;class-based views&lt;/a&gt;, the &lt;code&gt;AccessMixin&lt;/code&gt; can be used to configure the behavior of a view when access is denied. Authenticated users are denied access with an HTTP 403 Forbidden response. Anonymous users are redirected to the login page or shown an HTTP 403 Forbidden response, depending on the &lt;a href=&quot;#django.contrib.auth.mixins.AccessMixin.raise_exception&quot;&gt;&lt;code&gt;raise_exception&lt;/code&gt;&lt;/a&gt; attribute.</source>
          <target state="translated">에서 액세스 제한의 처리를 쉽게하기 위해 &lt;a href=&quot;../../ref/class-based-views/index&quot;&gt;클래스 기반 뷰&lt;/a&gt; 의 &lt;code&gt;AccessMixin&lt;/code&gt; 는 액세스가 거부 될 때 뷰의 동작을 구성 할 수 있습니다. 인증 된 사용자는 HTTP 403 Forbidden 응답으로 액세스가 거부되었습니다. 익명 사용자는 &lt;a href=&quot;#django.contrib.auth.mixins.AccessMixin.raise_exception&quot;&gt; &lt;code&gt;raise_exception&lt;/code&gt; &lt;/a&gt; 속성 에 따라 로그인 페이지로 리디렉션되거나 HTTP 403 Forbidden 응답이 표시 됩니다.</target>
        </trans-unit>
        <trans-unit id="1c9f026f26119269d8793340cae8e1a3dc596dd5" translate="yes" xml:space="preserve">
          <source>To eliminate such problems, you should minimize dependencies between your models modules and do as little work as possible at import time. To avoid executing code at import time, you can move it into a function and cache its results. The code will be executed when you first need its results. This concept is known as &amp;ldquo;lazy evaluation&amp;rdquo;.</source>
          <target state="translated">이러한 문제를 해결하려면 모델 모듈 간의 종속성을 최소화하고 가져 오기시 가능한 적은 작업을 수행해야합니다. 임포트시 코드 실행을 피하기 위해 코드를 함수로 옮기고 결과를 캐시 할 수 있습니다. 코드는 결과가 처음 필요할 때 실행됩니다. 이 개념을 &quot;게으른 평가&quot;라고합니다.</target>
        </trans-unit>
        <trans-unit id="eb9223ce5a5e8465c9afcc137f1a0d98bbc11a37" translate="yes" xml:space="preserve">
          <source>To enable a form field to localize input and output data use its &lt;code&gt;localize&lt;/code&gt; argument:</source>
          <target state="translated">양식 필드가 입력 및 출력 데이터를 현지화 할 수있게하려면 &lt;code&gt;localize&lt;/code&gt; 인수를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="e2580b71d82ab6c3d1a268bf6d1b068477bda284" translate="yes" xml:space="preserve">
          <source>To enable session functionality, do the following:</source>
          <target state="translated">세션 기능을 사용하려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="24acc81e69f67d37eaf20c17bbc2d6eb343f6d70" translate="yes" xml:space="preserve">
          <source>To enable the &lt;code&gt;ManifestStaticFilesStorage&lt;/code&gt; you have to make sure the following requirements are met:</source>
          <target state="translated">&lt;code&gt;ManifestStaticFilesStorage&lt;/code&gt; 를 사용하려면 다음 요구 사항이 충족되어야합니다.</target>
        </trans-unit>
        <trans-unit id="3ee245dc4b8eff9e75781fd3caa996d167954156" translate="yes" xml:space="preserve">
          <source>To enable the XSS filter in the browser, and force it to always block suspected XSS attacks, you can pass the &lt;code&gt;X-XSS-Protection: 1; mode=block&lt;/code&gt; header. &lt;code&gt;SecurityMiddleware&lt;/code&gt; will do this for all responses if the &lt;a href=&quot;settings#std:setting-SECURE_BROWSER_XSS_FILTER&quot;&gt;&lt;code&gt;SECURE_BROWSER_XSS_FILTER&lt;/code&gt;&lt;/a&gt; setting is &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">브라우저에서 XSS 필터를 활성화하고 의심되는 XSS 공격을 항상 차단하도록 &lt;code&gt;X-XSS-Protection: 1; mode=block&lt;/code&gt; 전달할 수 있습니다 . 1; mode = 블록 헤더. &lt;a href=&quot;settings#std:setting-SECURE_BROWSER_XSS_FILTER&quot;&gt; &lt;code&gt;SECURE_BROWSER_XSS_FILTER&lt;/code&gt; &lt;/a&gt; 설정이 &lt;code&gt;True&lt;/code&gt; 인 경우 &lt;code&gt;SecurityMiddleware&lt;/code&gt; 는 모든 응답에 대해이 작업을 수행합니다 .</target>
        </trans-unit>
        <trans-unit id="80a24be87a3300c9d5a44816fd4ed884418dfd67" translate="yes" xml:space="preserve">
          <source>To enable the sites framework, follow these steps:</source>
          <target state="translated">사이트 프레임 워크를 사용하려면 다음 단계를 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="e3b7b991b3ab59c9058ab1826112b2857c954159" translate="yes" xml:space="preserve">
          <source>To ensure a deterministic ordering of results, the changelist adds &lt;code&gt;pk&lt;/code&gt; to the ordering if it can&amp;rsquo;t find a single or unique together set of fields that provide total ordering.</source>
          <target state="translated">결정적인 결과 순서를 보장하기 위해 변경 목록 은 전체 순서를 제공하는 단일 또는 고유 한 필드 세트를 찾을 수없는 경우 순서에 &lt;code&gt;pk&lt;/code&gt; 를 추가합니다 .</target>
        </trans-unit>
        <trans-unit id="6a9688dde6d0e39a1957ea5c07629e81673447e9" translate="yes" xml:space="preserve">
          <source>To facilitate querying on those attributes, &lt;a href=&quot;#django.db.models.ImageField&quot;&gt;&lt;code&gt;ImageField&lt;/code&gt;&lt;/a&gt; has two extra optional arguments:</source>
          <target state="translated">이러한 속성에 대한 쿼리를 용이하게하기 위해 &lt;a href=&quot;#django.db.models.ImageField&quot;&gt; &lt;code&gt;ImageField&lt;/code&gt; &lt;/a&gt; 에는 두 개의 추가 선택적 인수가 있습니다.</target>
        </trans-unit>
        <trans-unit id="ea5095bad9bc9f9a6e8ce181738596ad35ba48fa" translate="yes" xml:space="preserve">
          <source>To find all the entries where the rating of the entry is less than the sum of the pingback count and comment count, we would issue the query:</source>
          <target state="translated">항목의 등급이 핑백 수와 주석 수의 합보다 작은 모든 항목을 찾으려면 다음과 같이 쿼리를 발행합니다.</target>
        </trans-unit>
        <trans-unit id="17a0f2db08cbc73dca6e330068a6499d6259d0d2" translate="yes" xml:space="preserve">
          <source>To find the appropriate prefix to use, Django will check if the &lt;a href=&quot;../../ref/settings#std:setting-STATIC_URL&quot;&gt;&lt;code&gt;STATIC_URL&lt;/code&gt;&lt;/a&gt; setting is not &lt;code&gt;None&lt;/code&gt; and automatically fall back to using &lt;a href=&quot;../../ref/settings#std:setting-MEDIA_URL&quot;&gt;&lt;code&gt;MEDIA_URL&lt;/code&gt;&lt;/a&gt;. For example, if the &lt;a href=&quot;../../ref/settings#std:setting-MEDIA_URL&quot;&gt;&lt;code&gt;MEDIA_URL&lt;/code&gt;&lt;/a&gt; for your site was &lt;code&gt;'http://uploads.example.com/'&lt;/code&gt; and &lt;a href=&quot;../../ref/settings#std:setting-STATIC_URL&quot;&gt;&lt;code&gt;STATIC_URL&lt;/code&gt;&lt;/a&gt; was &lt;code&gt;None&lt;/code&gt;:</source>
          <target state="translated">경우에 사용하는 적절한 접두사를 찾으려면, 장고 확인합니다 &lt;a href=&quot;../../ref/settings#std:setting-STATIC_URL&quot;&gt; &lt;code&gt;STATIC_URL&lt;/code&gt; 의&lt;/a&gt; 설정은하지 않습니다 &lt;code&gt;None&lt;/code&gt; 자동 사용으로 폴백 &lt;a href=&quot;../../ref/settings#std:setting-MEDIA_URL&quot;&gt; &lt;code&gt;MEDIA_URL&lt;/code&gt; 을&lt;/a&gt; . 예를 들어 사이트 의 &lt;a href=&quot;../../ref/settings#std:setting-MEDIA_URL&quot;&gt; &lt;code&gt;MEDIA_URL&lt;/code&gt; &lt;/a&gt; 이 &lt;code&gt;'http://uploads.example.com/'&lt;/code&gt; 이고 &lt;a href=&quot;../../ref/settings#std:setting-STATIC_URL&quot;&gt; &lt;code&gt;STATIC_URL&lt;/code&gt; &lt;/a&gt; 이 &lt;code&gt;None&lt;/code&gt; 인 경우 :</target>
        </trans-unit>
        <trans-unit id="b5c38eb062fd8cdcf8ffbcb6f36bc1a2f4b32163" translate="yes" xml:space="preserve">
          <source>To force localization of a single value, use &lt;a href=&quot;#std:templatefilter-localize&quot;&gt;&lt;code&gt;localize&lt;/code&gt;&lt;/a&gt;. To control localization over a large section of a template, use the &lt;a href=&quot;#std:templatetag-localize&quot;&gt;&lt;code&gt;localize&lt;/code&gt;&lt;/a&gt; template tag.</source>
          <target state="translated">단일 값을 강제로 지역화하려면 &lt;a href=&quot;#std:templatefilter-localize&quot;&gt; &lt;code&gt;localize&lt;/code&gt; 를&lt;/a&gt; 사용하십시오 . 템플릿의 큰 섹션에 대한 지역화를 제어하려면 &lt;a href=&quot;#std:templatetag-localize&quot;&gt; &lt;code&gt;localize&lt;/code&gt; &lt;/a&gt; template 태그를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="372ec61cc37938b6a73f5b716adef2310993231f" translate="yes" xml:space="preserve">
          <source>To generate the feed&amp;rsquo;s &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;description&amp;gt;&lt;/code&gt;, Django uses the &lt;code&gt;title()&lt;/code&gt;, &lt;code&gt;link()&lt;/code&gt; and &lt;code&gt;description()&lt;/code&gt; methods. In the previous example, they were string class attributes, but this example illustrates that they can be either strings &lt;em&gt;or&lt;/em&gt; methods. For each of &lt;code&gt;title&lt;/code&gt;, &lt;code&gt;link&lt;/code&gt; and &lt;code&gt;description&lt;/code&gt;, Django follows this algorithm:</source>
          <target state="translated">피드의 &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt; , &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; 및 &lt;code&gt;&amp;lt;description&amp;gt;&lt;/code&gt; 을 생성하기 위해 Django는 &lt;code&gt;title()&lt;/code&gt; , &lt;code&gt;link()&lt;/code&gt; 및 &lt;code&gt;description()&lt;/code&gt; 메서드를 사용합니다. 이전 예에서는 문자열 클래스 속성 이었지만이 예에서는 문자열 &lt;em&gt;또는&lt;/em&gt; 메서드 일 수 있음을 보여줍니다 . Django 는 &lt;code&gt;title&lt;/code&gt; , &lt;code&gt;link&lt;/code&gt; 및 &lt;code&gt;description&lt;/code&gt; 각각에 대해 다음 알고리즘을 따릅니다.</target>
        </trans-unit>
        <trans-unit id="872a3aed1348f076a9e2b388f660f42de1a04c63" translate="yes" xml:space="preserve">
          <source>To get from a URL to a view, Django uses what are known as &amp;lsquo;URLconfs&amp;rsquo;. A URLconf maps URL patterns to views.</source>
          <target state="translated">Django는 URL에서보기로 이동하기 위해 'URLconfs'를 사용합니다. URLconf는 URL 패턴을 뷰에 매핑합니다.</target>
        </trans-unit>
        <trans-unit id="86140a0a92495975d1e553a3a6429d74095ba6fb" translate="yes" xml:space="preserve">
          <source>To get the object, &lt;a href=&quot;../../ref/class-based-views/generic-display#django.views.generic.detail.DetailView&quot;&gt;&lt;code&gt;DetailView&lt;/code&gt;&lt;/a&gt; relies on &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin&quot;&gt;&lt;code&gt;SingleObjectMixin&lt;/code&gt;&lt;/a&gt;, which provides a &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin.get_object&quot;&gt;&lt;code&gt;get_object()&lt;/code&gt;&lt;/a&gt; method that figures out the object based on the URL of the request (it looks for &lt;code&gt;pk&lt;/code&gt; and &lt;code&gt;slug&lt;/code&gt; keyword arguments as declared in the URLConf, and looks the object up either from the &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin.model&quot;&gt;&lt;code&gt;model&lt;/code&gt;&lt;/a&gt; attribute on the view, or the &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin.queryset&quot;&gt;&lt;code&gt;queryset&lt;/code&gt;&lt;/a&gt; attribute if that&amp;rsquo;s provided). &lt;code&gt;SingleObjectMixin&lt;/code&gt; also overrides &lt;a href=&quot;../../ref/class-based-views/mixins-simple#django.views.generic.base.ContextMixin.get_context_data&quot;&gt;&lt;code&gt;get_context_data()&lt;/code&gt;&lt;/a&gt;, which is used across all Django&amp;rsquo;s built in class-based views to supply context data for template renders.</source>
          <target state="translated">객체를 얻기 위해 &lt;a href=&quot;../../ref/class-based-views/generic-display#django.views.generic.detail.DetailView&quot;&gt; &lt;code&gt;DetailView&lt;/code&gt; &lt;/a&gt; 는 &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin&quot;&gt; &lt;code&gt;SingleObjectMixin&lt;/code&gt; &lt;/a&gt; 을 사용합니다. 이 객체는 요청의 URL을 기반으로 객체를 파악 하는 &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin.get_object&quot;&gt; &lt;code&gt;get_object()&lt;/code&gt; &lt;/a&gt; 메소드 를 제공합니다 ( URLConf에 선언 된대로 &lt;code&gt;pk&lt;/code&gt; 및 &lt;code&gt;slug&lt;/code&gt; 키워드 인수를 찾고 객체를 찾습니다). 보기 의 &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin.model&quot;&gt; &lt;code&gt;model&lt;/code&gt; &lt;/a&gt; 속성 또는 제공된 경우 &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin.queryset&quot;&gt; &lt;code&gt;queryset&lt;/code&gt; &lt;/a&gt; 속성). &lt;code&gt;SingleObjectMixin&lt;/code&gt; 은 &lt;a href=&quot;../../ref/class-based-views/mixins-simple#django.views.generic.base.ContextMixin.get_context_data&quot;&gt; &lt;code&gt;get_context_data()&lt;/code&gt; &lt;/a&gt; 재정의합니다. get_context_data () 는 모든 장고 내장 클래스 기반 뷰에서 템플릿 렌더에 대한 컨텍스트 데이터를 제공하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="110872093324534d541a3a658d598758a61d8309" translate="yes" xml:space="preserve">
          <source>To get the objects, &lt;a href=&quot;../../ref/class-based-views/generic-display#django.views.generic.list.ListView&quot;&gt;&lt;code&gt;ListView&lt;/code&gt;&lt;/a&gt; uses &lt;a href=&quot;../../ref/class-based-views/mixins-multiple-object#django.views.generic.list.MultipleObjectMixin&quot;&gt;&lt;code&gt;MultipleObjectMixin&lt;/code&gt;&lt;/a&gt;, which provides both &lt;a href=&quot;../../ref/class-based-views/mixins-multiple-object#django.views.generic.list.MultipleObjectMixin.get_queryset&quot;&gt;&lt;code&gt;get_queryset()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../ref/class-based-views/mixins-multiple-object#django.views.generic.list.MultipleObjectMixin.paginate_queryset&quot;&gt;&lt;code&gt;paginate_queryset()&lt;/code&gt;&lt;/a&gt;. Unlike with &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin&quot;&gt;&lt;code&gt;SingleObjectMixin&lt;/code&gt;&lt;/a&gt;, there&amp;rsquo;s no need to key off parts of the URL to figure out the queryset to work with, so the default uses the &lt;a href=&quot;../../ref/class-based-views/mixins-multiple-object#django.views.generic.list.MultipleObjectMixin.queryset&quot;&gt;&lt;code&gt;queryset&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../../ref/class-based-views/mixins-multiple-object#django.views.generic.list.MultipleObjectMixin.model&quot;&gt;&lt;code&gt;model&lt;/code&gt;&lt;/a&gt; attribute on the view class. A common reason to override &lt;a href=&quot;../../ref/class-based-views/mixins-multiple-object#django.views.generic.list.MultipleObjectMixin.get_queryset&quot;&gt;&lt;code&gt;get_queryset()&lt;/code&gt;&lt;/a&gt; here would be to dynamically vary the objects, such as depending on the current user or to exclude posts in the future for a blog.</source>
          <target state="translated">객체를 가져 오기 위해 &lt;a href=&quot;../../ref/class-based-views/generic-display#django.views.generic.list.ListView&quot;&gt; &lt;code&gt;ListView&lt;/code&gt; &lt;/a&gt; 는 &lt;a href=&quot;../../ref/class-based-views/mixins-multiple-object#django.views.generic.list.MultipleObjectMixin&quot;&gt; &lt;code&gt;MultipleObjectMixin&lt;/code&gt; 을&lt;/a&gt; 사용 하여 &lt;a href=&quot;../../ref/class-based-views/mixins-multiple-object#django.views.generic.list.MultipleObjectMixin.get_queryset&quot;&gt; &lt;code&gt;get_queryset()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../../ref/class-based-views/mixins-multiple-object#django.views.generic.list.MultipleObjectMixin.paginate_queryset&quot;&gt; &lt;code&gt;paginate_queryset()&lt;/code&gt; &lt;/a&gt; 모두 제공합니다 . &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin&quot;&gt; &lt;code&gt;SingleObjectMixin&lt;/code&gt; &lt;/a&gt; 과는 달리 URL 세트의 일부를 키 오프 할 필요가 없으므로 작업 할 쿼리 세트 를 파악할 수 있으므로 기본값은 뷰 클래스에서 &lt;a href=&quot;../../ref/class-based-views/mixins-multiple-object#django.views.generic.list.MultipleObjectMixin.queryset&quot;&gt; &lt;code&gt;queryset&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;../../ref/class-based-views/mixins-multiple-object#django.views.generic.list.MultipleObjectMixin.model&quot;&gt; &lt;code&gt;model&lt;/code&gt; &lt;/a&gt; 속성을 사용합니다 . 여기서 &lt;a href=&quot;../../ref/class-based-views/mixins-multiple-object#django.views.generic.list.MultipleObjectMixin.get_queryset&quot;&gt; &lt;code&gt;get_queryset()&lt;/code&gt; &lt;/a&gt; 을 재정의하는 일반적인 이유 는 현재 사용자에 따라 객체를 동적으로 변경하거나 나중에 블로그의 게시물을 제외하기위한 것입니다.</target>
        </trans-unit>
        <trans-unit id="1d6e61c08a5f4c115d3ee7207be498ed2c270080" translate="yes" xml:space="preserve">
          <source>To guess the served files&amp;rsquo; content types, this view relies on the &lt;a href=&quot;https://docs.python.org/3/library/mimetypes.html#module-mimetypes&quot;&gt;&lt;code&gt;mimetypes&lt;/code&gt;&lt;/a&gt; module from the Python standard library, which itself relies on the underlying platform&amp;rsquo;s map files. If you find that this view doesn&amp;rsquo;t return proper content types for certain files, it is most likely that the platform&amp;rsquo;s map files need to be updated. This can be achieved, for example, by installing or updating the &lt;code&gt;mailcap&lt;/code&gt; package on a Red Hat distribution, or &lt;code&gt;mime-support&lt;/code&gt; on a Debian distribution.</source>
          <target state="translated">제공된 파일의 컨텐츠 유형을 추측하기 위해이보기 는 기본 플랫폼의 맵 파일을 사용하는 Python 표준 라이브러리 의 &lt;a href=&quot;https://docs.python.org/3/library/mimetypes.html#module-mimetypes&quot;&gt; &lt;code&gt;mimetypes&lt;/code&gt; &lt;/a&gt; 모듈을 사용합니다. 이보기가 특정 파일에 적합한 컨텐츠 유형을 리턴하지 않는 경우, 플랫폼의 맵 파일을 업데이트해야 할 가능성이 높습니다. 예를 들어, Red Hat 배포판에 &lt;code&gt;mailcap&lt;/code&gt; 패키지를 설치 또는 업데이트 하거나 Debian 배포판에 &lt;code&gt;mime-support&lt;/code&gt; 를 제공하면됩니다.</target>
        </trans-unit>
        <trans-unit id="b0a45414c7fbc9fbd62d16343d19eb31c88222b6" translate="yes" xml:space="preserve">
          <source>To handle both of these situations, Django has a consistent way of processing &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.filter&quot;&gt;&lt;code&gt;filter()&lt;/code&gt;&lt;/a&gt; calls. Everything inside a single &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.filter&quot;&gt;&lt;code&gt;filter()&lt;/code&gt;&lt;/a&gt; call is applied simultaneously to filter out items matching all those requirements. Successive &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.filter&quot;&gt;&lt;code&gt;filter()&lt;/code&gt;&lt;/a&gt; calls further restrict the set of objects, but for multi-valued relations, they apply to any object linked to the primary model, not necessarily those objects that were selected by an earlier &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.filter&quot;&gt;&lt;code&gt;filter()&lt;/code&gt;&lt;/a&gt; call.</source>
          <target state="translated">이 두 가지 상황을 모두 처리하기 위해 Django는 일관된 &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.filter&quot;&gt; &lt;code&gt;filter()&lt;/code&gt; &lt;/a&gt; 호출 처리 방법을 가지고 있습니다. 단일 &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.filter&quot;&gt; &lt;code&gt;filter()&lt;/code&gt; &lt;/a&gt; 호출 내부의 모든 것이 동시에 적용되어 모든 해당 요구 사항과 일치하는 항목을 필터링합니다. 연속적인 &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.filter&quot;&gt; &lt;code&gt;filter()&lt;/code&gt; &lt;/a&gt; 호출은 객체 집합을 추가로 제한하지만 다중 값 관계의 경우 이전 &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.filter&quot;&gt; &lt;code&gt;filter()&lt;/code&gt; &lt;/a&gt; 호출에 의해 선택된 객체 일 필요는 없지만 기본 모델에 연결된 모든 객체에 적용됩니다 .</target>
        </trans-unit>
        <trans-unit id="b4a50b60cf7e9c06cd01fd15f7d5f1a7c22a6484" translate="yes" xml:space="preserve">
          <source>To handle the form we need to instantiate it in the view for the URL where we want it to be published:</source>
          <target state="translated">양식을 처리하려면 양식을 게시 할 URL보기에서 양식을 인스턴스화해야합니다.</target>
        </trans-unit>
        <trans-unit id="c07197c993ac2c801dd32ae7167b30740099f2fa" translate="yes" xml:space="preserve">
          <source>To have the GeoDjango tests executed when &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/internals/contributing/writing-code/unit-tests/#running-unit-tests&quot;&gt;running the Django test suite&lt;/a&gt; with &lt;code&gt;runtests.py&lt;/code&gt; all of the databases in the settings file must be using one of the &lt;a href=&quot;db-api#spatial-backends&quot;&gt;spatial database backends&lt;/a&gt;.</source>
          <target state="translated">때 GeoDjango 실행 된 테스트하도록하려면 &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/internals/contributing/writing-code/unit-tests/#running-unit-tests&quot;&gt;장고 테스트 스위트 실행&lt;/a&gt; 에 &lt;code&gt;runtests.py&lt;/code&gt; 의 하나를 사용해야하는 설정 파일에있는 모든 데이터베이스를 &lt;a href=&quot;db-api#spatial-backends&quot;&gt;공간 데이터베이스 백엔드&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="55390837943cafcfbe39845904315f094b3b86d8" translate="yes" xml:space="preserve">
          <source>To help with this situation, Django provides some model field attributes to assist with model field deprecation using the &lt;a href=&quot;checks&quot;&gt;system checks framework&lt;/a&gt;.</source>
          <target state="translated">이 상황을 돕기 위해 Django는 &lt;a href=&quot;checks&quot;&gt;시스템 검사 프레임 워크를&lt;/a&gt; 사용하여 모델 필드 사용 중단을 지원하는 몇 가지 모델 필드 속성을 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="3fa868cd3d9b3aec964e605bfa411c7585ee4712" translate="yes" xml:space="preserve">
          <source>To help with this, calls to &lt;a href=&quot;../ref/django-admin#django-admin-dumpdata&quot;&gt;&lt;code&gt;dumpdata&lt;/code&gt;&lt;/a&gt; that use the &lt;a href=&quot;../ref/django-admin#cmdoption-dumpdata-natural-foreign&quot;&gt;&lt;code&gt;dumpdata
--natural-foreign&lt;/code&gt;&lt;/a&gt; option will serialize any model with a &lt;code&gt;natural_key()&lt;/code&gt; method before serializing standard primary key objects.</source>
          <target state="translated">이를 돕기 위해 &lt;a href=&quot;../ref/django-admin#cmdoption-dumpdata-natural-foreign&quot;&gt; &lt;code&gt;dumpdata --natural-foreign&lt;/code&gt; &lt;/a&gt; 옵션 을 사용하는 &lt;a href=&quot;../ref/django-admin#django-admin-dumpdata&quot;&gt; &lt;code&gt;dumpdata&lt;/code&gt; &lt;/a&gt; 를 호출하면 표준 기본 키 객체를 직렬화하기 전에 &lt;code&gt;natural_key()&lt;/code&gt; 메소드로 모델을 직렬화합니다.</target>
        </trans-unit>
        <trans-unit id="36c1c8c687f013c30776cc23ab29b3ba04a1203c" translate="yes" xml:space="preserve">
          <source>To help write more concise code, there is also a context manager &lt;a href=&quot;../../ref/utils#django.utils.translation.override&quot;&gt;&lt;code&gt;django.utils.translation.override()&lt;/code&gt;&lt;/a&gt; that stores the current language on enter and restores it on exit. With it, the above example becomes:</source>
          <target state="translated">보다 간결한 코드를 작성하기 위해 현재 언어를 입력 할 때 저장하고 &lt;a href=&quot;../../ref/utils#django.utils.translation.override&quot;&gt; &lt;code&gt;django.utils.translation.override()&lt;/code&gt; &lt;/a&gt; 복원 하는 컨텍스트 관리자 django.utils.translation.override () 도 있습니다. 이를 통해 위의 예는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="8862dcecbd294a7aedd9362eb05c7ec71bdf24fe" translate="yes" xml:space="preserve">
          <source>To help you understand and control the queries issued by your code, Django provides a hook for installing wrapper functions around the execution of database queries. For example, wrappers can count queries, measure query duration, log queries, or even prevent query execution (e.g. to make sure that no queries are issued while rendering a template with prefetched data).</source>
          <target state="translated">코드에서 발행 한 쿼리를 이해하고 제어 할 수 있도록 Django는 데이터베이스 쿼리 실행에 래퍼 함수를 ​​설치하기위한 후크를 제공합니다. 예를 들어 래퍼는 쿼리 수를 계산하고, 쿼리 지속 시간을 측정하고, 쿼리를 로그하거나, 심지어 쿼리 실행을 방지 할 수 있습니다 (예 : 프리 페치 된 데이터로 템플릿을 렌더링하는 동안 쿼리가 실행되지 않도록).</target>
        </trans-unit>
        <trans-unit id="439cde933226bf50c44217055a74b3a42403c75b" translate="yes" xml:space="preserve">
          <source>To implement the command, edit &lt;code&gt;polls/management/commands/closepoll.py&lt;/code&gt; to look like this:</source>
          <target state="translated">명령을 구현하려면 다음과 같이 &lt;code&gt;polls/management/commands/closepoll.py&lt;/code&gt; 를 편집 하십시오.</target>
        </trans-unit>
        <trans-unit id="b916e76253e21ca54c9217491770b582d7eaa17e" translate="yes" xml:space="preserve">
          <source>To import the data, use a LayerMapping in a Python script. Create a file called &lt;code&gt;load.py&lt;/code&gt; inside the &lt;code&gt;world&lt;/code&gt; application, with the following code:</source>
          <target state="translated">데이터를 가져 오려면 Python 스크립트에서 LayerMapping을 사용하십시오. 다음 코드를 사용하여 &lt;code&gt;world&lt;/code&gt; 애플리케이션 내에 &lt;code&gt;load.py&lt;/code&gt; 라는 파일을 작성하십시오 .</target>
        </trans-unit>
        <trans-unit id="60af92dc8f5b0e94deb17cc7423549ad82564edb" translate="yes" xml:space="preserve">
          <source>To include the app in our project, we need to add a reference to its configuration class in the &lt;a href=&quot;../ref/settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; setting. The &lt;code&gt;PollsConfig&lt;/code&gt; class is in the &lt;code&gt;polls/apps.py&lt;/code&gt; file, so its dotted path is &lt;code&gt;'polls.apps.PollsConfig'&lt;/code&gt;. Edit the &lt;code&gt;mysite/settings.py&lt;/code&gt; file and add that dotted path to the &lt;a href=&quot;../ref/settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; setting. It&amp;rsquo;ll look like this:</source>
          <target state="translated">프로젝트에 앱을 포함 시키려면 &lt;a href=&quot;../ref/settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt; 설정 에서 구성 클래스에 대한 참조를 추가해야 합니다. &lt;code&gt;PollsConfig&lt;/code&gt; 의 클래스는에 &lt;code&gt;polls/apps.py&lt;/code&gt; 의 점으로 구분 된 경로는, 그래서 파일 &lt;code&gt;'polls.apps.PollsConfig'&lt;/code&gt; . &lt;code&gt;mysite/settings.py&lt;/code&gt; 파일을 편집하고 해당 점선 경로를 &lt;a href=&quot;../ref/settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt; 설정에 추가하십시오 . 다음과 같이 보일 것입니다 :</target>
        </trans-unit>
        <trans-unit id="b5494acf61c3edda5ad74419617e588766d61374" translate="yes" xml:space="preserve">
          <source>To indicate descending order with &lt;code&gt;admin_order_field&lt;/code&gt; you can use a hyphen prefix on the field name. Using the above example, this would look like:</source>
          <target state="translated">&lt;code&gt;admin_order_field&lt;/code&gt; 로 내림차순을 나타 내기 위해 필드 이름에 하이픈 접두사를 사용할 수 있습니다. 위의 예를 사용하면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="663fc8b167ace03927221027ebbbe5c69337151b" translate="yes" xml:space="preserve">
          <source>To initialize a distance object, pass in a keyword corresponding to the desired &lt;a href=&quot;#supported-units&quot;&gt;unit attribute name&lt;/a&gt; set with desired value. For example, the following creates a distance object representing 5 miles:</source>
          <target state="translated">거리 객체를 초기화하려면 원하는 값으로 설정된 원하는 &lt;a href=&quot;#supported-units&quot;&gt;단위 속성 이름에&lt;/a&gt; 해당하는 키워드를 전달하십시오 . 예를 들어 다음은 5 마일을 나타내는 거리 객체를 만듭니다.</target>
        </trans-unit>
        <trans-unit id="efcb316c243b4e4753af7d20538a04ad894f0869" translate="yes" xml:space="preserve">
          <source>To initialize an area object, pass in a keyword corresponding to the desired &lt;a href=&quot;#supported-units&quot;&gt;unit attribute name&lt;/a&gt; set with desired value. For example, the following creates an area object representing 5 square miles:</source>
          <target state="translated">영역 객체를 초기화하려면 원하는 값으로 설정된 원하는 &lt;a href=&quot;#supported-units&quot;&gt;단위 속성 이름에&lt;/a&gt; 해당하는 키워드를 전달하십시오 . 예를 들어 다음은 5 평방 마일을 나타내는 면적 객체를 만듭니다.</target>
        </trans-unit>
        <trans-unit id="bca2cb3ce403dcc26a97ec2c914946f623320052" translate="yes" xml:space="preserve">
          <source>To install Python on your machine go to &lt;a href=&quot;https://python.org/downloads/&quot;&gt;https://python.org/downloads/&lt;/a&gt;. The website should offer you a download button for the latest Python version. Download the executable installer and run it. Check the boxes next to &lt;code&gt;Install
launcher for all users (recommended)&lt;/code&gt; and &lt;code&gt;Add Python 3.7 to PATH&lt;/code&gt; then click &lt;code&gt;Install Now&lt;/code&gt;.</source>
          <target state="translated">컴퓨터에 Python을 설치하려면 &lt;a href=&quot;https://python.org/downloads/&quot;&gt;https://python.org/downloads/&lt;/a&gt; 로 이동 하십시오 . 웹 사이트는 최신 Python 버전의 다운로드 버튼을 제공해야합니다. 실행 가능한 설치 관리자를 다운로드하여 실행하십시오. 옆에있는 상자를 선택 &lt;code&gt;Install launcher for all users (recommended)&lt;/code&gt; 및 &lt;code&gt;Add Python 3.7 to PATH&lt;/code&gt; 클릭 한 다음 &lt;code&gt;Install Now&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8f78f1937ca4d2db43bc6a4c072e4d3503b60541" translate="yes" xml:space="preserve">
          <source>To install from sources, download the latest amalgamation source archive from the &lt;a href=&quot;https://www.sqlite.org/download.html&quot;&gt;SQLite download page&lt;/a&gt;, and extract:</source>
          <target state="translated">소스에서 설치하려면 &lt;a href=&quot;https://www.sqlite.org/download.html&quot;&gt;SQLite 다운로드 페이지&lt;/a&gt; 에서 최신 통합 소스 아카이브를 다운로드 하고 다음을 추출하십시오.</target>
        </trans-unit>
        <trans-unit id="c3d27e0a865a21c49b4155446e931204fc4c27fa" translate="yes" xml:space="preserve">
          <source>To install pip on your machine, go to &lt;a href=&quot;https://pip.pypa.io/en/latest/installing/&quot;&gt;https://pip.pypa.io/en/latest/installing/&lt;/a&gt;, and follow the &lt;code&gt;Installing with
get-pip.py&lt;/code&gt; instructions.</source>
          <target state="translated">컴퓨터에 pip를 설치하려면 &lt;a href=&quot;https://pip.pypa.io/en/latest/installing/&quot;&gt;https://pip.pypa.io/en/latest/installing/으로&lt;/a&gt; 이동하여 &lt;code&gt;Installing with get-pip.py&lt;/code&gt; 지침을 따르십시오 .</target>
        </trans-unit>
        <trans-unit id="d2c97bb0cf49256da6a2dc6dff3a92e347017f10" translate="yes" xml:space="preserve">
          <source>To install the SpatiaLite library and tools, macOS users can choose between &lt;a href=&quot;index#kyngchaos&quot;&gt;KyngChaos packages&lt;/a&gt; and &lt;a href=&quot;https://brew.sh/&quot;&gt;Homebrew&lt;/a&gt;.</source>
          <target state="translated">SpatiaLite 라이브러리 및 도구를 설치하기 위해 macOS 사용자는 &lt;a href=&quot;index#kyngchaos&quot;&gt;KyngChaos 패키지&lt;/a&gt; 와 &lt;a href=&quot;https://brew.sh/&quot;&gt;Homebrew&lt;/a&gt; 중에서 선택할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="332f5d6a4f2adec8bc6af8f01d7b8894c9c763fe" translate="yes" xml:space="preserve">
          <source>To install the flatpages app, follow these steps:</source>
          <target state="translated">플랫 페이지 앱을 설치하려면 다음 단계를 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="8de2dd2276bcb92b9289d896631bf5dd2523d0ed" translate="yes" xml:space="preserve">
          <source>To install the package, use pip (you already &lt;a href=&quot;#installing-reusable-apps-prerequisites&quot;&gt;installed it&lt;/a&gt;, right?):</source>
          <target state="translated">패키지를 설치하려면 pip를 사용하십시오 (이미 &lt;a href=&quot;#installing-reusable-apps-prerequisites&quot;&gt;설치&lt;/a&gt; 했습니까?).</target>
        </trans-unit>
        <trans-unit id="09c0a9c4801033c8f72097f1838b668c116f5be0" translate="yes" xml:space="preserve">
          <source>To install the redirects app, follow these steps:</source>
          <target state="translated">리디렉션 앱을 설치하려면 다음 단계를 따르십시오.</target>
        </trans-unit>
        <trans-unit id="78fbe61602ac6a7e6bba367f20ba27fae2db0d6c" translate="yes" xml:space="preserve">
          <source>To install the sitemap app, follow these steps:</source>
          <target state="translated">사이트 맵 앱을 설치하려면 다음 단계를 따르십시오.</target>
        </trans-unit>
        <trans-unit id="824b4c34fb9ac5138e832a58b3411e367bf75c08" translate="yes" xml:space="preserve">
          <source>To learn how to override templates in other Django applications, see &lt;a href=&quot;../../howto/overriding-templates&quot;&gt;Overriding templates&lt;/a&gt;.</source>
          <target state="translated">다른 Django 애플리케이션에서 템플릿을 재정의하는 방법을 배우려면 템플릿 &lt;a href=&quot;../../howto/overriding-templates&quot;&gt;재정의를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="baeb731f5a4fdce35c27f8560acee99c588e78a6" translate="yes" xml:space="preserve">
          <source>To learn more about the &lt;code&gt;UploadedFile&lt;/code&gt; object, see the &lt;a href=&quot;../../topics/http/file-uploads&quot;&gt;file uploads documentation&lt;/a&gt;.</source>
          <target state="translated">에 대한 자세한 내용은 &lt;code&gt;UploadedFile&lt;/code&gt; 의 객체의 참조 &lt;a href=&quot;../../topics/http/file-uploads&quot;&gt;파일 업로드 문서를&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="3e12b8b61f18e17444f9429502061a5c915de384" translate="yes" xml:space="preserve">
          <source>To limit access based on certain permissions or some other test, you&amp;rsquo;d do essentially the same thing as described in the previous section.</source>
          <target state="translated">특정 권한 또는 다른 테스트를 기반으로 액세스를 제한하려면 본질적으로 이전 섹션에서 설명한 것과 동일한 작업을 수행해야합니다.</target>
        </trans-unit>
        <trans-unit id="c6642d8e8226a78aceffb3cc4d0d84a3b0028db2" translate="yes" xml:space="preserve">
          <source>To link to static files that are saved in &lt;a href=&quot;../settings#std:setting-STATIC_ROOT&quot;&gt;&lt;code&gt;STATIC_ROOT&lt;/code&gt;&lt;/a&gt; Django ships with a &lt;a href=&quot;#std:templatetag-static&quot;&gt;&lt;code&gt;static&lt;/code&gt;&lt;/a&gt; template tag. If the &lt;a href=&quot;../contrib/staticfiles#module-django.contrib.staticfiles&quot;&gt;&lt;code&gt;django.contrib.staticfiles&lt;/code&gt;&lt;/a&gt; app is installed, the tag will serve files using &lt;code&gt;url()&lt;/code&gt; method of the storage specified by &lt;a href=&quot;../settings#std:setting-STATICFILES_STORAGE&quot;&gt;&lt;code&gt;STATICFILES_STORAGE&lt;/code&gt;&lt;/a&gt;. For example:</source>
          <target state="translated">&lt;a href=&quot;../settings#std:setting-STATIC_ROOT&quot;&gt; &lt;code&gt;STATIC_ROOT&lt;/code&gt; 에&lt;/a&gt; 저장된 정적 파일에 링크하기 Django는 &lt;a href=&quot;#std:templatetag-static&quot;&gt; &lt;code&gt;static&lt;/code&gt; &lt;/a&gt; 템플릿 태그 와 함께 제공됩니다 . 는 IF &lt;a href=&quot;../contrib/staticfiles#module-django.contrib.staticfiles&quot;&gt; &lt;code&gt;django.contrib.staticfiles&lt;/code&gt; 의&lt;/a&gt; 응용 프로그램이 설치되어, 태그는 사용하여 파일을 제공합니다 &lt;code&gt;url()&lt;/code&gt; 에 의해 지정된 저장 방법 &lt;a href=&quot;../settings#std:setting-STATICFILES_STORAGE&quot;&gt; &lt;code&gt;STATICFILES_STORAGE&lt;/code&gt; 을&lt;/a&gt; . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="a0aa289d09bd2328bab59548d716cb199de13b92" translate="yes" xml:space="preserve">
          <source>To load a template that&amp;rsquo;s within a subdirectory, use a slash, like so:</source>
          <target state="translated">서브 디렉토리 내에있는 템플리트를로드하려면 다음과 같이 슬래시를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="0bf8929d8524b86ef2921f048bfcd6cfe4db0c77" translate="yes" xml:space="preserve">
          <source>To log a user in, from a view, use &lt;a href=&quot;#django.contrib.auth.login&quot;&gt;&lt;code&gt;login()&lt;/code&gt;&lt;/a&gt;. It takes an &lt;a href=&quot;../../ref/request-response#django.http.HttpRequest&quot;&gt;&lt;code&gt;HttpRequest&lt;/code&gt;&lt;/a&gt; object and a &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User&quot;&gt;&lt;code&gt;User&lt;/code&gt;&lt;/a&gt; object. &lt;a href=&quot;#django.contrib.auth.login&quot;&gt;&lt;code&gt;login()&lt;/code&gt;&lt;/a&gt; saves the user&amp;rsquo;s ID in the session, using Django&amp;rsquo;s session framework.</source>
          <target state="translated">보기에서 사용자를 &lt;a href=&quot;#django.contrib.auth.login&quot;&gt; &lt;code&gt;login()&lt;/code&gt; &lt;/a&gt; 하려면 login ()을 사용하십시오 . 그것은 소요 &lt;a href=&quot;../../ref/request-response#django.http.HttpRequest&quot;&gt; &lt;code&gt;HttpRequest&lt;/code&gt; 를의&lt;/a&gt; 객체와 &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User&quot;&gt; &lt;code&gt;User&lt;/code&gt; &lt;/a&gt; 객체를. &lt;a href=&quot;#django.contrib.auth.login&quot;&gt; &lt;code&gt;login()&lt;/code&gt; &lt;/a&gt; 은 Django의 세션 프레임 워크를 사용하여 세션에 사용자의 ID를 저장합니다.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
