<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="django">
    <body>
      <group id="django">
        <trans-unit id="7b9b9769e53002854792a4a2aef63e323f7eb217" translate="yes" xml:space="preserve">
          <source>Django distributes test cases &amp;mdash; &lt;a href=&quot;https://docs.python.org/3/library/unittest.html#unittest.TestCase&quot;&gt;&lt;code&gt;unittest.TestCase&lt;/code&gt;&lt;/a&gt; subclasses &amp;mdash; to subprocesses. If there are fewer test cases than configured processes, Django will reduce the number of processes accordingly.</source>
          <target state="translated">Django는 테스트 케이스 ( &lt;a href=&quot;https://docs.python.org/3/library/unittest.html#unittest.TestCase&quot;&gt; &lt;code&gt;unittest.TestCase&lt;/code&gt; &lt;/a&gt; 서브 클래스)를 서브 프로세스로 분배 합니다. 구성된 프로세스보다 테스트 사례가 적 으면 장고는 이에 따라 프로세스 수를 줄입니다.</target>
        </trans-unit>
        <trans-unit id="c20a67bd4e7d540c86cace9b5093dadacefe0411" translate="yes" xml:space="preserve">
          <source>Django documentation</source>
          <target state="translated">장고 문서</target>
        </trans-unit>
        <trans-unit id="a54e2388db184e0be01389aa4f540db554e32ffc" translate="yes" xml:space="preserve">
          <source>Django does &lt;em&gt;not&lt;/em&gt; provide automatic purging of expired sessions. Therefore, it&amp;rsquo;s your job to purge expired sessions on a regular basis. Django provides a clean-up management command for this purpose: &lt;a href=&quot;../../ref/django-admin#django-admin-clearsessions&quot;&gt;&lt;code&gt;clearsessions&lt;/code&gt;&lt;/a&gt;. It&amp;rsquo;s recommended to call this command on a regular basis, for example as a daily cron job.</source>
          <target state="translated">Django는 만료 된 세션을 자동으로 제거 하지 &lt;em&gt;않습니다&lt;/em&gt; . 따라서 만료 된 세션을 정기적으로 제거하는 것이 귀하의 임무입니다. Django는 이러한 목적으로 정리 관리 명령을 제공합니다 : &lt;a href=&quot;../../ref/django-admin#django-admin-clearsessions&quot;&gt; &lt;code&gt;clearsessions&lt;/code&gt; &lt;/a&gt; . 이 명령을 정기적으로 (예 : 매일 cron 작업으로) 호출하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="4cf9cb6045fc195aa253bbb8684ec026054536d9" translate="yes" xml:space="preserve">
          <source>Django does make one adjustment to the &lt;a href=&quot;#meta-options&quot;&gt;Meta&lt;/a&gt; class of an abstract base class: before installing the &lt;a href=&quot;#meta-options&quot;&gt;Meta&lt;/a&gt; attribute, it sets &lt;code&gt;abstract=False&lt;/code&gt;. This means that children of abstract base classes don&amp;rsquo;t automatically become abstract classes themselves. Of course, you can make an abstract base class that inherits from another abstract base class. You just need to remember to explicitly set &lt;code&gt;abstract=True&lt;/code&gt; each time.</source>
          <target state="translated">Django는 추상 기본 클래스 의 &lt;a href=&quot;#meta-options&quot;&gt;Meta&lt;/a&gt; 클래스 를 한 번 조정 합니다. &lt;a href=&quot;#meta-options&quot;&gt;Meta&lt;/a&gt; 속성을 설치하기 전에 &lt;code&gt;abstract=False&lt;/code&gt; 를 설정합니다 . 이것은 추상 기본 클래스의 자식이 자동으로 추상 클래스가되지 않음을 의미합니다. 물론 다른 추상 기본 클래스에서 상속되는 추상 기본 클래스를 만들 수 있습니다. 매번 &lt;code&gt;abstract=True&lt;/code&gt; 를 명시 적으로 설정해야합니다 .</target>
        </trans-unit>
        <trans-unit id="6a593c7c70f8899a734509f16aa5a08087294d76" translate="yes" xml:space="preserve">
          <source>Django does not create the tablespaces for you. Please refer to your database engine&amp;rsquo;s documentation for details on creating and managing tablespaces.</source>
          <target state="translated">장고는 테이블 스페이스를 만들지 않습니다. 테이블 스페이스 작성 및 관리에 대한 세부 사항은 데이터베이스 엔진 문서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="4bd1d6376f8e33273a3f445bbb0bd6eccb658bab" translate="yes" xml:space="preserve">
          <source>Django does not decode the data of file uploads, because that data is normally treated as collections of bytes, rather than strings. Any automatic decoding there would alter the meaning of the stream of bytes.</source>
          <target state="translated">Django는 파일 업로드 데이터를 디코딩하지 않습니다. 데이터는 일반적으로 문자열이 아닌 바이트 모음으로 취급되기 때문입니다. 자동 디코딩은 바이트 스트림의 의미를 변경합니다.</target>
        </trans-unit>
        <trans-unit id="0f4122f1bab004b5a2004ece4957893cb6542add" translate="yes" xml:space="preserve">
          <source>Django does not provide a shortcut function which returns a &lt;a href=&quot;../../ref/template-response#django.template.response.TemplateResponse&quot;&gt;&lt;code&gt;TemplateResponse&lt;/code&gt;&lt;/a&gt; because the constructor of &lt;a href=&quot;../../ref/template-response#django.template.response.TemplateResponse&quot;&gt;&lt;code&gt;TemplateResponse&lt;/code&gt;&lt;/a&gt; offers the same level of convenience as &lt;a href=&quot;#django.shortcuts.render&quot;&gt;&lt;code&gt;render()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">장고는 반환하는 바로 가기 기능을 제공하지 않습니다 &lt;a href=&quot;../../ref/template-response#django.template.response.TemplateResponse&quot;&gt; &lt;code&gt;TemplateResponse&lt;/code&gt; 을&lt;/a&gt; 의 생성자 때문에 &lt;a href=&quot;../../ref/template-response#django.template.response.TemplateResponse&quot;&gt; &lt;code&gt;TemplateResponse&lt;/code&gt; 는&lt;/a&gt; 편의상 동일한 수준의 제공 &lt;a href=&quot;#django.shortcuts.render&quot;&gt; &lt;code&gt;render()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="cf7486cb1405ce982c266da7b1d379cd457fc359" translate="yes" xml:space="preserve">
          <source>Django does not store raw (clear text) passwords on the user model, but only a hash (see &lt;a href=&quot;passwords&quot;&gt;documentation of how passwords are managed&lt;/a&gt; for full details). Because of this, do not attempt to manipulate the password attribute of the user directly. This is why a helper function is used when creating a user.</source>
          <target state="translated">Django는 사용자 모델에 원시 (일반 텍스트) 암호를 저장하지 않고 해시 만 저장합니다 (자세한 내용 &lt;a href=&quot;passwords&quot;&gt;은 암호 관리 방법에&lt;/a&gt; 대한 설명서 참조). 이 때문에 사용자의 비밀번호 속성을 직접 조작하지 마십시오. 이것이 사용자 생성시 도우미 기능이 사용되는 이유입니다.</target>
        </trans-unit>
        <trans-unit id="65bc3cefde3e8cc25b3e343e7b2f91618d07f26f" translate="yes" xml:space="preserve">
          <source>Django does not support custom plural equations in po files. As all translation catalogs are merged, only the plural form for the main Django po file (in &lt;code&gt;django/conf/locale/&amp;lt;lang_code&amp;gt;/LC_MESSAGES/django.po&lt;/code&gt;) is considered. Plural forms in all other po files are ignored. Therefore, you should not use different plural equations in your project or application po files.</source>
          <target state="translated">Django는 po 파일에서 사용자 지정 복수 방정식을 지원하지 않습니다. 모든 번역 카탈로그가 병합되면 기본 장고 po 파일 ( &lt;code&gt;django/conf/locale/&amp;lt;lang_code&amp;gt;/LC_MESSAGES/django.po&lt;/code&gt; ) 의 복수 형식 만 고려됩니다. 다른 모든 po 파일의 복수 형태는 무시됩니다. 따라서 프로젝트 또는 애플리케이션 po 파일에서 다른 복수 방정식을 사용해서는 안됩니다.</target>
        </trans-unit>
        <trans-unit id="7cc1197185c10a4fad7e1b8592975a401d9e6130" translate="yes" xml:space="preserve">
          <source>Django does not throttle requests to authenticate users. To protect against brute-force attacks against the authentication system, you may consider deploying a Django plugin or Web server module to throttle these requests.</source>
          <target state="translated">Django는 사용자 인증 요청을 제한하지 않습니다. 인증 시스템에 대한 무차별 대입 공격을 방지하려면 이러한 요청을 조절하기 위해 Django 플러그인 또는 웹 서버 모듈을 배포하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="37fb55e326c8ef6d4f90489c74d66848e9dbfff1" translate="yes" xml:space="preserve">
          <source>Django does this by taking all of your existing migrations, extracting their &lt;code&gt;Operation&lt;/code&gt;s and putting them all in sequence, and then running an optimizer over them to try and reduce the length of the list - for example, it knows that &lt;a href=&quot;../ref/migration-operations#django.db.migrations.operations.CreateModel&quot;&gt;&lt;code&gt;CreateModel&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../ref/migration-operations#django.db.migrations.operations.DeleteModel&quot;&gt;&lt;code&gt;DeleteModel&lt;/code&gt;&lt;/a&gt; cancel each other out, and it knows that &lt;a href=&quot;../ref/migration-operations#django.db.migrations.operations.AddField&quot;&gt;&lt;code&gt;AddField&lt;/code&gt;&lt;/a&gt; can be rolled into &lt;a href=&quot;../ref/migration-operations#django.db.migrations.operations.CreateModel&quot;&gt;&lt;code&gt;CreateModel&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Django는 기존의 모든 마이그레이션을 가져 와서 &lt;code&gt;Operation&lt;/code&gt; 을 추출하여 순서대로 배치 한 다음 옵티 마이저를 실행하여 목록의 길이를 시도하고 줄입니다. 예를 들어 &lt;a href=&quot;../ref/migration-operations#django.db.migrations.operations.CreateModel&quot;&gt; &lt;code&gt;CreateModel&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../ref/migration-operations#django.db.migrations.operations.DeleteModel&quot;&gt; &lt;code&gt;DeleteModel&lt;/code&gt; 은&lt;/a&gt; 각각을 취소합니다. 다른 것은 &lt;a href=&quot;../ref/migration-operations#django.db.migrations.operations.AddField&quot;&gt; &lt;code&gt;AddField&lt;/code&gt; &lt;/a&gt; 가 &lt;a href=&quot;../ref/migration-operations#django.db.migrations.operations.CreateModel&quot;&gt; &lt;code&gt;CreateModel&lt;/code&gt; 에&lt;/a&gt; 롤링 될 수 있다는 것을 알고 있습니다 .</target>
        </trans-unit>
        <trans-unit id="82ae71e67ae963b1dd7a92e07ea16260462f15d1" translate="yes" xml:space="preserve">
          <source>Django does this to allow context data to override context processors in APIs such as &lt;a href=&quot;../../topics/http/shortcuts#django.shortcuts.render&quot;&gt;&lt;code&gt;render()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../template-response#django.template.response.TemplateResponse&quot;&gt;&lt;code&gt;TemplateResponse&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Django는 컨텍스트 데이터가 &lt;a href=&quot;../../topics/http/shortcuts#django.shortcuts.render&quot;&gt; &lt;code&gt;render()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../template-response#django.template.response.TemplateResponse&quot;&gt; &lt;code&gt;TemplateResponse&lt;/code&gt; &lt;/a&gt; 와 같은 API의 컨텍스트 프로세서를 재정의 할 수 있도록하기 위해이를 수행합니다 .</target>
        </trans-unit>
        <trans-unit id="ac6fcc4bb4c4e7f1aa9254bd445c8658d6b99fa6" translate="yes" xml:space="preserve">
          <source>Django doesn&amp;rsquo;t convert naive datetime objects, because they could be ambiguous, and because your code should never produce naive datetimes when time zone support is enabled. However, you can force conversion with the template filters described below.</source>
          <target state="translated">장고는 순진한 날짜 / 시간 객체를 모호하게 만들 수 있고 표준 시간대 지원이 활성화 된 경우 코드에서 순진한 날짜 / 시간을 생성하지 않기 때문에 순진한 날짜 / 시간 객체를 변환하지 않습니다. 그러나 아래 설명 된 템플릿 필터를 사용하여 강제로 변환 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="00781acfb4fdfcf177022756c672306ef41d0562" translate="yes" xml:space="preserve">
          <source>Django doesn&amp;rsquo;t create database defaults when a &lt;a href=&quot;models/fields#django.db.models.Field.default&quot;&gt;&lt;code&gt;default&lt;/code&gt;&lt;/a&gt; is specified on a model field. Similarly, database defaults aren&amp;rsquo;t translated to model field defaults or detected in any fashion by &lt;code&gt;inspectdb&lt;/code&gt;.</source>
          <target state="translated">Django는 모델 필드에 &lt;a href=&quot;models/fields#django.db.models.Field.default&quot;&gt; &lt;code&gt;default&lt;/code&gt; &lt;/a&gt; 이 지정된 경우 데이터베이스 기본값을 만들지 않습니다 . 마찬가지로 데이터베이스 기본값은 모델 필드 기본값으로 변환되거나 &lt;code&gt;inspectdb&lt;/code&gt; 에 의해 어떤 방식 으로든 감지되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="e5ab3f7567f91c6a56929b75b65f0567ee1880ed" translate="yes" xml:space="preserve">
          <source>Django doesn&amp;rsquo;t currently provide any support for foreign key or many-to-many relationships spanning multiple databases. If you have used a router to partition models to different databases, any foreign key and many-to-many relationships defined by those models must be internal to a single database.</source>
          <target state="translated">Django는 현재 여러 데이터베이스에 걸쳐 외래 키 또는 다 대다 관계를 지원하지 않습니다. 라우터를 사용하여 모델을 다른 데이터베이스로 분할 한 경우 해당 모델로 정의 된 외래 키와 다 대다 관계는 단일 데이터베이스 내부에 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="b3f503fa4adb7b8d4f85851af2d68a21bad94839" translate="yes" xml:space="preserve">
          <source>Django doesn&amp;rsquo;t provide an API to start a transaction. The expected way to start a transaction is to disable autocommit with &lt;a href=&quot;#django.db.transaction.set_autocommit&quot;&gt;&lt;code&gt;set_autocommit()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Django는 트랜잭션을 시작하기위한 API를 제공하지 않습니다. 트랜잭션을 시작하는 예상 방법은 &lt;a href=&quot;#django.db.transaction.set_autocommit&quot;&gt; &lt;code&gt;set_autocommit()&lt;/code&gt; &lt;/a&gt; 자동 커밋을 비활성화하는 것 입니다.</target>
        </trans-unit>
        <trans-unit id="9c146dfca214fe96d9d6cba06eebec828a3171d2" translate="yes" xml:space="preserve">
          <source>Django doesn&amp;rsquo;t serve files itself; it leaves that job to whichever Web server you choose.</source>
          <target state="translated">Django는 파일 자체를 제공하지 않습니다. 선택한 웹 서버에 해당 작업을 남깁니다.</target>
        </trans-unit>
        <trans-unit id="1325d36f47045355942f2d52af7d62ead86d0315" translate="yes" xml:space="preserve">
          <source>Django doesn&amp;rsquo;t set these attributes itself but makes use of them if set by your application.</source>
          <target state="translated">Django는 이러한 속성 자체를 설정하지 않지만 응용 프로그램에서 설정 한 경우 이러한 속성을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="17994fac69363539ee8b3c389265fa06ec1c378a" translate="yes" xml:space="preserve">
          <source>Django doesn&amp;rsquo;t use &lt;code&gt;xgettext&lt;/code&gt; alone. It uses Python wrappers around &lt;code&gt;xgettext&lt;/code&gt; and &lt;code&gt;msgfmt&lt;/code&gt;. This is mostly for convenience.</source>
          <target state="translated">장고는 &lt;code&gt;xgettext&lt;/code&gt; 만 사용하지 않습니다 . &lt;code&gt;xgettext&lt;/code&gt; 및 &lt;code&gt;msgfmt&lt;/code&gt; 주위에 Python 래퍼를 사용합니다 . 이것은 대부분 편의상입니다.</target>
        </trans-unit>
        <trans-unit id="7f43d4b968d4ed4a00af207bb46310a7796bead5" translate="yes" xml:space="preserve">
          <source>Django expects the database to support Unicode (UTF-8 encoding) and delegates to it the task of enforcing transactions and referential integrity. It is important to be aware of the fact that the two latter ones aren&amp;rsquo;t actually enforced by MySQL when using the MyISAM storage engine, see the next section.</source>
          <target state="translated">Django는 데이터베이스가 유니 코드 (UTF-8 인코딩)를 지원하고 트랜잭션 및 참조 무결성 강화 작업을 위임합니다. MyISAM 스토리지 엔진을 사용할 때 두 개의 후자가 실제로 MySQL에 의해 적용되지 않는다는 사실을 알고 있어야합니다. 다음 섹션을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="f9e8972bb2f165186e29e9ae744af7e73e9a6c15" translate="yes" xml:space="preserve">
          <source>Django generally prefers to use the empty string (&lt;code&gt;''&lt;/code&gt;) rather than &lt;code&gt;NULL&lt;/code&gt;, but Oracle treats both identically. To get around this, the Oracle backend ignores an explicit &lt;code&gt;null&lt;/code&gt; option on fields that have the empty string as a possible value and generates DDL as if &lt;code&gt;null=True&lt;/code&gt;. When fetching from the database, it is assumed that a &lt;code&gt;NULL&lt;/code&gt; value in one of these fields really means the empty string, and the data is silently converted to reflect this assumption.</source>
          <target state="translated">Django는 일반적으로 &lt;code&gt;NULL&lt;/code&gt; 대신 빈 문자열 ( &lt;code&gt;''&lt;/code&gt; )을 선호 하지만 Oracle은 둘 다 동일하게 취급합니다. 이 문제를 해결하기 위해 Oracle 백엔드는 빈 문자열을 가능한 값으로 갖는 필드 에서 명시적인 &lt;code&gt;null&lt;/code&gt; 옵션을 무시하고 &lt;code&gt;null=True&lt;/code&gt; 인 것처럼 DDL을 생성 합니다. 데이터베이스에서 페치 할 때 이러한 필드 중 하나의 &lt;code&gt;NULL&lt;/code&gt; 값은 실제로 빈 문자열을 의미하며 데이터는이 가정을 반영하도록 자동으로 변환 된다고 가정합니다.</target>
        </trans-unit>
        <trans-unit id="536b57203973a94f32f1a4d6dc9ecb4600d00792" translate="yes" xml:space="preserve">
          <source>Django gives you a few ways to control how database transactions are managed.</source>
          <target state="translated">Django는 데이터베이스 트랜잭션 관리 방법을 제어 할 수있는 몇 가지 방법을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="015dea89431c59127f3fdcd0b32f55fdb3a28299" translate="yes" xml:space="preserve">
          <source>Django gives you two ways of performing raw SQL queries: you can use &lt;a href=&quot;#django.db.models.Manager.raw&quot;&gt;&lt;code&gt;Manager.raw()&lt;/code&gt;&lt;/a&gt; to &lt;a href=&quot;#performing-raw-queries&quot;&gt;perform raw queries and return model instances&lt;/a&gt;, or you can avoid the model layer entirely and &lt;a href=&quot;#executing-custom-sql-directly&quot;&gt;execute custom SQL directly&lt;/a&gt;.</source>
          <target state="translated">Django는 원시 SQL 쿼리를 수행하는 두 가지 방법을 제공합니다. &lt;a href=&quot;#django.db.models.Manager.raw&quot;&gt; &lt;code&gt;Manager.raw()&lt;/code&gt; &lt;/a&gt; 를 &lt;a href=&quot;#performing-raw-queries&quot;&gt;사용하여 원시 쿼리&lt;/a&gt; 를 수행하고 모델 인스턴스를 반환 하거나 모델 계층을 완전히 피하고 &lt;a href=&quot;#executing-custom-sql-directly&quot;&gt;사용자 지정 SQL을 직접 실행할 수 있습니다&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="9f52479f9485c0077d52232ebe731fa3caa0197d" translate="yes" xml:space="preserve">
          <source>Django handles three distinct parts of the work involved in forms:</source>
          <target state="translated">Django는 형태와 관련된 작업의 세 가지 다른 부분을 처리합니다.</target>
        </trans-unit>
        <trans-unit id="27a8816ff05147db4a9535f197841dee85c6acc5" translate="yes" xml:space="preserve">
          <source>Django has a lot of documentation. A high-level overview of how it&amp;rsquo;s organized will help you know where to look for certain things:</source>
          <target state="translated">장고에는 많은 문서가 있습니다. 그것이 어떻게 구성되어 있는지에 대한 개괄적 인 개요는 당신이 어떤 것을 찾을 곳을 알 수 있도록 도와줍니다 :</target>
        </trans-unit>
        <trans-unit id="e79f00c9808b4f3ff76b0675616d3189e6dca217" translate="yes" xml:space="preserve">
          <source>Django has a template search path, which allows you to minimize redundancy among templates. In your Django settings, you specify a list of directories to check for templates with &lt;a href=&quot;../ref/settings#std:setting-TEMPLATES-DIRS&quot;&gt;&lt;code&gt;DIRS&lt;/code&gt;&lt;/a&gt;. If a template doesn&amp;rsquo;t exist in the first directory, it checks the second, and so on.</source>
          <target state="translated">Django에는 템플릿 검색 경로가있어 템플릿 간 중복을 최소화 할 수 있습니다. Django 설정에서 &lt;a href=&quot;../ref/settings#std:setting-TEMPLATES-DIRS&quot;&gt; &lt;code&gt;DIRS&lt;/code&gt; &lt;/a&gt; 로 템플릿을 확인할 디렉토리 목록을 지정합니다 . 첫 번째 디렉토리에 템플릿이 없으면 두 번째 디렉토리 등을 확인합니다.</target>
        </trans-unit>
        <trans-unit id="29c1d05d19207dd8b9bb99458e65acfb0689326d" translate="yes" xml:space="preserve">
          <source>Django has built-in protection against most types of CSRF attacks, providing you have &lt;a href=&quot;../ref/csrf#using-csrf&quot;&gt;enabled and used it&lt;/a&gt; where appropriate. However, as with any mitigation technique, there are limitations. For example, it is possible to disable the CSRF module globally or for particular views. You should only do this if you know what you are doing. There are other &lt;a href=&quot;../ref/csrf#csrf-limitations&quot;&gt;limitations&lt;/a&gt; if your site has subdomains that are outside of your control.</source>
          <target state="translated">Django는 대부분의 유형의 CSRF 공격에 대한 보호 기능을 내장 &lt;a href=&quot;../ref/csrf#using-csrf&quot;&gt;하고&lt;/a&gt; 있어 적절한 경우 이를 사용하고 사용할 수 있습니다. 그러나 모든 완화 기술과 마찬가지로 제한이 있습니다. 예를 들어 CSRF 모듈을 전체적으로 또는 특정보기에 대해 비활성화 할 수 있습니다. 현재하고있는 일을 알고있는 경우에만이 작업을 수행해야합니다. 사이트에 귀하의 통제 범위를 벗어난 하위 도메인이있는 경우 다른 &lt;a href=&quot;../ref/csrf#csrf-limitations&quot;&gt;제한 사항&lt;/a&gt; 이 있습니다.</target>
        </trans-unit>
        <trans-unit id="dccebfb5c2856dd5dc59701f84c7494e4ddc8e3a" translate="yes" xml:space="preserve">
          <source>Django has developing support for asynchronous (&amp;ldquo;async&amp;rdquo;) Python, but does not yet support asynchronous views or middleware; they will be coming in a future release.</source>
          <target state="translated">Django는 비동기 ( &quot;비동기&quot;) Python 지원을 개발하고 있지만 아직 비동기 뷰나 미들웨어를 지원하지 않습니다. 그들은 향후 릴리스에서 올 것입니다.</target>
        </trans-unit>
        <trans-unit id="70171ba1481e458bdd6f4ea8f7ba4ccc3bcb0412" translate="yes" xml:space="preserve">
          <source>Django has full support for &lt;a href=&quot;translation&quot;&gt;translation of text&lt;/a&gt;, &lt;a href=&quot;formatting&quot;&gt;formatting of dates, times and numbers&lt;/a&gt;, and &lt;a href=&quot;timezones&quot;&gt;time zones&lt;/a&gt;.</source>
          <target state="translated">Django는 &lt;a href=&quot;translation&quot;&gt;텍스트 번역&lt;/a&gt; , &lt;a href=&quot;formatting&quot;&gt;날짜, 시간 및 숫자 형식&lt;/a&gt; 및 &lt;a href=&quot;timezones&quot;&gt;시간대&lt;/a&gt; 를 완벽하게 지원 합니다 .</target>
        </trans-unit>
        <trans-unit id="02212fe30cb464bd0cb4d2f5c7255cb588a37675" translate="yes" xml:space="preserve">
          <source>Django has the concept of &amp;ldquo;views&amp;rdquo; to encapsulate the logic responsible for processing a user&amp;rsquo;s request and for returning the response. Find all you need to know about views via the links below:</source>
          <target state="translated">Django는 사용자의 요청을 처리하고 응답을 반환하는 논리를 캡슐화하는 &quot;보기&quot;개념을 가지고 있습니다. 아래 링크를 통해 뷰에 대해 알아야 할 모든 것을 찾으십시오.</target>
        </trans-unit>
        <trans-unit id="8f6f29879aaa7b24e5eddf6585895a4b12c3f27f" translate="yes" xml:space="preserve">
          <source>Django has two base classes that follow the query expression API and from where all Django builtin lookups are derived:</source>
          <target state="translated">Django에는 쿼리 표현식 API를 따르고 모든 Django 내장 조회가 파생되는 두 가지 기본 클래스가 있습니다.</target>
        </trans-unit>
        <trans-unit id="be84eb125a834e74b80c2e3097a204ff36350539" translate="yes" xml:space="preserve">
          <source>Django includes a &amp;ldquo;signal dispatcher&amp;rdquo; which helps allow decoupled applications get notified when actions occur elsewhere in the framework. In a nutshell, signals allow certain &lt;em&gt;senders&lt;/em&gt; to notify a set of &lt;em&gt;receivers&lt;/em&gt; that some action has taken place. They&amp;rsquo;re especially useful when many pieces of code may be interested in the same events.</source>
          <target state="translated">Django에는 &quot;신호 디스패처&quot;가 포함되어있어 프레임 워크의 다른 곳에서 작업이 발생할 때 분리 된 응용 프로그램에 알릴 수 있습니다. 간단히 말해서, 신호를 통해 특정 &lt;em&gt;발신자&lt;/em&gt; 가 일련의 &lt;em&gt;수신자&lt;/em&gt; 에게 조치가 발생했음을 알릴 수 있습니다. 많은 코드 조각이 동일한 이벤트에 관심이있을 때 특히 유용합니다.</target>
        </trans-unit>
        <trans-unit id="95c98177d04c670efd39a48328d99ce1c912aeb0" translate="yes" xml:space="preserve">
          <source>Django includes a &lt;a href=&quot;#module-django.contrib.contenttypes&quot;&gt;&lt;code&gt;contenttypes&lt;/code&gt;&lt;/a&gt; application that can track all of the models installed in your Django-powered project, providing a high-level, generic interface for working with your models.</source>
          <target state="translated">Django에는 Django 기반 프로젝트에 설치된 모든 모델을 추적 할 수 있는 &lt;a href=&quot;#module-django.contrib.contenttypes&quot;&gt; &lt;code&gt;contenttypes&lt;/code&gt; &lt;/a&gt; 응용 프로그램이 포함되어있어 모델 작업을위한 높은 수준의 일반적인 인터페이스를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="8f052430bd328242c3971f45fe45b01bbd6079d7" translate="yes" xml:space="preserve">
          <source>Django includes a &lt;a href=&quot;../../ref/settings#std:setting-TIME_ZONE&quot;&gt;&lt;code&gt;TIME_ZONE&lt;/code&gt;&lt;/a&gt; setting that defaults to &lt;code&gt;America/Chicago&lt;/code&gt;. This probably isn&amp;rsquo;t where you live, so you might want to change it in your settings file.</source>
          <target state="translated">Django에는 &lt;a href=&quot;../../ref/settings#std:setting-TIME_ZONE&quot;&gt; &lt;code&gt;TIME_ZONE&lt;/code&gt; &lt;/a&gt; 설정이 포함되어 있으며 기본값은 &lt;code&gt;America/Chicago&lt;/code&gt; 입니다. 이것은 아마도 당신이 살고있는 곳이 아니기 때문에 설정 파일에서 변경하고 싶을 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="458388d11f65fde27fe771afc19b0bb7b7ebe648" translate="yes" xml:space="preserve">
          <source>Django includes a number of &lt;code&gt;HttpResponse&lt;/code&gt; subclasses that handle different types of HTTP responses. Like &lt;code&gt;HttpResponse&lt;/code&gt;, these subclasses live in &lt;a href=&quot;#module-django.http&quot;&gt;&lt;code&gt;django.http&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Django에는 다양한 유형의 HTTP 응답을 처리 하는 많은 &lt;code&gt;HttpResponse&lt;/code&gt; 서브 클래스가 포함되어 있습니다. &lt;code&gt;HttpResponse&lt;/code&gt; 와 마찬가지로이 서브 클래스는 &lt;a href=&quot;#module-django.http&quot;&gt; &lt;code&gt;django.http&lt;/code&gt; 에&lt;/a&gt; 있습니다.</target>
        </trans-unit>
        <trans-unit id="889426a65b3fcbafa209dd0d2e2335cd4097af62" translate="yes" xml:space="preserve">
          <source>Django includes default views and templates for several HTTP error codes. You may want to override the default templates by creating the following templates in your root template directory: &lt;code&gt;404.html&lt;/code&gt;, &lt;code&gt;500.html&lt;/code&gt;, &lt;code&gt;403.html&lt;/code&gt;, and &lt;code&gt;400.html&lt;/code&gt;. The &lt;a href=&quot;../../ref/views#error-views&quot;&gt;default error views&lt;/a&gt; that use these templates should suffice for 99% of Web applications, but you can &lt;a href=&quot;../../topics/http/views#customizing-error-views&quot;&gt;customize them&lt;/a&gt; as well.</source>
          <target state="translated">Django에는 여러 HTTP 오류 코드에 대한 기본보기 및 템플릿이 포함되어 있습니다. : 당신은 당신의 루트 템플릿 디렉토리에 다음 템플릿을 작성하여 기본 템플릿을 재정의 할 수 있습니다 &lt;code&gt;404.html&lt;/code&gt; , &lt;code&gt;500.html&lt;/code&gt; , &lt;code&gt;403.html&lt;/code&gt; 과 &lt;code&gt;400.html&lt;/code&gt; 을 . 이러한 템플릿을 사용 하는 &lt;a href=&quot;../../ref/views#error-views&quot;&gt;기본 오류보기&lt;/a&gt; 는 웹 응용 프로그램의 99 %에 충분하지만 &lt;a href=&quot;../../topics/http/views#customizing-error-views&quot;&gt;사용자 정의&lt;/a&gt; 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="4b1ddc4008820604470f2b37fdb58cc12683176d" translate="yes" xml:space="preserve">
          <source>Django includes four validators:</source>
          <target state="translated">장고에는 네 가지 유효성 검사기가 있습니다.</target>
        </trans-unit>
        <trans-unit id="d982af0e146a95c3fdad2da04478ab52508cee2e" translate="yes" xml:space="preserve">
          <source>Django includes getting-started documentation for the following ASGI servers:</source>
          <target state="translated">Django에는 다음 ASGI 서버에 대한 시작 설명서가 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="f4e3a0f6836080b1a437607ead12ee23154d9bb7" translate="yes" xml:space="preserve">
          <source>Django includes getting-started documentation for the following WSGI servers:</source>
          <target state="translated">Django에는 다음 WSGI 서버에 대한 시작 설명서가 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="0ab315223bded83f350627251bec56c9651e75dd" translate="yes" xml:space="preserve">
          <source>Django includes many &lt;a href=&quot;../../topics/security&quot;&gt;security features&lt;/a&gt;. Some are built-in and always enabled. Others are optional because they aren&amp;rsquo;t always appropriate, or because they&amp;rsquo;re inconvenient for development. For example, forcing HTTPS may not be suitable for all websites, and it&amp;rsquo;s impractical for local development.</source>
          <target state="translated">Django에는 많은 &lt;a href=&quot;../../topics/security&quot;&gt;보안 기능이&lt;/a&gt; 포함되어 있습니다 . 일부는 내장되어 있으며 항상 활성화되어 있습니다. 다른 것들은 항상 적절하지 않거나 개발에 불편하기 때문에 선택 사항입니다. 예를 들어 HTTPS 강제 적용은 모든 웹 사이트에 적합하지 않을 수 있으며 로컬 개발에는 실용적이지 않습니다.</target>
        </trans-unit>
        <trans-unit id="19f1d90d2f2adb78cf256194f312c4801f7a5470" translate="yes" xml:space="preserve">
          <source>Django initializes your middleware with only the &lt;code&gt;get_response&lt;/code&gt; argument, so you can&amp;rsquo;t define &lt;code&gt;__init__()&lt;/code&gt; as requiring any other arguments.</source>
          <target state="translated">Django는 &lt;code&gt;get_response&lt;/code&gt; 인수 만 사용하여 미들웨어를 초기화 하므로 다른 인수가 필요한 것으로 &lt;code&gt;__init__()&lt;/code&gt; 을 정의 할 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="a3fea8dbbe7a338b352bdae1f450b071ec197f74" translate="yes" xml:space="preserve">
          <source>Django inserts the given SQL snippet directly into the &lt;code&gt;SELECT&lt;/code&gt; statement, so the resulting SQL of the above example would be something like:</source>
          <target state="translated">Django는 주어진 SQL 스 니펫을 &lt;code&gt;SELECT&lt;/code&gt; 문에 직접 삽입 하므로 위 예제의 결과 SQL은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="afdb59ef1b6ee4ec4f5cb447427cc133e45be7f6" translate="yes" xml:space="preserve">
          <source>Django is a Python Web framework. See &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/faq/install/#faq-python-version-support&quot;&gt;What Python version can I use with Django?&lt;/a&gt; for details.</source>
          <target state="translated">Django는 Python 웹 프레임 워크입니다. &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/faq/install/#faq-python-version-support&quot;&gt;Django와 함께 사용할 수있는 Python 버전을&lt;/a&gt; 참조하십시오 . 자세한 내용은.</target>
        </trans-unit>
        <trans-unit id="482ea90df7eed9b987c7c25b2f922c8b9edb5bca" translate="yes" xml:space="preserve">
          <source>Django is a Python web framework, thus requiring Python to be installed on your machine. At the time of writing, Python 3.7 is the latest version.</source>
          <target state="translated">Django는 Python 웹 프레임 워크이므로 컴퓨터에 Python을 설치해야합니다. 글을 쓰는 시점에서 Python 3.7은 최신 버전입니다.</target>
        </trans-unit>
        <trans-unit id="e1f335da822bd02cbc874978d6f8f3baa1622b97" translate="yes" xml:space="preserve">
          <source>Django is designed for short-lived requests. Streaming responses will tie a worker process for the entire duration of the response. This may result in poor performance.</source>
          <target state="translated">Django는 단기 요청을 위해 설계되었습니다. 스트리밍 응답은 전체 응답 기간 동안 작업자 프로세스를 연결합니다. 성능이 저하 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b2bac1d86c0e2adfea324586f9103faccfe93125" translate="yes" xml:space="preserve">
          <source>Django is full of shortcuts to make Web developers&amp;rsquo; lives easier, but all those tools are of no use if you can&amp;rsquo;t easily deploy your sites. Since Django&amp;rsquo;s inception, ease of deployment has been a major goal.</source>
          <target state="translated">Django는 웹 개발자의 삶을 편하게하는 지름길로 가득 차 있지만 사이트를 쉽게 배포 할 수없는 경우 이러한 도구는 모두 쓸모가 없습니다. Django가 시작된 이래로 배포가 쉬워졌습니다.</target>
        </trans-unit>
        <trans-unit id="201fd29496e4248c34f32949f8bac670ba3b1dc2" translate="yes" xml:space="preserve">
          <source>Django is itself quite lazy. A good example of this can be found in the evaluation of &lt;code&gt;QuerySets&lt;/code&gt;. &lt;a href=&quot;db/queries#querysets-are-lazy&quot;&gt;QuerySets are lazy&lt;/a&gt;. Thus a &lt;code&gt;QuerySet&lt;/code&gt; can be created, passed around and combined with other &lt;code&gt;QuerySets&lt;/code&gt;, without actually incurring any trips to the database to fetch the items it describes. What gets passed around is the &lt;code&gt;QuerySet&lt;/code&gt; object, not the collection of items that - eventually - will be required from the database.</source>
          <target state="translated">장고 자체는 꽤 게으르다. 이에 대한 좋은 예는 &lt;code&gt;QuerySets&lt;/code&gt; 평가에서 찾을 수 있습니다 . &lt;a href=&quot;db/queries#querysets-are-lazy&quot;&gt;QuerySet가 게으 릅니다&lt;/a&gt; . 따라서 &lt;code&gt;QuerySet&lt;/code&gt; 만들어 서로 건네과 결합 될 수있다 &lt;code&gt;QuerySets&lt;/code&gt; 실제로 그것을 설명하는 항목을 가져 오기 위해 데이터베이스에 어떤 여행을 들이지 않고. 전달되는 것은 결국 데이터베이스에서 필요로하는 항목의 콜렉션이 아니라 &lt;code&gt;QuerySet&lt;/code&gt; 오브젝트입니다.</target>
        </trans-unit>
        <trans-unit id="0549ee619ca20fd5aa3ed339b9b900d280cdf7f0" translate="yes" xml:space="preserve">
          <source>Django is, and will continue to be, a database-agnostic web framework. We would encourage those writing reusable applications for the Django community to write database-agnostic code where practical. However, we recognize that real world projects written using Django need not be database-agnostic. In fact, once a project reaches a given size changing the underlying data store is already a significant challenge and is likely to require changing the code base in some ways to handle differences between the data stores.</source>
          <target state="translated">Django는 데이터베이스에 구애받지 않는 웹 프레임 워크이며 앞으로도 계속 될 것입니다. Django 커뮤니티에서 재사용 가능한 응용 프로그램을 작성하는 사람들은 가능한 경우 데이터베이스에 독립적 인 코드를 작성하는 것이 좋습니다. 그러나 Django를 사용하여 작성된 실제 프로젝트는 데이터베이스에 구애받지 않아도됩니다. 실제로, 프로젝트가 주어진 크기에 도달하면 기본 데이터 저장소를 변경하는 것은 이미 중요한 과제이며 데이터 저장소 간의 차이를 처리하기 위해 몇 가지 방법으로 코드베이스를 변경해야합니다.</target>
        </trans-unit>
        <trans-unit id="912735e93e4352d0c76bd3908101b4394a009011" translate="yes" xml:space="preserve">
          <source>Django itself uses this signal to reset various data:</source>
          <target state="translated">장고 자체는이 신호를 사용하여 다양한 데이터를 재설정합니다.</target>
        </trans-unit>
        <trans-unit id="f85ad78c669804577f4d4ad5aff882094205b842" translate="yes" xml:space="preserve">
          <source>Django loads that Python module and looks for the variable &lt;code&gt;urlpatterns&lt;/code&gt;. This should be a &lt;a href=&quot;https://docs.python.org/3/glossary.html#term-sequence&quot;&gt;sequence&lt;/a&gt; of &lt;a href=&quot;../../ref/urls#django.urls.path&quot;&gt;&lt;code&gt;django.urls.path()&lt;/code&gt;&lt;/a&gt; and/or &lt;a href=&quot;../../ref/urls#django.urls.re_path&quot;&gt;&lt;code&gt;django.urls.re_path()&lt;/code&gt;&lt;/a&gt; instances.</source>
          <target state="translated">Django는 해당 Python 모듈을로드하고 변수 &lt;code&gt;urlpatterns&lt;/code&gt; 를 찾습니다 . 이것은되어야 &lt;a href=&quot;https://docs.python.org/3/glossary.html#term-sequence&quot;&gt;시퀀스&lt;/a&gt; 의 &lt;a href=&quot;../../ref/urls#django.urls.path&quot;&gt; &lt;code&gt;django.urls.path()&lt;/code&gt; &lt;/a&gt; 및 / 또는 &lt;a href=&quot;../../ref/urls#django.urls.re_path&quot;&gt; &lt;code&gt;django.urls.re_path()&lt;/code&gt; &lt;/a&gt; 경우.</target>
        </trans-unit>
        <trans-unit id="afe265878847e6456e60bb211412bcf9f5e8a9a6" translate="yes" xml:space="preserve">
          <source>Django makes shallow copies of manager objects during certain queries; if your Manager cannot be copied, those queries will fail.</source>
          <target state="translated">Django는 특정 쿼리 중에 관리자 객체의 얕은 복사본을 만듭니다. Manager를 복사 할 수 없으면 해당 쿼리가 실패합니다.</target>
        </trans-unit>
        <trans-unit id="1443579652f5e31fe2c79e4157d5c6b3e1651319" translate="yes" xml:space="preserve">
          <source>Django makes the general assumption that the original strings in a translatable project are written in English. You can choose another language, but you must be aware of certain limitations:</source>
          <target state="translated">Django는 번역 가능한 프로젝트의 원래 문자열이 영어로 작성되었다는 일반적인 가정을합니다. 다른 언어를 선택할 수 있지만 특정 제한 사항을 알고 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="32cc1a9e9f5ff0bce01dc2b97faef8a991337ac5" translate="yes" xml:space="preserve">
          <source>Django may, from time to time, extend the capabilities of the test runner by adding new arguments. The &lt;code&gt;**kwargs&lt;/code&gt; declaration allows for this expansion. If you subclass &lt;code&gt;DiscoverRunner&lt;/code&gt; or write your own test runner, ensure it accepts &lt;code&gt;**kwargs&lt;/code&gt;.</source>
          <target state="translated">장고는 때때로 새로운 인수를 추가하여 테스트 러너의 기능을 확장 할 수 있습니다. &lt;code&gt;**kwargs&lt;/code&gt; 로의 선언은 확장 할 수 있습니다. &lt;code&gt;DiscoverRunner&lt;/code&gt; 를 서브 클래스로 작성하거나 자체 테스트 실행기를 작성하는 경우 &lt;code&gt;**kwargs&lt;/code&gt; 를 허용하는지 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="a513cb8ffab9733ecd73df9e0a66010c51c48d6a" translate="yes" xml:space="preserve">
          <source>Django model fields for &lt;a href=&quot;https://www.opengeospatial.org/&quot;&gt;OGC&lt;/a&gt; geometries and raster data.</source>
          <target state="translated">&lt;a href=&quot;https://www.opengeospatial.org/&quot;&gt;OGC&lt;/a&gt; 지오메트리 및 래스터 데이터를 위한 Django 모델 필드 .</target>
        </trans-unit>
        <trans-unit id="7cf3763979c17f97ec99497d74346dba8c6758fd" translate="yes" xml:space="preserve">
          <source>Django must be able to instantiate your storage system without any arguments. This means that any settings should be taken from &lt;code&gt;django.conf.settings&lt;/code&gt;:</source>
          <target state="translated">Django는 인수없이 스토리지 시스템을 인스턴스화 할 수 있어야합니다. 즉, &lt;code&gt;django.conf.settings&lt;/code&gt; 에서 설정을 가져와야합니다 .</target>
        </trans-unit>
        <trans-unit id="466871cc514f71197f88e028032acda78b9b0ca9" translate="yes" xml:space="preserve">
          <source>Django needs the following parameters for its database connections:</source>
          <target state="translated">Django는 데이터베이스 연결을 위해 다음 매개 변수가 필요합니다.</target>
        </trans-unit>
        <trans-unit id="c394ebc68a36eb9d6dafc0d188b124f5baafb688" translate="yes" xml:space="preserve">
          <source>Django needs to fetch objects into memory to send signals and handle cascades. However, if there are no cascades and no signals, then Django may take a fast-path and delete objects without fetching into memory. For large deletes this can result in significantly reduced memory usage. The amount of executed queries can be reduced, too.</source>
          <target state="translated">Django는 신호를 보내고 캐스케이드를 처리하기 위해 객체를 메모리로 가져와야합니다. 그러나 캐스케이드가없고 신호가 없으면 Django는 빠른 경로를 가져 와서 메모리로 가져 오지 않고 객체를 삭제할 수 있습니다. 큰 삭제의 경우 메모리 사용량이 크게 줄어 듭니다. 실행 된 쿼리의 양도 줄일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1e21e7c06bd542c742f4ee927b87acbd91923002" translate="yes" xml:space="preserve">
          <source>Django offers a powerful and intuitive way to &amp;ldquo;follow&amp;rdquo; relationships in lookups, taking care of the SQL &lt;code&gt;JOIN&lt;/code&gt;s for you automatically, behind the scenes. To span a relationship, use the field name of related fields across models, separated by double underscores, until you get to the field you want.</source>
          <target state="translated">Django는 배후에서 자동으로 SQL &lt;code&gt;JOIN&lt;/code&gt; 을 관리하면서 조회에서 관계를&amp;ldquo;따르는&amp;rdquo;강력하고 직관적 인 방법을 제공 합니다. 관계를 확장하려면 원하는 필드에 도달 할 때까지 모델에서 관련 필드의 필드 이름을 이중 밑줄로 구분하여 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="38857e15171289c6b27e191218d8922ef0f1087b" translate="yes" xml:space="preserve">
          <source>Django offers a robust internationalization and localization framework to assist you in the development of applications for multiple languages and world regions:</source>
          <target state="translated">Django는 다국어 및 세계 지역을위한 응용 프로그램 개발을 지원하는 강력한 국제화 및 현지화 프레임 워크를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="065b923b03b2418a3da24efd7e3d3a6309039242" translate="yes" xml:space="preserve">
          <source>Django offers a wide variety of &lt;a href=&quot;../ref/models/querysets#field-lookups&quot;&gt;built-in lookups&lt;/a&gt; for filtering (for example, &lt;code&gt;exact&lt;/code&gt; and &lt;code&gt;icontains&lt;/code&gt;). This documentation explains how to write custom lookups and how to alter the working of existing lookups. For the API references of lookups, see the &lt;a href=&quot;../ref/models/lookups&quot;&gt;Lookup API reference&lt;/a&gt;.</source>
          <target state="translated">Django는 필터링을위한 다양한 &lt;a href=&quot;../ref/models/querysets#field-lookups&quot;&gt;내장 조회 기능&lt;/a&gt; 을 제공합니다 (예 : &lt;code&gt;exact&lt;/code&gt; 및 &lt;code&gt;icontains&lt;/code&gt; ). 이 문서는 사용자 정의 조회를 작성하는 방법과 기존 조회의 작동을 변경하는 방법을 설명합니다. &lt;a href=&quot;../ref/models/lookups&quot;&gt;조회의 API 참조&lt;/a&gt; 는 조회 API 참조를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="7b4e0858a1b6a38d004b95b8c4f3b2ff1cbf1dc0" translate="yes" xml:space="preserve">
          <source>Django offers many different ways of approaching things, but just because it&amp;rsquo;s possible to do something in a certain way doesn&amp;rsquo;t mean that it&amp;rsquo;s the most appropriate way to do it. For example, you might find that you could calculate the same thing - the number of items in a collection, perhaps - in a &lt;code&gt;QuerySet&lt;/code&gt;, in Python, or in a template.</source>
          <target state="translated">Django는 다양한 방식으로 접근하는 방법을 제공하지만 특정 방식으로 무언가를 수행 할 수 있다고해서 그것이 가장 적합한 방법이라는 의미는 아닙니다. 예를 들어 컬렉션의 항목 수, &lt;code&gt;QuerySet&lt;/code&gt; , Python 또는 템플릿에서 동일한 항목을 계산할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b430bec41e83521a629bc376b17e0920bc5b746f" translate="yes" xml:space="preserve">
          <source>Django offers many utility functions (particularly in &lt;code&gt;django.utils&lt;/code&gt;) that take a string as their first argument and do something to that string. These functions are used by template filters as well as directly in other code.</source>
          <target state="translated">Django는 문자열을 첫 번째 인수로 사용하여 해당 문자열에 무언가를 수행하는 많은 유틸리티 함수 (특히 &lt;code&gt;django.utils&lt;/code&gt; )를 제공합니다. 이러한 함수는 템플릿 필터와 다른 코드에서 직접 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="bfd5e374353e7a52d69c6d0ed581c985971ea0cb" translate="yes" xml:space="preserve">
          <source>Django offers multiple tools commonly needed in the development of Web applications:</source>
          <target state="translated">Django는 웹 응용 프로그램 개발에 일반적으로 필요한 여러 도구를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="ca7421cba4913cb5ffd18cdd485cbc39228370a7" translate="yes" xml:space="preserve">
          <source>Django officially supports the following databases:</source>
          <target state="translated">Django는 공식적으로 다음 데이터베이스를 지원합니다.</target>
        </trans-unit>
        <trans-unit id="72e1a567d5808522e00acf5e6b2302c7dfa107c3" translate="yes" xml:space="preserve">
          <source>Django only sends a cookie if it needs to. If you don&amp;rsquo;t set any session data, it won&amp;rsquo;t send a session cookie.</source>
          <target state="translated">Django는 필요한 경우에만 쿠키를 보냅니다. 세션 데이터를 설정하지 않으면 세션 쿠키를 보내지 않습니다.</target>
        </trans-unit>
        <trans-unit id="7371c7560496705b6d1494e4c2ec548e4c73969d" translate="yes" xml:space="preserve">
          <source>Django only supports &lt;code&gt;.po&lt;/code&gt; files encoded in UTF-8 and without any BOM (Byte Order Mark) so if your text editor adds such marks to the beginning of files by default then you will need to reconfigure it.</source>
          <target state="translated">Django 는 UTF-8로 인코딩되고 BOM (Byte Order Mark)없이 인코딩 된 &lt;code&gt;.po&lt;/code&gt; 파일 만 지원 하므로 텍스트 편집기가 기본적으로 이러한 마크를 파일의 시작 부분에 추가하면이를 재구성해야합니다.</target>
        </trans-unit>
        <trans-unit id="59038bedeeccc68721f3a09563a4a60aed17f4a7" translate="yes" xml:space="preserve">
          <source>Django only supports naive time objects and will raise an exception if you attempt to save an aware time object, as a timezone for a time with no associated date does not make sense.</source>
          <target state="translated">Django는 순진한 시간 개체 만 지원하며 관련 날짜가없는 시간의 시간대가 의미가 없으므로 인식 시간 개체를 저장하려고하면 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="d1d610f1ca06a37a878ee870e9e36e1b72357940" translate="yes" xml:space="preserve">
          <source>Django opens a connection to the database when it first makes a database query. It keeps this connection open and reuses it in subsequent requests. Django closes the connection once it exceeds the maximum age defined by &lt;a href=&quot;settings#std:setting-CONN_MAX_AGE&quot;&gt;&lt;code&gt;CONN_MAX_AGE&lt;/code&gt;&lt;/a&gt; or when it isn&amp;rsquo;t usable any longer.</source>
          <target state="translated">Django는 데이터베이스를 처음 쿼리 할 때 데이터베이스에 대한 연결을 엽니 다. 이 연결을 열린 상태로 유지하고 후속 요청에서 다시 연결합니다. Django는 &lt;a href=&quot;settings#std:setting-CONN_MAX_AGE&quot;&gt; &lt;code&gt;CONN_MAX_AGE&lt;/code&gt; 에&lt;/a&gt; 의해 정의 된 최대 수명을 초과 하거나 더 이상 사용할 수없는 경우 연결을 닫습니다 .</target>
        </trans-unit>
        <trans-unit id="a7e4a4de870ba8d22db27d84b17b4be68dca17b4" translate="yes" xml:space="preserve">
          <source>Django originally accepted only ASCII letters and numbers in usernames. Although it wasn&amp;rsquo;t a deliberate choice, Unicode characters have always been accepted when using Python 3. Django 1.10 officially added Unicode support in usernames, keeping the ASCII-only behavior on Python 2.</source>
          <target state="translated">Django는 원래 사용자 이름에 ASCII 문자와 숫자 만 허용했습니다. 고의적 인 선택은 아니지만 Python 3을 사용할 때 유니 코드 문자가 항상 허용되었습니다. Django 1.10은 Python 2에서 ASCII 전용 동작을 유지하면서 사용자 이름에 공식적으로 유니 코드 지원을 추가했습니다.</target>
        </trans-unit>
        <trans-unit id="cf7c86e8f2e5255a9c61751a7333e5a4179d5575" translate="yes" xml:space="preserve">
          <source>Django places some restrictions on model field names:</source>
          <target state="translated">Django는 모델 필드 이름에 몇 가지 제한을 둡니다.</target>
        </trans-unit>
        <trans-unit id="ecf8b16feb49633256657cbf500f8e8e8e2904de" translate="yes" xml:space="preserve">
          <source>Django projects generally rely on the &lt;a href=&quot;../../topics/templates#template-engines&quot;&gt;high level, backend agnostic APIs&lt;/a&gt; for each of these steps instead of the template system&amp;rsquo;s lower level APIs:</source>
          <target state="translated">Django 프로젝트는 일반적으로 템플릿 시스템의 하위 수준 API 대신 이러한 각 단계마다 &lt;a href=&quot;../../topics/templates#template-engines&quot;&gt;높은 수준의 백엔드 불가지론 적 API&lt;/a&gt; 를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="c163a316487f40e600f330cb480ac88813dc8584" translate="yes" xml:space="preserve">
          <source>Django provides &lt;a href=&quot;../../ref/models/expressions#django.db.models.F&quot;&gt;&lt;code&gt;F expressions&lt;/code&gt;&lt;/a&gt; to allow such comparisons. Instances of &lt;code&gt;F()&lt;/code&gt; act as a reference to a model field within a query. These references can then be used in query filters to compare the values of two different fields on the same model instance.</source>
          <target state="translated">Django는 이러한 비교를 위해 &lt;a href=&quot;../../ref/models/expressions#django.db.models.F&quot;&gt; &lt;code&gt;F expressions&lt;/code&gt; &lt;/a&gt; 을 제공합니다 . &lt;code&gt;F()&lt;/code&gt; 인스턴스 는 쿼리 내 모델 필드에 대한 참조로 작동합니다. 그런 다음 이러한 참조를 쿼리 필터에서 사용하여 동일한 모델 인스턴스에서 서로 다른 두 필드의 값을 비교할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2d33c0a6ab0b5b41c0ecd931abf601d0dda8a342" translate="yes" xml:space="preserve">
          <source>Django provides &lt;code&gt;django.utils.deprecation.MiddlewareMixin&lt;/code&gt; to ease creating middleware classes that are compatible with both &lt;a href=&quot;../../ref/settings#std:setting-MIDDLEWARE&quot;&gt;&lt;code&gt;MIDDLEWARE&lt;/code&gt;&lt;/a&gt; and the old &lt;code&gt;MIDDLEWARE_CLASSES&lt;/code&gt;. All middleware classes included with Django are compatible with both settings.</source>
          <target state="translated">Django는 &lt;code&gt;django.utils.deprecation.MiddlewareMixin&lt;/code&gt; 을 제공 하여 &lt;a href=&quot;../../ref/settings#std:setting-MIDDLEWARE&quot;&gt; &lt;code&gt;MIDDLEWARE&lt;/code&gt; &lt;/a&gt; 및 이전 &lt;code&gt;MIDDLEWARE_CLASSES&lt;/code&gt; 와 호환되는 미들웨어 클래스를 쉽게 작성할 수 있습니다. Django에 포함 된 모든 미들웨어 클래스는 두 설정과 호환됩니다.</target>
        </trans-unit>
        <trans-unit id="fffbaba5fcd2e12de14512168b98ad31016399e3" translate="yes" xml:space="preserve">
          <source>Django provides a &lt;a href=&quot;../ref/signals&quot;&gt;set of built-in signals&lt;/a&gt; that let user code get notified by Django itself of certain actions. These include some useful notifications:</source>
          <target state="translated">Django는 &lt;a href=&quot;../ref/signals&quot;&gt;내장&lt;/a&gt; 코드 세트를 제공하여 Django 자체에서 특정 동작을 사용자 코드에 알릴 수 있습니다. 여기에는 몇 가지 유용한 알림이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="d0d5dd43b0db8640a538b2b65f90fc54a95d58f1" translate="yes" xml:space="preserve">
          <source>Django provides a &lt;code&gt;DoesNotExist&lt;/code&gt; exception as an attribute of each model class to identify the class of object that could not be found and to allow you to catch a particular model class with &lt;code&gt;try/except&lt;/code&gt;. The exception is a subclass of &lt;a href=&quot;../exceptions#django.core.exceptions.ObjectDoesNotExist&quot;&gt;&lt;code&gt;django.core.exceptions.ObjectDoesNotExist&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Django는 찾을 수없는 객체의 클래스를 식별하고 &lt;code&gt;try/except&lt;/code&gt; 로 특정 모델 클래스를 잡을 수 있도록 각 모델 클래스의 속성으로 &lt;code&gt;DoesNotExist&lt;/code&gt; 예외를 제공합니다 . 예외는 &lt;a href=&quot;../exceptions#django.core.exceptions.ObjectDoesNotExist&quot;&gt; &lt;code&gt;django.core.exceptions.ObjectDoesNotExist&lt;/code&gt; &lt;/a&gt; 의 서브 클래스입니다 .</target>
        </trans-unit>
        <trans-unit id="afcf7ff55371a1b5f2c0e1c4e5d7b6d5ed01daa3" translate="yes" xml:space="preserve">
          <source>Django provides a &lt;code&gt;File&lt;/code&gt; class, which is used as a proxy to the file&amp;rsquo;s contents and operations. This can be subclassed to customize how the file is accessed, and what methods are available. It lives at &lt;code&gt;django.db.models.fields.files&lt;/code&gt;, and its default behavior is explained in the &lt;a href=&quot;../ref/files/file&quot;&gt;file documentation&lt;/a&gt;.</source>
          <target state="translated">Django는 파일 내용과 작업에 대한 프록시로 사용되는 &lt;code&gt;File&lt;/code&gt; 클래스를 제공 합니다. 파일에 액세스하는 방법과 사용 가능한 메소드를 사용자 정의하기 위해 서브 클래 싱 될 수 있습니다. 그것은에서 살고 &lt;code&gt;django.db.models.fields.files&lt;/code&gt; 및 기본 동작이 설명되어 &lt;a href=&quot;../ref/files/file&quot;&gt;파일 문서&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="d87f0c21e43cf137c5c5913a067cb9e9fee79678" translate="yes" xml:space="preserve">
          <source>Django provides a better way to target individual cache values. Django&amp;rsquo;s cache framework has a system-wide version identifier, specified using the &lt;a href=&quot;../ref/settings#std:setting-CACHES-VERSION&quot;&gt;&lt;code&gt;VERSION&lt;/code&gt;&lt;/a&gt; cache setting. The value of this setting is automatically combined with the cache prefix and the user-provided cache key to obtain the final cache key.</source>
          <target state="translated">Django는 개별 캐시 값을 타겟팅하는 더 좋은 방법을 제공합니다. Django의 캐시 프레임 워크에는 &lt;a href=&quot;../ref/settings#std:setting-CACHES-VERSION&quot;&gt; &lt;code&gt;VERSION&lt;/code&gt; &lt;/a&gt; 캐시 설정을 사용하여 지정된 시스템 전체 버전 식별자가 있습니다. 이 설정의 값은 캐시 접두사 및 사용자 제공 캐시 키와 자동으로 결합되어 최종 캐시 키를 얻습니다.</target>
        </trans-unit>
        <trans-unit id="76f69c24cb1ecd4dbb5cc96356e68d931549edee" translate="yes" xml:space="preserve">
          <source>Django provides a built-in class specifically for images. &lt;a href=&quot;#django.core.files.images.ImageFile&quot;&gt;&lt;code&gt;django.core.files.images.ImageFile&lt;/code&gt;&lt;/a&gt; inherits all the attributes and methods of &lt;a href=&quot;#django.core.files.File&quot;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt;, and additionally provides the following:</source>
          <target state="translated">Django는 이미지를위한 내장 클래스를 제공합니다. &lt;a href=&quot;#django.core.files.images.ImageFile&quot;&gt; &lt;code&gt;django.core.files.images.ImageFile&lt;/code&gt; &lt;/a&gt; 은 &lt;a href=&quot;#django.core.files.File&quot;&gt; &lt;code&gt;File&lt;/code&gt; 의&lt;/a&gt; 모든 속성과 메소드를 상속 하며 다음을 추가로 제공합니다.</target>
        </trans-unit>
        <trans-unit id="6fc258af471fb89687c86135d46ce81ed7533981" translate="yes" xml:space="preserve">
          <source>Django provides a couple ways to validate the minimum or maximum number of submitted forms. Applications which need more customizable validation of the number of forms should use custom formset validation.</source>
          <target state="translated">Django는 제출 된 양식의 최소 또는 최대 수를 확인하는 몇 가지 방법을 제공합니다. 양식 수에 대해보다 사용자 지정 가능한 유효성 검사가 필요한 응용 프로그램은 사용자 지정 양식 세트 유효성 검사를 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="56c0922e2f585fd6ac9ae530e7ece3cfa064f63c" translate="yes" xml:space="preserve">
          <source>Django provides a few classes that help you manage paginated data &amp;ndash; that is, data that&amp;rsquo;s split across several pages, with &amp;ldquo;Previous/Next&amp;rdquo; links. These classes live in &lt;a href=&quot;https://github.com/django/django/blob/master/django/core/paginator.py&quot;&gt;django/core/paginator.py&lt;/a&gt;.</source>
          <target state="translated">Django는 페이지가 매겨진 데이터, 즉&amp;ldquo;이전 / 다음&amp;rdquo;링크를 통해 여러 페이지에 걸쳐 분할 된 데이터를 관리하는 데 도움이되는 몇 가지 클래스를 제공합니다. 이 클래스는 &lt;a href=&quot;https://github.com/django/django/blob/master/django/core/paginator.py&quot;&gt;django / core / paginator.py에&lt;/a&gt; 있습니다.</target>
        </trans-unit>
        <trans-unit id="269e9b744906a5b197eff615842d6d1498729aaa" translate="yes" xml:space="preserve">
          <source>Django provides a few ways to include this header in responses from your site:</source>
          <target state="translated">Django는 사이트의 응답에이 헤더를 포함시키는 몇 가지 방법을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="fe622209e103a952cc331d8dc8b6c5d56a15c715" translate="yes" xml:space="preserve">
          <source>Django provides a flexible password storage system and uses PBKDF2 by default.</source>
          <target state="translated">Django는 유연한 암호 저장 시스템을 제공하며 기본적으로 PBKDF2를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="7ee43670dc572d1aac1eff315b82c300cf4998ea" translate="yes" xml:space="preserve">
          <source>Django provides a handler to allow Apache to authenticate users directly against Django&amp;rsquo;s authentication backends. See the &lt;a href=&quot;apache-auth&quot;&gt;mod_wsgi authentication documentation&lt;/a&gt;.</source>
          <target state="translated">Django는 Apache가 Django의 인증 백엔드에 대해 사용자를 직접 인증 할 수있는 핸들러를 제공합니다. &lt;a href=&quot;apache-auth&quot;&gt;mod_wsgi 인증 문서를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="bb4497fa4435f105e8224322a33656b81d743114" translate="yes" xml:space="preserve">
          <source>Django provides a number of utilities to handle the unique requirements of logging in Web server environment.</source>
          <target state="translated">Django는 웹 서버 환경에서 고유 한 로깅 요구 사항을 처리 할 수있는 많은 유틸리티를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="ef8a3b092c4b1e1f92d62cfed7df38c2aaaab816" translate="yes" xml:space="preserve">
          <source>Django provides a range of &lt;code&gt;QuerySet&lt;/code&gt; refinement methods that modify either the types of results returned by the &lt;code&gt;QuerySet&lt;/code&gt; or the way its SQL query is executed.</source>
          <target state="translated">장고의 범위를 제공합니다 &lt;code&gt;QuerySet&lt;/code&gt; 하나에 의해 반환 된 결과의 유형 수정 정제 방법 &lt;code&gt;QuerySet&lt;/code&gt; 또는 SQL 쿼리가 실행되는 방식을.</target>
        </trans-unit>
        <trans-unit id="ec994ccadcee6e397535c4907b10f52a106fb071" translate="yes" xml:space="preserve">
          <source>Django provides a range of tools and libraries to help you build forms to accept input from site visitors, and then process and respond to the input.</source>
          <target state="translated">Django는 사이트 방문자의 입력을 받아들이고 입력을 처리하고 응답하는 양식을 작성하는 데 도움이되는 다양한 도구와 라이브러리를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="21d87a32da8e65d9a2c0ba5c79397addb4e73fb6" translate="yes" xml:space="preserve">
          <source>Django provides a representation of all the basic HTML widgets, plus some commonly used groups of widgets in the &lt;code&gt;django.forms.widgets&lt;/code&gt; module, including &lt;a href=&quot;#text-widgets&quot;&gt;the input of text&lt;/a&gt;, &lt;a href=&quot;#selector-widgets&quot;&gt;various checkboxes and selectors&lt;/a&gt;, &lt;a href=&quot;#file-upload-widgets&quot;&gt;uploading files&lt;/a&gt;, and &lt;a href=&quot;#composite-widgets&quot;&gt;handling of multi-valued input&lt;/a&gt;.</source>
          <target state="translated">Django는 모든 기본 HTML 위젯과 &lt;code&gt;django.forms.widgets&lt;/code&gt; 모듈에서 &lt;a href=&quot;#text-widgets&quot;&gt;텍스트 입력&lt;/a&gt; , &lt;a href=&quot;#selector-widgets&quot;&gt;다양한 확인란 및 선택기&lt;/a&gt; , &lt;a href=&quot;#file-upload-widgets&quot;&gt;파일 업로드&lt;/a&gt; 및 &lt;a href=&quot;#composite-widgets&quot;&gt;다중 값 입력 처리를&lt;/a&gt; 포함 하여 일반적으로 사용되는 위젯 그룹을 나타냅니다 .</target>
        </trans-unit>
        <trans-unit id="c13f1fcd1a6612a07e5e2d5f81fc255b7a4c3994" translate="yes" xml:space="preserve">
          <source>Django provides a rich framework to facilitate the creation of forms and the manipulation of form data.</source>
          <target state="translated">Django는 양식 작성 및 양식 데이터 조작을 용이하게하는 풍부한 프레임 워크를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="a91c4b0029d235b1ffc6fcf7ac24293dbc66ef69" translate="yes" xml:space="preserve">
          <source>Django provides a single API to control database transactions.</source>
          <target state="translated">Django는 데이터베이스 트랜잭션을 제어하는 ​​단일 API를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="cc4c340b55cb0d94068045413022265cafe50e6b" translate="yes" xml:space="preserve">
          <source>Django provides a small set of tools that come in handy when writing tests.</source>
          <target state="translated">Django는 테스트를 작성할 때 유용한 도구 세트를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="203fd3530c69d681d45b9141d4b0374f388c1f5c" translate="yes" xml:space="preserve">
          <source>Django provides a solution such that the URL mapper is the only repository of the URL design. You feed it with your URLconf and then it can be used in both directions:</source>
          <target state="translated">Django는 URL 매퍼가 URL 디자인의 유일한 저장소가되도록 솔루션을 제공합니다. URLconf로 피드 한 다음 양방향으로 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bd2ca52ded4b2ebf6286531ba385c4fc7cc04d68" translate="yes" xml:space="preserve">
          <source>Django provides a test &lt;a href=&quot;../topics/testing/tools#django.test.Client&quot;&gt;&lt;code&gt;Client&lt;/code&gt;&lt;/a&gt; to simulate a user interacting with the code at the view level. We can use it in &lt;code&gt;tests.py&lt;/code&gt; or even in the &lt;a href=&quot;../ref/django-admin#django-admin-shell&quot;&gt;&lt;code&gt;shell&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Django는 뷰 레벨에서 코드와 상호 작용하는 사용자를 시뮬레이트하기 위한 테스트 &lt;a href=&quot;../topics/testing/tools#django.test.Client&quot;&gt; &lt;code&gt;Client&lt;/code&gt; &lt;/a&gt; 를 제공 합니다. 우리는 &lt;code&gt;tests.py&lt;/code&gt; 또는 심지어 &lt;a href=&quot;../ref/django-admin#django-admin-shell&quot;&gt; &lt;code&gt;shell&lt;/code&gt; &lt;/a&gt; 에서도 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="3f42e2428b8c3625df3c569af84ecf16d26754d4" translate="yes" xml:space="preserve">
          <source>Django provides about sixty built-in template filters. You can read all about them in the &lt;a href=&quot;builtins#ref-templates-builtins-filters&quot;&gt;built-in filter reference&lt;/a&gt;. To give you a taste of what&amp;rsquo;s available, here are some of the more commonly used template filters:</source>
          <target state="translated">Django는 약 60 개의 내장 템플릿 필터를 제공합니다. &lt;a href=&quot;builtins#ref-templates-builtins-filters&quot;&gt;내장 된 필터 참조&lt;/a&gt; 에서 모든 정보를 읽을 수 있습니다 . 사용 가능한 것을 맛볼 수 있도록 가장 일반적으로 사용되는 템플릿 필터는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="6f7bd7f6928fbb5902c2c4341257511fab266880" translate="yes" xml:space="preserve">
          <source>Django provides an API in the &lt;a href=&quot;#module-django.db.transaction&quot;&gt;&lt;code&gt;django.db.transaction&lt;/code&gt;&lt;/a&gt; module to manage the autocommit state of each database connection.</source>
          <target state="translated">Django는 &lt;a href=&quot;#module-django.db.transaction&quot;&gt; &lt;code&gt;django.db.transaction&lt;/code&gt; &lt;/a&gt; 모듈에 API를 제공하여 각 데이터베이스 연결의 자동 커밋 상태를 관리합니다.</target>
        </trans-unit>
        <trans-unit id="a32767bd4d0c9fc108a948f6717476c963141f89" translate="yes" xml:space="preserve">
          <source>Django provides an abstraction layer (the &amp;ldquo;models&amp;rdquo;) for structuring and manipulating the data of your Web application. Learn more about it below:</source>
          <target state="translated">Django는 웹 응용 프로그램의 데이터를 구성하고 조작하기위한 추상화 계층 (&amp;ldquo;모델&amp;rdquo;)을 제공합니다. 아래에서 자세히 알아보십시오.</target>
        </trans-unit>
        <trans-unit id="89020375ab6678903ef78729454c331204c641c1" translate="yes" xml:space="preserve">
          <source>Django provides an integrated solution for these problems: It passes the translations into JavaScript, so you can call &lt;code&gt;gettext&lt;/code&gt;, etc., from within JavaScript.</source>
          <target state="translated">Django는 이러한 문제에 대한 통합 솔루션을 제공합니다. 번역을 JavaScript로 전달하므로 JavaScript 내에서 &lt;code&gt;gettext&lt;/code&gt; 등을 호출 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="baebd7fed17bcc93678585e187478c84d03a5462" translate="yes" xml:space="preserve">
          <source>Django provides base view classes which will suit a wide range of applications. All views inherit from the &lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.View&quot;&gt;&lt;code&gt;View&lt;/code&gt;&lt;/a&gt; class, which handles linking the view into the URLs, HTTP method dispatching and other common features. &lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.RedirectView&quot;&gt;&lt;code&gt;RedirectView&lt;/code&gt;&lt;/a&gt; provides a HTTP redirect, and &lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.TemplateView&quot;&gt;&lt;code&gt;TemplateView&lt;/code&gt;&lt;/a&gt; extends the base class to make it also render a template.</source>
          <target state="translated">Django는 광범위한 응용 분야에 적합한 기본 뷰 클래스를 제공합니다. 모든 뷰는 &lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.View&quot;&gt; &lt;code&gt;View&lt;/code&gt; &lt;/a&gt; 클래스 에서 상속되며, 뷰 클래스를 URL로 연결하는 링크, HTTP 메소드 디스패치 및 기타 일반적인 기능을 처리합니다. &lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.RedirectView&quot;&gt; &lt;code&gt;RedirectView&lt;/code&gt; &lt;/a&gt; 는 HTTP 리디렉션을 제공하고 &lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.TemplateView&quot;&gt; &lt;code&gt;TemplateView&lt;/code&gt; &lt;/a&gt; 는 기본 클래스를 확장하여 템플릿 도 렌더링합니다.</target>
        </trans-unit>
        <trans-unit id="ebe1289f34b09e4748813c32a5f6b3074969829b" translate="yes" xml:space="preserve">
          <source>Django provides both a low-level API for signing values and a high-level API for setting and reading signed cookies, one of the most common uses of signing in Web applications.</source>
          <target state="translated">Django는 값을 서명하기위한 저수준 API와 웹 응용 프로그램에서 가장 일반적으로 사용되는 서명 된 쿠키 중 하나 인 서명 된 쿠키를 설정하고 읽을 수있는 고급 API를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="6cb3e10cb2e4e4a3317ce648af6a268698716359" translate="yes" xml:space="preserve">
          <source>Django provides both uncompressed and &amp;lsquo;minified&amp;rsquo; versions of jQuery, as &lt;code&gt;jquery.js&lt;/code&gt; and &lt;code&gt;jquery.min.js&lt;/code&gt; respectively.</source>
          <target state="translated">Django는 각각 &lt;code&gt;jquery.js&lt;/code&gt; 및 &lt;code&gt;jquery.min.js&lt;/code&gt; 와 같이 압축되지 않은 버전과 ' 최소화 된 '버전의 jQuery를 모두 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="bcc2f13e517e50891e5b0b052a1df534f72a4144" translate="yes" xml:space="preserve">
          <source>Django provides conditional &lt;code&gt;GET&lt;/code&gt; handling via &lt;a href=&quot;../ref/middleware#django.middleware.http.ConditionalGetMiddleware&quot;&gt;&lt;code&gt;django.middleware.http.ConditionalGetMiddleware&lt;/code&gt;&lt;/a&gt;. While being suitable for many situations, the middleware has limitations for advanced usage:</source>
          <target state="translated">Django는 &lt;a href=&quot;../ref/middleware#django.middleware.http.ConditionalGetMiddleware&quot;&gt; &lt;code&gt;django.middleware.http.ConditionalGetMiddleware&lt;/code&gt; &lt;/a&gt; 를 통해 조건부 &lt;code&gt;GET&lt;/code&gt; 처리를 제공합니다 . 많은 상황에 적합하지만 미들웨어에는 고급 사용에 대한 제한 사항이 있습니다.</target>
        </trans-unit>
        <trans-unit id="3584ae010ba6d37b431c12353df2a6917447ee96" translate="yes" xml:space="preserve">
          <source>Django provides format definitions for many locales, but sometimes you might want to create your own, because a format files doesn&amp;rsquo;t exist for your locale, or because you want to overwrite some of the values.</source>
          <target state="translated">Django는 많은 로케일에 대한 형식 정의를 제공하지만 때로는 로케일에 대한 형식 파일이 없거나 일부 값을 겹쳐 써서 직접 작성할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="d76675761bed792ed66907e3ba908ff83a66e5d4" translate="yes" xml:space="preserve">
          <source>Django provides full support for anonymous sessions. The session framework lets you store and retrieve arbitrary data on a per-site-visitor basis. It stores data on the server side and abstracts the sending and receiving of cookies. Cookies contain a session ID &amp;ndash; not the data itself (unless you&amp;rsquo;re using the &lt;a href=&quot;#cookie-session-backend&quot;&gt;cookie based backend&lt;/a&gt;).</source>
          <target state="translated">Django는 익명 세션을 완벽하게 지원합니다. 세션 프레임 워크를 사용하면 사이트 방문자별로 임의의 데이터를 저장하고 검색 할 수 있습니다. 서버 측에 데이터를 저장하고 쿠키의 송수신을 추상화합니다. 쿠키에는 쿠키 자체 &lt;a href=&quot;#cookie-session-backend&quot;&gt;백엔드를&lt;/a&gt; 사용하지 않는 한 데이터 자체가 아닌 세션 ID가 포함 됩니다.</target>
        </trans-unit>
        <trans-unit id="d13982cecba63af89d54f4d9f5c2a4dbc337040f" translate="yes" xml:space="preserve">
          <source>Django provides help for returning HTTP error codes. There are subclasses of &lt;a href=&quot;../../ref/request-response#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt; for a number of common HTTP status codes other than 200 (which means &lt;em&gt;&amp;ldquo;OK&amp;rdquo;&lt;/em&gt;). You can find the full list of available subclasses in the &lt;a href=&quot;../../ref/request-response#ref-httpresponse-subclasses&quot;&gt;request/response&lt;/a&gt; documentation. Return an instance of one of those subclasses instead of a normal &lt;a href=&quot;../../ref/request-response#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt; in order to signify an error. For example:</source>
          <target state="translated">Django는 HTTP 오류 코드를 반환하는 데 도움이됩니다. 200 이외의 많은 공통 HTTP 상태 코드 ( &lt;em&gt;&quot;OK&quot;&lt;/em&gt; 의미)에 대한 &lt;a href=&quot;../../ref/request-response#django.http.HttpResponse&quot;&gt; &lt;code&gt;HttpResponse&lt;/code&gt; 의&lt;/a&gt; 서브 클래스가 있습니다 . &lt;a href=&quot;../../ref/request-response#ref-httpresponse-subclasses&quot;&gt;요청 / 응답&lt;/a&gt; 문서 에서 사용 가능한 서브 클래스의 전체 목록을 찾을 수 있습니다 . 오류를 나타 내기 위해 일반 &lt;a href=&quot;../../ref/request-response#django.http.HttpResponse&quot;&gt; &lt;code&gt;HttpResponse&lt;/code&gt; &lt;/a&gt; 대신 해당 서브 클래스 중 하나의 인스턴스를 리턴하십시오 . 예를 들면 다음과 같습니다.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e7e623cd0a65fdb34ac196e0263a90a4486a5061" translate="yes" xml:space="preserve">
          <source>Django provides high-level and low-level ways to help you manage paginated data &amp;ndash; that is, data that&amp;rsquo;s split across several pages, with &amp;ldquo;Previous/Next&amp;rdquo; links.</source>
          <target state="translated">Django는 페이지가 매겨진 데이터, 즉 &quot;이전 / 다음&quot;링크를 통해 여러 페이지로 분할 된 데이터를 관리하는 데 도움이되는 고급 및 저수준 방법을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="cb2a96ee010fd92e519a793895ee707755c12c9d" translate="yes" xml:space="preserve">
          <source>Django provides many &lt;a href=&quot;../ref/templates/api#context-processors&quot;&gt;built-in context processors&lt;/a&gt;, and you can implement your own additional context processors, too.</source>
          <target state="translated">Django는 많은 &lt;a href=&quot;../ref/templates/api#context-processors&quot;&gt;내장 컨텍스트 프로세서를&lt;/a&gt; 제공하며 , 자신 만의 추가 컨텍스트 프로세서도 구현할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6b68fe178578110adf1388883f9221959ef62525" translate="yes" xml:space="preserve">
          <source>Django provides no default template for the authentication views. You should create your own templates for the views you want to use. The template context is documented in each view, see &lt;a href=&quot;#all-authentication-views&quot;&gt;All authentication views&lt;/a&gt;.</source>
          <target state="translated">Django는 인증 뷰에 대한 기본 템플릿을 제공하지 않습니다. 사용하려는보기에 대한 고유 한 템플릿을 만들어야합니다. 템플리트 컨텍스트는 각보기에 문서화되어 있습니다 ( &lt;a href=&quot;#all-authentication-views&quot;&gt;모든 인증보기&lt;/a&gt; 참조) .</target>
        </trans-unit>
        <trans-unit id="0d3b7ad0bf3171df5c782be59e46e7c22fd6698e" translate="yes" xml:space="preserve">
          <source>Django provides one log handler in addition to those provided by the Python logging module.</source>
          <target state="translated">Django는 Python 로깅 모듈에서 제공하는 것 외에도 하나의 로그 처리기를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="f095f2ea1ba0f91831463ed7164a94160389c5ae" translate="yes" xml:space="preserve">
          <source>Django provides several &lt;a href=&quot;../ref/templates/api#template-loaders&quot;&gt;built-in template loaders&lt;/a&gt; and supports &lt;a href=&quot;../ref/templates/api#custom-template-loaders&quot;&gt;custom template loaders&lt;/a&gt;.</source>
          <target state="translated">Django는 여러 &lt;a href=&quot;../ref/templates/api#template-loaders&quot;&gt;내장 템플릿 로더를 제공&lt;/a&gt; 하고 &lt;a href=&quot;../ref/templates/api#custom-template-loaders&quot;&gt;사용자 정의 템플릿 로더를&lt;/a&gt; 지원합니다 .</target>
        </trans-unit>
        <trans-unit id="0b2892296cb76329248fedc7b71b6f5b29389d40" translate="yes" xml:space="preserve">
          <source>Django provides several built-in loggers.</source>
          <target state="translated">Django는 여러 내장 로거를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="5b8414e1444eff8f67ea496dd791284f5622f30e" translate="yes" xml:space="preserve">
          <source>Django provides several decorators that can be applied to views to support various HTTP features.</source>
          <target state="translated">Django는 다양한 HTTP 기능을 지원하기 위해 뷰에 적용 할 수있는 몇 가지 데코레이터를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="4530faecff10b6d2b6b88078080e7ad972c578cb" translate="yes" xml:space="preserve">
          <source>Django provides several views that you can use for handling login, logout, and password management. These make use of the &lt;a href=&quot;#built-in-auth-forms&quot;&gt;stock auth forms&lt;/a&gt; but you can pass in your own forms as well.</source>
          <target state="translated">Django는 로그인, 로그 아웃 및 비밀번호 관리를 처리하는 데 사용할 수있는 몇 가지보기를 제공합니다. 이들은 &lt;a href=&quot;#built-in-auth-forms&quot;&gt;주식 인증 양식을 사용&lt;/a&gt; 하지만 자신의 양식도 전달할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="11811524ae794731163bd005c4b9bed3192ed447" translate="yes" xml:space="preserve">
          <source>Django provides some GIS-specific aggregate functions. For details on how to use these aggregate functions, see &lt;a href=&quot;../../../topics/db/aggregation&quot;&gt;the topic guide on aggregation&lt;/a&gt;.</source>
          <target state="translated">장고는 GIS 고유의 집계 함수를 제공합니다. 이러한 집계 함수 사용 방법에 대한 세부 사항은 집계에 &lt;a href=&quot;../../../topics/db/aggregation&quot;&gt;대한 주제 안내서를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="64e6d540e127f68fa5d08d7f58433aecd642a4fa" translate="yes" xml:space="preserve">
          <source>Django provides some log filters in addition to those provided by the Python logging module.</source>
          <target state="translated">Django는 Python 로깅 모듈에서 제공하는 것 외에도 일부 로그 필터를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="8e64c7491d90fba19aa2fa8d21df9cbc7d6d5fe3" translate="yes" xml:space="preserve">
          <source>Django provides support for a number of data types which will only work with PostgreSQL. There is no fundamental reason why (for example) a &lt;code&gt;contrib.mysql&lt;/code&gt; module does not exist, except that PostgreSQL has the richest feature set of the supported databases so its users have the most to gain.</source>
          <target state="translated">Django는 PostgreSQL에서만 작동하는 다양한 데이터 유형을 지원합니다. 예를 들어 &lt;code&gt;contrib.mysql&lt;/code&gt; 모듈이 존재하지 않는 근본적인 이유는 없습니다. PostgreSQL에는 지원되는 데이터베이스의 기능이 가장 풍부하여 사용자가 가장 많이 얻는 것입니다.</target>
        </trans-unit>
        <trans-unit id="e1db1078c7aaafc378714b8340d34c03fc9909fa" translate="yes" xml:space="preserve">
          <source>Django provides template tags and filters to control each aspect of &lt;a href=&quot;../../topics/i18n/index&quot;&gt;internationalization&lt;/a&gt; in templates. They allow for granular control of translations, formatting, and time zone conversions.</source>
          <target state="translated">Django는 템플릿에서 &lt;a href=&quot;../../topics/i18n/index&quot;&gt;국제화의&lt;/a&gt; 각 측면을 제어하는 ​​템플릿 태그 및 필터를 제공합니다 . 번역, 서식 및 시간대 변환을 세밀하게 제어 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d05aef02eba0cd157e896f166af042311b081442" translate="yes" xml:space="preserve">
          <source>Django provides the &lt;a href=&quot;#django.db.transaction.on_commit&quot;&gt;&lt;code&gt;on_commit()&lt;/code&gt;&lt;/a&gt; function to register callback functions that should be executed after a transaction is successfully committed:</source>
          <target state="translated">Django는 &lt;a href=&quot;#django.db.transaction.on_commit&quot;&gt; &lt;code&gt;on_commit()&lt;/code&gt; &lt;/a&gt; 함수를 제공하여 트랜잭션이 성공적으로 커밋 된 후에 실행되어야하는 콜백 함수를 등록합니다.</target>
        </trans-unit>
        <trans-unit id="fbe76be4d505943ff7bab3112b8df33e7b8bb139" translate="yes" xml:space="preserve">
          <source>Django provides the following aggregation functions in the &lt;code&gt;django.db.models&lt;/code&gt; module. For details on how to use these aggregate functions, see &lt;a href=&quot;../../topics/db/aggregation&quot;&gt;the topic guide on aggregation&lt;/a&gt;. See the &lt;a href=&quot;expressions#django.db.models.Aggregate&quot;&gt;&lt;code&gt;Aggregate&lt;/code&gt;&lt;/a&gt; documentation to learn how to create your aggregates.</source>
          <target state="translated">Django는 &lt;code&gt;django.db.models&lt;/code&gt; 모듈 에서 다음과 같은 집계 함수를 제공합니다 . 이러한 집계 함수 사용 방법에 대한 세부 사항은 집계에 &lt;a href=&quot;../../topics/db/aggregation&quot;&gt;대한 주제 안내서를&lt;/a&gt; 참조하십시오 . &lt;a href=&quot;expressions#django.db.models.Aggregate&quot;&gt; &lt;code&gt;Aggregate&lt;/code&gt; &lt;/a&gt; 작성 방법을 배우려면 집계 문서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="47fe69a6c98d96a184b867c7ebb77d024f5cba3c" translate="yes" xml:space="preserve">
          <source>Django provides three built-in storage classes in &lt;a href=&quot;#module-django.contrib.messages&quot;&gt;&lt;code&gt;django.contrib.messages&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">Django는 &lt;a href=&quot;#module-django.contrib.messages&quot;&gt; &lt;code&gt;django.contrib.messages&lt;/code&gt; &lt;/a&gt; 에 세 가지 내장 스토리지 클래스를 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="0b522abb77e8f87c47579c596cdd1fe68e94ed9a" translate="yes" xml:space="preserve">
          <source>Django provides tools for performing URL reversing that match the different layers where URLs are needed:</source>
          <target state="translated">Django는 URL이 필요한 다른 레이어와 일치하는 URL 반전을 수행하기위한 도구를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="944941e13cb778be81173f0e8fef7304972092af" translate="yes" xml:space="preserve">
          <source>Django provides two convenient ways to access the current storage class:</source>
          <target state="translated">Django는 현재 스토리지 클래스에 액세스하는 두 가지 편리한 방법을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="d320699d1c44d06ae3bae26c3b9e4f2e64f45d08" translate="yes" xml:space="preserve">
          <source>Django provides two mechanisms to internationalize URL patterns:</source>
          <target state="translated">Django는 URL 패턴을 국제화하는 두 가지 메커니즘을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="340699ff26a5116fa00f5e3dfe6144babb87f05e" translate="yes" xml:space="preserve">
          <source>Django provides two methods on a form that allow you to loop over the hidden and visible fields independently: &lt;code&gt;hidden_fields()&lt;/code&gt; and &lt;code&gt;visible_fields()&lt;/code&gt;. Here&amp;rsquo;s a modification of an earlier example that uses these two methods:</source>
          <target state="translated">Django는 숨겨진 필드와 보이는 필드를 독립적으로 반복 할 수있는 두 가지 방법 인 &lt;code&gt;hidden_fields()&lt;/code&gt; 및 &lt;code&gt;visible_fields()&lt;/code&gt; 합니다. 다음은이 두 가지 방법을 사용하는 이전 예제의 수정 사항입니다.</target>
        </trans-unit>
        <trans-unit id="18c628edefb609a4b8914442627bfa042187cdb9" translate="yes" xml:space="preserve">
          <source>Django provides two subclasses of &lt;code&gt;InlineModelAdmin&lt;/code&gt; and they are:</source>
          <target state="translated">Django는 &lt;code&gt;InlineModelAdmin&lt;/code&gt; 의 두 가지 하위 클래스를 제공하며 다음 과 같습니다.</target>
        </trans-unit>
        <trans-unit id="d2c1370de81fd0332b3b73e5fd59e98b5198239f" translate="yes" xml:space="preserve">
          <source>Django provides two ways to generate aggregates. The first way is to generate summary values over an entire &lt;code&gt;QuerySet&lt;/code&gt;. For example, say you wanted to calculate the average price of all books available for sale. Django&amp;rsquo;s query syntax provides a means for describing the set of all books:</source>
          <target state="translated">Django는 집계를 생성하는 두 가지 방법을 제공합니다. 첫 번째 방법은 전체 &lt;code&gt;QuerySet&lt;/code&gt; 에 대해 요약 값을 생성하는 것 입니다. 예를 들어, 판매 가능한 모든 책의 평균 가격을 계산하려고한다고 가정하십시오. Django의 쿼리 구문은 모든 책 세트를 설명하는 수단을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="9f90034bc6e1c847f2b74d5ff06433691749de06" translate="yes" xml:space="preserve">
          <source>Django raises built-in Python exceptions when appropriate as well. See the Python documentation for further information on the &lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#bltin-exceptions&quot;&gt;Built-in Exceptions&lt;/a&gt;.</source>
          <target state="translated">Django는 적절한 경우 내장 Python 예외를 발생시킵니다. &lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#bltin-exceptions&quot;&gt;내장 예외&lt;/a&gt; 에 대한 자세한 내용은 Python 설명서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="aa1473355818c546b308428d597e0b5644e0ff28" translate="yes" xml:space="preserve">
          <source>Django raises some of its own exceptions as well as standard Python exceptions.</source>
          <target state="translated">Django는 표준 Python 예외뿐만 아니라 자체 예외를 발생시킵니다.</target>
        </trans-unit>
        <trans-unit id="dc931280e842400715a8f7987fc65cdaa1dcce93" translate="yes" xml:space="preserve">
          <source>Django registers the built-in commands and then searches for commands in &lt;a href=&quot;../ref/settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; in reverse. During the search, if a command name duplicates an already registered command, the newly discovered command overrides the first.</source>
          <target state="translated">Django는 내장 명령을 등록한 다음 &lt;a href=&quot;../ref/settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt; 에서 명령 을 반대로 검색합니다 . 검색 중에 명령 이름이 이미 등록 된 명령을 복제하면 새로 발견 된 명령이 첫 번째 명령을 대체합니다.</target>
        </trans-unit>
        <trans-unit id="5dd7344fedd3e6a321263f87973ecb7417d5e1e9" translate="yes" xml:space="preserve">
          <source>Django requires &lt;a href=&quot;https://pypi.org/project/mysqlclient/&quot;&gt;mysqlclient&lt;/a&gt; 1.3.13 or later.</source>
          <target state="translated">Django에는 &lt;a href=&quot;https://pypi.org/project/mysqlclient/&quot;&gt;mysqlclient&lt;/a&gt; 1.3.13 이상이 필요합니다 .</target>
        </trans-unit>
        <trans-unit id="8fd623d2467ac594b3c7a50eb786f5468c2d1503" translate="yes" xml:space="preserve">
          <source>Django runs through each URL pattern, in order, and stops at the first one that matches the requested URL, matching against &lt;a href=&quot;../../ref/request-response#django.http.HttpRequest.path_info&quot;&gt;&lt;code&gt;path_info&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Django는 각 URL 패턴을 순서대로 실행하고 &lt;a href=&quot;../../ref/request-response#django.http.HttpRequest.path_info&quot;&gt; &lt;code&gt;path_info&lt;/code&gt; &lt;/a&gt; 와 일치하는 요청 된 URL과 일치하는 첫 번째 패턴에서 중지합니다 .</target>
        </trans-unit>
        <trans-unit id="829c30a8fe28093e58fea553b23e9aa974b14a93" translate="yes" xml:space="preserve">
          <source>Django searches for template directories in a number of places, depending on your template loading settings (see &amp;ldquo;Loader types&amp;rdquo; below), but the most basic way of specifying template directories is by using the &lt;a href=&quot;../settings#std:setting-TEMPLATES-DIRS&quot;&gt;&lt;code&gt;DIRS&lt;/code&gt;&lt;/a&gt; option.</source>
          <target state="translated">Django는 템플릿 로딩 설정에 따라 여러 위치에서 템플릿 디렉토리를 검색하지만 (아래의 &quot;로더 유형&quot;참조) 템플릿 디렉토리를 지정하는 가장 기본적인 방법은 &lt;a href=&quot;../settings#std:setting-TEMPLATES-DIRS&quot;&gt; &lt;code&gt;DIRS&lt;/code&gt; &lt;/a&gt; 옵션 을 사용하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="aa0ee472cd6b16ff397aa72db48401303311dfb5" translate="yes" xml:space="preserve">
          <source>Django sets up a test database corresponding to every database that is defined in the &lt;a href=&quot;../../ref/settings#std:setting-DATABASES&quot;&gt;&lt;code&gt;DATABASES&lt;/code&gt;&lt;/a&gt; definition in your settings and referred to by at least one test through &lt;code&gt;databases&lt;/code&gt;.</source>
          <target state="translated">Django는 설정에서 &lt;a href=&quot;../../ref/settings#std:setting-DATABASES&quot;&gt; &lt;code&gt;DATABASES&lt;/code&gt; &lt;/a&gt; 정의에 정의되어 있고 &lt;code&gt;databases&lt;/code&gt; 통해 하나 이상의 테스트에서 참조 하는 모든 데이터베이스에 해당하는 테스트 데이터베이스를 설정 합니다 .</target>
        </trans-unit>
        <trans-unit id="33b94bd6298c35ae0e9eca86e8b6159f64ee5419" translate="yes" xml:space="preserve">
          <source>Django settings</source>
          <target state="translated">장고 설정</target>
        </trans-unit>
        <trans-unit id="456e01a7bcba6b0c93da961f30a4e584e674d0a8" translate="yes" xml:space="preserve">
          <source>Django ships with a &lt;a href=&quot;../ref/files/storage#django.core.files.storage.FileSystemStorage&quot;&gt;&lt;code&gt;django.core.files.storage.FileSystemStorage&lt;/code&gt;&lt;/a&gt; class which implements basic local filesystem file storage.</source>
          <target state="translated">Django 는 기본 로컬 파일 시스템 파일 스토리지를 구현 하는 &lt;a href=&quot;../ref/files/storage#django.core.files.storage.FileSystemStorage&quot;&gt; &lt;code&gt;django.core.files.storage.FileSystemStorage&lt;/code&gt; &lt;/a&gt; 클래스 와 함께 제공됩니다 .</target>
        </trans-unit>
        <trans-unit id="7f9fe9d496c9dce38d63612a82cbfd72a311b738" translate="yes" xml:space="preserve">
          <source>Django ships with a variety of extra, optional tools that solve common problems (&lt;code&gt;contrib.*&lt;/code&gt;). For easier maintenance and to trim the size of the codebase, a few of those applications have been moved out to separate projects.</source>
          <target state="translated">Django는 일반적인 문제를 해결하는 다양한 옵션 도구를 제공합니다 ( &lt;code&gt;contrib.*&lt;/code&gt; ). 유지 관리가 쉽고 코드베이스의 크기를 줄이기 위해 이러한 응용 프로그램 중 일부가 별도의 프로젝트로 이동되었습니다.</target>
        </trans-unit>
        <trans-unit id="410b2b56049c5d642f406f6c25ee3553ceb96d3b" translate="yes" xml:space="preserve">
          <source>Django ships with about two dozen built-in template tags. You can read all about them in the &lt;a href=&quot;builtins#ref-templates-builtins-tags&quot;&gt;built-in tag reference&lt;/a&gt;. To give you a taste of what&amp;rsquo;s available, here are some of the more commonly used tags:</source>
          <target state="translated">Django에는 약 24 개의 내장 템플릿 태그가 제공됩니다. &lt;a href=&quot;builtins#ref-templates-builtins-tags&quot;&gt;내장 태그 참조&lt;/a&gt; 에서 모든 내용을 읽을 수 있습니다 . 사용 가능한 것을 맛볼 수 있도록 가장 일반적으로 사용되는 태그는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="0cb2371b7c25122d96e086f393d5c588c9e2395d" translate="yes" xml:space="preserve">
          <source>Django ships with an easy-to-use &lt;a href=&quot;../../ref/csrf&quot;&gt;protection against Cross Site Request Forgeries&lt;/a&gt;. When submitting a form via &lt;code&gt;POST&lt;/code&gt; with CSRF protection enabled you must use the &lt;a href=&quot;../../ref/templates/builtins#std:templatetag-csrf_token&quot;&gt;&lt;code&gt;csrf_token&lt;/code&gt;&lt;/a&gt; template tag as in the preceding example. However, since CSRF protection is not directly tied to forms in templates, this tag is omitted from the following examples in this document.</source>
          <target state="translated">Django &lt;a href=&quot;../../ref/csrf&quot;&gt;는 Cross Site Request Forgeries에 대해&lt;/a&gt; 사용하기 쉬운 보호 기능을 제공 합니다. CSRF 보호가 사용 가능한 &lt;code&gt;POST&lt;/code&gt; 를 통해 양식을 제출할 때는 앞의 예제와 같이 &lt;a href=&quot;../../ref/templates/builtins#std:templatetag-csrf_token&quot;&gt; &lt;code&gt;csrf_token&lt;/code&gt; &lt;/a&gt; 템플리트 태그를 사용해야합니다 . 그러나 CSRF 보호는 템플릿의 양식에 직접 연결되지 않으므로이 문서의 다음 예에서이 태그는 생략되었습니다.</target>
        </trans-unit>
        <trans-unit id="fd45f46c98a612f8dc8b396396164415ac872c46" translate="yes" xml:space="preserve">
          <source>Django ships with dozens of built-in field types; you can find the complete list in the &lt;a href=&quot;../../ref/models/fields#model-field-types&quot;&gt;model field reference&lt;/a&gt;. You can easily write your own fields if Django&amp;rsquo;s built-in ones don&amp;rsquo;t do the trick; see &lt;a href=&quot;../../howto/custom-model-fields&quot;&gt;Writing custom model fields&lt;/a&gt;.</source>
          <target state="translated">Django는 수십 개의 내장 필드 유형을 제공합니다. &lt;a href=&quot;../../ref/models/fields#model-field-types&quot;&gt;모델 필드 참조&lt;/a&gt; 에서 전체 목록을 찾을 수 있습니다 . Django의 내장 필드가 트릭을 수행하지 않으면 자신의 필드를 쉽게 작성할 수 있습니다. &lt;a href=&quot;../../howto/custom-model-fields&quot;&gt;사용자 정의 모델 필드 작성을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="364f75771074e80e3e50c4c4157a132bde772ae4" translate="yes" xml:space="preserve">
          <source>Django ships with generic views to do the following:</source>
          <target state="translated">Django는 다음과 같은 일반적인 견해를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="1f29bcceed31bae8388ab05612a2a8047d2c3c9c" translate="yes" xml:space="preserve">
          <source>Django ships with several email sending backends. With the exception of the SMTP backend (which is the default), these backends are only useful during testing and development. If you have special email sending requirements, you can &lt;a href=&quot;#topic-custom-email-backend&quot;&gt;write your own email backend&lt;/a&gt;.</source>
          <target state="translated">Django는 여러 이메일 전송 백엔드와 함께 제공됩니다. SMTP 백엔드 (기본값)를 제외하고 이러한 백엔드는 테스트 및 개발 중에 만 유용합니다. 특별한 이메일 전송 요구 사항이있는 경우 &lt;a href=&quot;#topic-custom-email-backend&quot;&gt;고유 한 이메일 백엔드를 작성할 수 있습니다&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="531d409914a0040f724fbd9f78a6a5401443f559" translate="yes" xml:space="preserve">
          <source>Django shortcut functions</source>
          <target state="translated">장고 단축키 기능</target>
        </trans-unit>
        <trans-unit id="258a02ace60da0c37c63a38e0b6c7e57de46e6f7" translate="yes" xml:space="preserve">
          <source>Django should provide a function &lt;code&gt;django.shortcuts.make_toast()&lt;/code&gt; that returns &lt;code&gt;'toast'&lt;/code&gt;.</source>
          <target state="translated">장고 는 &lt;code&gt;'toast'&lt;/code&gt; 를 반환하는 &lt;code&gt;django.shortcuts.make_toast()&lt;/code&gt; 함수를 제공해야합니다 .</target>
        </trans-unit>
        <trans-unit id="7ea0bfbd077dc4bf18ca92802861bce1821dc025" translate="yes" xml:space="preserve">
          <source>Django supports &lt;a href=&quot;https://www.oracle.com/&quot;&gt;Oracle Database Server&lt;/a&gt; versions 12.2 and higher. Version 6.0 or higher of the &lt;a href=&quot;https://oracle.github.io/python-cx_Oracle/&quot;&gt;cx_Oracle&lt;/a&gt; Python driver is required.</source>
          <target state="translated">Django는 &lt;a href=&quot;https://www.oracle.com/&quot;&gt;Oracle Database Server&lt;/a&gt; 버전 12.2 이상을 지원합니다 . &lt;a href=&quot;https://oracle.github.io/python-cx_Oracle/&quot;&gt;cx_Oracle&lt;/a&gt; Python 드라이버 버전 6.0 이상 이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="a610f9dc7c34e4dc5cbf7009a7a3732b40bbc6d3" translate="yes" xml:space="preserve">
          <source>Django supports MariaDB 10.1 and higher.</source>
          <target state="translated">Django는 MariaDB 10.1 이상을 지원합니다.</target>
        </trans-unit>
        <trans-unit id="0b1f44d2fd17087954c6556b0112920427a6881c" translate="yes" xml:space="preserve">
          <source>Django supports MySQL 5.6 and higher.</source>
          <target state="translated">Django는 MySQL 5.6 이상을 지원합니다.</target>
        </trans-unit>
        <trans-unit id="c94d5d79be3679d0e14f6104436721ee7f2b1c14" translate="yes" xml:space="preserve">
          <source>Django supports PostgreSQL 9.5 and higher. &lt;a href=&quot;https://www.psycopg.org/&quot;&gt;psycopg2&lt;/a&gt; 2.5.4 or higher is required, though the latest release is recommended.</source>
          <target state="translated">Django는 PostgreSQL 9.5 이상을 지원합니다. 최신 릴리스를 권장하지만 &lt;a href=&quot;https://www.psycopg.org/&quot;&gt;psycopg2&lt;/a&gt; 2.5.4 이상이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="9a7435837143f0c3fc00103b8997b0cbc04e7620" translate="yes" xml:space="preserve">
          <source>Django supports SQLite 3.8.3 and later.</source>
          <target state="translated">Django는 SQLite 3.8.3 이상을 지원합니다.</target>
        </trans-unit>
        <trans-unit id="e489bcfa9f420e1c998b47004d5194a20faf9200" translate="yes" xml:space="preserve">
          <source>Django supports Unicode data everywhere.</source>
          <target state="translated">Django는 모든 곳에서 유니 코드 데이터를 지원합니다.</target>
        </trans-unit>
        <trans-unit id="f521679c1edf54471df209a63e1ada77d83984bd" translate="yes" xml:space="preserve">
          <source>Django supports a number of serialization formats, some of which require you to install third-party Python modules:</source>
          <target state="translated">Django는 다양한 직렬화 형식을 지원하며 일부 형식은 타사 Python 모듈을 설치해야합니다.</target>
        </trans-unit>
        <trans-unit id="f8f74ffa1be0a5698bd3f7c376e9c74761ab98f5" translate="yes" xml:space="preserve">
          <source>Django supports negation, addition, subtraction, multiplication, division, modulo arithmetic, and the power operator on query expressions, using Python constants, variables, and even other expressions.</source>
          <target state="translated">Django는 Python 상수, 변수 및 기타 표현식을 사용하여 쿼리 표현식에 대한 부정, 덧셈, 뺄셈, 곱셈, 나눗셈, 모듈로 산술 및 거듭 제곱 연산자를 지원합니다.</target>
        </trans-unit>
        <trans-unit id="fe060dabf1b2fb59f4fc59d63303d444184f2beb" translate="yes" xml:space="preserve">
          <source>Django supports the use of addition, subtraction, multiplication, division, modulo, and power arithmetic with &lt;code&gt;F()&lt;/code&gt; objects, both with constants and with other &lt;code&gt;F()&lt;/code&gt; objects. To find all the blog entries with more than &lt;em&gt;twice&lt;/em&gt; as many comments as pingbacks, we modify the query:</source>
          <target state="translated">장고와 더하기, 빼기, 곱하기, 나누기, 모듈, 및 전력 연산의 이용을 지원 &lt;code&gt;F()&lt;/code&gt; 상수와 다른 두 물체 &lt;code&gt;F()&lt;/code&gt; 개체. 핑백 보다 &lt;em&gt;두 배&lt;/em&gt; 이상의 주석 이있는 모든 블로그 항목을 찾으려면 쿼리를 수정합니다.</target>
        </trans-unit>
        <trans-unit id="55ae8d5eff7ba3246a5c9c0b17251f54dccc547a" translate="yes" xml:space="preserve">
          <source>Django takes care of the quoting for you; the resulting SQL will look something like this:</source>
          <target state="translated">장고는 당신을 위해 인용을 처리합니다. 결과 SQL은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="3b4071b220737a0f26087eb6de9dab97662aed8e" translate="yes" xml:space="preserve">
          <source>Django templates &lt;a href=&quot;../ref/templates/language#automatic-html-escaping&quot;&gt;escape specific characters&lt;/a&gt; which are particularly dangerous to HTML. While this protects users from most malicious input, it is not entirely foolproof. For example, it will not protect the following:</source>
          <target state="translated">Django 템플릿 은 HTML에 특히 위험한 &lt;a href=&quot;../ref/templates/language#automatic-html-escaping&quot;&gt;특정 문자&lt;/a&gt; 를 이스케이프합니다 . 이렇게하면 대부분의 악의적 인 입력으로부터 사용자를 보호 할 수 있지만 완전히 무방비 상태는 아닙니다. 예를 들어 다음을 보호하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="6b4a07402b130a9b2f9e23ac2de564e70ec64e25" translate="yes" xml:space="preserve">
          <source>Django templates have an &lt;a href=&quot;../ref/templates/api#django.template.base.Origin&quot;&gt;&lt;code&gt;Origin&lt;/code&gt;&lt;/a&gt; object available through the &lt;code&gt;template.origin&lt;/code&gt; attribute. This enables debug information to be displayed in the &lt;a href=&quot;#template-postmortem&quot;&gt;template postmortem&lt;/a&gt;, as well as in 3rd-party libraries, like the &lt;a href=&quot;https://github.com/jazzband/django-debug-toolbar&quot;&gt;Django Debug Toolbar&lt;/a&gt;.</source>
          <target state="translated">Django 템플릿에는 &lt;code&gt;template.origin&lt;/code&gt; 속성을 통해 사용할 수 있는 &lt;a href=&quot;../ref/templates/api#django.template.base.Origin&quot;&gt; &lt;code&gt;Origin&lt;/code&gt; &lt;/a&gt; 객체가 있습니다 . 이를 통해 &lt;a href=&quot;https://github.com/jazzband/django-debug-toolbar&quot;&gt;Django Debug Toolbar&lt;/a&gt; 와 같은 타사 라이브러리뿐만 아니라 &lt;a href=&quot;#template-postmortem&quot;&gt;사후 템플릿&lt;/a&gt; 에도 디버그 정보를 표시 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="7c82addec3ff08349c87561407a89fb2ec7931b7" translate="yes" xml:space="preserve">
          <source>Django then provides utilities to extract the translation strings into a &lt;a href=&quot;index#term-message-file&quot;&gt;message file&lt;/a&gt;. This file is a convenient way for translators to provide the equivalent of the translation strings in the target language. Once the translators have filled in the message file, it must be compiled. This process relies on the GNU gettext toolset.</source>
          <target state="translated">Django는 번역 문자열을 &lt;a href=&quot;index#term-message-file&quot;&gt;메시지 파일&lt;/a&gt; 로 추출하는 유틸리티를 제공 합니다 . 이 파일은 번역가가 대상 언어로 번역 문자열과 동등한 기능을 제공 할 수있는 편리한 방법입니다. 번역자가 메시지 파일을 채우면 컴파일해야합니다. 이 프로세스는 GNU gettext 툴셋에 의존합니다.</target>
        </trans-unit>
        <trans-unit id="0e98551210f7666c434ac21da3edbf033bb7c7e5" translate="yes" xml:space="preserve">
          <source>Django tools</source>
          <target state="translated">장고 도구</target>
        </trans-unit>
        <trans-unit id="c2606e74dbf27895737aed64ebe1471c02fbbb6c" translate="yes" xml:space="preserve">
          <source>Django uses &lt;a href=&quot;#django.db.models.lookups.RegisterLookupMixin&quot;&gt;&lt;code&gt;RegisterLookupMixin&lt;/code&gt;&lt;/a&gt; to give a class the interface to register lookups on itself. The two prominent examples are &lt;a href=&quot;fields#django.db.models.Field&quot;&gt;&lt;code&gt;Field&lt;/code&gt;&lt;/a&gt;, the base class of all model fields, and &lt;a href=&quot;#django.db.models.Transform&quot;&gt;&lt;code&gt;Transform&lt;/code&gt;&lt;/a&gt;, the base class of all Django transforms.</source>
          <target state="translated">Django는 &lt;a href=&quot;#django.db.models.lookups.RegisterLookupMixin&quot;&gt; &lt;code&gt;RegisterLookupMixin&lt;/code&gt; &lt;/a&gt; 을 사용하여 클래스 자체에 조회를 등록하기위한 인터페이스를 제공합니다. 두 두드러진 예는 &lt;a href=&quot;fields#django.db.models.Field&quot;&gt; &lt;code&gt;Field&lt;/code&gt; &lt;/a&gt; 모든 모델 필드의베이스 클래스, 및 &lt;a href=&quot;#django.db.models.Transform&quot;&gt; &lt;code&gt;Transform&lt;/code&gt; &lt;/a&gt; 모두 장고 변환의 기본 클래스.</target>
        </trans-unit>
        <trans-unit id="4b020133fce5a78a3c62cb3e55c3a546b7844a09" translate="yes" xml:space="preserve">
          <source>Django uses &lt;a href=&quot;../http/sessions&quot;&gt;sessions&lt;/a&gt; and middleware to hook the authentication system into &lt;a href=&quot;../../ref/request-response#django.http.HttpRequest&quot;&gt;&lt;code&gt;request objects&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Django는 &lt;a href=&quot;../http/sessions&quot;&gt;세션&lt;/a&gt; 과 미들웨어를 사용 하여 인증 시스템을 &lt;a href=&quot;../../ref/request-response#django.http.HttpRequest&quot;&gt; &lt;code&gt;request objects&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="c1bbb57f43afa18d955b69b4939855d1f5e943f8" translate="yes" xml:space="preserve">
          <source>Django uses PostgreSQL&amp;rsquo;s &lt;a href=&quot;https://www.postgresql.org/docs/current/datatype-numeric.html#DATATYPE-SERIAL&quot;&gt;SERIAL data type&lt;/a&gt; to store auto-incrementing primary keys. A &lt;code&gt;SERIAL&lt;/code&gt; column is populated with values from a &lt;a href=&quot;https://www.postgresql.org/docs/current/sql-createsequence.html&quot;&gt;sequence&lt;/a&gt; that keeps track of the next available value. Manually assigning a value to an auto-incrementing field doesn&amp;rsquo;t update the field&amp;rsquo;s sequence, which might later cause a conflict. For example:</source>
          <target state="translated">Django는 PostgreSQL의 &lt;a href=&quot;https://www.postgresql.org/docs/current/datatype-numeric.html#DATATYPE-SERIAL&quot;&gt;SERIAL 데이터 형식&lt;/a&gt; 을 사용하여 자동 증가 기본 키를 저장합니다. &lt;code&gt;SERIAL&lt;/code&gt; 컬럼은의 값으로 채워 &lt;a href=&quot;https://www.postgresql.org/docs/current/sql-createsequence.html&quot;&gt;시퀀스&lt;/a&gt; 가능한 다음 값을 추적. 자동 증분 필드에 값을 수동으로 할당해도 필드 순서가 업데이트되지 않아 나중에 충돌이 발생할 수 있습니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="cc1b7de389b6a28717a6ad0640e14d1b9f7222eb" translate="yes" xml:space="preserve">
          <source>Django uses Python&amp;rsquo;s builtin &lt;a href=&quot;https://docs.python.org/3/library/logging.html#module-logging&quot;&gt;&lt;code&gt;logging&lt;/code&gt;&lt;/a&gt; module to perform system logging. The usage of this module is discussed in detail in Python&amp;rsquo;s own documentation. However, if you&amp;rsquo;ve never used Python&amp;rsquo;s logging framework (or even if you have), here&amp;rsquo;s a quick primer.</source>
          <target state="translated">Django는 Python의 내장 &lt;a href=&quot;https://docs.python.org/3/library/logging.html#module-logging&quot;&gt; &lt;code&gt;logging&lt;/code&gt; &lt;/a&gt; 모듈을 사용하여 시스템 로깅을 수행합니다. 이 모듈의 사용법은 파이썬 자체 문서에서 자세히 설명합니다. 그러나 파이썬의 로깅 프레임 워크를 사용하지 않은 경우 (또는 가지고있는 경우에도) 여기에 간단한 입문서가 있습니다.</target>
        </trans-unit>
        <trans-unit id="11e8c9fb7e6d1086b4a0a16bc606074e3aa169b0" translate="yes" xml:space="preserve">
          <source>Django uses different formats for displaying data to those it uses for parsing data. Most notably, the formats for parsing dates can&amp;rsquo;t use the &lt;code&gt;%a&lt;/code&gt; (abbreviated weekday name), &lt;code&gt;%A&lt;/code&gt; (full weekday name), &lt;code&gt;%b&lt;/code&gt; (abbreviated month name), &lt;code&gt;%B&lt;/code&gt; (full month name), or &lt;code&gt;%p&lt;/code&gt; (AM/PM).</source>
          <target state="translated">Django는 데이터를 구문 분석하는 데 사용하는 형식으로 데이터를 표시하기 위해 다른 형식을 사용합니다. 특히 구문 분석 날짜의 형식은 &lt;code&gt;%a&lt;/code&gt; (약식 요일 이름), &lt;code&gt;%A&lt;/code&gt; (전체 요일 이름), &lt;code&gt;%b&lt;/code&gt; (약식 월 이름), &lt;code&gt;%B&lt;/code&gt; (완전 월 이름) 또는 &lt;code&gt;%p&lt;/code&gt; (AM)를 사용할 수 없습니다. /오후).</target>
        </trans-unit>
        <trans-unit id="dee3e4e1b8a6f18127bee8cbc26a33dd27e873ec" translate="yes" xml:space="preserve">
          <source>Django uses request and response objects to pass state through the system.</source>
          <target state="translated">Django는 요청 및 응답 객체를 사용하여 시스템을 통해 상태를 전달합니다.</target>
        </trans-unit>
        <trans-unit id="74e4b2cb8b9f7cbf98f6e94166cbaeaf7166d42e" translate="yes" xml:space="preserve">
          <source>Django uses the &lt;a href=&quot;../../../topics/settings#envvar-DJANGO_SETTINGS_MODULE&quot; id=&quot;index-0&quot;&gt;&lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt;&lt;/a&gt; environment variable to locate the appropriate settings module. It must contain the dotted path to the settings module. You can use a different value for development and production; it all depends on how you organize your settings.</source>
          <target state="translated">Django는 &lt;a href=&quot;../../../topics/settings#envvar-DJANGO_SETTINGS_MODULE&quot; id=&quot;index-0&quot;&gt; &lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt; &lt;/a&gt; 환경 변수를 사용하여 적절한 설정 모듈을 찾습니다. 설정 모듈에 대한 점선 경로를 포함해야합니다. 개발 및 생산에 다른 가치를 사용할 수 있습니다. 그것은 모두 설정을 구성하는 방법에 달려 있습니다.</target>
        </trans-unit>
        <trans-unit id="96825e21fe7eebdc64f0447ba13b15b55be158c5" translate="yes" xml:space="preserve">
          <source>Django uses the &lt;code&gt;Host&lt;/code&gt; header provided by the client to construct URLs in certain cases. While these values are sanitized to prevent Cross Site Scripting attacks, a fake &lt;code&gt;Host&lt;/code&gt; value can be used for Cross-Site Request Forgery, cache poisoning attacks, and poisoning links in emails.</source>
          <target state="translated">Django는 클라이언트가 제공 한 &lt;code&gt;Host&lt;/code&gt; 헤더를 사용하여 특정 경우 URL을 생성합니다. 이러한 값은 사이트 간 스크립팅 공격을 방지하기 위해 삭제되는 반면 사이트 간 요청 위조, 캐시 포이즈 닝 공격 및 이메일의 포이즌 링크에 가짜 &lt;code&gt;Host&lt;/code&gt; 값을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="dfdcaf50698743fc2c62e7ab90864b970a62d950" translate="yes" xml:space="preserve">
          <source>Django uses the template loaders in order according to the &lt;code&gt;'loaders'&lt;/code&gt; option. It uses each loader until a loader finds a match.</source>
          <target state="translated">Django는 &lt;code&gt;'loaders'&lt;/code&gt; 옵션 에 따라 템플릿 로더를 순서대로 사용합니다 . 로더가 일치하는 것을 찾을 때까지 각 로더를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="13125eefa99f1a553f7321dbebbe143047447ad9" translate="yes" xml:space="preserve">
          <source>Django uses transactions or savepoints automatically to guarantee the integrity of ORM operations that require multiple queries, especially &lt;a href=&quot;queries#topics-db-queries-delete&quot;&gt;delete()&lt;/a&gt; and &lt;a href=&quot;queries#topics-db-queries-update&quot;&gt;update()&lt;/a&gt; queries.</source>
          <target state="translated">Django는 트랜잭션 또는 저장 점을 자동으로 사용하여 여러 쿼리, 특히 &lt;a href=&quot;queries#topics-db-queries-delete&quot;&gt;delete ()&lt;/a&gt; 및 &lt;a href=&quot;queries#topics-db-queries-update&quot;&gt;update ()&lt;/a&gt; 쿼리 가 필요한 ORM 작업의 무결성을 보장 합니다.</target>
        </trans-unit>
        <trans-unit id="fe5d6c967da6067e8b951d118acb5d66501f04a1" translate="yes" xml:space="preserve">
          <source>Django view for the model instance addition page. See note below.</source>
          <target state="translated">모델 인스턴스 추가 페이지의 장고보기. 아래 참고 사항을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="f1de7ea809eadd74a7127c3388dae72fcaefdf18" translate="yes" xml:space="preserve">
          <source>Django view for the model instance editing page. See note below.</source>
          <target state="translated">모델 인스턴스 편집 페이지의 장고보기. 아래 참고 사항을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="c5b507d34513606e3c77d80672992d6a9fbe4d85" translate="yes" xml:space="preserve">
          <source>Django view for the model instance(s) deletion confirmation page. See note below.</source>
          <target state="translated">모델 인스턴스 삭제 확인 페이지의 장고보기. 아래 참고 사항을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="9bba4285700873e8482c72855cc2e15507194841" translate="yes" xml:space="preserve">
          <source>Django view for the model instances change list/actions page. See note below.</source>
          <target state="translated">모델 인스턴스 변경 목록 / 액션 페이지의 장고보기. 아래 참고 사항을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="05a08aba7068d7cfa268366bc4dd726cddb37ccd" translate="yes" xml:space="preserve">
          <source>Django view for the page that shows the modification history for a given model instance.</source>
          <target state="translated">주어진 모델 인스턴스의 수정 히스토리를 보여주는 페이지의 장고보기.</target>
        </trans-unit>
        <trans-unit id="aface9e79a99d1bd6e90a2d9d86a2521fd584daa" translate="yes" xml:space="preserve">
          <source>Django was written in a newsroom environment, with a very clear separation between &amp;ldquo;content publishers&amp;rdquo; and the &amp;ldquo;public&amp;rdquo; site. Site managers use the system to add news stories, events, sports scores, etc., and that content is displayed on the public site. Django solves the problem of creating a unified interface for site administrators to edit content.</source>
          <target state="translated">Django는 뉴스 룸 환경에서 작성되었으며&amp;ldquo;콘텐츠 게시자&amp;rdquo;와&amp;ldquo;공개&amp;rdquo;사이트가 매우 명확하게 구분되어 있습니다. 사이트 관리자는이 시스템을 사용하여 뉴스, 이벤트, 스포츠 점수 등을 추가하고 해당 컨텐츠는 공개 사이트에 표시됩니다. Django는 사이트 관리자가 컨텐츠를 편집 할 수있는 통합 인터페이스를 작성하는 문제를 해결합니다.</target>
        </trans-unit>
        <trans-unit id="c249cea2d49b123b871ddda6c0f9d9096c91012e" translate="yes" xml:space="preserve">
          <source>Django will also accept URLs (&lt;code&gt;http&lt;/code&gt;, &lt;code&gt;https&lt;/code&gt;, &lt;code&gt;ftp&lt;/code&gt;) to compressed archives with the app template files, downloading and extracting them on the fly.</source>
          <target state="translated">Django는 또한 앱 템플릿 파일을 사용하여 압축 된 아카이브에 대한 URL ( &lt;code&gt;http&lt;/code&gt; , &lt;code&gt;https&lt;/code&gt; , &lt;code&gt;ftp&lt;/code&gt; )을 수락 하여 즉시 다운로드 및 추출합니다.</target>
        </trans-unit>
        <trans-unit id="f34cdfbe3c704a28a71a702407979112a1698861" translate="yes" xml:space="preserve">
          <source>Django will automatically generate a table to manage many-to-many relationships. However, if you want to manually specify the intermediary table, you can use the &lt;a href=&quot;#django.db.models.ManyToManyField.through&quot;&gt;&lt;code&gt;through&lt;/code&gt;&lt;/a&gt; option to specify the Django model that represents the intermediate table that you want to use.</source>
          <target state="translated">Django는 다 대다 관계를 관리하기 위해 자동으로 테이블을 생성합니다. 그러나 중개 테이블을 수동으로 지정하려는 경우, &lt;a href=&quot;#django.db.models.ManyToManyField.through&quot;&gt; &lt;code&gt;through&lt;/code&gt; &lt;/a&gt; 옵션을 사용하여 사용하려는 중간 테이블을 나타내는 Django 모델을 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="507919a3033980b57da5011d52afea805b15f8a9" translate="yes" xml:space="preserve">
          <source>Django will complain if you try to assign or add an object of the wrong type.</source>
          <target state="translated">Django는 잘못된 유형의 객체를 할당하거나 추가하려고하면 불평합니다.</target>
        </trans-unit>
        <trans-unit id="5a5d62d27edcbee960ffc21f9af77ca8c5c6bac2" translate="yes" xml:space="preserve">
          <source>Django will load any and all fixtures it finds in these locations that match the provided fixture names.</source>
          <target state="translated">Django는 제공된 조명기 이름과 일치하는 위치에서 찾은 모든 조명기를로드합니다.</target>
        </trans-unit>
        <trans-unit id="2eeeec049cc49d604124c2e230da601af1d4b644" translate="yes" xml:space="preserve">
          <source>Django will look within each of these paths for the &lt;code&gt;&amp;lt;locale_code&amp;gt;/LC_MESSAGES&lt;/code&gt; directories containing the actual translation files.</source>
          <target state="translated">Django는 이러한 각 경로 내 에서 실제 변환 파일이 포함 된 &lt;code&gt;&amp;lt;locale_code&amp;gt;/LC_MESSAGES&lt;/code&gt; 디렉토리를 찾습니다.</target>
        </trans-unit>
        <trans-unit id="69c9ddb244e623af7fd8c28de3ea8b30265e013b" translate="yes" xml:space="preserve">
          <source>Django will make migrations for any change to your models or fields - even options that don&amp;rsquo;t affect the database - as the only way it can reconstruct a field correctly is to have all the changes in the history, and you might need those options in some data migrations later on (for example, if you&amp;rsquo;ve set custom validators).</source>
          <target state="translated">Django는 필드를 올바르게 재구성 할 수있는 유일한 방법은 기록에 모든 변경 사항을 적용하는 것이므로 모델 또는 필드 (데이터베이스에 영향을주지 않는 옵션)에 대한 변경 사항을 마이그레이션합니다. 나중에 일부 데이터 마이그레이션 (예 : 사용자 지정 유효성 검사기를 설정 한 경우)</target>
        </trans-unit>
        <trans-unit id="ab39643216ffdee5b859edda52519f804c62de11" translate="yes" xml:space="preserve">
          <source>Django will not upgrade existing columns to include fractional seconds if the database server supports it. If you want to enable them on an existing database, it&amp;rsquo;s up to you to either manually update the column on the target database, by executing a command like:</source>
          <target state="translated">Django는 데이터베이스 서버가 지원하는 경우 소수 초를 포함하도록 기존 열을 업그레이드하지 않습니다. 기존 데이터베이스에서이를 사용하려면 다음과 같은 명령을 실행하여 대상 데이터베이스에서 열을 수동으로 업데이트해야합니다.</target>
        </trans-unit>
        <trans-unit id="69c85270deabe31c7b43879b240a74cebde092ef" translate="yes" xml:space="preserve">
          <source>Django will prevent any attempt to save an incomplete model, so if the model does not allow the missing fields to be empty, and does not provide a default value for the missing fields, any attempt to &lt;code&gt;save()&lt;/code&gt; a &lt;code&gt;ModelForm&lt;/code&gt; with missing fields will fail. To avoid this failure, you must instantiate your model with initial values for the missing, but required fields:</source>
          <target state="translated">Django는 불완전한 모델을 저장하지 못하므로 누락 된 필드를 비워 둘 수없고 누락 된 필드에 기본값을 제공하지 않으면 누락 된 필드가 있는 &lt;code&gt;ModelForm&lt;/code&gt; 을 &lt;code&gt;save()&lt;/code&gt; 하려는 시도 가 실패합니다. . 이 실패를 피하려면 누락되었지만 필수 필드에 대한 초기 값으로 모델을 인스턴스화해야합니다.</target>
        </trans-unit>
        <trans-unit id="9fbe6d99ecf16e8da28fb0ffdd1cf7b139887990" translate="yes" xml:space="preserve">
          <source>Django will raise a &lt;a href=&quot;../../ref/exceptions#django.core.exceptions.FieldError&quot;&gt;&lt;code&gt;FieldError&lt;/code&gt;&lt;/a&gt; if you override any model field in any ancestor model.</source>
          <target state="translated">Django는 &lt;a href=&quot;../../ref/exceptions#django.core.exceptions.FieldError&quot;&gt; &lt;code&gt;FieldError&lt;/code&gt; &lt;/a&gt; 모델에서 모델 필드를 재정의 하면 FieldError를 발생시킵니다.</target>
        </trans-unit>
        <trans-unit id="dbcc154345ed2510bfe53ff63e8cf1858d225c6e" translate="yes" xml:space="preserve">
          <source>Django will refuse to commit or to rollback when an &lt;a href=&quot;#django.db.transaction.atomic&quot;&gt;&lt;code&gt;atomic()&lt;/code&gt;&lt;/a&gt; block is active, because that would break atomicity.</source>
          <target state="translated">Django는 &lt;a href=&quot;#django.db.transaction.atomic&quot;&gt; &lt;code&gt;atomic()&lt;/code&gt; &lt;/a&gt; 블록이 활성화되면 원 자성을 손상시킬 수 있기 때문에 커밋 또는 롤백을 거부합니다 .</target>
        </trans-unit>
        <trans-unit id="db38942103d59241f879f426cd2c0794bfc5eb1b" translate="yes" xml:space="preserve">
          <source>Django will refuse to start if &lt;a href=&quot;#std:setting-SECRET_KEY&quot;&gt;&lt;code&gt;SECRET_KEY&lt;/code&gt;&lt;/a&gt; is not set.</source>
          <target state="translated">&lt;a href=&quot;#std:setting-SECRET_KEY&quot;&gt; &lt;code&gt;SECRET_KEY&lt;/code&gt; &lt;/a&gt; 가 설정되어 있지 않으면 장고는 시작을 거부합니다 .</target>
        </trans-unit>
        <trans-unit id="4859e0fca340dbae94d83636af216965eef435bb" translate="yes" xml:space="preserve">
          <source>Django will refuse to turn autocommit off when an &lt;a href=&quot;#django.db.transaction.atomic&quot;&gt;&lt;code&gt;atomic()&lt;/code&gt;&lt;/a&gt; block is active, because that would break atomicity.</source>
          <target state="translated">Django는 &lt;a href=&quot;#django.db.transaction.atomic&quot;&gt; &lt;code&gt;atomic()&lt;/code&gt; &lt;/a&gt; 블록이 활성화 되면 자동 커밋을 끄지 않습니다. 원자가 손상 될 수 있기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="4be90a7594fec0dbc33baa895d7967f30e6d541e" translate="yes" xml:space="preserve">
          <source>Django will search in three locations for fixtures:</source>
          <target state="translated">장고는 세 곳에서 비품을 검색합니다.</target>
        </trans-unit>
        <trans-unit id="37ae767f8ada23cc47bb26821b2df6b11cd9164c" translate="yes" xml:space="preserve">
          <source>Django will then include the extra attributes in the rendered output:</source>
          <target state="translated">그러면 Django는 렌더링 된 출력에 추가 속성을 포함시킵니다.</target>
        </trans-unit>
        <trans-unit id="ed5841bbce46f4f9419a7f3b8b000f957f2d23ac" translate="yes" xml:space="preserve">
          <source>Django will try to interpret every element of &lt;code&gt;list_display&lt;/code&gt; in this order:</source>
          <target state="translated">Django는 &lt;code&gt;list_display&lt;/code&gt; 의 모든 요소를 다음 순서 로 해석하려고 시도합니다 .</target>
        </trans-unit>
        <trans-unit id="a2a14675af6ac7d908a6528c911cb4f15f14a729" translate="yes" xml:space="preserve">
          <source>Django will work just fine without this optimization, but each new connection will do some additional queries to set these parameters.</source>
          <target state="translated">Django는 이러한 최적화 없이는 잘 작동하지만 새로운 각 연결은 이러한 매개 변수를 설정하기 위해 몇 가지 추가 쿼리를 수행합니다.</target>
        </trans-unit>
        <trans-unit id="7b206d6c2beb156f8de4cec936ba46196f6c27ce" translate="yes" xml:space="preserve">
          <source>Django will write out the value as an instantiation of your class with the given arguments, similar to the way it writes out references to Django fields.</source>
          <target state="translated">Django는 Django 필드에 대한 참조를 작성하는 방식과 유사하게 주어진 인수를 사용하여 클래스의 인스턴스화로 값을 작성합니다.</target>
        </trans-unit>
        <trans-unit id="2759ae53890b7a98975739f7ef39fb0b14e63b90" translate="yes" xml:space="preserve">
          <source>Django wraps the standard database exceptions so that your Django code has a guaranteed common implementation of these classes.</source>
          <target state="translated">Django는 표준 데이터베이스 예외를 래핑하여 Django 코드에 이러한 클래스의 공통 구현이 보장되도록합니다.</target>
        </trans-unit>
        <trans-unit id="b1799e33f80b801898b145ad03d20b706d5e108f" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s &lt;a href=&quot;#django.core.mail.send_mail&quot;&gt;&lt;code&gt;send_mail()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#django.core.mail.send_mass_mail&quot;&gt;&lt;code&gt;send_mass_mail()&lt;/code&gt;&lt;/a&gt; functions are actually thin wrappers that make use of the &lt;a href=&quot;#django.core.mail.EmailMessage&quot;&gt;&lt;code&gt;EmailMessage&lt;/code&gt;&lt;/a&gt; class.</source>
          <target state="translated">장고의 &lt;a href=&quot;#django.core.mail.send_mail&quot;&gt; &lt;code&gt;send_mail()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#django.core.mail.send_mass_mail&quot;&gt; &lt;code&gt;send_mass_mail()&lt;/code&gt; &lt;/a&gt; 함수는 실제로 얇은 래퍼의 메이크업에 사용하는 것이 &lt;a href=&quot;#django.core.mail.EmailMessage&quot;&gt; &lt;code&gt;EmailMessage&lt;/code&gt; 의&lt;/a&gt; 클래스입니다.</target>
        </trans-unit>
        <trans-unit id="e89d5a99f035a42d1b4cb7550e1b97ae200be3ca" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s &lt;a href=&quot;#django.test.TestCase&quot;&gt;&lt;code&gt;TestCase&lt;/code&gt;&lt;/a&gt; class is a more commonly used subclass of &lt;code&gt;TransactionTestCase&lt;/code&gt; that makes use of database transaction facilities to speed up the process of resetting the database to a known state at the beginning of each test. A consequence of this, however, is that some database behaviors cannot be tested within a Django &lt;code&gt;TestCase&lt;/code&gt; class. For instance, you cannot test that a block of code is executing within a transaction, as is required when using &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.select_for_update&quot;&gt;&lt;code&gt;select_for_update()&lt;/code&gt;&lt;/a&gt;. In those cases, you should use &lt;code&gt;TransactionTestCase&lt;/code&gt;.</source>
          <target state="translated">Django의 &lt;a href=&quot;#django.test.TestCase&quot;&gt; &lt;code&gt;TestCase&lt;/code&gt; &lt;/a&gt; 클래스는 데이터베이스 테스트 기능을 사용하여 각 테스트가 시작될 때 데이터베이스를 알려진 상태로 재설정하는 속도를 높이는 &lt;code&gt;TransactionTestCase&lt;/code&gt; 의 서브 클래스입니다 . 그러나 이로 인해 Django &lt;code&gt;TestCase&lt;/code&gt; 클래스 내에서 일부 데이터베이스 동작을 테스트 할 수 없습니다 . 예를 들어 &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.select_for_update&quot;&gt; &lt;code&gt;select_for_update()&lt;/code&gt; &lt;/a&gt; 사용할 때와 같이 트랜잭션 내에서 코드 블록이 실행 중인지 테스트 할 수 없습니다 . 이 경우 &lt;code&gt;TransactionTestCase&lt;/code&gt; 를 사용해야합니다 .</target>
        </trans-unit>
        <trans-unit id="2d79ad7f6cf42b357c51ff33c8c4f0b5e46b4d87" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s &lt;a href=&quot;#module-django.contrib.admindocs&quot;&gt;&lt;code&gt;admindocs&lt;/code&gt;&lt;/a&gt; app pulls documentation from the docstrings of models, views, template tags, and template filters for any app in &lt;a href=&quot;../../settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; and makes that documentation available from the &lt;a href=&quot;index#module-django.contrib.admin&quot;&gt;&lt;code&gt;Django admin&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Django의 &lt;a href=&quot;#module-django.contrib.admindocs&quot;&gt; &lt;code&gt;admindocs&lt;/code&gt; &lt;/a&gt; 앱은 &lt;a href=&quot;../../settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; 의&lt;/a&gt; 모든 앱에 대한 모델, 뷰, 템플릿 태그 및 템플릿 필터의 문서 문자열에서 문서를 가져와 &lt;a href=&quot;index#module-django.contrib.admin&quot;&gt; &lt;code&gt;Django admin&lt;/code&gt; &lt;/a&gt; 에서 해당 문서를 사용할 수 있도록합니다 .</target>
        </trans-unit>
        <trans-unit id="c15c991d80d99f5b9a1f228350167f8fdbc3f7fe" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s &lt;a href=&quot;../../../ref/django-admin#django-admin-startproject&quot;&gt;&lt;code&gt;startproject&lt;/code&gt;&lt;/a&gt; management command sets up a default ASGI configuration for you, which you can tweak as needed for your project, and direct any ASGI-compliant application server to use.</source>
          <target state="translated">Django의 &lt;a href=&quot;../../../ref/django-admin#django-admin-startproject&quot;&gt; &lt;code&gt;startproject&lt;/code&gt; &lt;/a&gt; 관리 명령은 기본 ASGI 구성을 설정하여 프로젝트에 필요한대로 조정할 수 있으며 ASGI 호환 응용 프로그램 서버를 사용하도록 지시 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="994bf05863eaac2613f0ea1f041b7a85c5d5d6a3" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s &lt;a href=&quot;../../../ref/django-admin#django-admin-startproject&quot;&gt;&lt;code&gt;startproject&lt;/code&gt;&lt;/a&gt; management command sets up a minimal default WSGI configuration for you, which you can tweak as needed for your project, and direct any WSGI-compliant application server to use.</source>
          <target state="translated">Django의 &lt;a href=&quot;../../../ref/django-admin#django-admin-startproject&quot;&gt; &lt;code&gt;startproject&lt;/code&gt; &lt;/a&gt; 관리 명령은 최소한의 기본 WSGI 구성을 설정하여 프로젝트에 필요한대로 조정하고 WSGI 호환 응용 프로그램 서버를 사용하도록 지시 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8ea79764ba28d220b09cc0a578c919ee36858cca" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s &lt;a href=&quot;../../topics/auth/index#module-django.contrib.auth&quot;&gt;&lt;code&gt;authentication framework&lt;/code&gt;&lt;/a&gt; uses it to tie user permissions to specific models.</source>
          <target state="translated">Django의 &lt;a href=&quot;../../topics/auth/index#module-django.contrib.auth&quot;&gt; &lt;code&gt;authentication framework&lt;/code&gt; &lt;/a&gt; 는이를 사용하여 사용자 권한을 특정 모델에 연결합니다.</target>
        </trans-unit>
        <trans-unit id="5501327b4152ed104dcfc3eafa228646f92164c1" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s &lt;a href=&quot;../ref/settings#std:setting-STATICFILES_FINDERS&quot;&gt;&lt;code&gt;STATICFILES_FINDERS&lt;/code&gt;&lt;/a&gt; setting contains a list of finders that know how to discover static files from various sources. One of the defaults is &lt;code&gt;AppDirectoriesFinder&lt;/code&gt; which looks for a &amp;ldquo;static&amp;rdquo; subdirectory in each of the &lt;a href=&quot;../ref/settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt;, like the one in &lt;code&gt;polls&lt;/code&gt; we just created. The admin site uses the same directory structure for its static files.</source>
          <target state="translated">Django의 &lt;a href=&quot;../ref/settings#std:setting-STATICFILES_FINDERS&quot;&gt; &lt;code&gt;STATICFILES_FINDERS&lt;/code&gt; &lt;/a&gt; 설정에는 다양한 소스에서 정적 파일을 발견하는 방법을 알고있는 파인더 목록이 포함되어 있습니다. 기본값 중 하나는 &lt;code&gt;AppDirectoriesFinder&lt;/code&gt; 의 각에서 &quot;정적&quot;하위 디렉토리를 검색하는 &lt;a href=&quot;../ref/settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt; 에서처럼 &lt;code&gt;polls&lt;/code&gt; 우리가 만들었습니다. 관리 사이트는 정적 파일에 대해 동일한 디렉토리 구조를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="795ddb6474a20a69af41740fd9a7e5047e556521" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s &lt;a href=&quot;../testing/tools#django.test.TestCase&quot;&gt;&lt;code&gt;TestCase&lt;/code&gt;&lt;/a&gt; class also wraps each test in a transaction for performance reasons.</source>
          <target state="translated">Django의 &lt;a href=&quot;../testing/tools#django.test.TestCase&quot;&gt; &lt;code&gt;TestCase&lt;/code&gt; &lt;/a&gt; 클래스는 성능상의 이유로 각 테스트를 트랜잭션으로 래핑합니다.</target>
        </trans-unit>
        <trans-unit id="5e8bdbb577636b4a2bdd4bb5d022bd93bdede080" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s &lt;a href=&quot;../testing/tools#django.test.TestCase&quot;&gt;&lt;code&gt;TestCase&lt;/code&gt;&lt;/a&gt; class wraps each test in a transaction and rolls back that transaction after each test, in order to provide test isolation. This means that no transaction is ever actually committed, thus your &lt;a href=&quot;#django.db.transaction.on_commit&quot;&gt;&lt;code&gt;on_commit()&lt;/code&gt;&lt;/a&gt; callbacks will never be run. If you need to test the results of an &lt;a href=&quot;#django.db.transaction.on_commit&quot;&gt;&lt;code&gt;on_commit()&lt;/code&gt;&lt;/a&gt; callback, use a &lt;a href=&quot;../testing/tools#django.test.TransactionTestCase&quot;&gt;&lt;code&gt;TransactionTestCase&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">Django의 &lt;a href=&quot;../testing/tools#django.test.TestCase&quot;&gt; &lt;code&gt;TestCase&lt;/code&gt; &lt;/a&gt; 클래스는 테스트 격리를 제공하기 위해 각 테스트를 트랜잭션으로 랩핑하고 각 테스트 후에 해당 트랜잭션을 롤백합니다. 즉, 실제로 커밋 된 트랜잭션이 없으므로 &lt;a href=&quot;#django.db.transaction.on_commit&quot;&gt; &lt;code&gt;on_commit()&lt;/code&gt; &lt;/a&gt; 콜백이 실행되지 않습니다. &lt;a href=&quot;#django.db.transaction.on_commit&quot;&gt; &lt;code&gt;on_commit()&lt;/code&gt; &lt;/a&gt; 콜백 의 결과를 테스트해야하는 경우 &lt;a href=&quot;../testing/tools#django.test.TransactionTestCase&quot;&gt; &lt;code&gt;TransactionTestCase&lt;/code&gt; 를&lt;/a&gt; 대신 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="0e815a29fe4e32e45a3cf584f461952c96a347c0" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s &lt;a href=&quot;../topics/templates#django.template.backends.jinja2.Jinja2&quot;&gt;&lt;code&gt;Jinja2&lt;/code&gt;&lt;/a&gt; template backend adds &lt;code&gt;{{ csrf_input }}&lt;/code&gt; to the context of all templates which is equivalent to &lt;code&gt;{% csrf_token %}&lt;/code&gt; in the Django template language. For example:</source>
          <target state="translated">Django의 &lt;a href=&quot;../topics/templates#django.template.backends.jinja2.Jinja2&quot;&gt; &lt;code&gt;Jinja2&lt;/code&gt; &lt;/a&gt; 템플릿 백엔드는 Django 템플릿 언어에서 &lt;code&gt;{% csrf_token %}&lt;/code&gt; 에 해당하는 모든 템플릿의 컨텍스트에 &lt;code&gt;{{ csrf_input }}&lt;/code&gt; 을 추가합니다 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="c834e900b75917432290d52ebad384ccbf6991d8" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s &lt;a href=&quot;cache&quot;&gt;caching framework&lt;/a&gt; offers very significant opportunities for performance gains, by saving dynamic content so that it doesn&amp;rsquo;t need to be calculated for each request.</source>
          <target state="translated">Django의 &lt;a href=&quot;cache&quot;&gt;캐싱 프레임 워크&lt;/a&gt; 는 각 요청에 대해 계산할 필요가 없도록 동적 컨텐츠를 저장하여 성능을 향상시킬 수있는 기회를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="ac46317d500f8a03cbf11d8c05b66555fd03d7b8" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s &lt;code&gt;get_absolute_url()&lt;/code&gt; convention is nice for getting your objects&amp;rsquo; URL without the domain name, but in some cases you might want to display the full URL &amp;ndash; with &lt;code&gt;http://&lt;/code&gt; and the domain and everything &amp;ndash; for an object. To do this, you can use the sites framework. An example:</source>
          <target state="translated">Django의 &lt;code&gt;get_absolute_url()&lt;/code&gt; 규칙은 도메인 이름없이 객체의 URL을 얻는 데 유용 하지만 경우에 따라 &lt;code&gt;http://&lt;/code&gt; 및 도메인 및 모든 객체와 함께 전체 URL을 표시 할 수 있습니다 . 이를 위해 sites 프레임 워크를 사용할 수 있습니다. 예를 들면 :</target>
        </trans-unit>
        <trans-unit id="06e2f42b7cd7083eb3d4f27bbd9c5fd9034e7965" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s &lt;code&gt;inspectdb&lt;/code&gt; feature uses the &lt;code&gt;information_schema&lt;/code&gt; database, which contains detailed data on all database schemas.</source>
          <target state="translated">Django의 &lt;code&gt;inspectdb&lt;/code&gt; 기능은 모든 데이터베이스 스키마에 대한 자세한 데이터가 포함 된 &lt;code&gt;information_schema&lt;/code&gt; 데이터베이스를 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="38b9d130fb7255bf29868f334ba2b430052190bc" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s &lt;em&gt;generic views&lt;/em&gt; were developed to ease that pain. They take certain common idioms and patterns found in view development and abstract them so that you can quickly write common views of data without having to write too much code.</source>
          <target state="translated">Django의 &lt;em&gt;일반적인 견해&lt;/em&gt; 는 그러한 고통을 완화시키기 위해 개발되었습니다. 뷰 개발에서 발견 된 특정 일반적인 관용구와 패턴을 취하고 추상화하여 너무 많은 코드를 작성하지 않고도 데이터의 일반적인 뷰를 빠르게 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="cd7326a4a9f258d96327edf15b2c1c3bb1869ff3" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s Time Zone</source>
          <target state="translated">장고의 시간대</target>
        </trans-unit>
        <trans-unit id="7e23f2e0db7a88fb2ab35f2591f30d699ef16b58" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s admin doesn&amp;rsquo;t have any explicit support for multiple databases. If you want to provide an admin interface for a model on a database other than that specified by your router chain, you&amp;rsquo;ll need to write custom &lt;a href=&quot;../../ref/contrib/admin/index#django.contrib.admin.ModelAdmin&quot;&gt;&lt;code&gt;ModelAdmin&lt;/code&gt;&lt;/a&gt; classes that will direct the admin to use a specific database for content.</source>
          <target state="translated">Django의 관리자는 여러 데이터베이스를 명시 적으로 지원하지 않습니다. 라우터 체인에서 지정한 것과 다른 데이터베이스에 모델에 대한 관리 인터페이스를 제공하려면 관리자 가 컨텐츠에 특정 데이터베이스를 사용하도록 지시하는 사용자 정의 &lt;a href=&quot;../../ref/contrib/admin/index#django.contrib.admin.ModelAdmin&quot;&gt; &lt;code&gt;ModelAdmin&lt;/code&gt; &lt;/a&gt; 클래스 를 작성해야 합니다.</target>
        </trans-unit>
        <trans-unit id="462512a8d3dafad0ba0fdf29eac4dd233fb8a4a6" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s admin interface can include a complete reference of all template tags and filters available for a given site. See &lt;a href=&quot;../contrib/admin/admindocs&quot;&gt;The Django admin documentation generator&lt;/a&gt;.</source>
          <target state="translated">Django의 관리 인터페이스에는 주어진 사이트에서 사용 가능한 모든 템플릿 태그 및 필터에 대한 완전한 참조가 포함될 수 있습니다. &lt;a href=&quot;../contrib/admin/admindocs&quot;&gt;Django 관리자 설명서 생성기를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="be7079be76e03d4f891dc4dc896f16cc29ee7c5b" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s authentication framework.</source>
          <target state="translated">장고의 인증 프레임 워크.</target>
        </trans-unit>
        <trans-unit id="c30c0231b27735ad55bf3eb7dc0c9161f0be1775" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s built-in &lt;a href=&quot;default#built-in-auth-forms&quot;&gt;forms&lt;/a&gt; and &lt;a href=&quot;default#built-in-auth-views&quot;&gt;views&lt;/a&gt; make certain assumptions about the user model that they are working with.</source>
          <target state="translated">Django의 내장 &lt;a href=&quot;default#built-in-auth-forms&quot;&gt;양식&lt;/a&gt; 및 &lt;a href=&quot;default#built-in-auth-views&quot;&gt;뷰&lt;/a&gt; 는 작업중인 사용자 모델에 대한 특정 가정을합니다.</target>
        </trans-unit>
        <trans-unit id="6667b78f3d5498eb1e51da938b18e5b8029f8c6c" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s built-in class-based views provide a lot of functionality, but some of it you may want to use separately. For instance, you may want to write a view that renders a template to make the HTTP response, but you can&amp;rsquo;t use &lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.TemplateView&quot;&gt;&lt;code&gt;TemplateView&lt;/code&gt;&lt;/a&gt;; perhaps you need to render a template only on &lt;code&gt;POST&lt;/code&gt;, with &lt;code&gt;GET&lt;/code&gt; doing something else entirely. While you could use &lt;a href=&quot;../../ref/template-response#django.template.response.TemplateResponse&quot;&gt;&lt;code&gt;TemplateResponse&lt;/code&gt;&lt;/a&gt; directly, this will likely result in duplicate code.</source>
          <target state="translated">Django의 내장 클래스 기반 뷰는 많은 기능을 제공하지만 일부는 별도로 사용할 수 있습니다. 예를 들어, HTTP 응답을 만들기 위해 템플릿을 렌더링하는 뷰를 작성하려고 할 수 있지만 &lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.TemplateView&quot;&gt; &lt;code&gt;TemplateView&lt;/code&gt; 를&lt;/a&gt; 사용할 수는 없습니다 . &lt;code&gt;GET&lt;/code&gt; 을 사용 하여 다른 작업을 수행하는 경우 &lt;code&gt;POST&lt;/code&gt; 에서만 템플릿을 렌더링해야 할 수도 있습니다 . &lt;a href=&quot;../../ref/template-response#django.template.response.TemplateResponse&quot;&gt; &lt;code&gt;TemplateResponse&lt;/code&gt; 를&lt;/a&gt; 직접 사용할 수는 있지만 코드가 중복 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3351fe369c4dafda28aefabb25d378def8b5e6c2" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s built-in field types don&amp;rsquo;t cover every possible database column type &amp;ndash; only the common types, such as &lt;code&gt;VARCHAR&lt;/code&gt; and &lt;code&gt;INTEGER&lt;/code&gt;. For more obscure column types, such as geographic polygons or even user-created types such as &lt;a href=&quot;https://www.postgresql.org/docs/current/sql-createtype.html&quot;&gt;PostgreSQL custom types&lt;/a&gt;, you can define your own Django &lt;code&gt;Field&lt;/code&gt; subclasses.</source>
          <target state="translated">Django의 내장 필드 유형은 가능한 모든 데이터베이스 열 유형을 포함하지는 않으며 &lt;code&gt;VARCHAR&lt;/code&gt; 및 &lt;code&gt;INTEGER&lt;/code&gt; 와 같은 공통 유형 만 포함합니다 . 지리적 다각형과 같은 모호한 열 유형 또는 &lt;a href=&quot;https://www.postgresql.org/docs/current/sql-createtype.html&quot;&gt;PostgreSQL 사용자 정의 유형&lt;/a&gt; 과 같은 사용자 작성 유형을 위해 자체 Django &lt;code&gt;Field&lt;/code&gt; 서브 클래스를 정의 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="8cbc91017f9715973c1de43f85f5d9a73f2e8225" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s built-in filters have &lt;code&gt;autoescape=True&lt;/code&gt; by default in order to get the proper autoescaping behavior and avoid a cross-site script vulnerability.</source>
          <target state="translated">Django의 내장 필터는 적절한 자동 이스케이프 동작을 수행하고 사이트 간 스크립트 취약점을 피하기 위해 기본적으로 &lt;code&gt;autoescape=True&lt;/code&gt; 를 갖 습니다 .</target>
        </trans-unit>
        <trans-unit id="d26d318f2fd9e35732c375544c3f2d36aeee5a78" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s built-in lookups are listed below. It is also possible to write &lt;a href=&quot;../../howto/custom-lookups&quot;&gt;custom lookups&lt;/a&gt; for model fields.</source>
          <target state="translated">Django의 내장 조회는 다음과 같습니다. 모델 필드에 대한 &lt;a href=&quot;../../howto/custom-lookups&quot;&gt;사용자 정의 조회&lt;/a&gt; 를 작성할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="83a2b4e1815e57ec0e068ac9705117e9c68a5a1f" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s cache framework</source>
          <target state="translated">장고의 캐시 프레임 워크</target>
        </trans-unit>
        <trans-unit id="8b0208438688c87f01fc9957b7e09e357bb00e7e" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s database layer provides various ways to help developers get the best performance from their databases. The &lt;a href=&quot;db/optimization&quot;&gt;database optimization documentation&lt;/a&gt; gathers together links to the relevant documentation and adds various tips that outline the steps to take when attempting to optimize your database usage.</source>
          <target state="translated">Django의 데이터베이스 계층은 개발자가 데이터베이스에서 최고의 성능을 얻을 수 있도록 다양한 방법을 제공합니다. &lt;a href=&quot;db/optimization&quot;&gt;데이터베이스 최적화 문서&lt;/a&gt; 수집하여 함께 관련 문서에 연결하고 데이터베이스 사용을 최적화 할 때 윤곽 단계를 취할 것을 다양한 팁을 추가합니다.</target>
        </trans-unit>
        <trans-unit id="43495845a3dbc72cde0c9f49548a7d0ccf563ed2" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s database layer provides various ways to help developers get the most out of their databases. This document gathers together links to the relevant documentation, and adds various tips, organized under a number of headings that outline the steps to take when attempting to optimize your database usage.</source>
          <target state="translated">Django의 데이터베이스 계층은 개발자가 데이터베이스를 최대한 활용할 수 있도록 다양한 방법을 제공합니다. 이 문서는 관련 문서에 대한 링크를 함께 모으고 데이터베이스 사용법을 최적화 할 때 취해야 할 단계를 설명하는 여러 제목으로 구성된 다양한 팁을 추가합니다.</target>
        </trans-unit>
        <trans-unit id="0475c07d5782ed4b2001b68d7d809a32e56ec47a" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s default behavior is to run in autocommit mode. Each query is immediately committed to the database, unless a transaction is active. &lt;a href=&quot;#autocommit-details&quot;&gt;See below for details&lt;/a&gt;.</source>
          <target state="translated">Django의 기본 동작은 자동 커밋 모드에서 실행하는 것입니다. 트랜잭션이 활성화되어 있지 않으면 각 쿼리는 즉시 데이터베이스에 커밋됩니다. &lt;a href=&quot;#autocommit-details&quot;&gt;자세한 내용은 아래를 참조하십시오&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="b8cbf3b174d1ffa16e55b47feec2bab4b713d089" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s default file storage is given by the &lt;a href=&quot;../ref/settings#std:setting-DEFAULT_FILE_STORAGE&quot;&gt;&lt;code&gt;DEFAULT_FILE_STORAGE&lt;/code&gt;&lt;/a&gt; setting; if you don&amp;rsquo;t explicitly provide a storage system, this is the one that will be used.</source>
          <target state="translated">Django의 기본 파일 저장소는 &lt;a href=&quot;../ref/settings#std:setting-DEFAULT_FILE_STORAGE&quot;&gt; &lt;code&gt;DEFAULT_FILE_STORAGE&lt;/code&gt; &lt;/a&gt; 설정에 의해 제공됩니다 . 스토리지 시스템을 명시 적으로 제공하지 않으면 이것이 사용될 시스템입니다.</target>
        </trans-unit>
        <trans-unit id="99476d04c00fd862c3aafcc3d210514bfb63bf87" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s default logging configuration</source>
          <target state="translated">장고의 기본 로깅 구성</target>
        </trans-unit>
        <trans-unit id="2fa97b6c90915a3c003302b386b76e6031e5510b" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s default transaction behavior</source>
          <target state="translated">장고의 기본 거래 행동</target>
        </trans-unit>
        <trans-unit id="a0edabcecfdfb4326c1402d6f616e4d2fa0593d7" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s form (and model) fields support use of utility functions and classes known as validators. A validator is a callable object or function that takes a value and returns nothing if the value is valid or raises a &lt;a href=&quot;../exceptions#django.core.exceptions.ValidationError&quot;&gt;&lt;code&gt;ValidationError&lt;/code&gt;&lt;/a&gt; if not. These can be passed to a field&amp;rsquo;s constructor, via the field&amp;rsquo;s &lt;code&gt;validators&lt;/code&gt; argument, or defined on the &lt;a href=&quot;fields#django.forms.Field&quot;&gt;&lt;code&gt;Field&lt;/code&gt;&lt;/a&gt; class itself with the &lt;code&gt;default_validators&lt;/code&gt; attribute.</source>
          <target state="translated">Django의 형식 (및 모델) 필드는 유효성 검사기라고하는 유틸리티 함수 및 클래스 사용을 지원합니다. 유효성 검사기는 값을 가져 와서 값이 유효하면 값을 반환하거나 유효 하지 않은 경우 &lt;a href=&quot;../exceptions#django.core.exceptions.ValidationError&quot;&gt; &lt;code&gt;ValidationError&lt;/code&gt; 를&lt;/a&gt; 발생 시키는 호출 가능한 개체 또는 함수입니다 . 이들은 필드의 &lt;code&gt;validators&lt;/code&gt; 인수 를 통해 필드의 생성자에게 전달 되거나 &lt;code&gt;default_validators&lt;/code&gt; 속성 을 사용하여 &lt;a href=&quot;fields#django.forms.Field&quot;&gt; &lt;code&gt;Field&lt;/code&gt; &lt;/a&gt; 클래스 자체 에 정의 될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="db77d8abc5a3a6967c3bb882d9fd7586a55e2353" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s form functionality can simplify and automate vast portions of this work, and can also do it more securely than most programmers would be able to do in code they wrote themselves.</source>
          <target state="translated">Django의 폼 기능은이 작업의 상당 부분을 단순화하고 자동화 할 수 있으며 대부분의 프로그래머가 자신이 작성한 코드에서 할 수있는 것보다 더 안전하게 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ce888d5b65df1849ab662435057511804109799e" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s form widgets are rendered using Django&amp;rsquo;s &lt;a href=&quot;../../topics/templates&quot;&gt;template engines system&lt;/a&gt;.</source>
          <target state="translated">Django의 폼 위젯은 Django의 &lt;a href=&quot;../../topics/templates&quot;&gt;템플릿 엔진 시스템을&lt;/a&gt; 사용하여 렌더링 됩니다 .</target>
        </trans-unit>
        <trans-unit id="863790eee5d2670b4a0d6b89f1145795fe22f204" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s formatting system is capable of displaying dates, times and numbers in templates using the format specified for the current &lt;a href=&quot;index#term-locale-name&quot;&gt;locale&lt;/a&gt;. It also handles localized input in forms.</source>
          <target state="translated">Django의 포맷팅 시스템은 현재 &lt;a href=&quot;index#term-locale-name&quot;&gt;로케일에&lt;/a&gt; 대해 지정된 포맷을 사용하여 날짜, 시간 및 숫자를 템플릿으로 표시 할 수 있습니다. 또한 현지화 된 입력을 양식으로 처리합니다.</target>
        </trans-unit>
        <trans-unit id="251ea674371562fd351a4ff63c9428379eb62098" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s generic views are built off of those base views, and were developed as a shortcut for common usage patterns such as displaying the details of an object. They take certain common idioms and patterns found in view development and abstract them so that you can quickly write common views of data without having to repeat yourself.</source>
          <target state="translated">Django의 일반 뷰는 이러한 기본 뷰를 기반으로하며 객체의 세부 정보 표시와 같은 일반적인 사용 패턴에 대한 바로 가기로 개발되었습니다. 이들은 뷰 개발에서 발견 된 특정 일반적인 관용구와 패턴을 취하고 추상화하여 반복하지 않고도 데이터에 대한 일반적인 뷰를 빠르게 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f570d4bfdc4e4d59d977de0beb89aa51768a12c1" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s internationalization hooks are on by default, and that means there&amp;rsquo;s a bit of i18n-related overhead in certain places of the framework. If you don&amp;rsquo;t use internationalization, you should take the two seconds to set &lt;a href=&quot;../../ref/settings#std:setting-USE_I18N&quot;&gt;&lt;code&gt;USE_I18N = False&lt;/code&gt;&lt;/a&gt; in your settings file. Then Django will make some optimizations so as not to load the internationalization machinery.</source>
          <target state="translated">Django의 국제화 고리는 기본적으로 켜져 있으며 이는 프레임 워크의 특정 위치에 약간의 i18n 관련 오버 헤드가 있음을 의미합니다. 국제화를 사용하지 않는 경우 설정 파일에서 &lt;a href=&quot;../../ref/settings#std:setting-USE_I18N&quot;&gt; &lt;code&gt;USE_I18N = False&lt;/code&gt; &lt;/a&gt; 를 설정하는 데 2 ​​초가 걸립니다 . 그런 다음 Django는 국제화 기계를로드하지 않도록 최적화를 수행합니다.</target>
        </trans-unit>
        <trans-unit id="95ce703bb76725592ba243d7b90ca6530d51f3e4" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s logging extensions</source>
          <target state="translated">장고의 로깅 확장</target>
        </trans-unit>
        <trans-unit id="4c6d7373d459c31ef450694489b14ceea4c53c6c" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s login form is returned using the &lt;code&gt;POST&lt;/code&gt; method, in which the browser bundles up the form data, encodes it for transmission, sends it to the server, and then receives back its response.</source>
          <target state="translated">Django의 로그인 양식은 &lt;code&gt;POST&lt;/code&gt; 메소드를 사용하여 리턴됩니다. POST 메소드는 브라우저가 양식 데이터를 번들로 묶어 전송을 위해 인코딩 한 후 서버로 보낸 다음 응답을 다시 수신합니다.</target>
        </trans-unit>
        <trans-unit id="d1e32b9d45e6840e0ff22da85d1b13d24c925144" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s media upload handling poses some vulnerabilities when that media is served in ways that do not follow security best practices. Specifically, an HTML file can be uploaded as an image if that file contains a valid PNG header followed by malicious HTML. This file will pass verification of the library that Django uses for &lt;a href=&quot;../ref/models/fields#django.db.models.ImageField&quot;&gt;&lt;code&gt;ImageField&lt;/code&gt;&lt;/a&gt; image processing (Pillow). When this file is subsequently displayed to a user, it may be displayed as HTML depending on the type and configuration of your web server.</source>
          <target state="translated">Django의 미디어 업로드 처리는 보안 모범 사례를 따르지 않는 방식으로 해당 미디어를 제공 할 때 몇 가지 취약점이 있습니다. 특히 파일에 유효한 PNG 헤더와 악의적 인 HTML이 포함 된 경우 HTML 파일을 이미지로 업로드 할 수 있습니다. 이 파일은 Django가 &lt;a href=&quot;../ref/models/fields#django.db.models.ImageField&quot;&gt; &lt;code&gt;ImageField&lt;/code&gt; &lt;/a&gt; 이미지 처리 (Pillow)에 사용하는 라이브러리의 검증을 통과합니다 . 이 파일이 이후에 사용자에게 표시되면 웹 서버의 유형 및 구성에 따라 HTML로 표시 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0407633c251ef705f61c28c08d2693776c28ec73" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s migration system is split into two parts; the logic for calculating and storing what operations should be run (&lt;code&gt;django.db.migrations&lt;/code&gt;), and the database abstraction layer that turns things like &amp;ldquo;create a model&amp;rdquo; or &amp;ldquo;delete a field&amp;rdquo; into SQL - which is the job of the &lt;code&gt;SchemaEditor&lt;/code&gt;.</source>
          <target state="translated">Django의 마이그레이션 시스템은 두 부분으로 나뉩니다. 실행해야하는 작업 ( &lt;code&gt;django.db.migrations&lt;/code&gt; ) 을 계산하고 저장하는 논리 와 &quot;모델 생성&quot;또는 &quot;필드 삭제&quot;와 같은 항목을 &lt;code&gt;SchemaEditor&lt;/code&gt; 의 작업 인 SQL로 변환하는 데이터베이스 추상화 계층 .</target>
        </trans-unit>
        <trans-unit id="362c6abb37eea505de938917ab50ce947d4a7060" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s permission framework does not have a place to store permissions for anonymous users. However, the user object passed to an authentication backend may be an &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.AnonymousUser&quot;&gt;&lt;code&gt;django.contrib.auth.models.AnonymousUser&lt;/code&gt;&lt;/a&gt; object, allowing the backend to specify custom authorization behavior for anonymous users. This is especially useful for the authors of re-usable apps, who can delegate all questions of authorization to the auth backend, rather than needing settings, for example, to control anonymous access.</source>
          <target state="translated">Django의 권한 프레임 워크에는 익명 사용자에 대한 권한을 저장할 수있는 공간이 없습니다. 그러나 인증 백엔드에 전달 된 사용자 오브젝트는 &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.AnonymousUser&quot;&gt; &lt;code&gt;django.contrib.auth.models.AnonymousUser&lt;/code&gt; &lt;/a&gt; 오브젝트 일 수 있으며 백엔드가 익명 사용자에 대한 사용자 정의 권한 부여 동작을 지정할 수 있습니다. 이 기능은 익명 액세스를 제어하기위한 설정이 아닌 인증 백엔드에 모든 권한 부여 문제를 위임 할 수있는 재사용 가능한 앱 작성자에게 특히 유용합니다.</target>
        </trans-unit>
        <trans-unit id="7e3aac4afedc8a398da48052b9846fe5f1fe5f17" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s permission framework has a foundation for object permissions, though there is no implementation for it in the core. That means that checking for object permissions will always return &lt;code&gt;False&lt;/code&gt; or an empty list (depending on the check performed). An authentication backend will receive the keyword parameters &lt;code&gt;obj&lt;/code&gt; and &lt;code&gt;user_obj&lt;/code&gt; for each object related authorization method and can return the object level permission as appropriate.</source>
          <target state="translated">Django의 권한 프레임 워크에는 객체 권한에 대한 기반이 있지만 핵심에는 구현이 없습니다. 즉, 개체 권한을 확인하면 수행 된 확인에 따라 항상 &lt;code&gt;False&lt;/code&gt; 또는 빈 목록이 반환됩니다 . 인증 백엔드는 각 객체 관련 권한 부여 방법에 대한 키워드 매개 변수 &lt;code&gt;obj&lt;/code&gt; 및 &lt;code&gt;user_obj&lt;/code&gt; 를 수신하고 적절한 경우 객체 수준 권한을 반환 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="acc360c1a49ada4ffe66147b3cdee88b9e43ff8f" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s primary deployment platform is &lt;a href=&quot;https://wsgi.readthedocs.io/en/latest/&quot;&gt;WSGI&lt;/a&gt;, the Python standard for web servers and applications.</source>
          <target state="translated">Django의 기본 배포 플랫폼은 웹 서버 및 애플리케이션을위한 Python 표준 인 &lt;a href=&quot;https://wsgi.readthedocs.io/en/latest/&quot;&gt;WSGI&lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="63601f1ad840db8b2efb29625e0649a08b663687" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s querysets are protected from SQL injection since their queries are constructed using query parameterization. A query&amp;rsquo;s SQL code is defined separately from the query&amp;rsquo;s parameters. Since parameters may be user-provided and therefore unsafe, they are escaped by the underlying database driver.</source>
          <target state="translated">Django의 쿼리 세트는 쿼리가 쿼리 매개 변수화를 사용하여 구성되므로 SQL 주입으로부터 보호됩니다. 쿼리의 SQL 코드는 쿼리의 매개 변수와 별도로 정의됩니다. 매개 변수는 사용자가 제공 할 수 있으므로 안전하지 않으므로 기본 데이터베이스 드라이버가 이스케이프합니다.</target>
        </trans-unit>
        <trans-unit id="4591ca5ee8a8ce7333c2269b9a17b51f8da27b15" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s role in forms</source>
          <target state="translated">형태에서 장고의 역할</target>
        </trans-unit>
        <trans-unit id="42238be0cf582e1445e069b6343801f5e6533820" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s serialization framework provides a mechanism for &amp;ldquo;translating&amp;rdquo; Django models into other formats. Usually these other formats will be text-based and used for sending Django data over a wire, but it&amp;rsquo;s possible for a serializer to handle any format (text-based or not).</source>
          <target state="translated">Django의 직렬화 프레임 워크는 Django 모델을 다른 형식으로 &quot;번역&quot;하는 메커니즘을 제공합니다. 일반적으로 이러한 다른 형식은 텍스트 기반이며 유선을 통해 Django 데이터를 전송하는 데 사용되지만 직렬 변환기는 모든 형식 (텍스트 기반 또는 비 형식)을 처리 할 수 ​​있습니다.</target>
        </trans-unit>
        <trans-unit id="8703506b81ae70fa19e59f2770d83f1eb9e3ffa3" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s signing methods live in the &lt;code&gt;django.core.signing&lt;/code&gt; module. To sign a value, first instantiate a &lt;code&gt;Signer&lt;/code&gt; instance:</source>
          <target state="translated">Django의 서명 방법은 &lt;code&gt;django.core.signing&lt;/code&gt; 모듈에 있습니다. 값에 서명하려면 먼저 &lt;code&gt;Signer&lt;/code&gt; 인스턴스를 인스턴스화하십시오 .</target>
        </trans-unit>
        <trans-unit id="53aec50e7654838c12a9c469c57de58ef443c013" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s system checks are organized using the following tags:</source>
          <target state="translated">Django의 시스템 검사는 다음 태그를 사용하여 구성됩니다.</target>
        </trans-unit>
        <trans-unit id="a160f352e5f8d5b134c9dbf569e10561cda10003" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s template engine provides a powerful mini-language for defining the user-facing layer of your application, encouraging a clean separation of application and presentation logic. Templates can be maintained by anyone with an understanding of HTML; no knowledge of Python is required. For introductory material, see &lt;a href=&quot;../../topics/templates&quot;&gt;Templates&lt;/a&gt; topic guide.</source>
          <target state="translated">Django의 템플릿 엔진은 응용 프로그램의 사용자 대면 계층을 정의 할 수있는 강력한 미니 언어를 제공하여 응용 프로그램과 프레젠테이션 논리를 깔끔하게 분리합니다. HTML을 이해하는 사람이라면 누구나 템플릿을 관리 할 수 ​​있습니다. 파이썬에 대한 지식이 필요하지 않습니다. 소개 자료는 &lt;a href=&quot;../../topics/templates&quot;&gt;템플릿&lt;/a&gt; 주제 안내서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="e19640dc6772dc6363b4a0d75bcc3ca278373e92" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s template language comes with a wide variety of &lt;a href=&quot;../ref/templates/builtins&quot;&gt;built-in tags and filters&lt;/a&gt; designed to address the presentation logic needs of your application. Nevertheless, you may find yourself needing functionality that is not covered by the core set of template primitives. You can extend the template engine by defining custom tags and filters using Python, and then make them available to your templates using the &lt;a href=&quot;../ref/templates/builtins#std:templatetag-load&quot;&gt;&lt;code&gt;{% load %}&lt;/code&gt;&lt;/a&gt; tag.</source>
          <target state="translated">Django의 템플릿 언어는 애플리케이션의 프리젠 테이션 로직 요구를 해결하도록 설계된 다양한 &lt;a href=&quot;../ref/templates/builtins&quot;&gt;내장 태그 및 필터&lt;/a&gt; 와 함께 제공됩니다 . 그럼에도 불구하고, 핵심 템플릿 프리미티브에 포함되지 않은 기능이 필요할 수 있습니다. Python을 사용하여 사용자 정의 태그 및 필터를 정의하여 템플리트 엔진을 확장 한 다음 &lt;a href=&quot;../ref/templates/builtins#std:templatetag-load&quot;&gt; &lt;code&gt;{% load %}&lt;/code&gt; &lt;/a&gt; 태그를 사용하여 템플리트에서 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="6b39e75e3b386c23fbff875c361b07353d376fb8" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s template language has no way to escape the characters used for its own syntax. For example, the &lt;a href=&quot;builtins#std:templatetag-templatetag&quot;&gt;&lt;code&gt;templatetag&lt;/code&gt;&lt;/a&gt; tag is required if you need to output character sequences like &lt;code&gt;{%&lt;/code&gt; and &lt;code&gt;%}&lt;/code&gt;.</source>
          <target state="translated">Django의 템플릿 언어는 자체 구문에 사용되는 문자를 벗어날 수 없습니다. 예를 들어 &lt;code&gt;{%&lt;/code&gt; 및 &lt;code&gt;%}&lt;/code&gt; 와 같은 문자 시퀀스를 출력해야하는 경우 &lt;a href=&quot;builtins#std:templatetag-templatetag&quot;&gt; &lt;code&gt;templatetag&lt;/code&gt; &lt;/a&gt; 태그가 필요합니다 .</target>
        </trans-unit>
        <trans-unit id="14555b2e3ae04bcae362be6734a260a81cd471b2" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s template language is designed to strike a balance between power and ease. It&amp;rsquo;s designed to feel comfortable to those used to working with HTML. If you have any exposure to other text-based template languages, such as &lt;a href=&quot;https://www.smarty.net/&quot;&gt;Smarty&lt;/a&gt; or &lt;a href=&quot;https://palletsprojects.com/p/jinja/&quot;&gt;Jinja2&lt;/a&gt;, you should feel right at home with Django&amp;rsquo;s templates.</source>
          <target state="translated">Django의 템플릿 언어는 힘과 편리함의 균형을 유지하도록 설계되었습니다. HTML 작업에 익숙한 사용자에게 편안한 느낌을 주도록 설계되었습니다. &lt;a href=&quot;https://www.smarty.net/&quot;&gt;Smarty&lt;/a&gt; 또는 &lt;a href=&quot;https://palletsprojects.com/p/jinja/&quot;&gt;Jinja2&lt;/a&gt; 와 같은 다른 텍스트 기반 템플릿 언어에 노출되어 있다면 Django의 템플릿을 사용하여 집에서 편안하게 느낄 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ad452e06fc5584f4e2b1539eb2e854800b62138c" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s translation machinery uses the standard &lt;code&gt;gettext&lt;/code&gt; module that comes with Python. If you know &lt;code&gt;gettext&lt;/code&gt;, you might note these specialties in the way Django does translation:</source>
          <target state="translated">Django의 번역 기계는 Python과 함께 제공 되는 표준 &lt;code&gt;gettext&lt;/code&gt; 모듈을 사용합니다 . &lt;code&gt;gettext&lt;/code&gt; 를 알고 있다면 Django가 번역하는 방식에서 다음과 같은 전문 분야에 주목할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="65be3002faaabd9496fc535a56e83b3f0d75a1c6" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s unit tests use a Python standard library module: &lt;a href=&quot;https://docs.python.org/3/library/unittest.html#module-unittest&quot;&gt;&lt;code&gt;unittest&lt;/code&gt;&lt;/a&gt;. This module defines tests using a class-based approach.</source>
          <target state="translated">Django의 단위 테스트는 Python 표준 라이브러리 모듈 인 &lt;a href=&quot;https://docs.python.org/3/library/unittest.html#module-unittest&quot;&gt; &lt;code&gt;unittest&lt;/code&gt; 를 사용&lt;/a&gt; 합니다. 이 모듈은 클래스 기반 접근 방식을 사용하여 테스트를 정의합니다.</target>
        </trans-unit>
        <trans-unit id="4fc143fc0eda0cf077c0ed8bc159a7d57fe70378" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s user management, such as the views in &lt;code&gt;contrib.admin&lt;/code&gt; and the &lt;a href=&quot;../ref/django-admin#django-admin-createsuperuser&quot;&gt;&lt;code&gt;createsuperuser&lt;/code&gt;&lt;/a&gt; management command, doesn&amp;rsquo;t integrate with remote users. These interfaces work with users stored in the database regardless of &lt;code&gt;AUTHENTICATION_BACKENDS&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;contrib.admin&lt;/code&gt; 의 뷰 및 &lt;a href=&quot;../ref/django-admin#django-admin-createsuperuser&quot;&gt; &lt;code&gt;createsuperuser&lt;/code&gt; &lt;/a&gt; 관리 명령 과 같은 Django의 사용자 관리 는 원격 사용자와 통합되지 않습니다. 이 인터페이스는 &lt;code&gt;AUTHENTICATION_BACKENDS&lt;/code&gt; 에 관계없이 데이터베이스에 저장된 사용자와 작동 합니다.</target>
        </trans-unit>
        <trans-unit id="f8d33492936d18c83b291c750d67dfd47e5d6706" translate="yes" xml:space="preserve">
          <source>Django, being a web framework, needs a web server in order to operate. And since most web servers don&amp;rsquo;t natively speak Python, we need an interface to make that communication happen.</source>
          <target state="translated">웹 프레임 워크 인 Django는 작동하려면 웹 서버가 필요합니다. 그리고 대부분의 웹 서버는 기본적으로 파이썬을 사용하지 않기 때문에 통신이 이루어 지도록 인터페이스가 필요합니다.</target>
        </trans-unit>
        <trans-unit id="934f62e1aea889201d007374ce24f016befee47a" translate="yes" xml:space="preserve">
          <source>Django’s cache framework</source>
          <target state="translated">장고의 캐시 프레임 워크</target>
        </trans-unit>
        <trans-unit id="df1004360a164221004a52561cd1348571cf4ffb" translate="yes" xml:space="preserve">
          <source>Do NOT prompt the user for input of any kind.</source>
          <target state="translated">사용자에게 어떤 종류의 입력을 요구하지 마십시오.</target>
        </trans-unit>
        <trans-unit id="d858235a9d9177bc29759cd56d9c29dfa7aaf9e1" translate="yes" xml:space="preserve">
          <source>Do database work in the database rather than in Python</source>
          <target state="translated">파이썬이 아닌 데이터베이스에서 데이터베이스 작업을 수행</target>
        </trans-unit>
        <trans-unit id="ec3428b70f0216459788d56a2bf4e57a021ea83d" translate="yes" xml:space="preserve">
          <source>Do everything except modify the filesystem.</source>
          <target state="translated">파일 시스템 수정을 제외한 모든 작업을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="8a74368967a74b54aeea265389bca22fa5f39931" translate="yes" xml:space="preserve">
          <source>Do not call blocking synchronous functions or libraries in any async code. Django prevents you from doing this with the parts of Django that are not async-safe, but the same may not be true of third-party apps or Python libraries.</source>
          <target state="translated">비동기 코드에서 블로킹 동기 함수 또는 라이브러리를 호출하지 마십시오. Django는 비동기 안전하지 않은 Django 부분 으로이 작업을 수행하지 못하게하지만 타사 앱이나 Python 라이브러리에서도 마찬가지입니다.</target>
        </trans-unit>
        <trans-unit id="e006986f81b7f13767a655a42e602b79e72a8e72" translate="yes" xml:space="preserve">
          <source>Do not forget to test for the &lt;code&gt;is_active&lt;/code&gt; attribute of the user in your own backend permission methods.</source>
          <target state="translated">자신의 백엔드 권한 메소드에서 사용자 의 &lt;code&gt;is_active&lt;/code&gt; 속성 을 테스트하는 것을 잊지 마십시오 .</target>
        </trans-unit>
        <trans-unit id="fe4580b9f0b2c4dc29c7bea0ad1d859a75195e5d" translate="yes" xml:space="preserve">
          <source>Do not mix both positional and keyword syntax in a single call. All arguments required by the URLconf should be present.</source>
          <target state="translated">단일 호출에서 위치 구문과 키워드 구문을 혼합하지 마십시오. URLconf에 필요한 모든 인수가 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="21e98a44ac336e561e6d3687d6c1ab4e4830fa35" translate="yes" xml:space="preserve">
          <source>Do this for your own sanity. Storing all templates in the root level of a single directory gets messy.</source>
          <target state="translated">자신의 정신을 위해 이것을하십시오. 단일 디렉토리의 루트 레벨에 모든 템플리트를 저장하면 지저분해질 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c0baec4f12b614c0b62754a64bec9c43897a3317" translate="yes" xml:space="preserve">
          <source>Do you need a &lt;code&gt;ModelAdmin&lt;/code&gt; object at all?</source>
          <target state="translated">&lt;code&gt;ModelAdmin&lt;/code&gt; 객체 가 필요 합니까?</target>
        </trans-unit>
        <trans-unit id="a90f2006b2a268ba81790f237bfac91e8405fd2b" translate="yes" xml:space="preserve">
          <source>Document-based search</source>
          <target state="translated">문서 기반 검색</target>
        </trans-unit>
        <trans-unit id="9e9cf3221a30246219863f1d2366e36cb580debc" translate="yes" xml:space="preserve">
          <source>Documentation</source>
          <target state="translated">Documentation</target>
        </trans-unit>
        <trans-unit id="f754fbc2d6c8d414319d31d01fcee89191f5d416" translate="yes" xml:space="preserve">
          <source>Documentation for this page</source>
          <target state="translated">이 페이지의 설명서</target>
        </trans-unit>
        <trans-unit id="99370224b715d587c92b553574529efe53c6ebb8" translate="yes" xml:space="preserve">
          <source>Documentation helpers</source>
          <target state="translated">문서 헬퍼</target>
        </trans-unit>
        <trans-unit id="d0c1a860c36aaaee3e92942f291fcaaacf4f6797" translate="yes" xml:space="preserve">
          <source>Documenting your custom field</source>
          <target state="translated">사용자 정의 필드 문서화</target>
        </trans-unit>
        <trans-unit id="2580bd626b0ae0ba7498e008f2c81fdbbc7f9673" translate="yes" xml:space="preserve">
          <source>Doing the following is potentially quite slow:</source>
          <target state="translated">다음을 수행하면 잠재적으로 매우 느립니다.</target>
        </trans-unit>
        <trans-unit id="d4762f076dd7573f28f1168a5f133a10a062c343" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t be fooled into thinking that if your &lt;a href=&quot;settings#std:setting-DEFAULT_CHARSET&quot;&gt;&lt;code&gt;DEFAULT_CHARSET&lt;/code&gt;&lt;/a&gt; setting is set to something other than &lt;code&gt;'utf-8'&lt;/code&gt; you can use that other encoding in your bytestrings! &lt;a href=&quot;settings#std:setting-DEFAULT_CHARSET&quot;&gt;&lt;code&gt;DEFAULT_CHARSET&lt;/code&gt;&lt;/a&gt; only applies to the strings generated as the result of template rendering (and email). Django will always assume UTF-8 encoding for internal bytestrings. The reason for this is that the &lt;a href=&quot;settings#std:setting-DEFAULT_CHARSET&quot;&gt;&lt;code&gt;DEFAULT_CHARSET&lt;/code&gt;&lt;/a&gt; setting is not actually under your control (if you are the application developer). It&amp;rsquo;s under the control of the person installing and using your application &amp;ndash; and if that person chooses a different setting, your code must still continue to work. Ergo, it cannot rely on that setting.</source>
          <target state="translated">&lt;a href=&quot;settings#std:setting-DEFAULT_CHARSET&quot;&gt; &lt;code&gt;DEFAULT_CHARSET&lt;/code&gt; &lt;/a&gt; 설정이 &lt;code&gt;'utf-8'&lt;/code&gt; 이외 의 것으로 설정되면 바이트 문자열에서 다른 인코딩을 사용할 수 있다고 생각하지 마십시오 ! &lt;a href=&quot;settings#std:setting-DEFAULT_CHARSET&quot;&gt; &lt;code&gt;DEFAULT_CHARSET&lt;/code&gt; &lt;/a&gt; 은 템플릿 렌더링 (및 전자 메일) 결과로 생성 된 문자열에만 적용됩니다. Django는 항상 내부 바이트 문자열에 대해 UTF-8 인코딩을 가정합니다. 그 이유는 &lt;a href=&quot;settings#std:setting-DEFAULT_CHARSET&quot;&gt; &lt;code&gt;DEFAULT_CHARSET&lt;/code&gt; &lt;/a&gt; 설정이 실제로 사용자가 제어 할 수 없기 때문입니다 (응용 프로그램 개발자 인 경우). 응용 프로그램을 설치하고 사용하는 사람의 통제하에 있으며 다른 사람이 다른 설정을 선택하더라도 코드는 계속 작동해야합니다. Ergo, 그 설정에 의존 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="dd837b46e4cb5b6df914ad062a51d4553c8fdeda" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t be too aggressive in deferring fields without profiling as the database has to read most of the non-text, non-VARCHAR data from the disk for a single row in the results, even if it ends up only using a few columns. The &lt;code&gt;defer()&lt;/code&gt; and &lt;code&gt;only()&lt;/code&gt; methods are most useful when you can avoid loading a lot of text data or for fields that might take a lot of processing to convert back to Python. As always, profile first, then optimize.</source>
          <target state="translated">데이터베이스가 몇 개의 열만 사용하더라도 결과에서 단일 행에 대해 디스크에서 텍스트가 아닌 대부분의 VARCHAR 데이터를 읽어야하므로 프로파일 링없이 필드를 연기하는 데 너무 적극적이지 마십시오. &lt;code&gt;defer()&lt;/code&gt; 및 &lt;code&gt;only()&lt;/code&gt; 메서드를 사용하면 텍스트 데이터 또는 파이썬으로 다시 변환 처리를 많이 걸릴 수 있습니다 필드에 많은로드 피할 수 있습니다 때 가장 유용합니다. 항상 그렇듯이 먼저 프로파일 링 한 다음 최적화하십시오.</target>
        </trans-unit>
        <trans-unit id="37d4f8a03b5d54ce0ebe33f4ce5874e1c95cd3ee" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t call the &lt;a href=&quot;#django.contrib.staticfiles.storage.StaticFilesStorage.post_process&quot;&gt;&lt;code&gt;post_process()&lt;/code&gt;&lt;/a&gt; method of the configured &lt;a href=&quot;../settings#std:setting-STATICFILES_STORAGE&quot;&gt;&lt;code&gt;STATICFILES_STORAGE&lt;/code&gt;&lt;/a&gt; storage backend.</source>
          <target state="translated">구성된 &lt;a href=&quot;../settings#std:setting-STATICFILES_STORAGE&quot;&gt; &lt;code&gt;STATICFILES_STORAGE&lt;/code&gt; &lt;/a&gt; 스토리지 백엔드 의 &lt;a href=&quot;#django.contrib.staticfiles.storage.StaticFilesStorage.post_process&quot;&gt; &lt;code&gt;post_process()&lt;/code&gt; &lt;/a&gt; 메소드를 호출하지 마십시오 .</target>
        </trans-unit>
        <trans-unit id="04f2777234dd12de239b6354c8139f864a2f436b" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t coerce variables into the message; use placeholders and the &lt;code&gt;params&lt;/code&gt; argument of the constructor:</source>
          <target state="translated">메시지에 변수를 강요하지 마십시오. 생성자의 자리 표시 자와 &lt;code&gt;params&lt;/code&gt; 인수를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="bf90a5e446cb7ac1d8d42f9a3604f7e3fe48aff9" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t filter away any results in this type of manager subclass</source>
          <target state="translated">이 유형의 관리자 서브 클래스에서 결과를 필터링하지 마십시오.</target>
        </trans-unit>
        <trans-unit id="1080e6ac5115215a7c4ae04338549fc4bb6ecc24" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t forget that a form&amp;rsquo;s output does &lt;em&gt;not&lt;/em&gt; include the surrounding &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; tags, or the form&amp;rsquo;s &lt;code&gt;submit&lt;/code&gt; control. You will have to provide these yourself.</source>
          <target state="translated">양식의 출력 에 주변 &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; 태그 또는 양식의 &lt;code&gt;submit&lt;/code&gt; 제어가 포함 되지 &lt;em&gt;않는다는&lt;/em&gt; 것을 잊지 마십시오 . 이를 직접 제공해야합니다.</target>
        </trans-unit>
        <trans-unit id="0d38ac7c0c138856285fba16e184d4c9a468c217" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t forget to also include in &lt;a href=&quot;../../ref/settings#std:setting-PASSWORD_HASHERS&quot;&gt;&lt;code&gt;PASSWORD_HASHERS&lt;/code&gt;&lt;/a&gt; any hashing algorithm used in fixtures, if any.</source>
          <target state="translated">조명기에서 사용되는 해시 알고리즘이 있으면 &lt;a href=&quot;../../ref/settings#std:setting-PASSWORD_HASHERS&quot;&gt; &lt;code&gt;PASSWORD_HASHERS&lt;/code&gt; &lt;/a&gt; 에도 포함시키는 것을 잊지 마십시오 .</target>
        </trans-unit>
        <trans-unit id="2f5f8c73c25fa365b527edc9a5116f7165a6724e" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t forget to point &lt;a href=&quot;../../ref/settings#std:setting-AUTH_USER_MODEL&quot;&gt;&lt;code&gt;AUTH_USER_MODEL&lt;/code&gt;&lt;/a&gt; to it. Do this before creating any migrations or running &lt;code&gt;manage.py migrate&lt;/code&gt; for the first time.</source>
          <target state="translated">&lt;a href=&quot;../../ref/settings#std:setting-AUTH_USER_MODEL&quot;&gt; &lt;code&gt;AUTH_USER_MODEL&lt;/code&gt; &lt;/a&gt; 을 가리켜 야 합니다. 마이그레이션을 생성하거나 &lt;code&gt;manage.py migrate&lt;/code&gt; 을 처음 실행하기 전에이 작업을 수행하십시오 .</target>
        </trans-unit>
        <trans-unit id="bbe1f2a043cf6719396e432a5b929b89643ddb91" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t forget to put quotes around the URL pattern &lt;code&gt;name&lt;/code&gt;, otherwise the value will be interpreted as a context variable!</source>
          <target state="translated">URL 패턴 &lt;code&gt;name&lt;/code&gt; 따옴표로 묶는 것을 잊지 마십시오 . 그렇지 않으면 값이 컨텍스트 변수로 해석됩니다!</target>
        </trans-unit>
        <trans-unit id="90097552d3e60614d6a41d5308c000e5db1bc750" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t ignore the common private glob-style patterns &lt;code&gt;'CVS'&lt;/code&gt;, &lt;code&gt;'.*'&lt;/code&gt; and &lt;code&gt;'*~'&lt;/code&gt;.</source>
          <target state="translated">일반적인 개인 glob 스타일 패턴 &lt;code&gt;'CVS'&lt;/code&gt; , &lt;code&gt;'.*'&lt;/code&gt; 및 &lt;code&gt;'*~'&lt;/code&gt; 을 무시하지 마십시오 .</target>
        </trans-unit>
        <trans-unit id="e645d3e04d11607862655540ae491b84e64b1c5e" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t include a field in &lt;code&gt;radio_fields&lt;/code&gt; unless it&amp;rsquo;s a &lt;code&gt;ForeignKey&lt;/code&gt; or has &lt;code&gt;choices&lt;/code&gt; set.</source>
          <target state="translated">&lt;code&gt;ForeignKey&lt;/code&gt; 이거나 &lt;code&gt;choices&lt;/code&gt; 설정 되지 않은 경우 &lt;code&gt;radio_fields&lt;/code&gt; 에 필드를 포함하지 마십시오 .</target>
        </trans-unit>
        <trans-unit id="2d2d13739ffa2f2cccadad953eef95c05fcaa3f6" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t order results if you don&amp;rsquo;t care</source>
          <target state="translated">신경 쓰지 않으면 결과를 주문하지 마십시오</target>
        </trans-unit>
        <trans-unit id="4e04470a576f55f60d263fe4d293f22d36777c5e" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t override &lt;code&gt;request.session&lt;/code&gt; with a new object, and don&amp;rsquo;t access or set its attributes. Use it like a Python dictionary.</source>
          <target state="translated">새 객체로 &lt;code&gt;request.session&lt;/code&gt; 을 재정의하지 말고 속성에 액세스하거나 설정하지 마십시오. 파이썬 사전처럼 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="a32ee18dbc41da8dbcacf123cfc922b331780ddf" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t overuse &lt;code&gt;count()&lt;/code&gt; and &lt;code&gt;exists()&lt;/code&gt;</source>
          <target state="translated">남용하지 마십시오 &lt;code&gt;count()&lt;/code&gt; 과 &lt;code&gt;exists()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2d3bab11a7fec0a18517d185cd3f1a8c51b26c74" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t reinvent an already-existing setting.</source>
          <target state="translated">이미 존재하는 설정을 재발 명하지 마십시오.</target>
        </trans-unit>
        <trans-unit id="a7acff519f6c52e3a05506eb49f697f029f21dfa" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t rely on validation of the file extension to determine a file&amp;rsquo;s type. Files can be renamed to have any extension no matter what data they contain.</source>
          <target state="translated">파일 형식을 결정하기 위해 파일 확장자의 유효성 검사에 의존하지 마십시오. 파일에 포함 된 데이터에 관계없이 파일 이름을 변경하여 확장자를 가질 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="011e95a05e1af4dd1169209d67a68f9568e24b66" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t retrieve things you don&amp;rsquo;t need</source>
          <target state="translated">필요없는 것을 검색하지 마십시오</target>
        </trans-unit>
        <trans-unit id="79096f7ad978e3a224aa3b6df8877f6a1249d8e6" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t try to implement your own singular-or-plural logic; it won&amp;rsquo;t be correct. In a case like this, consider something like the following:</source>
          <target state="translated">자신 만의 단수 또는 복수 논리를 구현하려고 시도하지 마십시오. 정확하지 않습니다. 이런 경우 다음과 같은 것을 고려하십시오.</target>
        </trans-unit>
        <trans-unit id="506b22a0c66a1ec18715058b5f42651679dfb375" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t worry - the numbers are just there for developers&amp;rsquo; reference, Django just cares that each migration has a different name. Migrations specify which other migrations they depend on - including earlier migrations in the same app - in the file, so it&amp;rsquo;s possible to detect when there&amp;rsquo;s two new migrations for the same app that aren&amp;rsquo;t ordered.</source>
          <target state="translated">걱정하지 마십시오. 숫자는 개발자가 참조 할 수 있도록, 장고는 각 마이그레이션의 이름이 다름에 관심이 있습니다. 마이그레이션은 동일한 앱의 이전 마이그레이션을 포함하여 파일에 의존하는 다른 마이그레이션을 지정하므로 주문되지 않은 동일한 앱에 대해 두 개의 새로운 마이그레이션이있을 때이를 감지 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a56c023f45429bfc6a50ff3204b3fd583d247c9a" translate="yes" xml:space="preserve">
          <source>Dots have a special meaning in template rendering. A dot in a variable name signifies a &lt;strong&gt;lookup&lt;/strong&gt;. Specifically, when the template system encounters a dot in a variable name, it tries the following lookups, in this order:</source>
          <target state="translated">점은 템플릿 렌더링에 특별한 의미가 있습니다. 변수 이름의 점은 &lt;strong&gt;조회를&lt;/strong&gt; 나타냅니다 . 특히 템플릿 시스템이 변수 이름에서 점을 발견하면 다음 순서로 다음 조회를 시도합니다.</target>
        </trans-unit>
        <trans-unit id="1a17bd0d0ebe6d43d919344c0ed0bf7892398df2" translate="yes" xml:space="preserve">
          <source>Download the Django source code repository using the following command:</source>
          <target state="translated">다음 명령을 사용하여 Django 소스 코드 저장소를 다운로드하십시오.</target>
        </trans-unit>
        <trans-unit id="c07cff8ea64814f9659f9257d838b13f1332774e" translate="yes" xml:space="preserve">
          <source>Download the framework packages for:</source>
          <target state="translated">다음을위한 프레임 워크 패키지를 다운로드하십시오.</target>
        </trans-unit>
        <trans-unit id="ce9c94ce55f4b81bf7c5ab4649a6e438d33bc2dc" translate="yes" xml:space="preserve">
          <source>Downloading a copy of Django&amp;rsquo;s development version.</source>
          <target state="translated">Django의 개발 버전 사본을 다운로드합니다.</target>
        </trans-unit>
        <trans-unit id="ae229acecefae48e2d586f58b60aab4716783ae0" translate="yes" xml:space="preserve">
          <source>Downstream caches</source>
          <target state="translated">다운 스트림 캐시</target>
        </trans-unit>
        <trans-unit id="a04885144d1d3c7ca4889715038a442e51697122" translate="yes" xml:space="preserve">
          <source>Downstream caching is a nice efficiency boost, but there&amp;rsquo;s a danger to it: Many Web pages&amp;rsquo; contents differ based on authentication and a host of other variables, and cache systems that blindly save pages based purely on URLs could expose incorrect or sensitive data to subsequent visitors to those pages.</source>
          <target state="translated">다운 스트림 캐싱은 효율성을 크게 향상 시키지만 위험이 있습니다. 많은 웹 페이지의 내용은 인증 및 기타 여러 변수에 따라 다르며 URL을 기반으로 페이지를 맹목적으로 저장하는 캐시 시스템은 후속 데이터에 부정확하거나 민감한 데이터를 노출시킬 수 있습니다 해당 페이지 방문자.</target>
        </trans-unit>
        <trans-unit id="17ae1fddd2d8c6715a91a748d906239a019eb35a" translate="yes" xml:space="preserve">
          <source>Dropping the old table</source>
          <target state="translated">이전 테이블 삭제</target>
        </trans-unit>
        <trans-unit id="4c9ff3ef54852685fbf9ac86adc087462ef7cbc0" translate="yes" xml:space="preserve">
          <source>Drops the model&amp;rsquo;s table in the database along with any unique constraints or indexes it has.</source>
          <target state="translated">데이터베이스의 모델 테이블을 고유 제한 조건 또는 인덱스와 함께 삭제합니다.</target>
        </trans-unit>
        <trans-unit id="0e5497096a9bb3625b3fdfb98617c05676b3ba07" translate="yes" xml:space="preserve">
          <source>Due to an &lt;a href=&quot;../databases#oracle-null-empty-strings&quot;&gt;Oracle convention&lt;/a&gt;, this function returns the empty string instead of &lt;code&gt;None&lt;/code&gt; when the expressions are of type &lt;a href=&quot;fields#django.db.models.CharField&quot;&gt;&lt;code&gt;CharField&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../databases#oracle-null-empty-strings&quot;&gt;Oracle 규칙&lt;/a&gt; 으로 인해이 함수는 표현식이 &lt;a href=&quot;fields#django.db.models.CharField&quot;&gt; &lt;code&gt;CharField&lt;/code&gt; &lt;/a&gt; 유형 인 경우 &lt;code&gt;None&lt;/code&gt; 대신 빈 문자열을 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="d3512999ad7d2bc5d6f258859c80b387be2a3125" translate="yes" xml:space="preserve">
          <source>Due to how inheritance works, you have to set both &lt;code&gt;pk&lt;/code&gt; and &lt;code&gt;id&lt;/code&gt; to None:</source>
          <target state="translated">상속의 작동 방식으로 인해 &lt;code&gt;pk&lt;/code&gt; 와 &lt;code&gt;id&lt;/code&gt; 를 None 으로 설정해야합니다 .</target>
        </trans-unit>
        <trans-unit id="142738f166f91c02513294d697c43a5cf3c8ebac" translate="yes" xml:space="preserve">
          <source>Due to limitations of Django&amp;rsquo;s dynamic dependency feature for swappable models, the model referenced by &lt;a href=&quot;../../ref/settings#std:setting-AUTH_USER_MODEL&quot;&gt;&lt;code&gt;AUTH_USER_MODEL&lt;/code&gt;&lt;/a&gt; must be created in the first migration of its app (usually called &lt;code&gt;0001_initial&lt;/code&gt;); otherwise, you&amp;rsquo;ll have dependency issues.</source>
          <target state="translated">&lt;code&gt;0001_initial&lt;/code&gt; 가능한 모델에 대한 Django의 동적 종속성 기능의 한계로 인해 &lt;a href=&quot;../../ref/settings#std:setting-AUTH_USER_MODEL&quot;&gt; &lt;code&gt;AUTH_USER_MODEL&lt;/code&gt; 에서&lt;/a&gt; 참조하는 모델 은 앱의 첫 번째 마이그레이션 (일반적으로 0001_initial ) 에서 작성해야합니다 . 그렇지 않으면 종속성 문제가 있습니다.</target>
        </trans-unit>
        <trans-unit id="87513fd904b2b5bd40f6944839696ca0360d1f3c" translate="yes" xml:space="preserve">
          <source>Due to the requirement of running &lt;a href=&quot;#django-admin-collectstatic&quot;&gt;&lt;code&gt;collectstatic&lt;/code&gt;&lt;/a&gt;, this storage typically shouldn&amp;rsquo;t be used when running tests as &lt;code&gt;collectstatic&lt;/code&gt; isn&amp;rsquo;t run as part of the normal test setup. During testing, ensure that the &lt;a href=&quot;../settings#std:setting-STATICFILES_STORAGE&quot;&gt;&lt;code&gt;STATICFILES_STORAGE&lt;/code&gt;&lt;/a&gt; setting is set to something else like &lt;code&gt;'django.contrib.staticfiles.storage.StaticFilesStorage'&lt;/code&gt; (the default).</source>
          <target state="translated">&lt;a href=&quot;#django-admin-collectstatic&quot;&gt; &lt;code&gt;collectstatic&lt;/code&gt; &lt;/a&gt; 실행 요구 사항으로 인해 일반적으로 &lt;code&gt;collectstatic&lt;/code&gt; 이 일반 테스트 설정의 일부로 실행되지 않으므로 테스트를 실행할 때이 스토리지를 사용 하지 않아야합니다. 테스트하는 동안 &lt;a href=&quot;../settings#std:setting-STATICFILES_STORAGE&quot;&gt; &lt;code&gt;STATICFILES_STORAGE&lt;/code&gt; &lt;/a&gt; 설정이 &lt;code&gt;'django.contrib.staticfiles.storage.StaticFilesStorage'&lt;/code&gt; (기본값) 와 같은 다른 것으로 설정되어 있는지 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="a44740c0ae275073e9fad20647ab08194486fb6b" translate="yes" xml:space="preserve">
          <source>Due to the way &lt;a href=&quot;#django.contrib.contenttypes.fields.GenericForeignKey&quot;&gt;&lt;code&gt;GenericForeignKey&lt;/code&gt;&lt;/a&gt; is implemented, you cannot use such fields directly with filters (&lt;code&gt;filter()&lt;/code&gt; and &lt;code&gt;exclude()&lt;/code&gt;, for example) via the database API. Because a &lt;a href=&quot;#django.contrib.contenttypes.fields.GenericForeignKey&quot;&gt;&lt;code&gt;GenericForeignKey&lt;/code&gt;&lt;/a&gt; isn&amp;rsquo;t a normal field object, these examples will &lt;em&gt;not&lt;/em&gt; work:</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.contenttypes.fields.GenericForeignKey&quot;&gt; &lt;code&gt;GenericForeignKey&lt;/code&gt; &lt;/a&gt; 가 구현 되는 방식으로 인해 데이터베이스 API를 통해 필터 (예 : &lt;code&gt;filter()&lt;/code&gt; 및 &lt;code&gt;exclude()&lt;/code&gt; ) 와 함께 이러한 필드를 직접 사용할 수 없습니다 . 때문에 &lt;a href=&quot;#django.contrib.contenttypes.fields.GenericForeignKey&quot;&gt; &lt;code&gt;GenericForeignKey&lt;/code&gt; 는&lt;/a&gt; 일반 필드의 대상이 아닌,이 예제는 것입니다 &lt;em&gt;하지&lt;/em&gt; 일 :</target>
        </trans-unit>
        <trans-unit id="5f3f6be92c2e8d6e8a0a50295137151db408aed3" translate="yes" xml:space="preserve">
          <source>Due to the way &lt;code&gt;UserPassesTestMixin&lt;/code&gt; is implemented, you cannot stack them in your inheritance list. The following does NOT work:</source>
          <target state="translated">&lt;code&gt;UserPassesTestMixin&lt;/code&gt; 이 구현 되는 방식으로 인해 상속 목록에 쌓을 수 없습니다. 다음은 작동하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="5d8b9b4d3b5864b0cc136a162b00ab1fc2e1ee6d" translate="yes" xml:space="preserve">
          <source>Due to the way cookies (and hence sessions) work, &lt;strong&gt;the behavior of any backends that make use of cookies or sessions is undefined when the same client makes multiple requests that set or get messages in parallel&lt;/strong&gt;. For example, if a client initiates a request that creates a message in one window (or tab) and then another that fetches any uniterated messages in another window, before the first window redirects, the message may appear in the second window instead of the first window where it may be expected.</source>
          <target state="translated">쿠키 (및 세션)의 작동 방식으로 인해 &lt;strong&gt;쿠키 나 세션을 사용하는 백엔드의 동작은 동일한 클라이언트가 메시지를 병렬로 설정하거나받는 여러 요청을 할 때 정의되지 않습니다&lt;/strong&gt; . 예를 들어, 클라이언트가 한 창 (또는 탭)에서 메시지를 작성하는 요청을 시작한 다음 다른 창에서 통합 된 메시지를 가져 오는 요청을 시작하면 첫 번째 창이 재전송되기 전에 첫 번째 창이 아닌 두 번째 창에 메시지가 나타날 수 있습니다. 예상되는 창.</target>
        </trans-unit>
        <trans-unit id="894217d8773bdddf4249d7092d6f81fdab57d6c3" translate="yes" xml:space="preserve">
          <source>Due to the way cookies work, &lt;code&gt;path&lt;/code&gt; and &lt;code&gt;domain&lt;/code&gt; should be the same values you used in &lt;code&gt;set_cookie()&lt;/code&gt; &amp;ndash; otherwise the cookie may not be deleted.</source>
          <target state="translated">쿠키 작동 방식으로 인해 &lt;code&gt;path&lt;/code&gt; 및 &lt;code&gt;domain&lt;/code&gt; 은 &lt;code&gt;set_cookie()&lt;/code&gt; 에서 사용한 값과 같아야합니다. 그렇지 않으면 쿠키가 삭제되지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4da407a463807c566435d7980512d91958059606" translate="yes" xml:space="preserve">
          <source>Due to the way the &lt;code&gt;gettext&lt;/code&gt; tools work internally and because we want to allow non-ASCII source strings in Django&amp;rsquo;s core and your applications, you &lt;strong&gt;must&lt;/strong&gt; use UTF-8 as the encoding for your PO files (the default when PO files are created). This means that everybody will be using the same encoding, which is important when Django processes the PO files.</source>
          <target state="translated">&lt;code&gt;gettext&lt;/code&gt; 도구가 내부적으로 작동 하는 방식 과 Django의 코어 및 애플리케이션에서 비 ASCII 소스 문자열을 허용 &lt;strong&gt;하려면&lt;/strong&gt; PO 파일의 인코딩으로 UTF-8을 사용해야합니다 (PO 파일이 작성 될 때의 기본값). 이것은 모두가 동일한 인코딩을 사용한다는 것을 의미하며, 이는 Django가 PO 파일을 처리 할 때 중요합니다.</target>
        </trans-unit>
        <trans-unit id="c946825c30a3d3b910e6a6d60b450b15937b5aa1" translate="yes" xml:space="preserve">
          <source>Dummy backend</source>
          <target state="translated">더미 백엔드</target>
        </trans-unit>
        <trans-unit id="5ccde08306833310ac7bc87bd8551bf7af688470" translate="yes" xml:space="preserve">
          <source>Dummy caching (for development)</source>
          <target state="translated">더미 캐싱 (개발 용)</target>
        </trans-unit>
        <trans-unit id="32af6bc3a612ca0d7c5f0eefc40cd8fb9a04115c" translate="yes" xml:space="preserve">
          <source>Duplicate file names are by default resolved in a similar way to how template resolution works: the file that is first found in one of the specified locations will be used. If you&amp;rsquo;re confused, the &lt;a href=&quot;#django-admin-findstatic&quot;&gt;&lt;code&gt;findstatic&lt;/code&gt;&lt;/a&gt; command can help show you which files are found.</source>
          <target state="translated">중복 파일 이름은 기본적으로 템플릿 확인 작동 방식과 유사한 방식으로 해결됩니다. 지정된 위치 중 하나에서 처음 발견 된 파일이 사용됩니다. 혼란 &lt;a href=&quot;#django-admin-findstatic&quot;&gt; &lt;code&gt;findstatic&lt;/code&gt; &lt;/a&gt; 명령이 어떤 파일이 있는지 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="e1b8c9c169cb26e56fb4f7bb79dbf8ffc27a2a8d" translate="yes" xml:space="preserve">
          <source>During development, if you use &lt;a href=&quot;../../ref/contrib/staticfiles#module-django.contrib.staticfiles&quot;&gt;&lt;code&gt;django.contrib.staticfiles&lt;/code&gt;&lt;/a&gt;, this will be done automatically by &lt;a href=&quot;../../ref/django-admin#django-admin-runserver&quot;&gt;&lt;code&gt;runserver&lt;/code&gt;&lt;/a&gt; when &lt;a href=&quot;../../ref/settings#std:setting-DEBUG&quot;&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;/a&gt; is set to &lt;code&gt;True&lt;/code&gt; (see &lt;a href=&quot;../../ref/contrib/staticfiles#django.contrib.staticfiles.views.serve&quot;&gt;&lt;code&gt;django.contrib.staticfiles.views.serve()&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">개발 중에 &lt;a href=&quot;../../ref/contrib/staticfiles#module-django.contrib.staticfiles&quot;&gt; &lt;code&gt;django.contrib.staticfiles&lt;/code&gt; &lt;/a&gt; 를 사용하는 경우 &lt;a href=&quot;../../ref/settings#std:setting-DEBUG&quot;&gt; &lt;code&gt;DEBUG&lt;/code&gt; &lt;/a&gt; 가 &lt;code&gt;True&lt;/code&gt; 로 설정된 경우 &lt;a href=&quot;../../ref/django-admin#django-admin-runserver&quot;&gt; &lt;code&gt;runserver&lt;/code&gt; 에&lt;/a&gt; 의해 자동으로 수행됩니다 ( &lt;a href=&quot;../../ref/contrib/staticfiles#django.contrib.staticfiles.views.serve&quot;&gt; &lt;code&gt;django.contrib.staticfiles.views.serve()&lt;/code&gt; &lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="5392b98b896eef841805541091324600b40da6c7" translate="yes" xml:space="preserve">
          <source>During development, you can serve user-uploaded media files from &lt;a href=&quot;../../ref/settings#std:setting-MEDIA_ROOT&quot;&gt;&lt;code&gt;MEDIA_ROOT&lt;/code&gt;&lt;/a&gt; using the &lt;a href=&quot;../../ref/views#django.views.static.serve&quot;&gt;&lt;code&gt;django.views.static.serve()&lt;/code&gt;&lt;/a&gt; view.</source>
          <target state="translated">개발하는 동안, 당신은에서 사용자가 업로드 한 미디어 파일을 제공 할 수 &lt;a href=&quot;../../ref/settings#std:setting-MEDIA_ROOT&quot;&gt; &lt;code&gt;MEDIA_ROOT&lt;/code&gt; &lt;/a&gt; 은 Using &lt;a href=&quot;../../ref/views#django.views.static.serve&quot;&gt; &lt;code&gt;django.views.static.serve()&lt;/code&gt; &lt;/a&gt; 보기를.</target>
        </trans-unit>
        <trans-unit id="2e59b7fe1682b2315e1b722475fe22d4725a51e7" translate="yes" xml:space="preserve">
          <source>During development, you can turn such warnings into exceptions and get a traceback by adding the following to your settings file:</source>
          <target state="translated">개발 중에 이러한 경고를 예외로 설정하고 설정 파일에 다음을 추가하여 역 추적을 얻을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bd2d2705a16e3544e088a53bdc1390d8dc8b7ede" translate="yes" xml:space="preserve">
          <source>During file uploads, the actual file data is stored in &lt;a href=&quot;../request-response#django.http.HttpRequest.FILES&quot;&gt;&lt;code&gt;request.FILES&lt;/code&gt;&lt;/a&gt;. Each entry in this dictionary is an &lt;code&gt;UploadedFile&lt;/code&gt; object (or a subclass) &amp;ndash; a wrapper around an uploaded file. You&amp;rsquo;ll usually use one of these methods to access the uploaded content:</source>
          <target state="translated">파일 업로드 중에 실제 파일 데이터는 &lt;a href=&quot;../request-response#django.http.HttpRequest.FILES&quot;&gt; &lt;code&gt;request.FILES&lt;/code&gt; 에&lt;/a&gt; 저장됩니다 . 이 사전의 각 항목은 &lt;code&gt;UploadedFile&lt;/code&gt; 객체 (또는 하위 클래스) &amp;ndash; 업로드 된 파일의 래퍼입니다. 일반적으로 다음 방법 중 하나를 사용하여 업로드 된 컨텐츠에 액세스합니다.</target>
        </trans-unit>
        <trans-unit id="da7f2a1d813bf08e462baf7575acbb9f73f6752a" translate="yes" xml:space="preserve">
          <source>During test running, each outgoing email is saved in &lt;code&gt;django.core.mail.outbox&lt;/code&gt;. This is a list of all &lt;a href=&quot;../email#django.core.mail.EmailMessage&quot;&gt;&lt;code&gt;EmailMessage&lt;/code&gt;&lt;/a&gt; instances that have been sent. The &lt;code&gt;outbox&lt;/code&gt; attribute is a special attribute that is created &lt;em&gt;only&lt;/em&gt; when the &lt;code&gt;locmem&lt;/code&gt; email backend is used. It doesn&amp;rsquo;t normally exist as part of the &lt;a href=&quot;../email#module-django.core.mail&quot;&gt;&lt;code&gt;django.core.mail&lt;/code&gt;&lt;/a&gt; module and you can&amp;rsquo;t import it directly. The code below shows how to access this attribute correctly.</source>
          <target state="translated">테스트 실행 중에 각 발신 이메일은 &lt;code&gt;django.core.mail.outbox&lt;/code&gt; 에 저장됩니다 . 전송 된 모든 &lt;a href=&quot;../email#django.core.mail.EmailMessage&quot;&gt; &lt;code&gt;EmailMessage&lt;/code&gt; &lt;/a&gt; 인스턴스 의 목록입니다 . &lt;code&gt;outbox&lt;/code&gt; 속성은 생성되는 특수 속성입니다 &lt;em&gt;만&lt;/em&gt; 때 &lt;code&gt;locmem&lt;/code&gt; 의 이메일 백엔드가 사용됩니다. 일반적으로 &lt;a href=&quot;../email#module-django.core.mail&quot;&gt; &lt;code&gt;django.core.mail&lt;/code&gt; &lt;/a&gt; 모듈의 일부로 존재하지 않으며 직접 가져올 수 없습니다. 아래 코드는이 속성에 올바르게 액세스하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="bdd123be59c168c6f3bccd21d6435ebbcbdb8509" translate="yes" xml:space="preserve">
          <source>During the request phase, before calling the view, Django applies middleware in the order it&amp;rsquo;s defined in &lt;a href=&quot;../../ref/settings#std:setting-MIDDLEWARE&quot;&gt;&lt;code&gt;MIDDLEWARE&lt;/code&gt;&lt;/a&gt;, top-down.</source>
          <target state="translated">요청 단계에서 Django는 뷰를 호출하기 전에 &lt;a href=&quot;../../ref/settings#std:setting-MIDDLEWARE&quot;&gt; &lt;code&gt;MIDDLEWARE&lt;/code&gt; 에&lt;/a&gt; 정의 된 순서대로 미들웨어를 하향식으로 적용합니다.</target>
        </trans-unit>
        <trans-unit id="27552287462b9c13ae08a4c4e7a6f728c36a7a43" translate="yes" xml:space="preserve">
          <source>Dynamic filtering</source>
          <target state="translated">동적 필터링</target>
        </trans-unit>
        <trans-unit id="5780062daeeafdad8a39c791724757a86c83ea05" translate="yes" xml:space="preserve">
          <source>Dynamic initial values</source>
          <target state="translated">동적 초기 값</target>
        </trans-unit>
        <trans-unit id="801d2536d6ef9c3052bb5a78e0150cb56dea123b" translate="yes" xml:space="preserve">
          <source>EPSG code (integer or string)</source>
          <target state="translated">EPSG 코드 (정수 또는 문자열)</target>
        </trans-unit>
        <trans-unit id="76ab0ace3be14b1fb28b5ed52435fd50e72a1da0" translate="yes" xml:space="preserve">
          <source>Each &amp;ldquo;reverse&amp;rdquo; operation described in this section has an immediate effect on the database. Every addition, creation and deletion is immediately and automatically saved to the database.</source>
          <target state="translated">이 섹션에 설명 된 각 &quot;역방향&quot;작업은 데이터베이스에 즉시 영향을줍니다. 모든 추가, 작성 및 삭제는 즉시 자동으로 데이터베이스에 저장됩니다.</target>
        </trans-unit>
        <trans-unit id="a5e64be2a7207ba8bef85f4ef6e7ae87d9fb7d60" translate="yes" xml:space="preserve">
          <source>Each &lt;a href=&quot;#django.contrib.admin.ModelAdmin&quot;&gt;&lt;code&gt;ModelAdmin&lt;/code&gt;&lt;/a&gt; instance provides an additional set of named URLs:</source>
          <target state="translated">각 &lt;a href=&quot;#django.contrib.admin.ModelAdmin&quot;&gt; &lt;code&gt;ModelAdmin&lt;/code&gt; &lt;/a&gt; 인스턴스는 이름이 지정된 추가 URL 세트를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="9766496e75a79e60962729490d93f126a3160185" translate="yes" xml:space="preserve">
          <source>Each &lt;a href=&quot;#django.contrib.contenttypes.models.ContentType&quot;&gt;&lt;code&gt;ContentType&lt;/code&gt;&lt;/a&gt; instance has methods that allow you to get from a &lt;a href=&quot;#django.contrib.contenttypes.models.ContentType&quot;&gt;&lt;code&gt;ContentType&lt;/code&gt;&lt;/a&gt; instance to the model it represents, or to retrieve objects from that model:</source>
          <target state="translated">각 &lt;a href=&quot;#django.contrib.contenttypes.models.ContentType&quot;&gt; &lt;code&gt;ContentType&lt;/code&gt; &lt;/a&gt; 인스턴스에는 &lt;a href=&quot;#django.contrib.contenttypes.models.ContentType&quot;&gt; &lt;code&gt;ContentType&lt;/code&gt; &lt;/a&gt; 인스턴스에서이를 나타내는 모델로 가져 오거나 해당 모델에서 객체를 검색 할 수있는 메소드가 있습니다.</target>
        </trans-unit>
        <trans-unit id="0c5c3367ad793a5788c176654bfbe6e35768e37f" translate="yes" xml:space="preserve">
          <source>Each &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; contains a cache to minimize database access. Understanding how it works will allow you to write the most efficient code.</source>
          <target state="translated">각 &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; &lt;/a&gt; 에는 데이터베이스 액세스를 최소화하기위한 캐시가 포함되어 있습니다. 작동 방식을 이해하면 가장 효율적인 코드를 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3e79741c463fe87a232c3759d0079b05fc47d7af" translate="yes" xml:space="preserve">
          <source>Each &lt;a href=&quot;../ref/models/fields#django.db.models.DateTimeField&quot;&gt;&lt;code&gt;DateTimeField&lt;/code&gt;&lt;/a&gt; gets free JavaScript shortcuts. Dates get a &amp;ldquo;Today&amp;rdquo; shortcut and calendar popup, and times get a &amp;ldquo;Now&amp;rdquo; shortcut and a convenient popup that lists commonly entered times.</source>
          <target state="translated">각 &lt;a href=&quot;../ref/models/fields#django.db.models.DateTimeField&quot;&gt; &lt;code&gt;DateTimeField&lt;/code&gt; &lt;/a&gt; 에는 무료 JavaScript 바로 가기가 제공됩니다. 날짜에는 &quot;오늘&quot;바로 가기 및 캘린더 팝업이 표시되고 시간에는 &quot;지금&quot;바로 가기와 일반적으로 입력 한 시간을 나열하는 편리한 팝업이 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="8cfe157f3eaacd4d68610b1d7c765a08a2344557" translate="yes" xml:space="preserve">
          <source>Each &lt;code&gt;.po&lt;/code&gt; file contains a small bit of metadata, such as the translation maintainer&amp;rsquo;s contact information, but the bulk of the file is a list of &lt;strong&gt;messages&lt;/strong&gt; &amp;ndash; mappings between translation strings and the actual translated text for the particular language.</source>
          <target state="translated">각 &lt;code&gt;.po&lt;/code&gt; 파일에는 번역 관리자의 연락처 정보와 같은 약간의 메타 데이터가 포함되어 있지만 대부분의 파일은 번역 된 문자열과 특정 언어에 대한 실제 번역 된 텍스트 간의 매핑 인 &lt;strong&gt;메시지&lt;/strong&gt; 목록입니다 .</target>
        </trans-unit>
        <trans-unit id="688945d75fa2e05589b1677dc42f50edd5252b98" translate="yes" xml:space="preserve">
          <source>Each &lt;code&gt;Author&lt;/code&gt; in the result set will have the &lt;code&gt;num_books&lt;/code&gt; and &lt;code&gt;highly_rated_books&lt;/code&gt; attributes.</source>
          <target state="translated">결과 집합의 각 &lt;code&gt;Author&lt;/code&gt; 는 &lt;code&gt;num_books&lt;/code&gt; 및 &lt;code&gt;highly_rated_books&lt;/code&gt; 속성을 갖습니다 .</target>
        </trans-unit>
        <trans-unit id="b1b89e4d6e6136b5834754f28761cb32b9b6eae7" translate="yes" xml:space="preserve">
          <source>Each &lt;code&gt;Field&lt;/code&gt; class constructor takes at least these arguments. Some &lt;code&gt;Field&lt;/code&gt; classes take additional, field-specific arguments, but the following should &lt;em&gt;always&lt;/em&gt; be accepted:</source>
          <target state="translated">각 &lt;code&gt;Field&lt;/code&gt; 클래스 생성자는 최소한 이러한 인수를 사용합니다. 일부 &lt;code&gt;Field&lt;/code&gt; 클래스는 추가 필드 특정 인수를 사용하지만 다음을 &lt;em&gt;항상&lt;/em&gt; 승인 해야합니다 .</target>
        </trans-unit>
        <trans-unit id="2d00d418aed53bd6ea62d464212bccc3ae807a67" translate="yes" xml:space="preserve">
          <source>Each &lt;code&gt;kind&lt;/code&gt; above has a corresponding &lt;code&gt;Trunc&lt;/code&gt; subclass (listed below) that should typically be used instead of the more verbose equivalent, e.g. use &lt;code&gt;TruncYear(...)&lt;/code&gt; rather than &lt;code&gt;Trunc(..., kind='year')&lt;/code&gt;.</source>
          <target state="translated">위의 각 &lt;code&gt;kind&lt;/code&gt; 에는 해당하는 &lt;code&gt;Trunc&lt;/code&gt; 서브 클래스 (아래에 나열 됨)가 있으며 일반적으로보다 자세한 설명 대신 사용해야 &lt;code&gt;TruncYear(...)&lt;/code&gt; 예 : &lt;code&gt;Trunc(..., kind='year')&lt;/code&gt; 대신 TruncYear (...) 사용 ) .</target>
        </trans-unit>
        <trans-unit id="e3c685b6fd9d85172ad5a1c165c29c7caf685f8b" translate="yes" xml:space="preserve">
          <source>Each &lt;code&gt;lookup_name&lt;/code&gt; above has a corresponding &lt;code&gt;Extract&lt;/code&gt; subclass (listed below) that should typically be used instead of the more verbose equivalent, e.g. use &lt;code&gt;ExtractYear(...)&lt;/code&gt; rather than &lt;code&gt;Extract(..., lookup_name='year')&lt;/code&gt;.</source>
          <target state="translated">위의 각 &lt;code&gt;lookup_name&lt;/code&gt; 에는 일반적으로 더 자세한 내용 대신 사용해야 하는 해당 &lt;code&gt;Extract&lt;/code&gt; 하위 클래스 (아래에 나열 됨)가 있습니다 &lt;code&gt;ExtractYear(...)&lt;/code&gt; 예 : &lt;code&gt;Extract(..., lookup_name='year')&lt;/code&gt; 대신 ExtractYear (...) 사용 ) .</target>
        </trans-unit>
        <trans-unit id="ad79a172be1b33a602d540b88bbf8ca154c77ebf" translate="yes" xml:space="preserve">
          <source>Each &lt;code&gt;order_by()&lt;/code&gt; call will clear any previous ordering. For example, this query will be ordered by &lt;code&gt;pub_date&lt;/code&gt; and not &lt;code&gt;headline&lt;/code&gt;:</source>
          <target state="translated">각 &lt;code&gt;order_by()&lt;/code&gt; 호출은 이전 주문을 지 웁니다. 예를 들어,이 쿼리는 &lt;code&gt;headline&lt;/code&gt; 아닌 &lt;code&gt;pub_date&lt;/code&gt; 에 의해 정렬됩니다 .</target>
        </trans-unit>
        <trans-unit id="e2f4d9f2b9b74db4b6d827c55fdf5161198d932b" translate="yes" xml:space="preserve">
          <source>Each URL in your site has a separate entry in the &lt;code&gt;admindocs&lt;/code&gt; page, and clicking on a given URL will show you the corresponding view. Helpful things you can document in your view function docstrings include:</source>
          <target state="translated">사이트의 각 URL은 &lt;code&gt;admindocs&lt;/code&gt; 페이지 에 별도의 항목이 있으며 주어진 URL을 클릭하면 해당보기가 표시됩니다. 뷰 함수 docstring에 문서화 할 수있는 유용한 것들은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="c8a281ad456c737111458e2c94f5436d80b055ba" translate="yes" xml:space="preserve">
          <source>Each application you write in Django consists of a Python package that follows a certain convention. Django comes with a utility that automatically generates the basic directory structure of an app, so you can focus on writing code rather than creating directories.</source>
          <target state="translated">Django로 작성하는 각 응용 프로그램은 특정 규칙을 따르는 Python 패키지로 구성됩니다. Django에는 앱의 기본 디렉토리 구조를 자동으로 생성하는 유틸리티가 제공되므로 디렉토리를 만드는 대신 코드 작성에 집중할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="aa4fd7bf7f5007d16f79d0ae47e2a803fc1e4720" translate="yes" xml:space="preserve">
          <source>Each argument to &lt;code&gt;annotate()&lt;/code&gt; is an annotation that will be added to each object in the &lt;code&gt;QuerySet&lt;/code&gt; that is returned.</source>
          <target state="translated">&lt;code&gt;annotate()&lt;/code&gt; 에 대한 각 인수 는 반환 되는 &lt;code&gt;QuerySet&lt;/code&gt; 의 각 개체에 추가 될 주석입니다 .</target>
        </trans-unit>
        <trans-unit id="85fb851c67a013ae1f0822c2b2bb9a798a089842" translate="yes" xml:space="preserve">
          <source>Each attribute of the model represents a database field.</source>
          <target state="translated">모델의 각 속성은 데이터베이스 필드를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="f57bfa2bd48cf413a7c116a20f197643ad588956" translate="yes" xml:space="preserve">
          <source>Each cache backend can be given additional arguments to control caching behavior. These arguments are provided as additional keys in the &lt;a href=&quot;../ref/settings#std:setting-CACHES&quot;&gt;&lt;code&gt;CACHES&lt;/code&gt;&lt;/a&gt; setting. Valid arguments are as follows:</source>
          <target state="translated">캐싱 동작을 제어하기 위해 각 캐시 백엔드에 추가 인수를 제공 할 수 있습니다. 이러한 인수는 &lt;a href=&quot;../ref/settings#std:setting-CACHES&quot;&gt; &lt;code&gt;CACHES&lt;/code&gt; &lt;/a&gt; 설정 에서 추가 키로 제공됩니다 . 유효한 인수는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="620f46e8c01f87612d6d23b7db50f9b485fd19e8" translate="yes" xml:space="preserve">
          <source>Each captured argument is sent to the view as a string, regardless of what sort of match the regular expression makes.</source>
          <target state="translated">캡처 된 각 인수는 정규식의 일치 유형에 관계없이 문자열로보기에 전송됩니다.</target>
        </trans-unit>
        <trans-unit id="539ffdd55f9eedf7d87d2c22a18246e642f1b360" translate="yes" xml:space="preserve">
          <source>Each database backend in Django supplies its own version of &lt;code&gt;SchemaEditor&lt;/code&gt;, and it&amp;rsquo;s always accessible via the &lt;code&gt;connection.schema_editor()&lt;/code&gt; context manager:</source>
          <target state="translated">Django의 각 데이터베이스 백엔드는 자체 버전의 &lt;code&gt;SchemaEditor&lt;/code&gt; 를 제공하며 항상 &lt;code&gt;connection.schema_editor()&lt;/code&gt; 컨텍스트 관리자 를 통해 액세스 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c6cb49419d1db840c199e9fa3db903485963c747" translate="yes" xml:space="preserve">
          <source>Each field in a &lt;a href=&quot;#django.forms.Form&quot;&gt;&lt;code&gt;Form&lt;/code&gt;&lt;/a&gt; class is responsible not only for validating data, but also for &amp;ldquo;cleaning&amp;rdquo; it &amp;ndash; normalizing it to a consistent format. This is a nice feature, because it allows data for a particular field to be input in a variety of ways, always resulting in consistent output.</source>
          <target state="translated">&lt;a href=&quot;#django.forms.Form&quot;&gt; &lt;code&gt;Form&lt;/code&gt; &lt;/a&gt; 클래스의 각 필드는 데이터의 유효성을 검사 할뿐만 아니라 데이터를 &quot;정리&quot;하여 일관된 형식으로 정규화합니다. 이는 특정 필드에 대한 데이터를 다양한 방식으로 입력 할 수있어 항상 일관된 출력을 얻을 수 있기 때문에 좋은 기능입니다.</target>
        </trans-unit>
        <trans-unit id="0ac8b93180f13debf16addf1647f7b56fb43e61d" translate="yes" xml:space="preserve">
          <source>Each field in your model should be an instance of the appropriate &lt;a href=&quot;../../ref/models/fields#django.db.models.Field&quot;&gt;&lt;code&gt;Field&lt;/code&gt;&lt;/a&gt; class. Django uses the field class types to determine a few things:</source>
          <target state="translated">모델의 각 필드는 적절한 &lt;a href=&quot;../../ref/models/fields#django.db.models.Field&quot;&gt; &lt;code&gt;Field&lt;/code&gt; &lt;/a&gt; 클래스 의 인스턴스 여야합니다 . Django는 필드 클래스 유형을 사용하여 몇 가지 사항을 결정합니다.</target>
        </trans-unit>
        <trans-unit id="97f07afff761bf72cc77ab8683a688a6a291a54c" translate="yes" xml:space="preserve">
          <source>Each field is represented by an instance of a &lt;a href=&quot;../ref/models/fields#django.db.models.Field&quot;&gt;&lt;code&gt;Field&lt;/code&gt;&lt;/a&gt; class &amp;ndash; e.g., &lt;a href=&quot;../ref/models/fields#django.db.models.CharField&quot;&gt;&lt;code&gt;CharField&lt;/code&gt;&lt;/a&gt; for character fields and &lt;a href=&quot;../ref/models/fields#django.db.models.DateTimeField&quot;&gt;&lt;code&gt;DateTimeField&lt;/code&gt;&lt;/a&gt; for datetimes. This tells Django what type of data each field holds.</source>
          <target state="translated">각 필드는 &lt;a href=&quot;../ref/models/fields#django.db.models.Field&quot;&gt; &lt;code&gt;Field&lt;/code&gt; &lt;/a&gt; 클래스 의 인스턴스로 표시됩니다 ( 예 : 문자 필드의 경우 &lt;a href=&quot;../ref/models/fields#django.db.models.CharField&quot;&gt; &lt;code&gt;CharField&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../ref/models/fields#django.db.models.DateTimeField&quot;&gt; &lt;code&gt;DateTimeField&lt;/code&gt; &lt;/a&gt; 경우 DateTimeField) . 이것은 Django에게 각 필드가 보유하는 데이터 유형을 알려줍니다.</target>
        </trans-unit>
        <trans-unit id="c095429de58ab9d3299f78866a6b060ccb94caed" translate="yes" xml:space="preserve">
          <source>Each field of the object is serialized as a &lt;code&gt;&amp;lt;field&amp;gt;&lt;/code&gt;-element sporting the fields &amp;ldquo;type&amp;rdquo; and &amp;ldquo;name&amp;rdquo;. The text content of the element represents the value that should be stored.</source>
          <target state="translated">객체의 각 필드는 &quot;type&quot;및 &quot;name&quot; &lt;code&gt;&amp;lt;field&amp;gt;&lt;/code&gt; 를 나타내는 &amp;lt;field&amp;gt; 요소 로 직렬화됩니다 . 요소의 텍스트 내용은 저장해야 할 값을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="1972c5dd0646867610014d61e83a3b0c8961cba4" translate="yes" xml:space="preserve">
          <source>Each field takes a certain set of field-specific arguments (documented in the &lt;a href=&quot;../../ref/models/fields#model-field-types&quot;&gt;model field reference&lt;/a&gt;). For example, &lt;a href=&quot;../../ref/models/fields#django.db.models.CharField&quot;&gt;&lt;code&gt;CharField&lt;/code&gt;&lt;/a&gt; (and its subclasses) require a &lt;a href=&quot;../../ref/models/fields#django.db.models.CharField.max_length&quot;&gt;&lt;code&gt;max_length&lt;/code&gt;&lt;/a&gt; argument which specifies the size of the &lt;code&gt;VARCHAR&lt;/code&gt; database field used to store the data.</source>
          <target state="translated">각 필드는 특정 필드 특정 인수 세트를 취합니다 ( &lt;a href=&quot;../../ref/models/fields#model-field-types&quot;&gt;모델 필드 참조에&lt;/a&gt; 문서화 됨 ). 예를 들어, &lt;a href=&quot;../../ref/models/fields#django.db.models.CharField&quot;&gt; &lt;code&gt;CharField&lt;/code&gt; &lt;/a&gt; (및 해당 서브 클래스)에는 데이터를 저장하는 데 사용되는 &lt;code&gt;VARCHAR&lt;/code&gt; 데이터베이스 필드 의 크기를 지정 하는 &lt;a href=&quot;../../ref/models/fields#django.db.models.CharField.max_length&quot;&gt; &lt;code&gt;max_length&lt;/code&gt; &lt;/a&gt; 인수가 필요합니다 .</target>
        </trans-unit>
        <trans-unit id="c137305d95c771e8e629f2933ba68157919aa2c8" translate="yes" xml:space="preserve">
          <source>Each field type has a default HTML representation. &lt;code&gt;CharField&lt;/code&gt; is represented by an &lt;code&gt;&amp;lt;input type=&quot;text&quot;&amp;gt;&lt;/code&gt; and &lt;code&gt;EmailField&lt;/code&gt; by an &lt;code&gt;&amp;lt;input type=&quot;email&quot;&amp;gt;&lt;/code&gt;. &lt;code&gt;BooleanField&lt;/code&gt; is represented by an &lt;code&gt;&amp;lt;input type=&quot;checkbox&quot;&amp;gt;&lt;/code&gt;. Note these are merely sensible defaults; you can specify which HTML to use for a given field by using widgets, which we&amp;rsquo;ll explain shortly.</source>
          <target state="translated">각 필드 유형에는 기본 HTML 표현이 있습니다. &lt;code&gt;CharField&lt;/code&gt; 는 &lt;code&gt;&amp;lt;input type=&quot;text&quot;&amp;gt;&lt;/code&gt; 로 표시 되고 &lt;code&gt;EmailField&lt;/code&gt; 는 &lt;code&gt;&amp;lt;input type=&quot;email&quot;&amp;gt;&lt;/code&gt; 로 표시 됩니다. &lt;code&gt;BooleanField&lt;/code&gt; 는 &lt;code&gt;&amp;lt;input type=&quot;checkbox&quot;&amp;gt;&lt;/code&gt; 로 표시 됩니다. 이것들은 단지 합리적인 기본값 일뿐입니다. 위젯을 사용하여 주어진 필드에 사용할 HTML을 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e14f18351eaa233804a5daef45c4b94975f5efbf" translate="yes" xml:space="preserve">
          <source>Each field type, except for &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;ForeignKey&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField&quot;&gt;&lt;code&gt;ManyToManyField&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../ref/models/fields#django.db.models.OneToOneField&quot;&gt;&lt;code&gt;OneToOneField&lt;/code&gt;&lt;/a&gt;, takes an optional first positional argument &amp;ndash; a verbose name. If the verbose name isn&amp;rsquo;t given, Django will automatically create it using the field&amp;rsquo;s attribute name, converting underscores to spaces.</source>
          <target state="translated">각 필드 유형을 제외하고 &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey&quot;&gt; &lt;code&gt;ForeignKey&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField&quot;&gt; &lt;code&gt;ManyToManyField&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../../ref/models/fields#django.db.models.OneToOneField&quot;&gt; &lt;code&gt;OneToOneField&lt;/code&gt; &lt;/a&gt; 장황한 이름 - 선택 사양 첫번째 위치 인수를합니다. 자세한 이름을 지정하지 않으면 Django는 필드의 속성 이름을 사용하여 자동으로 밑줄을 공백으로 변환하여 만듭니다.</target>
        </trans-unit>
        <trans-unit id="859598c7310b1f5089ed2f6873b65f573d112539" translate="yes" xml:space="preserve">
          <source>Each form field has a corresponding &lt;a href=&quot;../../ref/forms/widgets&quot;&gt;Widget class&lt;/a&gt;, which in turn corresponds to an HTML form widget such as &lt;code&gt;&amp;lt;input
type=&quot;text&quot;&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">각 양식 필드에는 해당 &lt;a href=&quot;../../ref/forms/widgets&quot;&gt;위젯 클래스가&lt;/a&gt; 있으며 이는 &lt;code&gt;&amp;lt;input type=&quot;text&quot;&amp;gt;&lt;/code&gt; 와 같은 HTML 양식 위젯에 해당합니다 .</target>
        </trans-unit>
        <trans-unit id="b0612a3e32277f65135ad8c4897584ec5ca41024" translate="yes" xml:space="preserve">
          <source>Each formset&amp;rsquo;s &lt;a href=&quot;#formset-prefix&quot;&gt;prefix&lt;/a&gt; replaces the default &lt;code&gt;form&lt;/code&gt; prefix that&amp;rsquo;s added to each field&amp;rsquo;s &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;id&lt;/code&gt; HTML attributes.</source>
          <target state="translated">각 &lt;code&gt;form&lt;/code&gt; 의 &lt;a href=&quot;#formset-prefix&quot;&gt;접두사&lt;/a&gt; 는 각 필드의 &lt;code&gt;name&lt;/code&gt; 및 &lt;code&gt;id&lt;/code&gt; HTML 속성에 추가 된 기본 양식 접 두부를 대체 합니다.</target>
        </trans-unit>
        <trans-unit id="fff5391512c038f2b4e64d54c07e48105bfce7c4" translate="yes" xml:space="preserve">
          <source>Each generic view needs to know what model it will be acting upon. This is provided using the &lt;code&gt;model&lt;/code&gt; attribute.</source>
          <target state="translated">각 일반 뷰는 어떤 모델이 작동하는지 알아야합니다. 이것은 &lt;code&gt;model&lt;/code&gt; 속성을 사용하여 제공됩니다 .</target>
        </trans-unit>
        <trans-unit id="1131db22fb2a7190b5ce4af70c7cfe02840ab48d" translate="yes" xml:space="preserve">
          <source>Each header is only added if it isn&amp;rsquo;t already set.</source>
          <target state="translated">각 헤더는 아직 설정되지 않은 경우에만 추가됩니다.</target>
        </trans-unit>
        <trans-unit id="38d5627e4e0ba8d9b21de91076af41f922be934d" translate="yes" xml:space="preserve">
          <source>Each instance of &lt;a href=&quot;#django.contrib.contenttypes.models.ContentType&quot;&gt;&lt;code&gt;ContentType&lt;/code&gt;&lt;/a&gt; has two fields which, taken together, uniquely describe an installed model:</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.contenttypes.models.ContentType&quot;&gt; &lt;code&gt;ContentType&lt;/code&gt; 의&lt;/a&gt; 각 인스턴스 에는 설치된 모델을 고유하게 설명하는 두 개의 필드가 있습니다.</target>
        </trans-unit>
        <trans-unit id="2e96f75a376fb76c4502355beb0c1ad3d49d0b65" translate="yes" xml:space="preserve">
          <source>Each item in the list should be a tuple of (Full name, email address). Example:</source>
          <target state="translated">목록의 각 항목은 (성명, 이메일 주소)의 튜플이어야합니다. 예:</target>
        </trans-unit>
        <trans-unit id="6dd106fb7a577fb1382f2aa83a3ef60687cff619" translate="yes" xml:space="preserve">
          <source>Each key in the &lt;code&gt;world_mapping&lt;/code&gt; dictionary corresponds to a field in the &lt;code&gt;WorldBorder&lt;/code&gt; model. The value is the name of the shapefile field that data will be loaded from.</source>
          <target state="translated">&lt;code&gt;world_mapping&lt;/code&gt; 사전의 각 키 는 &lt;code&gt;WorldBorder&lt;/code&gt; 모델 의 필드에 해당합니다 . 값은 데이터가로드 될 shapefile 필드의 이름입니다.</target>
        </trans-unit>
        <trans-unit id="d36d465283db1a2bb444e69b1af68bb008deada9" translate="yes" xml:space="preserve">
          <source>Each lookup function that takes keyword-arguments (e.g. &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.filter&quot;&gt;&lt;code&gt;filter()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.exclude&quot;&gt;&lt;code&gt;exclude()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.get&quot;&gt;&lt;code&gt;get()&lt;/code&gt;&lt;/a&gt;) can also be passed one or more &lt;code&gt;Q&lt;/code&gt; objects as positional (not-named) arguments. If you provide multiple &lt;code&gt;Q&lt;/code&gt; object arguments to a lookup function, the arguments will be &amp;ldquo;AND&amp;rdquo;ed together. For example:</source>
          <target state="translated">키워드 인수 (예 : &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.filter&quot;&gt; &lt;code&gt;filter()&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.exclude&quot;&gt; &lt;code&gt;exclude()&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.get&quot;&gt; &lt;code&gt;get()&lt;/code&gt; &lt;/a&gt; ) 를 취하는 각 조회 함수에는 하나 이상의 &lt;code&gt;Q&lt;/code&gt; 객체를 위치 (이름이 지정되지 않은) 인수 로 전달할 수도 있습니다 . 조회 함수에 여러 개의 &lt;code&gt;Q&lt;/code&gt; 객체 인수를 제공 하면 인수는 &quot;AND&quot;가됩니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="fa8404429a25ac913e8d1c1a59d0ca04f9086cfa" translate="yes" xml:space="preserve">
          <source>Each message that is written to the logger is a &lt;em&gt;Log Record&lt;/em&gt;. Each log record also has a &lt;em&gt;log level&lt;/em&gt; indicating the severity of that specific message. A log record can also contain useful metadata that describes the event that is being logged. This can include details such as a stack trace or an error code.</source>
          <target state="translated">로거에 기록 된 각 메시지는 &lt;em&gt;로그 레코드&lt;/em&gt; 입니다. 각 로그 레코드에는 해당 특정 메시지의 심각도를 나타내는 &lt;em&gt;로그 수준&lt;/em&gt; 도 있습니다 . 로그 레코드에는 기록중인 이벤트를 설명하는 유용한 메타 데이터가 포함될 수도 있습니다. 여기에는 스택 추적 또는 오류 코드와 같은 세부 정보가 포함될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="41accbc06c8ee59bb922ed8ceb6e0b56fe9da1ac" translate="yes" xml:space="preserve">
          <source>Each middleware component is responsible for doing some specific function. For example, Django includes a middleware component, &lt;a href=&quot;../../ref/middleware#django.contrib.auth.middleware.AuthenticationMiddleware&quot;&gt;&lt;code&gt;AuthenticationMiddleware&lt;/code&gt;&lt;/a&gt;, that associates users with requests using sessions.</source>
          <target state="translated">각 미들웨어 구성 요소는 특정 기능을 수행합니다. 예를 들어 Django에는 세션을 사용하여 요청과 사용자를 연결 하는 미들웨어 구성 요소 인 &lt;a href=&quot;../../ref/middleware#django.contrib.auth.middleware.AuthenticationMiddleware&quot;&gt; &lt;code&gt;AuthenticationMiddleware&lt;/code&gt; 가&lt;/a&gt; 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="1829ba4bd042fd766754294e83af9afe6753b6ff" translate="yes" xml:space="preserve">
          <source>Each model field has a corresponding default form field. For example, a &lt;code&gt;CharField&lt;/code&gt; on a model is represented as a &lt;code&gt;CharField&lt;/code&gt; on a form. A model &lt;code&gt;ManyToManyField&lt;/code&gt; is represented as a &lt;code&gt;MultipleChoiceField&lt;/code&gt;. Here is the full list of conversions:</source>
          <target state="translated">각 모델 필드에는 해당 기본 양식 필드가 있습니다. 예를 들어, &lt;code&gt;CharField&lt;/code&gt; 모델에은으로 표현된다 &lt;code&gt;CharField&lt;/code&gt; 폼. &lt;code&gt;ManyToManyField&lt;/code&gt; 모델 은 &lt;code&gt;MultipleChoiceField&lt;/code&gt; 로 표현됩니다 . 전체 전환 목록은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="91b5ae9254e2ac5afa0c4eaff5d5f2d60936c9ed" translate="yes" xml:space="preserve">
          <source>Each model is a Python class that subclasses &lt;a href=&quot;../../ref/models/instances#django.db.models.Model&quot;&gt;&lt;code&gt;django.db.models.Model&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">각 모델은 &lt;a href=&quot;../../ref/models/instances#django.db.models.Model&quot;&gt; &lt;code&gt;django.db.models.Model&lt;/code&gt; &lt;/a&gt; 을 서브 클래 싱하는 Python 클래스입니다 .</target>
        </trans-unit>
        <trans-unit id="03a511e1bc7ba6f7d581f711a0805128b922cdc6" translate="yes" xml:space="preserve">
          <source>Each model is a dict with the following keys:</source>
          <target state="translated">각 모델은 다음과 같은 키를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="ef0f53c1fe432c399d62918a936d1408900beccd" translate="yes" xml:space="preserve">
          <source>Each model requires exactly one field to have &lt;a href=&quot;../../ref/models/fields#django.db.models.Field.primary_key&quot;&gt;&lt;code&gt;primary_key=True&lt;/code&gt;&lt;/a&gt; (either explicitly declared or automatically added).</source>
          <target state="translated">각 모델에는 정확히 하나의 필드에 &lt;a href=&quot;../../ref/models/fields#django.db.models.Field.primary_key&quot;&gt; &lt;code&gt;primary_key=True&lt;/code&gt; &lt;/a&gt; (명시 적으로 선언되거나 자동으로 추가됨) 가 있어야 합니다.</target>
        </trans-unit>
        <trans-unit id="3b5e96572b7a649638e0790b74b3d829e4140c62" translate="yes" xml:space="preserve">
          <source>Each model&amp;rsquo;s &lt;code&gt;save()&lt;/code&gt; method isn&amp;rsquo;t called, and the &lt;a href=&quot;../signals#django.db.models.signals.pre_save&quot;&gt;&lt;code&gt;pre_save&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../signals#django.db.models.signals.post_save&quot;&gt;&lt;code&gt;post_save&lt;/code&gt;&lt;/a&gt; signals aren&amp;rsquo;t sent.</source>
          <target state="translated">각 모델의 &lt;code&gt;save()&lt;/code&gt; 메소드는 호출되지 않으며 &lt;a href=&quot;../signals#django.db.models.signals.pre_save&quot;&gt; &lt;code&gt;pre_save&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../signals#django.db.models.signals.post_save&quot;&gt; &lt;code&gt;post_save&lt;/code&gt; &lt;/a&gt; 신호는 전송되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="a86ca17597a0c77ac19ec2049f0d08f2cf163a3b" translate="yes" xml:space="preserve">
          <source>Each non-abstract &lt;a href=&quot;instances#django.db.models.Model&quot;&gt;&lt;code&gt;Model&lt;/code&gt;&lt;/a&gt; class must have a &lt;a href=&quot;../../topics/db/managers#django.db.models.Manager&quot;&gt;&lt;code&gt;Manager&lt;/code&gt;&lt;/a&gt; instance added to it. Django ensures that in your model class you have at least a default &lt;code&gt;Manager&lt;/code&gt; specified. If you don&amp;rsquo;t add your own &lt;code&gt;Manager&lt;/code&gt;, Django will add an attribute &lt;code&gt;objects&lt;/code&gt; containing default &lt;a href=&quot;../../topics/db/managers#django.db.models.Manager&quot;&gt;&lt;code&gt;Manager&lt;/code&gt;&lt;/a&gt; instance. If you add your own &lt;a href=&quot;../../topics/db/managers#django.db.models.Manager&quot;&gt;&lt;code&gt;Manager&lt;/code&gt;&lt;/a&gt; instance attribute, the default one does not appear. Consider the following example:</source>
          <target state="translated">추상이 아닌 각 &lt;a href=&quot;instances#django.db.models.Model&quot;&gt; &lt;code&gt;Model&lt;/code&gt; &lt;/a&gt; 클래스에는 &lt;a href=&quot;../../topics/db/managers#django.db.models.Manager&quot;&gt; &lt;code&gt;Manager&lt;/code&gt; &lt;/a&gt; 인스턴스가 추가되어 있어야합니다. Django는 모델 클래스에 최소한 기본 &lt;code&gt;Manager&lt;/code&gt; 지정 되어 있는지 확인 합니다. 자신의 &lt;code&gt;Manager&lt;/code&gt; 를 추가하지 않으면 Django는 기본 &lt;a href=&quot;../../topics/db/managers#django.db.models.Manager&quot;&gt; &lt;code&gt;Manager&lt;/code&gt; &lt;/a&gt; 인스턴스를 포함 하는 속성 &lt;code&gt;objects&lt;/code&gt; 를 추가 합니다. 고유 한 &lt;a href=&quot;../../topics/db/managers#django.db.models.Manager&quot;&gt; &lt;code&gt;Manager&lt;/code&gt; &lt;/a&gt; 인스턴스 속성 을 추가 하면 기본 속성이 나타나지 않습니다. 다음 예제를 고려하십시오.</target>
        </trans-unit>
        <trans-unit id="4c965682013aa01088fe8e446892e0f9d0d780ad" translate="yes" xml:space="preserve">
          <source>Each of these colors can then be modified by using the following display options:</source>
          <target state="translated">그런 다음 다음 표시 옵션을 사용하여 이러한 각 색상을 수정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c032813e1c75b7e9b318fb7720ad63166a3f87ec" translate="yes" xml:space="preserve">
          <source>Each of these functions takes a &lt;code&gt;using&lt;/code&gt; argument which should be the name of a database for which the behavior applies. If no &lt;code&gt;using&lt;/code&gt; argument is provided then the &lt;code&gt;&quot;default&quot;&lt;/code&gt; database is used.</source>
          <target state="translated">이러한 각 함수는 작동 인수가 적용되는 데이터베이스의 이름이어야 하는 &lt;code&gt;using&lt;/code&gt; 인수를 사용합니다. &lt;code&gt;using&lt;/code&gt; 인수가 제공 되지 않으면 &lt;code&gt;&quot;default&quot;&lt;/code&gt; 데이터베이스가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="e71525bfc762897383bda646cbf09e5d8a136b30" translate="yes" xml:space="preserve">
          <source>Each of these roles can be assigned a specific foreground and background color, from the following list:</source>
          <target state="translated">이러한 각 역할에는 다음 목록에서 특정 전경색과 배경색을 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7287771fc549f9e43d41c8c05aa164f2529da8e2" translate="yes" xml:space="preserve">
          <source>Each of these three classes knows how to render a certain type of feed as XML. They share this interface:</source>
          <target state="translated">이 세 가지 클래스 각각은 특정 유형의 피드를 XML로 렌더링하는 방법을 알고 있습니다. 그들은이 인터페이스를 공유합니다 :</target>
        </trans-unit>
        <trans-unit id="aa51370ee76a04abf238ec0dc182012982f950ef" translate="yes" xml:space="preserve">
          <source>Each of those dictionaries represents an object, with the keys corresponding to the attribute names of model objects.</source>
          <target state="translated">이러한 각 사전은 모델 객체의 속성 이름에 해당하는 키와 함께 객체를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="9eacdbeaab596f61277ce2954ed4688d28a31011" translate="yes" xml:space="preserve">
          <source>Each of your views should use only mixins or views from one of the groups of generic class-based views: &lt;a href=&quot;generic-display&quot;&gt;detail, list&lt;/a&gt;, &lt;a href=&quot;generic-editing&quot;&gt;editing&lt;/a&gt; and date. For example it&amp;rsquo;s fine to combine &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#TemplateView&quot;&gt;&lt;code&gt;TemplateView&lt;/code&gt;&lt;/a&gt; (built in view) with &lt;a href=&quot;../../ref/class-based-views/mixins-multiple-object#django.views.generic.list.MultipleObjectMixin&quot;&gt;&lt;code&gt;MultipleObjectMixin&lt;/code&gt;&lt;/a&gt; (generic list), but you&amp;rsquo;re likely to have problems combining &lt;code&gt;SingleObjectMixin&lt;/code&gt; (generic detail) with &lt;code&gt;MultipleObjectMixin&lt;/code&gt; (generic list).</source>
          <target state="translated">각보기는 &lt;a href=&quot;generic-display&quot;&gt;세부 사항, 목록&lt;/a&gt; , &lt;a href=&quot;generic-editing&quot;&gt;편집&lt;/a&gt; 및 날짜와 같은 일반 클래스 기반보기 그룹 중 하나의 믹스 인 또는보기 만 사용해야 합니다. 예를 들어 &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#TemplateView&quot;&gt; &lt;code&gt;TemplateView&lt;/code&gt; &lt;/a&gt; (내장보기)를 &lt;a href=&quot;../../ref/class-based-views/mixins-multiple-object#django.views.generic.list.MultipleObjectMixin&quot;&gt; &lt;code&gt;MultipleObjectMixin&lt;/code&gt; &lt;/a&gt; (일반 목록)과 결합하는 것이 &lt;code&gt;SingleObjectMixin&lt;/code&gt; (일반 세부 사항)과 &lt;code&gt;MultipleObjectMixin&lt;/code&gt; (일반 목록)을 결합하는 데 문제가있을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="db4988c586ad32ef3c472055aeb47e9bdb3ce09e" translate="yes" xml:space="preserve">
          <source>Each password validator must provide a help text to explain the requirements to the user, validate a given password and return an error message if it does not meet the requirements, and optionally receive passwords that have been set. Validators can also have optional settings to fine tune their behavior.</source>
          <target state="translated">각 비밀번호 유효성 검증기는 사용자에게 요구 사항을 설명하고, 지정된 비밀번호를 유효성 검증하고, 요구 사항을 충족하지 않는 경우 오류 메시지를 리턴하고, 설정된 비밀번호를 선택적으로 수신하기위한 도움말 텍스트를 제공해야합니다. 유효성 검사기는 동작을 미세 조정하기위한 옵션 설정을 가질 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="0a0d953c395cf521ce411dd374006420611373ad" translate="yes" xml:space="preserve">
          <source>Each process gets its own database. You must ensure that different test cases don&amp;rsquo;t access the same resources. For instance, test cases that touch the filesystem should create a temporary directory for their own use.</source>
          <target state="translated">각 프로세스는 자체 데이터베이스를 가져옵니다. 다른 테스트 사례가 동일한 리소스에 액세스하지 않도록해야합니다. 예를 들어, 파일 시스템을 건 드리는 테스트 사례는 자체적으로 사용할 임시 디렉토리를 작성해야합니다.</target>
        </trans-unit>
        <trans-unit id="6a5f004865d9534800031cee803c75541f12dd1a" translate="yes" xml:space="preserve">
          <source>Each processor is applied in order. That means, if one processor adds a variable to the context and a second processor adds a variable with the same name, the second will override the first. The default processors are explained below.</source>
          <target state="translated">각 프로세서는 순서대로 적용됩니다. 즉, 한 프로세서가 컨텍스트에 변수를 추가하고 두 번째 프로세서가 동일한 이름의 변수를 추가하면 두 번째 프로세서가 첫 번째 프로세서보다 우선합니다. 기본 프로세서는 아래에 설명되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="7b74e5b7277908149647c4e254a2c9dd8743981d" translate="yes" xml:space="preserve">
          <source>Each regular expression in a &lt;code&gt;urlpatterns&lt;/code&gt; is compiled the first time it&amp;rsquo;s accessed. This makes the system blazingly fast.</source>
          <target state="translated">&lt;code&gt;urlpatterns&lt;/code&gt; 의 각 정규식 은 처음 액세스 할 때 컴파일됩니다. 이것은 시스템이 엄청나게 빠릅니다.</target>
        </trans-unit>
        <trans-unit id="5b20a40de7eb1c60cfbf06733545a162ebbcd9a6" translate="yes" xml:space="preserve">
          <source>Each request served by a class-based view has an independent state; therefore, it is safe to store state variables on the instance (i.e., &lt;code&gt;self.foo = 3&lt;/code&gt; is a thread-safe operation).</source>
          <target state="translated">클래스 기반 뷰에서 제공되는 각 요청은 독립적 인 상태입니다. 따라서 인스턴스에 상태 변수를 저장하는 것이 안전합니다 (즉, &lt;code&gt;self.foo = 3&lt;/code&gt; 은 스레드 안전 작업입니다).</target>
        </trans-unit>
        <trans-unit id="b98e5ef49465e6036280ceba699e82a100cb1a12" translate="yes" xml:space="preserve">
          <source>Each separate element of &lt;code&gt;datatuple&lt;/code&gt; results in a separate email message. As in &lt;a href=&quot;#django.core.mail.send_mail&quot;&gt;&lt;code&gt;send_mail()&lt;/code&gt;&lt;/a&gt;, recipients in the same &lt;code&gt;recipient_list&lt;/code&gt; will all see the other addresses in the email messages&amp;rsquo; &amp;ldquo;To:&amp;rdquo; field.</source>
          <target state="translated">별도의 데이터 &lt;code&gt;datatuple&lt;/code&gt; 요소마다 별도의 전자 메일 메시지가 생성됩니다. 마찬가지로 &lt;a href=&quot;#django.core.mail.send_mail&quot;&gt; &lt;code&gt;send_mail()&lt;/code&gt; &lt;/a&gt; , 같은받는 사람 &lt;code&gt;recipient_list&lt;/code&gt; 는 필드 : 모든 이메일 메시지 ' &quot;&quot;에 다른 주소를 볼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a6fbfb728501832e282561cf179231e692040728" translate="yes" xml:space="preserve">
          <source>Each text label is surrounded in an HTML &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; tag, which points to the appropriate form field via its &lt;code&gt;id&lt;/code&gt;. Its &lt;code&gt;id&lt;/code&gt;, in turn, is generated by prepending &lt;code&gt;'id_'&lt;/code&gt; to the field name. The &lt;code&gt;id&lt;/code&gt; attributes and &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; tags are included in the output by default, to follow best practices, but you can change that behavior.</source>
          <target state="translated">각 텍스트 레이블은 HTML &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; 태그 로 둘러싸여 있으며 &lt;code&gt;id&lt;/code&gt; 를 통해 적절한 양식 필드를 가리 킵니다 . 그것의 &lt;code&gt;id&lt;/code&gt; 차례로 앞에 추가에 의해 생성되는 &lt;code&gt;'id_'&lt;/code&gt; 필드 이름으로. &lt;code&gt;id&lt;/code&gt; 속성 및 &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; 태그는 모범 사례를 따라 기본적으로 출력에 포함되어 있습니다,하지만 당신은 그 동작을 변경할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="03cf68270e68ac2d25d52ff5b90148366ce83c6d" translate="yes" xml:space="preserve">
          <source>Each time any Django application raises a 404 error, this middleware checks the flatpages database for the requested URL as a last resort. Specifically, it checks for a flatpage with the given URL with a site ID that corresponds to the &lt;a href=&quot;../settings#std:setting-SITE_ID&quot;&gt;&lt;code&gt;SITE_ID&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">Django 응용 프로그램에서 404 오류가 발생할 때마다이 미들웨어는 플랫 페이지 데이터베이스에서 마지막 URL로 요청 된 URL을 확인합니다. 특히 &lt;a href=&quot;../settings#std:setting-SITE_ID&quot;&gt; &lt;code&gt;SITE_ID&lt;/code&gt; &lt;/a&gt; 설정에 해당하는 사이트 ID를 가진 지정된 URL이있는 플랫 페이지를 확인 합니다.</target>
        </trans-unit>
        <trans-unit id="c443e45c5333145cdfad53ce7ea35e2193a52752" translate="yes" xml:space="preserve">
          <source>Each time you refine a &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt;, you get a brand-new &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; that is in no way bound to the previous &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt;. Each refinement creates a separate and distinct &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; that can be stored, used and reused.</source>
          <target state="translated">&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; &lt;/a&gt; 을 세분화 할 때마다 이전 &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; 에&lt;/a&gt; 바인딩되지 않은 완전히 새로운 &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; &lt;/a&gt; 을 얻게 됩니다. 각 구체화 는 저장, 사용 및 재사용 할 수 있는 별도의 고유 한 &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; &lt;/a&gt; 을 작성합니다 .</target>
        </trans-unit>
        <trans-unit id="c1b9ec330548b55821336d0e0a09dc8b23578112" translate="yes" xml:space="preserve">
          <source>Each view is responsible for doing one of two things: Returning an &lt;a href=&quot;../ref/request-response#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt; object containing the content for the requested page, or raising an exception such as &lt;a href=&quot;../topics/http/views#django.http.Http404&quot;&gt;&lt;code&gt;Http404&lt;/code&gt;&lt;/a&gt;. The rest is up to you.</source>
          <target state="translated">각보기는 요청 된 페이지의 컨텐츠를 포함 하는 &lt;a href=&quot;../ref/request-response#django.http.HttpResponse&quot;&gt; &lt;code&gt;HttpResponse&lt;/code&gt; &lt;/a&gt; 오브젝트 리턴 또는 &lt;a href=&quot;../topics/http/views#django.http.Http404&quot;&gt; &lt;code&gt;Http404&lt;/code&gt; &lt;/a&gt; 와 같은 예외 발생 중 하나를 수행 합니다. 나머지는 당신에게 달려 있습니다.</target>
        </trans-unit>
        <trans-unit id="3733c1d6c9f30952606a37e9580bed51ce98a268" translate="yes" xml:space="preserve">
          <source>Each view is responsible for doing one of two things: returning an &lt;a href=&quot;../ref/request-response#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt; object containing the content for the requested page, or raising an exception such as &lt;a href=&quot;../topics/http/views#django.http.Http404&quot;&gt;&lt;code&gt;Http404&lt;/code&gt;&lt;/a&gt;. The rest is up to you.</source>
          <target state="translated">각보기는 요청 된 페이지의 컨텐츠를 포함 하는 &lt;a href=&quot;../ref/request-response#django.http.HttpResponse&quot;&gt; &lt;code&gt;HttpResponse&lt;/code&gt; &lt;/a&gt; 오브젝트를 리턴 하거나 &lt;a href=&quot;../topics/http/views#django.http.Http404&quot;&gt; &lt;code&gt;Http404&lt;/code&gt; &lt;/a&gt; 와 같은 예외를 발생시키는 두 가지 중 하나를 수행 합니다. 나머지는 당신에게 달려 있습니다.</target>
        </trans-unit>
        <trans-unit id="19339908359150f3c88841413b986756ead6f3f2" translate="yes" xml:space="preserve">
          <source>Each widget has a &lt;code&gt;template_name&lt;/code&gt; attribute with a value such as &lt;code&gt;input.html&lt;/code&gt;. Built-in widget templates are stored in the &lt;code&gt;django/forms/widgets&lt;/code&gt; path. You can provide a custom template for &lt;code&gt;input.html&lt;/code&gt; by defining &lt;code&gt;django/forms/widgets/input.html&lt;/code&gt;, for example. See &lt;a href=&quot;widgets#built-in-widgets&quot;&gt;Built-in widgets&lt;/a&gt; for the name of each widget&amp;rsquo;s template.</source>
          <target state="translated">각 위젯에는 &lt;code&gt;input.html&lt;/code&gt; 과 같은 값을 가진 &lt;code&gt;template_name&lt;/code&gt; 속성이 있습니다. 내장 위젯 템플리트는 &lt;code&gt;django/forms/widgets&lt;/code&gt; 경로에 저장됩니다 . 예를 들어 &lt;code&gt;django/forms/widgets/input.html&lt;/code&gt; 을 정의 하여 &lt;code&gt;input.html&lt;/code&gt; 에 대한 사용자 정의 템플리트를 제공 할 수 있습니다 . 각 위젯 템플리트의 이름은 &lt;a href=&quot;widgets#built-in-widgets&quot;&gt;내장 위젯&lt;/a&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="7d137bed7bd0b56e4bb03ffef2d3a3de46a3105e" translate="yes" xml:space="preserve">
          <source>Earlier, we installed the polls app as a user library. This has some disadvantages:</source>
          <target state="translated">앞서 설문 조사 앱을 사용자 라이브러리로 설치했습니다. 여기에는 몇 가지 단점이 있습니다.</target>
        </trans-unit>
        <trans-unit id="c4387183f8ade46ecb53c704c50d0df3fb94f91e" translate="yes" xml:space="preserve">
          <source>Earlier, you used &lt;code&gt;ogrinfo&lt;/code&gt; to examine the contents of the world borders shapefile. GeoDjango also includes a Pythonic interface to GDAL&amp;rsquo;s powerful OGR library that can work with all the vector data sources that OGR supports.</source>
          <target state="translated">이전에는 &lt;code&gt;ogrinfo&lt;/code&gt; 를 사용 하여 세계 경계 shapefile의 내용을 검사했습니다. GeoDjango에는 OGR이 지원하는 모든 벡터 데이터 소스와 함께 작동 할 수있는 GDAL의 강력한 OGR 라이브러리에 대한 Pythonic 인터페이스도 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="bc9c6519bdc3961580bd7cb191e4981472f2333a" translate="yes" xml:space="preserve">
          <source>Early on it was recognized that there were common idioms and patterns found in view development. Function-based generic views were introduced to abstract these patterns and ease view development for the common cases.</source>
          <target state="translated">초기에 뷰 개발에서 일반적인 관용구와 패턴이 발견되었다. 이러한 패턴을 추상화하고 일반적인 경우에 대한 뷰 개발을 용이하게하기 위해 함수 기반 일반 뷰가 도입되었습니다.</target>
        </trans-unit>
        <trans-unit id="8440b9eb7d03917b2509b5baeab2a299ce257eb0" translate="yes" xml:space="preserve">
          <source>Edge</source>
          <target state="translated">Edge</target>
        </trans-unit>
        <trans-unit id="c6733d2b92d7770bb88a12c0c1edfd4c3f203cc3" translate="yes" xml:space="preserve">
          <source>Edge cases</source>
          <target state="translated">가장자리 케이스</target>
        </trans-unit>
        <trans-unit id="fcacfe8059c533d705b517a6c55a078d9064cb53" translate="yes" xml:space="preserve">
          <source>Edit the &lt;a href=&quot;../../ref/settings#std:setting-MIDDLEWARE&quot;&gt;&lt;code&gt;MIDDLEWARE&lt;/code&gt;&lt;/a&gt; setting and make sure it contains &lt;code&gt;'django.contrib.sessions.middleware.SessionMiddleware'&lt;/code&gt;. The default &lt;code&gt;settings.py&lt;/code&gt; created by &lt;code&gt;django-admin startproject&lt;/code&gt; has &lt;code&gt;SessionMiddleware&lt;/code&gt; activated.</source>
          <target state="translated">&lt;a href=&quot;../../ref/settings#std:setting-MIDDLEWARE&quot;&gt; &lt;code&gt;MIDDLEWARE&lt;/code&gt; &lt;/a&gt; 설정을 편집하고 &lt;code&gt;'django.contrib.sessions.middleware.SessionMiddleware'&lt;/code&gt; 가 포함되어 있는지 확인하십시오 . &lt;code&gt;django-admin startproject&lt;/code&gt; 로 작성된 기본 &lt;code&gt;settings.py&lt;/code&gt; 에는 &lt;code&gt;SessionMiddleware&lt;/code&gt; 가 활성화되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="120d7e35a9158c943b2c8a0baffc1d9a5d047061" translate="yes" xml:space="preserve">
          <source>Edit the first migration file. The generated migration class should look similar to this:</source>
          <target state="translated">첫 번째 마이그레이션 파일을 편집하십시오. 생성 된 마이그레이션 클래스는 다음과 유사해야합니다.</target>
        </trans-unit>
        <trans-unit id="adc1fc0762121272aead6562a1016cdc3fdc52b5" translate="yes" xml:space="preserve">
          <source>Edit your &lt;code&gt;polls/admin.py&lt;/code&gt; file again and add an improvement to the &lt;code&gt;Question&lt;/code&gt; change list page: filters using the &lt;a href=&quot;../ref/contrib/admin/index#django.contrib.admin.ModelAdmin.list_filter&quot;&gt;&lt;code&gt;list_filter&lt;/code&gt;&lt;/a&gt;. Add the following line to &lt;code&gt;QuestionAdmin&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;polls/admin.py&lt;/code&gt; 파일을 다시 편집 하고 &lt;code&gt;Question&lt;/code&gt; 변경 목록 페이지에 개선 사항을 추가 하십시오 : &lt;a href=&quot;../ref/contrib/admin/index#django.contrib.admin.ModelAdmin.list_filter&quot;&gt; &lt;code&gt;list_filter&lt;/code&gt; 를&lt;/a&gt; 사용하여 필터 . &lt;code&gt;QuestionAdmin&lt;/code&gt; 에 다음 줄을 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="4a904e746236c62c2090168a9b6b3c53dcc0cb34" translate="yes" xml:space="preserve">
          <source>Editing geometry fields from the admin.</source>
          <target state="translated">관리자에서 지오메트리 필드 편집</target>
        </trans-unit>
        <trans-unit id="e2395732ea8675a07a0aa660461d0546a2f98443" translate="yes" xml:space="preserve">
          <source>Editing mixins</source>
          <target state="translated">믹스 인 편집</target>
        </trans-unit>
        <trans-unit id="de2e6231f78baa73c76471d5ec0cddc3ae1c0109" translate="yes" xml:space="preserve">
          <source>Editing views</source>
          <target state="translated">뷰 편집</target>
        </trans-unit>
        <trans-unit id="ed63036d8730b34c2af3aa53fe984d9883388a1c" translate="yes" xml:space="preserve">
          <source>Editors</source>
          <target state="translated">Editors</target>
        </trans-unit>
        <trans-unit id="bfdc74a5613fa59c62fbb63e18eb1bda60d76e6c" translate="yes" xml:space="preserve">
          <source>Eight bit unsigned integer</source>
          <target state="translated">8 비트 부호없는 정수</target>
        </trans-unit>
        <trans-unit id="388808032cce004f2fd096dd884a17cdb879a076" translate="yes" xml:space="preserve">
          <source>Either &lt;code&gt;configure()&lt;/code&gt; or &lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt; is required</source>
          <target state="translated">어느 &lt;code&gt;configure()&lt;/code&gt; 또는 &lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt; 이 필요합니다</target>
        </trans-unit>
        <trans-unit id="419dc9dd1c54d38f5ec5aa2e1b27fb8737ff28a9" translate="yes" xml:space="preserve">
          <source>Either &lt;code&gt;w&lt;/code&gt; for words, &lt;code&gt;p&lt;/code&gt; for HTML paragraphs or &lt;code&gt;b&lt;/code&gt; for plain-text paragraph blocks (default is &lt;code&gt;b&lt;/code&gt;).</source>
          <target state="translated">어느 &lt;code&gt;w&lt;/code&gt; 단어, &lt;code&gt;p&lt;/code&gt; HTML 단락 또는에 대한 &lt;code&gt;b&lt;/code&gt; 일반 텍스트 단락 블록 (기본값은 &lt;code&gt;b&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="a86aed67785d59198e1613f04cc0261e636bd947" translate="yes" xml:space="preserve">
          <source>Either an &lt;a href=&quot;https://docs.python.org/3/glossary.html#term-iterable&quot;&gt;iterable&lt;/a&gt; of 2-tuples to use as choices for this field, or a callable that returns such an iterable. This argument accepts the same formats as the &lt;code&gt;choices&lt;/code&gt; argument to a model field. See the &lt;a href=&quot;../models/fields#field-choices&quot;&gt;model field reference documentation on choices&lt;/a&gt; for more details. If the argument is a callable, it is evaluated each time the field&amp;rsquo;s form is initialized. Defaults to an empty list.</source>
          <target state="translated">어느 쪽 &lt;a href=&quot;https://docs.python.org/3/glossary.html#term-iterable&quot;&gt;반복 가능한&lt;/a&gt; 2 튜플의이 분야에 대한 선택으로 사용하거나 반환 같은 반복 가능한 것을 호출 가능합니다. 이 인수는 모델 필드에 대한 &lt;code&gt;choices&lt;/code&gt; 인수 와 동일한 형식을 허용합니다 . 자세한 내용은 &lt;a href=&quot;../models/fields#field-choices&quot;&gt;모델 필드 참조 설명서&lt;/a&gt; 를 참조하십시오. 인수가 호출 가능한 경우, 필드의 양식이 초기화 될 때마다 평가됩니다. 빈 목록이 기본값입니다.</target>
        </trans-unit>
        <trans-unit id="d28c6bffe8103ed860fd407d206bead335523716" translate="yes" xml:space="preserve">
          <source>Either way, &lt;code&gt;authenticate()&lt;/code&gt; should check the credentials it gets and return a user object that matches those credentials if the credentials are valid. If they&amp;rsquo;re not valid, it should return &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">어느 쪽이든, &lt;code&gt;authenticate()&lt;/code&gt; 는 자격 증명을 확인하고 자격 증명이 유효한 경우 자격 증명과 일치하는 사용자 객체를 반환해야합니다. 유효하지 않은 경우 &lt;code&gt;None&lt;/code&gt; 을 반환해야합니다 .</target>
        </trans-unit>
        <trans-unit id="53c3513d99230dc97ffc8b8f980549485993a2ec" translate="yes" xml:space="preserve">
          <source>Elements of &lt;code&gt;list_display&lt;/code&gt; can also be properties. Please note however, that due to the way properties work in Python, setting &lt;code&gt;short_description&lt;/code&gt; or &lt;code&gt;admin_order_field&lt;/code&gt; on a property is only possible when using the &lt;code&gt;property()&lt;/code&gt; function and &lt;strong&gt;not&lt;/strong&gt; with the &lt;code&gt;@property&lt;/code&gt; decorator.</source>
          <target state="translated">&lt;code&gt;list_display&lt;/code&gt; 의 요소는 속성 일 수도 있습니다. 그러나 파이썬에서 속성이 작동하는 방식으로 인해 속성에 &lt;code&gt;short_description&lt;/code&gt; 또는 &lt;code&gt;admin_order_field&lt;/code&gt; 를 설정 하는 것은 &lt;code&gt;@property&lt;/code&gt; 데코레이터가 &lt;strong&gt;아닌 &lt;/strong&gt; &lt;code&gt;property()&lt;/code&gt; 함수를 사용할 때만 가능합니다 .&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="84add5b2952787581cb9a8851eef63d1ec75d22b" translate="yes" xml:space="preserve">
          <source>Email</source>
          <target state="translated">Email</target>
        </trans-unit>
        <trans-unit id="6cac061f8a6ca61d9516c210bf88971b1a0c84b8" translate="yes" xml:space="preserve">
          <source>Email backends</source>
          <target state="translated">이메일 백엔드</target>
        </trans-unit>
        <trans-unit id="cfcd5bdbfc61a80a3bc82b1a180b9ae066631ccf" translate="yes" xml:space="preserve">
          <source>Email reports</source>
          <target state="translated">이메일 보고서</target>
        </trans-unit>
        <trans-unit id="c83154634fd437155495c0f041307d91481c46ec" translate="yes" xml:space="preserve">
          <source>Email services</source>
          <target state="translated">이메일 서비스</target>
        </trans-unit>
        <trans-unit id="ab4a5c4f2b9f04d70f2f5f01c085f3c83e7460f6" translate="yes" xml:space="preserve">
          <source>Email the package to a friend.</source>
          <target state="translated">패키지를 친구에게 이메일로 보냅니다.</target>
        </trans-unit>
        <trans-unit id="2fde6da6e9f22b3fc4d2b65fa9c356bb50336ad9" translate="yes" xml:space="preserve">
          <source>Empty &lt;code&gt;LineString&lt;/code&gt; objects may be instantiated by passing no arguments or an empty sequence. The following are equivalent:</source>
          <target state="translated">빈 &lt;code&gt;LineString&lt;/code&gt; 객체는 인수 또는 빈 시퀀스를 전달하여 인스턴스화 할 수 있습니다. 다음은 동일합니다.</target>
        </trans-unit>
        <trans-unit id="c84fe32a01993fdbb6c286dbbb1991ee1e076aae" translate="yes" xml:space="preserve">
          <source>Empty &lt;code&gt;Point&lt;/code&gt; objects may be instantiated by passing no arguments or an empty sequence. The following are equivalent:</source>
          <target state="translated">빈 &lt;code&gt;Point&lt;/code&gt; 객체는 인수 또는 빈 시퀀스를 전달하지 않고 인스턴스화 할 수 있습니다. 다음은 동일합니다.</target>
        </trans-unit>
        <trans-unit id="5a5a25b0e6a2dea811dce4133791baef09918529" translate="yes" xml:space="preserve">
          <source>Empty tags are equivalent to their self-closing version.</source>
          <target state="translated">빈 태그는 자체 결산 버전과 동일합니다.</target>
        </trans-unit>
        <trans-unit id="0307d363ba40241197b833e90f5f8291ed6b6340" translate="yes" xml:space="preserve">
          <source>Empty value: &lt;code&gt;''&lt;/code&gt; (an empty string)</source>
          <target state="translated">빈 값 : &lt;code&gt;''&lt;/code&gt; (빈 문자열)</target>
        </trans-unit>
        <trans-unit id="f305673b9e3e33782f5d33084c85ee33ec06b8bd" translate="yes" xml:space="preserve">
          <source>Empty value: &lt;code&gt;False&lt;/code&gt;</source>
          <target state="translated">빈 값 : &lt;code&gt;False&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bdeeba3b3a7689ffd1d89122a0dc8dd2b4e03911" translate="yes" xml:space="preserve">
          <source>Empty value: &lt;code&gt;None&lt;/code&gt;</source>
          <target state="translated">빈 값 : &lt;code&gt;None&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e5cfd18f5a597ab2f02625b842bcf36919154a90" translate="yes" xml:space="preserve">
          <source>Empty value: &lt;code&gt;[]&lt;/code&gt; (an empty list)</source>
          <target state="translated">빈 값 : &lt;code&gt;[]&lt;/code&gt; (빈 목록)</target>
        </trans-unit>
        <trans-unit id="de23653036c65c4ef1abe722a3ef494baebd9bbd" translate="yes" xml:space="preserve">
          <source>Empty value: An empty &lt;code&gt;QuerySet&lt;/code&gt; (self.queryset.none())</source>
          <target state="translated">빈 값 : 빈 &lt;code&gt;QuerySet&lt;/code&gt; (self.queryset.none ())</target>
        </trans-unit>
        <trans-unit id="4225eee1d66c233c244a726ad49434d5db23844e" translate="yes" xml:space="preserve">
          <source>Empty value: Whatever you&amp;rsquo;ve given as &lt;a href=&quot;#django.forms.CharField.empty_value&quot;&gt;&lt;code&gt;empty_value&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">빈 값 : &lt;a href=&quot;#django.forms.CharField.empty_value&quot;&gt; &lt;code&gt;empty_value&lt;/code&gt; 로&lt;/a&gt; 제공 한 값 .</target>
        </trans-unit>
        <trans-unit id="66c5b7a862ad2f791a0ebb9ae117b975b1c72e3f" translate="yes" xml:space="preserve">
          <source>Empty value: Whatever you&amp;rsquo;ve given as &lt;a href=&quot;#django.forms.TypedChoiceField.empty_value&quot;&gt;&lt;code&gt;empty_value&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">빈 값 : &lt;a href=&quot;#django.forms.TypedChoiceField.empty_value&quot;&gt; &lt;code&gt;empty_value&lt;/code&gt; 로&lt;/a&gt; 제공 한 값 .</target>
        </trans-unit>
        <trans-unit id="bba37e157e65a36194be07698f01f611e533d1aa" translate="yes" xml:space="preserve">
          <source>Empty value: Whatever you&amp;rsquo;ve given as &lt;code&gt;empty_value&lt;/code&gt;</source>
          <target state="translated">빈 값 : &lt;code&gt;empty_value&lt;/code&gt; 로 제공 한 값</target>
        </trans-unit>
        <trans-unit id="b430c70ab9871e221b28ef1c4c585dcde8982154" translate="yes" xml:space="preserve">
          <source>Emptying the test outbox</source>
          <target state="translated">테스트 발신 함 비우기</target>
        </trans-unit>
        <trans-unit id="11c3f094b02b2299b7aef55682fa0533134d3da8" translate="yes" xml:space="preserve">
          <source>Emulating built-in field types</source>
          <target state="translated">내장 필드 유형 에뮬레이션</target>
        </trans-unit>
        <trans-unit id="51587e5c16a3a99c5b5a235b51466d22e53e91b3" translate="yes" xml:space="preserve">
          <source>Enable the site-wide cache. If these are enabled, each Django-powered page will be cached for as long as the &lt;a href=&quot;settings#std:setting-CACHE_MIDDLEWARE_SECONDS&quot;&gt;&lt;code&gt;CACHE_MIDDLEWARE_SECONDS&lt;/code&gt;&lt;/a&gt; setting defines. See the &lt;a href=&quot;../topics/cache&quot;&gt;cache documentation&lt;/a&gt;.</source>
          <target state="translated">사이트 전체 캐시를 활성화하십시오. 이를 활성화하면 &lt;a href=&quot;settings#std:setting-CACHE_MIDDLEWARE_SECONDS&quot;&gt; &lt;code&gt;CACHE_MIDDLEWARE_SECONDS&lt;/code&gt; &lt;/a&gt; 설정이 정의 하는 한 각 장고 기반 페이지가 캐시됩니다 . &lt;a href=&quot;../topics/cache&quot;&gt;캐시 설명서를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="8a606c31d5bd9855b6f96d89eb26d4037f8e142e" translate="yes" xml:space="preserve">
          <source>Enables &lt;a href=&quot;../topics/logging#django-db-logger&quot;&gt;SQL logging&lt;/a&gt; for failing tests. If &lt;code&gt;--verbosity&lt;/code&gt; is &lt;code&gt;2&lt;/code&gt;, then queries in passing tests are also output.</source>
          <target state="translated">가능 &lt;a href=&quot;../topics/logging#django-db-logger&quot;&gt;SQL 로깅을&lt;/a&gt; 테스트를 실패합니다. &lt;code&gt;--verbosity&lt;/code&gt; 가 &lt;code&gt;2&lt;/code&gt; 인 경우 테스트 통과의 쿼리도 출력됩니다.</target>
        </trans-unit>
        <trans-unit id="7a4463d651ed0661984979afe199ae5b0f721a19" translate="yes" xml:space="preserve">
          <source>Enables cookie- and session-based message support. See the &lt;a href=&quot;contrib/messages&quot;&gt;messages documentation&lt;/a&gt;.</source>
          <target state="translated">쿠키 및 세션 기반 메시지 지원을 활성화합니다. &lt;a href=&quot;contrib/messages&quot;&gt;메시지 설명서를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="b697bc7a93f37da137a7d81c38c1b3456d64c1e7" translate="yes" xml:space="preserve">
          <source>Enables fixing of migration conflicts.</source>
          <target state="translated">마이그레이션 충돌을 수정합니다.</target>
        </trans-unit>
        <trans-unit id="facf40aee4c34cb8e86957e26fbeb8686d6d7927" translate="yes" xml:space="preserve">
          <source>Enables handling of the &lt;code&gt;DELETE&lt;/code&gt; http action.</source>
          <target state="translated">&lt;code&gt;DELETE&lt;/code&gt; http 작업을 처리 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="adf9ba6da093f7b831abeb1094dfef28604e5d4c" translate="yes" xml:space="preserve">
          <source>Enables language selection based on data from the request. It customizes content for each user. See the &lt;a href=&quot;../topics/i18n/translation&quot;&gt;internationalization documentation&lt;/a&gt;.</source>
          <target state="translated">요청의 데이터를 기반으로 언어를 선택합니다. 각 사용자의 컨텐츠를 사용자 정의합니다. &lt;a href=&quot;../topics/i18n/translation&quot;&gt;국제화 설명서를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="de9c23f636a149ae61bc116fbee349e97a8aca92" translate="yes" xml:space="preserve">
          <source>Enables or disables conversion of aware datetime objects to the current time zone in the contained block.</source>
          <target state="translated">인식 된 날짜 시간 객체를 포함 된 블록의 현재 시간대로 변환 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c770732c1fcd44d857f9fb3dfac99ec20c9986b4" translate="yes" xml:space="preserve">
          <source>Enables or disables localization of template variables in the contained block.</source>
          <target state="translated">포함 된 블록에서 템플릿 변수의 지역화를 활성화 또는 비활성화합니다.</target>
        </trans-unit>
        <trans-unit id="d18445bb9393ddbd76cbe6f830c69633db71cb33" translate="yes" xml:space="preserve">
          <source>Enables session support. See the &lt;a href=&quot;../topics/http/sessions&quot;&gt;session documentation&lt;/a&gt;.</source>
          <target state="translated">세션 지원을 활성화합니다. &lt;a href=&quot;../topics/http/sessions&quot;&gt;세션 설명서를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="2bf30bf5a21dc3907ce5334c0e5a65db129f6fb4" translate="yes" xml:space="preserve">
          <source>Enabling &lt;a href=&quot;../../ref/databases#persistent-database-connections&quot;&gt;persistent database connections&lt;/a&gt; can result in a nice speed-up when connecting to the database accounts for a significant part of the request processing time.</source>
          <target state="translated">활성화 &lt;a href=&quot;../../ref/databases#persistent-database-connections&quot;&gt;지속적인 데이터베이스 연결은&lt;/a&gt; 요청 처리 시간의 상당 부분에 대한 데이터베이스 계정에 연결할 때 좋은 속도 업이 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="71954675171c44278797f899903b3e2642b83e23" translate="yes" xml:space="preserve">
          <source>Enabling &lt;a href=&quot;../ref/databases#persistent-database-connections&quot;&gt;Persistent connections&lt;/a&gt; can speed up connections to the database accounts for a significant part of the request processing time.</source>
          <target state="translated">&lt;a href=&quot;../ref/databases#persistent-database-connections&quot;&gt;영구 연결을&lt;/a&gt; 사용 하면 요청 처리 시간의 상당 부분을 데이터베이스 계정에 빠르게 연결할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="43b8ca6e4533276ccf1161f4a1ce0109e081a732" translate="yes" xml:space="preserve">
          <source>Enabling &lt;code&gt;redirect_authenticated_user&lt;/code&gt; can also result in a redirect loop when using the &lt;a href=&quot;#django.contrib.auth.decorators.permission_required&quot;&gt;&lt;code&gt;permission_required()&lt;/code&gt;&lt;/a&gt; decorator unless the &lt;code&gt;raise_exception&lt;/code&gt; parameter is used.</source>
          <target state="translated">&lt;code&gt;redirect_authenticated_user&lt;/code&gt; 를 활성화 하면 &lt;code&gt;raise_exception&lt;/code&gt; 매개 변수를 사용 하지 않으면 &lt;a href=&quot;#django.contrib.auth.decorators.permission_required&quot;&gt; &lt;code&gt;permission_required()&lt;/code&gt; &lt;/a&gt; 데코레이터를 사용할 때 리디렉션 루프가 발생할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="52c0ff5fd427daa4a693b2ccb871551aaa56e684" translate="yes" xml:space="preserve">
          <source>Enabling localization for fields with &lt;code&gt;localized_fields&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;localized_fields&lt;/code&gt; 가있는 필드의 현지화 사용</target>
        </trans-unit>
        <trans-unit id="7c44415ef04c9dc27e89d08c69f6c89a1f2df7b8" translate="yes" xml:space="preserve">
          <source>Enabling localization of fields</source>
          <target state="translated">필드 현지화 활성화</target>
        </trans-unit>
        <trans-unit id="24f48cd3340e42cc782120d001737c383d262bd1" translate="yes" xml:space="preserve">
          <source>Enabling messages</source>
          <target state="translated">메시지 활성화</target>
        </trans-unit>
        <trans-unit id="40b4b522e7058574bba73ee6635f391d5ff14ccd" translate="yes" xml:space="preserve">
          <source>Enabling password validation</source>
          <target state="translated">비밀번호 유효성 검사 사용</target>
        </trans-unit>
        <trans-unit id="da39d8e40cf6638ff9704974b2fffd7f905079bf" translate="yes" xml:space="preserve">
          <source>Enabling sessions</source>
          <target state="translated">세션 활성화</target>
        </trans-unit>
        <trans-unit id="ffcf0e1bfe0a923964066354315ae55d3fcb3672" translate="yes" xml:space="preserve">
          <source>Enabling the &lt;a href=&quot;../ref/templates/api#django.template.loaders.cached.Loader&quot;&gt;&lt;code&gt;cached template loader&lt;/code&gt;&lt;/a&gt; often improves performance drastically, as it avoids compiling each template every time it needs to be rendered.</source>
          <target state="translated">&lt;a href=&quot;../ref/templates/api#django.template.loaders.cached.Loader&quot;&gt; &lt;code&gt;cached template loader&lt;/code&gt; &lt;/a&gt; 활성화하면 렌더링 할 때마다 각 템플릿을 컴파일하지 않으므로 성능이 크게 향상됩니다.</target>
        </trans-unit>
        <trans-unit id="e85527a7c01ac6109965c64231b072b0688e9926" translate="yes" xml:space="preserve">
          <source>Enabling the cached template loader often improves performance drastically, as it avoids compiling each template every time it needs to be rendered. See the &lt;a href=&quot;../../ref/templates/api#template-loaders&quot;&gt;template loaders docs&lt;/a&gt; for more information.</source>
          <target state="translated">캐시 된 템플릿 로더를 활성화하면 렌더링 할 때마다 각 템플릿을 컴파일하지 않으므로 성능이 크게 향상됩니다. 자세한 내용은 &lt;a href=&quot;../../ref/templates/api#template-loaders&quot;&gt;템플릿 로더 문서&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="799115455303da7f3d39067dfa0f486ce1f0713a" translate="yes" xml:space="preserve">
          <source>Enabling the sites framework</source>
          <target state="translated">사이트 프레임 워크 활성화</target>
        </trans-unit>
        <trans-unit id="7a308792271b11195677870b19719b9711eafb15" translate="yes" xml:space="preserve">
          <source>Enclosures</source>
          <target state="translated">Enclosures</target>
        </trans-unit>
        <trans-unit id="b2654296c78ff5612050a6b55e48157650da3a15" translate="yes" xml:space="preserve">
          <source>Encodes a bytestring to a base64 string for use in URLs, stripping any trailing equal signs.</source>
          <target state="translated">URL에서 사용하기 위해 바이트 문자열을 base64 문자열로 인코딩하여 후행 등호를 제거합니다.</target>
        </trans-unit>
        <trans-unit id="5821fec7ee87050117e2081a31b307f34868a8ad" translate="yes" xml:space="preserve">
          <source>Encoding</source>
          <target state="translated">Encoding</target>
        </trans-unit>
        <trans-unit id="1cae75f67b9a5d3653fc5bf98e9ce1ed2fc1ad66" translate="yes" xml:space="preserve">
          <source>Encoding is performed by the session store class tied to a model class.</source>
          <target state="translated">인코딩은 모델 클래스에 연결된 세션 저장소 클래스에 의해 수행됩니다.</target>
        </trans-unit>
        <trans-unit id="b7de20e88c7be00748af86ec4625129cb62f7543" translate="yes" xml:space="preserve">
          <source>Enforce running test classes sequentially</source>
          <target state="translated">테스트 클래스를 순차적으로 실행</target>
        </trans-unit>
        <trans-unit id="c1f65ddb75ed7d97e701168af35171410be8f9e7" translate="yes" xml:space="preserve">
          <source>Engine</source>
          <target state="translated">Engine</target>
        </trans-unit>
        <trans-unit id="12f9801d010eb18e980abf817ce7d35a66c7a8da" translate="yes" xml:space="preserve">
          <source>English ordinal suffix for day of the month, 2 characters.</source>
          <target state="translated">한 달의 영어 서수 접미사, 2 자.</target>
        </trans-unit>
        <trans-unit id="9b4cacfea65f0df81bbb70bb79d368cdf7430114" translate="yes" xml:space="preserve">
          <source>Enjoy the free API</source>
          <target state="translated">무료 API를 즐기십시오</target>
        </trans-unit>
        <trans-unit id="ac6dcbd1edf399d18ef1b83f882fa42a8c50157d" translate="yes" xml:space="preserve">
          <source>Ensure that the &lt;code&gt;django.contrib.sites&lt;/code&gt; framework &lt;a href=&quot;sites#enabling-the-sites-framework&quot;&gt;is installed&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;django.contrib.sites&lt;/code&gt; 프레임 워크 &lt;a href=&quot;sites#enabling-the-sites-framework&quot;&gt;가 설치되어&lt;/a&gt; 있는지 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="a9d0d26333dfab249cb912e803a58cf912711deb" translate="yes" xml:space="preserve">
          <source>Ensure that you don&amp;rsquo;t have non-prefixed URL patterns that might collide with an automatically-added language prefix.</source>
          <target state="translated">자동으로 추가되는 언어 접두사와 충돌 할 수있는 접두사가없는 URL 패턴이 없는지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="f5fe186aacd25033e987d7d2a2b2d8b3ba48a8dc" translate="yes" xml:space="preserve">
          <source>Ensure that your 404 template works</source>
          <target state="translated">404 템플릿이 작동하는지 확인</target>
        </trans-unit>
        <trans-unit id="e003ef03051149f4675d37c9f9c6ea748cf9b4b2" translate="yes" xml:space="preserve">
          <source>Ensuring data stored in hidden form fields has not been tampered with.</source>
          <target state="translated">숨겨진 양식 필드에 저장된 데이터가 변경되지 않았는지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="bf229c276c6f0527217bafda1bcd533d80e8835b" translate="yes" xml:space="preserve">
          <source>Enter the admin site</source>
          <target state="translated">관리 사이트를 입력</target>
        </trans-unit>
        <trans-unit id="29de63a391bb614dc4854aefcd579dcff322b235" translate="yes" xml:space="preserve">
          <source>Enter your desired username and press enter.</source>
          <target state="translated">원하는 사용자 이름을 입력하고 Enter를 누르십시오.</target>
        </trans-unit>
        <trans-unit id="1a7e9db17fab5ba33617fdefd7d19a4dba92b592" translate="yes" xml:space="preserve">
          <source>Entry &amp;ldquo;detail&amp;rdquo; page &amp;ndash; permalink page for a single entry.</source>
          <target state="translated">Entry &quot;detail&quot;페이지 &amp;ndash; 단일 항목에 대한 영구 링크 페이지.</target>
        </trans-unit>
        <trans-unit id="ecfb1fec2b4374598ab0844cc33d5f900bf57b03" translate="yes" xml:space="preserve">
          <source>Entry point to add parser arguments to handle command line arguments passed to the command. Custom commands should override this method to add both positional and optional arguments accepted by the command. Calling &lt;code&gt;super()&lt;/code&gt; is not needed when directly subclassing &lt;code&gt;BaseCommand&lt;/code&gt;.</source>
          <target state="translated">명령에 전달 된 명령 행 인수를 처리하기 위해 구문 분석기 인수를 추가하는 시작점. 사용자 지정 명령은이 방법을 재정 의하여 명령에서 허용하는 위치 및 선택적 인수를 모두 추가해야합니다. &lt;code&gt;BaseCommand&lt;/code&gt; 를 직접 서브 클래 싱 할 때는 &lt;code&gt;super()&lt;/code&gt; 호출 할 필요가 없습니다 .</target>
        </trans-unit>
        <trans-unit id="8b896542742a065357c73e3cda28f2c5161db4fc" translate="yes" xml:space="preserve">
          <source>Enum member values are a tuple of arguments to use when constructing the concrete data type. Django supports adding an extra string value to the end of this tuple to be used as the human-readable name, or &lt;code&gt;label&lt;/code&gt;. The &lt;code&gt;label&lt;/code&gt; can be a lazy translatable string. Thus, in most cases, the member value will be a &lt;code&gt;(value, label)&lt;/code&gt; two-tuple. See below for &lt;a href=&quot;#field-choices-enum-subclassing&quot;&gt;an example of subclassing choices&lt;/a&gt; using a more complex data type. If a tuple is not provided, or the last item is not a (lazy) string, the &lt;code&gt;label&lt;/code&gt; is &lt;a href=&quot;#field-choices-enum-auto-label&quot;&gt;automatically generated&lt;/a&gt; from the member name.</source>
          <target state="translated">열거 형 멤버 값은 구체적인 데이터 형식을 구성 할 때 사용할 인수의 튜플입니다. Django는이 튜플 끝에 추가 문자열 값을 추가하여 사람이 읽을 수있는 이름 또는 &lt;code&gt;label&lt;/code&gt; 으로 사용할 수 있도록 지원 합니다. &lt;code&gt;label&lt;/code&gt; 게으른 번역 문자열이 될 수 있습니다. 따라서 대부분의 경우 멤버 값은 &lt;code&gt;(value, label)&lt;/code&gt; 두 튜플입니다. 보다 복잡한 데이터 유형을 사용하는 &lt;a href=&quot;#field-choices-enum-subclassing&quot;&gt;서브 클래 싱 선택의 예는&lt;/a&gt; 아래를 참조하십시오 . 튜플이 제공되지 않거나 마지막 항목이 (게으른) 문자열이 아닌 경우 멤버 이름에서 &lt;code&gt;label&lt;/code&gt; 이 &lt;a href=&quot;#field-choices-enum-auto-label&quot;&gt;자동으로 생성&lt;/a&gt; 됩니다.</target>
        </trans-unit>
        <trans-unit id="3e2bf03a268096db9df6b0465b51da16d0d1910a" translate="yes" xml:space="preserve">
          <source>Enumeration types</source>
          <target state="translated">열거 형</target>
        </trans-unit>
        <trans-unit id="d0d2d65b25c8a65fe873c8d4778ec8d7466d7c4d" translate="yes" xml:space="preserve">
          <source>Enumeration types (e.g. &lt;code&gt;TextChoices&lt;/code&gt; or &lt;code&gt;IntegerChoices&lt;/code&gt;) instances.</source>
          <target state="translated">열거 유형 (예 : &lt;code&gt;TextChoices&lt;/code&gt; 또는 &lt;code&gt;IntegerChoices&lt;/code&gt; ) 인스턴스</target>
        </trans-unit>
        <trans-unit id="05722a0a94d0ab771b3054a95a14401717ebd671" translate="yes" xml:space="preserve">
          <source>Enumeration types do not support &lt;a href=&quot;#field-choices-named-groups&quot;&gt;named groups&lt;/a&gt;.</source>
          <target state="translated">열거 형은 &lt;a href=&quot;#field-choices-named-groups&quot;&gt;명명 된 그룹을&lt;/a&gt; 지원하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="899820d6bb7dd8f201ce3114a20b9edd5eadca86" translate="yes" xml:space="preserve">
          <source>Environment-specific settings</source>
          <target state="translated">환경 별 설정</target>
        </trans-unit>
        <trans-unit id="d2180d5f1d2667ed48d18bce20de1c4557efdc3f" translate="yes" xml:space="preserve">
          <source>Equality operator doesn&amp;rsquo;t check spatial equality</source>
          <target state="translated">평등 연산자는 공간 평등을 확인하지 않습니다</target>
        </trans-unit>
        <trans-unit id="1d596485761d5add25928047878c2cf87248f6ff" translate="yes" xml:space="preserve">
          <source>Equality. Example:</source>
          <target state="translated">평등. 예:</target>
        </trans-unit>
        <trans-unit id="bfd6961ac8cd0324fee27aae000bed2e4593ea3d" translate="yes" xml:space="preserve">
          <source>Equally we could use our mixin with one of the generic views. We can make our own version of &lt;a href=&quot;../../ref/class-based-views/generic-display#django.views.generic.detail.DetailView&quot;&gt;&lt;code&gt;DetailView&lt;/code&gt;&lt;/a&gt; by mixing &lt;code&gt;JSONResponseMixin&lt;/code&gt; with the &lt;code&gt;django.views.generic.detail.BaseDetailView&lt;/code&gt; &amp;ndash; (the &lt;a href=&quot;../../ref/class-based-views/generic-display#django.views.generic.detail.DetailView&quot;&gt;&lt;code&gt;DetailView&lt;/code&gt;&lt;/a&gt; before template rendering behavior has been mixed in):</source>
          <target state="translated">마찬가지로 믹스 인을 일반 뷰 중 하나와 함께 사용할 수 있습니다. 우리는 우리 자신의 버전을 만들 수 있습니다 &lt;a href=&quot;../../ref/class-based-views/generic-display#django.views.generic.detail.DetailView&quot;&gt; &lt;code&gt;DetailView&lt;/code&gt; 를&lt;/a&gt; 혼합하여 &lt;code&gt;JSONResponseMixin&lt;/code&gt; 을 와 &lt;code&gt;django.views.generic.detail.BaseDetailView&lt;/code&gt; -합니다 ( &lt;a href=&quot;../../ref/class-based-views/generic-display#django.views.generic.detail.DetailView&quot;&gt; &lt;code&gt;DetailView&lt;/code&gt; &lt;/a&gt; 템플릿 전에 렌더링 동작이 혼합 된) :</target>
        </trans-unit>
        <trans-unit id="054f9b7adbd87826f0e569062c8223fc7d4fd73d" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;a href=&quot;#django.db.models.functions.Rank&quot;&gt;&lt;code&gt;Rank&lt;/code&gt;&lt;/a&gt; but does not have gaps.</source>
          <target state="translated">&lt;a href=&quot;#django.db.models.functions.Rank&quot;&gt; &lt;code&gt;Rank&lt;/code&gt; &lt;/a&gt; 와 동일 하지만 간격이 없습니다.</target>
        </trans-unit>
        <trans-unit id="73631d7f0356fdbdeaa36f8e5dbad89c6aa15dc4" translate="yes" xml:space="preserve">
          <source>Error handling</source>
          <target state="translated">오류 처리</target>
        </trans-unit>
        <trans-unit id="e7c9e508fdad3eb918b64d9cdee86194dc2bf6b7" translate="yes" xml:space="preserve">
          <source>Error message keys include &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;blank&lt;/code&gt;, &lt;code&gt;invalid&lt;/code&gt;, &lt;code&gt;invalid_choice&lt;/code&gt;, &lt;code&gt;unique&lt;/code&gt;, and &lt;code&gt;unique_for_date&lt;/code&gt;. Additional error message keys are specified for each field in the &lt;a href=&quot;#field-types&quot;&gt;Field types&lt;/a&gt; section below.</source>
          <target state="translated">오류 메시지 키에는 &lt;code&gt;null&lt;/code&gt; , &lt;code&gt;blank&lt;/code&gt; , &lt;code&gt;invalid&lt;/code&gt; , &lt;code&gt;invalid_choice&lt;/code&gt; , &lt;code&gt;unique&lt;/code&gt; 및 &lt;code&gt;unique_for_date&lt;/code&gt; 가 포함 됩니다. 아래 의 &lt;a href=&quot;#field-types&quot;&gt;필드 유형&lt;/a&gt; 섹션 에서 각 필드에 대한 추가 오류 메시지 키가 지정되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="644e9c593a9ecca24a4a97f3e6f7c7d76b1c31ff" translate="yes" xml:space="preserve">
          <source>Error message keys: &lt;code&gt;required&lt;/code&gt;</source>
          <target state="translated">오류 메시지 키 : &lt;code&gt;required&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a79adbe1d1427d81e105f8c7179c73ff061a0bb5" translate="yes" xml:space="preserve">
          <source>Error message keys: &lt;code&gt;required&lt;/code&gt;, &lt;code&gt;invalid&lt;/code&gt;</source>
          <target state="translated">오류 메시지 키 : &lt;code&gt;required&lt;/code&gt; , &lt;code&gt;invalid&lt;/code&gt; 않음</target>
        </trans-unit>
        <trans-unit id="1d5038afff8413f2bff0c221ff6adac550860d58" translate="yes" xml:space="preserve">
          <source>Error message keys: &lt;code&gt;required&lt;/code&gt;, &lt;code&gt;invalid&lt;/code&gt;, &lt;code&gt;incomplete&lt;/code&gt;</source>
          <target state="translated">오류 메시지 키 : &lt;code&gt;required&lt;/code&gt; , &lt;code&gt;invalid&lt;/code&gt; , &lt;code&gt;incomplete&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e70007c93c1cfef205c43d89968dd0d47da150ad" translate="yes" xml:space="preserve">
          <source>Error message keys: &lt;code&gt;required&lt;/code&gt;, &lt;code&gt;invalid&lt;/code&gt;, &lt;code&gt;invalid_date&lt;/code&gt;, &lt;code&gt;invalid_time&lt;/code&gt;</source>
          <target state="translated">오류 메시지 키 : &lt;code&gt;required&lt;/code&gt; , &lt;code&gt;invalid&lt;/code&gt; , &lt;code&gt;invalid_date&lt;/code&gt; , &lt;code&gt;invalid_time&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="33bafb140501080fe19092f94f16941ba6af5c7c" translate="yes" xml:space="preserve">
          <source>Error message keys: &lt;code&gt;required&lt;/code&gt;, &lt;code&gt;invalid&lt;/code&gt;, &lt;code&gt;max_value&lt;/code&gt;, &lt;code&gt;min_value&lt;/code&gt;</source>
          <target state="translated">오류 메시지 키 : &lt;code&gt;required&lt;/code&gt; , &lt;code&gt;invalid&lt;/code&gt; , &lt;code&gt;max_value&lt;/code&gt; , &lt;code&gt;min_value&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e89c2ad7213fda599cbab4454bde5268d62b08f4" translate="yes" xml:space="preserve">
          <source>Error message keys: &lt;code&gt;required&lt;/code&gt;, &lt;code&gt;invalid&lt;/code&gt;, &lt;code&gt;max_value&lt;/code&gt;, &lt;code&gt;min_value&lt;/code&gt;, &lt;code&gt;max_digits&lt;/code&gt;, &lt;code&gt;max_decimal_places&lt;/code&gt;, &lt;code&gt;max_whole_digits&lt;/code&gt;</source>
          <target state="translated">오류 메시지 키 : &lt;code&gt;required&lt;/code&gt; , &lt;code&gt;invalid&lt;/code&gt; , &lt;code&gt;max_value&lt;/code&gt; , &lt;code&gt;min_value&lt;/code&gt; , &lt;code&gt;max_digits&lt;/code&gt; , &lt;code&gt;max_decimal_places&lt;/code&gt; , &lt;code&gt;max_whole_digits&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="25421ddec12a744730d96d703e242516406cf2f7" translate="yes" xml:space="preserve">
          <source>Error message keys: &lt;code&gt;required&lt;/code&gt;, &lt;code&gt;invalid&lt;/code&gt;, &lt;code&gt;missing&lt;/code&gt;, &lt;code&gt;empty&lt;/code&gt;, &lt;code&gt;invalid_image&lt;/code&gt;</source>
          <target state="translated">오류 메시지 키 : &lt;code&gt;required&lt;/code&gt; , &lt;code&gt;invalid&lt;/code&gt; , &lt;code&gt;missing&lt;/code&gt; , &lt;code&gt;empty&lt;/code&gt; , &lt;code&gt;invalid_image&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="034a2ab0cf71e7e73bcf4a72c75f29c823563e38" translate="yes" xml:space="preserve">
          <source>Error message keys: &lt;code&gt;required&lt;/code&gt;, &lt;code&gt;invalid&lt;/code&gt;, &lt;code&gt;missing&lt;/code&gt;, &lt;code&gt;empty&lt;/code&gt;, &lt;code&gt;max_length&lt;/code&gt;</source>
          <target state="translated">오류 메시지 키 : &lt;code&gt;required&lt;/code&gt; , &lt;code&gt;invalid&lt;/code&gt; , &lt;code&gt;missing&lt;/code&gt; , &lt;code&gt;empty&lt;/code&gt; , &lt;code&gt;max_length&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a1055f9a35a1305672ed5041e9a8ad077f65a71e" translate="yes" xml:space="preserve">
          <source>Error message keys: &lt;code&gt;required&lt;/code&gt;, &lt;code&gt;invalid&lt;/code&gt;, &lt;code&gt;overflow&lt;/code&gt;.</source>
          <target state="translated">오류 메시지 키 : &lt;code&gt;required&lt;/code&gt; , &lt;code&gt;invalid&lt;/code&gt; , &lt;code&gt;overflow&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="815f2e18308655c9e84818e293b91dad53e00d11" translate="yes" xml:space="preserve">
          <source>Error message keys: &lt;code&gt;required&lt;/code&gt;, &lt;code&gt;invalid_choice&lt;/code&gt;</source>
          <target state="translated">오류 메시지 키 : &lt;code&gt;required&lt;/code&gt; , &lt;code&gt;invalid_choice&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2c1a7f18421dd40169c4b79efcd7d78b4e84f388" translate="yes" xml:space="preserve">
          <source>Error message keys: &lt;code&gt;required&lt;/code&gt;, &lt;code&gt;invalid_choice&lt;/code&gt;, &lt;code&gt;invalid_list&lt;/code&gt;</source>
          <target state="translated">오류 메시지 키 : &lt;code&gt;required&lt;/code&gt; , &lt;code&gt;invalid_choice&lt;/code&gt; , &lt;code&gt;invalid_list&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="21f173fe77916ce6e2e59f50f2240b50cefe55ca" translate="yes" xml:space="preserve">
          <source>Error message keys: &lt;code&gt;required&lt;/code&gt;, &lt;code&gt;list&lt;/code&gt;, &lt;code&gt;invalid_choice&lt;/code&gt;, &lt;code&gt;invalid_pk_value&lt;/code&gt;</source>
          <target state="translated">오류 메시지 키 : &lt;code&gt;required&lt;/code&gt; , &lt;code&gt;list&lt;/code&gt; , &lt;code&gt;invalid_choice&lt;/code&gt; , &lt;code&gt;invalid_pk_value&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2e52b5fe8383214c45bcaeef65be3fe9c82e064e" translate="yes" xml:space="preserve">
          <source>Error message keys: &lt;code&gt;required&lt;/code&gt;, &lt;code&gt;max_length&lt;/code&gt;, &lt;code&gt;min_length&lt;/code&gt;</source>
          <target state="translated">오류 메시지 키 : &lt;code&gt;required&lt;/code&gt; , &lt;code&gt;max_length&lt;/code&gt; , &lt;code&gt;min_length&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ed2c55d7d1d4d4b54462e06cab6ef3e63f41b795" translate="yes" xml:space="preserve">
          <source>Error messages defined at the &lt;a href=&quot;../../ref/forms/fields#django.forms.Field.error_messages&quot;&gt;&lt;code&gt;form field&lt;/code&gt;&lt;/a&gt; level or at the &lt;a href=&quot;#modelforms-overriding-default-fields&quot;&gt;form Meta&lt;/a&gt; level always take precedence over the error messages defined at the &lt;a href=&quot;../../ref/models/fields#django.db.models.Field.error_messages&quot;&gt;&lt;code&gt;model field&lt;/code&gt;&lt;/a&gt; level.</source>
          <target state="translated">상기 정의 오류 메시지 &lt;a href=&quot;../../ref/forms/fields#django.forms.Field.error_messages&quot;&gt; &lt;code&gt;form field&lt;/code&gt; &lt;/a&gt; 레벨 또는에서 &lt;a href=&quot;#modelforms-overriding-default-fields&quot;&gt;양식을 메타&lt;/a&gt; 수준은 항상 정의 오류 메시지에 우선 &lt;a href=&quot;../../ref/models/fields#django.db.models.Field.error_messages&quot;&gt; &lt;code&gt;model field&lt;/code&gt; &lt;/a&gt; 수준.</target>
        </trans-unit>
        <trans-unit id="c25f6d4974538593d74fc8a9b515e9aacca2854a" translate="yes" xml:space="preserve">
          <source>Error messages defined on &lt;a href=&quot;../../ref/models/fields#django.db.models.Field.error_messages&quot;&gt;&lt;code&gt;model fields&lt;/code&gt;&lt;/a&gt; are only used when the &lt;code&gt;ValidationError&lt;/code&gt; is raised during the &lt;a href=&quot;../../ref/models/instances#validating-objects&quot;&gt;model validation&lt;/a&gt; step and no corresponding error messages are defined at the form level.</source>
          <target state="translated">&lt;a href=&quot;../../ref/models/fields#django.db.models.Field.error_messages&quot;&gt; &lt;code&gt;model fields&lt;/code&gt; &lt;/a&gt; 에 정의 된 오류 메시지 는 &lt;a href=&quot;../../ref/models/instances#validating-objects&quot;&gt;모델 유효성 검사&lt;/a&gt; 단계 에서 &lt;code&gt;ValidationError&lt;/code&gt; 가 발생 하고 해당 오류 메시지가 양식 수준에서 정의되지 않은 경우에만 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="cc46903da8f77602e39b5106b4c3c0830121b2ce" translate="yes" xml:space="preserve">
          <source>Error messages: &lt;code&gt;required&lt;/code&gt;, &lt;code&gt;invalid&lt;/code&gt;</source>
          <target state="translated">오류 메시지 : &lt;code&gt;required&lt;/code&gt; , &lt;code&gt;invalid&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c933b897af92835c337f8c15d042afda6a862cd4" translate="yes" xml:space="preserve">
          <source>Error reporting</source>
          <target state="translated">오류보고</target>
        </trans-unit>
        <trans-unit id="091bcdc3a075191969217351978c7120e66c3bb9" translate="yes" xml:space="preserve">
          <source>Error reporting by email doesn&amp;rsquo;t scale very well</source>
          <target state="translated">이메일로 오류보고가 잘 확장되지 않습니다</target>
        </trans-unit>
        <trans-unit id="5930f76d487b628cabe814b6bf08fb2cef5cf6fa" translate="yes" xml:space="preserve">
          <source>Error reports are really helpful for debugging errors, so it is generally useful to record as much relevant information about those errors as possible. For example, by default Django records the &lt;a href=&quot;https://en.wikipedia.org/wiki/Stack_trace&quot;&gt;full traceback&lt;/a&gt; for the exception raised, each &lt;a href=&quot;https://en.wikipedia.org/wiki/Stack_frame&quot;&gt;traceback frame&lt;/a&gt;&amp;rsquo;s local variables, and the &lt;a href=&quot;../ref/request-response#django.http.HttpRequest&quot;&gt;&lt;code&gt;HttpRequest&lt;/code&gt;&lt;/a&gt;&amp;rsquo;s &lt;a href=&quot;../ref/request-response#httprequest-attributes&quot;&gt;attributes&lt;/a&gt;.</source>
          <target state="translated">오류 보고서는 오류 디버깅에 실제로 도움이되므로 일반적으로 오류에 대한 관련 정보를 최대한 많이 기록하는 것이 좋습니다. 예를 들어, 기본적으로 장고는 기록 &lt;a href=&quot;https://en.wikipedia.org/wiki/Stack_trace&quot;&gt;전체 역 추적&lt;/a&gt; , 각각 제기 된 예외에 대한 &lt;a href=&quot;https://en.wikipedia.org/wiki/Stack_frame&quot;&gt;역 추적 프레임&lt;/a&gt; 의 지역 변수를, 그리고 &lt;a href=&quot;../ref/request-response#django.http.HttpRequest&quot;&gt; &lt;code&gt;HttpRequest&lt;/code&gt; 에&lt;/a&gt; 의 &lt;a href=&quot;../ref/request-response#httprequest-attributes&quot;&gt;속성&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="f05266842a08aa86bb6c0c2ba9682c438aca4a39" translate="yes" xml:space="preserve">
          <source>Error views</source>
          <target state="translated">오류 조회</target>
        </trans-unit>
        <trans-unit id="072bd41bf754ef5147e3351ad808e9b39d15ee67" translate="yes" xml:space="preserve">
          <source>Escapes a string&amp;rsquo;s HTML. Specifically, it makes these replacements:</source>
          <target state="translated">문자열의 HTML을 이스케이프합니다. 특히 다음과 같이 교체됩니다.</target>
        </trans-unit>
        <trans-unit id="99795a321d97625012d4cc2793a4db9c8993a8f4" translate="yes" xml:space="preserve">
          <source>Escapes a value for use in a URL.</source>
          <target state="translated">URL에서 사용할 값을 이스케이프합니다.</target>
        </trans-unit>
        <trans-unit id="081bacb05feac121b0a11f486fde42d84ddcd2e4" translate="yes" xml:space="preserve">
          <source>Escapes characters for use in JavaScript strings. This does &lt;em&gt;not&lt;/em&gt; make the string safe for use in HTML or JavaScript template literals, but does protect you from syntax errors when using templates to generate JavaScript/JSON.</source>
          <target state="translated">JavaScript 문자열에서 사용하기 위해 문자를 이스케이프합니다. 이것은 않습니다 &lt;em&gt;하지&lt;/em&gt; HTML이나 자바 스크립트 템플릿 리터럴에 사용되는 문자열의 안전을 만들지 만, 자바 스크립트 / JSON을 생성하는 템플릿을 사용하는 경우 구문 오류로부터 보호 않습니다.</target>
        </trans-unit>
        <trans-unit id="2799518eaabe0894626afc825e79ca8ce72f1623" translate="yes" xml:space="preserve">
          <source>Escapes the unsafe characters from the path portion of a Uniform Resource Identifier (URI).</source>
          <target state="translated">URI (Uniform Resource Identifier)의 경로 부분에서 안전하지 않은 문자를 피합니다.</target>
        </trans-unit>
        <trans-unit id="e3f5661168cd287de832a0a23973ac35fdf2f4d2" translate="yes" xml:space="preserve">
          <source>Escaping percent signs and underscores in &lt;code&gt;LIKE&lt;/code&gt; statements</source>
          <target state="translated">&lt;code&gt;LIKE&lt;/code&gt; 문 에서 퍼센트 부호 및 밑줄 이스케이프</target>
        </trans-unit>
        <trans-unit id="0b7957a226b11ed2d0338bfb81d7c21199344e65" translate="yes" xml:space="preserve">
          <source>Essentially, Django does two things:</source>
          <target state="translated">본질적으로 Django는 두 가지 작업을 수행합니다.</target>
        </trans-unit>
        <trans-unit id="e09cd8f1120244b4cc85dbc74429b80692595661" translate="yes" xml:space="preserve">
          <source>Essentially, the &lt;code&gt;Vary&lt;/code&gt; HTTP header defines which headers a cache should take into account when building its cache key. Requests with the same path but different header content for headers named in &lt;code&gt;Vary&lt;/code&gt; need to get different cache keys to prevent delivery of wrong content.</source>
          <target state="translated">기본적으로 &lt;code&gt;Vary&lt;/code&gt; HTTP 헤더는 캐시 키를 작성할 때 캐시가 고려해야 할 헤더를 정의합니다. &lt;code&gt;Vary&lt;/code&gt; 로 명명 된 헤더에 대해 경로는 동일하지만 헤더 내용이 다른 요청 은 잘못된 내용이 전달되지 않도록 다른 캐시 키를 가져와야합니다.</target>
        </trans-unit>
        <trans-unit id="287879ba8471d4b806339a94d25d38412ac21d3b" translate="yes" xml:space="preserve">
          <source>Establishing and closing an SMTP connection (or any other network connection, for that matter) is an expensive process. If you have a lot of emails to send, it makes sense to reuse an SMTP connection, rather than creating and destroying a connection every time you want to send an email.</source>
          <target state="translated">SMTP 연결 (또는 그 문제에 대한 다른 네트워크 연결)을 설정하고 닫는 것은 비용이 많이 드는 프로세스입니다. 보낼 전자 메일이 많으면 전자 메일을 보낼 때마다 연결을 만들고 끊지 않고 SMTP 연결을 재사용하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="b83e4e341012948cf2fb9b604a33b40907efac1c" translate="yes" xml:space="preserve">
          <source>Evaluates a variable, and if that variable is &amp;ldquo;true&amp;rdquo; the contents of the block are displayed:</source>
          <target state="translated">변수를 평가하고 해당 변수가 &quot;true&quot;이면 블록의 내용이 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="fb95acc4512c80f8216948471f026d38a16023ae" translate="yes" xml:space="preserve">
          <source>Evaluates the &lt;code&gt;QuerySet&lt;/code&gt; (by performing the query) and returns an iterator (see &lt;a href=&quot;https://www.python.org/dev/peps/pep-0234&quot; id=&quot;index-1&quot;&gt;&lt;strong&gt;PEP 234&lt;/strong&gt;&lt;/a&gt;) over the results. A &lt;code&gt;QuerySet&lt;/code&gt; typically caches its results internally so that repeated evaluations do not result in additional queries. In contrast, &lt;code&gt;iterator()&lt;/code&gt; will read results directly, without doing any caching at the &lt;code&gt;QuerySet&lt;/code&gt; level (internally, the default iterator calls &lt;code&gt;iterator()&lt;/code&gt; and caches the return value). For a &lt;code&gt;QuerySet&lt;/code&gt; which returns a large number of objects that you only need to access once, this can result in better performance and a significant reduction in memory.</source>
          <target state="translated">조회를 수행 하여 &lt;code&gt;QuerySet&lt;/code&gt; 을 평가 하고 결과에 대해 반복자를 리턴합니다 ( &lt;a href=&quot;https://www.python.org/dev/peps/pep-0234&quot; id=&quot;index-1&quot;&gt;&lt;strong&gt;PEP 234&lt;/strong&gt;&lt;/a&gt; 참조 ). &lt;code&gt;QuerySet&lt;/code&gt; 일반적으로 내부적으로 그렇게 반복 평가 추가 쿼리에 포함되지 않는 것으로 그 결과를 캐시합니다. 반대로 &lt;code&gt;iterator()&lt;/code&gt; 는 &lt;code&gt;QuerySet&lt;/code&gt; 레벨 에서 캐싱을 수행하지 않고 결과를 직접 읽습니다 (내부적으로 기본 반복자는 &lt;code&gt;iterator()&lt;/code&gt; 호출 하고 리턴 값을 캐시 함). 한 번만 액세스해야하는 많은 수의 개체를 반환 하는 &lt;code&gt;QuerySet&lt;/code&gt; 의 경우 성능이 향상되고 메모리가 크게 줄어 듭니다 .</target>
        </trans-unit>
        <trans-unit id="2adda768975d7029f15f1b9f17f8447fdb930b3f" translate="yes" xml:space="preserve">
          <source>Evaluating a queryset with &lt;code&gt;select_for_update()&lt;/code&gt; in autocommit mode on backends which support &lt;code&gt;SELECT ... FOR UPDATE&lt;/code&gt; is a &lt;a href=&quot;../exceptions#django.db.transaction.TransactionManagementError&quot;&gt;&lt;code&gt;TransactionManagementError&lt;/code&gt;&lt;/a&gt; error because the rows are not locked in that case. If allowed, this would facilitate data corruption and could easily be caused by calling code that expects to be run in a transaction outside of one.</source>
          <target state="translated">검색어 세트와 평가 &lt;code&gt;select_for_update()&lt;/code&gt; 지원 백엔드에 자동 커밋하여 &lt;code&gt;SELECT ... FOR UPDATE&lt;/code&gt; A는 &lt;a href=&quot;../exceptions#django.db.transaction.TransactionManagementError&quot;&gt; &lt;code&gt;TransactionManagementError&lt;/code&gt; 의&lt;/a&gt; 행이이 경우에 고정되지 않기 때문에 오차. 허용되는 경우 이는 데이터 손상을 촉진하고 외부 트랜잭션에서 실행될 것으로 예상되는 호출 코드로 인해 쉽게 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f88758a6f67c0caf62d19bdc3d8155dae92773ed" translate="yes" xml:space="preserve">
          <source>Evaluating a single-attribute lookup of &lt;code&gt;{{ perms }}&lt;/code&gt; as a boolean is a proxy to &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User.has_module_perms&quot;&gt;&lt;code&gt;User.has_module_perms()&lt;/code&gt;&lt;/a&gt;. For example, to check if the logged-in user has any permissions in the &lt;code&gt;foo&lt;/code&gt; app:</source>
          <target state="translated">부울로 &lt;code&gt;{{ perms }}&lt;/code&gt; 의 단일 속성 조회를 평가하는 것은 &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User.has_module_perms&quot;&gt; &lt;code&gt;User.has_module_perms()&lt;/code&gt; &lt;/a&gt; 의 프록시 입니다. 예를 들어, 로그인 한 사용자에게 &lt;code&gt;foo&lt;/code&gt; 앱 에 대한 권한이 있는지 확인하려면 다음을 수행하십시오 .</target>
        </trans-unit>
        <trans-unit id="d1133bf78b0580da1f366db575a5d6fbe79195ea" translate="yes" xml:space="preserve">
          <source>Evaluating a two-level-attribute lookup as a boolean is a proxy to &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User.has_perm&quot;&gt;&lt;code&gt;User.has_perm()&lt;/code&gt;&lt;/a&gt;. For example, to check if the logged-in user has the permission &lt;code&gt;foo.can_vote&lt;/code&gt;:</source>
          <target state="translated">2 단계 속성 조회를 부울로 평가하는 것은 &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User.has_perm&quot;&gt; &lt;code&gt;User.has_perm()&lt;/code&gt; &lt;/a&gt; 의 프록시 입니다. 예를 들어, 로그인 한 사용자에게 &lt;code&gt;foo.can_vote&lt;/code&gt; 권한이 있는지 확인하려면 다음을 수행하십시오 .</target>
        </trans-unit>
        <trans-unit id="9c2b1a4c6880e872ef577b0c34b8759f737014cd" translate="yes" xml:space="preserve">
          <source>Even if you know there is only one message, you should still iterate over the &lt;code&gt;messages&lt;/code&gt; sequence, because otherwise the message storage will not be cleared for the next request.</source>
          <target state="translated">메시지가 하나만 있음을 알고 있더라도 &lt;code&gt;messages&lt;/code&gt; 시퀀스를 반복해야합니다. 그렇지 않으면 다음 요청에 대해 메시지 스토리지가 지워지지 않기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="e1e489f8009c7015eedaf4af9c0443016c384820" translate="yes" xml:space="preserve">
          <source>Even if you think you are in the advanced use-case situation, &lt;strong&gt;only use defer() when you cannot, at queryset load time, determine if you will need the extra fields or not&lt;/strong&gt;. If you are frequently loading and using a particular subset of your data, the best choice you can make is to normalize your models and put the non-loaded data into a separate model (and database table). If the columns &lt;em&gt;must&lt;/em&gt; stay in the one table for some reason, create a model with &lt;code&gt;Meta.managed = False&lt;/code&gt; (see the &lt;a href=&quot;options#django.db.models.Options.managed&quot;&gt;&lt;code&gt;managed attribute&lt;/code&gt;&lt;/a&gt; documentation) containing just the fields you normally need to load and use that where you might otherwise call &lt;code&gt;defer()&lt;/code&gt;. This makes your code more explicit to the reader, is slightly faster and consumes a little less memory in the Python process.</source>
          <target state="translated">고급 유스 케이스 상황에 있다고 생각하더라도 &lt;strong&gt;쿼리 세트로드시 추가 필드가 필요한지 여부를 판별 할 수없는 경우에만 defer ()를 사용하십시오&lt;/strong&gt; . 데이터의 특정 하위 집합을 자주로드하고 사용하는 경우 모델을 정규화하고로드되지 않은 데이터를 별도의 모델 (및 데이터베이스 테이블)에 배치하는 것이 가장 좋습니다. 열이 경우에 &lt;em&gt;있어야&lt;/em&gt; 어떤 이유로 하나 개의 테이블에 머물와 모델 생성 &lt;code&gt;Meta.managed = False&lt;/code&gt; 합니다 (참조 &lt;a href=&quot;options#django.db.models.Options.managed&quot;&gt; &lt;code&gt;managed attribute&lt;/code&gt; &lt;/a&gt; 은 일반적으로 당신이 그렇지 않으면 부를 수있는 곳 부하 및 사용에 필요한 바로 필드를 포함하는 문서를) &lt;code&gt;defer()&lt;/code&gt; . 이것은 당신의 코드를 독자들에게보다 명백하게 만들고, 약간 더 빠르며, 파이썬 프로세스에서 약간의 메모리를 소비합니다.</target>
        </trans-unit>
        <trans-unit id="6c5a8bd558d017c0183f278904625b9f201223ac" translate="yes" xml:space="preserve">
          <source>Even if your website is available in only one time zone, it&amp;rsquo;s still good practice to store data in UTC in your database. The main reason is Daylight Saving Time (DST). Many countries have a system of DST, where clocks are moved forward in spring and backward in autumn. If you&amp;rsquo;re working in local time, you&amp;rsquo;re likely to encounter errors twice a year, when the transitions happen. (The &lt;a href=&quot;http://pytz.sourceforge.net/&quot;&gt;pytz&lt;/a&gt; documentation discusses &lt;a href=&quot;http://pytz.sourceforge.net/#problems-with-localtime&quot;&gt;these issues&lt;/a&gt; in greater detail.) This probably doesn&amp;rsquo;t matter for your blog, but it&amp;rsquo;s a problem if you over-bill or under-bill your customers by one hour, twice a year, every year. The solution to this problem is to use UTC in the code and use local time only when interacting with end users.</source>
          <target state="translated">웹 사이트가 한 시간대에서만 사용 가능하더라도 데이터베이스에 UTC로 데이터를 저장하는 것이 좋습니다. 주된 이유는 일광 절약 시간제 (DST)입니다. 많은 국가에는 시계가 봄에 앞뒤로 이동하는 DST 시스템이 있습니다. 현지 시간으로 작업하는 경우 전환이 발생할 때 일년에 두 번 오류가 발생할 수 있습니다. ( &lt;a href=&quot;http://pytz.sourceforge.net/&quot;&gt;pytz&lt;/a&gt; 설명서에 &lt;a href=&quot;http://pytz.sourceforge.net/#problems-with-localtime&quot;&gt;이러한 문제&lt;/a&gt; 에 대한 자세한 내용이 설명되어 있습니다.) 블로그에는 문제가되지 않지만 매년 1 시간, 2 년마다 고객에게 과다 청구 또는 과소 청구하는 경우 문제가됩니다. 이 문제에 대한 해결책은 코드에서 UTC를 사용하고 최종 사용자와 상호 작용할 때만 현지 시간을 사용하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="212225fac176022a07c0ae2acb00063a1ec1c7be" translate="yes" xml:space="preserve">
          <source>Even the parsing itself is quite fast. Most of the parsing happens via a single call to a single, short, regular expression.</source>
          <target state="translated">파싱 ​​자체조차도 매우 빠릅니다. 대부분의 구문 분석은 하나의 짧은 정규 표현식에 대한 단일 호출을 통해 발생합니다.</target>
        </trans-unit>
        <trans-unit id="0e3d8f7c1e310b2e909ef932159834ac5ca6ae3a" translate="yes" xml:space="preserve">
          <source>Even though users may use strong passwords, attackers might be able to eavesdrop on their connections. Use &lt;a href=&quot;../security#security-recommendation-ssl&quot;&gt;HTTPS&lt;/a&gt; to avoid sending passwords (or any other sensitive data) over plain HTTP connections because they will be vulnerable to password sniffing.</source>
          <target state="translated">사용자가 강력한 암호를 사용하더라도 공격자는 연결을 도청 할 수 있습니다. 비밀번호 스니핑에 취약하므로 일반 HTTP 연결을 통해 비밀번호 (또는 기타 민감한 데이터)를 보내지 않으려면 &lt;a href=&quot;../security#security-recommendation-ssl&quot;&gt;HTTPS&lt;/a&gt; 를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="fbe337a7f388b3f15d78a8d0c1c5bcb514d31b24" translate="yes" xml:space="preserve">
          <source>Every &lt;code&gt;Field&lt;/code&gt; instance contains several attributes that allow introspecting its behavior. Use these attributes instead of &lt;code&gt;isinstance&lt;/code&gt; checks when you need to write code that depends on a field&amp;rsquo;s functionality. These attributes can be used together with the &lt;a href=&quot;meta#model-meta-field-api&quot;&gt;Model._meta API&lt;/a&gt; to narrow down a search for specific field types. Custom model fields should implement these flags.</source>
          <target state="translated">모든 &lt;code&gt;Field&lt;/code&gt; 인스턴스에는 해당 동작을 검사 할 수있는 몇 가지 속성이 있습니다. 필드 기능에 의존하는 코드를 작성해야 할 때는 &lt;code&gt;isinstance&lt;/code&gt; 검사 대신 이러한 속성을 사용하십시오 . 이러한 속성은 &lt;a href=&quot;meta#model-meta-field-api&quot;&gt;Model._meta API&lt;/a&gt; 와 함께 사용하여 특정 필드 유형에 대한 검색 범위를 좁힐 수 있습니다. 사용자 정의 모델 필드는 이러한 플래그를 구현해야합니다.</target>
        </trans-unit>
        <trans-unit id="8cab4213d5333e4700a03738c0ef52d1d3d03aff" translate="yes" xml:space="preserve">
          <source>Every &lt;code&gt;ModelForm&lt;/code&gt; also has a &lt;code&gt;save()&lt;/code&gt; method. This method creates and saves a database object from the data bound to the form. A subclass of &lt;code&gt;ModelForm&lt;/code&gt; can accept an existing model instance as the keyword argument &lt;code&gt;instance&lt;/code&gt;; if this is supplied, &lt;code&gt;save()&lt;/code&gt; will update that instance. If it&amp;rsquo;s not supplied, &lt;code&gt;save()&lt;/code&gt; will create a new instance of the specified model:</source>
          <target state="translated">모든 &lt;code&gt;ModelForm&lt;/code&gt; 에는 &lt;code&gt;save()&lt;/code&gt; 메소드도 있습니다. 이 메소드는 양식에 바인드 된 데이터에서 데이터베이스 오브젝트를 작성하고 저장합니다. &lt;code&gt;ModelForm&lt;/code&gt; 의 하위 클래스 는 기존 모델 인스턴스를 키워드 인수 &lt;code&gt;instance&lt;/code&gt; . 이것이 제공되면 &lt;code&gt;save()&lt;/code&gt; 가 해당 인스턴스를 업데이트합니다. 제공되지 않으면 &lt;code&gt;save()&lt;/code&gt; 는 지정된 모델의 새 인스턴스를 만듭니다.</target>
        </trans-unit>
        <trans-unit id="6e14299cc96f60aa1c07ca94a21853cb29fed03f" translate="yes" xml:space="preserve">
          <source>Every built in view which needs context data, such as for rendering a template (including &lt;code&gt;TemplateResponseMixin&lt;/code&gt; above), should call &lt;a href=&quot;../../ref/class-based-views/mixins-simple#django.views.generic.base.ContextMixin.get_context_data&quot;&gt;&lt;code&gt;get_context_data()&lt;/code&gt;&lt;/a&gt; passing any data they want to ensure is in there as keyword arguments. &lt;code&gt;get_context_data()&lt;/code&gt; returns a dictionary; in &lt;code&gt;ContextMixin&lt;/code&gt; it returns its keyword arguments, but it is common to override this to add more members to the dictionary. You can also use the &lt;a href=&quot;../../ref/class-based-views/mixins-simple#django.views.generic.base.ContextMixin.extra_context&quot;&gt;&lt;code&gt;extra_context&lt;/code&gt;&lt;/a&gt; attribute.</source>
          <target state="translated">템플릿 렌더링 (예 : &lt;code&gt;TemplateResponseMixin&lt;/code&gt; 포함)과 같이 컨텍스트 데이터가 필요한 모든 내장보기 는 &lt;a href=&quot;../../ref/class-based-views/mixins-simple#django.views.generic.base.ContextMixin.get_context_data&quot;&gt; &lt;code&gt;get_context_data()&lt;/code&gt; &lt;/a&gt; 를 호출 하여 원하는 데이터를 전달하여 키워드 인수로 포함해야합니다. &lt;code&gt;get_context_data()&lt;/code&gt; 는 사전을 반환합니다. 에 &lt;code&gt;ContextMixin&lt;/code&gt; 그것의 키워드 인수를 반환하지만, 사전에 더 많은 회원을 추가하려면이를 오버라이드 (override)하는 것이 일반적입니다. &lt;a href=&quot;../../ref/class-based-views/mixins-simple#django.views.generic.base.ContextMixin.extra_context&quot;&gt; &lt;code&gt;extra_context&lt;/code&gt; &lt;/a&gt; 속성을 사용할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="5abebf72cfdd05f18339a23f0931f3ed011cb582" translate="yes" xml:space="preserve">
          <source>Every built in view which returns a &lt;a href=&quot;../../ref/template-response#django.template.response.TemplateResponse&quot;&gt;&lt;code&gt;TemplateResponse&lt;/code&gt;&lt;/a&gt; will call the &lt;a href=&quot;../../ref/class-based-views/mixins-simple#django.views.generic.base.TemplateResponseMixin.render_to_response&quot;&gt;&lt;code&gt;render_to_response()&lt;/code&gt;&lt;/a&gt; method that &lt;code&gt;TemplateResponseMixin&lt;/code&gt; provides. Most of the time this will be called for you (for instance, it is called by the &lt;code&gt;get()&lt;/code&gt; method implemented by both &lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.TemplateView&quot;&gt;&lt;code&gt;TemplateView&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../ref/class-based-views/generic-display#django.views.generic.detail.DetailView&quot;&gt;&lt;code&gt;DetailView&lt;/code&gt;&lt;/a&gt;); similarly, it&amp;rsquo;s unlikely that you&amp;rsquo;ll need to override it, although if you want your response to return something not rendered via a Django template then you&amp;rsquo;ll want to do it. For an example of this, see the &lt;a href=&quot;#jsonresponsemixin-example&quot;&gt;JSONResponseMixin example&lt;/a&gt;.</source>
          <target state="translated">모든는 반환 뷰에 내장 &lt;a href=&quot;../../ref/template-response#django.template.response.TemplateResponse&quot;&gt; &lt;code&gt;TemplateResponse&lt;/code&gt; 가&lt;/a&gt; 부르는 것이다 &lt;a href=&quot;../../ref/class-based-views/mixins-simple#django.views.generic.base.TemplateResponseMixin.render_to_response&quot;&gt; &lt;code&gt;render_to_response()&lt;/code&gt; &lt;/a&gt; 것을 방법 &lt;code&gt;TemplateResponseMixin&lt;/code&gt; 가 제공합니다. 대부분이 당신을 위해 호출 될 것입니다 (예를 들어, &lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.TemplateView&quot;&gt; &lt;code&gt;TemplateView&lt;/code&gt; &lt;/a&gt; 와 &lt;a href=&quot;../../ref/class-based-views/generic-display#django.views.generic.detail.DetailView&quot;&gt; &lt;code&gt;DetailView&lt;/code&gt; &lt;/a&gt; 모두에 의해 구현 된 &lt;code&gt;get()&lt;/code&gt; 메소드에 의해 호출됩니다 ). 마찬가지로, 장고 템플릿을 통해 렌더링되지 않은 것을 반환하기 위해 응답을 원한다면 그렇게 할 필요가 있지만 재정의해야 할 가능성은 없습니다. 이에 대한 예제는 &lt;a href=&quot;#jsonresponsemixin-example&quot;&gt;JSONResponseMixin 예제를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="838377ef62b2a13f1fbf0182fad7718968983771" translate="yes" xml:space="preserve">
          <source>Every context contains &lt;code&gt;True&lt;/code&gt;, &lt;code&gt;False&lt;/code&gt; and &lt;code&gt;None&lt;/code&gt;. As you would expect, these variables resolve to the corresponding Python objects.</source>
          <target state="translated">모든 컨텍스트에는 &lt;code&gt;True&lt;/code&gt; , &lt;code&gt;False&lt;/code&gt; 및 &lt;code&gt;None&lt;/code&gt; 이 포함 됩니다. 예상 한대로이 변수는 해당 Python 객체로 확인됩니다.</target>
        </trans-unit>
        <trans-unit id="cc165a96655702c427116e9a4000f936b0928cff" translate="yes" xml:space="preserve">
          <source>Every field may not have the same relevance in a query, so you can set weights of various vectors before you combine them:</source>
          <target state="translated">쿼리에서 모든 필드의 관련성이 같지 않을 수 있으므로 다양한 벡터를 결합하기 전에 가중치를 설정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="814f57a7e3d59960cd808a38ef7f0be36d102202" translate="yes" xml:space="preserve">
          <source>Every form that uses this field will have these methods run before anything else can be done with the field&amp;rsquo;s data. This is cleaning that is specific to this type of field, regardless of how it is subsequently used.</source>
          <target state="translated">이 필드를 사용하는 모든 양식은 필드의 데이터로 다른 작업을 수행하기 전에 이러한 메소드를 실행합니다. 이것은 나중에 사용되는 방법에 관계없이이 유형의 분야에 특정한 청소입니다.</target>
        </trans-unit>
        <trans-unit id="febded2a5a77188a733c6e2df64beb637d1d5f06" translate="yes" xml:space="preserve">
          <source>Every point of the other geometry is a point of this geometry.</source>
          <target state="translated">다른 지오메트리의 모든 지점은이 지오메트리의 지점입니다.</target>
        </trans-unit>
        <trans-unit id="d4fd9230a184529361a8aa2b1f74ae7d996efd91" translate="yes" xml:space="preserve">
          <source>Every test case in a &lt;code&gt;django.test.*TestCase&lt;/code&gt; instance has access to an instance of a Django test client. This client can be accessed as &lt;code&gt;self.client&lt;/code&gt;. This client is recreated for each test, so you don&amp;rsquo;t have to worry about state (such as cookies) carrying over from one test to another.</source>
          <target state="translated">&lt;code&gt;django.test.*TestCase&lt;/code&gt; 인스턴스의 모든 테스트 케이스 는 Django 테스트 클라이언트 인스턴스에 액세스 할 수 있습니다. 이 클라이언트는 &lt;code&gt;self.client&lt;/code&gt; 로 액세스 할 수 있습니다 . 이 클라이언트는 각 테스트마다 다시 작성되므로 한 테스트에서 다른 테스트로 이월되는 상태 (쿠키 등)에 대해 걱정할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="84522da20960008d9269f89064583fa5016e208a" translate="yes" xml:space="preserve">
          <source>Everything should pass. If it doesn&amp;rsquo;t, make sure you correctly added the function to the correct file.</source>
          <target state="translated">모든 것이 통과되어야합니다. 그렇지 않은 경우 올바른 파일에 기능을 올바르게 추가했는지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="8ded99c8d5128f39a1c73fd90b9c2d8406aebbdc" translate="yes" xml:space="preserve">
          <source>Everything you need to know about Django.</source>
          <target state="translated">장고에 대해 알아야 할 모든 것.</target>
        </trans-unit>
        <trans-unit id="9295771949fc387c8fcf92dd81a4a7538ac618f8" translate="yes" xml:space="preserve">
          <source>Exact match is implied here:</source>
          <target state="translated">정확한 일치는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="37e84456a4b965872015a2d820a64fe49edfcfc5" translate="yes" xml:space="preserve">
          <source>Exact match. If the value provided for comparison is &lt;code&gt;None&lt;/code&gt;, it will be interpreted as an SQL &lt;code&gt;NULL&lt;/code&gt; (see &lt;a href=&quot;#std:fieldlookup-isnull&quot;&gt;&lt;code&gt;isnull&lt;/code&gt;&lt;/a&gt; for more details).</source>
          <target state="translated">정확히 일치. 비교를 위해 제공된 값이 &lt;code&gt;None&lt;/code&gt; 이면 SQL &lt;code&gt;NULL&lt;/code&gt; 로 해석 됩니다 ( 자세한 내용 은 &lt;a href=&quot;#std:fieldlookup-isnull&quot;&gt; &lt;code&gt;isnull&lt;/code&gt; &lt;/a&gt; 참조).</target>
        </trans-unit>
        <trans-unit id="0f01ed56a1e32a05e5ef96e4d779f34784af9a96" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Example</target>
        </trans-unit>
        <trans-unit id="ee3bc6da95e46e47e40c64bd6f76e0cb531a9597" translate="yes" xml:space="preserve">
          <source>Example (Unix Bash shell):</source>
          <target state="translated">예 (Unix Bash shell) :</target>
        </trans-unit>
        <trans-unit id="830e9bb39dc11d651c286095d97e45f79c2b0e49" translate="yes" xml:space="preserve">
          <source>Example (Windows shell):</source>
          <target state="translated">예 (Windows 셸) :</target>
        </trans-unit>
        <trans-unit id="718077cd1b2df7e94503d45c26299c5d0631a6ab" translate="yes" xml:space="preserve">
          <source>Example URL patterns:</source>
          <target state="translated">URL 패턴 예 :</target>
        </trans-unit>
        <trans-unit id="4ddfbe0d0e205cc34c63998eb2f3530c73357994" translate="yes" xml:space="preserve">
          <source>Example ini configuration file usage:</source>
          <target state="translated">ini 구성 파일 사용법 예 :</target>
        </trans-unit>
        <trans-unit id="e55c1df3f1be39c6d4a0ad98f09af1bb75f240e4" translate="yes" xml:space="preserve">
          <source>Example ini configuration file:</source>
          <target state="translated">ini 구성 파일 예 :</target>
        </trans-unit>
        <trans-unit id="68446ab28449935e5edad544cffc5513c9ecfec5" translate="yes" xml:space="preserve">
          <source>Example of a full DSN string:</source>
          <target state="translated">전체 DSN 문자열의 예 :</target>
        </trans-unit>
        <trans-unit id="544998f7dc15d439cd9df97040aa14b1d77d294a" translate="yes" xml:space="preserve">
          <source>Example of an Easy Connect string:</source>
          <target state="translated">Easy Connect 문자열의 예 :</target>
        </trans-unit>
        <trans-unit id="9286acafb078f79b84d482451216c995453f2280" translate="yes" xml:space="preserve">
          <source>Example output</source>
          <target state="translated">출력 예</target>
        </trans-unit>
        <trans-unit id="44bccea698ca2be671739b7a3fcd4d079ab17ab8" translate="yes" xml:space="preserve">
          <source>Example purposes only!</source>
          <target state="translated">예제 목적으로 만!</target>
        </trans-unit>
        <trans-unit id="cfab20a31ea6ebe2113f2ab4004ec8c0183bc431" translate="yes" xml:space="preserve">
          <source>Example requests:</source>
          <target state="translated">요청 예 :</target>
        </trans-unit>
        <trans-unit id="27bc36e0446b72c6d8b0d1c7963a0c60bb412de6" translate="yes" xml:space="preserve">
          <source>Example to retrieve entries in the second quarter (April 1 to June 30):</source>
          <target state="translated">2 분기 (4 월 1 일 ~ 6 월 30 일)에 항목을 검색하는 예 :</target>
        </trans-unit>
        <trans-unit id="1ae307cf1c7af477bc7be93199f6087908b13cc0" translate="yes" xml:space="preserve">
          <source>Example tuple for &lt;code&gt;en_IN&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;en_IN&lt;/code&gt; 의 튜플 예 :</target>
        </trans-unit>
        <trans-unit id="861245b8779c3c0a240081e66f72046983ca7d16" translate="yes" xml:space="preserve">
          <source>Example usage</source>
          <target state="translated">사용법 예</target>
        </trans-unit>
        <trans-unit id="5ab7721397827b925456d2a147cb5704105a62a7" translate="yes" xml:space="preserve">
          <source>Example usage:</source>
          <target state="translated">사용법 예 :</target>
        </trans-unit>
        <trans-unit id="bd6bf677fc2c19ecd5c9a4987ff244376dcf1f86" translate="yes" xml:space="preserve">
          <source>Example values for &lt;a href=&quot;#django.contrib.sitemaps.Sitemap.priority&quot;&gt;&lt;code&gt;priority&lt;/code&gt;&lt;/a&gt;: &lt;code&gt;0.4&lt;/code&gt;, &lt;code&gt;1.0&lt;/code&gt;. The default priority of a page is &lt;code&gt;0.5&lt;/code&gt;. See the &lt;a href=&quot;https://www.sitemaps.org/protocol.html#prioritydef&quot;&gt;sitemaps.org documentation&lt;/a&gt; for more.</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.sitemaps.Sitemap.priority&quot;&gt; &lt;code&gt;priority&lt;/code&gt; &lt;/a&gt; 값의 예 : &lt;code&gt;0.4&lt;/code&gt; , &lt;code&gt;1.0&lt;/code&gt; . 페이지의 기본 우선 순위는 &lt;code&gt;0.5&lt;/code&gt; 입니다. 자세한 내용은 &lt;a href=&quot;https://www.sitemaps.org/protocol.html#prioritydef&quot;&gt;sitemaps.org 설명서&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">Example:</target>
        </trans-unit>
        <trans-unit id="4abec658fdfd9e9a464f07db749b7dcf5b090fff" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;&quot;/minfo/music/bands/the_beatles/?print=true&quot;&lt;/code&gt;</source>
          <target state="translated">예 : &lt;code&gt;&quot;/minfo/music/bands/the_beatles/?print=true&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e0e421429dc643e0f735f688ff2d3ed31efc05c5" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;&quot;/music/bands/the_beatles/&quot;&lt;/code&gt;</source>
          <target state="translated">예 : &lt;code&gt;&quot;/music/bands/the_beatles/&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3048949b449ad0bad266e1c13cd317d901b918eb" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;&quot;/music/bands/the_beatles/?print=true&quot;&lt;/code&gt;</source>
          <target state="translated">예 : &lt;code&gt;&quot;/music/bands/the_beatles/?print=true&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1448bb2dcf37d023890aa1c988027f69aa5be549" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;&quot;/static/&quot;&lt;/code&gt; or &lt;code&gt;&quot;http://static.example.com/&quot;&lt;/code&gt;</source>
          <target state="translated">예 : &lt;code&gt;&quot;/static/&quot;&lt;/code&gt; 또는 &lt;code&gt;&quot;http://static.example.com/&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7a158e625f2490c15b070e880c2742cac84d61ba" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;&quot;/var/www/example.com/media/&quot;&lt;/code&gt;</source>
          <target state="translated">예 : &lt;code&gt;&quot;/var/www/example.com/media/&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="674ecfac8279532bba06cb9b28401fcad49da205" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;&quot;/var/www/example.com/static/&quot;&lt;/code&gt;</source>
          <target state="translated">예 : &lt;code&gt;&quot;/var/www/example.com/static/&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="901b1775848a8c936123642ddfbc15cb328f22d8" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;&quot;127.0.0.1:8000&quot;&lt;/code&gt;</source>
          <target state="translated">예 : &lt;code&gt;&quot;127.0.0.1:8000&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6637efee609c9b823f9e22e77caa9c24efbce712" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;&quot;http://media.example.com/&quot;&lt;/code&gt;</source>
          <target state="translated">예 : &lt;code&gt;&quot;http://media.example.com/&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="66fd61cbedb1c0ed762d4fa6da3ef9a09345b041" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;'fav_color' in request.session&lt;/code&gt;</source>
          <target state="translated">예 : &lt;code&gt;'fav_color' in request.session&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2232e75e309ae667ab6470ec0fd2380b7137dd39" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;['foo.html', 'path/to/bar.html']&lt;/code&gt;</source>
          <target state="translated">예 : &lt;code&gt;['foo.html', 'path/to/bar.html']&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="26a5d71ed4ad77f4763a621ca8e293ce771f5765" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;del request.session['fav_color']&lt;/code&gt;. This raises &lt;code&gt;KeyError&lt;/code&gt; if the given &lt;code&gt;key&lt;/code&gt; isn&amp;rsquo;t already in the session.</source>
          <target state="translated">예 : &lt;code&gt;del request.session['fav_color']&lt;/code&gt; 입니다. 이 제기 &lt;code&gt;KeyError&lt;/code&gt; 를를 지정한 경우 &lt;code&gt;key&lt;/code&gt; 세션에없는.</target>
        </trans-unit>
        <trans-unit id="1afe81d1569194467a9e77bc63ab878055b15243" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;fav_color = request.session.get('fav_color', 'red')&lt;/code&gt;</source>
          <target state="translated">예 : &lt;code&gt;fav_color = request.session.get('fav_color', 'red')&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c6b75cd9eec29e2fa11559ca64410670d455e31f" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;fav_color = request.session.pop('fav_color', 'blue')&lt;/code&gt;</source>
          <target state="translated">예 : &lt;code&gt;fav_color = request.session.pop('fav_color', 'blue')&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ad520d77a5091665d30d5ad78a18889b6fa202da" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;fav_color = request.session['fav_color']&lt;/code&gt;</source>
          <target state="translated">예 : &lt;code&gt;fav_color = request.session['fav_color']&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a743ca139173ed672e946091b7fdc945370a9ef8" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;request.session['fav_color'] = 'blue'&lt;/code&gt;</source>
          <target state="translated">예 : &lt;code&gt;request.session['fav_color'] = 'blue'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="59f981e918510438b42c8cc8b1ee243eefe83ad2" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;{'foo': 123}&lt;/code&gt;</source>
          <target state="translated">예 : &lt;code&gt;{'foo': 123}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="eb01bf04c9a0e8a71c45816513df424f1c7ffedb" translate="yes" xml:space="preserve">
          <source>Examples</source>
          <target state="translated">Examples</target>
        </trans-unit>
        <trans-unit id="769914c627afb45406c3bf3ee2b71d5c808b0276" translate="yes" xml:space="preserve">
          <source>Examples (those after the first will only work on PostgreSQL):</source>
          <target state="translated">예제 (첫 번째 이후는 PostgreSQL에서만 작동합니다) :</target>
        </trans-unit>
        <trans-unit id="80f00b6a8f7e561eaf3206a451011d467b1bef0b" translate="yes" xml:space="preserve">
          <source>Examples (when &amp;lsquo;now&amp;rsquo; is 17 Feb 2007 16:30:00):</source>
          <target state="translated">예 ( '지금'이 2007 년 2 월 17 일 16:30:00 인 경우) :</target>
        </trans-unit>
        <trans-unit id="63d3c77fab43af705105a71ea0d3c62c1a4fec72" translate="yes" xml:space="preserve">
          <source>Examples (when &amp;lsquo;today&amp;rsquo; is 17 Feb 2007):</source>
          <target state="translated">예 ( '오늘'이 2007 년 2 월 17 일인 경우) :</target>
        </trans-unit>
        <trans-unit id="2676bb86273e80946e94a560787333f069255095" translate="yes" xml:space="preserve">
          <source>Examples are the same as for &lt;a href=&quot;#django.contrib.postgres.aggregates.ArrayAgg.ordering&quot;&gt;&lt;code&gt;ArrayAgg.ordering&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">예는 &lt;a href=&quot;#django.contrib.postgres.aggregates.ArrayAgg.ordering&quot;&gt; &lt;code&gt;ArrayAgg.ordering&lt;/code&gt; &lt;/a&gt; 과 동일 합니다.</target>
        </trans-unit>
        <trans-unit id="5d679a1bfd09bffa49249ebfc0da6c5751df2b5d" translate="yes" xml:space="preserve">
          <source>Examples of each of these methods are provided below.</source>
          <target state="translated">이러한 각 방법의 예는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="e552f4ff74f5c9b402c0ac5a84814156fb03c7f3" translate="yes" xml:space="preserve">
          <source>Examples of how these are combined into editing views can be found at the documentation on &lt;a href=&quot;generic-editing&quot;&gt;Generic editing views&lt;/a&gt;.</source>
          <target state="translated">이것들이 편집 뷰로 결합되는 방법의 예는 &lt;a href=&quot;generic-editing&quot;&gt;일반 편집 뷰&lt;/a&gt; 문서에서 찾을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="af9f7f41e63f57592e364cfc474ca225a505321a" translate="yes" xml:space="preserve">
          <source>Examples of model relationship API usage</source>
          <target state="translated">모델 관계 API 사용 예</target>
        </trans-unit>
        <trans-unit id="77e71bb9ca949ae82bf5265846d018ec415f78b3" translate="yes" xml:space="preserve">
          <source>Examples of using different ports and addresses</source>
          <target state="translated">다른 포트와 주소를 사용하는 예</target>
        </trans-unit>
        <trans-unit id="573199b07f4a7e07cec7a264bef08ffde99fe40a" translate="yes" xml:space="preserve">
          <source>Examples of using the different keys when creating rasters can be found in the documentation of the corresponding attributes and methods of the &lt;a href=&quot;#django.contrib.gis.gdal.GDALRaster&quot;&gt;&lt;code&gt;GDALRaster&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#django.contrib.gis.gdal.GDALBand&quot;&gt;&lt;code&gt;GDALBand&lt;/code&gt;&lt;/a&gt; classes.</source>
          <target state="translated">래스터를 만들 때 다른 키를 사용하는 예는 &lt;a href=&quot;#django.contrib.gis.gdal.GDALRaster&quot;&gt; &lt;code&gt;GDALRaster&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#django.contrib.gis.gdal.GDALBand&quot;&gt; &lt;code&gt;GDALBand&lt;/code&gt; &lt;/a&gt; 클래스 의 해당 속성 및 메서드 설명서에서 찾을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="fb3447b632f6a431215776dcf254a01001a40c4f" translate="yes" xml:space="preserve">
          <source>Examples:</source>
          <target state="translated">Examples:</target>
        </trans-unit>
        <trans-unit id="130647020df08e0c6d075ab91d12bbeaf0d9c689" translate="yes" xml:space="preserve">
          <source>Exception class indicating a problem while executing a management command.</source>
          <target state="translated">관리 명령을 실행하는 동안 문제를 나타내는 예외 클래스.</target>
        </trans-unit>
        <trans-unit id="b4b0dfe7027c1d349ba13a7e79558e44ec341bd8" translate="yes" xml:space="preserve">
          <source>Exception handling</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd3dfbe79fda3a9d92de67b1bd4f1dc9f60ab723" translate="yes" xml:space="preserve">
          <source>Exceptions</source>
          <target state="translated">Exceptions</target>
        </trans-unit>
        <trans-unit id="979977b0dc6898f6b99545124ffdccce5f51ee4c" translate="yes" xml:space="preserve">
          <source>Exceptions provided by the &lt;code&gt;django.test&lt;/code&gt; package.</source>
          <target state="translated">&lt;code&gt;django.test&lt;/code&gt; 패키지에서 제공하는 예외 .</target>
        </trans-unit>
        <trans-unit id="637c2d4ceffcb049dfd98479442ba6e5e51bc245" translate="yes" xml:space="preserve">
          <source>Excludes loading the fixtures from the given applications and/or models (in the form of &lt;code&gt;app_label&lt;/code&gt; or &lt;code&gt;app_label.ModelName&lt;/code&gt;). Use the option multiple times to exclude more than one app or model.</source>
          <target state="translated">주어진 애플리케이션 및 / 또는 모델 ( &lt;code&gt;app_label&lt;/code&gt; 또는 &lt;code&gt;app_label.ModelName&lt;/code&gt; 형식)에서 조명기로드를 제외합니다 . 이 옵션을 여러 번 사용하여 둘 이상의 앱 또는 모델을 제외하십시오.</target>
        </trans-unit>
        <trans-unit id="e224f3054a528b9a8ad37aa70ee3bafba104e86e" translate="yes" xml:space="preserve">
          <source>Excludes tests &lt;a href=&quot;../topics/testing/tools#topics-tagging-tests&quot;&gt;marked with the specified tags&lt;/a&gt;. May be specified multiple times and combined with &lt;a href=&quot;#cmdoption-test-tag&quot;&gt;&lt;code&gt;test --tag&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../topics/testing/tools#topics-tagging-tests&quot;&gt;지정된 태그로 표시된&lt;/a&gt; 테스트를 제외 합니다 . 여러 번 지정하고 &lt;a href=&quot;#cmdoption-test-tag&quot;&gt; &lt;code&gt;test --tag&lt;/code&gt; &lt;/a&gt; 와 결합 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="0a7127cf360079d11d23a48c161b510f1596728e" translate="yes" xml:space="preserve">
          <source>Excluding a related item works as you would expect, too (although the SQL involved is a little complex):</source>
          <target state="translated">관련된 항목을 제외하면 예상대로 작동합니다 (관련 SQL은 약간 복잡하지만).</target>
        </trans-unit>
        <trans-unit id="f9e9d0c5641e5220429dd5b410450d6a9a678599" translate="yes" xml:space="preserve">
          <source>Executes the SQL statement passed in, with parameters if supplied. This is a wrapper around the normal database cursors that allows capture of the SQL to a &lt;code&gt;.sql&lt;/code&gt; file if the user wishes.</source>
          <target state="translated">제공된 경우 매개 변수와 함께 전달 된 SQL 문을 실행합니다. 이것은 사용자가 원할 경우 SQL을 &lt;code&gt;.sql&lt;/code&gt; 파일 로 캡처 할 수있는 일반 데이터베이스 커서 주위의 랩퍼 입니다.</target>
        </trans-unit>
        <trans-unit id="89a2df8a7a14bd458b9ce8bd658118c5a982cc19" translate="yes" xml:space="preserve">
          <source>Executing custom SQL</source>
          <target state="translated">사용자 지정 SQL 실행</target>
        </trans-unit>
        <trans-unit id="00ee02034434ef9dd4163fe8af361d4c52e32055" translate="yes" xml:space="preserve">
          <source>Executing custom SQL directly</source>
          <target state="translated">사용자 지정 SQL을 직접 실행</target>
        </trans-unit>
        <trans-unit id="6052e7f00cb0087825a4bffdb83956e8eb1e628c" translate="yes" xml:space="preserve">
          <source>Executing database queries with the ORM at import time in models modules will also trigger this exception. The ORM cannot function properly until all models are available.</source>
          <target state="translated">모델 모듈에서 가져 오기시 ORM을 사용하여 데이터베이스 쿼리를 실행하면이 예외가 트리거됩니다. 모든 모델을 사용할 수있을 때까지 ORM이 제대로 작동하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="b2beefb2d0c22d3314ba644a1b0d378cbe4fa9b0" translate="yes" xml:space="preserve">
          <source>Execution of the model mapping will cease upon the first error encountered. The default value (&lt;code&gt;False&lt;/code&gt;) behavior is to attempt to continue.</source>
          <target state="translated">첫 번째 오류가 발생하면 모델 매핑 실행이 중단됩니다. 기본값 ( &lt;code&gt;False&lt;/code&gt; ) 동작은 계속 시도하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="945e7b04d14c6db74d71e5bc18f1c281db5f3f58" translate="yes" xml:space="preserve">
          <source>Expanding the accepted referers beyond the current host or cookie domain can be done with the &lt;a href=&quot;settings#std:setting-CSRF_TRUSTED_ORIGINS&quot;&gt;&lt;code&gt;CSRF_TRUSTED_ORIGINS&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">&lt;a href=&quot;settings#std:setting-CSRF_TRUSTED_ORIGINS&quot;&gt; &lt;code&gt;CSRF_TRUSTED_ORIGINS&lt;/code&gt; &lt;/a&gt; 설정 을 사용하면 현재 호스트 또는 쿠키 도메인을 넘어 승인 된 참조 자를 확장 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d630fe6c0dbe56806d5eee2d891d3f4097da07d4" translate="yes" xml:space="preserve">
          <source>Expects data in the format &lt;code&gt;&quot;DD HH:MM:SS.uuuuuu&quot;&lt;/code&gt; or as specified by ISO 8601 (e.g. &lt;code&gt;P4DT1H15M20S&lt;/code&gt; which is equivalent to &lt;code&gt;4 1:15:20&lt;/code&gt;) or PostgreSQL&amp;rsquo;s day-time interval format (e.g. &lt;code&gt;3 days 04:05:06&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;&quot;DD HH:MM:SS.uuuuuu&quot;&lt;/code&gt; 형식 또는 ISO 8601 (예 : &lt;code&gt;4 1:15:20&lt;/code&gt; 에 해당하는 P4DT1H15M20S ) 또는 PostgreSQL의 주간-시간 간격 형식 (예 : &lt;code&gt;3 days 04:05:06&lt;/code&gt; &lt;code&gt;P4DT1H15M20S&lt;/code&gt; 으로 지정된 데이터가 필요합니다 . 06 ).</target>
        </trans-unit>
        <trans-unit id="02badd5c782845228bccae7b87567640893eea55" translate="yes" xml:space="preserve">
          <source>Expiration of messages</source>
          <target state="translated">메시지 만료</target>
        </trans-unit>
        <trans-unit id="825e83f1ae786ec7612f738560afd76d510d34f2" translate="yes" xml:space="preserve">
          <source>Expiration policies for these cookies are not followed. If you want a cookie to expire, either delete it manually or create a new &lt;code&gt;Client&lt;/code&gt; instance (which will effectively delete all cookies).</source>
          <target state="translated">이 쿠키에 대한 만료 정책은 따르지 않습니다. 쿠키가 만료되도록하려면 쿠키를 수동으로 삭제하거나 새 &lt;code&gt;Client&lt;/code&gt; 인스턴스를 작성하십시오 (모든 쿠키를 효과적으로 삭제함).</target>
        </trans-unit>
        <trans-unit id="96c25ea7982a1802b1f2648ff749f6154cf0fd3e" translate="yes" xml:space="preserve">
          <source>Expired sessions are not available to a user, however, they may still be stored in the database until the &lt;a href=&quot;../../ref/django-admin#django-admin-clearsessions&quot;&gt;&lt;code&gt;clearsessions&lt;/code&gt;&lt;/a&gt; management command is run.</source>
          <target state="translated">만료 된 세션은 사용자가 사용할 수 없지만 &lt;a href=&quot;../../ref/django-admin#django-admin-clearsessions&quot;&gt; &lt;code&gt;clearsessions&lt;/code&gt; &lt;/a&gt; 관리 명령이 실행될 때까지 데이터베이스에 계속 저장 될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="8b0e56471ca8bdbedccf8f159a012f178e4bafee" translate="yes" xml:space="preserve">
          <source>Explains how to structure and write database migrations for different scenarios you might encounter.</source>
          <target state="translated">발생할 수있는 다양한 시나리오에 대해 데이터베이스 마이그레이션을 구조화하고 작성하는 방법을 설명합니다.</target>
        </trans-unit>
        <trans-unit id="d94592778e731505956708d49b7db2ad5a88dd27" translate="yes" xml:space="preserve">
          <source>Explicitly importing each model rather than using &lt;code&gt;from .models import *&lt;/code&gt; has the advantages of not cluttering the namespace, making code more readable, and keeping code analysis tools useful.</source>
          <target state="translated">&lt;code&gt;from .models import *&lt;/code&gt; 사용하지 않고 명시 적으로 각 모델을 가져 오면 네임 스페이스를 어지럽히 지 않고 코드를 더 읽기 쉽고 코드 분석 도구를 유용하게 유지하는 이점이 있습니다.</target>
        </trans-unit>
        <trans-unit id="6fb817f9ee738b2a8b27e7516ee544fd6f8dba04" translate="yes" xml:space="preserve">
          <source>Explicitly mark a string as safe for (HTML) output purposes. The returned object can be used everywhere a string is appropriate.</source>
          <target state="translated">(HTML) 출력을 위해 문자열을 안전한 것으로 명시 적으로 표시하십시오. 반환 된 객체는 문자열이 적절한 모든 곳에서 사용될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="874f563ca10bc56af8814bb8cfc17a69095a4254" translate="yes" xml:space="preserve">
          <source>Explicitly passing the timezone to the &lt;code&gt;Extract&lt;/code&gt; function behaves in the same way, and takes priority over an active timezone:</source>
          <target state="translated">시간대를 &lt;code&gt;Extract&lt;/code&gt; 함수에 명시 적으로 전달하면 동일한 방식으로 작동하며 활성 시간대보다 우선합니다.</target>
        </trans-unit>
        <trans-unit id="9accba3377caa879d2411f253c32d40f50c05c64" translate="yes" xml:space="preserve">
          <source>Explicitly setting the active language</source>
          <target state="translated">명시 적으로 활성 언어 설정</target>
        </trans-unit>
        <trans-unit id="f4f5831bca5be105fc675670edb3ed008d4f5aa6" translate="yes" xml:space="preserve">
          <source>Explicitly specifying auto-primary-key values</source>
          <target state="translated">자동 기본 키 값을 명시 적으로 지정</target>
        </trans-unit>
        <trans-unit id="2a388f76aa5ea04c1d289a276ec7b4fa562a89ee" translate="yes" xml:space="preserve">
          <source>Explicitly specifying auto-primary-key values is mostly useful for bulk-saving objects, when you&amp;rsquo;re confident you won&amp;rsquo;t have primary-key collision.</source>
          <target state="translated">자동 기본 키 값을 명시 적으로 지정하면 기본 키 충돌이 없다고 확신 할 때 대량 저장 객체에 주로 유용합니다.</target>
        </trans-unit>
        <trans-unit id="0581a134daecddc957761672c1987cd91186f2a4" translate="yes" xml:space="preserve">
          <source>Explore the ORM before using raw SQL!</source>
          <target state="translated">원시 SQL을 사용하기 전에 ORM을 탐색하십시오!</target>
        </trans-unit>
        <trans-unit id="816a1c591197b5d90919fa323137ee77dfdedebb" translate="yes" xml:space="preserve">
          <source>Explore the free admin functionality</source>
          <target state="translated">무료 관리자 기능 살펴보기</target>
        </trans-unit>
        <trans-unit id="de31fd22a0f8e99b352dbde9fc9b3c0a8b00ac76" translate="yes" xml:space="preserve">
          <source>Exposing multiple databases in Django&amp;rsquo;s admin interface</source>
          <target state="translated">Django의 관리 인터페이스에서 여러 데이터베이스 노출</target>
        </trans-unit>
        <trans-unit id="dc348b7addd2c3af4465f15822bcf88a0780f26c" translate="yes" xml:space="preserve">
          <source>Expression API</source>
          <target state="translated">식 API</target>
        </trans-unit>
        <trans-unit id="3a741732bbc54a44141f91d238840f2ab0bb786b" translate="yes" xml:space="preserve">
          <source>Extending Django&amp;rsquo;s default &lt;code&gt;User&lt;/code&gt;</source>
          <target state="translated">Django의 기본 &lt;code&gt;User&lt;/code&gt; 확장</target>
        </trans-unit>
        <trans-unit id="8cd7b3f9fec9e30658f341d79e32760ffc714990" translate="yes" xml:space="preserve">
          <source>Extending database-backed session engines</source>
          <target state="translated">데이터베이스 기반 세션 엔진 확장</target>
        </trans-unit>
        <trans-unit id="ededa0d12d32cb3f876751175473cd30889d24bb" translate="yes" xml:space="preserve">
          <source>Extending generic views</source>
          <target state="translated">일반 뷰 확장</target>
        </trans-unit>
        <trans-unit id="b816961d84a34706e850fb49a6d02a03b3e40ac9" translate="yes" xml:space="preserve">
          <source>Extending the existing &lt;code&gt;User&lt;/code&gt; model</source>
          <target state="translated">기존 &lt;code&gt;User&lt;/code&gt; 모델 확장</target>
        </trans-unit>
        <trans-unit id="9327a207b1aa9ff41fc53fada2bdafbfd0dabaf1" translate="yes" xml:space="preserve">
          <source>Extensions to Django&amp;rsquo;s ORM for querying and manipulating spatial data.</source>
          <target state="translated">공간 데이터 쿼리 및 조작을위한 Django의 ORM 확장.</target>
        </trans-unit>
        <trans-unit id="dae651c4da4bb405bf79d80b0eb4ab583a7ba230" translate="yes" xml:space="preserve">
          <source>Extent (boundary values) of the raster source, as a 4-tuple &lt;code&gt;(xmin, ymin, xmax, ymax)&lt;/code&gt; in the spatial reference system of the source.</source>
          <target state="translated">소스 의 공간 참조 시스템에서 4 튜플 &lt;code&gt;(xmin, ymin, xmax, ymax)&lt;/code&gt; 로 래스터 소스의 범위 (경계 값) .</target>
        </trans-unit>
        <trans-unit id="ad951d5067b4277d0ccfa1b48de4e084d9986632" translate="yes" xml:space="preserve">
          <source>External packages</source>
          <target state="translated">외부 패키지</target>
        </trans-unit>
        <trans-unit id="1afc103e2a5f0f4caa7ca899f5745dcd5f729da1" translate="yes" xml:space="preserve">
          <source>Extra &amp;ldquo;help&amp;rdquo; text to be displayed with the form widget. It&amp;rsquo;s useful for documentation even if your field isn&amp;rsquo;t used on a form.</source>
          <target state="translated">양식 위젯과 함께 추가 &quot;도움말&quot;텍스트가 표시됩니다. 필드가 양식에 사용되지 않더라도 문서화에 유용합니다.</target>
        </trans-unit>
        <trans-unit id="413d7f50b095c5f333be42cec2f2b2facaf1d4fd" translate="yes" xml:space="preserve">
          <source>Extra fields on many-to-many relationships</source>
          <target state="translated">다 대다 관계에 대한 추가 필드</target>
        </trans-unit>
        <trans-unit id="c94217b7743f4d934ed32a5947bdaa5ccfdc2f38" translate="yes" xml:space="preserve">
          <source>Extra instance methods</source>
          <target state="translated">추가 인스턴스 메소드</target>
        </trans-unit>
        <trans-unit id="2bc192fff945387981281bee55249580a3cb8ac8" translate="yes" xml:space="preserve">
          <source>Extra keyword arguments will be stored for &lt;a href=&quot;#custom-feed-generators&quot;&gt;custom feed generators&lt;/a&gt;.</source>
          <target state="translated">추가 키워드 인수는 &lt;a href=&quot;#custom-feed-generators&quot;&gt;맞춤 피드 생성기에&lt;/a&gt; 저장됩니다 .</target>
        </trans-unit>
        <trans-unit id="1de60cebc8b1c2a913565910ef4c0681de5f5f09" translate="yes" xml:space="preserve">
          <source>Extra niceties</source>
          <target state="translated">여분의 멋쟁이</target>
        </trans-unit>
        <trans-unit id="18e0a564566ba2e992d00abe4bc3f66763d44ffd" translate="yes" xml:space="preserve">
          <source>Extra parameters to pass to the cache backend. Available parameters vary depending on your cache backend.</source>
          <target state="translated">캐시 백엔드로 전달할 추가 매개 변수입니다. 사용 가능한 매개 변수는 캐시 백엔드에 따라 다릅니다.</target>
        </trans-unit>
        <trans-unit id="7c3df0ba9527c8c878a3bebf0f957c9aa10bdd2e" translate="yes" xml:space="preserve">
          <source>Extra parameters to pass to the template backend. Available parameters vary depending on the template backend. See &lt;a href=&quot;../topics/templates#django.template.backends.django.DjangoTemplates&quot;&gt;&lt;code&gt;DjangoTemplates&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../topics/templates#django.template.backends.jinja2.Jinja2&quot;&gt;&lt;code&gt;Jinja2&lt;/code&gt;&lt;/a&gt; for the options of the built-in backends.</source>
          <target state="translated">템플릿 백엔드에 전달할 추가 매개 변수입니다. 사용 가능한 매개 변수는 템플릿 백엔드에 따라 다릅니다. 내장 백엔드 옵션에 대해서는 &lt;a href=&quot;../topics/templates#django.template.backends.django.DjangoTemplates&quot;&gt; &lt;code&gt;DjangoTemplates&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../topics/templates#django.template.backends.jinja2.Jinja2&quot;&gt; &lt;code&gt;Jinja2&lt;/code&gt; &lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="bfa77cda43c1228e4bba903dc9f4d09a520cdc91" translate="yes" xml:space="preserve">
          <source>Extra parameters to use when connecting to the database. Available parameters vary depending on your database backend.</source>
          <target state="translated">데이터베이스에 연결할 때 사용할 추가 매개 변수입니다. 사용 가능한 매개 변수는 데이터베이스 백엔드에 따라 다릅니다.</target>
        </trans-unit>
        <trans-unit id="06f7ef32cde32c6af7e519db64658b977f7290ac" translate="yes" xml:space="preserve">
          <source>Extra permissions to enter into the permissions table when creating this object. Add, change, delete, and view permissions are automatically created for each model. This example specifies an extra permission, &lt;code&gt;can_deliver_pizzas&lt;/code&gt;:</source>
          <target state="translated">이 개체를 만들 때 권한 테이블에 입력 할 추가 권한. 각 모델에 대해 추가, 변경, 삭제 및보기 권한이 자동으로 생성됩니다. 이 예는 추가 권한 &lt;code&gt;can_deliver_pizzas&lt;/code&gt; 를 지정합니다 .</target>
        </trans-unit>
        <trans-unit id="2b6d70cb8317da99e429494a2ef7ef0755767b37" translate="yes" xml:space="preserve">
          <source>Extra tags are added before the default tag for that level and are space separated.</source>
          <target state="translated">추가 레벨 태그는 해당 레벨의 기본 태그 앞에 추가되며 공백으로 구분됩니다.</target>
        </trans-unit>
        <trans-unit id="7602339dd97389b55ed253c20219c34578dbdfde" translate="yes" xml:space="preserve">
          <source>Extracts a component of a date as a number.</source>
          <target state="translated">날짜의 구성 요소를 숫자로 추출합니다.</target>
        </trans-unit>
        <trans-unit id="03688ba6aa340b87549088aa5739944cb6b1dc73" translate="yes" xml:space="preserve">
          <source>FAQ</source>
          <target state="translated">FAQ</target>
        </trans-unit>
        <trans-unit id="b45dfb8afe0c5e5bb27f803732560474bc45d849" translate="yes" xml:space="preserve">
          <source>Failing silently when the message framework is disabled</source>
          <target state="translated">메시지 프레임 워크가 비활성화되면 자동으로 실패</target>
        </trans-unit>
        <trans-unit id="47c2e227ef9914d7b093af5d1a2cd029c8ab17ac" translate="yes" xml:space="preserve">
          <source>Failing that, it looks at the &lt;code&gt;Accept-Language&lt;/code&gt; HTTP header. This header is sent by your browser and tells the server which language(s) you prefer, in order by priority. Django tries each language in the header until it finds one with available translations.</source>
          <target state="translated">실패하면 &lt;code&gt;Accept-Language&lt;/code&gt; HTTP 헤더를 봅니다. 이 헤더는 브라우저에서 전송되며 우선 순위에 따라 원하는 언어를 서버에 알려줍니다. Django는 사용 가능한 번역이있는 언어를 찾을 때까지 헤더의 각 언어를 시도합니다.</target>
        </trans-unit>
        <trans-unit id="b7709fb038886d0057fcdcfbfa7447b5510c88d1" translate="yes" xml:space="preserve">
          <source>Failing that, it looks for a cookie.</source>
          <target state="translated">실패하면 쿠키를 찾습니다.</target>
        </trans-unit>
        <trans-unit id="bd1403582a93eae6afc78ba671eb7bfd29e1a41c" translate="yes" xml:space="preserve">
          <source>Failing that, it tries to call a method with no arguments.</source>
          <target state="translated">실패하면 인수없이 메소드를 호출하려고 시도합니다.</target>
        </trans-unit>
        <trans-unit id="78f2e4cd01251a37129c61231869ef7cd447bba6" translate="yes" xml:space="preserve">
          <source>Failing that, it uses the class attribute.</source>
          <target state="translated">실패하면 클래스 속성을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="daba93200f9881fcb90a858f1083e7b233503da4" translate="yes" xml:space="preserve">
          <source>Failing that, it uses the global &lt;a href=&quot;../../ref/settings#std:setting-LANGUAGE_CODE&quot;&gt;&lt;code&gt;LANGUAGE_CODE&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">실패하면 전역 &lt;a href=&quot;../../ref/settings#std:setting-LANGUAGE_CODE&quot;&gt; &lt;code&gt;LANGUAGE_CODE&lt;/code&gt; &lt;/a&gt; 설정을 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="9376bd2640685d30a49f2800924a129239f3145d" translate="yes" xml:space="preserve">
          <source>Failure to do this may result in crashes and other odd behavior.</source>
          <target state="translated">그렇지 않으면 충돌 및 기타 이상한 동작이 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="867930b7270d0a26287c69169778dcde1c78652a" translate="yes" xml:space="preserve">
          <source>Falling back to raw SQL</source>
          <target state="translated">원시 SQL로 폴백</target>
        </trans-unit>
        <trans-unit id="3c507d35c8f807782c5814cb5c74433546913b36" translate="yes" xml:space="preserve">
          <source>Fathom</source>
          <target state="translated">Fathom</target>
        </trans-unit>
        <trans-unit id="fc338f87a058158eb824b53705961801516a9460" translate="yes" xml:space="preserve">
          <source>Features</source>
          <target state="translated">Features</target>
        </trans-unit>
        <trans-unit id="18e57197e43d3fe68f8e721d2e84d9ac95a73d3a" translate="yes" xml:space="preserve">
          <source>Feed classes subclass &lt;a href=&quot;#django.contrib.syndication.views.Feed&quot;&gt;&lt;code&gt;django.contrib.syndication.views.Feed&lt;/code&gt;&lt;/a&gt;. They can live anywhere in your codebase.</source>
          <target state="translated">피드 클래스 서브 클래스 &lt;a href=&quot;#django.contrib.syndication.views.Feed&quot;&gt; &lt;code&gt;django.contrib.syndication.views.Feed&lt;/code&gt; &lt;/a&gt; . 코드베이스의 어느 곳에서나 살 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ae2a87fa257d65ef465975910173b2832c69bc9b" translate="yes" xml:space="preserve">
          <source>Feeds created by the syndication framework automatically include the appropriate &lt;code&gt;&amp;lt;language&amp;gt;&lt;/code&gt; tag (RSS 2.0) or &lt;code&gt;xml:lang&lt;/code&gt; attribute (Atom). By default, this is &lt;a href=&quot;../utils#django.utils.translation.get_language&quot;&gt;&lt;code&gt;django.utils.translation.get_language()&lt;/code&gt;&lt;/a&gt;. You can change it by setting the &lt;code&gt;language&lt;/code&gt; class attribute.</source>
          <target state="translated">신디케이션 프레임 워크에서 작성된 피드에는 자동으로 적절한 &lt;code&gt;&amp;lt;language&amp;gt;&lt;/code&gt; 태그 (RSS 2.0) 또는 &lt;code&gt;xml:lang&lt;/code&gt; 속성 (Atom)이 포함됩니다. 기본적으로 이것은 &lt;a href=&quot;../utils#django.utils.translation.get_language&quot;&gt; &lt;code&gt;django.utils.translation.get_language()&lt;/code&gt; &lt;/a&gt; 입니다. &lt;code&gt;language&lt;/code&gt; 클래스 속성 을 설정하여 변경할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="6a089a3455a9132618b650edc1b4b63342d919da" translate="yes" xml:space="preserve">
          <source>Fetches the translation object for a given language and activates it as the current translation object for the current thread.</source>
          <target state="translated">주어진 언어에 대한 번역 객체를 가져 와서 현재 스레드의 현재 번역 객체로 활성화합니다.</target>
        </trans-unit>
        <trans-unit id="45a974c13aedb33cff91f2d14787eef2943d0e13" translate="yes" xml:space="preserve">
          <source>Field API reference</source>
          <target state="translated">필드 API 참조</target>
        </trans-unit>
        <trans-unit id="a76e02cbf32999a29e1b2b1585645a9926ddc707" translate="yes" xml:space="preserve">
          <source>Field access API</source>
          <target state="translated">필드 액세스 API</target>
        </trans-unit>
        <trans-unit id="282aaa04aad4c1c7bd5570bd49d88ec663e21324" translate="yes" xml:space="preserve">
          <source>Field arguments</source>
          <target state="translated">필드 인수</target>
        </trans-unit>
        <trans-unit id="e71fe26990b7a34495c8ffcbd682b9c85ef4c500" translate="yes" xml:space="preserve">
          <source>Field attribute reference</source>
          <target state="translated">필드 속성 참조</target>
        </trans-unit>
        <trans-unit id="1e5d6ae38bba9092fbe0789f613d8ff5f70af916" translate="yes" xml:space="preserve">
          <source>Field data</source>
          <target state="translated">필드 데이터</target>
        </trans-unit>
        <trans-unit id="c0d3f0c4a7826daabb87e544c07e16ae9a1aae25" translate="yes" xml:space="preserve">
          <source>Field deconstruction</source>
          <target state="translated">현장 해체</target>
        </trans-unit>
        <trans-unit id="e9a1f3162e984c22776c04000f60154f1ea2d6b7" translate="yes" xml:space="preserve">
          <source>Field lookups</source>
          <target state="translated">필드 조회</target>
        </trans-unit>
        <trans-unit id="8ba1e33ebf2d161e319e0f55bd5ed96a5be22912" translate="yes" xml:space="preserve">
          <source>Field lookups are how you specify the meat of an SQL &lt;code&gt;WHERE&lt;/code&gt; clause. They&amp;rsquo;re specified as keyword arguments to the &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; methods &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.filter&quot;&gt;&lt;code&gt;filter()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.exclude&quot;&gt;&lt;code&gt;exclude()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.get&quot;&gt;&lt;code&gt;get()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">필드 조회는 SQL &lt;code&gt;WHERE&lt;/code&gt; 절의 미트를 지정하는 방법 입니다. 이들은 &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; &lt;/a&gt; 메소드 &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.filter&quot;&gt; &lt;code&gt;filter()&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.exclude&quot;&gt; &lt;code&gt;exclude()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.get&quot;&gt; &lt;code&gt;get()&lt;/code&gt; &lt;/a&gt; 키워드 인수로 지정됩니다 .</target>
        </trans-unit>
        <trans-unit id="de02473788e53e5314ba20e745a81a059534078a" translate="yes" xml:space="preserve">
          <source>Field lookups are how you specify the meat of an SQL &lt;code&gt;WHERE&lt;/code&gt; clause. They&amp;rsquo;re specified as keyword arguments to the &lt;code&gt;QuerySet&lt;/code&gt; methods &lt;a href=&quot;#django.db.models.query.QuerySet.filter&quot;&gt;&lt;code&gt;filter()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#django.db.models.query.QuerySet.exclude&quot;&gt;&lt;code&gt;exclude()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#django.db.models.query.QuerySet.get&quot;&gt;&lt;code&gt;get()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">필드 조회는 SQL &lt;code&gt;WHERE&lt;/code&gt; 절의 미트를 지정하는 방법 입니다. 이들은 &lt;code&gt;QuerySet&lt;/code&gt; 메소드 &lt;a href=&quot;#django.db.models.query.QuerySet.filter&quot;&gt; &lt;code&gt;filter()&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#django.db.models.query.QuerySet.exclude&quot;&gt; &lt;code&gt;exclude()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#django.db.models.query.QuerySet.get&quot;&gt; &lt;code&gt;get()&lt;/code&gt; &lt;/a&gt; 키워드 인수로 지정됩니다 .</target>
        </trans-unit>
        <trans-unit id="edd206db8bde7bd496ee0a188e1b235db841d06e" translate="yes" xml:space="preserve">
          <source>Field name &amp;ldquo;hiding&amp;rdquo; is not permitted</source>
          <target state="translated">필드 이름 &quot;숨김&quot;은 허용되지 않습니다</target>
        </trans-unit>
        <trans-unit id="9f84cd5b8686ba36d2da6cdcdf6560cb8c808bc7" translate="yes" xml:space="preserve">
          <source>Field name restrictions</source>
          <target state="translated">필드 이름 제한</target>
        </trans-unit>
        <trans-unit id="6c79fbefec29de2b101946780ef45e1143ad0b98" translate="yes" xml:space="preserve">
          <source>Field names in &lt;code&gt;list_filter&lt;/code&gt; can also span relations using the &lt;code&gt;__&lt;/code&gt; lookup, for example:</source>
          <target state="translated">&lt;code&gt;list_filter&lt;/code&gt; 의 필드 이름 은 &lt;code&gt;__&lt;/code&gt; 조회를 사용하여 관계를 확장 할 수도 있습니다 ( 예 :</target>
        </trans-unit>
        <trans-unit id="be3f93fdeca716d06ed041ec33499ba88ce49e88" translate="yes" xml:space="preserve">
          <source>Field options</source>
          <target state="translated">필드 옵션</target>
        </trans-unit>
        <trans-unit id="3d706d3e63f5c876c490f7bad6178a61d0e1fe44" translate="yes" xml:space="preserve">
          <source>Field types</source>
          <target state="translated">필드 타입</target>
        </trans-unit>
        <trans-unit id="c746afbe662ca1098fcbb794dd1cc489ba49c934" translate="yes" xml:space="preserve">
          <source>Field, model, manager, and database checks</source>
          <target state="translated">필드, 모델, 관리자 및 데이터베이스 확인</target>
        </trans-unit>
        <trans-unit id="e8b685271238adf161cffed3c91f54d97023262b" translate="yes" xml:space="preserve">
          <source>Fields</source>
          <target state="translated">Fields</target>
        </trans-unit>
        <trans-unit id="d687c0519153fa97398989418fffd131cb65322d" translate="yes" xml:space="preserve">
          <source>Fields can also define their own &lt;a href=&quot;fields#django.forms.Field.label_suffix&quot;&gt;&lt;code&gt;label_suffix&lt;/code&gt;&lt;/a&gt;. This will take precedence over &lt;a href=&quot;#django.forms.Form.label_suffix&quot;&gt;&lt;code&gt;Form.label_suffix&lt;/code&gt;&lt;/a&gt;. The suffix can also be overridden at runtime using the &lt;code&gt;label_suffix&lt;/code&gt; parameter to &lt;a href=&quot;#django.forms.BoundField.label_tag&quot;&gt;&lt;code&gt;label_tag()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">필드는 자체 &lt;a href=&quot;fields#django.forms.Field.label_suffix&quot;&gt; &lt;code&gt;label_suffix&lt;/code&gt; 를&lt;/a&gt; 정의 할 수도 있습니다 . 이것은 &lt;a href=&quot;#django.forms.Form.label_suffix&quot;&gt; &lt;code&gt;Form.label_suffix&lt;/code&gt; &lt;/a&gt; 보다 우선 합니다. &lt;code&gt;label_suffix&lt;/code&gt; 매개 변수를 &lt;a href=&quot;#django.forms.BoundField.label_tag&quot;&gt; &lt;code&gt;label_tag()&lt;/code&gt; &lt;/a&gt; 로 사용하여 런타임에 접미 부를 겹쳐 쓸 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="8c31c1b8a22e80178c8f35c1a32489ad6b27fe89" translate="yes" xml:space="preserve">
          <source>Fields defined declaratively are left as-is, therefore any customizations made to &lt;code&gt;Meta&lt;/code&gt; attributes such as &lt;code&gt;widgets&lt;/code&gt;, &lt;code&gt;labels&lt;/code&gt;, &lt;code&gt;help_texts&lt;/code&gt;, or &lt;code&gt;error_messages&lt;/code&gt; are ignored; these only apply to fields that are generated automatically.</source>
          <target state="translated">선언적으로 정의 된 필드는 그대로 유지되므로 &lt;code&gt;widgets&lt;/code&gt; , &lt;code&gt;labels&lt;/code&gt; , &lt;code&gt;help_texts&lt;/code&gt; 또는 &lt;code&gt;error_messages&lt;/code&gt; 와 같은 &lt;code&gt;Meta&lt;/code&gt; 속성에 대한 사용자 정의 는 무시됩니다. 이들은 자동으로 생성 된 필드에만 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="2e4b54398209b421c31d866803a092dc90d5f00e" translate="yes" xml:space="preserve">
          <source>Fields in a model must somehow be converted to fit into an existing database column type. Different databases provide different sets of valid column types, but the rule is still the same: those are the only types you have to work with. Anything you want to store in the database must fit into one of those types.</source>
          <target state="translated">모델의 필드는 기존 데이터베이스 열 유형에 맞게 변환되어야합니다. 다른 데이터베이스는 다른 유효한 열 유형 집합을 제공하지만 규칙은 여전히 ​​동일합니다. 이것들은 작업해야하는 유일한 유형입니다. 데이터베이스에 저장하려는 항목은 해당 유형 중 하나에 맞아야합니다.</target>
        </trans-unit>
        <trans-unit id="a1ce3604b2bea58b4cfbd39c366a9f2a49f3af6f" translate="yes" xml:space="preserve">
          <source>Fields inherited from abstract base classes can be overridden with another field or value, or be removed with &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">추상 기본 클래스에서 상속 된 필드는 다른 필드 또는 값으로 대체되거나 &lt;code&gt;None&lt;/code&gt; 으로 제거 될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ab3bfc05c4cd1e813b9d0f7e2113e49dbffe2ad8" translate="yes" xml:space="preserve">
          <source>Fields may also be left out:</source>
          <target state="translated">필드를 생략 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="735f77b3cf32e7c5bd2499b099e098b496222116" translate="yes" xml:space="preserve">
          <source>Fields often receive their values as a different type, either from serialization or from forms.</source>
          <target state="translated">필드는 종종 직렬화 또는 양식에서 다른 유형으로 값을받습니다.</target>
        </trans-unit>
        <trans-unit id="649dca6dab9c7c229f6569d38d4d5b19292672ac" translate="yes" xml:space="preserve">
          <source>Fields part (e.g. &lt;code&gt;Book.objects.filter(author__best_friends__first_name...&lt;/code&gt;);</source>
          <target state="translated">필드 부분 (예 : &lt;code&gt;Book.objects.filter(author__best_friends__first_name...&lt;/code&gt; );</target>
        </trans-unit>
        <trans-unit id="6b0b0df8fdb846cd8048a567025b5eaea5d1a48e" translate="yes" xml:space="preserve">
          <source>Fields that are mentioned in the &lt;code&gt;order_by()&lt;/code&gt; part of a queryset (or which are used in the default ordering on a model) are used when selecting the output data, even if they are not otherwise specified in the &lt;code&gt;values()&lt;/code&gt; call. These extra fields are used to group &amp;ldquo;like&amp;rdquo; results together and they can make otherwise identical result rows appear to be separate. This shows up, particularly, when counting things.</source>
          <target state="translated">queryset 의 &lt;code&gt;order_by()&lt;/code&gt; 부분에 언급 된 (또는 모델의 기본 순서에 사용되는) 필드는 &lt;code&gt;values()&lt;/code&gt; 호출 에 달리 지정되지 않은 경우에도 출력 데이터를 선택할 때 사용됩니다 . 이러한 추가 필드는 &quot;유사한&quot;결과를 그룹화하는 데 사용되며 그렇지 않으면 동일한 결과 행이 분리 된 것처럼 보일 수 있습니다. 이것은 특히 물건을 세는 경우 나타납니다.</target>
        </trans-unit>
        <trans-unit id="411569bb97e7d67430cbe51d6736a6ce69285486" translate="yes" xml:space="preserve">
          <source>Fields which handle relationships</source>
          <target state="translated">관계를 다루는 필드</target>
        </trans-unit>
        <trans-unit id="c86a640297208576f75bdb7a600c45029133d4ec" translate="yes" xml:space="preserve">
          <source>Fields, models, model managers, and database backends all implement a &lt;code&gt;check()&lt;/code&gt; method that is already registered with the check framework. If you want to add extra checks, you can extend the implementation on the base class, perform any extra checks you need, and append any messages to those generated by the base class. It&amp;rsquo;s recommended that you delegate each check to separate methods.</source>
          <target state="translated">필드, 모델, 모델 관리자 및 데이터베이스 백엔드는 모두 점검 프레임 워크에 이미 등록 된 &lt;code&gt;check()&lt;/code&gt; 메소드를 구현합니다 . 추가 검사를 추가하려는 경우 기본 클래스에서 구현을 확장하고 필요한 추가 검사를 수행 한 후 기본 클래스에서 생성 된 메시지에 메시지를 추가 할 수 있습니다. 각 검사를 별도의 방법으로 위임하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="c09ab9ea91985578fea6798c7cff8723d2b9441b" translate="yes" xml:space="preserve">
          <source>File Uploads</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d9e62a1fedfedfcb20115ceea1d374d7dda8495" translate="yes" xml:space="preserve">
          <source>File a ticket on the &lt;a href=&quot;https://code.djangoproject.com/newticket&quot;&gt;Django trac&lt;/a&gt; if you think there&amp;rsquo;s a bug. Make sure to provide a complete description of the problem, versions used, and specify the component as &amp;ldquo;GIS&amp;rdquo;.</source>
          <target state="translated">버그가 있다고 생각되면 &lt;a href=&quot;https://code.djangoproject.com/newticket&quot;&gt;장고 트랙&lt;/a&gt; 에 티켓을 제출 하십시오. 문제, 사용 된 버전에 대한 완전한 설명을 제공하고 구성 요소를&amp;ldquo;GIS&amp;rdquo;로 지정하십시오.</target>
        </trans-unit>
        <trans-unit id="1a7ab172756297721d64b7156ecbe6a065edd437" translate="yes" xml:space="preserve">
          <source>File backend</source>
          <target state="translated">파일 백엔드</target>
        </trans-unit>
        <trans-unit id="b4af38cf5f37ffcfc2b4fe1a33a1925a531bb6b9" translate="yes" xml:space="preserve">
          <source>File fields</source>
          <target state="translated">파일 필드</target>
        </trans-unit>
        <trans-unit id="f315ee9e3108a80c179abb06fe33569d756f7ff5" translate="yes" xml:space="preserve">
          <source>File handling</source>
          <target state="translated">파일 처리</target>
        </trans-unit>
        <trans-unit id="1ac64f740855657dfcf61583d119bf59cfc9325e" translate="yes" xml:space="preserve">
          <source>File sizes and SI units</source>
          <target state="translated">파일 크기 및 SI 단위</target>
        </trans-unit>
        <trans-unit id="4fbddfd9eb12271294f00a76c9a60f72b6ebe149" translate="yes" xml:space="preserve">
          <source>File storage</source>
          <target state="translated">파일 저장</target>
        </trans-unit>
        <trans-unit id="71025f778a7a21d0f22a6af0bc522d944a87f0ea" translate="yes" xml:space="preserve">
          <source>File storage API</source>
          <target state="translated">파일 저장 API</target>
        </trans-unit>
        <trans-unit id="f9c9e67f41f3c2b222b70fa3cecb8fce951b7d30" translate="yes" xml:space="preserve">
          <source>File upload handler to stream uploads into memory (used for small files).</source>
          <target state="translated">작은 파일에 사용되는 메모리로 업로드를 스트리밍하는 파일 업로드 핸들러입니다.</target>
        </trans-unit>
        <trans-unit id="ba4a0b1594c6d040cfba60824c3d79e33345a5ba" translate="yes" xml:space="preserve">
          <source>File upload widgets</source>
          <target state="translated">파일 업로드 위젯</target>
        </trans-unit>
        <trans-unit id="1034ff014ad9c6d1a9f554317aa69386237c2716" translate="yes" xml:space="preserve">
          <source>File uploads</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ce6c512ea433a7fc5c8841628e7696cd0ff7f2b" translate="yes" xml:space="preserve">
          <source>Files</source>
          <target state="translated">Files</target>
        </trans-unit>
        <trans-unit id="5a808ab38206da493d5c1218c6fc2ffc7b0a7b8d" translate="yes" xml:space="preserve">
          <source>Files are not placed directly in this directory, but in a directory named as the locale, and must be named &lt;code&gt;formats.py&lt;/code&gt;. Be careful not to put sensitive information in these files as values inside can be exposed if you pass the string to &lt;code&gt;django.utils.formats.get_format()&lt;/code&gt; (used by the &lt;a href=&quot;../../ref/templates/builtins#std:templatefilter-date&quot;&gt;&lt;code&gt;date&lt;/code&gt;&lt;/a&gt; template filter).</source>
          <target state="translated">파일은이 디렉토리에 직접 배치되지 않고 로케일로 이름이 지정된 디렉토리에 있으며 &lt;code&gt;formats.py&lt;/code&gt; 은 names.py 여야합니다 . 문자열을 &lt;code&gt;django.utils.formats.get_format()&lt;/code&gt; 전달하면 ( &lt;a href=&quot;../../ref/templates/builtins#std:templatefilter-date&quot;&gt; &lt;code&gt;date&lt;/code&gt; &lt;/a&gt; 템플릿 필터 에서 사용 ) 이러한 파일에 중요한 정보를 넣지 않도록주의하십시오 .</target>
        </trans-unit>
        <trans-unit id="b332b7daf9a3a02657d8c693e3a869fe55fa2105" translate="yes" xml:space="preserve">
          <source>Files are searched by using the &lt;a href=&quot;../settings#std:setting-STATICFILES_FINDERS&quot;&gt;&lt;code&gt;enabled finders&lt;/code&gt;&lt;/a&gt;. The default is to look in all locations defined in &lt;a href=&quot;../settings#std:setting-STATICFILES_DIRS&quot;&gt;&lt;code&gt;STATICFILES_DIRS&lt;/code&gt;&lt;/a&gt; and in the &lt;code&gt;'static'&lt;/code&gt; directory of apps specified by the &lt;a href=&quot;../settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">&lt;a href=&quot;../settings#std:setting-STATICFILES_FINDERS&quot;&gt; &lt;code&gt;enabled finders&lt;/code&gt; &lt;/a&gt; 를 사용하여 파일을 검색합니다 . 기본값은 &lt;a href=&quot;../settings#std:setting-STATICFILES_DIRS&quot;&gt; &lt;code&gt;STATICFILES_DIRS&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt; 설정으로 지정된 앱 의 &lt;code&gt;'static'&lt;/code&gt; 디렉토리에 정의 된 모든 위치를 찾는 것입니다 .</target>
        </trans-unit>
        <trans-unit id="2c4cb9ddfc80d249fbc6e428155e2ef6130c9fde" translate="yes" xml:space="preserve">
          <source>Filesystem caching</source>
          <target state="translated">파일 시스템 캐싱</target>
        </trans-unit>
        <trans-unit id="bd3f98a9ded8f39a59250120171f66eaa1a37658" translate="yes" xml:space="preserve">
          <source>Filesystem path to the application directory, e.g. &lt;code&gt;'/usr/lib/pythonX.Y/dist-packages/django/contrib/admin'&lt;/code&gt;.</source>
          <target state="translated">응용 프로그램 디렉토리의 파일 시스템 경로입니다 (예 : &lt;code&gt;'/usr/lib/pythonX.Y/dist-packages/django/contrib/admin'&lt;/code&gt; ) .</target>
        </trans-unit>
        <trans-unit id="dec2af05161a7d1f37defc8ce43fa042e1b1e142" translate="yes" xml:space="preserve">
          <source>Filesystem support for UTF-8 file names varies and might depend on the environment. Check your current configuration in an interactive Python shell by running:</source>
          <target state="translated">UTF-8 파일 이름에 대한 파일 시스템 지원은 환경에 따라 다를 수 있습니다. 다음을 실행하여 대화식 Python 쉘에서 현재 구성을 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="064a6ecd0c2f43e9d807415fbc454164583413f8" translate="yes" xml:space="preserve">
          <source>Filter arguments that contain spaces must be quoted; for example, to join a list with commas and spaces you&amp;rsquo;d use &lt;code&gt;{{ list|join:&quot;, &quot; }}&lt;/code&gt;.</source>
          <target state="translated">공백이 포함 된 필터 인수는 따옴표로 묶어야합니다. 예를 들어 쉼표와 공백으로 목록을 결합하려면 &lt;code&gt;{{ list|join:&quot;, &quot; }}&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="baa5a4aff7498791cba3132ca42f419049e06250" translate="yes" xml:space="preserve">
          <source>Filtered &lt;code&gt;QuerySet&lt;/code&gt;s are unique</source>
          <target state="translated">필터링 된 &lt;code&gt;QuerySet&lt;/code&gt; 은 고유합니다</target>
        </trans-unit>
        <trans-unit id="b894cdef7d89584d0c37e80b41e691627b9792b3" translate="yes" xml:space="preserve">
          <source>Filtering a &lt;code&gt;DateTimeField&lt;/code&gt; with dates won&amp;rsquo;t include items on the last day, because the bounds are interpreted as &amp;ldquo;0am on the given date&amp;rdquo;. If &lt;code&gt;pub_date&lt;/code&gt; was a &lt;code&gt;DateTimeField&lt;/code&gt;, the above expression would be turned into this SQL:</source>
          <target state="translated">날짜가 있는 &lt;code&gt;DateTimeField&lt;/code&gt; 를 필터링 하면 마지막 날의 항목이 포함되지 않습니다. 경계는 &quot;주어진 날짜의 0am&quot;으로 해석되기 때문입니다. 경우 &lt;code&gt;pub_date&lt;/code&gt; 했다 &lt;code&gt;DateTimeField&lt;/code&gt; , 위의 표현은이 SQL로 전환 될 것이다 :</target>
        </trans-unit>
        <trans-unit id="21c21863ced6fea985f370603935cf40144ee066" translate="yes" xml:space="preserve">
          <source>Filtering based on related fields is still possible, though:</source>
          <target state="translated">그래도 관련 필드를 기반으로 필터링 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c125011ee5e71a5527fd017471a1ab6ae4a0a8f3" translate="yes" xml:space="preserve">
          <source>Filtering error reports</source>
          <target state="translated">오류 보고서 필터링</target>
        </trans-unit>
        <trans-unit id="ec57d8e8dc39b85d41897169a222ce9aca885b3d" translate="yes" xml:space="preserve">
          <source>Filtering on a &lt;code&gt;Subquery()&lt;/code&gt; or &lt;code&gt;Exists()&lt;/code&gt; expressions</source>
          <target state="translated">&lt;code&gt;Subquery()&lt;/code&gt; 또는 &lt;code&gt;Exists()&lt;/code&gt; 표현식 에서 필터링</target>
        </trans-unit>
        <trans-unit id="bbeb1a129ed00a4be852142a445f31b431d9e37f" translate="yes" xml:space="preserve">
          <source>Filtering on annotations</source>
          <target state="translated">주석 필터링</target>
        </trans-unit>
        <trans-unit id="d4d2a915bbe6eae704a47051c5580987e9df5f97" translate="yes" xml:space="preserve">
          <source>Filtering sensitive data is a hard problem, and it&amp;rsquo;s nearly impossible to guarantee that sensitive data won&amp;rsquo;t leak into an error report. Therefore, error reports should only be available to trusted team members and you should avoid transmitting error reports unencrypted over the Internet (such as through email).</source>
          <target state="translated">민감한 데이터를 필터링하는 것은 어려운 문제이며 민감한 데이터가 오류 보고서로 유출되지 않도록하는 것은 거의 불가능합니다. 따라서 오류 보고서는 신뢰할 수있는 팀 구성원 만 사용할 수 있어야하며 인터넷을 통해 (예 : 이메일을 통해) 암호화되지 않은 오류 보고서를 전송하지 않아야합니다.</target>
        </trans-unit>
        <trans-unit id="b300bf2848881dd005ab05cfb5d3067621063178" translate="yes" xml:space="preserve">
          <source>Filtering sensitive information</source>
          <target state="translated">민감한 정보 필터링</target>
        </trans-unit>
        <trans-unit id="96e578211aa295317cf257310712fa28ccd8f6c6" translate="yes" xml:space="preserve">
          <source>Filters</source>
          <target state="translated">Filters</target>
        </trans-unit>
        <trans-unit id="37d1a04fb6ac0e4121a6fbe09fb442246515bc5f" translate="yes" xml:space="preserve">
          <source>Filters and auto-escaping</source>
          <target state="translated">필터 및 자동 이스케이프</target>
        </trans-unit>
        <trans-unit id="c2ec981eb8d58b3ef43b299478b6a29120b322e3" translate="yes" xml:space="preserve">
          <source>Filters and time zones</source>
          <target state="translated">필터 및 시간대</target>
        </trans-unit>
        <trans-unit id="df17e555b6c3a6eea091cba497e7a85d2fbb7246" translate="yes" xml:space="preserve">
          <source>Filters can also be used to modify the logging record prior to being emitted. For example, you could write a filter that downgrades &lt;code&gt;ERROR&lt;/code&gt; log records to &lt;code&gt;WARNING&lt;/code&gt; records if a particular set of criteria are met.</source>
          <target state="translated">필터를 사용하여 방출되기 전에 로깅 레코드를 수정할 수도 있습니다. 예를 들어, 특정 기준 세트가 충족되면 &lt;code&gt;ERROR&lt;/code&gt; 로그 레코드를 &lt;code&gt;WARNING&lt;/code&gt; 레코드로 다운 그레이드하는 필터를 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a8964d1e419845ad4c18fd2f8649fc00791c6f00" translate="yes" xml:space="preserve">
          <source>Filters can be &amp;ldquo;chained.&amp;rdquo; The output of one filter is applied to the next. &lt;code&gt;{{ text|escape|linebreaks }}&lt;/code&gt; is a common idiom for escaping text contents, then converting line breaks to &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; tags.</source>
          <target state="translated">필터는 &quot;연결&quot;될 수 있습니다. 한 필터의 출력이 다음 필터에 적용됩니다. &lt;code&gt;{{ text|escape|linebreaks }}&lt;/code&gt; 는 텍스트 내용을 빠져 나온 다음 줄 바꿈을 &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; 태그 로 변환하는 일반적인 관용구입니다 .</target>
        </trans-unit>
        <trans-unit id="e738b480fb11b865a70faf1e8e3799fdf968de6e" translate="yes" xml:space="preserve">
          <source>Filters can be installed on loggers or on handlers; multiple filters can be used in a chain to perform multiple filtering actions.</source>
          <target state="translated">필터는 로거 또는 핸들러에 설치할 수 있습니다. 체인에서 여러 필터를 사용하여 여러 필터링 작업을 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="02d84f01927ff49807c91015e758e0823bc84dd0" translate="yes" xml:space="preserve">
          <source>Filters can reference fields on the model</source>
          <target state="translated">필터는 모델의 필드를 참조 할 수 있습니다</target>
        </trans-unit>
        <trans-unit id="36ecc47b08bb577fdfadae1bfa24d7ce8abdc25f" translate="yes" xml:space="preserve">
          <source>Filters look like this: &lt;code&gt;{{ name|lower }}&lt;/code&gt;. This displays the value of the &lt;code&gt;{{ name }}&lt;/code&gt; variable after being filtered through the &lt;a href=&quot;builtins#std:templatefilter-lower&quot;&gt;&lt;code&gt;lower&lt;/code&gt;&lt;/a&gt; filter, which converts text to lowercase. Use a pipe (&lt;code&gt;|&lt;/code&gt;) to apply a filter.</source>
          <target state="translated">필터는 &lt;code&gt;{{ name|lower }}&lt;/code&gt; . 이 표시의 값 &lt;code&gt;{{ name }}&lt;/code&gt; 관통 여과 후의 변수 &lt;a href=&quot;builtins#std:templatefilter-lower&quot;&gt; &lt;code&gt;lower&lt;/code&gt; &lt;/a&gt; 소문자 텍스트 변환 필터. 파이프 ( &lt;code&gt;|&lt;/code&gt; )를 사용하여 필터를 적용하십시오.</target>
        </trans-unit>
        <trans-unit id="0e1b2c782245e2ea1e80ac7aa3a8a9f94d0ac56d" translate="yes" xml:space="preserve">
          <source>Filters on &amp;lsquo;normal&amp;rsquo; fields (e.g. &lt;a href=&quot;../../models/fields#django.db.models.CharField&quot;&gt;&lt;code&gt;CharField&lt;/code&gt;&lt;/a&gt;) may be chained with those on geographic fields. Geographic lookups accept geometry and raster input on both sides and input types can be mixed freely.</source>
          <target state="translated">'일반'필드의 필터 (예 : &lt;a href=&quot;../../models/fields#django.db.models.CharField&quot;&gt; &lt;code&gt;CharField&lt;/code&gt; &lt;/a&gt; )는 지리적 필드의 필터 와 연결될 수 있습니다. 지리적 조회는 형상을 수용하고 양쪽에서 래스터 입력을 허용하며 입력 유형을 자유롭게 혼합 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a4cada1706385afc3adccbac6d998fce15b35325" translate="yes" xml:space="preserve">
          <source>Filters that are applied to an invalid variable will only be applied if &lt;code&gt;string_if_invalid&lt;/code&gt; is set to &lt;code&gt;''&lt;/code&gt; (the empty string). If &lt;code&gt;string_if_invalid&lt;/code&gt; is set to any other value, variable filters will be ignored.</source>
          <target state="translated">유효하지 않은 변수에 적용되는 필터는 &lt;code&gt;string_if_invalid&lt;/code&gt; 가 &lt;code&gt;''&lt;/code&gt; (빈 문자열)로 설정된 경우에만 적용됩니다 . 경우 &lt;code&gt;string_if_invalid&lt;/code&gt; 가 다른 값으로 설정되어, 가변 필터는 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="afc3b1fa886539f440b0ef0b2454da8bac2d0877" translate="yes" xml:space="preserve">
          <source>Filters the contents of the block through one or more filters. Multiple filters can be specified with pipes and filters can have arguments, just as in variable syntax.</source>
          <target state="translated">하나 이상의 필터를 통해 블록의 내용을 필터링합니다. 파이프를 사용하여 여러 필터를 지정할 수 있고 변수 구문과 마찬가지로 필터에 인수가있을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="74f6dad66e444f0ae376477bab0028a633de518a" translate="yes" xml:space="preserve">
          <source>Filters transform the values of variables and tag arguments.</source>
          <target state="translated">필터는 변수 및 태그 인수의 값을 변환합니다.</target>
        </trans-unit>
        <trans-unit id="e479ba056762d32f930830c86c57db13e38da04f" translate="yes" xml:space="preserve">
          <source>Finally Django runs the &lt;a href=&quot;#django.apps.AppConfig.ready&quot;&gt;&lt;code&gt;ready()&lt;/code&gt;&lt;/a&gt; method of each application configuration.</source>
          <target state="translated">마지막으로 Django는 각 애플리케이션 구성 의 &lt;a href=&quot;#django.apps.AppConfig.ready&quot;&gt; &lt;code&gt;ready()&lt;/code&gt; &lt;/a&gt; 메소드를 실행합니다 .</target>
        </trans-unit>
        <trans-unit id="7484b10d5859089fb94b711d3a65b9931217660f" translate="yes" xml:space="preserve">
          <source>Finally for this example, suppose you want to add extra managers to the child class, but still use the default from &lt;code&gt;AbstractBase&lt;/code&gt;. You can&amp;rsquo;t add the new manager directly in the child class, as that would override the default and you would have to also explicitly include all the managers from the abstract base class. The solution is to put the extra managers in another base class and introduce it into the inheritance hierarchy &lt;em&gt;after&lt;/em&gt; the defaults:</source>
          <target state="translated">마지막으로이 예제에서는 하위 클래스에 관리자를 추가하려고하지만 여전히 &lt;code&gt;AbstractBase&lt;/code&gt; 의 기본값을 사용한다고 가정합니다 . 하위 클래스에 새 관리자를 직접 추가 할 수는 없습니다. 기본값을 무시하고 추상 기본 클래스의 모든 관리자를 명시 적으로 포함해야합니다. 해결책은 추가 관리자를 다른 기본 클래스에 넣고 기본값 &lt;em&gt;후에&lt;/em&gt; 상속 계층 구조에 도입하는 것입니다 .</target>
        </trans-unit>
        <trans-unit id="f252f3912ee8270c9c6e056b75c1aae80ee0ac41" translate="yes" xml:space="preserve">
          <source>Finally hook that view into your urls:</source>
          <target state="translated">마지막으로 해당보기를 URL에 연결하십시오.</target>
        </trans-unit>
        <trans-unit id="b745f09072b34c554b7e55654dd490d47a16da00" translate="yes" xml:space="preserve">
          <source>Finally we bring this together in a new &lt;code&gt;AuthorDetail&lt;/code&gt; view. We already know that calling &lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.View.as_view&quot;&gt;&lt;code&gt;as_view()&lt;/code&gt;&lt;/a&gt; on a class-based view gives us something that behaves exactly like a function based view, so we can do that at the point we choose between the two subviews.</source>
          <target state="translated">마지막으로이를 새로운 &lt;code&gt;AuthorDetail&lt;/code&gt; 보기로 가져옵니다 . 클래스 기반 뷰에서 &lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.View.as_view&quot;&gt; &lt;code&gt;as_view()&lt;/code&gt; &lt;/a&gt; 를 호출 하면 함수 기반 뷰와 똑같이 동작하는 것을 얻을 수 있다는 것을 이미 알고 있으므로 두 하위 뷰 중에서 선택하는 시점에서 그렇게 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="66c9ccae10ed2b23694f765b4228417a4924e330" translate="yes" xml:space="preserve">
          <source>Finally we combine the parts into an SQL expression with &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;, and supply all the parameters for the query. We then return a tuple containing the generated SQL string and the parameters.</source>
          <target state="translated">마지막으로 &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; 을 사용 하여 파트를 SQL 표현식으로 결합 하고 쿼리에 대한 모든 매개 변수를 제공합니다. 그런 다음 생성 된 SQL 문자열과 매개 변수가 포함 된 튜플을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="d2eb2a2b36ade57b93d5586d25a607a90abeb603" translate="yes" xml:space="preserve">
          <source>Finally, &lt;a href=&quot;../../../../topics/install#installing-official-release&quot;&gt;install Django&lt;/a&gt; on your system.</source>
          <target state="translated">마지막으로 시스템에 &lt;a href=&quot;../../../../topics/install#installing-official-release&quot;&gt;Django&lt;/a&gt; 를 설치 하십시오.</target>
        </trans-unit>
        <trans-unit id="5484ec9866989dbfac8528bb6dd3db714dd1ddce" translate="yes" xml:space="preserve">
          <source>Finally, &lt;code&gt;as_table()&lt;/code&gt; outputs the form as an HTML &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt;. This is exactly the same as &lt;code&gt;print&lt;/code&gt;. In fact, when you &lt;code&gt;print&lt;/code&gt; a form object, it calls its &lt;code&gt;as_table()&lt;/code&gt; method behind the scenes:</source>
          <target state="translated">마지막으로 &lt;code&gt;as_table()&lt;/code&gt; 은 양식을 HTML &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; 로 출력합니다 . 이것은 &lt;code&gt;print&lt;/code&gt; 와 정확히 동일합니다 . 실제로 양식 객체 를 &lt;code&gt;print&lt;/code&gt; 할 때는 장면 뒤에서 &lt;code&gt;as_table()&lt;/code&gt; 메서드를 호출 합니다.</target>
        </trans-unit>
        <trans-unit id="f6603469a430fe7317c80ca09845bcdc21b75157" translate="yes" xml:space="preserve">
          <source>Finally, &lt;code&gt;full_clean()&lt;/code&gt; will check any unique constraints on your model.</source>
          <target state="translated">마지막으로 &lt;code&gt;full_clean()&lt;/code&gt; 은 모델에 대한 고유 제약 조건을 확인합니다.</target>
        </trans-unit>
        <trans-unit id="2019efad06892eaf93b5bf539df6adb0e0145d27" translate="yes" xml:space="preserve">
          <source>Finally, &lt;code&gt;register.filter()&lt;/code&gt; also accepts three keyword arguments, &lt;code&gt;is_safe&lt;/code&gt;, &lt;code&gt;needs_autoescape&lt;/code&gt;, and &lt;code&gt;expects_localtime&lt;/code&gt;. These arguments are described in &lt;a href=&quot;#filters-auto-escaping&quot;&gt;filters and auto-escaping&lt;/a&gt; and &lt;a href=&quot;#filters-timezones&quot;&gt;filters and time zones&lt;/a&gt; below.</source>
          <target state="translated">마지막으로 &lt;code&gt;register.filter()&lt;/code&gt; 는 3 개의 키워드 인수 &lt;code&gt;is_safe&lt;/code&gt; , &lt;code&gt;needs_autoescape&lt;/code&gt; 및 &lt;code&gt;expects_localtime&lt;/code&gt; 도 허용 합니다. 이러한 인수는 &lt;a href=&quot;#filters-auto-escaping&quot;&gt;필터 및 자동 이스케이프&lt;/a&gt; 및 &lt;a href=&quot;#filters-timezones&quot;&gt;필터 및 시간대에&lt;/a&gt; 설명되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="306b5cee8ba18e692cafa08cb4f14f745f2e0c11" translate="yes" xml:space="preserve">
          <source>Finally, Django comes with a &amp;ldquo;dummy&amp;rdquo; cache that doesn&amp;rsquo;t actually cache &amp;ndash; it just implements the cache interface without doing anything.</source>
          <target state="translated">마지막으로 Django는 실제로 캐시하지 않는&amp;ldquo;더미&amp;rdquo;캐시와 함께 제공됩니다. 아무 것도하지 않고 캐시 인터페이스 만 구현합니다.</target>
        </trans-unit>
        <trans-unit id="40267a26a72668706858d04af947447e24d778f6" translate="yes" xml:space="preserve">
          <source>Finally, Django uses the concept of &amp;ldquo;template inheritance&amp;rdquo;. That&amp;rsquo;s what the &lt;code&gt;{% extends &quot;base.html&quot; %}&lt;/code&gt; does. It means &amp;ldquo;First load the template called &amp;lsquo;base&amp;rsquo;, which has defined a bunch of blocks, and fill the blocks with the following blocks.&amp;rdquo; In short, that lets you dramatically cut down on redundancy in templates: each template has to define only what&amp;rsquo;s unique to that template.</source>
          <target state="translated">마지막으로 Django는&amp;ldquo;템플릿 상속&amp;rdquo;이라는 개념을 사용합니다. 이것이 &lt;code&gt;{% extends &quot;base.html&quot; %}&lt;/code&gt; 역할입니다. &quot;먼저 여러 블록을 정의한 'base'라는 템플릿을로드하고 다음 블록으로 블록을 채 웁니다.&quot; 즉, 템플릿의 중복성을 대폭 줄일 수 있습니다. 각 템플릿은 해당 템플릿에 고유 한 항목 만 정의하면됩니다.</target>
        </trans-unit>
        <trans-unit id="82301c6099c024cf55f29af10873bbd58c163855" translate="yes" xml:space="preserve">
          <source>Finally, MySQL has relatively small limits on name lengths for columns, tables and indexes, as well as a limit on the combined size of all columns an index covers. This means that indexes that are possible on other backends will fail to be created under MySQL.</source>
          <target state="translated">마지막으로 MySQL에는 열, 테이블 및 인덱스의 이름 길이에 대한 제한이 비교적 작으며 인덱스가 포함하는 모든 열의 결합 된 크기에 대한 제한이 있습니다. 이는 다른 백엔드에서 가능한 인덱스가 MySQL에서 생성되지 않음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="e1fe06beb5b184511b52b82db0d899291a197824" translate="yes" xml:space="preserve">
          <source>Finally, a word on using &lt;code&gt;get_or_create()&lt;/code&gt; in Django views. Please make sure to use it only in &lt;code&gt;POST&lt;/code&gt; requests unless you have a good reason not to. &lt;code&gt;GET&lt;/code&gt; requests shouldn&amp;rsquo;t have any effect on data. Instead, use &lt;code&gt;POST&lt;/code&gt; whenever a request to a page has a side effect on your data. For more, see &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html#section-4.2.1&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;Safe methods&lt;/strong&gt;&lt;/a&gt; in the HTTP spec.</source>
          <target state="translated">마지막으로 Django 뷰에서 &lt;code&gt;get_or_create()&lt;/code&gt; 사용에 대한 단어 . 특별한 이유가없는 한 &lt;code&gt;POST&lt;/code&gt; 요청 에서만 사용해야합니다 . &lt;code&gt;GET&lt;/code&gt; 요청은 데이터에 영향을 미치지 않아야합니다. 대신 페이지 요청이 데이터에 부작용이있을 때마다 &lt;code&gt;POST&lt;/code&gt; 를 사용 하십시오. 자세한 내용 은 HTTP 사양의 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html#section-4.2.1&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;안전한 방법&lt;/strong&gt;&lt;/a&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="c40eaec225e59882f800eba203e6c05081d41e93" translate="yes" xml:space="preserve">
          <source>Finally, avoid aliasing your settings as module-level constants as &lt;code&gt;override_settings()&lt;/code&gt; won&amp;rsquo;t work on such values since they are only evaluated the first time the module is imported.</source>
          <target state="translated">마지막으로 &lt;code&gt;override_settings()&lt;/code&gt; 는 모듈을 처음 가져올 때만 평가되므로 이러한 값에는 작동하지 않으므로 모듈 수준 상수로 설정의 앨리어싱을 피하십시오 .</target>
        </trans-unit>
        <trans-unit id="ff9baca2e992a0e98a104ea1b4ce704e7121cf14" translate="yes" xml:space="preserve">
          <source>Finally, before you deploy your application to production, you should run through our &lt;a href=&quot;checklist&quot;&gt;deployment checklist&lt;/a&gt; to ensure that your configurations are suitable.</source>
          <target state="translated">마지막으로 응용 프로그램을 프로덕션에 배포하기 전에 &lt;a href=&quot;checklist&quot;&gt;배포 검사 목록&lt;/a&gt; 을 통해 구성이 적합한 지 확인해야합니다.</target>
        </trans-unit>
        <trans-unit id="12e5c631fd09eda57ca89fcce607cf3f3163a88e" translate="yes" xml:space="preserve">
          <source>Finally, browse to &lt;code&gt;http://localhost:8000/admin/&lt;/code&gt;, and log in with the user you just created. Browse to any of the &lt;code&gt;WorldBorder&lt;/code&gt; entries &amp;ndash; the borders may be edited by clicking on a polygon and dragging the vertices to the desired position.</source>
          <target state="translated">마지막으로 &lt;code&gt;http://localhost:8000/admin/&lt;/code&gt; 찾아서 방금 만든 사용자로 로그인하십시오. &lt;code&gt;WorldBorder&lt;/code&gt; 항목을 찾아 보십시오 &amp;ndash; 다각형을 클릭하고 정점을 원하는 위치로 드래그하여 테두리를 편집 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="75df61e6676393f69526cf860e9d09ffe21f5dcf" translate="yes" xml:space="preserve">
          <source>Finally, configure, make and install PROJ.4:</source>
          <target state="translated">마지막으로 PROJ.4를 구성, 제작 및 설치하십시오.</target>
        </trans-unit>
        <trans-unit id="7a496304035024f7826ec5200acb03a7378bec7f" translate="yes" xml:space="preserve">
          <source>Finally, determine which of your application&amp;rsquo;s models should be editable in the admin interface. For each of those models, register them with the admin as described in &lt;a href=&quot;#django.contrib.admin.ModelAdmin&quot;&gt;&lt;code&gt;ModelAdmin&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">마지막으로 관리자 인터페이스에서 편집 할 응용 프로그램 모델을 결정하십시오. 이러한 각 모델에 대해 &lt;a href=&quot;#django.contrib.admin.ModelAdmin&quot;&gt; &lt;code&gt;ModelAdmin&lt;/code&gt; 에&lt;/a&gt; 설명 된대로 관리자에게 등록하십시오 .</target>
        </trans-unit>
        <trans-unit id="82548b98e5f57caa40011e280e83e68504a44c79" translate="yes" xml:space="preserve">
          <source>Finally, edit your WSGI script &lt;code&gt;mysite.wsgi&lt;/code&gt; to tie Apache&amp;rsquo;s authentication to your site&amp;rsquo;s authentication mechanisms by importing the &lt;code&gt;check_password&lt;/code&gt; function:</source>
          <target state="translated">마지막으로 &lt;code&gt;check_password&lt;/code&gt; 함수 를 가져 와서 Apache의 인증을 사이트의 인증 메커니즘에 연결하도록 WSGI 스크립트 &lt;code&gt;mysite.wsgi&lt;/code&gt; 를 편집하십시오 .</target>
        </trans-unit>
        <trans-unit id="f4fbe23a0a4f1a1a7ad82d1bd5a261c78f914005" translate="yes" xml:space="preserve">
          <source>Finally, for GeoDjango to be able to find the KyngChaos SpatiaLite library, add the following to your &lt;code&gt;settings.py&lt;/code&gt;:</source>
          <target state="translated">마지막으로 GeoDjango가 KyngChaos SpatiaLite 라이브러리를 찾을 수 있도록 &lt;code&gt;settings.py&lt;/code&gt; 에 다음을 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="cc4c9bcb1cd46b0188d3f07b8a9f37d4a11b76c8" translate="yes" xml:space="preserve">
          <source>Finally, for GeoDjango to be able to find the SpatiaLite library, add the following to your &lt;code&gt;settings.py&lt;/code&gt;:</source>
          <target state="translated">마지막으로 GeoDjango가 SpatiaLite 라이브러리를 찾을 수 있도록 &lt;code&gt;settings.py&lt;/code&gt; 에 다음을 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="b144dd9ec36c070dc34d112ead2d5addb8133986" translate="yes" xml:space="preserve">
          <source>Finally, here&amp;rsquo;s an example of a fairly complex logging setup:</source>
          <target state="translated">마지막으로 상당히 복잡한 로깅 설정의 예입니다.</target>
        </trans-unit>
        <trans-unit id="855b6d5f1ccab213dc5b32608617816a33cf5443" translate="yes" xml:space="preserve">
          <source>Finally, if &lt;a href=&quot;#std:setting-DEBUG&quot;&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;False&lt;/code&gt;, you also need to properly set the &lt;a href=&quot;#std:setting-ALLOWED_HOSTS&quot;&gt;&lt;code&gt;ALLOWED_HOSTS&lt;/code&gt;&lt;/a&gt; setting. Failing to do so will result in all requests being returned as &amp;ldquo;Bad Request (400)&amp;rdquo;.</source>
          <target state="translated">마지막으로 &lt;a href=&quot;#std:setting-DEBUG&quot;&gt; &lt;code&gt;DEBUG&lt;/code&gt; &lt;/a&gt; 가 &lt;code&gt;False&lt;/code&gt; 인 경우 &lt;a href=&quot;#std:setting-ALLOWED_HOSTS&quot;&gt; &lt;code&gt;ALLOWED_HOSTS&lt;/code&gt; &lt;/a&gt; 설정도 올바르게 설정해야 합니다. 그렇지 않으면 모든 요청이 &quot;잘못된 요청 (400)&quot;으로 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="d465d68a14cb885607a31e7005a4de85bcfdddcc" translate="yes" xml:space="preserve">
          <source>Finally, if you only need to have a simple syntax for your custom context-updating template tag, consider using the &lt;a href=&quot;#django.template.Library.simple_tag&quot;&gt;&lt;code&gt;simple_tag()&lt;/code&gt;&lt;/a&gt; shortcut, which supports assigning the tag results to a template variable.</source>
          <target state="translated">마지막으로, 사용자 정의 컨텍스트 업데이트 템플릿 태그에 대한 간단한 구문 만 필요한 경우 태그 결과를 템플릿 변수에 할당하는 것을 지원하는 &lt;a href=&quot;#django.template.Library.simple_tag&quot;&gt; &lt;code&gt;simple_tag()&lt;/code&gt; &lt;/a&gt; 바로 가기를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="9fdd2ae212537eaacac0577eae9438d74381650f" translate="yes" xml:space="preserve">
          <source>Finally, if you only want to modify the Python-level behavior of a model, without changing the models fields in any way, you can use &lt;a href=&quot;#proxy-models&quot;&gt;Proxy models&lt;/a&gt;.</source>
          <target state="translated">마지막으로, 모델 필드를 변경하지 않고 모델의 Python 레벨 동작 만 수정하려는 경우 &lt;a href=&quot;#proxy-models&quot;&gt;프록시 모델을&lt;/a&gt; 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="bd4ebdb64c40e31366b0e2c24cb39052f3a86668" translate="yes" xml:space="preserve">
          <source>Finally, if you want complete control over of a field &amp;ndash; including its type, validators, required, etc. &amp;ndash; you can do this by declaratively specifying fields like you would in a regular &lt;code&gt;Form&lt;/code&gt;.</source>
          <target state="translated">마지막으로 유형, 유효성 검사기, 필수 등을 포함하여 필드를 완전히 제어하려면 일반 &lt;code&gt;Form&lt;/code&gt; 에서와 같이 필드를 선언적으로 지정하여이를 수행 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="dfcbb1d9824d6d47858c41668312ca8ed762220a" translate="yes" xml:space="preserve">
          <source>Finally, if you want to delete all the keys in the cache, use &lt;code&gt;cache.clear()&lt;/code&gt;. Be careful with this; &lt;code&gt;clear()&lt;/code&gt; will remove &lt;em&gt;everything&lt;/em&gt; from the cache, not just the keys set by your application.</source>
          <target state="translated">마지막으로 캐시에서 모든 키를 삭제하려면 &lt;code&gt;cache.clear()&lt;/code&gt; . 이것에 조심하십시오; &lt;code&gt;clear()&lt;/code&gt; 는 응용 프로그램에서 설정 한 키뿐만 아니라 캐시에서 &lt;em&gt;모든 것을&lt;/em&gt; 제거 합니다.</target>
        </trans-unit>
        <trans-unit id="4e79f320cb0240d33a245677392be00e0e634041" translate="yes" xml:space="preserve">
          <source>Finally, if your column requires truly complex SQL setup, return &lt;code&gt;None&lt;/code&gt; from &lt;a href=&quot;../ref/models/fields#django.db.models.Field.db_type&quot;&gt;&lt;code&gt;db_type()&lt;/code&gt;&lt;/a&gt;. This will cause Django&amp;rsquo;s SQL creation code to skip over this field. You are then responsible for creating the column in the right table in some other way, of course, but this gives you a way to tell Django to get out of the way.</source>
          <target state="translated">마지막으로 열에 복잡한 SQL 설정이 필요한 경우 &lt;a href=&quot;../ref/models/fields#django.db.models.Field.db_type&quot;&gt; &lt;code&gt;db_type()&lt;/code&gt; &lt;/a&gt; 에서 &lt;code&gt;None&lt;/code&gt; 을 반환하십시오 . 이로 인해 Django의 SQL 생성 코드가이 필드를 건너 뜁니다. 그런 다음 다른 방법으로 오른쪽 테이블에 열을 생성해야하지만 Django에 방해가되지 않도록 지시 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4b372199964e2fb24560340217adf39c6cb2e9b6" translate="yes" xml:space="preserve">
          <source>Finally, in order to help you locate code that needs upgrading, Django raises a warning when you attempt to save a naive datetime to the database:</source>
          <target state="translated">마지막으로 업그레이드가 필요한 코드를 찾기 위해 Django는 순진한 날짜 시간을 데이터베이스에 저장하려고 할 때 경고를 표시합니다.</target>
        </trans-unit>
        <trans-unit id="a8ceea170904d12a1b2a305076f5373f10971acf" translate="yes" xml:space="preserve">
          <source>Finally, in the above example, we remember to mark the result as safe so that our HTML is inserted directly into the template without further escaping.</source>
          <target state="translated">마지막으로 위의 예에서 결과가 안전한 것으로 표시하여 HTML이 더 이상 이스케이프되지 않고 템플릿에 직접 삽입되도록해야합니다.</target>
        </trans-unit>
        <trans-unit id="3b58b4fc0d37b0500904ca859d6f665a75001b2b" translate="yes" xml:space="preserve">
          <source>Finally, in the settings file, we add the following (substituting &lt;code&gt;path.to.&lt;/code&gt; with the actual Python path to the module(s) where the routers are defined):</source>
          <target state="translated">마지막으로 설정 파일에서 다음을 추가합니다 ( 경로가 정의 된 모듈에 실제 Python 경로를 사용하여 &lt;code&gt;path.to.&lt;/code&gt; 로 대체 ).</target>
        </trans-unit>
        <trans-unit id="18faf076ef353dea3341f0a68404cd92fe6d44d6" translate="yes" xml:space="preserve">
          <source>Finally, it&amp;rsquo;s important to call &lt;code&gt;showPage()&lt;/code&gt; and &lt;code&gt;save()&lt;/code&gt; on the PDF file.</source>
          <target state="translated">마지막으로 PDF 파일에서 &lt;code&gt;showPage()&lt;/code&gt; 및 &lt;code&gt;save()&lt;/code&gt; 를 호출하는 것이 중요 합니다.</target>
        </trans-unit>
        <trans-unit id="d710d1ce0f9f49d4bfebd253087693a7db1b18cf" translate="yes" xml:space="preserve">
          <source>Finally, it&amp;rsquo;s important to note that the Django database layer is merely an interface to your database. You can access your database via other tools, programming languages or database frameworks; there&amp;rsquo;s nothing Django-specific about your database.</source>
          <target state="translated">마지막으로 Django 데이터베이스 계층은 데이터베이스에 대한 인터페이스 일뿐입니다. 다른 도구, 프로그래밍 언어 또는 데이터베이스 프레임 워크를 통해 데이터베이스에 액세스 할 수 있습니다. 데이터베이스에 대해 장고 고유의 것은 없습니다.</target>
        </trans-unit>
        <trans-unit id="855182574bd0f55fdd45d0ca39998798d4c219a1" translate="yes" xml:space="preserve">
          <source>Finally, note a relationship is defined, using &lt;a href=&quot;../ref/models/fields#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;ForeignKey&lt;/code&gt;&lt;/a&gt;. That tells Django each &lt;code&gt;Choice&lt;/code&gt; is related to a single &lt;code&gt;Question&lt;/code&gt;. Django supports all the common database relationships: many-to-one, many-to-many, and one-to-one.</source>
          <target state="translated">마지막으로 &lt;a href=&quot;../ref/models/fields#django.db.models.ForeignKey&quot;&gt; &lt;code&gt;ForeignKey&lt;/code&gt; 를&lt;/a&gt; 사용하여 관계가 정의됩니다 . 그것은 장고에게 각각의 &lt;code&gt;Choice&lt;/code&gt; 이 하나의 &lt;code&gt;Question&lt;/code&gt; 과 관련이 있음을 알려줍니다 . Django는 다 대일, 다 대다 및 일대일과 같은 모든 공통 데이터베이스 관계를 지원합니다.</target>
        </trans-unit>
        <trans-unit id="6314e42c3f9470281aa2864e7c7681c40b8c6ccf" translate="yes" xml:space="preserve">
          <source>Finally, note that you can call &lt;code&gt;filter()&lt;/code&gt;, &lt;code&gt;order_by()&lt;/code&gt;, etc. after the &lt;code&gt;values()&lt;/code&gt; call, that means that these two calls are identical:</source>
          <target state="translated">마지막으로 &lt;code&gt;values()&lt;/code&gt; 호출 후에 &lt;code&gt;filter()&lt;/code&gt; , &lt;code&gt;order_by()&lt;/code&gt; 등을 호출 할 수 있습니다 . 즉,이 두 호출은 동일합니다.</target>
        </trans-unit>
        <trans-unit id="e9e0c432d4c1c0f324717c7c1003e36a61fecea4" translate="yes" xml:space="preserve">
          <source>Finally, note that you can override the form field used for a given model field. See &lt;a href=&quot;#overriding-the-default-fields&quot;&gt;Overriding the default fields&lt;/a&gt; below.</source>
          <target state="translated">마지막으로, 주어진 모델 필드에 사용 된 양식 필드를 대체 할 수 있습니다. 아래 &lt;a href=&quot;#overriding-the-default-fields&quot;&gt;의 기본 필드 재정의를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="9743b898367474965ebf376aa3504c5be173f876" translate="yes" xml:space="preserve">
          <source>Finally, note that you can&amp;rsquo;t define multiple &lt;a href=&quot;builtins#std:templatetag-block&quot;&gt;&lt;code&gt;block&lt;/code&gt;&lt;/a&gt; tags with the same name in the same template. This limitation exists because a block tag works in &amp;ldquo;both&amp;rdquo; directions. That is, a block tag doesn&amp;rsquo;t just provide a hole to fill &amp;ndash; it also defines the content that fills the hole in the &lt;em&gt;parent&lt;/em&gt;. If there were two similarly-named &lt;a href=&quot;builtins#std:templatetag-block&quot;&gt;&lt;code&gt;block&lt;/code&gt;&lt;/a&gt; tags in a template, that template&amp;rsquo;s parent wouldn&amp;rsquo;t know which one of the blocks&amp;rsquo; content to use.</source>
          <target state="translated">마지막으로 같은 템플릿에서 같은 이름으로 여러 &lt;a href=&quot;builtins#std:templatetag-block&quot;&gt; &lt;code&gt;block&lt;/code&gt; &lt;/a&gt; 태그를 정의 할 수 없습니다 . 이 제한은 블록 태그가&amp;ldquo;두&amp;rdquo;방향으로 작동하기 때문에 존재합니다. 즉, 블록 태그는 채울 구멍을 제공 할뿐 아니라 &lt;em&gt;부모&lt;/em&gt; 의 구멍을 채우는 내용도 정의합니다 . 템플릿에 비슷한 이름의 &lt;a href=&quot;builtins#std:templatetag-block&quot;&gt; &lt;code&gt;block&lt;/code&gt; &lt;/a&gt; 태그 가 두 개 있으면 해당 템플릿의 부모는 사용할 블록 내용 중 하나를 알 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="09b7888ce3860953a8e97b5c6c5cb529ccb8ba65" translate="yes" xml:space="preserve">
          <source>Finally, note that you&amp;rsquo;ll probably want to keep a normal (non-site-specific) &lt;code&gt;Manager&lt;/code&gt; on your model, even if you use &lt;a href=&quot;#django.contrib.sites.managers.CurrentSiteManager&quot;&gt;&lt;code&gt;CurrentSiteManager&lt;/code&gt;&lt;/a&gt;. As explained in the &lt;a href=&quot;../../topics/db/managers&quot;&gt;manager documentation&lt;/a&gt;, if you define a manager manually, then Django won&amp;rsquo;t create the automatic &lt;code&gt;objects = models.Manager()&lt;/code&gt; manager for you. Also note that certain parts of Django &amp;ndash; namely, the Django admin site and generic views &amp;ndash; use whichever manager is defined &lt;em&gt;first&lt;/em&gt; in the model, so if you want your admin site to have access to all objects (not just site-specific ones), put &lt;code&gt;objects = models.Manager()&lt;/code&gt; in your model, before you define &lt;a href=&quot;#django.contrib.sites.managers.CurrentSiteManager&quot;&gt;&lt;code&gt;CurrentSiteManager&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">마지막으로, &lt;a href=&quot;#django.contrib.sites.managers.CurrentSiteManager&quot;&gt; &lt;code&gt;CurrentSiteManager&lt;/code&gt; &lt;/a&gt; 를 사용하더라도 모델에 일반 (사이트 별이 아닌) &lt;code&gt;Manager&lt;/code&gt; 를 유지하고 싶을 것입니다 . &lt;a href=&quot;../../topics/db/managers&quot;&gt;관리자 문서에&lt;/a&gt; 설명 된대로 관리자를 수동으로 정의하면 Django가 자동 &lt;code&gt;objects = models.Manager()&lt;/code&gt; 관리자를 만들지 않습니다 . 또한 Django의 특정 부분 (즉, Django 관리 사이트 및 일반보기) 은 모델에서 가장 &lt;em&gt;먼저&lt;/em&gt; 정의 된 관리자를 사용 하므로 관리 사이트가 모든 사이트 (사이트 별 관리가 아닌)에 액세스하려는 경우, &lt;a href=&quot;#django.contrib.sites.managers.CurrentSiteManager&quot;&gt; &lt;code&gt;CurrentSiteManager&lt;/code&gt; &lt;/a&gt; 를 정의하기 전에 모델 에 &lt;code&gt;objects = models.Manager()&lt;/code&gt; 를 넣습니다 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="597d26c9a6435c4d3d729d8b833ba9daedca211d" translate="yes" xml:space="preserve">
          <source>Finally, our calendar system contains interesting traps for computers:</source>
          <target state="translated">마지막으로, 캘린더 시스템에는 컴퓨터를위한 흥미로운 함정이 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="5c2802a46ddcce0d4a717df48b205688d98ef322" translate="yes" xml:space="preserve">
          <source>Finally, realize that &lt;code&gt;update()&lt;/code&gt; does an update at the SQL level and, thus, does not call any &lt;code&gt;save()&lt;/code&gt; methods on your models, nor does it emit the &lt;a href=&quot;../signals#django.db.models.signals.pre_save&quot;&gt;&lt;code&gt;pre_save&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../signals#django.db.models.signals.post_save&quot;&gt;&lt;code&gt;post_save&lt;/code&gt;&lt;/a&gt; signals (which are a consequence of calling &lt;a href=&quot;instances#django.db.models.Model.save&quot;&gt;&lt;code&gt;Model.save()&lt;/code&gt;&lt;/a&gt;). If you want to update a bunch of records for a model that has a custom &lt;a href=&quot;instances#django.db.models.Model.save&quot;&gt;&lt;code&gt;save()&lt;/code&gt;&lt;/a&gt; method, loop over them and call &lt;a href=&quot;instances#django.db.models.Model.save&quot;&gt;&lt;code&gt;save()&lt;/code&gt;&lt;/a&gt;, like this:</source>
          <target state="translated">마지막으로 &lt;code&gt;update()&lt;/code&gt; 는 SQL 수준에서 업데이트를 수행하므로 모델에서 &lt;code&gt;save()&lt;/code&gt; 메서드를 호출하지 않으며 &lt;a href=&quot;../signals#django.db.models.signals.pre_save&quot;&gt; &lt;code&gt;pre_save&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;../signals#django.db.models.signals.post_save&quot;&gt; &lt;code&gt;post_save&lt;/code&gt; &lt;/a&gt; 신호를 내 &lt;a href=&quot;instances#django.db.models.Model.save&quot;&gt; &lt;code&gt;Model.save()&lt;/code&gt; &lt;/a&gt; ). 사용자 정의 &lt;a href=&quot;instances#django.db.models.Model.save&quot;&gt; &lt;code&gt;save()&lt;/code&gt; &lt;/a&gt; 메소드 가있는 모델의 레코드를 업데이트 하려면 해당 레코드를 반복하고 다음과 같이 &lt;a href=&quot;instances#django.db.models.Model.save&quot;&gt; &lt;code&gt;save()&lt;/code&gt; &lt;/a&gt; 호출 하십시오.</target>
        </trans-unit>
        <trans-unit id="cef327d837a6ebcf77f58945fc7da002005d28f4" translate="yes" xml:space="preserve">
          <source>Finally, register the tag with your module&amp;rsquo;s &lt;code&gt;Library&lt;/code&gt; instance, as explained in &lt;a href=&quot;#howto-writing-custom-template-tags&quot;&gt;writing custom template tags&lt;/a&gt; above. Example:</source>
          <target state="translated">마지막으로, 위의 &lt;a href=&quot;#howto-writing-custom-template-tags&quot;&gt;사용자 정의 템플릿 태그 작성에&lt;/a&gt; 설명 된대로 모듈의 &lt;code&gt;Library&lt;/code&gt; 인스턴스에 태그를 등록하십시오 . 예:</target>
        </trans-unit>
        <trans-unit id="8b84b5ca6b61dd7ec3e13cb87b04368b16c3e016" translate="yes" xml:space="preserve">
          <source>Finally, register your &lt;code&gt;Person&lt;/code&gt; and &lt;code&gt;Group&lt;/code&gt; models with the admin site:</source>
          <target state="translated">마지막으로, 관리 사이트에 &lt;code&gt;Person&lt;/code&gt; 및 &lt;code&gt;Group&lt;/code&gt; 모델을 등록하십시오 .</target>
        </trans-unit>
        <trans-unit id="9ae59f1cd4f96cc1501fbd570f2103e93dd7c909" translate="yes" xml:space="preserve">
          <source>Finally, specify the custom model as the default user model for your project using the &lt;a href=&quot;../../ref/settings#std:setting-AUTH_USER_MODEL&quot;&gt;&lt;code&gt;AUTH_USER_MODEL&lt;/code&gt;&lt;/a&gt; setting in your &lt;code&gt;settings.py&lt;/code&gt;:</source>
          <target state="translated">마지막으로 &lt;code&gt;settings.py&lt;/code&gt; 에서 &lt;a href=&quot;../../ref/settings#std:setting-AUTH_USER_MODEL&quot;&gt; &lt;code&gt;AUTH_USER_MODEL&lt;/code&gt; &lt;/a&gt; 설정을 사용하여 프로젝트의 기본 사용자 모델로 사용자 지정 모델을 지정하십시오 .</target>
        </trans-unit>
        <trans-unit id="1de580b6192d9e344a15d96680c32ba2b8d2caae" translate="yes" xml:space="preserve">
          <source>Finally, the Django-provided base translation in &lt;code&gt;django/conf/locale&lt;/code&gt; is used as a fallback.</source>
          <target state="translated">마지막으로 &lt;code&gt;django/conf/locale&lt;/code&gt; 의 Django 제공 기본 번역 이 폴백으로 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="c63e577d01012c7cf8876a70c793515073c96915" translate="yes" xml:space="preserve">
          <source>Finally, the following forms are tied to &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User&quot;&gt;&lt;code&gt;User&lt;/code&gt;&lt;/a&gt; and need to be rewritten or extended to work with a custom user model:</source>
          <target state="translated">마지막으로, 다음 양식은 &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User&quot;&gt; &lt;code&gt;User&lt;/code&gt; &lt;/a&gt; 와 연결 되어 있으며 사용자 정의 사용자 모델을 사용하려면 다시 작성하거나 확장해야합니다.</target>
        </trans-unit>
        <trans-unit id="329cb001d49bddce33496c86e763e7caf7228133" translate="yes" xml:space="preserve">
          <source>Finally, the size of a cookie can have an impact on the &lt;a href=&quot;https://yuiblog.com/blog/2007/03/01/performance-research-part-3/&quot;&gt;speed of your site&lt;/a&gt;.</source>
          <target state="translated">마지막으로 쿠키의 크기는 &lt;a href=&quot;https://yuiblog.com/blog/2007/03/01/performance-research-part-3/&quot;&gt;사이트 속도에&lt;/a&gt; 영향을 줄 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="9a9fb92891ed9e384c8c066d50ed2e6aa79110ed" translate="yes" xml:space="preserve">
          <source>Finally, there is the &lt;a href=&quot;#django.contrib.gis.geos.fromfile&quot;&gt;&lt;code&gt;fromfile()&lt;/code&gt;&lt;/a&gt; factory method which returns a &lt;a href=&quot;#django.contrib.gis.geos.GEOSGeometry&quot;&gt;&lt;code&gt;GEOSGeometry&lt;/code&gt;&lt;/a&gt; object from a file:</source>
          <target state="translated">마지막으로 파일에서 &lt;a href=&quot;#django.contrib.gis.geos.GEOSGeometry&quot;&gt; &lt;code&gt;GEOSGeometry&lt;/code&gt; &lt;/a&gt; 객체 를 반환하는 fromfile &lt;a href=&quot;#django.contrib.gis.geos.fromfile&quot;&gt; &lt;code&gt;fromfile()&lt;/code&gt; &lt;/a&gt; 팩토리 메소드 가 있습니다.</target>
        </trans-unit>
        <trans-unit id="4e4bdea9995161777366d8c1c03e09daac66d940" translate="yes" xml:space="preserve">
          <source>Finally, to avoid repetitive fallback code, the framework provides a &lt;a href=&quot;#django.contrib.sites.shortcuts.get_current_site&quot;&gt;&lt;code&gt;django.contrib.sites.shortcuts.get_current_site()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">마지막으로 반복되는 대체 코드를 피하기 위해 프레임 워크는 &lt;a href=&quot;#django.contrib.sites.shortcuts.get_current_site&quot;&gt; &lt;code&gt;django.contrib.sites.shortcuts.get_current_site()&lt;/code&gt; &lt;/a&gt; 함수를 제공 합니다.</target>
        </trans-unit>
        <trans-unit id="ea48d70c9f2a1aeff3913cc638d5e4f3d64cde28" translate="yes" xml:space="preserve">
          <source>Finally, we hook these new views into the URLconf:</source>
          <target state="translated">마지막으로 이러한 새로운 뷰를 URLconf에 연결합니다.</target>
        </trans-unit>
        <trans-unit id="554f9eb64d754ccae5e2a1ca7de1048bc404dc95" translate="yes" xml:space="preserve">
          <source>Finally, we implement the rest of the methods that allow our query expression to play nice with other query expressions:</source>
          <target state="translated">마지막으로, 쿼리 표현식이 다른 쿼리 표현식과 잘 작동 할 수 있도록 나머지 메소드를 구현합니다.</target>
        </trans-unit>
        <trans-unit id="f96555ce97c75bd6adcf9e62917e490f288ab96b" translate="yes" xml:space="preserve">
          <source>Finally, we&amp;rsquo;ll add a &lt;a href=&quot;../../ref/settings#std:setting-PASSWORD_HASHERS&quot;&gt;&lt;code&gt;PASSWORD_HASHERS&lt;/code&gt;&lt;/a&gt; setting:</source>
          <target state="translated">마지막으로 &lt;a href=&quot;../../ref/settings#std:setting-PASSWORD_HASHERS&quot;&gt; &lt;code&gt;PASSWORD_HASHERS&lt;/code&gt; &lt;/a&gt; 설정을 추가 합니다 :</target>
        </trans-unit>
        <trans-unit id="a88fe2f705ab58ff5303b4a2b755e83de2f7b0ff" translate="yes" xml:space="preserve">
          <source>Finally, you can also use a &lt;a href=&quot;../db/managers#django.db.models.Manager&quot;&gt;&lt;code&gt;Manager&lt;/code&gt;&lt;/a&gt;. This is useful for example if you have a &lt;a href=&quot;../db/managers#custom-managers&quot;&gt;custom manager&lt;/a&gt;:</source>
          <target state="translated">마지막으로 &lt;a href=&quot;../db/managers#django.db.models.Manager&quot;&gt; &lt;code&gt;Manager&lt;/code&gt; &lt;/a&gt; 를 사용할 수도 있습니다 . 예를 들어 &lt;a href=&quot;../db/managers#custom-managers&quot;&gt;사용자 정의 관리자&lt;/a&gt; 가있는 경우 유용합니다 .</target>
        </trans-unit>
        <trans-unit id="c2a581eaa73c38481020b614fe636e3f569653d5" translate="yes" xml:space="preserve">
          <source>Finally, you can conditionally enable or disable actions on a per-request (and hence per-user basis) by overriding &lt;a href=&quot;#django.contrib.admin.ModelAdmin.get_actions&quot;&gt;&lt;code&gt;ModelAdmin.get_actions()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">마지막으로 &lt;a href=&quot;#django.contrib.admin.ModelAdmin.get_actions&quot;&gt; &lt;code&gt;ModelAdmin.get_actions()&lt;/code&gt; &lt;/a&gt; 를 재정 의하여 요청별로 (및 사용자별로) 조치를 조건부로 사용 또는 사용 안함으로 설정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="64e614e36dff5fc2ddcd15c0ac50da2771ffe25d" translate="yes" xml:space="preserve">
          <source>Finally, you can pass &lt;code&gt;HttpResponse&lt;/code&gt; an iterator rather than strings. &lt;code&gt;HttpResponse&lt;/code&gt; will consume the iterator immediately, store its content as a string, and discard it. Objects with a &lt;code&gt;close()&lt;/code&gt; method such as files and generators are immediately closed.</source>
          <target state="translated">마지막으로 문자열 대신 반복자를 &lt;code&gt;HttpResponse&lt;/code&gt; 에 전달할 수 있습니다 . &lt;code&gt;HttpResponse&lt;/code&gt; 는 반복자를 즉시 ​​사용하고 내용을 문자열로 저장 한 후 버립니다. 파일 및 생성기와 같은 &lt;code&gt;close()&lt;/code&gt; 메서드 가있는 객체 는 즉시 닫힙니다.</target>
        </trans-unit>
        <trans-unit id="24082142a7bee0d7266eae78b1faddd1c1cc9fa6" translate="yes" xml:space="preserve">
          <source>Finally, you can use configured engines directly:</source>
          <target state="translated">마지막으로 구성된 엔진을 직접 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e37d4b35a277a40229c7c1b83fd098e99922b7fa" translate="yes" xml:space="preserve">
          <source>Finally, you may run the test as follows:</source>
          <target state="translated">마지막으로 다음과 같이 테스트를 실행할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ef950eb0217067af3f081ee9a17610cab8bc677b" translate="yes" xml:space="preserve">
          <source>Finally, you must specify a &lt;a href=&quot;settings#std:setting-DATABASE-ENGINE&quot;&gt;&lt;code&gt;DATABASE-ENGINE&lt;/code&gt;&lt;/a&gt; in your &lt;code&gt;settings.py&lt;/code&gt; file:</source>
          <target state="translated">마지막으로 &lt;code&gt;settings.py&lt;/code&gt; 파일 에 &lt;a href=&quot;settings#std:setting-DATABASE-ENGINE&quot;&gt; &lt;code&gt;DATABASE-ENGINE&lt;/code&gt; &lt;/a&gt; 을 지정해야 합니다.</target>
        </trans-unit>
        <trans-unit id="9a832465bbf151d241d327e71e691160848f2552" translate="yes" xml:space="preserve">
          <source>Finally, you&amp;rsquo;ll have to actually set the header on your AJAX request, while protecting the CSRF token from being sent to other domains using &lt;a href=&quot;https://api.jquery.com/jQuery.ajax/&quot;&gt;settings.crossDomain&lt;/a&gt; in jQuery 1.5.1 and newer:</source>
          <target state="translated">마지막으로 jQuery 1.5.1 이상에서 &lt;a href=&quot;https://api.jquery.com/jQuery.ajax/&quot;&gt;settings.crossDomain&lt;/a&gt; 을 사용하여 CSRF 토큰이 다른 도메인으로 전송되지 않도록 보호하면서 실제로 AJAX 요청에 헤더를 설정해야합니다 .</target>
        </trans-unit>
        <trans-unit id="ef7c278ab8519615bb5ecd8737b7187faccc3ca3" translate="yes" xml:space="preserve">
          <source>Finally, you&amp;rsquo;ll need to remember to create user accounts before you can use this method. As we explained above, the test runner is executed using a test database, which contains no users by default. As a result, user accounts that are valid on your production site will not work under test conditions. You&amp;rsquo;ll need to create users as part of the test suite &amp;ndash; either manually (using the Django model API) or with a test fixture. Remember that if you want your test user to have a password, you can&amp;rsquo;t set the user&amp;rsquo;s password by setting the password attribute directly &amp;ndash; you must use the &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User.set_password&quot;&gt;&lt;code&gt;set_password()&lt;/code&gt;&lt;/a&gt; function to store a correctly hashed password. Alternatively, you can use the &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.UserManager.create_user&quot;&gt;&lt;code&gt;create_user()&lt;/code&gt;&lt;/a&gt; helper method to create a new user with a correctly hashed password.</source>
          <target state="translated">마지막으로이 방법을 사용하려면 먼저 사용자 계정을 만들어야합니다. 위에서 설명한 것처럼 테스트 러너는 기본적으로 사용자가없는 테스트 데이터베이스를 사용하여 실행됩니다. 결과적으로 프로덕션 사이트에서 유효한 사용자 계정은 테스트 조건에서 작동하지 않습니다. 테스트 스위트의 일부로 사용자 (Django 모델 API 사용) 또는 테스트 픽스처를 사용하여 사용자를 작성해야합니다. 테스트 사용자가 비밀번호를 가지도록하려면 password 속성을 직접 설정하여 사용자 비밀번호를 설정할 수 없습니다. &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User.set_password&quot;&gt; &lt;code&gt;set_password()&lt;/code&gt; &lt;/a&gt; 함수를 사용하여 올바르게 해시 된 비밀번호를 저장해야합니다. 또는 &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.UserManager.create_user&quot;&gt; &lt;code&gt;create_user()&lt;/code&gt; &lt;/a&gt; 헬퍼 메소드를 사용하여 올바르게 해시 된 비밀번호로 새 사용자를 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ca2f376257418ebbe42c6bba7c397875f4d0b018" translate="yes" xml:space="preserve">
          <source>Find all you need to know about the automated admin interface, one of Django&amp;rsquo;s most popular features:</source>
          <target state="translated">Django의 가장 인기있는 기능 중 하나 인 자동 관리 인터페이스에 대해 알아야 할 모든 것을 찾으십시오.</target>
        </trans-unit>
        <trans-unit id="83be5a14f83b93bd2f267cd5495799f028c405bd" translate="yes" xml:space="preserve">
          <source>Finders Module</source>
          <target state="translated">파인더 모듈</target>
        </trans-unit>
        <trans-unit id="10038fb951c11f2f94be750c35ea01b826bd98ad" translate="yes" xml:space="preserve">
          <source>Finding data from your production database when running tests?</source>
          <target state="translated">테스트를 실행할 때 프로덕션 데이터베이스에서 데이터를 찾으십니까?</target>
        </trans-unit>
        <trans-unit id="c719c26326806dda05be19d8dcf178818036ad21" translate="yes" xml:space="preserve">
          <source>Finding your first real ticket</source>
          <target state="translated">첫 번째 실제 티켓 찾기</target>
        </trans-unit>
        <trans-unit id="1f9e8d29ca99e765d9e5e9965a3b638f47f8c831" translate="yes" xml:space="preserve">
          <source>Fink</source>
          <target state="translated">Fink</target>
        </trans-unit>
        <trans-unit id="e427d7820cf1b8e5b50925cc386518036005e42d" translate="yes" xml:space="preserve">
          <source>Firebird</source>
          <target state="translated">Firebird</target>
        </trans-unit>
        <trans-unit id="6571073e23c4fa6e884ba21f0900816b1dbee48f" translate="yes" xml:space="preserve">
          <source>Firefox 3.6.9+</source>
          <target state="translated">Firefox 3.6.9 이상</target>
        </trans-unit>
        <trans-unit id="4dcec4af22f6f720c7f8f4e9497fe78324b1246c" translate="yes" xml:space="preserve">
          <source>First Django imports each item in &lt;a href=&quot;settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">먼저 Django는 &lt;a href=&quot;settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; 의&lt;/a&gt; 각 항목을 가져옵니다 .</target>
        </trans-unit>
        <trans-unit id="8ee7d23eafc97724f82981c3dc7c888430666917" translate="yes" xml:space="preserve">
          <source>First download the latest GDAL release version and untar the archive:</source>
          <target state="translated">먼저 최신 GDAL 릴리스 버전을 다운로드하고 아카이브를 압축 해제하십시오.</target>
        </trans-unit>
        <trans-unit id="c88843d149751ca2a972950ccc6152817e00f53b" translate="yes" xml:space="preserve">
          <source>First is a question shortcut function, &lt;code&gt;create_question&lt;/code&gt;, to take some repetition out of the process of creating questions.</source>
          <target state="translated">먼저 질문 을 만드는 과정에서 반복 되는 질문 바로 가기 함수 인 &lt;code&gt;create_question&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="43035eab990cc69bcd9f23d2944f973548270b12" translate="yes" xml:space="preserve">
          <source>First of all, &lt;code&gt;headline&lt;/code&gt; is not indexed, which will make the underlying database fetch slower.</source>
          <target state="translated">우선, &lt;code&gt;headline&lt;/code&gt; 은 색인화되지 않으므로 기본 데이터베이스 반입 속도가 느려집니다.</target>
        </trans-unit>
        <trans-unit id="99290d59716a55c82e8b063db8bf7f05e1a4b00b" translate="yes" xml:space="preserve">
          <source>First steps</source>
          <target state="translated">첫 단계</target>
        </trans-unit>
        <trans-unit id="20699b2a5803a6e614a59a724943eb463171c0f3" translate="yes" xml:space="preserve">
          <source>First time contributors should also read Django&amp;rsquo;s &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/internals/contributing/new-contributors/&quot;&gt;documentation for first time contributors&lt;/a&gt;. It has lots of good advice for those of us who are new to helping out with Django.</source>
          <target state="translated">최초 기고자는 또한 &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/internals/contributing/new-contributors/&quot;&gt;최초 기고자를위한&lt;/a&gt; Django의 문서를 읽어야 합니다. Django를 처음 접하는 사람들에게 좋은 조언이 많이 있습니다.</target>
        </trans-unit>
        <trans-unit id="77213d5813b86668ea11f1f10608d43f8d41acba" translate="yes" xml:space="preserve">
          <source>First we need to add &lt;a href=&quot;../../ref/models/instances#django.db.models.Model.get_absolute_url&quot;&gt;&lt;code&gt;get_absolute_url()&lt;/code&gt;&lt;/a&gt; to our &lt;code&gt;Author&lt;/code&gt; class:</source>
          <target state="translated">처음에 우리는 추가 할 필요가 &lt;a href=&quot;../../ref/models/instances#django.db.models.Model.get_absolute_url&quot;&gt; &lt;code&gt;get_absolute_url()&lt;/code&gt; &lt;/a&gt; 우리에게 &lt;code&gt;Author&lt;/code&gt; 클래스 :</target>
        </trans-unit>
        <trans-unit id="bc39948ba4573e7943c3bf60f22272eb1d430136" translate="yes" xml:space="preserve">
          <source>First we&amp;rsquo;ll need to create a user who can login to the admin site. Run the following command:</source>
          <target state="translated">먼저 관리자 사이트에 로그인 할 수있는 사용자를 만들어야합니다. 다음 명령을 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="b8fec17a2b622381f0a4b41161e6bbe4d8bdb609" translate="yes" xml:space="preserve">
          <source>First, Django looks for a matching &lt;a href=&quot;#term-application-namespace&quot;&gt;application namespace&lt;/a&gt; (in this example, &lt;code&gt;'polls'&lt;/code&gt;). This will yield a list of instances of that application.</source>
          <target state="translated">먼저 Django는 일치하는 &lt;a href=&quot;#term-application-namespace&quot;&gt;응용 프로그램 네임 스페이스&lt;/a&gt; (이 예에서는 &lt;code&gt;'polls'&lt;/code&gt; )를 찾습니다 . 해당 응용 프로그램의 인스턴스 목록이 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="ef70a6cfb1e8f430c465869e59c076034923c444" translate="yes" xml:space="preserve">
          <source>First, check if you can install SpatiaLite from system packages or binaries.</source>
          <target state="translated">먼저 시스템 패키지 또는 바이너리에서 SpatiaLite를 설치할 수 있는지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="95251784875a5e4d20dd8450c9b80410ac635a7f" translate="yes" xml:space="preserve">
          <source>First, create a directory called &lt;code&gt;static&lt;/code&gt; in your &lt;code&gt;polls&lt;/code&gt; directory. Django will look for static files there, similarly to how Django finds templates inside &lt;code&gt;polls/templates/&lt;/code&gt;.</source>
          <target state="translated">먼저, &lt;code&gt;polls&lt;/code&gt; 디렉토리에 &lt;code&gt;static&lt;/code&gt; 디렉토리를 작성 하십시오 . Django는 Django가 &lt;code&gt;polls/templates/&lt;/code&gt; 내에서 템플릿을 찾는 방법과 유사하게 정적 파일을 찾습니다 .</target>
        </trans-unit>
        <trans-unit id="f96e5da4a1149d193b2bdcddd8b25aef2a1fc28b" translate="yes" xml:space="preserve">
          <source>First, create a directory called &lt;code&gt;templates&lt;/code&gt; in your &lt;code&gt;polls&lt;/code&gt; directory. Django will look for templates in there.</source>
          <target state="translated">먼저, &lt;code&gt;polls&lt;/code&gt; 디렉토리에 &lt;code&gt;templates&lt;/code&gt; 라는 디렉토리를 작성 하십시오 . Django는 거기에서 템플릿을 찾습니다.</target>
        </trans-unit>
        <trans-unit id="1f90c2c681abf881963f9d053d00ec47ee328d19" translate="yes" xml:space="preserve">
          <source>First, create a parent directory for &lt;code&gt;polls&lt;/code&gt;, outside of your Django project. Call this directory &lt;code&gt;django-polls&lt;/code&gt;.</source>
          <target state="translated">먼저 Django 프로젝트 외부 에서 &lt;code&gt;polls&lt;/code&gt; 의 상위 디렉토리를 만듭니다 . 이 디렉토리를 &lt;code&gt;django-polls&lt;/code&gt; 로 호출하십시오 .</target>
        </trans-unit>
        <trans-unit id="07c0c655fdb6b481e371840e5383fd9133c1a098" translate="yes" xml:space="preserve">
          <source>First, define the function that takes the argument and produces a dictionary of data for the result. The important point here is we only need to return a dictionary, not anything more complex. This will be used as a template context for the template fragment. Example:</source>
          <target state="translated">먼저 인수를 사용하여 결과에 대한 데이터 사전을 생성하는 함수를 정의하십시오. 여기서 중요한 점은 더 복잡한 것은 아니지만 사전 만 반환하면된다는 것입니다. 템플릿 조각에 대한 템플릿 컨텍스트로 사용됩니다. 예:</target>
        </trans-unit>
        <trans-unit id="40a6ca6ac1151f0eec3cdc666ba2d0dcfb692276" translate="yes" xml:space="preserve">
          <source>First, download GEOS from the GEOS website and untar the source archive:</source>
          <target state="translated">먼저 GEOS 웹 사이트에서 GEOS를 다운로드하고 소스 아카이브를 압축 해제하십시오.</target>
        </trans-unit>
        <trans-unit id="05ac470b0f07720d2a10c844d43976a668aacc11" translate="yes" xml:space="preserve">
          <source>First, download the PROJ.4 source code and datum shifting files &lt;a href=&quot;#id9&quot; id=&quot;id4&quot;&gt;[1]&lt;/a&gt;:</source>
          <target state="translated">먼저 PROJ.4 소스 코드 및 데이텀 전환 파일 &lt;a href=&quot;#id9&quot; id=&quot;id4&quot;&gt;[1]을&lt;/a&gt; 다운로드하십시오 .</target>
        </trans-unit>
        <trans-unit id="4e268d6f08ea9c850920ac60f90e7a12aac80aa6" translate="yes" xml:space="preserve">
          <source>First, download the latest &lt;a href=&quot;https://www.enterprisedb.com/downloads/postgres-postgresql-downloads&quot;&gt;PostgreSQL 9.x installer&lt;/a&gt; from the &lt;a href=&quot;https://www.enterprisedb.com&quot;&gt;EnterpriseDB&lt;/a&gt; website. After downloading, run the installer, follow the on-screen directions, and keep the default options unless you know the consequences of changing them.</source>
          <target state="translated">먼저 &lt;a href=&quot;https://www.enterprisedb.com&quot;&gt;EnterpriseDB&lt;/a&gt; 웹 사이트 에서 최신 &lt;a href=&quot;https://www.enterprisedb.com/downloads/postgres-postgresql-downloads&quot;&gt;PostgreSQL 9.x 설치 관리자&lt;/a&gt; 를 다운로드하십시오 . 다운로드 후 설치 프로그램을 실행하고 화면의 지시를 따르고 변경 결과를 알지 못하는 경우 기본 옵션을 유지하십시오.</target>
        </trans-unit>
        <trans-unit id="da3b0283ec00b2d4fdd63bac9b59bf3e759edc72" translate="yes" xml:space="preserve">
          <source>First, follow the instructions in the &lt;a href=&quot;index#kyngchaos&quot;&gt;KyngChaos packages&lt;/a&gt; section.</source>
          <target state="translated">먼저 &lt;a href=&quot;index#kyngchaos&quot;&gt;KyngChaos 패키지&lt;/a&gt; 섹션 의 지침을 따르십시오 .</target>
        </trans-unit>
        <trans-unit id="64c0574de613a5a5d855304b6002948bbfb18e08" translate="yes" xml:space="preserve">
          <source>First, here&amp;rsquo;s a configuration which writes all logging from the &lt;a href=&quot;#django-logger&quot;&gt;django&lt;/a&gt; logger to a local file:</source>
          <target state="translated">먼저 &lt;a href=&quot;#django-logger&quot;&gt;django&lt;/a&gt; 로거의 모든 로깅을 로컬 파일에 기록하는 구성이 있습니다.</target>
        </trans-unit>
        <trans-unit id="4065a170cb0a7fcfc755d6ce0c9d5d28c68c14e5" translate="yes" xml:space="preserve">
          <source>First, invoke the Django shell:</source>
          <target state="translated">먼저 Django 쉘을 호출하십시오.</target>
        </trans-unit>
        <trans-unit id="72e9467116dd2961d61a735a8c47c0bc77e85890" translate="yes" xml:space="preserve">
          <source>First, it looks for the language prefix in the requested URL. This is only performed when you are using the &lt;code&gt;i18n_patterns&lt;/code&gt; function in your root URLconf. See &lt;a href=&quot;#url-internationalization&quot;&gt;Internationalization: in URL patterns&lt;/a&gt; for more information about the language prefix and how to internationalize URL patterns.</source>
          <target state="translated">먼저 요청 된 URL에서 언어 접두사를 찾습니다. 루트 URLconf에서 &lt;code&gt;i18n_patterns&lt;/code&gt; 함수를 사용하는 경우에만 수행됩니다 . 참조 &lt;a href=&quot;#url-internationalization&quot;&gt;국제화 : URL 패턴에&lt;/a&gt; 언어 접두사와 방법 URL 패턴을 국제화하는 방법에 대한 자세한 내용은.</target>
        </trans-unit>
        <trans-unit id="f6bfabb8d777bbdb47935b9c331aa5bdea0d0a3c" translate="yes" xml:space="preserve">
          <source>First, it tries to call a method, passing the &lt;code&gt;obj&lt;/code&gt; argument, where &lt;code&gt;obj&lt;/code&gt; is the object returned by &lt;code&gt;get_object()&lt;/code&gt;.</source>
          <target state="translated">먼저 &lt;code&gt;obj&lt;/code&gt; 인수를 전달하여 메소드를 호출하려고 시도합니다 . 여기서 &lt;code&gt;obj&lt;/code&gt; 는 &lt;code&gt;get_object()&lt;/code&gt; 반환 한 객체 입니다.</target>
        </trans-unit>
        <trans-unit id="f1c355f311bddfd7d6f814d29cbf65fae7c521e3" translate="yes" xml:space="preserve">
          <source>First, make sure your template settings are checking inside app directories:</source>
          <target state="translated">먼저 템플릿 설정이 앱 디렉토리 내부를 확인하고 있는지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="4bbd700df3056ac3723d7fcd139048bbfde7bbcc" translate="yes" xml:space="preserve">
          <source>First, open the &lt;code&gt;polls/urls.py&lt;/code&gt; URLconf and change it like so:</source>
          <target state="translated">먼저, &lt;code&gt;polls/urls.py&lt;/code&gt; URLconf를 열고 다음 과 같이 변경하십시오 :</target>
        </trans-unit>
        <trans-unit id="43dd5d61895190dc15dd5b6148805d46a692e3ef" translate="yes" xml:space="preserve">
          <source>First, we import the class &lt;a href=&quot;../../ref/request-response#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt; from the &lt;a href=&quot;../../ref/request-response#module-django.http&quot;&gt;&lt;code&gt;django.http&lt;/code&gt;&lt;/a&gt; module, along with Python&amp;rsquo;s &lt;code&gt;datetime&lt;/code&gt; library.</source>
          <target state="translated">먼저 &lt;a href=&quot;../../ref/request-response#module-django.http&quot;&gt; &lt;code&gt;django.http&lt;/code&gt; &lt;/a&gt; 모듈 에서 &lt;a href=&quot;../../ref/request-response#django.http.HttpResponse&quot;&gt; &lt;code&gt;HttpResponse&lt;/code&gt; &lt;/a&gt; 클래스 를 파이썬의 &lt;code&gt;datetime&lt;/code&gt; 라이브러리 와 함께 가져옵니다 .</target>
        </trans-unit>
        <trans-unit id="145a1430fd08e0dbf0cb33c1604421f8f2437c3d" translate="yes" xml:space="preserve">
          <source>First, we need to define a receiver function. A receiver can be any Python function or method:</source>
          <target state="translated">먼저 리시버 함수를 정의해야합니다. 수신자는 모든 파이썬 함수 또는 메소드 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="13baffa2f5f7de1c46ad5da632df46aaaa24a8de" translate="yes" xml:space="preserve">
          <source>First, we&amp;rsquo;d need to add an author detail bit in the URLconf to point to a custom view:</source>
          <target state="translated">먼저 사용자 정의보기를 가리 키기 위해 URLconf에 작성자 세부 사항 비트를 추가해야합니다.</target>
        </trans-unit>
        <trans-unit id="8454a5ec130fde2ddf69d758a0b9cacddf54e6f8" translate="yes" xml:space="preserve">
          <source>First, we&amp;rsquo;ll add the custom hasher:</source>
          <target state="translated">먼저 커스텀 hasher를 추가합니다 :</target>
        </trans-unit>
        <trans-unit id="c2a03644e55ef699e43555777f47af59c4cf407e" translate="yes" xml:space="preserve">
          <source>First, we&amp;rsquo;ll explore overriding templates by creating replacement templates in your project&amp;rsquo;s templates directory.</source>
          <target state="translated">먼저 프로젝트의 템플릿 디렉토리에 대체 템플릿을 만들어 템플릿 재정의에 대해 알아 봅니다.</target>
        </trans-unit>
        <trans-unit id="fdf45d6a678bfbb18d68f2f58940017b92430b08" translate="yes" xml:space="preserve">
          <source>First, we&amp;rsquo;ll need to write a function that gets called when the action is triggered from the admin. Action functions are regular functions that take three arguments:</source>
          <target state="translated">먼저 관리자로부터 작업이 트리거 될 때 호출되는 함수를 작성해야합니다. 액션 함수는 세 가지 인수를 취하는 일반 함수입니다.</target>
        </trans-unit>
        <trans-unit id="4e7eccbd6c4b76c9e1f9ca2b9a2f55acb81f48d2" translate="yes" xml:space="preserve">
          <source>First, you can let the formset do most of the work:</source>
          <target state="translated">먼저 폼셋이 대부분의 작업을 수행하도록 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5bf556882e52bc156e88cba7a5467001923ad11e" translate="yes" xml:space="preserve">
          <source>First, you must add the &lt;a href=&quot;../ref/middleware#django.contrib.auth.middleware.RemoteUserMiddleware&quot;&gt;&lt;code&gt;django.contrib.auth.middleware.RemoteUserMiddleware&lt;/code&gt;&lt;/a&gt; to the &lt;a href=&quot;../ref/settings#std:setting-MIDDLEWARE&quot;&gt;&lt;code&gt;MIDDLEWARE&lt;/code&gt;&lt;/a&gt; setting &lt;strong&gt;after&lt;/strong&gt; the &lt;a href=&quot;../ref/middleware#django.contrib.auth.middleware.AuthenticationMiddleware&quot;&gt;&lt;code&gt;django.contrib.auth.middleware.AuthenticationMiddleware&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">첫째, 당신은 추가해야합니다 &lt;a href=&quot;../ref/middleware#django.contrib.auth.middleware.RemoteUserMiddleware&quot;&gt; &lt;code&gt;django.contrib.auth.middleware.RemoteUserMiddleware&lt;/code&gt; 을&lt;/a&gt; 받는 &lt;a href=&quot;../ref/settings#std:setting-MIDDLEWARE&quot;&gt; &lt;code&gt;MIDDLEWARE&lt;/code&gt; &lt;/a&gt; 설정 &lt;strong&gt;후 &lt;/strong&gt;&lt;a href=&quot;../ref/middleware#django.contrib.auth.middleware.AuthenticationMiddleware&quot;&gt; &lt;code&gt;django.contrib.auth.middleware.AuthenticationMiddleware&lt;/code&gt; &lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="73abbbb12778e4c863b4cfddcc6f67ea55cc0130" translate="yes" xml:space="preserve">
          <source>First, you must get the CSRF token. How to do that depends on whether or not the &lt;a href=&quot;settings#std:setting-CSRF_USE_SESSIONS&quot;&gt;&lt;code&gt;CSRF_USE_SESSIONS&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;settings#std:setting-CSRF_COOKIE_HTTPONLY&quot;&gt;&lt;code&gt;CSRF_COOKIE_HTTPONLY&lt;/code&gt;&lt;/a&gt; settings are enabled.</source>
          <target state="translated">먼저 CSRF 토큰을 얻어야합니다. 이를 수행하는 방법은 &lt;a href=&quot;settings#std:setting-CSRF_USE_SESSIONS&quot;&gt; &lt;code&gt;CSRF_USE_SESSIONS&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;settings#std:setting-CSRF_COOKIE_HTTPONLY&quot;&gt; &lt;code&gt;CSRF_COOKIE_HTTPONLY&lt;/code&gt; &lt;/a&gt; 설정의 사용 가능 여부에 따라 다릅니다 .</target>
        </trans-unit>
        <trans-unit id="3436659d0b5e771764d4e0fb1222b0bbb9e16717" translate="yes" xml:space="preserve">
          <source>Firstly - the &lt;code&gt;MembershipInline&lt;/code&gt; class references &lt;code&gt;Group.members.through&lt;/code&gt;. The &lt;code&gt;through&lt;/code&gt; attribute is a reference to the model that manages the many-to-many relation. This model is automatically created by Django when you define a many-to-many field.</source>
          <target state="translated">먼저 &lt;code&gt;MembershipInline&lt;/code&gt; 클래스는 &lt;code&gt;Group.members.through&lt;/code&gt; 를 참조 합니다 . &lt;code&gt;through&lt;/code&gt; 속성은 다 대다 관계를 관리하는 모델에 대한 참조입니다. 이 모델은 다 대다 필드를 정의 할 때 Django가 자동으로 작성합니다.</target>
        </trans-unit>
        <trans-unit id="47a2156582e62c3760eb7ba24dc66644c3150981" translate="yes" xml:space="preserve">
          <source>Firstly, in a real-life case you need to consider what is happening before and after your count to work out what&amp;rsquo;s an optimal way of doing it &lt;em&gt;in that particular context&lt;/em&gt;. The database optimization documents describes &lt;a href=&quot;db/optimization#overuse-of-count-and-exists&quot;&gt;a case where counting in the template would be better&lt;/a&gt;.</source>
          <target state="translated">첫째, 실제 사례 &lt;em&gt;에서는 특정 전후 상황에서&lt;/em&gt; 이를 수행하는 최적의 방법을 찾기 위해 카운트 전후에 무슨 일이 일어나고 있는지 고려해야합니다 . 데이터베이스 최적화 문서 &lt;a href=&quot;db/optimization#overuse-of-count-and-exists&quot;&gt;는 템플릿의 계산이 더 나은 경우를&lt;/a&gt; 설명 합니다 .</target>
        </trans-unit>
        <trans-unit id="654babb9ef1f86c0cc82cbdc43ce71dd33c0363f" translate="yes" xml:space="preserve">
          <source>Firstly, in order to upload files, you&amp;rsquo;ll need to make sure that your &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; element correctly defines the &lt;code&gt;enctype&lt;/code&gt; as &lt;code&gt;&quot;multipart/form-data&quot;&lt;/code&gt;:</source>
          <target state="translated">먼저 파일을 업로드하려면 &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; 요소가 &lt;code&gt;enctype&lt;/code&gt; 을 &lt;code&gt;&quot;multipart/form-data&quot;&lt;/code&gt; 로 올바르게 정의해야합니다 .</target>
        </trans-unit>
        <trans-unit id="ceb459ef79103d51bc85693c0b6aa6118973366d" translate="yes" xml:space="preserve">
          <source>Firstly, you can set an &lt;code&gt;app_name&lt;/code&gt; attribute in the included URLconf module, at the same level as the &lt;code&gt;urlpatterns&lt;/code&gt; attribute. You have to pass the actual module, or a string reference to the module, to &lt;a href=&quot;../../ref/urls#django.urls.include&quot;&gt;&lt;code&gt;include()&lt;/code&gt;&lt;/a&gt;, not the list of &lt;code&gt;urlpatterns&lt;/code&gt; itself.</source>
          <target state="translated">첫째, 당신은 설정할 수 있습니다 &lt;code&gt;app_name&lt;/code&gt; 과 같은 수준에서 포함 된 URLconf 모듈의 속성을 &lt;code&gt;urlpatterns&lt;/code&gt; 의 속성. &lt;code&gt;urlpatterns&lt;/code&gt; 목록이 아닌 실제 모듈 또는 모듈에 대한 문자열 참조를 전달하여 &lt;a href=&quot;../../ref/urls#django.urls.include&quot;&gt; &lt;code&gt;include()&lt;/code&gt; &lt;/a&gt; 를 전달해야합니다 .</target>
        </trans-unit>
        <trans-unit id="952d6d50050346e8e9fde3f473baa28e0cf1643d" translate="yes" xml:space="preserve">
          <source>Firstly, you can use the &lt;code&gt;send_messages()&lt;/code&gt; method. &lt;code&gt;send_messages()&lt;/code&gt; takes a list of &lt;a href=&quot;#django.core.mail.EmailMessage&quot;&gt;&lt;code&gt;EmailMessage&lt;/code&gt;&lt;/a&gt; instances (or subclasses), and sends them all using a single connection.</source>
          <target state="translated">먼저 &lt;code&gt;send_messages()&lt;/code&gt; 메소드를 사용할 수 있습니다 . &lt;code&gt;send_messages()&lt;/code&gt; 의 목록이 소요 &lt;a href=&quot;#django.core.mail.EmailMessage&quot;&gt; &lt;code&gt;EmailMessage&lt;/code&gt; 의&lt;/a&gt; 인스턴스 (또는 서브 클래스), 단일 연결을 사용하여 그들 모두를 전송합니다.</target>
        </trans-unit>
        <trans-unit id="1d0e1d4e72315bbc94817bd7e1994f363c26f394" translate="yes" xml:space="preserve">
          <source>Fixing &lt;code&gt;UnicodeEncodeError&lt;/code&gt; for file uploads</source>
          <target state="translated">파일 업로드를위한 &lt;code&gt;UnicodeEncodeError&lt;/code&gt; 수정</target>
        </trans-unit>
        <trans-unit id="8975443fcef2a9c2e02d4a2b02c41dba5c20d6fe" translate="yes" xml:space="preserve">
          <source>Fixing the bug</source>
          <target state="translated">버그 수정</target>
        </trans-unit>
        <trans-unit id="d580141077874f18b73dcfdda86434ddde71ab28" translate="yes" xml:space="preserve">
          <source>Fixture loading</source>
          <target state="translated">고정물 로딩</target>
        </trans-unit>
        <trans-unit id="93a9d4b62c49df4936d5f701755ab05d3a9187a5" translate="yes" xml:space="preserve">
          <source>Fixtures</source>
          <target state="translated">Fixtures</target>
        </trans-unit>
        <trans-unit id="649f72a93abda9c49a9ca63c86342bb63ae6a485" translate="yes" xml:space="preserve">
          <source>Fixtures are also used by the &lt;a href=&quot;../topics/testing/tools#topics-testing-fixtures&quot;&gt;testing framework&lt;/a&gt; to help set up a consistent test environment.</source>
          <target state="translated">또한 &lt;a href=&quot;../topics/testing/tools#topics-testing-fixtures&quot;&gt;테스트 프레임 워크&lt;/a&gt; 에서는 고정물을 사용 하여 일관된 테스트 환경을 설정합니다.</target>
        </trans-unit>
        <trans-unit id="cc1b2f853c73dd2ef4af83d5cc672056528796fb" translate="yes" xml:space="preserve">
          <source>Fixtures generated with &lt;code&gt;USE_TZ = False&lt;/code&gt;, or before Django 1.4, use the &amp;ldquo;naive&amp;rdquo; format. If your project contains such fixtures, after you enable time zone support, you&amp;rsquo;ll see &lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#RuntimeWarning&quot;&gt;&lt;code&gt;RuntimeWarning&lt;/code&gt;&lt;/a&gt;s when you load them. To get rid of the warnings, you must convert your fixtures to the &amp;ldquo;aware&amp;rdquo; format.</source>
          <target state="translated">&lt;code&gt;USE_TZ = False&lt;/code&gt; 또는 Django 1.4 이전에 생성 된 픽스쳐 는&amp;ldquo;순진&amp;rdquo;형식을 사용합니다. 프로젝트에 그러한 조명기들이 포함되어 있다면, 시간대 지원을 활성화 한 후, 그것들을로드 할 때 &lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#RuntimeWarning&quot;&gt; &lt;code&gt;RuntimeWarning&lt;/code&gt; &lt;/a&gt; 이 보일 것입니다. 경고를 없애려면 조명기를 &quot;인식&quot;형식으로 변환해야합니다.</target>
        </trans-unit>
        <trans-unit id="31f4fad7b21527024016324c7145b53c88b4f070" translate="yes" xml:space="preserve">
          <source>Fixtures may be compressed in &lt;code&gt;zip&lt;/code&gt;, &lt;code&gt;gz&lt;/code&gt;, or &lt;code&gt;bz2&lt;/code&gt; format. For example:</source>
          <target state="translated">고정물은 &lt;code&gt;zip&lt;/code&gt; , &lt;code&gt;gz&lt;/code&gt; 또는 &lt;code&gt;bz2&lt;/code&gt; 형식 으로 압축 될 수 있습니다 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="0c5b989c2d6e6bdd59d22e11ad3c1993e41d8ac8" translate="yes" xml:space="preserve">
          <source>Flatpage templates</source>
          <target state="translated">플랫 페이지 템플릿</target>
        </trans-unit>
        <trans-unit id="ca8db34dc5820ff17af7ddc9a31f107d898dc72a" translate="yes" xml:space="preserve">
          <source>Flatpage templates are passed a single context variable, &lt;code&gt;flatpage&lt;/code&gt;, which is the flatpage object.</source>
          <target state="translated">Flatpage 템플릿은 하나의 컨텍스트 변수 전달 &lt;code&gt;flatpage&lt;/code&gt; flatpage 개체이다.</target>
        </trans-unit>
        <trans-unit id="7de6b24fcf1c2acb2cf38c3564995c617c021e83" translate="yes" xml:space="preserve">
          <source>Flatpages</source>
          <target state="translated">Flatpages</target>
        </trans-unit>
        <trans-unit id="1805c01f84a571eb39718db2b5c9de479ccb1b0b" translate="yes" xml:space="preserve">
          <source>Flatpages are represented by a standard &lt;a href=&quot;../../topics/db/models&quot;&gt;Django model&lt;/a&gt;, which lives in &lt;a href=&quot;https://github.com/django/django/blob/master/django/contrib/flatpages/models.py&quot;&gt;django/contrib/flatpages/models.py&lt;/a&gt;. You can access flatpage objects via the &lt;a href=&quot;../../topics/db/queries&quot;&gt;Django database API&lt;/a&gt;.</source>
          <target state="translated">Flatpages는 표준으로 표시됩니다 &lt;a href=&quot;../../topics/db/models&quot;&gt;장고 모델&lt;/a&gt; 에 살고, &lt;a href=&quot;https://github.com/django/django/blob/master/django/contrib/flatpages/models.py&quot;&gt;장고 /있는 contrib / flatpages / models.py&lt;/a&gt; . &lt;a href=&quot;../../topics/db/queries&quot;&gt;Django 데이터베이스 API&lt;/a&gt; 를 통해 플랫 페이지 객체에 액세스 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="76bac1a4adf8a73eecc7c5cd6ace5a3ef38fbb8e" translate="yes" xml:space="preserve">
          <source>Flatpages will not apply view middleware</source>
          <target state="translated">플랫 페이지는 미들웨어보기를 적용하지 않습니다</target>
        </trans-unit>
        <trans-unit id="be50bf019784d62df9e76ade29eac060efd356c2" translate="yes" xml:space="preserve">
          <source>Following relationships &amp;ldquo;backward&amp;rdquo;</source>
          <target state="translated">&quot;뒤로&quot;관계를 따라</target>
        </trans-unit>
        <trans-unit id="72a2f7f3de2f03aa6bed21060ae26fa0ec8ee75a" translate="yes" xml:space="preserve">
          <source>Following relationships backwards</source>
          <target state="translated">거꾸로 관계를 따라</target>
        </trans-unit>
        <trans-unit id="2962af366a6a17e326ab4f60b0fbf6a0f052eefd" translate="yes" xml:space="preserve">
          <source>Following these guidelines is particularly necessary if you write reusable forms, form fields, and model fields.</source>
          <target state="translated">재사용 가능한 양식, 양식 필드 및 모델 필드를 작성하는 경우 이러한 지침을 따르는 것이 특히 필요합니다.</target>
        </trans-unit>
        <trans-unit id="8799db14a19349173c508b9e0760c066a41322c9" translate="yes" xml:space="preserve">
          <source>Follows symlinks to directories when looking for new translation strings.</source>
          <target state="translated">새 번역 문자열을 찾을 때 디렉토리에 대한 심볼릭 링크를 따릅니다.</target>
        </trans-unit>
        <trans-unit id="4c9800d93f6eb82531c506a8502d3a682cbf8592" translate="yes" xml:space="preserve">
          <source>Foot, Foot (International)</source>
          <target state="translated">발, 발 (국제)</target>
        </trans-unit>
        <trans-unit id="ec0c3b76630fd745381cc215a284820af75a683a" translate="yes" xml:space="preserve">
          <source>Footnotes</source>
          <target state="translated">Footnotes</target>
        </trans-unit>
        <trans-unit id="8778e38c267b25f48a4d77bf61008d34682f3180" translate="yes" xml:space="preserve">
          <source>For &lt;a href=&quot;#django.db.models.DateField&quot;&gt;&lt;code&gt;DateField&lt;/code&gt;&lt;/a&gt;: &lt;code&gt;default=date.today&lt;/code&gt; - from &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.date.today&quot;&gt;&lt;code&gt;datetime.date.today()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">들어 &lt;a href=&quot;#django.db.models.DateField&quot;&gt; &lt;code&gt;DateField&lt;/code&gt; &lt;/a&gt; : &lt;code&gt;default=date.today&lt;/code&gt; -에서 &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.date.today&quot;&gt; &lt;code&gt;datetime.date.today()&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="110b4938ed9062f37b2508210c9e670f18a44565" translate="yes" xml:space="preserve">
          <source>For &lt;a href=&quot;#django.db.models.DateTimeField&quot;&gt;&lt;code&gt;DateTimeField&lt;/code&gt;&lt;/a&gt;: &lt;code&gt;default=timezone.now&lt;/code&gt; - from &lt;a href=&quot;../utils#django.utils.timezone.now&quot;&gt;&lt;code&gt;django.utils.timezone.now()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">대한 &lt;a href=&quot;#django.db.models.DateTimeField&quot;&gt; &lt;code&gt;DateTimeField&lt;/code&gt; &lt;/a&gt; : &lt;code&gt;default=timezone.now&lt;/code&gt; -에서 &lt;a href=&quot;../utils#django.utils.timezone.now&quot;&gt; &lt;code&gt;django.utils.timezone.now()&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="741319df59ed93ce505c7c02877f25b3ed1aaea2" translate="yes" xml:space="preserve">
          <source>For &lt;a href=&quot;fields#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;ForeignKey&lt;/code&gt;&lt;/a&gt; objects, the &lt;code&gt;bulk&lt;/code&gt; argument is passed on to &lt;a href=&quot;#django.db.models.fields.related.RelatedManager.add&quot;&gt;&lt;code&gt;add()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#django.db.models.fields.related.RelatedManager.remove&quot;&gt;&lt;code&gt;remove()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">들어 &lt;a href=&quot;fields#django.db.models.ForeignKey&quot;&gt; &lt;code&gt;ForeignKey&lt;/code&gt; &lt;/a&gt; 개체의 &lt;code&gt;bulk&lt;/code&gt; 인수에 전달한다 &lt;a href=&quot;#django.db.models.fields.related.RelatedManager.add&quot;&gt; &lt;code&gt;add()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#django.db.models.fields.related.RelatedManager.remove&quot;&gt; &lt;code&gt;remove()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="c9651ca2921e2480cd0c28bb2f088f3b4e6a026c" translate="yes" xml:space="preserve">
          <source>For &lt;a href=&quot;fields#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;ForeignKey&lt;/code&gt;&lt;/a&gt; objects, this method accepts a &lt;code&gt;bulk&lt;/code&gt; argument to control how to perform the operation. If &lt;code&gt;True&lt;/code&gt; (the default), &lt;code&gt;QuerySet.update()&lt;/code&gt; is used. If &lt;code&gt;bulk=False&lt;/code&gt;, the &lt;code&gt;save()&lt;/code&gt; method of each individual model instance is called instead. This triggers the &lt;a href=&quot;../signals#django.db.models.signals.pre_save&quot;&gt;&lt;code&gt;pre_save&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../signals#django.db.models.signals.post_save&quot;&gt;&lt;code&gt;post_save&lt;/code&gt;&lt;/a&gt; signals and comes at the expense of performance.</source>
          <target state="translated">들면 &lt;a href=&quot;fields#django.db.models.ForeignKey&quot;&gt; &lt;code&gt;ForeignKey&lt;/code&gt; &lt;/a&gt; 오브젝트,이 방법은 허용 &lt;code&gt;bulk&lt;/code&gt; 어떻게 동작을 수행하도록 제어 인자. 경우 &lt;code&gt;True&lt;/code&gt; (기본), &lt;code&gt;QuerySet.update()&lt;/code&gt; 사용됩니다. &lt;code&gt;bulk=False&lt;/code&gt; 인 경우 각 개별 모델 인스턴스 의 &lt;code&gt;save()&lt;/code&gt; 메소드가 대신 호출됩니다. 이렇게하면 &lt;a href=&quot;../signals#django.db.models.signals.pre_save&quot;&gt; &lt;code&gt;pre_save&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../signals#django.db.models.signals.post_save&quot;&gt; &lt;code&gt;post_save&lt;/code&gt; &lt;/a&gt; 신호가 트리거되고 성능이 저하됩니다.</target>
        </trans-unit>
        <trans-unit id="7b7f862e3c2a20b574e8eef35fee476492f18603" translate="yes" xml:space="preserve">
          <source>For &lt;a href=&quot;fields#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;ForeignKey&lt;/code&gt;&lt;/a&gt; objects, this method only exists if &lt;code&gt;null=True&lt;/code&gt;. If the related field can&amp;rsquo;t be set to &lt;code&gt;None&lt;/code&gt; (&lt;code&gt;NULL&lt;/code&gt;), then an object can&amp;rsquo;t be removed from a relation without being added to another. In the above example, removing &lt;code&gt;e&lt;/code&gt; from &lt;code&gt;b.entry_set()&lt;/code&gt; is equivalent to doing &lt;code&gt;e.blog = None&lt;/code&gt;, and because the &lt;code&gt;blog&lt;/code&gt;&lt;a href=&quot;fields#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;ForeignKey&lt;/code&gt;&lt;/a&gt; doesn&amp;rsquo;t have &lt;code&gt;null=True&lt;/code&gt;, this is invalid.</source>
          <target state="translated">들어 &lt;a href=&quot;fields#django.db.models.ForeignKey&quot;&gt; &lt;code&gt;ForeignKey&lt;/code&gt; &lt;/a&gt; 객체 경우,이 메소드는 존재 &lt;code&gt;null=True&lt;/code&gt; . 관련 필드를 &lt;code&gt;None&lt;/code&gt; ( &lt;code&gt;NULL&lt;/code&gt; ) 으로 설정할 수 없으면 다른 오브젝트에 추가하지 않고 관계에서 오브젝트를 제거 할 수 없습니다. 위의 예 에서 &lt;code&gt;b.entry_set()&lt;/code&gt; 에서 &lt;code&gt;e&lt;/code&gt; 를 제거 하는 &lt;code&gt;e.blog = None&lt;/code&gt; 수행과 동일하며 , &lt;a href=&quot;fields#django.db.models.ForeignKey&quot;&gt; &lt;code&gt;ForeignKey&lt;/code&gt; &lt;/a&gt; &lt;code&gt;blog&lt;/code&gt; &lt;code&gt;null=True&lt;/code&gt; 가 없으므로 유효하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="7ec8fef3dc57b8e1919c123ac5e02c80e887f7f1" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;UserAttributeSimilarityValidator&lt;/code&gt; and &lt;code&gt;CommonPasswordValidator&lt;/code&gt;, we&amp;rsquo;re using the default settings in this example. &lt;code&gt;NumericPasswordValidator&lt;/code&gt; has no settings.</source>
          <target state="translated">들어 &lt;code&gt;UserAttributeSimilarityValidator&lt;/code&gt; 및 &lt;code&gt;CommonPasswordValidator&lt;/code&gt; , 우리는이 예에서 기본 설정을 사용하고 있습니다. &lt;code&gt;NumericPasswordValidator&lt;/code&gt; 에는 설정이 없습니다.</target>
        </trans-unit>
        <trans-unit id="cbe7a4654f6563b054d500267f83512db264635c" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;to_python()&lt;/code&gt;, if anything goes wrong during value conversion, you should raise a &lt;a href=&quot;../ref/exceptions#django.core.exceptions.ValidationError&quot;&gt;&lt;code&gt;ValidationError&lt;/code&gt;&lt;/a&gt; exception.</source>
          <target state="translated">들어 &lt;code&gt;to_python()&lt;/code&gt; 아무것도 값 변환 중에 잘못가는 경우에, 당신은 인상해야 &lt;a href=&quot;../ref/exceptions#django.core.exceptions.ValidationError&quot;&gt; &lt;code&gt;ValidationError&lt;/code&gt; 의&lt;/a&gt; 예외.</target>
        </trans-unit>
        <trans-unit id="9c6a88e5cfef39cc8e6590be619ddb6e98c6c41d" translate="yes" xml:space="preserve">
          <source>For &lt;em&gt;measuring&lt;/em&gt;, rather than querying on distances, use the &lt;a href=&quot;functions#django.contrib.gis.db.models.functions.Distance&quot;&gt;&lt;code&gt;Distance&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">들어 &lt;em&gt;측정&lt;/em&gt; 보다는 거리에 조회, 사용 &lt;a href=&quot;functions#django.contrib.gis.db.models.functions.Distance&quot;&gt; &lt;code&gt;Distance&lt;/code&gt; &lt;/a&gt; 기능을.</target>
        </trans-unit>
        <trans-unit id="ea0876de4dccf03bdae9009efcce83719085e5c0" translate="yes" xml:space="preserve">
          <source>For &lt;em&gt;text/*&lt;/em&gt; content-types, the character set (i.e. &lt;code&gt;utf8&lt;/code&gt;) supplied by the browser. Again, &amp;ldquo;trust but verify&amp;rdquo; is the best policy here.</source>
          <target state="translated">들어 &lt;em&gt;텍스트 / *&lt;/em&gt; 컨텐츠 유형, 문자 집합 (예 : &lt;code&gt;utf8&lt;/code&gt; 브라우저에 의해 제공). 여기서도 &quot;신뢰하지만 검증&quot;이 가장 좋은 정책입니다.</target>
        </trans-unit>
        <trans-unit id="32b317d6f38f95199b66a362e3f52af6e0ffa8d9" translate="yes" xml:space="preserve">
          <source>For AJAX requests, the fallback will be performed only if the &lt;code&gt;next&lt;/code&gt; parameter was set. Otherwise a 204 status code (No Content) will be returned.</source>
          <target state="translated">AJAX 요청의 경우 &lt;code&gt;next&lt;/code&gt; 매개 변수가 설정된 경우에만 폴 백이 수행됩니다 . 그렇지 않으면 204 상태 코드 (No Content)가 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="fd8d1898b2475523fa3b4c8d7e783aaa6ca7a841" translate="yes" xml:space="preserve">
          <source>For MIME types starting with &lt;code&gt;text/&lt;/code&gt;, binary data is handled as in &lt;code&gt;attach()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;text/&lt;/code&gt; 시작하는 MIME 유형의 경우 이진 데이터는 &lt;code&gt;attach()&lt;/code&gt; 에서와 같이 처리됩니다 .</target>
        </trans-unit>
        <trans-unit id="fb31c5f02b352bb580243f60983f2e82fd5cdc95" translate="yes" xml:space="preserve">
          <source>For MyISAM tables, &lt;code&gt;SPATIAL INDEX&lt;/code&gt; creates an R-tree index. For storage engines that support nonspatial indexing of spatial columns, the engine creates a B-tree index. A B-tree index on spatial values will be useful for exact-value lookups, but not for range scans.</source>
          <target state="translated">MyISAM 테이블의 경우 &lt;code&gt;SPATIAL INDEX&lt;/code&gt; 는 R- 트리 인덱스를 만듭니다. 공간 열의 비 공간 색인화를 지원하는 스토리지 엔진의 경우 엔진은 B- 트리 색인을 작성합니다. 공간 값에 대한 B- 트리 인덱스는 정확한 값 조회에는 유용하지만 범위 스캔에는 유용하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="114241fe165523586156c3d9b8b72468673e5a4e" translate="yes" xml:space="preserve">
          <source>For MySQL, this runs the &lt;code&gt;mysql&lt;/code&gt; command-line client.</source>
          <target state="translated">MySQL의 경우 &lt;code&gt;mysql&lt;/code&gt; 명령 줄 클라이언트 가 실행됩니다 .</target>
        </trans-unit>
        <trans-unit id="01e48f4df2874fe3eaa026122b760ee523ebd8e5" translate="yes" xml:space="preserve">
          <source>For OpenSolaris users, the system library path may be modified using the &lt;code&gt;crle&lt;/code&gt; utility. Run &lt;code&gt;crle&lt;/code&gt; with no options to see the current configuration and use &lt;code&gt;crle -l&lt;/code&gt; to set with the new library path. Be &lt;em&gt;very&lt;/em&gt; careful when modifying the system library path:</source>
          <target state="translated">OpenSolaris 사용자의 경우 &lt;code&gt;crle&lt;/code&gt; 유틸리티를 사용하여 시스템 라이브러리 경로를 수정할 수 있습니다 . 옵션없이 &lt;code&gt;crle&lt;/code&gt; 을 실행 하여 현재 구성을보고 &lt;code&gt;crle -l&lt;/code&gt; 을 사용하여 새 라이브러리 경로로 설정하십시오. 시스템 라이브러리 경로를 수정할 때 &lt;em&gt;매우&lt;/em&gt; 주의 하십시오 :</target>
        </trans-unit>
        <trans-unit id="3eeded676ad457b8d591af8ff3281ca437900ed1" translate="yes" xml:space="preserve">
          <source>For Oracle, this runs the &lt;code&gt;sqlplus&lt;/code&gt; command-line client.</source>
          <target state="translated">Oracle의 경우 &lt;code&gt;sqlplus&lt;/code&gt; 명령 행 클라이언트 가 실행됩니다 .</target>
        </trans-unit>
        <trans-unit id="a982ff9d1e3163260b354c31d72394140bbcb2f3" translate="yes" xml:space="preserve">
          <source>For PostgreSQL, this runs the &lt;code&gt;psql&lt;/code&gt; command-line client.</source>
          <target state="translated">PostgreSQL의 경우 &lt;code&gt;psql&lt;/code&gt; 명령 줄 클라이언트 가 실행됩니다 .</target>
        </trans-unit>
        <trans-unit id="bd417a019713a6904e3b18dff92248c76cc5011c" translate="yes" xml:space="preserve">
          <source>For SQLite, this runs the &lt;code&gt;sqlite3&lt;/code&gt; command-line client.</source>
          <target state="translated">SQLite의 경우 &lt;code&gt;sqlite3&lt;/code&gt; 명령 줄 클라이언트 가 실행됩니다 .</target>
        </trans-unit>
        <trans-unit id="fd5567ff92e75db4f3301c5a20e84775b7c0a7eb" translate="yes" xml:space="preserve">
          <source>For Windows users</source>
          <target state="translated">Windows 사용자의 경우</target>
        </trans-unit>
        <trans-unit id="cd102962a99ab92625c89315dc500f0b617135ca" translate="yes" xml:space="preserve">
          <source>For Windows users, who do not have symlinking functionality available, you can copy &lt;code&gt;django-admin.exe&lt;/code&gt; to a location on your existing path or edit the &lt;code&gt;PATH&lt;/code&gt; settings (under &lt;code&gt;Settings - Control Panel - System - Advanced -
Environment...&lt;/code&gt;) to point to its installed location.</source>
          <target state="translated">심볼릭 링크 기능을 사용할 수없는 Windows 사용자의 경우 &lt;code&gt;django-admin.exe&lt;/code&gt; 를 기존 경로의 위치에 복사 하거나 &lt;code&gt;PATH&lt;/code&gt; 설정 ( &lt;code&gt;Settings - Control Panel - System - Advanced - Environment...&lt;/code&gt; )을 지정하여 설치된 위치로.</target>
        </trans-unit>
        <trans-unit id="d15786dfcbe8be325214a68d56dd2416df64952e" translate="yes" xml:space="preserve">
          <source>For Windows, you may find binaries on the &lt;a href=&quot;https://www.gaia-gis.it/gaia-sins/&quot;&gt;Gaia-SINS&lt;/a&gt; home page.</source>
          <target state="translated">Windows의 경우 &lt;a href=&quot;https://www.gaia-gis.it/gaia-sins/&quot;&gt;Gaia-SINS&lt;/a&gt; 홈페이지 에서 바이너리를 찾을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c0e34ff26a96c16c70436cafdd6406725c407716" translate="yes" xml:space="preserve">
          <source>For a &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;ForeignKey&lt;/code&gt;&lt;/a&gt; in &lt;a href=&quot;#django.contrib.auth.models.CustomUser.USERNAME_FIELD&quot;&gt;&lt;code&gt;USERNAME_FIELD&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#django.contrib.auth.models.CustomUser.REQUIRED_FIELDS&quot;&gt;&lt;code&gt;REQUIRED_FIELDS&lt;/code&gt;&lt;/a&gt;, these methods receive the value of the &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey.to_field&quot;&gt;&lt;code&gt;to_field&lt;/code&gt;&lt;/a&gt; (the &lt;a href=&quot;../../ref/models/fields#django.db.models.Field.primary_key&quot;&gt;&lt;code&gt;primary_key&lt;/code&gt;&lt;/a&gt; by default) of an existing instance.</source>
          <target state="translated">A의 &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey&quot;&gt; &lt;code&gt;ForeignKey&lt;/code&gt; &lt;/a&gt; 에 &lt;a href=&quot;#django.contrib.auth.models.CustomUser.USERNAME_FIELD&quot;&gt; &lt;code&gt;USERNAME_FIELD&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;#django.contrib.auth.models.CustomUser.REQUIRED_FIELDS&quot;&gt; &lt;code&gt;REQUIRED_FIELDS&lt;/code&gt; &lt;/a&gt; , 이러한 방법의 값을받을 &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey.to_field&quot;&gt; &lt;code&gt;to_field&lt;/code&gt; &lt;/a&gt; 합니다 ( &lt;a href=&quot;../../ref/models/fields#django.db.models.Field.primary_key&quot;&gt; &lt;code&gt;primary_key&lt;/code&gt; 와&lt;/a&gt; 기존 인스턴스의 기본값을).</target>
        </trans-unit>
        <trans-unit id="a7695186a713f16de82312fa1c5040b7c4108194" translate="yes" xml:space="preserve">
          <source>For a &lt;code&gt;OneToOneField&lt;/code&gt;, you must duplicate the related object and assign it to the new object&amp;rsquo;s field to avoid violating the one-to-one unique constraint. For example, assuming &lt;code&gt;entry&lt;/code&gt; is already duplicated as above:</source>
          <target state="translated">A의 &lt;code&gt;OneToOneField&lt;/code&gt; , 당신은 관련 개체를 복제해야하고, 일대일 고유 제한 조건을 위반하지 않도록 새 개체의 필드에 할당합니다. 예를 들어, &lt;code&gt;entry&lt;/code&gt; 이 이미 위와 같이 복제 되었다고 가정합니다 .</target>
        </trans-unit>
        <trans-unit id="9cc905172b60f8825495c9572f3c39b3a30f5ebc" translate="yes" xml:space="preserve">
          <source>For a &lt;code&gt;mimetype&lt;/code&gt; starting with &lt;code&gt;text/&lt;/code&gt;, content is expected to be a string. Binary data will be decoded using UTF-8, and if that fails, the MIME type will be changed to &lt;code&gt;application/octet-stream&lt;/code&gt; and the data will be attached unchanged.</source>
          <target state="translated">&lt;code&gt;text/&lt;/code&gt; 시작 하는 &lt;code&gt;mimetype&lt;/code&gt; 의 경우 content는 문자열이어야합니다. 이진 데이터는 UTF-8을 사용하여 디코딩되며, 실패하면 MIME 유형이 &lt;code&gt;application/octet-stream&lt;/code&gt; 으로 변경되고 데이터는 변경되지 않은 상태로 첨부됩니다.</target>
        </trans-unit>
        <trans-unit id="aa5aa7c50d88712d846e66564756210e95dfb768" translate="yes" xml:space="preserve">
          <source>For a class to be a lookup, it must follow the &lt;a href=&quot;#query-expression&quot;&gt;Query Expression API&lt;/a&gt;. &lt;a href=&quot;#django.db.models.Lookup&quot;&gt;&lt;code&gt;Lookup&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#django.db.models.Transform&quot;&gt;&lt;code&gt;Transform&lt;/code&gt;&lt;/a&gt; naturally follow this API.</source>
          <target state="translated">클래스를 조회하려면 &lt;a href=&quot;#query-expression&quot;&gt;Query Expression API를&lt;/a&gt; 따라야합니다 . &lt;a href=&quot;#django.db.models.Lookup&quot;&gt; &lt;code&gt;Lookup&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#django.db.models.Transform&quot;&gt; &lt;code&gt;Transform&lt;/code&gt; &lt;/a&gt; 자연스럽게이 API를 따릅니다.</target>
        </trans-unit>
        <trans-unit id="82837fb615d6fc0b73c8eb4b55c29471490a59c4" translate="yes" xml:space="preserve">
          <source>For a complete discussion on the usage of the following see the &lt;a href=&quot;../topics/i18n/translation&quot;&gt;translation documentation&lt;/a&gt;.</source>
          <target state="translated">다음 사용법에 대한 자세한 내용은 &lt;a href=&quot;../topics/i18n/translation&quot;&gt;번역 설명서를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="bf48592cadcf03f73184b0bc732d907e2a1368ac" translate="yes" xml:space="preserve">
          <source>For a complete list of attributes and methods, see &lt;a href=&quot;../../ref/forms/api#django.forms.BoundField&quot;&gt;&lt;code&gt;BoundField&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">속성과 메소드의 전체 목록은 &lt;a href=&quot;../../ref/forms/api#django.forms.BoundField&quot;&gt; &lt;code&gt;BoundField&lt;/code&gt; 를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="011f4946a4eac47d187c0cf11d388cc5cd400310" translate="yes" xml:space="preserve">
          <source>For a detailed description of how to create rasters using dictionary input, see &lt;a href=&quot;#gdal-raster-ds-input&quot;&gt;Creating rasters from data&lt;/a&gt;. For a detailed description of how to create rasters in the virtual filesystem, see &lt;a href=&quot;#gdal-raster-vsimem&quot;&gt;Using GDAL&amp;rsquo;s Virtual Filesystem&lt;/a&gt;.</source>
          <target state="translated">사전 입력을 사용하여 래스터를 만드는 방법에 대한 자세한 내용은 &lt;a href=&quot;#gdal-raster-ds-input&quot;&gt;데이터에서 래스터 만들기를&lt;/a&gt; 참조하십시오 . 가상 파일 시스템에서 래스터를 만드는 방법에 대한 자세한 설명은 &lt;a href=&quot;#gdal-raster-vsimem&quot;&gt;GDAL의 가상 파일 시스템 사용을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="c0f2ca82bf7e80689578e1ccca6faf93f53a9e5f" translate="yes" xml:space="preserve">
          <source>For a full list of available settings, see the &lt;a href=&quot;../ref/settings&quot;&gt;settings reference&lt;/a&gt;.</source>
          <target state="translated">사용 가능한 설정의 전체 목록은 &lt;a href=&quot;../ref/settings&quot;&gt;설정 참조를 참조하십시오&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="b2bc5ac4a588fc66b6d4b867455953ec02cdd543" translate="yes" xml:space="preserve">
          <source>For a full list of options, refer to the commands own help by running:</source>
          <target state="translated">전체 옵션 목록은 다음을 실행하여 명령 자체 도움말을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="25df3eb01267dee01663d3ac00097ce51467a7f3" translate="yes" xml:space="preserve">
          <source>For a high-level overview of searching, see the &lt;a href=&quot;../../../topics/db/search&quot;&gt;topic documentation&lt;/a&gt;.</source>
          <target state="translated">검색에 대한 고급 개요는 &lt;a href=&quot;../../../topics/db/search&quot;&gt;주제 문서를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="c9dd739b05280b0b463ac62a5aa753bebf48ca31" translate="yes" xml:space="preserve">
          <source>For a list of PostgreSQL-specific indexes, see &lt;a href=&quot;../contrib/postgres/indexes#module-django.contrib.postgres.indexes&quot;&gt;&lt;code&gt;django.contrib.postgres.indexes&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">PostgreSQL 관련 인덱스 목록은 &lt;a href=&quot;../contrib/postgres/indexes#module-django.contrib.postgres.indexes&quot;&gt; &lt;code&gt;django.contrib.postgres.indexes&lt;/code&gt; 를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="4891edfe9764d3a86746a95b02d8917cc69f1971" translate="yes" xml:space="preserve">
          <source>For a model which has a many-to-many relationship to itself through an intermediary model, two foreign keys to the same model are permitted, but they will be treated as the two (different) sides of the many-to-many relationship. If there are &lt;em&gt;more&lt;/em&gt; than two foreign keys though, you must also specify &lt;code&gt;through_fields&lt;/code&gt; as above, or a validation error will be raised.</source>
          <target state="translated">중개 모델을 통해 자신과 다 대다 관계를 갖는 모델의 경우 동일한 모델에 대한 두 개의 외래 키가 허용되지만 다 대다 관계의 두 (다른) 측면으로 취급됩니다. 그래도 외래 키가 두 &lt;em&gt;개&lt;/em&gt; 이상인 경우 위와 같이 &lt;code&gt;through_fields&lt;/code&gt; 도 지정해야합니다. 그렇지 않으면 유효성 검사 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="d4589e3c17ea70bbb0bb53aa9f87352a326c8e0e" translate="yes" xml:space="preserve">
          <source>For a more complete example, a query logger could look like this:</source>
          <target state="translated">보다 완전한 예제를 위해 쿼리 로거는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="c2705e09efedad5461b1eac01061451c6e4e8c3b" translate="yes" xml:space="preserve">
          <source>For a production environment, though, this is a really bad idea, because it leaks lots of information about your project: excerpts of your source code, local variables, settings, libraries used, etc.</source>
          <target state="translated">그러나 프로덕션 환경의 경우 소스 코드 발췌, 로컬 변수, 설정, 사용 된 라이브러리 등 프로젝트에 대한 많은 정보가 유출되기 때문에 이것은 매우 나쁜 생각입니다.</target>
        </trans-unit>
        <trans-unit id="f9e4028e7889232ea20ffa255e19e88ae4589784" translate="yes" xml:space="preserve">
          <source>For a ton of examples, read the source code for Django&amp;rsquo;s default filters and tags. They&amp;rsquo;re in &lt;code&gt;django/template/defaultfilters.py&lt;/code&gt; and &lt;code&gt;django/template/defaulttags.py&lt;/code&gt;, respectively.</source>
          <target state="translated">많은 예제를 보려면 Django의 기본 필터 및 태그에 대한 소스 코드를 읽으십시오. 그것들은 각각 &lt;code&gt;django/template/defaultfilters.py&lt;/code&gt; 및 &lt;code&gt;django/template/defaulttags.py&lt;/code&gt; defaulttags.py 에 있습니다.</target>
        </trans-unit>
        <trans-unit id="245c192c3f0ca7c1f6c78ffc80a037f82e16bd32" translate="yes" xml:space="preserve">
          <source>For a typical Django project, invoking Daphne would look like:</source>
          <target state="translated">일반적인 Django 프로젝트의 경우 Daphne을 호출하면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="c59fdc8b86b62e3b1b65f5e777983d4f7cbaa527" translate="yes" xml:space="preserve">
          <source>For a typical Django project, invoking Uvicorn would look like:</source>
          <target state="translated">일반적인 Django 프로젝트의 경우 Uvicorn을 호출하면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="497b37841c09436a3f988aae8b8beb478ba72f8d" translate="yes" xml:space="preserve">
          <source>For a window frame, you can choose either a range-based sequence of rows or an ordinary sequence of rows.</source>
          <target state="translated">창 프레임의 경우 범위 기반 행 시퀀스 또는 일반 행 시퀀스를 선택할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="01530861bb300440f6bf560ef6b0beca305c2166" translate="yes" xml:space="preserve">
          <source>For advanced usage you might want both a custom &lt;code&gt;Manager&lt;/code&gt; and a custom &lt;code&gt;QuerySet&lt;/code&gt;. You can do that by calling &lt;code&gt;Manager.from_queryset()&lt;/code&gt; which returns a &lt;em&gt;subclass&lt;/em&gt; of your base &lt;code&gt;Manager&lt;/code&gt; with a copy of the custom &lt;code&gt;QuerySet&lt;/code&gt; methods:</source>
          <target state="translated">고급 사용법의 경우 사용자 정의 &lt;code&gt;Manager&lt;/code&gt; 및 사용자 정의 &lt;code&gt;QuerySet&lt;/code&gt; 을 모두 원할 수 있습니다 . 사용자 정의 &lt;code&gt;QuerySet&lt;/code&gt; 메소드 의 사본으로 기본 &lt;code&gt;Manager&lt;/code&gt; 의 &lt;em&gt;서브 클래스&lt;/em&gt; 를 리턴하는 &lt;code&gt;Manager.from_queryset()&lt;/code&gt; 을 호출하여이를 수행 할 수 있습니다 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="114718eb9675b5c8dfa5883eba3eeb3ec318f68e" translate="yes" xml:space="preserve">
          <source>For all SQLite versions, there is some slightly counter-intuitive behavior when attempting to match some types of strings. These are triggered when using the &lt;a href=&quot;models/querysets#std:fieldlookup-iexact&quot;&gt;&lt;code&gt;iexact&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;models/querysets#std:fieldlookup-contains&quot;&gt;&lt;code&gt;contains&lt;/code&gt;&lt;/a&gt; filters in Querysets. The behavior splits into two cases:</source>
          <target state="translated">모든 SQLite 버전의 경우 일부 유형의 문자열과 일치하려고 할 때 약간 직관적이지 않은 동작이 있습니다. &lt;a href=&quot;models/querysets#std:fieldlookup-iexact&quot;&gt; &lt;code&gt;iexact&lt;/code&gt; 를&lt;/a&gt; 사용할 때 트리거 되거나 쿼리 세트 &lt;a href=&quot;models/querysets#std:fieldlookup-contains&quot;&gt; &lt;code&gt;contains&lt;/code&gt; &lt;/a&gt; 필터가 포함 됩니다. 동작은 두 가지 경우로 나뉩니다.</target>
        </trans-unit>
        <trans-unit id="7091b793897c8691205b09008506e6f08af46e43" translate="yes" xml:space="preserve">
          <source>For all incoming requests that are not using HTTP GET, HEAD, OPTIONS or TRACE, a CSRF cookie must be present, and the &amp;lsquo;csrfmiddlewaretoken&amp;rsquo; field must be present and correct. If it isn&amp;rsquo;t, the user will get a 403 error.</source>
          <target state="translated">HTTP GET, HEAD, OPTIONS 또는 TRACE를 사용하지 않는 모든 수신 요청의 경우 CSRF 쿠키가 존재해야하며 'csrfmiddlewaretoken'필드가 존재하고 정확해야합니다. 그렇지 않으면 403 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="e0536ba6b20984cd0e9e8b8216082fb8626aab8d" translate="yes" xml:space="preserve">
          <source>For an example see the section &lt;a href=&quot;#admin-custom-validation&quot;&gt;Adding custom validation to the admin&lt;/a&gt;.</source>
          <target state="translated">예를 들어 &lt;a href=&quot;#admin-custom-validation&quot;&gt;관리자에 사용자 정의 유효성 검사 추가&lt;/a&gt; 섹션을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="cbd2efdcd0a5182eb99fe1c3c5af8e661cbb3c3b" translate="yes" xml:space="preserve">
          <source>For an example, see &lt;a href=&quot;../howto/static-files/deployment#staticfiles-from-cdn&quot;&gt;Serving static files from a cloud service or CDN&lt;/a&gt;.</source>
          <target state="translated">예를 들어, &lt;a href=&quot;../howto/static-files/deployment#staticfiles-from-cdn&quot;&gt;클라우드 서비스 또는 CDN에서 정적 파일 제공을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="5e877fbbeaae4ebb5d6aaa8f8b9c8ab1b4e07bde" translate="yes" xml:space="preserve">
          <source>For an in-depth discussion of aggregation, see &lt;a href=&quot;../../topics/db/aggregation&quot;&gt;the topic guide on Aggregation&lt;/a&gt;.</source>
          <target state="translated">집계에 대한 자세한 내용은 집계에 &lt;a href=&quot;../../topics/db/aggregation&quot;&gt;대한 주제 안내서를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="57ec81e3704c6febf6a79630fa1ee31a957b3292" translate="yes" xml:space="preserve">
          <source>For an introduction to the static files app and some usage examples, see &lt;a href=&quot;../../howto/static-files/index&quot;&gt;Managing static files (e.g. images, JavaScript, CSS)&lt;/a&gt;. For guidelines on deploying static files, see &lt;a href=&quot;../../howto/static-files/deployment&quot;&gt;Deploying static files&lt;/a&gt;.</source>
          <target state="translated">정적 파일 앱 및 일부 사용 예에 ​​대한 소개는 정적 파일 &lt;a href=&quot;../../howto/static-files/index&quot;&gt;관리 (예 : 이미지, JavaScript, CSS)를 참조하십시오&lt;/a&gt; . 정적 파일을 배포하는 방법에 대한 지침을 참조 &lt;a href=&quot;../../howto/static-files/deployment&quot;&gt;정적 파일을 배포&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="5b6e366f307e30cbc012445b0d5d8194205dfaf5" translate="yes" xml:space="preserve">
          <source>For an introduction to the use of &lt;a href=&quot;../../ref/contrib/staticfiles#module-django.contrib.staticfiles&quot;&gt;&lt;code&gt;django.contrib.staticfiles&lt;/code&gt;&lt;/a&gt;, see &lt;a href=&quot;index&quot;&gt;Managing static files (e.g. images, JavaScript, CSS)&lt;/a&gt;.</source>
          <target state="translated">의 사용에 대한 소개 &lt;a href=&quot;../../ref/contrib/staticfiles#module-django.contrib.staticfiles&quot;&gt; &lt;code&gt;django.contrib.staticfiles&lt;/code&gt; &lt;/a&gt; 참조 &lt;a href=&quot;index&quot;&gt;(예 : 이미지, 자바 스크립트, CSS) 정적 파일을 관리&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="ff33af586de20dcc9dc963235e63d160e339357a" translate="yes" xml:space="preserve">
          <source>For an introduction, see &lt;a href=&quot;../../topics/db/queries#field-lookups-intro&quot;&gt;models and database queries documentation&lt;/a&gt;.</source>
          <target state="translated">소개는 &lt;a href=&quot;../../topics/db/queries#field-lookups-intro&quot;&gt;모델 및 데이터베이스 쿼리 문서를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="91f45c0b4fdd79cf441093caaf95e3a639c7bf7e" translate="yes" xml:space="preserve">
          <source>For an introduction, see the &lt;a href=&quot;db-api#spatial-lookups-intro&quot;&gt;spatial lookups introduction&lt;/a&gt;. For an overview of what lookups are compatible with a particular spatial backend, refer to the &lt;a href=&quot;db-api#spatial-lookup-compatibility&quot;&gt;spatial lookup compatibility table&lt;/a&gt;.</source>
          <target state="translated">소개는 &lt;a href=&quot;db-api#spatial-lookups-intro&quot;&gt;공간 검색 소개를&lt;/a&gt; 참조하십시오 . 특정 공간 백엔드와 호환되는 조회에 대한 개요는 &lt;a href=&quot;db-api#spatial-lookup-compatibility&quot;&gt;공간 조회 호환성 표를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="e566430cd1a2affb5f5c262cc70d975407c98c38" translate="yes" xml:space="preserve">
          <source>For an overview on performing distance queries, please refer to the &lt;a href=&quot;db-api#distance-queries&quot;&gt;distance queries introduction&lt;/a&gt;.</source>
          <target state="translated">거리 쿼리 수행에 대한 개요는 &lt;a href=&quot;db-api#distance-queries&quot;&gt;거리 쿼리 소개&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="032e1a321d9ffc6c2146932f576a128a8e65fa68" translate="yes" xml:space="preserve">
          <source>For any other case where you would like to delay the translation, but have to pass the translatable string as argument to another function, you can wrap this function inside a lazy call yourself. For example:</source>
          <target state="translated">번역을 지연하고 싶지만 번역 가능한 문자열을 다른 함수의 인수로 전달 해야하는 다른 경우에는이 함수를 게으른 호출 내부에 래핑 할 수 있습니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="085ed960d0740bd94ea40506cfce694cfddc0a2f" translate="yes" xml:space="preserve">
          <source>For application authors</source>
          <target state="translated">응용 프로그램 작성자</target>
        </trans-unit>
        <trans-unit id="7cec9e84482bc35d6c78faa794917c557d1e76eb" translate="yes" xml:space="preserve">
          <source>For application users</source>
          <target state="translated">응용 프로그램 사용자</target>
        </trans-unit>
        <trans-unit id="73f138ffe9108c4f660de4277273d1ef1b89e005" translate="yes" xml:space="preserve">
          <source>For backends that use cookies, the settings for the cookie are taken from the session cookie settings:</source>
          <target state="translated">쿠키를 사용하는 백엔드의 경우 쿠키 설정은 세션 쿠키 설정에서 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="57ad3cfd168ba96bdfced612c26a2ee2a767e407" translate="yes" xml:space="preserve">
          <source>For better performance, you may want to use a cache-based session backend.</source>
          <target state="translated">더 나은 성능을 위해 캐시 기반 세션 백엔드를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="91bce32b94c71f60016d6667344912312df9c907" translate="yes" xml:space="preserve">
          <source>For both string-based and non-string-based fields, you will also need to set &lt;code&gt;blank=True&lt;/code&gt; if you wish to permit empty values in forms, as the &lt;a href=&quot;#django.db.models.Field.null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt; parameter only affects database storage (see &lt;a href=&quot;#django.db.models.Field.blank&quot;&gt;&lt;code&gt;blank&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">문자열 기반 필드와 문자열이 아닌 필드의 경우, &lt;a href=&quot;#django.db.models.Field.null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt; 매개 변수는 데이터베이스 스토리지에만 영향을주기 때문에 양식에서 빈 값을 허용하려면 &lt;code&gt;blank=True&lt;/code&gt; 를 설정해야합니다 ( &lt;a href=&quot;#django.db.models.Field.blank&quot;&gt; &lt;code&gt;blank&lt;/code&gt; &lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="3b0ab1dd7f1f1a3114560cdef94eeb046fe6b282" translate="yes" xml:space="preserve">
          <source>For building up fragments of HTML, you should normally be using &lt;a href=&quot;#django.utils.html.format_html&quot;&gt;&lt;code&gt;django.utils.html.format_html()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">HTML 조각을 빌드하려면 일반적으로 &lt;a href=&quot;#django.utils.html.format_html&quot;&gt; &lt;code&gt;django.utils.html.format_html()&lt;/code&gt; &lt;/a&gt; 대신 사용해야합니다 .</target>
        </trans-unit>
        <trans-unit id="bd8eb4334d88a862d55ca5bac3a26a9a7a016bf0" translate="yes" xml:space="preserve">
          <source>For caches that don&amp;rsquo;t implement &lt;code&gt;close&lt;/code&gt; methods it is a no-op.</source>
          <target state="translated">&lt;code&gt;close&lt;/code&gt; 메소드를 구현하지 않는 캐시의 경우 no-op입니다.</target>
        </trans-unit>
        <trans-unit id="79ba2e8a0fe994e51d4c92f58e97e335cd098d33" translate="yes" xml:space="preserve">
          <source>For cases like this, Django exposes a low-level cache API. You can use this API to store objects in the cache with any level of granularity you like. You can cache any Python object that can be pickled safely: strings, dictionaries, lists of model objects, and so forth. (Most common Python objects can be pickled; refer to the Python documentation for more information about pickling.)</source>
          <target state="translated">이런 경우 Django는 저수준 캐시 API를 노출합니다. 이 API를 사용하여 원하는 수준으로 세분화하여 캐시에 객체를 저장할 수 있습니다. 문자열, 사전, 모델 객체 목록 등 안전하게 선택할 수있는 Python 객체를 캐시 할 수 있습니다. (대부분의 일반적인 Python 객체를 피클 할 수 있습니다. 피클 링에 대한 자세한 내용은 Python 설명서를 참조하십시오.)</target>
        </trans-unit>
        <trans-unit id="1fb48d8079dbe45b84226c3cadf04b90ce81a61a" translate="yes" xml:space="preserve">
          <source>For cases like this, use the &lt;code&gt;django.utils.functional.keep_lazy()&lt;/code&gt; decorator. It modifies the function so that &lt;em&gt;if&lt;/em&gt; it&amp;rsquo;s called with a lazy translation as one of its arguments, the function evaluation is delayed until it needs to be converted to a string.</source>
          <target state="translated">이런 경우 &lt;code&gt;django.utils.functional.keep_lazy()&lt;/code&gt; 데코레이터를 사용하십시오 . 인수 중 하나로 게으른 변환으로 호출 되는 &lt;em&gt;경우&lt;/em&gt; 함수 평가가 문자열로 변환 될 때까지 지연되도록 함수를 수정합니다.</target>
        </trans-unit>
        <trans-unit id="994ead3f1356d2b1dba54966dd67fa94889eed63" translate="yes" xml:space="preserve">
          <source>For common setups with multiple databases, it isn&amp;rsquo;t useful to have these objects in more than one database. Common setups include primary/replica and connecting to external databases. Therefore, it&amp;rsquo;s recommended to write a &lt;a href=&quot;#topics-db-multi-db-routing&quot;&gt;database router&lt;/a&gt; that allows synchronizing these three models to only one database. Use the same approach for contrib and third-party apps that don&amp;rsquo;t need their tables in multiple databases.</source>
          <target state="translated">여러 데이터베이스가있는 공통 설정의 경우 이러한 개체를 둘 이상의 데이터베이스에 두는 것은 유용하지 않습니다. 일반적인 설정에는 기본 / 복제본 및 외부 데이터베이스 연결이 포함됩니다. 따라서이 세 가지 모델을 하나의 데이터베이스에만 동기화 할 수 있는 &lt;a href=&quot;#topics-db-multi-db-routing&quot;&gt;데이터베이스 라우터&lt;/a&gt; 를 작성하는 것이 좋습니다 . 여러 데이터베이스에 테이블이 필요하지 않은 contrib 및 타사 앱에 대해 동일한 접근 방식을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="9008520a23cc5398ce6e6e03cb58a6c8452a5ef0" translate="yes" xml:space="preserve">
          <source>For complete details on all the settings, commands, template tags, and other pieces included in &lt;a href=&quot;../../ref/contrib/staticfiles#module-django.contrib.staticfiles&quot;&gt;&lt;code&gt;django.contrib.staticfiles&lt;/code&gt;&lt;/a&gt;, see &lt;a href=&quot;../../ref/contrib/staticfiles&quot;&gt;the staticfiles reference&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../ref/contrib/staticfiles#module-django.contrib.staticfiles&quot;&gt; &lt;code&gt;django.contrib.staticfiles&lt;/code&gt; 에&lt;/a&gt; 포함 된 모든 설정, 명령, 템플릿 태그 및 기타 부분 에 대한 자세한 내용 &lt;a href=&quot;../../ref/contrib/staticfiles&quot;&gt;은 정적 파일 참조를 참조하십시오&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="1ab98fe2e9e6c5b8dac81734119f6a96694f9705" translate="yes" xml:space="preserve">
          <source>For convenience, &lt;a href=&quot;#django.core.mail.EmailMessage&quot;&gt;&lt;code&gt;EmailMessage&lt;/code&gt;&lt;/a&gt; provides a &lt;code&gt;send()&lt;/code&gt; method for sending a single email. If you need to send multiple messages, the email backend API &lt;a href=&quot;#topics-sending-multiple-emails&quot;&gt;provides an alternative&lt;/a&gt;.</source>
          <target state="translated">편의상 &lt;a href=&quot;#django.core.mail.EmailMessage&quot;&gt; &lt;code&gt;EmailMessage&lt;/code&gt; &lt;/a&gt; 는 단일 이메일을 보내기위한 &lt;code&gt;send()&lt;/code&gt; 메소드를 제공합니다 . 여러 메시지를 보내야하는 경우 전자 메일 백엔드 API &lt;a href=&quot;#topics-sending-multiple-emails&quot;&gt;가 대안을 제공합니다&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="dd6bc939b24142ba0e1fff49a7e3dd24af2f2dbe" translate="yes" xml:space="preserve">
          <source>For convenience, &lt;code&gt;index_together&lt;/code&gt; can be a single list when dealing with a single set of fields:</source>
          <target state="translated">편의상 &lt;code&gt;index_together&lt;/code&gt; 는 단일 필드 집합을 처리 할 때 단일 목록이 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ce4cdf927e9d3f5bcc2a4d900ae3b68bcd958626" translate="yes" xml:space="preserve">
          <source>For convenience, &lt;code&gt;unique_together&lt;/code&gt; can be a single list when dealing with a single set of fields:</source>
          <target state="translated">편의상 &lt;code&gt;unique_together&lt;/code&gt; 는 단일 필드 집합을 처리 할 때 단일 목록이 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="07080c385504623c0179d481408b47986bcaa26b" translate="yes" xml:space="preserve">
          <source>For convenience, Django offers different levels of cache granularity: you can cache the output of specific views, or only the pieces that are difficult to produce, or even an entire site.</source>
          <target state="translated">편의상 Django는 다양한 수준의 캐시 단위를 제공합니다. 특정 뷰의 출력 또는 생성하기 어려운 부분 또는 전체 사이트를 캐시 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a33658bc26b48121cd01e6c62ea8102f8c745111" translate="yes" xml:space="preserve">
          <source>For convenience, Django provides a &lt;code&gt;pk&lt;/code&gt; lookup shortcut, which stands for &amp;ldquo;primary key&amp;rdquo;.</source>
          <target state="translated">편의상 Django는 &quot;기본 키&quot;를 나타내는 &lt;code&gt;pk&lt;/code&gt; 조회 바로 가기를 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="8ba2fecb762785a1f98e5db46660c8f03323d035" translate="yes" xml:space="preserve">
          <source>For convenience, and because it&amp;rsquo;s a good idea to have a consistent 404 error page across your site, Django provides an &lt;code&gt;Http404&lt;/code&gt; exception. If you raise &lt;code&gt;Http404&lt;/code&gt; at any point in a view function, Django will catch it and return the standard error page for your application, along with an HTTP error code 404.</source>
          <target state="translated">편의상 Django는 사이트 전체에 일관된 404 오류 페이지를 갖는 것이 좋은 아이디어 &lt;code&gt;Http404&lt;/code&gt; 예외를 제공합니다 . 뷰 함수의 어느 시점에서 &lt;code&gt;Http404&lt;/code&gt; 를 올리면 장고는이를 잡아서 HTTP 오류 코드 404와 함께 응용 프로그램의 표준 오류 페이지를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="6f355d7307dc13d50c50cd78d6a431ad52fb3a16" translate="yes" xml:space="preserve">
          <source>For convenience, each model has an &lt;a href=&quot;fields#django.db.models.AutoField&quot;&gt;&lt;code&gt;AutoField&lt;/code&gt;&lt;/a&gt; named &lt;code&gt;id&lt;/code&gt; by default unless you explicitly specify &lt;code&gt;primary_key=True&lt;/code&gt; on a field in your model. See the documentation for &lt;a href=&quot;fields#django.db.models.AutoField&quot;&gt;&lt;code&gt;AutoField&lt;/code&gt;&lt;/a&gt; for more details.</source>
          <target state="translated">편의상, 모델 의 필드에 &lt;code&gt;primary_key=True&lt;/code&gt; 를 명시 적으로 지정하지 않으면 각 모델에는 기본적으로 &lt;code&gt;id&lt;/code&gt; &lt;a href=&quot;fields#django.db.models.AutoField&quot;&gt; &lt;code&gt;AutoField&lt;/code&gt; &lt;/a&gt; 이름 의 AutoField 가 있습니다. 자세한 내용은 &lt;a href=&quot;fields#django.db.models.AutoField&quot;&gt; &lt;code&gt;AutoField&lt;/code&gt; &lt;/a&gt; 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="00b6f399568caf034f2bd9baf36652b9633df6c5" translate="yes" xml:space="preserve">
          <source>For conversions, access the preferred unit attribute to get a converted distance quantity:</source>
          <target state="translated">변환의 경우 기본 단위 속성에 액세스하여 변환 된 거리 수량을 가져 오십시오.</target>
        </trans-unit>
        <trans-unit id="17f5ab1e933cc3767d56d79b5fda1bc30762cc06" translate="yes" xml:space="preserve">
          <source>For creating bar charts and such, this tag calculates the ratio of a given value to a maximum value, and then applies that ratio to a constant.</source>
          <target state="translated">막대 차트 등을 생성하기 위해이 태그는 지정된 값과 최대 값의 비율을 계산 한 다음 해당 비율을 상수에 적용합니다.</target>
        </trans-unit>
        <trans-unit id="9d659ee2de0bfab758a3c6297904c71bd25ed4d2" translate="yes" xml:space="preserve">
          <source>For databases other than SQLite</source>
          <target state="translated">SQLite 이외의 데이터베이스</target>
        </trans-unit>
        <trans-unit id="26b228b856ac1e345526c8b4f3d28d81b09acc58" translate="yes" xml:space="preserve">
          <source>For date and date/time fields, you can add or subtract a &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.timedelta&quot;&gt;&lt;code&gt;timedelta&lt;/code&gt;&lt;/a&gt; object. The following would return all entries that were modified more than 3 days after they were published:</source>
          <target state="translated">날짜 및 날짜 / 시간 필드의 경우 &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.timedelta&quot;&gt; &lt;code&gt;timedelta&lt;/code&gt; &lt;/a&gt; 객체를 추가하거나 뺄 수 있습니다 . 다음은 게시 된 후 3 일 이상 수정 된 모든 항목을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="c3ea98e4b4088a980b262038c9f53cd940a2574a" translate="yes" xml:space="preserve">
          <source>For date and datetime fields, a &amp;lsquo;day of the week&amp;rsquo; match. Allows chaining additional field lookups.</source>
          <target state="translated">날짜 및 날짜 / 시간 필드의 경우 '요일'이 일치합니다. 추가 필드 조회 연결을 허용합니다.</target>
        </trans-unit>
        <trans-unit id="a59621a4297e6672557ed775eda5c37a1765e762" translate="yes" xml:space="preserve">
          <source>For date and datetime fields, a &amp;lsquo;quarter of the year&amp;rsquo; match. Allows chaining additional field lookups. Takes an integer value between 1 and 4 representing the quarter of the year.</source>
          <target state="translated">날짜 및 날짜 / 시간 필드의 경우 '연중 1/4'이 일치합니다. 추가 필드 조회 연결을 허용합니다. 연중 분기를 나타내는 1에서 4 사이의 정수 값을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="42dd2feb45b5f660ff3b9a6d4074634986a29ee0" translate="yes" xml:space="preserve">
          <source>For date and datetime fields, an exact ISO 8601 week-numbering year match. Allows chaining additional field lookups. Takes an integer year.</source>
          <target state="translated">날짜 및 날짜 / 시간 필드의 경우 정확한 ISO 8601 주 번호 연도가 일치합니다. 추가 필드 조회 연결을 허용합니다. 정수 연도를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="1593cffc96d622049ccdc42f7bb0f2a1ae8036b1" translate="yes" xml:space="preserve">
          <source>For date and datetime fields, an exact day match. Allows chaining additional field lookups. Takes an integer day.</source>
          <target state="translated">날짜 및 날짜 / 시간 필드의 경우 정확한 요일이 일치합니다. 추가 필드 조회 연결을 허용합니다. 정수일이 걸립니다.</target>
        </trans-unit>
        <trans-unit id="49d38ad7fe93c4540c3f229ec62ec695a94c44d4" translate="yes" xml:space="preserve">
          <source>For date and datetime fields, an exact month match. Allows chaining additional field lookups. Takes an integer 1 (January) through 12 (December).</source>
          <target state="translated">날짜 및 날짜 / 시간 필드의 경우 정확한 월이 일치합니다. 추가 필드 조회 연결을 허용합니다. 정수 1 (1 월)에서 12 (12 월)까지 사용합니다.</target>
        </trans-unit>
        <trans-unit id="606db62e280330ab2e78af535232722c97f0ff10" translate="yes" xml:space="preserve">
          <source>For date and datetime fields, an exact year match. Allows chaining additional field lookups. Takes an integer year.</source>
          <target state="translated">날짜 및 날짜 / 시간 필드의 경우 정확한 연도가 일치합니다. 추가 필드 조회 연결을 허용합니다. 정수 연도를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="5e7ddbc21aec55ccdb748d213426101dce95eb9c" translate="yes" xml:space="preserve">
          <source>For date and datetime fields, return the week number (1-52 or 53) according to &lt;a href=&quot;https://en.wikipedia.org/wiki/ISO-8601&quot;&gt;ISO-8601&lt;/a&gt;, i.e., weeks start on a Monday and the first week contains the year&amp;rsquo;s first Thursday.</source>
          <target state="translated">날짜 및 날짜 / 시간 필드의 경우 &lt;a href=&quot;https://en.wikipedia.org/wiki/ISO-8601&quot;&gt;ISO-8601&lt;/a&gt; 에 따라 주 번호 (1-52 또는 53)를 리턴하십시오 . 즉,주는 월요일에 시작하고 첫 번째 주에는 첫 번째 목요일이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="dcf2e4875fa50e3add0a11dd7c345c91e31164aa" translate="yes" xml:space="preserve">
          <source>For dates that are the current day or within one day, return &amp;ldquo;today&amp;rdquo;, &amp;ldquo;tomorrow&amp;rdquo; or &amp;ldquo;yesterday&amp;rdquo;, as appropriate. Otherwise, format the date using the passed in format string.</source>
          <target state="translated">현재 날짜 또는 하루 내에있는 날짜의 경우 &quot;오늘&quot;, &quot;내일&quot;또는 &quot;어제&quot;를 적절하게 반환하십시오. 그렇지 않으면 전달 된 형식 문자열을 사용하여 날짜를 형식화하십시오.</target>
        </trans-unit>
        <trans-unit id="522a331d5225fa66def9fc3bd2e8fac66fc5b772" translate="yes" xml:space="preserve">
          <source>For datetime and time fields, an exact hour match. Allows chaining additional field lookups. Takes an integer between 0 and 23.</source>
          <target state="translated">날짜 및 시간 필드의 경우 정확한 시간이 일치합니다. 추가 필드 조회 연결을 허용합니다. 0에서 23 사이의 정수를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="ac89f2c106463643fd9699cf90f5e9127b0da47c" translate="yes" xml:space="preserve">
          <source>For datetime and time fields, an exact minute match. Allows chaining additional field lookups. Takes an integer between 0 and 59.</source>
          <target state="translated">날짜 시간 및 시간 필드의 경우 정확히 분이 일치합니다. 추가 필드 조회 연결을 허용합니다. 0에서 59 사이의 정수를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="cb253c63a93a7f34a17bfff1bcace0dc8609b145" translate="yes" xml:space="preserve">
          <source>For datetime and time fields, an exact second match. Allows chaining additional field lookups. Takes an integer between 0 and 59.</source>
          <target state="translated">날짜 시간 및 시간 필드의 경우 정확히 두 번째 일치합니다. 추가 필드 조회 연결을 허용합니다. 0에서 59 사이의 정수를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="065ccdbf361bd445a3ea9b16f5af4220346cf69e" translate="yes" xml:space="preserve">
          <source>For datetime fields, casts the value as date. Allows chaining additional field lookups. Takes a date value.</source>
          <target state="translated">날짜 / 시간 필드의 경우 값을 날짜로 캐스트합니다. 추가 필드 조회 연결을 허용합니다. 날짜 값을받습니다.</target>
        </trans-unit>
        <trans-unit id="5cb754f1dcc8bef12a5572feace62cc16ce3e1ad" translate="yes" xml:space="preserve">
          <source>For datetime fields, casts the value as time. Allows chaining additional field lookups. Takes a &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.time&quot;&gt;&lt;code&gt;datetime.time&lt;/code&gt;&lt;/a&gt; value.</source>
          <target state="translated">날짜 시간 필드의 경우 값을 시간으로 캐스트합니다. 추가 필드 조회 연결을 허용합니다. 소요 &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.time&quot;&gt; &lt;code&gt;datetime.time&lt;/code&gt; 의&lt;/a&gt; 값입니다.</target>
        </trans-unit>
        <trans-unit id="287a99b6d2ccfdfa613eb3ea97b6c9626d6505b7" translate="yes" xml:space="preserve">
          <source>For datetime values, returns a string representing how many seconds, minutes or hours ago it was &amp;ndash; falling back to the &lt;a href=&quot;../templates/builtins#std:templatefilter-timesince&quot;&gt;&lt;code&gt;timesince&lt;/code&gt;&lt;/a&gt; format if the value is more than a day old. In case the datetime value is in the future the return value will automatically use an appropriate phrase.</source>
          <target state="translated">날짜 / 시간 값의 경우 몇 초, 몇 분 또는 몇 시간 전인지를 나타내는 문자열을 반환 합니다. 값이 하루 이상인 경우 &lt;a href=&quot;../templates/builtins#std:templatefilter-timesince&quot;&gt; &lt;code&gt;timesince&lt;/code&gt; &lt;/a&gt; 형식으로 돌아갑니다 . 날짜 / 시간 값이 미래인 경우 반환 값은 자동으로 적절한 문구를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="ce8b44858ceebee50a15dccd632d32f06ba831f7" translate="yes" xml:space="preserve">
          <source>For debug purposes only!</source>
          <target state="translated">디버그 목적으로 만!</target>
        </trans-unit>
        <trans-unit id="1e5e8cc6373625d6ede780576c6909b6713e5dda" translate="yes" xml:space="preserve">
          <source>For definitions of the different versions of RSS, see: &lt;a href=&quot;https://web.archive.org/web/20110718035220/http://diveintomark.org/archives/2004/02/04/incompatible-rss&quot;&gt;https://web.archive.org/web/20110718035220/http://diveintomark.org/archives/2004/02/04/incompatible-rss&lt;/a&gt;</source>
          <target state="translated">다른 버전의 RSS에 대한 정의는 &lt;a href=&quot;https://web.archive.org/web/20110718035220/http://diveintomark.org/archives/2004/02/04/incompatible-rss&quot;&gt;https://web.archive.org/web/20110718035220/http://diveintomark.org/archives/2004/02/04/incompatible-rss를&lt;/a&gt; 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="0dc5d40b5d2ee131a558d783f74733735bef205e" translate="yes" xml:space="preserve">
          <source>For detailed description how names passed in &lt;code&gt;kwargs&lt;/code&gt; are resolved see &lt;a href=&quot;#django.db.models.query.QuerySet.get_or_create&quot;&gt;&lt;code&gt;get_or_create()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;kwargs&lt;/code&gt; 에 전달 된 이름 이 분석 되는 방법에 대한 자세한 설명 은 &lt;a href=&quot;#django.db.models.query.QuerySet.get_or_create&quot;&gt; &lt;code&gt;get_or_create()&lt;/code&gt; &lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="7f6c3c45c81cb288d50532a438e4c2e1de010cf9" translate="yes" xml:space="preserve">
          <source>For details on accessing backwards-related objects, see the &lt;a href=&quot;queries#backwards-related-objects&quot;&gt;Following relationships backward example&lt;/a&gt;.</source>
          <target state="translated">역방향 관련 개체에 액세스하는 방법에 대한 자세한 내용은 &lt;a href=&quot;queries#backwards-related-objects&quot;&gt;다음 관계 역방향 예를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="163379e03ba2cf1b5d26dfdc8ca39d2b4c17c2a4" translate="yes" xml:space="preserve">
          <source>For details on how to add your own checks and integrate them with Django&amp;rsquo;s system checks, see the &lt;a href=&quot;../topics/checks&quot;&gt;System check topic guide&lt;/a&gt;.</source>
          <target state="translated">자체 검사를 추가하고 Django의 시스템 검사와 통합하는 방법에 대한 자세한 내용은 &lt;a href=&quot;../topics/checks&quot;&gt;시스템 검사 주제 안내서를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="5dc195be6c74605240dd1d253de36726e6d6d316" translate="yes" xml:space="preserve">
          <source>For details on how you&amp;rsquo;d write one of these backends, see &lt;a href=&quot;../custom-file-storage&quot;&gt;Writing a custom storage system&lt;/a&gt;. There are 3rd party apps available that provide storage backends for many common file storage APIs. A good starting point is the &lt;a href=&quot;https://djangopackages.org/grids/g/storage-backends/&quot;&gt;overview at djangopackages.org&lt;/a&gt;.</source>
          <target state="translated">이러한 백엔드 중 하나를 작성하는 방법에 대한 자세한 내용 &lt;a href=&quot;../custom-file-storage&quot;&gt;은 사용자 지정 스토리지 시스템 작성을&lt;/a&gt; 참조하십시오 . 많은 공통 파일 스토리지 API에 스토리지 백엔드를 제공하는 타사 앱이 있습니다. 좋은 출발점은 &lt;a href=&quot;https://djangopackages.org/grids/g/storage-backends/&quot;&gt;djangopackages.org&lt;/a&gt; 의 개요 입니다.</target>
        </trans-unit>
        <trans-unit id="52957ba84f98b1d5cee6b3fcf986ebb5e0aeef4b" translate="yes" xml:space="preserve">
          <source>For details, see &lt;a href=&quot;#playing-with-context&quot;&gt;Playing with Context objects&lt;/a&gt; below.</source>
          <target state="translated">자세한 내용은 아래의 &lt;a href=&quot;#playing-with-context&quot;&gt;컨텍스트 객체로 재생을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="8ca13a30dff65815da18fa43605645bf867c1ee7" translate="yes" xml:space="preserve">
          <source>For each &lt;a href=&quot;../../topics/templates#django.template.backends.django.DjangoTemplates&quot;&gt;&lt;code&gt;DjangoTemplates&lt;/code&gt;&lt;/a&gt; backend in the &lt;a href=&quot;../settings#std:setting-TEMPLATES&quot;&gt;&lt;code&gt;TEMPLATES&lt;/code&gt;&lt;/a&gt; setting, Django instantiates an &lt;a href=&quot;#django.template.Engine&quot;&gt;&lt;code&gt;Engine&lt;/code&gt;&lt;/a&gt;. &lt;a href=&quot;../../topics/templates#django.template.backends.django.DjangoTemplates&quot;&gt;&lt;code&gt;DjangoTemplates&lt;/code&gt;&lt;/a&gt; wraps &lt;a href=&quot;#django.template.Engine&quot;&gt;&lt;code&gt;Engine&lt;/code&gt;&lt;/a&gt; and adapts it to the common template backend API.</source>
          <target state="translated">&lt;a href=&quot;../settings#std:setting-TEMPLATES&quot;&gt; &lt;code&gt;TEMPLATES&lt;/code&gt; &lt;/a&gt; 설정 의 각 &lt;a href=&quot;../../topics/templates#django.template.backends.django.DjangoTemplates&quot;&gt; &lt;code&gt;DjangoTemplates&lt;/code&gt; &lt;/a&gt; 백엔드에 대해 Django는 &lt;a href=&quot;#django.template.Engine&quot;&gt; &lt;code&gt;Engine&lt;/code&gt; &lt;/a&gt; 인스턴스를 생성합니다 . &lt;a href=&quot;../../topics/templates#django.template.backends.django.DjangoTemplates&quot;&gt; &lt;code&gt;DjangoTemplates&lt;/code&gt; 는&lt;/a&gt;&lt;a href=&quot;#django.template.Engine&quot;&gt; &lt;code&gt;Engine&lt;/code&gt; &lt;/a&gt; 감싸서 공통 템플릿 백엔드 API에 적용합니다.</target>
        </trans-unit>
        <trans-unit id="091dadf61f9a776beb554812fdfed65ad59f5923" translate="yes" xml:space="preserve">
          <source>For each action, you can supply either a list of values or a string. When the value already exists in the list, &lt;code&gt;append&lt;/code&gt; and &lt;code&gt;prepend&lt;/code&gt; have no effect; neither does &lt;code&gt;remove&lt;/code&gt; when the value doesn&amp;rsquo;t exist.</source>
          <target state="translated">각 조치에 대해 값 목록 또는 문자열을 제공 할 수 있습니다. 값이 이미 목록에 있으면 &lt;code&gt;append&lt;/code&gt; 및 &lt;code&gt;prepend&lt;/code&gt; 하지 않습니다. 어느 쪽도 않습니다 &lt;code&gt;remove&lt;/code&gt; 값이 존재하지 않는 경우.</target>
        </trans-unit>
        <trans-unit id="eb987d0190d5c3530e37b746933ad08afcfcfcbc" translate="yes" xml:space="preserve">
          <source>For each field, we describe the default widget used if you don&amp;rsquo;t specify &lt;code&gt;widget&lt;/code&gt;. We also specify the value returned when you provide an empty value (see the section on &lt;code&gt;required&lt;/code&gt; above to understand what that means).</source>
          <target state="translated">각 필드의 경우, 우리는 당신이 지정하지 않은 경우 기본 위젯 사용 설명 &lt;code&gt;widget&lt;/code&gt; . 또한 빈 값을 제공 할 때 반환되는 값을 지정합니다 ( 무엇을 의미하는지 이해 &lt;code&gt;required&lt;/code&gt; 위의 필수 섹션 참조 ).</target>
        </trans-unit>
        <trans-unit id="d87202ef729a6cdd9bbc8a5b5c66e91ce34e02ed" translate="yes" xml:space="preserve">
          <source>For each model field that has &lt;a href=&quot;#django.db.models.Field.choices&quot;&gt;&lt;code&gt;choices&lt;/code&gt;&lt;/a&gt; set, Django will add a method to retrieve the human-readable name for the field&amp;rsquo;s current value. See &lt;a href=&quot;instances#django.db.models.Model.get_FOO_display&quot;&gt;&lt;code&gt;get_FOO_display()&lt;/code&gt;&lt;/a&gt; in the database API documentation.</source>
          <target state="translated">&lt;a href=&quot;#django.db.models.Field.choices&quot;&gt; &lt;code&gt;choices&lt;/code&gt; &lt;/a&gt; 설정된 각 모델 필드에 대해 Django는 필드의 현재 값에 대한 사람이 읽을 수있는 이름을 검색하는 방법을 추가합니다. 데이터베이스 API 설명서에서 &lt;a href=&quot;instances#django.db.models.Model.get_FOO_display&quot;&gt; &lt;code&gt;get_FOO_display()&lt;/code&gt; &lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="b819f24d3cbd85ac1143152ab6d80ae072da700c" translate="yes" xml:space="preserve">
          <source>For each page (response) that Django sends back from a view, it might provide two HTTP headers: the &lt;code&gt;ETag&lt;/code&gt; header and the &lt;code&gt;Last-Modified&lt;/code&gt; header. These headers are optional on HTTP responses. They can be set by your view function, or you can rely on the &lt;a href=&quot;../ref/middleware#django.middleware.http.ConditionalGetMiddleware&quot;&gt;&lt;code&gt;ConditionalGetMiddleware&lt;/code&gt;&lt;/a&gt; middleware to set the &lt;code&gt;ETag&lt;/code&gt; header.</source>
          <target state="translated">Django가 뷰에서 다시 보내는 각 페이지 (응답)에 대해 &lt;code&gt;ETag&lt;/code&gt; 헤더와 &lt;code&gt;Last-Modified&lt;/code&gt; 헤더의 두 가지 HTTP 헤더를 제공 할 수 있습니다 . 이 헤더는 HTTP 응답에서 선택 사항입니다. 뷰 함수에 의해 설정되거나 &lt;a href=&quot;../ref/middleware#django.middleware.http.ConditionalGetMiddleware&quot;&gt; &lt;code&gt;ConditionalGetMiddleware&lt;/code&gt; &lt;/a&gt; 미들웨어를 사용하여 &lt;code&gt;ETag&lt;/code&gt; 헤더 를 설정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="56f104ebb00413a98694e90de1856d9319998a8a" translate="yes" xml:space="preserve">
          <source>For each row in your CSV file, call &lt;code&gt;writer.writerow&lt;/code&gt;, passing it an &lt;a href=&quot;https://docs.python.org/3/glossary.html#term-iterable&quot;&gt;iterable&lt;/a&gt;.</source>
          <target state="translated">CSV 파일의 각 행에 대해 &lt;code&gt;writer.writerow&lt;/code&gt; 를 호출 하여 &lt;a href=&quot;https://docs.python.org/3/glossary.html#term-iterable&quot;&gt;iterable을&lt;/a&gt; 전달하십시오 .</target>
        </trans-unit>
        <trans-unit id="3cab83a5a714010f9187f9c6425c8314cf762fc1" translate="yes" xml:space="preserve">
          <source>For each template tag the template parser encounters, it calls a Python function with the tag contents and the parser object itself. This function is responsible for returning a &lt;code&gt;Node&lt;/code&gt; instance based on the contents of the tag.</source>
          <target state="translated">템플릿 파서가 만나는 각 템플릿 태그에 대해 태그 내용과 파서 객체 자체가 포함 된 Python 함수를 호출합니다. 이 함수는 태그의 내용을 기반으로 &lt;code&gt;Node&lt;/code&gt; 인스턴스 를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="ca1d72c8182315b714de1b3cc74b5c3db54b95aa" translate="yes" xml:space="preserve">
          <source>For empty bands (where all pixel values are &amp;ldquo;no data&amp;rdquo;), all statistics are returned as &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">빈 밴드 (모든 픽셀 값이&amp;ldquo;데이터 없음&amp;rdquo;인 경우)의 경우 모든 통계는 &lt;code&gt;None&lt;/code&gt; 으로 반환됩니다 .</target>
        </trans-unit>
        <trans-unit id="86553258332baa0d4dd5dd4328d0faa7deb87755" translate="yes" xml:space="preserve">
          <source>For every &lt;a href=&quot;fields#django.db.models.DateField&quot;&gt;&lt;code&gt;DateField&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;fields#django.db.models.DateTimeField&quot;&gt;&lt;code&gt;DateTimeField&lt;/code&gt;&lt;/a&gt; that does not have &lt;a href=&quot;fields#django.db.models.Field.null&quot;&gt;&lt;code&gt;null=True&lt;/code&gt;&lt;/a&gt;, the object will have &lt;code&gt;get_next_by_FOO()&lt;/code&gt; and &lt;code&gt;get_previous_by_FOO()&lt;/code&gt; methods, where &lt;code&gt;FOO&lt;/code&gt; is the name of the field. This returns the next and previous object with respect to the date field, raising a &lt;a href=&quot;#django.db.models.Model.DoesNotExist&quot;&gt;&lt;code&gt;DoesNotExist&lt;/code&gt;&lt;/a&gt; exception when appropriate.</source>
          <target state="translated">&lt;a href=&quot;fields#django.db.models.Field.null&quot;&gt; &lt;code&gt;null=True&lt;/code&gt; &lt;/a&gt; 가없는 모든 &lt;a href=&quot;fields#django.db.models.DateField&quot;&gt; &lt;code&gt;DateField&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;fields#django.db.models.DateTimeField&quot;&gt; &lt;code&gt;DateTimeField&lt;/code&gt; &lt;/a&gt; 에 대해 객체에는 &lt;code&gt;get_next_by_FOO()&lt;/code&gt; 및 &lt;code&gt;get_previous_by_FOO()&lt;/code&gt; 메서드가 있습니다. 여기서 &lt;code&gt;FOO&lt;/code&gt; 는 필드의 이름입니다. 그러면 날짜 필드와 관련하여 다음 개체와 이전 개체가 반환되어 적절한 경우 &lt;a href=&quot;#django.db.models.Model.DoesNotExist&quot;&gt; &lt;code&gt;DoesNotExist&lt;/code&gt; &lt;/a&gt; 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="c6af115638455b1658d0ace819b2ffe32487193f" translate="yes" xml:space="preserve">
          <source>For every field that has &lt;a href=&quot;fields#django.db.models.Field.choices&quot;&gt;&lt;code&gt;choices&lt;/code&gt;&lt;/a&gt; set, the object will have a &lt;code&gt;get_FOO_display()&lt;/code&gt; method, where &lt;code&gt;FOO&lt;/code&gt; is the name of the field. This method returns the &amp;ldquo;human-readable&amp;rdquo; value of the field.</source>
          <target state="translated">&lt;a href=&quot;fields#django.db.models.Field.choices&quot;&gt; &lt;code&gt;choices&lt;/code&gt; &lt;/a&gt; 설정된 모든 필드 에 대해 오브젝트에는 &lt;code&gt;get_FOO_display()&lt;/code&gt; 메소드가 있습니다. 여기서 &lt;code&gt;FOO&lt;/code&gt; 는 필드 이름입니다. 이 메서드는 필드의 &quot;사람이 읽을 수있는&quot;값을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="a9d8934a0281dff5b47483effb2b261b49b28dd4" translate="yes" xml:space="preserve">
          <source>For example &lt;code&gt;Index(fields=['headline', '-pub_date'])&lt;/code&gt; would create SQL with &lt;code&gt;(headline, pub_date DESC)&lt;/code&gt;. Index ordering isn&amp;rsquo;t supported on MySQL. In that case, a descending index is created as a normal index.</source>
          <target state="translated">예를 들어 &lt;code&gt;Index(fields=['headline', '-pub_date'])&lt;/code&gt; 는 &lt;code&gt;(headline, pub_date DESC)&lt;/code&gt; SQL을 작성 합니다. 인덱스 순서는 MySQL에서 지원되지 않습니다. 이 경우, 내림차순 인덱스는 일반 인덱스로 작성됩니다.</target>
        </trans-unit>
        <trans-unit id="a28eb7a67fa4fb46ad0e0b99179060eb9054ee2d" translate="yes" xml:space="preserve">
          <source>For example if you have &lt;code&gt;first_name&lt;/code&gt; as a model field and as a &lt;code&gt;ModelAdmin&lt;/code&gt; attribute, the model field will be used.</source>
          <target state="translated">예를 들어 &lt;code&gt;first_name&lt;/code&gt; 을 모델 필드 및 &lt;code&gt;ModelAdmin&lt;/code&gt; 속성으로 사용하는 경우 모델 필드가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="06db7318354368de96f4145dda37303d15869be2" translate="yes" xml:space="preserve">
          <source>For example if you wanted to customize the wording of all user facing strings for the &lt;code&gt;name&lt;/code&gt; field:</source>
          <target state="translated">예를 들어 &lt;code&gt;name&lt;/code&gt; 필드에 대해 모든 사용자 대면 문자열의 문구를 사용자 정의하려는 경우 :</target>
        </trans-unit>
        <trans-unit id="7cdc6afd51e180f7d936e985484811415dc36686" translate="yes" xml:space="preserve">
          <source>For example if you wanted to display a particular inline only in the change view, you could override &lt;code&gt;get_formsets_with_inlines&lt;/code&gt; as follows:</source>
          <target state="translated">예를 들어 변경보기에만 특정 인라인을 표시하려는 경우 다음과 같이 &lt;code&gt;get_formsets_with_inlines&lt;/code&gt; 를 대체 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f77c456b474676c048010c32ab9b46790e583436" translate="yes" xml:space="preserve">
          <source>For example to attach &lt;code&gt;request.user&lt;/code&gt; to the object prior to saving:</source>
          <target state="translated">예를 들어 , 저장하기 전에 &lt;code&gt;request.user&lt;/code&gt; 를 오브젝트 에 첨부하려면 다음을 수행하십시오 .</target>
        </trans-unit>
        <trans-unit id="9ad3936c55afd72b17f1bad1033bbc892e0fb5f4" translate="yes" xml:space="preserve">
          <source>For example, &lt;a href=&quot;../topics/i18n/index&quot;&gt;internationalization&lt;/a&gt; middleware would need to distinguish caches by the &lt;code&gt;Accept-language&lt;/code&gt; header.</source>
          <target state="translated">예를 들어 &lt;a href=&quot;../topics/i18n/index&quot;&gt;국제화&lt;/a&gt; 미들웨어는 &lt;code&gt;Accept-language&lt;/code&gt; 헤더 로 캐시를 구별해야합니다 .</target>
        </trans-unit>
        <trans-unit id="9f50938580412245d851907183f7cbae1c995a73" translate="yes" xml:space="preserve">
          <source>For example, &lt;a href=&quot;fields#django.db.models.DateField&quot;&gt;&lt;code&gt;DateField&lt;/code&gt;&lt;/a&gt; fields use a Python &lt;code&gt;datetime&lt;/code&gt; object to store data. Databases don&amp;rsquo;t store &lt;code&gt;datetime&lt;/code&gt; objects, so the field value must be converted into an ISO-compliant date string for insertion into the database.</source>
          <target state="translated">예를 들어 &lt;a href=&quot;fields#django.db.models.DateField&quot;&gt; &lt;code&gt;DateField&lt;/code&gt; &lt;/a&gt; 필드는 Python &lt;code&gt;datetime&lt;/code&gt; 객체를 사용하여 데이터를 저장합니다. 데이터베이스는 &lt;code&gt;datetime&lt;/code&gt; 객체를 저장하지 않으므로 데이터베이스 에 삽입하려면 필드 값을 ISO 호환 날짜 문자열로 변환해야합니다.</target>
        </trans-unit>
        <trans-unit id="3a27bf38226ab7ff07f5623795efbd9cac29bd85" translate="yes" xml:space="preserve">
          <source>For example, &lt;a href=&quot;fields#django.forms.DateField&quot;&gt;&lt;code&gt;DateField&lt;/code&gt;&lt;/a&gt; normalizes input into a Python &lt;code&gt;datetime.date&lt;/code&gt; object. Regardless of whether you pass it a string in the format &lt;code&gt;'1994-07-15'&lt;/code&gt;, a &lt;code&gt;datetime.date&lt;/code&gt; object, or a number of other formats, &lt;code&gt;DateField&lt;/code&gt; will always normalize it to a &lt;code&gt;datetime.date&lt;/code&gt; object as long as it&amp;rsquo;s valid.</source>
          <target state="translated">예를 들어 &lt;a href=&quot;fields#django.forms.DateField&quot;&gt; &lt;code&gt;DateField&lt;/code&gt; &lt;/a&gt; 는 Python &lt;code&gt;datetime.date&lt;/code&gt; 객체 에 대한 입력을 정규화 합니다. &lt;code&gt;'1994-07-15'&lt;/code&gt; 형식의 문자열 , &lt;code&gt;datetime.date&lt;/code&gt; 객체 또는 기타 여러 형식 으로 문자열을 전달하는지 여부에 관계없이 &lt;code&gt;DateField&lt;/code&gt; 는 유효한 경우 항상 &lt;code&gt;datetime.date&lt;/code&gt; 객체로 정규화 합니다.</target>
        </trans-unit>
        <trans-unit id="a7d3d035b67f52b99c390681f0df8036d9d1284d" translate="yes" xml:space="preserve">
          <source>For example, &lt;a href=&quot;i18n/translation#lazy-translations&quot;&gt;lazy translation&lt;/a&gt; can be used before the target language is even known, because it doesn&amp;rsquo;t take place until the translated string is actually required, such as in a rendered template.</source>
          <target state="translated">예를 들어, 렌더링 된 템플릿과 같이 번역 된 문자열이 실제로 필요할 때까지 대상 언어가 알려지기 전에 &lt;a href=&quot;i18n/translation#lazy-translations&quot;&gt;지연 번역을&lt;/a&gt; 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="65626bcffc97252495c52e838ec35256fdf62bcb" translate="yes" xml:space="preserve">
          <source>For example, &lt;a href=&quot;utils#django.utils.translation.gettext&quot;&gt;&lt;code&gt;gettext()&lt;/code&gt;&lt;/a&gt; uses the app registry to look up translation catalogs in applications. To translate at import time, you need &lt;a href=&quot;utils#django.utils.translation.gettext_lazy&quot;&gt;&lt;code&gt;gettext_lazy()&lt;/code&gt;&lt;/a&gt; instead. (Using &lt;a href=&quot;utils#django.utils.translation.gettext&quot;&gt;&lt;code&gt;gettext()&lt;/code&gt;&lt;/a&gt; would be a bug, because the translation would happen at import time, rather than at each request depending on the active language.)</source>
          <target state="translated">예를 들어 &lt;a href=&quot;utils#django.utils.translation.gettext&quot;&gt; &lt;code&gt;gettext()&lt;/code&gt; &lt;/a&gt; 는 앱 레지스트리를 사용하여 애플리케이션에서 번역 카탈로그를 찾습니다. 가져 오기 시간에 번역하려면 대신 &lt;a href=&quot;utils#django.utils.translation.gettext_lazy&quot;&gt; &lt;code&gt;gettext_lazy()&lt;/code&gt; &lt;/a&gt; 가 필요 합니다. ( &lt;a href=&quot;utils#django.utils.translation.gettext&quot;&gt; &lt;code&gt;gettext()&lt;/code&gt; &lt;/a&gt; 사용하면 버그가 발생합니다. 번역은 활성 언어에 따라 각 요청이 아닌 가져 오기 시간에 발생하기 때문입니다.)</target>
        </trans-unit>
        <trans-unit id="f5be2fd2ea1a9ec8e596aeedb6d085b373362255" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;CheckConstraint(check=Q(age__gte=18), name='age_gte_18')&lt;/code&gt; ensures the age field is never less than 18.</source>
          <target state="translated">예를 들어 &lt;code&gt;CheckConstraint(check=Q(age__gte=18), name='age_gte_18')&lt;/code&gt; 는 연령 필드가 18보다 작지 않도록합니다.</target>
        </trans-unit>
        <trans-unit id="12d159ad663a37fc7486d7d61ec051e5cf1aeeac" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;GinIndex(name='json_index', fields=['jsonfield'],
opclasses=['jsonb_path_ops'])&lt;/code&gt; creates a gin index on &lt;code&gt;jsonfield&lt;/code&gt; using &lt;code&gt;jsonb_path_ops&lt;/code&gt;.</source>
          <target state="translated">예를 들어, &lt;code&gt;GinIndex(name='json_index', fields=['jsonfield'], opclasses=['jsonb_path_ops'])&lt;/code&gt; 는 &lt;code&gt;jsonfield&lt;/code&gt; 사용하여 &lt;code&gt;jsonb_path_ops&lt;/code&gt; 에 진 인덱스를 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="8529ce07a1126b744d3c5ea07ee62908bb7f707a" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;SELECT DISTINCT ON (a)&lt;/code&gt; gives you the first row for each value in column &lt;code&gt;a&lt;/code&gt;. If you don&amp;rsquo;t specify an order, you&amp;rsquo;ll get some arbitrary row.</source>
          <target state="translated">예를 들어, &lt;code&gt;SELECT DISTINCT ON (a)&lt;/code&gt; 는 열 &lt;code&gt;a&lt;/code&gt; 의 각 값에 대한 첫 번째 행을 제공합니다 . 주문을 지정하지 않으면 임의의 행이 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="390b16cd2cf8e734568d834589997b24d4d5756d" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;UniqueConstraint(fields=['room', 'date'],
name='unique_booking')&lt;/code&gt; ensures each room can only be booked once for each date.</source>
          <target state="translated">예를 들어 &lt;code&gt;UniqueConstraint(fields=['room', 'date'], name='unique_booking')&lt;/code&gt; 하면 각 날짜에 대해 각 객실을 한 번만 예약 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="daa52bee5674e99acfc849dbcff198f33e258e7e" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;foo.com/bar&lt;/code&gt; will be redirected to &lt;code&gt;foo.com/bar/&lt;/code&gt; if you don&amp;rsquo;t have a valid URL pattern for &lt;code&gt;foo.com/bar&lt;/code&gt; but &lt;em&gt;do&lt;/em&gt; have a valid pattern for &lt;code&gt;foo.com/bar/&lt;/code&gt;.</source>
          <target state="translated">예를 들어, &lt;code&gt;foo.com/bar&lt;/code&gt; 가 로 리디렉션됩니다 &lt;code&gt;foo.com/bar/&lt;/code&gt; 당신의 유효한 URL 패턴이없는 경우 &lt;code&gt;foo.com/bar&lt;/code&gt; 을 하지만 &lt;em&gt;않습니다&lt;/em&gt; 에 대한 유효한 패턴이 &lt;code&gt;foo.com/bar/&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="acda421e62fa57606e2437699da05abac72b152b" translate="yes" xml:space="preserve">
          <source>For example, Django uses the following method for its &lt;a href=&quot;../ref/models/fields#django.db.models.BinaryField&quot;&gt;&lt;code&gt;BinaryField&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">예를 들어 Django는 &lt;a href=&quot;../ref/models/fields#django.db.models.BinaryField&quot;&gt; &lt;code&gt;BinaryField&lt;/code&gt; 에&lt;/a&gt; 다음 방법을 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="8e172ef87663d0b86cc887111ff1dc787b57de3f" translate="yes" xml:space="preserve">
          <source>For example, Django was used at &lt;a href=&quot;http://www.kusports.com/&quot;&gt;kusports.com&lt;/a&gt; to generate customized, printer-friendly NCAA tournament brackets, as PDF files, for people participating in a March Madness contest.</source>
          <target state="translated">예를 들어, Django는 &lt;a href=&quot;http://www.kusports.com/&quot;&gt;kusports.com&lt;/a&gt; 에서 March Madness 공모전에 참가한 사람들을 위해 PDF 파일로 사용자 정의 된 프린터 친화적 인 NCAA 토너먼트 브래킷을 생성 하는 데 사용되었습니다 .</target>
        </trans-unit>
        <trans-unit id="80943883f7d984a6641475f505bdfdd86703d93d" translate="yes" xml:space="preserve">
          <source>For example, a JSON mixin might look something like this:</source>
          <target state="translated">예를 들어 JSON 믹스 인은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="d622b054a138b10227a9f803d572d5e5a50d59f0" translate="yes" xml:space="preserve">
          <source>For example, a website could offer an RSS feed of recent crimes for every police beat in a city. It&amp;rsquo;d be silly to create a separate &lt;a href=&quot;#django.contrib.syndication.views.Feed&quot;&gt;&lt;code&gt;Feed&lt;/code&gt;&lt;/a&gt; class for each police beat; that would violate the &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/misc/design-philosophies/#dry&quot;&gt;DRY principle&lt;/a&gt; and would couple data to programming logic. Instead, the syndication framework lets you access the arguments passed from your &lt;a href=&quot;../../topics/http/urls&quot;&gt;URLconf&lt;/a&gt; so feeds can output items based on information in the feed&amp;rsquo;s URL.</source>
          <target state="translated">예를 들어, 웹 사이트는 도시의 모든 경찰에 대해 최근 범죄에 대한 RSS 피드를 제공 할 수 있습니다. 각 경찰에 대해 별도의 &lt;a href=&quot;#django.contrib.syndication.views.Feed&quot;&gt; &lt;code&gt;Feed&lt;/code&gt; &lt;/a&gt; 클래스 를 만드는 것은 어리석은 일입니다 . 이는 &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/misc/design-philosophies/#dry&quot;&gt;DRY 원칙을&lt;/a&gt; 위반하고 데이터를 프로그래밍 로직에 연결합니다. 대신 신디케이션 프레임 워크를 사용하면 &lt;a href=&quot;../../topics/http/urls&quot;&gt;URLconf&lt;/a&gt; 에서 전달 된 인수에 액세스하여 피드가 피드 URL의 정보를 기반으로 항목을 출력 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="32c09ab0d99cab3d599659013ef2ae359d32fd04" translate="yes" xml:space="preserve">
          <source>For example, an attacker could log into &lt;code&gt;good.example.com&lt;/code&gt; and get a valid session for their account. If the attacker has control over &lt;code&gt;bad.example.com&lt;/code&gt;, they can use it to send their session key to you since a subdomain is permitted to set cookies on &lt;code&gt;*.example.com&lt;/code&gt;. When you visit &lt;code&gt;good.example.com&lt;/code&gt;, you&amp;rsquo;ll be logged in as the attacker and might inadvertently enter your sensitive personal data (e.g. credit card info) into the attacker&amp;rsquo;s account.</source>
          <target state="translated">예를 들어 공격자는 &lt;code&gt;good.example.com&lt;/code&gt; 에 로그인하여 자신의 계정에 유효한 세션을 얻을 수 있습니다. 공격자가 &lt;code&gt;bad.example.com&lt;/code&gt; 을 제어 할 경우 하위 도메인이 &lt;code&gt;*.example.com&lt;/code&gt; 에서 쿠키를 설정할 수 있으므로 세션 키를 보내는 데 사용할 수 있습니다 . &lt;code&gt;good.example.com&lt;/code&gt; 을 방문 하면 공격자로 로그인되어 실수로 민감한 개인 데이터 (예 : 신용 카드 정보)를 침입자의 계정에 입력 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a246838b4dded87ebc8eaa300c816133a80d83cb" translate="yes" xml:space="preserve">
          <source>For example, assuming an Email model that has a &lt;code&gt;body&lt;/code&gt; attribute and a many-to-many relation to User, the following template code is optimal:</source>
          <target state="translated">예를 들어 &lt;code&gt;body&lt;/code&gt; 속성이 있고 User와 다 대다 관계 가있는 Email 모델을 가정 하면 다음 템플릿 코드가 최적입니다.</target>
        </trans-unit>
        <trans-unit id="1d722e1124a3a5f8ff5fb6e2d47961555ceb8107" translate="yes" xml:space="preserve">
          <source>For example, assuming the following class-based view:</source>
          <target state="translated">예를 들어 다음과 같은 클래스 기반 뷰를 가정합니다.</target>
        </trans-unit>
        <trans-unit id="f24493d60cc4ff3745f2d26d5246cb69bda1d13d" translate="yes" xml:space="preserve">
          <source>For example, assuming you have &lt;a href=&quot;#std:setting-STATIC_URL&quot;&gt;&lt;code&gt;STATIC_URL&lt;/code&gt;&lt;/a&gt; set to &lt;code&gt;'/static/'&lt;/code&gt;, the &lt;a href=&quot;contrib/staticfiles#django-admin-collectstatic&quot;&gt;&lt;code&gt;collectstatic&lt;/code&gt;&lt;/a&gt; management command would collect the &amp;ldquo;stats&amp;rdquo; files in a &lt;code&gt;'downloads'&lt;/code&gt; subdirectory of &lt;a href=&quot;#std:setting-STATIC_ROOT&quot;&gt;&lt;code&gt;STATIC_ROOT&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">예를 들어, &lt;a href=&quot;#std:setting-STATIC_URL&quot;&gt; &lt;code&gt;STATIC_URL&lt;/code&gt; &lt;/a&gt; 을 &lt;code&gt;'/static/'&lt;/code&gt; 로 설정 한 경우 &lt;a href=&quot;contrib/staticfiles#django-admin-collectstatic&quot;&gt; &lt;code&gt;collectstatic&lt;/code&gt; &lt;/a&gt; 관리 명령은 &lt;a href=&quot;#std:setting-STATIC_ROOT&quot;&gt; &lt;code&gt;STATIC_ROOT&lt;/code&gt; &lt;/a&gt; 의 &lt;code&gt;'downloads'&lt;/code&gt; 서브 디렉토리 에서&amp;ldquo;stats&amp;rdquo;파일을 수집합니다 .</target>
        </trans-unit>
        <trans-unit id="b76b34053dc515346add887966fae4b47621b177" translate="yes" xml:space="preserve">
          <source>For example, both of these models use the same underlying database table:</source>
          <target state="translated">예를 들어,이 두 모델 모두 동일한 기본 데이터베이스 테이블을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="be04b24d7f1f643fa63e9892d175c3cc722c423b" translate="yes" xml:space="preserve">
          <source>For example, consider an author query that attempts to find out the average rating of books written by each author:</source>
          <target state="translated">예를 들어, 각 저자가 쓴 책의 평균 등급을 찾으려는 저자 쿼리를 생각해보십시오.</target>
        </trans-unit>
        <trans-unit id="4d41e3a123d0a71ac27a375044995f1535e74d7c" translate="yes" xml:space="preserve">
          <source>For example, consider the case of an application tracking the musical groups which musicians belong to. There is a many-to-many relationship between a person and the groups of which they are a member, so you could use a &lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField&quot;&gt;&lt;code&gt;ManyToManyField&lt;/code&gt;&lt;/a&gt; to represent this relationship. However, there is a lot of detail about the membership that you might want to collect, such as the date at which the person joined the group.</source>
          <target state="translated">예를 들어, 음악가가 속한 음악 그룹을 추적하는 응용 프로그램의 경우를 고려하십시오. 개인과 구성원 인 그룹간에 다 대다 관계가 있으므로 &lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField&quot;&gt; &lt;code&gt;ManyToManyField&lt;/code&gt; &lt;/a&gt; 를 사용 하여이 관계를 나타낼 수 있습니다 . 그러나 개인이 그룹에 가입 한 날짜와 같이 수집하려는 멤버십에 대한 세부 사항이 많이 있습니다.</target>
        </trans-unit>
        <trans-unit id="1ee6868d72ee360f060d928e04a60f0b6da77184" translate="yes" xml:space="preserve">
          <source>For example, consider the following exchange between the client and server:</source>
          <target state="translated">예를 들어, 클라이언트와 서버 간의 다음 교환을 고려하십시오.</target>
        </trans-unit>
        <trans-unit id="50dfca05afb0b864e6e367b2f5b53711b365f279" translate="yes" xml:space="preserve">
          <source>For example, for a GitHub-like website this would mean that if a logged-in user follows a link to a private GitHub project posted on a corporate discussion forum or email, GitHub will not receive the session cookie and the user won&amp;rsquo;t be able to access the project. A bank website, however, most likely doesn&amp;rsquo;t want to allow any transactional pages to be linked from external sites so the &lt;code&gt;'Strict'&lt;/code&gt; flag would be appropriate.</source>
          <target state="translated">예를 들어, GitHub와 유사한 웹 사이트의 경우 로그인 한 사용자가 회사 토론 포럼 또는 이메일에 게시 된 비공개 GitHub 프로젝트에 대한 링크를 따르는 경우 GitHub가 세션 쿠키를 수신하지 않으며 사용자는 프로젝트에 액세스 할 수 있습니다. 그러나 은행 웹 사이트는 거래 페이지가 외부 사이트에서 연결되는 것을 원하지 않기 때문에 &lt;code&gt;'Strict'&lt;/code&gt; 플래그가 적합합니다.</target>
        </trans-unit>
        <trans-unit id="8b8d15a169d7dd783fadfe82b49729567dc09a23" translate="yes" xml:space="preserve">
          <source>For example, for this setting:</source>
          <target state="translated">예를 들어이 설정의 경우 :</target>
        </trans-unit>
        <trans-unit id="30bca72fc5eb012eefb4e2af9f75a79bc0ea52c8" translate="yes" xml:space="preserve">
          <source>For example, given &lt;code&gt;MyModel&lt;/code&gt; with an &lt;code&gt;active&lt;/code&gt; field, this snippet ensures that the &lt;code&gt;if obj.active&lt;/code&gt; check at the end uses the correct value if updating &lt;code&gt;active&lt;/code&gt; to &lt;code&gt;True&lt;/code&gt; fails in the transaction:</source>
          <target state="translated">예를 들어, &lt;code&gt;active&lt;/code&gt; 필드 가있는 &lt;code&gt;MyModel&lt;/code&gt; 이 주어 지면 이 스 니펫은 트랜잭션에서 &lt;code&gt;active&lt;/code&gt; 를 &lt;code&gt;True&lt;/code&gt; 로 업데이트하는 데 실패한 경우 끝에 &lt;code&gt;if obj.active&lt;/code&gt; 검사가 올바른 값을 사용 하도록합니다.</target>
        </trans-unit>
        <trans-unit id="8fca2e153a6817b31175cf122ed1bf76d7dbff22" translate="yes" xml:space="preserve">
          <source>For example, given an app &lt;code&gt;common/models.py&lt;/code&gt;:</source>
          <target state="translated">예를 들어, &lt;code&gt;common/models.py&lt;/code&gt; 앱이 주어지면 :</target>
        </trans-unit>
        <trans-unit id="82c068a3348e9335855de4571fd3358289bf5be2" translate="yes" xml:space="preserve">
          <source>For example, given this stored procedure in an Oracle database:</source>
          <target state="translated">예를 들어,이 저장 프로 시저가 Oracle 데이터베이스에있는 경우 :</target>
        </trans-unit>
        <trans-unit id="5e0f6022b0d932e3ce9cc4127fab69a392204cda" translate="yes" xml:space="preserve">
          <source>For example, here is the partial definition for a user model that defines two required fields - a date of birth and height:</source>
          <target state="translated">예를 들어, 다음은 두 개의 필수 필드 (생년월일 및 키)를 정의하는 사용자 모델에 대한 부분 정의입니다.</target>
        </trans-unit>
        <trans-unit id="f080380cc91321db18be0ed5e5b2815307b9d0ca" translate="yes" xml:space="preserve">
          <source>For example, here&amp;rsquo;s a custom template tag, &lt;code&gt;{% upper %}&lt;/code&gt;, that capitalizes everything between itself and &lt;code&gt;{% endupper %}&lt;/code&gt;.</source>
          <target state="translated">예를 들어, 다음은 사용자 정의 템플릿 태그의 &lt;code&gt;{% upper %}&lt;/code&gt; , 그 자체 사이는 대문자로 모든 것을 &lt;code&gt;{% endupper %}&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9b9d735b9c5b8d870234e558bacbf34dd9c85bd5" translate="yes" xml:space="preserve">
          <source>For example, here&amp;rsquo;s a validator that only allows even numbers:</source>
          <target state="translated">예를 들어, 짝수 만 허용하는 유효성 검사기가 있습니다.</target>
        </trans-unit>
        <trans-unit id="cd701cbfd16d3186e327aaf9b1f84400d53c091b" translate="yes" xml:space="preserve">
          <source>For example, here&amp;rsquo;s an attack scenario if you use &lt;a href=&quot;https://docs.python.org/3/library/pickle.html#module-pickle&quot;&gt;&lt;code&gt;pickle&lt;/code&gt;&lt;/a&gt; to serialize session data. If you&amp;rsquo;re using the &lt;a href=&quot;#cookie-session-backend&quot;&gt;signed cookie session backend&lt;/a&gt; and &lt;a href=&quot;../../ref/settings#std:setting-SECRET_KEY&quot;&gt;&lt;code&gt;SECRET_KEY&lt;/code&gt;&lt;/a&gt; is known by an attacker (there isn&amp;rsquo;t an inherent vulnerability in Django that would cause it to leak), the attacker could insert a string into their session which, when unpickled, executes arbitrary code on the server. The technique for doing so is simple and easily available on the internet. Although the cookie session storage signs the cookie-stored data to prevent tampering, a &lt;a href=&quot;../../ref/settings#std:setting-SECRET_KEY&quot;&gt;&lt;code&gt;SECRET_KEY&lt;/code&gt;&lt;/a&gt; leak immediately escalates to a remote code execution vulnerability.</source>
          <target state="translated">예를 들어 &lt;a href=&quot;https://docs.python.org/3/library/pickle.html#module-pickle&quot;&gt; &lt;code&gt;pickle&lt;/code&gt; &lt;/a&gt; 을 사용 하여 세션 데이터를 직렬화 하는 경우 공격 시나리오가 있습니다 . 당신이 사용하는 경우 &lt;a href=&quot;#cookie-session-backend&quot;&gt;서명 쿠키 세션 백엔드를&lt;/a&gt; 하고 &lt;a href=&quot;../../ref/settings#std:setting-SECRET_KEY&quot;&gt; &lt;code&gt;SECRET_KEY&lt;/code&gt; 이&lt;/a&gt; 공격자 (가 누출 원인이 장고 고유의 취약점이없는)로 알려져 있으며, 공격자는 자신의 세션에 캐릭터를 삽입 할 수있는 경우 unpickled 실행합니다 서버의 임의 코드. 그렇게하는 기술은 인터넷에서 간단하고 쉽게 구할 수 있습니다. 쿠키 세션 저장소는 변조를 방지하기 위해 쿠키 저장 데이터에 서명하지만 &lt;a href=&quot;../../ref/settings#std:setting-SECRET_KEY&quot;&gt; &lt;code&gt;SECRET_KEY&lt;/code&gt; &lt;/a&gt; 누수는 즉시 원격 코드 실행 취약점으로 에스컬레이션됩니다.</target>
        </trans-unit>
        <trans-unit id="a9b99d628c1b69952232a27efb8b776dffa490e3" translate="yes" xml:space="preserve">
          <source>For example, here&amp;rsquo;s an excerpt of the URLconf for the &lt;a href=&quot;https://www.djangoproject.com/&quot;&gt;Django website&lt;/a&gt; itself. It includes a number of other URLconfs:</source>
          <target state="translated">예를 들어, 다음은 &lt;a href=&quot;https://www.djangoproject.com/&quot;&gt;Django 웹 사이트&lt;/a&gt; 자체 에 대한 URLconf의 일부입니다 . 여기에는 여러 다른 URLconf가 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="e64d241ee6301d9415a0df7e9b9bd01aead3c6f9" translate="yes" xml:space="preserve">
          <source>For example, here&amp;rsquo;s how sending our &lt;code&gt;pizza_done&lt;/code&gt; signal might look:</source>
          <target state="translated">예를 들어 &lt;code&gt;pizza_done&lt;/code&gt; 신호를 보내는 방법 은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="d11541a9d468d4cd46d6175644e9833e8b842148" translate="yes" xml:space="preserve">
          <source>For example, if &lt;a href=&quot;#std:setting-FORMAT_MODULE_PATH&quot;&gt;&lt;code&gt;FORMAT_MODULE_PATH&lt;/code&gt;&lt;/a&gt; is set to &lt;code&gt;mysite.formats&lt;/code&gt;, and current language is &lt;code&gt;en&lt;/code&gt; (English), Django will expect a directory tree like:</source>
          <target state="translated">예를 들어, &lt;a href=&quot;#std:setting-FORMAT_MODULE_PATH&quot;&gt; &lt;code&gt;FORMAT_MODULE_PATH&lt;/code&gt; 가&lt;/a&gt; 설정되어 &lt;code&gt;mysite.formats&lt;/code&gt; 하고, 현재 언어가 &lt;code&gt;en&lt;/code&gt; (영어), 장고는 디렉토리 트리를 같은 기대합니다 :</target>
        </trans-unit>
        <trans-unit id="6a2c4dfd529a15047ff27aa7ebeab7fae04103b1" translate="yes" xml:space="preserve">
          <source>For example, if &lt;code&gt;path('users/&amp;lt;id&amp;gt;/', ...)&lt;/code&gt; is the matching pattern, &lt;code&gt;route&lt;/code&gt; will contain &lt;code&gt;'users/&amp;lt;id&amp;gt;/'&lt;/code&gt;.</source>
          <target state="translated">예를 들어 &lt;code&gt;path('users/&amp;lt;id&amp;gt;/', ...)&lt;/code&gt; 가 일치하는 패턴 인 경우 &lt;code&gt;route&lt;/code&gt; 에는 &lt;code&gt;'users/&amp;lt;id&amp;gt;/'&lt;/code&gt; 가 포함 됩니다.</target>
        </trans-unit>
        <trans-unit id="19d132541d20fc7bb2eb3a1a61268013dfbd96b2" translate="yes" xml:space="preserve">
          <source>For example, if &lt;code&gt;substring&lt;/code&gt; is user-provided, this function is vulnerable to SQL injection:</source>
          <target state="translated">예를 들어, &lt;code&gt;substring&lt;/code&gt; 이 사용자 제공 인 경우이 함수는 SQL 삽입에 취약합니다.</target>
        </trans-unit>
        <trans-unit id="7160212d78e297bff74fb80841aa3967df415bb3" translate="yes" xml:space="preserve">
          <source>For example, if a &lt;code&gt;Car&lt;/code&gt; model has a &lt;code&gt;Manufacturer&lt;/code&gt; &amp;ndash; that is, a &lt;code&gt;Manufacturer&lt;/code&gt; makes multiple cars but each &lt;code&gt;Car&lt;/code&gt; only has one &lt;code&gt;Manufacturer&lt;/code&gt; &amp;ndash; use the following definitions:</source>
          <target state="translated">예를 들어, &lt;code&gt;Car&lt;/code&gt; 모델에 &lt;code&gt;Manufacturer&lt;/code&gt; 가있는 경우 ( 즉, &lt;code&gt;Manufacturer&lt;/code&gt; 는 여러 대의 자동차를 만들지 만 각 &lt;code&gt;Car&lt;/code&gt; 에는 하나의 &lt;code&gt;Manufacturer&lt;/code&gt; 만 있음) 다음 정의를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="497cc39ebcbf9a72f2dc078c2f7c50e504273f18" translate="yes" xml:space="preserve">
          <source>For example, if a &lt;code&gt;Pizza&lt;/code&gt; can have multiple &lt;code&gt;Topping&lt;/code&gt; objects, modeled like this:</source>
          <target state="translated">예를 들어 &lt;code&gt;Pizza&lt;/code&gt; 여러 &lt;code&gt;Topping&lt;/code&gt; 오브젝트 가있을 수있는 경우 다음 과 같이 모델링됩니다.</target>
        </trans-unit>
        <trans-unit id="88a926ad96f67f15047715985b0884ddf137184c" translate="yes" xml:space="preserve">
          <source>For example, if a &lt;code&gt;Pizza&lt;/code&gt; has multiple &lt;code&gt;Topping&lt;/code&gt; objects &amp;ndash; that is, a &lt;code&gt;Topping&lt;/code&gt; can be on multiple pizzas and each &lt;code&gt;Pizza&lt;/code&gt; has multiple toppings &amp;ndash; here&amp;rsquo;s how you&amp;rsquo;d represent that:</source>
          <target state="translated">예를 들어 &lt;code&gt;Pizza&lt;/code&gt; 에 여러 개의 &lt;code&gt;Topping&lt;/code&gt; 개체 가 있는 경우 ( 즉, &lt;code&gt;Topping&lt;/code&gt; 은 여러 피자에있을 수 있고 각 &lt;code&gt;Pizza&lt;/code&gt; 에는 여러 개의 토핑이있는 경우) 다음과 같이 표현합니다.</target>
        </trans-unit>
        <trans-unit id="959fca095f33dfcfecd28d18457fa30c5abdbc45" translate="yes" xml:space="preserve">
          <source>For example, if a template &lt;code&gt;foo.html&lt;/code&gt; has &lt;code&gt;{% load humanize %}&lt;/code&gt;, a child template (e.g., one that has &lt;code&gt;{% extends &quot;foo.html&quot; %}&lt;/code&gt;) will &lt;em&gt;not&lt;/em&gt; have access to the humanize template tags and filters. The child template is responsible for its own &lt;code&gt;{% load humanize %}&lt;/code&gt;.</source>
          <target state="translated">예를 들어, 템플릿 &lt;code&gt;foo.html&lt;/code&gt; 에 &lt;code&gt;{% load humanize %}&lt;/code&gt; 가 있으면 하위 템플릿 (예 : &lt;code&gt;{% extends &quot;foo.html&quot; %}&lt;/code&gt; 가있는 템플릿)은 humanize 템플릿 태그 및 필터에 액세스 할 수 &lt;em&gt;없습니다&lt;/em&gt; . 자식 템플릿은 자체 &lt;code&gt;{% load humanize %}&lt;/code&gt; 를 담당 합니다.</target>
        </trans-unit>
        <trans-unit id="cd0e16779d42e07a7aabddc148bbb9f4e659913c" translate="yes" xml:space="preserve">
          <source>For example, if a user requested the URL &amp;ldquo;/articles/2005/05/39323/&amp;rdquo;, Django would call the function &lt;code&gt;news.views.article_detail(request,
year=2005, month=5, pk=39323)&lt;/code&gt;.</source>
          <target state="translated">예를 들어, 사용자가 &quot;/ articles / 2005 / 05 / 39323 /&quot;URL을 요청하면 Django는 &lt;code&gt;news.views.article_detail(request, year=2005, month=5, pk=39323)&lt;/code&gt; 함수를 호출합니다 .</target>
        </trans-unit>
        <trans-unit id="3ad997f20e49acf7a66e8c036a9a971fcba2d02b" translate="yes" xml:space="preserve">
          <source>For example, if an article is only allowed on a single site, you&amp;rsquo;d use a model like this:</source>
          <target state="translated">예를 들어 기사가 단일 사이트에서만 허용되는 경우 다음과 같은 모델을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="73ec1fd7ebab8cecdff688bce69fda29e88b07f3" translate="yes" xml:space="preserve">
          <source>For example, if the &lt;code&gt;Article&lt;/code&gt; model looks like this:</source>
          <target state="translated">예를 들어 &lt;code&gt;Article&lt;/code&gt; 모델이 다음과 같은 경우</target>
        </trans-unit>
        <trans-unit id="7644c6b385544646926cd0a3a90e3256cdd6c0dd" translate="yes" xml:space="preserve">
          <source>For example, if the &lt;code&gt;WSGIScriptAlias&lt;/code&gt; for your application is set to &lt;code&gt;&quot;/minfo&quot;&lt;/code&gt;, then &lt;code&gt;path&lt;/code&gt; might be &lt;code&gt;&quot;/minfo/music/bands/the_beatles/&quot;&lt;/code&gt; and &lt;code&gt;path_info&lt;/code&gt; would be &lt;code&gt;&quot;/music/bands/the_beatles/&quot;&lt;/code&gt;.</source>
          <target state="translated">예를 들어, 애플리케이션 의 &lt;code&gt;WSGIScriptAlias&lt;/code&gt; 가 &lt;code&gt;&quot;/minfo&quot;&lt;/code&gt; 로 설정된 경우 &lt;code&gt;path&lt;/code&gt; 는 &lt;code&gt;&quot;/minfo/music/bands/the_beatles/&quot;&lt;/code&gt; 이고 &lt;code&gt;path_info&lt;/code&gt; 는 &lt;code&gt;&quot;/music/bands/the_beatles/&quot;&lt;/code&gt; 있습니다.</target>
        </trans-unit>
        <trans-unit id="77e90f3bf3275646db6a9c846ad34e0a66e6d861" translate="yes" xml:space="preserve">
          <source>For example, if the default ordering is by a non-unique &lt;code&gt;name&lt;/code&gt; field, then the changelist is sorted by &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;pk&lt;/code&gt;. This could perform poorly if you have a lot of rows and don&amp;rsquo;t have an index on &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;pk&lt;/code&gt;.</source>
          <target state="translated">예를 들어, 기본 순서가 고유하지 않은 &lt;code&gt;name&lt;/code&gt; 필드를 기준으로하는 경우 변경 목록은 &lt;code&gt;name&lt;/code&gt; 및 &lt;code&gt;pk&lt;/code&gt; 로 정렬됩니다 . 행이 많고 &lt;code&gt;name&lt;/code&gt; 및 &lt;code&gt;pk&lt;/code&gt; 에 대한 색인이없는 경우 성능이 저하 될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f4e149bd799a81643324e12a0b823ee09731d37e" translate="yes" xml:space="preserve">
          <source>For example, if the models for your application live in the module &lt;code&gt;myapp.models&lt;/code&gt; (the package structure that is created for an application by the &lt;a href=&quot;../../ref/django-admin#django-admin-startapp&quot;&gt;&lt;code&gt;manage.py startapp&lt;/code&gt;&lt;/a&gt; script), &lt;a href=&quot;../../ref/settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; should read, in part:</source>
          <target state="translated">예를 들어, 애플리케이션의 모델이 &lt;code&gt;myapp.models&lt;/code&gt; 모듈 ( &lt;a href=&quot;../../ref/django-admin#django-admin-startapp&quot;&gt; &lt;code&gt;manage.py startapp&lt;/code&gt; &lt;/a&gt; 스크립트에 의해 애플리케이션에 대해 작성된 패키지 구조 )에있는 경우 &lt;a href=&quot;../../ref/settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt; 는 다음 부분을 읽어야합니다.</target>
        </trans-unit>
        <trans-unit id="a575ad3908796268e9301813f7ae313228b6b010" translate="yes" xml:space="preserve">
          <source>For example, if we have:</source>
          <target state="translated">예를 들어 다음과 같은 경우</target>
        </trans-unit>
        <trans-unit id="37ed5ab15784ebdc941be2c5c6bcc94f7a13da2b" translate="yes" xml:space="preserve">
          <source>For example, if we reverse the order of the &lt;code&gt;values()&lt;/code&gt; and &lt;code&gt;annotate()&lt;/code&gt; clause from our previous example:</source>
          <target state="translated">예를 들어, 이전 예제에서 &lt;code&gt;values()&lt;/code&gt; 및 &lt;code&gt;annotate()&lt;/code&gt; 절의 순서를 반대로 바꾸는 경우 :</target>
        </trans-unit>
        <trans-unit id="aaa31c7d83e5e9be08f7ea4cf3e1d382a5057f9c" translate="yes" xml:space="preserve">
          <source>For example, if we wanted to add a tool to the change list view for all the models in an app named &lt;code&gt;my_app&lt;/code&gt;, we would copy &lt;code&gt;contrib/admin/templates/admin/change_list.html&lt;/code&gt; to the &lt;code&gt;templates/admin/my_app/&lt;/code&gt; directory of our project, and make any necessary changes.</source>
          <target state="translated">예를 들어, &lt;code&gt;my_app&lt;/code&gt; 라는 앱의 모든 모델에 대한 변경 목록보기에 도구를 추가하려면 &lt;code&gt;contrib/admin/templates/admin/change_list.html&lt;/code&gt; 을 우리의 &lt;code&gt;templates/admin/my_app/&lt;/code&gt; 디렉토리에 복사 합니다. 프로젝트를 수정하고 필요한 사항을 변경하십시오.</target>
        </trans-unit>
        <trans-unit id="5206cd2a79a8ce28494c927b4f754f4f6ab560c0" translate="yes" xml:space="preserve">
          <source>For example, if you had &lt;code&gt;organic.py&lt;/code&gt; and &lt;code&gt;synthetic.py&lt;/code&gt; in the &lt;code&gt;models&lt;/code&gt; directory:</source>
          <target state="translated">예를 들어, &lt;code&gt;models&lt;/code&gt; 디렉토리 에 &lt;code&gt;organic.py&lt;/code&gt; 및 &lt;code&gt;synthetic.py&lt;/code&gt; 가 있는 경우 :</target>
        </trans-unit>
        <trans-unit id="ec78701bb6d07ca8380a8fb2def8939d712743f8" translate="yes" xml:space="preserve">
          <source>For example, if you have a Blog object &lt;code&gt;b&lt;/code&gt; with &lt;code&gt;id=5&lt;/code&gt;, the following three queries would be identical:</source>
          <target state="translated">당신이 블로그 객체가있는 경우 예를 들어, &lt;code&gt;b&lt;/code&gt; 와 &lt;code&gt;id=5&lt;/code&gt; , 다음과 같은 세 가지 쿼리는 동일 할 것이다 :</target>
        </trans-unit>
        <trans-unit id="7c53aafc3c0c25befc980a17c0988fd3884989b3" translate="yes" xml:space="preserve">
          <source>For example, if you have a blog entry with an author, the following definition would enable searching blog entries by the email address of the author:</source>
          <target state="translated">예를 들어 작성자가있는 블로그 항목이있는 경우 다음 정의는 작성자의 이메일 주소로 블로그 항목을 검색 할 수 있도록합니다.</target>
        </trans-unit>
        <trans-unit id="95a33ccea96a9b29633c8c3693475d86bc4201f8" translate="yes" xml:space="preserve">
          <source>For example, if you have a field &lt;code&gt;title&lt;/code&gt; that has &lt;code&gt;unique_for_date=&quot;pub_date&quot;&lt;/code&gt;, then Django wouldn&amp;rsquo;t allow the entry of two records with the same &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;pub_date&lt;/code&gt;.</source>
          <target state="translated">예를 들어, &lt;code&gt;unique_for_date=&quot;pub_date&quot;&lt;/code&gt; 인 필드 &lt;code&gt;title&lt;/code&gt; 이 있으면 Django는 &lt;code&gt;title&lt;/code&gt; 과 &lt;code&gt;pub_date&lt;/code&gt; 가 동일한 두 개의 레코드를 입력 할 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="a451065bc00e41b11f720e0f717367308b091faf" translate="yes" xml:space="preserve">
          <source>For example, if you have a function called &lt;code&gt;get_notification_email()&lt;/code&gt; that returns a list of &lt;a href=&quot;#django.core.mail.EmailMessage&quot;&gt;&lt;code&gt;EmailMessage&lt;/code&gt;&lt;/a&gt; objects representing some periodic email you wish to send out, you could send these emails using a single call to send_messages:</source>
          <target state="translated">당신이라는 함수가있는 경우 예를 들어, &lt;code&gt;get_notification_email()&lt;/code&gt; 반환의 목록 &lt;a href=&quot;#django.core.mail.EmailMessage&quot;&gt; &lt;code&gt;EmailMessage&lt;/code&gt; 는&lt;/a&gt; 당신이 밖으로 보내려는 약간의주기적인 이메일을 나타내는 개체를, 당신은 send_messages 단일 호출을 사용하여 이러한 이메일을 보낼 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="17eafc2b5422a055d91b931d67499186a4200fbf" translate="yes" xml:space="preserve">
          <source>For example, if you have an app &lt;code&gt;bookstore&lt;/code&gt; (as created by &lt;code&gt;manage.py startapp bookstore&lt;/code&gt;), a model defined as &lt;code&gt;class Book&lt;/code&gt; will have a database table named &lt;code&gt;bookstore_book&lt;/code&gt;.</source>
          <target state="translated">예를 들어, &lt;code&gt;manage.py startapp bookstore&lt;/code&gt; 에 의해 작성된 앱 &lt;code&gt;bookstore&lt;/code&gt; 이있는 경우 &lt;code&gt;class Book&lt;/code&gt; 정의 된 모델 에는 &lt;code&gt;bookstore_book&lt;/code&gt; 이라는 데이터베이스 테이블이 있습니다 .</target>
        </trans-unit>
        <trans-unit id="63fbca3270dc92aa2768b890a6cb1d33f7c76b6d" translate="yes" xml:space="preserve">
          <source>For example, if you only want users whose names begin with &amp;lsquo;J&amp;rsquo; to be able to delete objects in bulk:</source>
          <target state="translated">예를 들어 이름이 'J'로 시작하는 사용자 만 개체를 ​​대량으로 삭제할 수있게하려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="dffc16ac6f5a1235e2ff5c1c9590e976974355a8" translate="yes" xml:space="preserve">
          <source>For example, if you operate a Web email system, then the contents of the &amp;ldquo;inbox&amp;rdquo; page depend on which user is logged in. If an ISP blindly cached your site, then the first user who logged in through that ISP would have their user-specific inbox page cached for subsequent visitors to the site. That&amp;rsquo;s not cool.</source>
          <target state="translated">예를 들어, 웹 전자 메일 시스템을 운영하는 경우 &quot;받은 편지함&quot;페이지의 내용은 로그인 한 사용자에 따라 다릅니다. ISP가 사이트를 맹목적으로 캐시 한 경우 해당 ISP를 통해 처음 로그인 한 사용자는 해당 사용자를 갖습니다. 사이트의 후속 방문자를 위해 캐시 된 특정받은 편지함 페이지 멋지지 않아요.</target>
        </trans-unit>
        <trans-unit id="0318688c9cbfbc9a1af11ad338883da37e732245" translate="yes" xml:space="preserve">
          <source>For example, if you want the &lt;code&gt;CharField&lt;/code&gt; for the &lt;code&gt;name&lt;/code&gt; attribute of &lt;code&gt;Author&lt;/code&gt; to be represented by a &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt; instead of its default &lt;code&gt;&amp;lt;input type=&quot;text&quot;&amp;gt;&lt;/code&gt;, you can override the field&amp;rsquo;s widget:</source>
          <target state="translated">예를 들어 &lt;code&gt;Author&lt;/code&gt; 의 &lt;code&gt;name&lt;/code&gt; 속성에 대한 &lt;code&gt;CharField&lt;/code&gt; 가 기본 &lt;code&gt;&amp;lt;input type=&quot;text&quot;&amp;gt;&lt;/code&gt; 대신 &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt; 로 표시되도록 하려면 필드의 위젯을 대체 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d3c8260ce0cd8a75ee9020cf48382605726d0d9d" translate="yes" xml:space="preserve">
          <source>For example, if you want to allow generic relations to models with either &lt;a href=&quot;../models/fields#django.db.models.IntegerField&quot;&gt;&lt;code&gt;IntegerField&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../models/fields#django.db.models.CharField&quot;&gt;&lt;code&gt;CharField&lt;/code&gt;&lt;/a&gt; primary key fields, you can use &lt;a href=&quot;../models/fields#django.db.models.CharField&quot;&gt;&lt;code&gt;CharField&lt;/code&gt;&lt;/a&gt; for the &amp;ldquo;object_id&amp;rdquo; field on your model since integers can be coerced to strings by &lt;a href=&quot;../models/fields#django.db.models.Field.get_db_prep_value&quot;&gt;&lt;code&gt;get_db_prep_value()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">예를 들어, &lt;a href=&quot;../models/fields#django.db.models.IntegerField&quot;&gt; &lt;code&gt;IntegerField&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;../models/fields#django.db.models.CharField&quot;&gt; &lt;code&gt;CharField&lt;/code&gt; &lt;/a&gt; 기본 키 필드 가있는 모델에 일반 관계를 허용 하려면 &lt;a href=&quot;../models/fields#django.db.models.Field.get_db_prep_value&quot;&gt; &lt;code&gt;get_db_prep_value()&lt;/code&gt; &lt;/a&gt; 로 정수를 문자열로 강제 변환 할 수 있으므로 모델의 &quot;object_id&quot;필드에 &lt;a href=&quot;../models/fields#django.db.models.CharField&quot;&gt; &lt;code&gt;CharField&lt;/code&gt; &lt;/a&gt; 를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c0412d92da41464198926ae62a16c47b911add00" translate="yes" xml:space="preserve">
          <source>For example, if you want to catch the &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; HTML elements created by the &lt;a href=&quot;#std:templatefilter-linebreaks&quot;&gt;&lt;code&gt;linebreaks&lt;/code&gt;&lt;/a&gt; filter:</source>
          <target state="translated">예를 들어, 줄 &lt;a href=&quot;#std:templatefilter-linebreaks&quot;&gt; &lt;code&gt;linebreaks&lt;/code&gt; &lt;/a&gt; 필터로 작성된 &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; HTML 요소 를 찾으려면 다음을 수행하십시오 .</target>
        </trans-unit>
        <trans-unit id="287184b56a2079bc77936a467ffcb12bb2b8886c" translate="yes" xml:space="preserve">
          <source>For example, if you want to override &lt;code&gt;clean()&lt;/code&gt;:</source>
          <target state="translated">예를 들어 &lt;code&gt;clean()&lt;/code&gt; 을 재정의하려는 경우 :</target>
        </trans-unit>
        <trans-unit id="3efb9b9ef08765dd8e6f0b121687a407972caf70" translate="yes" xml:space="preserve">
          <source>For example, if you want to return a custom &lt;code&gt;QuerySet&lt;/code&gt; class from the &lt;code&gt;get_queryset&lt;/code&gt; method, you could do this:</source>
          <target state="translated">예를 들어 &lt;code&gt;get_queryset&lt;/code&gt; 메소드 에서 사용자 정의 &lt;code&gt;QuerySet&lt;/code&gt; 클래스 를 리턴 하려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="063ebc3924841e6968434234faec07eb5ca9e33b" translate="yes" xml:space="preserve">
          <source>For example, if you wanted to calculate the average number of authors per book you first annotate the set of books with the author count, then aggregate that author count, referencing the annotation field:</source>
          <target state="translated">예를 들어, 책당 평균 저자 수를 계산하려면 먼저 저자 수로 책 세트에 주석을 달고 주석 필드를 참조하여 해당 저자 수를 집계하십시오.</target>
        </trans-unit>
        <trans-unit id="bfc09bcbb025c7c07130736bf333d3d02ac80e5f" translate="yes" xml:space="preserve">
          <source>For example, if you wanted to use &lt;code&gt;MySlugFormField&lt;/code&gt; for the &lt;code&gt;slug&lt;/code&gt; field, you could do the following:</source>
          <target state="translated">당신이 사용하고 싶었 예를 들어, &lt;code&gt;MySlugFormField&lt;/code&gt; 을 에 대한 &lt;code&gt;slug&lt;/code&gt; 필드, 다음을 수행 할 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="c7aa460ec5e420ac634048bfa3fc527ceb63585d" translate="yes" xml:space="preserve">
          <source>For example, if you wanted to validate that the contents of a &lt;code&gt;CharField&lt;/code&gt; called &lt;code&gt;serialnumber&lt;/code&gt; was unique, &lt;code&gt;clean_serialnumber()&lt;/code&gt; would be the right place to do this. You don&amp;rsquo;t need a specific field (it&amp;rsquo;s a &lt;code&gt;CharField&lt;/code&gt;), but you want a formfield-specific piece of validation and, possibly, cleaning/normalizing the data.</source>
          <target state="translated">예를 들어 &lt;code&gt;serialnumber&lt;/code&gt; 라는 &lt;code&gt;CharField&lt;/code&gt; 의 내용 이 고유 한지 확인하려는 경우 &lt;code&gt;clean_serialnumber()&lt;/code&gt; 가 올바른 위치입니다. 특정 필드 ( &lt;code&gt;CharField&lt;/code&gt; ) 는 필요하지 않지만 폼 필드 관련 유효성 검사 및 데이터 정리 / 정규화가 필요합니다.</target>
        </trans-unit>
        <trans-unit id="812e0ac86e0af9354376f7614bdda8d6eaf87eef" translate="yes" xml:space="preserve">
          <source>For example, if you wanted to write a custom filter called &lt;code&gt;urlize_and_linebreaks&lt;/code&gt; that combined the &lt;a href=&quot;../ref/templates/builtins#std:templatefilter-urlize&quot;&gt;&lt;code&gt;urlize&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../ref/templates/builtins#std:templatefilter-linebreaksbr&quot;&gt;&lt;code&gt;linebreaksbr&lt;/code&gt;&lt;/a&gt; filters, the filter would look like:</source>
          <target state="translated">예를 들어 &lt;a href=&quot;../ref/templates/builtins#std:templatefilter-urlize&quot;&gt; &lt;code&gt;urlize&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../ref/templates/builtins#std:templatefilter-linebreaksbr&quot;&gt; &lt;code&gt;linebreaksbr&lt;/code&gt; &lt;/a&gt; 필터 를 결합한 &lt;code&gt;urlize_and_linebreaks&lt;/code&gt; 라는 사용자 정의 필터를 작성하려는 경우 필터는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="62aa2739230ebf126047b21a8ee5eb70e0f6ad83" translate="yes" xml:space="preserve">
          <source>For example, if you were building a database of &amp;ldquo;places&amp;rdquo;, you would build pretty standard stuff such as address, phone number, etc. in the database. Then, if you wanted to build a database of restaurants on top of the places, instead of repeating yourself and replicating those fields in the &lt;code&gt;Restaurant&lt;/code&gt; model, you could make &lt;code&gt;Restaurant&lt;/code&gt; have a &lt;a href=&quot;../../ref/models/fields#django.db.models.OneToOneField&quot;&gt;&lt;code&gt;OneToOneField&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;Place&lt;/code&gt; (because a restaurant &amp;ldquo;is a&amp;rdquo; place; in fact, to handle this you&amp;rsquo;d typically use &lt;a href=&quot;#model-inheritance&quot;&gt;inheritance&lt;/a&gt;, which involves an implicit one-to-one relation).</source>
          <target state="translated">예를 들어,&amp;ldquo;장소&amp;rdquo;데이터베이스를 구축하는 경우 데이터베이스에 주소, 전화 번호 등과 같은 매우 표준적인 자료를 구축 할 수 있습니다. 대신 자신을 반복하고있는 해당 필드 복제하는 장소의 상단에 레스토랑의 데이터베이스를 구축하기를 원한다면 다음, &lt;code&gt;Restaurant&lt;/code&gt; 모델을, 당신이 만들 수있는 &lt;code&gt;Restaurant&lt;/code&gt; 이 &lt;a href=&quot;../../ref/models/fields#django.db.models.OneToOneField&quot;&gt; &lt;code&gt;OneToOneField&lt;/code&gt; &lt;/a&gt; 에 &lt;code&gt;Place&lt;/code&gt; (레스토랑이 장소 &quot;A는&quot;때문에;에서 사실, 이것을 처리하기 위해 일반적으로 암시 적 일대일 관계를 포함하는 &lt;a href=&quot;#model-inheritance&quot;&gt;상속을&lt;/a&gt; 사용합니다 ).</target>
        </trans-unit>
        <trans-unit id="ac564798e14976b158868774b55c30a2ce8047f9" translate="yes" xml:space="preserve">
          <source>For example, if you were manipulating a list of blogs, you may want to determine how many entries have been made in each blog:</source>
          <target state="translated">예를 들어 블로그 목록을 조작하는 경우 각 블로그에서 작성된 항목 수를 판별 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="48b33e9a548fb4951086a93d4cccbb51cee21337" translate="yes" xml:space="preserve">
          <source>For example, if you&amp;rsquo;re migrating a user from the &lt;code&gt;legacy_users&lt;/code&gt; database to the &lt;code&gt;new_users&lt;/code&gt; database, you might use these commands:</source>
          <target state="translated">예를 들어 &lt;code&gt;legacy_users&lt;/code&gt; 데이터베이스에서 &lt;code&gt;new_users&lt;/code&gt; 데이터베이스 로 사용자를 마이그레이션하는 경우 다음 명령을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="25f618583a6cd0fc97af3000d8f1c63e4d2ec20e" translate="yes" xml:space="preserve">
          <source>For example, if you&amp;rsquo;ve written an S3 storage backend in &lt;code&gt;myproject.storage.S3Storage&lt;/code&gt; you could use it with:</source>
          <target state="translated">예를 들어 &lt;code&gt;myproject.storage.S3Storage&lt;/code&gt; 에 S3 스토리지 백엔드를 작성한 경우 다음 과 함께 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c7dec5e7f20c3fb00b261664622da3f6bfce814b" translate="yes" xml:space="preserve">
          <source>For example, if your &lt;a href=&quot;../../ref/settings#std:setting-MEDIA_URL&quot;&gt;&lt;code&gt;MEDIA_URL&lt;/code&gt;&lt;/a&gt; is defined as &lt;code&gt;/media/&lt;/code&gt;, you can do this by adding the following snippet to your urls.py:</source>
          <target state="translated">예를 들어 &lt;a href=&quot;../../ref/settings#std:setting-MEDIA_URL&quot;&gt; &lt;code&gt;MEDIA_URL&lt;/code&gt; &lt;/a&gt; 이 &lt;code&gt;/media/&lt;/code&gt; 로 정의 된 경우 urls.py에 다음 스 니펫을 추가하여이를 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="573973612596761249845c2b92e7229999296031" translate="yes" xml:space="preserve">
          <source>For example, if your &lt;a href=&quot;../../ref/settings#std:setting-STATIC_URL&quot;&gt;&lt;code&gt;STATIC_URL&lt;/code&gt;&lt;/a&gt; is defined as &lt;code&gt;/static/&lt;/code&gt;, you can do this by adding the following snippet to your urls.py:</source>
          <target state="translated">예를 들어 &lt;a href=&quot;../../ref/settings#std:setting-STATIC_URL&quot;&gt; &lt;code&gt;STATIC_URL&lt;/code&gt; &lt;/a&gt; 이 &lt;code&gt;/static/&lt;/code&gt; 으로 정의 된 경우 urls.py에 다음 스 니펫을 추가하여이를 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="382da25e234ff543ced0d60c81998fd1b64dec8a" translate="yes" xml:space="preserve">
          <source>For example, if your &lt;a href=&quot;settings#std:setting-DATABASES&quot;&gt;&lt;code&gt;DATABASES&lt;/code&gt;&lt;/a&gt; setting has a &amp;lsquo;master&amp;rsquo; database defined, name the fixture &lt;code&gt;mydata.master.json&lt;/code&gt; or &lt;code&gt;mydata.master.json.gz&lt;/code&gt; and the fixture will only be loaded when you specify you want to load data into the &lt;code&gt;master&lt;/code&gt; database.</source>
          <target state="translated">예를 들어, &lt;a href=&quot;settings#std:setting-DATABASES&quot;&gt; &lt;code&gt;DATABASES&lt;/code&gt; &lt;/a&gt; 설정에 '마스터'데이터베이스가 정의 된 경우, 조명기의 이름을 &lt;code&gt;mydata.master.json&lt;/code&gt; 또는 &lt;code&gt;mydata.master.json.gz&lt;/code&gt; 로 지정하고 &lt;code&gt;master&lt;/code&gt; 데이터베이스에 데이터를로드하도록 지정한 경우에만 조명 기가 로드됩니다 .</target>
        </trans-unit>
        <trans-unit id="b38b053424f30ca9abf3de537773f7fbaf83bc53" translate="yes" xml:space="preserve">
          <source>For example, if your Django app contained a translation string for the text &lt;code&gt;&quot;Welcome to my site.&quot;&lt;/code&gt;, like so:</source>
          <target state="translated">예를 들어 Django 앱에 &lt;code&gt;&quot;Welcome to my site.&quot;&lt;/code&gt; 라는 텍스트의 번역 문자열이 포함 된 경우 , 이렇게 :</target>
        </trans-unit>
        <trans-unit id="ba64113bb54dcbe956d54f2cdb1242079b313974" translate="yes" xml:space="preserve">
          <source>For example, if your custom tags/filters are in a file called &lt;code&gt;poll_extras.py&lt;/code&gt;, your app layout might look like this:</source>
          <target state="translated">예를 들어, 사용자 정의 태그 / 필터가 &lt;code&gt;poll_extras.py&lt;/code&gt; 파일 에 있으면 앱 레이아웃은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="3ce9954afa977e8d25528c0d4c5d3e44545946e0" translate="yes" xml:space="preserve">
          <source>For example, if your test requires a particular optional library in order to succeed, you could decorate the test case with &lt;a href=&quot;https://docs.python.org/3/library/unittest.html#unittest.skipIf&quot;&gt;&lt;code&gt;@skipIf&lt;/code&gt;&lt;/a&gt;. Then, the test runner will report that the test wasn&amp;rsquo;t executed and why, instead of failing the test or omitting the test altogether.</source>
          <target state="translated">예를 들어 테스트에 성공하기 위해 특정 선택적 라이브러리가 필요한 경우 &lt;a href=&quot;https://docs.python.org/3/library/unittest.html#unittest.skipIf&quot;&gt; &lt;code&gt;@skipIf&lt;/code&gt; 로&lt;/a&gt; 테스트 케이스를 장식 할 수 있습니다 . 그런 다음 테스트 실행자는 테스트가 실패했거나 테스트를 모두 생략하지 않고 테스트가 실행되지 않았다고보고합니다.</target>
        </trans-unit>
        <trans-unit id="d89c6f1f9c3485c512a5c12dbc88ece425a8d0a9" translate="yes" xml:space="preserve">
          <source>For example, in a request to &lt;code&gt;https://www.example.com/myapp/&lt;/code&gt;, the URLconf will look for &lt;code&gt;myapp/&lt;/code&gt;.</source>
          <target state="translated">예를 들어 &lt;code&gt;https://www.example.com/myapp/&lt;/code&gt; 에 대한 요청 에서 URLconf는 &lt;code&gt;myapp/&lt;/code&gt; 찾습니다 .</target>
        </trans-unit>
        <trans-unit id="5c01bd511b40c972c539e07cb7adec6680d41f2c" translate="yes" xml:space="preserve">
          <source>For example, in our &lt;code&gt;HandField&lt;/code&gt; class we&amp;rsquo;re always forcibly setting max_length in &lt;code&gt;__init__()&lt;/code&gt;. The &lt;code&gt;deconstruct()&lt;/code&gt; method on the base &lt;code&gt;Field&lt;/code&gt; class will see this and try to return it in the keyword arguments; thus, we can drop it from the keyword arguments for readability:</source>
          <target state="translated">예를 들어 &lt;code&gt;HandField&lt;/code&gt; 클래스에서는 항상 &lt;code&gt;__init__()&lt;/code&gt; 에서 max_length를 강제 설정합니다 . 기본 &lt;code&gt;Field&lt;/code&gt; 클래스 의 &lt;code&gt;deconstruct()&lt;/code&gt; 메소드 는 이것을보고 키워드 인수로 반환하려고 시도합니다. 따라서 가독성을 위해 키워드 인수에서이를 삭제할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3982a7f971cb56decef776cf27f6c9f258416465" translate="yes" xml:space="preserve">
          <source>For example, in the default case, you might see:</source>
          <target state="translated">예를 들어, 기본 경우 다음이 표시 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="be8dcf1e5a2d50703a2c513aadf6082398124606" translate="yes" xml:space="preserve">
          <source>For example, in the filter &lt;code&gt;{{ var|foo:&quot;bar&quot; }}&lt;/code&gt;, the filter &lt;code&gt;foo&lt;/code&gt; would be passed the variable &lt;code&gt;var&lt;/code&gt; and the argument &lt;code&gt;&quot;bar&quot;&lt;/code&gt;.</source>
          <target state="translated">예를 들어, &lt;code&gt;{{ var|foo:&quot;bar&quot; }}&lt;/code&gt; 필터에서 &lt;code&gt;foo&lt;/code&gt; 필터 에는 변수 &lt;code&gt;var&lt;/code&gt; 및 인수 &lt;code&gt;&quot;bar&quot;&lt;/code&gt; 가 전달 됩니다.</target>
        </trans-unit>
        <trans-unit id="6bfaf4d814db0b662c240dee53377b51532d7b2c" translate="yes" xml:space="preserve">
          <source>For example, in the generic class-based views there is a mixin called &lt;a href=&quot;../../ref/class-based-views/mixins-simple#django.views.generic.base.TemplateResponseMixin&quot;&gt;&lt;code&gt;TemplateResponseMixin&lt;/code&gt;&lt;/a&gt; whose primary purpose is to define the method &lt;a href=&quot;../../ref/class-based-views/mixins-simple#django.views.generic.base.TemplateResponseMixin.render_to_response&quot;&gt;&lt;code&gt;render_to_response()&lt;/code&gt;&lt;/a&gt;. When combined with the behavior of the &lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.View&quot;&gt;&lt;code&gt;View&lt;/code&gt;&lt;/a&gt; base class, the result is a &lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.TemplateView&quot;&gt;&lt;code&gt;TemplateView&lt;/code&gt;&lt;/a&gt; class that will dispatch requests to the appropriate matching methods (a behavior defined in the &lt;code&gt;View&lt;/code&gt; base class), and that has a &lt;a href=&quot;../../ref/class-based-views/mixins-simple#django.views.generic.base.TemplateResponseMixin.render_to_response&quot;&gt;&lt;code&gt;render_to_response()&lt;/code&gt;&lt;/a&gt; method that uses a &lt;a href=&quot;../../ref/class-based-views/mixins-simple#django.views.generic.base.TemplateResponseMixin.template_name&quot;&gt;&lt;code&gt;template_name&lt;/code&gt;&lt;/a&gt; attribute to return a &lt;a href=&quot;../../ref/template-response#django.template.response.TemplateResponse&quot;&gt;&lt;code&gt;TemplateResponse&lt;/code&gt;&lt;/a&gt; object (a behavior defined in the &lt;code&gt;TemplateResponseMixin&lt;/code&gt;).</source>
          <target state="translated">예를 들어, 일반 클래스 기반 뷰에는 &lt;a href=&quot;../../ref/class-based-views/mixins-simple#django.views.generic.base.TemplateResponseMixin.render_to_response&quot;&gt; &lt;code&gt;render_to_response()&lt;/code&gt; &lt;/a&gt; 메소드를 정의하는 것이 주 목적인 &lt;a href=&quot;../../ref/class-based-views/mixins-simple#django.views.generic.base.TemplateResponseMixin&quot;&gt; &lt;code&gt;TemplateResponseMixin&lt;/code&gt; &lt;/a&gt; 이라는 믹스 인이 있습니다. &lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.View&quot;&gt; &lt;code&gt;View&lt;/code&gt; &lt;/a&gt; 기본 클래스 의 동작과 결합 하면 결과는 적절한 일치하는 메소드 ( &lt;code&gt;View&lt;/code&gt; 기본 클래스에 정의 된 동작)로 요청을 발송 하고 &lt;a href=&quot;../../ref/class-based-views/mixins-simple#django.views.generic.base.TemplateResponseMixin.template_name&quot;&gt; &lt;code&gt;template_name&lt;/code&gt; &lt;/a&gt; 속성 을 사용하는 &lt;a href=&quot;../../ref/class-based-views/mixins-simple#django.views.generic.base.TemplateResponseMixin.render_to_response&quot;&gt; &lt;code&gt;render_to_response()&lt;/code&gt; &lt;/a&gt; 메소드 가있는 &lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.TemplateView&quot;&gt; &lt;code&gt;TemplateView&lt;/code&gt; &lt;/a&gt; 클래스입니다. 돌아갑니다 &lt;a href=&quot;../../ref/template-response#django.template.response.TemplateResponse&quot;&gt; &lt;code&gt;TemplateResponse&lt;/code&gt; 의&lt;/a&gt; 객체 (정의 행동 &lt;code&gt;TemplateResponseMixin&lt;/code&gt; 을 ).</target>
        </trans-unit>
        <trans-unit id="bee7838323c7513cb8f79ec775b4a84e3faed67e" translate="yes" xml:space="preserve">
          <source>For example, it could be used for a tagging system like so:</source>
          <target state="translated">예를 들어, 태그 시스템에 다음과 같이 사용될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6f017e4860d5bdcebab0f0fb119e76168400ff70" translate="yes" xml:space="preserve">
          <source>For example, let&amp;rsquo;s add a natural key to the &lt;code&gt;Book&lt;/code&gt; model from the example above:</source>
          <target state="translated">예를 들어, 위의 예에서 &lt;code&gt;Book&lt;/code&gt; 모델에 자연스러운 키를 추가해 보겠습니다 .</target>
        </trans-unit>
        <trans-unit id="981e0acc47eeefb4090a6114b26b34b9a8900b87" translate="yes" xml:space="preserve">
          <source>For example, let&amp;rsquo;s consider the following model:</source>
          <target state="translated">예를 들어, 다음 모델을 고려하십시오.</target>
        </trans-unit>
        <trans-unit id="3f7ab8aab4e41f4721a9deee7d51f3b5b448fb6c" translate="yes" xml:space="preserve">
          <source>For example, let&amp;rsquo;s say we have a &lt;code&gt;SouthTexasCity&lt;/code&gt; model (from the &lt;a href=&quot;https://github.com/django/django/blob/master/tests/gis_tests/distapp/models.py&quot;&gt;GeoDjango distance tests&lt;/a&gt; ) on a &lt;em&gt;projected&lt;/em&gt; coordinate system valid for cities in southern Texas:</source>
          <target state="translated">예를 들어, 텍사스 남부 도시에 유효한 &lt;em&gt;투영&lt;/em&gt; 좌표계 에 대한 &lt;code&gt;SouthTexasCity&lt;/code&gt; 모델 ( &lt;a href=&quot;https://github.com/django/django/blob/master/tests/gis_tests/distapp/models.py&quot;&gt;GeoDjango 거리 테스트&lt;/a&gt; ) 이 있다고 가정 합니다.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="6632db7f2d16495f99973c14b8ca361212c07908" translate="yes" xml:space="preserve">
          <source>For example, let&amp;rsquo;s write a filter that emphasizes the first character of a string:</source>
          <target state="translated">예를 들어 문자열의 첫 문자를 강조하는 필터를 작성해 봅시다.</target>
        </trans-unit>
        <trans-unit id="fd27f1d7a84788999d8f9705306d16767267018a" translate="yes" xml:space="preserve">
          <source>For example, let&amp;rsquo;s write a full implementation of our template tag, &lt;code&gt;{% current_time %}&lt;/code&gt;, that displays the current date/time, formatted according to a parameter given in the tag, in &lt;a href=&quot;https://docs.python.org/3/library/time.html#time.strftime&quot;&gt;&lt;code&gt;strftime()&lt;/code&gt;&lt;/a&gt; syntax. It&amp;rsquo;s a good idea to decide the tag syntax before anything else. In our case, let&amp;rsquo;s say the tag should be used like this:</source>
          <target state="translated">예를 들어, 태그에 주어진 매개 변수에 따라 &lt;a href=&quot;https://docs.python.org/3/library/time.html#time.strftime&quot;&gt; &lt;code&gt;strftime()&lt;/code&gt; &lt;/a&gt; 구문으로 서식이 지정된 현재 날짜 / 시간을 표시하는 템플릿 태그 &lt;code&gt;{% current_time %}&lt;/code&gt; 의 전체 구현을 작성해 봅시다 . 태그 구문을 다른 항목보다 먼저 결정하는 것이 좋습니다. 이 경우 태그를 다음과 같이 사용해야한다고 가정 해 보겠습니다.</target>
        </trans-unit>
        <trans-unit id="faa7baeec61827390806b1f3bb4cccabe076d811" translate="yes" xml:space="preserve">
          <source>For example, notice the behavior when querying across a &lt;a href=&quot;fields#django.db.models.ManyToManyField&quot;&gt;&lt;code&gt;ManyToManyField&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">예를 들어 &lt;a href=&quot;fields#django.db.models.ManyToManyField&quot;&gt; &lt;code&gt;ManyToManyField&lt;/code&gt; 에서&lt;/a&gt; 쿼리 할 때의 동작에 주목하십시오 .</target>
        </trans-unit>
        <trans-unit id="ac6f5569362b9037e98acf2f0c9ebe5969f083c9" translate="yes" xml:space="preserve">
          <source>For example, on Debian-based distributions that package SpatiaLite 4.2+, try to install the &lt;code&gt;libsqlite3-mod-spatialite&lt;/code&gt; package. For older releases install &lt;code&gt;spatialite-bin&lt;/code&gt;.</source>
          <target state="translated">예를 들어, SpatiaLite 4.2+를 패키지화하는 데비안 기반 배포판에서 &lt;code&gt;libsqlite3-mod-spatialite&lt;/code&gt; 패키지 를 설치하십시오 . 이전 릴리스의 경우 &lt;code&gt;spatialite-bin&lt;/code&gt; 설치하십시오 .</target>
        </trans-unit>
        <trans-unit id="cfd8c872d8f2916e92e073391899fa52d0e6b5c4" translate="yes" xml:space="preserve">
          <source>For example, repeatedly getting a certain index in a queryset object will query the database each time:</source>
          <target state="translated">예를 들어 queryset 객체에서 특정 인덱스를 반복적으로 가져 오면 매번 데이터베이스를 쿼리합니다.</target>
        </trans-unit>
        <trans-unit id="e8ada1817d3c3e6aea32546f2fc1f0f5b452cf40" translate="yes" xml:space="preserve">
          <source>For example, say you have a custom manager method that touches the database &amp;ndash; &lt;code&gt;User.objects.create_user()&lt;/code&gt;. Because &lt;code&gt;create_user()&lt;/code&gt; is a manager method, not a &lt;code&gt;QuerySet&lt;/code&gt; method, you can&amp;rsquo;t do &lt;code&gt;User.objects.using('new_users').create_user()&lt;/code&gt;. (The &lt;code&gt;create_user()&lt;/code&gt; method is only available on &lt;code&gt;User.objects&lt;/code&gt;, the manager, not on &lt;code&gt;QuerySet&lt;/code&gt; objects derived from the manager.) The solution is to use &lt;code&gt;db_manager()&lt;/code&gt;, like this:</source>
          <target state="translated">예를 들어, 데이터베이스를 터치하는 사용자 정의 관리자 메소드 &amp;ndash; &lt;code&gt;User.objects.create_user()&lt;/code&gt; . 때문에 &lt;code&gt;create_user()&lt;/code&gt; 관리자 방법이 아닌 것입니다 &lt;code&gt;QuerySet&lt;/code&gt; 방법, 당신이 할 수없는 &lt;code&gt;User.objects.using('new_users').create_user()&lt;/code&gt; . 합니다 ( &lt;code&gt;create_user()&lt;/code&gt; 메소드에서만 사용할 &lt;code&gt;User.objects&lt;/code&gt; , 매니저, 안 &lt;code&gt;QuerySet&lt;/code&gt; . 매니저로부터 유도 된 개체) 용액을 사용이다 &lt;code&gt;db_manager()&lt;/code&gt; 같이 :</target>
        </trans-unit>
        <trans-unit id="b12427337defaf610be79af10716c83a674c8723" translate="yes" xml:space="preserve">
          <source>For example, say you&amp;rsquo;re writing an inclusion tag that will always be used in a context that contains &lt;code&gt;home_link&lt;/code&gt; and &lt;code&gt;home_title&lt;/code&gt; variables that point back to the main page. Here&amp;rsquo;s what the Python function would look like:</source>
          <target state="translated">예를 들어, 메인 페이지를 가리키는 &lt;code&gt;home_link&lt;/code&gt; 및 &lt;code&gt;home_title&lt;/code&gt; 변수가 포함 된 컨텍스트에서 항상 사용되는 포함 태그를 작성한다고 가정 하십시오. 파이썬 함수는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="837db34e268679acb26d08abc40f8ec66566edea" translate="yes" xml:space="preserve">
          <source>For example, say your &lt;a href=&quot;../settings#std:setting-MEDIA_ROOT&quot;&gt;&lt;code&gt;MEDIA_ROOT&lt;/code&gt;&lt;/a&gt; is set to &lt;code&gt;'/home/media'&lt;/code&gt;, and &lt;a href=&quot;#django.db.models.FileField.upload_to&quot;&gt;&lt;code&gt;upload_to&lt;/code&gt;&lt;/a&gt; is set to &lt;code&gt;'photos/%Y/%m/%d'&lt;/code&gt;. The &lt;code&gt;'%Y/%m/%d'&lt;/code&gt; part of &lt;a href=&quot;#django.db.models.FileField.upload_to&quot;&gt;&lt;code&gt;upload_to&lt;/code&gt;&lt;/a&gt; is &lt;a href=&quot;https://docs.python.org/3/library/time.html#time.strftime&quot;&gt;&lt;code&gt;strftime()&lt;/code&gt;&lt;/a&gt; formatting; &lt;code&gt;'%Y'&lt;/code&gt; is the four-digit year, &lt;code&gt;'%m'&lt;/code&gt; is the two-digit month and &lt;code&gt;'%d'&lt;/code&gt; is the two-digit day. If you upload a file on Jan. 15, 2007, it will be saved in the directory &lt;code&gt;/home/media/photos/2007/01/15&lt;/code&gt;.</source>
          <target state="translated">예를 들어, &lt;a href=&quot;../settings#std:setting-MEDIA_ROOT&quot;&gt; &lt;code&gt;MEDIA_ROOT&lt;/code&gt; &lt;/a&gt; 가 &lt;code&gt;'/home/media'&lt;/code&gt; 로 설정되어 있고 &lt;a href=&quot;#django.db.models.FileField.upload_to&quot;&gt; &lt;code&gt;upload_to&lt;/code&gt; &lt;/a&gt; 가 &lt;code&gt;'photos/%Y/%m/%d'&lt;/code&gt; 로 설정되어 있다고 가정하십시오 . &lt;a href=&quot;#django.db.models.FileField.upload_to&quot;&gt; &lt;code&gt;upload_to&lt;/code&gt; &lt;/a&gt; 의 &lt;code&gt;'%Y/%m/%d'&lt;/code&gt; 부분 은 &lt;a href=&quot;https://docs.python.org/3/library/time.html#time.strftime&quot;&gt; &lt;code&gt;strftime()&lt;/code&gt; &lt;/a&gt; 형식입니다. &lt;code&gt;'%Y'&lt;/code&gt; 는 네 자리 연도이고 &lt;code&gt;'%m'&lt;/code&gt; 은 두 자리 월이며 &lt;code&gt;'%d'&lt;/code&gt; 는 두 자리 일입니다. 2007 년 1 월 15 일에 파일을 업로드하면 &lt;code&gt;/home/media/photos/2007/01/15&lt;/code&gt; 디렉토리에 저장됩니다 .</target>
        </trans-unit>
        <trans-unit id="efd483a59754f0aaac0b780515e3d32175b4ce1a" translate="yes" xml:space="preserve">
          <source>For example, suppose you have a filter that adds the string &lt;code&gt;xx&lt;/code&gt; to the end of any input. Since this introduces no dangerous HTML characters to the result (aside from any that were already present), you should mark your filter with &lt;code&gt;is_safe&lt;/code&gt;:</source>
          <target state="translated">예를 들어 입력 끝에 문자열 &lt;code&gt;xx&lt;/code&gt; 를 추가하는 필터가 있다고 가정합니다 . 이것은 결과에 위험한 HTML 문자를 도입하지 않기 때문에 (이미 존재하는 것을 제외하고) 필터를 &lt;code&gt;is_safe&lt;/code&gt; 로 표시해야합니다 .</target>
        </trans-unit>
        <trans-unit id="f0b46b2ac3f51513f40f2ba0e075ad6daaca6f59" translate="yes" xml:space="preserve">
          <source>For example, suppose you have a view, &lt;code&gt;app_views.client&lt;/code&gt;, whose URLconf takes a client ID (here, &lt;code&gt;client()&lt;/code&gt; is a method inside the views file &lt;code&gt;app_views.py&lt;/code&gt;). The URLconf line might look like this:</source>
          <target state="translated">예를 들어, URLconf가 클라이언트 ID를 취하는 보기 &lt;code&gt;app_views.client&lt;/code&gt; 가 있다고 가정 하십시오 (여기서 &lt;code&gt;client()&lt;/code&gt; 는보기 파일 &lt;code&gt;app_views.py&lt;/code&gt; 내의 메소드 ). URLconf 줄은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="75689940cb99e5a3c78be96bc95b910bb9da78b2" translate="yes" xml:space="preserve">
          <source>For example, suppose you have these models:</source>
          <target state="translated">예를 들어, 다음 모델이 있다고 가정하십시오.</target>
        </trans-unit>
        <trans-unit id="adb68cda65641acffb5513c00ebc8792adf26e87" translate="yes" xml:space="preserve">
          <source>For example, suppose you want to add a method to the &lt;code&gt;Person&lt;/code&gt; model. You can do it like this:</source>
          <target state="translated">예를 들어 &lt;code&gt;Person&lt;/code&gt; 모델에 메소드를 추가한다고 가정하십시오 . 다음과 같이 할 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="66b36bd8f3d737b326cd36b2698766934c40eb1b" translate="yes" xml:space="preserve">
          <source>For example, take the following form:</source>
          <target state="translated">예를 들어 다음 형식을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="4deafec385d3e444a3bb56c6350f690c558fa83f" translate="yes" xml:space="preserve">
          <source>For example, taking advantage of GitHub&amp;rsquo;s feature to expose repositories as zip files, you can use a URL like:</source>
          <target state="translated">예를 들어 리포지토리를 zip 파일로 표시하는 GitHub의 기능을 활용하면 다음과 같은 URL을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2cee46bd342b10491add882e66c9a5b078ff05c4" translate="yes" xml:space="preserve">
          <source>For example, the &lt;a href=&quot;../intro/tutorial02&quot;&gt;tutorial&lt;/a&gt; has this line:</source>
          <target state="translated">예를 들어, &lt;a href=&quot;../intro/tutorial02&quot;&gt;튜토리얼&lt;/a&gt; 에는 다음 줄이 있습니다.</target>
        </trans-unit>
        <trans-unit id="5b4e2e42e3429923389b83d267729df072153c91" translate="yes" xml:space="preserve">
          <source>For example, the &lt;a href=&quot;../topics/auth/index#module-django.contrib.auth&quot;&gt;&lt;code&gt;django.contrib.auth&lt;/code&gt;&lt;/a&gt; app only prompts to create a superuser when &lt;code&gt;interactive&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">예를 들어 &lt;a href=&quot;../topics/auth/index#module-django.contrib.auth&quot;&gt; &lt;code&gt;django.contrib.auth&lt;/code&gt; &lt;/a&gt; 앱 은 &lt;code&gt;interactive&lt;/code&gt; 가 &lt;code&gt;True&lt;/code&gt; 일 때만 수퍼 유저를 만들라는 메시지를 표시합니다 .</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
