<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="django">
    <body>
      <group id="django">
        <trans-unit id="048ec96d38efe8c12dfb083658d8404651c7e75b" translate="yes" xml:space="preserve">
          <source>If not set, the return value of &lt;code&gt;django.core.wsgi.get_wsgi_application()&lt;/code&gt; will be used. In this case, the behavior of &lt;a href=&quot;django-admin#django-admin-runserver&quot;&gt;&lt;code&gt;runserver&lt;/code&gt;&lt;/a&gt; will be identical to previous Django versions.</source>
          <target state="translated">설정하지 않으면 &lt;code&gt;django.core.wsgi.get_wsgi_application()&lt;/code&gt; 의 반환 값 이 사용됩니다. 이 경우 &lt;a href=&quot;django-admin#django-admin-runserver&quot;&gt; &lt;code&gt;runserver&lt;/code&gt; &lt;/a&gt; 의 동작은 이전 Django 버전과 동일합니다.</target>
        </trans-unit>
        <trans-unit id="0bcd2319885f70c975b7765a16711af57eab9baa" translate="yes" xml:space="preserve">
          <source>If one of the existing model fields cannot be used to fit your purposes, or if you wish to take advantage of some less common database column types, you can create your own field class. Full coverage of creating your own fields is provided in &lt;a href=&quot;../../howto/custom-model-fields&quot;&gt;Writing custom model fields&lt;/a&gt;.</source>
          <target state="translated">기존 모델 필드 중 하나를 목적에 맞게 사용할 수 없거나 덜 일반적인 데이터베이스 열 유형을 활용하려는 경우 고유 한 필드 클래스를 만들 수 있습니다. &lt;a href=&quot;../../howto/custom-model-fields&quot;&gt;사용자 정의 모델 필드 작성&lt;/a&gt; 에서 고유 한 필드 작성에 대한 전체 내용을 제공 합니다 .</target>
        </trans-unit>
        <trans-unit id="ec78108394b7b984ffd4c8ac9c00c3ab09c32865" translate="yes" xml:space="preserve">
          <source>If one of the instances is current - say, if we were rendering the detail page in the instance &lt;code&gt;'author-polls'&lt;/code&gt; - &lt;code&gt;'polls:index'&lt;/code&gt; will resolve to the index page of the &lt;code&gt;'author-polls'&lt;/code&gt; instance; i.e. both of the following will result in &lt;code&gt;&quot;/author-polls/&quot;&lt;/code&gt;.</source>
          <target state="translated">인스턴스 중 하나가 현재 인 경우-예를 들어 인스턴스 &lt;code&gt;'author-polls'&lt;/code&gt; 에서 세부 사항 페이지를 렌더링하는 경우 - &lt;code&gt;'polls:index'&lt;/code&gt; 는 &lt;code&gt;'author-polls'&lt;/code&gt; 인스턴스 의 색인 페이지로 분석됩니다 . 즉, 다음 두 가지 모두 &lt;code&gt;&quot;/author-polls/&quot;&lt;/code&gt; 됩니다.</target>
        </trans-unit>
        <trans-unit id="6a7628010548cc467431f476a0dd2aede2b28e62" translate="yes" xml:space="preserve">
          <source>If one of the layers decides to short-circuit and return a response without ever calling its &lt;code&gt;get_response&lt;/code&gt;, none of the layers of the onion inside that layer (including the view) will see the request or the response. The response will only return through the same layers that the request passed in through.</source>
          <target state="translated">레이어 중 하나가 &lt;code&gt;get_response&lt;/code&gt; 를 호출하지 않고 단락을하고 응답을 반환하기로 결정한 경우 해당 레이어 내부의 양파 레이어 (보기 포함)는 요청 또는 응답을 볼 수 없습니다. 응답은 요청이 전달한 것과 동일한 계층을 통해서만 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="5f7fc56d57619fe006603eedffe2bc29e42343d8" translate="yes" xml:space="preserve">
          <source>If one of your views receives an &lt;a href=&quot;../ref/request-response#django.http.HttpRequest&quot;&gt;&lt;code&gt;HttpRequest&lt;/code&gt;&lt;/a&gt; object with &lt;a href=&quot;../ref/request-response#django.http.HttpRequest.POST&quot;&gt;&lt;code&gt;POST parameters&lt;/code&gt;&lt;/a&gt; susceptible to contain sensitive information, you may prevent the values of those parameters from being included in the error reports using the &lt;code&gt;sensitive_post_parameters&lt;/code&gt; decorator:</source>
          <target state="translated">뷰 중 하나 가 민감한 정보를 포함 할 수있는 &lt;a href=&quot;../ref/request-response#django.http.HttpRequest.POST&quot;&gt; &lt;code&gt;POST parameters&lt;/code&gt; &lt;/a&gt; 있는 &lt;a href=&quot;../ref/request-response#django.http.HttpRequest&quot;&gt; &lt;code&gt;HttpRequest&lt;/code&gt; &lt;/a&gt; 오브젝트를 수신하는 경우 &lt;code&gt;sensitive_post_parameters&lt;/code&gt; 데코레이터를 사용하여 해당 매개 변수의 값이 오류 보고서에 포함되지 못하게 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="fcff0878219423167c0e066e172d3008301e3e9b" translate="yes" xml:space="preserve">
          <source>If one on-commit function within a given transaction raises an uncaught exception, no later registered functions in that same transaction will run. This is, of course, the same behavior as if you&amp;rsquo;d executed the functions sequentially yourself without &lt;a href=&quot;#django.db.transaction.on_commit&quot;&gt;&lt;code&gt;on_commit()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">주어진 트랜잭션 내에서 하나의 커밋 기능이 발견되지 않은 예외를 발생 시키면 동일한 트랜잭션에 등록 된 기능이 더 이상 실행되지 않습니다. 물론 이것은 &lt;a href=&quot;#django.db.transaction.on_commit&quot;&gt; &lt;code&gt;on_commit()&lt;/code&gt; &lt;/a&gt; 없이 함수를 순차적으로 실행 한 것과 동일한 동작 입니다.</target>
        </trans-unit>
        <trans-unit id="9c159979e36f022ea0dfa4ec34adbe09e0fd50d6" translate="yes" xml:space="preserve">
          <source>If only one key or index is used, the SQL operator &lt;code&gt;-&amp;gt;&lt;/code&gt; is used. If multiple operators are used then the &lt;code&gt;#&amp;gt;&lt;/code&gt; operator is used.</source>
          <target state="translated">하나의 키 또는 인덱스 만 사용되면 SQL 연산자 &lt;code&gt;-&amp;gt;&lt;/code&gt; 가 사용됩니다. 여러 연산자가 사용되면 &lt;code&gt;#&amp;gt;&lt;/code&gt; 연산자가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="099c20d00ec2098bbaf3e804c844660386fd2250" translate="yes" xml:space="preserve">
          <source>If only the &lt;code&gt;expected_exception&lt;/code&gt; and &lt;code&gt;expected_message&lt;/code&gt; parameters are given, returns a context manager so that the code being tested can be written inline rather than as a function:</source>
          <target state="translated">단지 경우 &lt;code&gt;expected_exception&lt;/code&gt; 및 &lt;code&gt;expected_message&lt;/code&gt; 매개 변수가 주어진 코드는 함수보다는 인라인 쓸 수있는 테스트 할 수 있도록 상황에 맞는 매니저를 반환합니다 :</target>
        </trans-unit>
        <trans-unit id="35d8f324adb880bcc55735740ccdb17428c2eda0" translate="yes" xml:space="preserve">
          <source>If only the project name is given, both the project directory and project package will be named &lt;code&gt;&amp;lt;projectname&amp;gt;&lt;/code&gt; and the project directory will be created in the current working directory.</source>
          <target state="translated">프로젝트 이름 만 지정하면 프로젝트 디렉토리와 프로젝트 패키지의 이름이 &lt;code&gt;&amp;lt;projectname&amp;gt;&lt;/code&gt; 이 되고 프로젝트 디렉토리가 현재 작업 디렉토리에 작성됩니다.</target>
        </trans-unit>
        <trans-unit id="9a92c12dfd56bfbe7079f0230ba9f2be3d91cfd1" translate="yes" xml:space="preserve">
          <source>If passed, the array will have a maximum size as specified. This will be passed to the database, although PostgreSQL at present does not enforce the restriction.</source>
          <target state="translated">전달되면 배열은 지정된 최대 크기를 갖습니다. PostgreSQL은 현재 제한을 적용하지 않지만 데이터베이스에 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="bbbac6dbe1f627e4d81d10293f0c6b4eac1b8f3e" translate="yes" xml:space="preserve">
          <source>If present for the field subclass, &lt;code&gt;from_db_value()&lt;/code&gt; will be called in all circumstances when the data is loaded from the database, including in aggregates and &lt;a href=&quot;../ref/models/querysets#django.db.models.query.QuerySet.values&quot;&gt;&lt;code&gt;values()&lt;/code&gt;&lt;/a&gt; calls.</source>
          <target state="translated">필드 서브 클래스에 존재하는 경우, 집계 및 &lt;a href=&quot;../ref/models/querysets#django.db.models.query.QuerySet.values&quot;&gt; &lt;code&gt;values()&lt;/code&gt; &lt;/a&gt; 호출을 포함하여 데이터베이스에서 데이터가로드 될 때 모든 상황에서 &lt;code&gt;from_db_value()&lt;/code&gt; 가 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="5d46fb88e8ed76c60d72db1c27bf5a8f7b838cfa" translate="yes" xml:space="preserve">
          <source>If provided, these arguments ensure that the string is at most or at least the given length.</source>
          <target state="translated">제공되는 경우 이러한 인수는 문자열이 주어진 길이 이상인지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="d4ce7026faaa634fc0b96ac52163aab44216566a" translate="yes" xml:space="preserve">
          <source>If requested by &lt;a href=&quot;#django.views.generic.base.RedirectView.query_string&quot;&gt;&lt;code&gt;query_string&lt;/code&gt;&lt;/a&gt;, it will also append the query string to the generated URL. Subclasses may implement any behavior they wish, as long as the method returns a redirect-ready URL string.</source>
          <target state="translated">&lt;a href=&quot;#django.views.generic.base.RedirectView.query_string&quot;&gt; &lt;code&gt;query_string&lt;/code&gt; &lt;/a&gt; 에서 요청 하면 생성 된 URL에 쿼리 문자열도 추가됩니다. 메소드가 경로 재 지정 가능 URL 문자열을 리턴하는 한 서브 클래스는 원하는 동작을 구현할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="faf19452a1ebae56ddadfb9b942ecd374ffb45ac" translate="yes" xml:space="preserve">
          <source>If resolving one of the block arguments fails, &lt;code&gt;blocktrans&lt;/code&gt; will fall back to the default language by deactivating the currently active language temporarily with the &lt;a href=&quot;../../ref/utils#django.utils.translation.deactivate_all&quot;&gt;&lt;code&gt;deactivate_all()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">블록 인수 중 하나를 해결하지 못하면 &lt;code&gt;blocktrans&lt;/code&gt; 는 &lt;a href=&quot;../../ref/utils#django.utils.translation.deactivate_all&quot;&gt; &lt;code&gt;deactivate_all()&lt;/code&gt; &lt;/a&gt; 함수를 사용하여 현재 활성 언어를 일시적으로 비활성화하여 기본 언어로 폴백 합니다.</target>
        </trans-unit>
        <trans-unit id="e3b2b458927a860df9d6045447f0d0faf0b56f59" translate="yes" xml:space="preserve">
          <source>If set to &lt;code&gt;True&lt;/code&gt;, Django&amp;rsquo;s exception handling of view functions (&lt;a href=&quot;urls#django.conf.urls.handler500&quot;&gt;&lt;code&gt;handler500&lt;/code&gt;&lt;/a&gt;, or the debug view if &lt;a href=&quot;#std:setting-DEBUG&quot;&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;True&lt;/code&gt;) and logging of 500 responses (&lt;a href=&quot;../topics/logging#django-request-logger&quot;&gt;django.request&lt;/a&gt;) is skipped and exceptions propagate upwards.</source>
          <target state="translated">&lt;code&gt;True&lt;/code&gt; 로 설정하면 Django의 뷰 함수 예외 &lt;a href=&quot;urls#django.conf.urls.handler500&quot;&gt; &lt;code&gt;handler500&lt;/code&gt; &lt;/a&gt; ( handler500 또는 &lt;a href=&quot;#std:setting-DEBUG&quot;&gt; &lt;code&gt;DEBUG&lt;/code&gt; &lt;/a&gt; 가 &lt;code&gt;True&lt;/code&gt; 인 경우 디버그 뷰 ) 및 500 개의 응답 로깅 ( &lt;a href=&quot;../topics/logging#django-request-logger&quot;&gt;django.request&lt;/a&gt; )을 건너 뛰고 예외가 위쪽으로 전파됩니다.</target>
        </trans-unit>
        <trans-unit id="1e3988cd635b524ad4c3e4bb0d792a1a3fb38586" translate="yes" xml:space="preserve">
          <source>If set to &lt;code&gt;True&lt;/code&gt;, Oracle Managed Files (OMF) tablespaces will be used. &lt;a href=&quot;#std:setting-DATAFILE&quot;&gt;&lt;code&gt;DATAFILE&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#std:setting-DATAFILE_TMP&quot;&gt;&lt;code&gt;DATAFILE_TMP&lt;/code&gt;&lt;/a&gt; will be ignored.</source>
          <target state="translated">&lt;code&gt;True&lt;/code&gt; 로 설정하면 OMF (Oracle Managed Files) 테이블 스페이스가 사용됩니다. &lt;a href=&quot;#std:setting-DATAFILE&quot;&gt; &lt;code&gt;DATAFILE&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#std:setting-DATAFILE_TMP&quot;&gt; &lt;code&gt;DATAFILE_TMP&lt;/code&gt; &lt;/a&gt; 는 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="0701521850d9a195a77571e1f1a78268d2492816" translate="yes" xml:space="preserve">
          <source>If set to &lt;code&gt;True&lt;/code&gt;, the path data will be implemented in terms of relative moves. Defaults to &lt;code&gt;False&lt;/code&gt;, meaning that absolute moves are used instead.</source>
          <target state="translated">&lt;code&gt;True&lt;/code&gt; 로 설정 되면 경로 데이터는 상대 이동 측면에서 구현됩니다. 기본값은 &lt;code&gt;False&lt;/code&gt; 입니다 . 즉, 절대 이동이 대신 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="b3b374206c1d9d7963bc92da925a698f9a26de10" translate="yes" xml:space="preserve">
          <source>If set to &lt;code&gt;True&lt;/code&gt;, this option will create a database column of type geography, rather than geometry. Please refer to the &lt;a href=&quot;#geography-type&quot;&gt;geography type&lt;/a&gt; section below for more details.</source>
          <target state="translated">&lt;code&gt;True&lt;/code&gt; 로 설정 되면이 옵션은 기하학 대신 geography 유형의 데이터베이스 열을 작성합니다. 자세한 내용은 아래 &lt;a href=&quot;#geography-type&quot;&gt;지역 유형&lt;/a&gt; 섹션을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="27d12549976cfe6d3d621899eab318195533bf4e" translate="yes" xml:space="preserve">
          <source>If set to a non-zero integer value, the &lt;a href=&quot;middleware#django.middleware.security.SecurityMiddleware&quot;&gt;&lt;code&gt;SecurityMiddleware&lt;/code&gt;&lt;/a&gt; sets the &lt;a href=&quot;middleware#http-strict-transport-security&quot;&gt;HTTP Strict Transport Security&lt;/a&gt; header on all responses that do not already have it.</source>
          <target state="translated">0이 아닌 정수 값으로 설정된 경우 &lt;a href=&quot;middleware#django.middleware.security.SecurityMiddleware&quot;&gt; &lt;code&gt;SecurityMiddleware&lt;/code&gt; &lt;/a&gt; 는 아직없는 모든 응답에 &lt;a href=&quot;middleware#http-strict-transport-security&quot;&gt;HTTP Strict Transport Security&lt;/a&gt; 헤더를 설정 합니다.</target>
        </trans-unit>
        <trans-unit id="a50b195fbd06b17894ee9502ef4702bb971ad749" translate="yes" xml:space="preserve">
          <source>If set with an integer, transactions will occur at every step interval. For example, if &lt;code&gt;step=1000&lt;/code&gt;, a commit would occur after the 1,000th feature, the 2,000th feature etc.</source>
          <target state="translated">정수로 설정하면 모든 단계 간격마다 트랜잭션이 발생합니다. 예를 들어 &lt;code&gt;step=1000&lt;/code&gt; 이면 1,000 번째 기능, 2,000 번째 기능 이후에 커밋이 발생합니다.</target>
        </trans-unit>
        <trans-unit id="d8380b522d46fe516758e3f692cac2c3f0d5ddf0" translate="yes" xml:space="preserve">
          <source>If set, information will be printed subsequent to each model save executed on the database.</source>
          <target state="translated">설정하면 데이터베이스에서 실행 된 각 모델 저장 후에 정보가 인쇄됩니다.</target>
        </trans-unit>
        <trans-unit id="c30cf6e77ab684eba085d96ac7acc4917b027312" translate="yes" xml:space="preserve">
          <source>If that command doesn&amp;rsquo;t raise any errors, the installation worked.</source>
          <target state="translated">해당 명령으로 오류가 발생하지 않으면 설치가 제대로 된 것입니다.</target>
        </trans-unit>
        <trans-unit id="f98d28bcb8810cfb8ae43b4092760e1122f40b81" translate="yes" xml:space="preserve">
          <source>If that hypothetical database write is instead rolled back (typically when an unhandled exception is raised in an &lt;a href=&quot;#django.db.transaction.atomic&quot;&gt;&lt;code&gt;atomic()&lt;/code&gt;&lt;/a&gt; block), your function will be discarded and never called.</source>
          <target state="translated">가상의 데이터베이스 쓰기가 대신 롤백되는 경우 (일반적으로 &lt;a href=&quot;#django.db.transaction.atomic&quot;&gt; &lt;code&gt;atomic()&lt;/code&gt; &lt;/a&gt; 블록 에서 처리되지 않은 예외가 발생하는 경우 ) 함수는 삭제되고 호출되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="e85862c30325f5a99e9a50173133105b8ad0fe04" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;#django.contrib.gis.gdal.Layer&quot;&gt;&lt;code&gt;Layer&lt;/code&gt;&lt;/a&gt; has no spatial reference information associated with it, &lt;code&gt;None&lt;/code&gt; is returned.</source>
          <target state="translated">상기 중간 &lt;a href=&quot;#django.contrib.gis.gdal.Layer&quot;&gt; &lt;code&gt;Layer&lt;/code&gt; &lt;/a&gt; 그것과 관련된 공간 참조 정보가없는 &lt;code&gt;None&lt;/code&gt; 반환된다.</target>
        </trans-unit>
        <trans-unit id="b51b9193a32e07b19adea10866b60d16f80af212" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;#django.template.response.SimpleTemplateResponse&quot;&gt;&lt;code&gt;SimpleTemplateResponse&lt;/code&gt;&lt;/a&gt; has already been rendered, the callback will be invoked immediately.</source>
          <target state="translated">는 IF &lt;a href=&quot;#django.template.response.SimpleTemplateResponse&quot;&gt; &lt;code&gt;SimpleTemplateResponse&lt;/code&gt; 가&lt;/a&gt; 이미 렌더링 된 콜백 즉시 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="10740bab3147ec45ec0f050fa0c6500025482a05" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;../../ref/class-based-views/mixins-editing#django.views.generic.edit.ModelFormMixin.model&quot;&gt;&lt;code&gt;model&lt;/code&gt;&lt;/a&gt; attribute is given, that model class will be used.</source>
          <target state="translated">는 IF &lt;a href=&quot;../../ref/class-based-views/mixins-editing#django.views.generic.edit.ModelFormMixin.model&quot;&gt; &lt;code&gt;model&lt;/code&gt; &lt;/a&gt; 속성이 부여되어, 그 모델 클래스가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="8f5c4ba24e8b583b133b407fb7b8a2c07d70e77c" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;contrib/staticfiles&quot;&gt;staticfiles&lt;/a&gt; contrib app is enabled (as in the default project template), the &lt;a href=&quot;contrib/staticfiles#django-admin-collectstatic&quot;&gt;&lt;code&gt;collectstatic&lt;/code&gt;&lt;/a&gt; management command will collect static files into this directory. See the how-to on &lt;a href=&quot;../howto/static-files/index&quot;&gt;managing static files&lt;/a&gt; for more details about usage.</source>
          <target state="translated">는 IF &lt;a href=&quot;contrib/staticfiles&quot;&gt;staticfiles에&lt;/a&gt; 있는 contrib 애플 리케이션 (기본 프로젝트 템플릿으로) 활성화되면, &lt;a href=&quot;contrib/staticfiles#django-admin-collectstatic&quot;&gt; &lt;code&gt;collectstatic&lt;/code&gt; &lt;/a&gt; 관리 명령은이 디렉토리에 정적 파일을 수집합니다. 사용법에 대한 자세한 내용은 &lt;a href=&quot;../howto/static-files/index&quot;&gt;정적 파일 관리&lt;/a&gt; 방법을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="934af602cfac6348740d242482f234edb0625730" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;contrib/staticfiles&quot;&gt;staticfiles&lt;/a&gt; contrib app is enabled (default in new projects) the &lt;a href=&quot;#django-admin-runserver&quot;&gt;&lt;code&gt;runserver&lt;/code&gt;&lt;/a&gt; command will be overridden with its own &lt;a href=&quot;contrib/staticfiles#staticfiles-runserver&quot;&gt;runserver&lt;/a&gt; command.</source>
          <target state="translated">는 IF &lt;a href=&quot;contrib/staticfiles&quot;&gt;staticfiles에&lt;/a&gt; 있는 contrib 응용 프로그램 (새 프로젝트의 기본값)을 사용하는 &lt;a href=&quot;#django-admin-runserver&quot;&gt; &lt;code&gt;runserver&lt;/code&gt; &lt;/a&gt; 명령은 그 자체로 무시됩니다 &lt;a href=&quot;contrib/staticfiles#staticfiles-runserver&quot;&gt;의 runserver&lt;/a&gt; 명령.</target>
        </trans-unit>
        <trans-unit id="8afc9a7ac5ef4d7727722e324647e67d5a1458d6" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;fields#django.forms.DateField&quot;&gt;&lt;code&gt;DateField&lt;/code&gt;&lt;/a&gt; is not required, &lt;a href=&quot;#django.forms.SelectDateWidget&quot;&gt;&lt;code&gt;SelectDateWidget&lt;/code&gt;&lt;/a&gt; will have an empty choice at the top of the list (which is &lt;code&gt;---&lt;/code&gt; by default). You can change the text of this label with the &lt;code&gt;empty_label&lt;/code&gt; attribute. &lt;code&gt;empty_label&lt;/code&gt; can be a &lt;code&gt;string&lt;/code&gt;, &lt;code&gt;list&lt;/code&gt;, or &lt;code&gt;tuple&lt;/code&gt;. When a string is used, all select boxes will each have an empty choice with this label. If &lt;code&gt;empty_label&lt;/code&gt; is a &lt;code&gt;list&lt;/code&gt; or &lt;code&gt;tuple&lt;/code&gt; of 3 string elements, the select boxes will have their own custom label. The labels should be in this order &lt;code&gt;('year_label', 'month_label', 'day_label')&lt;/code&gt;.</source>
          <target state="translated">는 IF &lt;a href=&quot;fields#django.forms.DateField&quot;&gt; &lt;code&gt;DateField&lt;/code&gt; &lt;/a&gt; 필요하지 않습니다, &lt;a href=&quot;#django.forms.SelectDateWidget&quot;&gt; &lt;code&gt;SelectDateWidget&lt;/code&gt; 은&lt;/a&gt; (이다 목록의 맨 위에 빈 선택해야합니다 &lt;code&gt;---&lt;/code&gt; 기본적으로 참조). &lt;code&gt;empty_label&lt;/code&gt; 속성 을 사용하여이 레이블의 텍스트를 변경할 수 있습니다 . &lt;code&gt;empty_label&lt;/code&gt; 은 &lt;code&gt;string&lt;/code&gt; , &lt;code&gt;list&lt;/code&gt; 또는 &lt;code&gt;tuple&lt;/code&gt; 일 수 있습니다 . 문자열을 사용하면 모든 선택 상자에이 레이블이있는 빈 선택 항목이 있습니다. 경우 &lt;code&gt;empty_label&lt;/code&gt; 는 A는 &lt;code&gt;list&lt;/code&gt; 나 &lt;code&gt;tuple&lt;/code&gt; 3 개 문자열 요소는 선택 상자는 사용자 정의 레이블을해야합니다. 레이블은이 순서 &lt;code&gt;('year_label', 'month_label', 'day_label')&lt;/code&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="fa835231e8a9a83481dbf82598e20e9d33a8a3a3" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;settings#std:setting-CSRF_COOKIE_DOMAIN&quot;&gt;&lt;code&gt;CSRF_COOKIE_DOMAIN&lt;/code&gt;&lt;/a&gt; setting is set, the referer is compared against it. This setting supports subdomains. For example, &lt;code&gt;CSRF_COOKIE_DOMAIN = '.example.com'&lt;/code&gt; will allow POST requests from &lt;code&gt;www.example.com&lt;/code&gt; and &lt;code&gt;api.example.com&lt;/code&gt;. If the setting is not set, then the referer must match the HTTP &lt;code&gt;Host&lt;/code&gt; header.</source>
          <target state="translated">&lt;a href=&quot;settings#std:setting-CSRF_COOKIE_DOMAIN&quot;&gt; &lt;code&gt;CSRF_COOKIE_DOMAIN&lt;/code&gt; &lt;/a&gt; 설정이 설정되어 있으면 참조와 비교됩니다. 이 설정은 하위 도메인을 지원합니다. 예를 들어 &lt;code&gt;CSRF_COOKIE_DOMAIN = '.example.com'&lt;/code&gt; 은 &lt;code&gt;www.example.com&lt;/code&gt; 및 &lt;code&gt;api.example.com&lt;/code&gt; 의 POST 요청을 허용합니다 . 설정이 설정되지 않은 경우 참조자는 HTTP &lt;code&gt;Host&lt;/code&gt; 헤더 와 일치해야합니다 .</target>
        </trans-unit>
        <trans-unit id="d84c6d34373dc24879682691c703f3d7f2efc49b" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;settings#std:setting-SECURE_SSL_HOST&quot;&gt;&lt;code&gt;SECURE_SSL_HOST&lt;/code&gt;&lt;/a&gt; setting has a value, all redirects will be sent to that host instead of the originally-requested host.</source>
          <target state="translated">&lt;a href=&quot;settings#std:setting-SECURE_SSL_HOST&quot;&gt; &lt;code&gt;SECURE_SSL_HOST&lt;/code&gt; &lt;/a&gt; 설정에 값이 있으면 모든 리디렉션이 원래 요청 된 호스트 대신 해당 호스트로 전송됩니다.</target>
        </trans-unit>
        <trans-unit id="5615de50081621591758a391687a80e665e2ccbd" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;templates/builtins#std:templatetag-csrf_token&quot;&gt;&lt;code&gt;csrf_token&lt;/code&gt;&lt;/a&gt; template tag is used by a template (or the &lt;code&gt;get_token&lt;/code&gt; function is called some other way), &lt;code&gt;CsrfViewMiddleware&lt;/code&gt; will add a cookie and a &lt;code&gt;Vary: Cookie&lt;/code&gt; header to the response. This means that the middleware will play well with the cache middleware if it is used as instructed (&lt;code&gt;UpdateCacheMiddleware&lt;/code&gt; goes before all other middleware).</source>
          <target state="translated">는 IF &lt;a href=&quot;templates/builtins#std:templatetag-csrf_token&quot;&gt; &lt;code&gt;csrf_token&lt;/code&gt; &lt;/a&gt; 템플릿 태그가 템플릿에 의해 사용되는 (또는 &lt;code&gt;get_token&lt;/code&gt; 기능은 다른 방법이라고합니다), &lt;code&gt;CsrfViewMiddleware&lt;/code&gt; 는 쿠키를 추가 할 것입니다과는 &lt;code&gt;Vary: Cookie&lt;/code&gt; 헤더를 응답에. 이는 미들웨어가 지시에 따라 사용되는 경우 캐시 미들웨어와 잘 작동 함을 의미합니다 ( &lt;code&gt;UpdateCacheMiddleware&lt;/code&gt; 는 다른 모든 미들웨어보다 우선 함 ).</target>
        </trans-unit>
        <trans-unit id="26bd8d1320630840541b8d7d651b43b729598b95" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;Content-Type&lt;/code&gt; header is not &lt;code&gt;&quot;application/json&quot;&lt;/code&gt;, then a &lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; will be raised when trying to parse the response.</source>
          <target state="translated">경우 &lt;code&gt;Content-Type&lt;/code&gt; 헤더가 아닌 &lt;code&gt;&quot;application/json&quot;&lt;/code&gt; , 다음 &lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#ValueError&quot;&gt; &lt;code&gt;ValueError&lt;/code&gt; 를가&lt;/a&gt; 응답을 구문 분석 할 때 발생합니다.</target>
        </trans-unit>
        <trans-unit id="2acff23ea5a5ddc3c288d900245bf1fb2834f32f" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;Host&lt;/code&gt; header (or &lt;code&gt;X-Forwarded-Host&lt;/code&gt; if &lt;a href=&quot;#std:setting-USE_X_FORWARDED_HOST&quot;&gt;&lt;code&gt;USE_X_FORWARDED_HOST&lt;/code&gt;&lt;/a&gt; is enabled) does not match any value in this list, the &lt;a href=&quot;request-response#django.http.HttpRequest.get_host&quot;&gt;&lt;code&gt;django.http.HttpRequest.get_host()&lt;/code&gt;&lt;/a&gt; method will raise &lt;a href=&quot;exceptions#django.core.exceptions.SuspiciousOperation&quot;&gt;&lt;code&gt;SuspiciousOperation&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">경우 &lt;code&gt;Host&lt;/code&gt; 헤더 (또는 &lt;code&gt;X-Forwarded-Host&lt;/code&gt; 경우 &lt;a href=&quot;#std:setting-USE_X_FORWARDED_HOST&quot;&gt; &lt;code&gt;USE_X_FORWARDED_HOST&lt;/code&gt; 가&lt;/a&gt; 활성화되어)이이 목록의 값과 일치하지 않는의 &lt;a href=&quot;request-response#django.http.HttpRequest.get_host&quot;&gt; &lt;code&gt;django.http.HttpRequest.get_host()&lt;/code&gt; &lt;/a&gt; 메소드는 올릴 것이다 &lt;a href=&quot;exceptions#django.core.exceptions.SuspiciousOperation&quot;&gt; &lt;code&gt;SuspiciousOperation&lt;/code&gt; 을&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="3c585a191597195f24d023a685c724097e584557" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;ManyToManyField&lt;/code&gt; points from and to the same model, the following fields are generated:</source>
          <target state="translated">는 IF &lt;code&gt;ManyToManyField&lt;/code&gt; 의 에서 같은 모델 점, 다음 필드가 생성됩니다 :</target>
        </trans-unit>
        <trans-unit id="7111fc374211946c06667dfde5bc62beeaef76cf" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;ModelForm&lt;/code&gt; is only going to be used for the admin, the easiest solution is to omit the &lt;code&gt;Meta.model&lt;/code&gt; attribute, since &lt;code&gt;ModelAdmin&lt;/code&gt; will provide the correct model to use. Alternatively, you can set &lt;code&gt;fields = []&lt;/code&gt; in the &lt;code&gt;Meta&lt;/code&gt; class to satisfy the validation on the &lt;code&gt;ModelForm&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;ModelForm&lt;/code&gt; 는 단지 관리자에 사용되는 것입니다, 가장 쉬운 해결책은 생략에있다 &lt;code&gt;Meta.model&lt;/code&gt; 에 있기 때문에, 속성 &lt;code&gt;ModelAdmin&lt;/code&gt; 가 사용에 대한 올바른 모델을 제공 할 것입니다. 또는 &lt;code&gt;Meta&lt;/code&gt; 클래스 에서 &lt;code&gt;fields = []&lt;/code&gt; 를 설정 하여 &lt;code&gt;ModelForm&lt;/code&gt; 의 유효성 검증을 충족시킬 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="94e7c57e585e52b8e93039b8fb19e79e14bdd3e1" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;RunPython&lt;/code&gt; operation is part of a &lt;a href=&quot;../howto/writing-migrations#non-atomic-migrations&quot;&gt;non-atomic migration&lt;/a&gt;, the operation will only be executed in a transaction if &lt;code&gt;atomic=True&lt;/code&gt; is passed to the &lt;code&gt;RunPython&lt;/code&gt; operation.</source>
          <target state="translated">경우] &lt;code&gt;RunPython&lt;/code&gt; 의 동작은 부분 인 &lt;a href=&quot;../howto/writing-migrations#non-atomic-migrations&quot;&gt;비 원자 이동&lt;/a&gt; 하는 경우, 동작은 트랜잭션 실행한다 &lt;code&gt;atomic=True&lt;/code&gt; 받는 전달 &lt;code&gt;RunPython&lt;/code&gt; 의 동작.</target>
        </trans-unit>
        <trans-unit id="31d01216ada1a5804e326038cd6eae0f674c8905" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;approximate&lt;/code&gt; argument is set to &lt;code&gt;True&lt;/code&gt;, the statistics may be computed based on overviews or a subset of image tiles.</source>
          <target state="translated">&lt;code&gt;approximate&lt;/code&gt; 인수가 &lt;code&gt;True&lt;/code&gt; 로 설정된 경우 개요는 이미지 타일의 개요 또는 일부를 기반으로 계산 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="92d7232ff3bb4953caa004d3cafc9ee9c491c11a" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;clear()&lt;/code&gt; method is available, any pre-existing objects will be removed from the &lt;code&gt;entry_set&lt;/code&gt; before all objects in the iterable (in this case, a list) are added to the set. If the &lt;code&gt;clear()&lt;/code&gt; method is &lt;em&gt;not&lt;/em&gt; available, all objects in the iterable will be added without removing any existing elements.</source>
          <target state="translated">는 IF &lt;code&gt;clear()&lt;/code&gt; 메서드를 사용할 수있는 기존 개체가 제거됩니다 &lt;code&gt;entry_set&lt;/code&gt; (이 경우, 목록에있는)에 반복 가능한 모든 객체가 세트에 추가하기 전에. 는 IF &lt;code&gt;clear()&lt;/code&gt; 메소드가 &lt;em&gt;되지&lt;/em&gt; 가능하며, 반복 가능한 모든 객체는 기존의 요소를 제거하지 않고 추가됩니다.</target>
        </trans-unit>
        <trans-unit id="2297ffae582b0075c91fa434df47e635fa35db94" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;count&lt;/code&gt; integer argument is specified, then additionally the number of &lt;code&gt;needle&lt;/code&gt; occurrences will be strictly verified.</source>
          <target state="translated">는 IF &lt;code&gt;count&lt;/code&gt; 정수 인수가 지정의 후 추가 수 &lt;code&gt;needle&lt;/code&gt; 발생은 엄격하게 확인됩니다.</target>
        </trans-unit>
        <trans-unit id="a2e468dac67b430f87f8897eb4897a2b9f527f58" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;disable_existing_loggers&lt;/code&gt; key in the &lt;a href=&quot;../ref/settings#std:setting-LOGGING&quot;&gt;&lt;code&gt;LOGGING&lt;/code&gt;&lt;/a&gt; dictConfig is set to &lt;code&gt;True&lt;/code&gt; (which is the &lt;code&gt;dictConfig&lt;/code&gt; default if the key is missing) then all loggers from the default configuration will be disabled. Disabled loggers are not the same as removed; the logger will still exist, but will silently discard anything logged to it, not even propagating entries to a parent logger. Thus you should be very careful using &lt;code&gt;'disable_existing_loggers': True&lt;/code&gt;; it&amp;rsquo;s probably not what you want. Instead, you can set &lt;code&gt;disable_existing_loggers&lt;/code&gt; to &lt;code&gt;False&lt;/code&gt; and redefine some or all of the default loggers; or you can set &lt;a href=&quot;../ref/settings#std:setting-LOGGING_CONFIG&quot;&gt;&lt;code&gt;LOGGING_CONFIG&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;None&lt;/code&gt; and &lt;a href=&quot;#disabling-logging-configuration&quot;&gt;handle logging config yourself&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../ref/settings#std:setting-LOGGING&quot;&gt; &lt;code&gt;LOGGING&lt;/code&gt; &lt;/a&gt; dictConfig 의 &lt;code&gt;disable_existing_loggers&lt;/code&gt; 키 가 &lt;code&gt;True&lt;/code&gt; ( 키가없는 경우 &lt;code&gt;dictConfig&lt;/code&gt; 기본값)로 설정되면 기본 구성의 모든 로거가 사용 불가능합니다. 비활성화 된 로거는 제거 된 것과 다릅니다. 로거는 여전히 존재하지만 항목을 상위 로거로 전파하지 않더라도 로그 된 모든 내용을 자동으로 버립니다. 따라서 &lt;code&gt;'disable_existing_loggers': True&lt;/code&gt; 사용하는 데 매우주의해야합니다 . True ; 아마 당신이 원하는 것이 아닐 것입니다. 대신 &lt;code&gt;disable_existing_loggers&lt;/code&gt; 를 &lt;code&gt;False&lt;/code&gt; 로 설정 하고 일부 또는 모든 기본 로거를 재정의 할 수 있습니다 . 또는 &lt;a href=&quot;../ref/settings#std:setting-LOGGING_CONFIG&quot;&gt; &lt;code&gt;LOGGING_CONFIG&lt;/code&gt; &lt;/a&gt; 를 &lt;code&gt;None&lt;/code&gt; 으로 설정할 수 있습니다및 &lt;a href=&quot;#disabling-logging-configuration&quot;&gt;핸들 로깅은 자신을 config (설정)&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="05b08f75ebf13d1d83b41dad6945c5f27a8d81f7" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;keepdb&lt;/code&gt; argument is &lt;code&gt;True&lt;/code&gt;, then the connection to the database will be closed, but the database will not be destroyed.</source>
          <target state="translated">는 IF &lt;code&gt;keepdb&lt;/code&gt; 의 인수가 &lt;code&gt;True&lt;/code&gt; 를 , 데이터베이스에 연결이 종료되지만, 데이터베이스가 파괴되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="08a666c5a8da8f429a409a1267d3838029509ea0" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;noop&lt;/code&gt; option is present, variable lookup still takes place but the translation is skipped. This is useful when &amp;ldquo;stubbing out&amp;rdquo; content that will require translation in the future:</source>
          <target state="translated">는 IF &lt;code&gt;noop&lt;/code&gt; 옵션이 존재, 변수 조회는 여전히 발생하지만 번역은 생략합니다. 이것은 향후 번역이 필요한 컨텐츠를 &quot;스터브 아웃&quot;할 때 유용합니다.</target>
        </trans-unit>
        <trans-unit id="2ee97327ba18c15399455629ba03a6de34dcb1f6" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;pk&lt;/code&gt; attribute in the serialized data doesn&amp;rsquo;t exist or is null, a new instance will be saved to the database.</source>
          <target state="translated">는 IF &lt;code&gt;pk&lt;/code&gt; 직렬화 된 데이터의 속성이 존재 또는 null하지 않으며, 새로운 인스턴스는 데이터베이스에 저장됩니다.</target>
        </trans-unit>
        <trans-unit id="b2735b2310885870e75d0ff6691c6be8a18b8799" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;raise_exception&lt;/code&gt; parameter is given, the decorator will raise &lt;a href=&quot;../../ref/exceptions#django.core.exceptions.PermissionDenied&quot;&gt;&lt;code&gt;PermissionDenied&lt;/code&gt;&lt;/a&gt;, prompting &lt;a href=&quot;../../ref/views#http-forbidden-view&quot;&gt;the 403 (HTTP Forbidden) view&lt;/a&gt; instead of redirecting to the login page.</source>
          <target state="translated">는 IF &lt;code&gt;raise_exception&lt;/code&gt; 의 매개 변수가 제공되면, 데코레이터 올릴 것이다 &lt;a href=&quot;../../ref/exceptions#django.core.exceptions.PermissionDenied&quot;&gt; &lt;code&gt;PermissionDenied&lt;/code&gt; 을&lt;/a&gt; 자극, &lt;a href=&quot;../../ref/views#http-forbidden-view&quot;&gt;403 (HTTP 금지됨)보기&lt;/a&gt; 대신 로그인 페이지로 리디렉션의를.</target>
        </trans-unit>
        <trans-unit id="8394c12ff09c1a5f8f90c7ba9e59af4e1bad9b1d" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;refresh&lt;/code&gt; argument is set to &lt;code&gt;True&lt;/code&gt;, the statistics will be computed from the data directly, and the cache will be updated with the result.</source>
          <target state="translated">경우 &lt;code&gt;refresh&lt;/code&gt; 인수로 설정 &lt;code&gt;True&lt;/code&gt; , 통계는 직접 데이터로부터 계산되며, 캐시는 결과로 업데이트됩니다.</target>
        </trans-unit>
        <trans-unit id="33693d4d2aaa6f581909a8eddc7f106b165a2f88" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;render()&lt;/code&gt; method of your template tag stores the result in a context variable (rather than returning the result in a string), it should take care to call &lt;code&gt;mark_safe()&lt;/code&gt; if appropriate. When the variable is ultimately rendered, it will be affected by the auto-escape setting in effect at the time, so content that should be safe from further escaping needs to be marked as such.</source>
          <target state="translated">템플릿 태그 의 &lt;code&gt;render()&lt;/code&gt; 메소드가 결과를 문자열로 반환하지 않고 컨텍스트 변수에 저장하는 경우 적절한 경우 &lt;code&gt;mark_safe()&lt;/code&gt; 를 호출해야합니다 . 변수가 최종적으로 렌더링 될 때 해당 변수는 당시 자동 이스케이프 설정의 영향을 받으므로 더 이상 이스케이프되지 않아도 안전한 내용을 표시해야합니다.</target>
        </trans-unit>
        <trans-unit id="c2101e6671e6072ad4bba4baf10eea4a340d6815" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;source&lt;/code&gt; command is not available, you can try using a dot instead:</source>
          <target state="translated">경우 &lt;code&gt;source&lt;/code&gt; 명령을 사용할 수 없습니다, 대신 점을 사용하여 시도 할 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="6fe133ba83ae0e8070bb7d71584bd37302738487" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;values()&lt;/code&gt; clause precedes the &lt;code&gt;annotate()&lt;/code&gt; clause, any annotations will be automatically added to the result set. However, if the &lt;code&gt;values()&lt;/code&gt; clause is applied after the &lt;code&gt;annotate()&lt;/code&gt; clause, you need to explicitly include the aggregate column.</source>
          <target state="translated">상기 중간 &lt;code&gt;values()&lt;/code&gt; 절은 선행 &lt;code&gt;annotate()&lt;/code&gt; 절을 모든 통계 자동 결과 집합에 추가한다. 그러나 &lt;code&gt;values()&lt;/code&gt; 절이 &lt;code&gt;annotate()&lt;/code&gt; 절 뒤에 적용되는 경우 집계 열을 명시 적으로 포함해야합니다.</target>
        </trans-unit>
        <trans-unit id="5040996a29b439b21cdb418aa42738cf3b6d145f" translate="yes" xml:space="preserve">
          <source>If the URL accepts arguments, you may pass them in &lt;code&gt;args&lt;/code&gt;. For example:</source>
          <target state="translated">URL이 인수를 허용하면 &lt;code&gt;args&lt;/code&gt; 로 전달할 수 있습니다 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="7e0c98ab05f016b5dde972280549bc4e7e4e4ca7" translate="yes" xml:space="preserve">
          <source>If the URL does not resolve, the function raises a &lt;a href=&quot;exceptions#django.urls.Resolver404&quot;&gt;&lt;code&gt;Resolver404&lt;/code&gt;&lt;/a&gt; exception (a subclass of &lt;a href=&quot;../topics/http/views#django.http.Http404&quot;&gt;&lt;code&gt;Http404&lt;/code&gt;&lt;/a&gt;) .</source>
          <target state="translated">URL이 해결되지 않으면이 함수는 &lt;a href=&quot;exceptions#django.urls.Resolver404&quot;&gt; &lt;code&gt;Resolver404&lt;/code&gt; &lt;/a&gt; 예외 ( &lt;a href=&quot;../topics/http/views#django.http.Http404&quot;&gt; &lt;code&gt;Http404&lt;/code&gt; &lt;/a&gt; 의 서브 클래스)를 발생 시킵니다 .</target>
        </trans-unit>
        <trans-unit id="a05f5f3d9b9ee23fb6009484d0a452e7752eff69" translate="yes" xml:space="preserve">
          <source>If the URL you request with a POST contains encoded parameters, these parameters will be made available in the request.GET data. For example, if you were to make the request:</source>
          <target state="translated">POST로 요청한 URL에 인코딩 된 매개 변수가 포함되어 있으면 request.GET 데이터에서 이러한 매개 변수를 사용할 수 있습니다. 예를 들어, 요청한 경우 :</target>
        </trans-unit>
        <trans-unit id="7bfe6092e2dbc4af99eae5987a2b05f2af49e616" translate="yes" xml:space="preserve">
          <source>If the argument passed to &lt;code&gt;floatformat&lt;/code&gt; is negative, it will round a number to that many decimal places &amp;ndash; but only if there&amp;rsquo;s a decimal part to be displayed. For example:</source>
          <target state="translated">&lt;code&gt;floatformat&lt;/code&gt; 에 전달 된 인수 가 음수이면 숫자를 소수점 이하 자릿수로 반올림합니다. 그러나 소수점 이하 자릿수가 표시되는 경우에만 가능합니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="37eef821508b28230557eff0648d464c18e05688" translate="yes" xml:space="preserve">
          <source>If the argument was a template variable, our function is passed the current value of the variable, not the variable itself.</source>
          <target state="translated">인수가 템플릿 변수 인 경우 변수 자체가 아니라 변수의 현재 값이 함수에 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="0cd46f87317e9cbe83ccd768d1ca1f980a06f428" translate="yes" xml:space="preserve">
          <source>If the built-in &lt;code&gt;Field&lt;/code&gt; classes don&amp;rsquo;t meet your needs, you can create custom &lt;code&gt;Field&lt;/code&gt; classes. To do this, create a subclass of &lt;code&gt;django.forms.Field&lt;/code&gt;. Its only requirements are that it implement a &lt;code&gt;clean()&lt;/code&gt; method and that its &lt;code&gt;__init__()&lt;/code&gt; method accept the core arguments mentioned above (&lt;code&gt;required&lt;/code&gt;, &lt;code&gt;label&lt;/code&gt;, &lt;code&gt;initial&lt;/code&gt;, &lt;code&gt;widget&lt;/code&gt;, &lt;code&gt;help_text&lt;/code&gt;).</source>
          <target state="translated">내장 &lt;code&gt;Field&lt;/code&gt; 클래스가 요구 사항을 충족하지 않으면 사용자 정의 &lt;code&gt;Field&lt;/code&gt; 클래스를 만들 수 있습니다 . 이렇게하려면 &lt;code&gt;django.forms.Field&lt;/code&gt; 의 서브 클래스를 작성하십시오 . 유일한 요구 사항은 &lt;code&gt;clean()&lt;/code&gt; 메소드를 구현하고 해당 &lt;code&gt;__init__()&lt;/code&gt; 메소드가 위에서 언급 한 핵심 인수 ( &lt;code&gt;required&lt;/code&gt; , &lt;code&gt;label&lt;/code&gt; , &lt;code&gt;initial&lt;/code&gt; , &lt;code&gt;widget&lt;/code&gt; , &lt;code&gt;help_text&lt;/code&gt; )를 승인해야한다는 것 입니다.</target>
        </trans-unit>
        <trans-unit id="0881e54800250d1cf05f08cf67b32a0f19ebd6b4" translate="yes" xml:space="preserve">
          <source>If the built-in fields don&amp;rsquo;t do the trick, you can try &lt;a href=&quot;https://github.com/django/django-localflavor&quot;&gt;django-localflavor&lt;/a&gt; (&lt;a href=&quot;https://django-localflavor.readthedocs.io/&quot;&gt;documentation&lt;/a&gt;), which contains assorted pieces of code that are useful for particular countries and cultures.</source>
          <target state="translated">내장 필드가 트릭을 수행하지 않으면 &lt;a href=&quot;https://github.com/django/django-localflavor&quot;&gt;django-localflavor&lt;/a&gt; ( &lt;a href=&quot;https://django-localflavor.readthedocs.io/&quot;&gt;documentation&lt;/a&gt; )를 사용해보십시오 . 여기에는 특정 국가 및 문화에 유용한 여러 가지 코드가 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="f55edd29f245a56eb902d9c4815f789400cb13c8" translate="yes" xml:space="preserve">
          <source>If the callback returns a value that is not &lt;code&gt;None&lt;/code&gt;, this will be used as the response instead of the original response object (and will be passed to the next post rendering callback etc.)</source>
          <target state="translated">콜백 이 &lt;code&gt;None&lt;/code&gt; 이 아닌 값을 반환 하면 원래 응답 객체 대신 응답으로 사용되며 다음 포스트 렌더링 콜백 등으로 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="68cb408f8b62b8a0532f41e57994c10be485c369" translate="yes" xml:space="preserve">
          <source>If the computation time for using this method is too expensive, consider using &lt;a href=&quot;#django.contrib.gis.db.models.Collect&quot;&gt;&lt;code&gt;Collect&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">이 방법을 사용하기위한 계산 시간이 너무 &lt;a href=&quot;#django.contrib.gis.db.models.Collect&quot;&gt; &lt;code&gt;Collect&lt;/code&gt; &lt;/a&gt; 대신 Collect를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="47b5d1532c2916d14a586f84ef6f39d88cc4cdda" translate="yes" xml:space="preserve">
          <source>If the concept of a &lt;code&gt;default&lt;/code&gt; database doesn&amp;rsquo;t make sense in the context of your project, you need to be careful to always specify the database that you want to use. Django requires that a &lt;code&gt;default&lt;/code&gt; database entry be defined, but the parameters dictionary can be left blank if it will not be used. To do this, you must set up &lt;a href=&quot;../../ref/settings#std:setting-DATABASE_ROUTERS&quot;&gt;&lt;code&gt;DATABASE_ROUTERS&lt;/code&gt;&lt;/a&gt; for all of your apps&amp;rsquo; models, including those in any contrib and third-party apps you&amp;rsquo;re using, so that no queries are routed to the default database. The following is an example &lt;code&gt;settings.py&lt;/code&gt; snippet defining two non-default databases, with the &lt;code&gt;default&lt;/code&gt; entry intentionally left empty:</source>
          <target state="translated">&lt;code&gt;default&lt;/code&gt; 데이터베이스 의 개념이 프로젝트의 맥락에서 이해되지 않는 경우 항상 사용하려는 데이터베이스를 지정하도록주의해야합니다. Django는 &lt;code&gt;default&lt;/code&gt; 데이터베이스 항목을 정의해야하지만 매개 변수 사전은 사용하지 않을 경우 비워 둘 수 있습니다. 이렇게하려면 사용중인 contrib 및 타사 앱 모델을 포함하여 모든 앱 모델에 대해 &lt;a href=&quot;../../ref/settings#std:setting-DATABASE_ROUTERS&quot;&gt; &lt;code&gt;DATABASE_ROUTERS&lt;/code&gt; &lt;/a&gt; 를 설정해야 쿼리가 기본 데이터베이스로 라우팅되지 않습니다. 다음은 &lt;code&gt;default&lt;/code&gt; 항목이 의도적으로 비워져있는 두 개의 비 기본 데이터베이스를 정의하는 &lt;code&gt;settings.py&lt;/code&gt; 스 니펫 예제입니다 .</target>
        </trans-unit>
        <trans-unit id="eeb6db1ade98b249e264e62c08a05f0b6e4af339" translate="yes" xml:space="preserve">
          <source>If the content to be serialized contains control characters that are not accepted in the XML 1.0 standard, the serialization will fail with a &lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; exception. Read also the W3C&amp;rsquo;s explanation of &lt;a href=&quot;https://www.w3.org/International/questions/qa-controls&quot;&gt;HTML, XHTML, XML and Control Codes&lt;/a&gt;.</source>
          <target state="translated">직렬화 할 내용에 XML 1.0 표준에서 허용되지 않는 제어 문자가 포함 된 경우 &lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#ValueError&quot;&gt; &lt;code&gt;ValueError&lt;/code&gt; &lt;/a&gt; 예외 가 발생하여 직렬화가 실패 합니다. W3C의 &lt;a href=&quot;https://www.w3.org/International/questions/qa-controls&quot;&gt;HTML, XHTML, XML 및 제어 코드에&lt;/a&gt; 대한 설명도 읽으십시오 .</target>
        </trans-unit>
        <trans-unit id="4525ae9d6cf2854a6fcb0608be8b93a3f3c30647" translate="yes" xml:space="preserve">
          <source>If the current time zone raises an exception for datetimes that don&amp;rsquo;t exist or are ambiguous because they fall in a DST transition (the timezones provided by &lt;a href=&quot;http://pytz.sourceforge.net/&quot;&gt;pytz&lt;/a&gt; do this), such datetimes will be reported as invalid values.</source>
          <target state="translated">현재 시간대가 존재하지 않거나 모호한 날짜 시간이 DST 전환 ( &lt;a href=&quot;http://pytz.sourceforge.net/&quot;&gt;pytz에서&lt;/a&gt; 제공 한 시간대)에 속하기 때문에 예외가 발생하면 해당 날짜 시간은 유효하지 않은 값으로보고됩니다.</target>
        </trans-unit>
        <trans-unit id="f4e60e6c3027fafd4a1a2f98a5fa17785a3288ae" translate="yes" xml:space="preserve">
          <source>If the custom through table defined by the intermediate model does not enforce uniqueness on the &lt;code&gt;(model1, model2)&lt;/code&gt; pair, allowing multiple values, the &lt;a href=&quot;../../ref/models/relations#django.db.models.fields.related.RelatedManager.remove&quot;&gt;&lt;code&gt;remove()&lt;/code&gt;&lt;/a&gt; call will remove all intermediate model instances:</source>
          <target state="translated">중간 모델에 의해 정의 된 사용자 정의 통과 테이블이 &lt;code&gt;(model1, model2)&lt;/code&gt; 쌍 에 고유성을 적용하지 않고 여러 값을 허용하는 경우 &lt;a href=&quot;../../ref/models/relations#django.db.models.fields.related.RelatedManager.remove&quot;&gt; &lt;code&gt;remove()&lt;/code&gt; &lt;/a&gt; 호출은 모든 중간 모델 인스턴스를 제거합니다.</target>
        </trans-unit>
        <trans-unit id="24e26eeaf3ed6a6240170bc7969a0916fee521c8" translate="yes" xml:space="preserve">
          <source>If the database column name is a Python reserved word (such as &lt;code&gt;'pass'&lt;/code&gt;, &lt;code&gt;'class'&lt;/code&gt; or &lt;code&gt;'for'&lt;/code&gt;), &lt;code&gt;inspectdb&lt;/code&gt; will append &lt;code&gt;'_field'&lt;/code&gt; to the attribute name. For example, if a table has a column &lt;code&gt;'for'&lt;/code&gt;, the generated model will have a field &lt;code&gt;'for_field'&lt;/code&gt;, with the &lt;code&gt;db_column&lt;/code&gt; attribute set to &lt;code&gt;'for'&lt;/code&gt;. &lt;code&gt;inspectdb&lt;/code&gt; will insert the Python comment &lt;code&gt;'Field renamed because it was a Python reserved word.'&lt;/code&gt; next to the field.</source>
          <target state="translated">데이터베이스 열 이름이 Python 예약어 (예 : &lt;code&gt;'pass'&lt;/code&gt; , &lt;code&gt;'class'&lt;/code&gt; 또는 &lt;code&gt;'for'&lt;/code&gt; ) 인 경우 &lt;code&gt;inspectdb&lt;/code&gt; 는 속성 이름에 &lt;code&gt;'_field'&lt;/code&gt; 를 추가 합니다. 예를 들어, 테이블에 &lt;code&gt;'for'&lt;/code&gt; 열이있는 경우 생성 된 모델 에는 &lt;code&gt;db_column&lt;/code&gt; 속성이 &lt;code&gt;'for'&lt;/code&gt; 로 설정된 &lt;code&gt;'for_field'&lt;/code&gt; 필드가 있습니다 . &lt;code&gt;inspectdb&lt;/code&gt; 는 &lt;code&gt;'Field renamed because it was a Python reserved word.'&lt;/code&gt; Python 주석을 삽입합니다 . 필드 옆에.</target>
        </trans-unit>
        <trans-unit id="b433adee0cff9f7e77689b285a176f694c2dfe64" translate="yes" xml:space="preserve">
          <source>If the database has the &lt;code&gt;supports_combined_alters&lt;/code&gt;, Django will try and do as many of these in a single database call as possible; otherwise, it will issue a separate ALTER statement for each change, but will not issue ALTERs where no change is required (as South often did).</source>
          <target state="translated">데이터베이스에 &lt;code&gt;supports_combined_alters&lt;/code&gt; 가있는 경우 장고는 가능한 한 단일 데이터베이스 호출로 이들 중 많은 수를 시도하고 수행합니다. 그렇지 않으면 각 변경에 대해 별도의 ALTER 문을 발행하지만 변경이 필요하지 않은 경우 (South에서 자주) ALTER를 발행하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="2b6214efcbb5905b7ba74c2ae487377c68437bf4" translate="yes" xml:space="preserve">
          <source>If the database is responsible for updating the field, the process is more robust: it will only ever update the field based on the value of the field in the database when the &lt;a href=&quot;instances#django.db.models.Model.save&quot;&gt;&lt;code&gt;save()&lt;/code&gt;&lt;/a&gt; or &lt;code&gt;update()&lt;/code&gt; is executed, rather than based on its value when the instance was retrieved.</source>
          <target state="translated">데이터베이스가 필드 업데이트를 담당하는 경우 프로세스가 더욱 강력 해집니다. 데이터베이스 가 아닌 &lt;a href=&quot;instances#django.db.models.Model.save&quot;&gt; &lt;code&gt;save()&lt;/code&gt; &lt;/a&gt; 또는 &lt;code&gt;update()&lt;/code&gt; 가 실행될 때 데이터베이스의 필드 값을 기준으로 필드를 업데이트 합니다. 인스턴스가 검색되었을 때의 값.</target>
        </trans-unit>
        <trans-unit id="75e620c38af1daa6c954718d3fb54518ed7eaca8" translate="yes" xml:space="preserve">
          <source>If the database supports it, you can specify the start and end points based on values of an expression in the partition. If the &lt;code&gt;released&lt;/code&gt; field of the &lt;code&gt;Movie&lt;/code&gt; model stores the release month of each movies, this &lt;code&gt;ValueRange&lt;/code&gt; example annotates each movie with the average rating of a movie&amp;rsquo;s peers released between twelve months before and twelve months after the each movie.</source>
          <target state="translated">데이터베이스가이를 지원하는 경우 파티션의 표현식 값을 기반으로 시작점과 끝점을 지정할 수 있습니다. &lt;code&gt;Movie&lt;/code&gt; 모델 의 &lt;code&gt;released&lt;/code&gt; 필드가 각 영화의 출시 월을 저장하는 경우이 &lt;code&gt;ValueRange&lt;/code&gt; 예제는 각 영화에 12 개월 전과 12 개월 사이에 출시 된 영화 동료의 평균 등급을 사용하여 각 영화에 주석을 추가합니다.</target>
        </trans-unit>
        <trans-unit id="de682c7bb318e9e4b8081e3ba95e6e42e73b0668" translate="yes" xml:space="preserve">
          <source>If the default value (&lt;code&gt;None&lt;/code&gt;) is used with the SQLite database engine, the tests will use a memory resident database. For all other database engines the test database will use the name &lt;code&gt;'test_' + DATABASE_NAME&lt;/code&gt;.</source>
          <target state="translated">SQLite 데이터베이스 엔진에 기본값 ( &lt;code&gt;None&lt;/code&gt; )이 사용되면 테스트는 메모리 상주 데이터베이스를 사용합니다. 다른 모든 데이터베이스 엔진의 경우 테스트 데이터베이스는 &lt;code&gt;'test_' + DATABASE_NAME&lt;/code&gt; _ '+ DATABASE_NAME 이름을 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="31d7e870cfce92781ed62069a8d06aed8bd6f166" translate="yes" xml:space="preserve">
          <source>If the email address provided does not exist in the system, the user is inactive, or has an unusable password, the user will still be redirected to this view but no email will be sent.</source>
          <target state="translated">제공된 이메일 주소가 시스템에 존재하지 않거나 사용자가 비활성 상태이거나 비밀번호를 사용할 수없는 경우 사용자는 여전히이보기로 경로 재 지정되지만 이메일은 전송되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="db3ee4ff45ccc9f4fcd4236a06eb867d73a8a85f" translate="yes" xml:space="preserve">
          <source>If the email address provided does not exist in the system, this view won&amp;rsquo;t send an email, but the user won&amp;rsquo;t receive any error message either. This prevents information leaking to potential attackers. If you want to provide an error message in this case, you can subclass &lt;a href=&quot;#django.contrib.auth.forms.PasswordResetForm&quot;&gt;&lt;code&gt;PasswordResetForm&lt;/code&gt;&lt;/a&gt; and use the &lt;code&gt;form_class&lt;/code&gt; attribute.</source>
          <target state="translated">제공된 이메일 주소가 시스템에 존재하지 않으면이보기는 이메일을 보내지 않지만 사용자는 오류 메시지를받지 않습니다. 잠재적 인 공격자에게 정보가 유출되는 것을 방지합니다. 이 경우 오류 메시지를 제공하려는 경우 &lt;a href=&quot;#django.contrib.auth.forms.PasswordResetForm&quot;&gt; &lt;code&gt;PasswordResetForm&lt;/code&gt; &lt;/a&gt; 을 서브 클래스 화 하고 &lt;code&gt;form_class&lt;/code&gt; 속성을 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c99e2655adb8e99185dcdfcf065a8bd817fd52d8" translate="yes" xml:space="preserve">
          <source>If the feed format is totally custom, you&amp;rsquo;ll want to subclass &lt;code&gt;SyndicationFeed&lt;/code&gt; and completely replace the &lt;code&gt;write()&lt;/code&gt; and &lt;code&gt;writeString()&lt;/code&gt; methods.</source>
          <target state="translated">피드 형식이 완전히 사용자 정의 인 경우 &lt;code&gt;SyndicationFeed&lt;/code&gt; 를 서브 클래스로 &lt;code&gt;write()&lt;/code&gt; 하고 write () 및 &lt;code&gt;writeString()&lt;/code&gt; 메소드를 완전히 대체해야 합니다.</target>
        </trans-unit>
        <trans-unit id="e7368b6434626ac779365385ae08f94dbbeb6a28" translate="yes" xml:space="preserve">
          <source>If the field is a &lt;code&gt;BooleanField&lt;/code&gt;, Django will display a pretty &amp;ldquo;on&amp;rdquo; or &amp;ldquo;off&amp;rdquo; icon instead of &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="translated">필드가 &lt;code&gt;BooleanField&lt;/code&gt; 인 경우 Django는 &lt;code&gt;True&lt;/code&gt; 또는 &lt;code&gt;False&lt;/code&gt; 대신&amp;ldquo;on&amp;rdquo;또는&amp;ldquo;off&amp;rdquo;아이콘을 표시합니다 .</target>
        </trans-unit>
        <trans-unit id="93a5e61f0fff2318c8177651d57e9f9df8232f8d" translate="yes" xml:space="preserve">
          <source>If the field is a &lt;code&gt;ForeignKey&lt;/code&gt;, Django will display the &lt;code&gt;__str__()&lt;/code&gt; of the related object.</source>
          <target state="translated">필드가 &lt;code&gt;ForeignKey&lt;/code&gt; 인 경우 Django는 관련 객체 의 &lt;code&gt;__str__()&lt;/code&gt; 을 표시 합니다.</target>
        </trans-unit>
        <trans-unit id="187bb90cacedf45099edc0ce8a570d93fd2dd2d0" translate="yes" xml:space="preserve">
          <source>If the field is a &lt;code&gt;ForeignKey&lt;/code&gt;, this will also add the foreign key constraint to the column.</source>
          <target state="translated">필드가 &lt;code&gt;ForeignKey&lt;/code&gt; 인 경우 외래 키 제약 조건도 열에 추가됩니다.</target>
        </trans-unit>
        <trans-unit id="7fc4678d8fbbd49c904395e0d20c16a282bf2e32" translate="yes" xml:space="preserve">
          <source>If the field is a &lt;code&gt;ManyToManyField&lt;/code&gt; without a value for &lt;code&gt;through&lt;/code&gt;, instead of creating a column, it will make a table to represent the relationship. If &lt;code&gt;through&lt;/code&gt; is provided, it is a no-op.</source>
          <target state="translated">필드가 있으면 &lt;code&gt;ManyToManyField&lt;/code&gt; 값없이 &lt;code&gt;through&lt;/code&gt; 대신 열을 생성, 그 관계를 나타내는 테이블을 만들 것이다. 경우 &lt;code&gt;through&lt;/code&gt; 제공되며,이 조작은 행해지 지 않습니다.</target>
        </trans-unit>
        <trans-unit id="c3e41a9270c1726202619f246ad8066eeba76c80" translate="yes" xml:space="preserve">
          <source>If the field is a ManyToManyField without a value for &lt;code&gt;through&lt;/code&gt;, it will remove the table created to track the relationship. If &lt;code&gt;through&lt;/code&gt; is provided, it is a no-op.</source>
          <target state="translated">필드가 &lt;code&gt;through&lt;/code&gt; 값이없는 ManyToManyField 인 경우, 관계를 추적하기 위해 작성된 테이블을 제거합니다. 경우 &lt;code&gt;through&lt;/code&gt; 제공되며,이 조작은 행해지 지 않습니다.</target>
        </trans-unit>
        <trans-unit id="2eb25c25d3d9375ffc539e7ad5b8fd3b1ac65ecc" translate="yes" xml:space="preserve">
          <source>If the fields that you&amp;rsquo;re combining are of different types you&amp;rsquo;ll need to tell Django what kind of field will be returned. Since &lt;code&gt;F()&lt;/code&gt; does not directly support &lt;code&gt;output_field&lt;/code&gt; you will need to wrap the expression with &lt;a href=&quot;#django.db.models.ExpressionWrapper&quot;&gt;&lt;code&gt;ExpressionWrapper&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">결합하는 필드가 다른 유형 인 경우 Django에 어떤 종류의 필드가 반환되는지 알려 주어야합니다. 이후 &lt;code&gt;F()&lt;/code&gt; 직접 지원하지 않습니다 &lt;code&gt;output_field&lt;/code&gt; 당신과 표현을 포장해야합니다 &lt;a href=&quot;#django.db.models.ExpressionWrapper&quot;&gt; &lt;code&gt;ExpressionWrapper&lt;/code&gt; &lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="920dc62d10b6075521a8826f302508a777dbe1bd" translate="yes" xml:space="preserve">
          <source>If the flatpage has a custom template, it loads that template. Otherwise, it loads the template &lt;code&gt;flatpages/default.html&lt;/code&gt;.</source>
          <target state="translated">플랫 페이지에 사용자 정의 템플리트가 있으면 해당 템플리트를로드합니다. 그렇지 않으면 &lt;code&gt;flatpages/default.html&lt;/code&gt; 템플리트를로드합니다 .</target>
        </trans-unit>
        <trans-unit id="14fdac3e377218b7cc6f1824107094f6dfcc7132" translate="yes" xml:space="preserve">
          <source>If the form is bound to data, the HTML output will include that data appropriately. For example, if a field is represented by an &lt;code&gt;&amp;lt;input type=&quot;text&quot;&amp;gt;&lt;/code&gt;, the data will be in the &lt;code&gt;value&lt;/code&gt; attribute. If a field is represented by an &lt;code&gt;&amp;lt;input type=&quot;checkbox&quot;&amp;gt;&lt;/code&gt;, then that HTML will include &lt;code&gt;checked&lt;/code&gt; if appropriate:</source>
          <target state="translated">양식이 데이터에 바인드 된 경우 HTML 출력에 해당 데이터가 적절하게 포함됩니다. 예를 들어, 필드가 &lt;code&gt;&amp;lt;input type=&quot;text&quot;&amp;gt;&lt;/code&gt; 로 표시되면 데이터는 &lt;code&gt;value&lt;/code&gt; 속성에 있습니다. 필드가 &lt;code&gt;&amp;lt;input type=&quot;checkbox&quot;&amp;gt;&lt;/code&gt; 로 표시 되면 해당하는 경우 해당 HTML에 &lt;code&gt;checked&lt;/code&gt; 표시가 포함 됩니다.</target>
        </trans-unit>
        <trans-unit id="2347bbb524d905c24374a2f0eed006de697e76e6" translate="yes" xml:space="preserve">
          <source>If the form is submitted using a &lt;code&gt;POST&lt;/code&gt; request, the view will once again create a form instance and populate it with data from the request: &lt;code&gt;form =
NameForm(request.POST)&lt;/code&gt; This is called &amp;ldquo;binding data to the form&amp;rdquo; (it is now a &lt;em&gt;bound&lt;/em&gt; form).</source>
          <target state="translated">&lt;code&gt;POST&lt;/code&gt; 요청을 사용하여 양식을 제출 하면 뷰가 다시 한 번 양식 인스턴스를 작성하고 요청의 데이터로 채 웁니다. &lt;code&gt;form = NameForm(request.POST)&lt;/code&gt; 이를&amp;ldquo;양식에 데이터 바인딩&amp;rdquo;이라고합니다 (현재 &lt;em&gt;바운드&lt;/em&gt; 양식).</target>
        </trans-unit>
        <trans-unit id="a9757191fc0fc873cf4bf622fc86ad210c659471" translate="yes" xml:space="preserve">
          <source>If the form object passed to a template has a different name within the context, you can alias it using the &lt;code&gt;with&lt;/code&gt; argument of the &lt;a href=&quot;../../ref/templates/builtins#std:templatetag-include&quot;&gt;&lt;code&gt;include&lt;/code&gt;&lt;/a&gt; tag:</source>
          <target state="translated">템플리트에 전달 된 양식 오브젝트가 컨텍스트 내에서 다른 이름을 갖는 경우 &lt;a href=&quot;../../ref/templates/builtins#std:templatetag-include&quot;&gt; &lt;code&gt;include&lt;/code&gt; &lt;/a&gt; 태그 의 &lt;code&gt;with&lt;/code&gt; 인수를 사용하여 별명을 지정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d04738f31fd24193f9e0dc204f8a74807516e46f" translate="yes" xml:space="preserve">
          <source>If the front page, displaying the latest blog entries, only changes when you add a new blog entry, you can compute the last modified time very quickly. You need the latest &lt;code&gt;published&lt;/code&gt; date for every entry associated with that blog. One way to do this would be:</source>
          <target state="translated">최신 블로그 항목을 표시하는 첫 페이지가 새 블로그 항목을 추가 할 때만 변경되는 경우 마지막 수정 시간을 매우 빠르게 계산할 수 있습니다. 해당 블로그와 관련된 모든 항목에 대해 최신 &lt;code&gt;published&lt;/code&gt; 날짜 가 필요합니다 . 이를 수행하는 한 가지 방법은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="a34161a59a4f0d30905cb9967f322b4a368ff736" translate="yes" xml:space="preserve">
          <source>If the given URL is &lt;code&gt;None&lt;/code&gt;, Django will return an &lt;code&gt;HttpResponseGone&lt;/code&gt; (410).</source>
          <target state="translated">주어진 URL이 &lt;code&gt;None&lt;/code&gt; 이라면 , Django는 &lt;code&gt;HttpResponseGone&lt;/code&gt; (410)을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="1a04dcff64887ebdbc5f16a342619a164a3cd7da" translate="yes" xml:space="preserve">
          <source>If the given URL is not found, accessing this attribute will raise a &lt;a href=&quot;../../ref/exceptions#django.urls.Resolver404&quot;&gt;&lt;code&gt;Resolver404&lt;/code&gt;&lt;/a&gt; exception.</source>
          <target state="translated">지정된 URL을 찾을 수 없으면이 속성에 액세스하면 &lt;a href=&quot;../../ref/exceptions#django.urls.Resolver404&quot;&gt; &lt;code&gt;Resolver404&lt;/code&gt; &lt;/a&gt; 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="f77d4aed574a50b3060efbb746c1d73ca1c67d9a" translate="yes" xml:space="preserve">
          <source>If the input is a file path, the raster is opened from there. If the input is raw data in a dictionary, the parameters &lt;code&gt;width&lt;/code&gt;, &lt;code&gt;height&lt;/code&gt;, and &lt;code&gt;srid&lt;/code&gt; are required. If the input is a bytes object, it will be opened using a GDAL virtual filesystem.</source>
          <target state="translated">입력이 파일 경로이면 래스터가 여기에서 열립니다. 입력이 사전의 원시 데이터 인 경우 &lt;code&gt;width&lt;/code&gt; , &lt;code&gt;height&lt;/code&gt; 및 &lt;code&gt;srid&lt;/code&gt; 매개 변수 가 필요합니다. 입력이 bytes 객체 인 경우 GDAL 가상 파일 시스템을 사용하여 열립니다.</target>
        </trans-unit>
        <trans-unit id="00448ece8c00dea5fb14fcecd674a9b61b65198b" translate="yes" xml:space="preserve">
          <source>If the key is an integer, it will be interpreted as an index lookup in an array:</source>
          <target state="translated">키가 정수이면 배열에서 인덱스 조회로 해석됩니다.</target>
        </trans-unit>
        <trans-unit id="ac79a02ca9d1e219d3a805f08c37df80bb98035e" translate="yes" xml:space="preserve">
          <source>If the key you wish to query by clashes with the name of another lookup, use the &lt;a href=&quot;#std:fieldlookup-jsonfield.contains&quot;&gt;&lt;code&gt;jsonfield.contains&lt;/code&gt;&lt;/a&gt; lookup instead.</source>
          <target state="translated">조회하려는 키가 다른 조회 이름과 충돌하는 경우 &lt;a href=&quot;#std:fieldlookup-jsonfield.contains&quot;&gt; &lt;code&gt;jsonfield.contains&lt;/code&gt; &lt;/a&gt; 조회를 대신 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="407cc2b75a43efab538c3808b42253f8c6a41dce" translate="yes" xml:space="preserve">
          <source>If the key you wish to query by clashes with the name of another lookup, you need to use the &lt;a href=&quot;#std:fieldlookup-hstorefield.contains&quot;&gt;&lt;code&gt;hstorefield.contains&lt;/code&gt;&lt;/a&gt; lookup instead.</source>
          <target state="translated">쿼리하려는 키가 다른 조회 이름과 충돌하는 경우 &lt;a href=&quot;#std:fieldlookup-hstorefield.contains&quot;&gt; &lt;code&gt;hstorefield.contains&lt;/code&gt; &lt;/a&gt; 조회를 대신 사용해야합니다 .</target>
        </trans-unit>
        <trans-unit id="5ebd9152465f3666cabb8bf46cfee56114d51e1f" translate="yes" xml:space="preserve">
          <source>If the locale middleware is active, it provides a fallback language in case the user&amp;rsquo;s preferred language can&amp;rsquo;t be determined or is not supported by the website. It also provides the fallback translation when a translation for a given literal doesn&amp;rsquo;t exist for the user&amp;rsquo;s preferred language.</source>
          <target state="translated">로케일 미들웨어가 활성 인 경우 사용자 선호 언어를 판별 할 수 없거나 웹 사이트에서 지원하지 않는 경우 대체 언어를 제공합니다. 또한 주어진 리터럴에 대한 번역이 사용자가 선호하는 언어로 존재하지 않는 경우 대체 번역을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="b655b28cf85b0e9ab6424f2bae76d62937214d02" translate="yes" xml:space="preserve">
          <source>If the locale middleware isn&amp;rsquo;t in use, it decides which translation is served to all users.</source>
          <target state="translated">로케일 미들웨어를 사용하지 않는 경우 모든 사용자에게 어떤 번역이 제공되는지 결정합니다.</target>
        </trans-unit>
        <trans-unit id="8c593d7145885e16ebab0576dd01ea5edc8eb619" translate="yes" xml:space="preserve">
          <source>If the location is already an absolute URI, it will not be altered. Otherwise the absolute URI is built using the server variables available in this request. For example:</source>
          <target state="translated">위치가 이미 절대 URI 인 경우 변경되지 않습니다. 그렇지 않으면이 요청에서 사용 가능한 서버 변수를 사용하여 절대 URI가 빌드됩니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="d3264db38633da128d75c5eb268e476d4a3b951a" translate="yes" xml:space="preserve">
          <source>If the log record contains a &lt;code&gt;request&lt;/code&gt; attribute, the full details of the request will be included in the email. The email subject will include the phrase &amp;ldquo;internal IP&amp;rdquo; if the client&amp;rsquo;s IP address is in the &lt;a href=&quot;../ref/settings#std:setting-INTERNAL_IPS&quot;&gt;&lt;code&gt;INTERNAL_IPS&lt;/code&gt;&lt;/a&gt; setting; if not, it will include &amp;ldquo;EXTERNAL IP&amp;rdquo;.</source>
          <target state="translated">로그 레코드에 &lt;code&gt;request&lt;/code&gt; 속성이 포함 된 경우 요청 의 전체 세부 사항이 이메일에 포함됩니다. 클라이언트의 IP 주소가 &lt;a href=&quot;../ref/settings#std:setting-INTERNAL_IPS&quot;&gt; &lt;code&gt;INTERNAL_IPS&lt;/code&gt; &lt;/a&gt; 설정 에 있으면 이메일 제목에 &quot;내부 IP&quot;라는 문구가 포함됩니다 . 그렇지 않은 경우&amp;ldquo;외부 IP&amp;rdquo;가 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="558c854eeaec5a7ab6be858905f8f23539e7a64a" translate="yes" xml:space="preserve">
          <source>If the log record contains stack trace information, that stack trace will be included in the email.</source>
          <target state="translated">로그 레코드에 스택 추적 정보가 포함되어 있으면 해당 스택 추적이 전자 메일에 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="8d11f19d1f78b5ab369ba0f054bb8ddefd7d18dc" translate="yes" xml:space="preserve">
          <source>If the matched URL pattern contained no named groups, then the matches from the regular expression are provided as positional arguments.</source>
          <target state="translated">일치하는 URL 패턴에 이름이 지정된 그룹이 없으면 정규식의 일치가 위치 인수로 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="f27bc33c579e0ba1b671f20cb2b969680090aa80" translate="yes" xml:space="preserve">
          <source>If the middleware is enabled, the language can be set by creating a cookie with a name of &lt;a href=&quot;../../ref/settings#std:setting-LANGUAGE_COOKIE_NAME&quot;&gt;&lt;code&gt;LANGUAGE_COOKIE_NAME&lt;/code&gt;&lt;/a&gt; and a value of the language code:</source>
          <target state="translated">미들웨어가 사용 가능한 경우 &lt;a href=&quot;../../ref/settings#std:setting-LANGUAGE_COOKIE_NAME&quot;&gt; &lt;code&gt;LANGUAGE_COOKIE_NAME&lt;/code&gt; &lt;/a&gt; 이름 및 언어 코드 값으로 쿠키를 작성하여 언어를 설정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f8b3db4161aa1f1d9ef7d96ed438167b2a06057a" translate="yes" xml:space="preserve">
          <source>If the middleware isn&amp;rsquo;t enabled, the active language may be set using &lt;a href=&quot;../../ref/utils#django.utils.translation.override&quot;&gt;&lt;code&gt;translation.override()&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">미들웨어가 활성화되어 있지 않으면 &lt;a href=&quot;../../ref/utils#django.utils.translation.override&quot;&gt; &lt;code&gt;translation.override()&lt;/code&gt; &lt;/a&gt; 사용하여 활성 언어를 설정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="77e0e8d1467be7a2d6e9f0484b05652c14f7c823" translate="yes" xml:space="preserve">
          <source>If the model field has &lt;code&gt;blank=True&lt;/code&gt;, then &lt;code&gt;required&lt;/code&gt; is set to &lt;code&gt;False&lt;/code&gt; on the form field. Otherwise, &lt;code&gt;required=True&lt;/code&gt;.</source>
          <target state="translated">모델 필드가있는 경우 &lt;code&gt;blank=True&lt;/code&gt; , 다음 &lt;code&gt;required&lt;/code&gt; 설정되어 &lt;code&gt;False&lt;/code&gt; 양식 필드에. 그렇지 않으면 &lt;code&gt;required=True&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="b6ce905c045e003d848e1a4bfebb8367398b55a5" translate="yes" xml:space="preserve">
          <source>If the model field has &lt;code&gt;choices&lt;/code&gt; set, then the form field&amp;rsquo;s &lt;code&gt;widget&lt;/code&gt; will be set to &lt;code&gt;Select&lt;/code&gt;, with choices coming from the model field&amp;rsquo;s &lt;code&gt;choices&lt;/code&gt;. The choices will normally include the blank choice which is selected by default. If the field is required, this forces the user to make a selection. The blank choice will not be included if the model field has &lt;code&gt;blank=False&lt;/code&gt; and an explicit &lt;code&gt;default&lt;/code&gt; value (the &lt;code&gt;default&lt;/code&gt; value will be initially selected instead).</source>
          <target state="translated">모델 필드에 &lt;code&gt;choices&lt;/code&gt; 설정되어 있으면 양식 필드의 &lt;code&gt;widget&lt;/code&gt; 이 &lt;code&gt;Select&lt;/code&gt; 으로 설정되며 선택 사항은 모델 필드의 &lt;code&gt;choices&lt;/code&gt; 에서옵니다 . 선택 사항에는 일반적으로 기본적으로 선택된 빈 항목이 포함됩니다. 필드가 필요한 경우 사용자가 선택하도록합니다. 모델 필드에 &lt;code&gt;blank=False&lt;/code&gt; 및 명시 적 &lt;code&gt;default&lt;/code&gt; ( &lt;code&gt;default&lt;/code&gt; 은 대신 기본값 이 선택됨)이있는 경우 선택 항목이 포함되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="f96a82c6715c5a715a0e01211ac8adf4e12046a4" translate="yes" xml:space="preserve">
          <source>If the model&amp;rsquo;s primary key is an &lt;a href=&quot;fields#django.db.models.AutoField&quot;&gt;&lt;code&gt;AutoField&lt;/code&gt;&lt;/a&gt; it does not retrieve and set the primary key attribute, as &lt;code&gt;save()&lt;/code&gt; does, unless the database backend supports it (currently PostgreSQL).</source>
          <target state="translated">모델의 기본 키가 &lt;a href=&quot;fields#django.db.models.AutoField&quot;&gt; &lt;code&gt;AutoField&lt;/code&gt; &lt;/a&gt; 인 경우 데이터베이스 백엔드가 지원하지 않는 한 &lt;code&gt;save()&lt;/code&gt; 와 같이 기본 키 속성을 검색하고 설정하지 않습니다 (현재 PostgreSQL).</target>
        </trans-unit>
        <trans-unit id="b759c75b1b279d612802ffa84e3c983524d1b418" translate="yes" xml:space="preserve">
          <source>If the named fixture has a file extension, only fixtures of that type will be loaded. For example:</source>
          <target state="translated">명명 된 조명기의 파일 확장자가 있으면 해당 유형의 조명기 만로드됩니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="362d07b2752f99df71674036aec9a530c5efa750" translate="yes" xml:space="preserve">
          <source>If the named key does not exist, &lt;code&gt;InvalidCacheBackendError&lt;/code&gt; will be raised.</source>
          <target state="translated">명명 된 키가 없으면 &lt;code&gt;InvalidCacheBackendError&lt;/code&gt; 가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="a668f34f8121048f3d4b44ccf50ee64fbbfdbd16" translate="yes" xml:space="preserve">
          <source>If the normal base manager class (&lt;a href=&quot;#django.db.models.Manager&quot;&gt;&lt;code&gt;django.db.models.Manager&lt;/code&gt;&lt;/a&gt;) isn&amp;rsquo;t appropriate for your circumstances, you can tell Django which class to use by setting &lt;a href=&quot;../../ref/models/options#django.db.models.Options.base_manager_name&quot;&gt;&lt;code&gt;Meta.base_manager_name&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">일반적인 기본 관리자 클래스 ( &lt;a href=&quot;#django.db.models.Manager&quot;&gt; &lt;code&gt;django.db.models.Manager&lt;/code&gt; &lt;/a&gt; )가 상황에 맞지 않으면 &lt;a href=&quot;../../ref/models/options#django.db.models.Options.base_manager_name&quot;&gt; &lt;code&gt;Meta.base_manager_name&lt;/code&gt; &lt;/a&gt; 을 설정하여 사용할 장을 Django에 알릴 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="826ea8b39c2adb284a994b3ac295d22a4f3c7746" translate="yes" xml:space="preserve">
          <source>If the number of items in the initial data exceeds &lt;code&gt;max_num&lt;/code&gt;, all initial data forms will be displayed regardless of the value of &lt;code&gt;max_num&lt;/code&gt; and no extra forms will be displayed. For example, if &lt;code&gt;extra=3&lt;/code&gt; and &lt;code&gt;max_num=1&lt;/code&gt; and the formset is initialized with two initial items, two forms with the initial data will be displayed.</source>
          <target state="translated">초기 데이터의 항목 수를 초과하면 &lt;code&gt;max_num&lt;/code&gt; 모든 초기 데이터 형태의 값에 관계없이 표시 될 &lt;code&gt;max_num&lt;/code&gt; 더 추가 형태는 표시되지 않는다. 예를 들어 &lt;code&gt;extra=3&lt;/code&gt; 및 &lt;code&gt;max_num=1&lt;/code&gt; 이고 양식 세트가 두 개의 초기 항목으로 초기화 된 경우 초기 데이터가있는 두 개의 양식이 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="9a54427017bdff00314afd5156803ed55090ab15" translate="yes" xml:space="preserve">
          <source>If the number of items in the input is different from the target pixel block, the &lt;code&gt;shape&lt;/code&gt; parameter must be specified. The shape is a tuple that specifies the width and height of the input data in pixels. The data is then replicated to update the pixel values of the selected block. This is useful to fill an entire band with a single value, for instance.</source>
          <target state="translated">입력의 항목 수가 대상 픽셀 블록과 다른 경우 &lt;code&gt;shape&lt;/code&gt; 매개 변수를 지정해야합니다. 모양은 입력 데이터의 너비와 높이를 픽셀 단위로 지정하는 튜플입니다. 그런 다음 선택한 블록의 픽셀 값을 업데이트하기 위해 데이터가 복제됩니다. 예를 들어 전체 밴드를 단일 값으로 채울 때 유용합니다.</target>
        </trans-unit>
        <trans-unit id="a6a6749b0e99cb6050db9cf3716874b3e4ced2ec" translate="yes" xml:space="preserve">
          <source>If the object doesn&amp;rsquo;t exist in the cache, &lt;code&gt;cache.get()&lt;/code&gt; returns &lt;code&gt;None&lt;/code&gt;:</source>
          <target state="translated">객체가 캐시에 &lt;code&gt;cache.get()&lt;/code&gt; 은 &lt;code&gt;None&lt;/code&gt; 을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="646d736dabdd25c732e89d37d9d4201115c381b3" translate="yes" xml:space="preserve">
          <source>If the object&amp;rsquo;s primary key attribute defines a &lt;a href=&quot;fields#django.db.models.Field.default&quot;&gt;&lt;code&gt;default&lt;/code&gt;&lt;/a&gt; then Django executes an &lt;code&gt;UPDATE&lt;/code&gt; if it is an existing model instance and primary key is set to a value that exists in the database. Otherwise, Django executes an &lt;code&gt;INSERT&lt;/code&gt;.</source>
          <target state="translated">객체의 기본 키 속성이 &lt;a href=&quot;fields#django.db.models.Field.default&quot;&gt; &lt;code&gt;default&lt;/code&gt; &lt;/a&gt; 을 정의하면 장고 는 기존 모델 인스턴스이고 기본 키가 데이터베이스에 존재하는 값으로 설정된 경우 &lt;code&gt;UPDATE&lt;/code&gt; 를 실행 합니다. 그렇지 않으면 Django는 &lt;code&gt;INSERT&lt;/code&gt; 를 실행합니다 .</target>
        </trans-unit>
        <trans-unit id="c671ef226635a52b529ee6c4d9e1022741a8176d" translate="yes" xml:space="preserve">
          <source>If the object&amp;rsquo;s primary key attribute is &lt;em&gt;not&lt;/em&gt; set or if the &lt;code&gt;UPDATE&lt;/code&gt; didn&amp;rsquo;t update anything (e.g. if primary key is set to a value that doesn&amp;rsquo;t exist in the database), Django executes an &lt;code&gt;INSERT&lt;/code&gt;.</source>
          <target state="translated">개체의 기본 키 속성이 경우 &lt;em&gt;하지&lt;/em&gt; 설정하거나 경우에 &lt;code&gt;UPDATE&lt;/code&gt; 가 아무것도 업데이트되지 않았습니다 (기본 키가 데이터베이스에 존재하지 않는 값으로 설정 예를 들어 경우), 장고는 실행 &lt;code&gt;INSERT&lt;/code&gt; 를 .</target>
        </trans-unit>
        <trans-unit id="6e28fb5ae884b5520d6c8a7cdb6b70dbd48ca7eb" translate="yes" xml:space="preserve">
          <source>If the object&amp;rsquo;s primary key attribute is set to a value that evaluates to &lt;code&gt;True&lt;/code&gt; (i.e., a value other than &lt;code&gt;None&lt;/code&gt; or the empty string), Django executes an &lt;code&gt;UPDATE&lt;/code&gt;.</source>
          <target state="translated">객체의 기본 키 속성이 &lt;code&gt;True&lt;/code&gt; 로 평가되는 값 (예 : &lt;code&gt;None&lt;/code&gt; 이외의 값 또는 빈 문자열)으로 설정되면 Django는 &lt;code&gt;UPDATE&lt;/code&gt; 를 실행합니다 .</target>
        </trans-unit>
        <trans-unit id="34a7e5104e15b8b6de4d5070431c0318f28a763a" translate="yes" xml:space="preserve">
          <source>If the old &lt;code&gt;number_sold&lt;/code&gt; value retrieved from the database was 10, then the value of 11 will be written back to the database.</source>
          <target state="translated">데이터베이스에서 검색된 이전 &lt;code&gt;number_sold&lt;/code&gt; 값이 10이면 값 11이 데이터베이스에 다시 기록됩니다.</target>
        </trans-unit>
        <trans-unit id="aca412a3a96d6dc532c6fed74ff3abb6bb8b6222" translate="yes" xml:space="preserve">
          <source>If the optional destination is provided, Django will use that existing directory as the project directory, and create &lt;code&gt;manage.py&lt;/code&gt; and the project package within it. Use &amp;lsquo;.&amp;rsquo; to denote the current working directory.</source>
          <target state="translated">선택적 목적지가 제공되면 Django는 기존 디렉토리를 프로젝트 디렉토리로 사용하고 그 안에 &lt;code&gt;manage.py&lt;/code&gt; 및 프로젝트 패키지를 만듭니다 . 사용하다 '.' 현재 작업 디렉토리를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="96bd866396bdc1707e3fb218d60c9174cbfa1187" translate="yes" xml:space="preserve">
          <source>If the optional destination is provided, Django will use that existing directory rather than creating a new one. You can use &amp;lsquo;.&amp;rsquo; to denote the current working directory.</source>
          <target state="translated">선택적 목적지가 제공되면 Django는 새 디렉토리를 생성하지 않고 기존 디렉토리를 사용합니다. 당신이 사용할 수있는 '.' 현재 작업 디렉토리를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="d65b4b8040f37069c8c493e01d172fe82c59186d" translate="yes" xml:space="preserve">
          <source>If the page is cacheable, but you still want the permission check to be performed, you can pass a &lt;code&gt;cacheable=True&lt;/code&gt; argument to &lt;code&gt;AdminSite.admin_view()&lt;/code&gt;:</source>
          <target state="translated">페이지가 캐시 가능하지만 여전히 권한 검사를 수행하려는 경우 &lt;code&gt;cacheable=True&lt;/code&gt; 인수를 &lt;code&gt;AdminSite.admin_view()&lt;/code&gt; 전달할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="2d63af43bcd959831a177ff5a58c265ebe73ad08" translate="yes" xml:space="preserve">
          <source>If the page isn&amp;rsquo;t a number, it returns the first page. If the page number is negative or greater than the number of pages, it returns the last page.</source>
          <target state="translated">페이지가 숫자가 아닌 경우 첫 페이지를 반환합니다. 페이지 번호가 음수이거나 페이지 수보다 크면 마지막 페이지를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="449c71074274cb7cb8ca111a6688e519d349913f" translate="yes" xml:space="preserve">
          <source>If the parent has an ordering and you don&amp;rsquo;t want the child to have any natural ordering, you can explicitly disable it:</source>
          <target state="translated">부모에게 명령이 있고 자녀가 자연스러운 순서를 갖기를 원하지 않는 경우 명시 적으로 비활성화 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7e8326d7c2e2af22b7076e60b8fae585d509c641" translate="yes" xml:space="preserve">
          <source>If the paths and converters syntax isn&amp;rsquo;t sufficient for defining your URL patterns, you can also use regular expressions. To do so, use &lt;a href=&quot;../../ref/urls#django.urls.re_path&quot;&gt;&lt;code&gt;re_path()&lt;/code&gt;&lt;/a&gt; instead of &lt;a href=&quot;../../ref/urls#django.urls.path&quot;&gt;&lt;code&gt;path()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">경로 및 변환기 구문이 URL 패턴을 정의하기에 충분하지 않은 경우 정규식을 사용할 수도 있습니다. 그렇게하려면 &lt;a href=&quot;../../ref/urls#django.urls.path&quot;&gt; &lt;code&gt;path()&lt;/code&gt; &lt;/a&gt; 대신 &lt;a href=&quot;../../ref/urls#django.urls.re_path&quot;&gt; &lt;code&gt;re_path()&lt;/code&gt; &lt;/a&gt; 를 사용 하십시오 .</target>
        </trans-unit>
        <trans-unit id="8ba3b655a98f41927c3df59507ec695765575a46" translate="yes" xml:space="preserve">
          <source>If the provided namespace doesn&amp;rsquo;t match an &lt;a href=&quot;#term-application-namespace&quot;&gt;application namespace&lt;/a&gt; in step 1, Django will attempt a direct lookup of the namespace as an &lt;a href=&quot;#term-instance-namespace&quot;&gt;instance namespace&lt;/a&gt;.</source>
          <target state="translated">제공된 네임 스페이스가 1 단계에서 &lt;a href=&quot;#term-application-namespace&quot;&gt;애플리케이션 네임 스페이스&lt;/a&gt; 와 일치하지 않으면 Django는 네임 스페이스를 &lt;a href=&quot;#term-instance-namespace&quot;&gt;인스턴스 네임&lt;/a&gt; 스페이스로 직접 조회하려고 시도 합니다 .</target>
        </trans-unit>
        <trans-unit id="e61e6192fb272635702649e3754a886729bd48dc" translate="yes" xml:space="preserve">
          <source>If the related object is deleted, the &lt;code&gt;content_type&lt;/code&gt; and &lt;code&gt;object_id&lt;/code&gt; fields remain set to their original values and the &lt;code&gt;GenericForeignKey&lt;/code&gt; returns &lt;code&gt;None&lt;/code&gt;:</source>
          <target state="translated">관련 객체가 삭제되면 &lt;code&gt;content_type&lt;/code&gt; 및 &lt;code&gt;object_id&lt;/code&gt; 필드는 원래 값으로 설정된 상태로 유지되고 &lt;code&gt;GenericForeignKey&lt;/code&gt; 는 &lt;code&gt;None&lt;/code&gt; 을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="ffcc219aa1c4e4ac018419462ed9e9a642409200" translate="yes" xml:space="preserve">
          <source>If the rendered page used multiple templates, then &lt;code&gt;context&lt;/code&gt; will be a list of &lt;code&gt;Context&lt;/code&gt; objects, in the order in which they were rendered.</source>
          <target state="translated">렌더링 된 페이지가 여러 템플리트를 사용한 경우 &lt;code&gt;context&lt;/code&gt; 는 렌더링 된 순서대로 &lt;code&gt;Context&lt;/code&gt; 오브젝트 목록입니다 .</target>
        </trans-unit>
        <trans-unit id="453aeb3c1ca5c2eb5a8bb6d078fe6dcf9b73c42d" translate="yes" xml:space="preserve">
          <source>If the response has an &lt;code&gt;ETag&lt;/code&gt; header, the ETag is made weak to comply with &lt;a href=&quot;https://tools.ietf.org/html/rfc7232.html#section-2.1&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;RFC 7232#section-2.1&lt;/strong&gt;&lt;/a&gt;.</source>
          <target state="translated">응답에 &lt;code&gt;ETag&lt;/code&gt; 헤더 가 있으면 &lt;a href=&quot;https://tools.ietf.org/html/rfc7232.html#section-2.1&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;RFC 7232 # section-2.1&lt;/strong&gt;&lt;/a&gt; 을 준수하도록 ETag가 약해집니다 .</target>
        </trans-unit>
        <trans-unit id="704a6e7c4c31475b433de2a9afeccf1e10be5b91" translate="yes" xml:space="preserve">
          <source>If the resulting value is callable, it is called with no arguments. The result of the call becomes the template value.</source>
          <target state="translated">결과 값을 호출 할 수 있으면 인수없이 호출됩니다. 호출 결과는 템플릿 값이됩니다.</target>
        </trans-unit>
        <trans-unit id="89fff7515bba7259d533e340af1d28df5122f23c" translate="yes" xml:space="preserve">
          <source>If the server is not running start it like so:</source>
          <target state="translated">서버가 실행되고 있지 않으면 다음과 같이 시작하십시오.</target>
        </trans-unit>
        <trans-unit id="d395fb88fed3efa1c3c52eced6fa03546c8e9385" translate="yes" xml:space="preserve">
          <source>If the signature or value have been altered in any way, a &lt;code&gt;django.core.signing.BadSignature&lt;/code&gt; exception will be raised:</source>
          <target state="translated">서명 또는 값이 어떤 식 으로든 변경되면 &lt;code&gt;django.core.signing.BadSignature&lt;/code&gt; 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="68d86086636afed31f5e8b83119b391c11676938" translate="yes" xml:space="preserve">
          <source>If the source and target models differ, the following fields are generated:</source>
          <target state="translated">소스 및 대상 모델이 다른 경우 다음 필드가 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="633ef4f9d4e293110218b0b09a566215a2bdf55e" translate="yes" xml:space="preserve">
          <source>If the string contains exactly one unnamed placeholder, you can interpolate directly with the &lt;code&gt;number&lt;/code&gt; argument:</source>
          <target state="translated">문자열에 명명되지 않은 자리 표시자가 정확히 하나만 포함되어 있으면 &lt;code&gt;number&lt;/code&gt; 인수로 직접 보간 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="77f538b0c255912dbe9364dbf7280961b4996b22" translate="yes" xml:space="preserve">
          <source>If the string given is a method of the model, &lt;code&gt;ModelAdmin&lt;/code&gt; or a callable that returns True or False Django will display a pretty &amp;ldquo;on&amp;rdquo; or &amp;ldquo;off&amp;rdquo; icon if you give the method a &lt;code&gt;boolean&lt;/code&gt; attribute whose value is &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">주어진 문자열이 모델의 메소드 인 경우, True 또는 False Django를 리턴하는 &lt;code&gt;ModelAdmin&lt;/code&gt; 또는 호출 가능 오브젝트는 &lt;code&gt;boolean&lt;/code&gt; 값이 &lt;code&gt;True&lt;/code&gt; 인 부울 속성 을 제공하면 꽤 &quot;켜짐&quot;또는 &quot;꺼짐&quot;아이콘을 표시합니다 .</target>
        </trans-unit>
        <trans-unit id="d24a764d1bded8d74681dd2025af0d5bc9819ce3" translate="yes" xml:space="preserve">
          <source>If the string given is a method of the model, &lt;code&gt;ModelAdmin&lt;/code&gt; or a callable, Django will HTML-escape the output by default. To escape user input and allow your own unescaped tags, use &lt;a href=&quot;../../utils#django.utils.html.format_html&quot;&gt;&lt;code&gt;format_html()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">주어진 문자열이 모델, &lt;code&gt;ModelAdmin&lt;/code&gt; 또는 호출 가능 메소드 인 경우 Django는 기본적으로 출력을 HTML 이스케이프합니다. 사용자 입력을 피하고 이스케이프 처리되지 않은 태그를 허용하려면 &lt;a href=&quot;../../utils#django.utils.html.format_html&quot;&gt; &lt;code&gt;format_html()&lt;/code&gt; &lt;/a&gt; 사용 하십시오 .</target>
        </trans-unit>
        <trans-unit id="105660f9c8d885576c4d75b90c9c72dcdf558e17" translate="yes" xml:space="preserve">
          <source>If the table is very large and your queries mostly target a subset of rows, it may be useful to restrict an index to that subset. Specify a condition as a &lt;a href=&quot;querysets#django.db.models.Q&quot;&gt;&lt;code&gt;Q&lt;/code&gt;&lt;/a&gt;. For example, &lt;code&gt;condition=Q(pages__gt=400)&lt;/code&gt; indexes records with more than 400 pages.</source>
          <target state="translated">테이블이 매우 크고 쿼리가 주로 행의 하위 집합을 대상으로하는 경우 인덱스를 해당 하위 집합으로 제한하는 것이 유용 할 수 있습니다. 조건을 &lt;a href=&quot;querysets#django.db.models.Q&quot;&gt; &lt;code&gt;Q&lt;/code&gt; &lt;/a&gt; 로 지정하십시오 . 예를 들어 &lt;code&gt;condition=Q(pages__gt=400)&lt;/code&gt; 은 400 페이지가 넘는 레코드를 인덱싱합니다.</target>
        </trans-unit>
        <trans-unit id="daab90a7c3bc9cf977eae52e7797b86c2df0f84b" translate="yes" xml:space="preserve">
          <source>If the template has already been rendered, the callback will be invoked immediately.</source>
          <target state="translated">템플릿이 이미 렌더링 된 경우 콜백이 즉시 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="335267b2f6f5eff3146781e1f8c7c684e000fea5" translate="yes" xml:space="preserve">
          <source>If the template is instantiated directly rather than through a template loader, this is &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">템플리트가 템플리트 로더를 통하지 않고 직접 인스턴스화되는 경우 이는 &lt;code&gt;None&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="390b626866eea7efc24acb7e8d97d6da5d385595" translate="yes" xml:space="preserve">
          <source>If the template is instantiated directly rather than through a template loader, this is a string value of &lt;code&gt;&amp;lt;unknown_source&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">템플리트가 템플리트 로더를 통하지 않고 직접 인스턴스화되는 경우 이는 문자열 값 &lt;code&gt;&amp;lt;unknown_source&amp;gt;&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="f97ee8abfbc218db701614dc037ecbee79227cd2" translate="yes" xml:space="preserve">
          <source>If the tests ran correctly, you should see one failure corresponding to the test method we added, with this error:</source>
          <target state="translated">테스트가 올바르게 실행 된 경우 추가 한 테스트 방법에 해당하는 오류가 다음과 같이 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="7c48045bec5e6654cb74a0ee34255333da0859d4" translate="yes" xml:space="preserve">
          <source>If the user is logged in, execute the view normally. The view code is free to assume the user is logged in.</source>
          <target state="translated">사용자가 로그인 한 경우보기를 정상적으로 실행하십시오. 보기 코드는 사용자가 로그인 한 것으로 가정합니다.</target>
        </trans-unit>
        <trans-unit id="d79847842ff72b1b58e1003ad0d867e4b7832fce" translate="yes" xml:space="preserve">
          <source>If the user is logged in, is a staff member (&lt;code&gt;User.is_staff=True&lt;/code&gt;), and is active (&lt;code&gt;User.is_active=True&lt;/code&gt;), execute the view normally.</source>
          <target state="translated">사용자가 로그인하고 직원 ( &lt;code&gt;User.is_staff=True&lt;/code&gt; )이고 활성 상태 ( &lt;code&gt;User.is_active=True&lt;/code&gt; ) 인 경우보기를 정상적으로 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="a84a442ecadb3f93afb7b132ac6a3edff540cf78" translate="yes" xml:space="preserve">
          <source>If the user isn&amp;rsquo;t logged in, redirect to &lt;a href=&quot;../../ref/settings#std:setting-LOGIN_URL&quot;&gt;&lt;code&gt;settings.LOGIN_URL&lt;/code&gt;&lt;/a&gt;, passing the current absolute path in the query string. Example: &lt;code&gt;/accounts/login/?next=/polls/3/&lt;/code&gt;.</source>
          <target state="translated">사용자가 로그인하지 않은 경우 &lt;a href=&quot;../../ref/settings#std:setting-LOGIN_URL&quot;&gt; &lt;code&gt;settings.LOGIN_URL&lt;/code&gt; 로&lt;/a&gt; 리디렉션 하여 쿼리 문자열의 현재 절대 경로를 전달하십시오. 예 : &lt;code&gt;/accounts/login/?next=/polls/3/&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1dae3ed09b6ca9b76e7ec5b0d3c3054584ffd95a" translate="yes" xml:space="preserve">
          <source>If the value of &amp;ldquo;Date published&amp;rdquo; doesn&amp;rsquo;t match the time when you created the question in &lt;a href=&quot;tutorial01&quot;&gt;Tutorial 1&lt;/a&gt;, it probably means you forgot to set the correct value for the &lt;a href=&quot;../ref/settings#std:setting-TIME_ZONE&quot;&gt;&lt;code&gt;TIME_ZONE&lt;/code&gt;&lt;/a&gt; setting. Change it, reload the page and check that the correct value appears.</source>
          <target state="translated">&quot;Date publish&quot;값이 &lt;a href=&quot;tutorial01&quot;&gt;Tutorial 1&lt;/a&gt; 에서 질문을 작성한 시간과 일치하지 않으면 &lt;a href=&quot;../ref/settings#std:setting-TIME_ZONE&quot;&gt; &lt;code&gt;TIME_ZONE&lt;/code&gt; &lt;/a&gt; 설정에 올바른 값을 설정하지 않은 것입니다. 변경하고 페이지를 다시로드 한 후 올바른 값이 나타나는지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="6ec7d3427ae03d948878d8a5e1e5725c95509eed" translate="yes" xml:space="preserve">
          <source>If the value of &lt;code&gt;max_num&lt;/code&gt; is greater than the number of existing items in the initial data, up to &lt;code&gt;extra&lt;/code&gt; additional blank forms will be added to the formset, so long as the total number of forms does not exceed &lt;code&gt;max_num&lt;/code&gt;. For example, if &lt;code&gt;extra=2&lt;/code&gt; and &lt;code&gt;max_num=2&lt;/code&gt; and the formset is initialized with one &lt;code&gt;initial&lt;/code&gt; item, a form for the initial item and one blank form will be displayed.</source>
          <target state="translated">의 값 경우 &lt;code&gt;max_num&lt;/code&gt; 에 초기 데이터에서 기존 항목의 수까지보다 더 큰 &lt;code&gt;extra&lt;/code&gt; 의 formset에 추가됩니다 추가 빈 양식, 너무 오래 같은 초과하지 않는 형태의 총 수 &lt;code&gt;max_num&lt;/code&gt; . 예를 들어 &lt;code&gt;extra=2&lt;/code&gt; 및 &lt;code&gt;max_num=2&lt;/code&gt; 이고 양식 세트 가 하나의 &lt;code&gt;initial&lt;/code&gt; 항목으로 초기화되면 초기 항목에 대한 양식과 하나의 빈 양식이 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="1e45aed9df9aac2846d0bcfef80483bef9bd6ac8" translate="yes" xml:space="preserve">
          <source>If the value of &lt;code&gt;max_num&lt;/code&gt; is greater than the number of existing related objects, up to &lt;code&gt;extra&lt;/code&gt; additional blank forms will be added to the formset, so long as the total number of forms does not exceed &lt;code&gt;max_num&lt;/code&gt;:</source>
          <target state="translated">의 값 경우 &lt;code&gt;max_num&lt;/code&gt; 최대 기존의 관련 개체의 수보다 큰 경우 &lt;code&gt;extra&lt;/code&gt; 추가 빈 양식의 해당 formset에 추가됩니다 너무 오래 형태의 총 수를 초과하지 않는 &lt;code&gt;max_num&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="dda283897bebb404083b05a40ab1c2c6cb7b8001" translate="yes" xml:space="preserve">
          <source>If the value of a field is &lt;code&gt;None&lt;/code&gt;, an empty string, or an iterable without elements, Django will display &lt;code&gt;-&lt;/code&gt; (a dash). You can override this with &lt;a href=&quot;#django.contrib.admin.AdminSite.empty_value_display&quot;&gt;&lt;code&gt;AdminSite.empty_value_display&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">필드 값이 &lt;code&gt;None&lt;/code&gt; , 빈 문자열 또는 요소가없는 iterable 인 경우 Django는 &lt;code&gt;-&lt;/code&gt; (대시)를 표시합니다. &lt;a href=&quot;#django.contrib.admin.AdminSite.empty_value_display&quot;&gt; &lt;code&gt;AdminSite.empty_value_display&lt;/code&gt; &lt;/a&gt; 로이를 대체 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="2a6040be557d2f8f3ea8136a3c4eb78cc78f35eb" translate="yes" xml:space="preserve">
          <source>If the value of a parameter is &lt;code&gt;True&lt;/code&gt; (exactly &lt;code&gt;True&lt;/code&gt;, not just a true value), only the parameter name is added to the header.</source>
          <target state="translated">매개 변수의 값이 &lt;code&gt;True&lt;/code&gt; 인 경우 (정확한 값이 아니라 정확하게 &lt;code&gt;True&lt;/code&gt; ) 매개 변수 이름 만 헤더에 추가됩니다.</target>
        </trans-unit>
        <trans-unit id="5382b4646a0aea7fd71c163665e2667aa6200bdb" translate="yes" xml:space="preserve">
          <source>If the variable raises an exception when called, the exception will be propagated, unless the exception has an attribute &lt;code&gt;silent_variable_failure&lt;/code&gt; whose value is &lt;code&gt;True&lt;/code&gt;. If the exception &lt;em&gt;does&lt;/em&gt; have a &lt;code&gt;silent_variable_failure&lt;/code&gt; attribute whose value is &lt;code&gt;True&lt;/code&gt;, the variable will render as the value of the engine&amp;rsquo;s &lt;code&gt;string_if_invalid&lt;/code&gt; configuration option (an empty string, by default). Example:</source>
          <target state="translated">호출 될 때 변수에서 예외가 발생하면 예외에 값이 &lt;code&gt;True&lt;/code&gt; 인 &lt;code&gt;silent_variable_failure&lt;/code&gt; 속성이 없으면 예외가 전파됩니다 . 예외가 있다면 &lt;em&gt;않습니다&lt;/em&gt; 이 &lt;code&gt;silent_variable_failure&lt;/code&gt; 의 그 값 속성 &lt;code&gt;True&lt;/code&gt; , 변수는 엔진의 값으로 렌더링 &lt;code&gt;string_if_invalid&lt;/code&gt; 구성 옵션 (기본적으로 빈 문자열). 예:&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="1312957734ba11c680e8012938eacebc58dee1ff" translate="yes" xml:space="preserve">
          <source>If the variable you want to hide is also a function argument (e.g. &amp;lsquo;&lt;code&gt;user&lt;/code&gt;&amp;rsquo; in the following example), and if the decorated function has multiple decorators, then make sure to place &lt;code&gt;@sensitive_variables&lt;/code&gt; at the top of the decorator chain. This way it will also hide the function argument as it gets passed through the other decorators:</source>
          <target state="translated">숨길 변수가 함수 인수이기도 한 경우 (예 : 다음 예에서 ' &lt;code&gt;user&lt;/code&gt; ') 데코 레이팅 된 함수에 여러 데코레이터 가있는 경우 데코레이터 체인의 맨 위에 &lt;code&gt;@sensitive_variables&lt;/code&gt; 를 배치해야합니다 . 이렇게하면 다른 데코레이터를 통해 전달 될 때 함수 인수도 숨겨집니다.</target>
        </trans-unit>
        <trans-unit id="d4cc6c88236085ea8a9c1a17ca851862c50d53fd" translate="yes" xml:space="preserve">
          <source>If the view is accessed from a &lt;code&gt;GET&lt;/code&gt; request, an object list is returned in the response (using the &lt;code&gt;book_list.html&lt;/code&gt; template). But if the client issues a &lt;code&gt;HEAD&lt;/code&gt; request, the response has an empty body and the &lt;code&gt;Last-Modified&lt;/code&gt; header indicates when the most recent book was published. Based on this information, the client may or may not download the full object list.</source>
          <target state="translated">&lt;code&gt;GET&lt;/code&gt; 요청 에서보기에 액세스 하면 &lt;code&gt;book_list.html&lt;/code&gt; 템플리트를 사용하여 응답에 오브젝트 목록이 리턴됩니다 . 그러나 클라이언트가 &lt;code&gt;HEAD&lt;/code&gt; 요청을 발행 하면 응답에 빈 본문이 있으며 &lt;code&gt;Last-Modified&lt;/code&gt; 헤더는 가장 최근의 책이 출판 된시기를 나타냅니다. 이 정보를 기반으로 클라이언트는 전체 개체 목록을 다운로드하거나 다운로드하지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="525749ea81e916d0079819f9669b95d8583c62ff" translate="yes" xml:space="preserve">
          <source>If the view was called with a HTTP method it doesn&amp;rsquo;t support, this method is called instead.</source>
          <target state="translated">보기가 HTTP 메소드를 사용하여 호출 된 경우이를 지원하지 않고이 메소드가 대신 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="fe60eb379813b7555e5b0588046322369833bdf6" translate="yes" xml:space="preserve">
          <source>If there are a few pages on your site that should be available over HTTP, and not redirected to HTTPS, you can list regular expressions to match those URLs in the &lt;a href=&quot;settings#std:setting-SECURE_REDIRECT_EXEMPT&quot;&gt;&lt;code&gt;SECURE_REDIRECT_EXEMPT&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">사이트에 HTTP를 통해 사용할 수 있고 HTTPS로 리디렉션되지 않아야하는 몇 페이지가있는 경우 &lt;a href=&quot;settings#std:setting-SECURE_REDIRECT_EXEMPT&quot;&gt; &lt;code&gt;SECURE_REDIRECT_EXEMPT&lt;/code&gt; &lt;/a&gt; 설정 에서 해당 URL과 일치하는 정규식을 나열 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a06f663d9a920b6dd71a5fd7a5b30d2f53179a52" translate="yes" xml:space="preserve">
          <source>If there are a large number of pizzas, this queryset performs better than:</source>
          <target state="translated">피자가 많은 경우이 쿼리 셋은 다음보다 성능이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="58361dc72d9b28ac6f97a44739dee9fe240ef3e8" translate="yes" xml:space="preserve">
          <source>If there are any circular dependencies in the &lt;a href=&quot;../../ref/settings#std:setting-TEST_DEPENDENCIES&quot;&gt;&lt;code&gt;DEPENDENCIES&lt;/code&gt;&lt;/a&gt; definition, an &lt;a href=&quot;../../ref/exceptions#django.core.exceptions.ImproperlyConfigured&quot;&gt;&lt;code&gt;ImproperlyConfigured&lt;/code&gt;&lt;/a&gt; exception will be raised.</source>
          <target state="translated">&lt;a href=&quot;../../ref/settings#std:setting-TEST_DEPENDENCIES&quot;&gt; &lt;code&gt;DEPENDENCIES&lt;/code&gt; &lt;/a&gt; 정의 에 순환 종속성이 있으면 &lt;a href=&quot;../../ref/exceptions#django.core.exceptions.ImproperlyConfigured&quot;&gt; &lt;code&gt;ImproperlyConfigured&lt;/code&gt; &lt;/a&gt; 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="c15c84390ee375a9adefe2ee02e23a4311d73646" translate="yes" xml:space="preserve">
          <source>If there are any rings within this geometry that have not been closed, this routine will do so by adding the starting point to the end:</source>
          <target state="translated">이 형상 내에 닫히지 않은 링이있는 경우이 루틴은 시작점을 끝에 추가하여 수행합니다.</target>
        </trans-unit>
        <trans-unit id="036865303d893103f1a82fb50cc8915eb290e5a5" translate="yes" xml:space="preserve">
          <source>If there are foreseeable error conditions that may occur while running your action, you should gracefully inform the user of the problem. This means handling exceptions and using &lt;a href=&quot;index#django.contrib.admin.ModelAdmin.message_user&quot;&gt;&lt;code&gt;django.contrib.admin.ModelAdmin.message_user()&lt;/code&gt;&lt;/a&gt; to display a user friendly description of the problem in the response.</source>
          <target state="translated">조치를 실행하는 동안 발생할 수있는 예측 가능한 오류 조건이있는 경우 사용자에게 정상적으로 문제점을 알려야합니다. 이는 예외를 처리하고 &lt;a href=&quot;index#django.contrib.admin.ModelAdmin.message_user&quot;&gt; &lt;code&gt;django.contrib.admin.ModelAdmin.message_user()&lt;/code&gt; &lt;/a&gt; 를 사용 하여 응답에서 문제점에 대한 사용자 친화적 인 설명을 표시 함을 의미 합니다.</target>
        </trans-unit>
        <trans-unit id="951293bc34387f5cb268cf92d7536a2c32d0ad81" translate="yes" xml:space="preserve">
          <source>If there are nested namespaces, these steps are repeated for each part of the namespace until only the view name is unresolved. The view name will then be resolved into a URL in the namespace that has been found.</source>
          <target state="translated">중첩 된 네임 스페이스가있는 경우 뷰 이름 만 확인할 때까지 네임 스페이스의 각 부분에 대해이 단계가 반복됩니다. 그러면 뷰 이름이 찾은 네임 스페이스의 URL로 확인됩니다.</target>
        </trans-unit>
        <trans-unit id="018686731469965487e7387f2655be540539d013" translate="yes" xml:space="preserve">
          <source>If there are test failures, however, you&amp;rsquo;ll see full details about which tests failed:</source>
          <target state="translated">그러나 테스트 실패가 발생한 경우 실패한 테스트에 대한 자세한 내용이 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="33090b22c578cdbfc10a5466d23820158dc57c7e" translate="yes" xml:space="preserve">
          <source>If there is a current application defined, Django finds and returns the URL resolver for that instance. The current application can be specified with the &lt;code&gt;current_app&lt;/code&gt; argument to the &lt;a href=&quot;../../ref/urlresolvers#django.urls.reverse&quot;&gt;&lt;code&gt;reverse()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">현재 응용 프로그램이 정의되어 있으면 Django는 해당 인스턴스의 URL 확인자를 찾아 반환합니다. &lt;code&gt;current_app&lt;/code&gt; 인수를 사용하여 &lt;a href=&quot;../../ref/urlresolvers#django.urls.reverse&quot;&gt; &lt;code&gt;reverse()&lt;/code&gt; &lt;/a&gt; 함수에 현재 응용 프로그램을 지정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="cad92f90be1997903d0e603c48aaadf781898139" translate="yes" xml:space="preserve">
          <source>If there is no &lt;code&gt;default_app_config&lt;/code&gt;, Django uses the base &lt;a href=&quot;#django.apps.AppConfig&quot;&gt;&lt;code&gt;AppConfig&lt;/code&gt;&lt;/a&gt; class.</source>
          <target state="translated">&lt;code&gt;default_app_config&lt;/code&gt; 가 없으면 Django는 기본 &lt;a href=&quot;#django.apps.AppConfig&quot;&gt; &lt;code&gt;AppConfig&lt;/code&gt; &lt;/a&gt; 클래스를 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="b29aa4916d0907d63149e49df881a7730b345911" translate="yes" xml:space="preserve">
          <source>If there is no current application, Django looks for a default application instance. The default application instance is the instance that has an &lt;a href=&quot;#term-instance-namespace&quot;&gt;instance namespace&lt;/a&gt; matching the &lt;a href=&quot;#term-application-namespace&quot;&gt;application namespace&lt;/a&gt; (in this example, an instance of &lt;code&gt;polls&lt;/code&gt; called &lt;code&gt;'polls'&lt;/code&gt;).</source>
          <target state="translated">현재 애플리케이션이 없으면 Django는 기본 애플리케이션 인스턴스를 찾습니다. 기본 애플리케이션 인스턴스는 &lt;a href=&quot;#term-application-namespace&quot;&gt;애플리케이션 네임 &lt;/a&gt;&lt;a href=&quot;#term-instance-namespace&quot;&gt;스페이스와&lt;/a&gt; 일치 하는 인스턴스 네임 스페이스 가있는 인스턴스입니다 (이 예제에서는 &lt;code&gt;'polls'&lt;/code&gt; 라는 &lt;code&gt;polls&lt;/code&gt; 인스턴스 ).</target>
        </trans-unit>
        <trans-unit id="3196de7f2aa2fe23e2168314d2dfd5664d611802" translate="yes" xml:space="preserve">
          <source>If there is no current instance - say, if we were rendering a page somewhere else on the site - &lt;code&gt;'polls:index'&lt;/code&gt; will resolve to the last registered instance of &lt;code&gt;polls&lt;/code&gt;. Since there is no default instance (instance namespace of &lt;code&gt;'polls'&lt;/code&gt;), the last instance of &lt;code&gt;polls&lt;/code&gt; that is registered will be used. This would be &lt;code&gt;'publisher-polls'&lt;/code&gt; since it&amp;rsquo;s declared last in the &lt;code&gt;urlpatterns&lt;/code&gt;.</source>
          <target state="translated">현재 인스턴스가없는 경우, 예를 들어 사이트의 다른 곳에서 페이지를 렌더링하는 경우 &lt;code&gt;'polls:index'&lt;/code&gt; 는 마지막으로 등록 된 &lt;code&gt;polls&lt;/code&gt; 인스턴스로 해석됩니다 . 기본 인스턴스 (인스턴스 네임 스페이스 &lt;code&gt;'polls'&lt;/code&gt; ) 가 없으므로 등록 된 마지막 &lt;code&gt;polls&lt;/code&gt; 인스턴스 가 사용됩니다. 이것은 &lt;code&gt;urlpatterns&lt;/code&gt; 에서 마지막으로 선언 되었으므로 &lt;code&gt;'publisher-polls'&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="756f0b4c6a33908e3c22386f366fc70b18420a5b" translate="yes" xml:space="preserve">
          <source>If there is no default application instance, Django will pick the last deployed instance of the application, whatever its instance name may be.</source>
          <target state="translated">기본 애플리케이션 인스턴스가 없으면 Django는 인스턴스 이름에 관계없이 마지막으로 배포 된 애플리케이션 인스턴스를 선택합니다.</target>
        </trans-unit>
        <trans-unit id="a6bc41190ec33fed228db9ca9e2271ec22fd151d" translate="yes" xml:space="preserve">
          <source>If there is no headerlist stored, the page needs to be rebuilt, so this function returns &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">저장된 헤더 목록이 없으면 페이지를 다시 작성해야하므로이 함수는 &lt;code&gt;None&lt;/code&gt; 을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="b205d7e5d58e03b8f42ec69b13b892b65de8d30c" translate="yes" xml:space="preserve">
          <source>If there were also a default instance - i.e., an instance named &lt;code&gt;'polls'&lt;/code&gt; - the only change from above would be in the case where there is no current instance (the second item in the list above). In this case &lt;code&gt;'polls:index'&lt;/code&gt; would resolve to the index page of the default instance instead of the instance declared last in &lt;code&gt;urlpatterns&lt;/code&gt;.</source>
          <target state="translated">기본 인스턴스 (예 : &lt;code&gt;'polls'&lt;/code&gt; 라는 인스턴스) 가있는 경우 현재 인스턴스가없는 경우 (위의 목록에서 두 번째 항목) 위에서 변경 될 수 있습니다. 이 경우 &lt;code&gt;'polls:index'&lt;/code&gt; 는 &lt;code&gt;urlpatterns&lt;/code&gt; 에서 last로 선언 된 인스턴스 대신 기본 인스턴스의 색인 페이지로 해석됩니다 .</target>
        </trans-unit>
        <trans-unit id="1bc101bd73deeb1cf516281ef037ef748d979a37" translate="yes" xml:space="preserve">
          <source>If these aren&amp;rsquo;t enough to generate the SQL you need:</source>
          <target state="translated">이것으로 SQL을 생성하기에 충분하지 않으면 다음이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="5e71fd6c24627701d76d95f4ee851ac2352deca4" translate="yes" xml:space="preserve">
          <source>If these parameters already have the correct values, Django won&amp;rsquo;t set them for every new connection, which improves performance slightly. You can configure them directly in &lt;code&gt;postgresql.conf&lt;/code&gt; or more conveniently per database user with &lt;a href=&quot;https://www.postgresql.org/docs/current/sql-alterrole.html&quot;&gt;ALTER ROLE&lt;/a&gt;.</source>
          <target state="translated">이 파라미터들이 이미 올바른 값을 가지고 있다면 Django는 모든 새로운 연결에 대해 이들을 설정하지 않으므로 성능이 약간 향상됩니다. &lt;code&gt;postgresql.conf&lt;/code&gt; 에서 직접 또는 &lt;a href=&quot;https://www.postgresql.org/docs/current/sql-alterrole.html&quot;&gt;ALTER ROLE을&lt;/a&gt; 사용하여 데이터베이스 사용자별로 더 편리하게 구성 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="8d05d3185d1dac94d8dadaa8fa6fec4ba26f14ae" translate="yes" xml:space="preserve">
          <source>If this app&amp;rsquo;s URLconf is included into the project&amp;rsquo;s URLconf under a path such as this:</source>
          <target state="translated">이 앱의 URLconf가 다음과 같은 경로로 프로젝트의 URLconf에 포함 된 경우 :</target>
        </trans-unit>
        <trans-unit id="db3b489bf675bc83e9e833fb2c11bf0ec0e3584a" translate="yes" xml:space="preserve">
          <source>If this approach becomes too slow, you can add a &lt;code&gt;SearchVectorField&lt;/code&gt; to your model. You&amp;rsquo;ll need to keep it populated with triggers, for example, as described in the &lt;a href=&quot;https://www.postgresql.org/docs/current/textsearch-features.html#TEXTSEARCH-UPDATE-TRIGGERS&quot;&gt;PostgreSQL documentation&lt;/a&gt;. You can then query the field as if it were an annotated &lt;code&gt;SearchVector&lt;/code&gt;:</source>
          <target state="translated">이 접근 방식이 너무 느리면 &lt;code&gt;SearchVectorField&lt;/code&gt; 를 모델에 추가 할 수 있습니다 . 예를 들어 &lt;a href=&quot;https://www.postgresql.org/docs/current/textsearch-features.html#TEXTSEARCH-UPDATE-TRIGGERS&quot;&gt;PostgreSQL 설명서에&lt;/a&gt; 설명 된대로 트리거로 채워져 있어야합니다 . 그런 다음 주석이 달린 &lt;code&gt;SearchVector&lt;/code&gt; 인 것처럼 필드를 쿼리 할 수 ​​있습니다 .</target>
        </trans-unit>
        <trans-unit id="a0a2e48175c412228e4e7ff2cbf177425c036e1a" translate="yes" xml:space="preserve">
          <source>If this attribute is set to &lt;code&gt;True&lt;/code&gt;, a &lt;a href=&quot;../../ref/exceptions#django.core.exceptions.PermissionDenied&quot;&gt;&lt;code&gt;PermissionDenied&lt;/code&gt;&lt;/a&gt; exception is raised when the conditions are not met. When &lt;code&gt;False&lt;/code&gt; (the default), anonymous users are redirected to the login page.</source>
          <target state="translated">이 속성이 설정되어있는 경우 &lt;code&gt;True&lt;/code&gt; 를 하는 &lt;a href=&quot;../../ref/exceptions#django.core.exceptions.PermissionDenied&quot;&gt; &lt;code&gt;PermissionDenied&lt;/code&gt; &lt;/a&gt; 조건이 충족되지 않을 때 예외가 발생합니다. 때 &lt;code&gt;False&lt;/code&gt; (기본), 익명 사용자는 로그인 페이지로 리디렉션됩니다.</target>
        </trans-unit>
        <trans-unit id="ea6a57da3a6226d105def8abb17cde5efd3edbc8" translate="yes" xml:space="preserve">
          <source>If this behavior is problematic (such as when using signals to send an email whenever a model is saved), pass a unique identifier as the &lt;code&gt;dispatch_uid&lt;/code&gt; argument to identify your receiver function. This identifier will usually be a string, although any hashable object will suffice. The end result is that your receiver function will only be bound to the signal once for each unique &lt;code&gt;dispatch_uid&lt;/code&gt; value:</source>
          <target state="translated">이 동작에 문제가있는 경우 (예 : 신호를 사용하여 모델을 저장할 때마다 이메일을 보내는 경우) &lt;code&gt;dispatch_uid&lt;/code&gt; 인수 로 고유 식별자를 전달 하여 수신자 기능을 식별하십시오. 이 식별자는 일반적으로 문자열이지만 해시 가능한 객체이면 충분합니다. 결과적으로 수신기 함수는 각 독특한 &lt;code&gt;dispatch_uid&lt;/code&gt; 값 에 대해 한 번만 신호에 바인딩됩니다 .</target>
        </trans-unit>
        <trans-unit id="168754e6d80f99f11f4410d20c99b6a0e1c4fca4" translate="yes" xml:space="preserve">
          <source>If this exception is raised during the execution of a management command from a command line console, it will be caught and turned into a nicely-printed error message to the appropriate output stream (i.e., stderr); as a result, raising this exception (with a sensible description of the error) is the preferred way to indicate that something has gone wrong in the execution of a command.</source>
          <target state="translated">명령 행 콘솔에서 관리 명령을 실행하는 동안이 예외가 발생하면 해당 출력 스트림 (예 : stderr)에 대해 잘 인쇄 된 오류 메시지가 표시됩니다. 결과적으로,이 예외를 발생시키는 것은 (오류에 대한 합리적인 설명과 함께) 명령 실행에 문제가 있음을 나타내는 선호되는 방법입니다.</target>
        </trans-unit>
        <trans-unit id="5121ccc468599203cdf2f41680528f512f5238b0" translate="yes" xml:space="preserve">
          <source>If this is set to &lt;code&gt;False&lt;/code&gt;, accessing a related object that doesn&amp;rsquo;t exist will raise its &lt;code&gt;DoesNotExist&lt;/code&gt; exception.</source>
          <target state="translated">이것이 &lt;code&gt;False&lt;/code&gt; 로 설정되면 존재하지 않는 관련 개체에 액세스하면 &lt;code&gt;DoesNotExist&lt;/code&gt; 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="2d8f6dac00928c49d28b754a31e0c9229145c79e" translate="yes" xml:space="preserve">
          <source>If this is your first time using Django, you&amp;rsquo;ll have to take care of some initial setup. Namely, you&amp;rsquo;ll need to auto-generate some code that establishes a Django &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/glossary/#term-project&quot;&gt;project&lt;/a&gt; &amp;ndash; a collection of settings for an instance of Django, including database configuration, Django-specific options and application-specific settings.</source>
          <target state="translated">Django를 처음 사용하는 경우 초기 설정을 처리해야합니다. 즉, 데이터베이스 구성, 장고 관련 옵션 및 응용 프로그램 별 설정을 포함하여 장고 인스턴스에 대한 설정 모음 인 장고 &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/glossary/#term-project&quot;&gt;프로젝트&lt;/a&gt; 를 설정하는 일부 코드를 자동 생성해야합니다 .</target>
        </trans-unit>
        <trans-unit id="be1b7e4acd8d0cb9dde67da29afd40808b1e50d6" translate="yes" xml:space="preserve">
          <source>If this isn&amp;rsquo;t given or is &lt;code&gt;None&lt;/code&gt;, you&amp;rsquo;ll get operating-system dependent behavior. On most platforms, temporary files will have a mode of &lt;code&gt;0o600&lt;/code&gt;, and files saved from memory will be saved using the system&amp;rsquo;s standard umask.</source>
          <target state="translated">이것이 제공되지 않거나 &lt;code&gt;None&lt;/code&gt; 이면 운영 체제에 따라 달라집니다. 대부분의 플랫폼에서 임시 파일의 모드는 &lt;code&gt;0o600&lt;/code&gt; 이며 메모리에서 저장된 파일은 시스템의 표준 umask를 사용하여 저장됩니다.</target>
        </trans-unit>
        <trans-unit id="f463269eb88c1b3ee3a234d7c03dfce4134a153f" translate="yes" xml:space="preserve">
          <source>If this isn&amp;rsquo;t given, Django will use &lt;a href=&quot;#django.db.models.Options.verbose_name&quot;&gt;&lt;code&gt;verbose_name&lt;/code&gt;&lt;/a&gt; + &lt;code&gt;&quot;s&quot;&lt;/code&gt;.</source>
          <target state="translated">이것이 주어지지 않으면 Django는 &lt;a href=&quot;#django.db.models.Options.verbose_name&quot;&gt; &lt;code&gt;verbose_name&lt;/code&gt; &lt;/a&gt; + &lt;code&gt;&quot;s&quot;&lt;/code&gt; 를 사용 합니다.</target>
        </trans-unit>
        <trans-unit id="73b98905cd565580c0b7cdd5b5b3c194b7edc1e0" translate="yes" xml:space="preserve">
          <source>If this isn&amp;rsquo;t given, Django will use a munged version of the class name: &lt;code&gt;CamelCase&lt;/code&gt; becomes &lt;code&gt;camel case&lt;/code&gt;.</source>
          <target state="translated">이가 주어지지 않은 경우, 장고 클래스 이름의 munged 버전을 사용합니다 : &lt;code&gt;CamelCase&lt;/code&gt; 된다 &lt;code&gt;camel case&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ee5e3c28a977fe38b4bf893b8d5bd1cfcc581da9" translate="yes" xml:space="preserve">
          <source>If this isn&amp;rsquo;t provided, the Django admin will use the model&amp;rsquo;s default ordering.</source>
          <target state="translated">이를 제공하지 않으면 Django 관리자가 모델의 기본 순서를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="204cd62fbe95eddcc429e1cf499ecc20b6269794" translate="yes" xml:space="preserve">
          <source>If this last CSS definition were to be rendered, it would become the following HTML:</source>
          <target state="translated">이 마지막 CSS 정의가 렌더링되면 다음 HTML이됩니다.</target>
        </trans-unit>
        <trans-unit id="03956128530b9f0fcadffe8423761387cbfdf376" translate="yes" xml:space="preserve">
          <source>If this looks correct, run &lt;a href=&quot;../../django-admin#django-admin-migrate&quot;&gt;&lt;code&gt;migrate&lt;/code&gt;&lt;/a&gt; to create this table in the database:</source>
          <target state="translated">올바르게 표시되면 &lt;a href=&quot;../../django-admin#django-admin-migrate&quot;&gt; &lt;code&gt;migrate&lt;/code&gt; &lt;/a&gt; 를 실행 하여 데이터베이스에이 테이블을 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="214efc0b3c62bb58b19ca86ac2cf1be69388e8d4" translate="yes" xml:space="preserve">
          <source>If this method is defined on a storage, it&amp;rsquo;s called by the &lt;a href=&quot;#django-admin-collectstatic&quot;&gt;&lt;code&gt;collectstatic&lt;/code&gt;&lt;/a&gt; management command after each run and gets passed the local storages and paths of found files as a dictionary, as well as the command line options. It yields tuples of three values: &lt;code&gt;original_path, processed_path, processed&lt;/code&gt;. The path values are strings and &lt;code&gt;processed&lt;/code&gt; is a boolean indicating whether or not the value was post-processed, or an exception if post-processing failed.</source>
          <target state="translated">이 메소드가 스토리지에 정의 된 경우, 각 실행 후에 &lt;a href=&quot;#django-admin-collectstatic&quot;&gt; &lt;code&gt;collectstatic&lt;/code&gt; &lt;/a&gt; 관리 명령에 의해 호출되며 명령 행 옵션뿐만 아니라 로컬 스토리지 및 찾은 파일의 경로를 사전으로 전달합니다. &lt;code&gt;original_path, processed_path, processed&lt;/code&gt; 세 값의 튜플을 생성 합니다 . 경로 값은 문자열이며 &lt;code&gt;processed&lt;/code&gt; 는 값이 사후 처리되었는지 여부를 나타내는 부울이거나 사후 처리에 실패한 경우 예외입니다.</target>
        </trans-unit>
        <trans-unit id="78f9e31a35c14f187c486666943c82fca263c677" translate="yes" xml:space="preserve">
          <source>If this option is provided, models are also created for database views.</source>
          <target state="translated">이 옵션이 제공되면 데이터베이스보기에 대한 모델도 작성됩니다.</target>
        </trans-unit>
        <trans-unit id="d949b49e534243e5950667398078494f92cad676" translate="yes" xml:space="preserve">
          <source>If this option is provided, models are also created for partitions.</source>
          <target state="translated">이 옵션이 제공되면 파티션에 대한 모델도 작성됩니다.</target>
        </trans-unit>
        <trans-unit id="cf5933056c3c4a4bab36f59eaaa0e7ba423fd575" translate="yes" xml:space="preserve">
          <source>If this processor is enabled, every &lt;code&gt;RequestContext&lt;/code&gt; will contain a variable &lt;code&gt;MEDIA_URL&lt;/code&gt;, providing the value of the &lt;a href=&quot;../settings#std:setting-MEDIA_URL&quot;&gt;&lt;code&gt;MEDIA_URL&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">이 프로세서가 사용 가능한 경우 모든 &lt;code&gt;RequestContext&lt;/code&gt; 는 &lt;a href=&quot;../settings#std:setting-MEDIA_URL&quot;&gt; &lt;code&gt;MEDIA_URL&lt;/code&gt; &lt;/a&gt; 설정 값을 제공 하는 변수 &lt;code&gt;MEDIA_URL&lt;/code&gt; 을 포함 합니다.</target>
        </trans-unit>
        <trans-unit id="c3f669b44318076a8ac745b45b0e2b57ced4c0dd" translate="yes" xml:space="preserve">
          <source>If this processor is enabled, every &lt;code&gt;RequestContext&lt;/code&gt; will contain a variable &lt;code&gt;STATIC_URL&lt;/code&gt;, providing the value of the &lt;a href=&quot;../settings#std:setting-STATIC_URL&quot;&gt;&lt;code&gt;STATIC_URL&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">이 프로세서를 사용하면 모든 &lt;code&gt;RequestContext&lt;/code&gt; 에 &lt;a href=&quot;../settings#std:setting-STATIC_URL&quot;&gt; &lt;code&gt;STATIC_URL&lt;/code&gt; &lt;/a&gt; 설정 값을 제공 하는 변수 &lt;code&gt;STATIC_URL&lt;/code&gt; 이 포함됩니다 .</target>
        </trans-unit>
        <trans-unit id="b3627ab80c4912ed55e04ec73d8095f9410c0c92" translate="yes" xml:space="preserve">
          <source>If this processor is enabled, every &lt;code&gt;RequestContext&lt;/code&gt; will contain a variable &lt;code&gt;TIME_ZONE&lt;/code&gt;, providing the name of the currently active time zone.</source>
          <target state="translated">이 프로세서가 사용 가능한 경우, 모든 &lt;code&gt;RequestContext&lt;/code&gt; 는 현재 활성 시간대의 이름을 제공 하는 변수 &lt;code&gt;TIME_ZONE&lt;/code&gt; 을 포함합니다 .</target>
        </trans-unit>
        <trans-unit id="e14c9efdfe0e83e3c1193bc7da7c91988d833298" translate="yes" xml:space="preserve">
          <source>If this processor is enabled, every &lt;code&gt;RequestContext&lt;/code&gt; will contain a variable &lt;code&gt;request&lt;/code&gt;, which is the current &lt;a href=&quot;../request-response#django.http.HttpRequest&quot;&gt;&lt;code&gt;HttpRequest&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 프로세서는, 사용 가능한 경우, 모든 &lt;code&gt;RequestContext&lt;/code&gt; 는 변수 포함 &lt;code&gt;request&lt;/code&gt; 전류이며, &lt;a href=&quot;../request-response#django.http.HttpRequest&quot;&gt; &lt;code&gt;HttpRequest&lt;/code&gt; 를이&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="dfffb710a2c53706e240b5d6768b0976050feb4c" translate="yes" xml:space="preserve">
          <source>If this processor is enabled, every &lt;code&gt;RequestContext&lt;/code&gt; will contain these two variables &amp;ndash; but only if your &lt;a href=&quot;../settings#std:setting-DEBUG&quot;&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;/a&gt; setting is set to &lt;code&gt;True&lt;/code&gt; and the request&amp;rsquo;s IP address (&lt;code&gt;request.META['REMOTE_ADDR']&lt;/code&gt;) is in the &lt;a href=&quot;../settings#std:setting-INTERNAL_IPS&quot;&gt;&lt;code&gt;INTERNAL_IPS&lt;/code&gt;&lt;/a&gt; setting:</source>
          <target state="translated">이 프로세서가 사용 가능한 경우, 모든 &lt;code&gt;RequestContext&lt;/code&gt; 는이 두 변수를 포함하지만 &lt;a href=&quot;../settings#std:setting-DEBUG&quot;&gt; &lt;code&gt;DEBUG&lt;/code&gt; &lt;/a&gt; 설정이 &lt;code&gt;True&lt;/code&gt; 로 설정되고 요청의 IP 주소 ( &lt;code&gt;request.META['REMOTE_ADDR']&lt;/code&gt; )가 &lt;a href=&quot;../settings#std:setting-INTERNAL_IPS&quot;&gt; &lt;code&gt;INTERNAL_IPS&lt;/code&gt; &lt;/a&gt; 설정 에있는 경우에만 해당됩니다 .</target>
        </trans-unit>
        <trans-unit id="5f1b3b594560029b6edef85f4752d5ee49a66bb6" translate="yes" xml:space="preserve">
          <source>If this processor is enabled, every &lt;code&gt;RequestContext&lt;/code&gt; will contain these two variables:</source>
          <target state="translated">이 프로세서를 사용하면 모든 &lt;code&gt;RequestContext&lt;/code&gt; 에 다음 두 변수가 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="6c99cf696c7be10586d5d490d5e348ad6994d715" translate="yes" xml:space="preserve">
          <source>If this processor is enabled, every &lt;code&gt;RequestContext&lt;/code&gt; will contain these variables:</source>
          <target state="translated">이 프로세서를 사용하면 모든 &lt;code&gt;RequestContext&lt;/code&gt; 에 다음 변수가 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="74bf18d2eb713de82935d180fe41cd27d0c61d5c" translate="yes" xml:space="preserve">
          <source>If this still isn&amp;rsquo;t a good match, you can manually set the name of the context variable. The &lt;code&gt;context_object_name&lt;/code&gt; attribute on a generic view specifies the context variable to use:</source>
          <target state="translated">그래도 일치하지 않으면 컨텍스트 변수의 이름을 수동으로 설정할 수 있습니다. 일반보기 의 &lt;code&gt;context_object_name&lt;/code&gt; 속성은 사용할 컨텍스트 변수를 지정합니다.</target>
        </trans-unit>
        <trans-unit id="111885105b9365941fb05a9bc35108884dfcc593" translate="yes" xml:space="preserve">
          <source>If this value starts with a forward slash (&lt;code&gt;'/'&lt;/code&gt;) and you&amp;rsquo;re using MySQL, MySQL will connect via a Unix socket to the specified socket. For example:</source>
          <target state="translated">이 값이 슬래시 ( &lt;code&gt;'/'&lt;/code&gt; )로 시작하고 MySQL을 사용하는 경우 MySQL은 Unix 소켓을 통해 지정된 소켓에 연결됩니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="687f9e38edf81cd2d25145c7b1294f723a108558" translate="yes" xml:space="preserve">
          <source>If this variable isn&amp;rsquo;t set, the default &lt;code&gt;asgi.py&lt;/code&gt; sets it to &lt;code&gt;mysite.settings&lt;/code&gt;, where &lt;code&gt;mysite&lt;/code&gt; is the name of your project.</source>
          <target state="translated">이 변수가 설정되지 않은 경우, 기본 &lt;code&gt;asgi.py&lt;/code&gt; 은 로 설정 &lt;code&gt;mysite.settings&lt;/code&gt; , &lt;code&gt;mysite&lt;/code&gt; 프로젝트의 이름입니다.</target>
        </trans-unit>
        <trans-unit id="7763646c9a13213d2e42106763a322d405a3bd97" translate="yes" xml:space="preserve">
          <source>If this variable isn&amp;rsquo;t set, the default &lt;code&gt;wsgi.py&lt;/code&gt; sets it to &lt;code&gt;mysite.settings&lt;/code&gt;, where &lt;code&gt;mysite&lt;/code&gt; is the name of your project. That&amp;rsquo;s how &lt;a href=&quot;../../../ref/django-admin#django-admin-runserver&quot;&gt;&lt;code&gt;runserver&lt;/code&gt;&lt;/a&gt; discovers the default settings file by default.</source>
          <target state="translated">이 변수가 설정되지 않은 경우, 기본 &lt;code&gt;wsgi.py&lt;/code&gt; 은 로 설정 &lt;code&gt;mysite.settings&lt;/code&gt; , &lt;code&gt;mysite&lt;/code&gt; 프로젝트의 이름입니다. 이것이 &lt;a href=&quot;../../../ref/django-admin#django-admin-runserver&quot;&gt; &lt;code&gt;runserver&lt;/code&gt; &lt;/a&gt; 가 기본적으로 기본 설정 파일을 발견하는 방법 입니다.</target>
        </trans-unit>
        <trans-unit id="f5989aedec02f4ad2eba63dbf7a594f3d1537d24" translate="yes" xml:space="preserve">
          <source>If those conditions are met, Django will email the users listed in the &lt;a href=&quot;../ref/settings#std:setting-MANAGERS&quot;&gt;&lt;code&gt;MANAGERS&lt;/code&gt;&lt;/a&gt; setting whenever your code raises a 404 and the request has a referer. It doesn&amp;rsquo;t bother to email for 404s that don&amp;rsquo;t have a referer &amp;ndash; those are usually people typing in broken URLs or broken Web bots. It also ignores 404s when the referer is equal to the requested URL, since this behavior is from broken Web bots too.</source>
          <target state="translated">이러한 조건이 충족되면 Django는 코드가 404를 제기하고 요청에 참조자가있을 때마다 &lt;a href=&quot;../ref/settings#std:setting-MANAGERS&quot;&gt; &lt;code&gt;MANAGERS&lt;/code&gt; &lt;/a&gt; 설정에 나열된 사용자에게 이메일을 보냅니다. 추천자가없는 404에 대해서는 이메일을 보내지 않아도됩니다. 일반적으로 깨진 URL 또는 깨진 웹 봇을 입력하는 사람들입니다. 또한 리퍼러가 요청 된 URL과 동일한 경우 404를 무시합니다.이 동작은 깨진 웹 봇에서도 발생하기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="a73c5cb2486718bdc78ebe8a3caef6b14a81e74a" translate="yes" xml:space="preserve">
          <source>If turning this to &lt;code&gt;True&lt;/code&gt; causes infinite redirects, it probably means your site is running behind a proxy and can&amp;rsquo;t tell which requests are secure and which are not. Your proxy likely sets a header to indicate secure requests; you can correct the problem by finding out what that header is and configuring the &lt;a href=&quot;#std:setting-SECURE_PROXY_SSL_HEADER&quot;&gt;&lt;code&gt;SECURE_PROXY_SSL_HEADER&lt;/code&gt;&lt;/a&gt; setting accordingly.</source>
          <target state="translated">이 값을 &lt;code&gt;True&lt;/code&gt; 로 설정 하면 무한 리디렉션 이 발생하여 사이트가 프록시 뒤에서 실행 중이며 어떤 요청이 안전하고 안전하지 않은지 알 수 없습니다. 프록시는 보안 요청을 나타 내기 위해 헤더를 설정합니다. 해당 헤더가 무엇인지 확인하고 그에 따라 &lt;a href=&quot;#std:setting-SECURE_PROXY_SSL_HEADER&quot;&gt; &lt;code&gt;SECURE_PROXY_SSL_HEADER&lt;/code&gt; &lt;/a&gt; 설정을 구성하여 문제를 해결할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="6481e6950ed002a13f7a54255de0e49329f79ddf" translate="yes" xml:space="preserve">
          <source>If two Python threads execute the code in the first example above, one thread could retrieve, increment, and save a field&amp;rsquo;s value after the other has retrieved it from the database. The value that the second thread saves will be based on the original value; the work of the first thread will be lost.</source>
          <target state="translated">위의 첫 번째 예제에서 두 개의 Python 스레드가 코드를 실행하는 경우 한 스레드는 데이터베이스에서 다른 스레드가 필드를 검색 한 후 필드 값을 검색, 증분 및 저장할 수 있습니다. 두 번째 스레드가 저장하는 값은 원래 값을 기반으로합니다. 첫 번째 스레드의 작업이 손실됩니다.</target>
        </trans-unit>
        <trans-unit id="5e64204f76516c2278e4b64d558fec189d6cf43f" translate="yes" xml:space="preserve">
          <source>If unspecified, the default &lt;code&gt;timeout&lt;/code&gt; will be the one provided by &lt;a href=&quot;https://docs.python.org/3/library/socket.html#socket.getdefaulttimeout&quot;&gt;&lt;code&gt;socket.getdefaulttimeout()&lt;/code&gt;&lt;/a&gt;, which defaults to &lt;code&gt;None&lt;/code&gt; (no timeout).</source>
          <target state="translated">지정되지 않은 경우 기본 &lt;code&gt;timeout&lt;/code&gt; 는 &lt;a href=&quot;https://docs.python.org/3/library/socket.html#socket.getdefaulttimeout&quot;&gt; &lt;code&gt;socket.getdefaulttimeout()&lt;/code&gt; &lt;/a&gt; 에서 제공하는 시간 초과 이며 기본값은 &lt;code&gt;None&lt;/code&gt; (시간 초과 없음 )입니다.</target>
        </trans-unit>
        <trans-unit id="60e13a5dc7aa8445a725b41528f2e1f91c6d315c" translate="yes" xml:space="preserve">
          <source>If updating a large number of columns in a large number of rows, the SQL generated can be very large. Avoid this by specifying a suitable &lt;code&gt;batch_size&lt;/code&gt;.</source>
          <target state="translated">많은 수의 행에서 많은 수의 열을 업데이트하는 경우 생성 된 SQL이 매우 클 수 있습니다. 적절한 &lt;code&gt;batch_size&lt;/code&gt; 를 지정하여이를 피하십시오 .</target>
        </trans-unit>
        <trans-unit id="9de1d7c145e3bfbd1da3b57f9e69810dee560a48" translate="yes" xml:space="preserve">
          <source>If used with &lt;code&gt;MIDDLEWARE_CLASSES&lt;/code&gt;, the &lt;code&gt;__call__()&lt;/code&gt; method will never be used; Django calls &lt;code&gt;process_request()&lt;/code&gt; and &lt;code&gt;process_response()&lt;/code&gt; directly.</source>
          <target state="translated">&lt;code&gt;MIDDLEWARE_CLASSES&lt;/code&gt; 와 함께 사용 하면 &lt;code&gt;__call__()&lt;/code&gt; 메소드는 사용되지 않습니다. Django는 &lt;code&gt;process_request()&lt;/code&gt; 및 &lt;code&gt;process_response()&lt;/code&gt; 직접 호출 합니다.</target>
        </trans-unit>
        <trans-unit id="e3318f562b136e880f0fe72349d17ab0bbe42fba" translate="yes" xml:space="preserve">
          <source>If used with a numeric integer argument, &lt;code&gt;floatformat&lt;/code&gt; rounds a number to that many decimal places. For example:</source>
          <target state="translated">숫자 정수 인수와 함께 사용되는 경우 &lt;code&gt;floatformat&lt;/code&gt; 은 숫자를 소수점 이하 자릿수로 반올림합니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="b36b4a6b3834f5db697a34dce30549b123363b8c" translate="yes" xml:space="preserve">
          <source>If using a binary package of GEOS (e.g., on Ubuntu), you may need to &lt;a href=&quot;index#binutils&quot;&gt;Install binutils&lt;/a&gt;.</source>
          <target state="translated">GEOS 바이너리 패키지 (예 : Ubuntu)를 사용하는 경우 &lt;a href=&quot;index#binutils&quot;&gt;binutils&lt;/a&gt; 를 설치 해야 합니다 .</target>
        </trans-unit>
        <trans-unit id="77e5c9f7d7653d5f758d827f9f9d8be93ef993b1" translate="yes" xml:space="preserve">
          <source>If using an SQLite in-memory database with SQLite, &lt;a href=&quot;https://www.sqlite.org/sharedcache.html&quot;&gt;shared cache&lt;/a&gt; is enabled, so you can write tests with ability to share the database between threads.</source>
          <target state="translated">SQLite와 함께 SQLite 인 메모리 데이터베이스를 사용하는 경우 &lt;a href=&quot;https://www.sqlite.org/sharedcache.html&quot;&gt;공유 캐시&lt;/a&gt; 가 활성화되므로 스레드간에 데이터베이스를 공유 할 수있는 테스트를 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="71eff97e42ab86eb5151370fe1181333a128682b" translate="yes" xml:space="preserve">
          <source>If value evaluates to &lt;code&gt;False&lt;/code&gt;, uses the given default. Otherwise, uses the value.</source>
          <target state="translated">value가 &lt;code&gt;False&lt;/code&gt; 로 평가 되면 지정된 기본값을 사용합니다. 그렇지 않으면 값을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="f611765f2d320e927111295d6c9695093483fb31" translate="yes" xml:space="preserve">
          <source>If we arrive at this view with a &lt;code&gt;GET&lt;/code&gt; request, it will create an empty form instance and place it in the template context to be rendered. This is what we can expect to happen the first time we visit the URL.</source>
          <target state="translated">&lt;code&gt;GET&lt;/code&gt; 요청 으로이보기에 도달 하면 빈 양식 인스턴스가 작성되어 템플리트 컨텍스트에 렌더링됩니다. 이것이 처음 URL을 방문 할 때 발생할 수있는 것입니다.</target>
        </trans-unit>
        <trans-unit id="0a8a851d0367ffe29323b90c503c215f8aa8f5d9" translate="yes" xml:space="preserve">
          <source>If we connected a handler like this:</source>
          <target state="translated">우리가 이런 핸들러를 연결했다면 :</target>
        </trans-unit>
        <trans-unit id="406383748435b9b983e4fe62090c8c234445f370" translate="yes" xml:space="preserve">
          <source>If we delete a &lt;code&gt;Publication&lt;/code&gt;, its &lt;code&gt;Articles&lt;/code&gt; won&amp;rsquo;t be able to access it:</source>
          <target state="translated">&lt;code&gt;Publication&lt;/code&gt; 을 삭제하면 해당 &lt;code&gt;Articles&lt;/code&gt; 에서 해당 발행물 에 액세스 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="3d341e594a575849b6069ae86fb05e49f3983a60" translate="yes" xml:space="preserve">
          <source>If we delete an &lt;code&gt;Article&lt;/code&gt;, its &lt;code&gt;Publications&lt;/code&gt; won&amp;rsquo;t be able to access it:</source>
          <target state="translated">&lt;code&gt;Article&lt;/code&gt; 를 삭제하면 해당 &lt;code&gt;Publications&lt;/code&gt; 에서 기사 에 액세스 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="c2e7f5f3fb7b52337975a488b9c8164eab92ebfb" translate="yes" xml:space="preserve">
          <source>If we had neglected to pass in the current &lt;code&gt;context.autoescape&lt;/code&gt; value to our new &lt;code&gt;Context&lt;/code&gt; in this example, the results would have &lt;em&gt;always&lt;/em&gt; been automatically escaped, which may not be the desired behavior if the template tag is used inside a &lt;a href=&quot;../ref/templates/builtins#std:templatetag-autoescape&quot;&gt;&lt;code&gt;{% autoescape off %}&lt;/code&gt;&lt;/a&gt; block.</source>
          <target state="translated">이 예제에서 현재 &lt;code&gt;context.autoescape&lt;/code&gt; 값을 새 &lt;code&gt;Context&lt;/code&gt; 에 전달 하지 않은 경우 결과는 &lt;em&gt;항상&lt;/em&gt; 자동으로 이스케이프되었을 것입니다 . 템플릿 태그가 &lt;a href=&quot;../ref/templates/builtins#std:templatetag-autoescape&quot;&gt; &lt;code&gt;{% autoescape off %}&lt;/code&gt; &lt;/a&gt; 내부에서 사용되는 경우 원하는 동작이 아닐 수 있습니다. } 블록.</target>
        </trans-unit>
        <trans-unit id="ffb90e72c570b70af963c6da1122122d334c0352" translate="yes" xml:space="preserve">
          <source>If we want to write a class-based view that responds only to &lt;code&gt;POST&lt;/code&gt;, we&amp;rsquo;ll subclass &lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.View&quot;&gt;&lt;code&gt;View&lt;/code&gt;&lt;/a&gt; and write a &lt;code&gt;post()&lt;/code&gt; method in the subclass. However if we want our processing to work on a particular object, identified from the URL, we&amp;rsquo;ll want the functionality provided by &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin&quot;&gt;&lt;code&gt;SingleObjectMixin&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;POST&lt;/code&gt; 에만 응답하는 클래스 기반 뷰를 작성하려면 &lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.View&quot;&gt; &lt;code&gt;View&lt;/code&gt; 를&lt;/a&gt; 서브 클래스 화 하고 서브 클래스 에 &lt;code&gt;post()&lt;/code&gt; 메소드를 작성합니다. 그러나 URL에서 식별 된 특정 객체에서 처리를 수행하려면 &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin&quot;&gt; &lt;code&gt;SingleObjectMixin&lt;/code&gt; 에서&lt;/a&gt; 제공하는 기능이 필요합니다 .</target>
        </trans-unit>
        <trans-unit id="f9670d8eca365c2fbb8bf2e17c3f35929328311b" translate="yes" xml:space="preserve">
          <source>If we wanted to add a tool to the change list view for only a specific model named &amp;lsquo;Page&amp;rsquo;, we would copy that same file to the &lt;code&gt;templates/admin/my_app/page&lt;/code&gt; directory of our project.</source>
          <target state="translated">'Page'라는 특정 모델의 변경 목록보기에 도구를 추가하려는 경우 동일한 파일을 프로젝트 의 &lt;code&gt;templates/admin/my_app/page&lt;/code&gt; 디렉토리에 복사합니다 .</target>
        </trans-unit>
        <trans-unit id="6bd7027efcdd2746450164bec58ed7a7c2bb113c" translate="yes" xml:space="preserve">
          <source>If we wanted to change our previous query to get the discount based on how long the &lt;code&gt;Client&lt;/code&gt; has been with us, we could do so using lookups:</source>
          <target state="translated">우리는 시간에 따른 할인을 받으실 수 있습니다 이전 쿼리 변경을 원했습니다 경우 &lt;code&gt;Client&lt;/code&gt; 우리와 함께하고있다, 우리는 조회를 사용하여 그렇게 할 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="424f525a9d69de5a035589bbd0105ee23eb2ed5c" translate="yes" xml:space="preserve">
          <source>If you &lt;a href=&quot;https://docs.python.org/3/library/pickle.html#module-pickle&quot;&gt;&lt;code&gt;pickle&lt;/code&gt;&lt;/a&gt; a &lt;code&gt;QuerySet&lt;/code&gt;, this will force all the results to be loaded into memory prior to pickling. Pickling is usually used as a precursor to caching and when the cached queryset is reloaded, you want the results to already be present and ready for use (reading from the database can take some time, defeating the purpose of caching). This means that when you unpickle a &lt;code&gt;QuerySet&lt;/code&gt;, it contains the results at the moment it was pickled, rather than the results that are currently in the database.</source>
          <target state="translated">당신이 경우 &lt;a href=&quot;https://docs.python.org/3/library/pickle.html#module-pickle&quot;&gt; &lt;code&gt;pickle&lt;/code&gt; &lt;/a&gt; &lt;code&gt;QuerySet&lt;/code&gt; ,이 모든 결과는 산 세척하기 전에 메모리에로드 강제됩니다. 피클 링은 일반적으로 캐싱의 선구자로 사용되며 캐시 된 쿼리 집합을 다시로드 할 때 결과가 이미 존재하고 사용할 준비가되기를 원합니다 (데이터베이스에서 읽는 데 시간이 걸릴 수 있으므로 캐싱의 목적을 무시 함). 이는 &lt;code&gt;QuerySet&lt;/code&gt; 을 선택 해제 할 때 현재 데이터베이스에있는 결과가 아니라 선택되는 순간의 결과를 포함 한다는 것을 의미 합니다.</target>
        </trans-unit>
        <trans-unit id="c976c50b35c8e39b12378828f30c9e059d209f63" translate="yes" xml:space="preserve">
          <source>If you activate &lt;a href=&quot;settings#std:setting-CSRF_USE_SESSIONS&quot;&gt;&lt;code&gt;CSRF_USE_SESSIONS&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;settings#std:setting-CSRF_COOKIE_HTTPONLY&quot;&gt;&lt;code&gt;CSRF_COOKIE_HTTPONLY&lt;/code&gt;&lt;/a&gt;, you must include the CSRF token in your HTML and read the token from the DOM with JavaScript:</source>
          <target state="translated">&lt;a href=&quot;settings#std:setting-CSRF_USE_SESSIONS&quot;&gt; &lt;code&gt;CSRF_USE_SESSIONS&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;settings#std:setting-CSRF_COOKIE_HTTPONLY&quot;&gt; &lt;code&gt;CSRF_COOKIE_HTTPONLY&lt;/code&gt; &lt;/a&gt; 를 활성화하는 경우 HTML에 CSRF 토큰을 포함시키고 JavaScript를 사용하여 DOM에서 토큰을 읽어야합니다.</target>
        </trans-unit>
        <trans-unit id="ab46e0097159c03d8a60d09a7d1250eee53c6b4a" translate="yes" xml:space="preserve">
          <source>If you add a new keyword argument, you need to write code in &lt;code&gt;deconstruct()&lt;/code&gt; that puts its value into &lt;code&gt;kwargs&lt;/code&gt; yourself. You should also omit the value from &lt;code&gt;kwargs&lt;/code&gt; when it isn&amp;rsquo;t necessary to reconstruct the state of the field, such as when the default value is being used:</source>
          <target state="translated">새로운 키워드 인수를 추가하면 &lt;code&gt;deconstruct()&lt;/code&gt; 코드를 작성 하여 그 값을 &lt;code&gt;kwargs&lt;/code&gt; 에 저장해야 합니다. 또한 기본값을 사용하는 경우와 같이 필드 상태를 재구성 할 필요가없는 경우 &lt;code&gt;kwargs&lt;/code&gt; 에서 값을 생략해야합니다 .</target>
        </trans-unit>
        <trans-unit id="9290e813a0bf97db9d008f3c672105ad13a270f2" translate="yes" xml:space="preserve">
          <source>If you add or modify flatpages via your own code, you will likely want to check for duplicate flatpage URLs within the same site. The flatpage form used in the admin performs this validation check, and can be imported from &lt;code&gt;django.contrib.flatpages.forms.FlatpageForm&lt;/code&gt; and used in your own views.</source>
          <target state="translated">자신의 코드를 통해 플랫 페이지를 추가하거나 수정하는 경우 동일한 사이트 내에서 중복 된 플랫 페이지 URL을 확인하는 것이 좋습니다. 관리자에서 사용되는 플랫 페이지 양식은이 유효성 검사를 수행하며 &lt;code&gt;django.contrib.flatpages.forms.FlatpageForm&lt;/code&gt; 에서 가져 와서 자신의보기에서 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="19279f2745faa7fa825b809dfd65333ca02e57b9" translate="yes" xml:space="preserve">
          <source>If you add the name of a callable to &lt;code&gt;fields&lt;/code&gt;, the same rule applies as with the &lt;a href=&quot;#django.contrib.admin.ModelAdmin.fields&quot;&gt;&lt;code&gt;fields&lt;/code&gt;&lt;/a&gt; option: the callable must be listed in &lt;a href=&quot;#django.contrib.admin.ModelAdmin.readonly_fields&quot;&gt;&lt;code&gt;readonly_fields&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;fields&lt;/code&gt; 호출 가능 이름을 추가하면 &lt;a href=&quot;#django.contrib.admin.ModelAdmin.fields&quot;&gt; &lt;code&gt;fields&lt;/code&gt; &lt;/a&gt; 옵션 과 동일한 규칙이 적용됩니다 . 호출 가능은 &lt;a href=&quot;#django.contrib.admin.ModelAdmin.readonly_fields&quot;&gt; &lt;code&gt;readonly_fields&lt;/code&gt; 에&lt;/a&gt; 나열되어야합니다 .</target>
        </trans-unit>
        <trans-unit id="4828b14d37ca4d41be7823693b8a8c011f2c2552" translate="yes" xml:space="preserve">
          <source>If you aim to build a database-agnostic application, you should account for differences in database column types. For example, the date/time column type in PostgreSQL is called &lt;code&gt;timestamp&lt;/code&gt;, while the same column in MySQL is called &lt;code&gt;datetime&lt;/code&gt;. You can handle this in a &lt;a href=&quot;../ref/models/fields#django.db.models.Field.db_type&quot;&gt;&lt;code&gt;db_type()&lt;/code&gt;&lt;/a&gt; method by checking the &lt;code&gt;connection.settings_dict['ENGINE']&lt;/code&gt; attribute.</source>
          <target state="translated">데이터베이스에 구애받지 않는 응용 프로그램을 구축하려는 경우 데이터베이스 열 유형의 차이를 고려해야합니다. 예를 들어 PostgreSQL의 날짜 / 시간 열 유형은 &lt;code&gt;timestamp&lt;/code&gt; 이고 MySQL의 동일한 열은 &lt;code&gt;datetime&lt;/code&gt; 입니다. &lt;code&gt;connection.settings_dict['ENGINE']&lt;/code&gt; 속성 을 확인하여 &lt;a href=&quot;../ref/models/fields#django.db.models.Field.db_type&quot;&gt; &lt;code&gt;db_type()&lt;/code&gt; &lt;/a&gt; 메소드 에서이를 처리 할 수 ​​있습니다 .</target>
        </trans-unit>
        <trans-unit id="d866003e34d19497e6a39513c19080fca9667425" translate="yes" xml:space="preserve">
          <source>If you allow for blank values, you have to allow for null values since blank values are stored as null.</source>
          <target state="translated">공백 값을 허용하면 공백 값이 널로 저장되므로 널값을 허용해야합니다.</target>
        </trans-unit>
        <trans-unit id="5dfbcb1590644f47fc6c2a97a5c0c0679f9f8edd" translate="yes" xml:space="preserve">
          <source>If you already have the GET arguments in URL-encoded form, you can use that encoding instead of using the data argument. For example, the previous GET request could also be posed as:</source>
          <target state="translated">URL 인코딩 형식의 GET 인수가 이미있는 경우 data 인수 대신 해당 인코딩을 사용할 수 있습니다. 예를 들어, 이전 GET 요청은 다음과 같이 제기 될 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="9f8f087d060b362f136ee6b97e34ff5646abcd8a" translate="yes" xml:space="preserve">
          <source>If you already know a few other languages and want to get up to speed with Python quickly, we recommend &lt;a href=&quot;https://diveinto.org/python3/table-of-contents.html&quot;&gt;Dive Into Python&lt;/a&gt;. If that&amp;rsquo;s not quite your style, there are many other &lt;a href=&quot;https://wiki.python.org/moin/PythonBooks&quot;&gt;books about Python&lt;/a&gt;.</source>
          <target state="translated">이미 몇 가지 다른 언어를 알고 있고 Python을 빠르게 익히고 싶다면 &lt;a href=&quot;https://diveinto.org/python3/table-of-contents.html&quot;&gt;Dive Into Python을&lt;/a&gt; 권장 합니다. 그것이 당신의 스타일이 아니라면, &lt;a href=&quot;https://wiki.python.org/moin/PythonBooks&quot;&gt;파이썬에 관한&lt;/a&gt; 많은 다른 책들이 있습니다.</target>
        </trans-unit>
        <trans-unit id="037b16c87c42ef82ec961a3ac3d843c26b02994c" translate="yes" xml:space="preserve">
          <source>If you are &lt;em&gt;absolutely&lt;/em&gt; in dire need to run this code from an asynchronous context - for example, it is being forced on you by an external environment, and you are sure there is no chance of it being run concurrently (e.g. you are in a &lt;a href=&quot;https://jupyter.org/&quot;&gt;Jupyter&lt;/a&gt; notebook), then you can disable the warning with the &lt;code&gt;DJANGO_ALLOW_ASYNC_UNSAFE&lt;/code&gt; environment variable.</source>
          <target state="translated">당신이 경우 &lt;em&gt;절대적으로&lt;/em&gt; 비동기 컨텍스트에서이 코드를 실행하는 절박한 필요 - 예를 들어,이 외부 환경에 의해 당신에게 강요되고 있으며, 당신이 있는지가 동시에 실행되는 기회가 없다 (예를 들어, 당신은에 &lt;a href=&quot;https://jupyter.org/&quot;&gt;Jupyter &lt;/a&gt; &lt;code&gt;DJANGO_ALLOW_ASYNC_UNSAFE&lt;/code&gt; 환경 변수를 사용하여 경고를 비활성화 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="cabfbe868e7cb75abcebb7e76b56c06e811c5257" translate="yes" xml:space="preserve">
          <source>If you are chaining filters, a filter applied after &lt;code&gt;safe&lt;/code&gt; can make the contents unsafe again. For example, the following code prints the variable as is, unescaped:</source>
          <target state="translated">필터를 체인으로 연결하는 경우 &lt;code&gt;safe&lt;/code&gt; 후에 적용된 필터 를 사용하면 내용이 다시 안전하지 않을 수 있습니다. 예를 들어, 다음 코드는 이스케이프 처리되지 않은 그대로 변수를 인쇄합니다.</target>
        </trans-unit>
        <trans-unit id="2655962c0a4f53510466dd490c637f462974c542" translate="yes" xml:space="preserve">
          <source>If you are connecting to the internet behind a proxy, there might be problems in running the command &lt;code&gt;py -m pip install Django&lt;/code&gt;. Set the environment variables for proxy configuration in the command prompt as follows:</source>
          <target state="translated">프록시 뒤에서 인터넷에 연결하는 경우 &lt;code&gt;py -m pip install Django&lt;/code&gt; 명령을 실행하는 데 문제가있을 수 있습니다 . 명령 프롬프트에서 프록시 구성을위한 환경 변수를 다음과 같이 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="3f2135c10c9c1fcecec78e1b0692c6109124ccab" translate="yes" xml:space="preserve">
          <source>If you are constructing an object manually, you can assign the file object from &lt;a href=&quot;../../ref/request-response#django.http.HttpRequest.FILES&quot;&gt;&lt;code&gt;request.FILES&lt;/code&gt;&lt;/a&gt; to the file field in the model:</source>
          <target state="translated">오브젝트를 수동으로 구성하는 경우 &lt;a href=&quot;../../ref/request-response#django.http.HttpRequest.FILES&quot;&gt; &lt;code&gt;request.FILES&lt;/code&gt; &lt;/a&gt; 의 파일 오브젝트를 모델의 파일 ​​필드에 지정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="92ab820f72ae9c99d7def5b0452724d8bd608be6" translate="yes" xml:space="preserve">
          <source>If you are creating a reusable application, it is recommended to use only the built-in &lt;a href=&quot;#message-levels&quot;&gt;message levels&lt;/a&gt; and not rely on any custom levels.</source>
          <target state="translated">재사용 가능한 응용 프로그램을 만드는 경우 기본 제공 &lt;a href=&quot;#message-levels&quot;&gt;메시지 수준&lt;/a&gt; 만 사용 하고 사용자 지정 수준에 의존하지 않는 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="ffa521388bfefc73cf3b041673a0e7a8595c90d3" translate="yes" xml:space="preserve">
          <source>If you are deployed behind a load-balancer or reverse-proxy server and Django can&amp;rsquo;t seem to tell when a request actually is already secure, you may need to set the &lt;a href=&quot;settings#std:setting-SECURE_PROXY_SSL_HEADER&quot;&gt;&lt;code&gt;SECURE_PROXY_SSL_HEADER&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">로드 밸런서 또는 리버스 프록시 서버 뒤에 배치되어 있고 Django가 요청이 실제로 안전하다는 것을 알 수없는 경우 &lt;a href=&quot;settings#std:setting-SECURE_PROXY_SSL_HEADER&quot;&gt; &lt;code&gt;SECURE_PROXY_SSL_HEADER&lt;/code&gt; &lt;/a&gt; 설정 을 설정해야 합니다.</target>
        </trans-unit>
        <trans-unit id="41e9a421371bfb5a50b98c32edd7081296c13f7c" translate="yes" xml:space="preserve">
          <source>If you are deployed behind a load-balancer or reverse-proxy server, and the &lt;code&gt;Strict-Transport-Security&lt;/code&gt; header is not being added to your responses, it may be because Django doesn&amp;rsquo;t realize that it&amp;rsquo;s on a secure connection; you may need to set the &lt;a href=&quot;settings#std:setting-SECURE_PROXY_SSL_HEADER&quot;&gt;&lt;code&gt;SECURE_PROXY_SSL_HEADER&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">로드 밸런서 또는 리버스 프록시 서버 뒤에 배치되어 있고 &lt;code&gt;Strict-Transport-Security&lt;/code&gt; 헤더가 응답에 추가되지 않는 경우 장고가 안전한 연결 상태임을 인식하지 못하기 때문일 수 있습니다. &lt;a href=&quot;settings#std:setting-SECURE_PROXY_SSL_HEADER&quot;&gt; &lt;code&gt;SECURE_PROXY_SSL_HEADER&lt;/code&gt; &lt;/a&gt; 설정 을 설정해야 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="2c691ad6ca02fef297ccdbc9e5c26db8508ebcf4" translate="yes" xml:space="preserve">
          <source>If you are developing a small project or something you don&amp;rsquo;t plan to deploy in a production environment, SQLite is generally the best option as it doesn&amp;rsquo;t require running a separate server. However, SQLite has many differences from other databases, so if you are working on something substantial, it&amp;rsquo;s recommended to develop with the same database that you plan on using in production.</source>
          <target state="translated">소규모 프로젝트 나 프로덕션 환경에 배포하지 않을 계획 인 경우 별도의 서버를 실행할 필요가 없으므로 SQLite가 가장 좋습니다. 그러나 SQLite는 다른 데이터베이스와 많은 차이가 있으므로 실제 작업을 수행하는 경우 프로덕션 환경에서 사용하려는 것과 동일한 데이터베이스로 개발하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="426463c8a09b71f7c823f03996117348698ae262" translate="yes" xml:space="preserve">
          <source>If you are familiar with Python packaging and interested in learning how to turn polls into a &amp;ldquo;reusable app&amp;rdquo;, check out &lt;a href=&quot;reusable-apps&quot;&gt;Advanced tutorial: How to write reusable apps&lt;/a&gt;.</source>
          <target state="translated">Python 패키징에 익숙하고 설문을 &quot;재사용 가능한 앱&quot;으로 전환하는 방법을 배우고 싶다면 &lt;a href=&quot;reusable-apps&quot;&gt;고급 자습서 : 재사용 가능한 앱을 작성하는 방법을&lt;/a&gt; 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="6df1a07d3d4b877dffccc3304d0749b9a9a63bcf" translate="yes" xml:space="preserve">
          <source>If you are filtering across multiple relationships and one of the intermediate models doesn&amp;rsquo;t have a value that meets the filter condition, Django will treat it as if there is an empty (all values are &lt;code&gt;NULL&lt;/code&gt;), but valid, object there. All this means is that no error will be raised. For example, in this filter:</source>
          <target state="translated">여러 관계에서 필터링하고 중간 모델 중 하나에 필터 조건을 충족시키는 값이없는 경우 장고는 비어있는 (모든 값은 &lt;code&gt;NULL&lt;/code&gt; ) 있지만 유효한 객체 인 것처럼 처리합니다. 이 모든 것은 오류가 발생하지 않는다는 것입니다. 예를 들어이 필터에서</target>
        </trans-unit>
        <trans-unit id="54d3dc0d5d9a07f09c0b925c9b0c98d70db0dd97" translate="yes" xml:space="preserve">
          <source>If you are going to need other data from the QuerySet, evaluate it immediately.</source>
          <target state="translated">QuerySet의 다른 데이터가 필요한 경우 즉시 평가하십시오.</target>
        </trans-unit>
        <trans-unit id="0a6f484ecf97ba11c41c19b92638b2e691e251cf" translate="yes" xml:space="preserve">
          <source>If you are just starting with Django and using Windows, you may find &lt;a href=&quot;../howto/windows&quot;&gt;How to install Django on Windows&lt;/a&gt; useful.</source>
          <target state="translated">Django로 시작하여 Windows를 사용하는 경우 Windows에 &lt;a href=&quot;../howto/windows&quot;&gt;Django를 설치하는 방법이&lt;/a&gt; 유용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f8022aedc2f24dbfc32c1645a06e23557556b40d" translate="yes" xml:space="preserve">
          <source>If you are looking for a more robust solution, take a look at the &lt;a href=&quot;https://pypi.org/project/bleach/&quot;&gt;bleach&lt;/a&gt; Python library.</source>
          <target state="translated">보다 강력한 솔루션을 찾고 있다면 &lt;a href=&quot;https://pypi.org/project/bleach/&quot;&gt;블리치&lt;/a&gt; Python 라이브러리를 살펴보십시오 .</target>
        </trans-unit>
        <trans-unit id="5679be2b89b6ad12b1cb13d77be5c899c643d272" translate="yes" xml:space="preserve">
          <source>If you are looking for a reference on how to submit patches, see the &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/internals/contributing/writing-code/submitting-patches/&quot;&gt;Submitting patches&lt;/a&gt; documentation.</source>
          <target state="translated">패치 제출 방법에 대한 참조를 찾으려면 패치 &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/internals/contributing/writing-code/submitting-patches/&quot;&gt;제출&lt;/a&gt; 문서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="b51f6b7ffd84766e0e10e46ee09ef3d2cd522fad" translate="yes" xml:space="preserve">
          <source>If you are migrating from the Django&amp;rsquo;s built-in &lt;code&gt;cached_db&lt;/code&gt; session store to a custom one based on &lt;code&gt;cached_db&lt;/code&gt;, you should override the cache key prefix in order to prevent a namespace clash:</source>
          <target state="translated">Django의 내장 &lt;code&gt;cached_db&lt;/code&gt; 세션 저장소 에서 cached_db 기반의 사용자 정의 저장소로 마이그레이션하는 경우 네임 스페이스 충돌을 방지하기 위해 캐시 키 &lt;code&gt;cached_db&lt;/code&gt; 두부를 대체해야합니다.</target>
        </trans-unit>
        <trans-unit id="3f20d2e0ed1b7dfe99fe7b1b15afc7ea12f08c4e" translate="yes" xml:space="preserve">
          <source>If you are mirroring an existing model or database table and don&amp;rsquo;t want all the original database table columns, use &lt;code&gt;Meta.managed=False&lt;/code&gt;. That option is normally useful for modeling database views and tables not under the control of Django.</source>
          <target state="translated">기존 모델 또는 데이터베이스 테이블을 미러링하고 원본 데이터베이스 테이블 열을 모두 원하지 않으면 &lt;code&gt;Meta.managed=False&lt;/code&gt; 를 사용 하십시오 . 이 옵션은 일반적으로 Django가 제어하지 않는 데이터베이스 뷰 및 테이블을 모델링하는 데 유용합니다.</target>
        </trans-unit>
        <trans-unit id="2c77013a5d33bed9ff8aeb9b8d8bccb978ee3d8e" translate="yes" xml:space="preserve">
          <source>If you are not using SQLite as your database, additional settings such as &lt;a href=&quot;../ref/settings#std:setting-USER&quot;&gt;&lt;code&gt;USER&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../ref/settings#std:setting-PASSWORD&quot;&gt;&lt;code&gt;PASSWORD&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;../ref/settings#std:setting-HOST&quot;&gt;&lt;code&gt;HOST&lt;/code&gt;&lt;/a&gt; must be added. For more details, see the reference documentation for &lt;a href=&quot;../ref/settings#std:setting-DATABASES&quot;&gt;&lt;code&gt;DATABASES&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">SQLite를 데이터베이스로 사용하지 않는 경우 &lt;a href=&quot;../ref/settings#std:setting-USER&quot;&gt; &lt;code&gt;USER&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../ref/settings#std:setting-PASSWORD&quot;&gt; &lt;code&gt;PASSWORD&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../ref/settings#std:setting-HOST&quot;&gt; &lt;code&gt;HOST&lt;/code&gt; &lt;/a&gt; 와 같은 추가 설정을 추가해야합니다. 자세한 내용은 &lt;a href=&quot;../ref/settings#std:setting-DATABASES&quot;&gt; &lt;code&gt;DATABASES&lt;/code&gt; &lt;/a&gt; 참조 설명서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="2dff9fa6f2943dcffcb71466072c87506f22903b" translate="yes" xml:space="preserve">
          <source>If you are performing queries on MySQL, note that MySQL&amp;rsquo;s silent type coercion may cause unexpected results when mixing types. If you query on a string type column, but with an integer value, MySQL will coerce the types of all values in the table to an integer before performing the comparison. For example, if your table contains the values &lt;code&gt;'abc'&lt;/code&gt;, &lt;code&gt;'def'&lt;/code&gt; and you query for &lt;code&gt;WHERE mycolumn=0&lt;/code&gt;, both rows will match. To prevent this, perform the correct typecasting before using the value in a query.</source>
          <target state="translated">MySQL에서 쿼리를 수행하는 경우 MySQL의 자동 유형 강제 변환은 유형을 혼합 할 때 예기치 않은 결과를 초래할 수 있습니다. 문자열 유형 열을 쿼리하지만 정수 값으로 쿼리하면 MySQL은 비교를 수행하기 전에 테이블의 모든 값 유형을 정수로 강제 변환합니다. 예를 들어 테이블에 &lt;code&gt;'abc'&lt;/code&gt; , &lt;code&gt;'def'&lt;/code&gt; 값이 포함되어 있고 &lt;code&gt;WHERE mycolumn=0&lt;/code&gt; 을 쿼리하면 두 행이 모두 일치합니다. 이를 방지하려면 쿼리에서 값을 사용하기 전에 올바른 유형 캐스팅을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="a947d6cabd99493fc7e983c79f42f4923da04a9e" translate="yes" xml:space="preserve">
          <source>If you are serving your own static files, be sure that handlers like Apache&amp;rsquo;s &lt;code&gt;mod_php&lt;/code&gt;, which would execute static files as code, are disabled. You don&amp;rsquo;t want users to be able to execute arbitrary code by uploading and requesting a specially crafted file.</source>
          <target state="translated">정적 파일을 제공하는 경우 정적 파일을 코드로 실행하는 Apache의 &lt;code&gt;mod_php&lt;/code&gt; 와 같은 핸들러 가 비활성화되어 있는지 확인하십시오 . 특수하게 조작 된 파일을 업로드하고 요청하여 사용자가 임의의 코드를 실행할 수 없도록하고 싶습니다.</target>
        </trans-unit>
        <trans-unit id="3e266d9fb9806995f7ae92d1d0321cc13f004066" translate="yes" xml:space="preserve">
          <source>If you are sharing a cache instance between servers, or between your production and development environments, it&amp;rsquo;s possible for data cached by one server to be used by another server. If the format of cached data is different between servers, this can lead to some very hard to diagnose problems.</source>
          <target state="translated">서버 간 또는 프로덕션 환경과 개발 환경간에 캐시 인스턴스를 공유하는 경우 한 서버에서 캐시 된 데이터를 다른 서버에서 사용할 수 있습니다. 캐시 된 데이터의 형식이 서버마다 다르면 문제를 진단하기가 매우 어려울 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5df3afa0c3b43eec8bd8d9f748fb63ae435ac643" translate="yes" xml:space="preserve">
          <source>If you are the maintainer of a third-party app with models, you may need to ship migrations that support multiple Django versions. In this case, you should always run &lt;a href=&quot;../ref/django-admin#django-admin-makemigrations&quot;&gt;&lt;code&gt;makemigrations&lt;/code&gt;&lt;/a&gt;&lt;strong&gt;with the lowest Django version you wish to support&lt;/strong&gt;.</source>
          <target state="translated">모델이 포함 된 타사 앱의 관리자 인 경우 여러 Django 버전을 지원하는 마이그레이션을 제공해야 할 수 있습니다. 이 경우 항상 &lt;strong&gt;지원하려는 Django 버전이 가장 낮은 &lt;/strong&gt;&lt;a href=&quot;../ref/django-admin#django-admin-makemigrations&quot;&gt; &lt;code&gt;makemigrations&lt;/code&gt; &lt;/a&gt;&lt;strong&gt; 을&lt;/strong&gt; 실행해야합니다 .</target>
        </trans-unit>
        <trans-unit id="c58efff062a8aaaaa34e19e97693ce558ec61bc5" translate="yes" xml:space="preserve">
          <source>If you are trying to call code that is synchronous-only from an asynchronous thread, then create a synchronous thread and call it in that. You can accomplish this is with &lt;code&gt;asgiref.sync.sync_to_async&lt;/code&gt;.</source>
          <target state="translated">비동기 스레드에서 동기 전용 코드를 호출하려는 경우 동기 스레드를 작성하여 호출하십시오. &lt;code&gt;asgiref.sync.sync_to_async&lt;/code&gt; 로이를 수행 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e8e0bd3010ac7dd8cec899905c900e89f1f7d84a" translate="yes" xml:space="preserve">
          <source>If you are using &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey.related_name&quot;&gt;&lt;code&gt;related_name&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey.related_query_name&quot;&gt;&lt;code&gt;related_query_name&lt;/code&gt;&lt;/a&gt; on a &lt;code&gt;ForeignKey&lt;/code&gt; or &lt;code&gt;ManyToManyField&lt;/code&gt;, you must always specify a &lt;em&gt;unique&lt;/em&gt; reverse name and query name for the field. This would normally cause a problem in abstract base classes, since the fields on this class are included into each of the child classes, with exactly the same values for the attributes (including &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey.related_name&quot;&gt;&lt;code&gt;related_name&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey.related_query_name&quot;&gt;&lt;code&gt;related_query_name&lt;/code&gt;&lt;/a&gt;) each time.</source>
          <target state="translated">&lt;code&gt;ForeignKey&lt;/code&gt; 또는 &lt;code&gt;ManyToManyField&lt;/code&gt; 에서 &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey.related_name&quot;&gt; &lt;code&gt;related_name&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey.related_query_name&quot;&gt; &lt;code&gt;related_query_name&lt;/code&gt; &lt;/a&gt; 을 사용하는 경우 항상 필드 의 &lt;em&gt;고유 한&lt;/em&gt; 리버스 이름 및 조회 이름을 지정해야 합니다. 이 클래스의 필드가 매번 속성 ( &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey.related_name&quot;&gt; &lt;code&gt;related_name&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey.related_query_name&quot;&gt; &lt;code&gt;related_query_name&lt;/code&gt; 포함&lt;/a&gt; )에 대해 정확히 동일한 값으로 각 하위 클래스에 포함되므로 일반적으로 추상 기본 클래스에서 문제가 발생합니다 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="13ff923ff59501ab414c4be102a84827b6e517bb" translate="yes" xml:space="preserve">
          <source>If you are using &lt;a href=&quot;../ref/django-admin#django-admin-dumpdata&quot;&gt;&lt;code&gt;dumpdata&lt;/code&gt;&lt;/a&gt; to generate serialized data, use the &lt;a href=&quot;../ref/django-admin#cmdoption-dumpdata-natural-foreign&quot;&gt;&lt;code&gt;dumpdata --natural-foreign&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../ref/django-admin#cmdoption-dumpdata-natural-primary&quot;&gt;&lt;code&gt;dumpdata --natural-primary&lt;/code&gt;&lt;/a&gt; command line flags to generate natural keys.</source>
          <target state="translated">&lt;a href=&quot;../ref/django-admin#django-admin-dumpdata&quot;&gt; &lt;code&gt;dumpdata&lt;/code&gt; &lt;/a&gt; 를 사용하여 직렬화 된 데이터를 생성하는 경우 &lt;a href=&quot;../ref/django-admin#cmdoption-dumpdata-natural-foreign&quot;&gt; &lt;code&gt;dumpdata --natural-foreign&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../ref/django-admin#cmdoption-dumpdata-natural-primary&quot;&gt; &lt;code&gt;dumpdata --natural-primary&lt;/code&gt; &lt;/a&gt; 명령 행 플래그를 사용하여 자연 키를 생성하십시오.</target>
        </trans-unit>
        <trans-unit id="59359e0377bcc9039f07ed70ee0fda67ef2ccade" translate="yes" xml:space="preserve">
          <source>If you are using &lt;a href=&quot;multi-db&quot;&gt;more than one database&lt;/a&gt;, you can use &lt;code&gt;django.db.connections&lt;/code&gt; to obtain the connection (and cursor) for a specific database. &lt;code&gt;django.db.connections&lt;/code&gt; is a dictionary-like object that allows you to retrieve a specific connection using its alias:</source>
          <target state="translated">당신이 사용하는 경우 &lt;a href=&quot;multi-db&quot;&gt;둘 이상의 데이터베이스를&lt;/a&gt; , 당신이 사용할 수있는 &lt;code&gt;django.db.connections&lt;/code&gt; 을 특정 데이터베이스에 대한 연결 (커서)을 얻었다. &lt;code&gt;django.db.connections&lt;/code&gt; 는 별명을 사용하여 특정 연결을 검색 할 수있는 사전과 유사한 객체입니다.</target>
        </trans-unit>
        <trans-unit id="f9a935f64b3c7b8ef812c793ab72169e068de5c7" translate="yes" xml:space="preserve">
          <source>If you are using MySQL, see the &lt;a href=&quot;../../ref/databases#mysql-time-zone-definitions&quot;&gt;Time zone definitions&lt;/a&gt; section of the MySQL notes for instructions on loading time zone definitions.</source>
          <target state="translated">MySQL을 사용하는 경우 &lt;a href=&quot;../../ref/databases#mysql-time-zone-definitions&quot;&gt;시간대 정의&lt;/a&gt; 로드에 대한 지시 사항은 MySQL 참고 사항의 시간대 정의 섹션을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="20d3a84d61e53af28e187e5423ab3c6daba100cb" translate="yes" xml:space="preserve">
          <source>If you are using a &lt;a href=&quot;modelforms#django.forms.models.BaseModelFormSet&quot;&gt;&lt;code&gt;ModelFormSet&lt;/code&gt;&lt;/a&gt;, model instances for deleted forms will be deleted when you call &lt;code&gt;formset.save()&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;modelforms#django.forms.models.BaseModelFormSet&quot;&gt; &lt;code&gt;ModelFormSet&lt;/code&gt; 을&lt;/a&gt; 사용하는 경우 &lt;code&gt;formset.save()&lt;/code&gt; 를 호출하면 삭제 된 양식의 모델 인스턴스가 삭제됩니다 .</target>
        </trans-unit>
        <trans-unit id="4a32235de5fa9b7f6d1fb4ceb0c0a90fb7c8b7a7" translate="yes" xml:space="preserve">
          <source>If you are using a custom &lt;code&gt;AdminSite&lt;/code&gt;, it is common to import all of the &lt;code&gt;ModelAdmin&lt;/code&gt; subclasses into your code and register them to the custom &lt;code&gt;AdminSite&lt;/code&gt;. In that case, in order to disable auto-discovery, you should put &lt;code&gt;'django.contrib.admin.apps.SimpleAdminConfig'&lt;/code&gt; instead of &lt;code&gt;'django.contrib.admin'&lt;/code&gt; in your &lt;a href=&quot;../../settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">사용자 정의 사용하는 경우 &lt;code&gt;AdminSite&lt;/code&gt; 를 , 모든 수입하는 것이 일반적입니다 &lt;code&gt;ModelAdmin&lt;/code&gt; 의 코드에 서브 클래스 및 사용자 정의에 등록 &lt;code&gt;AdminSite&lt;/code&gt; . 이 경우, 사용하지 않도록 자동 검색을 위해, 당신은 넣어한다 &lt;code&gt;'django.contrib.admin.apps.SimpleAdminConfig'&lt;/code&gt; 대신 &lt;code&gt;'django.contrib.admin'&lt;/code&gt; 당신의 &lt;a href=&quot;../../settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; 의&lt;/a&gt; 설정.</target>
        </trans-unit>
        <trans-unit id="3e5ad72d051f2c508d3660b55413bfd83991c9d5" translate="yes" xml:space="preserve">
          <source>If you are using a custom &lt;code&gt;ModelAdmin&lt;/code&gt; which is a subclass of &lt;code&gt;django.contrib.auth.admin.UserAdmin&lt;/code&gt;, then you need to add your custom fields to &lt;code&gt;fieldsets&lt;/code&gt; (for fields to be used in editing users) and to &lt;code&gt;add_fieldsets&lt;/code&gt; (for fields to be used when creating a user). For example:</source>
          <target state="translated">사용자 정의 사용하는 경우 &lt;code&gt;ModelAdmin&lt;/code&gt; 의 서브 클래스입니다 &lt;code&gt;django.contrib.auth.admin.UserAdmin&lt;/code&gt; 을 , 당신은 당신의 사용자 정의 필드를 추가 할 필요가 &lt;code&gt;fieldsets&lt;/code&gt; (사용자 편집에 사용되는 필드)와에 &lt;code&gt;add_fieldsets&lt;/code&gt; 필드가 될 때까지 ( 사용자를 만들 때 사용). 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="55299cb11d5a4d1a27e95db83e96e73588d11d45" translate="yes" xml:space="preserve">
          <source>If you are using a legacy database that contains &lt;code&gt;TIMESTAMP&lt;/code&gt; columns, you must set &lt;a href=&quot;settings#std:setting-USE_TZ&quot;&gt;&lt;code&gt;USE_TZ = False&lt;/code&gt;&lt;/a&gt; to avoid data corruption. &lt;a href=&quot;django-admin#django-admin-inspectdb&quot;&gt;&lt;code&gt;inspectdb&lt;/code&gt;&lt;/a&gt; maps these columns to &lt;a href=&quot;models/fields#django.db.models.DateTimeField&quot;&gt;&lt;code&gt;DateTimeField&lt;/code&gt;&lt;/a&gt; and if you enable timezone support, both MySQL and Django will attempt to convert the values from UTC to local time.</source>
          <target state="translated">&lt;code&gt;TIMESTAMP&lt;/code&gt; 컬럼 이 포함 된 레거시 데이터베이스를 사용중인 경우 데이터 손상을 피하려면 &lt;a href=&quot;settings#std:setting-USE_TZ&quot;&gt; &lt;code&gt;USE_TZ = False&lt;/code&gt; &lt;/a&gt; 를 설정해야합니다 . &lt;a href=&quot;django-admin#django-admin-inspectdb&quot;&gt; &lt;code&gt;inspectdb&lt;/code&gt; &lt;/a&gt; 는 이러한 열을 &lt;a href=&quot;models/fields#django.db.models.DateTimeField&quot;&gt; &lt;code&gt;DateTimeField&lt;/code&gt; 에&lt;/a&gt; 매핑 하고 시간대 지원을 활성화하면 MySQL과 Django가 값을 UTC에서 현지 시간으로 변환하려고 시도합니다.</target>
        </trans-unit>
        <trans-unit id="9b9eb482ea04b91f418d3f207e5896276fab27cb" translate="yes" xml:space="preserve">
          <source>If you are using a production backend that can accept a wider range of keys (a custom backend, or one of the non-memcached built-in backends), and want to use this wider range without warnings, you can silence &lt;code&gt;CacheKeyWarning&lt;/code&gt; with this code in the &lt;code&gt;management&lt;/code&gt; module of one of your &lt;a href=&quot;../ref/settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">더 넓은 범위의 키 (사용자 지정 백엔드 또는 비 &lt;code&gt;CacheKeyWarning&lt;/code&gt; 내장 백엔드 중 하나)를 수락 할 수있는 프로덕션 백엔드를 사용하고 경고없이이 더 넓은 범위를 사용하려는 경우이 코드를 사용하여 CacheKeyWarning 을 침묵 시킬 수 있습니다. 에서 &lt;code&gt;management&lt;/code&gt; 하여 하나의 모듈 &lt;a href=&quot;../ref/settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="400ddbb0cf2f8ce72e355d92bebfc1e26ffa4aab" translate="yes" xml:space="preserve">
          <source>If you are using a version of Apache older than 2.4, replace &lt;code&gt;Require all granted&lt;/code&gt; with &lt;code&gt;Allow from all&lt;/code&gt; and also add the line &lt;code&gt;Order deny,allow&lt;/code&gt; above it.</source>
          <target state="translated">당신은 2.4 이전의 아파치 버전을 사용하는 경우, 대체 &lt;code&gt;Require all granted&lt;/code&gt; 로 &lt;code&gt;Allow from all&lt;/code&gt; 라인 추가도하고 &lt;code&gt;Order deny,allow&lt;/code&gt; 그 위에.</target>
        </trans-unit>
        <trans-unit id="e9b1ff813f22a4d98b3e0ec7f8d1a70dfb440c12" translate="yes" xml:space="preserve">
          <source>If you are using caching provided by Django, you should consider clearing your cache after upgrading. Otherwise you may run into problems, for example, if you are caching pickled objects as these objects are not guaranteed to be pickle-compatible across Django versions. A past instance of incompatibility was caching pickled &lt;a href=&quot;../ref/request-response#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt; objects, either directly or indirectly via the &lt;a href=&quot;../topics/cache#django.views.decorators.cache.cache_page&quot;&gt;&lt;code&gt;cache_page()&lt;/code&gt;&lt;/a&gt; decorator.</source>
          <target state="translated">Django에서 제공하는 캐싱을 사용하는 경우 업그레이드 후 캐시를 지우는 것을 고려해야합니다. 그렇지 않으면 예를 들어 Django 버전에서 피클 호환이 보장되지 않기 때문에 피클 링 된 객체를 캐싱하는 경우 문제가 발생할 수 있습니다. 비 호환성의 과거 사례는 캐시 된 &lt;a href=&quot;../ref/request-response#django.http.HttpResponse&quot;&gt; &lt;code&gt;HttpResponse&lt;/code&gt; &lt;/a&gt; 객체를 &lt;a href=&quot;../topics/cache#django.views.decorators.cache.cache_page&quot;&gt; &lt;code&gt;cache_page()&lt;/code&gt; &lt;/a&gt; 데코레이터 를 통해 직접 또는 간접적으로 캐싱하는 것이 었습니다 .</target>
        </trans-unit>
        <trans-unit id="31c81067457a54fed13944b98da35401d7bcbd26" translate="yes" xml:space="preserve">
          <source>If you are using class-based views, you can refer to &lt;a href=&quot;../topics/class-based-views/intro#id1&quot;&gt;Decorating class-based views&lt;/a&gt;.</source>
          <target state="translated">클래스 기반 뷰를 사용하는 경우 클래스 기반 뷰 &lt;a href=&quot;../topics/class-based-views/intro#id1&quot;&gt;꾸미기를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="74bc5b3d8a5fb005230ddd51971a6b250b4753ac" translate="yes" xml:space="preserve">
          <source>If you are using more than one database you can use &lt;code&gt;django.db.connections&lt;/code&gt; to obtain the connection (and cursor) for a specific database. &lt;code&gt;django.db.connections&lt;/code&gt; is a dictionary-like object that allows you to retrieve a specific connection using its alias:</source>
          <target state="translated">둘 이상의 데이터베이스를 사용하는 경우 &lt;code&gt;django.db.connections&lt;/code&gt; 를 사용 하여 특정 데이터베이스에 대한 연결 (및 커서)을 얻을 수 있습니다 . &lt;code&gt;django.db.connections&lt;/code&gt; 는 별명을 사용하여 특정 연결을 검색 할 수있는 사전과 유사한 객체입니다.</target>
        </trans-unit>
        <trans-unit id="0ecf06722ffb34ee4a0fedfb0511c983d4a713e0" translate="yes" xml:space="preserve">
          <source>If you are using multiple database caches, &lt;a href=&quot;../ref/django-admin#django-admin-createcachetable&quot;&gt;&lt;code&gt;createcachetable&lt;/code&gt;&lt;/a&gt; creates one table for each cache.</source>
          <target state="translated">여러 데이터베이스 캐시를 사용하는 경우 &lt;a href=&quot;../ref/django-admin#django-admin-createcachetable&quot;&gt; &lt;code&gt;createcachetable&lt;/code&gt; &lt;/a&gt; 은 각 캐시에 대해 하나의 테이블을 작성합니다.</target>
        </trans-unit>
        <trans-unit id="c1f1afe7956d536875c96cebe4354cfc56b04593" translate="yes" xml:space="preserve">
          <source>If you are using multiple databases, &lt;a href=&quot;../ref/django-admin#django-admin-createcachetable&quot;&gt;&lt;code&gt;createcachetable&lt;/code&gt;&lt;/a&gt; observes the &lt;code&gt;allow_migrate()&lt;/code&gt; method of your database routers (see below).</source>
          <target state="translated">여러 데이터베이스를 사용하는 경우 &lt;a href=&quot;../ref/django-admin#django-admin-createcachetable&quot;&gt; &lt;code&gt;createcachetable&lt;/code&gt; &lt;/a&gt; 은 데이터베이스 라우터 의 &lt;code&gt;allow_migrate()&lt;/code&gt; 메소드를 관찰합니다 (아래 참조).</target>
        </trans-unit>
        <trans-unit id="d8e86b0dcae3d153f97ecddffbaca181d07969ec" translate="yes" xml:space="preserve">
          <source>If you are using the &lt;a href=&quot;../../topics/templates#django.template.backends.django.DjangoTemplates&quot;&gt;&lt;code&gt;DjangoTemplates&lt;/code&gt;&lt;/a&gt; backend, this probably isn&amp;rsquo;t the documentation you&amp;rsquo;re looking for. An instance of the &lt;code&gt;Engine&lt;/code&gt; class described below is accessible using the &lt;code&gt;engine&lt;/code&gt; attribute of that backend and any attribute defaults mentioned below are overridden by what&amp;rsquo;s passed by &lt;a href=&quot;../../topics/templates#django.template.backends.django.DjangoTemplates&quot;&gt;&lt;code&gt;DjangoTemplates&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../topics/templates#django.template.backends.django.DjangoTemplates&quot;&gt; &lt;code&gt;DjangoTemplates&lt;/code&gt; &lt;/a&gt; 백엔드를 사용하는 경우 이것은 아마도 찾고있는 문서가 아닐 것입니다. 아래에 설명 된 &lt;code&gt;Engine&lt;/code&gt; 클래스 의 인스턴스는 해당 백엔드 의 &lt;code&gt;engine&lt;/code&gt; 속성을 사용하여 액세스 할 수 있으며 아래에 언급 된 속성 기본값은 &lt;a href=&quot;../../topics/templates#django.template.backends.django.DjangoTemplates&quot;&gt; &lt;code&gt;DjangoTemplates&lt;/code&gt; &lt;/a&gt; 가 전달한 내용으로 대체됩니다 .</target>
        </trans-unit>
        <trans-unit id="98aa047d8bc9dd103405d4da35377acc8117f24d" translate="yes" xml:space="preserve">
          <source>If you are using the &lt;a href=&quot;db/managers#django.db.models.from_queryset&quot;&gt;&lt;code&gt;from_queryset()&lt;/code&gt;&lt;/a&gt; function to dynamically generate a manager class, you need to inherit from the generated class to make it importable:</source>
          <target state="translated">당신이 사용하는 경우 &lt;a href=&quot;db/managers#django.db.models.from_queryset&quot;&gt; &lt;code&gt;from_queryset()&lt;/code&gt; &lt;/a&gt; 동적으로 관리 클래스를 생성하는 기능을, 당신은 수입 할 수 있도록 생성 된 클래스에서 상속해야합니다</target>
        </trans-unit>
        <trans-unit id="b152ab1851b4b76c1b0fadc99e24633039333bc3" translate="yes" xml:space="preserve">
          <source>If you are using the default &lt;a href=&quot;../files/storage#django.core.files.storage.FileSystemStorage&quot;&gt;&lt;code&gt;FileSystemStorage&lt;/code&gt;&lt;/a&gt;, the string value will be appended to your &lt;a href=&quot;../settings#std:setting-MEDIA_ROOT&quot;&gt;&lt;code&gt;MEDIA_ROOT&lt;/code&gt;&lt;/a&gt; path to form the location on the local filesystem where uploaded files will be stored. If you are using a different storage, check that storage&amp;rsquo;s documentation to see how it handles &lt;code&gt;upload_to&lt;/code&gt;.</source>
          <target state="translated">기본 &lt;a href=&quot;../files/storage#django.core.files.storage.FileSystemStorage&quot;&gt; &lt;code&gt;FileSystemStorage&lt;/code&gt; 를&lt;/a&gt; 사용하는 경우 , 문자열 값이 &lt;a href=&quot;../settings#std:setting-MEDIA_ROOT&quot;&gt; &lt;code&gt;MEDIA_ROOT&lt;/code&gt; &lt;/a&gt; 경로에 추가되어 업로드 된 파일이 저장 될 로컬 파일 시스템의 위치를 ​​형성합니다. 다른 스토리지를 사용중인 경우 스토리지의 문서를 확인하여 해당 스토리지가 &lt;code&gt;upload_to&lt;/code&gt; 를 처리하는 방법을 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="9d24da33ace038770df53fb75680d36c64adccce" translate="yes" xml:space="preserve">
          <source>If you are using the default test runner, you can control this with the the &lt;a href=&quot;../../ref/settings#std:setting-TEST_SERIALIZE&quot;&gt;&lt;code&gt;SERIALIZE&lt;/code&gt;&lt;/a&gt; entry in the &lt;a href=&quot;../../ref/settings#std:setting-DATABASE-TEST&quot;&gt;&lt;code&gt;TEST&lt;/code&gt;&lt;/a&gt; dictionary.</source>
          <target state="translated">기본 테스트 러너를 사용하는 경우 &lt;a href=&quot;../../ref/settings#std:setting-DATABASE-TEST&quot;&gt; &lt;code&gt;TEST&lt;/code&gt; &lt;/a&gt; 사전 의 &lt;a href=&quot;../../ref/settings#std:setting-TEST_SERIALIZE&quot;&gt; &lt;code&gt;SERIALIZE&lt;/code&gt; &lt;/a&gt; 항목으로 이를 제어 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="3b67e56408c732a18c6ba1adae555cdf257848ab" translate="yes" xml:space="preserve">
          <source>If you are wanting to change the Python-only behavior of a model, but keep all the same fields as in the original, use &lt;code&gt;Meta.proxy=True&lt;/code&gt;. This sets things up so that the proxy model is an exact copy of the storage structure of the original model when data is saved.</source>
          <target state="translated">모델의 Python 전용 동작을 변경하려고하지만 원본과 동일한 필드를 모두 유지하려면 &lt;code&gt;Meta.proxy=True&lt;/code&gt; 를 사용 하십시오 . 이것은 프록시 모델이 데이터가 저장 될 때 원래 모델의 스토리지 구조의 정확한 사본이되도록 설정합니다.</target>
        </trans-unit>
        <trans-unit id="f2bd0fdb6a5a5ac5aa3b6f2e67b4ab2cda67e9ec" translate="yes" xml:space="preserve">
          <source>If you are writing a &lt;a href=&quot;../../intro/reusable-apps&quot;&gt;reusable application&lt;/a&gt; you may want to use the Django test runner to run your own test suite and thus benefit from the Django testing infrastructure.</source>
          <target state="translated">&lt;a href=&quot;../../intro/reusable-apps&quot;&gt;재사용 가능한 애플리케이션&lt;/a&gt; 을 작성하는 경우 Django 테스트 러너를 사용하여 자체 테스트 스위트를 실행하여 Django 테스트 인프라의 이점을 얻을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="63f4345566a629d77c36a5b719a36c80b1781cf7" translate="yes" xml:space="preserve">
          <source>If you are writing an application that must be portable to multiple database backends, you should be aware that there are restrictions on &lt;code&gt;max_length&lt;/code&gt; for some backends. Refer to the &lt;a href=&quot;../databases&quot;&gt;database backend notes&lt;/a&gt; for details.</source>
          <target state="translated">여러 데이터베이스 백엔드에 이식 가능해야하는 애플리케이션을 작성하는 경우 일부 백엔드 에 대한 &lt;code&gt;max_length&lt;/code&gt; 에 제한이 있음을 알고 있어야합니다 . 자세한 내용은 &lt;a href=&quot;../databases&quot;&gt;데이터베이스 백엔드 메모&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="3ec3b03a16835f16337bac3782d93796fddb90be" translate="yes" xml:space="preserve">
          <source>If you are writing custom views for Django&amp;rsquo;s admin (or need the same authorization check that the built-in views use), you may find the &lt;a href=&quot;../../ref/contrib/admin/index#django.contrib.admin.views.decorators.staff_member_required&quot;&gt;&lt;code&gt;django.contrib.admin.views.decorators.staff_member_required()&lt;/code&gt;&lt;/a&gt; decorator a useful alternative to &lt;code&gt;login_required()&lt;/code&gt;.</source>
          <target state="translated">Django의 관리자에 대한 사용자 정의보기를 작성하거나 내장보기가 사용하는 것과 동일한 권한 검사가 필요한 경우 &lt;a href=&quot;../../ref/contrib/admin/index#django.contrib.admin.views.decorators.staff_member_required&quot;&gt; &lt;code&gt;django.contrib.admin.views.decorators.staff_member_required()&lt;/code&gt; &lt;/a&gt; 데코레이터가 &lt;code&gt;login_required()&lt;/code&gt; 의 유용한 대안을 찾을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="9260861ea3c89683f0065f3584c6348bda3c70e8" translate="yes" xml:space="preserve">
          <source>If you are writing or maintaining a third-party database backend for Django, you will need to provide a &lt;code&gt;SchemaEditor&lt;/code&gt; implementation in order to work with 1.7&amp;rsquo;s migration functionality - however, as long as your database is relatively standard in its use of SQL and relational design, you should be able to subclass one of the built-in Django &lt;code&gt;SchemaEditor&lt;/code&gt; classes and tweak the syntax a little. Also note that there are a few new database features that migrations will look for: &lt;code&gt;can_rollback_ddl&lt;/code&gt; and &lt;code&gt;supports_combined_alters&lt;/code&gt; are the most important.</source>
          <target state="translated">Django에 대한 타사 데이터베이스 백엔드를 작성하거나 유지 관리하는 경우 1.7의 마이그레이션 기능을 사용하려면 &lt;code&gt;SchemaEditor&lt;/code&gt; 구현 을 제공해야합니다. 그러나 데이터베이스가 SQL 및 관계형 디자인에서는 내장 된 Django &lt;code&gt;SchemaEditor&lt;/code&gt; 클래스 중 하나를 서브 클래스하고 구문을 약간 조정할 수 있어야합니다. 또한 마이그레이션에 필요한 몇 가지 새로운 데이터베이스 기능이 있습니다. &lt;code&gt;can_rollback_ddl&lt;/code&gt; 및 &lt;code&gt;supports_combined_alters&lt;/code&gt; 가 가장 중요합니다.</target>
        </trans-unit>
        <trans-unit id="6e12212c9814a4d33e32e4d9464358cf6356b217" translate="yes" xml:space="preserve">
          <source>If you assign a value of &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt; to an attribute, it will be rendered as an HTML5 boolean attribute:</source>
          <target state="translated">속성 에 &lt;code&gt;True&lt;/code&gt; 또는 &lt;code&gt;False&lt;/code&gt; 값을 지정 하면 HTML5 부울 속성으로 렌더링됩니다.</target>
        </trans-unit>
        <trans-unit id="32c8444bd1418d1e80bc0e62c5a90e8f82286fbe" translate="yes" xml:space="preserve">
          <source>If you assign auto-primary-key values manually, make sure not to use an already-existing primary-key value! If you create a new object with an explicit primary-key value that already exists in the database, Django will assume you&amp;rsquo;re changing the existing record rather than creating a new one.</source>
          <target state="translated">자동 기본 키 값을 수동으로 할당하는 경우 이미 존재하는 기본 키 값을 사용하지 마십시오! 데이터베이스에 이미 존재하는 명시 적 기본 키 값을 사용하여 새 객체를 생성하면 Django는 기존 레코드를 새로 작성하지 않고 변경한다고 가정합니다.</target>
        </trans-unit>
        <trans-unit id="49a2f3768ca62045d71dd6c07b469ec6cd3d26bc" translate="yes" xml:space="preserve">
          <source>If you attempt to access a database that you haven&amp;rsquo;t defined in your &lt;a href=&quot;../../ref/settings#std:setting-DATABASES&quot;&gt;&lt;code&gt;DATABASES&lt;/code&gt;&lt;/a&gt; setting, Django will raise a &lt;code&gt;django.db.utils.ConnectionDoesNotExist&lt;/code&gt; exception.</source>
          <target state="translated">&lt;a href=&quot;../../ref/settings#std:setting-DATABASES&quot;&gt; &lt;code&gt;DATABASES&lt;/code&gt; &lt;/a&gt; 설정 에서 정의하지 않은 데이터베이스에 액세스하려고하면 Django가 &lt;code&gt;django.db.utils.ConnectionDoesNotExist&lt;/code&gt; 예외를 발생시킵니다.</target>
        </trans-unit>
        <trans-unit id="094a5a53db7e5fc234781db19fdb93e284cd8498" translate="yes" xml:space="preserve">
          <source>If you attempt to insert a new row that conflicts with an existing row, an &lt;a href=&quot;../../exceptions#django.db.IntegrityError&quot;&gt;&lt;code&gt;IntegrityError&lt;/code&gt;&lt;/a&gt; is raised. Similarly, when update conflicts with an existing row.</source>
          <target state="translated">기존 행과 충돌하는 새 행을 삽입하려고하면 &lt;a href=&quot;../../exceptions#django.db.IntegrityError&quot;&gt; &lt;code&gt;IntegrityError&lt;/code&gt; &lt;/a&gt; 가 발생합니다. 마찬가지로 업데이트가 기존 행과 충돌하는 경우</target>
        </trans-unit>
        <trans-unit id="b554a2162422140f6059440c8b501ad2c5a78b5b" translate="yes" xml:space="preserve">
          <source>If you attempt to use &lt;a href=&quot;#django.contrib.sites.managers.CurrentSiteManager&quot;&gt;&lt;code&gt;CurrentSiteManager&lt;/code&gt;&lt;/a&gt; and pass a field name that doesn&amp;rsquo;t exist, Django will raise a &lt;code&gt;ValueError&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.sites.managers.CurrentSiteManager&quot;&gt; &lt;code&gt;CurrentSiteManager&lt;/code&gt; &lt;/a&gt; 를 사용하려고 시도하고 존재하지 않는 필드 이름을 전달하면 Django는 &lt;code&gt;ValueError&lt;/code&gt; 를 발생 시킵니다.</target>
        </trans-unit>
        <trans-unit id="4e5abf4e7be3fc5b817d5e64f617996405c68b1a" translate="yes" xml:space="preserve">
          <source>If you call &lt;code&gt;formset.save(commit=False)&lt;/code&gt;, objects will not be deleted automatically. You&amp;rsquo;ll need to call &lt;code&gt;delete()&lt;/code&gt; on each of the &lt;a href=&quot;modelforms#django.forms.models.BaseModelFormSet.deleted_objects&quot;&gt;&lt;code&gt;formset.deleted_objects&lt;/code&gt;&lt;/a&gt; to actually delete them:</source>
          <target state="translated">&lt;code&gt;formset.save(commit=False)&lt;/code&gt; 를 호출하면 객체가 자동으로 삭제되지 않습니다. 각 &lt;a href=&quot;modelforms#django.forms.models.BaseModelFormSet.deleted_objects&quot;&gt; &lt;code&gt;formset.deleted_objects&lt;/code&gt; &lt;/a&gt; 에서 &lt;code&gt;delete()&lt;/code&gt; 를 호출 하여 실제로 삭제해야합니다.</target>
        </trans-unit>
        <trans-unit id="77f2d3ee05bddf46e62d79be0db43fed60754a7d" translate="yes" xml:space="preserve">
          <source>If you call &lt;code&gt;get_template('story_detail.html')&lt;/code&gt;, here are the files Django will look for, in order:</source>
          <target state="translated">&lt;code&gt;get_template('story_detail.html')&lt;/code&gt; 을 호출하면 다음 과 같이 Django가 찾을 파일이 있습니다.</target>
        </trans-unit>
        <trans-unit id="81d2651eaffa16d0fff33c40f11a5412ce1b24bb" translate="yes" xml:space="preserve">
          <source>If you call &lt;code&gt;on_commit()&lt;/code&gt; while there isn&amp;rsquo;t an active transaction, the callback will be executed immediately.</source>
          <target state="translated">활성 트랜잭션이없는 동안 &lt;code&gt;on_commit()&lt;/code&gt; 을 호출 하면 콜백이 즉시 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="fd4a96e10fe18bc75c5654babe72785efc64e7dd" translate="yes" xml:space="preserve">
          <source>If you call &lt;code&gt;select_template(['story_253_detail.html', 'story_detail.html'])&lt;/code&gt;, here&amp;rsquo;s what Django will look for:</source>
          <target state="translated">&lt;code&gt;select_template(['story_253_detail.html', 'story_detail.html'])&lt;/code&gt; 을 호출하면 Django에서 다음을 찾습니다.</target>
        </trans-unit>
        <trans-unit id="b2232cc0a9efa6073693abc788397e1cd49fb07c" translate="yes" xml:space="preserve">
          <source>If you can&amp;rsquo;t find the solution to your problem here then participate in the community! You can:</source>
          <target state="translated">여기서 문제에 대한 해결책을 찾을 수 없다면 커뮤니티에 참여하십시오! 당신은 할 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="f9c5827d1b1d34ede00df19d4fc1cff6b7b1859a" translate="yes" xml:space="preserve">
          <source>If you can&amp;rsquo;t use mod_wsgi for some reason, fear not: Django supports many other deployment options. One is &lt;a href=&quot;../howto/deployment/wsgi/uwsgi&quot;&gt;uWSGI&lt;/a&gt;; it works very well with &lt;a href=&quot;https://nginx.org/&quot;&gt;nginx&lt;/a&gt;. Additionally, Django follows the WSGI spec (&lt;a href=&quot;https://www.python.org/dev/peps/pep-3333&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;PEP 3333&lt;/strong&gt;&lt;/a&gt;), which allows it to run on a variety of server platforms.</source>
          <target state="translated">어떤 이유로 mod_wsgi를 사용할 수 없다면 Django는 다른 많은 배포 옵션을 지원합니다. 하나는 &lt;a href=&quot;../howto/deployment/wsgi/uwsgi&quot;&gt;uWSGI입니다&lt;/a&gt; . 그것은 &lt;a href=&quot;https://nginx.org/&quot;&gt;nginx&lt;/a&gt; 와 매우 잘 작동합니다 . 또한 Django는 WSGI 사양 ( &lt;a href=&quot;https://www.python.org/dev/peps/pep-3333&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;PEP 3333&lt;/strong&gt;&lt;/a&gt; )을 준수하여 다양한 서버 플랫폼에서 실행할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="714e0fc374856568ae969db6c05be8f214cc209c" translate="yes" xml:space="preserve">
          <source>If you catch exceptions raised by raw SQL queries, Django&amp;rsquo;s behavior is unspecified and database-dependent.</source>
          <target state="translated">원시 SQL 쿼리에서 발생한 예외를 발견하면 장고의 동작은 지정되지 않으며 데이터베이스에 따라 다릅니다.</target>
        </trans-unit>
        <trans-unit id="94e38667622f6c2c7156cdc76fe9c7801210a45e" translate="yes" xml:space="preserve">
          <source>If you customized the Python or OSGeo4W installation directories, then you will need to modify the &lt;code&gt;OSGEO4W_ROOT&lt;/code&gt; and/or &lt;code&gt;PYTHON_ROOT&lt;/code&gt; variables accordingly.</source>
          <target state="translated">Python 또는 OSGeo4W 설치 디렉토리를 사용자 정의한 경우 그에 따라 &lt;code&gt;OSGEO4W_ROOT&lt;/code&gt; 및 / 또는 &lt;code&gt;PYTHON_ROOT&lt;/code&gt; 변수 를 수정해야합니다 .</target>
        </trans-unit>
        <trans-unit id="daa850f3332eec5c502db816abab6725f3877956" translate="yes" xml:space="preserve">
          <source>If you decide not to loop over the radio buttons &amp;ndash; e.g., if your template includes &lt;code&gt;{{ myform.beatles }}&lt;/code&gt; &amp;ndash; they&amp;rsquo;ll be output in a &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; with &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; tags, as above.</source>
          <target state="translated">예를 들어 템플릿에 &lt;code&gt;{{ myform.beatles }}&lt;/code&gt; 포함 된 라디오 버튼을 반복하지 않으려 는 경우 위와 같이 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 태그 와 함께 &amp;lt; &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; 로 출력됩니다 .</target>
        </trans-unit>
        <trans-unit id="6e464f5ba0eea9891fc2679642fe2eb1b677c058" translate="yes" xml:space="preserve">
          <source>If you decide to use the latest development version of Django, you&amp;rsquo;ll want to pay close attention to &lt;a href=&quot;https://code.djangoproject.com/timeline&quot;&gt;the development timeline&lt;/a&gt;, and you&amp;rsquo;ll want to keep an eye on the &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/releases/index/#development-release-notes&quot;&gt;release notes for the upcoming release&lt;/a&gt;. This will help you stay on top of any new features you might want to use, as well as any changes you&amp;rsquo;ll need to make to your code when updating your copy of Django. (For stable releases, any necessary changes are documented in the release notes.)</source>
          <target state="translated">Django의 최신 개발 버전을 사용하기로 결정한 경우 &lt;a href=&quot;https://code.djangoproject.com/timeline&quot;&gt;개발 타임 라인에&lt;/a&gt; 주의를 기울이고 다음 &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/releases/index/#development-release-notes&quot;&gt;릴리스&lt;/a&gt; 에 대한 릴리스 정보 를 계속 확인하고 싶을 것 입니다. 이를 통해 사용하려는 새로운 기능과 Django 사본을 업데이트 할 때 코드를 변경해야 할 사항을 파악할 수 있습니다. 안정적인 릴리스를 위해 필요한 변경 내용이 릴리스 정보에 설명되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="ad704302a2e0f4e5bbd68ed3a827973dea658d2e" translate="yes" xml:space="preserve">
          <source>If you define a custom &lt;a href=&quot;#std:setting-LANGUAGES&quot;&gt;&lt;code&gt;LANGUAGES&lt;/code&gt;&lt;/a&gt; setting, you can mark the language names as translation strings using the &lt;a href=&quot;utils#django.utils.translation.gettext_lazy&quot;&gt;&lt;code&gt;gettext_lazy()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">사용자 정의 &lt;a href=&quot;#std:setting-LANGUAGES&quot;&gt; &lt;code&gt;LANGUAGES&lt;/code&gt; &lt;/a&gt; 설정 을 정의 하면 &lt;a href=&quot;utils#django.utils.translation.gettext_lazy&quot;&gt; &lt;code&gt;gettext_lazy()&lt;/code&gt; &lt;/a&gt; 함수를 사용하여 언어 이름을 번역 문자열로 표시 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="b08ee922d63ba491bb2cdb4cdfbeae244906b41e" translate="yes" xml:space="preserve">
          <source>If you define a custom &lt;a href=&quot;../../ref/settings#std:setting-LANGUAGES&quot;&gt;&lt;code&gt;LANGUAGES&lt;/code&gt;&lt;/a&gt; setting, as explained in the previous bullet, you can mark the language names as translation strings &amp;ndash; but use &lt;a href=&quot;../../ref/utils#django.utils.translation.gettext_lazy&quot;&gt;&lt;code&gt;gettext_lazy()&lt;/code&gt;&lt;/a&gt; instead of &lt;a href=&quot;../../ref/utils#django.utils.translation.gettext&quot;&gt;&lt;code&gt;gettext()&lt;/code&gt;&lt;/a&gt; to avoid a circular import.</source>
          <target state="translated">이전 글 머리표에서 설명한대로 사용자 정의 &lt;a href=&quot;../../ref/settings#std:setting-LANGUAGES&quot;&gt; &lt;code&gt;LANGUAGES&lt;/code&gt; &lt;/a&gt; 설정 을 정의 하면 언어 이름을 변환 문자열로 표시 할 수 있지만 순환 가져 오기를 피하려면 &lt;a href=&quot;../../ref/utils#django.utils.translation.gettext&quot;&gt; &lt;code&gt;gettext()&lt;/code&gt; &lt;/a&gt; 대신 &lt;a href=&quot;../../ref/utils#django.utils.translation.gettext_lazy&quot;&gt; &lt;code&gt;gettext_lazy()&lt;/code&gt; &lt;/a&gt; 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="fcb6c3e1edc1b97b11ed2b6af3ff6371f63271e0" translate="yes" xml:space="preserve">
          <source>If you define the &lt;code&gt;Meta.model&lt;/code&gt; attribute on a &lt;a href=&quot;../../../topics/forms/modelforms#django.forms.ModelForm&quot;&gt;&lt;code&gt;ModelForm&lt;/code&gt;&lt;/a&gt;, you must also define the &lt;code&gt;Meta.fields&lt;/code&gt; attribute (or the &lt;code&gt;Meta.exclude&lt;/code&gt; attribute). However, &lt;code&gt;ModelAdmin&lt;/code&gt; ignores this value, overriding it with the &lt;a href=&quot;#django.contrib.admin.ModelAdmin.list_editable&quot;&gt;&lt;code&gt;ModelAdmin.list_editable&lt;/code&gt;&lt;/a&gt; attribute. The easiest solution is to omit the &lt;code&gt;Meta.model&lt;/code&gt; attribute, since &lt;code&gt;ModelAdmin&lt;/code&gt; will provide the correct model to use.</source>
          <target state="translated">당신이 정의하는 경우 &lt;code&gt;Meta.model&lt;/code&gt; 의 A의 속성을 &lt;a href=&quot;../../../topics/forms/modelforms#django.forms.ModelForm&quot;&gt; &lt;code&gt;ModelForm&lt;/code&gt; &lt;/a&gt; , 당신은 또한 정의해야합니다 &lt;code&gt;Meta.fields&lt;/code&gt; 의 속성 (또는 &lt;code&gt;Meta.exclude&lt;/code&gt; 의 속성). 그러나 &lt;code&gt;ModelAdmin&lt;/code&gt; 은이 값을 무시하고 &lt;a href=&quot;#django.contrib.admin.ModelAdmin.list_editable&quot;&gt; &lt;code&gt;ModelAdmin.list_editable&lt;/code&gt; &lt;/a&gt; 속성으로 대체 합니다. &lt;code&gt;ModelAdmin&lt;/code&gt; 이 사용할 올바른 모델을 제공 하므로 가장 쉬운 솔루션은 &lt;code&gt;Meta.model&lt;/code&gt; 속성 을 생략하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="485fe478429ed2c9c1a4f227e8e46539022690b8" translate="yes" xml:space="preserve">
          <source>If you define the &lt;code&gt;Meta.model&lt;/code&gt; attribute on a &lt;a href=&quot;../../../topics/forms/modelforms#django.forms.ModelForm&quot;&gt;&lt;code&gt;ModelForm&lt;/code&gt;&lt;/a&gt;, you must also define the &lt;code&gt;Meta.fields&lt;/code&gt; attribute (or the &lt;code&gt;Meta.exclude&lt;/code&gt; attribute). However, since the admin has its own way of defining fields, the &lt;code&gt;Meta.fields&lt;/code&gt; attribute will be ignored.</source>
          <target state="translated">당신이 정의하는 경우 &lt;code&gt;Meta.model&lt;/code&gt; 의 A의 속성을 &lt;a href=&quot;../../../topics/forms/modelforms#django.forms.ModelForm&quot;&gt; &lt;code&gt;ModelForm&lt;/code&gt; &lt;/a&gt; , 당신은 또한 정의해야합니다 &lt;code&gt;Meta.fields&lt;/code&gt; 의 속성 (또는 &lt;code&gt;Meta.exclude&lt;/code&gt; 의 속성). 그러나 관리자는 필드를 정의하는 고유 한 방법이 있으므로 &lt;code&gt;Meta.fields&lt;/code&gt; 속성은 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="45386bfd1f22aa5a94eb25eb7ab85058786a5cc9" translate="yes" xml:space="preserve">
          <source>If you define your own test runner class and point &lt;a href=&quot;../../ref/settings#std:setting-TEST_RUNNER&quot;&gt;&lt;code&gt;TEST_RUNNER&lt;/code&gt;&lt;/a&gt; at that class, Django will execute your test runner whenever you run &lt;code&gt;./manage.py test&lt;/code&gt;. In this way, it is possible to use any test framework that can be executed from Python code, or to modify the Django test execution process to satisfy whatever testing requirements you may have.</source>
          <target state="translated">자체 테스트 러너 클래스를 정의 하고 해당 클래스에서 &lt;a href=&quot;../../ref/settings#std:setting-TEST_RUNNER&quot;&gt; &lt;code&gt;TEST_RUNNER&lt;/code&gt; &lt;/a&gt; 를 가리키면 Django는 &lt;code&gt;./manage.py test&lt;/code&gt; 를 실행할 때마다 테스트 러너를 실행 합니다. 이런 식으로 Python 코드에서 실행할 수있는 테스트 프레임 워크를 사용하거나 Django 테스트 실행 프로세스를 수정하여 테스트 요구 사항을 충족시킬 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ea90d73bc6981a1948260ffdf5034a68bee6dab3" translate="yes" xml:space="preserve">
          <source>If you delete a field from a model instance, accessing it again reloads the value from the database:</source>
          <target state="translated">모델 인스턴스에서 필드를 삭제하면 다시 액세스하면 데이터베이스에서 값이 다시로드됩니다.</target>
        </trans-unit>
        <trans-unit id="cff220c390a9ab95545f838c9087be24651f1351" translate="yes" xml:space="preserve">
          <source>If you delete a reporter, his articles will be deleted (assuming that the ForeignKey was defined with &lt;a href=&quot;../../../ref/models/fields#django.db.models.ForeignKey.on_delete&quot;&gt;&lt;code&gt;django.db.models.ForeignKey.on_delete&lt;/code&gt;&lt;/a&gt; set to &lt;code&gt;CASCADE&lt;/code&gt;, which is the default):</source>
          <target state="translated">리포터를 삭제하면 그의 기사가 삭제됩니다 ( &lt;a href=&quot;../../../ref/models/fields#django.db.models.ForeignKey.on_delete&quot;&gt; &lt;code&gt;django.db.models.ForeignKey.on_delete&lt;/code&gt; &lt;/a&gt; 가 django.db.models.ForeignKey.on_delete 가 &lt;code&gt;CASCADE&lt;/code&gt; 로 설정된 것으로 가정 한 경우 ).</target>
        </trans-unit>
        <trans-unit id="d6c2e53ecc92c0f84dc913ba54c33563aaf304cc" translate="yes" xml:space="preserve">
          <source>If you detect errors in multiple fields during &lt;code&gt;Model.clean()&lt;/code&gt;, you can also pass a dictionary mapping field names to errors:</source>
          <target state="translated">&lt;code&gt;Model.clean()&lt;/code&gt; 중에 여러 필드에서 오류를 감지 하면 사전 맵핑 필드 이름을 오류에 전달할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="48e44cf0802dee16054df73fe1871ad99f86e145" translate="yes" xml:space="preserve">
          <source>If you detect multiple errors during a cleaning method and wish to signal all of them to the form submitter, it is possible to pass a list of errors to the &lt;code&gt;ValidationError&lt;/code&gt; constructor.</source>
          <target state="translated">정리 방법 중 여러 오류를 감지하고 모든 오류를 양식 제출자에게 알리려면 오류 목록을 &lt;code&gt;ValidationError&lt;/code&gt; 생성자 에 전달할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="4cb2bdf9479ffe7ea003c7007bb350d20e0ee892" translate="yes" xml:space="preserve">
          <source>If you disabled it, which is not recommended, you can use &lt;a href=&quot;#django.views.decorators.csrf.csrf_protect&quot;&gt;&lt;code&gt;csrf_protect()&lt;/code&gt;&lt;/a&gt; on particular views you want to protect (see below).</source>
          <target state="translated">비활성화 한 경우 (권장하지 않음 &lt;a href=&quot;#django.views.decorators.csrf.csrf_protect&quot;&gt; &lt;code&gt;csrf_protect()&lt;/code&gt; &lt;/a&gt; 보호하려는 특정보기에서 csrf_protect () 를 사용할 수 있습니다 (아래 참조).</target>
        </trans-unit>
        <trans-unit id="2479d1d20a26faec2996d634b0774780be84066c" translate="yes" xml:space="preserve">
          <source>If you do either of the first two steps, keep an eye out for parts of the documentation marked &lt;strong&gt;new in development version&lt;/strong&gt;. That phrase flags features that are only available in development versions of Django, and they likely won&amp;rsquo;t work with an official release.</source>
          <target state="translated">처음 두 단계 중 하나를 수행하는 경우 &lt;strong&gt;개발 버전에서 새로&lt;/strong&gt; 표시된 문서의 일부를 주시하십시오 . 이 문구는 Django의 개발 버전에서만 사용할 수있는 기능을 표시하며 공식 릴리스에서는 작동하지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2aaa0c487bb4c6a6eabbf43dd80c991c63a022d7" translate="yes" xml:space="preserve">
          <source>If you do not specify any app, all apps will be checked.</source>
          <target state="translated">앱을 지정하지 않으면 모든 앱이 확인됩니다.</target>
        </trans-unit>
        <trans-unit id="4141223977e7c136210c586bc61b2fd0accffd3c" translate="yes" xml:space="preserve">
          <source>If you do not specify the &lt;a href=&quot;#django.db.models.ForeignKey.related_name&quot;&gt;&lt;code&gt;related_name&lt;/code&gt;&lt;/a&gt; argument for the &lt;code&gt;OneToOneField&lt;/code&gt;, Django will use the lowercase name of the current model as default value.</source>
          <target state="translated">&lt;code&gt;OneToOneField&lt;/code&gt; 에&lt;a href=&quot;#django.db.models.ForeignKey.related_name&quot;&gt; &lt;code&gt;related_name&lt;/code&gt; &lt;/a&gt; 인수를 지정하지 않으면 Django는 현재 모델의 소문자 이름을 기본값으로 사용합니다.</target>
        </trans-unit>
        <trans-unit id="d8109cdfe40c6ccae39110a25cad8a7f109000c4" translate="yes" xml:space="preserve">
          <source>If you do not want symmetry in many-to-many relationships with &lt;code&gt;self&lt;/code&gt;, set &lt;a href=&quot;#django.db.models.ManyToManyField.symmetrical&quot;&gt;&lt;code&gt;symmetrical&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;False&lt;/code&gt;. This will force Django to add the descriptor for the reverse relationship, allowing &lt;a href=&quot;#django.db.models.ManyToManyField&quot;&gt;&lt;code&gt;ManyToManyField&lt;/code&gt;&lt;/a&gt; relationships to be non-symmetrical.</source>
          <target state="translated">&lt;code&gt;self&lt;/code&gt; 와의 다 대다 관계에서 대칭을 원하지 않으면 &lt;a href=&quot;#django.db.models.ManyToManyField.symmetrical&quot;&gt; &lt;code&gt;symmetrical&lt;/code&gt; &lt;/a&gt; 을 &lt;code&gt;False&lt;/code&gt; 로 설정하십시오 . 이렇게하면 Django가 역 관계에 대한 설명자를 추가하여 &lt;a href=&quot;#django.db.models.ManyToManyField&quot;&gt; &lt;code&gt;ManyToManyField&lt;/code&gt; &lt;/a&gt; 관계가 비대칭이되도록합니다.</target>
        </trans-unit>
        <trans-unit id="d7c82087cc8221fab70b35945b3651dea07d149a" translate="yes" xml:space="preserve">
          <source>If you do not want to wait for the currently running test to finish, you can press &lt;code&gt;Ctrl-C&lt;/code&gt; a second time and the test run will halt immediately, but not gracefully. No details of the tests run before the interruption will be reported, and any test databases created by the run will not be destroyed.</source>
          <target state="translated">현재 실행중인 테스트가 끝날 때까지 기다리지 않으려면 &lt;code&gt;Ctrl-C&lt;/code&gt; 를 두 번 누르면 테스트 실행이 즉시 중단되지만 정상적으로 실행되지는 않습니다. 중단 전에 실행 된 테스트에 대한 세부 사항은보고되지 않으며 실행으로 작성된 테스트 데이터베이스는 파기되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="18efad3241b2dca59f5e6839d85c3fd25968e685" translate="yes" xml:space="preserve">
          <source>If you do not wish for every occurrence of a particular string to have the same signature hash, you can use the optional &lt;code&gt;salt&lt;/code&gt; argument to the &lt;code&gt;Signer&lt;/code&gt; class. Using a salt will seed the signing hash function with both the salt and your &lt;a href=&quot;../ref/settings#std:setting-SECRET_KEY&quot;&gt;&lt;code&gt;SECRET_KEY&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">특정 문자열이 발생할 때마다 동일한 서명 해시를 가지지 않으려면 선택적 &lt;code&gt;salt&lt;/code&gt; 인수를 &lt;code&gt;Signer&lt;/code&gt; 클래스에 사용할 수 있습니다 . 솔트를 사용하면 솔트와 &lt;a href=&quot;../ref/settings#std:setting-SECRET_KEY&quot;&gt; &lt;code&gt;SECRET_KEY&lt;/code&gt; &lt;/a&gt; 모두에 서명 해시 함수가 시드됩니다 .</target>
        </trans-unit>
        <trans-unit id="0bfd8f75b46ff74579ca2af7a7939f691c4a818d" translate="yes" xml:space="preserve">
          <source>If you do override this method, you must return the value of the attribute at the end. You should also update the model&amp;rsquo;s attribute if you make any changes to the value so that code holding references to the model will always see the correct value.</source>
          <target state="translated">이 메소드를 대체하면 끝에 속성 값을 리턴해야합니다. 모델을 참조하는 코드가 항상 올바른 값을 볼 수 있도록 값을 변경하는 경우 모델의 속성도 업데이트해야합니다.</target>
        </trans-unit>
        <trans-unit id="3bc531fc3e6fe0dda101c4233233899fb5df0175" translate="yes" xml:space="preserve">
          <source>If you do want to allow Django to manage the table&amp;rsquo;s lifecycle, you&amp;rsquo;ll need to change the &lt;a href=&quot;../ref/models/options#django.db.models.Options.managed&quot;&gt;&lt;code&gt;managed&lt;/code&gt;&lt;/a&gt; option above to &lt;code&gt;True&lt;/code&gt; (or remove it because &lt;code&gt;True&lt;/code&gt; is its default value).</source>
          <target state="translated">Django가 테이블의 수명주기를 관리하게하려면 위 의 &lt;a href=&quot;../ref/models/options#django.db.models.Options.managed&quot;&gt; &lt;code&gt;managed&lt;/code&gt; &lt;/a&gt; 옵션을 &lt;code&gt;True&lt;/code&gt; 로 변경 하거나 &lt;code&gt;True&lt;/code&gt; 가 기본값 이므로 제거해야합니다 .</target>
        </trans-unit>
        <trans-unit id="94bbf9a3b61ed7ba431cfe4c7c55a2f5b58d406a" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t have &lt;code&gt;pip&lt;/code&gt;, follow the &lt;a href=&quot;../../../../topics/install#installing-official-release&quot;&gt;installation instructions&lt;/a&gt; to install it.</source>
          <target state="translated">당신이없는 경우 &lt;code&gt;pip&lt;/code&gt; 의 따라 &lt;a href=&quot;../../../../topics/install#installing-official-release&quot;&gt;설치 지침을&lt;/a&gt; 설치 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="83b4541d75cf80e630fb9cb0eae0f6dcce396113" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t have access to the request object, you can use the &lt;code&gt;get_current()&lt;/code&gt; method of the &lt;a href=&quot;#django.contrib.sites.models.Site&quot;&gt;&lt;code&gt;Site&lt;/code&gt;&lt;/a&gt; model&amp;rsquo;s manager. You should then ensure that your settings file does contain the &lt;a href=&quot;../settings#std:setting-SITE_ID&quot;&gt;&lt;code&gt;SITE_ID&lt;/code&gt;&lt;/a&gt; setting. This example is equivalent to the previous one:</source>
          <target state="translated">요청 객체에 액세스 할 수없는 경우 &lt;a href=&quot;#django.contrib.sites.models.Site&quot;&gt; &lt;code&gt;Site&lt;/code&gt; &lt;/a&gt; 모델 관리자 의 &lt;code&gt;get_current()&lt;/code&gt; 메소드를 사용할 수 있습니다 . 그런 다음 설정 파일에 &lt;a href=&quot;../settings#std:setting-SITE_ID&quot;&gt; &lt;code&gt;SITE_ID&lt;/code&gt; &lt;/a&gt; 설정 이 포함되어 있는지 확인해야 합니다. 이 예제는 이전 예제와 동일합니다.</target>
        </trans-unit>
        <trans-unit id="6e6f1ebd340eb9d605be9c4db45ebb236fd2e050" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t have the &lt;code&gt;gettext&lt;/code&gt; utilities installed, &lt;a href=&quot;../../ref/django-admin#django-admin-makemessages&quot;&gt;&lt;code&gt;makemessages&lt;/code&gt;&lt;/a&gt; will create empty files. If that&amp;rsquo;s the case, either install the &lt;code&gt;gettext&lt;/code&gt; utilities or copy the English message file (&lt;code&gt;locale/en/LC_MESSAGES/django.po&lt;/code&gt;) if available and use it as a starting point, which is an empty translation file.</source>
          <target state="translated">&lt;code&gt;gettext&lt;/code&gt; 유틸리티가 설치되어 있지 않으면 &lt;a href=&quot;../../ref/django-admin#django-admin-makemessages&quot;&gt; &lt;code&gt;makemessages&lt;/code&gt; &lt;/a&gt; 가 빈 파일을 만듭니다. 이 경우 &lt;code&gt;gettext&lt;/code&gt; 유틸리티 를 설치 하거나 영어 메시지 파일 ( &lt;code&gt;locale/en/LC_MESSAGES/django.po&lt;/code&gt; )을 복사하여 시작점으로 사용하십시오 (빈 번역 파일).</target>
        </trans-unit>
        <trans-unit id="4f1d2a7a739cbcb4a30351e90054953707bb1564" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t include the &lt;a href=&quot;#django.contrib.auth.models.PermissionsMixin&quot;&gt;&lt;code&gt;PermissionsMixin&lt;/code&gt;&lt;/a&gt;, you must ensure you don&amp;rsquo;t invoke the permissions methods on &lt;code&gt;ModelBackend&lt;/code&gt;. &lt;code&gt;ModelBackend&lt;/code&gt; assumes that certain fields are available on your user model. If your user model doesn&amp;rsquo;t provide those fields, you&amp;rsquo;ll receive database errors when you check permissions.</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.auth.models.PermissionsMixin&quot;&gt; &lt;code&gt;PermissionsMixin&lt;/code&gt; 을&lt;/a&gt; 포함 하지 않으면 &lt;code&gt;ModelBackend&lt;/code&gt; 에서 권한 메소드를 호출하지 않아야합니다 . &lt;code&gt;ModelBackend&lt;/code&gt; 는 사용자 필드에서 특정 필드를 사용할 수 있다고 가정합니다. 사용자 모델이 해당 필드를 제공하지 않으면 권한을 확인할 때 데이터베이스 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="35899ce1414f3555035a9788cf172f76ca6773ef" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t like the long &lt;code&gt;gettext_lazy&lt;/code&gt; name, you can alias it as &lt;code&gt;_&lt;/code&gt; (underscore), like so:</source>
          <target state="translated">긴 &lt;code&gt;gettext_lazy&lt;/code&gt; 이름 이 마음에 들지 않으면 다음과 같이 별명을 &lt;code&gt;_&lt;/code&gt; (밑줄) 로 지정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e7c2f2ae002997f7ed67a2217c27f8708bf96ef6" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t need to have the human-readable names translated, you can have them inferred from the member name (replacing underscores with spaces and using title-case):</source>
          <target state="translated">사람이 읽을 수있는 이름을 번역 할 필요가없는 경우 멤버 이름에서 공백을 사용하여 밑줄을 바꾸고 제목을 사용하여 이름을 추론 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8611658ee88ea0ad3dcc2ed7a1a97af6dae4a361" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t pass any values to &lt;code&gt;values_list()&lt;/code&gt;, it will return all the fields in the model, in the order they were declared.</source>
          <target state="translated">&lt;code&gt;values_list()&lt;/code&gt; 값을 전달하지 않으면 선언 된 순서대로 모델의 모든 필드가 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="857e12793ad461caf04fff1ba581da785c3a5bcb" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t provide a lookup type &amp;ndash; that is, if your keyword argument doesn&amp;rsquo;t contain a double underscore &amp;ndash; the lookup type is assumed to be &lt;code&gt;exact&lt;/code&gt;.</source>
          <target state="translated">조회 유형을 제공하지 않으면, 즉 키워드 인수에 이중 밑줄이없는 경우 조회 유형은 &lt;code&gt;exact&lt;/code&gt; 것으로 간주됩니다 .</target>
        </trans-unit>
        <trans-unit id="b49754202789d5dcf7dd5093a036116cfc0b7e7b" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t provide a value for &lt;code&gt;content_type&lt;/code&gt;, the values in &lt;code&gt;data&lt;/code&gt; will be transmitted with a content type of &lt;em&gt;multipart/form-data&lt;/em&gt;. In this case, the key-value pairs in &lt;code&gt;data&lt;/code&gt; will be encoded as a multipart message and used to create the POST data payload.</source>
          <target state="translated">&lt;code&gt;content_type&lt;/code&gt; 에 값을 제공하지 않으면 &lt;code&gt;data&lt;/code&gt; 의 값 이 &lt;em&gt;multipart / form-data&lt;/em&gt; 의 컨텐츠 유형으로 전송됩니다 . 이 경우 &lt;code&gt;data&lt;/code&gt; 의 키-값 쌍은 멀티 파트 메시지로 인코딩되어 POST 데이터 페이로드를 작성하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="dd179816ea4797c0c27e26002186e53c76cd44e3" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t set &lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt; and don&amp;rsquo;t call &lt;code&gt;configure()&lt;/code&gt;, Django will raise an &lt;code&gt;ImportError&lt;/code&gt; exception the first time a setting is accessed.</source>
          <target state="translated">&lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt; 을 설정 하지 않고 &lt;code&gt;configure()&lt;/code&gt; 호출하지 않으면 Django는 설정에 처음 액세스 할 때 &lt;code&gt;ImportError&lt;/code&gt; 예외를 발생시킵니다.</target>
        </trans-unit>
        <trans-unit id="6d28696ece852d234602878e925455bc5844a029" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t set &lt;code&gt;list_display&lt;/code&gt;, the admin site will display a single column that displays the &lt;code&gt;__str__()&lt;/code&gt; representation of each object.</source>
          <target state="translated">&lt;code&gt;list_display&lt;/code&gt; 를 설정하지 않으면 관리 사이트는 각 객체 의 &lt;code&gt;__str__()&lt;/code&gt; 표현을 표시하는 단일 열을 표시 합니다.</target>
        </trans-unit>
        <trans-unit id="a163d2bcd9e6db7c5ea4d04d3672fd598949d73a" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t specify &lt;a href=&quot;../../ref/models/fields#django.db.models.Field.primary_key&quot;&gt;&lt;code&gt;primary_key=True&lt;/code&gt;&lt;/a&gt; for any fields in your model, Django will automatically add an &lt;a href=&quot;../../ref/models/fields#django.db.models.IntegerField&quot;&gt;&lt;code&gt;IntegerField&lt;/code&gt;&lt;/a&gt; to hold the primary key, so you don&amp;rsquo;t need to set &lt;a href=&quot;../../ref/models/fields#django.db.models.Field.primary_key&quot;&gt;&lt;code&gt;primary_key=True&lt;/code&gt;&lt;/a&gt; on any of your fields unless you want to override the default primary-key behavior. For more, see &lt;a href=&quot;#automatic-primary-key-fields&quot;&gt;Automatic primary key fields&lt;/a&gt;.</source>
          <target state="translated">당신은 지정하지 않으면 &lt;a href=&quot;../../ref/models/fields#django.db.models.Field.primary_key&quot;&gt; &lt;code&gt;primary_key=True&lt;/code&gt; &lt;/a&gt; 모델의 모든 필드를 장고가 자동으로 추가됩니다 &lt;a href=&quot;../../ref/models/fields#django.db.models.IntegerField&quot;&gt; &lt;code&gt;IntegerField&lt;/code&gt; 을&lt;/a&gt; 당신이 세트 필요가 없습니다, 기본 키를 길게 &lt;a href=&quot;../../ref/models/fields#django.db.models.Field.primary_key&quot;&gt; &lt;code&gt;primary_key=True&lt;/code&gt; &lt;/a&gt; 당신이를 오버라이드 (override) 할하지 않는 한 모든 필드에 기본 기본 키 동작. 자세한 내용은 &lt;a href=&quot;#automatic-primary-key-fields&quot;&gt;자동 기본 키 필드를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="590c6fe5a79ddb6a0fb543209eff8fe3de9cd579" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t specify &lt;code&gt;primary_key=True&lt;/code&gt; for any field in your model, Django will automatically add an &lt;a href=&quot;#django.db.models.AutoField&quot;&gt;&lt;code&gt;AutoField&lt;/code&gt;&lt;/a&gt; to hold the primary key, so you don&amp;rsquo;t need to set &lt;code&gt;primary_key=True&lt;/code&gt; on any of your fields unless you want to override the default primary-key behavior. For more, see &lt;a href=&quot;../../topics/db/models#automatic-primary-key-fields&quot;&gt;Automatic primary key fields&lt;/a&gt;.</source>
          <target state="translated">당신은 지정하지 않으면 &lt;code&gt;primary_key=True&lt;/code&gt; 모델의 모든 필드를 들어, 장고가 자동으로 추가됩니다 &lt;a href=&quot;#django.db.models.AutoField&quot;&gt; &lt;code&gt;AutoField&lt;/code&gt; 을&lt;/a&gt; 당신이 세트 필요가 없습니다, 기본 키를 길게 &lt;code&gt;primary_key=True&lt;/code&gt; 당신이를 오버라이드 (override) 할하지 않는 한 모든 필드에 기본 기본 키 동작. 자세한 내용은 &lt;a href=&quot;../../topics/db/models#automatic-primary-key-fields&quot;&gt;자동 기본 키 필드를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="04c0cebe040a5a95be05e16a67b332d448a4cdf2" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t specify &lt;code&gt;using&lt;/code&gt;, the &lt;code&gt;save()&lt;/code&gt; method will save into the default database allocated by the routers.</source>
          <target state="translated">당신은 지정하지 않으면 &lt;code&gt;using&lt;/code&gt; 의 &lt;code&gt;save()&lt;/code&gt; 메소드는 라우터에 의해 할당 된 기본 데이터베이스에 저장합니다.</target>
        </trans-unit>
        <trans-unit id="538f16b988998147ff60490597be28bc48eafdda" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t specify a &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey.related_name&quot;&gt;&lt;code&gt;related_name&lt;/code&gt;&lt;/a&gt; attribute for a field in an abstract base class, the default reverse name will be the name of the child class followed by &lt;code&gt;'_set'&lt;/code&gt;, just as it normally would be if you&amp;rsquo;d declared the field directly on the child class. For example, in the above code, if the &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey.related_name&quot;&gt;&lt;code&gt;related_name&lt;/code&gt;&lt;/a&gt; attribute was omitted, the reverse name for the &lt;code&gt;m2m&lt;/code&gt; field would be &lt;code&gt;childa_set&lt;/code&gt; in the &lt;code&gt;ChildA&lt;/code&gt; case and &lt;code&gt;childb_set&lt;/code&gt; for the &lt;code&gt;ChildB&lt;/code&gt; field.</source>
          <target state="translated">추상 기본 클래스의 필드에 &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey.related_name&quot;&gt; &lt;code&gt;related_name&lt;/code&gt; &lt;/a&gt; 속성을 지정하지 않으면 기본 리버스 이름은 일반적으로 필드를 직접 선언 한 경우와 마찬가지로 자식 클래스의 이름과 &lt;code&gt;'_set'&lt;/code&gt; 이 됩니다. 어린이 수업에. 예를 들면, 상기 코드에서, &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey.related_name&quot;&gt; &lt;code&gt;related_name&lt;/code&gt; 의&lt;/a&gt; 속성이 생략하고, 역방향에 대한 이름 &lt;code&gt;m2m&lt;/code&gt; 필드는 다음 &lt;code&gt;childa_set&lt;/code&gt; 에 &lt;code&gt;ChildA&lt;/code&gt; 의 케이스 &lt;code&gt;childb_set&lt;/code&gt; 위한 &lt;code&gt;ChildB&lt;/code&gt; 의 필드.</target>
        </trans-unit>
        <trans-unit id="d339100c909e90a9e5e2bd7aa909352403fa7c4f" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t specify an explicit &lt;code&gt;through&lt;/code&gt; model, there is still an implicit &lt;code&gt;through&lt;/code&gt; model class you can use to directly access the table created to hold the association. It has three fields to link the models.</source>
          <target state="translated">명시 적 &lt;code&gt;through&lt;/code&gt; 모델을 지정하지 않은 경우 연결을 유지하기 위해 생성 된 테이블에 직접 액세스하는 데 사용할 수 있는 암시 적 &lt;code&gt;through&lt;/code&gt; 모델 클래스 가 여전히 있습니다. 모델을 연결하는 3 개의 필드가 있습니다.</target>
        </trans-unit>
        <trans-unit id="666775cf1efa55d8c53fada8a23701a9987dd988" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t specify any model managers on a proxy model, it inherits the managers from its model parents. If you define a manager on the proxy model, it will become the default, although any managers defined on the parent classes will still be available.</source>
          <target state="translated">프록시 모델에 모델 관리자를 지정하지 않으면 모델 상위에서 관리자를 상속합니다. 프록시 모델에서 관리자를 정의하면 상위 클래스에 정의 된 모든 관리자를 계속 사용할 수 있지만 기본값이됩니다.</target>
        </trans-unit>
        <trans-unit id="2831dc2c926cb081c9cc4a7a2bc6243fa61db6a9" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t specify routing directions for the database cache model, the cache backend will use the &lt;code&gt;default&lt;/code&gt; database.</source>
          <target state="translated">데이터베이스 캐시 모델에 대한 라우팅 방향을 지정하지 않으면 캐시 백엔드는 &lt;code&gt;default&lt;/code&gt; 데이터베이스를 사용 합니다.</target>
        </trans-unit>
        <trans-unit id="fd4f5afea03a0462ac45abaffd1965ddce74ce84" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t want any ordering to be applied to a query, not even the default ordering, call &lt;a href=&quot;#django.db.models.query.QuerySet.order_by&quot;&gt;&lt;code&gt;order_by()&lt;/code&gt;&lt;/a&gt; with no parameters.</source>
          <target state="translated">기본 순서가 아닌 쿼리에 순서를 적용하지 않으려면 매개 변수없이 &lt;a href=&quot;#django.db.models.query.QuerySet.order_by&quot;&gt; &lt;code&gt;order_by()&lt;/code&gt; &lt;/a&gt; 를 호출하십시오 .</target>
        </trans-unit>
        <trans-unit id="02f361b8fc537e98dc07890f9bf542dd0f12b07f" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t want data to be auto-escaped, on a per-site, per-template level or per-variable level, you can turn it off in several ways.</source>
          <target state="translated">사이트 별, 템플릿 별 또는 변수 별 수준에서 데이터를 자동 이스케이프하지 않으려면 여러 가지 방법으로 데이터를 끌 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="10b519cb1d07a83a7e8a3c4a687450cc5ea4bc3e" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t want every application to be synchronized onto a particular database, you can define a &lt;a href=&quot;#topics-db-multi-db-routing&quot;&gt;database router&lt;/a&gt; that implements a policy constraining the availability of particular models.</source>
          <target state="translated">모든 응용 프로그램을 특정 데이터베이스에 동기화하지 않으려는 경우 특정 모델의 가용성을 제한하는 정책을 구현하는 &lt;a href=&quot;#topics-db-multi-db-routing&quot;&gt;데이터베이스 라우터&lt;/a&gt; 를 정의 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="35c4fdb0cd2c686ba39701ab3494c7c292bcb631" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t want to configure logging at all (or you want to manually configure logging using your own approach), you can set &lt;a href=&quot;../ref/settings#std:setting-LOGGING_CONFIG&quot;&gt;&lt;code&gt;LOGGING_CONFIG&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;None&lt;/code&gt;. This will disable the configuration process for &lt;a href=&quot;#default-logging-configuration&quot;&gt;Django&amp;rsquo;s default logging&lt;/a&gt;. Here&amp;rsquo;s an example that disables Django&amp;rsquo;s logging configuration and then manually configures logging:</source>
          <target state="translated">로깅을 전혀 구성하지 않으려는 경우 (또는 고유 한 방법을 사용하여 수동으로 로깅을 구성하려는 경우) &lt;a href=&quot;../ref/settings#std:setting-LOGGING_CONFIG&quot;&gt; &lt;code&gt;LOGGING_CONFIG&lt;/code&gt; &lt;/a&gt; 를 &lt;code&gt;None&lt;/code&gt; 으로 설정할 수 있습니다 . &lt;a href=&quot;#default-logging-configuration&quot;&gt;Django의 기본 로깅&lt;/a&gt; 구성 프로세스가 비활성화됩니다 . 다음은 Django의 로깅 구성을 비활성화 한 다음 로깅을 수동으로 구성하는 예입니다.</target>
        </trans-unit>
        <trans-unit id="77c86f64e5416c16d57ada9152596773e6ea1cc7" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t want to use &lt;code&gt;icontains&lt;/code&gt; as the lookup, you can use any lookup by appending it the field. For example, you could use &lt;a href=&quot;../../models/querysets#std:fieldlookup-exact&quot;&gt;&lt;code&gt;exact&lt;/code&gt;&lt;/a&gt; by setting &lt;code&gt;search_fields&lt;/code&gt; to &lt;code&gt;['first_name__exact']&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;icontains&lt;/code&gt; 을 조회 로 사용하지 않으려면 필드를 추가하여 모든 조회를 사용할 수 있습니다. 예를 들어 &lt;code&gt;search_fields&lt;/code&gt; 를 &lt;code&gt;['first_name__exact']&lt;/code&gt; 로 설정 하여 &lt;a href=&quot;../../models/querysets#std:fieldlookup-exact&quot;&gt; &lt;code&gt;exact&lt;/code&gt; &lt;/a&gt; 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="31395295db9a85690ee46840f48259811129865d" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t want to use Python&amp;rsquo;s dictConfig format to configure your logger, you can specify your own configuration scheme.</source>
          <target state="translated">파이썬의 dictConfig 형식을 사용하여 로거를 구성하지 않으려는 경우 고유 한 구성 체계를 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="515cdb51845c22c1192ff3cb9088b0aae43b5f38" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t want to use messages, you can remove &lt;code&gt;'django.contrib.messages'&lt;/code&gt; from your &lt;a href=&quot;../settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt;, the &lt;code&gt;MessageMiddleware&lt;/code&gt; line from &lt;a href=&quot;../settings#std:setting-MIDDLEWARE&quot;&gt;&lt;code&gt;MIDDLEWARE&lt;/code&gt;&lt;/a&gt;, and the &lt;code&gt;messages&lt;/code&gt; context processor from &lt;a href=&quot;../settings#std:setting-TEMPLATES&quot;&gt;&lt;code&gt;TEMPLATES&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">당신이 메시지를 사용하지 않으려면, 당신은 제거 할 수 있습니다 &lt;code&gt;'django.contrib.messages'&lt;/code&gt; 당신의 &lt;a href=&quot;../settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt; 의 &lt;code&gt;MessageMiddleware&lt;/code&gt; 의 에서 라인 &lt;a href=&quot;../settings#std:setting-MIDDLEWARE&quot;&gt; &lt;code&gt;MIDDLEWARE&lt;/code&gt; &lt;/a&gt; 및 &lt;code&gt;messages&lt;/code&gt; 에서 상황에 맞는 프로세서 &lt;a href=&quot;../settings#std:setting-TEMPLATES&quot;&gt; &lt;code&gt;TEMPLATES&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="9f7e47131b63bc56e18f6396512e77f9352c9650" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t want to use sessions, you might as well remove the &lt;code&gt;SessionMiddleware&lt;/code&gt; line from &lt;a href=&quot;../../ref/settings#std:setting-MIDDLEWARE&quot;&gt;&lt;code&gt;MIDDLEWARE&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;'django.contrib.sessions'&lt;/code&gt; from your &lt;a href=&quot;../../ref/settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt;. It&amp;rsquo;ll save you a small bit of overhead.</source>
          <target state="translated">세션을 사용하지 않으려면 &lt;a href=&quot;../../ref/settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt; 에서 &lt;a href=&quot;../../ref/settings#std:setting-MIDDLEWARE&quot;&gt; &lt;code&gt;MIDDLEWARE&lt;/code&gt; &lt;/a&gt; 및 &lt;code&gt;'django.contrib.sessions'&lt;/code&gt; 에서 &lt;code&gt;SessionMiddleware&lt;/code&gt; 라인을 제거하십시오 . 약간의 오버 헤드를 줄일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9b1a1786e7b1cf25c6aacb2f5b78f4da284e5c48" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t want to use the built-in views, but want the convenience of not having to write forms for this functionality, the authentication system provides several built-in forms located in &lt;a href=&quot;#module-django.contrib.auth.forms&quot;&gt;&lt;code&gt;django.contrib.auth.forms&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">내장보기를 사용하지 &lt;a href=&quot;#module-django.contrib.auth.forms&quot;&gt; &lt;code&gt;django.contrib.auth.forms&lt;/code&gt; &lt;/a&gt; 기능을 위해 양식을 작성하지 않아도되는 편의를 원할 경우 인증 시스템은 django.contrib.auth.forms 에있는 몇 가지 내장 양식을 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="5c568e3de4c1c7c6a2712e65c1fa4112cf06d36a" translate="yes" xml:space="preserve">
          <source>If you downloaded the &lt;a href=&quot;#worldborders&quot;&gt;World Borders&lt;/a&gt; data earlier in the tutorial, then you can determine its path using Python&amp;rsquo;s built-in &lt;code&gt;os&lt;/code&gt; module:</source>
          <target state="translated">튜토리얼의 앞부분에서 &lt;a href=&quot;#worldborders&quot;&gt;World Borders&lt;/a&gt; 데이터 를 다운로드 한 경우 Python의 내장 &lt;code&gt;os&lt;/code&gt; 모듈을 사용하여 경로를 확인할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="455d07668f86b3453aef324fdb20b370ef36fb11" translate="yes" xml:space="preserve">
          <source>If you enable &lt;code&gt;redirect_authenticated_user&lt;/code&gt;, other websites will be able to determine if their visitors are authenticated on your site by requesting redirect URLs to image files on your website. To avoid this &amp;ldquo;&lt;a href=&quot;https://robinlinus.github.io/socialmedia-leak/&quot;&gt;social media fingerprinting&lt;/a&gt;&amp;rdquo; information leakage, host all images and your favicon on a separate domain.</source>
          <target state="translated">&lt;code&gt;redirect_authenticated_user&lt;/code&gt; 를 활성화 하면 다른 웹 사이트에서 웹 사이트의 이미지 파일에 대한 리디렉션 URL을 요청하여 방문자가 사이트에서 인증되었는지 확인할 수 있습니다. 이러한 &quot; &lt;a href=&quot;https://robinlinus.github.io/socialmedia-leak/&quot;&gt;소셜 미디어 지문 인식&lt;/a&gt; &quot;정보 유출 을 방지하려면 모든 이미지와 즐겨 찾기 아이콘을 별도의 도메인에 호스팅하십시오.</target>
        </trans-unit>
        <trans-unit id="6de81e981c118fcef157137194f59e4a18089f15" translate="yes" xml:space="preserve">
          <source>If you enable the &lt;a href=&quot;../../ref/templates/api#django.template.context_processors.i18n&quot;&gt;&lt;code&gt;django.template.context_processors.i18n&lt;/code&gt;&lt;/a&gt; context processor, then each &lt;code&gt;RequestContext&lt;/code&gt; will have access to &lt;code&gt;LANGUAGES&lt;/code&gt;, &lt;code&gt;LANGUAGE_CODE&lt;/code&gt;, and &lt;code&gt;LANGUAGE_BIDI&lt;/code&gt; as defined above.</source>
          <target state="translated">&lt;a href=&quot;../../ref/templates/api#django.template.context_processors.i18n&quot;&gt; &lt;code&gt;django.template.context_processors.i18n&lt;/code&gt; &lt;/a&gt; 컨텍스트 프로세서 를 활성화하면 각 &lt;code&gt;RequestContext&lt;/code&gt; 는 위에 정의 된 &lt;code&gt;LANGUAGES&lt;/code&gt; , &lt;code&gt;LANGUAGE_CODE&lt;/code&gt; 및 &lt;code&gt;LANGUAGE_BIDI&lt;/code&gt; 에 액세스 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="729e00760630570ad607e0e6587465fb4412384e" translate="yes" xml:space="preserve">
          <source>If you enable this and need to send the value of the CSRF token with an AJAX request, your JavaScript must pull the value &lt;a href=&quot;csrf#acquiring-csrf-token-from-html&quot;&gt;from a hidden CSRF token form input&lt;/a&gt; instead of &lt;a href=&quot;csrf#acquiring-csrf-token-from-cookie&quot;&gt;from the cookie&lt;/a&gt;.</source>
          <target state="translated">이를 활성화하고 AJAX 요청과 함께 CSRF 토큰의 값을 보내야하는 경우 JavaScript는 &lt;a href=&quot;csrf#acquiring-csrf-token-from-cookie&quot;&gt;쿠키&lt;/a&gt; 대신 &lt;a href=&quot;csrf#acquiring-csrf-token-from-html&quot;&gt;숨겨진 CSRF 토큰 양식 입력에서&lt;/a&gt; 값 을 가져와야합니다 .</target>
        </trans-unit>
        <trans-unit id="eecda653f4341e8484e3844f08cb3debaa15b75a" translate="yes" xml:space="preserve">
          <source>If you enable this option and there is concurrent access to the async-unsafe parts of Django, you may suffer data loss or corruption. Be very careful and do not use this in production environments.</source>
          <target state="translated">이 옵션을 활성화하고 Django의 비동기 안전하지 않은 부분에 동시에 액세스하면 데이터가 손실되거나 손상 될 수 있습니다. 프로덕션 환경에서는 매우주의하여 사용하지 마십시오.</target>
        </trans-unit>
        <trans-unit id="690f4bcf8a157bd61ea9244f015553c0c9c48320" translate="yes" xml:space="preserve">
          <source>If you encounter an error during the installation, your system might be missing a dependency for one or more of the Python packages. Consult the failing package&amp;rsquo;s documentation or search the Web with the error message that you encounter.</source>
          <target state="translated">설치 중에 오류가 발생하면 시스템에 하나 이상의 Python 패키지에 대한 종속성이 누락되었을 수 있습니다. 실패한 패키지의 설명서를 참조하거나 발생한 오류 메시지로 웹을 검색하십시오.</target>
        </trans-unit>
        <trans-unit id="a6da4243a036aa29469a63cceb377bd8e3d4c0cc" translate="yes" xml:space="preserve">
          <source>If you encounter the following error when using &lt;code&gt;LayerMapping&lt;/code&gt; and MySQL:</source>
          <target state="translated">&lt;code&gt;LayerMapping&lt;/code&gt; 및 MySQL을 사용할 때 다음 오류가 발생하는 경우 :</target>
        </trans-unit>
        <trans-unit id="388118dd7f5efca0821c54391ac838c186b2e0db" translate="yes" xml:space="preserve">
          <source>If you encounter this error, most likely your code is comparing these two things:</source>
          <target state="translated">이 오류가 발생하면 코드가 다음 두 가지를 비교하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="9980a2e684bd447360258377b3fadc41c30bff5f" translate="yes" xml:space="preserve">
          <source>If you encounter this error, you should fix your code to not call the offending code from an async context; instead, write your code that talks to async-unsafe in its own, synchronous function, and call that using &lt;code&gt;asgiref.sync.async_to_sync&lt;/code&gt;, or any other preferred way of running synchronous code in its own thread.</source>
          <target state="translated">이 오류가 발생하면 비동기 컨텍스트에서 문제가되는 코드를 호출하지 않도록 코드를 수정해야합니다. 대신 비동기 동기식으로 자체 비동기 함수로 통신하는 코드를 작성하고 &lt;code&gt;asgiref.sync.async_to_sync&lt;/code&gt; 또는 자체 스레드에서 동기 코드를 실행하는 다른 기본 방법 을 사용하여 호출하십시오 .</target>
        </trans-unit>
        <trans-unit id="c318da5e64838ab0635a2445fb6173a140f25b28" translate="yes" xml:space="preserve">
          <source>If you expect a queryset to return one row, you can use &lt;code&gt;get()&lt;/code&gt; without any arguments to return the object for that row:</source>
          <target state="translated">쿼리 셋이 하나의 행을 반환 할 것으로 예상되면 인수없이 &lt;code&gt;get()&lt;/code&gt; 을 사용 하여 해당 행의 객체를 반환 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="b49a74a0b115f2bc1bddecbe1ff4268a349bfe46" translate="yes" xml:space="preserve">
          <source>If you find yourself doing this often, you might consider creating a custom &lt;a href=&quot;../../howto/custom-template-tags#howto-custom-template-tags-inclusion-tags&quot;&gt;inclusion tag&lt;/a&gt;.</source>
          <target state="translated">이 작업을 자주 수행하는 경우 사용자 정의 &lt;a href=&quot;../../howto/custom-template-tags#howto-custom-template-tags-inclusion-tags&quot;&gt;포함 태그&lt;/a&gt; 작성을 고려할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="08b548542180a05ddc30c78ed125af341d51e6c9" translate="yes" xml:space="preserve">
          <source>If you find yourself duplicating content in a number of templates, it probably means you should move that content to a &lt;code&gt;{% block %}&lt;/code&gt; in a parent template.</source>
          <target state="translated">여러 템플릿에서 콘텐츠를 복제 하는 경우 상위 템플릿에서 해당 콘텐츠를 &lt;code&gt;{% block %}&lt;/code&gt; 로 이동해야합니다 .</target>
        </trans-unit>
        <trans-unit id="ed5f5b63170617e447bc7e02390a27114c2912d5" translate="yes" xml:space="preserve">
          <source>If you find yourself needing a response class that Django doesn&amp;rsquo;t provide, you can create it with the help of &lt;a href=&quot;https://docs.python.org/3/library/http.html#http.HTTPStatus&quot;&gt;&lt;code&gt;http.HTTPStatus&lt;/code&gt;&lt;/a&gt;. For example:</source>
          <target state="translated">Django가 제공하지 않는 응답 클래스가 필요한 경우 &lt;a href=&quot;https://docs.python.org/3/library/http.html#http.HTTPStatus&quot;&gt; &lt;code&gt;http.HTTPStatus&lt;/code&gt; &lt;/a&gt; 의 도움으로 만들 수 있습니다 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="a6acad9064fdbc3ea2b22b0bcfca87cc4ffc3ec7" translate="yes" xml:space="preserve">
          <source>If you find yourself needing to write an SQL query that is too complex for Django&amp;rsquo;s database-mapper to handle, you can fall back on writing SQL by hand. Django has a couple of options for writing raw SQL queries; see &lt;a href=&quot;sql&quot;&gt;Performing raw SQL queries&lt;/a&gt;.</source>
          <target state="translated">Django의 데이터베이스 맵퍼가 처리하기에 너무 복잡한 SQL 쿼리를 작성해야하는 경우 수동으로 SQL을 작성할 수 있습니다. 장고에는 원시 SQL 쿼리를 작성하기위한 몇 가지 옵션이 있습니다. &lt;a href=&quot;sql&quot;&gt;원시 SQL 쿼리 수행을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="2ad1e5c64873a39591bff334fe500d215c29ad49" translate="yes" xml:space="preserve">
          <source>If you get a 404 when requesting &lt;code&gt;/books/acme/&lt;/code&gt;, check to ensure you actually have a Publisher with the name &amp;lsquo;ACME Publishing&amp;rsquo;. Generic views have an &lt;code&gt;allow_empty&lt;/code&gt; parameter for this case. See the &lt;a href=&quot;../../ref/class-based-views/index&quot;&gt;class-based-views reference&lt;/a&gt; for more details.</source>
          <target state="translated">&lt;code&gt;/books/acme/&lt;/code&gt; 요청할 때 404가 표시되면 이름이 'ACME Publishing'인 게시자가 실제로 있는지 확인하십시오. 이 경우 일반 뷰에는 &lt;code&gt;allow_empty&lt;/code&gt; 매개 변수가 있습니다. 자세한 내용은 &lt;a href=&quot;../../ref/class-based-views/index&quot;&gt;클래스 기반 뷰 참조&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="7f7742ad36754cc74a4903fa526fb289e4d0d2b4" translate="yes" xml:space="preserve">
          <source>If you get a &lt;code&gt;UnicodeEncodeError&lt;/code&gt; when uploading files with file names that contain non-ASCII characters, make sure Apache is configured to accept non-ASCII file names:</source>
          <target state="translated">당신이 얻을 경우 &lt;code&gt;UnicodeEncodeError&lt;/code&gt; 을 비 ASCII 문자가 포함 된 파일 이름으로 업로드 된 파일이 있는지 확인 아파치를 할 때 비 ASCII 파일 이름을 허용하도록 구성되어 있습니다 :</target>
        </trans-unit>
        <trans-unit id="7616ac6b8d7c3639812f35a6bc31e6c215afa7ae" translate="yes" xml:space="preserve">
          <source>If you get a &lt;code&gt;UnicodeEncodeError&lt;/code&gt; when uploading files with file names that contain non-ASCII characters, make sure uWSGI is configured to accept non-ASCII file names by adding this to your &lt;code&gt;uwsgi.ini&lt;/code&gt;:</source>
          <target state="translated">당신이 얻을 경우 &lt;code&gt;UnicodeEncodeError&lt;/code&gt; 을 비 ASCII 문자가 포함 된 파일 이름으로 업로드 파일을 만들 때 반드시 uWSGI은이를 추가하여 비 ASCII 파일 이름을 사용할 수 있도록 구성 &lt;code&gt;uwsgi.ini&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="b3df4479a6ed3992aa239152c3ea200360f998d8" translate="yes" xml:space="preserve">
          <source>If you get an error page here, check that you&amp;rsquo;re going to &lt;a href=&quot;http://localhost:8000/polls/&quot;&gt;http://localhost:8000/polls/&lt;/a&gt; and not &lt;a href=&quot;http://localhost:8000/&quot;&gt;http://localhost:8000/&lt;/a&gt;.</source>
          <target state="translated">여기에 오류 페이지가 표시되면 &lt;a href=&quot;http://localhost:8000/polls/&quot;&gt;http : // localhost : 8000 /이&lt;/a&gt; 아닌 &lt;a href=&quot;http://localhost:8000/&quot;&gt;http : // localhost : 8000 / &lt;/a&gt;polls /로 가고 있는지 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="069b129e53ef4f85715fcc43dda8a29afa775b23" translate="yes" xml:space="preserve">
          <source>If you give the field a &lt;a href=&quot;../../models/fields#django.db.models.Field.default&quot;&gt;&lt;code&gt;default&lt;/code&gt;&lt;/a&gt;, ensure it&amp;rsquo;s a callable such as &lt;code&gt;dict&lt;/code&gt; (for an empty default) or a callable that returns a dict (such as a function). Incorrectly using &lt;code&gt;default={}&lt;/code&gt; creates a mutable default that is shared between all instances of &lt;code&gt;JSONField&lt;/code&gt;.</source>
          <target state="translated">당신은 필드에게 줄 경우 &lt;a href=&quot;../../models/fields#django.db.models.Field.default&quot;&gt; &lt;code&gt;default&lt;/code&gt; &lt;/a&gt; , 그것은 호출 등의 확인 &lt;code&gt;dict&lt;/code&gt; (빈 기본의 경우) 또는 호출 반환 (예 : 함수 등) DICT. &lt;code&gt;default={}&lt;/code&gt; 를 잘못 사용 하면 &lt;code&gt;JSONField&lt;/code&gt; 의 모든 인스턴스간에 공유되는 변경 가능한 기본값이 작성 됩니다.</target>
        </trans-unit>
        <trans-unit id="27410732e928525d8c647604e8926b8d0498bdf6" translate="yes" xml:space="preserve">
          <source>If you give the field a &lt;a href=&quot;../../models/fields#django.db.models.Field.default&quot;&gt;&lt;code&gt;default&lt;/code&gt;&lt;/a&gt;, ensure it&amp;rsquo;s a callable such as &lt;code&gt;list&lt;/code&gt; (for an empty default) or a callable that returns a list (such as a function). Incorrectly using &lt;code&gt;default=[]&lt;/code&gt; creates a mutable default that is shared between all instances of &lt;code&gt;ArrayField&lt;/code&gt;.</source>
          <target state="translated">당신은 필드에게 줄 경우 &lt;a href=&quot;../../models/fields#django.db.models.Field.default&quot;&gt; &lt;code&gt;default&lt;/code&gt; &lt;/a&gt; , 그것은 호출 등의 확인 &lt;code&gt;list&lt;/code&gt; (빈 기본의 경우) 또는 호출 반환 (예 : 함수 등) 목록입니다. &lt;code&gt;default=[]&lt;/code&gt; 를 잘못 사용 하면 모든 &lt;code&gt;ArrayField&lt;/code&gt; 인스턴스간에 공유되는 변경 가능한 기본값이 작성 됩니다.</target>
        </trans-unit>
        <trans-unit id="e341d486c0a6527afd40afba3bbf387252d13451" translate="yes" xml:space="preserve">
          <source>If you had a URL &lt;code&gt;/redirect_me/&lt;/code&gt; that redirected to &lt;code&gt;/next/&lt;/code&gt;, that redirected to &lt;code&gt;/final/&lt;/code&gt;, this is what you&amp;rsquo;d see:</source>
          <target state="translated">&lt;code&gt;/next/&lt;/code&gt; 로 &lt;code&gt;/redirect_me/&lt;/code&gt; 되는 URL / redirect_me / 가 있고 &lt;code&gt;/final/&lt;/code&gt; 리디렉션 된 URL은 다음 과 같습니다.</target>
        </trans-unit>
        <trans-unit id="e18323392212f10a65b2daa3a1a10c84409a9d06" translate="yes" xml:space="preserve">
          <source>If you have a &amp;ldquo;rich&amp;rdquo; shell installed but want to force use of the &amp;ldquo;plain&amp;rdquo; Python interpreter, use &lt;code&gt;python&lt;/code&gt; as the interface name, like so:</source>
          <target state="translated">&quot;풍부한&quot;쉘이 설치되어 있지만 &quot;일반&quot;Python 인터프리터를 강제로 사용하려면 다음과 같이 &lt;code&gt;python&lt;/code&gt; 을 인터페이스 이름으로 사용 하십시오.</target>
        </trans-unit>
        <trans-unit id="5d8adf9ea9a8d83fd0e8e6616d3cb139fe7ee8e2" translate="yes" xml:space="preserve">
          <source>If you have a &lt;code&gt;GPSCoordinatesField&lt;/code&gt;, for example, and want to be able to access additional information about the coordinates in a template, this could be implemented as follows:</source>
          <target state="translated">당신이있는 경우 &lt;code&gt;GPSCoordinatesField&lt;/code&gt; 는 , 예를 들어, 및 템플릿의 좌표에 대한 추가 정보를 참조 할 수 있도록하려면 다음과 같이이 구현 될 수있다 :</target>
        </trans-unit>
        <trans-unit id="d61d684a756350ad6251ad220974916e91d79976" translate="yes" xml:space="preserve">
          <source>If you have a &lt;code&gt;Place&lt;/code&gt; that is also a &lt;code&gt;Restaurant&lt;/code&gt;, you can get from the &lt;code&gt;Place&lt;/code&gt; object to the &lt;code&gt;Restaurant&lt;/code&gt; object by using the lowercase version of the model name:</source>
          <target state="translated">&lt;code&gt;Restaurant&lt;/code&gt; 이기도 한 &lt;code&gt;Place&lt;/code&gt; 가있는 경우 모델 이름의 소문자 버전을 사용하여 &lt;code&gt;Place&lt;/code&gt; 객체에서 &lt;code&gt;Restaurant&lt;/code&gt; 객체로 이동할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e101b1692181a5bd9c21e9a4901c5f705625b68f" translate="yes" xml:space="preserve">
          <source>If you have a background in programming, or if you&amp;rsquo;re used to languages which mix programming code directly into HTML, you&amp;rsquo;ll want to bear in mind that the Django template system is not simply Python embedded into HTML. This is by design: the template system is meant to express presentation, not program logic.</source>
          <target state="translated">프로그래밍에 대한 배경 지식이 있거나 프로그래밍 코드를 HTML에 직접 혼합하는 언어에 익숙한 경우 Django 템플릿 시스템은 단순히 Python에 HTML에 포함되어 있지 않습니다. 이것은 의도적으로 설계된 것입니다. 템플릿 시스템은 프로그램 논리가 아니라 프레젠테이션을 표현하기위한 것입니다.</target>
        </trans-unit>
        <trans-unit id="59e1b17500d931bbf50d9ce94988d17d56a10749" translate="yes" xml:space="preserve">
          <source>If you have a bound &lt;a href=&quot;#django.forms.Form&quot;&gt;&lt;code&gt;Form&lt;/code&gt;&lt;/a&gt; instance and want to change the data somehow, or if you want to bind an unbound &lt;a href=&quot;#django.forms.Form&quot;&gt;&lt;code&gt;Form&lt;/code&gt;&lt;/a&gt; instance to some data, create another &lt;a href=&quot;#django.forms.Form&quot;&gt;&lt;code&gt;Form&lt;/code&gt;&lt;/a&gt; instance. There is no way to change data in a &lt;a href=&quot;#django.forms.Form&quot;&gt;&lt;code&gt;Form&lt;/code&gt;&lt;/a&gt; instance. Once a &lt;a href=&quot;#django.forms.Form&quot;&gt;&lt;code&gt;Form&lt;/code&gt;&lt;/a&gt; instance has been created, you should consider its data immutable, whether it has data or not.</source>
          <target state="translated">바인딩 된 &lt;a href=&quot;#django.forms.Form&quot;&gt; &lt;code&gt;Form&lt;/code&gt; &lt;/a&gt; 인스턴스가 있고 데이터를 어떻게 든 변경하려는 경우 또는 바인딩되지 않은 &lt;a href=&quot;#django.forms.Form&quot;&gt; &lt;code&gt;Form&lt;/code&gt; &lt;/a&gt; 인스턴스를 일부 데이터 에 바인딩하려는 경우 다른 &lt;a href=&quot;#django.forms.Form&quot;&gt; &lt;code&gt;Form&lt;/code&gt; &lt;/a&gt; 인스턴스를 만듭니다 . &lt;a href=&quot;#django.forms.Form&quot;&gt; &lt;code&gt;Form&lt;/code&gt; &lt;/a&gt; 인스턴스 에서 데이터를 변경할 수있는 방법이 없습니다 . 한 번 &lt;a href=&quot;#django.forms.Form&quot;&gt; &lt;code&gt;Form&lt;/code&gt; &lt;/a&gt; 인스턴스가 생성되어, 당신은 데이터가 있는지 여부, 데이터는 불변 고려해야합니다.</target>
        </trans-unit>
        <trans-unit id="978ffd4b507205bec211ecb6fb44da5a6411e504" translate="yes" xml:space="preserve">
          <source>If you have a complex application, you may want to run tests automatically with every commit for the purposes of &lt;a href=&quot;https://en.wikipedia.org/wiki/Continuous_integration&quot;&gt;continuous integration&lt;/a&gt;, so that quality control is itself - at least partially - automated.</source>
          <target state="translated">복잡한 응용 프로그램이있는 경우 &lt;a href=&quot;https://en.wikipedia.org/wiki/Continuous_integration&quot;&gt;지속적인 통합을&lt;/a&gt; 위해 모든 커밋마다 테스트를 자동으로 실행하여 품질 관리 자체가 적어도 부분적으로 자동화되도록 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e8cd69861c19aec280ff4c3da106598eae268983" translate="yes" xml:space="preserve">
          <source>If you have a different database and aren&amp;rsquo;t sure if it supports DDL transactions, check the &lt;code&gt;django.db.connection.features.can_rollback_ddl&lt;/code&gt; attribute.</source>
          <target state="translated">다른 데이터베이스가 있고 DDL 트랜잭션을 지원하는지 확실하지 않으면 &lt;code&gt;django.db.connection.features.can_rollback_ddl&lt;/code&gt; 속성을 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="5b7fdb666d2c7387f8e88756c3572339b99b1480" translate="yes" xml:space="preserve">
          <source>If you have a field called &lt;code&gt;foo&lt;/code&gt; that is a &lt;a href=&quot;fields#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;ForeignKey&lt;/code&gt;&lt;/a&gt;, the default &lt;code&gt;values()&lt;/code&gt; call will return a dictionary key called &lt;code&gt;foo_id&lt;/code&gt;, since this is the name of the hidden model attribute that stores the actual value (the &lt;code&gt;foo&lt;/code&gt; attribute refers to the related model). When you are calling &lt;code&gt;values()&lt;/code&gt; and passing in field names, you can pass in either &lt;code&gt;foo&lt;/code&gt; or &lt;code&gt;foo_id&lt;/code&gt; and you will get back the same thing (the dictionary key will match the field name you passed in).</source>
          <target state="translated">&lt;a href=&quot;fields#django.db.models.ForeignKey&quot;&gt; &lt;code&gt;ForeignKey&lt;/code&gt; &lt;/a&gt; 인 &lt;code&gt;foo&lt;/code&gt; 라는 필드 가있는 경우 default &lt;code&gt;values()&lt;/code&gt; 호출은 실제 값을 저장하는 숨겨진 모델 속성의 이름이므로 &lt;code&gt;foo_id&lt;/code&gt; 라는 사전 키를 리턴 합니다 ( &lt;code&gt;foo&lt;/code&gt; 속성은 관련 모델을 나타냄) ). &lt;code&gt;values()&lt;/code&gt; 호출 하고 필드 이름을 전달할 때 &lt;code&gt;foo&lt;/code&gt; 또는 &lt;code&gt;foo_id&lt;/code&gt; 를 전달 하면 똑같은 결과를 얻을 수 있습니다 (사전 키는 전달한 필드 이름과 일치 함).</target>
        </trans-unit>
        <trans-unit id="16711bcb9d7d51d98a29ea22696d824133aa4a4b" translate="yes" xml:space="preserve">
          <source>If you have a field named &lt;code&gt;defaults&lt;/code&gt; and want to use it as an exact lookup in &lt;code&gt;get_or_create()&lt;/code&gt;, use &lt;code&gt;'defaults__exact'&lt;/code&gt;, like so:</source>
          <target state="translated">&lt;code&gt;defaults&lt;/code&gt; 라는 필드가 있고 &lt;code&gt;get_or_create()&lt;/code&gt; 에서 정확한 조회로 사용하려면 다음과 같이 &lt;code&gt;'defaults__exact'&lt;/code&gt; 를 사용 하십시오 .</target>
        </trans-unit>
        <trans-unit id="d37c7ca73612e3f18e551c6e6e5ec5e6e3aab068" translate="yes" xml:space="preserve">
          <source>If you have a function that returns text and you want to be able to take lazy arguments while delaying their evaluation, you can use this decorator:</source>
          <target state="translated">텍스트를 반환하는 함수가 있고 평가를 지연하는 동안 게으른 인수를 취할 수 있으려면이 데코레이터를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e0d31ad051cee43c03199fe35d1cfc46041814b9" translate="yes" xml:space="preserve">
          <source>If you have a model that is defined using an &lt;a href=&quot;db/models#abstract-base-classes&quot;&gt;abstract base class&lt;/a&gt;, you don&amp;rsquo;t have to do anything special to serialize that model. Call the serializer on the object (or objects) that you want to serialize, and the output will be a complete representation of the serialized object.</source>
          <target state="translated">&lt;a href=&quot;db/models#abstract-base-classes&quot;&gt;추상 기본 클래스를&lt;/a&gt; 사용하여 정의 된 모델이있는 경우 해당 모델을 직렬화하기 위해 특별한 작업을 수행 할 필요가 없습니다. 직렬화하려는 개체 (또는 개체)에서 직렬 변환기를 호출하면 출력이 직렬화 된 개체의 완전한 표현이됩니다.</target>
        </trans-unit>
        <trans-unit id="e6770af4d44284b72b625f55e0971a26874c906c" translate="yes" xml:space="preserve">
          <source>If you have a set of common decorators used in several places, you can define a list or tuple of decorators and use this instead of invoking &lt;code&gt;method_decorator()&lt;/code&gt; multiple times. These two classes are equivalent:</source>
          <target state="translated">여러 곳에서 공통 데코레이터 세트를 사용하는 경우 데코레이터 목록 또는 튜플을 정의하고 &lt;code&gt;method_decorator()&lt;/code&gt; 여러 번 호출하는 대신 이것을 사용할 수 있습니다 . 이 두 클래스는 동일합니다.</target>
        </trans-unit>
        <trans-unit id="79b825e9cb0e34e49d16acfbe8a24478320f86a0" translate="yes" xml:space="preserve">
          <source>If you have an authenticated user you want to attach to the current session - this is done with a &lt;a href=&quot;#django.contrib.auth.login&quot;&gt;&lt;code&gt;login()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">인증 된 사용자가있는 경우 현재 세션에 연결하려는 경우 &lt;a href=&quot;#django.contrib.auth.login&quot;&gt; &lt;code&gt;login()&lt;/code&gt; &lt;/a&gt; 함수를 사용하여 수행 합니다.</target>
        </trans-unit>
        <trans-unit id="026d9fcdfc9b1f7521fa03bbe9b4114c2b909148" translate="yes" xml:space="preserve">
          <source>If you have an existing database with an older, weak hash such as MD5 or SHA1, you might want to upgrade those hashes yourself instead of waiting for the upgrade to happen when a user logs in (which may never happen if a user doesn&amp;rsquo;t return to your site). In this case, you can use a &amp;ldquo;wrapped&amp;rdquo; password hasher.</source>
          <target state="translated">MD5 또는 SHA1과 같이 오래되고 약한 해시가있는 기존 데이터베이스가있는 경우 사용자가 로그인 할 때 업그레이드가 발생할 때까지 기다리지 않고 해시를 직접 업그레이드 할 수 있습니다 (사용자가 로그인하지 않은 경우에는 발생하지 않을 수 있음) 사이트로 돌아갑니다). 이 경우 &quot;랩핑 된&quot;암호 워셔를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b86b91ddb2f98a42f4900d8c7c7782b7b091a39b" translate="yes" xml:space="preserve">
          <source>If you have an idea for functionality to include in &lt;code&gt;contrib&lt;/code&gt;, let us know! Code it up, and post it to the &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/internals/mailing-lists/#django-users-mailing-list&quot;&gt;django-users&lt;/a&gt; mailing list.</source>
          <target state="translated">&lt;code&gt;contrib&lt;/code&gt; 에 포함 할 기능에 대한 아이디어가 있으면 알려주십시오! 코드를 작성하여 &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/internals/mailing-lists/#django-users-mailing-list&quot;&gt;django-users&lt;/a&gt; 메일 링리스트에 게시 하십시오.</target>
        </trans-unit>
        <trans-unit id="19c3b5495362847755cae62d7b220043549d25b3" translate="yes" xml:space="preserve">
          <source>If you have an iterable of model instances, you can prefetch related attributes on those instances using the &lt;a href=&quot;#django.db.models.prefetch_related_objects&quot;&gt;&lt;code&gt;prefetch_related_objects()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">반복 가능한 모델 인스턴스가있는 경우 &lt;a href=&quot;#django.db.models.prefetch_related_objects&quot;&gt; &lt;code&gt;prefetch_related_objects()&lt;/code&gt; &lt;/a&gt; 함수를 사용하여 해당 인스턴스에서 관련 속성을 프리 페치 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="37904d083a93c2edd3d70d07fdce8e8357fcda8e" translate="yes" xml:space="preserve">
          <source>If you have any problems, please see the troubleshooting section below for suggestions and solutions.</source>
          <target state="translated">문제가있는 경우 아래의 문제 해결 섹션에서 제안 및 솔루션을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="ec0d4ee5c753dc222b01df5bf0c69c8624af1347" translate="yes" xml:space="preserve">
          <source>If you have app and project templates directories that both contain overrides, the default Django template loader will try to load the template from the project-level directory first. In other words, &lt;a href=&quot;../ref/settings#std:setting-TEMPLATES-DIRS&quot;&gt;&lt;code&gt;DIRS&lt;/code&gt;&lt;/a&gt; is searched before &lt;a href=&quot;../ref/settings#std:setting-TEMPLATES-APP_DIRS&quot;&gt;&lt;code&gt;APP_DIRS&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">재정의가 포함 된 앱 및 프로젝트 템플릿 디렉토리가있는 경우 기본 Django 템플릿 로더는 먼저 프로젝트 수준 디렉토리에서 템플릿을로드하려고 시도합니다. 다시 말해, &lt;a href=&quot;../ref/settings#std:setting-TEMPLATES-DIRS&quot;&gt; &lt;code&gt;DIRS&lt;/code&gt; &lt;/a&gt; 는 &lt;a href=&quot;../ref/settings#std:setting-TEMPLATES-APP_DIRS&quot;&gt; &lt;code&gt;APP_DIRS&lt;/code&gt; &lt;/a&gt; 보다 먼저 검색 됩니다 .</target>
        </trans-unit>
        <trans-unit id="08d9347c3a2e9dd49fb8cc1c6728cc1b9165b3fb" translate="yes" xml:space="preserve">
          <source>If you have created a &lt;a href=&quot;../ref/models/fields#django.db.models.Field.db_type&quot;&gt;&lt;code&gt;db_type()&lt;/code&gt;&lt;/a&gt; method, you don&amp;rsquo;t need to worry about &lt;a href=&quot;../ref/models/fields#django.db.models.Field.get_internal_type&quot;&gt;&lt;code&gt;get_internal_type()&lt;/code&gt;&lt;/a&gt; &amp;ndash; it won&amp;rsquo;t be used much. Sometimes, though, your database storage is similar in type to some other field, so you can use that other field&amp;rsquo;s logic to create the right column.</source>
          <target state="translated">&lt;a href=&quot;../ref/models/fields#django.db.models.Field.db_type&quot;&gt; &lt;code&gt;db_type()&lt;/code&gt; &lt;/a&gt; 메소드를 작성한 경우 &lt;a href=&quot;../ref/models/fields#django.db.models.Field.get_internal_type&quot;&gt; &lt;code&gt;get_internal_type()&lt;/code&gt; &lt;/a&gt; 에 대해 걱정할 필요가 없습니다 . 많이 사용되지는 않습니다. 그러나 데이터베이스 스토리지는 다른 필드와 유형이 유사하기 때문에 다른 필드의 논리를 사용하여 올바른 열을 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b5976cd51ea3df04ddca3661787303e1989a9bdd" translate="yes" xml:space="preserve">
          <source>If you have customized authentication (see &lt;a href=&quot;customizing&quot;&gt;Customizing Authentication&lt;/a&gt;) you can use a custom authentication form by setting the &lt;code&gt;authentication_form&lt;/code&gt; attribute. This form must accept a &lt;code&gt;request&lt;/code&gt; keyword argument in its &lt;code&gt;__init__()&lt;/code&gt; method and provide a &lt;code&gt;get_user()&lt;/code&gt; method which returns the authenticated user object (this method is only ever called after successful form validation).</source>
          <target state="translated">인증을 사용자 정의한 경우 (인증 &lt;a href=&quot;customizing&quot;&gt;사용자 정의&lt;/a&gt; 참조 ) &lt;code&gt;authentication_form&lt;/code&gt; 속성 을 설정하여 사용자 정의 인증 양식을 사용할 수 있습니다 . 이 양식은 &lt;code&gt;__init__()&lt;/code&gt; 메소드 에서 &lt;code&gt;request&lt;/code&gt; 키워드 인수를 승인 하고 인증 된 사용자 오브젝트를 리턴 하는 &lt;code&gt;get_user()&lt;/code&gt; 메소드를 제공해야 합니다 (이 메소드는 성공적인 양식 유효성 검증 후에 만 ​​호출 됨).</target>
        </trans-unit>
        <trans-unit id="e49e350f7aca08322a1d5e22652de39cfc978ac8" translate="yes" xml:space="preserve">
          <source>If you have difficulty finding where the Django source files are located on your system, run the following command:</source>
          <target state="translated">시스템에서 Django 소스 파일이있는 위치를 찾는 데 어려움이 있으면 다음 명령을 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="2ed6656727786d8c5a9c10718cdb288f20ac8eaf" translate="yes" xml:space="preserve">
          <source>If you have installed a &lt;a href=&quot;../../../topics/auth/customizing#auth-custom-user&quot;&gt;custom user model&lt;/a&gt; and want to use this default auth handler, it must support an &lt;code&gt;is_active&lt;/code&gt; attribute. If you want to use group based authorization, your custom user must have a relation named &amp;lsquo;groups&amp;rsquo;, referring to a related object that has a &amp;lsquo;name&amp;rsquo; field. You can also specify your own custom mod_wsgi auth handler if your custom cannot conform to these requirements.</source>
          <target state="translated">&lt;a href=&quot;../../../topics/auth/customizing#auth-custom-user&quot;&gt;사용자 정의 사용자 모델&lt;/a&gt; 을 설치 하고이 기본 인증 핸들러를 사용하려는 경우 &lt;code&gt;is_active&lt;/code&gt; 속성을 지원해야 합니다. 그룹 기반 권한을 사용하려면 사용자 정의 사용자는 'name'필드가있는 관련 오브젝트를 참조하여 'groups'라는 관계를 가져야합니다. 사용자 정의가 이러한 요구 사항을 준수 할 수없는 경우 사용자 정의 mod_wsgi 인증 핸들러를 지정할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="2f1712a605e1df12222b17db97359a92359d57b3" translate="yes" xml:space="preserve">
          <source>If you have multiple &lt;code&gt;Form&lt;/code&gt; classes that share fields, you can use subclassing to remove redundancy.</source>
          <target state="translated">필드를 공유하는 여러 &lt;code&gt;Form&lt;/code&gt; 클래스가있는 경우 하위 클래스를 사용하여 중복성을 제거 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c6aa2d211b2f44d42c468cde0eb6bc8be637e6dd" translate="yes" xml:space="preserve">
          <source>If you have multiple caches defined in &lt;a href=&quot;../../ref/settings#std:setting-CACHES&quot;&gt;&lt;code&gt;CACHES&lt;/code&gt;&lt;/a&gt;, Django will use the default cache. To use another cache, set &lt;a href=&quot;../../ref/settings#std:setting-SESSION_CACHE_ALIAS&quot;&gt;&lt;code&gt;SESSION_CACHE_ALIAS&lt;/code&gt;&lt;/a&gt; to the name of that cache.</source>
          <target state="translated">&lt;a href=&quot;../../ref/settings#std:setting-CACHES&quot;&gt; &lt;code&gt;CACHES&lt;/code&gt; 에&lt;/a&gt; 여러 캐시가 정의되어 있으면 Django는 기본 캐시를 사용합니다. 다른 캐시를 사용하려면 &lt;a href=&quot;../../ref/settings#std:setting-SESSION_CACHE_ALIAS&quot;&gt; &lt;code&gt;SESSION_CACHE_ALIAS&lt;/code&gt; &lt;/a&gt; 를 해당 캐시의 이름으로 설정 하십시오.</target>
        </trans-unit>
        <trans-unit id="0daeb88e4409e7fba4cbaee7d1c51bff9fbbe585" translate="yes" xml:space="preserve">
          <source>If you have test classes that cannot be run in parallel (e.g. because they share a common resource), you can use &lt;code&gt;django.test.testcases.SerializeMixin&lt;/code&gt; to run them sequentially. This mixin uses a filesystem &lt;code&gt;lockfile&lt;/code&gt;.</source>
          <target state="translated">병렬로 실행할 수없는 테스트 클래스가있는 경우 (예 : 공통 자원을 공유하기 때문에) &lt;code&gt;django.test.testcases.SerializeMixin&lt;/code&gt; 을 사용 하여 순차적으로 실행할 수 있습니다. 이 믹스 인은 파일 시스템 &lt;code&gt;lockfile&lt;/code&gt; 파일을 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="69e118594fe6d021ccddfba860e486fc346e2e24" translate="yes" xml:space="preserve">
          <source>If you have test classes that cannot be run in parallel, you can use &lt;code&gt;SerializeMixin&lt;/code&gt; to run them sequentially. See &lt;a href=&quot;../topics/testing/advanced#topics-testing-enforce-run-sequentially&quot;&gt;Enforce running test classes sequentially&lt;/a&gt;.</source>
          <target state="translated">병렬로 실행할 수없는 테스트 클래스가 있으면 &lt;code&gt;SerializeMixin&lt;/code&gt; 을 사용 하여 순차적으로 실행할 수 있습니다. &lt;a href=&quot;../topics/testing/advanced#topics-testing-enforce-run-sequentially&quot;&gt;테스트 클래스를 순차적으로 실행을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="db6b634100bf984485aba1e1d164f951a1225a84" translate="yes" xml:space="preserve">
          <source>If you have the Django admin installed, you can also &lt;a href=&quot;#auth-admin&quot;&gt;create users interactively&lt;/a&gt;.</source>
          <target state="translated">Django 관리자가 설치되어 있으면 &lt;a href=&quot;#auth-admin&quot;&gt;대화식으로 사용자&lt;/a&gt; 를 만들 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="2000ff382760e480cb9b499a00548bfca0c2d7fe" translate="yes" xml:space="preserve">
          <source>If you have the Django admin installed, you can also change user&amp;rsquo;s passwords on the &lt;a href=&quot;#auth-admin&quot;&gt;authentication system&amp;rsquo;s admin pages&lt;/a&gt;.</source>
          <target state="translated">Django 관리자가 설치되어 있으면 &lt;a href=&quot;#auth-admin&quot;&gt;인증 시스템의 관리자 페이지&lt;/a&gt; 에서 사용자의 비밀번호를 변경할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="59e6b390f0fb4a292f006284bfad36ce56a1c450" translate="yes" xml:space="preserve">
          <source>If you have tried function based generic views in the past and found them lacking, you should not think of class-based generic views as a class-based equivalent, but rather as a fresh approach to solving the original problems that generic views were meant to solve.</source>
          <target state="translated">과거에 함수 기반 제네릭 뷰를 시도했지만 부족한 것을 발견했다면 클래스 기반 제네릭 뷰를 클래스 기반의 동등한 뷰로 생각하지 말고 제네릭 뷰가 의도했던 원래의 문제를 해결하기위한 새로운 접근 방식으로 생각해야합니다. 풀다.</target>
        </trans-unit>
        <trans-unit id="efd9aa9b8fc35677ff19eb12feae61a2f1dd1243" translate="yes" xml:space="preserve">
          <source>If you haven&amp;rsquo;t added any extra options on top of the field you inherited from, then there&amp;rsquo;s no need to write a new &lt;code&gt;deconstruct()&lt;/code&gt; method. If, however, you&amp;rsquo;re changing the arguments passed in &lt;code&gt;__init__()&lt;/code&gt; (like we are in &lt;code&gt;HandField&lt;/code&gt;), you&amp;rsquo;ll need to supplement the values being passed.</source>
          <target state="translated">상속받은 필드 위에 추가 옵션을 추가하지 않은 경우 새로운 &lt;code&gt;deconstruct()&lt;/code&gt; 메소드 를 작성할 필요가 없습니다 . 그러나 &lt;code&gt;__init__()&lt;/code&gt; 전달 된 인수 ( &lt;code&gt;HandField&lt;/code&gt; 에있는 것처럼 )를 변경하는 경우 전달 되는 값을 보충해야합니다.</target>
        </trans-unit>
        <trans-unit id="4ea2ba3519701ee1ea3735aa6135ecb00e08b0a0" translate="yes" xml:space="preserve">
          <source>If you haven&amp;rsquo;t recently completed Tutorials 1&amp;ndash;7, we encourage you to review these so that your example project matches the one described below.</source>
          <target state="translated">최근에 자습서 1&amp;ndash;7을 완료하지 않은 경우 예제 프로젝트가 아래 설명 된 프로젝트와 일치하도록이를 검토하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="b16b0bccf0c08600a1fbaec81d987234f8ac3c71" translate="yes" xml:space="preserve">
          <source>If you haven&amp;rsquo;t set up backups for your database, do it right now!</source>
          <target state="translated">데이터베이스 백업을 설정하지 않은 경우 지금 수행하십시오!</target>
        </trans-unit>
        <trans-unit id="3abc3fddfa394c8f2c33c40961d7aa2e45568252" translate="yes" xml:space="preserve">
          <source>If you implement &lt;code&gt;__init__&lt;/code&gt; in your subclass of &lt;a href=&quot;#django.core.management.BaseCommand&quot;&gt;&lt;code&gt;BaseCommand&lt;/code&gt;&lt;/a&gt;, you must call &lt;a href=&quot;#django.core.management.BaseCommand&quot;&gt;&lt;code&gt;BaseCommand&lt;/code&gt;&lt;/a&gt;&amp;rsquo;s &lt;code&gt;__init__&lt;/code&gt;:</source>
          <target state="translated">&lt;a href=&quot;#django.core.management.BaseCommand&quot;&gt; &lt;code&gt;BaseCommand&lt;/code&gt; &lt;/a&gt; 의 하위 클래스에서 &lt;code&gt;__init__&lt;/code&gt; 을 구현하는 경우 &lt;a href=&quot;#django.core.management.BaseCommand&quot;&gt; &lt;code&gt;BaseCommand&lt;/code&gt; &lt;/a&gt; 의 &lt;code&gt;__init__&lt;/code&gt; 을 호출해야합니다 .</target>
        </trans-unit>
        <trans-unit id="a3b78e197955bcb146a1c23c5d00f08fdb545c8d" translate="yes" xml:space="preserve">
          <source>If you implement custom model fields that inherit from &lt;a href=&quot;models/fields#django.db.models.Field&quot;&gt;&lt;code&gt;Field&lt;/code&gt;&lt;/a&gt; directly, are overriding &lt;a href=&quot;models/fields#django.db.models.Field.get_prep_value&quot;&gt;&lt;code&gt;get_prep_value()&lt;/code&gt;&lt;/a&gt;, or use &lt;a href=&quot;models/expressions#django.db.models.expressions.RawSQL&quot;&gt;&lt;code&gt;RawSQL&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;models/querysets#django.db.models.query.QuerySet.extra&quot;&gt;&lt;code&gt;extra()&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;../topics/db/sql#django.db.models.Manager.raw&quot;&gt;&lt;code&gt;raw()&lt;/code&gt;&lt;/a&gt;, you should ensure that you perform appropriate typecasting.</source>
          <target state="translated">&lt;a href=&quot;models/fields#django.db.models.Field&quot;&gt; &lt;code&gt;Field&lt;/code&gt; 에서&lt;/a&gt; 직접 상속 &lt;a href=&quot;models/fields#django.db.models.Field.get_prep_value&quot;&gt; &lt;code&gt;get_prep_value()&lt;/code&gt; &lt;/a&gt; 재정의 하거나 &lt;a href=&quot;models/expressions#django.db.models.expressions.RawSQL&quot;&gt; &lt;code&gt;RawSQL&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;models/querysets#django.db.models.query.QuerySet.extra&quot;&gt; &lt;code&gt;extra()&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;../topics/db/sql#django.db.models.Manager.raw&quot;&gt; &lt;code&gt;raw()&lt;/code&gt; &lt;/a&gt; 사용 하는 사용자 정의 모델 필드를 구현하는 경우 적절한 유형 변환을 수행해야합니다.</target>
        </trans-unit>
        <trans-unit id="4d14c28506b4a41e79a0a531c1100009cf8a5877" translate="yes" xml:space="preserve">
          <source>If you import models directly rather than using the historical models, your migrations &lt;em&gt;may work initially&lt;/em&gt; but will fail in the future when you try to re-run old migrations (commonly, when you set up a new installation and run through all the migrations to set up the database).</source>
          <target state="translated">히스토리 모델을 사용하지 않고 모델을 직접 가져 오는 경우 마이그레이션 &lt;em&gt;이 처음에는 작동&lt;/em&gt; 하지만 나중에 이전 마이그레이션을 다시 실행하려고 할 때 (일반적으로 새 설치를 설정하고 모든 마이그레이션을 통해 설정하는 경우) 실패합니다. 데이터베이스).</target>
        </trans-unit>
        <trans-unit id="44070fbe89941700ca164927fd2839d802124e64" translate="yes" xml:space="preserve">
          <source>If you install your project&amp;rsquo;s Python dependencies inside a &lt;a href=&quot;https://virtualenv.pypa.io/&quot;&gt;virtualenv&lt;/a&gt;, add the path to the virtualenv using &lt;code&gt;WSGIPythonHome&lt;/code&gt;. See the &lt;a href=&quot;https://modwsgi.readthedocs.io/en/develop/user-guides/virtual-environments.html&quot;&gt;mod_wsgi virtualenv guide&lt;/a&gt; for more details.</source>
          <target state="translated">&lt;a href=&quot;https://virtualenv.pypa.io/&quot;&gt;virtualenv&lt;/a&gt; 내에 프로젝트의 Python 종속성을 설치하는 경우 &lt;code&gt;WSGIPythonHome&lt;/code&gt; 을 사용하여 virtualenv에 대한 경로를 추가하십시오 . 자세한 내용은 &lt;a href=&quot;https://modwsgi.readthedocs.io/en/develop/user-guides/virtual-environments.html&quot;&gt;mod_wsgi virtualenv 안내서&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="a74cb3689863414b53e2cc2ad45826c27f81e941" translate="yes" xml:space="preserve">
          <source>If you installed Django with &lt;a href=&quot;https://pip.pypa.io/&quot;&gt;pip&lt;/a&gt;, you can use the &lt;code&gt;--upgrade&lt;/code&gt; or &lt;code&gt;-U&lt;/code&gt; flag:</source>
          <target state="translated">Django를 &lt;a href=&quot;https://pip.pypa.io/&quot;&gt;pip&lt;/a&gt; 와 함께 설치 한 경우 &lt;code&gt;--upgrade&lt;/code&gt; 또는 &lt;code&gt;-U&lt;/code&gt; 플래그를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="0e1355dc1d54e62ec3be4d96bc279fa717ea1aa3" translate="yes" xml:space="preserve">
          <source>If you intend to allow users to upload files, you must ensure that the environment used to run Django is configured to work with non-ASCII file names. If your environment isn&amp;rsquo;t configured correctly, you&amp;rsquo;ll encounter &lt;code&gt;UnicodeEncodeError&lt;/code&gt; exceptions when saving files with file names that contain non-ASCII characters.</source>
          <target state="translated">사용자가 파일을 업로드 할 수있게하려면 Django를 실행하는 데 사용 된 환경이 ASCII가 아닌 파일 이름으로 작동하도록 구성되어 있는지 확인해야합니다. 환경이 올바르게 구성되지 않은 경우 ASCII가 아닌 문자를 포함하는 파일 이름을 가진 파일을 저장할 때 &lt;code&gt;UnicodeEncodeError&lt;/code&gt; 예외 가 발생 합니다.</target>
        </trans-unit>
        <trans-unit id="4acb8b00d983476c1c0fae9d2bcb2eb3c71e63d5" translate="yes" xml:space="preserve">
          <source>If you just want to experiment with Django, skip ahead to the next section; Django includes a lightweight web server you can use for testing, so you won&amp;rsquo;t need to set up Apache until you&amp;rsquo;re ready to deploy Django in production.</source>
          <target state="translated">장고를 실험하고 싶다면 다음 섹션으로 넘어가십시오. Django에는 테스트에 사용할 수있는 경량 웹 서버가 포함되어 있으므로 Django를 프로덕션 환경에 배포 할 준비가 될 때까지 Apache를 설정할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="3568f1bdadbf483dacd6fb9b4be3a20a4b3cc65b" translate="yes" xml:space="preserve">
          <source>If you just want to get some data from your tables into a serialized form, you could use the &lt;a href=&quot;../ref/django-admin#django-admin-dumpdata&quot;&gt;&lt;code&gt;dumpdata&lt;/code&gt;&lt;/a&gt; management command.</source>
          <target state="translated">테이블의 일부 데이터를 직렬화 된 양식으로 가져 오려면 &lt;a href=&quot;../ref/django-admin#django-admin-dumpdata&quot;&gt; &lt;code&gt;dumpdata&lt;/code&gt; &lt;/a&gt; management 명령을 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="4e09fa0bd8a3a147ea439259f86c751ca2fbfc03" translate="yes" xml:space="preserve">
          <source>If you just want to get started already (and nobody would blame you!), try taking a look at the list of &lt;a href=&quot;https://code.djangoproject.com/query?status=new&amp;amp;status=reopened&amp;amp;has_patch=0&amp;amp;easy=1&amp;amp;col=id&amp;amp;col=summary&amp;amp;col=status&amp;amp;col=owner&amp;amp;col=type&amp;amp;col=milestone&amp;amp;order=priority&quot;&gt;easy tickets that need patches&lt;/a&gt; and the &lt;a href=&quot;https://code.djangoproject.com/query?status=new&amp;amp;status=reopened&amp;amp;needs_better_patch=1&amp;amp;easy=1&amp;amp;col=id&amp;amp;col=summary&amp;amp;col=status&amp;amp;col=owner&amp;amp;col=type&amp;amp;col=milestone&amp;amp;order=priority&quot;&gt;easy tickets that have patches which need improvement&lt;/a&gt;. If you&amp;rsquo;re familiar with writing tests, you can also look at the list of &lt;a href=&quot;https://code.djangoproject.com/query?status=new&amp;amp;status=reopened&amp;amp;needs_tests=1&amp;amp;easy=1&amp;amp;col=id&amp;amp;col=summary&amp;amp;col=status&amp;amp;col=owner&amp;amp;col=type&amp;amp;col=milestone&amp;amp;order=priority&quot;&gt;easy tickets that need tests&lt;/a&gt;. Remember to follow the guidelines about claiming tickets that were mentioned in the link to Django&amp;rsquo;s documentation on &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/internals/contributing/writing-code/submitting-patches/&quot;&gt;claiming tickets and submitting patches&lt;/a&gt;.</source>
          <target state="translated">이미 시작하기를 원한다면 (그리고 아무도 당신을 비난하지 않을 것입니다!), &lt;a href=&quot;https://code.djangoproject.com/query?status=new&amp;amp;status=reopened&amp;amp;has_patch=0&amp;amp;easy=1&amp;amp;col=id&amp;amp;col=summary&amp;amp;col=status&amp;amp;col=owner&amp;amp;col=type&amp;amp;col=milestone&amp;amp;order=priority&quot;&gt;패치가 필요한 쉬운 티켓&lt;/a&gt; 목록 과 &lt;a href=&quot;https://code.djangoproject.com/query?status=new&amp;amp;status=reopened&amp;amp;needs_better_patch=1&amp;amp;easy=1&amp;amp;col=id&amp;amp;col=summary&amp;amp;col=status&amp;amp;col=owner&amp;amp;col=type&amp;amp;col=milestone&amp;amp;order=priority&quot;&gt;개선이 필요한 패치가있는 &lt;/a&gt;쉬운 티켓 목록을보십시오 . 테스트 작성에 익숙 &lt;a href=&quot;https://code.djangoproject.com/query?status=new&amp;amp;status=reopened&amp;amp;needs_tests=1&amp;amp;easy=1&amp;amp;col=id&amp;amp;col=summary&amp;amp;col=status&amp;amp;col=owner&amp;amp;col=type&amp;amp;col=milestone&amp;amp;order=priority&quot;&gt;하다면 테스트가 필요한 쉬운 티켓&lt;/a&gt; 목록을 볼 수도 있습니다 . 티켓 &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/internals/contributing/writing-code/submitting-patches/&quot;&gt;청구 및 패치 제출&lt;/a&gt; 에 관한 장고의 문서 링크에서 언급 된 티켓 청구에 관한 지침을 준수하십시오 .</target>
        </trans-unit>
        <trans-unit id="c50512e5b7b4d2917fd0ded7753af940b02ac0a6" translate="yes" xml:space="preserve">
          <source>If you know there is only one object that matches your query, you can use the &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.get&quot;&gt;&lt;code&gt;get()&lt;/code&gt;&lt;/a&gt; method on a &lt;a href=&quot;managers#django.db.models.Manager&quot;&gt;&lt;code&gt;Manager&lt;/code&gt;&lt;/a&gt; which returns the object directly:</source>
          <target state="translated">쿼리와 일치하는 객체가 하나만 있는 경우 &lt;a href=&quot;managers#django.db.models.Manager&quot;&gt; &lt;code&gt;Manager&lt;/code&gt; &lt;/a&gt; 에서 객체를 직접 반환하는 &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.get&quot;&gt; &lt;code&gt;get()&lt;/code&gt; &lt;/a&gt; 메서드를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a4d46c64f50d662db0e36989441c746c4eb15547" translate="yes" xml:space="preserve">
          <source>If you know which models you&amp;rsquo;ll be using most often, you can also add a &amp;ldquo;reverse&amp;rdquo; generic relationship to enable an additional API. For example:</source>
          <target state="translated">가장 자주 사용하는 모델을 알고있는 경우 &quot;역방향&quot;일반 관계를 추가하여 추가 API를 활성화 할 수도 있습니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="c191fd40bd25e99c36f57ceff24ea08151258536" translate="yes" xml:space="preserve">
          <source>If you leave off the &lt;code&gt;name&lt;/code&gt; argument, as in the second example above, Django will use the function&amp;rsquo;s name as the filter name.</source>
          <target state="translated">당신이 떨어져두면 &lt;code&gt;name&lt;/code&gt; 위의 두 번째 예에서와 같이, 인수, 장고 필터 이름으로 함수의 이름을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="e8bf004d14c563eb22c00ca8e5526f83bb38a104" translate="yes" xml:space="preserve">
          <source>If you leave off the &lt;code&gt;name&lt;/code&gt; argument, as in the second example above, Django will use the function&amp;rsquo;s name as the tag name.</source>
          <target state="translated">당신이 떨어져두면 &lt;code&gt;name&lt;/code&gt; 위의 두 번째 예에서와 같이, 인수, 장고 태그 이름으로 함수의 이름을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="950469d51b06aaa88a367dde3845db6577c50567" translate="yes" xml:space="preserve">
          <source>If you like the widgets that the Django Admin application uses, feel free to use them in your own application! They&amp;rsquo;re all stored in &lt;code&gt;django.contrib.admin.widgets&lt;/code&gt;.</source>
          <target state="translated">Django Admin 애플리케이션이 사용하는 위젯이 마음에 드시면 자신의 애플리케이션에서 자유롭게 사용하십시오! 그것들은 모두 &lt;code&gt;django.contrib.admin.widgets&lt;/code&gt; 에 저장됩니다 .</target>
        </trans-unit>
        <trans-unit id="338ebae0cd2defb4e2b46e3293b08157abaa3c2b" translate="yes" xml:space="preserve">
          <source>If you look at any change list in the admin, you&amp;rsquo;ll see this feature in action; Django ships with a &amp;ldquo;delete selected objects&amp;rdquo; action available to all models. For example, here&amp;rsquo;s the user module from Django&amp;rsquo;s built-in &lt;a href=&quot;../../../topics/auth/index#module-django.contrib.auth&quot;&gt;&lt;code&gt;django.contrib.auth&lt;/code&gt;&lt;/a&gt; app:</source>
          <target state="translated">관리자의 변경 목록을 보면이 기능이 실제로 작동하는 것을 볼 수 있습니다. Django는 모든 모델에서 사용 가능한&amp;ldquo;선택된 객체 삭제&amp;rdquo;작업을 제공합니다. 예를 들어 Django의 내장 &lt;a href=&quot;../../../topics/auth/index#module-django.contrib.auth&quot;&gt; &lt;code&gt;django.contrib.auth&lt;/code&gt; &lt;/a&gt; 앱 의 사용자 모듈은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="563d1c2d9d163e085568958c9f2b6d9c96629a36" translate="yes" xml:space="preserve">
          <source>If you look carefully, you can see that the portion that was generated by &lt;code&gt;quote()&lt;/code&gt; in the second example was not double-quoted when passed to &lt;code&gt;iri_to_uri()&lt;/code&gt;. This is a very important and useful feature. It means that you can construct your IRI without worrying about whether it contains non-ASCII characters and then, right at the end, call &lt;code&gt;iri_to_uri()&lt;/code&gt; on the result.</source>
          <target state="translated">주의 깊게 살펴보면, 두 번째 예제에서 &lt;code&gt;quote()&lt;/code&gt; 로 생성 된 부분이 &lt;code&gt;iri_to_uri()&lt;/code&gt; 전달 될 때 큰 따옴표로 묶이지 않은 것을 볼 수 있습니다. 이것은 매우 중요하고 유용한 기능입니다. 즉, ASCII가 아닌 문자가 포함되어 있는지 여부에 대해 걱정하지 않고 IRI를 구성한 다음 결과에서 &lt;code&gt;iri_to_uri()&lt;/code&gt; 를 호출 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fae37143701969595b56a1de835f003e68a717b5" translate="yes" xml:space="preserve">
          <source>If you manually render fields in the template, you can render &lt;code&gt;can_delete&lt;/code&gt; parameter with &lt;code&gt;{{ form.DELETE }}&lt;/code&gt;:</source>
          <target state="translated">템플리트에서 필드를 수동으로 렌더링하는 경우 &lt;code&gt;{{ form.DELETE }}&lt;/code&gt; 하여 &lt;code&gt;can_delete&lt;/code&gt; 매개 변수를 렌더링 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f75b2bb9e0e1faedcbcaf93a8d2cb2f193a634dc" translate="yes" xml:space="preserve">
          <source>If you meet this requirement, then substitute the &lt;code&gt;OSMGeoAdmin&lt;/code&gt; option class in your &lt;code&gt;admin.py&lt;/code&gt; file:</source>
          <target state="translated">이 요구 사항을 충족하는 경우 &lt;code&gt;admin.py&lt;/code&gt; 파일 에서 &lt;code&gt;OSMGeoAdmin&lt;/code&gt; 옵션 클래스 를 대체 하십시오.</target>
        </trans-unit>
        <trans-unit id="225bae64392f765fd429b21ea8ac02f57f4afb72" translate="yes" xml:space="preserve">
          <source>If you need an empty migration file to write your own &lt;code&gt;Operation&lt;/code&gt; objects into, use &lt;code&gt;python manage.py makemigrations --empty yourappname&lt;/code&gt;, but be aware that manually adding schema-altering operations can confuse the migration autodetector and make resulting runs of &lt;a href=&quot;django-admin#django-admin-makemigrations&quot;&gt;&lt;code&gt;makemigrations&lt;/code&gt;&lt;/a&gt; output incorrect code.</source>
          <target state="translated">고유 한 &lt;code&gt;Operation&lt;/code&gt; 객체 를 작성하기 위해 빈 마이그레이션 파일이 필요한 경우 &lt;code&gt;python manage.py makemigrations --empty yourappname&lt;/code&gt; . 그러나 스키마 변경 작업을 수동으로 추가하면 마이그레이션 자동 감지 기능이 혼동되어 결과적으로 &lt;a href=&quot;django-admin#django-admin-makemigrations&quot;&gt; &lt;code&gt;makemigrations&lt;/code&gt; 가&lt;/a&gt; 잘못된 코드를 출력 할 수 있습니다. .</target>
        </trans-unit>
        <trans-unit id="c26240f024c2f3e478948f8f7fec8bbb42d821c0" translate="yes" xml:space="preserve">
          <source>If you need custom template loading or custom context object instantiation, create a &lt;code&gt;TemplateResponse&lt;/code&gt; subclass and assign it to &lt;code&gt;response_class&lt;/code&gt;.</source>
          <target state="translated">사용자 정의 템플리트로드 또는 사용자 정의 컨텍스트 오브젝트 인스턴스화가 필요한 경우 &lt;code&gt;TemplateResponse&lt;/code&gt; 서브 클래스를 작성 하여 &lt;code&gt;response_class&lt;/code&gt; 에 지정하십시오 .</target>
        </trans-unit>
        <trans-unit id="d33ecf64697d7de63f58f86dbfaa4f84e060248a" translate="yes" xml:space="preserve">
          <source>If you need different precedence, you will need to use nested &lt;a href=&quot;#std:templatetag-if&quot;&gt;&lt;code&gt;if&lt;/code&gt;&lt;/a&gt; tags. Sometimes that is better for clarity anyway, for the sake of those who do not know the precedence rules.</source>
          <target state="translated">우선 순위가 다른 &lt;a href=&quot;#std:templatetag-if&quot;&gt; &lt;code&gt;if&lt;/code&gt; &lt;/a&gt; 중첩 된 if 태그 를 사용해야 합니다. 때로는 우선 순위 규칙을 모르는 사람들을 위해 명확성을 위해 더 나은 경우가 있습니다.</target>
        </trans-unit>
        <trans-unit id="94aa71aa505c6a16108b61bb062ab6ada6bf5751" translate="yes" xml:space="preserve">
          <source>If you need more control, you can create your own authentication backend that inherits from &lt;a href=&quot;../ref/contrib/auth#django.contrib.auth.backends.RemoteUserBackend&quot;&gt;&lt;code&gt;RemoteUserBackend&lt;/code&gt;&lt;/a&gt; and override one or more of its attributes and methods.</source>
          <target state="translated">더 많은 제어가 필요한 경우 &lt;a href=&quot;../ref/contrib/auth#django.contrib.auth.backends.RemoteUserBackend&quot;&gt; &lt;code&gt;RemoteUserBackend&lt;/code&gt; &lt;/a&gt; 에서 상속되는 고유 한 인증 백엔드를 작성 하고 하나 이상의 해당 속성 및 메소드를 대체 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="758aabbe668d354fb6f337c8ed3f754bf52e0550" translate="yes" xml:space="preserve">
          <source>If you need more control, you can create your own authentication backend that inherits from this class and override these attributes or methods:</source>
          <target state="translated">더 많은 제어가 필요한 경우이 클래스에서 상속되는 자체 인증 백엔드를 작성하고 다음 속성 또는 메소드를 대체 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0e28d0fde6b118d6feed4accf2b47a636af43e24" translate="yes" xml:space="preserve">
          <source>If you need more fine-grained control, use a tuple (or list) as value for &lt;code&gt;list_select_related&lt;/code&gt;. Empty tuple will prevent Django from calling &lt;code&gt;select_related&lt;/code&gt; at all. Any other tuple will be passed directly to &lt;code&gt;select_related&lt;/code&gt; as parameters. For example:</source>
          <target state="translated">보다 세분화 된 제어가 필요한 경우 튜플 (또는 목록)을 &lt;code&gt;list_select_related&lt;/code&gt; 의 값으로 사용 하십시오 . 비어있는 튜플은 Django가 &lt;code&gt;select_related&lt;/code&gt; 를 전혀 호출하지 못하게 합니다. 다른 튜플은 매개 변수 로 &lt;code&gt;select_related&lt;/code&gt; 에 직접 전달됩니다 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="d8cb56dde557370f78a7f18c4a395b3fd0b21ee4" translate="yes" xml:space="preserve">
          <source>If you need more flexibility, you could also add a new argument to your custom &lt;a href=&quot;../../ref/django-admin#django-admin-makemessages&quot;&gt;&lt;code&gt;makemessages&lt;/code&gt;&lt;/a&gt; command:</source>
          <target state="translated">유연성이 더 필요한 경우 사용자 정의 &lt;a href=&quot;../../ref/django-admin#django-admin-makemessages&quot;&gt; &lt;code&gt;makemessages&lt;/code&gt; &lt;/a&gt; 명령에 새 인수를 추가 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="aff7c703e8b54ba634b913901864d3aa00cffcf1" translate="yes" xml:space="preserve">
          <source>If you need the response to be streamed from the iterator to the client, you must use the &lt;a href=&quot;#django.http.StreamingHttpResponse&quot;&gt;&lt;code&gt;StreamingHttpResponse&lt;/code&gt;&lt;/a&gt; class instead.</source>
          <target state="translated">반복자에서 클라이언트로 응답을 스트리밍해야하는 경우 &lt;a href=&quot;#django.http.StreamingHttpResponse&quot;&gt; &lt;code&gt;StreamingHttpResponse&lt;/code&gt; &lt;/a&gt; 클래스를 대신 사용해야합니다 .</target>
        </trans-unit>
        <trans-unit id="9cf5c4ff845a5d20e57ce99fe95fc4dfe26d3a0d" translate="yes" xml:space="preserve">
          <source>If you need to access a membership&amp;rsquo;s information you may do so by directly querying the &lt;code&gt;Membership&lt;/code&gt; model:</source>
          <target state="translated">멤버쉽 정보에 액세스해야하는 경우 &lt;code&gt;Membership&lt;/code&gt; 모델 을 직접 쿼리하여 액세스 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="29d093239d80818b0b1e33570e4407bb058ea195" translate="yes" xml:space="preserve">
          <source>If you need to access some additional information about a form field in a template and using a subclass of &lt;a href=&quot;fields#django.forms.Field&quot;&gt;&lt;code&gt;Field&lt;/code&gt;&lt;/a&gt; isn&amp;rsquo;t sufficient, consider also customizing &lt;a href=&quot;#django.forms.BoundField&quot;&gt;&lt;code&gt;BoundField&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">템플리트의 양식 필드에 대한 추가 정보에 액세스해야하고 &lt;a href=&quot;fields#django.forms.Field&quot;&gt; &lt;code&gt;Field&lt;/code&gt; &lt;/a&gt; 의 서브 클래스를 사용하는 것으로 충분하지 않은 경우 &lt;a href=&quot;#django.forms.BoundField&quot;&gt; &lt;code&gt;BoundField&lt;/code&gt; &lt;/a&gt; 사용자 정의 도 고려하십시오 .</target>
        </trans-unit>
        <trans-unit id="ecb3aea88ed07bec970c7d28d05fa46d621b0e09" translate="yes" xml:space="preserve">
          <source>If you need to add a PostgreSQL extension (like &lt;code&gt;hstore&lt;/code&gt;, &lt;code&gt;postgis&lt;/code&gt;, etc.) using a migration, use the &lt;a href=&quot;contrib/postgres/operations#django.contrib.postgres.operations.CreateExtension&quot;&gt;&lt;code&gt;CreateExtension&lt;/code&gt;&lt;/a&gt; operation.</source>
          <target state="translated">마이그레이션을 사용하여 PostgreSQL 확장 (예 : &lt;code&gt;hstore&lt;/code&gt; , &lt;code&gt;postgis&lt;/code&gt; 등) 을 추가해야하는 경우 &lt;a href=&quot;contrib/postgres/operations#django.contrib.postgres.operations.CreateExtension&quot;&gt; &lt;code&gt;CreateExtension&lt;/code&gt; &lt;/a&gt; 작업을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="e450e893ae7afe1bc2e22ffb0c5a0a76816766d3" translate="yes" xml:space="preserve">
          <source>If you need to add additional fields to the formset this can be easily accomplished. The formset base class provides an &lt;code&gt;add_fields&lt;/code&gt; method. You can override this method to add your own fields or even redefine the default fields/attributes of the order and deletion fields:</source>
          <target state="translated">양식 세트에 추가 필드를 추가해야하는 경우 쉽게 수행 할 수 있습니다. formset 기본 클래스는 &lt;code&gt;add_fields&lt;/code&gt; 메소드를 제공합니다 . 이 방법을 재정 의하여 자신의 필드를 추가하거나 순서 및 삭제 필드의 기본 필드 / 속성을 재정의 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="a49d29d22712c0f8cc4a9ef3a3f1dc48cf130bea" translate="yes" xml:space="preserve">
          <source>If you need to change how emails are sent you can write your own email backend. The &lt;a href=&quot;../ref/settings#std:setting-EMAIL_BACKEND&quot;&gt;&lt;code&gt;EMAIL_BACKEND&lt;/code&gt;&lt;/a&gt; setting in your settings file is then the Python import path for your backend class.</source>
          <target state="translated">이메일 전송 방법을 변경해야하는 경우 고유 한 이메일 백엔드를 작성할 수 있습니다. 설정 파일 의 &lt;a href=&quot;../ref/settings#std:setting-EMAIL_BACKEND&quot;&gt; &lt;code&gt;EMAIL_BACKEND&lt;/code&gt; &lt;/a&gt; 설정은 백엔드 클래스의 Python 가져 오기 경로입니다.</target>
        </trans-unit>
        <trans-unit id="e5fa605cf3f76c4428e51ca9506d8d5da266d92c" translate="yes" xml:space="preserve">
          <source>If you need to change this default behavior, create the intermediary table as an explicit model (with &lt;code&gt;managed&lt;/code&gt; set as needed) and use the &lt;a href=&quot;fields#django.db.models.ManyToManyField.through&quot;&gt;&lt;code&gt;ManyToManyField.through&lt;/code&gt;&lt;/a&gt; attribute to make the relation use your custom model.</source>
          <target state="translated">이 기본 동작을 변경해야하는 경우 중개 테이블을 명시 적 모델 ( 필요에 따라 &lt;code&gt;managed&lt;/code&gt; 세트 포함)로 작성하고 &lt;a href=&quot;fields#django.db.models.ManyToManyField.through&quot;&gt; &lt;code&gt;ManyToManyField.through&lt;/code&gt; &lt;/a&gt; 속성을 사용하여 관계가 사용자 정의 모델을 사용하도록하십시오.</target>
        </trans-unit>
        <trans-unit id="417131b19902519fe0b468a60926a5bf16770559" translate="yes" xml:space="preserve">
          <source>If you need to clear the list of related fields added by past calls of &lt;code&gt;select_related&lt;/code&gt; on a &lt;code&gt;QuerySet&lt;/code&gt;, you can pass &lt;code&gt;None&lt;/code&gt; as a parameter:</source>
          <target state="translated">당신이 과거의 호출에 의해 추가 관련 분야의 목록을 취소해야하는 경우 &lt;code&gt;select_related&lt;/code&gt; A의 &lt;code&gt;QuerySet&lt;/code&gt; , 당신은 통과 할 수 &lt;code&gt;None&lt;/code&gt; 매개 변수로를 :</target>
        </trans-unit>
        <trans-unit id="16b5139d25521e92cae75d82c00fd807f514ef86" translate="yes" xml:space="preserve">
          <source>If you need to construct a &lt;code&gt;File&lt;/code&gt; yourself, the easiest way is to create one using a Python built-in &lt;code&gt;file&lt;/code&gt; object:</source>
          <target state="translated">&lt;code&gt;File&lt;/code&gt; 을 직접 생성해야하는 경우 가장 쉬운 방법은 Python 내장 &lt;code&gt;file&lt;/code&gt; 객체를 사용하여 생성하는 것입니다 .</target>
        </trans-unit>
        <trans-unit id="3c6d8d98e29f39567c45f015a91e483e346b4e97" translate="yes" xml:space="preserve">
          <source>If you need to create a relationship on a model that has not yet been defined, you can use the name of the model, rather than the model object itself:</source>
          <target state="translated">아직 정의되지 않은 모델에서 관계를 작성해야하는 경우 모델 오브젝트 자체가 아닌 모델 이름을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="65d871b7088c66feacdac17c59f3a01772b1f023" translate="yes" xml:space="preserve">
          <source>If you need to create a user to login with, use the &lt;a href=&quot;../../django-admin#django-admin-createsuperuser&quot;&gt;&lt;code&gt;createsuperuser&lt;/code&gt;&lt;/a&gt; command. By default, logging in to the admin requires that the user has the &lt;a href=&quot;../auth#django.contrib.auth.models.User.is_superuser&quot;&gt;&lt;code&gt;is_superuser&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../auth#django.contrib.auth.models.User.is_staff&quot;&gt;&lt;code&gt;is_staff&lt;/code&gt;&lt;/a&gt; attribute set to &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">로그인 할 사용자를 작성해야하는 경우 &lt;a href=&quot;../../django-admin#django-admin-createsuperuser&quot;&gt; &lt;code&gt;createsuperuser&lt;/code&gt; &lt;/a&gt; 명령을 사용하십시오 . 기본적으로 관리자에 로그인하려면 사용자에게 &lt;a href=&quot;../auth#django.contrib.auth.models.User.is_superuser&quot;&gt; &lt;code&gt;is_superuser&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;../auth#django.contrib.auth.models.User.is_staff&quot;&gt; &lt;code&gt;is_staff&lt;/code&gt; &lt;/a&gt; 속성이 &lt;code&gt;True&lt;/code&gt; 로 설정되어 있어야 합니다 .</target>
        </trans-unit>
        <trans-unit id="d65af76fc2fae362276614f23f186268a8063338" translate="yes" xml:space="preserve">
          <source>If you need to customize search you can use &lt;a href=&quot;#django.contrib.admin.ModelAdmin.get_search_results&quot;&gt;&lt;code&gt;ModelAdmin.get_search_results()&lt;/code&gt;&lt;/a&gt; to provide additional or alternate search behavior.</source>
          <target state="translated">검색을 사용자 정의해야하는 경우 &lt;a href=&quot;#django.contrib.admin.ModelAdmin.get_search_results&quot;&gt; &lt;code&gt;ModelAdmin.get_search_results()&lt;/code&gt; &lt;/a&gt; 를 사용하여 추가 또는 대체 검색 동작을 제공 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="268d1539953ae22ff11a5330553a90257431d684" translate="yes" xml:space="preserve">
          <source>If you need to customize the SQL mode, you can set the &lt;code&gt;sql_mode&lt;/code&gt; variable like other MySQL options: either in a config file or with the entry &lt;code&gt;'init_command': &quot;SET sql_mode='STRICT_TRANS_TABLES'&quot;&lt;/code&gt; in the &lt;a href=&quot;settings#std:setting-OPTIONS&quot;&gt;&lt;code&gt;OPTIONS&lt;/code&gt;&lt;/a&gt; part of your database configuration in &lt;a href=&quot;settings#std:setting-DATABASES&quot;&gt;&lt;code&gt;DATABASES&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">SQL 모드를 사용자 정의해야하는 경우 다른 MySQL 옵션과 같이 &lt;code&gt;sql_mode&lt;/code&gt; 변수를 구성 파일에서 설정하거나 데이터베이스 구성 의 &lt;a href=&quot;settings#std:setting-OPTIONS&quot;&gt; &lt;code&gt;OPTIONS&lt;/code&gt; &lt;/a&gt; 부분 에있는 &lt;code&gt;'init_command': &quot;SET sql_mode='STRICT_TRANS_TABLES'&quot;&lt;/code&gt; 을 사용하여 설정할 수 있습니다. &lt;a href=&quot;settings#std:setting-DATABASES&quot;&gt; &lt;code&gt;DATABASES&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="5590b9cc3e5a4f06eb74e308901af7ab377968ea" translate="yes" xml:space="preserve">
          <source>If you need to disable a &lt;a href=&quot;#adminsite-actions&quot;&gt;site-wide action&lt;/a&gt; you can call &lt;a href=&quot;#django.contrib.admin.AdminSite.disable_action&quot;&gt;&lt;code&gt;AdminSite.disable_action()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#adminsite-actions&quot;&gt;사이트 전체 작업&lt;/a&gt; 을 비활성화해야하는 경우 &lt;a href=&quot;#django.contrib.admin.AdminSite.disable_action&quot;&gt; &lt;code&gt;AdminSite.disable_action()&lt;/code&gt; &lt;/a&gt; 호출 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="3188dcbcf55e21ddcef8ee90b69dccce7ee89480" translate="yes" xml:space="preserve">
          <source>If you need to distinguish between bound and unbound form instances at runtime, check the value of the form&amp;rsquo;s &lt;a href=&quot;#django.forms.Form.is_bound&quot;&gt;&lt;code&gt;is_bound&lt;/code&gt;&lt;/a&gt; attribute:</source>
          <target state="translated">런타임시 바인딩 된 인스턴스 인스턴스와 바인딩되지 않은 폼 인스턴스를 구별해야하는 경우 양식의 &lt;a href=&quot;#django.forms.Form.is_bound&quot;&gt; &lt;code&gt;is_bound&lt;/code&gt; &lt;/a&gt; 속성 값을 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="271b48b10c2eaee15e6c01af5201ecab45c59f1b" translate="yes" xml:space="preserve">
          <source>If you need to do this from within Python, do that with &lt;code&gt;os.environ&lt;/code&gt;:</source>
          <target state="translated">파이썬 내 에서이 작업을 수행 해야하는 경우 &lt;code&gt;os.environ&lt;/code&gt; 으로 수행하십시오 .</target>
        </trans-unit>
        <trans-unit id="05047b6375db39f11bb955e3562cff830f8ce275" translate="yes" xml:space="preserve">
          <source>If you need to execute more complex queries (for example, queries with &lt;code&gt;OR&lt;/code&gt; statements), you can use &lt;a href=&quot;#django.db.models.Q&quot;&gt;&lt;code&gt;Q objects&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">보다 복잡한 쿼리 (예 : &lt;code&gt;OR&lt;/code&gt; 문이있는 쿼리)를 실행해야하는 경우 &lt;a href=&quot;#django.db.models.Q&quot;&gt; &lt;code&gt;Q objects&lt;/code&gt; &lt;/a&gt; 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="382397a2d5889617644e1747a1ec56a1cb186983" translate="yes" xml:space="preserve">
          <source>If you need to get the content of the block from the parent template, the &lt;code&gt;{{ block.super }}&lt;/code&gt; variable will do the trick. This is useful if you want to add to the contents of a parent block instead of completely overriding it. Data inserted using &lt;code&gt;{{ block.super }}&lt;/code&gt; will not be automatically escaped (see the &lt;a href=&quot;#automatic-html-escaping&quot;&gt;next section&lt;/a&gt;), since it was already escaped, if necessary, in the parent template.</source>
          <target state="translated">부모 템플릿에서 블록의 내용을 &lt;code&gt;{{ block.super }}&lt;/code&gt; 경우 {{block.super}} 변수가 트릭을 수행합니다. 부모 블록의 내용을 완전히 재정의하지 않고 내용에 추가하려는 경우에 유용합니다. &lt;code&gt;{{ block.super }}&lt;/code&gt; 사용하여 삽입 된 데이터 는 필요한 경우 상위 템플릿에서 이미 이스케이프되었으므로 자동으로 이스케이프되지 않습니다 ( &lt;a href=&quot;#automatic-html-escaping&quot;&gt;다음 섹션 참조&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="7ebc26c78fa9c356f90a7f72742c57e3cd52c72f" translate="yes" xml:space="preserve">
          <source>If you need to identify the custom levels in your HTML or CSS, you need to provide a mapping via the &lt;a href=&quot;../settings#std:setting-MESSAGE_TAGS&quot;&gt;&lt;code&gt;MESSAGE_TAGS&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">HTML 또는 CSS에서 사용자 정의 레벨을 식별해야하는 경우 &lt;a href=&quot;../settings#std:setting-MESSAGE_TAGS&quot;&gt; &lt;code&gt;MESSAGE_TAGS&lt;/code&gt; &lt;/a&gt; 설정을 통해 맵핑을 제공해야 합니다.</target>
        </trans-unit>
        <trans-unit id="43d0b36b5694d463b889f6b0ba10b3bc8033471f" translate="yes" xml:space="preserve">
          <source>If you need to know whether &lt;code&gt;add()&lt;/code&gt; stored a value in the cache, you can check the return value. It will return &lt;code&gt;True&lt;/code&gt; if the value was stored, &lt;code&gt;False&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;add()&lt;/code&gt; 가 캐시에 값을 저장 했는지 여부를 알아야하는 경우 반환 값을 확인할 수 있습니다. 그것은 반환 &lt;code&gt;True&lt;/code&gt; 값을 저장 한 경우 &lt;code&gt;False&lt;/code&gt; 이 없습니다.</target>
        </trans-unit>
        <trans-unit id="d830c73c6c6c1f7e7b98469dce63d2206baf4296" translate="yes" xml:space="preserve">
          <source>If you need to loop over a list of lists, you can unpack the values in each sublist into individual variables. For example, if your context contains a list of (x,y) coordinates called &lt;code&gt;points&lt;/code&gt;, you could use the following to output the list of points:</source>
          <target state="translated">목록 목록을 반복해야하는 경우 각 하위 목록의 값을 개별 변수로 압축 해제 할 수 있습니다. 예를 들어, 컨텍스트에 &lt;code&gt;points&lt;/code&gt; 라는 (x, y) 좌표 목록이 포함 된 경우 다음을 사용하여 포인트 목록을 출력 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e4875586a1526cd06344d2126b39a51bf67bf624" translate="yes" xml:space="preserve">
          <source>If you need to order the resulting queryset using some of the new fields or tables you have included via &lt;code&gt;extra()&lt;/code&gt; use the &lt;code&gt;order_by&lt;/code&gt; parameter to &lt;code&gt;extra()&lt;/code&gt; and pass in a sequence of strings. These strings should either be model fields (as in the normal &lt;a href=&quot;#django.db.models.query.QuerySet.order_by&quot;&gt;&lt;code&gt;order_by()&lt;/code&gt;&lt;/a&gt; method on querysets), of the form &lt;code&gt;table_name.column_name&lt;/code&gt; or an alias for a column that you specified in the &lt;code&gt;select&lt;/code&gt; parameter to &lt;code&gt;extra()&lt;/code&gt;.</source>
          <target state="translated">새 필드 또는 테이블의 일부를 사용하여 결과의 검색어를 주문해야하는 경우가로 포함 시켰 &lt;code&gt;extra()&lt;/code&gt; 를 사용 &lt;code&gt;order_by&lt;/code&gt; 의 에 매개 변수 &lt;code&gt;extra()&lt;/code&gt; 문자열의 순서로 전달합니다. 이 문자열은 &lt;code&gt;table_name.column_name&lt;/code&gt; 형식의 모델 필드 ( 쿼리 세트 의 일반 &lt;a href=&quot;#django.db.models.query.QuerySet.order_by&quot;&gt; &lt;code&gt;order_by()&lt;/code&gt; &lt;/a&gt; 메소드에서와 같이) 이거나 &lt;code&gt;select&lt;/code&gt; 매개 변수에서 &lt;code&gt;extra()&lt;/code&gt; 로 지정한 열의 별명 이어야합니다 .</target>
        </trans-unit>
        <trans-unit id="29512c055a4bbedadcf50ac81bc12aa696fefce6" translate="yes" xml:space="preserve">
          <source>If you need to perform parameterized queries, you can use the &lt;code&gt;params&lt;/code&gt; argument to &lt;code&gt;raw()&lt;/code&gt;:</source>
          <target state="translated">매개 변수화 된 쿼리를 수행해야하는 경우 &lt;code&gt;params&lt;/code&gt; 인수를 &lt;code&gt;raw()&lt;/code&gt; 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="85d94e84caa03cb9aa1eba7c8a2edd2887aceacb" translate="yes" xml:space="preserve">
          <source>If you need to perform some more sophisticated manipulation of asset requirements, you can define the &lt;code&gt;media&lt;/code&gt; property directly. This is done by defining a widget property that returns an instance of &lt;code&gt;forms.Media&lt;/code&gt;. The constructor for &lt;code&gt;forms.Media&lt;/code&gt; accepts &lt;code&gt;css&lt;/code&gt; and &lt;code&gt;js&lt;/code&gt; keyword arguments in the same format as that used in a static media definition.</source>
          <target state="translated">보다 복잡한 자산 요구 사항 조작을 수행해야하는 경우 &lt;code&gt;media&lt;/code&gt; 속성을 직접 정의 할 수 있습니다. 이는 &lt;code&gt;forms.Media&lt;/code&gt; 인스턴스를 반환하는 위젯 속성을 정의하여 수행됩니다 . &lt;code&gt;forms.Media&lt;/code&gt; 의 생성자 는 정적 미디어 정의에 사용 된 것과 동일한 형식으로 &lt;code&gt;css&lt;/code&gt; 및 &lt;code&gt;js&lt;/code&gt; 키워드 인수를 허용 합니다.</target>
        </trans-unit>
        <trans-unit id="03077957c82f83770cda4245c00130142e0728ea" translate="yes" xml:space="preserve">
          <source>If you need to produce a custom feed format, you&amp;rsquo;ve got a couple of options.</source>
          <target state="translated">맞춤 피드 형식을 만들어야하는 경우 몇 가지 옵션이 있습니다.</target>
        </trans-unit>
        <trans-unit id="dce169f28d5a3a0a8217378654a731a6091f2895" translate="yes" xml:space="preserve">
          <source>If you need to provide custom file storage &amp;ndash; a common example is storing files on some remote system &amp;ndash; you can do so by defining a custom storage class. You&amp;rsquo;ll need to follow these steps:</source>
          <target state="translated">일부 원격 시스템에 파일을 저장하는 일반적인 예인 사용자 지정 파일 저장소를 제공해야하는 경우 사용자 지정 저장소 클래스를 정의하면됩니다. 다음 단계를 따라야합니다.</target>
        </trans-unit>
        <trans-unit id="21318dce302488db7fe1be9c8f91e7d9398db2d0" translate="yes" xml:space="preserve">
          <source>If you need to reload a model&amp;rsquo;s values from the database, you can use the &lt;code&gt;refresh_from_db()&lt;/code&gt; method. When this method is called without arguments the following is done:</source>
          <target state="translated">데이터베이스에서 모델 값을 다시로드해야하는 경우 &lt;code&gt;refresh_from_db()&lt;/code&gt; 메소드를 사용할 수 있습니다 . 이 메소드를 인수없이 호출하면 다음이 수행됩니다.</target>
        </trans-unit>
        <trans-unit id="9f60d676b2ff26e717c98cf757ee77b4169d2c79" translate="yes" xml:space="preserve">
          <source>If you need to rename your tag, you can provide a custom name for it:</source>
          <target state="translated">태그 이름을 변경해야하는 경우 사용자 정의 이름을 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="70ce7ed4a5fd90c845431eb06c0ba9bf7b77d4be" translate="yes" xml:space="preserve">
          <source>If you need to specify a dynamic order (for example depending on user or language) you can implement a &lt;a href=&quot;#django.contrib.admin.ModelAdmin.get_ordering&quot;&gt;&lt;code&gt;get_ordering()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">동적 순서를 지정해야하는 경우 (예 : 사용자 또는 언어에 따라) &lt;a href=&quot;#django.contrib.admin.ModelAdmin.get_ordering&quot;&gt; &lt;code&gt;get_ordering()&lt;/code&gt; &lt;/a&gt; 메소드를 구현할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="54934551f16cb178c17684aaa62b9b0ce737160b" translate="yes" xml:space="preserve">
          <source>If you need to specify a dynamic value based on the request, you can implement a &lt;a href=&quot;#django.contrib.admin.ModelAdmin.get_list_select_related&quot;&gt;&lt;code&gt;get_list_select_related()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">요청을 기반으로 동적 값을 지정해야하는 경우 &lt;a href=&quot;#django.contrib.admin.ModelAdmin.get_list_select_related&quot;&gt; &lt;code&gt;get_list_select_related()&lt;/code&gt; &lt;/a&gt; 메소드를 구현할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d7afe7febaba1ec3c478e01c27fcfae0fcae482f" translate="yes" xml:space="preserve">
          <source>If you need to specify such values, reset the sequence afterwards to avoid reusing a value that&amp;rsquo;s already in the table. The &lt;a href=&quot;django-admin#django-admin-sqlsequencereset&quot;&gt;&lt;code&gt;sqlsequencereset&lt;/code&gt;&lt;/a&gt; management command generates the SQL statements to do that.</source>
          <target state="translated">이러한 값을 지정해야하는 경우 테이블에 이미있는 값을 다시 사용하지 않도록 순서를 나중에 재설정하십시오. &lt;a href=&quot;django-admin#django-admin-sqlsequencereset&quot;&gt; &lt;code&gt;sqlsequencereset&lt;/code&gt; 의&lt;/a&gt; 관리 명령은 해당 작업을 수행 할 SQL 문을 생성합니다.</target>
        </trans-unit>
        <trans-unit id="42afbcfd63e453f7b679ed0c58b5d3f86138dbfa" translate="yes" xml:space="preserve">
          <source>If you need to specify this list dynamically, implement a &lt;a href=&quot;#django.contrib.admin.ModelAdmin.get_sortable_by&quot;&gt;&lt;code&gt;get_sortable_by()&lt;/code&gt;&lt;/a&gt; method instead.</source>
          <target state="translated">이 목록을 동적으로 지정해야하는 경우 &lt;a href=&quot;#django.contrib.admin.ModelAdmin.get_sortable_by&quot;&gt; &lt;code&gt;get_sortable_by()&lt;/code&gt; &lt;/a&gt; 메소드를 대신 구현하십시오 .</target>
        </trans-unit>
        <trans-unit id="385e9bf858c9d8171227212211f5666543e0edbb" translate="yes" xml:space="preserve">
          <source>If you need to use a different JSON encoder class you can pass the &lt;code&gt;encoder&lt;/code&gt; parameter to the constructor method:</source>
          <target state="translated">다른 JSON 인코더 클래스를 사용해야하는 경우 &lt;code&gt;encoder&lt;/code&gt; 매개 변수를 생성자 메소드에 전달할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="52403383dcd3d11592773e83b934a1caeec7695e" translate="yes" xml:space="preserve">
          <source>If you need to use a literal &lt;code&gt;%s&lt;/code&gt; inside your select string, use the sequence &lt;code&gt;%%s&lt;/code&gt;.</source>
          <target state="translated">선택 문자열 내 에서 리터럴 &lt;code&gt;%s&lt;/code&gt; 를 사용해야하는 경우 &lt;code&gt;%%s&lt;/code&gt; 시퀀스를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="e62765ab69b86199c0c670e1b19ddf6f4572d8af" translate="yes" xml:space="preserve">
          <source>If you need to use a spatial lookup or aggregate that doesn&amp;rsquo;t support the geography type as input, you can use the &lt;a href=&quot;../../models/database-functions#django.db.models.functions.Cast&quot;&gt;&lt;code&gt;Cast&lt;/code&gt;&lt;/a&gt; database function to convert the geography column to a geometry type in the query:</source>
          <target state="translated">지리 유형을 입력으로 지원하지 않는 공간 조회 또는 집계를 사용해야하는 경우 데이터베이스 &lt;a href=&quot;../../models/database-functions#django.db.models.functions.Cast&quot;&gt; &lt;code&gt;Cast&lt;/code&gt; &lt;/a&gt; 함수를 사용 하여 지리 열을 쿼리의 지오메트리 유형으로 변환 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7261e018cbf8f2bbdd8cb56b7d0debc25633a8f3" translate="yes" xml:space="preserve">
          <source>If you need to use something similar to the &lt;a href=&quot;templates/builtins#std:templatetag-url&quot;&gt;&lt;code&gt;url&lt;/code&gt;&lt;/a&gt; template tag in your code, Django provides the following function:</source>
          <target state="translated">코드에서 &lt;a href=&quot;templates/builtins#std:templatetag-url&quot;&gt; &lt;code&gt;url&lt;/code&gt; &lt;/a&gt; 템플릿 태그 와 비슷한 것을 사용해야하는 경우 Django는 다음 기능을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="65a8bbb933c1c4d11d662bcf552b38b0767fd8e4" translate="yes" xml:space="preserve">
          <source>If you need to use strings with these sequences, store them in template variables or use a custom template tag or filter to workaround the limitation.</source>
          <target state="translated">이러한 시퀀스에 문자열을 사용해야하는 경우 템플릿 변수에 저장하거나 사용자 지정 템플릿 태그 또는 필터를 사용하여 제한을 해결하십시오.</target>
        </trans-unit>
        <trans-unit id="fcc7733e03c7800262e0a10bde85e2867cb41401" translate="yes" xml:space="preserve">
          <source>If you need two annotations with two separate filters you can use the &lt;code&gt;filter&lt;/code&gt; argument with any aggregate. For example, to generate a list of authors with a count of highly rated books:</source>
          <target state="translated">두 개의 개별 필터가있는 두 개의 주석이 필요한 경우 집계와 함께 &lt;code&gt;filter&lt;/code&gt; 인수를 사용할 수 있습니다 . 예를 들어, 등급이 높은 책을 가진 저자 목록을 생성하려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="c897784a3f3666e7ffa637c1500a855cd1d427d9" translate="yes" xml:space="preserve">
          <source>If you obtain an error, you will have to recompile SQLite from source. Otherwise, skip this section.</source>
          <target state="translated">오류가 발생하면 소스에서 SQLite를 다시 컴파일해야합니다. 그렇지 않으면이 섹션을 건너 뛰십시오.</target>
        </trans-unit>
        <trans-unit id="741f58ec7bbe2e730412e151c54ddb2163fa4a4f" translate="yes" xml:space="preserve">
          <source>If you often use this pattern:</source>
          <target state="translated">이 패턴을 자주 사용하는 경우 :</target>
        </trans-unit>
        <trans-unit id="2f212d93748c23a6b8f8df2fb8bdf19695fec4c9" translate="yes" xml:space="preserve">
          <source>If you omit the extensions, Django will search all available fixture types for a matching fixture. For example:</source>
          <target state="translated">확장을 생략하면 Django는 사용 가능한 모든 조명기 유형에서 일치하는 조명기를 찾습니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="b7281fcbaa809c600b8793d4f53e33c8473eac8d" translate="yes" xml:space="preserve">
          <source>If you only need a foreign key value, use the foreign key value that is already on the object you&amp;rsquo;ve got, rather than getting the whole related object and taking its primary key. i.e. do:</source>
          <target state="translated">외래 키 값만 필요한 경우 전체 관련 개체를 가져와 기본 키를 사용하지 않고 이미 가지고있는 개체에있는 외래 키 값을 사용하십시오. 즉 :</target>
        </trans-unit>
        <trans-unit id="800fadfa713dccf394aba70d45e9d4112ae330ee" translate="yes" xml:space="preserve">
          <source>If you only pass in a single field, you can also pass in the &lt;code&gt;flat&lt;/code&gt; parameter. If &lt;code&gt;True&lt;/code&gt;, this will mean the returned results are single values, rather than one-tuples. An example should make the difference clearer:</source>
          <target state="translated">단일 필드 만 전달하는 경우 &lt;code&gt;flat&lt;/code&gt; 매개 변수를 전달할 수도 있습니다 . &lt;code&gt;True&lt;/code&gt; 인 경우 반환 된 결과가 1- 튜플이 아닌 단일 값임을 의미합니다. 예를 들어 차이를 더 명확하게해야합니다.</target>
        </trans-unit>
        <trans-unit id="21a02b2eee96e24a49f04e13b9eb6b72eba93d67" translate="yes" xml:space="preserve">
          <source>If you only serialize the Restaurant model:</source>
          <target state="translated">식당 모델 만 직렬화하는 경우 :</target>
        </trans-unit>
        <trans-unit id="09d4a126b134831de63cd4bb62765a50804cd5f0" translate="yes" xml:space="preserve">
          <source>If you only want a subset of fields to be serialized, you can specify a &lt;code&gt;fields&lt;/code&gt; argument to the serializer:</source>
          <target state="translated">필드의 서브 세트 만 직렬화 하려면 직렬화기에 &lt;code&gt;fields&lt;/code&gt; 인수를 지정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="4364377f218dbdb6f693a8ac230e516ce29b7d3f" translate="yes" xml:space="preserve">
          <source>If you only want files of a particular type, you can use the subscript operator to filter out a medium of interest. For example:</source>
          <target state="translated">특정 유형의 파일 만 원하는 경우 아래 첨자 연산자를 사용하여 관심있는 매체를 필터링 할 수 있습니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="b7761bd9d1203f2151ef4f8ccf146d8e1530f6c1" translate="yes" xml:space="preserve">
          <source>If you only want to pickle the necessary information to recreate the &lt;code&gt;QuerySet&lt;/code&gt; from the database at a later time, pickle the &lt;code&gt;query&lt;/code&gt; attribute of the &lt;code&gt;QuerySet&lt;/code&gt;. You can then recreate the original &lt;code&gt;QuerySet&lt;/code&gt; (without any results loaded) using some code like this:</source>
          <target state="translated">당신은 단지 재현하는 데 필요한 정보 피클하려면 &lt;code&gt;QuerySet&lt;/code&gt; 나중에 데이터베이스를, 피클 &lt;code&gt;query&lt;/code&gt; 의 속성 &lt;code&gt;QuerySet&lt;/code&gt; . 그런 다음 다음 과 같은 코드를 사용하여 결과를로드하지 않고 원래 &lt;code&gt;QuerySet&lt;/code&gt; 을 다시 작성할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="57e21af0c1526d4117f7cb3d0a6e6b7c87ae870c" translate="yes" xml:space="preserve">
          <source>If you opt to use this third method and you don&amp;rsquo;t iterate over the fields with a &lt;code&gt;{% for %}&lt;/code&gt; loop, you&amp;rsquo;ll need to render the primary key field. For example, if you were rendering the &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;age&lt;/code&gt; fields of a model:</source>
          <target state="translated">이 세 번째 방법을 사용하도록 선택하고 &lt;code&gt;{% for %}&lt;/code&gt; 루프가 있는 필드를 반복하지 않으면 기본 키 필드를 렌더링해야합니다. 예를 들어, 모델 의 &lt;code&gt;name&lt;/code&gt; 및 &lt;code&gt;age&lt;/code&gt; 필드를 렌더링하는 경우 :</target>
        </trans-unit>
        <trans-unit id="f4b5a3ee8156aeb994b28c82b8a75b4aeb508550" translate="yes" xml:space="preserve">
          <source>If you override &lt;code&gt;MESSAGE_LEVEL&lt;/code&gt; in your settings file and rely on any of the built-in constants, you must import the constants module directly to avoid the potential for circular imports, e.g.:</source>
          <target state="translated">설정 파일에서 &lt;code&gt;MESSAGE_LEVEL&lt;/code&gt; 을 무시 하고 내장 상수를 사용하는 경우 순환 가져 오기의 가능성을 피하기 위해 상수 모듈을 직접 가져와야합니다.</target>
        </trans-unit>
        <trans-unit id="7a02510672f31144e2b0955819bddaf9315a3389" translate="yes" xml:space="preserve">
          <source>If you override &lt;code&gt;MESSAGE_TAGS&lt;/code&gt; in your settings file and rely on any of the built-in constants, you must import the &lt;code&gt;constants&lt;/code&gt; module directly to avoid the potential for circular imports, e.g.:</source>
          <target state="translated">설정 파일에서 &lt;code&gt;MESSAGE_TAGS&lt;/code&gt; 를 재정의 하고 내장 상수 를 사용하는 경우 순환 가져 오기 가능성을 피하기 위해 &lt;code&gt;constants&lt;/code&gt; 모듈을 직접 가져와야합니다 .</target>
        </trans-unit>
        <trans-unit id="8b48af8079716221e4c0051117d47bfd44a4b260" translate="yes" xml:space="preserve">
          <source>If you override any of these methods, be sure to call the superclass methods since they add the required elements for each feed format.</source>
          <target state="translated">이러한 메소드를 대체하는 경우 각 피드 형식에 필요한 요소를 추가하므로 수퍼 클래스 메소드를 호출해야합니다.</target>
        </trans-unit>
        <trans-unit id="bdf1c5dfe752c4d781780083470ca6f0e40af894" translate="yes" xml:space="preserve">
          <source>If you override the &lt;code&gt;get_queryset()&lt;/code&gt; method and filter out any rows, Django will return incorrect results. Don&amp;rsquo;t do that. A manager that filters results in &lt;code&gt;get_queryset()&lt;/code&gt; is not appropriate for use as a base manager.</source>
          <target state="translated">&lt;code&gt;get_queryset()&lt;/code&gt; 메소드 를 재정의하고 행을 필터링하면 Django가 잘못된 결과를 반환합니다. 하지마 &lt;code&gt;get_queryset()&lt;/code&gt; 에서 결과를 필터링하는 관리자 는 기본 관리자로 사용하기에 적합하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="efa7906aab8c824e5c384fdd3e0c6fb2aa3af44d" translate="yes" xml:space="preserve">
          <source>If you override these methods on your model, you must call the parent class&amp;rsquo; methods for these signals to be sent.</source>
          <target state="translated">모델에서 이러한 메서드를 재정의하는 경우 이러한 신호를 보내려면 부모 클래스의 메서드를 호출해야합니다.</target>
        </trans-unit>
        <trans-unit id="139f65047f08d0c31df99bf777b749aac8b06810" translate="yes" xml:space="preserve">
          <source>If you override this method, make sure that the returned inlines are instances of the classes defined in &lt;a href=&quot;#django.contrib.admin.ModelAdmin.inlines&quot;&gt;&lt;code&gt;inlines&lt;/code&gt;&lt;/a&gt; or you might encounter a &amp;ldquo;Bad Request&amp;rdquo; error when adding related objects.</source>
          <target state="translated">이 메소드를 오버라이드 (override)하는 경우, 반환 된 인라인가에 정의 된 클래스의 인스턴스인지 확인 &lt;a href=&quot;#django.contrib.admin.ModelAdmin.inlines&quot;&gt; &lt;code&gt;inlines&lt;/code&gt; &lt;/a&gt; 또는 관련 개체를 추가 할 때 당신은 &quot;잘못된 요청&quot;오류가 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="cd49ed7d9ce6425ca491d84c25250c4b7a60d8ad" translate="yes" xml:space="preserve">
          <source>If you pass &lt;code&gt;in_bulk()&lt;/code&gt; an empty list, you&amp;rsquo;ll get an empty dictionary.</source>
          <target state="translated">&lt;code&gt;in_bulk()&lt;/code&gt; 에 빈 목록 을 전달 하면 빈 사전이 나타납니다.</target>
        </trans-unit>
        <trans-unit id="01b4c8798ac8d3c2ee64f1b7afb638cce29f856f" translate="yes" xml:space="preserve">
          <source>If you pass a string to Django that has been encoded in some other format, things will go wrong in interesting ways. Usually, Django will raise a &lt;code&gt;UnicodeDecodeError&lt;/code&gt; at some point.</source>
          <target state="translated">다른 형식으로 인코딩 된 Django에 문자열을 전달하면 흥미로운 방식으로 문제가 발생합니다. 일반적으로 Django는 어느 시점에서 &lt;code&gt;UnicodeDecodeError&lt;/code&gt; 를 발생시킵니다.</target>
        </trans-unit>
        <trans-unit id="f875b90b3600dbb8929f4dd6aae0773f46d238bd" translate="yes" xml:space="preserve">
          <source>If you pass an invalid keyword argument, a lookup function will raise &lt;code&gt;TypeError&lt;/code&gt;.</source>
          <target state="translated">잘못된 키워드 인수를 전달하면 조회 함수에서 &lt;code&gt;TypeError&lt;/code&gt; 가 발생 합니다.</target>
        </trans-unit>
        <trans-unit id="2a3d957dd878c573465d3ad6cc8518f32e53e656" translate="yes" xml:space="preserve">
          <source>If you pass in a &lt;code&gt;QuerySet&lt;/code&gt; resulting from &lt;code&gt;values()&lt;/code&gt; or &lt;code&gt;values_list()&lt;/code&gt; as the value to an &lt;code&gt;__in&lt;/code&gt; lookup, you need to ensure you are only extracting one field in the result. For example, this will work (filtering on the blog names):</source>
          <target state="translated">만약에 전달하면 &lt;code&gt;QuerySet&lt;/code&gt; 의 결과 &lt;code&gt;values()&lt;/code&gt; 또는 &lt;code&gt;values_list()&lt;/code&gt; 내지 An 값으로 &lt;code&gt;__in&lt;/code&gt; 의 룩업 경우에만 결과로 하나 개의 필드를 추출되도록 할 필요가있다. 예를 들어, 다음과 같이 작동합니다 (블로그 이름 필터링).</target>
        </trans-unit>
        <trans-unit id="55a3e9f28be7d4fb14de4ec185385e4a1a973d4f" translate="yes" xml:space="preserve">
          <source>If you pass the &lt;a href=&quot;../ref/django-admin#cmdoption-no-color&quot;&gt;&lt;code&gt;--no-color&lt;/code&gt;&lt;/a&gt; option when running your command, all &lt;code&gt;self.style()&lt;/code&gt; calls will return the original string uncolored.</source>
          <target state="translated">명령을 실행할 때 &lt;a href=&quot;../ref/django-admin#cmdoption-no-color&quot;&gt; &lt;code&gt;--no-color&lt;/code&gt; &lt;/a&gt; 옵션 을 전달하면 모든 &lt;code&gt;self.style()&lt;/code&gt; 호출이 원래 문자열을 무색으로 반환합니다.</target>
        </trans-unit>
        <trans-unit id="b79b1f32de698ec64ae613eae6bcf15970d7b876" translate="yes" xml:space="preserve">
          <source>If you plan on using Django&amp;rsquo;s &lt;a href=&quot;../topics/i18n/timezones&quot;&gt;timezone support&lt;/a&gt;, use &lt;a href=&quot;https://dev.mysql.com/doc/refman/en/mysql-tzinfo-to-sql.html&quot;&gt;mysql_tzinfo_to_sql&lt;/a&gt; to load time zone tables into the MySQL database. This needs to be done just once for your MySQL server, not per database.</source>
          <target state="translated">Django의 &lt;a href=&quot;../topics/i18n/timezones&quot;&gt;시간대 지원&lt;/a&gt; 을 사용하려는 경우 &lt;a href=&quot;https://dev.mysql.com/doc/refman/en/mysql-tzinfo-to-sql.html&quot;&gt;mysql_tzinfo_to_sql&lt;/a&gt; 을 사용 하여 시간대 테이블을 MySQL 데이터베이스에로드하십시오. 이 작업은 데이터베이스가 아닌 MySQL 서버에 대해 한 번만 수행하면됩니다.</target>
        </trans-unit>
        <trans-unit id="3d07ba410dfae393dcd5dd3868653a7b65add33c" translate="yes" xml:space="preserve">
          <source>If you plan to remove the old app later, you&amp;rsquo;ll need to set the &lt;code&gt;dependencies&lt;/code&gt; property based on whether or not the old app is installed. Otherwise, you&amp;rsquo;ll have missing dependencies once you uninstall the old app. Similarly, you&amp;rsquo;ll need to catch &lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#LookupError&quot;&gt;&lt;code&gt;LookupError&lt;/code&gt;&lt;/a&gt; in the &lt;code&gt;apps.get_model()&lt;/code&gt; call that retrieves models from the old app. This approach allows you to deploy your project anywhere without first installing and then uninstalling the old app.</source>
          <target state="translated">나중에 이전 앱을 제거하려는 경우 이전 앱의 설치 여부에 &lt;code&gt;dependencies&lt;/code&gt; 속성 을 설정해야합니다 . 그렇지 않으면 이전 앱을 제거하면 종속성이 누락됩니다. 마찬가지로 이전 앱에서 모델을 검색 하는 &lt;code&gt;apps.get_model()&lt;/code&gt; 호출 에서 &lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#LookupError&quot;&gt; &lt;code&gt;LookupError&lt;/code&gt; &lt;/a&gt; 를 잡아야 합니다. 이 방법을 사용하면 이전 앱을 먼저 설치 한 다음 제거하지 않고도 어디서나 프로젝트를 배포 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9073c8632746695fe881c718b8ef04b35fa192e4" translate="yes" xml:space="preserve">
          <source>If you plan to run Django in a multithreaded environment (e.g. Apache using the default MPM module on any modern operating system), then you &lt;strong&gt;must&lt;/strong&gt; set the &lt;code&gt;threaded&lt;/code&gt; option of your Oracle database configuration to &lt;code&gt;True&lt;/code&gt;:</source>
          <target state="translated">다중 스레드 환경에서 Django를 실행하려는 경우 (예 : 최신 운영 체제에서 기본 MPM 모듈을 사용하는 Apache) Oracle 데이터베이스 구성 의 &lt;code&gt;threaded&lt;/code&gt; 옵션을 &lt;code&gt;True&lt;/code&gt; 로 설정 &lt;strong&gt;해야합니다&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="8d225f0abfbc3c7de48d5bc9786ca2d1091b6fe9" translate="yes" xml:space="preserve">
          <source>If you plan to use Django&amp;rsquo;s &lt;code&gt;manage.py migrate&lt;/code&gt; command to automatically create database tables for your models (after first installing Django and creating a project), you&amp;rsquo;ll need to ensure that Django has permission to create and alter tables in the database you&amp;rsquo;re using; if you plan to manually create the tables, you can grant Django &lt;code&gt;SELECT&lt;/code&gt;, &lt;code&gt;INSERT&lt;/code&gt;, &lt;code&gt;UPDATE&lt;/code&gt; and &lt;code&gt;DELETE&lt;/code&gt; permissions. After creating a database user with these permissions, you&amp;rsquo;ll specify the details in your project&amp;rsquo;s settings file, see &lt;a href=&quot;../ref/settings#std:setting-DATABASES&quot;&gt;&lt;code&gt;DATABASES&lt;/code&gt;&lt;/a&gt; for details.</source>
          <target state="translated">Django의 &lt;code&gt;manage.py migrate&lt;/code&gt; 명령을 사용하여 모델의 데이터베이스 테이블을 자동으로 작성하려면 (먼저 Django를 설치하고 프로젝트를 작성한 후) Django가 데이터베이스에서 테이블을 작성하고 변경할 수있는 권한이 있는지 확인해야합니다. 다시 사용; 테이블을 수동으로 생성하려는 경우 Django &lt;code&gt;SELECT&lt;/code&gt; , &lt;code&gt;INSERT&lt;/code&gt; , &lt;code&gt;UPDATE&lt;/code&gt; 및 &lt;code&gt;DELETE&lt;/code&gt; 권한을 부여 할 수 있습니다 . 이러한 권한으로 데이터베이스 사용자를 생성 한 후 프로젝트 설정 파일에 세부 정보를 지정합니다. 자세한 내용은 &lt;a href=&quot;../ref/settings#std:setting-DATABASES&quot;&gt; &lt;code&gt;DATABASES&lt;/code&gt; &lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="1cf8ce09ee94ba97497f8c75ae9497949e7ca9e6" translate="yes" xml:space="preserve">
          <source>If you plan to use Django&amp;rsquo;s database API functionality, you&amp;rsquo;ll need to make sure a database server is running. Django supports many different database servers and is officially supported with &lt;a href=&quot;https://www.postgresql.org/&quot;&gt;PostgreSQL&lt;/a&gt;, &lt;a href=&quot;https://mariadb.org/&quot;&gt;MariaDB&lt;/a&gt;, &lt;a href=&quot;https://www.mysql.com/&quot;&gt;MySQL&lt;/a&gt;, &lt;a href=&quot;https://www.oracle.com/&quot;&gt;Oracle&lt;/a&gt; and &lt;a href=&quot;https://www.sqlite.org/&quot;&gt;SQLite&lt;/a&gt;.</source>
          <target state="translated">Django의 데이터베이스 API 기능을 사용하려면 데이터베이스 서버가 실행 중인지 확인해야합니다. Django는 다양한 데이터베이스 서버를 지원하며 &lt;a href=&quot;https://www.postgresql.org/&quot;&gt;PostgreSQL&lt;/a&gt; , &lt;a href=&quot;https://mariadb.org/&quot;&gt;MariaDB&lt;/a&gt; , &lt;a href=&quot;https://www.mysql.com/&quot;&gt;MySQL&lt;/a&gt; , &lt;a href=&quot;https://www.oracle.com/&quot;&gt;Oracle&lt;/a&gt; 및 &lt;a href=&quot;https://www.sqlite.org/&quot;&gt;SQLite에서&lt;/a&gt; 공식적으로 지원됩니다 .</target>
        </trans-unit>
        <trans-unit id="2d29104b9899b9d86e33356f84568767e51c25b0" translate="yes" xml:space="preserve">
          <source>If you point the test client at a view that raises an exception and &lt;code&gt;Client.raise_request_exception&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;, that exception will be visible in the test case. You can then use a standard &lt;code&gt;try ... except&lt;/code&gt; block or &lt;a href=&quot;https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertRaises&quot;&gt;&lt;code&gt;assertRaises()&lt;/code&gt;&lt;/a&gt; to test for exceptions.</source>
          <target state="translated">예외를 발생시키는보기에서 테스트 클라이언트를 가리키고 &lt;code&gt;Client.raise_request_exception&lt;/code&gt; 이 &lt;code&gt;True&lt;/code&gt; 인 경우 테스트 케이스에 해당 예외가 표시됩니다. 그런 다음 block 또는 &lt;a href=&quot;https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertRaises&quot;&gt; &lt;code&gt;assertRaises()&lt;/code&gt; &lt;/a&gt; 를 &lt;code&gt;try ... except&lt;/code&gt; 표준 try ... 를 사용하여 예외를 테스트 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9a1ee774d1d6b71e65f51c9761d622d272f3e630" translate="yes" xml:space="preserve">
          <source>If you press &lt;code&gt;Ctrl-C&lt;/code&gt; while the tests are running, the test runner will wait for the currently running test to complete and then exit gracefully. During a graceful exit the test runner will output details of any test failures, report on how many tests were run and how many errors and failures were encountered, and destroy any test databases as usual. Thus pressing &lt;code&gt;Ctrl-C&lt;/code&gt; can be very useful if you forget to pass the &lt;a href=&quot;../../ref/django-admin#cmdoption-test-failfast&quot;&gt;&lt;code&gt;--failfast&lt;/code&gt;&lt;/a&gt; option, notice that some tests are unexpectedly failing and want to get details on the failures without waiting for the full test run to complete.</source>
          <target state="translated">를 누르면 &lt;code&gt;Ctrl-C&lt;/code&gt; 를이 테스트가 실행하는 동안, 테스트 러너를 완료하는 데 현재 실행중인 테스트 기다린 후 정상적으로 종료됩니다. 정상 종료하는 동안 테스트 실행기는 테스트 실패에 대한 세부 사항을 출력하고, 실행 된 테스트 수와 발생한 오류 및 실패 수를보고하며, 평소와 같이 테스트 데이터베이스를 파괴합니다. 따라서 &lt;a href=&quot;../../ref/django-admin#cmdoption-test-failfast&quot;&gt; &lt;code&gt;--failfast&lt;/code&gt; &lt;/a&gt; 옵션 을 전달 하지 않고 일부 테스트가 예기치 않게 실패하고 전체 테스트 실행이 완료되기를 기다리지 않고 실패에 대한 세부 정보를 얻으 려는 경우 &lt;code&gt;Ctrl-C&lt;/code&gt; 를 누르면 매우 유용합니다 .</target>
        </trans-unit>
        <trans-unit id="9fd3c524d495f19aa19c27cdbbee5399534aacb6" translate="yes" xml:space="preserve">
          <source>If you provide &lt;code&gt;content_type&lt;/code&gt; as &lt;em&gt;application/json&lt;/em&gt;, the &lt;code&gt;data&lt;/code&gt; is serialized using &lt;a href=&quot;https://docs.python.org/3/library/json.html#json.dumps&quot;&gt;&lt;code&gt;json.dumps()&lt;/code&gt;&lt;/a&gt; if it&amp;rsquo;s a dict, list, or tuple. Serialization is performed with &lt;a href=&quot;../serialization#django.core.serializers.json.DjangoJSONEncoder&quot;&gt;&lt;code&gt;DjangoJSONEncoder&lt;/code&gt;&lt;/a&gt; by default, and can be overridden by providing a &lt;code&gt;json_encoder&lt;/code&gt; argument to &lt;a href=&quot;#django.test.Client&quot;&gt;&lt;code&gt;Client&lt;/code&gt;&lt;/a&gt;. This serialization also happens for &lt;a href=&quot;#django.test.Client.put&quot;&gt;&lt;code&gt;put()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#django.test.Client.patch&quot;&gt;&lt;code&gt;patch()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#django.test.Client.delete&quot;&gt;&lt;code&gt;delete()&lt;/code&gt;&lt;/a&gt; requests.</source>
          <target state="translated">당신이 제공하는 경우 &lt;code&gt;content_type&lt;/code&gt; 같이 &lt;em&gt;응용 프로그램 / JSON&lt;/em&gt; 의 &lt;code&gt;data&lt;/code&gt; 사용하여 직렬화 &lt;a href=&quot;https://docs.python.org/3/library/json.html#json.dumps&quot;&gt; &lt;code&gt;json.dumps()&lt;/code&gt; &lt;/a&gt; 그것은 DICT, 목록 또는 튜플의 경우. 직렬화는 기본적 으로 &lt;a href=&quot;../serialization#django.core.serializers.json.DjangoJSONEncoder&quot;&gt; &lt;code&gt;DjangoJSONEncoder&lt;/code&gt; 를 사용&lt;/a&gt; 하여 수행되며 &lt;code&gt;json_encoder&lt;/code&gt; 인수를 &lt;a href=&quot;#django.test.Client&quot;&gt; &lt;code&gt;Client&lt;/code&gt; &lt;/a&gt; 에 제공하여 재정의 할 수 있습니다 . 이 직렬화는 &lt;a href=&quot;#django.test.Client.put&quot;&gt; &lt;code&gt;put()&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#django.test.Client.patch&quot;&gt; &lt;code&gt;patch()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#django.test.Client.delete&quot;&gt; &lt;code&gt;delete()&lt;/code&gt; &lt;/a&gt; 요청 에도 발생 합니다.</target>
        </trans-unit>
        <trans-unit id="d70400506fc271afc5226a9156b79bd7b0a3892e" translate="yes" xml:space="preserve">
          <source>If you provide a &lt;code&gt;description&lt;/code&gt; in your &lt;a href=&quot;#django.contrib.syndication.views.Feed&quot;&gt;&lt;code&gt;Feed&lt;/code&gt;&lt;/a&gt; class, Django will &lt;em&gt;not&lt;/em&gt; automatically put that into the &lt;code&gt;subtitle&lt;/code&gt; element, because a subtitle and description are not necessarily the same thing. Instead, you should define a &lt;code&gt;subtitle&lt;/code&gt; attribute.</source>
          <target state="translated">당신이 제공하는 경우 &lt;code&gt;description&lt;/code&gt; 당신의 &lt;a href=&quot;#django.contrib.syndication.views.Feed&quot;&gt; &lt;code&gt;Feed&lt;/code&gt; &lt;/a&gt; 클래스, 장고 것 &lt;em&gt;없는&lt;/em&gt; 자동으로 그 넣어 &lt;code&gt;subtitle&lt;/code&gt; 자막과 설명이 반드시 동일한 것은 아니기 때문에, 요소입니다. 대신 &lt;code&gt;subtitle&lt;/code&gt; 속성을 정의해야 합니다.</target>
        </trans-unit>
        <trans-unit id="aa823e0a0041a6947816c68759b373adb5e9f2ff" translate="yes" xml:space="preserve">
          <source>If you provide a URL with both an encoded GET data and a data argument, the data argument will take precedence.</source>
          <target state="translated">인코딩 된 GET 데이터와 데이터 인수가 모두있는 URL을 제공하면 데이터 인수가 우선합니다.</target>
        </trans-unit>
        <trans-unit id="10f0311a7904a5e576592cc2026a0cba559e4f85" translate="yes" xml:space="preserve">
          <source>If you provide an &lt;a href=&quot;applications#django.apps.AppConfig&quot;&gt;&lt;code&gt;AppConfig&lt;/code&gt;&lt;/a&gt; instance as the sender argument, please ensure that the signal is registered in &lt;a href=&quot;applications#django.apps.AppConfig.ready&quot;&gt;&lt;code&gt;ready()&lt;/code&gt;&lt;/a&gt;. &lt;code&gt;AppConfig&lt;/code&gt;s are recreated for tests that run with a modified set of &lt;a href=&quot;settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; (such as when settings are overridden) and such signals should be connected for each new &lt;code&gt;AppConfig&lt;/code&gt; instance.</source>
          <target state="translated">송신자 인수로 &lt;a href=&quot;applications#django.apps.AppConfig&quot;&gt; &lt;code&gt;AppConfig&lt;/code&gt; &lt;/a&gt; 인스턴스 를 제공하는 경우 신호가 &lt;a href=&quot;applications#django.apps.AppConfig.ready&quot;&gt; &lt;code&gt;ready()&lt;/code&gt; &lt;/a&gt; 등록되어 있는지 확인하십시오 . 수정 된 &lt;a href=&quot;settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt; 세트 (예 : 설정이 무시되는 경우)로 실행되는 테스트를 위해 &lt;code&gt;AppConfig&lt;/code&gt; 가 다시 작성 되며 이러한 신호는 각각의 새로운 &lt;code&gt;AppConfig&lt;/code&gt; 인스턴스에 연결되어야 합니다.</target>
        </trans-unit>
        <trans-unit id="b4f73da389b543957cd3a9484131a18f37edca2b" translate="yes" xml:space="preserve">
          <source>If you provide an anonymous user, &lt;a href=&quot;#std:templatetag-get_flatpages&quot;&gt;&lt;code&gt;get_flatpages&lt;/code&gt;&lt;/a&gt; will behave the same as if you hadn&amp;rsquo;t provided a user &amp;ndash; i.e., it will only show you public flatpages.</source>
          <target state="translated">익명 사용자를 제공하는 경우 &lt;a href=&quot;#std:templatetag-get_flatpages&quot;&gt; &lt;code&gt;get_flatpages&lt;/code&gt; &lt;/a&gt; 는 사용자를 제공 하지 않은 것과 동일하게 작동합니다. 즉, 공개 플랫 페이지 만 표시합니다.</target>
        </trans-unit>
        <trans-unit id="9045948db59d0563c0a89ef13a497ad48bb714a4" translate="yes" xml:space="preserve">
          <source>If you provide any other &lt;code&gt;content_type&lt;/code&gt; (e.g. &lt;em&gt;text/xml&lt;/em&gt; for an XML payload), the contents of &lt;code&gt;data&lt;/code&gt; are sent as-is in the POST request, using &lt;code&gt;content_type&lt;/code&gt; in the HTTP &lt;code&gt;Content-Type&lt;/code&gt; header.</source>
          <target state="translated">다른 &lt;code&gt;content_type&lt;/code&gt; (예 : XML 페이로드의 경우 &lt;em&gt;text / xml)&lt;/em&gt; 을 제공하면 &lt;code&gt;data&lt;/code&gt; 의 내용은 HTTP &lt;code&gt;Content-Type&lt;/code&gt; 헤더의 &lt;code&gt;content_type&lt;/code&gt; 을 사용하여 POST 요청에있는 그대로 전송됩니다 .</target>
        </trans-unit>
        <trans-unit id="910309a8687236b4eef1cb1fc342a8ae2c903a62" translate="yes" xml:space="preserve">
          <source>If you provide the &lt;code&gt;app_label&lt;/code&gt; argument, &lt;a href=&quot;django-admin#django-admin-makemigrations&quot;&gt;&lt;code&gt;makemigrations&lt;/code&gt;&lt;/a&gt; will automatically create the package if it doesn&amp;rsquo;t already exist.</source>
          <target state="translated">&lt;code&gt;app_label&lt;/code&gt; 인수 를 제공하면 &lt;a href=&quot;django-admin#django-admin-makemigrations&quot;&gt; &lt;code&gt;makemigrations&lt;/code&gt; &lt;/a&gt; 가 패키지가없는 경우 자동으로 패키지를 작성합니다.</target>
        </trans-unit>
        <trans-unit id="6a321433ae0fb44c3dba2485b43003a37dcff291" translate="yes" xml:space="preserve">
          <source>If you raise a &lt;code&gt;StopUpload&lt;/code&gt; or a &lt;code&gt;SkipFile&lt;/code&gt; exception, the upload will abort or the file will be completely skipped.</source>
          <target state="translated">당신이 올리면 &lt;code&gt;StopUpload&lt;/code&gt; 또는 &lt;code&gt;SkipFile&lt;/code&gt; 예외를 업로드는 중단됩니다 또는 파일을 완전히 건너 뜁니다.</target>
        </trans-unit>
        <trans-unit id="f5c930b9d9ff449d37bc58a058280baf8e9d25ba" translate="yes" xml:space="preserve">
          <source>If you really need to do the conversion yourself, you must ensure the datetime is converted to the appropriate time zone first. Usually, this will be the current timezone:</source>
          <target state="translated">직접 변환해야하는 경우 날짜 시간이 먼저 적절한 시간대로 변환되어야합니다. 일반적으로 다음은 현재 시간대입니다.</target>
        </trans-unit>
        <trans-unit id="aba032f0055b3ba362cd40902bc9f74174f0f582" translate="yes" xml:space="preserve">
          <source>If you reference &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User&quot;&gt;&lt;code&gt;User&lt;/code&gt;&lt;/a&gt; directly (for example, by referring to it in a foreign key), your code will not work in projects where the &lt;a href=&quot;../../ref/settings#std:setting-AUTH_USER_MODEL&quot;&gt;&lt;code&gt;AUTH_USER_MODEL&lt;/code&gt;&lt;/a&gt; setting has been changed to a different user model.</source>
          <target state="translated">&lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User&quot;&gt; &lt;code&gt;User&lt;/code&gt; &lt;/a&gt; 직접 참조하는 경우 (예 : 외래 키에서 사용자 를 참조하여) &lt;a href=&quot;../../ref/settings#std:setting-AUTH_USER_MODEL&quot;&gt; &lt;code&gt;AUTH_USER_MODEL&lt;/code&gt; &lt;/a&gt; 설정이 다른 사용자 모델로 변경된 프로젝트에서는 코드가 작동하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="0e1ecb9bcfed717dbcef9591ae9c8802ed73bd90" translate="yes" xml:space="preserve">
          <source>If you render a bound &lt;code&gt;Form&lt;/code&gt; object, the act of rendering will automatically run the form&amp;rsquo;s validation if it hasn&amp;rsquo;t already happened, and the HTML output will include the validation errors as a &lt;code&gt;&amp;lt;ul class=&quot;errorlist&quot;&amp;gt;&lt;/code&gt; near the field. The particular positioning of the error messages depends on the output method you&amp;rsquo;re using:</source>
          <target state="translated">바인딩 된 &lt;code&gt;Form&lt;/code&gt; 객체 를 렌더링하는 경우 렌더링 작업은 양식의 유효성 검사가 아직 수행되지 않은 경우 자동으로 실행하며 HTML 출력에는 유효성 검사 오류 가 필드 근처의 &lt;code&gt;&amp;lt;ul class=&quot;errorlist&quot;&amp;gt;&lt;/code&gt; 로 포함 됩니다. 오류 메시지의 특정 위치는 사용중인 출력 방법에 따라 다릅니다.</target>
        </trans-unit>
        <trans-unit id="07459c1428179836772ae027ec5297d2da1c0fb6" translate="yes" xml:space="preserve">
          <source>If you require even more control over inheritance, define your assets using a &lt;a href=&quot;#dynamic-property&quot;&gt;dynamic property&lt;/a&gt;. Dynamic properties give you complete control over which files are inherited, and which are not.</source>
          <target state="translated">상속에 대해 더 많은 제어가 필요한 경우 &lt;a href=&quot;#dynamic-property&quot;&gt;동적 속성을&lt;/a&gt; 사용하여 자산을 정의하십시오 . 동적 속성을 통해 상속되는 파일과 그렇지 않은 파일을 완벽하게 제어 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6b05712d776517317396db80b42d65e9ba95c552" translate="yes" xml:space="preserve">
          <source>If you require support for a concrete data type other than &lt;code&gt;int&lt;/code&gt; or &lt;code&gt;str&lt;/code&gt;, you can subclass &lt;code&gt;Choices&lt;/code&gt; and the required concrete data type, e.g. &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.date&quot;&gt;&lt;code&gt;date&lt;/code&gt;&lt;/a&gt; for use with &lt;a href=&quot;#django.db.models.DateField&quot;&gt;&lt;code&gt;DateField&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; 또는 &lt;code&gt;str&lt;/code&gt; 이외의 구체적 데이터 유형에 대한 지원이 필요한 경우 &lt;code&gt;Choices&lt;/code&gt; 및 필수 콘크리트 데이터 유형 (예 : &lt;a href=&quot;#django.db.models.DateField&quot;&gt; &lt;code&gt;DateField&lt;/code&gt; &lt;/a&gt; 와 함께 사용하는 &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.date&quot;&gt; &lt;code&gt;date&lt;/code&gt; &lt;/a&gt; 을 서브 클래스화할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="db9d39b35fe6f2b0b25e26ce3e859ec9c161c377" translate="yes" xml:space="preserve">
          <source>If you rotate your secret key, all of the above will be invalidated. Secret keys are not used for passwords of users and key rotation will not affect them.</source>
          <target state="translated">비밀 키를 돌리면 위의 모든 것이 무효화됩니다. 비밀 키는 사용자의 암호에 사용되지 않으며 키 회전은 영향을 미치지 않습니다.</target>
        </trans-unit>
        <trans-unit id="ce316f0b6ed1ed42439817ae8b4f2b1e4a6893ce" translate="yes" xml:space="preserve">
          <source>If you run this script as a user with normal privileges (recommended), you might not have access to start a port on a low port number. Low port numbers are reserved for the superuser (root).</source>
          <target state="translated">일반 권한 (권장)을 가진 사용자로이 스크립트를 실행하면 낮은 포트 번호에서 포트를 시작할 수있는 액세스 권한이 없을 수 있습니다. 낮은 포트 번호는 수퍼 유저 (루트)를 위해 예약되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="581d2693ba51ca9c6d74a9c3aec8c1d2ed991658" translate="yes" xml:space="preserve">
          <source>If you set &lt;a href=&quot;#std:setting-LOGGING_CONFIG&quot;&gt;&lt;code&gt;LOGGING_CONFIG&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;None&lt;/code&gt;, the logging configuration process will be skipped.</source>
          <target state="translated">&lt;a href=&quot;#std:setting-LOGGING_CONFIG&quot;&gt; &lt;code&gt;LOGGING_CONFIG&lt;/code&gt; &lt;/a&gt; 를 &lt;code&gt;None&lt;/code&gt; 으로 설정 하면 로깅 구성 프로세스를 건너 뜁니다.</target>
        </trans-unit>
        <trans-unit id="6c3c4b3192dde41e8664985f2f99b630a848a1da" translate="yes" xml:space="preserve">
          <source>If you set &lt;a href=&quot;../ref/settings#std:setting-DEBUG&quot;&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;False&lt;/code&gt;, you also need to properly set the &lt;a href=&quot;../ref/settings#std:setting-ALLOWED_HOSTS&quot;&gt;&lt;code&gt;ALLOWED_HOSTS&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">를 설정하면 &lt;a href=&quot;../ref/settings#std:setting-DEBUG&quot;&gt; &lt;code&gt;DEBUG&lt;/code&gt; 를&lt;/a&gt; 에 &lt;code&gt;False&lt;/code&gt; 제대로 설정하려면, 당신은 또한 필요 &lt;a href=&quot;../ref/settings#std:setting-ALLOWED_HOSTS&quot;&gt; &lt;code&gt;ALLOWED_HOSTS&lt;/code&gt; &lt;/a&gt; 설정합니다.</target>
        </trans-unit>
        <trans-unit id="912981cf3b9022683052e38d66b9a92981f3bcd3" translate="yes" xml:space="preserve">
          <source>If you set &lt;a href=&quot;../settings#std:setting-APPEND_SLASH&quot;&gt;&lt;code&gt;APPEND_SLASH&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;False&lt;/code&gt;, you must remove the slash in the catchall pattern or flatpages without a trailing slash will not be matched.</source>
          <target state="translated">&lt;a href=&quot;../settings#std:setting-APPEND_SLASH&quot;&gt; &lt;code&gt;APPEND_SLASH&lt;/code&gt; &lt;/a&gt; 를 &lt;code&gt;False&lt;/code&gt; 로 설정 하면 후행 슬래시가 없으면 캐치 올 패턴에서 슬래시를 제거해야합니다.</target>
        </trans-unit>
        <trans-unit id="395ad5010523ffc1e4b670f7488f023e63a22e17" translate="yes" xml:space="preserve">
          <source>If you set &lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt;, access settings values somehow, &lt;em&gt;then&lt;/em&gt; call &lt;code&gt;configure()&lt;/code&gt;, Django will raise a &lt;code&gt;RuntimeError&lt;/code&gt; indicating that settings have already been configured. There is a property for this purpose:</source>
          <target state="translated">를 설정하면 &lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt; 을 , 액세스 설정 값이 어떻게 든, &lt;em&gt;다음&lt;/em&gt; 호출 &lt;code&gt;configure()&lt;/code&gt; , 장고는 올릴 것이다 &lt;code&gt;RuntimeError&lt;/code&gt; 에 설정이 이미 구성되어 있는지 표시합니다. 이 목적을위한 속성이 있습니다 :</target>
        </trans-unit>
        <trans-unit id="fe70b07e6ecfbabb2180c75d50c0a38a0f922032" translate="yes" xml:space="preserve">
          <source>If you set &lt;code&gt;follow&lt;/code&gt; to &lt;code&gt;True&lt;/code&gt; the client will follow any redirects and a &lt;code&gt;redirect_chain&lt;/code&gt; attribute will be set in the response object containing tuples of the intermediate urls and status codes.</source>
          <target state="translated">&lt;code&gt;follow&lt;/code&gt; 를 &lt;code&gt;True&lt;/code&gt; 로 설정 하면 클라이언트가 모든 리디렉션을 따르고 &lt;code&gt;redirect_chain&lt;/code&gt; 속성이 중간 URL 및 상태 코드의 튜플을 포함하는 응답 객체에 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="3b6d0e5b836e0ffb759b558f1953cb5c40ecbc36" translate="yes" xml:space="preserve">
          <source>If you set &lt;code&gt;secure&lt;/code&gt; to &lt;code&gt;True&lt;/code&gt; the client will emulate an HTTPS request.</source>
          <target state="translated">&lt;code&gt;secure&lt;/code&gt; 를 &lt;code&gt;True&lt;/code&gt; 로 설정 하면 클라이언트가 HTTPS 요청을 에뮬레이트합니다.</target>
        </trans-unit>
        <trans-unit id="ed87f4fbcb2623f91b4272494cedf3618bd43220" translate="yes" xml:space="preserve">
          <source>If you set the &lt;a href=&quot;settings#std:setting-SECURE_SSL_REDIRECT&quot;&gt;&lt;code&gt;SECURE_SSL_REDIRECT&lt;/code&gt;&lt;/a&gt; setting to True, &lt;code&gt;SecurityMiddleware&lt;/code&gt; will permanently (HTTP 301) redirect all HTTP connections to HTTPS.</source>
          <target state="translated">당신이 설정 한 경우 &lt;a href=&quot;settings#std:setting-SECURE_SSL_REDIRECT&quot;&gt; &lt;code&gt;SECURE_SSL_REDIRECT&lt;/code&gt; 의&lt;/a&gt; True로 설정을 &lt;code&gt;SecurityMiddleware&lt;/code&gt; 는 영구적 (HTTP 301) HTTPS에 대한 모든 HTTP 연결을 리디렉션합니다.</target>
        </trans-unit>
        <trans-unit id="804dd8b3f2f0998b19444a70dea6c4f275857e45" translate="yes" xml:space="preserve">
          <source>If you specify a &lt;code&gt;max_length&lt;/code&gt; attribute, it will be reflected in the &lt;a href=&quot;../forms/widgets#django.forms.Textarea&quot;&gt;&lt;code&gt;Textarea&lt;/code&gt;&lt;/a&gt; widget of the auto-generated form field. However it is not enforced at the model or database level. Use a &lt;a href=&quot;#django.db.models.CharField&quot;&gt;&lt;code&gt;CharField&lt;/code&gt;&lt;/a&gt; for that.</source>
          <target state="translated">&lt;code&gt;max_length&lt;/code&gt; 속성 을 지정 하면 자동 생성 양식 필드 의 &lt;a href=&quot;../forms/widgets#django.forms.Textarea&quot;&gt; &lt;code&gt;Textarea&lt;/code&gt; &lt;/a&gt; 위젯에 반영됩니다 . 그러나 모델 또는 데이터베이스 레벨에서는 적용되지 않습니다. &lt;a href=&quot;#django.db.models.CharField&quot;&gt; &lt;code&gt;CharField&lt;/code&gt; &lt;/a&gt; 위해 CharField 를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="9247f5ac3aa9a42d00715df98ff9b7c3141c9780" translate="yes" xml:space="preserve">
          <source>If you specify a &lt;code&gt;mimetype&lt;/code&gt; of &lt;code&gt;message/rfc822&lt;/code&gt;, it will also accept &lt;a href=&quot;#django.core.mail.EmailMessage&quot;&gt;&lt;code&gt;django.core.mail.EmailMessage&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/3/library/email.compat32-message.html#email.message.Message&quot;&gt;&lt;code&gt;email.message.Message&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;mimetype&lt;/code&gt; of &lt;code&gt;message/rfc822&lt;/code&gt; 를 지정하면 &lt;a href=&quot;#django.core.mail.EmailMessage&quot;&gt; &lt;code&gt;django.core.mail.EmailMessage&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;https://docs.python.org/3/library/email.compat32-message.html#email.message.Message&quot;&gt; &lt;code&gt;email.message.Message&lt;/code&gt; &lt;/a&gt; 도 허용됩니다 .</target>
        </trans-unit>
        <trans-unit id="305c89bb0d6f74a15dce564b912bcda21f76247e" translate="yes" xml:space="preserve">
          <source>If you specify a string value or a &lt;a href=&quot;https://docs.python.org/3/library/pathlib.html#pathlib.Path&quot;&gt;&lt;code&gt;Path&lt;/code&gt;&lt;/a&gt;, it may contain &lt;a href=&quot;https://docs.python.org/3/library/time.html#time.strftime&quot;&gt;&lt;code&gt;strftime()&lt;/code&gt;&lt;/a&gt; formatting, which will be replaced by the date/time of the file upload (so that uploaded files don&amp;rsquo;t fill up the given directory). For example:</source>
          <target state="translated">문자열 값 또는 &lt;a href=&quot;https://docs.python.org/3/library/pathlib.html#pathlib.Path&quot;&gt; &lt;code&gt;Path&lt;/code&gt; &lt;/a&gt; 를 지정 하면 파일 업로드 날짜 / 시간으로 대체되는 &lt;a href=&quot;https://docs.python.org/3/library/time.html#time.strftime&quot;&gt; &lt;code&gt;strftime()&lt;/code&gt; &lt;/a&gt; 형식 이 포함될 수 있습니다 ( 업로드 된 파일이 지정된 디렉토리를 채우지 않음). 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="614fc3b6599f9800b8c0df59893296044168cf2c" translate="yes" xml:space="preserve">
          <source>If you specify both the &lt;a href=&quot;#django.views.generic.edit.ModelFormMixin.fields&quot;&gt;&lt;code&gt;fields&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#django.views.generic.edit.FormMixin.form_class&quot;&gt;&lt;code&gt;form_class&lt;/code&gt;&lt;/a&gt; attributes, an &lt;a href=&quot;../exceptions#django.core.exceptions.ImproperlyConfigured&quot;&gt;&lt;code&gt;ImproperlyConfigured&lt;/code&gt;&lt;/a&gt; exception will be raised.</source>
          <target state="translated">&lt;a href=&quot;#django.views.generic.edit.ModelFormMixin.fields&quot;&gt; &lt;code&gt;fields&lt;/code&gt; &lt;/a&gt; 와 &lt;a href=&quot;#django.views.generic.edit.FormMixin.form_class&quot;&gt; &lt;code&gt;form_class&lt;/code&gt; &lt;/a&gt; 속성을 모두 지정 하면 &lt;a href=&quot;../exceptions#django.core.exceptions.ImproperlyConfigured&quot;&gt; &lt;code&gt;ImproperlyConfigured&lt;/code&gt; &lt;/a&gt; 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="58aa7a9ed4ab489b04c05563f7b555c7cbfda0ee" translate="yes" xml:space="preserve">
          <source>If you specify both the &lt;a href=&quot;../../ref/class-based-views/mixins-editing#django.views.generic.edit.ModelFormMixin.fields&quot;&gt;&lt;code&gt;fields&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../ref/class-based-views/mixins-editing#django.views.generic.edit.FormMixin.form_class&quot;&gt;&lt;code&gt;form_class&lt;/code&gt;&lt;/a&gt; attributes, an &lt;a href=&quot;../../ref/exceptions#django.core.exceptions.ImproperlyConfigured&quot;&gt;&lt;code&gt;ImproperlyConfigured&lt;/code&gt;&lt;/a&gt; exception will be raised.</source>
          <target state="translated">&lt;a href=&quot;../../ref/class-based-views/mixins-editing#django.views.generic.edit.ModelFormMixin.fields&quot;&gt; &lt;code&gt;fields&lt;/code&gt; &lt;/a&gt; 와 &lt;a href=&quot;../../ref/class-based-views/mixins-editing#django.views.generic.edit.FormMixin.form_class&quot;&gt; &lt;code&gt;form_class&lt;/code&gt; &lt;/a&gt; 속성을 모두 지정 하면 &lt;a href=&quot;../../ref/exceptions#django.core.exceptions.ImproperlyConfigured&quot;&gt; &lt;code&gt;ImproperlyConfigured&lt;/code&gt; &lt;/a&gt; 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="e42f6fe4a1eafc9cbe0fe1ed0eb44c26cf3abac5" translate="yes" xml:space="preserve">
          <source>If you try to compile message files with incorrectly flagged strings, you&amp;rsquo;ll get an error message like &lt;code&gt;number of format specifications in 'msgid' and
'msgstr' does not match&lt;/code&gt; or &lt;code&gt;'msgstr' is not a valid Python format string,
unlike 'msgid'&lt;/code&gt;.</source>
          <target state="translated">잘못 플래그가 지정된 문자열로 메시지 파일을 컴파일하려고하면 &lt;code&gt;number of format specifications in 'msgid' and 'msgstr' does not match&lt;/code&gt; 와 같은 오류 메시지가 표시 되고 'msgstr'이 일치하지 않거나 &lt;code&gt;'msgstr' is not a valid Python format string, unlike 'msgid'&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f5f573bc4c6fc46c2deb1fdead6cdb73bb482a8e" translate="yes" xml:space="preserve">
          <source>If you try to order by a field that is a relation to another model, Django will use the default ordering on the related model, or order by the related model&amp;rsquo;s primary key if there is no &lt;a href=&quot;options#django.db.models.Options.ordering&quot;&gt;&lt;code&gt;Meta.ordering&lt;/code&gt;&lt;/a&gt; specified. For example, since the &lt;code&gt;Blog&lt;/code&gt; model has no default ordering specified:</source>
          <target state="translated">다른 모델과 관련이있는 필드를 기준으로 주문하면 Django는 관련 모델의 기본 순서를 사용하거나 &lt;a href=&quot;options#django.db.models.Options.ordering&quot;&gt; &lt;code&gt;Meta.ordering&lt;/code&gt; 이&lt;/a&gt; 지정 되지 않은 경우 관련 모델의 기본 키 순서를 사용 합니다. 예를 들어, &lt;code&gt;Blog&lt;/code&gt; 모델에는 기본 순서가 지정되어 있지 않으므로 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="2949a48f95fe7e8506fdc6f5701b10f53659defb" translate="yes" xml:space="preserve">
          <source>If you try to run any of these parts from a thread where there is a &lt;em&gt;running event loop&lt;/em&gt;, you will get a &lt;a href=&quot;../ref/exceptions#django.core.exceptions.SynchronousOnlyOperation&quot;&gt;&lt;code&gt;SynchronousOnlyOperation&lt;/code&gt;&lt;/a&gt; error. Note that you don&amp;rsquo;t have to be inside an async function directly to have this error occur. If you have called a synchronous function directly from an asynchronous function without going through something like &lt;code&gt;sync_to_async&lt;/code&gt; or a threadpool, then it can also occur, as your code is still running in an asynchronous context.</source>
          <target state="translated">&lt;em&gt;이벤트 루프&lt;/em&gt; 가 &lt;em&gt;실행중인&lt;/em&gt; 스레드에서 이러한 부분을 실행하려고 하면 &lt;a href=&quot;../ref/exceptions#django.core.exceptions.SynchronousOnlyOperation&quot;&gt; &lt;code&gt;SynchronousOnlyOperation&lt;/code&gt; &lt;/a&gt; 오류가 발생합니다. 이 오류가 발생하기 위해 비동기 함수 안에 직접있을 필요는 없습니다. &lt;code&gt;sync_to_async&lt;/code&gt; 또는 스레드 풀 과 같은 것을 거치지 않고 비동기 함수에서 직접 동기 함수를 호출 한 경우 코드가 여전히 비동기 컨텍스트에서 실행 중이므로 발생할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="c6693a4c5d595d8b5d83b35a6ac98c4c846239c9" translate="yes" xml:space="preserve">
          <source>If you use &lt;a href=&quot;../../ref/contrib/staticfiles#module-django.contrib.staticfiles&quot;&gt;&lt;code&gt;django.contrib.staticfiles&lt;/code&gt;&lt;/a&gt; as explained above, &lt;a href=&quot;../../ref/django-admin#django-admin-runserver&quot;&gt;&lt;code&gt;runserver&lt;/code&gt;&lt;/a&gt; will do this automatically when &lt;a href=&quot;../../ref/settings#std:setting-DEBUG&quot;&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;/a&gt; is set to &lt;code&gt;True&lt;/code&gt;. If you don&amp;rsquo;t have &lt;code&gt;django.contrib.staticfiles&lt;/code&gt; in &lt;a href=&quot;../../ref/settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt;, you can still manually serve static files using the &lt;a href=&quot;../../ref/views#django.views.static.serve&quot;&gt;&lt;code&gt;django.views.static.serve()&lt;/code&gt;&lt;/a&gt; view.</source>
          <target state="translated">위에서 설명한대로 &lt;a href=&quot;../../ref/contrib/staticfiles#module-django.contrib.staticfiles&quot;&gt; &lt;code&gt;django.contrib.staticfiles&lt;/code&gt; &lt;/a&gt; 를 사용하는 경우 &lt;a href=&quot;../../ref/settings#std:setting-DEBUG&quot;&gt; &lt;code&gt;DEBUG&lt;/code&gt; &lt;/a&gt; 가 &lt;code&gt;True&lt;/code&gt; 로 설정 되면 &lt;a href=&quot;../../ref/django-admin#django-admin-runserver&quot;&gt; &lt;code&gt;runserver&lt;/code&gt; &lt;/a&gt; 가이를 자동으로 수행합니다 . 당신이없는 경우 &lt;code&gt;django.contrib.staticfiles&lt;/code&gt; 을 에 &lt;a href=&quot;../../ref/settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt; , 당신은 여전히 수동으로 사용하여 정적 파일을 제공 할 수 &lt;a href=&quot;../../ref/views#django.views.static.serve&quot;&gt; &lt;code&gt;django.views.static.serve()&lt;/code&gt; &lt;/a&gt; 보기를.</target>
        </trans-unit>
        <trans-unit id="8418102b1538f4a4f474193f2874d5390e66e014" translate="yes" xml:space="preserve">
          <source>If you use &lt;a href=&quot;builtins#std:templatetag-extends&quot;&gt;&lt;code&gt;{% extends %}&lt;/code&gt;&lt;/a&gt; in a template, it must be the first template tag in that template. Template inheritance won&amp;rsquo;t work, otherwise.</source>
          <target state="translated">템플릿에서 &lt;a href=&quot;builtins#std:templatetag-extends&quot;&gt; &lt;code&gt;{% extends %}&lt;/code&gt; &lt;/a&gt; 를 사용하는 경우 해당 템플릿의 첫 번째 템플릿 태그 여야합니다. 그렇지 않으면 템플릿 상속이 작동하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="3afccef5fe1cf8e14fa9070553ef6dbbc3b09b80" translate="yes" xml:space="preserve">
          <source>If you use &lt;a href=&quot;querysets#django.db.models.query.QuerySet.prefetch_related&quot;&gt;&lt;code&gt;prefetch_related()&lt;/code&gt;&lt;/a&gt;, the &lt;code&gt;add()&lt;/code&gt;, &lt;code&gt;remove()&lt;/code&gt;, &lt;code&gt;clear()&lt;/code&gt;, and &lt;code&gt;set()&lt;/code&gt; methods clear the prefetched cache.</source>
          <target state="translated">당신이 사용하는 경우 &lt;a href=&quot;querysets#django.db.models.query.QuerySet.prefetch_related&quot;&gt; &lt;code&gt;prefetch_related()&lt;/code&gt; &lt;/a&gt; 의 &lt;code&gt;add()&lt;/code&gt; , &lt;code&gt;remove()&lt;/code&gt; , &lt;code&gt;clear()&lt;/code&gt; 및 &lt;code&gt;set()&lt;/code&gt; 메소드는 프리 페치 된 캐시를 취소합니다.</target>
        </trans-unit>
        <trans-unit id="f71c7943193c59ecd27d1e4581a08197f0907309" translate="yes" xml:space="preserve">
          <source>If you use &lt;code&gt;CacheMiddleware&lt;/code&gt;, put &lt;code&gt;LocaleMiddleware&lt;/code&gt; after it.</source>
          <target state="translated">당신이 사용하는 경우 &lt;code&gt;CacheMiddleware&lt;/code&gt; 을 넣어 &lt;code&gt;LocaleMiddleware&lt;/code&gt; 을 뒤에.</target>
        </trans-unit>
        <trans-unit id="fc8b56cb887dca8be941443856060957b865139d" translate="yes" xml:space="preserve">
          <source>If you use a &lt;code&gt;values()&lt;/code&gt; clause after an &lt;a href=&quot;#django.db.models.query.QuerySet.extra&quot;&gt;&lt;code&gt;extra()&lt;/code&gt;&lt;/a&gt; call, any fields defined by a &lt;code&gt;select&lt;/code&gt; argument in the &lt;a href=&quot;#django.db.models.query.QuerySet.extra&quot;&gt;&lt;code&gt;extra()&lt;/code&gt;&lt;/a&gt; must be explicitly included in the &lt;code&gt;values()&lt;/code&gt; call. Any &lt;a href=&quot;#django.db.models.query.QuerySet.extra&quot;&gt;&lt;code&gt;extra()&lt;/code&gt;&lt;/a&gt; call made after a &lt;code&gt;values()&lt;/code&gt; call will have its extra selected fields ignored.</source>
          <target state="translated">당신이 사용하는 경우 &lt;code&gt;values()&lt;/code&gt; 절 애프터 &lt;a href=&quot;#django.db.models.query.QuerySet.extra&quot;&gt; &lt;code&gt;extra()&lt;/code&gt; &lt;/a&gt; 호출하는 의해 정의 된 모든 필드 &lt;code&gt;select&lt;/code&gt; 에 인수 &lt;a href=&quot;#django.db.models.query.QuerySet.extra&quot;&gt; &lt;code&gt;extra()&lt;/code&gt; &lt;/a&gt; 명시 적으로 포함되어야합니다 &lt;code&gt;values()&lt;/code&gt; 호출. 모든 &lt;a href=&quot;#django.db.models.query.QuerySet.extra&quot;&gt; &lt;code&gt;extra()&lt;/code&gt; &lt;/a&gt; 이후 전화 &lt;code&gt;values()&lt;/code&gt; 호출은 추가 선택 필드는 무시해야합니다.</target>
        </trans-unit>
        <trans-unit id="5138658165170713fe8921c287483c369dd879d1" translate="yes" xml:space="preserve">
          <source>If you use a variable that doesn&amp;rsquo;t exist, the template system will insert the value of the &lt;code&gt;string_if_invalid&lt;/code&gt; option, which is set to &lt;code&gt;''&lt;/code&gt; (the empty string) by default.</source>
          <target state="translated">존재하지 않는 변수를 사용하는 경우 템플리트 시스템은 기본적 으로 &lt;code&gt;''&lt;/code&gt; (빈 문자열)로 설정된 &lt;code&gt;string_if_invalid&lt;/code&gt; 옵션 의 값을 삽입합니다 .</target>
        </trans-unit>
        <trans-unit id="d3110291b387e92d09039d47bcce85bc592e4fda" translate="yes" xml:space="preserve">
          <source>If you use an &lt;code&gt;initial&lt;/code&gt; for displaying a formset, you should pass the same &lt;code&gt;initial&lt;/code&gt; when processing that formset&amp;rsquo;s submission so that the formset can detect which forms were changed by the user. For example, you might have something like: &lt;code&gt;ArticleFormSet(request.POST, initial=[...])&lt;/code&gt;.</source>
          <target state="translated">양식 세트 를 표시 하기 위해 &lt;code&gt;initial&lt;/code&gt; 을 사용하는 경우 , 양식 세트가 사용자가 변경 한 양식을 감지 할 수 있도록 해당 양식 세트 제출을 처리 할 때 동일한 &lt;code&gt;initial&lt;/code&gt; 전달해야합니다 . 예를 들어 &lt;code&gt;ArticleFormSet(request.POST, initial=[...])&lt;/code&gt; 과 같은 형식 일 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="7ab4496b070493e1cbd88967385539fa01b3ea78" translate="yes" xml:space="preserve">
          <source>If you use any of Django&amp;rsquo;s custom &lt;code&gt;TestCase&lt;/code&gt; classes, the test runner will clear the contents of the test email outbox at the start of each test case.</source>
          <target state="translated">Django의 사용자 정의 &lt;code&gt;TestCase&lt;/code&gt; 클래스 를 사용하는 경우 테스트 러너는 각 테스트 케이스가 시작될 때 테스트 이메일 발신 함의 내용을 지 웁니다.</target>
        </trans-unit>
        <trans-unit id="af63582f03bb6e4c9e15c7b92a57d1ba5b4b0680" translate="yes" xml:space="preserve">
          <source>If you use caching middleware, it&amp;rsquo;s important to put each half in the right place within the &lt;a href=&quot;../ref/settings#std:setting-MIDDLEWARE&quot;&gt;&lt;code&gt;MIDDLEWARE&lt;/code&gt;&lt;/a&gt; setting. That&amp;rsquo;s because the cache middleware needs to know which headers by which to vary the cache storage. Middleware always adds something to the &lt;code&gt;Vary&lt;/code&gt; response header when it can.</source>
          <target state="translated">캐싱 미들웨어를 사용하는 경우 &lt;a href=&quot;../ref/settings#std:setting-MIDDLEWARE&quot;&gt; &lt;code&gt;MIDDLEWARE&lt;/code&gt; &lt;/a&gt; 설정 내에서 올바른 위치에 각 반을 배치하는 것이 중요 합니다. 캐시 미들웨어가 캐시 스토리지를 다양화할 헤더를 알아야하기 때문입니다. 미들웨어는 가능한 경우 항상 &lt;code&gt;Vary&lt;/code&gt; 응답 헤더에 무언가를 추가합니다 .</target>
        </trans-unit>
        <trans-unit id="eb3ba9d9638be9dba67498258cd53f1f8d8c441d" translate="yes" xml:space="preserve">
          <source>If you use cookie-based sessions, pay extra care that your secret key is always kept completely secret, for any system which might be remotely accessible.</source>
          <target state="translated">쿠키 기반 세션을 사용하는 경우 원격으로 액세스 할 수있는 모든 시스템에 대해 비밀 키가 항상 완전히 비밀로 유지되도록 특별히주의하십시오.</target>
        </trans-unit>
        <trans-unit id="ac9946ee9d075e84bfbeea0cd48def7c04248d87" translate="yes" xml:space="preserve">
          <source>If you use custom &lt;code&gt;Manager&lt;/code&gt; objects, take note that the first &lt;code&gt;Manager&lt;/code&gt; Django encounters (in the order in which they&amp;rsquo;re defined in the model) has a special status. Django interprets the first &lt;code&gt;Manager&lt;/code&gt; defined in a class as the &amp;ldquo;default&amp;rdquo; &lt;code&gt;Manager&lt;/code&gt;, and several parts of Django (including &lt;a href=&quot;../../ref/django-admin#django-admin-dumpdata&quot;&gt;&lt;code&gt;dumpdata&lt;/code&gt;&lt;/a&gt;) will use that &lt;code&gt;Manager&lt;/code&gt; exclusively for that model. As a result, it&amp;rsquo;s a good idea to be careful in your choice of default manager in order to avoid a situation where overriding &lt;code&gt;get_queryset()&lt;/code&gt; results in an inability to retrieve objects you&amp;rsquo;d like to work with.</source>
          <target state="translated">사용자 정의 &lt;code&gt;Manager&lt;/code&gt; 객체 를 사용 하는 경우 첫 번째 &lt;code&gt;Manager&lt;/code&gt; Django가 발생하면 (모델에 정의 된 순서대로) 특별한 상태가됩니다. Django 는 클래스에 정의 된 첫 번째 &lt;code&gt;Manager&lt;/code&gt; 를 &quot;기본&quot; &lt;code&gt;Manager&lt;/code&gt; 로 해석하고 Django의 여러 부분 ( &lt;a href=&quot;../../ref/django-admin#django-admin-dumpdata&quot;&gt; &lt;code&gt;dumpdata&lt;/code&gt; &lt;/a&gt; 포함 )은 해당 모델에 대해서만 해당 &lt;code&gt;Manager&lt;/code&gt; 를 사용합니다 . 결과적으로 &lt;code&gt;get_queryset()&lt;/code&gt; 재정의 하면 작업하려는 객체를 검색 할 수 없게 되는 상황을 피하기 위해 기본 관리자를 신중하게 선택하는 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="3354dc763efee5cbb2a050e1c410a3261d6d6efb" translate="yes" xml:space="preserve">
          <source>If you use database caching with multiple databases, you&amp;rsquo;ll also need to set up routing instructions for your database cache table. For the purposes of routing, the database cache table appears as a model named &lt;code&gt;CacheEntry&lt;/code&gt;, in an application named &lt;code&gt;django_cache&lt;/code&gt;. This model won&amp;rsquo;t appear in the models cache, but the model details can be used for routing purposes.</source>
          <target state="translated">여러 데이터베이스와 함께 데이터베이스 캐싱을 사용하는 경우 데이터베이스 캐시 테이블에 대한 라우팅 지침도 설정해야합니다. 라우팅을 위해 데이터베이스 캐시 테이블 은 &lt;code&gt;django_cache&lt;/code&gt; 라는 애플리케이션에서 &lt;code&gt;CacheEntry&lt;/code&gt; 라는 모델로 나타납니다 . 이 모델은 모델 캐시에 나타나지 않지만 라우팅을 위해 모델 세부 정보를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="17cfa5ced8dcbb7e597664d335ed9ae258277518" translate="yes" xml:space="preserve">
          <source>If you use more than one &lt;code&gt;JavaScriptCatalog&lt;/code&gt; view on a site and some of them define the same strings, the strings in the catalog that was loaded last take precedence.</source>
          <target state="translated">사이트에서 둘 이상의 &lt;code&gt;JavaScriptCatalog&lt;/code&gt; 보기 를 사용 하고 일부가 동일한 문자열을 정의하면 카탈로그에서 마지막으로로드 된 문자열이 우선합니다.</target>
        </trans-unit>
        <trans-unit id="e46850bb8ec958f8fdf1580dc6739aff53945b19" translate="yes" xml:space="preserve">
          <source>If you use the &lt;code&gt;cached_db&lt;/code&gt; session backend, you also need to follow the configuration instructions for the &lt;a href=&quot;#using-database-backed-sessions&quot;&gt;using database-backed sessions&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;cached_db&lt;/code&gt; 세션 백엔드 를 사용하는 경우 &lt;a href=&quot;#using-database-backed-sessions&quot;&gt;데이터베이스 기반 세션 사용에&lt;/a&gt; 대한 구성 지시 사항도 따라야 합니다 .</target>
        </trans-unit>
        <trans-unit id="6cf187a7f4b8a72e3eca21b8c45ef8b3ee2725a2" translate="yes" xml:space="preserve">
          <source>If you use the Bash shell, consider installing the Django bash completion script, which lives in &lt;code&gt;extras/django_bash_completion&lt;/code&gt; in the Django source distribution. It enables tab-completion of &lt;code&gt;django-admin&lt;/code&gt; and &lt;code&gt;manage.py&lt;/code&gt; commands, so you can, for instance&amp;hellip;</source>
          <target state="translated">Bash 쉘을 사용하는 경우 Django 소스 배포 에서 &lt;code&gt;extras/django_bash_completion&lt;/code&gt; 에있는 Django bash 완료 스크립트 설치를 고려하십시오 . &lt;code&gt;django-admin&lt;/code&gt; 및 &lt;code&gt;manage.py&lt;/code&gt; 명령 의 탭 완성을 가능하게 하여 예를 들어&amp;hellip;</target>
        </trans-unit>
        <trans-unit id="544a332c4cb22ae2768b4c0f6f7c943861e6344b" translate="yes" xml:space="preserve">
          <source>If you use the MyISAM storage engine please be aware of the fact that you will receive database-generated errors if you try to use the &lt;a href=&quot;../topics/db/transactions#topics-db-transactions-savepoints&quot;&gt;savepoint-related methods of the transactions API&lt;/a&gt;. The reason for this is that detecting the storage engine of a MySQL database/table is an expensive operation so it was decided it isn&amp;rsquo;t worth to dynamically convert these methods in no-op&amp;rsquo;s based in the results of such detection.</source>
          <target state="translated">MyISAM 스토리지 엔진을 사용하는 &lt;a href=&quot;../topics/db/transactions#topics-db-transactions-savepoints&quot;&gt;경우 트랜잭션 API&lt;/a&gt; 의 저장 점 관련 메소드 를 사용하려고하면 데이터베이스 생성 오류가 발생한다는 사실을 알고 있어야 합니다 . 그 이유는 MySQL 데이터베이스 / 테이블의 스토리지 엔진을 감지하는 작업은 비용이 많이 드는 작업이므로 이러한 검색 결과에 따라 이러한 메소드를 no-op 방식으로 동적으로 변환 할 가치가 없다는 결론을 내 렸습니다.</target>
        </trans-unit>
        <trans-unit id="612e62c7aaac6d3ed93e17cc5eb89853c3216591" translate="yes" xml:space="preserve">
          <source>If you use the default authentication backend, then your model must have a single unique field that can be used for identification purposes. This can be a username, an email address, or any other unique attribute. A non-unique username field is allowed if you use a custom authentication backend that can support it.</source>
          <target state="translated">기본 인증 백엔드를 사용하는 경우 모델에는 식별 목적으로 사용할 수있는 고유 한 단일 필드가 있어야합니다. 사용자 이름, 이메일 주소 또는 기타 고유 한 속성 일 수 있습니다. 이를 지원할 수있는 사용자 정의 인증 백엔드를 사용하는 경우 고유하지 않은 사용자 이름 필드가 허용됩니다.</target>
        </trans-unit>
        <trans-unit id="632cae7f626396f49915f6528bfd124915502643" translate="yes" xml:space="preserve">
          <source>If you use this directly in a subclass, &lt;code&gt;objects&lt;/code&gt; will be the default manager if you declare no managers in the base class:</source>
          <target state="translated">이것을 서브 클래스에서 직접 사용하는 경우 기본 클래스에 관리자를 선언하지 않으면 &lt;code&gt;objects&lt;/code&gt; 가 기본 관리자가됩니다.</target>
        </trans-unit>
        <trans-unit id="0be2ddd3771f7e5301d04d44291e1551fbddd667" translate="yes" xml:space="preserve">
          <source>If you use this example, be sure to change the &lt;code&gt;'filename'&lt;/code&gt; path to a location that&amp;rsquo;s writable by the user that&amp;rsquo;s running the Django application.</source>
          <target state="translated">이 예제를 사용하는 경우, &lt;code&gt;'filename'&lt;/code&gt; 경로를 Django 애플리케이션을 실행중인 사용자가 쓸 수있는 위치 로 변경하십시오 .</target>
        </trans-unit>
        <trans-unit id="5390e72ce357a7eabd5449a3955b90282d9e0e6d" translate="yes" xml:space="preserve">
          <source>If you want &lt;em&gt;no&lt;/em&gt; bulk actions available for a given &lt;a href=&quot;index#django.contrib.admin.ModelAdmin&quot;&gt;&lt;code&gt;ModelAdmin&lt;/code&gt;&lt;/a&gt;, set &lt;a href=&quot;index#django.contrib.admin.ModelAdmin.actions&quot;&gt;&lt;code&gt;ModelAdmin.actions&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;None&lt;/code&gt;:</source>
          <target state="translated">지정된 &lt;a href=&quot;index#django.contrib.admin.ModelAdmin&quot;&gt; &lt;code&gt;ModelAdmin&lt;/code&gt; 에&lt;/a&gt; 대해 대량 작업을 사용 &lt;em&gt;하지&lt;/em&gt; 않으려면 &lt;a href=&quot;index#django.contrib.admin.ModelAdmin.actions&quot;&gt; &lt;code&gt;ModelAdmin.actions&lt;/code&gt; &lt;/a&gt; 를 &lt;code&gt;None&lt;/code&gt; 으로 설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="3aec3757f7c2abfc3d404eaea0295a8443022fe5" translate="yes" xml:space="preserve">
          <source>If you want a form for the &lt;code&gt;Author&lt;/code&gt; model that includes only the &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;title&lt;/code&gt; fields, you would specify &lt;code&gt;fields&lt;/code&gt; or &lt;code&gt;exclude&lt;/code&gt; like this:</source>
          <target state="translated">당신이를위한 양식을 원하는 경우 &lt;code&gt;Author&lt;/code&gt; 만 포함 모델 &lt;code&gt;name&lt;/code&gt; 및 &lt;code&gt;title&lt;/code&gt; 필드를 지정할 것 &lt;code&gt;fields&lt;/code&gt; 또는 &lt;code&gt;exclude&lt;/code&gt; 다음과 같이 :</target>
        </trans-unit>
        <trans-unit id="dac386a15e0c8bb88ff7bb297d68523406916892" translate="yes" xml:space="preserve">
          <source>If you want context data to take priority over context processors, use the following pattern:</source>
          <target state="translated">컨텍스트 데이터가 컨텍스트 프로세서보다 우선하려면 다음 패턴을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="7e20d9f91dd7be41dd2b75340fb5ad46d7aff9dd" translate="yes" xml:space="preserve">
          <source>If you want customized deletion behavior, you can override the &lt;code&gt;delete()&lt;/code&gt; method. See &lt;a href=&quot;../../topics/db/models#overriding-model-methods&quot;&gt;Overriding predefined model methods&lt;/a&gt; for more details.</source>
          <target state="translated">사용자 정의 된 삭제 동작을 원하는 경우 &lt;code&gt;delete()&lt;/code&gt; 메소드를 대체 할 수 있습니다 . 자세한 내용은 &lt;a href=&quot;../../topics/db/models#overriding-model-methods&quot;&gt;사전 정의 된 모델 메소드 대체&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="93acdd6e4c8eae4615be0fc45ec00696af259471" translate="yes" xml:space="preserve">
          <source>If you want customized saving behavior, you can override this &lt;code&gt;save()&lt;/code&gt; method. See &lt;a href=&quot;../../topics/db/models#overriding-model-methods&quot;&gt;Overriding predefined model methods&lt;/a&gt; for more details.</source>
          <target state="translated">사용자 정의 저장 동작을 원하는 경우이 &lt;code&gt;save()&lt;/code&gt; 메소드를 대체 할 수 있습니다 . 자세한 내용은 &lt;a href=&quot;../../topics/db/models#overriding-model-methods&quot;&gt;사전 정의 된 모델 메소드 대체&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="be8f02ec9aac915643a3af8cb57319e744527c0c" translate="yes" xml:space="preserve">
          <source>If you want more control over your URLs, you can reference a specific view in your URLconf:</source>
          <target state="translated">URL을보다 강력하게 제어하려면 URLconf에서 특정보기를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="f457998a8d8d75ab48817a88d807beddf2f50846" translate="yes" xml:space="preserve">
          <source>If you want the protection that HTTPS provides, and have enabled it on your server, there are some additional steps you may need:</source>
          <target state="translated">HTTPS가 제공하는 보호를 원하고 서버에서 활성화 한 경우 몇 가지 추가 단계가 필요할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a14d621828e626147519d733f8c184b1c0c37ab4" translate="yes" xml:space="preserve">
          <source>If you want to add a check to a model class, the approach is &lt;em&gt;almost&lt;/em&gt; the same: the only difference is that the check is a classmethod, not an instance method:</source>
          <target state="translated">모델 클래스에 검사를 추가하려는 경우 접근 방식은 &lt;em&gt;거의&lt;/em&gt; 동일합니다. 유일한 차이점은 검사가 인스턴스 메소드가 아니라 클래스 메소드라는 것입니다.</target>
        </trans-unit>
        <trans-unit id="56b33aa10e58145097aa338a7bdcf35a9f1eab1d" translate="yes" xml:space="preserve">
          <source>If you want to allow Unicode characters, pass &lt;code&gt;allow_unicode=True&lt;/code&gt;. For example:</source>
          <target state="translated">유니 코드 문자를 허용 &lt;code&gt;allow_unicode=True&lt;/code&gt; 전달하십시오 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="89e6786d70f17235ea0a07bab1827e495e61aad1" translate="yes" xml:space="preserve">
          <source>If you want to allow editing and creating an &lt;code&gt;Image&lt;/code&gt; instance on the &lt;code&gt;Product&lt;/code&gt;, add/change views you can use &lt;a href=&quot;../contenttypes#django.contrib.contenttypes.admin.GenericTabularInline&quot;&gt;&lt;code&gt;GenericTabularInline&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../contenttypes#django.contrib.contenttypes.admin.GenericStackedInline&quot;&gt;&lt;code&gt;GenericStackedInline&lt;/code&gt;&lt;/a&gt; (both subclasses of &lt;a href=&quot;../contenttypes#django.contrib.contenttypes.admin.GenericInlineModelAdmin&quot;&gt;&lt;code&gt;GenericInlineModelAdmin&lt;/code&gt;&lt;/a&gt;) provided by &lt;a href=&quot;../contenttypes#module-django.contrib.contenttypes.admin&quot;&gt;&lt;code&gt;admin&lt;/code&gt;&lt;/a&gt;. They implement tabular and stacked visual layouts for the forms representing the inline objects, respectively, just like their non-generic counterparts. They behave just like any other inline. In your &lt;code&gt;admin.py&lt;/code&gt; for this example app:</source>
          <target state="translated">&lt;code&gt;Product&lt;/code&gt; 에서 &lt;code&gt;Image&lt;/code&gt; 인스턴스 편집 및 작성을 허용 하려면보기를 추가 / 변경 하여 &lt;a href=&quot;../contenttypes#module-django.contrib.contenttypes.admin&quot;&gt; &lt;code&gt;admin&lt;/code&gt; 이&lt;/a&gt; 제공하는 &lt;a href=&quot;../contenttypes#django.contrib.contenttypes.admin.GenericTabularInline&quot;&gt; &lt;code&gt;GenericTabularInline&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;../contenttypes#django.contrib.contenttypes.admin.GenericStackedInline&quot;&gt; &lt;code&gt;GenericStackedInline&lt;/code&gt; &lt;/a&gt; ( &lt;a href=&quot;../contenttypes#django.contrib.contenttypes.admin.GenericInlineModelAdmin&quot;&gt; &lt;code&gt;GenericInlineModelAdmin&lt;/code&gt; 의&lt;/a&gt; 서브 클래스)을 사용할 수 있습니다 . 그것들은 제네릭이 아닌 다른 것들과 마찬가지로 각각 인라인 객체를 나타내는 폼에 대해 테이블 ​​형식 및 스택 형 시각적 레이아웃을 구현합니다. 그들은 다른 인라인과 똑같이 동작합니다. 이 예제 앱 의 &lt;code&gt;admin.py&lt;/code&gt; 에서 :</target>
        </trans-unit>
        <trans-unit id="dc86f9ac38476957adf53db6078bb6b2f39a0899" translate="yes" xml:space="preserve">
          <source>If you want to associate additional assets with a form &amp;ndash; for example, CSS for form layout &amp;ndash; add a &lt;code&gt;Media&lt;/code&gt; declaration to the form:</source>
          <target state="translated">추가 자산을 양식에 연결하려면 (예 : 양식 레이아웃 용 CSS) 양식에 &lt;code&gt;Media&lt;/code&gt; 선언을 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="ca5663445451e733c438680c0b1cdbdb78de064c" translate="yes" xml:space="preserve">
          <source>If you want to automatically load initial data for an app, create a &lt;a href=&quot;../topics/migrations#data-migrations&quot;&gt;data migration&lt;/a&gt;. Migrations are run when setting up the test database, so the data will be available there, subject to &lt;a href=&quot;../topics/testing/overview#test-case-serialized-rollback&quot;&gt;some limitations&lt;/a&gt;.</source>
          <target state="translated">앱의 초기 데이터를 자동으로로드하려면 &lt;a href=&quot;../topics/migrations#data-migrations&quot;&gt;데이터 마이그레이션을&lt;/a&gt; 만듭니다 . 테스트 데이터베이스를 설정할 때 마이그레이션이 실행되므로 &lt;a href=&quot;../topics/testing/overview#test-case-serialized-rollback&quot;&gt;일부 제한 사항에&lt;/a&gt; 따라 데이터를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="7f619ca80296d2ab8fb9d0ccf4cddacae4955198" translate="yes" xml:space="preserve">
          <source>If you want to be really adventurous, you could even mix a &lt;a href=&quot;../../ref/class-based-views/generic-display#django.views.generic.detail.DetailView&quot;&gt;&lt;code&gt;DetailView&lt;/code&gt;&lt;/a&gt; subclass that is able to return &lt;em&gt;both&lt;/em&gt; HTML and JSON content, depending on some property of the HTTP request, such as a query argument or a HTTP header. Mix in both the &lt;code&gt;JSONResponseMixin&lt;/code&gt; and a &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectTemplateResponseMixin&quot;&gt;&lt;code&gt;SingleObjectTemplateResponseMixin&lt;/code&gt;&lt;/a&gt;, and override the implementation of &lt;a href=&quot;../../ref/class-based-views/mixins-simple#django.views.generic.base.TemplateResponseMixin.render_to_response&quot;&gt;&lt;code&gt;render_to_response()&lt;/code&gt;&lt;/a&gt; to defer to the appropriate rendering method depending on the type of response that the user requested:</source>
          <target state="translated">실제로 모험을 원한다면 쿼리 인수 또는 HTTP 헤더와 같은 HTTP 요청의 일부 속성에 따라 HTML 및 JSON 콘텐츠를 &lt;em&gt;모두&lt;/em&gt; 반환 할 수 있는 &lt;a href=&quot;../../ref/class-based-views/generic-display#django.views.generic.detail.DetailView&quot;&gt; &lt;code&gt;DetailView&lt;/code&gt; &lt;/a&gt; 하위 클래스를 혼합 할 수도 있습니다. 양자의 혼합 &lt;code&gt;JSONResponseMixin&lt;/code&gt; 및 &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectTemplateResponseMixin&quot;&gt; &lt;code&gt;SingleObjectTemplateResponseMixin&lt;/code&gt; &lt;/a&gt; 의 구현 및 재정의 &lt;a href=&quot;../../ref/class-based-views/mixins-simple#django.views.generic.base.TemplateResponseMixin.render_to_response&quot;&gt; &lt;code&gt;render_to_response()&lt;/code&gt; &lt;/a&gt; 는 사용자가 요청한 응답의 종류에 따라 적절한 렌더링 방식을 따름에 :&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="b286b7423a58f0cdbf8dc79961083cfa7e97f673" translate="yes" xml:space="preserve">
          <source>If you want to call the group something else, you can set &lt;code&gt;pk_url_kwarg&lt;/code&gt; on the view. More details can be found in the reference for &lt;a href=&quot;../../ref/class-based-views/generic-display#django.views.generic.detail.DetailView&quot;&gt;&lt;code&gt;DetailView&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">그룹에 다른 것을 호출 하려면 뷰에서 &lt;code&gt;pk_url_kwarg&lt;/code&gt; 를 설정할 수 있습니다. 자세한 내용은 &lt;a href=&quot;../../ref/class-based-views/generic-display#django.views.generic.detail.DetailView&quot;&gt; &lt;code&gt;DetailView&lt;/code&gt; &lt;/a&gt; 에 대한 참조에서 찾을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="73609264d7cce96ce235888ee071c9ba08110d63" translate="yes" xml:space="preserve">
          <source>If you want to change an unmanaged model (&lt;a href=&quot;../ref/models/options#django.db.models.Options.managed&quot;&gt;&lt;code&gt;managed=False&lt;/code&gt;&lt;/a&gt;) to managed, you must remove &lt;code&gt;managed=False&lt;/code&gt; and generate a migration before making other schema-related changes to the model, since schema changes that appear in the migration that contains the operation to change &lt;code&gt;Meta.managed&lt;/code&gt; may not be applied.</source>
          <target state="translated">관리되지 않는 모델 ( &lt;a href=&quot;../ref/models/options#django.db.models.Options.managed&quot;&gt; &lt;code&gt;managed=False&lt;/code&gt; &lt;/a&gt; )을 관리되는 것으로 변경하려는 경우, 조작을 포함하는 마이그레이션에 스키마 변경 사항이 표시되므로 모델에 대한 다른 스키마 관련 변경 사항을 작성하기 전에 &lt;code&gt;managed=False&lt;/code&gt; 를 제거 하고 마이그레이션을 생성 해야합니다. 변경 &lt;code&gt;Meta.managed&lt;/code&gt; 가 적용되지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5a36c203fa50ee87df5fef8091b5a765a085602e" translate="yes" xml:space="preserve">
          <source>If you want to change the URL of the polls detail view to something else, perhaps to something like &lt;code&gt;polls/specifics/12/&lt;/code&gt; instead of doing it in the template (or templates) you would change it in &lt;code&gt;polls/urls.py&lt;/code&gt;:</source>
          <target state="translated">설문 조사 세부 사항보기의 URL을 템플리트 (또는 템플리트)에서 수행하는 대신 &lt;code&gt;polls/specifics/12/&lt;/code&gt; 와 같은 다른 것으로 변경하려면 &lt;code&gt;polls/urls.py&lt;/code&gt; 에서 변경하십시오 .</target>
        </trans-unit>
        <trans-unit id="cd1a5725d6fa059579a40d41f2adb758f0ec7936" translate="yes" xml:space="preserve">
          <source>If you want to change the server&amp;rsquo;s IP, pass it along with the port. For example, to listen on all available public IPs (which is useful if you are running Vagrant or want to show off your work on other computers on the network), use:</source>
          <target state="translated">서버의 IP를 변경하려면 포트와 함께 IP를 전달하십시오. 예를 들어, 사용 가능한 모든 공용 IP를 청취하려면 (Vagrant를 실행 중이거나 네트워크의 다른 컴퓨터에서 작업을 과시하려는 경우에 유용합니다) 다음을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="7ac7bf138057c02102b254cb4eb4bc5c8cedeaa4" translate="yes" xml:space="preserve">
          <source>If you want to change the server&amp;rsquo;s port, pass it as a command-line argument. For instance, this command starts the server on port 8080:</source>
          <target state="translated">서버 포트를 변경하려면 명령 줄 인수로 전달하십시오. 예를 들어이 명령은 포트 8080에서 서버를 시작합니다.</target>
        </trans-unit>
        <trans-unit id="5a92e0eac7cf91c4cf108e75a7e4cb1c79be68f3" translate="yes" xml:space="preserve">
          <source>If you want to clear a bunch of keys at once, &lt;code&gt;delete_many()&lt;/code&gt; can take a list of keys to be cleared:</source>
          <target state="translated">한 번에 여러 키를 지우려면 &lt;code&gt;delete_many()&lt;/code&gt; 가 지울 키 목록을 가져올 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1a4bfa95187de8542d04a8bb8ab8cdef55f56bbf" translate="yes" xml:space="preserve">
          <source>If you want to clear the set of deferred fields, pass &lt;code&gt;None&lt;/code&gt; as a parameter to &lt;code&gt;defer()&lt;/code&gt;:</source>
          <target state="translated">지연된 필드 세트를 지우려면 매개 변수로 &lt;code&gt;None&lt;/code&gt; 을 전달 하여 &lt;code&gt;defer()&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="b6383cfa56650e6cabffa9d626bc1f48a0ac3ae1" translate="yes" xml:space="preserve">
          <source>If you want to combine the parts in different ways, or apply other processing to the final key (e.g., taking a hash digest of the key parts), you can provide a custom key function.</source>
          <target state="translated">파트를 다른 방식으로 결합하거나 다른 처리를 최종 키에 적용하려면 (예 : 키 파트의 해시 다이제스트 수행) 사용자 정의 키 기능을 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b365d93078a708fa2af27d965ccfe68bed9e884a" translate="yes" xml:space="preserve">
          <source>If you want to create &lt;a href=&quot;#proxy-models-permissions-topic&quot;&gt;permissions for a proxy model&lt;/a&gt;, pass &lt;code&gt;for_concrete_model=False&lt;/code&gt; to &lt;a href=&quot;../../ref/contrib/contenttypes#django.contrib.contenttypes.models.ContentTypeManager.get_for_model&quot;&gt;&lt;code&gt;ContentTypeManager.get_for_model()&lt;/code&gt;&lt;/a&gt; to get the appropriate &lt;code&gt;ContentType&lt;/code&gt;:</source>
          <target state="translated">당신이 만들려면 &lt;a href=&quot;#proxy-models-permissions-topic&quot;&gt;프록시 모델에 대한 사용 권한을&lt;/a&gt; 통과 &lt;code&gt;for_concrete_model=False&lt;/code&gt; 에 &lt;a href=&quot;../../ref/contrib/contenttypes#django.contrib.contenttypes.models.ContentTypeManager.get_for_model&quot;&gt; &lt;code&gt;ContentTypeManager.get_for_model()&lt;/code&gt; &lt;/a&gt; 적절한 얻을 &lt;code&gt;ContentType&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="baafb11630a741f29de95c236634c1933ad61e35" translate="yes" xml:space="preserve">
          <source>If you want to create a formset that allows you to edit books belonging to a particular author, you could do this:</source>
          <target state="translated">특정 저자에 속하는 책을 편집 할 수있는 양식 세트를 작성하려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="d22c7f47483da249cee231a92c3ccfc41e9f41cc" translate="yes" xml:space="preserve">
          <source>If you want to customize the default admin site, you can &lt;a href=&quot;#overriding-default-admin-site&quot;&gt;override it&lt;/a&gt;.</source>
          <target state="translated">기본 관리 사이트를 사용자 정의하려는 경우 &lt;a href=&quot;#overriding-default-admin-site&quot;&gt;이를 무시할&lt;/a&gt; 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c29543c5a12e486f79959dd0c7c612e7d05d854c" translate="yes" xml:space="preserve">
          <source>If you want to disable sorting for some columns, set &lt;code&gt;sortable_by&lt;/code&gt; to a collection (e.g. &lt;code&gt;list&lt;/code&gt;, &lt;code&gt;tuple&lt;/code&gt;, or &lt;code&gt;set&lt;/code&gt;) of the subset of &lt;a href=&quot;#django.contrib.admin.ModelAdmin.list_display&quot;&gt;&lt;code&gt;list_display&lt;/code&gt;&lt;/a&gt; that you want to be sortable. An empty collection disables sorting for all columns.</source>
          <target state="translated">일부 열에 대해 정렬을 사용하지 않으려면 &lt;code&gt;sortable_by&lt;/code&gt; 를 정렬 할 &lt;a href=&quot;#django.contrib.admin.ModelAdmin.list_display&quot;&gt; &lt;code&gt;list_display&lt;/code&gt; &lt;/a&gt; 서브 세트의 콜렉션 (예 : &lt;code&gt;list&lt;/code&gt; , &lt;code&gt;tuple&lt;/code&gt; 또는 &lt;code&gt;set&lt;/code&gt; )으로 설정 하십시오 . 빈 컬렉션은 모든 열에 대한 정렬을 비활성화합니다.</target>
        </trans-unit>
        <trans-unit id="819a05f247100e1405566f18b1980253c4ad662e" translate="yes" xml:space="preserve">
          <source>If you want to display many-to-many relations using an inline, you can do so by defining an &lt;code&gt;InlineModelAdmin&lt;/code&gt; object for the relationship:</source>
          <target state="translated">인라인을 사용하여 다 대다 관계를 표시 하려면 관계에 대한 &lt;code&gt;InlineModelAdmin&lt;/code&gt; 객체를 정의하면 됩니다 .</target>
        </trans-unit>
        <trans-unit id="4f2c2b260acd4e58d5f685e485d85b0eafeeb6b4" translate="yes" xml:space="preserve">
          <source>If you want to do any special formatting for either the title or description, &lt;a href=&quot;../templates/language&quot;&gt;Django templates&lt;/a&gt; can be used instead. Their paths can be specified with the &lt;code&gt;title_template&lt;/code&gt; and &lt;code&gt;description_template&lt;/code&gt; attributes on the &lt;a href=&quot;#django.contrib.syndication.views.Feed&quot;&gt;&lt;code&gt;Feed&lt;/code&gt;&lt;/a&gt; class. The templates are rendered for each item and are passed two template context variables:</source>
          <target state="translated">제목이나 설명에 특별한 형식을 지정하려면 대신 &lt;a href=&quot;../templates/language&quot;&gt;Django 템플릿을&lt;/a&gt; 사용할 수 있습니다. 경로는 &lt;a href=&quot;#django.contrib.syndication.views.Feed&quot;&gt; &lt;code&gt;Feed&lt;/code&gt; &lt;/a&gt; 클래스 의 &lt;code&gt;title_template&lt;/code&gt; 및 &lt;code&gt;description_template&lt;/code&gt; 속성 으로 지정할 수 있습니다 . 템플릿은 각 항목에 대해 렌더링되며 두 개의 템플릿 컨텍스트 변수가 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="9a2a9d97c3bcdcc33735186ed18274e012b287d6" translate="yes" xml:space="preserve">
          <source>If you want to exclude multiple applications, pass &lt;code&gt;--exclude&lt;/code&gt; more than once:</source>
          <target state="translated">여러 응용 프로그램을 제외하려면 &lt;code&gt;--exclude&lt;/code&gt; 를 두 번 이상 전달하십시오 .</target>
        </trans-unit>
        <trans-unit id="47dc3f16d887ad06159fa3d81469f66328dc09f5" translate="yes" xml:space="preserve">
          <source>If you want to find a URL in a specific admin instance, provide the name of that instance as a &lt;code&gt;current_app&lt;/code&gt; hint to the reverse call. For example, if you specifically wanted the admin view from the admin instance named &lt;code&gt;custom&lt;/code&gt;, you would need to call:</source>
          <target state="translated">특정 관리 인스턴스에서 URL을 찾으려면 해당 인스턴스의 이름을 리버스 호출에 대한 &lt;code&gt;current_app&lt;/code&gt; 힌트로 제공하십시오. 예를 들어, &lt;code&gt;custom&lt;/code&gt; 이라는 관리 인스턴스에서 관리 뷰를 구체적으로 원하면 다음 을 호출해야합니다.</target>
        </trans-unit>
        <trans-unit id="bdd8542fd2cea7b2e24bbfa472ae38020dc7bf81" translate="yes" xml:space="preserve">
          <source>If you want to generate more than one aggregate, you add another argument to the &lt;code&gt;aggregate()&lt;/code&gt; clause. So, if we also wanted to know the maximum and minimum price of all books, we would issue the query:</source>
          <target state="translated">둘 이상의 집계를 생성하려는 경우 다른 인수를 &lt;code&gt;aggregate()&lt;/code&gt; 절에 추가합니다. 따라서 모든 책의 최대 및 최소 가격을 알고 싶다면 다음과 같이 쿼리를 발행하십시오.</target>
        </trans-unit>
        <trans-unit id="e5ea26ccc56d69b0c9654b4277fee5e12990d99b" translate="yes" xml:space="preserve">
          <source>If you want to get a key&amp;rsquo;s value or set a value if the key isn&amp;rsquo;t in the cache, there is the &lt;code&gt;get_or_set()&lt;/code&gt; method. It takes the same parameters as &lt;code&gt;get()&lt;/code&gt; but the default is set as the new cache value for that key, rather than returned:</source>
          <target state="translated">키 값을 가져 오거나 키가 캐시에없는 경우 값을 설정하려면 &lt;code&gt;get_or_set()&lt;/code&gt; 메소드가 있습니다. &lt;code&gt;get()&lt;/code&gt; 과 동일한 매개 변수를 사용 하지만 기본값은 반환되지 않고 해당 키의 새 캐시 값으로 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="e511661d588f548844ad43177d187a8b8e72782e" translate="yes" xml:space="preserve">
          <source>If you want to give the migration(s) a meaningful name instead of a generated one, you can use the &lt;a href=&quot;../ref/django-admin#cmdoption-makemigrations-name&quot;&gt;&lt;code&gt;makemigrations --name&lt;/code&gt;&lt;/a&gt; option:</source>
          <target state="translated">마이그레이션에 생성 된 이름 대신 의미있는 이름을 지정하려면 &lt;a href=&quot;../ref/django-admin#cmdoption-makemigrations-name&quot;&gt; &lt;code&gt;makemigrations --name&lt;/code&gt; &lt;/a&gt; 옵션을 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="bb3d67e91b95e1098c276074de20f2c056d12673" translate="yes" xml:space="preserve">
          <source>If you want to include literal percent signs in the query, you have to double them if you are passing parameters.</source>
          <target state="translated">쿼리에 리터럴 백분율 기호를 포함 시키려면 매개 변수를 전달할 때 기호를 두 배로 늘려야합니다.</target>
        </trans-unit>
        <trans-unit id="9211860caf6395f0b137a8be9dc6cdd28adf359b" translate="yes" xml:space="preserve">
          <source>If you want to inherit from &lt;code&gt;AbstractBase&lt;/code&gt;, but provide a different default manager, you can provide the default manager on the child class:</source>
          <target state="translated">&lt;code&gt;AbstractBase&lt;/code&gt; 로부터 상속 받지만 다른 기본 관리자를 제공하려는 경우 하위 클래스에서 기본 관리자를 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3a2a9c4986e8f5e6654175d1d77008d474dcec7c" translate="yes" xml:space="preserve">
          <source>If you want to instead provide custom key validation logic for one of the built-in backends, you can subclass it, override just the &lt;code&gt;validate_key&lt;/code&gt; method, and follow the instructions for &lt;a href=&quot;#using-a-custom-cache-backend&quot;&gt;using a custom cache backend&lt;/a&gt;. For instance, to do this for the &lt;code&gt;locmem&lt;/code&gt; backend, put this code in a module:</source>
          <target state="translated">기본 제공 백엔드 중 하나에 사용자 정의 키 유효성 검증 로직을 제공하려는 경우이를 서브 클래스 화하고 &lt;code&gt;validate_key&lt;/code&gt; 메소드 만 대체 &lt;a href=&quot;#using-a-custom-cache-backend&quot;&gt;하고 사용자 정의 캐시 백엔드 사용&lt;/a&gt; 지시 사항을 따르십시오 . 예를 들어 &lt;code&gt;locmem&lt;/code&gt; 백엔드 에서이를 수행하려면 이 코드를 모듈에 넣으십시오.</target>
        </trans-unit>
        <trans-unit id="6c92f47c8dd63980980d8036fb8b746fc5307c13" translate="yes" xml:space="preserve">
          <source>If you want to let each individual user specify which language they prefer, then you also need to use the &lt;code&gt;LocaleMiddleware&lt;/code&gt;. &lt;code&gt;LocaleMiddleware&lt;/code&gt; enables language selection based on data from the request. It customizes content for each user.</source>
          <target state="translated">각 개별 사용자가 선호하는 언어를 지정하게하려면 &lt;code&gt;LocaleMiddleware&lt;/code&gt; 도 사용해야합니다 . &lt;code&gt;LocaleMiddleware&lt;/code&gt; 를 사용하면 요청의 데이터를 기반으로 언어를 선택할 수 있습니다. 각 사용자의 컨텐츠를 사용자 정의합니다.</target>
        </trans-unit>
        <trans-unit id="187ea719ed80062b93104d8f62e4ca6ba48d9ded" translate="yes" xml:space="preserve">
          <source>If you want to lock parents models when using &lt;a href=&quot;../../topics/db/models#multi-table-inheritance&quot;&gt;multi-table inheritance&lt;/a&gt;, you must specify parent link fields (by default &lt;code&gt;&amp;lt;parent_model_name&amp;gt;_ptr&lt;/code&gt;) in the &lt;code&gt;of&lt;/code&gt; argument. For example:</source>
          <target state="translated">&lt;a href=&quot;../../topics/db/models#multi-table-inheritance&quot;&gt;다중 테이블 상속을&lt;/a&gt; 사용할 때 상위 모델을 잠 그려면 &lt;code&gt;of&lt;/code&gt; 인수에 상위 링크 필드 (기본적으로 &lt;code&gt;&amp;lt;parent_model_name&amp;gt;_ptr&lt;/code&gt; )를 지정해야합니다 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="1bc0322e1dee230846f920ac1858bed59fef0294" translate="yes" xml:space="preserve">
          <source>If you want to make one widget instance look different from another, you will need to specify additional attributes at the time when the widget object is instantiated and assigned to a form field (and perhaps add some rules to your CSS files).</source>
          <target state="translated">하나의 위젯 인스턴스를 다른 위젯 인스턴스와 다르게 보이게하려면 위젯 오브젝트가 인스턴스화되어 양식 필드에 지정 될 때 (및 CSS 파일에 규칙을 추가 할 때) 추가 속성을 지정해야합니다.</target>
        </trans-unit>
        <trans-unit id="358714f5af82b779858f9cc401582af9b516624f" translate="yes" xml:space="preserve">
          <source>If you want to obtain the cache key used for a cached fragment, you can use &lt;code&gt;make_template_fragment_key&lt;/code&gt;. &lt;code&gt;fragment_name&lt;/code&gt; is the same as second argument to the &lt;code&gt;cache&lt;/code&gt; template tag; &lt;code&gt;vary_on&lt;/code&gt; is a list of all additional arguments passed to the tag. This function can be useful for invalidating or overwriting a cached item, for example:</source>
          <target state="translated">캐시 된 조각에 사용 된 캐시 키를 얻으려면 &lt;code&gt;make_template_fragment_key&lt;/code&gt; 를 사용할 수 있습니다 . &lt;code&gt;fragment_name&lt;/code&gt; 은 &lt;code&gt;cache&lt;/code&gt; 템플릿 태그 의 두 번째 인수와 같습니다 . &lt;code&gt;vary_on&lt;/code&gt; 은 태그에 전달 된 모든 추가 인수의 목록입니다. 이 함수는 다음과 같이 캐시 된 항목을 무효화하거나 덮어 쓰는 데 유용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ba4ffba3fdbb584b8cac1266ddb0e4fc416423c1" translate="yes" xml:space="preserve">
          <source>If you want to override certain options of the cache backend the storage uses, specify a custom entry in the &lt;a href=&quot;../settings#std:setting-CACHES&quot;&gt;&lt;code&gt;CACHES&lt;/code&gt;&lt;/a&gt; setting named &lt;code&gt;'staticfiles'&lt;/code&gt;. It falls back to using the &lt;code&gt;'default'&lt;/code&gt; cache backend.</source>
          <target state="translated">스토리지가 사용하는 캐시 백엔드의 특정 옵션을 대체하려면 &lt;code&gt;'staticfiles'&lt;/code&gt; 라는 &lt;a href=&quot;../settings#std:setting-CACHES&quot;&gt; &lt;code&gt;CACHES&lt;/code&gt; &lt;/a&gt; 설정 에서 사용자 정의 항목을 지정하십시오 . &lt;code&gt;'default'&lt;/code&gt; 캐시 백엔드 를 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="08bf32a6e2fd3850e1313d6ddcddcbe5d0693024" translate="yes" xml:space="preserve">
          <source>If you want to pass additional parameters to &lt;code&gt;xgettext&lt;/code&gt;, you need to create a custom &lt;a href=&quot;../../ref/django-admin#django-admin-makemessages&quot;&gt;&lt;code&gt;makemessages&lt;/code&gt;&lt;/a&gt; command and override its &lt;code&gt;xgettext_options&lt;/code&gt; attribute:</source>
          <target state="translated">추가 매개 변수를 &lt;code&gt;xgettext&lt;/code&gt; 에 전달 하려면 사용자 정의 &lt;a href=&quot;../../ref/django-admin#django-admin-makemessages&quot;&gt; &lt;code&gt;makemessages&lt;/code&gt; &lt;/a&gt; 명령 을 작성하고 해당 &lt;code&gt;xgettext_options&lt;/code&gt; 속성을 대체해야 합니다.</target>
        </trans-unit>
        <trans-unit id="0fcbbd1a64b93e2ce60b3ae36a4546b17d7404e5" translate="yes" xml:space="preserve">
          <source>If you want to preprocess the value just before saving, you can use &lt;a href=&quot;../ref/models/fields#django.db.models.Field.pre_save&quot;&gt;&lt;code&gt;pre_save()&lt;/code&gt;&lt;/a&gt;. For example, Django&amp;rsquo;s &lt;a href=&quot;../ref/models/fields#django.db.models.DateTimeField&quot;&gt;&lt;code&gt;DateTimeField&lt;/code&gt;&lt;/a&gt; uses this method to set the attribute correctly in the case of &lt;a href=&quot;../ref/models/fields#django.db.models.DateField.auto_now&quot;&gt;&lt;code&gt;auto_now&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../ref/models/fields#django.db.models.DateField.auto_now_add&quot;&gt;&lt;code&gt;auto_now_add&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">저장 직전에 값을 사전 처리하려면 &lt;a href=&quot;../ref/models/fields#django.db.models.Field.pre_save&quot;&gt; &lt;code&gt;pre_save()&lt;/code&gt; &lt;/a&gt; 사용할 수 있습니다 . 예를 들어 Django의 &lt;a href=&quot;../ref/models/fields#django.db.models.DateTimeField&quot;&gt; &lt;code&gt;DateTimeField&lt;/code&gt; &lt;/a&gt; 는이 메소드를 사용하여 &lt;a href=&quot;../ref/models/fields#django.db.models.DateField.auto_now&quot;&gt; &lt;code&gt;auto_now&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;../ref/models/fields#django.db.models.DateField.auto_now_add&quot;&gt; &lt;code&gt;auto_now_add&lt;/code&gt; &lt;/a&gt; 의 경우 속성을 올바르게 설정합니다 .</target>
        </trans-unit>
        <trans-unit id="82aeed39d2f4a0fb067ad666d1bfbc02c9469e46" translate="yes" xml:space="preserve">
          <source>If you want to provide some additional classes in addition to the error and required classes that may be required, you can provide those classes as an argument:</source>
          <target state="translated">오류와 필요한 클래스 외에 추가 클래스를 제공하려는 경우 해당 클래스를 인수로 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d347d884e0e4a232836473d57e45545a254b5f95" translate="yes" xml:space="preserve">
          <source>If you want to put the template overrides in an app called &lt;code&gt;myapp&lt;/code&gt; and the templates to override are named &lt;code&gt;blog/list.html&lt;/code&gt; and &lt;code&gt;blog/post.html&lt;/code&gt;, then your directory structure will look like:</source>
          <target state="translated">&lt;code&gt;myapp&lt;/code&gt; 라는 앱에 템플릿 재정의 를 적용하고 재정의 할 템플릿 이름이 &lt;code&gt;blog/list.html&lt;/code&gt; 및 &lt;code&gt;blog/post.html&lt;/code&gt; 인 경우 디렉토리 구조는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="8675cd01d369192cb8585e183346b84ac04d8fa3" translate="yes" xml:space="preserve">
          <source>If you want to render templates with customizations from your &lt;a href=&quot;../settings#std:setting-TEMPLATES&quot;&gt;&lt;code&gt;TEMPLATES&lt;/code&gt;&lt;/a&gt; setting, such as context processors for example, use the &lt;a href=&quot;#django.forms.renderers.TemplatesSetting&quot;&gt;&lt;code&gt;TemplatesSetting&lt;/code&gt;&lt;/a&gt; renderer.</source>
          <target state="translated">예를 들어 컨텍스트 프로세서와 같은 &lt;a href=&quot;../settings#std:setting-TEMPLATES&quot;&gt; &lt;code&gt;TEMPLATES&lt;/code&gt; &lt;/a&gt; 설정 에서 사용자 정의한 템플릿을 렌더링 하려면 &lt;a href=&quot;#django.forms.renderers.TemplatesSetting&quot;&gt; &lt;code&gt;TemplatesSetting&lt;/code&gt; &lt;/a&gt; 렌더러를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="a54cf1350fd260fcc8471b214783924c0962b9d7" translate="yes" xml:space="preserve">
          <source>If you want to render the context only with the variables provided (or even no variables at all), use the &lt;code&gt;only&lt;/code&gt; option. No other variables are available to the included template:</source>
          <target state="translated">제공된 변수로만 컨텍스트를 렌더링하거나 변수를 전혀 사용하지 않으려면 &lt;code&gt;only&lt;/code&gt; 옵션을 사용하십시오 . 포함 된 템플릿에 사용할 수있는 다른 변수는 없습니다.</target>
        </trans-unit>
        <trans-unit id="1299f323e280c4314aecc4bf363b73686a188120" translate="yes" xml:space="preserve">
          <source>If you want to replace the upload handlers completely, you can assign a new list:</source>
          <target state="translated">업로드 핸들러를 완전히 바꾸려면 새 목록을 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3b1eb52947855dd8e6837d854ad3dbc97c8dfac6" translate="yes" xml:space="preserve">
          <source>If you want to represent a model with the format &lt;code&gt;app_label.object_name&lt;/code&gt; or &lt;code&gt;app_label.model_name&lt;/code&gt; you can use &lt;code&gt;model._meta.label&lt;/code&gt; or &lt;code&gt;model._meta.label_lower&lt;/code&gt; respectively.</source>
          <target state="translated">&lt;code&gt;app_label.object_name&lt;/code&gt; 또는 &lt;code&gt;app_label.model_name&lt;/code&gt; 형식으로 모델을 나타내려면 각각 &lt;code&gt;model._meta.label&lt;/code&gt; 또는 &lt;code&gt;model._meta.label_lower&lt;/code&gt; 를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d9363c35de0c24ed2e535f99e48aad5e18fa6e74" translate="yes" xml:space="preserve">
          <source>If you want to restrict the search to a particular template engine, pass the engine&amp;rsquo;s &lt;a href=&quot;../ref/settings#std:setting-TEMPLATES-NAME&quot;&gt;&lt;code&gt;NAME&lt;/code&gt;&lt;/a&gt; in the &lt;code&gt;using&lt;/code&gt; argument.</source>
          <target state="translated">검색을 특정 템플릿 엔진으로 제한 하려면 &lt;code&gt;using&lt;/code&gt; 인수 에서 엔진의 &lt;a href=&quot;../ref/settings#std:setting-TEMPLATES-NAME&quot;&gt; &lt;code&gt;NAME&lt;/code&gt; &lt;/a&gt; 을 전달하십시오 .</target>
        </trans-unit>
        <trans-unit id="1a073b38a0044d193c0986f27e9a3dc2f7954430" translate="yes" xml:space="preserve">
          <source>If you want to return a formset that doesn&amp;rsquo;t include &lt;em&gt;any&lt;/em&gt; pre-existing instances of the model, you can specify an empty QuerySet:</source>
          <target state="translated">당신이 포함되지 않은 해당 formset 반환 할 경우 &lt;em&gt;모든&lt;/em&gt; 모델의 기존 인스턴스를, 당신은 빈 검색어 세트를 지정할 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="ae90359159ce2a046afee5fe8740de7f9eb423ea" translate="yes" xml:space="preserve">
          <source>If you want to revert all migrations applied for an app, use the name &lt;code&gt;zero&lt;/code&gt;:</source>
          <target state="translated">앱에 적용된 모든 마이그레이션을 되돌리려면 이름 &lt;code&gt;zero&lt;/code&gt; 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="458328755ac20bf1935dfcb1e46e0973d7fa75b0" translate="yes" xml:space="preserve">
          <source>If you want to select a language within a template, you can use the &lt;code&gt;language&lt;/code&gt; template tag:</source>
          <target state="translated">템플릿 내에서 언어를 선택하려면 &lt;code&gt;language&lt;/code&gt; 템플릿 태그를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ea255638cee3103be21ce078c6c8eb0e0a82aafb" translate="yes" xml:space="preserve">
          <source>If you want to serve your project in a subdirectory (&lt;code&gt;https://example.com/mysite&lt;/code&gt; in this example), you can add &lt;code&gt;WSGIScriptAlias&lt;/code&gt; to the configuration above:</source>
          <target state="translated">서브 디렉토리 ( 이 예에서는 &lt;code&gt;https://example.com/mysite&lt;/code&gt; ) 에서 프로젝트를 제공하려는 경우 , 위 구성 에 &lt;code&gt;WSGIScriptAlias&lt;/code&gt; 를 추가 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="470d59534ec7120ebb7f43a0559ad898e0a6a691" translate="yes" xml:space="preserve">
          <source>If you want to serve your static files from the same server that&amp;rsquo;s already serving your site, the process may look something like:</source>
          <target state="translated">이미 사이트를 제공하는 동일한 서버에서 정적 파일을 제공하려는 경우 프로세스는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="d1f072200b67438fce5826bd23e1652372b64f96" translate="yes" xml:space="preserve">
          <source>If you want to specify a field&amp;rsquo;s validators, you can do so by defining the field declaratively and setting its &lt;code&gt;validators&lt;/code&gt; parameter:</source>
          <target state="translated">필드의 유효성 검사기를 지정하려면 필드를 선언적으로 정의하고 해당 &lt;code&gt;validators&lt;/code&gt; 매개 변수를 설정하면 됩니다.</target>
        </trans-unit>
        <trans-unit id="2045cb8a545994f5940fdb8bb609edfefe504ffd" translate="yes" xml:space="preserve">
          <source>If you want to submit a form or access a session cookie within a frame or iframe, you may need to modify the &lt;a href=&quot;settings#std:setting-CSRF_COOKIE_SAMESITE&quot;&gt;&lt;code&gt;CSRF_COOKIE_SAMESITE&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;settings#std:setting-SESSION_COOKIE_SAMESITE&quot;&gt;&lt;code&gt;SESSION_COOKIE_SAMESITE&lt;/code&gt;&lt;/a&gt; settings.</source>
          <target state="translated">프레임 또는 iframe 내에서 양식을 제출하거나 세션 쿠키에 액세스하려면 &lt;a href=&quot;settings#std:setting-CSRF_COOKIE_SAMESITE&quot;&gt; &lt;code&gt;CSRF_COOKIE_SAMESITE&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;settings#std:setting-SESSION_COOKIE_SAMESITE&quot;&gt; &lt;code&gt;SESSION_COOKIE_SAMESITE&lt;/code&gt; &lt;/a&gt; 설정 을 수정해야 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f156652923d4a2867402c1c5d313ea25450f71ae" translate="yes" xml:space="preserve">
          <source>If you want to upload multiple files using one form field, set the &lt;code&gt;multiple&lt;/code&gt; HTML attribute of field&amp;rsquo;s widget:</source>
          <target state="translated">하나의 양식 필드를 사용하여 여러 파일을 업로드하려면 필드 위젯 의 &lt;code&gt;multiple&lt;/code&gt; HTML 속성을 설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="45963581a6022c16346e1c2ec6732c8d86176fe6" translate="yes" xml:space="preserve">
          <source>If you want to use &lt;a href=&quot;https://docs.python.org/3/library/pdb.html#module-pdb&quot;&gt;&lt;code&gt;pdb&lt;/code&gt;&lt;/a&gt; while debugging tests, you must disable parallel execution (&lt;code&gt;--parallel=1&lt;/code&gt;). You&amp;rsquo;ll see something like &lt;code&gt;bdb.BdbQuit&lt;/code&gt; if you don&amp;rsquo;t.</source>
          <target state="translated">테스트를 디버깅하는 동안 &lt;a href=&quot;https://docs.python.org/3/library/pdb.html#module-pdb&quot;&gt; &lt;code&gt;pdb&lt;/code&gt; &lt;/a&gt; 를 사용 하려면 병렬 실행을 비활성화해야합니다 ( &lt;code&gt;--parallel=1&lt;/code&gt; ). 그렇지 않으면 &lt;code&gt;bdb.BdbQuit&lt;/code&gt; 과 같은 것을 볼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="09bf01b3a96c96f5b899be6fd6691dca94d0251d" translate="yes" xml:space="preserve">
          <source>If you want to use &lt;code&gt;raise_exception&lt;/code&gt; but also give your users a chance to login first, you can add the &lt;a href=&quot;#django.contrib.auth.decorators.login_required&quot;&gt;&lt;code&gt;login_required()&lt;/code&gt;&lt;/a&gt; decorator:</source>
          <target state="translated">&lt;code&gt;raise_exception&lt;/code&gt; 을 사용하고 싶지만 사용자에게 먼저 로그인 할 수있는 기회를 제공하려면 &lt;a href=&quot;#django.contrib.auth.decorators.login_required&quot;&gt; &lt;code&gt;login_required()&lt;/code&gt; &lt;/a&gt; 데코레이터를 추가 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="5dc0b597e5d02af669c0e6dc95f1cbd74aafb742" translate="yes" xml:space="preserve">
          <source>If you want to use &lt;code&gt;{{ MEDIA_URL }}&lt;/code&gt; in your templates, add &lt;code&gt;'django.template.context_processors.media'&lt;/code&gt; in the &lt;code&gt;'context_processors'&lt;/code&gt; option of &lt;a href=&quot;#std:setting-TEMPLATES&quot;&gt;&lt;code&gt;TEMPLATES&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">템플리트에서 &lt;code&gt;{{ MEDIA_URL }}&lt;/code&gt; 을 사용하려면 &lt;a href=&quot;#std:setting-TEMPLATES&quot;&gt; &lt;code&gt;TEMPLATES&lt;/code&gt; &lt;/a&gt; 의 &lt;code&gt;'context_processors'&lt;/code&gt; 옵션에 &lt;code&gt;'django.template.context_processors.media'&lt;/code&gt; 를 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="0c3dd032579f4df0a564516ab9f6887bed67602d" translate="yes" xml:space="preserve">
          <source>If you want to use Django on a production site, use &lt;a href=&quot;https://httpd.apache.org/&quot;&gt;Apache&lt;/a&gt; with &lt;a href=&quot;https://modwsgi.readthedocs.io/en/develop/&quot;&gt;mod_wsgi&lt;/a&gt;. mod_wsgi operates in one of two modes: embedded mode or daemon mode. In embedded mode, mod_wsgi is similar to mod_perl &amp;ndash; it embeds Python within Apache and loads Python code into memory when the server starts. Code stays in memory throughout the life of an Apache process, which leads to significant performance gains over other server arrangements. In daemon mode, mod_wsgi spawns an independent daemon process that handles requests. The daemon process can run as a different user than the Web server, possibly leading to improved security. The daemon process can be restarted without restarting the entire Apache Web server, possibly making refreshing your codebase more seamless. Consult the mod_wsgi documentation to determine which mode is right for your setup. Make sure you have Apache installed with the mod_wsgi module activated. Django will work with any version of Apache that supports mod_wsgi.</source>
          <target state="translated">프로덕션 사이트에서 Django를 사용하려면 &lt;a href=&quot;https://modwsgi.readthedocs.io/en/develop/&quot;&gt;mod_wsgi&lt;/a&gt; 와 함께 &lt;a href=&quot;https://httpd.apache.org/&quot;&gt;Apache&lt;/a&gt; 를 사용하십시오.. mod_wsgi는 내장 모드 또는 데몬 모드의 두 가지 모드 중 하나로 작동합니다. 임베디드 모드에서 mod_wsgi는 mod_perl과 유사합니다. &amp;ndash; Apache를 Python에 포함시키고 서버가 시작될 때 Python 코드를 메모리에로드합니다. 코드는 Apache 프로세스 수명 동안 메모리에 유지되므로 다른 서버 배열보다 성능이 크게 향상됩니다. 데몬 모드에서 mod_wsgi는 요청을 처리하는 독립적 인 데몬 프로세스를 생성합니다. 데몬 프로세스는 웹 서버와 다른 사용자로 실행될 수 있으므로 보안이 향상 될 수 있습니다. 전체 Apache 웹 서버를 다시 시작하지 않고도 데몬 프로세스를 다시 시작할 수 있으므로 코드베이스를보다 원활하게 새로 고칠 수 있습니다. 설치에 적합한 모드를 확인하려면 mod_wsgi 설명서를 참조하십시오. mod_wsgi 모듈이 활성화 된 상태에서 Apache가 설치되어 있는지 확인하십시오.Django는 mod_wsgi를 지원하는 모든 버전의 Apache에서 작동합니다.</target>
        </trans-unit>
        <trans-unit id="7c92963f8c898d1ccffd90cfaac208f60b5e5b47" translate="yes" xml:space="preserve">
          <source>If you want to use a custom &lt;a href=&quot;../forms/modelforms#django.forms.ModelForm&quot;&gt;&lt;code&gt;ModelForm&lt;/code&gt;&lt;/a&gt; (for instance to add extra validation), set &lt;a href=&quot;../../ref/class-based-views/mixins-editing#django.views.generic.edit.FormMixin.form_class&quot;&gt;&lt;code&gt;form_class&lt;/code&gt;&lt;/a&gt; on your view.</source>
          <target state="translated">사용자 지정 &lt;a href=&quot;../forms/modelforms#django.forms.ModelForm&quot;&gt; &lt;code&gt;ModelForm&lt;/code&gt; &lt;/a&gt; 을 사용하려면 (예 : 추가 유효성 검사 추가) 보기에서 &lt;a href=&quot;../../ref/class-based-views/mixins-editing#django.views.generic.edit.FormMixin.form_class&quot;&gt; &lt;code&gt;form_class&lt;/code&gt; &lt;/a&gt; 를 설정 하십시오.</target>
        </trans-unit>
        <trans-unit id="316d41ea216f94382282cfe3b25a5c07e352a193" translate="yes" xml:space="preserve">
          <source>If you want to use a custom widget with a relation field (i.e. &lt;a href=&quot;../../models/fields#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;ForeignKey&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../../models/fields#django.db.models.ManyToManyField&quot;&gt;&lt;code&gt;ManyToManyField&lt;/code&gt;&lt;/a&gt;), make sure you haven&amp;rsquo;t included that field&amp;rsquo;s name in &lt;code&gt;raw_id_fields&lt;/code&gt;, &lt;code&gt;radio_fields&lt;/code&gt;, or &lt;code&gt;autocomplete_fields&lt;/code&gt;.</source>
          <target state="translated">관계 필드 (예 : &lt;a href=&quot;../../models/fields#django.db.models.ForeignKey&quot;&gt; &lt;code&gt;ForeignKey&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;../../models/fields#django.db.models.ManyToManyField&quot;&gt; &lt;code&gt;ManyToManyField&lt;/code&gt; &lt;/a&gt; ) 와 함께 사용자 정의 위젯을 사용하려면 &lt;code&gt;raw_id_fields&lt;/code&gt; , &lt;code&gt;radio_fields&lt;/code&gt; 또는 &lt;code&gt;autocomplete_fields&lt;/code&gt; 에 해당 필드 이름을 포함시키지 않았는지 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="72ff3767011b9eb84f053fc485cd959d42700e5b" translate="yes" xml:space="preserve">
          <source>If you want to use a database-backed session, you need to add &lt;code&gt;'django.contrib.sessions'&lt;/code&gt; to your &lt;a href=&quot;../../ref/settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">데이터베이스 기반 세션을 사용하려면 &lt;a href=&quot;../../ref/settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt; 설정에 &lt;code&gt;'django.contrib.sessions'&lt;/code&gt; 를 추가해야 합니다.</target>
        </trans-unit>
        <trans-unit id="c485b12671856cb3f97a146712ef453cc167eaf1" translate="yes" xml:space="preserve">
          <source>If you want to use a different &lt;code&gt;Client&lt;/code&gt; class (for example, a subclass with customized behavior), use the &lt;a href=&quot;#django.test.SimpleTestCase.client_class&quot;&gt;&lt;code&gt;client_class&lt;/code&gt;&lt;/a&gt; class attribute:</source>
          <target state="translated">다른 &lt;code&gt;Client&lt;/code&gt; 클래스 (예 : 사용자 정의 동작이있는 서브 클래스)를 사용하려면 &lt;a href=&quot;#django.test.SimpleTestCase.client_class&quot;&gt; &lt;code&gt;client_class&lt;/code&gt; &lt;/a&gt; class 속성을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="5db65e04d45386782928afe748f9d80b1e108065" translate="yes" xml:space="preserve">
          <source>If you want to use headers to disable caching altogether, &lt;a href=&quot;http/decorators#django.views.decorators.cache.never_cache&quot;&gt;&lt;code&gt;never_cache()&lt;/code&gt;&lt;/a&gt; is a view decorator that adds headers to ensure the response won&amp;rsquo;t be cached by browsers or other caches. Example:</source>
          <target state="translated">헤더를 사용하여 캐싱을 모두 비활성화하려는 경우 &lt;a href=&quot;http/decorators#django.views.decorators.cache.never_cache&quot;&gt; &lt;code&gt;never_cache()&lt;/code&gt; &lt;/a&gt; 는 브라우저 또는 다른 캐시에 의해 응답이 캐시되지 않도록 헤더를 추가하는 뷰 데코레이터입니다. 예:</target>
        </trans-unit>
        <trans-unit id="8361c5fa5bdf1c6b873a3e941b8993711b228a02" translate="yes" xml:space="preserve">
          <source>If you want to use the admin layout, extend from &lt;code&gt;admin/base_site.html&lt;/code&gt;:</source>
          <target state="translated">관리자 레이아웃을 사용하려면 &lt;code&gt;admin/base_site.html&lt;/code&gt; 에서 확장 하십시오 .</target>
        </trans-unit>
        <trans-unit id="7a82fb0e4828be0c9686fdb58d8239454489f85b" translate="yes" xml:space="preserve">
          <source>If you want to work with model classes or model instances from the &lt;code&gt;from_state&lt;/code&gt; argument in &lt;code&gt;database_forwards()&lt;/code&gt; or &lt;code&gt;database_backwards()&lt;/code&gt;, you must render model states using the &lt;code&gt;clear_delayed_apps_cache()&lt;/code&gt; method to make related models available:</source>
          <target state="translated">&lt;code&gt;database_forwards()&lt;/code&gt; 또는 &lt;code&gt;database_backwards()&lt;/code&gt; 의 &lt;code&gt;from_state&lt;/code&gt; 인수에서 모델 클래스 또는 모델 인스턴스로 작업 하려면 관련 모델을 사용 가능하게 하려면 &lt;code&gt;clear_delayed_apps_cache()&lt;/code&gt; 메소드를 사용하여 모델 상태를 렌더링해야합니다 .</target>
        </trans-unit>
        <trans-unit id="ddefbc21db307ddde4dcfed071042c3b03fd65a6" translate="yes" xml:space="preserve">
          <source>If you want your custom user model to also work with the admin, your user model must define some additional attributes and methods. These methods allow the admin to control access of the user to admin content:</source>
          <target state="translated">사용자 정의 사용자 모델이 관리자와도 작동하게하려면 사용자 모델이 몇 가지 추가 속성 및 메소드를 정의해야합니다. 이러한 방법을 통해 관리자는 콘텐츠를 관리하기위한 사용자 액세스를 제어 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="281b29199ee15df8030aeddb22d5e3ee5ba23b2d" translate="yes" xml:space="preserve">
          <source>If you wanted to add a new manager to the Proxy, without replacing the existing default, you can use the techniques described in the &lt;a href=&quot;managers#custom-managers-and-inheritance&quot;&gt;custom manager&lt;/a&gt; documentation: create a base class containing the new managers and inherit that after the primary base class:</source>
          <target state="translated">기존 기본값을 바꾸지 않고 프록시에 새 관리자를 추가하려면 &lt;a href=&quot;managers#custom-managers-and-inheritance&quot;&gt;사용자 정의 관리자&lt;/a&gt; 문서에 설명 된 기술을 사용할 수 있습니다 . 새 관리자를 포함하는 기본 클래스를 작성하고 기본 기본 클래스 이후에 상속하십시오.</target>
        </trans-unit>
        <trans-unit id="ce151f538ddf72bffbb0e10083ffad1aba038cda" translate="yes" xml:space="preserve">
          <source>If you wanted to add checks to a model manager, you would take the same approach on your subclass of &lt;a href=&quot;db/managers#django.db.models.Manager&quot;&gt;&lt;code&gt;Manager&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">모델 관리자에 검사를 추가하려면 하위 클래스 &lt;a href=&quot;db/managers#django.db.models.Manager&quot;&gt; &lt;code&gt;Manager&lt;/code&gt; &lt;/a&gt; 에서 동일한 접근 방식을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="c6cd0e76c2fef52fb36e48a577f2af1ba781eba5" translate="yes" xml:space="preserve">
          <source>If you wanted to display an inline on the &lt;code&gt;Person&lt;/code&gt; admin add/change pages you need to explicitly define the foreign key since it is unable to do so automatically:</source>
          <target state="translated">&lt;code&gt;Person&lt;/code&gt; admin 추가 / 변경 페이지 에 인라인을 표시 하려면 외래 키를 자동으로 정의 할 수 없으므로 외래 키를 명시 적으로 정의해야합니다.</target>
        </trans-unit>
        <trans-unit id="07539613b20b80f84b619ddd76722bd149b459aa" translate="yes" xml:space="preserve">
          <source>If you wanted to retrieve the uploaded file&amp;rsquo;s on-disk filename, or the file&amp;rsquo;s size, you could use the &lt;a href=&quot;../files/file#django.core.files.File.name&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../files/file#django.core.files.File.size&quot;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt; attributes respectively; for more information on the available attributes and methods, see the &lt;a href=&quot;../files/file#django.core.files.File&quot;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt; class reference and the &lt;a href=&quot;../../topics/files&quot;&gt;Managing files&lt;/a&gt; topic guide.</source>
          <target state="translated">업로드 된 파일의 디스크상의 파일 이름 또는 파일 크기를 검색하려면 &lt;a href=&quot;../files/file#django.core.files.File.name&quot;&gt; &lt;code&gt;name&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../files/file#django.core.files.File.size&quot;&gt; &lt;code&gt;size&lt;/code&gt; &lt;/a&gt; 속성을 각각 사용할 수 있습니다 . 사용 가능한 속성 및 메소드에 대한 자세한 정보는 &lt;a href=&quot;../files/file#django.core.files.File&quot;&gt; &lt;code&gt;File&lt;/code&gt; &lt;/a&gt; 클래스 참조 및 &lt;a href=&quot;../../topics/files&quot;&gt;파일 관리&lt;/a&gt; 주제 안내서를 참조 하십시오 .</target>
        </trans-unit>
        <trans-unit id="b0b81a58992bc81d6e10a12990d5032b8172bb7a" translate="yes" xml:space="preserve">
          <source>If you wish to call a function with a &lt;code&gt;using&lt;/code&gt; parameter you can do it by wrapping the call with a &lt;code&gt;lambda&lt;/code&gt; to add an extra parameter:</source>
          <target state="translated">&lt;code&gt;using&lt;/code&gt; 매개 변수를 사용하여 함수를 호출 하려면 호출을 &lt;code&gt;lambda&lt;/code&gt; 로 묶어 추가 매개 변수를 추가하면됩니다.</target>
        </trans-unit>
        <trans-unit id="f26de0b1fb03d0b7c3a7b0c5f5e0aa437ee3f542" translate="yes" xml:space="preserve">
          <source>If you wish to change the index, login or logout templates, you are better off creating your own &lt;code&gt;AdminSite&lt;/code&gt; instance (see below), and changing the &lt;a href=&quot;#django.contrib.admin.AdminSite.index_template&quot;&gt;&lt;code&gt;AdminSite.index_template&lt;/code&gt;&lt;/a&gt; , &lt;a href=&quot;#django.contrib.admin.AdminSite.login_template&quot;&gt;&lt;code&gt;AdminSite.login_template&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#django.contrib.admin.AdminSite.logout_template&quot;&gt;&lt;code&gt;AdminSite.logout_template&lt;/code&gt;&lt;/a&gt; properties.</source>
          <target state="translated">인덱스, 로그인 또는 로그 아웃 템플릿을 변경하려면 고유 한 &lt;code&gt;AdminSite&lt;/code&gt; 인스턴스 (아래 참조)를 만들고 &lt;a href=&quot;#django.contrib.admin.AdminSite.index_template&quot;&gt; &lt;code&gt;AdminSite.index_template&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#django.contrib.admin.AdminSite.login_template&quot;&gt; &lt;code&gt;AdminSite.login_template&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;#django.contrib.admin.AdminSite.logout_template&quot;&gt; &lt;code&gt;AdminSite.logout_template&lt;/code&gt; &lt;/a&gt; 속성을 변경하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="fd89bde5afb1b4ac48d534864f59e0b25319f574" translate="yes" xml:space="preserve">
          <source>If you wish to have separate templates for &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#CreateView&quot;&gt;&lt;code&gt;CreateView&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#UpdateView&quot;&gt;&lt;code&gt;UpdateView&lt;/code&gt;&lt;/a&gt;, you can set either &lt;a href=&quot;../../ref/class-based-views/mixins-simple#django.views.generic.base.TemplateResponseMixin.template_name&quot;&gt;&lt;code&gt;template_name&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectTemplateResponseMixin.template_name_suffix&quot;&gt;&lt;code&gt;template_name_suffix&lt;/code&gt;&lt;/a&gt; on your view class.</source>
          <target state="translated">당신이에 대해 별도의 템플릿이하고자하는 경우 &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#CreateView&quot;&gt; &lt;code&gt;CreateView&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#UpdateView&quot;&gt; &lt;code&gt;UpdateView&lt;/code&gt; 을&lt;/a&gt; , 당신도 설정할 수 있습니다 &lt;a href=&quot;../../ref/class-based-views/mixins-simple#django.views.generic.base.TemplateResponseMixin.template_name&quot;&gt; &lt;code&gt;template_name&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectTemplateResponseMixin.template_name_suffix&quot;&gt; &lt;code&gt;template_name_suffix&lt;/code&gt; &lt;/a&gt; 뷰 클래스에 있습니다.</target>
        </trans-unit>
        <trans-unit id="c63c598798c3a61a008e5d7569767325195fe300" translate="yes" xml:space="preserve">
          <source>If you wish to override this behavior, you can override &lt;a href=&quot;index#django.contrib.admin.ModelAdmin.delete_queryset&quot;&gt;&lt;code&gt;ModelAdmin.delete_queryset()&lt;/code&gt;&lt;/a&gt; or write a custom action which does deletion in your preferred manner &amp;ndash; for example, by calling &lt;code&gt;Model.delete()&lt;/code&gt; for each of the selected items.</source>
          <target state="translated">이 동작을 재정의하려면 &lt;a href=&quot;index#django.contrib.admin.ModelAdmin.delete_queryset&quot;&gt; &lt;code&gt;ModelAdmin.delete_queryset()&lt;/code&gt; &lt;/a&gt; 재정의 하거나 원하는 방식으로 삭제하는 사용자 지정 작업을 작성할 수 있습니다 ( 예 : 선택한 각 항목에 대해 &lt;code&gt;Model.delete()&lt;/code&gt; 를 호출 ) .</target>
        </trans-unit>
        <trans-unit id="c81732d3ee4b9133691a67e4efeae93d3348110c" translate="yes" xml:space="preserve">
          <source>If you wish to perform arbitrary distance queries using non-point geometries in WGS84 in PostGIS and you want decent performance, enable the &lt;a href=&quot;#django.contrib.gis.db.models.GeometryField.geography&quot;&gt;&lt;code&gt;GeometryField.geography&lt;/code&gt;&lt;/a&gt; keyword so that &lt;a href=&quot;#geography-type&quot;&gt;geography database type&lt;/a&gt; is used instead.</source>
          <target state="translated">PostGIS의 WGS84에서 비점 지오메트리를 사용하여 임의의 거리 쿼리를 수행하고 적절한 성능을 원하면 &lt;a href=&quot;#geography-type&quot;&gt;지리 데이터베이스 유형&lt;/a&gt; 이 대신 사용 되도록 &lt;a href=&quot;#django.contrib.gis.db.models.GeometryField.geography&quot;&gt; &lt;code&gt;GeometryField.geography&lt;/code&gt; &lt;/a&gt; 키워드를 활성화하십시오 .</target>
        </trans-unit>
        <trans-unit id="d149fe0ba9386b629de5325bd32fff38e705d495" translate="yes" xml:space="preserve">
          <source>If you wish to protect a list, tuple or dictionary you can do so using the signing module&amp;rsquo;s &lt;code&gt;dumps&lt;/code&gt; and &lt;code&gt;loads&lt;/code&gt; functions. These imitate Python&amp;rsquo;s pickle module, but use JSON serialization under the hood. JSON ensures that even if your &lt;a href=&quot;../ref/settings#std:setting-SECRET_KEY&quot;&gt;&lt;code&gt;SECRET_KEY&lt;/code&gt;&lt;/a&gt; is stolen an attacker will not be able to execute arbitrary commands by exploiting the pickle format:</source>
          <target state="translated">리스트, 튜플 또는 사전을 보호하려면 서명 모듈의 &lt;code&gt;dumps&lt;/code&gt; 및 &lt;code&gt;loads&lt;/code&gt; 기능을 사용하면 됩니다. 이것들은 파이썬의 피클 모듈을 모방하지만 후드 아래에서 JSON 직렬화를 사용합니다. JSON은 &lt;a href=&quot;../ref/settings#std:setting-SECRET_KEY&quot;&gt; &lt;code&gt;SECRET_KEY&lt;/code&gt; &lt;/a&gt; 를 도난당한 경우에도 피클 형식을 악용하여 공격자가 임의의 명령을 실행할 수 없도록합니다.</target>
        </trans-unit>
        <trans-unit id="1a7ff6c29d67b18f351c6ef695f42316c70e46f0" translate="yes" xml:space="preserve">
          <source>If you wish to store information related to &lt;code&gt;User&lt;/code&gt;, you can use a &lt;a href=&quot;../../ref/models/fields#django.db.models.OneToOneField&quot;&gt;&lt;code&gt;OneToOneField&lt;/code&gt;&lt;/a&gt; to a model containing the fields for additional information. This one-to-one model is often called a profile model, as it might store non-auth related information about a site user. For example you might create an Employee model:</source>
          <target state="translated">&lt;code&gt;User&lt;/code&gt; 관련 정보를 저장하려는 경우 &lt;a href=&quot;../../ref/models/fields#django.db.models.OneToOneField&quot;&gt; &lt;code&gt;OneToOneField&lt;/code&gt; &lt;/a&gt; 를 사용하여 추가 정보를위한 필드가 포함 된 모델을 사용할 수 있습니다 . 이 일대일 모델을 사이트 모델에 대한 인증되지 않은 관련 정보를 저장할 수 있으므로 종종 프로필 모델이라고합니다. 예를 들어 직원 모델을 만들 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e3163de4f64d0e6226c0693d4c28e0ff7be844ba" translate="yes" xml:space="preserve">
          <source>If you wish to store the CSRF token in the user&amp;rsquo;s session, use the &lt;a href=&quot;settings#std:setting-CSRF_USE_SESSIONS&quot;&gt;&lt;code&gt;CSRF_USE_SESSIONS&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">사용자 세션에 CSRF 토큰을 저장하려면 &lt;a href=&quot;settings#std:setting-CSRF_USE_SESSIONS&quot;&gt; &lt;code&gt;CSRF_USE_SESSIONS&lt;/code&gt; &lt;/a&gt; 설정을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="95ab3f31deb5e5844d6cefd4f6792b2923cdc1d0" translate="yes" xml:space="preserve">
          <source>If you wish to submit your site to the &lt;a href=&quot;https://hstspreload.org/&quot;&gt;browser preload list&lt;/a&gt;, set the &lt;a href=&quot;settings#std:setting-SECURE_HSTS_PRELOAD&quot;&gt;&lt;code&gt;SECURE_HSTS_PRELOAD&lt;/code&gt;&lt;/a&gt; setting to &lt;code&gt;True&lt;/code&gt;. That appends the &lt;code&gt;preload&lt;/code&gt; directive to the &lt;code&gt;Strict-Transport-Security&lt;/code&gt; header.</source>
          <target state="translated">사이트를 &lt;a href=&quot;https://hstspreload.org/&quot;&gt;브라우저 &lt;/a&gt;&lt;a href=&quot;settings#std:setting-SECURE_HSTS_PRELOAD&quot;&gt; &lt;code&gt;SECURE_HSTS_PRELOAD&lt;/code&gt; &lt;/a&gt; 로드 목록 에 제출 하려면 SECURE_HSTS_PRELOAD 설정을 &lt;code&gt;True&lt;/code&gt; 로 설정하십시오 . 이는 &lt;code&gt;preload&lt;/code&gt; 지시문을 &lt;code&gt;Strict-Transport-Security&lt;/code&gt; 헤더에 추가합니다.</target>
        </trans-unit>
        <trans-unit id="530ae0cc38e2e42a905344acaf5f960f73fc3715" translate="yes" xml:space="preserve">
          <source>If you wish to use a different template for each sitemap or sitemap index available on your site, you may specify it by passing a &lt;code&gt;template_name&lt;/code&gt; parameter to the &lt;code&gt;sitemap&lt;/code&gt; and &lt;code&gt;index&lt;/code&gt; views via the URLconf:</source>
          <target state="translated">사이트에서 사용 가능한 사이트 맵 또는 사이트 맵 색인마다 다른 템플릿을 사용하려는 경우 URLconf를 통해 &lt;code&gt;template_name&lt;/code&gt; 매개 변수를 &lt;code&gt;sitemap&lt;/code&gt; 및 &lt;code&gt;index&lt;/code&gt; 보기 에 전달하여 지정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="6909e16e21302fa3cec3921ce60357ae9b5838a2" translate="yes" xml:space="preserve">
          <source>If you wish to use another database, install the appropriate &lt;a href=&quot;../topics/install#database-installation&quot;&gt;database bindings&lt;/a&gt; and change the following keys in the &lt;a href=&quot;../ref/settings#std:setting-DATABASES&quot;&gt;&lt;code&gt;DATABASES&lt;/code&gt;&lt;/a&gt;&lt;code&gt;'default'&lt;/code&gt; item to match your database connection settings:</source>
          <target state="translated">다른 데이터베이스를 사용하려면 적절한 &lt;a href=&quot;../topics/install#database-installation&quot;&gt;데이터베이스 바인딩을&lt;/a&gt; 설치하고 데이터베이스 연결 설정과 일치하도록 &lt;a href=&quot;../ref/settings#std:setting-DATABASES&quot;&gt; &lt;code&gt;DATABASES&lt;/code&gt; &lt;/a&gt; &lt;code&gt;'default'&lt;/code&gt; 항목 에서 다음 키를 변경하십시오 .</target>
        </trans-unit>
        <trans-unit id="b6e2765329d13f9a756817f8148fc06ebd15e20d" translate="yes" xml:space="preserve">
          <source>If you would like to give translators hints about a translatable string, you can add a comment prefixed with the &lt;code&gt;Translators&lt;/code&gt; keyword on the line preceding the string, e.g.:</source>
          <target state="translated">번역자에게 번역 가능한 문자열에 대한 힌트를 제공 하려면 문자열 앞에있는 줄에 &lt;code&gt;Translators&lt;/code&gt; 키워드로 접두어를 추가 할 수 있습니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="ec10a212c4274c393a2dd780fbf91de455cc5cb9" translate="yes" xml:space="preserve">
          <source>If you would like to override the &lt;code&gt;clean()&lt;/code&gt; method and maintain this validation, you must call the parent class&amp;rsquo;s &lt;code&gt;clean()&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;clean()&lt;/code&gt; 메소드 를 대체 하고이 유효성 검증을 유지하려면 상위 클래스의 &lt;code&gt;clean()&lt;/code&gt; 메소드를 호출해야합니다 .</target>
        </trans-unit>
        <trans-unit id="3f28065cea9d31fe5a0cfcc2e982ee60d5116348" translate="yes" xml:space="preserve">
          <source>If you would rather start from an empty database and re-run all migrations, you should drop and recreate the database and then run &lt;a href=&quot;#django-admin-migrate&quot;&gt;&lt;code&gt;migrate&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">빈 데이터베이스에서 시작하여 모든 마이그레이션을 다시 실행하려면 데이터베이스를 삭제하고 다시 만든 다음 &lt;a href=&quot;#django-admin-migrate&quot;&gt; &lt;code&gt;migrate&lt;/code&gt; &lt;/a&gt; 대신 실행해야 합니다.</target>
        </trans-unit>
        <trans-unit id="787d4b4a6adbad5e56e698fbb47e2f7227b1967b" translate="yes" xml:space="preserve">
          <source>If you write a custom filter that operates on &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.datetime&quot;&gt;&lt;code&gt;datetime&lt;/code&gt;&lt;/a&gt; objects, you&amp;rsquo;ll usually register it with the &lt;code&gt;expects_localtime&lt;/code&gt; flag set to &lt;code&gt;True&lt;/code&gt;:</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.datetime&quot;&gt; &lt;code&gt;datetime&lt;/code&gt; &lt;/a&gt; 객체에서 작동하는 사용자 정의 필터를 작성하는 경우 일반적으로 &lt;code&gt;expects_localtime&lt;/code&gt; 플래그를 &lt;code&gt;True&lt;/code&gt; 로 설정하여 등록합니다 .</target>
        </trans-unit>
        <trans-unit id="41a73fd1c496ecfedcbd96f35862caf467d2aa9d" translate="yes" xml:space="preserve">
          <source>If you write your own password hasher that contains a work factor such as a number of iterations, you should implement a &lt;code&gt;harden_runtime(self, password, encoded)&lt;/code&gt; method to bridge the runtime gap between the work factor supplied in the &lt;code&gt;encoded&lt;/code&gt; password and the default work factor of the hasher. This prevents a user enumeration timing attack due to difference between a login request for a user with a password encoded in an older number of iterations and a nonexistent user (which runs the default hasher&amp;rsquo;s default number of iterations).</source>
          <target state="translated">여러 반복 횟수와 같은 작업 요소가 포함 된 고유 한 암호 &lt;code&gt;harden_runtime(self, password, encoded)&lt;/code&gt; 를 작성하는 경우 &lt;code&gt;encoded&lt;/code&gt; 암호에 제공된 작업 요소 와 기본 작업 사이의 런타임 간격을 연결 하기 위해 harden_runtime (self, password, encode) 메소드를 구현해야 합니다. hasher의 요인. 이렇게하면 이전 반복 횟수로 인코딩 된 비밀번호를 가진 사용자의 로그인 요청과 존재하지 않는 사용자 (기본 hasher의 기본 반복 횟수를 실행 함)의 차이로 인해 사용자 열거 타이밍 공격이 방지됩니다.</target>
        </trans-unit>
        <trans-unit id="0874fbd3ce49447e25c47a3eeb9385b0739ec7b9" translate="yes" xml:space="preserve">
          <source>If you write your own similar functions and deal with translations, you&amp;rsquo;ll face the problem of what to do when the first argument is a lazy translation object. You don&amp;rsquo;t want to convert it to a string immediately, because you might be using this function outside of a view (and hence the current thread&amp;rsquo;s locale setting will not be correct).</source>
          <target state="translated">비슷한 함수를 작성하고 번역을 다루는 경우 첫 번째 인수가 게으른 번역 객체 일 때 수행 할 작업의 문제에 직면하게됩니다. 뷰 외부에서이 함수를 사용하고 있기 때문에 즉시 문자열로 변환하고 싶지 않으므로 현재 스레드의 로케일 설정이 올바르지 않습니다.</target>
        </trans-unit>
        <trans-unit id="7404aaf8b678e2be0f5abe5634bc5b715f5e8c11" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;d like default values to come from somewhere other than &lt;code&gt;django.conf.global_settings&lt;/code&gt;, you can pass in a module or class that provides the default settings as the &lt;code&gt;default_settings&lt;/code&gt; argument (or as the first positional argument) in the call to &lt;code&gt;configure()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;django.conf.global_settings&lt;/code&gt; 가 아닌 다른 곳에서 기본값을 가져 오려면 &lt;code&gt;configure()&lt;/code&gt; 호출에서 기본 설정을 &lt;code&gt;default_settings&lt;/code&gt; 인수 (또는 첫 번째 위치 인수) 로 제공하는 모듈 또는 클래스를 전달할 수 있습니다. ) .</target>
        </trans-unit>
        <trans-unit id="87fbb560a0a7d5bfb6385760a929b01781e9247b" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;d like to be able to update your Django code occasionally with the latest bug fixes and improvements, follow these instructions:</source>
          <target state="translated">최신 버그 수정 및 개선 사항으로 Django 코드를 가끔 업데이트하려면 다음 지침을 따르십시오.</target>
        </trans-unit>
        <trans-unit id="2e426d25005a653ab3104419888711627e40acb9" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;d like to customize the behavior of &lt;a href=&quot;../ref/middleware#django.middleware.common.BrokenLinkEmailsMiddleware&quot;&gt;&lt;code&gt;django.middleware.common.BrokenLinkEmailsMiddleware&lt;/code&gt;&lt;/a&gt; further (for example to ignore requests coming from web crawlers), you should subclass it and override its methods.</source>
          <target state="translated">&lt;a href=&quot;../ref/middleware#django.middleware.common.BrokenLinkEmailsMiddleware&quot;&gt; &lt;code&gt;django.middleware.common.BrokenLinkEmailsMiddleware&lt;/code&gt; &lt;/a&gt; 의 동작을 추가 로 사용자 정의하려면 (예 : 웹 크롤러에서 오는 요청을 무시하기 위해) 서브 클래 싱하고 해당 메소드를 대체해야합니다.</target>
        </trans-unit>
        <trans-unit id="40a45578a28fb495c1954bbd188030f39d58e346" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;d like to manually authenticate a user by comparing a plain-text password to the hashed password in the database, use the convenience function &lt;a href=&quot;#django.contrib.auth.hashers.check_password&quot;&gt;&lt;code&gt;check_password()&lt;/code&gt;&lt;/a&gt;. It takes two arguments: the plain-text password to check, and the full value of a user&amp;rsquo;s &lt;code&gt;password&lt;/code&gt; field in the database to check against, and returns &lt;code&gt;True&lt;/code&gt; if they match, &lt;code&gt;False&lt;/code&gt; otherwise.</source>
          <target state="translated">일반 텍스트 비밀번호를 데이터베이스의 해시 비밀번호와 비교하여 사용자를 수동으로 인증하려면 편의 기능 &lt;a href=&quot;#django.contrib.auth.hashers.check_password&quot;&gt; &lt;code&gt;check_password()&lt;/code&gt; &lt;/a&gt; 사용하십시오 . 검사 할 일반 텍스트 암호와 데이터베이스에서 검사 할 사용자 &lt;code&gt;password&lt;/code&gt; 필드 의 전체 값이라는 두 가지 인수가 필요하며 일치하면 &lt;code&gt;True&lt;/code&gt; 를 , &lt;code&gt;False&lt;/code&gt; 않으면 False를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="7032cf12cbd255835e52ce652c41252d70b15172" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;d like to retrieve a URL without displaying it, you can use a slightly different call:</source>
          <target state="translated">표시하지 않고 URL을 검색하려면 약간 다른 호출을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3e6e1935ff1f8bbe3d9a10a3392b2aed18e77332" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;d like to retrieve a namespaced URL, specify the fully qualified name:</source>
          <target state="translated">네임 스페이스가 지정된 URL을 검색하려면 정규화 된 이름을 지정하십시오.</target>
        </trans-unit>
        <trans-unit id="42574c0524ed457c65a64125a0ee03cde3ec0664" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;d like to retrieve a static URL without displaying it, you can use a slightly different call:</source>
          <target state="translated">정적 URL을 표시하지 않고 검색하려면 약간 다른 호출을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="782329d0998e5379bd00452f104bcc26d52e8259" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;d like to retrieve a translated string without displaying it, you can use the following syntax:</source>
          <target state="translated">번역 된 문자열을 표시하지 않고 검색하려면 다음 구문을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a678c4aabe8ea3a89184137c4d4eb0cd0f145382" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;d like to set up your own admin site with custom behavior, you&amp;rsquo;re free to subclass &lt;code&gt;AdminSite&lt;/code&gt; and override or add anything you like. Then, create an instance of your &lt;code&gt;AdminSite&lt;/code&gt; subclass (the same way you&amp;rsquo;d instantiate any other Python class) and register your models and &lt;code&gt;ModelAdmin&lt;/code&gt; subclasses with it instead of with the default site. Finally, update &lt;code&gt;myproject/urls.py&lt;/code&gt; to reference your &lt;a href=&quot;#django.contrib.admin.AdminSite&quot;&gt;&lt;code&gt;AdminSite&lt;/code&gt;&lt;/a&gt; subclass.</source>
          <target state="translated">사용자 지정 동작으로 자체 관리 사이트를 설정하려면 &lt;code&gt;AdminSite&lt;/code&gt; 를 하위 클래스로 분류 하고 원하는 항목을 재정의하거나 추가 할 수 있습니다. 그런 다음 &lt;code&gt;AdminSite&lt;/code&gt; 서브 클래스 의 인스턴스 (다른 Python 클래스를 인스턴스화하는 것과 같은 방법)를 작성하고 기본 사이트 대신 모델 및 &lt;code&gt;ModelAdmin&lt;/code&gt; 서브 클래스를 등록하십시오 . 마지막으로 &lt;a href=&quot;#django.contrib.admin.AdminSite&quot;&gt; &lt;code&gt;AdminSite&lt;/code&gt; &lt;/a&gt; 하위 클래스 를 참조하도록 &lt;code&gt;myproject/urls.py&lt;/code&gt; 를 업데이트 하십시오 .</target>
        </trans-unit>
        <trans-unit id="817d51330fc9dd66b1c2b0e80b8eed9e206bc902" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;d like to specify a custom primary key, specify &lt;a href=&quot;../../ref/models/fields#django.db.models.Field.primary_key&quot;&gt;&lt;code&gt;primary_key=True&lt;/code&gt;&lt;/a&gt; on one of your fields. If Django sees you&amp;rsquo;ve explicitly set &lt;a href=&quot;../../ref/models/fields#django.db.models.Field.primary_key&quot;&gt;&lt;code&gt;Field.primary_key&lt;/code&gt;&lt;/a&gt;, it won&amp;rsquo;t add the automatic &lt;code&gt;id&lt;/code&gt; column.</source>
          <target state="translated">사용자 정의 기본 키를 지정하려면 필드 중 하나에 &lt;a href=&quot;../../ref/models/fields#django.db.models.Field.primary_key&quot;&gt; &lt;code&gt;primary_key=True&lt;/code&gt; &lt;/a&gt; 를 지정 하십시오. Django가 &lt;a href=&quot;../../ref/models/fields#django.db.models.Field.primary_key&quot;&gt; &lt;code&gt;Field.primary_key&lt;/code&gt; 를&lt;/a&gt; 명시 적으로 설정 했다면 자동 &lt;code&gt;id&lt;/code&gt; 열을 추가하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="59523cacb99089a63ab1f97cf8f948701988f18d" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;d prefer Django not to create a backwards relation, set &lt;code&gt;related_name&lt;/code&gt; to &lt;code&gt;'+'&lt;/code&gt; or end it with &lt;code&gt;'+'&lt;/code&gt;. For example, this will ensure that the &lt;code&gt;User&lt;/code&gt; model won&amp;rsquo;t have a backwards relation to this model:</source>
          <target state="translated">당신이 장고를 원하는 경우 이전 버전과의 관계 설정 작성하지 &lt;code&gt;related_name&lt;/code&gt; 에 &lt;code&gt;'+'&lt;/code&gt; 를 또는 그것을 종료 &lt;code&gt;'+'&lt;/code&gt; . 예를 들어 &lt;code&gt;User&lt;/code&gt; 모델이이 모델과 역방향 관계를 가지지 않도록합니다.</target>
        </trans-unit>
        <trans-unit id="1b20aacdd666251729295967fecf137a2c2099d5" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;d prefer not to call the template &lt;code&gt;registration/login.html&lt;/code&gt;, you can pass the &lt;code&gt;template_name&lt;/code&gt; parameter via the extra arguments to the &lt;code&gt;as_view&lt;/code&gt; method in your URLconf. For example, this URLconf line would use &lt;code&gt;myapp/login.html&lt;/code&gt; instead:</source>
          <target state="translated">템플릿의 전화를 사용하지 않으려면 &lt;code&gt;registration/login.html&lt;/code&gt; , 당신은 통과 할 수 &lt;code&gt;template_name&lt;/code&gt; 받는 여분의 인수를 통해 매개 변수를 &lt;code&gt;as_view&lt;/code&gt; 의 당신의 URLconf의 방법. 예를 들어이 URLconf 줄은 &lt;code&gt;myapp/login.html&lt;/code&gt; 을 대신 사용합니다.</target>
        </trans-unit>
        <trans-unit id="48c682ae2cbd0afba4b4eae5274158bf92b45a13" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re after even more control, you can also cache template fragments using the &lt;code&gt;cache&lt;/code&gt; template tag. To give your template access to this tag, put &lt;code&gt;{% load cache %}&lt;/code&gt; near the top of your template.</source>
          <target state="translated">더 많은 제어를 수행 한 경우 &lt;code&gt;cache&lt;/code&gt; 템플릿 태그를 사용하여 템플릿 조각을 캐시 할 수도 있습니다 . 템플릿에이 태그에 대한 액세스 권한을 부여하려면 템플릿 상단 근처 에 &lt;code&gt;{% load cache %}&lt;/code&gt; 를 넣으십시오.</target>
        </trans-unit>
        <trans-unit id="767eed5b450bd819bca83e5738282f4f7be2808f" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re building a database-driven app, chances are you&amp;rsquo;ll have forms that map closely to Django models. For instance, you might have a &lt;code&gt;BlogComment&lt;/code&gt; model, and you want to create a form that lets people submit comments. In this case, it would be redundant to define the field types in your form, because you&amp;rsquo;ve already defined the fields in your model.</source>
          <target state="translated">데이터베이스 기반 앱을 구축하는 경우 장고 모델과 밀접하게 매핑되는 양식이있을 수 있습니다. 예를 들어, &lt;code&gt;BlogComment&lt;/code&gt; 모델이 있고 사람들이 의견을 제출할 수있는 양식을 작성하려고 할 수 있습니다. 이 경우 모델에서 필드를 이미 정의 했으므로 양식에서 필드 유형을 정의하는 것이 중복됩니다.</target>
        </trans-unit>
        <trans-unit id="abfc88abce0b83f7179182a6de094082846b855c" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re building your own backend, you can use the standard cache backends as reference implementations. You&amp;rsquo;ll find the code in the &lt;code&gt;django/core/cache/backends/&lt;/code&gt; directory of the Django source.</source>
          <target state="translated">자체 백엔드를 구축하는 경우 표준 캐시 백엔드를 참조 구현으로 사용할 수 있습니다. Django 소스 의 &lt;code&gt;django/core/cache/backends/&lt;/code&gt; 디렉토리에 코드가 있습니다.</target>
        </trans-unit>
        <trans-unit id="cdde1ef1672874bcb82d804c53395d8d7aa1ed21" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re constructing SQL like &lt;code&gt;strftime('%W', 'date')&lt;/code&gt; and need a literal &lt;code&gt;%&lt;/code&gt; character in the query, quadruple it (&lt;code&gt;%%%%&lt;/code&gt;) in the &lt;code&gt;template&lt;/code&gt; attribute because the string is interpolated twice: once during the template interpolation in &lt;code&gt;as_sql()&lt;/code&gt; and once in the SQL interpolation with the query parameters in the database cursor.</source>
          <target state="translated">&lt;code&gt;strftime('%W', 'date')&lt;/code&gt; 와 같은 SQL을 생성 하고 쿼리에 리터럴 &lt;code&gt;%&lt;/code&gt; 문자 가 필요한 경우 문자열이 두 번 보간되므로 &lt;code&gt;template&lt;/code&gt; 속성 에서 문자를 % ( &lt;code&gt;%%%%&lt;/code&gt; ) 4 배로 늘리십시오 . &lt;code&gt;as_sql()&lt;/code&gt; 에서 템플릿 보간 , 데이터베이스 커서에서 쿼리 매개 변수를 사용하여 SQL 보간에서 한 번.</target>
        </trans-unit>
        <trans-unit id="ab456d418794c4d43bbff01956e9a7a76d213a8a" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re constructing a URL manually (i.e., &lt;em&gt;not&lt;/em&gt; using the &lt;code&gt;reverse()&lt;/code&gt; function), you&amp;rsquo;ll need to take care of the encoding yourself. In this case, use the &lt;code&gt;iri_to_uri()&lt;/code&gt; and &lt;code&gt;quote()&lt;/code&gt; functions that were documented &lt;a href=&quot;#id1&quot;&gt;above&lt;/a&gt;. For example:</source>
          <target state="translated">URL을 수동으로 구성하는 경우 (즉, &lt;code&gt;reverse()&lt;/code&gt; 함수를 사용 &lt;em&gt;하지 않는&lt;/em&gt; 경우) 인코딩을 직접 관리해야합니다. 이 경우 &lt;a href=&quot;#id1&quot;&gt;위에 설명한 &lt;/a&gt; &lt;code&gt;iri_to_uri()&lt;/code&gt; 및 &lt;code&gt;quote()&lt;/code&gt; 함수를 사용하십시오 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="6d1f283bcbf28eac94ae688e9ec728c932159a38" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re creating a pluggable app called &amp;ldquo;Rock &amp;rsquo;n&amp;rsquo; roll&amp;rdquo;, here&amp;rsquo;s how you would provide a proper name for the admin:</source>
          <target state="translated">&quot;Rock 'n'roll&quot;이라는 플러그 가능 앱을 만드는 경우 관리자에게 적절한 이름을 제공하는 방법은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="48483c8c5c77a7b69d1a11700c288faaa0c7a213" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re creating a template that might be used in situations where you&amp;rsquo;re not sure whether auto-escaping is enabled, then add an &lt;a href=&quot;builtins#std:templatefilter-escape&quot;&gt;&lt;code&gt;escape&lt;/code&gt;&lt;/a&gt; filter to any variable that needs escaping. When auto-escaping is on, there&amp;rsquo;s no danger of the &lt;a href=&quot;builtins#std:templatefilter-escape&quot;&gt;&lt;code&gt;escape&lt;/code&gt;&lt;/a&gt; filter &lt;em&gt;double-escaping&lt;/em&gt; data &amp;ndash; the &lt;a href=&quot;builtins#std:templatefilter-escape&quot;&gt;&lt;code&gt;escape&lt;/code&gt;&lt;/a&gt; filter does not affect auto-escaped variables.</source>
          <target state="translated">자동 이스케이프가 사용 가능한지 확실하지 않은 상황에서 사용할 수있는 템플리트를 작성하는 경우 이스케이프 해야하는 모든 변수에 &lt;a href=&quot;builtins#std:templatefilter-escape&quot;&gt; &lt;code&gt;escape&lt;/code&gt; &lt;/a&gt; 필터를 추가하십시오 . 자동 이스케이프가 설정되어 있으면 &lt;a href=&quot;builtins#std:templatefilter-escape&quot;&gt; &lt;code&gt;escape&lt;/code&gt; &lt;/a&gt; 필터 &lt;em&gt;가 이스케이프되는&lt;/em&gt; 데이터 가 발생할 위험 이 없습니다 . &lt;a href=&quot;builtins#std:templatefilter-escape&quot;&gt; &lt;code&gt;escape&lt;/code&gt; &lt;/a&gt; 필터는 자동 이스케이프 변수에 영향을 미치지 않습니다.</target>
        </trans-unit>
        <trans-unit id="bb584f8f7f077e584c39783ffdb002ff86b811fe" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re creating an Atom feed, rather than an RSS feed, set the &lt;code&gt;subtitle&lt;/code&gt; attribute instead of the &lt;code&gt;description&lt;/code&gt; attribute. See &lt;a href=&quot;#publishing-atom-and-rss-feeds-in-tandem&quot;&gt;Publishing Atom and RSS feeds in tandem&lt;/a&gt;, later, for an example.</source>
          <target state="translated">RSS 피드 대신 Atom 피드를 작성하는 경우 &lt;code&gt;description&lt;/code&gt; 속성 대신 &lt;code&gt;subtitle&lt;/code&gt; 속성을 설정하십시오 . 예제는 나중에 &lt;a href=&quot;#publishing-atom-and-rss-feeds-in-tandem&quot;&gt;Atom 및 RSS 피드 게시를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="4cb96d8c5caf914260b393b1dfd4c0e8a90b35c9" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re entirely happy with Django&amp;rsquo;s &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User&quot;&gt;&lt;code&gt;User&lt;/code&gt;&lt;/a&gt; model, but you want to add some additional profile information, you could subclass &lt;a href=&quot;#django.contrib.auth.models.AbstractUser&quot;&gt;&lt;code&gt;django.contrib.auth.models.AbstractUser&lt;/code&gt;&lt;/a&gt; and add your custom profile fields, although we&amp;rsquo;d recommend a separate model as described in the &amp;ldquo;Model design considerations&amp;rdquo; note of &lt;a href=&quot;#specifying-custom-user-model&quot;&gt;Specifying a custom user model&lt;/a&gt;. &lt;code&gt;AbstractUser&lt;/code&gt; provides the full implementation of the default &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User&quot;&gt;&lt;code&gt;User&lt;/code&gt;&lt;/a&gt; as an &lt;a href=&quot;../db/models#abstract-base-classes&quot;&gt;abstract model&lt;/a&gt;.</source>
          <target state="translated">Django의 &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User&quot;&gt; &lt;code&gt;User&lt;/code&gt; &lt;/a&gt; 모델에 만족하지만 추가 프로파일 정보를 추가하려는 경우 &lt;a href=&quot;#django.contrib.auth.models.AbstractUser&quot;&gt; &lt;code&gt;django.contrib.auth.models.AbstractUser&lt;/code&gt; 를&lt;/a&gt; 서브 클래 싱 하고 사용자 정의 프로파일 필드를 추가 할 수 있지만 설명 된대로 별도의 모델을 권장합니다 의 &quot;모델 설계 고려 사항&quot;노트에 &lt;a href=&quot;#specifying-custom-user-model&quot;&gt;사용자 정의 사용자 모델을 지정&lt;/a&gt; . &lt;code&gt;AbstractUser&lt;/code&gt; 는 기본의 전체 구현을 제공합니다 &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User&quot;&gt; &lt;code&gt;User&lt;/code&gt; &lt;/a&gt; 가 AS &lt;a href=&quot;../db/models#abstract-base-classes&quot;&gt;추상 모델을&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="cf98ea5e8ac10c40300863d754cd455a34023fde" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re getting this error, you can solve it by:</source>
          <target state="translated">이 오류가 발생하면 다음을 통해 해결할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4ff638989d7f1c32d1bc77a814ea175afb1ded83" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re having trouble going through this tutorial, please head over to the &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/faq/help/&quot;&gt;Getting Help&lt;/a&gt; section of the FAQ.</source>
          <target state="translated">이 자습서를 진행하는 데 문제가 있으면 FAQ의 &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/faq/help/&quot;&gt;도움말 얻기&lt;/a&gt; 섹션으로 이동하십시오.</target>
        </trans-unit>
        <trans-unit id="6d2ac7f0ad5bbe9c9e5d4d66af481149008f986f" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re having trouble going through this tutorial, please post a message to &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/internals/mailing-lists/#django-developers-mailing-list&quot;&gt;django-developers&lt;/a&gt; or drop by &lt;a href=&quot;irc://irc.freenode.net/django-dev&quot;&gt;#django-dev on irc.freenode.net&lt;/a&gt; to chat with other Django users who might be able to help.</source>
          <target state="translated">이 튜토리얼을 진행하는 데 문제가있는 경우 &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/internals/mailing-lists/#django-developers-mailing-list&quot;&gt;django 개발자&lt;/a&gt; 에게 메시지를 게시 하거나 &lt;a href=&quot;irc://irc.freenode.net/django-dev&quot;&gt;irc.freenode.net&lt;/a&gt; 에서 # django-dev 를 통해 도움을 줄 수있는 다른 Django 사용자와 채팅하십시오.</target>
        </trans-unit>
        <trans-unit id="7d98d87b390e8d3b15eb2355fe5039a0d87c9028" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re in a multi-database setup, you might have fixture data that you want to load onto one database, but not onto another. In this situation, you can add a database identifier into the names of your fixtures.</source>
          <target state="translated">다중 데이터베이스 설정 인 경우, 다른 데이터베이스가 아닌 한 데이터베이스에로드하려는 조명기 데이터가있을 수 있습니다. 이 상황에서, 조명기 이름에 데이터베이스 식별자를 추가 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="36c3a9be516105bc13cecddbe3c1b10fd6b1043c" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re interested in changing the Python-level behavior of a model class, you &lt;em&gt;could&lt;/em&gt; use &lt;code&gt;managed=False&lt;/code&gt; and create a copy of an existing model. However, there&amp;rsquo;s a better approach for that situation: &lt;a href=&quot;../../topics/db/models#proxy-models&quot;&gt;Proxy models&lt;/a&gt;.</source>
          <target state="translated">모델 클래스의 Python 레벨 동작 변경에 관심이 &lt;em&gt;있는&lt;/em&gt; 경우 &lt;code&gt;managed=False&lt;/code&gt; 를 사용하여 기존 모델의 사본을 작성할 &lt;em&gt;수&lt;/em&gt; 있습니다 . 그러나 해당 상황에 대한 더 나은 접근 방식이 있습니다 : &lt;a href=&quot;../../topics/db/models#proxy-models&quot;&gt;Proxy models&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="99f458dbd1df038441eb2681e7428cb82105b3e7" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re interested in the more advanced migration operations, or want to be able to write your own, see the &lt;a href=&quot;../ref/migration-operations&quot;&gt;migration operations reference&lt;/a&gt; and the &amp;ldquo;how-to&amp;rdquo; on &lt;a href=&quot;../howto/writing-migrations&quot;&gt;writing migrations&lt;/a&gt;.</source>
          <target state="translated">고급 마이그레이션 작업에 관심이 있거나 직접 작성하려면 &lt;a href=&quot;../ref/migration-operations&quot;&gt;마이그레이션 작업 참조&lt;/a&gt; 및 &lt;a href=&quot;../howto/writing-migrations&quot;&gt;마이그레이션 작성&lt;/a&gt; 방법을 참조 하십시오 .</target>
        </trans-unit>
        <trans-unit id="90b9a4c5a91dd19aabaed1109072ba30aa990297" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re interested, you can also run &lt;a href=&quot;../ref/django-admin#django-admin-check&quot;&gt;&lt;code&gt;python manage.py check&lt;/code&gt;&lt;/a&gt;; this checks for any problems in your project without making migrations or touching the database.</source>
          <target state="translated">관심이 있다면 &lt;a href=&quot;../ref/django-admin#django-admin-check&quot;&gt; &lt;code&gt;python manage.py check&lt;/code&gt; &lt;/a&gt; ; 이것은 이주를하거나 데이터베이스를 건드리지 않고 프로젝트의 문제점을 점검합니다.</target>
        </trans-unit>
        <trans-unit id="254c1791d376774d686299aebfc8b6db7e292b89" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re just updating a record and don&amp;rsquo;t need to do anything with the model object, the most efficient approach is to call &lt;code&gt;update()&lt;/code&gt;, rather than loading the model object into memory. For example, instead of doing this:</source>
          <target state="translated">레코드를 업데이트하고 모델 객체로 아무것도 할 필요가없는 경우 가장 효율적인 방법은 모델 객체를 메모리에로드하는 대신 &lt;code&gt;update()&lt;/code&gt; 를 호출 하는 것입니다. 예를 들어, 이것을하는 대신 :</target>
        </trans-unit>
        <trans-unit id="6535bf89936e50d74084e2cbe76650a8f1162a35" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re manually laying out a form in a template, as opposed to relying on Django&amp;rsquo;s default form layout, you might want to treat &lt;code&gt;&amp;lt;input type=&quot;hidden&quot;&amp;gt;&lt;/code&gt; fields differently from non-hidden fields. For example, because hidden fields don&amp;rsquo;t display anything, putting error messages &amp;ldquo;next to&amp;rdquo; the field could cause confusion for your users &amp;ndash; so errors for those fields should be handled differently.</source>
          <target state="translated">Django의 기본 양식 레이아웃에 의존하는 대신 템플릿에 양식을 수동으로 배치하는 경우 &lt;code&gt;&amp;lt;input type=&quot;hidden&quot;&amp;gt;&lt;/code&gt; 필드를 숨겨지지 않은 필드와 다르게 취급 할 수 있습니다. 예를 들어, 숨겨진 필드에는 아무 것도 표시되지 않으므로 필드 옆에 오류 메시지를 넣으면 사용자에게 혼란을 줄 수 있으므로 해당 필드의 오류는 다르게 처리해야합니다.</target>
        </trans-unit>
        <trans-unit id="255a115dbc0b712cc68471c5b0157f7a05af4797" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re new to &lt;a href=&quot;https://python.org/&quot;&gt;Python&lt;/a&gt;, you might want to start by getting an idea of what the language is like. Django is 100% Python, so if you&amp;rsquo;ve got minimal comfort with Python you&amp;rsquo;ll probably get a lot more out of Django.</source>
          <target state="translated">당신이 새로운 경우 &lt;a href=&quot;https://python.org/&quot;&gt;파이썬&lt;/a&gt; , 당신은 언어가 어떤지의 아이디어를 얻어서 시작 할 수 있습니다. Django는 100 % Python이므로 Python에 대한 편안함이 거의 없다면 Django에서 더 많은 것을 얻을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="57db89d44ba94f90db102a29f1cf186e18b0cf37" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re new to programming entirely, you might want to start with this &lt;a href=&quot;https://wiki.python.org/moin/BeginnersGuide/NonProgrammers&quot;&gt;list of Python resources for non-programmers&lt;/a&gt;</source>
          <target state="translated">완전히 프로그래밍에 익숙하지 않다면 프로그래머 &lt;a href=&quot;https://wiki.python.org/moin/BeginnersGuide/NonProgrammers&quot;&gt;가 아닌 사람을위한이 Python 리소스 목록으로&lt;/a&gt; 시작하는 것이 좋습니다</target>
        </trans-unit>
        <trans-unit id="a1b95c0b433ee48fc48a97069bddf9e2b101dfc4" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re not familiar with file modes, please note that the leading &lt;code&gt;0&lt;/code&gt; is very important: it indicates an octal number, which is the way that modes must be specified. If you try to use &lt;code&gt;644&lt;/code&gt;, you&amp;rsquo;ll get totally incorrect behavior.</source>
          <target state="translated">파일 모드에 익숙하지 않은 경우 선행 &lt;code&gt;0&lt;/code&gt; 이 매우 중요합니다. 이는 8 진수를 나타내며, 이는 모드를 지정해야하는 방식입니다. &lt;code&gt;644&lt;/code&gt; 사용하려고 하면 완전히 잘못된 동작이 발생합니다.</target>
        </trans-unit>
        <trans-unit id="fca79f66a708a64746ced9500efdfaadfc0da5f9" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re not familiar with the Python DB-API, note that the SQL statement in &lt;code&gt;cursor.execute()&lt;/code&gt; uses placeholders, &lt;code&gt;&quot;%s&quot;&lt;/code&gt;, rather than adding parameters directly within the SQL. If you use this technique, the underlying database library will automatically escape your parameters as necessary.</source>
          <target state="translated">Python DB-API에 익숙하지 않은 경우 &lt;code&gt;cursor.execute()&lt;/code&gt; 의 SQL 문 은 SQL 내에 직접 매개 변수를 추가하는 대신 자리 표시 자 &lt;code&gt;&quot;%s&quot;&lt;/code&gt; 사용합니다 . 이 기술을 사용하면 기본 데이터베이스 라이브러리가 필요에 따라 자동으로 매개 변수를 이스케이프합니다.</target>
        </trans-unit>
        <trans-unit id="69337c6de60600bc5976cb6685657eebda60402c" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re not setting the &lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt; environment variable, you &lt;em&gt;must&lt;/em&gt; call &lt;code&gt;configure()&lt;/code&gt; at some point before using any code that reads settings.</source>
          <target state="translated">&lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt; 환경 변수를 설정하지 않는 경우 설정 을 읽는 코드를 사용하기 전에 어느 시점에서 &lt;code&gt;configure()&lt;/code&gt; 를 호출 &lt;em&gt;해야합니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="4fdba98bf4c4fe90941820a9cac473eb87b6acfa" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re not that familiar with Git, you can always find out more about its commands (once it&amp;rsquo;s installed) by typing &lt;code&gt;git help&lt;/code&gt; into the command line.</source>
          <target state="translated">Git에 익숙하지 않다면, &lt;code&gt;git help&lt;/code&gt; 를 명령 행 에 입력하여 명령에 대해 더 많은 정보를 찾을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="8f2ea50eab7b004cc616e97a7e545f78a1430a05" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re not using the Django test runner, you may need to also ensure that any console output is not captured which would hide deprecation warnings. For example, if you use &lt;a href=&quot;https://pytest.org/&quot;&gt;pytest&lt;/a&gt;:</source>
          <target state="translated">Django 테스트 러너를 사용하지 않는 경우 사용 중단 경고를 숨길 콘솔 출력이 캡처되지 않았는지 확인해야 할 수도 있습니다. 예를 들어, &lt;a href=&quot;https://pytest.org/&quot;&gt;pytest&lt;/a&gt; 를 사용하는 경우 :</target>
        </trans-unit>
        <trans-unit id="336e08309a7a860fad0714de0146cb1df14fc063" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re not using the default project template, here are the requirements:</source>
          <target state="translated">기본 프로젝트 템플릿을 사용하지 않는 경우 요구 사항은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="65ea4d648599b2fb37f6f7e76db2905fce405c7f" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re not using the vanilla sitemap view &amp;ndash; for example, if it&amp;rsquo;s wrapped with a caching decorator &amp;ndash; you must name your sitemap view and pass &lt;code&gt;sitemap_url_name&lt;/code&gt; to the index view:</source>
          <target state="translated">바닐라 사이트 맵보기를 사용하지 않는 경우 (예 : 캐싱 데코레이터로 랩핑 된 경우) 사이트 맵보기의 이름을 지정하고 &lt;code&gt;sitemap_url_name&lt;/code&gt; 을 색인보기에 전달해야합니다 .</target>
        </trans-unit>
        <trans-unit id="a8c1d92ca93227fb6dd5eeedd2d2fb7fc729ef48" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re on Windows, put the drive letter at the beginning of the path, like this:</source>
          <target state="translated">Windows를 사용하는 경우 다음과 같이 경로 시작 부분에 드라이브 문자를 넣으십시오.</target>
        </trans-unit>
        <trans-unit id="4fae52cace337e4f280328a49b626c77ab0c7b45" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re overriding &lt;code&gt;get_queryset()&lt;/code&gt; on your manager, be sure to either call the method on the parent (using &lt;code&gt;super()&lt;/code&gt;) or do the appropriate handling of the &lt;code&gt;_db&lt;/code&gt; attribute on the manager (a string containing the name of the database to use).</source>
          <target state="translated">관리자에서 &lt;code&gt;get_queryset()&lt;/code&gt; 을 재정의 하는 경우 상위에서 메소드를 호출하거나 ( &lt;code&gt;super()&lt;/code&gt; ) 관리자 에서 &lt;code&gt;_db&lt;/code&gt; 속성을 적절히 처리해야합니다 (데이터베이스 이름이 포함 된 문자열). 사용하다).</target>
        </trans-unit>
        <trans-unit id="f1a843504a97e80d5cb600f4100e8e00a5e36193" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re registering &lt;a href=&quot;signals#module-django.db.models.signals&quot;&gt;&lt;code&gt;model signals&lt;/code&gt;&lt;/a&gt;, you can refer to the sender by its string label instead of using the model class itself.</source>
          <target state="translated">&lt;a href=&quot;signals#module-django.db.models.signals&quot;&gt; &lt;code&gt;model signals&lt;/code&gt; &lt;/a&gt; 등록 하는 경우 모델 클래스 자체를 사용하는 대신 문자열 레이블로 발신자를 참조 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7ad1460f336e480b534127419cefa394fd978f41" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re saving a file on a &lt;a href=&quot;../../ref/models/instances#django.db.models.Model&quot;&gt;&lt;code&gt;Model&lt;/code&gt;&lt;/a&gt; with a &lt;a href=&quot;../../ref/models/fields#django.db.models.FileField&quot;&gt;&lt;code&gt;FileField&lt;/code&gt;&lt;/a&gt;, using a &lt;a href=&quot;../forms/modelforms#django.forms.ModelForm&quot;&gt;&lt;code&gt;ModelForm&lt;/code&gt;&lt;/a&gt; makes this process much easier. The file object will be saved to the location specified by the &lt;a href=&quot;../../ref/models/fields#django.db.models.FileField.upload_to&quot;&gt;&lt;code&gt;upload_to&lt;/code&gt;&lt;/a&gt; argument of the corresponding &lt;a href=&quot;../../ref/models/fields#django.db.models.FileField&quot;&gt;&lt;code&gt;FileField&lt;/code&gt;&lt;/a&gt; when calling &lt;code&gt;form.save()&lt;/code&gt;:</source>
          <target state="translated">당신은에있는 파일에 저장하는 경우 &lt;a href=&quot;../../ref/models/instances#django.db.models.Model&quot;&gt; &lt;code&gt;Model&lt;/code&gt; &lt;/a&gt; A를 &lt;a href=&quot;../../ref/models/fields#django.db.models.FileField&quot;&gt; &lt;code&gt;FileField&lt;/code&gt; 와를&lt;/a&gt; 사용하여 A, &lt;a href=&quot;../forms/modelforms#django.forms.ModelForm&quot;&gt; &lt;code&gt;ModelForm&lt;/code&gt; 를&lt;/a&gt; 이 과정이 훨씬 쉬워집니다. &lt;code&gt;form.save()&lt;/code&gt; 호출 할 때 파일 객체는 해당 &lt;a href=&quot;../../ref/models/fields#django.db.models.FileField&quot;&gt; &lt;code&gt;FileField&lt;/code&gt; &lt;/a&gt; 의 &lt;a href=&quot;../../ref/models/fields#django.db.models.FileField.upload_to&quot;&gt; &lt;code&gt;upload_to&lt;/code&gt; &lt;/a&gt; 인수로 지정된 위치에 저장됩니다 .</target>
        </trans-unit>
        <trans-unit id="bedad35c511cec1744a3555151947dfea12f66f1" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re serializing data (for example, when generating &lt;a href=&quot;../../topics/testing/tools#django.test.TransactionTestCase.fixtures&quot;&gt;&lt;code&gt;fixtures&lt;/code&gt;&lt;/a&gt;) from a model that implements generic relations, you should probably be using a natural key to uniquely identify related &lt;a href=&quot;#django.contrib.contenttypes.models.ContentType&quot;&gt;&lt;code&gt;ContentType&lt;/code&gt;&lt;/a&gt; objects. See &lt;a href=&quot;../../topics/serialization#topics-serialization-natural-keys&quot;&gt;natural keys&lt;/a&gt; and &lt;a href=&quot;../django-admin#cmdoption-dumpdata-natural-foreign&quot;&gt;&lt;code&gt;dumpdata --natural-foreign&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">일반 관계를 구현하는 모델에서 데이터를 직렬화하는 경우 (예를 들어, &lt;a href=&quot;../../topics/testing/tools#django.test.TransactionTestCase.fixtures&quot;&gt; &lt;code&gt;fixtures&lt;/code&gt; &lt;/a&gt; 생성시 ), 관련 &lt;a href=&quot;#django.contrib.contenttypes.models.ContentType&quot;&gt; &lt;code&gt;ContentType&lt;/code&gt; &lt;/a&gt; 오브젝트 를 고유하게 식별하기 위해 자연 키를 사용해야 합니다. 자세한 정보는 &lt;a href=&quot;../../topics/serialization#topics-serialization-natural-keys&quot;&gt;자연 키&lt;/a&gt; 및 &lt;a href=&quot;../django-admin#cmdoption-dumpdata-natural-foreign&quot;&gt; &lt;code&gt;dumpdata --natural-foreign&lt;/code&gt; &lt;/a&gt; 자연 외부) 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="11eb2a40cd729d4d12c805c9535dc58c68ec956d" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re starting a new project, it&amp;rsquo;s highly recommended to set up a custom user model, even if the default &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User&quot;&gt;&lt;code&gt;User&lt;/code&gt;&lt;/a&gt; model is sufficient for you. This model behaves identically to the default user model, but you&amp;rsquo;ll be able to customize it in the future if the need arises:</source>
          <target state="translated">새 프로젝트를 시작하는 경우 기본 &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User&quot;&gt; &lt;code&gt;User&lt;/code&gt; &lt;/a&gt; 모델로 충분 하더라도 사용자 정의 사용자 모델을 설정하는 것이 좋습니다 . 이 모델은 기본 사용자 모델과 동일하게 작동하지만 필요에 따라 나중에 사용자 정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="48a25be3e80caa082a172422daae21775a104668" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re subclassing an existing model (perhaps something from another application entirely) and want each model to have its own database table, &lt;a href=&quot;#multi-table-inheritance&quot;&gt;Multi-table inheritance&lt;/a&gt; is the way to go.</source>
          <target state="translated">기존 모델 (아마도 다른 응용 프로그램에서 온 것)을 서브 클래 싱하고 각 모델에 고유 한 데이터베이스 테이블을 갖기를 원한다면 &lt;a href=&quot;#multi-table-inheritance&quot;&gt;다중 테이블 상속&lt;/a&gt; 이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="749f5754bf6064aeadce7af0aa572b7f5cd04a43" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re synchronizing content types to more than one database, be aware that their primary keys may not match across databases. This may result in data corruption or data loss.</source>
          <target state="translated">콘텐츠 형식을 둘 이상의 데이터베이스와 동기화하는 경우 기본 키가 데이터베이스간에 일치하지 않을 수 있습니다. 데이터가 손상되거나 데이터가 손실 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f6fc2fe716bde4fb5cf0628226301f83349d64f4" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re testing a multiple database configuration with primary/replica (referred to as master/slave by some databases) replication, this strategy of creating test databases poses a problem. When the test databases are created, there won&amp;rsquo;t be any replication, and as a result, data created on the primary won&amp;rsquo;t be seen on the replica.</source>
          <target state="translated">기본 / 복제본 (일부 데이터베이스에서는 마스터 / 슬레이브라고 함) 복제를 사용하여 다중 데이터베이스 구성을 테스트하는 경우 테스트 데이터베이스 작성 전략에 문제가 있습니다. 테스트 데이터베이스를 만들면 복제가 수행되지 않으므로 기본 데이터베이스에서 생성 된 데이터는 복제본에 표시되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="7a5e6b4700226ab4c476a2e5c6dee860df741084" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re upgrading from South, this is basically the South pattern as an operation - one or two methods for forwards and backwards, with an ORM and schema operations available. Most of the time, you should be able to translate the &lt;code&gt;orm.Model&lt;/code&gt; or &lt;code&gt;orm[&quot;appname&quot;, &quot;Model&quot;]&lt;/code&gt; references from South directly into &lt;code&gt;apps.get_model(&quot;appname&quot;, &quot;Model&quot;)&lt;/code&gt; references here and leave most of the rest of the code unchanged for data migrations. However, &lt;code&gt;apps&lt;/code&gt; will only have references to models in the current app unless migrations in other apps are added to the migration&amp;rsquo;s dependencies.</source>
          <target state="translated">South에서 업그레이드하는 경우 이는 기본적으로 South 패턴이며, ORM 및 스키마 작업을 사용할 수있는 하나 또는 두 개의 앞뒤 방법입니다. 대부분의 경우 &lt;code&gt;orm.Model&lt;/code&gt; 에서 orm.Model 또는 &lt;code&gt;orm[&quot;appname&quot;, &quot;Model&quot;]&lt;/code&gt; 참조를 여기에 &lt;code&gt;apps.get_model(&quot;appname&quot;, &quot;Model&quot;)&lt;/code&gt; 참조 로 직접 변환 하고 대부분을 남겨 둘 수 있습니다. 나머지 코드는 데이터 마이그레이션을 위해 변경되지 않았습니다. 그러나 &lt;code&gt;apps&lt;/code&gt; 다른 애플리케이션의 마이그레이션은 마이그레이션의 종속성을 추가하지 않는 한은 현재 응용 프로그램의 모델에 대한 참조를해야합니다.</target>
        </trans-unit>
        <trans-unit id="dd100d30c9413b8bcf0a641346e7fe8e8d78916b" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re upgrading through more than one feature version (e.g. 2.0 to 2.2), it&amp;rsquo;s usually easier to upgrade through each feature release incrementally (2.0 to 2.1 to 2.2) rather than to make all the changes for each feature release at once. For each feature release, use the latest patch release (e.g. for 2.1, use 2.1.15).</source>
          <target state="translated">둘 이상의 기능 버전 (예 : 2.0-2.2)을 통해 업그레이드하는 경우 각 기능 릴리스에 대한 모든 변경 사항을 한 번에 변경하지 않고 일반적으로 각 기능 릴리스를 통해 점진적으로 업그레이드하는 것이 더 쉽습니다 (2.0-2.1-2.2). 각 기능 릴리스마다 최신 패치 릴리스를 사용하십시오 (예 : 2.1의 경우 2.1.15 사용).</target>
        </trans-unit>
        <trans-unit id="c0a30d48cf1c939c8e9ed571529055414a3d67b6" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using &amp;ldquo;Rock &amp;rsquo;n&amp;rsquo; roll&amp;rdquo; in a project called &lt;code&gt;anthology&lt;/code&gt;, but you want it to show up as &amp;ldquo;Jazz Manouche&amp;rdquo; instead, you can provide your own configuration:</source>
          <target state="translated">&lt;code&gt;anthology&lt;/code&gt; 라는 프로젝트에서 &quot;Rock ' n'roll&quot;을 사용하지만 대신 &quot;Jazz Manouche&quot;로 표시하려는 경우 고유 한 구성을 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="481f4f1b70a903de3297e01b947b9f2c4871b7fa" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using &lt;a href=&quot;../topics/http/sessions#cached-sessions-backend&quot;&gt;cache-based session storage&lt;/a&gt;, this selects the cache to use.</source>
          <target state="translated">당신이 사용하는 경우 &lt;a href=&quot;../topics/http/sessions#cached-sessions-backend&quot;&gt;캐시 기반의 세션 스토리지를&lt;/a&gt; ,이 선택은 캐시를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="aeeb2f9285f5f42da4ca38d644da7b9668702942" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using AngularJS 1.1.3 and newer, it&amp;rsquo;s sufficient to configure the &lt;code&gt;$http&lt;/code&gt; provider with the cookie and header names:</source>
          <target state="translated">AngularJS 1.1.3 이상을 사용하는 경우 쿠키 및 헤더 이름으로 &lt;code&gt;$http&lt;/code&gt; 공급자 를 구성하면 충분 합니다.</target>
        </trans-unit>
        <trans-unit id="b71dafc0a9ca6cc7e9afc06dfb5f48ffeac44f3e" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using Django&amp;rsquo;s &lt;a href=&quot;testing/index&quot;&gt;testing framework&lt;/a&gt; to test database queries, Django will need permission to create a test database.</source>
          <target state="translated">Django의 &lt;a href=&quot;testing/index&quot;&gt;테스트 프레임 워크&lt;/a&gt; 를 사용하여 데이터베이스 쿼리를 테스트하는 경우 Django는 테스트 데이터베이스를 만들 수있는 권한이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="9944ee7dd34baf50152dd56fcdc484819ead5962" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using Linux or MacOS and install both &lt;a href=&quot;https://pypi.org/project/pywatchman/&quot;&gt;pywatchman&lt;/a&gt; and the &lt;a href=&quot;https://facebook.github.io/watchman/&quot;&gt;Watchman&lt;/a&gt; service, kernel signals will be used to autoreload the server (rather than polling file modification timestamps each second). This offers better performance on large projects, reduced response time after code changes, more robust change detection, and a reduction in power usage. Django supports &lt;code&gt;pywatchman&lt;/code&gt; 1.2.0 and higher.</source>
          <target state="translated">Linux 또는 MacOS를 사용하고 &lt;a href=&quot;https://pypi.org/project/pywatchman/&quot;&gt;pywatchman&lt;/a&gt; 과 &lt;a href=&quot;https://facebook.github.io/watchman/&quot;&gt;Watchman&lt;/a&gt; 서비스를 모두 설치하는 경우 커널 신호를 사용하여 서버를 자동으로 다시로드합니다 (매초마다 파일 수정 타임 스탬프를 폴링하지 않음). 이를 통해 대규모 프로젝트에서 더 나은 성능, 코드 변경 후 응답 시간 단축,보다 강력한 변경 감지 및 전력 사용량 감소를 제공합니다. Django는 &lt;code&gt;pywatchman&lt;/code&gt; 1.2.0 이상을 지원합니다 .</target>
        </trans-unit>
        <trans-unit id="4e53baf0d0f56b77511625581c99cc7d9191b439" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using Memcached, consider using &lt;a href=&quot;../../topics/http/sessions#cached-sessions-backend&quot;&gt;cached sessions&lt;/a&gt; to improve performance.</source>
          <target state="translated">Memcached를 사용하는 경우 &lt;a href=&quot;../../topics/http/sessions#cached-sessions-backend&quot;&gt;캐시 된 세션&lt;/a&gt; 을 사용하여 성능을 향상시키는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="5123ae3f1eac47dcb57f53aa5e34a747a949d8e9" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using MySQL and this value &lt;em&gt;doesn&amp;rsquo;t&lt;/em&gt; start with a forward slash, then this value is assumed to be the host.</source>
          <target state="translated">MySQL을 사용 중이고이 값 &lt;em&gt;이&lt;/em&gt; 슬래시로 시작 &lt;em&gt;하지 않으면&lt;/em&gt; 이 값이 호스트 인 것으로 간주됩니다.</target>
        </trans-unit>
        <trans-unit id="5c1359456437f291b8b48eb0bceaeca46fd2af3d" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using MySQL or MariaDB, you&amp;rsquo;ll need a &lt;a href=&quot;../ref/databases#mysql-db-api-drivers&quot;&gt;DB API driver&lt;/a&gt; like &lt;code&gt;mysqlclient&lt;/code&gt;. See &lt;a href=&quot;../ref/databases#mysql-notes&quot;&gt;notes for the MySQL backend&lt;/a&gt; for details.</source>
          <target state="translated">MySQL 또는 MariaDB를 사용하는 경우 &lt;code&gt;mysqlclient&lt;/code&gt; 와 같은 &lt;a href=&quot;../ref/databases#mysql-db-api-drivers&quot;&gt;DB API 드라이버&lt;/a&gt; 가 필요합니다 . 자세한 내용 &lt;a href=&quot;../ref/databases#mysql-notes&quot;&gt;은 MySQL 백엔드 노트를&lt;/a&gt; 참조 하십시오.</target>
        </trans-unit>
        <trans-unit id="bf9bdf3f5fa10aff2cab1f17aaffdcca0b623596" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using MySQL, the following checks will be performed:</source>
          <target state="translated">MySQL을 사용하는 경우 다음 검사가 수행됩니다.</target>
        </trans-unit>
        <trans-unit id="228adccc2a150114c8cffe4456bca9a36f683fa7" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using MySQL, your tables may or may not support transactions; it depends on your MySQL version and the table types you&amp;rsquo;re using. (By &amp;ldquo;table types,&amp;rdquo; we mean something like &amp;ldquo;InnoDB&amp;rdquo; or &amp;ldquo;MyISAM&amp;rdquo;.) MySQL transaction peculiarities are outside the scope of this article, but the MySQL site has &lt;a href=&quot;https://dev.mysql.com/doc/refman/en/sql-syntax-transactions.html&quot;&gt;information on MySQL transactions&lt;/a&gt;.</source>
          <target state="translated">MySQL을 사용하는 경우 테이블이 트랜잭션을 지원하거나 지원하지 않을 수 있습니다. MySQL 버전과 사용중인 테이블 유형에 따라 다릅니다. &quot;테이블 유형&quot;은 &quot;InnoDB&quot;또는 &quot;MyISAM&quot;과 같은 것을 의미합니다. MySQL 트랜잭션 특성은이 기사의 범위를 벗어나지 만 MySQL 사이트에는 &lt;a href=&quot;https://dev.mysql.com/doc/refman/en/sql-syntax-transactions.html&quot;&gt;MySQL 트랜잭션에 대한 정보가 있습니다&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="a9a0fd540cf9eba9010f1a43a66ed09c582deee1" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using Oracle, you&amp;rsquo;ll need a copy of &lt;a href=&quot;https://oracle.github.io/python-cx_Oracle/&quot;&gt;cx_Oracle&lt;/a&gt;, but please read the &lt;a href=&quot;../ref/databases#oracle-notes&quot;&gt;notes for the Oracle backend&lt;/a&gt; for details regarding supported versions of both Oracle and &lt;code&gt;cx_Oracle&lt;/code&gt;.</source>
          <target state="translated">Oracle을 사용하는 경우 &lt;a href=&quot;https://oracle.github.io/python-cx_Oracle/&quot;&gt;cx_Oracle&lt;/a&gt; 사본이 필요 하지만 지원되는 Oracle 및 &lt;code&gt;cx_Oracle&lt;/code&gt; 버전에 대한 자세한 내용 &lt;a href=&quot;../ref/databases#oracle-notes&quot;&gt;은 Oracle 백엔드에&lt;/a&gt; 대한 참고 사항을 읽으십시오 .</target>
        </trans-unit>
        <trans-unit id="92d54d481c5d03a9b0ca88a5f50b8ed2498b6ef7" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using PostgreSQL, Django provides &lt;a href=&quot;../../ref/contrib/postgres/search&quot;&gt;a selection of database specific tools&lt;/a&gt; to allow you to leverage more complex querying options. Other databases have different selections of tools, possibly via plugins or user-defined functions. Django doesn&amp;rsquo;t include any support for them at this time. We&amp;rsquo;ll use some examples from PostgreSQL to demonstrate the kind of functionality databases may have.</source>
          <target state="translated">PostgreSQL을 사용하는 경우 Django는 보다 복잡한 쿼리 옵션을 활용할 수 &lt;a href=&quot;../../ref/contrib/postgres/search&quot;&gt;있는 다양한 데이터베이스 관련 도구&lt;/a&gt; 를 제공합니다. 다른 데이터베이스는 플러그인 또는 사용자 정의 함수를 통해 다른 도구를 선택할 수 있습니다. Django는 현재 해당 기능을 지원하지 않습니다. PostgreSQL의 몇 가지 예를 사용하여 데이터베이스의 기능 종류를 보여줄 것입니다.</target>
        </trans-unit>
        <trans-unit id="2740b6405cd59234c5607e21afdcdaccce94c79c" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using PostgreSQL, by default (empty &lt;a href=&quot;#std:setting-HOST&quot;&gt;&lt;code&gt;HOST&lt;/code&gt;&lt;/a&gt;), the connection to the database is done through UNIX domain sockets (&amp;lsquo;local&amp;rsquo; lines in &lt;code&gt;pg_hba.conf&lt;/code&gt;). If your UNIX domain socket is not in the standard location, use the same value of &lt;code&gt;unix_socket_directory&lt;/code&gt; from &lt;code&gt;postgresql.conf&lt;/code&gt;. If you want to connect through TCP sockets, set &lt;a href=&quot;#std:setting-HOST&quot;&gt;&lt;code&gt;HOST&lt;/code&gt;&lt;/a&gt; to &amp;lsquo;localhost&amp;rsquo; or &amp;lsquo;127.0.0.1&amp;rsquo; (&amp;lsquo;host&amp;rsquo; lines in &lt;code&gt;pg_hba.conf&lt;/code&gt;). On Windows, you should always define &lt;a href=&quot;#std:setting-HOST&quot;&gt;&lt;code&gt;HOST&lt;/code&gt;&lt;/a&gt;, as UNIX domain sockets are not available.</source>
          <target state="translated">PostgreSQL을 사용하는 경우 기본적으로 (빈 &lt;a href=&quot;#std:setting-HOST&quot;&gt; &lt;code&gt;HOST&lt;/code&gt; &lt;/a&gt; ) 데이터베이스에 대한 연결은 UNIX 도메인 소켓 ( &lt;code&gt;pg_hba.conf&lt;/code&gt; 의 'local'줄)을 통해 수행됩니다 . 유닉스 도메인 소켓은 표준 위치에없는 경우, 동일한 값을 사용 &lt;code&gt;unix_socket_directory&lt;/code&gt; 을 에서 &lt;code&gt;postgresql.conf&lt;/code&gt; 의 . TCP 소켓을 통해 연결하려면 &lt;a href=&quot;#std:setting-HOST&quot;&gt; &lt;code&gt;HOST&lt;/code&gt; &lt;/a&gt; 를 'localhost'또는 '127.0.0.1'( &lt;code&gt;pg_hba.conf&lt;/code&gt; 의 'host'줄)로 설정 하십시오. Windows에서는 UNIX 도메인 소켓을 사용할 수 없으므로 항상 &lt;a href=&quot;#std:setting-HOST&quot;&gt; &lt;code&gt;HOST&lt;/code&gt; 를&lt;/a&gt; 정의해야 합니다.</target>
        </trans-unit>
        <trans-unit id="dd5ae27cbc04f18050df1d431f5fb25a9fbe2c53" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using PostgreSQL, the sequence associated with the primary key might need to be updated; see &lt;a href=&quot;../databases#manually-specified-autoincrement-pk&quot;&gt;Manually-specifying values of auto-incrementing primary keys&lt;/a&gt;.</source>
          <target state="translated">PostgreSQL을 사용하는 경우 기본 키와 관련된 시퀀스를 업데이트해야 할 수 있습니다. &lt;a href=&quot;../databases#manually-specified-autoincrement-pk&quot;&gt;자동 증가 기본 키 값 수동 지정을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="17609ee45cfd691775da7000d116f264e7657fcb" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using PostgreSQL, you&amp;rsquo;ll need the &lt;a href=&quot;https://www.psycopg.org/&quot;&gt;psycopg2&lt;/a&gt; package. Refer to the &lt;a href=&quot;../ref/databases#postgresql-notes&quot;&gt;PostgreSQL notes&lt;/a&gt; for further details.</source>
          <target state="translated">PostgreSQL을 사용하는 경우 &lt;a href=&quot;https://www.psycopg.org/&quot;&gt;psycopg2&lt;/a&gt; 패키지 가 필요합니다 . 자세한 내용은 &lt;a href=&quot;../ref/databases#postgresql-notes&quot;&gt;PostgreSQL 노트&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="81dfb5f0dc2391f3e82b1355d3ca6abc305f8d47" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using Postgres, Oracle, or MySQL with InnoDB, this is enforced at the database integrity level &amp;ndash; database level key constraints prevent the creation of relations that can&amp;rsquo;t be validated.</source>
          <target state="translated">InnoDB와 함께 Postgres, Oracle 또는 MySQL을 사용하는 경우 데이터베이스 무결성 수준에서 적용됩니다. 데이터베이스 수준 키 제약 조건으로 확인할 수없는 관계를 만들 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="65a65316c0bd24040960220c94a678789b0f6a2a" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using SQLite you might want to read the &lt;a href=&quot;../ref/databases#sqlite-notes&quot;&gt;SQLite backend notes&lt;/a&gt;.</source>
          <target state="translated">SQLite를 사용하는 경우 &lt;a href=&quot;../ref/databases#sqlite-notes&quot;&gt;SQLite 백엔드 노트&lt;/a&gt; 를 읽으십시오 .</target>
        </trans-unit>
        <trans-unit id="334c33a340c62565a0dda48701d8cc481ae24464" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using SQLite, you don&amp;rsquo;t need to create anything beforehand - the database file will be created automatically when it is needed.</source>
          <target state="translated">SQLite를 사용하는 경우 사전에 아무것도 만들 필요가 없습니다. 데이터베이스 파일은 필요할 때 자동으로 만들어집니다.</target>
        </trans-unit>
        <trans-unit id="dd02ebc4205a2c5d09b790615c39301f2afffdb4" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using Windows and need to install the GNU gettext utilities so &lt;a href=&quot;../../ref/django-admin#django-admin-compilemessages&quot;&gt;&lt;code&gt;django-admin compilemessages&lt;/code&gt;&lt;/a&gt; works see &lt;a href=&quot;#gettext-on-windows&quot;&gt;gettext on Windows&lt;/a&gt; for more information.</source>
          <target state="translated">Windows를 사용하고 있고 GNU gettext 유틸리티를 설치해야 &lt;a href=&quot;../../ref/django-admin#django-admin-compilemessages&quot;&gt; &lt;code&gt;django-admin compilemessages&lt;/code&gt; 가&lt;/a&gt; 작동 하면 자세한 정보 &lt;a href=&quot;#gettext-on-windows&quot;&gt;는 Windows의 gettext&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="7c2566945d2ca024ddf78f5b4ec709f5e3b7bae3" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using Windows and need to install the GNU gettext utilities so &lt;a href=&quot;../../ref/django-admin#django-admin-makemessages&quot;&gt;&lt;code&gt;makemessages&lt;/code&gt;&lt;/a&gt; works, see &lt;a href=&quot;#gettext-on-windows&quot;&gt;gettext on Windows&lt;/a&gt; for more information.</source>
          <target state="translated">Windows를 사용 &lt;a href=&quot;../../ref/django-admin#django-admin-makemessages&quot;&gt; &lt;code&gt;makemessages&lt;/code&gt; &lt;/a&gt; 작동 하도록 GNU gettext 유틸리티를 설치해야하는 경우 자세한 정보 &lt;a href=&quot;#gettext-on-windows&quot;&gt;는 Windows의 gettext&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="46eb70b42871e7bacf59440c3bae92eb1b4ae4ef" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using a &lt;code&gt;QuerySet&lt;/code&gt; with a very large number of items, requesting high page numbers might be slow on some databases, because the resulting &lt;code&gt;LIMIT&lt;/code&gt;/&lt;code&gt;OFFSET&lt;/code&gt; query needs to count the number of &lt;code&gt;OFFSET&lt;/code&gt; records which takes longer as the page number gets higher.</source>
          <target state="translated">매우 많은 수의 항목 이있는 &lt;code&gt;QuerySet&lt;/code&gt; 을 사용하는 경우 결과 &lt;code&gt;LIMIT&lt;/code&gt; / &lt;code&gt;OFFSET&lt;/code&gt; 쿼리 는 페이지 번호가 높아질수록 시간이 오래 걸리는 &lt;code&gt;OFFSET&lt;/code&gt; 레코드 수를 계산해야하기 때문에 일부 데이터베이스에서 높은 페이지 번호를 요청하는 것이 느려질 수 있습니다. .</target>
        </trans-unit>
        <trans-unit id="70b3d5d4568f4fd39cfd395329f1734d8e532b16" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using a cache, connection parameters may be different in development and in production. Django defaults to per-process &lt;a href=&quot;../../topics/cache#local-memory-caching&quot;&gt;local-memory caching&lt;/a&gt; which may not be desirable.</source>
          <target state="translated">캐시를 사용하는 경우 연결 매개 변수는 개발 및 프로덕션에서 다를 수 있습니다. Django 는 바람직하지 않은 프로세스 별 &lt;a href=&quot;../../topics/cache#local-memory-caching&quot;&gt;로컬 메모리 캐싱&lt;/a&gt; 을 기본값으로합니다 .</target>
        </trans-unit>
        <trans-unit id="fc3ed93f28f451dc5be072e0a09e76c785745981" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using a database backend that uses a different SQL syntax for a certain function, you can add support for it by monkey patching a new method onto the function&amp;rsquo;s class.</source>
          <target state="translated">특정 함수에 대해 다른 SQL 구문을 사용하는 데이터베이스 백엔드를 사용하는 경우, 함수의 클래스에 새 메소드를 패치하여 원숭이를 지원할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="42525c03b5426673012c5e443de921b7d2a48312" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using a database besides SQLite, make sure you&amp;rsquo;ve created a database by this point. Do that with &amp;ldquo;&lt;code&gt;CREATE DATABASE database_name;&lt;/code&gt;&amp;rdquo; within your database&amp;rsquo;s interactive prompt.</source>
          <target state="translated">SQLite 이외의 데이터베이스를 사용하는 경우이 시점에서 데이터베이스를 작성했는지 확인하십시오. &amp;ldquo; &lt;code&gt;CREATE DATABASE database_name;&lt;/code&gt; &amp;rdquo;를 데이터베이스의 대화식 프롬프트에서 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="3bfd941888efa436ecc6ede3006e996113f463ad" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using a different authentication backend, this method may require different credentials. It requires whichever credentials are required by your backend&amp;rsquo;s &lt;code&gt;authenticate()&lt;/code&gt; method.</source>
          <target state="translated">다른 인증 백엔드를 사용하는 경우이 방법에는 다른 자격 증명이 필요할 수 있습니다. 백엔드의 &lt;code&gt;authenticate()&lt;/code&gt; 메서드에 필요한 자격 증명이 필요합니다 .</target>
        </trans-unit>
        <trans-unit id="05764d13eeb945fede1a5e8927e7f8a5ab301058" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using a hosting service and can&amp;rsquo;t change your server&amp;rsquo;s default storage engine, you have a couple of options.</source>
          <target state="translated">호스팅 서비스를 사용하고 있고 서버의 기본 저장소 엔진을 변경할 수없는 경우 몇 가지 옵션이 있습니다.</target>
        </trans-unit>
        <trans-unit id="5a353593d2d8e5b736818eb171577ee093269dde" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using an &lt;a href=&quot;#django.contrib.postgres.fields.ArrayField&quot;&gt;&lt;code&gt;ArrayField&lt;/code&gt;&lt;/a&gt; of &lt;code&gt;CIText&lt;/code&gt; fields, you must add &lt;code&gt;'django.contrib.postgres'&lt;/code&gt; in your &lt;a href=&quot;../../settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt;, otherwise field values will appear as strings like &lt;code&gt;'{thoughts,django}'&lt;/code&gt;.</source>
          <target state="translated">당신이 사용하는 경우 &lt;a href=&quot;#django.contrib.postgres.fields.ArrayField&quot;&gt; &lt;code&gt;ArrayField&lt;/code&gt; &lt;/a&gt; 의 &lt;code&gt;CIText&lt;/code&gt; 의 필드를, 당신은 추가해야합니다 &lt;code&gt;'django.contrib.postgres'&lt;/code&gt; 당신의 &lt;a href=&quot;../../settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt; 그렇지 않으면 필드 값이 같은 문자열로 나타납니다, &lt;code&gt;'{thoughts,django}'&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="61e7c53b9fd063f957398fb1f4320dfd4e2a9584" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using an unofficial 3rd party backend, please consult the documentation provided for any additional requirements.</source>
          <target state="translated">비공식 타사 백엔드를 사용하는 경우 추가 요구 사항은 제공된 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="fb1e7f7e52bbcd15afd7dc412eee86df9c3f70b8" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using components of Django &amp;ldquo;standalone&amp;rdquo; &amp;ndash; for example, writing a Python script which loads some Django templates and renders them, or uses the ORM to fetch some data &amp;ndash; there&amp;rsquo;s one more step you&amp;rsquo;ll need in addition to configuring settings.</source>
          <target state="translated">Django&amp;ldquo;독립형&amp;rdquo;구성 요소를 사용하는 경우 (예 : 일부 Django 템플릿을로드하고 렌더링하거나 ORM을 사용하여 데이터를 가져 오는 Python 스크립트 작성) 설정 구성 외에 추가 단계가 필요합니다. .</target>
        </trans-unit>
        <trans-unit id="6c2160405a6776b9843f65c896f4c6a76b70b42b" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using file-based session storage, this sets the directory in which Django will store session data. When the default value (&lt;code&gt;None&lt;/code&gt;) is used, Django will use the standard temporary directory for the system.</source>
          <target state="translated">파일 기반 세션 스토리지를 사용하는 경우 Django가 세션 데이터를 저장할 디렉토리를 설정합니다. 기본값 ( &lt;code&gt;None&lt;/code&gt; )을 사용하면 Django는 시스템의 표준 임시 디렉토리를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="bdf2864962c6854deb565415dc128e418e85409e" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using middleware, you can do that. Middleware provides multiple opportunities to process a response on exit from a view. If you put behavior in the response middleware, it&amp;rsquo;s guaranteed to execute after template rendering has taken place.</source>
          <target state="translated">미들웨어를 사용하는 경우 그렇게 할 수 있습니다. 미들웨어는보기 종료시 응답을 처리 할 수있는 여러 기회를 제공합니다. 응답 미들웨어에 동작을 넣으면 템플릿 렌더링이 실행 된 후에 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="176b3e53bd5619ca954a6de51573ff4145217e13" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using pagination, you can adapt the &lt;a href=&quot;../../topics/pagination#using-paginator-in-view&quot;&gt;example template from the pagination docs&lt;/a&gt;. Change instances of &lt;code&gt;contacts&lt;/code&gt; in that example template to &lt;code&gt;page_obj&lt;/code&gt;.</source>
          <target state="translated">페이지 매김을 사용 &lt;a href=&quot;../../topics/pagination#using-paginator-in-view&quot;&gt;하는 경우 페이지 매김 문서에서 예제 템플릿을&lt;/a&gt; 조정할 수 있습니다 . 해당 예제 템플릿 의 &lt;code&gt;contacts&lt;/code&gt; 인스턴스 를 &lt;code&gt;page_obj&lt;/code&gt; 로 변경하십시오 .</target>
        </trans-unit>
        <trans-unit id="38126e95e0083d43b4efeedfd50bff85a4f91dfd" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using the &lt;code&gt;django.contrib.sessions.backends.db&lt;/code&gt; backend, each session is a normal Django model. The &lt;code&gt;Session&lt;/code&gt; model is defined in &lt;code&gt;django/contrib/sessions/models.py&lt;/code&gt;. Because it&amp;rsquo;s a normal model, you can access sessions using the normal Django database API:</source>
          <target state="translated">&lt;code&gt;django.contrib.sessions.backends.db&lt;/code&gt; 백엔드를 사용하는 경우 각 세션은 일반적인 장고 모델입니다. &lt;code&gt;Session&lt;/code&gt; 모델에 정의되어 &lt;code&gt;django/contrib/sessions/models.py&lt;/code&gt; . 일반적인 모델이므로 일반적인 Django 데이터베이스 API를 사용하여 세션에 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="50d514d3dd0b830cdb2e92c3b229482ff305cf07" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using the context processor, your template should be rendered with a &lt;code&gt;RequestContext&lt;/code&gt;. Otherwise, ensure &lt;code&gt;messages&lt;/code&gt; is available to the template context.</source>
          <target state="translated">컨텍스트 프로세서를 사용하는 경우 템플릿은 &lt;code&gt;RequestContext&lt;/code&gt; 로 렌더링되어야합니다 . 그렇지 않으면 템플릿 컨텍스트에서 &lt;code&gt;messages&lt;/code&gt; 를 사용할 수 있는지 확인 하십시오.</target>
        </trans-unit>
        <trans-unit id="526e48b58228f65bfc33a8bdc8a0463e6592108c" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using the same HTML for each of your form fields, you can reduce duplicate code by looping through each field in turn using a &lt;code&gt;{% for %}&lt;/code&gt; loop:</source>
          <target state="translated">각 양식 필드에 동일한 HTML을 사용하는 경우 &lt;code&gt;{% for %}&lt;/code&gt; 루프 를 사용하여 각 필드를 차례로 반복하여 중복 코드를 줄일 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="71b2f6560e3b81f86c2f6fbf8c0b3fd58fd8164f" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re wrestling with a particular problem, start with the &lt;a href=&quot;#time-zones-faq&quot;&gt;time zone FAQ&lt;/a&gt;.</source>
          <target state="translated">특정 문제로 씨름하고 있다면 &lt;a href=&quot;#time-zones-faq&quot;&gt;시간대 FAQ로&lt;/a&gt; 시작하십시오 .</target>
        </trans-unit>
        <trans-unit id="033bd6d75929d6d7705838d0e26ce74b89b3cf6f" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re writing a pluggable application that&amp;rsquo;s expected to work independently of the value of &lt;a href=&quot;../../ref/settings#std:setting-USE_TZ&quot;&gt;&lt;code&gt;USE_TZ&lt;/code&gt;&lt;/a&gt;, you may find &lt;a href=&quot;../../ref/utils#django.utils.timezone.now&quot;&gt;&lt;code&gt;django.utils.timezone.now()&lt;/code&gt;&lt;/a&gt; useful. This function returns the current date and time as a naive datetime when &lt;code&gt;USE_TZ = False&lt;/code&gt; and as an aware datetime when &lt;code&gt;USE_TZ = True&lt;/code&gt;. You can add or subtract &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.timedelta&quot;&gt;&lt;code&gt;datetime.timedelta&lt;/code&gt;&lt;/a&gt; as needed.</source>
          <target state="translated">&lt;a href=&quot;../../ref/settings#std:setting-USE_TZ&quot;&gt; &lt;code&gt;USE_TZ&lt;/code&gt; &lt;/a&gt; 값과 독립적으로 작동 할 것으로 예상되는 플러그 가능 응용 프로그램을 작성하는 경우 &lt;a href=&quot;../../ref/utils#django.utils.timezone.now&quot;&gt; &lt;code&gt;django.utils.timezone.now()&lt;/code&gt; &lt;/a&gt; 유용 할 수 있습니다 . 이 함수는 현재 날짜와 시간을 &lt;code&gt;USE_TZ = False&lt;/code&gt; 경우 순진한 날짜 시간으로, &lt;code&gt;USE_TZ = True&lt;/code&gt; 경우 인식하는 날짜 시간으로 반환합니다 . 필요에 따라 &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.timedelta&quot;&gt; &lt;code&gt;datetime.timedelta&lt;/code&gt; &lt;/a&gt; 를 더하거나 뺄 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="1b9ad3f8840feee3141c8778e1865bfb234bef75" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re writing a reusable app (or other piece of code) and want to include messaging functionality, but don&amp;rsquo;t want to require your users to enable it if they don&amp;rsquo;t want to, you may pass an additional keyword argument &lt;code&gt;fail_silently=True&lt;/code&gt; to any of the &lt;code&gt;add_message&lt;/code&gt; family of methods. For example:</source>
          <target state="translated">재사용 가능한 앱 (또는 다른 코드)을 작성하고 메시징 기능을 포함하고 싶지만 사용자가 원하지 않는 경우이를 사용하도록 설정하지 않으려면 추가 키워드 인수 &lt;code&gt;fail_silently=True&lt;/code&gt; 전달할 수 있습니다 = &lt;code&gt;add_message&lt;/code&gt; 계열의 메소드 중 하나에 해당 합니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="84e127f1322ee32bfece7dc5d4283b6cce1c3d07" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re writing a template filter that only expects a string as the first argument, you should use the decorator &lt;code&gt;stringfilter&lt;/code&gt;. This will convert an object to its string value before being passed to your function:</source>
          <target state="translated">문자열을 첫 번째 인수로만 예상하는 템플릿 필터를 작성하는 경우 데코레이터 &lt;code&gt;stringfilter&lt;/code&gt; 를 사용해야합니다 . 함수에 전달되기 전에 객체를 문자열 값으로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="62e93f9276c7d2bf03dab03afbe7a0d01da88a4a" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re writing reusable views or templates, you may not know ahead of time whether your form is a multipart form or not. The &lt;code&gt;is_multipart()&lt;/code&gt; method tells you whether the form requires multipart encoding for submission:</source>
          <target state="translated">재사용 가능한보기 또는 템플릿을 작성하는 경우 양식이 여러 부분으로 구성된 양식인지 여부를 미리 알 수 없습니다. &lt;code&gt;is_multipart()&lt;/code&gt; 메소드는 양식을 제출 다중 인코딩을 필요로하는지 여부를 알려줍니다 :</target>
        </trans-unit>
        <trans-unit id="0b3ccbce78a9deb2e8380cbbbf0c3e8d425150d4" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re writing some code that must handle an unknown model, for example, in a third-party app that implements a generic view, use this manager (or &lt;a href=&quot;#django.db.models.Model._base_manager&quot;&gt;&lt;code&gt;_base_manager&lt;/code&gt;&lt;/a&gt;) rather than assuming the model has an &lt;code&gt;objects&lt;/code&gt; manager.</source>
          <target state="translated">알 수없는 모델을 처리해야하는 일부 코드를 작성하는 경우 (예 : 일반보기를 구현하는 타사 앱 에서) 모델에 &lt;code&gt;objects&lt;/code&gt; 관리자 가 있다고 가정하는 대신 이 관리자 (또는 &lt;a href=&quot;#django.db.models.Model._base_manager&quot;&gt; &lt;code&gt;_base_manager&lt;/code&gt; &lt;/a&gt; )를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="ffa49a02c217a153d3911b777d92a70dad025527" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;ve activated the automatic Django admin interface, you should see a &amp;ldquo;Flatpages&amp;rdquo; section on the admin index page. Edit flatpages as you edit any other object in the system.</source>
          <target state="translated">자동 Django 관리 인터페이스를 활성화 한 경우 관리자 색인 페이지에 &quot;Flatpages&quot;섹션이 표시됩니다. 시스템에서 다른 객체를 편집 할 때 플랫 페이지를 편집하십시오.</target>
        </trans-unit>
        <trans-unit id="8c91814cc038e9087397b1c9d79e06cb53c2998e" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;ve activated the automatic Django admin interface, you should see a &amp;ldquo;Redirects&amp;rdquo; section on the admin index page. Edit redirects as you edit any other object in the system.</source>
          <target state="translated">자동 Django 관리 인터페이스를 활성화 한 경우 관리자 색인 페이지에 &quot;리디렉션&quot;섹션이 표시됩니다. 시스템의 다른 개체를 편집 할 때 리디렉션을 편집하십시오.</target>
        </trans-unit>
        <trans-unit id="746003a32ff1823f7c12c2c3009e4bcdbdada474" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;ve always used naive datetimes, you probably believe that you can convert a datetime to a date by calling its &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.datetime.date&quot;&gt;&lt;code&gt;date()&lt;/code&gt;&lt;/a&gt; method. You also consider that a &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.date&quot;&gt;&lt;code&gt;date&lt;/code&gt;&lt;/a&gt; is a lot like a &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.datetime&quot;&gt;&lt;code&gt;datetime&lt;/code&gt;&lt;/a&gt;, except that it&amp;rsquo;s less accurate.</source>
          <target state="translated">항상 순진한 datetimes를 사용했다면 &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.datetime.date&quot;&gt; &lt;code&gt;date()&lt;/code&gt; &lt;/a&gt; 메서드를 호출하여 datetime을 날짜로 변환 할 수 있다고 생각할 수 있습니다 . 또한 &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.date&quot;&gt; &lt;code&gt;date&lt;/code&gt; &lt;/a&gt; 가 덜 정확하다는 점을 제외하고 &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.datetime&quot;&gt; &lt;code&gt;datetime&lt;/code&gt; &lt;/a&gt; 는 datetime 과 매우 비슷 하다고 생각합니다 .</target>
        </trans-unit>
        <trans-unit id="510f1ae50ede1300d4b2693ad8c71631f7d7fb86" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;ve customized the &lt;a href=&quot;../../settings#std:setting-MIDDLEWARE&quot;&gt;&lt;code&gt;MIDDLEWARE&lt;/code&gt;&lt;/a&gt; setting, &lt;a href=&quot;../../middleware#django.contrib.auth.middleware.AuthenticationMiddleware&quot;&gt;&lt;code&gt;django.contrib.auth.middleware.AuthenticationMiddleware&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../middleware#django.contrib.messages.middleware.MessageMiddleware&quot;&gt;&lt;code&gt;django.contrib.messages.middleware.MessageMiddleware&lt;/code&gt;&lt;/a&gt; must be included.</source>
          <target state="translated">&lt;a href=&quot;../../settings#std:setting-MIDDLEWARE&quot;&gt; &lt;code&gt;MIDDLEWARE&lt;/code&gt; &lt;/a&gt; 설정을 사용자 정의한 경우 &lt;a href=&quot;../../middleware#django.contrib.auth.middleware.AuthenticationMiddleware&quot;&gt; &lt;code&gt;django.contrib.auth.middleware.AuthenticationMiddleware&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../../middleware#django.contrib.messages.middleware.MessageMiddleware&quot;&gt; &lt;code&gt;django.contrib.messages.middleware.MessageMiddleware&lt;/code&gt; &lt;/a&gt; 가 포함되어 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="46537cc51b7d74f1917135d14f86f7f048e20457" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;ve never had to deal with tests before, they can look a little hard to write at first glance. Fortunately, testing is a &lt;em&gt;very&lt;/em&gt; big subject in computer programming, so there&amp;rsquo;s lots of information out there:</source>
          <target state="translated">이전에 테스트를 다뤄 본 적이 없다면 언뜻보기에는 조금 어려워 보일 수 있습니다. 다행히 테스트는 컴퓨터 프로그래밍에서 &lt;em&gt;매우&lt;/em&gt; 큰 주제이므로 많은 정보가 있습니다.</target>
        </trans-unit>
        <trans-unit id="b1fcac0f08f188a490cc866525da1cb739eb8667" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;ve saved an instance to one database, it might be tempting to use &lt;code&gt;save(using=...)&lt;/code&gt; as a way to migrate the instance to a new database. However, if you don&amp;rsquo;t take appropriate steps, this could have some unexpected consequences.</source>
          <target state="translated">인스턴스를 하나의 데이터베이스에 저장 한 경우 인스턴스를 새 데이터베이스로 마이그레이션하는 방법으로 &lt;code&gt;save(using=...)&lt;/code&gt; 를 사용 하고 싶을 수 있습니다 . 그러나 적절한 단계를 수행하지 않으면 예기치 않은 결과가 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e02d2ccf5c1a7f35c124bfd1c3140db6fcf906af" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;ve used the &lt;a href=&quot;../ref/django-admin#django-admin-makemigrations&quot;&gt;&lt;code&gt;makemigrations&lt;/code&gt;&lt;/a&gt; command you&amp;rsquo;ve probably already seen &lt;code&gt;dependencies&lt;/code&gt; in action because auto-created migrations have this defined as part of their creation process.</source>
          <target state="translated">&lt;a href=&quot;../ref/django-admin#django-admin-makemigrations&quot;&gt; &lt;code&gt;makemigrations&lt;/code&gt; &lt;/a&gt; 명령을 사용한 경우 자동 생성 된 마이그레이션에서 생성 프로세스의 일부로 정의 되었기 때문에 이미 &lt;code&gt;dependencies&lt;/code&gt; 있는 것으로 보입니다 .</target>
        </trans-unit>
        <trans-unit id="57c4c61903f21939d1b79448096a5c411639cc93" translate="yes" xml:space="preserve">
          <source>If your &lt;a href=&quot;../../ref/settings#std:setting-AUTH_USER_MODEL&quot;&gt;&lt;code&gt;AUTH_USER_MODEL&lt;/code&gt;&lt;/a&gt; inherits from &lt;a href=&quot;customizing#django.contrib.auth.models.AbstractBaseUser&quot;&gt;&lt;code&gt;AbstractBaseUser&lt;/code&gt;&lt;/a&gt; or implements its own &lt;a href=&quot;customizing#django.contrib.auth.models.AbstractBaseUser.get_session_auth_hash&quot;&gt;&lt;code&gt;get_session_auth_hash()&lt;/code&gt;&lt;/a&gt; method, authenticated sessions will include the hash returned by this function. In the &lt;a href=&quot;customizing#django.contrib.auth.models.AbstractBaseUser&quot;&gt;&lt;code&gt;AbstractBaseUser&lt;/code&gt;&lt;/a&gt; case, this is an HMAC of the password field. Django verifies that the hash in the session for each request matches the one that&amp;rsquo;s computed during the request. This allows a user to log out all of their sessions by changing their password.</source>
          <target state="translated">귀하의 경우 &lt;a href=&quot;../../ref/settings#std:setting-AUTH_USER_MODEL&quot;&gt; &lt;code&gt;AUTH_USER_MODEL&lt;/code&gt; 의&lt;/a&gt; 에서 상속 &lt;a href=&quot;customizing#django.contrib.auth.models.AbstractBaseUser&quot;&gt; &lt;code&gt;AbstractBaseUser&lt;/code&gt; &lt;/a&gt; 또는 구현 자체 &lt;a href=&quot;customizing#django.contrib.auth.models.AbstractBaseUser.get_session_auth_hash&quot;&gt; &lt;code&gt;get_session_auth_hash()&lt;/code&gt; &lt;/a&gt; 메소드는 인증 된 세션이 함수에 의해 반환되는 해시를 포함 할 것이다. 에서 &lt;a href=&quot;customizing#django.contrib.auth.models.AbstractBaseUser&quot;&gt; &lt;code&gt;AbstractBaseUser&lt;/code&gt; 의&lt;/a&gt; 경우,이 암호 필드의 HMAC이다. Django는 각 요청에 대한 세션의 해시가 요청 중에 계산 된 해시와 일치하는지 확인합니다. 이를 통해 사용자는 비밀번호를 변경하여 모든 세션을 로그 아웃 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ff6fb60a475d1cd1de37b15f96dc6b92a8c3143c" translate="yes" xml:space="preserve">
          <source>If your &lt;code&gt;ModelForm&lt;/code&gt; and &lt;code&gt;ModelAdmin&lt;/code&gt; both define an &lt;code&gt;exclude&lt;/code&gt; option then &lt;code&gt;ModelAdmin&lt;/code&gt; takes precedence:</source>
          <target state="translated">귀하의 경우 &lt;code&gt;ModelForm&lt;/code&gt; 및 &lt;code&gt;ModelAdmin&lt;/code&gt; 가 정의 둘 모두는 &lt;code&gt;exclude&lt;/code&gt; 다음 옵션을 &lt;code&gt;ModelAdmin&lt;/code&gt; 이 우선합니다 :</target>
        </trans-unit>
        <trans-unit id="eaae8d7419df5dae5e0d1df980784410834abbbb" translate="yes" xml:space="preserve">
          <source>If your &lt;code&gt;RunPython&lt;/code&gt; or &lt;code&gt;RunSQL&lt;/code&gt; operation only affects one model, it&amp;rsquo;s good practice to pass &lt;code&gt;model_name&lt;/code&gt; as a hint to make it as transparent as possible to the router. This is especially important for reusable and third-party apps.</source>
          <target state="translated">귀하의 경우 &lt;code&gt;RunPython&lt;/code&gt; 또는 &lt;code&gt;RunSQL&lt;/code&gt; 작업이 하나의 모델에 영향을 미치는, 그것을 전달하는 좋은 습관이다 &lt;code&gt;model_name&lt;/code&gt; 라우터에 가능한 한 투명하게 그것을 만들 수있는 힌트로는. 이는 재사용 가능한 타사 앱에 특히 중요합니다.</target>
        </trans-unit>
        <trans-unit id="17d97886edb51352b4b876638aac3d9f4f3ca528" translate="yes" xml:space="preserve">
          <source>If your Django app is behind a proxy, though, the proxy may be &amp;ldquo;swallowing&amp;rdquo; whether the original request uses HTTPS or not. If there is a non-HTTPS connection between the proxy and Django then &lt;code&gt;is_secure()&lt;/code&gt; would always return &lt;code&gt;False&lt;/code&gt; &amp;ndash; even for requests that were made via HTTPS by the end user. In contrast, if there is an HTTPS connection between the proxy and Django then &lt;code&gt;is_secure()&lt;/code&gt; would always return &lt;code&gt;True&lt;/code&gt; &amp;ndash; even for requests that were made originally via HTTP.</source>
          <target state="translated">그러나 Django 앱이 프록시 뒤에있는 경우 프록시는 원래 요청이 HTTPS를 사용하는지 여부를 &quot;삼키는&quot;것일 수 있습니다. 프록시와 Django간에 비 HTTPS 연결이있는 경우 &lt;code&gt;is_secure()&lt;/code&gt; 는 최종 사용자가 HTTPS를 통해 요청한 경우에도 항상 &lt;code&gt;False&lt;/code&gt; 를 반환 합니다. 반대로 프록시와 Django간에 HTTPS 연결이 있으면 &lt;code&gt;is_secure()&lt;/code&gt; 는 원래 HTTP를 통해 요청한 경우에도 항상 &lt;code&gt;True&lt;/code&gt; 를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="5497b62e97032ff943fb4f10c5f320b8f45dac4e" translate="yes" xml:space="preserve">
          <source>If your GDAL library is in a non-standard location, or you don&amp;rsquo;t want to modify the system&amp;rsquo;s library path then the &lt;a href=&quot;../gdal#std:setting-GDAL_LIBRARY_PATH&quot;&gt;&lt;code&gt;GDAL_LIBRARY_PATH&lt;/code&gt;&lt;/a&gt; setting may be added to your Django settings file with the full path to the GDAL library. For example:</source>
          <target state="translated">GDAL 라이브러리가 비표준 위치에 있거나 시스템의 라이브러리 경로를 수정하지 않으려면 &lt;a href=&quot;../gdal#std:setting-GDAL_LIBRARY_PATH&quot;&gt; &lt;code&gt;GDAL_LIBRARY_PATH&lt;/code&gt; &lt;/a&gt; 설정이 GDAL 라이브러리의 전체 경로와 함께 Django 설정 파일에 추가 될 수 있습니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="6656b0bbfc9f0cf5bcaba4af9e2783f344122be3" translate="yes" xml:space="preserve">
          <source>If your GEOS library is in a non-standard location, or you don&amp;rsquo;t want to modify the system&amp;rsquo;s library path then the &lt;a href=&quot;../geos#std:setting-GEOS_LIBRARY_PATH&quot;&gt;&lt;code&gt;GEOS_LIBRARY_PATH&lt;/code&gt;&lt;/a&gt; setting may be added to your Django settings file with the full path to the GEOS C library. For example:</source>
          <target state="translated">GEOS 라이브러리가 비표준 위치에 있거나 시스템의 라이브러리 경로를 수정하지 않으려면 GEOS C 라이브러리의 전체 경로와 함께 &lt;a href=&quot;../geos#std:setting-GEOS_LIBRARY_PATH&quot;&gt; &lt;code&gt;GEOS_LIBRARY_PATH&lt;/code&gt; &lt;/a&gt; 설정이 Django 설정 파일에 추가 될 수 있습니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="9503b6ac9885ede72752befeddae5b57e6923b42" translate="yes" xml:space="preserve">
          <source>If your MySQL setup does &lt;em&gt;not&lt;/em&gt; support transactions, then Django will always function in autocommit mode: statements will be executed and committed as soon as they&amp;rsquo;re called. If your MySQL setup &lt;em&gt;does&lt;/em&gt; support transactions, Django will handle transactions as explained in this document.</source>
          <target state="translated">MySQL 설정이 트랜잭션을 지원 하지 &lt;em&gt;않으면&lt;/em&gt; Django는 항상 자동 커밋 모드에서 작동합니다. 명령문은 호출되는 즉시 실행되고 커밋됩니다. MySQL 설정 &lt;em&gt;이&lt;/em&gt; 트랜잭션을 지원하는 경우 Django는이 문서에 설명 된대로 트랜잭션을 처리합니다.</target>
        </trans-unit>
        <trans-unit id="7357f3c6b27ecc3b358d99481fc74b66e7e2445c" translate="yes" xml:space="preserve">
          <source>If your app already has models and database tables, and doesn&amp;rsquo;t have migrations yet (for example, you created it against a previous Django version), you&amp;rsquo;ll need to convert it to use migrations by running:</source>
          <target state="translated">앱에 이미 모델과 데이터베이스 테이블이 있고 아직 마이그레이션이없는 경우 (예 : 이전 Django 버전에 대해 생성 한 경우) 다음을 실행하여 마이그레이션을 사용하도록 변환해야합니다.</target>
        </trans-unit>
        <trans-unit id="a6f0ecf7e5650fbc70efecf351f9f0234f1b8a8a" translate="yes" xml:space="preserve">
          <source>If your app is tested with multiple user models, using &lt;code&gt;@override_settings(AUTH_USER_MODEL=...)&lt;/code&gt; for example, and you cache the result of &lt;code&gt;get_user_model()&lt;/code&gt; in a module-level variable, you may need to listen to the &lt;a href=&quot;../../ref/signals#django.test.signals.setting_changed&quot;&gt;&lt;code&gt;setting_changed&lt;/code&gt;&lt;/a&gt; signal to clear the cache. For example:</source>
          <target state="translated">예를 들어 &lt;code&gt;@override_settings(AUTH_USER_MODEL=...)&lt;/code&gt; 를 사용하여 여러 사용자 모델로 앱을 테스트 한 후 &lt;code&gt;get_user_model()&lt;/code&gt; 결과를 모듈 수준 변수에 캐시하는 경우 &lt;a href=&quot;../../ref/signals#django.test.signals.setting_changed&quot;&gt; &lt;code&gt;setting_changed&lt;/code&gt; &lt;/a&gt; 신호를 듣고 지워야 할 수 있습니다. 캐시. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="19dcfebcbdd415cf375a630be2b6e427341d0dea" translate="yes" xml:space="preserve">
          <source>If your application connects to other systems &amp;ndash; for instance, if it queries a Web service &amp;ndash; make sure datetimes are properly specified. To transmit datetimes safely, their representation should include the UTC offset, or their values should be in UTC (or both!).</source>
          <target state="translated">응용 프로그램이 다른 시스템에 연결하는 경우 (예 : 웹 서비스를 쿼리하는 경우) 날짜 시간이 올바르게 지정되어 있는지 확인하십시오. 날짜 시간을 안전하게 전송하려면 해당 표현에 UTC 오프셋이 포함되거나 값이 UTC (또는 둘 다) 여야합니다.</target>
        </trans-unit>
        <trans-unit id="68eb798bc7d826d0f87acddbc39d34694074284b" translate="yes" xml:space="preserve">
          <source>If your application provides views, you may want to include tests that use the test client to exercise those views. However, an end user is free to deploy the views in your application at any URL of their choosing. This means that your tests can&amp;rsquo;t rely upon the fact that your views will be available at a particular URL. Decorate your test class or test method with &lt;code&gt;@override_settings(ROOT_URLCONF=...)&lt;/code&gt; for URLconf configuration.</source>
          <target state="translated">애플리케이션이보기를 제공하는 경우 테스트 클라이언트를 사용하여 해당보기를 실행하는 테스트를 포함 할 수 있습니다. 그러나 최종 사용자는 원하는 URL로 응용 프로그램의보기를 자유롭게 배포 할 수 있습니다. 즉, 특정 URL에서 조회수를 볼 수 있다는 사실을 테스트에 의존 할 수 없습니다. URLconf 구성을 위해 @override_settings &lt;code&gt;@override_settings(ROOT_URLCONF=...)&lt;/code&gt; 로 테스트 클래스 또는 테스트 메소드를 장식하십시오 .</target>
        </trans-unit>
        <trans-unit id="35485f3524af2f43a59e170657765450ecc8c6f8" translate="yes" xml:space="preserve">
          <source>If your authentication mechanism uses a custom HTTP header and not &lt;code&gt;REMOTE_USER&lt;/code&gt;, you can subclass &lt;code&gt;RemoteUserMiddleware&lt;/code&gt; and set the &lt;code&gt;header&lt;/code&gt; attribute to the desired &lt;code&gt;request.META&lt;/code&gt; key. For example:</source>
          <target state="translated">인증 메커니즘이 &lt;code&gt;REMOTE_USER&lt;/code&gt; 가 아닌 사용자 정의 HTTP 헤더를 사용하는 경우 &lt;code&gt;RemoteUserMiddleware&lt;/code&gt; 를 서브 클래스 화 하고 &lt;code&gt;header&lt;/code&gt; 속성을 원하는 &lt;code&gt;request.META&lt;/code&gt; 키로 설정할 수 있습니다 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="9779f7ac3b7339bf4ea6d174741695fcb45580da" translate="yes" xml:space="preserve">
          <source>If your background is in plain old PHP (with no use of modern frameworks), you&amp;rsquo;re probably used to putting code under the Web server&amp;rsquo;s document root (in a place such as &lt;code&gt;/var/www&lt;/code&gt;). With Django, you don&amp;rsquo;t do that. It&amp;rsquo;s not a good idea to put any of this Python code within your Web server&amp;rsquo;s document root, because it risks the possibility that people may be able to view your code over the Web. That&amp;rsquo;s not good for security.</source>
          <target state="translated">배경이 평범한 오래된 PHP (현대 프레임 워크를 사용하지 않음) 인 경우 웹 서버의 문서 루트 ( &lt;code&gt;/var/www&lt;/code&gt; 와 같은 위치)에 코드를 배치하는 데 익숙 할 것 입니다. Django를 사용하면 그렇게하지 않습니다. 이 Python 코드를 웹 서버의 문서 루트에 넣는 것은 좋은 생각이 아닙니다. 사람들이 웹을 통해 코드를 볼 수있는 위험이 있기 때문입니다. 보안에 좋지 않습니다.</target>
        </trans-unit>
        <trans-unit id="ca388b1fedcaa5043ea95b9f8107592768d9f5dc" translate="yes" xml:space="preserve">
          <source>If your code attempts to access the database when its modules are compiled, this will occur &lt;em&gt;before&lt;/em&gt; the test database is set up, with potentially unexpected results. For example, if you have a database query in module-level code and a real database exists, production data could pollute your tests. &lt;em&gt;It is a bad idea to have such import-time database queries in your code&lt;/em&gt; anyway - rewrite your code so that it doesn&amp;rsquo;t do this.</source>
          <target state="translated">코드가 모듈을 컴파일 할 때 데이터베이스에 액세스하려고 하면 테스트 데이터베이스가 설정 &lt;em&gt;되기 전에&lt;/em&gt; 발생 하며 예상치 못한 결과가 발생할 수 있습니다. 예를 들어, 모듈 수준 코드에 데이터베이스 쿼리가 있고 실제 데이터베이스가 있으면 프로덕션 데이터가 테스트를 오염시킬 수 있습니다. 어쨌든 &lt;em&gt;코드에 이러한 가져 오기 시간 데이터베이스 쿼리&lt;/em&gt; 를 두는 것은 좋지 않습니다. 코드가 다시 작성되지 않도록 코드를 다시 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="8b9eb50ad139972e07c5927be25959ddc8c43a98" translate="yes" xml:space="preserve">
          <source>If your code imports the application registry in an application&amp;rsquo;s &lt;code&gt;__init__.py&lt;/code&gt;, the name &lt;code&gt;apps&lt;/code&gt; will clash with the &lt;code&gt;apps&lt;/code&gt; submodule. The best practice is to move that code to a submodule and import it. A workaround is to import the registry under a different name:</source>
          <target state="translated">코드가 응용 프로그램의 &lt;code&gt;__init__.py&lt;/code&gt; 에서 응용 프로그램 레지스트리를 가져 오는 경우 이름 &lt;code&gt;apps&lt;/code&gt; 은 &lt;code&gt;apps&lt;/code&gt; 하위 모듈 과 충돌합니다 . 가장 좋은 방법은 해당 코드를 하위 모듈로 이동하고 가져 오는 것입니다. 해결 방법은 레지스트리를 다른 이름으로 가져 오는 것입니다.</target>
        </trans-unit>
        <trans-unit id="037c62c31dab165af710e06e5131c4b392f063c1" translate="yes" xml:space="preserve">
          <source>If your code only uses ASCII data, it&amp;rsquo;s safe to use your normal strings, passing them around at will, because ASCII is a subset of UTF-8.</source>
          <target state="translated">코드에서 ASCII 데이터 만 사용하는 경우 ASCII는 UTF-8의 하위 집합이므로 일반 문자열을 마음대로 전달하는 것이 안전합니다.</target>
        </trans-unit>
        <trans-unit id="e54e295adfb62bcb63529d5938619c752337731c" translate="yes" xml:space="preserve">
          <source>If your command defines mandatory positional arguments, you can customize the message error returned in the case of missing arguments. The default is output by &lt;a href=&quot;https://docs.python.org/3/library/argparse.html#module-argparse&quot;&gt;&lt;code&gt;argparse&lt;/code&gt;&lt;/a&gt; (&amp;ldquo;too few arguments&amp;rdquo;).</source>
          <target state="translated">명령이 필수 위치 인수를 정의하는 경우 인수가 누락 된 경우 리턴되는 메시지 오류를 사용자 정의 할 수 있습니다. 디폴트는 &lt;a href=&quot;https://docs.python.org/3/library/argparse.html#module-argparse&quot;&gt; &lt;code&gt;argparse&lt;/code&gt; 에&lt;/a&gt; 의해 출력됩니다 (&amp;ldquo;너무 적은 인수&amp;rdquo;).</target>
        </trans-unit>
        <trans-unit id="8b66d0e6b2d3c34277e5351352f9e2d49c89f40f" translate="yes" xml:space="preserve">
          <source>If your custom &lt;a href=&quot;../ref/models/fields#django.db.models.Field&quot;&gt;&lt;code&gt;Field&lt;/code&gt;&lt;/a&gt; class deals with data structures that are more complex than strings, dates, integers, or floats, then you may need to override &lt;a href=&quot;../ref/models/fields#django.db.models.Field.from_db_value&quot;&gt;&lt;code&gt;from_db_value()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../ref/models/fields#django.db.models.Field.to_python&quot;&gt;&lt;code&gt;to_python()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">사용자 정의 &lt;a href=&quot;../ref/models/fields#django.db.models.Field&quot;&gt; &lt;code&gt;Field&lt;/code&gt; &lt;/a&gt; 클래스가 문자열, 날짜, 정수 또는 부동 소수점보다 복잡한 데이터 구조를 처리하는 경우 &lt;a href=&quot;../ref/models/fields#django.db.models.Field.from_db_value&quot;&gt; &lt;code&gt;from_db_value()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../ref/models/fields#django.db.models.Field.to_python&quot;&gt; &lt;code&gt;to_python()&lt;/code&gt; &lt;/a&gt; 을 재정의해야 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="42459a545a83bcbb2b1a6c5d0c989d612ebefbcf" translate="yes" xml:space="preserve">
          <source>If your custom field uses the &lt;code&gt;CHAR&lt;/code&gt;, &lt;code&gt;VARCHAR&lt;/code&gt; or &lt;code&gt;TEXT&lt;/code&gt; types for MySQL, you must make sure that &lt;a href=&quot;../ref/models/fields#django.db.models.Field.get_prep_value&quot;&gt;&lt;code&gt;get_prep_value()&lt;/code&gt;&lt;/a&gt; always returns a string type. MySQL performs flexible and unexpected matching when a query is performed on these types and the provided value is an integer, which can cause queries to include unexpected objects in their results. This problem cannot occur if you always return a string type from &lt;a href=&quot;../ref/models/fields#django.db.models.Field.get_prep_value&quot;&gt;&lt;code&gt;get_prep_value()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">사용자 정의 필드가 MySQL에 대해 &lt;code&gt;CHAR&lt;/code&gt; , &lt;code&gt;VARCHAR&lt;/code&gt; 또는 &lt;code&gt;TEXT&lt;/code&gt; 유형을 사용하는 경우 &lt;a href=&quot;../ref/models/fields#django.db.models.Field.get_prep_value&quot;&gt; &lt;code&gt;get_prep_value()&lt;/code&gt; &lt;/a&gt; 항상 문자열 유형을 리턴 하는지 확인해야합니다 . MySQL은 이러한 유형에 대해 쿼리를 수행 할 때 유연하고 예기치 않은 일치를 수행하며 제공된 값이 정수이므로 쿼리에 예기치 않은 개체가 결과에 포함될 수 있습니다. 항상 &lt;a href=&quot;../ref/models/fields#django.db.models.Field.get_prep_value&quot;&gt; &lt;code&gt;get_prep_value()&lt;/code&gt; &lt;/a&gt; 에서 문자열 유형을 리턴하면이 문제점이 발생할 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="5f134f8d6891d13bafe02ccedf40254834ce3b1c" translate="yes" xml:space="preserve">
          <source>If your custom user model is a subclass of &lt;code&gt;AbstractUser&lt;/code&gt;, then you can extend these forms in this manner:</source>
          <target state="translated">사용자 정의 사용자 모델이 &lt;code&gt;AbstractUser&lt;/code&gt; 의 서브 클래스 인 경우 다음과 같은 방식으로 이러한 양식을 확장 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7489ac299b65b30e1fabb441ed4d0427d3e20fa3" translate="yes" xml:space="preserve">
          <source>If your data does &lt;em&gt;not&lt;/em&gt; validate, the &lt;code&gt;cleaned_data&lt;/code&gt; dictionary contains only the valid fields:</source>
          <target state="translated">데이터의 유효성이 검사 되지 &lt;em&gt;않으면 &lt;/em&gt; &lt;code&gt;cleaned_data&lt;/code&gt; 된 데이터 사전에 유효한 필드 만 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="66fee195a0e25a7f977bf0cd9ad9e712b37631fd" translate="yes" xml:space="preserve">
          <source>If your database column name is an SQL reserved word, or contains characters that aren&amp;rsquo;t allowed in Python variable names &amp;ndash; notably, the hyphen &amp;ndash; that&amp;rsquo;s OK. Django quotes column and table names behind the scenes.</source>
          <target state="translated">데이터베이스 열 이름이 SQL 예약어이거나 Python 변수 이름에 허용되지 않는 문자 (특히 하이픈)가 포함 된 경우에는 문제가 없습니다. Django는 장면 뒤의 열과 테이블 이름을 인용합니다.</target>
        </trans-unit>
        <trans-unit id="83b77d8f63e76cf58cc37344473b9afbbd464eed" translate="yes" xml:space="preserve">
          <source>If your database configuration requires a specific creation order, you can specify the dependencies that exist using the &lt;a href=&quot;../../ref/settings#std:setting-TEST_DEPENDENCIES&quot;&gt;&lt;code&gt;DEPENDENCIES&lt;/code&gt;&lt;/a&gt; test setting. Consider the following (simplified) example database configuration:</source>
          <target state="translated">데이터베이스 구성에 특정 작성 순서가 필요한 경우 &lt;a href=&quot;../../ref/settings#std:setting-TEST_DEPENDENCIES&quot;&gt; &lt;code&gt;DEPENDENCIES&lt;/code&gt; &lt;/a&gt; 테스트 설정을 사용하여 존재하는 종속성을 지정할 수 있습니다 . 다음과 같은 단순화 된 데이터베이스 구성 예를 고려하십시오.</target>
        </trans-unit>
        <trans-unit id="7805750627528231fb20224a0ae84ae501c12e42" translate="yes" xml:space="preserve">
          <source>If your database table name is an SQL reserved word, or contains characters that aren&amp;rsquo;t allowed in Python variable names &amp;ndash; notably, the hyphen &amp;ndash; that&amp;rsquo;s OK. Django quotes column and table names behind the scenes.</source>
          <target state="translated">데이터베이스 테이블 이름이 SQL 예약어이거나 Python 변수 이름에 허용되지 않는 문자 (특히 하이픈)가 포함 된 경우에는 문제가 없습니다. Django는 장면 뒤의 열과 테이블 이름을 인용합니다.</target>
        </trans-unit>
        <trans-unit id="b9f5f90e03e19a8bb4a87f8c1e61359a54e098f8" translate="yes" xml:space="preserve">
          <source>If your deployment situation allows, it&amp;rsquo;s usually a good idea to have your front-end Web server perform the functionality provided by the &lt;code&gt;SecurityMiddleware&lt;/code&gt;. That way, if there are requests that aren&amp;rsquo;t served by Django (such as static media or user-uploaded files), they will have the same protections as requests to your Django application.</source>
          <target state="translated">배포 상황에서 허용되는 경우 일반적으로 프런트 엔드 웹 서버가 &lt;code&gt;SecurityMiddleware&lt;/code&gt; 에서 제공하는 기능을 수행하도록하는 것이 좋습니다 . 이렇게하면 Django에서 제공하지 않는 요청 (예 : 정적 미디어 또는 사용자 업로드 파일)이 있으면 Django 응용 프로그램에 대한 요청과 동일한 보호 기능을 갖게됩니다.</target>
        </trans-unit>
        <trans-unit id="b1ce081d315c1a0717aefc66e3fbb209ac78a158" translate="yes" xml:space="preserve">
          <source>If your form includes a &lt;a href=&quot;../../ref/forms/fields#django.forms.URLField&quot;&gt;&lt;code&gt;URLField&lt;/code&gt;&lt;/a&gt;, an &lt;a href=&quot;../../ref/forms/fields#django.forms.EmailField&quot;&gt;&lt;code&gt;EmailField&lt;/code&gt;&lt;/a&gt; or any integer field type, Django will use the &lt;code&gt;url&lt;/code&gt;, &lt;code&gt;email&lt;/code&gt; and &lt;code&gt;number&lt;/code&gt; HTML5 input types. By default, browsers may apply their own validation on these fields, which may be stricter than Django&amp;rsquo;s validation. If you would like to disable this behavior, set the &lt;code&gt;novalidate&lt;/code&gt; attribute on the &lt;code&gt;form&lt;/code&gt; tag, or specify a different widget on the field, like &lt;a href=&quot;../../ref/forms/widgets#django.forms.TextInput&quot;&gt;&lt;code&gt;TextInput&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">양식에 &lt;a href=&quot;../../ref/forms/fields#django.forms.URLField&quot;&gt; &lt;code&gt;URLField&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../../ref/forms/fields#django.forms.EmailField&quot;&gt; &lt;code&gt;EmailField&lt;/code&gt; &lt;/a&gt; 또는 정수 필드 유형이 포함 된 경우 Django는 &lt;code&gt;url&lt;/code&gt; , &lt;code&gt;email&lt;/code&gt; 및 &lt;code&gt;number&lt;/code&gt; HTML5 입력 유형을 사용합니다. 기본적으로 브라우저는이 필드에 자체 검증을 적용 할 수 있으며 이는 Django의 검증보다 더 엄격 할 수 있습니다. 이 동작을 사용하지 않으 려면 &lt;code&gt;form&lt;/code&gt; 태그 에서 &lt;code&gt;novalidate&lt;/code&gt; 속성을 설정 하거나 필드에서 &lt;a href=&quot;../../ref/forms/widgets#django.forms.TextInput&quot;&gt; &lt;code&gt;TextInput&lt;/code&gt; &lt;/a&gt; 과 같은 다른 위젯을 지정하십시오 .</target>
        </trans-unit>
        <trans-unit id="9e4e143f7d7dfb7b18d9cf7a1c3427090cb8e9a5" translate="yes" xml:space="preserve">
          <source>If your hasher doesn&amp;rsquo;t have a work factor, implement the method as a no-op (&lt;code&gt;pass&lt;/code&gt;).</source>
          <target state="translated">hasher에 작업 요소가없는 경우 메소드를 no-op ( &lt;code&gt;pass&lt;/code&gt; ) 로 구현하십시오 .</target>
        </trans-unit>
        <trans-unit id="b352e31157863463daa5a9b2b4a00f05e691f6ce" translate="yes" xml:space="preserve">
          <source>If your model contains more than one foreign key to the same model, you&amp;rsquo;ll need to resolve the ambiguity manually using &lt;code&gt;fk_name&lt;/code&gt;. For example, consider the following model:</source>
          <target state="translated">모델에 동일한 모델에 대한 외래 키가 두 개 이상 포함 된 경우 &lt;code&gt;fk_name&lt;/code&gt; 을 사용하여 모호성을 수동으로 해결해야합니다 . 예를 들어 다음 모델을 고려하십시오.</target>
        </trans-unit>
        <trans-unit id="6ca7a43d3ceacd8c83aa87a7c6008e8f5f3287d7" translate="yes" xml:space="preserve">
          <source>If your model has a &lt;a href=&quot;../../models/instances#django.db.models.Model.get_absolute_url&quot;&gt;&lt;code&gt;get_absolute_url()&lt;/code&gt;&lt;/a&gt; method but you don&amp;rsquo;t want the &amp;ldquo;View on site&amp;rdquo; button to appear, you only need to set &lt;code&gt;view_on_site&lt;/code&gt; to &lt;code&gt;False&lt;/code&gt;:</source>
          <target state="translated">모델에 &lt;a href=&quot;../../models/instances#django.db.models.Model.get_absolute_url&quot;&gt; &lt;code&gt;get_absolute_url()&lt;/code&gt; &lt;/a&gt; 메소드가 있지만 &quot;사이트에서보기&quot;단추를 표시하지 않으려면 &lt;code&gt;view_on_site&lt;/code&gt; 만 &lt;code&gt;False&lt;/code&gt; 로 설정 하면 됩니다 .</target>
        </trans-unit>
        <trans-unit id="55784988b7d647b9df1a836203e5bf6b7c5dabc3" translate="yes" xml:space="preserve">
          <source>If your model has more than one &lt;a href=&quot;../models/fields#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;ForeignKey&lt;/code&gt;&lt;/a&gt; to the &lt;code&gt;parent_model&lt;/code&gt;, you must specify a &lt;code&gt;fk_name&lt;/code&gt;.</source>
          <target state="translated">모델 에 &lt;code&gt;parent_model&lt;/code&gt; 에 대한 &lt;a href=&quot;../models/fields#django.db.models.ForeignKey&quot;&gt; &lt;code&gt;ForeignKey&lt;/code&gt; &lt;/a&gt; 가 둘 이상인 경우 &lt;code&gt;fk_name&lt;/code&gt; 을 지정해야합니다 .</target>
        </trans-unit>
        <trans-unit id="e6dc5086c9587c9e487ae0b9fdc36e7f3231fe93" translate="yes" xml:space="preserve">
          <source>If your model&amp;rsquo;s &lt;a href=&quot;../../topics/db/models#meta-options&quot;&gt;Meta&lt;/a&gt; specifies &lt;a href=&quot;options#django.db.models.Options.get_latest_by&quot;&gt;&lt;code&gt;get_latest_by&lt;/code&gt;&lt;/a&gt;, you can omit any arguments to &lt;code&gt;earliest()&lt;/code&gt; or &lt;code&gt;latest()&lt;/code&gt;. The fields specified in &lt;a href=&quot;options#django.db.models.Options.get_latest_by&quot;&gt;&lt;code&gt;get_latest_by&lt;/code&gt;&lt;/a&gt; will be used by default.</source>
          <target state="translated">모델의 &lt;a href=&quot;../../topics/db/models#meta-options&quot;&gt;메타가 &lt;/a&gt;&lt;a href=&quot;options#django.db.models.Options.get_latest_by&quot;&gt; &lt;code&gt;get_latest_by&lt;/code&gt; 를&lt;/a&gt; 지정 하면 &lt;code&gt;earliest()&lt;/code&gt; 또는 &lt;code&gt;latest()&lt;/code&gt; 대한 인수를 생략 할 수 있습니다 . &lt;a href=&quot;options#django.db.models.Options.get_latest_by&quot;&gt; &lt;code&gt;get_latest_by&lt;/code&gt; 에&lt;/a&gt; 지정된 필드 가 기본적으로 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="151f04ef6d26ef02a6f8f49d9494948ff5996818" translate="yes" xml:space="preserve">
          <source>If your project uses proxy models, you must either modify the proxy to extend the user model that&amp;rsquo;s in use in your project, or merge your proxy&amp;rsquo;s behavior into your &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User&quot;&gt;&lt;code&gt;User&lt;/code&gt;&lt;/a&gt; subclass.</source>
          <target state="translated">프로젝트에서 프록시 모델을 사용하는 경우 프로젝트에서 사용중인 사용자 모델을 확장하도록 프록시를 수정하거나 프록시 동작을 &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User&quot;&gt; &lt;code&gt;User&lt;/code&gt; &lt;/a&gt; 서브 클래스에 병합해야합니다 .</target>
        </trans-unit>
        <trans-unit id="44824388e510837cfa981ebd84a663ae9c830298" translate="yes" xml:space="preserve">
          <source>If your request used the &lt;code&gt;follow&lt;/code&gt; argument, the &lt;code&gt;expected_url&lt;/code&gt; and &lt;code&gt;target_status_code&lt;/code&gt; will be the url and status code for the final point of the redirect chain.</source>
          <target state="translated">귀하의 요청이 사용되는 경우 &lt;code&gt;follow&lt;/code&gt; 인수는 &lt;code&gt;expected_url&lt;/code&gt; 및 &lt;code&gt;target_status_code&lt;/code&gt; 는 리디렉션 체인의 최종 지점의 URL 및 상태 코드가 될 것입니다.</target>
        </trans-unit>
        <trans-unit id="90e0da33d8c8d3ffe3995050565ede94840b1dd8" translate="yes" xml:space="preserve">
          <source>If your root URLconf uses &lt;a href=&quot;#django.conf.urls.i18n.i18n_patterns&quot;&gt;&lt;code&gt;i18n_patterns()&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;JavaScriptCatalog&lt;/code&gt; must also be wrapped by &lt;code&gt;i18n_patterns()&lt;/code&gt; for the catalog to be correctly generated.</source>
          <target state="translated">루트 URLconf를 사용하는 경우 &lt;a href=&quot;#django.conf.urls.i18n.i18n_patterns&quot;&gt; &lt;code&gt;i18n_patterns()&lt;/code&gt; &lt;/a&gt; , &lt;code&gt;JavaScriptCatalog&lt;/code&gt; 은 또한 래핑해야 &lt;code&gt;i18n_patterns()&lt;/code&gt; 올바르게 생성되는 카탈로그.</target>
        </trans-unit>
        <trans-unit id="6df4fb6245e051b9d36fab3f466fa1d09ca7a5f9" translate="yes" xml:space="preserve">
          <source>If your site accepts file uploads, it is strongly advised that you limit these uploads in your Web server configuration to a reasonable size in order to prevent denial of service (DOS) attacks. In Apache, this can be easily set using the &lt;a href=&quot;https://httpd.apache.org/docs/2.4/mod/core.html#limitrequestbody&quot;&gt;LimitRequestBody&lt;/a&gt; directive.</source>
          <target state="translated">사이트에서 파일 업로드를 허용하는 경우 DOS (서비스 거부) 공격을 방지하기 위해 웹 서버 구성에서 이러한 업로드를 적절한 크기로 제한하는 것이 좋습니다. Apache에서는 &lt;a href=&quot;https://httpd.apache.org/docs/2.4/mod/core.html#limitrequestbody&quot;&gt;LimitRequestBody&lt;/a&gt; 지시문을 사용하여 쉽게 설정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="6f8d605a5c50ad541297eddd5069d8164b968b86" translate="yes" xml:space="preserve">
          <source>If your site offers both HTTP and HTTPS connections, most users will end up with an unsecured connection by default. For best security, you should redirect all HTTP connections to HTTPS.</source>
          <target state="translated">사이트에서 HTTP 및 HTTPS 연결을 모두 제공하는 경우 대부분의 사용자는 기본적으로 보안되지 않은 연결로 끝납니다. 최상의 보안을 위해 모든 HTTP 연결을 HTTPS로 리디렉션해야합니다.</target>
        </trans-unit>
        <trans-unit id="d3c6bc1158a1e98cf03b8d846800ac77b1fa4b8a" translate="yes" xml:space="preserve">
          <source>If your site sends emails, these values need to be set correctly.</source>
          <target state="translated">사이트에서 이메일을 보내는 경우이 값을 올바르게 설정해야합니다.</target>
        </trans-unit>
        <trans-unit id="9aa8302c804c3a783e15d8c95fda308c718b94b7" translate="yes" xml:space="preserve">
          <source>If your site serves user-uploaded files, a malicious user could upload a specially-crafted file that would be interpreted as HTML or JavaScript by the browser when you expected it to be something harmless.</source>
          <target state="translated">사이트에서 사용자가 업로드 한 파일을 제공하는 경우 악의적 인 사용자가 특수하게 조작 된 파일을 업로드 할 수 있습니다.이 파일은 사용자가 무해한 것으로 예상 될 때 브라우저에서 HTML 또는 JavaScript로 해석합니다.</target>
        </trans-unit>
        <trans-unit id="0ad66de9dea62ec082b44fd754a56be3eb2434f8" translate="yes" xml:space="preserve">
          <source>If your site uses Django&amp;rsquo;s &lt;a href=&quot;../auth/index&quot;&gt;authentication system&lt;/a&gt; and you deal with logging in users, you can use the test client&amp;rsquo;s &lt;code&gt;login()&lt;/code&gt; method to simulate the effect of a user logging into the site.</source>
          <target state="translated">사이트에서 Django의 &lt;a href=&quot;../auth/index&quot;&gt;인증 시스템&lt;/a&gt; 을 사용하고 사용자 로그인을 처리하는 경우 테스트 클라이언트의 &lt;code&gt;login()&lt;/code&gt; 메소드를 사용하여 사용자가 사이트에 로그인하는 효과를 시뮬레이션 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d440a3cae88c7b38cb98393225850ee488a3a51c" translate="yes" xml:space="preserve">
          <source>If your site uses Django&amp;rsquo;s &lt;a href=&quot;../auth/index&quot;&gt;authentication system&lt;/a&gt;, the &lt;code&gt;logout()&lt;/code&gt; method can be used to simulate the effect of a user logging out of your site.</source>
          <target state="translated">사이트에서 Django의 &lt;a href=&quot;../auth/index&quot;&gt;인증 시스템&lt;/a&gt; 을 사용하는 경우 &lt;code&gt;logout()&lt;/code&gt; 메소드를 사용하여 사용자가 사이트에서 로그 아웃하는 효과를 시뮬레이션 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0ae4efc81923d0d641f95a6dbd07af8563d1a6b5" translate="yes" xml:space="preserve">
          <source>If your site uses Django&amp;rsquo;s &lt;a href=&quot;../auth/index&quot;&gt;authentication system&lt;/a&gt;, you can use the &lt;code&gt;force_login()&lt;/code&gt; method to simulate the effect of a user logging into the site. Use this method instead of &lt;a href=&quot;#django.test.Client.login&quot;&gt;&lt;code&gt;login()&lt;/code&gt;&lt;/a&gt; when a test requires a user be logged in and the details of how a user logged in aren&amp;rsquo;t important.</source>
          <target state="translated">사이트에서 Django의 &lt;a href=&quot;../auth/index&quot;&gt;인증 시스템&lt;/a&gt; 을 사용하는 경우 &lt;code&gt;force_login()&lt;/code&gt; 메소드를 사용하여 사용자가 사이트에 로그인하는 효과를 시뮬레이션 할 수 있습니다. 테스트에서 사용자 의 &lt;a href=&quot;#django.test.Client.login&quot;&gt; &lt;code&gt;login()&lt;/code&gt; &lt;/a&gt; 이 필요하고 사용자의 로그인 방법에 대한 세부 사항이 중요하지 않은 경우 login () 대신이 메소드를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="56c55021691d4a1273096fb3bde5d2de5ed1abf6" translate="yes" xml:space="preserve">
          <source>If your site uses the same rendering logic for forms in multiple places, you can reduce duplication by saving the form&amp;rsquo;s loop in a standalone template and using the &lt;a href=&quot;../../ref/templates/builtins#std:templatetag-include&quot;&gt;&lt;code&gt;include&lt;/code&gt;&lt;/a&gt; tag to reuse it in other templates:</source>
          <target state="translated">사이트가 여러 곳에있는 양식에 대해 동일한 렌더링 논리를 사용하는 경우 양식의 루프를 독립형 템플릿에 저장하고 &lt;a href=&quot;../../ref/templates/builtins#std:templatetag-include&quot;&gt; &lt;code&gt;include&lt;/code&gt; &lt;/a&gt; 태그를 사용하여 다른 템플릿에서 재사용 함으로써 복제를 줄일 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="0462de7d96fe5e5014114972e806e852776e60fd" translate="yes" xml:space="preserve">
          <source>If your template tag needs to access the current context, you can use the &lt;code&gt;takes_context&lt;/code&gt; argument when registering your tag:</source>
          <target state="translated">템플릿 태그가 현재 컨텍스트에 액세스 &lt;code&gt;takes_context&lt;/code&gt; 경우 태그를 등록 할 때 take_context 인수를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="131d5a32009bb9c3437d883a85b81cbab612c507" translate="yes" xml:space="preserve">
          <source>If your tests make any database queries, use subclasses &lt;a href=&quot;#django.test.TransactionTestCase&quot;&gt;&lt;code&gt;TransactionTestCase&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#django.test.TestCase&quot;&gt;&lt;code&gt;TestCase&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">테스트에서 데이터베이스 쿼리를 수행하는 경우 &lt;a href=&quot;#django.test.TransactionTestCase&quot;&gt; &lt;code&gt;TransactionTestCase&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;#django.test.TestCase&quot;&gt; &lt;code&gt;TestCase&lt;/code&gt; &lt;/a&gt; 서브 클래스를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="93b76f5f9b3d3f25cd25b34d9927950756431ed5" translate="yes" xml:space="preserve">
          <source>If your tests rely on database access such as creating or querying models, be sure to create your test classes as subclasses of &lt;a href=&quot;tools#django.test.TestCase&quot;&gt;&lt;code&gt;django.test.TestCase&lt;/code&gt;&lt;/a&gt; rather than &lt;a href=&quot;https://docs.python.org/3/library/unittest.html#unittest.TestCase&quot;&gt;&lt;code&gt;unittest.TestCase&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">테스트가 모델 작성 또는 쿼리와 같은 데이터베이스 액세스에 의존 하는 경우 &lt;a href=&quot;https://docs.python.org/3/library/unittest.html#unittest.TestCase&quot;&gt; &lt;code&gt;unittest.TestCase&lt;/code&gt; 가&lt;/a&gt; 아닌 &lt;a href=&quot;tools#django.test.TestCase&quot;&gt; &lt;code&gt;django.test.TestCase&lt;/code&gt; 의&lt;/a&gt; 서브 클래스로 테스트 클래스를 작성하십시오 .</target>
        </trans-unit>
        <trans-unit id="7ea04c1e37c45f0d4b469802f36772d32e7b6af6" translate="yes" xml:space="preserve">
          <source>If your view is not rendering a template containing the &lt;a href=&quot;templates/builtins#std:templatetag-csrf_token&quot;&gt;&lt;code&gt;csrf_token&lt;/code&gt;&lt;/a&gt; template tag, Django might not set the CSRF token cookie. This is common in cases where forms are dynamically added to the page. To address this case, Django provides a view decorator which forces setting of the cookie: &lt;a href=&quot;#django.views.decorators.csrf.ensure_csrf_cookie&quot;&gt;&lt;code&gt;ensure_csrf_cookie()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">뷰에서 &lt;a href=&quot;templates/builtins#std:templatetag-csrf_token&quot;&gt; &lt;code&gt;csrf_token&lt;/code&gt; &lt;/a&gt; 템플릿 태그가 포함 된 템플릿을 렌더링 하지 않으면 Django가 CSRF 토큰 쿠키를 설정하지 않을 수 있습니다. 양식이 페이지에 동적으로 추가되는 경우에 일반적입니다. 이 경우 Django는 쿠키 설정을 &lt;a href=&quot;#django.views.decorators.csrf.ensure_csrf_cookie&quot;&gt; &lt;code&gt;ensure_csrf_cookie()&lt;/code&gt; &lt;/a&gt; 하는 뷰 데코레이터를 제공합니다 : ensure_csrf_cookie () .</target>
        </trans-unit>
        <trans-unit id="100164bf62bbd4acd7334a3ab2e0db0ddfb29848" translate="yes" xml:space="preserve">
          <source>If, as in the second example above, you&amp;rsquo;ve left the &lt;code&gt;default&lt;/code&gt; database empty, you must provide a database name each time you run &lt;a href=&quot;../../ref/django-admin#django-admin-migrate&quot;&gt;&lt;code&gt;migrate&lt;/code&gt;&lt;/a&gt;. Omitting the database name would raise an error. For the second example:</source>
          <target state="translated">위의 두 번째 예에서와 같이 &lt;code&gt;default&lt;/code&gt; 데이터베이스를 비워 두었다면 &lt;a href=&quot;../../ref/django-admin#django-admin-migrate&quot;&gt; &lt;code&gt;migrate&lt;/code&gt; &lt;/a&gt; 를 실행할 때마다 데이터베이스 이름을 제공해야합니다 . 데이터베이스 이름을 생략하면 오류가 발생합니다. 두 번째 예의 경우 :</target>
        </trans-unit>
        <trans-unit id="05a2ca6c2742910df2490054ce0b70ad2788db45" translate="yes" xml:space="preserve">
          <source>If, for some reason, it was decided that the URLs where content for yearly article archives are published at should be changed then you would only need to change the entry in the URLconf.</source>
          <target state="translated">어떤 이유로 든 연간 기사 아카이브의 컨텐츠가 게시되는 URL을 변경하기로 결정한 경우 URLconf의 항목 만 변경하면됩니다.</target>
        </trans-unit>
        <trans-unit id="2bdda409711d05757642b136dd218873e3a28bc8" translate="yes" xml:space="preserve">
          <source>If, for some reason, you &lt;em&gt;want&lt;/em&gt; the test client to perform CSRF checks, you can create an instance of the test client that enforces CSRF checks. To do this, pass in the &lt;code&gt;enforce_csrf_checks&lt;/code&gt; argument when you construct your client:</source>
          <target state="translated">어떤 이유로, 당신이 경우 &lt;em&gt;원하는&lt;/em&gt; 테스트 클라이언트는 CSRF 검사를 수행하려면이 강제 시행은 검사를 CSRF하는 테스트 클라이언트의 인스턴스를 만들 수 있습니다. 이렇게하려면 클라이언트를 구성 할 때 &lt;code&gt;enforce_csrf_checks&lt;/code&gt; 인수를 전달 하십시오.</target>
        </trans-unit>
        <trans-unit id="cd25f650a89f987a8ae9410f69052145579c8043" translate="yes" xml:space="preserve">
          <source>If, for some reason, you &lt;em&gt;want&lt;/em&gt; the test client to perform CSRF checks, you can create an instance of the test client that enforces CSRF checks:</source>
          <target state="translated">어떤 이유로, 당신이 경우 &lt;em&gt;원하는&lt;/em&gt; CSRF 검사를 수행하는 테스트 클라이언트를, 당신이 강제 시행은 검사를 CSRF하는 테스트 클라이언트의 인스턴스를 생성 할 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="919bf73ea026018730b49f5cba48431bbbf54fd7" translate="yes" xml:space="preserve">
          <source>If, for some reason, your custom management command must run without an active locale (for example, to prevent translated content from being inserted into the database), deactivate translations using the &lt;code&gt;@no_translations&lt;/code&gt; decorator on your &lt;a href=&quot;#django.core.management.BaseCommand.handle&quot;&gt;&lt;code&gt;handle()&lt;/code&gt;&lt;/a&gt; method:</source>
          <target state="translated">어떤 이유로 든 사용자 정의 관리 명령이 활성 로케일없이 실행되어야하는 경우 (예 : 번역 된 컨텐츠가 데이터베이스에 삽입되는 것을 방지하기 위해) &lt;a href=&quot;#django.core.management.BaseCommand.handle&quot;&gt; &lt;code&gt;handle()&lt;/code&gt; &lt;/a&gt; 메소드 에서 &lt;code&gt;@no_translations&lt;/code&gt; 데코레이터를 사용하여 번역을 비활성화 하십시오 .</target>
        </trans-unit>
        <trans-unit id="b07cc84bbd178c74aa2d9ca20dfcde5708a26518" translate="yes" xml:space="preserve">
          <source>If, however, you have no option but to serve media files on the same Apache &lt;code&gt;VirtualHost&lt;/code&gt; as Django, you can set up Apache to serve some URLs as static media, and others using the mod_wsgi interface to Django.</source>
          <target state="translated">그러나 Django 와 동일한 Apache &lt;code&gt;VirtualHost&lt;/code&gt; 에서 미디어 파일 을 제공하는 것 외에 다른 옵션이 없다면 mod_wsgi 인터페이스를 사용하여 Django에 일부 URL을 정적 미디어로 제공하도록 Apache를 설정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9ce69c54fa4098f27900ed28ca0545fa9c86efee" translate="yes" xml:space="preserve">
          <source>If, however, you need to re-enable a globally-disabled action for one particular model, list it explicitly in your &lt;code&gt;ModelAdmin.actions&lt;/code&gt; list:</source>
          <target state="translated">그러나 특정 모델 하나에 대해 전체적으로 비활성화 된 작업을 다시 활성화해야하는 경우 &lt;code&gt;ModelAdmin.actions&lt;/code&gt; 목록에 명시 적으로 나열하십시오.</target>
        </trans-unit>
        <trans-unit id="4e214bf4c073cee123e8fb348d379cb842d22670" translate="yes" xml:space="preserve">
          <source>Ignore files, directories, or paths matching this glob-style pattern. Use multiple times to ignore more. When specifying a path, always use forward slashes, even on Windows.</source>
          <target state="translated">이 glob 스타일 패턴과 일치하는 파일, 디렉토리 또는 경로를 무시하십시오. 더 많이 무시하려면 여러 번 사용하십시오. 경로를 지정할 때 Windows에서도 항상 슬래시를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="b46ee8e1837971774646e299482d167d080ed7ef" translate="yes" xml:space="preserve">
          <source>Ignore the warning about unapplied database migrations for now; we&amp;rsquo;ll deal with the database shortly.</source>
          <target state="translated">현재 적용되지 않은 데이터베이스 마이그레이션에 대한 경고는 무시하십시오. 데이터베이스를 곧 다룰 것입니다.</target>
        </trans-unit>
        <trans-unit id="37586d575c14722fe8807bc994aadfaef7495bc6" translate="yes" xml:space="preserve">
          <source>Ignores directories matching the given &lt;a href=&quot;https://docs.python.org/3/library/glob.html#module-glob&quot;&gt;&lt;code&gt;glob&lt;/code&gt;&lt;/a&gt;-style pattern. Use multiple times to ignore more.</source>
          <target state="translated">주어진 &lt;a href=&quot;https://docs.python.org/3/library/glob.html#module-glob&quot;&gt; &lt;code&gt;glob&lt;/code&gt; &lt;/a&gt; 스타일 패턴과 일치하는 디렉토리를 무시합니다 . 더 많이 무시하려면 여러 번 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="26f58245e8a0d7451fc5c47ad810a8c64487bb47" translate="yes" xml:space="preserve">
          <source>Ignores everything between &lt;code&gt;{% comment %}&lt;/code&gt; and &lt;code&gt;{% endcomment %}&lt;/code&gt;. An optional note may be inserted in the first tag. For example, this is useful when commenting out code for documenting why the code was disabled.</source>
          <target state="translated">&lt;code&gt;{% comment %}&lt;/code&gt; 와 &lt;code&gt;{% endcomment %}&lt;/code&gt; 사이의 모든 것을 무시합니다 . 첫 번째 태그에는 선택적인 메모가 삽입 될 수 있습니다. 예를 들어, 코드가 비활성화 된 이유를 문서화하기 위해 코드를 주석 처리 할 때 유용합니다.</target>
        </trans-unit>
        <trans-unit id="9ee48f68c602ee8c804d6234ef660c199f1fbe4a" translate="yes" xml:space="preserve">
          <source>Ignores fields and models that may have been removed since the fixture was originally generated.</source>
          <target state="translated">조명기가 원래 생성 된 이후에 제거되었을 수있는 필드와 모델을 무시합니다.</target>
        </trans-unit>
        <trans-unit id="e6f657b51973a7ffa6d6443941085cb8d8492fd4" translate="yes" xml:space="preserve">
          <source>Ignores files or directories matching the given &lt;a href=&quot;https://docs.python.org/3/library/glob.html#module-glob&quot;&gt;&lt;code&gt;glob&lt;/code&gt;&lt;/a&gt;-style pattern. Use multiple times to ignore more.</source>
          <target state="translated">주어진 &lt;a href=&quot;https://docs.python.org/3/library/glob.html#module-glob&quot;&gt; &lt;code&gt;glob&lt;/code&gt; &lt;/a&gt; 스타일 패턴과 일치하는 파일 또는 디렉토리를 무시합니다 . 더 많이 무시하려면 여러 번 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="323377a570864e3a1b26bdc4a63a300a0a6b5471" translate="yes" xml:space="preserve">
          <source>Ignoring &amp;ldquo;stop words&amp;rdquo; such as &amp;ldquo;a&amp;rdquo;, &amp;ldquo;the&amp;rdquo;, &amp;ldquo;and&amp;rdquo;.</source>
          <target state="translated">&quot;a&quot;, &quot;the&quot;, &quot;and&quot;와 같은 &quot;중지 단어&quot;를 무시합니다.</target>
        </trans-unit>
        <trans-unit id="99b7a0e4a10dba5856b9ea510fa67c9bb35255e5" translate="yes" xml:space="preserve">
          <source>Imagine we had a &lt;code&gt;last_accessed&lt;/code&gt; field on our &lt;code&gt;Author&lt;/code&gt; model that we were using to keep track of the last time anybody looked at that author:</source>
          <target state="translated">우리가 &lt;code&gt;Author&lt;/code&gt; 모델 에 &lt;code&gt;last_accessed&lt;/code&gt; 필드를 가지고 있다고 가정 해 봅시다 .</target>
        </trans-unit>
        <trans-unit id="7fc15e1eb128d4daccbe8c7ab2a5c5e128767d8e" translate="yes" xml:space="preserve">
          <source>Implement a &lt;code&gt;clean()&lt;/code&gt; method on your &lt;code&gt;Form&lt;/code&gt; when you must add custom validation for fields that are interdependent. See &lt;a href=&quot;validation#validating-fields-with-clean&quot;&gt;Cleaning and validating fields that depend on each other&lt;/a&gt; for example usage.</source>
          <target state="translated">상호 의존적 인 필드에 대한 사용자 지정 유효성 검사를 추가해야 할 때 &lt;code&gt;Form&lt;/code&gt; 에 &lt;code&gt;clean()&lt;/code&gt; 메서드를 구현 하십시오 . 사용 예 &lt;a href=&quot;validation#validating-fields-with-clean&quot;&gt;는 서로 의존하는 필드 정리 및 유효성 검사를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="c6cfa7967295c6a6446e645b10a6097c50a71d8d" translate="yes" xml:space="preserve">
          <source>Implementation concerns</source>
          <target state="translated">구현 문제</target>
        </trans-unit>
        <trans-unit id="e0bf2dc952ab6d2617aa9b9ee013534f9eeb5b62" translate="yes" xml:space="preserve">
          <source>Implementation notes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e3330bd2a361feb0240b1fddb979752ae17ea93" translate="yes" xml:space="preserve">
          <source>Implementing a constructor in a subclass</source>
          <target state="translated">서브 클래스에서 생성자 구현</target>
        </trans-unit>
        <trans-unit id="632f01fece5418e29e250528914dbf408f470600" translate="yes" xml:space="preserve">
          <source>Implementing caching should not be regarded as an alternative to improving code that&amp;rsquo;s performing poorly because it has been written badly. It&amp;rsquo;s one of the final steps towards producing well-performing code, not a shortcut.</source>
          <target state="translated">캐싱 구현은 코드가 잘못 작성되어 성능이 저하 된 코드를 개선하는 대안으로 간주되어서는 안됩니다. 바로 가기가 아닌 성능이 우수한 코드를 생성하기위한 마지막 단계 중 하나입니다.</target>
        </trans-unit>
        <trans-unit id="6c877258699b88d7b5575fdb8ca9aae3d8820bae" translate="yes" xml:space="preserve">
          <source>Implementing this yourself often results in a lot of repeated boilerplate code (see &lt;a href=&quot;../forms/index#using-a-form-in-a-view&quot;&gt;Using a form in a view&lt;/a&gt;). To help avoid this, Django provides a collection of generic class-based views for form processing.</source>
          <target state="translated">직접 구현하면 상용구 코드가 많이 반복됩니다 ( &lt;a href=&quot;../forms/index#using-a-form-in-a-view&quot;&gt;뷰에서 양식 사용&lt;/a&gt; 참조 ). 이를 피하기 위해 Django는 양식 처리를위한 일반 클래스 기반 뷰 모음을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="e5d8feee9c32a98e60e7043052deae37efa5b7c8" translate="yes" xml:space="preserve">
          <source>Implements cached database-backed session store.</source>
          <target state="translated">캐시 된 데이터베이스 기반 세션 저장소를 구현합니다.</target>
        </trans-unit>
        <trans-unit id="57a7f9ee519c5b8d6227a97eb918c9e03394062f" translate="yes" xml:space="preserve">
          <source>Implements database-backed session store.</source>
          <target state="translated">데이터베이스 기반 세션 저장소를 구현합니다.</target>
        </trans-unit>
        <trans-unit id="22e27035ac8e154d8d3e3995c4f857cc344cbb23" translate="yes" xml:space="preserve">
          <source>Implies setting &lt;a href=&quot;#django.db.models.Field.db_index&quot;&gt;&lt;code&gt;Field.db_index&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#django.db.models.Field.db_index&quot;&gt; &lt;code&gt;Field.db_index&lt;/code&gt; &lt;/a&gt; 를 &lt;code&gt;True&lt;/code&gt; 로 설정합니다 .</target>
        </trans-unit>
        <trans-unit id="759987d88bd09dd553f257b758daf18ca5f14887" translate="yes" xml:space="preserve">
          <source>Import spatial reference from EPSG code.</source>
          <target state="translated">EPSG 코드에서 공간 참조를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="f7080a194b706adfdf562e2d80373f6ad81a34c0" translate="yes" xml:space="preserve">
          <source>Import spatial reference from PROJ.4 string.</source>
          <target state="translated">PROJ.4 문자열에서 공간 참조를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="6fef6e94164d6d870390223dd3af1c7cb28c31ac" translate="yes" xml:space="preserve">
          <source>Import spatial reference from WKT.</source>
          <target state="translated">WKT에서 공간 참조를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="8a4c58086cb4f68917fb1260e33f6c51036c8456" translate="yes" xml:space="preserve">
          <source>Import spatial reference from XML.</source>
          <target state="translated">XML에서 공간 참조를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="4b6d6a30150a506f9b79caf45da5aecb76b0018e" translate="yes" xml:space="preserve">
          <source>Important</source>
          <target state="translated">Important</target>
        </trans-unit>
        <trans-unit id="6c4b688b2ef86c7056f52a57bea61a8792c3849d" translate="yes" xml:space="preserve">
          <source>Importing &lt;code&gt;AbstractBaseUser&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;AbstractBaseUser&lt;/code&gt; 가져 오기</target>
        </trans-unit>
        <trans-unit id="e7a5f39849f3fe8c1533fc46296d83c2841e8caa" translate="yes" xml:space="preserve">
          <source>Importing Spatial Data</source>
          <target state="translated">공간 데이터 가져 오기</target>
        </trans-unit>
        <trans-unit id="31deeb21a29c47ae89f038bc8341eaaeff7a09c5" translate="yes" xml:space="preserve">
          <source>Imports a dotted module path and returns the attribute/class designated by the last name in the path. Raises &lt;code&gt;ImportError&lt;/code&gt; if the import failed. For example:</source>
          <target state="translated">점으로 구분 된 모듈 경로를 가져 와서 경로에서 성으로 지정된 속성 / 클래스를 반환합니다. 발생시킵니다 &lt;code&gt;ImportError&lt;/code&gt; 를이 가져 오기가 실패합니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="43d1c07c1e566ca2939141457a3c42159b8e891a" translate="yes" xml:space="preserve">
          <source>Improved speed might be the most obvious aim for a program, but sometimes other performance improvements might be sought, such as lower memory consumption or fewer demands on the database or network.</source>
          <target state="translated">속도 향상은 프로그램의 가장 분명한 목표 일 수 있지만 때로는 메모리 소비 감소 또는 데이터베이스 나 네트워크 요구 감소와 같은 다른 성능 향상이 필요할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d8cb9b65545d67676e31319a8591f1bc9ef9938d" translate="yes" xml:space="preserve">
          <source>Improvements in one area will often bring about improved performance in another, but not always; sometimes one can even be at the expense of another. For example, an improvement in a program&amp;rsquo;s speed might cause it to use more memory. Even worse, it can be self-defeating - if the speed improvement is so memory-hungry that the system starts to run out of memory, you&amp;rsquo;ll have done more harm than good.</source>
          <target state="translated">한 영역의 개선은 종종 다른 영역의 개선 된 성능을 가져 오지만 항상 그런 것은 아닙니다. 때로는 한 사람이 다른 사람을 희생하기도한다 예를 들어, 프로그램 속도가 향상되면 더 많은 메모리를 사용할 수 있습니다. 더 나쁜 것은, 스스로를 물리 칠 수 있습니다. 속도 향상으로 인해 메모리가 부족하여 시스템의 메모리가 부족해지기 시작하면 좋은 것보다 더 많은 피해를 입게됩니다.</target>
        </trans-unit>
        <trans-unit id="b5e972a8024aea2ff5834415377894b0b1408dc1" translate="yes" xml:space="preserve">
          <source>Improving our view</source>
          <target state="translated">우리의 견해 개선</target>
        </trans-unit>
        <trans-unit id="423ee3d502d51a230964dcb05a5037a9723ba101" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;../../ref/settings#std:setting-MIDDLEWARE&quot;&gt;&lt;code&gt;MIDDLEWARE&lt;/code&gt;&lt;/a&gt;, each middleware component is represented by a string: the full Python path to the middleware factory&amp;rsquo;s class or function name. For example, here&amp;rsquo;s the default value created by &lt;a href=&quot;../../ref/django-admin#django-admin-startproject&quot;&gt;&lt;code&gt;django-admin
startproject&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">에서 &lt;a href=&quot;../../ref/settings#std:setting-MIDDLEWARE&quot;&gt; &lt;code&gt;MIDDLEWARE&lt;/code&gt; &lt;/a&gt; 미들웨어 공장의 클래스 또는 함수 이름의 전체 파이썬 경로 : 각 미들웨어 구성 요소는 문자열로 표시됩니다. 예를 들어 &lt;a href=&quot;../../ref/django-admin#django-admin-startproject&quot;&gt; &lt;code&gt;django-admin startproject&lt;/code&gt; &lt;/a&gt; 의해 생성 된 기본값은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="0f98c9c44256324347c54d4de74bec56956bdb2a" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;tutorial04&quot;&gt;Tutorial 4&lt;/a&gt; we introduced a class-based view, based on &lt;a href=&quot;../ref/class-based-views/generic-display#django.views.generic.list.ListView&quot;&gt;&lt;code&gt;ListView&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;tutorial04&quot;&gt;튜토리얼 4&lt;/a&gt; 에서는 &lt;a href=&quot;../ref/class-based-views/generic-display#django.views.generic.list.ListView&quot;&gt; &lt;code&gt;ListView&lt;/code&gt; 를&lt;/a&gt; 기반으로 클래스 기반 뷰를 소개했습니다 .</target>
        </trans-unit>
        <trans-unit id="061872dabbd882e65fed4448dcd75d033d42e91a" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;&quot;nodelist = parser.parse(('endcomment',))&quot;&lt;/code&gt; in the above example, &lt;code&gt;nodelist&lt;/code&gt; is a list of all nodes between the &lt;code&gt;{% comment %}&lt;/code&gt; and &lt;code&gt;{% endcomment %}&lt;/code&gt;, not counting &lt;code&gt;{% comment %}&lt;/code&gt; and &lt;code&gt;{% endcomment %}&lt;/code&gt; themselves.</source>
          <target state="translated">에서는 &lt;code&gt;&quot;nodelist = parser.parse(('endcomment',))&quot;&lt;/code&gt; 위의 예에서, &lt;code&gt;nodelist&lt;/code&gt; 간의 모든 노드들의 목록 &lt;code&gt;{% comment %}&lt;/code&gt; 및 &lt;code&gt;{% endcomment %}&lt;/code&gt; , 카운트되지 &lt;code&gt;{% comment %}&lt;/code&gt; 및 &lt;code&gt;{% endcomment %}&lt;/code&gt; 자신.</target>
        </trans-unit>
        <trans-unit id="980baa344e263cc001383a2be32c4e65f245ce93" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;template.html&lt;/code&gt;, the following paths would be valid:</source>
          <target state="translated">에서 &lt;code&gt;template.html&lt;/code&gt; , 다음 경로는 유효 할 것이다 :</target>
        </trans-unit>
        <trans-unit id="6ef78276f8e607837babb1b9074bcf132d9b67ef" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;test_future_question&lt;/code&gt;, we create a question with a &lt;code&gt;pub_date&lt;/code&gt; in the future. The database is reset for each test method, so the first question is no longer there, and so again the index shouldn&amp;rsquo;t have any questions in it.</source>
          <target state="translated">&lt;code&gt;test_future_question&lt;/code&gt; 에서는 앞으로 &lt;code&gt;pub_date&lt;/code&gt; 로 질문을 만듭니다 . 데이터베이스는 각 테스트 방법마다 재설정되므로 첫 번째 질문은 더 이상 존재하지 않으므로 인덱스에는 질문이 없어야합니다.</target>
        </trans-unit>
        <trans-unit id="5f9cbf79cc52467baff9c100eb8928946f93b121" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;test_past_question&lt;/code&gt;, we create a question and verify that it appears in the list.</source>
          <target state="translated">에서 &lt;code&gt;test_past_question&lt;/code&gt; , 우리는 질문을 만들고이 목록에 나타나는지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="1ca0c441f71f0c9c390db046d94cf2f81905b41d" translate="yes" xml:space="preserve">
          <source>In Django 1.5 and earlier, Django did a &lt;code&gt;SELECT&lt;/code&gt; when the primary key attribute was set. If the &lt;code&gt;SELECT&lt;/code&gt; found a row, then Django did an &lt;code&gt;UPDATE&lt;/code&gt;, otherwise it did an &lt;code&gt;INSERT&lt;/code&gt;. The old algorithm results in one more query in the &lt;code&gt;UPDATE&lt;/code&gt; case. There are some rare cases where the database doesn&amp;rsquo;t report that a row was updated even if the database contains a row for the object&amp;rsquo;s primary key value. An example is the PostgreSQL &lt;code&gt;ON UPDATE&lt;/code&gt; trigger which returns &lt;code&gt;NULL&lt;/code&gt;. In such cases it is possible to revert to the old algorithm by setting the &lt;a href=&quot;options#django.db.models.Options.select_on_save&quot;&gt;&lt;code&gt;select_on_save&lt;/code&gt;&lt;/a&gt; option to &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">Django 1.5 및 이전 버전에서 Django는 기본 키 속성이 설정되었을 때 &lt;code&gt;SELECT&lt;/code&gt; 를 수행했습니다. 경우 &lt;code&gt;SELECT&lt;/code&gt; 는 행을 찾은 후, 장고는 한 &lt;code&gt;UPDATE&lt;/code&gt; 를 그렇지가 않았다 &lt;code&gt;INSERT&lt;/code&gt; 를 . 이전 알고리즘은 &lt;code&gt;UPDATE&lt;/code&gt; 경우 에 하나 이상의 쿼리를 생성합니다 . 데이터베이스에 객체의 기본 키 값에 대한 행이 포함되어 있어도 행이 업데이트되었다고 데이터베이스가보고하지 않는 경우가 있습니다. 예로는 &lt;code&gt;NULL&lt;/code&gt; 을 반환 하는 PostgreSQL &lt;code&gt;ON UPDATE&lt;/code&gt; 트리거가 있습니다. 이러한 경우 &lt;a href=&quot;options#django.db.models.Options.select_on_save&quot;&gt; &lt;code&gt;select_on_save&lt;/code&gt; &lt;/a&gt; 옵션을 &lt;code&gt;True&lt;/code&gt; 로 설정하여 이전 알고리즘으로 되돌릴 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7e54c507b0c09f4f3df149d0a652096ad567f2ff" translate="yes" xml:space="preserve">
          <source>In Django, web pages and other content are delivered by views. Each view is represented by a Python function (or method, in the case of class-based views). Django will choose a view by examining the URL that&amp;rsquo;s requested (to be precise, the part of the URL after the domain name).</source>
          <target state="translated">Django에서는 웹 페이지 및 기타 컨텐츠가보기로 제공됩니다. 각 뷰는 Python 함수 (또는 클래스 기반 뷰의 경우 메소드)로 표시됩니다. Django는 요청한 URL (도메인 이름 뒤에있는 URL의 일부)을 검사하여보기를 선택합니다.</target>
        </trans-unit>
        <trans-unit id="71d28781461f30c2ecb2b20559c2484c3f2780b6" translate="yes" xml:space="preserve">
          <source>In English, that means start with any non-&lt;code&gt;'defaults'&lt;/code&gt; keyword argument that doesn&amp;rsquo;t contain a double underscore (which would indicate a non-exact lookup). Then add the contents of &lt;code&gt;defaults&lt;/code&gt;, overriding any keys if necessary, and use the result as the keyword arguments to the model class. If there are any callables in &lt;code&gt;defaults&lt;/code&gt;, evaluate them. As hinted at above, this is a simplification of the algorithm that is used, but it contains all the pertinent details. The internal implementation has some more error-checking than this and handles some extra edge-conditions; if you&amp;rsquo;re interested, read the code.</source>
          <target state="translated">영어에서는 이중 밑줄 (정확하지 않은 조회를 나타냄)을 포함하지 않는 &lt;code&gt;'defaults'&lt;/code&gt; 이외 의 키워드 인수로 시작합니다. 그런 다음 &lt;code&gt;defaults&lt;/code&gt; 의 컨텐츠를 추가하고 필요한 경우 키를 대체하고 결과를 모델 클래스의 키워드 인수로 사용하십시오. &lt;code&gt;defaults&lt;/code&gt; 에 호출 가능한 것이 있으면 평가하십시오. 위에서 암시 한 바와 같이, 이것은 사용되는 알고리즘을 단순화 한 것이지만 모든 관련 세부 사항을 포함합니다. 내부 구현에는 이것보다 더 많은 오류 검사가 있으며 일부 추가 에지 조건을 처리합니다. 관심이 있으시면 코드를 읽으십시오.</target>
        </trans-unit>
        <trans-unit id="2325b2ee62df43500f1c00235b487a802857009c" translate="yes" xml:space="preserve">
          <source>In HTML, a form is a collection of elements inside &lt;code&gt;&amp;lt;form&amp;gt;...&amp;lt;/form&amp;gt;&lt;/code&gt; that allow a visitor to do things like enter text, select options, manipulate objects or controls, and so on, and then send that information back to the server.</source>
          <target state="translated">HTML에서 양식은 방문자가 텍스트 입력, 옵션 선택, 객체 또는 컨트롤 조작 등의 작업을 수행 한 다음 해당 정보를 다시 보낼 수있게하는 &lt;code&gt;&amp;lt;form&amp;gt;...&amp;lt;/form&amp;gt;&lt;/code&gt; 내의 요소 모음입니다. 서버에.</target>
        </trans-unit>
        <trans-unit id="530abed4adee655c3e3355fa9c58c011c506ea41" translate="yes" xml:space="preserve">
          <source>In MySQL, a database table&amp;rsquo;s &amp;ldquo;collation&amp;rdquo; setting determines whether &lt;code&gt;exact&lt;/code&gt; comparisons are case-sensitive. This is a database setting, &lt;em&gt;not&lt;/em&gt; a Django setting. It&amp;rsquo;s possible to configure your MySQL tables to use case-sensitive comparisons, but some trade-offs are involved. For more information about this, see the &lt;a href=&quot;../databases#mysql-collation&quot;&gt;collation section&lt;/a&gt; in the &lt;a href=&quot;../databases&quot;&gt;databases&lt;/a&gt; documentation.</source>
          <target state="translated">MySQL에서 데이터베이스 테이블의 &quot;데이터 정렬&quot;설정 은 &lt;code&gt;exact&lt;/code&gt; 비교가 대소 문자를 구분 하는지 여부를 결정합니다 . 이것은 장고 설정이 &lt;em&gt;아닌&lt;/em&gt; 데이터베이스 설정입니다. 대소 문자 구분 비교를 사용하도록 MySQL 테이블을 구성 할 수 있지만 일부 절충이 수반됩니다. 이에 대한 자세한 내용은 &lt;a href=&quot;../databases&quot;&gt;데이터베이스&lt;/a&gt; 설명서 의 &lt;a href=&quot;../databases#mysql-collation&quot;&gt;데이터 정렬 섹션&lt;/a&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="15bb2b94418927da4ddbebe62ad941621709c6f9" translate="yes" xml:space="preserve">
          <source>In MySQL, a database table&amp;rsquo;s &lt;a href=&quot;../databases#mysql-collation&quot;&gt;collation&lt;/a&gt; determines whether string comparisons (such as the &lt;code&gt;expression&lt;/code&gt; and &lt;code&gt;substring&lt;/code&gt; of this function) are case-sensitive. Comparisons are case-insensitive by default.</source>
          <target state="translated">MySQL에서 데이터베이스 테이블의 &lt;a href=&quot;../databases#mysql-collation&quot;&gt;데이터 정렬&lt;/a&gt; 은 문자열 비교 (예 : 이 함수 의 &lt;code&gt;expression&lt;/code&gt; 및 &lt;code&gt;substring&lt;/code&gt; )가 대소 문자를 구분 하는지 여부를 결정합니다 . 비교는 기본적으로 대소 문자를 구분하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="8421ba54de371dd641a53fee1d33a332c1c91eef" translate="yes" xml:space="preserve">
          <source>In PostGIS, &lt;code&gt;ST_Distance_Sphere&lt;/code&gt; does &lt;em&gt;not&lt;/em&gt; limit the geometry types geographic distance queries are performed with. &lt;a href=&quot;#fndistsphere15&quot; id=&quot;id7&quot;&gt;[3]&lt;/a&gt; However, these queries may take a long time, as great-circle distances must be calculated on the fly for &lt;em&gt;every&lt;/em&gt; row in the query. This is because the spatial index on traditional geometry fields cannot be used.</source>
          <target state="translated">PostGIS에서 &lt;code&gt;ST_Distance_Sphere&lt;/code&gt; 는 지리적 거리 쿼리가 수행되는 형상 유형을 제한 하지 &lt;em&gt;않습니다&lt;/em&gt; . &lt;a href=&quot;#fndistsphere15&quot; id=&quot;id7&quot;&gt;[3]&lt;/a&gt; 그러나 쿼리의 &lt;em&gt;모든&lt;/em&gt; 행에 대해 원거리를 즉시 계산해야하므로 이러한 쿼리는 시간이 오래 걸릴 수 있습니다 . 이는 기존 지오메트리 필드의 공간 인덱스를 사용할 수 없기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="715bef95523b40746c6e2c01e2e5141dd1cef9e3" translate="yes" xml:space="preserve">
          <source>In Python code: Using the &lt;a href=&quot;../../ref/urlresolvers#django.urls.reverse&quot;&gt;&lt;code&gt;reverse()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">Python 코드에서 : &lt;a href=&quot;../../ref/urlresolvers#django.urls.reverse&quot;&gt; &lt;code&gt;reverse()&lt;/code&gt; &lt;/a&gt; 함수 사용.</target>
        </trans-unit>
        <trans-unit id="bd51507af923505247bc61c0fb892385469fd543" translate="yes" xml:space="preserve">
          <source>In Python regular expressions, the syntax for named regular expression groups is &lt;code&gt;(?P&amp;lt;name&amp;gt;pattern)&lt;/code&gt;, where &lt;code&gt;name&lt;/code&gt; is the name of the group and &lt;code&gt;pattern&lt;/code&gt; is some pattern to match.</source>
          <target state="translated">Python 정규식에서 명명 된 정규식 그룹의 구문은 &lt;code&gt;(?P&amp;lt;name&amp;gt;pattern)&lt;/code&gt; . 여기서 &lt;code&gt;name&lt;/code&gt; 은 그룹의 이름이고 &lt;code&gt;pattern&lt;/code&gt; 은 일치 할 패턴 입니다.</target>
        </trans-unit>
        <trans-unit id="ea7465a7cc3dd82a2d9fd7afc703bdeb0a931d30" translate="yes" xml:space="preserve">
          <source>In Python, deprecation warnings are silenced by default. You must turn them on using the &lt;code&gt;-Wa&lt;/code&gt; Python command line option or the &lt;a href=&quot;https://docs.python.org/3/using/cmdline.html#envvar-PYTHONWARNINGS&quot; id=&quot;index-0&quot;&gt;&lt;code&gt;PYTHONWARNINGS&lt;/code&gt;&lt;/a&gt; environment variable. For example, to show warnings while running tests:</source>
          <target state="translated">Python에서는 사용 중단 경고가 기본적으로 사용되지 않습니다. &lt;code&gt;-Wa&lt;/code&gt; Python 명령 행 옵션 또는 &lt;a href=&quot;https://docs.python.org/3/using/cmdline.html#envvar-PYTHONWARNINGS&quot; id=&quot;index-0&quot;&gt; &lt;code&gt;PYTHONWARNINGS&lt;/code&gt; &lt;/a&gt; 환경 변수 를 사용하여 설정해야합니다 . 예를 들어 테스트를 실행하는 동안 경고를 표시하려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="1b9dd68d5fb0091a5354cd74f43e44ab9d2220be" translate="yes" xml:space="preserve">
          <source>In SQL terms, that evaluates to:</source>
          <target state="translated">SQL 용어로 다음과 같이 평가됩니다.</target>
        </trans-unit>
        <trans-unit id="b5219e196842cd49964f7f565faa02caa768e6fc" translate="yes" xml:space="preserve">
          <source>In a Django project where the &lt;a href=&quot;../settings#std:setting-TEMPLATES&quot;&gt;&lt;code&gt;TEMPLATES&lt;/code&gt;&lt;/a&gt; setting defines a &lt;a href=&quot;../../topics/templates#django.template.backends.django.DjangoTemplates&quot;&gt;&lt;code&gt;DjangoTemplates&lt;/code&gt;&lt;/a&gt; engine, it&amp;rsquo;s possible to instantiate a &lt;a href=&quot;#django.template.Template&quot;&gt;&lt;code&gt;Template&lt;/code&gt;&lt;/a&gt; directly. If more than one &lt;a href=&quot;../../topics/templates#django.template.backends.django.DjangoTemplates&quot;&gt;&lt;code&gt;DjangoTemplates&lt;/code&gt;&lt;/a&gt; engine is defined, the first one will be used.</source>
          <target state="translated">&lt;a href=&quot;../settings#std:setting-TEMPLATES&quot;&gt; &lt;code&gt;TEMPLATES&lt;/code&gt; &lt;/a&gt; 설정이 &lt;a href=&quot;../../topics/templates#django.template.backends.django.DjangoTemplates&quot;&gt; &lt;code&gt;DjangoTemplates&lt;/code&gt; &lt;/a&gt; 엔진을 정의 하는 Django 프로젝트에서 &lt;a href=&quot;#django.template.Template&quot;&gt; &lt;code&gt;Template&lt;/code&gt; &lt;/a&gt; 직접 인스턴스화 할 수 있습니다. 둘 이상의 &lt;a href=&quot;../../topics/templates#django.template.backends.django.DjangoTemplates&quot;&gt; &lt;code&gt;DjangoTemplates&lt;/code&gt; &lt;/a&gt; 엔진이 정의 된 경우 첫 번째 엔진이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="78dd68fff46c7f31d6d76f4f0ceba6a02a64543d" translate="yes" xml:space="preserve">
          <source>In a class-based view, this would become:</source>
          <target state="translated">클래스 기반의 관점에서 이것은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="5a9a78ce7cfa61e948398641be09cee26a9431e5" translate="yes" xml:space="preserve">
          <source>In a given iterable; often a list, tuple, or queryset. It&amp;rsquo;s not a common use case, but strings (being iterables) are accepted.</source>
          <target state="translated">주어진 iterable에서; 종종 목록, 튜플 또는 쿼리 셋입니다. 일반적인 사용 사례는 아니지만 문자열 (반복 가능)이 허용됩니다.</target>
        </trans-unit>
        <trans-unit id="936002e8c54e8cd2138c3c4e13a6b879a99a297c" translate="yes" xml:space="preserve">
          <source>In a hurry? Here&amp;rsquo;s how to do common aggregate queries, assuming the models above:</source>
          <target state="translated">급히? 위의 모델을 가정하여 일반적인 집계 쿼리를 수행하는 방법은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="95d5174861e60b5fbde4b2d21a30e9578bd91660" translate="yes" xml:space="preserve">
          <source>In a newly created &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt;, the cache is empty. The first time a &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; is evaluated &amp;ndash; and, hence, a database query happens &amp;ndash; Django saves the query results in the &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt;&amp;rsquo;s cache and returns the results that have been explicitly requested (e.g., the next element, if the &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; is being iterated over). Subsequent evaluations of the &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; reuse the cached results.</source>
          <target state="translated">새로 작성된 &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; &lt;/a&gt; 에서 캐시가 비어 있습니다. &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; 을&lt;/a&gt; 처음 평가할 때 ( 따라서 데이터베이스 쿼리 발생) &amp;ndash; Django는 &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; &lt;/a&gt; 의 캐시 에 쿼리 결과를 저장하고 명시 적으로 요청 된 결과 (예 : &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; &lt;/a&gt; 이 반복되는 경우 다음 요소)를 반환합니다. 위에). 이후의 &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; &lt;/a&gt; 평가 는 캐시 된 결과를 재사용합니다.</target>
        </trans-unit>
        <trans-unit id="66bad3b414c450ecef328dcf5b4fecbf454e6176" translate="yes" xml:space="preserve">
          <source>In a nutshell, you will need to subclass the widget and either &lt;a href=&quot;../../topics/forms/media#assets-as-a-static-definition&quot;&gt;define a &amp;ldquo;Media&amp;rdquo; inner class&lt;/a&gt; or &lt;a href=&quot;../../topics/forms/media#dynamic-property&quot;&gt;create a &amp;ldquo;media&amp;rdquo; property&lt;/a&gt;.</source>
          <target state="translated">간단히 말해서 위젯을 서브 클래 싱하고 &lt;a href=&quot;../../topics/forms/media#assets-as-a-static-definition&quot;&gt;&quot;미디어&quot;내부 클래스를 정의&lt;/a&gt; 하거나 &lt;a href=&quot;../../topics/forms/media#dynamic-property&quot;&gt;&quot;미디어&quot;속성을 만들어야합니다&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="1142528d124b30027cb2863e674b995be99f903d" translate="yes" xml:space="preserve">
          <source>In a request to &lt;code&gt;https://www.example.com/myapp/?page=3&lt;/code&gt;, the URLconf will look for &lt;code&gt;myapp/&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;https://www.example.com/myapp/?page=3&lt;/code&gt; 에 대한 요청 에서 URLconf는 &lt;code&gt;myapp/&lt;/code&gt; 찾습니다 .</target>
        </trans-unit>
        <trans-unit id="8c6e077cc1b0e75309e606ecc2180a3df1935d34" translate="yes" xml:space="preserve">
          <source>In a similar way that a model class&amp;rsquo;s fields map to database fields, a form class&amp;rsquo;s fields map to HTML form &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; elements. (A &lt;a href=&quot;modelforms#django.forms.ModelForm&quot;&gt;&lt;code&gt;ModelForm&lt;/code&gt;&lt;/a&gt; maps a model class&amp;rsquo;s fields to HTML form &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; elements via a &lt;a href=&quot;../../ref/forms/api#django.forms.Form&quot;&gt;&lt;code&gt;Form&lt;/code&gt;&lt;/a&gt;; this is what the Django admin is based upon.)</source>
          <target state="translated">모델 클래스의 필드가 데이터베이스 필드에 매핑되는 것과 유사한 방식으로 양식 클래스의 필드는 HTML 양식 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 요소에 매핑됩니다 . ( &lt;a href=&quot;modelforms#django.forms.ModelForm&quot;&gt; &lt;code&gt;ModelForm&lt;/code&gt; &lt;/a&gt; 은 모델 클래스의 필드를 &lt;a href=&quot;../../ref/forms/api#django.forms.Form&quot;&gt; &lt;code&gt;Form&lt;/code&gt; 을&lt;/a&gt; 통해 HTML 양식 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 요소에 매핑합니다 . 이것이 Django 관리자의 기반입니다.)</target>
        </trans-unit>
        <trans-unit id="9e280d0af372eabe0c94458ef4c152f0bbcae80b" translate="yes" xml:space="preserve">
          <source>In a way similar to &lt;a href=&quot;queries#lookups-that-span-relationships&quot;&gt;Lookups that span relationships&lt;/a&gt;, aggregations and annotations on fields of models or models that are related to the one you are querying can include traversing &amp;ldquo;reverse&amp;rdquo; relationships. The lowercase name of related models and double-underscores are used here too.</source>
          <target state="translated">&lt;a href=&quot;queries#lookups-that-span-relationships&quot;&gt;관계&lt;/a&gt; 에 걸쳐있는 조회 와 유사한 방식으로 , 쿼리하는 것과 관련된 모델 또는 모델의 필드에 대한 집계 및 주석에는 &quot;역순&quot;관계 탐색이 포함될 수 있습니다. 관련 모델의 소문자 이름과 이중 밑줄도 여기에 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="ab27628513f607e825e71ce210049162b75905a1" translate="yes" xml:space="preserve">
          <source>In addition to &lt;a href=&quot;#django.db.models.Model.save&quot;&gt;&lt;code&gt;save()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#django.db.models.Model.delete&quot;&gt;&lt;code&gt;delete()&lt;/code&gt;&lt;/a&gt;, a model object might have some of the following methods:</source>
          <target state="translated">모델 객체에는 &lt;a href=&quot;#django.db.models.Model.save&quot;&gt; &lt;code&gt;save()&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#django.db.models.Model.delete&quot;&gt; &lt;code&gt;delete()&lt;/code&gt; &lt;/a&gt; 외에도 다음과 같은 메소드가있을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="751f7712ef19a124de333a44cc737e7ace3bfe24" translate="yes" xml:space="preserve">
          <source>In addition to &lt;a href=&quot;../../ref/settings#std:setting-LANGUAGES&quot;&gt;&lt;code&gt;LANGUAGES&lt;/code&gt;&lt;/a&gt; style list of tuples, &lt;code&gt;{% get_language_info_list %}&lt;/code&gt; supports lists of language codes. If you do this in your view:</source>
          <target state="translated">&lt;a href=&quot;../../ref/settings#std:setting-LANGUAGES&quot;&gt; &lt;code&gt;LANGUAGES&lt;/code&gt; &lt;/a&gt; 스타일 튜플 목록 외에도 &lt;code&gt;{% get_language_info_list %}&lt;/code&gt; 는 언어 코드 목록을 지원합니다. 당신이보기에서 이것을하면 :</target>
        </trans-unit>
        <trans-unit id="acfdeca1bfa2723747c23831e1f6c72abb0244fc" translate="yes" xml:space="preserve">
          <source>In addition to &lt;code&gt;push()&lt;/code&gt; and &lt;code&gt;pop()&lt;/code&gt;, the &lt;code&gt;Context&lt;/code&gt; object also defines an &lt;code&gt;update()&lt;/code&gt; method. This works like &lt;code&gt;push()&lt;/code&gt; but takes a dictionary as an argument and pushes that dictionary onto the stack instead of an empty one.</source>
          <target state="translated">이외에 &lt;code&gt;push()&lt;/code&gt; 및 &lt;code&gt;pop()&lt;/code&gt; 는 &lt;code&gt;Context&lt;/code&gt; 객체는 또한 정의 &lt;code&gt;update()&lt;/code&gt; 메소드. 이것은 &lt;code&gt;push()&lt;/code&gt; 처럼 작동 하지만 사전을 인수로 사용하여 빈 사전 대신 스택에 해당 사전을 푸시합니다.</target>
        </trans-unit>
        <trans-unit id="d08bf980f90aa9d354ce9fe22f93944096aa983d" translate="yes" xml:space="preserve">
          <source>In addition to a DB API driver, Django needs an adapter to access the database drivers from its ORM. Django provides an adapter for mysqlclient while MySQL Connector/Python includes &lt;a href=&quot;https://dev.mysql.com/doc/connector-python/en/connector-python-django-backend.html&quot;&gt;its own&lt;/a&gt;.</source>
          <target state="translated">Django는 DB API 드라이버 외에도 ORM에서 데이터베이스 드라이버에 액세스 할 수있는 어댑터가 필요합니다. Django는 mysqlclient 용 어댑터를 제공하고 MySQL Connector / Python에는 &lt;a href=&quot;https://dev.mysql.com/doc/connector-python/en/connector-python-django-backend.html&quot;&gt;자체&lt;/a&gt; 어댑터가 포함 되어 있습니다 .</target>
        </trans-unit>
        <trans-unit id="4446e8a7eb646fabe3c820b8fc45118f5b558932" translate="yes" xml:space="preserve">
          <source>In addition to a database backend, you&amp;rsquo;ll need to make sure your Python database bindings are installed.</source>
          <target state="translated">데이터베이스 백엔드 외에도 Python 데이터베이스 바인딩이 설치되어 있는지 확인해야합니다.</target>
        </trans-unit>
        <trans-unit id="c94ce8da528fb522992156b232a5ab6d1b86573f" translate="yes" xml:space="preserve">
          <source>In addition to being able to add custom command line options, all &lt;a href=&quot;../ref/django-admin&quot;&gt;management commands&lt;/a&gt; can accept some default options such as &lt;a href=&quot;../ref/django-admin#cmdoption-verbosity&quot;&gt;&lt;code&gt;--verbosity&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../ref/django-admin#cmdoption-traceback&quot;&gt;&lt;code&gt;--traceback&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">사용자 지정 명령 줄 옵션을 추가 할 수있을뿐 아니라 모든 &lt;a href=&quot;../ref/django-admin&quot;&gt;관리 명령&lt;/a&gt; 은 &lt;a href=&quot;../ref/django-admin#cmdoption-verbosity&quot;&gt; &lt;code&gt;--verbosity&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../ref/django-admin#cmdoption-traceback&quot;&gt; &lt;code&gt;--traceback&lt;/code&gt; &lt;/a&gt; 과 같은 일부 기본 옵션을 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f180ecdd9c92f470286413ff38ed940f9bbd38e7" translate="yes" xml:space="preserve">
          <source>In addition to creating the new model, the &lt;code&gt;from_db()&lt;/code&gt; method must set the &lt;code&gt;adding&lt;/code&gt; and &lt;code&gt;db&lt;/code&gt; flags in the new instance&amp;rsquo;s &lt;code&gt;_state&lt;/code&gt; attribute.</source>
          <target state="translated">새로운 모델을 만들뿐만 아니라, &lt;code&gt;from_db()&lt;/code&gt; 메소드는 설정해야합니다 &lt;code&gt;adding&lt;/code&gt; 및 &lt;code&gt;db&lt;/code&gt; 새 인스턴스의에 플래그를 &lt;code&gt;_state&lt;/code&gt; 속성.</target>
        </trans-unit>
        <trans-unit id="aa82b6442e717c223b5e675d2e5b3acbf200def3" translate="yes" xml:space="preserve">
          <source>In addition to methods provided by the &lt;a href=&quot;../syndication#django.contrib.syndication.views.Feed&quot;&gt;&lt;code&gt;django.contrib.syndication.views.Feed&lt;/code&gt;&lt;/a&gt; base class, GeoDjango&amp;rsquo;s &lt;code&gt;Feed&lt;/code&gt; class provides the following overrides. Note that these overrides may be done in multiple ways:</source>
          <target state="translated">에 의해 제공하는 방법 외에 &lt;a href=&quot;../syndication#django.contrib.syndication.views.Feed&quot;&gt; &lt;code&gt;django.contrib.syndication.views.Feed&lt;/code&gt; 의&lt;/a&gt; 기본 클래스, GeoDjango의 &lt;code&gt;Feed&lt;/code&gt; 클래스는 다음 재정의를 제공합니다. 이러한 재정의는 여러 가지 방법으로 수행 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e71cd07f4ac2e62e0ecd7170c96df0e8a130dfc7" translate="yes" xml:space="preserve">
          <source>In addition to the &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; methods defined in &amp;ldquo;Retrieving objects&amp;rdquo; above, the &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;ForeignKey&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;managers#django.db.models.Manager&quot;&gt;&lt;code&gt;Manager&lt;/code&gt;&lt;/a&gt; has additional methods used to handle the set of related objects. A synopsis of each is below, and complete details can be found in the &lt;a href=&quot;../../ref/models/relations&quot;&gt;related objects reference&lt;/a&gt;.</source>
          <target state="translated">받는 또한 &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; &lt;/a&gt; 정의 방법 위 &quot;객체를 찾는 중&quot;는 &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey&quot;&gt; &lt;code&gt;ForeignKey&lt;/code&gt; &lt;/a&gt;&lt;a href=&quot;managers#django.db.models.Manager&quot;&gt; &lt;code&gt;Manager&lt;/code&gt; &lt;/a&gt; 관련 개체들의 세트를 처리하기 위해 사용되는 추가의 방법이있다. 각각의 개요는 다음과 같습니다. 자세한 내용은 &lt;a href=&quot;../../ref/models/relations&quot;&gt;관련 개체 참조&lt;/a&gt; 에서 확인할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a87715969be2e401bffbf721c0b6e38e1c930533" translate="yes" xml:space="preserve">
          <source>In addition to the &lt;code&gt;'widget'&lt;/code&gt; key described in &lt;a href=&quot;#django.forms.Widget.get_context&quot;&gt;&lt;code&gt;Widget.get_context()&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;MultiValueWidget&lt;/code&gt; adds a &lt;code&gt;widget['subwidgets']&lt;/code&gt; key.</source>
          <target state="translated">또한받는 &lt;code&gt;'widget'&lt;/code&gt; 에 기재된 키 &lt;a href=&quot;#django.forms.Widget.get_context&quot;&gt; &lt;code&gt;Widget.get_context()&lt;/code&gt; &lt;/a&gt; , &lt;code&gt;MultiValueWidget&lt;/code&gt; 는 추가 &lt;code&gt;widget['subwidgets']&lt;/code&gt; 키.</target>
        </trans-unit>
        <trans-unit id="ff5784549c9c0063d76c5ca8754372f0f0124d65" translate="yes" xml:space="preserve">
          <source>In addition to the API inherited from &lt;a href=&quot;../files/file#django.core.files.File&quot;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt; such as &lt;code&gt;read()&lt;/code&gt; and &lt;code&gt;write()&lt;/code&gt;, &lt;a href=&quot;#django.db.models.fields.files.FieldFile&quot;&gt;&lt;code&gt;FieldFile&lt;/code&gt;&lt;/a&gt; includes several methods that can be used to interact with the underlying file:</source>
          <target state="translated">로부터 상속 된 API 외에 &lt;a href=&quot;../files/file#django.core.files.File&quot;&gt; &lt;code&gt;File&lt;/code&gt; &lt;/a&gt; 과 같은 &lt;code&gt;read()&lt;/code&gt; 와 &lt;code&gt;write()&lt;/code&gt; , &lt;a href=&quot;#django.db.models.fields.files.FieldFile&quot;&gt; &lt;code&gt;FieldFile&lt;/code&gt; 는&lt;/a&gt; 기본 파일과 상호 작용하는 데 사용할 수있는 여러 가지 방법을 포함한다 :</target>
        </trans-unit>
        <trans-unit id="a10925da11c09a74be0bd8f4c1b6704fc5cb3520" translate="yes" xml:space="preserve">
          <source>In addition to the ability to query by key, there are a number of custom lookups available for &lt;code&gt;HStoreField&lt;/code&gt;.</source>
          <target state="translated">키별로 쿼리하는 기능 외에도 &lt;code&gt;HStoreField&lt;/code&gt; 에 사용할 수있는 여러 사용자 정의 조회가 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d69ed98b07f3efe4289e6ef8ac1e34397081717a" translate="yes" xml:space="preserve">
          <source>In addition to the above details, there are a few guidelines which can greatly improve the efficiency and readability of the field&amp;rsquo;s code.</source>
          <target state="translated">위의 세부 사항 외에도 필드 코드의 효율성과 가독성을 크게 향상시킬 수있는 몇 가지 지침이 있습니다.</target>
        </trans-unit>
        <trans-unit id="8c64e028bd2cea8a3b5c6e844c13dd01044496cd" translate="yes" xml:space="preserve">
          <source>In addition to the above methods, fields that deal with files have a few other special requirements which must be taken into account. The majority of the mechanics provided by &lt;code&gt;FileField&lt;/code&gt;, such as controlling database storage and retrieval, can remain unchanged, leaving subclasses to deal with the challenge of supporting a particular type of file.</source>
          <target state="translated">위의 방법 외에도 파일을 다루는 필드에는 고려해야 할 몇 가지 다른 특수 요구 사항이 있습니다. 데이터베이스 저장 및 검색 제어와 같이 &lt;code&gt;FileField&lt;/code&gt; 가 제공하는 대부분의 메커니즘 은 변경되지 않은 상태로 유지 될 수 있으므로 서브 클래스는 특정 유형의 파일을 지원해야하는 문제를 처리 할 수 ​​있습니다.</target>
        </trans-unit>
        <trans-unit id="2e1bc480fcebe4ce8116912b2190e867237ad26c" translate="yes" xml:space="preserve">
          <source>In addition to the context provided by &lt;a href=&quot;mixins-multiple-object#django.views.generic.list.MultipleObjectMixin&quot;&gt;&lt;code&gt;MultipleObjectMixin&lt;/code&gt;&lt;/a&gt; (via &lt;a href=&quot;mixins-date-based#django.views.generic.dates.BaseDateListView&quot;&gt;&lt;code&gt;BaseDateListView&lt;/code&gt;&lt;/a&gt;), the template&amp;rsquo;s context will be:</source>
          <target state="translated">&lt;a href=&quot;mixins-date-based#django.views.generic.dates.BaseDateListView&quot;&gt; &lt;code&gt;BaseDateListView&lt;/code&gt; &lt;/a&gt; 를 통해 &lt;a href=&quot;mixins-multiple-object#django.views.generic.list.MultipleObjectMixin&quot;&gt; &lt;code&gt;MultipleObjectMixin&lt;/code&gt; &lt;/a&gt; 에서 제공하는 컨텍스트 외에도 템플릿의 컨텍스트는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="78146a6623f617f370bdbb7922a1a46c904a4d3e" translate="yes" xml:space="preserve">
          <source>In addition to the context provided by &lt;a href=&quot;mixins-multiple-object#django.views.generic.list.MultipleObjectMixin&quot;&gt;&lt;code&gt;django.views.generic.list.MultipleObjectMixin&lt;/code&gt;&lt;/a&gt; (via &lt;a href=&quot;mixins-date-based#django.views.generic.dates.BaseDateListView&quot;&gt;&lt;code&gt;django.views.generic.dates.BaseDateListView&lt;/code&gt;&lt;/a&gt;), the template&amp;rsquo;s context will be:</source>
          <target state="translated">&lt;a href=&quot;mixins-multiple-object#django.views.generic.list.MultipleObjectMixin&quot;&gt; &lt;code&gt;django.views.generic.list.MultipleObjectMixin&lt;/code&gt; &lt;/a&gt; ( &lt;a href=&quot;mixins-date-based#django.views.generic.dates.BaseDateListView&quot;&gt; &lt;code&gt;django.views.generic.dates.BaseDateListView&lt;/code&gt; &lt;/a&gt; 를 통해 ) 에서 제공하는 컨텍스트 외에도 템플리트의 컨텍스트는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="9f847ce1f109048a1fb1aa3ac7bebe988e89f275" translate="yes" xml:space="preserve">
          <source>In addition to the following, all extracts for &lt;code&gt;DateField&lt;/code&gt; listed above may also be used on &lt;code&gt;DateTimeField&lt;/code&gt;s .</source>
          <target state="translated">다음에 추가하여 위에 나열된 &lt;code&gt;DateField&lt;/code&gt; 의 모든 추출을 &lt;code&gt;DateTimeField&lt;/code&gt; 에서 사용할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="cc163a8af460b22769a0a66d0e1689102a23ab92" translate="yes" xml:space="preserve">
          <source>In addition to the listed methods, &lt;a href=&quot;#django.core.files.File&quot;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt; exposes the following attributes and methods of its &lt;code&gt;file&lt;/code&gt; object: &lt;code&gt;encoding&lt;/code&gt;, &lt;code&gt;fileno&lt;/code&gt;, &lt;code&gt;flush&lt;/code&gt;, &lt;code&gt;isatty&lt;/code&gt;, &lt;code&gt;newlines&lt;/code&gt;, &lt;code&gt;read&lt;/code&gt;, &lt;code&gt;readinto&lt;/code&gt;, &lt;code&gt;readline&lt;/code&gt;, &lt;code&gt;readlines&lt;/code&gt;, &lt;code&gt;seek&lt;/code&gt;, &lt;code&gt;tell&lt;/code&gt;, &lt;code&gt;truncate&lt;/code&gt;, &lt;code&gt;write&lt;/code&gt;, &lt;code&gt;writelines&lt;/code&gt;, &lt;code&gt;readable()&lt;/code&gt;, &lt;code&gt;writable()&lt;/code&gt;, and &lt;code&gt;seekable()&lt;/code&gt;.</source>
          <target state="translated">나열된 메소드 외에도 &lt;a href=&quot;#django.core.files.File&quot;&gt; &lt;code&gt;File&lt;/code&gt; &lt;/a&gt; 은 &lt;code&gt;file&lt;/code&gt; 오브젝트 의 다음 속성 및 메소드를 표시 합니다. &lt;code&gt;encoding&lt;/code&gt; , &lt;code&gt;fileno&lt;/code&gt; , &lt;code&gt;flush&lt;/code&gt; , &lt;code&gt;isatty&lt;/code&gt; , &lt;code&gt;newlines&lt;/code&gt; , &lt;code&gt;read&lt;/code&gt; , &lt;code&gt;readinto&lt;/code&gt; , &lt;code&gt;readline&lt;/code&gt; , &lt;code&gt;readlines&lt;/code&gt; , &lt;code&gt;seek&lt;/code&gt; , &lt;code&gt;tell&lt;/code&gt; , &lt;code&gt;truncate&lt;/code&gt; , &lt;code&gt;write&lt;/code&gt; , &lt;code&gt;writelines&lt;/code&gt; , &lt;code&gt;readable()&lt;/code&gt; , &lt;code&gt;writable()&lt;/code&gt; 및 &lt;code&gt;seekable()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d138f7de7bbc3af07a0fb71bb0320df5a1bd9111" translate="yes" xml:space="preserve">
          <source>In addition to the officially supported databases, there are &lt;a href=&quot;../ref/databases#third-party-notes&quot;&gt;backends provided by 3rd parties&lt;/a&gt; that allow you to use other databases with Django.</source>
          <target state="translated">공식적으로 지원되는 데이터베이스 외에도 Django와 함께 다른 데이터베이스를 사용할 수있는 &lt;a href=&quot;../ref/databases#third-party-notes&quot;&gt;타사에서 제공하는 백엔드&lt;/a&gt; 가 있습니다.</target>
        </trans-unit>
        <trans-unit id="38ffcb3817bbbd2551f77d39d51caba8b51562b9" translate="yes" xml:space="preserve">
          <source>In addition to the officially supported databases, there are backends provided by 3rd parties that allow you to use other databases with Django:</source>
          <target state="translated">공식적으로 지원되는 데이터베이스 외에도 Django에서 다른 데이터베이스를 사용할 수있는 타사에서 제공하는 백엔드가 있습니다.</target>
        </trans-unit>
        <trans-unit id="1db79a28d08359b046f49991e77de295d5e703c7" translate="yes" xml:space="preserve">
          <source>In addition to the optional arguments of its parent &lt;a href=&quot;#django.core.validators.RegexValidator&quot;&gt;&lt;code&gt;RegexValidator&lt;/code&gt;&lt;/a&gt; class, &lt;code&gt;URLValidator&lt;/code&gt; accepts an extra optional attribute:</source>
          <target state="translated">부모의 선택적 인수 외에도 &lt;a href=&quot;#django.core.validators.RegexValidator&quot;&gt; &lt;code&gt;RegexValidator&lt;/code&gt; 의&lt;/a&gt; 클래스 &lt;code&gt;URLValidator&lt;/code&gt; 은 별도의 선택적 속성을 허용합니다</target>
        </trans-unit>
        <trans-unit id="0a4a0c3d6f62b599c6443f955946a232e25c4126" translate="yes" xml:space="preserve">
          <source>In addition to the options of the &lt;code&gt;json&lt;/code&gt; serializer, the &lt;code&gt;geojson&lt;/code&gt; serializer accepts the following additional option when it is called by &lt;code&gt;serializers.serialize()&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;json&lt;/code&gt; serializer 의 옵션 외에도 &lt;code&gt;geojson&lt;/code&gt; serializer는 &lt;code&gt;serializers.serialize()&lt;/code&gt; 의해 호출 될 때 다음 추가 옵션을 허용합니다 .</target>
        </trans-unit>
        <trans-unit id="75907cde4d6071df1af2b10556dffed4d3fefdf2" translate="yes" xml:space="preserve">
          <source>In addition to the regular &lt;a href=&quot;../../forms/fields#core-field-arguments&quot;&gt;form field arguments&lt;/a&gt;, GeoDjango form fields take the following optional arguments.</source>
          <target state="translated">일반 &lt;a href=&quot;../../forms/fields#core-field-arguments&quot;&gt;양식 필드 인수&lt;/a&gt; 외에도 GeoDjango 양식 필드에는 다음과 같은 선택적 인수가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="fab30d8fa172502cea3f7aebdb228bfeb4d6d2f0" translate="yes" xml:space="preserve">
          <source>In addition to the regular &lt;a href=&quot;../../models/fields#common-model-field-options&quot;&gt;Field options&lt;/a&gt; available for Django model fields, spatial fields have the following additional options. All are optional.</source>
          <target state="translated">Django 모델 필드에 사용 가능한 일반 &lt;a href=&quot;../../models/fields#common-model-field-options&quot;&gt;필드 옵션&lt;/a&gt; 외에도 공간 필드에는 다음과 같은 추가 옵션이 있습니다. 모두 선택 사항입니다.</target>
        </trans-unit>
        <trans-unit id="bcac2853c813ab81bdb91abe9b8fe01ccb15cb5c" translate="yes" xml:space="preserve">
          <source>In addition to the special attributes that are available for &lt;a href=&quot;#django.db.models.FileField&quot;&gt;&lt;code&gt;FileField&lt;/code&gt;&lt;/a&gt;, an &lt;a href=&quot;#django.db.models.ImageField&quot;&gt;&lt;code&gt;ImageField&lt;/code&gt;&lt;/a&gt; also has &lt;code&gt;height&lt;/code&gt; and &lt;code&gt;width&lt;/code&gt; attributes.</source>
          <target state="translated">사용할 수있는 특별한 속성 외에도 &lt;a href=&quot;#django.db.models.FileField&quot;&gt; &lt;code&gt;FileField&lt;/code&gt; 와&lt;/a&gt; , &lt;a href=&quot;#django.db.models.ImageField&quot;&gt; &lt;code&gt;ImageField&lt;/code&gt; 는&lt;/a&gt; 또한이 &lt;code&gt;height&lt;/code&gt; 와 &lt;code&gt;width&lt;/code&gt; 속성을.</target>
        </trans-unit>
        <trans-unit id="14e5e76a34a70eeb072f8cbe5905434d81e71e1b" translate="yes" xml:space="preserve">
          <source>In addition to these configuration steps, you&amp;rsquo;ll also need to actually serve the static files.</source>
          <target state="translated">이러한 구성 단계 외에도 실제로 정적 파일을 제공해야합니다.</target>
        </trans-unit>
        <trans-unit id="c2c243a6eca738bdaa3a92ec6f2b8a90ad5218f3" translate="yes" xml:space="preserve">
          <source>In addition to these, &lt;a href=&quot;#django.template.RequestContext&quot;&gt;&lt;code&gt;RequestContext&lt;/code&gt;&lt;/a&gt; always enables &lt;code&gt;'django.template.context_processors.csrf'&lt;/code&gt;. This is a security related context processor required by the admin and other contrib apps, and, in case of accidental misconfiguration, it is deliberately hardcoded in and cannot be turned off in the &lt;code&gt;context_processors&lt;/code&gt; option.</source>
          <target state="translated">이외에도 &lt;a href=&quot;#django.template.RequestContext&quot;&gt; &lt;code&gt;RequestContext&lt;/code&gt; 는&lt;/a&gt; 항상 &lt;code&gt;'django.template.context_processors.csrf'&lt;/code&gt; 를 활성화 합니다. 이것은 관리자 및 기타 contrib 앱에 필요한 보안 관련 컨텍스트 프로세서이며 실수로 잘못 구성한 경우 의도적으로 하드 코딩되어 있으며 &lt;code&gt;context_processors&lt;/code&gt; 옵션 에서 끌 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="09d1558db313d92c5461aa77b23628bc5f54ef5a" translate="yes" xml:space="preserve">
          <source>In addition to web links, &lt;code&gt;urlize&lt;/code&gt; also converts email addresses into &lt;code&gt;mailto:&lt;/code&gt; links. If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;&quot;Send questions to foo@example.com&quot;&lt;/code&gt;, the output will be &lt;code&gt;&quot;Send questions to &amp;lt;a href=&quot;mailto:foo@example.com&quot;&amp;gt;foo@example.com&amp;lt;/a&amp;gt;&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;urlize&lt;/code&gt; 는 웹 링크 외에도 이메일 주소를 &lt;code&gt;mailto:&lt;/code&gt; 링크 로 변환 합니다. 경우 &lt;code&gt;value&lt;/code&gt; 있다 &lt;code&gt;&quot;Send questions to foo@example.com&quot;&lt;/code&gt; 출력이 될 것 &lt;code&gt;&quot;Send questions to &amp;lt;a href=&quot;mailto:foo@example.com&quot;&amp;gt;foo@example.com&amp;lt;/a&amp;gt;&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="fb3cc5db265feffd76588b55bfe91ebe04db4bd8" translate="yes" xml:space="preserve">
          <source>In addition, &lt;code&gt;LineString&lt;/code&gt; objects may also be created by passing in a single sequence of coordinate or &lt;a href=&quot;#django.contrib.gis.geos.Point&quot;&gt;&lt;code&gt;Point&lt;/code&gt;&lt;/a&gt; objects:</source>
          <target state="translated">또한 &lt;code&gt;LineString&lt;/code&gt; 객체는 단일 좌표 시퀀스 또는 &lt;a href=&quot;#django.contrib.gis.geos.Point&quot;&gt; &lt;code&gt;Point&lt;/code&gt; &lt;/a&gt; 객체 를 전달하여 만들 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="092a2edd2b26995b6c73e6e9e9e504760cdc3b10" translate="yes" xml:space="preserve">
          <source>In addition, &lt;code&gt;QueryDict&lt;/code&gt; has the following methods:</source>
          <target state="translated">또한 &lt;code&gt;QueryDict&lt;/code&gt; 에는 다음과 같은 메소드가 있습니다.</target>
        </trans-unit>
        <trans-unit id="003bc4accc874f1fef4668d4b87997f905b9b76e" translate="yes" xml:space="preserve">
          <source>In addition, &lt;code&gt;manage.py&lt;/code&gt; is automatically created in each Django project. It does the same thing as &lt;code&gt;django-admin&lt;/code&gt; but also sets the &lt;a href=&quot;../topics/settings#envvar-DJANGO_SETTINGS_MODULE&quot; id=&quot;index-0&quot;&gt;&lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt;&lt;/a&gt; environment variable so that it points to your project&amp;rsquo;s &lt;code&gt;settings.py&lt;/code&gt; file.</source>
          <target state="translated">또한 각 장고 프로젝트에서 &lt;code&gt;manage.py&lt;/code&gt; 가 자동으로 생성됩니다. &lt;code&gt;django-admin&lt;/code&gt; 과 동일한 작업을 수행 하지만 프로젝트의 &lt;code&gt;settings.py&lt;/code&gt; 파일을 가리 키도록 &lt;a href=&quot;../topics/settings#envvar-DJANGO_SETTINGS_MODULE&quot; id=&quot;index-0&quot;&gt; &lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt; &lt;/a&gt; 환경 변수도 설정 합니다.</target>
        </trans-unit>
        <trans-unit id="42da778e8ed7bdaf3955ad5f72d2ff5536335b45" translate="yes" xml:space="preserve">
          <source>In addition, &lt;code&gt;message/rfc822&lt;/code&gt; attachments will no longer be base64-encoded in violation of &lt;a href=&quot;https://tools.ietf.org/html/rfc2046.html#section-5.2.1&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;RFC 2046#section-5.2.1&lt;/strong&gt;&lt;/a&gt;, which can cause issues with displaying the attachments in &lt;a href=&quot;https://bugzilla.gnome.org/show_bug.cgi?id=651197&quot;&gt;Evolution&lt;/a&gt; and &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=333880&quot;&gt;Thunderbird&lt;/a&gt;.</source>
          <target state="translated">또한 &lt;a href=&quot;https://tools.ietf.org/html/rfc2046.html#section-5.2.1&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;RFC 2046 # section-5.2.1&lt;/strong&gt;&lt;/a&gt; 을 위반 하여 &lt;code&gt;message/rfc822&lt;/code&gt; 첨부 파일이 더 이상 base64로 인코딩되지 않으므로 &lt;a href=&quot;https://bugzilla.gnome.org/show_bug.cgi?id=651197&quot;&gt;Evolution&lt;/a&gt; 및 &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=333880&quot;&gt;Thunderbird&lt;/a&gt; 에서 첨부 파일을 표시하는 데 문제가 발생할 수 있습니다 .&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8e4cb7c7a0731de3ea837edf11710dd02a514d0f" translate="yes" xml:space="preserve">
          <source>In addition, Django applies the following rule: if you set &lt;code&gt;editable=False&lt;/code&gt; on the model field, &lt;em&gt;any&lt;/em&gt; form created from the model via &lt;code&gt;ModelForm&lt;/code&gt; will not include that field.</source>
          <target state="translated">또한, 장고는 다음과 같은 규칙을 적용 : 사용자가 설정 한 경우 &lt;code&gt;editable=False&lt;/code&gt; 모델 필드에, &lt;em&gt;어떤&lt;/em&gt; 을 통해 모델에서 생성 된 형태 &lt;code&gt;ModelForm&lt;/code&gt; 는 해당 필드가 포함되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="30a99ac2f20a9d7ce513beb52192fea90a5cd0c6" translate="yes" xml:space="preserve">
          <source>In addition, Django provides enumeration types that you can subclass to define choices in a concise way:</source>
          <target state="translated">또한 Django는 서브 클래스로 간결한 방식으로 선택을 정의 할 수있는 열거 유형을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="c8a09597939bdcb71e0faa18c3b3a20ccef0e692" translate="yes" xml:space="preserve">
          <source>In addition, MySQL will fully rewrite tables for almost every schema operation and generally takes a time proportional to the number of rows in the table to add or remove columns. On slower hardware this can be worse than a minute per million rows - adding a few columns to a table with just a few million rows could lock your site up for over ten minutes.</source>
          <target state="translated">또한 MySQL은 거의 모든 스키마 작업에 대해 테이블을 완전히 다시 작성하며 일반적으로 테이블의 행 수에 비례하여 열을 추가하거나 제거하는 데 시간이 걸립니다. 느린 하드웨어에서는 백만 행당 1 분보다 나빠질 수 있습니다. 몇 백만 행으로 테이블에 몇 개의 열을 추가하면 사이트가 10 분 이상 잠길 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="80f1a60fae36c3742c0b6b4ed6f4684b7d6979d1" translate="yes" xml:space="preserve">
          <source>In addition, add the &lt;code&gt;DYLD_FALLBACK_LIBRARY_PATH&lt;/code&gt; setting so that the libraries can be found by Python:</source>
          <target state="translated">또한 Python에서 라이브러리를 찾을 수 있도록 &lt;code&gt;DYLD_FALLBACK_LIBRARY_PATH&lt;/code&gt; 설정을 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="0d00c3d27b51ce30fb9025d5d42429ee3fad5033" translate="yes" xml:space="preserve">
          <source>In addition, as JSON supports only string keys, note that using non-string keys in &lt;code&gt;request.session&lt;/code&gt; won&amp;rsquo;t work as expected:</source>
          <target state="translated">또한 JSON은 문자열 키만 지원하므로 &lt;code&gt;request.session&lt;/code&gt; 에서 문자열이 아닌 키를 사용 하면 예상대로 작동하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="193e94f351cba3a0360a6e545faac2e59e822fc0" translate="yes" xml:space="preserve">
          <source>In addition, coordinates/components of the geometry may added or modified, just like a Python list:</source>
          <target state="translated">또한 지오메트리의 좌표 / 구성 요소는 Python 목록과 같이 추가 또는 수정 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3ddf753e80872dd11269d2a3533531f2d9a256cc" translate="yes" xml:space="preserve">
          <source>In addition, each generated form field has attributes set as follows:</source>
          <target state="translated">또한 생성 된 각 양식 필드에는 다음과 같이 속성이 설정되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="e0d877515ca9c31768db2b55639e4f4d3d64d88a" translate="yes" xml:space="preserve">
          <source>In addition, for HTTPS requests, strict referer checking is done by &lt;code&gt;CsrfViewMiddleware&lt;/code&gt;. This means that even if a subdomain can set or modify cookies on your domain, it can&amp;rsquo;t force a user to post to your application since that request won&amp;rsquo;t come from your own exact domain.</source>
          <target state="translated">또한 HTTPS 요청의 경우 &lt;code&gt;CsrfViewMiddleware&lt;/code&gt; 가 엄격한 참조 검사를 수행합니다 . 이는 하위 도메인이 도메인에서 쿠키를 설정하거나 수정할 수있는 경우에도 요청이 사용자의 정확한 도메인에서 온 것이 아니기 때문에 사용자가 애플리케이션에 게시하도록 강제 할 수 없음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="609772e6e1f8a2aa06a07103e8048bef77e6acf0" translate="yes" xml:space="preserve">
          <source>In addition, if you are using the template system to output something other than HTML, there may be entirely separate characters and words which require escaping.</source>
          <target state="translated">또한 템플릿 시스템을 사용하여 HTML 이외의 것을 출력하는 경우에는 이스케이프가 필요한 문자와 단어가 완전히 분리 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="271507652d7f3c6c044a78d1ab9d1f40af16ab01" translate="yes" xml:space="preserve">
          <source>In addition, if your class provides local file storage, it must override the &lt;code&gt;path()&lt;/code&gt; method.</source>
          <target state="translated">또한 클래스가 로컬 파일 스토리지를 제공하는 경우 &lt;code&gt;path()&lt;/code&gt; 메소드를 대체해야합니다 .</target>
        </trans-unit>
        <trans-unit id="f41a663166406e5affa41f624b0f5ba10f8271ea" translate="yes" xml:space="preserve">
          <source>In addition, modify the &lt;a href=&quot;../../settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; setting to include &lt;a href=&quot;../admin/index#module-django.contrib.admin&quot;&gt;&lt;code&gt;django.contrib.admin&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;index#module-django.contrib.gis&quot;&gt;&lt;code&gt;django.contrib.gis&lt;/code&gt;&lt;/a&gt;, and &lt;code&gt;world&lt;/code&gt; (your newly created application):</source>
          <target state="translated">또한 &lt;a href=&quot;../admin/index#module-django.contrib.admin&quot;&gt; &lt;code&gt;django.contrib.admin&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;index#module-django.contrib.gis&quot;&gt; &lt;code&gt;django.contrib.gis&lt;/code&gt; &lt;/a&gt; 및 &lt;code&gt;world&lt;/code&gt; (새로 만든 응용 프로그램) 를 포함 하도록 &lt;a href=&quot;../../settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt; 설정을 수정하십시오 .</target>
        </trans-unit>
        <trans-unit id="e0cf7f24ea8838462019e7f2d8be131526d91e9c" translate="yes" xml:space="preserve">
          <source>In addition, only &lt;code&gt;LIMIT&lt;/code&gt;, &lt;code&gt;OFFSET&lt;/code&gt;, &lt;code&gt;COUNT(*)&lt;/code&gt;, &lt;code&gt;ORDER BY&lt;/code&gt;, and specifying columns (i.e. slicing, &lt;a href=&quot;#django.db.models.query.QuerySet.count&quot;&gt;&lt;code&gt;count()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#django.db.models.query.QuerySet.order_by&quot;&gt;&lt;code&gt;order_by()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#django.db.models.query.QuerySet.values&quot;&gt;&lt;code&gt;values()&lt;/code&gt;&lt;/a&gt;/&lt;a href=&quot;#django.db.models.query.QuerySet.values_list&quot;&gt;&lt;code&gt;values_list()&lt;/code&gt;&lt;/a&gt;) are allowed on the resulting &lt;code&gt;QuerySet&lt;/code&gt;. Further, databases place restrictions on what operations are allowed in the combined queries. For example, most databases don&amp;rsquo;t allow &lt;code&gt;LIMIT&lt;/code&gt; or &lt;code&gt;OFFSET&lt;/code&gt; in the combined queries.</source>
          <target state="translated">또한, 오직 &lt;code&gt;LIMIT&lt;/code&gt; , &lt;code&gt;OFFSET&lt;/code&gt; , &lt;code&gt;COUNT(*)&lt;/code&gt; , &lt;code&gt;ORDER BY&lt;/code&gt; , 및 열을 지정 (즉, 슬라이싱, &lt;a href=&quot;#django.db.models.query.QuerySet.count&quot;&gt; &lt;code&gt;count()&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#django.db.models.query.QuerySet.order_by&quot;&gt; &lt;code&gt;order_by()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#django.db.models.query.QuerySet.values&quot;&gt; &lt;code&gt;values()&lt;/code&gt; &lt;/a&gt; / &lt;a href=&quot;#django.db.models.query.QuerySet.values_list&quot;&gt; &lt;code&gt;values_list()&lt;/code&gt; &lt;/a&gt; ) 생성에 허용되는 &lt;code&gt;QuerySet&lt;/code&gt; . 또한 데이터베이스는 결합 된 쿼리에서 허용되는 작업에 제한을 둡니다. 예를 들어, 대부분의 데이터베이스는 결합 된 쿼리에서 &lt;code&gt;LIMIT&lt;/code&gt; 또는 &lt;code&gt;OFFSET&lt;/code&gt; 을 허용하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="073651aeeb0daff1ea4b8f8b97a8fcd077d19c9e" translate="yes" xml:space="preserve">
          <source>In addition, shapefiles also support attribute fields that may contain additional data. Here are the fields on the World Borders layer:</source>
          <target state="translated">또한 shapefile은 추가 데이터를 포함 할 수있는 속성 필드도 지원합니다. World Borders 레이어의 필드는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="6182146b091f830549eb231420eb3ef3684d03ab" translate="yes" xml:space="preserve">
          <source>In addition, some objects are automatically created just after &lt;a href=&quot;../../ref/django-admin#django-admin-migrate&quot;&gt;&lt;code&gt;migrate&lt;/code&gt;&lt;/a&gt; creates a table to hold them in a database:</source>
          <target state="translated">또한 일부 오브젝트는 &lt;a href=&quot;../../ref/django-admin#django-admin-migrate&quot;&gt; &lt;code&gt;migrate&lt;/code&gt; &lt;/a&gt; 가 데이터베이스에 보유 할 테이블을 작성한 직후에 자동으로 작성 됩니다.</target>
        </trans-unit>
        <trans-unit id="602a62df0ea4d621c4bb672ddce2276a2ba75e0f" translate="yes" xml:space="preserve">
          <source>In addition, the concrete base classes of the model are stored as pointers, so you must always keep base classes around for as long as there is a migration that contains a reference to them. On the plus side, methods and managers from these base classes inherit normally, so if you absolutely need access to these you can opt to move them into a superclass.</source>
          <target state="translated">또한 모델의 구체적인 기본 클래스는 포인터로 저장되므로 참조를 포함하는 마이그레이션이있는 한 항상 기본 클래스를 유지해야합니다. 또한 기본 클래스의 메소드와 관리자는 정상적으로 상속되므로 절대적으로 액세스 해야하는 경우 수퍼 클래스로 옮길 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ecc2eb2c3ab555cfa8732961afb123db30b159c9" translate="yes" xml:space="preserve">
          <source>In addition, there&amp;rsquo;s a utility function:</source>
          <target state="translated">또한 유틸리티 기능이 있습니다.</target>
        </trans-unit>
        <trans-unit id="5cb0790e9c7133e4cc81702a5b48be8ffd4efd86" translate="yes" xml:space="preserve">
          <source>In addition, to allow Python template files that contain Django template language syntax while also preventing packaging systems from trying to byte-compile invalid &lt;code&gt;*.py&lt;/code&gt; files, template files ending with &lt;code&gt;.py-tpl&lt;/code&gt; will be renamed to &lt;code&gt;.py&lt;/code&gt;.</source>
          <target state="translated">또한 Django 템플릿 언어 구문이 포함 된 Python 템플릿 파일을 허용하면서 패키징 시스템이 잘못된 &lt;code&gt;*.py&lt;/code&gt; 파일 을 바이트 컴파일하지 못하게하기 위해 &lt;code&gt;.py-tpl&lt;/code&gt; 로 끝나는 템플릿 파일의 이름은 &lt;code&gt;.py&lt;/code&gt; 로 변경됩니다 .</target>
        </trans-unit>
        <trans-unit id="f39294b8048c718f8bb8084ffe106424b63a64a2" translate="yes" xml:space="preserve">
          <source>In addition, to cut down on the repetitive nature of loading and rendering templates, Django provides a shortcut function which automates the process.</source>
          <target state="translated">또한 로딩 및 렌더링 템플릿의 반복적 인 특성을 줄이기 위해 Django는 프로세스를 자동화하는 바로 가기 기능을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="be8f95e23db63b8ed19a44c8deba6d75e37d2dc0" translate="yes" xml:space="preserve">
          <source>In addition, try to avoid returning values as positional arguments; where possible, return values as keyword arguments for maximum future compatibility. Of course, if you change the names of things more often than their position in the constructor&amp;rsquo;s argument list, you might prefer positional, but bear in mind that people will be reconstructing your field from the serialized version for quite a while (possibly years), depending how long your migrations live for.</source>
          <target state="translated">또한 값을 위치 인수로 반환하지 않도록하십시오. 가능한 경우 미래의 호환성을 극대화하기 위해 값을 키워드 인수로 반환하십시오. 물론 생성자의 인수 목록에서 자신의 위치보다 사물의 이름을 더 자주 변경하는 경우 위치를 선호 할 수 있지만 사람들이 직렬화 된 버전에서 필드를 꽤 오랫동안 (아마도 몇 년 동안) 재구성 할 것임을 명심해야합니다. 마이그레이션 기간에 따라 다릅니다.</target>
        </trans-unit>
        <trans-unit id="d3643c4f39cc7b043d095a8d10a730426bd124d2" translate="yes" xml:space="preserve">
          <source>In addition, you may run into a &lt;code&gt;CircularDependencyError&lt;/code&gt; when running your migrations as Django won&amp;rsquo;t be able to automatically break the dependency loop due to the dynamic dependency. If you see this error, you should break the loop by moving the models depended on by your user model into a second migration. (You can try making two normal models that have a &lt;code&gt;ForeignKey&lt;/code&gt; to each other and seeing how &lt;code&gt;makemigrations&lt;/code&gt; resolves that circular dependency if you want to see how it&amp;rsquo;s usually done.)</source>
          <target state="translated">또한 Django가 동적 종속성으로 인해 종속성 루프를 자동으로 중단 할 수 없으므로 마이그레이션을 실행할 때 &lt;code&gt;CircularDependencyError&lt;/code&gt; 가 발생할 수 있습니다 . 이 오류가 표시되면 사용자 모델이 의존하는 모델을 두 번째 마이그레이션으로 이동하여 루프를 끊어야합니다. ( &lt;code&gt;ForeignKey&lt;/code&gt; 가 서로 다른 두 개의 일반 모델을 만들고 일반적인 &lt;code&gt;makemigrations&lt;/code&gt; 방법을 확인하려는 경우 makemigrations 가 순환 종속성을 어떻게 해결하는지 확인할 수 있습니다.)</target>
        </trans-unit>
        <trans-unit id="6c07cdf9206331466980546d8b1cf47350f9dec8" translate="yes" xml:space="preserve">
          <source>In all cases the name of the directory containing the translation is expected to be named using &lt;a href=&quot;index#term-locale-name&quot;&gt;locale name&lt;/a&gt; notation. E.g. &lt;code&gt;de&lt;/code&gt;, &lt;code&gt;pt_BR&lt;/code&gt;, &lt;code&gt;es_AR&lt;/code&gt;, etc. Untranslated strings for territorial language variants use the translations of the generic language. For example, untranslated &lt;code&gt;pt_BR&lt;/code&gt; strings use &lt;code&gt;pt&lt;/code&gt; translations.</source>
          <target state="translated">모든 경우에 번역을 포함하는 디렉토리의 이름은 &lt;a href=&quot;index#term-locale-name&quot;&gt;로케일 이름&lt;/a&gt; 표기법을 사용하여 이름이 지정 됩니다. 예 &lt;code&gt;de&lt;/code&gt; , &lt;code&gt;pt_BR&lt;/code&gt; , &lt;code&gt;es_AR&lt;/code&gt; 등, 영토 언어 변종에 대한 번역되지 않은 문자열은 일반 언어의 번역을 사용합니다. 예를 들어, 번역되지 않은 &lt;code&gt;pt_BR&lt;/code&gt; 문자열은 &lt;code&gt;pt&lt;/code&gt; 변환을 사용 합니다.</target>
        </trans-unit>
        <trans-unit id="72cd5697475afea58d2e7c1ba3fcfc8ea3cf3530" translate="yes" xml:space="preserve">
          <source>In all other respects, the &lt;code&gt;InlineModelAdmin&lt;/code&gt; is exactly the same as any other. You can customize the appearance using any of the normal &lt;code&gt;ModelAdmin&lt;/code&gt; properties.</source>
          <target state="translated">다른 모든 측면에서 &lt;code&gt;InlineModelAdmin&lt;/code&gt; 은 다른 것과 동일합니다. 일반적인 &lt;code&gt;ModelAdmin&lt;/code&gt; 속성을 사용하여 모양을 사용자 지정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e9d5e238bac9efc00000ed6f69e2747cbb0fb9ac" translate="yes" xml:space="preserve">
          <source>In an &lt;a href=&quot;#django.http.HttpRequest&quot;&gt;&lt;code&gt;HttpRequest&lt;/code&gt;&lt;/a&gt; object, the &lt;a href=&quot;#django.http.HttpRequest.GET&quot;&gt;&lt;code&gt;GET&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#django.http.HttpRequest.POST&quot;&gt;&lt;code&gt;POST&lt;/code&gt;&lt;/a&gt; attributes are instances of &lt;code&gt;django.http.QueryDict&lt;/code&gt;, a dictionary-like class customized to deal with multiple values for the same key. This is necessary because some HTML form elements, notably &lt;code&gt;&amp;lt;select multiple&amp;gt;&lt;/code&gt;, pass multiple values for the same key.</source>
          <target state="translated">에서 &lt;a href=&quot;#django.http.HttpRequest&quot;&gt; &lt;code&gt;HttpRequest&lt;/code&gt; 에&lt;/a&gt; 객체의 &lt;a href=&quot;#django.http.HttpRequest.GET&quot;&gt; &lt;code&gt;GET&lt;/code&gt; &lt;/a&gt; 과 &lt;a href=&quot;#django.http.HttpRequest.POST&quot;&gt; &lt;code&gt;POST&lt;/code&gt; 의&lt;/a&gt; 속성의 인스턴스 &lt;code&gt;django.http.QueryDict&lt;/code&gt; 는 , 사전과 같은 동일한 키에 대해 여러 값을 처리하는 사용자 정의 클래스입니다. &lt;code&gt;&amp;lt;select multiple&amp;gt;&lt;/code&gt; 과 같은 일부 HTML 양식 요소 는 동일한 키에 대해 여러 값을 전달 하기 때문에 필요 합니다.</target>
        </trans-unit>
        <trans-unit id="125593a33b52de9b2649a843eba4f9a9f643a393" translate="yes" xml:space="preserve">
          <source>In any case, you should always be able to &lt;a href=&quot;#spatialite-source&quot;&gt;install from source&lt;/a&gt;.</source>
          <target state="translated">어쨌든 항상 &lt;a href=&quot;#spatialite-source&quot;&gt;source&lt;/a&gt; 에서 설치할 수 있어야합니다 .</target>
        </trans-unit>
        <trans-unit id="26372be3d62eb8474ab024118b757738445b8b1e" translate="yes" xml:space="preserve">
          <source>In any directory named in the &lt;a href=&quot;settings#std:setting-FIXTURE_DIRS&quot;&gt;&lt;code&gt;FIXTURE_DIRS&lt;/code&gt;&lt;/a&gt; setting</source>
          <target state="translated">&lt;a href=&quot;settings#std:setting-FIXTURE_DIRS&quot;&gt; &lt;code&gt;FIXTURE_DIRS&lt;/code&gt; &lt;/a&gt; 설정에 이름이 지정된 디렉토리에서</target>
        </trans-unit>
        <trans-unit id="c617f38771b04f4bc99f2332d1dc8deca3569a57" translate="yes" xml:space="preserve">
          <source>In any template that uses a POST form, use the &lt;a href=&quot;templates/builtins#std:templatetag-csrf_token&quot;&gt;&lt;code&gt;csrf_token&lt;/code&gt;&lt;/a&gt; tag inside the &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; element if the form is for an internal URL, e.g.:</source>
          <target state="translated">POST 양식을 사용하는 템플리트 에서 양식이 내부 URL에 대한 양식 인 경우 &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; 요소 내에 &lt;a href=&quot;templates/builtins#std:templatetag-csrf_token&quot;&gt; &lt;code&gt;csrf_token&lt;/code&gt; &lt;/a&gt; 태그를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="9584b79fc48ff0575ab4a3e73aa30d63351d2fd1" translate="yes" xml:space="preserve">
          <source>In both cases, &amp;ldquo;absolute path&amp;rdquo; means a URL that doesn&amp;rsquo;t include the protocol or domain. Examples:</source>
          <target state="translated">두 경우 모두 &quot;절대 경로&quot;는 프로토콜 또는 도메인을 포함하지 않는 URL을 의미합니다. 예 :</target>
        </trans-unit>
        <trans-unit id="ad26be7567d5ea62f6cbf975fb69c51dd3b9c5ff" translate="yes" xml:space="preserve">
          <source>In case a template var (&lt;code&gt;myvar&lt;/code&gt; above) is passed to the tag, the tag will first resolve such variable to a string at run-time and then look up that string in the message catalogs.</source>
          <target state="translated">템플릿 var ( 위의 &lt;code&gt;myvar&lt;/code&gt; )가 태그에 전달되면 태그는 먼저 런타임에 이러한 변수를 문자열로 확인한 다음 메시지 카탈로그에서 해당 문자열을 찾습니다.</target>
        </trans-unit>
        <trans-unit id="2ac2ff181891a9196cfcb6c36702ae8d31f48781" translate="yes" xml:space="preserve">
          <source>In case it is a callable, it accepts the model instance as a parameter. For example:</source>
          <target state="translated">호출 가능한 경우 모델 인스턴스를 매개 변수로 승인합니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="c754ae6f658d028d73d2c46131b5071580be6e76" translate="yes" xml:space="preserve">
          <source>In case you want to override a setting for a test method, Django provides the &lt;a href=&quot;#django.test.override_settings&quot;&gt;&lt;code&gt;override_settings()&lt;/code&gt;&lt;/a&gt; decorator (see &lt;a href=&quot;https://www.python.org/dev/peps/pep-0318&quot; id=&quot;index-2&quot;&gt;&lt;strong&gt;PEP 318&lt;/strong&gt;&lt;/a&gt;). It&amp;rsquo;s used like this:</source>
          <target state="translated">테스트 방법에 대한 설정을 재정의하려는 경우 Django는 &lt;a href=&quot;#django.test.override_settings&quot;&gt; &lt;code&gt;override_settings()&lt;/code&gt; &lt;/a&gt; 데코레이터를 제공합니다 ( &lt;a href=&quot;https://www.python.org/dev/peps/pep-0318&quot; id=&quot;index-2&quot;&gt;&lt;strong&gt;PEP 318&lt;/strong&gt;&lt;/a&gt; 참조 ). 다음과 같이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="14bf4df5347afc16b3429fb63cb4de3162b6824c" translate="yes" xml:space="preserve">
          <source>In case you want to refer to files in one of the locations with an additional namespace, you can &lt;strong&gt;optionally&lt;/strong&gt; provide a prefix as &lt;code&gt;(prefix, path)&lt;/code&gt; tuples, e.g.:</source>
          <target state="translated">추가 네임 스페이스가있는 위치 중 하나에있는 파일을 참조하려는 경우 &lt;strong&gt;선택적&lt;/strong&gt; 으로 접두사 &lt;code&gt;(prefix, path)&lt;/code&gt; 튜플을 제공 할 수 있습니다 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="d992ed68ceac74ca140820c822217fa435f7818c" translate="yes" xml:space="preserve">
          <source>In case your custom field needs a special conversion when being saved that is not the same as the conversion used for normal query parameters, you can override &lt;a href=&quot;../ref/models/fields#django.db.models.Field.get_db_prep_save&quot;&gt;&lt;code&gt;get_db_prep_save()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">사용자 정의 필드를 저장할 때 일반 조회 매개 변수에 사용 된 변환과 동일하지 않은 특수 변환이 필요한 경우 &lt;a href=&quot;../ref/models/fields#django.db.models.Field.get_db_prep_save&quot;&gt; &lt;code&gt;get_db_prep_save()&lt;/code&gt; &lt;/a&gt; 대체 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e7465849737f4a0d865ae26d03454c4d9bb925c5" translate="yes" xml:space="preserve">
          <source>In case your model defines a range using two fields, instead of the native PostgreSQL range types, you should write an expression that uses the equivalent function (e.g. &lt;code&gt;TsTzRange()&lt;/code&gt;), and use the delimiters for the field. Most often, the delimiters will be &lt;code&gt;'[)'&lt;/code&gt;, meaning that the lower bound is inclusive and the upper bound is exclusive. You may use the &lt;a href=&quot;fields#django.contrib.postgres.fields.RangeBoundary&quot;&gt;&lt;code&gt;RangeBoundary&lt;/code&gt;&lt;/a&gt; that provides an expression mapping for the &lt;a href=&quot;https://www.postgresql.org/docs/current/rangetypes.html#RANGETYPES-INCLUSIVITY&quot;&gt;range boundaries&lt;/a&gt;. For example:</source>
          <target state="translated">모델이 기본 PostgreSQL 범위 유형 대신 두 개의 필드를 사용하여 범위를 정의하는 경우 동등한 함수 (예 : &lt;code&gt;TsTzRange()&lt;/code&gt; ) 를 사용하는 표현식을 작성 하고 필드의 구분자를 사용해야합니다. 대부분의 경우 구분 기호는 &lt;code&gt;'[)'&lt;/code&gt; 이며, 하한이 포함되고 상한이 독점임을 의미합니다. &lt;a href=&quot;https://www.postgresql.org/docs/current/rangetypes.html#RANGETYPES-INCLUSIVITY&quot;&gt;범위 경계에&lt;/a&gt; 대한 식 매핑을 제공하는 &lt;a href=&quot;fields#django.contrib.postgres.fields.RangeBoundary&quot;&gt; &lt;code&gt;RangeBoundary&lt;/code&gt; &lt;/a&gt; 를 사용할 수 있습니다 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="051cd6e750abe4a0440743fc7195e3b28df1345b" translate="yes" xml:space="preserve">
          <source>In cases 1 and 2, the value of the &lt;code&gt;backend&lt;/code&gt; argument or the &lt;code&gt;user.backend&lt;/code&gt; attribute should be a dotted import path string (like that found in &lt;a href=&quot;../../ref/settings#std:setting-AUTHENTICATION_BACKENDS&quot;&gt;&lt;code&gt;AUTHENTICATION_BACKENDS&lt;/code&gt;&lt;/a&gt;), not the actual backend class.</source>
          <target state="translated">경우 1과 2에서, &lt;code&gt;backend&lt;/code&gt; 인수 또는 &lt;code&gt;user.backend&lt;/code&gt; 속성 의 값은 실제 백엔드 클래스가 아닌 점으로 구분 된 가져 오기 경로 문자열이어야합니다 ( &lt;a href=&quot;../../ref/settings#std:setting-AUTHENTICATION_BACKENDS&quot;&gt; &lt;code&gt;AUTHENTICATION_BACKENDS&lt;/code&gt; &lt;/a&gt; 와 유사 ).</target>
        </trans-unit>
        <trans-unit id="d8468a1c5eceb7ad498210c570f09ce1a370656f" translate="yes" xml:space="preserve">
          <source>In contrast to &lt;a href=&quot;#django.http.HttpRequest&quot;&gt;&lt;code&gt;HttpRequest&lt;/code&gt;&lt;/a&gt; objects, which are created automatically by Django, &lt;a href=&quot;#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt; objects are your responsibility. Each view you write is responsible for instantiating, populating, and returning an &lt;a href=&quot;#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Django가 자동으로 생성하는 &lt;a href=&quot;#django.http.HttpRequest&quot;&gt; &lt;code&gt;HttpRequest&lt;/code&gt; &lt;/a&gt; 객체와 달리 &lt;a href=&quot;#django.http.HttpResponse&quot;&gt; &lt;code&gt;HttpResponse&lt;/code&gt; &lt;/a&gt; 객체는 귀하의 책임입니다. 작성하는 각 뷰는 &lt;a href=&quot;#django.http.HttpResponse&quot;&gt; &lt;code&gt;HttpResponse&lt;/code&gt; &lt;/a&gt; 인스턴스화, 채우기 및 리턴을 담당합니다 .</target>
        </trans-unit>
        <trans-unit id="f060f555e740ac3beb8b7312bc9eac7c1f9e16bd" translate="yes" xml:space="preserve">
          <source>In detail, Django automatically opens a connection to the database whenever it needs one and doesn&amp;rsquo;t have one already &amp;mdash; either because this is the first connection, or because the previous connection was closed.</source>
          <target state="translated">구체적으로, Django는 데이터베이스가 필요할 때마다 데이터베이스에 대한 연결을 자동으로 엽니 다.이 연결이 첫 번째 연결이거나 이전 연결이 닫 혔기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="34d24d63eafec4abb1397d46acb8a0d53758ad7a" translate="yes" xml:space="preserve">
          <source>In each of these places, the language preference is expected to be in the standard &lt;a href=&quot;index#term-language-code&quot;&gt;language format&lt;/a&gt;, as a string. For example, Brazilian Portuguese is &lt;code&gt;pt-br&lt;/code&gt;.</source>
          <target state="translated">이러한 각 위치에서 언어 환경 설정은 표준 &lt;a href=&quot;index#term-language-code&quot;&gt;언어 형식&lt;/a&gt; 인 문자열로 예상됩니다 . 예를 들어 브라질 포르투갈어는 &lt;code&gt;pt-br&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="8cd7c1e1e4252d27a4de97d1e3a8a42f6ba5b40c" translate="yes" xml:space="preserve">
          <source>In either case, using only one style within a given regex is recommended. When both styles are mixed, any unnamed groups are ignored and only named groups are passed to the view function.</source>
          <target state="translated">두 경우 모두 주어진 정규 표현식 내에서 하나의 스타일 만 사용하는 것이 좋습니다. 두 스타일이 혼합되면 명명되지 않은 그룹은 무시되고 명명 된 그룹 만보기 기능으로 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="eca740cfe82332cf351f75edde40f7eee9f36561" translate="yes" xml:space="preserve">
          <source>In fact if your form is going to be used to directly add or edit a Django model, a &lt;a href=&quot;modelforms&quot;&gt;ModelForm&lt;/a&gt; can save you a great deal of time, effort, and code, because it will build a form, along with the appropriate fields and their attributes, from a &lt;code&gt;Model&lt;/code&gt; class.</source>
          <target state="translated">실제로 Django 모델을 직접 추가하거나 편집하는 데 양식을 사용하는 경우 &lt;a href=&quot;modelforms&quot;&gt;ModelForm&lt;/a&gt; 을 사용하면 적절한 필드 및 해당 속성과 함께 양식을 작성하므로 많은 시간, 노력 및 코드를 절약 할 수 있습니다. 하는에서 &lt;code&gt;Model&lt;/code&gt; 클래스입니다.</target>
        </trans-unit>
        <trans-unit id="7d9a9c622b4c3cad5652ef1faa625de607bb2ed0" translate="yes" xml:space="preserve">
          <source>In fact, most lookups with &lt;code&gt;__abs&lt;/code&gt; could be implemented as range queries like this, and on most database backends it is likely to be more sensible to do so as you can make use of the indexes. However with PostgreSQL you may want to add an index on &lt;code&gt;abs(change)&lt;/code&gt; which would allow these queries to be very efficient.</source>
          <target state="translated">실제로 &lt;code&gt;__abs&lt;/code&gt; 를 사용하는 대부분의 조회는 이와 같은 범위 쿼리로 구현 될 수 있으며 대부분의 데이터베이스 백엔드에서는 인덱스를 사용할 수 있으므로 그렇게하는 것이 더 합리적 일 수 있습니다. 그러나 PostgreSQL을 사용하면 &lt;code&gt;abs(change)&lt;/code&gt; 에 인덱스를 추가하여 이러한 쿼리를 매우 효율적으로 만들 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="adba40a949f571c0432f75912f911cb4408c8a50" translate="yes" xml:space="preserve">
          <source>In general constraints are &lt;strong&gt;not&lt;/strong&gt; checked during &lt;code&gt;full_clean()&lt;/code&gt;, and do not raise &lt;code&gt;ValidationError&lt;/code&gt;s. Rather you&amp;rsquo;ll get a database integrity error on &lt;code&gt;save()&lt;/code&gt;. &lt;code&gt;UniqueConstraint&lt;/code&gt;s without a &lt;a href=&quot;#django.db.models.UniqueConstraint.condition&quot;&gt;&lt;code&gt;condition&lt;/code&gt;&lt;/a&gt; (i.e. non-partial unique constraints) are different in this regard, in that they leverage the existing &lt;code&gt;validate_unique()&lt;/code&gt; logic, and thus enable two-stage validation. In addition to &lt;code&gt;IntegrityError&lt;/code&gt; on &lt;code&gt;save()&lt;/code&gt;, &lt;code&gt;ValidationError&lt;/code&gt; is also raised during model validation when the &lt;code&gt;UniqueConstraint&lt;/code&gt; is violated.</source>
          <target state="translated">일반적으로 제약에 &lt;strong&gt;없는&lt;/strong&gt; 동안 확인 &lt;code&gt;full_clean()&lt;/code&gt; 및 올리지 마십시오 &lt;code&gt;ValidationError&lt;/code&gt; 들. 오히려 &lt;code&gt;save()&lt;/code&gt; 에서 데이터베이스 무결성 오류가 발생합니다 . &lt;a href=&quot;#django.db.models.UniqueConstraint.condition&quot;&gt; &lt;code&gt;condition&lt;/code&gt; &lt;/a&gt; 없는 &lt;code&gt;UniqueConstraint&lt;/code&gt; (예 : 비 일부 고유 제약 조건)는 기존 &lt;code&gt;validate_unique()&lt;/code&gt; 논리 를 활용 하므로 2 단계 유효성 검사가 가능 하다는 점에서 다릅니다 . 뿐만 아니라 &lt;code&gt;IntegrityError&lt;/code&gt; 에 &lt;code&gt;save()&lt;/code&gt; , &lt;code&gt;ValidationError&lt;/code&gt; 이 경우에도 모델 유효성 검사 중 발생 &lt;code&gt;UniqueConstraint&lt;/code&gt; 를 위반된다.</target>
        </trans-unit>
        <trans-unit id="209edf2940165c6cc1a875e5298008997ec85e40" translate="yes" xml:space="preserve">
          <source>In general, &lt;code&gt;Q() objects&lt;/code&gt; make it possible to define and reuse conditions. This permits the &lt;a href=&quot;../../topics/db/queries#complex-lookups-with-q&quot;&gt;construction of complex database queries&lt;/a&gt; using &lt;code&gt;|&lt;/code&gt; (&lt;code&gt;OR&lt;/code&gt;) and &lt;code&gt;&amp;amp;&lt;/code&gt; (&lt;code&gt;AND&lt;/code&gt;) operators; in particular, it is not otherwise possible to use &lt;code&gt;OR&lt;/code&gt; in &lt;code&gt;QuerySets&lt;/code&gt;.</source>
          <target state="translated">일반적으로 &lt;code&gt;Q() objects&lt;/code&gt; 사용하면 조건을 정의하고 재사용 할 수 있습니다. 이것은 허용 &lt;a href=&quot;../../topics/db/queries#complex-lookups-with-q&quot;&gt;복잡한 데이터베이스 쿼리의 건축&lt;/a&gt; 사용을 &lt;code&gt;|&lt;/code&gt; ( &lt;code&gt;OR&lt;/code&gt; ) 및 &lt;code&gt;&amp;amp;&lt;/code&gt; ( &lt;code&gt;AND&lt;/code&gt; ) 연산자; 특히, 그렇지 않으면 &lt;code&gt;QuerySets&lt;/code&gt; 에서 &lt;code&gt;OR&lt;/code&gt; 을 사용할 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="a6c3985cf74933843dd741b4b15c88efa849cde0" translate="yes" xml:space="preserve">
          <source>In general, GeoDjango installation requires:</source>
          <target state="translated">일반적으로 GeoDjango 설치에는 다음이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="509d11594c50dfe8712d4434d7a4afdf6b8e5098" translate="yes" xml:space="preserve">
          <source>In general, any cleaning method can raise &lt;code&gt;ValidationError&lt;/code&gt; if there is a problem with the data it is processing, passing the relevant information to the &lt;code&gt;ValidationError&lt;/code&gt; constructor. &lt;a href=&quot;#raising-validation-error&quot;&gt;See below&lt;/a&gt; for the best practice in raising &lt;code&gt;ValidationError&lt;/code&gt;. If no &lt;code&gt;ValidationError&lt;/code&gt; is raised, the method should return the cleaned (normalized) data as a Python object.</source>
          <target state="translated">일반적으로, 처리중인 데이터에 문제가 있으면 관련된 모든 정보를 &lt;code&gt;ValidationError&lt;/code&gt; 생성자에 전달하여 정리 방법에서 &lt;code&gt;ValidationError&lt;/code&gt; 가 발생할 수 있습니다 . &lt;code&gt;ValidationError&lt;/code&gt; 발생에 대한 모범 사례는 &lt;a href=&quot;#raising-validation-error&quot;&gt;아래&lt;/a&gt; 를 참조하십시오 . &lt;code&gt;ValidationError&lt;/code&gt; 가 발생 하지 않으면 메서드는 정리 된 (정규화 된) 데이터를 Python 객체로 반환해야합니다.</target>
        </trans-unit>
        <trans-unit id="aff7eda262832443cdc4cfd621b6e572d84270a0" translate="yes" xml:space="preserve">
          <source>In general, it is enough to define &lt;a href=&quot;#django.template.loaders.base.Loader.get_template_sources&quot;&gt;&lt;code&gt;get_template_sources()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#django.template.loaders.base.Loader.get_contents&quot;&gt;&lt;code&gt;get_contents()&lt;/code&gt;&lt;/a&gt; for custom template loaders. &lt;code&gt;get_template()&lt;/code&gt; will usually not need to be overridden.</source>
          <target state="translated">일반적으로 사용자 정의 템플리트 로더에 대해 &lt;a href=&quot;#django.template.loaders.base.Loader.get_template_sources&quot;&gt; &lt;code&gt;get_template_sources()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#django.template.loaders.base.Loader.get_contents&quot;&gt; &lt;code&gt;get_contents()&lt;/code&gt; &lt;/a&gt; 를 정의하면 충분합니다 . &lt;code&gt;get_template()&lt;/code&gt; 은 일반적으로 재정의 될 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="b162efee794bcad06a96b812cb84dc6a654ea12a" translate="yes" xml:space="preserve">
          <source>In general, the library path may be set on a per-user basis by setting an environment variable, or by configuring the library path for the entire system.</source>
          <target state="translated">일반적으로 라이브러리 경로는 환경 변수를 설정하거나 전체 시스템에 대한 라이브러리 경로를 구성하여 사용자별로 설정 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f02826e5404756fbfee9b9f4d13058259e858ef3" translate="yes" xml:space="preserve">
          <source>In higher level code related to handling of URLs of Django model instances: The &lt;a href=&quot;../../ref/models/instances#django.db.models.Model.get_absolute_url&quot;&gt;&lt;code&gt;get_absolute_url()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">Django 모델 인스턴스의 URL 처리와 관련된 상위 레벨 코드 : &lt;a href=&quot;../../ref/models/instances#django.db.models.Model.get_absolute_url&quot;&gt; &lt;code&gt;get_absolute_url()&lt;/code&gt; &lt;/a&gt; 메소드.</target>
        </trans-unit>
        <trans-unit id="0325acb3dd5bb25e96712e073ccf8beac6d4f214" translate="yes" xml:space="preserve">
          <source>In its simplest form &lt;code&gt;Prefetch&lt;/code&gt; is equivalent to the traditional string based lookups:</source>
          <target state="translated">가장 간단한 형태의 &lt;code&gt;Prefetch&lt;/code&gt; 는 전통적인 문자열 기반 조회와 동일합니다.</target>
        </trans-unit>
        <trans-unit id="74628a3f6d1c7feffe7469a9ab6311bf142ff0b9" translate="yes" xml:space="preserve">
          <source>In larger templates, this technique helps you see which &lt;code&gt;{% block %}&lt;/code&gt; tags are being closed.</source>
          <target state="translated">더 큰 템플릿에서이 기술을 사용하면 어떤 &lt;code&gt;{% block %}&lt;/code&gt; 태그가 닫히는 지 확인할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e5e38ef2b3710d00983de8113dd8ab5592914bbb" translate="yes" xml:space="preserve">
          <source>In lieu of the above approach which requires duplicating methods on both the &lt;code&gt;QuerySet&lt;/code&gt; and the &lt;code&gt;Manager&lt;/code&gt;, &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.as_manager&quot;&gt;&lt;code&gt;QuerySet.as_manager()&lt;/code&gt;&lt;/a&gt; can be used to create an instance of &lt;code&gt;Manager&lt;/code&gt; with a copy of a custom &lt;code&gt;QuerySet&lt;/code&gt;&amp;rsquo;s methods:</source>
          <target state="translated">양자의 요구 중복 방법 상기 방법 대신에 &lt;code&gt;QuerySet&lt;/code&gt; 및 &lt;code&gt;Manager&lt;/code&gt; , &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.as_manager&quot;&gt; &lt;code&gt;QuerySet.as_manager()&lt;/code&gt; &lt;/a&gt; 인스턴스 생성하는 데 사용할 수있는 &lt;code&gt;Manager&lt;/code&gt; 지정 사본 &lt;code&gt;QuerySet&lt;/code&gt; 의 방법 :</target>
        </trans-unit>
        <trans-unit id="892885cde16dca9d450a49f5544282693afce6a6" translate="yes" xml:space="preserve">
          <source>In models, a field is instantiated as a class attribute and represents a particular table column, see &lt;a href=&quot;../../topics/db/models&quot;&gt;Models&lt;/a&gt;. It has attributes such as &lt;a href=&quot;#django.db.models.Field.null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#django.db.models.Field.unique&quot;&gt;&lt;code&gt;unique&lt;/code&gt;&lt;/a&gt;, and methods that Django uses to map the field value to database-specific values.</source>
          <target state="translated">모델에서 필드는 클래스 속성으로 인스턴스화되고 특정 테이블 열을 나타냅니다 ( &lt;a href=&quot;../../topics/db/models&quot;&gt;모델&lt;/a&gt; 참조) . &lt;a href=&quot;#django.db.models.Field.null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt; 과 &lt;a href=&quot;#django.db.models.Field.unique&quot;&gt; &lt;code&gt;unique&lt;/code&gt; &lt;/a&gt; 같은 속성과 Django가 필드 값을 데이터베이스 별 값에 매핑하는 데 사용하는 메소드가 있습니다.</target>
        </trans-unit>
        <trans-unit id="c049c4f3a733196872767a3d6e8373dbf1a9e8d8" translate="yes" xml:space="preserve">
          <source>In most cases it will be necessary to upgrade to the latest version of your Django-related dependencies as well. If the Django version was recently released or if some of your dependencies are not well-maintained, some of your dependencies may not yet support the new Django version. In these cases you may have to wait until new versions of your dependencies are released.</source>
          <target state="translated">대부분의 경우 최신 버전의 Django 관련 종속성으로 업그레이드해야합니다. Django 버전이 최근에 출시되었거나 일부 종속성이 잘 유지 관리되지 않은 경우 일부 종속성이 아직 새로운 Django 버전을 지원하지 않을 수 있습니다. 이러한 경우 새 버전의 종속성이 릴리스 될 때까지 기다려야 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2553c57b09242581a803e6aacbe2b851d277b3d0" translate="yes" xml:space="preserve">
          <source>In most cases overriding or inheriting &lt;code&gt;get_FOO_display()&lt;/code&gt;, &lt;code&gt;get_next_by_FOO()&lt;/code&gt;, and &lt;code&gt;get_previous_by_FOO()&lt;/code&gt; should work as expected. Since they are added by the metaclass however, it is not practical to account for all possible inheritance structures. In more complex cases you should override &lt;code&gt;Field.contribute_to_class()&lt;/code&gt; to set the methods you need.</source>
          <target state="translated">대부분의 경우 &lt;code&gt;get_FOO_display()&lt;/code&gt; , &lt;code&gt;get_next_by_FOO()&lt;/code&gt; 및 &lt;code&gt;get_previous_by_FOO()&lt;/code&gt; 재정의하거나 상속 하면 예상대로 작동합니다. 그러나 메타 클래스에 의해 추가되기 때문에 가능한 모든 상속 구조를 설명하는 것은 실용적이지 않습니다. 더 복잡한 경우 &lt;code&gt;Field.contribute_to_class()&lt;/code&gt; 를 재정 의하여 필요한 메소드를 설정해야합니다.</target>
        </trans-unit>
        <trans-unit id="46ee957bac7e253d4620f33ab4a0b3981905456a" translate="yes" xml:space="preserve">
          <source>In most cases when Django is dealing with strings, it will convert them to strings before doing anything else. So, as a general rule, if you pass in a bytestring, be prepared to receive a string back in the result.</source>
          <target state="translated">Django가 문자열을 처리하는 경우 대부분의 경우 다른 작업을 수행하기 전에 문자열로 변환합니다. 따라서 일반적으로 바이트 문자열을 전달하는 경우 결과에서 문자열을 다시받을 수 있도록 준비하십시오.</target>
        </trans-unit>
        <trans-unit id="acee6b59fd13a3ca3fe85dc3b662ea33a0c91494" translate="yes" xml:space="preserve">
          <source>In most cases, Django can automatically detect and set this, but you can also provide an explicit override as a class attribute on your &lt;a href=&quot;#django.apps.AppConfig&quot;&gt;&lt;code&gt;AppConfig&lt;/code&gt;&lt;/a&gt; subclass. In a few situations this is required; for instance if the app package is a &lt;a href=&quot;#namespace-package&quot;&gt;namespace package&lt;/a&gt; with multiple paths.</source>
          <target state="translated">대부분의 경우, Django는이를 자동으로 감지하고 설정할 수 있지만 &lt;a href=&quot;#django.apps.AppConfig&quot;&gt; &lt;code&gt;AppConfig&lt;/code&gt; &lt;/a&gt; 서브 클래스 에서 클래스 속성으로 명시 적 대체를 제공 할 수도 있습니다 . 몇 가지 상황에서는 이것이 필요합니다. 예를 들어 앱 패키지가 여러 경로 가있는 &lt;a href=&quot;#namespace-package&quot;&gt;네임 스페이스 패키지 인 경우&lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="4e12dbf6f96ad8979888b66a156e04c3569721e6" translate="yes" xml:space="preserve">
          <source>In most cases, for a patch to be accepted into Django it has to include tests. For bug fix patches, this means writing a regression test to ensure that the bug is never reintroduced into Django later on. A regression test should be written in such a way that it will fail while the bug still exists and pass once the bug has been fixed. For patches containing new features, you&amp;rsquo;ll need to include tests which ensure that the new features are working correctly. They too should fail when the new feature is not present, and then pass once it has been implemented.</source>
          <target state="translated">대부분의 경우 Django에 패치를 적용하려면 테스트가 포함되어야합니다. 버그 수정 패치의 경우 이는 나중에 장고에 버그가 다시 도입되지 않도록 회귀 테스트를 작성하는 것을 의미합니다. 회귀 테스트는 버그가 여전히 존재하는 동안 실패하고 버그가 수정되면 통과하는 방식으로 작성해야합니다. 새로운 기능이 포함 된 패치의 경우 새로운 기능이 올바르게 작동하는지 확인하는 테스트를 포함해야합니다. 새 기능이 없으면 실패한 다음 구현 된 후에 전달해야합니다.</target>
        </trans-unit>
        <trans-unit id="d63a9dd51c8abf1805656df5834de22fb54d2d48" translate="yes" xml:space="preserve">
          <source>In most cases, inheriting from this mixin will be sufficient to make an old-style middleware compatible with the new system with sufficient backwards-compatibility. The new short-circuiting semantics will be harmless or even beneficial to the existing middleware. In a few cases, a middleware class may need some changes to adjust to the new semantics.</source>
          <target state="translated">대부분의 경우,이 믹스 인에서 상속하면 구식 미들웨어가 충분한 하위 호환성을 가진 새 시스템과 호환 될 수 있습니다. 새로운 단락 시맨틱은 기존 미들웨어에 무해하거나 심지어 유리할 것입니다. 경우에 따라 미들웨어 클래스에서 새 의미에 맞게 변경해야 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="d9d0c45a9a5c2988974b76f45606b7b5230c0954" translate="yes" xml:space="preserve">
          <source>In most cases, it&amp;rsquo;s best to use translated URLs only within a language code prefixed block of patterns (using &lt;a href=&quot;#django.conf.urls.i18n.i18n_patterns&quot;&gt;&lt;code&gt;i18n_patterns()&lt;/code&gt;&lt;/a&gt;), to avoid the possibility that a carelessly translated URL causes a collision with a non-translated URL pattern.</source>
          <target state="translated">대부분의 경우 부주의하게 번역 된 URL이 번역되지 않은 URL 패턴과 충돌 할 가능성을 피하기 위해 언어 코드 접두어 패턴 블록 ( &lt;a href=&quot;#django.conf.urls.i18n.i18n_patterns&quot;&gt; &lt;code&gt;i18n_patterns()&lt;/code&gt; &lt;/a&gt; ) 내에서만 번역 된 URL을 사용하는 것이 가장 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="53ae97a84b8d45f7667a00362e01147ed1582f6c" translate="yes" xml:space="preserve">
          <source>In most cases, the field will have a sensible default widget. For example, by default, a &lt;a href=&quot;../../ref/forms/fields#django.forms.CharField&quot;&gt;&lt;code&gt;CharField&lt;/code&gt;&lt;/a&gt; will have a &lt;a href=&quot;../../ref/forms/widgets#django.forms.TextInput&quot;&gt;&lt;code&gt;TextInput&lt;/code&gt;&lt;/a&gt; widget, that produces an &lt;code&gt;&amp;lt;input type=&quot;text&quot;&amp;gt;&lt;/code&gt; in the HTML. If you needed &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt; instead, you&amp;rsquo;d specify the appropriate widget when defining your form field, as we have done for the &lt;code&gt;message&lt;/code&gt; field.</source>
          <target state="translated">대부분의 경우 필드에는 적절한 기본 위젯이 있습니다. 예를 들어, &lt;a href=&quot;../../ref/forms/fields#django.forms.CharField&quot;&gt; &lt;code&gt;CharField&lt;/code&gt; &lt;/a&gt; 는 기본적으로 HTML에서 &lt;code&gt;&amp;lt;input type=&quot;text&quot;&amp;gt;&lt;/code&gt; 를 생성하는 &lt;a href=&quot;../../ref/forms/widgets#django.forms.TextInput&quot;&gt; &lt;code&gt;TextInput&lt;/code&gt; &lt;/a&gt; 위젯 을 갖습니다 . &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt; 가 대신 필요한 경우 양식 필드를 정의 할 때 &lt;code&gt;message&lt;/code&gt; 필드 와 마찬가지로 적절한 위젯을 지정합니다 .</target>
        </trans-unit>
        <trans-unit id="6eb548d924e6f442368c56b8245c2ffe7a95f69e" translate="yes" xml:space="preserve">
          <source>In most cases, this object will not have been saved to the database yet, so if it uses the default &lt;code&gt;AutoField&lt;/code&gt;, &lt;em&gt;it might not yet have a value for its primary key field&lt;/em&gt;.</source>
          <target state="translated">대부분의 경우,이 객체는 기본 사용 그렇다면, 아직 데이터베이스에 저장되지 않았을 것이다 &lt;code&gt;AutoField&lt;/code&gt; 는 , &lt;em&gt;아직 기본 키 필드의 값을 가질 수 있습니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="553a3a820227d2b61d89c93a4f51644a0ad682a2" translate="yes" xml:space="preserve">
          <source>In most cases, you can send email using &lt;code&gt;django.core.mail.send_mail()&lt;/code&gt;.</source>
          <target state="translated">대부분의 경우 &lt;code&gt;django.core.mail.send_mail()&lt;/code&gt; 사용하여 이메일을 보낼 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="fb9e461a8cfdfc6e585763268faa61b1594df5ef" translate="yes" xml:space="preserve">
          <source>In non-interactive mode, the &lt;a href=&quot;../topics/auth/customizing#django.contrib.auth.models.CustomUser.USERNAME_FIELD&quot;&gt;&lt;code&gt;USERNAME_FIELD&lt;/code&gt;&lt;/a&gt; and required fields (listed in &lt;a href=&quot;../topics/auth/customizing#django.contrib.auth.models.CustomUser.REQUIRED_FIELDS&quot;&gt;&lt;code&gt;REQUIRED_FIELDS&lt;/code&gt;&lt;/a&gt;) fall back to &lt;code&gt;DJANGO_SUPERUSER_&amp;lt;uppercase_field_name&amp;gt;&lt;/code&gt; environment variables, unless they are overridden by a command line argument. For example, to provide an &lt;code&gt;email&lt;/code&gt; field, you can use &lt;code&gt;DJANGO_SUPERUSER_EMAIL&lt;/code&gt; environment variable.</source>
          <target state="translated">비 대화식 모드에서 &lt;a href=&quot;../topics/auth/customizing#django.contrib.auth.models.CustomUser.USERNAME_FIELD&quot;&gt; &lt;code&gt;USERNAME_FIELD&lt;/code&gt; &lt;/a&gt; 및 필수 필드 ( &lt;a href=&quot;../topics/auth/customizing#django.contrib.auth.models.CustomUser.REQUIRED_FIELDS&quot;&gt; &lt;code&gt;REQUIRED_FIELDS&lt;/code&gt; 에&lt;/a&gt; 나열 됨 ) 는 명령 행 인수로 대체되지 않는 한 &lt;code&gt;DJANGO_SUPERUSER_&amp;lt;uppercase_field_name&amp;gt;&lt;/code&gt; 환경 변수로 대체됩니다. 예를 들어, &lt;code&gt;email&lt;/code&gt; 필드 를 제공하기 위해 &lt;code&gt;DJANGO_SUPERUSER_EMAIL&lt;/code&gt; 환경 변수를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e811dedb04c04b0db2eb92ba335a09921c544b79" translate="yes" xml:space="preserve">
          <source>In normal Python class inheritance, it is permissible for a child class to override any attribute from the parent class. In Django, this isn&amp;rsquo;t usually permitted for model fields. If a non-abstract model base class has a field called &lt;code&gt;author&lt;/code&gt;, you can&amp;rsquo;t create another model field or define an attribute called &lt;code&gt;author&lt;/code&gt; in any class that inherits from that base class.</source>
          <target state="translated">일반적인 Python 클래스 상속에서는 자식 클래스가 부모 클래스의 모든 속성을 재정의 할 수 있습니다. 장고에서는 모델 필드에 일반적으로 허용되지 않습니다. 비추 상 모델 기본 클래스에 &lt;code&gt;author&lt;/code&gt; 라는 필드가있는 경우 해당 기본 클래스에서 상속되는 클래스에서 다른 모델 필드를 만들거나 &lt;code&gt;author&lt;/code&gt; 라는 속성을 정의 할 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="9ba287b42f73a012193a36b795923c8fa6f96a7d" translate="yes" xml:space="preserve">
          <source>In older versions of Django, be careful when reusing Django&amp;rsquo;s built-in filters as &lt;code&gt;autoescape&lt;/code&gt; defaults to &lt;code&gt;None&lt;/code&gt;. You&amp;rsquo;ll need to pass &lt;code&gt;autoescape=True&lt;/code&gt; to get autoescaping.</source>
          <target state="translated">Django의 이전 버전에서는 &lt;code&gt;autoescape&lt;/code&gt; 기본값이 &lt;code&gt;None&lt;/code&gt; 이므로 Django의 내장 필터를 재사용 할 때주의 하십시오 . &lt;code&gt;autoescape=True&lt;/code&gt; 를 얻으려면 autoescape = True 를 전달해야합니다 .</target>
        </trans-unit>
        <trans-unit id="48487eecdf3392dca8cdac3e20e02c45e851f71c" translate="yes" xml:space="preserve">
          <source>In older versions, &lt;code&gt;'&lt;/code&gt; is converted to its decimal code &lt;code&gt;&amp;amp;#39;&lt;/code&gt; instead of the equivalent hex code &lt;code&gt;&amp;amp;#x27;&lt;/code&gt;.</source>
          <target state="translated">이전 버전에서 &lt;code&gt;'&lt;/code&gt; 은 10 진수 코드 &lt;code&gt;&amp;amp;#39;&lt;/code&gt; 동등한 16 진 코드 대신 &lt;code&gt;&amp;amp;#x27;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a594579463454aa6c5f1d126c4933adb9501ac81" translate="yes" xml:space="preserve">
          <source>In older versions, &lt;code&gt;s&lt;/code&gt; may be a bytestring.</source>
          <target state="translated">이전 버전에서 &lt;code&gt;s&lt;/code&gt; 는 바이트 열일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="06abe09565f7ebaaa5a5a3e66eecce8b6a0e1ba2" translate="yes" xml:space="preserve">
          <source>In older versions, MySQL uses &lt;code&gt;MBRContains&lt;/code&gt; and operates only on bounding boxes.</source>
          <target state="translated">이전 버전에서 MySQL은 &lt;code&gt;MBRContains&lt;/code&gt; 를 사용 하고 경계 상자에서만 작동합니다.</target>
        </trans-unit>
        <trans-unit id="86fdacbc12f0c3ada37ced324655c76230d31333" translate="yes" xml:space="preserve">
          <source>In older versions, MySQL uses &lt;code&gt;MBRDisjoint&lt;/code&gt; and operates only on bounding boxes.</source>
          <target state="translated">이전 버전에서 MySQL은 &lt;code&gt;MBRDisjoint&lt;/code&gt; 를 사용 하며 경계 상자에서만 작동합니다.</target>
        </trans-unit>
        <trans-unit id="a250c6c4d5ddf0ab4e264cb2589304887da56d37" translate="yes" xml:space="preserve">
          <source>In older versions, MySQL uses &lt;code&gt;MBREquals&lt;/code&gt; and operates only on bounding boxes.</source>
          <target state="translated">이전 버전에서 MySQL은 &lt;code&gt;MBREquals&lt;/code&gt; 를 사용 하며 경계 상자에서만 작동합니다.</target>
        </trans-unit>
        <trans-unit id="3d30b1f38b6febfe720406653832214a3cd66396" translate="yes" xml:space="preserve">
          <source>In older versions, MySQL uses &lt;code&gt;MBRIntersects&lt;/code&gt; and operates only on bounding boxes.</source>
          <target state="translated">이전 버전에서 MySQL은 &lt;code&gt;MBRIntersects&lt;/code&gt; 를 사용 하며 경계 상자에서만 작동합니다.</target>
        </trans-unit>
        <trans-unit id="a108605efc0a5748e8093c6df53458e3fc931cff" translate="yes" xml:space="preserve">
          <source>In older versions, MySQL uses &lt;code&gt;MBROverlaps&lt;/code&gt; and operates only on bounding boxes.</source>
          <target state="translated">이전 버전에서 MySQL은 &lt;code&gt;MBROverlaps&lt;/code&gt; 사용 하며 경계 상자에서만 작동합니다.</target>
        </trans-unit>
        <trans-unit id="6a423185ebb0542b517af591a286bdfe336b4ccb" translate="yes" xml:space="preserve">
          <source>In older versions, MySQL uses &lt;code&gt;MBRTouches&lt;/code&gt; and operates only on bounding boxes.</source>
          <target state="translated">이전 버전에서 MySQL은 &lt;code&gt;MBRTouches&lt;/code&gt; 를 사용 하며 바운딩 박스에서만 작동합니다.</target>
        </trans-unit>
        <trans-unit id="e454d7f81ea9b0f64b3dcee0ba1d27440f516a6e" translate="yes" xml:space="preserve">
          <source>In older versions, MySQL uses &lt;code&gt;MBRWithin&lt;/code&gt; and operates only on bounding boxes.</source>
          <target state="translated">이전 버전에서 MySQL은 &lt;code&gt;MBRWithin&lt;/code&gt; 을 사용 하며 경계 상자에서만 작동합니다.</target>
        </trans-unit>
        <trans-unit id="04c471d6170a640a7f0b0a6b5d86ad526b15aeb8" translate="yes" xml:space="preserve">
          <source>In older versions, it returns a bytestring instead of a string.</source>
          <target state="translated">이전 버전에서는 문자열 대신 바이트 문자열을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="e77f0794cc34eae167668fa46edcdb855f41b6ef" translate="yes" xml:space="preserve">
          <source>In older versions, permissions for proxy models use the content type of the concrete model rather than content type of the proxy model.</source>
          <target state="translated">이전 버전에서 프록시 모델에 대한 권한은 프록시 모델의 컨텐츠 유형이 아닌 구체적 모델의 컨텐츠 유형을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="c3ee96d228df4d2c97001f389d45ba85fe666ff6" translate="yes" xml:space="preserve">
          <source>In older versions, proxy models use the content type of the concrete model.</source>
          <target state="translated">이전 버전에서 프록시 모델은 콘크리트 모델의 컨텐츠 유형을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="fb39b75e03f33a4e72cf13d13c8cf8133f783eb6" translate="yes" xml:space="preserve">
          <source>In older versions, the &lt;code&gt;tzinfo&lt;/code&gt; attribute is a &lt;a href=&quot;#django.utils.timezone.FixedOffset&quot;&gt;&lt;code&gt;FixedOffset&lt;/code&gt;&lt;/a&gt; instance.</source>
          <target state="translated">이전 버전에서 &lt;code&gt;tzinfo&lt;/code&gt; 속성은 &lt;a href=&quot;#django.utils.timezone.FixedOffset&quot;&gt; &lt;code&gt;FixedOffset&lt;/code&gt; &lt;/a&gt; 인스턴스입니다.</target>
        </trans-unit>
        <trans-unit id="688ca5f2699bc44de7ce8a06a72f66e4061b7b2e" translate="yes" xml:space="preserve">
          <source>In older versions, the default value is &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="translated">이전 버전에서 기본값은 &lt;code&gt;False&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="f4239bf88dcd319d30aa682cbe4d3cde5d9664bc" translate="yes" xml:space="preserve">
          <source>In older versions, the default value is &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">이전 버전에서 기본값은 &lt;code&gt;None&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="ce7d5574bd6957ee81720c428d128a45952d2924" translate="yes" xml:space="preserve">
          <source>In older versions, the default value is &lt;code&gt;SAMEORIGIN&lt;/code&gt;.</source>
          <target state="translated">이전 버전에서 기본값은 &lt;code&gt;SAMEORIGIN&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="66326a5c500f2e9b8f06b11645d2eb1a463f096a" translate="yes" xml:space="preserve">
          <source>In older versions, the keyword arguments with &lt;code&gt;None&lt;/code&gt; values are made up also for not provided named parts.</source>
          <target state="translated">이전 버전에서는 &lt;code&gt;None&lt;/code&gt; 값을 가진 키워드 인수가 제공되지 않은 명명 된 부분에 대해서도 구성됩니다.</target>
        </trans-unit>
        <trans-unit id="be44bea554526db510067415e8c9fcb3f595c8bd" translate="yes" xml:space="preserve">
          <source>In older versions, you could set the language in the current session.</source>
          <target state="translated">이전 버전에서는 현재 세션에서 언어를 설정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ecde436d8369233ca2f3dcb9ab1ca79254f03cdf" translate="yes" xml:space="preserve">
          <source>In order for the &lt;code&gt;python manage.py migrate&lt;/code&gt; command to work, your Oracle database user must have privileges to run the following commands:</source>
          <target state="translated">위해서는 &lt;code&gt;python manage.py migrate&lt;/code&gt; 작업에 대한 명령, Oracle 데이터베이스 사용자는 다음 명령을 실행할 수있는 권한이 있어야합니다 :</target>
        </trans-unit>
        <trans-unit id="90fe772dd41ff482e0ce23d0eaa3b30a1fdefbce" translate="yes" xml:space="preserve">
          <source>In order for your filter to know the current auto-escaping state, set the &lt;code&gt;needs_autoescape&lt;/code&gt; flag to &lt;code&gt;True&lt;/code&gt; when you register your filter function. (If you don&amp;rsquo;t specify this flag, it defaults to &lt;code&gt;False&lt;/code&gt;). This flag tells Django that your filter function wants to be passed an extra keyword argument, called &lt;code&gt;autoescape&lt;/code&gt;, that is &lt;code&gt;True&lt;/code&gt; if auto-escaping is in effect and &lt;code&gt;False&lt;/code&gt; otherwise. It is recommended to set the default of the &lt;code&gt;autoescape&lt;/code&gt; parameter to &lt;code&gt;True&lt;/code&gt;, so that if you call the function from Python code it will have escaping enabled by default.</source>
          <target state="translated">필터가 현재 자동 이스케이프 상태를 알 수있게하려면 필터 기능을 등록 할 때 &lt;code&gt;needs_autoescape&lt;/code&gt; 플래그를 &lt;code&gt;True&lt;/code&gt; 로 설정하십시오 . 이 플래그를 지정하지 않으면 기본값은 &lt;code&gt;False&lt;/code&gt; 입니다. 이 플래그는 필터 함수가 호출 추가 키워드 인수 전달하고 싶어 장고를 알려줍니다 &lt;code&gt;autoescape&lt;/code&gt; 이며, &lt;code&gt;True&lt;/code&gt; 자동 탈출이 적용하고있는 경우 &lt;code&gt;False&lt;/code&gt; , 그렇지. &lt;code&gt;autoescape&lt;/code&gt; 매개 변수 의 기본값 을 &lt;code&gt;True&lt;/code&gt; 로 설정하는 것이 좋습니다 . 따라서 Python 코드에서 함수를 호출하면 기본적으로 이스케이프가 활성화됩니다.</target>
        </trans-unit>
        <trans-unit id="11a387c8a9914108b9a7aabd974b6e6881a3bea5" translate="yes" xml:space="preserve">
          <source>In order to build a custom session engine or to customize an existing one, you may create a new class inheriting from &lt;a href=&quot;#django.contrib.sessions.backends.base.SessionBase&quot;&gt;&lt;code&gt;SessionBase&lt;/code&gt;&lt;/a&gt; or any other existing &lt;code&gt;SessionStore&lt;/code&gt; class.</source>
          <target state="translated">사용자 정의 세션 엔진을 작성하거나 기존 엔진을 사용자 정의하기 위해 &lt;a href=&quot;#django.contrib.sessions.backends.base.SessionBase&quot;&gt; &lt;code&gt;SessionBase&lt;/code&gt; &lt;/a&gt; 또는 다른 기존 &lt;code&gt;SessionStore&lt;/code&gt; 클래스 에서 상속되는 새 클래스를 작성할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f48a9537ae495f429e0a574bc2641d48124286ad" translate="yes" xml:space="preserve">
          <source>In order to configure logging, you use &lt;a href=&quot;../ref/settings#std:setting-LOGGING&quot;&gt;&lt;code&gt;LOGGING&lt;/code&gt;&lt;/a&gt; to define a dictionary of logging settings. These settings describes the loggers, handlers, filters and formatters that you want in your logging setup, and the log levels and other properties that you want those components to have.</source>
          <target state="translated">로깅을 구성하려면 &lt;a href=&quot;../ref/settings#std:setting-LOGGING&quot;&gt; &lt;code&gt;LOGGING&lt;/code&gt; &lt;/a&gt; 을 사용하여 로깅 설정 사전을 정의하십시오. 이 설정은 로깅 설정에서 원하는 로거, 처리기, 필터 및 포맷터와 해당 구성 요소에 원하는 로그 수준 및 기타 속성을 설명합니다.</target>
        </trans-unit>
        <trans-unit id="42b3fc106c92756d794366455faac3a83dc515a5" translate="yes" xml:space="preserve">
          <source>In order to do that you can check the database connection&amp;rsquo;s alias inside a &lt;code&gt;RunPython&lt;/code&gt; operation by looking at the &lt;code&gt;schema_editor.connection.alias&lt;/code&gt; attribute:</source>
          <target state="translated">이를 위해 &lt;code&gt;schema_editor.connection.alias&lt;/code&gt; 속성 을보고 &lt;code&gt;RunPython&lt;/code&gt; 작업 내에서 데이터베이스 연결의 별칭을 확인할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="61d52591f027c8771ad5ddae66ce22631a8a19bc" translate="yes" xml:space="preserve">
          <source>In order to fully serialize your &lt;code&gt;Restaurant&lt;/code&gt; instances, you will need to serialize the &lt;code&gt;Place&lt;/code&gt; models as well:</source>
          <target state="translated">&lt;code&gt;Restaurant&lt;/code&gt; 인스턴스 를 완전히 직렬화하려면 &lt;code&gt;Place&lt;/code&gt; 모델도 직렬화해야합니다 .</target>
        </trans-unit>
        <trans-unit id="814bf473789694253cf32579769ab02b74a9eb85" translate="yes" xml:space="preserve">
          <source>In order to guarantee atomicity, &lt;code&gt;atomic&lt;/code&gt; disables some APIs. Attempting to commit, roll back, or change the autocommit state of the database connection within an &lt;code&gt;atomic&lt;/code&gt; block will raise an exception.</source>
          <target state="translated">원 자성을 보장하기 위해 &lt;code&gt;atomic&lt;/code&gt; 은 일부 API를 비활성화합니다. &lt;code&gt;atomic&lt;/code&gt; 블록 내에서 데이터베이스 연결의 자동 커밋 상태를 커밋, 롤백 또는 변경하려고 시도 하면 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="2d184cd5980dd60fc335a14a8588be38002eadd0" translate="yes" xml:space="preserve">
          <source>In order to guarantee that all &lt;code&gt;TestCase&lt;/code&gt; code starts with a clean database, the Django test runner reorders tests in the following way:</source>
          <target state="translated">모든 &lt;code&gt;TestCase&lt;/code&gt; 코드가 깨끗한 데이터베이스로 시작되도록하기 위해 Django 테스트 러너는 다음과 같은 방식으로 테스트 순서를 변경합니다.</target>
        </trans-unit>
        <trans-unit id="ebd5f1b685513a442ce3a791e86443cc357e3454" translate="yes" xml:space="preserve">
          <source>In order to handle this situation, you need to pass &lt;code&gt;handle_forward_references=True&lt;/code&gt; to &lt;code&gt;serializers.deserialize()&lt;/code&gt;. This will set the &lt;code&gt;deferred_fields&lt;/code&gt; attribute on the &lt;code&gt;DeserializedObject&lt;/code&gt; instances. You&amp;rsquo;ll need to keep track of &lt;code&gt;DeserializedObject&lt;/code&gt; instances where this attribute isn&amp;rsquo;t &lt;code&gt;None&lt;/code&gt; and later call &lt;code&gt;save_deferred_fields()&lt;/code&gt; on them.</source>
          <target state="translated">이 상황을 처리하려면 &lt;code&gt;handle_forward_references=True&lt;/code&gt; 를 &lt;code&gt;serializers.deserialize()&lt;/code&gt; 로 전달해야합니다 . &lt;code&gt;DeserializedObject&lt;/code&gt; 인스턴스 에 &lt;code&gt;deferred_fields&lt;/code&gt; 속성 이 설정됩니다 . 이 속성이 &lt;code&gt;None&lt;/code&gt; 이 아닌 &lt;code&gt;DeserializedObject&lt;/code&gt; 인스턴스를 추적 하고 나중에 &lt;code&gt;save_deferred_fields()&lt;/code&gt; 를 호출 해야합니다.</target>
        </trans-unit>
        <trans-unit id="8b2e79b4b6aa18a676e91499097aad9f8d4ed2dc" translate="yes" xml:space="preserve">
          <source>In order to make a Django project translatable, you have to add a minimal number of hooks to your Python code and templates. These hooks are called &lt;a href=&quot;index#term-translation-string&quot;&gt;translation strings&lt;/a&gt;. They tell Django: &amp;ldquo;This text should be translated into the end user&amp;rsquo;s language, if a translation for this text is available in that language.&amp;rdquo; It&amp;rsquo;s your responsibility to mark translatable strings; the system can only translate strings it knows about.</source>
          <target state="translated">Django 프로젝트를 번역 가능하게하려면 Python 코드와 템플릿에 최소한의 후크를 추가해야합니다. 이러한 후크를 &lt;a href=&quot;index#term-translation-string&quot;&gt;변환 문자열&lt;/a&gt; 이라고 합니다. 그들은 장고에게 다음과 같이 말합니다.&amp;ldquo;이 텍스트를 번역 할 수 있다면이 텍스트는 최종 사용자의 언어로 번역되어야합니다.&amp;rdquo; 번역 가능한 문자열을 표시하는 것은 귀하의 책임입니다. 시스템은 알고있는 문자열 만 번역 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fd427f482c454b8a176992fb9016a46f9519bd6a" translate="yes" xml:space="preserve">
          <source>In order to make error messages flexible and easy to override, consider the following guidelines:</source>
          <target state="translated">오류 메시지를 유연하고 재정의하기 쉽게하려면 다음 지침을 고려하십시오.</target>
        </trans-unit>
        <trans-unit id="4fbde88be4d3a61eb0fa9d81f26e60f25b7c967a" translate="yes" xml:space="preserve">
          <source>In order to meet the 30-char limitation Oracle has on table names, and match the usual conventions for Oracle databases, Django may shorten table names and turn them all-uppercase. To prevent such transformations, use a quoted name as the value for &lt;code&gt;db_table&lt;/code&gt;:</source>
          <target state="translated">Oracle이 테이블 이름에 대한 30 자 제한을 충족하고 Oracle 데이터베이스에 대한 일반적인 규칙을 일치시키기 위해 Django는 테이블 이름을 줄이고 모두 대문자로 바꿀 수 있습니다. 이러한 변환을 방지하려면 인용 된 이름을 &lt;code&gt;db_table&lt;/code&gt; 의 값으로 사용 하십시오 .</target>
        </trans-unit>
        <trans-unit id="09f9a7ab0865d01d87a2c3387c4322fa09399408" translate="yes" xml:space="preserve">
          <source>In order to obtain a prepared geometry, access the &lt;a href=&quot;#django.contrib.gis.geos.GEOSGeometry.prepared&quot;&gt;&lt;code&gt;GEOSGeometry.prepared&lt;/code&gt;&lt;/a&gt; property. Once you have a &lt;code&gt;PreparedGeometry&lt;/code&gt; instance its spatial predicate methods, listed below, may be used with other &lt;code&gt;GEOSGeometry&lt;/code&gt; objects. An operation with a prepared geometry can be orders of magnitude faster &amp;ndash; the more complex the geometry that is prepared, the larger the speedup in the operation. For more information, please consult the &lt;a href=&quot;https://trac.osgeo.org/geos/wiki/PreparedGeometry&quot;&gt;GEOS wiki page on prepared geometries&lt;/a&gt;.</source>
          <target state="translated">준비된 형상을 얻으려면 &lt;a href=&quot;#django.contrib.gis.geos.GEOSGeometry.prepared&quot;&gt; &lt;code&gt;GEOSGeometry.prepared&lt;/code&gt; &lt;/a&gt; 속성에 액세스하십시오 . 당신은 일단 &lt;code&gt;PreparedGeometry&lt;/code&gt; 의 인스턴스를 아래의 공간 술어 방법, 기타와 함께 사용될 수 &lt;code&gt;GEOSGeometry&lt;/code&gt; 의 객체. 지오메트리가 준비된 작업은 수십 배 더 빠를 수 있습니다. 지오메트리가 복잡할수록 작업 속도가 더 빨라집니다. 자세한 내용 &lt;a href=&quot;https://trac.osgeo.org/geos/wiki/PreparedGeometry&quot;&gt;은 준비된 형상에&lt;/a&gt; 대한 GEOS 위키 페이지 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="197304082f996b82afb0836da69efaacaa7a04c7" translate="yes" xml:space="preserve">
          <source>In order to override one or more of them, first create an &lt;code&gt;admin&lt;/code&gt; directory in your project&amp;rsquo;s &lt;code&gt;templates&lt;/code&gt; directory. This can be any of the directories you specified in the &lt;a href=&quot;../../settings#std:setting-TEMPLATES-DIRS&quot;&gt;&lt;code&gt;DIRS&lt;/code&gt;&lt;/a&gt; option of the &lt;code&gt;DjangoTemplates&lt;/code&gt; backend in the &lt;a href=&quot;../../settings#std:setting-TEMPLATES&quot;&gt;&lt;code&gt;TEMPLATES&lt;/code&gt;&lt;/a&gt; setting. If you have customized the &lt;code&gt;'loaders'&lt;/code&gt; option, be sure &lt;code&gt;'django.template.loaders.filesystem.Loader'&lt;/code&gt; appears before &lt;code&gt;'django.template.loaders.app_directories.Loader'&lt;/code&gt; so that your custom templates will be found by the template loading system before those that are included with &lt;a href=&quot;#module-django.contrib.admin&quot;&gt;&lt;code&gt;django.contrib.admin&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">하나 이상을 재정의하려면 먼저 프로젝트의 &lt;code&gt;templates&lt;/code&gt; 디렉토리 에 &lt;code&gt;admin&lt;/code&gt; 디렉토리를 만듭니다 . &lt;a href=&quot;../../settings#std:setting-TEMPLATES&quot;&gt; &lt;code&gt;TEMPLATES&lt;/code&gt; &lt;/a&gt; 설정 에서 &lt;code&gt;DjangoTemplates&lt;/code&gt; 백엔드 의 &lt;a href=&quot;../../settings#std:setting-TEMPLATES-DIRS&quot;&gt; &lt;code&gt;DIRS&lt;/code&gt; &lt;/a&gt; 옵션에 지정한 디렉토리 중 하나 일 수 있습니다 . &lt;code&gt;'loaders'&lt;/code&gt; 옵션 을 사용자 정의한 경우 , 이전 에 템플리트로드 시스템에서 사용자 정의 템플리트를 찾을 수 있도록 &lt;code&gt;'django.template.loaders.filesystem.Loader'&lt;/code&gt; 가 &lt;code&gt;'django.template.loaders.app_directories.Loader'&lt;/code&gt; 앞에 표시 되는지 확인하십시오. &lt;a href=&quot;#module-django.contrib.admin&quot;&gt; &lt;code&gt;django.contrib.admin&lt;/code&gt; &lt;/a&gt; 에 포함 된 것들 .</target>
        </trans-unit>
        <trans-unit id="6a3a6dec2c344fd808b8bba54d23e18d9e3ffaeb" translate="yes" xml:space="preserve">
          <source>In order to perform IP-based geolocation, the &lt;a href=&quot;#django.contrib.gis.geoip2.GeoIP2&quot;&gt;&lt;code&gt;GeoIP2&lt;/code&gt;&lt;/a&gt; object requires the &lt;a href=&quot;https://pypi.org/project/geoip2/&quot;&gt;geoip2 Python library&lt;/a&gt; and the GeoIP &lt;code&gt;Country&lt;/code&gt; and/or &lt;code&gt;City&lt;/code&gt;&lt;a href=&quot;https://dev.maxmind.com/geoip/geoip2/geolite2/&quot;&gt;datasets in binary format&lt;/a&gt; (the CSV files will not work!). Grab the &lt;code&gt;GeoLite2-Country.mmdb.gz&lt;/code&gt; and &lt;code&gt;GeoLite2-City.mmdb.gz&lt;/code&gt; files and unzip them in a directory corresponding to the &lt;a href=&quot;#std:setting-GEOIP_PATH&quot;&gt;&lt;code&gt;GEOIP_PATH&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">IP 기반 지리적 위치를 수행하려면 &lt;a href=&quot;#django.contrib.gis.geoip2.GeoIP2&quot;&gt; &lt;code&gt;GeoIP2&lt;/code&gt; &lt;/a&gt; 객체에는 &lt;a href=&quot;https://pypi.org/project/geoip2/&quot;&gt;geoip2 Python 라이브러리&lt;/a&gt; 및 GeoIP &lt;code&gt;Country&lt;/code&gt; 및 / 또는 &lt;code&gt;City&lt;/code&gt; &lt;a href=&quot;https://dev.maxmind.com/geoip/geoip2/geolite2/&quot;&gt;데이터 세트가 이진 형식 &lt;/a&gt;이어야 합니다 (CSV 파일은 작동하지 않습니다!). &lt;code&gt;GeoLite2-Country.mmdb.gz&lt;/code&gt; 및 &lt;code&gt;GeoLite2-City.mmdb.gz&lt;/code&gt; 파일을 잡고 &lt;a href=&quot;#std:setting-GEOIP_PATH&quot;&gt; &lt;code&gt;GEOIP_PATH&lt;/code&gt; &lt;/a&gt; 설정에 해당하는 디렉토리에서 압축을 푸십시오 .</target>
        </trans-unit>
        <trans-unit id="95a595d960799ba8b0ca87e797be6ea493f08f8d" translate="yes" xml:space="preserve">
          <source>In order to perform URL reversing, you&amp;rsquo;ll need to use &lt;strong&gt;named URL patterns&lt;/strong&gt; as done in the examples above. The string used for the URL name can contain any characters you like. You are not restricted to valid Python names.</source>
          <target state="translated">URL 반전을 수행하려면 위의 예에서와 같이 &lt;strong&gt;이름이 지정된 URL 패턴&lt;/strong&gt; 을 사용해야 합니다. URL 이름에 사용 된 문자열은 원하는 문자를 포함 할 수 있습니다. 유효한 Python 이름으로 제한되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="6a68fede8724820357864706cab00502d65622e6" translate="yes" xml:space="preserve">
          <source>In order to protect against &lt;a href=&quot;http://breachattack.com/&quot;&gt;BREACH&lt;/a&gt; attacks, the token is not simply the secret; a random salt is prepended to the secret and used to scramble it.</source>
          <target state="translated">&lt;a href=&quot;http://breachattack.com/&quot;&gt;BREACH&lt;/a&gt; 공격 으로부터 보호하기 위해 토큰은 단순한 비밀이 아닙니다. 무작위 소금이 비밀에 붙여지고 그것을 스크램블하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="655aa485065fe0aea8855d7ccc45fba32956ce48" translate="yes" xml:space="preserve">
          <source>In order to resolve this ticket, we&amp;rsquo;ll add a &lt;code&gt;make_toast()&lt;/code&gt; function to the top-level &lt;code&gt;django&lt;/code&gt; module. First we are going to write a test that tries to use the function and check that its output looks correct.</source>
          <target state="translated">이 티켓을 해결하기 위해 최상위 &lt;code&gt;django&lt;/code&gt; 모듈에 &lt;code&gt;make_toast()&lt;/code&gt; 함수를 추가 합니다. 먼저 함수를 사용하려고 시도하고 출력이 올바르게 보이는지 테스트하는 테스트를 작성합니다.</target>
        </trans-unit>
        <trans-unit id="f0a5f481c3502942e7d16bcd7a3cc304c2eefa6a" translate="yes" xml:space="preserve">
          <source>In order to restore the database state between tests for &lt;code&gt;TransactionTestCase&lt;/code&gt;s and database backends without transactions, Django will &lt;a href=&quot;../topics/testing/overview#test-case-serialized-rollback&quot;&gt;serialize the contents of all apps&lt;/a&gt; when it starts the test run so it can then reload from that copy before running tests that need it.</source>
          <target state="translated">&lt;code&gt;TransactionTestCase&lt;/code&gt; 테스트와 트랜잭션이 없는 데이터베이스 백엔드 간의 데이터베이스 상태를 복원하기 위해 Django는 테스트 실행을 시작할 때 &lt;a href=&quot;../topics/testing/overview#test-case-serialized-rollback&quot;&gt;모든 앱의 내용을 직렬화하여&lt;/a&gt; 필요한 테스트를 실행하기 전에 해당 복사본에서 다시로드 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f0343766ff0b17d92d018f4427983d376ae25e60" translate="yes" xml:space="preserve">
          <source>In order to send email, Django requires a few settings telling it how to connect to your mail server. At the very least, you&amp;rsquo;ll need to specify &lt;a href=&quot;../ref/settings#std:setting-EMAIL_HOST&quot;&gt;&lt;code&gt;EMAIL_HOST&lt;/code&gt;&lt;/a&gt; and possibly &lt;a href=&quot;../ref/settings#std:setting-EMAIL_HOST_USER&quot;&gt;&lt;code&gt;EMAIL_HOST_USER&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../ref/settings#std:setting-EMAIL_HOST_PASSWORD&quot;&gt;&lt;code&gt;EMAIL_HOST_PASSWORD&lt;/code&gt;&lt;/a&gt;, though other settings may be also required depending on your mail server&amp;rsquo;s configuration. Consult &lt;a href=&quot;../ref/settings&quot;&gt;the Django settings documentation&lt;/a&gt; for a full list of email-related settings.</source>
          <target state="translated">전자 메일을 보내려면 Django에서 메일 서버에 연결하는 방법을 알려주는 몇 가지 설정이 필요합니다. 적어도, 당신은 지정해야합니다 &lt;a href=&quot;../ref/settings#std:setting-EMAIL_HOST&quot;&gt; &lt;code&gt;EMAIL_HOST&lt;/code&gt; &lt;/a&gt; 가능성이 &lt;a href=&quot;../ref/settings#std:setting-EMAIL_HOST_USER&quot;&gt; &lt;code&gt;EMAIL_HOST_USER&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../ref/settings#std:setting-EMAIL_HOST_PASSWORD&quot;&gt; &lt;code&gt;EMAIL_HOST_PASSWORD&lt;/code&gt; 을&lt;/a&gt; 다른 설정은 또한 당신의 메일 서버의 구성에 따라 요구 될 수 있지만,. 이메일 관련 설정의 전체 목록은 &lt;a href=&quot;../ref/settings&quot;&gt;Django 설정 설명서&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="26a276856b644a8829e847fabc786f7f950cbafe" translate="yes" xml:space="preserve">
          <source>In order to serialize objects other than &lt;code&gt;dict&lt;/code&gt; you must set the &lt;code&gt;safe&lt;/code&gt; parameter to &lt;code&gt;False&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;dict&lt;/code&gt; 이외의 객체를 직렬화 하려면 &lt;code&gt;safe&lt;/code&gt; 매개 변수를 &lt;code&gt;False&lt;/code&gt; 로 설정해야합니다 .</target>
        </trans-unit>
        <trans-unit id="bef01765dc926124667e6f25f418d12592815fda" translate="yes" xml:space="preserve">
          <source>In order to serve different sites in production, you&amp;rsquo;d create a separate settings file with each &lt;code&gt;SITE_ID&lt;/code&gt; (perhaps importing from a common settings file to avoid duplicating shared settings) and then specify the appropriate &lt;a href=&quot;../../topics/settings#envvar-DJANGO_SETTINGS_MODULE&quot; id=&quot;index-0&quot;&gt;&lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt;&lt;/a&gt; for each site.</source>
          <target state="translated">프로덕션 환경에서 서로 다른 사이트를 제공하려면 각 &lt;code&gt;SITE_ID&lt;/code&gt; 로 별도의 설정 파일을 만들고 (공유 설정의 중복을 피하기 위해 공통 설정 파일에서 가져 오기) 각 사이트에 적절한 &lt;a href=&quot;../../topics/settings#envvar-DJANGO_SETTINGS_MODULE&quot; id=&quot;index-0&quot;&gt; &lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt; &lt;/a&gt; 을 지정합니다 .</target>
        </trans-unit>
        <trans-unit id="f1fc64af07066814f008513d76447706a68a9ba2" translate="yes" xml:space="preserve">
          <source>In order to show customized HTML when Django returns a 404, you can create an HTML template named &lt;code&gt;404.html&lt;/code&gt; and place it in the top level of your template tree. This template will then be served when &lt;a href=&quot;../../ref/settings#std:setting-DEBUG&quot;&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;/a&gt; is set to &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="translated">Django가 404를 반환 할 때 사용자 정의 된 HTML을 표시하기 위해 &lt;code&gt;404.html&lt;/code&gt; 이라는 HTML 템플리트를 작성 하여 템플리트 트리의 최상위 레벨에 배치 할 수 있습니다 . 그런 다음 &lt;a href=&quot;../../ref/settings#std:setting-DEBUG&quot;&gt; &lt;code&gt;DEBUG&lt;/code&gt; &lt;/a&gt; 가 &lt;code&gt;False&lt;/code&gt; 로 설정 되면이 템플리트가 제공됩니다 .</target>
        </trans-unit>
        <trans-unit id="3409046afa59c093b23889795e8442232cd66efe" translate="yes" xml:space="preserve">
          <source>In order to test class-based views outside of the request/response cycle you must ensure that they are configured correctly, by calling &lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.View.setup&quot;&gt;&lt;code&gt;setup()&lt;/code&gt;&lt;/a&gt; after instantiation.</source>
          <target state="translated">요청 / 응답주기 외부에서 클래스 기반보기를 테스트하려면 인스턴스화 후 &lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.View.setup&quot;&gt; &lt;code&gt;setup()&lt;/code&gt; &lt;/a&gt; 을 호출하여 올바르게보기를 구성해야합니다 .</target>
        </trans-unit>
        <trans-unit id="8c0c7c490993a4b8206ebaa2bae3d78e513a3e92" translate="yes" xml:space="preserve">
          <source>In order to understand what happens in your query, consider inspecting the &lt;code&gt;query&lt;/code&gt; property of your &lt;code&gt;QuerySet&lt;/code&gt;.</source>
          <target state="translated">쿼리에서 발생하는 상황을 이해하려면 &lt;code&gt;QuerySet&lt;/code&gt; 의 &lt;code&gt;query&lt;/code&gt; 속성을 검사하십시오 .</target>
        </trans-unit>
        <trans-unit id="c570b617951053ed3053b9d4c9a52cb627915e3e" translate="yes" xml:space="preserve">
          <source>In order to use GeoDjango, you will need to add your Python and OSGeo4W directories to your Windows system &lt;code&gt;Path&lt;/code&gt;, as well as create &lt;code&gt;GDAL_DATA&lt;/code&gt; and &lt;code&gt;PROJ_LIB&lt;/code&gt; environment variables. The following set of commands, executable with &lt;code&gt;cmd.exe&lt;/code&gt;, will set this up:</source>
          <target state="translated">GeoDjango를 사용하려면 Python 및 OSGeo4W 디렉토리를 Windows 시스템 &lt;code&gt;Path&lt;/code&gt; 에 &lt;code&gt;GDAL_DATA&lt;/code&gt; 하고 &lt;code&gt;PROJ_LIB&lt;/code&gt; 및 PROJ_LIB 환경 변수 를 작성 해야 합니다. &lt;code&gt;cmd.exe&lt;/code&gt; 로 실행 가능한 다음 명령 세트가이를 설정합니다.</target>
        </trans-unit>
        <trans-unit id="ded6a8537ff07979ac6a5c88d86c82670bed0de7" translate="yes" xml:space="preserve">
          <source>In order to use another client-side library to handle translations, you may want to take advantage of the &lt;code&gt;JSONCatalog&lt;/code&gt; view. It&amp;rsquo;s similar to &lt;a href=&quot;#django.views.i18n.JavaScriptCatalog&quot;&gt;&lt;code&gt;JavaScriptCatalog&lt;/code&gt;&lt;/a&gt; but returns a JSON response.</source>
          <target state="translated">다른 클라이언트 측 라이브러리를 사용하여 번역을 처리하기 위해 &lt;code&gt;JSONCatalog&lt;/code&gt; 보기를 활용할 수 있습니다. &lt;a href=&quot;#django.views.i18n.JavaScriptCatalog&quot;&gt; &lt;code&gt;JavaScriptCatalog&lt;/code&gt; &lt;/a&gt; 와 비슷 하지만 JSON 응답을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="68a8c6184d43fa10d946434ba4ead136463b3827" translate="yes" xml:space="preserve">
          <source>In order to use the &lt;code&gt;Hand&lt;/code&gt; class in our models, we &lt;strong&gt;do not&lt;/strong&gt; have to change this class at all. This is ideal, because it means you can easily write model support for existing classes where you cannot change the source code.</source>
          <target state="translated">모델에서 &lt;code&gt;Hand&lt;/code&gt; 클래스 를 사용하기 위해이 클래스를 전혀 변경할 &lt;strong&gt;필요는 없습니다&lt;/strong&gt; . 소스 코드를 변경할 수없는 기존 클래스에 대한 모델 지원을 쉽게 작성할 수 있기 때문에 이상적입니다.</target>
        </trans-unit>
        <trans-unit id="482b7e02eb0c4ca18c3f11eba075a9c3cbab0ed5" translate="yes" xml:space="preserve">
          <source>In other words, if you set the name of the database in &lt;a href=&quot;settings#std:setting-OPTIONS&quot;&gt;&lt;code&gt;OPTIONS&lt;/code&gt;&lt;/a&gt;, this will take precedence over &lt;a href=&quot;settings#std:setting-NAME&quot;&gt;&lt;code&gt;NAME&lt;/code&gt;&lt;/a&gt;, which would override anything in a &lt;a href=&quot;https://dev.mysql.com/doc/refman/en/option-files.html&quot;&gt;MySQL option file&lt;/a&gt;.</source>
          <target state="translated">즉, &lt;a href=&quot;settings#std:setting-OPTIONS&quot;&gt; &lt;code&gt;OPTIONS&lt;/code&gt; &lt;/a&gt; 에서 데이터베이스 이름을 설정하면 &lt;a href=&quot;settings#std:setting-NAME&quot;&gt; &lt;code&gt;NAME&lt;/code&gt; &lt;/a&gt; 보다 우선하며 이는 &lt;a href=&quot;https://dev.mysql.com/doc/refman/en/option-files.html&quot;&gt;MySQL 옵션 파일의&lt;/a&gt; 모든 항목을 무시 합니다 .</target>
        </trans-unit>
        <trans-unit id="348e74db786d501ec367bbeb95b86df85b7e5a62" translate="yes" xml:space="preserve">
          <source>In other words, the usual use is to examine the deserialized objects to make sure that they are &amp;ldquo;appropriate&amp;rdquo; for saving before doing so. Of course, if you trust your data source you can instead save the object directly and move on.</source>
          <target state="translated">다시 말해, 일반적으로 역 직렬화 된 객체를 검사하여 저장하기 전에 &quot;적절한&quot;객체인지 확인합니다. 물론 데이터 소스를 신뢰하는 경우 대신 객체를 직접 저장하고 계속 진행할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="87a0055fdb9b686309bb27e57a048438c7379179" translate="yes" xml:space="preserve">
          <source>In other words, to override a command, the new command must have the same name and its app must be before the overridden command&amp;rsquo;s app in &lt;a href=&quot;../ref/settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">즉, 명령을 재정의하려면 새 명령의 이름이 동일해야하며 &lt;a href=&quot;../ref/settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt; 에서 재정의 된 명령의 앱 앞에 해당 앱이 있어야합니다 .</target>
        </trans-unit>
        <trans-unit id="b80ed963edad5d68b67324a7f70c9b908485886a" translate="yes" xml:space="preserve">
          <source>In other words, what&amp;rsquo;s needed is a DRY mechanism. Among other advantages it would allow evolution of the URL design without having to go over all the project source code to search and replace outdated URLs.</source>
          <target state="translated">다시 말해, 필요한 것은 DRY 메커니즘입니다. 다른 장점들 중에서도 오래된 프로젝트를 검색하고 교체하기 위해 모든 프로젝트 소스 코드를 거치지 않고도 URL 디자인을 발전시킬 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="321459efe8129cd478ea12c0e5f6183e07ff2a01" translate="yes" xml:space="preserve">
          <source>In other words, your applications&amp;rsquo; root packages and the modules that define your application configuration classes shouldn&amp;rsquo;t import any models, even indirectly.</source>
          <target state="translated">다시 말해, 응용 프로그램의 루트 패키지와 응용 프로그램 구성 클래스를 정의하는 모듈은 모델을 간접적으로 가져 오지 않아야합니다.</target>
        </trans-unit>
        <trans-unit id="87949143eea93ab9a8d8bacabc4b969b2cd76026" translate="yes" xml:space="preserve">
          <source>In our &lt;code&gt;HandField&lt;/code&gt; class, we&amp;rsquo;re storing the data as a VARCHAR field in the database, so we need to be able to process strings and &lt;code&gt;None&lt;/code&gt; in the &lt;code&gt;from_db_value()&lt;/code&gt;. In &lt;code&gt;to_python()&lt;/code&gt;, we need to also handle &lt;code&gt;Hand&lt;/code&gt; instances:</source>
          <target state="translated">우리에 &lt;code&gt;HandField&lt;/code&gt; 의 우리가 공정 문자열을 할 수 있어야하고, 그래서 클래스, 우리는 데이터베이스의 VARCHAR 필드와 데이터를 저장하고 &lt;code&gt;None&lt;/code&gt; 에서 &lt;code&gt;from_db_value()&lt;/code&gt; . 에서 &lt;code&gt;to_python()&lt;/code&gt; , 우리는 또한 처리 할 필요가 &lt;code&gt;Hand&lt;/code&gt; 인스턴스를 :</target>
        </trans-unit>
        <trans-unit id="8ec59e4ab401ce0ece29fca3cb173154f5ebfc03" translate="yes" xml:space="preserve">
          <source>In our example, we&amp;rsquo;ll call our field &lt;code&gt;HandField&lt;/code&gt;. (It&amp;rsquo;s a good idea to call your &lt;a href=&quot;../ref/models/fields#django.db.models.Field&quot;&gt;&lt;code&gt;Field&lt;/code&gt;&lt;/a&gt; subclass &lt;code&gt;&amp;lt;Something&amp;gt;Field&lt;/code&gt;, so it&amp;rsquo;s easily identifiable as a &lt;a href=&quot;../ref/models/fields#django.db.models.Field&quot;&gt;&lt;code&gt;Field&lt;/code&gt;&lt;/a&gt; subclass.) It doesn&amp;rsquo;t behave like any existing field, so we&amp;rsquo;ll subclass directly from &lt;a href=&quot;../ref/models/fields#django.db.models.Field&quot;&gt;&lt;code&gt;Field&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">이 예에서는 &lt;code&gt;HandField&lt;/code&gt; 필드를 호출합니다 . ( &lt;a href=&quot;../ref/models/fields#django.db.models.Field&quot;&gt; &lt;code&gt;Field&lt;/code&gt; &lt;/a&gt; 서브 클래스 &lt;code&gt;&amp;lt;Something&amp;gt;Field&lt;/code&gt; 를 호출하는 것이 좋습니다 . 따라서 &lt;a href=&quot;../ref/models/fields#django.db.models.Field&quot;&gt; &lt;code&gt;Field&lt;/code&gt; &lt;/a&gt; 서브 클래스 로 쉽게 식별 할 수 있습니다 .) 기존 필드처럼 작동하지 않으므로 &lt;a href=&quot;../ref/models/fields#django.db.models.Field&quot;&gt; &lt;code&gt;Field&lt;/code&gt; &lt;/a&gt; 에서 직접 서브 클래스됩니다 :</target>
        </trans-unit>
        <trans-unit id="200d03f759a98a5f63a0cca6040dab99cbf456aa" translate="yes" xml:space="preserve">
          <source>In our first test, we focused closely on the internal behavior of the code. For this test, we want to check its behavior as it would be experienced by a user through a web browser.</source>
          <target state="translated">첫 번째 테스트에서는 코드의 내부 동작에 면밀히 초점을 맞췄습니다. 이 테스트에서는 웹 브라우저를 통해 사용자가 경험할 수있는 동작을 확인하려고합니다.</target>
        </trans-unit>
        <trans-unit id="be3f232c87c2467fa6a724407cf4bb950c14ef61" translate="yes" xml:space="preserve">
          <source>In our poll app, we&amp;rsquo;ll create two models: &lt;code&gt;Question&lt;/code&gt; and &lt;code&gt;Choice&lt;/code&gt;. A &lt;code&gt;Question&lt;/code&gt; has a question and a publication date. A &lt;code&gt;Choice&lt;/code&gt; has two fields: the text of the choice and a vote tally. Each &lt;code&gt;Choice&lt;/code&gt; is associated with a &lt;code&gt;Question&lt;/code&gt;.</source>
          <target state="translated">설문 조사 앱에서 &lt;code&gt;Question&lt;/code&gt; 과 &lt;code&gt;Choice&lt;/code&gt; 의 두 가지 모델을 만듭니다 . &lt;code&gt;Question&lt;/code&gt; 질문과 발행일을 가지고있다. &lt;code&gt;Choice&lt;/code&gt; 선택의 텍스트와 투표 집계 : 두 개의 필드가 있습니다. 각 &lt;code&gt;Choice&lt;/code&gt; 은 &lt;code&gt;Question&lt;/code&gt; 과 관련이 있습니다.</target>
        </trans-unit>
        <trans-unit id="8c9571e16932b147d1f1c8511a5d04504310d27a" translate="yes" xml:space="preserve">
          <source>In our poll application, we&amp;rsquo;ll have the following four views:</source>
          <target state="translated">설문 조사 신청에는 다음과 같은 네 가지 견해가 있습니다.</target>
        </trans-unit>
        <trans-unit id="bf972e12a966ca6c6eecb8fe6283423f8ce689ac" translate="yes" xml:space="preserve">
          <source>In practice you&amp;rsquo;d probably want to record the interest in a key-value store rather than in a relational database, so we&amp;rsquo;ve left that bit out. The only bit of the view that needs to worry about using &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin&quot;&gt;&lt;code&gt;SingleObjectMixin&lt;/code&gt;&lt;/a&gt; is where we want to look up the author we&amp;rsquo;re interested in, which it does with a call to &lt;code&gt;self.get_object()&lt;/code&gt;. Everything else is taken care of for us by the mixin.</source>
          <target state="translated">실제로 관계형 데이터베이스가 아닌 키-값 저장소에 관심을 기록하고 싶을 것이므로 그 부분을 생략했습니다. &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin&quot;&gt; &lt;code&gt;SingleObjectMixin&lt;/code&gt; &lt;/a&gt; 사용에 대해 걱정해야 할 부분 은 &lt;code&gt;self.get_object()&lt;/code&gt; 호출하여 관심있는 작성자를 찾는 것 입니다. 다른 모든 것은 mixin에 의해 우리를 위해 돌보아집니다.</target>
        </trans-unit>
        <trans-unit id="f5a8cc8880a64d6f073c4d7908bd6dba8d796910" translate="yes" xml:space="preserve">
          <source>In practice you&amp;rsquo;ll use this to get a string you can use in multiple places in a template or so you can use the output as an argument for other template tags or filters.</source>
          <target state="translated">실제로 이것을 사용하여 템플릿의 여러 위치에서 사용할 수있는 문자열을 얻거나 출력을 다른 템플릿 태그 또는 필터의 인수로 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b07696c8063df15fbf4c588d34e006df6dbe3901" translate="yes" xml:space="preserve">
          <source>In practice you&amp;rsquo;ll use this to get a string you can use in multiple places in a template or so you can use the output as an argument for other template tags or filters:</source>
          <target state="translated">실제로 이것을 사용하여 템플릿의 여러 위치에서 사용할 수있는 문자열을 얻거나 출력을 다른 템플릿 태그 또는 필터의 인수로 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d297ccfa88b8ebaa61778e3119442058ee0cb9c0" translate="yes" xml:space="preserve">
          <source>In practice, it&amp;rsquo;s often easiest to use &lt;code&gt;chunks()&lt;/code&gt; all the time. Looping over &lt;code&gt;chunks()&lt;/code&gt; instead of using &lt;code&gt;read()&lt;/code&gt; ensures that large files don&amp;rsquo;t overwhelm your system&amp;rsquo;s memory.</source>
          <target state="translated">실제로는 항상 &lt;code&gt;chunks()&lt;/code&gt; 를 사용하는 것이 가장 쉬운 방법 입니다. &lt;code&gt;read()&lt;/code&gt; &lt;code&gt;chunks()&lt;/code&gt; 대신 chunks () 를 반복 하면 큰 파일이 시스템 메모리를 압도하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="1b8e788eb6f744c88e1daabbf412406627452a09" translate="yes" xml:space="preserve">
          <source>In practice, signal handlers are usually defined in a &lt;code&gt;signals&lt;/code&gt; submodule of the application they relate to. Signal receivers are connected in the &lt;a href=&quot;../ref/applications#django.apps.AppConfig.ready&quot;&gt;&lt;code&gt;ready()&lt;/code&gt;&lt;/a&gt; method of your application configuration class. If you&amp;rsquo;re using the &lt;a href=&quot;#django.dispatch.receiver&quot;&gt;&lt;code&gt;receiver()&lt;/code&gt;&lt;/a&gt; decorator, import the &lt;code&gt;signals&lt;/code&gt; submodule inside &lt;a href=&quot;../ref/applications#django.apps.AppConfig.ready&quot;&gt;&lt;code&gt;ready()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">실제로, 신호 처리기는 일반적으로 관련 응용 프로그램 의 &lt;code&gt;signals&lt;/code&gt; 하위 모듈에 정의 됩니다. 신호 수신기는 애플리케이션 구성 클래스 의 &lt;a href=&quot;../ref/applications#django.apps.AppConfig.ready&quot;&gt; &lt;code&gt;ready()&lt;/code&gt; &lt;/a&gt; 메소드로 연결됩니다 . &lt;a href=&quot;#django.dispatch.receiver&quot;&gt; &lt;code&gt;receiver()&lt;/code&gt; &lt;/a&gt; 데코레이터를 사용하는 경우 &lt;code&gt;signals&lt;/code&gt; 하위 모듈을 &lt;a href=&quot;../ref/applications#django.apps.AppConfig.ready&quot;&gt; &lt;code&gt;ready()&lt;/code&gt; &lt;/a&gt; 내부로 가져옵니다 .</target>
        </trans-unit>
        <trans-unit id="5e303b3791ba00ba2f2730c84ffcba41b1b0fece" translate="yes" xml:space="preserve">
          <source>In practice, this feature wraps every view function in the &lt;a href=&quot;#django.db.transaction.atomic&quot;&gt;&lt;code&gt;atomic()&lt;/code&gt;&lt;/a&gt; decorator described below.</source>
          <target state="translated">실제로이 기능은 아래에 설명 된 &lt;a href=&quot;#django.db.transaction.atomic&quot;&gt; &lt;code&gt;atomic()&lt;/code&gt; &lt;/a&gt; 데코레이터 의 모든 뷰 함수를 래핑 합니다.</target>
        </trans-unit>
        <trans-unit id="807d6a79df3e61ec95aafb0098dd4efac1e3da72" translate="yes" xml:space="preserve">
          <source>In practice, this is rarely an issue. Django gives you aware datetime objects in the models and forms, and most often, new datetime objects are created from existing ones through &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.timedelta&quot;&gt;&lt;code&gt;timedelta&lt;/code&gt;&lt;/a&gt; arithmetic. The only datetime that&amp;rsquo;s often created in application code is the current time, and &lt;a href=&quot;../../ref/utils#django.utils.timezone.now&quot;&gt;&lt;code&gt;timezone.now()&lt;/code&gt;&lt;/a&gt; automatically does the right thing.</source>
          <target state="translated">실제로 이것은 거의 문제가되지 않습니다. Django는 모델과 폼에서 날짜 / 시간 객체를 인식하며, 대부분 새로운 날짜 / 시간 객체는 기존 &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.timedelta&quot;&gt; &lt;code&gt;timedelta&lt;/code&gt; &lt;/a&gt; 에서 시간 델타 산술을 통해 생성됩니다 . 응용 프로그램 코드에서 자주 생성되는 유일한 날짜 시간은 현재 시간이며 &lt;a href=&quot;../../ref/utils#django.utils.timezone.now&quot;&gt; &lt;code&gt;timezone.now()&lt;/code&gt; &lt;/a&gt; 자동으로 올바른 일을합니다.</target>
        </trans-unit>
        <trans-unit id="b637ff00ea296f5217d7753924c94e2a84bd6acf" translate="yes" xml:space="preserve">
          <source>In practice, you probably won&amp;rsquo;t need to use &lt;a href=&quot;#django.contrib.auth.models.AnonymousUser&quot;&gt;&lt;code&gt;AnonymousUser&lt;/code&gt;&lt;/a&gt; objects on your own, but they&amp;rsquo;re used by Web requests, as explained in the next section.</source>
          <target state="translated">실제로는 &lt;a href=&quot;#django.contrib.auth.models.AnonymousUser&quot;&gt; &lt;code&gt;AnonymousUser&lt;/code&gt; &lt;/a&gt; 개체를 직접 사용할 필요는 없지만 다음 섹션에서 설명하는 것처럼 웹 요청에서 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="05f63b699e28cf435f1bb4b69860a1d658a1a201" translate="yes" xml:space="preserve">
          <source>In practice, you will usually specify &lt;code&gt;request.FILES&lt;/code&gt; as the source of file data (just like you use &lt;code&gt;request.POST&lt;/code&gt; as the source of form data):</source>
          <target state="translated">실제로, 일반적으로 &lt;code&gt;request.FILES&lt;/code&gt; 를 파일 데이터의 소스로 지정합니다 ( &lt;code&gt;request.POST&lt;/code&gt; 를 양식 데이터의 소스로 사용하는 것처럼).</target>
        </trans-unit>
        <trans-unit id="b18791ebd38e85110f995871c6815d3b19ab08ca" translate="yes" xml:space="preserve">
          <source>In previous parts of the tutorial, the templates have been provided with a context that contains the &lt;code&gt;question&lt;/code&gt; and &lt;code&gt;latest_question_list&lt;/code&gt; context variables. For &lt;code&gt;DetailView&lt;/code&gt; the &lt;code&gt;question&lt;/code&gt; variable is provided automatically &amp;ndash; since we&amp;rsquo;re using a Django model (&lt;code&gt;Question&lt;/code&gt;), Django is able to determine an appropriate name for the context variable. However, for ListView, the automatically generated context variable is &lt;code&gt;question_list&lt;/code&gt;. To override this we provide the &lt;code&gt;context_object_name&lt;/code&gt; attribute, specifying that we want to use &lt;code&gt;latest_question_list&lt;/code&gt; instead. As an alternative approach, you could change your templates to match the new default context variables &amp;ndash; but it&amp;rsquo;s a lot easier to tell Django to use the variable you want.</source>
          <target state="translated">학습서의 이전 부분에서 템플리트에는 &lt;code&gt;question&lt;/code&gt; 및 &lt;code&gt;latest_question_list&lt;/code&gt; 컨텍스트 변수 가 포함 된 컨텍스트가 제공되었습니다 . 들어 &lt;code&gt;DetailView&lt;/code&gt; &lt;code&gt;question&lt;/code&gt; 변수는 자동으로 제공됩니다 - 우리가 장고 모델 (사용하고 있기 때문에 &lt;code&gt;Question&lt;/code&gt; ), 장고는 컨텍스트 변수에 대한 적절한 이름을 결정할 수있다. 그러나 ListView의 경우 자동으로 생성 된 컨텍스트 변수는 &lt;code&gt;question_list&lt;/code&gt; 입니다. 이를 무시하기 위해 &lt;code&gt;context_object_name&lt;/code&gt; 속성 을 제공하여 &lt;code&gt;latest_question_list&lt;/code&gt; 를 사용하도록 지정합니다.대신에. 대안으로, 새로운 기본 컨텍스트 변수와 일치하도록 템플릿을 변경할 수 있습니다. 그러나 장고에게 원하는 변수를 사용하도록 지시하는 것이 훨씬 쉽습니다.</target>
        </trans-unit>
        <trans-unit id="1f6f3aa09d467d54d4f032943cbd599296ba5ef5" translate="yes" xml:space="preserve">
          <source>In previous versions of Django, it was necessary to first annotate and then filter against the annotation. This resulted in the annotated value always being present in the query result, and often resulted in a query that took more time to execute.</source>
          <target state="translated">이전 버전의 Django에서는 먼저 주석을 달고 주석을 필터링해야했습니다. 이로 인해 어노테이션이있는 값이 항상 쿼리 결과에 나타나고 종종 쿼리 실행에 더 많은 시간이 걸렸습니다.</target>
        </trans-unit>
        <trans-unit id="857c7ad4641da7dfb7c6325f24baaa53cf1e388e" translate="yes" xml:space="preserve">
          <source>In short, when multiple simultaneous requests from the same client are involved, messages are not guaranteed to be delivered to the same window that created them nor, in some cases, at all. Note that this is typically not a problem in most applications and will become a non-issue in HTML5, where each window/tab will have its own browsing context.</source>
          <target state="translated">즉, 동일한 클라이언트의 여러 동시 요청이 관련된 경우 메시지가 해당 창을 만든 동일한 창으로 전달되거나 일부 경우에는 전혀 전달되지 않을 수 있습니다. 이는 대부분의 응용 프로그램에서 일반적으로 문제가되지 않으며 HTML5에서는 문제가되지 않으며 각 창 / 탭에는 고유 한 탐색 컨텍스트가 있습니다.</target>
        </trans-unit>
        <trans-unit id="c1af56e92f61b1b8ed524de14c455aa50b0aab85" translate="yes" xml:space="preserve">
          <source>In some cases you may wish to dynamically change which &lt;code&gt;Transform&lt;/code&gt; or &lt;code&gt;Lookup&lt;/code&gt; is returned based on the name passed in, rather than fixing it. As an example, you could have a field which stores coordinates or an arbitrary dimension, and wish to allow a syntax like &lt;code&gt;.filter(coords__x7=4)&lt;/code&gt; to return the objects where the 7th coordinate has value 4. In order to do this, you would override &lt;code&gt;get_lookup&lt;/code&gt; with something like:</source>
          <target state="translated">경우 에 따라 전달 된 이름을 기준으로 수정하지 않고 &lt;code&gt;Transform&lt;/code&gt; 또는 &lt;code&gt;Lookup&lt;/code&gt; 가 리턴 되는 동적 변경을 원할 수 있습니다 . 예를 들어, 좌표 또는 임의의 차원을 저장하는 필드가 있고 &lt;code&gt;.filter(coords__x7=4)&lt;/code&gt; 와 같은 구문을 사용 하여 7 번째 좌표가 4 인 오브젝트를 리턴하도록 할 수 있습니다. &lt;code&gt;get_lookup&lt;/code&gt; 을 다음과 같이 재정의합니다 .</target>
        </trans-unit>
        <trans-unit id="5fdef86b13548e606f863fbd8e30806d3a23d8c0" translate="yes" xml:space="preserve">
          <source>In some cases you might want to capture the result of &lt;code&gt;widthratio&lt;/code&gt; in a variable. It can be useful, for instance, in a &lt;a href=&quot;../../topics/i18n/translation#std:templatetag-blocktrans&quot;&gt;&lt;code&gt;blocktrans&lt;/code&gt;&lt;/a&gt; like this:</source>
          <target state="translated">경우 에 따라 변수에서 &lt;code&gt;widthratio&lt;/code&gt; 의 결과를 캡처 할 수 있습니다 . 예를 들어 &lt;a href=&quot;../../topics/i18n/translation#std:templatetag-blocktrans&quot;&gt; &lt;code&gt;blocktrans&lt;/code&gt; &lt;/a&gt; 과 같은 블록 트랜스 에서 유용 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="1b575c3528640df48c24349d84fecc89450e51b0" translate="yes" xml:space="preserve">
          <source>In some cases you might want to refer to the current value of a cycle without advancing to the next value. To do this, give the &lt;code&gt;{% cycle %}&lt;/code&gt; tag a name, using &amp;ldquo;as&amp;rdquo;, like this:</source>
          <target state="translated">경우에 따라 다음 값으로 진행하지 않고 사이클의 현재 값을 참조 할 수 있습니다. 이렇게하려면 다음 과 같이 &quot;as&quot;를 사용하여 &lt;code&gt;{% cycle %}&lt;/code&gt; 태그에 이름을 지정하십시오.</target>
        </trans-unit>
        <trans-unit id="29c5cbea71be2c58cfaf5424459023b0c9686745" translate="yes" xml:space="preserve">
          <source>In some cases, such as strings with a percent sign followed by a space and a &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#old-string-formatting&quot;&gt;string conversion type&lt;/a&gt; (e.g. &lt;code&gt;_(&quot;10% interest&quot;)&lt;/code&gt;), &lt;a href=&quot;../../ref/utils#django.utils.translation.gettext&quot;&gt;&lt;code&gt;gettext()&lt;/code&gt;&lt;/a&gt; incorrectly flags strings with &lt;code&gt;python-format&lt;/code&gt;.</source>
          <target state="translated">퍼센트 부호가있는 &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#old-string-formatting&quot;&gt;문자열&lt;/a&gt; 과 공백 및 문자열 변환 유형 (예 : &lt;code&gt;_(&quot;10% interest&quot;)&lt;/code&gt; )이있는 경우와 같이 &lt;a href=&quot;../../ref/utils#django.utils.translation.gettext&quot;&gt; &lt;code&gt;gettext()&lt;/code&gt; &lt;/a&gt; 문자열에 &lt;code&gt;python-format&lt;/code&gt; 을 잘못 플래그 합니다 .</target>
        </trans-unit>
        <trans-unit id="0daf50f8b596a24cd4a4b70959499e29894a58dc" translate="yes" xml:space="preserve">
          <source>In some cases, you might want to bypass the &lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt; environment variable. For example, if you&amp;rsquo;re using the template system by itself, you likely don&amp;rsquo;t want to have to set up an environment variable pointing to a settings module.</source>
          <target state="translated">경우에 따라 &lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt; 환경 변수 를 무시할 수도 있습니다 . 예를 들어 템플릿 시스템을 단독으로 사용하는 경우 설정 모듈을 가리키는 환경 변수를 설정하지 않아도됩니다.</target>
        </trans-unit>
        <trans-unit id="8dbcdb94c1eff87b6c56ef91c1c4506628f40cf0" translate="yes" xml:space="preserve">
          <source>In some cases, you won&amp;rsquo;t need to register your check function &amp;ndash; you can piggyback on an existing registration.</source>
          <target state="translated">경우에 따라 확인 기능을 등록 할 필요가 없습니다. 기존 등록을 피기 백 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8a2f86e668a97029be624ec47a33ad2137608e0e" translate="yes" xml:space="preserve">
          <source>In some circumstances, the code connecting receivers to signals may run multiple times. This can cause your receiver function to be registered more than once, and thus called multiple times for a single signal event.</source>
          <target state="translated">경우에 따라 수신기를 신호에 연결하는 코드가 여러 번 실행될 수 있습니다. 이로 인해 수신기 기능이 두 번 이상 등록되어 단일 신호 이벤트에 대해 여러 번 호출 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="79d711a83ce7a924bc3594bf29585bfc7129050d" translate="yes" xml:space="preserve">
          <source>In some complex data-modeling situations, your models might contain a lot of fields, some of which could contain a lot of data (for example, text fields), or require expensive processing to convert them to Python objects. If you are using the results of a queryset in some situation where you don&amp;rsquo;t know if you need those particular fields when you initially fetch the data, you can tell Django not to retrieve them from the database.</source>
          <target state="translated">일부 복잡한 데이터 모델링 상황에서 모델에는 많은 필드가있을 수 있으며, 일부 필드에는 많은 데이터 (예 : 텍스트 필드)가 포함되거나 Python 객체로 변환하기 위해 고가의 처리가 필요할 수 있습니다. 데이터를 처음 가져올 때 특정 필드가 필요한지 알 수없는 상황에서 쿼리 세트의 결과를 사용하는 경우 데이터베이스에서 검색하지 않도록 Django에 지시 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2774cd9614848bc838324a9f3925846c843cbd6c" translate="yes" xml:space="preserve">
          <source>In some rare cases, you might wish to pass parameters to the SQL fragments in &lt;code&gt;extra(select=...)&lt;/code&gt;. For this purpose, use the &lt;code&gt;select_params&lt;/code&gt; parameter.</source>
          <target state="translated">드문 경우에, &lt;code&gt;extra(select=...)&lt;/code&gt; 매개 변수를 SQL 단편에 전달할 수 있습니다 . 이를 위해 &lt;code&gt;select_params&lt;/code&gt; 매개 변수를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="4b48e88bf410f2cba633c2cb412176cbfa3a3eb6" translate="yes" xml:space="preserve">
          <source>In some rare circumstances, it&amp;rsquo;s necessary to be able to force the &lt;a href=&quot;#django.db.models.Model.save&quot;&gt;&lt;code&gt;save()&lt;/code&gt;&lt;/a&gt; method to perform an SQL &lt;code&gt;INSERT&lt;/code&gt; and not fall back to doing an &lt;code&gt;UPDATE&lt;/code&gt;. Or vice-versa: update, if possible, but not insert a new row. In these cases you can pass the &lt;code&gt;force_insert=True&lt;/code&gt; or &lt;code&gt;force_update=True&lt;/code&gt; parameters to the &lt;a href=&quot;#django.db.models.Model.save&quot;&gt;&lt;code&gt;save()&lt;/code&gt;&lt;/a&gt; method. Passing both parameters is an error: you cannot both insert &lt;em&gt;and&lt;/em&gt; update at the same time!</source>
          <target state="translated">드문 경우지만 &lt;a href=&quot;#django.db.models.Model.save&quot;&gt; &lt;code&gt;save()&lt;/code&gt; &lt;/a&gt; 메소드가 SQL &lt;code&gt;INSERT&lt;/code&gt; 를 수행 하도록 강제 할 수 있어야 하며 &lt;code&gt;UPDATE&lt;/code&gt; 수행으로 넘어 가지 않아야 합니다. 또는 그 반대의 경우 : 가능한 경우 업데이트하지만 새 행을 삽입하지 마십시오. 이 경우 &lt;code&gt;force_insert=True&lt;/code&gt; 또는 &lt;code&gt;force_update=True&lt;/code&gt; 매개 변수를 &lt;a href=&quot;#django.db.models.Model.save&quot;&gt; &lt;code&gt;save()&lt;/code&gt; &lt;/a&gt; 메소드에 전달할 수 있습니다 . 두 매개 변수를 모두 전달하면 오류가 발생합니다. 삽입 &lt;em&gt;과&lt;/em&gt; 업데이트를 동시에 수행 할 수 없습니다 !</target>
        </trans-unit>
        <trans-unit id="ce736764b432a2fae47c89320e8e9fd2392f9dd8" translate="yes" xml:space="preserve">
          <source>In some scenarios where views are of a generic nature, a many-to-one relationship might exist between URLs and views. For these cases the view name isn&amp;rsquo;t a good enough identifier for it when comes the time of reversing URLs. Read the next section to know about the solution Django provides for this.</source>
          <target state="translated">보기가 일반적인 특성 인 일부 시나리오에서는 URL과보기간에 다 대일 관계가 존재할 수 있습니다. 이 경우 URL을 되돌릴 때보기 이름이 충분하지 않습니다. 다음 장을 읽고 Django가 제공하는 솔루션에 대해 알아보십시오.</target>
        </trans-unit>
        <trans-unit id="b1e5d19e9d9d33f10b0a69c92fa82b62a739e1d4" translate="yes" xml:space="preserve">
          <source>In statement 1, a new &lt;code&gt;Person&lt;/code&gt; object is saved to the &lt;code&gt;first&lt;/code&gt; database. At this time, &lt;code&gt;p&lt;/code&gt; doesn&amp;rsquo;t have a primary key, so Django issues an SQL &lt;code&gt;INSERT&lt;/code&gt; statement. This creates a primary key, and Django assigns that primary key to &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="translated">명령문 1에서 새 &lt;code&gt;Person&lt;/code&gt; 오브젝트가 &lt;code&gt;first&lt;/code&gt; 데이터베이스에 저장 됩니다. 현재 &lt;code&gt;p&lt;/code&gt; 에는 기본 키가 없으므로 Django는 SQL &lt;code&gt;INSERT&lt;/code&gt; 문을 실행합니다. 그러면 기본 키가 생성되고 Django는 해당 기본 키를 &lt;code&gt;p&lt;/code&gt; 에 할당합니다 .</target>
        </trans-unit>
        <trans-unit id="e064abd9ffdc8b00766db1b2b02b9688bf7b519c" translate="yes" xml:space="preserve">
          <source>In templates: Using the &lt;a href=&quot;../../ref/templates/builtins#std:templatetag-url&quot;&gt;&lt;code&gt;url&lt;/code&gt;&lt;/a&gt; template tag.</source>
          <target state="translated">템플릿에서 : &lt;a href=&quot;../../ref/templates/builtins#std:templatetag-url&quot;&gt; &lt;code&gt;url&lt;/code&gt; &lt;/a&gt; 템플릿 태그 사용.</target>
        </trans-unit>
        <trans-unit id="cfdab87bc82efd3797239c4ba21d1d79e927c429" translate="yes" xml:space="preserve">
          <source>In that &lt;code&gt;register.inclusion_tag()&lt;/code&gt; line, we specified &lt;code&gt;takes_context=True&lt;/code&gt; and the name of the template. Here&amp;rsquo;s what the template &lt;code&gt;link.html&lt;/code&gt; might look like:</source>
          <target state="translated">그에서 &lt;code&gt;register.inclusion_tag()&lt;/code&gt; 라인, 우리는 지정된 &lt;code&gt;takes_context=True&lt;/code&gt; 및 템플릿의 이름입니다. &lt;code&gt;link.html&lt;/code&gt; 템플릿 은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="67c01f0adefa1043d3003b730cd2f663f4b756b7" translate="yes" xml:space="preserve">
          <source>In that form, the &amp;ldquo;Question&amp;rdquo; field is a select box containing every question in the database. Django knows that a &lt;a href=&quot;../ref/models/fields#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;ForeignKey&lt;/code&gt;&lt;/a&gt; should be represented in the admin as a &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; box. In our case, only one question exists at this point.</source>
          <target state="translated">이 양식에서 &quot;질문&quot;필드는 데이터베이스의 모든 질문을 포함하는 선택 상자입니다. Django는 &lt;a href=&quot;../ref/models/fields#django.db.models.ForeignKey&quot;&gt; &lt;code&gt;ForeignKey&lt;/code&gt; &lt;/a&gt; 가 관리자에서 &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; 상자 로 표시되어야한다는 것을 알고 있습니다 . 우리의 경우,이 시점에서 단 하나의 질문 만 존재합니다.</target>
        </trans-unit>
        <trans-unit id="e16803d7e5444774cf1847606a924ea98fc0f9ff" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;#built-in-field-classes&quot;&gt;built-in Field classes&lt;/a&gt; section below, each &lt;code&gt;Field&lt;/code&gt; defines the error message keys it uses.</source>
          <target state="translated">아래의 &lt;a href=&quot;#built-in-field-classes&quot;&gt;내장 필드 클래스&lt;/a&gt; 섹션에서 각 &lt;code&gt;Field&lt;/code&gt; 는 사용하는 오류 메시지 키를 정의합니다.</target>
        </trans-unit>
        <trans-unit id="4b8de39169c018ef000a9984f73650a25eb94d98" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;../../topics/auth/index#module-django.contrib.auth&quot;&gt;&lt;code&gt;authentication framework&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../topics/auth/default#django.contrib.auth.views.LoginView&quot;&gt;&lt;code&gt;django.contrib.auth.views.LoginView&lt;/code&gt;&lt;/a&gt; passes the current &lt;a href=&quot;#django.contrib.sites.models.Site&quot;&gt;&lt;code&gt;Site&lt;/code&gt;&lt;/a&gt; name to the template as &lt;code&gt;{{ site_name }}&lt;/code&gt;.</source>
          <target state="translated">에서 &lt;a href=&quot;../../topics/auth/index#module-django.contrib.auth&quot;&gt; &lt;code&gt;authentication framework&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../../topics/auth/default#django.contrib.auth.views.LoginView&quot;&gt; &lt;code&gt;django.contrib.auth.views.LoginView&lt;/code&gt; 가&lt;/a&gt; 현재 전달 &lt;a href=&quot;#django.contrib.sites.models.Site&quot;&gt; &lt;code&gt;Site&lt;/code&gt; &lt;/a&gt; 로 템플릿에 이름을 &lt;code&gt;{{ site_name }}&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f38cdaf92023e3d5b6ad536a62d5ac0850443cb2" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;../ref/contrib/admin/admindocs#module-django.contrib.admindocs&quot;&gt;&lt;code&gt;django.contrib.admindocs&lt;/code&gt;&lt;/a&gt; display, the field description is interpolated with &lt;code&gt;field.__dict__&lt;/code&gt; which allows the description to incorporate arguments of the field. For example, the description for &lt;a href=&quot;../ref/models/fields#django.db.models.CharField&quot;&gt;&lt;code&gt;CharField&lt;/code&gt;&lt;/a&gt; is:</source>
          <target state="translated">에서 &lt;a href=&quot;../ref/contrib/admin/admindocs#module-django.contrib.admindocs&quot;&gt; &lt;code&gt;django.contrib.admindocs&lt;/code&gt; 의&lt;/a&gt; 표시 필드의 설명과 보간 &lt;code&gt;field.__dict__&lt;/code&gt; 필드 법인 (法人) 인자로 설명 할 수있다. 예를 들어 &lt;a href=&quot;../ref/models/fields#django.db.models.CharField&quot;&gt; &lt;code&gt;CharField&lt;/code&gt; 에&lt;/a&gt; 대한 설명 은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="61a99f888da03252e37a49dc94b253027356d243" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;flatpages#module-django.contrib.flatpages&quot;&gt;&lt;code&gt;flatpages framework&lt;/code&gt;&lt;/a&gt;, each flatpage is associated with a particular site. When a flatpage is created, you specify its &lt;a href=&quot;#django.contrib.sites.models.Site&quot;&gt;&lt;code&gt;Site&lt;/code&gt;&lt;/a&gt;, and the &lt;a href=&quot;flatpages#django.contrib.flatpages.middleware.FlatpageFallbackMiddleware&quot;&gt;&lt;code&gt;FlatpageFallbackMiddleware&lt;/code&gt;&lt;/a&gt; checks the current site in retrieving flatpages to display.</source>
          <target state="translated">에서 &lt;a href=&quot;flatpages#module-django.contrib.flatpages&quot;&gt; &lt;code&gt;flatpages framework&lt;/code&gt; &lt;/a&gt; , 각 flatpage는 특정 사이트와 연결되어 있습니다. flatpage가 생성되면, 당신은 지정 &lt;a href=&quot;#django.contrib.sites.models.Site&quot;&gt; &lt;code&gt;Site&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;flatpages#django.contrib.flatpages.middleware.FlatpageFallbackMiddleware&quot;&gt; &lt;code&gt;FlatpageFallbackMiddleware&lt;/code&gt; 의&lt;/a&gt; 디스플레이에 flatpages를 검색 수표 현재 사이트.</target>
        </trans-unit>
        <trans-unit id="ab0e7037c1bb990ccc8f0010f58edfb9050005ab" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;redirects#module-django.contrib.redirects&quot;&gt;&lt;code&gt;redirects framework&lt;/code&gt;&lt;/a&gt;, each redirect object is associated with a particular site. When Django searches for a redirect, it takes into account the current site.</source>
          <target state="translated">에서 &lt;a href=&quot;redirects#module-django.contrib.redirects&quot;&gt; &lt;code&gt;redirects framework&lt;/code&gt; &lt;/a&gt; , 각 리디렉션 객체는 특정 사이트와 연결되어 있습니다. Django는 리디렉션을 검색 할 때 현재 사이트를 고려합니다.</target>
        </trans-unit>
        <trans-unit id="e00c865684c73ed393c739c654ec70b0bd8e2997" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;syndication#module-django.contrib.syndication&quot;&gt;&lt;code&gt;syndication framework&lt;/code&gt;&lt;/a&gt;, the templates for &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;description&lt;/code&gt; automatically have access to a variable &lt;code&gt;{{ site }}&lt;/code&gt;, which is the &lt;a href=&quot;#django.contrib.sites.models.Site&quot;&gt;&lt;code&gt;Site&lt;/code&gt;&lt;/a&gt; object representing the current site. Also, the hook for providing item URLs will use the &lt;code&gt;domain&lt;/code&gt; from the current &lt;a href=&quot;#django.contrib.sites.models.Site&quot;&gt;&lt;code&gt;Site&lt;/code&gt;&lt;/a&gt; object if you don&amp;rsquo;t specify a fully-qualified domain.</source>
          <target state="translated">에서 &lt;a href=&quot;syndication#module-django.contrib.syndication&quot;&gt; &lt;code&gt;syndication framework&lt;/code&gt; &lt;/a&gt; 를위한 템플릿 &lt;code&gt;title&lt;/code&gt; 및 &lt;code&gt;description&lt;/code&gt; 자동으로 변수에 액세스 할 수 있습니다 &lt;code&gt;{{ site }}&lt;/code&gt; 은 IS, &lt;a href=&quot;#django.contrib.sites.models.Site&quot;&gt; &lt;code&gt;Site&lt;/code&gt; &lt;/a&gt; 현재 위치를 나타내는 개체를. 또한 정규화 된 도메인을 지정하지 않으면 항목 URL을 제공하기위한 후크 에서 현재 &lt;a href=&quot;#django.contrib.sites.models.Site&quot;&gt; &lt;code&gt;Site&lt;/code&gt; &lt;/a&gt; 개체 의 &lt;code&gt;domain&lt;/code&gt; 을 사용 합니다.</target>
        </trans-unit>
        <trans-unit id="3cae9da1a42439d27f7e2fc7772d9140895ca585" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;as_p()&lt;/code&gt;, &lt;code&gt;as_ul()&lt;/code&gt; and &lt;code&gt;as_table()&lt;/code&gt; shortcuts, the fields are displayed in the order in which you define them in your form class. For example, in the &lt;code&gt;ContactForm&lt;/code&gt; example, the fields are defined in the order &lt;code&gt;subject&lt;/code&gt;, &lt;code&gt;message&lt;/code&gt;, &lt;code&gt;sender&lt;/code&gt;, &lt;code&gt;cc_myself&lt;/code&gt;. To reorder the HTML output, change the order in which those fields are listed in the class.</source>
          <target state="translated">에서 &lt;code&gt;as_p()&lt;/code&gt; , &lt;code&gt;as_ul()&lt;/code&gt; 및 &lt;code&gt;as_table()&lt;/code&gt; 바로 가기, 필드는 사용자가 양식 클래스를 정의하는 순서에 표시됩니다. 예를 들어, &lt;code&gt;ContactForm&lt;/code&gt; 예에서 필드는 order &lt;code&gt;subject&lt;/code&gt; , &lt;code&gt;message&lt;/code&gt; , &lt;code&gt;sender&lt;/code&gt; , &lt;code&gt;cc_myself&lt;/code&gt; 순서로 정의됩니다 . HTML 출력을 재정렬하려면 해당 필드가 클래스에 나열되는 순서를 변경하십시오.</target>
        </trans-unit>
        <trans-unit id="6ca61b57511e0384cfa193f4c62191a0072117aa" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;fixtures&lt;/code&gt; directory of every installed application</source>
          <target state="translated">설치된 모든 응용 프로그램 의 &lt;code&gt;fixtures&lt;/code&gt; 디렉토리</target>
        </trans-unit>
        <trans-unit id="c2e20542720527ab7cf07a8cbe445b23385b59fc" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;polls/urls.py&lt;/code&gt; file include the following code:</source>
          <target state="translated">에서 &lt;code&gt;polls/urls.py&lt;/code&gt; 파일에 다음 코드를 포함 :</target>
        </trans-unit>
        <trans-unit id="7e79d1c3816db22dfa49e704e2e1e701d76541a2" translate="yes" xml:space="preserve">
          <source>In the GitHub scenario, the session cookie would be allowed when following a regular link from an external website and be blocked in CSRF-prone request methods (e.g. &lt;code&gt;POST&lt;/code&gt;).</source>
          <target state="translated">GitHub 시나리오에서 세션 쿠키는 외부 웹 사이트에서 일반 링크를 따라갈 때 허용되며 CSRF가 발생하기 쉬운 요청 방법 (예 : &lt;code&gt;POST&lt;/code&gt; ) 에서 차단됩니다 .</target>
        </trans-unit>
        <trans-unit id="a35e39704ca75e16ec151ec02bb8d09c5245b059" translate="yes" xml:space="preserve">
          <source>In the SQL standards, each SQL query starts a transaction, unless one is already active. Such transactions must then be explicitly committed or rolled back.</source>
          <target state="translated">SQL 표준에서 각 SQL 쿼리는 이미 활성화되어 있지 않은 한 트랜잭션을 시작합니다. 그런 다음 이러한 트랜잭션을 명시 적으로 커밋하거나 롤백해야합니다.</target>
        </trans-unit>
        <trans-unit id="d85d9726aad9b5761b698a91a3fa752dcf0b2bef" translate="yes" xml:space="preserve">
          <source>In the above example, &lt;code&gt;{{ section.title }}&lt;/code&gt; will be replaced with the &lt;code&gt;title&lt;/code&gt; attribute of the &lt;code&gt;section&lt;/code&gt; object.</source>
          <target state="translated">위의 예에서 &lt;code&gt;{{ section.title }}&lt;/code&gt; 은 &lt;code&gt;section&lt;/code&gt; 객체 의 &lt;code&gt;title&lt;/code&gt; 속성 으로 대체됩니다 .</target>
        </trans-unit>
        <trans-unit id="c8e400b0450098c588ff1bf9ef3ced42847e2189" translate="yes" xml:space="preserve">
          <source>In the above example, both URL patterns point to the same view &amp;ndash; &lt;code&gt;views.page&lt;/code&gt; &amp;ndash; but the first pattern doesn&amp;rsquo;t capture anything from the URL. If the first pattern matches, the &lt;code&gt;page()&lt;/code&gt; function will use its default argument for &lt;code&gt;num&lt;/code&gt;, &lt;code&gt;1&lt;/code&gt;. If the second pattern matches, &lt;code&gt;page()&lt;/code&gt; will use whatever &lt;code&gt;num&lt;/code&gt; value was captured.</source>
          <target state="translated">위의 예에서 두 URL 패턴은 동일한보기 ( &lt;code&gt;views.page&lt;/code&gt; )를 가리 키지 만 첫 번째 패턴은 URL에서 아무것도 캡처하지 않습니다. 첫 번째 패턴이 일치하면 &lt;code&gt;page()&lt;/code&gt; 함수에 대한 기본 인수를 사용합니다 &lt;code&gt;num&lt;/code&gt; , &lt;code&gt;1&lt;/code&gt; . 두 번째 패턴이 일치하면 &lt;code&gt;page()&lt;/code&gt; 는 캡처 된 &lt;code&gt;num&lt;/code&gt; 값을 사용 합니다.</target>
        </trans-unit>
        <trans-unit id="fc33d28f955e8ad2642da30af478dafd323d4ae4" translate="yes" xml:space="preserve">
          <source>In the above example, only the fields &lt;code&gt;url&lt;/code&gt;, &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;content&lt;/code&gt; will be displayed, sequentially, in the form. &lt;code&gt;fields&lt;/code&gt; can contain values defined in &lt;a href=&quot;#django.contrib.admin.ModelAdmin.readonly_fields&quot;&gt;&lt;code&gt;ModelAdmin.readonly_fields&lt;/code&gt;&lt;/a&gt; to be displayed as read-only.</source>
          <target state="translated">위의 예에서는 &lt;code&gt;url&lt;/code&gt; , &lt;code&gt;title&lt;/code&gt; 및 &lt;code&gt;content&lt;/code&gt; 필드 만 양식으로 순차적으로 표시됩니다. &lt;code&gt;fields&lt;/code&gt; 는 &lt;a href=&quot;#django.contrib.admin.ModelAdmin.readonly_fields&quot;&gt; &lt;code&gt;ModelAdmin.readonly_fields&lt;/code&gt; &lt;/a&gt; 에 정의 된 값을 포함 하여 읽기 전용으로 표시 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="36256fe1165ee329fa178a898c6d788a746b521c" translate="yes" xml:space="preserve">
          <source>In the above example, the &amp;ldquo;age&amp;rdquo; field will be excluded but the &amp;ldquo;name&amp;rdquo; field will be included in the generated form.</source>
          <target state="translated">위의 예에서 &quot;나이&quot;필드는 제외되지만 &quot;이름&quot;필드는 생성 된 양식에 포함됩니다.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
